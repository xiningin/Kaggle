{"cell_type":{"9d5a373f":"code","84a09d15":"code","560218f5":"code","c8fc3942":"code","a7c18419":"code","cbd5849a":"code","1c8a9e4e":"code","770000cf":"code","1f49e695":"code","274e3159":"code","55aaa39e":"code","adaf7668":"code","ee78ac0b":"code","c9f75331":"code","5757d1f7":"code","f1c4ec00":"code","5b8d7dc6":"code","c08c2acc":"code","c2243ecb":"code","2a9efe50":"code","15a85da9":"code","9e805fda":"code","8964e670":"code","9b926dfb":"code","bcf03bbc":"code","065670a2":"code","da175e65":"code","f03c7055":"code","21a09899":"code","7cff547d":"code","8208f9c2":"code","77f21bbb":"code","467e09f4":"code","406e3e73":"code","db07f1a8":"code","cf85899a":"code","b7e8a3b4":"code","b1d55e6f":"code","c08c7641":"code","b6a42f10":"code","b1a3080e":"code","a2fbcd9f":"code","2bae0c4b":"code","24cf383f":"code","8190694d":"code","177e7c78":"code","0957d6ea":"code","d08a5470":"code","e7e3a216":"code","36bd9729":"code","5da10890":"code","c381278c":"code","8ae3949a":"code","b9e873df":"code","4992449e":"code","7cc965d4":"code","93132aa3":"code","36ae8469":"code","fde3ddac":"markdown","8ec02fcb":"markdown","400384e5":"markdown","0f9ee978":"markdown","d929db00":"markdown","2f736f53":"markdown","d48043ab":"markdown","33db18e6":"markdown","483e6d3f":"markdown","1f6a6ebe":"markdown","b8f99aa9":"markdown","93dd6ce5":"markdown","02d9568f":"markdown","5e8ad10a":"markdown","26549ce5":"markdown","52030b0c":"markdown","91a2f079":"markdown","0e713db5":"markdown","9d161159":"markdown","017b5914":"markdown","57142f1e":"markdown","32c53444":"markdown","ba893d55":"markdown","b2be9012":"markdown","bc440ed6":"markdown","a43350f7":"markdown","cfe46ccb":"markdown","e87575d2":"markdown","e00d444c":"markdown","8151c32f":"markdown","e2625439":"markdown","438a5905":"markdown","2fac2944":"markdown","c6aced11":"markdown","d9c5f7d2":"markdown","42956462":"markdown","41ad1ce5":"markdown","2255ee65":"markdown","cd1810b4":"markdown","49f8c0b2":"markdown","182e5f2e":"markdown","842aa443":"markdown","c11f352d":"markdown","9b3ee33c":"markdown","efd978da":"markdown","abb06722":"markdown","aa7f5df3":"markdown","dcbbae7a":"markdown","667907d9":"markdown"},"source":{"9d5a373f":"from datetime import datetime\ndt_string = datetime.now().strftime(\"%d\/%m\/%Y %H:%M:%S\")\nprint(f\"Updated {dt_string} (GMT)\")","84a09d15":"import pandas as pd \nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\nfrom matplotlib.patches import Rectangle\nimport seaborn as sns\nimport pydicom as dcm\n%matplotlib inline \nIS_LOCAL = False\nimport os\nif(IS_LOCAL):\n    PATH=\"..\/input\/rsna-pneumonia-detection-challenge\"\nelse:\n    PATH=\"..\/input\/\"\nprint(os.listdir(PATH))","560218f5":"class_info_df = pd.read_csv(PATH+'\/stage_2_detailed_class_info.csv')\ntrain_labels_df = pd.read_csv(PATH+'\/stage_2_train_labels.csv')                         ","c8fc3942":"print(f\"Detailed class info -  rows: {class_info_df.shape[0]}, columns: {class_info_df.shape[1]}\")\nprint(f\"Train labels -  rows: {train_labels_df.shape[0]}, columns: {train_labels_df.shape[1]}\")","a7c18419":"class_info_df.sample(10)","cbd5849a":"train_labels_df.sample(10)","1c8a9e4e":"def missing_data(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    return np.transpose(pd.concat([total, percent], axis=1, keys=['Total', 'Percent']))\nmissing_data(train_labels_df)","770000cf":"missing_data(class_info_df)","1f49e695":"f, ax = plt.subplots(1,1, figsize=(6,4))\ntotal = float(len(class_info_df))\nsns.countplot(class_info_df['class'],order = class_info_df['class'].value_counts().index, palette='Set3')\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(100*height\/total),\n            ha=\"center\") \nplt.show()","274e3159":"def get_feature_distribution(data, feature):\n    # Get the count for each label\n    label_counts = data[feature].value_counts()\n\n    # Get total number of samples\n    total_samples = len(data)\n\n    # Count the number of items in each class\n    print(\"Feature: {}\".format(feature))\n    for i in range(len(label_counts)):\n        label = label_counts.index[i]\n        count = label_counts.values[i]\n        percent = int((count \/ total_samples) * 10000) \/ 100\n        print(\"{:<30s}:   {} or {}%\".format(label, count, percent))\n\nget_feature_distribution(class_info_df, 'class')","55aaa39e":"train_class_df = train_labels_df.merge(class_info_df, left_on='patientId', right_on='patientId', how='inner')","adaf7668":"train_class_df.sample(5)","ee78ac0b":"fig, ax = plt.subplots(nrows=1,figsize=(12,6))\ntmp = train_class_df.groupby('Target')['class'].value_counts()\ndf = pd.DataFrame(data={'Exams': tmp.values}, index=tmp.index).reset_index()\nsns.barplot(ax=ax,x = 'Target', y='Exams',hue='class',data=df, palette='Set3')\nplt.title(\"Chest exams class and Target\")\nplt.show()","c9f75331":"target1 = train_class_df[train_class_df['Target']==1]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(12,12))\nsns.distplot(target1['x'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target1['y'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target1['width'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target1['height'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","5757d1f7":"fig, ax = plt.subplots(1,1,figsize=(7,7))\ntarget_sample = target1.sample(2000)\ntarget_sample['xc'] = target_sample['x'] + target_sample['width'] \/ 2\ntarget_sample['yc'] = target_sample['y'] + target_sample['height'] \/ 2\nplt.title(\"Centers of Lung Opacity rectangles (brown) over rectangles (yellow)\\nSample size: 2000\")\ntarget_sample.plot.scatter(x='xc', y='yc', xlim=(0,1024), ylim=(0,1024), ax=ax, alpha=0.8, marker=\".\", color=\"brown\")\nfor i, crt_sample in target_sample.iterrows():\n    ax.add_patch(Rectangle(xy=(crt_sample['x'], crt_sample['y']),\n                width=crt_sample['width'],height=crt_sample['height'],alpha=3.5e-3, color=\"yellow\"))\nplt.show()","f1c4ec00":"image_sample_path = os.listdir(PATH+'\/stage_2_train_images')[:5]\nprint(image_sample_path)","5b8d7dc6":"image_train_path = os.listdir(PATH+'\/stage_2_train_images')\nimage_test_path = os.listdir(PATH+'\/stage_2_test_images')\nprint(\"Number of images in train set:\", len(image_train_path),\"\\nNumber of images in test set:\", len(image_test_path))","c08c2acc":"print(\"Unique patientId in  train_class_df: \", train_class_df['patientId'].nunique())      ","c2243ecb":"tmp = train_class_df.groupby(['patientId','Target', 'class'])['patientId'].count()\ndf = pd.DataFrame(data={'Exams': tmp.values}, index=tmp.index).reset_index()\ntmp = df.groupby(['Exams','Target','class']).count()\ndf2 = pd.DataFrame(data=tmp.values, index=tmp.index).reset_index()\ndf2.columns = ['Exams', 'Target','Class', 'Entries']\ndf2","2a9efe50":"fig, ax = plt.subplots(nrows=1,figsize=(12,6))\nsns.barplot(ax=ax,x = 'Target', y='Entries', hue='Exams',data=df2, palette='Set2')\nplt.title(\"Chest exams class and Target\")\nplt.show()","15a85da9":"samplePatientID = list(train_class_df[:3].T.to_dict().values())[0]['patientId']\nsamplePatientID = samplePatientID+'.dcm'\ndicom_file_path = os.path.join(PATH,\"stage_2_train_images\/\",samplePatientID)\ndicom_file_dataset = dcm.read_file(dicom_file_path)\ndicom_file_dataset","9e805fda":"def show_dicom_images(data):\n    img_data = list(data.T.to_dict().values())\n    f, ax = plt.subplots(3,3, figsize=(16,18))\n    for i,data_row in enumerate(img_data):\n        patientImage = data_row['patientId']+'.dcm'\n        imagePath = os.path.join(PATH,\"stage_2_train_images\/\",patientImage)\n        data_row_img_data = dcm.read_file(imagePath)\n        modality = data_row_img_data.Modality\n        age = data_row_img_data.PatientAge\n        sex = data_row_img_data.PatientSex\n        data_row_img = dcm.dcmread(imagePath)\n        ax[i\/\/3, i%3].imshow(data_row_img.pixel_array, cmap=plt.cm.bone) \n        ax[i\/\/3, i%3].axis('off')\n        ax[i\/\/3, i%3].set_title('ID: {}\\nModality: {} Age: {} Sex: {} Target: {}\\nClass: {}\\nWindow: {}:{}:{}:{}'.format(\n                data_row['patientId'],\n                modality, age, sex, data_row['Target'], data_row['class'], \n                data_row['x'],data_row['y'],data_row['width'],data_row['height']))\n    plt.show()","8964e670":"show_dicom_images(train_class_df[train_class_df['Target']==1].sample(9))","9b926dfb":"def show_dicom_images_with_boxes(data):\n    img_data = list(data.T.to_dict().values())\n    f, ax = plt.subplots(3,3, figsize=(16,18))\n    for i,data_row in enumerate(img_data):\n        patientImage = data_row['patientId']+'.dcm'\n        imagePath = os.path.join(PATH,\"stage_2_train_images\/\",patientImage)\n        data_row_img_data = dcm.read_file(imagePath)\n        modality = data_row_img_data.Modality\n        age = data_row_img_data.PatientAge\n        sex = data_row_img_data.PatientSex\n        data_row_img = dcm.dcmread(imagePath)\n        ax[i\/\/3, i%3].imshow(data_row_img.pixel_array, cmap=plt.cm.bone) \n        ax[i\/\/3, i%3].axis('off')\n        ax[i\/\/3, i%3].set_title('ID: {}\\nModality: {} Age: {} Sex: {} Target: {}\\nClass: {}'.format(\n                data_row['patientId'],modality, age, sex, data_row['Target'], data_row['class']))\n        rows = train_class_df[train_class_df['patientId']==data_row['patientId']]\n        box_data = list(rows.T.to_dict().values())\n        for j, row in enumerate(box_data):\n            ax[i\/\/3, i%3].add_patch(Rectangle(xy=(row['x'], row['y']),\n                        width=row['width'],height=row['height'], \n                        color=\"yellow\",alpha = 0.1))   \n    plt.show()","bcf03bbc":"show_dicom_images_with_boxes(train_class_df[train_class_df['Target']==1].sample(9))","065670a2":"show_dicom_images(train_class_df[train_class_df['Target']==0].sample(9))","da175e65":"vars = ['Modality', 'PatientAge', 'PatientSex', 'BodyPartExamined', 'ViewPosition', 'ConversionType', 'Rows', 'Columns', 'PixelSpacing']\n\ndef process_dicom_data(data_df, data_path):\n    for var in vars:\n        data_df[var] = None\n    image_names = os.listdir(PATH+data_path)\n    for i, img_name in tqdm_notebook(enumerate(image_names)):\n        imagePath = os.path.join(PATH,data_path,img_name)\n        data_row_img_data = dcm.read_file(imagePath)\n        idx = (data_df['patientId']==data_row_img_data.PatientID)\n        data_df.loc[idx,'Modality'] = data_row_img_data.Modality\n        data_df.loc[idx,'PatientAge'] = pd.to_numeric(data_row_img_data.PatientAge)\n        data_df.loc[idx,'PatientSex'] = data_row_img_data.PatientSex\n        data_df.loc[idx,'BodyPartExamined'] = data_row_img_data.BodyPartExamined\n        data_df.loc[idx,'ViewPosition'] = data_row_img_data.ViewPosition\n        data_df.loc[idx,'ConversionType'] = data_row_img_data.ConversionType\n        data_df.loc[idx,'Rows'] = data_row_img_data.Rows\n        data_df.loc[idx,'Columns'] = data_row_img_data.Columns  \n        data_df.loc[idx,'PixelSpacing'] = str.format(\"{:4.3f}\",data_row_img_data.PixelSpacing[0]) ","f03c7055":"process_dicom_data(train_class_df,'stage_2_train_images\/')","21a09899":"test_class_df = pd.read_csv(PATH+'\/stage_2_sample_submission.csv')","7cff547d":"test_class_df = test_class_df.drop('PredictionString',1)\nprocess_dicom_data(test_class_df,'stage_2_test_images\/')","8208f9c2":"print(\"Modalities: train:\",train_class_df['Modality'].unique(), \"test:\", test_class_df['Modality'].unique())","77f21bbb":"print(\"Body Part Examined: train:\",train_class_df['BodyPartExamined'].unique(), \"test:\", test_class_df['BodyPartExamined'].unique())","467e09f4":"print(\"View Position: train:\",train_class_df['ViewPosition'].unique(), \"test:\", test_class_df['ViewPosition'].unique())","406e3e73":"get_feature_distribution(train_class_df,'ViewPosition')","db07f1a8":"def plot_window(data,color_point, color_window,text):\n    fig, ax = plt.subplots(1,1,figsize=(7,7))\n    plt.title(\"Centers of Lung Opacity rectangles over rectangles\\n{}\".format(text))\n    data.plot.scatter(x='xc', y='yc', xlim=(0,1024), ylim=(0,1024), ax=ax, alpha=0.8, marker=\".\", color=color_point)\n    for i, crt_sample in data.iterrows():\n        ax.add_patch(Rectangle(xy=(crt_sample['x'], crt_sample['y']),\n            width=crt_sample['width'],height=crt_sample['height'],alpha=3.5e-3, color=color_window))\n    plt.show()","cf85899a":"target1 = train_class_df[train_class_df['Target']==1]\n\ntarget_sample = target1.sample(2000)\ntarget_sample['xc'] = target_sample['x'] + target_sample['width'] \/ 2\ntarget_sample['yc'] = target_sample['y'] + target_sample['height'] \/ 2\n\ntarget_ap = target_sample[target_sample['ViewPosition']=='AP']\ntarget_pa = target_sample[target_sample['ViewPosition']=='PA']","b7e8a3b4":"plot_window(target_ap,'green', 'yellow', 'Patient View Position: AP')","b1d55e6f":"plot_window(target_pa,'blue', 'red', 'Patient View Position: PA')","c08c7641":"get_feature_distribution(test_class_df,'ViewPosition')","b6a42f10":"print(\"Conversion Type: train:\",train_class_df['ConversionType'].unique(), \"test:\", test_class_df['ConversionType'].unique())","b1a3080e":"print(\"Rows: train:\",train_class_df['Rows'].unique(), \"test:\", test_class_df['Rows'].unique())\nprint(\"Columns: train:\",train_class_df['Columns'].unique(), \"test:\", test_class_df['Columns'].unique())","a2fbcd9f":"tmp = train_class_df.groupby(['Target', 'PatientAge'])['patientId'].count()\ndf = pd.DataFrame(data={'Exams': tmp.values}, index=tmp.index).reset_index()\ntmp = df.groupby(['Exams','Target', 'PatientAge']).count()\ndf2 = pd.DataFrame(data=tmp.values, index=tmp.index).reset_index()","2bae0c4b":"tmp = train_class_df.groupby(['class', 'PatientAge'])['patientId'].count()\ndf1 = pd.DataFrame(data={'Exams': tmp.values}, index=tmp.index).reset_index()\ntmp = df1.groupby(['Exams','class', 'PatientAge']).count()\ndf3 = pd.DataFrame(data=tmp.values, index=tmp.index).reset_index()","24cf383f":"fig, (ax) = plt.subplots(nrows=1,figsize=(16,6))\nsns.barplot(ax=ax, x = 'PatientAge', y='Exams', hue='Target',data=df2)\nplt.title(\"Train set: Chest exams Age and Target\")\nplt.xticks(rotation=90)\nplt.show()","8190694d":"fig, (ax) = plt.subplots(nrows=1,figsize=(16,6))\nsns.barplot(ax=ax, x = 'PatientAge', y='Exams', hue='class',data=df3)\nplt.title(\"Train set: Chest exams Age and class\")\nplt.xticks(rotation=90)\nplt.show()","177e7c78":"target_age1 = target_sample[target_sample['PatientAge'] < 20]\ntarget_age2 = target_sample[(target_sample['PatientAge'] >=20) & (target_sample['PatientAge'] < 35)]\ntarget_age3 = target_sample[(target_sample['PatientAge'] >=35) & (target_sample['PatientAge'] < 50)]\ntarget_age4 = target_sample[(target_sample['PatientAge'] >=50) & (target_sample['PatientAge'] < 65)]\ntarget_age5 = target_sample[target_sample['PatientAge'] >= 65]","0957d6ea":"plot_window(target_age1,'blue', 'red', 'Patient Age: 1-19 years')","d08a5470":"plot_window(target_age2,'blue', 'red', 'Patient Age: 20-34 years')","e7e3a216":"plot_window(target_age3,'blue', 'red', 'Patient Age: 35-49 years')","36bd9729":"plot_window(target_age4,'blue', 'red', 'Patient Age: 50-65 years')","5da10890":"plot_window(target_age5,'blue', 'red', 'Patient Age: 65+ years')","c381278c":"fig, (ax) = plt.subplots(nrows=1,figsize=(16,6))\nsns.countplot(test_class_df['PatientAge'], ax=ax)\nplt.title(\"Test set: Patient Age\")\nplt.xticks(rotation=90)\nplt.show()","8ae3949a":"tmp = train_class_df.groupby(['Target', 'PatientSex'])['patientId'].count()\ndf = pd.DataFrame(data={'Exams': tmp.values}, index=tmp.index).reset_index()\ntmp = df.groupby(['Exams','Target', 'PatientSex']).count()\ndf2 = pd.DataFrame(data=tmp.values, index=tmp.index).reset_index()\nfig, ax = plt.subplots(nrows=1,figsize=(6,6))\nsns.barplot(ax=ax, x = 'PatientSex', y='Exams', hue='Target',data=df2)\nplt.title(\"Train set: Patient Sex and Target\")\nplt.show()","b9e873df":"tmp = train_class_df.groupby(['class', 'PatientSex'])['patientId'].count()\ndf1 = pd.DataFrame(data={'Exams': tmp.values}, index=tmp.index).reset_index()\ntmp = df1.groupby(['Exams','class', 'PatientSex']).count()\ndf3 = pd.DataFrame(data=tmp.values, index=tmp.index).reset_index()\nfig, (ax) = plt.subplots(nrows=1,figsize=(6,6))\nsns.barplot(ax=ax, x = 'PatientSex', y='Exams', hue='class',data=df3)\nplt.title(\"Train set: Patient Sex and class\")\nplt.show()","4992449e":"target_female = target_sample[target_sample['PatientSex']=='F']\ntarget_male = target_sample[target_sample['PatientSex']=='M']","7cc965d4":"plot_window(target_female,\"red\", \"magenta\",\"Patients Sex: Female\")","93132aa3":"plot_window(target_male,\"darkblue\", \"blue\", \"Patients Sex: Male\")","36ae8469":"sns.countplot(test_class_df['PatientSex'])\nplt.title(\"Test set: Patient Sex\")\nplt.show()","fde3ddac":"For some of the images with **Target=1**, we might see multiple areas (boxes\/rectangles) with **Lung Opacity**.\n\nLet's sample few images having the **Target = 0**.   \n\n### Plot DICOM images with Target = 0\n","8ec02fcb":"Let's check also the distribution of patient age for the test data set.\n\n### Test dataset","400384e5":"We follow with the exploration of the DICOM data.","0f9ee978":"Let's show the distribution of windows for the 5 age groups.","d929db00":"The meaning of this modality is **CR** - **Computer Radiography**  <a href='#4'>[2]<\/a> <a href='#4'>[3]<\/a>.\n\n\n## <a id=\"36\">Body Part Examined<\/a>\n\nLet's check if other body parts than 'CHEST' appears in the data.","2f736f53":"### Detected Lung Opacity window   \n\nFor the class **Lung Opacity**, corresponding to values of **Target = 1**, we plot the density of **x**, **y**, **width** and **height**.\n\n","d48043ab":"We would like to represent the images with the overlay boxes superposed. For this, we will need first to parse the whole dataset with **Target = 1** and gather all coordinates of the windows showing a **Lung Opacity** on the same image.  The simples method is show in <a href='#5'>[1]<\/a> and we will adapt our rendering from this method.","33db18e6":"### Test dataset  \n\nLet's check the distribution of AP and PA positions for the test set.","483e6d3f":"We can observe that we do have available some useful information in the DICOM metadata with predictive value, for example:   \n* Patient sex;   \n* Patient age;  \n* Modality;  \n* Body part examined;  \n* View position;  \n* Rows & Columns;  \n* Pixel Spacing.  \n","1f6a6ebe":"We represent the number of Exams for each Patient Sex, grouped by value of  class.","b8f99aa9":"Let's check as well the distribution of Patient Sex for the test data.   \n\n### Test dataset","93dd6ce5":"Let's plot as well the distribution of  window with Lung Opacity, separatelly for the female and male patients. We will reuse the sample with **Target = 1** for which we calculated also the center of the window.","02d9568f":"**No Lung Opacity \/ Not Normal** and **Normal** have together the same percent (**69.077%**) as the percent of missing values for target window in class details information.   \n\nIn the train set, the percent of data with value for **Target = 1** is therefore **30.92%**.   \n","5e8ad10a":"Let's look into more details to the classes.","26549ce5":"We sample a subset of the train data with **Target = 1**. We calculate as well the center of the windows with **Lung Opacity**.   We then select from this sample the data with the two view position, to plot the window distribution separatelly.","52030b0c":"The percent missing for x,y, height and width in train labels represents the percent of the target **0** (not **Lung opacity**).\n\nLet's check the class distribution from class detailed info.","91a2f079":"<h1><center><font size=\"6\">RSNA Pneumonia Detection EDA<\/font><\/center><\/h1>\n\n<center><img src=\"https:\/\/www.rsna.org\/images\/rsna\/home\/line_r.svg\" width=\"500\"><\/img><\/center>\n\n# <a id='0'>Content<\/a>\n\n- <a href='#1'>Introduction<\/a>  \n- <a href='#2'>Prepare the data analysis<\/a>  \n    -<a href='#21'>Load packages<\/a>  \n     -<a href='#21'>Load the data<\/a>  \n- <a href='#3'>Data exploration<\/a>   \n    -<a href='#31'>Missing data<\/a>  \n    -<a href='#32'>Merge train and class info data<\/a>  \n    -<a href='#33'>Explore DICOM data<\/a>  \n    -<a href='#34'>Add meta information from DICOM data<\/a>  \n    -<a href='#35'>Modality<\/a>  \n    -<a href='#36'>Body Part Examined<\/a>  \n    -<a href='#37'>View Position<\/a>  \n    -<a href='#38'>Conversion Type<\/a>  \n    -<a href='#39'>Rows and Columns<\/a>  \n    -<a href='#310'>Patient Age<\/a>  \n    -<a href='#311'>Patient Sex<\/a>  \n- <a href='#4'>Conclusions<\/a>    \n- <a href='#5'>References<\/a>    \n","0e713db5":"### Target and class  \n\nLet's plot the number of examinations for each class detected, grouped by Target value.","9d161159":"We confirmed that the number of *unique* **patientsId** are equal with the number of DICOM images in the train set.  \n\nLet's see what entries are duplicated. We want to check how are these distributed accross classes and Target value.","017b5914":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>   \n\n\n## <a id=\"34\">Add meta information from DICOM data<\/a>\n\n\n### Train data\n\nWe will parse the DICOM meta information and add it to the train dataset. We will do the same with the test data.","57142f1e":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>\n\n\n## <a id=\"311\">Patient Sex<\/a>\n\nLet's examine now the data for the Patient Sex.   \n\n### Train dataset\n\nWe represent the number of Exams for each Patient Sex, grouped by value of Target.","32c53444":"\nLet's now extract one image and process the DICOM information. ","ba893d55":"Only {Rows:Columns} {1024:1024} are present in both train and test.  \n\n\n<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>","b2be9012":"All chest examinations with`Target` = **1** (pathology detected) associated with `class`:  **Lung Opacity**.    \n\nThe chest examinations with `Target` = **0** (no pathology detected) are either of `class`: **Normal** or `class`: **No Lung Opacity \/ Not Normal**.","bc440ed6":"\n\nOnly a reduced number of images are present in the training set (**26684**), compared with the number of  images in the train_df data (**30227**).  \n\nIt might be that we do have duplicated entries in the train and class datasets. Let's check this.\n\n### Check duplicates in train dataset\n","a43350f7":"### Test data\n\nWe will create as well a test dataset with similar information.","cfe46ccb":"## <a id=\"310\">Patient Age<\/a>\n\nLet's examine now the data for the Patient Age for the train set.\n\n### Train dataset","e87575d2":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>\n\n\n## <a id=\"22\">Load the data<\/a>\n\nLet's load the tabular data. There are two files:\n* Detailed class info;  \n* Train labels.","e00d444c":"# <a id=\"2\">Prepare the data analysis<\/a>  \n\n## <a id=\"21\">Load packages<\/a>\n","8151c32f":"## <a id=\"31\">Missing data<\/a>\n\nLet's check missing information in the two datasets. ","e2625439":"\n**Note**: most probably, the values of age 148 to 155 are mistakes.   \n\nLet's group the ages in 5 groups (0-19, 20-34, 35-49, 50-64 and 65+). ","438a5905":"Let's sample few images having the **Target = 1**.\n\n### Plot DICOM images with Target = 1","2fac2944":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>\n\n\n## <a id=\"35\">Modality<\/a>\n\nLet's check how many modalities are used. Both train and test set are checked.","c6aced11":"Both **AP** and **PA** body positions are present in the data.  The meaning of these view positions are <a href='#4'>[2]<\/a> <a href='#4'>[3]<\/a>:\n* **AP** - Anterior\/Posterior;    \n* **PA** - Posterior\/Anterior.    \n\n\nLet's check, for the training data presenting **Lung Opacity**, the distribution of the window for both View Positions. We create a function to represent the distribution of the window centers and windows.","d9c5f7d2":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>\n\n## <a id=\"33\">Explore DICOM data<\/a>  \n\nLet's read now the DICOM data in the train set. The image path is as following:","42956462":"Both train and test have only **WSD** Conversion Type Data. The meaning of this Conversion Type is **WSD**: **Workstation**.\n\n## <a id=\"39\">Rows and Columns<\/a>","41ad1ce5":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>\n\n\n# <a id='4'>Conclusions<\/a>   \n\nAfter exploring the data, both the tabular and DICOM data, we were able to:  \n- discover duplications in the tabular data;  \n- explore the DICOM images;  \n- extract meta information from the DICOM data;  \n- add features to the tabular data from the meta information in DICOM data;  \n- further analyze the distribution of the data with the newly added features from DICOM metadata;  \n\nAll these findings are useful as preliminary work for building a model.\n\n<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>","2255ee65":"## <a id=\"38\">Conversion Type<\/a>\n\nLet's check the Conversion Type data.","cd1810b4":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>\n\n# <a id=\"1\">Data exploration<\/a>  \n\nLet's explore the data further.","49f8c0b2":"## <a id=\"37\">View Position<\/a>\n\nView Position is a radiographic view associated with the Patient Position. Let's check the View Positions distribution for the both datasets.\n\n\n","182e5f2e":"We can plot also the center of the rectangles points in the plane x0y.   The centers of the rectangles are the points $$x_c = x + \\frac{width}{2}$$ and $$y_c = y + \\frac{height}{2}$$.\n\nWe will show a sample of center points superposed with the corresponding sample of the rectangles.\nThe rectangles are created using the method described in Kevin's Kernel <a href=\"#4\">[1]<\/a>.","842aa443":"### Train dataset  \n\nLet's get into more details for the train dataset. First, let's check the distribution of PA and AP.","c11f352d":"### DICOM meta data","9b3ee33c":"# <a id=\"1\">Introduction<\/a>  \n\nThis Kernel objective is to explore the dataset for RSNA Pneumonia Detection Challenge.   \n\nWe start by exploring the DICOM data, we extract then meta information from the DICOM files and visualize the various features of the DICOM images, grouped by age, sex.\n\nThe Kernel was modified to work with **stage_2** data instead of **stage_1** data.\n\n","efd978da":"In **class detailed info** dataset are given the detailed information about the type of positive or negative class associated with a certain patient.  \n\nIn **train labels** dataset are given the patient ID and the window (x min, y min, width and height of the) containing evidence of pneumonia.","abb06722":"The files names are the patients IDs.    \nLet's check how many images are in the train and test folders.","aa7f5df3":"# <a id='5'>References<\/a>  \n\n\n[1] Kevin Mader, Lung Opacity Overview, https:\/\/www.kaggle.com\/kmader\/lung-opacity-overview  \n[2] Modality Specific Modules, DICOM Standard,  http:\/\/dicom.nema.org\/medical\/dicom\/2014c\/output\/chtml\/part03\/sect_C.8.html  \n[3] DICOM Standard, https:\/\/www.dicomstandard.org\/     \n[4] Getting Started with Pydicom, https:\/\/pydicom.github.io\/pydicom\/stable\/getting_started.html   \n[5] ITKPYthon package, https:\/\/itkpythonpackage.readthedocs.io\/en\/latest\/   \n[6] DICOM in Python: Importing medical image data into NumPy with PyDICOM and VTK, https:\/\/pyscience.wordpress.com\/2014\/09\/08\/dicom-in-python-importing-medical-image-data-into-numpy-with-pydicom-and-vtk\/  \n[7] DICOM Processing and Segmentation in Python, https:\/\/www.raddq.com\/dicom-processing-segmentation-visualization-in-python\/  \n[8] DICOM Standard Browser, https:\/\/dicom.innolitics.com\/ciods  \n[9] How can I read a DICOM image in Python, https:\/\/www.quora.com\/How-can-I-read-a-DICOM-image-in-Python  \n[10] DICOM read example in Python, https:\/\/www.programcreek.com\/python\/example\/97517\/dicom.read_file    \n[11] DICOM in Python, https:\/\/github.com\/pydicom   \n\n\n<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>\n","dcbbae7a":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>\n\n## <a id=\"32\">Merge train and class detail info data<\/a>   \n\nLet's merge now the two datasets, using Patient ID as the merge criteria.","667907d9":"Let's explore the two loaded files. We will take out a 5 rows samples from each dataset."}}