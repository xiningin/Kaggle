{"cell_type":{"d88fb81d":"code","c7e5d3b1":"code","2eb20819":"code","2faf8ee8":"code","321f1ab2":"code","8bc3fdd7":"code","b32b4e0c":"code","6ed28513":"code","46504453":"code","0ff2aaa6":"code","b6dd6c87":"code","40e2d877":"code","ddbc69ef":"code","6b5c7144":"code","4ae275f7":"code","2a259263":"code","8757b252":"code","7c18ff55":"code","6ab664ec":"code","4a800feb":"code","551976e2":"code","fad076a3":"code","75dee8e2":"code","14343808":"code","d3ed532e":"code","51bc7b65":"code","59a25135":"code","bb22d45e":"code","8d75c85e":"code","0b568aa1":"code","58cc688f":"code","d96fa1d4":"code","7601dcfd":"code","2087ed5b":"code","6bd12e80":"code","420b15ae":"code","eb6e3587":"code","d149b13d":"code","96ae8496":"code","33232a7b":"code","4fd55e19":"code","3a49897a":"code","cb866a5b":"code","7a5f3c3e":"code","4bc29f88":"code","063e4a28":"code","a5dd83ad":"code","608a3964":"code","661e460a":"code","a44d6b15":"code","b78fe0e0":"code","2c0ea790":"code","a0f8c859":"markdown","4330c002":"markdown","2cf05a30":"markdown","8f18b4f4":"markdown","a12f114a":"markdown","491286b6":"markdown","aede5091":"markdown","00f5cfab":"markdown","228ba7f5":"markdown","077fcf12":"markdown","d531d8cb":"markdown","4da32970":"markdown","609f1235":"markdown","3d87a2d0":"markdown","4b39f3c5":"markdown","dd2f056f":"markdown","d4a3b5af":"markdown","c069409f":"markdown"},"source":{"d88fb81d":"# matplotlib\u3067\u65e5\u672c\u8a9e\u3092\u6271\u3048\u308b\u3088\u3046\u306b\n!pip install japanize_matplotlib -Uq\n\n# RainCloud Plot(\u6563\u5e03\u56f3\uff0bBoxPlot\uff0bViolin\u3092\u4e00\u3064\u3067\u8868\u793a)\n!pip install ptitprince -Uq\n\n# \u30d9\u30f3\u56f3\u3092\u4f5c\u6210\n!pip install matplotlib-venn -Uq\n\n# Warnings\u3092\u9664\u53bb\n!pip install shutup -Uq\n\n# CatBoost\n!pip install catboost -Uq","c7e5d3b1":"import shutup; shutup.please()\n\nimport os\nimport gc\ngc.enable()\nimport sys\nimport glob\nimport math\nimport time\nimport random\nimport string\nimport psutil\nimport pathlib\nfrom pathlib import Path\nfrom contextlib import contextmanager\n\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', 200)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport japanize_matplotlib\nfrom ptitprince import RainCloud\nfrom matplotlib_venn import venn2\n\nfrom tqdm.auto import tqdm as tqdmp\nfrom tqdm.autonotebook import tqdm as tqdm\ntqdmp.pandas()\n\nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.model_selection import KFold, StratifiedKFold, GroupKFold\nimport lightgbm as lgb\nimport catboost as cat","2eb20819":"# \u5b9f\u9a13\u3067\u4f7f\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u306fConfig\u3067\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002\n# \u3053\u306e\u5b9f\u9a13\u4f55\u3084\u3063\u305f\u304b\u306a\u3068\u5f8c\u3067\u632f\u308a\u8fd4\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u306a\u308b\u3079\u304fConfig\u3060\u3051\u898b\u308c\u3070\u308f\u304b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\n\nclass CFG:\n    \n    def __init__(self):\n        \n        self.seed=42\n        self.n_fold = 5\n        self.environment='Kaggle'\n        self.project='Shiggle_2nd'\n        self.exp_name = '002_Exp'\n        self.objective = 'binary'\n        self.metric = 'binary_logloss'\n        self.learning_rate = 0.1\n        self.num_boost_round = 3000\n        self.early_stopping_rounds = 50\n        self.num_leaves = 2^5-1\n        \nCONFIG = CFG()","2faf8ee8":"## \u518d\u73fe\u6027\u78ba\u4fdd\u306e\u305f\u3081\u306eSeed\u56fa\u5b9a\ndef seed_everything(seed:int==42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(CONFIG.seed)","321f1ab2":"## \u51e6\u7406\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3068\u4f7f\u7528\u3057\u305f\u30e1\u30e2\u30ea\u3092\u8a08\u6e2c\n@contextmanager\ndef timer(name:str, slack:bool=False):\n    t0 = time.time()\n    p = psutil.Process(os.getpid())\n    m0 = p.memory_info()[0] \/ 2. ** 30\n    print(f'<< {name} >> Start')\n    yield\n    \n    m1 = p.memory_info()[0] \/ 2. ** 30\n    delta = m1 - m0\n    sign = '+' if delta >= 0 else '-'\n    delta = math.fabs(delta)\n    \n    print(f\"<< {name} >> {m1:.1f}GB({sign}{delta:.1f}GB):{time.time() - t0:.1f}sec\", file=sys.stderr)","8bc3fdd7":"## Directory\u8a2d\u5b9a\nINPUT_DIR = Path('..\/input\/shigglecup-2nd')\nMODEL_DIR = Path('.\/')\nOUTPUT_DIR = Path('.\/')\nprint(f\"INPUT_DIR is {INPUT_DIR}\\nMODEL_DIR is {MODEL_DIR}\\nOUTPUT_DIR is {OUTPUT_DIR}\")","b32b4e0c":"## Data Check\nfor dirnames, _, filenames in os.walk(INPUT_DIR):\n    for filename in filenames:\n        print(f'{dirnames}\/{filename}')","6ed28513":"with timer('Data Load'):\n    pokemon_df = pd.read_csv(INPUT_DIR \/ 'pokemon.csv')\n    team_id_df = pd.read_csv(INPUT_DIR \/ 'team_id.csv')\n    type_df = pd.read_csv(INPUT_DIR \/ 'typetable.csv')\n    type_df = type_df.set_index('atck')\n    \n    train_df = pd.read_csv(INPUT_DIR \/ 'train.csv')\n    test_df = pd.read_csv(INPUT_DIR \/ 'test.csv')\n    \n    sub_df = pd.read_csv(INPUT_DIR \/ 'sample_submission.csv')\n    \n    \n    print(f'pokemon_df: {pokemon_df.shape} | team_id_df: {team_id_df.shape} | type_df: {type_df.shape}')\n    print(f'train_df: {train_df.shape} | test_df: {test_df.shape} | sub_df: {sub_df.shape}')","46504453":"display(pokemon_df.head())","0ff2aaa6":"def attack_stats(row):\n    if row[\"Attack_Type\"] == 0:\n        return row[\"Attack\"] + row[\"Speed\"]\n    \n    else:\n        return row[\"Sp_Atk\"] + row[\"Speed\"]\n    \ndef defense_stats(row):\n    if row[\"Defense_Type\"] == 0:\n        return row[\"Defense\"] + row[\"HP\"]\n    \n    else:\n        return row[\"Sp_Def\"] + row[\"HP\"]\n\ndef FE_pokemon(df:pd.DataFrame) -> pd.DataFrame:\n    \n    \"\"\"pokemon\u5358\u4f53\u306e\u7279\u5fb4\u4f5c\u6210\n    \"\"\"\n    \n    # \u5408\u8a08\u7a2e\u65cf\u5024\n    stats_cols = [\"HP\", \"Attack\", \"Defense\", \"Sp_Atk\", \"Sp_Def\", \"Speed\"]\n    df[\"total_stats\"] = df[stats_cols].sum(axis=1)\n    \n    # \u4f1d\u8aac\u304b\u3069\u3046\u304b\u3092int\u306b\n    df[\"Legendary\"] = df[\"Legendary\"].astype(int)\n    \n    \n    ######## \u4eca\u56de\u304b\u3089\u8ffd\u52a0 #######\n    df[\"Attack__Sp_Atk_Diff\"] = df[\"Attack\"] - df[\"Sp_Atk\"]\n    df[\"Attack_Type\"] = df[\"Attack__Sp_Atk_Diff\"].apply(lambda x:0 if x > 0 else 1) # Attack > Sp_Atk\u3067\u3042\u308c\u30700, Sp_Atk > Attack\u3067\u3042\u308c\u30701\n    \n    df[\"Defense__Sp_Def_Diff\"] = df[\"Defense\"] - df[\"Sp_Def\"]\n    df[\"Defense_Type\"] = df[\"Defense__Sp_Def_Diff\"].apply(lambda x:0 if x > 0 else 1) # Defense > Sp_Def\u3000\u3067\u3042\u308c\u30700, Sp_Def > Defense\u3000\u3067\u3042\u308c\u30701\n    \n    df[\"Attack_stats\"] = df.apply(attack_stats, axis=1)\n    df[\"Defense_stats\"] = df.apply(defense_stats, axis=1)\n    \n    return df\n    \n    ","b6dd6c87":"with timer(\"FE_pokemon_df\"):\n    pokemon_df = FE_pokemon(pokemon_df)\n    display(pokemon_df.head())","40e2d877":"type_df.head()","ddbc69ef":"def effective_type(row):\n    \n    effective_list = row[row>1].index.tolist()\n    return effective_list\n\ndef not_effective_type(row):\n    \n    not_effective_list = row[row<1].index.tolist()\n    return not_effective_list","6b5c7144":"with timer(\"effecitive & not effective\"):\n    effective = type_df.apply(effective_type, axis=1)\n    not_effective = type_df.apply(not_effective_type, axis=1)\n    \n    type_df[\"effective\"] = effective\n    type_df[\"not_effective\"] = not_effective\n    display(type_df.head())","4ae275f7":"with timer(\"type merge\"):\n    pokemon_df = pd.merge(\n        pokemon_df, \n        type_df[[\"effective\", \"not_effective\"]],\n        left_on=\"Type_1\",\n        right_index=True,\n        how=\"left\"\n    )\n\n    pokemon_df = pd.merge(\n        pokemon_df, \n        type_df[[\"effective\", \"not_effective\"]],\n        left_on=\"Type_2\",\n        right_index=True,\n        how=\"left\",\n        suffixes=[\"__Type_1\", f\"__Type_2\"]\n    )\n    \n    display(pokemon_df.head())\n","2a259263":"def effective_type_merge(row):\n    \n    effective_list = []\n    effective_list.extend(row[\"effective__Type_1\"])\n    if row[\"effective__Type_2\"] is not np.nan:\n        effective_list.extend(row[\"effective__Type_2\"])\n    return effective_list\n\ndef not_effective_type_merge(row):\n    \n    not_effective_list = []\n    not_effective_list.extend(row[\"not_effective__Type_1\"])\n    if row[\"not_effective__Type_2\"] is not np.nan:\n        not_effective_list.extend(row[\"not_effective__Type_2\"])\n    return not_effective_list","8757b252":"with timer(\"effective & not effective Merge\"):\n    pokemon_df[\"Effective_type_\"] = pokemon_df.apply(effective_type_merge, axis=1)\n    pokemon_df[\"Not_effective_type_\"] = pokemon_df.apply(not_effective_type_merge, axis=1)\n    \n    pokemon_df = pokemon_df.drop([\"effective__Type_1\", \"effective__Type_2\", \"not_effective__Type_1\", \"not_effective__Type_2\"], axis=1)\n    display(pokemon_df.head())","7c18ff55":"def team_pokemon_merge(team_df:pd.DataFrame, pokemon_df:pd.DataFrame) -> pd.DataFrame:\n    \n    '''\n    team_id_df\u306e\u30dd\u30b1\u30e2\u30f3\u306b\u5404\u30dd\u30b1\u30e2\u30f3\u306e\u60c5\u5831\u3092\u30de\u30fc\u30b8\n    '''\n    \n    team_pokemon_id = [f\"pokemon_id_{i+1}\" for i in range(6)]\n    tq = tqdm(team_pokemon_id, total=len(team_pokemon_id))\n    \n    for i, pokemon_id in enumerate(tq):\n        \n        if i == 1:\n            \n            team_df = pd.merge(\n                left=team_df,\n                right=pokemon_df.drop(\"Name\", axis=1), # Name\u306f\u4f7f\u308f\u306a\u3044\n                left_on=pokemon_id,\n                right_on=\"pokemon_id\",\n                how=\"left\",\n                suffixes=[f\"_{team_pokemon_id[0]}\", f\"_{pokemon_id}\"]\n            )\n        \n        else:\n            team_df = pd.merge(\n                left=team_df,\n                right=pokemon_df.drop(\"Name\", axis=1), # Name\u306f\u4f7f\u308f\u306a\u3044\n                left_on=pokemon_id,\n                right_on=\"pokemon_id\",\n                how=\"left\",\n                suffixes=[\"\", f\"_{pokemon_id}\"]\n            )\n        \n    return team_df","6ab664ec":"with timer(\"team_pokemon_merge\"):\n    team_df = team_pokemon_merge(team_id_df, pokemon_df)\n    display(team_df.head())","4a800feb":"stats_columns = [col for col in team_df.columns.tolist() if \"total_stats\" in col]\nprint(f\"len(stats_columns): {len(stats_columns)}\")\n\nspeed_columns = [col for col in team_df.columns.tolist() if \"Speed\" in col]\nprint(f\"len(speed_columns): {len(speed_columns)}\")\n\nattack_type_columns = [col for col in team_df.columns.tolist() if \"Attack_Type\" in col]\nprint(f\"len(attack_type_columns): {len(attack_type_columns)}\")\n\ndefense_type_columns = [col for col in team_df.columns.tolist() if \"Defense_Type\" in col]\nprint(f\"len(defense_type_columns): {len(defense_type_columns)}\")\n\neffective_columns = [col for col in team_df.columns.tolist() if \"Effective_type\" in col]\nprint(f\"len(effective_columns): {len(effective_columns)}\")\n\nnot_effective_columns = [col for col in team_df.columns.tolist() if \"Not_effective_type\" in col]\nprint(f\"len(not_effective_columns): {len(not_effective_columns)}\")","551976e2":"def calc_max_stats(row):\n    return row[stats_columns].max()\n\ndef calc_min_stats(row):\n    return row[stats_columns].min()\n\ndef calc_mean_stats(row):\n    return row[stats_columns].mean()\n\nwith timer(\"\u30c1\u30fc\u30e0\u5185\u306e\u7a2e\u65cf\u5024\/\u6700\u5927\/\u6700\u5c0f\/\u5e73\u5747\"):  \n    team_df[\"max_stats\"] = team_df.progress_apply(calc_max_stats, axis=1)\n    team_df[\"min_stats\"] = team_df.progress_apply(calc_min_stats, axis=1)\n    team_df[\"mean_stats\"] = team_df.progress_apply(calc_mean_stats, axis=1)","fad076a3":"def calc_max_speed(row):\n    return row[speed_columns].max()\n\ndef calc_min_speed(row):\n    return row[speed_columns].min()\n\ndef calc_mean_speed(row):\n    return row[speed_columns].mean()\n\nwith timer(\"\u30c1\u30fc\u30e0\u5185\u306e\u7d20\u65e9\u3055\/\u6700\u5927\/\u6700\u5c0f\/\u5e73\u5747\"):  \n    team_df[\"max_speed\"] = team_df.progress_apply(calc_max_speed, axis=1)\n    team_df[\"min_speed\"] = team_df.progress_apply(calc_min_speed, axis=1)\n    team_df[\"mean_speed\"] = team_df.progress_apply(calc_mean_speed, axis=1)","75dee8e2":"with timer(\"\u30c1\u30fc\u30e0\u5185\u306eAttackType, DefenseType\"):  \n    team_df[\"total_attack_type\"] = team_df[attack_type_columns].sum(axis=1)\n    team_df[\"total_defense_type\"] = team_df[defense_type_columns].sum(axis=1)","14343808":"with timer(\"\u30c1\u30fc\u30e0\u5185\u306eAttackType, DefenseType\"):  \n    team_df[\"total_effective_type\"] = team_df[effective_columns].sum(axis=1)\n    team_df[\"total_not_effective_type\"] = team_df[not_effective_columns].sum(axis=1)\n    \n    # \u91cd\u8907\u306f\u3055\u305b\u306a\u3044\n    team_df[\"total_effective_type\"] = team_df[\"total_effective_type\"].apply(lambda x: list(set(x)))\n    team_df[\"total_not_effective_type\"] = team_df[\"total_not_effective_type\"].apply(lambda x: list(set(x)))\n    \n    # \u6709\u5229\/\u4e0d\u5229\u306e\u6570\n    team_df[\"count_effective_type\"] = team_df[\"total_effective_type\"].apply(lambda x: len(x))\n    team_df[\"count_not_effective_type\"] = team_df[\"total_not_effective_type\"].apply(lambda x: len(x))","d3ed532e":"## Type\u306e\u30e6\u30cb\u30fc\u30af\u6570\ntype_columns = [col for col in team_df.columns.tolist() if \"Type_\" in col]\nprint(f\"len(type_columns): {len(type_columns)}\")\n\ndef calc_type_unique(row):\n    return row[type_columns].nunique()\n\nwith timer(\"\u5404\u30c1\u30fc\u30e0\u306e\u30bf\u30a4\u30d7\u6570\"):\n    team_df[\"type_unique\"] = team_df.apply(calc_type_unique, axis=1)","51bc7b65":"team_df.head()","59a25135":"plt.figure(figsize=(25, 6))\nsns.barplot(data=team_df, x=\"team_id\", y=\"count_effective_type\")\nplt.grid()\nplt.show()\n\nplt.figure(figsize=(25, 6))\nsns.barplot(data=team_df, x=\"team_id\", y=\"count_not_effective_type\")\nplt.grid()\nplt.show()","bb22d45e":"def combat_team_merge(df:pd.DataFrame, team_df:pd.DataFrame) -> pd.DataFrame:\n    \n    out_df = pd.merge(\n        left=df,\n        right=team_df,\n        left_on=\"first\",\n        right_on=\"team_id\",\n        how=\"left\"\n    )\n    \n    out_df = pd.merge(\n        left=out_df,\n        right=team_df,\n        left_on=\"second\",\n        right_on=\"team_id\",\n        how=\"left\",\n        suffixes=[\"_team_first\", \"_team_second\"]\n    )\n    \n    return out_df","8d75c85e":"with timer(\"team_df -> train\/test\u3078\u30de\u30fc\u30b8\"):\n    train_df = combat_team_merge(train_df, team_df)\n    test_df = combat_team_merge(test_df, team_df)","0b568aa1":"train_df.head()","58cc688f":"first_columns = [col for col in train_df.columns.tolist() if \"_team_first\" in col]\nsecond_columns = [col for col in train_df.columns.tolist() if \"_team_second\" in col]\n\nprint(len(first_columns), len(second_columns))","d96fa1d4":"first_speed_columns = [col for col in first_columns if \"Speed_\" in col] # first\u306e\u5404\u30dd\u30b1\u30e2\u30f3\u306eSpeed\nsecond_speed_columns = [col for col in second_columns if \"Speed_\" in col] #second\u306e\u5404\u30dd\u30b1\u30e2\u30f3\u306eSpeed\n\ndef speed_diff(row):\n    \n    diff_speed_list = []\n    \n    for f_col in first_speed_columns:\n        \n        diff_f_speed_list = []\n        \n        for s_col in second_speed_columns:\n            \n            diff_f_speed_list.append(row[f_col] - row[s_col])\n            \n        diff_speed_list.append(diff_f_speed_list)\n        \n    return diff_speed_list","7601dcfd":"# first\u306epokemon vs second\u306e6\u5339 \u306espeed\ntrain_df[\"speed_diff\"] = train_df.progress_apply(speed_diff, axis=1)\nsplitted = train_df[\"speed_diff\"].apply(pd.Series)\nsplitted.columns = [f\"first_pokemon_id{i+1}_second_speed_diff\" for i in range(6)]\nsplitted.head()","2087ed5b":"for col in splitted.columns:\n    splitted[f\"adv_speed_{col}\"] = splitted[col].apply(lambda x: sum([i > 0 for i in x]))\n    splitted[f\"mean_speed_{col}\"] = splitted[col].apply(lambda x: np.mean(x))\nsplitted.head()","6bd12e80":"# \u3053\u308c\u3092\u5143\u306eTrain\u306b\u30de\u30fc\u30b8\u3059\u308b\u308f\u3051\u3067\u3059\u304c\u3001splitted\u306e\u30ea\u30b9\u30c8\u5f62\u5f0f\u306e\u30ab\u30e9\u30e0\u306f\u3044\u3089\u306a\u3044\u306e\u3067\u3001\u6570\u5b57\u5217\u3060\u3051\u6a2a\u306b\u4ed8\u3051\u52a0\u3048\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n\ndef calc_vs_spped(df:pd.DataFrame) -> pd.DataFrame:\n    \n    \"\"\"first\u306e\u30c1\u30fc\u30e0\u306e\u30dd\u30b1\u30e2\u30f31\u5339\u3068secon\u306e\u30c1\u30fc\u30e0\u306e\u30dd\u30b1\u30e2\u30f36\u5339\u306espeed\u306e\u5dee\n    \"\"\"\n    \n    df[\"speed_diff\"] = df.progress_apply(speed_diff, axis=1)\n    splitted = df[\"speed_diff\"].apply(pd.Series)\n    splitted.columns = [f\"first_pokemon_id{i+1}_second_speed_diff\" for i in range(6)]\n    \n    for col in splitted.columns:\n        splitted[f\"adv_speed_{col}\"] = splitted[col].apply(lambda x: sum([i > 0 for i in x]))\n        splitted[f\"mean_speed_{col}\"] = splitted[col].apply(lambda x: np.mean(x))\n        \n    df = pd.concat([df, splitted.select_dtypes(include='number')], axis=1)\n    \n    return df","420b15ae":"train_df = calc_vs_spped(train_df)\ntest_df = calc_vs_spped(test_df)","eb6e3587":"# \u540c\u69d8\u306btotal_stats\u3067\u3082\u540c\u3058\u3053\u3068\u3092\u3057\u3066\u307f\u307e\u3059\n\nfirst_stats_columns = [col for col in first_columns if \"total_stats\" in col] # first\u306e\u5404\u30dd\u30b1\u30e2\u30f3\u306eSpeed\nsecond_stats_columns = [col for col in second_columns if \"total_stats\" in col] #second\u306e\u5404\u30dd\u30b1\u30e2\u30f3\u306eSpeed\n\ndef stats_diff(row):\n    \n    diff_stats_list = []\n    \n    for f_col in first_stats_columns:\n        \n        diff_f_stats_list = []\n        \n        for s_col in second_stats_columns:\n            \n            diff_f_stats_list.append(row[f_col] - row[s_col])\n            \n        diff_stats_list.append(diff_f_stats_list)\n        \n    return diff_stats_list","d149b13d":"def calc_vs_stats(df:pd.DataFrame) -> pd.DataFrame:\n    \n    \"\"\"first\u306e\u30c1\u30fc\u30e0\u306e\u30dd\u30b1\u30e2\u30f31\u5339\u3068secon\u306e\u30c1\u30fc\u30e0\u306e\u30dd\u30b1\u30e2\u30f36\u5339\u306espeed\u306e\u5dee\n    \"\"\"\n    \n    df[\"stats_diff\"] = df.progress_apply(stats_diff, axis=1)\n    splitted = df[\"stats_diff\"].apply(pd.Series)\n    splitted.columns = [f\"first_pokemon_id{i+1}_second_stats_diff\" for i in range(6)]\n    \n    for col in splitted.columns:\n        splitted[f\"adv_stats_{col}\"] = splitted[col].apply(lambda x: sum([i > 0 for i in x]))\n        splitted[f\"mean_stats_{col}\"] = splitted[col].apply(lambda x: np.mean(x))\n        \n    df = pd.concat([df, splitted.select_dtypes(include='number')], axis=1)\n    \n    return df","96ae8496":"train_df = calc_vs_stats(train_df)\ntest_df = calc_vs_stats(test_df)","33232a7b":"train_df.head()","4fd55e19":"## \u7279\u5fb4\u91cf\u306e\u30ab\u30e9\u30e0\u3068Target\u306e\u30ab\u30e9\u30e0\u3092\u5206\u3051\u308b\ntarget_col = [\"target\"]\nfeature_cols = [col for col in train_df.select_dtypes(include=\"number\").columns.tolist() if col not in target_col]\n\nprint(f\"\u7279\u5fb4\u91cf: {len(feature_cols)}\")\nprint(f\"\u76ee\u7684\u5909\u6570: {len(target_col)}\")\nprint(f\"train\u306e\u30ab\u30e9\u30e0\u6570: {train_df.shape[1]}\")","3a49897a":"lgb_params = {\n    \"objective\": \"binary\", \n    \"metric\": \"binary_logloss\", \n    \"boosting_type\": \"gbdt\",\n    'learning_rate': 0.1,\n    'verbosity': 0,\n    'random_state': CONFIG.seed,\n    'num_leaves': CONFIG.num_leaves,\n    'force_col_wise':True\n}\n\ncat_params = {\n    'loss_function': 'Logloss',\n    'learning_rate' : 0.1,\n    'num_boost_round': 4000,\n    'verbose' : 200,\n    'early_stopping_rounds' : 100,\n    'random_seed' :CONFIG.seed\n}","cb866a5b":"lgb_oof = np.zeros(len(train_df)) # Train\u5168\u4f53\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\nlgb_pred = np.zeros(len(test_df)) # Test\u5168\u4f53\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\n\ncat_oof = np.zeros(len(train_df)) # Train\u5168\u4f53\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\ncat_pred = np.zeros(len(test_df)) # Test\u5168\u4f53\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\n\nCV = GroupKFold(n_splits=CONFIG.n_fold)\nIMP_DF = pd.DataFrame() # Feature Importance\u3092\u78ba\u8a8d\n\nfor fold, (tr, te) in enumerate(CV.split(train_df, train_df[target_col], groups=train_df[\"first\"])):\n    \n    print('#'*20, f\" Fold: {fold+1} \", \"#\"*20)\n    s_t = time.time()\n    X_tr = train_df.loc[tr, feature_cols]\n    y_tr = train_df.loc[tr, target_col]\n    \n    X_te = train_df.loc[te, feature_cols]\n    y_te = train_df.loc[te, target_col]\n    \n    ### Train\u3068Valid\u3067First\u306e\u30c1\u30fc\u30e0\u306b\u88ab\u308a\u304c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\n    plt.figure(figsize=(12, 4))\n    venn2(subsets=(set(X_tr[\"first\"].unique()), set(X_te[\"first\"].unique())), set_labels=('train first ', 'valid first'))\n    plt.show()\n    \n    ## LightGBM\n    lgb_train = lgb.Dataset(X_tr, y_tr)\n    lgb_eval = lgb.Dataset(X_te, y_te)\n    \n    lgb_model = lgb.train(\n        lgb_params,\n        lgb_train,\n        valid_sets=[lgb_train, lgb_eval],\n        valid_names=[\"train\", \"eval\"],\n        verbose_eval=100,\n        num_boost_round=CONFIG.num_boost_round,\n        early_stopping_rounds=CONFIG.early_stopping_rounds,\n    )\n    \n    best_iter = lgb_model.best_iteration\n    _oof = lgb_model.predict(X_te, num_iteration=best_iter)\n    lgb_oof[te] += _oof\n    \n    _pred = lgb_model.predict(test_df[feature_cols], num_iteration=best_iter)\n    lgb_pred += _pred\/CONFIG.n_fold\n    lgb_auc = roc_auc_score(y_te, _oof)\n    \n    importances = pd.DataFrame()\n    importances[\"feature\"] = feature_cols\n    importances[\"lgb_gain\"] = lgb_model.feature_importance()\n    importances[\"fold\"] = fold+1\n    IMP_DF = pd.concat([IMP_DF, importances], axis=0, sort=False)\n    \n    ## CatBoost\n    cat_train = cat.Pool(X_tr, y_tr)\n    cat_eval = cat.Pool(X_te, y_te)\n    \n    cat_model = cat.CatBoost(cat_params)\n    cat_model.fit(\n        cat_train,\n        eval_set=[cat_train, cat_eval],\n        use_best_model=True\n        )\n    \n    _oof = cat_model.predict(cat_eval, prediction_type='Probability')\n    cat_oof[te] += _oof[:, 1]\n\n    _pred = cat_model.predict(cat.Pool(test_df[feature_cols]), prediction_type='Probability')\n    cat_pred += _pred[:, 1]\/CONFIG.n_fold\n    cat_auc = roc_auc_score(y_te, _oof[:, 1])\n    \n    ## Feature Importance\n    importances = pd.DataFrame()\n    importances['feature'] = feature_cols\n    importances['cat_gain'] = cat_model.get_feature_importance()\n    importances['fold'] = fold+1\n    IMP_DF = pd.concat([IMP_DF, importances], axis=0, sort=False)\n    \n    e_t = time.time() - s_t\n    \n    print(f\"Fold {fold+1} | LightGBM AUC:{lgb_auc:.5f} | CatBoost AUC:{cat_auc:.5f} |E lapsed {e_t:.0f}sec.\")\n    \ntotal_lgb_auc = roc_auc_score(train_df[target_col], lgb_oof)\ntotal_cat_auc = roc_auc_score(train_df[target_col], cat_oof)\n\nprint(\"\u2605\"*50)\nprint(f\"total lgb auc: {total_lgb_auc:.5f}\")\nprint(f\"total cat auc: {total_cat_auc:.5f}\")","7a5f3c3e":"## Feature Importance\nmean_importance = IMP_DF.groupby('feature')['lgb_gain'].agg('mean')\nmean_importance = mean_importance.sort_values(ascending=False)\nimportance_list = mean_importance.index.tolist()[:50]\n\nplt.figure(figsize=(25, 10), tight_layout=True)\nsns.boxenplot(data=IMP_DF[IMP_DF['feature'].isin(importance_list)].sort_values('lgb_gain', ascending=False),\n              x='feature', y='lgb_gain', scale=\"area\")\nplt.xticks(rotation=90)\nplt.title(f\"LightGBM Feature Importance\")\nplt.show()","4bc29f88":"## Feature Importance\nmean_importance = IMP_DF.groupby('feature')['cat_gain'].agg('mean')\nmean_importance = mean_importance.sort_values(ascending=False)\nimportance_list = mean_importance.index.tolist()[:50]\n\nplt.figure(figsize=(25, 10), tight_layout=True)\nsns.boxenplot(data=IMP_DF[IMP_DF['feature'].isin(importance_list)].sort_values('cat_gain', ascending=False),\n              x='feature', y='cat_gain', scale=\"area\")\nplt.xticks(rotation=90)\nplt.title(f\"CatBoost Feature Importance\")\nplt.show()","063e4a28":"# OOF\u3067ROC Curve\u3092\u78ba\u8a8d\nplt.figure(figsize = (10, 5))\n\nfpr, tpr, thres = roc_curve(train_df[target_col], lgb_oof)\nplt.subplot(1, 2, 1)\nplt.plot(fpr, fpr, linestyle='dashed')\nplt.plot(fpr, tpr, marker='o')\nplt.xlabel('False Positive Rete', fontsize = 13)\nplt.ylabel('True Positive Rete', fontsize = 13)\nplt.grid()\n\nfpr, tpr, thres = roc_curve(train_df[target_col], cat_oof)\nplt.subplot(1, 2, 2)\nplt.plot(fpr, fpr, linestyle='dashed')\nplt.plot(fpr, tpr, marker='o')\nplt.xlabel('False Positive Rete', fontsize = 13)\nplt.ylabel('True Positive Rete', fontsize = 13)\nplt.grid()\nplt.show()","a5dd83ad":"# oof, pred\u306e\u4e88\u6e2c\u5206\u5e03\u306e\u78ba\u8a8d\nplt.figure(figsize=(16, 5))\nsns.distplot(lgb_oof, label='lgb_oof')\nsns.distplot(lgb_pred, label='lgb_pred')\n\nsns.distplot(cat_oof, label='cat_oof')\nsns.distplot(cat_pred, label='cat_pred')\nplt.legend()\nplt.grid()\nplt.show()","608a3964":"# first\u306e\u30c1\u30fc\u30e0\u3054\u3068\u306eAUC\nresult_df = pd.DataFrame()\nresult_df[\"oof\"] = lgb_oof\nresult_df[\"target\"] = train_df[\"target\"]\nresult_df[\"first\"] = train_df[\"first\"]\nresult_df[\"second\"] = train_df[\"second\"]\n\nteam_score = []\n\nfor first in tqdm(result_df[\"first\"].unique().tolist()):\n    \n    tmp = result_df[result_df[\"first\"]==first].reset_index(drop=True)\n    auc = roc_auc_score(tmp[\"target\"], tmp[\"oof\"])\n    team_score.append(auc)","661e460a":"plt.figure(figsize=(25, 6))\nsns.barplot(result_df[\"first\"].unique().tolist(), y=team_score)\nplt.grid()\nplt.show()","a44d6b15":"# LightGBM\u3068CatBoost\u306eEnsemble\u3092\u3068\u3063\u3066\u307f\u307e\u3057\u3087\u3046\nens_oof = (lgb_oof + cat_oof)\/2.\nens_sub = (lgb_pred + cat_pred)\/2.\n\ntotal_auc = roc_auc_score(train_df[target_col], ens_oof)\nprint(\"\u2605\"*50)\nprint(f\"total lgb auc: {total_lgb_auc:.5f}\")\nprint(f\"total cat auc: {total_cat_auc:.5f}\")\nprint(f\"total auc: {total_auc:.5f}\")","b78fe0e0":"sub_df['target'] = ens_sub\nsub_df.to_csv(f'.\/{CONFIG.exp_name}_CV{total_auc:.6f}_submision.csv', index=False) # submission\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u5b9f\u9a13\u540d\u3084CV\u30b9\u30b3\u30a2\u3092\u5165\u308c\u3066\u304a\u304f\u3068\u3001\u5f8c\u3067Sub\u3092\u9078\u3076\u3068\u304d\u306b\u4fbf\u5229\u3067\u3059","2c0ea790":"# \u3042\u3068\u3067Ensemble\u3059\u308b\u305f\u3081\u306bOOF\u3082\u4fdd\u5b58\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\ntrain_df['oof'] = ens_oof\ntrain_df[['oof']].to_csv(f'.\/{CONFIG.exp_name}_CV{total_auc:.6f}_oof.csv', index=False)","a0f8c859":"## team_id_df\u3067\u7279\u5fb4\u4f5c\u6210\n- \u524d\u56de\u540c\u69d8\u306b\u5404\u30c1\u30fc\u30e0\u5185\u3067\u306e\u7279\u5fb4\u3092\u4f5c\u6210\u3057\u307e\u3059\n- \u524d\u56de\u306f\u3001\u5404\u30c1\u30fc\u30e0\u306e\u4e2d\u3067\u3082\u3063\u3068\u3082\u7a2e\u65cf\u5024\u304c\u9ad8\u3044\u3082\u306e\u3084\u4f4e\u3044\u3082\u306e\u3001type\u306e\u30e6\u30cb\u30fc\u30af\u6570\u3092\u51fa\u3057\u307e\u3057\u305f\n- \u4eca\u56de\u306f\u3001attack_type\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3084\u3001\u6709\u5229\/\u4e0d\u5229\u30bf\u30a4\u30d7\u306e\u6570\u306a\u3069\u3082\u51fa\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059","4330c002":"# Settings","2cf05a30":"# Training\n- LightGBM\u3068CatBoost\u3067\u5b66\u7fd2\u3092\u884c\u3044\u3001\u6700\u5f8c\u306b\u4e88\u6e2c\u7d50\u679c\u3092\u8db3\u3057\u5408\u308f\u305b\u3066\u307f\u307e\u3057\u3087\u3046","8f18b4f4":"# Data Load","a12f114a":"## Pokemon\u306e\u7279\u5fb4","491286b6":"## team_df -> train\/test\u3078\u30de\u30fc\u30b8","aede5091":"- \u4f5c\u6210\u306e\u65b9\u91dd\u3068\u3057\u3066\u306f\u3001type_df\u306b\u5f97\u610f(effective), \u4e0d\u5f97\u610f(not_effective)\u306e\u30bf\u30a4\u30d7\u3092\u5165\u308c\u3066\u3044\u304d\u307e\u3059","00f5cfab":"# Feature Engineering\n- \u30dd\u30b1\u30e2\u30f3\u306f1:1\u3067\u30bf\u30fc\u30f3\u5236\u3067\u30d0\u30c8\u30eb\u304c\u9032\u3080\u3068\u524d\u56de\u304a\u4f1d\u3048\u3057\u307e\u3057\u305f\u3002\n- \u524d\u56de\u306f\u81ea\u30c1\u30fc\u30e0\u5185\u3067\u306e\u7279\u5fb4\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u30c1\u30fc\u30e0\u5168\u4f53\u3084\u76f8\u624b\u30c1\u30fc\u30e0\u3068\u306e\u95a2\u4fc2\u306b\u3064\u3044\u3066\u7279\u5fb4\u3092\u6df1\u6398\u308a\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059","228ba7f5":"## train\/test\u3067\u3055\u3089\u306b\u7279\u5fb4\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\n- \u81ea\u5206\u304cfirst\u306e\u30c1\u30fc\u30e0\u3092\u4f7f\u3063\u3066\u3044\u308b\u6c17\u6301\u3061\u3067\u8003\u3048\u308b\u3068\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n- \u81ea\u5206\u304cfirst\u3001\u76f8\u624b\u304csecond\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u60f3\u5b9a\u3057\u3066\u3001first\u306e\u3042\u308b\u30dd\u30b1\u30e2\u30f3\u304csecond\u306e\u30c1\u30fc\u30e0\u306e\u30dd\u30b1\u30e2\u30f36\u5339\u306b\u5bfe\u3057\u3066\u52dd\u3066\u305d\u3046\u304b\u3092\u8003\u3048\u307e\u3059\n  - first1\u5339\u3068second\u306e6\u5339\u3068\u306e\u7279\u5fb4\u306e\u5dee\u5206\u306a\u3069\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046","077fcf12":"- \u3053\u308c\u3092pokemon_df\u306b\u304f\u3063\u3064\u3051\u3066\u307f\u307e\u3057\u3087\u3046","d531d8cb":"## Type\u76f8\u6027\n- \u4eca\u56de\u306ftype\u306eEncoding\u306f\u6562\u3048\u3066\u5b9f\u65bd\u3057\u3066\u304a\u308a\u307e\u305b\u3093\n- Type\u76f8\u6027\u8868\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u82e6\u624b\u306a\u30bf\u30a4\u30d7\u3068\u5f97\u610f\u306a\u30bf\u30a4\u30d7\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u3087\u3046","4da32970":"- \u30dd\u30b1\u30e2\u30f3\u306b\u306f6\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3042\u308a\u307e\u3059\n  - \u653b\u6483\u7cfb Attack, Sp_Atk\n  - \u9632\u5fa1\u7cfb Defense, Sp_Def\n  - \u305d\u306e\u4ed6 Hp, Speed\n- \u57fa\u672c\u7684\u306b\u306fSpeed\u304c\u65e9\u3044\u3082\u306e\u304b\u3089\u5148\u306b\u884c\u52d5\u3092\u958b\u59cb\u3067\u304d\u3001\u76f8\u624b\u3092\u6bb4\u308c\u308b\u306e\u3067\u6709\u5229\u3000\u3068\u3044\u3046\u5927\u524d\u63d0\u306b\u5247\u3063\u305f\u4e0a\u3067\u3044\u304f\u3064\u304b\u30c9\u30e1\u30a4\u30f3\u306b\u6cbf\u3063\u305f\u7279\u5fb4\u4f5c\u6210\u3092\u3057\u3066\u3044\u304d\u307e\u3059\n  - \u653b\u6483\u306fAttack, Sp_Atk\u306e\u3069\u3061\u3089\u304c\u9ad8\u3044\u306e\u304b\u3001\u307e\u305f\u3069\u308c\u304f\u3089\u3044\u9ad8\u3044\u306e\u304b\n  - \u9632\u5fa1\u306fDefense, Sp_Defn\u306e\u3069\u3061\u3089\u304c\u9ad8\u3044\u306e\u304b\u3001\u307e\u305f\u3069\u308c\u304f\u3089\u3044\u9ad8\u3044\u306e\u304b\n  - \u653b\u6483\u7cfb\u3068\u7d20\u65e9\u3055\u3092\u8db3\u3057\u305f\u6570\u5024\u3000\u2192 \u7dcf\u5408\u653b\u6483\u529b(\u72ec\u81ea\u306e\u6307\u6a19)\n  - \u9632\u5fa1\u3068HP\u3092\u8db3\u3057\u305f\u6570\u5024 \u2192\u7dcf\u5408\u9632\u5fa1\u529b(\u72ec\u81ea\u306e\u6307\u6a19)","609f1235":"- \u5404\u30dd\u30b1\u30e2\u30f3\u304c\u6709\u5229\u30bf\u30a4\u30d7\u3001\u4e0d\u5229\u30bf\u30a4\u30d7\u3092\u305d\u308c\u305e\u308ctype_1, type_2\u3067\u5408\u4f53\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046","3d87a2d0":"## pokemon_df -> team_id_df \u3078\u30de\u30fc\u30b8","4b39f3c5":"<div class = 'alert alert-block alert-info'\n     style = 'background-color:#b48bbd;\n              color:#4a294a;\n              border-width:5px;\n              border-color:#5a4a9c;\n              font-family:Comic Sans MS'>\n    <p style = 'font-size:24px'>Exp 002<\/p>\n    <a href = \"#Settings\"\n       style = \"color:#4a294a;\n                font-size:14px\">1.Settings<\/a><br>\n    <a href = \"#Data-Load\"\n       style = \"color:#4a294a;\n                font-size:14px\">2.Data Load<\/a><br>\n    <a href = \"#Feature-Engineering\"\n       style = \"color:#4a294a;\n                font-size:14px\">3.Feature Engineering<\/a><br>\n    <a href = \"#Training\"\n       style = \"color:#4a294a;\n                font-size:14px\">4.Training<\/a><br>\n    <a href = \"#Make-Submission\"\n       style = \"color:#4a294a;\n                font-size:14px\">5.Make Submission<\/a><br>\n<\/div>   \n<p style = 'font-size:24px'>\n    \u7279\u5fb4\u91cf\u306e\u6df1\u6398\u308a\u3068\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\n<\/p>","dd2f056f":"- \u4eca\u56de\u306f\u7279\u5fb4\u4f5c\u6210\u306f\u3053\u306e\u8fba\u308a\u307e\u3067\u3068\u3057\u307e\u3059\u3002\n- type\u7cfb\u306e\u7279\u5fb4\u306f\u3044\u304f\u3064\u304b\u5b58\u5728\u3057\u3066\u304a\u308a\u307e\u3059\u304c\u3001\u7279\u5fb4\u91cf\u3068\u3057\u3066\u306f\u4f7f\u7528\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u305c\u3072\u7686\u3055\u3093\u3067\u6709\u5229\/\u4e0d\u5229\u306a\u3069\u3092\u4f7f\u3044\u306a\u304c\u3089\u7279\u5fb4\u91cf\u5316\u3057\u3066\u53d6\u308a\u7d44\u3093\u3067\u307f\u3066\u304f\u3060\u3055\u3044","d4a3b5af":"# Make Submission","c069409f":"<img src=\"https:\/\/pbs.twimg.com\/media\/B9TQPzMCMAE9duX?format=png&name=large\" width=400%>"}}