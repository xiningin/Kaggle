{"cell_type":{"54deeffa":"code","7fbfd9a2":"code","09d1d39c":"code","45802650":"code","02e3634e":"code","11699366":"code","66c237c4":"code","f4871243":"code","23a00381":"code","25f0dc1e":"code","81bc8486":"code","7ee124b7":"code","645980b2":"code","641f1efd":"code","ab98aee5":"code","0e46b8bd":"code","8a00dde4":"code","2caacadd":"code","7b884388":"code","abb517c3":"code","0f74e624":"code","cccd74ce":"code","2f6de82a":"code","2833acf9":"code","2837c633":"code","76c536ba":"code","3aa61b66":"code","ef99b55d":"code","89f889b0":"code","6b16ac4e":"code","536e8058":"code","87ffa83f":"code","7b026fe8":"code","fbbbb3e2":"code","539e0370":"code","d0d81415":"code","100c0d6a":"code","2f715b6e":"markdown","22df6653":"markdown","d7ee23f6":"markdown","2fa5261d":"markdown","6b271466":"markdown","1e88e659":"markdown","882e669b":"markdown","1881b79e":"markdown","a9301373":"markdown","e5ded1ad":"markdown","785f6923":"markdown","97563697":"markdown","aa4c3122":"markdown","80883e3e":"markdown","c04f8652":"markdown"},"source":{"54deeffa":"import numpy as np\nimport pandas as pd\nimport os\n\nimport cv2\nimport json\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom PIL import Image\n\nfrom wordcloud import WordCloud\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","7fbfd9a2":"path = '..\/input\/'","09d1d39c":"train = pd.read_csv(path+'train.csv')\ntest = pd.read_csv(path+'test.csv')\nclass_ = pd.read_csv(path+'class.csv')","45802650":"train.head()","02e3634e":"test.head()","11699366":"class_.head()","66c237c4":"train.info()","f4871243":"test.info()","23a00381":"class_.info()","25f0dc1e":"def image_show(path, row=0, train_data=True):\n    if train_data:\n        img_name = train.iloc[row, 0]\n        img = np.asarray(Image.open(path + \"train\/\" + img_name))\n    else:\n        img_name = test.iloc[row, 0]\n        img = np.asarray(Image.open(path + \"test\/\" + img_name))\n    plt.imshow(img)        \n    plt.show()\n    \ndef image_object_show(path, row, train_data=True):\n    if train_data:\n        img_name, x, y, w, h = train.iloc[row, 0], train.iloc[row, 1], train.iloc[row, 2], train.iloc[row, 3], train.iloc[row, 4]\n        img = np.asarray(Image.open(path + \"train\/\" + img_name))\n        cv2.rectangle(img,(x,y),(w,h),(0,255,0),4)\n    else:\n        img_name, x, y, w, h = test.iloc[row, 0], test.iloc[row, 1], test.iloc[row, 2], test.iloc[row, 3], test.iloc[row, 4]\n        img = np.asarray(Image.open(path + \"test\/\" + img_name))\n        cv2.rectangle(img,(x,y),(w,h),(0,255,0),4)\n    plt.imshow(img)        \n    plt.show()","81bc8486":"image_show(path, 130)","7ee124b7":"image_object_show(path, 130)","645980b2":"image_show(path, 251)","641f1efd":"image_object_show(path, 251)","ab98aee5":"train['image_index'] = train.index\n\n# train data + class data \n# name -> company \/ car_model_name \/ car_body_type \/ year\ntrain = pd.merge(train, class_, how='left', left_on='class', right_on='id')\ntrain['company'] = train['name'].apply(lambda x: x.split(' ')[0])\n\ntrain['car_model_name'] = train['name'].apply(lambda x: x.split(' ')[1:-2])\ntrain['car_model_name'] = train.car_model_name.apply(', '.join)\ntrain['car_model_name'] = train['car_model_name'].str.replace(',','')\n\ntrain['car_body_type'] = train['name'].apply(lambda x: x.split(' ')[-2])\n\ntrain['year'] = train['name'].apply(lambda x: x.split(' ')[-1])","0e46b8bd":"train['image_count'] = train['class'] \/ train['id']","8a00dde4":"train.head()","2caacadd":"text = ''\nfor name in train['company']:\n    text += ' ' + name\n\nCompany = WordCloud(max_font_size=50, width=600, height=300, background_color='white').generate(text)\nplt.figure(figsize=(15,8))\nplt.imshow(Company)\nplt.title(\"- Company -\", fontsize=40, color='red')\nplt.axis(\"off\")\nplt.show() ","7b884388":"plt.figure(figsize=(70, 8))\nsns.countplot(x = train['company'], order = train['company'].value_counts().index)\nplt.show()","abb517c3":"pd.crosstab(train['company'], train['car_body_type'], margins=True)","0f74e624":"plt.figure(figsize=(70, 8))\nsns.countplot(x = train['company'], hue = 'car_body_type', data = train, order = train['company'].value_counts().index)\nplt.show()","cccd74ce":"# train.groupby(\"company\")['car_model_name'].value_counts()\n# train.groupby(\"company\")['car_body_type'].value_counts()\n# train.groupby(\"car_body_type\")['car_model_name'].value_counts()","2f6de82a":"pd.pivot_table(train,index=[\"company\",\"car_model_name\",\"car_body_type\"], values=[\"image_count\"],aggfunc=[np.sum])","2833acf9":"pd.pivot_table(train,index=[\"company\",\"car_body_type\",\"car_model_name\"],values=[\"image_count\"],aggfunc=[np.sum])","2837c633":"pd.pivot_table(train,index=[\"company\",\"car_body_type\"],values=[\"image_count\"],aggfunc=[np.sum])","76c536ba":"pd.pivot_table(train,index=[\"car_body_type\",\"car_model_name\"],values=[\"image_count\"],aggfunc=[np.sum])","3aa61b66":"plt.figure(figsize=(300, 8))\nsns.countplot(x = train['car_model_name'], order = train['car_model_name'].value_counts().index)\nplt.show()","ef99b55d":"plt.figure(figsize=(70, 8))\nsns.countplot(x = train['car_body_type'], order = train['car_body_type'].value_counts().index)\nplt.show()","89f889b0":"plt.figure(figsize=(20, 8))\nsns.countplot(x = train['year'], order = train['year'].value_counts().index)\nplt.show()","6b16ac4e":"train.head()","536e8058":"for i in range(len(train)):\n    img = Image.open(path + \"train\/\" + train.iloc[i, 0])\n    img_size = list(img.size)\n    train.loc[i, 'width'] = img_size[0]\n    train.loc[i, 'height'] = img_size[1]","87ffa83f":"for i in range(len(test)):\n    img = Image.open(path + \"test\/\" + test.iloc[i, 0])\n    img_size = list(img.size)\n    test.loc[i, 'width'] = img_size[0]\n    test.loc[i, 'height'] = img_size[1]","7b026fe8":"train['cropped_width'] = abs(train['bbox_x1'] - train['bbox_x2'])\ntrain['cropped_height'] = abs(train['bbox_y1'] - train['bbox_y2'])\ntest['cropped_width'] = abs(test['bbox_x1'] - test['bbox_x2'])\ntest['cropped_height'] = abs(test['bbox_y1'] - test['bbox_y2'])","fbbbb3e2":"train.head()","539e0370":"test.head()","d0d81415":"height = []\nwidth = []\ncropped_height = []\ncropped_width = []\nfor i in range(len(train)):\n    img = np.asarray(Image.open(path + \"train\/\" + train.iloc[i, 0]))\n    height.append(img.shape[0])\n    width.append(img.shape[1])\n    cropped_height = train['cropped_height']\n    cropped_width = train['cropped_width']","100c0d6a":"plt.subplots(2, 2, figsize=(20, 6))\n\nplt.subplot(2, 2, 1)\nsns.distplot(height)\nplt.title('Height Distribution')\n\nplt.subplot(2, 2, 2)\nsns.distplot(width)\nplt.title('Widht Distribution')\n\nplt.subplot(2, 2, 3)\nsns.distplot(cropped_height)\nplt.title('cropped_Height Distribution')\n\nplt.subplot(2, 2, 4)\nsns.distplot(cropped_width)\nplt.title('cropped_Widht Distribution')\nplt.show()","2f715b6e":"<h1><center><font size=\"6\">\uc790\ub3d9\ucc28 \uc774\ubbf8\uc9c0 \ub370\uc774\ud130\uc14b\uc744 \uc774\uc6a9\ud55c \uc790\ub3d9\ucc28 \ucc28\uc885 \ubd84\ub958<\/font><\/center><\/h1>\n\n\n<h2><center><font size=\"4\">2019 3rd ML month with KaKR - EDA version<\/font><\/center><\/h2>\n\n<br>\n\n# **<a id='0'>Content<\/a>**\n\n- <a href='#1'>Introduction<\/a>  \n- <a href='#2'>Load Package and Data Check<\/a>\n- <a href='#3'>Data Exploration<\/a>","22df6653":"# **<a id='1'>Introduction<\/a>**\n\n\n#### **Competition background**\n\uc6b0\ub9ac\uac00 \uc0b4\uba74\uc11c \uac16\uace0 \uc2f6\uc740\uac8c \uc5ec\ub7ec \uac00\uc9c0\uac00 \uc788\uc9c0\ub9cc, \uc9d1 \ub2e4\uc74c\uc73c\ub85c \ubcf4\ud1b5 \uc790\ub3d9\ucc28 \uc77c \uac83\uc785\ub2c8\ub2e4. \uc6b0\ub9ac \uc8fc\uc704\uc5d0\uc11c \ud754\ud788 \ubcfc \uc218 \uc788\uace0, \ud3b8\ub9ac\ud55c \uad50\ud1b5 \uc218\ub2e8 \uc911\uc5d0 \ud558\ub098\uc785\ub2c8\ub2e4. \uc804 \uc138\uacc4\uc801\uc73c\ub85c \uadf8 \uc218\ub294 \ubb34\ub824 10\uc5b5\ub300\uac00 \ub118\uace0, \uadf8 \uc885\ub958\ub294 \uc218\ubc31, \uc218\ucc9c \uac00\uc9c0 \uc774\uc0c1 \ub41c\ub2e4\uace0 \ud569\ub2c8\ub2e4.\n\n\ud558\uc9c0\ub9cc, \uc774\ub807\uac8c \ub9ce\uc740 \ucc28\uc885\uc744 \uad6c\ubcc4\ud558\ub294 \uac83\uc740 \uc0ac\ub78c\uc77c\uc9c0\ub77c\ub3c4 \uc27d\uc9c0\uac00 \uc54a\uc740\ub370\uc694. \ub9cc\uc57d, \uadf8\ub9bc\ub9cc \ubcf4\uace0 \uc790\ub3d9\ucc28\uc758 \ubaa8\ub378(Class)\uc744 \uc27d\uac8c \uc608\uce21\ud560 \uc218 \uc788\ub2e4\uba74 CCTV\ub098 \ube14\ub799\ubc15\uc2a4 \uc18d\uc758 \ucc28\ub7c9\uc744 \uc790\ub3d9\uc73c\ub85c \ubd84\ub958, \uac10\uc9c0\ud574\uc11c \ubc94\uc8c4\uc608\ubc29\uc5d0 \ub3c4\uc6c0\uc744 \uc904 \uc218 \uc788\ub294 \ub4f1 \ub2e4\uc591\ud55c \uacf3\uc5d0 \uc720\uc775\ud558\uac8c \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc774\ubc88 \ucef4\ud398\ud2f0\uc158\uc5d0\uc11c\ub294, \uc790\ub3d9\ucc28 \uc774\ubbf8\uc9c0 \ub370\uc774\ud130\uc14b\uc744 \ud65c\uc6a9\ud558\uc5ec \uc774\ubbf8\uc9c0\uc5d0 \ud574\ub2f9\ud558\ub294 \ucc28\uc885(Class)\uc774 \uacfc\uc5f0 \ubb34\uc5c7\uc778\uc9c0 \uc608\uce21\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n#### **Evaluation**\n\uc774\ubc88 \ucef4\ud398\ud2f0\uc158\uc758 \ud3c9\uac00\uc9c0\ud45c(Metric)\uc740 F1 score \uc785\ub2c8\ub2e4.\n\n#### **Timeline**\n'19.06.14 ~ '19.08.17\n\n#### **Data**\n- train.csv - Train \uc14b\uc758 \uc774\ubbf8\uc9c0 \ud30c\uc77c\uba85, \ubc14\uc6b4\ub529\ubc15\uc2a4 \uc88c\ud45c, \ucc28\uc885\uc815\ubcf4\n- test.csv - Test \uc14b\uc758 \uc774\ubbf8\uc9c0 \ud30c\uc77c\uba85, \ubc14\uc6b4\ub529\ubc15\uc2a4 \uc88c\ud45c, \ucc28\uc885\uc815\ubcf4\n- submission.csv - Test\uc14b\uacfc \ub300\uc751\ub418\ub294 \uc81c\ucd9c \ud30c\uc77c\n- class.csv - \ub370\uc774\ud130 \uc14b\uc758 class \uceec\ub7fc\uacfc \ub300\uc751\ub418\ub294 \ucc28\uc885\uc758 \ub808\uc774\ube14\n- train.zip - Train \uc774\ubbf8\uc9c0 \ud30c\uc77c\n- test.zip - Test \uc774\ubbf8\uc9c0 \ud30c\uc77c","d7ee23f6":"(\uc815\ud655\ud55c \ubd84\uc11d\uc778\uc9c0 \ubaa8\ub974\uaca0\uc9c0\ub9cc...)\n\uc6d0\ubcf8 \uc774\ubbf8\uc9c0\uc5d0\uc11c CROPPED \uc774\ubbf8\uc9c0\ub85c \ubcc0\ud654\ub97c \ubcf4\uba74, \ub113\uc774\ub294 \ube44\uc2b7\ud55c \ubd84\ud3f4\ub97c \ubcf4\uc774\uace0 \ub192\uc774\ub294 \uc57d\uac04 \ub2ec\ub77c\uc9c0\ub294 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","2fa5261d":"**Golf**(Volkswagen) \ub4f1 15\uac00\uc9c0 \uc790\ub3d9\ucc28 \ubaa8\ub378\uc774 100\uac1c \uc774\uc0c1\uc758 \uc774\ubbf8\uc9c0 \uac1c\uc218 \ucc28\uc9c0\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.","6b271466":" - \ud55c\uac00\uc9c0 \ub208\uc5ec\uaca8\ubcfc \uc810\uc740 \uc5ec\ub7ec\uac00\uc9c0 \uc774\ubbf8\uc9c0\ub97c \ubcf4\uc558\uc744 \ub54c, \ubc14\uc6b4\ub529\ubc15\uc2a4\uac00 \ucc28\uc5d0 \uc644\uc804\ud788 \ub531 \ub9de\ucdb0\uc838 \uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","1e88e659":"Chevrolet, Dodge, Audi, BMW, Ford, Hyundai \ud68c\uc0ac \ucc28\ub4e4\uc774 \ub9ce\uc740 \uc218\ub97c \ucc28\uc9c0\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.","882e669b":"# **<a id='2'>Load Package and Data Check<\/a>**\n\n## Load Package","1881b79e":"# **<a id='3'>Data Exploration<\/a>**\n\n## Text","a9301373":"<h2><font size=\"4\">\ub2e4\uc74c \ucee4\ub110\uc744 \ubc14\ud0d5\uc73c\ub85c \uc791\uc131\ud558\uc600\uc2b5\ub2c8\ub2e4.<\/font><\/h2>\n\n - Hyeonho Lee \ub2d8\uc758 \"[3rd ML Month] Car Model Classification Baseline\" : https:\/\/www.kaggle.com\/hyeonho\/2019-3rd-ml-month-with-kakr-eda\n \n **\uac10\uc0ac\ud569\ub2c8\ub2e4.**","e5ded1ad":" - Class data\uc758 Name\uc744 \ubcf4\uba74 Name -> \uc790\ub3d9\ucc28 \ud68c\uc0ac \/ \uc790\ub3d9\ucc28 \ubaa8\ub378\uba85 \/ \uc790\ub3d9\ucc28 \ud0c0\uc785 \/ \ub144\ub3c4\ub85c \uad6c\uc131\uc774 \ub418\uc5b4 \uc788\ub294\uac78 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n - \uc704 \uae30\uc900\uc744 \ubc14\ud0d5\uc744\ub85c Nmae \ud56d\ubaa9\uc744 \ub098\ub220\uc11c \uc0c8\ub85c\uc6b4 \ud56d\ubaa9\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.","785f6923":"## Data Check - Image","97563697":"## Data Check - Text","aa4c3122":"## Image","80883e3e":"2012\ub144\uc2dd\uc774 \uac00\uc7a5 \ub9ce\uc740 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","c04f8652":"Sedan, SUV, Coupe, Convertible, Cab, Hatchback \ucc28\uc885\uc774 \ub300\ub2e4\uc218\ub97c \ucc28\uc9c0\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4."}}