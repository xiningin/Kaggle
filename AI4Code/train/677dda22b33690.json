{"cell_type":{"c8f7bea1":"code","e1a5b957":"code","07b58053":"code","71248cb1":"code","06e083f0":"code","bcd9909c":"code","b1e69b40":"code","1fb560e4":"code","e6cdd730":"code","6f94c8e9":"code","f58fa092":"code","cc0b0e4a":"code","5fda2994":"code","6483e1ee":"code","5b472b66":"code","79966d87":"code","ccd0ed75":"code","e04bde91":"code","a80c4e98":"code","da860f35":"code","a710ffd4":"code","d8fda76b":"code","50e36448":"code","435a6ff0":"code","89e81465":"code","fad006fe":"code","c74e44e3":"code","2c652a16":"code","f154ff2c":"code","6fc4d2b0":"code","9fa04b2c":"code","b3987c50":"code","17d0cc59":"code","93ca88fc":"code","bffedc55":"code","23321a72":"markdown","aa363b00":"markdown","9ab20f1d":"markdown","49e5b316":"markdown","fde1125e":"markdown","60953677":"markdown","cec9f7be":"markdown","1adb1ad7":"markdown","5570c526":"markdown","70d02f74":"markdown","f937e175":"markdown","55bf277b":"markdown","d92008aa":"markdown"},"source":{"c8f7bea1":"from itertools import permutations\nfrom typing import List, Tuple\n\n\nclass Evaluator:\n    \"\"\"for evaluate strings\"\"\"\n    def __init__(self):\n        self.check_seq_7: List[str] = []  # 5040 permutations\n        for p in permutations(['1', '2', '3', '4', '5', '6', '7']):\n            self.check_seq_7.append(\"\".join(p))\n        self.check_seq_12: List[str] = []  # 120 12xxxxx\n        for p in permutations(['3', '4', '5', '6', '7']):\n            self.check_seq_12.append(\"12\" + \"\".join(p))\n\n    def evaluate(self, strings: List[str]) -> Tuple[List[str], List[List[str]]]:\n        \"\"\"\n        Returns:\n        missing_7: List[str], list of missing strings in 5040 permutations. Empty list is expected.\n        missing_12: List[List[str]], list of missing strings in 120 permutations (12xxxxx) for each string.\n        all empty is expected\n        \"\"\"\n        missing_7: List[str] = []\n        missing_12: List[List[str]] = [[] for _ in range(len(strings))]\n\n        exists_7: List[str] = []\n        exists_12: List[List[str]] = [[] for _ in range(len(strings))]\n\n        for i, string in enumerate(strings):\n            # slice string\n            cnt = [0] * 9\n            illegal = 0\n            assert string.count(\"8\") <= 2, \"three or more almighty is prohibited\"\n            for j, c in enumerate(string):\n                # must be in 012345678 to count\n                assert c in \"012345678\", f\"illegal character c in input\"\n                if c == \"0\":\n                    illegal += 1\n                else:\n                    cnt[int(c)] += 1\n                if j >= 7:\n                    c_ = string[j - 7]\n                    if c_ == \"0\":\n                        illegal -= 1\n                    else:\n                        cnt[int(c_)] -= 1\n                assert cnt[8] <= 1, \"8 is too nearby\"\n                if j >= 6 and illegal == 0 and max(cnt) == 1:\n                    st = string[j - 6:j + 1]\n                    if cnt[8]:\n                        k = 8\n                        for k in range(1, 8):\n                            if cnt[k] == 0:\n                                break\n                        st = st.replace(\"8\", str(k))\n                    exists_7.append(st)\n                    if st[:2] == \"12\":\n                        exists_12[i].append(st)\n\n        for s in self.check_seq_7:\n            if s not in exists_7:\n                missing_7.append(s)\n\n        for i, string_each in enumerate(strings):\n            for s in self.check_seq_12:\n                if s not in exists_12[i]:\n                    missing_12[i].append(s)\n\n        return missing_7, missing_12\n","e1a5b957":"eva = Evaluator()","07b58053":"def query_35(p: str) -> str:\n    \"\"\"\n    inputs p: 3456 for example,\n    returns sequence length 35, for example,\n    12734561237456123475612345761234567\n    \"\"\"\n    res = \"\"\n    q = '7' + p[0] + p[1] + p[2] + p[3]\n    res += \"12\" + q\n    q = p[0] + '7' + p[1] + p[2] + p[3]\n    res += \"12\" + q\n    q = p[0] + p[1] + '7' + p[2] + p[3]\n    res += \"12\" + q\n    q = p[0] + p[1] + p[2] + '7' + p[3]\n    res += \"12\" + q\n    q = p[0] + p[1] + p[2] + p[3] + '7'\n    res += \"12\" + q\n    return res\n","71248cb1":"query_35(\"3456\")","06e083f0":"def query_28(p: str) -> str:\n    \"\"\"\n    inputs p: 3456 for example,\n    returns sequence length 28, for example,\n    1234567123457612374561273456\n    \"\"\"\n    res = \"\"\n    q = p[0] + p[1] + p[2] + p[3] + '7'\n    res += \"12\" + q\n    q = p[0] + p[1] + p[2] + '7' + p[3]\n    res += \"12\" + q\n    q = p[0] + '7' + p[1] + p[2] + p[3]\n    res += \"12\" + q\n    q = '7' + p[0] + p[1] + p[2] + p[3]\n    res += \"12\" + q\n    return res\n","bcd9909c":"query_28(\"3456\")","b1e69b40":"def query_45(p: str) -> str:\n    \"\"\"\n    inputs p: 34567 for example,\n    returns sequence length 45 for example,\n    345672134567231456723415672345167234561723456\n    \"\"\"\n    res = \"\"\n    p_list = list(p) + ['2']\n    for _ in range(5):\n        res += \"\".join(p_list)\n        res += \"1\"\n        res += p_list[0]\n        p_list = p_list[1:] + [p_list[0]]\n    res += \"\".join(p_list[:-1])\n\n    return res\n\n\ndef query_47(p: str) -> str:\n    return \"12\" + query_45(p)\n","1fb560e4":"query_45(\"34567\")","e6cdd730":"res_list = []\nfor p in permutations(['3', '4', '5', '6']):\n    res_list.append(query_35(\"\".join(p)))\n    \nfor p in permutations(['3', '4', '5', '6']):\n    res_list.append(query_28(\"\".join(p)))\n    \nfor p in permutations(['3', '4', '5', '6', '7']):\n    res_list.append(query_45(\"\".join(p)))\n\nres_string = \"0\".join(res_list)","6f94c8e9":"missing_7, missing_12 = eva.evaluate([res_string])","f58fa092":"len(missing_7), len(missing_12[0])","cc0b0e4a":"missing_7","5fda2994":"res_list = []\nfor p in permutations(['3', '4', '5', '6']):\n    res_list.append(query_28(\"\".join(p)))\n    res_list.append(query_35(\"\".join(p)))\n    \nres_list = [\"\".join(res_list)]\n\nfor p in permutations(['3', '4', '5', '6', '7']):\n    res_list.append(query_45(\"\".join(p)))\n\nres_string = \"0\".join(res_list)","6483e1ee":"missing_7, missing_12 = eva.evaluate([res_string])","5b472b66":"len(missing_7), len(missing_12[0])","79966d87":"missing_7","ccd0ed75":"def base_solution(mode: str = \"2440\"):\n    res_45 = [[], [], []]\n    res_12 = [[], [], []]\n    res_12_rev = [[], [], []]\n    res_12_free = [[], [], []]\n    # Group so that 5 permutations such as 1273456, 1237456, 1234756, 1234576, 1234567\n    # sre in same group\n    group_index = dict()\n    for i, p in enumerate(permutations(['3', '4', '5', '6'])):\n        \n        j0 = i % 3\n        j1 = (j0 + 1) % 3\n        j2 = (j1 + 1) % 3\n\n        query_list = []\n        q = '7' + p[0] + p[1] + p[2] + p[3]\n        query_list.append(q)\n        q = p[0] + '7' + p[1] + p[2] + p[3]\n        query_list.append(q)\n        q = p[0] + p[1] + '7' + p[2] + p[3]\n        query_list.append(q)\n        q = p[0] + p[1] + p[2] + '7' + p[3]\n        query_list.append(q)\n        q = p[0] + p[1] + p[2] + p[3] + '7'\n        query_list.append(q)\n        # For example, query_list is [\"73456\", \"37456\", \"34756\", \"34576\", \"34567\"]\n\n        # long sequence\n        res_45[j0].append(query_47(query_list[0]))\n        res_45[j0].append(query_47(query_list[1]))\n        res_45[j0].append(query_47(query_list[2]))\n        res_45[j0].append(query_47(query_list[3]))\n        res_45[j0].append(query_47(query_list[4]))\n\n        # straight\n        r_12_straight = \"\".join([\"12\" + q for q in query_list])\n        # For example, res_12_straight is 12734561237456123475612345761234567\n        res_12[j1].append(r_12_straight)\n\n        # reversed\n        r_12_reversed = \"12\" + query_list[4] + \"12\" + query_list[3] + \"12\" + query_list[1] + \"12\" + query_list[0]\n        # For example, res_12_reversed is 1234567123457612374561273456\n        res_12_rev[j2].append(r_12_reversed)\n\n        # free\n        res_12_free[j2].append(\"12\" + query_list[2])\n    str_list = []\n    for j in range(3):\n        concat_12 = \"\"\n        for s, t in zip(res_12_rev[j], res_12[j]):\n            concat_12 += s + t\n        str_list.append(res_45[j][:38] + res_12_free[j] + [res_45[j][39] + res_45[j][38] + concat_12])\n        # swap res_45[j] because concat_12 needs 7 just before it\n\n    return str_list\n","e04bde91":"base_sol_list = base_solution()\nstr_0 = \"\".join(base_sol_list[0])\nstr_1 = \"\".join(base_sol_list[1])\nstr_2 = \"\".join(base_sol_list[2])","a80c4e98":"print(len(str_0), len(str_1), len(str_2))","da860f35":"eva.evaluate([str_0, str_1, str_2])","a710ffd4":"def solution_2430():\n    base_sol_list = base_solution()\n    for j in range(3):\n        # find a pair so that 12xabcd is free and 12abcdx... is in 47s\n        # limit 2\n        cnt = 0\n        for q in base_sol_list[j][38:46]:\n            for s in base_sol_list[j][:38]:\n                if s[2:6] == q[3:] and len(s) == 47:  # len(s) == 47 is for avoiding double operation for same s\n                    print(j, s, q)\n                    m = base_sol_list[j].index(q)\n                    n = base_sol_list[j].index(s)\n                    # modify s\n                    base_sol_list[j][n] = q[:3] + s[2:-6] + \"8\" + s[-5:] + q[2]\n                    # delete t\n                    base_sol_list[j][m] = \"\"\n                    cnt += 1\n\n            if cnt == 2:\n                break\n\n    str_0 = \"\".join(base_sol_list[0])\n    str_1 = \"\".join(base_sol_list[1])\n    str_2 = \"\".join(base_sol_list[2])\n    return [str_0, str_1, str_2]","d8fda76b":"str_0, str_1, str_2 = solution_2430()","50e36448":"print(len(str_0), len(str_1), len(str_2))","435a6ff0":"eva.evaluate([str_0, str_1, str_2])","89e81465":"def base_solution(mode: str = \"2440\"):\n    res_45 = [[], [], []]\n    res_12 = [[], [], []]\n    res_12_rev = [[], [], []]\n    res_12_free = [[], [], []]\n    # Group so that 5 permutations such as 1273456, 1237456, 1234756, 1234576, 1234567\n    # sre in same group\n    group_index = dict()\n    for i, p in enumerate(permutations(['3', '4', '5', '6'])):\n        \n        if mode == \"2428\":\n            j1 = i \/\/ 8\n            j2 = (j1 + 2 - (i % 2)) % 3\n            j0 = (j1 + 1 + (i % 2)) % 3\n        elif mode == \"2429\":\n            j0 = i \/\/ 8\n            j1 = (j0 + 1) % 3\n            j2 = (j1 + 1) % 3\n        else:\n            j0 = i % 3\n            j1 = (j0 + 1) % 3\n            j2 = (j1 + 1) % 3\n\n        query_list = []\n        q = '7' + p[0] + p[1] + p[2] + p[3]\n        query_list.append(q)\n        q = p[0] + '7' + p[1] + p[2] + p[3]\n        query_list.append(q)\n        q = p[0] + p[1] + '7' + p[2] + p[3]\n        query_list.append(q)\n        q = p[0] + p[1] + p[2] + '7' + p[3]\n        query_list.append(q)\n        q = p[0] + p[1] + p[2] + p[3] + '7'\n        query_list.append(q)\n        # For example, query_list is [\"73456\", \"37456\", \"34756\", \"34576\", \"34567\"]\n\n        # long sequence\n        res_45[j0].append(query_47(query_list[0]))\n        res_45[j0].append(query_47(query_list[1]))\n        res_45[j0].append(query_47(query_list[2]))\n        res_45[j0].append(query_47(query_list[3]))\n        res_45[j0].append(query_47(query_list[4]))\n\n        # straight\n        r_12_straight = \"\".join([\"12\" + q for q in query_list])\n        # For example, res_12_straight is 12734561237456123475612345761234567\n        res_12[j1].append(r_12_straight)\n\n        # reversed\n        r_12_reversed = \"12\" + query_list[4] + \"12\" + query_list[3] + \"12\" + query_list[1] + \"12\" + query_list[0]\n        # For example, res_12_reversed is 1234567123457612374561273456\n        res_12_rev[j2].append(r_12_reversed)\n\n        # free\n        res_12_free[j2].append(\"12\" + query_list[2])\n    str_list = []\n    for j in range(3):\n        concat_12 = \"\"\n        for s, t in zip(res_12_rev[j], res_12[j]):\n            concat_12 += s + t\n        str_list.append(res_45[j][:38] + res_12_free[j] + [res_45[j][39] + res_45[j][38] + concat_12])\n        # swap res_45[j] because concat_12 needs 7 just before it\n\n    return str_list\n","fad006fe":"def solution_2429():\n    base_sol_list = base_solution(mode=\"2429\")\n    for j in range(3):\n        # find a triplet q, s, t so that q = 12xabcd is free and\n        # s starts with 12abcdx and t starts with 12abcxd\n        # limit 1\n        cnt = 0\n        for q in base_sol_list[j][38:46]:\n            for s in base_sol_list[j][:38]:\n                if s[2:6] == q[3:]:\n                    query_t = s[:5] + s[6] + s[5]\n                    for t in base_sol_list[j][:38]:\n                        if t[:7] == query_t:\n                            print(j, q, s, t)\n                            i = base_sol_list[j].index(q)\n                            m = base_sol_list[j].index(s)\n                            n = base_sol_list[j].index(t)\n                            # modify s\n                            s_ = s[6:-1] + t[-1] + s[-1]\n                            t_ = t[7:-1] + s[-1] + t[-1]\n                            s_ = s_[:-7] + \"8\" + s_[-6:]\n                            t_ = t_[:-7] + \"8\" + t_[-6:]\n                            base_sol_list[j][m] = q + s_ + t_\n                            # delete q and t\n                            base_sol_list[j][i] = \"\"\n                            base_sol_list[j][n] = \"\"\n                            cnt += 1\n            if cnt == 1:\n                break\n\n    str_0 = \"\".join(base_sol_list[0])\n    str_1 = \"\".join(base_sol_list[1])\n    str_2 = \"\".join(base_sol_list[2])\n    return [str_0, str_1, str_2]\n","c74e44e3":"str_0, str_1, str_2 = solution_2429()","2c652a16":"print(len(str_0), len(str_1), len(str_2))","f154ff2c":"eva.evaluate([str_0, str_1, str_2])","6fc4d2b0":"def solution_2428():\n    base_sol_list = base_solution(mode=\"2428\")\n    for i in range(3):\n        j = (i + 1) % 3\n        cnt = 0\n        # find pair so that s = 12abcde is in 47s and 12abced is in free, and the converse is true\n        for s in base_sol_list[i][:38]:\n            query_s = s[:5] + s[6] + s[5]\n            if query_s not in base_sol_list[i][38:46]:\n                continue\n            for t in base_sol_list[j][:38]:\n                query_t = t[:5] + t[6] + t[5]\n                if query_t not in base_sol_list[j][38:46]:\n                    continue\n                if s[:5] == t[:5]:\n                    print(i, s, t)\n                    m = base_sol_list[i].index(s)\n                    n = base_sol_list[j].index(t)\n                    p = base_sol_list[i].index(query_s)\n                    q = base_sol_list[j].index(query_t)\n                    s_ = s[:-6] + \"8\" + t[-5:] + t[-6]\n                    t_ = t[:-6] + \"8\" + s[-5:] + s[-6]\n                    base_sol_list[i][m] = s_\n                    base_sol_list[j][n] = t_\n                    base_sol_list[i][p] = \"\"\n                    base_sol_list[j][q] = \"\"\n\n\n                    cnt += 1\n\n            if cnt == 1:\n                break\n\n    str_0 = \"\".join(base_sol_list[0])\n    str_1 = \"\".join(base_sol_list[1])\n    str_2 = \"\".join(base_sol_list[2])\n    return [str_0, str_1, str_2]\n","9fa04b2c":"str_0, str_1, str_2 = solution_2428()","b3987c50":"print(len(str_0), len(str_1), len(str_2))","17d0cc59":"eva.evaluate([str_0, str_1, str_2])","93ca88fc":"# CONVERT NUMBERS TO EMOJIS\nreplace_dict = {\n    '1': '\ud83c\udf85',\n    '2': '\ud83e\udd36',\n    '3': '\ud83e\udd8c',\n    '4': '\ud83e\udddd',\n    '5': '\ud83c\udf84',\n    '6': '\ud83c\udf81',\n    '7': '\ud83c\udf80',\n    '8': '\ud83c\udf1f'\n}\n\nfor k, v in replace_dict.items():\n    str_0 = str_0.replace(k, v)\n    str_1 = str_1.replace(k, v)\n    str_2 = str_2.replace(k, v)","bffedc55":"import pandas as pd\n\n# WRITE SUBMISSION CSV\nsub = pd.DataFrame()\nsub['schedule'] = [str_0, str_1, str_2]\nsub.to_csv('submission.csv',index=False)\nsub.head()","23321a72":"### 2440 solution","aa363b00":"The reason for joining with 0 is to have the freedom to cut and move lator.","9ab20f1d":"### 2429 and 2428 solution","49e5b316":"### 2430 solution","fde1125e":"create suquence such as  \n\n```1273456 1237456 1234756 1234576 1234567```(length 35)","60953677":"It's almost done, 7123456 is created by moving xxxx7 in front of 1234567...","cec9f7be":"for p in permutations(['3', '4', '5', '6']),   \n1) query_47(q) (q is p and 7)  \n2) query_28(p) and free 12xx7xx  \n3) query_35(p)  \nsplit is a way to create 2440 solution","1adb1ad7":"missing some sequences, so add other order","5570c526":"### Check if they are enough","70d02f74":"missings are 712xxxx and xxxx127  \nThis problem can be solved by arranging query_35(p) and query_28(p) alternately.","f937e175":"### create evaluator","55bf277b":"2429 and 2428 needs modification in assign","d92008aa":"create suquence such as  \n\n```345672 1 3456723 1 4567234 1 5672345 1 6723456 1 723456```(length 45)"}}