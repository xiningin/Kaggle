{"cell_type":{"7b564682":"code","f8746332":"code","fa2064f7":"code","80455fe2":"code","ce65f90e":"code","73a5baff":"code","d4432296":"code","db6cec85":"code","d8b00d02":"code","ab1b57b5":"code","1b7933c9":"code","e24fe124":"code","0713ca16":"code","3937f6ed":"code","f4e418f1":"code","2dc950c2":"code","78ee890e":"code","1fcad048":"markdown","17f4ad77":"markdown","949ba672":"markdown"},"source":{"7b564682":"import re\nimport gc\nimport glob\nimport keras\nimport pandas as pd\nimport numpy  as np\n\nimport tensorflow as tf\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn.metrics import roc_curve, auc, multilabel_confusion_matrix\n\n\nimport keras.backend as K\nfrom keras.models     import Sequential\nfrom keras.layers     import Dense, Dropout, GlobalMaxPooling2D\nfrom keras.optimizers import Adam, SGD\nfrom keras.applications import MobileNetV2\nfrom keras.callbacks    import ReduceLROnPlateau, ModelCheckpoint, EarlyStopping, CSVLogger\nfrom sklearn.model_selection   import train_test_split\nfrom keras.preprocessing.image import ImageDataGenerator\n\nnp.random.seed(451)","f8746332":"# General parameters\nbatch_size = 16\nimage_size = 224\nepochs     = 50","fa2064f7":"# Read and prepare data\nraw_data = pd.read_csv('..\/input\/japanese-female-facial-expression-dataset-jaffe\/data.csv')\nraw_data['filepath'] = '..\/input\/japanese-female-facial-expression-dataset-jaffe\/' + raw_data['filepath']\nraw_data.fillna('UNKNOWN', inplace=True)\nraw_data.sample(3)","80455fe2":"label_count_df = pd.DataFrame(raw_data['facial_expression'].value_counts()).reset_index()","ce65f90e":"fig = px.bar(label_count_df,\n             y='index',\n             x='facial_expression',\n             orientation='h',\n             color='index',\n             title='Label Distribution',\n             opacity=0.8,\n             color_discrete_sequence=px.colors.diverging.curl,\n             template='plotly_dark'\n            )\nfig.update_xaxes(range=[0,35])\nfig.show()","73a5baff":"def plot_samples(df, label_list):\n    for label in label_list:\n        query_string = \"facial_expression == '{}'\".format(label)\n        df_label = df.query(query_string).reset_index(drop=True)\n        \n        fig = plt.figure(figsize=(18,15))\n        plt.subplot(1,4,1)\n        plt.imshow(plt.imread(df_label.loc[0,'filepath']),cmap='gray')\n        plt.title(label.capitalize())\n        \n        plt.subplot(1,4,2)\n        plt.imshow(plt.imread(df_label.loc[1,'filepath']),cmap='gray')\n        plt.title(label.capitalize())\n        \n        plt.subplot(1,4,3)\n        plt.imshow(plt.imread(df_label.loc[2,'filepath']),cmap='gray')\n        plt.title(label.capitalize())\n        \n        plt.subplot(1,4,4)\n        plt.imshow(plt.imread(df_label.loc[3,'filepath']),cmap='gray')\n        plt.title(label.capitalize())\n        \n        plt.show()","d4432296":"plot_samples(raw_data, ['happiness', 'surprise', 'neutral', 'disgust', 'angry', 'fear'])","db6cec85":"# Create train and testing sets\ntrain, test = train_test_split(raw_data,\n                               test_size = 0.3,\n                               stratify=raw_data['facial_expression'],\n                               random_state=451\n                              )","d8b00d02":"train_generator = ImageDataGenerator(\n                    rescale     = 1.\/255,\n                    shear_range = 0.1,\n                    zoom_range  = 0.1,\n                    width_shift_range  = 0.1,\n                    height_shift_range = 0.1,\n                    horizontal_flip    = True)\n\ntest_generator = ImageDataGenerator(rescale=1.\/255)","ab1b57b5":"train_gen = train_generator.flow_from_dataframe(dataframe = train,\n                                    class_mode  = 'categorical',\n                                    x_col       = 'filepath',\n                                    y_col       = 'facial_expression',\n                                    shuffle     = True,\n                                    batch_size  = batch_size,\n                                    target_size = (image_size, image_size),\n                                    seed=451)\n\n\n\n\ntest_gen  = test_generator.flow_from_dataframe(dataframe = test,\n                                    class_mode='categorical',\n                                    x_col='filepath',\n                                    y_col='facial_expression',\n                                    shuffle     = False,\n                                    batch_size  = batch_size,\n                                    target_size = (image_size, image_size),\n                                    seed=451)\n","1b7933c9":"# Create and compile model\nmodel = Sequential()\nmodel.add(MobileNetV2(input_shape=(image_size, image_size, 3), weights='imagenet', include_top=False))\nmodel.add(GlobalMaxPooling2D())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(7,activation='softmax'))\nmodel.compile(optimizer=Adam(lr=1e-4), loss='binary_crossentropy', metrics=['accuracy'])\nmodel.summary()","e24fe124":"training_hist = model.fit(train_gen,\n                          epochs = epochs,\n                            )","0713ca16":"train_df = pd.DataFrame(training_hist.history).reset_index()","3937f6ed":"fig = px.area(train_df,\n            x='index',\n            y='loss',\n            template='plotly_dark',\n            color_discrete_sequence=['rgb(18, 115, 117)'],\n            title='Training Loss x Epoch Number',\n           )\n\nfig.update_yaxes(range=[0,2])\nfig.show()","f4e418f1":"results = model.evaluate_generator(test_gen)\npreds   = model.predict_generator(test_gen)\nprint('The current model achieved a categorical accuracy of {}%!'.format(round(results[1]*100,2)))","2dc950c2":"summarized_confusion_matrix = np.sum(multilabel_confusion_matrix(pd.get_dummies(test['facial_expression']), preds >= 0.5),axis=0)","78ee890e":"fig = px.imshow(summarized_confusion_matrix,\n                template ='plotly_dark',\n                color_continuous_scale = px.colors.sequential.Blugrn\n                )\n\n\nfig.update_layout(title_text='Confusion Matrix', title_x=0.5)\nfig.show()","1fcad048":"# Model Training","17f4ad77":"# Model Architecture","949ba672":"# Evaluate Results"}}