{"cell_type":{"951019c0":"code","5d7e5014":"code","c0761946":"code","8bfd8060":"code","24c99cee":"code","2ff3bf42":"code","8b756911":"code","da780965":"code","02097cdf":"code","108ccc59":"code","7ade2c76":"code","55eedbd0":"code","f388f41d":"code","4e6b4d49":"code","28640db2":"code","7fbc5c3b":"code","c552704e":"code","874bdb11":"code","06de0566":"code","e4c777aa":"code","db4c2ac9":"code","a8735fb7":"markdown","c5f3757d":"markdown","cf675243":"markdown","cb98543c":"markdown","1f6097b8":"markdown","4bdd4cb8":"markdown","c4950f36":"markdown","c39195c0":"markdown"},"source":{"951019c0":"import os\nimport sys\nimport re\n\nimport numpy as np \nimport pandas as pd \nimport cv2\nimport pydicom\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm\nimport lightgbm as lgb\nfrom IPython.display import Image, display\nfrom ipywidgets import interact\nfrom skimage.filters import threshold_otsu, threshold_local","5d7e5014":"train_df = pd.read_csv('..\/input\/stage_1_train_labels.csv')    \ntrain_info = pd.read_csv(\"..\/input\/stage_1_detailed_class_info.csv\")","c0761946":"train_df.head()","8bfd8060":"train_info.head()","24c99cee":"def get_dcm_data(pId):\n    dicom_data = pydicom.read_file('..\/input\/stage_1_train_images\/'+pId+'.dcm')\n    return dicom_data\n\ndef get_metadata(pId, attribute):\n    dcmdata = get_dcm_data(pId)\n    # extract attribute values\n    attribute_value = getattr(dcmdata, attribute)\n    return attribute_value\n\ndef get_image(pId, size=(256, 256)):\n    dcmdata = get_dcm_data(pId)\n    img = cv2.resize(dcmdata.pixel_array, size)\n    return img\n\ndef get_otsu_image(img):\n    global_thresh = threshold_otsu(img)\n    binary_global = img > global_thresh\n    return binary_global.astype('int')\n    \ndef get_adaptive_image(img, block_size=31):\n    local_thresh = threshold_local(image, block_size, offset=10)\n    binary_local = image > local_thresh\n    return binary_local.astype('int')\n\n# Crop out the window and calculate the histogram\ndef get_window_avg(test_image, windowsize_r=32, windowsize_c=32):\n    ls = []\n    for r in range(0,test_image.shape[0] - windowsize_r, windowsize_r):\n        for c in range(0,test_image.shape[1] - windowsize_c, windowsize_c):\n            window = test_image[r:r+windowsize_r,c:c+windowsize_c]\n            ls.append(np.mean(window))\n            \n    return ls","2ff3bf42":"attributes = ['PatientSex', 'PatientAge', 'ViewPosition']","8b756911":"for attr in tqdm(attributes):\n    train_df[attr] = train_df[\"patientId\"].apply(lambda x: get_metadata(x, attr))","da780965":"train_df[\"images\"] = train_df[\"patientId\"].apply(lambda x: get_image(x))","02097cdf":"print(\"Total number of observations: {}\".format(train_df.shape[0]))\nprint(\"Number of unique patients: {}\".format(train_df.patientId.nunique()))","108ccc59":"train_df['class'] = train_info['class']","7ade2c76":"train_df.head()","55eedbd0":"select = [\"PatientSex\", \"ViewPosition\"]\n@interact(select=select)\ndef plot_bar(select):\n    fig, axs = plt.subplots(1, 2, figsize=(20, 10))\n    df = train_df[train_df['Target'] == 1]\n    df = df[[\"patientId\", select]].drop_duplicates().drop([\"patientId\"], axis=1)[select]\n    freq = df.value_counts().sort_index()\n    axs[0].bar(x=freq.index, height=freq.values)\n    axs[0].set_title(\"Abnormal\")\n    \n    df2 = train_df[train_df['Target'] == 0]\n    df2 = df2[[\"patientId\", select]].drop_duplicates().drop([\"patientId\"], axis=1)[select]\n    freq2 = df2.value_counts().sort_index()\n    axs[1].bar(x=freq2.index, height=freq2.values, color='orange')\n    axs[1].set_title(\"Normal\")\n    fig.suptitle(\"Distribution of Target Variable\")","f388f41d":"image = train_df.iloc[3,9]","4e6b4d49":"plt.hist(image.ravel(), bins=256, fc='k', ec='k')\nplt.show()","28640db2":"global_thresh = threshold_otsu(image)\nbinary_global = image > global_thresh","7fbc5c3b":"block_size = 31\nlocal_thresh = threshold_local(image, block_size, offset=10)\nbinary_local = image > local_thresh","c552704e":"block_size2 = 121\nlocal_thresh2 = threshold_local(image, block_size2, offset=10)\nbinary_local2 = image > local_thresh2","874bdb11":"fig, axes = plt.subplots(2, 2, figsize=(20, 10))\nax = axes.ravel()\nplt.gray()\n\nax[0].imshow(image)\nax[0].set_title('Original')\n\nax[1].imshow(binary_global)\nax[1].set_title(\"Global thresholding - Otsu\")\n\nax[2].imshow(binary_local)\nax[2].set_title('Local thresholding (block size=30)')\n\nax[3].imshow(binary_local2)\nax[3].set_title('Local thresholding (block size=120)')\n\nplt.show()","06de0566":"train_df[\"images_otsu\"] = train_df[\"images\"].apply(lambda x : get_otsu_image(x))","e4c777aa":"train_df.head()","db4c2ac9":"get_window_avg(binary_local)","a8735fb7":"* Pnuemonia is equally likely in both males\/females (though resent studies show otherwise)\n*  Equally likely to among all age groups[](http:\/\/)","c5f3757d":"## Feature Engineering","cf675243":"<img src=\"https:\/\/universityhealthnews.com\/wp-content\/uploads\/pneumonia.jpg\" width=\"500px\"\/>\n\nLung consolidation occurs when the air that usually fills the small airways in your lungs is replaced with something else. Depending on the cause, the air may be replaced with:\n\n* a fluid, such as pus (in pneumonia) , blood, or water\n* a solid, such as stomach contents or cells\n\nPresence of such substances in your lungs appears as white patches ","cb98543c":"## Distribution of target variable","1f6097b8":"<img src = \"http:\/\/scikit-image.org\/docs\/dev\/_images\/sphx_glr_plot_thresholding_003.png\" width='700px'><\/img>","4bdd4cb8":"#### Adaptive Thresholding\n\nIn adaptive threshold, the threshold value at each pixel location depends on the neighboring pixel intensities. To calculate the threshold T(x, y) i.e. the threshold value at pixel location (x, y) in the image, we perform the following steps \n- A bxb region around the pixel location is selected. b is selected by the user.\n- The next step is to calculate the weighted average of the bxb region. OpenCV provides 2 methods to calculate this weighted average. We can either use the average (mean) of all the pixel location that lie in the bxb box or we can use a Gaussian weighted average of the pixel values that lie in the box. In the latter case, the pixel values that are near to the center of the box, will have higher weight. We will represent this value by WA(x, y).\n- The next step is to find the Threshold value T(x, y) by subtracting a constant parameter, let\u2019s name it param1 from the weighted average value WA(x, y) calculated for each pixel in the previous step. The threshold valueT(x, y) at pixel location (x, y) is then calculated using the formula given below \n\n#### Otsu Thresholding\n\n","c4950f36":"## Posteroanterior (PA) vs Anteroposterior (AP)\n\nThe PA (posterioranterior) film is obtained with the patient facing the cassette and the x-ray tube 6 feet away. This distance diminishes the effect of beam divergence and magnification of structures closer to the x-ray tube.  The heart shadow is magnified because it is an anterior structure. The pulmonary vasculature is also altered when patients are examined in the AP position.\n\n\n<img src=\"https:\/\/preview.ibb.co\/e21u5f\/PAvsAP.jpg\">\n","c39195c0":"<div class=\"row\">\n    <div class=\"column\">\n        <img src = \"http:\/\/www.startradiology.com\/uploads\/images\/class-x-thorax-fig28b-alveolar-consolidations-heart-failure-version2-blanco.jpg\" width=\"200px\">\n    <\/div>\n    <div class=\"column\">\n        <img src=\"http:\/\/www.chestx-ray.com\/images\/igallery\/resized\/1-100\/32-41-500-500-100.jpg\" width=\"200px\">\n    <\/div>\n<\/div>\nInfections put added stress on your heart, forcing it to work harder. Hence it may appear enlarged in some cases."}}