{"cell_type":{"ec114e47":"code","d14e5245":"code","c6a8e9d5":"code","243170bb":"code","c7d96963":"code","964657d5":"code","ba4b77f2":"code","a0a52c10":"code","fdf83b5d":"code","a51a7eec":"code","882bec60":"code","e9a4791c":"code","9c598d18":"code","c168eff0":"code","d8075ec6":"code","027e2dba":"code","44a3274d":"code","f2984197":"code","17e6a73e":"code","e9b75740":"code","25630966":"code","811ba418":"code","f17c8c0f":"code","d837326c":"code","f96198bc":"code","2262821e":"code","5309d029":"code","26d60846":"code","b4e7180a":"code","c340395e":"code","9451d802":"code","dc9c32fe":"code","2bf3a931":"code","fb25ca0c":"code","70d9e152":"code","f18b99a1":"code","3c9039f2":"code","15f9b6e7":"code","918ace00":"code","7ddb5da9":"code","52dc4d46":"code","6fec7afa":"code","3fd8a1e5":"code","e692963e":"code","1032f0c5":"code","4e8c376f":"code","d7306221":"code","a8eabb22":"code","3b588ce3":"code","7ee4e000":"markdown","bf9fe4dc":"markdown","f4d9fae7":"markdown","542a1b4f":"markdown","662da476":"markdown","a8cc6247":"markdown","b676e6e3":"markdown","01988dce":"markdown","526b0d75":"markdown","ce7f4351":"markdown","d3787558":"markdown","f8b5d994":"markdown"},"source":{"ec114e47":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d14e5245":"df_train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')\ndf_submit = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv')","c6a8e9d5":"df_train.describe()","243170bb":"df_train.head()","c7d96963":"print(\"Number of Country_Region: \", df_train['Country_Region'].nunique())\nprint(\"Dates are ranging from day\", min(df_train['Date']), \"to day\", max(df_train['Date']), \", a total of\", df_train['Date'].nunique(), \"days\")\nprint(\"The countries that have Province\/Region given are : \", df_train[df_train['Province_State'].isna()==False]['Country_Region'].unique())","964657d5":"df = df_train.fillna('NA').groupby(['Country_Region','Province_State','Date'])['ConfirmedCases'].sum() \\\n                          .groupby(['Country_Region','Province_State']).max().sort_values() \\\n                          .groupby(['Country_Region']).sum().sort_values(ascending = False)\ntop10 = pd.DataFrame(df).head(10)\ntop10","ba4b77f2":"top10.columns","a0a52c10":"plt.figure(figsize=(20,10))\nsns.barplot(x = top10.index , y = top10['ConfirmedCases'])\nsns.set_context('paper')\nplt.xlabel(\"Country_Region\",fontsize=30)\nplt.ylabel(\"Counts\",fontsize=30)\nplt.title(\"Counts of Countries affected by the pandemic that have maximum cases\",fontsize=30)\nplt.xticks(rotation = 45,fontsize=12)","fdf83b5d":"confirmed_total_dates = df_train.groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_dates = df_train.groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_dates = confirmed_total_dates.join(fatalities_total_dates)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\ntotal_dates.plot(ax=ax1)\nax1.set_title(\"Global confirmed cases\", size=13)\nax1.set_ylabel(\"Total Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nfatalities_total_dates.plot(ax=ax2, color='orange')\nax2.set_title(\"Global deceased cases\", size=13)\nax2.set_ylabel(\"Total Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","a51a7eec":"usa = df_train[df_train['Country_Region'] == 'US']","882bec60":"usa.drop('Id',axis=1,inplace=True)","e9a4791c":"usa.set_index('Date')","9c598d18":"usa_1 = pd.DataFrame(usa.groupby(['Province_State'])['Fatalities'].max().sort_values())\nusa_1['ConfirmedCases'] = usa.groupby(['Province_State'])['ConfirmedCases'].max().sort_values()\nusa_1.head(10)","c168eff0":"plt.figure(figsize=(20,10))\nsns.barplot(x = usa_1.index,y=usa_1['ConfirmedCases'])\nsns.set_context('paper')\nplt.xticks(rotation=90)\nplt.title('States affected by the pandemic',fontsize=15)","d8075ec6":"#we now do the analysis of NYC as per week.\nimport warnings\nwarnings.filterwarnings('ignore')\ntemp_df = usa[usa['Province_State'] == 'New York']\ntemp_df['Date'] = pd.to_datetime(temp_df['Date'])\ntemp_df.insert(5,'Week',temp_df['Date'].dt.week)\nf,axes = plt.subplots(1,2,figsize=(12,5))\nsns.lineplot(x = 'Week',y = 'ConfirmedCases',color='r',data=temp_df,ax = axes[0])\nsns.lineplot(x = 'Week',y = 'Fatalities',color='b',data=temp_df,ax = axes[1])\n\naxes[0].title.set_text('Confirmed Cases in NYC per week')\naxes[1].title.set_text('Fatalities in NYC per week')","027e2dba":"plt.figure(figsize=(20,10))\nsns.lineplot(x = 'Date' , y = 'ConfirmedCases' , data = usa,color='g')\nplt.xticks(rotation = 90,size=13)\nplt.xlabel('Date',size=15)\nplt.ylabel('Confirmed Cases',size=15)\nplt.title('Confirmed Cases in US per Date',size=20)\nplt.show()","44a3274d":"plt.figure(figsize=(20,10))\nsns.barplot(x = 'Date' , y = 'Fatalities' , data = usa,color='purple')\nplt.title('Fatalities in US per Date',size=20)\nplt.xticks(rotation = 90,size=13)\nplt.xlabel('Date',size=15)\nplt.ylabel('Fatalities',size=15)\nplt.show()","f2984197":"china = df_train[df_train['Country_Region'] == 'China']\ndf_china = pd.DataFrame(china.groupby(['Date','Country_Region'])['ConfirmedCases'].sum().reset_index())\n","17e6a73e":"plt.figure(figsize=(20,5))\nsns.barplot(x = df_china['Date'] ,y = df_china['ConfirmedCases'])\nplt.title('Confirmed Cases in China per day',size=20)\nplt.xticks(rotation=90)\nplt.xlabel('Date',fontsize=15)\nplt.ylabel('ConfirmedCases',fontsize=15)","e9b75740":"spain = pd.DataFrame(df_train[df_train['Country_Region'] == 'Spain'])\nspain.drop('Id',axis=1,inplace=True)\nspain.set_index('Date',inplace=True)","25630966":"plt.figure(figsize=(20,10))\nsns.barplot(x = spain.index , y = 'ConfirmedCases' , data = spain,color='aqua')\nplt.xticks(rotation = 90,size=12)\nplt.xlabel('Date',size=15)\nplt.ylabel('Confirmed Cases',size=15)\nsns.set_context('paper')\nplt.title('Confirmed Cases in Spain per Date',size=20)\nplt.show()","811ba418":"plt.figure(figsize=(20,10))\nsns.barplot(x = spain.index , y = 'Fatalities' , data = spain,color='red')\nplt.xticks(rotation = 90,size=12)\nplt.xlabel('Date',size=15)\nplt.ylabel('Confirmed Cases',size=15)\nsns.set_context('paper')\nplt.title('Confirmed Cases in Spain per Date',size=20)\nplt.show()","f17c8c0f":"italy = df_train[df_train['Country_Region'] == 'Italy']\ndf_italy = pd.DataFrame(italy.groupby(['Date','Country_Region'])['ConfirmedCases'].sum().reset_index())\n","d837326c":"plt.figure(figsize=(20,5))\nsns.barplot(x = df_italy['Date'] ,y = df_italy['ConfirmedCases'])\nplt.title('Confirmed Cases in Italy per Date',size=20)\nplt.xticks(rotation=90)\nplt.xlabel('Date',fontsize=15)\nplt.ylabel('ConfirmedCases',fontsize=15)","f96198bc":"# 1. Converting the object type column into datetime type\ndf_train['Date'] = df_train.Date.apply(pd.to_datetime)\ndf_test['Date'] = df_test.Date.apply(pd.to_datetime)\n\n#Extracting Date and Month from the datetime and converting the feature as int\n#df_train.Date = df_train.Date.dt.strftime(\"%m%d\")\n#df_test.Date = df_test.Date.dt.strftime(\"%m%d\")","2262821e":"df_train.insert(1,'Month',df_train['Date'].dt.month)\n\ndf_train.insert(2,'Day',df_train['Date'].dt.day)","5309d029":"df_train.head()","26d60846":"df_test.insert(1,'Month',df_test['Date'].dt.month)\n\ndf_test.insert(2,'Day',df_test['Date'].dt.day)","b4e7180a":"df_test.head()","c340395e":"df_train['Province_State'].fillna(df_train['Country_Region'],inplace=True)","9451d802":"df_test['Province_State'].fillna(df_test['Country_Region'],inplace=True)","dc9c32fe":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ndf_train.Country_Region = le.fit_transform(df_train.Country_Region)\ndf_train['Province_State'] = le.fit_transform(df_train['Province_State'])\n\ndf_test.Country_Region = le.fit_transform(df_test.Country_Region)\ndf_test['Province_State'] = le.fit_transform(df_test['Province_State'])","2bf3a931":"#Avoiding duplicated data.\ndf_train = df_train.loc[:,~df_train.columns.duplicated()]\ndf_test = df_test.loc[:,~df_test.columns.duplicated()]\nprint (df_test.shape)","fb25ca0c":"# Dropping the object type columns\n\nobjList = df_train.select_dtypes(include = \"object\").columns\ndf_train.drop(objList, axis=1, inplace=True)\ndf_test.drop(objList, axis=1, inplace=True)\nprint (df_train.shape)","70d9e152":"df_train.drop('Date',axis=1,inplace=True)","f18b99a1":"df_test.drop('Date',axis=1,inplace=True)","3c9039f2":"df_train.head()","15f9b6e7":"X = df_train.drop(['Id','ConfirmedCases', 'Fatalities'], axis=1)\ny = df_train[['ConfirmedCases', 'Fatalities']]","918ace00":"from sklearn.model_selection import ShuffleSplit, cross_val_score,train_test_split\nfrom sklearn.metrics import make_scorer, r2_score, mean_squared_log_error\nskfold = ShuffleSplit(random_state=7)","7ddb5da9":"from sklearn.tree import DecisionTreeRegressor","52dc4d46":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","6fec7afa":"clf_CC = DecisionTreeRegressor()\nclf_Fat = DecisionTreeRegressor()\n\ndec_cc = cross_val_score(clf_CC, X_train, y_train['ConfirmedCases'], cv = skfold)\ndec_fat = cross_val_score(clf_Fat, X_train, y_train['Fatalities'], cv = skfold)\n\nprint (dec_cc.mean(), dec_fat.mean())\n","3fd8a1e5":"X_test_CC = df_test.drop(['ForecastId'],axis=1)\nX_test_Fat = df_test.drop(['ForecastId'],axis=1)","e692963e":"clf_CC.fit(X_train, y_train['ConfirmedCases'])\nY_pred_CC = clf_CC.predict(X_test_CC) \n\nclf_Fat.fit(X_train, y_train['Fatalities'])\nY_pred_Fat = clf_Fat.predict(X_test_Fat) ","1032f0c5":"df_cc = pd.DataFrame(Y_pred_CC)","4e8c376f":"df_fat = pd.DataFrame(Y_pred_Fat)","d7306221":"import warnings\nwarnings.filterwarnings('ignore')\n\n# Calling DataFrame constructor on list \ndf_results = pd.DataFrame(columns=['ForecastId','ConfirmedCases','Fatalities']) \ndf_results","a8eabb22":"df_results['ForecastId'] = df_test['ForecastId']\ndf_results['ConfirmedCases'] = df_cc.astype(int)\ndf_results['Fatalities'] = df_fat.astype(int)\n\ndf_results.head()","3b588ce3":"df_results.to_csv('submission.csv', index=False)","7ee4e000":"** Feature Engineering and Model **","bf9fe4dc":"**Countries affected at a large extent**","f4d9fae7":"We can see the rising cases tremendously.Also the shaded region shows the 95 % confidence interval for mean.\n\n","542a1b4f":"From both the graphs we observe that the cases in Spain has been rising tremendously.","662da476":"Visualising data for Italy","a8cc6247":"We observe that the cases in China started increasing at a large difference which then flattened for a period of time following which  seem to be increasing at a small amount after 7th of April 2020","b676e6e3":"We now visualize the data of China.","01988dce":"Confirmed cases in NYC follow an increasing pattern post week 14","526b0d75":"We observe that maximum cases are observed in the **US** followed by ** Spain , Italy ,France**","ce7f4351":"Coronavirus disease (COVID-19) is an infectious disease caused by a newly discovered coronavirus.\n\nMost people infected with the COVID-19 virus will experience symptoms like mild to moderate respiratory illness and recover without requiring special treatment. Older people, and those with underlying medical problems like cardiovascular disease, diabetes, chronic respiratory disease, and cancer are vulnerable to this serious illness.\n\nThe best way to prevent and slow down transmission is be well informed about the COVID-19 virus, the disease it causes and how it spreads. Protect yourself and others from infection by washing your hands or using an alcohol based rub frequently and not touching your face.\n\nThe COVID-19 virus spreads primarily through droplets of saliva or discharge from the nose when an infected person coughs or sneezes, so it\u2019s important that you also practice respiratory etiquette (for example, by coughing into a flexed elbow).\n\nAt present, there are no specific vaccines or treatments for COVID-19. However, there are many ongoing clinical trials evaluating potential treatments. WHO is continuously providing the updated information as soon as clinical findings become available.","d3787558":"The barplot gives an idea that the cases of fatalities are increasing widely.","f8b5d994":"**Visualising US Data**"}}