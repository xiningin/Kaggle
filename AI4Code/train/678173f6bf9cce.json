{"cell_type":{"9302d652":"code","4b0a4782":"code","eabb4b6c":"code","9ed28852":"code","b5dcea76":"code","972a4b5d":"code","645ca987":"code","2afeda53":"code","01f2e677":"code","a9ae1243":"code","2fa1340d":"code","a209477e":"code","2ac0761d":"code","4496a93a":"code","e5d4f6d3":"code","b3f25e9c":"code","71d4ffe9":"code","61e0b31e":"code","bd54d4a1":"code","a3e9e70c":"code","feb0587a":"code","6854bb9e":"markdown","6de7e784":"markdown","1beb730b":"markdown","5e02cf6f":"markdown","c4433d69":"markdown"},"source":{"9302d652":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4b0a4782":"#reading the data\n\nfifa19_data=pd.read_csv('..\/input\/data.csv')\n\n#checking the shape and all columns\n\nprint(fifa19_data.shape)\nprint(fifa19_data.columns)\n\n#visualizing the head of my dataset\n\nfifa19_data.head()","eabb4b6c":"#counting nulls\n\n%time fifa19_data.isnull().sum()","9ed28852":"#checking the tendencies of the data\n\n%time fifa19_data.describe()\n","b5dcea76":"data=fifa19_data.iloc[:,0:18]\ndata","972a4b5d":"#counting null values \n\n%time data.isnull().sum()\n","645ca987":"#replacing null values\n\ndata[\"Club\"].fillna(\"NA\", inplace = True)\n\ndata[\"Preferred Foot\"].fillna(\"Both\", inplace=True)\n\ndata[\"Weak Foot\"].fillna(\"NA\", inplace=True)\n\ndata[\"Skill Moves\"].fillna(1, inplace=True)\n\ndata[\"International Reputation\"].fillna(1, inplace=True)","2afeda53":"#relationship between the attributes \n\n%time sns.heatmap(data.corr(),annot=True)\nplt.title(\"Correlation between all attributes\")\nplt.show()","01f2e677":"from math import log\ndef value_to_int(df_value):\n    try:\n        value = float(df_value[1:-1])\n        suffix = df_value[-1:]\n\n        if suffix == 'M':\n            value = value * 1000000\n        elif suffix == 'K':\n            value = value * 1000\n    except ValueError:\n        return 0\n    return log(int(value))","a9ae1243":"#dropping unnamed 0 and ID columns as we don't have any use of them\n\ndata = data.drop(columns=['Unnamed: 0','ID'])\n\n#cleaning value and wages to be integers and getting log values so as to have better correlation\n\ndata[\"Value\"]=data[\"Value\"].apply(value_to_int)\ndata[\"Wage\"]=data[\"Wage\"].apply(value_to_int)\n\n\ndata.shape","2fa1340d":"data.head()","a209477e":"#cleaning null values\n\ndata=data[data[\"Value\"]!=0]\ndata=data[data[\"Wage\"]!=0]","2ac0761d":"#plotting each pair of attributes\n\n%time sns.pairplot(data)\nplt.show()","4496a93a":"#Prediction of potential only from overall\n#Dividing the features\nX=data[[\"Overall\"]].values\ny=data[[\"Potential\"]].values\n\n#splitting data into train test\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1 )\n\nX_train.shape, y_train.shape\n\nfrom sklearn.linear_model import LinearRegression\n\nregr=LinearRegression()\nregr.fit(X=X_train, y=y_train )\ny_pred=regr.predict(X_train)\n\n#intercept,score,RMSE\nregr.intercept_, regr.score(X_train, y_train),np.sqrt(np.mean((y_train-y_pred)**2))","e5d4f6d3":"#predicting test data\ny=regr.predict(X_test)\n\n#score, RMSE\nprint(regr.score(X_test,y_test))\nprint(\"Mean Squared error:{}\".format(np.sqrt(np.mean((y_test-y)**2))))\n      \n#Visualizing the prediction\n    \nplt.scatter(x=X_test,y=y_test, s=15)\nplt.plot(X_test,regr.predict(X_test))\nplt.xlabel(\"Overall\")\nplt.ylabel(\"Potential\")\nplt.show()","b3f25e9c":"#Prediction of potential only from overall and age of the players\n#Dividing the features\nX1=data[[\"Overall\",\"Age\"]].values\ny1=data[[\"Potential\"]].values\n\n#splitting data into train test\nfrom sklearn.model_selection import train_test_split\n\nX1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, test_size=0.1 )\n\nprint(X1_train.shape, y1_train.shape)\n\nfrom sklearn.linear_model import LinearRegression\n\nregr1=LinearRegression()\nregr1.fit(X=X1_train, y=y1_train )\ny1_pred=regr1.predict(X1_train)\n\n#intercept,score,RMSE\nregr1.intercept_, regr1.score(X1_train, y1_train),np.sqrt(np.mean((y1_train-y1_pred)**2))","71d4ffe9":"\ny1=regr1.predict(X1_test)\nprint(regr1.score(X1_test,y1_test))\nprint(\"MSE:{}\".format(np.sqrt(np.mean((y1_test-y1)**2))))\n\n#seperating overall and age\novr=X1_test[:,0].reshape(X1_test.shape[0],1)\nage=X1_test[:,1].reshape(X1_test.shape[0],1)\n\n#3d plotting the predicted outcome\nfig=plt.figure()\nax=fig.add_subplot(111, projection='3d')\nfig.set_size_inches(16,9)\nax.scatter(xs=ovr, ys=age, zs=y1_test)\nax.plot(xs=ovr.flatten(), ys=age.flatten(), zs=y1.flatten())\nax.set_xlabel(\"Overall\")\nax.set_ylabel(\"Age\")\nax.set_zlabel(\"Potential\")\n","61e0b31e":"#Prediction of potential only from overall,value and age of the players\n#Dividing the features\nX2=data[[\"Overall\",\"Age\",\"Value\"]].values\ny2=data[[\"Potential\"]].values\n\n#splitting data into train test\nfrom sklearn.model_selection import train_test_split\n\nX2_train, X2_test, y2_train, y2_test = train_test_split(X2, y2, test_size=0.1 )\n\nprint(X2_train.shape, y2_train.shape)\n\nfrom sklearn.linear_model import LinearRegression\n\nregr2=LinearRegression()\nregr2.fit(X=X2_train, y=y2_train )\ny2_pred=regr2.predict(X2_train)\n\n#intercept,score,RMSE\nregr2.intercept_, regr2.score(X2_train, y2_train),np.sqrt(np.mean((y2_train-y2_pred)**2))","bd54d4a1":"#testing the model\ny2=regr2.predict(X2_test)\n\nprint(regr2.score(X2_test,y2_test))\nprint(\"MSE:{}\".format(np.sqrt(np.mean((y2_test-y2)**2))))","a3e9e70c":"#Prediction of potential only from overall,wage and age of the players\n#Dividing the features\nX3=data[[\"Overall\",\"Age\",\"Wage\"]].values\ny3=data[[\"Potential\"]].values\n\n#splitting data into train test\nfrom sklearn.model_selection import train_test_split\n\nX3_train, X3_test, y3_train, y3_test = train_test_split(X3, y3, test_size=0.1 )\n\nprint(X3_train.shape, y3_train.shape)\n\nfrom sklearn.linear_model import LinearRegression\n\nregr3=LinearRegression()\nregr3.fit(X=X3_train, y=y3_train )\ny3_pred=regr2.predict(X3_train)\n\n#intercept,score,RMSE\nregr3.intercept_, regr3.score(X3_train, y3_train),np.sqrt(np.mean((y3_train-y3_pred)**2))","feb0587a":"#testing the model\ny3=regr2.predict(X3_test)\n\nprint(regr3.score(X3_test,y3_test))\nprint(\"MSE:{}\".format(np.sqrt(np.mean((y3_test-y3)**2))))","6854bb9e":"There isn't much of an improvement while considering wage as a attribute for predicting potential. Thus we can say potential of a player is best predicted with **Age** and **Overall**","6de7e784":"**Predictive analysis and cleaning of the data**","1beb730b":"**Analysing and Visualizing FIFA 19 players dataset**","5e02cf6f":"**Predictive analysis using regression to predict potential of players using Age,Overall,Special and International Reputation**","c4433d69":"As we can see there isn't much improvement in regression score or Mean Squared Error when Value is added as a feature. So you can consider that value is a redundant feature in predicting player potential. Only Overall and Age are relevant features for predicting a players potential"}}