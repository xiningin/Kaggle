{"cell_type":{"93c7885e":"code","394352f1":"code","fb20f767":"code","9de9d991":"code","29eb5bee":"code","7cbd998e":"code","80419e1c":"code","ca058a81":"code","fbf46aae":"code","30959dbb":"code","bb728f6f":"code","0df503f3":"code","3a4f769c":"code","4d5fc252":"code","802c03c9":"code","770d33ab":"code","ef7a70d8":"code","13d19b3d":"code","46d2c13b":"code","3dfac1dd":"code","8ac7e8d6":"code","00334544":"code","3f25096a":"code","1e7ee0d9":"code","2a2796c3":"code","947152cb":"code","3e975ab3":"code","249d3c5a":"code","67bc8059":"code","6571757a":"code","4ed4083d":"code","26ae5244":"code","6cef5179":"code","357865ff":"code","c30d734b":"code","f709ebe5":"code","4af724fd":"code","09008ea8":"code","a319680f":"code","f14c5887":"code","9602586f":"code","363e6544":"code","ec828046":"code","c684e093":"code","c156a49e":"code","502ad884":"code","415f7976":"code","0c96420b":"code","3c242bcd":"code","6cae20d5":"code","0074c1f2":"code","efd12a32":"code","9f87495c":"code","0a4fa1c1":"code","f8a0f230":"code","bd316da7":"code","1725a0f3":"code","9df29f7f":"code","08990dab":"code","59569c6d":"code","48c3e2aa":"code","68185c81":"code","ab41d700":"code","dd4a4e8b":"code","e4e3d22a":"code","05636c55":"code","e316884e":"code","00d11ab8":"code","52d48002":"code","1b1434d8":"code","40899a33":"code","3bc3eeed":"code","0fae9fe4":"code","856c1514":"markdown","e0908f54":"markdown","3329a046":"markdown","86d05617":"markdown","57555932":"markdown","712f39f7":"markdown","8d6e8b01":"markdown","000724d2":"markdown","ef20a3ce":"markdown","24d871de":"markdown","ea7a34cc":"markdown","0956fd34":"markdown","1eecca4b":"markdown","c3206057":"markdown","b3e9f2b0":"markdown","6377db10":"markdown","2f3fb06e":"markdown","c6072826":"markdown","ec41ecb1":"markdown","0375340b":"markdown"},"source":{"93c7885e":"# import libraties\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\n\n# Data display coustomization\npd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 100)\n\n# Suppressing Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","394352f1":"# Reading movies file\n\nmovies = pd.read_csv('\/kaggle\/input\/movielens-latest-small\/movies.csv', encoding='latin-1')\nmovies.head()","fb20f767":"print('Shape:', movies.shape)\nprint('Movie ids:', movies.movieId.nunique())\nprint('Titles:', movies.title.nunique())","9de9d991":"# Reading ratings file\n\nratings = pd.read_csv('\/kaggle\/input\/movielens-latest-small\/ratings.csv', encoding='latin-1')\nratings.head()","29eb5bee":"print('Shape:', ratings.shape)\nprint('Movie ids:', ratings.movieId.nunique())\nprint('Number of users:', ratings.userId.nunique())","7cbd998e":"# These are the movies that have been stored with two different ids\n\nmovies.title.value_counts().sort_values(ascending=False).head(5)","80419e1c":"# getting the ids of a movie\nmovies[movies['title'] == 'Saturn 3 (1980)']","ca058a81":"# checking those ids in 'rating' dataframe and count which id is most watched\nratings[(ratings['movieId'] == 2851) | (ratings['movieId'] == 168358)]['movieId'].value_counts()","fbf46aae":"# deleting the id who is less watched\nmovies = movies[movies['movieId'] != 168358]","30959dbb":"# getting the ids of a movie\nmovies[movies['title'] == 'Confessions of a Dangerous Mind (2002)']","bb728f6f":"# checking those ids in 'rating' dataframe and count which id is most watched\nratings[(ratings['movieId'] == 6003) | (ratings['movieId'] == 144606)]['movieId'].value_counts()","0df503f3":"# deleting the id who is less watched\nmovies = movies[movies['movieId'] != 144606]","3a4f769c":"# getting the ids of a movie\nmovies[movies['title'] == 'Emma (1996)']","4d5fc252":"# checking those ids in 'rating' dataframe and count which id is most watched\nratings[(ratings['movieId'] == 838) | (ratings['movieId'] == 26958)]['movieId'].value_counts()","802c03c9":"# deleting the id who is less watched\nmovies = movies[movies['movieId'] != 26958]","770d33ab":"# getting the ids of a movie\nmovies[movies['title'] == 'War of the Worlds (2005)']","ef7a70d8":"# checking those ids in 'rating' dataframe and count which id is most watched\nratings[(ratings['movieId'] == 34048) | (ratings['movieId'] == 64997)]['movieId'].value_counts()","13d19b3d":"# deleting the id who is less watched\nmovies = movies[movies['movieId'] != 64997]","46d2c13b":"# getting the ids of a movie\nmovies[movies['title'] == 'Eros (2004)']","3dfac1dd":"# checking those ids in 'rating' dataframe and count which id is most watched\nratings[(ratings['movieId'] == 32600) | (ratings['movieId'] == 147002)]['movieId'].value_counts()","8ac7e8d6":"# deleting the id who is less watched\nmovies = movies[movies['movieId'] != 147002]","00334544":"movies_ratings = pd.merge(movies, ratings, on='movieId')\nmovies_ratings.head()","3f25096a":"movies_ratings.shape","1e7ee0d9":"# dropping 'timestamp' column\nmovies_ratings = movies_ratings[['userId','movieId', 'title', 'genres', 'rating']]\n\n# sort the dataframe according to 'userId' and then 'movieId'\nmovies_ratings.sort_values(['userId','movieId'], inplace=True)\n\n# resetting the index\nmovies_ratings.reset_index(drop=True, inplace=True)\n\n# top 10 rows\nmovies_ratings.head(10)","2a2796c3":"# number of customer ids\nmovies_ratings.userId.nunique()","947152cb":"# number of movie ids\nmovies_ratings.movieId.nunique()","3e975ab3":"# number of movie titles\nmovies_ratings.title.nunique()","249d3c5a":"# removing the extra whitespaces(if any) from the column 'title' and 'genres'\nmovies_ratings['title'] = movies_ratings['title'].str.strip()\nmovies_ratings['genres'] = movies_ratings['genres'].str.strip()\n\n# extracting the 'year'\nmovies_ratings['year'] = movies_ratings['title'].str[-5:-1]","67bc8059":"movies_ratings.year.unique()","6571757a":"movies_ratings['year'] = movies_ratings['year'].replace('irro',2011)\nmovies_ratings['year'] = movies_ratings['year'].replace('atso',2011)\nmovies_ratings['year'] = movies_ratings['year'].replace(' Bab',2017)\nmovies_ratings['year'] = movies_ratings['year'].replace('ron ',2017)\nmovies_ratings['year'] = movies_ratings['year'].replace('r On',2018)\nmovies_ratings['year'] = movies_ratings['year'].replace('lon ',1994)\nmovies_ratings['year'] = movies_ratings['year'].replace('imal',2016)\nmovies_ratings['year'] = movies_ratings['year'].replace('osmo',2019)\nmovies_ratings['year'] = movies_ratings['year'].replace('he O',2016)\nmovies_ratings['year'] = movies_ratings['year'].replace(' Roa',2015)\nmovies_ratings['year'] = movies_ratings['year'].replace('ligh',2016)\nmovies_ratings['year'] = movies_ratings['year'].replace('erso',2016)","4ed4083d":"# movieIds where genre is missing\n\nmovies_ratings[movies_ratings['genres']=='(no genres listed)'].drop_duplicates('movieId')['movieId'].values","26ae5244":"movies_ratings.loc[movies_ratings['movieId']==122896,\"genres\"] = 'Adventure|Action|Fantasy'\nmovies_ratings.loc[movies_ratings['movieId']==114335,\"genres\"] = 'Fantasy'\nmovies_ratings.loc[movies_ratings['movieId']==174403,\"genres\"] = 'Documentary|Biography'\nmovies_ratings.loc[movies_ratings['movieId']==172591,\"genres\"] = 'Crime|Drama|Thriller'\nmovies_ratings.loc[movies_ratings['movieId']==176601,\"genres\"] = 'Sci-Fi|Fantasy'\nmovies_ratings.loc[movies_ratings['movieId']==155589,\"genres\"] = 'Comedy'\nmovies_ratings.loc[movies_ratings['movieId']==147250,\"genres\"] = 'Crime|Mystery|Romance'\nmovies_ratings.loc[movies_ratings['movieId']==171749,\"genres\"] = 'Animation|Crime|Drama'\nmovies_ratings.loc[movies_ratings['movieId']==173535,\"genres\"] = 'Crime|Drama|Mystery'\nmovies_ratings.loc[movies_ratings['movieId']==134861,\"genres\"] = 'Comedy'\nmovies_ratings.loc[movies_ratings['movieId']==159161,\"genres\"] = 'Comedy'\nmovies_ratings.loc[movies_ratings['movieId']==171631,\"genres\"] = 'Documentary|Comedy'\nmovies_ratings.loc[movies_ratings['movieId']==171891,\"genres\"] = 'Documentary'\nmovies_ratings.loc[movies_ratings['movieId']==142456,\"genres\"] = 'Comedy|Fantasy'\nmovies_ratings.loc[movies_ratings['movieId']==181413,\"genres\"] = 'Documentary'\nmovies_ratings.loc[movies_ratings['movieId']==159779,\"genres\"] = 'Comedy|Fantasy'\nmovies_ratings.loc[movies_ratings['movieId']==169034,\"genres\"] = 'Musical'\nmovies_ratings.loc[movies_ratings['movieId']==171495,\"genres\"] = 'Sci-Fi'\nmovies_ratings.loc[movies_ratings['movieId']==172497,\"genres\"] = 'Action|Sci-Fi'\nmovies_ratings.loc[movies_ratings['movieId']==166024,\"genres\"] = 'Drama|Music'\nmovies_ratings.loc[movies_ratings['movieId']==167570,\"genres\"] = 'Drama|Fantasy|Mystery'\nmovies_ratings.loc[movies_ratings['movieId']==129250,\"genres\"] = 'Comedy'\nmovies_ratings.loc[movies_ratings['movieId']==143410,\"genres\"] = 'Action|Drama|War'\nmovies_ratings.loc[movies_ratings['movieId']==149330,\"genres\"] = 'Animation|Sci-Fi'\nmovies_ratings.loc[movies_ratings['movieId']==182727,\"genres\"] = 'Musical'\nmovies_ratings.loc[movies_ratings['movieId']==152037,\"genres\"] = 'Romance|Musical'\nmovies_ratings.loc[movies_ratings['movieId']==165489,\"genres\"] = 'Drama|Animation|History'\nmovies_ratings.loc[movies_ratings['movieId']==141866,\"genres\"] = 'Horror|Music|Thriller'\nmovies_ratings.loc[movies_ratings['movieId']==122888,\"genres\"] = 'Action|Adventure|Drama'\nmovies_ratings.loc[movies_ratings['movieId']==156605,\"genres\"] = 'Comedy|Drama|Romance'\nmovies_ratings.loc[movies_ratings['movieId']==141131,\"genres\"] = 'Action|Mystery|Sci-Fi'\nmovies_ratings.loc[movies_ratings['movieId']==181719,\"genres\"] = 'Biography|Drama'\nmovies_ratings.loc[movies_ratings['movieId']==132084,\"genres\"] = 'Drama|Romance'\nmovies_ratings.loc[movies_ratings['movieId']==161008,\"genres\"] = 'Drama|Music|Romance'","6cef5179":"# replacing 'musical' with 'music' as both have same meaning\nmovies_ratings['genres'] = movies_ratings['genres'].str.replace('Musical','Music')","357865ff":"# converting string to int\nmovies_ratings['year'] = movies_ratings['year'].astype(int)","c30d734b":"movies_ratings.info()","f709ebe5":"movies_ratings.head()","4af724fd":"# store the column in different dataframe\ngenre_df = movies_ratings[['genres']]\n\n# splitting the columns\ngenre_df = genre_df['genres'].str.split('|', expand=True)\n\ngenre_df.head()","09008ea8":"# changing the name of the columns\ngenre_df.rename(columns={0:'G1',1:'G2',2:'G3',3:'G4',4:'G5',5:'G6',6:'G7',7:'G8',8:'G9',9:'G10'}, inplace=True)","a319680f":"# create a function that return distinct genres from whole dataframe\n\ndef genre_name(dataframe):\n    df = dataframe.copy()\n    col = df.columns\n    u = set()\n    for i in col:\n        s = set(df[i].value_counts().index)\n        u = u.union(s)\n    return(u)","f14c5887":"# names of distinct genres (21 genres)\ng = genre_name(genre_df)\ng","9602586f":"# making columns of each of the genes with value either 1 or 0 in original dataframe \n\nfor genre in g:\n    movies_ratings[genre] = movies_ratings['genres'].apply(lambda x: 1 if genre in x else 0)","363e6544":"movies_ratings.head()","ec828046":"plt.figure(figsize=(10,5))\nplt.hist(movies_ratings['rating'],bins=10, color='pink', alpha=0.7)\nplt.xlabel('rating',size=12)\nplt.xlim(0.5,5)\nplt.ylim(0,30000)\nplt.vlines(x=3.5, ymin=0, ymax=30000, color='red', label='Mean rating')\nplt.ylabel('')\nplt.title('count plot of ratings',size=18, color='red')\nplt.legend()\nplt.show()","c684e093":"genres_count = movies_ratings.iloc[:,6:].sum(axis=0).reset_index().rename(columns={'index':'genre',0:'count'})\ngenres_count.sort_values('count',ascending=False, inplace=True)\n\nplt.figure(figsize=(15,5))\nsns.barplot(x = genres_count['genre'], y=genres_count['count'], color='lightgreen')\nplt.xticks(rotation=45)\nplt.xlabel('Genres', size=12)\nplt.ylabel('')\nplt.title('Count plot of genres', size=18, color='green')\nplt.show()","c156a49e":"mr = movies_ratings.groupby('title')['title'].count().sort_values(ascending=False).head(15)\n\nplt.figure(figsize=(10,5))\nsns.barplot(y = mr.index, x=mr.values, color='skyblue')\nplt.ylabel('')\nplt.title('15 Most watched Movies', size=18, color='blue')\nplt.show()","502ad884":"user = movies_ratings.groupby('userId')['title'].count().sort_values(ascending=False).head(20)\n\nplt.figure(figsize=(15,5))\nuser.plot(kind=\"bar\", color=\"orange\", alpha=0.5)\nplt.title(\"Top 20 users according to watched history\", size=18, color='orange')\nplt.xlabel('User Id', size=12)\nplt.xticks(rotation=0)\nplt.show()","415f7976":"def best_movie(dataframe):\n    \"\"\"\n    This function will return a dataframe in which there are 3 columns. The first column is year.\n    The second column is number of movies released in that year. (according to data we have)\n    Third column is the most watched movie of that year. (in the given data)\n    It only takes one argument which is data.\n    \"\"\"\n    df = dataframe.copy()\n    movieid = df.year.unique()\n    year = list()\n    nMovies= list()\n    mostWatched = list()\n    for i in movieid:\n        year.append(i)\n        nMovies.append(df[df['year']==i]['title'].nunique())\n        mostWatched.append(df[df['year']==i]['title'].value_counts().index[0])\n    \n    df1 = pd.DataFrame({'year':year,'nMoviesReleased':nMovies, 'mostWatchedMovie':mostWatched})\n    df1.sort_values('year', inplace=True)\n    return(df1)","0c96420b":"# calling the function and reading its top 10 rows\nyearWiseBestMovie = best_movie(movies_ratings)\nyearWiseBestMovie.head(10)","3c242bcd":"# consider only user with id=1 and subset its data from main dataframe to another dataframe\n\nuser_1 = movies_ratings[movies_ratings['userId']==1]\nuser_1.head()","6cae20d5":"user_1.shape","0074c1f2":"# step 1\n\nuser_rating = user_1['rating']\nuser_rating.head()","efd12a32":"user_rating.shape","9f87495c":"# step 2\n\nmovie_matrix = user_1.iloc[:,6:]\nmovie_matrix.head()","0a4fa1c1":"# step 3\n\nweighted_genre_matrix = movie_matrix.multiply(user_rating, axis=0)\nweighted_genre_matrix.head()","f8a0f230":"weighted_genre_matrix = pd.concat((user_1.iloc[:,:6], weighted_genre_matrix), axis=1)\nweighted_genre_matrix.head()","bd316da7":"# step 4\n\nwg = weighted_genre_matrix.iloc[:,6:].sum(axis=0)\/weighted_genre_matrix.iloc[:,6:].sum(axis=0).sum()\nwg","1725a0f3":"# number of movies watched by the user is 232\n# we store all those movies id in m\nm = movies_ratings[movies_ratings['userId']==1]['movieId'].values\nm = set(m)\nlen(m)","9df29f7f":"# total number of movies in the data is 9719\n# we store all the movie ids in b\nb = movies_ratings.movieId.unique()\nb = set(b)\nlen(b)","08990dab":"# subtracting the watched movies from total movies\n# 'r' is a set of movie ids which the user_1 didn't watch\nr = b-m\nr = list(r)\nlen(r)","59569c6d":"# step 5\n\n# all the data except of user_1\nother_users = movies_ratings[movies_ratings['userId'] != 1]\nother_users.head()","48c3e2aa":"# keeping only those movies which user has not seen\nother_users = other_users[other_users['movieId'].isin(r)]","68185c81":"other_users.shape","ab41d700":"# storing it in 'movie_matrix_other'\nmovies_matrix_other = other_users.copy()\nmovies_matrix_other = movies_matrix_other.drop(['userId','rating'], axis=1)\nmovies_matrix_other.head()","dd4a4e8b":"movies_matrix_other.shape","e4e3d22a":"movies_matrix_other.movieId.nunique()","05636c55":"movies_matrix_other.title.nunique()","e316884e":"# removing the duplicate rows of the movies\nmovies_matrix_other = movies_matrix_other.drop_duplicates()\nmovies_matrix_other.shape","00d11ab8":"# step 6\n\nweighted_movies_matrix_other = pd.concat((movies_matrix_other.iloc[:,:4], movies_matrix_other.iloc[:,4:].multiply(wg)), axis=1)\nweighted_movies_matrix_other.head()","52d48002":"# step 7\n\nweighted_movies_matrix_other[\"final_score\"] = weighted_movies_matrix_other.iloc[:,4:].sum(axis=1)\nweighted_movies_matrix_other.sort_values('final_score', ascending=False, inplace=True)","1b1434d8":"topMovie = weighted_movies_matrix_other\ntopMovie.head()","40899a33":"list(topMovie[topMovie[\"genres\"].str.contains(\"|\")][\"title\"].head(10))","3bc3eeed":"def recommended_movies(df):\n    id = int(input('User ID:'))\n    genre = input('Enter preferred Genre\\n(otherwise press enter): ')\n    top_movies = int(input('How many movies:'))\n    \n    user = df.copy()\n    user = user[user['userId'] == id]\n    user_rating = user['rating']\n    movies_matrix = user.copy()\n    weighted_genre_matrix = movies_matrix.iloc[:,6:].multiply(user_rating, axis=0)\n    weighted_genre_matrix = pd.concat((movies_matrix.iloc[:,:6], weighted_genre_matrix), axis=1)\n    wg = weighted_genre_matrix.iloc[:,6:].sum(axis=0)\/weighted_genre_matrix.iloc[:,6:].sum(axis=0).sum()\n    m = df[df['userId'] == id]['movieId'].values\n    m = set(m)\n    b = df.movieId.unique()\n    b = set(b)\n    r = b-m\n    r = list(r)\n    other_users = df[df['userId'] != id]\n    other_users = other_users[other_users['movieId'].isin(r)]\n    movies_matrix_other = other_users.copy()\n    movies_matrix_other = movies_matrix_other.drop(['userId','rating'], axis=1)\n    movies_matrix_other = movies_matrix_other.drop_duplicates()\n    movies_matrix_other = pd.concat((movies_matrix_other.iloc[:,:4], movies_matrix_other.iloc[:,4:].multiply(wg)),axis=1)\n    movies_matrix_other[\"final_score\"] = movies_matrix_other.iloc[:,4:].sum(axis=1)\n    movies_matrix_other.sort_values('final_score', ascending=False, inplace=True)\n    topMovie = movies_matrix_other\n    \n    l = (list(topMovie[topMovie[\"genres\"].str.contains(genre,case=False)][\"title\"].head(top_movies)))\n    if len(l)==0:\n        print('\\nYou have not watched any movie of \"{}\" genre.'.format(genre))\n        print('SORRY, NO RECOMMENDATION!')\n    return(l)","0fae9fe4":"recommended_movies(movies_ratings)","856c1514":"#### <font color = 'brown'>[Watch it](https:\/\/www.coursera.org\/lecture\/machine-learning-with-python\/content-based-recommender-systems-jPrfc) : How content based recommender system work and by keeping this methodology we build the same in python","e0908f54":"---\n# <font color = 'blue'>Cleaning","3329a046":"## <font color = 'orange'>What is Recommendation System?<\/font>\n- **Recommender systems are the systems that are designed to recommend things to the user** based on many different factors. These systems predict the most likely product that the users are most likely to purchase and are of interest to. Companies like Netflix, Amazon, etc. use recommender systems to help their users to identify the correct product or movies for them. \n- Companies using recommender systems focus on increasing sales as a result of very personalized offers and an enhanced customer experience. Recommendations typically speed up searches and make it easier for users to access content they\u2019re interested in, and surprise them with offers they would have never searched for.","86d05617":"## <font color = 'orange'>Content based Recommendation System<\/font>\n**Content** here refers to the content or attribute of the products you like. So the idea in this system is to tag the products with certain keywords, understand what the user like, look up to those keywords in database and recommend the products with same attribute. Also some features are more important then others. This suggest that the system should assign weights to the features. \n\n#### Drawback\nThe recommendation in a content-based system is based on user's taste and the content or feature set items. Such a model is very efficient. However, in some cases, it doesn't work. For example, assume that we have a movie in the drama genre, which the user has never watch. So, this genre would not be in her profile. Therefore, `shall only get recommendations related to genres that are already in her profile and the recommender engine may never recommend any movie within other genres`. This problem can be solved by other types of recommender systems such as collaborative filtering.","57555932":"#### <font color = 'brown'>Fixing the mismatch between 'movieId' and 'titles'","712f39f7":"### <font color = 'orange'>Other types of Recommendation System<\/font>\n1. `Collaborative filtering based recommendation system` : The simple idea behind this system is that similar user tend to like similar items. It is based on the assumption that if some users have had similar interest in the past, they will have similar interest in the future. The main advantage of this system is that you do not need to know the content in the detail. \n    1. `User based`: To summarise the algorithm of user-based filters:\n        1. Find users similar to the user 'x' (called the peer users) for whom predictions are to be made using any similarity measure like the correlation coefficient.\n        2. For each movie 'm' that the user has not seen, calculate the weighted average of the ratings given to 'm' by the peer users.\n        3. Recommend the top 'n' movies to the user 'x'.\n    2. `Item based` : To reiterate the item-based filtering procedure, the following steps are followed in sequence to predict the rating a user 'x' will give to a movie 'm':\n        1. Find items similar to the movie 'm' (often called peer group of items) using a similarity measure like cosine. \n        2. Calculate the rating that the user will give to the movie 'm' using the weighted average of the ratings given to the nearest movies by the user.\n        3. Recommend the top-n movies to the user.\n2. `Hybrid recommendation system` : Combining any of the two systems in a manner that suits a particular industry is known as Hybrid Recommender system. This is the most sought after Recommender system that many companies look after, as it combines the strengths of more than two Recommender system and also eliminates any weakness which exist when only one recommender system is used.","8d6e8b01":"#### <font color = 'brown'>Merging 'movies' and 'rating' dataframe into one","000724d2":"It is been oberved that there is a `mismatch between unique movieids and unique title`.<br>\nThere are 5 more ids than the movies i.e. **there is 5 such movies who has stored in this table with two different ids**.","ef20a3ce":"#### <font color = 'brown'>Working on 'genres' column<\/font>\n1. Put that column in another dataframe and split the column on '|'\n2. Then we find the unique genres throughout the dataframe and store it as a set\n3. Finally making column of each of the genre in our main dataframe(movies_rating) and the values of each column is 1 or 0. 1 if that movie has that genre, 0 if not.","24d871de":"***Thank-you***","ea7a34cc":"- It is observed that in the last 4 rows, at some places there are string.\n- Looking at the data on those string, it has been found that those movies year are not mentioned. Also some of the movies genre is also not available.\n- Below I fill those missing year and genres of the movies\/shows by searching online.","0956fd34":"---\n# <font color = 'blue'>Graphs","1eecca4b":"![image.png](attachment:image.png)","c3206057":"#### <font color = 'brown'>Replacing the missing genres of the movies","b3e9f2b0":"#### Further Readings\n- An introduction to recommendation engines, [here](http:\/\/dataconomy.com\/2015\/03\/an-introduction-to-recommendation-engines\/)\n- Types of recommendation system, [here](https:\/\/www.bluepiit.com\/blog\/classifying-recommender-systems\/)\n- How Netflix implements its recommendation engine in their two-part blog, [here](https:\/\/netflixtechblog.com\/netflix-recommendations-beyond-the-5-stars-part-1-55838468f429)\n- What's difference between item-based and content-based collaborative filtering? [here](https:\/\/stackoverflow.com\/questions\/16372191\/whats-difference-between-item-based-and-content-based-collaborative-filtering)","6377db10":"#### <font color = 'brown'>Finally the data is ready","2f3fb06e":"---\n## <font color = 'orange'>Topics Covered in this notebook<\/font>\n### Content-based Recommendation\n>Cleaning and Graph\n>>Model Building for single user\n>>>Generalised function","c6072826":"#### <font color = 'brown'>Replacing strings with year","ec41ecb1":"---\n# <font color = 'blue'>Model Building<\/font>\nWe are building the model for a single user to demonstrate how it is going. At last we make a generalised fuction which directly returns the recommended movies. \n#### Steps:\n1. First, we subset the user data from the main data and store in *user_1* and then create a vector to show the user's ratings for the movies that he\/she already watched. We call it *user_rating*.\n2. Then, we encode the movies genres through one-hot encoding approach(already done above). We use all the movies to make this matrix and store it in *movie_matrix*.\n3. Now, we multiply these two matrices(user_rating and movie_matrix) we can get the weighted feature set for the movies. This matrix is also called the *weighted_genre_matrix* and represents the interests of the user for each genre based on the movies that he\/she watched.\n4. We can now aggregate the weighted genres and then normalize them to find the user profile. It clearly indicates that she likes action movies more than other genres.\n5. Now we have to recommend movies which he\/she has not seen. Let's store all the data except of user_1 in *other_user*. Then we remove all the movies he\/she has seen and remove duplicate rows of the data and store it in *movie_matrix_others*.\n6. Now we're in the position where we have to figure out which of the movie is most suited to be recommended to the user. To do this, we simply multiply the weights calculated in step-4 with movie_matrix_others, which results in the *Weighted Movies Matrix Other*.\n7. Now, if we aggregate these weighted ratings, we get the active user's possible interest level all these movies. In essence, it's our recommendation lists, which we can sort to rank the movies and store in *top_movies*.","0375340b":"---\n# <font color='blue'>Generalized Function<\/font>\nYou need to specify \n- user_id (1-610)\n- Preferred genre, if not then press enter\n- top n movies"}}