{"cell_type":{"88dea004":"code","d27b9fd4":"code","f78fe400":"code","40aeabe5":"code","9271d8f5":"code","5f3d52e5":"code","c0e0b00f":"code","c09bfe13":"code","c732f33b":"code","439b9112":"code","b6445ec6":"code","4163c1e3":"code","883f2f86":"code","4c1d4f10":"code","7df5ec5d":"code","1717f43a":"code","41408562":"code","a0ba47eb":"code","a0321df3":"code","4e32a424":"code","8a4c5704":"code","50860ad9":"code","031ef110":"code","8cd503da":"code","dd65a760":"code","823e4dc7":"code","7a6d3cf5":"code","74547d56":"code","a5d64fe4":"code","77863e88":"code","d6014ea3":"code","bc65e0ee":"code","00c834e8":"code","8ac5eb14":"code","df959305":"code","03595362":"code","73a990df":"code","80b3ebde":"code","44cd765c":"code","a3ffe3b4":"code","728e12f3":"code","bbfe334d":"code","818d7eaa":"markdown","09fc3a13":"markdown","8bd19ea3":"markdown","f584703b":"markdown","46522223":"markdown","51903532":"markdown","eecc4fd7":"markdown","bd0a5bb7":"markdown","b7a7bde6":"markdown","9fa5c8e2":"markdown","ee426157":"markdown","a56138cb":"markdown","2fa0e60d":"markdown","522a2b7e":"markdown","83385a40":"markdown","9b6bc9f2":"markdown","4b79662e":"markdown","21fa6d81":"markdown","0a73c411":"markdown"},"source":{"88dea004":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\ndata = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndata.head()","d27b9fd4":"data.isnull().sum()","f78fe400":"data.info()","40aeabe5":"data.columns","9271d8f5":"data.describe()","5f3d52e5":"data['last_review'].describe()","c0e0b00f":"data['reviews_per_month'].fillna(method ='ffill', inplace = True) ## Forward fill menthod","c09bfe13":"data['last_review'].fillna(method ='ffill', inplace = True) ## Forward fill menthod","c732f33b":"data['reviews_per_month'].isnull().sum()","439b9112":"data['last_review'].isnull().sum()","b6445ec6":"data['reviews_per_month'].describe()","4163c1e3":"data.isnull().sum()","883f2f86":"data = data.dropna(axis = 0) # ***droping all rows conatining null values***#\n#data.drop(['latitude', 'longitude'], axis = 1, inplace =True)\ndata.head()","4c1d4f10":"data.drop(['latitude', 'longitude'], axis = 1, inplace =True)\ndata.head()","7df5ec5d":"import seaborn as sns\nsns.set(rc={'figure.figsize':(10,5)})\nsns.set(font_scale=1)\nsns.relplot(x=\"minimum_nights\",y=\"price\", data=data)","1717f43a":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","41408562":"sns.boxplot(x=data['reviews_per_month'])","a0ba47eb":"fig, ax = plt.subplots(figsize=(5,5))\nax.bar(data['price'], data['neighbourhood_group'])\nax.set_ylabel('Area')\nax.set_xlabel('Price')\nplt.show()","a0321df3":"Q1 = data.quantile(0.15)\nQ3 = data.quantile(0.85)\nIQR = Q3 - Q1\nprint(IQR)","4e32a424":"data_out = data[~((data < (Q1 - 1.5 * IQR)) |(data > (Q3 + 1.5 * IQR))).any(axis=1)]\ndata_out.shape","8a4c5704":"data_out.head()","50860ad9":"sns.barplot(x='minimum_nights', y='price', data = data_out)","031ef110":"fig, ax = plt.subplots(figsize=(5,5))\nax.bar(data_out['price'], data_out['neighbourhood_group'])\nax.set_ylabel('Area')\nax.set_xlabel('Price')\nax.set_color = 'b'\nplt.show()","8cd503da":"sns.barplot(x=data_out['room_type'], y=data_out['price'], data = data_out)","dd65a760":"sns.barplot(x=data_out['neighbourhood_group'], y=data_out['minimum_nights'], data = data_out)","823e4dc7":"chart = sns.barplot(x=data_out['neighbourhood_group'], y=data_out['availability_365'], data = data_out)\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45)","7a6d3cf5":"chart = sns.barplot(x=data_out['room_type'], y=data_out['number_of_reviews'], data = data_out)","74547d56":"neig_price = data_out.groupby(by = ['neighbourhood_group','neighbourhood'])[ 'price'].count()\nneig_price","a5d64fe4":"neig_min_nigths = data_out.groupby(by = ['neighbourhood_group','host_id'])[ 'minimum_nights'].count()\nneig_min_nigths","77863e88":"neig_prop_type = data_out.groupby(by = ['room_type','neighbourhood_group','neighbourhood'])[ 'price'].count()\nneig_prop_type","d6014ea3":"from sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor \nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn import preprocessing","bc65e0ee":"data_out.head()","00c834e8":"df= data_out.drop(['name', 'host_id','last_review', 'reviews_per_month', 'host_name'], axis = 1)\ndf.head()","8ac5eb14":"df.columns","df959305":"le = preprocessing.LabelEncoder()\n\ndf['neighbourhood_group'] =le.fit_transform(df['neighbourhood_group'])\ndf['neighbourhood'] =le.fit_transform(df['neighbourhood'])\ndf['room_type'] =le.fit_transform(df['room_type'])","03595362":"X = df.drop(['price'], axis=1)\ny =df['price']\n","73a990df":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nregressor = LinearRegression()  \nregressor.fit(X_train, y_train) #training the algorithm\ny_pred = regressor.predict(X_test)\n\nprint('Mean Absolute Error_lng:', metrics.mean_absolute_error(y_test, y_pred).round(3))  \nprint('Mean Squared Error_lng:', metrics.mean_squared_error(y_test, y_pred).round(3))  \nprint('Root Mean Squared Error_lng:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)).round(3))\nprint('r2_score_lng:', r2_score(y_test, y_pred).round(3))\n","80b3ebde":"ridge = Ridge(alpha=1.0)\nridge.fit(X_train, y_train) #training the algorithm\n\ny_pred = ridge.predict(X_test)\n\nprint('Mean Absolute Error_ridge:', metrics.mean_absolute_error(y_test, y_pred).round(3))  \nprint('Mean Squared Error_ridge:', metrics.mean_squared_error(y_test, y_pred).round(3))  \nprint('Root Mean Squared Error_ridge:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)).round(3))\nprint('r2_score_ridge:', r2_score(y_test, y_pred).round(3))","44cd765c":"clf = Lasso(alpha=0.1)\n\nclf.fit(X_train, y_train) #training the algorithm\n\ny_pred = clf.predict(X_test)\n\nprint('Mean Absolute Error_lasso:', metrics.mean_absolute_error(y_test, y_pred).round(3))  \nprint('Mean Squared Error_lasso:', metrics.mean_squared_error(y_test, y_pred).round(3))  \nprint('Root Mean Squared Error_lasso:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)).round(3))\nprint('r2_score_lasso:', r2_score(y_test, y_pred).round(3))","a3ffe3b4":"logreg = LogisticRegression(solver = 'lbfgs')\n# fit the model with data\nlogreg.fit(X_train,y_train)\ny_pred=logreg.predict(X_test)\n\nprint('Mean Absolute Error_logreg:', metrics.mean_absolute_error(y_test, y_pred).round(3))  \nprint('Mean Squared Error_logreg:', metrics.mean_squared_error(y_test, y_pred).round(3))  \nprint('Root Mean Squared Error_logreg:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)).round(3))\nprint('r2_score_logreg:', r2_score(y_test, y_pred).round(3))\n","728e12f3":" # create regressor object \nrfe = RandomForestRegressor(n_estimators = 100, random_state = 42) \n  \n# fit the regressor with x and y data \nrfe.fit(X, y)   \ny_pred=rfe.predict(X_test)\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nprint('r2_score_RFE:', r2_score(y_test, y_pred).round(3))","bbfe334d":"ABR = AdaBoostRegressor(n_estimators = 100, random_state = 42) \n  \n# fit the regressor with x and y data \nABR.fit(X, y)   \ny_pred=ABR.predict(X_test)\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nprint('r2_score_ABR:', r2_score(y_test, y_pred).round(3))","818d7eaa":"***Above I have added forward fill in \"last_review\" column wherever there were Null values***","09fc3a13":"***Above code shows the neighbourhood_group and host_id in relation to mini_nights***","8bd19ea3":"***Saten Island has availablity of more than 175 days***","f584703b":"***Conclusion: Based on RMSE value RandomForest Regressor is the best suited model***","46522223":"*** With the above code I am removing all the outliers from the dataset.\ndata_out contains values without ouliers***","51903532":"***Brooklyn has average booking of 3 nights***","eecc4fd7":"***Above code shows the neighbourhood_group and neighbourhood in relation to price count***","bd0a5bb7":"***Enitire home\/Apt have the highest price as comapred to private and shared rooms***","b7a7bde6":"> last_review & reviews_per_month has lots of missing data","9fa5c8e2":"***there are still null values in th data which we will eliminate using dropna method as below. Also I will eliminate the latitude and longitude as I will not be using them in this excersie***","ee426157":"***data.describe gives the mean, max and other datas,  e.g. price column has mean of 152 dollars and max value is 10,000 , which means there are outliers in the data set***","a56138cb":"***Instead of eliminating this data, I have decided to fill the missing values of both the review will forward fill method.***","2fa0e60d":"***Relationship between price and area is shown above***","522a2b7e":"***As I mentioned earlier there are outliers in the data which can be seen also thro the box plot***","83385a40":"***Above I have added forward fill in \"reviews_per_month\" column wherever there were Null values***","9b6bc9f2":"***Above code shows the room_type & neighbourhood_group in relation to price count***","4b79662e":"*releationship between number of nights and price is shown above*","21fa6d81":"***To remove the outliers I have used the IQR method***","0a73c411":"***What kind of data are there in last_review?"}}