{"cell_type":{"c826a8dd":"code","5e7b4d8a":"code","c6c99af1":"code","0557e154":"code","dc6bcfbd":"code","69c637c2":"code","2b1147a2":"code","132faaf4":"code","c61711b6":"code","2c00ce9c":"code","44e6a5c6":"code","fe03e510":"code","33b5c1e6":"code","09d8c3bb":"code","54ed5675":"code","2d835693":"code","76ec9cbe":"code","fb6162b9":"code","0bc32ac7":"code","84ab5670":"code","7822fe54":"markdown","f3309236":"markdown","e1a5244d":"markdown","a848c16e":"markdown","8c915b99":"markdown","08200c6f":"markdown","440a77c3":"markdown","e582828e":"markdown","4f8828b4":"markdown","945da98d":"markdown","6c2a29d8":"markdown","ca380797":"markdown","8dae5af5":"markdown","fb84a601":"markdown","85f27d53":"markdown","053d6f07":"markdown","8eed7c35":"markdown","a045f713":"markdown","9054061e":"markdown","26a56824":"markdown","6ae47508":"markdown","e1705740":"markdown","65be69b3":"markdown","c03c10c0":"markdown","cc241f74":"markdown","06c2824d":"markdown","fe3f4d6e":"markdown","0d1f84ac":"markdown","c7476a59":"markdown"},"source":{"c826a8dd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.dates\n\nfrom mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules\nimport mlxtend as ml","5e7b4d8a":"bakery = pd.read_csv('..\/input\/transactions-from-a-bakery\/BreadBasket_DMS.csv')\n\nbakery.head(10)","c6c99af1":"bakery.info()","0557e154":"NAs = [\"NONE\", \"None\", \"nan\", \"none\", 0]\n\nbakery[bakery.Item.isin(NAs)]","dc6bcfbd":"to_drop = bakery[bakery['Item'].isin([\"NONE\", \"None\", \"nan\", \"none\", 0])]\n\nbakery = bakery.drop(to_drop.index)\n\nbakery.info()","69c637c2":"bakery['Time'] = pd.to_datetime(bakery['Time']).dt.hour","2b1147a2":"bakery.head()","132faaf4":"bakery['Time'].min(), bakery['Time'].max()","c61711b6":"def time_function(x):\n    if (x > 0) and (x <= 7):\n        return 'Early Morning (00:00 - 7:00)'\n    elif (x > 7) and (x <= 12):\n        return 'Morning (7:00 - 12:00)'\n    elif (x > 12) and (x <= 19):\n        return 'Afternoon (12:00 - 19:00)'\n    else:\n        return 'Evening (19:00 - 00:00)'\n\n\nbakery['Time_of_day'] = bakery['Time'].apply(time_function)","2c00ce9c":"bakery","44e6a5c6":"bakery['Time_of_day'].value_counts().plot(kind='bar', figsize=(10,10))\nplt.ylabel('Counts')\nplt.title('Number of purchases at each time of the day')\nplt.xticks(rotation = 0);","fe03e510":"(bakery.groupby('Time').agg({'Item': lambda item: item.count()})\n       .plot(kind='bar', figsize=(10,5), legend=False, xlabel='Hour', ylabel='Count', title='Sales by hour'))\n\nplt.xticks(rotation = 0);","33b5c1e6":"len(bakery['Item'].unique())","09d8c3bb":"bakery['Item'].value_counts().head(3).plot(kind='bar', title='Top 3 items', \n                                           figsize=(10,10)).set(ylabel='Counts')\nplt.xticks(rotation = 0);","54ed5675":"df = (bakery\n    .groupby(['Transaction','Item']).size().rename('Count').reset_index()  \n      # Variable 'Count' created\n      \n    .groupby(['Transaction', 'Item'])['Count'].sum()\n    .unstack().reset_index().fillna(0).set_index('Transaction'))\n\ndf","2d835693":"def encode_data(datapoint):\n    if datapoint <= 0:\n        return 0\n    else:\n        return 1\n\n\ndf = df.applymap(encode_data)","76ec9cbe":"itemsets = apriori(df, min_support=0.02, use_colnames=True)\n\nitemsets.head()","fb6162b9":"print('We have a total of {} itemsets'.format(len(itemsets)))","0bc32ac7":"rules = association_rules(itemsets, metric='lift', min_threshold=0.5)\n\nrules.sort_values('lift', ascending=False).head(10)","84ab5670":"rec_rules = rules[(rules['lift'] > 1) & (rules['confidence'] >= 0.6)]\n\nrec_rules","7822fe54":"This can also be visualized with the help of the barplot below.        ","f3309236":"Now, everything left is a matter of using the pre-built functions of the `MLXtend` library.\n\nWe begin by excluding anything that has a support less than 2%. Said otherwise, if an itemset appears less than 2% in the dataset, we get rid of it.","e1a5244d":"We can filter by values that are relevant, for example, a confidence of at least 60% and a lift of more than 1.","a848c16e":"### At what time of the day are there more purchases?","8c915b99":"### What is the top product?","08200c6f":"Let's first get to know how many different products there are.","440a77c3":"**More purchases are being made in the morning, between  7:00 and 12:00, followed by the afternoon.**","e582828e":"This question clearly requires to perform ***association rules***. We will use the so called \"A priori\" algorithm to do a basket analysis.","4f8828b4":"**Created by** : Angel Tomas-Ripoll, *Data Analyst* \n\n----","945da98d":"There is only one combination of items that fulfills these requirements, and that is Toast and Coffee.\n\n**Toasts and coffes are most likely to be purchased together. When a client buys a toast, it is most probable that they will also buy a coffee afterwards.**\n\n<br>\n\nThe direction is important, because (Toast) --> (Coffee) does not have the same values as (Coffee) --> (Toast). The difference between the two is the chronological order : first a Toast is bought, and then potentially a Coffee is bought, but after the Toast!\n\nThe interpretation is as follows :\n\n* In around 2% of all the transactions, Toast and Coffee are bought together.\n* When Toast is bought, the likelihood that Coffee is then bought is 70%.\n* When Toast is sold, it increases the probability of then selling Coffee by 48%.","6c2a29d8":"A (*hypothetical*) Swiss bakery has recently contacted me because they have a large amount of data stored in their cloud servers, but fail to make good use of it. As a data analyst, this is a great opportunity to have fun and earn some merit at the same time!\n\nThe bakery would like to know a few specific things :\n\n* **At what time of the day are there more purchases?**\n* **What is the top product?**\n* **Which products are more likely to be purchased with which products?**","ca380797":"It is very important that we map every positive quantity to 1, and else to 0. Otherwise, the algorithm won't work.","8dae5af5":"# Analysis of a Bakery's data","fb84a601":"These are simple questions that can be answered with just some simple visualizations during an Exploratory Data Analysis...\n\nSo... ***Let's get started!***","85f27d53":"**In this bakery, coffee is the most consumed item, followed by bread and tea.**","053d6f07":"Now, let's find the rules.","8eed7c35":"We have a total of 786 values which were not of `NaN` type, but were \"hidden\" missing values!\n\nLet's remove them now.","a045f713":"# Quick exploration","9054061e":"The first thing to do is to transform the dataset in order to have the products as columns, and encoded 1-hot.\n\nAfter creating a `Count` variable, we proceed to encoding.","26a56824":"First, we will create a new variable that assigns 'Morning', 'Afternoon' or 'Evening' depending on the variable `Time`.","6ae47508":"### Which products are more likely to be purchased with which products?","e1705740":"Let's drop all missing values.","65be69b3":"We need to convert the `Time` variable into a Time Object !","c03c10c0":"# Imports","cc241f74":"There are 95 different products, which makes the use of a bar plot quite difficult unless we only select the top 3 products, for example.","06c2824d":"Note the practicalities of the `.dt` accessor, which allows to only access the time and not the date. Here I only extracted the hour of the day, but one could also only access the minutes, the seconds...","fe3f4d6e":"The time frame for the transactions is between one in the morning and eleven in the evening... Quite a busy bakery!","0d1f84ac":"Now we have fewer observations (20507 instead of 21293 beforehand).","c7476a59":"# Answers"}}