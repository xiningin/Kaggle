{"cell_type":{"787d25ee":"code","428eaa52":"code","c598bc42":"code","057ff5ae":"code","8ea9946c":"code","33e95d0f":"code","76d58557":"code","8972704c":"code","20419256":"code","93f2df4f":"code","a6dedf58":"code","24e40270":"code","4bd0faff":"code","91adf606":"code","990f6dc9":"code","53b31458":"code","0ce9ef26":"code","d66f2be6":"code","187b4360":"code","36c11034":"code","95a53c6d":"code","9d8e2dde":"code","9a557033":"code","f1d26705":"code","30e8236b":"code","3fe82435":"code","ad3fe0ce":"code","99129e81":"code","46c4fed2":"code","3e33245d":"code","11a16133":"code","51190596":"code","79523f0a":"code","41da1135":"code","bc054e81":"code","62e497b4":"code","efc6b897":"markdown","52b9924d":"markdown","369c56a4":"markdown","1495e597":"markdown","fc7f1e92":"markdown","b4bfe12b":"markdown","d856ffcb":"markdown","24cb5c2e":"markdown","dc00b7ac":"markdown","d0f5045a":"markdown","13337181":"markdown","f3d4794c":"markdown","b7625de7":"markdown","b8e3cbfb":"markdown","2cc8325e":"markdown","04d5ed74":"markdown","172234bf":"markdown","f13983b6":"markdown","7d4fb7da":"markdown","1fc17c74":"markdown","28bec152":"markdown","fb510d8f":"markdown","9205c005":"markdown","394c6f78":"markdown","64bef583":"markdown","6122ceb4":"markdown","74831c19":"markdown","643fcc33":"markdown","4bdc2758":"markdown","5b7985dd":"markdown","27026ec0":"markdown","75c4fae8":"markdown","c56c52d9":"markdown","ccafd9a8":"markdown","d24309f4":"markdown","e0f0d1bb":"markdown","480185e0":"markdown","5643a3db":"markdown"},"source":{"787d25ee":"#  importing required libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import chi2_contingency\n\n#import os\n#print(os.listdir(\"..\/input\"))\n\n%matplotlib inline \n","428eaa52":"# missing data\ndef missing_data(df):\n    featureList = list(df)\n    for removeColumn in ['SK_ID_PREV','SK_ID_CURR','isTrain','isTest','TARGET','SK_ID_BUREAU']:\n        if removeColumn in featureList: \n            featureList.remove(removeColumn)\n    train_total = df.loc[df.isTrain,featureList].isnull().sum()\n    test_total = df.loc[df.isTest,featureList].isnull().sum()\n    train_percent = (df.loc[df.isTrain,featureList].isnull().sum()\/df.loc[df.isTrain,featureList].isnull().count()*100)\n    test_percent = (df.loc[df.isTest,featureList].isnull().sum()\/df.loc[df.isTest,featureList].isnull().count()*100)\n    df = pd.concat([train_total, train_percent,test_total,test_percent], axis=1, keys=['train_Total', 'train_Percent','test_Total','trest_Percent'])\n    return(df.query('train_Total >0 or test_Total >0'))\n\ndef missing_info(data, feature):\n    return((data.loc[data.isTrain,feature].isnull().sum(),\n            round((data.loc[data.isTrain,feature].isnull().sum()*100\/data[data.isTrain].shape[0]),2),\n            data.loc[data.isTest,feature].isnull().sum(),\n            round((data.loc[data.isTest,feature].isnull().sum()*100\/data[data.isTest].shape[0]),2)))","c598bc42":"# all in one plot\ndef plot_df(df,withTarget = True):\n    featureList = list(df)\n    for removeColumn in ['SK_ID_PREV','SK_ID_CURR','isTrain','isTest','TARGET','SK_ID_BUREAU']:\n        if removeColumn in featureList: \n            featureList.remove(removeColumn)\n    for feature in featureList:\n        print(feature)\n        if (df[feature].dtypes == np.object) | (len(df[feature].unique())<15):\n            plot_stats(df,feature,withTarget)\n        else:\n            plot_distribution(df,feature,withTarget)\n\n# distribution\ndef plot_distribution(df,feature,withTarget = True):\n    df = df.dropna(axis=0, subset=[feature])\n    if withTarget :\n        fig, axes = plt.subplots(ncols=4,nrows=2, figsize=(20,10))\n        s = sns.distplot(ax=axes[0,0], a = df[feature],kde=False)\n        s = sns.distplot(ax=axes[0,1], a = df.loc[df.isTrain,feature].values,kde=False)\n        s = sns.distplot(ax=axes[0,2], a = df.loc[df.isTest,feature].values,kde=False)\n        s = sns.boxplot(ax=axes[0,3], x = 'TARGET', y=feature,data=df[df.isTrain])\n        axes[0,0].set_title('Total')\n        axes[0,1].set_title('Train')\n        axes[0,2].set_title('Test')\n        axes[0,3].set_title('TARGET=1')\n        df = df.query('{0} !=0'.format(feature))\n        df = df[~is_outlier(df[feature])]\n        s = sns.distplot(ax=axes[1,0], a = df[feature],kde=False)\n        s = sns.distplot(ax=axes[1,1], a = df.loc[df.isTrain,feature].values,kde=False)\n        s = sns.distplot(ax=axes[1,2], a = df.loc[df.isTest,feature].values,kde=False)\n        s = sns.boxplot(ax=axes[1,3], x = 'TARGET', y=feature,data=df[df.isTrain])\n    else:\n        fig, axes = plt.subplots(ncols=3,nrows=1, figsize=(20,4))\n        s = sns.distplot(ax=axes[0], a = df[feature],kde=False)\n        df = df.query('{0} !=0'.format(feature))\n        s = sns.distplot(ax=axes[1], a = df[feature],kde=False)\n        df = df[~is_outlier(df[feature])]\n        s = sns.distplot(ax=axes[2], a = df[feature],kde=False)\n        axes[0].set_title('with outliers')\n        axes[1].set_title('without zero')\n        axes[2].set_title('without outliers')\n    for ax in fig.axes:\n        matplotlib.pyplot.sca(ax)\n        plt.xticks(rotation=45)\n        ax.set(xlabel='')\n    plt.show()\n    \n# bar plot\ndef plot_stats(df,feature,withTarget = True):\n    sns.set_color_codes(\"pastel\")\n    if(withTarget):\n        print(chisq_of_df_cols(df, feature))\n        if(len(df[feature].unique()) <8):\n            fig, (ax1, ax2, ax3, ax4) = plt.subplots(ncols=4, figsize=(20,4))\n        else:\n            fig, (ax1, ax2, ax3, ax4) = plt.subplots(nrows=4, figsize=(20,25))\n\n        s = sns.countplot(ax=ax1,x=feature, data=df, orient=\"h\")\n        s = sns.countplot(ax=ax2,x=feature, data=df.query('isTrain == True'))\n        s = sns.countplot(ax=ax3,x=feature, data=df.query('isTrain == False'))\n        s = sns.countplot(ax=ax4,x=feature, data=df.query('isTrain == True and TARGET == 1'))\n        ax1.set_title('Total')\n        ax2.set_title('Train')\n        ax3.set_title('Test')\n        ax4.set_title('TARGET=1')\n    else :\n        if(len(df[feature].unique()) >6):\n            plt.subplots(figsize=(20,5))\n        plt.xticks(rotation=45)\n        s = sns.countplot(x=feature, data=df, orient=\"h\")\n    plt.show();","057ff5ae":"#chi squared test\ndef chisq_of_df_cols(df, feature):\n    groupsizes = df.groupby([feature, 'TARGET']).size()\n    ctsum = groupsizes.unstack(feature)\n    # fillna(0) is necessary to remove any NAs which will cause exceptions\n    chi2, p, ddof, expected = chi2_contingency(ctsum.fillna(0))\n    return(p)","8ea9946c":"# Outlier remover\n# Source: https:\/\/stackoverflow.com\/questions\/11882393\/matplotlib-disregard-outliers-when-plotting (see references)\n\ndef is_outlier(points, thresh=3.5):\n    \"\"\"\n    Returns a boolean array with True if points are outliers and False \n    otherwise.\n\n    Parameters:\n    -----------\n        points : An numobservations by numdimensions array of observations\n        thresh : The modified z-score to use as a threshold. Observations with\n            a modified z-score (based on the median absolute deviation) greater\n            than this value will be classified as outliers.\n\n    Returns:\n    --------\n        mask : A numobservations-length boolean array.\n\n    References:\n    ----------\n        Boris Iglewicz and David Hoaglin (1993), \"Volume 16: How to Detect and\n        Handle Outliers\", The ASQC Basic References in Quality Control:\n        Statistical Techniques, Edward F. Mykytka, Ph.D., Editor. \n    \"\"\"\n    if len(points.shape) == 1:\n        points = points[:,None]\n    median = np.median(points, axis=0)\n    diff = np.sum((points - median)**2, axis=-1)\n    diff = np.sqrt(diff)\n    med_abs_deviation = np.median(diff)\n\n    modified_z_score = 0.6745 * diff \/ med_abs_deviation\n\n    return modified_z_score > thresh","33e95d0f":"# combining dataset\ndef get_combined_dataset() :\n    application_train = pd.read_csv('..\/input\/application_train.csv')\n    application_train['isTrain'] = True\n    application_train['isTest'] = False\n    application_test = pd.read_csv('..\/input\/application_test.csv')\n    application_test['isTest'] = True\n    application_test['isTrain'] = False\n    application=application_train.append(application_test, ignore_index=True,sort=False)\n    application.set_index('SK_ID_CURR')\n    return (application)","76d58557":"application = get_combined_dataset()\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=\"TARGET\", data=application.query('isTrain == True'))\nfor p in ax.patches:\n    ax.annotate('{:}'.format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))","8972704c":"plot_df(application)","20419256":"def get_application_dataset():\n    df = get_combined_dataset()\n    filteredColList =['NAME_TYPE_SUITE','NAME_INCOME_TYPE','NAME_EDUCATION_TYPE','NAME_FAMILY_STATUS','NAME_HOUSING_TYPE','OCCUPATION_TYPE',\n                      'WEEKDAY_APPR_PROCESS_START','ORGANIZATION_TYPE','FONDKAPREMONT_MODE'] \n    df = df[[x for x in list(df) if x not in filteredColList]]\n    oheCols = ['NAME_CONTRACT_TYPE','CODE_GENDER','FLAG_OWN_CAR','FLAG_OWN_REALTY','HOUSETYPE_MODE','WALLSMATERIAL_MODE','EMERGENCYSTATE_MODE']\n    df.loc[df.CODE_GENDER == 'XNA' ,'CODE_GENDER'] = 'F'\n\n    df.loc[(df.DAYS_EMPLOYED > 0),'DAYS_EMPLOYED'] = np.nan\n    df.loc[(df.REGION_RATING_CLIENT_W_CITY < 0),'REGION_RATING_CLIENT_W_CITY'] = np.nan\n    df.loc[(df.OBS_30_CNT_SOCIAL_CIRCLE > 10),'OBS_30_CNT_SOCIAL_CIRCLE'] = 10\n    df.loc[(df.DEF_30_CNT_SOCIAL_CIRCLE > 10),'DEF_30_CNT_SOCIAL_CIRCLE'] = 10\n    df.loc[(df.OBS_60_CNT_SOCIAL_CIRCLE > 10),'OBS_60_CNT_SOCIAL_CIRCLE'] = 10\n    df.loc[(df.DEF_60_CNT_SOCIAL_CIRCLE > 10),'DEF_60_CNT_SOCIAL_CIRCLE'] = 10\n    df.loc[(df.AMT_REQ_CREDIT_BUREAU_QRT > 10),'AMT_REQ_CREDIT_BUREAU_QRT'] = 10\n    df = pd.get_dummies(df,columns=oheCols)\n    \n    df['NEW_INCOME2Credit']=df['AMT_CREDIT']\/df['AMT_INCOME_TOTAL']\n    df['NEW_Credit2ANNUITY']=df['AMT_ANNUITY']\/df['AMT_CREDIT']\n    df['NEW_INCOME2ANNUITY']=df['AMT_ANNUITY']\/df['AMT_INCOME_TOTAL']\n    df['NEW_DAYS_EMPLOYED2DAYS_BIRTH'] = df['DAYS_EMPLOYED'] \/ df['DAYS_BIRTH']\n    df['NEW_AMT_INCOME_TOTAL2CNT_FAM_MEMBERS'] = df['AMT_INCOME_TOTAL'] \/ df['CNT_FAM_MEMBERS']\n    \n    df['NEW_CREDIT_TO_ANNUITY_RATIO'] = df['AMT_CREDIT'] \/ df['AMT_ANNUITY']\n    df['NEW_CREDIT2GOODS'] = df['AMT_CREDIT'] \/ df['AMT_GOODS_PRICE']\n    df['NEW_INC_PER_CHLD'] = df['AMT_INCOME_TOTAL'] \/ (1 + df['CNT_CHILDREN'])\n    df['NEW_SOURCES_PROD'] = df['EXT_SOURCE_1'] * df['EXT_SOURCE_2'] * df['EXT_SOURCE_3']\n    df['NEW_EXT_SOURCES_MEAN'] = df[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].mean(axis=1)\n    df['NEW_SCORES_STD'] = df[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].std(axis=1)\n    df['NEW_SCORES_STD'] = df['NEW_SCORES_STD'].fillna(df['NEW_SCORES_STD'].mean())\n    df['NEW_OWN_CAR_AGE2DAYS_BIRTH'] = df['OWN_CAR_AGE'] \/ df['DAYS_BIRTH']\n    df['NEW_OWN_CAR_AGE2DAYS_EMPLOYED'] = df['OWN_CAR_AGE'] \/ df['DAYS_EMPLOYED']\n    df['NEW_DAYS_LAST_PHONE_CHANGE2DAYS_BIRTH'] = df['DAYS_LAST_PHONE_CHANGE'] \/ df['DAYS_BIRTH']\n    df['NEW_DAYS_LAST_PHONE_CHANGE2DAYS_EMPLOYED'] = df['DAYS_LAST_PHONE_CHANGE'] \/ df['DAYS_EMPLOYED']\n    \n    return(df)","93f2df4f":"application = get_application_dataset()\nplot_df(application)","a6dedf58":"def transform_application(df):\n    \n    logTransformation = ['AMT_INCOME_TOTAL','AMT_CREDIT','AMT_ANNUITY','AMT_GOODS_PRICE']\n    df[logTransformation] = df[logTransformation].apply(lambda x : np.log(x+1),axis=1)\n    \n    sqrtTransformation = ['DAYS_BIRTH','DAYS_EMPLOYED','DAYS_REGISTRATION','DAYS_ID_PUBLISH','OWN_CAR_AGE','DAYS_LAST_PHONE_CHANGE']\n    df[sqrtTransformation] = df[sqrtTransformation].apply(lambda x: np.sqrt(np.abs(x)),axis=1)\n\n    return(df)","24e40270":"bureau = pd.read_csv('..\/input\/bureau.csv')\nplot_df(bureau,withTarget=False)","4bd0faff":"bureau_balance = pd.read_csv('..\/input\/bureau_balance.csv')\nplot_df(bureau_balance,withTarget=False)","91adf606":"def bureau_balance():\n    df = pd.read_csv('..\/input\/bureau_balance.csv')\n    # getting the furthest date attached to bureau_id\n    df1 = df.groupby(['SK_ID_BUREAU']).agg(\n            {'MONTHS_BALANCE': min,\n            })\n    # Status of bureau_id as per freshest month\n    df2 = df.groupby(['SK_ID_BUREAU']).agg(\n                {'MONTHS_BALANCE': max,\n                }).reset_index()\n    df2 = pd.merge(df2,df,on=['SK_ID_BUREAU','MONTHS_BALANCE'],how='inner')\n    df2 = pd.crosstab(df2['SK_ID_BUREAU'], df2['STATUS'])\n\n    df = pd.merge(df1,df2,on=['SK_ID_BUREAU'],how='left').reset_index()\n    df.columns = ['SK_ID_BUREAU','MONTHS_BALANCE','BB_S_0','BB_S_1','BB_S_2','BB_S_3','BB_S_4','BB_S_5','BB_S_C','BB_S_X']\n    return(df)","990f6dc9":"def get_bureau_dataset():\n    b = pd.read_csv('..\/input\/bureau.csv')\n    bb = bureau_balance()\n    df = pd.merge(b,bb,on='SK_ID_BUREAU',how='left')\n    df.loc[(df.DAYS_CREDIT_ENDDATE < 0) | (df.DAYS_CREDIT_ENDDATE > 5000),'DAYS_CREDIT_ENDDATE'] = np.nan\n    df.loc[(df.DAYS_ENDDATE_FACT < -5000),'DAYS_ENDDATE_FACT'] = np.nan\n    df.loc[(df.AMT_CREDIT_MAX_OVERDUE > 40000),'AMT_CREDIT_MAX_OVERDUE'] = 40000\n    df.loc[(df.DAYS_CREDIT_UPDATE < -3000),'DAYS_CREDIT_UPDATE'] = np.nan\n    df.loc[(df.AMT_CREDIT_SUM_DEBT < 0),'AMT_CREDIT_SUM_DEBT'] = np.nan\n    df.loc[(df.AMT_CREDIT_SUM_LIMIT < 0),'AMT_CREDIT_SUM_LIMIT'] = np.nan\n\n    All = df.groupby(['SK_ID_CURR']).agg(\n            {'DAYS_CREDIT': [min, max],\n             'CREDIT_DAY_OVERDUE':max,\n             'DAYS_CREDIT_ENDDATE':max,\n             'DAYS_ENDDATE_FACT':[min,max],\n             'AMT_CREDIT_MAX_OVERDUE':max,\n             'CNT_CREDIT_PROLONG':max,\n             'AMT_CREDIT_SUM':max,\n             'AMT_CREDIT_SUM_DEBT':max,\n             'AMT_CREDIT_SUM_LIMIT':max,\n             'DAYS_CREDIT_UPDATE':min,\n             'AMT_ANNUITY':max,\n             'MONTHS_BALANCE':min,\n             'BB_S_0':sum,\n             'BB_S_1':sum,\n             'BB_S_2':sum,\n             'BB_S_3':sum,\n             'BB_S_4':sum,\n             'BB_S_5':sum,\n             'BB_S_C':sum,\n             'BB_S_X':sum\n            })\n    All.columns = [\"_all_\".join(x) for x in All.columns.ravel()]\n    Active = df.query('CREDIT_ACTIVE == \"Active\"').groupby(['SK_ID_CURR']).agg(\n            {'CREDIT_DAY_OVERDUE':max,\n             'AMT_CREDIT_MAX_OVERDUE': max,\n             'CNT_CREDIT_PROLONG':[max,sum],\n             'AMT_CREDIT_SUM':sum,\n             'AMT_CREDIT_SUM_DEBT':sum,\n             'AMT_CREDIT_SUM_LIMIT':sum,\n             'AMT_CREDIT_SUM_OVERDUE':sum,\n             'DAYS_CREDIT_UPDATE':min,\n             'AMT_ANNUITY':sum,\n             'MONTHS_BALANCE':min,\n             'BB_S_0':sum,\n             'BB_S_1':sum,\n             'BB_S_2':sum,\n             'BB_S_3':sum,\n             'BB_S_4':sum,\n             'BB_S_5':sum,\n             'BB_S_C':sum,\n             'BB_S_X':sum\n            })\n    Active.columns = [\"_act_\".join(x) for x in Active.columns.ravel()]\n    \n    CREDIT_ACTIVE_ctab = pd.crosstab(df['SK_ID_CURR'], df['CREDIT_ACTIVE']).rename_axis(None, axis=1)\n    from functools import reduce\n    dfs = [All,Active,CREDIT_ACTIVE_ctab]\n\n    df_final = reduce(lambda left,right: pd.merge(left,right,on='SK_ID_CURR',how='outer'), dfs)\n    df_final.reset_index(inplace=True)\n    return(df_final)","53b31458":"bureau = get_bureau_dataset()\nbureau = application.loc[:,['SK_ID_CURR','isTrain','isTest','TARGET']].merge(bureau,how='left',on='SK_ID_CURR')\nplot_df(bureau,withTarget=True)","0ce9ef26":"bureau.head()","d66f2be6":"def bureau_newFeature(df):\n    df['AMT_CREDIT_SUM_sum2AMT_CREDIT_SUM_DEBT_sum'] = df['AMT_CREDIT_SUM_DEBT_act_sum']\/df['AMT_CREDIT_SUM_act_sum']\n    df['AMT_CREDIT_SUM_sum2AMT_ANNUITY_sum'] = df['AMT_CREDIT_SUM_act_sum']\/df['AMT_ANNUITY_act_sum']\n    df['AMT_CREDIT_SUM_DEBT_sum2AMT_ANNUITY_sum'] = df['AMT_CREDIT_SUM_DEBT_act_sum']\/df['AMT_ANNUITY_act_sum']\n    df.replace([np.inf, -np.inf], np.nan,inplace=True)\n    df.loc[df.AMT_CREDIT_SUM_sum2AMT_CREDIT_SUM_DEBT_sum>2,'AMT_CREDIT_SUM_sum2AMT_CREDIT_SUM_DEBT_sum'] = np.nan\n    df.loc[df.AMT_CREDIT_SUM_sum2AMT_ANNUITY_sum>120,'AMT_CREDIT_SUM_sum2AMT_ANNUITY_sum'] = np.nan\n    df.loc[df.AMT_CREDIT_SUM_DEBT_sum2AMT_ANNUITY_sum>80,'AMT_CREDIT_SUM_DEBT_sum2AMT_ANNUITY_sum'] = np.nan\n    return(df)\n    \ndef transform_bureau(df):\n    logTransformation = ['CREDIT_DAY_OVERDUE_all_max','AMT_CREDIT_MAX_OVERDUE_all_max','AMT_CREDIT_SUM_all_max','AMT_CREDIT_SUM_DEBT_all_max',\n                         'AMT_CREDIT_SUM_LIMIT_all_max','AMT_ANNUITY_all_max','AMT_CREDIT_MAX_OVERDUE_act_max','AMT_CREDIT_SUM_act_sum',\n                         'AMT_CREDIT_SUM_DEBT_act_sum','AMT_CREDIT_SUM_LIMIT_act_sum','AMT_CREDIT_SUM_OVERDUE_act_sum','AMT_ANNUITY_act_sum']\n    df[logTransformation] = df[logTransformation].apply(lambda x : np.log(x+1),axis=1)\n    \n    sartLogTransformation = ['CREDIT_DAY_OVERDUE_act_max','DAYS_CREDIT_UPDATE_act_min']\n    df[logTransformation] = df[logTransformation].apply(lambda x : np.sqrt(np.log(np.abs(x+1))),axis=1)\n    \n    sqrtTransformation = ['DAYS_CREDIT_all_min','DAYS_CREDIT_all_max','DAYS_CREDIT_ENDDATE_all_max','DAYS_ENDDATE_FACT_all_min','DAYS_ENDDATE_FACT_all_max',\n                         'DAYS_CREDIT_UPDATE_all_min','MONTHS_BALANCE_all_min','MONTHS_BALANCE_act_min']\n    df[sqrtTransformation] = df[sqrtTransformation].apply(lambda x: np.sqrt(np.abs(x)),axis=1)\n\n    return(df)","187b4360":"df = get_bureau_dataset()\ndf = bureau_newFeature(df)\ndf = transform_bureau(df)","36c11034":"previous_application = pd.read_csv('..\/input\/previous_application.csv')\nplot_df(previous_application,False)","95a53c6d":"def get_previous_application():\n    df = pd.read_csv('..\/input\/previous_application.csv')\n    df.loc[df.DAYS_FIRST_DRAWING >0,'DAYS_FIRST_DRAWING'] = np.nan\n    df.loc[df.DAYS_FIRST_DUE >0,'DAYS_FIRST_DUE'] = np.nan\n    df.loc[df.DAYS_LAST_DUE_1ST_VERSION >2000,'DAYS_LAST_DUE_1ST_VERSION'] = np.nan\n    df.loc[df.DAYS_LAST_DUE >3000,'DAYS_LAST_DUE'] = np.nan\n    df.loc[df.DAYS_TERMINATION >3000,'DAYS_TERMINATION'] = np.nan\n\n    NAME_CONTRACT_STATUS_ctab = pd.crosstab(df['SK_ID_CURR'], df['NAME_CONTRACT_STATUS'])\n    df_grouped = df.query('NAME_CONTRACT_STATUS != \"Refused\" and FLAG_LAST_APPL_PER_CONTRACT == \"Y\" and NFLAG_LAST_APPL_IN_DAY == 1')\\\n                                                    .groupby(['SK_ID_CURR'])\\\n                                                    .agg(\n                                                        {'AMT_ANNUITY':max,\n                                                         'AMT_APPLICATION':max,\n                                                         'AMT_CREDIT':max,\n                                                         'AMT_DOWN_PAYMENT':max,\n                                                         'AMT_GOODS_PRICE':max,\n                                                         'RATE_DOWN_PAYMENT':[min, max],\n                                                         'RATE_INTEREST_PRIMARY':[min, max],\n                                                         'RATE_INTEREST_PRIVILEGED':[min, max],\n                                                         'DAYS_DECISION':[min, max],\n                                                         'CNT_PAYMENT':[min, max],\n                                                         'DAYS_FIRST_DRAWING':min,\n                                                         'DAYS_FIRST_DUE':[min, max],\n                                                         'DAYS_LAST_DUE_1ST_VERSION':[min, max],\n                                                         'DAYS_LAST_DUE':[min, max],\n                                                         'DAYS_TERMINATION':[min, max],\n                                                         'NFLAG_INSURED_ON_APPROVAL':sum\n                                                        })\n    df_final = pd.merge(df_grouped,NAME_CONTRACT_STATUS_ctab,on='SK_ID_CURR',how='outer')\n    df_final.reset_index(inplace=True)\n    df_final.columns = ['SK_ID_CURR','AMT_ANNUITY_max','AMT_APPLICATION_max','AMT_CREDIT_max','AMT_DOWN_PAYMENT_max','AMT_GOODS_PRICE_max',\n                        'RATE_DOWN_PAYMENT_min','RATE_DOWN_PAYMENT_max','RATE_INTEREST_PRIMARY_min','RATE_INTEREST_PRIMARY_max',\n                        'RATE_INTEREST_PRIVILEGED_min','RATE_INTEREST_PRIVILEGED_max','DAYS_DECISION_min','DAYS_DECISION_max','CNT_PAYMENT_min',\n                        'CNT_PAYMENT_max','DAYS_FIRST_DRAWING_min','DAYS_FIRST_DUE_min','DAYS_FIRST_DUE_max',\n                        'DAYS_LAST_DUE_1ST_VERSION_min','DAYS_LAST_DUE_1ST_VERSION_max','DAYS_LAST_DUE_min','DAYS_LAST_DUE_max','DAYS_TERMINATION_min',\n                        'DAYS_TERMINATION_max','NFLAG_INSURED_ON_APPROVAL_sum','Approved','Canceled','Refused','Unused_offer']\n    df_final.head()\n    return(df_final)","9d8e2dde":"previous_application = get_previous_application()\nprevious_application = application.loc[:,['SK_ID_CURR','isTrain','isTest','TARGET']].merge(previous_application,how='left',on='SK_ID_CURR')\nplot_df(previous_application,withTarget=True)","9a557033":"def transform_previous_application(df):\n    logTransformation = ['AMT_ANNUITY_max','AMT_APPLICATION_max','AMT_CREDIT_max', 'AMT_DOWN_PAYMENT_max','AMT_GOODS_PRICE_max']\n    df[logTransformation] = df[logTransformation].apply(lambda x : np.log(x+1),axis=1)\n    \n    sqrtTransformation = ['DAYS_DECISION_min','DAYS_DECISION_max','DAYS_FIRST_DRAWING_min','DAYS_FIRST_DUE_min','DAYS_FIRST_DUE_max','DAYS_LAST_DUE_min',\n                          'DAYS_LAST_DUE_max','DAYS_TERMINATION_min','DAYS_TERMINATION_max']\n    df[sqrtTransformation] = df[sqrtTransformation].apply(lambda x: np.sqrt(np.abs(x)),axis=1)\n    return(df)","f1d26705":"POS_CASH_balance = pd.read_csv('..\/input\/POS_CASH_balance.csv')\nplot_df(POS_CASH_balance,False)","30e8236b":"def get_POS_CASH_balance():\n    POS_CASH_balance = pd.read_csv('..\/input\/POS_CASH_balance.csv')\n    Closed_Loans = POS_CASH_balance[POS_CASH_balance['SK_ID_PREV'].isin(POS_CASH_balance.query('NAME_CONTRACT_STATUS == \"Completed\"').SK_ID_PREV)]\n    Active_Loans = POS_CASH_balance[~POS_CASH_balance['SK_ID_PREV'].isin(POS_CASH_balance.query('NAME_CONTRACT_STATUS == \"Active\" and MONTHS_BALANCE == -1').SK_ID_PREV)]\n\n    Active = Active_Loans.groupby(['SK_ID_CURR']).agg(\n                    {  'MONTHS_BALANCE':min,\n                       'CNT_INSTALMENT':[min,max],\n                       'CNT_INSTALMENT_FUTURE':[min,max]\n                    })\n    Closed = Closed_Loans.groupby(['SK_ID_CURR']).agg(\n                    {  'MONTHS_BALANCE':[min,max],\n                       'CNT_INSTALMENT':max\n                    })\n    NAME_CONTRACT_STATUS = POS_CASH_balance.query('(NAME_CONTRACT_STATUS == \"Completed\") or (NAME_CONTRACT_STATUS == \"Active\" and MONTHS_BALANCE == -1) ')[['SK_ID_PREV','SK_ID_CURR','NAME_CONTRACT_STATUS']].drop_duplicates()\n    NAME_CONTRACT_STATUS_ctab = pd.crosstab(NAME_CONTRACT_STATUS['SK_ID_CURR'], NAME_CONTRACT_STATUS['NAME_CONTRACT_STATUS'])\n\n    from functools import reduce\n    dfs = [NAME_CONTRACT_STATUS_ctab,Active,Closed]\n    df_final = reduce(lambda left,right: pd.merge(left,right,on='SK_ID_CURR',how='outer'), dfs)\n    df_final.reset_index(inplace=True)\n    df_final.columns = ['SK_ID_CURR','Active','Completed','MONTHS_BALANCE_A_min','CNT_INSTALMENT_A_min','CNT_INSTALMENT_A_max','CNT_INSTALMENT_FUTURE_A_min',\n                        'CNT_INSTALMENT_FUTURE_max','MONTHS_BALANCE_C_min','MONTHS_BALANCE_C_max','CNT_INSTALMENT_C_max']\n    return(df_final)","3fe82435":" POS_CASH_balance = get_POS_CASH_balance()\n POS_CASH_balance = application.loc[:,['SK_ID_CURR','isTrain','isTest','TARGET']].merge(POS_CASH_balance,how='left',on='SK_ID_CURR')\n plot_df(POS_CASH_balance,withTarget=True)","ad3fe0ce":"def transform_POS_CASH_balance(df):\n    sqrtTransformation = ['CNT_INSTALMENT_A_min','CNT_INSTALMENT_A_max','CNT_INSTALMENT_FUTURE_A_min','CNT_INSTALMENT_FUTURE_max','CNT_INSTALMENT_C_max']\n    df[sqrtTransformation] = df[sqrtTransformation].apply(lambda x: np.sqrt(np.abs(x)),axis=1)\n    return(df)","99129e81":"instalment_payments = pd.read_csv('..\/input\/installments_payments.csv')\nplot_df(instalment_payments,withTarget=False)","46c4fed2":"def get_installment_payments():\n    instalment_payments = pd.read_csv('..\/input\/installments_payments.csv')\n    instalment_payments['MONTH']=(instalment_payments['DAYS_INSTALMENT']\/30).astype(int)\n    # features for last month active loans\n    Active = instalment_payments.query('MONTH == -1').groupby('SK_ID_CURR').agg({\n        'NUM_INSTALMENT_VERSION':max,\n        'NUM_INSTALMENT_NUMBER':max,\n        'AMT_INSTALMENT':sum,\n        'AMT_PAYMENT':sum\n    })\n    Closed = instalment_payments.groupby('SK_ID_CURR').agg({\n        'NUM_INSTALMENT_VERSION':max,\n        'NUM_INSTALMENT_NUMBER':max,\n        'DAYS_INSTALMENT':min,\n        'AMT_INSTALMENT':[max,min]\n    })\n    from functools import reduce\n    df_final = pd.merge(Active,Closed,on='SK_ID_CURR',how='outer')\n    df_final.reset_index(inplace=True)\n    df_final.columns=['SK_ID_CURR','NUM_INSTALMENT_VERSION_A_max','NUM_INSTALMENT_NUMBER_A_max','AMT_INSTALMENT_A_sum','AMT_PAYMENT_A_sum',\n                      'NUM_INSTALMENT_VERSION_C_max','NUM_INSTALMENT_NUMBER_C_max','DAYS_INSTALMENT_C_min','AMT_INSTALMENT_C_max','AMT_INSTALMENT_c_min']\n    return(df_final)","3e33245d":"instalment_payments = get_installment_payments()\ninstalment_payments = application.loc[:,['SK_ID_CURR','isTrain','isTest','TARGET']].merge(instalment_payments,how='left',on='SK_ID_CURR')\nplot_df(instalment_payments)","11a16133":"def transform_installment_payments(df):\n    logTransformation = ['AMT_INSTALMENT_A_sum','AMT_PAYMENT_A_sum','AMT_INSTALMENT_C_max','AMT_INSTALMENT_c_min']\n    df[logTransformation] = df[logTransformation].apply(lambda x : np.log(x+1),axis=1)\n    \n    sqrtTransformation = ['NUM_INSTALMENT_VERSION_A_max','NUM_INSTALMENT_NUMBER_A_max','NUM_INSTALMENT_VERSION_C_max','NUM_INSTALMENT_NUMBER_C_max',\n                          'DAYS_INSTALMENT_C_min']\n    df[sqrtTransformation] = df[sqrtTransformation].apply(lambda x: np.sqrt(np.abs(x)),axis=1)\n    return(df)","51190596":"credit_card_balance = pd.read_csv('..\/input\/credit_card_balance.csv')\nplot_df(credit_card_balance,withTarget=False)","79523f0a":"def get_credit_card_balance():\n    df = pd.read_csv('..\/input\/credit_card_balance.csv')\n    df.loc[df.AMT_BALANCE <0,'AMT_BALANCE'] = np.nan\n    df.loc[df.AMT_RECEIVABLE_PRINCIPAL <0,'AMT_RECEIVABLE_PRINCIPAL'] = np.nan\n    df.loc[df.AMT_RECIVABLE <0,'AMT_RECIVABLE'] = np.nan\n    df.loc[df.AMT_TOTAL_RECEIVABLE <0,'AMT_TOTAL_RECEIVABLE'] = np.nan\n    # features for last month active loans\n    last_month = df.query('MONTHS_BALANCE == -1').groupby('SK_ID_CURR').agg({\n        'AMT_BALANCE':lambda x: sum(x[x>0]),\n        'AMT_CREDIT_LIMIT_ACTUAL':sum,\n        'AMT_DRAWINGS_ATM_CURRENT':sum,\n        'AMT_DRAWINGS_CURRENT':sum,\n        'AMT_DRAWINGS_OTHER_CURRENT':sum,\n        'AMT_DRAWINGS_POS_CURRENT':sum,\n        'AMT_INST_MIN_REGULARITY':sum,\n        'AMT_PAYMENT_CURRENT':sum,\n        'AMT_PAYMENT_TOTAL_CURRENT':sum,\n        'AMT_RECEIVABLE_PRINCIPAL':lambda x: sum(x[x>0]),\n        'AMT_RECIVABLE':lambda x: sum(x[x>0]),\n        'AMT_TOTAL_RECEIVABLE':lambda x: sum(x[x>0]),\n        'CNT_DRAWINGS_ATM_CURRENT':sum,\n        'CNT_DRAWINGS_CURRENT':sum,\n        'CNT_DRAWINGS_POS_CURRENT':sum,\n        'CNT_DRAWINGS_OTHER_CURRENT':sum,\n        'CNT_INSTALMENT_MATURE_CUM':sum,\n    })\n    all_month = df.groupby('SK_ID_CURR').agg({\n        'MONTHS_BALANCE':[max,min],\n        'AMT_BALANCE':max,\n        'AMT_CREDIT_LIMIT_ACTUAL':[max,min],\n        'AMT_DRAWINGS_ATM_CURRENT':max,\n        'AMT_DRAWINGS_CURRENT':max,\n        'AMT_DRAWINGS_OTHER_CURRENT':max,\n        'AMT_DRAWINGS_POS_CURRENT':max,\n        'AMT_INST_MIN_REGULARITY':max,\n        'AMT_PAYMENT_CURRENT':max,\n        'AMT_PAYMENT_TOTAL_CURRENT':max,\n        'AMT_RECEIVABLE_PRINCIPAL':max,\n        'AMT_RECIVABLE':max,\n        'AMT_TOTAL_RECEIVABLE':max,\n        'CNT_DRAWINGS_ATM_CURRENT':max,\n        'CNT_DRAWINGS_CURRENT':max,\n        'CNT_DRAWINGS_POS_CURRENT':max,\n        'CNT_DRAWINGS_OTHER_CURRENT':max,\n        'CNT_INSTALMENT_MATURE_CUM':max,\n        'SK_DPD':max,\n        'SK_DPD_DEF':max,\n    })\n    \n    #from functools import reduce\n    df_final = pd.merge(last_month,all_month,on='SK_ID_CURR',how='outer')\n    df_final.columns=['AMT_BALANCE_P_sum',\n        'AMT_CREDIT_LIMIT_ACTUAL_p_sum',\n        'AMT_DRAWINGS_ATM_CURRENT_p_sum',\n        'AMT_DRAWINGS_CURRENT_p_sum',\n        'AMT_DRAWINGS_OTHER_CURRENT_p_sum',\n        'AMT_DRAWINGS_POS_CURRENT_p_sum',\n        'AMT_INST_MIN_REGULARITY_p_sum',\n        'AMT_PAYMENT_CURRENT_p_sum',\n        'AMT_PAYMENT_TOTAL_CURRENT_p_sum',\n        'AMT_RECEIVABLE_PRINCIPAL_p_sum',\n        'AMT_RECIVABLE_p_sum',\n        'AMT_TOTAL_RECEIVABLE_p_sum',\n        'CNT_DRAWINGS_ATM_CURRENT_p_sum',\n        'CNT_DRAWINGS_CURRENT_p_sum',\n        'CNT_DRAWINGS_POS_CURRENT_p_sum',\n        'CNT_DRAWINGS_OTHER_CURRENT_p_sum',\n        'CNT_INSTALMENT_MATURE_CUM_p_sum',\n        'MONTHS_BALANCE_A_max',\n        'MONTHS_BALANCE_A_min',\n        'AMT_BALANCE_A_max',\n        'AMT_CREDIT_LIMIT_ACTUAL_A_max',\n        'AMT_CREDIT_LIMIT_ACTUAL_A_min',\n        'AMT_DRAWINGS_ATM_CURRENT_A_max',\n        'AMT_DRAWINGS_CURRENT_A_max',\n        'AMT_DRAWINGS_OTHER_CURRENT_A_max',\n        'AMT_DRAWINGS_POS_CURRENT_A_max',\n        'AMT_INST_MIN_REGULARITY_A_max',\n        'AMT_PAYMENT_CURRENT_A_max',\n        'AMT_PAYMENT_TOTAL_CURRENT_A_max',\n        'AMT_RECEIVABLE_PRINCIPAL_A_max',\n        'AMT_RECIVABLE_A_max',\n        'AMT_TOTAL_RECEIVABLE_A_max',\n        'CNT_DRAWINGS_ATM_CURRENT_A_max',\n        'CNT_DRAWINGS_CURRENT_A_max',\n        'CNT_DRAWINGS_POS_CURRENT_A_max',\n        'CNT_DRAWINGS_OTHER_CURRENT_A_max',\n        'CNT_INSTALMENT_MATURE_CUM_A_max',\n        'SK_DPD_A_max',\n        'SK_DPD_DEF_A_max',]\n    df_final.reset_index(inplace=True)\n    return(df_final)","41da1135":"credit_card_balance = get_credit_card_balance()\ncredit_card_balance = application.loc[:,['SK_ID_CURR','isTrain','isTest','TARGET']].merge(credit_card_balance,how='left',on='SK_ID_CURR')\nplot_df(credit_card_balance)","bc054e81":"def transform_credit_card_balance(df):\n    logTransformation = ['AMT_BALANCE_P_sum','AMT_CREDIT_LIMIT_ACTUAL_p_sum','AMT_DRAWINGS_ATM_CURRENT_p_sum','AMT_DRAWINGS_CURRENT_p_sum',\n                         'AMT_DRAWINGS_OTHER_CURRENT_p_sum','AMT_DRAWINGS_POS_CURRENT_p_sum','AMT_INST_MIN_REGULARITY_p_sum','AMT_PAYMENT_CURRENT_p_sum',\n                         'AMT_PAYMENT_TOTAL_CURRENT_p_sum','AMT_RECEIVABLE_PRINCIPAL_p_sum','AMT_RECIVABLE_p_sum','AMT_TOTAL_RECEIVABLE_p_sum',\n                         'CNT_DRAWINGS_POS_CURRENT_p_sum','AMT_BALANCE_A_max','AMT_CREDIT_LIMIT_ACTUAL_A_max','AMT_CREDIT_LIMIT_ACTUAL_A_min',\n                         'AMT_DRAWINGS_ATM_CURRENT_A_max','AMT_DRAWINGS_CURRENT_A_max','AMT_DRAWINGS_OTHER_CURRENT_A_max','AMT_DRAWINGS_POS_CURRENT_A_max',\n                         'AMT_INST_MIN_REGULARITY_A_max','AMT_PAYMENT_CURRENT_A_max','AMT_PAYMENT_TOTAL_CURRENT_A_max','AMT_RECEIVABLE_PRINCIPAL_A_max',\n                         'AMT_RECIVABLE_A_max','SK_DPD_A_max','SK_DPD_DEF_A_max']\n    df[logTransformation] = df[logTransformation].apply(lambda x : np.log(x+1),axis=1)\n    \n    sqrtTransformation = ['CNT_DRAWINGS_CURRENT_p_sum','CNT_INSTALMENT_MATURE_CUM_p_sum','CNT_DRAWINGS_ATM_CURRENT_A_max',\n                          'CNT_DRAWINGS_CURRENT_A_max','CNT_DRAWINGS_POS_CURRENT_A_max','CNT_INSTALMENT_MATURE_CUM_A_max']\n    df[sqrtTransformation] = df[sqrtTransformation].apply(lambda x: np.sqrt(np.abs(x)),axis=1)\n    return(df)","62e497b4":"#def getFinalDataSet():\n#application = transform_application(get_application_dataset())\n#bureau = transform_bureau(get_bureau_dataset())\n#previous_application = transform_previous_application(get_previous_application())\n#POS_CASH_balance = transform_POS_CASH_balance(get_POS_CASH_balance())\n#installment_payments = transform_installment_payments(get_installment_payments()) \n#credit_card_balance = transform_credit_card_balance(get_credit_card_balance())\n#dfs = [application, bureau, previous_application, POS_CASH_balance, installment_payments, credit_card_balance]\n#from functools import reduce\n#df = reduce(lambda left,right: pd.merge(left,right,on='SK_ID_CURR',how='left'), dfs)\n\n#feature = ['AMT_ANNUITY']\n#plotList = ['isTrain','isTest','TARGET']+feature\n#df = bureau.copy()\n#df[feature] = np.log(df[feature]+1)\n#df[feature] = np.log(np.abs(df[feature])+1)\n#df[feature] = np.sqrt(np.log(np.abs(df[feature])+1))\n#df[feature] = np.sqrt(np.abs(df[feature]))\n#plot_df(df.loc[:,plotList])\n\n#df = bureau.copy()\n#feature = ['AMT_CREDIT_SUM_DEBT_sum2AMT_ANNUITY_sum']\n#df['AMT_CREDIT_SUM_DEBT_sum2AMT_ANNUITY_sum'] = df['AMT_CREDIT_SUM_DEBT_sum']\/df['AMT_ANNUITY_sum']\n#df.replace([np.inf, -np.inf], np.nan,inplace=True)\n#plotList = ['isTrain','isTest','TARGET']+feature\n#df[feature] = np.log(df[feature]+1)\n#df[feature] = np.log(np.abs(df[feature])+1)\n#df[feature] = np.sqrt(np.log(np.abs(df[feature])+1))\n#df[feature] = np.sqrt(np.abs(df[feature]))\n#plot_df(df.loc[:,plotList])","efc6b897":"bureau_balance aggregation","52b9924d":"POS_CASH_balance before aggregation","369c56a4":"**Functions**\n\nmissing data","1495e597":"INSTALLMETS_PAYMENTS aggregation","fc7f1e92":"POS_CASH_balance transformation","b4bfe12b":"Target variable ","d856ffcb":"PREVIOUS_APPLICATION after aggregation","24cb5c2e":" Transfrom bureau","dc00b7ac":"Outlier remover","d0f5045a":"BUREAU after aggregation","13337181":"POS_CASH_balance  aggregation","f3d4794c":"What application_train\/test look like","b7625de7":"***BUREAU & BUREAU_BALANCE***\n\nAll the information about an applicant in the BUREAU is available in this table. It is required to do the aggregation in order to use them as features. There are two type of records. (Closed, Bad debt, Sold) or Active. So we need to aggregate accordinly.\n\nWhat does BUREAU look like ","b8e3cbfb":"Filtering \/one hote encoding\/ capping","2cc8325e":"CREDIT_CARD_BALANCE transformation","04d5ed74":"***POS_CASH_balance***","172234bf":"credit_card_balance before aggregation","f13983b6":"**Final DF**","7d4fb7da":"Plots","1fc17c74":"PREVIOUS_APPLICATION transfromation","28bec152":"Combining train and test","fb510d8f":"What does bureau_balance look like","9205c005":"CREDIT_CARD_BALANCE aggregation","394c6f78":"***CREDIT_CARD_BALANCE***","64bef583":"PREVIOUS_APPLICATION before aggregation","6122ceb4":"What application_train\/test look like after aggregation","74831c19":" ***APPLICATION_TRAIN***\n\nThis is the main file. \n* SK_ID_CURR is the ID of loan in our sample\n* Dimensions : Train : [ 307511 , 122 ] , test : [ 48744 , 121 ]","643fcc33":"POS_CASH_balance after aggregation","4bdc2758":"BUREAU & BUREAU_BALANCE aggregation","5b7985dd":"Transform APPLICATION","27026ec0":"CREDIT_CARD_BALANCE aggregation","75c4fae8":"INSTALLMETS_PAYMENTS before aggregation","c56c52d9":"***PREVIOUS_APPLICATION***","ccafd9a8":"PREVIOUS_APPLICATION aggregation","d24309f4":"***INSTALLMETS_PAYMENTS***","e0f0d1bb":"INSTALLMETS_PAYMENTS transformation","480185e0":"INSTALLMETS_PAYMENTS after aggregation","5643a3db":"chi squared test"}}