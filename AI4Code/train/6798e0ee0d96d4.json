{"cell_type":{"8c32536f":"code","0e21980f":"code","5ef8e360":"code","dd6fc42c":"code","eab072c6":"code","74cb5d78":"code","7c195bf1":"code","3107e4ef":"code","8f84e34f":"code","7ce3aeec":"code","1a97cc9d":"code","db736abe":"code","5c58cdce":"code","70c38f86":"code","84f4994f":"code","bff895fc":"code","8fa8bce1":"code","01e25a93":"code","c4763d72":"code","ea3d23f6":"code","7407b5e2":"code","d1462934":"code","31775519":"code","4871778d":"code","2a6c79d1":"code","e844f4bf":"code","38b4720b":"code","c74c3fc2":"code","9efc6de1":"code","31d2f1e7":"code","5c18ec14":"code","e43801f6":"code","40c0bdcc":"code","0af5f8c0":"code","1cc42d10":"code","a42f1dab":"code","e86b1dde":"code","1d83d90e":"code","3645e243":"code","56383f74":"code","4f67c1f1":"code","98b8eede":"code","7f77b376":"code","f3380b04":"code","2f67719c":"code","72b1fbfd":"code","c17014c4":"code","1a4ff113":"code","4a52dc64":"code","1b92a01a":"code","ae64b88b":"code","112f8f39":"code","66ef273a":"code","71d2f8b1":"code","1c0ce062":"markdown","0644c223":"markdown","877de09a":"markdown","8461d1a0":"markdown","b174e6b8":"markdown","105c6072":"markdown","b71db2c8":"markdown","c651cf59":"markdown","355ced96":"markdown","df60b5ea":"markdown","3b007d27":"markdown","63035a0d":"markdown","e1ef451d":"markdown","f1e3ff92":"markdown","ddae1788":"markdown","94ba12c3":"markdown","719631c4":"markdown","a6133682":"markdown","7f438b5a":"markdown","2216d5bb":"markdown","9eb2d8e3":"markdown","e229099d":"markdown","9ba38bf3":"markdown","fa9d949c":"markdown","5ca3e2d4":"markdown","b4924410":"markdown","23dc2113":"markdown","04266690":"markdown","2e51455a":"markdown"},"source":{"8c32536f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e21980f":"import seaborn as sns\nimport matplotlib.pyplot as plt","5ef8e360":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n# gender_submission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","dd6fc42c":"train_df.head()","eab072c6":"test_df.head()","74cb5d78":"train_df.describe()","7c195bf1":"test_df.describe()","3107e4ef":"print(\"Training model data\")\nfor ft in train_df.columns:\n    null_val = train_df[ft].isnull().sum()\n    s = train_df[ft].size\n    print(f\"Null values in {ft} are \", (null_val\/s)*100)\n    \nprint('==' * 50)\n\nprint(\"Testing model data\")\nfor ft in test_df.columns:\n    null_val = test_df[ft].isnull().sum()\n    s = test_df[ft].size\n    print(f\"Null values in {ft} are \", (null_val\/s)*100)","8f84e34f":"train_df.drop('Cabin', axis= 1, inplace=True)\ntest_df.drop('Cabin', axis= 1, inplace=True)","7ce3aeec":"print(\"Median of Age = \", train_df['Age'].median())\nprint(\"Mode of Age = \", train_df['Age'].mode())\nprint(\"Mode of Age = \", train_df.Age.mean())","1a97cc9d":"train_df['Age'].fillna(28, inplace=True)","db736abe":"print(\"Median of Age = \", test_df['Age'].median())\nprint(\"Mode of Age = \", test_df['Age'].mode())\nprint(\"mean of Age = \", test_df.Age.mean())","5c58cdce":"test_df['Age'].fillna(28, inplace=True)","70c38f86":"print(train_df['Embarked'].value_counts())\nprint('mode of Embarked = ', train_df['Embarked'].mode())","84f4994f":"train_df['Embarked'].fillna('S', inplace=True)","bff895fc":"print(\"Median of Fare = \", train_df['Fare'].median())\nprint(\"Mode of Fare = \", train_df['Fare'].mode())\nprint(\"Mean of Fare = \", train_df['Fare'].mean())","8fa8bce1":"test_df['Fare'].fillna(14.50, inplace=True)","01e25a93":"train_df.drop(['PassengerId', 'Name'], axis=1, inplace=True)\ntest_df.drop(['Name'], axis=1, inplace=True)","c4763d72":"train_df.drop('Ticket', axis=1, inplace=True)\ntest_df.drop('Ticket', axis=1, inplace=True)","ea3d23f6":"variables = ['Pclass','SibSp','Sex','Parch']\n\nfor v in variables:\n    print(train_df[[v, 'Survived']].groupby(v, as_index=False).mean().sort_values(by = 'Survived', ascending= False))\n    print('=='*30)","7407b5e2":"g = sns.FacetGrid(train_df, col= 'Survived')\ng.map(plt.hist, 'Age',)","d1462934":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', aspect=1.8)\ngrid.map(plt.hist, 'Age', bins=20)","31775519":"sex = {'male':0, 'female':1}\ntrain_df['Sex'] = train_df['Sex'].map(sex, )\ntest_df['Sex']=test_df['Sex'].map(sex,)","4871778d":"grid = sns.FacetGrid(train_df, row='Embarked', aspect = 1.8, height = 2)\ngrid.map(sns.pointplot, 'Pclass','Survived','Sex', palette='deep')\ngrid.add_legend()","2a6c79d1":"grid = sns.FacetGrid(train_df, row='Embarked',col='Survived', aspect= 1)\ngrid.map(sns.barplot, 'Sex','Fare',ci=None)","e844f4bf":"train_df['age_band'] = pd.cut(train_df['Age'], 5)\ntest_df['age_band'] = pd.cut(train_df['Age'], 5)","38b4720b":"train_df[['age_band','Survived']].groupby(['age_band'], as_index=False).mean().sort_values(by='age_band')","c74c3fc2":"combine = [train_df, test_df]\nfor dataset in combine:\n    dataset.loc[ dataset['Age'] <= 16, 'Age' ]= 0\n    dataset.loc[ (dataset['Age'] > 16) & (dataset['Age'] <=32), 'Age'] = 1\n    dataset.loc[ (dataset['Age'] > 32) & (dataset['Age'] <=48), 'Age'] = 2\n    dataset.loc[ (dataset['Age'] > 48) & (dataset['Age'] <=64), 'Age'] = 3\n    dataset.loc[ (dataset['Age'] > 64), 'Age']= 4","9efc6de1":"train_df['Age']=train_df['Age'].astype('int32')\ntest_df['Age']= test_df['Age'].astype('int32')","31d2f1e7":"train_df.head(10)","5c18ec14":"for dataset in combine:\n    dataset = dataset.drop('age_band', axis=1)","e43801f6":"for dataset in combine:\n    dataset['family_size'] = dataset['SibSp']+ dataset['Parch']\n    \ntrain_df.head()","40c0bdcc":"train_df[['family_size','Survived']].groupby('family_size', as_index=False).mean().sort_values(by='Survived', ascending=False)","0af5f8c0":"embarked = {'S':10,'C':20,\"Q\":30}\ntrain_df['Embarked'] = train_df['Embarked'].map(embarked)\ntest_df['Embarked'] = test_df['Embarked'].map(embarked)","1cc42d10":"train_df['fare_band'] = pd.qcut(train_df['Fare'], 4)\ntest_df['fare_band'] = pd.qcut(test_df['Fare'], 4)\ntrain_df[['fare_band','Survived']].groupby('fare_band',as_index=False).mean().sort_values(by= 'Survived')","a42f1dab":"for dataset in combine:\n    dataset.loc[dataset['Fare'] <= 7.91, 'Fare'] = 0 \n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31.0), 'Fare'] = 2\n    dataset.loc[(dataset['Fare'] > 31.00), 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype('int32')","e86b1dde":"train_df= train_df.drop(['age_band','fare_band'],axis=1)\ntest_df= test_df.drop(['age_band','fare_band'],axis=1)","1d83d90e":"train_df.head(10)","3645e243":"test_df.head()","56383f74":"X_train = train_df.drop('Survived', axis=1)\ny_train = train_df['Survived']\nX_test = test_df.drop('PassengerId',axis=1).copy()\n# y_test = ","4f67c1f1":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","98b8eede":"logreg= LogisticRegression(random_state= 1)\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, y_train) *100, 2)\nacc_log","7f77b376":"coeff_df = pd.DataFrame(train_df.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","f3380b04":"svc = SVC()\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, y_train) * 100, 2)\nacc_svc","2f67719c":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, y_train) * 100,2)\nacc_knn","72b1fbfd":"gausian = GaussianNB()\ngausian.fit(X_train, y_train)\ny_pred = gausian.predict(X_test)\nacc_gausian = round(gausian.score(X_train, y_train)*100, 2)\nacc_gausian","c17014c4":"perceptron = Perceptron()\nperceptron.fit(X_train, y_train)\ny_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, y_train)*100, 2)\nacc_perceptron","1a4ff113":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, y_train)\ny_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, y_train)*100, 2)\nacc_linear_svc","4a52dc64":"sgd = SGDClassifier()\nsgd.fit(X_train, y_train)\ny_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, y_train)*100, 2)\nacc_sgd","1b92a01a":"decision_tree = DecisionTreeClassifier(random_state=1)\ndecision_tree.fit(X_train, y_train)\ny_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, y_train)*100, 2)\nacc_decision_tree","ae64b88b":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\ny_pred = random_forest.predict(X_test)\nacc_random_forest = round(random_forest.score(X_train, y_train)*100, 2)\nacc_random_forest","112f8f39":"models = pd.DataFrame({\n    'model': ['support vector machine','KNN','LogisticRegression',\n             'RandomForest','Naive Bayes','Perceptron',\n             'Stochastic Gradient Decent','Linear SVC','Decision Tree'],\n    'score': [acc_svc,acc_knn,acc_log, acc_random_forest,\n             acc_gausian,acc_perceptron,acc_sgd,acc_linear_svc,\n             acc_decision_tree]\n})\n\nmodels.sort_values(by='score', ascending=False)","66ef273a":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": y_pred\n    })","71d2f8b1":"submission.to_csv('submission.csv', index=False)","1c0ce062":"Converting categorical data to ordinal data","0644c223":"## Creating new feature 'age_band'","877de09a":"## **Logistic regression**","8461d1a0":"## **Gausian Naive Bayes**","b174e6b8":"## Model Evaluation","105c6072":"## **Stochastic Gradient Descent**","b71db2c8":"# Analyze by visualization","c651cf59":"## **Perceptron**","355ced96":"**Infants in Pclass= 2, Pclass=3 mostly survived**\n**Most passengers in Pclass=1 survived**\n","df60b5ea":"## **Random Forest**","3b007d27":"## **Linear SVC**","63035a0d":"**Observations.**\n\n- Higher fare paying passengers had better survival.\n- Port of embarkation correlates with survival rates.\n- Female passengers had much better survival rate than males.\n- Exception in Embarked=C where males had higher survival rate. This could be a correlation between Pclass and Embarked and in turn Pclass and Survived, not necessarily direct correlation between Embarked and Survived.\n- Males had better survival rate in Pclass=3 when compared with Pclass=2 for C and Q ports.\n- Ports of embarkation have varying survival rates for Pclass=3 and among male passengers.","e1ef451d":"## Which Features has most likely has relationship to Survived?\n\n- Do Age matter? Which one kids, youth, old survived most?\n- Does it matter which ticket class did passenger have for their survival?\n- Does survived is affected by person being male or female?\n- Does survived is affected if a person had a spouse or siblings on board?\n- Does survived is affected if a person had chlidren or parents on board?\n- Does survived is affected by the amount of Fare person paid?\n- Does cabin number matter in survival of passenger?\n- Does Port of embarkation from where a passenger embarked influences survival of passenger?","f1e3ff92":"## **K Neighbors Classifiers**","ddae1788":"# Analyzing the relationship between survived, Pclass, SibSp, Sex, Parch","94ba12c3":"# Acquiring the data files","719631c4":"## Dropping the Cabin ~ 78% null values","a6133682":"- Passengers travelling alone has more probability of surviving and\n- Female passengers had high probability of surviving\n- SibSp and Parch has no direct relationship with survival, need to derive another feature from these 2.","7f438b5a":"### **Creating new feature 'family_size'**","2216d5bb":"## Null values found in features: 'Age', 'Fare', 'Cabin'","9eb2d8e3":"## Model, predict and solve\n\n- Logistic Regression\n- KNN or k-Nearest Neighbors\n- Support Vector Machines\n- Naive Bayes classifier\n- Decision Tree\n- Random Forrest\n- Perceptron\n- Artificial neural network\n- RVM or Relevance Vector Machine","e229099d":"# Describe the data","9ba38bf3":"## filling Embarked with median of Embarked","fa9d949c":"## **Support Vector Machines**","5ca3e2d4":"## **Decision Tree**","b4924410":"# Splitting data for testing and training","23dc2113":"# Dropping 'passengerid' and 'name' and 'Ticket' - has no relation to survived","04266690":"## Fill na of 'Fare' ","2e51455a":"## Filling Age feature na with median value"}}