{"cell_type":{"07b02408":"code","66f42620":"code","1078249a":"code","742733ea":"code","eb778fd0":"code","5ecb9a05":"code","6294fb0a":"code","2468370f":"code","3f059c95":"code","fd8ace32":"code","c68d1aa5":"code","5d73458c":"code","bf3978c8":"code","034069f1":"code","0ea1fc9e":"code","9cb39a29":"code","58ad3d6d":"code","a48d3663":"code","0a5df234":"code","55ec001b":"code","d66b552a":"code","925c5bba":"markdown","2517f85d":"markdown","c2b6ca57":"markdown","8e5e952d":"markdown","efed7f64":"markdown","095771f3":"markdown","1f9357ff":"markdown","8777a258":"markdown"},"source":{"07b02408":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split","66f42620":"car_sales_missing = pd.read_csv(\"\/kaggle\/input\/scikitconf\/car-sales-extended-missing-data.csv\")\ncar_sales_missing","1078249a":"car_sales_missing.isna().sum()","742733ea":"X = car_sales_missing.drop(\"Price\",axis=1)\ny = car_sales_missing[\"Price\"]","eb778fd0":"#converting categorical values to numerical\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\ncategorical_values = [\"Make\",\"Colour\",\"Doors\"]\nct = ColumnTransformer(transformers=[('encoder',OneHotEncoder(),categorical_values)],remainder='passthrough')\ntransformed_X = ct.fit_transform(X)","5ecb9a05":"car_sales_missing[\"Make\"].fillna(\"missing\",inplace=True)\ncar_sales_missing[\"Colour\"].fillna(\"missing\",inplace=True)\ncar_sales_missing[\"Odometer (KM)\"].fillna(car_sales_missing[\"Odometer (KM)\"].mean(),inplace=True)\ncar_sales_missing[\"Doors\"].fillna(4,inplace=True)","6294fb0a":"car_sales_missing.isna().sum()","2468370f":"car_sales_missing.dropna(inplace=True)","3f059c95":"car_sales_missing.isna().sum()","fd8ace32":"X = car_sales_missing.drop(\"Price\",axis=1)\ny = car_sales_missing[\"Price\"]","c68d1aa5":"#converting categorical values to numerical\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\ncategorical_values = [\"Make\",\"Colour\",\"Doors\"]\nct = ColumnTransformer(transformers=[('encoder',OneHotEncoder(),categorical_values)],remainder='passthrough')\ntransformed_X = ct.fit_transform(X)\ntransformed_X ","5d73458c":"car_sales_missing = pd.read_csv(\"\/kaggle\/input\/scikitconf\/car-sales-extended-missing-data.csv\")\ncar_sales_missing.isna().sum()","bf3978c8":"# removing missing values from target label\n\ncar_sales_missing.dropna(subset=[\"Price\"],inplace=True)\ncar_sales_missing.isna().sum()","034069f1":"#split into X and y\nX = car_sales_missing.drop(\"Price\",axis=1)\ny = car_sales_missing[\"Price\"]","0ea1fc9e":"# split into train and test data\nnp.random.seed(42)\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)","9cb39a29":"from sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\n\n# Fill the categorical values with 'missing' and numerical values with mean\n\ncat_imputer = SimpleImputer(strategy=\"constant\",fill_value=\"missing\")\ndoor_imputer = SimpleImputer(strategy=\"constant\",fill_value=4)\nnum_imputer = SimpleImputer(strategy=\"mean\")","58ad3d6d":"# Defining different columns'\n\ncat_features = [\"Make\",\"Colour\"]\ndoor_feature = [\"Doors\"]\nnum_features = [\"Odometer (KM)\"]","a48d3663":"imputer = ColumnTransformer([(\"cat_imputer\",cat_imputer,cat_features),\n                             (\"door_imputer\",door_imputer,door_feature),\n                             (\"num_imputer\",num_imputer,num_features)])\nfilled_X_train = imputer.fit_transform(X_train)\nfilled_X_test = imputer.transform(X_test)\nfilled_X_train","0a5df234":"#converting transformed data array into data frame\n\ncar_sales_filled_train = pd.DataFrame(filled_X_train,\n                                      columns=[\"Make\",\"Colour\",\"Doors\",\"Odometer (KM)\"])\n\ncar_sales_filled_test = pd.DataFrame(filled_X_test,\n                                     columns=[\"Make\",\"Colour\",\"Doors\",\"Odometer (KM)\"])","55ec001b":"# lets one hot encode the features\n\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\ncategorical_values = [\"Make\",\"Colour\",\"Doors\"]\nct = ColumnTransformer(transformers=[('encoder',OneHotEncoder(),categorical_values)],remainder='passthrough')\ntransformed_X_train = ct.fit_transform(car_sales_filled_train)\ntransformed_X_test = ct.transform(car_sales_filled_test)\ntransformed_X_train.toarray()","d66b552a":"# Fit the model\n\nnp.random.seed(42)\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor()\n\nmodel.fit(transformed_X_train,y_train)\nmodel.score(transformed_X_test,y_test)","925c5bba":"## Fill the missing data with pandas","2517f85d":"## Fill the missing data with Scikit-Learn","c2b6ca57":"## Choosing the Right estimators for your Problem\n\nScikit-Learn uses estimators as another term for machine learning algorithms or model.\n* Classification - predicting whether a sample is one thing or another\n* Regression - predicting a number","8e5e952d":"## car_sales data scikit learn workflow`","efed7f64":"Note: We split data into train & test to perform filling missing values on them separately.","095771f3":"## workflow of Scikit learn\n\n#0. Get the data ready\n#1. Pick a model (to suit the problem)\n#2. Fit the model to the training data and make a prediction\n#3. Evaluate the model\n#4. Improve through experimentation\n#5. Save the model and reload your trained model","1f9357ff":"# 2 ways to handle missing data\n#1. drop them\n#2. Imputation: Filling the missing value with some number.","8777a258":"## deal with missing values"}}