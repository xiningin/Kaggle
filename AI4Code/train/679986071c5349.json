{"cell_type":{"adad85be":"code","8d9d5f12":"code","91fd1b6b":"code","43a3412d":"code","8e0c9ff1":"code","706d2fe0":"code","8b6232f7":"code","0df8e456":"code","405feac2":"code","d8810a04":"code","164fe037":"code","12f5de41":"code","23c63f34":"code","7b14f043":"code","efaacecf":"code","880dfefd":"code","6e329d16":"code","b5e224ec":"code","f9a207d0":"code","cdd286ae":"code","26670602":"code","7d1df7b8":"code","5962828d":"code","f8bdf276":"code","04660fec":"code","97e67d42":"code","c73cf06a":"code","f6fbbbc8":"code","af7680e5":"code","e60c62f0":"code","63a90fc1":"code","8e7d5365":"code","b4481b29":"code","62467ec3":"code","7af8fde7":"code","430300f4":"code","09c400b0":"code","efb6e9d0":"code","83f38c24":"code","956cff87":"code","783f0735":"code","615b5f66":"code","279bd1c9":"code","3e58a2a4":"code","5bbd08f4":"code","a644176f":"code","6b127862":"code","724477c7":"code","c2df8477":"code","2a220801":"code","468391ee":"code","da68fac2":"code","290255ab":"code","9c1777c2":"code","805fb165":"code","f7f9981c":"code","42dc5f74":"code","9b4607a1":"code","9d909344":"code","1a4fe3b0":"code","9494fcb7":"code","448abee4":"code","4863558d":"code","fe0fd6b6":"code","31bb77de":"code","18f3b8af":"code","b2cee285":"code","2110c62e":"markdown","1c4d410d":"markdown","0c091816":"markdown","c7c3754d":"markdown","e3e3dda6":"markdown","501ab3a5":"markdown","4c963757":"markdown","7a9dbe96":"markdown","69dbef4c":"markdown","29f3d2a0":"markdown","d7671d6c":"markdown","3c5bd1f7":"markdown","557e52de":"markdown","ba53b4dd":"markdown","1936acd9":"markdown","4888f997":"markdown","f607fbe8":"markdown","be5cb54b":"markdown","4171c393":"markdown","dccf1701":"markdown","7f4d3b6e":"markdown","9b132f9d":"markdown","87ba29e7":"markdown","f815d57b":"markdown","9c9f67a7":"markdown","e5cdce5b":"markdown","1a71a81f":"markdown","008eac54":"markdown","7af15fdc":"markdown","c833ab11":"markdown","a1bc79ff":"markdown","12ed7293":"markdown","58ada2e4":"markdown","701ef0e0":"markdown","3f864445":"markdown","b996afd7":"markdown","01fa5899":"markdown","7f0679c7":"markdown","972a8e7e":"markdown","bcc4c36b":"markdown","2c584d4c":"markdown","2673f577":"markdown","6cf1bffc":"markdown","06df52eb":"markdown","987d058d":"markdown","c027f5f7":"markdown","94858a4c":"markdown","59fe47dd":"markdown","9fb2b7cc":"markdown","194c894b":"markdown","69578f96":"markdown","76de20df":"markdown","82d85d1e":"markdown","0c2546f5":"markdown","b0dc5ef3":"markdown"},"source":{"adad85be":"# c\u00e1c th\u01b0 vi\u1ec7n \u0111\u1ecdc,x\u1eed l\u00fd m\u00f4 h\u00ecnh, t\u00ednh to\u00e1n , tr\u1ef1c quan d\u1eef li\u1ec7u ,....\nimport pandas as pd \nimport numpy as np \nfrom sklearn.model_selection import train_test_split,cross_val_score,cross_val_predict\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.tree import DecisionTreeClassifier\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import *\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\nimport seaborn as sns\nfrom scipy.stats.mstats import winsorize\nimport re\nimport gc\nimport warnings\nwarnings.simplefilter(\"ignore\")\nplt.style.use('ggplot')\ncolor_pal = [x['color'] for x in plt.rcParams['axes.prop_cycle']]\nimport os\nimport sys\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline\nimport missingno as msno\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom tqdm import tqdm_notebook\nfrom sklearn.metrics import roc_auc_score,roc_curve,auc,confusion_matrix\nfrom sklearn.model_selection import RandomizedSearchCV\nimport gc\nfrom sklearn.preprocessing import LabelEncoder\nimport warnings\nwarnings.filterwarnings('ignore')","8d9d5f12":"#H\u00e0m gi\u1ea3m dung l\u01b0\u1ee3ng b\u1ed9 nh\u1edb \ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","91fd1b6b":"#\u0111\u1ecdc d\u1eef li\u1ec7u c\u00e1c t\u1ec7p\ntrain_transaction = pd.read_csv('..\/input\/ieee-fraud-detection\/train_transaction.csv')\ntest_transaction = pd.read_csv('..\/input\/ieee-fraud-detection\/test_transaction.csv')\ntrain_identity = pd.read_csv('..\/input\/ieee-fraud-detection\/train_identity.csv')\ntest_identity = pd.read_csv('..\/input\/ieee-fraud-detection\/test_identity.csv')\n#gi\u1ea3m b\u1ed9 nh\u1edb d\u1eef li\u1ec7u\ntrain_identity = reduce_mem_usage(train_identity)\ntrain_transaction = reduce_mem_usage(train_transaction)\ntest_identity = reduce_mem_usage(test_identity)\ntest_transaction = reduce_mem_usage(test_transaction)","43a3412d":"#k\u1ebft h\u1ee3p 2 t\u1eadp d\u1eef li\u1ec7u train v\u00e0 test \u0111\u1ec3 ti\u1ec7n cho vi\u1ec7c ph\u00e2n t\u00edch , x\u1eed l\u00fd , convert d\u1eef li\u1ec7u\ntrain = pd.merge(train_transaction, train_identity, on = 'TransactionID', how = 'left')\ntest = pd.merge(test_transaction, test_identity, on = 'TransactionID', how = 'left')","8e0c9ff1":"#in ra h\u00ecnh d\u1ea1ng c\u1ee7a c\u00e1c t\u1ec7p trong dataset\nprint(train_transaction.shape)\nprint(test_transaction.shape)\nprint(train_identity.shape) \nprint (test_identity.shape)","706d2fe0":"#in ra c\u00e1c th\u00f4ng tin c\u1ee7a train v\u00e0 test\nprint(train.info(), \"\\n\")\nprint(test.info(), \"\\n\")","8b6232f7":"train_transaction.sample(5) \n#hi\u1ec3n th\u1ecb 5 h\u00e0ng d\u1eef li\u1ec7u b\u1ea5t k\u1ef3 trong t\u1ec7p train_transaction\n","0df8e456":"test_transaction.sample(5) \n#hi\u1ec3n th\u1ecb 5 h\u00e0ng d\u1eef li\u1ec7u b\u1ea5t k\u1ef3 trong t\u1ec7p test_transaction\n","405feac2":"train_identity.sample(5) \n#hi\u1ec3n th\u1ecb 5 h\u00e0ng d\u1eef li\u1ec7u b\u1ea5t k\u1ef3 trong t\u1ec7p train_identity\n","d8810a04":"test_identity.sample(5) \n#hi\u1ec3n th\u1ecb 5 h\u00e0ng d\u1eef li\u1ec7u b\u1ea5t k\u1ef3 trong t\u1ec7p test_identity","164fe037":"#in ra c\u00e1c c\u1ed9t b\u1ecb \u0111\u00e1nh nh\u00e3n l\u1ed7i\ndef differentcolumns(traincols, testcols):\n    for i in traincols:\n        if i not in testcols:\n            print(i)\n            \ndifferentcolumns(train_identity.columns, test_identity.columns) ","12f5de41":"def missing_data(df,n=10,temp=80):\n    \n   # tr\u1ea3 v\u1ec1 c\u00e1c c\u1ed9t b\u1ecb m\u1ea5t m\u00e1t d\u1eef li\u1ec7u v\u00e0 t\u1ec9 l\u1ec7 m\u1ea5t m\u00e1t d\u1eef li\u1ec7u tr\u00ean ng\u01b0\u1ee1ng n\u00e0o \u0111\u00f3 .\n    \n    dff = (df.isnull().sum()\/df.shape[0])*100\n    dff = dff.reset_index()\n    dff.columns = ['column','percent']\n    dff = dff.sort_values(by=['percent'],ascending=False).reset_index(drop=True)\n    print(f'{df.isnull().any().sum()} columns : missing values.')\n    print(f'{dff[dff[\"percent\"] > temp].shape[0]} columns : missing percents than {temp}%')\n    if n:\n        return dff.head(n)\n    else:\n        return dff","23c63f34":"missing_data(train_transaction,temp=90)","7b14f043":"missing_data(test_transaction,temp=90)","efaacecf":"missing_data(train_identity,temp=90)","880dfefd":"missing_data(test_identity,temp=90)","6e329d16":"# l\u1ea5y c\u00e1c c\u1ed9t c\u00f3 t\u1ec9 l\u1ec7 missing data tr\u00ean 50%\ndf_missing = missing_data(train,n=None,temp=75)\nmissing_cols = df_missing['column']\nnan_dict = {}\nfor i in missing_cols:\n    count = train[i].isnull().sum()\n    try:\n        nan_dict[count].append(i)\n    except:\n        nan_dict[count] = [i]\n        \nfor k,v in nan_dict.items():\n    print(f'--------------------------------------------' )\n    print(f'NAN count = {k} percent: {(int(k)\/train.shape[0])*100} %')\n    print(v)","b5e224ec":"# v\u1ebd bi\u1ec3u \u0111\u1ed3 histogram cho c\u00e1c c\u1ed9t b\u1ecb missing data\nfigure(figsize=(15, 10))\n\nsns.barplot(y=train_transaction.isnull().sum().sort_values(ascending=False)\/len(train_transaction),\n            x=train_transaction.isnull().sum().sort_values(ascending=False).index,\n            palette = \"Spectral\")\ntitle(\"Percentage of Missing Values\", size=10)","f9a207d0":"# V\u1ebd bi\u1ec3u \u0111\u1ed3 pie graph cho thu\u1ed9c t\u00ednh IsFraud\n\nlabels = '1-Fraud', '0-Not Fraud'\nsizes = [len(train_transaction[train_transaction['isFraud'] == 1]), len(train_transaction[train_transaction['isFraud'] == 0])]\nexplode = (0.3, 0)  # explode 1st slice\n#train_transaction.groupby('isFraud')['isFraud'].count().plot(kind=\"bar\")\n# Plot\nplt.pie(sizes, autopct='%1.2f%%', shadow=False)\nplt.legend(labels)\nplt.axis()\nplt.show()","cdd286ae":"#bi\u1ec3u \u0111\u1ed3 barchart cho thu\u1ed9c t\u00ednh IsFraud\nfig, ax  = plt.subplots(figsize=(8, 5))\nsns.countplot(x='isFraud', data=train_transaction, ax=ax)\nax.set_title('Fraud Transaction', fontsize=18)\nax.set_xlabel('Is Fraud', fontsize=14)\nax.set_ylabel('Count', fontsize=14)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height,\n            f'{height\/train_transaction.shape[0] * 100:.2f}%',\n            ha='center', fontsize=12)","26670602":"#Bi\u1ec3u \u0111\u1ed3 histogram cho thu\u1ed9c t\u00ednh TransactionDT\nfig, ax = plt.subplots(figsize=(15,5))\nsns.distplot(train_transaction['TransactionDT'], kde=False, ax=ax, label='train')\nsns.distplot(test_transaction['TransactionDT'], kde=False, ax=ax, label='test')\nax.set_title('Training and Testset TransanctionDT distribution')\nax.set_ylabel('Frequency', fontsize=14)\nax.legend()","7d1df7b8":"#bi\u1ec3u \u0111\u1ed3 scatterplot cho thu\u1ed9c t\u00ednh TransactionDT\nplt.figure(figsize=(11,6))\nplt.subplot(1,2,1)\nsns.scatterplot(x=\"TransactionDT\",y=\"C1\",hue=\"isFraud\",palette=['#90EE90', '#FA8072'], data=train,alpha=0.7,hue_order=[0,1])\nplt.title('Train')\nplt.subplot(1,2,2)\nsns.scatterplot(x=\"TransactionDT\",y=\"C1\", color='#87CEFA', data=test[~test['C1'].isnull()])\nplt.title('Test')","5962828d":"#bi\u1ec3u \u0111\u1ed3 histogram cho thu\u1ed9c t\u00ednh TransactionAmt\nig, ax = plt.subplots(2, 2, figsize=(20, 15))\n\nfraud_amt = train_transaction[train_transaction['isFraud'] == 1]['TransactionAmt'].values\nnon_fraud_amt = train_transaction[train_transaction['isFraud'] == 0]['TransactionAmt'].values\n\nsns.distplot(np.log(fraud_amt), ax=ax[0][0], color='red')\nax[0][0].set_title(\"Log Transaction Amount-Fraud\")\nax[0][0].set_ylabel(\"Frequency\")\n\nsns.distplot(np.log(non_fraud_amt), ax=ax[0][1])\nax[0][1].set_title(\"Log Transaction Amount-Non_Fraud\")\nax[0][1].set_ylabel(\"Frequency\")\n\nsns.scatterplot(range(train_transaction[train_transaction['isFraud'] == 1].shape[0]),\n            np.sort(fraud_amt),\n            alpha=0.3,\n            color='red',\n            ax=ax[1][0])\nax[1][0].set_title(\"Transaction Amount ECDF-Fraud\")\nax[1][0].set_xlabel(\"index\")\nax[1][0].set_ylabel(\"Amount\")\n\nsns.scatterplot(range(train_transaction[train_transaction['isFraud'] == 0].shape[0]),\n            np.sort(non_fraud_amt),\n            alpha=0.3,\n            ax=ax[1][1])\nax[1][1].set_title(\"Transaction Amount ECDF-Non_Fraud\")\nax[1][1].set_xlabel(\"index\")\nax[1][1].set_ylabel(\"Amount\");","f8bdf276":"#bi\u1ec3u \u0111\u1ed3 scatterplot cho bi\u1ec3u \u0111\u1ed3 TransactionAmt\ncmap=sns.color_palette(\"RdBu\", n_colors=7)\nfig, ax = plt.subplots(figsize=(10,5))\nsns.scatterplot(x=train_transaction['TransactionDT'],\n                y=train_transaction['TransactionAmt'],\n                alpha=0.05,\n                color=cmap[6])\nax.set_title(\"Train Tansaction Amount by Time\")\nax.set_xlabel(\"TransactionDT\")\nax.set_ylabel(\"Amount in USD\")\nax.set_ylim(0, 6000)\n\nfraud_entries = train_transaction.loc[train_transaction['isFraud'] == 1]\nsns.scatterplot(x=fraud_entries['TransactionDT'],\n                y=fraud_entries['TransactionAmt'],\n                alpha=0.3,\n                color=cmap[0]);","04660fec":"# Bart chart cho s\u1ed1 l\u01b0\u1ee3ng c\u00e1c m\u00e3 trong Product CD\ntrain_transaction.groupby('ProductCD') \\\n    ['TransactionID'].count() \\\n    .sort_index() \\\n    .plot(kind='barh',\n          figsize=(15, 3),\n         title='Count of Observations by ProductCD')\nplt.show()","97e67d42":"# Bart chart cho s\u1ed1 l\u01b0\u1ee3ng c\u00e1c m\u00e3 b\u1ecb gian l\u1eadn trong Product CD\ntrain_transaction.groupby('ProductCD')['isFraud'] \\\n    .mean() \\\n    .sort_index() \\\n    .plot(kind='barh',\n          figsize=(15, 3),\n         title='Percentage of Fraud by ProductCD')\nplt.show()","c73cf06a":"#Bi\u1ec3u \u0111\u1ed3 histogram cho t\u1eebng card\nfig, ax = plt.subplots(4, figsize=(20, 20))\ncards_col = train_transaction[['card1', 'card2', 'card3', 'card5']].columns\nfor i, card in enumerate(cards_col):\n    sns.distplot(train_transaction[train_transaction['isFraud'] == 1][card],\n                 bins=50,\n                 ax=ax[i],\n                 label='Fraud')\n    sns.distplot(train_transaction[train_transaction['isFraud'] == 0][card],\n                 bins=50,\n                 ax=ax[i],\n                 label='No Fraud')\n    \n    ax[i].legend()\n    ax[i].set_title(str(card) + \" Distributions\")","f6fbbbc8":"#Bi\u1ec3u \u0111\u1ed3 histogram cho thu\u1ed9c t\u00ednh addr1 v\u00e0 addr2\ntrain_transaction['addr1'].plot(kind='hist', bins=500, figsize=(15, 2), title='addr1 distribution')\nplt.show()\ntrain_transaction['addr2'].plot(kind='hist', bins=500, figsize=(15, 2), title='addr2 distribution')\nplt.show()","af7680e5":"#bi\u1ec3u \u0111\u1ed3 correlation heatmap cho thu\u1ed9c t\u00ednh C1-C14\ncorr = train_transaction.iloc[:, 17:31].corr()\nfig, ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(corr, linewidths=.5, annot=True, ax=ax)","e60c62f0":"#bi\u1ec3u \u0111\u1ed3 correlation heatmap cho thu\u1ed9c t\u00ednh C1-C14 so s\u00e1nh v\u1edbi thu\u1ed9c t\u00ednh TransactionDT\nc_features = list(train_transaction.columns[17:31])\nfor i in c_features:\n    train_transaction.set_index('TransactionDT')[i] \\\n    .plot(style='.', title=f'Scatterplot between {i} and TransactionDT',\n          figsize=(10, 3))\n    test_transaction.set_index('TransactionDT')[i] \\\n    .plot(style='.', figsize=(10, 3))\n    plt.show()","63a90fc1":"#bi\u1ec3u \u0111\u1ed3 correlation heatmap cho thu\u1ed9c t\u00ednh D1-D15\nd_features = list(train_transaction.columns[31:46])\ncorr = train_transaction[d_features].fillna(-999).corr()\nfig, ax = plt.subplots(figsize=(16, 16))\nsns.heatmap(corr, linewidths=.5, annot=True, ax=ax);","8e7d5365":"#bi\u1ec3u \u0111\u1ed3 Scatterolot cho thu\u1ed9c t\u00ednh D1-D15 so s\u00e1nh v\u1edbi thu\u1ed9c t\u00ednh TransactionDT\nd_features = list(train_transaction.columns[31:46])\nfor i in d_features:\n    train_transaction.set_index('TransactionDT')[i].fillna(0) \\\n    .plot(style='.', title=f'Scatterplot between {i} and TransactionDT',\n          figsize=(10, 3))\n    test_transaction.set_index('TransactionDT')[i].fillna(0) \\\n    .plot(style='.', figsize=(10, 3))\n    plt.show()","b4481b29":"#bi\u1ec3u \u0111\u1ed3 Scatterolot cho thu\u1ed9c t\u00ednh V1-V339 so s\u00e1nh v\u1edbi thu\u1ed9c t\u00ednh TransactionDT\nv_features = list(train_transaction.columns[300:])\nfor i in v_features:\n    train_transaction.set_index('TransactionDT')[i].fillna(0) \\\n    .plot(style='.', title=f'Scatterplot between {i} and TransactionDT',\n          figsize=(10, 3))\n    test_transaction.set_index('TransactionDT')[i].fillna(0) \\\n    .plot(style='.', figsize=(10, 3))\n    plt.show()","62467ec3":"#bi\u1ec3u \u0111\u1ed3 correlation heatmap cho thu\u1ed9c t\u00ednh V1-V15 (V\u00ec 339 chi\u1ec1u l\u00e0 qu\u00e1 l\u1edbn kh\u00f3 c\u00f3 th\u1ec3 tr\u1ef1c quan h\u00f3a) \ncorr = train_transaction.iloc[:, 47:61].corr()\nfig, ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(corr, linewidths=.5, annot=True, ax=ax)","7af8fde7":"'''\n# Gi\u1ea3m b\u1ed9 nh\u1edb\ndef reduce_mem_usage(df, verbose=True):\n    #c\u00e1c lo\u1ea1i dtype\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: \n        print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df'''\n  ","430300f4":"'''train_identity = reduce_mem_usage(train_identity)\ntrain_transaction = reduce_mem_usage(train_transaction)\ntest_identity = reduce_mem_usage(test_identity)\ntest_transaction = reduce_mem_usage(test_transaction)'''","09c400b0":"#s\u1eeda c\u00e1c c\u1ed9t b\u1ecb g\u00e1n nh\u00e3n l\u1ed7i d\u1ef1a tr\u00ean ph\u1ea7n tr\u1ef1c quan ph\u00eda tr\u00ean\ntest_identity = test_identity.rename(columns={\"id-01\": \"id_01\", \"id-02\": \"id_02\", \"id-03\": \"id_03\",\n                             \"id-06\": \"id_06\", \"id-05\": \"id_05\", \"id-04\": \"id_04\",\n                             \"id-07\": \"id_07\", \"id-08\": \"id_08\", \"id-09\": \"id_09\",\n                             \"id-10\": \"id_10\", \"id-11\": \"id_11\", \"id-12\": \"id_12\",\n                             \"id-15\": \"id_15\", \"id-14\": \"id_14\", \"id-13\": \"id_13\",\n                             \"id-16\": \"id_16\", \"id-17\": \"id_17\", \"id-18\": \"id_18\",\n                             \"id-21\": \"id_21\", \"id-20\": \"id_20\", \"id-19\": \"id_19\",\n                             \"id-22\": \"id_22\", \"id-23\": \"id_23\", \"id-24\": \"id_24\",\n                             \"id-27\": \"id_27\", \"id-26\": \"id_26\", \"id-25\": \"id_25\",\n                             \"id-28\": \"id_28\", \"id-29\": \"id_29\", \"id-30\": \"id_30\",\n                             \"id-31\": \"id_31\", \"id-32\": \"id_32\", \"id-33\": \"id_33\",\n                             \"id-34\": \"id_34\", \"id-35\": \"id_35\", \"id-36\": \"id_36\",\n                             \"id-37\": \"id_37\", \"id-38\": \"id_38\"})\ntest_identity.head() ","efb6e9d0":"#xem c\u00f3 c\u00f2n c\u1ed9t n\u00e0o b\u1ecb l\u1ed7i n\u1eefa kh\u00f4ng\ndifferentcolumns(train_identity.columns, test_identity.columns) ","83f38c24":"train = train.drop('TransactionID', axis=1)\ntest = test.drop('TransactionID', axis=1)","956cff87":"gc.collect()","783f0735":"##k\u1ebft h\u1ee3p 2 t\u1eadp d\u1eef li\u1ec7u train v\u00e0 test \u0111\u1ec3 ti\u1ec7n cho vi\u1ec7c ph\u00e2n t\u00edch , x\u1eed l\u00fd , convert d\u1eef li\u1ec7u\ntrain = pd.merge(train_transaction, train_identity, on = 'TransactionID', how = 'left')\ntest = pd.merge(test_transaction, test_identity, on = 'TransactionID', how = 'left')","615b5f66":"#x\u00f3a c\u00e1c bi\u1ebfn kh\u00f4ng c\u1ea7n d\u00f9ng n\u1eefa\ndel train_identity, train_transaction, test_identity, test_transaction","279bd1c9":"# tr\u1ea3 v\u1ec1 c\u00e1c c\u1ed9t b\u1ecb m\u1ea5t m\u00e1t d\u1eef li\u1ec7u v\u00e0 t\u1ec9 l\u1ec7 m\u1ea5t m\u00e1t d\u1eef li\u1ec7u tr\u00ean ng\u01b0\u1ee1ng n\u00e0o \u0111\u00f3\ndef top_missing_cols(df,n=10,thresh=80):\n    dff = (df.isnull().sum()\/df.shape[0])*100\n    dff = dff.reset_index()\n    dff.columns = ['col','missing_percent']\n    dff = dff.sort_values(by=['missing_percent'],ascending=False).reset_index(drop=True)\n    print(f'There are {df.isnull().any().sum()} columns in this dataset with missing values.')\n    print(f'There are {dff[dff[\"missing_percent\"] > thresh].shape[0]} columns with missing percent values than {thresh}%')\n    if n:\n        return dff.head(n)\n    else:\n        return dff","3e58a2a4":"#l\u1ea5y t\u1ea5t c\u1ea3 c\u00e1c c\u1ed9t b\u1ecb m\u1ea5t m\u00e1t d\u1eef li\u1ec7u tr\u00ean 50%\ndf_missing = top_missing_cols(train,n=None,thresh=50)\nmissing_cols = df_missing['col']","5bbd08f4":"# T\u00f4i s\u1ebd l\u1ea5y t\u1ea5t c\u1ea3 c\u00e1c c\u1ed9t v\u00e0 nh\u00f3m ch\u00fang d\u1ef1a tr\u00ean t\u1ef7 l\u1ec7 ph\u1ea7n tr\u0103m c\u00f2n thi\u1ebfu\nnan_dict = {}\nfor col in missing_cols:\n    count = train[col].isnull().sum()\n    try:\n        nan_dict[count].append(col)\n    except:\n        nan_dict[count] = [col]\n        \nfor k,v in nan_dict.items():\n    print(f'#####' * 4)\n    print(f'NAN count = {k} percent: {(int(k)\/train.shape[0])*100} %')\n    print(v)","a644176f":"#T\u00ednh s\u1ef1 t\u01b0\u01a1ng quan gi\u1eefa c\u00e1c thu\u1ed9c t\u00ednh\ndef coorelation_analysis(cols,title='Coorelation Analysis',size=(12,12)):\n    cols = sorted(cols)\n    fig,axes = plt.subplots(1,1,figsize=size)\n    df_corr = train[cols].corr()\n    sns.heatmap(df_corr,annot=True,cmap='RdBu_r')\n    axes.title.set_text(title)\n    plt.show()","6b127862":"#T\u00ednh xem trong 1 group, c\u1ed9t n\u00e0o c\u00f3 nhi\u1ec1u gi\u00e1 tr\u1ecb duy nh\u1ea5t nhi\u1ec1u h\u01a1n th\u00ec \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i .C\u00e1c c\u1ed9t c\u00f2n l\u1ea1i x\u00f3a h\u1ebft\ndef reduce_groups(grps):\n    use = []\n    for col in grps:\n        max_unique = 0\n        max_index = 0\n        for i,c in enumerate(col):\n            n = train[c].nunique()\n            if n > max_unique:\n                max_unique = n\n                max_index = i\n        use.append(col[max_index])\n    return use","724477c7":"# D\u1ef1a tr\u00ean ph\u1ea7n tr\u1ef1c quan c\u0169ng nh\u01b0 c\u00e1c h\u00e0m \u0111\u00e1nh gi\u00e1 ,ta x\u1eed l\u00fd d\u1eef li\u1ec7u \ncat_cols = (['ProductCD'] + \n            ['card%d' % i for i in range(1, 7)] + \n            ['addr1', 'addr2', 'P_emaildomain', 'R_emaildomain'] + \n            ['M%d' % i for i in range(1, 10)] + \n            ['DeviceType', 'DeviceInfo'] +\n            ['id_%d' % i for i in range(12, 39)])\n\n\ntype_map = {c: str for c in cat_cols}\ntrain[cat_cols] = train[cat_cols].astype(type_map, copy=False)\ntest[cat_cols] = test[cat_cols].astype(type_map, copy=False)\n\n\nid_cols = ['TransactionID', 'TransactionDT']\ntarget = 'isFraud'\n\nnumeric_cols =  [\n    'TransactionAmt', 'dist1', 'dist2', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', \n    'C11', 'C12', 'C13', 'C14', 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9', 'D10', 'D11', \n    'D12', 'D13', 'D14', 'D15', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', \n    'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', \n    'V26', 'V27', 'V28', 'V29', 'V30', 'V31', 'V32', 'V33', 'V34', 'V35', 'V36', 'V37', 'V38', 'V39', \n    'V40', 'V41', 'V42', 'V43', 'V44', 'V45', 'V46', 'V47', 'V48', 'V49', 'V50', 'V51', 'V52', 'V53', \n    'V54', 'V55', 'V56', 'V57', 'V58', 'V59', 'V60', 'V61', 'V62', 'V63', 'V64', 'V65', 'V66', 'V67', \n    'V68', 'V69', 'V70', 'V71', 'V72', 'V73', 'V74', 'V75', 'V76', 'V77', 'V78', 'V79', 'V80', 'V81', \n    'V82', 'V83', 'V84', 'V85', 'V86', 'V87', 'V88', 'V89', 'V90', 'V91', 'V92', 'V93', 'V94', 'V95', \n    'V96', 'V97', 'V98', 'V99', 'V100', 'V101', 'V102', 'V103', 'V104', 'V105', 'V106', 'V107', 'V108', \n    'V109', 'V110', 'V111', 'V112', 'V113', 'V114', 'V115', 'V116', 'V117', 'V118', 'V119', 'V120', \n    'V121', 'V122', 'V123', 'V124', 'V125', 'V126', 'V127', 'V128', 'V129', 'V130', 'V131', 'V132', \n    'V133', 'V134', 'V135', 'V136', 'V137', 'V138', 'V139', 'V140', 'V141', 'V142', 'V143', 'V144', \n    'V145', 'V146', 'V147', 'V148', 'V149', 'V150', 'V151', 'V152', 'V153', 'V154', 'V155', 'V156', \n    'V157', 'V158', 'V159', 'V160', 'V161', 'V162', 'V163', 'V164', 'V165', 'V166', 'V167', 'V168', \n    'V169', 'V170', 'V171', 'V172', 'V173', 'V174', 'V175', 'V176', 'V177', 'V178', 'V179', 'V180', \n    'V181', 'V182', 'V183', 'V184', 'V185', 'V186', 'V187', 'V188', 'V189', 'V190', 'V191', 'V192', \n    'V193', 'V194', 'V195', 'V196', 'V197', 'V198', 'V199', 'V200', 'V201', 'V202', 'V203', 'V204', \n    'V205', 'V206', 'V207', 'V208', 'V209', 'V210', 'V211', 'V212', 'V213', 'V214', 'V215', 'V216', \n    'V217', 'V218', 'V219', 'V220', 'V221', 'V222', 'V223', 'V224', 'V225', 'V226', 'V227', 'V228', \n    'V229', 'V230', 'V231', 'V232', 'V233', 'V234', 'V235', 'V236', 'V237', 'V238', 'V239', 'V240', \n    'V241', 'V242', 'V243', 'V244', 'V245', 'V246', 'V247', 'V248', 'V249', 'V250', 'V251', 'V252', \n    'V253', 'V254', 'V255', 'V256', 'V257', 'V258', 'V259', 'V260', 'V261', 'V262', 'V263', 'V264', \n    'V265', 'V266', 'V267', 'V268', 'V269', 'V270', 'V271', 'V272', 'V273', 'V274', 'V275', 'V276', \n    'V277', 'V278', 'V279', 'V280', 'V281', 'V282', 'V283', 'V284', 'V285', 'V286', 'V287', 'V288', \n    'V289', 'V290', 'V291', 'V292', 'V293', 'V294', 'V295', 'V296', 'V297', 'V298', 'V299', 'V300', \n    'V301', 'V302', 'V303', 'V304', 'V305', 'V306', 'V307', 'V308', 'V309', 'V310', 'V311', 'V312', \n    'V313', 'V314', 'V315', 'V316', 'V317', 'V318', 'V319', 'V320', 'V321', 'V322', 'V323', 'V324', \n    'V325', 'V326', 'V327', 'V328', 'V329', 'V330', 'V331', 'V332', 'V333', 'V334', 'V335', 'V336', \n    'V337', 'V338', 'V339', 'id_01', 'id_02', 'id_03', 'id_04', 'id_05', 'id_06', 'id_07', 'id_08', \n    'id_09', 'id_10', 'id_11'\n]\n\n\nreduced_vcols = ['V1', 'V3', 'V4', 'V6', 'V8', 'V11', 'V13', 'V14', 'V17', 'V20', \n 'V23', 'V26', 'V27', 'V30', 'V36', 'V37', 'V40', 'V41', 'V44', 'V47', 'V48', 'V54', 'V56', 'V59', \n 'V62', 'V65', 'V67', 'V68', 'V70', 'V76', 'V78', 'V80', 'V82', 'V86', 'V88', 'V89', 'V91', 'V96', \n 'V98', 'V99', 'V104', 'V107', 'V108', 'V111', 'V115', 'V117', 'V120', 'V121', 'V123', 'V124', 'V127', \n 'V129', 'V130', 'V136', 'V138', 'V139', 'V142', 'V147', 'V156', 'V162', 'V165', 'V160', 'V166', 'V178',\n 'V176', 'V173', 'V182', 'V187', 'V203', 'V205', 'V207', 'V215', 'V169', 'V171', 'V175', 'V180', 'V185', \n 'V188', 'V198', 'V210', 'V209', 'V218', 'V223', 'V224', 'V226', 'V228', 'V229', 'V235', 'V240', 'V258', \n 'V257', 'V253', 'V252', 'V260', 'V261', 'V264', 'V266', 'V267', 'V274', 'V277', 'V220', 'V221', 'V234', \n 'V238', 'V250', 'V271', 'V294', 'V284', 'V285', 'V286', 'V291',\n 'V297', 'V303', 'V305', 'V307', 'V309', 'V310', 'V320', 'V281', 'V283', 'V289', 'V296', 'V301', 'V314', 'V332', 'V325', 'V335', 'V338']","c2df8477":"# x\u00f3a c\u00e1c d\u00f2ng c\u00f3 s\u1ef1 t\u01b0\u01a1ng quan cao  \ndrop_cols = [col for col in train.columns if col[0] == 'V' and col not in reduced_vcols]\n\nprint(f'dropping {len(drop_cols)} columns')\ntrain = train.drop(columns=drop_cols)\ntest = test.drop(columns=drop_cols)","2a220801":"#t\u00e1ch d\u1eef li\u1ec7u chu\u1ea9n b\u1ecb cho vi\u1ec7c hu\u1ea5n luy\u1ec7n\ny_train = train['isFraud']\nX_train = train.drop(columns=['isFraud'])\nX_test = test.copy()\n\nprint(X_train.shape)\nprint(X_test.shape)\ngc.collect()","468391ee":"# M\u00e3 h\u00f3a nh\u00e3n t\u1ea5t c\u1ea3 c\u00e1c c\u1ed9t categorical \nfor col in X_train.columns:\n    \n    if col in cat_cols:\n        dff = pd.concat([X_train[col],X_test[col]])\n        dff,_ = pd.factorize(dff,sort=True)\n        if dff.max()>32000: \n            print(col,'needs int32 datatype')\n            \n        X_train[col] = dff[:len(X_train)].astype('int16')\n        X_test[col] = dff[len(X_train):].astype('int16')","da68fac2":"rem_cols = []\nrem_cols.extend(['TransactionDT','TransactionID'])\n\ncols = [col for col in X_train.columns if col not in rem_cols]\nlen(cols)","290255ab":"# Scale c\u00e1c thu\u1ed9c t\u00ednh s\u1ed1\nfor col in cols:\n    if col not in cat_cols:\n      \n        dff = pd.concat([X_train[col],X_test[col]])\n        dff = (dff - dff.min())\/(dff.max() - dff.min())\n        dff.fillna(-1,inplace=True)\n\n        X_train[col] = dff[:len(X_train)]\n        X_test[col] = dff[len(X_train):]\n\ndel dff","9c1777c2":"gc.collect()","805fb165":"V_columns = [col for col in train.columns if re.search('^V\\d*', col)]\ntrain[V_columns] = train[V_columns].fillna(-1)\ntest[V_columns] = test[V_columns].fillna(-1)\n\nsc_V = MinMaxScaler()\nsc_V.fit(train[V_columns])\ntrain[V_columns] = sc_V.transform(train[V_columns])\ntest[V_columns] = sc_V.transform(test[V_columns])","f7f9981c":"pca = PCA(n_components = 3)\npca.fit(train[V_columns])\npca_V_train = pca.transform(train[V_columns])\npca_V_test = pca.transform(test[V_columns])\n\nnp.cumsum(pca.explained_variance_ratio_)","42dc5f74":"pca_V_train = pd.DataFrame(data = pca_V_train).add_prefix('pca_V')\ntrain = pd.concat([train, pca_V_train], ignore_index=False, sort=False, axis=1)\ntrain.drop(V_columns, axis=1, inplace=True)\n\npca_V_test = pd.DataFrame(data = pca_V_test).add_prefix('pca_V')\ntest = pd.concat([test, pca_V_test], ignore_index=False, sort=False, axis=1)\ntest.drop(V_columns, axis=1, inplace=True)","9b4607a1":"del pca_V_train, pca_V_test","9d909344":"train = train.drop('TransactionDT',axis=1)\ntest = test.drop('TransactionDT',axis=1)","1a4fe3b0":"train = reduce_mem_usage(train)\ntest = reduce_mem_usage(test)\n\ngc.collect()","9494fcb7":"#l\u01b0u d\u1eef li\u1ec7u\ntrain.to_pickle('.\/train_1.pkl') \ntest.to_pickle('.\/test_1.pkl')","448abee4":"#\u0111\u1ecdc d\u1eef li\u1ec7u\ntrain= pd.read_pickle('.\/train_1.pkl') \ntest= pd.read_pickle('.\/test_1.pkl')","4863558d":"train.head()","fe0fd6b6":"#chu\u1ea9n b\u1ecb d\u1eef li\u1ec7u v\u00e0 ch\u1ea1y m\u00f4 h\u00ecnh v\u1edbi c\u00e1c hyperparameter cho k\u1ebft qu\u1ea3 t\u1ed1t nh\u1ea5t\nx_train = X_train[cols]\nx_test = X_test[cols]\nidx_train = x_train.index[:int(x_train.shape[0]*0.75)]  \nidx_validation = x_train.index[int(x_train.shape[0]*0.75):]\n    \nprint(f'fitting model on {len(cols)} columns')\nclf = xgb.XGBClassifier( \n        n_estimators=2000,\n        max_depth=12, \n        learning_rate=0.02, \n        subsample=0.8,\n        colsample_bytree=0.4, \n        missing=-1, \n        eval_metric='auc',\n        tree_method='gpu_hist' \n          )\nmodel = clf.fit(x_train.loc[idx_train,cols], y_train[idx_train], \n            eval_set=[(x_train.loc[idx_validation,cols],y_train[idx_validation])],\n            verbose=50, early_stopping_rounds=100)","31bb77de":"#in ra k\u1ebft qu\u1ea3 AUC (ROC)\ny_train_pred = model.predict(x_train.iloc[idx_train])\ny_test_pred = model.predict(x_train.iloc[idx_validation])\n\ntrain_fpr, train_tpr, thresholds = roc_curve(y_train.iloc[idx_train], model.predict_proba(x_train.iloc[idx_train])[:,1])\ntest_fpr, test_tpr, thresholds = roc_curve(y_train.iloc[idx_validation], model.predict_proba(x_train.iloc[idx_validation])[:,1])\n\nprint('Area under train roc {}'.format(auc(train_fpr, train_tpr)))\nprint('Area under test roc {}'.format(auc(test_fpr, test_tpr)))","18f3b8af":"#in ra bi\u1ec3u \u0111\u1ed3 confusion matrix \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 \ntrain_cf = confusion_matrix(y_train.iloc[idx_train],y_train_pred)\nplt.figure(figsize=(7,5))\nsns.heatmap(train_cf,annot=True,annot_kws={\"size\": 16},fmt=\"0\")\nplt.title('Train confusion matrix')\nplt.show()\n\n\ncv_cf = confusion_matrix(y_train.iloc[idx_validation],y_test_pred)\nplt.figure(figsize=(7,5))\nsns.heatmap(cv_cf,annot=True,annot_kws={\"size\": 16},fmt=\"0\")\nplt.title('Test confusion matrix')\nplt.show()","b2cee285":"#t\u1ea1o file n\u1ea1p b\u00e0i tr\u00ean kaggle\ny_pred_test = model.predict_proba(x_test)[:,1]\nsubmission = pd.read_csv('..\/input\/ieee-fraud-detection\/sample_submission.csv')\nsubmission['isFraud'] = y_pred_test\nsubmission.to_csv('bai_nop_xgboost.csv',index=False)","2110c62e":"#**I.Ph\u00e2n t\u00edch d\u1eef li\u1ec7u**","1c4d410d":"# **6. M\u00e3 h\u00f3a nh\u00e3n**","0c091816":"#**4. IsFraud**","c7c3754d":"#**10. C1-C14**","e3e3dda6":"TransactionAmt l\u00e0 thu\u1ed9c t\u00ednh r\u1eddi r\u1ea1c bi\u1ec3u th\u1ecb s\u1ed1 ti\u1ec1n \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng USD .","501ab3a5":"- Nhi\u1ec1u gi\u00e1 tr\u1ecb c\u1ee7a card3 v\u00e0 card5 c\u00f3 t\u1ea7n s\u1ed1 th\u1ea5p .\n- Trong card3 th\u00ec hai gi\u00e1 tr\u1ecb 150 v\u00e0 185 l\u00e0 c\u00e1c gi\u00e1 tr\u1ecb th\u01b0\u1eddng xuy\u00ean nh\u1ea5t trong c\u1ed9t v\u00e0 c\u00f3 t\u1edbi c\u00f3 2,4% gian l\u1eadn khi c\u00f3 gi\u00e1 tr\u1ecb 150 v\u00e0 13% gian l\u1eadn khi c\u00f3 gi\u00e1 tr\u1ecb 185. Cho th\u1ea5y khi c\u00f3 2 gi\u00e1 tr\u1ecb 150 v\u00e0 185 trong thu\u1ed9c t\u00ednh card 3 th\u00ec t\u1ec9 l\u1ec7 l\u1eeba \u0111\u1ea3o l\u00e0 kh\u00e1 cao.\n- Trong card5, c\u00e1c gi\u00e1 tr\u1ecb th\u01b0\u1eddng g\u1eb7p nh\u1ea5t l\u00e0 226, 224, 166 v\u00e0 n\u00f3 \u0111\u1ea1i di\u1ec7n l\u00ean t\u1edbi 73% d\u1eef li\u1ec7u .","4c963757":"Transaction date l\u00e0 m\u1ed9t thu\u1ed9c t\u00ednh c\u00f3 th\u1eddi gian t\u1eeb m\u1ed1c m\u1ed9t th\u1eddi \u0111i\u1ec3m c\u1ee5 th\u1ec3 g\u1ed1c n\u00e0o \u0111\u00f3 v\u00e0 theo b\u00e0i \u0111\u0103ng kho\u1ea3ng th\u1eddi gian c\u1ee7a t\u1eadp d\u1eef li\u1ec7u l\u00e0 kho\u1ea3ng 1 n\u0103m .\u00a0V\u00ed d\u1ee5: 85700 c\u00f3 th\u1ec3 l\u00e0 85700 gi\u00e2y t\u1eeb m\u1ed9t th\u1eddi \u0111i\u1ec3m c\u1ee5 th\u1ec3, v\u00ed d\u1ee5 l\u00e0 t\u1eeb ng\u00e0y 05\/01\/2022 13:15:43 chi\u1ec1u.\u00a0\u1ede \u0111\u00e2y t\u00f4i mu\u1ed1n ki\u1ec3m tra xem li\u1ec7u thu \u0111\u01b0\u1ee3c trong train v\u00e0 test c\u00f3 li\u00ean t\u1ee5c theo th\u1eddi gian kh\u00f4ng. \u00a0\u0110i\u1ec1u n\u00e0y r\u1ea5t quan tr\u1ecdng \u0111\u1ed1i v\u1edbi vi\u1ec7c khi ph\u00e2n chia 2 t\u1eadp train-test ","7a9dbe96":" V l\u00e0 thu\u1ed9c t\u00ednh m\u00e0 Vesta thi\u1ebft k\u1ebf v\u1edbi c\u00e1c th\u00f4ng tin phong ph\u00fa, bao g\u1ed3m x\u1ebfp h\u1ea1ng, \u0111\u1ebfm v\u00e0 c\u00e1c quan h\u1ec7 th\u1ef1c th\u1ec3 kh\u00e1c, t\u00ednh n\u0103ng s\u1ed1 .Tuy v\u1eady r\u1ea5t nhi\u1ec1u t\u00ednh n\u0103ng V b\u1ecb thi\u1ebfu gi\u00e1 tr\u1ecb (NAN).","69dbef4c":"#**II. Covert, clean ,x\u1eed l\u00fd d\u1eef li\u1ec7u**","29f3d2a0":"Trong ph\u1ea7n tr\u00ean ta th\u1ea5y trong dataset c\u00f3 r\u1ea5t nhi\u1ec1u gi\u00e1 tr\u1ecb NAN . Vi\u1ec7c l\u1ea5y t\u1ea5t c\u1ea3 c\u00e1c c\u1ed9t l\u00e0 kh\u00f4ng c\u1ea7n thi\u1ebft.Remove collinear features (x\u00f3a c\u00e1c \u0111\u1eb7c tr\u01b0ng c\u00f3 t\u00ednh t\u01b0\u01a1ng \u0111\u1ed3ng cao) trong khung d\u1eef li\u1ec7u c\u00f3 h\u1ec7 s\u1ed1 t\u01b0\u01a1ng quan l\u1edbn h\u01a1n m\u1ed9t ng\u01b0\u1ee1ng nh\u1ea5t \u0111\u1ecbnh . Vi\u1ec7c lo\u1ea1i b\u1ecf c\u00e1c \u0111\u1eb7c tr\u01b0ng n\u00e0y c\u00f3 th\u1ec3 gi\u00fap m\u00f4 h\u00ecnh t\u1ed5ng qu\u00e1t h\u00f3a v\u00e0 c\u1ea3i thi\u1ec7n kh\u1ea3 n\u0103ng di\u1ec5n gi\u1ea3i c\u1ee7a m\u00f4 h\u00ecnh.\n\nC\u00e1ch gi\u1ea3m s\u1ed1 l\u01b0\u1ee3ng c\u1ed9t d\u1ef1a tr\u00ean s\u1ed1 l\u01b0\u1ee3ng gi\u00e1 tr\u1ecb NaN v\u00e0 coorelation:\n\n- Nh\u00f3m c\u00e1c c\u1ed9t d\u1ef1a tr\u00ean s\u1ed1 l\u01b0\u1ee3ng gi\u00e1 tr\u1ecb b\u1ecb thi\u1ebfu V\u00ed d\u1ee5: n\u1ebfu c\u00f3 4 columsn v1, v2, v3 v\u00e0 v4. N\u1ebfu v1 v\u00e0 v3 c\u00f3 56 gi\u00e1 tr\u1ecb b\u1ecb thi\u1ebfu v\u00e0 v2 c\u00f3 21 v\u00e0 v4 c\u00f3 5 gi\u00e1 tr\u1ecb b\u1ecb thi\u1ebfu, ch\u00fang ta c\u00f3 3 nh\u00f3m ['v1', 'v3'], ['v2'] v\u00e0 ['v4'] cho m\u1ed7i nh\u00f3m: 2.1] \u0110\u1ed1i v\u1edbi m\u1ed7i c\u1ed9t trong nh\u00f3m \u0111\u00f3, h\u00e3y t\u00ecm h\u1ec7 s\u1ed1 coorelation v\u1edbi c\u00e1c c\u1ed9t kh\u00e1c v\u00e0 ch\u1ec9 l\u1ea5y c\u00e1c c\u1ed9t c\u00f3 h\u1ec7 s\u1ed1 coorelation> 0,75.\n- L\u1ea5y danh s\u00e1ch l\u1edbn nh\u1ea5t v\u1edbi c\u00e1c \u0111\u1ea1i l\u01b0\u1ee3ng chung l\u00e0m nh\u00f3m con. M\u1ed7i nh\u00f3m ch\u1ee9a m\u1ed9t s\u1ed1 nh\u00f3m con V\u00ed d\u1ee5: n\u1ebfu ch\u00fang ta c\u00f3 [[v1, v2], [v6], [v1, v4, v2, v5], [v5, v4] ], \u0111\u1ea7u ra c\u1ee7a ch\u00fang t\u00f4i s\u1ebd l\u00e0 [[v1, v2, v4, v5], [v6]]\n- B\u00e2y gi\u1edd t\u1eeb m\u1ed7i nh\u00f3m con, h\u00e3y ch\u1ecdn c\u1ed9t c\u00f3 nhi\u1ec1u gi\u00e1 tr\u1ecb \u0111\u1eb7c bi\u1ec7t nh\u1ea5t .\n- V\u00ed d\u1ee5: trong nh\u00f3m con [v1, v2, v4, v5], h\u00e3y \u0111\u1ec3 v2 c\u00f3 h\u1ea7u h\u1ebft c\u00e1c gi\u00e1 tr\u1ecb duy nh\u1ea5t \u0111\u1ec3 \u0111\u1ea7u ra c\u1ee7a ch\u00fang ta tr\u1edf th\u00e0nh [v2, v6]","d7671d6c":"V\u1edbi m\u1ed7i t\u1ec7p d\u1eef li\u1ec7u ta s\u1ebd xem x\u00e9t h\u00ecnh d\u1ea1ng c\u1ee7a c\u00e1c t\u1ec7p d\u1eef li\u1ec7u:","3c5bd1f7":"# **4. Feature  Engineering**","557e52de":"#**5.Transaction Date**","ba53b4dd":"- Nh\u1eefng c\u1ed9t b\u1ecb l\u1ec7ch,\u0111\u00e1nh label l\u1ed7i gi\u1eefa t\u1eadp train_identity ,test_identity .","1936acd9":"- H\u00ecnh d\u1ea1ng c\u1ee7a c\u00e1c t\u1ec7p l\u00e0 kh\u00e1 l\u1edbn khi dung l\u01b0\u1ee3ng c\u1ee7a t\u1eadp train r\u1ea5t l\u1edbn l\u00ean t\u1edbi 650MB v\u00e0 t\u1eadp test c\u0169ng r\u1ea5t l\u1edbn l\u00ean t\u1edbi 565MB .\n- C\u00f3 s\u1ef1 kh\u00e1c nhau gi\u1eefa h\u00ecnh d\u1ea1ng c\u00e1c t\u1ec7p train v\u00e0 test c\u0169ng nh\u01b0 c\u00e1c c\u1ed9t d\u1eef li\u1ec7u c\u00f3 gi\u00e1 tr\u1ecb NaN r\u1ea5t nhi\u1ec1u .\n- Qua hai \u00fd tr\u00ean, cho th\u1ea5y \u0111ang c\u00f3 d\u1eef li\u1ec7u b\u1ecb m\u1ea5t m\u00e1t (missing data ) c\u0169ng nh\u01b0 c\u00e1c c\u1ed9t b\u1ecb l\u1ec7ch nhau .","4888f997":"- Ta th\u1ea5y c\u00e1c gi\u00e1 tr\u1ecb 299, 325, 204, 264,)x\u1ea3y ra th\u01b0\u1eddng xuy\u00ean h\u01a1n b\u1ea5t k\u1ef3 gi\u00e1 tr\u1ecb n\u00e0o kh\u00e1c .\n- Ta th\u1ea5y ph\u1ea7n tr\u0103m gian l\u1eadn d\u01b0\u1eddng nh\u01b0 cho th\u1ea5y r\u1eb1ng c\u00e1c nh\u00f3m t\u1ea7n su\u1ea5t th\u1ea5p h\u01a1n c\u00f3 ph\u1ea7n tr\u0103m gian l\u1eadn cao h\u01a1n c\u00e1c gi\u00e1 tr\u1ecb t\u1ea7n su\u1ea5t cao h\u01a1n .\n- Ta th\u1ea5y c\u00f3 kh\u00e1 nhi\u1ec1u \u0111i\u1ec3m \u0111\u00e1ng l\u01b0u \u00fd .Th\u1ee9 nh\u1ea5t ,gi\u00e1 tr\u1ecb 87 chi\u1ebfm kho\u1ea3ng 88% t\u1ed5ng s\u1ed1 giao d\u1ecbch. Ngo\u00e0i ra, gi\u00e1 tr\u1ecb 87 chi\u1ebfm 96% t\u1ed5ng s\u1ed1 ti\u1ec1n giao d\u1ecbch b\u1eb1ng USD.Th\u1ee9 hai,gi\u1ed1ng nh\u01b0 v\u1edbi Addr1, c\u00f3 v\u1ebb nh\u01b0 c\u00e1c nh\u00f3m t\u1ea7n su\u1ea5t th\u1ea5p h\u01a1n c\u00f3 t\u1ef7 l\u1ec7 gian l\u1eadn cao h\u01a1n. \u0110\u1eb7c bi\u1ec7t l\u00e0 gi\u00e1 tr\u1ecb 65,0, n\u00f3 ch\u1ec9 c\u00f3 kho\u1ea3ng 0,01% m\u1ee5c nh\u1eadp nh\u01b0ng v\u1edbi t\u1ef7 l\u1ec7 gian l\u1eadn l\u00e0 53%.","f607fbe8":"ProductCD l\u00e0 m\u00e3 s\u1ea3n ph\u1ea9m \u0111\u01b0\u1ee3c li\u00ean k\u1ebft v\u1edbi m\u1ed7i giao d\u1ecbch.\n\nW l\u00e0 gi\u00e1 tr\u1ecb th\u01b0\u1eddng xuy\u00ean nh\u1ea5t, ti\u1ebfp theo l\u00e0 C v\u00e0 R.\nT\u1ef7 l\u1ec7 gian l\u1eadn trong s\u1ea3n ph\u1ea9m C l\u00e0 cao nh\u1ea5t, ti\u1ebfp theo l\u00e0 S v\u00e0 H.","be5cb54b":"V\u1edbi r\u1ea5t nhi\u1ec1u \u0111\u1eb7c tr\u01b0ng, hi\u1ec7u su\u1ea5t c\u1ee7a thu\u1eadt to\u00e1n c\u1ee7a b\u1ea1n s\u1ebd gi\u1ea3m s\u00fat nghi\u00eam tr\u1ecdng. PCA l\u00e0 m\u1ed9t c\u00e1ch r\u1ea5t ph\u1ed5 bi\u1ebfn \u0111\u1ec3 t\u0103ng t\u1ed1c thu\u1eadt to\u00e1n H\u1ecdc m\u00e1y b\u1eb1ng c\u00e1ch lo\u1ea1i b\u1ecf c\u00e1c bi\u1ebfn t\u01b0\u01a1ng quan kh\u00f4ng \u0111\u00f3ng g\u00f3p trong b\u1ea5t k\u1ef3 qu\u00e1 tr\u00ecnh ra quy\u1ebft \u0111\u1ecbnh n\u00e0o. Th\u1eddi gian \u0111\u00e0o t\u1ea1o c\u00e1c thu\u1eadt to\u00e1n gi\u1ea3m \u0111\u00e1ng k\u1ec3 v\u1edbi s\u1ed1 l\u01b0\u1ee3ng t\u00ednh n\u0103ng \u00edt h\u01a1n. Ngo\u00e0i ra, Overfitting ch\u1ee7 y\u1ebfu x\u1ea3y ra khi c\u00f3 qu\u00e1 nhi\u1ec1u bi\u1ebfn trong t\u1eadp d\u1eef li\u1ec7u. V\u00ec v\u1eady, PCA gi\u00fap kh\u1eafc ph\u1ee5c v\u1ea5n \u0111\u1ec1 trang b\u1ecb qu\u00e1 m\u1ee9c b\u1eb1ng c\u00e1ch gi\u1ea3m s\u1ed1 l\u01b0\u1ee3ng t\u00ednh n\u0103ng. V\u00ec v\u1eady, n\u1ebfu k\u00edch th\u01b0\u1edbc \u0111\u1ea7u v\u00e0o qu\u00e1 cao, th\u00ec vi\u1ec7c s\u1eed d\u1ee5ng PCA \u0111\u1ec3 t\u0103ng t\u1ed1c thu\u1eadt to\u00e1n l\u00e0 m\u1ed9t l\u1ef1a ch\u1ecdn h\u1ee3p l\u00fd. V\u00ec v\u1eady, ch\u00fang ta c\u00f3 th\u1ec3 b\u1ecf qua d\u1eef li\u1ec7u b\u1eb1ng c\u00e1ch \u00e1p d\u1ee5ng PCA cho t\u1ea5t c\u1ea3 d\u1eef li\u1ec7u \u0111\u1ec3 gi\u1ea3m s\u1ed1 c\u1ed9t \/ b\u1ed9 nh\u1edb.","4171c393":"- **MSV : 19021324**\n- **Public score :92.05%%**\n- **Private score :89.88%**","dccf1701":"# **IV.T\u1ea1o file n\u1ea1p b\u00e0i**\n","7f4d3b6e":"- C\u00e1c c\u1ed9t nh\u01b0 id_21,id_22,id_23,id_24,id_25,id_26,id_27, id_07,id_08 c\u00f3 t\u1ec9 l\u1ec7 m\u1ea5t m\u00e1t d\u1eef li\u1ec7u r\u1ea5t l\u1edbn(tr\u00ean 96%) .\n- Vi\u1ec7c x\u1eed l\u00fd d\u1eef li\u1ec7u b\u1ecb thi\u1ebfu l\u00e0 r\u1ea5t quan tr\u1ecdng trong qu\u00e1 tr\u00ecnh ti\u1ec1n x\u1eed l\u00fd t\u1eadp d\u1eef li\u1ec7u v\u00ec nhi\u1ec1u thu\u1eadt to\u00e1n h\u1ecdc m\u00e1y kh\u00f4ng h\u1ed7 tr\u1ee3 c\u00e1c gi\u00e1 tr\u1ecb b\u1ecb thi\u1ebfu.","9b132f9d":"# **5.Chu\u1ea9n b\u1ecb d\u1eef li\u1ec7u cho vi\u1ec7c hu\u1ea5n luy\u1ec7n**","87ba29e7":"#**3.D\u1eef li\u1ec7u b\u1ecb m\u1ea5t m\u00e1t (missing data)**","f815d57b":"#**1.T\u1ed5ng quan d\u1eef li\u1ec7u**","9c9f67a7":"#**2.D\u1eef li\u1ec7u b\u1ecb g\u00e1n nh\u00e3n l\u1ed7i trong t\u1eadp test_identity**","e5cdce5b":"# **3. N\u1ed1i d\u1eef li\u1ec7u t\u1ec7p Transaction v\u00e0 Identity Data:**","1a71a81f":"# **2. S\u1eeda c\u00e1c c\u1ed9t b\u1ecb \u0111\u00e1nh nh\u00e3n l\u1ed7i**","008eac54":"#**1.XGBoost**\n","7af15fdc":"#**11. D1-D15**","c833ab11":"Th\u00eam c\u00e1c th\u01b0 vi\u1ec7n v\u00e0 packages c\u1ea7n thi\u1ebft","a1bc79ff":"- Ph\u00e2n b\u1ed1 c\u1ee7a histogram l\u00e0 ph\u00e2n b\u1ed1 d\u1ea1ng r\u0103ng l\u01b0\u1ee3c (comb) cho th\u1ea5y c\u00f3 nh\u1eefng kho\u1ea3ng th\u1eddi gian th\u00ec s\u1ed1 ng\u01b0\u1eddi giao d\u1ecbch t\u0103ng \u0111\u1ed9t bi\u1ebfn c\u0169ng nh\u01b0 s\u1ed1 l\u01b0\u1ee3ng giao d\u1ecbch d\u1ef1a v\u00e0o y\u1ebfu t\u1ed1 ch\u1ee7 quan c\u1ee7a ng\u01b0\u1eddi ti\u00eau d\u00f9ng l\u00e0 ch\u1ee7 y\u1ebfu .\n- Th\u1eddi gian giao d\u1ecbch c\u1ee7a t\u1eadp train v\u00e0 test kh\u00f4ng tr\u00f9ng l\u1eb7p, \u0111i\u1ec1u n\u00e0y cho th\u1ea5y t\u1eadp train v\u00e0 test \u0111\u01b0\u1ee3c ph\u00e2n chia theo th\u1eddi gian. Ngo\u00e0i ra, c\u00f3 kho\u1ea3ng c\u00e1ch m\u1ed9t th\u00e1ng gi\u1eefa \u0111\u00e0o t\u1ea1o v\u00e0 t\u1eadp ki\u1ec3m tra.\u0110i\u1ec1u \u0111\u00f3 c\u00f3 ngh\u0129a l\u00e0 d\u1eef li\u1ec7u \u0111\u00e0o t\u1ea1o ph\u1ea3i t\u1eeb m\u1ed9t kho\u1ea3ng th\u1eddi gian tr\u01b0\u1edbc \u0111\u00f3 v\u00e0 d\u1eef li\u1ec7u ki\u1ec3m tra ph\u1ea3i t\u1eeb m\u1ed9t kho\u1ea3ng th\u1eddi gian sau \u0111\u00f3.\n- T\u1eeb bi\u1ec3u \u0111\u1ed3 scatterplot ta c\u00f3 th\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c c\u00e1c \u0111i\u1ec3m ngo\u1ea1i l\u1ec7 (outlier) v\u00e0 xem x\u00e9t \u0111\u01b0\u1ee3c nh\u1eefng \u0111i\u1ec3m c\u1ea7n ch\u00fa \u00fd.","12ed7293":"L\u00e0m vi\u1ec7c v\u1edbi d\u1eef li\u1ec7u l\u1edbn trong khi \u0111\u00e0o t\u1ea1o m\u00f4 h\u00ecnh ML y\u00eau c\u1ea7u b\u1ed9 nh\u1edb RAM l\u1edbn. \u0110\u1ec3 kh\u1eafc ph\u1ee5c h\u1ea1n ch\u1ebf n\u00e0y, ta s\u1eed d\u1ee5ng m\u1ed9t h\u00e0m \u0111\u1ec3 gi\u1ea3m dung l\u01b0\u1ee3ng b\u1ed9 nh\u1edb c\u1ee7a d\u1eef li\u1ec7u. C\u00e1ch ti\u1ebfp c\u1eadn chung l\u00e0 chuy\u1ec3n \u0111\u1ed5i lo\u1ea1i dtype c\u1ee7a t\u1eebng t\u00ednh n\u0103ng ('int16', 'int32', 'int64', 'float16', 'float32', 'float64') th\u00e0nh lo\u1ea1i dtype th\u1ea5p nh\u1ea5t c\u00f3 th\u1ec3.","58ada2e4":"# **1. Gi\u1ea3m b\u1ed9 nh\u1edb**","701ef0e0":"#**8.Card features**","3f864445":"- T\u1eeb bi\u1ec3u \u0111\u1ed3 correlation heatmap ta c\u00f3 th\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c r\u00f5 r\u00e0ng v\u00e0 chi ti\u1ebft s\u1ef1 t\u01b0\u01a1ng quan gi\u1eefa c\u00e1c thu\u1ed9c t\u00ednh v\u1edbi nhau. T\u1ed3n t\u1ea1i m\u1ed1i t\u01b0\u01a1ng quan ch\u1eb7t ch\u1ebd (> 0,9) gi\u1eefa nhi\u1ec1u thu\u1ed9c t\u00ednh . N\u1ebfu c\u00f3 th\u1ec3 t\u1ed1t h\u01a1n h\u1ebft ta n\u00ean gi\u1ea3m s\u1ed1 l\u01b0\u1ee3ng c\u00e1c t\u00ednh n\u0103ng n\u00e0y v\u00ec n\u00f3 c\u00f3 th\u1ec3 l\u00e0m gi\u1ea3m \u0111\u1ed9 ph\u1ee9c t\u1ea1p t\u00ednh to\u00e1n c\u1ee7a m\u00f4 h\u00ecnh..\u0110\u00e2y l\u00e0 th\u00f4ng tin ch\u1ee7 y\u1ebfu \u0111\u1ec3 gi\u00fap t\u00f4i gi\u1ea3m chi\u1ec1u d\u1eef li\u1ec7u trong ph\u1ea7n sau .\n- T\u1eeb bi\u1ec3u \u0111\u1ed3 scatterplot c\u1ee7a V1-V339 , ta c\u00f3 th\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c li\u1ec7u c\u00f3 s\u1ef1 t\u01b0\u01a1ng t\u1ef1 gi\u1eefa h\u00ecnh d\u1ea1ng c\u0169ng nh\u01b0 ph\u00e2n b\u1ed1 c\u1ee7a V1-V339 v\u1edbi \u201cTransactionDT\u201d. \u0110\u00e2y l\u00e0 th\u00f4ng tin quan tr\u1ecdng \u0111\u1ec3 \u0111\u00e1ng gi\u00e1 xem t\u1ea1i sao l\u1ea1i c\u00f3 s\u1ef1 kh\u00e1c nhau \u0111\u00f3 v\u00e0 \u0111i\u1ec1u \u0111\u00f3 th\u1ec3 hi\u1ec7n \u0111i\u1ec1u g\u00ec.","b996afd7":"- T\u1eeb bi\u1ec3u \u0111\u1ed3 correlation heatmap ta c\u00f3 th\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c r\u00f5 r\u00e0ng v\u00e0 chi ti\u1ebft s\u1ef1 t\u01b0\u01a1ng quan gi\u1eefa c\u00e1c thu\u1ed9c t\u00ednh v\u1edbi nhau.\u0110\u00e2y l\u00e0 th\u00f4ng tin ch\u1ee7 y\u1ebfu \u0111\u1ec3 gi\u00fap t\u00f4i gi\u1ea3m chi\u1ec1u d\u1eef li\u1ec7u trong ph\u1ea7n sau .\n- T\u1eeb bi\u1ec3u \u0111\u1ed3 scatterplot c\u1ee7a D1-D15 , ta c\u00f3 th\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c li\u1ec7u c\u00f3 s\u1ef1 t\u01b0\u01a1ng t\u1ef1 gi\u1eefa h\u00ecnh d\u1ea1ng c\u0169ng nh\u01b0 ph\u00e2n b\u1ed1 c\u1ee7a D1-D15 v\u1edbi \u201cTransactionDT\u201d.\u0110\u00e2y l\u00e0 th\u00f4ng tin quan tr\u1ecdng \u0111\u1ec3 \u0111\u00e1ng gi\u00e1 xem t\u1ea1i sao l\u1ea1i c\u00f3 s\u1ef1 kh\u00e1c nhau \u0111\u00f3 v\u00e0 \u0111i\u1ec1u \u0111\u00f3 th\u1ec3 hi\u1ec7n \u0111i\u1ec1u g\u00ec.","01fa5899":"H\u1ea7u h\u1ebft c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a 'TransactionID' l\u00e0 unique n\u00ean n\u00f3 s\u1ebd kh\u00f4ng mang l\u1ea1i th\u00f4ng tin g\u00ec.V\u1eady n\u00ean ta s\u1ebd b\u1ecf n\u00f3","7f0679c7":"# **III. : Model  s\u1eed d\u1ee5ng, h\u00ecnh \u1ea3nh , s\u1ed1 li\u1ec7u**","972a8e7e":"#**6.TransactionAmt**","bcc4c36b":"D1-D15: d\u1eef li\u1ec7u timedelta , ch\u1eb3ng h\u1ea1n nh\u01b0 ng\u00e0y gi\u1eefa giao d\u1ecbch tr\u01b0\u1edbc \u0111\u00f3, v.v.","2c584d4c":"# **\u0110\u1ecdc d\u1eef li\u1ec7u v\u00e0 hi\u1ec7n th\u1ecb d\u1eef li\u1ec7u**\nT\u1eadp d\u1eef li\u1ec7u g\u1ed3m 4 t\u1ec7p train_transaction, test_transaction, train_identity, test_identity.\n","2673f577":"###G\u1ed3m 4 ch\u01b0\u01a1ng \n###Ch\u01b0\u01a1ng 1 : ph\u00e2n t\u00edch d\u1eef li\u1ec7u\n###Ch\u01b0\u01a1ng 2 : Covert, clean ,x\u1eed l\u00fd d\u1eef li\u1ec7u\n###Ch\u01b0\u01a1ng 3 : Model  s\u1eed d\u1ee5ng, h\u00ecnh \u1ea3nh , s\u1ed1 li\u1ec7u\n###Ch\u01b0\u01a1ng 4 : T\u1ea1o file n\u1ea1p b\u00e0i","6cf1bffc":"- \u0110\u00e2y l\u00e0 m\u00e3 s\u1ea3n ph\u1ea9m \u0111\u01b0\u1ee3c li\u00ean k\u1ebft v\u1edbi m\u1ed7i giao d\u1ecbch.\u00a0H\u00e3y cho ch\u00fang t\u00f4i bi\u1ebft c\u00f3 bao nhi\u00eau ph\u1ea7n tr\u0103m giao d\u1ecbch l\u00e0 gian l\u1eadn gi\u1eefa c\u00e1c m\u00e3 s\u1ea3n ph\u1ea9m kh\u00e1c nhau\n\n- Ch\u00fang ta c\u00f3 th\u1ec3 th\u1ea5y r\u1eb1ng trong s\u1ed1 c\u00e1c giao d\u1ecbch li\u00ean quan \u0111\u1ebfn m\u00e3 s\u1ea3n ph\u1ea9m C, kho\u1ea3ng 12 ph\u1ea7n tr\u0103m l\u00e0 giao d\u1ecbch gian l\u1eadn.\u00a0t\u01b0\u01a1ng t\u1ef1 g\u1ea7n 6% giao d\u1ecbch l\u00e0 gian l\u1eadn gi\u1eefa c\u00e1c m\u00e3 s\u1ea3n ph\u1ea9m.","06df52eb":"H\u00e0m gi\u1ea3m dung l\u01b0\u1ee3ng b\u1ed9 nh\u1edb :s\u1eed d\u1ee5ng theo https:\/\/www.kaggle.com\/kyakovlev\/ieee-data-minification :\n\nL\u00e0m vi\u1ec7c v\u1edbi d\u1eef li\u1ec7u l\u1edbn trong khi \u0111\u00e0o t\u1ea1o m\u00f4 h\u00ecnh ML y\u00eau c\u1ea7u b\u1ed9 nh\u1edb RAM l\u1edbn v\u00e0 d\u1eef li\u1ec7u trong b\u00e0i n\u00e0y kh\u00e1 l\u00e0 l\u1edbn . \u0110\u1ec3 kh\u1eafc ph\u1ee5c h\u1ea1n ch\u1ebf n\u00e0y, ta s\u1eed d\u1ee5ng m\u1ed9t h\u00e0m \u0111\u1ec3 gi\u1ea3m dung l\u01b0\u1ee3ng b\u1ed9 nh\u1edb c\u1ee7a d\u1eef li\u1ec7u. C\u00e1ch ti\u1ebfp c\u1eadn chung l\u00e0 chuy\u1ec3n \u0111\u1ed5i lo\u1ea1i dtype c\u1ee7a t\u1eebng t\u00ednh n\u0103ng ('int16', 'int32', 'int64', 'float16', 'float32', 'float64') th\u00e0nh lo\u1ea1i dtype th\u1ea5p nh\u1ea5t c\u00f3 th\u1ec3.","987d058d":"#**7.Product CD**","c027f5f7":"- Trong b\u1ed9 d\u1eef li\u1ec7u , c\u00f3 96,5% giao d\u1ecbch kh\u00f4ng ph\u1ea3i l\u00e0 gian l\u1eadn v\u00e0 3,5% c\u00f2n l\u1ea1i l\u00e0 gian l\u1eadn v\u00e0 qua dashboard 1 cho th\u1ea5y t\u1eadp dataset \u0111ang b\u1ecb unbalance r\u1ea5t nhi\u1ec1u .\u0110\u00e2y c\u0169ng ch\u00ednh l\u00e0 l\u00fd do t\u00f4i s\u1eed d\u1ee5ng ROC(AUC) \u0111\u1ec3 l\u00e0m th\u01b0\u1edbc \u0111o cho t\u00e1c v\u1ee5 ph\u00e1t hi\u1ec7n giao d\u1ecbch gian l\u1eadn tr\u1ef1c tuy\u1ebfn cho dataset n\u00e0y ch\u1ee9 kh\u00f4ng ph\u1ea3i accurancy, f1 .","94858a4c":"C1-C14: \u0111\u1ebfm, ch\u1eb3ng h\u1ea1n nh\u01b0 c\u00f3 bao nhi\u00eau \u0111\u1ecba ch\u1ec9 \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y c\u00f3 li\u00ean quan \u0111\u1ebfn th\u1ebb thanh to\u00e1n, v.v. \u00dd ngh\u0129a th\u1ef1c t\u1ebf \u0111\u01b0\u1ee3c che gi\u1ea5u.","59fe47dd":"- T\u1eeb bi\u1ec3u \u0111\u1ed3 histogram ,ta c\u00f3 th\u1ec3 th\u1ea5y histogram \u1edf d\u1ea1ng skew-rleft . V\u00ec v\u1eady, ch\u00fang t\u00f4i s\u1ebd th\u1ef1c hi\u1ec7n log-transform \u0111\u1ec3 xem r\u00f5 h\u01a1n s\u1ef1 ph\u00e2n b\u1ed1. Sau khi \u00e1p d\u1ee5ng log-transform, s\u1ed1 ti\u1ec1n gian l\u1eadn v\u00e0 kh\u00f4ng gian l\u1eadn s\u1ebd tr\u1edf th\u00e0nh ph\u00e2n ph\u1ed1i b\u00ecnh th\u01b0\u1eddng.\n- T\u1eeb bi\u1ec3u \u0111\u1ed3 scatterplot ,ta c\u00f3 th\u1ec3 th\u1ea5y r\u1eb1ng c\u00f3 m\u1ed9t \u0111i\u1ec3m trong t\u1eadp train l\u00e0 m\u1ed9t outlier(ngo\u1ea1i l\u1ec7 ) r\u00f5 r\u00e0ng . V\u1eady n\u00ean t\u00f4i s\u1ebd x\u00f3a \u0111i\u1ec3m ngo\u1ea1i l\u1ec7 n\u00e0y v\u00ec n\u00f3 c\u00f3 th\u1ec3 \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn c\u00e1c m\u00f4 h\u00ecnh c\u1ee7a ch\u00fang ta khi d\u1ef1 \u0111o\u00e1n. Th\u1ee9 hai, nh\u1eefng ngo\u1ea1i l\u1ec7 nh\u01b0 th\u1ebf n\u00e0y c\u00f3 th\u1ec3 g\u00e2y ra v\u1ea5n \u0111\u1ec1 overfitting .\u00a0V\u00ed d\u1ee5, c\u00e1c m\u00f4 h\u00ecnh d\u1ef1a tr\u00ean c\u00e2y c\u00f3 th\u1ec3 \u0111\u01b0a c\u00e1c ngo\u1ea1i l\u1ec7 n\u00e0y v\u00e0o c\u00e1c n\u00fat l\u00e1 \u0111i\u1ec1u \u0111\u00f3 s\u1ebd l\u00e0m nhi\u1ec1u v\u00e0 kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t ph\u1ea7n c\u1ee7a m\u00f4 h\u00ecnh chung.\u00a0Do \u0111\u00f3, t\u00f4i quy\u1ebft \u0111\u1ecbnh lo\u1ea1i b\u1ecf c\u00e1c gi\u00e1 tr\u1ecb l\u1edbn h\u01a1n 30.000 trong t\u1eadp hu\u1ea5n luy\u1ec7n.\n- T\u1eeb bi\u1ec3u \u0111\u1ed3 dotplot v\u00e0 histogram t th\u1ea5y c\u00e1c giao d\u1ecbch v\u1edbi 'LogTransactionAmt' l\u1edbn h\u01a1n 5,5 (244 \u0111\u00f4 la) v\u00e0 nh\u1ecf h\u01a1n 3,3 (27 \u0111\u00f4 la) c\u00f3 t\u1ea7n su\u1ea5t v\u00e0 m\u1eadt \u0111\u1ed9 x\u00e1c su\u1ea5t b\u1ecb l\u1eeba \u0111\u1ea3o cao h\u01a1n.\u00a0M\u1eb7t kh\u00e1c, nh\u1eefng c\u00e1i c\u00f3 'LogTransactionAmt' t\u1eeb 3,3 \u0111\u1ebfn 5,5 c\u00f3 kh\u1ea3 n\u0103ng l\u00e0 giao d\u1ecbch kh\u00f4ng gian l\u1ead cao h\u01a1n.","9fb2b7cc":"#**D\u1eef li\u1ec7u** \nD\u1eef li\u1ec7u l\u00e0 d\u1eef li\u1ec7u ph\u00e2n lo\u1ea1i \u0111\u01b0\u1ee3c chia th\u00e0nh hai t\u1ec7p\u00a0`identity` (nh\u1eadn d\u1ea1ng ) v\u00e0\u00a0`transaction` (giao d\u1ecbch) \u0111\u01b0\u1ee3c n\u1ed1i v\u1edbi nhau  b\u1eb1ng \u00a0`TransactionID`. \u00a0Kh\u00f4ng ph\u1ea3i t\u1ea5t c\u1ea3 c\u00e1c giao d\u1ecbch \u0111\u1ec1u c\u00f3 th\u00f4ng tin nh\u1eadn d\u1ea1ng t\u01b0\u01a1ng \u1ee9ng.\n\n- TransactionDT: t\u00ednh th\u1eddi gian t\u1eeb m\u1ed9t ng\u00e0y gi\u1edd tham chi\u1ebfu nh\u1ea5t \u0111\u1ecbnh (kh\u00f4ng ph\u1ea3i d\u1ea5u th\u1eddi gian th\u1ef1c t\u1ebf)\n- TransactionAMT: s\u1ed1 ti\u1ec1n thanh to\u00e1n giao d\u1ecbch b\u1eb1ng USD\n- ProductCD: m\u00e3 s\u1ea3n ph\u1ea9m, s\u1ea3n ph\u1ea9m cho m\u1ed7i giao d\u1ecbch\n- card1 - card6: th\u00f4ng tin th\u1ebb thanh to\u00e1n, ch\u1eb3ng h\u1ea1n nh\u01b0 lo\u1ea1i th\u1ebb, lo\u1ea1i th\u1ebb, ng\u00e2n h\u00e0ng ph\u00e1t h\u00e0nh, qu\u1ed1c gia, v.v.\n- addr: \u0111\u1ecba ch\u1ec9\n- dist: kho\u1ea3ng c\u00e1ch\n- P_ v\u00e0 (R__) email domain : mi\u1ec1n email c\u1ee7a ng\u01b0\u1eddi mua v\u00e0 ng\u01b0\u1eddi nh\u1eadn\n- C1-C14 : \u0111\u1ebfm, ch\u1eb3ng h\u1ea1n nh\u01b0 c\u00f3 bao nhi\u00eau \u0111\u1ecba ch\u1ec9 \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y c\u00f3 li\u00ean quan \u0111\u1ebfn th\u1ebb thanh to\u00e1n, v.v. \u00dd ngh\u0129a th\u1ef1c t\u1ebf \u0111\u01b0\u1ee3c che gi\u1ea5u.\n- D1-D15: h\u1eb9n gi\u1edd, ch\u1eb3ng h\u1ea1n nh\u01b0 ng\u00e0y gi\u1eefa giao d\u1ecbch tr\u01b0\u1edbc \u0111\u00f3, v.v.\n- M1-M9: kh\u1edbp, ch\u1eb3ng h\u1ea1n nh\u01b0 t\u00ean tr\u00ean th\u1ebb v\u00e0 \u0111\u1ecba ch\u1ec9, v.v.\n- Vxxx: Vesta \u0111\u00e3 thi\u1ebft k\u1ebf c\u00e1c t\u00ednh n\u0103ng phong ph\u00fa, bao g\u1ed3m x\u1ebfp h\u1ea1ng, \u0111\u1ebfm v\u00e0 c\u00e1c quan h\u1ec7 th\u1ef1c th\u1ec3 kh\u00e1c.\n\n### **Thu\u1ed9c t\u00ednh ph\u00e2n lo\u1ea1i- Giao d\u1ecbch**\n\n- `ProductCD`\n- `card1-card6`\n- `addr1, addr2`\n- `P_emaildomain`\n- `R_emaildomain`\n- `M1-M9`\n\n### **Thu\u1ed9c t\u00ednh ph\u00e2n lo\u1ea1i - Nh\u1eadn d\u1ea1ng**\n\n- `DeviceType`\n- `DeviceInfo`\n- `id_12-id_38`","194c894b":"- T\u1eeb bi\u1ec3u \u0111\u1ed3 correlation heatmap ta c\u00f3 th\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c r\u00f5 r\u00e0ng v\u00e0 chi ti\u1ebft s\u1ef1 t\u01b0\u01a1ng quan gi\u1eefa c\u00e1c thu\u1ed9c t\u00ednh v\u1edbi nhau. \u0110\u00e2y l\u00e0 th\u00f4ng tin ch\u1ee7 y\u1ebfu \u0111\u1ec3 gi\u00fap t\u00f4i gi\u1ea3m chi\u1ec1u d\u1eef li\u1ec7u trong ph\u1ea7n sau .\n- T\u1eeb bi\u1ec3u \u0111\u1ed3 scatterplot c\u1ee7a C1-C14 , ta c\u00f3 th\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c li\u1ec7u c\u00f3 s\u1ef1 t\u01b0\u01a1ng t\u1ef1 gi\u1eefa h\u00ecnh d\u1ea1ng c\u0169ng nh\u01b0 ph\u00e2n b\u1ed1 c\u1ee7a C1-C14 v\u1edbi \u201cTransactionDT\u201d.\u0110\u00e2y l\u00e0 th\u00f4ng tin quan tr\u1ecdng \u0111\u1ec3 \u0111\u00e1ng gi\u00e1 xem t\u1ea1i sao l\u1ea1i c\u00f3 s\u1ef1 kh\u00e1c nhau \u0111\u00f3 v\u00e0 \u0111i\u1ec1u \u0111\u00f3 th\u1ec3 hi\u1ec7n \u0111i\u1ec1u g\u00ec.","69578f96":"#**9.addr1 v\u00e0 addr2**","76de20df":"### S\u1eed d\u1ee5ng gc \u0111\u1ec3 gi\u1ea3i ph\u00f3ng b\u1ed9 nh\u1edb","82d85d1e":"# **7. S\u1eed d\u1ee5ng PCA cho dataset**","0c2546f5":"#**12. V1-V339**","b0dc5ef3":"C\u00f3 6 t\u00ednh n\u0103ng ph\u00e2n lo\u1ea1i th\u1ebb kh\u00e1c nhau t\u1eeb card 1 \u0111\u1ebfn card 6. Tuy nhi\u00ean, card1, card2, card3 v\u00e0 card5 \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a d\u01b0\u1edbi d\u1ea1ng gi\u00e1 tr\u1ecb s\u1ed1.\u1ede \u0111\u00e2y t\u00f4i kh\u00f4ng \u0111\u01b0\u1ee3c cho bi\u1ebft c\u00e1c t\u00ednh n\u0103ng ch\u00ednh x\u00e1c \u00fd ngh\u0129a cho c\u00e1c t\u00ednh n\u0103ng th\u1ebb. \u0110\u00e2y c\u00f3 th\u1ec3 l\u00e0 th\u00f4ng tin thanh to\u00e1n c\u1ee7a c\u00e1c lo\u1ea1i th\u1ebb kh\u00e1c nhau nh\u01b0 atm, QR,..."}}