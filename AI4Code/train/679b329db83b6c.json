{"cell_type":{"671209a8":"code","e7ec360d":"code","ffadab9d":"code","85bb1483":"code","b3adfe9a":"code","0ec6e4d0":"code","d84f1c68":"code","db295acb":"code","d15b0c13":"code","5696405b":"code","e4325164":"code","d1fd9628":"code","43f2d646":"code","bf468d93":"code","a901cf83":"code","7644ae7c":"code","7680bb8f":"code","5aac71ea":"code","f803fe2e":"code","9dde52f6":"code","eb0e801b":"code","eb268ddd":"code","32a765ba":"code","14bb45b9":"markdown","cbe90e2d":"markdown","ed44fc3e":"markdown","747c9996":"markdown","bf4a93f5":"markdown","433c2ed7":"markdown","373a71f0":"markdown","a0f646cb":"markdown"},"source":{"671209a8":"import numpy as np\nimport pandas as pd\nimport os\n## print(os.listdir(\"..\/input\"))\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom pandas.plotting import scatter_matrix\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, FunctionTransformer, OneHotEncoder, KBinsDiscretizer, MaxAbsScaler, LabelEncoder\nfrom sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, train_test_split as split\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.mixture import GaussianMixture\nfrom time import time","e7ec360d":"## nRowsRead = 1000\ndf = pd.read_csv('\/kaggle\/input\/sf-employee-compensation\/employee-compensation.csv')\n## df.dataframename = 'employee-compensation.csv'\n## nRow, nCol = df.shape\n## print(f'There are {nRow} rows and {nCol} columns')","ffadab9d":"df.head()","85bb1483":"df.info()","b3adfe9a":"print(df.isnull().sum())","0ec6e4d0":"df[df.Union.isnull() == True].head()","d84f1c68":"df[df.Union.isnull() == True]['Organization Group'].value_counts()","db295acb":"df[df.Union.isnull() == True][df['Organization Group'] == 'Communit Health'].Job.value_counts()","d15b0c13":"df[df.Job == 'Technology Expert II'].shape","5696405b":"sns.heatmap(df.corr())","e4325164":"salaries_sm = scatter_matrix(df[['Salaries', 'Total Salary', 'Total Compensation']])","d1fd9628":"benefits_sm = scatter_matrix(df[['Retirement', 'Health and Dental', 'Other Benefits', 'Salaries']])","43f2d646":"ax = sns.kdeplot(df['Salaries'])","bf468d93":"df['Salaries'].describe()","a901cf83":"salary = ['Salaries', 'Total Salary', 'Total Compensation']\nfor col in salary:\n    ax_salary = sns.kdeplot(df[col])\n    ax_salary","7644ae7c":"benefits = ['Retirement', 'Health and Dental', 'Other Benefits', 'Total Benefits']\nfor col in benefits:\n    ax_benefits = sns.kdeplot(df[col])\n    ax_benefits","7680bb8f":"## Remove salaries lower than 35,000\ndf[df['Salaries']<35000].count()","5aac71ea":"df1 = df[df['Salaries'] > 35000]","f803fe2e":"## How many organizations we are losing by reducing the data to salaries <35,000\norg_x = df[df.Salaries<35000]['Organization Group'].value_counts()\norg_y = df['Organization Group'].value_counts()\norg_z = pd.concat([org_x, (org_x\/org_y)], axis=1, join='inner', sort=False)\norg_z.columns = ['Organization Count', 'Organization %']\norg_z","9dde52f6":"org_ax = org_z['Organization Count'].plot('bar')\nfor p in org_ax.patches:\n    org_ax.annotate(int(p.get_height()), (p.get_x(), p.get_height()*1.01))","eb0e801b":"## How many departments we are losing by reducing the data to salaries <35,000\ndep_x = df[df.Salaries<35000].Department.value_counts()\ndep_y = df.Department.value_counts()\ndep_z = pd.concat([org_x, (org_x\/org_y)], axis=1, join='inner', sort=False)\ndep_z.columns = ['Department Count', 'Department %']\ndep_z","eb268ddd":"## How many jobs we are losing by reducing the data to salaries <35,000\njob_x = df[df.Salaries<35000].Job.value_counts()\njob_y = df.Job.value_counts()\njob_z = pd.concat([org_x, (org_x\/org_y)], axis=1, join='inner', sort=False)\njob_z.columns = ['Job Count', 'Job %']\njob_z","32a765ba":"plt.figure(figsize=(15,8))\nfor col in ist(df1['Organization Group'].unique()):\n    ax=sns.kdeplot(df1['Organization Group' = col], label = col)","14bb45b9":"## Check Missing Value(NaN)","cbe90e2d":"## Introduction\n* The San Francisco Controller's Office maintains a database of the salary and benefits paid to City employees between fiscal years 2013 - 2017.\n* The dataset hosted by the city of San Francisco. The organization has an open data platform and they update their information according the amount of data that is brought in.\n* This dataset is updated annually. New data is added on a bi-annual basis when available for each fiscal and calendar year.\n* Our target is to predict the salary.\n* The csv file includes 213K observations and 22 features. After cleaning the Nan's and defining the interested population as employees with total annual salary of at least 35,000$, we have almost 150K observations.","ed44fc3e":"## EDA","747c9996":"## Load Data","bf4a93f5":"### Distribution of salaries by organizations","433c2ed7":"## Target","373a71f0":"## Import Libraries","a0f646cb":"## Sample the Data"}}