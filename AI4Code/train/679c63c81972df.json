{"cell_type":{"2ffd649d":"code","0597d78b":"code","f4d181d5":"code","53585140":"code","18766dc8":"code","33e20978":"code","09542e03":"code","1bc07ee4":"code","70312eb8":"code","990de240":"code","2bf6264b":"code","69ea2b49":"code","575b1829":"code","0cd31a2e":"code","cb8a1d69":"code","0976fa6a":"markdown","e372af0c":"markdown","14cc7634":"markdown","8cf14bfa":"markdown","60828b19":"markdown","e010968e":"markdown"},"source":{"2ffd649d":"import os\nimport random\nimport numpy as np\nfrom PIL import Image\n\nimport matplotlib.pyplot as plt\nfrom torchvision import transforms\nfrom torch.utils.data import Dataset, DataLoader\n\nimport torch\nfrom torch import nn\nfrom torch import device","0597d78b":"path = '..\/input\/covid19-patient-xray-image-dataset\/COVID-19 patient X-ray image dataset\/corona\/'\n\nsub_path = ['test', 'train', 'val']\ncategories = ['corona', 'normal']","f4d181d5":"class CovidDataset(Dataset):\n    def __init__(self, path, sub_path, img_size, transforms=None):\n        self.path = path\n        self.sub_path = sub_path\n        self.img_size = img_size\n        self.transforms = transforms\n        self.categories = ['corona', 'normal']\n        self.data = self.get_ds_paths()\n\n    def get_ds_paths(self):\n        corona_path = self.path + self.sub_path + '\/' + categories[0] + '\/'\n        normal_path = self.path + self.sub_path + '\/' + categories[1] + '\/'\n\n        corona = [(entry.path, 1) for entry in os.scandir(corona_path)]\n        normal = [(entry.path, 0) for entry in os.scandir(normal_path)]\n\n        data = corona + normal\n        random.shuffle(data)\n\n        return data\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        data = self.data[idx]\n\n        img = Image.open(data[0]).convert('RGB')\n        if self.transforms:\n            img = self.transforms(img)\n        else:\n            img = img.resize(img_size)\n        img = np.array(list(img.getdata())).reshape(img_size[0], img_size[1], 3) \/ 255.\n        lbl = data[1]\n\n        return img, lbl\n","53585140":"epochs = 40\nbatch_size = 4\nimg_size = (150, 150)","18766dc8":"data_transforms = transforms.Compose([\n        transforms.RandomAffine(degrees=0, shear=0.2),\n        transforms.Resize(img_size),\n        transforms.RandomHorizontalFlip(0.5)\n])","33e20978":"covid_ds = CovidDataset(path, 'train', img_size, data_transforms)\ncovid_test_ds = CovidDataset(path, 'test', img_size)\ncovid_val_ds = CovidDataset(path, 'val', img_size)","09542e03":"def collate_fn(batch):\n    imgs, lbls = list(zip(*batch))\n    imgs = torch.tensor(imgs).permute(0, 3, 1, 2).type(torch.cuda.FloatTensor)\n    lbls = torch.tensor(lbls).type(torch.float32).reshape(len(lbls), 1)\n    lbls = lbls.type(torch.cuda.FloatTensor)\n    return imgs.cuda(), lbls.cuda()","1bc07ee4":"loader = DataLoader(covid_ds, batch_size=batch_size, shuffle=True, collate_fn=collate_fn)\nloader_test = DataLoader(covid_test_ds, batch_size=batch_size, collate_fn=collate_fn)\nloader_val = DataLoader(covid_val_ds, batch_size=batch_size, collate_fn=collate_fn)","70312eb8":"imgs, lbls = next(iter(loader))","990de240":"plt.imshow(imgs[0].cpu().permute(1, 2, 0))","2bf6264b":"model = nn.Sequential(nn.Conv2d(3, 32, 3),\n                      nn.ReLU(),\n                      nn.MaxPool2d(2, 2),\n                      nn.Conv2d(32, 64, 3),\n                      nn.ReLU(),\n                      nn.MaxPool2d(2, 2),\n                      nn.Conv2d(64, 128, 3),\n                      nn.ReLU(),\n                      nn.MaxPool2d(2, 2),\n                      nn.Conv2d(128, 256, 3),\n                      nn.Dropout(0.5),\n                      nn.ReLU(),\n                      nn.Flatten(),\n                      nn.Linear(57600, 512),\n                      nn.Sigmoid(),\n                      nn.Linear(512, 256),\n                      nn.Sigmoid(),\n                      nn.Linear(256, 128),\n                      nn.Sigmoid(),\n                      nn.Linear(128, 32),\n                      nn.Sigmoid(),\n                      nn.Dropout(0.25),\n                      nn.Linear(32, 1),\n                      nn.Sigmoid())","69ea2b49":"model = model.cuda()","575b1829":"loss_fn = nn.BCELoss()\n#optimizer = torch.optim.RMSprop(model.parameters(), lr=0.001, weight_decay=0.0001, momentum=0.9)\noptimizer = torch.optim.RMSprop(model.parameters(), lr=0.001)","0cd31a2e":"losses = []\n\nfor e in range(300):\n    \n    batch_losses = []\n    batch_losses_tests = []\n    \n    for i, (imgs, lbls) in enumerate(loader):\n        \n        optimizer.zero_grad()\n        \n        out = model(imgs)\n        loss = loss_fn(out, lbls)\n\n        if((i + 1) == 1):\n            imgs_test, lbls_test = next(iter(loader_test))\n            out_test = model(imgs_test)\n            loss_test = loss_fn(out_test, lbls_test)\n\n        batch_losses.append(loss.item())\n        batch_losses_tests.append(loss_test.item())\n\n        loss.backward()\n        optimizer.step()\n    \n    batch_losses = np.array(batch_losses)\n    batch_losses_tests = np.array(batch_losses_tests)\n    losses.append((np.mean(batch_losses), np.mean(batch_losses_tests)))\n\n    if(e % 30 == 0):\n        print('Episode:{0:3d},   Mean_Loss:{1:1.3f},   Mean_Loss_test:{2:1.3f}'.format(e, np.mean(batch_losses), np.mean(batch_losses_tests)))","cb8a1d69":"losses = np.array(losses)\nfig, ax = plt.subplots()\nax.plot(losses[:,0], '-b', label='Losses')\nax.plot(losses[:,1], '--r', label='Losses_Test')\nleg = ax.legend();","0976fa6a":"<h1 align=center style='color: blue;border: 1px dotted blue'>Machine Learning<\/h1>","e372af0c":"<h1 align=center style='color: red;border: 1px dotted red'>Covid CNN Diagnosis<\/h1>","14cc7634":"# Training","8cf14bfa":"# Analysis","60828b19":"# Model","e010968e":"# Data Preparation"}}