{"cell_type":{"a869082d":"code","b88199f6":"code","427e73f6":"code","ef33af3d":"code","98ba3099":"code","700f25f5":"code","4c17d5ec":"code","444c3d86":"code","4ff17e07":"code","c60869d6":"code","960b1cea":"code","f7c32687":"code","a4e23c7b":"code","7dfe1f90":"code","c8aa6017":"code","10d6ffd2":"code","23c1d58c":"code","3710a16e":"code","acdbed08":"code","db2fe8e0":"code","e661ba4a":"code","aebe4e62":"code","a94f9e4f":"code","13a1ef9e":"code","4cae9cb4":"markdown","1fd30f2d":"markdown","16f63ec7":"markdown","444105da":"markdown","307f42b2":"markdown","12e4cc3a":"markdown","bdddb09e":"markdown","b91399e8":"markdown","495ffc80":"markdown","479352d0":"markdown","1b77d66b":"markdown","62351a6b":"markdown","658066c6":"markdown","b548b0f9":"markdown","7ae3ebc7":"markdown","f5ec3efa":"markdown","f58cafc0":"markdown","c89f0120":"markdown","7e5c1da5":"markdown","08f415dc":"markdown","19ecb38a":"markdown","c60d22cb":"markdown","71f0cb04":"markdown","d27707df":"markdown","0773f9c7":"markdown","72d42b30":"markdown","03828094":"markdown","948319be":"markdown","52c60704":"markdown","ffa5ae8f":"markdown","102d6ae2":"markdown","aa33039c":"markdown","cf7233f1":"markdown","3a5189b1":"markdown","d4851060":"markdown","6633d042":"markdown","e7bd10e5":"markdown","cb4b040c":"markdown","35fefb84":"markdown","a34548a4":"markdown","18a3d1b5":"markdown","9fcc539a":"markdown","089a3e4a":"markdown","8e0a5f0b":"markdown","44d3bb1f":"markdown","fd058f87":"markdown","230e2786":"markdown","2ae99d1f":"markdown","7b188f64":"markdown","feaa27ad":"markdown","8231ded3":"markdown"},"source":{"a869082d":"import numpy as np\nimport plotly.graph_objects as go\nx = ['Digit Recognizer', 'NLP with Disaster Tweets', 'What\\'s Cooking?', 'TPS - December 2021']\ny = [7, 25, 15, 20]\n\ndata = go.Bar(\n    x= x,\n    y= y,\n)\n\ntitle = {\n         'text': \"Workflow speedup\",\n         'y':0.9,\n         'x':0.5,\n         'xanchor': 'center',\n         'yanchor': 'top'\n        }\n\nlayout = go.Layout(\n    title = title,\n    xaxis = dict(\n    showgrid = False,\n    showline = False,\n    ),\n    yaxis=dict(\n    showgrid = False,\n    showline = False,\n    ),\n    width = 800,\n    height = 600,\n    xaxis_tickangle=-45\n)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","b88199f6":"x = ['House prices', 'TPS - August 2021']\ny = [4, 23]\n\ndata = go.Bar(\n    x= x,\n    y= y,\n)\n\ntitle = {\n         'text': \"Workflow speedup\",\n         'y':0.9,\n         'x':0.5,\n         'xanchor': 'center',\n         'yanchor': 'top'\n        }\n\nlayout = go.Layout(\n    title = title,\n    xaxis = dict(\n    showgrid = False,\n    showline = False,\n    ),\n    yaxis=dict(\n    showgrid = False,\n    showline = False,\n    ),\n    width = 600,\n    height = 500,\n    xaxis_tickangle=-45\n)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","427e73f6":"x = ['TPS - August 2021', 'TPS - July 2021']\ny = [1.7, 2.3]\n\ndata = go.Bar(\n    x= x,\n    y= y,\n)\n\ntitle = {\n         'text': \"Workflow speedup\",\n         'y':0.9,\n         'x':0.5,\n         'xanchor': 'center',\n         'yanchor': 'top'\n        }\n\nlayout = go.Layout(\n    title = title,\n    xaxis = dict(\n    showgrid = False,\n    showline = False,\n    ),\n    yaxis=dict(\n    showgrid = False,\n    showline = False,\n    ),\n    width = 600,\n    height = 500,\n    xaxis_tickangle=-45\n)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","ef33af3d":"x = ['Digit Recognizer', 'Synthetic classification data']\ny = [35, 15.5]\n\ndata = go.Bar(\n    x= x,\n    y= y,\n)\n\ntitle = {\n         'text': \"Workflow speedup\",\n         'y':0.9,\n         'x':0.5,\n         'xanchor': 'center',\n         'yanchor': 'top'\n        }\n\nlayout = go.Layout(\n    title = title,\n    xaxis = dict(\n    showgrid = False,\n    showline = False,\n    ),\n    yaxis=dict(\n    showgrid = False,\n    showline = False,\n    ),\n    width = 400,\n    height = 500,\n    xaxis_tickangle=-45\n)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","98ba3099":"x = ['TPS - May 2021', 'TPS - April 2021']\ny = [80, 25]\n\ndata = go.Bar(\n    x= x,\n    y= y,\n)\n\ntitle = {\n         'text': \"Workflow speedup\",\n         'y':0.9,\n         'x':0.5,\n         'xanchor': 'center',\n         'yanchor': 'top'\n        }\n\nlayout = go.Layout(\n    title = title,\n    xaxis = dict(\n    showgrid = False,\n    showline = False,\n    ),\n    yaxis=dict(\n    showgrid = False,\n    showline = False,\n    ),\n    width = 600,\n    height = 500,\n    xaxis_tickangle=-45\n)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","700f25f5":"x = ['TPS - June 2021', 'TPS - July 2021']\ny = [3.8, 3.3]\n\ndata = go.Bar(\n    x= x,\n    y= y,\n)\n\ntitle = {\n         'text': \"Workflow speedup\",\n         'y':0.9,\n         'x':0.5,\n         'xanchor': 'center',\n         'yanchor': 'top'\n        }\n\nlayout = go.Layout(\n    title = title,\n    xaxis = dict(\n    showgrid = False,\n    showline = False,\n    ),\n    yaxis=dict(\n    showgrid = False,\n    showline = False,\n    ),\n    width = 600,\n    height = 500,\n    xaxis_tickangle=-45\n)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","4c17d5ec":"x = ['TPS - June 2021', 'TPS - November 2021']\ny = [7, 17]\n\ndata = go.Bar(\n    x= x,\n    y= y,\n)\n\ntitle = {\n         'text': \"Workflow speedup\",\n         'y':0.9,\n         'x':0.5,\n         'xanchor': 'center',\n         'yanchor': 'top'\n        }\n\nlayout = go.Layout(\n    title = title,\n    xaxis = dict(\n    showgrid = False,\n    showline = False,\n    ),\n    yaxis=dict(\n    showgrid = False,\n    showline = False,\n    ),\n    width = 600,\n    height = 500,\n    xaxis_tickangle=-45\n)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","444c3d86":"x = ['TPS - June 2021', 'TPS - January 2022', 'Titanic']\ny = [1.45, 1.6, 1.43]\n\ndata = go.Bar(\n    x= x,\n    y= y,\n)\n\ntitle = {\n         'text': \"Workflow speedup\",\n         'y':0.9,\n         'x':0.5,\n         'xanchor': 'center',\n         'yanchor': 'top'\n        }\n\nlayout = go.Layout(\n    title = title,\n    xaxis = dict(\n    showgrid = False,\n    showline = False,\n    ),\n    yaxis=dict(\n    showgrid = False,\n    showline = False,\n    ),\n    width = 600,\n    height = 500,\n    xaxis_tickangle=-45\n)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","4ff17e07":"x = ['TPS - November 2021', 'TPS - December 2021']\ny = [3.6, 1.41]\n\ndata = go.Bar(\n    x= x,\n    y= y,\n)\n\ntitle = {\n         'text': \"Workflow speedup\",\n         'y':0.9,\n         'x':0.5,\n         'xanchor': 'center',\n         'yanchor': 'top'\n        }\n\nlayout = go.Layout(\n    title = title,\n    xaxis = dict(\n    showgrid = False,\n    showline = False,\n    ),\n    yaxis=dict(\n    showgrid = False,\n    showline = False,\n    ),\n    width = 600,\n    height = 500,\n    xaxis_tickangle=-45\n)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","c60869d6":"pip install scikit-learn-intelex","960b1cea":"conda install scikit-learn-intelex -c conda-forge","f7c32687":"conda install scikit-learn-intelex -c intel","a4e23c7b":"python -m sklearnex my_application.py","7dfe1f90":"from sklearnex import patch_sklearn\npatch_sklearn()","c8aa6017":"from sklearnex.neighbors import NearestNeighbors","10d6ffd2":"python sklearnex.glob patch_sklearn","23c1d58c":"from sklearnex import patch_sklearn\n# The names match scikit-learn estimators\npatch_sklearn(\"SVC\")","3710a16e":"from sklearnex import patch_sklearn\n# The names match scikit-learn estimators\npatch_sklearn([\"SVC\", \"DBSCAN\"])","acdbed08":"import numpy as np\nfrom sklearnex import patch_sklearn\npatch_sklearn()\n\n# You need to re-import scikit-learn algorithms after the patch\nfrom sklearn.cluster import KMeans\n\nX = np.array([[1,  2], [1,  4], [1,  0],\n              [10, 2], [10, 4], [10, 0]])\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\nprint(f\"kmeans.labels_ = {kmeans.labels_}\")","db2fe8e0":"sklearnex.unpatch_sklearn()\n# Re-import scikit-learn algorithms after the unpatch:\nfrom sklearn.cluster import KMeans","e661ba4a":"import logging\n\nlogger = logging.getLogger()\nfh = logging.FileHandler('log.txt')\nfh.setLevel(10)\nlogger.addHandler(fh)","aebe4e62":"!cat log.txt | grep 'running accelerated version' | sort | uniq","a94f9e4f":"sklearn.ensemble.RandomForestRegressor.fit: running accelerated version on CPU","13a1ef9e":"sklearn.ensemble.RandomForestRegressor.fit: fallback to original Scikit-learn","4cae9cb4":"Notebooks with SVM:\n* [Fast SVM with scikit-learn-intelex for TPS - May 2021](https:\/\/www.kaggle.com\/napetrov\/svm-tps-may-2021-with-scikit-learn-intelex)\n* [Fast SVM with scikit-learn-intelex for TPS - April 2021](https:\/\/www.kaggle.com\/napetrov\/tps04-svm-with-intel-extension-for-scikit-learn)","1fd30f2d":"## Verbose mode in Kaggle notebooks\nSet up logging to track accelerated cases:","16f63ec7":"You may specify which algorithms to patch:\n\n* Patching only one algorithm:","444105da":"* Anaconda Cloud from Intel channel (recommended for Intel\u00ae Distribution for Python users)","307f42b2":"# What is scikit-learn-intelex\n\nWith **[Intel\u00ae Extension for Scikit-learn](https:\/\/github.com\/intel\/scikit-learn-intelex)** you can accelerate your Scikit-learn applications and still have full conformance with all Scikit-Learn APIs and algorithms. Intel\u00ae Extension for Scikit-learn* is a free software AI accelerator that brings over **10-100X acceleration** across a variety of applications.","12e4cc3a":"Notebooks with AutoML:\n* [Fast AutoGluon using scikit-learn-intelex for TPS - June 2021](https:\/\/www.kaggle.com\/alex97andreev\/tps-jun-autogluon-with-sklearnex)\n* [Fast PyCaret using scikit-learn-intelex for TPS - January 2022](https:\/\/www.kaggle.com\/lordozvlad\/tps-jan-fast-pycaret-with-scikit-learn-intelex)\n* [Fast AutoGluon using scikit-learn-intelex for Titanic](https:\/\/www.kaggle.com\/lordozvlad\/titanic-automl-with-intel-extension-for-sklearn)","bdddb09e":"<a id=\"8\"><\/a>\n## AutoML\n<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to Algorithms<\/a>","b91399e8":"* PyPi (recommended by default)","495ffc80":"![Acceleration](https:\/\/raw.githubusercontent.com\/intel\/scikit-learn-intelex\/master\/doc\/sources\/_static\/scikit-learn-acceleration-2021.2.3.PNG)","479352d0":"<a id=\"1\"><\/a>\n## SVC\n<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to Algorithms<\/a>","1b77d66b":"## Patching Options\nYou may enable patching in different ways:","62351a6b":"# Example","658066c6":"* Through global patching to enable patching for your scikit-learn installation for all further runs:","b548b0f9":"The acceleration in scikit-learn-intelex is achieved through the use of the Intel(R) oneAPI Data Analytics Library (oneDAL). Learn more:\n- [About Intel(R) oneAPI Data Analytics Library](https:\/\/github.com\/oneapi-src\/oneDAL)\n- [About daal4py](https:\/\/github.com\/intel\/scikit-learn-intelex\/tree\/master\/daal4py)\n","7ae3ebc7":"<a id=\"7\"><\/a>\n## Logistic Regression\n<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to Algorithms<\/a>","f5ec3efa":"<a id=\"9\"><\/a>\n## Feature Importance\n<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to Algorithms<\/a>","f58cafc0":"Notebooks with Feature Importance:\n* [Fast Feature Importance using scikit-learn-intelex for TPS - November 2021](https:\/\/www.kaggle.com\/lordozvlad\/fast-feature-importance-using-scikit-learn-intelex)\n* [Fast Feature Importance using scikit-learn-intelex for TPS - December 2021](https:\/\/www.kaggle.com\/lordozvlad\/fast-feature-importance-using-scikit-learn-intelex)","c89f0120":"<a id=\"5\"><\/a>\n## SVM\n<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to Algorithms<\/a>","7e5c1da5":"* Through importing the desired estimator from the sklearnex module in your script:","08f415dc":"Notebooks with NuSVR:\n* [Fast NuSVR with scikit-learn-intelex for House prices](https:\/\/www.kaggle.com\/alexeykolobyanin\/house-prices-nusvr-sklearn-intelex-4x-speedup)\n* [Fast NuSVR with scikit-learn-intelex for TPS - August 2021](https:\/\/www.kaggle.com\/alexeykolobyanin\/tps-aug-nusvr-with-intel-extension-for-sklearn )","19ecb38a":"<a id=\"top\"><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" role=\"tab\" aria-controls=\"home\">Algorithms<\/h3>\n    \n   * [SVC](#1)\n   * [NuSVR](#2)\n   * [RandomForest](#3)\n   * [KNN](#4)\n   * [SVM](#5) \n   * [Stacking](#6)\n   * [Logistic Regression](#7)\n   * [AutoML](#8)\n   * [Feature Importance](#9) \n   ","c60d22cb":"# Support\n\nReport issues, ask questions, and provide suggestions using:\n* [GitHub Issues](https:\/\/github.com\/intel\/scikit-learn-intelex\/issues)\n* [GitHub Discussions](https:\/\/github.com\/intel\/scikit-learn-intelex\/discussions)\n* [Forum](https:\/\/community.intel.com\/t5\/Intel-Distribution-for-Python\/bd-p\/distribution-python)\n\nYou may reach out to project maintainers privately at onedal.maintainers@intel.com","71f0cb04":"Intel(R) Extension for Scikit-learn is used in different competitions on Kaggle. Here are the algorithms for which you can find Kaggle notebooks that use scikit-learn-intelex. For each algorithm, there is a list of existing notebooks as well as the acceleration that was achived in them.","d27707df":"# Installation\n\nIntel(R) Extension for Scikit-learn is available at the [Python Package Index](https:\/\/pypi.org\/project\/scikit-learn-intelex\/), on Anaconda Cloud in [Conda-Forge channel](https:\/\/anaconda.org\/conda-forge\/scikit-learn-intelex) and in [Intel channel](https:\/\/anaconda.org\/intel\/scikit-learn-intelex). Intel(R) Extension for Scikit-learn is also available as a part of [Intel\u00ae oneAPI AI Analytics Toolkit\u202f(AI Kit)](https:\/\/www.intel.com\/content\/www\/us\/en\/developer\/tools\/oneapi\/ai-analytics-toolkit.html).","0773f9c7":"* conda install scikit-learn-intelex -c conda-forge","72d42b30":"Notebooks with Stacking:\n* [Fast Stacking with scikit-learn-intelex for TPS - June 2021](https:\/\/www.kaggle.com\/masdevas\/fast-ml-stack-with-scikit-learn-intelex)\n* [Fast Stacking with scikit-learn-intelex for TPS - July 2021](https:\/\/www.kaggle.com\/alexeykolobyanin\/tps-jul-stacking-with-scikit-learn-intelex)","03828094":"You may also check [scikit-learn-intelex documentation](https:\/\/intel.github.io\/scikit-learn-intelex\/kaggle.html) to find Kaggle kernels that use scikit-learn-intelex for a specific type of machine learning task.","948319be":"In this example, you can see that the use of the original Scikit-learn has not changed. This behavior is achieved through drop-in patching.","52c60704":"Notebooks with SVC:\n* [Fast SVC using scikit-learn-intelex for Digit Recognizer](https:\/\/www.kaggle.com\/kppetrov\/fast-svc-using-scikit-learn-intelex-for-mnist)\n* [Fast SVC using scikit-learn-intelex for NLP with Disaster Tweets](https:\/\/www.kaggle.com\/kppetrov\/fast-svc-using-scikit-learn-intelex-for-nlp)\n* [Fast SVC using scikit-learn-intelex for What's cooking](https:\/\/www.kaggle.com\/kppetrov\/using-scikit-learn-intelex-for-what-s-cooking)\n* [Fast SVC using scikit-learn-intelex for TPS - December 2021](https:\/\/www.kaggle.com\/alexeykolobyanin\/tps-dec-svc-with-sklearnex-20x-speedup)","ffa5ae8f":"<a id=\"4\"><\/a>\n## KNN\n<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to Algorithms<\/a>","102d6ae2":"# Acceleration\n\nThe software acceleration is achieved through the use of vector instructions, IA hardware-specific memory optimizations, threading, and optimizations for all upcoming Intel platforms at launch time.","aa33039c":"Notebooks with RandomForest:\n* [Fast RF with scikit-learn-intelex for TPS - August 2021](https:\/\/www.kaggle.com\/andreyrus\/tps-apr-rf-with-intel-extension-for-scikit-learn)\n* [Fast RF with scikit-learn-intelex for TPS - July 2021](https:\/\/www.kaggle.com\/alexeykolobyanin\/tps-jul-rf-with-intel-extension-for-scikit-learn)","cf7233f1":"* Without editing the code of a scikit-learn application by using the following command line flag:","3a5189b1":"# Important Links\n\n* [Documentation](https:\/\/intel.github.io\/scikit-learn-intelex\/)\n* [Supported algorithms and parameters](https:\/\/intel.github.io\/scikit-learn-intelex\/algorithms.html)\n* [What is patching](https:\/\/intel.github.io\/scikit-learn-intelex\/what-is-patching.html)\n* [Machine Learning Benchmarks](https:\/\/github.com\/IntelPython\/scikit-learn_bench)","d4851060":"# Usage","6633d042":"[Learn more about patching](https:\/\/intel.github.io\/scikit-learn-intelex\/what-is-patching.html)","e7bd10e5":"Configurations:\n\n* HW: c5.24xlarge AWS EC2 Instance using an Intel Xeon Platinum 8275CL with 2 sockets and 24 cores per socket\n* SW: scikit-learn version 0.24.2, scikit-learn-intelex version 2021.2.3, Python 3.8","cb4b040c":"Notebooks with KNN:\n* [Fast KNN using scikit-learn-intelex for Digit Recognizer](https:\/\/www.kaggle.com\/kppetrov\/fast-knn-using-scikit-learn-intelex-for-mnist)\n* [Fast KNN using scikit-learn-intelex on synthetic classification data](https:\/\/www.kaggle.com\/kppetrov\/accelerate-sklearn-algorithms-using-sklearnex)","35fefb84":"# Verbose Mode\nUse Intel\u00ae Extension for Scikit-learn in verbose mode to find out which implementation of the algorithm is currently used, Intel\u00ae Extension for Scikit-learn or original Scikit-learn.\n\n[How to use verbose mode on Linux, MacOS, or Windows](https:\/\/intel.github.io\/scikit-learn-intelex\/verbose.html)","a34548a4":"# Scikit-learn-intelex in Kaggle","18a3d1b5":"Check the list of algorithms accelerated by sklearnex:","9fcc539a":"<a id=\"2\"><\/a>\n## NuSVR\n<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to Algorithms<\/a>","089a3e4a":"# Supported algorithms\n\nThe patching only affects [selected algorithms and their parameters](https:\/\/intel.github.io\/scikit-learn-intelex\/algorithms.html).\n\nYou may still use algorithms and parameters not supported by Intel(R) Extension for Scikit-learn in your code. You will not get an error if you do this. When you use algorithms or parameters not supported by the extension, the package fallbacks into original stock version of scikit-learn.","8e0a5f0b":"Notebooks with Logistic Regression:\n* [Fast Logistic Regression with scikit-learn-intelex for TPS - June 2021](https:\/\/www.kaggle.com\/kppetrov\/tps-jun-fast-logreg-with-scikit-learn-intelex#%F0%9F%93%9C-Conclusions)\n* [Fast Logistic Regression with scikit-learn-intelex for TPS - November 2021](https:\/\/www.kaggle.com\/alexeykolobyanin\/tps-nov-log-regression-with-sklearnex-17x-speedup)","44d3bb1f":"<a id=\"6\"><\/a>\n## Stacking\n<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to Algorithms<\/a>","fd058f87":"**Intel(R) Extension for Scikit-learn** offers you a way to accelerate existing scikit-learn code. The acceleration is achieved through [patching](https:\/\/intel.github.io\/scikit-learn-intelex\/what-is-patching.html): replacing the stock scikit-learn algorithms with their optimized versions provided by the extension.","230e2786":"* Directly from the script:","2ae99d1f":"<a id=\"3\"><\/a>\n## RandomForest\n<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to Algorithms<\/a>","7b188f64":"* Patching several algorithms:","feaa27ad":"To undo the patch, run:","8231ded3":"## Verbose mode output\n\nFor example, for `RandomForestRegressor` you get one of these print statements depending on which implementation is used:"}}