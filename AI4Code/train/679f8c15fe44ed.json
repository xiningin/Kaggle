{"cell_type":{"99ccd1ec":"code","d58c6645":"code","d73e3a68":"code","010cb9e3":"code","067b52bf":"code","4bb4ef52":"code","25875e71":"code","b9d11240":"code","e249486b":"code","a468eaba":"code","bb0613f7":"code","71889e01":"code","1119bcc4":"code","b74ed61a":"code","fd206b9f":"code","4c92cdad":"code","a4b01854":"code","1cbda69a":"code","d5b405cf":"code","bc477da1":"code","edbdab6b":"code","376de16f":"code","e661a1e2":"code","8f066ca2":"code","f339b7b8":"code","897e3329":"code","05eee981":"code","7f20f875":"code","3b8df020":"code","ee8acec2":"markdown","a1b706dc":"markdown","1920b42f":"markdown","03cfa462":"markdown","87d0fe52":"markdown","44c162c6":"markdown","14a88b79":"markdown","e39070cb":"markdown","c8ea3b2c":"markdown","3a1dc04a":"markdown","66b6af49":"markdown","17b5cdc0":"markdown","403a7aa1":"markdown","2f9d3e28":"markdown","ae9e459a":"markdown","ebc64c87":"markdown","ecab6609":"markdown","97f6c739":"markdown","83d441c0":"markdown","701f37a9":"markdown","5703f1bb":"markdown","992e9343":"markdown","23b0e3e2":"markdown","bcf7c75b":"markdown","9ef35c24":"markdown","f1cd4598":"markdown","67743e49":"markdown","cc860e6e":"markdown","85172831":"markdown","acfb5bf6":"markdown"},"source":{"99ccd1ec":"# Upgrading pip\n!pip install --upgrade pip\n# Upgrading numpy\n!pip install --upgrade numpy\n# Installing Sentence_transformers\n!pip install sentence_transformers\n# since i wasn't able to install hdbscan using pip i have to use !conda install here \n!conda install -c conda-forge hdbscan --y","d58c6645":"import pandas as pd\nimport numpy as np\nfrom sentence_transformers import *\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import MiniBatchKMeans\nimport matplotlib.pyplot as plt\nimport re\nfrom nltk.stem import WordNetLemmatizer\nimport nltk\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize \nimport matplotlib.cm as cm\nimport torch\nimport sentence_transformers\nfrom lexrank_utility import *\nimport umap\nimport plotly\nplotly.offline.init_notebook_mode (connected = True)","d73e3a68":"data=pd.read_csv('..\/input\/pfizer-vaccine-tweets\/vaccination_tweets.csv')","010cb9e3":"data=data[['text']]\ndf=data.copy()\ndata.head()","067b52bf":"\n# Function to preprocess the tweets data\ndef preprocess_tweet_data(data,name):\n    # Lowering the case of the words in the sentences\n    data[name]=data[name].str.lower()\n    # Code to remove the Hashtags from the text\n    data[name]=data[name].apply(lambda x:re.sub(r'\\B#\\S+','',x))\n    # Code to remove the links from the text\n    data[name]=data[name].apply(lambda x:re.sub(r\"http\\S+\", \"\", x))\n    # Code to remove the Special characters from the text \n    data[name]=data[name].apply(lambda x:' '.join(re.findall(r'\\w+', x)))\n    # Code to substitute the multiple spaces with single spaces\n    data[name]=data[name].apply(lambda x:re.sub(r'\\s+', ' ', x, flags=re.I))\n    # Code to remove all the single characters in the text\n    data[name]=data[name].apply(lambda x:re.sub(r'\\s+[a-zA-Z]\\s+', '', x))\n    # Remove the twitter handlers\n    data[name]=data[name].apply(lambda x:re.sub('@[^\\s]+','',x))\n# This function is to remove stopwords from a particular column and to tokenize it\ndef rem_stopwords_tokenize(data,name):\n\n    def getting(sen):\n        example_sent = sen\n\n        stop_words = set(stopwords.words('english')) \n\n        word_tokens = word_tokenize(example_sent) \n\n        filtered_sentence = [w for w in word_tokens if not w in stop_words] \n\n        filtered_sentence = [] \n\n        for w in word_tokens: \n            if w not in stop_words: \n                filtered_sentence.append(w.lower()) \n        return filtered_sentence\n    x=[]\n    for i in data[name].values:\n        x.append(getting(i))\n    data[name]=x\n# Making a function to lemmatize all the words\nlemmatizer = WordNetLemmatizer() \ndef lemmatize_all(data,name):\n    arr=data[name]\n    a=[]\n    for i in arr:\n        b=[]\n        for j in i:\n            x=lemmatizer.lemmatize(j,pos='a')\n            x=lemmatizer.lemmatize(x)\n            b.append(x)\n        a.append(b)\n    data[name]=a\n# Function to make it back into a sentence \ndef make_sentences(data,name):\n    data[name]=data[name].apply(lambda x:' '.join([i+' ' for i in x]))\n    # Removing double spaces if created\n    data[name]=data[name].apply(lambda x:re.sub(r'\\s+', ' ', x, flags=re.I))","4bb4ef52":"# Using the preprocessing function to preprocess the tweet data\npreprocess_tweet_data(data,'text')\n# Using tokenizer and removing the stopwords\nrem_stopwords_tokenize(data,'text')\n# Converting all the texts back to sentences\nmake_sentences(data,'text')","25875e71":"# Getting a model\nmodel=SentenceTransformer('bert-large-nli-mean-tokens')","b9d11240":"embeddings = model.encode(data['text'])","e249486b":"def find_optimal_clusters(data, max_k):\n    iters = range(2, max_k+1, 1)\n    \n    sse = []\n    for k in iters:\n        sse.append(MiniBatchKMeans(n_clusters=k, init_size=256, batch_size=512, random_state=20).fit(data).inertia_)\n        print('Fit {} clusters'.format(k))\n        \n    f, ax = plt.subplots(1, 1)\n    ax.plot(iters, sse, marker='o')\n    ax.set_xlabel('Cluster Centers')\n    ax.set_xticks(iters)\n    ax.set_xticklabels(iters)\n    ax.set_ylabel('SSE')\n    ax.set_title('SSE by Cluster Center Plot')","a468eaba":"find_optimal_clusters(embeddings, 20)\n","bb0613f7":"clusters_2 = MiniBatchKMeans(n_clusters=2, init_size=1024, batch_size=2048, random_state=20).fit_predict(embeddings)","71889e01":"def plot_tsne_pca_umap(data, labels):\n    max_label = max(labels)+1\n    max_items = np.random.choice(range(data.shape[0]), size=3000, replace=False)\n    \n    reducer=umap.UMAP()\n    pca = PCA(n_components=2).fit_transform(data[max_items,:])\n    tsne = TSNE().fit_transform(PCA(n_components=50).fit_transform(data[max_items,:]))\n    uma=reducer.fit_transform(PCA(n_components=50).fit_transform(data[max_items,:]))\n    \n    \n    idx = np.random.choice(range(pca.shape[0]), size=320, replace=False)\n    label_subset = labels[max_items]\n    label_subset = [cm.hsv(i\/max_label) for i in label_subset[idx]]\n    \n    f, ax = plt.subplots(1, 3, figsize=(14, 6))\n    \n    ax[0].scatter(pca[idx, 0], pca[idx, 1], c=label_subset)\n    ax[0].set_title('PCA Cluster Plot')\n    \n    ax[1].scatter(tsne[idx, 0], tsne[idx, 1], c=label_subset)\n    ax[1].set_title('TSNE Cluster Plot')\n    \n    ax[2].scatter(uma[idx,0],uma[idx,1],c=label_subset)\n    ax[2].set_title('UMAP Cluster Plot')\n    \nplot_tsne_pca_umap(embeddings, clusters_2)","1119bcc4":"clusters_3 = MiniBatchKMeans(n_clusters=3, init_size=1024, batch_size=2048, random_state=20).fit_predict(embeddings)","b74ed61a":"plot_tsne_pca_umap(embeddings, clusters_3)","fd206b9f":"# There might be some problem with working with matplotlib if you install this package at the start\n!pip install --upgrade bertopic[visualization]","4c92cdad":"from bertopic import BERTopic","a4b01854":"model2 = BERTopic(language=\"english\")\ntopics, probabilities = model2.fit_transform(data['text'],embeddings)","1cbda69a":"model2.get_topic_freq().head()","d5b405cf":"model2.get_topic(24)","bc477da1":"model2.visualize_topics()","edbdab6b":"model2.visualize_distribution(probabilities[0])\n","376de16f":"model2.update_topics(data['text'], topics, n_gram_range=(1, 2))","e661a1e2":"topics, probabilities = model2.fit_transform(data['text'])\n","8f066ca2":"model2.visualize_topics()","f339b7b8":"model2.visualize_distribution(probabilities[2])\n","897e3329":"query=input('Enter the query here :')\nquery_embedding = model.encode(query)","05eee981":"top_k=5\ncos_scores = util.pytorch_cos_sim(query_embedding, embeddings)[0]\ncos_scores = cos_scores.cpu()\n\n#We use torch.topk to find the highest 5 scores\ntop_results = torch.topk(cos_scores, k=top_k)\n\nprint(\"\\n\\n======================\\n\\n\")\nprint(\"Query:\", query)\nprint(\"\\nTop 5 most similar sentences in corpus:\")\n\nfor score, idx in zip(top_results[0], top_results[1]):\n    print(data['text'].values[idx], \"(Score: %.4f)\" % (score))","7f20f875":"t=sentence_transformers.util.semantic_search(query_embedding, embeddings, query_chunk_size=200, corpus_chunk_size = 100000, top_k = 10)\nidd=[]\nscore=[]\nfor i in t[0]:\n    idd.append(i['corpus_id'])\n    score.append(i['score'])\nprint(\"\\n\\n======================\\n\\n\")\nprint(\"Query:\", query)\nprint(\"\\nTop 10 most similar sentences in corpus:\")\n\nfor score, idx in zip(score,idd):\n    print(data['text'].values[idx], \"(Score: %.4f)\" % (score))","3b8df020":"#Compute the pair-wise cosine similarities\ncos_scores = util.pytorch_cos_sim(embeddings, embeddings).numpy()\n\n#Compute the centrality for each sentence\ncentrality_scores = degree_centrality_scores(cos_scores, threshold=None)\n\n#We argsort so that the first element is the sentence with the highest score\nmost_central_sentence_indices = np.argsort(-centrality_scores)\n\n\n#Print the 5 sentences with the highest scores\nprint(\"\\n\\nSummary:\")\nfor idx in most_central_sentence_indices[0:5]:\n    print(df['text'][idx].strip())","ee8acec2":"> **From this we can see the largest blob shows that the topics in it are proud , thankfull ,etc. which shows the positive tweets for the new pfizer vaccination . The second largest blob is about the topics 2nd pfizer vaccine or 2nd dose of the pfier vaccine :)**","a1b706dc":"# Text summarization","1920b42f":"# Importing The Data","03cfa462":"# Preprocessing The Data","87d0fe52":"## Well we can see the highest probability topic in the data is about if there are any allergic reaction to the vaccine to know if there are any side effects to the vaccine .\n\n## After using the n grams model we can see that the topics have words like \"allergic\" and \"allergic reaction\" ","44c162c6":"## Amazing right !!!! I loved these results :)","14a88b79":"## Finding Optimal Clusters For The K-Means Algorithm ","e39070cb":"# Importing The Packages","c8ea3b2c":"# Pfizer Tweets\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTEhMWFRUXGBgYGBgYGBcVGBgXGBgXFxgXFRgYHSggGBolHRcXITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGy0lHyItLS0tLy0vLS0tLS0tLS0vLS0tLS0tLS0tLS0uLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAMIBAwMBIgACEQEDEQH\/xAAcAAACAgMBAQAAAAAAAAAAAAAEBQMGAAECBwj\/xABMEAABAwIDBAUHBgsHAwUAAAABAgMRACEEEjEFBkFREyJhcYEHMpGhsbLBI1JygtHwFDM0QlRic5OiwtIWFyRTY5LhFaOzQ4PD4vH\/xAAZAQACAwEAAAAAAAAAAAAAAAACAwABBAX\/xAAxEQACAgEEAQMCBAQHAAAAAAAAAQIRAwQSITFBE1FhMnEFkaHBIiOBsRQVQmLR4fD\/2gAMAwEAAhEDEQA\/AKvik5gXAOqIv9+NS7DISVK5o48TKaHxOPCkFEZAPzdRIETPKlWJbXATccY07qXKW1WCH7QeWSpKpF7x6RUeAwLjqg2UdXWQIkcSJ1rjZRICsx6ojtuSEj4UycV0bgDaiRGZEnnZxFvE+NDihv5ZHLgj2rs1DakoSLcx2fGiti4dCVFaetAIg9tKn8KUEnQG4vwNxTbC7SCG0ISBfzhxHb2zzrQ8S7XYCfPIxxryoCQLnjqB4i1MMCykoIVGaNaQYpLglSDImomsY4SAZFI4TpIZZasPgmUiXVg9lB4zDIdUEtWHtpW7h1Zc54HjT1lCXES2YcAkRRWuikr5FO1MCGsqkphXHtpYcQQvQ3prtDGqUUg+cNahUgKN9RegUop0D30dPRlk1rDuJUBCAY40HjHCJSamaxKuiyJEczVx+WXFnTOLT0pJSANIpttJhkpBCYMTalWxw2V5lXUNKk2xtBRWRlyCKa42gk6AcRiVJIA80G1NX2UOth0WNs0esUvfSpSRa3Dto1OHcZbkQUm5HI0uNVRU07srm0YSFRmgTp2dtJmMQhaglQkkxm5dxp8t5OaFpmTJ5d1Y5siF9IhvKBoB7aknvnwVXARgmkoy5HJIGvI8qIXmiVnMJPhNDswI4a2jU\/bUrqNL03akyJ8AT7k9UWvWi3CRpqr2IrvGJi9Y4QW0njKvYimLwA0YqQi47AezWhVKqdxdoEwTN+dDro4oGTIjTXZ+IzOBLgBEcRelik1M0\/cSqI4xQTRceDjajiM1hBGnLWisJtrOlDTicxzAAwONrzpQW0BICqAzRHC+vH0\/fSk8SiHbTLJstxCsX1EkQysKmNQ4jlTDbn4hf1ffTSLdL8er9mr3kU+28P8ADr70e+mnYlSSJJ3yVYCsrAmsrSZgYqKgI0++tOdjtF4lCyZSmQdTqBB5ij9l7AT+DgrkLVcRwnQRTHZ2yUt3MlRBBvaJB08K5MMbcrfRsSFWNwHRYdzNE524V2Z0mkTmLsAngrMDyJ1jsNXvE4JDicixKSRoSNL6juocbvYb\/LP+5X21rxtRVAyi2VzEgKZSrPmUTFzMACSJ4HsqJhwJ60WmBe9uY+NWgbAYGiD\/ALjUT+xmhBQm\/aSaJzVA7GR4NQICjYEeup8MlKCVKHdUmHwAKYUI5RW3mRluDbSaQ+eQ6IMYvpNZANKl5mTnQo6+HGnhcSpJSbZdDQX\/AE0LbEEzPhS3F3ZTTI9nO9MVFVlUYGvmpkihlYNtkghRnjenS1pUkBFu2pHG7LQvTh0qnMOtXLey4XrCTrUp2aCScy57x6rURhkZSIUVdhg\/CmONO0RKxVimkheRk8bnlQO0krC8q1TAkHn2VYsfhZMgZTQ2JwKVwVkgi1o+ymRdPkqUbQoViFIQASNZHExTYLC20SrXWk6tlFTqkiQkfna2olthIISlWaOfOs7u2yJvyGYjZjZWlM8Qaza+K6FzKm6YreEfzuALOUp83tqbH7NS6ZUo+EU2EVIttroTuLuTl01EaT7KicJ11Gk9tNxsZHz1er7KxOxkDRa\/V9lOoHkR4twKSALkezU1CqyEjtV7EVYBsJv5yvV9lb\/6EiIzKiZ4cY7OyrSoFpsrqnBlA4ifhUCjVnO77fzler7K1\/Z1v5yvV9lHwC4srC1WFcTVp\/s4185Xq+ytf2aa+cr1VTL2sqjzxIy8BUC02mrl\/Zhr5yvV9laO7DXzl+r7KW4ewVMS7m\/jl\/sz7yasG3Uywocyj3hWtnbFQwsrSpRKk5YMcweA7KJ2iwFoyGYKhprYz8KOKot9FLyRa3prKtY2K12+hP2VqmbhfpldVvbiCQno2jlF7LAB8FU73f2m88pQdShEJkBOadRc5uF6preIUUFISElKYSQBJ76d7h4l1x94ukqV0YuQBoQBp2VjT5H2WDePHrw+HW8jKpSSmAoGLqCTMEc6qP8AeBif8pg9wX\/XVo32\/Ine9HvprznYuDS6Sk9VRuDE6Xj78qIlj9XlDxA1Za9Cx\/NRO0N91NlKUNtrSUJUTKrKUJImaRbSaS+tKW0daCCAbyL2nWljGEvfT0EdkVCrLezv28ofiWo0upevAVY9j7cS831yhLhEhIzR66rGwdkYZ5otlwocBIgmRE2gG1MMFuqll2VuZRHVNUWrHGKW4lJytpXzAmq4N8Vs\/JDDiRqFKIIn6tG4rD4rCy62S63qrjbnFU3HYovLccPGDHLuqkiSlRZ9obUSkB1QnNeJ+NGYjegMtJWlKVhXAqiPGDVIddUpASTYaVypRUkJOgqKO0UXjAb5lxYQhlIm0lwi8TAGW+lNcTtJxGjQV3KPq6teaMIKYUkwUmrxsPbRcCU\/nm16jYyLDXd9GlJgphY1BMfClLu+6c2Uspj5wcmPDL8aM3h2EhLiVuAdaq\/tZDQQEIQDB1qlLwWx+\/vGWxnSylYIueky\/wApoHZe3UvPBPRdGVdaekmPDKKrDDhmJ+ytJdXmSUmVAmI5fZVNWqYNnppcQV8DlMdtJ9qb2lhxaCwDl\/1YJHMDJXW5iC444VRIAFF43ZKHFwtAUUmQeMcjVRyNMlUJR5QR+jf90f01seUAfo3\/AHB\/TXO2dgt5VOMpyqAMiKrhdI7ZGsfeIpnqN9EstjO+qlaYU93SgH0ZeyunN81gScIY\/aj+mqZh3ClWbMoHiR970xxRJbSrOq5Nza1tey9U8kkwlTQ+b35KiAMNE8S6I92sf36KPOwp\/eD+mqzgUoCgoqIIIITHHnPKpdvlBhKCDPWJi8ngOQF7VXqT3USltsd\/3hj9GP7wf01v+8K8fgpk\/wCoP6apYZHG1HYDCBShbtCu0XE0bm0CnZaG9\/5MDCmf2g\/pqR\/fpSBKsKY59KI92q3gkgOGTFxaito4cGZuOAHGdfGg9aV0Go8WWnd3eT8LWpPRdHlTmnNmmTHIUdtzFlpouBOcpUmxOUGTBvwiZ8Kru4jcPOWj5Md3n2inu9LgThlEiRmTbn1gIp6k3GwPIiG+rn6KP3v\/ANayq4jHvJEJCSOGtZWf1MvwMqIweGUkJPj3U33JMuufQ\/mTSYgU93OHyrn0P5hVxXICYz3y\/I3O9v3015sBF0yk9nCvSd8vyNf0m\/fTVIRh5SDEk93GmbbRUnTFjZXmmTMzPGe\/WmGGw7YeSXZKDc6zRBwiYGs0VjMFCUmLFIOs1GuQUM\/7LsO9fDv5TwBv\/wA1JspuV\/g+KOeNDNA4HDAMqcAMgxRb+yHA2MQFdYXI7KDzQxdWQ7bGKwZU2FktL80m9uU86q6GOqvuHvAfGrM5tpxSC2sBSSOOopU03Zf0R76KOhbYsQxXZZ50eGrCpFJB4X9tTaVYuDUacaN2G8G3krVoK30Vc9HUUG+ETclyWja21231oCj1RSLabKEOlKDKVDssaFLBrYZ502OiyS8fmLlqYJ9gxw3UJjTs9lD4fqqm47rU0KZ4TWujHKnR\/D5+WhT1kfCCdkbcGHWpQvm1A9tSbC2s47jAVKsrhw7KD6OukCCCNRRf5Z\/uKetT8Fv2vtJttYaUmc4Nx8aoy8GQ6UkECbd3CnOBxCkr6ZQzCQCTeJp3trFM4jIhuBlgzzNIno5wf7joZ4SRTW9nZlHhB14a1vGPEICRwUpM8YASOPfTbE7PW2qYKu0aeqluIYtxJzKUYFoISO+bUv8Aw2TvtfAbzw66fyL2muqTx0FaeUpapX2DgLDupiGwSByEcr1Epq57KHaXYHimBaL\/AAqfZaQFgcDr3ca6LdE4NkTmVoNOBPdQyjwFF2zC02HLGSCYtqec+imDsEAgHq6dvM0K2tKVlwQNYFp7+Qohp1xZlCZHbrpeBoazzT7HxfgY7qH5Zdj+KGvHrkzTPeVnNhymNVJ7OM0r3UUovOZtQ2ns\/OOoptvGkFiCYGZPtrXj+gU+ygubJcJ0A8a1TheEXJ6x9enCsqqYNgymyCRbWLU63PTDjn0P5hSgop1ukPlF\/R+IoF2Wuw\/fAf4RQ\/Wb99NVbB4JQF+InX73q074fkqo+e374qpYZKyIB9NOj0DPsnTgyUqMWHprHMUVICIsKxL6wCmLcajy8qLaBfsTMIXZAJhV4+\/dVgY2osApWiUEQeHo56GgMNnWlJkwiRJ7bwKmfxyFs5T5wMiltWxkXSE+LQkKOTTh9lZgWZKhrKdPrJrFCpEjKCTaU253i8cu2mKDk6QpyUeWDFEW5VooNSDvqWxHKt+PRVzMxZNX4iQJbEX1rWWiEpm3Gp8Js9bq0NtplazlSO3t5AamtkYQxrjgyynKb9wVszY9sVMnZL5Ehh0jmG1kemK9e2Ru7htnMqeWApaE5lukSfotg+bew4njSDYW92NxWObbRlQ0VdZvKD8mLqJUb5oGogTFqyLVOW541wvLNf8AhlGlN8vwjz\/DYIqKgbFIuDY+IqRWEzJCh9te7ba2G3iWylaRmg5Vx1kHgQeXMaGvD0PZOsjQm6ToDF6mDUPNddombTrFV9MA6EzEXtUrOHE5Va+ypjiZUVZbmPVXOKUSrPGWdAO6K28vgx3Fc\/8AqNqlAgcVW5RcX9NQss9ZPESNKnD6cgEda9cLJGhsIqlF8ouUlaY8fUWjmaUCY803pBiXytZUoAE6wKNCVBQE6j21I7gEpQcxkzY99Y8e3DJRfNmvJuzRbXFCZSJqEpgHl99aOSkTB0PGo1IEkAyPhWjLp45Pv7mfFnlD7ABTR+HwZKCbAD0+FRqbCDz5VOw5YgyZOnCuNli4ujrY5JqyHEMJygpIJSrThEfbUaMWswJskkgC2ut9aNagSAIkeEUPhmpXBIHfWaS9xy+BvuwsqxDpP+Wn3j6aZby\/iD9JNB7ATGJeEzDab8+saO3hTLMfrJ+NaMX0oGXkrCcSY1rK2pgCspm1CrZpa5USLSSbcO6m+6vnr+iPbSdVOd1fPc+iPbWehkewve\/8mP02\/fFJkKWoWTeL2P34U53w\/JT9Nv3hVcw+NcEi8kX9FMStEk6YRiEaAAzxtah0N2vzimbGDLyApaojgPjXC2coPb6qJPwC4+TpnMllYDasq4MwIGXUzwpYhcVcdg4VKsI6Tex7hHGqi8wULIOo8bG4PoNHig8k9qF5ZrHHczEuBN4lXbcJ8OJ9Q9np3k72MhWE6V1tK1OrUoFaQs5R1RdQ5pUfGvLkoJIAEk2A5k6CvoTZOADLTTI\/9NCU95AAJ8TJ8afrVHDjUI9v9hGjlLLNzl0itbe2hgcIsNuYVKyU5zkZZMJJKROYjiDXWzsDsvHJV0bDcpjMAjoVpnQ9SJ7wSKou+O0+kxz5HmhXRjub6p8MwJ8as\/krZl55wCwbSkntUQY\/gJ8aXPD6eHfbuvcbDNvyuFKhNvnud+CBLjRK2SYv5yFRIBI1FjB7IPMtvJVsqelxKuB6JueFgVn1pE99WbyiuJGz3c1pLYHf0iT7AaM3QwHQ4NlEQSnOr6TnXPomPCglqZS09S7boKOnis9rqrKx5Wcbkw7TIN3V5j9FsA+8pJ8KoGxdoqwryH27lMyDoQRCknvB8LVefKDsDG4rEgssFbSGwlJztpkklSiApQPED6tVf+w20f0Y\/vGv662aV4o4VGUlz3yvJk1KyvM5Ri+OuB5tbymKcaUhljolKBBWpebKDY5QEi+tz6Kp7eJbKFAp63Dl41Pj938Q042wtmHXIyozIJOYlIulRAuDryow7ibR\/Rj+8Z\/rp0IafGuGlfyJlPUTlym6+CuuDjxNdpaTlme8U\/G4u0f0Y\/vGf66B2vu1isMgOPtZEFQSDnbMqIJiEqJ0B9FPWbG+FJfmhDxZFy4v8mKQnlRIUAiCL+rxrez9nOvqyMoWtesJE+JOgHaasg8nmPUJKG0nkXBPjEj11WTLji6k0i8WLJJXFWVaTIP3FTJXKZUT9+dSbW2TiMMsIxDakEgxMEED5qhIPgbSKn2Rsp15J6NBUJy6gdaASLnkRS88o+nuTX3G4FL1NrT+wqgXi44GuQnSmWO2JiGgjO2YcJS2ElKyoiJASkkzccKZDcPHlGfoRp5pWjN6J9WtGs0FFOUkA8M3JqMWIl4dJGtRMJHAxOvdepdCUqTBEggiCCLEEHQzQqUjXKIrna2PKZ0NJL+FolxIOaEGUjjXL+EKIKoMifTRACYFrRwn11A\/eBcn4dtc5mwZbppPTOT\/AJaI7syopnvH+J+un40r3S\/HOz8xHvKpnvKPkfrp+NPx9Ip9Fd6QcZ9ArdFt7PbIBL0HllUY8RWUy4gVIAa1p\/u\/5yvojhHGlmOw5C5AgKGYDiAbQaY7toIUueKR7Tas3kYuybe0ThomPlG78utSXDNZYJJk\/nRY073sTLETEuI9tKsGvIjrElI7LGjT4I1yNMK4AOU68qGx+GMynSL2oXFYgp6xBSDw+ypWt5ChISlKVEghU+o1Ka5Ja6A9nbWW10iUqkLSUqSZiDx76EknUzR2xcMhcqXCSFSeRTy9NQYlsA24k119FFKN+WcnWNt\/CHO4ez+mxzCSJCFdIrub6w\/iyjxr27FKUlC1ISVLCVFKREqUAYF7XMV535Hdn3fxBHzWkn+Nf8lWffzeJeCYQpoJLi15QFAkZQCVGAR+qPGsGsby6jZHxwbdGli0++X3KLgtxMa5ZbSW5MlS1pNzqYQSSfCvS93dht4NgNIMxKlrNsyouo8hAAHICvO\/7fY1SZzto7Utj+aaRbW23iHrPvrcHKYT\/sTCfVTp4M+XiTSXwLhmw4uYpt\/Jad7tro2hicPgmDma6VOdQ0WrQlPNKUZr8SeyvTjAvoB6gK8i8lWBz41ThFmWyfrL6g9RX6K9B35x3Q4F9Q1Uno097hyW7gSfCs2pxpTjhj4\/ux+nyNwlll5\/sikueUPF9YpDQEmAUGQJsD1rmK9PwwXkR0kZ8qc0CBmgZoHATNeLboYLpsWwg3BWFn6KOsQe\/LHjXtG0MUGmnHVaIQpZ+qCamshCElGKL0s5STlJnj29O31p2qt9rKSyro0ZhmT1ElBkTfrFZ9FMdn787SfcS0ylla1cOjMAcSo5rJHOqzhcAvEPBDQzuOKJ7JN1KUeAFzNevbvbCY2ewrrCYzOvKtMXP0UDgPjWrUSxY4RTjcqpGXBHLOcndK7Y0YzIbBeWkqSmVrAyItckAmyR215ltlxza+OQw1KGEAqCj82QFOkfONgAezSTQu9++i8Uvo2ZTh0njYukaKXyTyT4m9hZvJOz8g86fOU7kn9VCUmB4rPopEcUtPB5X34+LHSyxzyWNdefmiwLRhtm4UlKcraIsPOcWbCTxUTx4dwqlbH3px+KxraUKAbKxnbShJSGgeuVKIzTFpkXjuq174vYFQQ3jllIkrSkdKJjqyejHCefGkjO+WzcKjJg2lKn5qSgE81rc6x74NLwpuLe1yk\/LXH5jcjSkluSS8efyGHlNLf4EQuJLiOjnXNMmPqZvTUm5WyUowLQUBK5dP1z1f4QmvONu7Wf2hiGwq2ZQQ2hPmpzkCe06SezhXtTbQSlKE6JASO4CB6qmeDxYowb5bsrDJZcsppdcFP3y201gShTbaV4kpIbzXS2gnrLIF5UbcJy9lyN196G8Rhwt51pDqZDiSoIAgmFAKOhTF9JmvOt4Mf+EYl5wmQVEI4whPVTHgJ7yaUdGLzr3Vqjo4PGk+\/f9hEtVJZG117B+9GOQ7i33Wz1FKsRxgBMjvInxpADeB41JiXCery17600kTSdQ1aiulwMwp02+3yFMtecL8AKndATFoA9JnjXBd6sfeK5DhVY8qwStmqNBO6n4576CfeVTTeMfI\/XT7DSzdMfLO\/QT7yqZ7xrysg\/rp+NaMfSBZVik86yuiusrQID33cxuqFCwOgsbU02CokqJ1KRPfMfCluOwycylKJF407aYbvZczgSSYA1tqTWPyafJJvQjMykc3Ee01Fh0oylChKY4UTvAOo2P9VH81BqeCFEjiKKrISvsMQkEWToFdvCq6cEsrcKEghM20kdnaKcuY4qEHTu5UG890eUNGVKvob9lC20VSYBsxwQM5MXmPGicRhstwZFtda5wuGKnCiIM+2pMZhVtqUCLV3dPNOEafg4mog1KVrye1eT3Z\/Q4BkEdZYLp\/8AcMp\/hyjwqkeVXHhWMba1DKBI16zhzH+EIqqI2\/jAABi8QALAB5wAAaADNUbT5ccKnVqUtQ89RKjmEQVE3NhFJx6OUMryyd9\/qNyauM8axRVdfoMWsUAR0SAQZBHCbXM8bUKeoTmTb83j6Pspuw22iFKgBV1JTzFKdtYhBJCJAF+7kO2nQdukgMi2xtvk9M8lOBCcK49F3XDH0WxlH8RXQfldxfUw+HGqlKcP1RlT7yvRVy3dwPQYVhnihtIV9IiV\/wARNeVeUfGB3HOX\/FhLY+qJV\/EpVc3B\/N1Tl93+yN+f+XplH+n\/ACN\/JDgSXX3johIbHLMsyqO0BI\/3VZvKRtPocHHF1aUR2Drq9SY8a8nwm0nm0ENPutXkhC1IBOkkJI4D1VzisY8+gdK845lNgtalxOsZiYrVk0rnm9ST49jNDVbMWyK5PVfJzspKMP8AhBTC37\/RbB6oHfGbxHKme8+wfwxsNKeW2gGVBAHXI0zTwGsc+4V4q1trFISEpxL6UpsEpdcAAGgACoAqVO38WY\/xeI7flnf6qCWhyb96kFHXY9mxxPQE+S5n9Id9CPsrjyebRaacxGDC5HSqLSlQM5HUUOUkISQON6of\/X8XqMXif3zn9VC4UTmJtw8Txo5afJKDWSVgx1GNTTxxo9i3v3XGNCCF9G43IBIkFKolKo0uAQe+16R7M8myEKC8Q7mSm5QiUpPPOs3jsAHfVUw+9OOQkJRiVwPnBLh9KwT66D2jtrEvnK8+tafmzCfFKYHqpMMGeK2qdIfPNhk9zjyWzZWGYe2yVYaCy0jpOqIQFhPRwjmMxCp5zV13hxnRYZ5yYIQQPpK6qfWRXjuAxLjZJacW2TY5FKQSBzym9SY7aeIUMrjzqk2JSpxaha4sTFTJpnOa54SRePMoxfHLbAHjkAsAI\/8A2KWOYuJ5n1dpqXHYhSuGnDl31E5gMiQomSq8cR303LqFFbV2xOPC5Pc+kSMJtzJqQJvNr1Gxaiui+2udk7N0OUbJkCI5Ry7aicSoco4VJBg1BiVWAmRy5Uph2Mt2SovOFX+Wnl85VHbzplj66fjS\/dYjpnY\/y0+8aY7zGGJ\/XT8adj6RT6K0V\/qCsrfT8wPRWU6hNj\/EMhURooXnieNdbAaUCsK1t7TWM2YbmesFn6wPDsrewAczhJv1f5qyeTU0b3l\/Ft\/tU+xVAHC3uQRzFG71D5Nof6yfdXS9LihwgCjt+AGTYh7okyACdIIpHiQqRJvwvYDl2UwdWVLEnwqDaCpJAAkcam0psl2M2ektM87+s0btJBKV5jceugNnYlTZtx4V3jsXZRGp4cIp+HM8UlfQjLiWSL9wGa6Qq4qBp4KsNeXHw51MkTXdhOM1cXwcSeOUHTQyal1YaTYnQ8LCaYbsbJU5jGWliR0gniMqOuoehJ9Na3dxCT1VoEomFCxi0iavXk\/ZSt9x0ea2nKm3FZ174SfTWHUZnjjJJeDfgwrI4yb8l6xD4QlS1eakFR7kgk+yvnvEvlxSlq85aio96iVH1mvYvKJjuiwDkGFOFLQ+sZV\/AFV4y4az\/h0OHL3G\/iE+VH2ISusaXBrlQ41zNdakcm3Ztaq1WLua5Xa1Sy6JA4QIqdtAIF\/CgiqpsKrrd9BNccDMbW6mGuEBOt6hZXF+JrnFvJBuRPL\/AIrptxWUlKfE1jyajHjjy+TdDDOcuOglGI6MZlQJoJ19S5VeOJ4+HKosmYyoyaK\/B7C8DlWDJnlLrg2wxJLnk6LKOiCk2UrVPMdtQOJOhmmCEhV4iBA+NQutEUqHAUuSHoU5ZOvZUhWYsIqRrDEC\/ETWlp5aGqk7LSoFIM1GGgTF6Ozi5N+A9FBOuGSmImltstIO3T\/HO\/QT7xppvKiWY\/XT8aW7rIh5wTPyab\/WNNN4B8j9dPxpsH\/DZbRUVdwrKYKwPMGaym+ohPpscbXVlw7UDKoQCD26nsrvd9wKzkCLJnt86hnsNlYSpSsxWQVBWkdnI0XsFCBnyCB1fHzqzv3NDTTI96YyMzYdMP8AxuUrfxLYsFE\/Gjt8x8m0P9X\/AONyq7gWQtwJJyg8eVMjG1YuUmnQ0bbtJHfQ6UJJPLkdfA07Tg0kK+UuB6aDQymb3t66iZGgbBiFWHdNS45Lam12yqHrrvDhsKGYEjsqXaS0FBCQdNT7KklZSZVXGpqfZ7qkrTm6yZuDcx2HnU3RV2yxJgCrTlHmLBqMuGh6xj20umG1JAHE61fdzNr4NhlYU+hKlLKlZjlAEAAEm3AnxrzjOpOt6HfUCNIJ1pU82SSqQ2OOEXaLx5TdtNvdA2y4hxICnCUKCxJ6qbpMTAV6aoi0HkfRQqsLJuIArlzDTpYcK0Ydd6UVFRv+plzaT1ZOTYQpJ5VAq3ZWvwKaBdwF9K0R\/E2+ofr\/ANCH+HJf6v0DRiUi2ZM94PsrHX06iTHIH40M3s7Q5hP2Ua01lN9KGWuyv6UkHHR4122wJWLURITHf9grhJWSDmjsFqafgwVYVpOGg0qWXJP6mNjihD6UbwzAAmP+KIUSRl05isDZ7qKaai5rPtSNF2RNYE5c\/CplJtepQtSh2ConHLxUVsrhE6EKyyBXDQE5jqOB0NbTilRANbVnPAVKfklrwcuuXIChEctBUPRCBe1SJRGaLTbwrmBZMwBxqvsEQKFp9VC49UxETEW50bmTJvbnS\/EOxNvGgZYz3WJLqpEQ2B\/EaZ7wD5IfTT7aS7mn5Z36A96nO8RPQ21zo96nQ+kpmsM6colN47KylThE3V6zWUGwlmYfaGbDqQ6rzDlBi54gU13bHVV9X40HtTCp7AOAHMXv20Zu2TlXMagCOUGoG3bIt7SAlmdOkP8A410pJBIhIBTrb0U23rZCwwkmAXFSe5tVL5EQFWjlrFHEXImK5ObQadlSjCpjXtNDOOAJg8fR31NCScua0Se+o0Q5ZwpKurwqbaTJS31o1ih8KFFQCb3rvaClZYPE+yja6A9xbU2GT1xFcCpsOOsKNoBPkPfFzPOhltAaGmSOtqON6hxWGBJi0UikNYBkorChKhlVauWGCRHGpUM89KFpBRbOsVs1MAoPhSZbMGmilG+XShAgk340UI0Dkd9A3QwQamQNJuKnWiKxpM2j\/ijAojSgai3KiFYeBwJOlaDNp9A51KWyB97ULkEkDIbMnsqYJIN6liU5QO\/tqJSSFZSapuwqolW6o2FkisaMaAd9dtM2kiK4XFDx0iNPycBHjXOSJmb6VM0rnWirSaKyUQPOjrGDFh3Ghk60W44kgyDrNCuKHC3GqKMBEEUBiHxliNJ\/4o5V1W1NLdoCNPGgrkuw7ck\/LO\/QHvU+3iVDBP6yPbSDcj8c5+zHvCnm85\/wyo+cj3hToEvgrRUTxrdDAntrKdtEbhvnUrNwhSqc7vphKxM3HrEn1k0rZJBWTc5p9NONiGUq7x7Kxp8mt9gO95MMx85fuGl+CazASqARfjFMd6UglgHms\/w\/80rwOI6PqiYPcRHKmrrgW+wtaUqypB0\/OPGtKaT1lDuEVvD4gBJkA8I41jTqTmzWHACpyTg6wnUWL3j1mjNvYUhtBsSJmLxJ1NLXlyQewUVisR8moAm+o7O+jd8AccimalZ1EcxUIqRNMFlkSFlIkADieMUI84DOUTHGum31QOKQBPKK5feCpGg4RSBzI2VCRBogOgAg3pc2I4VKlU8aCUS1ImcSItQyCa7KbWqTDIvUukTtkAvrRWUAXtIrpxoJVXZRmEHhQOVhKNADC4PPlRQSpR0rgsQbV0HCLeujk76BXHZzJSb1twyNawpjW5qNazULs2FGJJNbCpqMVoqq6KslzQOFRPOjnXCp7qjCR30e1FbmdZFGQBfWo1iSK6UVG81tU6mhkRGneqU3iRNL8fYkZRE+2intJoXEqBR20ssL3OTD7n7P+YU63n\/Jld6PfFJt0xGIWP8AT\/mTTjef8mX3o99NOh4I+iopcNZWk1qtFGYbYc9ZXdVi2MOqrvHsFarKxv6jYBb0+cx3uexNLXUidOfsrKyjQMjiukaGsrKIWbTR20R8n6KysopeCl0xUmuqysoxY\/w35KO+hsUKysrP5H+DtAoYce+srKGIUgpzzE1E151arKnggbivzK2ayspIZuoBrWVlFHsFkL3GolaVlZTUCzlegrYrdZVlETnCoVfGtVlMQDJU6HvFRE2NZWUuQSIleaaHeHVPhWVlAEGbp\/lCv2R95NOt5fyZfej301lZTYE8FQFZWVlaTMf\/2Q==)","3a1dc04a":"# out of all the above topics Topic 62 is the one with the highest probability which is all about the first vaccine dose followed by the topic of president joebiden recieving his first dose of pfizer vaccine","66b6af49":"# Visualization After Modifications","17b5cdc0":"This only works on one document at a time so we are seeing the probability of a topic in a doc at a time","403a7aa1":"# Thank you :)\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTExMWFhUXFxcXFRcXFxgXFxcXFxcXFxUYFxUYHSggGBolHRUXITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGi0mHyUvLS0tLS0tLS0tLS8tLS0tLS0tLS0tLS0tLS0tLy0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKgBLAMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAACAQMEBQYABwj\/xABCEAABAwIDBAcFBQYGAgMAAAABAAIDBBEFEiEGMUFREyJhcYGRoQdyscHwMkJSYtEUI4KSovEVM0NTwuGDshZjc\/\/EABoBAAIDAQEAAAAAAAAAAAAAAAECAAMEBQb\/xAAuEQACAgEEAQEGBQUAAAAAAAAAAQIRAwQSITFBUQUTIkJhcTKBkbHRFCNSofD\/2gAMAwEAAhEDEQA\/APQHOTYC4x35pCDz7\/7reZmF0d0nRLmhx3Jwb0bBSYPQ8lw3J9qbc1CyVXQDB9fqnWMQNYVIYxBsKQIauLbo3hK1LYROjuibTpyFvYpGRYtbq\/cx47fRZix73z0QpIeSEN5qxDE1LFbhok0uvjm+GXEv3+38Ay4nDnwRmssi6NJUSBupIHeQFFdjMbRvLvdF\/U2C1ZM0Ifikl+ZXCMp8JMmFi50appdpB92I\/wARt6C6hTbQzHcGt7hc+qyS9pYI9O\/sjTHR5X4o1AYm3vYz7Tmt7yB8Vi5cSmdvkdbsOUeQURwuVln7XXyx\/UvjoH8zNhPjlO37+bsaCfXcoE20zPuxuPeQPhdZ\/o0hjWaftLO+ml9l\/Nl0dHiXfJcnaZx\/02jxJRR7Qu4sb4EhUJjSAKr+t1H+Q\/8ATYfQ11Ji7XkNIyk7tdD2KblusO2QrX4fU54g69juPePq\/iuv7O1cstwn2c\/WYFjqUeh97dEOQFE92ijZ11DJuQ70IRtiHemHzaeKJxI+vkpTJuiOujSZFFdM7fuXCU9qbawe8iOujKodraroKWaW+rWOt7xFm+pCvOlK889rta4UzIRq6WQCw3kN13e9kUbcYtkVSaR55i37rDqSLjM+WpeONh+5i8LMefFNCK1HBGN88zpD7rLRM9TIUe3rwKswtN208cdO3\/xMAf8A1l6shTXrooOFPFHGeWYNu\/8Are7yWCKtmxvg9E2dpLNaANwC0sUYsqrChZuqtWuXSiqRilJWWrL2BCMhOxDRIRyCpsvobY0cd6IAX0Rhg5JLIWShdULmIgnFCDbWp0MSxsRPna3Q3J5AKrJljBXJ0FRb6AypGt1QSVZ+623fqo7nP4uPhp8Fiye0sUerZYtPN\/QtWZWi7iB3m3omZcTjbuu49g+Zsq4Ackluxef1Gonlm5M3Y8MYqiRJizz9hgHvEn0FlCmnndoXkdjbN+Gqfv2JNVR8Rakl4K11KeK4UysHApGsVsfqBtkD9m7EhogrTo12RWpFe9lQcPCD\/DVddGuEaG1MPvGUrsPTT6A8loOjXdGjsRPesy76Qpl1OVqpKcFQ30aXZQyyWZ5lOVe4CMuZp3GxHwPy8k7HRJ+KEtNwtOkn7vNGX\/clOo+PG0SXtvpbRAIgNydiddK9i9TZykuLI4aP0TxCbY26etoowrkYc1DlAUjIm3AIojQyXAcF5ftRO2bGadrv8umYZ5OQEYMzr8haNg8V6bU6C\/w\/ReH1FbduK1l9XltLEeBEj+tbt6KH+pJmdQ+42LmRQYGP2iuY+T70pmk5WaTLJ6ArUbARmaaaofve4nxccx\/9vRZnAOpBVzcohC33p3ZT\/Q169D9nlDlgZpq7Xz1VOFXIum6RsaaKzbceCkWTscWm5OCJdHcjnOLuy4CUBAxqPKsrNiDG9A4JTzQkXQQWwmJUgRAqAscY5BHJmc5pGosR2g3\/AEQl6SN1pWHg4Fp+I9Qs2rhuxsaEqkSOjSOplObGlyLz042zbFlf+zBR6+SOGN8shsxjS5xsTYDUmw1VvkVBtfVhsJga3pJqgOjjj94ZXPdya0G90ix2x1K2RdnsdgrM\/Qh\/Uyk5220dctINyNbK5\/Z1QezGlbHRmLLlljlkZPzMjXb+7LlstdkRyY0pNLojkQP2ZL+zKdkXZEm0m4g\/s6F1OrEMXZUUmhW7MdjOISRVtHELdFP0rX3AvnawOjseGqvxGqb2iUxFMyoaDmppoptOLQ7K\/wAMrifBStp8ZbS0r6m2awGRt7BxcQG6jhrfuBV6juSoDLDo1xjSYc97oo3SNDXuY1zmg3DXEAkX7FJDUNtC2RzEgdCpeVIQooksiiFEIk\/ZcAjtJZGijsklUkjrHt1+X6KLO1eiwT3wTMU+LQjRogc7kl1QlXiXwOMCCoOlkbHJuSQcFF2Rvgze1mJdDSTSfebG4jeNbWb6kLxPGP3WHUkPGZ8tS8cbX6GHwsx58V6N7Yqy1MyFmrpZGttxs3rf+2XzXm+37wKswtN200cVM3\/xMAf4586q1D5SLMK4sHoSKOniG+omfKfdZaFnr0hXsOzdFZrRyAXmsdLmr4od4poo4zb8TW3f\/XI7yXseCwWbdTAvI2T0JWWyea1OADl6JsC+71WgoqiSx3LROJhj0YkCWSJGQ+Ny6yaY+6IlJQ1hDv1RNQAI2FRksQhPshB63LUd43JuOK57FOYFzPaGp2R93Ht\/sW4Me6W59EgHilQUZ6tuVx5bvSyjYziradmYskkcTZjI2FznO4DQWHeVzYrckzTXNA4xicdPGZJDYaBoG97j9lrRxJWY2K6SWpqpqltqhpY0NP8Apxubna1vn9XKtMIweWWUVdaB0o\/yYQbspweR+9Jzd\/1bp29DiTH7m1MRYeXSRatv2ltgnSSHT8IGli6HEZG7m1MYkA\/+yLqvt\/CQVpLKh2pbldTVH+1MA4\/kl6jvXKr5I0BvpiWSIkiRoAiSyUFZys2piMNW6F13092uu2wD9Q0i\/wBoXB8lFGwpNlziVG2aKSJ32ZGOYe5wI+a83ilNUzDqJ4uY5Xidp5U2gB5ggrUbCYvPMyWKpIM0L7EgAXa4XYbDTn4WWIjqZf8AGal9LkDwXhsbxdshbbpGh1xke7K4g81bCNNr0HS7R6y9iBQ8Ax2OqYS0FkjdJYn6PjdxDhy7UzhmIOfU1UDrfunRlnuPYD6EHzSK\/JW4ssrLgEZCFEUQhIAlKUKEAm0se34\/QUaZuu9TJG3BHZ68FCc64uutoJ3Fr0M2XsaKQu7EDxvQ3OnJdJIzuQ80iyjveLp0MUWp0umiuQSbo8y2ombNjNMx2sdO0zydgjBldfstEweK87wQGpr2Ok+\/KZZO4EyyegctFU1t\/wDFqznlpY+R6V+V1u3o4T\/Ms\/s71Iqub8MPRN96dwZp\/AJFiyu5NmzGqijVez5hmnmqHb3vJ8yXf8vRew0TeqF577NqHJTtO7Nr56r0qkaLWWnGqiVTfIUkVx3JgDv81PsAoEjNf0TxK5quRwhNudYhDM8iyPogd5VtGXdzSH4XgqQ63NVreqdNyfa\/n9eKrlAthkXTJYPoiib9BBCCRvUunjtqd\/BY9RmWGDky+EXNpIdY2ycahRALzM5ynJyl2zoxioqkLSmz3N52cPgfkpN1BcbSMPPqnx3etlOVmCVxr0BNc2cqPbKE9AJWC74Htmb\/AAmzv6SfJXiGRgIII0IIPcdCrrFTp2V+JQippXhv+pHdveRmafOyrf8A5GW0lPI1meWYtjYy9ryah1zwALSpGyUlonQnfBI6PwBu0+R9Fk3DocTgpiOoKiSaPlaZm4dzgUUixLtehrNnscdO6WKWPop4XWewHM0tOrXsPFpCgYziM8tcyhgeIm9EZppcoe4NvlDWB2gJuNSOPZqm1Y\/Z6inrho0HoKjkY3nqk+67j2hNPeIMYL5CGsnpw2N5+zmY5t25uGgv4hSiJeUQfZXUFjKijcbup53Ae448P4mn+ZY7pTG6vadGz9Ll7XRTNdb+Uu81oMBpJRLLiUDXPBqJmvjG+SAkHMwHe4G58OxIzZySrop3Njc2VtVLJCHjKXMcGZm9bgbDsu1Pxdjqk2Xl+gxCCYaR1cLY3cuka0GM95GUean1uycf7x8PUmdK2cPcSQJGnzDTc3HamJ8Gmmw2CMty1ETY3MzEdV8fV1cL72381qY72GbfYX5X4qpsrcvQqMW2dineJQXRTtFmzRHK+3J3B7exwKiYPgE8VU+olqGyZ4wwgR5CS0jK42cRewtorXFcWipwwzOLQ94jacrnddwJAOUG246lRYtoI3VU1LlfmhjbI99hls4A2GtybOHDmhyBN0WzmppzUxg2KxVULZ4STG++UkFp0JBu06jUKYQh0K0R7Lk6WICEwpwUGRtiR238Dr81OUStb1geYI+vNbdFKslepTnXw2Qy\/wBFzRolO9cL6fJdoxJiN0VNtZXiCmml4sjcR3gHKPOyupHLzv2zV+SjEYOsr2tt2N659WjzRuk2Olbo80xb91hlLFxnlmqXX32baCLw6sh8U02G1FBGN9RO6Q+7GBEy\/wDE6TyR7fvAqWwtILaaGGnaQbgljAXnT87nq0bSXr6en4U8MTHcs+XPJ\/XIfJYUrZtPT9mKTKxgG4ALWRnnoqrBorBW4C3eDN5OedbeqbfECbpyS1xfzTT9\/wD2ogMakvySuGiIDtQyNKtRjfqN5Lp+GPs+u9MM0U+kaXfXqhle2NvoGPl\/UkUzFKSAJQvJavUPNO\/Hg7mHHsj9QkQQBGFlLBiuHVuN418lOa64BHEA+ajTNu0osMdeMD8JI\/T0KOB1ka9USX4bJC4oki1lRn4f3WIPbwqIg8dr49Db+E3VV7QsPeHU1ZExz3wStzNYMziwuB3AcCD\/ADK22vicI2VLBd9O8SWG8s3SDy+CuqWobIxsjDdrgHNPMHUIrjksuqZHxnDm1EEkLtz2kdx3tPgQD4Kr2eY6WAQVdOc0Qax3SNDmPIuAWk\/a0AN+1aErroCJ8UNxQtY0NY0NaNA1oAA7gNyO6qsW2jp6d4ZK8hxGY2a5wa29szy0HK2\/EqzbICA4EEEXBB0IO435KEpi3XLHbZB1XPFh7HWDmOmmdyaLiMfzfJZXGMRlmw2CkJcJxMaeQXNyY9GAnjfM3xaioWOoWbjb7D+mopWgEuYBIy2\/MzredgR4qjw+sBrqSq+7W0xifyErLEg+IDVo9iq\/p6GB5NzkyOJ3ks6pv32v4rIOw5zY6mkZfpaSYVVLpvYetlbzsD52RXoGPoXfs3GSGenP+hUSMHu30+BWvWK2Sr2OrpnM0bVQxzgcnN6kje8Oz+S2t0klyLPsSyEtR2SKJCMbypiujuwnlr5b\/S6lFKG30V+N7ZKRXJWqKUfX90jtO1G0WJbxBI8tELmDivQJ3yc5egMhFuxeU+2mpZ0LG21zjLzGhufLTxXqktgvHvbfKLwN5l7vINHzQn+Bl2P8R5Ze1rL0X2e0z3zPnkcXvdqSd5J3nvXn9JAXva0byV7TsXhJjj3b1mxK5GmT4N1h4s0KYD9fRUenFmp8ha2Z7CcLqM866hPAHjYefwTUt77yoiSHo2IZGXSgm6dYE1lFKqI7IbK0pYco7UMFPrc8Nykri+09Zu\/tR\/P+DVpNPT3v8hEqRKAuKdA5EEiIIECI0UfDnWe9vPUeGh+SkqDfLK08zY+KS9s4sZK00WhC5EhXQM4jhcWQxRNaA1oDQNwAAA7gEa5AJyzG0FdKyvoI2yFsUplEjRbrFrQWg3F+K06y+31I4wsqGfbppGzC34QeuO7cfAorsMexnZumbUyV8kguJJXU+v8AtsaGkDle48gsxXzvbQxxTFz20tWIqhjTlzxgksuToBvAubblp\/ZlUdJSvf8AinkcfENPzTtPGIsUmYRdtRA2TUaZmHKR5AnxTdMsvlmf9lkJ6erfk6hyiN2bOGNzOPRB9yHWGXUfhWyn2bpnztqTF+9aQ4OBIBcNzi0GxParSOMAWaABwAFh5BGErduxJSt2jNYFh0tJPLEGF1PK8yRuBb+6cR1muBINtABa\/DttPrcFD6mKpa8skjBa6wBEkZ+46+7XW6tSo89bG17I3SMa998jC4Bz7Ak5Wk3OgO5Bg3NlLW4G2OeCenjDS2RwlDRa7JRZzrdhAK0CZjqLyOZkeMoBzltmOvwa6+pHHRJRVDn5s0T47OLW5iw5wNzxkcbA8AbHsChG2PFJdEQhTpCNigJwIGhGFYkKVGItyy34OAPiND8kD1KxyK7A78JB8DofkobZARp5rs6aW7EvpwYMi2zZFqAF4h7ZakOqo2D7rC4\/xOt\/xXt1VY9\/1f4L579p5JxCS5BFmZbcBl3Htvc+IV2bjGHBzMDYHDTJNmto3Re44NT2G4WXn3s7wwxxNcRq7f3nt7rL1SgiAA5pcUajZbOduh4N5InaWRHfZKQNyZipDbrIMn1\/ZPW7u3+6Qk\/i+aKC0NMGm9TaaMk79OKha37Oaq8U2lkpJGl0RfAdHFv22n8TeDh+X151auU4424dlWCKlJJmuSqLhmIxVEYlheHsPEcDxBG9p7DqpS8o7vk66OXLlyUItkQCQBKoAIKBiI4qeFGrWaKrKriPB8k+J+ZoPMA+aQqLhMl47fhJHzHxUwroY57oplElTaESLkqIBFxaCCDrfSy5KoQj0NDHCzJExsbbk5Wiwud5sqPHerXULufTMPaC1tvitHdZ3Gxmr6Jv4RM8+TQPgiNHs0YXEpCuQFOTbomlwcWjMLgOsLgHfY7wnEhChDkl0qQhMkAVJZKFwTpCsWyUBJZEEwBuoizNc3mCFm6d2m46bxyWme8AXJAHM6LNyPHSPym4JuCO3UroaGbTaM2ohdManaf0Xke1ey5lremvoct221uNBrysvY3tUMYQwuLjqSt+VblRVp3tbZS4Dh+VrRbcFp422CSnpcg0T1lPFDvl2IQlDUj0ROmiAyBIQGInmlI+tEgHb8UURnOiTU9IHCxAI4qU0pVN3gq2LsweJYJPRyGooX5T95m9jxvs9vHv38iFpNlttYqoiJ46Go4xOOjuZjd97u3j1VjMVkNpdm2TDMxuRwNwRpqNxB4G6xaj2fHKrj2Ww1ex1M9GRALzTAts56QiGvDnxjRs4F3t5dI0fbH5hr3716RS1DJGNkjc17HC7XNN2kcwQuBlwyxOpI6EZKStDiVcuVQwoKaqBonAhkGiSXQV2Q8IfZ7m8xfy\/urUqjY\/LM08L289Pmr6yu0buFegMy+KwbJESFaioh4jWGGzy0mP75Au5n5rcW8+W9SoJmvAc1wc07iCCD4hESqifZ9ly6F8kDibnoiA1x5ujILT5IB4LdzgBc6AakncBxN1nMGBqKqSsseiawQ0\/wCZt7vkHYTuPEKYcEzi088kzeLDkYw+82NoLu4kjsVq1oAsAABoANwA4AcFA3QV0l0JKUKIUW64pFyZIAqWyanqGRjNI9rBzc4NHmVnsQ28o4rgPdKeUbbj+Z1h5Epugcs01ktl5hiXtLldpDE1g5uJe7y0A9VlsSx+pnv0sz3D8N7N\/lbYeiKYdjPX8T2qo4Lh8zS4fdZ13eIbe3jZZHFPaWTpTxAD8chufBjdPUrzguQscnVEUDcUmMyzOzSyFx4cAO5o0HktFTTi4t4rE4K7ctZT7hzXT07W0z5I1IvC+\/JGSbaKNSv0Tj1sXJkfDY808EV1Gidru17067kg1TDGVodugaNOKRoTsYSlq5EbF2oXN8fEJ1wTIcOdlEM0G0JHlKAgeTwUEdJEeQ3F\/RMvFzbyv2I5nm1vWyZExAv2rTBMw5JK6HarDI5m2e0a7tyyH7FVYbIZKU5oibvhdfI7mR+B35h433LbU8oI1Phron5Iw4WOoPNZM+COTiSNeDK4Ljoa2Z2pgrGnIS2Rv24naPb2j8TfzDxsdFeLzjHNlLkTQOLJGm7S02cD2EKTs\/t05jhBiAyP3NntZjv\/ANB9w9u73V5\/U6KWJ8dHTx5IzVo34XOCEOvqNRvCIrAywpsRbxV9TyZmNdzAKp8RbopWBS3it+EkfMfFTSusjj6j5VcEyeUiJCV0GZhEhSlVtZjlPH9uVt+QOY+TbpJSS7Yyi30ixuuWTrNuYm\/5cbndriGj5lUNbtpUP+yWxj8oufN11nlqsa+pojpMkvFHpLyALkgDmVU1m0lNHvlBPJnWPmNAvLqvEZJDd73O94k\/HcopeVTLVv5UaI6FfMzdYp7Q2RtLmRmw1u82\/pbe\/msPUe0Cvn16Xomm9mxNDbDh1zd1+4rOYrUmV+Rp6jTr+Z36BFBFYW3rZiUttzfL\/wBFM4Q3VFEyWpe85nuc53NxLj5nVNucjggcdwKnU+ESO4fFWxhJ9ID2pclW5E0LTUuyxcdVd0mygFrhaY6abKHngjAmmcdwTsGFSOOgK9LGz7WncLJ+DDmjgtmPRccsy5NWr4Rk8Kwp4te60kNG6w9f7q3jp2BOdGOC0wxqHBVLJuIFPFaw81NN7WQyWunctxorijuwYDruCcNr7kDRp9fFFfsSseKpBEpU2SAuzIFiOe5Mm3NOXUcyWTIEhxpSPJSLk5mfQ1mA8UO\/j4XXLlelwZHLmh6AaqQ09q5cqZ9miHQTXc1VY7gMdQ0gtF+a5cqZRT4ZfCTXRkqHEavCnZbGal\/2z9pg5xO4e6dO7evSMDxyCrj6SB4cNzhucw\/he3e0\/QXLlwtdp4Qdo6WKblG2O1rdFAwetbG94ebAi\/iP7rly4rm4TUkbMcd8XFg4ntjFH9ljnnwaPM6+izVbt3O77AZGOwZnebtPRcuQlqckvP6GvHpcSXRRVmMzS\/5kjndhJt\/LuUIylcuVLV8s0xilwgblEyInglXIMYm02DyO4KLtHT9CGwt1leL6fcZuzHkTuHjySLls0WJZMqUjDqM8oppFfh+zrtLiwWko9lgLXSrl6jHpodnFnnn0aGiwFgG5W0NAxvBcuWhRS6KXNtWE2AX4KQyNcuTMric+yivcLrlyeCK8rCaeO\/yTl1y5R9jQ6GJSLp+2i5ciyQ8jRPkiLrBcuUrkKfFggowVy5BjxGpXpskLlyiBZ\/\/Z)","2f9d3e28":"## Topic Probability Distribution of ngrams","ae9e459a":"# Encodinng The Preprocessed text data","ebc64c87":"# Difference between UMAP and TSNE :\n\n#### The main difference between t-SNE and UMAP is the interpretation of the distance between objects or \"clusters\". \n\n#### t-SNE preserves local structure in the data.\n\n#### UMAP claims to preserve both local and most of the global structure in the data.\n\n#### UMAP is faster than tSNE when it concerns \n*  large number of data points\n*  number of embedding dimensions greater than 2 or 3\n*  large number of ambient dimensions in the data set.","ecab6609":"Even TSNE is able to differentiate the data in 50 dimensions","97f6c739":"## What if i say there is a function to use this directly awesome right :)","83d441c0":"This dataset is about pfizer tweets and we are gonna explore it using  Sentence Transformer !! You can get to know more about sentence transformer from https:\/\/github.com\/UKPLab\/sentence-transformers","701f37a9":"Summary is basically about the people showing their sentiments  after getting their first vaccination of pfizer ever . We can see that most of these statements are positive and people are feeling great about this vaccination .","5703f1bb":"# Getting Topics Using BERTopic and Sentence Transformer Embeddings","992e9343":"## We can also update the topic representation with using n grams","23b0e3e2":"#### Since the first topic was -1 which is represented for outliers i ignored it and looked for topic 31","bcf7c75b":"#### Here the outliers are labelled as -1 in the topic column","9ef35c24":"# Importing a pre-trained model from Sentence Transformer","f1cd4598":"# Applying K-Means Clustering","67743e49":"## Visualizing the distribution of these topics with the help of probability","cc860e6e":"> **We can see that the highest fall in the SSE was from 2-3 which means the most optimal cluster size is 2 but here we are gonna try with both 2 and 3** ","85172831":"# Information Retrieval Using Sentence Transformer","acfb5bf6":"> **After generating topics and their probabilities, we can access the frequent topics that were generated:**"}}