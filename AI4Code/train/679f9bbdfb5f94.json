{"cell_type":{"722d2856":"code","37b8cb84":"code","08ceeeeb":"code","b9755b0d":"code","9b852e60":"code","255f449c":"code","c18375e0":"code","b5d9f5a3":"code","f94060e0":"code","e8d8f85c":"code","2ca69aa5":"code","8d5d4ecd":"code","db8521df":"code","0152f0a1":"code","d62393ea":"code","bfdf1b3b":"code","24bb181a":"code","d8c50f93":"code","0d05e9ac":"code","022204de":"code","b544f9ea":"code","9609b8a9":"code","872912bc":"code","c094caf4":"code","0dc6c5f1":"code","487c88dc":"code","c04b10e6":"code","b4fdb1f5":"code","749a0cf2":"code","e1f85df5":"code","8c559412":"code","5a2f8ff2":"code","1f0a7c7f":"code","00b316a7":"code","27402a89":"code","290d14fd":"code","e7fa3f66":"code","7eb9ff97":"code","f846c0a0":"code","8c72defb":"code","fb98932c":"code","2b915397":"code","c32cd4c2":"code","7713cdd5":"code","4ddc1b85":"code","035bec34":"code","0c5df007":"code","dc6c0e14":"code","0d8fb5a6":"code","5bf7cfac":"code","55e736c6":"code","47d5a594":"code","3d4625ea":"code","bd510dff":"code","86c14239":"code","2382c7e2":"code","ff191238":"markdown","c0411fa0":"markdown","3881f6c0":"markdown","afafedc6":"markdown","6a20f0c6":"markdown","d0e7f195":"markdown","61617b1f":"markdown","a403f630":"markdown","abfc2572":"markdown","eefa994c":"markdown","e611c397":"markdown","7f5b3a6c":"markdown","d480b5e3":"markdown","bd3668b4":"markdown","c1377f55":"markdown","bbec2f7e":"markdown","5316f231":"markdown","a873d31b":"markdown","e2d9d04b":"markdown","4885446a":"markdown","8eaea75d":"markdown","b3110deb":"markdown","54280dac":"markdown","d7846e6a":"markdown","8be798e3":"markdown","639e20d5":"markdown","d9449cee":"markdown","be68cf76":"markdown","2a0ca8dd":"markdown","e142800e":"markdown","b090b02e":"markdown","77521e27":"markdown","61b3ecbd":"markdown","471f8709":"markdown","a4561785":"markdown","f47f5c8f":"markdown","abe2f576":"markdown","793ee9da":"markdown","53362034":"markdown","02d69291":"markdown","ce48c199":"markdown","a6dffaa1":"markdown","d6840505":"markdown","889ec6ee":"markdown","5b04b1b3":"markdown","67978273":"markdown","08be476b":"markdown","c1021770":"markdown","cc322bda":"markdown","f129a3ba":"markdown","6e9f3f08":"markdown","55bd13cd":"markdown","5c123ae6":"markdown","9e6c7b18":"markdown","21f0d401":"markdown"},"source":{"722d2856":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","37b8cb84":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","08ceeeeb":"data_train = pd.read_csv(\"..\/input\/GiveMeSomeCredit\/cs-training.csv\")\ndata_test = pd.read_csv(\"..\/input\/GiveMeSomeCredit\/cs-test.csv\")\n#\u770b\u770b\u6570\u636e\u8bfb\u53d6\u662f\u5426\u6210\u529f\ndata_train.head()","b9755b0d":"data_train.info()","9b852e60":"data_train.describe()","255f449c":"data_train = data_train.rename(columns={\"Unnamed: 0\":\"ID\"})\ndata_test = data_test.rename(columns={\"Unnamed: 0\":\"ID\"})\ndata_train.head()","c18375e0":"# \u5bf9\u5206\u7c7b\u7ed3\u679cSeriousDlqin2yrs\u67e5\u770b\nsns.countplot(x=\"SeriousDlqin2yrs\",data=data_train)","b5d9f5a3":"data_train.isnull().sum()","f94060e0":"from sklearn.ensemble import RandomForestRegressor\n\n#\u5148\u628a\u6240\u6709\u6570\u503c\u7279\u5f81\u63d0\u53d6\u51fa\u6765 \u5176\u4e2d\u7b2c\u96f6\u5217\u662fid\u4e0d\u8981,\u6700\u540e\u4e00\u5217\u8fd8\u6709\u7f3a\u5931\u503c\u672a\u5904\u7406\u5148\u4e0d\u8981\ndata_randomforest = data_train.iloc[:,[1,2,3,4,5,6,7,8,9,10]]\n\n##\u628a\u6574\u4e2a\u6570\u636e\u6309MonthlyIncome\u662f\u5426\u4e3a\u7a7a\u7f3a\u5206\u4e3a\u4e24\u90e8\u5206\nknown = data_randomforest[data_randomforest.MonthlyIncome.notnull()].values\nunknown = data_randomforest[data_randomforest.MonthlyIncome.isnull()].values\n\n##\u786e\u5b9a\u968f\u673a\u68ee\u6797\u7684\u8bad\u7ec3\u96c6\u548c\u8bd5\u9a8c\u96c6\n#\u6ce8\u610f\u56e0\u4e3aknown\u7684\u5b9a\u4e49\u91cc\u5c31\u6ca1\u53d6\u7b2c\u96f6\u5217\uff0c\u6240\u4ee5\u8fd9\u91cc\u5bf9\u5e94\u7684\u5217\u6570\u90fd\u8981\u51cf\u4e00\nX_know = known[:,[0,1,2,3,4,6,7,8,9]]\nY_know = known[:,[5]]\nX_forpredict = unknown[:,[0,1,2,3,4,6,7,8,9]]\n##\u8bad\u7ec3\u968f\u673a\u68ee\u6797\u6a21\u578b\nrfr = RandomForestRegressor(random_state=0,n_estimators=200,max_depth=3,n_jobs=-1)\nrfr.fit(X_know,Y_know)\n\n##\u9884\u6d4b\u7f3a\u5931\u503c,\u539f\u6570\u636e\u4e2d\u6536\u5165\u90fd\u662f\u6574\u6570\uff0c\u6240\u4ee5\u8fd9\u91cc\u4fdd\u75590\u4f4d\u5c0f\u6570\nY_predicted = rfr.predict(X_forpredict).round(0)\n\n##\u56de\u586b\ndata_train.loc[(data_train.MonthlyIncome.isnull()), 'MonthlyIncome'] = Y_predicted\n\n##\u770b\u4e00\u4e0b\u6709\u6ca1\u6709\u6210\u529f\ndata_train.info()","e8d8f85c":"#\u5148\u628a\u6240\u6709\u6570\u503c\u7279\u5f81\u63d0\u53d6\u51fa\u6765 \u5176\u4e2d\u7b2c\u96f6\u5217\u662fid\u4e0d\u8981,\u6700\u540e\u4e00\u5217\u8fd8\u6709\u7f3a\u5931\u503c\u672a\u5904\u7406\u5148\u4e0d\u8981\ndata_randomforest = data_test.iloc[:,[2,3,4,5,6,7,8,9,10]]\n\n##\u628a\u6574\u4e2a\u6570\u636e\u6309MonthlyIncome\u662f\u5426\u4e3a\u7a7a\u7f3a\u5206\u4e3a\u4e24\u90e8\u5206\nknown = data_randomforest[data_randomforest.MonthlyIncome.notnull()].values\nunknown = data_randomforest[data_randomforest.MonthlyIncome.isnull()].values\n\n##\u786e\u5b9a\u968f\u673a\u68ee\u6797\u7684\u8bad\u7ec3\u96c6\u548c\u8bd5\u9a8c\u96c6\n#\u6ce8\u610f\u56e0\u4e3aknown\u7684\u5b9a\u4e49\u91cc\u6ca1\u53d6\u7b2c\u96f6\u548c\u7b2c\u4e00\u5217\uff0c\u6240\u4ee5\u8fd9\u91cc\u5bf9\u5e94\u7684\u5217\u6570\u90fd\u8981\u51cf\u4e8c\nX_know = known[:,[0,1,2,3,5,6,7,8]]\nY_know = known[:,[4]]\nX_forpredict = unknown[:,[0,1,2,3,5,6,7,8]]\n##\u8bad\u7ec3\u968f\u673a\u68ee\u6797\u6a21\u578b\nrfr = RandomForestRegressor(random_state=0,n_estimators=200,max_depth=3,n_jobs=-1)\nrfr.fit(X_know,Y_know)\n\n##\u9884\u6d4b\u7f3a\u5931\u503c,\u539f\u6570\u636e\u4e2d\u6536\u5165\u90fd\u662f\u6574\u6570\uff0c\u6240\u4ee5\u8fd9\u91cc\u4fdd\u75590\u4f4d\u5c0f\u6570\nY_predicted = rfr.predict(X_forpredict).round(0)\n\n##\u56de\u586b\ndata_test.loc[(data_test.MonthlyIncome.isnull()), 'MonthlyIncome'] = Y_predicted\n\n##\u770b\u4e00\u4e0b\u6709\u6ca1\u6709\u6210\u529f\ndata_test.info()","2ca69aa5":"data_train['NumberOfDependents'].fillna(data_train['NumberOfDependents'].median(), inplace=True)\ndata_test['NumberOfDependents'].fillna(data_test['NumberOfDependents'].median(), inplace=True)\ndata_test.info()","8d5d4ecd":"data_train = data_train.drop_duplicates()\ndata_train.info()\n#\u4e8b\u5b9e\u4e0a\u597d\u50cf\u6ca1\u6709\u91cd\u590d\u503c\u5495\u565c\u5495\u565c","db8521df":"data_train.select_dtypes('int64').describe().transpose()[['min', '25%', '50%', '75%', 'max']]","0152f0a1":"from sklearn.feature_selection import mutual_info_classif\ndef plot_distributions_discrete(feature):\n    \n    _, axes = plt.subplots(1, 2, figsize=(12,4))\n    sns.histplot(data_train[feature], kde=True, label='Train',stat='density',\n                 discrete=True, color='steelblue', alpha=0.6, ax=axes[0])\n    sns.histplot(data_test[feature], kde=True, label='Test',stat='density',\n                 discrete=True, color='gold', alpha=0.25, ax=axes[0])\n    axes[0].legend()\n    axes[0].set_title('Distr Train set vs Distr Test set')\n\n    sns.boxplot(x='SeriousDlqin2yrs', y=feature, data=data_train, ax=axes[1], palette=['seagreen', 'tan'])\n    \n    X = data_train[[feature]].dropna()\n    MI = mutual_info_classif(X, data_train.loc[X.index, 'SeriousDlqin2yrs'], discrete_features=True,\n                             random_state=0)\n    axes[1].set_title('Distribution depending on the SeriousDlqin2yrs\\n-> MI Score : ' + str(round(MI[0], 7)))\n\n    plt.suptitle('\"{}\" distributions'.format(feature), y=1.15);","d62393ea":"def plot_distributions_continuous(feature):\n    \n    _, axes = plt.subplots(1, 2, figsize=(12,4))\n    sns.kdeplot(data_train[feature].apply(np.log1p), label='Train',\n                color='steelblue', alpha=0.5, shade=True, edgecolor='k', ax=axes[0])\n    sns.kdeplot(data_test[feature].apply(np.log1p), label='Test',\n                color='gold', alpha=0.3, shade=True, edgecolor='k', ax=axes[0])\n\n    axes[0].legend()\n    axes[0].set_title('Distr Train set vs Distr Test set')\n    axes[0].set_xlabel('log-{}'.format(feature))\n\n    sns.boxplot(x='SeriousDlqin2yrs', y=data_train[feature],\n                data=data_train, ax=axes[1], palette=['seagreen', 'tan'])\n\n    X = data_train[[feature]].dropna()\n    MI = mutual_info_classif(X, data_train.loc[X.index, 'SeriousDlqin2yrs'], random_state=0)\n    axes[1].set_title('Distribution depending on the SeriousDlqin2yrs\\n-> MI Score : ' + str(round(MI[0], 7)))\n    \n    plt.suptitle('\"{}\" distributions'.format(feature), y=1.15);","bfdf1b3b":"plot_distributions_discrete('age')","24bb181a":"data_train[data_train[\"age\"]<20]","d8c50f93":"data_train = data_train[data_train[\"age\"]>=20]","0d05e9ac":"plot_distributions_continuous('DebtRatio')\nplt.gca().set_ylim(0, 2);","022204de":"print(data_train[data_train[\"DebtRatio\"]>np.e**9].shape[0])","b544f9ea":"data_train = data_train[data_train[\"DebtRatio\"]<=np.e**9]\n#\u770b\u770b\u64cd\u4f5c\u662f\u5426\u6210\u529f\ndata_train.shape[0]","9609b8a9":"plot_distributions_continuous('MonthlyIncome')\nplt.gca().set_ylim(0, 2e4);","872912bc":"data_train[data_train[\"MonthlyIncome\"]>np.e**11.5].shape[0]","c094caf4":"data_train = data_train[data_train[\"MonthlyIncome\"]<np.e**11.5]\n#\u770b\u770b\u64cd\u4f5c\u662f\u5426\u6210\u529f\ndata_train.shape[0]","0dc6c5f1":"plot_distributions_discrete('NumberOfDependents')\nplt.gca().set_ylim(0, 10);","487c88dc":"data_train[data_train[\"NumberOfDependents\"]>10].shape[0]","c04b10e6":"data_train = data_train[data_train[\"NumberOfDependents\"]<=10]\n#\u770b\u770b\u64cd\u4f5c\u662f\u5426\u6210\u529f\ndata_train.shape[0]","b4fdb1f5":"plot_distributions_continuous('RevolvingUtilizationOfUnsecuredLines')\nplt.gca().set_ylim(0, 3);","749a0cf2":"data_train[data_train[\"RevolvingUtilizationOfUnsecuredLines\"]>1.5].shape[0]","e1f85df5":"data_train = data_train[data_train[\"RevolvingUtilizationOfUnsecuredLines\"]<=1.5]\ndata_train.shape[0]","8c559412":"# \u67e5\u770b\u4e00\u4e0b\u4e09\u8005\u7684\u7bb1\u578b\u56fe\nplt.figure(figsize=(20, 10)) \ndata_train[['NumberOfTime30-59DaysPastDueNotWorse', \n          'NumberOfTime60-89DaysPastDueNotWorse',\n          'NumberOfTimes90DaysLate']].boxplot()\nplt.show()","5a2f8ff2":"data_train = data_train[data_train['NumberOfTime30-59DaysPastDueNotWorse']<95]\ndata_train.shape[0]","1f0a7c7f":"plot_distributions_discrete('NumberOfOpenCreditLinesAndLoans')\nplt.gca().set_ylim(0, 30);","00b316a7":"data_train = data_train[data_train['NumberOfOpenCreditLinesAndLoans']<20]\ndata_train.shape[0]","27402a89":"#\u5927\u81f4\u6570\u636e\u5206\u5e03\u60c5\u51b5\ndata_train.hist(bins=50, figsize=(20,15))\nplt.show()","290d14fd":"# \u68c0\u67e5\u6570\u636e\u7684\u76f8\u5173\u6027\ncorr = data_train.corr()\nplt.figure(figsize=(20, 15))\nsns.heatmap(corr, annot=True, fmt='.2g')","e7fa3f66":"X_train = data_train.iloc[:,2:]\nY_train = data_train.iloc[:,1]\nX_test = data_test.iloc[:,2:]\nX_test.info()","7eb9ff97":"import scipy.stats as stats\n\ndef monoto_bin(Y, X, n):\n    r = 0\n    total_good = Y.sum()\n    total_bad =Y.count()-total_good\n    while np.abs(r) < 1:\n        d1 = pd.DataFrame({\"X\": X, \"Y\": Y, \"Bucket\": pd.qcut(X, n)})\n        d2 = d1.groupby('Bucket', as_index = True)\n        r, p = stats.spearmanr(d2.mean().X, d2.mean().Y)\n        n = n - 1\n    d3 = pd.DataFrame(d2.min().X, columns = ['min_' + X.name])\n    d3['min_' + X.name] = d2.min().X\n    d3['max_' + X.name] = d2.max().X\n    d3[Y.name] = d2.sum().Y\n    d3['total'] = d2.count().Y\n    \n    #\u597d\u574f\u6bd4\uff0c\u6c42woe,\u8bc1\u636e\u6743\u91cd\n    d3['goodattr']=d3[Y.name]\/total_good\n    d3['badattr']=(d3['total']-d3[Y.name])\/total_bad\n    d3['woe'] = np.log(d3['goodattr']\/d3['badattr'])\n    \n    #\u4fe1\u606f\u503c\uff0c\u81ea\u53d8\u91cf\u5bf9\u4e8e\u76ee\u6807\u53d8\u91cf\u7684\u5f71\u54cd\u7a0b\u5ea6\n    iv = ((d3['goodattr']-d3['badattr'])*d3['woe']).sum()\n    d4 = (d3.sort_values(by = 'min_' + X.name)).reset_index(drop = True)\n    print (\"=\" * 80)\n    print (d4)\n    cut = []\n    cut.append(float('-inf'))\n    for i in range(1,n+1):\n        qua =X.quantile(i\/(n+1))\n        cut.append(round(qua,4))\n    cut.append(float('inf'))\n    woe = list(d4['woe'].round(3))\n    return d4,iv,cut,woe","f846c0a0":"x1_d,x1_iv,x1_cut,x1_woe = monoto_bin(Y_train,X_train.RevolvingUtilizationOfUnsecuredLines,10)\nx2_d,x2_iv,x2_cut,x2_woe = monoto_bin(Y_train,X_train.age,10)\nx4_d,x4_iv,x4_cut,x4_woe = monoto_bin(Y_train,X_train.DebtRatio,10)\nx5_d,x5_iv,x5_cut,x5_woe = monoto_bin(Y_train,X_train.MonthlyIncome,10)\n#\u6b64\u5904\u4e0b\u6807\u6570\u5bf9\u5e94\u7684\u662f\u7b2c\u51e0\u4e2a\u7279\u5f81\uff08\u4f8b\u5982x2\u7684\u4e0b\u68072\u5bf9\u5e94\u4ed6\u662f\u7b2c\u4e8c\u4e2a\u7279\u5f81age\uff09","8c72defb":"def fenxiang(X,Y,CUT):\n    #\u5148\u5229\u7528pandas\u7684cut\u51fd\u6570\u7ed9\u5305\u542b\u81ea\u53d8\u91cf-\u56e0\u53d8\u91cf\u7684dataframe\u52a0\u4e0aBucket\u7279\u5f81\n    \n    d1=pd.DataFrame({'X':X,'Y':Y,'Bucket':pd.cut(X,CUT)})\n    \n    #\u518d\u5229\u7528groupby\u6309Bucket\u5c06\u539f\u6709\u7684dataframe\u6309Bucket\u7279\u5f81\u5212\u5206\u6210\u5b50dataframe\n    \n    d2=d1.groupby('Bucket', as_index = True)\n    \n    #\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684dataframe\uff0c\u5f80\u91cc\u9762\u8f93\u5165\u53c2\u6570\n    d3 = pd.DataFrame({\"min\":d2.min().X})\n    d3['max'] = d2.max().X\n    d3['sum'] = d2.sum().Y\n    d3['total'] = d2.count().Y\n    d3['rate'] = d2.mean().Y\n\n    ## \u8ba1\u7b97woe iv\n    good=Y.sum()\n    bad=Y.count()-good\n    d3['woe'] = np.log((d3['rate'] \/ (1 - d3['rate'])) \/ (good \/ bad))\n    d3['goodattribute'] = d3['sum'] \/ good\n    d3['badattribute'] = (d3['total'] - d3['sum']) \/ bad\n    iv = ((d3['goodattribute'] - d3['badattribute']) * d3['woe']).sum()\n    d4 = (d3.sort_values(by='min'))\n    print(\"=\" * 60)\n    print(d4)\n    woe = list(d4['woe'].round(3))\n    return d4, iv,woe","fb98932c":"##\u5148\u6307\u5b9a\u4e0d\u540c\u53d8\u91cf\u7684cut\ncutx3 = [-np.inf, 0, 1, 2, 4, 8, np.inf]\ncutx6 = [-np.inf, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, np.inf]\ncutx7 = [-np.inf, 0, 1, 2, 4, 8, np.inf]\ncutx8 = [-np.inf, 0, 1, 2, 3, 4, 5, np.inf]\ncutx9 = [-np.inf, 0, 1, 2, 4, 8, np.inf]\ncutx10 = [-np.inf, 0, 1, 2, 3, 4, 5, 6, np.inf]","2b915397":"##\u8c03\u7528\u51fd\u6570\u8ba1\u7b97\nx3_d,x3_iv,x3_woe = fenxiang(X_train[\"NumberOfTime30-59DaysPastDueNotWorse\"],Y_train,cutx3)\nx6_d,x6_iv,x6_woe = fenxiang(X_train[\"NumberOfOpenCreditLinesAndLoans\"],Y_train,cutx6)\nx7_d,x7_iv,x7_woe = fenxiang(X_train[\"NumberOfTimes90DaysLate\"],Y_train,cutx7)\nx8_d,x8_iv,x8_woe = fenxiang(X_train[\"NumberOfOpenCreditLinesAndLoans\"],Y_train,cutx8)\nx9_d,x9_iv,x9_woe = fenxiang(X_train[\"NumberOfTime60-89DaysPastDueNotWorse\"],Y_train,cutx9)\nx10_d,x10_iv,x10_woe = fenxiang(X_train[\"NumberOfDependents\"],Y_train,cutx10)","c32cd4c2":"# \u67e5\u770b\u5404\u4e2a\u53d8\u91cf\u7684IV\u503c\ninformationValue = []\ninformationValue.append(x1_iv)\ninformationValue.append(x2_iv)\ninformationValue.append(x3_iv)\ninformationValue.append(x4_iv)\ninformationValue.append(x5_iv)\ninformationValue.append(x6_iv)\ninformationValue.append(x7_iv)\ninformationValue.append(x8_iv)\ninformationValue.append(x9_iv)\ninformationValue.append(x10_iv)\ninformationValue\nplt.figure(figsize=(20, 10)) \nindex=['RevolvingUtilizationOfUnsecuredLines','age','NumberOfTime30-59DaysPastDueNotWorse','DebtRatio','MonthlyIncome','NumberOfOpenCreditLinesAndLoans','NumberOfTimes90DaysLate','NumberRealEstateLoansOrLines','NumberOfTime60-89DaysPastDueNotWorse','NumberOfDependents']\nindex_num = range(len(index))\nax=plt.bar(index_num,informationValue,tick_label=index)\nplt.xticks(rotation=90) \nplt.show()","7713cdd5":"X_train_last = X_train.drop([\"NumberOfDependents\"],axis = 1)\nX_test_last = X_test.drop([\"NumberOfDependents\"],axis = 1)\nX_test_last.head()","4ddc1b85":"# ROC\u66f2\u7ebf\u7ed8\u5236\ndef draw_roc(FPR, TPR, label=None):\n    plt.figure(figsize=(8,6))\n    plt.plot(FPR, TPR,'b', linewidth=2, label=label)\n    plt.plot([0,1],[0,1], \"r--\") \n    plt.xlim([0, 1])   \n    plt.ylim([0, 1])\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True Positive rate\")","035bec34":"from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_predict\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score","0c5df007":"from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nforest = RandomForestClassifier(n_estimators=300, max_depth=5, class_weight='balanced')\nforest.fit(X_train_last, Y_train)\nforest_scores_proba = forest.predict_proba(X_train_last)\nforest_scores = forest_scores_proba[:,1]\nFPR_forest, TPR_forest, THRESH_forest = roc_curve(Y_train, forest_scores)\nAUC_forest=roc_auc_score(Y_train,forest_scores)\ndraw_roc(FPR_forest, TPR_forest)\nprint(\"RF\u5728\u8bad\u7ec3\u96c6\u4e0a\u7684AUC\u662f: {:.5f}%\".format(AUC_forest*100))","dc6c0e14":"AUC_forest_cv = cross_val_score(forest, X_train, Y_train, cv=10, scoring='roc_auc').mean()\nprint(\"RF\u5728\u8bad\u7ec3\u96c6\u4e0acv\u7684AUC\u662f\uff1a{:.5f}%\".format(AUC_forest_cv*100))","0d8fb5a6":"GBC = GradientBoostingClassifier()\nGBC.fit(X_train_last, Y_train)\nGBC_scores_proba =GBC.predict_proba(X_train_last)\nGBC_scores = GBC_scores_proba[:,1]\nFPR_GBC, TPR_GBC, THRESH_GBC = roc_curve(Y_train, GBC_scores)\nAUC_GBC=roc_auc_score(Y_train,GBC_scores)\ndraw_roc(FPR_GBC, TPR_GBC)\nprint(\"GBC\u5728\u8bad\u7ec3\u96c6\u4e0a\u7684AUC\u662f: {:.5f}%\".format(AUC_GBC*100))","5bf7cfac":"AUC_GBC_cv = cross_val_score(GBC, X_train, Y_train, cv=10, scoring='roc_auc').mean()\nprint(\"GBC\u5728\u8bad\u7ec3\u96c6\u4e0acv\u7684AUC\u662f\uff1a{:.5f}%\".format(AUC_GBC_cv*100))","55e736c6":"estimators=np.linspace(100,300,21).astype(int)\nAUCs=[]\nnums=[]\nfor estimator in estimators:\n    GBC = GradientBoostingClassifier(n_estimators=estimator, learning_rate=0.1 ,max_depth=4)\n    GBC.fit(X_train_last, Y_train)\n    GBC_scores_proba =GBC.predict_proba(X_train_last)\n    GBC_scores = GBC_scores_proba[:,1]\n    FPR_GBC, TPR_GBC, THRESH_GBC = roc_curve(Y_train, GBC_scores)\n    AUC_GBC=roc_auc_score(Y_train,GBC_scores)\n    AUCs.append(AUC_GBC*100)\n    nums.append(estimator)\nplt.plot(nums,AUCs)","47d5a594":"depths = np.linspace(1,12,12).astype(int)\nAUCs=[]\nmaxdepths=[]\nfor depth in depths:\n    GBC = GradientBoostingClassifier(n_estimators=250, learning_rate=0.1 ,max_depth=depth)\n    GBC.fit(X_train_last, Y_train)\n    GBC_scores_proba =GBC.predict_proba(X_train_last)\n    GBC_scores = GBC_scores_proba[:,1]\n    FPR_GBC, TPR_GBC, THRESH_GBC = roc_curve(Y_train, GBC_scores)\n    AUC_GBC=roc_auc_score(Y_train,GBC_scores)\n    AUCs.append(AUC_GBC*100)\n    maxdepths.append(depth)\nplt.plot(maxdepths,AUCs)","3d4625ea":"GBC = GradientBoostingClassifier(n_estimators=250, learning_rate=0.1 ,max_depth=5)\nGBC.fit(X_train_last, Y_train)\nGBC_scores_proba =GBC.predict_proba(X_train_last)\nGBC_scores = GBC_scores_proba[:,1]\nFPR_GBC, TPR_GBC, THRESH_GBC = roc_curve(Y_train, GBC_scores)\nAUC_GBC=roc_auc_score(Y_train,GBC_scores)\ndraw_roc(FPR_GBC, TPR_GBC)\nprint(\"GBC\u5728\u8bad\u7ec3\u96c6\u4e0a\u7684AUC\u662f: {:.5f}%\".format(AUC_GBC*100))","bd510dff":"GBC = GradientBoostingClassifier(n_estimators=250, learning_rate=0.05 ,max_depth = 5)\nGBC.fit(X_train_last, Y_train)\nGBC_scores_proba =GBC.predict_proba(X_train_last)\nGBC_scores = GBC_scores_proba[:,1]\nFPR_GBC, TPR_GBC, THRESH_GBC = roc_curve(Y_train, GBC_scores)\nAUC_GBC=roc_auc_score(Y_train,GBC_scores)\ndraw_roc(FPR_GBC, TPR_GBC)\nprint(\"GBC\u5728\u8bad\u7ec3\u96c6\u4e0a\u7684AUC\u662f: {:.5f}%\".format(AUC_GBC*100))","86c14239":"submission_proba = GBC.predict_proba(X_test_last)\nsubmission_scores = submission_proba[:, 1]\nsubmission_scores.shape","2382c7e2":"ids = np.arange(1, 101504)\nsubmission = pd.DataFrame( {'Id': ids, 'Probability': submission_scores})\nsubmission.to_csv('submission.csv', index=False)","ff191238":"\u5148\u5b9a\u4e49\u4e24\u4e2a\u4f5c\u56fe\u7684\u51fd\u6570\uff0c\u65b9\u4fbf\u540e\u7eed\u89c2\u5bdf\u5206\u6790","c0411fa0":"## 1.2\u8bfb\u53d6\u6570\u636e","3881f6c0":"# **\u56db.\u6a21\u578b\u9884\u6d4b**","afafedc6":"### 3.1.1\u6700\u4f18\u5206\u7bb1\n\u5bf9\u4e8e\u8fde\u7eed\u53d8\u91cf\u76f4\u63a5\u4f7f\u7528\u6700\u4f18\u5206\u7bb1\u65b9\u6cd5\u5373\u53ef","6a20f0c6":"\u518d\u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u6765\u68c0\u9a8c\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b  \n\u53d6$K\u2014Fold$\u4e2d\u7684$K=10$","d0e7f195":"\u4e3a\u4e86\u8bc4\u4ef7\u6a21\u578b\u4ee5\u53ca\u540e\u7eed\u8c03\u53c2\uff0c\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2aROC\u66f2\u7ebf\u7ed8\u5236\u51fd\u6570","61617b1f":"### 2.3.2 DebtRatio","a403f630":"### 2.3.4 NumberOfDependents","abfc2572":"### 3.2\u9009\u53d6\u53d8\u91cf\n\u67e5\u770b\u5404\u4e2a\u53d8\u91cf\u7684IV\u503c","eefa994c":"\u4ece\u56fe\u4e2d\u53ef\u4ee5\u53d1\u73b0\n- \u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u7684\u5e74\u9f84\u5206\u5e03\u57fa\u672c\u7c7b\u4f3c\uff08\u84dd\u8272\u662f\u8bad\u7ec3\u96c6\uff0c\u9ec4\u8272\u662f\u6d4b\u8bd5\u96c6\uff0c\u5728\u56fe\u4e0a\u53e0\u52a0\u8d77\u6765\u663e\u793a\u7eff\u8272\uff09\n- \u6709\u4e25\u91cd\u8fdd\u7ea6\u60c5\u51b5\u7684\u4eba\u7fa4\u5e74\u9f84\u6574\u4f53\u504f\u4f4e\n- \u5e74\u9f84\u6574\u4f53\u7b26\u5408\u6b63\u6001\u5206\u5e03\n\n\u5904\u7406age\uff0c\u6839\u636e\u6cd5\u5f8b\uff0c20\u5c81\u4ee5\u4e0a\u624d\u53ef\u4ee5\u529e\u7406\u4fe1\u7528\u5361\uff0c\u6240\u4ee520\u5c81\u4ee5\u4e0b\u53ef\u4ee5\u8ba4\u4e3a\u662f\u9519\u8bef\u6570\u636e\uff0c\u770b\u770b\u6570\u91cf","e611c397":"\u53d1\u73b0\u5176\u4e2d\u4e0d\u5c11\u7279\u5f81\u7684\u6700\u5927\u6700\u5c0f\u503c\u90fd\u6bd4\u8f83\u5f02\u5e38\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u5904\u7406","7f5b3a6c":"### 2.3.6 Pastdue\n\u56e0\u4e3a\u4e09\u8005\u7684\u542b\u4e49\u7c7b\u4f3c\uff0c\u6240\u4ee5\u653e\u5728\u4e00\u8d77\u5206\u6790","d480b5e3":"\u611f\u89c9\u8fd8\u53ef\u4ee5\u4e86 \u5148\u4ea4\u4e00\u4e0b\u8bd5\u8bd5","bd3668b4":"IV\u503c\u53ef\u4ee5\u7528\u6765\u8861\u91cf\u81ea\u53d8\u91cf\u5bf9\u4e8e\u56e0\u53d8\u91cf\u7684\u54cd\u5e94\u80fd\u529b\uff0c\u5177\u4f53\u91cf\u5316\u6307\u6807\u5982\u4e0b\uff1a\n- $\\leq$0.02:useless for prediction\n- 0.02 to 0.1:Weak predictor\n- 0.1 to 0.3Medium predictor\n- 0.3 to 0.5Strong predictor \n- $\\geq$0.5 Suspicious or too good to be true  \n\u820d\u5f03\u6389\u8861\u91cf\u80fd\u529b\u8f83\u5dee\u7684\u7279\u5f81\n\n","c1377f55":"\u5148\u505a\u4e00\u4e2a\u5206\u4f4d\u6570\u7edf\u8ba1","bbec2f7e":"\u4ece\u76f8\u5173\u7cfb\u6570\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\u56e0\u53d8\u91cfSeriousDlqin2yrs\u4e0e\n- RevolvingUtilizationOfUnsecuredLines\n- NumberOfTime30-59DaysPastDueNotWorse\n- NumberOfTime60-89DaysPastDueNotWorse\n- NumberOfTime90Dayslate  \n\u76f8\u5173\u6027\u8f83\u5f3a","5316f231":"## 5.1  **n_estimators**\u8c03\u4f18  ","a873d31b":"\u8fd8\u662f\u6709\u4e00\u4e9b\u8fc7\u62df\u5408\uff0c\u964d\u4f4e\u4e00\u4e0blearning_rate","e2d9d04b":"### 2.3.5  RevolvingUtilizationOfUnsecuredLines","4885446a":"\u53d1\u73b0\u6570\u636e\u662f\u6781\u5ea6\u4e0d\u5e73\u8861\u7684\uff0c\u6240\u4ee5\u5728\u6700\u540e\u4f7f\u7528\u968f\u673a\u68ee\u6797\u65f6\u8981\u6ce8\u610f\u8bbe\u7f6e**class_weight**\u53c2\u6570\u6765\u89e3\u51b3\u6570\u636e\u4e0d\u5e73\u8861\u7684\u95ee\u9898","8eaea75d":"### 2.3.6 NumberOfOpenCreditLinesAndLoans","b3110deb":"## 1.4\u67e5\u770b\u63cf\u8ff0\u6027\u7edf\u8ba1\u4fe1\u606f \u51c6\u5907\u5bf9\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406","54280dac":"\u53d1\u73b0\u63d0\u5347\u8fd8\u662f\u86ee\u660e\u663e\u7684\uff0c\u4f46\u540e\u9762\u663e\u7136\u6709\u4e00\u4e9b\u8fc7\u62df\u5408\u4e86....\u6240\u4ee5\u53d6maxdepths=5\uff0c\u770b\u4e00\u4e0bAUC","d7846e6a":"\u4e3a\u4e86\u65b9\u4fbf\u540e\u7eed\u5904\u7406\uff0c\u5148\u5c06\u8bad\u7ec3\u96c6\uff0c\u6d4b\u8bd5\u96c6\u4e0a\u7684\u81ea\u53d8\u91cf\u56e0\u53d8\u91cf\u5212\u5206\u6e05\u695a","8be798e3":"# \u516d.\u63d0\u4ea4\u7ed3\u679c","639e20d5":"## 2.4  \u67e5\u770b\u5904\u7406\u540e\u7684\u7ed3\u679c","d9449cee":"\u7b2c\u4e00\u5217\u5e94\u8be5\u662f\u5e8f\u53f7\uff08ID\uff09\uff0c\u539f\u6570\u636e\u96c6\u4e2d\u7684\u6807\u9898\u662fUnnameed\uff0c\u6539\u4e00\u4e0b\u770b\u7740\u8212\u670d\u70b9","be68cf76":"\u53d1\u73b0\u5728\u4e24\u79cd\u65b9\u6cd5\u4e2d\uff0c**\u68af\u5ea6\u4e0a\u5347**\u6bd4\u968f\u673a\u68ee\u6797\u7684\u6548\u679c\u8981\u597d  \n\u4e0b\u9762\u5bf9\u68af\u5ea6\u4e0a\u5347\u4e2d\u7684\u53c2\u6570\u8fdb\u884c\u8c03\u53c2","2a0ca8dd":"## 2.2\u91cd\u590d\u503c\u5904\u7406\n\u76f4\u63a5\u5220\u9664\u91cd\u590d\u503c\u5373\u53ef","e142800e":" ## 5.2 max_depth\u8c03\u4f18","b090b02e":"# **\u4e00.\u51c6\u5907\u5de5\u4f5c**\n## 1.1\u5bfc\u5165\u76f8\u5173\u5e93","77521e27":"\u5bf9\u8981\u9884\u6d4b\u7684\u53d8\u91cfSeriousDlqin2yrs\u5148\u4f5c\u4e00\u4e2a\u7b80\u5355\u7684\u89c2\u5bdf","61b3ecbd":"# **\u4e94.\u53c2\u6570\u8c03\u4f18**","471f8709":"## 4.1 RandomForest","a4561785":"\u518d\u5bf9\u5269\u4f59\u53d8\u91cf\u8fdb\u884c\u5206\u7bb1","f47f5c8f":"## 2.1\u7f3a\u5931\u503c\u5904\u7406\n\n\u7f3a\u5931\u503c\u7684\u5904\u7406\u65b9\u6cd5\u4e00\u822c\u5305\u62ec\uff1a\n\n- \u76f4\u63a5\u4f7f\u7528\u542b\u6709\u7f3a\u5931\u503c\u7684\u5c5e\u6027\uff08\u4e0d\u5904\u7406\uff09\uff1b\n- \u5220\u9664\u542b\u6709\u7f3a\u5931\u503c\u7684\u5c5e\u6027\uff1b\n- \u5220\u9664\u542b\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c\uff1b\n- \u7f3a\u5931\u503c\u8865\u5168\uff1a\u5747\u503c\u63d2\u8865\u3001\u5efa\u6a21\u9884\u6d4b\uff0c\u4e2d\u4f4d\u6570\u586b\u5145\u7b49 \n\n\u6839\u636e1.4\u4e2d\u7684\u63cf\u8ff0\u6027\u7edf\u8ba1\uff0c\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u5728NumberOfDependents\u548cMonthlyIncome\u4e0a\u6709\u7a7a\u7f3a\u503c\uff1b\n\n\u4e0b\u9762\u5206\u522b\u8fdb\u884c\u5206\u6790","abe2f576":"\u53ef\u4ee5\u53d1\u73b0\u589e\u957f\u8d8a\u6765\u8d8a\u7f13\u6162\uff0c\u4e3a\u4e86\u9632\u6b62\u8fc7\u62df\u5408\uff0c\u6211\u4eec\u5c31\u9009\u53d6n=250","793ee9da":"\u540c\u6837\u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u6765\u68c0\u9a8c\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b  \n\u53d6$K\u2014Fold$\u4e2d\u7684$K=10$","53362034":"# **\u4e8c.\u6570\u636e\u9884\u5904\u7406**","02d69291":"# \u4e09.**\u53d8\u91cf\u5904\u7406**","ce48c199":"## 1.3 \u5bf9\u7167dictionary \u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\u6570\u636e\u7684\u542b\u4e49\n####       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  SeriousDlqin2yrs:\u662f\u5426\u6709\u8d85\u8fc790\u5929\u6216\u66f4\u4e25\u91cd\u7684\u8d37\u6b3e\u62d6\u6b20\u95ee\u9898\n####       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  RevolvingUtilizationOfUnsecuredLines\uff1a\u9664\u53bb\u623f\u8d37\u8f66\u8d37\u7684\u8d37\u6b3e\u91d1\u989d\/\u4fe1\u7528\u5361\u603b\u8d37\u6b3e\u989d\u5ea6\n####       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  age\uff1a\u501f\u6b3e\u4eba\u7684\u5e74\u9f84\n####       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  NumberOfTime30-59DaysPastDueNotWorse:\u8fc7\u53bb\u4e24\u5e74\u5185\u501f\u6b3e\u4eba\u53d1\u751f30-59\u5929\u7684\u8d37\u6b3e\u62d6\u6b20\u95ee\u9898\u7684\u6b21\u6570\n####       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  DebtRatio\uff1a\u8d1f\u503a\u7387\uff08\u751f\u6d3b\u82b1\u8d39\/\u603b\u6536\u5165\uff09\n####       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  MonthlyIncome:\u6708\u6536\u5165\n####       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  NumberOfOpenCreditLinesAndLoans\uff1a\u603b\u5171\u8d37\u8fc7\u591a\u5c11\u6b3e\uff08\u4f8b\u5982\u6709\u51e0\u4e2a\u8f66\u8d37\u623f\u8d37\/\u6709\u51e0\u5f20\u4fe1\u7528\u5361\uff09\n####       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  NumberOfTime60-89DaysPastDueNotWorse:\u8fc7\u53bb\u4e24\u5e74\u5185\u501f\u6b3e\u4eba\u53d1\u751f60-89\u5929\u7684\u8d37\u6b3e\u62d6\u6b20\u95ee\u9898\u7684\u6b21\u6570\n####       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  NumberOfDependents:\u5bb6\u5c5e\u4eba\u6570\uff08\u9664\u53bb\u81ea\u5df1\uff09","a6dffaa1":"- \u8d1f\u503a\u7387\u6b63\u5e38\u6765\u8bb2\u4e0d\u4f1a\u592a\u9ad8\uff0c\u4e3b\u8981\u96c6\u4e2d\u57281\u9644\u8fd1\uff08\u5de6\u56fe\u4e2d\u53d6\u4e86\u5bf9\u6570\uff0c\u4e5f\u5c31\u662f0\u9644\u8fd1\uff09\n- \u8003\u8651\u6839\u636e\u5de6\u56fe\u5c06\u53d6\u5bf9\u6570\u540e\u5927\u4e8e9\u7684\u79bb\u7fa4\u70b9\u8fdb\u884c\u5904\u7406","d6840505":"## 2.3\u5f02\u5e38\u503c\u5904\u7406","889ec6ee":"### 2.3.1 age\u5f02\u5e38\u503c\u5904\u7406","5b04b1b3":"\u5bf9\u8bad\u7ec3\u96c6\u4e5f\u505a\u7c7b\u4f3c\u586b\u5145\uff0c\u53ea\u9700\u6ce8\u610f\u8bad\u7ec3\u96c6\u4e2dSeriousDlqin2yrs\u4e5f\u662f\u7a7a\u7f3a\u503c\uff0c\u6240\u4ee5\u968f\u673a\u68ee\u6797\u4e2d\u4f20\u5165\u7684\u53d8\u91cf\u8981\u5c11\u4e00\u4e2a","67978273":"## 3.1\u53d8\u91cf\u5206\u7bb1\n\u5206\u7bb1\u79bb\u6563\u5316\u540e,\u53ef\u4ee5\u964d\u4f4e\u5f02\u5e38\u503c\u7684\u5f71\u54cd\uff0c\u5728\u5206\u7bb1\u540e\uff0c\u6211\u4eec\u8fd8\u8ba1\u7b97\u4e86Woe\u548cIV  \n\n- Woe\u5168\u79f0\u53ebWeight of Evidence\uff0c\u5e38\u7528\u5728\u98ce\u9669\u8bc4\u4f30\u3001\u6388\u4fe1\u8bc4\u5206\u5361\u7b49\u9886\u57df\u3002\n\n- IV\u5168\u79f0\u662fInformation value\uff0c\u53ef\u901a\u8fc7woe\u52a0\u6743\u6c42\u548c\u5f97\u5230\uff0c\u8861\u91cf\u81ea\u53d8\u91cf\u5bf9\u5e94\u53d8\u91cf\u7684\u9884\u6d4b\u80fd\u529b\u3002","08be476b":"## 4.2\u68af\u5ea6\u63d0\u5347","c1021770":"\u5f02\u5e38\u503c\u7684\u5904\u7406\u65b9\u6cd5\u4e00\u822c\u5305\u62ec\uff1a\n\n- \u5220\u9664\u542b\u6709\u5f02\u5e38\u503c\u7684\u6837\u672c\n- \u5c06\u5f02\u5e38\u503c\u89c6\u4e3a\u7f3a\u5931\u503c\uff0c\u5e94\u7528\u7f3a\u5931\u503c\u5904\u7406\u65b9\u6cd5\n- \u7528\u5e73\u5747\u503c\u6765\u4fee\u6b63\n- \u4e0d\u5904\u7406","cc322bda":"### 2.1.2 NumberOfDependents\n\u4ece\u4e0a\u8868\u4e2d\u53ef\u4ee5\u53d1\u73b0NumberOfDependents\u7f3a\u5931\u503c\u8f83\u5c11\uff083924\/150000$\\approx$2.6%\uff09  \n\u6240\u4ee5\u8003\u8651\u76f4\u63a5\u4f7f\u7528fillna\u51fd\u6570\uff0c\u7528\u4e2d\u4f4d\u6570\u586b\u5145\u7f3a\u5931\u503c\u3002","f129a3ba":"\u53d1\u73b0\u53ea\u6709\u4e00\u4e2a\u6848\u4f8b\uff0c\u76f4\u63a5\u5220\u9664\u5373\u53ef","6e9f3f08":"\u53d1\u73b0\u79bb\u7fa4\u70b9\u90fd\u662f\u7c7b\u4f3c\u7684\uff0c\u53ef\u4ee5\u5c06\u4ed6\u4eec\u4e00\u8d77\u5220\u9664","55bd13cd":"### 2.1.1 MonthlyIncome\n\u4ece\u4e0a\u8868\u4e2d\u53ef\u4ee5\u53d1\u73b0MonthlyIncome\u7f3a\u5931\u503c\u8f83\u591a\uff0829731\/150000$\\approx$19.8%\uff09  \n\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u5220\u9664\u542b\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c\uff0c\u8003\u8651\u586b\u5145\u7f3a\u5931\u503c\u3002  \n\u56e0\u4e3a\u968f\u673a\u68ee\u6797\u4e0d\u5bb9\u6613\u8fc7\u62df\u5408\u4e14\u5bf9\u4e8e\u6709\u5927\u91cf\u7f3a\u5931\u503c\u7684\u6570\u636e\u80fd\u8fdb\u884c\u6709\u6548\u7684\u4f30\u8ba1\u4e0e\u5904\u7406\uff0c\u6240\u4ee5\u6b64\u5904\u6211\u4eec\u4f7f\u7528\u968f\u673a\u68ee\u6797\u8fdb\u884c\u56de\u5f52\u9884\u6d4b\uff0c","5c123ae6":"\u5360\u6bd4\u8f83\u5c0f\uff0c\u76f4\u63a5\u5220\u53bb\u5373\u53ef","9e6c7b18":"### 2.3.3 MonthlyIncome\n\u505a\u7c7b\u4f3c\u5206\u6790\u548c\u5904\u7406","21f0d401":"\u5bf9\u4e8e\u4e0d\u80fd\u76f4\u63a5\u6700\u4f18\u5206\u7bb1\u7684\uff0c\u6211\u4eec\u624b\u52a8\u8bbe\u7f6e\u8fb9\u754c\u8fdb\u884c\u5206\u7bb1\uff0c\u5148\u5b9a\u4e49\u4e00\u4e2a\u5206\u7bb1\u51fd\u6570"}}