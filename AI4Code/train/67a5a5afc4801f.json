{"cell_type":{"bed2c260":"code","d0e6f7d9":"code","99635d50":"code","f9f791f7":"code","366b4f12":"code","20a18e22":"code","a14c97c8":"code","2f260044":"code","f24be1cb":"code","f47cc472":"code","0acb4312":"code","9685b255":"code","ae370b9a":"code","5de008bd":"code","6a0f94f2":"code","9818d5d7":"code","c13d0704":"code","29b95d7a":"code","85d1488f":"code","fe5835e4":"code","4fa372a0":"code","2eb441ea":"code","bef09fee":"code","be4efaad":"code","2f7cea11":"code","447e07bd":"code","a9d819d7":"code","cb1fc59e":"code","58529cad":"code","cc32f53a":"code","f8a4ac4e":"code","9f8eedb7":"code","0957de61":"code","e69c10ca":"code","0051f2dd":"code","0d9e8b30":"code","6e001302":"code","786ba44f":"code","64e65573":"code","e5c2610d":"code","9b7176b3":"markdown","1c8c2c07":"markdown","7e562b55":"markdown","ccc474d9":"markdown","f7170b4b":"markdown","92e8cd34":"markdown","90778b51":"markdown","e6bd7ff3":"markdown","cc653a91":"markdown","c4afa49c":"markdown","8c7742d4":"markdown","aecbda65":"markdown","ffb06e9a":"markdown","053429a4":"markdown","f77093df":"markdown","c066276a":"markdown","6458cfe5":"markdown","a87255bc":"markdown","b2af6ab3":"markdown","fd1d26a5":"markdown","fb6031bf":"markdown"},"source":{"bed2c260":"pip install chart_studio","d0e6f7d9":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nplt.style.use(\"ggplot\")\nimport plotly \nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport plotly.graph_objs as go \nimport chart_studio.plotly as py\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom matplotlib import pyplot\nfrom statsmodels.tsa.arima_model import ARIMA\nimport fbprophet\nfrom pandas.plotting import autocorrelation_plot","99635d50":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f9f791f7":"data = pd.read_csv('\/kaggle\/input\/windows-store\/msft.csv')\nprint(data.info())\ndata.head()","366b4f12":"print(data.isna().sum())","20a18e22":"data = data.dropna(axis=0)\nprint(data.isna().sum())","a14c97c8":"data.Price.unique()","2f260044":"data['Price'] = data['Price'].replace('Free','\u20b9 0')\ndata['Price'] = data['Price'].apply(lambda x:x.split(' ',1)[1])\ndata['Price'] = data['Price'].str.replace(',', '').astype('float64')","f24be1cb":"data['Price_usd'] = data['Price']*0.013","f47cc472":"data['Date'] = pd.to_datetime(data['Date'])\ndata['year'] = data['Date'].dt.year\ndata['month'] = data['Date'].dt.month\ndata['day'] = data['Date'].dt.day\ndata['day_of_week'] = data['Date'].dt.dayofweek","0acb4312":"plt.figure(figsize=(12,8))\nax = sns.barplot(x=data.groupby('day_of_week').Price_usd.mean().index, \n                 y=data.groupby('day_of_week').Price_usd.mean().values, data=data)\nax.set_title('Mean Price_usd - day_of_week')\nax.set_xlabel('day_of_week')\nax.set_ylabel('Price_usd')","9685b255":"plt.figure(figsize=(12,8))\nax = sns.barplot(x=data.groupby('day_of_week').Price_usd.sum().index, \n                 y=data.groupby('day_of_week').Price_usd.sum().values, data=data)\nax.set_title('Sum Price_usd - day_of_week')\nax.set_xlabel('day_of_week')\nax.set_ylabel('Price_usd')","ae370b9a":"plt.figure(figsize=(12,8))\nax = sns.barplot(x=data.groupby('day').Price_usd.mean().index, \n                 y=data.groupby('day').Price_usd.mean().values, data=data)\nax.set_title('Mean Price_usd - day')\nax.set_xlabel('day')\nax.set_ylabel('Price_usd')","5de008bd":"plt.figure(figsize=(12,8))\nax = sns.barplot(x=data.groupby('day').Price_usd.sum().index, \n                 y=data.groupby('day').Price_usd.sum().values, data=data)\nax.set_title('Sum Price_usd - day')\nax.set_xlabel('day')\nax.set_ylabel('Price_usd')","6a0f94f2":"plt.figure(figsize=(12,8))\nax = sns.barplot(x=data.groupby('month').Price_usd.mean().index, \n                 y=data.groupby('month').Price_usd.mean().values, data=data)\nax.set_title('Mean Price_usd - month')\nax.set_xlabel('month')\nax.set_ylabel('Price_usd')","9818d5d7":"plt.figure(figsize=(12,8))\nax = sns.barplot(x=data.groupby('month').Price_usd.sum().index, \n                 y=data.groupby('month').Price_usd.sum().values, data=data)\nax.set_title('Sum Price_usd - month')\nax.set_xlabel('month')\nax.set_ylabel('Price_usd')","c13d0704":"plt.figure(figsize=(12,8))\nax = sns.barplot(x=data.groupby('year').Price_usd.mean().index, \n                 y=data.groupby('year').Price_usd.mean().values, data=data)\nax.set_title('Mean Price_usd - year')\nax.set_xlabel('year')\nax.set_ylabel('Price_usd')","29b95d7a":"plt.figure(figsize=(12,8))\nax = sns.barplot(x=data.groupby('year').Price_usd.sum().index, \n                 y=data.groupby('year').Price_usd.sum().values, data=data)\nax.set_title('Sum Price_usd - year')\nax.set_xlabel('year')\nax.set_ylabel('Price_usd')","85d1488f":"chart = sns.countplot(x=data['Category'])\nchart.set_xticklabels(chart.get_xticklabels(), rotation=90)","fe5835e4":"data_rating = data.Rating.value_counts()\nfig = go.Figure(data=[\n    go.Bar(name='Rating', x=data_rating.index, y=data_rating),\n])\nfig.update_traces(texttemplate='%{value}', textposition='outside')\nfig.update_layout(barmode='group', hovermode='x', title_text='Rating')\nfig.show()","4fa372a0":"sns.countplot(x='Rating',data=data,hue='Category')","2eb441ea":"data_free = data.Category[data.Price_usd == 0].value_counts()\ndata_pay = data.Category[data.Price_usd != 0].value_counts()\nfig = go.Figure(data=[\n    go.Bar(name='Free', x=data_free.index, y=data_free),\n    go.Bar(name='Paid', x=data_pay.index, y=data_pay)\n])\nfig.update_traces(texttemplate='%{value}', textposition='outside')\nfig.update_layout(barmode='group', hovermode='x', title_text='Free\/Paid Apps')\nfig.show()","bef09fee":"autocorrelation_plot(data['Price_usd'])\npyplot.show()","be4efaad":"prophet_data = data.rename(columns={'Date': 'ds', 'Price_usd': 'y'})\nfbp = fbprophet.Prophet()\nfbp.fit(prophet_data)","2f7cea11":"data_forecast = fbp.make_future_dataframe(periods=24,freq='M')\ndata_forecast = fbp.predict(data_forecast)\nfbp.plot(data_forecast, xlabel = 'Date', ylabel = 'Price_usd')\nplt.title('Energy Consumption of Turkey (MWh)')","447e07bd":"fbp.plot(data_forecast, xlabel = 'Date', ylabel = 'Price_usd')\nplt.vlines([date for date in fbp.changepoints],ymin=0,ymax=82, color='r')\nplt.title('Energy Consumption of Turkey (MWh)')\nprint('Change points:')\nprint(fbp.changepoints)","a9d819d7":"fbp.plot_components(data_forecast)","cb1fc59e":"f,ax=plt.subplots(3,1,figsize=(16,9))\n\ndata1 = data.resample('M', on='Date').mean()\ndata2 = data.resample('W', on='Date').mean()\ndata3 = data.resample('D', on='Date').mean()\n\ndata1['Price_usd'].plot(ax = ax[0], color = 'cyan')\nax[0].set_title('Mean Delay (monthly)')\nax[0].set_xlabel('')\nax[0].set_ylabel('minute')\n\ndata2['Price_usd'].plot(ax = ax[1], color = 'lime')\nax[1].set_title('Mean Delay (weekly)')\nax[1].set_xlabel('')\nax[1].set_ylabel('minute')\n\ndata3['Price_usd'].plot(ax = ax[2], color = 'grey')\nax[2].set_title('Mean Delay (daily)')\nax[2].set_xlabel('')\nax[2].set_ylabel('minute')\n\nf.subplots_adjust(hspace=0.6)\nplt.show()","58529cad":"model = ARIMA(data['Price_usd'], order=(5,1,0))\nmodel_fit = model.fit(disp=0)\nprint(model_fit.summary())","cc32f53a":"residuals = pd.DataFrame(model_fit.resid)\nresiduals.plot()\npyplot.show()\nresiduals.plot(kind='kde')\npyplot.show()\nprint(residuals.describe())","f8a4ac4e":"plt.rcParams.update({'figure.figsize':(9,7), 'figure.dpi':120})\n\n# Original Series\nfig, axes = plt.subplots(3, 2, sharex=True)\naxes[0, 0].plot(data.Price_usd); axes[0, 0].set_title('Original Series')\nplot_acf(data.Price_usd, ax=axes[0, 1])\n\n# 1st Differencing\naxes[1, 0].plot(data.Price_usd.diff()); axes[1, 0].set_title('1st Order Differencing')\nplot_acf(data.Price_usd.diff().dropna(), ax=axes[1, 1])\n\n# 2nd Differencing\naxes[2, 0].plot(data.Price_usd.diff().diff()); axes[2, 0].set_title('2nd Order Differencing')\nplot_acf(data.Price_usd.diff().diff().dropna(), ax=axes[2, 1])\n\nplt.show()","9f8eedb7":"drop_0_list = data.index[data[\"Price_usd\"] == 0].tolist()\ndrop_0 = data.drop(drop_0_list)\ndrop_0.head()","0957de61":"prophet_data_2 = drop_0.rename(columns={'Date': 'ds', 'Price_usd': 'y'})\nfbp_2 = fbprophet.Prophet()\nfbp_2.fit(prophet_data_2)","e69c10ca":"data_forecast_2 = fbp_2.make_future_dataframe(periods=24,freq='M')\ndata_forecast_2 = fbp_2.predict(data_forecast_2)\nfbp.plot(data_forecast_2, xlabel = 'Date', ylabel = 'Price_usd')\nplt.title('Energy Consumption of Turkey (MWh)')","0051f2dd":"fbp_2.plot(data_forecast_2, xlabel = 'Date', ylabel = 'Price_usd')\nplt.vlines([date for date in fbp_2.changepoints],ymin=0,ymax=82, color='r')\nplt.title('Energy Consumption of Turkey (MWh)')\nprint('Change points:')\nprint(fbp_2.changepoints)","0d9e8b30":"fbp_2.plot_components(data_forecast_2)","6e001302":"f,ax=plt.subplots(3,1,figsize=(16,9))\n\ndata1_1 = drop_0.resample('M', on='Date').mean()\ndata2_1 = drop_0.resample('W', on='Date').mean()\ndata3_1 = drop_0.resample('D', on='Date').mean()\n\ndata1_1['Price_usd'].plot(ax = ax[0], color = 'cyan')\nax[0].set_title('Mean Delay (monthly)')\nax[0].set_xlabel('')\nax[0].set_ylabel('minute')\n\ndata2_1['Price_usd'].plot(ax = ax[1], color = 'lime')\nax[1].set_title('Mean Delay (weekly)')\nax[1].set_xlabel('')\nax[1].set_ylabel('minute')\n\ndata3_1['Price_usd'].plot(ax = ax[2], color = 'grey')\nax[2].set_title('Mean Delay (daily)')\nax[2].set_xlabel('')\nax[2].set_ylabel('minute')\n\nf.subplots_adjust(hspace=0.6)\nplt.show()","786ba44f":"model_2 = ARIMA(drop_0['Price_usd'], order=(5,1,0))\nmodel_fit_2 = model_2.fit(disp=0)\nprint(model_fit_2.summary())","64e65573":"residuals_2 = pd.DataFrame(model_fit_2.resid)\nresiduals_2.plot()\npyplot.show()\nresiduals_2.plot(kind='kde')\npyplot.show()\nprint(residuals_2.describe())","e5c2610d":"plt.rcParams.update({'figure.figsize':(9,7), 'figure.dpi':120})\n\n# Original Series\nfig, axes = plt.subplots(3, 2, sharex=True)\naxes[0, 0].plot(drop_0.Price_usd); axes[0, 0].set_title('Original Series')\nplot_acf(drop_0.Price_usd, ax=axes[0, 1])\n\n# 1st Differencing\naxes[1, 0].plot(drop_0.Price_usd.diff()); axes[1, 0].set_title('1st Order Differencing')\nplot_acf(drop_0.Price_usd.diff().dropna(), ax=axes[1, 1])\n\n# 2nd Differencing\naxes[2, 0].plot(drop_0.Price_usd.diff().diff()); axes[2, 0].set_title('2nd Order Differencing')\nplot_acf(drop_0.Price_usd.diff().diff().dropna(), ax=axes[2, 1])\n\nplt.show()","9b7176b3":"# 1) Read & Check Data","1c8c2c07":"# Auto Correlation","7e562b55":"# Prophet_without 0","ccc474d9":"# This Notbook include 5 section\n\n- Section 0 : Import Libraries\n- Section 1 : Read & Check Data\n- Section 2 : DataClean & Preprocessing\n- Section 3 : EDA\n- Section 4 : Prophet & ARIMA Forecasting\n- Section 5 : Prophet & ARIMA Forecasting without free price","f7170b4b":"# ARIMA_without 0","92e8cd34":"# Columns: \n\n- Name: Name of the app.\n- Rating: Rating for the app.\n- No of People Rated : No of people who rated the app.\n- Category : Category of the app.\n- Date : Date when it is posted.\n- Price : Price of the app.\n- Price_usd : 1 indian rupee = 0.013 usd\n- year\n- month\n- day\n- day_of_week","90778b51":"- Drop NaN rows\n- Change Price type.","e6bd7ff3":"# 2) Data Clean & Preprocessing","cc653a91":"# 5) Forecasting Models without Free Price ","c4afa49c":"# 3) EDA","8c7742d4":"# Daily - Weekly - Monthly","aecbda65":"# 4) Forecasting Models ","ffb06e9a":"# Date","053429a4":"# Price","f77093df":"We have got so many 0 value in data['Price_usd'] so I drop that and check again.","c066276a":"# Import Libraries","6458cfe5":"data['dat_of_week'] = [{0:Monday ... 6:Sunday}]","a87255bc":"# ----------------------------------------------------------------------------------------","b2af6ab3":"# ARIMA","fd1d26a5":"# Forecasting with Prophet","fb6031bf":"# Daily - Weekly - Monthly"}}