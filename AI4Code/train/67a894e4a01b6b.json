{"cell_type":{"b25e54e2":"code","513bb89d":"code","1f72418f":"code","bb56695f":"code","89df315e":"code","0926dab0":"code","5e98d1a0":"code","4946a5c6":"code","2a6b9ed9":"code","9ea63f0b":"code","ed4a484a":"code","7b4e0888":"code","11ad0572":"code","c78e911d":"code","a2470189":"code","124d30ae":"code","f6f0ca56":"code","c4c535a1":"code","6e45dbd6":"code","019a7375":"code","0a940237":"code","603a27da":"code","103c1334":"code","91892cb6":"code","33fca88f":"code","64b60889":"code","cfb27a6b":"code","23174bfe":"code","9445e8fb":"code","79c926e4":"code","bf755a88":"code","81176b36":"code","3a28bf01":"code","45f0ca67":"code","a897ef0f":"code","ce364800":"code","beaa8769":"code","3dc03300":"code","14082157":"code","ae01e3d8":"code","0513eda6":"code","11648e74":"code","034471d7":"code","ea7cb5be":"code","e0d0e51f":"code","0a2b5d81":"code","ca0bc9c8":"code","4cd69efb":"code","d5faec86":"code","4169d60b":"code","20943f94":"code","8f55c3a3":"code","9bf7fd06":"code","af34c1f6":"code","ea851980":"code","9d686f75":"code","76d56a4a":"code","79771983":"code","fe1b1404":"code","336632cb":"code","6e6a06a0":"code","0628a399":"code","c8589390":"code","5fb0a400":"code","3f3fb187":"code","481f9dc9":"code","badbd20b":"code","e1847981":"code","e4ae697c":"code","9a8b5671":"code","110abf2b":"code","d4ecc80a":"code","ef61d24a":"code","d8014276":"code","caf774db":"code","9e2988fc":"code","ba08bdef":"code","b62a2f2d":"code","d7810fd2":"code","6319a481":"code","a6af1332":"code","98146224":"code","3a8e92d1":"code","2f5f98f9":"markdown"},"source":{"b25e54e2":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mlp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder,StandardScaler\nfrom sklearn.pipeline import Pipeline\nimport plotly.express as px\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier,VotingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import  accuracy_score, confusion_matrix, roc_auc_score, roc_curve\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import roc_auc_score,roc_curve,auc\nfrom sklearn.model_selection import StratifiedKFold\nfrom datetime import datetime\nfrom random import random\nfrom sklearn.compose import ColumnTransformer\ntry:\n    import xgboost\nexcept ImportError as ex:\n    print('Xgboost in not installed on your system')\n    xgboost = None","513bb89d":"path = '..\/input\/avhranalytics\/'\ntrain = pd.read_csv(path+'train_jqd04QH.csv')\ntest = pd.read_csv(path+'test_KaymcHn.csv')","1f72418f":"MLP_XKCD_COLOR = mlp.colors.XKCD_COLORS\nMLP_BASE_COLOR = mlp.colors.BASE_COLORS\nMLP_CNAMES = mlp.colors.cnames\nMLP_CSS4 = mlp.colors.CSS4_COLORS\nMLP_HEX = mlp.colors.hexColorPattern\nMLP_TABLEAU = mlp.colors.TABLEAU_COLORS\nprint('I like COLORS :>')\ndef random_color_generator(color_type=None):\n    if color_type is None:\n        colors = sorted(MLP_CNAMES.items(), key=lambda x: random())\n    else:\n        colors = sorted(color_type.items(), key=lambda x: random())\n    return dict(colors)","bb56695f":"def timer(start_time=None):\n    if not start_time:\n        start_time = datetime.now()\n        return start_time\n    elif start_time:\n        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n        tmin, tsec = divmod(temp_sec, 60)\n        print('\\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))","89df315e":"train.head(2)","0926dab0":"colors = random_color_generator(MLP_BASE_COLOR)\ntrain['target'].value_counts().plot(kind='bar',color=colors)\nplt.title('Target Distribution')\nplt.show()","5e98d1a0":"fig = px.scatter(train, x=\"training_hours\", y=\"city_development_index\", color=\"target\",\n                 size='training_hours', hover_data=['city_development_index'])\nfig.show()","4946a5c6":"print(train.shape)\nprint(test.shape)","2a6b9ed9":"full = train.append(test)\nfull.shape","9ea63f0b":"full.info()","ed4a484a":"full.isnull().sum()","7b4e0888":"def fillna(col,typeX=None):\n    if typeX:\n        full[col].fillna('-1',inplace=True)\n    else:\n        full[col].fillna('Unknown',inplace=True)\n    return full[col]","11ad0572":"fillna('gender')\nfull.gender.value_counts()","c78e911d":"fillna('relevent_experience')\nfull.relevent_experience.value_counts()","a2470189":"fillna('enrolled_university')\nfull.enrolled_university.value_counts()","124d30ae":"fillna('education_level')\nfull.education_level.value_counts()","f6f0ca56":"fillna('major_discipline')\nfull.major_discipline.value_counts()","c4c535a1":"fillna('experience','int')\nfull.experience = full['experience'].replace('>20','21')\nfull.experience = full['experience'].replace('<1','0')\nfull.experience = full['experience'].astype('int')\nfull.experience.value_counts()","6e45dbd6":"full.experience.describe()","019a7375":"bin_labels = ['unknown','low', 'medium', 'high']\nbins= [-1,0,7,14,25]\nfull['experience_cut'] = pd.cut(full['experience'], bins=bins, labels=bin_labels, right=False)","0a940237":"fillna('company_size','int')\nfull.company_size = full['company_size'].replace('<10','1')\nfull.company_size = full['company_size'].replace('10\/49','2')\nfull.company_size = full['company_size'].replace('50-99','3')\nfull.company_size = full['company_size'].replace('100-500','4')\nfull.company_size = full['company_size'].replace('500-999','5')\nfull.company_size = full['company_size'].replace('1000-4999','6')\nfull.company_size = full['company_size'].replace('5000-9999','7')\nfull.company_size = full['company_size'].replace('10000+','8')\nfull.company_size = full['company_size'].astype('int')\nfull.company_size.value_counts()","603a27da":"bins= [-1,0,3,6,10]\nlabels = ['Unknown','small','medium','large']\nfull['company_size_cut'] = pd.cut(full['company_size'], bins=bins, labels=labels, right=False)","103c1334":"fillna('company_type')\nfull.company_type.value_counts()","91892cb6":"fillna('last_new_job','int')\nfull.last_new_job = full['last_new_job'].replace('>4','5')\nfull.last_new_job = full['last_new_job'].replace('never','0')\nfull.last_new_job.value_counts()","33fca88f":"full.isnull().sum()","64b60889":"full.city.value_counts()","cfb27a6b":"full.city_development_index.value_counts()","23174bfe":"full.city_development_index.describe()","9445e8fb":"bins= [0,.25,.75,1.]\nlabels = ['low','medium','high']\nfull['city_development_index_cut'] = pd.qcut(full['city_development_index'], q=bins, labels=labels)","79c926e4":"full.training_hours = np.log(full.training_hours)","bf755a88":"train.target.value_counts()","81176b36":"fig = px.box(train, x=\"target\", y=\"city_development_index\", points=\"all\",color=\"target\")\nfig.show()","3a28bf01":"full.head(2)","45f0ca67":"train_1 = full[:train.shape[0]]\ntest_1 = full[train_1.shape[0]:]\nprint(train_1.shape)\nprint(test_1.shape)","a897ef0f":"sns.countplot(train_1['gender'],palette='Paired')\nplt.title('Gender Distribution')\nplt.show()","ce364800":"sns.countplot(train_1['relevent_experience'])\nplt.title('Experience Distribution')\nplt.show()","beaa8769":"colors = random_color_generator()\ntrain_1.enrolled_university.value_counts().plot(kind='bar',color=colors)\nplt.title('Enrolled University Distribution')\nplt.show()","3dc03300":"colors = random_color_generator(MLP_XKCD_COLOR)\ntrain_1.education_level.value_counts().plot(kind='bar',color=colors)\nplt.title('Education Level Distribution')\nplt.show()","14082157":"colors = random_color_generator(MLP_TABLEAU)\ntrain_1.major_discipline.value_counts().plot(kind='bar',color=colors)\nplt.title('Major Discipline Distribution')\nplt.show()","ae01e3d8":"plt.figure(figsize=(12,8))\ncolors = random_color_generator(MLP_XKCD_COLOR)\ntrain_1.experience.value_counts().plot(kind='bar',color=colors)\nplt.title('Experience wise count')\nplt.show()","0513eda6":"colors = random_color_generator(MLP_XKCD_COLOR)\ntrain_1.experience_cut.value_counts().plot(kind='bar',color=colors)\nplt.title('Experience wise count')\nplt.show()","11648e74":"colors = random_color_generator(MLP_TABLEAU)\ntrain_1.company_size.value_counts().plot(kind='bar',color=colors)\nplt.title('Company Size Distribution')\nplt.show()","034471d7":"colors=random_color_generator(MLP_CNAMES)\ntrain_1.company_type.value_counts().plot(kind='bar',color=colors)\nplt.title('Company Type Distribution')\nplt.show()","ea7cb5be":"colors=random_color_generator(MLP_BASE_COLOR)\ntrain_1.last_new_job.value_counts().plot(kind='bar',color=colors)\nplt.title('Applicant Experience Distribution')\nplt.show()","e0d0e51f":"colors=random_color_generator()\nfig = train_1.groupby('relevent_experience')['target'].value_counts().unstack().plot(kind='bar',color=colors)\nplt.title('Applicant Experience Distribution')\nfig.plot()","0a2b5d81":"colors=random_color_generator()\ntrain_1.groupby('enrolled_university')['target'].value_counts().unstack().plot.bar(stacked=True,color=colors)\nplt.title('Enrolled University Distribution')\nplt.plot()","ca0bc9c8":"colors=random_color_generator()\ntrain_1.groupby('education_level')['target'].value_counts().unstack().plot.bar(stacked=True,color=colors)\nplt.title('Education Level wise Distribution')\nplt.plot()","4cd69efb":"colors=random_color_generator()\ntrain_1.groupby('major_discipline')['target'].value_counts().unstack().plot.bar(stacked=True,color=colors)\nplt.title('Major Discipline wise  Distribution')\nplt.plot()","d5faec86":"colors=random_color_generator()\ntrain_1.groupby('experience')['target'].value_counts().unstack().plot.bar(stacked=True,color=colors)\nplt.title('Experience wise Distribution')\nplt.plot()","4169d60b":"colors=random_color_generator()\ntrain_1.groupby('experience_cut')['target'].value_counts().unstack().plot.bar(stacked=True,color=colors)\nplt.plot()","20943f94":"colors=random_color_generator()\ntrain_1.groupby('company_size')['target'].value_counts().unstack().plot(kind='bar',color=colors)\nplt.title('Company Size wise Distribution')\nplt.plot()","8f55c3a3":"colors=random_color_generator()\ntrain_1.groupby('company_size_cut')['target'].value_counts().unstack().plot.bar(stacked=True,color=colors)\nplt.plot()","9bf7fd06":"colors=random_color_generator()\ntrain_1.groupby('company_type')['target'].value_counts().unstack().plot(kind='bar',color=colors)\nplt.title('Company Type wise Distribution')\nplt.plot()","af34c1f6":"colors=random_color_generator()\ntrain_1['training_hours'].hist(bins=50,color=list(colors.keys())[1])\nplt.xlabel('Training hours')\nplt.ylabel('Count')\nplt.show()","ea851980":"colors=random_color_generator()\ntrain_1.plot(kind='scatter',x='city_development_index',y='training_hours',color=list(colors.keys())[1])\nplt.plot()","9d686f75":"colors=random_color_generator()\ntrain_1.groupby('city_development_index_cut')['target'].value_counts().unstack().plot(kind='bar',color=colors)\nplt.title('City Development Index Distribution')\nplt.plot()","76d56a4a":"x_train_cleaned = train_1.drop(['enrollee_id','city','target'],axis=1)\ny_train_cleaned = train_1['target']\ntest_cleaned = test_1.drop(['enrollee_id','city','target'],axis=1)","79771983":"x_train_cleaned.head()","fe1b1404":"x_train_cleaned.shape","336632cb":"x_train_cleaned.isnull().sum()","6e6a06a0":"test_cleaned.head(2)","0628a399":"test_cleaned.shape","c8589390":"cat_attr = ['gender','relevent_experience','enrolled_university','education_level','major_discipline','company_type']\nnum_attr = ['city_development_index','experience','company_size','last_new_job','training_hours']","5fb0a400":"train_pipeline = ColumnTransformer([('num',StandardScaler(),num_attr),\n                                   ('cat',OneHotEncoder(),cat_attr),])\n\ntrain_prepared = train_pipeline.fit_transform(x_train_cleaned)","3f3fb187":"test_pipeline = ColumnTransformer([('num',StandardScaler(),num_attr),\n                                   ('cat',OneHotEncoder(),cat_attr),])\n\ntest_prepared = test_pipeline.fit_transform(test_cleaned)","481f9dc9":"print(train_prepared.shape)\nprint(test_prepared.shape)","badbd20b":"y = y_train_cleaned.astype(np.int)\nx_train,x_val,y_train,y_val = train_test_split(train_prepared,y,test_size=0.2,random_state=42)\nprint(x_train.shape)\nprint(x_val.shape)\nprint(y_train.shape)\nprint(y_val.shape)","e1847981":"rf_clf = RandomForestClassifier(n_estimators=1000, random_state=42)\nextra_trees_clf = ExtraTreesClassifier(n_estimators=1000, random_state=42)\nmlp_clf = MLPClassifier(random_state=42)\nsvc_clf = SVC(gamma='scale',probability=True , random_state=42)","e4ae697c":"start_time = timer(None)\ny_pred_track=[]\nestimators = [rf_clf,extra_trees_clf,mlp_clf,svc_clf]\nprint('------------- ROC-AUC Scores -------------')\nfor estimator in estimators:\n    estimator.fit(x_train,y_train)\n    y_pred = estimator.predict_proba(x_val)[:,1]\n    y_pred_track.append(y_pred)\n    print(estimator.__class__.__name__,'-->',roc_auc_score(y_val,y_pred))\ntimer(start_time)","9a8b5671":"plt.figure(figsize=(10,8))\nplt.title('Reciever Operating Characteristics Curve')\nfor y_pred,estimator in zip(y_pred_track,estimators):\n    colors=random_color_generator()\n    frp,trp, threshold = roc_curve(y_val,y_pred)\n    roc_auc_ = auc(frp,trp)\n    plt.plot(frp,trp,'r',label = '%s AUC = %0.3f' %(estimator.__class__.__name__,roc_auc_),color=list(colors.keys())[1])\nplt.legend(loc='lower right')\nplt.plot([0,1],[0,1],'b--')\nplt.ylabel('True positive rate')\nplt.xlabel('False positive rate')\nplt.show()","110abf2b":"named_estimators = [\n    (\"random_forest_clf\", rf_clf),\n    (\"extra_trees_clf\", extra_trees_clf),\n    (\"mlp_clf\", mlp_clf)\n]","d4ecc80a":"voting_clf = VotingClassifier(named_estimators,voting='soft')\nstart_time = timer(None)\nvoting_clf.fit(x_train, y_train)\ny_pred = voting_clf.predict_proba(x_val)[:,1]\nprint('ROC-AUC Score -->',roc_auc_score(y_val,y_pred))\ntimer(start_time)","ef61d24a":"[estimator.score(x_val, y_val) for estimator in voting_clf.estimators_]","d8014276":"xgb = xgboost.XGBClassifier(\n n_estimators=100,\n max_depth=5,\n min_child_weight=1,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n objective= 'binary:logistic',\n nthread=4,\n scale_pos_weight=1,\n seed=42)\nxgb.fit(x_train,y_train,eval_set=[(x_val,y_val)])\ny_pred = xgb.predict_proba(x_val)[:,1]\naoc_auc = roc_auc_score(y_val, y_pred) # Not shown\nprint(\"AOC ROC Score\", aoc_auc) ","caf774db":"param_test1 = {\n 'max_depth':range(3,10,2),\n 'min_child_weight':range(1,6,2)\n}\n\nfolds=10\nparam_comb = 5\n\nskf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 42)\n\nrandom_search = RandomizedSearchCV(xgb, param_distributions=param_test1, n_iter=param_comb, scoring='roc_auc', n_jobs=4, cv=skf, verbose=2, random_state=42 )\n\nstart_time = timer(None)\nrandom_search.fit(x_train, y_train)\nrandom_search.best_score_\ntimer(start_time) ","9e2988fc":"random_search.best_estimator_","ba08bdef":"random_search.best_score_","b62a2f2d":"err = []\ny_pred_tot_xgb = []\nfold = StratifiedKFold(n_splits=15)\ni = 1\nfor train_index, test_index in fold.split(train_prepared, y):\n    x_train, x_val = train_prepared[train_index], train_prepared[test_index]\n    y_train, y_val = y[train_index], y[test_index]\n    m = random_search.best_estimator_\n    m.fit(x_train, y_train,\n          eval_set=[(x_train,y_train),(x_val, y_val)],\n          early_stopping_rounds=200,\n          eval_metric='auc',\n          verbose=200)\n    pred_y = m.predict_proba(x_val)[:,1]\n    print(\"err_xgb: \",roc_auc_score(y_val,pred_y))\n    err.append(roc_auc_score(y_val, pred_y))\n    pred_test = m.predict_proba(test_prepared)[:,1]\n    i = i + 1\n    y_pred_tot_xgb.append(pred_test)","d7810fd2":"np.mean(err,0)","6319a481":"colors = random_color_generator()\nfeat_imp = pd.Series(m.feature_importances_).sort_values(ascending=False)\nfeat_imp.plot(kind='bar', title='Feature Importances',color=colors)\nplt.ylabel('Feature Importance Score')","a6af1332":"predictions = test[['enrollee_id']]\npredictions['prediction'] = m.predict(test_prepared)","98146224":"predictions.head()","3a8e92d1":"predictions.prediction.value_counts()","2f5f98f9":"Bi-Variate Analysis wrt **TARGET**"}}