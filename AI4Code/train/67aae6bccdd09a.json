{"cell_type":{"f84b5c7b":"code","1c68476d":"code","a456632e":"code","4ad518e2":"code","03d29c50":"code","5ae1a6a0":"code","2ff8d5ea":"code","c1e38be4":"code","22112df5":"code","0639efe0":"code","5467007a":"code","ac251e17":"code","e230b1d0":"code","9492f271":"code","1182e34b":"code","14cb22c3":"code","25f51563":"code","698eb770":"code","13440474":"code","530816c4":"code","7385e1ba":"code","1d8fbd3c":"code","06439038":"code","b39881e0":"code","e4aade56":"code","04ee3c48":"code","80c5651f":"code","eb624e86":"code","98d6c419":"code","0bb08b66":"code","ba906c51":"code","17b599e6":"code","a64478bd":"code","a48faa8d":"code","2c286342":"code","b2744516":"code","7c93cf47":"code","a752fb65":"code","41a3f22f":"code","ce808631":"code","ba4db66b":"code","254ab530":"code","179feaa8":"code","e3f17568":"code","1b99e349":"code","a86f553e":"code","85beed6b":"code","63f8164c":"code","f685d8a1":"code","dca8283f":"code","c4ff8fa3":"code","80d6f16f":"code","8419f7d9":"code","d4dbc1aa":"code","ba1f9e11":"code","2d70fb2a":"code","b859dace":"code","65e98415":"code","f9595b38":"markdown","5a267e6a":"markdown","a92f5329":"markdown","10db1e96":"markdown","946cdf29":"markdown","2ec532c0":"markdown","1ff91956":"markdown","18ac30d7":"markdown","e3287c64":"markdown","fbebcd0d":"markdown","b5d74242":"markdown","600b94b0":"markdown","03b88248":"markdown","1fb14063":"markdown","e88e4cea":"markdown","8c19acd7":"markdown","d0da5ffd":"markdown","f3da7edb":"markdown","13520ba4":"markdown","b3cd5d70":"markdown","c6fc2f8a":"markdown","c9ed00ac":"markdown","334accd1":"markdown","a98d05b4":"markdown"},"source":{"f84b5c7b":"# Disable warnings in Anaconda\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()","1c68476d":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test  = pd.read_csv('..\/input\/test.csv')\ndf_full = df_train.append(df_test)\npred_passid = df_test.PassengerId","a456632e":"print (df_train.shape)\nprint (df_test.shape)\nprint (df_full.shape)","4ad518e2":"df_full.info()","03d29c50":"df_full.isna().sum()","5ae1a6a0":"# Age Distribution\nprint (\"The mean of age is: %.1f\" % df_full['Age'].mean())\nprint (\"The median of age: %.1f\" % df_full['Age'].median())","2ff8d5ea":"# Age\nsns.distplot(df_full['Age'], bins=15);","c1e38be4":"# Since Age skewes to the right, we will use median for the NA values.\ndf_full['Age']=df_full['Age'].fillna(df_full['Age'].median())\ndf_full['Age'].describe()","22112df5":"df_full['Fare']=df_full['Fare'].fillna(df_full['Fare'].median())","0639efe0":"df_full.Embarked.value_counts()","5467007a":"df_full.loc[df_full['Embarked'].isna(),'Embarked']='S'","ac251e17":"df_full.drop('Cabin', axis =1, inplace = True)\ndf_full.head()","e230b1d0":"df_full.isna().sum()","9492f271":"# Imbalanced Classes\ndf_full['Survived'].value_counts(normalize=True)","1182e34b":"#Sex\nsns.countplot(x='Sex',hue='Survived',data=df_full);","14cb22c3":"# Fare vs. Survived\nplt.figure(figsize=(15,8))\nax = sns.kdeplot(df_full[\"Fare\"][df_full.Survived == 1], color=\"darkturquoise\", shade=True)\nsns.kdeplot(df_full[\"Fare\"][df_full.Survived == 0], color=\"lightcoral\", shade=True)\nplt.legend(['Survived', 'Died'])\nplt.title('Density Plot of Fare for Surviving Population and Deceased Population')\nax.set(xlabel='Fare')\nplt.xlim(-10,85)\nplt.show()","25f51563":"# Pclass vs Survived\nsns.countplot(x='Pclass',hue='Survived',data=df_full)\nplt.show()","698eb770":"df_full['Title']=df_full['Name'].str.split(', ', expand=True)[1].str.split('. ',expand=True)[0]\ndf_full['Title'].value_counts()","13440474":"Weird_Title = ['Rev','Mlle','Col','Marjor','Capt','Jonkheer','Mme','th','Lady','Major', 'Dr', 'Dona','Don']\ndf_full[df_full['Title'].isin(Weird_Title)].sort_values(by=['Sex','Title'], ascending = True)","530816c4":"df_full['Title']=df_full['Title'].replace(['Lady', 'Mlle','Mme','th','Ms', 'Dona'], 'Miss')\ndf_full['Title']=df_full['Title'].replace(['Rev','Col','Marjor','Capt','Jonkheer','Don','th', 'Sir','Major'], 'Mr')\ndf_full['Title'].value_counts()","7385e1ba":"df_full['Fam_num']=df_full['SibSp']+df_full['Parch']+1\ndf_full.head()","1d8fbd3c":"# To remove \ndf_full.drop(['PassengerId' ,'Name', 'Ticket'],axis=1, inplace=True)","06439038":"df_train_cleaned = df_full.iloc[0:891,:]\ndf_test_cleaned = df_full.iloc[891:,:]","b39881e0":"X = df_train_cleaned.drop(['Survived'], axis=1)\ny = df_train_cleaned['Survived']","e4aade56":"X.describe()","04ee3c48":"X.describe(exclude='number')","80c5651f":"X=pd.get_dummies(X, drop_first=True)\nX.head()","eb624e86":"#np.corrcoef(X['Sex_female'],X['Sex_male'])\nsns.heatmap(X.corr(), annot=True,fmt=\".1f\");","98d6c419":"X.info()","0bb08b66":"from sklearn.model_selection import train_test_split","ba906c51":"X_train, X_valid, y_train, y_valid = train_test_split(X,y, test_size=0.3, random_state=17)","17b599e6":"from sklearn.linear_model import LogisticRegression","a64478bd":"lr = LogisticRegression(random_state=17, class_weight='balanced')\nlr.fit(X_train,y_train)","a48faa8d":"from sklearn.metrics import accuracy_score, confusion_matrix","2c286342":"# Without 'balanced': 0.6902\n# with: 0.723; 0.746268656716418\n# with Sex and Embarked: 0.7649\nprint(accuracy_score(y_valid, lr.predict(X_valid)))\nprint(confusion_matrix(y_valid,lr.predict(X_valid)))","b2744516":"prob = lr.predict_proba(X_train)\nprob_df = pd.DataFrame({'prob_no': prob[:,0],\n                       'prob_yes': prob[:,1],\n                       'actual': y_train}, index=X_train.index)\nprob_df.head()","7c93cf47":"pd.DataFrame({'features': X_valid.columns,\n              'coef': lr.coef_.flatten().tolist(),\n              'abs_coef': np.abs(lr.coef_.flatten().tolist())}).sort_values(by='abs_coef', ascending=False)","a752fb65":"from sklearn.ensemble import RandomForestClassifier","41a3f22f":"rf = RandomForestClassifier(random_state=17, class_weight='balanced')\nrf.fit(X_train,y_train)","ce808631":"pd.DataFrame({'Feature': X_train.columns,\n             'Importance': rf.feature_importances_}).sort_values(by='Importance', ascending=False)","ba4db66b":"print ('Accuracy (Test): %.3f' % accuracy_score(y_valid,rf.predict(X_valid)))\nprint (confusion_matrix(y_valid, rf.predict(X_valid)))","254ab530":"from xgboost import XGBClassifier\n\nxgb_model = XGBClassifier(random_state=0)\nxgb_model.fit(X_train,y_train)","179feaa8":"print ('Accuracy (Test): %.3f' % accuracy_score(y_valid,\n                                                xgb_model.predict(X_valid)))","e3f17568":"print (accuracy_score(y_valid,\n                      xgb_model.predict(X_valid)))","1b99e349":"from sklearn.model_selection import GridSearchCV","a86f553e":"# Set up the hyperparamter grid\nparameters = {'C': (0.0001, 0.001, 0.01, 0.1, 1, 10)}\n\nlr_cv = GridSearchCV(lr, parameters, scoring='accuracy', cv=5)\nlr_cv.fit(X_train,y_train)","85beed6b":"lr_cv.best_score_, lr_cv.best_params_","63f8164c":"accuracy_score(y_valid, lr_cv.predict(X_valid))","f685d8a1":"parameters_rf = {'n_estimators': [4, 6, 9], \n              'max_features': ['log2', 'sqrt','auto'], \n              'criterion': ['entropy', 'gini'],\n              'max_depth': [2, 3, 5, 10], \n              'min_samples_split': [2, 3, 5],\n              'min_samples_leaf': [1,5,8]}\n\nrf_cv=GridSearchCV(rf, parameters_rf, scoring='accuracy',cv=5, n_jobs=-1)\nrf_cv.fit(X_train,y_train)","dca8283f":"rf_cv.best_score_, rf_cv.best_params_","c4ff8fa3":"accuracy_score(y_valid, rf_cv.predict(X_valid))","80d6f16f":"parameters_xgb = {\n    \"n_estimators\": [10,20,30,40,50,60,70,80,90,100],\n    \"learning_rate\": [0.1, 0.2, 0.3,0.4,0.5]\n}\n\nxgb_cv=GridSearchCV(xgb_model, parameters_xgb, scoring = 'accuracy',cv=5, n_jobs=-1)\nxgb_cv.fit(X_train,y_train)\n","8419f7d9":"print (xgb_cv.best_score_)\nprint (xgb_cv.best_params_)","d4dbc1aa":"accuracy_score(y_valid, xgb_cv.predict(X_valid))","ba1f9e11":"df_test_cleaned=pd.get_dummies(df_test_cleaned, drop_first=True)\ndf_test_cleaned.drop(['Survived'], axis=1, inplace=True)\ndf_test_cleaned.head()","2d70fb2a":"pred = xgb_cv.predict(df_test_cleaned)\npred = pred.astype(np.int64)","b859dace":"output= pd.DataFrame({'PassengerId': pred_passid,\n                     'Survived': pred})","65e98415":"output.to_csv('titanic.csv', index=False)","f9595b38":"# Final Dataset","5a267e6a":"**Libraries**","a92f5329":"# Splitting Datasets into Training and Valudation","10db1e96":"# Random Forest","946cdf29":"# Dataset Exploration","2ec532c0":"# Dataset Splitting\n\n1. Splitting cleaned dataset back into training and test datasets.\n2. **PassengerId**, **Name** and **Ticket** will be dropped before splitting.","1ff91956":"**Learnings From others' Kernel**\n\nhttps:\/\/www.kaggle.com\/mnassrib\/titanic-logistic-regression-with-python\nhttps:\/\/www.kaggle.com\/zlatankr\/titanic-random-forest-82-78\n\n1. Age - Median \n2. New feature - alone or with family; titles from the names\n3. pd.get_dummies\n4. Need more visualizations\n5. pass 'scoring=roc_auc' to the model or other scoring","18ac30d7":"Next, we need to impute for **Embarked** field. Since it's a categorical variable, I'm going to replace with it's most often used value. In this case, S appears the most often.","e3287c64":"As you can see, we should have 1309 records. Columns with the missing values are **Age**, **Embarked**, **Fare** and **Cabin**.","fbebcd0d":"## Missing Values","b5d74242":"The **Age** distribution tells us that it skewes slightly to the right. Median will be used for the missing Values.","600b94b0":"# Transform Test Dataset\n\nPclass, Age, SibSp, Parch, Fare, Sex_male, Embarked_Q, Embarked_S, Title_Master, Title_Miss, Title_Mr, Title_Mrs","03b88248":"# XGB Classifier","1fb14063":"# Feature Selection","e88e4cea":"**Probability and Feature Importance**","8c19acd7":"# Prediction","d0da5ffd":"# Dealing with categorical variables\n\nLogistic Regression cannot directly work with variables with categorical values\n\nTwo general approaches:\n\n1. Get_dummies\n2. OneHotEncoder\n\nFor the sake of ease, I'm going to utilize **get_dummies** function built in *pandas* library.\n\nNote: To avoid the perfect Multicollinerity, the first columns produced by the function will be removed.","f3da7edb":"**Observation:**\n\nHighly correlated variable matches are\n\n1. Title_Mr & Sex_male: 0.9\n2. Title_Miss & Sex_male:-0.7","13520ba4":"Lastly, **Cabin** will be dropped due to a vast number of missing values","b3cd5d70":"Similar to **Age**, let's swap all NAs in **Fare** with median.","c6fc2f8a":"# Hyperparameter Tuning - Logistic Regression & Random Forest","c9ed00ac":"# Family Size\n\nFamily size = # of Sibling + # of Parent + Attendent(him\/herself)","334accd1":"**Feature Importance for Random Forest**","a98d05b4":"# Feature Extraction\n\n1. Title & Name length\n2. Family size"}}