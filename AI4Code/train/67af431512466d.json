{"cell_type":{"2ccb0cae":"code","b8fe129a":"code","eb38139d":"code","c37f0ab6":"code","281f5f39":"code","c4bd64e2":"code","79241d74":"code","17e1c867":"code","31739544":"code","94c6fef7":"code","d9a56c8b":"code","cb2dbd91":"code","d6dce0ff":"code","ff30ac7b":"code","206d03f8":"code","f2fe3d72":"code","42839e9d":"code","d9bccd12":"code","63634e14":"code","628aee21":"code","eaf5825e":"code","3ce66f26":"code","ae3d989a":"code","127d74c8":"code","3f2ffeb7":"code","e3b9beea":"code","9023ecc3":"code","cd1bfaef":"code","17eb53ff":"code","e2783aaa":"code","a3efe6dd":"code","94f06843":"code","84ef5447":"code","261aefa7":"code","19fb58b7":"code","361452e6":"code","4f413b7c":"code","9c5fbb20":"code","022b4d35":"code","a0b87f02":"code","a3affc70":"code","33d3bbf2":"code","bfe6f6c1":"code","ec7dcfb9":"code","6cc6426f":"markdown","0d485fa9":"markdown","82ad2633":"markdown","83545832":"markdown","ce1bf2a3":"markdown","f97d4772":"markdown","8290d42d":"markdown","3b86759a":"markdown","84739287":"markdown","64f28fab":"markdown","c7b82087":"markdown","e716739c":"markdown","4ec5aca0":"markdown","39c178e3":"markdown"},"source":{"2ccb0cae":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","b8fe129a":"df = pd.read_csv('..\/input\/videogamesales\/vgsales.csv')\ndf.head()","eb38139d":"df.info()","c37f0ab6":"df.describe()","281f5f39":"# !pip install pandas-profiling\nimport pandas_profiling\n\ndf.profile_report()","c4bd64e2":"df.isna().sum()","79241d74":"df['Year'] = df['Year'].fillna(df['Year'].mean())\ndf['Year'] = df['Year'].astype('int')","17e1c867":"df['Publisher'].value_counts()","31739544":"df['Publisher'] = df['Publisher'].fillna(df['Publisher'].mode()[0])\ndf.isna().sum()","94c6fef7":"year_sales=df.groupby(['Year'])['Global_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('Global_Sales')\nsns.barplot(x= year_sales.index, y= year_sales.values)","d9a56c8b":"year_na_sales=df.groupby(['Year'])['NA_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('NA_Sales')\nsns.barplot(x= year_na_sales.index, y= year_na_sales.values)","cb2dbd91":"year_eu_sales=df.groupby(['Year'])['EU_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('EU_Sales')\nsns.barplot(x= year_eu_sales.index, y= year_eu_sales.values)","d6dce0ff":"year_jp_sales=df.groupby(['Year'])['JP_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('JP_Sales')\nsns.barplot(x= year_jp_sales.index, y= year_jp_sales.values)","ff30ac7b":"year_other_sales=df.groupby(['Year'])['Other_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('Other_Sales')\nsns.barplot(x= year_other_sales.index, y= year_other_sales.values)","206d03f8":"genre_sales = df.groupby(['Genre'])['Global_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('Global_Sales')\nsns.barplot(x= genre_sales.index, y= genre_sales.values)","f2fe3d72":"genre_na_sales = df.groupby(['Genre'])['NA_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('NA_Sales')\nsns.barplot(x= genre_na_sales.index, y= genre_na_sales.values)","42839e9d":"genre_eu_sales = df.groupby(['Genre'])['EU_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('EU_Sales')\nsns.barplot(x= genre_eu_sales.index, y= genre_eu_sales.values)","d9bccd12":"genre_jp_sales = df.groupby(['Genre'])['JP_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('JP_Sales')\nsns.barplot(x= genre_jp_sales.index, y= genre_jp_sales.values)","63634e14":"genre_other_sales = df.groupby(['Genre'])['Other_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('Other_Sales')\nsns.barplot(x= genre_other_sales.index, y= genre_other_sales.values)","628aee21":"platform_sales = df.groupby(['Platform'])['Global_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('Global_Sales')\nsns.barplot(x= platform_sales.index, y= platform_sales.values)","eaf5825e":"platform_na_sales = df.groupby(['Platform'])['NA_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('NA_Sales')\nsns.barplot(x= platform_na_sales.index, y= platform_na_sales.values)","3ce66f26":"platform_eu_sales = df.groupby(['Platform'])['EU_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('EU_Sales')\nsns.barplot(x= platform_eu_sales.index, y= platform_eu_sales.values)","ae3d989a":"platform_jp_sales = df.groupby(['Platform'])['JP_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('JP_Sales')\nsns.barplot(x= platform_jp_sales.index, y= platform_jp_sales.values)","127d74c8":"platform_other_sales = df.groupby(['Platform'])['Other_Sales'].sum().sort_values(ascending=False)\nplt.figure(figsize=(22,10))\nplt.ylabel('Other_Sales')\nsns.barplot(x= platform_other_sales.index, y= platform_other_sales.values)","3f2ffeb7":"global_publisher=df.groupby(['Publisher'])['Global_Sales'].sum().sort_values(ascending=False).head(10)\nplt.figure(figsize=(22,10))\nplt.ylabel('Global_Sales')\nsns.barplot(x= global_publisher.index, y= global_publisher.values)\n","e3b9beea":"na_publisher=df.groupby(['Publisher'])['NA_Sales'].sum().sort_values(ascending=False).head(10)\nplt.figure(figsize=(22,10))\nplt.ylabel('NA_Sales')\nsns.barplot(x= na_publisher.index, y= na_publisher.values)\n","9023ecc3":"eu_publisher=df.groupby(['Publisher'])['EU_Sales'].sum().sort_values(ascending=False).head(10)\nplt.figure(figsize=(22,10))\nplt.ylabel('EU_Sales')\nsns.barplot(x= eu_publisher.index, y= eu_publisher.values)","cd1bfaef":"jp_publisher=df.groupby(['Publisher'])['JP_Sales'].sum().sort_values(ascending=False).head(10)\nplt.figure(figsize=(22,10))\nplt.ylabel('JP_Sales')\nsns.barplot(x= jp_publisher.index, y= jp_publisher.values)","17eb53ff":"other_publisher=df.groupby(['Publisher'])['Other_Sales'].sum().sort_values(ascending=False).head(10)\nplt.figure(figsize=(22,10))\nplt.ylabel('Other_Sales')\nsns.barplot(x= other_publisher.index, y= other_publisher.values)","e2783aaa":"sns.heatmap(df.corr(),annot=True)","a3efe6dd":"df","94f06843":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\nfeature = ['Platform', 'Genre', 'Publisher']\n\n\nfor col in feature:\n    df[col] = le.fit_transform(df[col])\n\ndf = df.drop('Name',axis=1)","84ef5447":"sns.heatmap(df.corr(),annot=True)","261aefa7":"from sklearn.model_selection import train_test_split\n\nX = df.drop(['Global_Sales'],axis=1)\ny = df['Global_Sales']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.25, random_state=42)\n\n","19fb58b7":"from sklearn.preprocessing import StandardScaler \nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","361452e6":"from sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error\n\nknn = KNeighborsRegressor()\n\nknn.fit(X_train, y_train)\n\ny_pred = knn.predict(X_test)\n\nrmse = np.sqrt(mean_squared_error(y_test,y_pred))\n\nprint('Accuracy:', knn.score(X_test, y_test))\nprint('RMSE Error:', rmse)\n","4f413b7c":"from sklearn.model_selection import GridSearchCV\n\nknn_params = {'n_neighbors': np.arange(1,10,1), \n              'metric':['manhattan','euclidean','minkowski']}\n\nknn = KNeighborsRegressor()\n\nknn_cv_model = GridSearchCV(knn, knn_params, cv = 10)\n\nknn_cv_model.fit(X_train, y_train)\n\nprint(knn_cv_model.best_params_[\"n_neighbors\"])\nprint(knn_cv_model.best_params_[\"metric\"])","9c5fbb20":"knn_tuned = KNeighborsRegressor(n_neighbors = knn_cv_model.best_params_[\"n_neighbors\"],\n                                metric=knn_cv_model.best_params_[\"metric\"])\n\nknn_tuned.fit(X_train, y_train)\n\ny_pred = knn_tuned.predict(X_test)\n\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))","022b4d35":"from sklearn.tree import DecisionTreeRegressor\n\ndtr = DecisionTreeRegressor(random_state=32)\n\ndtr.fit(X_train, y_train)\n\ny_pred = dtr.predict(X_test)\n\nprint('Accuracy:',dtr.score(X_test, y_test))\nprint('RMSE Error:',np.sqrt(mean_squared_error(y_test, y_pred)))\n","a0b87f02":"dtr_params = {\"min_samples_split\": range(2,50),\n               \"max_leaf_nodes\": range(2,20)}\n\ndtr = DecisionTreeRegressor()\n\ndtr_cv_model = GridSearchCV(dtr, dtr_params, cv = 10)\n\ndtr_cv_model.fit(X_train, y_train)\n\nprint(dtr_cv_model.best_params_[\"min_samples_split\"])\nprint(dtr_cv_model.best_params_[\"max_leaf_nodes\"])","a3affc70":"dtr_tuned = DecisionTreeRegressor(min_samples_split = dtr_cv_model.best_params_[\"min_samples_split\"],\n                                max_leaf_nodes=dtr_cv_model.best_params_[\"max_leaf_nodes\"])\n\ndtr_tuned.fit(X_train, y_train)\n\ny_pred = dtr_tuned.predict(X_test)\n\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))","33d3bbf2":"from sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor(random_state=10)\n\nrf.fit(X_train, y_train)\n\ny_pred = rf.predict(X_test)\n\nprint('Accuracy:',rf.score(X_test, y_test))\nprint('RMSE Error:',np.sqrt(mean_squared_error(y_test, y_pred)))\n","bfe6f6c1":"from sklearn.model_selection import RandomizedSearchCV\n\n\nrf_params = {'max_depth': list(range(1,5)),\n            'max_features': [2,4,8],\n            'n_estimators' : [100, 300, 500]}\n\nrf = RandomForestRegressor()\n\nrf_cv_model = RandomizedSearchCV(estimator=rf, param_distributions = rf_params,\n                               cv = 10, n_iter = 10, n_jobs=-1)\n\nrf_cv_model.fit(X_train, y_train)\n\nprint(rf_cv_model.best_params_[\"max_depth\"])\nprint(rf_cv_model.best_params_[\"max_features\"])\nprint(rf_cv_model.best_params_[\"n_estimators\"])","ec7dcfb9":"rf_tuned = RandomForestRegressor(max_depth = rf_cv_model.best_params_[\"max_depth\"],\n                                max_features = rf_cv_model.best_params_[\"max_features\"],\n                                n_estimators = rf_cv_model.best_params_[\"n_estimators\"])\n\nrf_tuned.fit(X_train, y_train)\n\ny_pred = rf_tuned.predict(X_test)\n\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))","6cc6426f":"### Random Forest Regression Hyperparameters","0d485fa9":"### Random Forest Regression","82ad2633":"### Decision Tree Regression","83545832":"### Random Forest Regression Best Hyperparameters","ce1bf2a3":" ### K-Nearest-Neighbors Regression Hyperparameter","f97d4772":" ### K-Nearest-Neighbors Regression Best Hyperparameters","8290d42d":"## Data Preview ","3b86759a":"## Data Preprocessing","84739287":"## Data Modelling & Hyperparameters","64f28fab":" ### K-Nearest-Neighbors Regression","c7b82087":"### Decision Tree Regression Best Hyperparameters","e716739c":"## Data Visualization for EDA","4ec5aca0":"## Data Manipulation","39c178e3":"### Decision Tree Regression Hyperparameters"}}