{"cell_type":{"5dde6c82":"code","fb50050e":"code","4cd8dcc8":"code","75d4041b":"code","2e97757d":"code","aef4d600":"code","dfa80520":"code","8fddf679":"code","22c429a4":"code","8a46bf2b":"code","d9fec1ef":"code","0c29a11e":"code","a038ff3f":"code","269e3bf1":"code","0b1ddf12":"code","fe186d41":"code","42bef3a4":"code","f3415304":"code","8bd7b587":"code","3c9c10bc":"code","e55b2ed1":"code","ded1d5f1":"code","e5eda9a9":"code","c21c15a8":"code","435bbf0f":"code","fe6f1591":"code","5674a83b":"code","114c2b08":"code","cbcdca29":"code","b1295068":"code","f8848c9d":"code","4bfc787f":"code","73b1c4be":"code","44a2e608":"code","cf17b034":"code","967ce49e":"code","ae1f9541":"code","89caa82a":"code","cf0a928d":"code","1c90eeec":"code","e2d03436":"code","054adeb1":"code","6d787a3a":"code","c35632ad":"code","cd3eb84f":"code","26f41b44":"code","a8b00251":"code","be3f3476":"code","096ef578":"code","a4f15a9a":"code","866b5322":"code","72a3efec":"markdown","1a28adf0":"markdown","bb3ebf57":"markdown","a2cd75f3":"markdown"},"source":{"5dde6c82":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb50050e":"!pip install fuzzymatcher\n!pip install recordlinkage","4cd8dcc8":"import pandas as pd\nfrom pathlib import Path\nimport fuzzymatcher\nimport recordlinkage","75d4041b":"hospital_accounts = pd.read_csv(\n    'https:\/\/github.com\/chris1610\/pbpython\/raw\/master\/data\/hospital_account_info.csv'\n)\nhospital_reimbursement = pd.read_csv(\n    'https:\/\/raw.githubusercontent.com\/chris1610\/pbpython\/master\/data\/hospital_reimbursement.csv'\n)","2e97757d":"hospital_accounts.head()","aef4d600":"hospital_reimbursement.head()","dfa80520":"# Columns to match on from df_left\nleft_on = [\"Facility Name\", \"Address\", \"City\", \"State\"]\n\n# Columns to match on from df_right\nright_on = [\n    \"Provider Name\", \"Provider Street Address\", \"Provider City\",\n    \"Provider State\"\n]","8fddf679":"import sqlite3, platform\n\nprint('sqlite {}'.format(sqlite3.version_info))\nprint('sqlite {}'.format(sqlite3.sqlite_version_info))\nprint('sqlite {}'.format(sqlite3.__file__))\n\ndb = sqlite3.connect(':memory:') # memory stream\ncursor = db.cursor()\n\nresults = cursor.execute(\"pragma compile_options\")\n\nfor r in results:\n    print(r)\n\nprint()\nprint(\"Operating System: {} {}\".format(platform.system(), platform.release()))\nprint(\"Platform: {} {}\".format(platform.python_implementation(),platform.python_version()))\nprint(\"SQLite: {}\".format(sqlite3.sqlite_version))","22c429a4":"# Now perform the match\n# It will take several minutes to run on this data set\nmatched_results = fuzzymatcher.fuzzy_left_join(hospital_accounts,\n                                               hospital_reimbursement,\n                                               left_on,\n                                               right_on,\n                                               left_id_col='Account_Num',\n                                               right_id_col='Provider_Num')","8a46bf2b":"matched_results.head()","d9fec1ef":"# Reorder the columns to make viewing easier\ncols = [\n    \"best_match_score\", \"Facility Name\", \"Provider Name\", \"Address\", \"Provider Street Address\",\n    \"Provider City\", \"City\", \"Provider State\", \"State\"\n]","0c29a11e":"# Let's see the best matches\nmatched_results[cols].sort_values(by=['best_match_score'], ascending=False).head(5)","a038ff3f":"# Now the worst matches\nmatched_results[cols].sort_values(by=['best_match_score'],\n                                  ascending=True).head(5)","269e3bf1":"# Look at the matches around 1\nmatched_results[cols].query(\"best_match_score <= 1\").sort_values(\n    by=['best_match_score'], ascending=False).head(10)","0b1ddf12":"matched_results[cols].query(\"best_match_score <= .80\").sort_values(\n    by=['best_match_score'], ascending=False).head(5)","fe186d41":"# Re-read in the data using the index_col\nhospital_accounts = pd.read_csv(\n    'https:\/\/github.com\/chris1610\/pbpython\/raw\/master\/data\/hospital_account_info.csv',\n    index_col='Account_Num'\n)\nhospital_reimbursement = pd.read_csv(\n    'https:\/\/raw.githubusercontent.com\/chris1610\/pbpython\/master\/data\/hospital_reimbursement.csv',\n    index_col='Provider_Num'\n)","42bef3a4":"hospital_accounts.head()","f3415304":"hospital_reimbursement.head()","8bd7b587":"# Build the indexer\nindexer = recordlinkage.Index()\n# Can use full or block\n#indexer.full()\n#indexer.block(left_on='State', right_on='Provider State')\n\n# Use sortedneighbor as a good option if data is not clean\nindexer.sortedneighbourhood(left_on='State', right_on='Provider State')","3c9c10bc":"candidates = indexer.index(hospital_accounts, hospital_reimbursement)","e55b2ed1":"# Let's see how many matches we want to do\nprint(len(candidates))","ded1d5f1":"# Takes 3 minutes using the full index.\n# 14s using sorted neighbor\n# 7s using blocking\ncompare = recordlinkage.Compare()\ncompare.exact('City', 'Provider City', label='City')\ncompare.string('Facility Name',\n               'Provider Name',\n               threshold=0.85,\n               label='Hosp_Name')\ncompare.string('Address',\n               'Provider Street Address',\n               method='jarowinkler',\n               threshold=0.85,\n               label='Hosp_Address')\nfeatures = compare.compute(candidates, hospital_accounts,\n                           hospital_reimbursement)","e5eda9a9":"features","c21c15a8":"# What are the score totals?\nfeatures.sum(axis=1).value_counts().sort_index(ascending=False)","435bbf0f":"# Get the potential matches\npotential_matches = features[features.sum(axis=1) > 1].reset_index()","fe6f1591":"potential_matches['Score'] = potential_matches.loc[:, 'City':'Hosp_Address'].sum(axis=1)\npotential_matches.head()","5674a83b":"hospital_accounts.loc[51216,:]","114c2b08":"hospital_reimbursement.loc[268781,:]","cbcdca29":"# Add some convenience columns for comparing data\nhospital_accounts['Acct_Name_Lookup'] = hospital_accounts[[\n    'Facility Name', 'Address', 'City', 'State'\n]].apply(lambda x: '_'.join(x), axis=1)","b1295068":"hospital_reimbursement['Reimbursement_Name_Lookup'] = hospital_reimbursement[[\n    'Provider Name', 'Provider Street Address', 'Provider City',\n    'Provider State'\n]].apply(lambda x: '_'.join(x), axis=1)","f8848c9d":"reimbursement_lookup = hospital_reimbursement[['Reimbursement_Name_Lookup']].reset_index()\naccount_lookup = hospital_accounts[['Acct_Name_Lookup']].reset_index()","4bfc787f":"account_lookup.head()","73b1c4be":"reimbursement_lookup.head()","44a2e608":"account_merge = potential_matches.merge(account_lookup, how='left')","cf17b034":"account_merge.head()","967ce49e":"reimbursement_lookup.head()","ae1f9541":"# Let's build a dataframe to  compare\nfinal_merge = account_merge.merge(reimbursement_lookup, how='left')","89caa82a":"cols = [\n    'Account_Num', 'Provider_Num', 'Score', 'Acct_Name_Lookup',\n    'Reimbursement_Name_Lookup'\n]","cf0a928d":"final_merge[cols].sort_values(by=['Account_Num', 'Score'], ascending=False)","1c90eeec":"# If you need to save it to Excel -\n#final_merge.sort_values(by=['Account_Num', 'Score'],\n#                        ascending=False).to_excel('merge_list.xlsx',\n#                                                  index=False)","e2d03436":"final_merge[final_merge['Account_Num']==11035][cols]","054adeb1":"final_merge[final_merge['Account_Num']==56375][cols]","6d787a3a":"hospital_dupes = pd.read_csv(\n    'https:\/\/github.com\/chris1610\/pbpython\/raw\/master\/data\/hospital_account_dupes.csv',\n    index_col='Account_Num')","c35632ad":"hospital_dupes.head()","cd3eb84f":"# Deduping follows the same process, you just use 1 single dataframe\ndupe_indexer = recordlinkage.Index()\ndupe_indexer.sortedneighbourhood(left_on='State')\ndupe_candidate_links = dupe_indexer.index(hospital_dupes)\n","26f41b44":"# Comparison step\ncompare_dupes = recordlinkage.Compare()\ncompare_dupes.string('City', 'City', threshold=0.85, label='City')\ncompare_dupes.string('Phone Number',\n                     'Phone Number',\n                     threshold=0.85,\n                     label='Phone_Num')\ncompare_dupes.string('Facility Name',\n                     'Facility Name',\n                     threshold=0.80,\n                     label='Hosp_Name')\ncompare_dupes.string('Address',\n                     'Address',\n                     threshold=0.85,\n                     label='Hosp_Address')\ndupe_features = compare_dupes.compute(dupe_candidate_links, hospital_dupes)","a8b00251":"dupe_features","be3f3476":"dupe_features.sum(axis=1).value_counts().sort_index(ascending=False)","096ef578":"potential_dupes = dupe_features[dupe_features.sum(axis=1) > 2].reset_index()\npotential_dupes['Score'] = potential_dupes.loc[:, 'City':'Hosp_Address'].sum(axis=1)","a4f15a9a":"potential_dupes.sort_values(by=['Score'], ascending=True)","866b5322":"# Take a look at one of the potential duplicates\nhospital_dupes[hospital_dupes.index.isin([51567, 41166])]","72a3efec":"## Python Tools for Record Linking and Fuzzy Matching\n\nThis notebook accompanies the [article](https:\/\/pbpython.com\/record-linking.html) on Practical Business Python\n\nThis notebook relies on [fuzzymatcher](https:\/\/github.com\/RobinL\/fuzzymatcher) and the [Python Record Linkage Toolkit](https:\/\/recordlinkage.readthedocs.io\/en\/latest\/about.html)\n","1a28adf0":"### Example using Python Record Linkage Toolkit","bb3ebf57":"### Example using fuzzymatcher","a2cd75f3":"### Dedupe the data"}}