{"cell_type":{"b45bb670":"code","8c6fff1e":"code","ca35fede":"code","0608689c":"code","97a94e34":"code","037b727d":"code","01445c18":"code","876c5fe8":"code","97aa1e58":"code","d3d094b6":"markdown","bdc444ad":"markdown"},"source":{"b45bb670":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8c6fff1e":"import pandas as pd\ntrainDF = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntestDF = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","ca35fede":"trainDF.sample(4)","0608689c":"import numpy as np\nignore_columns = []\nnumerical_columns = []\ncategorical_columns = []\n\nfor col in trainDF.columns:\n    if col == 'SalePrice':\n        continue\n        \n    c = trainDF[col]\n    dtype = c.dtype\n    missing = c.isnull().sum()\n    uniq = len(np.unique(c.astype('str')))\n    \n    tmissing = testDF[col].isnull().sum()\n    print(f\"{col}: {dtype}, {missing} missing, {uniq} Unique Values, {tmissing} Missing In Test\")","97a94e34":"from sklearn_pandas import DataFrameMapper\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.impute import SimpleImputer, MissingIndicator\nfrom sklearn.linear_model import LinearRegression\ntransformer = DataFrameMapper([\n    (['MSSubClass'], OneHotEncoder(handle_unknown='ignore', sparse=False)),\n    (['MSZoning'], [\n        SimpleImputer(strategy='most_frequent'), \n        OneHotEncoder(handle_unknown='ignore', sparse=False)\n    ]),\n    \n    (['LotFrontage'], SimpleImputer(strategy='mean')),\n    (['LotFrontage'], MissingIndicator(), {'alias': 'LotFrontage_na'}),\n    \n    (['Neighborhood'], OneHotEncoder())\n\n], df_out=True)\n\nfeaturesDF = transformer.fit_transform(trainDF)\nmodel = LinearRegression(normalize=True).fit(featuresDF, trainDF['SalePrice'])\ntestDF['SalePrice'] = model.predict(transformer.transform(testDF))","037b727d":"ignore_columns = []\nnumerical_columns = []\ncategorical_columns = []\n\nfor col in trainDF.columns:\n    if col in ('Id', 'SalePrice'):\n        ignore_columns.append(col)\n        continue\n    \n    missing = trainDF[col].isnull().sum()\n    if missing \/ trainDF.shape[0] > 0.5:\n        ignore_columns.append(col)\n    elif trainDF[col].dtype in (np.float_, np.int_):\n        numerical_columns.append(col)\n    else:\n        categorical_columns.append(col)\n    \nprint(ignore_columns)\nprint(numerical_columns)\nprint(categorical_columns)","01445c18":"from sklearn_pandas import gen_features\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.linear_model import Lasso\n\ntransformer = DataFrameMapper(\n    # handle categorical data\n    gen_features(\n        [[x] for x in categorical_columns],\n        classes=[\n            {'class': SimpleImputer, 'strategy': 'most_frequent'},\n            {'class': OneHotEncoder, 'handle_unknown': 'ignore', 'sparse': False}\n        ]\n    ) \n\n    + \n    #  handle numerical data\n    gen_features(\n        [[x] for x in numerical_columns],\n        classes=[\n            {'class': SimpleImputer, 'strategy': 'mean'},\n        ]\n    )\n    + \n    [\n        (['TotalBsmtSF', '1stFlrSF', '2ndFlrSF'], FunctionTransformer(lambda x: np.nansum(x, axis=1)), {'alias': 'totalArea'})\n    ]\n    , df_out=True\n)\n\nf = transformer.fit_transform(trainDF)\nmodel = Lasso(normalize=True).fit(f, trainDF['SalePrice'])\ntestDF['SalePrice'] = model.predict(transformer.transform(testDF))","876c5fe8":"testDF[['Id', 'SalePrice']].to_csv('\/kaggle\/working\/submission.csv', index=False)","97aa1e58":"model.coef_","d3d094b6":"# V2 \n-- treat each numerical data type as numerical \n\n-- treat object as categorical\n\n-- drop columns with more than 50% missing values","bdc444ad":"# Version 1:\ndefining transformations for each column manually --"}}