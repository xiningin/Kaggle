{"cell_type":{"b8e6f07b":"code","6918f672":"code","f1d77544":"code","e4050daa":"markdown","ea006904":"markdown","470f2baa":"markdown","adb78654":"markdown","7a5a0050":"markdown"},"source":{"b8e6f07b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6918f672":"!pip install dash\n!pip install dash_core_components\n!pip install dash_html_components\n!pip install jupyter-dash\n!conda install -c conda-forge -y dash-bootstrap-components","f1d77544":"# Import main libs\nimport os\nimport pandas as pd\nimport plotly.express as px\n# Dash libs\nimport dash\n#import dash_table\nimport dash_core_components as dcc\nimport dash_html_components as html\nfrom jupyter_dash import JupyterDash\nimport dash_bootstrap_components as dbc\nfrom dash.dependencies import Input, Output  # Load Data\n\nsourcelink = 'https:\/\/www.kaggle.com\/austinreese\/usa-housing-listings'\nfileurlraw = 'https:\/\/raw.githubusercontent.com\/Printalect\/Property-Listings-Dashboard-FV2\/master\/assets\/property-listings-100000-d2.csv'\nrawdata    = pd.read_csv(fileurlraw)\n\ntype_options = ['house', 'townhouse', 'apartment']\ncategory_options = [\n    'baths', 'beds', 'cats_allowed', 'dogs_allowed',\n    'electric_vehicle_charge', 'laundry_options', 'parking_options',\n    'smoking_allowed', 'wheelchair_access'\n]\n\n# still need to implement this if there are not eough values!\nrawdata = rawdata[rawdata['type'].isin(type_options)]\nrawdata = rawdata.groupby('state').filter(\n    lambda x: len(x) >= 100)  # only listings of 100 or more\nrawdata.reset_index(inplace=True)\n\n# create a dict for state regions\nstates_regions = rawdata[['state', 'region']]\nstates_regions = states_regions.groupby('state')#.agg(counts=('region', 'count'))\nstates_regions = states_regions['region'].unique().apply(list).to_dict()\n\napp = JupyterDash(__name__, external_stylesheets=[dbc.themes.LUX])\n# app = dash.Dash(__name__, external_stylesheets=[dbc.themes.LUX])\nserver = app.server\n\ndropdown_style_options = {\n    'width': '100%',\n    'display': 'flex',\n    'align-items': 'center',\n    'justify-content': 'center'\n}\n\nmaintitle = html.Div(\n    [dbc.Row([(html.H1(\"Property Rent Listings Dashboard\"))], justify=\"center\")])\n#dbc.Row([(html.H2(\"National Data\"))],justify=\"center\"),\n#dbc.Row(dbc.Col(html.Div()))\n#--------------\n#-NATIIONAL\nnationallevel = html.Div([\n    #dbc.Row([(html.H2(\"National Data\"))],justify=\"center\"),\n    dbc.Row([\n        dbc.Col(html.Div(dcc.Graph(id='national_graph1'))),\n        dbc.Col(html.Div(dcc.Graph(id='national_graph2')))\n    ])\n])\n\nnationalselector = html.Div([\n    dbc.Row([(html.H2(\"National Data\"))], justify=\"center\"),\n    dbc.Row([\n        dbc.Col(\n            html.Div([\n                html.Label([\n                    \"Type Selection (National):\",\n                    dcc.Dropdown(id='national_dropdown_type',\n                                 clearable=False,\n                                 multi=True,\n                                 value=type_options,\n                                 options=[{\n                                     'label': type_options[0].title(),\n                                     'value': type_options[0]\n                                 }, {\n                                     'label': type_options[1].title(),\n                                     'value': type_options[1]\n                                 }, {\n                                     'label': type_options[2].title(),\n                                     'value': type_options[2]\n                                 }])\n                ])\n            ],\n                     style=dropdown_style_options))\n    ])\n])\n#-NATIIONAL\n#--------------\n\n#--------------\n#-STATE-LEVEL\nstatelevel = html.Div([\n    #dbc.Row([(html.H2(\"State Data\"))],justify=\"center\"),\n    dbc.Row([\n        dbc.Col(html.Div(dcc.Graph(id='state_graph1'))),\n        dbc.Col(html.Div(dcc.Graph(id='state_graph2')))\n    ])\n])\n\nstatelevelselector = html.Div([\n    dbc.Row([(html.H2(\"State Data\"))], justify=\"center\"),\n    dbc.Row([\n        dbc.Col(\n            html.Div(\n                [\n                    html.Label([\n                        \"Type Selection (State):\",\n                        dcc.Dropdown(\n                            id='states_dropdown_type',\n                            #clearable=False,\n                            multi=True,\n                            value=type_options,\n                            #justify='center',\n                            options=[{\n                                'label': type_options[0].title(),\n                                'value': type_options[0]\n                            }, {\n                                'label': type_options[1].title(),\n                                'value': type_options[1]\n                            }, {\n                                'label': type_options[2].title(),\n                                'value': type_options[2]\n                            }])\n                    ]),\n                    html.Label([\n                        \"State Selection: \",\n                        dcc.Dropdown(id='state_level_states_dropdown',\n                                     clearable=False,\n                                     value='CA',\n                                     options=[{\n                                         'label': k,\n                                         'value': k\n                                     } for k in states_regions.keys()])\n                    ])\n                ],\n                style=dropdown_style_options))\n    ])\n])\n\n#-STATE-LEVEL\n#--------------\n\n#--------------\n#-REGION-LEVEL\nregionlevel = html.Div([\n    #dbc.Row([(html.H2(\"Region (City & County)\"))],justify=\"center\"),\n    dbc.Row([\n        dbc.Col(html.Div(dcc.Graph(id='region_graph1'))),\n        dbc.Col(html.Div(dcc.Graph(id='region_graph2')))\n    ])\n])\n\nregionlevelselector = html.Div([\n    dbc.Row([(html.H2(\"Region (City & County)\"))], justify=\"center\"),\n    dbc.Row([\n        dbc.Col(\n            html.Div(\n                [\n                    html.Label([\n                        \"Type Selection (Region):\",\n                        dcc.Dropdown(\n                            id='region_dropdown_type',\n                            #clearable=False,\n                            multi=True,\n                            value=type_options,\n                            #justify='center',\n                            options=[{\n                                'label': type_options[0].title(),\n                                'value': type_options[0]\n                            }, {\n                                'label': type_options[1].title(),\n                                'value': type_options[1]\n                            }, {\n                                'label': type_options[2].title(),\n                                'value': type_options[2]\n                            }])\n                    ]),\n                    html.Label([\n                        \"State Selection:\",\n                        dcc.Dropdown(id='region_level_states_dropdown',\n                                     clearable=False,\n                                     value='CA',\n                                     options=[{\n                                         'label': k,\n                                         'value': k\n                                     } for k in states_regions.keys()])\n                    ]),\n                    html.Label(\n                        [\n                            \"Region Selection: \",\n                            dcc.Dropdown(id='regions_dropdown',\n                                         #multi=True\n                                         )\n                        ],\n                        style={'width': '300px'})\n                ],\n                style=dropdown_style_options)),\n    ]),\n])\n\n#-REGION-LEVEL\n#--------------\n\n\n#--------------\n#-ADDITIONAL\nsourcelinks = html.Div([\n    #dbc.Row([(html.H2(\"Region (City & County)\"))],justify=\"center\"),\n    dbc.Row([\n        dbc.Col(html.Div(html.A('Data Source (click)', href=sourcelink, target='_blank')), style=dropdown_style_options),\n    ])\n])\n\n\nblankrow = html.Div([dbc.Row([html.Br()])], style={'marginBottom': '1.5em'})\n\n#-ADDITIONAL\n#--------------\n\n\n\n#  - - - -\napp.layout = html.Div([\n    maintitle, blankrow, nationalselector, nationallevel, blankrow,\n    statelevelselector, statelevel, blankrow, regionlevelselector, regionlevel,\n    blankrow, sourcelinks\n])\n\n\n#  - - - -\n#--------------v\n#-NATIIONAL\n# Define callback to update graph\n@app.callback(Output('national_graph1', 'figure'),\n              [Input(\"national_dropdown_type\", \"value\")])\ndef update_figure(plot_type):\n    plotdata = rawdata[(rawdata['type'].isin(plot_type))]\n    plotdata = plotdata.groupby('state').agg(avg_price=('price', 'mean'))\n    plotdata = plotdata.reset_index()\n    return px.choropleth(\n                        plotdata,\n                        locations='state',\n                        color='avg_price',\n                        locationmode='USA-states',\n                        title=('Mean Price by State'),\n                        labels={'avg_price':'Avg Price',\n                                'price': 'Price',\n                                'state':'State',\n                               'count':'Count'},\n                        color_continuous_scale=px.colors.sequential.Blues\n                    )\\\n        .update_layout(\n            geo_scope='usa' # Plot only the USA instead of globe\n        )\n\n\n# Define callback to update graph\n@app.callback(Output('national_graph2', 'figure'),\n              [Input(\"national_dropdown_type\", \"value\")])\ndef update_figure(plot_type):\n    plotdata = rawdata[(rawdata['type'].isin(plot_type))]\n    plotdata = plotdata.groupby('state').agg(count=('state', 'count'))\n    plotdata = plotdata.reset_index().sort_values('count', ascending=False)\n    plotdata = plotdata.dropna(subset=['count'], axis=0)\n    return px.bar(\n        plotdata[0:20],\n        x='state',\n        y='count',\n        color='count',\n        opacity=0.8,\n        title=('Total Properties Per State'),\n        labels={\n            'avg_price': 'Avg Price',\n            'price': 'Price',\n            'state': 'State',\n            'count': 'Count',\n            'region': 'Region'\n        },\n        color_continuous_scale=px.colors.sequential.Blues,\n    ).update_xaxes(categoryorder='total descending')\n\n\n#-NATIIONAL\n#--------------^\n\n\n#--------------v\n#-STATE-LEVEL\n# Define callback to update graph\n@app.callback(Output('state_graph1', 'figure'), [\n    Input(\"states_dropdown_type\", \"value\"),\n    Input(\"state_level_states_dropdown\", \"value\")\n])\ndef update_figure(plot_type, plot_state):\n    plotdata = rawdata\n    return px.scatter_mapbox(\n        plotdata[(plotdata['type'].isin(plot_type))\n                 & (plotdata['state'] == plot_state)],\n        lat=\"lat\",\n        lon=\"long\",\n        color=\"price\",\n        size=\"price\",\n        mapbox_style=\"carto-positron\",\n        text='state',\n        hover_name='type',\n        hover_data=['type', 'price', 'sqfeet', 'baths', 'beds'],\n        #title=('Listing Data by Price & Type in {}'.format(str(plotstate))),\n        color_continuous_scale=px.colors.sequential.Blues,\n        size_max=15,\n        zoom=4,\n        title=('Detailed Information Per Listing in {}'.format(\n            str(plot_state))),\n        labels={\n            'avg_price': 'Avg Price',\n            'price': 'Price',\n            'state': 'State',\n            'count': 'Count',\n            'type': 'Type',\n            'sqfeet': 'SQ FT',\n            'baths': 'Baths',\n            'beds': 'Beds'\n        },\n        height=500)\n\n\n@app.callback(Output('state_graph2', 'figure'), [\n    Input(\"states_dropdown_type\", \"value\"),\n    Input(\"state_level_states_dropdown\", \"value\")\n])\ndef update_figure(plot_type, plot_state):\n    plotdata = rawdata[(rawdata['state'] == plot_state)\n                       & (rawdata['type'].isin(plot_type))]\n    plotdata = plotdata.groupby('region').agg(count=('region', 'count'))\n    plotdata = plotdata.reset_index().sort_values('count', ascending=False)\n    plotdata = plotdata.dropna(subset=['count'], axis=0)\n    return px.bar(\n        plotdata[0:20],\n        x='region',\n        y='count',\n        color='count',\n        opacity=0.8,\n        color_continuous_scale=px.colors.sequential.Blues,\n        title=('Total Properties Per Region in {}'.format(str(plot_state))),\n        labels={\n            'avg_price': 'Avg Price',\n            'price': 'Price',\n            'state': 'State',\n            'region': 'Region',\n            'count': 'Count',\n            'type': 'Type',\n            'sqfeet': 'SQ FT',\n            'baths': 'Baths',\n            'beds': 'Beds',\n        },\n    ).update_xaxes(categoryorder='total descending')\n\n#-STATE-LEVEL\n#--------------^\n\n\n#--------------\n#-REGION-LEVEL\n@app.callback(\n    dash.dependencies.Output('regions_dropdown', 'options'),\n    [dash.dependencies.Input('region_level_states_dropdown', 'value')])\ndef set_cities_options(selected_country):\n    return [{'label': i, 'value': i} for i in states_regions[selected_country]]\n\n@app.callback(dash.dependencies.Output('regions_dropdown', 'value'),\n              [dash.dependencies.Input('regions_dropdown', 'options')])\ndef set_cities_value(available_options):\n    return available_options[0]['value']\n\n\n# Define callback to update graph\n@app.callback(Output('region_graph1', 'figure'), [\n    Input(\"region_dropdown_type\", \"value\"),\n    Input(\"region_level_states_dropdown\", \"value\")\n])\ndef update_figure(plot_type, plot_state):\n    plotdata = rawdata[(rawdata['state'] == plot_state)\n                       & (rawdata['type'].isin(plot_type))]\n    plotdata = plotdata.groupby('region').agg(avg_price=('price', 'mean'))\n    plotdata = plotdata.reset_index().sort_values('avg_price', ascending=False)\n    plotdata = plotdata.dropna(subset=['avg_price'], axis=0)\n    return px.bar(\n        plotdata[0:20],\n        x='region',\n        y='avg_price',\n        color='avg_price',\n        opacity=0.8,\n        title=('Average Price, Regions in {}'.format(str(plot_state))),\n        labels={\n            'avg_price': 'Avg Price',\n            'price': 'Price',\n            'state': 'State',\n            'count': 'Count',\n            'region': 'Region'\n        },\n        color_continuous_scale=px.colors.sequential.Blues,\n    )\n\n\n# Define callback to update graph\n@app.callback(Output('region_graph2', 'figure'), [\n    Input(\"region_dropdown_type\", \"value\"),\n    Input(\"region_level_states_dropdown\", \"value\"),\n    Input(\"regions_dropdown\", \"value\")\n])\ndef update_figure(plot_type, plot_state, plot_region):\n    plotdata = rawdata.copy()\n    return px.histogram(\n        plotdata[(plotdata['type'].isin(plot_type))\n                 & (plotdata['state'] == plot_state)\n                 & (plotdata['region'].isin([plot_region]))],\n        x='price',\n        color='region',\n        #nbins=50,\n        #histnorm='density',\n        marginal='violin',\n        opacity=0.8,\n        title=('Price Distribution: {}'.format(str(plot_region))),\n        labels={\n            'avg_price': 'Avg Price',\n            'price': 'Price',\n            'state': 'State',\n            'count': 'Count',\n            'region': 'Region'\n        },\n        color_discrete_sequence=px.colors.sequential.Blues_r)\n\n#-REGION-LEVEL\n#--------------\n#app.run_server()\napp.run_server(debug=True, mode='external', port=8102)\n# if __name__ == '__main__':\n#     app.run_server(debug=True)","e4050daa":"## Property Rental Listings - Dashboard Exploration","ea006904":"# [Link for this Dashboard](https:\/\/property-rentals-usa-fv2.herokuapp.com\/)","470f2baa":"<img src=\"https:\/\/raw.githubusercontent.com\/Printalect\/Property-Listings-Dashboard-FV2\/master\/assets\/propertylistingsdashboar_illustration.png\" width=\"800px\">\n","adb78654":"The goal of this notebook was to simply build a dashboard, meeting a few requirements:\n> 1. Needs to be able to run internally and externally (testing to production).\n> 2. Follow a basic business question, which I considered to be the price. \n> > * How do the prices differ over each state and region?\n> > * How do they differ per property type?\n> 3. Lastly, I had it in mind to modularize the dashboarding process when strictly coding.\n","7a5a0050":"![](http:\/\/)[]"}}