{"cell_type":{"8f8c9a84":"code","f087b7e4":"code","d74afae3":"code","446b2c3f":"code","8db9a2b5":"code","b715c772":"code","43833c78":"code","375cc81c":"code","827e8c5d":"code","e4a691bf":"code","648dce1b":"code","c21f7caa":"code","edf27719":"code","0e218b1c":"code","9d53fb4f":"code","2d375b13":"code","ba2d54b9":"code","44af03db":"code","9dfb7c05":"code","2fa36c93":"code","654a635b":"code","d487f999":"code","63731e84":"code","fe369f6e":"code","65dcf261":"code","184b3135":"code","75471204":"code","563235ed":"code","986d7420":"code","036066c6":"code","32e5f854":"code","4d72787f":"markdown","20d37c1a":"markdown","16e0f41a":"markdown","d6263272":"markdown","b690dc94":"markdown","129baea2":"markdown","61288cd3":"markdown","7e577a41":"markdown","62558aec":"markdown"},"source":{"8f8c9a84":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport operator\nimport json\nimport plotly.express as px","f087b7e4":"df = pd.read_csv('..\/input\/netflix-titles\/netflix_titles.csv')\ndf.head()","d74afae3":"df.drop(['show_id', 'date_added', 'cast', 'description'], axis = 'columns', inplace = True)","446b2c3f":"df.isnull().sum()","8db9a2b5":"a = df.isnull()\nsns.heatmap(a, cmap='YlGnBu');","b715c772":"df['rating'].value_counts()","43833c78":"df['country'].value_counts()","375cc81c":"df['country'].replace(np.nan, 'United States', inplace = True)\ndf['rating'].replace(np.nan, 'TV-MA', inplace= True)","827e8c5d":"plt.style.use('seaborn')\n\nplt.pie(df['type'].value_counts(), colors= ['#3a9dbc', '#bec3de'], labels = ['Movie', 'TV Show'],  autopct='%1.1f%%',\n        startangle=90);\n\nplt.title('Percentage of Movies and TV Shows Available on Netflix')\nplt.tight_layout();","e4a691bf":"rating_dict = df['rating'].value_counts().to_dict()","648dce1b":"x = [i for i in rating_dict]\ny =[ rating_dict[i] for i in rating_dict ]\n\nplt.figure(figsize=(8,5), dpi=100)\n\nplt.xlabel('Ratings')\nplt.ylabel('Counts')\nplt.title('Ratings of Shows available on Netflix')\n\nplt.bar(x,y, color='#800000');\n\nplt.tight_layout();","c21f7caa":"fig, ax = plt.subplots(figsize=(8,5), dpi=100)\n\nbwid = 0.35\n\nx = [i for i in rating_dict]\nmy = [i for i in df.loc[ df['type'] == 'Movie' ]['rating'].value_counts()]\n\nax.bar(np.arange(len(x)) - bwid\/2, my, bwid, label='Movies');\n\ntx = [ i for i in df.loc[ df['type'] == 'TV Show' ]['rating'].value_counts().sort_values(ascending=False).index.unique() ]\nty = [ i for i in df.loc[ df['type'] == 'TV Show' ]['rating'].value_counts()]\n\nax.bar(np.arange(len(tx)) + bwid\/2, ty, bwid, label='TV Shows');\n\nax.set_title('Frequency of Movie and Tv Show Ratings in Netflix')\nax.set_xlabel('Ratings')\nax.set_ylabel('Counts')\nax.set_xticks(np.arange(len(x)))\nax.set_xticklabels(x);\n\n\n\nax.legend();\nfig.tight_layout();","edf27719":"df['country'] = df['country'].str.split(', ')","0e218b1c":"uniq_countries = []\n\nfor i in df['country']: \n    for j in i:\n        if j not in uniq_countries:\n            uniq_countries.append(j)\n            \ntotal_countries = []\n\nfor i in df['country']:\n    for j in i:\n        total_countries.append(j)\n        \ncountry_dict = {}\n\nfor i in uniq_countries:\n    c_dict = {}\n    c_dict[i] = total_countries.count(i)\n    country_dict.update(c_dict)\n    \nsorted_country_dict = dict( sorted(country_dict.items(), key=operator.itemgetter(1),reverse=True))","9d53fb4f":"x = [i for i in sorted_country_dict][:10]\ny = [country_dict[i] for i in sorted_country_dict ][:10]\n\nfig, ax = plt.subplots(figsize=(8,5), dpi=100)\n\n\nax.set_xlabel('Countries')\nax.set_ylabel('Number of movies and tv-shows')\nax.set_title('Top 10 Countries with the highest number of Netflix Shows')\n\nax.barh(x,y, color='#800000', height=0.6);\nax.invert_yaxis();\n\nfig.tight_layout();","2d375b13":"x = [i for i in sorted(df['release_year'].unique()) ]\ny = [i for i in df['release_year'].value_counts().sort_index() ]\n\nplt.figure(figsize=(12,5), dpi=100)\nplt.bar(x,y, color = 'r');\n\nplt.title('Shows released on Netflix 1925-2020');\nplt.xticks(x, rotation = 90, fontsize=5);\nplt.xlabel('Year');\nplt.ylabel('Count');\n\nplt.tight_layout();\n\nplt.show();","ba2d54b9":"fig, ax = plt.subplots(2, 1, sharey = True, figsize = (10,6), dpi=100)\n\nmx = [ i for i in sorted( df.loc[ df['type'].str.contains(\"Movie\") ]['release_year'].unique() )[-20:] ]\nmy = [ i for i in df.loc[ df['type'].str.contains(\"Movie\") ]['release_year'].value_counts().sort_index()[-20:] ]\n\nax[0].bar(mx, my, color='#884EA0');\nax[0].set_title('Frequency of Movies released on Netflix')\nax[0].set_xticks(mx)\n\ntx = [ i for i in sorted( df.loc[ df['type'].str.contains(\"TV Show\") ]['release_year'].unique() )[-20:] ]\nty = [ i for i in df.loc[ df['type'].str.contains(\"TV Show\") ]['release_year'].value_counts().sort_index()[-20:] ]\n\nax[1].bar(tx, ty, color='#148F77');\nax[1].set_title('Frequency of TV Shows released on Netflix')\nax[1].set_xticks(tx)\n\nax[1].set_xlabel('Year')\nax[1].set_ylabel('Frequency')\n\nfig.tight_layout();","44af03db":"# oldest shows available netflix\nold_shows_df = df.sort_values('release_year')\nold_shows_df = old_shows_df[['title', 'type', 'release_year']][:20]\nold_shows_df","9dfb7c05":"# documentaries availabele in netflix\ndocumentary_df = df[ df['listed_in'].str.contains('Documentaries') ]\ndocumentary_df = documentary_df[[ 'title', 'director','release_year' ]]\ndocumentary_df.head()","2fa36c93":"# kids shows available on netflix\nkidshow_df = df[ df['listed_in'].str.contains(\"Kids' TV\") ]\nkidshow_df = kidshow_df[[ 'title','release_year' ]]\nkidshow_df.head()","654a635b":"df['listed_in'] = df['listed_in'].str.split(', ')","d487f999":"genre_list = []\n\nfor i in df['listed_in']: \n    for j in i:\n        if j not in genre_list:\n            genre_list.append(j)\n  \n\nall_genre = []\n\nfor i in df['listed_in']:\n    for j in i:\n        all_genre.append(j)   \n        \n        \ngenre_dict = {}\n\nfor i in genre_list:\n    g_dict = {}\n    g_dict[i]  = all_genre.count(i)\n    genre_dict.update(g_dict)\n    \nsorted_genre_dict = dict( sorted(genre_dict.items(), key=operator.itemgetter(1), reverse=True))","63731e84":"fig, ax = plt.subplots(figsize=(8,5), dpi=100)\n\nx = [ i for i in sorted_genre_dict ][:20]\ny = [ genre_dict[i] for i in sorted_genre_dict ][:20]\n\nax.barh(x, y, color='#9E14AB');\n\nax.set_title('Top 20 Genres of Shows available on Netflix')\n\nax.invert_yaxis();\nfig.tight_layout();","fe369f6e":"m_all_genre = []\n\nfor i in df.loc[ df['type'] == 'Movie' ]['listed_in']:\n    for j in i:\n        m_all_genre.append(j)\n        \nt_all_genre = []\n\nfor i in df.loc[ df['type'] == 'TV Show' ]['listed_in']:\n    for j in i:\n        t_all_genre.append(j)\n\nmgenre_dict = {}\n\nfor i in genre_list:\n    mg_dict = {}\n    mg_dict[i]  = m_all_genre.count(i)\n    mgenre_dict.update(mg_dict)\n    \ntgenre_dict = {}\n\nfor i in genre_list:\n    tg_dict = {}\n    tg_dict[i]  = t_all_genre.count(i)\n    tgenre_dict.update(tg_dict)\n\nsorted_mgenre_dict = dict( sorted(mgenre_dict.items(), key=operator.itemgetter(1), reverse=True))\nsorted_tgenre_dict = dict( sorted(tgenre_dict.items(), key=operator.itemgetter(1), reverse=True))","65dcf261":"fig, ax = plt.subplots(1, 2, sharex=True, figsize=(12,4), dpi = 150)\n\nmx = [ i for i in sorted_mgenre_dict ][:10]\nmy = [ mgenre_dict[i] for i in sorted_mgenre_dict ][:10]\n\nax.flat[0].barh(mx, my, height=0.5, color='#138D75');\nax.flat[0].set_title('Top 10 Genres of Movies available on Netflix')\n\ntx = [ i for i in sorted_tgenre_dict ][:10]\nty = [ tgenre_dict[i] for i in sorted_tgenre_dict ][:10]\n\nax.flat[1].barh(tx, ty, height=0.5, color='#CB4335');\nax.flat[1].set_title('Top 10 Genres of TV Shows available on Netflix')\n\nax[0].invert_yaxis();\nax[1].invert_yaxis();\nfig.tight_layout();","184b3135":"world_map = json.load(open('\/kaggle\/input\/worldcountries-geojson\/worldcountries_geojson.geojson', 'r'))","75471204":"world_map['features'][1].keys()","563235ed":"country_id_map = {}\n\nfor feature in world_map['features']:\n    feature['id'] = feature['properties']['ISO_A3']\n    country_id_map[feature['properties']['ADMIN']] = feature['id']\n    \na = {\n    'United States' : 'USA',\n    'Hong Kong' : 'HKG',\n    'Serbia' : 'SRB',\n    'West Germany': 'DEU',\n    'Soviet Union' : 'RUS',\n    'United States,' : 'VIR',\n    'Poland,' : 'POL',\n    'United Kingdom,' : 'DJ',\n    'Vatican City' : 'VAC',\n    'East Germany' : 'EDEU,'\n              }\ncountry_id_map.update(a)","986d7420":"country_df = pd.DataFrame(list(sorted_country_dict.items()), columns = ['Country', 'Counts'])\ncountry_df['id'] = country_df['Country'].apply(lambda x: country_id_map[x])","036066c6":"import plotly.io as pio\npio.renderers.default = 'notebook' ","32e5f854":"fig = px.choropleth_mapbox(country_df, locations='id', geojson=world_map, color = 'Counts',\n                   hover_name='Country',\n                          mapbox_style='carto-positron',\n                           center={'lat': 30, 'lon': 0},\n                          zoom=1,\n                          opacity=0.7 )\n\nfig.update_geos(fitbounds='locations')\npio.show(fig);","4d72787f":"*The geo map takes a lot of time to run in the notebook.","20d37c1a":"# Netflix Data Analysis and Visualization\n\n\nIn this notebook I will analyze the Netflix dataset and try to give some powerful insights of this data. This notebook will contain visualizations of Pie Chart, Bar Chart and Geomap. I hope you enojoy it!","16e0f41a":"We have our missing values. Now lets deal with them.","d6263272":"**Geo Map**","b690dc94":"Now lets check for the **missing values**. ","129baea2":"Highest number of the '**country**' values are '**United states**' and '**TV-MA**' has the highest number of ratings. So we can replace the missing '**country**' values with '**United States**' and missing '**rating**' values with '**TV-MA**'.","61288cd3":"Lets check the **Percentage** of Movies and TV Shows Available on Netflix.","7e577a41":"Leave a ****upvote**** if you like the analysis and visualization. I will be bringing more notebooks like this is the future. Till then ****Keep Coding!****","62558aec":"Alright. We have imported the Netflix dataset. We don't need the '**show_id**', '**date_added**', '**cast**' and '**description**' columns. So I will just drop them."}}