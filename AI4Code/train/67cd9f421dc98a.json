{"cell_type":{"cb7b9a1d":"code","981ad793":"code","b0129149":"code","e97f0d9f":"code","10025946":"code","eac0510f":"code","e209c895":"code","0176123d":"code","0d509abb":"code","fb025995":"code","cd403956":"code","24894f91":"code","ab479f05":"code","53001613":"code","5b410485":"code","343d0045":"code","15b05d21":"code","856bf94c":"code","117cc8c8":"code","b405d043":"code","a4af3437":"code","fd80454e":"code","3de90de0":"code","02fa0f49":"code","3f8f1721":"code","6e0e6c33":"code","855091f2":"code","31d5de0d":"code","b5d45972":"code","ddc4da7d":"code","bde12ab3":"code","22484e4f":"code","0810d5c8":"code","5cc83806":"code","9b6133a9":"code","a1ec0246":"code","07de1d5e":"code","fb92cc7e":"code","9d490290":"code","1240a20b":"code","e0151c36":"code","ecc1ae95":"code","95c86273":"code","b998adb4":"code","5dd23edd":"markdown","2c6bc3c9":"markdown","9b36e8ca":"markdown","3357dfd8":"markdown","d8e6d623":"markdown","b94b99ea":"markdown","58be4868":"markdown","5fc47549":"markdown","bfa0f733":"markdown","409aa737":"markdown","a025eacc":"markdown","23401338":"markdown","fa30eaf8":"markdown","6d1a6eca":"markdown","10557da7":"markdown","25594064":"markdown","8db4ec24":"markdown","21457a98":"markdown","7a347c3e":"markdown"},"source":{"cb7b9a1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/covid_19_india.csv'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","981ad793":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\n#plt.rcParams['figure.figsize']=17,8\nimport cufflinks as cf\nimport plotly.offline as pyo\nfrom plotly.offline import init_notebook_mode,plot,iplot\nimport folium \nfrom folium import plugins\nplt.rcParams['figure.figsize'] = 10, 12\nimport warnings\nwarnings.filterwarnings('ignore')","b0129149":"pyo.init_notebook_mode(connected=True)\ncf.go_offline()","e97f0d9f":"df= pd.read_csv(r\"..\/input\/covid19-in-india\/covid_19_india.csv\")\ndf.head()","10025946":"df.isnull().sum()","eac0510f":"df.drop(['ConfirmedIndianNational','ConfirmedForeignNational'],axis=1,inplace=True)","e209c895":"df.shape","0176123d":"df.head()","0d509abb":"f, ax = plt.subplots(figsize=(28, 28))\ndata = df[['State\/UnionTerritory','Confirmed','Cured','Deaths']]   \ndata.sort_values('Confirmed',ascending=False,inplace=True)\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Confirmed\", y=\"State\/UnionTerritory\", data=data,label=\"Total\", color=\"red\")\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Cured\", y=\"State\/UnionTerritory\", data=data, label=\"Cured\", color=\"green\")\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 700000), ylabel=\"\",xlabel=\"Cases\")\nsns.despine(left=True, bottom=True)","fb025995":"df['Date'] = pd.to_datetime(df['Date'],dayfirst = True)","cd403956":"df_confirmed_india=df.groupby('Date')['Confirmed'].sum().reset_index()\ndf_cured_india=df.groupby('Date')['Cured'].sum().reset_index()\ndf_death_india=df.groupby('Date')['Deaths'].sum().reset_index()","24894f91":"print(\"The Confirmed Cases are\",df_confirmed_india.Confirmed.max())\nprint(\"The Recovered Cases are\",df_cured_india.Cured.max())\nprint(\"The Deaths Cases are\",df_death_india.Deaths.max())","ab479f05":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df_confirmed_india['Date'], y = df_confirmed_india['Confirmed'], mode='lines+markers',name='Total Cases'))\nfig.update_layout(title_text='Trend of Coronavirus Cases in India (Cumulative cases)',plot_bgcolor='rgb(230, 230, 230)')\nfig.show()\n# New COVID-19 cases reported daily in India\nimport plotly.express as px\nfig = px.bar(df_confirmed_india, x=\"Date\", y=\"Confirmed\", barmode='group', height=400)\nfig.update_layout(title_text='Coronavirus Cases in India on daily basis',plot_bgcolor='gold')\nfig.show()","53001613":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df_death_india['Date'], y = df_death_india['Deaths'], mode='lines+markers',name='Total Deaths',line=dict(color='Red', width=2)))\nfig.update_layout(title_text='Trend of Death Cases in India',plot_bgcolor='rgb(230, 230, 230)')\nfig.show()\n# New COVID-19 cases reported daily in India\nimport plotly.express as px\nfig = px.bar(df_death_india, x=\"Date\", y=\"Deaths\", barmode='group', height=500)\nfig.update_layout(title_text='Coronavirus Deaths in India on daily basis',plot_bgcolor='lime')\nfig.show()","5b410485":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df_confirmed_india['Date'], y=df_confirmed_india['Confirmed'], mode='lines+markers', name='Confirmed',line=dict(color='blue', width=2)))\nfig.add_trace(go.Scatter(x=df_death_india['Date'], y=df_death_india['Deaths'], mode='lines+markers', name='Deaths', line=dict(color='Red', width=2)))\nfig.add_trace(go.Scatter(x=df_cured_india['Date'], y=df_cured_india['Cured'], mode='lines+markers', name='Recovered', line=dict(color='Green', width=2)))\nfig.update_layout(title='India COVID-19 Cases', xaxis_tickfont_size=14,yaxis=dict(title='Number of Cases'))\nfig.show()","343d0045":"import numpy as np\nstate_cases = df.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nstate_cases['Active'] = state_cases['Confirmed'] - (state_cases['Deaths']+ state_cases['Cured'])\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)\nstate_cases[\"Cure Rate (per 100)\"] = np.round(100*state_cases[\"Cured\"]\/state_cases[\"Confirmed\"],2)","15b05d21":"state_cases.head()","856bf94c":"state_cases['State\/UnionTerritory'].unique()","117cc8c8":"state_cases['State\/UnionTerritory'].nunique()","b405d043":"state_wise_cases=state_cases.sort_values('Confirmed', ascending= False).fillna(0).style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Cured\"])\\\n                        .background_gradient(cmap='Oranges',subset=[\"Active\"])\\\n                        .background_gradient(cmap='RdYlBu',subset=[\"Death Rate (per 100)\"])\\\n                        .background_gradient(cmap='Accent',subset=[\"Cure Rate (per 100)\"])","a4af3437":"state_wise_cases","fd80454e":"px.treemap(state_cases,path=[\"State\/UnionTerritory\"],values=\"Deaths\",title=\"Overall States Comparision of deaths\")","3de90de0":"df['Fatality-Ratio'] = df['Deaths']\/df['Confirmed']","02fa0f49":"df['Fatality-Ratio']","3f8f1721":"fatality_ratio=df.groupby('State\/UnionTerritory')['Fatality-Ratio'].sum().reset_index()\nfatality_ratio.iplot(kind='line',mode='lines+markers',x='State\/UnionTerritory',y='Fatality-Ratio',title='Fatality-Ratio Among States',color='blue')","6e0e6c33":"fatality_year=df.groupby('Date')['Fatality-Ratio'].sum().reset_index()\nfatality_year.iplot(kind='line',x='Date',y='Fatality-Ratio')","855091f2":"# Top 10 states with maximum number of COnfirmed Cases\ntop_10=state_cases.groupby('State\/UnionTerritory')['Confirmed'].sum().sort_values(ascending=False).reset_index()\ntrace = go.Table(\n    domain=dict(x=[0, 0.52],\n                y=[0, 1.0]),\n    header=dict(values=[\"State\/UnionTerritory\",\"Confirmed Cases\"],\n                fill = dict(color = '#119DFF'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[top_10['State\/UnionTerritory'].head(10),top_10['Confirmed'].head(10)],\n               fill = dict(color = ['#25FEFD', 'white']),\n               align = ['center'],height=20))\n\ntrace1 = go.Bar(x=top_10['State\/UnionTerritory'].head(10),\n                y=top_10['Confirmed'].head(10),\n                xaxis='x1',\n                yaxis='y1',\n                marker=dict(color='blue'),opacity=0.60)\nlayout = dict(\n    width=1000,\n    height=400,\n    autosize=False,\n    title='Top-10 States with Highest No. of Cases',\n    showlegend=False,   \n    xaxis1=dict(**dict(domain=[0.58, 1], anchor='y1', showticklabels=True)),\n    yaxis1=dict(**dict(domain=[0, 1.0], anchor='x1', hoverformat='.2f')),  \n)\nfig1 = dict(data=[trace, trace1], layout=layout)\niplot(fig1)","31d5de0d":"# Top 10 states with maximum number of Recovery\ntop_10=state_cases.groupby('State\/UnionTerritory')['Cured'].sum().sort_values(ascending=False).reset_index()\ntrace = go.Table(\n    domain=dict(x=[0, 0.52],\n                y=[0, 1.0]),\n    header=dict(values=[\"State\/UnionTerritory\",\"Cured Cases\"],\n                fill = dict(color = '#119DFF'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[top_10['State\/UnionTerritory'].head(10),top_10['Cured'].head(10)],\n               fill = dict(color = ['lime', 'white']),\n               align = ['center'],height=20))\n\ntrace1 = go.Bar(x=top_10['State\/UnionTerritory'].head(10),\n                y=top_10['Cured'].head(10),\n                xaxis='x1',\n                yaxis='y1',\n                marker=dict(color='lime'),opacity=0.60)\nlayout = dict(\n    width=1000,\n    height=400,\n    autosize=False,\n    title='Top-10 States with Highest Recovery',\n    showlegend=False,   \n    xaxis1=dict(**dict(domain=[0.58, 1], anchor='y1', showticklabels=True)),\n    yaxis1=dict(**dict(domain=[0, 1.0], anchor='x1', hoverformat='.2f')),  \n)\nfig1 = dict(data=[trace, trace1], layout=layout)\niplot(fig1)","b5d45972":"# Top 10 states with maximum number of Deaths\ntop_10=state_cases.groupby('State\/UnionTerritory')['Deaths'].sum().sort_values(ascending=False).reset_index()\ntrace = go.Table(\n    domain=dict(x=[0, 0.52],\n                y=[0, 1.0]),\n    header=dict(values=[\"State\/UnionTerritory\",\"Deaths Cases\"],\n                fill = dict(color = '#119DFF'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[top_10['State\/UnionTerritory'].head(10),top_10['Deaths'].head(10)],\n               fill = dict(color = ['salmon', 'white']),\n               align = ['center'],height=20))\n\ntrace1 = go.Bar(x=top_10['State\/UnionTerritory'].head(10),\n                y=top_10['Deaths'].head(10),\n                xaxis='x1',\n                yaxis='y1',\n                marker=dict(color='darkred'),opacity=0.60)\nlayout = dict(\n    width=1000,\n    height=400,\n    autosize=False,\n    title='Top-10 States with Highest No. of Cases',\n    showlegend=False,   \n    xaxis1=dict(**dict(domain=[0.58, 1], anchor='y1', showticklabels=True)),\n    yaxis1=dict(**dict(domain=[0, 1.0], anchor='x1', hoverformat='.2f')),  \n)\nfig1 = dict(data=[trace, trace1], layout=layout)\niplot(fig1)","ddc4da7d":"df_testing=pd.read_csv(r\"..\/input\/covid19-in-india\/StatewiseTestingDetails.csv\")","bde12ab3":"df_testing.head()","22484e4f":"# States with Total Sample collections\ndf_sample=df_testing.groupby('State')['TotalSamples'].sum().sort_values(ascending=False).reset_index()","0810d5c8":"df_sample.head()","5cc83806":"# Top 10 states with Total Sample Collections\npx.bar(df_sample.head(10),x='State',y='TotalSamples')","9b6133a9":"df_positive=df_testing.groupby('State')['Positive'].sum().sort_values(ascending=False).reset_index()","a1ec0246":"df_positive.head(10).iplot(kind='bar',x='State',y='Positive')","07de1d5e":"df_vaccine=pd.read_csv(r'..\/input\/covid19-in-india\/covid_vaccine_statewise.csv')","fb92cc7e":"df_vaccine.head()","9d490290":"df_vaccine.columns","1240a20b":"male = df_vaccine[\"Male(Individuals Vaccinated)\"].sum() \nfemale = df_vaccine[\"Female(Individuals Vaccinated)\"].sum()  \ntrans = df_vaccine[\"Transgender(Individuals Vaccinated)\"].sum()\npx.pie(names=[\"Male Vaccinated\",\"Female Vaccinated\",\"Trans Gender\"],values=[male,female,trans],title=\"Male and Female Vaccinated ratio for Covid19\")","e0151c36":"Covaxin = df_vaccine[\"Total Covaxin Administered\"].sum() \nCovishield = df_vaccine[\"Total CoviShield Administered\"].sum()  \npx.pie(names=[\"Covaxin Vaccinated\",\"Covishield Vaccinated\"],values=[Covaxin,Covishield],title=\"Covaxin and Covishield Vaccination\")","ecc1ae95":"df_vaccine.head()","95c86273":"df_vaccine.head()","b998adb4":"df_vaccine['State'].unique()","5dd23edd":"## Now let's Analyze the Confirmed,Recovered and Deaths on Each State","2c6bc3c9":"## Let's Do in One graph to see te day-Wise Confirmed, Deaths and Cured cases","9b36e8ca":"### Top 10 States with highest number of Deaths","3357dfd8":"# In the Next cell we'll see this in a better visualization \n# Which states are more affected by the virus?","d8e6d623":"### FATALITY RATIO IN AN YEAR","b94b99ea":"### Top 10 States in Highest Recovery","58be4868":"## Positive Cases\n## What is the number of positive cases rising in India?","5fc47549":"# Let's Now Analyze State-Wise Cases and Recovery","bfa0f733":"## Check The Confirmed, Recovered and Death Trolls in India ","409aa737":"## Let's See the Day-wise cases on India","a025eacc":"### Top 10 States With Highest Confirmed Cases","23401338":"# Let's Check the Fatality Ratio","fa30eaf8":"### FATALITY_RATIO AMONG STATES","6d1a6eca":"Here we can see that Maharastra is at the top of confirmed cases,","10557da7":"## Deaths Day-Wise ","25594064":"# Let's See WHats the race between Recovered and Deaths","8db4ec24":"> ## Confirmed Day wise Cases","21457a98":"### Here we have got that we have the data if around 40 States and Union Territories","7a347c3e":"## Testing Details"}}