{"cell_type":{"ff99a110":"code","434a2180":"code","73b71d53":"code","db58ef06":"code","d77fcd95":"code","bc890bb1":"code","2ebc85a4":"code","d2ce0db8":"code","50a40ace":"code","dfcfd83e":"code","3dea386a":"code","99629e8f":"code","7200de03":"code","a5323573":"markdown"},"source":{"ff99a110":"import itertools\nimport pandas as pd\nimport numpy as np\n\n!wget http:\/\/webhotel4.ruc.dk\/~keld\/research\/LKH-3\/LKH-3.0.7.tgz\n!tar xvfz LKH-3.0.7.tgz\n!cd LKH-3.0.7; make","434a2180":"bestnprint('The best solution is length',len(best))","73b71d53":"def is_perm(s):\n    y = True\n    for k in range(1,8):\n        y = y&(str(k) in s)\n        if not y: break\n    return y\n\npermutations = []\nfor k in range(len(best)-6):\n    s = best[k:k+7]\n    if (is_perm(s))&(s not in permutations)&(s[:2]!='54'):\n        permutations.append(s)\n        \nprint('There are',len(permutations),'that can be split among 3 strings')","db58ef06":"mandatory = ['54'+''.join(x) for x in itertools.permutations(['1','2','3','6','7'], 5)]\nprint('There are',len(mandatory),'that must be incluced in all 3 strings')","d77fcd95":"adjust1 = 18\nadjust2 = 12\n\ngroup1 = permutations[:1640-adjust1] + mandatory\ngroup2 = permutations[1640-adjust1:3280+adjust2] + mandatory\ngroup3 = permutations[3280+adjust2:] + mandatory\n\nlen(group1), len(group2), len(group3)","bc890bb1":"def hamming_distance(str1, str2):\n    return sum( (c1!=c2) for c1, c2 in zip(str1, str2))\n\ndef offset(s1, s2):\n    assert(len(s1)==len(s2))\n    ln = len(s1)\n    j = ln\n    for k in range(0,ln):\n        if hamming_distance(s1[k:],s2[:7-k])==0:\n            j=k\n            break\n    return j","2ebc85a4":"# network is the current network from all visited nodes\n# nodes has the list of nodes yet to be added to network\n# returns a new network, after adding a nearest node\ndef find_nn_nk(network, nodes, init_node=6):\n    distance_M = np.zeros((1, len(nodes)), dtype='int8')\n    if (network == \"\"):\n        nodes.remove(nodes[init_node])\n        return(nodes[init_node], nodes, 0, 0)\n    else:    \n        for j in range(len(nodes)):\n            if (network[-7:] != nodes[j]):               \n                distance_M[0,j] = offset(network[-7:], nodes[j])\n            else:\n                distance_M[0,j] = 8\n        #print(network, np.argmin(distance_M), nodes[np.argmin(distance_M)])\n        new_network = network + str(nodes[np.argmin(distance_M)], )[-np.min(distance_M):]\n        removed_node = nodes[np.argmin(distance_M)]\n        nodes.remove(nodes[np.argmin(distance_M)])\n        return(new_network, nodes, np.min(distance_M), removed_node)","d2ce0db8":"string1 = \"\"\nnew_nodes = group1.copy()\nhigh_cost_nodes = []\ni = 0\n\nwhile len(new_nodes) > 0:\n    string1,  new_nodes, distance, removed_node = find_nn_nk(string1, new_nodes)\n    if (i%100 == 0):\n        print(f\"Current cost {len(string1)}\")\n    i = i + 1\nprint(f\"Current cost {len(string1)}\")","50a40ace":"string2 = \"\"\nnew_nodes = group2.copy()\nhigh_cost_nodes = []\ni = 0\n\nwhile len(new_nodes) >= 1:\n    string2,  new_nodes, distance, removed_node = find_nn_nk(string2, new_nodes)\n    if (i%100 == 0):\n        print(f\"Current cost {len(string2)}\")\n    i = i + 1\nprint(f\"Current cost {len(string2)}\") ","dfcfd83e":"string3 = \"\"\nnew_nodes = group3.copy()\nhigh_cost_nodes = []\ni = 0\n\nwhile len(new_nodes) >= 1:\n    string3,  new_nodes, distance, removed_node = find_nn_nk(string3, new_nodes)\n    if (i%100 == 0):\n        print(f\"Current cost {len(string3)}\")\n    i = i + 1\nprint(f\"Current cost {len(string3)}\") ","3dea386a":"all_permutations = [''.join(x) for x in itertools.permutations(['1','2','3','4','5','6','7'], 7)]\n\nfor p in all_permutations:\n    if p not in string1 and p not in string2 and p not in string3:\n        print(p)","99629e8f":"string1 = string1 + '7123456'\nreplace_dict = {\n '5': '\ud83c\udf85',\n '4': '\ud83e\udd36',\n '8': '\ud83c\udf1f',\n '1': '\ud83e\udd8c',\n '2': '\ud83e\udddd',\n '3': '\ud83c\udf84',\n '6': '\ud83c\udf81',\n '7': '\ud83c\udf80'}\n\nfor k,v in replace_dict.items():\n    string1 = string1.replace(k, v)\n    string2 = string2.replace(k, v)\n    string3 = string3.replace(k, v)","7200de03":"# WRITE SUBMISSION CSV\nsub = pd.DataFrame()\nsub['schedule'] = [string1, string2, string3]\nsub.to_csv('submission.csv',index=False)\nsub.head()\n","a5323573":"References: https:\/\/www.kaggle.com\/cdeotte\/santa-2021-tsp-baseline-2500\nSanta 2021 TSP Baseline - [2500] by CHRIS DEOTTE\n"}}