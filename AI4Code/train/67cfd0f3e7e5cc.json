{"cell_type":{"05398fc3":"code","436c84eb":"code","5f1dd150":"code","3ae7c115":"code","2cd7fb59":"code","2f58cfe2":"code","56077f9a":"code","174ef0cb":"code","6a131894":"code","7ed5e298":"code","bbc59dc5":"code","e2f1a1a4":"code","c2d6983d":"code","14996ed0":"code","33a0a017":"code","827a6db8":"code","e1c84524":"code","c1aa8ae0":"code","4e22dc2d":"code","cb9a9d06":"code","6f4fc484":"code","a263c1f6":"code","35ce2124":"code","12eba0de":"code","3899910a":"code","207bf166":"code","deafd684":"code","4fa0c7a3":"code","32d4ee3d":"code","df9bc079":"code","eee79985":"code","8ba2fbec":"code","e42b1b83":"code","51bb2bde":"code","e01cd5aa":"code","cbc2f39b":"code","380ef10a":"code","68dff2e0":"code","1a7875a0":"code","38714a7f":"code","685f9fe1":"code","7c1216bb":"code","9065fc15":"code","3464fba9":"code","54f582ee":"code","0a7c2b76":"code","80eb97ff":"code","65b1e360":"code","51a70dc2":"code","12385f95":"code","8deb70dd":"code","62e746fe":"code","3c87b676":"code","18b80ab1":"code","25ad8ac6":"code","5f74023e":"code","9fe875ba":"markdown","519cea86":"markdown","4568a3b5":"markdown","3a98d2c6":"markdown","6c2461e3":"markdown","a1fe74b8":"markdown","f44a246e":"markdown","d89dfe5c":"markdown","29e37484":"markdown","496f3c0b":"markdown","a30a4e44":"markdown","9e184532":"markdown","56cc0eb5":"markdown","e1f930b8":"markdown","b2ea2139":"markdown","bed0b1cb":"markdown","2f337fa9":"markdown","e005e639":"markdown","ac424d0e":"markdown","f2b86327":"markdown","4a234277":"markdown","ae8a0674":"markdown","45a5f2da":"markdown","92e115aa":"markdown","5b12601e":"markdown","8005e1ab":"markdown","b04035d9":"markdown","6298d013":"markdown","c315e9c3":"markdown","37955c10":"markdown","050cb085":"markdown","5d2dae73":"markdown","95a0613c":"markdown","2405cbf6":"markdown","3c089a98":"markdown","25194536":"markdown","f651e977":"markdown","d1206f0b":"markdown","ae2c49d1":"markdown","a1c5f092":"markdown","fc7d2aab":"markdown","c93082f7":"markdown","53ea9d90":"markdown","4ecca763":"markdown","4a393318":"markdown"},"source":{"05398fc3":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n        print(dirname)","436c84eb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.graph_objects as go\nimport cv2\nfrom tqdm import tqdm_notebook as tqdm\n%matplotlib inline","5f1dd150":"train = pd.DataFrame(pd.read_csv(\"\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv\"))\ntest = pd.DataFrame(pd.read_csv(\"\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv\"))","3ae7c115":"train.shape, test.shape","2cd7fb59":"train.head()","2f58cfe2":"test.head()","56077f9a":"train.info()","174ef0cb":"test.info()","6a131894":"len(train[\"patient_id\"].unique()), len(test[\"patient_id\"].unique())","7ed5e298":"print(train[\"target\"].value_counts())","bbc59dc5":"malignant = len(train[train[\"target\"] == 1])\nbenign = len(train[train[\"target\"] == 0])\n\nlabels = [\"Malignant\", \"Benign\"] \nsize = [malignant, benign]\n\nplt.figure(figsize = (8, 8))\nplt.pie(size, labels = labels, shadow = True, startangle = 90, colors = [\"r\", \"g\"])\nplt.title(\"Malignant VS Benign Cases\")\nplt.legend()","e2f1a1a4":"train_males = len(train[train[\"sex\"] == \"male\"])\ntrain_females  = len(train[train[\"sex\"] == \"female\"])\n\ntest_males = len(test[test[\"sex\"] == \"male\"])\ntest_females  = len(test[test[\"sex\"] == \"female\"])\n\nlabels = [\"Males\", \"Female\"] \n\nsize = [train_males, train_females]\nexplode = [0.1, 0.0]\n\nplt.figure(figsize = (16, 16))\nplt.subplot(1,2,1)\nplt.pie(size, labels = labels, explode = explode, shadow = True, startangle = 90, colors = [\"b\", \"g\"])\nplt.title(\"Male VS Female Training Set Count\", fontsize = 18)\nplt.legend()\n\nprint(\"Number of males in training set = \", train_males)\nprint(\"Number of females in training set= \", train_females)\n\nsize = [test_males, test_females]\n\nplt.subplot(1,2,2)\nplt.pie(size, labels = labels, explode = explode, shadow = True, startangle = 90, colors = [\"b\", \"g\"])\nplt.title(\"Male VS Female Test Set Count\", fontsize = 18)\nplt.legend()\n\nprint(\"Number of males in testing set = \", test_males)\nprint(\"Number of females in testing set= \", test_females)","c2d6983d":"train_malignant  = train[train[\"target\"] == 1]\ntrain_malignant_males = len(train_malignant[train_malignant[\"sex\"] == \"male\"])\ntrain_malignant_females  = len(train_malignant[train_malignant[\"sex\"] == \"female\"])\n\nlabels = [\"Malignant Male Cases\", \"Malignant Female Cases\"] \nsize = [train_malignant_males, train_malignant_females]\nexplode = [0.1, 0.0]\n\nplt.figure(figsize = (10, 10))\nplt.pie(size, labels = labels, explode = explode, shadow = True, startangle = 90, colors = [\"r\", \"c\"])\nplt.title(\"Malignant Male VS Female Cases\", fontsize = 18)\nplt.legend()\nprint(\"Malignant Male Cases = \", train_malignant_males)\nprint(\"Malignant Female Cases = \", train_malignant_females)","14996ed0":"train_benign  = train[train[\"target\"] == 0]\n\ntrain_benign_males = len(train_benign[train_benign[\"sex\"] == \"male\"])\ntrain_benign_females  = len(train_benign[train_benign[\"sex\"] == \"female\"]) \n\nlabels = [\"Benign Male Cases\", \"Benign Female Cases\"] \nsize = [train_benign_males, train_benign_females]\nexplode = [0.1, 0.0]\n\nplt.figure(figsize = (10, 10))\nplt.pie(size, labels = labels, explode = explode, shadow = True, startangle = 90, colors = [\"g\", \"y\"])\nplt.title(\"Benign Male VS Benign Female Cases\", fontsize = 18)\nplt.legend()\nprint(\"Benign Male Cases = \", train_benign_males)\nprint(\"Benign Female Cases = \", train_benign_females)","33a0a017":"cancer_versus_sex = train.groupby([\"benign_malignant\", \"sex\"]).size()\nprint(cancer_versus_sex)\nprint(type(cancer_versus_sex))","827a6db8":"cancer_versus_sex = cancer_versus_sex.unstack(level = 1) \/ len(train) * 100\nprint(cancer_versus_sex)\nprint(type(cancer_versus_sex))","e1c84524":"sns.set(style='whitegrid')\nsns.set_context(\"paper\", rc={\"font.size\":12,\"axes.titlesize\":20,\"axes.labelsize\":18})   \n\nplt.figure(figsize = (10, 6))\nsns.heatmap(cancer_versus_sex, annot=True, cmap=\"icefire\", cbar=True)\nplt.title(\"Cancer VS Sex Heatmap Analysis Normalized\", fontsize = 18)\nplt.tight_layout()","c1aa8ae0":"sns.set(style='whitegrid')\nsns.set_context(\"paper\", rc={\"font.size\":12,\"axes.titlesize\":20,\"axes.labelsize\":18})   \n\nplt.figure(figsize = (10, 6))\nsns.boxplot(train[\"benign_malignant\"], train[\"age_approx\"], palette=\"icefire\")\nplt.title(\"Age VS Cancer Boxplot Analysis\")\nplt.tight_layout()","4e22dc2d":"print(\"################### Training set info ###################\")\nprint(train[\"anatom_site_general_challenge\"].unique())\nprint(train[\"anatom_site_general_challenge\"].value_counts())\n\nprint(\"\\n\\n\")\n\nprint(\"################### Test set info ###################\")\nprint(test[\"anatom_site_general_challenge\"].unique())\nprint(test[\"anatom_site_general_challenge\"].value_counts())","cb9a9d06":"# train\ntrain_torso = len(train[train[\"anatom_site_general_challenge\"] == \"torso\"])\ntrain_lower_extremity = len(train[train[\"anatom_site_general_challenge\"] == \"lower extremity\"])\ntrain_upper_extremity = len(train[train[\"anatom_site_general_challenge\"] == \"upper extremity\"])\ntrain_head_neck = len(train[train[\"anatom_site_general_challenge\"] == \"head\/neck\"])\ntrain_palms_soles = len(train[train[\"anatom_site_general_challenge\"] == \"palms\/soles\"])\ntrain_oral_genital = len(train[train[\"anatom_site_general_challenge\"] == \"oral\/genital\"])\n\n# test\ntest_torso = len(test[test[\"anatom_site_general_challenge\"] == \"torso\"])\ntest_lower_extremity = len(test[test[\"anatom_site_general_challenge\"] == \"lower extremity\"])\ntest_upper_extremity = len(test[test[\"anatom_site_general_challenge\"] == \"upper extremity\"])\ntest_head_neck = len(test[test[\"anatom_site_general_challenge\"] == \"head\/neck\"])\ntest_palms_soles = len(test[test[\"anatom_site_general_challenge\"] == \"palms\/soles\"])\ntest_oral_genital = len(test[test[\"anatom_site_general_challenge\"] == \"oral\/genital\"])\n\n################# DISPLAY #################\n\nlabels = [\"Torso\", \"Lower Extremity\", \"Upper Extremity\", \"Head\/Neck\", \"Palms\/Soles\", \"Oral\/Genital\"] \n\nplt.figure(figsize = (16, 16))\n\nplt.subplot(1,2,1)\nsize = [train_torso, train_lower_extremity, train_upper_extremity, train_head_neck, train_palms_soles, train_oral_genital]\nexplode = [0.05, 0.05, 0.05, 0.05, 0.05, 0.1]\nplt.pie(size, labels = labels, explode = explode, shadow = True, startangle = 90)\nplt.title(\"Anatomy Sites In Training Set\", fontsize = 18)\nplt.legend()\n\nplt.subplot(1,2,2)\nsize = [test_torso, test_lower_extremity, test_upper_extremity, test_head_neck, test_palms_soles, test_oral_genital]\nexplode = [0.05, 0.05, 0.05, 0.05, 0.05, 0.1]\nplt.pie(size, labels = labels, explode = explode, shadow = True, startangle = 90)\nplt.title(\"Anatomy Sites In Testing Set\", fontsize = 18)\nplt.legend()\n\n# Automatically adjust subplot parameters to give specified padding.\nplt.tight_layout()","6f4fc484":"train_ages_benign = train.loc[train[\"target\"] == 0, \"age_approx\"]\ntrain_ages_malignant = train.loc[train[\"target\"] == 1 , \"age_approx\"]\n\nplt.figure(figsize = (10, 8))\nsns.kdeplot(train_ages_benign, label = \"Benign\", shade = True, legend = True, cbar = True)\nsns.kdeplot(train_ages_malignant, label = \"Malignant\", shade = True, legend = True, cbar = True)\nplt.grid(True)\nplt.xlabel(\"Age Of The Patients\", fontsize = 18)\nplt.ylabel(\"Probability Density\", fontsize = 18)\nplt.grid(which = \"minor\", axis = \"both\")\nplt.title(\"Probabilistic Age Distribution In Training Set\", fontsize = 18)","a263c1f6":"train_image_stats_01 = pd.DataFrame(pd.read_csv(\"..\/input\/melanoma-image-insights\/melanoma_image_statistics_compiled_01\"))\ntrain_image_stats_02 = pd.DataFrame(pd.read_csv(\"..\/input\/melanoma-image-insights\/melanoma_image_statistics_compiled_02\"))\ntrain_image_stats_03 = pd.DataFrame(pd.read_csv(\"..\/input\/melanoma-image-insights\/melanoma_image_statistics_compiled_03\"))\ntrain_image_stats_04 = pd.DataFrame(pd.read_csv(\"..\/input\/melanoma-image-insights\/melanoma_image_statistics_compiled_04\"))\ntrain_image_stats_05 = pd.DataFrame(pd.read_csv(\"..\/input\/melanoma-image-insights\/melanoma_image_statistics_compiled_05\"))\ntrain_image_stats_06 = pd.DataFrame(pd.read_csv(\"..\/input\/melanoma-image-insights\/melanoma_image_statistics_compiled_06\"))\n\nprint(train_image_stats_01.shape)\nprint(train_image_stats_02.shape)\nprint(train_image_stats_03.shape)\nprint(train_image_stats_04.shape)\nprint(train_image_stats_05.shape)\nprint(train_image_stats_06.shape)","35ce2124":"train_image_statistics = pd.concat([train_image_stats_01, train_image_stats_02, train_image_stats_03,\n                                   train_image_stats_04, train_image_stats_05, train_image_stats_06],\n                                  ignore_index = True)\ntrain_image_statistics.shape","12eba0de":"train_image_statistics.info()","3899910a":"test_image_stats_01 = pd.DataFrame(pd.read_csv(\"..\/input\/melanoma-image-insights\/melanoma_image_statistics_compiled_test_01\"))\ntest_image_stats_02 = pd.DataFrame(pd.read_csv(\"..\/input\/melanoma-image-insights\/melanoma_image_statistics_compiled_test_02\"))\n\nprint(test_image_stats_01.shape)\nprint(test_image_stats_02.shape)","207bf166":"test_image_statistics = pd.concat([test_image_stats_01, test_image_stats_02], ignore_index = True)\n\ntest_image_statistics.shape","deafd684":"test_image_statistics.info()","4fa0c7a3":"train_image_statistics.head()","32d4ee3d":"test_image_statistics.head()","df9bc079":"image_names = train_image_statistics[\"image_name\"].values\nrandom_images = [np.random.choice(image_names) for i in range(4)] # Generates a random sample from a given 1-D array\nrandom_images ","eee79985":"train_dir = \"\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/\"","8ba2fbec":"plt.figure(figsize = (12, 8))\nfor i in range(4) : \n    plt.subplot(2, 2, i + 1) \n    image = cv2.imread(os.path.join(train_dir, random_images[i]))\n    # cv2 reads images in BGR format. Hence we convert it to RGB\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    plt.imshow(image, cmap = \"gray\")\n    plt.grid(True)\n# Automatically adjust subplot parameters to give specified padding.\nplt.tight_layout()","e42b1b83":"benign_mean_red_value = []\nbenign_mean_green_value = []\nbenign_mean_blue_value = []\n\nmalignant_mean_red_value = []\nmalignant_mean_green_value = []\nmalignant_mean_blue_value = []\n\nfor image_name in tqdm(train_image_statistics[\"image_name\"]) : \n    name = image_name[0:len(image_name)-4] # as .jpg are the appended at the end of the name\n    extracted_section = train[train[\"image_name\"] == name]\n    r = int(train_image_statistics[train_image_statistics[\"image_name\"] == image_name][\"mean_red_value\"])\n    g = int(train_image_statistics[train_image_statistics[\"image_name\"] == image_name][\"mean_green_value\"])\n    b = int(train_image_statistics[train_image_statistics[\"image_name\"] == image_name][\"mean_blue_value\"])\n    if int(extracted_section[\"target\"]) == 0 : # benign\n        benign_mean_red_value.append(r)\n        benign_mean_green_value.append(g)\n        benign_mean_blue_value.append(b)\n    else:\n        malignant_mean_red_value.append(r)\n        malignant_mean_green_value.append(g)\n        malignant_mean_blue_value.append(b)","51bb2bde":"#red channel plot\nrange_of_spread = max(benign_mean_red_value) - min(benign_mean_red_value)\n\nplt.figure(figsize = (12, 8))\nplt.rc(\"font\", weight = \"bold\")\nsns.set_style(\"whitegrid\")\nfig = sns.distplot(benign_mean_red_value, hist = True, kde = True, label = \"Mean Red Channel Intensities\", color = \"r\")\nfig.set(xlabel = \"Mean red channel intensities observed in each image\",\n        ylabel = \"Probability Density\")\nplt.title(\"Spread Of Red Channel In Benign Cases\", fontsize = 18)\nplt.legend()\nprint(\"The range of spread = {:.2f}\".format(range_of_spread))","e01cd5aa":"#green channel plot\nrange_of_spread = max(benign_mean_green_value) - min(benign_mean_green_value)\n\nplt.figure(figsize = (12, 8))\nplt.rc(\"font\", weight = \"bold\")\nsns.set_style(\"whitegrid\")\nfig = sns.distplot(benign_mean_green_value, hist = True, kde = True, label = \"Mean Green Channel Intensities\", color = \"g\")\nfig.set(xlabel = \"Mean green channel intensities observed in each image\",\n        ylabel = \"Probability Density\") \nplt.title(\"Spread Of Green Channel In Benign Cases\", fontsize = 18)\nplt.legend()\nprint(\"The range of spread = {:.2f}\".format(range_of_spread))","cbc2f39b":"#Blue channel plot\nrange_of_spread = max(benign_mean_blue_value) - min(benign_mean_blue_value)\n\nplt.figure(figsize = (12, 8))\nplt.rc(\"font\", weight = \"bold\")\nsns.set_style(\"whitegrid\")\nfig = sns.distplot(benign_mean_blue_value, hist = True, kde = True, label = \"Mean Blue Channel Intensities\", color = \"b\")\nfig.set(xlabel = \"Mean blue channel intensities observed in each image\",\n        ylabel = \"Probability Density\") \nplt.title(\"Spread Of Blue Channel In Benign Cases\", fontsize = 18)\nplt.legend()\nprint(\"The range of spread = {:.2f}\".format(range_of_spread))","380ef10a":"plt.figure(figsize = (12, 8))\nplt.rc(\"font\", weight = \"bold\")\nsns.set_style(\"whitegrid\")\nfig = sns.distplot(benign_mean_blue_value, hist = False, kde = True, label = \"Mean Blue Channel Intensities\", color = \"b\")\nfig = sns.distplot(benign_mean_red_value, hist = False, kde = True, label = \"Mean Red Channel Intensities\", color = \"r\")\nfig = sns.distplot(benign_mean_green_value, hist = False, kde = True, label = \"Mean Green Channel Intensities\", color = \"g\")\n\nfig.set(xlabel = \"Mean channel intensities observed in each image\",\n        ylabel = \"Probability Density\") \nplt.title(\"Spread Of Channels In Benign Cases\", fontsize = 18)\nplt.legend()","68dff2e0":"# free up the memory\ndel benign_mean_red_value\ndel benign_mean_green_value\ndel benign_mean_blue_value","1a7875a0":"import gc\ngc.collect()","38714a7f":"plt.figure(figsize = (12, 8))\nplt.rc(\"font\", weight = \"bold\")\nsns.set_style(\"whitegrid\")\nfig = sns.distplot(malignant_mean_blue_value, hist = False, kde = True, label = \"Mean Blue Channel Intensities\", color = \"b\")\nfig = sns.distplot(malignant_mean_red_value, hist = False, kde = True, label = \"Mean Red Channel Intensities\", color = \"r\")\nfig = sns.distplot(malignant_mean_green_value, hist = False, kde = True, label = \"Mean Green Channel Intensities\", color = \"g\")\n\nfig.set(xlabel = \"Mean channel intensities observed in each image\",\n        ylabel = \"Probability Density\") \nplt.title(\"Spread Of Channels In Malignant Cases\", fontsize = 18)\nplt.legend()","685f9fe1":"gc.collect() # free up the memory","7c1216bb":"train.head()","9065fc15":"# visualizing missing values in \"sex\" column\n\nmissing = len(train[train[\"sex\"].isna() == True])\navailable = len(train[train[\"sex\"].isna() == False])\n\nx = [\"Availabe data\", \"Unavailable data\"]\ny = [np.log(available), np.log(missing)] # plotting log data as the extreme values will supressed and lower ones will shoot, making it eay to visualize\n\nprint(\"Count of missing data = \", missing)\nprint(\"Count of available data = \", available)\n\nplt.figure(figsize = (12, 8))\nplt.subplot(1,1,1)\nplt.barh(x, y, color = \"m\")\nplt.grid(True)\nplt.title(\"Data On Patient's Sex\")","3464fba9":"train[\"sex\"].fillna(\"male\", inplace = True)","54f582ee":"missing =  len(train[train[\"age_approx\"].isna() == True]) \navailable = len(train[train[\"age_approx\"].isna() == False]) \n\nprint(\"Missing age values = \", missing)\nprint(\"Available age data = \", available)\n\nx = [\"Availabe data\", \"Unavailable data\"]\ny = [np.log(available), np.log(missing)] # plotting log data as the extreme values will supressed and lower ones will shoot, making it eay to visualize\n\nplt.figure(figsize = (12, 8))\nplt.subplot(1,1,1)\nplt.barh(x, y, color = \"y\")\nplt.grid(True)\nplt.title(\"Data On Patient's Age\")","0a7c2b76":"# train\nanatomy_sites = [\"torso\", \"upper extremity\", \"lower extremity\"]\n\n# first select the relevant part of the full dataframe satisfying either of the aforementioned three conditions.\nrelevant_dataframe_part = train[(train[\"sex\"] == \"male\") &\n                     (train[\"anatom_site_general_challenge\"].isin(anatomy_sites)) &\n                     (train[\"target\"] == 0)]\n\n# Now, we have the data frame. To calculate median, we need to specify the column along which we intend to calculate the median.\nmedian_value = relevant_dataframe_part[\"age_approx\"].median()\n\nprint(\"Median value = \", median_value)","80eb97ff":"train[\"age_approx\"].fillna(median_value, inplace = True)","65b1e360":"train[\"anatom_site_general_challenge\"].fillna(\"torso\", inplace = True)\ntest[\"anatom_site_general_challenge\"].fillna(\"torso\", inplace = True)","51a70dc2":"train.info()","12385f95":"test.info()","8deb70dd":"train.to_csv(\"updated_training_file\", index = False)\ntest.to_csv(\"updated_test_file\", index = False)","62e746fe":"plt.figure(figsize = (15, 8))\n\nplt.subplot(1,2,1)\nx = train_image_statistics[\"rows\"]\ny = train_image_statistics[\"columns\"]\nplt.scatter(x, y, cmap = \"magma\")\nplt.title(\"Shape Analysis Of Training Images\", fontsize = 18)\nplt.xlabel(\"Number Of Rows\", fontsize = 18)\nplt.ylabel(\"Number Of Columns\", fontsize = 18)\n\nplt.subplot(1,2,2)\nx = test_image_statistics[\"rows\"]\ny = test_image_statistics[\"columns\"]\nplt.scatter(x, y, cmap = \"magma\")\nplt.title(\"Shape Analysis Of Testing Images\", fontsize = 18)\nplt.xlabel(\"Number Of Rows\", fontsize = 18)\nplt.ylabel(\"Number Of Columns\", fontsize = 18)\n\n\nplt.tight_layout()","3c87b676":"plt.figure(figsize = (12, 8))\n\nx = train_image_statistics[\"rows\"]\ny = train_image_statistics[\"columns\"]\nplt.scatter(x, y, cmap = \"plasma\", label = \"Training Image\")\nplt.title(\"Shape Analysis\", fontsize = 18)\n\nx = test_image_statistics[\"rows\"]\ny = test_image_statistics[\"columns\"]\nplt.scatter(x, y, cmap = \"magma\", label = \"Testing Image\")\n\nplt.xlabel(\"Number Of Rows\", fontsize = 18)\nplt.ylabel(\"Number Of Columns\", fontsize = 18)\nplt.legend()","18b80ab1":"train_image_statistics.head()","25ad8ac6":"fig = go.Figure(data = [go.Scatter3d(x = train_image_statistics[\"image_mean\"],\n                                    y = train_image_statistics[\"image_standard_deviation\"], \n                                   z = train_image_statistics[\"image_skewness\"],\n                                    mode = \"markers\",\n                                    marker = dict(size = 4, color = train_image_statistics[\"rows\"],\n\n                                                  colorscale = \"jet\", opacity = 0.4))] , \n               \n                layout = go.Layout(margin=dict(l=0, r=0, b=0, t=0),\n                                   scene = dict(xaxis = dict(title='Image Mean'),\n                                                yaxis = dict(title='Image Standard Deviation'),\n                                                zaxis = dict(title='Image Skewness'),),))\nfig.show()","5f74023e":"fig = go.Figure(data = [go.Scatter3d(x = test_image_statistics[\"image_mean\"],\n                                    y = test_image_statistics[\"image_standard_deviation\"], \n                                   z = test_image_statistics[\"image_skewness\"],\n                                    mode = \"markers\",\n                                    marker = dict(size = 4, color = test_image_statistics[\"rows\"],\n\n                                                  colorscale = \"jet\", opacity = 0.4))] , \n               \n                layout = go.Layout(margin=dict(l=0, r=0, b=0, t=0),\n                                   scene = dict(xaxis = dict(title='Image Mean'),\n                                                yaxis = dict(title='Image Standard Deviation'),\n                                                zaxis = dict(title='Image Skewness'),),))\n\nfig.show()","9fe875ba":"Sex feature column","519cea86":"## Analysis of Cancer VS Sex","4568a3b5":"## Male VS Female Count","3a98d2c6":"## Malignant VS Benign cases - OVERALL","6c2461e3":"# Analysis of color distribution","a1fe74b8":"## Let The Image Analysis Begin!!","f44a246e":"It seems like majority of the cases are observed at the torso, and after that the extremities of the body (upper\/lower) in both the training and testing set. \n\n**However, the testing set has missing values as we previously explored.**","d89dfe5c":"# Melanoma Classification : Exploratory Data Analysis\n![image.png](attachment:image.png) \n\n## Notebook II of III\n\nThis notebook is the II one in my series of work in this competition. As always, shout out to amazing kernel authors present here at kaggle!! This notebook caters the area of Exploratory Data Analysis(EDA) used to derieve precious insights from the given dataset. \n\n## Previous works : \n* Dataset preparation(Notebook I) : \n**https:\/\/www.kaggle.com\/fireheart7\/melanoma-a-story-in-3-parts-part-one?scriptVersionId=38737538**\n\n## Next in Line : \n* Preprocessing cum Model Development(Notebook III) : Link will be pasted here by tomorrow!","29e37484":"Highly imbalanced dataset!!","496f3c0b":"Channel plotting","a30a4e44":"This is similar to the sex distribution part.\n\nWe know so far \n\n* Males are relatively dominant in count in the dataset\n* Torso, lower extremity and upper extremity corresponds to more than 70% of overall locations(initial EDA steps)\n* Number of malignant cases are far less than benign, and then also they male count dominates in both. \n\nTherefore, we fill the missing values with the median data at the union of the aforementioned cases. Let's see how...","9e184532":"Combining all the pieces in one dataframe.","56cc0eb5":"In the starting part of EDA, we saw that the male gender dominated the gender count slightly. So, we fill the missing values with the dominant gender in the dataset. ","e1f930b8":"## This notebook will be updated from here on!","b2ea2139":"## Benign male cases vs female cases","bed0b1cb":"## Inference : \n\n* Training set : Sex, age and anatomy_site have missing values.\n* Test set : Anatomy_site have missing values.\n\nWe will take care of these further down in the notebook.","2f337fa9":"## Do upvote folks if you find it useful! Keeps me motivated to learn and explore more!","e005e639":"Anatomy feature column\n\nWe simply replace the missing values(if any) with \"TORSO\" class, as it is the dominant one here.","ac424d0e":"Shape related information : ","f2b86327":"# Getting Insights Into Images : \n\nUsing the external dataset compiled in my previous notebook; we will explore various attributes related to our images in the training as well as test set.\n\n*The dataset can be accessed at : https:\/\/www.kaggle.com\/fireheart7\/melanoma-image-insights* ","4a234277":"So, now we have dealt with missing values!!! :-)","ae8a0674":"## Malignant male cases VS female cases","45a5f2da":"### Skewness in EDA : \n\nSkewness is the measure of symmetry or asymmetry of a data distribution.\nA distribution or data set is said to be symmetric if it looks same to the left and right point of the center. \n\n#### `Types of Skewness` : \n\nSkewness is generally classified into 2 broad categories-\n* Right skewness or Positive skewness\n* Left skewness or Negative skewness\n\n![image.png](attachment:image.png)","92e115aa":"## Gaining more insights from the images : \n\nLet's analyze the information presented by the *melanoma-image-insights* dataset.","5b12601e":"# Distribution Observation","8005e1ab":"## Reached the end! \n\nThank you for reading this far. That's it so far in EDA. Now, we dive into the most exciting part of the ML world, that is Model construction and pre-processing.\n\n**Link :**  Will be here by tomorrow!\n\n## In case you haven't explored the previous book where custom dataset creation is discussed : \n\n**Link** : **https:\/\/www.kaggle.com\/fireheart7\/melanoma-a-story-in-3-parts-part-one?scriptVersionId=38737538**","b04035d9":"Repeating for the test data : ","6298d013":"## Save these so that we can use these updated CSV files in the next notebook where we tackle preprocessing and model creation.","c315e9c3":"## Sample Images","37955c10":"Malignant Cases ","050cb085":"It's a tad difficult to analyze like this! Therefore we'll plot them in one.","5d2dae73":"Age feature column","95a0613c":"## Inference : \n\n* The malignant cases belong to relatively higher age group.\n* Age **might prove to be** a contributing factor in deciding whether the case is malignant or benign.\n* From sex analysis we can hypothesize that sex **might be** a deciding factor as well. ","2405cbf6":"# Dealing with missing values : \n\nFilling the areas of missing values in the dataframe.","3c089a98":"So, we observe that in both the cases the component of red spikes the most, whereas Blue and Green are close to each other. All the channels also appears to be a bit negatively skewed. \n\n`**Hence, the channel distribution won't be a powerful feature to differentiate between the malignant and benign cases.**`\n\nKutosis of this distribution is manageable. ","25194536":"We observe that most common dimension in training and testing set's intersection is 1800 X 1800 to 2500 X 2500. We will reshape the images accordingly later in the preprocessing segment.","f651e977":"### Kurtosis : \n\nKurtosis is the characteristics of being flat or peaked. It is a measure whether data is heavy- tailed or light-tailed in a normal distribution\n\nA large kurtosis value often mean that the tails of the distributions are getting toward more extreme values than the tails of normal distributions. This may lead to a length of 6 or 7 standard deviation from the mean. Similarly, If the kurtosis value is very low, then the tails of the distributions will be less lengthier than the those of a normal distribution (less than 3 standard deviation).\n\nA large value of kurtosis is often considered as more risky because data may tend to give an outlier value as outcome with greater distance from the mean if applied to any machine learning algorithm.\n\n### `Types of Kurtosis` :\n\n![image.png](attachment:image.png)\n\nIt is very difficult to interpret and analyse the data which is skewed. \n\n### `Some Transformations for highly skewed data` :\n\nWe can perform a number of transformations so that the data information remains preserved while at the same time some symmetric nature starts developing in its distribution. \n\n* Taking the square root of each data point and plotting it again.\n* Taking the cube root of each data point and plotting it again.\n* Taking the logarithm of each data point and plotting it again.\n* Taking the reciprocal of each data point and plotting it again.","d1206f0b":"Similarily, working for the test dataframe.","ae2c49d1":"We generate 4 random samples from the training data set. These 4 samples are taken from the aforementioned array of names.","a1c5f092":"Earlier we extracted paths of all directories. So, we will access these images from there.","fc7d2aab":"## Analysis of Age VS Cancer : ","c93082f7":"So, there are around 33k training images and about 10k testing images","53ea9d90":"## Inference : \n\nThis means that out of 33,126 registered entries in the training set, only 2,056 are unique implying that some patients are diagnosed with multiple marks. \n\nSame goes for the test set where we have only 690 unique values out of collection of 10,982.","4ecca763":"Let's analyze Image mean, standard deviation and skewness with one another. For this we will use plotly's express. Plotly Express is the easy-to-use, high-level interface to Plotly, which operates on a variety of types of data and produces easy-to-style figures.\n\nmpltoolkit can also be used if you are adamant using matplotlib.","4a393318":"# Exploratory Data Analysis\n\nWhen we\u2019re getting started with a machine learning (ML) project, one critical principle to keep in mind is that data is everything. It is often said that if ML is the rocket engine, then the fuel is the (high-quality) data fed to ML algorithms. However, deriving truth and insight from a pile of data can be a complicated and error-prone job. To have a solid start for our ML project, it always helps to analyze the data up front. \n\nDuring EDA, it\u2019s important that we get a deep understanding of: \n\n* The properties of the data, such as schema and statistical properties;\n* The quality of the data, like missing values and inconsistent data types;\n* The predictive power of the data, such as correlation of features against target."}}