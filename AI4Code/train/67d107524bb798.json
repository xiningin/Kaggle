{"cell_type":{"d43a43e3":"code","28d5a338":"code","6d48b9ec":"code","f2d6a6a5":"code","fae517de":"code","fbf9c0a1":"code","7b72c7d9":"code","b4a442b4":"code","6a1baa09":"code","560bb79f":"code","e416c96f":"code","e51f32f8":"code","ca64c970":"code","cac4df99":"code","3124f853":"code","616b82e4":"code","bae28c15":"code","f11dc967":"code","cae7cd2a":"code","c9a280e7":"code","28ce65f2":"code","e48d85e5":"code","d0e283d3":"code","176c162b":"code","fc75714a":"code","f99c2dab":"markdown"},"source":{"d43a43e3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats","28d5a338":"df = pd.read_csv(\"\/kaggle\/input\/disease-symptom-description-dataset\/dataset.csv\")\ndf","6d48b9ec":"df2 = pd.read_csv(\"\/kaggle\/input\/disease-symptom-description-dataset\/Symptom-severity.csv\")\ndf2","f2d6a6a5":"dict_ = df2.to_dict()\nappl = dict(zip(dict_[\"Symptom\"].values(), dict_[\"weight\"].values()))\ndf.fillna(0, inplace=True)","fae517de":"def fun(x):\n    try:\n        return appl.get(x.strip(), 0)\n    except:\n        return 0\ndf_conv = df.drop(columns=[\"Disease\"]).applymap(fun)","fbf9c0a1":"df_new = df_conv.join(df[\"Disease\"])","7b72c7d9":"df_new","b4a442b4":"np.unique(df[\"Disease\"])","6a1baa09":"from sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report","560bb79f":"from sklearn.preprocessing import LabelEncoder\ny = LabelEncoder().fit_transform(df[\"Disease\"])\ny","e416c96f":"X_train, X_test, y_train, y_test = train_test_split(df_new.drop(columns=[\"Disease\"]), y, test_size=0.33, random_state=42)","e51f32f8":"parameters = {'kernel':('linear', 'rbf'), 'C':[1, 10, 0.1, 0.01]}\nsvc = SVC(gamma=\"scale\")\nclf = GridSearchCV(svc, parameters, cv=5)\nclf.fit(X_train, y_train)\nclf.score(X_test, y_test)","ca64c970":"print(clf.best_params_)","cac4df99":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, clf.predict(X_test)))","3124f853":"y_ = LabelEncoder().fit(df_new[\"Disease\"])\ny_.inverse_transform(clf.predict(X_test))","616b82e4":"y","bae28c15":"df_new_new = df_new.copy()\ndf_new_new[\"sum\"] = df_new.drop(columns=[\"Disease\"]).agg(np.sum, axis=1)","f11dc967":"bins = {\"sum\": 10}\nfor j in bins.keys():\n    df_new_new[j+\"_bin\"] = pd.cut(df_new_new[j], bins[j], labels=False)","cae7cd2a":"X_train, X_test, y_train, y_test = train_test_split(df_new_new.drop(columns=[\"Disease\"]), y, test_size=0.33, random_state=42)","c9a280e7":"parameters = {'kernel':('linear', 'rbf'), 'C':[1, 10, 0.1, 0.01]}\nsvc = SVC(gamma=\"scale\")\nclf = GridSearchCV(svc, parameters, cv=5)\nclf.fit(X_train, y_train)\nclf.score(X_test, y_test)","28ce65f2":"print(classification_report(y_test, clf.predict(X_test)))","e48d85e5":"from xgboost import XGBClassifier\nclf = XGBClassifier(use_label_encoder=False, objective=\"b\", eval_metric=\"logloss\")\npar = {'objective':[\"binary:logistic\", \"rank:pairwise\", \"reg:gamma\", \"reg:squarederror\"]}\nclf = GridSearchCV(clf, par, cv=5)","d0e283d3":"clf.fit(X_train, y_train)\nclf.score(X_test, y_test)","176c162b":"clf.best_params_","fc75714a":"print(classification_report(y_test, clf.predict(X_test)))","f99c2dab":"# Can I Improve the accuracy?"}}