{"cell_type":{"1e4e7dc0":"code","80cfb3ec":"code","16a05b51":"code","df38664b":"code","9003c8d1":"code","0c4b4f57":"code","6a4a5e00":"code","dfb8839e":"code","e41cae0b":"code","cf23af6d":"code","a0a9b13e":"code","c8ea5415":"code","d916bcec":"code","70b2a887":"code","f136b602":"code","98d5d6e9":"code","3d80ee7b":"code","afd75aa3":"code","05532455":"code","49aaccb6":"code","422176eb":"code","55e476ad":"code","1da6fdba":"code","42e64f7d":"code","24433221":"code","dc211244":"code","9027bbd0":"code","f299bf37":"code","dd05f25b":"code","543b061e":"code","6c9671f5":"code","8725430d":"code","18c6dca8":"code","b68ced77":"code","2a13f236":"code","1a1c2ae3":"code","6028ee1c":"code","5513bc33":"code","f0a13d00":"code","3194c270":"code","4e41b8fe":"code","48368007":"code","b61b4462":"code","9171d063":"code","9cdf0c4b":"code","b36e868d":"code","848b2ece":"code","c61f35aa":"code","294826c3":"code","3c00d6e7":"code","c83e4cf2":"markdown","cda631cb":"markdown","40229ca0":"markdown","8c5f8ff4":"markdown","7faa6602":"markdown","4dd2686e":"markdown","59af9904":"markdown","81694123":"markdown","2e9d175e":"markdown","b3fecbae":"markdown","5235eade":"markdown","a2e0f94c":"markdown","86c211a9":"markdown","0b799d04":"markdown","a255a3f7":"markdown","067d5f90":"markdown","27647008":"markdown","a5b0770c":"markdown","2dd72441":"markdown","4c57cb75":"markdown","fa1520fa":"markdown","63148ba1":"markdown","ab6d4be7":"markdown","117b3b5b":"markdown","b8fd260a":"markdown","a2f2e9eb":"markdown","b349e772":"markdown","342c8102":"markdown","b1f36a95":"markdown"},"source":{"1e4e7dc0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport cv2\nfrom PIL import Image\nimport gc\n\nimport torch\nfrom torch import nn\nfrom torch import optim\nimport torch.nn.functional as F\nfrom torchvision import datasets, transforms, models\nfrom torch.utils.data import Dataset\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\n\n!pip install torchtoolbox\nimport torchtoolbox.transform as transforms\nfrom torch.utils.data import Dataset, DataLoader, Subset\n\n\nimport time\nimport datetime\nimport random\n\nfrom sklearn.model_selection import StratifiedKFold, GroupKFold, train_test_split\nfrom sklearn.metrics import accuracy_score, roc_auc_score, confusion_matrix\n\n!pip install efficientnet_pytorch\nfrom efficientnet_pytorch import EfficientNet\n\nimport os \n\nimport warnings\nwarnings.simplefilter('ignore')","80cfb3ec":"# Creating seeds to make results reproducible\ndef seed_everything(seed_value):\n    np.random.seed(seed_value)\n    torch.manual_seed(seed_value)\n    os.environ['PYTHONHASHSEED'] = str(seed_value)\n    \n    if torch.cuda.is_available(): \n        torch.cuda.manual_seed(seed_value)\n        torch.cuda.manual_seed_all(seed_value)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = True\n\nseed = 1234\nseed_everything(seed)","16a05b51":"# Setting up GPU for processing or CPU if GPU isn't available\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint (device)","df38664b":"class CustomDataset(Dataset):\n  def __init__(self, df: pd.DataFrame, img_dir, train: bool = True, transforms= None):\n    self.df = df\n    self.img_dir = img_dir\n    self.transforms = transforms\n    self.train = train\n\n  def __getitem__(self, index):\n    img_path = os.path.join(self.img_dir, self.df.iloc[index]['image_name'] + '.jpg')\n    #images = Image.open(img_path)\n    images = cv2.imread(img_path)\n\n    if self.transforms:\n        images = self.transforms(images)\n\n    if self.train:\n        labels = self.df.iloc[index]['target']\n        #return images, labels\n        return torch.tensor(images, dtype=torch.float32), torch.tensor(labels, dtype=torch.float32)\n    \n    else:\n        #return (images)\n        return torch.tensor(images, dtype=torch.float32)\n    \n  def __len__(self):\n        return len(self.df)","9003c8d1":"df = pd.read_csv('\/kaggle\/input\/melanoma-external-malignant-256\/train_concat.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')\ntest_img_dir = '\/kaggle\/input\/melanoma-external-malignant-256\/test\/test\/'\ntrain_img_dir = '\/kaggle\/input\/melanoma-external-malignant-256\/train\/train\/'","0c4b4f57":"vld_size=0.20\n\ntrain, valid = train_test_split (df, stratify=df.target, test_size = vld_size, random_state=42) \n\ntrain_df=pd.DataFrame(train)\nvalidation_df=pd.DataFrame(valid)\n\nprint(len(validation_df))\nprint(len(train_df))","6a4a5e00":"fig2 = plt.figure(figsize=(20, 5))\nax3 = fig2.add_subplot(1,2,1)\nax4 = fig2.add_subplot(1,2,2)\n\ncounts1 = train_df['target'].value_counts()\ndx = ['Benign', 'Malignant']\nax3.bar(dx, counts1)  \nax3.set_title(\"Training Set\")\nax3.legend()\n\nfor i, v in enumerate(counts1):\n    ax3.text(i-.1, \n              v\/counts1[i]+200, \n              counts1[i], \n              fontsize=15,\n              )\n\n\ncounts2 = validation_df['target'].value_counts()\nax4.bar(dx, counts2)  \nax4.set_title(\"Validation Set\")\nax4.legend()\n\nfor i, v in enumerate(counts2):\n    ax4.text(i-.1, \n              v\/counts2[i]+100, \n              counts2[i], \n              fontsize=15)\n \n\nplt.show()  ","dfb8839e":"class AdvancedHairAugmentation:\n    \"\"\"\n    Impose an image of a hair to the target image\n\n    Args:\n        hairs (int): maximum number of hairs to impose\n        hairs_folder (str): path to the folder with hairs images\n    \"\"\"\n\n    def __init__(self, hairs: int = 5, hairs_folder: str = \"..\/input\/melanoma-hairs\"):\n        self.hairs = hairs\n        self.hairs_folder = hairs_folder\n\n    def __call__(self, img):\n        \"\"\"\n        Args:\n            img (PIL Image): Image to draw hairs on.\n\n        Returns:\n            PIL Image: Image with drawn hairs.\n        \"\"\"\n        n_hairs = random.randint(0, self.hairs)\n        \n        if not n_hairs:\n            return img\n        \n        height, width, _ = img.shape  # target image width and height\n        hair_images = [im for im in os.listdir(self.hairs_folder) if 'png' in im]\n        \n        for _ in range(n_hairs):\n            hair = cv2.imread(os.path.join(self.hairs_folder, random.choice(hair_images)))\n            hair = cv2.flip(hair, random.choice([-1, 0, 1]))\n            hair = cv2.rotate(hair, random.choice([0, 1, 2]))\n\n            h_height, h_width, _ = hair.shape  # hair image width and height\n            roi_ho = random.randint(0, img.shape[0] - hair.shape[0])\n            roi_wo = random.randint(0, img.shape[1] - hair.shape[1])\n            roi = img[roi_ho:roi_ho + h_height, roi_wo:roi_wo + h_width]\n\n            # Creating a mask and inverse mask\n            img2gray = cv2.cvtColor(hair, cv2.COLOR_BGR2GRAY)\n            ret, mask = cv2.threshold(img2gray, 10, 255, cv2.THRESH_BINARY)\n            mask_inv = cv2.bitwise_not(mask)\n\n            # Now black-out the area of hair in ROI\n            img_bg = cv2.bitwise_and(roi, roi, mask=mask_inv)\n\n            # Take only region of hair from hair image.\n            hair_fg = cv2.bitwise_and(hair, hair, mask=mask)\n\n            # Put hair in ROI and modify the target image\n            dst = cv2.add(img_bg, hair_fg)\n\n            img[roi_ho:roi_ho + h_height, roi_wo:roi_wo + h_width] = dst\n                \n        return img\n\n    def __repr__(self):\n        return f'{self.__class__.__name__}(hairs={self.hairs}, hairs_folder=\"{self.hairs_folder}\")'\n\nclass DrawHair:\n    \"\"\"\n    Draw a random number of pseudo hairs\n\n    Args:\n        hairs (int): maximum number of hairs to draw\n        width (tuple): possible width of the hair in pixels\n    \"\"\"\n\n    def __init__(self, hairs:int = 4, width:tuple = (1, 2)):\n        self.hairs = hairs\n        self.width = width\n\n    def __call__(self, img):\n        \"\"\"\n        Args:\n            img (PIL Image): Image to draw hairs on.\n\n        Returns:\n            PIL Image: Image with drawn hairs.\n        \"\"\"\n        if not self.hairs:\n            return img\n        \n        width, height, _ = img.shape\n        \n        for _ in range(random.randint(0, self.hairs)):\n            # The origin point of the line will always be at the top half of the image\n            origin = (random.randint(0, width), random.randint(0, height \/\/ 2))\n            # The end of the line \n            end = (random.randint(0, width), random.randint(0, height))\n            color = (0, 0, 0)  # color of the hair. Black.\n            cv2.line(img, origin, end, color, random.randint(self.width[0], self.width[1]))\n        \n        return img\n\n    def __repr__(self):\n        return f'{self.__class__.__name__}(hairs={self.hairs}, width={self.width})'\n","e41cae0b":"class Microscope:\n    \"\"\"\n    Cutting out the edges around the center circle of the image\n    Imitating a picture, taken through the microscope\n\n    Args:\n        p (float): probability of applying an augmentation\n    \"\"\"\n\n    def __init__(self, p: float = 0.5):\n        self.p = p\n\n    def __call__(self, img):\n        \"\"\"\n        Args:\n            img (PIL Image): Image to apply transformation to.\n\n        Returns:\n            PIL Image: Image with transformation.\n        \"\"\"\n        if random.random() < self.p:\n            circle = cv2.circle((np.ones(img.shape) * 255).astype(np.uint8), # image placeholder\n                        (img.shape[0]\/\/2, img.shape[1]\/\/2), # center point of circle\n                        random.randint(img.shape[0]\/\/2 - 3, img.shape[0]\/\/2 + 15), # radius\n                        (0, 0, 0), # color\n                        -1)\n\n            mask = circle - 255\n            img = np.multiply(img, mask)\n        \n        return img\n\n    def __repr__(self):\n        return f'{self.__class__.__name__}(p={self.p})'\n\n","cf23af6d":"# Defining transforms for the training, validation, and testing sets\ntraining_transforms = transforms.Compose([Microscope(),\n                                          AdvancedHairAugmentation(),\n                                          transforms.RandomRotation(30),\n                                          transforms.RandomResizedCrop(256, scale=(0.8, 1.0)),\n                                          transforms.RandomHorizontalFlip(),\n                                          transforms.RandomVerticalFlip(),\n                                          transforms.ColorJitter(brightness=32. \/ 255.,saturation=0.5,hue=0.01),\n                                          transforms.ToTensor(),\n                                          transforms.Normalize([0.485, 0.456, 0.406], \n                                                               [0.229, 0.224, 0.225])])\n\nvalidation_transforms = transforms.Compose([transforms.Resize(256),\n                                            transforms.CenterCrop(256),\n                                            transforms.ToTensor(),\n                                            transforms.Normalize([0.485, 0.456, 0.406], \n                                                                 [0.229, 0.224, 0.225])])\n\ntesting_transforms = transforms.Compose([transforms.Resize(256),\n                                         transforms.CenterCrop(256),\n                                         transforms.ToTensor(),\n                                         transforms.Normalize([0.485, 0.456, 0.406], \n                                                              [0.229, 0.224, 0.225])])","a0a9b13e":"# Loading the datasets with the transforms previously defined\ntraining_dataset = CustomDataset(df = train_df,\n                                 img_dir = train_img_dir, \n                                 train = True,\n                                 transforms = training_transforms )\n\nvalidation_dataset = CustomDataset(df = validation_df,\n                                   img_dir = train_img_dir, \n                                   train = True,\n                                   transforms = training_transforms )\n\ntesting_dataset = CustomDataset(df = test_df,\n                                img_dir = test_img_dir,\n                                train= False, \n                                transforms = testing_transforms )","c8ea5415":"# Using the image datasets with the transforms, defining the dataloaders\ntrain_loader = torch.utils.data.DataLoader(training_dataset, batch_size=32, num_workers=4, shuffle=True)\nvalidate_loader = torch.utils.data.DataLoader(validation_dataset, batch_size=16, shuffle = False)\ntest_loader = torch.utils.data.DataLoader(testing_dataset, batch_size=16, shuffle = False)","d916bcec":"del training_dataset, validation_dataset, train_loader, validate_loader\ngc.collect()","70b2a887":"class Net(nn.Module):\n    def __init__(self, arch):\n        super(Net, self).__init__()\n        self.arch = arch\n        if 'fgdf' in str(arch.__class__):\n            self.arch.fc = nn.Linear(in_features=1280, out_features=500, bias=True)\n        if 'EfficientNet' in str(arch.__class__):   \n            self.arch._fc = nn.Linear(in_features=1408, out_features=500, bias=True)\n            #self.dropout1 = nn.Dropout(0.2)\n            \n        self.ouput = nn.Linear(500, 1)\n        \n    def forward(self, images):\n        \"\"\"\n        No sigmoid in forward because we are going to use BCEWithLogitsLoss\n        Which applies sigmoid for us when calculating a loss\n        \"\"\"\n        x = images\n        features = self.arch(x)\n        output = self.ouput(features)\n        \n        return output","f136b602":"arch = EfficientNet.from_pretrained('efficientnet-b2')\nmodel = Net(arch=arch)  \nmodel = model.to(device)\n","98d5d6e9":"# If we need to freeze the pretrained model parameters to avoid backpropogating through them, turn to \"False\"\nfor parameter in model.parameters():\n    parameter.requires_grad = True","3d80ee7b":"#Total Parameters (If the model is unfrozen the trainning params will be the same as the Total params)\ntotal_params = sum(p.numel() for p in model.parameters())\nprint(f'{total_params:,} total parameters.')\ntotal_trainable_params = sum(\n    p.numel() for p in model.parameters() if p.requires_grad)\nprint(f'{total_trainable_params:,} training parameters.')","afd75aa3":"# Number of Epochs\nepochs = 2\n\n# Early stopping if no change in accurancy\nes_patience = 3\n\n# Loss Function:\ncriterion = nn.BCEWithLogitsLoss()\n\n# Optimizer (gradient descent):\noptimizer = optim.Adam(model.parameters(), lr=0.0005) \n\n# Scheduler\nscheduler = ReduceLROnPlateau(optimizer=optimizer, mode='max', patience=1, verbose=True, factor=0.2)\n\n\n\n\n\n","05532455":"#from workspace_utils import active_session -> this can be used so that the session remains on and not disconnect\nDISPLAY_PLOT=True \nskf = StratifiedKFold(n_splits=5)\nfor fold, (train_idx, val_idx) in enumerate(skf.split(df['image_name'].to_numpy(), df['target'].to_numpy())): \n    print('=' * 20, 'Fold', fold, '=' * 20)\n\n    #Empty variables to be stored with Time Stamps\n    loss_history=[]  \n    train_acc_history=[]  \n    val_loss_history=[]  \n    val_acc_history=[] \n    val_auc_history=[]\n    \n    # Empty variable to be stored with best validation accuracy\n    best_val = 0\n\n    # Path and filename to save model to\n    model_path = f'melanoma_model_{fold}.pth'\n    patience = es_patience\n    Total_start_time = time.time()  \n    model.to(device)\n    \n    # Defining train and val df for each fold \n    train_df = df.iloc[train_idx].reset_index(drop=True)\n    validation_df = df.iloc[val_idx].reset_index(drop=True)\n    \n    \n    # Loading the datasets with the transforms previously defined within each fold\n    training_dataset = CustomDataset(df = train_df,\n                                     img_dir = train_img_dir, \n                                     train = True,\n                                     transforms = training_transforms )\n\n    validation_dataset = CustomDataset(df = validation_df,\n                                       img_dir = train_img_dir, \n                                       train = True,\n                                       transforms = training_transforms )\n    \n    # Creating the Dataloaders within each fold\n    train_loader = torch.utils.data.DataLoader(training_dataset, batch_size=32, num_workers=4, shuffle=True)\n    validate_loader = torch.utils.data.DataLoader(validation_dataset, batch_size=16, num_workers=2, shuffle = False)\n\n    #Starting the Training loop\n    for e in range(epochs):\n\n        start_time = time.time()\n        correct = 0\n        running_loss = 0\n        model.train()\n\n        for images, labels in train_loader:\n\n\n            images, labels = images.to(device), labels.to(device)\n\n\n            optimizer.zero_grad()\n\n            output = model(images) \n            loss = criterion(output, labels.view(-1,1))  \n            loss.backward()\n            optimizer.step()\n\n            # Training loss\n            running_loss += loss.item()\n\n            # Number of correct training predictions and training accuracy\n            train_preds = torch.round(torch.sigmoid(output))\n\n            correct += (train_preds.cpu() == labels.cpu().unsqueeze(1)).sum().item()\n\n        train_acc = correct \/ len(train_df)\n\n\n        #switching to validation:        \n        model.eval()\n        #preds=[]\n        val_preds = torch.zeros((len(validation_df),1), dtype=torch.float32, device=device)\n        # Turning off gradients for validation, saves memory and computations\n        with torch.no_grad():\n\n            val_loss = 0\n            val_correct = 0\n\n            for j, (val_images, val_labels) in enumerate(validate_loader):\n                \n                val_images, val_labels = val_images.to(device), val_labels.to(device)\n                \n                val_output = model(val_images)\n                val_loss += (criterion(val_output, val_labels.view(-1,1))).item() \n                val_pred = torch.sigmoid(val_output)\n\n                #preds.append(val_pred.cpu())\n            #pred=np.vstack(preds).ravel()\n\n                val_preds[j*validate_loader.batch_size:j*validate_loader.batch_size + val_labels.shape[0]] = val_pred\n            \n            #val_accuracy = accuracy_score(validation_df['target'].values, torch.round(val_preds.cpu()))\n            val_auc_score = roc_auc_score(validation_df['target'].values, val_preds.cpu())\n            #val_auc_score = roc_auc_score(validation_df['target'].values, pred)\n\n            training_time = str(datetime.timedelta(seconds=time.time() - start_time))[:7]\n\n            print(\"Epoch: {}\/{}.. \".format(e+1, epochs),\n                  \"Training Loss: {:.3f}.. \".format(running_loss\/len(train_loader)),\n                  \"Training Accuracy: {:.3f}..\".format(train_acc),\n                  \"Validation Loss: {:.3f}.. \".format(val_loss\/len(validate_loader)),\n                  #\"Validation Accuracy: {:.3f}\".format(val_accuracy),\n                  \"Validation AUC Score: {:.3f}\".format(val_auc_score),\n                  \"Training Time: {}\".format( training_time))\n\n\n            scheduler.step(val_auc_score)\n\n            if val_auc_score >= best_val:\n                best_val = val_auc_score\n                patience = es_patience  # Resetting patience since we have new best validation accuracy\n                torch.save(model, model_path)  # Saving current best model\n            else:\n                patience -= 1\n                if patience == 0:\n                    print('Early stopping. Best Val roc_auc: {:.3f}'.format(best_val))\n                    \n                    break\n                       \n                    \n        loss_history.append(running_loss)  \n        train_acc_history.append(train_acc)    \n        val_loss_history.append(val_loss)  \n        #val_acc_history.append(val_accuracy)\n        val_auc_history.append(val_auc_score)\n    \n    if DISPLAY_PLOT:\n        plt.figure(figsize=(15,5))\n        plt.plot(train_acc_history,label='Training accuracy', marker='o',color='#ff7f0e')\n        plt.plot(val_auc_history,label='Validation AUC Score',marker='o',color='#1f77b4')\n        x = np.argmax(val_auc_history); y = np.max(val_auc_history)\n        xdist = plt.xlim()[1] - plt.xlim()[0]; ydist = plt.ylim()[1] - plt.ylim()[0]\n        plt.scatter(x,y,s=200,color='#1f77b4'); plt.text(x-0.03*xdist,y-0.13*ydist,'max auc\\n%.2f'%y,size=14)\n        plt.ylabel('AUC',size=14); plt.xlabel('Epoch',size=14)\n        plt.legend(loc=2)\n        plt2 = plt.gca().twinx()\n        plt2.plot(loss_history, label= 'Training Loss',marker='o',color='#2ca02c')\n        plt2.plot(val_loss_history,label='Validation Loss',marker='o',color='#d62728')\n        x = np.argmin(val_loss_history); y = np.min(val_loss_history)\n        ydist = plt.ylim()[1] - plt.ylim()[0]\n        plt.scatter(x,y,s=200,color='#d62728'); plt.text(x-0.03*xdist,y+0.05*ydist,'min loss',size=14)\n        plt.ylabel('Loss',size=14)\n        plt.title('FOLD %i '%\n                (fold+1),size=18)\n        plt.legend(loc=3)\n        plt.show()  \n    \n    \n    \n    \ntotal_training_time = str(datetime.timedelta(seconds=time.time() - Total_start_time  ))[:7]                  \nprint(\"Total Training Time: {}\".format(total_training_time))\n                  \n              ","49aaccb6":"print((np.arange(epochs).shape))\nprint((np.array(train_acc_history).shape))","422176eb":"fig = plt.figure(figsize=(20, 5))\nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\n\nax1.plot(loss_history, label= 'Training Loss')  \nax1.plot(val_loss_history,label='Validation Loss')\nax1.set_title(\"Losses\")\nax1.set_xlabel('Epochs')\nax1.set_ylabel('Loss')\nax1.legend()\n\nax2.plot(train_acc_history,label='Training accuracy')  \n#ax2.plot(val_acc_history,label='Validation accuracy')\nax2.plot(val_auc_history,label='Validation AUC Score')\nax2.set_title(\"Accuracies\")\nax2.set_xlabel('Epochs')\nax2.set_ylabel('Accuracy')\nax2.legend()\n\nplt.show()  ","55e476ad":"TTA = 3\nmodel = torch.load(model_path)\nmodel.eval()\nmodel.to(device)\nwith torch.no_grad():\n        \n    # Predicting on test set\n    tta_preds = torch.zeros((len(test), 1), dtype=torch.float32, device=device)\n    for _ in range(TTA):\n        for i, x_test in enumerate(test_loader):\n            x_test = torch.tensor(x_test, device=device, dtype=torch.float32)\n            z_test = model(x_test)\n            z_test = torch.sigmoid(z_test)\n            tta_preds[i*test_loader.batch_size:i*test_loader.batch_size + x_test.shape[0]] += z_test\n    preds += tta_preds \/ TTA\n    \npreds \/= skf.n_splits","1da6fdba":"del training_dataset, validation_dataset, train_loader, validate_loader, val_images, val_labels\ngc.collect()\n","42e64f7d":"test_df['target']= np.zeros((len(test_df), 1))\n","24433221":"test_labels = torch.tensor(test_df['target'], dtype=torch.float32)","dc211244":"\nmodel = torch.load(model_path)\nmodel.eval()\nmodel.to(device)\ntest_preds=[]\nwith torch.no_grad():\n    \n    \n    \n    for f, (test_images) in enumerate(test_loader):\n        \n        \n        test_images, test_labels = test_images.to(device), test_labels.to(device)\n        \n        \n        test_output = model(test_images)\n        test_pred = torch.sigmoid(test_output)\n            \n        test_preds.append(test_pred.cpu())\n        \n    test_pred=np.vstack(test_preds).ravel()\n    test_pred2 = torch.tensor(test_pred)\n    test_accuracy = accuracy_score(test_labels.cpu(), torch.round(test_pred2))\n      \n        \n    \nprint(\"Test Accuracy: {}\".format(test_accuracy))    \n        ","9027bbd0":"sub = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv')\nsub.loc[:, \"target\"] = test_pred\nsub.to_csv('submission.csv', index=False)","f299bf37":"#from PIL import Image\n\ndef process_image(image_path):\n    ''' Scales, crops, and normalizes a PIL image for a PyTorch model,\n        returns an Numpy array\n    '''\n    \n    # Process a PIL image for use in a PyTorch model\n    \n    pil_image = Image.open(image_path)\n    \n    # Resize\n    if pil_image.size[0] > pil_image.size[1]:\n        pil_image.thumbnail((5000, 256))\n    else:\n        pil_image.thumbnail((256, 5000))\n        \n    # Crop \n    left_margin = (pil_image.width-256)\/2\n    bottom_margin = (pil_image.height-256)\/2\n    right_margin = left_margin + 256\n    top_margin = bottom_margin + 256\n    \n    pil_image = pil_image.crop((left_margin, bottom_margin, right_margin, top_margin))\n    \n    \n    # Normalize\n    np_image = np.array(pil_image)\/255\n    mean = np.array([0.485, 0.456, 0.406])\n    std = np.array([0.229, 0.224, 0.225])\n    np_image = (np_image - mean) \/ std\n  \n    # PyTorch expects the color channel to be the first dimension but it's the third dimension in the PIL image and Numpy array\n    # Color channel needs to be first; retain the order of the other two dimensions.\n    np_image = np_image.transpose((2, 0, 1))\n    \n    return np_image\n\n","dd05f25b":"def imshow(image, ax=None, title=None):\n    if ax is None:\n        fig, ax = plt.subplots()\n    \n    # PyTorch tensors assume the color channel is the first dimension\n    # but matplotlib assumes is the third dimension\n    image = image.transpose((1, 2, 0))\n    \n    # Undo preprocessing\n    mean = np.array([0.485, 0.456, 0.406])\n    std = np.array([0.229, 0.224, 0.225])\n    image = std * image + mean\n    \n    if title is not None:\n        ax.set_title(title)\n    \n    # Image needs to be clipped between 0 and 1 or it looks like noise when displayed\n    image = np.clip(image, 0, 1)\n    \n    ax.imshow(image)\n    \n    return ax\n\nimage = process_image('..\/input\/siim-isic-melanoma-classification\/jpeg\/test\/ISIC_0052060.jpg')\nimshow(image)","543b061e":"#model = torch.load('..\/input\/melanoma-model\/melanoma_model_0.pth' )\n#model = model.to(device)\n#model.eval()","6c9671f5":"# Implement the code to predict the class from an image file\n\ndef predict(image_path, model, topk=1): #just 2 classes from 1 single output\n    ''' Predict the class (or classes) of an image using a trained deep learning model.\n    '''\n    \n    image = process_image(image_path)\n    \n    # Convert image to PyTorch tensor first\n    image = torch.from_numpy(image).type(torch.cuda.FloatTensor)\n    #print(image.shape)\n    #print(type(image))\n    \n    # Returns a new tensor with a dimension of size one inserted at the specified position.\n    image = image.unsqueeze(0)\n    \n    output = model(image)\n    \n    probabilities = torch.sigmoid(output)\n    \n    # Probabilities and the indices of those probabilities corresponding to the classes\n    top_probabilities, top_indices = probabilities.topk(topk)\n    \n    # Convert to lists\n    top_probabilities = top_probabilities.detach().type(torch.FloatTensor).numpy().tolist()[0] \n    top_indices = top_indices.detach().type(torch.FloatTensor).numpy().tolist()[0] \n    \n    top_classes = []\n    \n    if probabilities > 0.5 :\n        top_classes.append(\"Melanoma\")\n    else:\n        top_classes.append(\"Benign\")\n\n    \n    return top_probabilities, top_classes\n\npredict_image_path='..\/input\/siim-isic-melanoma-classification\/jpeg\/train\/ISIC_0502582.jpg'\n#predict_image_path='..\/input\/siim-isic-melanoma-classification\/jpeg\/test\/ISIC_0074618.jpg'\n\nprobs, classes = predict(predict_image_path, model)   \nprint(probs)\nprint(classes)","8725430d":"test = test_df['target']= np.zeros((len(test_df), 1))\npred = np.round(test_pred)\ncm = confusion_matrix(test, pred)\n\ncm_df = pd.DataFrame(cm,\n                     index = ['Benign','Malignant'], \n                     columns = ['Benign','Malignant'])\n\nplt.figure(figsize=(5.5,4))\nsb.heatmap(cm_df, annot=True)\nplt.title('Confusion Matrix \\nAccuracy:{0:.3f}'.format(test_accuracy))\nplt.ylabel('True label')\nplt.xlabel('Predicted label')\nplt.show()","18c6dca8":"# Display an image along with the diagnosis of melanoma or benign\n\n# Plot Skin image input image\nplt.figure(figsize = (6,10))\nplot_1 = plt.subplot(2,1,1)\n\nimage = process_image(predict_image_path)\n\nimshow(image, plot_1)\nfont = {\"color\": 'g'} if 'Benign' in classes else {\"color\": 'r'}\nplot_1.set_title(\"Diagnosis: {}\".format(classes), fontdict=font);","b68ced77":"for param in model.parameters():\n        param.requires_grad = False","2a13f236":"image = process_image('..\/input\/siim-isic-melanoma-classification\/jpeg\/train\/ISIC_0502582.jpg')\n\n\n    # Convert image to PyTorch tensor first\nimage = torch.tensor(image).type(torch.cuda.FloatTensor)\n    #print(image.shape)\n    #print(type(image))\nimage = image.unsqueeze(0)\nimage = image.to(device)   \n    # Returns a new tensor with a dimension of size one inserted at the specified position.\n\n    \noutput = model(image)\n    \nprobabilities = torch.sigmoid(output.squeeze())\n    \n\n","1a1c2ae3":"print(probabilities)\nprint(image.shape)","6028ee1c":"for name, _ in model.named_modules():\n    print(name)","5513bc33":"class SaveFeatures():\n    \"\"\" Extract pretrained activations\"\"\"\n    features=None\n    def __init__(self, m):\n        self.hook = m.register_forward_hook(self.hook_fn)\n    def hook_fn(self, module, input, output):\n        self.features = ((output.cpu()).data).numpy()\n    def remove(self):\n        self.hook.remove()\n        \nfinal_layer = model._modules[\"arch\"]._modules.get(\"_conv_head\")\nactivated_features = SaveFeatures(final_layer)","f0a13d00":"print(final_layer)","3194c270":"def getCAM(feature_conv, weight_fc, class_idx):\n    _, nc, h, w = feature_conv.shape\n    cam = weight_fc[class_idx].dot(feature_conv.reshape((nc, h*w)))\n    cam = cam.reshape(h, w)\n    cam = cam - np.min(cam)\n    cam_img = cam \/ np.max(cam)\n    return cam_img\n\nweight_final_params = list(model._modules[\"arch\"]._modules.get(\"_fc\").parameters())\nweight_params = np.squeeze(weight_final_params[0].cpu().data.numpy())\nweight_params\n","4e41b8fe":"probabilities = probabilities.cpu()\n","48368007":"probabilities = probabilities.detach().numpy()\nprint(probabilities)","b61b4462":"class_idx = np.int(np.round(probabilities))\nprint(class_idx)","9171d063":"## Current images & their heatmaps\ncur_images = image.cpu().numpy().transpose((0, 2, 3, 1))\nheatmaps = []\n\nimg = getCAM(activated_features.features, weight_params, class_idx)\nheatmaps.append(img)\n    \nprint(cur_images.shape, len(heatmaps))","9cdf0c4b":"print(img.shape)","b36e868d":"print(weight_softmax.shape)","848b2ece":"plt.imshow(img, alpha=0.5, cmap='jet')","c61f35aa":"fig, ax = plt.subplots(1,2, figsize=(10,10))\n\nax[0].imshow(cur_images)\nax[0].set_title(\"Video: \" + sample_video + \"Actual: \" + y )\nax[1].imshow(cur_images)\nax[1].imshow(skimage.transform.resize(img[0], (cur_images.shape[0],cur_images.shape[1] )), alpha=0.25, cmap='jet')\ny_pred = str(y_pred.cpu().data.numpy())\nax[1].set_title(y_pred)\nfig.tight_layout()","294826c3":"img_size = 256\nplt.imshow(cur_images[0])\nplt.imshow(cv2.resize(img, (img_size, img_size), interpolation=cv2.INTER_LINEAR), alpha=0.7, cmap='jet')","3c00d6e7":"fig=plt.figure(figsize=(20,15))\nfor i in range(0, len(cur_images[:8])):\n    img = cur_images[i]\n    mask = heatmaps[i]\n    ax = fig.add_subplot(4, 4,i +1,xticks=[], yticks=[])\n    plt.imshow(img)\n    plt.imshow(cv2.resize(mask, (512,512), interpolation=cv2.INTER_LINEAR), alpha=0.5, cmap='jet');\n    ax.set_title('Label %d with %s probability' % (labels[i], proba[i]),fontsize=14)\n    \n#cax = fig.add_axes([0.3, 0.42, 0.4, 0.04]) # place where be map\ncax = fig.add_axes([0.32, 0.42, 0.4, 0.03]) # place where be map\nclb = plt.colorbar(cax=cax, orientation='horizontal',ticks=[0, 0.5, 1])\nclb.ax.set_title('Level of \"attention\" NN in making prediction',fontsize=20)\nclb.ax.set_xticklabels(['low', 'medium', 'high'],fontsize=18)\n\n\nplt.show()","c83e4cf2":"## Creating Sratified Validation Data from the Training Data just to visualize the distribution and time of transformations\nDoing this just as an example, because we have to later define the validation and training data **within** each fold of cross validation","cda631cb":"# Confusion Matrix","40229ca0":"## Creating Custom Dataset Class","8c5f8ff4":"# Sanity Check\n\nNow that we can use a trained model for predictions, let's check to make sure it makes sense. Even if the testing accuracy is high, it's always good to check that there aren't obvious bugs. Using `matplotlib` to plot the diagnosis along with the input image. \n\nIntroduce the image path to be predicted in \"predict_image_path\" object above\n","7faa6602":"# Ploting losses and accuracies","4dd2686e":"###### Inference for classification\n\nWriting a function to use a trained network for inference. That is, I'll pass an image into the network and predict the class of the Image. \n\nWriting a function called `predict` that takes an image and a model, then returns the top $K$ most likely classes along with the probabilities. \n\nFirst the input image needs to be processed in the same manner it was for training, so that it can be used in the network. \n\n\n## Image Preprocessing\n\nUsing `PIL` to load the image ([documentation](https:\/\/pillow.readthedocs.io\/en\/latest\/reference\/Image.html)). It's best to write a function that preprocesses the image so it can be used as an input for the model. This function should process the images in the same manner used for training. \n\nIf the Image is bigger than 256x256:..\n\nFirst, resize the images where the shortest side is 256 pixels, keeping the aspect ratio. This can be done with the [`thumbnail`](http:\/\/pillow.readthedocs.io\/en\/3.1.x\/reference\/Image.html#PIL.Image.Image.thumbnail) or [`resize`](http:\/\/pillow.readthedocs.io\/en\/3.1.x\/reference\/Image.html#PIL.Image.Image.thumbnail) methods. Then crop out the center 256x256 portion of the image.\n\nColor channels of images are typically encoded as integers 0-255, but the model expected floats 0-1. I'll need to convert the values. It's easiest with a Numpy array, which can be obtained from a PIL image like so `np_image = np.array(pil_image)`.\n\nAs before, the network expects the images to be normalized in a specific way. For the means, it's `[0.485, 0.456, 0.406]` and for the standard deviations `[0.229, 0.224, 0.225]`. I'll subtract the means from each color channel, then divide by the standard deviation. \n\nAnd finally, PyTorch expects the color channel to be the first dimension but it's the third dimension in the PIL image and Numpy array. Dimensions must be reordered using [`ndarray.transpose`](https:\/\/docs.scipy.org\/doc\/numpy-1.13.0\/reference\/generated\/numpy.ndarray.transpose.html). The color channel needs to be first and retain the order of the other two dimensions.","59af9904":"# Testing the network\n\nIt's good practice to test the trained network on test data, images the network has never seen either in training or validation. This will give a good estimate for the model's performance on completely new images. I will run the test images through the network and measure the accuracy, the same way I did validation. ","81694123":"# Hyperparameters\n\nEasier for later tunning","2e9d175e":"## Distribution of Targets in Training and Validation sets\nTargets (in this case melanoma images) should be equally distributed","b3fecbae":"As we can see in the matrix, it is pedicting 59 malignant images, but because the test.csv file doesn't have a target column, we have to put 0 on all (benign). we don't really know the true label (how many melanomas are on the test set) so we assume all of them are benign and we see wich ones the network detects as malignant (this is shown in the matrix as a false positive).","5235eade":"Deleting Validation and Training stuff to clean cache memory because, as I said earlier, we have to define each dataset and dataloader **WITHIN** each fold of the cross validation","a2e0f94c":"# Loading the data\n\nHere I'll use `torchvision` to load the data ([documentation](http:\/\/pytorch.org\/docs\/0.3.0\/torchvision\/index.html)). The data should be included alongside this notebook. The dataset is split into three parts, training, validation, and testing. For the training, I'll apply transformations such as  random scaling, cropping, and flipping. This will help the network generalize leading to better performance. The input data must be resized to 256x256 pixels as required by the pre-trained networks (in this case the images are already 256x256).\n\nThe validation and testing sets are used to measure the model's performance on data it hasn't seen yet. For this no scaling or rotation transformations will be applied, but the images still need to be resized and then croped to the appropriate size.\n\nThe pre-trained networks I'll use were trained on the ImageNet dataset where each color channel was normalized separately. For all three sets I'll need to normalize the means and standard deviations of the images to what the network expects. For the means, it's `[0.485, 0.456, 0.406]` and for the standard deviations `[0.229, 0.224, 0.225]`, calculated from the ImageNet images.  These values will shift each color channel to be centered at 0 and range from -1 to 1.\n ","86c211a9":"## Loading Datasets","0b799d04":"# Class Prediction\n\nOnce the images are in the correct format, it's time to write a function to make predictions with the model. A common practice is to predict the top 5 or so (usually called top-$K$) most probable classes. I'll calculate the class probabilities then find the $K$ largest values.\n\nTo get the top $K$ largest values in a tensor use [`x.topk(k)`](http:\/\/pytorch.org\/docs\/master\/torch.html#torch.topk). This method returns both the highest `k` probabilities and the indices of those probabilities corresponding to the classes. The indices need to be converted to the actual class labels using `class_to_idx` which was added to the model, it can also be done from an `ImageFolder` used to load the data ([see here](#Save-the-checkpoint)). \n\nAgain, this method should take a path to an image and a model checkpoint, then return the probabilities and classes.\n","a255a3f7":"transform_start = time.time()\nfor i, data in enumerate(train_loader):\n    images = data\nend = time.time()\ntime_spent = (end-transform_start)\/60\nprint(f\"{time_spent:.3} minutes\")","067d5f90":"## Deleting unnecessary variables and cleaning up Cache","27647008":"### Defining random hairs simulation and microscope view for augmentation","a5b0770c":"## Defining Dataloaders","2dd72441":"# Setting up the Device ","4c57cb75":"# Trainning the Model using Sratified Cross Validation\n![](https:\/\/i.stack.imgur.com\/1fXzJ.png\/)","fa1520fa":"## Defining Transformations","63148ba1":"### Setting up transformations","ab6d4be7":"## Creating Dataframes and image directories","117b3b5b":"# Building the Model\n\nNow that the data is ready, it's time to build the Model. I will be using a pretrained model 'Efficient Net' to get the image features and then modify it to fit the Dataset","b8fd260a":"# Imports","a2f2e9eb":"## Figuring out how much time the Transformations take","b349e772":"Checking work done untill now, the function below converts a PyTorch tensor and displays it in the notebook. If `process_image` function works, running the output through this function should return the original image (except for the cropped out portions).","342c8102":"# Seeds","b1f36a95":"# Versions\n\n* **2.0 -** Added effnet b2, changed transform size to 256, added more transforms: HorizontalFlip(), VerticalFlip(), ColorJitter(brightness=32. \/ 255.,saturation=0.5,hue=0.01)\n\n* **3.0 -** Added Hairs for augmentation and Microscope, Changed final prediction plot"}}