{"cell_type":{"1abb7621":"code","ea71eeeb":"code","5b4fd9ec":"code","41b0df88":"code","48fec58a":"code","b62bb58a":"code","c325cbd2":"code","f4e9c9d0":"code","bab268fd":"code","3680b89f":"code","b2f2cab7":"code","89a2aae0":"code","83b7ddef":"code","7db1f87f":"code","ce90d5ae":"code","2c2ade88":"code","a2291c18":"code","1b69e1e2":"code","2d3c2b7d":"code","45450847":"code","09ef1fb0":"code","2cb2a87b":"code","663f8125":"code","181b88ef":"code","4970dfe2":"code","bee93689":"code","39da6a60":"markdown","5fdaa77e":"markdown","46475da9":"markdown","7a26e5f1":"markdown","7a0db791":"markdown","36e8c332":"markdown","e410ad28":"markdown"},"source":{"1abb7621":"import pandas as pd\nimport numpy as np\nfrom scipy.sparse import csr_matrix\nfrom sklearn.neighbors import NearestNeighbors\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ea71eeeb":"movies= pd.read_csv(\"..\/input\/movielens-dataset\/movies.csv\")","5b4fd9ec":"movies.head()","41b0df88":"ratings=pd.read_csv(\"..\/input\/movielens-dataset\/ratings.csv\")","48fec58a":"ratings.head()","b62bb58a":"final_dataset = ratings.pivot(index='movieId',columns='userId',values='rating')\nfinal_dataset.head()","c325cbd2":"final_dataset.fillna(0,inplace=True)\nfinal_dataset.head()","f4e9c9d0":"movies.describe()","bab268fd":"ratings.describe()","3680b89f":"movies.shape","b2f2cab7":"ratings.shape","89a2aae0":"df=pd.merge(ratings,movies, how='left',on='movieId')\ndf.head()","83b7ddef":"df1=df.groupby(['title'])[['rating']].sum()\nhigh_rated=df1.nlargest(20,'rating')\nhigh_rated.head()","7db1f87f":"plt.figure(figsize=(30,10))\nplt.title('Top 20 movies with highest rating',fontsize=40)\ncolors=['red','yellow','orange','green','magenta','cyan','blue','lightgreen','skyblue','purple']\nplt.ylabel('ratings',fontsize=30)\nplt.xticks(fontsize=25,rotation=90)\nplt.xlabel('movies title',fontsize=30)\nplt.yticks(fontsize=25)\nplt.bar(high_rated.index,high_rated['rating'],linewidth=3,edgecolor='red',color=colors)","ce90d5ae":"no_user_voted=ratings.groupby('movieId')['rating'].agg('count')\nno_movies_voted=ratings.groupby('userId')['rating'].agg('count')","2c2ade88":"f,ax=plt.subplots(1,1,figsize=(16,4))\n# ratings['rating'].plot(kind='hist')\nplt.scatter(no_user_voted.index,no_user_voted,color='mediumseagreen')\nplt.axhline(y=10,color='r')\nplt.xlabel('MovieId')\nplt.ylabel('No. of users voted')\nplt.show()","a2291c18":"final_dataset=final_dataset.loc[no_user_voted[no_user_voted > 10].index,:]\n","1b69e1e2":"f,ax = plt.subplots(1,1,figsize=(16,4))\nplt.scatter(no_movies_voted.index,no_movies_voted,color='mediumseagreen')\nplt.axhline(y=50,color='r')\nplt.xlabel('UserId')\nplt.ylabel('No. of votes by user')\nplt.show()","2d3c2b7d":"final_dataset=final_dataset.loc[:,no_movies_voted[no_movies_voted >50].index]\nfinal_dataset","45450847":"sample = np.array([[0,0,3,0,0],[4,0,0,0,2],[0,0,0,0,1]])\nsparsity = 1.0 - ( np.count_nonzero(sample) \/ float(sample.size) )\nprint(sparsity)","09ef1fb0":"csr_sample=csr_matrix(sample)\nprint(csr_sample)","2cb2a87b":"csr_data=csr_matrix(final_dataset.values)\nfinal_dataset.reset_index(inplace=True)","663f8125":"knn=NearestNeighbors(metric='cosine',algorithm='brute',n_neighbors=20,n_jobs=-1)\nknn.fit(csr_data)","181b88ef":"def get_movie_recommendation(movie_name):\n    n_movies_to_reccomend = 10\n    movie_list = movies[movies['title'].str.contains(movie_name)]  \n    if len(movie_list):        \n        movie_idx= movie_list.iloc[0]['movieId']\n        movie_idx = final_dataset[final_dataset['movieId'] == movie_idx].index[0]\n        distances , indices = knn.kneighbors(csr_data[movie_idx],n_neighbors=n_movies_to_reccomend+1)    \n        rec_movie_indices = sorted(list(zip(indices.squeeze().tolist(),distances.squeeze().tolist())),key=lambda x: x[1])[:0:-1]\n        recommend_frame = []\n        for val in rec_movie_indices:\n            movie_idx = final_dataset.iloc[val[0]]['movieId']\n            idx = movies[movies['movieId'] == movie_idx].index\n            recommend_frame.append({'Title':movies.iloc[idx]['title'].values[0],'Distance':val[1]})\n        df = pd.DataFrame(recommend_frame,index=range(1,n_movies_to_reccomend+1))\n        return df","4970dfe2":"get_movie_recommendation('Iron Man')","bee93689":"get_movie_recommendation('Memento')","39da6a60":"# Removing sparsity","5fdaa77e":"# MOVIE RECOMMENDATION SYSTEM","46475da9":"# Making the movie recommendation system model","7a26e5f1":"# Let\u2019s Recommend some movies!","7a0db791":"# Making the recommendation function","36e8c332":"# Visualization","e410ad28":"# Importing Libraries"}}