{"cell_type":{"d184df06":"code","4514626c":"code","9a998cd8":"code","c8febcc3":"code","b29425fb":"code","fc4626d7":"code","f6d70ab3":"code","3cebbe30":"code","437d4193":"code","c806d711":"code","000316ca":"code","fdb9b70b":"code","024c973f":"code","df2394a8":"code","bd49ab2c":"code","4254b34e":"code","abcd7fa6":"code","a66e8bd6":"code","6d0d7e61":"code","60695b1b":"code","695f979c":"code","f118d5fc":"code","1abe744b":"code","5a024a9a":"code","a768f942":"code","84b18186":"code","bce9a9f8":"code","d0694ae2":"code","1155b507":"code","c2cd9f63":"code","93efeb90":"code","1c9f1fb6":"code","135a79b0":"code","5577bbbe":"code","026886c6":"code","545cb4c6":"code","237cc455":"code","11b5f569":"code","e8868988":"code","24e75a2d":"code","d9c2b5fd":"code","599e4616":"code","5fcf11e1":"code","f3863db1":"code","8e8a0559":"code","978855d0":"code","fc0437bd":"code","c6605a40":"code","a70546f2":"code","f7192517":"code","5e802b36":"code","f3bb306c":"code","bfe6821d":"code","128f64d1":"code","89e97334":"code","a5aa1c50":"code","a613fa1f":"code","3b705506":"code","97e3a698":"code","c2e715d9":"code","6f21280f":"code","8827fced":"code","d5136e41":"code","104acebf":"code","fb2d9a5d":"code","e7cf71c3":"code","9221b1fa":"markdown","bbc0f426":"markdown","a5fc9074":"markdown","e6b924a2":"markdown","2d9f7775":"markdown","4d92c466":"markdown","98d71429":"markdown","a165edb4":"markdown","3d39332a":"markdown","2569a0ae":"markdown","5fe66af5":"markdown","ec6dc9d6":"markdown","06a56a6c":"markdown","5a8f974f":"markdown","019c7f75":"markdown","3c2f5bb3":"markdown","99111051":"markdown","2360b5a7":"markdown","90972fe8":"markdown","ce876f84":"markdown","198a50ef":"markdown","4876f279":"markdown"},"source":{"d184df06":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px","4514626c":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","9a998cd8":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","c8febcc3":"print(train.head())","b29425fb":"print(test.head())","fc4626d7":"print(\"train shape:\",train.shape)\nprint(\"test shape:\",test.shape)","f6d70ab3":"df = pd.concat([train,test],ignore_index=True)\nprint(\"Combined data shape\",df.shape)\nprint(\"\\n\")\nprint(\"Combined data info\",df.info())","3cebbe30":"train.describe()","437d4193":"test.describe()","c806d711":"df.isnull().sum()","000316ca":"plt.figure(figsize=(12,7))\nsns.heatmap(df.isnull())","fdb9b70b":"df_main = df.copy()","024c973f":"df = df.drop(['Id','Alley', 'PoolQC','MiscFeature','Fence'], axis=1)","df2394a8":"df = df.drop('FireplaceQu', axis=1)","bd49ab2c":"plt.figure(figsize=(12,7))\nsns.heatmap(df.isnull())","4254b34e":"df.head()","abcd7fa6":"df['LotFrontage'] = df['LotFrontage'].fillna(df['LotFrontage'].mean())","a66e8bd6":"df['BsmtQual'] = df['BsmtQual'].fillna(df['BsmtQual'].mode()[0])\ndf['BsmtCond'] = df['BsmtCond'].fillna(df['BsmtCond'].mode()[0])\ndf['GarageType'] = df['GarageType'].fillna(df['GarageType'].mode()[0])","6d0d7e61":"plt.figure(figsize=(12,7))\nsns.heatmap(df.isnull())","60695b1b":"df['BsmtExposure'] = df['BsmtExposure'].fillna(df['BsmtExposure'].mode()[0])\ndf['BsmtFinType1'] = df['BsmtFinType1'].fillna(df['BsmtFinType1'].mode()[0])\ndf['BsmtFinType2'] = df['BsmtFinType2'].fillna(df['BsmtFinType2'].mode()[0])\ndf['GarageYrBlt'] = df['GarageYrBlt'].fillna(df['GarageYrBlt'].mean())\ndf['GarageFinish'] = df['GarageFinish'].fillna(df['GarageFinish'].mode()[0])\ndf['GarageQual'] = df['GarageQual'].fillna(df['GarageQual'].mode()[0])\ndf['GarageCond'] = df['GarageCond'].fillna(df['GarageCond'].mode()[0])","695f979c":"plt.figure(figsize=(12,7))\nsns.heatmap(df.isnull())","f118d5fc":"y = df['SalePrice']\ndf = df.drop('SalePrice', axis=1)","1abe744b":"plt.figure(figsize=(12,7))\nsns.heatmap(df.isnull())\n#df.dropna(inplace=True)","5a024a9a":"#df.dropna(inplace=True)","a768f942":"plt.figure(figsize=(12,7))\nsns.heatmap(df.isnull())","84b18186":"df = df.join(y, how='left')\ndf","bce9a9f8":"df_number = df.select_dtypes(include=['int64','float64'])\nfig,axs= plt.subplots(12,3,figsize=(20,80))\nfig.subplots_adjust(hspace = 0.5)\nfor i,ax in zip(df_number.columns, axs.flatten()):\n    sns.scatterplot(x=i, y='SalePrice', hue='SalePrice',data=df_number, ax=ax)\n    plt.xlabel(i,fontsize=12)\n    plt.ylabel('SalePrice', fontsize=12)\n    ax.set_title('SalePrice'+' - '+str(i), fontweight='bold', fontsize=12)","d0694ae2":"df.plot.scatter(x='GrLivArea', y='SalePrice', ylim=(0,800000), cmap='viridis')","1155b507":"drop_indexes = df[df['SalePrice']>700000]\ndf = df.drop(drop_indexes.index, axis= 0)","c2cd9f63":"sum_missing_values = df.select_dtypes(include=[np.number]).isnull().sum()\nsum_missing_values[sum_missing_values > 0].sort_values(ascending=False)","93efeb90":"df.shape","1c9f1fb6":"X = df.iloc[:1458,:]\ntest_1 = df.iloc[1458:,:]","135a79b0":"X.head()","5577bbbe":"test_1.head()","026886c6":"fig,ax=plt.subplots(figsize=(14,14))\nsns.heatmap(X.corr(), linewidths=.5, cmap=\"YlGnBu\")","545cb4c6":"correlation = X.select_dtypes(include=[np.number]).corr()\nprint(correlation['SalePrice'].sort_values(ascending=False))","237cc455":"sns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(X[cols], size = 1.5)\nplt.show();","11b5f569":"sns.distplot(X['SalePrice'])\nprint('Skewness is : %f' % X['SalePrice'].skew())\nprint('Kurtosis is : %f' % X['SalePrice'].kurt())","e8868988":"fig = px.scatter(X, x = 'TotRmsAbvGrd', y = 'SalePrice')\nfig.show()","24e75a2d":"fig,ax=plt.subplots(figsize=(14,7))\nsns.regplot(data=X, x='YearBuilt', y='SalePrice', scatter_kws={'alpha':0.2}, color='purple')","d9c2b5fd":"sns.relplot(data=X, x='YearRemodAdd', y='SalePrice', color='purple', kind=\"line\")","599e4616":"fig = px.pie(X, names='Neighborhood',title = \"Neighborhood area\")\nfig.update_layout(margin=dict(t=45, b=0, l=0, r=0))\nfig.show()","5fcf11e1":"fig = px.pie(X, names='GarageType',title = \"Garage area\")\nfig.show()","f3863db1":"fig = px.pie(X, names='SaleType',title = \"Type of Sale\")\nfig.update_layout(margin=dict(t=45, b=0, l=0, r=0))\nfig.show()","8e8a0559":"fig =px.bar(X,x='ExterQual', y='SalePrice',barmode='group', height=600)\nfig.show()","978855d0":"from sklearn.preprocessing import StandardScaler\n\nsaleprice_scaled = StandardScaler().fit_transform(X['SalePrice'][:,np.newaxis]);\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","fc0437bd":"x = X.drop(['SalePrice'], axis=1)\ny = X['SalePrice']","c6605a40":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nx = x.apply(le.fit_transform)","a70546f2":"x.head()","f7192517":"y.head()","5e802b36":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.33, random_state=42)","f3bb306c":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nX_train = ss.fit_transform(X_train)\nX_test = ss.fit_transform(X_test)","bfe6821d":"from sklearn.metrics import r2_score, mean_absolute_error\nfrom sklearn.model_selection import cross_val_score\n\ndef model_eval(y_true, y_pred):\n    r2 = r2_score(y_true, y_pred)\n    mae = mean_absolute_error(y_true, y_pred)\n    return r2, mae","128f64d1":"from sklearn import linear_model\nlr = linear_model.LinearRegression().fit(X_train, y_train)\ncv = cross_val_score(lr, X_train, y_train, cv=10)\ny_pred = lr.predict(X_test)\ncv = np.mean(cv)\nprint(\"Cross val score = \"+str(cv))\nr2, mae = model_eval(y_test, y_pred)   # model_eval is the function in the above code block in order to calculate r2 score and mean absolute error\nprint(\"R^2 score = \"+str(r2))\nprint(\"MAE score = \"+str(mae))\ntest_accuracy_score=lr.score(X_test,y_test)\nprint(\"test accuracy score = \" +str(test_accuracy_score))","89e97334":"from sklearn import linear_model\nridge = linear_model.Ridge(alpha=1).fit(X_train,y_train)\ncv = cross_val_score(ridge, X_train, y_train, cv=10)\ny_pred = ridge.predict(X_test)\ncv = np.mean(cv)\nprint(\"Cross val score = \"+str(cv))\nr2, mae = model_eval(y_test, y_pred)   # model_eval is the function in the above code block in order to calculate r2 score and mean absolute error\nprint(\"R^2 score = \"+str(r2))\nprint(\"MAE score = \"+str(mae))\ntest_accuracy_score=ridge.score(X_test,y_test)\nprint(\"test accuracy score = \" +str(test_accuracy_score))","a5aa1c50":"from sklearn import linear_model\nlasso = linear_model.Lasso(alpha=1).fit(X_train,y_train)\ncv = cross_val_score(lasso, X_train, y_train, cv=10)\ny_pred = lasso.predict(X_test)\ncv = np.mean(cv)\nprint(\"Cross val score = \"+str(cv))\nr2, mae = model_eval(y_test, y_pred)   # model_eval is the function in the above code block in order to calculate r2 score and mean absolute error\nprint(\"R^2 score = \"+str(r2))\nprint(\"MAE score = \"+str(mae))\ntest_accuracy_score=lasso.score(X_test,y_test)\nprint(\"test accuracy score = \" +str(test_accuracy_score))","a613fa1f":"from sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(n_estimators=1000).fit(X_train,y_train)\ncv = cross_val_score(rfr, X_train, y_train, cv=10)\ny_pred = rfr.predict(X_test)\ncv = np.mean(cv)\nprint(\"Cross val score = \"+str(cv))\nr2, mae = model_eval(y_test, y_pred)   # model_eval is the function in the above code block in order to calculate r2 score and mean absolute error\nprint(\"R^2 score = \"+str(r2))\nprint(\"MAE score = \"+str(mae))\ntest_accuracy_score=rfr.score(X_test,y_test)\nprint(\"test accuracy score = \" +str(test_accuracy_score))","3b705506":"from sklearn.ensemble import GradientBoostingRegressor\ngbr = GradientBoostingRegressor().fit(X_train,y_train)\ncv = cross_val_score(gbr, X_train, y_train, cv=10)\ny_pred = gbr.predict(X_test)\ncv = np.mean(cv)\nprint(\"Cross val score = \"+str(cv))\nr2, mae = model_eval(y_test, y_pred)   # model_eval is the function in the above code block in order to calculate r2 score and mean absolute error\nprint(\"R^2 score = \"+str(r2))\nprint(\"MAE score = \"+str(mae))\ntest_accuracy_score=gbr.score(X_test,y_test)\nprint(\"test accuracy score = \" +str(test_accuracy_score))","97e3a698":"import xgboost as XGB\nxgb = XGB.XGBRegressor(learning_rate=0.01, n_estimators=1000, objective='reg:squarederror', random_state = 31).fit(X_train,y_train) #trial and error\ncv = cross_val_score(xgb, X_train, y_train, cv = 10)\ny_pred = xgb.predict(X_test)\ncv = np.mean(cv)\nprint(\"Cross val score: \" + str(cv))\nr2, mae = model_eval(y_test, y_pred)\nprint(\"R^2 score: \" + str(r2))\nprint(\"MAE score: \" + str(mae))\ntest_accuracy_score=xgb.score(X_test,y_test)\nprint(\"test accuracy score = \" +str(test_accuracy_score))","c2e715d9":"test_1.head()","6f21280f":"test_2 = test_1.drop('SalePrice', axis=1)","8827fced":"test_2 = test_2.apply(lambda col: le.fit_transform(col.astype(str)), axis=0, result_type='expand')","d5136e41":"test_2","104acebf":"test_pred = xgb.predict(test_2)","fb2d9a5d":"my_submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\nfinal_sub = {'Id': my_submission.Id, 'SalePrice': test_pred}\nfinal_sub","e7cf71c3":"my_submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\nfinal_sub = {'Id': my_submission.Id, 'SalePrice': test_pred}\nfinal_submission = pd.DataFrame(data=final_sub)\nfinal_submission.to_csv('submission_file.csv',index =False)","9221b1fa":"## Ridge Regression","bbc0f426":"From the observations above we understand\n* Lot Area for a few is vast in size but its costings is much less, the reason of this could be unfavourable land, weather, crimes etc.\n* Most sales depends on the area of its first floor, and second floor but most houses are observed to not a second floor.\n* We see 2 outliers in Ground living area where the costing it too low for its ground area, the same reason of lot area can be used here","a5fc9074":"## Modeling","e6b924a2":"As seen in the above data, most of the columns have no null values, except LotFrontage\nAs the comparsion of values present in that column to the entire column is too low, thus the best thing to do is to remove the column itself.","2d9f7775":"We clearly see that Northern Ames is where maximum houses are sold, and the reason for this is that it is a safe living area, with less crimes and good education facility. This is unlike Blueste as this is an area filled with crime and not a completely safe area to live in","4d92c466":"## Gradient Booster","98d71429":"The two values with bigger 'GrLivArea' seem strange and they are not following the crowd. We can speculate why this is happening. Maybe they refer to agricultural area and that could explain the low price. I'm not sure about this but I'm quite confident that these two points are not representative of the typical case. Therefore, we'll define them as outliers and delete them.","a165edb4":"1. the low or the negative values are close to zero so that means they might be within the range of distribution\n2. The necessary outliers are already removed so leaving these values untouched","3d39332a":"From the pyplot we can clearly understand the following relations\n* Sales Price and Ground Living Area are directly proportionate that means, the larger the area of the living room more the costing of the house.\n* The steep slope against sales price and Total Basement in Square Feet, that a certain Basement area is preferred thus its costing is the most\n* Ground Living area shows a direct proportion with Total Basement in square feet, thus indicating that usually bigger area homes have bigger basements","2569a0ae":"Columns that have missing data and the amount of data that is missing:\n* LotFrontage: 482\n* Alley: 2717\n* Utilities: 2\n* Exterior1st: 1\n* Exterior2nd: 1\n* MasVnrType: 20\n* MasVnrArea: 19\n* BsmtQual: 77\n* BsmtCond: 76\n* BsmtExposure: 76\n* BsmtFinType1: 79\n* BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, KitchenQual, GarageCars, GarageArea, SaleType : 1\n* BsmtFinType2: 80\n* BsmtFullBath, BsmtHalfBath, Functional: 2\n* FireplaceQu: 1420\n* GarageType: 157\n* GarageYrBlt, GarageFinish, GarageQual, GarageCond: 159\n* PoolQC: 2909\n* Fence: 2348\n* MiscFeature: 2814","5fe66af5":"### Splitting Test and Train","ec6dc9d6":"## Submission","06a56a6c":"## Predicting test data","5a8f974f":"from linear regression we can see the negative r2 score which means that the chosen model does not follow the trend of the data, so fits worse than a horizontal line.","019c7f75":"Clearly seeing that test data is missing the sales price column, that needs to calculated by us","3c2f5bb3":"## Lasso Regression","99111051":"## Data Visualisation","2360b5a7":"## Recognising Outliers","90972fe8":"## Random Forest","ce876f84":"Usually 5-9 have similar Price Ranges. This thus inidicates that a lot of people do not consider the total rooms when looking at house sale price","198a50ef":"## Linear Regression","4876f279":"* SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n\n* MSSubClass: The building class\n \n* MSZoning: The general zoning classification\n \n* LotFrontage: Linear feet of street connected to property\n \n* LotArea: Lot size in square feet\n \n* Street: Type of road access\n \n* Alley: Type of alley access\n \n* LotShape: General shape of property\n \n* LandContour: Flatness of the property\n \n* Utilities: Type of utilities available\n \n* LotConfig: Lot configuration\n \n* LandSlope: Slope of property\n \n* Neighborhood: Physical locations within Ames city limits\n \n* Condition1: Proximity to main road or railroad\n \n* Condition2: Proximity to main road or railroad (if a second is present)\n \n* BldgType: Type of dwelling\n \n* HouseStyle: Style of dwelling\n \n* OverallQual: Overall material and finish quality\n \n* OverallCond: Overall condition rating\n \n* YearBuilt: Original construction date\n \n* YearRemodAdd: Remodel date\n\n* RoofStyle: Type of roof\n \n* RoofMatl: Roof material\n \n* Exterior1st: Exterior covering on house\n \n* Exterior2nd: Exterior covering on house (if more than one material)\n \n* MasVnrType: Masonry veneer type\n \n* MasVnrArea: Masonry veneer area in square feet\n \n* ExterQual: Exterior material quality\n \n* ExterCond: Present condition of the material on the exterior\n\n* Foundation: Type of foundation\n \n* |BsmtQual: Height of the basement\n \n* BsmtCond: General condition of the basement\n \n* BsmtExposure: Walkout or garden level basement walls\n \n* BsmtFinType1: Quality of basement finished area\n \n* BsmtFinSF1: Type 1 finished square feet\n \n* BsmtFinType2: Quality of second finished area (if present)\n \n* BsmtFinSF2: Type 2 finished square feet\n \n* BsmtUnfSF: Unfinished square feet of basement area\n \n* TotalBsmtSF: Total square feet of basement area\n \n* Heating: Type of heating\n \n* HeatingQC: Heating quality and condition\n \n* CentralAir: Central air conditioning\n \n* Electrical: Electrical system\n \n* 1stFlrSF: First Floor square feet\n \n* 2ndFlrSF: Second floor square feet\n \n* LowQualFinSF: Low quality finished square feet (all floors)\n \n* GrLivArea: Above grade (ground) living area square feet\n \n* BsmtFullBath: Basement full bathrooms\n \n* BsmtHalfBath: Basement half bathrooms\n \n* FullBath: Full bathrooms above grade\n \n* HalfBath: Half baths above grade\n \n* Bedroom: Number of bedrooms above basement level\n \n* Kitchen: Number of kitchens\n \n* KitchenQual: Kitchen quality\n\n* TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n\n* Functional: Home functionality rating\n \n* Fireplaces: Number of fireplaces\n \n* FireplaceQu: Fireplace quality\n \n* GarageType: Garage location\n \n* GarageYrBlt: Year garage was built\n \n* GarageFinish: Interior finish of the garage\n \n* GarageCars: Size of garage in car capacity\n \n* GarageArea: Size of garage in square feet\n \n* GarageQual: Garage quality\n \n* GarageCond: Garage condition\n \n* PavedDrive: Paved driveway\n \n* WoodDeckSF: Wood deck area in square feet\n \n* OpenPorchSF: Open porch area in square feet\n \n* EnclosedPorch: Enclosed porch area in square feet\n \n* 3SsnPorch: Three season porch area in square feet\n \n* ScreenPorch: Screen porch area in square feet\n \n* PoolArea: Pool area in square feet\n \n* PoolQC: Pool quality\n \n* Fence: Fence quality\n\n* MiscFeature: Miscellaneous feature not covered in other categories\n\n* MiscVal: Value of miscellaneous feature\n\n* MoSold: Month Sold\n \n* YrSold: Year Sold\n \n* SaleType: Type of sale\n\n* SaleCondition: Condition of sale"}}