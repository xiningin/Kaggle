{"cell_type":{"fab93a47":"code","f1e79caa":"code","c3f191e1":"code","c1a97ad6":"code","2767b1ec":"code","d6566cfd":"code","94a23a30":"code","8aa31652":"code","0de19d46":"code","88f692ec":"code","5fa6584a":"code","3358b0f3":"markdown","c6c3f946":"markdown"},"source":{"fab93a47":"# import necessary libraries\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport glob","f1e79caa":"# extract the second 10 minutes data from the train.csv\ntrain = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')","c3f191e1":"# input the number of most & least volatility stock-time records to visualize\nnum_to_visualize = 10","c1a97ad6":"# save & show the target volatility of the most volatility records\nmost_volatility = train.nlargest(num_to_visualize, 'target')\nprint(most_volatility)","2767b1ec":"# save & show the target volatility of the least volatility records\nleast_volatility = train.nsmallest(num_to_visualize, 'target')\nprint(least_volatility)","d6566cfd":"# extract first 10 minutes book & trade data\ntrain_book = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*')\ntrain_trade = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/*')","94a23a30":"# create empty dicts for dataframes for the most and least volatility books\nmost_v_book_collection = {}\nleast_v_book_collection = {}","8aa31652":"# compute WAP and Log Return and saving them in the dict for Most Volatility books\nfor index, row in most_volatility.iterrows():\n    stock_id = str(int(row['stock_id']))\n    time_id = int(row['time_id'])\n    book_example = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id='+stock_id)\n    trade_example =  pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id='+stock_id)\n\n    book_example = book_example[book_example['time_id']==time_id]\n    book_example.loc[:,'stock_id'] = stock_id\n    trade_example = trade_example[trade_example['time_id']==time_id]\n    trade_example.loc[:,'stock_id'] = stock_id\n\n    book_example['wap'] = (book_example['bid_price1'] * book_example['ask_size1'] +\n                                    book_example['ask_price1'] * book_example['bid_size1']) \/ (\n                                           book_example['bid_size1']+ book_example['ask_size1'])\n\n    book_example.loc[:,'log_return'] = np.log(book_example['wap']).diff()\n    book_example = book_example[~book_example['log_return'].isnull()]\n    book_example = book_example.drop(['bid_price1','ask_price1','bid_price2','ask_price2','bid_size1','ask_size1','bid_size2','ask_size2'], axis=1)\n    most_v_book_collection['S'+str(int(row['stock_id']))+'-T'+str(int(row['time_id']))] = book_example","0de19d46":"# compute WAP and Log Return and saving them in the dict for Least Volatility books\nfor index, row in least_volatility.iterrows():\n    stock_id = str(int(row['stock_id']))\n    time_id = int(row['time_id'])\n    book_example = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id='+stock_id)\n    trade_example =  pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id='+stock_id)\n\n    book_example = book_example[book_example['time_id']==time_id]\n    book_example.loc[:,'stock_id'] = stock_id\n    trade_example = trade_example[trade_example['time_id']==time_id]\n    trade_example.loc[:,'stock_id'] = stock_id\n\n    book_example['wap'] = (book_example['bid_price1'] * book_example['ask_size1'] +\n                                    book_example['ask_price1'] * book_example['bid_size1']) \/ (\n                                           book_example['bid_size1']+ book_example['ask_size1'])\n\n    book_example.loc[:,'log_return'] = np.log(book_example['wap']).diff() #log_return(book_example['wap'])\n    book_example = book_example[~book_example['log_return'].isnull()]\n    book_example = book_example.drop(['bid_price1','ask_price1','bid_price2','ask_price2','bid_size1','ask_size1','bid_size2','ask_size2'], axis=1)\n    least_v_book_collection['S'+str(int(row['stock_id']))+'-T'+str(int(row['time_id']))] = book_example","88f692ec":"# plot out the WAP of the Most and Least Volatility on the same graph for visualization\nfig = go.Figure()\nfor keys in most_v_book_collection:\n    fig.add_trace(go.Scatter(x=most_v_book_collection[keys]['seconds_in_bucket'], \n                             y=most_v_book_collection[keys]['wap'], \n                             line=dict(color='red', width=1),\n                             connectgaps=True, name = 'Most Volatility '+keys))\nfor keys in least_v_book_collection:\n    fig.add_trace(go.Scatter(x=least_v_book_collection[keys]['seconds_in_bucket'], \n                             y=least_v_book_collection[keys]['wap'], \n                             line=dict(color='royalblue',width=1),\n                             connectgaps=True, name = 'Least Volatility '+keys))\nfig.update_layout(title='WAP of Most & Least Volatility Stock-Time Records',\n                   xaxis_title='Time in Bucket',\n                   yaxis_title='WAP')\nfig.show()","5fa6584a":"# plot out the Log Return of the Most and Least Volatility on the same graph for visualization\nfig = go.Figure()\nfor keys in most_v_book_collection:\n    fig.add_trace(go.Scatter(x=most_v_book_collection[keys]['seconds_in_bucket'], \n                             y=most_v_book_collection[keys]['log_return'], \n                             line=dict(color='red', width=1),\n                             connectgaps=True, name = 'Most Volatility '+keys))\nfor keys in least_v_book_collection:\n    fig.add_trace(go.Scatter(x=least_v_book_collection[keys]['seconds_in_bucket'], \n                             y=least_v_book_collection[keys]['log_return'], \n                             line=dict(color='royalblue', width=1),\n                             connectgaps=True, name = 'Least Volatility '+keys))\nfig.update_layout(title='Log Return of Most & Least Volatility Stock-Time Records',\n                   xaxis_title='Time in Bucket',\n                   yaxis_title='Log Return')\nfig.show()","3358b0f3":"# In this notebook, I will be showing you the visualization of the WAP and Log Return graphs in the first 10 minutes for the Most & Least Volatility Stock-Time records in the second 10 minutes from the train data.","c6c3f946":"# I hope this notebook helps you with getting an idea of volatility with visual assistance.  Best of luck in this competition, Kagglers !"}}