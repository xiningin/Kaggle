{"cell_type":{"1e621257":"code","67f76a6e":"code","f0730174":"code","e53fe51d":"code","81cb083d":"code","518a217b":"code","e60347ed":"code","67a79b9d":"code","8bbe0d74":"code","5e49b4ee":"code","4e52894b":"code","0466acec":"markdown","571f7fed":"markdown","12e87db7":"markdown","0bfdfadf":"markdown","502d2994":"markdown","4e8e035a":"markdown","d2882b72":"markdown","329a56b4":"markdown","a08f622c":"markdown","93c66439":"markdown"},"source":{"1e621257":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport plotly\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67f76a6e":"tv_shows = pd.read_csv('\/kaggle\/input\/tv-shows-on-netflix-prime-video-hulu-and-disney\/tv_shows.csv')","f0730174":"tv_shows.drop_duplicates(subset='Title',keep='first',inplace=True)","e53fe51d":"tv_shows['Rotten Tomatoes'] = tv_shows['Rotten Tomatoes'].fillna('0%')\ntv_shows['Rotten Tomatoes'] = tv_shows['Rotten Tomatoes'].apply(lambda x : x.rstrip('%'))\ntv_shows['Rotten Tomatoes'] = pd.to_numeric(tv_shows['Rotten Tomatoes'])\n\ntv_shows['IMDb'] = tv_shows['IMDb'].fillna(0)\ntv_shows['IMDb'] = tv_shows['IMDb']*10\ntv_shows['IMDb'] = tv_shows['IMDb'].astype('int')","81cb083d":"tv_shows_long=pd.melt(tv_shows[['Title','Netflix','Hulu','Disney+','Prime Video']],id_vars=['Title'],var_name='StreamingOn', value_name='Present')\ntv_shows_long = tv_shows_long[tv_shows_long['Present'] == 1]\ntv_shows_long.drop(columns=['Present'],inplace=True)","518a217b":"tv_shows_combined = tv_shows_long.merge(tv_shows, on='Title', how='inner')","e60347ed":"tv_shows_combined.drop(columns = ['Unnamed: 0','Netflix','Hulu', 'Prime Video', 'Disney+', 'type'], inplace=True)","67a79b9d":"tv_shows_both_ratings = tv_shows_combined[(tv_shows_combined.IMDb > 0) & tv_shows_combined['Rotten Tomatoes'] > 0]","8bbe0d74":"tv_shows_combined.groupby('StreamingOn').Title.count().plot(kind='bar')","5e49b4ee":"figure = []\nfigure.append(px.violin(tv_shows_both_ratings, x = 'StreamingOn', y = 'IMDb', color='StreamingOn'))\nfigure.append(px.violin(tv_shows_both_ratings, x = 'StreamingOn', y = 'Rotten Tomatoes', color='StreamingOn'))\nfig = make_subplots(rows=2, cols=4, shared_yaxes=True)\n\nfor i in range(2):\n    for j in range(4):\n        fig.add_trace(figure[i]['data'][j], row=i+1, col=j+1)\n\nfig.update_layout(autosize=False, width=800, height=800)        \nfig.show()","4e52894b":"px.scatter(tv_shows_both_ratings, x='IMDb',y='Rotten Tomatoes',color='StreamingOn')","0466acec":"# Subsetting\n\nThe datasets with IMDB ratings\/ Rotten Tomatoes ratings above 0 needs to be considered for plotting.","571f7fed":"2. Violin charts to gauge the content rating(IMDB) and freshness (Rotten Tomatoes) accross all the streaming service.","12e87db7":"# Wide to Long Format Conversion\n\nPlotting of the charts would be easier if we get the 1s and 0s in the columns Netflix,Hulu,Disney+ & Prime Video under a categorical section videos, also there might be cases wherin the same show is present in more than one service.","0bfdfadf":"# Inference\n\n1. Violin Chart\n    * Hulu, Netflix and Amazon Videos all three have got substantial data in lower end of the ratings.As the content increases so the quality decreases for all three.\n    * Prime Videos have got a denser in the top half on looking at the IMDB and performs ok in freshness.\n    * Disney+ being new has done very well in this area as well.\n2. Scatter Plot\n    * With this another view, it is quite evident, Amazon Prime performs very well in the fourth quadarant. Which verifies our first inference\n3. Bar Plot\n    * Amazon Prime wins this race in this one.\n\nSo looking at all three we can conclude Amazon Prime is both about quality and quantity.\n   \n   ","502d2994":"2. Fill nulls with zeros and convert both of them into integers convert both ratings on common scale ie. on 100\n   Since ratings play a huge role we have to process Rotten Tomato ratings and Imdb ratings.","4e8e035a":"# Merging Datasets\n\nMerging Long Format dataset with dataset that we started with also need to drop unwanted columns.","d2882b72":"# Data Cleaning\n1. Drop duplicates based on title","329a56b4":"1. Firstly to get the Service with the most content.","a08f622c":"# Plotting\n\n","93c66439":"3. Scatter plot between IMDB and Rotten tomatoes ratings to get the streaming service that has best of both worlds."}}