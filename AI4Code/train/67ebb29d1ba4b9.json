{"cell_type":{"78b58882":"code","d09a7cf3":"code","ed762fe8":"code","42d78ac3":"code","f44f05da":"code","aae94782":"code","24b72d0f":"code","e97b9166":"code","d10adb2f":"code","42d4b171":"code","f5fae167":"code","22eaf31f":"code","301860d6":"code","b1ada06d":"code","ca7d8cad":"code","b2d6d2dd":"code","bd1e9921":"code","6baa61eb":"code","c72c6dbb":"code","6866a923":"code","79509372":"code","227aaad1":"code","3ce0f294":"code","c3308d5f":"code","11502ad7":"code","17285fd1":"code","b9ed3075":"code","f6dddd44":"code","8f1494f3":"code","3e8cd944":"code","eee70181":"code","81b92edb":"code","40164cd8":"code","61736100":"code","c807dbc8":"code","77b469c4":"code","4b646640":"code","c89ead55":"markdown","a39183c5":"markdown","77bd5d82":"markdown"},"source":{"78b58882":"import tensorflow as tf\nimport pandas as pd\nimport random\n\nseed = 52\nrandom.seed(seed)\ntf.random.set_seed(seed)\n\ntf.__version__","d09a7cf3":"data_df = pd.read_csv('\/kaggle\/input\/kdd-cup-1999-data\/kddcup.data_10_percent_corrected', header=None)","ed762fe8":"data_df.columns = [\n    'duration',\n    'protocol_type',\n    'service',\n    'flag',\n    'src_bytes',\n    'dst_bytes',\n    'land',\n    'wrong_fragment',\n    'urgent',\n    'hot',\n    'num_failed_logins',\n    'logged_in',\n    'num_compromised',\n    'root_shell',\n    'su_attempted',\n    'num_root',\n    'num_file_creations',\n    'num_shells',\n    'num_access_files',\n    'num_outbound_cmds',\n    'is_host_login',\n    'is_guest_login',\n    'count',\n    'srv_count',\n    'serror_rate',\n    'srv_serror_rate',\n    'rerror_rate',\n    'srv_rerror_rate',\n    'same_srv_rate',\n    'diff_srv_rate',\n    'srv_diff_host_rate',\n    'dst_host_count',\n    'dst_host_srv_count',\n    'dst_host_same_srv_rate',\n    'dst_host_diff_srv_rate',\n    'dst_host_same_src_port_rate',\n    'dst_host_srv_diff_host_rate',\n    'dst_host_serror_rate',\n    'dst_host_srv_serror_rate',\n    'dst_host_rerror_rate',\n    'dst_host_srv_rerror_rate',\n    'outcome'\n]","42d78ac3":"data_df.sample(10)","f44f05da":"data_df.outcome.value_counts()","aae94782":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ndata_df[['outcome']] = label_encoder.fit_transform(data_df[['outcome']])","24b72d0f":"data_df.info()","e97b9166":"assert 1 == len(data_df.num_outbound_cmds.unique())  # only one unique value, so drop it\ndata_df.drop('num_outbound_cmds', axis='columns', inplace=True)","d10adb2f":"data_df.isna().sum()","42d4b171":"from sklearn.model_selection import train_test_split\ntrain_df, test_df = train_test_split(data_df, test_size=0.2, random_state=seed, stratify=data_df['outcome'])\nprint(train_df.shape)\nprint(test_df.shape)","f5fae167":"train_df.outcome.value_counts()","22eaf31f":"test_df.outcome.value_counts()","301860d6":"def df_to_dataset(dataframe, shuffle=True, batch_size=32):\n  dataframe = dataframe.copy()\n  labels = dataframe.pop('outcome')\n  ds = tf.data.Dataset.from_tensor_slices((dict(dataframe), labels))\n  if shuffle:\n    ds = ds.shuffle(buffer_size=1024)\n  ds = ds.batch(batch_size).prefetch(tf.data.experimental.AUTOTUNE)\n  return ds","b1ada06d":"for column in data_df.columns:\n  print(column + ': ' + str(data_df[column].nunique()))","ca7d8cad":"from tensorflow import feature_column\n\nfeature_columns = []\n\n# numeric cols\nfor column in ['duration','src_bytes','dst_bytes','wrong_fragment','urgent','hot',\n               'num_failed_logins','num_compromised','num_root','num_file_creations',\n               'num_shells','num_access_files','count','srv_count','serror_rate',\n               'srv_serror_rate','rerror_rate','srv_rerror_rate','same_srv_rate',\n               'diff_srv_rate','srv_diff_host_rate','dst_host_count','dst_host_srv_count',\n               'dst_host_same_srv_rate','dst_host_diff_srv_rate','dst_host_same_src_port_rate',\n               'dst_host_srv_diff_host_rate','dst_host_serror_rate','dst_host_srv_serror_rate',\n               'dst_host_rerror_rate','dst_host_srv_rerror_rate']:\n  feature_columns.append(feature_column.numeric_column(column))\n\n# indicator_columns\nindicator_column_names = ['protocol_type', 'service', 'flag', 'land', 'logged_in', \n                          'root_shell', 'su_attempted', 'is_host_login', 'is_guest_login']\nfor col_name in indicator_column_names:\n  categorical_column = feature_column.categorical_column_with_vocabulary_list(\n      col_name, data_df[col_name].unique())\n  indicator_column = feature_column.indicator_column(categorical_column)\n  feature_columns.append(indicator_column)","b2d6d2dd":"feature_layer = tf.keras.layers.DenseFeatures(feature_columns)","bd1e9921":"batch_size = 128\ntrain_ds = df_to_dataset(train_df, batch_size=batch_size)\ntest_ds = df_to_dataset(test_df, shuffle=False, batch_size=batch_size)","6baa61eb":"from tensorflow.keras.layers import Dense\n\ndef create_model():\n  tf.keras.backend.clear_session()\n  model = tf.keras.Sequential([\n    feature_layer,\n    Dense(256, activation='relu'),\n    Dense(128, activation='relu'),\n    Dense(64, activation='relu'),\n    Dense(23, activation='softmax')\n  ])\n\n  model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['acc'])\n  return model\n\nmodel = create_model()","c72c6dbb":"filepath = 'model.h5'\n\nmc = tf.keras.callbacks.ModelCheckpoint(filepath, monitor='val_loss', save_best_only=True, \n                                        save_weights_only=True, mode='auto')\n\nes = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10, verbose=1, mode='auto')\n\nhistory = model.fit(train_ds, epochs=200, validation_data=test_ds, callbacks=[mc, es])","6866a923":"model.load_weights('model.h5')\nmodel.evaluate(test_ds)","79509372":"import numpy as np\ny_preds = model.predict(test_ds, verbose=1)\nprint(y_preds.shape)\ny_preds = np.argmax(y_preds, axis=1)\nfrom sklearn.metrics import classification_report\ny_true = test_df['outcome']\nprint(classification_report(y_true, y_preds))","227aaad1":"from sklearn.utils import class_weight\nclass_weights = class_weight.compute_class_weight('balanced', np.unique(train_df['outcome']), train_df['outcome'])\nclass_weights","3ce0f294":"class_keys = np.unique(train_df['outcome'])\nclass_keys","c3308d5f":"class_weight_dict = dict(zip(class_keys,class_weights))","11502ad7":"model = create_model()","17285fd1":"filepath = 'model.h5'\n\nmc = tf.keras.callbacks.ModelCheckpoint(filepath, monitor='val_loss', save_best_only=True, \n                                        save_weights_only=True, mode='auto')\n\nes = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10, verbose=1, mode='auto')\n\nhistory = model.fit(train_ds, epochs=200, validation_data=test_ds, callbacks=[mc, es], class_weight=class_weight_dict)","b9ed3075":"model.load_weights('model.h5')\nmodel.evaluate(test_ds)","f6dddd44":"y_preds = model.predict(test_ds, verbose=1)\ny_preds = np.argmax(y_preds, axis=1)\ny_true = test_df['outcome']\nprint(classification_report(y_true, y_preds))","8f1494f3":"label_encoder.classes_[11]","3e8cd944":"train_df.loc[(train_df.outcome != 11),'outcome'] = 1\ntrain_df.loc[(train_df.outcome == 11),'outcome'] = 0\ntest_df.loc[(test_df.outcome != 11),'outcome'] = 1\ntest_df.loc[(test_df.outcome == 11),'outcome'] = 0","eee70181":"train_df.outcome.value_counts()","81b92edb":"train_ds = df_to_dataset(train_df, batch_size=batch_size)\ntest_ds = df_to_dataset(test_df, shuffle=False, batch_size=batch_size)","40164cd8":"tf.keras.backend.clear_session()\nmodel = tf.keras.Sequential([\n  feature_layer,\n  Dense(256, activation='relu'),\n  Dense(128, activation='relu'),\n  Dense(64, activation='relu'),\n  Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=[tf.keras.metrics.AUC()])","61736100":"filepath = 'model.h5'\n\nmc = tf.keras.callbacks.ModelCheckpoint(filepath, monitor='val_loss', save_best_only=True, \n                                        save_weights_only=True, mode='auto')\n\nes = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10, verbose=1, mode='auto')\n\nhistory = model.fit(train_ds, epochs=200, validation_data=test_ds, callbacks=[mc, es])","c807dbc8":"model.load_weights('model.h5')\nmodel.evaluate(test_ds)","77b469c4":"y_preds = model.predict(test_ds, verbose=1)\ny_preds\ny_preds[y_preds > 0.5] = 1\ny_preds[y_preds <= 0.5] = 0\ny_true = test_df['outcome']\nprint(classification_report(y_true, y_preds))","4b646640":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_true, y_preds))","c89ead55":"Intrusion Detection using KDD1999 data.","a39183c5":"# Binary Classification","77bd5d82":"# Class Weights"}}