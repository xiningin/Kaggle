{"cell_type":{"ae5017bb":"code","0ca47047":"code","495a0670":"code","a160afb2":"code","6225d94a":"code","c4e11b1a":"code","b90ec244":"code","e70f64fc":"code","1afe6419":"code","d1d30fba":"code","07dfc9ca":"code","25a94fd0":"code","619a2afe":"code","4e0d6576":"code","82179d53":"code","9a319f43":"code","cba2a956":"code","4384fdb3":"code","6ac17e6a":"code","e242a4c1":"markdown"},"source":{"ae5017bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n#load packages\nimport sys #access to system parameters https:\/\/docs.python.org\/3\/library\/sys.html\nprint(\"Python version: {}\". format(sys.version))\n\nimport pandas as pd #collection of functions for data processing and analysis modeled after R dataframes with SQL like features\nprint(\"pandas version: {}\". format(pd.__version__))\n\nimport matplotlib #collection of functions for scientific and publication-ready visualization\nprint(\"matplotlib version: {}\". format(matplotlib.__version__))\n\nimport numpy as np #foundational package for scientific computing\nprint(\"NumPy version: {}\". format(np.__version__))\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0ca47047":"pdf_train = pd.read_json(\"\/kaggle\/input\/whats-cooking-kernels-only\/train.json\")\npdf_test = pd.read_json(\"\/kaggle\/input\/whats-cooking-kernels-only\/test.json\")","495a0670":"pdf_train.head()","a160afb2":"pdf_test.head()","6225d94a":"total = pdf_train.isnull().sum().sort_values(ascending = False)\npercent = (pdf_train.isnull().sum()\/pdf_train.isnull().count()*100).sort_values(ascending = False)\nmissing_train_data  = pd.concat([total, percent], axis=1, keys=['Total missing', 'Percent missing'])\nmissing_train_data.head(20)","c4e11b1a":"type(pdf_train.ingredients[0])","b90ec244":"def print_iterator(it):\n    for x in it:\n        print(x, end=' ')\n    print('')  # for new line","e70f64fc":"print_iterator(map(lambda x : x*2, [1, 2, 3, 4]))","1afe6419":"feature_set  = set()","d1d30fba":"set(map(lambda x : x*2, [1, 1, 3, 1])).union(feature_set)","07dfc9ca":"pdf_train.ingredients[0:3]","25a94fd0":"#pdf_train.ingredients[0:3].apply(lambda x: map(lambda x: x.replace('[','').replace(']','').split(','), x)).apply(lambda y: print_iterator(y))\n# no need to do this as it's a list and not a string","619a2afe":"# the above code cannot work with Series\npdf_train.ingredients[0:3].apply(lambda x: print(x))","4e0d6576":"# adding all the ingredients to a singular set to find unique ingredients in the data set\npdf_train.ingredients.apply(lambda x: feature_set.update(set(x)))","82179d53":"len(feature_set)","9a319f43":"# creating columns for each feature_set\nfor val in feature_set: \n    pdf_train[val] = 0","cba2a956":"def assign_onehot_encoding(x):\n    for val in x:\n        pdf_train[x] = 1","4384fdb3":"# setting appropriate values in each row to 1\npdf_train.ingredients.apply(lambda x: assign_onehot_encoding(x))","6ac17e6a":"pdf_train.head(3)","e242a4c1":"**Missing data**"}}