{"cell_type":{"1b5a9973":"code","c85c16e9":"code","6e30fb80":"code","038b2288":"code","df2509ed":"code","6373c480":"code","c3a61ce9":"code","e24adc35":"code","409ea15c":"code","2462b630":"code","82b9f448":"code","e830c16f":"code","52a859e6":"code","8fd6a4ec":"code","415abd45":"code","49ff1935":"code","e9ede84a":"code","c9939f09":"code","a334f310":"code","95113353":"code","69428b74":"code","79b61f9d":"code","eee004ac":"code","5e696485":"code","cdba74f3":"code","e6d64379":"markdown","ea1d8213":"markdown","5cadd591":"markdown","6a5d2c52":"markdown","bd1109c1":"markdown","506d7daf":"markdown","b6cfce0f":"markdown","b8a1d44e":"markdown","8b91ddc5":"markdown","f84be2fd":"markdown","d489e475":"markdown","b3c0850c":"markdown","202203e0":"markdown","687cec79":"markdown","18f4ec96":"markdown","22a9d523":"markdown","f5015b82":"markdown","a2c311d2":"markdown"},"source":{"1b5a9973":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\ndf = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv', skiprows=1)\ndf[df.columns[3]].replace({'United Kingdom of Great Britain and Northern Ireland':'UK',\n                           'Iran, Islamic Republic of...':'Iran',\n                           'United Arab Emirates':'UAE',\n                           'United States of America':'USA',\n                           'Viet Nam':'Vietnam'}, inplace=True)\n\nprint(f\"List of countries:\\n{np.sort(df[df.columns[3]].unique())}\\n\")","c85c16e9":"# Select a country from the list above\ncountry = 'Tunisia'","6e30fb80":"if country not in df[df.columns[3]].unique():\n    raise ValueError(f'{country} not found in the list')","038b2288":"fig = px.pie(df, df.columns[3], \n       title=f\"{len(df[df[df.columns[3]]==country])*100\/len(df):.2f}% of all survey respondents are from {country}\", \n       hole=0.6)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()","df2509ed":"fig = px.pie(df, df.columns[1], title='56% of all Kagglers are less than 30 years old', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\nage_pct = len(df[(df[df.columns[3]]==country) & (df[df.columns[1]].isin(['18-21','22-24','25-29']))])*100\/len(df[df[df.columns[3]]==country])\nif age_pct < 56:\n    title = f\"{country} is older, with {age_pct:.0f}% of Kagglers being under under 30\"\nelif age_pct > 56:\n    title = f\"{country} is younger, with {age_pct:.0f}% of Kagglers being under under 30\"\nelse:\n    title = f\"{age_pct:.0f}% of Kagglers from {country} are also under 30\"\nfig = px.pie(df[df[df.columns[3]]==country], df.columns[1], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\ndf['age1'] = df.iloc[:,1].str.split('-').str[0]\ndf['age1'].replace('70+','70', inplace=True)\ndf['age2'] = df.iloc[:,1].str.split('-').str[1]\ndf['age1'] = df.age1.astype('int')\ndf.age2.fillna(70, inplace=True)\ndf['age2'] = df.age2.astype('int')\ndf['age'] = (df.age1+df.age2)\/2\n\ndf['country_agg'] = np.where(df[df.columns[3]]==country,country,'Others')\n\nglobal_median = df.age.mean()\ncountry_median = df[df.country_agg==country].age.mean()\n\nif country_median <= global_median:\n    title = f\"With an average age of {country_median:.0f},<br>Kagglers from {country} are generally {global_median - country_median:.0f} years younger than the average Kaggler\"\nelse:\n    title = f\"With an average age of {country_median:.0f},<br>Kagglers from {country} are generally {country_median - global_median:.0f} years younger than the average Kaggler\"\n\nloc = df.groupby(df.columns[3]).age.mean().sort_values(ascending=False).index.to_list().index(country)\ncolor = ['#636EFA']*len(df.groupby(df.columns[3]).age.mean().sort_values(ascending=False).index)\ncolor[loc] = 'orange'\n\nfig = go.Figure(data=[go.Bar(x=df.groupby(df.columns[3]).age.mean().sort_values(ascending=False).index\n       , y=df.groupby(df.columns[3]).age.mean().sort_values(ascending=False)\n            , marker_color=color)])\n\nfig.update_layout(\n    shapes=[\n    dict(\n      type= 'line',\n      yref= 'y', y0= global_median, y1= global_median,\n      xref= 'x', x0= -0.5, x1= len(df.groupby(df.columns[3]).age)-0.5\n    )],\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Age')\n\nfig.add_annotation(x=len(df.groupby(df.columns[3]).age)*0.95, y=global_median, xshift=-20, yshift=10,\n            text=\"Global Average\",\n            showarrow=False)\nfig.show()\n\nfig = go.Figure(data=[\n    go.Bar(name=country, y=df[df.country_agg==country][df.columns[1]].value_counts(normalize=True).sort_index()*100),\n    go.Bar(name='Others', y=df[df.country_agg=='Others'][df.columns[1]].value_counts(normalize=True).sort_index()*100)\n])\n\n# Change the bar mode\nfig.update_layout(\n    barmode='group',\n    title=f'Age distribution of Kagglers from {country} compared to others',\n    xaxis_title='Age',\n    yaxis_title='Percentage of respondents',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(12)],\n        ticktext = df[df.columns[1]].sort_values().unique()\n    )\n)\n\nfig.show()","6373c480":"print(f\"Genders reported by survey respondents from {country}: {set(df[df.iloc[:,3]==country][df.columns[2]])}\")","c3a61ce9":"# Select the gender you would like to see detailed stats about\ngender = 'Nonbinary'","e24adc35":"gndr_pct = len(df[df[df.columns[2]]==gender])*100\/len(df)\nfig = px.pie(df, df.columns[2], title=f\"{gndr_pct:.2f}% of all survey respondents identified as '{gender}'\", hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n    \ndf_all = df.groupby(df.columns[3])[df.columns[2]].value_counts().groupby(level=0).apply(lambda x: 100 * x \/ float(x.sum()))[:,gender].sort_values(ascending=False)\n\nif country in df_all.index:\n    country_avg = df_all[country]\n    global_avg = len(df[df[df.columns[2]]==gender])*100\/len(df)\n\n    if country_avg > global_avg:\n        title=f\"In {country}, this percentage increases to {country_avg:.2f}%\"\n    else:\n        title=f\"In {country}, this percentage decreases to {country_avg:.2f}%\"\n\n    loc = df_all.index.to_list().index(country)\n    color = ['#636EFA']*len(df_all.index)\n    color[loc] = 'orange'\n\n    fig = go.Figure(data=[go.Bar(x=df_all.index, y=df_all.values, marker_color=color)])\n    fig.update_layout(\n        shapes=[\n            dict(\n              type= 'line',\n              yref= 'y', y0= global_avg, y1= global_avg,\n              xref= 'x', x0= -0.5, x1= len(df_all.index)-0.5\n            )],\n        title=title,\n        xaxis_title=None,\n        yaxis_title='Percentage')\n    fig.add_annotation(x=len(df_all.index)*0.95, y=global_avg, xshift=-20, yshift=10,\n                text=\"Global Average\",\n                showarrow=False)\n    fig.show()\n\n    categories = sorted(df.iloc[:,2].unique())\n    df_country_gender = df[df.country_agg==country].iloc[:,2].value_counts(normalize=True).sort_index()\n    df_other_platform = df[df.country_agg=='Others'].iloc[:,2].value_counts(normalize=True).sort_index()\n\n    fig = go.Figure(data=[\n        go.Bar(name=country, x=categories, y=df_country_gender.values*100),\n        go.Bar(name='Others', x=categories, y=df_other_platform.values*100)\n    ])\n    # Change the bar mode\n    fig.update_layout(\n        title=f'Gender of respondents from {country} compared to Other countries',\n        xaxis_title=None,\n        yaxis_title='Percentage',\n        xaxis={'categoryorder':'array',\n               'categoryarray':categories}\n    )\n    fig.show()\n\nelse:\n    print(f\"Nobody from {country} identified as {gender}\")","409ea15c":"df_academic = df[(df[df.columns[4]]!='I prefer not to answer') & (~df[df.columns[4]].isna())]\n\nfig = px.pie(df_academic, df_academic.columns[4], \n             title=\"Surprisingly, globally more Kagglers reported having a Master's degree (41%)<br>than a Bachelor's (36%)\", hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\nmost_comm = df_academic[df_academic.iloc[:,3]==country].iloc[:,4].value_counts(normalize=True)[[0]]\nif most_comm.index[0] == \"Master's degree\":\n    title = f\"The same trend is observed in {country},<br>with {most_comm[0]*100:.0f}% respondents reporting having a Master's degree\"\nelse:\n    title = f\"However, in the case of {country},<br>more respondents reported having a {most_comm.index[0]} at {most_comm[0]*100:.0f}%\"\n    \nfig = px.pie(df_academic[df_academic.iloc[:,3]==country], df_academic.columns[4], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\ncategories = ['No formal education past high school',\n             'Some college\/university study without earning a bachelor\u2019s degree',\n             'Professional degree',\n             'Bachelor\u2019s degree',\n             'Master\u2019s degree',\n             'Doctoral degree']\n\ndf_country_agg = df[df.country_agg==country].iloc[:,4].value_counts(normalize=True)\ndf_country_agg.index = pd.Categorical(df_country_agg.index, categories)\ndf_country_agg.sort_index(inplace=True)\n\ndf_others_agg = df[df.country_agg=='Others'].iloc[:,4].value_counts(normalize=True)\ndf_others_agg.index = pd.Categorical(df_others_agg.index, categories)\ndf_others_agg.sort_index(inplace=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=country, x=categories, y=df_country_agg.values*100),\n    go.Bar(name='Others', x=categories, y=df_others_agg.values*100)\n])\n# Change the bar mode\nfig.update_layout(\n    title=f'Academic Qualification of respondents from {country} compared to Other countries',\n    xaxis_title=None,\n    yaxis_title='Percentage'\n)\nfig.show()","2462b630":"df_job = df[~df[df.columns[5]].isna()]\n\nfig = px.pie(df_job, df_job.columns[5], title='Globally, 27% Kagglers are students, followed by 14% being Data Scientists', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\ndf_country_job = df_job[df_job.iloc[:,3]==country].iloc[:,5].value_counts(normalize=True)\ncom_job = df_country_job[[0]].index[0]\nif com_job=='Student':\n    title = f\"For {country} too, most Kagglers are {com_job}s ({df_country_job[0]*100:.0f}%), followed by {df_country_job[[1]].index[0]}s ({df_country_job[1]*100:.0f}%)\"\nelse:\n    title = f\"However, for {country}, most Kagglers are {com_job}s ({df_country_job[0]*100:.0f}%), followed by {df_country_job[[1]].index[0]}s ({df_country_job[1]*100:.0f}%)\"\n\nfig = px.pie(df_job[df_job.iloc[:,3]==country], df_job.columns[5], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()","82b9f448":"print(f\"Job titles reported by survey respondents from {country}: {set(df_job[df_job.iloc[:,3]==country][df_job.columns[5]])}\")","e830c16f":"# Enter the job-title you want to compare on\njob = \"Currently not employed\"","52a859e6":"df_all = df.groupby(df.columns[3])[df.columns[5]].value_counts().groupby(level=0).apply(lambda x: 100 * x \/ float(x.sum()))[:,job].sort_values(ascending=False)\ncountry_avg = df_all[country]\nglobal_avg = len(df[df[df.columns[5]]==job])*100\/len(df)\n\nloc = df_all.index.to_list().index(country)\ncolor = ['#636EFA']*len(df_all.index)\ncolor[loc] = 'orange'\n\nfig = go.Figure(data=[go.Bar(x=df_all.index, y=df_all.values, marker_color=color)])\n\nfig.update_layout(\n    shapes=[\n    dict(\n      type= 'line',\n      yref= 'y', y0= global_avg, y1= global_avg,\n      xref= 'x', x0= -0.5, x1= len(df_all.index)-0.5\n    )],\n    title=f\"{country_avg:.0f}% of Kagglers from {country} reported their job-title as \\'{job}\\',<br>compared to the global average of {global_avg:.0f}%\",\n    xaxis_title=None,\n    yaxis_title='Percentage',)\n\nfig.add_annotation(x=len(df_all.index), y=global_avg, xshift=-60, yshift=10,\n            text=\"Global Average\",\n            showarrow=False)\n\nfig.show()","8fd6a4ec":"df_coding = df[~df[df.columns[6]].isna()]\n\nfig = px.pie(df_coding, df_coding.columns[6], title='65% of all survey respondents have been coding for less than 5 years', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\nfig = px.pie(df_coding[df_coding[df_coding.columns[3]]==country], df_coding.columns[6], \n             title=f\"{len(df_coding[(df_coding[df_coding.columns[3]]==country) & (df_coding[df_coding.columns[6]].isin(['3-5 years','< 1 years','1-2 years']))])*100\/len(df_coding[df_coding[df_coding.columns[3]]==country]):.0f}% \\\nof survey respondents from {country} have been coding for less than 5 years\", hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\ncategories = ['I have never written code','< 1 years','1-2 years','3-5 years','5-10 years','10-20 years','20+ years']\n\ndf_country_agg = df[df.country_agg==country].iloc[:,6].value_counts(normalize=True)\ndf_country_agg.index = pd.Categorical(df_country_agg.index, categories)\ndf_country_agg.sort_index(inplace=True)\n\ndf_others_agg = df[df.country_agg=='Others'].iloc[:,6].value_counts(normalize=True)\ndf_others_agg.index = pd.Categorical(df_others_agg.index, categories)\ndf_others_agg.sort_index(inplace=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=country, x=categories, y=df_country_agg.values*100),\n    go.Bar(name='Others', x=categories, y=df_others_agg.values*100)\n])\n# Change the bar mode\nfig.update_layout(\n    title=f'Coding Experience of respondents from {country} compared to Other countries',\n    xaxis_title=None,\n    yaxis_title='Percentage'\n)\nfig.show()","415abd45":"programming_cols = [col for col in df.columns \n                    if 'What programming languages do you use on a regular basis?' in col]\ndf_programming = df.copy()\nmapper = [col.split('-')[-1].lstrip() for col in programming_cols]\nmapping_dict = dict(zip(programming_cols,mapper))\ndf_programming = df_programming[programming_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_programming.dropna(how='all', subset=mapper, inplace=True)\ndf_programming.drop(columns=[\"None\"], inplace=True)\n\nfig = px.bar(df_programming[df_programming.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'87% of all respondents use Python on a regular basis',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_programming[df_programming.iloc[:,-1]==country][df_programming.columns[:-2]].count().sort_values(ascending=False)\npop_lang = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_programming[df_programming.iloc[:,-1]==country])\nif pop_lang=='Python':\n    if most_pop_pct > 87:\n        title = f'{pop_lang} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_lang} remains the most popular programming language in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_lang} is more popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_programming[df_programming.iloc[:,-1]==country][df_programming.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","49ff1935":"ide_cols = [col for col in df.columns \n            if \"Which of the following integrated development environments (IDE's) do you use on a regular basis?\" in col]\ndf_ide = df.copy()\nmapper = [col.split('-')[-1].lstrip() for col in ide_cols]\nmapping_dict = dict(zip(ide_cols,mapper))\ndf_ide = df_ide[ide_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_ide.dropna(how='all', subset=mapper, inplace=True)\ndf_ide.drop(columns=['Click to write Choice 13','None'], inplace=True)\ndf_ide.rename(columns={'Jupyter (JupyterLab, Jupyter Notebooks, etc) ':'Jupyter'}, inplace=True)\n\nfig = px.bar(df_ide[df_ide.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'64% of all respondents use Jupyter',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_ide[df_ide.iloc[:,-1]==country][df_ide.columns[:-2]].count().sort_values(ascending=False)\npop_ide = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_ide[df_ide.iloc[:,-1]==country])\nif pop_ide=='Jupyter':\n    if most_pop_pct > 64:\n        title = f'{pop_ide} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_ide} remains the most popular IDE in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_ide} is more,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_ide[df_ide.iloc[:,-1]==country][df_ide.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","e9ede84a":"nb_cols = [col for col in df.columns \n           if \"Which of the following hosted notebook products do you use on a regular basis?\" in col]\ndf_nb = df.copy()\nmapper = [col.split('-')[-1].lstrip() for col in nb_cols]\nmapping_dict = dict(zip(nb_cols,mapper))\ndf_nb = df_nb[nb_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_nb.dropna(how='all', subset=mapper, inplace=True)\ndf_nb.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_nb[df_nb.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'37% of all respondents use Colab Notebooks',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_nb[df_nb.iloc[:,-1]==country][df_nb.columns[:-2]].count().sort_values(ascending=False)\npop_nb = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_nb[df_nb.iloc[:,-1]==country])\nif pop_nb=='Colab Notebooks':\n    if most_pop_pct > 37:\n        title = f'{pop_nb} are even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\n    else:\n        title = f'{pop_nb} remain the most popular hosted notebooks in {country} too,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_nb} are more popular,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis\"\n\nfig = px.bar(df_nb[df_nb.iloc[:,-1]==country][df_nb.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","c9939f09":"df_platform = df[(~df.iloc[:,47].isna()) & (df.iloc[:,47]!='None')]\n\nfig = px.pie(df_platform, df_platform.columns[47], \n             title=f\"80% of all survey respondents use a Personal Computer\/Laptop as their primary computing platform for DS projects\", hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\ndf_country_platform = df_platform[df_platform.iloc[:,3]==country][df.columns[47]].value_counts(normalize=True)*100\n\ncountry_avg = df_country_platform.loc['A personal computer or laptop']\n\nif country_avg > 80:\n    title=f\"In {country}, this percentage increases to {country_avg:.0f}%\"\nelse:\n    title=f\"In {country}, this percentage decreases to {country_avg:.0f}%\"\n    \nfig = px.pie(df_country_platform, df_country_platform.index, df_country_platform.values, title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\ncategories = ['A cloud computing platform', 'A deep learning workstation', 'A personal computer or laptop', 'Other']\ndf_country_platform = df_platform[df_platform.country_agg==country].iloc[:,47].value_counts(normalize=True).sort_index()\ndf_other_platform = df_platform[df_platform.country_agg=='Others'].iloc[:,47].value_counts(normalize=True).sort_index()\n\nfig = go.Figure(data=[\n    go.Bar(name=country, x=categories, y=df_country_platform.values*100),\n    go.Bar(name='Others', x=categories, y=df_other_platform.values*100)\n])\n# Change the bar mode\nfig.update_layout(\n    title=f'Coding Platform preference of Kagglers from {country} compared to others',\n    xaxis_title=None,\n    yaxis_title='Percentage',\n    xaxis={'categoryorder':'array',\n           'categoryarray':categories}\n)\nfig.show()","a334f310":"viz_cols = [col for col in df.columns \n           if \"What data visualization libraries or tools do you use on a regular basis?\" in col]\ndf_viz = df.copy()\nmapper = [col.split('-')[-1].strip() for col in viz_cols]\nmapping_dict = dict(zip(viz_cols,mapper))\ndf_viz = df_viz[viz_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_viz.dropna(how='all', subset=mapper, inplace=True)\ndf_viz.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_viz[df_viz.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'75% of all respondents use Matplotlib',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_viz[df_viz.iloc[:,-1]==country][df_viz.columns[:-2]].count().sort_values(ascending=False)\npop_viz = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_viz[df_viz.iloc[:,-1]==country])\nif pop_viz=='Matplotlib':\n    if most_pop_pct > 75:\n        title = f'{pop_viz} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_viz} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_viz} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_viz[df_viz.iloc[:,-1]==country][df_viz.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","95113353":"ml_cols = [col for col in df.columns \n           if \"Which of the following machine learning frameworks do you use on a regular basis?\" in col]\ndf_ml = df.copy()\nmapper = [col.split('-')[-1].strip() for col in ml_cols]\nmapper[0]='Scikit-learn'\nmapping_dict = dict(zip(ml_cols,mapper))\ndf_ml = df_ml[ml_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_ml.dropna(how='all', subset=mapper, inplace=True)\ndf_ml.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_ml[df_ml.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'72% of all respondents use Scikit-learn',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_ml[df_ml.iloc[:,-1]==country][df_ml.columns[:-2]].count().sort_values(ascending=False)\npop_ml = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_ml[df_ml.iloc[:,-1]==country])\nif pop_ml=='Scikit-learn':\n    if most_pop_pct > 72:\n        title = f'{pop_ml} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_ml} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_ml} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_ml[df_ml.iloc[:,-1]==country][df_ml.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","69428b74":"ml_cols = [col for col in df.columns \n           if \"Which of the following ML algorithms do you use on a regular basis?\" in col]\ndf_ml = df.copy()\nmapper = [col.split('-')[-1].strip() for col in ml_cols]\nmapper[9]='Transformer Networks (BERT, gpt-3, etc)'\nmapping_dict = dict(zip(ml_cols,mapper))\ndf_ml = df_ml[ml_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_ml.dropna(how='all', subset=mapper, inplace=True)\ndf_ml.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_ml[df_ml.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'76% of all respondents use Linear or Logistic Regression',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_ml[df_ml.iloc[:,-1]==country][df_ml.columns[:-2]].count().sort_values(ascending=False)\npop_ml = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_ml[df_ml.iloc[:,-1]==country])\nif pop_ml=='Linear or Logistic Regression':\n    if most_pop_pct > 76:\n        title = f'{pop_ml} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_ml} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_ml} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_ml[df_ml.iloc[:,-1]==country][df_ml.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","79b61f9d":"cv_cols = [col for col in df.columns \n           if \"Which categories of computer vision methods do you use on a regular basis?\" in col]\ndf_cv = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cv_cols]\nmapping_dict = dict(zip(cv_cols,mapper))\ndf_cv = df_cv[cv_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_cv.dropna(how='all', subset=mapper, inplace=True)\ndf_cv.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_cv[df_cv.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'59% of all respondents use Image classification and other general purpose networks',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_cv[df_cv.iloc[:,-1]==country][df_cv.columns[:-2]].count().sort_values(ascending=False)\npop_cv = country_most_pop.index[0]\nif '(' in pop_cv:\n    pop_cv = pop_cv.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_cv[df_cv.iloc[:,-1]==country])\nif pop_cv=='Image classification and other general purpose networks':\n    if most_pop_pct > 59:\n        title = f'{pop_cv} are even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\n    else:\n        title = f'{pop_cv} remain the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_cv} are popular,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis\"\n\nfig = px.bar(df_cv[df_cv.iloc[:,-1]==country][df_cv.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","eee004ac":"nlp_cols = [col for col in df.columns \n           if \"Which of the following natural language processing (NLP) methods do you use on a regular basis?\" in col]\ndf_nlp = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in nlp_cols]\nmapping_dict = dict(zip(nlp_cols,mapper))\ndf_nlp = df_nlp[nlp_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_nlp.dropna(how='all', subset=mapper, inplace=True)\ndf_nlp.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_nlp[df_nlp.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'55% of all respondents use Word embeddings\/vectors',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_nlp[df_nlp.iloc[:,-1]==country][df_nlp.columns[:-2]].count().sort_values(ascending=False)\npop_nlp = country_most_pop.index[0]\nif '(' in pop_nlp:\n    pop_nlp = pop_nlp.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_nlp[df_nlp.iloc[:,-1]==country])\nif pop_cv=='Word embeddings\/vectors':\n    if most_pop_pct > 55:\n        title = f'{pop_nlp} are even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\n    else:\n        title = f'{pop_nlp} remain the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_nlp} are popular,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis\"\n\nfig = px.bar(df_nlp[df_nlp.iloc[:,-1]==country][df_nlp.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","5e696485":"df_wp_size = df[~df.iloc[:,107].isna()]\n\nfig = px.pie(df_wp_size, df_wp_size.columns[107], title='51% of all Kagglers work in companies with less than 250 employees', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\nsize_pct = len(df_wp_size[(df_wp_size[df_wp_size.columns[3]]==country) & (df_wp_size[df_wp_size.columns[107]].isin(['0-49 employees','50-249 employees']))])*100 \\\n\/len(df_wp_size[df_wp_size[df_wp_size.columns[3]]==country])\ntitle = f\"{size_pct:.0f}% of Kagglers from {country} work in companies with less than 250 employees\"\nfig = px.pie(df_wp_size[df_wp_size[df_wp_size.columns[3]]==country], df_wp_size.columns[107], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\nfig = go.Figure(data=[\n    go.Bar(name=country, y=df_wp_size[df_wp_size.country_agg==country][df_wp_size.columns[107]].value_counts(normalize=True).sort_index()*100),\n    go.Bar(name='Others', y=df_wp_size[df_wp_size.country_agg=='Others'][df_wp_size.columns[107]].value_counts(normalize=True).sort_index()*100)\n])\n\n# Change the bar mode\nfig.update_layout(\n    barmode='group',\n    title=f'Workplace size of Kagglers from {country} compared to others',\n    xaxis_title=None,\n    yaxis_title='Percentage of respondents',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(5)],\n        ticktext = df_wp_size[df_wp_size.columns[107]].sort_values().unique()\n    )\n)\n\nfig.show()","cdba74f3":"df.columns[108:]","e6d64379":"## 11. Data Visualization Library\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>What data visualization libraries or tools do you use on a regular basis?<\/b>'<\/font>","ea1d8213":"# Workplace\n\n## 16. Size\n<font color=red>Only includes respondents who answered the question '<b>What is the size of the company where you are employed?<\/b>'<\/font>","5cadd591":"## 15. NLP Methods\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following natural language processing (NLP) methods do you use on a regular basis?<\/b>'<\/font>","6a5d2c52":"## 9. Hosted Notebooks\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following hosted notebook products do you use on a regular basis?<\/b>'<\/font>","bd1109c1":"## 10. Computing Platform\n\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>What type of computing platform do you use most often for your data science projects?<\/b>'<\/font>","506d7daf":"## 14. Computer Vision Methods\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which categories of computer vision methods do you use on a regular basis?<\/b>'<\/font>","b6cfce0f":"## 8. IDE\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following integrated development environments (IDE's) do you use on a regular basis?<\/b>'<\/font>","b8a1d44e":"## 13. Machine Learning Algorithms\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following ML algorithms do you use on a regular basis?<\/b>'<\/font>","8b91ddc5":"# Objective\n\n## This notebook aims to analyze how Kagglers from Tunisia differ from the average Kaggler\n\n<b>Data Source<\/b>: kaggle_survey_2020_responses.csv\n","f84be2fd":"# Coding preferences\n## 7. Programming language\n<font color=red>Only includes respondents who chose atleast one option for the question \"<b>What programming languages do you use on a regular basis?<\/b>\"<\/font>","d489e475":"## 6. Coding Experience\n<font color=red> Only includes respondents who answered the question \"<b>For how many years have you been writing code and\/or programming?<\/b>\" <\/font>","b3c0850c":"## 5. Job title\n<font color=red> Only includes respondents who answered the question \"<b>Select the title most similar to your current role (or most recent title if retired)<\/b>\" <\/font>","202203e0":"## 2. Age","687cec79":"# Background\n## 4. Academic qualification\n<font color=red> Only includes respondents who answered the question \"<b>What is the highest level of formal education that you have attained or plan to attain within the next 2 years?<\/b>\" <\/font> ","18f4ec96":"## 12. Machine Learning Frameworks\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following machine learning frameworks do you use on a regular basis?<\/b>'<\/font>","22a9d523":"# To be continued...\n\nLiked it till here? Please don't forget to <font color=green><b>UPVOTE<\/b><\/font> and suggest what else you would like to see","f5015b82":"# Demographics\n## 1. Country","a2c311d2":"## 3. Gender diversity"}}