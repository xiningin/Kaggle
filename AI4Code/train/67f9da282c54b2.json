{"cell_type":{"610867dc":"code","7f97a907":"code","6036ed97":"code","6d25d677":"code","263954c0":"code","076db81c":"code","3c547851":"code","bd483d07":"code","90aa389e":"code","be0f3ab8":"code","27fe361c":"code","7efbddd8":"code","d1a19291":"code","8ee49b4d":"code","6ff280df":"code","cf5f1e58":"code","52bf9952":"code","ca216ab5":"code","c4ab97d9":"code","10d1e03a":"code","e540d9ed":"code","f2d62d93":"code","2f00f93f":"code","83baac6c":"markdown","d2448122":"markdown"},"source":{"610867dc":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.ensemble import RandomForestClassifier","7f97a907":"df= pd.read_csv('..\/input\/hepatitis-data\/hepatitis_csv.csv')","6036ed97":"print(df.shape)\ndf.head()","6d25d677":"df.info()","263954c0":"df.isna().mean()","076db81c":"{columns : len(df[columns].unique()) for columns in df.select_dtypes('float')}","3c547851":"{columns : len(df[columns].unique()) for columns in df.select_dtypes('int')}","bd483d07":"{columns : len(df[columns].unique()) for columns in df.select_dtypes('object')}","90aa389e":"{columns : len(df[columns].unique()) for columns in df.select_dtypes('bool')}","be0f3ab8":"def preprocess_inputs(df, drop_protime=False):\n    df = df.copy()\n    \n    # Identify the continuous numeric features\n    continuous_features = ['age', 'bilirubin', 'alk_phosphate', 'sgot', 'albumin', 'protime']\n    \n    # Fill missing values\n    for column in continuous_features:\n        df[column] = df[column].fillna(df[column].mean())\n    \n    for column in df.columns.drop(continuous_features):\n        df[column] = df[column].fillna(df[column].mode().sample(1, random_state=1).values[0])\n    \n    # Convert the booleans columns into integer columns\n        for column in df.select_dtypes('bool'):\n            df[column] = df[column].astype(np.int)\n    \n    # Encode the sex column as a binary feature\n    df['sex'] = df['sex'].replace({\n        'female': 0,\n        'male': 1\n    })\n    \n    # Shuffle the data\n    df = df.sample(frac=1.0, random_state=1).reset_index(drop=True)\n    \n    # Change label name\n    df = df.rename(columns={'class': 'label'})\n    \n    # Drop protime\n    if drop_protime == True:\n        df = df.drop('protime', axis=1)\n    \n    # Split df into X and y\n    y = df['label']\n    X = df.drop('label', axis=1)\n    \n    return X, y\n","27fe361c":"X, y = preprocess_inputs(df, drop_protime=True)","7efbddd8":"X.shape","d1a19291":"y","8ee49b4d":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=2)\nkmeans.fit(X)\n\ncluster_labels = kmeans.labels_\ncluster_labels","6ff280df":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\n\nX_reduced = pd.DataFrame(pca.fit_transform(X), index=X.index, columns=[\"PC1\", \"PC2\"])\nX_reduced = pd.concat([X_reduced, y, pd.Series(cluster_labels, name='cluster')], axis=1)\n\ncentroids = pca.transform(kmeans.cluster_centers_)","cf5f1e58":"X_reduced","52bf9952":"kmeans.cluster_centers_","ca216ab5":"centroids = pca.transform(kmeans.cluster_centers_)","c4ab97d9":"Cluster_ex_0 = X_reduced.query('cluster == 0')\nCluster_ex_1 = X_reduced.query('cluster == 1')","10d1e03a":"from matplotlib import pyplot as plt\n\nCluster_ex_0 = X_reduced.query('cluster == 0')\nCluster_ex_1 = X_reduced.query('cluster == 1')\n\nplt.figure(figsize=(16,10))\nplt.scatter(Cluster_ex_0['PC1'], Cluster_ex_0['PC2'], label = 'clusterA')\nplt.scatter(Cluster_ex_1['PC1'], Cluster_ex_1['PC2'], label = 'clusterB')\nplt.scatter(centroids[:,0], centroids[:,1], s =200, c='black')\nplt.legend()\n\n","e540d9ed":"live_examples = X_reduced.query(\"label == 'live'\")\ndie_examples = X_reduced.query(\"label == 'die'\")\n\n\nplt.figure(figsize=(16, 10))\nplt.scatter(live_examples['PC1'], live_examples['PC2'], c='pink', label=\"Live\")\nplt.scatter(die_examples['PC1'], die_examples['PC2'], c='purple', label=\"Die\")\nplt.xlabel(\"PC1\")\nplt.ylabel(\"PC2\")\nplt.title(\"Class Visualization\")\nplt.legend()\nplt.show()","f2d62d93":"# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n\n# Scale X\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\nX_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)","2f00f93f":"model = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\nprint(\"Test Accuracy: {:.2f}%\".format(model.score(X_test, y_test) * 100))","83baac6c":"# Clustering","d2448122":"# Training"}}