{"cell_type":{"af855093":"code","2dcc8cec":"code","3772afb4":"code","095ea11e":"code","a82b4dae":"code","d863f024":"code","398c683f":"code","44164c96":"code","ac73fbd7":"code","116b54a5":"code","95abb11e":"code","8a7505f1":"code","361681f4":"code","75c67898":"code","4717ae16":"code","752029f9":"markdown","ad3ca925":"markdown"},"source":{"af855093":"import pandas as pd\nimport numpy as np","2dcc8cec":"df = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndf.head()\n","3772afb4":"df.isna().sum()","095ea11e":"df.info()","a82b4dae":"df['exng'] = df['exng'].map({1:'yes',0:'no'})\ndf['cp'] = df['cp'].map({0:'typical angina',1:'atypical angina',2:'non-anginal pain',3:'asymptomatic'})\ndf['fbs'] = df['fbs'].map({1:'true',0:'false'})\ndf['restecg'] = df['restecg'].map({0:'normal',1:'having ST-T wave abnormality',2:'showing probable or definite left ventricular hypertrophy'})\ndf['output'] = df['output'].map({0:'less chance of heart attack',1:'more chance of heart attack'})","d863f024":"df.head()","398c683f":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.heatmap(df.corr(),annot=True);\n       ","44164c96":"sns.countplot(x=df[\"output\"],hue=df[\"sex\"]);\nplt.title(\"Comparison on the basis of gender\");","ac73fbd7":"plt.title('Analysis on the basis Chest Pain',fontsize=15)\nsns.countplot(x=df['output'], hue=df['cp']);","116b54a5":"plt.title('Analysis on the basis of number of major vessels',fontsize=15)\nsns.countplot(x=df['output'],hue=df['caa']);\n","95abb11e":"df2 = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndf2.head()","8a7505f1":"from sklearn.model_selection import train_test_split\nX=df2.iloc[:,:-1].values\ny=df2.iloc[:,-1].values\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state = 0)\n","361681f4":"import math\nfrom sklearn.ensemble import RandomForestRegressor as r\nfrom sklearn.linear_model import Ridge,Lasso\nfrom sklearn.preprocessing import PolynomialFeatures as pf\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error\nfrom sklearn.preprocessing import StandardScaler\n\nscaler=StandardScaler()\nX_train=scaler.fit_transform(X_train)\nX_test=scaler.fit_transform(X_test)\n\nridge=Ridge(alpha=0.1,normalize=True)\nlasso=Lasso(alpha=0.1,normalize=True)\nreg = r(n_estimators=100,max_depth=10,n_jobs=-1)\nridge.fit(X_train, y_train)\ny_pred = ridge.predict(X_test)\n\n\nprint(math.sqrt(mean_squared_error(y_pred, y_test)))\nprint(math.sqrt(mean_absolute_error(y_pred, y_test)))","75c67898":"\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n\nmodel=SVC(kernel = 'rbf',C = 1, degree = 5, random_state = 0)","4717ae16":"model.fit(X_train,y_train)\ny_preds=model.predict(X_test)\nacc=accuracy_score(y_test,y_preds)\n\nacc","752029f9":"# Model Buidling","ad3ca925":"# EXPLORATORY DATA ANALYSIS"}}