{"cell_type":{"43ea23f4":"code","f6803f2b":"code","a9c947ea":"code","90740460":"code","f7568bc3":"code","bb2d0201":"code","d5ae8a0a":"code","2bdd7676":"code","304df912":"code","541d1c5f":"code","b8de40d0":"code","739ea5d3":"code","6515e8c6":"code","b854943a":"code","82d53d3c":"code","2c8ce648":"code","f0fda224":"code","52094c0a":"markdown","87386083":"markdown","6096acbc":"markdown","68a05606":"markdown"},"source":{"43ea23f4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f6803f2b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings \nwarnings.filterwarnings('ignore')","a9c947ea":"data=pd.read_csv('\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv')","90740460":"data.head()","f7568bc3":"data.info()","bb2d0201":"color_list = ['red' if i=='Abnormal' else 'green' for i in data.loc[:,'class']]\npd.plotting.scatter_matrix(data.loc[:, data.columns != 'class'],\n                                       c=color_list,\n                                       figsize= [15,15],\n                                       diagonal='hist',\n                                       alpha=0.5,\n                                       s = 200,\n                                       marker = '*',\n                                       edgecolor= \"black\")\nplt.show()","d5ae8a0a":"sns.countplot(data['class'])","2bdd7676":"X=data.drop('class',axis=1)\ny=data['class']","304df912":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.33,random_state=5)","541d1c5f":"from scipy.stats import zscore","b8de40d0":"X_train=X_train.apply(zscore)","739ea5d3":"from sklearn.metrics import accuracy_score,classification_report","6515e8c6":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=18)\nknn.fit(X_train,y_train)","b854943a":"y_pred=knn.predict(X_test)","82d53d3c":"accuracy_score(y_test,y_pred)","2c8ce648":"from sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier()\ndt.fit(X_train,y_train)\ny_pred=dt.predict(X_test)\naccuracy_score(y_test,y_pred)","f0fda224":"# grid search cross validation with 1 hyperparameter\nfrom sklearn.model_selection import GridSearchCV\ngrid = {'n_neighbors': np.arange(1,50)}\nknn = KNeighborsClassifier()\nknn_cv = GridSearchCV(knn, grid, cv=3) # GridSearchCV\nknn_cv.fit(X_train,y_train)# Fit\n\n# Print hyperparameter\nprint(\"Tuned hyperparameter k: {}\".format(knn_cv.best_params_)) \nprint(\"Best score: {}\".format(knn_cv.best_score_))","52094c0a":"# Train Test Data Splitting","87386083":"# K-Nearest Neighbour ","6096acbc":"# Standardisation of the Train Sample ","68a05606":"# Importing Metrices"}}