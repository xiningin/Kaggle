{"cell_type":{"c605f120":"code","2c890562":"code","bd4c6730":"code","aafce765":"code","b7cbd19b":"code","df0dc926":"code","de8c08e6":"code","d999e852":"code","cbe5ba77":"code","2d4e45c6":"code","9ef4ec5d":"code","d5713bd4":"code","5b5eb462":"code","c5f09d43":"code","d6369c6f":"code","0c8cbc9c":"code","bae22ba2":"code","e8381694":"code","3036f424":"code","5e5607b7":"code","937027e2":"code","9da667ba":"code","5aa6bf69":"code","f176b0bf":"code","b2c5cc91":"code","c45565d0":"code","de8cfc89":"code","44adf4c7":"code","16303234":"code","b9c5bf28":"code","455d1910":"code","88b9d331":"code","3b3fa970":"code","3f2c359f":"code","87408514":"markdown","3e84a80d":"markdown","9220d844":"markdown","63684e42":"markdown","76f78e83":"markdown","447d19bd":"markdown","658a0391":"markdown","2e9027e7":"markdown","c9b7fece":"markdown","b2bdc892":"markdown","611bcc3c":"markdown"},"source":{"c605f120":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c890562":"raw_data = pd.read_csv(\"\/kaggle\/input\/apartment-rental-offers-in-germany\/immo_data.csv\")\npd.set_option('display.max_columns', None)","bd4c6730":"raw_data.head()","aafce765":"raw_data.columns","b7cbd19b":"# location data is dropped because plz and coordinates are used\n#  data with lots of NaN is dropped\n\n\ncols_to_keep = [\"regio1\", \"regio2\", \"geo_plz\", \"heatingType\", \"newlyConst\", \"balcony\", \n                \"yearConstructed\", \"cellar\", \"livingSpace\", \"condition\", \"typeOfFlat\",\n                \"noRooms\", \"garden\",\"totalRent\"]\nfiltered_data = raw_data[cols_to_keep]","df0dc926":"filtered_data.head()","de8c08e6":"filtered_data.describe()","d999e852":"# beat RMSE = 260","cbe5ba77":"filtered_data.totalRent.dropna().sort_values().plot.density()","2d4e45c6":"filtered_data.totalRent.dropna().sort_values()[:-10000].plot.density()\n","9ef4ec5d":"filtered_data.totalRent.where(filtered_data.totalRent > 15000).count()","d5713bd4":"filtered_data.count()","5b5eb462":"filtered_data = filtered_data.where(filtered_data.totalRent < 10000)","c5f09d43":"from sklearn.preprocessing import LabelEncoder","d6369c6f":"# plz to coordinate\ngeo_data = pd.read_csv(\"..\/input\/launixplz\/PLZ.csv\", sep=\";\", header=None)#https:\/\/launix.de\/launix\/launix-gibt-plz-datenbank-frei\/\ngeo_data.columns = [\"zip\", \"city\", \"lon\", \"lat\"]\ngeo_data.head()","0c8cbc9c":"enriched_data = pd.merge(filtered_data, geo_data[[\"zip\", \"lon\", \"lat\"]], left_on=\"geo_plz\", right_on=\"zip\",how=\"left\")","bae22ba2":"#1063 Columns have invalid zip-codes (e.g., `22719`) -> dropped\nenriched_data = enriched_data.drop(enriched_data[enriched_data.lon.isnull() == True].index)\nenriched_data = enriched_data.drop(columns=[\"geo_plz\",\"regio1\",\"regio2\", \"zip\"]).reset_index(drop=True)","e8381694":"enriched_data","3036f424":"# One Hot Encode categorical features\n\n#from sklearn.preprocessing import OneHotEncoder\n#onehotencoder = OneHotEncoder()\n#onehotencoding heatingType\n#testweise dropna (ca. 40k lines)\n#enriched_data = enriched_data.drop(enriched_data[enriched_data.heatingType.isnull() == True].index).reset_index(drop=True)\n#heatingType = onehotencoder.fit_transform(enriched_data.heatingType.values.reshape(-1,1)).toarray()","5e5607b7":"# drop rows with NULL Values\nenriched_data = enriched_data.drop(enriched_data[enriched_data.heatingType.isnull() == True].index).reset_index(drop=True)\nenriched_data = enriched_data.drop(enriched_data[enriched_data.condition.isnull() == True].index).reset_index(drop=True)\nenriched_data = enriched_data.drop(enriched_data[enriched_data.typeOfFlat.isnull() == True].index).reset_index(drop=True)","937027e2":"# label encode categorical features\nle = LabelEncoder()\nle.fit(enriched_data.heatingType.unique()) #fitting to heatingType -> raises error because of nan\nenriched_data.heatingType = le.transform(enriched_data.heatingType)\nle.fit(enriched_data.condition.unique()) #fitting to condition -> raises error because of nan\nenriched_data.condition = le.transform(enriched_data.condition)\nle.fit(enriched_data.typeOfFlat.unique()) #fitting to type of flat -> raises error because of nan\nenriched_data.typeOfFlat = le.transform(enriched_data.typeOfFlat)","9da667ba":"enriched_data.iloc[[1],[10]].values[0]","5aa6bf69":"enriched_data","f176b0bf":"import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n","b2c5cc91":"enriched_data = enriched_data.drop(enriched_data[enriched_data.totalRent.isna() == True].index).reset_index(drop=True) #drop na totalrent (targetvar)","c45565d0":"X = enriched_data.dropna().drop(columns=[\"totalRent\"])\n# , \"newlyConst\", \"balcony\", \"cellar\", \"garden\"\ny = enriched_data.dropna().totalRent\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=22)","de8cfc89":"X_train","44adf4c7":"y_train.describe()","16303234":"RandFor = RandomForestRegressor(random_state=22)\n\nRandFor.fit(X_train, y_train)","b9c5bf28":"y_pred_rand = RandFor.predict(X_test)","455d1910":"rmse = mean_squared_error(y_test, y_pred_rand, squared=False)\n# square=false so its RMSE and not MSE\nprint(rmse)","88b9d331":"linReg = LinearRegression()\n\nlinReg.fit(X_train, y_train)","3b3fa970":"y_pred_lin = linReg.predict(X_test)","3f2c359f":"rmse = mean_squared_error(y_test, y_pred_lin, squared=False)\nprint(rmse)","87408514":"## Feature Selection","3e84a80d":"## Normalize heatingType, \n(One Hot Encoding and\nNormalize) ","9220d844":"## Init\n\nAttention. There is additonal data needed. Data about the german zip codes from https:\/\/launix.de\/launix\/launix-gibt-plz-datenbank-frei\/ is needed to convert it to lon\/lat.","63684e42":"### Zip Code to Coordinates","76f78e83":"## Modelling","447d19bd":"# German Rental Prices","658a0391":"labelencoding categorical vars","2e9027e7":"### with Linear Regression","c9b7fece":"###  with RandomForrestRegressior","b2bdc892":"adding dummy variable for lastRefurbish to avoid dropna()","611bcc3c":"## Preprocessing"}}