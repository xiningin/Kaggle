{"cell_type":{"3bbb72c2":"code","e8e03290":"code","25bbb862":"code","1470d937":"code","f98cd4f7":"code","683eaca1":"code","5e76329e":"code","9fa694cf":"code","5b88dff3":"code","84f0971e":"code","9beb1508":"code","a62b073c":"code","670cc46c":"code","ff5740b4":"code","e17d0fe5":"code","ac9d24d6":"code","333b327d":"code","e57a336a":"code","9d3c35ef":"code","c0111206":"code","e7dc39cf":"code","f35f008a":"code","016fd36c":"code","a65b7e8d":"code","7334e19c":"code","7eb7ec4c":"code","9e7417e9":"code","bda1da30":"code","08ea983d":"code","89e00eec":"markdown","d1797080":"markdown","1464feae":"markdown","4b09f6ea":"markdown","6237e38c":"markdown","38f42804":"markdown","ea59acca":"markdown","0f8b587f":"markdown","602ef068":"markdown","8d67ea6d":"markdown","8ad04a65":"markdown","8f57b54d":"markdown","54140de7":"markdown","e9c71b38":"markdown","1aceaa2f":"markdown","eb8d2a19":"markdown","871fe0c6":"markdown"},"source":{"3bbb72c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e8e03290":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","25bbb862":"loans = pd.read_csv('..\/input\/loan_borowwer_data.csv')","1470d937":"loans.info()","f98cd4f7":"loans.describe()","683eaca1":"loans.head(2)","5e76329e":"plt.figure(figsize=(10,6))\nloans[loans['credit.policy']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='Credit.Policy=1')\nloans[loans['credit.policy']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='Credit.Policy=0')\nplt.legend()\nplt.xlabel('FICO')","9fa694cf":"plt.figure(figsize=(10,6))\nloans[loans['not.fully.paid']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='not.fully.paid=1')\nloans[loans['not.fully.paid']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='not.fully.paid=0')\nplt.legend()\nplt.xlabel('FICO')","5b88dff3":"plt.figure(figsize=(11,7))\nsns.countplot(x='purpose',hue='not.fully.paid',data=loans,palette='Set1')","84f0971e":"sns.jointplot(x='fico',y='int.rate',data=loans,color='purple')","9beb1508":"plt.figure(figsize=(11,7))\nsns.lmplot(y='int.rate',x='fico',data=loans,hue='credit.policy',\n           col='not.fully.paid',palette='Set1')","a62b073c":"cat_feats = ['purpose']","670cc46c":"final_data = pd.get_dummies(loans,columns=cat_feats,drop_first=True)","ff5740b4":"final_data.info()","e17d0fe5":"from sklearn.model_selection import train_test_split","ac9d24d6":"X = final_data.drop('not.fully.paid',axis=1)\ny = final_data['not.fully.paid']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)","333b327d":"from sklearn.tree import DecisionTreeClassifier","e57a336a":"dtree = DecisionTreeClassifier()\n\ndtree.fit(X_train,y_train)","9d3c35ef":"predictions = dtree.predict(X_test)","c0111206":"from sklearn.metrics import classification_report,confusion_matrix","e7dc39cf":"print(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))","f35f008a":"from sklearn.ensemble import RandomForestClassifier","016fd36c":"rfc = RandomForestClassifier(n_estimators=600)","a65b7e8d":"rfc.fit(X_train,y_train)","7334e19c":"predictions = rfc.predict(X_test)","7eb7ec4c":"from sklearn.metrics import classification_report,confusion_matrix","9e7417e9":"print(classification_report(y_test,predictions))\nprint(classification_report(y_test,predictions))","bda1da30":"print(confusion_matrix(y_test,predictions))","08ea983d":"# Depends what metric you are trying to optimize for. \n# Notice the recall for each class for the models.\n# Neither did very well, more feature engineering is needed.","89e00eec":"**Now create a classification report from the results. Do you get anything strange or some sort of warning?**","d1797080":"## Predictions and Evaluation\n\nLet's predict off the y_test values and evaluate our model.\n\n** Predict the class of not.fully.paid for the X_test data.**","1464feae":"** Create a similar figure, except this time select by the not.fully.paid column.**","4b09f6ea":"Training a Decision Tree Model\n\nLet's start by training a single decision tree first!\n\n** Import DecisionTreeClassifier**\n","6237e38c":"# Exploratory Data Analysis\n\nLet's do some data visualization! We'll use seaborn and pandas built-in plotting capabilities, but feel free to use whatever library you want. Don't worry about the colors matching, just worry about getting the main idea of the plot.\n\n** Create a histogram of two FICO distributions on top of each other, one for each credit.policy outcome.**","38f42804":"** Create a countplot using seaborn showing the counts of loans by purpose, with the color hue defined by not.fully.paid. **","ea59acca":"**What performed better the random forest or the decision tree?**","0f8b587f":"** Create the following lmplots to see if the trend differed between not.fully.paid and credit.policy.**","602ef068":"**Create an instance of DecisionTreeClassifier() called dtree and fit it to the training data.**","8d67ea6d":"## Predictions and Evaluation of Decision Tree\n**Create predictions from the test set and create a classification report and a confusion matrix.**","8ad04a65":"# Random Forest Project - Excersice\n\nBased on the Udemy course \"Data Science and ML Bootcamp\", by Jose Portilla.\n\nFor this project we will be exploring publicly available data from [LendingClub.com](www.lendingclub.com). Lending Club connects people who need money (borrowers) with people who have money (investors). Hopefully, as an investor you would want to invest in people who showed a profile of having a high probability of paying you back. We will try to create a model that will help predict this.\n\nLending club had a [very interesting year in 2016](https:\/\/en.wikipedia.org\/wiki\/Lending_Club#2016), so let's check out some of their data and keep the context in mind. This data is from before they even went public.\n\nWe will use lending data from 2007-2010 and be trying to classify and predict whether or not the borrower paid back their loan in full. You can download the data from [here](https:\/\/www.lendingclub.com\/info\/download-data.action) or just use the csv already provided. It's recommended you use the csv provided as it has been cleaned of NA values.\n\nHere are what the columns represent:\n* credit.policy: 1 if the customer meets the credit underwriting criteria of LendingClub.com, and 0 otherwise.\n* purpose: The purpose of the loan (takes values \"credit_card\", \"debt_consolidation\", \"educational\", \"major_purchase\", \"small_business\", and \"all_other\").\n* int.rate: The interest rate of the loan, as a proportion (a rate of 11% would be stored as 0.11). Borrowers judged by LendingClub.com to be more risky are assigned higher interest rates.\n* installment: The monthly installments owed by the borrower if the loan is funded.\n* log.annual.inc: The natural log of the self-reported annual income of the borrower.\n* dti: The debt-to-income ratio of the borrower (amount of debt divided by annual income).\n* fico: The FICO credit score of the borrower.\n* days.with.cr.line: The number of days the borrower has had a credit line.\n* revol.bal: The borrower's revolving balance (amount unpaid at the end of the credit card billing cycle).\n* revol.util: The borrower's revolving line utilization rate (the amount of the credit line used relative to total credit available).\n* inq.last.6mths: The borrower's number of inquiries by creditors in the last 6 months.\n* delinq.2yrs: The number of times the borrower had been 30+ days past due on a payment in the past 2 years.\n* pub.rec: The borrower's number of derogatory public records (bankruptcy filings, tax liens, or judgments).","8f57b54d":"** Let's see the trend between FICO score and interest rate. Recreate the following jointplot.**","54140de7":"**Now use pd.get_dummies(loans,columns=cat_feats,drop_first=True) to create a fixed larger dataframe that has new feature columns with dummy variables. Set this dataframe as final_data.**","e9c71b38":"**Show the Confusion Matrix for the predictions.**","1aceaa2f":"## Training the Random Forest model\n\nNow its time to train our model!\n\n**Create an instance of the RandomForestClassifier class and fit it to our training data from the previous step.**","eb8d2a19":"## Categorical Features\n\nNotice that the **purpose** column as categorical\n\nThat means we need to transform them using dummy variables so sklearn will be able to understand them. Let's do this in one clean step using pd.get_dummies.\n\nLet's show you a way of dealing with these columns that can be expanded to multiple categorical features if necessary.\n\n**Create a list of 1 element containing the string 'purpose'. Call this list cat_feats.**","871fe0c6":"## Train Test Split\n\nNow its time to split our data into a training set and a testing set!\n\n** Use sklearn to split your data into a training set and a testing set as we've done in the past.**"}}