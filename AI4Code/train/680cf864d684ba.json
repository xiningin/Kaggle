{"cell_type":{"b30b7641":"code","11c3301f":"code","f0f2c894":"code","be766d48":"code","e7cd186d":"code","586ae4ad":"code","95bb832d":"code","28b7fa06":"code","d9001e70":"code","1894b9ec":"code","f1b149d6":"code","493b2af8":"code","d561dd94":"code","b5bd0624":"code","cbd26552":"code","ee12a9fb":"code","1ed7f4a1":"code","d600f22a":"code","2953b736":"code","7e295fc9":"code","bbafcb1e":"code","cdf61e23":"code","eee7736c":"code","a1c2a0d9":"code","a5521c6a":"code","62b6fc1e":"code","694fb141":"code","e6d76792":"code","7108f4e4":"code","297e8951":"code","3b5f5257":"code","60d5c48e":"code","b1103711":"code","67624fa7":"code","3cc7a375":"code","6f41b3b0":"code","6f829014":"code","9ad76896":"code","fdf6b0ef":"code","6d6432f9":"code","e82633d7":"code","f6bb7cff":"code","f5147d97":"code","3064fe0d":"code","e77a25d5":"code","28b32524":"code","fbc7d795":"code","f1382352":"code","9a238a91":"code","26944e91":"code","06675250":"code","d0c5df82":"code","2625afa0":"code","74c697b6":"code","13df37b8":"code","eb2d7953":"code","fcb4ec00":"code","45b275d6":"code","afc194b1":"code","acab31f8":"code","70cd96c5":"code","6c685f27":"code","d8c405d9":"code","303ef2d6":"code","796801e7":"code","9c8e66d9":"code","50e6a7e7":"code","c2d11e54":"code","4e3efac2":"code","dddc8766":"code","40951dd6":"code","46abc095":"code","a1f7e569":"code","c6a4331f":"code","38b4a5c2":"code","39953f3d":"code","01e541ff":"code","d2aed072":"code","c482e404":"markdown"},"source":{"b30b7641":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('display.max_columns', 500)","11c3301f":"#read the data\ndata=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","f0f2c894":"data.head(5)","be766d48":"#Univariate Analysis\ndata.describe(include='all')","e7cd186d":"\nsns.lineplot(x=data['YrSold'],y=data['SalePrice'])","586ae4ad":"sns.lineplot(x=data['YearBuilt'],y=data['SalePrice'])","95bb832d":"sns.lineplot(x=data['MoSold'],y=data['SalePrice'])","28b7fa06":"sns.lineplot(x=data['OverallQual'],y=data['SalePrice'])","d9001e70":"sns.lineplot(x=data['SaleCondition'],y=data['SalePrice'])","1894b9ec":"sns.distplot(data['SalePrice'])\na=data['SalePrice'].skew()\nplt.title(\"Skew:\"+str(a))","f1b149d6":"#SalePrice(target Variable right skewed hence performed log transform)\nsns.distplot(np.log(data['SalePrice']+1))\na=np.log(data['SalePrice']+1).skew()\nplt.title(\"Skew:\"+str(a))","493b2af8":"num_feat=set(data._get_numeric_data().columns)\nfeat=set(data.columns)\ncat_feat=list(feat-num_feat)\nprint(\"total categoricalfeatures : \"+str(len(cat_feat)))","d561dd94":"y='SalePrice'\nfor i,j in enumerate(cat_feat):\n    \n    sns.catplot(x=j, y=y, data=data,alpha=0.5)\n    plt.xticks(rotation=90)","b5bd0624":"#Heatmap to check correlation between variables\ncorr=data.corr()\nf, ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(corr)","cbd26552":"plt.scatter(data['GrLivArea'],data['SalePrice'],alpha=0.2)\nplt.xlabel('GrLivArea')\nplt.ylabel('SalePrice')","ee12a9fb":"plt.scatter(data['MSSubClass'],data['SalePrice'],alpha=0.2)\nplt.xlabel('MSSubClass')\nplt.ylabel('SalePrice')","1ed7f4a1":"a=data._get_numeric_data().columns\nfor i in a:\n    plt.figure()\n    plt.scatter(data[i],np.log(data['SalePrice']),alpha=0.2)\n    plt.title(i)","d600f22a":"plt.scatter(data['LotFrontage'],data['SalePrice'],alpha=0.2)\nplt.xlabel('LotFrontage')\nplt.ylabel('SalePrice')\n# Observed Outliers","2953b736":"plt.scatter((data['LotArea']),np.log(data['SalePrice']),alpha=0.2)\nplt.xlabel('LotArea')\nplt.ylabel('SalePrice')\n#observed Outliers and non-linear relationship","7e295fc9":"plt.scatter(np.log(data['LotArea']),np.log(data['SalePrice']),alpha=0.2)\nplt.xlabel('log_LotArea')\nplt.ylabel('log_SalePrice')","bbafcb1e":"plt.scatter(data['GarageArea'],data['SalePrice'],alpha=0.2)\nplt.xlabel('GarageArea')\nplt.ylabel('SalePrice')","cdf61e23":"plt.scatter(data['OverallQual'],data['SalePrice'],alpha=0.2)\nplt.xlabel('OverallQual')\nplt.ylabel('SalePrice')","eee7736c":"plt.scatter(data['TotRmsAbvGrd'],data['SalePrice'],alpha=0.2)\nplt.xlabel('TotRmsAbvGrd')\nplt.ylabel('SalePrice')","a1c2a0d9":"plt.scatter((data['MasVnrArea']),np.log(data['SalePrice']),alpha=0.2)\nplt.xlabel('MasVnrArea')\nplt.ylabel('SalePrice')","a5521c6a":"plt.scatter(np.sqrt(data['MasVnrArea']),np.log(data['SalePrice']),alpha=0.2)\nplt.xlabel('log_MasVnrArea')\nplt.ylabel('log_SalePrice')","62b6fc1e":"plt.scatter(data['OpenPorchSF'],data['SalePrice'],alpha=0.2)\nplt.xlabel('OpenPorchSF')\nplt.ylabel('SalePrice')","694fb141":"plt.scatter(np.sqrt(data['OpenPorchSF']+1),np.log(data['SalePrice']),alpha=0.2)\nplt.xlabel('Square root of OpenPorchSF')\nplt.ylabel('log_SalePrice')","e6d76792":"plt.scatter(np.log(data['OpenPorchSF']+1),np.log(data['SalePrice']),alpha=0.2)\nplt.xlabel('log of OpenPorchSF')\nplt.ylabel('log_SalePrice')","7108f4e4":"plt.scatter(data['CentralAir'],data['SalePrice'],alpha=0.2)\nplt.xlabel('CentralAir')\nplt.ylabel('SalePrice')","297e8951":"plt.scatter(data['KitchenAbvGr'],data['SalePrice'],alpha=0.2)\nplt.xlabel('KitchenAbvGr')\nplt.ylabel('SalePrice')","3b5f5257":"#Feature for age of House\na=(data['YrSold']\/100).astype(int)-(data['YearBuilt']\/100).astype(int)\nb=(data['YearBuilt']%100)-(data['YrSold']%100)\ndata['age']=a*100-b\n\n\n","60d5c48e":"sns.lineplot(x=data['age'],y=data['SalePrice'])\nplt.xlabel('age')\nplt.ylabel('SalePrice')","b1103711":"plt.scatter(x=data['age'],y=data['SalePrice'],alpha=0.2)\nplt.xlabel('age')\nplt.ylabel('SalePrice')","67624fa7":"plt.scatter(x=np.sqrt(data['age']),y=np.log(data['SalePrice']),alpha=0.2)\nplt.xlabel('Square root of age')\nplt.ylabel('log_SalePrice')","3cc7a375":"#Total sum of basement first floor and 2nd floor area\ndata['TotalSF']=data['TotalBsmtSF'] + data['1stFlrSF'] + data['2ndFlrSF']","6f41b3b0":"#Total Number of bathroooms\ndata['Total_Bathrooms'] = (data['FullBath'] + (0.5 * data['HalfBath']) +\n                               data['BsmtFullBath'] + (0.5 * data['BsmtHalfBath']))","6f829014":"#Total Porch area\ndata['Total_porch_sf'] = (data['OpenPorchSF'] + data['3SsnPorch'] +\n                              data['EnclosedPorch'] + data['ScreenPorch'] +\n                              data['WoodDeckSF'])","9ad76896":"#Total no. of baths in basement and on floors\ndata['BsmntBath']=0.5*data['BsmtHalfBath']+data['BsmtFullBath']\ndata['bath']=0.5*data['HalfBath']+data['FullBath']","fdf6b0ef":"#Age of house since it has been remodeled\na=(data['YrSold']\/100).astype(int)-(data['YearRemodAdd']\/100).astype(int)\nb=(data['YearRemodAdd']%100)-(data['YrSold']%100)\ndata['remod_age']=a*100-b","6d6432f9":"sns.lineplot(x=data['remod_age'],y=data['SalePrice'])","e82633d7":"#variables which has correlation with SalePrice(Target variable) less than 0.2\ncorr=data.corr()\na=[]\nfor i in range(corr.shape[1]):\n    if np.abs(corr.iloc[i,corr.columns.get_loc(\"SalePrice\")])<0.2:\n        a.append(corr.columns.values[i])\n\na","f6bb7cff":"data.columns","f5147d97":"#variables highly correlated (correlation >0.8)  \na=corr[corr>0.8]\nb={}\nfor i in corr.columns:\n    index = corr[i].index[corr[i].apply(lambda x:True if (x>0.8)&(x<1) else False)]\n    x=list(index.values)\n    if len(x)!=0:\n        b[i]=x\n    \n                                      \nb    ","3064fe0d":"#no. of missing values in different columns\ndata.isna().sum()","e77a25d5":"data[['LotFrontage','GarageType','GarageFinish','GarageQual','GarageCond','GarageYrBlt']].describe(include='all')","28b32524":"#Imputed missing values with their mean and median values based on their distribution\ndata['LotFrontage'].fillna(data['LotFrontage'].mean(),inplace=True)\ndata['MasVnrArea'].fillna(data['MasVnrArea'].median(),inplace=True)\n","fbc7d795":"#Filled missing garageyear built with the yearbuilt\ndata['GarageYrBlt'].fillna(data['YearBuilt'],inplace=True)","f1382352":"data11=data.copy()\ndata=data11.copy()","9a238a91":"#Imputation of categorical variables with their mode value\na=data.isnull().sum()\na=a[a>0]\nfor i in list(a.index):\n    if data[i].dtypes==object:\n        data[i].fillna(data[i].mode()[0],inplace=True)\n        \n    ","26944e91":"#No. of rows with negative age\nprint(data[data['age']<0].shape)\nprint(data[data['remod_age']<0].shape)","06675250":"#Dropping rows with negative age\ndata=data[data['age']>=0]\ndata=data[data['remod_age']>=0]","d0c5df82":"#Removed Outliers\ndata=data[data['GrLivArea']<6000]\ndata=data[data['LotFrontage']<210]\ndata=data[data['LotArea']<100000]","2625afa0":"data['Pool']=data['PoolArea'].apply(lambda x:1 if x>0 else 0)","74c697b6":"#Target encoding of categorical variables\ndata['GarageCond']=data['GarageCond'].replace({'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1})\ndata['BsmtQual']=data['BsmtQual'].replace({'Ex':5,'Gd':4,'TA':3,'Fa':2})\ndata['ExterQual']=data['ExterQual'].replace({'Ex':5,'Gd':4,'TA':3,'Fa':2})\ndata['ExterCond']=data['ExterCond'].replace({'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1})\ndata['BsmtCond']=data['BsmtCond'].replace({'Po':1,'Gd':4,'TA':3,'Fa':2})\ndata['BsmtExposure']=data['BsmtExposure'].replace({'No':1,'Mn':2,'Av':3,'Gd':4})\ndata['KitchenQual']=data['KitchenQual'].replace({'Ex':5,'Gd':4,'TA':3,'Fa':2})\ndata['GarageQual']=data['GarageQual'].replace({'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1})","13df37b8":"#Interaction feature\ndata['Qual']=data['BsmtQual']*data['ExterQual']*data['ExterCond']*data['BsmtCond']*data['BsmtExposure']*data['KitchenQual']*data['GarageQual']","eb2d7953":"#Interaction feature\ndata['baseQ']=data['BsmtQual']*data['BsmtCond']*data['BsmtExposure']\ndata['ExQ']=data['ExterQual']*data['ExterCond']\ndata['GaraQ']=data['GarageCond']*data['GarageQual']","fcb4ec00":"#Dropping irrelavent columns\n#Delete columns with lots of misssing entries\na=['Alley','FireplaceQu','PoolQC','Fence','MiscFeature']\ndata.drop(a,axis=1,inplace=True)\n\n#remove categorical variable\n#PoolQC,Utilities,Condition2,Street,MiscFeature,RoofMatl,Heating,Alley,GarageCond\ndata.drop(['BsmtFinType2','Utilities','Condition2','Street','RoofMatl','Heating','GarageCond','RoofMatl','GarageQual','Functional','Exterior1st','Exterior2nd','Neighborhood','Condition2'],axis=1,inplace=True)\n\n","45b275d6":"#Remove one of highly correlated variables and variables less correlated with target variable\n\ndata.drop(['BsmtFullBath','HalfBath','FullBath','BsmtHalfBath','RoofStyle','3SsnPorch','EnclosedPorch','ScreenPorch','PoolArea','BedroomAbvGr','2ndFlrSF','OpenPorchSF','1stFlrSF','GarageCars'],axis=1,inplace=True)\n\n","afc194b1":"x=['Id', 'BsmtFinSF2', 'LowQualFinSF', 'MiscVal']\ndata.drop(x,axis=1,inplace=True)","acab31f8":"#Dropping columns with very less contribution\ndata.drop(['Pool','Total_Bathrooms','YrSold','GarageYrBlt','YearBuilt','YearRemodAdd','MasVnrArea','MasVnrType','MSSubClass','Condition1','HouseStyle','ExterQual','ExterCond','BsmtQual','BsmtCond','BsmtFinType1','CentralAir','Electrical','KitchenAbvGr','Fireplaces','GarageType','GarageFinish','SaleType'],axis=1,inplace=True)","70cd96c5":"#One-hot encoding of remaining categorical variables\nnum_feat=set(data._get_numeric_data().columns)\nfeat=set(data.columns)\ncat_feat=list(feat-num_feat)\na=set(['BsmtQual','ExterQual','ExterCond','BsmtCond','BsmtExposure','KitchenQual','GarageQual'])\ncat_feat=set(cat_feat)-a\nlen(cat_feat)\nb=[]\nfor i in cat_feat:\n    a=pd.get_dummies(data[i],prefix=i)\n    b=b+list(a.columns.values)\n    data=pd.concat([data,a],axis=1)\n    data.drop(i,axis=1,inplace=True)","6c685f27":"data['LotArea']=np.log(data['LotArea']+1)","d8c405d9":"c=[]\nfor i in b:\n    x=data[i].value_counts()\n    if x.index[0]==0:\n        if x.values[0]>1440:\n           c.append(str(i))\ndata.drop(c,axis=1,inplace=True)        ","303ef2d6":"data3=data.copy()\ndata3=data.dropna()\nY=data3['SalePrice']\ndata3.drop(['SalePrice'],inplace=True,axis=1)\nX=data3.copy()\n\n","796801e7":"#Splitting of data into train and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)","9c8e66d9":"#Fitting the model\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression(normalize=True)\nregressor.fit(X_train, np.log(y_train))\n\n# Predicting the Test set results\ny_pred_test = np.exp(regressor.predict(X_test))\ny_pred_train=np.exp(regressor.predict(X_train))","50e6a7e7":"def feature_importance(model,data):\n   ser = pd.Series(model.coef_,data.columns).sort_values()\n   plt.figure(figsize=(12,12))\n   ser.plot(kind='bar')\n   return ser","c2d11e54":"#Feature importance\na=feature_importance(regressor,X)\nprint(a)","4e3efac2":"#R Square value of the fit\nfrom sklearn.metrics import r2_score\ntest=r2_score(y_test,y_pred_test)\nprint(\"Test Rsquare\"+str(r2_score(y_test,y_pred_test)))\nprint(\"Train RSquare\"+str(r2_score(y_train,y_pred_train)))","dddc8766":"# RMSE(between the logarithm of the predicted value and the logarithm of the observed sales price) so that errors in predicting expensive houses and cheap houses will contribute the result equally.\nfrom sklearn.metrics import mean_squared_error\nrms = np.sqrt(mean_squared_error(np.log(y_test),np.log(y_pred_test)))\nprint(\"test data rms error : \"+str(rms))","40951dd6":"from sklearn.metrics import mean_squared_error\nrms = np.sqrt(mean_squared_error(np.log(y_train),np.log(y_pred_train)))\nprint(\"train_data rms_error: \" +str(rms))","46abc095":"adjusted_r_squared = 1 - (1-test)*(len(y_test)-1)\/(len(y_test)-X.shape[1]-1)\nprint(\"adjusted_r_squared value for test data :\"+str(adjusted_r_squared))","a1f7e569":"plt.figure()\nplt.scatter(y_train,y_pred_train,alpha=0.2)\nplt.plot(y_train,y_train,alpha=0.3,c='r')\nplt.title(\"Training Data Fit\")\nplt.xlabel(\"Sales\")\nplt.ylabel(\"Predicted Sales\")","c6a4331f":"plt.figure()\nplt.scatter(y_test,y_pred_test,alpha=0.2)\nplt.plot(y_test,y_test,alpha=0.3,c='r')\nplt.title(\"Test Data Fit\")\nplt.xlabel(\"Sales\")\nplt.ylabel(\"Predicted Sales\")","38b4a5c2":"a=(y_test-y_pred_test)\nsns.distplot(a)\nplt.title(\"Skew:\"+str(a.skew()))\nplt.title(\"Residual Plot for Training set ....Skew:\"+str(a.skew()))","39953f3d":"a=(y_train-y_pred_train)\nsns.distplot(a)\nplt.title(\"Skew:\"+str(a.skew()))\nplt.title(\"Residual Plot for Training set ....Skew:\"+str(a.skew()))","01e541ff":"plt.scatter(y_train-y_pred_train,y_train,alpha=0.2)\nplt.title(\"Residual Vs  Actual SalePrice for train data\")","d2aed072":"plt.scatter(y_test-y_pred_test,y_test,alpha=0.2)\nplt.title(\"Residual Vs  Actual SalePrice for test data\")","c482e404":"**#Bivariate Analysis******"}}