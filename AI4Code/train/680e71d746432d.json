{"cell_type":{"c27fd998":"code","dd8ba2f6":"code","302650ac":"code","907413fb":"code","efac33eb":"code","27101d5d":"code","f5f743c5":"code","e53aaa79":"code","5377b0bb":"code","d757143f":"code","0f39db05":"code","7ec5f632":"code","7d20b9a5":"code","2c645be1":"code","0b2da03c":"code","9af0b300":"code","fb5ad1c9":"code","610ef093":"markdown","887c5096":"markdown","a67882c7":"markdown"},"source":{"c27fd998":"import pandas as  pd\n\ndataframe = pd.read_csv(\"..\/input\/ccdata\/CC GENERAL.csv\")\ndataframe.head()","dd8ba2f6":"dataframe.drop(columns=[\"CUST_ID\", \"TENURE\"], inplace=True)\ndataframe.head()","302650ac":"dataframe.fillna(dataframe.median(), inplace=True)\nmissing = dataframe.isna().sum()\nprint(missing)","907413fb":"from sklearn.preprocessing import Normalizer\n\nvalues = Normalizer().fit_transform(dataframe.values) ","efac33eb":"from sklearn.cluster import KMeans\n\nkmeans = KMeans(n_clusters=5, n_init=10, max_iter=300)\ny_pred = kmeans.fit_predict(values)","27101d5d":"from sklearn import metrics\n\nlabels = kmeans.labels_\nsilhouette = metrics.silhouette_score(values,labels,metric='euclidean')\n\nprint(silhouette)\n\ndbs = metrics.davies_bouldin_score(values, labels)\nprint(dbs)\n\ncalinski = metrics.calinski_harabasz_score(values, labels) \nprint(calinski)","f5f743c5":"def clustering_algorithm(n_clusters, dataset):\n\n    kmeans = KMeans(n_clusters=n_clusters, n_init=10, max_iter=300)\n    labels = kmeans.fit_predict(dataset)\n    \n    s = metrics.silhouette_score(dataset, labels, metric='euclidean')\n    dbs = metrics.davies_bouldin_score(dataset, labels)\n    calinski = metrics.calinski_harabasz_score(dataset, labels)\n    \n    return s, dbs, calinski","e53aaa79":"s1, dbs1, calinski1 = clustering_algorithm(3, values)\nprint(s1, dbs1, calinski1)","5377b0bb":"s2, dbs2, calinski2 = clustering_algorithm(5, values)\nprint(s2, dbs2, calinski2)","d757143f":"s3, dbs3, calinski3 = clustering_algorithm(10, values)\nprint(s3, dbs3, calinski3)","0f39db05":"import numpy as np\n\nrandom_data = np.random.rand(8950,16)\ns, dbs, calinski = clustering_algorithm(5, random_data)\n\nprint(s, dbs, calinski)\nprint(s2,dbs2, calinski2)","7ec5f632":"set1, set2, set3 = np.array_split(values, 3)\n\nprint(clustering_algorithm(5, set1))\nprint(clustering_algorithm(5, set2))\nprint(clustering_algorithm(5, set3))","7d20b9a5":"import matplotlib.pyplot as plt\n\nplt.scatter(dataframe.PURCHASES, dataframe.PAYMENTS, c=labels, s=5, cmap='rainbow' )\nplt.xlabel(\"valor total pago\")\nplt.ylabel(\"valor total gasto\")\nplt.show","2c645be1":"dataframe[\"cluster\"] = labels\ndataframe.groupby(\"cluster\").describe()","0b2da03c":"centroids = kmeans.cluster_centers_\nmax =len(centroids[0])\n\nfor i in range(max):\n    print(\n        dataframe.columns.values[i], \n        \"\\n{:.4f}\".format(centroids[:, i].var())\n    )","9af0b300":"description = dataframe.groupby(\"cluster\")[\"BALANCE\", \"PURCHASES\", \"CASH_ADVANCE\", \"CREDIT_LIMIT\", \"PAYMENTS\"]\nn_clients = description.size()\ndescription = description.mean()\ndescription['n_clients'] = n_clients\ndescription","fb5ad1c9":"dataframe.groupby(\"cluster\")[\"PRC_FULL_PAYMENT\"].describe()","610ef093":"CLUSTER 0: Clientes que gastam pouco. Clientes com o maior limite.\n\nCLUSTER 1: Clientes que mais gastam. O foco deles \u00e9 saque.\n\nCLUSTER 2: Clientes que gastam muito com compras.\n\nCLUSTER 3: Clientes que gastam muito com saques.\n\nCLUSTER 4:","887c5096":"* BALANCE 0.0224\n* PURCHASES 0.0196\n* CASH_ADVANCE 0.0226\n* CREDIT_LIMIT 0.0360\n* PAYMENTS 0.0280","a67882c7":"CLUSTER 0: Clientes que gastam pouco. Clientes com o maior limite.Bons pagadores. Maior n\u00famero de clientes. \n\nCLUSTER 1: Clientes que mais gastam. O foco deles \u00e9 saque.Piores pagadores.Boa quantidade de clientes.\n\nCLUSTER 2: Clientes que gastam muito com compras. Melhores pagadores. \n\nCLUSTER 3: Clientes que gastam muito com saques. Pagam \u00e0s vezes.\n\nCLUSTER 4: Clientes com o menor limite. N\u00e3o s\u00e3o bons pagadores. Menor quantidade de clientes"}}