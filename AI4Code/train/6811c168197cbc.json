{"cell_type":{"449ed2ad":"code","8ec6ac20":"code","02b0b7c3":"code","8864c1ed":"code","bd0d07a1":"code","c3a0adc0":"code","31dc4154":"code","8b7a0e39":"code","de8a5ff7":"code","30f7503c":"code","cc40d6ec":"code","0cda7287":"code","e45d566a":"code","4569f40f":"code","d166397e":"code","aab622f9":"code","eb9dfe93":"code","19c56f25":"code","9da38054":"code","553631a0":"code","90203cb6":"code","f24e1ac5":"code","d94e20df":"code","c7edce59":"code","142e15da":"code","376b91c7":"markdown","ba0e266b":"markdown","c2eeca78":"markdown","4026135b":"markdown","f01f7e16":"markdown","c56b01c5":"markdown","563a5087":"markdown","ccdcb93a":"markdown","b0f878b2":"markdown","b6a67bc5":"markdown","acbe27e2":"markdown","0c59b496":"markdown","d6cf57ad":"markdown","dbcac6c6":"markdown","7b28841e":"markdown","eb95b8f8":"markdown","9fdf35ec":"markdown","5dcb8b2a":"markdown","f1ac4f5e":"markdown","5a8f8e0f":"markdown","3600e999":"markdown","0ef6e729":"markdown"},"source":{"449ed2ad":"from sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport tensorflow as tf\nimport seaborn as sns\nimport warnings\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport plotly.express as px\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn import svm\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ec6ac20":"data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndata.head()","02b0b7c3":"data.describe()","8864c1ed":"data.info()","bd0d07a1":"# Histogram of the Ages by the Heart Disease (1 = Disease, 0 = Healthy)\nplt.figure(figsize=(15, 8))\n\nplt.hist([data[data['target'] == 0]['age'], data[data['target'] == 1]['age']], 48,\n         stacked=True, density=True, alpha=0.75, color=['g', 'r'])\nplt.xlabel(\"Ages\", fontsize=12)\nplt.ylabel('Density', fontsize=12)\nplt.title(\"Histogram of the Ages by the Heart Disease\", fontsize=16)\nplt.legend(['Healthy', 'Disease'], loc='upper right')\nplt.show()","c3a0adc0":"# Distribution of the Disease vs Sex\nplt.figure(figsize=(15, 8))\nsplot = sns.countplot(data=data, x='sex',\n                      hue='target',\n                      order=data['sex'].value_counts().index,\n                      palette=['forestgreen', 'red'],\n                      edgecolor=(0, 0, 0),\n                      linewidth=2)\n\nsplot.set_xticklabels(['Male', 'Female'])\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.1f'),\n                   (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center',\n                   xytext=(0, 9),\n                   textcoords='offset points')\nplt.legend(['Healthy', 'Disease'], loc='upper right')\nplt.ylabel('Frequency of the Disease', fontsize=14)\nplt.xlabel('Sex', fontsize=14)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.title('Distribution of the Disease vs Sex', fontsize=20)","31dc4154":"# Distribution of the Disease vs Chest Pain Type\nplt.figure(figsize=(15, 8))\nsplot = sns.countplot(data=data, x='cp',\n                      hue='target',\n                      order=data['cp'].value_counts().index,\n                      palette=['forestgreen', 'red'],\n                      edgecolor=(0, 0, 0),\n                      linewidth=2)\n\nsplot.set_xticklabels(['Asymptomatic', 'Without Relation to Angina', 'Atypical Angina',\n                       'Typical Angina'])\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.1f'),\n                   (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center',\n                   xytext=(0, 9),\n                   textcoords='offset points')\n\nplt.legend(['Healthy', 'Disease'], loc='upper right')\nplt.ylabel('Frequency of the Disease', fontsize=14)\nplt.xlabel('Chest Pain Types', fontsize=14)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.title('Distribution of the Disease vs Chest Pain Type', fontsize=20)","8b7a0e39":"plt.figure(figsize=(15, 8))\n\nplt.hist([data[data['target'] == 0]['trestbps'], data[data['target'] == 1]['trestbps']], 20,\n         stacked=True, density=True, alpha=0.75, color=['g', 'r'])\nplt.xlabel(\"Resting Blood Pressure (mm Hg)\", fontsize=12)\nplt.ylabel('Density', fontsize=12)\nplt.title(\"Histogram of the Resting Blood Pressure by the Heart Disease\", fontsize=16)\nplt.legend(['Healthy', 'Disease'], loc='upper right')\nplt.show()","de8a5ff7":"plt.figure(figsize=(15, 8))\n\nplt.hist([data[data['target'] == 0]['chol'], data[data['target'] == 1]['chol']], 55,\n         stacked=True, density=True, alpha=0.75, color=['g', 'r'])\nplt.xlabel(\"Cholesterol (mg\/dl)\", fontsize=12)\nplt.ylabel('Density', fontsize=12)\nplt.title(\"Histogram of the Cholesterol by the Heart Disease\", fontsize=16)\nplt.legend(['Healthy', 'Disease'], loc='upper right')\nplt.show()","30f7503c":"x = ['FBS is less than 120', 'FBS is greater than 120']\ny = ['Disease', 'Healthy']\nz = [[\n      data[data['target'] == 1]['fbs'].value_counts()[0],\n      data[data['target'] == 1]['fbs'].value_counts()[1]],\n     [data[data['target'] == 0]['fbs'].value_counts()[0],\n      data[data['target'] == 0]['fbs'].value_counts()[1]]\n     ]\n\nfig = ff.create_annotated_heatmap(z, x=x, y=y, colorscale='magma')\nfig.update_layout(title_text='Heatmap of the FBS by the Heart Disease',\n                  title_x=0.5, title_font=dict(size=22))\nfig.update_layout(xaxis=dict(\n    tickfont=dict(size=15),\n),\n    yaxis=dict(tickfont=dict(size=15)))\nfig.show()","cc40d6ec":"plt.figure(figsize=(15, 8))\nsplot = sns.countplot(data=data, x='restecg',\n                      hue='target',\n                      order=data['restecg'].value_counts().index,\n                      palette=['forestgreen', 'red'],\n                      edgecolor=(0, 0, 0),\n                      linewidth=2)\n\nsplot.set_xticklabels(['Normal', 'Hypertrophy', 'Abnormalities'])\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.1f'),\n                   (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center',\n                   xytext=(0, 9),\n                   textcoords='offset points')\nplt.legend(['Healthy', 'Disease'], loc='upper right')\nplt.ylabel('Frequency of the Disease', fontsize=14)\nplt.xlabel('Results of the Electrocardiogram', fontsize=14)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.title('Distribution of the Results of the Electrocardiogram on Rest vs Heart Disease', fontsize=20)","0cda7287":"plt.figure(figsize=(15, 8))\nplt.hist([data[data['target'] == 0]['thalach'], data[data['target'] == 1]['thalach']], 30,\n         stacked=True, density=True, alpha=0.75, color=['g', 'r'])\nplt.xlabel(\"Maximum Heart Rates\", fontsize=12)\nplt.ylabel('Density', fontsize=12)\nplt.title(\"Histogram of the Maximum Heart Rate by the Heart Disease\", fontsize=16)\nplt.legend(['Healthy', 'Disease'], loc='upper right')\nplt.show()","e45d566a":"x = ['No', 'Yes']\ny = ['Disease', 'Healthy']\nz = [[\n      data[data['target'] == 1]['exang'].value_counts()[0],\n      data[data['target'] == 1]['exang'].value_counts()[1]],\n     [data[data['target'] == 0]['exang'].value_counts()[0],\n      data[data['target'] == 0]['exang'].value_counts()[1]]\n     ]\n\nfig = ff.create_annotated_heatmap(z, x=x, y=y)\nfig.update_layout(title_text='Heatmap of the Exercise Induced Angina by the Heart Disease',\n                  title_x=0.5, title_font=dict(size=22))\nfig.update_layout(xaxis=dict(\n    tickfont=dict(size=15),\n),\n    yaxis=dict(tickfont=dict(size=15)))\nfig.show()","4569f40f":"plt.figure(figsize=(15, 8))\nsns.distplot(data.loc[data['target'] == 0][['oldpeak']], hist=True)\nsns.distplot(data.loc[data['target'] == 1][['oldpeak']], hist=True)\nplt.xlabel(\"ST Depression Induced by Exercise Relative to Rest\", fontsize=12)\nplt.ylabel('Density', fontsize=12)\nplt.legend(['Healthy', 'Disease'], loc='upper right')\n\nplt.title(\"Density Plot of the ST Depression Induced by Exercise Relative to Rest\", fontsize=16)\nplt.show()","d166397e":"plt.figure(figsize=(15, 8))\nsplot = sns.countplot(data=data, x='slope',\n                      hue='target',\n                      order=data['slope'].value_counts().index,\n                      palette=['forestgreen', 'red'],\n                      edgecolor=(0, 0, 0),\n                      linewidth=2)\n\nsplot.set_xticklabels(['Ascending', 'Flat', 'Descending'])\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.1f'),\n                   (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center',\n                   xytext=(0, 9),\n                   textcoords='offset points')\nplt.legend(['Healthy', 'Disease'], loc='upper right')\nplt.ylabel('Frequency of the Disease', fontsize=14)\nplt.xlabel('Slopes', fontsize=14)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.title('Distribution of the Slope of the ST Segment by Heart Disease', fontsize=20)","aab622f9":"fig = go.Figure(data=[\n    go.Bar(name='Healthy', x=data[data['target'] == 0]['ca'].value_counts().index,\n           y=data[data['target'] == 0]['ca'].value_counts(),\n           marker=dict(color=\"green\", line=dict(width=5), opacity=0.78)),\n\n    go.Bar(name='Disease', x=data[data['target'] == 1]['ca'].value_counts().index,\n           y=data[data['target'] == 1]['ca'].value_counts(),\n           marker=dict(color=\"red\", line=dict(width=5), opacity=0.78)\n           )\n])\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder': 'total descending'})\n\nfig.update_xaxes(title_text=\"Major Vessels Colored by Fluoroscopy\", title_font={\"size\": 16})\nfig.update_yaxes(title_text=\"Frequency\", title_font={\"size\": 16})\n\nfig.update_layout(title_text='Distribution of the Number of Major Vessels Colored by Flourosopy',\n                  title_x=0.5, title_font=dict(size=20))\nfig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\n\nfig.show()","eb9dfe93":"X = data.drop('target', axis=1)\ny = data['target']\nX.head()","19c56f25":"trainX, testX, trainY, testY = train_test_split(X, y, test_size=0.15, shuffle=True, random_state=13)\ntrainX.head()","9da38054":"rf = RandomForestClassifier(max_depth=50, max_features=6, max_leaf_nodes=20,\n                            min_samples_leaf=4, min_samples_split=8,\n                            n_estimators=20,\n                            bootstrap=True)\n\nrf.fit(trainX, trainY)","553631a0":"train_scoreRF = rf.score(trainX, trainY)\ntest_scoreRF = rf.score(testX, testY)\n\nprint('RF Train Score: %', train_scoreRF * 100)\nprint('RF Test Score: %', test_scoreRF * 100)","90203cb6":"clf = svm.SVC(kernel='linear')\nclf.fit(trainX, trainY)\n\npredictions_svm = clf.predict(testX)\n\ntrain_scoreSVM = clf.score(trainX, trainY)\ntest_scoreSVM = clf.score(testX, testY)\n\nprint('SVM Train Score: %', train_scoreSVM * 100)\nprint('SVM Test Score: %', test_scoreSVM * 100)","f24e1ac5":"model = XGBClassifier(learning_rate=0.001, max_depth=10, n_estimators=30,\n                      colsample_bytree=0.3, min_child_weight=0.4, reg_alpha=0.1,\n                      )\nmodel.fit(trainX, trainY)\n\ntrain_scoreXGB = model.score(trainX, trainY)\ntest_scoreXGB = model.score(testX, testY)\n\nprint('XGBClassifier Train Score: %', train_scoreXGB * 100)\nprint('XGBClassifier Test Score: %', test_scoreXGB * 100)","d94e20df":"reggressor = LogisticRegression(random_state=13, max_iter=2000).fit(trainX, trainY)\n\ntrain_scoreLR = reggressor.score(trainX, trainY)\ntest_scoreLR = reggressor.score(testX, testY)\n\nprint('LR Train Score: %', train_scoreLR * 100)\nprint('LR Test Score: %', test_scoreLR * 100)","c7edce59":"train_list = [train_scoreRF, train_scoreSVM, train_scoreXGB, train_scoreLR]\ntest_list = [test_scoreRF, test_scoreSVM, test_scoreXGB, test_scoreLR]\nnames = ['RandomForest', 'SVM', 'XGBClassifier', 'Logistic Regression']\n\ntrain_list = pd.DataFrame(train_list)\ntest_list = pd.DataFrame(test_list)\nnames = pd.DataFrame(names)\n\ntrain_list.columns = ['train']\ntest_list.columns = ['test']\nnames.columns = ['names']\n\n\nover_all_score = pd.concat([names, train_list, test_list], axis=1)\nover_all_score","142e15da":"\nfig = go.Figure(data=[\n    go.Bar(name='Train Results', x=over_all_score['names'], y=over_all_score['train'],\n           marker=dict(line=dict(width=5)),\n           texttemplate='%{y:20,.2f}', textposition='outside',),\n\n    go.Bar(name='Test Results', x=over_all_score['names'], y=over_all_score['test'],\n           marker=dict(line=dict(width=5)),\n           texttemplate='%{y:20,.2f}', textposition='outside',)\n])\n\nfig.update_layout(barmode='group', xaxis={'categoryorder': 'total descending'})\n\nfig.update_xaxes(title_text=\"Models\", title_font={\"size\": 16})\nfig.update_yaxes(title_text=\"Error Rate\", title_font={\"size\": 16})\n\nfig.update_layout(title_text='Train and Test Results of the each Model',\n                  title_x=0.5, title_font=dict(size=20))\nfig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\n\nfig.show()","376b91c7":"#  Slope of the ST Segment and the Heart Disease","ba0e266b":"# Sex and the Heart Disease","c2eeca78":"# Overall Train and Test Results","4026135b":"# Electrocardiography Results and the Heart Disease","f01f7e16":"# Age and the Heart Disease","c56b01c5":"# Heatmap of the FBS by the Heart Disease","563a5087":"# Data Pre-Process","ccdcb93a":"# Number of Major Vessels Colored by Fluoroscopy","b0f878b2":"\n<h1><center>Heart Disease Classification<\/center><\/h1>\n","b6a67bc5":"# Resting Blood Pressure and the Heart Disease","acbe27e2":"# Heatmap of the Exercise Induced Angina ","0c59b496":"# Data Visualization","d6cf57ad":"# Logistic Regression","dbcac6c6":"# Maximum Heart Rate and the Heart Disease","7b28841e":"# Cholesterol and the Heart Disease","eb95b8f8":"# Random Forest Classifier","9fdf35ec":"# Data Info","5dcb8b2a":"# Importing Libraries","f1ac4f5e":"#  SVM Classification","5a8f8e0f":"#  XGBClassifier","3600e999":"# ST Depression Induced by Exercise Relative to Rest","0ef6e729":"# Chest Pain Type and Heart Disease"}}