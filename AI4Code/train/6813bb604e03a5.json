{"cell_type":{"6b8bd131":"code","0f13284f":"code","cc50b7ce":"code","8744bb6d":"code","ca7d7d78":"code","eec58c43":"code","bd7f1d5a":"code","ddf25a04":"code","1c2808c4":"code","b711f06e":"code","54bf612d":"code","59d18521":"code","30c1d948":"code","de3e7369":"code","b3092800":"code","e65f7787":"code","e3f372b5":"code","375561b0":"code","99260960":"code","8eaab67a":"code","3f4ae7af":"code","68f05eaf":"code","daf7d724":"code","5bf37d83":"code","452bb301":"code","18beb404":"code","5bacf7cc":"code","f3f6b75e":"code","7a7a17d9":"code","bf14caf9":"code","a899501c":"code","934fb2c6":"code","954af0d1":"code","dcec7d2f":"code","f3c353d4":"code","4af2a5e7":"markdown","74b37bd6":"markdown","e2059cfa":"markdown","826d0d90":"markdown","71545a9f":"markdown","0eef0312":"markdown"},"source":{"6b8bd131":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f13284f":"df =pd.read_csv('https:\/\/raw.githubusercontent.com\/krishnaik06\/Feature-Engineering-Live-sessions\/master\/titanic.csv',usecols=['Pclass','Age','Fare','Survived'])","cc50b7ce":"df.head()","8744bb6d":"df['Age'].fillna(df.Age.median(),inplace=True)","ca7d7d78":"df.isnull().sum()","eec58c43":"##standardiztion we use standard scaler \nfrom sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\n##fit versrus fit_transform\ndf_scaled=scaler.fit_transform(df)","bd7f1d5a":"pd.DataFrame(df_scaled)","ddf25a04":"##it is happening along the columns\nimport matplotlib.pyplot as plt\n%matplotlib inline","1c2808c4":"plt.hist(df_scaled[:,3],bins=20)","b711f06e":"plt.hist(df['Fare'],bins=20)\n##right skewed","54bf612d":"from sklearn.preprocessing import MinMaxScaler\nmin_max=MinMaxScaler()","59d18521":"df_minmax=pd.DataFrame(min_max.fit_transform(df),columns=df.columns)","30c1d948":"df_minmax","de3e7369":"plt.hist(df_minmax['Fare'],bins=20)\n#right skewed","b3092800":"from sklearn.preprocessing import RobustScaler\nscaler=RobustScaler()\ndf_robust_scaled=pd.DataFrame(scaler.fit_transform(df),columns=df.columns)","e65f7787":"df_robust_scaled.head()","e3f372b5":"plt.hist(df_robust_scaled['Fare'])\n#more robust to outlier","375561b0":"df =pd.read_csv('https:\/\/raw.githubusercontent.com\/krishnaik06\/Feature-Engineering-Live-sessions\/master\/titanic.csv',usecols=['Age','Fare','Survived'])","99260960":"df.head()","8eaab67a":"df['Age']=df['Age'].fillna(df['Age'].median())","3f4ae7af":"df.head()","68f05eaf":"df.isnull().sum()","daf7d724":"import scipy.stats as stats\nimport pylab","5bf37d83":"def plot_data(df,feature):\n    plt.figure(figsize=(10,6))\n    plt.subplot(1,2,1)\n    df[feature].hist()\n    plt.subplot(1,2,2)\n    stats.probplot(df[feature],dist='norm',plot=pylab)\n    plt.show()","452bb301":"plot_data(df,'Age')","18beb404":"###logritmic transformation","5bacf7cc":"df['Age_log']=np.log(df['Age'])\nplot_data(df,'Age_log')","f3f6b75e":"###reciprocal transformation\ndf['Age_reciprocal']=1\/df.Age\nplot_data(df,'Age_reciprocal')","7a7a17d9":"###square root transformation\ndf['Age_sqrot']=df.Age**(1\/2)\nplot_data(df,'Age_sqrot')","bf14caf9":"###exponential transformation\ndf['Age_exp']=df.Age**(1\/1.2)\nplot_data(df,'Age_exp')","a899501c":"\n###boxcox transformation\n#T(Y)=(Yexp(lambda)-1)\/lambda\ndf['Age_boxcox'],parameters=stats.boxcox(df['Age'])","934fb2c6":"print(parameters)","954af0d1":"plot_data(df,'Age_boxcox')","dcec7d2f":"## fare log1p used for zero error in log\ndf['Fare_log']=np.log1p(df['Fare'])\nplot_data(df,'Fare_log')","f3c353d4":"### +1 to prevent error\ndf['Fare_boxcox'],parameters=stats.boxcox(df['Fare']+1)\nplot_data(df,'Fare_boxcox')","4af2a5e7":"# # > types of transformation\n# # # # 1NORMALIZATION AND STANDARDIZATION\n# # # # 2scaling to minimum and maximum values\n# # # # 3. scaling to median and quantiles\n# # # # 1. # 4. gaussian transormation\n# # # #     reciprocal transformation\n# # # #     squareroot transformation\n# # # #     logarithmic transformation\n# # # #     exponension transformation\n# # # #     boxcox transformation","74b37bd6":"##robust scaler\nit is used to scale the feature to medain and quantiles\ninter quantile range IQR = 75thquantile-25th quantile\nx_scaled=(x-x.median)\/IQR\n0,1,2,3,4,5,6,7,8,9,10\n9- 90percentile  90% of all values in this group is less than 9\n1 - 10percentile 10% of all values in this group is less than 1\n","e2059cfa":"if we want to check  if data is gaussian distributed or normal distributed\n###q-q plot","826d0d90":"##min max scaling used in cnn and rnn mostly\nin machine learning we use standard scleing \nthis min max scaling transform scales the value between o and 1\nx_saled=x-x_min\/xmax-xmin","71545a9f":"#standardization\nwe try to bring all the variables and features to a similar scale. standardization centring the variable to zero.\nz=(x-x_mean)\/std","0eef0312":"Gaussian transformation\n#some machine learning algoritm linear and logistic assuem that features are normaliy distributed\nhigh accuracy and performance\n# # # reciprocal transformation\n# # # squareroot transformation\n# # # logarithmic transformation\n# # # exponension transformation\n# # # boxcox transformation"}}