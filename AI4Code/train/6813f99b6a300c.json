{"cell_type":{"8bee488f":"code","75de24b6":"code","e43f5739":"code","65e3e7c8":"code","be00b099":"code","c57f71d0":"code","4c0ef996":"code","5e807d3b":"code","8078e83d":"code","f533646a":"code","6a5e7ee5":"code","bb1373e8":"code","06338add":"code","c4aaec0c":"code","f28893c6":"code","5ad256f5":"code","9d17ecd2":"code","72292801":"code","d83de535":"code","02a712b2":"code","84e7e7c8":"markdown","e861d3db":"markdown","89f0bffc":"markdown","811a6a02":"markdown","2e3f84b5":"markdown","03a0fed7":"markdown","449615a5":"markdown","cab49ab0":"markdown","c99c63e9":"markdown","5c0dfe13":"markdown","17eaf56a":"markdown","f0771bd4":"markdown","074fd89d":"markdown","db558905":"markdown","3ba95292":"markdown"},"source":{"8bee488f":"!pip install dexplot","75de24b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport json\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\n\n#plotly\n!pip install chart_studio\nimport plotly.express as px\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n\nimport plotly.express as px\nimport dexplot as dxp\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e43f5739":"anchor_df = pd.read_csv('..\/input\/chai-time-data-science\/Anchor Thumbnail Types.csv')\nyoutube_df = pd.read_csv('..\/input\/chai-time-data-science\/YouTube Thumbnail Types.csv')\ndescription_df = pd.read_csv('..\/input\/chai-time-data-science\/Description.csv')\nepisodes_df = pd.read_csv('..\/input\/chai-time-data-science\/Episodes.csv', parse_dates=['recording_date','release_date'])\nperformance_df = pd.read_csv('..\/input\/chai-time-data-science\/Results.csv')","65e3e7c8":"anchor_df.head(5)","be00b099":"youtube_df.head(5)","c57f71d0":"description_df.head(5)","4c0ef996":"episodes_df.head(5)","5e807d3b":"performance_df.head(5)","8078e83d":"episodes_df.info()","f533646a":"labels = episodes_df.heroes_gender.value_counts()[:15].index\nvalues = episodes_df.heroes_gender.value_counts()[:15].values\ncolors = ['ligthblue', 'lightgreen']\n\nplt.figure(figsize=(10,10))\nfig = go.Figure(data=[go.Pie(labels=labels, textinfo='label+percent', values=values, marker=dict(colors=colors))])\nfig.show()","6a5e7ee5":"labels = episodes_df.heroes_nationality.value_counts()[:15].index\nvalues = episodes_df.heroes_nationality.value_counts()[:15].values\n#colors = ['ligthblue', 'lightgreen']\n\nplt.figure(figsize=(10,10))\nfig = go.Figure(data=[go.Pie(labels=labels, textinfo='label+percent', values=values )])\nfig.show()","bb1373e8":"dxp.count('category',episodes_df, figsize=(4,3),orientation='h')","06338add":"episodes_df['episode_duration'].count()","c4aaec0c":"dxp.count('apple_listeners',episodes_df, figsize=(10,5), split='heroes_gender', orientation='h')","f28893c6":"dxp.count('category',episodes_df, figsize=(10,5), split='heroes_gender', orientation='h')","5ad256f5":"dxp.count('flavour_of_tea',episodes_df, figsize=(4,3), split = 'heroes_gender', orientation='h')","9d17ecd2":"dxp.count('flavour_of_tea',episodes_df, figsize=(4,3), orientation='h')","72292801":"labels = episodes_df.heroes.value_counts()[:15].index\nvalues = episodes_df.heroes.value_counts()[:15].values\n\nplt.figure(figsize=(10,10))\nfig = go.Figure(data=[go.Pie(labels=labels, textinfo='label+percent', values=values )])\nfig.show()","d83de535":"dxp.count('heroes_nationality',episodes_df, split='category',normalize=True,figsize=(10,6),size=0.9,stacked=True)","02a712b2":"dxp.count('heroes_nationality',episodes_df, split='heroes_gender',normalize=True,figsize=(10,6),size=0.9,stacked=True)","84e7e7c8":"# Heroes Gender\n\n**Data Visualization can be a great tool for understanding the data, if used properly so here I will be using [plotly](https:\/\/plotly.com\/python\/pie-charts\/#basic-pie-chart-with-gopie) library of python to create interactive graphs**","e861d3db":"# Episode Duration","89f0bffc":"***Before starting here I would recommend reading [this](https:\/\/www.kaggle.com\/rohanrao\/chai-time-data-science\/discussion\/156137) to get more idea about this!!***\n\n***Big thanks to [Parul pandey](https:\/\/www.kaggle.com\/parulpandey\/how-to-explore-the-ctds-show-data) for her implementations on this, do check them as well***","811a6a02":"# Nationality wise Gender distribution","2e3f84b5":"# Apple Listeners Gender Distribution","03a0fed7":"# Flavour of Tea\n\n**For curiosity I have done a Gender distrbution to check Gender wise preferences**","449615a5":"# Heroes","cab49ab0":"# Category","c99c63e9":"# Category wise Gender Distribution","5c0dfe13":"# Loading Dataset","17eaf56a":"# Introduction to CTDS Data\n\n**Chai Time Data Science Show, is a podcast series by Sanyam Bhutani.**\n\n**The episodes are available as video, audio and blog posts.**\n\n**You can find the podcast on YouTube, Spotify, Apple Music and all major Podcast directories.**\n\n**The show consists of interviews with ML Heroes: Kagglers, Practitioners and Researchers. If you haven't yet watched an episode, you can find all of them via the links above. The podcast is a service to the community and contains no ads, just 75+ episodes with a bi-weekly release schedule.**","f0771bd4":"# Nationality wise","074fd89d":"# Nationality wise Category distribution","db558905":"# Let's Explore in Detail\n\n**.info() method will be used to understand the csv datasets, that we had loaded previously**","3ba95292":"**More to do WORK IN PROGRESS!!**"}}