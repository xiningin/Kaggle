{"cell_type":{"832673c9":"code","c23196ab":"code","7a7351a9":"code","ac3eb627":"code","b371de2d":"code","bd5cb080":"code","9bf79de7":"code","1bba90f8":"code","6c334b32":"code","d78c4ebb":"code","2e083e64":"code","644f4eac":"code","67ad2ef1":"code","e66980a1":"code","28b8c389":"code","735d5d8d":"code","ce24b3ea":"code","770cf44e":"code","d41428c2":"markdown","bf045d91":"markdown","03d9089d":"markdown","2f4dcc57":"markdown","c1c33c28":"markdown","1995fb1d":"markdown"},"source":{"832673c9":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nimport plotly.graph_objects as go\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras import layers, Input\nfrom tensorflow.keras import losses, optimizers\nfrom keras.utils.np_utils import to_categorical\nfrom keras.callbacks import EarlyStopping, LearningRateScheduler, ReduceLROnPlateau, ModelCheckpoint\nimport matplotlib.pyplot as plt","c23196ab":"train_df = pd.read_csv(\"..\/input\/mobile-price-classification\/train.csv\")","7a7351a9":"print(train_df.isnull().sum(axis=0))\nprint(train_df.info())","ac3eb627":"train = train_df.iloc[:, :-1]\nlabel = train_df.iloc[:, -1]","b371de2d":"train.head()","bd5cb080":"corr = train.corr()\n\nfig = go.Figure()\nfig.add_trace(go.Heatmap(z=corr.values, x=corr.index.values, y=corr.columns.values))\nfig.show()","9bf79de7":"mc = MinMaxScaler()\nmc.fit(train)\ntrain = mc.transform(train)","1bba90f8":"n_esti = list(range(5,16))\nmax_dep = list(range(5,16))","6c334b32":"rf = RandomForestClassifier()\nrf_param_grid = {'n_estimators' : n_esti, 'max_depth' : max_dep}\nrf_grid = GridSearchCV(estimator=rf,\n                      param_grid=rf_param_grid,\n                      scoring='accuracy',\n                      cv=4,\n                      return_train_score=True)","d78c4ebb":"rf_grid.fit(train,label)","2e083e64":"rf_grid_df = pd.DataFrame(rf_grid.cv_results_)\nrf_grid_df.loc[rf_grid_df['rank_test_score'] == 1, ]","644f4eac":"X_train, X_val, y_train, y_val = train_test_split(train, label, test_size=0.33, random_state=10, stratify=label)","67ad2ef1":"X_train = np.array(X_train)\ny_train = np.array(y_train)\nX_val = np.array(X_val)\ny_val = np.array(y_val)\ny_train = to_categorical(y_train)\ny_val = to_categorical(y_val)\n\ninput_shape = X_train.shape[1]","e66980a1":"input_tensor = Input(shape=(input_shape, ))\nx = layers.Dense(128, activation='relu')(input_tensor)\nx = layers.Dense(64, activation='relu')(x)\nx = layers.Dense(64, activation='relu')(x)\nx = layers.Dense(64, activation='relu')(x)\nx = layers.Dense(64, activation='relu')(x)\nx = layers.Dense(32, activation='relu')(x)\nx = layers.Dense(16, activation='relu')(x)\nx = layers.Dense(8, activation='relu')(x)\nx = layers.Dense(4, activation='relu')(x)\noutput_tensor = layers.Dense(4, activation='softmax')(x)\nmodel = Model(input_tensor, output_tensor)","28b8c389":"model.compile(optimizer=optimizers.Adam(), loss=losses.categorical_crossentropy, metrics=['accuracy'])","735d5d8d":"callback_list = [\n    EarlyStopping(monitor='accuracy',patience=2),\n    ReduceLROnPlateau(monitor='loss', factor=0.1, patience=1)\n]","ce24b3ea":"history = model.fit(X_train, y_train, validation_data=(X_val, y_val),\n                    callbacks=callback_list, batch_size =8, epochs=100)","770cf44e":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc)+1)\n\nplt.figure()\n\nplt.plot(epochs, acc, 'bo', label='Train Acc')\nplt.plot(epochs, val_acc, 'b', label='Val Acc')\nplt.title('Training and validation Acc')\nplt.legend()\n\nplt.figure()\n\nplt.plot(epochs, loss, 'bo', label='Train Loss')\nplt.plot(epochs, val_loss, 'b', label='Val Loss')\nplt.title('Training and validation Loss')\nplt.legend()\n\nplt.show()","d41428c2":"# Below graph, you can check correration between variables","bf045d91":"# Check Result (Train : 99%, Test : 86%)\n> best parameter is max_depth:15, n_estimator:15","03d9089d":"# Using keras simple DNN","2f4dcc57":"# 1. Load Libary","c1c33c28":"# 2. Read csv file and Preprocessing","1995fb1d":"# Apply MinMaxScaler and Randomforest algorithms"}}