{"cell_type":{"3757d3a4":"code","c654f7ed":"code","1efc7abb":"code","c1d6a0d6":"code","5c6ee667":"code","dd2e294d":"code","bae0778f":"code","59dc8571":"code","449454d8":"code","7e7a791c":"code","011bb3b8":"code","53e48650":"code","5a190d07":"code","945b88e1":"code","40be0c32":"code","03de92ac":"code","eef8e33f":"code","67a2c8f5":"code","1766f8ae":"code","a7f1465d":"code","919f928c":"code","9e6b772e":"code","50c124e5":"code","7511d7db":"code","837644eb":"code","4bb204da":"code","48ca9fcd":"code","1fb3af0d":"code","dabdee1b":"code","5b92f3c6":"code","1841fff5":"code","65cf72ca":"code","a28ff983":"markdown","9c5950cb":"markdown","b9599c10":"markdown","c877d464":"markdown","78cbba52":"markdown","926a6c6b":"markdown","d16daaf0":"markdown","981de45b":"markdown","98e0f895":"markdown","ee29701f":"markdown","72baf4ba":"markdown","0d156272":"markdown","0ce7e618":"markdown","692ef306":"markdown","abc00a42":"markdown","5f9f2e6e":"markdown","19a04f5d":"markdown","f9945ebe":"markdown","6db6ce5a":"markdown"},"source":{"3757d3a4":"import numpy as np\nimport pandas as pd \nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline","c654f7ed":"df=pd.read_csv(r\"..\/input\/metro-bike-share-trip-data.csv\")","1efc7abb":"df.info()","c1d6a0d6":"df.head()","5c6ee667":"df.tail()","dd2e294d":"print(\"shape:\",df.shape)","bae0778f":"df['Start Time']=pd.to_datetime(df['Start Time'])\ndf['End Time']=pd.to_datetime(df['End Time'])","59dc8571":"# Since Starting Lat-Long and Ending Lat-Long don't provide any extra info so we will drop it\ndf=df.drop(['Starting Lat-Long','Ending Lat-Long'],axis=1)","449454d8":"# Here I am seperating date and time of Start Time and End Time to do some further analysis \n#which are present at bottom\nnew_dates, new_times = zip(*[(d.date(),d.time()) for d in df['Start Time']])\ndf = df.assign(new_start_date=new_dates, new_start_time=new_times)\nnew_dates, new_times = zip(*[(d.date(),d.time()) for d in df['End Time']])\ndf = df.assign(new_end_date=new_dates, new_end_time=new_times)","7e7a791c":"# Now droping Start Time and End Time\ndf=df.drop(['Start Time','End Time'],axis=1)","011bb3b8":"# Time to handle missing data\ndf.isnull().sum()","53e48650":"# removing rows with null value\nprint(\"shape before:\",df.shape)\ndf=df.dropna()\nprint(\"shape after:\",df.shape)\n","5a190d07":"df.describe()","945b88e1":"# converting duration in min\ndf['Duration']\/=60\ndf['Duration'].hist(bins=80,range=(0,60))\nplt.show()","40be0c32":"#out of all pass type walk-up pass make max trips which is longer than 30 mins(78.172%)\ndf[(df['Duration']>30)][['Passholder Type','Trip ID']].groupby(['Passholder Type']).agg(['count'])\/len(df[df['Duration']>30])*100\n","03de92ac":"#From the analysis it seems that the percentage of people using monthly pass are maximum.\ndf[['Trip ID','Passholder Type','Plan Duration']].groupby(['Passholder Type','Plan Duration']).agg(['count'])\/len(df)*100\n","eef8e33f":"#Even exploring further it was found that people using monthly pass for one way are more than\n#round trip.\ndf[['Trip ID','Trip Route Category','Passholder Type']].groupby(['Trip Route Category','Passholder Type']).agg(['count'])\/len(df)*100\n","67a2c8f5":"gdf=df[['Starting Station ID','Starting Station Latitude','Starting Station Longitude']].groupby('Starting Station ID').max()\nprint('Unique stations:',gdf.shape[0])\ngdf\n","1766f8ae":"#It is clear that station 4108's longitude is missing.\n#here I am removing 4108 in order to get min max lat-long\ngdf=gdf[(gdf['Starting Station Latitude']!=0.0) & (gdf['Starting Station Longitude']!=0.0)]\nminlatitude=np.min(gdf['Starting Station Latitude'])\nmaxlatitude=np.max(gdf['Starting Station Latitude'])\nminlongitude=np.min(gdf['Starting Station Longitude'])\nmaxlongitude=np.max(gdf['Starting Station Longitude'])\nprint(\"min and max latitude:\",minlatitude,maxlatitude)\nprint(\"min and max longitude:\",minlongitude,maxlongitude)\n","a7f1465d":"#ploting station to get a better look\ns=30\nalpha=1\nfig, axs = plt.subplots(1, 1,figsize=(20,10))\naxs.scatter(gdf['Starting Station Longitude'], gdf['Starting Station Latitude'], zorder=1, alpha=alpha, c='r', s=s)\naxs.set_title('Station location ')\nplt.show()\n\n","919f928c":"# I am not sure why I am getting 3045, any suggestion will be helpful but for now i will not\n#consider it\ngdf[(gdf['Starting Station Latitude']<34.03) & (gdf['Starting Station Longitude']<-114.38)]\n","9e6b772e":"lon1, lat1, lon2, lat2 = map(np.radians, [df['Starting Station Longitude'], df['Starting Station Latitude'],df['Ending Station Longitude'], df['Ending Station Latitude']])\ndlat = lat2 - lat1 \ndlon = lon2 - lon1\na = (np.sin(dlat\/2))**2 +np.cos(lat1) * np.cos(lat2) * (np.sin(dlon\/2))**2 \nc = 2 * np.arcsin( np.sqrt(a)) \nd = 6373  * c \ndf['distance in km']=d\ndf['distance in km'].hist(bins=100,range=(0,5))\nplt.show()","50c124e5":"ndf=df[['Starting Station ID','Ending Station ID','Trip ID']]\nmask=df['Trip Route Category']=='One Way'\nkndf=ndf[mask].groupby(['Starting Station ID','Ending Station ID']).agg('count')\nkndf=kndf.reset_index()\nklistofindex=[kndf[kndf['Starting Station ID']==x]['Trip ID'].idxmax() for x in kndf['Starting Station ID'].unique()]\nkndf=kndf.loc[klistofindex]   \nplt.figure(figsize=(25,15))\nplt.scatter(x=kndf['Starting Station ID'],y=kndf['Ending Station ID'],c=kndf['Trip ID'],s=kndf['Trip ID'])\nplt.axis([3000.0,3093.0,3000.0,3093.0])\nplt.xlabel('Starting Station ID')\nplt.ylabel('Ending Station ID')\nplt.colorbar()\nplt.show()\n\n","7511d7db":"#incase scatter plot is not understandable we can look the table.\nlistofdistance=[]\nfor x in zip(kndf['Starting Station ID'],kndf['Ending Station ID']):\n    mask=((df['Starting Station ID']==x[0])& (df['Ending Station ID']==x[1]))\n    listofdistance.append(np.mean(df[mask]['distance in km']))\nkndf['distance']=listofdistance\nmask=(kndf['Starting Station ID']==3009.0)|(kndf['Starting Station ID']==3039.0)\nkndf[mask]","837644eb":"kndf","4bb204da":"rndf=df[['Starting Station ID','Trip ID']]\nmask1=df['Trip Route Category']=='Round Trip'\nrndf=rndf[mask1].groupby('Starting Station ID').count()\nrndf=rndf.reset_index()\nprint('Station which is popular or has max round trip',rndf.iloc[np.argmax(rndf['Trip ID'])])\nplt.figure(figsize=(25,10))\nrndf.plot(x='Starting Station ID', y='Trip ID')\nplt.axis([3000.0,3093.0,0,600])\nplt.xlabel('Starting Station ID')\nplt.ylabel('No of round Trip')\nplt.show()\n","48ca9fcd":"#Total no of trip which ended next day.(duration less than 24hr)\nnotendedsameday=(df['new_start_date']!=df['new_end_date'])\nnotendedsameday.sum()","1fb3af0d":"startdaytime=pd.to_datetime('00:00:00',format='%H:%M:%S').time()\nenddaytime=pd.to_datetime('11:59:59',format='%H:%M:%S').time()\nstartnighttime=pd.to_datetime('12:00:00',format='%H:%M:%S').time()\nendnighttime=pd.to_datetime('23:59:59',format='%H:%M:%S').time()\nmask1=(df['Trip Route Category']=='One Way')\nmask2=(df['Trip Route Category']=='Round Trip')\nmask3 = (df['new_start_time'] > startdaytime) & (df['new_start_time'] <= enddaytime )& mask1\nmask4 = (df['new_start_time'] > startdaytime) & (df['new_start_time'] <= enddaytime )& mask2\nmask5 = (df['new_start_time'] > startnighttime) & (df['new_start_time'] <= endnighttime)& mask1\nmask6= (df['new_start_time'] > startnighttime) & (df['new_start_time'] <= endnighttime)& mask2\nprint('Percentage of one way trip in first 12 hr:',df[mask3]['Trip ID'].count()\/df[mask1]['Trip ID'].count()*100)\nprint('Percentage of one way trip in next 12 hr:',df[mask5]['Trip ID'].count()\/df[mask1]['Trip ID'].count()*100)\nprint('Percentage of round trip in first 12hr:',df[mask4]['Trip ID'].count()\/df[mask2]['Trip ID'].count()*100)\nprint('Percentage of round trip in next 12 hr:',df[mask6]['Trip ID'].count()\/df[mask2]['Trip ID'].count()*100)\nprint('maximum one way trip in first 12hr happens from station:', df[mask3].groupby('Starting Station ID').count()['Trip ID'].idxmax()) \nprint('maximum round trip in first 12hr happens from station:',df[mask4].groupby('Starting Station ID').count()['Trip ID'].idxmax())\nprint('maximum one way trip in next 12hr happens from station:',df[mask5].groupby('Starting Station ID').count()['Trip ID'].idxmax()) \nprint('maximum round trip in next 12hr happens from station:',df[mask6].groupby('Starting Station ID').count()['Trip ID'].idxmax())\n\n                                                                                         ","dabdee1b":"#The peak time for all the pass type.\nnnst=pd.DataFrame([(d.hour+d.minute\/60) for d in df['new_start_time']])\nnnst['Passholder Type']=df['Passholder Type']\nfor ph in ['Monthly Pass','Walk-up','Flex Pass']:\n    (nnst[nnst['Passholder Type']==ph][0]).hist(bins=200,figsize=(25,10))\n    plt.xlabel('hour of day')\n    plt.ylabel('count')\n    plt.title(ph)\n    plt.show()\n","5b92f3c6":"dnst=pd.DataFrame([(d.day) for d in df['new_start_date']])\ndnst['Passholder Type']=df['Passholder Type']\nfor ph in ['Monthly Pass','Walk-up','Flex Pass']:\n    (dnst[dnst['Passholder Type']==ph][0]).hist(bins=100,figsize=(25,10))\n    plt.xlabel('days of month')\n    plt.ylabel('count')\n    plt.title(ph)\n    plt.show()","1841fff5":"mnst=pd.DataFrame([(d.month) for d in df['new_start_date']])\nmnst['Passholder Type']=df['Passholder Type']\nfor ph in ['Monthly Pass','Walk-up','Flex Pass']:\n    (mnst[mnst['Passholder Type']==ph][0]).hist(bins=200,figsize=(25,10))\n    plt.xlabel('months')\n    plt.ylabel('count')\n    plt.title(ph)\n    plt.show()","65cf72ca":"#The bike ID which has max trip\nbdf=df[['Bike ID','Trip ID']].groupby('Bike ID').count().unstack()\nbdf.plot(figsize=(25,10))\nplt.show()\nprint(\"bike mostly used:\",bdf.idxmax()[1])","a28ff983":"EXPLORE THE COLUMNS AND THEIR TYPES...","9c5950cb":"I wanted to know which ending station has maximum one way trip from a certain starting station.Even amongst all the popular routes,route from station 3031 to 3014 is mostly used for one way with 927 trips in between.(yellow dot)","b9599c10":"DISPLAY THE FIRST FEW ROW...","c877d464":"ANALYSIS OF WHICH PASS IS FAMOUS...","78cbba52":"From latitude and longitude of starting and ending station we can kind of estimate distance between the station.After seeing the statistic of distance i found that max distance is about 12580,and this is mainly because station 4108's longitude value is 0.0.","926a6c6b":"ANALYSIS ON STATIONS...","d16daaf0":"It seems that majority of the trips are 5-30 minutes long beacuse according to la metro rides less than 30 min are free for all pass type and after that they charge 1.75 dollar for each 30 min.\n","981de45b":"CONCLUSION DRAWN BY JUST LOOKING INTO FIRST FEW ROWS\n\n1.Trip id provide no additional info and is just like index.\n\n2.Info provided by Starting Lat-Long and Ending Lat-Long is redundant.\n\n3.Plan duration provide no extra info since passholder type already convey the plan duration.\n\n4.Seperating date and time of Start Time and End Time can give further insights about data.","98e0f895":"START BY IMPORTING IMPORTANT LIBRARIES...","ee29701f":"One way and round trips occured from time 0 to 11.59.59 and from time 12 to 23.59.59,it was found that there 29% one way and 23% round trip taken during night and ealy morning. and  stations which are popular for one way and round trip during each segment are stated below:","72baf4ba":"READ CSV FILE...","0d156272":"These two stations are farthest from the closely knit cluster of other stations. ","0ce7e618":"ANALYSIS OF DATE AND TIME ...","692ef306":"The no of round trip taken from each station.","abc00a42":"If there are any issues with the kernel please do comment, maybe I can improve it.","5f9f2e6e":" In above graphs for april to june there is no data.","19a04f5d":"From the plot we can see that 0km has frequency near about 14000, they are actually depicting frequency of round trip.Then all the stations are generally 0-4 km away from others.. ","f9945ebe":"From station 3009 maximum no. of one way trips are made to 3039and vice-versa, may be because it is closest in comaprison to other station.","6db6ce5a":"LETS DO ANALYSIS ON TRIP DURATION ..."}}