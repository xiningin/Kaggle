{"cell_type":{"cef190a5":"code","323ab999":"code","abbdb0be":"code","d4cfcc72":"code","ff66c485":"code","eab8282a":"code","76421851":"code","72956a0d":"code","6882e94c":"code","8726dbda":"code","33c5e64e":"code","a7ad0d3a":"code","606c6f84":"code","45c2ec5c":"code","54de70e1":"code","864901c9":"code","8c16976c":"code","6612a779":"code","3a5602bf":"code","77ac6f16":"code","15059b28":"code","04eb49f0":"code","65291e74":"code","7e489736":"code","7bd9d6d7":"code","be17e3bb":"code","2abb531c":"code","f701ff51":"code","b063fed0":"code","2064390c":"code","86d12d05":"code","a4bee456":"code","aca197e0":"code","c5a9d7e8":"code","db243ab0":"code","5cd10f62":"code","139821de":"code","29cd91e5":"code","ed09286b":"code","64ffe88d":"code","97ef02af":"code","db722973":"code","14a73d8b":"code","47997bcf":"code","54f5801b":"code","30c8cca0":"code","499b2f15":"code","5e688fc8":"code","5a017ac2":"code","8b82436c":"code","2fdc9c22":"code","9ae679e4":"code","1338016b":"code","bd13c83d":"code","ff3dbfd3":"code","305689e2":"code","0a5a05ab":"code","48d966cf":"code","2f286c87":"code","3310a197":"code","4ce00eb6":"code","0a640185":"code","a149251a":"code","f6ea1f22":"code","4c24b849":"code","ea15d709":"markdown","b896ff08":"markdown","4ab2d313":"markdown","2659995c":"markdown","fb4f6ba4":"markdown","fc298ee4":"markdown","8fd6527d":"markdown","f6ca3f1e":"markdown","3d2efd28":"markdown","d041f912":"markdown","5acefd86":"markdown","2b544fc6":"markdown","1ddd9c74":"markdown","399bc658":"markdown","05501855":"markdown","fdd836a3":"markdown","6fe6e746":"markdown","0d591af2":"markdown","2d8255ba":"markdown","4e9e260d":"markdown","dc3110ca":"markdown","fdeb2d01":"markdown","b798cad0":"markdown","9289f536":"markdown","3fd657ae":"markdown","b08ff3cf":"markdown","e16d1385":"markdown","5920e0d3":"markdown","1c6b0a50":"markdown"},"source":{"cef190a5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nimport sklearn.metrics as metrics\n\nfrom sklearn.metrics import accuracy_score,roc_auc_score,precision_score, recall_score,f1_score,classification_report\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n","323ab999":"df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n","abbdb0be":"df.columns","d4cfcc72":"df.head()","ff66c485":"test_df.head()","eab8282a":"df.isnull().sum()","76421851":"test_df.isnull().sum()","72956a0d":"null_feat = pd.DataFrame(len(df['Id']) - df.isnull().sum(), columns = ['Count'])\n\ntrace = go.Bar(x = null_feat.index, y = null_feat['Count'] ,opacity = 0.8, marker=dict(color = 'lightgrey', line=dict(color='#000000',width=1.5)))\n\nlayout = dict(title =  \"Missing Values\")\n                    \nfig = dict(data = [trace], layout=layout)\npy.iplot(fig)","6882e94c":"null_feat = pd.DataFrame(len(test_df['Id']) - test_df.isnull().sum(), columns = ['Count'])\n\ntrace = go.Bar(x = null_feat.index, y = null_feat['Count'] ,opacity = 0.8, marker=dict(color = 'lightgrey', line=dict(color='#000000',width=1.5)))\n\nlayout = dict(title =  \"Missing Values\")\n                    \nfig = dict(data = [trace], layout=layout)\npy.iplot(fig)","8726dbda":"df.shape","33c5e64e":"test_df.shape","a7ad0d3a":"df.info()\n","606c6f84":"test_df.info()","45c2ec5c":"df['LotFrontage']=df['LotFrontage'].fillna(df['LotFrontage'].mean())\n","54de70e1":"numerical_columns = ['BsmtCond', 'BsmtQual', 'FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','MasVnrType','MasVnrArea','BsmtExposure','BsmtFinType2']\n# Replace  NaN values with the most frequent value\nfor col in numerical_columns:\n    \n    df[col].fillna(df[col].mode()[0], inplace=True)\n","864901c9":"# Replace  NaN values with the most frequent value\nfor col in numerical_columns:\n    \n    df[col].fillna(df[col].mode()[0], inplace=True)\n","8c16976c":"\ndf.drop(['Id','Alley','GarageYrBlt','PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\n","6612a779":"df.isnull().sum()\n","3a5602bf":"df.dropna(inplace=True)","77ac6f16":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False)\n","15059b28":"test_df['LotFrontage']=test_df['LotFrontage'].fillna(test_df['LotFrontage'].mean())\n","04eb49f0":"\n# Replace  NaN values with the most frequent value\nfor col in numerical_columns:\n    \n    test_df[col].fillna(test_df[col].mode()[0], inplace=True)\n","65291e74":"test_df['MSZoning']=test_df['MSZoning'].fillna(test_df['MSZoning'].mode()[0])\ntest_df['BsmtExposure']=test_df['BsmtExposure'].fillna(test_df['BsmtExposure'].mode()[0])\n\n","7e489736":"test_df.drop(['Id','Alley','GarageYrBlt','PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\n","7bd9d6d7":"test_df['Utilities']=test_df['Utilities'].fillna(test_df['Utilities'].mode()[0])\ntest_df['Exterior1st']=test_df['Exterior1st'].fillna(test_df['Exterior1st'].mode()[0])\ntest_df['Exterior2nd']=test_df['Exterior2nd'].fillna(test_df['Exterior2nd'].mode()[0])\ntest_df['BsmtFinType1']=test_df['BsmtFinType1'].fillna(test_df['BsmtFinType1'].mode()[0])\ntest_df['BsmtFinSF1']=test_df['BsmtFinSF1'].fillna(test_df['BsmtFinSF1'].mean())\ntest_df['BsmtFinSF2']=test_df['BsmtFinSF2'].fillna(test_df['BsmtFinSF2'].mean())\ntest_df['BsmtUnfSF']=test_df['BsmtUnfSF'].fillna(test_df['BsmtUnfSF'].mean())\ntest_df['TotalBsmtSF']=test_df['TotalBsmtSF'].fillna(test_df['TotalBsmtSF'].mean())\ntest_df['BsmtFullBath']=test_df['BsmtFullBath'].fillna(test_df['BsmtFullBath'].mode()[0])\ntest_df['BsmtHalfBath']=test_df['BsmtHalfBath'].fillna(test_df['BsmtHalfBath'].mode()[0])\ntest_df['KitchenQual']=test_df['KitchenQual'].fillna(test_df['KitchenQual'].mode()[0])\ntest_df['Functional']=test_df['Functional'].fillna(test_df['Functional'].mode()[0])\ntest_df['GarageCars']=test_df['GarageCars'].fillna(test_df['GarageCars'].mean())\ntest_df['GarageArea']=test_df['GarageArea'].fillna(test_df['GarageArea'].mean())\ntest_df['SaleType']=test_df['SaleType'].fillna(test_df['SaleType'].mode()[0])","be17e3bb":"sns.heatmap(test_df.isnull(),yticklabels=False,cbar=False,cmap='viridis')\n","2abb531c":"test_df.loc[:, test_df.isnull().any()].head()\n","f701ff51":"df.shape","b063fed0":"#descriptive statistics summary\ndf['SalePrice'].describe()","2064390c":"#histogram\nsns.distplot(df['SalePrice']);","86d12d05":"#scatter plot grlivarea\/saleprice\nvar = 'GrLivArea'\ndata = pd.concat([df['SalePrice'], df[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","a4bee456":"#scatter plot totalbsmtsf\/saleprice\nvar = 'TotalBsmtSF'\ndata = pd.concat([df['SalePrice'], df[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","aca197e0":"#box plot overallqual\/saleprice\nvar = 'OverallQual'\ndata = pd.concat([df['SalePrice'], df[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","c5a9d7e8":"var = 'YearBuilt'\ndata = pd.concat([df['SalePrice'], df[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nplt.xticks(rotation=90);","db243ab0":"#correlation matrix\ncorrmat = df.corr()\nf, ax = plt.subplots(figsize=(30, 15))\nsns.heatmap(corrmat,annot=True);","5cd10f62":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","139821de":"cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']","29cd91e5":"#scatterplot\nsns.set()\nsns.pairplot(df[cols], height = 2.5)\nplt.show();","ed09286b":"columns=['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood',\n         'Condition2','BldgType','Condition1','HouseStyle','SaleType',\n        'SaleCondition','ExterCond',\n         'ExterQual','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n        'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','Heating','HeatingQC',\n         'CentralAir',\n         'Electrical','KitchenQual','Functional',\n         'FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive']","64ffe88d":"def category_onehot_multcols(multcolumns):\n    df_final=final_df\n    i=0\n    for fields in multcolumns:\n        \n        print(fields)\n        df1=pd.get_dummies(final_df[fields],drop_first=True)\n        \n        final_df.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([final_df,df_final],axis=1)\n        \n    return df_final","97ef02af":"main_df=df.copy()","db722973":"final_df = pd.concat([df, test_df], axis=0)","14a73d8b":"final_df.head()","47997bcf":"final_df.shape","54f5801b":"final_df=category_onehot_multcols(columns)","30c8cca0":"final_df.shape","499b2f15":"final_df =final_df.loc[:,~final_df.columns.duplicated()]\n","5e688fc8":"final_df.shape\n","5a017ac2":"df_Train=final_df.iloc[:1422,:]\ndf_Test=final_df.iloc[1422:,:]","8b82436c":"df_Test.shape","2fdc9c22":"df_Train.shape","9ae679e4":"df_Test.head()\n","1338016b":"df_Train.shape\n","bd13c83d":"df_Test.head()","ff3dbfd3":"x_train=df_Train.drop(['SalePrice'],axis=1)\ny_train=df_Train['SalePrice']","305689e2":"y_test=df_Test['SalePrice']\nx_test=df_Test.drop(['SalePrice'],axis=1)","0a5a05ab":"from xgboost import XGBRegressor\n\nxgbr=XGBRegressor(verbosity=0)\nprint(xgbr)","48d966cf":"xgbr.fit(x_train,y_train)","2f286c87":"score= xgbr.score(x_train,y_train)\nprint('Training score : ', score)","3310a197":"\nfrom sklearn.model_selection import cross_val_score, KFold\n\nscores = cross_val_score(xgbr, x_train, y_train,cv=10)\nprint(\"Mean cross-validation score: %.2f\" % scores.mean())","4ce00eb6":"kfold = KFold(n_splits=10, shuffle=True)\nkf_cv_scores = cross_val_score(xgbr, x_train, y_train, cv=kfold )\nprint(\"K-fold CV average score: %.2f\" % kf_cv_scores.mean())\ny_pred = xgbr.predict(x_test)\n","0a640185":"from lightgbm import LGBMRegressor\n\nmodel_lgbm = LGBMRegressor(objective='regression', \n                                       num_leaves=4,\n                                       learning_rate=0.01, \n                                       n_estimators=12000, \n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.4, \n                                       )\n\n#Fitting\nmodel_lgbm.fit(x_train, y_train,eval_metric='rmse')\n\nkf_cv_scores = cross_val_score(model_lgbm, x_train, y_train, cv=kfold )\n\nprint(\"K-fold CV average score: %.2f\" % kf_cv_scores.mean())\n\ny_pred2 = model_lgbm.predict(x_test)\n","a149251a":"from sklearn.ensemble import RandomForestRegressor\n\nregr = RandomForestRegressor(max_depth=2, random_state=0)\nregr.fit(x_train, y_train)\npredictions = regr.predict(x_test)","f6ea1f22":"kfold = KFold(n_splits=10, shuffle=True)\nkf_cv_scores = cross_val_score(regr, x_train, y_train, cv=kfold )\nprint(\"K-fold CV average score: %.2f\" % kf_cv_scores.mean())\nscores = cross_val_score(regr, x_train, y_train,cv=10)\nprint(\"Mean cross-validation score: %.2f\" % scores.mean())","4c24b849":"sample_submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ndata={\"Id\":[],\"SalePrice\":[]}\nfor id,pred in zip(sample_submission['Id'].unique(),predictions): \n    data[\"Id\"].append(id) \n    data[\"SalePrice\"].append(pred)\n\n    \noutput=pd.DataFrame(data,columns=[\"Id\",\"SalePrice\"])\noutput\nprint(output)\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","ea15d709":"No more null Values !\n","b896ff08":"There's pleny of missing values so im planing to drop some values , where number of missing values of higher then 50% of the values .\nAnd we will try to fill the missing values \nfor both test and train dataframe","4ab2d313":"1. Train dataframe ","2659995c":"### Handle Categorical Features","fb4f6ba4":"Read the datasets","fc298ee4":"#### **After cleaning the 2 datasets lets do some data exploration** ","8fd6527d":"**Correlation matrix (heatmap style)**","f6ca3f1e":"Or if you want to use the KFlold method in cross-validation it goes as below.\n","3d2efd28":"Let's check again if we have any null values now.","d041f912":"Let's take a look t the column names ","5acefd86":"# Preparing data\n","2b544fc6":"First things first: analysing 'SalePrice'","1ddd9c74":"## Random Forest Regressor ","399bc658":"# XGBRegressor","05501855":"# Model with LightGBM Regressor","fdd836a3":"#### In summary\nWe can conclude that:\n\n'GrLivArea' and 'TotalBsmtSF' seem to be linearly related with 'SalePrice'. Both relationships are positive, which means that as one variable increases, the other also increases. In the case of 'TotalBsmtSF', we can see that the slope of the linear relationship is particularly high.\n'OverallQual' and 'YearBuilt' also seem to be related with 'SalePrice'. The relationship seems to be stronger in the case of 'OverallQual', where the box plot shows how sales prices increase with the overall quality.\nWe just analysed four variables, but there are many other that we should analyse","6fe6e746":"2. Test DataFrame","0d591af2":"We are Dropping \n* Id\n* Alley\n* GarageYrBlt\n* PoolQC\n* Fence\n* MiscFeature\n","2d8255ba":"**Relationship with numerical variables**\n","4e9e260d":"#### Relationship with categorical features","dc3110ca":"# Defining and fitting the model\n\n For the regression problem, we'll use the XGBRegressor class of the xgboost package and we can define it with its default parameters. You can also set the new parameter values according to your data characteristics.","fdeb2d01":"'SalePrice' correlation matrix","b798cad0":"Let's do the same for the test dataset ","9289f536":"Next, we'll fit the model with train data.\n","3fd657ae":"We can also apply the cross-validation method to evaluate the training score.\n","b08ff3cf":"### Fill Missing Values ","e16d1385":"#### No more null values !Great  !\n","5920e0d3":"train.csv - the training set\ntest.csv - the test set","1c6b0a50":"# Predicting and checking the results\n\nAfter training the model, we'll check the model training score.\n"}}