{"cell_type":{"fe3d16e5":"code","6118b33a":"code","5bc13836":"code","8780230a":"code","0b6cf4ce":"code","7fbb0b11":"code","881a6622":"code","8e3a63c6":"code","0a947638":"code","f23dea0e":"code","1935bbf2":"code","19b5dbc7":"code","f0e090bf":"code","c2c899f9":"code","a327ba48":"code","fad71b59":"code","acc8b128":"code","15c7b3af":"code","b7309191":"code","b9e28709":"code","f3af5323":"code","70a77400":"code","f17245ca":"code","7c7c7f86":"code","2f6fc021":"code","84d07d83":"code","4358c218":"code","50dd5db5":"code","8b470f2f":"markdown","01f4ad36":"markdown","cb53c189":"markdown","d564cd6e":"markdown","f5b6e2c2":"markdown","cdebfcd6":"markdown","eb6cfd5a":"markdown","2fc9bd41":"markdown","0ed8b384":"markdown","15618a73":"markdown","8b8071ec":"markdown","5488f66c":"markdown","3a334eea":"markdown","e10ed59c":"markdown","46250cfc":"markdown","eab3a3e0":"markdown","052e5890":"markdown","0f4a769f":"markdown","72691ee9":"markdown","dcc243ef":"markdown"},"source":{"fe3d16e5":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport re as re","6118b33a":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\ndata = train.append(test) # The entire data: train + test.","5bc13836":"train['Sex'].replace(['male','female'],[0,1], inplace=True)\ntest['Sex'].replace(['male','female'],[0,1], inplace=True)","8780230a":"data['Embarked'].fillna(('S'), inplace=True)\ndata['Embarked'] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain['Embarked'] = data['Embarked'][:len(train)]\ntest['Embarked'] = data['Embarked'][len(train):]","0b6cf4ce":"data['Fare'].fillna(np.mean(data['Fare']), inplace=True)\ndata['Categorical_Fare'] = pd.qcut(data['Fare'], 4, labels=False)\n\ntrain['Categorical_Fare'] = data['Categorical_Fare'][:len(train)]\ntest['Categorical_Fare'] = data['Categorical_Fare'][len(train):]","7fbb0b11":"age_avg = data['Age'].mean()\nage_std = data['Age'].std()\n\ndata['Age'].fillna(np.random.randint(age_avg - age_std, age_avg + age_std), inplace=True)\ndata['Categorical_Age'] = pd.cut(data['Age'], 5, labels=False)\n\ntrain['Categorical_Age'] = data['Categorical_Age'][:len(train)]\ntest['Categorical_Age'] = data['Categorical_Age'][len(train):]","881a6622":"# Dropping Title feature\ndef get_title(name):\n\ttitle_search = re.search(' ([A-Za-z]+)\\.', name)\n\t# If the title exists, extract and return it.\n\tif title_search:\n\t\treturn title_search.group(1)\n\treturn \"\"\n\ndata['Title'] = data['Name'].apply(get_title)\n\ndata['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare', inplace=True)\n\ndata['Title'].replace(['Mlle','Ms','Mme'],['Miss','Miss','Mrs'], inplace=True)\n\ntitle_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\ndata['Title'] = data['Title'].map(title_mapping)\ndata['Title'].fillna(0, inplace=True)","8e3a63c6":"delete_columns = ['Fare', 'Age', 'Name', 'PassengerId', 'SibSp', 'Parch', 'Ticket', 'Cabin']\ntrain.drop(delete_columns, axis = 1, inplace = True)\ntest.drop(delete_columns, axis = 1, inplace = True)","0a947638":"train.head()","f23dea0e":"X = train.drop('Survived', axis = 1)\ny = train['Survived']\nX_test = test.copy()","1935bbf2":"from sklearn.preprocessing import StandardScaler\nstd_scaler = StandardScaler()\nX = std_scaler.fit_transform(X)\nX_test = std_scaler.transform(X_test)","19b5dbc7":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\n\nn_neighbors = list(range(5,20,1))\nalgorithm = ['auto']\nweights = ['uniform', 'distance']\nleaf_size = list(range(1,50,5))\nhyperparams = {'algorithm': algorithm, 'weights': weights, 'leaf_size': leaf_size, \n               'n_neighbors': n_neighbors}\ngd = GridSearchCV(estimator = KNeighborsClassifier(), param_grid = hyperparams, verbose=True, \n                cv=10, scoring = \"roc_auc\", n_jobs=10)\ngd.fit(X, y)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","f0e090bf":"gd.best_estimator_.fit(X, y)\ny_pred = gd.best_estimator_.predict(test)","c2c899f9":"temp = pd.DataFrame(pd.read_csv(\"..\/input\/test.csv\")['PassengerId'])\ntemp['Survived'] = list(map(int, y_pred))\ntemp.to_csv(\"submission.csv\", index = False)","a327ba48":"%matplotlib inline \nimport matplotlib.pyplot as plt\nimport seaborn as sns","fad71b59":"data['Family_Size'] = data['Parch'] + data['SibSp'] + 1\n\ntrain['Family_Size'] = data['Family_Size'][:len(train)]\ntest['Family_Size'] = data['Family_Size'][len(train):]","acc8b128":"sns.countplot(x='Family_Size', data = train, hue = 'Survived')","15c7b3af":"X = train.drop('Survived', axis = 1)\ny = train['Survived']\nX_test = test.copy()","b7309191":"std_scaler = StandardScaler()\nX = std_scaler.fit_transform(X)\nX_test = std_scaler.transform(X_test)","b9e28709":"n_neighbors = list(range(5,20,1))\nalgorithm = ['auto']\nweights = ['uniform', 'distance']\nleaf_size = list(range(1,50,5))\nhyperparams = {'algorithm': algorithm, 'weights': weights, 'leaf_size': leaf_size, \n               'n_neighbors': n_neighbors}\ngd = GridSearchCV(estimator = KNeighborsClassifier(), param_grid = hyperparams, verbose=True, \n                cv=10, scoring = \"roc_auc\", n_jobs=10)\ngd.fit(X, y)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","f3af5323":"gd.best_estimator_.fit(X, y)\ny_pred = gd.best_estimator_.predict(test)","70a77400":"temp = pd.DataFrame(pd.read_csv(\"..\/input\/test.csv\")['PassengerId'])\ntemp['Survived'] = list(map(int, y_pred))\ntemp.to_csv(\"submission_add_family_size.csv\", index = False)","f17245ca":"data['IsAlone'] = 0\ndata.loc[data['Family_Size'] == 1, 'IsAlone'] = 1\n\ntrain['IsAlone'] = data['IsAlone'][:len(train)]\ntest['IsAlone'] = data['IsAlone'][len(train):]","7c7c7f86":"X = train.drop('Survived', axis = 1)\ny = train['Survived']\nX_test = test.copy()","2f6fc021":"std_scaler = StandardScaler()\nX = std_scaler.fit_transform(X)\nX_test = std_scaler.transform(X_test)","84d07d83":"n_neighbors = list(range(5,20,1))\nalgorithm = ['auto']\nweights = ['uniform', 'distance']\nleaf_size = list(range(1,50,5))\nhyperparams = {'algorithm': algorithm, 'weights': weights, 'leaf_size': leaf_size, \n               'n_neighbors': n_neighbors}\ngd = GridSearchCV(estimator = KNeighborsClassifier(), param_grid = hyperparams, verbose=True, \n                cv=10, scoring = \"roc_auc\", n_jobs=10)\ngd.fit(X, y)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","4358c218":"gd.best_estimator_.fit(X, y)\ny_pred = gd.best_estimator_.predict(test)","50dd5db5":"temp = pd.DataFrame(pd.read_csv(\"..\/input\/test.csv\")['PassengerId'])\ntemp['Survived'] = list(map(int, y_pred))\ntemp.to_csv(\"submission_add_family_size_and_isalone.csv\", index = False)","8b470f2f":"- **Making submission**","01f4ad36":" - **Scaling features**","cb53c189":"## 1. Pclass ##\nThere is no missing value on this feature.","d564cd6e":"You can see 2 findings:\n1. Family_Size >= 5 may also lead to bad survival rate.\n1. Family_Size == 1 may lead to bad survival rate.","f5b6e2c2":"Create new feature called Family Size, just Parch + SibSp.","cdebfcd6":"# Classification #","eb6cfd5a":"## Grid Search CV ##\n \n Here I use KNN.","2fc9bd41":"## 5. Age ##\nThere are plenty of missing values in this feature. Generate random numbers between (mean - std) and (mean + std), categorized into 5 range.","0ed8b384":" - **Using a model found by grid searching**","15618a73":"# New Feature Creation #","8b8071ec":"## Data Cleaning ##","5488f66c":"# Features Engineering","3a334eea":"This kernel is inspired by the following:\n- https:\/\/www.kaggle.com\/konstantinmasich\/titanic-0-82-0-83  \n- https:\/\/www.kaggle.com\/sinakhorami\/titanic-best-working-classifier?scriptVersionId=566580","e10ed59c":"Let's go further and categorize people to check whether they are alone in this ship or not.","46250cfc":"## 4. Fare ##\nFare also has some missing value and replaced them with mean, and categorized into 4 ranges.","eab3a3e0":" - **Creating X and y**","052e5890":"## 3. Embarked ##\nEmbarked feature has some missing values, filled with the most occurred value ( 'S' ).","0f4a769f":"## 6. Name ##\nInside this feature, there are titles of people.","72691ee9":"## Loading datasets","dcc243ef":"## 2. Sex ##\nThere is no missing value on this feature, but mapping is needed."}}