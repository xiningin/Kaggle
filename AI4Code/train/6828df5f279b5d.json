{"cell_type":{"1dc59077":"code","0b353c68":"code","5bfbc17a":"code","c6efd143":"code","a40e8fcf":"code","1b199950":"code","8a992011":"code","da83ec10":"code","1b837001":"code","5e472e67":"code","8aadf1ea":"code","bf6036ff":"code","d6eaeebc":"code","8cb6dd40":"code","fbb64704":"code","1d359488":"code","726520fe":"code","cb59982b":"code","d765d8f5":"code","56f55071":"code","5b5a390d":"code","5a38277d":"code","c7ded511":"code","a1b8ab8d":"code","36e90653":"code","b2e7c3b5":"code","55de00e0":"code","031d66e7":"code","f4a29e91":"code","f380e13a":"code","cf8123c3":"code","962cf0c7":"code","5a8916d1":"code","1d8007ee":"code","da36f604":"code","ce1b5157":"code","ce8e540e":"code","65bcbed2":"markdown","b6f53104":"markdown","0a3356ce":"markdown","5d7c770d":"markdown","d9b909f4":"markdown","c7b1e6e8":"markdown","4acb00b4":"markdown","9899f5d6":"markdown","3e351af3":"markdown","cbb44a7a":"markdown","c26e705e":"markdown","607b03db":"markdown","a6836eb4":"markdown","adf8ef53":"markdown","13be9bd0":"markdown","ee46ec66":"markdown","b2385ed5":"markdown","ce7a8e75":"markdown","4005f80f":"markdown","d30a3cc5":"markdown","34acaff1":"markdown","d3bb6925":"markdown","e3770bc1":"markdown","9954c9c6":"markdown","b26f12ed":"markdown","7410d3e0":"markdown","df886478":"markdown","8a286e16":"markdown","c21818d1":"markdown","1bea088a":"markdown","06c26ec4":"markdown","64dc6f8c":"markdown","218aa910":"markdown","4b0a9bde":"markdown","3f544df3":"markdown","4d7dc573":"markdown","23b90bb6":"markdown","ca64d3af":"markdown","ce027f56":"markdown","0c3c4634":"markdown","1f06d110":"markdown","2f03114c":"markdown","a8d9cd0c":"markdown","56b3ee05":"markdown"},"source":{"1dc59077":"# main libraries\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\n\nfrom tensorflow.keras.layers import Dense,Conv2D,MaxPool2D,Flatten,Dropout,BatchNormalization\nfrom tensorflow.keras.optimizers import Adam\nprint('version of tensorflow :',tf.__version__)\n\n# supporting libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import VarianceThreshold\nimport os\nfrom skimage import data, color\nfrom skimage.transform import rescale, resize, downscale_local_mean\nimport matplotlib.image as mpimg\n\n# for confusion matrix plotting\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import multilabel_confusion_matrix,confusion_matrix","0b353c68":"link='\/kaggle\/input\/flowers-recognition\/flowers\/'","5bfbc17a":"import os\nfor file in os.listdir(link):\n    print(link+file)","c6efd143":"k=0\nfor fil in os.listdir('\/kaggle\/input\/flowers-recognition\/flowers\/daisy\/'):\n  link='\/kaggle\/input\/flowers-recognition\/flowers\/daisy\/'+fil\n  img=mpimg.imread(link)\n  plt.imshow(img)\n  plt.show()\n  k+=1\n  if k==3:\n    break","a40e8fcf":"k=0\nfor fil in os.listdir('\/kaggle\/input\/flowers-recognition\/flowers\/daisy\/'):\n  link='\/kaggle\/input\/flowers-recognition\/flowers\/daisy\/'+fil\n  img=mpimg.imread(link)\n  img=resize(img,(48,48,3),anti_aliasing=True)\n  plt.imshow(img)\n  plt.show()\n  k+=1\n  if k==3:\n    break\n  ","1b199950":"# function to create ataframes from the images of a single folder\n\n\ndef create_dataframe(path,arr,label):\n   for fil in os.listdir(path):\n     link=path+fil\n     if link[-3:]=='pyc' or link[-2:]=='py':\n       continue\n     img=mpimg.imread(link)\n     img=resize(img,(48,48,3),anti_aliasing=True)\n     img=img.reshape(6912)\n     arr.append(img)\n   xx=np.ones(len(arr))*label\n   arr=pd.DataFrame(arr)\n   xx=pd.DataFrame({'label':xx})\n   arr=pd.concat([xx,arr],axis=1)\n   return arr","8a992011":"daisy=[]\ndaisy=create_dataframe('\/kaggle\/input\/flowers-recognition\/flowers\/daisy\/',daisy,0)\n","da83ec10":"type(daisy)","1b837001":"daisy.head()","5e472e67":"sunflower=[]\nsunflower=create_dataframe('\/kaggle\/input\/flowers-recognition\/flowers\/sunflower\/',sunflower,1)\nsunflower.head()","8aadf1ea":"rose=[]\nrose=create_dataframe('\/kaggle\/input\/flowers-recognition\/flowers\/rose\/',rose,2)\nrose.head()","bf6036ff":"dandelion=[]\ndandelion=create_dataframe('\/kaggle\/input\/flowers-recognition\/flowers\/dandelion\/',dandelion,3)\ndandelion.head()","d6eaeebc":"tulip=[]\ntulip=create_dataframe('\/kaggle\/input\/flowers-recognition\/flowers\/tulip\/',tulip,4)\ntulip.head()","8cb6dd40":"len(daisy),len(sunflower),len(rose),len(dandelion),len(tulip)","fbb64704":"tr1=daisy.drop('label',1)\nts1=daisy['label']\n\nX_train,X_test,y_train,y_test=train_test_split(tr1,ts1,test_size=0.2,random_state=0)\ny_train=pd.DataFrame(y_train)\ny_test=pd.DataFrame(y_test)\n\ntr1=sunflower.drop('label',1)\nts1=sunflower['label']\nx,xx,y,yy=train_test_split(tr1,ts1,test_size=0.2,random_state=0)\nX_train=pd.concat([X_train,x],axis=0)\nX_test=pd.concat([X_test,xx],axis=0)\ny=pd.DataFrame(y)\nyy=pd.DataFrame(yy)\ny_train=pd.concat([y_train,y],axis=0)\ny_test=pd.concat([y_test,yy],axis=0)\n\n\ntr1=rose.drop('label',1)\nts1=rose['label']\nx,xx,y,yy=train_test_split(tr1,ts1,test_size=0.2,random_state=0)\nX_train=pd.concat([X_train,x],axis=0)\nX_test=pd.concat([X_test,xx],axis=0)\ny=pd.DataFrame(y)\nyy=pd.DataFrame(yy)\ny_train=pd.concat([y_train,y],axis=0)\ny_test=pd.concat([y_test,yy],axis=0)\n\n\ntr1=dandelion.drop('label',1)\nts1=dandelion['label']\nx,xx,y,yy=train_test_split(tr1,ts1,test_size=0.2,random_state=0)\nX_train=pd.concat([X_train,x],axis=0)\nX_test=pd.concat([X_test,xx],axis=0)\ny=pd.DataFrame(y)\nyy=pd.DataFrame(yy)\ny_train=pd.concat([y_train,y],axis=0)\ny_test=pd.concat([y_test,yy],axis=0)\n\n\ntr1=tulip.drop('label',1)\nts1=tulip['label']\nx,xx,y,yy=train_test_split(tr1,ts1,test_size=0.2,random_state=0)\nX_train=pd.concat([X_train,x],axis=0)\nX_test=pd.concat([X_test,xx],axis=0)\ny=pd.DataFrame(y)\nyy=pd.DataFrame(yy)\ny_train=pd.concat([y_train,y],axis=0)\ny_test=pd.concat([y_test,yy],axis=0)","1d359488":"X_train.info()","726520fe":"flowers=['daisy','sunflower','rose','dandelion','tulip']","cb59982b":"plt.title('train images')\nplt.pie(y_train['label'].value_counts().values,labels=flowers)\nplt.show()\n\nplt.title('test images')\nplt.pie(y_test['label'].value_counts().values,labels=flowers)\nplt.show()","d765d8f5":"train=pd.concat([y_train,X_train],axis=1)\ntest=pd.concat([y_test,X_test],axis=1)","56f55071":"train=train.sample(frac=1)\ntest=test.sample(frac=1)","5b5a390d":"train.head()","5a38277d":"X_train=train.drop('label',1)\ny_train=train['label']\nX_test=test.drop('label',1)\ny_test=test['label']","c7ded511":"X_train=X_train.to_numpy()\ny_train=y_train.to_numpy()\nX_test=X_test.to_numpy()\ny_test=y_test.to_numpy()","a1b8ab8d":"type(y_train[0]),type(y_test[0])","36e90653":"y_train=y_train.astype('int64')\ny_test=y_test.astype('int64')","b2e7c3b5":"decoder=flowers","55de00e0":"for i in range(3):\n  #print('Type of flower :',decoder[y_train[i]])\n  plt.title('Name of the flower : '+decoder[y_train[i]])\n  plt.imshow(X_train[i].reshape(48,48,3))\n  plt.show()\n","031d66e7":"X_train.shape,X_test.shape","f4a29e91":"X_train=X_train.reshape(3457,48,48,3)\nX_test=X_test.reshape(866,48,48,3)\ny_train=y_train.reshape(3457,1)\ny_test=y_test.reshape(866,1)","f380e13a":"model=Sequential()\n\nmodel.add(Conv2D(64,activation='relu',kernel_size=(3,3),input_shape=X_train[0].shape))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dense(5,activation='softmax'))","cf8123c3":"model.summary()","962cf0c7":"model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])","5a8916d1":"hist=model.fit(X_train,y_train,batch_size=10,epochs=7,verbose=1,validation_data=(X_test,y_test))","1d8007ee":"plt.plot(hist.history['accuracy'],label='train')\nplt.plot(hist.history['val_accuracy'],label='validation')\nplt.legend()\nplt.show()","da36f604":"y_pred=model.predict(X_test)","ce1b5157":"y_final=[]\nfor i in range(len(y_pred)):\n  y_final.append(np.argmax(y_pred[i]))\ntype(y_final[0])","ce8e540e":"mat=confusion_matrix(y_test,y_final)\nplot_confusion_matrix(mat,figsize=(9,9),colorbar=True)","65bcbed2":"After getting our train and test data we are shuffling the data and that'll lead destruction of unnecessary patterns.","b6f53104":"There are a total of 5 type of flowers.\n     1. Daisy\n     2. Sunflower\n     3. Rose\n     4. Dandelion\n     5. Tulip\n     \nSo ,now we are going check the daisy flower for better understanding over the datas\/images.","0a3356ce":"Now we are going to predict over the test data and make the confusion matrix and make conclusions.","5d7c770d":"# Steps of making a deep learning model to predict images :\n\n\n1. Importing required libraries \n2. Understanding the stacks of folders of images to gather their file paths\n3. Getting path and primary visualizations\n4. Creating dataframes with the images\n4. Data preparing to feed into the model\n5. Model building\n6. Compilation of Model\n7. Model Fitting and Evaluation\n8. Conclusion and others","d9b909f4":"In NN model we have to feed a numpy array which will be a better approch to generate tensors in the model.","c7b1e6e8":"# UPVOTE if you like this kernel :)\n\"This notebook is made with with love \u2764\ufe0f\"    -**s_agnik1511**","4acb00b4":"Now we are going to form the final confusion matrix. and see how the model worked on the test data.","9899f5d6":"After visualizing the plot we can say model is best tuned in between 2nd and 3rd epochs then the model starts getting overfitted with the train data.\nSo, best tuned model gives 60% accuracy over validaion data.","3e351af3":"After searching the web for a looong time (XD) I found some explanations about those mispredictions.\nThose are -\n\n1. Rose and Tulips are Perennial in formation and their colours resemble in a very good probabilty.\n2. Dandelion and Daisy are both lawn flowers, so the background is ought to be with green grasses.They also has long stalk so can be mispredicted even when the model is very good at predictions.\n3. Dandelions are actually resembles the colour of daisy having green background in some and long stalks creating mispredictions over all flower types.","cbb44a7a":"#### Reshaping :\nNow we are reshaping the train and test data as we are going to feed in into convolutional neural nets.","c26e705e":"Now we are compiling our model with custom metrics .\n\nWe are using -\n1. Optimizer ---> Adam (default)\n2. Loss      ---> Sparse Categorical Crossentropy\n3. Metrics   ---> Accuracy","607b03db":"We can see that - \n1. Images are **RGB images** so they have three  2d image layers impregnated one over other.\n2. The image shape are not synchronized . So, we have to take it in a symmetrical way .\n3. The images are very high in resolution and will be a problem to predict faster with even Neural Networks. So we have to boil down the resolution.","a6836eb4":"This reshaping of data has bcreated a 4-d dataset. When it will be fitted into the neural network it will convert into 4d tensors which will lead the prediction.\n\n For further understanding of tensors you can search it in [here](https:\/\/deeplizard.com\/learn\/video\/Csa5R12jYRg) .","adf8ef53":"Now we are generating the dataframes of every different type of flowers and visualizing them.","13be9bd0":"Let's check the train folder.","ee46ec66":"# Model Generation :\n\nAs we've build our data we are going to build our model .\nOut there , there are several very popular image classification models ,like -\n\n[Inception V3](https:\/\/cloud.google.com\/tpu\/docs\/inception-v3-advanced)\n\n[ResNet](https:\/\/d2l.ai\/chapter_convolutional-modern\/resnet.html)\n\n[MobileNet](https:\/\/keras.io\/api\/applications\/mobilenet\/)\n\nBut in here we are going to build our custom model cause that should be **the habit** of any DL learnee or DL professional.\nOur model will have several layers of Dense and ConvNet over a sequential framework.","b2385ed5":"Thank You :)\nYou can visit my other works at [kaggle](https:\/\/kaggle.com\/sagnik1511\/notebooks) or in [github](https:\/\/github.com\/sagnik1511?tab=repositories) .","ce7a8e75":"As the images are flattened we have to reshape them for visualization.","4005f80f":"# Dataframe Generation :\n Now as we have understood on how resolution we are going to take the images , we can produce the dataframe in following manner .\n \n 1. Read the images\n 2. Resize them into required dimension.\n 3. Flatten them to contribute into dataframes.\n 4. Create separate dataframes.\n 5. Create a general dataframe by concatenation.","d30a3cc5":"In this confuson matrix we can see that the model has predicted better that 50% of the data, still it has some wrong values .\nand the wrong prediction of rose into tulip and of daisy into dandelion are very dominant.","34acaff1":"Now we are going to check the different flower counts in the train and test.","d3bb6925":"# Train & Test Data Generation :\n\nNow we need to split the data into train and test and after that we are going to split the target values from the dataframes .","e3770bc1":"![image.png](attachment:image.png)","9954c9c6":"![](https:\/\/www.expatica.com\/app\/uploads\/2018\/11\/The-meaning-of-flowers-around-the-world-1920x1080.jpg)","b26f12ed":"Now we can take the images in these fashion into the dataframe and that will produce a better dataframe.","7410d3e0":"As this values are in float datatype this will not work in our NN model. So we have to make those values integers by changing their datatypes into **int_64** .","df886478":"Wow ! It works . Now let's make other flower dataframes.","8a286e16":"# Gathering file paths :\n\nWe are gathering the file paths and visualizing those images for understanding how to proceed further.","c21818d1":"# Libraries :\n\n     As this is a deep learning task we surely need any deep learning library to start work with . \n     \n     In Python we have 2 very famous libraries -   \n     1. Tensorflow\n     2. Pytorch\n     \n     For this project we are proceeding with tensorflow.\n     \n     We also need some supporting libraries which will help us wrangle the data and produce the dataframes and others.\n     \n     At last but not the least we are importing some libraries to make confusion matrix as this is a problem of multiclass\n     classification and which will help us to get a proper explanantion or conclusion of the model or bilogical features.\n     ","1bea088a":"Now we can directly concatenate these 5 dataframes and then split them into 2 dataframes as train and test. But as we have different numbers of attributes in the frames so we'll end up creating imbalanced dataframes that'll lead us to bad prediction.\n\nSo, we are splitting the different flower dataframes into 80-20 train test split fashion and then adding them into a train and a test dataframe  and after that we are shuffling the data and creating final data for prediction.","06c26ec4":"Let's check if that function really returns a dataframe or not !","64dc6f8c":"### X and Y preparation :\n\nNow we are preparing X_train,y_train,X_test and y_test which will be feeded after some processes.","218aa910":"Well well ! It works. Let's chcek if it return it in required fashion or not.","4b0a9bde":"**Hurrah ! we've completed a whole project of flower\/image classification.The detailed explanantion will definitely help others to understand each code and work similar.**","3f544df3":"**In this dataset we are mainly focusing towards how we can build a dataframe from folders of images and classify them with deep neural nets.**","4d7dc573":"Let's check how our train data looks.","23b90bb6":"And now we've reached the most inetresting part of our whole project -**MODEL FITTING**.\nwe are going to declare the batch size as 10 which will be convinient to the model's accuracy and time.\nWe are using 7 epochs to train the model and we are using the test data as validation\nand after all we are also putting the verbose on as we can see how the NN model progresses.\n\nWe are going to store this fitting into a variable **hist** so we can see how the model performed and find if the model is overfitting or underfitting or has very much bias or not.","ca64d3af":"As we have to find the answers for general people also we are using the flowers array as a decoder as the name of the flowers has been encoded.","ce027f56":"As the model produces prediction as tensors we have to find the actual prediction with the **numpy** function **argmax** **(numpy.argmax)**.\n\n### prediction tensors ---> np.argmax() ---> prediction ---> decoders ---> actual predictions","0c3c4634":"It is showing that the datas are well mapped and produced.","1f06d110":"Now we are checking the models performance by plotting.","2f03114c":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRuks0CwWsbaQBedosJzGu9LG9HY7frVIZRUQ&usqp=CAU)","a8d9cd0c":"# Flower Detection with Neural Networks ","56b3ee05":"After making the model let's see the summary of the model."}}