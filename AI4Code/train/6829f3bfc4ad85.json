{"cell_type":{"43f00f58":"code","d5598b7e":"code","fc110c74":"code","ac734f4d":"code","6798d10f":"code","7e561b97":"code","7c45dc2f":"code","ad168f68":"code","66dd0a0d":"code","4b09d620":"code","43014d50":"code","6f7864ce":"code","12643bb7":"code","dc373aa1":"code","5fe9d454":"code","fae51ac5":"code","ef69e500":"code","9508b400":"code","9652ce14":"code","8ee3709d":"code","556bc04c":"code","30871bf1":"code","c7eaa731":"code","88b05350":"code","31d5d0df":"code","1934cfce":"code","f7ae094e":"code","3caed30e":"code","50069250":"code","e123ca03":"code","f8d8e66a":"code","67c6d151":"code","b9a56ed1":"code","4cb0f17a":"code","4b9de1a7":"code","3a50e6c6":"code","67219f33":"code","d6b1f372":"code","27739d15":"code","efa40645":"code","0371127a":"code","3af69ef3":"code","ee13ddf5":"code","15e6b880":"code","e677c6e6":"code","02b02717":"code","b84be873":"code","bf43f478":"code","4c3cbe99":"code","269df318":"code","088778ce":"code","f44bb3d2":"code","63012600":"code","5b04951b":"code","22ecfc23":"code","32d41077":"code","54411a7a":"code","4ccc3c74":"code","796ab72a":"markdown","7f551cc5":"markdown","58111220":"markdown","714af851":"markdown","92ff0500":"markdown","7a9bee52":"markdown","c76df32a":"markdown","1495c304":"markdown","e5d64f54":"markdown","dd571f8e":"markdown","a5ee5bf1":"markdown","c18f0063":"markdown","7b4c76b9":"markdown","72f2aff0":"markdown"},"source":{"43f00f58":"import pandas as pd\nimport numpy  as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d5598b7e":"bd_train = pd.read_csv(\"..\/input\/train.csv\")\nbd_test = pd.read_csv (\"..\/input\/test.csv\")","fc110c74":"#COLUMNS NAMES\nprint(bd_train.columns.values)","ac734f4d":"## DATA STRUCTURE\nbd_train.head(5)","6798d10f":"## INFORMATION BD TRAIN\n\nbd_train.info()","7e561b97":"#MISSING VALUES\nbd_train.isnull().sum()","7c45dc2f":"#VIZUALITATION MISSING VALUES\n\nsns.heatmap(bd_train.isnull(),yticklabels=False,cbar=True,cmap='prism')","ad168f68":"#MEAN AGE PER CLASS\n\nplt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=bd_train,palette='terrain_r')","66dd0a0d":"bd_train[['Pclass', 'Age']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Age', ascending=False)","4b09d620":"## REPLACE MISSING VALUES (AGE)\n\ndef replace_age_data (cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 38\n\n        elif Pclass == 2:\n            return 30\n\n        else:\n            return 25\n\n    else:\n        return Age","43014d50":"bd_train['Age'] = bd_train[['Age','Pclass']].apply(replace_age_data,axis=1) ##replace","6f7864ce":"## validate clead data (age)\nsns.heatmap(bd_train.isnull(),yticklabels=False,cbar=True,cmap='prism')","12643bb7":"#Delete Cabin\nbd_train.drop('Cabin',axis=1, inplace = True)","dc373aa1":"## validate clead data (Full)\nsns.heatmap(bd_train.isnull(),yticklabels=False,cbar=True,cmap='prism')","5fe9d454":"#SURVIVORS\nsns.countplot(x=\"Survived\", data=bd_train, label = True)","fae51ac5":"bd_train['Survived'].value_counts()","ef69e500":"#SURVIVORS & NOT SURVIVORS PER CLASS \nsns.countplot(x=\"Pclass\", hue=\"Survived\", data=bd_train)","9508b400":"#SURVIVORS & NOT SURVIVORS PER SEX \nsns.countplot(x=\"Sex\", hue=\"Survived\", data=bd_train)","9652ce14":"#MEAN AGE PER SEX\nbd_train[['Age', 'Sex']].groupby(['Sex'], as_index=False).mean().sort_values(by='Sex', ascending=False)","8ee3709d":"#SURVIVORS & NOT SURVIVORS PER EMBARKED\nsns.catplot(x=\"Pclass\", hue=\"Embarked\", col=\"Survived\",\n                data=bd_train, kind=\"count\",\n                height=4, aspect=.7);","556bc04c":"#DISTRIBUTION SURVIVORS PER AGE\ng = sns.FacetGrid(bd_train, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","30871bf1":"#MEAN AGE PER SURVIVORS\nbd_train[['Age', 'Survived']].groupby(['Survived'], as_index=False).mean().sort_values(by='Survived', ascending=False)","c7eaa731":"## VISUALITATION OF CORRELATION OF FEATURES\nplt.figure(figsize=(14,8))\nsns.heatmap(bd_train.corr(), annot = True, cmap='YlOrRd',linewidths=.1)\nplt.show()","88b05350":"#VISUALITATION FEATURE WITH MORE CORRELATION\ng = sns.lmplot(x=\"Parch\", y=\"SibSp\", hue=\"Survived\", data=bd_train)\nplt.show()","31d5d0df":"bd_train.head()","1934cfce":"## SEPARETE DATA & DROP UNIMPORTANT FEATURES\nX= bd_train.drop(columns=['Survived','Name','Age','Embarked', 'Fare' ,'Ticket'],axis=1) \n\ny= bd_train['Survived'] ## CLASIFICATION FEATURE\n\nX_to_pred=bd_test.drop(columns=['Name','Age','Embarked' , 'Fare' ,'Ticket'],axis=1)\n## DATA UNKNOW FOR THE MODEL","f7ae094e":"## CONVERT FEATURE SEX IN NUMERICAL\nsex = pd.get_dummies(X['Sex'],drop_first=True)\nX= pd.concat([X,sex],axis=1) \nX.drop(['Sex'], axis = 1 , inplace = True)","3caed30e":"X.head()","50069250":"## DROP SEX\n\nsex = pd.get_dummies(X_to_pred['Sex'],drop_first=True)\nX_to_pred= pd.concat([X_to_pred,sex],axis=1) \nX_to_pred.drop(['Sex'], axis = 1 , inplace = True)\nX_to_pred.drop(['Cabin'], axis = 1 , inplace = True)","e123ca03":"X_to_pred.head()","f8d8e66a":"## IMPORT FEATURES ALGORITHM\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1301)\n\nfrom sklearn.linear_model import LogisticRegression \nlrmodel = LogisticRegression() # INSTANCE LOGISTIC REGRESSION\nlrmodel.fit(X_train,y_train) #TRAINING MODEL","67c6d151":"## QUALITY MODEL\nlrmodel.score(X_train, y_train)\nlogistic_score = round(lrmodel.score(X_train, y_train)*100,2)\nlogistic_score","b9a56ed1":"## PREDICTION TEST\nprediccion=lrmodel.predict(X_test)  \nerror = np.mean((y_test - prediccion))\nprint('Error = ',error)","4cb0f17a":"## PREDICTION NEW DATA\nY_Pred=lrmodel.predict(X_to_pred)","4b9de1a7":"prob=lrmodel.predict_proba(X_to_pred)","3a50e6c6":"prob  # Como podemos ver es un arreglo de 2 columnas por 418 filas ","67219f33":"prob[0][0] # probabilidad que no sobreviva ","d6b1f372":"prob[0][1] # Probabilidad de sobrevivir ","27739d15":"survive_prob=[]\n\nfor i in range(len(prob)):\n    survive_prob.append(prob[i][1])","efa40645":"data = {\n        \"IDPassenger\": bd_test[\"PassengerId\"], \n        \"Clase\":bd_test[\"Pclass\"], \n        \"Age\":bd_test[\"Age\"],  \n        \"Survived\" : Y_Pred , \n        \"Survive_Prob\" : survive_prob\n       }","0371127a":"#REPORT\nReport_LR = pd.DataFrame(data)","3af69ef3":"Report_LR.head()","ee13ddf5":"from sklearn.ensemble import RandomForestClassifier\nrandomf = RandomForestClassifier()  ## Instance Random Forest\nrandomf.fit(X_train, y_train) ## Train\n\npred_rf = randomf.predict(X_test) ##prediction test data\n\npred_rf2 = randomf.predict(X_to_pred) ##prediction new data","15e6b880":"## Quality Model\nrandomf.score(X_train, y_train)\n\nranfor_score = round(randomf.score(X_train, y_train)*100,2)\nranfor_score","e677c6e6":"#REPORT\nReport_RF = pd.DataFrame({\"PassengerId\": bd_test[\"PassengerId\"], \"Survived\" : pred_rf2})","02b02717":"Report_RF.head()","b84be873":"from sklearn import svm\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nsvm_model = svm.SVC(kernel='linear') # Instance SVM\nsvm_model.fit(X_train, y_train) #Train","bf43f478":"## Quality Model\nsvm_model.score(X_train, y_train)\nsvm_score = round(svm_model.score(X_train, y_train)*100,2)\nsvm_score","4c3cbe99":"## prediction with unknow data\nY_pred_svm = svm_model.predict(X_to_pred)","269df318":"##Report\nReport_svm = pd.DataFrame({\"ID Passenger\": bd_test[\"PassengerId\"], \"Survived\" : Y_pred_svm})","088778ce":"Report_svm.head()","f44bb3d2":"Report_LR['Survived'].value_counts()    ##Logistic Regression","63012600":"Report_RF['Survived'].value_counts()  ##Random Forest","5b04951b":"Report_svm['Survived'].value_counts()  ##Svm","22ecfc23":"Eval = pd.DataFrame({\"Models\": [ 'Logistic Regression',  'Random Forest' ,'SVM'], \n                       \"Score\": [logistic_score, ranfor_score, svm_score]})","32d41077":"Eval.sort_values(by= \"Score\", ascending=False)","54411a7a":"Report_RF.to_csv('random_forest_report.csv', index = False) ##Report Random Forest","4ccc3c74":"Report_svm.to_csv('svm_report.csv', index = False) ##Report Tree","796ab72a":"## 1.IMPORT NECESSARY LIBRARIES  ","7f551cc5":"## 2. LOAD & DESCRIBE & CLEAN DATA","58111220":"## 8.EXPORT RESULTS","714af851":"## 4. PREPARE DATA","92ff0500":"#### FIRST CONCLUTIONS \n1. The numbers of records of not survivors is greater that people survivors\n2. The passengers of 3ra class contain the largest count of people not survivors \n3. The gender male contains a big count of people not survivors\n4. The mean of age of people not survivors is 30 years old aprox.","7a9bee52":"## 6. COMPARE RESULTS]","c76df32a":"## 7. COMPARE QUALITY MODELS","1495c304":"#### Categorical Features: Survived, Sex, Embarked, Pclass \n#### Continuos Features: Age, Fare, Parch","e5d64f54":"### 5.2 Model Random Forest","dd571f8e":"## 3. DATA VISUALITATION","a5ee5bf1":"**NOTA:**  Ahora agregamos nuestra columna al nuevo Dataframe  ","c18f0063":"### 5.3 SVM","7b4c76b9":"# 5.MODELS\n### 5.1 Logistic Regression","72f2aff0":"# Probabilidad de sobrevivir \n\n* **Clase 0** = No sobrevive \n* **Clase 1** = Sobrevive\n\nComo podemos observar a nosotros nos interesa es calcular la probabilidad de que la persona sobreviva por esta raz\u00f3n nos centraremos en la probabilidad de que la clase sea **`1`** \n\n"}}