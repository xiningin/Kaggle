{"cell_type":{"532ff074":"code","388f736d":"code","c37dad5a":"code","96df3b72":"code","af32e859":"code","0fc434bd":"code","ac59d740":"code","ab411d60":"code","3d18a331":"code","d470986b":"code","cbf9da36":"code","ffcf4702":"code","f894be96":"code","b761f515":"code","27dbc7dd":"code","6d8cacae":"code","006d7682":"code","922ced7b":"code","1ac39113":"code","faafab94":"code","42a92074":"code","b9c9ae18":"code","7ab103df":"code","020a863c":"code","b26688bb":"code","23c32008":"markdown","b582f720":"markdown","5e8d062e":"markdown","757d935b":"markdown","627014d5":"markdown","bdb657be":"markdown","8ddbd5cd":"markdown","c3a27c39":"markdown","bb0e7889":"markdown","ebfbc5c1":"markdown","a8ee82cf":"markdown","52471c2d":"markdown","910408f5":"markdown","724a26ef":"markdown","0611f847":"markdown","adaf693e":"markdown","0c87b3dc":"markdown","d8609187":"markdown"},"source":{"532ff074":"!pip install pandas-profiling[notebook] --quiet\n!pip install pydicom --quiet","388f736d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio\nimport pydicom as dicom\nfrom pathlib import Path\nfrom pandas_profiling import ProfileReport\nfrom PIL import Image\nfrom fastprogress import progress_bar\n\nsns.set_style(\"whitegrid\", {'axes.grid' : False})\n%config InlineBackend.figure_format = 'retina'\n\npio.templates.default = \"ggplot2\"","c37dad5a":"DATADIR = Path(\"..\/input\/siim-covid19-detection\")\nTRAINDIR = DATADIR\/\"train\"\nTESTDIR = DATADIR\/\"test\"\ntrain_study_filepath = DATADIR\/\"train_study_level.csv\"\ntrain_image_filepath = DATADIR\/\"train_image_level.csv\"","96df3b72":"train_study_df = pd.read_csv(train_study_filepath)\ntrain_image_df = pd.read_csv(train_image_filepath)","af32e859":"profile = ProfileReport(train_study_df, title=\"Study Level\")\nprofile","0fc434bd":"train_image_df.profile_report(title=\"Image Level\")","ac59d740":"# Remove _study part from id column and save ids in new column named StudyInstanceUID to merge dataframes\ntrain_study_df[\"StudyInstanceUID\"] = train_study_df.id.apply(lambda x: x.split(\"_\")[0])\ntraindf = pd.merge(train_study_df, train_image_df, on=\"StudyInstanceUID\")\ntraindf.rename({\"id_x\": \"id_study\", \"id_y\": \"id_image\"}, axis=1, inplace=True)\ntraindf.head()\n","ab411d60":"fig = go.Figure()\nfig.add_trace(go.Histogram(histfunc=\"count\", x=traindf[\"Typical Appearance\"], name=\"Typical Appearance\"))\nfig.add_trace(go.Histogram(histfunc=\"count\", x=traindf[\"Atypical Appearance\"], name=\"Atypical Appearance\"))\nfig.add_trace(go.Histogram(histfunc=\"count\", x=traindf[\"Indeterminate Appearance\"], name=\"Indeterminate Appearance\"))\nfig.add_trace(go.Histogram(histfunc=\"count\", x=traindf[\"Negative for Pneumonia\"], name=\"Negative for Pneumonia\"))\nfig.update_layout(title_text='Sample count per class') # title of plot\nfig.show()","3d18a331":"dcmpaths = TRAINDIR.rglob(\"*.dcm\")","d470986b":"sample_path = next(dcmpaths)\nsample = dicom.dcmread(sample_path)\nprint(\"Image size =\", (sample.Rows, sample.Columns))\nsample","cbf9da36":"plt.figure(figsize=(10, 10))\nplt.imshow(sample.pixel_array)\nplt.axis(\"off\");\nplt.title(\"Sample image\", {'fontsize':20});","ffcf4702":"# TRAINING DATA\ndcmpaths = TRAINDIR.rglob(\"*.dcm\")\nmetadata_traindf = {\n    \"Gender\": [], \"BodyPartExamined\": [], \"ImgHeight\": [], \n    \"ImgWidth\": [], \"ImagerPixelSpacing\": [], \"SOPInstanceUID\": []\n}\nfor path in progress_bar(list(dcmpaths)):\n    sample = dicom.dcmread(path)\n    metadata_traindf[\"Gender\"].append(sample.PatientSex)\n    metadata_traindf[\"BodyPartExamined\"].append(sample.BodyPartExamined)\n    metadata_traindf[\"ImgHeight\"].append(sample.Rows)\n    metadata_traindf[\"ImgWidth\"].append(sample.Columns)\n    metadata_traindf[\"ImagerPixelSpacing\"].append(float(sample.ImagerPixelSpacing[0]))\n    metadata_traindf[\"SOPInstanceUID\"].append(sample.SOPInstanceUID)\n    \nmetadata_traindf = pd.DataFrame.from_dict(metadata_traindf)","f894be96":"metadata_traindf.profile_report(title=\"DICOM Training Metadata\")","b761f515":"# TESTING DATA\ndcmpaths = TESTDIR.rglob(\"*.dcm\")\nmetadata_testdf = {\n    \"Gender\": [], \"BodyPartExamined\": [], \"ImgHeight\": [], \n    \"ImgWidth\": [], \"ImagerPixelSpacing\": [], \"SOPInstanceUID\": []\n}\nfor path in progress_bar(list(dcmpaths)):\n    sample = dicom.dcmread(path)\n    metadata_testdf[\"Gender\"].append(sample.PatientSex)\n    metadata_testdf[\"BodyPartExamined\"].append(sample.BodyPartExamined)\n    metadata_testdf[\"ImgHeight\"].append(sample.Rows)\n    metadata_testdf[\"ImgWidth\"].append(sample.Columns)\n    metadata_testdf[\"ImagerPixelSpacing\"].append(float(sample.ImagerPixelSpacing[0]))\n    metadata_testdf[\"SOPInstanceUID\"].append(sample.SOPInstanceUID)\n    \nmetadata_testdf = pd.DataFrame.from_dict(metadata_testdf)","27dbc7dd":"metadata_testdf.profile_report(title=\"DICOM Testing Metadata\")","6d8cacae":"fig = go.Figure()\nfig.add_trace(go.Histogram(histfunc=\"count\", x=metadata_traindf[\"Gender\"], name=\"Train data Gender\"))\nfig.add_trace(go.Histogram(histfunc=\"count\", x=metadata_testdf[\"Gender\"], name=\"Test dataGender\"))\nfig.update_layout(title_text='Sample count per class') # title of plot\nfig.show()","006d7682":"fig = go.Figure()\nfig.add_trace(go.Histogram(histfunc=\"count\", x=metadata_traindf[\"ImagerPixelSpacing\"], histnorm=\"probability\", name=\"Train ImagerPixelSpacing\"))\nfig.add_trace(go.Histogram(histfunc=\"count\", x=metadata_testdf[\"ImagerPixelSpacing\"], histnorm=\"probability\", name=\"Test ImagerPixelSpacing\"))\nfig.update_layout(title_text='Sample count per class (Probability Normalized just to adjust sample scale)') # title of plot\nfig.show()","922ced7b":"px.histogram(metadata_traindf, x='ImagerPixelSpacing', marginal=\"box\", color='Gender', title=\"Train data ImagerPixelSpacing Distribution (based on Gender)\")","1ac39113":"px.histogram(metadata_testdf, x='ImagerPixelSpacing', marginal=\"box\", color='Gender', title=\"Test data ImagerPixelSpacing Distribution (based on Gender)\")","faafab94":"metadata_traindf.BodyPartExamined.unique()","42a92074":"replace_dict = {\n    '2- TORAX': 'THORAX',\n    'TORAX': 'THORAX',\n    'T\u00d2RAX': 'THORAX',\n    'T?RAX': 'THORAX',\n    'Pecho': 'PECHO'\n}\nmetadata_traindf.BodyPartExamined = metadata_traindf.BodyPartExamined.replace(replace_dict)\nmetadata_testdf.BodyPartExamined = metadata_testdf.BodyPartExamined.replace(replace_dict)","b9c9ae18":"fig = go.Figure()\nfig.add_trace(go.Histogram(histfunc=\"count\", x=metadata_traindf[\"BodyPartExamined\"], histnorm=\"probability\", name=\"Train BodyPartExamined\"))\nfig.add_trace(go.Histogram(histfunc=\"count\", x=metadata_testdf[\"BodyPartExamined\"], histnorm=\"probability\", name=\"Test BodyPartExamined\"))\nfig.update_layout(title_text='Sample count per Bodypart (Probability Normalized just to adjust sample scale)') # title of plot\nfig.show()","7ab103df":"fig = go.Figure()\nfig.add_trace(go.Histogram(histfunc=\"count\", x=metadata_traindf[\"BodyPartExamined\"], histnorm=\"probability\", name=\"Train BodyPartExamined\"))\nfig.add_trace(go.Histogram(histfunc=\"count\", x=metadata_testdf[\"BodyPartExamined\"], histnorm=\"probability\", name=\"Test BodyPartExamined\"))\nfig.update_layout(title_text='(Log) Sample count per Bodypart (Probability Normalized just to adjust sample scale)') # title of plot\nfig.update_yaxes(type=\"log\")\nfig.show()","020a863c":"px.histogram(metadata_traindf, x='BodyPartExamined', marginal=\"violin\", color='Gender', title=\"Train data BodyPartExamined Distribution (based on Gender)\")","b26688bb":"px.histogram(metadata_testdf, x='BodyPartExamined', marginal=\"violin\", color='Gender', title=\"Test data BodyPartExamined Distribution (based on Gender)\")","23c32008":"# \ud83d\udd25 Pandas Profiler \nThe pandas `df.describe()` function is great but a little basic for serious exploratory data analysis. *pandas_profiling* extends the pandas DataFrame with `df.profile_report()` for quick data analysis.\n\nThis saves time to write basic EDA code.\n\nThere are two ways to use it:\n1. As a method of dataframe - `df.profile_report()`\n2. `pandas_profiling.ProfileReport()` method. (see below)","b582f720":"# SIIM-FISABIO-RSNA COVID-19 Detection EDA\n\n\ud83d\udc49 [Problem Type] Object Detection and Multiclass Classification Problem","5e8d062e":"### Using plots to understand data\n\nTo make metadata more simpler, let's merge two dataframes (image_level and study_level) into one. This can be done using outer join on`StudyInstanceUID` column from *image level* dataframe and `id` column from *study level* dataframe (just need to remove ..._study from samples).","757d935b":"Same thing on Log scale for better visualization. Looks normal to me.","627014d5":"# DICOM Metadata Analysis\n\nIn this, we will analyse the DCM's metadata. Let's see if we can get any useful information.","bdb657be":"### Pixel Spacing and Gender\nAnother analysis to understand what is the most common pixel spacing value.","8ddbd5cd":"### Pixel Spacing\n`ImagerPixelSpacing` has similar distribution across train and test data but the pixel spacing is very different (given below). For better predictions, we need to fix the pixel spacing in preprocessing.","c3a27c39":"### Gender\n\nAs said earlier, distribution across train and test is similar as shown below.","bb0e7889":"\ud83e\udd14 Takeaway from Image Level profiler:\n1. boxes has 2040 (32.2%) missing values \n2. label has 2040 (32.2%) `\"none 1 0 0 1 1\"` values.","ebfbc5c1":"\ud83e\udd14 Takeaway from Study Level profiler:\n1. Very unbalanced class distribution. \n2. *Typical Appearance* is the most balanced. ~ 52.8% (class 0) and 47.2% (class 1)\n1. *Atypical Appearance* has really low class 1. ~ 92.2% (class 0) and 7.8% (class 1)","a8ee82cf":"#### That's all! Please upvote if you find this information useful \u270c\ufe0f\ud83d\ude42","52471c2d":"# \ud83e\udd71\ud83d\ude2c TL;DR\n\nTwo major findings:\n\n1. `Atypical Appearance`, `Indeterminate Appearance`, `Negative for Pneumonia` are highly unbalanced classes.\n\n\n2. Pixel Spacing varies a lot between images and train & test data. It should be fixed in preprocessing for better and stable predictions.\n\n\nEverthing else looks normal!","910408f5":"#### 2. BodyPartExamined and Gender","724a26ef":"\ud83e\udd14 Takeaway from Metadata profilers:\n1. Both training and test data have almost similiar gender distribution\n2. Both training and test set have ~80% CHEST bodypart scans.\n3. Pixel spacing is not consistent between images as well as training and testing data. We need to fix this in preprocessing because the results might vary.\n\nLet's compare with plots","0611f847":"#### 1. Train and Test set distribution comparison","adaf693e":"Note that the same BodyPart has different spellings in metadata. This is maybe due to different scanner. I don't know. If you know then please let me know in the comments.\n\nAnyway, I'm replacing different spellings to one.\nSo, there will be two changes:\n1. Replacing `2- TORAX`, `TORAX`, `T\u00d2RAX`, `T?RAX` with `THORAX`.\n2. Replacing `Pecho` with `PECHO`","0c87b3dc":"### BodyPart Examined and Gender\nLooks similar distribution Genderwise.","d8609187":"Let's create a dataframe out of metadata for all samples."}}