{"cell_type":{"65c678ab":"code","46617ac2":"code","dd9b5d45":"code","387c7772":"code","1e659c24":"code","da16f4e7":"code","64adf858":"code","4398973f":"code","ea4f90d3":"code","f8ae5c39":"code","75d03458":"code","7a5f6252":"code","004f4e8e":"code","70352d7c":"code","f9e7e12a":"code","df8d3b85":"code","53b91987":"code","fbdbaf66":"code","d6904e8a":"code","409a6867":"code","63ac390d":"code","d4a9b473":"code","8a573975":"code","b07287c9":"code","ce615f10":"code","93e54b53":"code","437ce11a":"code","31286b58":"code","f3eb5bcc":"code","55bb8dfc":"code","7bba2305":"code","d9cb98a5":"code","27da3b9b":"code","63cb61ea":"code","44cccb7f":"code","c70266f9":"code","a96d7f2f":"code","83fe23a3":"code","612834e4":"code","b5143be2":"code","3d92c8a3":"code","b156fb8b":"code","57d8fb48":"code","88b60a49":"code","97054b95":"code","cea590b3":"code","7c82d953":"code","417e1e56":"code","7f9461ea":"code","f172912c":"code","f7a92861":"code","a6c7a64f":"code","a3807a4f":"code","9cb7f8be":"code","7d983f9e":"code","53d3eadc":"code","623213b5":"code","85c1e6e1":"code","3acc314c":"code","2e869b10":"code","0c65c10e":"code","45252532":"code","556b688e":"code","11169c2f":"code","77f200ef":"code","59c99ac8":"code","c340641e":"code","f07437f0":"code","29087ac0":"code","2c6aadae":"code","12f782c1":"code","133717ff":"code","08a4a1ad":"code","cec3d225":"code","e08d4caa":"code","10f0460a":"code","21e30c40":"code","0042c628":"code","b1cb1adf":"markdown","3edc514f":"markdown","a0c3adb8":"markdown","5906b9c5":"markdown","c4368930":"markdown","25bf97ef":"markdown","8b3c1ae6":"markdown","0e1790ef":"markdown","a97b5768":"markdown","3ea67e91":"markdown","648d6d61":"markdown","53291722":"markdown","14b66d71":"markdown","680d60b3":"markdown","89e7c969":"markdown","91b5fda5":"markdown","ca4d092a":"markdown","2455e9dc":"markdown","3b78bcd1":"markdown","6622e2bc":"markdown","9f4ee560":"markdown","8ef6c7af":"markdown","01b02a9e":"markdown","c43b206d":"markdown","e96c429a":"markdown","ae4f1a03":"markdown","0339078f":"markdown","45a9308b":"markdown","33d34b6c":"markdown","78f0ffe5":"markdown","74d99686":"markdown","0031fa70":"markdown","163a1d31":"markdown","a659eb35":"markdown","593b6b9f":"markdown","b4d50221":"markdown","aba5574e":"markdown","7ff73a2c":"markdown","674dbdf3":"markdown","c81a5932":"markdown","0f772940":"markdown","b2fb61ae":"markdown","312c5db2":"markdown","2101d24f":"markdown"},"source":{"65c678ab":"from IPython.display import Image\nfrom IPython.core.display import HTML \nImage(url= \"https:\/\/akm-img-a-in.tosshub.com\/sites\/btmt\/images\/stories\/zomato-fact-sheet_505_052417055850_111517063712.jpg?size=1200:675\")","46617ac2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd9b5d45":"df = pd.read_csv('\/kaggle\/input\/zomato-bangalore-restaurants\/zomato.csv')","387c7772":"df.head()","1e659c24":"df.info()","da16f4e7":"pd.DataFrame(round(df.isnull().sum()\/df.shape[0] * 100,3), columns = ['Missing'])","64adf858":"df.drop(['url', 'address', 'phone'], axis=1, inplace = True)","4398973f":"df.rename(columns = {\"approx_cost(for two people)\" : \"cost_two\", \"listed_in(type)\" : \"service_type\", \"listed_in(city)\" : \"serve_to\"}, inplace = True)","ea4f90d3":"df.info()","f8ae5c39":"df.columns","75d03458":"# Converting the cost_two variaible into integer\ndf.cost_two = df.cost_two.astype(str)\ndf.cost_two = df.cost_two.apply(lambda x : x.replace(',','')).astype(float)","7a5f6252":"df.rate.unique()","004f4e8e":"df['rate'] = df.rate.replace('NEW', np.NaN)\ndf['rate'] = df.rate.replace('-', np.NaN)\ndf.rate = df.rate.astype(str)","70352d7c":"df.rate = df.rate.apply(lambda x : x.replace('\/5','')).astype(float)\ndf.head()","f9e7e12a":"plt.rcParams['figure.figsize'] = 14,7\nsns.countplot(df['rate'], palette='Set1')\nplt.title(\"Count plot of the rate variable\")\nplt.xticks(rotation = 90)\nplt.show()","df8d3b85":"df.columns","53b91987":"plt.figure(figsize=(14,10))\nsns.set_style(\"darkgrid\")\nsns.jointplot(x = 'rate', y = 'votes', data=df, color = 'darkgreen',height = 8, ratio = 4)","fbdbaf66":"# Analyzing the number of locations with respect to the location\n\ndf.location.value_counts().nlargest(10).plot(kind='barh')\nplt.title(\"Number of restaurants by location\")\nplt.xlabel(\"Restaurant counts\")\nplt.show()","d6904e8a":"df.columns","409a6867":"df.head()","63ac390d":"# Plotting a pie chart for online orders\n\ntrace = go.Pie(labels = ['Online_orders', 'No_online_orders'], values = df['online_order'].value_counts(), \n               textfont=dict(size=15), opacity = 0.8,\n               marker=dict(colors=['lightskyblue','gold'], \n                           line=dict(color='#000000', width=1.5)))\n\n\nlayout = dict(title =  'Distribution of order variable')\n           \nfig = dict(data = [trace], layout=layout)\npy.iplot(fig)","d4a9b473":"df.head()","8a573975":"# Restaurants to serve to\n\ndf.serve_to.value_counts().nlargest(10).plot(kind = 'barh', color = 'r')\nplt.title(\"Number of restaurants listed in\")\nplt.xlabel(\"Count\")\nplt.legend()\nplt.show()","b07287c9":"sns.countplot(x = df['rate'], hue = df['online_order'], palette= 'Set1')\nplt.title(\"Distribution of restaurant rating over online order facility\")\nplt.show()","ce615f10":"df.rest_type.value_counts().nlargest(20).plot(kind = 'barh')\nplt.title(\"Restaurant type\")\nplt.xlabel(\"Count\")\nplt.legend()\nplt.show()","93e54b53":"df.head()","437ce11a":"df.dish_liked.value_counts().nlargest(20).plot(kind = 'barh')\nplt.show()","31286b58":"df.head()","f3eb5bcc":"df.name.value_counts().nlargest(20).plot(kind = 'barh')\nplt.legend()\nplt.show()","55bb8dfc":"df.head()","7bba2305":"# Plotting a pie chart for online orders\n\ntrace = go.Pie(labels = ['Table_booking_available', 'No_table_booking_available'], values = df['book_table'].value_counts(), \n               textfont=dict(size=15), opacity = 0.8,\n               marker=dict(colors=['lightskyblue','gold'], \n                           line=dict(color='#000000', width=1.5)))\n\n\nlayout = dict(title =  'Distribution of order variable')\n           \nfig = dict(data = [trace], layout=layout)\npy.iplot(fig)","d9cb98a5":"plt.figure(figsize=(20,10))\nsns.countplot(x = df['online_order'], hue = df['rate'], palette= 'Set1')\nplt.title(\"Distribution of restaurant rating over table booking facility\")\nplt.show()","27da3b9b":"plt.rcParams['figure.figsize'] = 14,7\nplt.subplot(1,2,1)\n\ndf.name.value_counts().head().plot(kind = 'barh', color = sns.color_palette(\"hls\", 5))\nplt.xlabel(\"Number Of Restaurants\")\nplt.title(\"Biggest Restaurant Chain (Top 5)\")\n\nplt.subplot(1,2,2)\n\ndf[df['rate'] >= 4.5]['name'].value_counts().nlargest(5).plot(kind = 'barh', color = sns.color_palette(\"Paired\"))\nplt.xlabel(\"Number Of Restaurants\")\nplt.title(\"Biggest Restaurant Chain (Top 5) - Rating more than 4.5\")\nplt.tight_layout()","63cb61ea":"# checking for null values\ndf.isnull().sum()","44cccb7f":"# Replacing the NaN values in rate feature\n\ndf['rate'] = df['rate'].fillna(df['rate'].mean())","c70266f9":"# Plotting a distplot\nsns.distplot(df['rate'], color = 'darkgreen')\nplt.title('Rating Distribution')\nplt.show()","a96d7f2f":"# Replacing the NaN values for cost_two\n\ndf.cost_two.value_counts().mean()","83fe23a3":"# Replacing the NaN values for the cost_two feature with mean value\n\ndf['cost_two'] = df['cost_two'].fillna(df['cost_two'].mean())","612834e4":"# Plotting a distplot for cost_two feature\nsns.distplot(df['cost_two'], color = 'darkgreen')\nplt.title('Rating Distribution')\nplt.show()","b5143be2":"df.head()","3d92c8a3":"df['online_order'] = pd.get_dummies(df['online_order'], drop_first=True)\ndf.head()","b156fb8b":"df['book_table'] = pd.get_dummies(df['book_table'], drop_first=True)\ndf.head()","57d8fb48":"# Performing One Hot Encoding on rest_type\n\nget_dummies_rest_type = pd.get_dummies(df.rest_type)\nget_dummies_rest_type.head(3)","88b60a49":"# Performing One Hot Encoding on location\n\nget_dummies_location = pd.get_dummies(df.location)\nget_dummies_location.head(3)","97054b95":"# Performing One Hot Encoding on type\n\nget_dummies_service_type = pd.get_dummies(df.service_type)\nget_dummies_service_type.head(3)","cea590b3":"# Concatinating the dataframes\nfinal_df = pd.concat([df,get_dummies_rest_type,get_dummies_service_type, get_dummies_location], axis = 1)\nfinal_df.head()","7c82d953":"final_df.head(2)","417e1e56":"final_df = final_df.drop([\"name\",\"rest_type\",\"location\", 'cuisines', 'dish_liked', 'reviews_list'],axis = 1)\nfinal_df.head()","7f9461ea":"final_df.head()","f172912c":"final_df = final_df.drop([\"menu_item\",\"service_type\",\"serve_to\"],axis = 1)\nfinal_df.head()","f7a92861":"sns.heatmap(df.corr(), annot=True, cmap=\"RdYlGn\", annot_kws={\"size\":15})","a6c7a64f":"# Splitting the features into independent and dependent variables\n\nx = final_df.drop(['rate'], axis = 1)\nx.head()","a3807a4f":"y = final_df['rate']","9cb7f8be":"from sklearn.ensemble import ExtraTreesRegressor\n\nmodel = ExtraTreesRegressor()\nmodel.fit(x,y)","7d983f9e":"print(model.feature_importances_)","53d3eadc":"#plotting graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=x.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()","623213b5":"sns.distplot(df['rate'])","85c1e6e1":"#Spliting data into test and train\n\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.20)","3acc314c":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\n\nlr.fit(x_train, y_train)\n\nlr_pred = lr.predict(x_test)","2e869b10":"r2 = r2_score(y_test,lr_pred)\nprint('R-Square Score: ',r2*100)","0c65c10e":"# Calculate the absolute errors\nlr_errors = abs(lr_pred - y_test)\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(lr_pred), 2), 'degrees.')","45252532":"# Calculate mean absolute percentage error (MAPE)\nmape = 100 * (lr_errors \/ y_test)\n# Calculate and display accuracy\nlr_accuracy = 100 - np.mean(mape)\nprint('Accuracy for Logistic Regression is :', round(lr_accuracy, 2), '%.')","556b688e":"sns.distplot(y_test-lr_pred)","11169c2f":"#plotting the Random forest values predicated Rating\n\nplt.figure(figsize=(12,7))\n\nplt.scatter(y_test,x_test.iloc[:,2],color=\"blue\")\nplt.title(\"True rate vs Predicted rate\",size=20,pad=15)\nplt.xlabel('Rating',size = 15)\nplt.ylabel('Frequency',size = 15)\nplt.scatter(lr_pred,x_test.iloc[:,2],color=\"yellow\")","77f200ef":"from sklearn.metrics import mean_absolute_error,mean_squared_error","59c99ac8":"print('mse:',metrics.mean_squared_error(y_test, lr_pred))\nprint('mae:',metrics.mean_absolute_error(y_test, lr_pred))\n","c340641e":"from sklearn.tree import DecisionTreeRegressor\n\ndtree = DecisionTreeRegressor(criterion='mse')\ndtree.fit(x_train, y_train)","f07437f0":"dtree_pred = dtree.predict(x_test)","29087ac0":"r2 = r2_score(y_test,dtree_pred)\nprint('R-Square Score: ',r2*100)\n\n# Calculate the absolute errors\ndtree_errors = abs(dtree_pred - y_test)\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(dtree_pred), 2), 'degrees.')\n\n# Calculate mean absolute percentage error (MAPE)\nmape = 100 * (dtree_errors \/ y_test)\n# Calculate and display accuracy\ndtree_accuracy = 100 - np.mean(mape)\nprint('Accuracy for Decision tree regressor is :', round(dtree_accuracy, 2), '%.')","2c6aadae":"#plotting the Random forest values predicated Rating\n\nplt.figure(figsize=(12,7))\n\nplt.scatter(y_test,x_test.iloc[:,2],color=\"blue\")\nplt.title(\"True rate vs Predicted rate\",size=20,pad=15)\nplt.xlabel('Rating',size = 15)\nplt.ylabel('Frequency',size = 15)\nplt.scatter(dtree_pred,x_test.iloc[:,2],color=\"yellow\")\nplt.legend()","12f782c1":"from sklearn.ensemble import RandomForestRegressor\n\nrandom_forest_regressor = RandomForestRegressor()\nrandom_forest_regressor.fit(x_train, y_train)","133717ff":"rf_pred = random_forest_regressor.predict(x_test)","08a4a1ad":"r2 = r2_score(y_test,rf_pred)\nprint('R-Square Score: ',r2*100)\n\n# Calculate the absolute errors\nrf_errors = abs(rf_pred - y_test)\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(rf_pred), 2), 'degrees.')\n\n# Calculate mean absolute percentage error (MAPE)\nmape = 100 * (rf_errors \/ y_test)\n# Calculate and display accuracy\nrf_accuracy = 100 - np.mean(mape)\nprint('Accuracy for random forest regressor is :', round(rf_accuracy, 2), '%.')","cec3d225":"#plotting the Random forest values predicated Rating\n\nplt.figure(figsize=(12,7))\n\nplt.scatter(y_test,x_test.iloc[:,2],color=\"blue\")\nplt.title(\"True rate vs Predicted rate\",size=20,pad=15)\nplt.xlabel('Rating',size = 15)\nplt.ylabel('Frequency',size = 15)\nplt.scatter(rf_pred,x_test.iloc[:,2],color=\"yellow\")","e08d4caa":"import pickle","10f0460a":"# For Logistic Regression\n\n# open a file where you want to store the data\nfile = open('logistic_regression.pkl', 'wb')\n\n# dump information to that file\npickle.dump(lr, file)","21e30c40":"# For Decision Tree Regressor\n\n# open a file where you want to store the data\nfile = open('Decision_tree_model.pkl', 'wb')\n\n# dump information to that file\npickle.dump(dtree, file)","0042c628":"# For Random Forest Regressor\n\n# open a file where you want to store the data\nfile = open('Random_forest.pkl', 'wb')\n\n# dump information to that file\npickle.dump(random_forest_regressor, file)","b1cb1adf":"### Checking whether the online order facility impacts the rating of the restaurants","3edc514f":"### Checking whether the online table booking affects the rating of the restaurant","a0c3adb8":"# 3. Feature Selection","5906b9c5":"### Checking the count of each rating category present. ","c4368930":"* From the above visuals shows the top 20 restaurant type. We can see that the restaurant type `Quick Bites` is more popular among people as compared to the rest of the restaurant types.","25bf97ef":"* From the scatter plot we can see that the restaurants with higher number of rating has more votes. The distribution plot of `votes` on the right side indicates that the majority of votes pooled lie in bucket of 1000-2500. ","8b3c1ae6":"* The variable `dish_liked` has more tha 50% of the missing data. If we drop the data we would lose 50% of the data. To simplify the analysis \nwe are going to drop some of the unecessary columns `url`, `address`, `phone`.","0e1790ef":"* The rating feature follows a normal distribution","a97b5768":"### Feature importance\n\n* Feature importance gives you a score for each feature of your data, the higher the score the more important or relevant is the feature towards your output variable\n\n* Feature importance is an in built class that comes with Tree Based Regressor, we will be using Extra Tree Regressor for extracting the top 10 features for the dataset","3ea67e91":"### Checking which are the top 20 restaurants in Bangalore.","648d6d61":"### PLotting a joint plot for `rate` vs `votes`\n\n* **Joint plot** allows us to compare two different variables and see if there is any relationship between these two variables. By using joint plot we can do both univariate and bivariate analysis by plotting the scatter plot (bivariate) and distribution plot (univariate) of two different variables in a single plotting grid\n\n* **Univariate analysis** is the analysis of **one** (\u201cuni\u201d) variable. **Bivariate analysis** is the analysis of exactly **two** variables. **Multivariate analysis** is the analysis of **more than two** variables","53291722":"* `Cafe Coffee Day` chain has over 90 cafes across the city that are listed in Zomato. On the other hand, **Truffles** - a burger chain has the best fast food restaurant (rating more than 4.5 out of 100), quality over quantity.\n\n* If you visit Banglore next time and if you want to check out a good restaurant over a weekend dont forget to try the food at **Truffles**, **Hammered** and **Mainland China**.\n","14b66d71":"# The Life Cycle in a Data Science Project\n\n1. **Exploratory Data Analysis.**\n2. **Feature Engineering.**\n3. **Feature Selection.**\n4. **Model Building.**\n5. **Model Deployment.**\n\n****In this project we will follow the same cylce****","680d60b3":"### Renaming few columns for our convinience","89e7c969":"* The cost two feature also follows nearly normal distribution","91b5fda5":"## Applying Linear Regression Algorithm","ca4d092a":"* We need to reply the `NEW` & `-` value from the rate column into `NaN` value to convert the `object` data type to `str`. ","2455e9dc":"* To convert the varible to a float we could simply do `astype(float)` but in this case, this method wont work because of presence of comma in between the numbers eg. 1,200. To avoid this kind of problem, we are using `lambda` and `replace` function to replace comma with nothing and then convert to float ","3b78bcd1":"* Now lets check how to rating affects if the restaurant has table booking or not.","6622e2bc":"* As we have seen above that the variable `cost_two` has `object` data type so we need to convert it into `integer` data type so that we can analyze the variable","9f4ee560":"### Converting the categorical columns into integer\n\n* We will perform One Hot Encoding operation on `online_order`,`book_table`,`location`,`rest_type`, `cuisines` columns.","8ef6c7af":"# 4. Model Building","01b02a9e":"### Checking for the missing values","c43b206d":"# Applying Random Forest Regressor Algorithm","e96c429a":"## Comparing Biggest Restaurant Chain and Best Restaurant Chain","ae4f1a03":"* We can clearly observer If the restaurant which dont have online order facility are more like to lose the rating as compared to the restuarants which have online order facility","0339078f":"* We are able to see the top 20 dish's liked by the people. In this graph we can clearly see that the dish `Biryani` gains the top most position as compared to the rest of the dishes","45a9308b":"* The restaurant which is more famous amongst people are `Cafe Coffee Day`.","33d34b6c":"* From the above `rate` distribution it nearly follows **normal distribution with a mean equal to 3.7**. The graph show that the majority of the restaurant rating lies between the **3.4 - 4.2**. Very few restaurants have rating 4.8.","78f0ffe5":"## Pie Chart\n\n* **Pie chart** is a type of graph in which a circle is divided into sectors that each represent a proportion of the whole.\n* With the help of pie chart we are going to plot how much percentage of online orders are been placed","74d99686":"# Applying Decision tree Regressor","0031fa70":"* As expected most of the restaurants listed_in deliver to **BTM** location because this area is home to over more than 3000 restaurants. Even though **Koramangaka 7th Block** dont have many restaurants still it stands second in terms of the m=number of restaurants that deliver to this location.","163a1d31":"# 5. Model Deployment","a659eb35":"* From the above visualization we can say that most number of the restaurants are located at **BTM** which makes it most popular residential and commercial and residential places in Banglore.","593b6b9f":"From the above pie chart we can say people tend to order online rather than going into to a restaurant and dining in.","b4d50221":"# 2. Feature Engineering.","aba5574e":"#### Column description\n\n* **url** : contains the url of the restaurant in the zomato website\n* **address** : contains the address of the restaurant in Bengaluru\n* **name** : contains the name of the restaurant\n* **online_order** : whether online ordering is available in the restaurant or not\n* **book_table** : table book option available or not\n* **rate** : contains the overall rating of the restaurant out of 5\n* **votes** : contains total number of rating for the restaurant as of the above mentioned date\n* **phone** : contains the phone number of the restaurant\n* **location** : contains the neighborhood in which the restaurant is located\n* **rest_type** : restaurant type\n* **dish_liked** : dishes people liked in the restaurant\n* **cuisines** : food styles, separated by comma\n* **cost_two** : contains the approximate cost for meal for two people\n* **reviews_list** : list of tuples containing reviews for the restaurant, each tuple\n* **menu_item** : contains list of menus available in the restaurant\n* **service_type** : type of meal\n* **serve_to** : contains the neighborhood in which the restaurant is listed","7ff73a2c":"# If you like it please consider upvoting it, it will motivate me more.\n\n# Thank You <3","674dbdf3":"### Restaurant Listed in\n\n* Let's see to in which area most of the restaurants are listed in or deliver to","c81a5932":"# 1. Exploratory Data Analysis.","0f772940":"* From the above graph we can see the top 10 most important features which are very important to train our model and get correct predictions. We will be using these features for our model building.","b2fb61ae":"* We can clearly see that the ratings affects drastically if the restaurant has table booking or not. The restaurants which are having table booking facility tends to have higher ratings as compared to the restaurants which dont have table booking facility available with them.","312c5db2":"* From the above Pie chart we can see that 87.5% of the restaurants have table booking facility available and 12.5% dont have table booking available.","2101d24f":"### Bar Plot\n\n* Barplot is one of the mostt commonly used graphic to represent the data. Barplot represents the data in rectangular bars with the length of the bar proportional to the value of variable. We will analyze the variable `location` and see in which area most of the restaurants are located in Bangalore."}}