{"cell_type":{"4a212b23":"code","a40b9832":"code","71ab979c":"code","59b4568f":"code","2ee159a0":"code","115916ae":"code","19958481":"code","80affa25":"code","c4562e39":"code","395657c1":"code","21fd5322":"code","0357a0ef":"code","49f12ce6":"code","c5cba70a":"code","30e21b0d":"code","d5e83659":"code","f0054f09":"code","bbaf8478":"code","2142d7ec":"code","70bcdb3e":"code","6212eed5":"code","ea1961cb":"code","95536dad":"code","393ca8f3":"code","cfa6917e":"code","ed7c33d9":"code","516d8526":"code","758ff2a3":"code","d455dd5f":"code","83ef4760":"code","e9ddaab8":"code","cf99ad93":"code","bd8f81df":"code","e6e1bccc":"code","989e3569":"code","34f5b570":"code","cc1d87ef":"markdown"},"source":{"4a212b23":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport torch \nimport torch.nn as nn\nfrom torch.utils.data import TensorDataset, DataLoader,Dataset , SubsetRandomSampler \nimport torch.nn.functional as F\nimport torchvision\nimport torchvision.transforms as transforms\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nimport cv2\nimport albumentations\nfrom albumentations import torch as AT\nfrom torch.optim import lr_scheduler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold,StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import cohen_kappa_score\nimport os\nprint(os.listdir(\"..\/input\"))","a40b9832":"base_dr = \"..\/input\/aptos2019-blindness-detection\/\"","71ab979c":"# Reading the CSVs\ntrain = pd.read_csv(base_dr+'train.csv')\ntest = pd.read_csv(base_dr+'test.csv')","59b4568f":"def cohen_k_score(y_true , y_pred):\n    skl = cohen_kappa_score(np.argmax(y_true, axis=1), np.argmax(y_pred, axis=1), weights='quadratic')\n    return skl","2ee159a0":"train.head() ","115916ae":"test.head()","19958481":"#### Label Distribution:\nimport seaborn as sns\nsns.countplot(x='diagnosis' , data=train);","80affa25":"print('No of images in the train set:', format(train.shape[0]))\nprint('No of images in the test set:', format(test.shape[0]))","c4562e39":"diagnosis = {'No DR': 0, \n'Mild': 1, \n'Moderate': 2, \n'Severe': 3, \n'Proliferative DR': 4}","395657c1":"### preparing some useful stuff for easy vizualizations later on\nRev = dict((v,k) for k,v in diagnosis.items())  ### need to reverse\ndia = pd.DataFrame(train['diagnosis'].map(Rev))\ndia.rename(columns={'diagnosis': \"diagnosisText\"},inplace=True)\ndia = pd.concat([train,pd.DataFrame(dia)],1)\ndia.head()","21fd5322":"from random import sample\nimport cv2\nimport matplotlib.image as mpimg\n\ndef plotClass(category,N):\n    # credit : https:\/\/www.kaggle.com\/pheadrus\/purepytorchmodels?scriptVersionId=15756053\n    categoryIdx = dia[dia['diagnosisText']==category].index[:30]\n    randIdx = sample(list(categoryIdx),N)\n    jpegName = dia.iloc[randIdx,:]['id_code'].values\n    fig = plt.figure(figsize=(18,14))\n    for i , jpeg in enumerate(list(jpegName)):\n        plt.subplot(1,N ,i+1)\n        imgFile = mpimg.imread('{}\/train_images\/{}.png'.format(base_dr,jpeg))\n        plt.imshow(imgFile)","0357a0ef":"plotClass('No DR',4)","49f12ce6":"plotClass('Proliferative DR',4)","c5cba70a":"plotClass('Severe',4)","30e21b0d":"plotClass('Moderate',4)","d5e83659":"from sklearn.preprocessing import OneHotEncoder,LabelEncoder\n\ndef prepare_labels(y):\n    values = np.array(y)\n    label_encoder = LabelEncoder()\n    integer_encoded = label_encoder.fit_transform(values)\n\n    onehot_encoder = OneHotEncoder(sparse=False)\n    integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n    onehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n\n    y = onehot_encoded\n    return y, label_encoder","f0054f09":"y, le_full = prepare_labels(train['diagnosis'])\ny.shape","bbaf8478":"y[0:5]","2142d7ec":"train.iloc[0:5]['diagnosis']","70bcdb3e":"class BlindnessDataset(Dataset):\n    def __init__(self, df, datatype='train', transform = transforms.Compose([transforms.CenterCrop(32),transforms.ToTensor()]), y = None):\n        self.df = df\n        self.datatype = datatype\n        self.image_files_list = [f'..\/input\/aptos2019-blindness-detection\/{self.datatype}_images\/{i}.png' for i in df['id_code'].values]\n        if self.datatype == 'train':\n            self.labels = y\n        else:\n            self.labels = np.zeros((df.shape[0], 5))\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.image_files_list)\n\n    def __getitem__(self, idx):\n        img_name = self.image_files_list[idx]\n        img = cv2.imread(img_name)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        image = self.transform(image=img)\n        image = image['image']\n\n        img_name_short = self.image_files_list[idx].split('.')[0]\n\n        label = self.labels[idx]\n        if self.datatype == 'test':\n            return image, label, img_name\n        else:\n            return image, label","6212eed5":"#data_transforms = albumentations.Compose([\n#    albumentations.Resize(224, 224),\n#    albumentations.HorizontalFlip(),\n#    albumentations.RandomBrightness(),\n#    albumentations.ShiftScaleRotate(rotate_limit=15, scale_limit=0.10),\n#    albumentations.JpegCompression(80),\n#    albumentations.HueSaturationValue(),\n#    albumentations.Normalize(),\n#    AT.ToTensor()\n#    ])\ndata_transforms = albumentations.Compose([\n    albumentations.Resize(224, 224),\n    albumentations.HorizontalFlip(p=0.5),\n    albumentations.Transpose(p=0.5),\n    albumentations.Flip(p=0.0),\n    albumentations.OneOf([\n        albumentations.CLAHE(clip_limit=2), albumentations.IAASharpen(), albumentations.IAAEmboss(), \n        albumentations.RandomBrightness(), albumentations.RandomContrast(),\n        albumentations.JpegCompression(), albumentations.Blur(), albumentations.GaussNoise()], p=0.5), \n    albumentations.HueSaturationValue(p=0.5), \n    albumentations.ShiftScaleRotate(shift_limit=0.15, scale_limit=0.15, rotate_limit=45, p=0.5),\n    albumentations.Normalize(mean=[0.485, 0.456, 0.406],std=[0.229, 0.224, 0.225]),\n    AT.ToTensor()\n   ])\ndata_transforms_test = albumentations.Compose([\n    albumentations.Resize(224, 224),\n    albumentations.Normalize(mean=[0.485, 0.456, 0.406],std=[0.229, 0.224, 0.225]),\n    #albumentations.Random\n    AT.ToTensor()\n    ])","ea1961cb":"batch_size = 64\nnum_workers = 8\n\n## 90 - 10 train & validation split \ntr, val = train_test_split(train.diagnosis, stratify=train.diagnosis, test_size=0.1)\n\n# SubsetSampler for train & validation\ntrain_sampler = SubsetRandomSampler(list(tr.index))\nvalid_sampler = SubsetRandomSampler(list(val.index))\n\n# Train Dataset\ndataset = BlindnessDataset(df=train, datatype='train', transform=data_transforms, y=y)\n\n#Test Dataset\ntest_set = BlindnessDataset(df=test, datatype='test', transform=data_transforms_test)\n\n# prepare data loaders (combine dataset and sampler)\ntrain_loader = torch.utils.data.DataLoader(dataset, batch_size=batch_size, \n                                           sampler=train_sampler, num_workers=num_workers)\nvalid_loader = torch.utils.data.DataLoader(dataset, batch_size=batch_size, \n                                           sampler=valid_sampler, num_workers=num_workers)\ntest_loader = torch.utils.data.DataLoader(test_set, batch_size=batch_size, \n                                          num_workers=num_workers)","95536dad":"images_batch, labels_batch = iter(train_loader).next()\nprint(images_batch.shape)\nprint(labels_batch.shape)","393ca8f3":"model = torchvision.models.resnet50()\nmodel.load_state_dict(torch.load(\"..\/input\/resnet50\/resnet50.pth\"))","cfa6917e":"#model","ed7c33d9":"# Freeze model weights\nfor param in model.parameters():\n    param.requires_grad = False","516d8526":"def count_parameters(model):\n    '''\n    Count of trainable weights in a model\n    '''\n    return sum(p.numel() for p in model.parameters() if p.requires_grad)\n\ncount_parameters(model)","758ff2a3":"for name, child in model.named_children():\n    print(name)","d455dd5f":"for name, child in model.named_children():\n    if name in ['layer3', 'layer4']:\n        print(name + ' is unfrozen')\n        for param in child.parameters():\n            param.requires_grad = True\n    else:\n        print(name + ' is frozen')\n        for param in child.parameters():\n            param.requires_grad = False","83ef4760":"num_ftrs = model.fc.in_features\nprint(num_ftrs)\n#model.fc = nn.Sequential(\n#                          nn.BatchNorm1d(num_ftrs, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),\n#                          nn.Dropout(p=0.5),\n#                          nn.Linear(in_features=2048, out_features=1024, bias=True),\n#                          nn.SELU(),\n#                          #nn.BatchNorm1d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),\n#                          #nn.Dropout(p=0.5),\n#                          #nn.Linear(in_features=2048, out_features=1024, bias=True),\n#                          nn.BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),\n#                          nn.SELU(),\n#                          nn.Dropout(p=0.4),\n#                          nn.Linear(in_features=1024, out_features=100, bias=True),\n#                          nn.SELU(),\n#                          nn.Dropout(p=0.3),\n#                          nn.Linear(in_features=100, out_features=5, bias=True),\n#                         )\n\nmodel.fc =  model.last_linear = nn.Sequential(\n                          nn.BatchNorm1d(num_ftrs, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),\n                          nn.Dropout(p=0.25),\n                          nn.Linear(in_features=2048, out_features=2048, bias=True),\n                          nn.ReLU(),\n                          nn.BatchNorm1d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),\n                          nn.Dropout(p=0.5),\n                          nn.Linear(in_features=2048, out_features=5, bias=True),\n                         )","e9ddaab8":"model","cf99ad93":"model.cuda()\ncriterion = nn.BCEWithLogitsLoss()\n\noptimizer = optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr= 1e-4)\n#scheduler = lr_scheduler.StepLR(optimizer, step_size=3, gamma=0.1)\n#scheduler = lr_scheduler.ReduceLROnPlateau(optimizer, factor=0.5, patience=2)\nscheduler = lr_scheduler.StepLR(optimizer, 5, gamma=0.2)\nscheduler_cosineAL = lr_scheduler.CosineAnnealingLR(optimizer, len(train_loader), eta_min=1e-6)","bd8f81df":"useCosine = True\nvalid_ck_min = 0\npatience = 10\n# current number of epochs, where validation loss didn't increase\np = 0\n# whether training should be stopped\nstop = False\n\n# number of epochs to train the model\nn_epochs = 70\nfor epoch in range(1, n_epochs+1):\n    print('Epoch:', format(epoch))\n\n    train_loss = []\n    train_ck_score = []\n\n    for batch_i, (data, target) in enumerate(train_loader):\n        \n        model.train()\n\n        data, target = data.cuda(), target.cuda()\n        \n        #print('target:',format(target.shape))\n\n        optimizer.zero_grad()\n        output = model(data)\n        \n        #print('output:',format(output.shape))\n        \n        loss = criterion(output, target.float())\n        train_loss.append(loss.item())\n        \n        a = target.data.cpu().numpy()\n        #b = output[:,-1].detach().cpu().numpy()\n        b = output.detach().cpu().numpy()\n        train_ck_score.append(cohen_k_score(a, b))\n        \n        loss.backward()\n        optimizer.step()\n        \n    model.eval()\n    val_loss = []\n    val_ck_score = []\n    for batch_i, (data, target) in enumerate(valid_loader):\n        data, target = data.cuda(), target.cuda()\n        output = model(data)\n\n        loss = criterion(output, target.float())\n\n        val_loss.append(loss.item()) \n        a = target.data.cpu().numpy()\n        b = output.detach().cpu().numpy()\n        val_ck_score.append(cohen_k_score(a, b))\n\n    # print(f'Epoch {epoch}, train loss: {np.mean(train_loss):.4f}, valid loss: {np.mean(val_loss):.4f}, train auc: {np.mean(train_auc):.4f}, valid auc: {np.mean(val_auc):.4f}')\n    print(f'Epoch {epoch}, train loss: {np.mean(train_loss):.4f}, valid loss: {np.mean(val_loss):.4f}.')\n    print(f'Epoch {epoch}, train cohen: {np.mean(train_ck_score):.4f}, valid cohen: {np.mean(val_ck_score):.4f}.')\n    \n    #valid_loss = np.mean(val_loss)\n    val_ck_score = np.mean(val_ck_score)\n    \n    if useCosine:\n        scheduler_cosineAL.step()\n    else:\n        scheduler.step()\n    \n    #scheduler.step(val_ck_score)\n    if val_ck_score > valid_ck_min:\n        print('Validation CK score increased ({:.6f} --> {:.6f}).  Saving model ...'.format(\n        valid_ck_min,\n        val_ck_score))\n        #torch.save(model_conv.state_dict(), 'model.pt')\n        valid_ck_min = val_ck_score\n        p = 0\n\n    # check if validation loss didn't improve\n    if val_ck_score < valid_ck_min:\n        p += 1\n        print(f'{p} epochs of decreasing val ck score')\n        if p > patience:\n            print('Stopping training : Early Stopping')\n            stop = True\n            break        \n            \n    if stop:\n        break","e6e1bccc":"sub = pd.read_csv('..\/input\/aptos2019-blindness-detection\/sample_submission.csv')\n\nmodel.eval()\nfor (data, target, name) in test_loader:\n    data = data.cuda()\n    output = model(data)\n    output = output.cpu().detach().numpy()\n    for i, (e, n) in enumerate(list(zip(output, name))):\n        sub.loc[sub['id_code'] == n.split('\/')[-1].split('.')[0], 'diagnosis'] = le_full.inverse_transform([np.argmax(e)])\n        \nsub.to_csv('submission.csv', index=False)","989e3569":"sub.head()","34f5b570":"sub.diagnosis.value_counts(normalize = True)","cc1d87ef":"###  Diabetic Ratinopathy\n\n0 - No DR , 1 - Mild , 2 - Moderate , 3 - Severe , 4 - Proliferative DR"}}