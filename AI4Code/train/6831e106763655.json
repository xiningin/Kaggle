{"cell_type":{"04d2bf2c":"code","dbcd407f":"code","266910a1":"code","9905551b":"code","b8720f43":"code","237f0332":"code","36577b52":"code","e49a6e38":"code","696a2c3e":"code","9cdfd7ee":"markdown","86464fc8":"markdown","48fcd822":"markdown","238648aa":"markdown","2b642389":"markdown"},"source":{"04d2bf2c":"filename='\/kaggle\/input\/corona-virus-time-series-dataset\/COVID-19\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Confirmed.csv'","dbcd407f":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom datetime import datetime, timedelta\n\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import MultiTaskElasticNet\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.pipeline import Pipeline","266910a1":"df = pd.read_csv(filename)","9905551b":"df","b8720f43":"def __split_data(df, nation):\n\n    idx_start = 4\n\n    df_n = df[(df['Country\/Region']==nation) & ((df['Province\/State'].isna()) | (df['Province\/State']==nation))]\n    \n    n = df_n.shape[0]\n    \n    X = []\n    y = []\n    \n    for i in range(0,n):\n    \n        X_t = np.asarray([datetime.strptime(col, '%m\/%d\/%y').timestamp() for col in df.columns[idx_start:]])\n        y_t = df_n.values[i][idx_start:]\n\n        idx = 0\n        ii = [ i for i,y in enumerate(y_t) if y<100]\n        if len(ii)>0:\n            idx = max( ii )\n\n        X_t = X_t[idx:]\n        y_t = y_t[idx:]\n        \n        first_day = min(X_t)\n\n        # renoramlize\n        SEC_PER_DAY=24*60*60\n        X_t = np.asarray([ (x - first_day)\/SEC_PER_DAY for x in X_t])\n      \n        \n        X.append(X_t)\n        y.append(y_t)\n\n    return np.asarray(X), np.asarray(y), df_n['Province\/State'].values","237f0332":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef __build_model(degree):\n    model = Pipeline([('poly', PolynomialFeatures(degree=degree)),\n                      ('linear', ElasticNet(fit_intercept=False, max_iter=10000))])\n\n    return model\n\ndef __evaluate_model(X_train, y_train, model):\n      \n    # predicting on training data-set\n    y_train_predicted = model.predict(X_train)\n    \n    \n    # evaluating the model on training dataset\n    rmse_train = np.sqrt(mean_squared_error(y_train, y_train_predicted))\n    r2_train = r2_score(y_train, y_train_predicted)\n    mape = np.mean(np.abs((y_train - y_train_predicted) \/ y_train)) * 100\n\n\n    print(\"RMSE of training set is {}\".format(rmse_train))\n    print(\"R2 score of training set is {}\".format(r2_train))\n    print(\"MAPE score of training set is {}\".format(mape))\n\n    return mape, rmse_train, r2_train","36577b52":"def predict_and_plot(df, nation, population, next_days, color):\n    \n    DEGREE=3\n\n    X_train_l, y_train_l, provinces = __split_data(df, nation)\n\n    n = X_train_l.shape[0]\n    \n\n    for i, p in enumerate(provinces):\n        \n        X_train = X_train_l[i] \n        y_train = y_train_l[i]\n        \n        X_train =X_train[0:-1]\n        y_train = y_train[1:] - y_train[0:-1]\n\n        last_day = max(X_train)\n        \n        if str(p)=='nan':\n            p='all'\n        else:\n            p = str(p)\n        \n        \n        X_test = np.asarray([ i +last_day for i in range(0,next_days)])\n        \n        model = __build_model(DEGREE)\n        model.fit(X_train.reshape(-1, 1)  , y_train \/ population)\n        y_test_predict_u = model.predict(X_test.reshape(-1, 1))\n        \n        model = __build_model(DEGREE+1)\n        model.fit(X_train.reshape(-1, 1) , y_train \/ population)\n        y_test_predict_l = model.predict(X_test.reshape(-1, 1))\n        \n        y_test_predict = y_test_predict_u\/2 + y_test_predict_l\/2\n        \n        #y_test_predict_l, y_test_predict_u = y_test_predict - y_test_predict*mape\/200, y_test_predict + y_test_predict*mape\/200\n        \n        if (max(y_test_predict_u)<max(y_test_predict_l)):\n            tmp = y_test_predict_l \n            y_test_predict_l = y_test_predict_u\n            y_test_predict_u = tmp\n        \n        # show predicted data\n        plt.plot(X_train, y_train,'*', label=nation + ' ' + p + ' actual',c=color, linewidth=3.0)\n    \n        plt.plot(X_test, y_test_predict * population,':',c=color, linewidth=3.0)\n        plt.fill_between(X_test, y_test_predict_l* population, y_test_predict_u* population, color=color, alpha=0.3, label= nation + ' predicted')\n        \n        print('current day ', nation, p,\":\", y_test_predict_u[0] * population, y_train[-1])\n        print('next day ', nation, p,\":\", y_test_predict_u[1]* population)","e49a6e38":"population_by_nation = {'Italy': 60.480,\n                        'France': 66.890,\n                        'Spain':46.600,\n                         'Japan':126.800,\n                         'Germany': 82.790,\n                         'Norway': 5.368,\n                         'Belgium': 11.400,\n                         'Greece': 10.740}\npopulation_by_nation = {'Italy': 60.480,'Germany': 82.790,'France': 66.890,'Spain':46.600}","696a2c3e":"from matplotlib.cm import get_cmap\n\nname = \"Set1\"\ncmap = get_cmap(name)\nCOLORS =  cmap.colors\n\n\ndef predict_and_plot_all(df, population_by_nation, next_days):\n    plt.figure(figsize=(20,10))\n    for i,nation in enumerate(population_by_nation):\n        #print(\"--\\n\",nation)\n        population = population_by_nation[nation]\n        predict_and_plot(df, nation,population, next_days, color = COLORS[i])\n    \n    plt.ylim(0, 30000)\n    plt.ylabel('$\\Delta$ infected')\n    plt.legend()\n    plt.grid()\n    plt.show()\n    \npredict_and_plot_all(df, population_by_nation, 60)","9cdfd7ee":"Apply model and show result by nation, normalised by population and difference between the days.","86464fc8":"List of nations we want to show","48fcd822":"Build the ElasticNet model","238648aa":"Parse Data\ncolumns -> datetime and filter only by Nation","2b642389":"Main"}}