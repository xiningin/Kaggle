{"cell_type":{"06a4a477":"code","580a0db2":"code","20cfa202":"code","b55b2dac":"code","be123ff4":"code","2bc71bae":"code","36ad3243":"code","0037c13e":"code","2497c2fb":"code","006e9231":"code","4c663131":"code","41f3aea4":"code","e4b81715":"code","8a62f31b":"code","4c5b077c":"code","d89e6470":"code","c2054d7e":"code","892f5750":"code","cc8370c0":"code","f0f8b20f":"code","c7c49c17":"code","2d4696a1":"code","611182e9":"code","a20acae6":"code","5014595d":"code","bad55d82":"code","1bb46e67":"code","b5af5d48":"code","8c4f0d80":"code","6ef525df":"code","ab82936f":"code","3b4311f4":"code","45da5cd8":"code","be83a429":"code","e24f27e9":"code","4f3b15be":"code","62011e31":"code","80eb2408":"code","a105020f":"code","8b5212e9":"code","e36d3288":"code","a910defc":"code","4fc009d0":"code","3acbdbcb":"code","c1645150":"code","cb63262b":"code","1b7c6bf3":"code","245e53bf":"code","cb9dde27":"code","6c37c843":"code","2027cf22":"code","6da9b889":"code","6a0d0ef5":"code","35008731":"code","de1df472":"code","2a1cc43f":"code","1633f8e7":"code","af09fc8a":"code","2ef00d1d":"code","2ea6529b":"code","52d163ed":"code","171701fd":"code","29bd5212":"code","08e5e540":"code","1d1212b4":"code","5d14aebe":"code","6d54929a":"code","01690026":"code","94059267":"code","af60fbfc":"code","6c7be72d":"code","de9d9624":"code","d0f148c4":"code","a6b28201":"code","369a7b53":"code","3f361402":"code","f2797a1e":"code","e5109cc3":"code","8b8ed207":"code","bb6ff84e":"code","ce9905a1":"code","047512e0":"code","56a88005":"code","1659e8cd":"code","c31068f2":"code","7365ed0e":"code","1f8dc693":"code","035042f4":"code","d34e07dd":"code","1820a22b":"code","f3f9e22a":"code","98434c76":"code","91de3f62":"code","75552dab":"code","0eb967ad":"code","e2a900c3":"code","8cd482d2":"code","07e865a2":"code","51a50a5b":"code","e0f94642":"code","9ce46ef9":"code","c0eb9ed2":"code","136024a3":"code","0b3391b5":"code","819d33ec":"code","3e50a64e":"code","966b82c2":"code","2fe40f17":"code","9d88994a":"code","c09b2051":"code","0aff78e9":"code","5ab120c9":"code","65299bd9":"code","cddd5403":"code","6324846b":"code","603ee5be":"code","bc76ce9f":"code","22e9eda9":"code","90c8721b":"markdown","f0cb7e19":"markdown","1f19fde2":"markdown","b0cfae9f":"markdown","d765f2cb":"markdown","59071a98":"markdown","a83c905e":"markdown","83947aaa":"markdown","6bb308a5":"markdown","9d69cd41":"markdown","55906563":"markdown","5208b2c4":"markdown","c034c826":"markdown","c3c32d64":"markdown","f2bd75e1":"markdown","ab713140":"markdown","15925815":"markdown","20733d53":"markdown","c8c0041b":"markdown","6c300880":"markdown","49ce51ce":"markdown","c9111b39":"markdown","d603aabf":"markdown","41a3be2b":"markdown","496201d4":"markdown","0f359ee6":"markdown","c685f777":"markdown","4986695c":"markdown","49ae9df7":"markdown","89c2171c":"markdown","1b4fe4f6":"markdown"},"source":{"06a4a477":"# data analysis libraries:\nimport numpy as np\nimport pandas as pd\n\n# data visualization libraries:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# to ignore warnings:\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# to display all columns:\npd.set_option('display.max_columns', None)\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV","580a0db2":"# Read train and test data with pd.read_csv():\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","20cfa202":"# copy data in order to avoid any change in the original:\ntrain=train_data.copy()\ntest=test_data.copy()","b55b2dac":"train.head()","be123ff4":"test.head()","2bc71bae":"train.info()","36ad3243":"train.describe().T","0037c13e":"train['Pclass'].value_counts()","2497c2fb":"train[\"Sex\"].value_counts()","006e9231":"train[\"SibSp\"].value_counts()","4c663131":"train[\"Parch\"].value_counts()","41f3aea4":"train[\"Ticket\"].value_counts()","e4b81715":"train[\"Cabin\"].value_counts()","8a62f31b":"train[\"Embarked\"].value_counts()","4c5b077c":"sns.barplot(x=\"Pclass\",y=\"Survived\", data=train) ;","d89e6470":"sns.barplot(x=\"SibSp\", y=\"Survived\" , data= train);","c2054d7e":"sns.barplot(x= \"Parch\" , y=\"Survived\", data=train);","892f5750":"sns.barplot(x=\"Sex\",y=\"Survived\" , data= train);","cc8370c0":"train.info()","f0f8b20f":"Age_visualization=train[\"Age\"].dropna()","c7c49c17":"sns.distplot(Age_visualization, kde = False);","2d4696a1":"sns.kdeplot(train[\"Fare\"], shade = True);","611182e9":"(sns\n .FacetGrid(train,\n              hue = \"Survived\",\n              height = 7,\n              xlim = (0, 500))\n .map(sns.kdeplot, \"Fare\", shade= True)\n .add_legend()\n);","a20acae6":"(sns\n .FacetGrid(train,\n              hue = \"Survived\",\n              height = 5,\n              xlim = (0, 90))\n .map(sns.kdeplot, \"Age\", shade= True)\n .add_legend()\n);","5014595d":"train.head()","bad55d82":"train= train.drop(\"Ticket\", axis=1)\ntest=test.drop(\"Ticket\", axis=1)\ntrain.head()\n","1bb46e67":"train.describe().T","b5af5d48":"sns.boxplot(x=train[\"Fare\"]);","8c4f0d80":"Q1= train[\"Fare\"].quantile(0.25)\nQ3= train[\"Fare\"].quantile(0.75)\nIQR=Q3-Q1\n\nlower_limit=Q1-1.5*IQR\nupper_limit=Q3+1.5*IQR\nupper_limit","6ef525df":"test.isnull().sum()","ab82936f":"test[test[\"Fare\"].isnull()]","3b4311f4":"train_Fare=train[\"Fare\"]","45da5cd8":"test_Fare=test[\"Fare\"]","be83a429":"upper_fare=263","e24f27e9":"aykiri_train = (train_Fare>upper_fare)\n","4f3b15be":"aykiri_test = (test_Fare> upper_fare)\n","62011e31":"train_Fare[aykiri_train] = upper_fare","80eb2408":"train[\"Fare\"]=train_Fare","a105020f":"test_Fare[aykiri_test] = upper_fare","8b5212e9":"test[\"Fare\"]=test_Fare","e36d3288":"test[test[\"PassengerId\"]==1044]","a910defc":"train.sort_values(\"Fare\", ascending=False).head(20)","4fc009d0":"test.sort_values(\"Fare\", ascending=False).head()","3acbdbcb":"train.isnull().sum()","c1645150":"test.isnull().sum()","cb63262b":"train[\"Title\"] = train[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntest[\"Title\"] = test[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)","1b7c6bf3":"train.head()","245e53bf":"train['Title'] = train['Title'].replace([ 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ntrain['Title'] = train['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ntrain['Title'] = train['Title'].replace('Mlle', 'Miss')\ntrain['Title'] = train['Title'].replace('Ms', 'Miss')\ntrain['Title'] = train['Title'].replace('Mme', 'Mrs')","cb9dde27":"test['Title'] = test['Title'].replace([ 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ntest['Title'] = test['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ntest['Title'] = test['Title'].replace('Mlle', 'Miss')\ntest['Title'] = test['Title'].replace('Ms', 'Miss')\ntest['Title'] = test['Title'].replace('Mme', 'Mrs')","6c37c843":"train[[\"Title\",\"Age\"]].groupby(\"Title\").mean()","2027cf22":"for i in train[\"Title\"]:\n    if i==\"Master\":\n        train[\"Age\"]=train[\"Age\"].fillna(4)\n    elif i==\"Miss\":\n        train[\"Age\"]=train[\"Age\"].fillna(22) \n    elif i==\"Mr\":\n        train[\"Age\"]=train[\"Age\"].fillna(32)\n    elif i==\"Mrs\":\n        train[\"Age\"]= train[\"Age\"].fillna(36)\n    elif i==\"Rare\":\n        train[\"Age\"]= train[\"Age\"].fillna(46)\n    else:\n        train[\"Age\"]=train[\"Age\"].fillna(41)","6da9b889":"train.isnull().sum()","6a0d0ef5":"test[[\"Title\",\"Age\"]].groupby(\"Title\").mean()","35008731":"for i in train[\"Title\"]:\n    if i==\"Master\":\n        test[\"Age\"]=test[\"Age\"].fillna(7)\n    elif i==\"Miss\":\n        test[\"Age\"]=test[\"Age\"].fillna(22) \n    elif i==\"Mr\":\n        test[\"Age\"]=test[\"Age\"].fillna(32)\n    elif i==\"Mrs\":\n        test[\"Age\"]= test[\"Age\"].fillna(38)\n    elif i==\"Rare\":\n        test[\"Age\"]= test[\"Age\"].fillna(44)\n    else:\n        test[\"Age\"]=test[\"Age\"].fillna(41)","de1df472":"test.isnull().sum()","2a1cc43f":"test[[\"Pclass\",\"Fare\"]].groupby(\"Pclass\").mean()","1633f8e7":"test[\"Fare\"] = test[\"Fare\"].fillna(12)","af09fc8a":"test.isnull().sum()","2ef00d1d":"train.isnull().sum()","2ea6529b":"# we can ignore cabin value\n\ntrain = train.drop(['Cabin'], axis = 1)\ntest = test.drop(['Cabin'], axis = 1)\n\ntrain.head()","52d163ed":"train.isnull().sum()","171701fd":"test.isnull().sum()","29bd5212":"train[\"Embarked\"].value_counts()","08e5e540":"train[\"Embarked\"]=train[\"Embarked\"].fillna(\"S\")","1d1212b4":"# one hot encoding\nfrom sklearn import preprocessing\n\nlbe=preprocessing.LabelEncoder()\ntrain[\"Embarked\"]=lbe.fit_transform(train[\"Embarked\"])\ntest[\"Embarked\"]=lbe.fit_transform(test[\"Embarked\"])\n","5d14aebe":"train.head()","6d54929a":"Sex_mapping={\"male\":3,\"female\":7}\ntrain[\"Sex\"]=train[\"Sex\"].map(Sex_mapping)\ntest[\"Sex\"]=test[\"Sex\"].map(Sex_mapping)","01690026":"train.head()","94059267":"train[[\"Title\",\"Survived\"]].groupby([\"Title\"], as_index=False).mean().sort_values(\"Survived\")","af60fbfc":"Title_mapping={\"Mr\":1,\"Rare\":2,\"Master\":3,\"Miss\":4,\"Mrs\":5,\"Royal\":2}\ntrain[\"Title\"]=train[\"Title\"].map(Title_mapping)\ntest[\"Title\"]=test[\"Title\"].map(Title_mapping)","6c7be72d":"train.head()","de9d9624":"test.head()","d0f148c4":"train_name=train[\"Name\"]\nfor i in train['Name']:\n    train['Name']= train['Name'].replace(i,len(i))\n    \n      \n","a6b28201":"train[\"Name\"]","369a7b53":"for i in test['Name']:\n    test['Name']= test['Name'].replace(i,len(i))","3f361402":"test[\"Name\"].describe()","f2797a1e":"bins = [0,25,40, np.inf]\nmylabels = ['s_name', 'm_name', 'l_name',]\ntrain[\"Name_len\"] = pd.cut(train[\"Name\"], bins, labels = mylabels)\ntest[\"Name_len\"] = pd.cut(test[\"Name\"], bins, labels = mylabels)","e5109cc3":"train[\"Name_len\"].value_counts()","8b8ed207":"train[[\"Name_len\",\"Survived\"]].groupby(\"Name_len\").mean()","bb6ff84e":"Name_mapping = {'s_name': 2, 'm_name': 4, 'l_name': 8}\ntrain['Name_len'] = train['Name_len'].map(Name_mapping)\ntest['Name_len'] = test['Name_len'].map(Name_mapping)","ce9905a1":"train.head()","047512e0":"train = train.drop(['Name'], axis = 1)\ntest = test.drop(['Name'], axis = 1)","56a88005":"sns.distplot(train[\"Age\"], kde = False);","1659e8cd":"sns.distplot(Age_visualization, kde = False);","c31068f2":"bins = [0, 5, 12, 18, 24, 35, 60, np.inf]\nmylabels = ['Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = mylabels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = mylabels)","7365ed0e":"train[[\"AgeGroup\",\"Survived\"]].groupby(\"AgeGroup\").mean()","1f8dc693":"# Map each Age value to a numerical value:\nage_mapping = {'Baby': 1, 'Child': 2, 'Teenager': 3, 'Student': 4, 'Young Adult':5 , 'Adult': 6, 'Senior':7}\ntrain['AgeGroup'] = train['AgeGroup'].map(age_mapping)\ntest['AgeGroup'] = test['AgeGroup'].map(age_mapping)","035042f4":"train.head()","d34e07dd":"train['FareBand'] = pd.qcut(train['Fare'], 4, labels = [1, 2, 3, 4])\ntest['FareBand'] = pd.qcut(test['Fare'], 4, labels = [1, 2, 3, 4])","1820a22b":"train.head()","f3f9e22a":"train.head()","98434c76":"train[\"FamilySize\"] =train[\"SibSp\"]+train[\"Parch\"]+1\ntrain[\"FamilySize\"].mean()","91de3f62":"test[\"FamilySize\"] =test[\"SibSp\"]+test[\"Parch\"]+1\ntest[\"FamilySize\"].mean()","75552dab":"sns.distplot(train[\"FamilySize\"], kde = False);","0eb967ad":"train['Single'] = train['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ntrain['SmallFam'] = train['FamilySize'].map(lambda s: 1 if  s == 2  else 0)\ntrain['MedFam'] = train['FamilySize'].map(lambda s: 1 if 3 <= s <= 4 else 0)\ntrain['LargeFam'] = train['FamilySize'].map(lambda s: 1 if s >= 5 else 0)","e2a900c3":"test['Single'] = test['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ntest['SmallFam'] = test['FamilySize'].map(lambda s: 1 if  s == 2  else 0)\ntest['MedFam'] = test['FamilySize'].map(lambda s: 1 if 3 <= s <= 4 else 0)\ntest['LargeFam'] = test['FamilySize'].map(lambda s: 1 if s >= 5 else 0)\n","8cd482d2":"train.head()","07e865a2":"train = pd.get_dummies(train, columns = [\"Title\"])\ntrain = pd.get_dummies(train, columns = [\"Embarked\"], prefix=\"Em\")\n","51a50a5b":"test = pd.get_dummies(test, columns = [\"Title\"])\ntest = pd.get_dummies(test, columns = [\"Embarked\"], prefix=\"Em\")\n","e0f94642":"train[\"Pclass\"] = train[\"Pclass\"].astype(\"category\")\ntrain = pd.get_dummies(train, columns = [\"Pclass\"],prefix=\"Pc\")","9ce46ef9":"test[\"Pclass\"] = test[\"Pclass\"].astype(\"category\")\ntest = pd.get_dummies(test, columns = [\"Pclass\"],prefix=\"Pc\")","c0eb9ed2":"train.head()","136024a3":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\npredictors = train.drop(['Survived', 'PassengerId'], axis=1)\ntarget = train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(predictors, target, test_size = 0.20, random_state = 0)","0b3391b5":"x_train.shape","819d33ec":"x_test.shape","3e50a64e":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_test)\nacc_logreg = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_logreg)","966b82c2":"from sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(x_train, y_train)\ny_pred = randomforest.predict(x_test)\nacc_randomforest = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_randomforest)","2fe40f17":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\ngbk.fit(x_train, y_train)\ny_pred = gbk.predict(x_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","9d88994a":"xgb_params = {\n        'n_estimators': [200, 500],\n        'subsample': [0.6, 1.0],\n        'max_depth': [2,5,8],\n        'learning_rate': [0.1,0.01,0.02],\n        \"min_samples_split\": [2,5,10]}","c09b2051":"xgb = GradientBoostingClassifier()\n\nxgb_cv_model = GridSearchCV(xgb, xgb_params, cv = 10, n_jobs = -1, verbose = 2)","0aff78e9":"xgb_cv_model.fit(x_train, y_train)","5ab120c9":"xgb_cv_model.best_params_","65299bd9":"xgb = GradientBoostingClassifier(learning_rate = xgb_cv_model.best_params_[\"learning_rate\"], \n                    max_depth = xgb_cv_model.best_params_[\"max_depth\"],\n                    min_samples_split = xgb_cv_model.best_params_[\"min_samples_split\"],\n                    n_estimators = xgb_cv_model.best_params_[\"n_estimators\"],\n                    subsample = xgb_cv_model.best_params_[\"subsample\"])","cddd5403":"xgb_tuned =  xgb.fit(x_train,y_train)","6324846b":"y_pred = xgb_tuned.predict(x_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","603ee5be":"test","bc76ce9f":"ids = test['PassengerId']\npredictions = xgb_tuned.predict(test.drop('PassengerId', axis=1))\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","22e9eda9":"output","90c8721b":"## Basic summary statistics about the numerical data","f0cb7e19":"## Logistic Regression","1f19fde2":"# Missing Value Treatment","b0cfae9f":"## Deleting Unnecessary Variables","d765f2cb":"## Gradient Boosting Classifier","59071a98":"## Cabin","a83c905e":"## Embarked","83947aaa":"## Fare ","6bb308a5":"## Name and Title","9d69cd41":"## Ticket","55906563":"## Random Forest","5208b2c4":"## Outlier Treatment","c034c826":"## Sex","c3c32d64":"## Loading Data","f2bd75e1":"## Family Size","ab713140":"## Visualization","15925815":"## Embarked","20733d53":"# Variable Transformation","c8c0041b":"# Data Preparations","6c300880":"# Modeling, Evaluation and Model Tuning","49ce51ce":"## AgeGroup","c9111b39":"## Classes of some categorical variables","d603aabf":"## Deployment","41a3be2b":"# Feature Engineering","496201d4":"# Analysis and Visualization of Numeric and Categorical Variables","0f359ee6":"## Librarires","c685f777":"## Age ","4986695c":"## Spliting the train data","49ae9df7":"# Data Understanding","89c2171c":"In general, barplot is used for categorical variables while histogram, density and boxplot are used for numerical data.","1b4fe4f6":"## Embarked & Title &   Pclass"}}