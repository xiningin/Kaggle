{"cell_type":{"d36d2a68":"code","8ecfa8b3":"code","f6de0f88":"code","04470a4b":"code","e7a1fe46":"code","b8ca7f84":"code","50d169d8":"code","ac0aae68":"code","b90ffc7c":"code","d44147ca":"code","d6fe4860":"code","48eee6e7":"code","ab2b50ea":"code","301a15fb":"code","996eb504":"code","96451d98":"code","cfe69df0":"code","67cf333b":"markdown"},"source":{"d36d2a68":"import seaborn as sns\nimport matplotlib.pyplot as plt# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport plotly\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go","8ecfa8b3":"data=pd.read_csv(\"..\/input\/FIFA 2018 Statistics.csv\")\n\ndata.head()","f6de0f88":"data.dtypes","04470a4b":"# Plotting total goal attempts by teams\nattempts=data.groupby('Team')['Attempts'].sum().reset_index().sort_values(by=('Attempts'),ascending=False)\n\nplt.figure(figsize = (12, 10), facecolor = None)\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Attempts\", data=attempts)\n\nplot1.set_xticklabels(attempts['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total attempts')\nplot1.set_title('Total goal attempts by teams')","e7a1fe46":"# Plotting total goals by teams\ngoals_by_team=data.groupby('Team')['Goal Scored'].sum().reset_index().sort_values(by=('Goal Scored'),ascending=False)\n\nplt.figure(figsize = (12, 10), facecolor = None)\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Goal Scored\", data=goals_by_team)\n\nplot1.set_xticklabels(goals_by_team['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total goals scored')\nplot1.set_title('Total goals scored by teams')","b8ca7f84":"# Plotting mean ball possession for teams\n\nball_possession=data.groupby('Team')['Ball Possession %'].mean().reset_index().sort_values(by=('Ball Possession %'),ascending=False)\nball_possession \n\nplt.figure(figsize = (12, 10), facecolor = None)\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Ball Possession %\", data=ball_possession)\n\nplot1.set_xticklabels(ball_possession['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Ball possession')\nplot1.set_title('Mean ball possession')","50d169d8":"# Plotting total Man of the Match awards for teams\n\n# Encoding the values for the column man of the Match\nmom_1={'Man of the Match':{'Yes':1,'No':0}}\ndata.replace(mom_1,inplace=True)\n\n# Converting column datatype to int\ndata['Man of the Match']=data['Man of the Match'].astype(int)\n\nmom=data.groupby('Team')['Man of the Match'].sum().reset_index().sort_values(by=('Man of the Match'),ascending=False)\n\nplt.figure(figsize = (12, 10), facecolor = None)\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Man of the Match\", data=mom)\n\nplot1.set_xticklabels(mom['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total Man of the Matches')\nplot1.set_title('Most Man of the Match awards')","ac0aae68":"# Plot of Total On-target and Off-target and blocked attempts by teams\n\ngroup_attempt = data.groupby('Team')['On-Target','Off-Target','Blocked'].sum().reset_index()\n\n# Changing the dataframe for plotting\ngroup_attempt_sorted = group_attempt.melt('Team', var_name='Target', value_name='Value')\n\n# Plotting the new dataset created above\nplt.figure(figsize = (16, 10), facecolor = None)\n\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Value\", hue=\"Target\", data=group_attempt_sorted)\n\nplot1.set_xticklabels(group_attempt_sorted['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total Attempts')\nplot1.set_title('Total On-Target, Off-Target and Blocked attempts by teams')","b90ffc7c":"# Plotting Most saves by teams\n\nsaves=data.groupby('Team')['Saves'].sum().reset_index().sort_values(by=('Saves'),ascending=False)\n\nplt.figure(figsize = (12, 10), facecolor = None)\nsns.set_style(\"darkgrid\")\nplot1 = sns.barplot(x=\"Team\", y=\"Saves\", data=saves)\n\nplot1.set_xticklabels(saves['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total Saves')\nplot1.set_title('Most Saves')","d44147ca":"# Plotting Teams who did Own goals against themselves\n\nown_goal=data.groupby('Opponent')['Own goals'].sum().reset_index().sort_values(by=('Own goals'),ascending=False)\nown_goal=own_goal[own_goal['Own goals']!=0]\n\nplt.figure(figsize = (12, 10), facecolor = None)\nsns.set_style(\"darkgrid\")\nplot1 = sns.barplot(x=\"Opponent\", y=\"Own goals\", data=own_goal)\n\nplot1.set_xticklabels(own_goal['Opponent'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Own goals')\nplot1.set_title('Own goals against themselves')","d6fe4860":"# Plot of total corners, free kicks and offsides for teams\n\ncorners_offsides_freekicks = data.groupby('Team')['Corners','Offsides','Free Kicks'].sum().reset_index()\ncorners_offsides_freekicks\n\n# Changing the dataframe for plotting\ncorners_offsides_freekicks_sort = corners_offsides_freekicks.melt('Team', var_name='Target', value_name='Value')\n\n# Plotting the new dataset created above\nplt.figure(figsize = (16, 10), facecolor = None)\n\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Value\", hue=\"Target\", data=corners_offsides_freekicks_sort)\n\nplot1.set_xticklabels(corners_offsides_freekicks_sort['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Totals')\nplot1.set_title('Total Corners, free kicks and offsides for teams')","48eee6e7":"# Plot of total goals conceded by teams\n\n# Most goals conceded by teams\ngoals_conceded = data.groupby('Opponent')['Goal Scored'].sum().reset_index().sort_values(by=('Goal Scored'), ascending=False)\n\nplt.figure(figsize = (16, 10), facecolor = None)\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Opponent\", y=\"Goal Scored\", data=goals_conceded)\n\nplot1.set_xticklabels(goals_conceded['Opponent'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total goals conceded')\nplot1.set_title('Total goals conceded')","ab2b50ea":"# Plot of total goals conceded by teams\n\n# Most Yellow Cards by teams\nyellow_cards = data.groupby('Team')['Yellow Card'].sum().reset_index().sort_values(by=('Yellow Card'), ascending=False)\n\nplt.figure(figsize = (16, 10), facecolor = None)\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Yellow Card\", data=yellow_cards)\n\nplot1.set_xticklabels(yellow_cards['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total yellow cards')\nplot1.set_title('Total yellow cards')","301a15fb":"# Lables for the Radar plot\n\nlabels=np.array(['Goal Scored', 'Attempts', 'Corners', 'Offsides', 'Free Kicks', 'Saves', 'Fouls Committed', 'Yellow Card'])\n\n# Radar data for the Finals, \"France vs Croatia\"\n\ndata1=data.loc[126,labels].values\ndata2=data.loc[127,labels].values\n\n# Radar data for Semi-Final 1 - \"France vs Belgium\"\ndata3=data.loc[120,labels].values\ndata4=data.loc[121,labels].values\n\n# Radar data for Semi-Final 2 - \"Croatia vs England\"\n\ndata5=data.loc[122,labels].values\ndata6=data.loc[123,labels].values","996eb504":"# Create a radar plot for Semi-Final 2 using plotly\n\nplotly.offline.init_notebook_mode(connected=True)\n\ndata = [\n    go.Scatterpolar(\n      r = data3,\n      theta = labels,\n      mode = 'lines',\n      fill = 'toself',\n      name = 'France'\n    ),\n\n    go.Scatterpolar(\n      r = data4,\n      theta = labels,\n      mode = 'lines',\n      fill = 'toself',\n      name = 'Belgium'\n    )\n]\n\nlayout = go.Layout(\n    title='Semi-Final 1 - \"France vs Belgium\"',\n    polar = dict(\n        radialaxis = dict(\n          visible = True,\n          range = [0, 20]\n        )\n      ),\n    showlegend = True\n)\n\nfig = go.Figure(data=data, layout=layout)\nplotly.offline.iplot(fig)","96451d98":"# Create a radar plot for Semi-Final 1 using plotly\n\nplotly.offline.init_notebook_mode(connected=True)\n\ndata = [\n    go.Scatterpolar(\n      r = data5,\n      theta = labels,\n      mode = 'lines',\n      fill = 'toself',\n      name = 'Croatia'\n    ),\n\n    go.Scatterpolar(\n      r = data6,\n      theta = labels,\n      mode = 'lines',\n      fill = 'toself',\n      name = 'England'\n    )\n]\n\nlayout = go.Layout(\n    title='Semi-Final 2 - \"Croatia vs England\"',\n    polar = dict(\n        radialaxis = dict(\n          visible = True,\n          range = [0, 30]\n        )\n      ),\n    showlegend = True\n)\n\nfig = go.Figure(data=data, layout=layout)\nplotly.offline.iplot(fig)","cfe69df0":"# Create a radar plot for Finals using plotly\n\nplotly.offline.init_notebook_mode(connected=True)\n\ndata = [\n    go.Scatterpolar(\n      r = data1,\n      theta = labels,\n      mode = 'lines',\n      fill = 'toself',\n      name = 'France'\n    ),\n\n    go.Scatterpolar(\n      r = data2,\n      theta = labels,\n      mode = 'lines',\n      fill = 'toself',\n      name = 'Croatia'\n    )\n]\n\nlayout = go.Layout(\n    title='Finals - \"France vs Croatia\"',\n    polar = dict(\n        radialaxis = dict(\n          visible = True,\n          range = [0, 20]\n        )\n      ),\n    showlegend = True\n)\n\nfig = go.Figure(data=data, layout=layout)\nplotly.offline.iplot(fig)","67cf333b":"##**FIFA World Cup 2018**\n                                                                                                         \n  ![](http:\/\/www.lfm-radio.com\/wp-content\/uploads\/2018\/06\/444823-fifaworldcup-article_image_d-1.jpg)                                                                                                                         "}}