{"cell_type":{"e98e31e9":"code","f26cf77e":"code","c9a2c4b0":"code","9793ad54":"code","d020b299":"code","ac0da785":"code","dfe16813":"code","a3dc95d0":"code","7fe6ac29":"markdown","6e254e57":"markdown","ec7525b6":"markdown","0b2148bc":"markdown","e94b257a":"markdown","69b2b1a9":"markdown","76bd0484":"markdown"},"source":{"e98e31e9":"!pip install psycopg2","f26cf77e":"from sqlalchemy.types import JSON \nimport numpy as np\nimport pandas as pd\nfrom sqlalchemy import create_engine\nimport uuid\nimport json\nimport psycopg2\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%load_ext autoreload\n%autoreload 2","c9a2c4b0":"def connect(settings,listTables=False):\n    print(\"Connected Postgresql\")\n    engine = create_engine('postgresql:\/\/'+settings[\"user\"]+':'+settings[\"password\"]+'@'+settings[\"host\"]+':5432\/'+settings[\"database\"])\n    if listTables:\n        print(\"Database Tables\")\n        for i in engine.table_names():\n            print(i)\n    return engine\ndef connectSettings():\n    try:\n        db={'host': '', # host\n            'database': '', #db name\n            'user': '', # user name\n            'password': '' # user password\n           }\n        return db\n        \n    except:\n        print(\"db error\")","9793ad54":"settings=connectSettings()\nengine=connect(settings,listTables=False)","d020b299":"Dataset=pd.DataFrame()\nDataset.loc[0,\"Id\"]=str(uuid.uuid4())\nDataset.loc[0,\"CustomerId\"]=12345\nDataset.loc[0,\"Price\"]=6698\nDataset.loc[0,\"Comission\"]=0.15\nDataset.loc[0,\"Profit\"]=1004.05\nDataset.loc[0,\"Breakout\"]=None\n\nDataset.loc[1,\"Id\"]=str(uuid.uuid4())\nDataset.loc[1,\"CustomerId\"]=14545\nDataset.loc[1,\"Price\"]=20000\nDataset.loc[1,\"Comission\"]=0.15\nDataset.loc[1,\"Profit\"]=3000\nDataset.loc[1,\"Breakout\"]=None\nprint(Dataset)","ac0da785":"MainDataset=pd.DataFrame()\nfor i in Dataset.index:\n    DictBreakoutcol=[]\n    ttlist=[0,2,5,8,15,29,41,61,91]\n    for tt in ttlist:\n        dictD={}\n        dictD[\"values\"]=tt\n        dictD[\"bid\"]=1\n        if dictD[\"values\"]>20:\n            dictD[\"bid\"]=2\n        DictBreakoutcol.append(dictD)\n    DataTemp=pd.DataFrame()\n    DataTemp=Dataset.loc[i,:]\n    \n    DataTemp[\"Breakout\"]=pd.Series([DictBreakoutcol])[0]\n    MainDataset=MainDataset.append(DataTemp,ignore_index=True)\nprint(MainDataset)\n","dfe16813":"MainDataset.loc[0,\"Breakout\"]","a3dc95d0":"#MainDataset.to_sql(\"TableName\", engine,if_exists = 'replace',index=False,dtype={\"Breakout\": JSON(),})","7fe6ac29":"# Create Db connection","6e254e57":"Database ayarlar\u0131n\u0131 ve atamalar\u0131n\u0131 burada yap\u0131yoruz. \n\nWe make database settings and assignments here.","ec7525b6":"# Import Libs","0b2148bc":"# Create Dataframe","e94b257a":"dtype parametresi ile dataframe in t\u00fcm kolon tiplerini belirterek dbye ekleyebiliyoruz. A\u015fa\u011f\u0131da linke ekledim di\u011fer veri tiplerini...\n\nhttps:\/\/docs.sqlalchemy.org\/en\/14\/core\/type_basics.html#sql-standard-and-multiple-vendor-types\n\nVeri taban\u0131 ba\u011flant\u0131 girdilerini do\u011fru girdi\u011finizde yukar\u0131daki kod veri taban\u0131na tablonuzu ekleyecektir.\n\nA\u015fa\u011f\u0131da pandas\u0131n to_sql d\u00f6k\u00fcman\u0131n\u0131n da linkini verdim.\n\nhttps:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.to_sql.html\n\nYine de b\u00f6yle dict format\u0131nda veriniz varsa mongodb kullanman\u0131z\u0131 \u00f6neririm. Orada \u00e7ok rahat dict i\u00e7inde dict olu\u015fturulabilir.\n\nTabi postgrede de neden olmas\u0131n dedik ve yukar\u0131daki \u00f6rne\u011fi payla\u015ft\u0131k. \n\nHERKESE \u0130Y\u0130 \u00c7ALI\u015eMALAR :)","69b2b1a9":"Breakout kolonunu Json tipinde de\u011ferler ile postgresql e kaydetmek i\u00e7in a\u015fa\u011f\u0131daki gibi bir dict olu\u015fturuyoruz.","76bd0484":"# Save Db"}}