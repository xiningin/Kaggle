{"cell_type":{"26bcc9dd":"code","8a640acb":"code","f49c8fe6":"code","d6177c03":"code","618c4fd4":"code","7cc86faf":"code","2c5512a4":"code","a249da0a":"code","e9ff1e6d":"code","c7673e7d":"code","9f93338d":"code","2a222461":"code","ab71c06a":"code","afd7ecfc":"code","7ff18ce1":"code","061e006e":"code","e3436dc2":"markdown","65569df8":"markdown","669c4278":"markdown","4a2869f1":"markdown","82ba44ec":"markdown","bd175877":"markdown","65a53e3c":"markdown"},"source":{"26bcc9dd":"import os\nimport random\nimport warnings\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom category_encoders import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\n\nimport lightgbm as lgb\n\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\nsns.set()","8a640acb":"def seed_everything(seed=42):\n    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n    random.seed(seed)\n    np.random.seed(seed)","f49c8fe6":"SEED = 42\nseed_everything(SEED)\n\ntrain_df = pd.read_csv(\"..\/input\/ailab-ml-training-2\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/ailab-ml-training-2\/test.csv\")\nsample_submission_df = pd.read_csv(\"..\/input\/ailab-ml-training-2\/sample_submission.csv\")","d6177c03":"# Decision Tree Example\u3067\u306ftrain\/test\u3092\u7d50\u5408\u3057\u3066FE\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n# \u5b9f\u306f\u79c1\u306f\u305d\u306e\u3084\u308a\u65b9\u306f\u3057\u307e\u305b\u3093\u3002\n# train\u306b\u3042\u3063\u3066test\u306b\u306a\u3044\u30ab\u30c6\u30b4\u30ea\u3068\u304b\u3001\u610f\u8b58\u3057\u3066\u51e6\u7406\u3092\u3057\u305f\u3044\u306e\u3067\u3002\n\ntrain_df.head()","618c4fd4":"# \u540d\u524d\u306e\u9577\u3055\u3092\u7279\u5fb4\u91cf\u306b\u3057\u307e\u3059\u3002\u9023\u7d9a\u5909\u6570\u3067\u3059\u3002\ntrain_df[\"name_length\"] = train_df[\"name\"].apply(lambda x: len(x))\ntest_df[\"name_length\"] = test_df[\"name\"].apply(lambda x: len(x))\n\n# item_condition_id\u3092\u7279\u5fb4\u91cf\u306b\u3057\u307e\u3059\u3002\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u3067\u3059\u3002\n# \u5143\u3005\u6570\u5024\u30e9\u30d9\u30eb\u306a\u306e\u3067\u4f55\u3082\u3057\u307e\u305b\u3093\u3002\n\n# brand_name\u3092\u7279\u5fb4\u91cf\u306b\u3057\u307e\u3059\u3002\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u3067\u3059\u3002\n# OrdinalEncoder\u3092\u4f7f\u3046\u3068\u6570\u5024\u30e9\u30d9\u30eb\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5b58\u5728\u3057\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5b58\u5728\u3057\u306a\u3044(unknown)\u3001\u6b20\u640d\u3057\u3066\u3044\u308b(missing)\u306f\u3001NaN\u3092\u8fd4\u3059\u8a2d\u5b9a\u306b\u3057\u307e\u3059\u3002\noe = OrdinalEncoder(cols=[\"brand_name\"], handle_unknown=\"return_nan\", handle_missing=\"return_nan\")\ntrain_df[\"brand_name\"] = oe.fit_transform(train_df[\"brand_name\"])\ntest_df[\"brand_name\"] = oe.transform(test_df[\"brand_name\"])\n\n# shipping\u3092\u7279\u5fb4\u91cf\u306b\u3057\u307e\u3059\u3002\u30d0\u30a4\u30ca\u30ea\u5909\u6570\u3067\u3059\u3002\n# \u5143\u3005\u6570\u5024\u30e9\u30d9\u30eb\u306a\u306e\u3067\u4f55\u3082\u3057\u307e\u305b\u3093\u3002","7cc86faf":"train_df.head()","2c5512a4":"# \u7279\u5fb4\u91cf\u3068\u3059\u308b\u30ab\u30e9\u30e0\u540d\u3092\u30ea\u30b9\u30c8\u3067\u4fdd\u6301\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nfeatures = [\"item_condition_id\",\n            \"brand_name\",\n            \"shipping\",\n            \"name_length\"]\n\n# \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u3068\u3057\u3066\u6271\u3046\u30ab\u30e9\u30e0\u540d\u3082\u30ea\u30b9\u30c8\u3067\u4fdd\u6301\u3057\u3066\u304a\u304d\u307e\u3059\u3002\ncat_features = [\"item_condition_id\",\n                \"brand_name\",\n                \"shipping\"]\n\ntrain_df = train_df[[\"train_id\", \"price\"] + features].reset_index(drop=True)\ntest_df = test_df[[\"test_id\"] + features].reset_index(drop=True)","a249da0a":"# \u5b66\u7fd2\u30c7\u30fc\u30bfdev\u3068\u691c\u8a3c\u30c7\u30fc\u30bfval\u306b\u5206\u5272\u3057\u307e\u3059\u3002\ndev_df, val_df = train_test_split(train_df, test_size=0.2, random_state=SEED, shuffle=True)\ndev_df = dev_df.reset_index(drop=True)\nval_df = val_df.reset_index(drop=True)","e9ff1e6d":"# lightgbm\u306e\u5b66\u7fd2\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n# \u4ee3\u8868\u7684\u306a\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n# \u8a73\u3057\u304f\u306fDocumentation\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n# https:\/\/lightgbm.readthedocs.io\/en\/latest\/Parameters.html\n\nparams = {\n    # boosting_type: \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7a2e\u985e\u3067\u3059\u3002\"gbdt\"\u306b\u3057\u3068\u3051\u3070\u3044\u3044\u3067\u3059\u3002\n    # objective: \u76ee\u7684\u95a2\u6570\u3067\u3059\u3002\u4eca\u56de\u306f\u56de\u5e30\u3067\u3059\u306e\u3067\"rmse\"\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n    # metric: \u8a55\u4fa1\u95a2\u6570\u3067\u3059\u3002\u4eca\u56de\u306f\u76ee\u7684\u95a2\u6570\u3068\u540c\u3058\"rmse\"\u3067\u3059\u3002\n    \"boosting_type\": \"gbdt\",\n    \"objective\": \"rmse\",\n    \"metric\": \"rmse\",\n    \n    # num_leaves: \u8449\u306e\u6570\u306e\u6700\u5927\u5024\u3067\u3059\u3002\u6c7a\u5b9a\u6728\u306emax_depth\u3068\u985e\u4f3c\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3042\u3061\u3089\u306f\u6728\u306e\u6df1\u3055\u3067\u3042\u308b\u3053\u3068\u306b\u6c17\u3092\u3064\u3051\u3066\u304f\u3060\u3055\u3044\u3002\u79c1\u306f\u5927\u4f5316~128\u3092\u8abf\u3079\u307e\u3059\u3002\n    # min_data_in_leaf: \u8449\u306b\u5c5e\u3059\u308b\u6700\u5c0f\u306e\u30c7\u30fc\u30bf\u6570\u3067\u3059\u300220\u304b\u3089\u59cb\u3081\u3066\u3001\u904e\u5b66\u7fd2\u6c17\u5473\u306a\u3089\u5897\u3084\u3059\u611f\u3058\u3067\u3059\u3002\n    \"num_leaves\": 32,\n    \"min_data_in_leaf\": 20,\n    \n    # num_iterations: GBDT\u306f\u8907\u6570\u306e\u6c7a\u5b9a\u6728\u3092\u9010\u6b21\u7684\u306b\u7d44\u307f\u5408\u308f\u305b\u3066\u5b66\u7fd2\u3092\u884c\u3046\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3067\u3059\u3002\n    #                 num_iterations\u306f\u30a4\u30c6\u30ec\u30fc\u30c8\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u304c\u3001\u9069\u5f53\u306a\u5927\u304d\u306a\u5024\u306b\u8a2d\u5b9a\u3057\u3066\u826f\u3044\u3067\u3059\u3002\n    # early_stopping_round: valid\u30c7\u30fc\u30bf\u306emetric\u304c\u4f55\u56de\u6539\u5584\u3057\u306a\u304b\u3063\u305f\u3089\u5b66\u7fd2\u3092\u6b62\u3081\u308b\u304b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n    # learning_rate: \u5b66\u7fd2\u7387\u3067\u3059\u30020.1~0.001\u3042\u305f\u308a\u3092\u4f7f\u3044\u307e\u3059\u3002GBDT\u306fNN\u3068\u9055\u3063\u3066\u5b66\u7fd2\u7387\u3092\u4e0b\u3052\u308c\u3070\u307b\u307c\u78ba\u5b9f\u306b\u7cbe\u5ea6\u304c\u4e0a\u304c\u308a\u307e\u3059\u3002\n    \"num_iterations\": 10000,\n    \"early_stopping_round\": 200,\n    \"learning_rate\": 0.1,\n    \n    # bagging_fraction: \u3072\u3068\u3064\u306e\u6728\u304c\u6271\u3046\u30c7\u30fc\u30bf\u306e\u5272\u5408\u3067\u3059\u3002bagging_fraction\u306e\u5272\u5408\u3060\u3051\u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30eb\u3057\u307e\u3059\u3002\n    #                   \u8907\u6570\u306e\u6728\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u6642\u306b\u3001\u305d\u308c\u305e\u308c\u306e\u6728\u3092\u5fae\u5999\u306b\u7570\u306a\u308b\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\u3055\u305b\u308b\u3053\u3068\u3067\u3001\u5168\u4f53\u306e\u591a\u69d8\u6027\u3092\u5411\u4e0a\u3055\u305b\u307e\u3059\u3002\n    #                   \u79c1\u306f0.7~0.9\u3042\u305f\u308a\u3092\u4f7f\u3044\u307e\u3059\u3002\u5c0f\u3055\u3044\u65b9\u304c\u904e\u5b66\u7fd2\u3057\u306b\u304f\u3044\u3067\u3059\u3002\n    # bagging_freq: \u4e0a\u8a18\u306ebagging\u3092\u3044\u304f\u3064\u884c\u3046\u304b\u3067\u3059(\u591a\u5206)\u3002\u79c1\u306f\u3044\u3064\u30825\u306b\u3057\u3066\u307e\u3059\u3002\n    # feature_fraction: \u3072\u3068\u3064\u306e\u6728\u304c\u6271\u3046\u7279\u5fb4\u91cf\u306e\u5272\u5408\u3067\u3059\u3002feature_fraction\u306e\u5272\u5408\u3060\u3051\u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30eb\u3057\u307e\u3059\u3002\n    #                   \u79c1\u306f0.5~0.9\u3042\u305f\u308a\u3092\u4f7f\u3044\u307e\u3059\u3002\u4eca\u306f\u7279\u5fb4\u91cf\u304c\u5c11\u3057\u3057\u304b\u306a\u3044\u306e\u30671.0\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n    \"bagging_fraction\": 0.8,\n    \"bagging_freq\": 5,\n    \"feature_fraction\": 1.0,\n}","c7673e7d":"# lightgbm\u3067\u306f\u3001\u5b66\u7fd2\u6642\u306flgb.Dataset\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002\n# \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u3068\u3057\u3066\u6271\u3063\u3066\u6b32\u3057\u3044\u30ab\u30e9\u30e0\u540d\u3092\u3053\u3053\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\ndev_data = lgb.Dataset(dev_df[features], dev_df[\"price\"], categorical_feature=cat_features)\nval_data = lgb.Dataset(val_df[features], val_df[\"price\"], categorical_feature=cat_features)\n\n# \u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\u3002\n# verbose_eval\u6bce\u306b\u9014\u4e2d\u7d4c\u904e\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\nclf = lgb.train(params, dev_data, valid_sets=[dev_data, val_data], verbose_eval=100)","9f93338d":"# \u4e88\u6e2c\u3092\u884c\u3044\u307e\u3059\u3002\ndev_pred = clf.predict(dev_df[features], num_iteration=clf.best_iteration)\nval_pred = clf.predict(val_df[features], num_iteration=clf.best_iteration)\n\n# \u4fa1\u683c\u3068\u3057\u3066\u8ca0\u306e\u5024\u306f\u3042\u308a\u5f97\u306a\u3044\u306e\u3067\u3001\u5f8c\u51e6\u7406\u3057\u307e\u3059\u3002\ndev_pred = np.where(dev_pred < 0, 0.0, dev_pred)\nval_pred = np.where(val_pred < 0, 0.0, val_pred)","2a222461":"def rmsle(y_true, y_pred):\n    return mean_squared_log_error(y_true, y_pred) ** 0.5\n\n\nprint(\"dev rmsle: {:.3f}\".format(rmsle(dev_df[\"price\"], dev_pred)))\nprint(\"val rmsle: {:.3f}\".format(rmsle(val_df[\"price\"], val_pred)))","ab71c06a":"# \u6c7a\u5b9a\u6728\u3067\u306f\u7279\u5fb4\u91cf\u91cd\u8981\u5ea6(feature importance)\u3092\u7b97\u51fa\u3067\u304d\u307e\u3059\u3002\n# \u3042\u308b\u7279\u5fb4\u91cf\u304c\u76ee\u7684\u5909\u6570\u306e\u4e88\u6e2c\u306b\u3069\u308c\u3060\u3051\u8ca2\u732e\u3057\u3066\u3044\u308b\u304b\u3092\u793a\u3059\u6307\u6a19\u3067\u3059\u3002\n\nfimp = pd.DataFrame()\nfimp[\"feature\"] = features\nfimp[\"importance\"] = clf.feature_importance()\nfimp = fimp.sort_values(by=\"importance\", ascending=False)\nsns.barplot(x=\"importance\", y=\"feature\", data=fimp)\nplt.title(\"feature importance\")\nplt.show()","afd7ecfc":"predictions = clf.predict(test_df[features], num_iteration=clf.best_iteration)\npredictions = np.where(predictions < 0, 0.0, predictions)","7ff18ce1":"sub_df = pd.DataFrame()\nsub_df[\"test_id\"] = test_df[\"test_id\"].astype(int)\nsub_df[\"price\"] = predictions\nsub_df.to_csv(\"submission.csv\", index=False)","061e006e":"sub_df.head()","e3436dc2":"# Loading","65569df8":"- lightgbm\u306f\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u30c0\u30df\u30fc\u5316\u304c\u4e0d\u8981\u3067\u3059\uff08\u6570\u5024\u30e9\u30d9\u30eb\u5316\u306f\u5fc5\u8981\u3067\u3059)\u3002\n- lightgbm\u306f\u6b20\u640d\u5024\u306e\u51e6\u7406\u304c\u4e0d\u8981\u3067\u3059\u3002","669c4278":"# Modeling","4a2869f1":"[Decision Tree Example](https:\/\/www.kaggle.com\/yukia18\/decision-tree-example) \u3092\u307e\u3060\u8aad\u3093\u3067\u3044\u306a\u3044\u65b9\u306f\u305d\u3063\u3061\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002","82ba44ec":"# Libraries","bd175877":"# Submission","65a53e3c":"# Feature Engineering"}}