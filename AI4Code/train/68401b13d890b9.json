{"cell_type":{"548d29ee":"code","45dfecb6":"code","06862d17":"code","432491b9":"code","b0dd232d":"code","b61b65d9":"code","543837e4":"code","8975d61b":"code","e404f414":"code","2a3853d1":"code","62af2cff":"code","474418a3":"code","ab24da0d":"code","243632fc":"code","1b5e6e8c":"code","94d22678":"code","945d1fb2":"code","3ba742c9":"code","b5803096":"code","8e8b37fc":"markdown","88d77c81":"markdown"},"source":{"548d29ee":"import os\nimport gc\nimport numpy as np\nimport pandas as pd \nfrom tqdm import tqdm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import log_loss","45dfecb6":"!wget -q https:\/\/raw.githubusercontent.com\/google-research-datasets\/gap-coreference\/master\/gap-development.tsv\n!wget -q https:\/\/raw.githubusercontent.com\/google-research-datasets\/gap-coreference\/master\/gap-validation.tsv\n!wget -q https:\/\/raw.githubusercontent.com\/google-research-datasets\/gap-coreference\/master\/gap-test.tsv\n!wget -q https:\/\/raw.githubusercontent.com\/google-research\/bert\/master\/modeling.py \n!wget -q https:\/\/raw.githubusercontent.com\/google-research\/bert\/master\/extract_features.py \n!wget -q https:\/\/raw.githubusercontent.com\/google-research\/bert\/master\/tokenization.py","06862d17":"import modeling\nimport extract_features\nimport tokenization","432491b9":"val_df = pd.read_table('gap-validation.tsv', index_col='ID').reset_index(drop=True)\ntest_df  = pd.read_table('gap-validation.tsv', index_col='ID').reset_index(drop=True)\ndev_df  = pd.read_table('gap-development.tsv', index_col='ID').reset_index(drop=True)","b0dd232d":"!wget -q https:\/\/storage.googleapis.com\/bert_models\/2018_10_18\/uncased_L-12_H-768_A-12.zip \n!unzip uncased_L-12_H-768_A-12.zip","b61b65d9":"def count_char(text, offset):   \n    count = 0\n    for pos in range(offset):\n        if text[pos] != \" \": count +=1\n    return count\n\ndef candidate_length(candidate):\n    count = 0\n    for i in range(len(candidate)):\n        if candidate[i] !=  \" \": count += 1\n    return count\n\ndef count_token_length_special(token):\n    count = 0\n    special_token = [\"#\", \" \"]\n    for i in range(len(token)):\n        if token[i] not in special_token: count+=1\n    return count\n\ndef embed_by_bert(df, path_to_bert='uncased_L-12_H-768_A-12', embed_size=768, batch_size=8,\n                 layers='-1', max_seq_length=256):\n    \n    text = df['Text']\n    text.to_csv('input.txt', index=False, header=False)\n    os.system(f\"python3 extract_features.py \\\n               --input_file=input.txt \\\n               --output_file=output.jsonl \\\n               --vocab_file={path_to_bert}\/vocab.txt \\\n               --bert_config_file={path_to_bert}\/bert_config.json \\\n               --init_checkpoint={path_to_bert}\/bert_model.ckpt \\\n               --layers={layers} \\\n               --max_seq_length={max_seq_length} \\\n               --batch_size={batch_size}\")\n    \n    bert_output = pd.read_json(\"output.jsonl\", lines=True)\n    bert_output.head()\n    \n    os.system(\"rm input.txt\")\n    os.system(\"rm output.jsonl\")\n    \n    index = df.index\n    columns = [\"emb_A\", \"emb_B\", \"emb_P\", \"label\"]\n    emb = pd.DataFrame(index = index, columns = columns)\n    emb.index.name = \"ID\"\n    \n    for i in tqdm(range(len(text))):\n        \n        features = bert_output.loc[i, \"features\"]\n        P_char_start = count_char(df.loc[i, 'Text'], df.loc[i, 'Pronoun-offset'])\n        A_char_start = count_char(df.loc[i, 'Text'], df.loc[i, 'A-offset'])\n        B_char_start = count_char(df.loc[i, 'Text'], df.loc[i, 'B-offset'])\n        A_length = candidate_length(df.loc[i, 'A'])\n        B_length = candidate_length(df.loc[i, 'B'])\n        \n        emb_A, emb_B, emb_P = np.zeros(embed_size), np.zeros(embed_size), np.zeros(embed_size)\n        char_count, cnt_A, cnt_B = 0, 0, 0\n        \n        for j in range(2, len(features)):\n            token = features[j][\"token\"]\n            token_length = count_token_length_special(token)\n            if char_count == P_char_start:\n                emb_P += np.asarray(features[j][\"layers\"][0]['values']) \n            if char_count in range(A_char_start, A_char_start + A_length):\n                emb_A += np.asarray(features[j][\"layers\"][0]['values'])\n                cnt_A += 1\n            if char_count in range(B_char_start, B_char_start + B_length):\n                emb_B += np.asarray(features[j][\"layers\"][0]['values'])\n                cnt_B += 1                \n            char_count += token_length\n        \n        if cnt_A > 0:\n            emb_A \/= cnt_A\n        if cnt_B > 0:\n            emb_B \/= cnt_B\n        \n        label = \"Neither\"\n        if (df.loc[i,\"A-coref\"] == True):\n            label = \"A\"\n        if (df.loc[i,\"B-coref\"] == True):\n            label = \"B\"\n\n        emb.iloc[i] = [emb_A, emb_B, emb_P, label]\n        \n    return emb    ","543837e4":"%%time\nval_bert_emb = embed_by_bert(val_df)\ntest_bert_emb = embed_by_bert(test_df)\ndev_bert_emb = embed_by_bert(dev_df)","8975d61b":"val_bert_emb[\"emb_A\"].head().map(np.asarray).values[0].astype('float').shape","e404f414":"def featurize(embedding_df):\n    \n    pronoun_embs, a_embs, b_embs, labels = [], [], [], []\n    \n    for i in tqdm(range(len(embedding_df))):\n        \n        pronoun_embs.append(embedding_df.loc[i, \"emb_P\"])\n        a_embs.append(embedding_df.loc[i, \"emb_A\"])\n        b_embs.append(embedding_df.loc[i, \"emb_B\"])\n\n        label_map = {'A': 0, 'B': 1, 'Neither': 2}\n        labels.append(label_map[embedding_df.loc[i, \"label\"]])\n\n    \n    a_embs = np.asarray(a_embs).astype('float')\n    b_embs = np.asarray(b_embs).astype('float') \n    pronoun_embs = np.asarray(pronoun_embs).astype('float')\n    \n    return np.concatenate([a_embs, b_embs, pronoun_embs], axis=1), np.asarray(labels)","2a3853d1":"X_train, y_train = featurize(pd.concat([val_bert_emb, dev_bert_emb]).sort_index().reset_index())","62af2cff":"X_train.shape, y_train.shape","474418a3":"logit = LogisticRegression(C=1e-2, random_state=17, solver='lbfgs', \n                           multi_class='multinomial', max_iter=100,\n                          n_jobs=4)","ab24da0d":"%%time\nlogit.fit(X_train, y_train)","243632fc":"!cp gap-development.tsv stage1_test.tsv","1b5e6e8c":"stage1_test_df  = pd.read_table('stage1_test.tsv', index_col='ID').reset_index(drop=True)","94d22678":"%%time\nstage1_test_bert_emb = embed_by_bert(stage1_test_df)","945d1fb2":"X_test, y_test = featurize(stage1_test_bert_emb)","3ba742c9":"logit_test_pred = logit.predict_proba(X_test)\nlog_loss(y_test, logit_test_pred)","b5803096":"# Write the prediction to file for submission\nsubmission = pd.read_csv(\"..\/input\/sample_submission_stage_1.csv\", index_col = \"ID\")\nsubmission[\"A\"] = logit_test_pred[:, 0]\nsubmission[\"B\"] = logit_test_pred[:, 1]\nsubmission[\"NEITHER\"] = logit_test_pred[:, 2]\nsubmission.to_csv(\"submission.csv\")","8e8b37fc":"## Prediction for stage 1 test set ","88d77c81":"Here we simply run logistic regression with BERT embeddings. Code for building BERT embeddings for A, B, and pronoun is taken from this great [Matei's Kernel](https:\/\/www.kaggle.com\/mateiionita\/taming-the-bert-a-baseline)."}}