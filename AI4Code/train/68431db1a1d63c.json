{"cell_type":{"fd071846":"code","5c35f443":"code","5b7a93da":"code","54051c6c":"code","eb0becd1":"code","fa5153ed":"code","01c00ffc":"code","df1ea211":"code","70f57f75":"code","7f9dff65":"code","ff9d5657":"code","e7a5fe65":"code","fbeef4d1":"code","ef407f4c":"code","b1d9b679":"code","148a97fd":"code","b2c9e1f8":"code","b5daf93a":"code","2340e9d1":"code","9a0609cb":"code","6df4eae0":"code","09a64b8a":"code","61d139e1":"code","8290de67":"code","52abdb95":"code","1e19180b":"code","f42e1ce2":"code","f2e7dff5":"code","8b4a871c":"code","d38925af":"markdown","1642c338":"markdown","61559f0f":"markdown","a80e2bf5":"markdown","7d0bd461":"markdown","4a546213":"markdown","56c23b1d":"markdown","d366fde8":"markdown","18e78949":"markdown","3594b307":"markdown","7bd9aa53":"markdown","740bdf16":"markdown","491c7af3":"markdown","1c3b0ec2":"markdown","ccae8fbd":"markdown","a76686f8":"markdown","9ca29406":"markdown","73fdfcda":"markdown","3eda5c13":"markdown","7290f6bd":"markdown","30df3c0a":"markdown","6a985339":"markdown","debc84f0":"markdown","e0c40639":"markdown","d192d9e0":"markdown","16eb0085":"markdown","aa55efa4":"markdown","ae328ace":"markdown","7ce277ac":"markdown","eb0fa846":"markdown","5a07e661":"markdown","459eca7d":"markdown","e5d40607":"markdown","64bd74b9":"markdown","10305d69":"markdown","6c07ad34":"markdown","3d9f63a8":"markdown","91b59423":"markdown"},"source":{"fd071846":"\nimport os, types\nimport pandas as pd\nimport numpy as np\nfrom botocore.client import Config\npd.set_option('display.max_columns' ,500)\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport seaborn as sns\nimport plotly.express as px\nfrom math import pi\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        path = os.path.join(dirname, filename)\ndf_data_1 = pd.read_csv(path)","5c35f443":"df_data_1.head(2)","5b7a93da":"df_data_1[['State' ,'Map_Location' ]] = df_data_1['MapLocation'].str.split(',', 1, expand=True)\ndf = df_data_1[['UNITID'  , 'INSTNM' , 'State' , 'PREDDEG' , 'CONTROL' , 'SATVRMID' , 'SATMTMID'  ,'ACTCMMID','ACTENMID' , 'ACTMTMID' ]]\n\ndisplay(df.sample(10).style.set_properties(**{'background-color': '#008294','color': 'White','border': '1.5px  solid black'}))","54051c6c":"print ('number of duplicated rows in the dataset : ' ,  df.duplicated().sum())\nprint ('Number of Rows and columns in the dataset : ' , df.shape)\n","eb0becd1":"def Data_information(data):\n    \"\"\"\n    A function for investigation the data set \n    input = data frame\n    return information data frame\n    \"\"\"\n    \n    count = data.count()\n    unique = data.nunique()\n    duplicated = count - unique\n    missing = data.isnull().sum()\n    typedt = data.dtypes\n  \n\n\n    column_info_dict = {  \"Non-Nulls\": count,\n        \"unique vales\": unique , 'duplicated':duplicated ,'missing values':missing ,'column type':typedt  , }\n    data_information = pd.DataFrame(column_info_dict).style.background_gradient()\n    return data_information\nData_information(df)","fa5153ed":"df.describe().T","01c00ffc":"# Setting up figure and axes\nfig = plt.figure(figsize=(12,12)) # create figure\ngs = fig.add_gridspec(2, 2)\ngs.update(wspace=0, hspace=0.8)\nax0 = fig.add_subplot(gs[0, 0:2])\nax1 = fig.add_subplot(gs[1, 0], ylim=(0, 6000)) # create axes\nax2 = fig.add_subplot(gs[1, 1], ylim=(0, 6000)) # create axes\n\n\n# Color selection\ncolor_map = [\"#bdbdbd\" for _ in range(5)]\ncolor_map[0] = \"#008294\"\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\n\n\"\"\"\n\n    0 Not classified\n    1 Predominantly certificate-degree granting\n    2 Predominantly associate's-degree granting\n    3 Predominantly bachelor's-degree granting\n    4 Entirely graduate-degree granting \n\n\"\"\"\n\n# Continents\nax0.barh(0, 3343\/7703,\n       color=\"#008294\", zorder=3, label=\"Certificate-Degree\"\n)\n\nax0.barh(0, 2102\/7703, \n       left=3343\/7703,\n       color=\"#4b4b4c\", zorder=3, label=\"Bachelor's-Degree\"\n)\n\nax0.barh(0, 1523\/7703, \n       left=(3343+2102)\/7703,\n       color=\"#676767\", zorder=3, label=\"Associate's-Degree\"\n)\n\nax0.barh(0, 443\/7703, \n       left=(3343+2102+1523)\/7703,\n       color=\"#808080\", zorder=3, label=\"Not classified\"\n)\n\nax0.barh(0, 292\/7703, \n       left=(3343+2102+1523+443)\/7703,\n       color=\"#989898\", zorder=3, label=\"Entirely Graduate-Degree \"\n)\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n\nax0.xaxis.set_major_formatter(mtick.PercentFormatter())    \nax0.legend(loc='lower center', ncol=6, bbox_to_anchor=(0.48, -0.3))\n\nax0.text(0, 0.8, \n         'US Colleges', \n         fontsize=30, \n         fontweight='bold', \n         fontfamily='serif')\n\nax0.text(0, 0.7, \n         'Colleges Control types and Degree granting', \n         fontsize=18, \n         fontweight='light', \n         fontfamily='serif')\nax0.text(0, 0.53, \n         'Chart showing the distribution of US collage across the ', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\nax0.text(0, 0.45, \n         'Control type (public \/ private) and Degree granting (bachelor ,associate  ,etc.. )', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\n# type\ndf['CONTROL'] = df['CONTROL'].replace([1,2,3], ['Public','Private nonprofit','Private for-profit'])\ndf.CONTROL.value_counts().plot(kind = 'bar' , ax = ax1 ,color=color_map, zorder=3 )\n#asia_country = asia_country_count_df[\"Country\"]\n#ax1.bar(asia_country_count_df.iloc[0:5, 0], asia_country_count_df.iloc[0:5, 1], \n       #color=color_map, zorder=3\n#)\nax1.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\n#ax1.set_xticklabels(asia_country_count_df['Country'], rotation=90)\n\nax1.text(-1.2, 7500, \n         'US Colleges by Control Types', \n         fontsize=18, \n         fontweight='bold', \n         fontfamily='serif')\n\nax1.text(-1.2, 6950, \n         'Private for Profit type stays on top by 3703 colage', \n         fontsize=12, \n         fontweight='light', \n         fontfamily='serif')\n\nax1.text(-1.2, 6450, \n         'Numbers Puplic and Private for non profits almost the same ', \n         fontsize=12, \n         fontweight='light', \n         fontfamily='serif')\n\n\n# Certificate\ndf['PREDDEG'] = df['PREDDEG'].replace([0,1,2,3,4], ['Not classified','Certificate-Degree',\n                                                    \"Associate's-Degree\" , \"Bachelor's-Degree\" , \n                                                    'Entirely Graduate-Degree'])\ndf.PREDDEG.value_counts().plot(kind = 'bar' , ax = ax2 ,color=color_map, zorder=3 )\n#america_country = america_country_count_df[\"Country\"]\n#ax2.bar(america_country_count_df.iloc[0:5, 0], america_country_count_df.iloc[0:5, 1], color=color_map, zorder=3)\nax2.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\n#ax2.set_xticklabels(america_country_count_df['Country'], rotation=90)\n\nax2.text(-0.5, 7500, \n         'US Colleges by Degree Granting', \n         fontsize=18, \n         fontweight='bold', \n         fontfamily='serif')\n\nax2.text(-0.5, 6950, \n         '2102 Collages with Bachelor\\'s-degree granting', \n         fontsize=12, \n         fontweight='light', \n         fontfamily='serif')\n\nax2.text(-0.5, 6450, \n         'and 1523 with Associate\\'s-degree  granting', \n         fontsize=12, \n         fontweight='light', \n         fontfamily='serif')\n\n# Remove top, right and left line \nfor s in [\"top\",\"right\",\"left\"]:\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n\n    \nax0.set_yticklabels([])\nax2.set_yticklabels([])\n\n\nax2.tick_params(left=False)\n\n\n\n#Cridit of this chart goes to this Kaggle notebook\n#https:\/\/www.kaggle.com\/dwin183287\/kagglers-seen-by-continents","df1ea211":"h = np.array([0.4,0.4 ,0.4 ,0.4 ,0.4 ,0.4,0.4 ,0.4,\n             0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.7,0.8,1])\n#Set the Colors of the bars\nc = np.array(['lightgray','lightgray' ,'lightgray' ,'lightgray' ,'lightgray' ,'lightgray',\n              'lightgray' ,'lightgray',\n             'lightgray','lightgray','lightgray'\n              ,'lightgray','lightgray','lightgray','lightgray',\n              'lightgray','lightgray','#676767','#4b4b4c','#008294'])\n\n\nfig = plt.figure(figsize=(12,12) ) # create figure\ngs = fig.add_gridspec(2, 2)\ngs.update(wspace=0, hspace=0)\nax0 = fig.add_subplot(gs[0:2, 0])\nax1 = fig.add_subplot(gs[0, 1], ylim=(0, 6000)) # create axes\nax2 = fig.add_subplot(gs[1, 1], ylim=(0, 6000)) # create axes\n\n\n# Color selection\ncolor_map = [\"#bdbdbd\" for _ in range(5)]\ncolor_map[0] = \"#008294\"\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\n\n\ndf_STABBR = df.groupby ('State').size().sort_values().reset_index().rename(mapper={0:'count'} , axis = 1).tail(20)\n\nax0.barh(df_STABBR.State ,df_STABBR['count'] , height=h, color = c)\nax0.axhspan(ymin = 16.3 , ymax = 19.7 , fc='#ff73d5', alpha=0.2 , zorder=0)\n\nax0.text(0, 25, \n         'US Colleges', \n         fontsize=30, \n         fontweight='bold', \n         fontfamily='serif')\n\nax0.text(0, 24, \n         'Destribution of Colleges acorss US states', \n         fontsize=18.5, \n         fontweight='light', \n         fontfamily='serif')\nax0.text(0, 23.5, \n         'Chart showing the top 20 state   ', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\nax0.text(0, 23, \n         'New yourk , Chicago and Housten are the most states having Colleges', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\nax0.text(91, 18.8, \n         '(90)', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\nax0.text(81, 17.8, \n         '(80)', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\nax0.text(76, 16.8, \n         '(75)', \n         fontsize=13, \n         fontweight='light', \n         fontfamily='serif')\n\nfor s in [\"top\",\"right\",\"bottom\"]:\n    ax0.spines[s].set_visible(False)\n\n\nax0.set_xticks([])\n\n\n\nexplode = (0.08, 0.05, 0.09)\n\n# Change default colors:\ncolors = ('#f4a261'  , '#e9c46a', '#2a9d8f')\n\n# Wedge properties\nwp = { 'linewidth' : 2, 'edgecolor' : \"#000000\" }\n\n\nvalues = [42,39,9]\nlabels = ['Private nonprofit' , 'Private for-profit'  , 'Public']\n# Drow Plot\nax1.pie(values, explode = explode,\n        labels = labels,shadow = True,\n        colors= colors,\n        wedgeprops = wp,\n        autopct='%1.0f%%',\n       startangle = 90 )\n\n# Adding legend\nax1.legend(labels,\n          title =\"Control Type\",\n          loc =\"center left\",\n          bbox_to_anchor =(1, 0, 1, 1))\n\n# Adding title to pie chart\nax1.set_title(\"Percentage of Collage conrol types in New York state\")\n\n##############################\n\ncolors = ('#f4a261'  , '#e9c46a', '#2a9d8f')\nvalues = [35,35,10]\nlabels = ['Private nonprofit' , 'Private for-profit'  , 'Public']\n# Drow Plot\nax2.pie(values, explode = explode,\n        labels = labels,shadow = True,\n        colors= colors,\n        wedgeprops = wp,\n        autopct='%1.0f%%',\n       startangle = 90 )\n\n# Adding legend\nax2.legend(labels,\n          title =\"Control Type\",\n          loc =\"center left\",\n          bbox_to_anchor =(1, 0, 1, 1))\n\n# Adding title to pie chart\nax2.set_title(\"Percentage of Collage control types in Chicago state\")\n\n# Show plot\nplt.show()","70f57f75":"df.rename({'SATVRMID' : 'SAT Scores in Critical Reading distribution across certificate granting',\n           'SATMTMID' : 'SAT Scores in Math distribution across certificate granting', \n           'ACTCMMID' :'ACT cumulative Score distibution across certificate granting', \n           'ACTENMID' : 'ACT English Score distibution across certificate granting', \n           'ACTMTMID' :'ACT math Score distibution across certificate granting'\n          } , axis = 1 , inplace  = True)\n\n\nsns.set_theme(style=\"white\", rc={\"axes.facecolor\": (0, 0, 0, 0)})\n    # Initialize the FacetGrid object\npal = sns.cubehelix_palette(10, rot=-.25, light=.7)\n\ndef label(x, color, label):\n    ax = plt.gca()\n    ax.text(0, .2, label, fontweight=\"bold\", color=color,\n            ha=\"left\", va=\"center\", transform=ax.transAxes)\ncolumns = ['SAT Scores in Critical Reading distribution across certificate granting',\n          'SAT Scores in Math distribution across certificate granting', \n          'ACT cumulative Score distibution across certificate granting',\n          'ACT English Score distibution across certificate granting',\n          'ACT math Score distibution across certificate granting']\n\nfor column in columns:\n\n    g = sns.FacetGrid(df, row=\"PREDDEG\", hue=\"PREDDEG\", aspect=20, height=.7, palette=pal);\n\n    # Draw the densities in a few steps\n    g.map(sns.kdeplot, column,\n          bw_adjust=.5, clip_on=False,\n          fill=True, alpha=1, linewidth=1.5)\n    g.map(sns.kdeplot, column, clip_on=False, color=\"w\", lw=2, bw_adjust=.5)\n    g.map(plt.axhline, y=0, lw=2, clip_on=False)\n\n\n    g.map(label, column)\n\n    # Set the subplots to overlap\n    g.fig.subplots_adjust(hspace=-.25)\n\n    # Remove axes details that don't play well with overlap\n    g.set_titles(\"\")\n    g.set(yticks=[])\n    g.despine(bottom=True, left=True)","7f9dff65":"#reset the sns style\nsns.reset_orig()\n\n#Net_price column\ndf [['NPT4_PUB' , 'NPT4_PRIV']] = df_data_1[['NPT4_PUB' , 'NPT4_PRIV']]\n#sum the price for public and private colleges\ndf.NPT4_PUB =  df.NPT4_PUB.fillna(0)\ndf.NPT4_PRIV =  df.NPT4_PRIV.fillna(0)\ndf['Net_Price'] = df.NPT4_PUB + df.NPT4_PRIV\ndf.Net_Price = df.Net_Price .apply (lambda x: np.nan if x<1 else x)\ndf.Net_Price = df.Net_Price .apply (lambda x: np.nan if x>55000 else x)\n\n\n#drop the private and puplic net price columns\ndf.drop(['NPT4_PUB' , 'NPT4_PRIV'] , axis = 1 , inplace = True)\n\n\n#1113 collage had no information about the net price , will reduce the data frame with the non-values only \ndf =df[df['Net_Price'].notnull()]\n\n\ncolumns = [ 'HBCU', 'PBI','ANNHI', 'TRIBAL', 'AANAPII', 'HSI', 'NANTI']\ndf[columns] = df_data_1[columns]\n\ndf.HBCU = df.HBCU.apply(lambda x: 'Yes' if x == 1 else \"No\")\ndf.PBI = df.PBI.apply(lambda x: 'Yes' if x == 1 else \"No\")\ndf.ANNHI = df.ANNHI.apply(lambda x: 'Yes' if x == 1 else \"No\")\ndf.TRIBAL = df.TRIBAL.apply(lambda x: 'Yes' if x == 1 else \"No\")\ndf.AANAPII = df.AANAPII.apply(lambda x: 'Yes' if x == 1 else \"No\")\ndf.HSI = df.HSI.apply(lambda x: 'Yes' if x == 1 else \"No\")\ndf.NANTI = df.NANTI.apply(lambda x: 'Yes' if x == 1 else \"No\")\n\n\n\n#prepare the layout\nfig = plt.figure(figsize=(12,12) ) # create figure\ngs = fig.add_gridspec(3, 3)\ngs.update(wspace=0.2, hspace=0.8)\nax0 = fig.add_subplot(gs[0:2, 0:2])# create axes\nax1 = fig.add_subplot(gs[0:2, 2]) # create axes\nax2 = fig.add_subplot(gs[2, 0]) # create axes\nax3 = fig.add_subplot(gs[2, 1]) # create axes\nax4 = fig.add_subplot(gs[2, 2]) # create axes\n\n\n# Color selection\ncolor_map = [\"#bdbdbd\" for _ in range(5)]\ncolor_map[0] = \"#008294\"\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) # axes background color\nax1.set_facecolor(background_color) # axes background color\nax2.set_facecolor(background_color) # axes background color\nax3.set_facecolor(background_color) # axes background color\nax4.set_facecolor(background_color) # axes background color\n\n\nsns.violinplot(x=\"PREDDEG\", y=\"Net_Price\", data=df, palette=\"Set3\" , ax = ax0)\nsns.boxplot(x=\"CONTROL\", y=\"Net_Price\", data=df, palette=\"Set3\" , ax = ax1)\nsns.boxplot(x=\"TRIBAL\", y=\"Net_Price\", data=df, palette=\"Set3\" , ax = ax2)\nsns.boxplot(x=\"PBI\", y=\"Net_Price\", data=df, palette=\"Set3\" , ax = ax3)\nsns.boxplot(x=\"ANNHI\", y=\"Net_Price\", data=df, palette=\"Set3\" , ax = ax4)\n\n#Remove yticks\nax_list = [ax1 , ax3 , ax4]\nfor axes in ax_list:\n    axes.set_yticklabels([])\n    axes.tick_params(left=False)\n    axes.set(ylabel='')\n    axes.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\n    \n# Remove top, right and left line \nfor s in [\"top\",\"right\",\"left\"]:\n    ax1.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n\n    \nax2.set_xlabel('Flag for tribal college' ,fontweight='bold', fontfamily='serif'  , fontsize  = 12)\nax3.set_xlabel('Flag for black institution' ,fontweight='bold', fontfamily='serif' , fontsize  = 12 )\nax4.set_xlabel('Flag for Alaska Native institution' ,fontweight='bold', fontfamily='serif' , fontsize  = 12)\nax0.set_xlabel('Degree Granting' ,fontweight='bold', fontfamily='serif', fontsize  = 12 )\nax1.set_xlabel('Control type' ,fontweight='bold', fontfamily='serif', fontsize  = 12 )\n\nfor s in [\"top\",\"right\"]:\n    ax0.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n\nax0.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nax2.grid(color='black', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\n\n\n\nax0.text(-1,65000,'US Colleges Net Price distribution' , \n         fontsize=30, \n         fontweight='bold', \n         fontfamily='serif' )\nax0.text(-.5,60000,'Pirces across Degree Granting and Control type' , \n         fontsize=18, \n         fontweight='bold', \n         fontfamily='serif' )\nax0.text(-.5,57000,'Public Colleges were the cheapest and the Colleges provide Bachelor\\'s Degree were the most expensive' , \n         fontsize=13,  \n         fontfamily='serif' )\n\n\nax2.text(-.5,63000,'Pirces across Colleges Flags' , \n         fontsize=18, \n         fontweight='bold', \n         fontfamily='serif' )\nax2.text(-.5,57000,'Figuer shows sample of three flages comparing to the Net price distribution for each' , \n         fontsize=13,  \n         fontfamily='serif' );\n","ff9d5657":"import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport numpy as np\n\nclass SeabornFig2Grid():\n\n    def __init__(self, seaborngrid, fig,  subplot_spec):\n        self.fig = fig\n        self.sg = seaborngrid\n        self.subplot = subplot_spec\n        if isinstance(self.sg, sns.axisgrid.FacetGrid) or \\\n            isinstance(self.sg, sns.axisgrid.PairGrid):\n            self._movegrid()\n        elif isinstance(self.sg, sns.axisgrid.JointGrid):\n            self._movejointgrid()\n        self._finalize()\n\n    def _movegrid(self):\n        \"\"\" Move PairGrid or Facetgrid \"\"\"\n        self._resize()\n        n = self.sg.axes.shape[0]\n        m = self.sg.axes.shape[1]\n        self.subgrid = gridspec.GridSpecFromSubplotSpec(n,m, subplot_spec=self.subplot)\n        for i in range(n):\n            for j in range(m):\n                self._moveaxes(self.sg.axes[i,j], self.subgrid[i,j])\n\n    def _movejointgrid(self):\n        \"\"\" Move Jointgrid \"\"\"\n        h= self.sg.ax_joint.get_position().height\n        h2= self.sg.ax_marg_x.get_position().height\n        r = int(np.round(h\/h2))\n        self._resize()\n        self.subgrid = gridspec.GridSpecFromSubplotSpec(r+1,r+1, subplot_spec=self.subplot)\n\n        self._moveaxes(self.sg.ax_joint, self.subgrid[1:, :-1])\n        self._moveaxes(self.sg.ax_marg_x, self.subgrid[0, :-1])\n        self._moveaxes(self.sg.ax_marg_y, self.subgrid[1:, -1])\n\n    def _moveaxes(self, ax, gs):\n        #https:\/\/stackoverflow.com\/a\/46906599\/4124317\n        ax.remove()\n        ax.figure=self.fig\n        self.fig.axes.append(ax)\n        self.fig.add_axes(ax)\n        ax._subplotspec = gs\n        ax.set_position(gs.get_position(self.fig))\n        ax.set_subplotspec(gs)\n\n    def _finalize(self):\n        plt.close(self.sg.fig)\n        self.fig.canvas.mpl_connect(\"resize_event\", self._resize)\n        self.fig.canvas.draw()\n\n    def _resize(self, evt=None):\n        self.sg.fig.set_size_inches(self.fig.get_size_inches())\n#Cridit goes to\n#https:\/\/stackoverflow.com\/questions\/35042255\/how-to-plot-multiple-seaborn-jointplot-in-subplot\n#Feature engineering one column for SAT\ndf[['SATVRMID' , 'SATMTMID']] = df_data_1[['SATVRMID' , 'SATMTMID']]\ndf.SATVRMID.fillna(0 , inplace = True)\ndf.SATMTMID.fillna(0 , inplace = True)\ndf['SAT_Score'] = df.SATVRMID +df.SATMTMID\ndf.drop(['SATVRMID' , 'SATMTMID'] , axis  = 1  , inplace  = True)\ndf0 =df[df['SAT_Score']!=0]\n\n\n\n# An lmplot\ng0 = sns.jointplot(x=\"SAT_Score\", y=\"Net_Price\", data=df0,\n                  kind=\"reg\", truncate=False,\n                  color=\"m\", height=7 )\nplt.text(-1100,63000,'Scatter Plot show the relation between the SAT scrore and the Net Price ' , fontsize = 18 , fontweight='bold', \n         fontfamily='serif')\nplt.text(-1100,59000,'Enriched with Facetgrid across the Colleges Control type ' , fontsize = 14 , \n         fontfamily='serif')\ng1 =  sns.FacetGrid(df0, col=\"CONTROL\")\ng1.map(sns.scatterplot, \"SAT_Score\", \"Net_Price\" , color=\"m\")\n\n\n\nfig = plt.figure(figsize=(12,12))\n\n# Color selection\ncolor_map = [\"#bdbdbd\" for _ in range(5)]\ncolor_map[0] = \"#008294\"\n\n# Change background color\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color)\n\n\ngs = gridspec.GridSpec(2,1)\n\nmg0 = SeabornFig2Grid(g0, fig, gs[0])\nmg1 = SeabornFig2Grid(g1, fig, gs[1])\n\n\ngs.tight_layout(fig)\n#gs.update(top=0.7)\n\nplt.show()","e7a5fe65":"df2 = df.groupby('PREDDEG')['Net_Price'].mean().reset_index().rename({'Net_Price':'Average_Net_Price'} , axis =1)\ndf2","fbeef4d1":"fig = plt.figure(figsize=(22,13) , facecolor=\"#fbfbfb\")\nx = [2.5,3.6,4.8,5.7]\ny = [4,6,5,3]\nwidth = [ 0.8, 1.2, 1.0, 0.6]\ncolor = ['#D4A492','#E0B30E','#8D918A','#D0D9C3']\n\ns_num = ['3rd','1st','2nd','4th']\n\nfontsize= [ 45, 60, 40, 25]\nx_num = [2.4,3.45,4.65,5.7]\nx_char = [2.62,3.7,4.9,5.78]\ny_char = [4,5.95,5,3.05]\nalpha = [ 0.6, 1, 0.8, 0.3]\ns = ['Certificate','Bachelor','Not classified','Associate']\ns_position = [ 1.8, 3, 2.5, 1.5]\n\nfor i in range(4):\n    plt.bar(x=x[i],height=y[i],width=width[i],color=color[i],alpha=alpha[i])\n    plt.text(s=s[i],x=x[i],y=s_position[i],va='bottom',ha='center',fontsize=fontsize[i],alpha=alpha[i])\n    plt.text(s=s_num[i],x=x_num[i],y=y[i]+0.1,va='bottom',ha='center',fontsize=fontsize[i],alpha=alpha[i])\n    #plt.text(s=s_char[i],x=x_char[i],y=y_char[i],va='bottom',ha='center',fontsize=fontsize[i]-25,alpha=alpha[i])\n    \nplt.text(2,8,'Ranking of Degree Granting across the Average Net-Price' , fontsize = 32  , fontweight='bold', \n         fontfamily='serif')\nplt.text(2,7.5,'Average net price for colleges granting Associate degree was 13668 usd' , fontsize = 20  ,  \n         fontfamily='serif')\nplt.text(2,7.1,'While the Average net price for colleges granting Bachelor degree was 19054 usd' , fontsize = 20  ,  \n         fontfamily='serif')\n\nplt.axis('off')\nplt.show()","ef407f4c":"df_data_1.head(1)","b1d9b679":"#Create new predection data fram\ndfp = df_data_1[['NPT4_PUB' , 'NPT4_PRIV']]\n#sum the price for public and private colleges\ndfp.NPT4_PUB =  dfp.NPT4_PUB.fillna(0)\ndfp.NPT4_PRIV =  dfp.NPT4_PRIV.fillna(0)\ndfp['Net_Price'] = dfp.NPT4_PUB + dfp.NPT4_PRIV\n#Remove the outlyers and replace it with nan\ndfp.Net_Price = dfp.Net_Price .apply (lambda x: np.nan if x<1 else x)\ndfp.Net_Price = dfp.Net_Price .apply (lambda x: np.nan if x>55000 else x)","148a97fd":"fig , ax = plt.subplots(figsize = (8,8))\ndfp.Net_Price.hist()\nplt.title ('Histogram for the Destribution of Net_Price - (Y-target)' , fontsize = 14 , fontfamily='serif');","b2c9e1f8":"#seclect features \ncolumns = ['STABBR' ,'PREDDEG', 'LOCALE', 'CONTROL', 'HBCU', 'PBI',\n           'ANNHI', 'TRIBAL', 'AANAPII', 'HSI', 'NANTI','SATVRMID', 'SATMTMID' ,'ACTCMMID', 'ACTENMID', \n           'ACTMTMID'  , 'SAT_AVG','SAT_AVG_ALL'  , 'MD_EARN_WNE_P10' , 'GT_25K_P6' , 'GRAD_DEBT_MDN_SUPP'\n           , 'GRAD_DEBT_MDN10YR_SUPP' , 'RPY_3YR_RT_SUPP']\ndfp[columns] = df_data_1[columns]","b5daf93a":"dfp.head()","2340e9d1":"Data_information(dfp)","9a0609cb":"dfp.describe().T","6df4eae0":"#drop the private and puplic net price columns\ndfp.drop(['NPT4_PUB' , 'NPT4_PRIV'] , axis = 1 , inplace = True)\n\n\n#1113 collage had no information about the net price , will reduce the data frame with the non-values only \ndfp =dfp[dfp['Net_Price'].notnull()]\n\n\n#Remove the 'PrivacySuppressed' and replace it with nan values\n\ndfp.MD_EARN_WNE_P10 = dfp.MD_EARN_WNE_P10.apply(lambda x: np.nan if x =='PrivacySuppressed' else x)\ndfp.GT_25K_P6 = dfp.GT_25K_P6.apply(lambda x: np.nan if x =='PrivacySuppressed' else x)\ndfp.GRAD_DEBT_MDN_SUPP = dfp.GRAD_DEBT_MDN_SUPP.apply(lambda x: np.nan if x =='PrivacySuppressed' else x)\ndfp.GRAD_DEBT_MDN10YR_SUPP = dfp.GRAD_DEBT_MDN10YR_SUPP.apply(lambda x: np.nan if x =='PrivacySuppressed' else x)\ndfp.RPY_3YR_RT_SUPP = dfp.RPY_3YR_RT_SUPP.apply(lambda x: np.nan if x =='PrivacySuppressed' else x)\n\n\n\n# Convert columns to float\n\ndfp['GT_25K_P6'] = pd.to_numeric(dfp['GT_25K_P6'])\ndfp['MD_EARN_WNE_P10'] = pd.to_numeric(dfp['MD_EARN_WNE_P10'])\ndfp['GRAD_DEBT_MDN_SUPP'] = pd.to_numeric(dfp['GRAD_DEBT_MDN_SUPP'])\ndfp['GRAD_DEBT_MDN10YR_SUPP'] = pd.to_numeric(dfp['GRAD_DEBT_MDN10YR_SUPP'])\ndfp['RPY_3YR_RT_SUPP'] = pd.to_numeric(dfp['RPY_3YR_RT_SUPP'])\n\n\n#Label encoder for the STABBR\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndfp.STABBR = le.fit_transform(dfp.STABBR)\n\n#MD_EARN_WNE_P10 , remove outlayers and replace the nan with the mean\ndfp.MD_EARN_WNE_P10 = dfp.MD_EARN_WNE_P10.apply(lambda x : np.nan if x>80000 else x)\ndfp.MD_EARN_WNE_P10.fillna(dfp.MD_EARN_WNE_P10.mean() , inplace = True)\n\n#GT_25K_P6 , fill nan with the mean\ndfp.GT_25K_P6.fillna(dfp.GT_25K_P6.mean() , inplace  = True)\n\n#GRAD_DEBT_MDN_SUPP remove the outlayers and fill the nan vlaues with the mean\ndfp.GRAD_DEBT_MDN_SUPP = dfp.GRAD_DEBT_MDN_SUPP.apply(lambda x : np.nan if x>40000 else x)\ndfp.GRAD_DEBT_MDN_SUPP.fillna(dfp.GRAD_DEBT_MDN_SUPP.mean() , inplace = True)\n\n#GRAD_DEBT_MDN10YR_SUPP remove the outlayers and fill the nan vlaues with the mean\ndfp.GRAD_DEBT_MDN10YR_SUPP = dfp.GRAD_DEBT_MDN10YR_SUPP.apply(lambda x : np.nan if x>400 else x)\ndfp.GRAD_DEBT_MDN10YR_SUPP.fillna(dfp.GRAD_DEBT_MDN10YR_SUPP.mean() , inplace = True)\n\n#RPY_3YR_RT_SUPP fill nan vlaues with the mean\ndfp.RPY_3YR_RT_SUPP.fillna(dfp.RPY_3YR_RT_SUPP.mean() , inplace = True)\n\n#Feature engineering one column for SAT\ndfp.SATVRMID.fillna(0 , inplace = True)\ndfp.SATMTMID.fillna(0 , inplace = True)\ndfp['SAT'] = dfp.SATVRMID +dfp.SATMTMID\ndfp.drop(['SATVRMID' , 'SATMTMID'] , axis  = 1  , inplace  = True)\n\n\n#Feature engineering one column for SAT_Avg\ndfp.SAT_AVG.fillna(0 , inplace = True)\ndfp.SAT_AVG_ALL.fillna(0 , inplace = True)\ndfp['SAT_AVG'] = dfp.SAT_AVG +dfp.SAT_AVG_ALL\ndfp.drop(['SAT_AVG' , 'SAT_AVG_ALL'] , axis  = 1  , inplace  = True)\n\n\n#Feature engineering one column for ACT Score \ndfp.ACTCMMID.fillna(0 , inplace = True)\ndfp.ACTENMID.fillna(0 , inplace = True)\ndfp.ACTMTMID.fillna(0 , inplace = True)\ndfp['ACT_Score'] = dfp.ACTCMMID +dfp.ACTENMID+dfp.ACTMTMID\ndfp.drop(['ACTCMMID' , 'ACTENMID' , 'ACTMTMID'] , axis  = 1  , inplace  = True)","09a64b8a":"y = dfp.Net_Price.values\nX = dfp.drop('Net_Price' , axis = 1).values","61d139e1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, \n                                                    random_state=42)","8290de67":"from sklearn.ensemble import RandomForestRegressor\nregr = RandomForestRegressor()\nregr.fit(X_train, y_train)","52abdb95":"train_prediction =  regr.predict(X_train)\ntest_predection = regr.predict(X_test)","1e19180b":"Fig , ax = plt.subplots(figsize = (15 ,5))\nax.plot(y_train[0:100]  , label = 'Original Net Price')\nax.plot(train_prediction[0:100] , label = 'Prediction Net Price' )\nplt.legend()\nplt.title('Original VS Predicted Net price Comparasion for the first 100 Colleges in the train dataset' , fontsize=18.5, \n         fontweight='light', \n         fontfamily='serif');\n","f42e1ce2":"Fig , ax = plt.subplots(figsize = (15 ,5))\nax.plot(y_test[0:100], label = 'Original Net Price' )\nax.plot(test_predection[0:100], label = 'Prediction Net Price' )\nplt.legend()\nplt.title('Original VS Predicted Net price Comparasion for the first 100 Colleges in the Test dataset' , fontsize=18.5, \n         fontweight='light', \n         fontfamily='serif');","f2e7dff5":"from sklearn.metrics import mean_squared_error\nprint ('Root Mean square error for the train data , ' , \n       round(mean_squared_error(y_train, train_prediction , squared=False) , 2))\nprint ('Root Mean square error for the train data , ' ,\n       round(mean_squared_error(y_test, test_predection , squared=False) , 2))","8b4a871c":"final_df = pd.DataFrame.from_dict({\"original net price\":y_train , \"Predicted net price\":train_prediction})\nfinal_df = pd.DataFrame.round(final_df)\nfinal_df['Percentage of Error %'] = abs(final_df['original net price']-final_df['Predicted net price'])\/final_df['original net price']*100\nfinal_df =final_df.round(1)\nfinal_df.sample(20)","d38925af":"<div style = 'background-color:#fbfbfb; border-style: solid'><br>\n    <p style = 'text-align: center;'> Chart shows the distribution of Net prices for colleges accros several variables<\/p>\n    <p style = 'text-align: center;'> Degree granting : we can find the colleges provide Bachelor's degree were the most expensive and the colleges provide Associate's degree were the cheapest<\/p>\n    <p style = 'text-align: center;'> Control type : Logically the public colleges were the cheapest but interistingly the Private nonprofit colleges were expensive more than the privat for profit colleges<\/p>\n    <p style = 'text-align: center;'> Colleges Flags : chart shows sample of net price distribution across three flags (tribal , black institution and Alaska Native institution) <\/p>\n    <br><\/div>","1642c338":"## Model Evaluation","61559f0f":"The College Scorecard is designed to increase transparency, putting the power in the hands of the public \u2014 from those choosing colleges to those improving college quality \u2014 to see how well different schools are serving their students. <br>\nCollege Scorecards make it easier for students to search for a college that is a good fit for them. They can use the College Scorecard to find out more about a college's affordability and value so they can make more informed decisions about which college to attend. \n\n\nThe original data has (7703 rows and 122 column) <br>\n\n    \n <hr style=\"height:2px;border-width:5;color:gray;background-color:gray\">\n    ","a80e2bf5":"## Investigating the Prediction datafram\nHere we are goint to check the duplication and the missing values in addition to perform a numirical investigation for each column","7d0bd461":"## Data Manupilation pipe line\n<ul>\n    <li> Drop un-needed column ('NPT4_PUB' , 'NPT4_PRIV') as we will depend on the new prepared column (Net-Price) in our prediction<\/li>\n    <li> 1113 collage had no information about the net price , will reduce the data frame with the non-values only <\/li>\n    <li> Remove the 'PrivacySuppressed' and replace it with nan values in the (Earning , Aid and repayment ) columns <\/li>\n    <li> Convirt the (Earning , Aid and repayment ) columns from object to float64 type<\/li>\n    <li> Label encoder for the STABBR column using sklearn LabelEncoder()<\/li>\n    <li> for column MD_EARN_WNE_P10 , remove outlayers and replace the nan with the mean<\/li>\n    <li> for column GT_25K_P6 , fill nan with the mean <\/li>\n    <li> for column GRAD_DEBT_MDN_SUPP remove the outlayers and fill the nan vlaues with the mean <\/li>\n    <li> for column GRAD_DEBT_MDN10YR_SUPP remove the outlayers and fill the nan vlaues with the mean <\/li>\n    <li> for column RPY_3YR_RT_SUPP fill nan vlaues with the mean<\/li>\n    <li> <b>Feature engineering<\/b> , Create a new column represent the SAT score and drop the columns ( 'SATVRMID' , 'SATMTMID')<\/li>\n    <li> <b>Feature engineering<\/b> , Create a new column represent the Average SAT score and drop the columns ( 'SAT_AVG' , 'SAT_AVG_ALL')<\/li>\n    <li> <b>Feature engineering<\/b> , Create a new column represent the ACT score and drop the columns ( 'ACTCMMID' , 'ACTENMID' , 'ACTMTMID')<\/li>","4a546213":"## Split train and test dataframe","56c23b1d":"<h2> Exploratory Data set Difinitions\n\n<h3> School Information<\/h3><ul>\n    <li> 'UNITID' : ID<\/li>\n    <li> 'INSTNM' : School Name <\/li>\n    <li> 'STABBR' : State postcode <\/li>\n    <li> 'PREDDEG' : Predominant undergraduate degree awarded<ul>\n <li>0 Not classified\n <li>1 Predominantly certificate-degree granting\n <li>2 Predominantly associate's-degree granting\n <li>3 Predominantly bachelor's-degree granting\n <li>4 Entirely graduate-degree granting <\/ul><\/li>\n    <li> 'CONTROL' : Control of institution <ul>\n <li>1 Public\n <li>2 Private nonprofit\n <li>3 Private for-profit <\/ul><\/li>\n\n<\/ul>\n    <h3> Admission Information<\/h3><ul>\n    <li> 'SATVRMID' : Midpoint of SAT scores at the institution (critical reading)<\/li>\n    <li> 'SATMTMID' : Midpoint of SAT scores at the institution (math)<\/li>\n    <li> 'SATWRMID' : Midpoint of SAT scores at the institution (writing)<\/li>\n    <li> 'ACTCMMID' : Midpoint of the ACT cumulative score<\/li>\n    <li> 'ACTENMID' : Midpoint of the ACT English score<\/li>\n    <li> 'ACTMTMID' : Midpoint of the ACT math score<\/li>\n    <li> 'ACTWRMID' : Midpoint of the ACT writing score<\/li><\/ul>","d366fde8":"## Context\nDoes your college deserve the net price paid for it ?<br>\nWhether you\u2019re just beginning to build your college list, or if you\u2019re narrowing down some choices you\u2019ve already made, one of the top factors in many students\u2019 decision is, you guessed it: money.  Most of us know college can be expensive, but what you might not know is that college doesn\u2019t cost the same amount of money for every student. <br>\n<b>College can and should be affordable. That\u2019s why we\u2019re here to help you.<\/b>","18e78949":"Thanks for visiting my notebook  - Upvote if you found it useful\n<h1 style = 'background-color:powderblue;border-style: solid'><center><strong><br> Thanks for visiting my notebook  - Upvote if you found it useful<br>","3594b307":"<div style = 'background-color:#fbfbfb;border-style: solid'>\n    <h3>Distribution of SAT and ACT scores accross the Degree granting<\/h3>\n<p>It was noted that all colleges provide Entirely graduated Degrees or not classified colleges has Null values in reagrd of the SAT and ACT scores. <br>\n    also the mean scores for the collages provided Associate's-Degree is less than the mean of the other colleges provided Bechelor or Certificate degrees<\/p><br>\n    <\/div>","7bd9aa53":"<div style = 'background-color:#fbfbfb; border-style: solid'><br>\n    <p style = 'text-align: center;'> Chart shows the distribution of colleges across US states and it seems to me it's equaly distributed , the top states were New York with total 90 colleges  , Chicago with 80 colleges and Housten with 75 colleges<\/p>\n    <p style = 'text-align: center;'> Also I add the two Pie charts showing the percentage of the Control type for the top two states  and interestingly the percentage of Public colleges was very low comparing to the private ones <\/p>\n    <br><\/div>","740bdf16":"## Problem Defintion\n\nIn this model we  will try to predict the Average net price for  (public institutions)and  (private for-profit and nonprofit institutions)","491c7af3":"<div style = 'background-color:#fbfbfb; border-style: solid'><br>\n    <p style = 'text-align: center;'> According to the chart above  , Prvate for profit colleges are the most control type of colleges in US with over than 3700 college   , but still the non-profit type of college  either the (public and private nonprofit) hold a good percenatge of the total number of US Colleges<\/p>\n    <p style = 'text-align: center;'> with respect to the Degree granting  , we can find the colleges provide certificate-degree on the top followed by the colleges provide Bachelor's and associates degree respectivily <\/p><br>\n    <\/div>","1c3b0ec2":"## Preparing the Y  - Net price\nThere are several elements in the dataset that describe the average net\nprice, derived from the full cost of attendance (including tuition and\nfees, books and supplies, and living expenses) minus federal, state, and\ninstitutional grant\/scholarship aid, for full-time, first-time\nundergraduate Title IV-receiving students. Average net price (NPT4_*\nfor _PUB [public colleges; for public institutions, this metric is limited to\nthose undergraduates who pay in-state tuition] and _PRIV [private\ncolleges]) includes a weighted average of all full-time, first-time\nundergraduate Title IV-receiving students<br><p>\n    we will create a new column (Net-Price) contain the average net prices for the public and the private colleges <\/p>","ccae8fbd":"## Evaluating the Model (RMSE)\n\nAfter Evaluation my predictor model I found the root mean  squared error for the train data was 1907 and for the test data was 4560  , it's noted that some further work should be done to avoid the over fitting of the model .\n## Limitation\n\nThe future work in this project may include implementing some other machine learning models like knn (k-nearest neighbors), rpart (decision trees), etc., training the model with only top important features, exploring additional features related to institutes and demographics, and exploring other years\u2019 cohort data.\n\nAlso the Data contain a big amount of Null values which effect the performance of the model  ","a76686f8":"<div style = 'background-color:#fbfbfb; border-style: solid'><br>\n    <p style = 'text-align: center;'> Here we are presenting a scatter plot showing the relation between the SAT score and the college Net price<\/p>\n    <p style = 'text-align: center;'> the chart was enriched with a facet grid showing the same relation taking in considration the colleges control type<\/p>\n    <p style = 'text-align: center;'> overall thier is a week positive corelation however the data set contain alot of null values which effect the cridability of the chart<\/p>\n    <br><\/div>","9ca29406":"## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction to the dataset<\/a><\/li>\n<li><a href=\"#clean\">Data Cleaning<\/a><\/li>\n<li><a href=\"#EDA\">Exploratory Model<\/a><\/li>\n<li><a href=\"#pr\">Pridective Model<\/a><\/li>","73fdfcda":"## Objective\nBuild a predictive model to predict the fair net price for each college  (public institutions)and (private for-profit and nonprofit institutions)","3eda5c13":"## Prepare subset of the data for the Exploratory Model","7290f6bd":"<div style = 'background-color:#fbfbfb;border-style: solid'>\n    <h3> Exploratory Research Questions<\/h3>\n<ul>\n    <li>Visualizing the percenatge of US  Colleges accrding to Control type (public \/ private) and Degree granting (bachelor ,associate  ,etc.. )<\/li>\n    <li>Visualizing the relation between the Control type and the Degree granting<\/li>\n    <li>Visualizing the distribution of the Colleges across US<\/li>\n    <li>Visualizing The distribution of SAT and Scores accross the degree granting<\/li><\/ul>\n    <\/div>","30df3c0a":"## Building the  dataframe and selecting the predicting features\n### predicting features as follow:<br><br>\n<ul>\n    <li><strong>School <\/strong><\/li>\n        <ul>\n    <li> <strong>STABBR: <\/strong> State of the college<\/li>\n    <li> <strong>PREDDEG: <\/strong> Predominant degree awarded (recoded 0s and 4s)<\/li>\n    <li> <strong>CONTROL: <\/strong> Control of institution (public \/Private) <\/li>\n    <li> <strong>HBCU: <\/strong> Flag for Historically Black College and University <\/li>\n    <li> <strong>PBI:<\/strong>  Flag for predominantly black institution <\/li>\n    <li> <strong>ANNHI: <\/strong> Flag for Alaska Native Native Hawaiian serving institution <\/li>\n    <li> <strong>TRIBAL: <\/strong> Flag for tribal college and university <\/li>\n    <li> <strong>AANAPII: <\/strong> Flag for Asian American Native American Pacific Islander-serving institution<\/li>\n    <li> <strong>HSI: <\/strong> Flag for Hispanic-serving institution<\/li>\n    <li> <strong>NANTI:  <\/strong> Flag for Native American non-tribal institution<\/li><br><br>\n        <\/ul>\n    <li> <strong>Admissions <\/strong> <\/li>\n        <ul>\n    <li> <strong>SATVRMID: <\/strong> Midpoint of SAT scores at the institution (critical reading)<\/li>\n    <li> <strong>SATMTMID: <\/strong> Midpoint of SAT scores at the institution (math)<\/li>\n    <li> <strong>ACTCMMID: <\/strong> Midpoint of the ACT cumulative score<\/li>\n    <li> <strong>ACTENMID: <\/strong> Midpoint of the ACT English score<\/li>\n    <li> <strong>ACTMTMID: <\/strong> Midpoint of the ACT math score<\/li>\n    <li> <strong>SAT_AVG: <\/strong> Average SAT equivalent score of students admitted<\/li>\n    <li> <strong>SAT_AVG_ALL: <\/strong>Average SAT equivalent score of students admitted for all campuses rolled up to the 6-digit OPE ID <\/li><br><br>\n        <\/ul>\n    <li> <strong>Earning<\/strong><\/li>\n        <ul>\n    <li> <strong>MD_EARN_WNE_P10: <\/strong> Median earnings of students working and not enrolled 10 years after entry<\/li>\n    <li> <strong>GT_25K_P6:  <\/strong>Share of students earning over 25,000 USD per year (threshold earnings) 6 years after entry <\/li><br><br>\n    <\/ul>\n     <li> <strong>Aid <\/strong><\/li>\n         <ul>\n    <li> <strong>GRAD_DEBT_MDN_SUPP:  <\/strong> Median debt of completers, suppressed for n=30<\/li>\n    <li> <strong>GRAD_DEBT_MDN10YR_SUPP: <\/strong> Median debt of completers expressed in 10-year monthly payments, suppressed for n=30<\/li><br><br>\n         <\/ul>\n    <li> <strong>repayment<\/strong><\/li>\n        <ul>\n    <li> <strong>RPY_3YR_RT_SUPP: <\/strong> 3-year repayment rate for dependent students, suppressed for n=30 <\/li>\n        <\/ul>\n        <\/ul>\n","6a985339":"<h1 style = 'background-color:powderblue;border-style: solid'><center><strong><br> Explorative Model<br>","debc84f0":"### Data Cleaning Findings and Observation\n>Thier were no duplicated rows in the dataframe<br>\n>421 null values in all Collages Flags column  - will be filled (NO Information Provided)<br>\n>Very big number of Null values in the SAT score and ACT score , After investigation I found all the colleges provided graduated degree or not classified type has all Null values , that will be taken in considration during the analysis<br>\n>Flags Columns were a binary columns contain either 0 for (no) and 1 for (yes)<br>\n>No outliers shown in the numircal analysis<br>\n>Three types for \"CONTROL\" column either (public , private for profit or private for non profit)with no missing values<br>\n>Five types for \"PREDDEG\" depend on the degree granting ie(Bachelor , Associate  , Entirely graduate ,..etc) with no missing values<br>","e0c40639":"<a id='clean'><\/a>\n## Data Cleaning\n>In this section we will check the quality and tideness and completeness of our data frame","d192d9e0":"## Prepare the X and y for pridiction","16eb0085":"## Approch\nUsing the College scorecard dataset we will use some predictor factors including some information on the school itself  , information about the admission requirement  , information about the earning and aid to predict the fair price of the colleges using Random forrest regressor ","aa55efa4":"The below table shows the basic information about the Completion of the dataframe<br>\nnumber of duplicated values in each row<br>\nnumber of unique values<br>\nNumber of missing values <br>\nand type of the column","ae328ace":"## Set the regressor using RandomForest Regressor ","7ce277ac":"## Prediction","eb0fa846":"## Plot the Original net price VS the predicted net ptice for the first 100 college for train and test data set","5a07e661":"## Reading the Original data and Importing the Basic liberaries","459eca7d":"<h1 style = 'background-color:powderblue;border-style: solid'><center><strong><br> Pridective Model<br>","e5d40607":"<h1 style = 'background-color:powderblue;border-style: solid'><center><strong><br> US Colleges Scorecard Analysis<br>","64bd74b9":"<div style = 'background-color:#fbfbfb; border-style: solid'><br>\n    <p style = 'text-align: center;'> A fancy chart was Build to emphasize our think in the colleges net price across the degree granting<\/p>\n    <p style = 'text-align: center;'> Average net price for colleges granting Associate degree was 13668 usd<\/p>\n    <p style = 'text-align: center;'> while the Average net price for colleges granting Bachelor degree was 19054 usdt<\/p>\n    <br><\/div>","10305d69":"<a id='EDA'><\/a>\n## Exploratory Data Analysis\n>Here goes our visualization","6c07ad34":"<a id='pr'><\/a>\n# Predictive model ","3d9f63a8":"<a id='intro'><\/a>\n## Introduction to the dataset\n><a href=\"https:\/\/catalog.data.gov\/dataset\/most-recent-cohorts-scorecard-elements\">Dataset link<\/a> <br>\n><a href=\"https:\/\/collegescorecard.ed.gov\/assets\/FullDataDocumentation.pdf\">Technical Documentation: College Scorecard Institution-Level Data<\/a> <br>\n><a href=\"https:\/\/collegescorecard.ed.gov\/assets\/FieldOfStudyDataDocumentation.pdf\">Technical Documentation: College Scorecard Data by Field of Study<\/a> <br>\n>Dataset last update: August 7, 2021","91b59423":"<div style = 'background-color:#fbfbfb;border-style: solid'>\n    <h1> The Notebook splitting to two main parts<\/h1>\n    <h3> Explorative Model<\/h3>\n    <p> Using the US colleges data set I plan to cover all the requirement in the IBM freelancer contest including document the findings in a way that it should be good to be a standalone deliverable.  communicate the insights using the medium of text and graphs and other visual medium to go along with analysis.https:\/\/www.freelancer.com\/contest\/Exploratory-Data-Analysis-1993149 .https:\/\/www.freelancer.com\/contest\/Exploratory-Data-Analysis-1993149 <\/p>\n    <h3>Predictive Model<\/h3>\n    <p> Take IBM Watson Studio for a spin to Create a predictive model using sklearn Random Forest Regressor  algorithms to accurate predict the net price of US colleges. and follow all the requirement in the IBM contest in the link below. <br> https:\/\/www.freelancer.com\/contest\/Data-Science-Predictive-Model-1993148 <br><br><\/p>\n    <\/div>"}}