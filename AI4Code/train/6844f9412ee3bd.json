{"cell_type":{"e276113a":"code","16c040aa":"code","a946e18f":"code","e67cce8b":"code","98c00904":"code","96f8ba92":"code","50f866a5":"code","29a05d16":"code","9f00c235":"code","1d52a03f":"code","1a10f588":"code","f2e4a7b2":"code","5738315e":"code","75bf36bc":"code","2ba660cb":"code","560c865a":"code","259c2f3f":"code","03e71efe":"code","6adbb45f":"code","725cbbe8":"code","b94e2f68":"code","f151e089":"code","078ca7bb":"code","61bcb45b":"code","d3cf56a2":"code","bc0f9b50":"code","fc0ec120":"code","b75309e5":"code","81eac00f":"code","fe2fcfd1":"code","2d4bd4ff":"code","c3952196":"code","e7d0c880":"code","d53eceeb":"code","3f68c800":"code","3e23ff43":"markdown","32e8aaa0":"markdown","978bcb5a":"markdown","3ba5d1b1":"markdown","e7c193c7":"markdown","bcbda027":"markdown","2954f294":"markdown","2840354b":"markdown","4aeffc1e":"markdown","c33d7b64":"markdown","02b30cec":"markdown","f2edf816":"markdown","cbe4e375":"markdown","28748964":"markdown","2502cf7c":"markdown"},"source":{"e276113a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt \nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns \n\nfrom collections import Counter \n\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16c040aa":"train_df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_GenderId=test_df['PassengerId']","a946e18f":"train_df.columns","e67cce8b":"train_df.head(2)","98c00904":"train_df.describe()","96f8ba92":"train_df.info()","50f866a5":"train_df.info()","29a05d16":"def bar_plot(variable):\n    \n    #get feature\n    var=train_df[variable]\n    \n    #count number of categorical variable (value\/sample)\n    varValue=var.value_counts()\n    \n    #visuliaze\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show\n    print(\"{}:\/n{}\".format(variable.varValue))","9f00c235":"category1=[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot (c)","1d52a03f":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable])\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","1a10f588":"numeric=[\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numeric:\n    plot_hist(n)","f2e4a7b2":"train_df[[\"Pclass\",\"Survived\"]]","5738315e":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False)","75bf36bc":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean()","2ba660cb":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values","560c865a":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","259c2f3f":"train_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","03e71efe":"train_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","6adbb45f":"train_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","725cbbe8":"def detect_outliers(df,features):\n    outlier_indices=[]\n    for c in features:\n        Q1=np.percentile(df[c],25)\n        Q3=np.percentile(df[c],75)\n        IQR=Q3-Q1\n        outlier_step=IQR*1.5\n        outlier_list_col=df[(df[c]<Q1-outlier_step)|(df[c]>Q3+outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices=Counter(outlier_indices)\n    multiple_outliers=list(i for i, v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers","b94e2f68":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","f151e089":"#drop outliers\ndf=train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","078ca7bb":"df","61bcb45b":"train_df_len=len(train_df)\ntrain_df=pd.concat([train_df,test_df], axis=0).reset_index(drop=True)","d3cf56a2":"train_df.head()","bc0f9b50":"train_df.columns[train_df.isnull().any()]","fc0ec120":"train_df.isnull().sum()","b75309e5":"train_df[train_df[\"Embarked\"].isnull()]\n","81eac00f":"train_df.boxplot(column=\"Fare\", by=\"Embarked\")","fe2fcfd1":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","2d4bd4ff":"train_df[train_df[\"Fare\"].isnull()]","c3952196":"train_df[train_df[\"Pclass\"]==3][\"Fare\"]","e7d0c880":"np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"])","d53eceeb":"train_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","3f68c800":"train_df[train_df[\"Fare\"].isnull()]","3e23ff43":"<a Id=\"10\"><\/b>\n### Fill missing value","32e8aaa0":"<a Id=\"2\"><\/a>\n## Variable Description\n\n1. PassengerId: unique Id number to each passenger\n1. Survived: passenger survive (1) or died (0)\n1. Pclass: passenger class\n1. Name: name of passengers \n1. Sex: gender of passengers\n1. Age: passenger age of passengers\n1. SibSp: number of siblings\/ spouses\n1. Parch: number of parent \/ children \n1. Ticket: number of ticket \n1. Fare: amount of money to spent on ticket \n1. Cabin: cabin category \n1. Embarked: port where passenger embarked (C= Cherbourg, Q= Oueenstorm, S= Southampton)","978bcb5a":"<a Id=\"5\"><\/a>\n## Numerical Variable","3ba5d1b1":"**In order to fill Embarked values**","e7c193c7":"1 fare value and 2 embarked values are missing, so we can fill.","bcbda027":"<a Id=\"7\"><\/b>\n## Outlier Detection","2954f294":"<a Id=\"6\"><\/b>\n## Basic Data Analysis\n*  Pclass vs Survived\n*  Sex vs Survived\n*  SibSp vs Survived\n*  Parch vs Survived\n ","2840354b":"* float64(2): Age and Fare \n* int64(5): PassengerId, Survived, Pclass, SibSp and Parch \n* object(5): Name, Sex, Ticket, Cabin and Embarked ","4aeffc1e":"<a Id=\"4\"><\/a>\n## Categorical Variable\n    ","c33d7b64":"**In order to fill Fare value**","02b30cec":"<a Id=\"1\"><\/a>\n## Load and Check Data \n","f2edf816":" <a Id=\"3\"><\/a>\n \n # Univariate Variable Analysis\n \n * Categorical Variable: Survived, Pclass, Name, Sex, SibSp, Parch, Ticket, Cabin and Embarked \n    \n * Numerical Variable: Fare, Age and PassengerId \n       ","cbe4e375":"<a Id=\"9\"><\/b>\n### Find missing value","28748964":"<a Id=\"8\"><\/b>\n## Missing Value\n  * Find missing value\n  * Fill missing value\n   ","2502cf7c":"# Introduction \n\nTitanic is the the most notorious accident in the history...\n\n<font color= 'blue'>\n\nContent \n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find missing value](#9)\n    * [Fill missing value](#10)\n   "}}