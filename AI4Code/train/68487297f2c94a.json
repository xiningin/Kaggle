{"cell_type":{"326a922c":"code","86eef42c":"code","1f32a9ef":"code","f58db421":"code","29d118d7":"code","7d8c1d79":"code","e1a6f9a2":"code","93ebfb97":"code","e804a345":"code","f32c5684":"code","fa4edb3f":"code","47aeda14":"code","bc4f6167":"code","bc498287":"code","84d0a605":"code","f2f7c6d9":"code","43abd3a3":"code","197b4856":"code","5689a350":"code","1f406910":"code","cfbddf32":"code","afef4b79":"code","9ea1130d":"code","260b0a7a":"code","f862f412":"code","8c0f4930":"code","6c8786a7":"code","3d1e4230":"markdown","8b6fa595":"markdown","15118800":"markdown","746f71ef":"markdown","aaaa68f4":"markdown","678c130a":"markdown","d7aec055":"markdown","7d256260":"markdown","ad308a3a":"markdown","1b047b59":"markdown","405605a1":"markdown","d2ad4a84":"markdown","9ad19aea":"markdown","302c31ab":"markdown","0595e475":"markdown","3e7e7c58":"markdown","5130d4e0":"markdown","cac5ca6e":"markdown","2e8edea1":"markdown","1e79bfc3":"markdown","6e0f5d2f":"markdown","00f685a9":"markdown","5e11d508":"markdown","1e98f5db":"markdown","e9b27ab8":"markdown","8c30a399":"markdown","70f40bab":"markdown","cd9712ea":"markdown","92355f1f":"markdown","d5223228":"markdown"},"source":{"326a922c":"import pandas as pd\nimport numpy as np\nimport datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport squarify\nimport matplotlib.dates as mdates\nfrom matplotlib.dates import DateFormatter\nimport textwrap\nfrom textwrap import wrap\n\nfrom statistics import *\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","86eef42c":"Covid19VAERS = pd.read_csv('..\/input\/covid19-vaccine-adverse-reactions-vaers-dataset\/Covid1-19_VAERS_Jan_June_2021.csv')","1f32a9ef":"############################# Making a copy for safekeep ###############################\n\ncovidData = Covid19VAERS.copy()\n\n################################# Information about the data ##############################\nprint('The file has\\n')\nprint('    Rows       Columns')\nprint('   {}         {}\\n'.format(covidData.shape[0], covidData.shape[1]))\n\nprint('This is how the first few samples of data looks like:\\n')\nprint(covidData.head())","f58db421":"covidDf = covidData.copy()\n\ncovidDf.info()","29d118d7":"print('There are {} unique levels in VAX_TYPE and they are {}'.format(covidDf.VAX_TYPE.nunique(), covidDf.VAX_TYPE.unique()))","7d8c1d79":"covidDf.drop(['VAERS_ID', 'VAX_TYPE'], axis=1, inplace=True)","e1a6f9a2":"print('The vaccine manufacturers in the data are\\n')\nprint(covidDf.VAX_MANU.value_counts())\n","93ebfb97":"##################################### % of DATA by VACCINE MANUFACTURER' ###################################################\n\nfig, ax = plt.subplots(ncols=2, nrows=1, figsize=(14,10), dpi=100)\n\nsns.barplot(x=round((covidDf.VAX_MANU.value_counts()\/covidDf.shape[0])*100,2), y=covidDf.VAX_MANU.value_counts().index,\n           palette='muted', ax=ax[0])\nax[0].tick_params(axis='y', labelsize=18)\nax[0].tick_params(axis='x', labelbottom=False)\nax[0].spines['right'].set_visible(False)\nax[0].spines['top'].set_visible(False)\nax[0].spines['bottom'].set_visible(False)\nax[0].set_xlabel(\" \")\n\n\nfor p in ax[0].patches:\n    width = p.get_width() \n    annot = width.astype('str')\n    ax[0].annotate(annot+'%', xy=(p.get_width(), p.get_y()+p.get_height()\/2), fontsize=22,\n            xytext=(5, 0), textcoords='offset points', ha=\"left\", va=\"center\")\n\nlabels = list(covidDf.VAX_MANU.value_counts().index)\nax[1].pie(round((covidDf.VAX_MANU.value_counts()\/covidDf.shape[0])*100,2), labels=labels, \n         autopct = '%1.2f%%', textprops={'size': 'xx-large'}, wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'})\n\nplt.suptitle('% of DATA by VACCINE MANUFACTURER', fontsize=26, fontweight='bold')\nplt.show()\n","e804a345":"manu_index = covidDf[covidDf['VAX_MANU'] == 'UNKNOWN MANUFACTURER'].index\ncovidDf.drop(manu_index, inplace=True)\nprint('After dropping the rows with Unknown Vaccine Manufacture, the data now contains\\n')\nprint('{} rows and {} columns'.format(covidDf.shape[0], covidDf.shape[1]))","f32c5684":"################################# Vaccine-manufacture percentage-wise data stands as ##################################\n\nfig, ax = plt.subplots(ncols=2, nrows=1, figsize=(16,10))\n\nsns.barplot(x=round((covidDf.VAX_MANU.value_counts()\/covidDf.shape[0])*100,2), y=covidDf.VAX_MANU.value_counts().index,\n           palette='muted', edgecolor='darkgray', ax=ax[0])\nannot=round((covidDf.VAX_MANU.value_counts()\/covidDf.shape[0])*100,2)\n\nfor p in ax[0].patches:\n    width = p.get_width()\n    annot = width.astype('str')\n    ax[0].annotate(annot+'%', xy=(p.get_width(), p.get_y()+p.get_height()\/2), fontsize=22,\n            xytext=(5, 0), textcoords='offset points', ha=\"left\", va=\"center\")\n    \nax[0].tick_params(axis='y', labelsize=18)\nax[0].tick_params(axis='x', labelbottom=False)\nax[0].spines['right'].set_visible(False)\nax[0].spines['top'].set_visible(False)\nax[0].spines['bottom'].set_visible(False)\nax[0].set_xlabel(\" \")\n\nlabels = list(covidDf.VAX_MANU.value_counts().index)\nax[1].pie(round((covidDf.VAX_MANU.value_counts()\/covidDf.shape[0])*100,2), labels=labels, \n         autopct = '%1.2f%%', textprops={'size': 'xx-large'}, wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'})\n\nplt.suptitle('% of DATA by VACCINE MANUFACTURER after DELETING UNKNOWN MANUFACTURER', fontsize=24)\nplt.show()\n\nplt.show()","fa4edb3f":"print('The null values within age:')\ncovidDf.AGE_YRS.isna().sum()","47aeda14":"######################### Imputing the null values with 0 and then forming an age group ##########################\n\ncovidDf['AGE_YRS'] = covidDf['AGE_YRS'].fillna(0)\ncovidDf.AGE_YRS.isna().sum()\n\ncovidDf.loc[covidDf['AGE_YRS'] == 0, 'AGE'] = 'Unknown'\ncovidDf.loc[((covidDf['AGE_YRS']>0) & (covidDf['AGE_YRS']<18)), 'AGE'] = 'Child'\ncovidDf.loc[((covidDf['AGE_YRS']>=18) & (covidDf['AGE_YRS']<45)), 'AGE'] = 'Young Adult'\ncovidDf.loc[((covidDf['AGE_YRS']>=45) & (covidDf['AGE_YRS']<60)), 'AGE'] = 'Senior Adult'\ncovidDf.loc[((covidDf['AGE_YRS']>=60) & (covidDf['AGE_YRS']<80)), 'AGE'] = 'Senior Citizen'\ncovidDf.loc[covidDf['AGE_YRS']>=80, 'AGE'] = 'Very Senior Citizen'\n\nprint(covidDf.AGE.value_counts())","bc4f6167":"mod = covidDf[covidDf['VAX_MANU'] =='MODERNA'].copy()\npf =  covidDf[covidDf['VAX_MANU'] =='PFIZER\\BIONTECH'].copy()\nJns = covidDf[covidDf['VAX_MANU'] =='JANSSEN'].copy()","bc498287":"print('mod(Moderna) has {} rows'.format(mod.shape[0]))\nprint('pf(Pfizer\/BioNTech) has {} rows'.format(pf.shape[0]))\nprint('Jns(Johnson & Johnson has {} rows'.format(Jns.shape[0]))","84d0a605":"############################ TreeMap of Vaccine Adverse Events by AGE ###############################################\n\nfig, ax = plt.subplots(ncols=3, nrows=1, figsize=(18,6))\ncol = ['lightcoral', 'navajowhite', 'slateblue', 'palegreen', 'orchid']\n\ndata = mod.AGE.value_counts().drop('Unknown')\n#ax[0].pie(data.values, labels=data.index, autopct = '%d%%', explode =[0.03]*len(data.index),textprops={'fontsize': 20})\nlabels = [ '\\n'.join(wrap(l, 10)) for l in data.index]\nsquarify.plot(sizes=data.values, label=labels, ax=ax[0], color=col, text_kwargs={'fontsize':14})\nax[0].set_title('MODERNA', fontsize=18)\n\ndata = pf.AGE.value_counts().drop('Unknown')\n#ax[1].pie(data.values, labels=data.index, autopct = '%d%%', explode =[0.03]*len(data.index),textprops={'size': 'xx-large'})\nlabels = [ '\\n'.join(wrap(l, 10)) for l in data.index]\nsquarify.plot(sizes=data.values, label=labels, ax=ax[1], color=col, text_kwargs={'fontsize':14})\nax[1].set_title('PFIZER\/BIONTECH', fontsize=18)\n\ndata = Jns.AGE.value_counts().drop('Unknown')\n#ax[2].pie(data.values, labels=data.index, autopct = '%d%%', explode =[0.03]*len(data.index),textprops={'size': 'xx-large'})\nlabels = [ '\\n'.join(wrap(l, 10)) for l in data.index]\nsquarify.plot(sizes=data.values, label=labels, ax=ax[2], color=col, text_kwargs={'fontsize':14})\nax[2].set_title('JOHNSON & JOHNSON', fontsize=18)\n\nplt.suptitle('Vaccine Adverse Events by AGE', fontsize=24, fontweight='bold')\nplt.show()","f2f7c6d9":"print('The counts of MedDRA of SYMPTOM1 for 3 vaccine manufacturers are:')\nprint('\\nMODERNA: \\n', mod.SYMPTOMVERSION1.value_counts())\nprint('\\nPFIZER\/BIONTECH: \\n', pf.SYMPTOMVERSION1.value_counts())\nprint('\\nJANSSEN: \\n', Jns.SYMPTOMVERSION1.value_counts())","43abd3a3":"############################# Visualize SYMPTOMVERSION1 for Moderna, Pfizer, Janssen ##################################\n\nfig, ax = plt.subplots(ncols=3, nrows=1, figsize=(18,10))\n\nlabels = list(mod.SYMPTOMVERSION1.unique())\nax[0].pie(round((mod.SYMPTOMVERSION1.value_counts()\/mod.shape[0])*100,2), labels = labels, autopct = '%1.1f%%',\n         colors=['crimson', 'greenyellow'], explode =[0.05]*len(labels), textprops={'size': 'xx-large'})\nax[0].set_title('MODERNA', fontsize=24)\n\nlabels = list(pf.SYMPTOMVERSION1.unique())\nax[1].pie(round((pf.SYMPTOMVERSION1.value_counts()\/pf.shape[0])*100,2), labels=labels, autopct = '%1.1f%%',\n         colors=['crimson', 'greenyellow'], textprops={'size': 'xx-large'},explode =[0.03]*len(labels))\nax[1].set_title('PFIZER\/BIONTECH', fontsize=24)\n\nlabels = list(Jns.SYMPTOMVERSION1.unique())\nax[2].pie(round((pf.SYMPTOMVERSION1.value_counts()\/pf.shape[0])*100,2), labels=labels, autopct = '%1.1f%%',\n         colors=['crimson', 'greenyellow'], textprops={'size': 'xx-large'},explode =[0.03]*len(labels))\nax[2].set_title('JOHNSON & JOHNSON', fontsize=24)\nplt.suptitle('% of MedDRA terms in SYMPTOM1', fontsize=20, fontweight='bold')\nplt.show()","197b4856":"############### Visualise Top 10 symptoms of SYMPTOM1 for Moderna, Pfizer, Janssen #############\n\nfig, ax = plt.subplots(ncols=3, nrows=1, figsize=(16,10))\n\nmodSymp1 = mod.SYMPTOM1.value_counts().sort_values(ascending=False).head(10)\nsns.barplot(y=modSymp1.index, x=modSymp1.values, ax=ax[0], palette='bright', edgecolor='darkgray')\nax[0].set_yticklabels([textwrap.fill(e, 10) for e in modSymp1.index])\nfor p in ax[0].patches:\n    width = p.get_width()\n    ax[0].annotate(p.get_width(), xy=(p.get_width()-3000, p.get_y()+p.get_height()\/2),\n            xytext=(5, 0), textcoords='offset points', ha=\"left\", va=\"center\", size=16, weight='bold', color='white')\nax[0].set_title('MODERNA', fontsize=24)\n\npfSymp1 = pf.SYMPTOM1.value_counts().sort_values(ascending=False).head(10)\nsns.barplot(y=pfSymp1.index, x=pfSymp1.values, ax=ax[1], palette='bright', edgecolor='darkgray')\nfor p in ax[1].patches:\n    width = p.get_width()\n    ax[1].annotate(p.get_width(), xy=(p.get_width()-2000, p.get_y()+p.get_height()\/2),\n            xytext=(5, 0), textcoords='offset points', ha=\"left\", va=\"center\", size=16, weight='bold', color='white')\nax[1].set_title('PFIZER\/BIONTECH', fontsize=24)\n\nJnsSymp1 = Jns.SYMPTOM1.value_counts().sort_values(ascending=False).head(10)\nsns.barplot(y=JnsSymp1.index, x=JnsSymp1.values, ax=ax[2], palette='bright', edgecolor='darkgray')\nax[2].set_yticklabels([textwrap.fill(e, 10) for e in JnsSymp1.index])\nfor p in ax[2].patches:\n    width = p.get_width()\n    ax[2].annotate(p.get_width(), xy=(p.get_width()-800, p.get_y()+p.get_height()\/2),\n            xytext=(5, 0), textcoords='offset points', ha=\"left\", va=\"center\", size=16, weight='bold', color='white')\nax[2].set_title('JOHNSON & JOHNSON', fontsize=24)\n\nfor i in range(3):\n    ax[i].tick_params(axis='y', labelsize=14)\n    ax[i].tick_params(axis='x', bottom=False, labelbottom=False)\n    ax[i].spines['right'].set_visible(False)\n    ax[i].spines['top'].set_visible(False)\n    ax[i].spines['bottom'].set_visible(False)\n    ax[i].set_xlabel(\" \")\n\nplt.suptitle('Top 10 SYMPTOMS of Moderna, Pfizer, Johnson & Johnson', fontsize=28, fontweight='bold')\nplt.show()\n","5689a350":"######################### Vaccine Adverse Events by SEX #############################\n################ More Females experienced Vaccine Adverse Events than males ###############\n\nfig, ax = plt.subplots(ncols=3, nrows=1, figsize=(16,10))\n\ndata = mod.SEX.value_counts()\nax[0].pie(data.values, labels=data.index, autopct = '%d%%', explode =[0.03]*len(data.index),\n          colors=['turquoise', 'greenyellow', 'coral'], textprops={'size': 'xx-large'})\nax[0].set_title('MODERNA', fontsize=24)\n\ndata = pf.SEX.value_counts()\nax[1].pie(data.values, labels=data.index, autopct = '%d%%', explode =[0.03]*len(data.index),\n          colors=['turquoise', 'greenyellow', 'coral'],textprops={'size': 'xx-large'})\nax[1].set_title('PFIZER\/BIONTECH', fontsize=24)\n\ndata = Jns.SEX.value_counts()\nax[2].pie(data.values, labels=data.index, autopct = '%d%%', explode =[0.03]*len(data.index),\n          colors=['turquoise', 'greenyellow', 'coral'], textprops={'size': 'xx-large'})\nax[2].set_title('JOHNSON & JOHNSON', fontsize=24)\n\nplt.suptitle('Vaccine Adverse Events by SEX\\n More Females experienced Vaccine Adverse Events than Males',\n             fontsize=24, fontweight='bold')\n\nplt.show()","1f406910":"############## Top 5 SYMPTOM1 by SEX for each of the 3 Vaccine Manufacturers #############\n\nfig, ax = plt.subplots(nrows=3, ncols=2, figsize=(16,10))\n\n##################################### MODERNA #######################################\n\nfemale = mod[mod['SEX'] == 'F']['SYMPTOM1'].value_counts(ascending=False).head(5).sort_values(ascending=True)\nmale = mod[mod['SEX'] == 'M']['SYMPTOM1'].value_counts(ascending=False).head(5).sort_values(ascending=True)\n\nax[0,0].barh(female.index, width=female.values, color='#F13699', edgecolor='dimgray')\n\nfor i in range(0,5):\n    ax[0,0].annotate(list(female.index)[i], xy=(female.values[i]-1800,i), \n             fontsize=14, ha='center', va='center', color='white', fontweight='bold')\n    annot = round((female.values[i]\/mod['SEX'].value_counts()[0])*100, 2)\n    annot = annot.astype('str')\n    ax[0,0].annotate(annot+'%', xy=(female.values[i]+675,i), \n             fontsize=14, ha='center', va='center', color='black', fontweight='light')\n\nax[0,0].set_ylabel('MODERNA', fontsize=16)\nax[0,0].set_title('Female', fontsize=16)\n\nax[0,1].barh(male.index, width=male.values, color='#3FA6DA', edgecolor='dimgray')\nfor i in range(0,5):\n    ax[0,1].annotate(list(male.index)[i], xy=(male.values[i]-450,i), \n             fontsize=14, ha='center', va='center', color='white', fontweight='bold')\n    annot = round((male.values[i]\/mod['SEX'].value_counts()[1])*100, 2)\n    annot = annot.astype('str')\n    ax[0,1].annotate(annot+'%', xy=(male.values[i]+210,i), \n             fontsize=14, ha='center', va='center', color='black', fontweight='light')\n\nax[0,1].set_ylabel('MODERNA', fontsize=16)\nax[0,1].set_title('Male', fontsize=16)\n\n############################ PFIZER\/BIONTECH ################################\n\nfemale = pf[pf['SEX'] == 'F']['SYMPTOM1'].value_counts(ascending=False).head(5).sort_values(ascending=True)\nmale = pf[pf['SEX'] == 'M']['SYMPTOM1'].value_counts(ascending=False).head(5).sort_values(ascending=True)\n\nax[1,0].barh(female.index, width=female.values, color='#F13699', edgecolor='dimgray')\n\nfor i in range(0,5):\n    ax[1,0].annotate(list(female.index)[i], xy=(female.values[i]-800,i), \n             fontsize=14, ha='center', va='center', color='white', fontweight='bold')\n    annot = round((female.values[i]\/mod['SEX'].value_counts()[0])*100, 2)\n    annot = annot.astype('str')\n    ax[1,0].annotate(annot+'%', xy=(female.values[i]+475,i), \n             fontsize=14, ha='center', va='center', color='black', fontweight='light')\n\nax[1,0].set_ylabel('PFIZER\/BIONTECH', fontsize=16)\nax[1,0].set_title('Female', fontsize=16)\n\nax[1,1].barh(male.index, width=male.values, color='#3FA6DA', edgecolor='dimgray')\nfor i in range(0,5):\n    ax[1,1].annotate(list(male.index)[i], xy=(male.values[i]-350,i), \n             fontsize=14, ha='center', va='center', color='white', fontweight='bold')\n    annot = round((male.values[i]\/mod['SEX'].value_counts()[1])*100, 2)\n    annot = annot.astype('str')\n    ax[1,1].annotate(annot+'%', xy=(male.values[i]+160,i), \n             fontsize=14, ha='center', va='center', color='black', fontweight='light')\n\nax[1,1].set_ylabel('PFIZER\/BIONTECH', fontsize=16)\nax[1,1].set_title('Male', fontsize=16)\n\n############################### JOHNSON and JOHNSON ########################################\n\nfemale = Jns[Jns['SEX'] == 'F']['SYMPTOM1'].value_counts(ascending=False).head(5).sort_values(ascending=True)\nmale = Jns[Jns['SEX'] == 'M']['SYMPTOM1'].value_counts(ascending=False).head(5).sort_values(ascending=True)\n\nax[2,0].barh(female.index, width=female.values, color='#F13699', edgecolor='dimgray')\n\nfor i in range(0,5):\n    ax[2,0].annotate(list(female.index)[i], xy=(female.values[i]-350,i), \n             fontsize=14, ha='center', va='center', color='white', fontweight='bold')\n    annot = round((female.values[i]\/mod['SEX'].value_counts()[0])*100, 2)\n    annot = annot.astype('str')\n    ax[2,0].annotate(annot+'%', xy=(female.values[i]+175,i), \n             fontsize=14, ha='center', va='center', color='black', fontweight='light')\n\nax[2,0].set_ylabel('JOHNSON & JOHNSON', fontsize=16)\nax[2,0].set_title('Female', fontsize=16)\n\nax[2,1].barh(male.index, width=male.values, color='#3FA6DA', edgecolor='dimgray')\nfor i in range(0,5):\n    ax[2,1].annotate(list(male.index)[i], xy=(male.values[i]-150,i), \n             fontsize=14, ha='center', va='center', color='white', fontweight='bold')\n    annot = round((male.values[i]\/mod['SEX'].value_counts()[1])*100, 2)\n    annot = annot.astype('str')\n    ax[2,1].annotate(annot+'%', xy=(male.values[i]+80,i), \n             fontsize=14, ha='center', va='center', color='black', fontweight='light')\n\nax[2,1].set_ylabel('JOHNSON & JOHNSON', fontsize=16)\nax[2,1].set_title('Male', fontsize=16)\n\nfor i in range(0,3):\n    for j in range(0,2):\n        ax[i,j].tick_params(axis='y', labelleft=False)\n        ax[i,j].tick_params(axis='x', bottom=False, labelbottom=False)\n        ax[i,j].spines['right'].set_visible(False)\n        ax[i,j].spines['top'].set_visible(False)\n        ax[i,j].spines['bottom'].set_visible(False)\n        ax[i,j].set_xlabel(\" \")\n\n\nplt.suptitle('Top 5 SYMPTOMS by SEX of 3 Vaccine Manufacturers', fontsize=18, fontweight='bold')\nplt.show()","cfbddf32":"############################## How many are effected? by Age and Sex ##########################\n\nfig, ax = plt.subplots(ncols=2, nrows=3, figsize=(16,22))\n\ncol=['sandybrown', 'greenyellow', 'aquamarine', 'indianred', 'lightpink']\n######################################## MODERNA ########################################\nmodDf = mod.groupby(['SEX']).AGE.value_counts().unstack()\nmodDf = pd.DataFrame(modDf)\nmodDf.drop('Unknown', axis=1, inplace=True)\nmodDf.drop('U', axis=0, inplace=True)\n\nlbl=([textwrap.fill(e, 10) for e in modDf.columns])\n\nax[0,0].pie(list(modDf[modDf.index == 'F'].values[0]), labels=lbl, autopct = '%1.1f%%',\n            textprops={'size': 'large'}, colors=col)\n           \nax[0,0].set_title('Female', fontsize=16, fontweight='bold')\nax[0,0].set_ylabel('MODERNA', fontsize=16)\nax[0,1].pie(list(modDf[modDf.index == 'M'].values[0]), labels=lbl, autopct = '%1.1f%%',\n            textprops={'size': 'large'}, colors=col)\nax[0,1].set_title('Male', fontsize=16, fontweight='bold')\nax[0,1].set_ylabel('MODERNA', fontsize=16)\n\n################################# PFIZER\/BIONTECH ##################################\n\npfDf = pf.groupby(['SEX']).AGE.value_counts().unstack()\npfDf = pd.DataFrame(pfDf)\npfDf.drop('Unknown', axis=1, inplace=True)\npfDf.drop('U', axis=0, inplace=True)\n\nlbl=([textwrap.fill(e, 10) for e in pfDf.columns])\n\nax[1,0].pie(list(pfDf[pfDf.index == 'F'].values[0]), labels=lbl, autopct = '%1.1f%%',\n            textprops={'size': 'large'}, colors=col)\nax[1,0].set_title('Female', fontsize=16, fontweight='bold')\nax[1,0].set_ylabel('PFIZER\/BIONTECH', fontsize=16)\nax[1,1].pie(list(pfDf[pfDf.index == 'M'].values[0]), labels=lbl, autopct = '%1.1f%%',\n            textprops={'size': 'large'}, colors=col)\nax[1,1].set_title('Male', fontsize=16, fontweight='bold')\nax[1,1].set_ylabel('PFIZER\/BIONTECH', fontsize=16)\n\n#################################### JOHNSON & JOHNSON ###################################\n\nJnsDf = Jns.groupby(['SEX']).AGE.value_counts().unstack()\nJnsDf = pd.DataFrame(JnsDf)\nJnsDf.drop('Unknown', axis=1, inplace=True)\nJnsDf.drop('U', axis=0, inplace=True)\n\nlbl=([textwrap.fill(e, 10) for e in JnsDf.columns])\n\nax[2,0].pie(list(JnsDf[JnsDf.index == 'F'].values[0]), labels=lbl, autopct = '%1.1f%%',\n            textprops={'size': 'large'}, colors=col)\nax[2,0].set_title('Female', fontsize=16, fontweight='bold')\nax[2,0].set_ylabel('JOHNSON & JOHNSON', fontsize=16)\n\nax[2,1].pie(list(JnsDf[JnsDf.index == 'M'].values[0]), labels=lbl, autopct = '%1.1f%%',\n            textprops={'size': 'large'}, colors=col)\nax[2,1].set_title('Male', fontsize=16, fontweight='bold')\nax[2,1].set_ylabel('JOHNSON & JOHNSON', fontsize=16)\n\nplt.suptitle('How many are affected by SEX and AGE', fontsize=16, fontweight='bold')\nplt.show()\n","afef4b79":"########### What are the worst 5 states affected and the least 5 states affected? ##########\n\nprint('There are in total {} states'.format(covidDf['STATE'].nunique()))\nprint('\\nWe shall look into the top 5 worst affected states and 5 least affected states by Vaccine Manufacturer')\n\nfig, ax = plt.subplots(nrows=3, ncols=2, figsize=(16,12))\n\ndf_bad = mod['STATE'].value_counts(ascending=False).head(5).sort_values(ascending=True)\ndf_good = mod['STATE'].value_counts(ascending=True).head(5).sort_values(ascending=False)\nax[0,0].barh(df_bad.index, width=df_bad.values, color='#F06A4E', edgecolor='darkgray')\n\nfor i in range(0,5):\n    ax[0,0].annotate(list(df_bad.index)[i], xy=(df_bad.values[i]-1000,i), \n             fontsize=14, ha='center', va='center', color='white', fontweight='bold')\nax[0,0].set_ylabel('MODERNA', fontsize=16)\nax[0,0].set_title('Most Affected States', fontsize=14)\n\nax[0,1].barh(df_good.index, width=df_good.values, color='#51D142', edgecolor='darkgray')\nfor i in range(0,5):\n    ax[0,1].annotate(list(df_good.index)[i], xy=(df_good.values[i]-0.20,i), \n             fontsize=14, ha='center', va='center', color='white', fontweight='bold')\nax[0,1].set_ylabel('MODERNA', fontsize=16)\nax[0,1].set_title('Least Affected States', fontsize=14)\n\n\ndf_bad = pf['STATE'].value_counts(ascending=False).head(5).sort_values(ascending=True)\ndf_good = pf['STATE'].value_counts(ascending=True).head(5).sort_values(ascending=False)\nax[1,0].barh(df_bad.index, width=df_bad.values, color='#F06A4E', edgecolor='darkgray')\n\nfor i in range(0,5):\n    ax[1,0].annotate(list(df_bad.index)[i], xy=(df_bad.values[i]-1000,i), \n             fontsize=14, ha='center', va='center', color='white', fontweight='bold')\nax[1,0].set_ylabel('PFIZER\/BIONTECH', fontsize=16)\nax[1,0].set_title('Most Affected States', fontsize=14)\n\nax[1,1].barh(df_good.index, width=df_good.values, color='#51D142', edgecolor='darkgray')\nfor i in range(0,5):\n    ax[1,1].annotate(list(df_good.index)[i], xy=(df_good.values[i]-0.75,i), \n             fontsize=14, ha='center', va='center', color='white', fontweight='bold')\nax[1,1].set_ylabel('PFIZER\/BIONTECH', fontsize=16)\nax[1,1].set_title('Least Affected States', fontsize=14)\n\n\ndf_bad = Jns['STATE'].value_counts(ascending=False).head(5).sort_values(ascending=True)\ndf_good = Jns['STATE'].value_counts(ascending=True).head(5).sort_values(ascending=False)\nax[2,0].barh(df_bad.index, width=df_bad.values, color='#F06A4E', edgecolor='darkgray')\n\nfor i in range(0,5):\n    ax[2,0].annotate(list(df_bad.index)[i], xy=(df_bad.values[i]-250,i), \n             fontsize=14, ha='center', va='center', color='white', fontweight='bold')\nax[2,0].set_ylabel('JOHNSON AND JOHNSON', fontsize=14)\nax[2,0].set_title('Most Affected States', fontsize=14)\n\nax[2,1].barh(df_good.index, width=df_good.values, color='#51D142', edgecolor='darkgray')\nfor i in range(0,5):\n    ax[2,1].annotate(list(df_good.index)[i], xy=(df_good.values[i]+2,i), \n             fontsize=14, ha='center', va='center', color='black', fontweight='light')\nax[2,1].set_ylabel('JOHNSON AND JOHNSON', fontsize=14)\nax[2,1].set_title('Least Affected States', fontsize=14)\n\n\nfor i in range(0,3):\n    for j in range(0,2):\n        ax[i,j].tick_params(axis='y', labelleft=False)\n        ax[i,j].tick_params(axis='x', bottom=False, labelbottom=False)\n        ax[i,j].spines['right'].set_visible(False)\n        ax[i,j].spines['top'].set_visible(False)\n        ax[i,j].spines['bottom'].set_visible(False)\n        ax[i,j].set_xlabel(\" \")\n\nplt.suptitle('Top 5 Worst Affected and Least Affected States', fontsize=20, fontweight='bold')\nplt.show()\n","9ea1130d":"################################################## Ratio of Hospitalization ############################################\n\nfig, ax = plt.subplots(ncols=3, nrows=1, figsize=(18,10))\nlabels='Hospitalized', 'Not Hospitalized'\nlbl=([textwrap.fill(e, 10) for e in labels])\ncol=['coral', 'darkturquoise']\n\nmodHosp = round(list((mod.HOSPITAL.value_counts().values\/mod.shape[0])*100)[0], 2)\nmodNoHosp = 100 - modHosp\nvalues=[modHosp, modNoHosp]\nax[0].pie(values, labels=labels, autopct = '%1.1f%%', textprops={'size': 'xx-large'}, colors=col,\n         wedgeprops = { 'linewidth' : 3, 'edgecolor' : 'white' }, labeldistance=1)\nax[0].set_title('MODERNA', fontsize=22, fontweight='bold')\n\npfHosp = round(list((pf.HOSPITAL.value_counts().values\/pf.shape[0])*100)[0], 2)\npfNoHosp = 100 - pfHosp\nvalues=[pfHosp, pfNoHosp]\nax[1].pie(values, labels=labels, autopct = '%1.1f%%', textprops={'size': 'xx-large'}, colors=col,\n         wedgeprops = { 'linewidth' : 3, 'edgecolor' : 'white' }, labeldistance=1)\nax[1].set_title('PFIZER\/BIONTECH', fontsize=22, fontweight='bold')\n\nJnsHosp = round(list((Jns.HOSPITAL.value_counts().values\/Jns.shape[0])*100)[0], 2)\nJnsNoHosp = 100 - JnsHosp\nvalues=[JnsHosp, JnsNoHosp]\nax[2].pie(values, labels=labels, autopct = '%1.1f%%', textprops={'size': 'xx-large'}, colors=col,\n         wedgeprops = { 'linewidth' : 3, 'edgecolor' : 'white' }, labeldistance=1)\nax[2].set_title('JOHNSON & JOHNSON', fontsize=22, fontweight='bold')\n\nplt.suptitle('% of Hospitalization among 3 Vaccine Manufacturers', fontsize=24, fontweight='bold')\nplt.show()","260b0a7a":"modHosp = mod[~mod.HOSPDAYS.isna()]\npfHosp = pf[~pf.HOSPDAYS.isna()]\nJnsHosp = Jns[~Jns.HOSPDAYS.isna()]","f862f412":"print('The statistics of Hospital Days are as follows:\\n')\nprint('For MODERNA')\nprint(modHosp.HOSPDAYS.describe())\nprint('For PFIZER\/BIONTECH')\nprint(pfHosp.HOSPDAYS.describe())\nprint('For JOHNSON & JOHNSON')\nprint(JnsHosp.HOSPDAYS.describe())","8c0f4930":"hosp_idx = modHosp[modHosp.HOSPDAYS >= 30].index\nmodHosp.drop(hosp_idx, inplace=True)\nage_idx = modHosp[modHosp.AGE == 'Unknown'].index\nmodHosp.drop(age_idx, inplace=True)\nsex_idx = modHosp[modHosp['SEX'] == 'U'].index\nmodHosp.drop(sex_idx, inplace=True)\n\nhosp_idx = pfHosp[pfHosp.HOSPDAYS >= 30].index\npfHosp.drop(hosp_idx, inplace=True)\nage_idx = pfHosp[pfHosp.AGE == 'Unknown'].index\npfHosp.drop(age_idx, inplace=True)\nsex_idx = pfHosp[pfHosp['SEX'] == 'U'].index\npfHosp.drop(sex_idx, inplace=True)\n\nhosp_idx = JnsHosp[JnsHosp.HOSPDAYS >= 30].index\nJnsHosp.drop(hosp_idx, inplace=True)\nage_idx = JnsHosp[JnsHosp.AGE == 'Unknown'].index\nJnsHosp.drop(age_idx, inplace=True)\nsex_idx = JnsHosp[JnsHosp['SEX'] == 'U'].index\nJnsHosp.drop(sex_idx, inplace=True)\n","6c8786a7":"fig, ax =plt.subplots(ncols=2, nrows=3, figsize=(16,12))\n\nsns.kdeplot(modHosp.HOSPDAYS, fill=True, alpha=0.6, hue = modHosp.SEX, \n                palette=('indianred', 'steelblue'), multiple='stack', ax=ax[0,0])\nsns.kdeplot(modHosp.HOSPDAYS, fill=True, alpha=0.8, hue = modHosp.AGE, \n                palette=('indianred', 'steelblue', 'greenyellow', 'pink', 'lightseagreen'), multiple='stack', ax=ax[0,1])\n\n\nsns.kdeplot(pfHosp.HOSPDAYS, fill=True, alpha=0.6, hue = pfHosp.SEX, \n                palette=('indianred', 'steelblue'), multiple='stack', ax=ax[1,0])\nsns.kdeplot(pfHosp.HOSPDAYS, fill=True, alpha=0.8, hue = pfHosp.AGE, \n                palette=('indianred', 'steelblue', 'greenyellow', 'pink', 'lightseagreen'), multiple='stack', ax=ax[1,1])\n\nsns.kdeplot(JnsHosp.HOSPDAYS, fill=True, alpha=0.6, hue = JnsHosp.SEX, \n                palette=('indianred', 'steelblue'), multiple='stack', ax=ax[2,0])\nsns.kdeplot(JnsHosp.HOSPDAYS, fill=True, alpha=0.8, hue = JnsHosp.AGE, \n                palette=('indianred', 'steelblue', 'greenyellow', 'pink', 'lightseagreen'), multiple='stack', ax=ax[2,1])\n\n\nfor i in range(0,3):\n    for j in range(0,2):\n        ax[i,j].tick_params(left=False, labelleft=False)\n        ax[i,j].set_xlabel('Days', fontsize=14)\n        ax[i,j].set_ylabel(' ')\n        #ax[i,j].spines['right'].set_visible(False)\n        ax[i,j].spines['top'].set_visible(False)\n        ax[i,j].spines['left'].set_visible(False)\n        \nax[0,0].set_ylabel('MODERNA', fontsize=16, fontweight='bold')\nax[0,1].set_ylabel('MODERNA', fontsize=16, fontweight='bold')\nax[1,0].set_ylabel('PFIZER\/BIONTECH', fontsize=16, fontweight='bold')\nax[1,1].set_ylabel('PFIZER\/BIONTECH', fontsize=16, fontweight='bold')\nax[2,0].set_ylabel('JOHNSON & JOHNSON', fontsize=16, fontweight='bold')\nax[2,1].set_ylabel('JOHNSON & JOHNSON', fontsize=16, fontweight='bold')\n   \nplt.suptitle('Density distribution of Hospital days by SEX and AGE', fontsize=24, fontweight='bold')\nplt.show()","3d1e4230":"Delete rows of data with more than 30 days of hospitalization and AGE = 'Unknown'. \nAlso drop the rows with 'Unknown' SEX.","8b6fa595":"The dataset contains 45.59% data of Moderna vaccine, 43.43% of Pfizer\/BioNTech vaccine and 10.74% of Janssen vaccine of Johnson and Johnson. There are 0.24% of data from unknown manufacturer. Since nothing is known about the manufacturer hence we delete these rows of data.","15118800":"The ratio of 23.1 and 24 MedDRA is beyond my scope.    \nIf anyone finds this useful then one can continue the study from here.   \nWe look at the top 10 symptoms of SYMPTOM1   ","746f71ef":"Hence we can remove the column along with VAERS_ID","aaaa68f4":"1.  We had observed earlier that more females suffered from Vaccine Adverse Events than males.  \n    Here, from the hospital stay density distribution, we see that more males required more\n    days in the hospital than females who took Moderna or Johnson & Johnson vaccines.\n2.  The 'Young Adults' in the age group of 18-45 yrs were hospitalized for most days who took \n    Pfizer\/BioNTech or Johnson & Johnson vaccines. Among people who took Moderna, the 'Senior Adult', \n    belonging to 45-60 years needed the most days in the hospital. ","678c130a":"AGE_YRS denotes the age of the patient.\nThe data has 29751 null values. We impute the null values with 0.\nThen we form an additional column by grouping the AGE_YRS as follows:  \n0 < AGE_YRS < 18 -- 'Child'  \n18 <= AGE_YRS < 45 -- 'Young Adult'  \n45 <= AGE_YRS < 60 -- 'Senior Adult'  \n60 <= AGE_YRS < 80 -- 'Senior Citizen' \n>= 80 -- 'Very Senior Citizen' The data according to age group are as follows: \n","d7aec055":"Now, we look at the days of stay at the hospital in case of adverse reactions by vaccines.  \nSince, not all hospitalization required a stay in the hospital hence we consider only those data that \nhas not null values in HOSPDAYS. ","7d256260":"So there are 5,45,000+ rows of data and 52 columns. We try to see the nature of columns and see if we need all of them.","ad308a3a":"A phenomenon to note:  \nThe 'Young Adult' of the age group 18-45 years are more likely to suufer an adverse vaccine reaction irrespective of the type of vaccine manufacturer.   \nAn alarming rate of 51.1% of those affected by Johnson and Johnson vaccine are Young Adults.","1b047b59":"# **COVID19 - VAERS EXPLORATORY DATA ANALYSIS**\n","405605a1":"We look into and analyse the downloadable VAERS public dataset for a period of 6 months - Jan 2021 to June 2021. ","d2ad4a84":"We separate out the data of 3 Vaccine Manufacturers and store them in DataFrames:-  \nmod - Moderna  \npf - Pfizer\/BioNTech  \nJns - Johnson & Johnson","9ad19aea":"Next, we visualise symptoms by Age and Sex.   \nHence we need to ensure not null values in these 2 columns.  ","302c31ab":"# OVERVIEW OF THE DATA","0595e475":"# LOADING REQUIRED LIBRARIES","3e7e7c58":"1.  'Young Adults' belonging to the age group of 18-45 years are most likely to experience\n    Vaccine Adverse Reactions.  \n2.  Most of the symtoms are common among the 3 vaccine manufacturers, namely  \n    Chills, Dizziness, Arthralgia(joint pain), Headache, Pyrexia(fever) etc  \n3.  More Females experienced Vaccine Adverse Events than Males  \n4.  CA, NY, TX, IN and FL are worst 5 states affected by all the 3 vaccines  \n5.  The 'Young Adults' in the age group of 18-45 yrs were hospitalized for most days who took\n    Pfizer\/BioNTech or Johnson & Johnson vaccines. Among people who took Moderna, the 'Senior Adult', \n    belonging to 45-60 years needed the most days in the hospital.","5130d4e0":" 1. The symptoms for Females and Males are different for Moderna and Pfizer\/BioNTech vaccines, while     they are same, but different in volumes, for Johnson & Johnson Vaccine.  \n 2. The top 5 symptoms are same for Females for vaccines of Moderna and Johnson & Johnson - \n    Chills, Dizziness, Arthalgia, Headache, Fatigue.   \n 3. There is an interesting symptom for Males who took Pfizer\/BioNTech vaccine - 3.13% of the Males       were infected with the virus 'Covid-19' against which they took the vaccine for.   \n 4. For both vaccines Moderna and Johnson & Johnson, the no 1 adverse reactions was experiencing        'Chills' by both Males and Females. ","cac5ca6e":"The fields described in the tables provide the adverse event coded terms utilizing the MedDRA dictionary. There can be an unlimited amount of coded terms for a given event. Each row in the tables will contain up to 5 MedDRA terms per patient.","2e8edea1":"![image.png](attachment:26acc0cc-807a-4184-8fe5-93d76adc617c.png)","1e79bfc3":"1. For all 3 vaccines, the most affected age group are'Young Adult' ranging from 18 to 45 years.  \n2. Almost 50% affected by Johnson & Johnson vaccine fall in the age group of 18 to 45 years.  \n   This is alarming.","6e0f5d2f":"After deleting the Unknown Vaccine Manufacturer, now we have the data comprising 45.7% Moderna, 43.53% Pfizer\/BioNTech and 10.77% Janssen.\n\nWe start by analyzing the age of the patients.","00f685a9":"There are 2 MedDRA event coded terms of symptoms in 'SYMPTOM1'.  \nThey are 23.1 and 24.     \nThe ratio of them for the 3 vaccine manufacturers are as follows   ","5e11d508":"Now let's look at the data that required hospitalisation","1e98f5db":"Most of the symtoms are common among the 3 vaccine manufacturers, namely   \nChills, Dizziness, Arthralgia(joint pain), Headache, Pyrexia(fever) etc","e9b27ab8":"The Vaccine Adverse Event Reporting System (VAERS) was created by the Food and Drug Administration (FDA) and Centers for Disease Control and Prevention (CDC) to receive reports about adverse events that may be associated with vaccinesThe U.S. Department of Health and Human Services (DHHS) established VAERS, which is co-administered by the Food and Drug Administration (FDA) and the Centers for Disease Control (CDC), to accept all reports of suspected adverse events, in all age groups, after the administration of any U.S. licensed vaccine.\nAll reports are coded and entered to the VAERS database. The adverse events described in each report were coded utilizing the FDA's Coding Symbols called the Medical Dictionary for Regulatory Activities (MedDRA).","8c30a399":"The % of hospitalization are less than 10% for each of the 3 Vaccine Manufacturers.  \nmaximum hospitalization happened with people who took Pfizer\/BioNTech vaccine, which is 9.7%.","70f40bab":"# **EXPLORING DATA THROUGH VISUALS AND ANALYZING**","cd9712ea":"We notice an important phenomenon -- More females suffered from Vaccine Adverse Events than males.   \nThis is true for all the 3 vaccines.   \nLets see age-wise distribution of males and females, only, after ignoring the 'Unknown'.","92355f1f":"CA, NY, TX, IN and FL are worst 5 states affected by all the 3 vaccines. One reason might be that all the 5 states are heavily populated and hence the absolute number of vaccinations and the adverse affects(if any) are higher than rest of the States.\nThis is an interesting phenomenon and needs further study on the ratio of affected with respect to the population of the states.","d5223228":"# **CONCLUSION** "}}