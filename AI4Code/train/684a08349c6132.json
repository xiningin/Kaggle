{"cell_type":{"15dc3b42":"code","b1bb62a2":"code","22f55104":"code","921a1a01":"code","0965b9da":"code","a5388c69":"code","182df93f":"code","737b6ac9":"code","5d0f803e":"code","8da6fb30":"code","d4473e86":"code","b34f3e25":"code","ecffc024":"code","e7e2e19c":"code","15e62a42":"code","4d7361e4":"code","4ccc8eba":"code","a27295c4":"code","a2e03b9a":"code","4415bf5a":"code","261e97ed":"code","0dddbf1c":"code","3a4fe7ca":"code","4aad1e5a":"code","815f9b17":"code","89a0638c":"code","8f57dd1e":"code","8d7f793b":"code","0ba0da74":"code","2b301473":"code","68051486":"code","8f7571e1":"code","03fc36cc":"code","af412110":"code","977b71d7":"code","1802ee05":"markdown","8bbe4eb0":"markdown","bb4cdf89":"markdown","2e462348":"markdown","2f4b39f0":"markdown","7321d66a":"markdown","0837ffbb":"markdown","74410d4d":"markdown","6d5a6795":"markdown","b9c5a3ba":"markdown","e6613ade":"markdown","5272552c":"markdown","be055917":"markdown","dc67d4f6":"markdown","a3fbd09d":"markdown","8584e51b":"markdown","9f1c8abc":"markdown","efc477ca":"markdown","ec334386":"markdown","6d1eefb7":"markdown","45ed9e4d":"markdown","bf1abe28":"markdown"},"source":{"15dc3b42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport seaborn as sns\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import train_test_split, cross_validate, GridSearchCV","b1bb62a2":"base = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")","22f55104":"np.random.seed(42)","921a1a01":"base.head()","0965b9da":"sns.barplot(base.Outcome, base.Outcome.value_counts());\nplt.grid()","a5388c69":"base.describe().T","182df93f":"sns.pairplot(base, hue=\"Outcome\", vars=base.columns[1:-1])\nplt.show()","737b6ac9":"na_columns = [\"Glucose\", \"BloodPressure\", \"SkinThickness\", \"Insulin\", \"BMI\"]\nbase[na_columns] = base[na_columns].replace(0, np.nan)","5d0f803e":"base.isna().mean() * 100","8da6fb30":"df = base.copy()\n\nfor column in [\"Glucose\", \"SkinThickness\", \"Insulin\"]:\n    median_0 = base[column][base[\"Outcome\"] == 0].median()\n    median_1 = base[column][base[\"Outcome\"] == 1].median()\n    \n    df[column][df[\"Outcome\"] == 0] = base[column][df[\"Outcome\"] == 0].fillna(median_0)\n    df[column][df[\"Outcome\"] == 1] = base[column][df[\"Outcome\"] == 1].fillna(median_1)","d4473e86":"df.BloodPressure.fillna(df.BloodPressure.median(), inplace=True)\ndf.BMI.fillna(df.BMI.median(), inplace=True)","b34f3e25":"X = df.drop(\"Outcome\", axis=1)\nX.head()","ecffc024":"y = df.Outcome\ny.head()","e7e2e19c":"f1 = metrics.make_scorer(metrics.f1_score)\naccuracy = metrics.make_scorer(metrics.accuracy_score)\nprecision = metrics.make_scorer(metrics.precision_score)\nrecall = metrics.make_scorer(metrics.recall_score)\nauc = metrics.make_scorer(metrics.roc_auc_score)","15e62a42":"scoring = {\n    \"accuracy\": accuracy,\n    \"precision\": precision,\n    \"recall\": recall,\n    \"f1\": f1\n}","4d7361e4":"def printResults(cv):\n    print(\"Accuracy  {:.3f} ({:.3f})\".format(cv[\"test_accuracy\"].mean(), cv[\"test_accuracy\"].std()))\n    print(\"Precision {:.3f} ({:.3f})\".format(cv[\"test_precision\"].mean(), cv[\"test_precision\"].std()))\n    print(\"Recall    {:.3f} ({:.3f})\".format(cv[\"test_recall\"].mean(), cv[\"test_recall\"].std()))\n    print(\"F1        {:.3f} ({:.3f})\".format(cv[\"test_f1\"].mean(), cv[\"test_f1\"].std()))","4ccc8eba":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)","a27295c4":"gbc = GradientBoostingClassifier()","a2e03b9a":"gbc.fit(X_train, y_train)","4415bf5a":"y_pred = gbc.predict(X_test)","261e97ed":"print(metrics.classification_report(y_test, y_pred))","0dddbf1c":"cm = metrics.confusion_matrix(y_test, y_pred)\nsns.heatmap(cm, annot=True, cmap=\"Blues\");","3a4fe7ca":"cv_gbc = cross_validate(gbc, X, y, scoring=scoring, cv=5)","4aad1e5a":"printResults(cv_gbc)","815f9b17":"params = {\n    \"loss\": [\"deviance\", \"exponential\"],\n    \"learning_rate\": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    \"n_estimators\": [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n}\n\ngs = GridSearchCV(estimator=gbc, param_grid=params, cv=5)","89a0638c":"gs.fit(X, y)","8f57dd1e":"gs.best_score_","8d7f793b":"gs.best_params_","0ba0da74":"gbc_best = GradientBoostingClassifier(learning_rate=0.2, loss='exponential', n_estimators=100)","2b301473":"gbc_best.fit(X_train, y_train)","68051486":"y_pred = gbc_best.predict(X_test)","8f7571e1":"print(metrics.classification_report(y_test, y_pred))","03fc36cc":"cm = metrics.confusion_matrix(y_test, y_pred)\nsns.heatmap(cm, annot=True, cmap=\"Blues\");","af412110":"cv_gbc_best = cross_validate(gbc_best, X, y, cv=5, scoring=scoring)","977b71d7":"printResults(cv_gbc_best)","1802ee05":"# Model Tuning - GradientBoostingClassifier","8bbe4eb0":"# About\n\nThis is a database about diabetes in India. \n\n__Columns__\n* Pregnancies - Number of times pregnant\n* Glucose - Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n* BloodPressure - Diastolic blood pressure (mm Hg)\n* SkinThickness - Triceps skin fold thickness (mm)\n* Insulin - 2-Hour serum insulin (mu U\/ml)\n* BMI - Body mass index (weight in kg\/(height in m)^2)\n* DiabetesPedigreeFunction - Diabetes pedigree function\n* Age - Age (years)\n* Outcome - Class variable (0 or 1) 268 of 768 are 1, the others are 0","bb4cdf89":"Replacing 0 to NaN values of the columns. I didn't change the Pregnancies column, because it might be a man.","2e462348":"Creating metrics for evaluation","2f4b39f0":"## Classification Report","7321d66a":"Spliting into train and test","0837ffbb":"## Classification Report","74410d4d":"# Data Exploration","6d5a6795":"## Cross Validation","b9c5a3ba":"I'll create a simple model ","e6613ade":"## Confusion Matrix","5272552c":"Glucose, Insulin and Skin Thickness may have something to do with diabetes. So I will fill NaN values with their median.","be055917":"A pairplot to see the attributes","dc67d4f6":"# Importing","a3fbd09d":"Verifing Outcome numbers","8584e51b":"The percentage of NaN values","9f1c8abc":"## Confusion Matrix","efc477ca":"## Cross Validation","ec334386":"   # GradientBoostingClassifier Model","6d1eefb7":"Spliting into X and y variables","45ed9e4d":"Simple Train and Test Split to predict and evaluate","bf1abe28":"There are some 0 variables. It can indicate they are NaN values."}}