{"cell_type":{"1899367b":"code","c6768b61":"code","21d7ebc1":"code","3d8b8436":"code","1dae9bda":"code","168e1398":"code","a0cc55d5":"code","c913f725":"code","ff19dffc":"code","b013301a":"code","e4b7c12f":"code","8c54bd04":"code","ccbf73da":"code","f5be62cb":"code","fce6c76a":"code","2763032e":"code","86f3f546":"code","4d87e01c":"code","da5b01a3":"code","018afdab":"code","b4af8fd8":"code","1d29aeb7":"code","0565a6ce":"code","3398634b":"code","e32865d2":"code","b355939f":"code","f42324ea":"code","112fad06":"code","3558dc31":"code","c1fb49a4":"code","8bef10fb":"code","3b3b3b54":"code","0e59035d":"code","6c9760a4":"code","891cac9b":"code","b1f40d66":"markdown","f721bee7":"markdown","361c6999":"markdown","963d678c":"markdown","59887d67":"markdown","fc48c957":"markdown","0c78500b":"markdown","818664aa":"markdown","ca43f5a7":"markdown","18b87dca":"markdown","1fbc8864":"markdown","79250426":"markdown","fc473542":"markdown","4664cf61":"markdown","1fab1b07":"markdown","6f6182ea":"markdown","ce0015b5":"markdown","edc21d0f":"markdown","cf18cdbe":"markdown","48ac908f":"markdown","a0bb1314":"markdown","dfa174e2":"markdown","685bd67f":"markdown","cc14ad05":"markdown","265c06c1":"markdown","23487132":"markdown","886ba3cf":"markdown","4b5fdee1":"markdown","6d2a85ed":"markdown","f7137c48":"markdown","6f91c8e9":"markdown","302112ae":"markdown","19693123":"markdown","7e999998":"markdown","2bce9176":"markdown","b82c0735":"markdown","02a4a18a":"markdown","59e434c5":"markdown","a6dd153a":"markdown"},"source":{"1899367b":"#Importering av moduler och paket, med f\u00f6rdefinierade funktioner\nimport string\nimport re\n\n#Datamanipulation\nimport numpy as np\nimport pandas as pd\n\n#Data visualization\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab\nimport seaborn as sns\n\nfrom pandas.api.types import is_string_dtype\nfrom pandas.api.types import is_numeric_dtype\nimport plotly as py\nimport plotly.graph_objs as go\n\n#display properties\npd.set_option(\"display.max_columns\", 100)\npd.set_option(\"display.max_rows\", 100)\n\n#Date\nimport datetime\n\n\nfrom math import pi\nimport os","c6768b61":"#L\u00e4s in fil med FIFA-data\n\ndef seasons (start, end):\n    start = int(start)\n    end = int(end)\n    seasons = []\n    while start < end:\n        if start < 10:\n            seasons.append(\"0\"+str(start)+str((int(start)+1)))\n            start = (int(start)+1)\n        else:\n             seasons.append(str(start)+str((int(start)+1)))\n             start = (int(start)+1)\n    dfs = []\n    for season in seasons:\n        importstring = r\"..\/input\/season-\"+str(season)+\"_csv.csv\"\n        df = pd.read_csv(importstring, sep=\",\", engine=\"python\")\n        df[\"Season\"] = season\n        dfs.append(df)\n    df = pd.concat(dfs, sort=True)\n    return df\n        \ndf = seasons(\"1993\", \"2019\")","21d7ebc1":"#----------------------------------- Cleaning original data\n#One instance of Middlesbrough written Middlesboro\ndf = df.replace({\"Middlesboro\": \"Middlesbrough\"}, regex=True)\n\n#print(df.info())\n#There is missing alot of values in a few of the odds-columns, so we can drop all that are missing 100+, and div because it\"s all div 1\n\ndf = df.drop([\"Div\", \"BSA\", \"BSD\", \"BSH\", \"GBA\", \"GBD\", \"GBH\", \"LBA\",\n              \"LBD\",\"LBH\", \"PSA\", \"PSCA\", \"PSCD\", \n              \"PSCH\", \"PSD\", \"PSH\", \"SBA\", \"SBD\", \"SBH\", \"SJA\", \"SJD\", \"SJH\"], axis=1)\n\n\n#Only missing one entry (from -09) in BWA, BWD, BWH, IWA, IWD, IWH and only missing 10 entrys in BbA (unt so weiter)\n#Fill the missing values with the mean for each column for now -> The smarter choice is probably to just drop them since they will probably \n    # only be used for creating a maching learning model later on.\n    \n\n#print(df.columns)\n#----------------Renaming existing columns\ndf = df[[\"Season\",\"Date\", \"HomeTeam\", \"AwayTeam\", \"Referee\", \n         \"FTAG\", \"FTHG\", \"FTR\", \"HTAG\", \"HTHG\", \"HTR\", \"HC\", \"HF\", \"HR\", \"HS\", \"HST\",\n       \"HY\",  \"AC\", \"AF\", \"AR\", \"AS\", \"AST\", \"AY\", \n       \"B365A\", \"B365D\",\n       \"B365H\", \"BWA\", \"BWD\", \"BWH\", \"Bb1X2\", \"BbAH\", \"BbAHh\", \"BbAv<2.5\",\n       \"BbAv>2.5\", \"BbAvA\", \"BbAvAHA\", \"BbAvAHH\", \"BbAvD\", \"BbAvH\", \"BbMx<2.5\",\n       \"BbMx>2.5\", \"BbMxA\", \"BbMxAHA\", \"BbMxAHH\", \"BbMxD\", \"BbMxH\", \"BbOU\",\n        \"IWA\", \"IWD\", \"IWH\", \"VCA\", \"VCD\", \"VCH\", \"WHA\", \"WHD\", \"WHH\"]]\ndfHeaders = [\"Season\",\"Date\", \"HomeTeam\", \"AwayTeam\", \"Referee\", \n         \"FT_AwayGoals\", \"FT_HomeGoals\", \"FT_Result\", \"HT_AwayGoals\", \"HT_HomeGoals\", \"HT_Result\", \n         \"HomeCorners\", \"HomeFouls\", \"HomeRedcards\", \"HomeShots\", \"HomeShotsOnTarget\",\n        \"HomeYellowcards\",  \"AwayCorners\", \"AwayFouls\", \"AwayRedcards\",\n       \"AwayShots\", \"AwayShotsOnTarget\", \"AwayYellowcards\", \n       \"B365A\", \"B365D\",\n       \"B365H\", \"BWA\", \"BWD\", \"BWH\", \"Bb1X2\", \"BbAH\", \"BbAHh\", \"BbAv<2.5\",\n       \"BbAv>2.5\", \"BbAvA\", \"BbAvAHA\", \"BbAvAHH\", \"BbAvD\", \"BbAvH\", \"BbMx<2.5\",\n       \"BbMx>2.5\", \"BbMxA\", \"BbMxAHA\", \"BbMxAHH\", \"BbMxD\", \"BbMxH\", \"BbOU\",\n        \"IWA\", \"IWD\", \"IWH\", \"VCA\", \"VCD\", \"VCH\", \"WHA\", \"WHD\", \"WHH\"]\ndf.columns = dfHeaders\ndel dfHeaders\n\n#-----------------------Create columns with 1's 0 zeros for the result\ndf[\"FT_HomeWin\"] = df[\"FT_Result\"].apply(lambda result: 1 if result == \"H\" else  0)\ndf[\"HT_HomeWin\"] = df[\"HT_Result\"].apply(lambda result: 1 if result == \"H\" else 0)\ndf[\"FT_HomeDraw\"] = df[\"FT_Result\"].apply(lambda result: 1 if result == \"D\" else 0)\ndf[\"HT_HomeDraw\"] = df[\"HT_Result\"].apply(lambda result: 1 if result == \"D\" else 0)\ndf[\"FT_HomeLoss\"] = df[\"FT_Result\"].apply(lambda result: 1 if result == \"A\" else 0)\ndf[\"HT_HomeLoss\"] = df[\"HT_Result\"].apply(lambda result: 1 if result == \"A\" else 0)\ndf[\"FT_AwayWin\"] = df[\"FT_Result\"].apply(lambda result: 1 if result == \"A\" else 0)\ndf[\"HT_AwayWin\"] = df[\"HT_Result\"].apply(lambda result: 1 if result == \"A\" else 0)\ndf[\"FT_AwayDraw\"] = df[\"FT_Result\"].apply(lambda result: 1 if result == \"D\" else 0)\ndf[\"HT_AwayDraw\"] = df[\"HT_Result\"].apply(lambda result: 1 if result == \"D\" else 0)\ndf[\"FT_AwayLoss\"] = df[\"FT_Result\"].apply(lambda result: 1 if result == \"H\" else 0)\ndf[\"HT_AwayLoss\"] = df[\"HT_Result\"].apply(lambda result: 1 if result == \"H\" else 0)\ndf[\"FT_HomeConceded\"] = df[\"FT_AwayGoals\"]\ndf[\"HT_HomeConceded\"] = df[\"HT_AwayGoals\"]\ndf[\"FT_AwayConceded\"] = df[\"FT_HomeGoals\"]\ndf[\"HT_AwayConceded\"] = df[\"HT_HomeGoals\"]\n\n#-------Creating dates that are easier to use.--------------\nA = df[\"Date\"].str.split(\"-\", expand = True)\nAHeaders = [\"Year\", \"Month\", \"Day\"]\nA.columns = AHeaders\nA = A[A[\"Year\"].str.len() < 5]\nB = df[\"Date\"].str.split(\"\/\", expand = True)\nB = B[[2, 1, 0]]\nB.columns = AHeaders\nB = B[B[\"Day\"].str.len() < 5]\nAB = [A, B]\nA = pd.concat(AB, sort=True)\nA[\"Year\"] = A[\"Year\"].apply(lambda year: year if len(year) > 3 \n                                  else \"19\"+year if int(year) > 92\n                                  else \"20\"+year)\n#A[\"Year\"] = A[\"Year\"].str[-2:]\n#\u00c4ndra det h\u00e4r s\u00e5 att det \u00e4r 4 siffror i \u00e5r\nA = A.sort_values([\"Year\", \"Month\", \"Day\"])\ndf = pd.concat([df, A], axis=1)\ndf = df.drop(\"Date\", axis=1)\n\ndel A\ndel B\ndel AHeaders\n\n\n#------------Fix the Referee column to only include last name.\nA = df[\"Referee\"].str.split(\" \", expand = True)\nfor col in A.columns:\n    A[col] = A[col].apply(lambda col: col if len(str(col)) > 2 else np.nan)\n    \nfor col in A.columns:\n    A[col] = A[col].apply(lambda col: col if col != None else np.nan)\n    \nA[1] = A[1].fillna(A[2])\ndel A[2]\nA[1] = A[1].fillna(A[0])\ndf[\"Referee\"] = A[1]\ndel A\ndel col\n\ndf[\"Referee\"] = df[\"Referee\"].apply(lambda name: \"Elleray\" if (name == \"Ellaray\") \n                                  else \"Gallagher\" if (name == \"Gallagh\") or (name == \"Gallaghe\")\n                                  else name)","3d8b8436":"#----------------------Some lists to not where there is missing data-------------------\n\nNoHTScore = ['19931994', '19941995']\nNoDeepStats = ['19931994', '19941995', '19951996', '19961997', '19971998', '19981999',\n '19992000']\n\n#---------------------------------------------------------\n#-----Create new dataframe for full seasons--------------\n\ndef TableDataFrame(df): \n   HomeHeaders = [\"FT_HomeWin\", \"HT_HomeWin\", \"FT_HomeDraw\", \"HT_HomeDraw\",\n           \"FT_HomeLoss\", \"HT_HomeLoss\", \"FT_HomeGoals\", \"HT_HomeGoals\", \"FT_HomeConceded\", \"HT_HomeConceded\", \n              \"HomeCorners\", \"HomeFouls\", \"HomeRedcards\", \"HomeShots\", \"HomeShotsOnTarget\",\"HomeYellowcards\"]\n   df_temp1 = pd.DataFrame()\n   for Header in HomeHeaders:   \n       df_temp1[Header] = df.groupby([\"Season\", \"HomeTeam\"])[Header].sum()\n   del HomeHeaders\n   AwayHeaders = [\"FT_AwayWin\", \"HT_AwayWin\", \"FT_AwayDraw\",\n           \"HT_AwayDraw\", \"FT_AwayLoss\", \"HT_AwayLoss\", \"FT_AwayGoals\", \"HT_AwayGoals\", \"FT_AwayConceded\", \"HT_AwayConceded\", \n           \"AwayCorners\", \"AwayFouls\", \"AwayRedcards\", \"AwayShots\", \"AwayShotsOnTarget\",\"AwayYellowcards\"]\n   df_temp2 = pd.DataFrame()\n   for Header in AwayHeaders:   \n       df_temp2[Header] = df.groupby([\"Season\", \"AwayTeam\"])[Header].sum()\n   del AwayHeaders\n   del Header   \n   df_temp = pd.concat([df_temp1, df_temp2], axis=1)\n   del df_temp1\n   del df_temp2  \n   df_temp[\"HomePoints\"] = (3*df_temp[\"FT_HomeWin\"])+(df_temp[\"FT_HomeDraw\"])\n   df_temp[\"AwayPoints\"] = (3*df_temp[\"FT_AwayWin\"])+(df_temp[\"FT_AwayDraw\"])\n   df_temp[\"TotalPoints\"] = df_temp[\"HomePoints\"] + df_temp[\"AwayPoints\"]\n   df_temp[\"FT_TotalGoals\"] =  df_temp[\"FT_HomeGoals\"] + df_temp[\"FT_AwayGoals\"]\n   df_temp[\"FT_TotalConceded\"] =  df_temp[\"FT_HomeConceded\"] + df_temp[\"FT_AwayConceded\"]\n   df_temp[\"FT_GoalDifference\"] =  df_temp[\"FT_TotalGoals\"] - df_temp[\"FT_TotalConceded\"]\n   df_temp[\"HT_TotalGoals\"] =  df_temp[\"HT_HomeGoals\"] + df_temp[\"HT_AwayGoals\"]\n   df_temp[\"HT_TotalConceded\"] =  df_temp[\"HT_HomeConceded\"] + df_temp[\"HT_AwayConceded\"]\n   df_temp[\"HT_GoalDifference\"] =  df_temp[\"HT_TotalGoals\"] - df_temp[\"HT_TotalConceded\"]\n   df_temp.reset_index(level=0, inplace=True)\n   df_temp.reset_index(level=0, inplace=True)\n   #----------------------------------------------------------------------\n   #Create a column that shows which place each team finished in the table each season\n   #----------------------------------------------------------------------\n   df_temp[\"Season\"] = df_temp[\"Season\"].astype(int)\n   df_temp.sort_values([\"Season\", \"TotalPoints\", \"FT_GoalDifference\", \"FT_TotalGoals\"], ascending=[True, False, False, False], inplace=True)\n   seasons = df_temp[\"Season\"].unique().tolist()\n   placelist = []\n   for season in seasons:\n       teams = df_temp[df_temp.Season == season][\"HomeTeam\"].unique().tolist()\n       placement = 0\n       lst = []\n       for team in teams:\n           placement = placement + 1\n           lst.append(placement)\n       placelist.extend(lst)\n   df_temp[\"Placement\"] = placelist\n   del lst\n   del placelist\n   del placement\n   del season\n   del seasons\n   del team\n   del teams\n\n   return df_temp\ndf2 = TableDataFrame(df)\n","1dae9bda":"def show_values_on_bars(axs):\n    def _show_on_single_plot(ax):        \n        for p in ax.patches:\n            _x = p.get_x() + p.get_width() \/ 2\n            _y = p.get_y() + p.get_height()\n            value = '{:.0f}'.format(p.get_height())\n            ax.text(_x, _y, value, ha=\"center\") \n\n    if isinstance(axs, np.ndarray):\n        for idx, ax in np.ndenumerate(axs):\n            _show_on_single_plot(ax)\n    else:\n        _show_on_single_plot(axs)   \n#------------------------------------------------------------------------\n\ndf2 = TableDataFrame(df)\n\n#--------------Create Dataframe for top 6 teams--------------------------\nTop6 = ['Arsenal','Chelsea', 'Liverpool', 'Man City', 'Man United', 'Tottenham']\ndf_top6 = df[df.HomeTeam.isin(Top6) & df.AwayTeam.isin(Top6)]\n#-----------------------------------------------------------------------\n\n#-----------------------------------------------------------------------\n#---------------------Plots---------------------------------------------\n#---------- Heat Map\n\n\ndef Heatmap(DF, Label =\"Heatmap\", cmap = sns.diverging_palette(250, 10, n=9, as_cmap=True)):\n    corr = DF.corr()\n    \n    mask = mask = np.zeros_like(corr, dtype=np.bool)\n    mask[np.triu_indices_from(mask)] = True\n    \n    plt.figure()\n    plt.rcParams[\"figure.figsize\"]=(25,16)\n    HeatMap = sns.heatmap(corr, annot = True, linewidths=.6, cmap=cmap, mask=mask)\n    HeatMap.set_title(label=Label, fontsize=20)\n    \n    return HeatMap;","168e1398":"plt.figure()\nplt.rcParams[\"figure.figsize\"] = (15,10)\nHeatmap(df[['FT_AwayGoals', 'FT_HomeGoals', 'FT_Result', 'HT_AwayGoals', 'HT_HomeGoals',\n       'HT_Result', 'HomeCorners', 'HomeFouls', 'HomeRedcards', 'HomeShots',\n       'HomeShotsOnTarget', 'HomeYellowcards', 'AwayCorners', 'AwayFouls',\n       'AwayRedcards', 'AwayShots', 'AwayShotsOnTarget', 'AwayYellowcards',]])\n","a0cc55d5":"sns.pairplot(df[~df.Season.isin(NoDeepStats)], x_vars=[\"FT_HomeGoals\", \"FT_AwayGoals\", \"HomeFouls\", \"HomeRedcards\", \"HomeYellowcards\", \"AwayFouls\", \"AwayRedcards\", \"AwayYellowcards\"]\n                    , y_vars=[\"FT_HomeGoals\", \"FT_AwayGoals\", \"HomeFouls\", \"HomeRedcards\", \"HomeYellowcards\", \"AwayFouls\", \"AwayRedcards\", \"AwayYellowcards\"]\n                    , kind=\"reg\" ,diag_kind = 'hist' );","c913f725":"sns.pairplot(df[~df.Season.isin(NoDeepStats)], x_vars=[\"FT_HomeGoals\", \"FT_AwayGoals\", \"HomeCorners\", \"HomeShots\", \"HomeShotsOnTarget\", \"AwayCorners\", \"AwayShots\", \"AwayShotsOnTarget\"]\n                    , y_vars=[\"FT_HomeGoals\", \"FT_AwayGoals\", \"HomeCorners\", \"HomeShots\", \"HomeShotsOnTarget\", \"AwayCorners\", \"AwayShots\", \"AwayShotsOnTarget\"]\n                    , kind=\"reg\",diag_kind = 'hist'); ","ff19dffc":"plt.figure(figsize=(10,10))\ndf.FT_Result.value_counts().plot.pie(autopct='%1.1f%%',shadow=True,cmap='Pastel1')\n","b013301a":"plt.figure(figsize=(25,10))\ndf3 = pd.DataFrame(df2.groupby('HomeTeam')['TotalPoints'].sum()).reset_index()\ndf3.sort_values([\"TotalPoints\"], ascending=[False], inplace=True)\ng = sns.barplot(x=\"HomeTeam\", y=\"TotalPoints\", data=df3)\nplt.xticks(rotation=90)\nshow_values_on_bars(g)\nplt.show()","e4b7c12f":"df3 = pd.DataFrame(df2.groupby('HomeTeam')['TotalPoints', \"FT_HomeWin\", \"FT_HomeDraw\", \"FT_HomeLoss\", \n                   \"FT_AwayWin\", \"FT_AwayDraw\", \"FT_AwayLoss\", \"FT_GoalDifference\", 'FT_TotalGoals'].sum()).reset_index()\ndf3[\"Win\"] = df3[\"FT_HomeWin\"] + df3[\"FT_AwayWin\"]\ndf3[\"Draw\"] = df3[\"FT_HomeDraw\"] + df3[\"FT_AwayDraw\"]\ndf3[\"Loss\"] = df3[\"FT_HomeLoss\"] + df3[\"FT_AwayLoss\"]\ndf3[\"NoGames\"] = df3[\"Win\"] + df3[\"Draw\"] + df3[\"Loss\"]\ndf3.sort_values([\"TotalPoints\", \"FT_GoalDifference\"], ascending=[False, False], inplace=True)\n\nprint(df3[[\"HomeTeam\", \"TotalPoints\", \"NoGames\", \"Win\", \"Draw\", \"Loss\",\"FT_GoalDifference\"]])","8c54bd04":"g = sns.catplot(\"HomeTeam\", data=df2, kind=\"count\", order = df2['HomeTeam'].value_counts().index)\ng.set_xticklabels(rotation=270)\ng.fig.set_size_inches(25,20)","ccbf73da":"df2['Season'] = df2['Season'].astype(str)\nplt.figure(figsize=(25,10))\nplt.plot( 'Season', 'Placement', data=df2.query(\"HomeTeam == 'Chelsea'\"), marker='o', markerfacecolor='blue', markersize=12, color='skyblue', linewidth=4, label=\"Chelsea\")\nplt.plot( 'Season', 'Placement', data=df2.query(\"HomeTeam == 'Arsenal'\"), marker='o', markerfacecolor='white', markersize=12, color='red', linewidth=4, label=\"Arsenal\")\nplt.plot( 'Season', 'Placement', data=df2.query(\"HomeTeam == 'Man City'\"), marker='o', markerfacecolor='white', markersize=12, color='teal', linewidth=4, label=\"Man City\")\nplt.plot( 'Season', 'Placement', data=df2.query(\"HomeTeam == 'Tottenham'\"), marker='o', markerfacecolor='white', markersize=12, color='grey', linewidth=4, label=\"Tottenham\")\nplt.plot( 'Season', 'Placement', data=df2.query(\"HomeTeam == 'Man United'\"), marker='o', markerfacecolor='black', markersize=12, color='red', linewidth=4, label=\"Man United\")\nplt.plot( 'Season', 'Placement', data=df2.query(\"HomeTeam == 'Liverpool'\"), marker='o', markerfacecolor='red', markersize=12, color='red', linewidth=4, label=\"Liverpool\")\nplt.xticks(rotation=45)\nplt.gca().invert_yaxis()\nplt.yticks([20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1])\nplt.legend()","f5be62cb":"HomeHeaders = [\"FT_HomeWin\", \"HT_HomeWin\", \"FT_HomeDraw\", \"HT_HomeDraw\",\n           \"FT_HomeLoss\", \"HT_HomeLoss\", \"FT_HomeGoals\", \"HT_HomeGoals\", \"FT_HomeConceded\", \"HT_HomeConceded\", \n              \"HomeCorners\", \"HomeFouls\", \"HomeRedcards\", \"HomeShots\", \"HomeShotsOnTarget\",\"HomeYellowcards\"]\ndf_temp1 = pd.DataFrame()\nfor Header in HomeHeaders:   \n    df_temp1[Header] = df[~df.Season.isin(NoDeepStats)].groupby([\"Season\"])[Header].sum()\ndel HomeHeaders\nAwayHeaders = [\"FT_AwayWin\", \"HT_AwayWin\", \"FT_AwayDraw\",\n           \"HT_AwayDraw\", \"FT_AwayLoss\", \"HT_AwayLoss\", \"FT_AwayGoals\", \"HT_AwayGoals\", \"FT_AwayConceded\", \"HT_AwayConceded\", \n           \"AwayCorners\", \"AwayFouls\", \"AwayRedcards\", \"AwayShots\", \"AwayShotsOnTarget\",\"AwayYellowcards\"]\ndf_temp2 = pd.DataFrame()\nfor Header in AwayHeaders:   \n    df_temp2[Header] = df[~df.Season.isin(NoDeepStats)].groupby([\"Season\"])[Header].sum()\ndel AwayHeaders\ndel Header   \ndf3 = pd.concat([df_temp1, df_temp2], axis=1)\ndel df_temp1\ndel df_temp2 \ndf3.reset_index(level=0, inplace=True)\n\ndf3[\"TotalYellowcards\"] = df3[\"HomeYellowcards\"] + df3[\"AwayYellowcards\"]\ndf3[\"TotalRedcards\"] = df3[\"HomeRedcards\"] + df3[\"AwayRedcards\"]\n","fce6c76a":"\nplt.figure(figsize=(25,10))\nplt.plot( 'Season', 'TotalYellowcards', data=df3, marker='o', markerfacecolor='yellow', markersize=12, color='yellow', linewidth=4, label=\"Total Yellow Cards\")\nplt.plot( 'Season', 'HomeYellowcards', data=df3, marker='o', markerfacecolor='black', markersize=12, color='yellow', linewidth=4, label=\"Home Yellow Cards\")\nplt.plot( 'Season', 'AwayYellowcards', data=df3, marker='o', markerfacecolor='white', markersize=12, color='yellow', linewidth=4, label=\"Away Yellow Cards\")\nplt.plot( 'Season', 'TotalRedcards', data=df3, marker='o', markerfacecolor='red', markersize=12, color='red', linewidth=4, label=\"Total Red Cards\")\nplt.plot( 'Season', 'HomeRedcards', data=df3, marker='o', markerfacecolor='black', markersize=12, color='red', linewidth=4, label=\"Home Red Cards\")\nplt.plot( 'Season', 'AwayRedcards', data=df3, marker='o', markerfacecolor='white', markersize=12, color='red', linewidth=4, label=\"Away Red Cards\")\n\nplt.xticks(rotation=45)\nplt.legend(loc='best')","2763032e":"df3[\"TotalFouls\"] = df3[\"HomeFouls\"] + df3[\"AwayFouls\"]","86f3f546":"plt.figure(figsize=(25,10))\nplt.plot( 'Season', 'TotalFouls', data=df3, marker='o', markerfacecolor='black', markersize=12, color='green', linewidth=4, label=\"Total Fouls\")\nplt.plot( 'Season', 'HomeFouls', data=df3, marker='o', markerfacecolor='black', markersize=12, color='blue', linewidth=4, label=\"Home Fouls\")\nplt.plot( 'Season', 'AwayFouls', data=df3, marker='o', markerfacecolor='black', markersize=12, color='red', linewidth=4, label=\"Away Fouls\")\n\nplt.xticks(rotation=45)\nplt.legend(loc='best')","4d87e01c":"plt.figure()\nplt.rcParams[\"figure.figsize\"] = (15,10)\nHeatmap(df3[['TotalFouls', 'TotalYellowcards', 'TotalRedcards', 'HomeFouls', 'HomeRedcards','HomeYellowcards','AwayFouls',\n       'AwayRedcards','AwayYellowcards',]])\n","da5b01a3":"plt.figure(figsize=(25,10))\nsns.countplot(x=\"Season\", hue=\"FT_Result\", data=df)","018afdab":"\nplt.figure(figsize=(25,10))\nplt.plot( 'Season', 'TotalPoints', data=df2[(df2.Season != \"19931994\") & (df2.Season != \"19941995\") & (df2.Placement == 1)], marker='o', markerfacecolor='green', markersize=12, color='green', linewidth=4, label=\"Points to win the league\")\nplt.xticks(rotation=45)\n","b4af8fd8":"\nplt.figure(figsize=(25,10))\nplt.plot( 'Season', 'TotalPoints', data=df2[(df2.Season != \"19931994\") & (df2.Season != \"19941995\") & (df2.Placement == 17)], marker='o', markerfacecolor='green', markersize=12, color='green', linewidth=4, label=\"Finished above relegation\")\nplt.plot( 'Season', 'TotalPoints', data=df2[(df2.Season != \"19931994\") & (df2.Season != \"19941995\") & (df2.Placement > 17)], marker='o', markerfacecolor='red', markersize=12, color='red', linewidth=4, label=\"Relegated\")\nplt.xticks(rotation=45)\nplt.legend()\n","1d29aeb7":"df3[\"TotalShotsOnTarget\"] = df3[\"HomeShotsOnTarget\"] + df3[\"AwayShotsOnTarget\"]\ndf3[\"TotalShots\"] = df3[\"HomeShots\"] + df3[\"AwayShots\"]\n\nplt.figure(figsize=(25,10))\nplt.plot( 'Season', 'TotalShotsOnTarget', data=df3, marker='o', markerfacecolor='green', markersize=12, color='green', linewidth=4, label=\"Total Shots on target\")\nplt.plot( 'Season', 'HomeShotsOnTarget', data=df3, marker='o', markerfacecolor='black', markersize=12, color='green', linewidth=4, label=\"Home Shots on target\")\nplt.plot( 'Season', 'AwayShotsOnTarget', data=df3, marker='o', markerfacecolor='white', markersize=12, color='green', linewidth=4, label=\"Away Shots on target\")\nplt.plot( 'Season', 'TotalShots', data=df3, marker='o', markerfacecolor='blue', markersize=12, color='blue', linewidth=4, label=\"Total Shots\")\nplt.plot( 'Season', 'HomeShots', data=df3, marker='o', markerfacecolor='black', markersize=12, color='blue', linewidth=4, label=\"Home Shots\")\nplt.plot( 'Season', 'AwayShots', data=df3, marker='o', markerfacecolor='white', markersize=12, color='blue', linewidth=4, label=\"Away Shots\")\ndf3[\"TotalGoals\"] = df3[\"FT_HomeGoals\"] + df3[\"FT_AwayGoals\"]\nplt.plot( 'Season', 'TotalGoals', data=df3, marker='o', markerfacecolor='green', markersize=12, color='purple', linewidth=4, label=\"Total Goals\")\nplt.plot( 'Season', 'FT_HomeGoals', data=df3, marker='o', markerfacecolor='black', markersize=12, color='purple', linewidth=4, label=\"Home Goals\")\nplt.plot( 'Season', 'FT_AwayGoals', data=df3, marker='o', markerfacecolor='white', markersize=12, color='purple', linewidth=4, label=\"Away Goals\")\nplt.xticks(rotation=45)\nplt.legend()","0565a6ce":"#Creating some new dataframes to use for analysis\n#-----Create new dataframe for full seasons--------------\n# It's probably overkill to create this as a function since I'm not having the groupby-columns as input to the function. But I might change this at a latter stage.\n\ndef TableDataFrame2(df): \n   HomeHeaders = [\"FT_HomeWin\", \"HT_HomeWin\", \"FT_HomeDraw\", \"HT_HomeDraw\",\n           \"FT_HomeLoss\", \"HT_HomeLoss\", \"FT_HomeGoals\", \"HT_HomeGoals\", \"FT_HomeConceded\", \"HT_HomeConceded\", \n              \"HomeCorners\", \"HomeFouls\", \"HomeRedcards\", \"HomeShots\", \"HomeShotsOnTarget\",\"HomeYellowcards\"]\n   df_temp1 = pd.DataFrame()\n   for Header in HomeHeaders:   \n       df_temp1[Header] = df.groupby([\"Season\", \"HomeTeam\", \"Referee\"])[Header].sum()\n   del HomeHeaders\n   AwayHeaders = [\"FT_AwayWin\", \"HT_AwayWin\", \"FT_AwayDraw\",\n           \"HT_AwayDraw\", \"FT_AwayLoss\", \"HT_AwayLoss\", \"FT_AwayGoals\", \"HT_AwayGoals\", \"FT_AwayConceded\", \"HT_AwayConceded\", \n           \"AwayCorners\", \"AwayFouls\", \"AwayRedcards\", \"AwayShots\", \"AwayShotsOnTarget\",\"AwayYellowcards\"]\n   df_temp2 = pd.DataFrame()\n   for Header in AwayHeaders:   \n       df_temp2[Header] = df.groupby([\"Season\", \"AwayTeam\", \"Referee\"])[Header].sum()\n   del AwayHeaders\n   del Header   \n   df_temp = pd.concat([df_temp1, df_temp2], axis=1)\n   del df_temp1\n   del df_temp2  \n   df_temp[\"HomePoints\"] = (3*df_temp[\"FT_HomeWin\"])+(df_temp[\"FT_HomeDraw\"])\n   df_temp[\"AwayPoints\"] = (3*df_temp[\"FT_AwayWin\"])+(df_temp[\"FT_AwayDraw\"])\n   df_temp[\"TotalPoints\"] = df_temp[\"HomePoints\"] + df_temp[\"AwayPoints\"]\n   df_temp[\"FT_TotalGoals\"] =  df_temp[\"FT_HomeGoals\"] + df_temp[\"FT_AwayGoals\"]\n   df_temp[\"FT_TotalConceded\"] =  df_temp[\"FT_HomeConceded\"] + df_temp[\"FT_AwayConceded\"]\n   df_temp[\"FT_GoalDifference\"] =  df_temp[\"FT_TotalGoals\"] - df_temp[\"FT_TotalConceded\"]\n   df_temp[\"HT_TotalGoals\"] =  df_temp[\"HT_HomeGoals\"] + df_temp[\"HT_AwayGoals\"]\n   df_temp[\"HT_TotalConceded\"] =  df_temp[\"HT_HomeConceded\"] + df_temp[\"HT_AwayConceded\"]\n   df_temp[\"HT_GoalDifference\"] =  df_temp[\"HT_TotalGoals\"] - df_temp[\"HT_TotalConceded\"]\n   df_temp.reset_index(level=2, inplace=True)\n   df_temp.reset_index(level=1, inplace=True)\n   df_temp.reset_index(level=0, inplace=True)\n   df_temp.rename(columns={'index':'Season',\n                          'level_1':'Team',\n                          'level_2':'Referee'}, \n                 inplace=True)\n\n   return df_temp\n\n#----------------------------------------------------------------------\n\n#-----Create new dataframe for full dataset-------------\n\ndef TableDataFrame3(df): \n   HomeHeaders = [\"FT_HomeWin\", \"HT_HomeWin\", \"FT_HomeDraw\", \"HT_HomeDraw\",\n           \"FT_HomeLoss\", \"HT_HomeLoss\", \"FT_HomeGoals\", \"HT_HomeGoals\", \"FT_HomeConceded\", \"HT_HomeConceded\", \n              \"HomeCorners\", \"HomeFouls\", \"HomeRedcards\", \"HomeShots\", \"HomeShotsOnTarget\",\"HomeYellowcards\"]\n   df_temp1 = pd.DataFrame()\n   for Header in HomeHeaders:   \n       df_temp1[Header] = df.groupby([\"HomeTeam\", \"Referee\"])[Header].sum()\n   del HomeHeaders\n   AwayHeaders = [\"FT_AwayWin\", \"HT_AwayWin\", \"FT_AwayDraw\",\n           \"HT_AwayDraw\", \"FT_AwayLoss\", \"HT_AwayLoss\", \"FT_AwayGoals\", \"HT_AwayGoals\", \"FT_AwayConceded\", \"HT_AwayConceded\", \n           \"AwayCorners\", \"AwayFouls\", \"AwayRedcards\", \"AwayShots\", \"AwayShotsOnTarget\",\"AwayYellowcards\"]\n   df_temp2 = pd.DataFrame()\n   for Header in AwayHeaders:   \n       df_temp2[Header] = df.groupby([\"AwayTeam\", \"Referee\"])[Header].sum()\n   del AwayHeaders\n   del Header   \n   df_temp = pd.concat([df_temp1, df_temp2], axis=1)\n   del df_temp1\n   del df_temp2  \n   df_temp[\"HomeRatio\"] = (df_temp[\"FT_HomeWin\"])\/(df_temp[\"FT_HomeWin\"] + df_temp[\"FT_HomeDraw\"] + df_temp[\"FT_HomeLoss\"])\n   df_temp[\"AwayRatio\"] = (df_temp[\"FT_AwayWin\"])\/(df_temp[\"FT_AwayWin\"] + df_temp[\"FT_AwayDraw\"] + df_temp[\"FT_AwayLoss\"])\n   df_temp[\"TotalRatio\"] = (df_temp[\"FT_HomeWin\"] + df_temp[\"FT_AwayWin\"]) \/ (df_temp[\"FT_HomeWin\"] + df_temp[\"FT_AwayWin\"] + df_temp[\"FT_HomeDraw\"] + df_temp[\"FT_HomeLoss\"] + df_temp[\"FT_AwayDraw\"] + df_temp[\"FT_AwayLoss\"])\n   df_temp[\"NoGames\"] =  (df_temp[\"FT_HomeWin\"] + df_temp[\"FT_AwayWin\"] + df_temp[\"FT_HomeDraw\"] + df_temp[\"FT_HomeLoss\"] + df_temp[\"FT_AwayDraw\"] + df_temp[\"FT_AwayLoss\"])\n   \n   df_temp[\"AwayYCardperFoul\"] = (df_temp[\"AwayYellowcards\"])\/(df_temp[\"AwayFouls\"])\n   df_temp[\"AwayRCardperFoul\"] = (df_temp[\"AwayRedcards\"])\/(df_temp[\"AwayFouls\"])\n   df_temp[\"HomeYCardperFoul\"] = (df_temp[\"HomeYellowcards\"])\/(df_temp[\"HomeFouls\"])\n   df_temp[\"HomeRCardperFoul\"] = (df_temp[\"HomeRedcards\"])\/(df_temp[\"HomeFouls\"])\n   df_temp[\"TotalYCardperFoul\"] = (df_temp[\"AwayYellowcards\"]+df_temp[\"HomeYellowcards\"])\/(df_temp[\"AwayFouls\"]+df_temp[\"HomeFouls\"])\n   df_temp[\"TotalRCardperFoul\"] = (df_temp[\"AwayRedcards\"]+df_temp[\"HomeRedcards\"])\/(df_temp[\"AwayFouls\"]+df_temp[\"HomeFouls\"])    \n   df_temp.reset_index(level=1, inplace=True)\n   df_temp.reset_index(level=0, inplace=True)\n   df_temp.rename(columns={'index':'Team',\n                          'level_1':'Referee'}, \n                 inplace=True)\n\n   return df_temp\n\n\ndf2 = TableDataFrame2(df)\ndf3 = TableDataFrame3(df)","3398634b":"\n# Function to show values on barplot\n#----------------------------------------------------------------------\n\ndef show_values_on_bars(axs):\n    def _show_on_single_plot(ax):        \n        for p in ax.patches:\n            _x = p.get_x() + p.get_width() \/ 2\n            _y = p.get_y() + p.get_height()\n            value = '{:.0f}'.format(p.get_height())\n            ax.text(_x, _y, value, ha=\"center\") \n\n    if isinstance(axs, np.ndarray):\n        for idx, ax in np.ndenumerate(axs):\n            _show_on_single_plot(ax)\n    else:\n        _show_on_single_plot(axs)   \n#------------------------------------------------------------------------","e32865d2":"Header = [\"FT_HomeGoals\", \"FT_HomeConceded\", \"HomeFouls\", \"HomeRedcards\", \"HomeYellowcards\", \"FT_HomeWin\", \"FT_HomeDraw\", \"FT_HomeLoss\", \"FT_AwayGoals\", \"FT_AwayConceded\", \"AwayFouls\", \"AwayRedcards\", \"AwayYellowcards\", \"FT_AwayWin\", \"FT_AwayDraw\", \"FT_AwayLoss\"]\ndf4 = pd.DataFrame()\ndf4[\"NoGames\"] = df[\"Referee\"].value_counts()\nfor Header in Header:\n    df4[Header] = df.groupby([\"Referee\"])[Header].sum()\ndf4.reset_index(level=0, inplace=True)\ndf4[\"WinRatio\"] = df4[\"FT_HomeWin\"] \/ df4[\"FT_HomeLoss\"]\ndf4[\"GoalRatio\"] = (df4[\"FT_HomeGoals\"] + df4[\"FT_HomeConceded\"]) \/ df4[\"NoGames\"]\n","b355939f":"plt.figure()\nplt.rcParams[\"figure.figsize\"] = (15,10)\nplt.xticks(rotation=90)\nsns.barplot(x=\"index\", y=\"WinRatio\", data=df4[df4.NoGames > 99])","f42324ea":"plt.figure()\nax = sns.barplot(x=\"Team\", y=\"TotalRatio\", data=df3[df3.NoGames > 10][df3.Referee == \"Jones\"])\nplt.xticks(rotation=90)\ntype(ax)\nvals = ax.get_yticks()\nax.set_yticklabels(['{:,.0%}'.format(x) for x in vals])\n\n","112fad06":"print(df.query(\"Referee == 'Jones'\").query(\"HomeTeam == 'Arsenal' | AwayTeam == 'Arsenal'\")[[\"Season\", \"HomeTeam\", \"AwayTeam\",\"FT_Result\",\"IWH\", \"IWD\", \"IWA\"]])","3558dc31":"plt.figure()\nax = sns.barplot(x=\"Team\", y=\"TotalRatio\", data=df3[df3.NoGames > 10][df3.Referee == \"Swarbrick\"])\nplt.xticks(rotation=90)\ntype(ax)\nvals = ax.get_yticks()\nax.set_yticklabels(['{:,.0%}'.format(x) for x in vals])","c1fb49a4":"print(df.query(\"Referee == 'Swarbrick'\").query(\"HomeTeam == 'Aston Villa' | AwayTeam == 'Aston Villa'\")[[\"Season\", \"HomeTeam\", \"AwayTeam\",\"FT_Result\",\"IWH\", \"IWD\", \"IWA\"]])","8bef10fb":"plt.figure()\nplt.rcParams[\"figure.figsize\"] = (15,10)\nplt.xticks(rotation=90)\nsns.barplot(x=\"index\", y=\"GoalRatio\", data=df4[df4.NoGames > 99])\n","3b3b3b54":"plt.figure()\nax = sns.barplot(x=\"Referee\", y=\"TotalRatio\", data=df3[df3.NoGames > 10])\nplt.xticks(rotation=90)\ntype(ax)\nvals = ax.get_yticks()\nax.set_yticklabels(['{:,.0%}'.format(x) for x in vals])","0e59035d":"fig = plt.figure(figsize=(20,10))\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(223)\nax4 = fig.add_subplot(224)\nax1.title.set_text('Barber')\nax2.title.set_text('Dunn')\nax3.title.set_text('Attwell')\nax4.title.set_text('Dean')\n\nax = sns.barplot(x=\"Team\", y=\"TotalRatio\", data=df3[df3.NoGames > 10][df3.Referee == \"Barber\"], ax=ax1)\ntype(ax)\nvals = ax.get_yticks()\nax.set_yticklabels(['{:,.0%}'.format(x) for x in vals])\nax = sns.barplot(x=\"Team\", y=\"TotalRatio\", data=df3[df3.NoGames > 10][df3.Referee == \"Dunn\"], ax=ax2)\ntype(ax)\nvals = ax.get_yticks()\nax.set_yticklabels(['{:,.0%}'.format(x) for x in vals])\nax = sns.barplot(x=\"Team\", y=\"TotalRatio\", data=df3[df3.NoGames > 10][df3.Referee == \"Attwell\"], ax=ax3)\ntype(ax)\nvals = ax.get_yticks()\nax.set_yticklabels(['{:,.0%}'.format(x) for x in vals])\nax = sns.barplot(x=\"Team\", y=\"TotalRatio\", data=df3[df3.NoGames > 10][df3.Referee == \"Dean\"], ax=ax4)\ntype(ax)\nplt.setp(ax4.get_xticklabels(), rotation=90)\nvals = ax.get_yticks()\nax.set_yticklabels(['{:,.0%}'.format(x) for x in vals])","6c9760a4":"#-------------------------------------------------------\nplt.figure()\nax = sns.barplot(x=\"Referee\", y=\"TotalYCardperFoul\", data=df3[df3.NoGames > 10])\nplt.xticks(rotation=90)\ntype(ax)\nvals = ax.get_yticks()\nax.set_yticklabels(['{:,.0%}'.format(x) for x in vals])","891cac9b":"plt.figure()\nax = sns.barplot(x=\"Referee\", y=\"TotalRCardperFoul\", data=df3[df3.NoGames > 10])\nplt.xticks(rotation=90)\ntype(ax)\nvals = ax.get_yticks()\nax.set_yticklabels(['{:,.2%}'.format(x) for x in vals])","b1f40d66":"Hello and thank you giving this a look! I'm fairly new to this and this is my first attempt to make sence of a dataset whithout having other kernels to use for inspiration.\n\nThe analysis will be in three parts:\nPart 1 - Basic correlations in the Premier League, which will be just that. The basics to see if there are any fun parts to dig further into. Part 2 - Premier League over the years, with some general trends and stats. Part 3 - Referees, where I take a look and see if I can find anything interesting about the referees in the premier league. Do they pick favourites? Are some more keen on handing out the cards and\/or does someone love themselves some goal-extravaganzas.\n\nLater I might do a specific analysis for Chelsea (which could easily be changed to be about another team instead).\n\nI've hidden the input code for readability. :) If this is a dumb idea, please let me know and I will refrain from that in the future.","f721bee7":"So the big scoop wasn't a scoop! It was just teams performing at their level.","361c6999":"<a id=\"ch2\"><\/a>\n# Premier League over the years","963d678c":"We can see that all points are **vital** since some seasons it has come down to goal difference! But if anything the points needed to stay in the league is less now than before. But usually if you get ~40 points you can keep on cashing those sweet premier league checks.","59887d67":"It's extra impressive since we can see here that they actually are quite a few seasons behind the teams that have played in the Premier League all seasons.","fc48c957":"But does that mean that you also need **more points** to win the league? It seems like it in the last few seasons - but it's too early to tell.","0c78500b":"I think that we can conclude that there isn't anything **obviously** fishy going on here. The referees that had very high percentages favouring specific teams where all because of those teams being Top teams. (Newcastle was one of the best teams previously which made me think that Dunn had retired -> which wikipedia confirmed: https:\/\/en.wikipedia.org\/wiki\/Steve_Dunn_(referee) )\n\nWe can also see that (Mike) Dean has held the whistle **alot** of times and that he probably is from the Merseyside-area, since Liverpool and Everton is missing which means he hasn't been the referee in 10+ games for them) something that wikipedia confirms! https:\/\/en.wikipedia.org\/wiki\/Mike_Dean_(referee) We can also see that Chelsea wins almost 60% of the games when Mike Dean is the referee, which makes me like the guy, I've got to say.","818664aa":"This mostly confirms what we saw in the heatmap - but at least it gives a small indication that getting Red cards have a negative impact Especially if the home team gets it. It also gives a small indication that games where one team commits many fouls often mean that the other commits them aswell. ","ca43f5a7":"We can see a steady decline in fouls comitted per game (with a constant rate of cards or a small increase) which gives an indication that the referees are more likely to show a card for a foul now than previously. What is interesting is that the difference bewteen fouls committed between the home and away team has been more or less the same over the years - but now the home team are as likely to get cards for the fouls, which wasn't the case previously.","18b87dca":"So he seems to like Arsenal **alot!** But who have they faced? Let's add the odds aswell to see if there has been some shockers!","1fbc8864":"We can see a **significant** drop in the number of shots on target after the season 20122013 but the number of goals per season has stayed pretty much the same. Since this doesn't seem to be related to a change in fouls nor in the number of yellow\/red cards this is interesting indeed.\n\nA significant thing that happened here in the league as a whole is that the legendary Sir Alex Ferguson retired and put an end to the Man U dominance of the league. Since the total of shots has stayed the same my guess is that there has been a change in what counts as a \"shot on target\" - but for now I don't really have anything to back that up with.","79250426":"And more in a \"table\" format it looks like this!","fc473542":"And here it actually seems to be a lot of variance! especially when it comes to the red cards. But when it comes to the yellow cards it actually differs as much as from every 5th~ foul and every 10th~!","4664cf61":"It actually seems like you are way more probable to win as a home team if Jones is blowing the wistle rather than Swarbrick. It might be that Swarbrick usually handles the home games for the \"lesser\" teams though. Could be worth looking into!","1fab1b07":"This correlation-plot confirms that the More fouls that has been commited the less likely the players were to recieve cards for their fouls. But it also shows that it is actually, when it comes to the yellow cards, almost exclusevly related to the home team. Which leads me to believe that the home team actually got away with alot more before. But did that mean that \"Home advantage\" was larger before also?","6f6182ea":"First and foremost what I would like to do is to look for any clear cut correlations in the data to see if there are any abvious places that I need to dig deeper into. Let's start with plotting a basic Heatmap. Since football is about scoring goals - correlations in regards to the home\/away team is what I'm looking for.","ce0015b5":"Seems like all is in order. And for Swarbrick?","edc21d0f":"I'm going to use the pairplot aswell just to see how the actually looks.","cf18cdbe":"Let's see if there are referees that actually favours some Teams over others.","48ac908f":"Anyhow. I like goals! Is there anything that can be said here?","a0bb1314":"But to clinch that sweet 17th spot in the table and avoid regulation? (I'll exclude the 9394 & 9495 seasons since there were 22 teams) ","dfa174e2":"It seems like it is! And by quite a margin also. (If someone can recommend another way of creating a pie chart where I can use only three cathegories I'd appriciate it!","685bd67f":"<a id=\"ch1\"><\/a>\n# Basic correlations in Premier League","cc14ad05":"The plot shows the sum of yellow and red cards for each season since 2000\/2001. We can se that there was an uptick in cards being shown starting at the 2004\/2005-season and that it has fluctuated quite a bit in the most reasent seasons with fewer red cards\/season but a clearly more evenly distributed rate of yellow cards for the home resp. away side. Let's see if we can compare it to fouls commited.","265c06c1":"The heatmap show's something quite interesting. There aren't actually that many factors that plays and obvious role in scoring goals for team. Shots, and shots on target are key stats (which might seem obvious) But other than that I'm finding little or no correlations. \n\nSomething that I found interesting is that Fouls from the away side doesn't seem to have any negative impact for the side that's committing them!","23487132":"City is closing in on the top teams, which is impressive for a team that haven't played in the premier league all seasons! And my team (Chelsea) are well on their way to clinch the 2nd place in the marathon table! And most teams have a minus in goal difference..!","886ba3cf":"Maybe - but they all seem to to handle games ending with 2.5-3 goals. ","4b5fdee1":"<a id=\"ch3\"><\/a>\n# Referees","6d2a85ed":"First is first! Let's see if there is a difference in referees when it comes to favouring the home team! (And let's filter on on referees that with more than 100 games)","f7137c48":"Thank you for visiting my Kernel! I might put in more work later on (Probably more focused on Chelsea specifically) As always - all feedback is greatly appriciated.","6f91c8e9":"And this Maybe(!) shows a small change with it being a bit more common with away wins. But I woldn't say it's significant - I'd say it's been pretty stable around 100-125 away wins per season. But it does seem to have become less likely with draws. Which I guess is good - in the words of one of my favourite podcasters \"It's the draws that kill you\".","302112ae":"# Table of Contents\n1. [Part 1 - Basic correlations in the Premier League](#ch1)\n1. [Part 2 - Premier League over the years](#ch2)\n1. [Part 3 - Referees](#ch3)","19693123":"Furthermore I'm intereted to see if home advantage actually is a thing:","7e999998":"First and foremost! How does the marathon table look for the Premier League?","2bce9176":"The plot shows the finishing placement for each of the current \"top 6\" teams and here we can see the remarkable climb that Manchester City has made using only the power of.. money(!).\n\nBut furthermore it reinforces the complete dominance from Manchester United until recent years which have given them such a large lead in the marathon table.","b82c0735":"And finally! Let's see if some are more keen than others to use the red and yellow cards!","02a4a18a":"And as we saw in the Heatmap the shots and the shots on target seem to play a vital role in scoring goals. Corners seem to have little or no impact at all. Which is interesting with the \"importance of set pieces\" and whatnot. ","59e434c5":"And it seems like Swarbrick usually is the referee when Aston Villa is visited by one of the top teams!","a6dd153a":"We can see here that Barber actually seem to have some favourite teams! Since the teams he's judged more than 10 times seem to win 60->80% of the time! Let's try to find out more."}}