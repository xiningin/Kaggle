{"cell_type":{"38cc092c":"code","00198771":"code","231641b8":"code","b46b2cf4":"code","6aafbbda":"code","13387353":"code","88909c6e":"code","16086565":"code","dfc23ac0":"code","b952fa01":"code","7cfaac22":"code","ae1e8c63":"code","2b5f2b8b":"code","fc820364":"code","362c35ad":"code","cf7c4ae7":"code","93515309":"code","c56c53c2":"code","86d72911":"code","1f30639b":"code","c796b9cb":"code","79fde34b":"code","3c95a9ef":"code","768999ec":"code","465bc071":"code","befac607":"code","29c36b2f":"code","95c64d61":"code","76acaf71":"code","a2644f16":"code","bc497e37":"code","fc3cc5c6":"code","fa70093e":"code","4eeb6229":"code","322910f3":"code","e1326cd0":"code","eb2c15fc":"code","c9b34541":"code","57822ca4":"code","75b4f167":"code","eafc7597":"code","88a87e0c":"code","06a5a2e1":"code","a39117d0":"code","30dbdc32":"code","3574af73":"code","e908755c":"code","52a768be":"code","12ed7bda":"code","fb60b476":"code","65b5eb0d":"code","3e30cb6c":"code","692d16c6":"code","ed37a9a0":"code","0ff10094":"code","278f749c":"code","cbfbd301":"code","06b24161":"code","5c34bbc8":"code","b3750b16":"code","4bf4a0b9":"code","6ee5ee0a":"code","c7f75605":"code","62c3e90b":"code","e4ad74b3":"code","68236f92":"code","fc537560":"code","c8d54ca2":"code","f30b2517":"code","79166394":"code","f63aac60":"code","570c7172":"code","3a29ae0b":"code","3d76e6f6":"code","8fce3477":"code","2f4dca2c":"code","f7e50746":"code","773ad085":"code","08320fb9":"code","3ef4b6f8":"code","6d2fd6bc":"code","42889ead":"code","fed2ce8b":"code","5684e15e":"code","3af3183d":"code","a4ddd51f":"code","b8297b10":"code","372dd048":"code","ebf14502":"code","08c20a29":"code","20aec715":"code","23a430e9":"code","9aa1ee7c":"code","e9f539fd":"code","fa13080b":"code","b8b19cf5":"code","c24ac4e4":"code","ff0aebd9":"code","71072985":"code","7adaf004":"code","ee4f4210":"code","b3fbc56d":"code","f392c3a2":"code","f39ce256":"code","c6e78adc":"code","98ded259":"code","ea50a4ea":"code","1d0294d4":"code","6c59a3f7":"code","6b5ee01d":"code","99a14ea1":"code","7b923953":"code","9d120827":"code","3c456baa":"code","3e39103c":"code","721186f8":"code","c06871d9":"code","d0a9f10b":"code","2ba41d64":"code","c9b8a869":"code","59bd7a49":"code","1609c92c":"code","57f680e6":"code","504a5654":"code","7e2ee7cc":"code","565f4789":"code","d808befb":"code","da0094bc":"code","e819d808":"code","ed1eabde":"code","1136171d":"code","a7ec0dc3":"code","f572d2b4":"code","b6658f5d":"code","4177a8f9":"code","1a8ca8d1":"code","ad05617f":"code","e60c64ab":"code","c4837d06":"code","72e316f2":"code","7a4d8945":"code","4aaa3e66":"code","d1731337":"code","4475ae7f":"code","67fd7c1d":"code","58f37f47":"code","2579a7e5":"code","4c452291":"code","34ebfc9b":"code","0dafa5f3":"code","57a32345":"markdown","69817d5c":"markdown","d72374c0":"markdown","626c2ba7":"markdown","3ffa9515":"markdown","c44e38b1":"markdown","e2083ab2":"markdown","bda7a84d":"markdown","1c2b1bc8":"markdown","1a2b8f85":"markdown","19276ef8":"markdown","29644c8c":"markdown","ee8bc6ea":"markdown","628761bb":"markdown","28c86867":"markdown","b77672df":"markdown","e67f8ed3":"markdown","a4652d05":"markdown","79bd805b":"markdown","098a3932":"markdown","58481c61":"markdown","b571d9cb":"markdown","fcd0f042":"markdown","765187a5":"markdown","8d0e7b99":"markdown","ee586f98":"markdown","edbb036d":"markdown","fd7e5734":"markdown","73c22b0e":"markdown","f21599dd":"markdown","3f2b164f":"markdown","9a3ee2ec":"markdown","40319b3a":"markdown","3e73356d":"markdown","e58aedae":"markdown","a586a807":"markdown","52088a2a":"markdown","5f3ed417":"markdown","162043a1":"markdown","99c95e10":"markdown","a014963f":"markdown","cfe08349":"markdown","efb9dbb9":"markdown","41e8106c":"markdown","c48a9f8c":"markdown","95c3d100":"markdown","3452f483":"markdown","1e2639db":"markdown","2aa78b25":"markdown","a19e2111":"markdown","667307ad":"markdown","e9f8de27":"markdown","b247cc6b":"markdown","e7d8b535":"markdown","50a97dc8":"markdown","95213a78":"markdown","2ab3311e":"markdown","eeafd27f":"markdown","c1c5c8f2":"markdown","15cb1d1f":"markdown","5569d112":"markdown","86fd018c":"markdown","93baf085":"markdown","3c53c822":"markdown","3c978f84":"markdown","f777e26b":"markdown","aa7ebf60":"markdown","33d9a833":"markdown","2e6bd46d":"markdown","29d09222":"markdown","e0d5f7a4":"markdown","3866a2c9":"markdown","6561efbd":"markdown","94a8a225":"markdown","122cdd89":"markdown","ad2eae8a":"markdown","7b7dd64d":"markdown","2b52f60c":"markdown","f5b13b3c":"markdown","9e3d6d51":"markdown","2e174b81":"markdown","2f4d788c":"markdown","5c4822d7":"markdown","f7c4deee":"markdown","4200a012":"markdown","5e3d2beb":"markdown","62bc9e8f":"markdown","4913e35e":"markdown","b0c7f51a":"markdown","d61163c5":"markdown","8061208a":"markdown","b3a45414":"markdown","0a5a087f":"markdown","9663cb1a":"markdown","1b45c86d":"markdown","3e0547c5":"markdown","eb9b4dbf":"markdown","cc49e7a3":"markdown","a20d11ff":"markdown","7a654555":"markdown","aab694e3":"markdown","219aaaf3":"markdown","f822e1f1":"markdown","504b0ca1":"markdown","616c3043":"markdown","1e089980":"markdown","553a7493":"markdown","5be07990":"markdown","2db2ae61":"markdown","b1b31613":"markdown","7a72e2bb":"markdown","dd44ad6f":"markdown","332c7410":"markdown","80bc8528":"markdown","770a94b2":"markdown","cb7c774d":"markdown","2f844cf7":"markdown","3235d525":"markdown","73ebc711":"markdown","29a63b5c":"markdown","38c079c3":"markdown","6f3f7efc":"markdown","fcb0e5f9":"markdown","1bcf486a":"markdown","a0d48fda":"markdown","894744e6":"markdown","abe6993d":"markdown","1f450063":"markdown","137adc58":"markdown","ef08504e":"markdown","799c8ba5":"markdown","4d2f856b":"markdown"},"source":{"38cc092c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nsns.set_style(\"whitegrid\")\nsns.despine()\nplt.style.use(\"seaborn-whitegrid\")\nplt.rc(\"figure\", autolayout=True)\nplt.rc(\"axes\", labelweight=\"bold\", labelsize=\"large\", titleweight=\"bold\", titlesize=14, titlepad=10)\n\nfrom scipy import stats\n\n\nimport regex as re\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.decomposition import PCA\n\nimport xgboost\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport optuna\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\nseed=42\n","00198771":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","231641b8":"df = pd.read_csv('\/kaggle\/input\/laptop-price\/laptop_price.csv', encoding=\"ISO-8859-1\")","b46b2cf4":"df.head()","6aafbbda":"df.info()","13387353":"df.describe()","88909c6e":"df = df.rename(columns=str.lower)","16086565":"df.columns","dfc23ac0":"df = df.rename(columns={'price_euros':'price'})","b952fa01":"df[df.duplicated()]","7cfaac22":"df['laptop_id']","ae1e8c63":"ind=0\nfor i in df['laptop_id']:\n    if ind+1 != i:\n        print(i)\n        break\n    ind+=1","2b5f2b8b":"df[df['laptop_id']==66]","fc820364":"df=df.drop('laptop_id', axis=1)","362c35ad":"df['screenresolution']","cf7c4ae7":"df['resolution'] = df['screenresolution'].str.extract(r'(\\d+x\\d+)')","93515309":"df['screentype'] = df['screenresolution'].replace(r'(\\d+x\\d+)','',regex=True)","c56c53c2":"df['screentype'] = df['screentype'].replace(r'(Full HD|Quad HD|Quad HD|\\+|\/|4K Ultra HD)','',regex=True)","86d72911":"df['screentype']","1f30639b":"df['touchscreen'] = df['screentype'].str.extract(r'(Touchscreen)')\ndf['screentype'] = df['screentype'].replace(r'(Touchscreen)','',regex=True)","c796b9cb":"df['touchscreen'].value_counts()","79fde34b":"df['touchscreen'] = df['touchscreen'].replace('Touchscreen',1)\ndf['touchscreen'] = df['touchscreen'].replace(np.nan,0)","3c95a9ef":"df['touchscreen'].value_counts()","768999ec":"df['screentype'].value_counts()","465bc071":"df['screentype']=df['screentype'].replace(r' ','',regex=True)\ndf['screentype'].value_counts()","befac607":"df['screentype'] = df['screentype'].replace(r'^\\s*$', np.nan, regex=True)\ndf['screentype'].value_counts()","29c36b2f":"df.head()","95c64d61":"df = df.drop('screenresolution', axis=1)","76acaf71":"df.head()","a2644f16":"df['resolution'].value_counts()","bc497e37":"df['screentype'].value_counts()","fc3cc5c6":"df['touchscreen'].value_counts()","fa70093e":"df['cpu']","4eeb6229":"df['cpu_freq'] = df['cpu'].str.extract(r'(\\d+(?:\\.\\d+)?GHz)') ","322910f3":"df['cpu_freq'].value_counts()","e1326cd0":"df['cpu_freq'] = df['cpu_freq'].str.replace('GHz', '')\ndf.rename(columns={'cpu_freq': 'cpu_freq(GHz)'}, inplace=True)","eb2c15fc":"df['cpu_freq(GHz)'] = df['cpu_freq(GHz)'].astype(float)","c9b34541":"df['cpu']= df['cpu'].str.replace(r'(\\d+(?:\\.\\d+)?GHz)', '', regex=True)","57822ca4":"df.head()","75b4f167":"df['ram'] = df['ram'].str.replace('GB', '')","eafc7597":"df.rename(columns={'ram': 'ram(GB)'}, inplace=True)","88a87e0c":"df['ram(GB)'] = df['ram(GB)'].astype(int)","06a5a2e1":"df.head()","a39117d0":"df['memory']","30dbdc32":"df['memory'].value_counts()","3574af73":"df['memory_1']=df['memory']","e908755c":"df['memory_1']=df['memory_1'].str.replace('1.0TB','1TB', regex=True)\ndf['memory_1']=df['memory_1'].str.replace('1TB','1000GB')\ndf['memory_1']=df['memory_1'].str.replace('2TB','2000GB')\ndf['memory_1']=df['memory_1'].str.replace('GB','')\ndf['memory_1'].value_counts()","52a768be":"df['memory2']=df['memory_1'].str.replace(r' ','')\ndf['memory2'].value_counts()","12ed7bda":"memory_1=[]\nmemory_2=[]\nfor i in df['memory2']:\n    if len(re.findall(r'\\+',i))==1: # DOUBLE DRIVE\n        one=re.findall(r'(\\w+)',i)\n        memory_1.append(one[0])\n        memory_2.append(one[1])\n    else: # SINGLE DRIVE\n        one=re.findall(r'(\\w+)',i)\n        memory_1.append(one[0])\n        memory_2.append('NaN')\n","fb60b476":"memory_1_gb=[]\nmemory_1_type=[]\nfor i in memory_1:\n    memory_1_type.append(re.findall(r'(\\D\\w+)',i)[0])\n    memory_1_gb.append(re.findall(r'(\\d+)',i)[0])","65b5eb0d":"memory_2_gb=[]\nmemory_2_type=[]\nfor i in memory_2:\n    if i != 'NaN':\n        memory_2_type.append(re.findall(r'(\\D\\w+)',i)[0])\n        memory_2_gb.append(re.findall(r'(\\d+)',i)[0])\n    else:\n        memory_2_type.append('NaN')\n        memory_2_gb.append(0)","3e30cb6c":"df['memory_1_sto(GB)'] = memory_1_gb\ndf['memory_1_type'] = memory_1_type\ndf['memory_2_sto(GB)'] = memory_2_gb\ndf['memory_2_type'] = memory_2_type","692d16c6":"df['memory_1_sto(GB)'] = df['memory_1_sto(GB)'].astype(float)\ndf['memory_2_sto(GB)'] = df['memory_2_sto(GB)'].astype(float)","ed37a9a0":"df.head()","0ff10094":"df=df.drop(['memory_1','memory2','memory'], axis=1)","278f749c":"df = df.replace({'NaN': np.nan})","cbfbd301":"df.head()","06b24161":"df['weight'].value_counts()","5c34bbc8":"df['weight'].str.contains('kg').sum()","b3750b16":"df['weight'] = df['weight'].str.replace('kg','').astype(float)","4bf4a0b9":"df.rename(columns={'weight': 'weight(kg)'}, inplace=True)","6ee5ee0a":"df.head()","c7f75605":"df['cpu_brand'] = df['cpu'].str.extract(r'^(\\w+)')\ndf['cpu_brand'].value_counts()","62c3e90b":"df[df['cpu_brand']=='Samsung']","e4ad74b3":"df=df.drop(1191)","68236f92":"df['gpu_brand'] = df['gpu'].str.extract(r'^(\\w+)')\ndf['gpu_brand'].value_counts()","fc537560":"df[df['gpu_brand']=='ARM']","c8d54ca2":"df.head()","f30b2517":"df.info()","79166394":"df.to_csv('laptop-clean.csv', index=False)","f63aac60":"df1=pd.read_csv('laptop-clean.csv')\ndf1.head()","570c7172":"df_clean=df1.copy()","3a29ae0b":"df1.info()","3d76e6f6":"def num_plot(df, col, title, symb):\n    fig, ax = plt.subplots(2, 1, sharex=True, figsize=(8,5),gridspec_kw={\"height_ratios\": (.2, .8)})\n    ax[0].set_title(title,fontsize=18)\n    sns.boxplot(x=col, data=df, ax=ax[0])\n    ax[0].set(yticks=[])\n    sns.histplot(x=col, data=df, ax=ax[1])\n    ax[1].set_xlabel(col, fontsize=16)\n    plt.axvline(df[col].mean(), color='darkgreen', linewidth=2.2, label='mean=' + str(np.round(df[col].mean(),1)) + symb)\n    plt.axvline(df[col].median(), color='red', linewidth=2.2, label='median='+ str(np.round(df[col].median(),1)) + symb)\n    plt.axvline(df[col].mode()[0], color='purple', linewidth=2.2, label='mode='+ str(df[col].mode()[0]) + symb)\n    plt.legend(bbox_to_anchor=(1, 1.03), ncol=1, fontsize=17, fancybox=True, shadow=True, frameon=True)\n    plt.tight_layout()\n    plt.show()","8fce3477":"fig, ax  = plt.subplots(figsize=(10,5))\nax=sns.countplot(x='company', data=df, palette='mako_r', order = df['company'].value_counts().index)\nax.set_xticklabels(ax.get_xticklabels(), rotation=80)\nax.bar_label(ax.containers[0])\nplt.title('Number of laptops by brands')\nplt.show()","2f4dca2c":"fig, ax  = plt.subplots(figsize=(6,5))\nax=sns.countplot(x='typename', data=df,palette='mako_r', order = df['typename'].value_counts().index)\nax.set_xticklabels(ax.get_xticklabels(), rotation=80);\nax.bar_label(ax.containers[0])\nplt.title('Laptop types')\nplt.show()","f7e50746":"print('Most laptops are notebooks, which make {:.2f}% of the total laptops'.format(len(df[df['typename']=='Notebook'])*100\/len(df)))","773ad085":"fig, ax  = plt.subplots(figsize=(10,5))\nax=sns.countplot(x='inches', data=df, palette='viridis_r')\nax.set_xticklabels(ax.get_xticklabels(), rotation=80);\nax.bar_label(ax.containers[0])\nplt.title('Laptop screen size (inches)')\nplt.show()","08320fb9":"print('Most laptops have 15.6 inches, which make {:.2f}% of the total laptops'.format(len(df[df['inches']==15.6])*100\/len(df)))","3ef4b6f8":"inches_list = df['inches'].value_counts().index[:6].tolist()\ninches_list","6d2fd6bc":"df_clean = df_clean[df_clean['inches'].isin(inches_list)]","42889ead":"fig, ax  = plt.subplots(figsize=(6,5))\nax=sns.countplot(x='inches', data=df_clean, palette='viridis_r')\nax.set_xticklabels(ax.get_xticklabels(), rotation=80);\nax.bar_label(ax.containers[0])\nplt.title('Laptop screen size (inches)')\nplt.show()","fed2ce8b":"print('We removed {} outliers!'.format(len(df)-len(df_clean)))","5684e15e":"num_plot(df_clean, 'weight(kg)', 'Weight Distribution','kg')","3af3183d":"num_plot(df_clean, 'price', 'Price Distribution','$')","a4ddd51f":"fig, ax  = plt.subplots(figsize=(5,3))\nax=sns.boxplot(x='price', data=df)","b8297b10":"sns.boxplot(x='typename', y='price', data=df[df['price']>3000], hue='cpu_brand')","372dd048":"df[df['price']>4500]","ebf14502":"num_plot(df_clean, 'ram(GB)','RAM distribution','GB')","08c20a29":"print('Most laptops have 8 GB RAM, which make {:.2f}% of the total laptops'.format(len(df[df['ram(GB)']==8])*100\/len(df)))","20aec715":"num_plot(df_clean, 'cpu_freq(GHz)','CPU freq distribution','GHz')","23a430e9":"print('Most laptops have 2.5 GHz CPU, which make {}% of the total laptops'.format(np.round(len(df[df['cpu_freq(GHz)']==2.5])*100\/len(df),2)))","9aa1ee7c":"fig, ax  = plt.subplots(figsize=(8,5))\nax=sns.countplot(x='memory_1_sto(GB)', data=df, hue='memory_1_type')\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nax.set_xlabel('First Hard Drive memory storage (GB)')\nplt.title('First Hard Drive Capacity Distribution')\nplt.legend(loc='upper left', ncol=1, fontsize=15, fancybox=True, shadow=True, frameon=True)\nplt.show()","e9f539fd":"fig, ax  = plt.subplots(figsize=(8,5))\nax=sns.countplot(x='memory_2_sto(GB)', data=df, hue='memory_2_type')\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nax.set_xlabel('Second Hard Drive memory storage (GB)')\nplt.title('Second Hard Drive Capacity Distribution')\nplt.legend(loc='upper left', ncol=1, fontsize=15, fancybox=True, shadow=True, frameon=True)\nplt.show()","fa13080b":"def lr_plot(df, col_x, col_y, leg):\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df[col_x],df[col_y])\n    sns.regplot(x=col_x, y = col_y, data=df, color='#0d98ba', line_kws={'label':\"y={0:.1f}x+{1:.1f}\".format(slope,intercept)})\n    plt.legend(loc=leg, ncol=1, fontsize=15, fancybox=True, shadow=True, frameon=True)\n    plt.title(col_y + ' VS ' + col_x)\n    plt.show()\n\n    return slope, intercept","b8b19cf5":"slope, intercept = lr_plot(df_clean,'ram(GB)','price', 'lower right')","c24ac4e4":"df_clean[df_clean['ram(GB)']>60]","ff0aebd9":"df_clean = df_clean[df_clean['ram(GB)']<60]","71072985":"slope, intercept = lr_plot(df_clean,'ram(GB)','price', 'upper left')","7adaf004":"slope, intercept = lr_plot(df_clean,'cpu_freq(GHz)','price', 'upper left')","ee4f4210":"slope, intercept = lr_plot(df_clean,'inches','price', 'upper left')","b3fbc56d":"slope, intercept = lr_plot(df_clean,'inches','weight(kg)', 'upper left')","f392c3a2":"cpu_palette = {'Intel':'#0d98ba', 'AMD':'#FF0000', 'Nvidia':'#46C646'}\nfig, ax = plt.subplots(figsize=(6,5))\nsns.boxplot(x='cpu_brand', y='price', data=df, hue='gpu_brand', palette=cpu_palette)\nax.set_title('Price vs CPU brand by GPU brand')\nplt.ylabel('price ($)')\nplt.legend(loc='upper right', ncol=1, fontsize=15, fancybox=True, shadow=True, frameon=True)\nplt.title('Price VS CPU brand by GPU brand')\nplt.show()","f39ce256":"gpu_list = df_clean['gpu'].value_counts()[:15].index.tolist()","c6e78adc":"plt.figure(figsize=(8,6))\nax=sns.countplot(x='gpu', data=df_clean[df_clean['gpu'].isin(gpu_list)], order = gpu_list, palette='viridis_r')\nplt.xticks(rotation=80);\nax.bar_label(ax.containers[0])\nplt.title('TOP 15 common GPUs')\nplt.xlabel('')\nplt.show()","98ded259":"cpu_list = df_clean['cpu'].value_counts()[:15].index.tolist()","ea50a4ea":"plt.figure(figsize=(8,6))\nax=sns.countplot(x='cpu', data=df_clean[df_clean['cpu'].isin(cpu_list)], order = cpu_list, palette='viridis')\nplt.xticks(rotation=80);\nax.bar_label(ax.containers[0])\nplt.title('TOP 15 common CPUs')\nplt.xlabel('')\nplt.show()","1d0294d4":"df['company'].value_counts()","6c59a3f7":"company_list = df['company'].value_counts().index[:8].tolist()\ncompany_list","6b5ee01d":"plt.figure(figsize=(9,5))\nax=sns.barplot(x='company', y='price', data=df_clean[df_clean['company'].isin(company_list)],\n                order=company_list, \n                palette='Spectral', \n                ci=False,\n                edgecolor=\"black\")\nplt.xticks(rotation=80);\nax.bar_label(ax.containers[0])\nplt.title('Average price of laptops by company')\nplt.show()","99a14ea1":"plt.figure(figsize=(6,5))\nsns.heatmap(df_clean.corr(), cmap='RdBu', annot=True, vmin=-1, vmax=1)\nplt.title('Correlation Matrix')\nplt.show()","7b923953":"num_plot(df_clean, 'price', 'Price Distribution','$')","9d120827":"df1=df_clean.copy()","3c456baa":"df1['price']=np.log(df1['price'])","3e39103c":"sns.displot(df1['price'])","721186f8":"df1=df1.fillna('NaN')","c06871d9":"catCols =  ['company','product','typename','cpu','gpu','opsys','resolution','screentype','resolution','memory_1_type','memory_2_type','gpu_brand','cpu_brand']","d0a9f10b":"#One hot encoding\nprint('Dataframe encoded by OHE dimension : ', pd.get_dummies(df1, columns=catCols, drop_first=True).shape)","2ba41d64":"#Label encoding\nen = LabelEncoder()\nfor cols in catCols:\n    df1[cols] = en.fit_transform(df1[cols])\nprint('Dataframe encoded by Label encoding dimension : ', df1.shape)","c9b8a869":"df1.head()","59bd7a49":"X=df1.drop('price', axis = 1).values","1609c92c":"y=df1['price'].values","57f680e6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = seed)","504a5654":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.3, random_state = seed)","7e2ee7cc":"rf = RandomForestRegressor(n_estimators=100, max_depth=100, max_features=15)","565f4789":"rf.fit(X_train,y_train)","d808befb":"y_pred_rf = rf.predict(X_test)","da0094bc":"mse_rf = mean_squared_error(np.exp(y_test), np.exp(y_pred_rf))\nprint(\"RMSE using RF: {} $ \".format(np.round(np.sqrt(mse_rf)),4))","e819d808":"print(\"R2 using Random Forest: {:.2f} %\".format(np.round(r2_score(y_test, y_pred_rf),4)*100))","ed1eabde":"feature_name_list=df1.drop('price', axis = 1).columns","1136171d":"rf.feature_names = feature_name_list","a7ec0dc3":"plt.barh(rf.feature_names,rf.feature_importances_)\nplt.xticks(rotation=90);\nplt.title('Feature Importance by Random Forest')\nplt.xlabel('Feature Importance (%)')\nplt.show()","f572d2b4":"def objective(trial, X_train=X_train, X_val=X_val, y_train=y_train, y_val=y_val):\n    dtrain = xgboost.DMatrix(X_train, label=y_train)\n    dvalid = xgboost.DMatrix(X_val, label=y_val)\n\n    param = {\n        'objective' : 'reg:squarederror',\n        'lambda': trial.suggest_loguniform('lambda', 1e-3, 5.0),\n        'alpha': trial.suggest_loguniform('alpha', 1e-3, 5.0),\n        'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]),\n        'subsample': trial.suggest_categorical('subsample', [0.4,0.5,0.6,0.7,0.8,1.0]),\n        'learning_rate': trial.suggest_categorical('learning_rate', [0.001,0.01,0.05,0.1,0.2,0.25,0.3]),\n        'n_estimators': trial.suggest_categorical('n_estimators', [300,400,500,1000,1500,2000,2500,3000]),\n        'max_depth': trial.suggest_categorical('max_depth', [3,4,5,6,7]),\n        'min_child_weight': trial.suggest_int('min_child_weight', 1, 100),\n    }\n\n\n    model = xgboost.XGBRegressor(**param)    \n    model.fit(X_train, y_train, eval_set=[(X_val, y_val)], early_stopping_rounds=100, verbose=False)   \n    preds = model.predict(X_val)\n    rmse = mean_squared_error(y_val, preds, squared=False)\n\n    return rmse","b6658f5d":"study = optuna.create_study(direction=\"minimize\")\nstudy.optimize(objective, n_trials=100)\n\nprint(\"Number of finished trials: \", len(study.trials))\nprint(\"Best trial:\")\ntrial = study.best_trial\n\nprint(\"  Value: {}\".format(trial.value))\nprint(\"  Params: \")\n\nparams = []\n\nfor key, value in trial.params.items():\n    params.append(value)\n    print(\"    {}: {}\".format(key, value))","4177a8f9":"params","1a8ca8d1":"lambda_opt = params[0]\nalpha_opt = params[1]\ncolsample_bytree_opt = params[2]\nsubsample_opt = params[3]\nlearning_rate_opt = params[4]\nn_estimators_opt = params[5]\nmax_depth_opt = params[6]\nmin_child_weight_opt = params[7]","ad05617f":"xgb = XGBRegressor(reg_lambda = lambda_opt,\n                   alpha = alpha_opt,\n                   colsample_bytree = colsample_bytree_opt,\n                   subsample_opt = subsample_opt,\n                   learning_rate = learning_rate_opt,\n                   n_estimators = n_estimators_opt,\n                   max_depth = max_depth_opt,\n                   min_child_weight = min_child_weight_opt)","e60c64ab":"xgb.fit(X_train, y_train, eval_set=[(X_val, y_val)], early_stopping_rounds=50, verbose=0)","c4837d06":"y_pred_xgb = xgb.predict(X_test) ","72e316f2":"mse_xgb = mean_squared_error(np.exp(y_test), np.exp(y_pred_xgb))","7a4d8945":"print(\"RMSE with XGBoost : {:.2f} $\".format(np.round(np.sqrt(mse_xgb),2)))","4aaa3e66":"print(\"R2 with XGBoost: {:.2f} % \".format(np.round(r2_score(y_test, y_pred_xgb),4)*100))","d1731337":"xgb.feature_names = feature_name_list","4475ae7f":"plt.figure(figsize = (5,5))\nplt.scatter(np.exp(y_test), np.exp(y_pred_rf), alpha=0.5, color='red',label='RF, R2 {:.2f} %'.format(r2_score(y_test, y_pred_rf)*100))\nplt.scatter(np.exp(y_test), np.exp(y_pred_xgb), alpha=0.5, color='blue',label='XGBoost, R2 {:.2f} %'.format(r2_score(y_test, y_pred_xgb)*100))\nplt.plot([0, 7000], [0, 7000], linestyle='--')\nplt.axis([0, 7000, 0, 7000])\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\nplt.title('RF vs XGBoost price regression ($)')\nplt.legend(loc='upper left', ncol=1, fontsize=13, fancybox=True, shadow=True, frameon=True)\nplt.show()","67fd7c1d":"print(\"RMSE using RF: {:.2f} $ \".format(np.sqrt(mse_rf)))\nprint(\"RMSE with XGBoost : {:.2f} $\".format(np.sqrt(mse_xgb)))","58f37f47":"plt.figure(figsize=(5,5))\nplt.barh(rf.feature_names,rf.feature_importances_, alpha=0.5, label='RF', color='red')\nplt.barh(xgb.feature_names,xgb.feature_importances_, alpha=0.5, label='XGBoost', color='blue')\nplt.legend(loc='center right',ncol=1, fontsize=14, fancybox=True, shadow=True, frameon=True)\nplt.title('Feature Importance for price prediction\\nby XGBoost and Random Forest')\nplt.xlabel('Feature Importance (%)')\nplt.show()","2579a7e5":"xgb.feature_names = df1.drop('price', axis = 1).columns","4c452291":"feat_df= pd.DataFrame({'feature': xgb.feature_names,'importance':xgb.feature_importances_})","34ebfc9b":"sorted_df=feat_df.sort_values('importance', ascending=False)","0dafa5f3":"plt.figure(figsize=(9,5))\nsns.barplot(x='importance', y='feature', data=sorted_df, palette='mako')\nplt.title('Feature Importance to predict price by XGBoost')\nplt.xlabel('Feature Importance (%)')\nplt.ylabel('')\nplt.show()","57a32345":"We created succesfully two lists for memory_1 in order to include the capacity and type for each memory 1","69817d5c":"It looks like there is an outlier value","d72374c0":"## How is Hard Drive capacity distributed among the laptops?","626c2ba7":"# Data Cleaning ","3ffa9515":"First, we will analyze the first hard drive storage capacity","c44e38b1":"## How is RAM distributed among the laptops?","e2083ab2":"## Categorical features encoding","bda7a84d":"Then we convert the capacity related columns to floats","1c2b1bc8":"Insights from the correlation matrix:\n- RAM has a high positive correlation with price (+0.75): more expensive laptops tends to have a higher pric\n- CPU Freq has a quite moderate positive correlation with the price (+0.45) \n- Inches and Weight have a high positive correlation (+0.82) since laptops with bigger screens tend to be heavier.","1a2b8f85":"## Laptop ID","19276ef8":"# Data preparation for ML modeling","29644c8c":"The outlier value is a very high end gaming ASUS pc. We can drop it.","ee8bc6ea":"We want to extract the CPU Frequency into a different column","628761bb":"- General infos:\n    - The majority of laptops are from Dell, lenovo and HP.\n    - The majority of laptops are Notebooks, which make 55.84% of the total laptops\n    - Most laptops have 15.6 inches, which make 51.08% of the total laptops\n- Price:\n    - There are laptops with prices over 3000:\n        - Most of them are Gaming PCs or Workstations with intel CPU.\n        - There is also one Notebook with a price close to 5000 euros and Gaming laptops, with a price close to 5500 euros and 6000 euros\n    - The most expensive notebook is the Lenovo Thinkpad P51, with an Intel XEON CPU and Nvidia Quadro GPU!\n- Brand: \n    - Laptops with Intel CPUs are more expensive.\n    - Laptops with an AMD CPUs also hahave and AMD GPUs\n    - Laptops with Nvidia GPUs are more expensive.\n- RAM:\n    - According to the slope of the linear regression between price and RAM, every GB of RAM added on the PC adds roughly 107$ to the laptop value.\n    - Most laptops have 8 GB RAM, which make 47.54% of the total laptops\n- GPU:\n    - The 2 most common GPUs are integrated Intel GPUs HD Graphics 620 and 520, while the third one is the Nvidia GTX1050.\n- CPU:\n    - All the TOP 15 most common CPUs are from Intel.\n    - The most common CPU is the Intel i5 7200U, second is i7 7700HQ and third is i7 7500U.\n    - Out of the 15 CPUs, 10 are series 'U' (low voltage) , 3 are series 'HQ' (high performance) 10 and 2 are Celerons (low-end).\n    - Most laptops have 2.5 GHz CPU, which make 22.5% of the total laptops  \n- Hard drives:\n    - Most PCs have 256 GB of storage, which is for the most part SSD. Moreover, for storage of 1 TB or higher, most of them are HDD.\n    - Most of second hard drive storages are 1 TB HDD disks\n- Correlation Matrix:\n    - RAM has a high positive correlation with price (+0.75): more expensive laptops tends to have a higher pric\n    - CPU Freq has a quite moderate positive correlation with the price (+0.45)\n    - Inches and Weight have a high positive correlation (+0.82) since laptops with bigger screens tend to be heavier.","28c86867":"# OPTUNA Optimization","b77672df":"Now we have separated the drives into two lists. We will now create two more lists that will contain the memory types.","e67f8ed3":"-LaptopID: We can se that also laptopID is included as a numerical features, with a minimum value of 1 and max of 1320, different from the index (0-1303). This will be investigated later.<br>\n\n-Inches: the nimimum inches is 10,1, while the max is 18.4 and the mean is around 15 inches<br>\n\n-Price_euros:miimuim price is 174 euros, the max is 6099 and the mean is 1123, which is kinda high for a laptop<br>","a4652d05":"It is not clear why the laptop_id is different from the index by 18 values at the end 'index=1302 vs laptop_id=1320'","79bd805b":"The correlation matrix can give some useful informations about the linear correlation between the numerical features","098a3932":"# Which are the TOP 15 most common CPUs?","58481c61":"We will also rename 'price_euros' to 'price'","b571d9cb":"As we can see here, the difference between laptop_id and the index is 2, when it should be just 1.","fcd0f042":"## Feature Importance by XGBoost (ordered)","765187a5":"Everything looks okay.<br>\nNow we will perform the same feature engineering process to CPU column","8d0e7b99":"Good, there are no duplicates","ee586f98":"According to the slope, every GB of RAM added on the PC adds roughly 107$ to the laptop value.","edbb036d":"## Data preparation","fd7e5734":"Moreover, since the target variable 'price' is right skewed, we will log transform it to improve the prediction performance of the algorithms.","73c22b0e":"We can see that RF chose RAM, CPU, weight and product(name) as the most important features.<br>\nIn the case of XGBoost, the most important features are memory_1_type, RAM, resolution, cpu, typename and gpu brand.<br>\nIt is also worth noticing XGBoost didnt give as much importance to RAM and CPU as RF did. It spreaded more the feature importance among other features.","f21599dd":"First, let's convert all the element into GB","3f2b164f":"This sample will be dropped to simplify the further analysis and comparison between intel and amd based laptops.","9a3ee2ec":"Since we already have an index number for each laptop, we do not need the laptop_id column. It will be dropped.","40319b3a":"# Which are the TOP 15 most common GPUs?","3e73356d":"The following project is about the analysis of a dataset contaning data about laptops. \nThe project can be divided in the following sections:\n- Dataset cleaning + Feature Engineering \n- Exploratory Data Analysis \n- Data preparation for ML (encoding, scaling) \n- ML modeling by Random Forest and XGBoost (with optimization by OPTUNA)\n- Results Sumamry ","e58aedae":"### Feature Engineering on Screen resolution","a586a807":"# Results Summary","52088a2a":"# Which brand is the most frequent in the dataframe?","5f3ed417":"The 2 most common GPUs are integrated Intel GPUs HD Graphics 620 and 520, while the third one is the Nvidia GTX1050. ","162043a1":"There are just 2 numerical columns: 'inches' and 'price euros'.<br>","99c95e10":"Before exploring the data with EDA, we will perform some data cleaning.","a014963f":"## Train - Validation split","cfe08349":"## RAM","efb9dbb9":"Most of laptops are from Dell, Lenovo and HP.","41e8106c":"# XGBoost","c48a9f8c":"## Price vs CPU Frequency","95c3d100":"We define a custom plot function, which computes, returns and plots a linear regression line.","3452f483":"# Feature Importance","1e2639db":"Yes, every rows returned a True value (1), so we can say that every row has the weight specified in kg. Now we will remvoe 'kg' from the rows.","2aa78b25":"Most PCs have 256 GB of storage, which is for the most part SSD. Moreover, for storage of 1 TB or higher, most of them are HDD.","a19e2111":"The expensive notebook is the Lenovo Thinkpad P51, with an Intel XEON CPU and Nvidia Quadro GPU!","667307ad":"First, we will change the columns into lower case.","e9f8de27":"There are very few laptops with some \"non conventional\" sizes, which indeed appears in just few rows. For this reason, we will only keep laptops with the more conventional sizes.","b247cc6b":"Using the 'describe' method of the dataframe, we can get some first insights on the numerical columns.","e7d8b535":"We can extract lots of informations from this column. We can see that some laptops have 2 hard drives, there are 4 differnt types of disks: 'SSD', ''HDD', 'Hybrid' and 'Flash Storage'. We will create new columns to include all these information.","50a97dc8":"## Train - Test split","95213a78":"Moreover, we define an additional validation set, which will be used to monitor overfitting.","2ab3311e":"## Check for duplicates","eeafd27f":"We created the same two lists that will contain type and capacity also for the second drive","c1c5c8f2":"Custom functions to improve plot readability:","15cb1d1f":"Moreover, we will create a new dataframe df2 which will contain a further cleaned version of df (without outliers etc..)","5569d112":"# Multivariate outliers detection","86fd018c":"## How is price distributed among the laptops?","93baf085":"The categorical columns ('company','product','typename','cpu','gpu','opsys','resolution','screentype','resolution','memory_1_type','memory_2_type','gpu_brand','cpu_brand') will be now encoded. <br>\nAn encoding by one hot encoding would be preferrable in this case since there is not a order\/hierarchy among the different categories for each variable, but this would lead to a very high number of columns (around 900), which is close to the number of total rows (1000).<br>\nSo, if we had more data a OHE encoding would be preferrable, but in case a Label Encoding will be performed to keep the number of features lower.","3c53c822":"## How is CPU frequency distributed among the laptops?","3c978f84":"Now we just need to subsitute the blank spaces with a 'NaN'","f777e26b":"Great! Now the dataframe looks like:","aa7ebf60":"### Memory 2","33d9a833":"# Random Forest","2e6bd46d":"For prediction, we will use the cleaned dataframe 'df_clean'","29d09222":"Then, I will sort it by 'importance', creating a new sorted dataframe by importance","e0d5f7a4":"# XGBoost Optimization with OPTUNA","3866a2c9":"## CPU","6561efbd":"- MSI laptops are on average the most expensive, with an average price of 1708.72$.\n- Apple laptops are the second most expensive laptops and Toshiba's are 3rd.\n- Acer are the cheapest, with an average price of 626$\n- Laptops from Dell, Lenovo, HP and Asus have, on average, a price around 1000$.","94a8a225":"The regression line is almost flat, with slope=32 $\/inches, meaning that PCs with higher screen inches slightly tends to be more expensive.","122cdd89":"Then, we delete the frequency from the CPU column.","ad2eae8a":"- All the TOP 15 most common CPUs are from Intel.\n- The most common CPU is the Intel i5 7200U, second is i7 7700HQ and third is i7 7500U.\n- Out of the 15 CPUs, 10 are series 'U' (low voltage) , 3 are series 'HQ' (high performance) 10 and 2 are Celerons (low-end).","7b7dd64d":"Most of the laptops have an intel cpu, few AMD and even one samsung one. Which is the samsung one?","2b52f60c":"We use the column names as the feature names, so that in the following plot we will be able to see the actual feature names","f5b13b3c":"We transformed the drive capacity to GB","9e3d6d51":"The newly created columns are as follows:","2e174b81":"<img src=\"https:\/\/i.imgur.com\/D1vlSiV.png\" width=\"800px\">","2f4d788c":"## Memory","5c4822d7":"In the screen resolution column, there are included multiple useful informations.<br>\n-Screen type<br>\n-Resolution<br>\n-Touchscreen?<br>\nWe will separate this 3 informations in 3 different columns.","f7c4deee":"In particular, there are companies with less than 10 laptops in the dataset, which is a very low number from which we can extract statistical results. <br>\nFor this reason, we will consider only laptops with at least 20 laptops in the dataset.","4200a012":"# Which size is the most popular?","5e3d2beb":"## CPU and GPU manifacturing companies","62bc9e8f":"It looks like there are some laptops with a price over 3000 euros!","4913e35e":"## Weight vs Inches","b0c7f51a":"We can so drop the original 'screenresolution' column!","d61163c5":"Do all rows have a weight specified in kg?","8061208a":"Now the dataset looks clean and ready to be explored","b3a45414":"# **XGBoost with Optuna, Deep Feature Engineering and Laptop deep analysis**","0a5a087f":"It could be good idea to change other columns into numerical, such as CPU, RAM, Memory and Weight","9663cb1a":"### Second hard Drive analysis","1b45c86d":"<div style=\"width:100%;text-align: center;\"> <img align=middle src=\"https:\/\/i.imgur.com\/rOXRgEZ.jpg\" alt=\"Heat beating\" style=\"height:300px\"> <\/div>","3e0547c5":"We can perform a further cleaning: there are actually only 2 screen types, IPS Panel and IPS Panel Retina Display (belonging to Apple laptops) even if by analyzing the different entries with value_counts we can see more than 2 different screen types.<br>\nWe will clean this.","eb9b4dbf":"First, we select the feature list (column names) from the X_train vector ","cc49e7a3":"As expected, PCs with bigger screens are heavier. In particular, on average, for every additional inch the pc is 400g heavier.","a20d11ff":"## Weight","7a654555":"There is one laptop with an ARM gpu, which is it?","aab694e3":"We will keep laptops with these 6 sizes!","219aaaf3":"<img src=\"https:\/\/i.imgur.com\/UuSbyZw.png\" width=\"1000px\">","f822e1f1":"Until now we analyzed each single feature at a time, in the following we will analyze these features together to find useful insghts about the data.","504b0ca1":"# Price Prediction Summary Dashboard:","616c3043":"# What is the average price of laptops by company?","1e089980":"## Price vs inches","553a7493":"# What type of laptop is the most frequent?","5be07990":"Most of second hard drive storages are 1 TB HDD disks","2db2ae61":"When using a random forest regressor, there is the possibility to plot the feature importance determined by the algorithm to perform the regression. It will be visualized to better understand what contributes the most to a laptop price.","b1b31613":"- Overall, both Random Forest and XGBoost performed very well, with R2 score over 91%.\n- For what concerns feature importance:\n    - We can see that RF chose RAM, CPU, weight and product (name) as the most important features.\n    - In the case of XGBoost, the most important features are memory_1_type, RAM, resolution, cpu, typename and gpu brand.\n    - XGBoost did not give as much importance to RAM and CPU as RF did. It spreaded more the feature importance among others features.\n- We decided to keep product name as a feature since in the dataset there are lots of laptops which shares the same name but differs in the other components (features). By removing the 'name' feature, we reduce the R2 by 1%.\n- By log-transforming the target variable 'price', which is heavily right skewed, R2 improves by 4% for both XGBoost and Random Forest","7a72e2bb":"Indeed now the distribution looks more gaussian.\nEDIT: By log-transforming the target variable 'price', I could achieve R2=0.93 with XGBoost! Without log transforming, R2 was closer to 0.88.","dd44ad6f":"We will remove GB from each row and add it in the column name instead.","332c7410":"With this regex we can extract both float and int frequencies for the CPU","80bc8528":"# Data Analysis Summary Dashboard:","770a94b2":"**Thank you very much for reading my notebook ! Let me know if you have questions or you want me to check out your works ! :)**","cb7c774d":"## Price vs RAM","2f844cf7":"It looks like most of them are Gaming PCs or Workstations with intel CPU. There is also one Notebook with a price close to 5000 euros and 2 outlier values for Gaming Pc, with a price close to 5500 euros and 6000 euros","3235d525":"Since all the frequencies are in GHz, we can now simply remove 'GHz' and add it to the column name, such that the column can become numerical","73ebc711":"## How is weight distributed among the laptops?","29a63b5c":"After laptop_id=66, the index+1 (since with python lists start with 0) and laptop_id become different.","38c079c3":"We can see a positive trend between price and the CPU frequency, with no obvious outliers. <br>\n It is also interesting noticing that the intercept is negative: a PC with 0 Ghz would cost -321.5 dollars according to this linear regression, which of course, it is not possible.","6f3f7efc":"# Price VS CPU brand by GPU brand","fcb0e5f9":"# Exploratory Data Analysis EDA","1bcf486a":"# Dataset Cleaning + Feature Engineering","a0d48fda":"## Screen resolution","894744e6":"## Correlation Matrix","abe6993d":"Next, we will analyze each column and get some insights.","1f450063":"By removing the outlier value we can see that the slope increases and the intercept decreases.","137adc58":"Insights from this plot:\n- Laptops with Intel CPUs are more expensive.\n- Laptops with an AMD CPUs also hahave and AMD GPUs\n- Laptops with Nvidia GPUs are more expensive.","ef08504e":"It's the same laptop with the samsung CPU.","799c8ba5":"Now we can extract the information about the presence of a touchscreen or not","4d2f856b":"As seen previously, there are some companies which have just few laptops in the dataset:"}}