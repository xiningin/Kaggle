{"cell_type":{"6762647a":"code","394b71ce":"code","df52a5cd":"code","a10683f0":"code","676fcfb1":"code","d48754d0":"code","26afeddf":"code","f43dc002":"code","711ae16b":"code","4a2fb729":"markdown","f6b05738":"markdown","c5df7f81":"markdown","37aba441":"markdown","114d8083":"markdown","da6ec574":"markdown","5c20e32e":"markdown","26e39fe6":"markdown","35db8c8c":"markdown"},"source":{"6762647a":"import tensorflow as tf\n\n# Setup plotting\nimport matplotlib.pyplot as plt\n\nplt.style.use('seaborn-whitegrid')\n# Set Matplotlib defaults\nplt.rc('figure', autolayout=True)\nplt.rc('axes', labelweight='bold', labelsize='large',\n       titleweight='bold', titlesize=18, titlepad=10)\n\n# Setup feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.deep_learning_intro.ex2 import *","394b71ce":"import pandas as pd\n\nconcrete = pd.read_csv('..\/input\/dl-course-data\/concrete.csv')\nconcrete.head()","df52a5cd":"# YOUR CODE HERE\ninput_shape = [len(concrete.columns) - 1]\n\n# Check your answer\nq_1.check()","a10683f0":"# Lines below will give you a hint or solution code\n#q_1.hint()\n#q_1.solution()","676fcfb1":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\n# YOUR CODE HERE\nmodel = keras.Sequential([\n    # the hidden ReLU layers\n    layers.Dense(units=512, activation='relu', input_shape=input_shape),\n    layers.Dense(units=512, activation='relu', input_shape=input_shape),\n    layers.Dense(units=512, activation='relu', input_shape=input_shape),\n    # the linear output layer \n    layers.Dense(1),\n])\n\n# Check your answer\nq_2.check()","d48754d0":"# Lines below will give you a hint or solution code\n#q_2.hint()\n#q_2.solution()","26afeddf":"### YOUR CODE HERE: rewrite this to use activation layers\nmodel = keras.Sequential([\n    layers.Dense(32, input_shape=[8]),\n    layers.Activation('relu'),\n    layers.Dense(32),\n    layers.Activation('relu'),\n    layers.Dense(1)\n])\n\n# Check your answer\nq_3.check()","f43dc002":"# Lines below will give you a hint or solution code\n#q_3.hint()\n#q_3.solution()","711ae16b":"# YOUR CODE HERE: Change 'relu' to 'elu', 'selu', 'swish'... or something else\nactivation_layer = layers.Activation('elu')\n\nx = tf.linspace(-3.0, 3.0, 100)\ny = activation_layer(x) # once created, a layer is callable just like a function\n\nplt.figure(dpi=100)\nplt.plot(x, y)\nplt.xlim(-3, 3)\nplt.xlabel(\"Input\")\nplt.ylabel(\"Output\")\nplt.show()","4a2fb729":"In the *Concrete* dataset, your task is to predict the compressive strength of concrete manufactured according to various recipes.\n\nRun the next code cell without changes to load the dataset.","f6b05738":"# 1) Input Shape #\n\nThe target for this task is the column `'CompressiveStrength'`. The remaining columns are the features we'll use as inputs.\n\nWhat would be the input shape for this dataset?","c5df7f81":"# Introduction #\n\nIn the tutorial, we saw how to build deep neural networks by stacking layers inside a `Sequential` model. By adding an *activation function* after the hidden layers, we gave the network the ability to learn more complex (non-linear) relationships in the data.\n\nIn these exercises, you'll build a neural network with several hidden layers and then explore some activation functions beyond ReLU. Run this next cell to set everything up!","37aba441":"**This notebook is an exercise in the [Intro to Deep Learning](https:\/\/www.kaggle.com\/learn\/intro-to-deep-learning) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/ryanholbrook\/deep-neural-networks).**\n\n---\n","114d8083":"# Keep Going #\n\nNow move on to Lesson 3 and [**learn how to train neural networks**](https:\/\/www.kaggle.com\/ryanholbrook\/stochastic-gradient-descent) with stochastic gradient descent.","da6ec574":"# 3) Activation Layers #\n\nLet's explore activations functions some.\n\nThe usual way of attaching an activation function to a `Dense` layer is to include it as part of the definition with the `activation` argument. Sometimes though you'll want to put some other layer between the `Dense` layer and its activation function. (We'll see an example of this in Lesson 5 with *batch normalization*.) In this case, we can define the activation in its own `Activation` layer, like so:\n\n```\nlayers.Dense(units=8),\nlayers.Activation('relu')\n```\n\nThis is completely equivalent to the ordinary way: `layers.Dense(units=8, activation='relu')`.\n\nRewrite the following model so that each activation is in its own `Activation` layer.","5c20e32e":"# 2) Define a Model with Hidden Layers #\n\nNow create a model with three hidden layers, each having 512 units and the ReLU activation.  Be sure to include an output layer of one unit and no activation, and also `input_shape` as an argument to the first layer.","26e39fe6":"# Optional: Alternatives to ReLU #\n\nThere is a whole family of variants of the `'relu'` activation -- `'elu'`, `'selu'`, and `'swish'`, among others -- all of which you can use in Keras. Sometimes one activation will perform better than another on a given task, so you could consider experimenting with activations as you develop a model. The ReLU activation tends to do well on most problems, so it's a good one to start with.\n\nLet's look at the graphs of some of these. Change the activation from `'relu'` to one of the others named above. Then run the cell to see the graph. (Check out the [documentation](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/activations) for more ideas.)","35db8c8c":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/191966) to chat with other Learners.*"}}