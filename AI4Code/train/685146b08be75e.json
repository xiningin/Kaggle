{"cell_type":{"c64b8faa":"code","6bff13ee":"code","218c51d0":"code","b24fb725":"code","ab145bfa":"code","d8783408":"code","5be4a4c3":"code","cf29f5e0":"code","f5f03b08":"code","4d2281b3":"code","82f331d4":"code","02258355":"code","b7ab8748":"code","fd9f4fe7":"code","d78e3ebb":"code","4c714882":"code","27995a79":"code","14d8bf27":"code","074fdb12":"code","dde0e4f4":"code","80ceacb7":"code","647f0be4":"code","7c07eae1":"code","c3616130":"code","929236a0":"code","e1bf39cd":"code","8628179a":"code","4c772cbe":"code","7a89ac75":"code","972124a5":"code","a00bc943":"code","7b7c009d":"code","8572eeb9":"code","7e5663b3":"code","76480151":"code","116dc170":"code","6b1aea4b":"code","3cd3af2a":"code","f5f1083b":"code","393d59cc":"code","0a00868b":"code","0b15bb7b":"code","5060e8d7":"code","d1f605cf":"code","5d6e3843":"code","9997ea1b":"code","4f30b531":"code","f9513429":"code","32f41be8":"code","e6453dce":"code","ae830b19":"code","319d2588":"code","f82a0666":"code","ff896c39":"code","631af4cb":"code","277ac824":"code","eb253f0a":"code","6af77213":"code","b5f0835c":"code","5e1a398e":"code","548c53f9":"code","4dfff018":"code","7d0fecd4":"code","309cd7f1":"code","fe512ed6":"code","0945b3ea":"code","9dbc70c7":"code","48a55973":"code","bd269455":"code","4712b611":"code","f852a0a3":"code","1ae3cee7":"code","c0b78329":"code","0ea25ee4":"code","1cfc5ef1":"code","368da290":"code","53397057":"code","1064e545":"markdown","e20e1bde":"markdown","dd3e16c6":"markdown","6bed29d4":"markdown","64039465":"markdown","6b342091":"markdown","9006b252":"markdown","90b0ae59":"markdown","0a6f9fe2":"markdown"},"source":{"c64b8faa":"#importing required libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","6bff13ee":"train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","218c51d0":"train.head()","b24fb725":"test.head()","ab145bfa":"train.shape\n","d8783408":"test.shape","5be4a4c3":"train.describe()","cf29f5e0":"test.describe()","f5f03b08":"train.info()","4d2281b3":"test.info()","82f331d4":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","02258355":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","b7ab8748":"train.isnull().sum().sort_values(ascending=False)[0:20]","fd9f4fe7":"test.isnull().sum().sort_values(ascending=False)[0:34]","d78e3ebb":"train.columns.tolist","4c714882":"test.columns.tolist","27995a79":"lst=['PoolQC','MiscFeature','Alley','Fence'] #droping columns which have more null values\ntrain.drop(lst,axis=1,inplace=True)","14d8bf27":"test.drop(lst,axis=1,inplace=True)","074fdb12":"list1 = ['BsmtQual', 'FireplaceQu', 'GarageType', 'GarageCond', 'GarageFinish', 'GarageQual', 'MasVnrType',\n         'BsmtExposure','BsmtFinType2']\nfor col in list1:\n    train[col]=train[col].fillna(train[col].mode()[0])\n    test[col]=test[col].fillna(test[col].mode()[0])","dde0e4f4":"train['LotFrontage']=train['LotFrontage'].fillna(train['LotFrontage'].mean())","80ceacb7":"test['LotFrontage']=test['LotFrontage'].fillna(test['LotFrontage'].mean())","647f0be4":"train.drop('GarageYrBlt',axis=1,inplace=True)","7c07eae1":"test.drop('GarageYrBlt',axis=1,inplace=True)","c3616130":"train['BsmtCond']=train['BsmtCond'].fillna(train['BsmtCond'].mode()[0])\ntest['BsmtCond']=test['BsmtCond'].fillna(test['BsmtCond'].mode()[0])\ntrain['BsmtFinType1']=train['BsmtFinType1'].fillna(train['BsmtFinType1'].mode()[0])\ntest['BsmtFinType1']=test['BsmtFinType1'].fillna(test['BsmtFinType1'].mode()[0])","929236a0":"train['MasVnrArea']=train['MasVnrArea'].fillna(train['MasVnrArea'].mode()[0])\ntest['MasVnrArea']=test['MasVnrArea'].fillna(test['MasVnrArea'].mode()[0])","e1bf39cd":"train['Electrical']=train['Electrical'].fillna(train['Electrical'].mode()[0])","8628179a":"train.isnull().sum().sort_values(ascending=False)[0:5] #all train null values have been cleaned","4c772cbe":"columns = [ 'Utilities','BsmtFullBath', 'BsmtHalfBath', 'Functional', 'SaleType', 'Exterior2nd', \n           'Exterior1st', 'KitchenQual']\ncolumns1 = ['GarageCars', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',  'TotalBsmtSF', 'GarageArea']\n\nfor item in columns:\n    test[item] = test[item].fillna(test[item].mode()[0])\nfor item in columns1:\n    test[item] = test[item].fillna(test[item].mean())","7a89ac75":"test['MSZoning']=test['MSZoning'].fillna(test['MSZoning'].mode()[0])","972124a5":"test.isnull().sum().sort_values(ascending=False)[0:5] #test data also been cleaned","a00bc943":"sns.distplot(train['SalePrice'])","7b7c009d":"plt.figure(figsize=(40,30))\nsns.heatmap(train.corr(),annot=True)","8572eeb9":"sns.jointplot(train['OverallQual'],train['SalePrice'])","7e5663b3":"sns.lmplot(x='PoolArea',y='SalePrice',data=train)","76480151":"sns.lmplot(x='GrLivArea',y='SalePrice',data=train,palette='viridis')","116dc170":"train.select_dtypes(include=object).columns.tolist","6b1aea4b":"test.select_dtypes(include=object).columns.tolist","3cd3af2a":"columns=['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'SaleType', 'SaleCondition']","f5f1083b":"def One_hot_encoding(columns):\n   \n    df_final=train\n    i=0\n    for fields in columns:\n        df1=pd.get_dummies(train[fields],drop_first=True)\n        \n        train.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:           \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([train,df_final],axis=1)\n        \n    return df_final","393d59cc":"train= One_hot_encoding(columns)","0a00868b":"train.shape","0b15bb7b":"train =train.loc[:,~train.columns.duplicated()]","5060e8d7":"train.shape","d1f605cf":"def One_hot_encoding(columns):\n   \n    df_final=test\n    i=0\n    for fields in columns:\n        df1=pd.get_dummies(test[fields],drop_first=True)\n        \n        test.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:           \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([test,df_final],axis=1)\n        \n    return df_final","5d6e3843":"test= One_hot_encoding(columns)\n","9997ea1b":"test=test.loc[:,~test.columns.duplicated()]","4f30b531":"test.shape","f9513429":"train.head(3)","32f41be8":"test.head(3)","e6453dce":"common=(train.columns)&(test.columns)","ae830b19":"lst1=['NoSeWa', '2.5Fin', 'CompShg', 'Membran', 'Metal', 'Roll',\n       'Other', 'GasA', 'OthW', 'Mix']","319d2588":"train.drop(lst1,axis=1,inplace=True)","f82a0666":"X=train.drop('SalePrice',axis=1)\nY=train['SalePrice']","ff896c39":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=101)","631af4cb":"from sklearn.linear_model import LinearRegression\nlm=LinearRegression()","277ac824":"lm.fit(X_train,Y_train)","eb253f0a":"predictions=lm.predict(X_test)","6af77213":"from sklearn import metrics\nmetrics.r2_score(Y_test,predictions)","b5f0835c":"import xgboost as xgb\nmy_model = xgb.XGBRegressor(n_estimators=1000,learning_rate = 0.1)","5e1a398e":"my_model.fit(X_train,Y_train)","548c53f9":"predictions1 = my_model.predict(X_test)","4dfff018":"from sklearn import metrics\nmetrics.r2_score(Y_test,predictions1)","7d0fecd4":"from sklearn.ensemble import RandomForestRegressor\n\nregressor = RandomForestRegressor(n_estimators=1000)","309cd7f1":"from sklearn.model_selection import RandomizedSearchCV\n\nn_estimators = [100, 500, 900]\ncriterion = ['mse', 'mae']\ndepth = [3,5,10,15]\nmin_split=[2,3,4]\nmin_leaf=[2,3,4]\nbootstrap = ['True', 'False']\nverbose = [5]\n\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':depth,\n    'criterion':criterion,\n    'bootstrap':bootstrap,\n    'verbose':verbose,\n    'min_samples_split':min_split,\n    'min_samples_leaf':min_leaf\n    }\n\nrandom_cv = RandomizedSearchCV(estimator=regressor,\n                               param_distributions=hyperparameter_grid,\n                               cv=5, \n                               scoring = 'neg_mean_absolute_error',\n                               n_jobs = 4, \n                               return_train_score = True,\n                               random_state=42)","fe512ed6":"regressor.fit(X_train,Y_train)","0945b3ea":"y=regressor.predict(X_test)","9dbc70c7":"from sklearn import metrics\nmetrics.r2_score(Y_test,y)","48a55973":"import lightgbm as lgbm\nmy = lgbm.LGBMRegressor(objective='regression', \n                                       num_leaves=4,\n                                       learning_rate=0.01, \n                                       n_estimators=12000, \n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.4, \n                                       )","bd269455":"my.fit(X_train,Y_train)","4712b611":"res=my.predict(X_test)","f852a0a3":"from sklearn import metrics\nmetrics.r2_score(Y_test,res)","1ae3cee7":"final=my.predict(test)","c0b78329":"final","0ea25ee4":"final1=regressor.predict(test)\nfinal1","1cfc5ef1":"#choosing best predictions in submission file","368da290":"df_submission=pd.DataFrame(test['Id'])\ndf_submission['SalePrice']=final","53397057":"df_submission.to_csv('Submission_file.csv',index=False)","1064e545":"# RANDOM FOREST REGRESSOR","e20e1bde":"# ONE HOT ENCODING","dd3e16c6":"# LIGHTGBM REGRESSOR","6bed29d4":"# HOUSE PRICE PREDICTIONS","64039465":"# XGBOOSTING","6b342091":"# DATA CLEANING AND PREPROCESSING","9006b252":"# TRAIN TEST SPLIT","90b0ae59":"# LINEAR REGRESSION","0a6f9fe2":"# EXPLORATY DATA ANALYSIS"}}