{"cell_type":{"e3038952":"code","9e9d7394":"code","0455f773":"code","d04ee5f2":"code","2c69f3c9":"code","6521236e":"code","be5cb6bb":"code","6d8f3197":"markdown","21debe0c":"markdown","00a68f25":"markdown","c5ef34da":"markdown","f1f3e9df":"markdown","7d2a2f50":"markdown","e1defae5":"markdown","432bddf0":"markdown","2491fa46":"markdown","bc116638":"markdown","4879e3e3":"markdown","53d1526f":"markdown"},"source":{"e3038952":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e9d7394":"df = pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')\ndf","0455f773":"df.isnull().sum()","d04ee5f2":"X = df.iloc[:500]\nx = X.drop(columns=['habitat'])\nx","2c69f3c9":"Y = df.iloc[:500]\ny = Y['habitat']\ny","6521236e":"from sklearn import preprocessing \nlabel_encoder = preprocessing.LabelEncoder()  \nx= x.apply(label_encoder.fit_transform)\nprint(x)\ny= label_encoder.fit_transform(y)\nprint(y)","be5cb6bb":"from sklearn.linear_model import LarsCV\n#x, y = make_regression(n_samples=200, noise=4.0, random_state=0)\nreg = LarsCV(cv=5).fit(x, y)\nreg.score(x, y)","6d8f3197":"* Because LARS is based upon an iterative refitting of the residuals, it would appear to be especially sensitive to the effects of noise.","21debe0c":"https:\/\/docs.w3cub.com\/scikit_learn\/modules\/generated\/sklearn.linear_model.larscv\/\nhttps:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LarsCV.html","00a68f25":"# Pros","c5ef34da":"# Taking only 500 values from dataset","f1f3e9df":"# Describing Null values","7d2a2f50":"# Reference","e1defae5":"# Cons","432bddf0":"* It is numerically efficient in contexts where the number of features is significantly greater than the number of samples.\n* It is easily modified to produce solutions for other estimators, like the Lasso.","2491fa46":"Least-angle regression (LARS) is a regression algorithm for high-dimensional data, developed by Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani. LARS is similar to forward stepwise regression. At each step, it finds the feature most correlated with the target. When there are multiple features having equal correlation, instead of continuing along the same feature, it proceeds in a direction equiangular between the features.","bc116638":"# LarsCV","4879e3e3":"# Label Encoding","53d1526f":"# LarsCV Algorithm"}}