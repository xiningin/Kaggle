{"cell_type":{"068b392f":"code","90f23eaf":"code","ec14be0e":"code","7c5a71c8":"code","196a40c0":"code","8617b44f":"code","35aa2061":"code","4a974294":"code","412f16ab":"code","81e8fc8c":"code","4be24b1f":"code","66889037":"code","8f6368f0":"code","298b4615":"code","8dd5b0c3":"code","2fa33e7f":"code","0b4511e8":"code","6b66995f":"code","5a7fa4f9":"code","2abc0b7c":"markdown"},"source":{"068b392f":"!pip install pytorchcv pretrainedmodels natsort","90f23eaf":"import collections\nimport copy\nimport datetime\nimport errno\nimport gc\nimport glob\nimport json\nimport logging\nimport os\nimport pickle\nimport random\nimport tempfile\nimport time\nimport warnings\nfrom collections import defaultdict, deque\nfrom functools import partial\nfrom pprint import pprint\n\nimport albumentations as albu\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch._six\nimport torch.distributed as dist\nimport torchvision\nfrom joblib import Parallel, delayed\nfrom matplotlib import patches\nfrom natsort import natsorted\nfrom PIL import Image, ImageFile\nfrom skimage.measure import label, regionprops\nfrom sklearn.model_selection import KFold, train_test_split\nfrom torch import nn\nfrom torchvision import transforms as T\nfrom torchvision.models import resnet\nfrom torchvision.models.detection import FasterRCNN, MaskRCNN\nfrom torchvision.models.detection.backbone_utils import (BackboneWithFPN,\n                                                         resnet_fpn_backbone)\nfrom torchvision.models.detection.faster_rcnn import FastRCNNPredictor\nfrom torchvision.models.detection.mask_rcnn import MaskRCNNPredictor\nfrom torchvision.models.detection.rpn import AnchorGenerator\nfrom torchvision.models.detection.transform import GeneralizedRCNNTransform\nfrom torchvision.ops import misc as misc_nn_ops\nfrom tqdm import tqdm\n\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")","ec14be0e":"SEED = 1337\nNUM_DEBUG = None\nTRAIN = True\nCHECKPOINT_RESUME = None\n\nCHECKPOINT_DIR = \".\/\"\nRUN_NAME = \"mrcnn_trialThird_resnet18\"\nROOT_IMG = \"..\/input\/severstal-steel-defect-detection\/train_images\/\"\nROOT_TEST = \"..\/input\/severstal-steel-defect-detection\/test_images\/\"\nDEFECT_COLS = [\"def_{}\".format(x) for x in range(1, 5)]\n\nNUM_EPOCHS = 10\nUPDATE_FREQ = 1\nNUM_CLASSES = len(DEFECT_COLS) + 1\nPARALLEL = False\nDEVICE = \"cuda\"\n\nBATCH_SIZE = 24\nHEIGHT = 256\nWIDTH = 1600\nHEIGHT_VAL = 256\nWIDTH_VAL = 1600","7c5a71c8":"class RunLogger(object):\n    def __init__(self, fname):\n        self.fname = fname\n\n    def initialize(self):\n        import importlib\n\n        importlib.reload(logging)\n        logging.basicConfig(\n            filename=self.fname,\n            format=\"%(asctime)s: %(message)s\",\n            datefmt=\"%m\/%d\/%Y %I:%M:%S %p\",\n            level=logging.INFO,\n        )\n        return\n\n    def log(self, msg):\n        logging.info(msg)\n        return\n\n\nclass SmoothedValue(object):\n    \"\"\"Track a series of values and provide access to smoothed values over a\n    window or the global series average.\n    \"\"\"\n\n    def __init__(self, window_size=20, fmt=None):\n        if fmt is None:\n            fmt = \"{median:.4f} ({global_avg:.4f})\"\n        self.deque = deque(maxlen=window_size)\n        self.total = 0.0\n        self.count = 0\n        self.fmt = fmt\n\n    def update(self, value, n=1):\n        self.deque.append(value)\n        self.count += n\n        self.total += value * n\n\n    def synchronize_between_processes(self):\n        \"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"\n        if not is_dist_avail_and_initialized():\n            return\n        t = torch.tensor([self.count, self.total], dtype=torch.float64, device=\"cuda\")\n        dist.barrier()\n        dist.all_reduce(t)\n        t = t.tolist()\n        self.count = int(t[0])\n        self.total = t[1]\n\n    @property\n    def median(self):\n        d = torch.tensor(list(self.deque))\n        return d.median().item()\n\n    @property\n    def avg(self):\n        d = torch.tensor(list(self.deque), dtype=torch.float32)\n        return d.mean().item()\n\n    @property\n    def global_avg(self):\n        return self.total \/ self.count\n\n    @property\n    def max(self):\n        return max(self.deque)\n\n    @property\n    def value(self):\n        return self.deque[-1]\n\n    def __str__(self):\n        return self.fmt.format(\n            median=self.median,\n            avg=self.avg,\n            global_avg=self.global_avg,\n            max=self.max,\n            value=self.value,\n        )\n\n\ndef all_gather(data):\n    \"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"\n    world_size = get_world_size()\n    if world_size == 1:\n        return [data]\n\n    # serialized to a Tensor\n    buffer = pickle.dumps(data)\n    storage = torch.ByteStorage.from_buffer(buffer)\n    tensor = torch.ByteTensor(storage).to(\"cuda\")\n\n    # obtain Tensor size of each rank\n    local_size = torch.tensor([tensor.numel()], device=\"cuda\")\n    size_list = [torch.tensor([0], device=\"cuda\") for _ in range(world_size)]\n    dist.all_gather(size_list, local_size)\n    size_list = [int(size.item()) for size in size_list]\n    max_size = max(size_list)\n\n    # receiving Tensor from all ranks\n    # we pad the tensor because torch all_gather does not support\n    # gathering tensors of different shapes\n    tensor_list = []\n    for _ in size_list:\n        tensor_list.append(torch.empty((max_size,), dtype=torch.uint8, device=\"cuda\"))\n    if local_size != max_size:\n        padding = torch.empty(\n            size=(max_size - local_size,), dtype=torch.uint8, device=\"cuda\"\n        )\n        tensor = torch.cat((tensor, padding), dim=0)\n    dist.all_gather(tensor_list, tensor)\n\n    data_list = []\n    for size, tensor in zip(size_list, tensor_list):\n        buffer = tensor.cpu().numpy().tobytes()[:size]\n        data_list.append(pickle.loads(buffer))\n\n    return data_list\n\n\ndef reduce_dict(input_dict, average=True):\n    \"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that all processes\n    have the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"\n    world_size = get_world_size()\n    if world_size < 2:\n        return input_dict\n    with torch.no_grad():\n        names = []\n        values = []\n        # sort the keys so that they are consistent across processes\n        for k in sorted(input_dict.keys()):\n            names.append(k)\n            values.append(input_dict[k])\n        values = torch.stack(values, dim=0)\n        dist.all_reduce(values)\n        if average:\n            values \/= world_size\n        reduced_dict = {k: v for k, v in zip(names, values)}\n    return reduced_dict\n\n\nclass MetricLogger(object):\n    def __init__(self, delimiter=\"\\t\", logger=None):\n        self.meters = defaultdict(SmoothedValue)\n        self.delimiter = delimiter\n        self.logger = logger\n\n    def update(self, **kwargs):\n        for k, v in kwargs.items():\n            if isinstance(v, torch.Tensor):\n                v = v.item()\n            assert isinstance(v, (float, int))\n            self.meters[k].update(v)\n\n    def __getattr__(self, attr):\n        if attr in self.meters:\n            return self.meters[attr]\n        if attr in self.__dict__:\n            return self.__dict__[attr]\n        raise AttributeError(\n            \"'{}' object has no attribute '{}'\".format(type(self).__name__, attr)\n        )\n\n    def __str__(self):\n        loss_str = []\n        for name, meter in self.meters.items():\n            loss_str.append(\"{}: {}\".format(name, str(meter)))\n        return self.delimiter.join(loss_str)\n\n    def synchronize_between_processes(self):\n        for meter in self.meters.values():\n            meter.synchronize_between_processes()\n\n    def add_meter(self, name, meter):\n        self.meters[name] = meter\n\n    def log_every(self, iterable, print_freq, header=None):\n        i = 0\n        if not header:\n            header = \"\"\n        start_time = time.time()\n        end = time.time()\n        iter_time = SmoothedValue(fmt=\"{avg:.4f}\")\n        data_time = SmoothedValue(fmt=\"{avg:.4f}\")\n        space_fmt = \":\" + str(len(str(len(iterable)))) + \"d\"\n        log_msg = self.delimiter.join(\n            [\n                header,\n                \"[{0\" + space_fmt + \"}\/{1}]\",\n                \"eta: {eta}\",\n                \"{meters}\",\n                \"time: {time}\",\n                \"data: {data}\",\n                \"max mem: {memory:.0f}\",\n            ]\n        )\n        MB = 1024.0 * 1024.0\n        for obj in iterable:\n            data_time.update(time.time() - end)\n            yield obj\n            iter_time.update(time.time() - end)\n            if i % print_freq == 0 or i == len(iterable) - 1:\n                eta_seconds = iter_time.global_avg * (len(iterable) - i)\n                eta_string = str(datetime.timedelta(seconds=int(eta_seconds)))\n                print(\n                    log_msg.format(\n                        i,\n                        len(iterable),\n                        eta=eta_string,\n                        meters=str(self),\n                        time=str(iter_time),\n                        data=str(data_time),\n                        memory=torch.cuda.max_memory_allocated() \/ MB,\n                    )\n                )\n                if self.logger is not None:\n                    self.logger.log(\n                        log_msg.format(\n                            i,\n                            len(iterable),\n                            eta=eta_string,\n                            meters=str(self),\n                            time=str(iter_time),\n                            data=str(data_time),\n                            memory=torch.cuda.max_memory_allocated() \/ MB,\n                        )\n                    )\n            i += 1\n            end = time.time()\n        total_time = time.time() - start_time\n        total_time_str = str(datetime.timedelta(seconds=int(total_time)))\n        print(\n            \"{} Total time: {} ({:.4f} s \/ it)\".format(\n                header, total_time_str, total_time \/ len(iterable)\n            )\n        )\n        if self.logger is not None:\n            self.logger.log(\n                \"{} Total time: {} ({:.4f} s \/ it)\".format(\n                    header, total_time_str, total_time \/ len(iterable)\n                )\n            )\n\n\ndef collate_fn(batch):\n    return tuple(zip(*batch))\n\n\ndef warmup_lr_scheduler(optimizer, warmup_iters, warmup_factor):\n    def f(x):\n        if x >= warmup_iters:\n            return 1\n        alpha = float(x) \/ warmup_iters\n        return warmup_factor * (1 - alpha) + alpha\n\n    return torch.optim.lr_scheduler.LambdaLR(optimizer, f)\n\n\ndef mkdir(path):\n    try:\n        os.makedirs(path)\n    except OSError as e:\n        if e.errno != errno.EEXIST:\n            raise\n\n\ndef setup_for_distributed(is_master):\n    \"\"\"\n    This function disables printing when not in master process\n    \"\"\"\n    import builtins as __builtin__\n\n    builtin_print = __builtin__.print\n\n    def print(*args, **kwargs):\n        force = kwargs.pop(\"force\", False)\n        if is_master or force:\n            builtin_print(*args, **kwargs)\n\n    __builtin__.print = print\n\n\ndef is_dist_avail_and_initialized():\n    if not dist.is_available():\n        return False\n    if not dist.is_initialized():\n        return False\n    return True\n\n\ndef get_world_size():\n    if not is_dist_avail_and_initialized():\n        return 1\n    return dist.get_world_size()\n\n\ndef get_rank():\n    if not is_dist_avail_and_initialized():\n        return 0\n    return dist.get_rank()\n\n\ndef is_main_process():\n    return get_rank() == 0\n\n\ndef save_on_master(*args, **kwargs):\n    if is_main_process():\n        torch.save(*args, **kwargs)\n\n\ndef init_distributed_mode(args):\n    if \"RANK\" in os.environ and \"WORLD_SIZE\" in os.environ:\n        args.rank = int(os.environ[\"RANK\"])\n        args.world_size = int(os.environ[\"WORLD_SIZE\"])\n        args.gpu = int(os.environ[\"LOCAL_RANK\"])\n    elif \"SLURM_PROCID\" in os.environ:\n        args.rank = int(os.environ[\"SLURM_PROCID\"])\n        args.gpu = args.rank % torch.cuda.device_count()\n    else:\n        print(\"Not using distributed mode\")\n        args.distributed = False\n        return\n\n    args.distributed = True\n\n    torch.cuda.set_device(args.gpu)\n    args.dist_backend = \"nccl\"\n    print(\n        \"| distributed init (rank {}): {}\".format(args.rank, args.dist_url), flush=True\n    )\n    torch.distributed.init_process_group(\n        backend=args.dist_backend,\n        init_method=args.dist_url,\n        world_size=args.world_size,\n        rank=args.rank,\n    )\n    torch.distributed.barrier()\n    setup_for_distributed(args.rank == 0)","196a40c0":"# https:\/\/www.kaggle.com\/paulorzp\/rle-functions-run-lenght-encode-decode\ndef mask2rle(img):\n    \"\"\"\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    \"\"\"\n    pixels = img.T.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return \" \".join(str(x) for x in runs)\n\n\n# https:\/\/www.kaggle.com\/titericz\/building-and-visualizing-masks\ndef rle2mask(rle, imgshape):\n    width = imgshape[0]\n    height = imgshape[1]\n    mask = np.zeros(width * height).astype(np.uint8)\n    array = np.asarray([int(x) for x in rle.split()])\n    starts = array[0::2]\n    lengths = array[1::2]\n    current_position = 0\n    for index, start in enumerate(starts):\n        mask[int(start) : int(start + lengths[index])] = 1\n        current_position += lengths[index]\n    return np.flipud(np.rot90(mask.reshape(height, width), k=1))\n\n\ndef create_bboxes(mask, area_threshold=100):\n    label_image = label(mask)\n    regions = regionprops(label_image)\n    bboxes = []\n    for r in regions:\n        ymin, xmin, ymax, xmax = r.bbox\n        bbox = [xmin, ymin, xmax, ymax]\n        bboxes.append(bbox)\n    bboxes = np.asarray(bboxes)\n    area = (bboxes[:, 3] - bboxes[:, 1]) * (bboxes[:, 2] - bboxes[:, 0])\n    bboxes_valid = np.where(area > area_threshold)[0]\n    bboxes = bboxes[bboxes_valid]\n    area = area[bboxes_valid]\n    return bboxes, area\n\n\ndef create_instance_masks(mask, bboxes):\n    mask_new = np.zeros(((len(bboxes),) + mask.shape), dtype=np.uint8)\n    for idx, b in enumerate(bboxes):\n        xmin, ymin, xmax, ymax = b\n        mask_subset = mask[ymin:ymax, xmin:xmax]\n        mask_new[idx][ymin:ymax, xmin:xmax] = mask_subset\n    return mask_new\n\n\ndef _get_iou_types(model):\n    model_without_ddp = model\n    if isinstance(model, torch.nn.parallel.DistributedDataParallel):\n        model_without_ddp = model.module\n    iou_types = [\"bbox\"]\n    if isinstance(model_without_ddp, torchvision.models.detection.MaskRCNN):\n        iou_types.append(\"segm\")\n    if isinstance(model_without_ddp, torchvision.models.detection.KeypointRCNN):\n        iou_types.append(\"keypoints\")\n    return iou_types\n\n\ndef get_coco_api_from_dataset(dataset):\n    for _ in range(10):\n        if isinstance(dataset, torchvision.datasets.CocoDetection):\n            break\n        if isinstance(dataset, torch.utils.data.Subset):\n            dataset = dataset.dataset\n    if isinstance(dataset, torchvision.datasets.CocoDetection):\n        return dataset.coco\n    return convert_to_coco_api(dataset)","8617b44f":"class SteelMrcnnDataset(torch.utils.data.Dataset):\n    def __init__(self, image_dir, df, transform=None, test=False, area_threshold=100):\n        self.df = df\n        self.transform = transform\n        self.image_dir = image_dir\n        self.image_info = collections.defaultdict(dict)\n        self.ids = self.df[\"ImageId\"].unique().tolist()\n        self.test = test\n        self.area_threshold = area_threshold\n\n        counter = 0\n        for idx, image_id in tqdm(enumerate(self.ids)):\n            df_img = self.df.loc[self.df[\"ImageId\"] == image_id]\n            image_path = os.path.join(self.image_dir, image_id)\n            self.image_info[counter][\"image_id\"] = image_id\n            self.image_info[counter][\"image_path\"] = image_path\n            if not self.test:\n                self.image_info[counter][\"annotations\"] = df_img.iloc[0][DEFECT_COLS]\n            counter += 1\n\n    def __getitem__(self, idx):\n        info = self.image_info[idx]\n        img_path = self.image_info[idx][\"image_path\"]\n        img = cv2.imread(img_path)[:, :, ::-1]\n        if not self.test:\n            img_df = info[\"annotations\"]\n\n            mask_cols = img_df.index[img_df.notnull()]\n            mask_cols = [x for x in mask_cols if \"def_\" in x]\n            mask_df = img_df[mask_cols]\n\n            labels = []\n            masks_instances = []\n            areas = []\n            bboxes = []\n            for c in mask_df.index:\n                class_ = int(c.split(\"_\")[1])\n                mask = rle2mask(mask_df[c], img.shape)\n                bbox, area = create_bboxes(mask, area_threshold=self.area_threshold)\n                classes = np.full(len(bbox), class_)\n                labels.append(classes)\n                masks_instance = create_instance_masks(mask, bbox)\n                masks_instances.append(masks_instance)\n                bboxes.append(bbox)\n                areas.append(area)\n\n            labels = np.concatenate(labels)\n            masks_instances = np.concatenate(masks_instances)\n            areas = np.concatenate(areas)\n            bboxes = np.concatenate(bboxes)\n            assert len(bboxes) > 0\n            assert len(masks_instances) == len(labels) == len(areas) == len(bboxes)\n            boxes = bboxes.tolist()\n\n            if self.transform is not None:\n                augmented = self.transform(\n                    image=img, bboxes=boxes, mask=masks_instances, labels=labels\n                )\n                img = augmented[\"image\"]\n                masks_instances = augmented[\"mask\"]\n                boxes = augmented[\"bboxes\"]\n                labels = augmented[\"labels\"]\n        else:\n            if self.transform is not None:\n                augmented = self.transform(image=img)\n\n        if not self.test:\n            boxes = torch.as_tensor(boxes, dtype=torch.float32)\n            masks = torch.as_tensor(masks_instances, dtype=torch.uint8)\n            labels = torch.as_tensor(labels, dtype=torch.int64)\n            try:\n                area = (boxes[:, 3] - boxes[:, 1]) * (boxes[:, 2] - boxes[:, 0])\n            except Exception as e:\n                area = 0.\n            iscrowd = torch.zeros((len(boxes)), dtype=torch.int64)\n            \n        img = self.preproc_image(img)\n        image_id = torch.tensor([idx])\n\n        if not self.test:\n            target = {}\n            target[\"boxes\"] = boxes\n            target[\"labels\"] = labels\n            target[\"masks\"] = masks\n            target[\"image_id\"] = image_id\n            target[\"area\"] = area\n            target[\"iscrowd\"] = iscrowd\n            return img, target\n        else:\n            return (img,)\n\n    def __len__(self):\n        return len(self.image_info)\n\n    def preproc_image(self, img):\n        img = np.moveaxis(img, -1, 0).astype(np.float32)\n        img = torch.from_numpy(img)\n        img = img \/ 255.0\n        return img","35aa2061":"def get_aug(aug):\n    return albu.Compose(aug)\n\n\ndef train_one_epoch(\n    model,\n    optimizer,\n    data_loader,\n    device,\n    epoch,\n    print_freq,\n    save=True,\n    logger=None,\n    update_freq=1,\n    run_dir=None,\n):\n    model.train()\n    metric_logger = MetricLogger(delimiter=\"  \", logger=logger)\n    metric_logger.add_meter(\"lr\", SmoothedValue(window_size=1, fmt=\"{value:.6f}\"))\n    header = \"Epoch: [{}]\".format(epoch)\n\n    lr_scheduler = None\n    if epoch == 0:\n        warmup_factor = 1.0 \/ 1000\n        warmup_iters = min(1000, len(data_loader) - 1)\n\n        lr_scheduler = warmup_lr_scheduler(optimizer, warmup_iters, warmup_factor)\n\n    step = 0\n    for images, targets in metric_logger.log_every(data_loader, print_freq, header):\n        images = list(image.contiguous().cuda(non_blocking=True) for image in images)\n        targets = [\n            {k: v.cuda(non_blocking=True) for k, v in t.items()} for t in targets\n        ]\n        # targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n        # print(\"img0 shape: {}\".format(images[0].shape))\n\n        # images = torch.stack(images, dim=0)\n        loss_dict = model(images, targets)\n        losses = sum(loss for loss in loss_dict.values())\n        # reduce losses over all GPUs for logging purposes\n        loss_dict_reduced = reduce_dict(loss_dict)\n        losses_reduced = sum(loss for loss in loss_dict_reduced.values())\n\n        optimizer.zero_grad()\n        losses.backward()\n        if step % update_freq == 0:\n            optimizer.step()\n\n        if lr_scheduler is not None:\n            lr_scheduler.step()\n\n        metric_logger.update(loss=losses_reduced, **loss_dict_reduced)\n        metric_logger.update(lr=optimizer.param_groups[0][\"lr\"])\n        step += 1\n\n    if save:\n        checkpoint_fname = os.path.join(run_dir, \"model_epoch_{}.pth.tar\".format(epoch))\n        print(\"save model weights at: {}\".format(checkpoint_fname))\n        torch.save(model.state_dict(), checkpoint_fname)\n\n    return\n\n\ndef validate_epoch(model, data_loader, device, print_freq, logger=None, COCO=True):\n    \"\"\"\n    Function for validation loss computation\n    \"\"\"\n    model.train()\n    metric_logger = MetricLogger(delimiter=\"  \", logger=logger)\n    metric_logger.add_meter(\"lr\", SmoothedValue(window_size=1, fmt=\"{value:.6f}\"))\n    header = \"Validation:\"\n\n    iter_ = 0\n    losses_df = []\n    for images, targets in data_loader:\n        with torch.no_grad():\n            if COCO:\n                images = list(\n                    image.contiguous().cuda(non_blocking=True) for image in images\n                )\n            else:\n                images = list(\n                    image.contiguous().cuda(non_blocking=True) for image in images\n                )\n                images = torch.stack(images, dim=0)\n            targets = [\n                {k: v.cuda(non_blocking=True) for k, v in t.items()} for t in targets\n            ]\n            loss_dict = model(images, targets)\n            losses = sum(loss for loss in loss_dict.values())\n            loss_dict_reduced = reduce_dict(loss_dict)\n            loss_dict_reduced = {k: v.item() for k, v in loss_dict_reduced.items()}\n            losses_df.append(loss_dict_reduced)\n\n    loss_df_reduced = pd.DataFrame.from_records(losses_df).mean(axis=0)\n    logger.log(loss_df_reduced)\n\n    return loss_df_reduced","4a974294":"df_path = \"..\/input\/severstal-steel-defect-detection\/train.csv\"\ntrain_df = pd.read_csv(df_path)\ntrain_df = train_df[train_df[\"EncodedPixels\"].notnull()]\n\ntest_df_orig = pd.read_csv(\"..\/input\/severstal-steel-defect-detection\/sample_submission.csv\")\ntest_df = test_df_orig.copy()\ntest_df[\"ImageId\"], test_df[\"ClassId\"] = zip(\n    *test_df[\"ImageId_ClassId\"].str.split(\"_\")\n)\ntest_df[\"ClassId\"] = test_df[\"ClassId\"].astype(int)\ntest_df = test_df.pivot(index=\"ImageId\", columns=\"ClassId\", values=\"EncodedPixels\")\ntest_df = test_df.reset_index()\nprint(test_df.head())\n\n# some preprocessing\n# https:\/\/www.kaggle.com\/amanooo\/defect-detection-starter-u-net\ntrain_df[\"ImageId\"], train_df[\"ClassId\"] = zip(\n    *train_df[\"ImageId_ClassId\"].str.split(\"_\")\n)\ntrain_df[\"ClassId\"] = train_df[\"ClassId\"].astype(int)\ntrain_df = train_df.pivot(index=\"ImageId\", columns=\"ClassId\", values=\"EncodedPixels\")\ntrain_df[\"defects\"] = train_df.count(axis=1)\ntrain_df = train_df.reset_index()\nCOLNAMES = [\"ImageId\"] + DEFECT_COLS + [\"defects\"]\ntrain_df.columns = COLNAMES\n\nif NUM_DEBUG is not None:\n    train_df = train_df.iloc[:NUM_DEBUG, :]\n\ntr_df, val_df = train_test_split(train_df, test_size=0.2, stratify=train_df[\"defects\"], random_state=SEED)\nprint(\"train df shape: {}\".format(tr_df.shape))\nprint(\"valid df shape: {}\".format(val_df.shape))\ntr_df.head()","412f16ab":"train_aug = get_aug(\n    [\n        albu.RandomBrightnessContrast(0.2),\n        albu.RandomGamma((90, 110)),\n    ]\n)\n\n\n# TODO: integrate augmentation\ntrain_dataset = SteelMrcnnDataset(ROOT_IMG, tr_df, transform=train_aug)\ntrain_loader = torch.utils.data.DataLoader(\n    train_dataset,\n    batch_size=BATCH_SIZE,\n    shuffle=True,\n    num_workers=6,\n    collate_fn=lambda x: tuple(zip(*x)),\n    pin_memory=True,\n)\n\nvalid_dataset = SteelMrcnnDataset(ROOT_IMG, val_df, transform=None, area_threshold=0)\nvalid_loader = torch.utils.data.DataLoader(\n    valid_dataset,\n    batch_size=BATCH_SIZE,\n    shuffle=False,\n    num_workers=6,\n    collate_fn=lambda x: tuple(zip(*x)),\n    pin_memory=True,\n)","81e8fc8c":"rid = np.random.randint(0, len(train_dataset))\nfor i in range(5):\n    img_, target_ = train_dataset.__getitem__(rid)\n    boxes_ = target_['boxes'].cpu().detach().numpy()\n    fig, ax = plt.subplots(2, 1, figsize=(24, 10))\n    img = img_.cpu().detach().numpy() * 255\n    img = np.moveaxis(img, 0, -1).astype(np.uint8)\n    # different mean and std depending on augmentation applied \n    print(img.mean(), img.std())\n    ax[0].imshow(img)\n    for i in range(len(boxes_)):\n        ax[0].imshow(target_['masks'][i].numpy(), alpha=0.3, cmap='gray')\n        ax[1].imshow(target_['masks'][i].numpy(), alpha=0.5, cmap='gray')\n        # ax[0].plot(boxes_[i][0], boxes_[i][1], 'ro')\n        # ax[0].plot(boxes_[i][2], boxes_[i][3], 'ro')\n    plt.show()","4be24b1f":"import torch\nimport torchvision\nfrom torchvision.models import resnet\nfrom torchvision.models.detection import FasterRCNN, MaskRCNN\nfrom torchvision.models.detection.backbone_utils import (\n    BackboneWithFPN,\n    resnet_fpn_backbone,\n)\nfrom torchvision.models.detection.faster_rcnn import FastRCNNPredictor\nfrom torchvision.models.detection.mask_rcnn import MaskRCNNPredictor\nfrom torchvision.models.detection.rpn import AnchorGenerator\nfrom torchvision.models.utils import load_state_dict_from_url\nfrom torchvision.ops import misc as misc_nn_ops\n\nimport pretrainedmodels\n\n\ndef maskrcnn_resnet101_fpn(\n    progress=True, num_classes=91, pretrained_backbone=True, **kwargs\n):\n    backbone = resnet_fpn_backbone(\"resnet101\", pretrained_backbone)\n    model = MaskRCNN(backbone, num_classes, **kwargs)\n    return model\n\n\ndef maskrcnn_resnetcustom_fpn(\n    pretrained_,\n    backbone_name,\n    progress=True,\n    num_classes=91,\n    pretrained_backbone=\"imagenet\",\n    backbone_freeze=True,\n    in_channels_stage2=256,\n    **kwargs\n):\n    backbone = resnetcustom_fpn_backbone(\n        pretrained_,\n        backbone_name,\n        pretrained_backbone,\n        backbone_freeze,\n        in_channels_stage2=in_channels_stage2,\n    )\n    model = MaskRCNN(backbone, num_classes, **kwargs)\n    return model\n\n\ndef resnetcustom_fpn_backbone(\n    pretrained_,\n    backbone_name,\n    pretrained=\"imagenet\",\n    backbone_freeze=True,\n    in_channels_stage2=256,\n):\n    backbone = pretrained_.__dict__[backbone_name](pretrained=pretrained)\n    # freeze layers\n    if backbone_freeze:\n        for name, parameter in backbone.named_parameters():\n            if \"layer2\" not in name and \"layer3\" not in name and \"layer4\" not in name:\n                parameter.requires_grad_(False)\n\n    return_layers = {\"layer1\": 0, \"layer2\": 1, \"layer3\": 2, \"layer4\": 3}\n\n    # 256 for deeper ResNets, 64 for ResNet 18 and 34 variants\n    in_channels_stage2 = 64\n    in_channels_list = [\n        in_channels_stage2,\n        in_channels_stage2 * 2,\n        in_channels_stage2 * 4,\n        in_channels_stage2 * 8,\n    ]\n    out_channels = 256\n    return BackboneWithFPN(backbone, return_layers, in_channels_list, out_channels)","66889037":"hidden_layer = 256\n\n# ORIGINAL BACKBONE:\n# model_ft = torchvision.models.detection.maskrcnn_resnet50_fpn(pretrained=True)\n\n# ResNet101 (deeper version of the original):\n# model_ft = maskrcnn_resnet101_fpn(num_classes=NUM_CLASSES)\n\n# SEResNeXt50-32x4d (good and heavy):\n# model_ft = maskrcnn_resnetcustom_fpn(pretrainedmodels, \"se_resnext50_32x4d\", num_classes=NUM_CLASSES)\n\n# ResNet18 for quick experiments:\nmodel_ft = maskrcnn_resnetcustom_fpn(pretrainedmodels, \"resnet18\", num_classes=NUM_CLASSES, in_channels_stage2=64)\n\n\nin_features = model_ft.roi_heads.box_predictor.cls_score.in_features\nin_features_mask = model_ft.roi_heads.mask_predictor.conv5_mask.in_channels\nmodel_ft.roi_heads.box_predictor = FastRCNNPredictor(in_features, NUM_CLASSES)\nmodel_ft.roi_heads.mask_predictor = MaskRCNNPredictor(in_features_mask, hidden_layer, NUM_CLASSES)\n\n\nif PARALLEL:\n    print('GPU-parallel training')\n    model_ft = torch.nn.DataParallel(model_ft).cuda()\nelse:\n    print('single-GPU training')\n    model_ft.to(DEVICE)\n\nfor param in model_ft.parameters():\n    param.requires_grad = True\nparams = [p for p in model_ft.parameters() if p.requires_grad]\n\n\noptimizer = torch.optim.SGD(params, lr=0.001, momentum=0.9, weight_decay=0.0005)\nlr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.3)\n\nrun_dir = os.path.join(CHECKPOINT_DIR, RUN_NAME)\nprint(\"run directory: {}\".format(run_dir))\nif not os.path.isdir(run_dir):\n    os.mkdir(run_dir)\nlogger = RunLogger(os.path.join(run_dir, \"run_stats.log\"))\nlogger.initialize()","8f6368f0":"RUN_DIR = os.path.join(CHECKPOINT_DIR, RUN_NAME)\n\n# training\nif TRAIN:\n    print(\"running training...\")\n    logger.log(\"running training...\")\n    if CHECKPOINT_RESUME is not None:\n        model_ft.load_state_dict(torch.load(CHECKPOINT_RESUME))\n    for epoch in range(NUM_EPOCHS):\n        train_one_epoch(\n            model_ft,\n            optimizer,\n            train_loader,\n            DEVICE,\n            epoch,\n            print_freq=100,\n            logger=logger,\n            update_freq=UPDATE_FREQ,\n            run_dir=RUN_DIR,\n        )\n        lr_scheduler.step()","298b4615":"TEST = True\n\nbest_checkpoint_idx = -1\ncheckpoints = natsorted(glob.glob(run_dir + \"\/*.pth.tar\"))\nbest_checkpoint = checkpoints[best_checkpoint_idx]\nprint(\"best checkpoint:\")\nprint(best_checkpoint)\n\n\nif TEST:\n    print(\"running test...\")\n    logger.log(\"running test...\")\n    for param in model_ft.parameters():\n        param.requires_grad = False\n    model_ft.eval()\n    eval_hist = []\n    c = best_checkpoint\n    print(\"loading: {}\".format(c))\n    logger.log(\"\\nloading: {}\".format(c))\n    model_ft.load_state_dict(torch.load(c))","8dd5b0c3":"THRESHOLD_CONF = 0.5\n\n\ndataset_ = valid_dataset\nfor i in range(1):\n    rid = np.random.randint(0, len(dataset_))\n    img_, target_ = dataset_.__getitem__(rid)\n    img = (img_ * 255).cpu().detach().numpy().astype(int)\n    img = np.moveaxis(img, 0, -1)\n    true_masks = target_[\"masks\"].cpu().detach().numpy()\n    fig, ax = plt.subplots(4, 1, figsize=(30, 12))\n    ax[0].imshow(img)\n\n    images = [img_]\n    images = [img.contiguous().cuda() for img in images]\n    with torch.no_grad():\n        val_pred = model_ft(images)[0]\n        pred_boxes = val_pred['boxes'].cpu().detach().numpy()\n        pred_labels = val_pred['labels'].cpu().detach().numpy()\n        pred_scores = val_pred['scores'].cpu().detach().numpy()\n        pred_masks = val_pred['masks'].cpu().detach().numpy()[:, 0]\n    \n    pred_valid_idx = pred_scores > THRESHOLD_CONF\n    pred_boxes = pred_boxes[pred_valid_idx]\n    pred_labels = pred_labels[pred_valid_idx]\n    pred_scores = pred_scores[pred_valid_idx]\n    pred_masks = pred_masks[pred_valid_idx]\n    pred_mask_single = np.sum(pred_masks, axis=0)\n    \n    for i in range(len(true_masks)):\n        ax[1].imshow(true_masks[i], alpha=0.5, cmap='gray')\n    for i in range(len(pred_masks)):\n        ax[2].imshow(pred_masks[i] > THRESHOLD_CONF, alpha=0.6, cmap='gray')\n    ax[3].imshow(pred_mask_single > THRESHOLD_CONF, cmap='gray')\n        \n    ax[0].set_title(\"IMAGE:\")\n    ax[1].set_title(\"TRUE MASK:\")\n    ax[2].set_title(\"PREDICTED MASKS:\")\n    ax[3].set_title(\"PREDICTED SINGLE MASK:\")\n\n    plt.show()","2fa33e7f":"# https:\/\/www.kaggle.com\/wh1tezzz\/correct-dice-metrics-for-this-competition\ndef dice_channel_torch(probability, truth, threshold):\n    batch_size = truth.shape[0]\n    channel_num = truth.shape[1]\n    mean_dice_channel = 0.\n    with torch.no_grad():\n        for i in range(batch_size):\n            for j in range(channel_num):\n                channel_dice = dice_single_channel(probability[i, j,:,:], truth[i, j, :, :], threshold)\n                mean_dice_channel += channel_dice\/(batch_size * channel_num)\n    return mean_dice_channel\n\n\ndef dice_single_channel(probability, truth, threshold, eps = 1E-9):\n    p = (probability.view(-1) > threshold).float()\n    t = (truth.view(-1) > 0.5).float()\n    dice = (2.0 * (p * t).sum() + eps)\/ (p.sum() + t.sum() + eps)\n    return dice","0b4511e8":"# VALIDATION\nTHRESHOLD_CONF = 0.5\nlabels_set = []\nfnames_set = []\n\nvalid_dices = []\nidx = 0\nwith torch.no_grad():\n    for batch_idx, (images, targets) in enumerate(valid_loader):\n        images = [x.cuda() for x in images]\n        out_batch = model_ft(images)\n        true_masks_set = []\n        masks_set = []\n        for target in targets:\n            true_labels = target['labels'].cpu().detach().numpy()\n            true_masks = target['masks'].cpu().detach().numpy()[:, 0]\n            masks_classes = np.zeros((4, HEIGHT, WIDTH), dtype=np.float32)\n            for c in range(1, 5):\n                m_class = true_masks[true_labels == c]\n                if m_class.shape[0] > 0:\n                    masks_classes[c - 1] = np.sum(m_class, axis=0)\n            true_masks_set.append(masks_classes)\n        for preds in out_batch:\n            pred_labels = preds['labels'].cpu().detach().numpy()\n            pred_scores = preds['scores'].cpu().detach().numpy()\n            pred_masks = preds['masks'].cpu().detach().numpy()[:, 0]\n            pred_valid_idx = pred_scores > THRESHOLD_CONF\n            pred_labels = pred_labels[pred_valid_idx]\n            pred_scores = pred_scores[pred_valid_idx]\n            pred_masks = pred_masks[pred_valid_idx]\n            labels_set.append(pred_labels)\n            fnames_set.append(test_df['ImageId'].iloc[idx])\n            idx += 1\n            masks_classes = np.zeros((4, HEIGHT, WIDTH), dtype=np.float32)\n            for c in range(1, 5):\n                m_class = pred_masks[pred_labels == c]\n                if m_class.shape[0] > 0:\n                    masks_classes[c - 1] = np.sum(m_class, axis=0)\n            masks_set.append(masks_classes)\n        del out_batch\n        masks_set = np.stack(masks_set, axis=0)\n        true_masks_set = np.stack(true_masks_set, axis=0)\n        valid_dice = dice_channel_torch(torch.from_numpy(masks_set), torch.from_numpy(true_masks_set), 0.5)\n        valid_dices.append(valid_dice)\n        print(\"{}, validation batch dice: {:.3f}\".format(batch_idx, valid_dice))\n        gc.collect()\n        # break\n        \ntorch.cuda.empty_cache()\nprint(\"VALIDATION SET DICE: {:.3f}\".format(np.mean(valid_dices)))","6b66995f":"# inspect predictions vs true \nrid = np.random.randint(0, len(masks_set))\nfig, ax = plt.subplots(1, 2, figsize=(24, 8))\nax[0].imshow(true_masks_set[rid].sum(axis=0), cmap=\"gray\")\nax[1].imshow(masks_set[rid].sum(axis=0), cmap=\"gray\")","5a7fa4f9":"PREDICT_TEST = False\n\nif PREDICT_TEST:\n    test_dataset = SteelMrcnnDataset(ROOT_TEST, test_df, transform=None, test=True)\n    test_loader = torch.utils.data.DataLoader(\n        test_dataset,\n        batch_size=BATCH_SIZE,\n        shuffle=False,\n        num_workers=6,\n        pin_memory=True,\n    )\n\n    # TEST\n    masks_set = []\n    labels_set = []\n    fnames_set = []\n\n    idx = 0\n    with torch.no_grad():\n        for (x, ) in test_loader:\n            x = x.cuda()\n            out_batch = model_ft(x)\n            for preds in out_batch:\n                pred_labels = preds['labels'].cpu().detach().numpy()\n                pred_scores = preds['scores'].cpu().detach().numpy()\n                pred_masks = preds['masks'].cpu().detach().numpy()[:, 0]\n                pred_valid_idx = pred_scores > THRESHOLD_CONF\n                pred_labels = pred_labels[pred_valid_idx]\n                pred_scores = pred_scores[pred_valid_idx]\n                pred_masks = pred_masks[pred_valid_idx]\n                labels_set.append(pred_labels)\n                fnames_set.append(test_df['ImageId'].iloc[idx])\n                idx += 1\n                masks_classes = np.zeros((4, HEIGHT, WIDTH), dtype=np.bool)\n                for c in range(1, 5):\n                    m_class = pred_masks[pred_labels == c]\n                    if m_class.shape[0] > 0:\n                        masks_classes[c - 1] = np.sum(m_class, axis=0)\n                masks_set.append(masks_classes)\n            del out_batch\n            gc.collect()\n            # break\n    torch.cuda.empty_cache()\n    masks_set = np.stack(masks_set, axis=0)\n    \n    # https:\/\/www.kaggle.com\/lightforever\/severstal-mlcomp-catalyst-infer-0-90672\n    thresholds = [0.5, 0.5, 0.5, 0.5]\n    min_area = [600, 600, 1000, 2000]\n\n    # generate submission\n    res = []\n    for p, file in zip(masks_set, fnames_set):\n        file = os.path.basename(file)\n        for i in range(4):\n            p_channel = p[i]\n            imageid_classid = file + \"_\" + str(i + 1)\n            p_channel = (p_channel > thresholds[i]).astype(np.uint8)\n            if p_channel.sum() < min_area[i]:\n                p_channel = np.zeros(p_channel.shape, dtype=p_channel.dtype)\n            res.append(\n                {\"ImageId_ClassId\": imageid_classid, \"EncodedPixels\": mask2rle(p_channel)}\n            )\n\n    test_sub = pd.DataFrame(res)\n    test_sub.to_csv(\"submission.csv\", index=False)\n    num_predicted_masks = (test_sub['EncodedPixels'].apply(len) > 0).sum()\n    print(\"num predicted masks in test: {}\".format(num_predicted_masks))","2abc0b7c":"### custom MRCNN backbones:"}}