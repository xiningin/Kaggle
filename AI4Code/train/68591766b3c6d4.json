{"cell_type":{"a2cff683":"code","3b89f426":"code","838d80eb":"code","f67b6bdf":"code","91554aa3":"code","48b787b7":"code","25d45483":"code","c4aec6b0":"code","f9029a7b":"code","667c05a2":"code","780afafa":"code","cc55e8c4":"code","b7ec7ffc":"code","b5e0325e":"code","b51c6255":"code","8a89f12e":"code","51d510ff":"code","3fd6d180":"code","e9a6700a":"code","5f28d3d7":"code","57049b9e":"code","aae90ada":"code","b49ff175":"code","bc18dc3e":"code","08bdf3a2":"code","8726e11f":"code","b81f1fe5":"code","3a842f71":"code","ebf855e9":"code","33bebd01":"code","16728a0f":"code","97eca9e5":"code","6af6c57d":"code","8256c0f9":"code","8e411c7c":"code","5f620a97":"code","f5b4c44a":"code","d14f7885":"code","9e49e5f7":"code","73badaa5":"code","ce996d5b":"code","8e7bbc0a":"code","e842ee37":"code","1793d522":"markdown","cc0a497f":"markdown","4d0ad2d3":"markdown","881c7d4d":"markdown","9009379f":"markdown","7c0694ae":"markdown","a4302e8c":"markdown","bee9c1bd":"markdown","16aba71f":"markdown","f8f34876":"markdown","889d0718":"markdown","95aa946c":"markdown","4e64abba":"markdown","092097e2":"markdown","b1445cbc":"markdown","02dc6197":"markdown","20392d3f":"markdown","a58525ca":"markdown","5f74be31":"markdown","195753f0":"markdown","597670b8":"markdown","cb9bff97":"markdown","aeafaa7c":"markdown","8348b671":"markdown","42354f60":"markdown","f84f16d6":"markdown","b3263910":"markdown","41957c61":"markdown","9f64a63d":"markdown","32a3ae60":"markdown","28a2e16d":"markdown","cf575fcf":"markdown","7942dc76":"markdown"},"source":{"a2cff683":"import numpy as np \nimport pandas as pd\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import make_scorer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\n%matplotlib inline \nimport matplotlib.pyplot as plt  \nimport time","3b89f426":"KAGGLE_DIR = '..\/input\/'\n\ndf = pd.read_csv(KAGGLE_DIR + \"train\/train.csv\")\ndf['is_Set'] = 'train'\ntest_df = pd.read_csv(KAGGLE_DIR + \"test\/test.csv\")\ntest_df['is_Set'] = 'test'\nboth = pd.concat([df, test_df], ignore_index=True)","838d80eb":"n_train = both['is_Set'].value_counts()[0]\nn_train","f67b6bdf":"summary_df = pd.concat([pd.DataFrame(both.columns), pd.DataFrame(both.values.reshape(-1,1)),\n                        pd.DataFrame(both.isnull().sum().values), pd.DataFrame([both[name].nunique() for name in both.columns])],\n                       axis=1)\nsummary_df.columns = ['Variable Name', 'Quick Look', 'Nulls', 'Unique Values']\nsummary_df.head(25)","91554aa3":"both['Age_years'] = both['Age']\/12\nboth['Age_years'] = both['Age_years'].apply(np.round)","48b787b7":"pd.cut(both['Age_years'], bins=[0,1,2,3,4,6,10,20,300]).value_counts(dropna=False)","25d45483":"dummies_age = pd.get_dummies(pd.cut(both['Age'], \n                                    bins=[0,.5,1,2,3,4,6,10,20,300]), dummy_na=True)\ndummies_age.columns = ['is_age_0',\n                       'is_age_1', \n                       'is_age_2',\n                       'is_age_3',\n                       'is_age_4',\n                       'is_age_5_6',\n                       'is_age_7_10',\n                       'is_age_11_20',\n                       'is_age_over_20',\n                       'is_age_nan']","c4aec6b0":"dummy_cols = ['Type','Breed1', 'Breed2', 'Gender', 'Color1',\n       'Color2', 'Color3', 'MaturitySize', 'FurLength', 'Vaccinated',\n       'Dewormed', 'Sterilized', 'Health','State',\n       'VideoAmt', 'PhotoAmt']","f9029a7b":"get_them_dummies = pd.get_dummies(both, columns = dummy_cols)\ndf_with_dummies = pd.concat([get_them_dummies,dummies_age],axis=1)\ndf_with_dummies.head()","667c05a2":"#get the column names for variable selection\ndf_with_dummies.columns.values","780afafa":"var_selected = [\n       'Type_1', 'Type_2', 'Breed1_0',\n       'Breed1_1', 'Breed1_2', 'Breed1_3', 'Breed1_5', 'Breed1_6',\n       'Breed1_7', 'Breed1_10', 'Breed1_11', 'Breed1_14', 'Breed1_15',\n       'Breed1_16', 'Breed1_17', 'Breed1_18', 'Breed1_19', 'Breed1_20',\n       'Breed1_21', 'Breed1_23', 'Breed1_24', 'Breed1_25', 'Breed1_26',\n       'Breed1_31', 'Breed1_32', 'Breed1_39', 'Breed1_42', 'Breed1_44',\n       'Breed1_49', 'Breed1_50', 'Breed1_51', 'Breed1_56', 'Breed1_58',\n       'Breed1_60', 'Breed1_61', 'Breed1_64', 'Breed1_65', 'Breed1_69',\n       'Breed1_70', 'Breed1_71', 'Breed1_72', 'Breed1_75', 'Breed1_76',\n       'Breed1_78', 'Breed1_81', 'Breed1_82', 'Breed1_83', 'Breed1_85',\n       'Breed1_88', 'Breed1_93', 'Breed1_94', 'Breed1_97', 'Breed1_98',\n       'Breed1_99', 'Breed1_100', 'Breed1_102', 'Breed1_103', 'Breed1_104',\n       'Breed1_105', 'Breed1_108', 'Breed1_109', 'Breed1_111',\n       'Breed1_112', 'Breed1_114', 'Breed1_116', 'Breed1_117',\n       'Breed1_119', 'Breed1_122', 'Breed1_123', 'Breed1_125',\n       'Breed1_126', 'Breed1_128', 'Breed1_129', 'Breed1_130',\n       'Breed1_132', 'Breed1_139', 'Breed1_141', 'Breed1_142',\n       'Breed1_143', 'Breed1_145', 'Breed1_146', 'Breed1_147',\n       'Breed1_148', 'Breed1_150', 'Breed1_152', 'Breed1_154',\n       'Breed1_155', 'Breed1_165', 'Breed1_167', 'Breed1_169',\n       'Breed1_173', 'Breed1_176', 'Breed1_178', 'Breed1_179',\n       'Breed1_182', 'Breed1_185', 'Breed1_187', 'Breed1_188',\n       'Breed1_189', 'Breed1_190', 'Breed1_192', 'Breed1_195',\n       'Breed1_197', 'Breed1_199', 'Breed1_200', 'Breed1_201',\n       'Breed1_202', 'Breed1_203', 'Breed1_204', 'Breed1_205',\n       'Breed1_206', 'Breed1_207', 'Breed1_212', 'Breed1_213',\n       'Breed1_214', 'Breed1_215', 'Breed1_217', 'Breed1_218',\n       'Breed1_222', 'Breed1_224', 'Breed1_227', 'Breed1_228',\n       'Breed1_231', 'Breed1_232', 'Breed1_233', 'Breed1_234',\n       'Breed1_237', 'Breed1_239', 'Breed1_240', 'Breed1_241',\n       'Breed1_242', 'Breed1_243', 'Breed1_244', 'Breed1_245',\n       'Breed1_246', 'Breed1_247', 'Breed1_248', 'Breed1_249',\n       'Breed1_250', 'Breed1_251', 'Breed1_252', 'Breed1_253',\n       'Breed1_254', 'Breed1_256', 'Breed1_257', 'Breed1_258',\n       'Breed1_260', 'Breed1_262', 'Breed1_263', 'Breed1_264',\n       'Breed1_265', 'Breed1_266', 'Breed1_267', 'Breed1_268',\n       'Breed1_269', 'Breed1_270', 'Breed1_271', 'Breed1_272',\n       'Breed1_273', 'Breed1_274', 'Breed1_276', 'Breed1_277',\n       'Breed1_278', 'Breed1_279', 'Breed1_280', 'Breed1_281',\n       'Breed1_282', 'Breed1_283', 'Breed1_284', 'Breed1_285',\n       'Breed1_286', 'Breed1_287', 'Breed1_288', 'Breed1_289',\n       'Breed1_290', 'Breed1_292', 'Breed1_293', 'Breed1_294',\n       'Breed1_295', 'Breed1_296', 'Breed1_297', 'Breed1_298',\n       'Breed1_299', 'Breed1_300', 'Breed1_301', 'Breed1_302',\n       'Breed1_303', 'Breed1_304', 'Breed1_305', 'Breed1_306',\n       'Breed1_307', 'Breed2_0', 'Breed2_1', 'Breed2_2', 'Breed2_4',\n       'Breed2_5', 'Breed2_10', 'Breed2_14', 'Breed2_16', 'Breed2_17',\n       'Breed2_18', 'Breed2_19', 'Breed2_20', 'Breed2_21', 'Breed2_24',\n       'Breed2_25', 'Breed2_26', 'Breed2_36', 'Breed2_39', 'Breed2_40',\n       'Breed2_44', 'Breed2_49', 'Breed2_50', 'Breed2_51', 'Breed2_58',\n       'Breed2_60', 'Breed2_62', 'Breed2_65', 'Breed2_69', 'Breed2_70',\n       'Breed2_72', 'Breed2_75', 'Breed2_76', 'Breed2_78', 'Breed2_83',\n       'Breed2_91', 'Breed2_96', 'Breed2_98', 'Breed2_100', 'Breed2_102',\n       'Breed2_103', 'Breed2_104', 'Breed2_109', 'Breed2_111',\n       'Breed2_115', 'Breed2_117', 'Breed2_119', 'Breed2_122',\n       'Breed2_128', 'Breed2_129', 'Breed2_130', 'Breed2_141',\n       'Breed2_146', 'Breed2_147', 'Breed2_150', 'Breed2_152',\n       'Breed2_155', 'Breed2_159', 'Breed2_165', 'Breed2_167',\n       'Breed2_168', 'Breed2_169', 'Breed2_173', 'Breed2_176',\n       'Breed2_178', 'Breed2_179', 'Breed2_182', 'Breed2_187',\n       'Breed2_188', 'Breed2_189', 'Breed2_190', 'Breed2_192',\n       'Breed2_195', 'Breed2_200', 'Breed2_201', 'Breed2_202',\n       'Breed2_203', 'Breed2_204', 'Breed2_205', 'Breed2_206',\n       'Breed2_207', 'Breed2_210', 'Breed2_212', 'Breed2_213',\n       'Breed2_218', 'Breed2_227', 'Breed2_228', 'Breed2_233',\n       'Breed2_237', 'Breed2_239', 'Breed2_240', 'Breed2_241',\n       'Breed2_242', 'Breed2_243', 'Breed2_245', 'Breed2_246',\n       'Breed2_247', 'Breed2_248', 'Breed2_249', 'Breed2_250',\n       'Breed2_251', 'Breed2_252', 'Breed2_253', 'Breed2_254',\n       'Breed2_256', 'Breed2_257', 'Breed2_258', 'Breed2_260',\n       'Breed2_261', 'Breed2_262', 'Breed2_263', 'Breed2_264',\n       'Breed2_265', 'Breed2_266', 'Breed2_267', 'Breed2_268',\n       'Breed2_270', 'Breed2_271', 'Breed2_272', 'Breed2_274',\n       'Breed2_276', 'Breed2_277', 'Breed2_278', 'Breed2_279',\n       'Breed2_280', 'Breed2_281', 'Breed2_282', 'Breed2_283',\n       'Breed2_284', 'Breed2_285', 'Breed2_288', 'Breed2_289',\n       'Breed2_290', 'Breed2_291', 'Breed2_292', 'Breed2_293',\n       'Breed2_294', 'Breed2_295', 'Breed2_296', 'Breed2_297',\n       'Breed2_299', 'Breed2_300', 'Breed2_301', 'Breed2_302',\n       'Breed2_303', 'Breed2_304', 'Breed2_305', 'Breed2_306',\n       'Breed2_307', 'Gender_1', 'Gender_2', 'Gender_3', 'Color1_1',\n       'Color1_2', 'Color1_3', 'Color1_4', 'Color1_5', 'Color1_6',\n       'Color1_7', 'Color2_0', 'Color2_2', 'Color2_3', 'Color2_4',\n       'Color2_5', 'Color2_6', 'Color2_7', 'Color3_0', 'Color3_3',\n       'Color3_4', 'Color3_5', 'Color3_6', 'Color3_7', 'MaturitySize_1',\n       'MaturitySize_2', 'MaturitySize_3', 'MaturitySize_4', 'FurLength_1',\n       'FurLength_2', 'FurLength_3', 'Vaccinated_1', 'Vaccinated_2',\n       'Vaccinated_3', 'Dewormed_1', 'Dewormed_2', 'Dewormed_3',\n       'Sterilized_1', 'Sterilized_2', 'Sterilized_3', 'Health_1',\n       'Health_2', 'Health_3', 'State_41324', 'State_41325', 'State_41326',\n       'State_41327', 'State_41330', 'State_41332', 'State_41335',\n       'State_41336', 'State_41342', 'State_41345', 'State_41361',\n       'State_41367', 'State_41401', 'State_41415', 'VideoAmt_0',\n       'VideoAmt_1', 'VideoAmt_2', 'VideoAmt_3', 'VideoAmt_4',\n       'VideoAmt_5', 'VideoAmt_6', 'VideoAmt_7', 'VideoAmt_8',\n       'VideoAmt_9', 'PhotoAmt_0.0', 'PhotoAmt_1.0', 'PhotoAmt_2.0',\n       'PhotoAmt_3.0', 'PhotoAmt_4.0', 'PhotoAmt_5.0', 'PhotoAmt_6.0',\n       'PhotoAmt_7.0', 'PhotoAmt_8.0', 'PhotoAmt_9.0', 'PhotoAmt_10.0',\n       'PhotoAmt_11.0', 'PhotoAmt_12.0', 'PhotoAmt_13.0', 'PhotoAmt_14.0',\n       'PhotoAmt_15.0', 'PhotoAmt_16.0', 'PhotoAmt_17.0', 'PhotoAmt_18.0',\n       'PhotoAmt_19.0', 'PhotoAmt_20.0', 'PhotoAmt_21.0', 'PhotoAmt_22.0',\n       'PhotoAmt_23.0', 'PhotoAmt_24.0', 'PhotoAmt_25.0', 'PhotoAmt_26.0',\n       'PhotoAmt_27.0', 'PhotoAmt_28.0', 'PhotoAmt_29.0', 'PhotoAmt_30.0',\n       'is_age_0', 'is_age_1',\n       'is_age_11_20', 'is_age_2', 'is_age_3', 'is_age_4', 'is_age_5_6',\n       'is_age_7_10', 'is_age_nan', 'is_age_over_20']","cc55e8c4":"X_orig_train = df_with_dummies.loc[:(n_train-1), var_selected]\nX_test = df_with_dummies.loc[n_train:, var_selected].reset_index(drop=True)\ny_orig_train = df_with_dummies.loc[:(n_train-1), 'AdoptionSpeed']\ny_test = df_with_dummies.loc[n_train:, 'AdoptionSpeed'].reset_index(drop=True)","b7ec7ffc":"X_train, X_valid, y_train, y_valid = train_test_split(X_orig_train, y_orig_train, \n                                                      test_size=0.25, random_state=202)","b5e0325e":"def metric(y1,y2):\n    return cohen_kappa_score(y1,y2, weights='quadratic')","b51c6255":"algorithm_starts = time.time()\nrf = RandomForestClassifier(n_estimators=80,\n                             max_depth=None, \n                             min_samples_split=12, \n                             min_samples_leaf=5, \n                             min_weight_fraction_leaf=0.0, \n                             max_features='auto', \n                             min_impurity_decrease=0.0, \n                             min_impurity_split=None, \n                             bootstrap=True, \n                             oob_score=True, \n                             random_state=202, \n                             verbose=1, \n                             warm_start=True, \n                             class_weight=None)\nrf.fit(X_train, y_train)\nrf_valid_all = pd.DataFrame(rf.predict(X_valid))\ntime.time() - algorithm_starts","8a89f12e":"#Check Score\nmetric(rf_valid_all, y_valid)","51d510ff":"algorithm_starts = time.time()\nlr_train = LogisticRegression(C=1, random_state=202, solver='saga',\n                        multi_class='multinomial')\nlr_train.fit(X_train, y_train)\nlr_valid_all = pd.DataFrame(lr_train.predict(X_valid))\ntime.time() - algorithm_starts","3fd6d180":"#Check Score\nmetric(lr_valid_all, y_valid)","e9a6700a":"dt = DecisionTreeClassifier(min_samples_split=500, max_depth=30, random_state=202)\ndt_train = dt.fit(X_train, y_train)\ndt_prob_all = pd.DataFrame(dt_train.predict_proba(X_valid))\ndt_valid_all = pd.DataFrame(dt_train.predict(X_valid))","5f28d3d7":"#Check Score\nmetric(dt_valid_all, y_valid)","57049b9e":"etc = ExtraTreesClassifier(n_estimators=500, \n                            #max_features=2, \n                            min_samples_leaf=5, \n                            random_state=202, \n                            max_features='auto', \n                            n_jobs=-1)\netc_train = etc.fit(X_train, y_train)\netc_valid_all = pd.DataFrame(etc.predict(X_valid))","aae90ada":"#Check Score\nmetric(etc_valid_all, y_valid)","b49ff175":"#Create the matrix needed for XGBoost\nX_train_xgb = xgb.DMatrix(X_train, label = y_train)\nX_valid_xgb = xgb.DMatrix(X_valid)\nX_only_train_xgb = xgb.DMatrix(X_train)","bc18dc3e":"#Parameters and CV\nnum_round_for_cv = 60\nparam = {'max_depth':9, 'eta':0.03, 'seed':202, 'objective':'multi:softmax', 'nthread':3,\n        'num_class':5}","08bdf3a2":"#Cross Validation: you want the lowest error\nalgorithm_starts = time.time()\nxgb_output = xgb.cv(param,\n       X_train_xgb,\n       num_round_for_cv,\n       nfold = 5,\n       show_stdv = False,\n       verbose_eval = True,\n       as_pandas = False)\ntime.time() - algorithm_starts","8726e11f":"#Retrieve the round to use for your XGBoost model\nrounds = pd.DataFrame(xgb_output)\nround_to_use = rounds['test-merror-mean'].idxmin() + 1\nround_to_use","b81f1fe5":"algorithm_starts = time.time()\nnum_round = round_to_use\nxgb_train = xgb.train(param, X_train_xgb, num_round)\n#xgb_valid_prob = pd.Series(xgb_train.predict(X_only_train_xgb))\ntime.time() - algorithm_starts","3a842f71":"#predctions\nxgb_valid_all = pd.Series(xgb_train.predict(X_valid_xgb))","ebf855e9":"#Check Score\nmetric(xgb_valid_all, y_valid)","33bebd01":"print('Extra Trees:        ', metric(etc_valid_all, y_valid))\nprint('Decision Trees:     ', metric(dt_valid_all, y_valid))\nprint('Random Forest:      ', metric(rf_valid_all, y_valid))\nprint('Logistic Regression:', metric(lr_valid_all, y_valid))\nprint('XGBoost:            ', metric(xgb_valid_all, y_valid))","16728a0f":"algorithm_starts = time.time()\nrf_test = RandomForestClassifier(n_estimators=80, \n                             max_depth=None, \n                             min_samples_split=12, \n                             min_samples_leaf=5, \n                             min_weight_fraction_leaf=0.0, \n                             max_features='auto', \n                             min_impurity_decrease=0.0, \n                             min_impurity_split=None, \n                             bootstrap=True, \n                             oob_score=True, \n                             random_state=202, \n                             verbose=1, \n                             warm_start=True, \n                             class_weight=None)\nrf_test.fit(X_orig_train, y_orig_train)\ntime.time() - algorithm_starts","97eca9e5":"# Get and store predictions\nrf_predictions = rf_test.predict(X_test)","6af6c57d":"algorithm_starts = time.time()\nlr_test = LogisticRegression(C=1, random_state=202, solver='saga',\n                        multi_class='multinomial')\nlr_test_sub = lr_test.fit(X_orig_train, y_orig_train)\ntime.time() - algorithm_starts","8256c0f9":"# Get and store predictions\nlr_predictions = lr_test_sub.predict(X_test)","8e411c7c":"dt_sub = DecisionTreeClassifier(min_samples_split=500, max_depth=30, random_state=202)\ndt_test_sub = dt_sub.fit(X_orig_train, y_orig_train)","5f620a97":"# Get and store predictions\ndt_predictions = dt_test_sub.predict(X_test)","f5b4c44a":"etc_test = ExtraTreesClassifier(n_estimators=500, \n                            #max_features=2, \n                            min_samples_leaf=5, \n                            random_state=201, \n                            max_features='auto', \n                            n_jobs=-1)\netc_test = etc_test.fit(X_orig_train, y_orig_train)","d14f7885":"# Get and store predictions\netc_predictions = etc_test.predict(X_test)","9e49e5f7":"X_orig_train_xgb = xgb.DMatrix(X_orig_train, label = y_orig_train)\nX_test_xgb = xgb.DMatrix(X_test)\nxgb_orig_train = xgb.train(param, X_orig_train_xgb, num_round)","73badaa5":"xgb_predictions = xgb_orig_train.predict(X_test_xgb)","ce996d5b":"#Submitting the Logistic Regression Model as it had the highest metric\nmodel_submission  = pd.DataFrame(lr_predictions).apply(np.round)\nsubmission = pd.DataFrame(data={\"PetID\" : test_df[\"PetID\"], \n                                   \"AdoptionSpeed\" : model_submission[0]})\nsubmission.AdoptionSpeed = submission.AdoptionSpeed.astype(int)\nsubmission.to_csv(\"submission.csv\", index=False)","8e7bbc0a":"#woc = (rf_predictions + dt_predictions + lr_predictions + etc_predictions)\/4\n#woc = pd.DataFrame(woc).apply(np.round)","e842ee37":"#submission = pd.DataFrame(data={\"PetID\" : test_df[\"PetID\"],\"AdoptionSpeed\" : woc[0]})\n#submission.AdoptionSpeed = submission.AdoptionSpeed.astype(int)\n#submission.to_csv(\"submission.csv\", index=False)","1793d522":"Age in years might not be the most helpful, but I wanted to show how to create and bin a new variable for pd.get_dummies()","cc0a497f":"#### Random Forest","4d0ad2d3":"#### Decision Tree","881c7d4d":"# Create prediction submission models","9009379f":"#### Extra Trees","7c0694ae":"Decision Tree","a4302e8c":"Creates the dummie columns for the different bins:","bee9c1bd":"### Model Submission","16aba71f":"There has to be a better way to do selected the columns you want...any guidance would be appreciated!","f8f34876":"# Feature engineering and variable selection","889d0718":"# Create your train\/test set","95aa946c":"# Building Models","4e64abba":"# Overview of the full dataset\nThis gives us a look at the variables and the number of NULLs (if any).  Useful if we need to impute any values but this appears to be a clean dataset.","092097e2":"XGBoost","b1445cbc":"Sets the columns for the variables we are interested in modeling","02dc6197":"# Imports","20392d3f":"Create the scoring metric (higher is better)","a58525ca":"### Creates a train\/test count for splitting later on","5f74be31":"Create a smaller training set to build your models against","195753f0":"# Read in the data","597670b8":"# Submission\nThis creates the submission csv, combining the PetID from our testing set with our model of choice. One is a single model selection and the other is a 'wisdom of the crowd' approach, averaging multiple models.","cb9bff97":"This Notebook will walk you through building a few models to tune for submission:\n\nRight now we have:\n* [Random Forest](#Random-Forest)\n* [Logistic Regression](#Logistic-Regression)\n* [Decision Tree](#Decision-Tree)\n* [Extra Trees](#Extra-Trees)\n* [XGBoost](#XGBoost)\n* more to come!\n\nAt the end of this notebook, you can build the submission.csv needed for competition entry.\n\nGood luck!","aeafaa7c":"# Table of Contents\n\n1. [Imports and Reading in Data](#Imports)\n2. [Variable Creation](#Feature-engineering-and-variable-selection)\n3. [Building Models](#Building-Models)\n4. [Prediciting into the test data](#Create-prediction-submission-models)\n5. [Submission file creation](#Submission)","8348b671":"Extra Trees Classifier","42354f60":"Looks at the distribution of the bins:","f84f16d6":"Logistic Regression","b3263910":"Create a dataframe with all the dummy variables we are interested in for modeling","41957c61":"#### Logistic Regression","9f64a63d":"### Wisdom of the Crowd","32a3ae60":"Random Forest","28a2e16d":"This takes the average of the Random Forest, Logistic Regression, Extra Trees Classifier, and Decision Tree predictions.  You can add\/subtract models as you see fit","cf575fcf":"#### XGBoost","7942dc76":"### Compare all models (higher is better)"}}