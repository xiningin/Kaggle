{"cell_type":{"e8044d41":"code","0a3b8af5":"code","5a483c71":"code","98442e53":"code","1bfda865":"code","3d0c673f":"code","eaa8af29":"code","5ce0e329":"code","b273d59d":"code","5150280e":"code","26175563":"code","0984146e":"code","6d8761ef":"code","cb033241":"code","c585fa5c":"code","010700c2":"code","8176d706":"code","fc09cc78":"code","85e103cf":"code","477a7067":"code","96893952":"code","0a8d4590":"code","3fe7bb40":"code","c336e897":"code","c56f6243":"code","62c0a9fb":"markdown","5c039bf9":"markdown","b9623e52":"markdown","52e05d7a":"markdown","196b55d7":"markdown","8698a8b8":"markdown","7e2319cb":"markdown","e7c153d9":"markdown","5cbb9474":"markdown","0845666b":"markdown","8d98227e":"markdown","95a6cd2b":"markdown","d1e8fff3":"markdown","6c300378":"markdown","daf49b1b":"markdown","e00a9869":"markdown","65d8403f":"markdown","89310224":"markdown","cd40d043":"markdown","c861dfd7":"markdown","a0ba0a53":"markdown","66a4a588":"markdown","0190eafe":"markdown","e42592d3":"markdown","c6bd3dfe":"markdown","435d8cc6":"markdown","400255c4":"markdown","4c2c67c2":"markdown","29a14e35":"markdown","db6afad3":"markdown","46d9b0fb":"markdown","690406e4":"markdown","021c145a":"markdown","427a5332":"markdown","bd6cd443":"markdown","c049d68c":"markdown","ac2c140f":"markdown","f3dc7305":"markdown","f2190b3f":"markdown","981238d2":"markdown","0435a396":"markdown","7a61ff8d":"markdown","16d5c4bf":"markdown","3bf8bac3":"markdown"},"source":{"e8044d41":"from IPython.display import YouTubeVideo\nYouTubeVideo(\"pthIRkUsNLc\")","0a3b8af5":"YouTubeVideo(\"9jAkRSkdtzs\")","5a483c71":"!pip install pyswarm","98442e53":"import numpy as np\nfrom scipy.integrate import odeint\nfrom scipy.integrate import simps\nfrom pyswarm import pso\nfrom IPython.display import HTML\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc, animation, cm\n%matplotlib inline","1bfda865":"# system of ODE's\ndef dSdT (S,T,k,B,n):\n    \n    # vector to be returned\n    dS = np.zeros(n+1)\n    \n    # length of each interval\n    deltaR = 1\/n\n    \n    # ODE's\n    for i in range(1,n):\n        dS[i] = (k*S[i]+1)*((S[i+1]-2*S[i]+S[i-1])\/(deltaR**2)+(2\/(i*deltaR))*(S[i+1]-S[i])\/(deltaR))\n\n    # boundary conditions    \n    dS[0] = dS[1]\n    dS[n] = B*np.exp(k*(1-np.exp(-B*T))-B*T)\n    \n    return dS","3d0c673f":"# parameters\n\nk = 1.0\nB = 286.2\nn = 20         # number of points in spatial discretization","eaa8af29":"# initial condition\nS_inicial = np.zeros(n+1)\n\n# range of T in which S will be obtained\nT = np.arange(0.0,0.15,1e-4)","5ce0e329":"# integrating!\nsol = odeint(dSdT, S_inicial, T, args=(k,B,n))","b273d59d":"# converting S to concentration C*\nC_star = np.log(k*sol+1)\/k\n\n# creating vector for grid in R\nR = np.linspace(0.0,1.0,n+1)\n\n# T points to be plotted (same as in the article)\nT_param = np.array([0.005, 0.015, 0.03, 0.05, 0.07, 0.09, 0.12])\n\n# plotting\n\nfor j in range(len(C_star)):\n    if any(abs(T_param-T[j])<1e-8):\n        plt.plot(R,C_star[j,:],'-k')\n        \nplt.axis([0,1,0,1])\nplt.xlabel('Adimensional radius, R')\nplt.ylabel('Concentration, $(C_A-C_{A0})\/(C_{As}-C_{A0})$');","5150280e":"max_theta = 2.0 * np.pi\ntheta = np.linspace(0.0, max_theta, 100)\n\ngrid_R, grid_theta = np.meshgrid(R, theta)\n\ngrid_C_star = np.tile(C_star[400,:],(len(theta),1))\n\nprint(np.shape(grid_R))\nprint(np.shape(grid_theta))\nprint(np.shape(grid_C_star))","26175563":"# creating the window where the polar projection will be plotted\nfig, ax = plt.subplots(subplot_kw=dict(projection='polar'))\n\n# plotting!\np1 = ax.contourf(grid_theta, grid_R, grid_C_star, 100, vmin=0, vmax=1, cmap=cm.Blues)\n\n# removing the markings on the R and theta axes\nax.set_xticklabels([])\nax.set_yticklabels([])\n\n# removing grids\nax.grid(False)\n\n# title\nax.set_title('C* polar projection: T = %.2f'%(T[400]))\n\n# getting the limits of the color map\nvmin,vmax = p1.get_clim()\n\n# defining a normalized scale\ncNorm = mpl.colors.Normalize(vmin=vmin, vmax=vmax)\n\n# creating a new axis in the right corner to plot the color bar\nax3 = fig.add_axes([0.9, 0.1, 0.03, 0.8])\n\n# plotting the color map on the newly created axis\ncb1 = mpl.colorbar.ColorbarBase(ax3, norm=cNorm,cmap=cm.Blues)","0984146e":"grid_C_star = np.tile(C_star[0,:],(len(theta),1))\np1 = ax.contourf(grid_theta, grid_R, grid_C_star, 100, vmin=0, vmax=1, cmap=cm.Blues)","6d8761ef":"def init():\n    \n    return p1,\n    \ndef animate(i):\n    \n    ax.clear()\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.grid(False)\n    ax.set_title('C* polar projection:: T = %.2f'%(T[i]))\n    C_grid = np.tile(C_star[i,:],(len(theta),1))\n    p1 = ax.contourf(grid_theta, grid_R, C_grid, 100, vmin=0, vmax=1,cmap=cm.Blues)  \n    return p1,","cb033241":"anim = animation.FuncAnimation(fig, animate, init_func=init,\n                               frames=1200, interval=50, blit=False)","c585fa5c":"HTML(anim.to_html5_video())","010700c2":"Mt_M = np.zeros_like(T)\n\nfor i in range(len(T)):\n    Mt_M[i] = simps(C_star[i,:]*R**2,R)\/simps(R**2,R)\n    \nplt.plot(T,Mt_M,'-')\nplt.axis([0,0.15,0,1])\nplt.xlabel('Adimensional time, T')\nplt.ylabel('Fractional absorption, Mt\/M$\\infty$');","8176d706":"data_jatropha = np.genfromtxt ('..\/input\/curve-of-water-absorption-in-seeds-jatropha\/data_to_humiliate_that_ungrateful.csv', delimiter=\",\")","fc09cc78":"plt.plot(data_jatropha[:,0],data_jatropha[:,1],'*')\nplt.xlabel('Time (hours)')\nplt.ylabel('Humidity (%)')\n\nprint(data_jatropha)","85e103cf":"Mt_M_exp = (data_jatropha[:-10,1]-data_jatropha[0,1])\nMt_M_exp = Mt_M_exp\/Mt_M_exp[-1]\nt_exp = data_jatropha[:-10,0]\n\nplt.plot(t_exp,Mt_M_exp,'*')\nplt.xlabel('Time (hours)')\nplt.ylabel('Fractional absorption, Mt\/M$\\infty$');","477a7067":"def ObjF (params):\n    \n    # parameters\n    kapa = params[0]\n    D0 = params[1]\n    beta = params[2]\n    \n    # saturation and initial concentrations\n    Cs = 0.456701031\n    C0 = 0.169072165\n\n    # seed radius\n    a = 1\n\n    # dimensionless model parameters\n    D0_linha = D0*np.exp(kapa*C0)\n    k = kapa*(Cs-C0)\n    B = (beta*a**2)\/(D0_linha)\n    \n    # number of points in the mesh\n    n = 20\n    \n    # initial condition\n    S_inicial = np.zeros(n+1)\n\n    # range of T in which S will be obtained\n    T = t_exp*D0_linha\/(a**2)\n\n    # integrating!\n    sol = odeint(dSdT, S_inicial, T, args=(k,B,n))\n\n    # converting S to concentration\n    C_star = np.log(k*sol+1)\/k\n\n    # creating vector for grid in R\n    R = np.linspace(0,1,n+1)\n    \n    # calculating fractional absorption\n    \n    Mt_M = np.zeros_like(T)\n    \n    for i in range(len(T)):\n        Mt_M[i] = simps(C_star[i,:]*R**2,R)\/simps(R**2,R)\n        \n    # error (difference between calculated and experimental curves)\n    error = Mt_M - Mt_M_exp\n    \n    # sum of squares of errors\n    return np.sum(error*error)         ","96893952":"lb = [1e-1, 1e-5, 1e-1]\nub = [3,    1e-1, 3]\n\nalpha_opt, fopt = pso(ObjF, lb, ub)","0a8d4590":"print(alpha_opt)","3fe7bb40":"print(fopt)","c336e897":"# parameters\nkapa = alpha_opt[0]\nD0 = alpha_opt[1]\nbeta = alpha_opt[2]\n\n# saturation and initial concentrations\nCs = 0.456701031\nC0 = 0.169072165\n\n# seed radius\na = 1\n\n# dimensionless model parameters\nD0_linha = D0*np.exp(kapa*C0)\nk = kapa*(Cs-C0)\nB = (beta*a**2)\/(D0_linha)\n\n# number of points in the mesh\nn = 20\n    \n# initial condition\nS_inicial = np.zeros(n+1)\n\n# range of T in which S will be obtained\nT = t_exp*D0_linha\/(a**2)\n\n# integrating!\nsol = odeint(dSdT, S_inicial, T, args=(k,B,n))\n\n# cconverting S to concentration\nC_star = np.log(k*sol+1)\/k\n\n# creating vector for grid in R\nR = np.linspace(0,1,n+1)\n\n# calculating fractional absorption\n    \nMt_M = np.zeros_like(T)\n    \nfor i in range(len(T)):\n    Mt_M[i] = simps(C_star[i,:]*R**2,R)\/simps(R**2,R)\n\n# plotting    \nplt.plot(t_exp,Mt_M_exp,'*',t_exp,Mt_M,'-')\nplt.xlabel('Time (hours)')\nplt.ylabel('Fractional absorption, Mt\/M$\\infty$');","c56f6243":"YouTubeVideo(\"ekzHIouo8Q4\")","62c0a9fb":"Cute, right?\n\nBut you are not satisfied. Love deserves more. Since we know how to plot the polar projection for a specific instant (in this case, $T = 0{.}04$), will we be able to create an animation that shows the evolution of this projection from the initial instant $T = 0$ until a final $T$ specified?\n\nOf course yes! The first step is to set our projection at the instant $T = 0$:","5c039bf9":"It's time to implement the discrete system of ODE's obtained in the previous section. To validate the implementation, the system will be solved in order to reproduce Figure 2 presented in [HSU (1984)](http:\/\/www.fcfar.unesp.br\/arquivos\/560524.pdf). In this figure, concentration profiles $C_A^{*} $ are plotted as a function of the dimensionless radius $R$ for some selected dimensionless instants $T$.\n\nFirst of all, let's import at once all modules to be used throughout the text:","b9623e52":"Our model is in continuous form. However, remeber that computers only work with discrete data. In order to implement the model on computers, it is necessary to transform it from a continuous to a discrete form. This is done by approximating spatial derivatives by finite differences (a numerical calculus technique). The approximations used here will be:\n\n$$\\frac{\\partial S}{\\partial R} \\approx \\frac{S_{i+1}-S_i}{\\delta R}$$\n\n$$\\frac{\\partial^2 S}{\\partial R^2} \\approx \\frac{S_{i+1}-2S_i+S_{i-1}}{(\\delta R)^2}$$\n\nThe lower the value of $\\delta R$, the more accurate is the representation of the derivative by finite differences (and more costly is the calculation). When $\\delta R \\rightarrow 0$ (which is impossible on a computer), the approximation becomes exact.\n\nApplying the approximations, the PDE becomes the following system of ordinary differential equations (ODE's):\n\n$$\\frac{dS_i}{dT} = (k S_i + 1) \\left[\\frac{S_{i+1}-2S_i+S_{i-1}}{(\\delta R)^2}+\\frac{2}{(i-1) \\delta R}\\left(\\frac{S_{i+1}-S_i}{\\delta R}\\right)\\right]$$\n\nAnd the IC and BC take the form:\n\n$$ S_i = 0 \\,\\,\\,\\forall R, \\,\\,\\, T = 0, \\,\\,\\, i=1,...,n+1$$ \n\n$$ S_1 = S_2, \\,\\,\\, R = 0, \\,\\,\\, T> 0 $$\n\n$$ S_{n+1} = \\frac{1}{k}\\,[\\exp\\,(k\\,(1-\\exp(-B T)))-1], \\,\\,\\, R=1, \\,\\,\\, T>0$$\n\nIt is convenient to express the BC's in the same form as the ODE, that is, in the form $dS\/dT = ...$ Differentiating the two BC's with respect to T, we obtain:\n\n$$ \\frac{dS_1}{dT} = \\frac{dS_2}{dT}, \\,\\,\\, R = 0, \\,\\,\\, T> 0 $$\n\n$$ \\frac{dS_{n+1}}{dT} = B\\,(\\exp[k(1-\\exp(-B T))-BT]), \\,\\,\\, R=1, \\,\\,\\, T>0$$\n\nFinally, the complete model (ODE's + IC and BC's) in the form that will be implemented in Python is:\n\n$$\\frac{dS_i}{dT} = (k S_i + 1) \\left[\\frac{S_{i+1}-2S_i+S_{i-1}}{(\\delta R)^2}+\\frac{2}{(i-1) \\delta R}\\left(\\frac{S_{i+1}-S_i}{\\delta R}\\right)\\right], \\,\\,\\, i=2,...,n$$\n\n$$ S_i = 0 \\,\\,\\,\\forall R, \\,\\,\\, T = 0, \\,\\,\\, i=1,...,n+1$$ \n\n$$ \\frac{dS_1}{dT} = \\frac{dS_2}{dT}, \\,\\,\\, R = 0, \\,\\,\\, T> 0 $$\n\n$$ \\frac{dS_{n+1}}{dT} = B\\,(\\exp[k(1-\\exp(-B T))-BT]), \\,\\,\\, R=1, \\,\\,\\, T>0$$\n\nIf you have any questions about discretization or finite differences approximation, consult a numerical analysis book or (if you know portuguese) take a look at the last example of the course [Introdu\u00e7\u00e3o ao MATLAB para Engenharia](https:\/\/drive.google.com\/file\/d\/0B2327zMqaoikNF91Y3AxTjYweUU\/view) and [the corresponding code](https:\/\/drive.google.com\/file\/d\/0B2327zMqaoikN2pmXzNtMHBianc\/view), in which the procedure is presented in more detail.\n\nThe heart is beating faster and faster... Without further ado, let's go to the implementation!","52e05d7a":"The assumptions regarding the specific physical situation are:\n\n* 1) the seeds are spherical, so the coordinate system to be used is spherical;\n\n* 2) diffusion is one-dimensional (occurs only in the radial direction);\n\n* 3) there is no generation of water within the seed, therefore $R_A = 0$;\n\n* 4) water concentrations is low: in this case, the relationship between the flow $N_{A}$ and concentration ${C}_{A}$ can be expressed by Fick's Law: $N_{A} = - D_{AB} \\, \\partial C_A\/\\partial r $, where $D_{AB}$ is the the diffusivity of $A$ in medium $B$. Diffusivity is a measure of how quickly the $A$ (water) component diffuses through the medium $B$ (seed).\n\nThus, the mass balance equation becomes:\n\n$$\\frac{\\partial C_A}{\\partial t} = \\frac{1}{r^2} \\frac{\\partial}{\\partial r} (r^2 D_{AB} \\frac{\\partial C_A}{\\partial r })$$\n\n[HSU (1984)](http:\/\/www.fcfar.unesp.br\/arquivos\/560524.pdf) proposed an exponential dependence of the $D_{AB}$ diffusivity with respect to the concentration:\n\n$$D_{AB} = D_0\\,e^{\\,\\kappa C_A}$$\n\nwhere $D_0$ e $\\kappa$ are parameters to be adjusted to experimental data.","196b55d7":"New Saturday night. You called your beloved. But this time there are no wines, there are no candles, there is no salmon with passion fruit sauce.\n\nYou hand over a paper before she even enters home.\n\n&#8212; What is it?\n\n&#8212; A parameter estimation.\n\n&#8212; A what?\n\n&#8212; Parameter estimation! Wasn't I the stupid? The fool who didn't know how to apply a simple model?\n\n&#8212; What do you mean, darling?\n\n&#8212; It was what you wanted! The applied model! Experimental data! The estimation I didn't know how to do! It looks like the game has turned, doesn't it? Now take this and get the hell out of here! Out of here!\n\n&#8212; You crazy! Fanatic!\n\nShe runs away, weeping. You fall on the couch, weeping. Another beautiful relationship that comes to an end, as it happens all the time, everywhere. Now you only have to spend the night watching your videos that simulate the diffusion of water in the most diverse seeds, listening to...","8698a8b8":"<img src=\"https:\/\/www.vegetariantimes.com\/.image\/c_limit%2Ccs_srgb%2Cq_80%2Cw_960\/MTQ2ODI5MzI5MDM5NDM1NzM2\/how-to-soak-and-sprout-nuts-seeds-grains-and-beansjpg.jpg\" width=\"500\"\/>","7e2319cb":"Ok! The ODE's were solved and the result stored in the object **sol**. The next set of commands uses this result to reproduce Figure 2 presented by [HSU (1984)](http:\/\/www.fcfar.unesp.br\/arquivos\/560524.pdf).","e7c153d9":"Now we can finally create the animation, using the function [FuncAnimation](https:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.animation.FuncAnimation.html) from [Matplotlib](https:\/\/matplotlib.org\/) library:","5cbb9474":"In the model, $dS\/dT$ depends only on $S$, not on $T$. However, in the code, the function is written as dependent on $S$ and $T$ (in that order!), a necessary requirement for compatibility with the ODE solver [odeint](https:\/\/docs.scipy.org\/doc\/scipy-0.18.1\/reference\/generated\/scipy.integrate.odeint.html), which we will use later.\n\nWe define below the arbitrary values of the parameters, the same ones used by [HSU (1984)](http:\/\/www.fcfar.unesp.br\/arquivos\/560524.pdf):","0845666b":"As is obvious from the videos, both of your likely suitors attach a lot of importance to the soaking of grains, seeds and vegetables. And they are right in their enthusiasm! In the nutritional aspect, soaking enhances the flavor, helps in the absorption of nutrients by our body and removes antinutrients, among other advantages. Soaking also finds many applications in the agricultural and food industries, as in the process of parboiling rice.\n\nAll that enthusiasm made you fall in love. And, like all lovers, you are looking for a way to impress your passion. You spend the day trying to remember some of your skills that can be used to amaze someone. Declaiming poems?  Not your strong point. Buying flowers? Nothing more tacky. Writing love letters? Your writing assignments have never been much appreciated...\n\nWhen you start to think you don't know how to do anything good and are about to spend all night crying  listening to Bruno Mars, the memory of your last great success in life comes up: that A+ in the mass transfer exam, which left the whole class jealous! And the best part: mass transfer is all about soaking grains, seeds and vegetables!\n\nWow, you were made for each other!\n\nYou carefully outline your plan. Using a diffusive model based on Fick's law with concentration-dependent diffusivity, you will prepare a gift in the form of a video animation for your loved one, illustrating how water moves inside the seeds during the soaking process.\n\nAnyone would die of love with such a gift! You get more and more excited, pick up your mass transfer notes, open a kaggle kernel and start working frantically.\n\nLet's do it,'cause love doesn't know how to wait!","8d98227e":"All ready! Time to solve the ODE system. For this, we use the function [odeint](https:\/\/docs.scipy.org\/doc\/scipy-0.18.1\/reference\/generated\/scipy.integrate.odeint.html), imported from [SciPy](https:\/\/www.scipy.org\/) library:","95a6cd2b":"Finally, you plot the experimental curve along with the calculated one:","d1e8fff3":"# 5. Conclusion","6c300378":"To solve the ODE system, it is necessary to specify the initial condition and the range of $T$ in which $S$ will be obtained:","daf49b1b":"Remember that, after discretization, the model is now a system of ODE's. This system must be implemented in Python through a function, here called **dSdT**. The function must accept the values of the variables *S* and *T* (in the form of vectors), the parameters $k$ and $B$ and the number of points $n$ in the spatial domain (the value of the interval $\\delta R$, the distance between the points, is calculated from $n$ using the relationship $\\delta R = 1\/n$). The value returned by the function must be a vector containing the values $ dS_i\/dT $ for all points $i$ of the spatial domain.\n\nThis is the **dSdT** function:","e00a9869":"# 3. Model implementation","65d8403f":"... and the sum of squares of the difference between the curves:","89310224":"## 2.1 The material balance\n\nYour goal is to describe how the water concentration varies according to time and the position within the seeds.\n\nThe starting point is the good old material balance equation:\n\n$$\\verb! Accumulation = Input - Output + Generation!$$\n\nApplied to the component $A$ in a differential control volume, the material balance equation takes the form ([WELTY et al., 2007](https:\/\/www.amazon.com\/Fundamentals-Momentum-Heat-Mass-Transfer\/dp\/0470128682\/ref=sr_1_1?dchild=1&keywords=welty+mass+transfer&qid=1595683591&sr=8-1)):\n\n$$\\frac{\\displaystyle\\partial\\,C_A}{\\partial t } = - \\nabla \\cdot \\mathbf{N}_{A} + R_A$$\n\nin which:\n\n* $C_A$: $A$ concentration, in mol\/volume;\n* $\\mathbf{N}_{A}$: $A$ molar flux, in mol\/(time$\\cdot$area);\n* $R_A$: rate of production of $A$, in mol\/(time$\\cdot$volume);\n* $\\nabla \\cdot $: divergence operator, from differential calculus.\n\nIn this differential form, $\\displaystyle\\frac{\\partial\\,C_A}{\\partial t }$ corresponds to the accumulation, $- \\nabla \\cdot \\mathbf{N}_{A}$ corresponds to the input minus the output and $R_A$ corresponds to the generation.\n\nAs the control volume in question is infinitesimal, we must integrate the balance equation in the entire seed volume to obtain the evolution of the concentration over time in all points of the seed. However, it is necessary to first:\n\n* state assumptions regarding the physical system considered (in this case, our little seed);\n* identify appropriate initial and boundary conditions (IC and BC);\n* make the model dimensionless by changing variables;\n* discretize the equation so that it can be implemented and solved by the computer.","cd40d043":"To solve a partial differential equation (PDE), it is necessary to identify appropriate initial and boundary conditions (IC and BC). This is often the most difficult part of solving the problem.\n\n[HSU (1984)](http:\/\/www.fcfar.unesp.br\/arquivos\/560524.pdf) proposed the IC:\n\n$$ C_A = C_{A0} \\,\\,\\,\\forall r, \\,\\,\\, t = 0$$ \n\nand the BC's:\n\n$$ \\frac{\\partial C_A}{\\partial r} = 0, \\,\\,\\, r = 0, \\,\\,\\, t> 0 $$\n\n$$ C_A = [1-\\exp(-\\beta t)] C_{As} + C_{A0} \\exp(-\\beta t), \\,\\,\\, r=1, \\,\\,\\, t>0$$\n\nwhere $C_{As}$ is the water concentration in saturation, that is, the maximum water concentration that the seed can support.\n\nThe IC simply specifies that, at time $t=0$, the water concentration in the seed has an initial value of $C_{A0}$ at all points. The first BC comes from the symmetry of the spherical coordinate system. The second BC indicates that the variation of concentration on the seed surface can be expressed by a first order process, with a rate constant $\\beta$ to be adjusted to experimental data.\n\nThe greatest novelties introduced by the model proposed by [HSU (1984)](http:\/\/www.fcfar.unesp.br\/arquivos\/560524.pdf) are the exponential dependence of diffusivity with respect to concentration and the form of the second BC above.","c861dfd7":"## 2.5 Model discretization","a0ba0a53":"If you prefer boys, imagine this:","66a4a588":"## 2.4 Model nondimensionalization","0190eafe":"The objective function accepts the vector **params**, whose elements store the values of the parameters $\\kappa$, $D_0$ and $\\beta$.\n\nAll that remains to be done is the minimization calculation. You choose the minimization method [Particle Swarm](https:\/\/en.wikipedia.org\/wiki\/Particle_swarm_optimization), from the library [PySwarm](https:\/\/pythonhosted.org\/pyswarm\/):","e42592d3":"You plot the data and verify that it is in accordance with Figure 1 of the [paper](http:\/\/www.scielo.br\/pdf\/rarv\/v35n2\/a03v35n2.pdf):","c6bd3dfe":"## 2.3 Initial and boundary conditions","435d8cc6":"[HSU, K. H. - A Diffusion Model with a Concentration-Dependent Diffusion Coefficient for Describing Water Movement in Legumes During Soaking - Journal of Food Science (1983), p. 618-622.](http:\/\/www.fcfar.unesp.br\/arquivos\/560524.pdf)\n\n[EVENCIO, T. *et al.* - Curva de Absor\u00e7\u00e3o de \u00c1gua em Sementes de Pinh\u00e3o-Manso - Revista \u00c1rvore (2011), p. 193-197.](http:\/\/www.scielo.br\/pdf\/rarv\/v35n2\/a03v35n2.pdf)\n\n([WELTY et al. - Fundamentals of Momentum, Heat and Mass Transfer (2007)](https:\/\/www.amazon.com\/Fundamentals-Momentum-Heat-Mass-Transfer\/dp\/0470128682\/ref=sr_1_1?dchild=1&keywords=welty+mass+transfer&qid=1595683591&sr=8-1))","400255c4":"Printing the parameters:","4c2c67c2":"Everything seems to be right. Before performing parameter estimation, however, it is necessary to adapt the data. You transform the percentage humidity into fractional absorption:","29a14e35":"To view the video, you need to convert it to the *mp4* format:","db6afad3":"The video will be generated from the object **p1**. For this we must define two functions:\n\n* **init**, which initializes the video window. In this case, as we have already initialized the window in the object **p1** previously, we just make the function return **p1**;\n\n* **animate**, which makes the plot evolve. In this case, the **animate** function accepts the $i$ index and updates the graph by plotting **C[i,:]** for increasing values of *i*:","46d9b0fb":"# References","690406e4":"Expressing the model in dimensionless form (in which its variables have no dimension) is convenient because it allows us to study the model without worrying about details such as dimensions or units.\n\nTo nondimensionalize a PDE, it is necessary to change variables. [HSU (1984)](http:\/\/www.fcfar.unesp.br\/arquivos\/560524.pdf) proposed the following changes:\n\n$$S = \\int_0^{C_A^*} D\\, dC_A^* = \\frac{\\exp\\,(kC_A^*-1)}{k} $$\n\n$$R = \\frac{r}{a}$$\n\n$$T = \\frac{D^{'}_0 t}{a^2}$$\n\nin which:\n\n$$C_A^* = \\frac{C_A-C_{A0}}{C_{As}-C_{A0}}$$\n\n$$k = \\kappa (C_{As}-C_{A0})$$\n\n$$D = \\frac{D_{AB}}{D^{'}_0}$$\n\n$$D^{'}_0 = D_0\\,\\exp(\\kappa C_{A0})$$\n\nwith $a$ denoting the radius of the seed. Don't get confused with the difference between $k$ e $\\kappa$ (kappa).\n\nAfter changing variables, the complete dimensionless model (PDE + IC and BC's) takes the form:\n\n$$ \\frac{\\partial S}{\\partial T} = D \\left(\\displaystyle\\frac{\\partial^2 S}{\\partial R^2} + \\frac{2}{R} \\displaystyle\\frac{\\partial S}{\\partial R} \\right) $$\n\n$$ S = 0 \\,\\,\\,\\forall R, \\,\\,\\, T = 0$$ \n\n$$ \\frac{\\partial S}{\\partial R} = 0, \\,\\,\\, R = 0, \\,\\,\\, T> 0 $$\n\n$$ S = \\frac{1}{k}\\,[\\exp\\,(k\\,(1-\\exp(-B T)))-1], \\,\\,\\, R=1, \\,\\,\\, T>0$$\n\nwhere $B = \\beta a^2\/D^{'}_0$.\n\nIt took work, but in the end the equations got simpler.","021c145a":"# 1. Contextualization\n\nImagine that you are seeing this girl:","427a5332":"Note that the three matrices **grid_R**, **grid_theta** and **grid_C_star** have the same dimension.\n\nThe next commands generate a polar projection graph of our seed for the dimensionless instant $T=0 {.}04$:","bd6cd443":"To the estimation! The first step is to define the objective function for the estimation, that is: a Python function that accepts the parameters $\\kappa$, $D_0$ and $\\beta$ as arguments, calculate the fractional absorption curve $M_t\/M_{\\infty}$ and return the sum of squares of the differences between the points of the calculated curve and the experimental curve. This function will be provided to a numerical optimization method, which will find the values of $\\kappa$, $D_0$ e $\\beta$ that minimize the value returned by the function. If the method works well, the difference between the experimental and calculated curves will be minimal and we can say that the model describes the experimental data well!\n\nThis function is defined below:","c049d68c":"Estimating parameters of a model means finding values for the parameters that make the model reproduce a certain set of experimental data.\n\nWe know that the parameters of our model are $\\kappa$, $D_0$ and $\\beta$. But what experimental data is it capable of reproducing?\n\nThe first bet could be the concentration of water in the seeds; after all, this is the quantity calculated by the model. But it is difficult to measure this concentration. If quickly search the literature of the domain, you will notice that a very presented experimental information is the *fractional absorption* $M_t\/M_{\\infty}$, a measure of the ratio between the amount of water absorbed up to a given time and the maximum absorbable capacity until complete saturation. The relationship between fractional absorption and concentration is given by the expression:\n\n$$\\frac{M_t}{M_{\\infty}} = \\frac{\\int_0^1 C^{*} 4 \\pi R^2 dR}{\\int_0^1 4 \\pi R^2 dR}$$\n\nWe can compute $M_t\/M_{\\infty}$ from the data obtained in the example we prepared for that bandit. We use the function [simps](https:\/\/docs.scipy.org\/doc\/scipy-0.14.0\/reference\/generated\/scipy.integrate.simps.html) from library [SciPy](https:\/\/www.scipy.org\/) to calculate the integrals using the [Simpson's tule](https:\/\/en.wikipedia.org\/wiki\/Simpson%27s_rule):","ac2c140f":"Beautiful! Just like the article. Each of these curves represents the concentration profile in the seed at a given instant $T$. As time goes by, the concentration values increase and get closer and closer to 1. This increase occurs more quickly next to the surface (that is, for higher $R$ values). Eventually, when $T \\rightarrow \\infty$, $C_A \\rightarrow 1$ for all points $R$.\n\n\"*That alone would be enough to impress my passion*,\" you think, sighing. But you want more! How about plotting a polar projection of the result at a certain instant (for example, $T=0{.}04$)?\n\nThe first step is to create matrices that represent the domain in $R$ and $\\theta$ (polar coordinates) and the image in $ C ^ * $. This can be done with the aid of [meshgrid](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.meshgrid.html) and [tile](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.tile.html), from [NumPy](http:\/\/www.numpy.org\/) library:","f3dc7305":"In this notebook, we will study a diffusive model proposed by [HSU (1984)](http:\/\/www.fcfar.unesp.br\/arquivos\/560524.pdf) to describe the movement of water in seeds during soaking processes, which find applications in everyday life and in agricultural and food industries. The partial differential equations obtained from mass balances will be discretized and solved numerically, which will provide the concentration of water in the seed as a function of position and time - that is, the result will be the function $C(x,t)$. Some methods for visualizing results will be described, including a video animation. Then, we will apply the model to correlate experimental data of water absorption by Jathropa seeds, measured by [EVENCIO *et al.* (2011)](https:\/\/www.scielo.br\/scielo.php?script=sci_arttext&pid=S0100-67622011000200003).\n\nThe numerical techniques used include discretization of partial differential equations, resolution of systems of ordinary differential equations, numerical integration and parameter estimation.\n\nPlease note that this notebook is about phenomenological (first principles) modeling, as opposed to the data-driven modeling prevalent in the machine learning community.","f2190b3f":"## 2.2 Assumptions","981238d2":"The curve calculated by the model seems to describe the trend of the experimental data, despite a certain distance between the end of the curve and the last points. In order to better understand this issue and rigorously evaluate the quality of the parameters obtained, it would be necessary to know the experimental errors and apply statistical techniques to analyze the estimation results, but this is a topic for another notebook.\n\nA last comment: if you are attentive, you noticed that in Figure 1 of the paper by [EVENCIO *et al.* (2011)](http:\/\/www.scielo.br\/pdf\/rarv\/v35n2\/a03v35n2.pdf) there is also a curve describing the experimental data, whose equation is:\n\n$$Y = 15{.}0587 - 0{.}370567x + 6{.}72404x^{0{.}5}$$\n\nThe parameters $15{.}0587$, $- 0{.}370567$ e $6{.}72404$ must have been obtained through a procedure similar to the one used in this *notebook*. What is the advantage of our complicated model in relation to this simple curve, which has the same number of parameters and is much simpler?\n\nThe advantage is that our model has a *strong theoretical basis*. Despite the greater complexity, we can use the model to study and better understand the absorption process, make videos describing the process, etc. Furthermore, it is probably reliable to use our parameters in conditions not so far from those of the original experiment used in the estimation. The parameters from the [paper](http:\/\/www.scielo.br\/pdf\/rarv\/v35n2\/a03v35n2.pdf), on the other hand, can probably only be used strictly under the conditions in which they were estimated, since the model is very simple and totally empirical (it has no theoretical basis).","0435a396":"Voil\u00e0! Mission accomplished!\n\nNotice how the water flow is much stronger in the initial moments, when the concentration gradient (the driving force for the diffusion phenomena) is greater. As the gradient decreases, the flow of water within the seed also decreases. It is notorious, for example, that the variation in the water concentration in the range $T =$ 0.00 to 0.02 is much greater than the variation in the range $T =$ 0.10 to 0.12.\n\nWith the video in hand, you can now impress the love of your life.\n\nIt's Saturday night. You called your suitor for a romantic dinner at home, with everything she is entitled to: wines, candles, salmon with passion fruit sauce. The conversation is wonderful, you have talked delightfully about just everything. The environment is increasingly favorable.\n\nYou decide the time is right:\n\n&#8212; Honey, I have something very special to show you.\n\nYou turn on the TV, connect to the computer ... Very slowly, to make her curious.\n\n&#8212; What will appear there?\n\n&#8212; Something I did just for you.\n\nYou notice the anxiety in your loved one's breathing. And press the play.\n\nAt the end of the video, a few seconds of silence.\n\n&#8212; What is it?\n\n&#8212; It is the simulation of the movement of water inside a seed during the soaking process, performed by integrating the discretized partial differential equation of a diffusive model based on Fick's law with concentration-dependent diffusivity.\n\n&#8212; Oh...\n\nYou are shivering, in a cold sweat, with the mass transfer notebook in hand.\n\n&#8212; Want to see my notebook?\n\n&#8212; Let me have a look.\n\nShe analyzes the notebook very carefully for a few seconds. Until she says:\n\n&#8212; How can I know that this video represents reality well?\n\n&#8212; What?\n\n&#8212; Did you validate the model?\n\n&#8212; What do you mean, baby?\n\n&#8212; These parameters that you used to generate the video. Where did they come from?\n\n&#8212; They are arbitrary ...\n\nShe laughs out loud.\n\n&#8212; Arbitrary parameters, cuddly? Is this how you intend to win me over? Poor thing. You still need to grow a lot in life. But don't be upset, the night wasn't all bad. The passion fruit sauce was delicious...\n\nFailure! Failure! Your pride has never been so hurt! Just a few moments later, you say it is getting late and it will be dangerous for her to come home, say goodbye coldly and run to the computer.\n\nIt is still necessary to estimate the parameters.","7a61ff8d":"Looks great! However, to perform a parameter estimation, this curve is not enough. We need an experimental curve. You research the literature and choose the absorption curve of Jatropha seeds published in Figure 1 of [EVENCIO *et al.* (2011)](http:\/\/www.scielo.br\/pdf\/rarv\/v35n2\/a03v35n2.pdf).\n\nAs the data is not tabulated, but available in the form of a graph, you use the application [WebPlotDigitizer](http:\/\/arohatgi.info\/WebPlotDigitizer\/app\/) to obtain the points and save them in the form of a csv file (*comma separated values*), with the name **data_to_humiliate_that_ungrateful.csv**.\n\nThe data is imported from the csv file using the [genfromtxt](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.genfromtxt.html) function from the [NumPy](http:\/\/www.numpy.org\/) library: ","16d5c4bf":"# 4. Parameter estimation","3bf8bac3":"# 2. The model"}}