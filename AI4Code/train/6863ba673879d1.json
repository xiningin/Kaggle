{"cell_type":{"4d9b08e4":"code","01f993f2":"code","ca3274f5":"code","ec282dea":"code","2622e656":"code","3ff45152":"code","7cac7afa":"code","592cddc2":"code","d4be6497":"code","e156946f":"code","26fbe273":"code","db0bc70c":"code","aef4136b":"code","03ccdb62":"code","85f26dc3":"code","e8b24f7c":"code","df54086f":"code","27ae006e":"code","437ef68b":"code","84a39307":"code","25f242d8":"code","7b96d4d0":"code","e445ee1e":"code","b60da87c":"code","633ced2c":"code","3af54d8b":"code","5234246d":"code","794bc986":"code","409c8c11":"code","c2a5f623":"code","28f92476":"code","9e2c1d96":"code","a5fdcff0":"markdown","864d5bfc":"markdown","eed1733d":"markdown","fed69eea":"markdown","f0dff604":"markdown","8a09e9f2":"markdown","b6db4759":"markdown","6d564833":"markdown","03e051b5":"markdown","47e7386a":"markdown","e5413981":"markdown","7fc94396":"markdown","14e6c52e":"markdown"},"source":{"4d9b08e4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.feature_selection import RFE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor,GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import Pipeline\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\n\n#Load test and train Data\nhouse_sample=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv',encoding=\"ISO-8859-1\")\nhouse_test=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv',encoding=\"ISO-8859-1\")\nhouse_train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv',encoding=\"ISO-8859-1\")","01f993f2":"#preview Sample\nprint(house_sample.info())\nhouse_sample.head()","ca3274f5":"#preview Train\nprint(house_train.info())\nhouse_train.head()","ec282dea":"#preview Test\nhouse_test.head()","2622e656":"print('Missing Train Data:',house_train.isna().sum().any())\nprint('Missing Test Data:',house_test.isna().sum().any())\n\n\nprint('Missing Train Data:',house_train.isna().sum())\nprint('Missing Test Data:',house_test.isna().sum())","3ff45152":"house_train.isna().sum().plot(alpha=0.6,figsize=(16,8))\nhouse_test.isna().sum().plot(alpha=0.6,figsize=(16,8))\nplt.title(\"Missing Values for Train & Test Values\")\nplt.xlabel(\"Missing Values Count\")\nplt.grid('on')\nplt.xticks(np.arange(len(house_train.columns)),house_train.columns,rotation='vertical')\nplt.ylabel(\" Features\")","7cac7afa":"house_train.describe(include='all')","592cddc2":"house_train.corr(method='pearson')['SalePrice']","d4be6497":"house_train.columns","e156946f":"dropped_columns=['PoolQC','Fence', 'MiscFeature','FireplaceQu','Alley','LotFrontage']\n\n#Drop on Train\nhouse_train.drop(dropped_columns, axis=1)\n#Drop on Test\nhouse_test.drop(dropped_columns, axis=1)\n","26fbe273":"#Drop on Train\nhouse_train.fillna(0, inplace=True)\n#Drop on Test\nhouse_test.fillna(0, inplace=True)","db0bc70c":"print('Missing Train Data:',house_train.isna().sum().any())\nprint('Missing Test Data:',house_test.isna().sum().any())","aef4136b":"#Convert Objects to Categories\nfor column in house_train.select_dtypes(include=object).columns:\n     house_train[column]=house_train[column].astype('category')\n\nfor column in house_test.select_dtypes(include=object).columns:\n     house_test[column]=house_test[column].astype('category')\n","03ccdb62":"#Convert 'Year' Column to Categories\nhouse_train['YrSold']=house_train['YrSold'].astype('category')\nhouse_test['YrSold']=house_test['YrSold'].astype('category')\n","85f26dc3":"for column in house_train.select_dtypes(include='category').columns:\n     house_train[column]=house_train[column].cat.codes\n\nfor column in house_test.select_dtypes(include='category').columns:\n     house_test[column]=house_test[column].cat.codes","e8b24f7c":"house_train.head()","df54086f":"house_train.select_dtypes(include=['int','float']).columns","27ae006e":"#Normalize\nnormalized_columns=['MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual',\n       'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1',\n       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd',\n       'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF',\n       'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n       'MiscVal', 'MoSold']\n\ndef normalize(df_train,df_test):\n    result_train = df_train.copy()\n    result_test = df_test.copy()\n    \n    for feature_name in normalized_columns:\n        max_value = df_train[feature_name].max()\n        min_value = df_train[feature_name].min()\n        \n        #for both Test and Train\n        result_train[feature_name] = (df_train[feature_name] - min_value) \/ (max_value - min_value)\n        result_test[feature_name] = (df_train[feature_name] - min_value) \/ (max_value - min_value)\n    return result_train,result_test","437ef68b":"normalized_house_train,normalized_house_test=normalize(house_train,house_test)","84a39307":"normalized_house_train.head()","25f242d8":"y_price=house_train['SalePrice']\ny_price","7b96d4d0":"y_price=y_price\/1000000","e445ee1e":"filter_columns=['MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition']\nx_features=normalized_house_train[filter_columns]\nx_features_test=normalized_house_test[filter_columns]\nx_features.head()","b60da87c":"\n#lr_model = LogisticRegression()\n#knn_model=KNeighborsRegressor()\ngradient_model=GradientBoostingRegressor(learning_rate=0.01,loss='ls',alpha=0.1,n_estimators=200,max_depth=8)#DecisionTreeRegressor()#RandomForestRegressor,AdaBoostRegressor,GradientBoostingRegressor\n#SVR(kernel='linear', C=100, gamma='auto')\n\n# create the RFE model and select 3 attributes\nrfe = RFE(gradient_model, ((len(x_features.columns)\/\/5)*3))\nrfe = rfe.fit(x_features, y_price)\n# summarize the selection of the attributes\nkeep_columns_logic=rfe.support_\nprint(rfe.ranking_)\n\n\n# Get the names of the columns which are False - i.e. columns to delete\ncolumns_to_remove= x_features.columns.values[np.logical_not(keep_columns_logic)]\nprint('Remove Columns:',columns_to_remove)\n\n#remove columns\nextracted_x_features=x_features.copy()\nextracted_x_features_test=x_features_test.copy()\n\n\nextracted_x_features.drop(columns=columns_to_remove)\nextracted_x_features_test.drop(columns=columns_to_remove)","633ced2c":"X_train, X_test, y_train, y_test = train_test_split(extracted_x_features,y_price , test_size=0.3)","3af54d8b":"# fit the model on all available data\ngradient_model.fit(X_train,y_train)\nyhat=gradient_model.predict(X_test)\n\nprint('Train:',gradient_model.score(X_train,y_train))\nprint('Test:',gradient_model.score(X_test,y_test))\n\nprint('MSE (log):',metrics.mean_squared_log_error(y_test,yhat))","5234246d":"answer_yhat=gradient_model.predict(extracted_x_features_test)","794bc986":"answer_yhat=answer_yhat*1000000","409c8c11":"answer_yhat","c2a5f623":"normalized_house_test['Id'].values","28f92476":"results_df = pd.DataFrame({'Id':normalized_house_test['Id'].values, 'SalePrice':answer_yhat})\nresults_df.head()","9e2c1d96":"results_df.to_csv('House_Submission.csv')","a5fdcff0":"'MSSubClass',","864d5bfc":"### Cleaning","eed1733d":"## 3. Feature Selection with RFE","fed69eea":"Select & copy features for Training","f0dff604":"## 1. Descriptive Analysis & Data Cleaning","8a09e9f2":"### Handling Missing Values","b6db4759":"## 2. Data Tranformation\n\n### Modify Data Object types to categorical","6d564833":"### Normalize Data ","03e051b5":"# Working on the \"House Prediction Regression\" Competition\n\nThis is a playground competition that provides the participants with  [dataset](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques) containing 79 features. The task for this competition is generating a price prediction for each home in the test dataset.\n\n## Content\n1. Descriptive Analysis & Data Cleaning\n2. Data Transformation\n3. Feature Selection with RFE\n4. Build Model & Generate Predictions\n\nLet's begin by importing the needed libraries.\n\n### Import Libraries","47e7386a":"### Label Encoding","e5413981":"Drop all columns with more than 200 missing values.","7fc94396":"## 4. Build Model & Generate Predictions","14e6c52e":"Fill missing Values with Zero"}}