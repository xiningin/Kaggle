{"cell_type":{"d9fccf85":"code","e1dae33b":"code","33277b50":"code","950ce208":"code","eea95458":"code","5f709f5b":"code","38433b3e":"code","fdc0ae88":"code","be40e1e2":"code","c298b605":"code","41ed3901":"code","ea8a85f5":"code","84d9ed04":"code","1336888e":"code","4c286097":"code","ab1001e5":"markdown","7720d3d7":"markdown","7d5b26f0":"markdown","5493df04":"markdown","de34938e":"markdown","b2a6e703":"markdown","534ca138":"markdown"},"source":{"d9fccf85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e1dae33b":"import torch \nimport torch.tensor\nimport torch.nn as nn\nimport torchvision.transforms as transforms\nfrom torch.autograd import Variable\nfrom matplotlib import pyplot as plt\nimport numpy as np\nfrom sklearn.metrics import confusion_matrix\n\nimport shutil  \nimport sklearn\nimport sklearn.model_selection\nfrom PIL import Image\nfrom torch.utils.data.dataset import Dataset\nimport seaborn as sns","33277b50":"def create_and_load_meta_csv_df(dataset_path, destination_path, randomize=True, split=None):\n    \"\"\"Create a meta csv file given a dataset folder path of images and loads it as a pandas dataframe.\n    This function creates and saves a meta csv file named 'dataset_attr.csv' given a dataset folder path of images.\n    The file will contain images and their labels. This file can be then used to make\n    train, test and val splits, randomize them and load few of them (a mini-batch) in memory\n    as required. The file is saved in dataset_path folder if destination_path is not provided.\n    The function will return pandas dataframes for the csv and also train and test splits if you specify a \n    fraction in split parameter.\n    \n    Args:\n        dataset_path (str): Path to dataset folder\n        destination_path (str): Destination to store meta csv file\n        randomize (bool, optional): Randomize the csv records. Defaults to True\n        split (double, optional): Percentage of train records. Defaults to None\n    Returns:\n        dframe (pandas.Dataframe): Returns a single Dataframe for csv if split is none, else returns more two Dataframes for train and test splits.\n        train_set (pandas.Dataframe): Returns a Dataframe of length (split) * len(dframe)\n        test_set (pandas.Dataframe): Returns a Dataframe of length (1 - split) * len(dframe)\n    \"\"\"\n    if not os.path.exists(os.path.join(destination_path, \"dataset_attr.csv\")):\n        if create_meta_csv(dataset_path, destination_path=destination_path):\n            dframe = pd.read_csv(os.path.join(destination_path, 'dataset_attr.csv'))\n    else:\n        print(\"csv file for dataset is already present.\")\n        dframe = pd.read_csv(os.path.join(destination_path, 'dataset_attr.csv'))\n    print(\"Dataframe is created.\")\n\n    # shuffle if randomize is True or if split specified and randomize is not specified \n    # so default behavior is split\n    if randomize == True or (split != None and randomize == None):\n        # shuffle the dataframe here\n        dframe = sklearn.utils.shuffle(dframe)\n        train_set, test_set = train_test_split(dframe, split)\n        pass\n\n    if split != None:\n        train_set, test_set = train_test_split(dframe, split)\n        return dframe, train_set, test_set \n    \n    return dframe\n\ndef train_test_split(dframe, split_ratio):\n    \"\"\"Splits the dataframe into train and test subset dataframes.\n    Args:\n        split_ration (float): Divides dframe into two splits.\n    Returns:\n        train_data (pandas.Dataframe): Returns a Dataframe of length (split_ratio) * len(dframe)\n        test_data (pandas.Dataframe): Returns a Dataframe of length (1 - split_ratio) * len(dframe)\n    \"\"\"\n    # divide into train and test dataframes\n    train_no = int((split_ratio) * len(dframe))\n    test_no = int((1 - split_ratio) * len(dframe))+1\n    train_data = dframe[0:train_no]\n    test_data = dframe[(len(dframe) - test_no):]\n\n    return train_data, test_data\n\nclass ImageDataset(Dataset):\n    \"\"\"Image Dataset that works with images\n    \n    This class inherits from torch.utils.data.Dataset and will be used inside torch.utils.data.DataLoader\n    Args:\n        data (str): Dataframe with path and label of images.\n        transform (torchvision.transforms.Compose, optional): Transform to be applied on a sample. Defaults to None.\n    \n    Examples:\n        >>> df, train_df, test_df = create_and_load_meta_csv_df(dataset_path, destination_path, randomize=randomize, split=0.99)\n        >>> train_dataset = dataset.ImageDataset(train_df)\n        >>> test_dataset = dataset.ImageDataset(test_df, transform=...)\n    \"\"\"\n\n    def __init__(self, data, transform=None):\n        self.data = data\n        self.transform = transform\n        # get unique classes from data dataframe\n        self.classes = self.data['label']\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        #img_path = self.data.iloc[idx]['path']\n        #print(\"idx: \", idx)\n        image = np.asarray(self.data.iloc[idx][0:10000]).reshape(100,100).astype('uint8')\n        #image = Image.fromarray(img_np)\n        \n        # load PIL image\n        #image = image.convert('L')\n        \n        # get label (derived from self.classes; type: int\/long) of image\n        label = self.data.iloc[idx]['label']\n        \n        if self.transform:\n            image = self.transform(image)\n\n        return image, label","950ce208":"class FNet(nn.Module):\n    \"\"\"Fruit Net\n    \"\"\"\n    def __init__(self, num_classes = 5):\n        # make your convolutional neural network here\n        # use regularization\n        # batch normalization\n        super(FNet,self).__init__()\n        self.layer1 = nn.Sequential(\n            nn.Conv2d(1, 8, kernel_size=5, stride=1, padding=2),\n            nn.BatchNorm2d(8),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2))\n        self.fc1 = nn.Linear(50*50*8, 300) \n        #self.activ=nn.ReLU()\n        self.activ = nn.ReLU()\n        self.regu=nn.Dropout(0.1)\n        self.fc2=nn.Linear(300,5)\n        pass\n\n    def forward(self, x):\n        # forward propagation\n        out = self.layer1(x)\n        # out = self.layer2(out)\n        out = out.view(out.size(0), -1)\n        out = self.fc1(out)\n        out=self.regu(self.activ(out))\n        #print(out)\n        out=self.fc2(out)\n        #print(out)\n        return out","eea95458":"df, df_train, df_test = create_and_load_meta_csv_df(dataset_path='..\/input\/eyantrafruitsdataset\/dataset_attr.csv', \n                                                    destination_path='..\/input\/eyantrafruitsdataset\/', \n                                                    randomize=True, split=0.8)","5f709f5b":"df.head()","38433b3e":"print(df.info())","fdc0ae88":"id_rand = np.random.randint(0, 2443, size = 4)\nimages = list()\nlabels = list()\nfruit =[\"Apple\",\"Banana\",\"Orange\",\"Pineapple\",\"Strawberry\"]\n\nfor x in id_rand:\n    images.append(np.reshape(np.asarray(df.iloc[x][0:10000], dtype = np.float), (100, 100)))\n    labels.append(df.iloc[x]['label'])\n    \nplt.figure(figsize = (12, 12))\nfor c in range(len(images)):\n     \n    plt.subplot(1,4,c+1) #create subplot for fruits images\n    plt.imshow(images[c],cmap = plt.get_cmap('gray')) #show grayscale image of fruits which is store in .csv file\n    plt.title(fruit[labels[c]])\n    #print('Label :', labels[c]['label']) #print label of fruit","be40e1e2":"data_transforms = {\n    'train': transforms.Compose([transforms.ToTensor()]),\n    'test': transforms.Compose([transforms.ToTensor()]) }\n\nimage_datasets = {'train': ImageDataset(df_train, transform=data_transforms['train']), \n                'test': ImageDataset(df_test, transform=data_transforms['test'])}","c298b605":"dataloaders = { 'train_loader': torch.utils.data.DataLoader(image_datasets['train'],batch_size=7,shuffle=True),\n                    'test_loader': torch.utils.data.DataLoader(image_datasets['test'],batch_size=7,shuffle=True) }","41ed3901":"device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\ncnn=FNet().to(device) #create model called cnn\nloss_func = nn.CrossEntropyLoss() #create Cross Entropy loss function\noptimizer = torch.optim.SGD(cnn.parameters(), lr=0.001) #Use Adam optimizer with learning rate=0.001","ea8a85f5":"cnn","84d9ed04":"epoch = 2 #no of epochs\n\nfor i in range(epoch): \n    print('epoch : ',i+1) #print current epoch \n    num_times=0\n    losses=[] #array to store loss after every 100 batches\n    for j,[image1,label1] in enumerate(dataloaders['train_loader']): #get image and label from train_loader\n        image = Variable(image1) \n        label = Variable(label1)\n\n        optimizer.zero_grad()\n        result = cnn.forward(image1) #use cnn model to get result\n        loss = loss_func(result,label1) # use cross entrpy loss function to calculate loss\n        loss.backward() #use back propagation\n        optimizer.step()\n\n        if j % 100 == 0: \n            print(j,'\\t::: loss ---',loss.item()) #after 100 batches print loss\n            losses.append(loss.item()) #append loss to array\n            num_times += 1\n        \n        if j % 100 == 0:\n            cnn.eval() #use cnn.eval() function to calculate accuracy \n            correct_train = correct_valid = 0 \n            total_train = total_valid = 0\n\n            # loop to calculate accuracy after each epoch of train_loader i.e test dataset\n            for image2,label2 in dataloaders['train_loader']: \n                image2 = Variable(image2)\n                result2 = cnn(image2) #use cnn to get result\n\n                _,pred2 = torch.max(result2.data,1) # use to find max score of a neuron w.r.t. 1\n\n                total_train += label2.size(0) \n                correct_train += (pred2 == label2).sum().item() #no of correct indentified labels \n                acc_train = (correct_train\/total_train)*100 #calculate accuracy train dataset \n\n            print(\"Accuracy of Train Data : \",acc_train) #print accuracy of train dataset\n\n            for image3,label3 in dataloaders['test_loader']: # loop to calculate accuracy after each epoch of test_loader i.e test dataset\n                    image3 = Variable(image3)\n                    result3 = cnn(image3) #use cnn to get result\n\n                    _,pred3 = torch.max(result3.data,1) # use to find max score of a neuron w.r.t. 1\n\n                    total_valid += label3.size(0) \n                    correct_valid += (pred3 == label3).sum().item() #no of correct indentified labels \n                    acc_valid = (correct_valid\/total_valid)*100 #calculate accuracy of test dataset\n\n            print(\"Accuracy of Validation Data : \",acc_valid) #print accuracy of test dataset\n    plt.plot([i for i in range(num_times)],losses,label='epoch'+str(i)) #plot for loss and update after each epoch \n    plt.legend(loc=1,mode='expanded',shadow=True,ncol=2)\n\n\nplt.show() #plt graph for loss","1336888e":"save = 1 #use 0 or 1 \nif (save==True):\n        torch.save(cnn.state_dict(),'cnn.ckpt')\n        print(\"Model Saved\")","4c286097":"batch_size=7 \ncomp_datasets = ImageDataset(df_test, transform=transforms.ToTensor()) #use ToTensor() transform on complete dataset\ncomp_data = torch.utils.data.DataLoader(comp_datasets,batch_size,shuffle=True) #load complete dataset using torch.utils.data.DataLoader and shuffle dataset\n\nfor w,[image1,label1] in enumerate(comp_data): #read one batch\n    image = Variable(image1) \n    label = Variable(label1)\n    result = cnn(image)  #use cnn model on each image of batch to find label\n    _,pred = torch.max(result.data,1)  #predict result using max function,it given neuron with maximum output\n    for h in range(0,batch_size):\n        print('Label --- ',fruit[np.array(label[h])],'\\t Prediction --- ',fruit[np.array(pred[h])]) #print original name and predicted name\n    #print('Confusion Matrix : \\n',confusion_matrix(label, pred)) #Confusion matrix\n    sns.heatmap(confusion_matrix(label, pred), annot = True, fmt = 'd', cmap = \"Set3\")\n    break","ab1001e5":"**Create a custom dataloader and apply Transforms**","7720d3d7":"**Training and Validation**","7d5b26f0":"**Visualise data**","5493df04":"**Neural Network, loss function and optimizer**","de34938e":"**Loading dataframe using dataset module**","b2a6e703":"We are using regularization to avoid overfitting also the model is selected such that it is not too complex. Regularization penalizes to avoid overfitting. Also complex model along with the relevent data also learns noise in the data to avoid doing so we are doing regularization and avoiding model to be too complex.","534ca138":"**Prediction and Confusion Matrix**"}}