{"cell_type":{"e90668cc":"code","dbbc0721":"code","6c75f0f7":"code","e57d5e69":"code","b45d9d57":"code","3692f199":"code","37eb8054":"code","ebb2a9d8":"code","6fa49d44":"code","29e7e770":"code","f935572e":"markdown","f5fe2905":"markdown","5f2b4087":"markdown","72d1710f":"markdown","8f4918f5":"markdown","65814b38":"markdown","de556806":"markdown","412b715b":"markdown","2fdfb9ad":"markdown","d4055165":"markdown","927290e5":"markdown","90907665":"markdown","a9b2a58c":"markdown","d8ca5566":"markdown","daaa454a":"markdown","53b22a32":"markdown","3c321df5":"markdown","0e21c2a4":"markdown","f9285ff3":"markdown","d6f076b1":"markdown","ee9af6fc":"markdown","9dd2c28c":"markdown"},"source":{"e90668cc":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.neighbors import NearestNeighbors","dbbc0721":"data = pd.read_csv(\"\/kaggle\/input\/updated-beer-profile-and-ratings-data-set\/updated_beer_profile_and_ratings.csv\")\ndata.head()","6c75f0f7":"# List numeric features (columns) of different types\ntasting_profile_cols = ['Astringency', 'Body', 'Alcohol', 'Bitter', 'Sweet', 'Sour', 'Salty', 'Fruits', 'Hoppy', 'Spices', 'Malty']\nchem_cols = ['ABV', 'Min IBU', 'Max IBU']","e57d5e69":"def scale_col_by_row(df, cols):\n    scaler = MinMaxScaler()\n    # Scale values by row\n    scaled_cols = pd.DataFrame(scaler.fit_transform(df[cols].T).T, columns=cols)\n    df[cols] = scaled_cols\n    return df\n\ndef scale_col_by_col(df, cols):\n    scaler = MinMaxScaler()\n    # Scale values by column\n    scaled_cols = pd.DataFrame(scaler.fit_transform(df[cols]), columns=cols)\n    df[cols] = scaled_cols\n    return df\n\n# Scale values in tasting profile features (across rows)\ndata = scale_col_by_row(data, tasting_profile_cols)\n\n# Scale values in tasting profile features (across columns)\ndata = scale_col_by_col(data, tasting_profile_cols)\n\n# Scale values in chemical features (across columns)\ndata = scale_col_by_col(data, chem_cols)\n\n# Peak at re-scaled data\ndata.head()","b45d9d57":"# Select data for training (calculating similarity)\ndf = data.drop(['Name', 'Description', 'review_aroma', 'review_appearance', 'review_palate', 'review_taste', 'review_overall', 'number_of_reviews'],axis=1)\n\n# Use only numeric features\ndf_num = df.select_dtypes(exclude=['object'])\ndf_num.head()","3692f199":"# Random beer selector\nuser_input = df['Beer Name (Full)'].sample().iloc[0]\nprint(user_input)","37eb8054":"# Locate numeric features for selected beer\ntest_data = data[data[\"Beer Name (Full)\"] == user_input]\nnum_input = df_num.loc[test_data.index].values\n\n# Detect beer style\nstyle_input = test_data['Style'].iloc[0]\nprint(style_input)","ebb2a9d8":"def get_neighbors(data, num_input, style_input, same_style=False):\n    if same_style==True:\n        # Locate beers of same style\n        df_target = data[data[\"Style\"] == style_input].reset_index(drop=True)\n    else:\n        # Locate beers of different styles\n        df_target = data[data[\"Style\"] != style_input].reset_index(drop=True)\n\n    df_target_num = df_num.loc[df_target.index]\n    # Calculate similarities (n_neighbors=6 for 5 recommendations)\n    search = NearestNeighbors(n_neighbors=6, algorithm='ball_tree').fit(df_target_num)\n    _ , queried_indices = search.kneighbors(num_input)\n    # Top 5 recommendations\n    target_rec_df = df_target.loc[queried_indices[0][1:]]\n    target_rec_df = target_rec_df.sort_values(by=['review_overall'], ascending=False)\n    target_rec_df = target_rec_df[['Name', 'Brewery', 'Style', 'review_overall']]\n    target_rec_df.index = range(1, 6)\n    target_rec_df.drop('review_overall', axis=1, inplace=True)\n    return target_rec_df","6fa49d44":"# List recommended beers with the same style\ntop_5_same_style_rec = get_neighbors(data, num_input, style_input, same_style=True)\ntop_5_same_style_rec","29e7e770":"# List recommended beers with different styles\ntop_5_diff_style_rec = get_neighbors(data, num_input, style_input, same_style=False)\ntop_5_diff_style_rec","f935572e":"## Calculating Item Similarities","f5fe2905":"_____\n*Have questions or comments? Share them on the comments section!*","5f2b4087":"Let's select a random beer as our input data to generate some recommendations:","72d1710f":"With the given input, we want to select 5 beers that are **most similar** to our input (as measured by their numerical feature values).\n\nTo generate interesting beer recommendations, we want to create two sets of recommendations--the first set will list recommended beers of the *same style* as your chosen beer, while the second one displays recommended beers of *other styles*.\n\nFurthermore, we will rank our recommended beers based on their known favorability score.","8f4918f5":"The data set used in this notebook is a slightly modified version of [this data set](https:\/\/www.kaggle.com\/ruthgn\/beer-profile-and-ratings-data-set?select=beer_profile_and_ratings.csv) on Kaggle. \n\nA good number of beers in the original data set have only been reviewed by fewer than 25 people--making their overall favorability scores somewhat questionable, especially when compared to those displayed by beers that have been reviewed by a lot more users. To tackle this issue, the updated data set (that we'll be using thoughout this notebook) contains *ML-generated* overall scores for beers with fewer than 25 reviewers. To learn about this process in more detail, take a look at [this notebook](https:\/\/www.kaggle.com\/ruthgn\/beer-score-prediction-nn-embedding-kerastuner\/edit\/run\/81217412).","65814b38":"# Bonus: Part 4 - Deployment","de556806":"## Introduction","412b715b":"We will be using the scaled values from the feature columns listed above to calculate similarities between beers in our dataset.","2fdfb9ad":"# Part 2 - Data Preprocessing","d4055165":"### Recommended beers of the same style","927290e5":"# Part 3 - Generating Recommendations","90907665":"To build our recommendation system, we're going to use [k-nearest neighbors (KNN)](https:\/\/en.wikipedia.org\/wiki\/K-nearest_neighbors_algorithm) as a method to measure how far apart our data points are. To be able to compare different data variables on equal footing, we need to scale our variable values. However, there is something else that we need to do before we start transforming our feature values across columns.","a9b2a58c":"## The Data","d8ca5566":"### Recommended beers of the same style","daaa454a":"# Part 1 - Preliminaries","53b22a32":"Our beer recommendations will be generated from a list of 3197 unique beers from 934 different breweries. We want to take into account the following aspects of each beer to calculate similarities between items:\n- Alcohol content (% by volume)\n- Minimum and maximum IBU (International Bitterness Units)\n- Mouthfeel:\n    - Astringency\n    - Body\n    - Alcohol\n- Taste:\n    - Bitter\n    - Sweet\n    - Sour\n    - Salty\n- Flavor And Aroma:\n    - Fruits\n    - Hoppy\n    - Spices\n    - Malty\n    \nRecommended items will also be ranked based on their overall consumer review score.","3c321df5":"Let's revisit the source of the values on the taste profile columns:\n\n>The [columns] represent the tasting profile features of the beer, and are defined by word counts found in up to 25 reviews of each beer. The assumption is that people writing reviews are more than likely describing what they do experience rather than what they do not.\n\nBecause these values as calculated based on absolute word counts originating from various reviews (of various lengths), the total values in these columns do not sum up consistently between every single row representing an individual beer. Therefore, we need to re-scale the values in these columns across each row before applying the scaler across columns.","0e21c2a4":"Instead of randomly choosing an input value to generate random recommendations, why don't you try looking up your favorite beer to generate beer recommendations you'll **actually** love using this [beer recommender app](https:\/\/share.streamlit.io\/ruthgn\/beer-recommender\/main\/beer-recommender-app.py)? \ud83d\ude09","f9285ff3":"Are you interested in learning how to build your own recommendation system? Do you need help deciding what beer to drink next? If you answer \"yes\" to either or both, you've come to the right place.","d6f076b1":"## Imports and Configuration","ee9af6fc":"## Input Data","9dd2c28c":"*Note: The updated beer profile and ratings data set is not available on Kaggle but can be found [here](https:\/\/github.com\/ruthgn\/Beer-Recommender\/blob\/main\/updated_beer_profile_and_ratings.csv).*"}}