{"cell_type":{"d908aa9a":"code","ad7c97b5":"code","ee079fbf":"code","ce550238":"code","d8699dbf":"code","830708e5":"code","d47de8cd":"code","75084169":"code","cfc1754d":"code","da2d8dcb":"code","715caecf":"code","0d3859fd":"code","2a91edc1":"code","f3811fdc":"code","5c2a6cf7":"code","c1088636":"code","07cec5b5":"code","ea453197":"code","5c8e59e6":"code","5d7b2836":"code","597c6688":"code","192cd974":"code","308438e8":"code","ec7c8c69":"code","3ca747ac":"code","a91e1383":"code","4a1f899d":"code","e7ab11cb":"markdown","3d345660":"markdown","0ff5be94":"markdown","e378ab49":"markdown","302bdf92":"markdown","e00ad170":"markdown","cef5180c":"markdown","705f7e1f":"markdown","40f87656":"markdown","3c93f7d6":"markdown","eff5378d":"markdown","6e572daf":"markdown","c585d26b":"markdown","e5e57383":"markdown","59879e59":"markdown","6996f655":"markdown","fdf4f087":"markdown","3822d568":"markdown"},"source":{"d908aa9a":"# python general\nimport pandas as pd\nimport numpy as np\nfrom collections import OrderedDict\n\n#scikit learn\n\nimport sklearn\nfrom sklearn.base import clone\n\n# model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\n\n# ML models\nfrom sklearn.ensemble import RandomForestRegressor\n\n# error metrics\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, median_absolute_error\n","ad7c97b5":"def mape(y_true, y_pred):\n    y_val = np.maximum(np.array(y_true), 1e-8)\n    return (np.abs(y_true -y_pred)\/y_val).mean()","ee079fbf":"metrics_dict_res = OrderedDict([ ('mean abs perc error', mape) ])","ce550238":"def regression_metrics_yin(y_train, y_train_pred, y_test, y_test_pred,\n                           metrics_dict, format_digits=None):\n    df_results = pd.DataFrame()\n    for metric, v in metrics_dict.items():\n        df_results.at[metric, 'train'] = v(y_train, y_train_pred)\n        df_results.at[metric, 'test'] = v(y_test, y_test_pred)\n\n    if format_digits is not None:\n        df_results = df_results.applymap(('{:,.%df}' % format_digits).format)\n\n    return df_results","d8699dbf":"numeric_features = ['Curb_Weight','year']\n\nall_numeric_features = list(numeric_features)\n\ntarget = ['Price_USD']\n\ntarget_name = 'Price_USD'","830708e5":" ml_model_type = 'Random Forest'\n\nregression_metric = 'mean abs perc error'\n\ndo_grid_search_cv = False\nscoring_greater_is_better = False  # THIS NEEDS TO BE SET CORRECTLY FOR CV GRID SEARCH\n\ndo_retrain_total = True\nwrite_predictions_file = False\n\n# relative size of test set\ntest_size = 0.3\nrandom_state = 33","d47de8cd":"df = pd.read_csv('\/kaggle\/input\/ihs-markit-sample-competition\/train_sample.csv', index_col='vehicle_id')\n","75084169":"df.head(5)","cfc1754d":"df_oos = pd.read_csv('\/kaggle\/input\/ihs-markit-sample-competition\/oos_sample.csv', index_col='vehicle_id')","da2d8dcb":"df_oos.head()","715caecf":"# summary statistics\ndf[numeric_features + target].describe()","0d3859fd":"features = numeric_features\nmodel_columns = features + [target_name]\nlen(model_columns)","2a91edc1":"#dataframe for further processing\ndf_proc = df[model_columns].copy()\ndf_proc.shape","f3811fdc":"X_train, X_test, y_train, y_test = train_test_split(df_proc[features], df_proc[target_name], \n                                                    test_size=test_size, random_state=random_state)\n\nprint(X_train.shape)\nprint(X_test.shape)","5c2a6cf7":"   \nif ml_model_type == 'Random Forest':\n\n    model_hyper_parameters_dict = OrderedDict(n_estimators=10, \n                                              max_depth=4, \n                                              min_samples_split=2, \n                                              max_features='sqrt',\n                                              min_samples_leaf=1, \n                                              random_state=random_state, \n                                              n_jobs=4)\n   \n    regressor = RandomForestRegressor(**model_hyper_parameters_dict)\n        \nbase_regressor = clone(regressor)    \n","c1088636":"regressor.fit(X_train, y_train)","07cec5b5":"y_train_pred = regressor.predict(X_train)\ny_test_pred = regressor.predict(X_test)","ea453197":"y_train_pred","5c8e59e6":"df_regression_metrics = regression_metrics_yin(y_train, y_train_pred, y_test, y_test_pred,\n                                               metrics_dict_res, format_digits=3)\n\ndf_output = df_regression_metrics.copy()\ndf_output.loc['Counts','train'] = len(y_train)\ndf_output.loc['Counts','test'] = len(y_test)\ndf_output","5d7b2836":"df_oos.head()","597c6688":"df_proc_oos = df_oos[features].copy()\n#df_proc_oos[target_name] = 1","192cd974":"y_oos_pred = regressor.predict(df_proc_oos)","308438e8":"df_proc_oos.head()","ec7c8c69":"id_col = 'vehicle_id'\ndf_out = (pd.DataFrame(y_oos_pred, columns=[target_name], index=df_proc_oos.index)\n            .reset_index()\n            .rename({'index': id_col}, axis=1))","3ca747ac":"df_out.head()","a91e1383":"df_out.shape","4a1f899d":"df_out.to_csv('submission.csv', index=False)","e7ab11cb":"## Metrics","3d345660":"# Global options","0ff5be94":"# Load  data\n","e378ab49":"##  Model definition","302bdf92":"## Apply model and produce output","e00ad170":"## Define features","cef5180c":"## Subset to relevant columns","705f7e1f":"# Feature exploration","40f87656":"## Training data","3c93f7d6":"# Apply model to OOS data","eff5378d":"#  ML data preparation","6e572daf":"# Import libraries","c585d26b":"## ML model training","e5e57383":"# Model evaluation","59879e59":"## Train test split","6996f655":"## Train, test predictions","fdf4f087":"## Out of sample data (to predict)","3822d568":"## Numerical features"}}