{"cell_type":{"37666a0f":"code","acae99f9":"code","d44a2b51":"code","cbf7abf1":"code","48466f53":"code","d1cea91a":"code","d5339b7e":"code","0d3e43e5":"code","783c75a0":"code","f07d3a24":"code","edb34a63":"code","0c9ff6b4":"code","5b6fa136":"code","53e00ad4":"code","0393e815":"code","f4800222":"code","7464d909":"code","1d2f48a0":"code","16c3cd80":"code","85868117":"code","92fe5336":"code","98878e62":"code","0aa0918c":"code","c2fd5b63":"code","5e01fa18":"code","af982dbb":"code","d310efa6":"code","7bc615f6":"code","b85b3042":"code","207a2443":"code","4a5e73ea":"code","ef8bd8d8":"markdown","94bc1ae2":"markdown","30b32f2c":"markdown","373fa912":"markdown","2b503b7c":"markdown","402352b9":"markdown","c2d0c2e1":"markdown","2c3dec9f":"markdown","dee94353":"markdown","09c92a86":"markdown","855ded9d":"markdown","a053f9f8":"markdown","1e745a62":"markdown","1983d0f4":"markdown","6c62a400":"markdown","edc221e1":"markdown"},"source":{"37666a0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        # print(os.path.join(dirname, filename))\n        pass\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","acae99f9":"import json\nlist_dict = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        path_file = os.path.join(dirname, filename)\n        list_dict_file = json.load(open(path_file))\n        list_dict += list_dict_file","d44a2b51":"# total data count of battles \nprint(len(list_dict))","cbf7abf1":"list_dict[1]","48466f53":"match = list_dict[1]\n# first level\nmatch.keys()","d1cea91a":"# second level\nprint(match['battle'].keys())\nprint(match['event'].keys())","d5339b7e":"# level 3\nfrom pprint import pprint \nlist_teams = match['battle']['teams']\nprint(len(list_teams))\npprint(list_teams)\n# teams is a list with 2 elements","0d3e43e5":"def get_mode(match):\n    mode = match['event']['mode']\n    return mode\nmode = get_mode(match)\nmode","783c75a0":"def get_map(match):\n    map_ = match['event']['map']\n    return map_\nmap_ = get_map(match)\nmap_","f07d3a24":"list_result_str = []\ndict_results={}\nfor match in list_dict:\n    try:\n        result_str = match['battle']['result']\n        dict_results[result_str]=1\n        if list_result_str:\n            list_result_str.append(list_result_str)\n    except:\n        continue\n\ndict_results.keys()","edb34a63":"def get_team_win(match):\n    # return: int. 0 if first team wins. 1 if second team wins.\n    result_str = match['battle']['result']\n    star_player_id = match['battle']['starPlayer']['tag']\n    teams = match['battle']['teams']\n    \n    \n    # if starplayer is in a team, this team win\n    for index, team in enumerate(teams):\n        for player in team:\n            player_id = player['tag']\n            if player_id == star_player_id:\n                team_win = index\n                return team_win\n    \nteam_win = get_team_win(match)\nteam_win","0c9ff6b4":"def get_player_team(match, player_id):\n    # return: int. 0 if first team. 1 if second team.\n    # print(match['battle']['teams'])\n    for index, team in enumerate(match['battle']['teams']):\n        for player in team:\n            player_tag = player['tag']\n            if player_tag == player_id:\n                player_team = index\n                return player_team\nplayer_id = '#8Y9QGR0U'\n# player_id = '#222UGGPG0'\nplayer_team = get_player_team(match, player_id)\nplayer_team","5b6fa136":"def get_player_win(match, player_id):\n    # return: int. 0 if defeat. 1 if win.\n    team_win = get_team_win(match)\n    player_team = get_player_team(match, player_id)\n    if team_win == player_team:\n        player_win = 1\n    else:\n        player_win = 0\n    return player_win\n\nplayer_win = get_player_win(match, player_id)\nplayer_win","53e00ad4":"def get_list_dict_brawler_map_win(match):\n    # return: int. 0 if first team. 1 if second team.\n    # print(match['battle']['teams'])\n    list_win = []\n    mode = get_mode(match)\n    map_ = get_map(match)\n    for index, team in enumerate(match['battle']['teams']):\n        for player in team:\n            brawler = player['brawler']['name']\n            \n            player_id = player['tag']\n            player_win = get_player_win(match, player_id)\n            d={}\n            d['brawler'] = brawler\n            d['win'] = player_win\n            d['mode'] = mode\n            d['map'] = map_\n            list_win.append(d)\n    return list_win\nget_list_dict_brawler_map_win(match)","0393e815":"list_match_data = []\nfor index, match in enumerate(list_dict):\n    try:\n        list_match_data_file = get_list_dict_brawler_map_win(match)\n    except:\n        print(index)\n        pprint(match)\n        get_list_dict_brawler_map_win(match)\n        break\n    list_match_data += list_match_data_file","f4800222":"list_match_data = []\nfor index, match in enumerate(list_dict):\n    try:\n        list_match_data_file = get_list_dict_brawler_map_win(match)\n    except:\n        continue\n    list_match_data += list_match_data_file\nline_count = len(list_match_data)\nprint(f'{line_count} brawlers datawin')","7464d909":"import pandas as pd ","1d2f48a0":"df = pd.DataFrame(list_match_data)\ndf.info()","16c3cd80":"df.head()","85868117":"df['win'].value_counts()","92fe5336":"print(len(df['brawler'].unique()))\ndf['brawler'].value_counts()\n","98878e62":"unique_list_numbers_matchs = df['brawler'].value_counts().reset_index().iloc[:,1].unique()\nprint(len(unique_list_numbers_matchs))\n\nunique_list_numbers_matchs","0aa0918c":"df['mode'].value_counts()","c2fd5b63":"df['map'].value_counts()","5e01fa18":"df_sample = df.loc[:500,:]\ndf_sample.shape","af982dbb":"def agregate_data(df):\n    print(len(df))\n    df_agg = df.groupby(['brawler', 'mode', 'map'], as_index=False).agg({'win':'mean'}).reset_index(drop=True)\n    return df_agg\ndf_sample_agg = agregate_data(df=df_sample)\n# first testing with a sample\ndf_sample_agg.head()","d310efa6":"df_sample_agg.shape","7bc615f6":"df_agg = agregate_data(df)\nprint(df_agg.shape)\ndf_agg","b85b3042":"def check_brawl_mode_stats(df, brawler, mode):\n    mask_brawler = df['brawler']==brawler\n    mask_map = df['mode']==mode\n    mask = mask_brawler & mask_map\n    df_selected = df.loc[mask, :]\n    print(df_selected)\n    print(df_selected['win'].unique())","207a2443":"check_brawl_mode_stats(df, 'BARLEY', 'brawlBall')","4a5e73ea":"check_brawl_mode_stats(df, 'TICK', 'gemGrab')","ef8bd8d8":"### Concat results in a list of dicts ","94bc1ae2":"### Find win ratio for each brawler \/ mode \/ map ","30b32f2c":"## build match list_dict data: brawler, win, mode, map","373fa912":"we found out that certain game modes don't have teams.\nWith the case of soloShowdown mode.\nLet's ignore these cases, so ...","2b503b7c":"### okay, these data look artificial...","402352b9":"### taking a sample","c2d0c2e1":"VERY strange data... a lot of brawler wiTH 100% and 0% of winrate  \nlet's deepdive in a some bralwer_map data","2c3dec9f":"### get mode and map","dee94353":"### with a sample","09c92a86":"## Let's analyze the data of this new model","855ded9d":"### find if player_win","a053f9f8":"## exploring the data structure","1e745a62":"# (\u256f\u00b0\u25a1\u00b0)\u256f\ufe35 \u253b\u2501\u253b","1983d0f4":"### with all data","6c62a400":"very strange data... just a few variations (only 9) of volume game in 36 brawlers ... too much coincidence","edc221e1":"## Convert the all dataset to this new data model"}}