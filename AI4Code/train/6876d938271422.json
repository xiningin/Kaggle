{"cell_type":{"812fea0f":"code","46e6012e":"code","74de55c8":"code","16ceacf4":"code","540e1e72":"code","400ea8ff":"code","0367fd2f":"code","75f4dd20":"code","977a76a7":"markdown"},"source":{"812fea0f":"import numpy as np \nimport matplotlib.pyplot as plt","46e6012e":"#Colors for the board\nred = (1, 0.2, 0)\nblue = (0, 1, 1)\nblack = (1, 1, 1)\nwhite = (0, 0, 0)","74de55c8":"class ChessBoard:\n    def __init__(self, num):\n        self.grid = np.zeros((num,num,3))\n        self.grid[::2, ::2] = black\n        self.grid[1::2, 1::2]= black\n        self.red_q = []\n        self.blue_q = []\n        \n    def render(self):\n        plt.imshow(self.grid)\n        \n    def add_blue(self, row, col):\n        self.grid[row, col] = blue\n        self.blue_q = [row, col]\n#         return self.blue_q\n    \n    def add_red(self, row, col):\n        self.grid[row, col] = red\n        self.red_q = [row, col]\n#         return self.red_q\n    \n    def is_under_attack(self):\n        #check for horizontal match\n        if self.red_q[0] == self.blue_q[0]:\n            return True\n        \n        #check for vertical match \n        if self.red_q[1] == self.blue_q[1]:\n            return True\n        \n        #check for diagonal match\n        if abs((self.red_q[1] - self.blue_q[1])\/(self.red_q[0] - self.blue_q[0])) == 1:\n            return True\n        else:\n            return False\n        \n        \n        \n        \n        ","16ceacf4":"# Render Board\ngame = ChessBoard(8)\ngame.add_blue(3,2)\ngame.add_red(6,5)\ngame.render()","540e1e72":"#Horizontal Check\ngame = ChessBoard(8)\nred_q = game.add_red(6,7)\nblue_q = game.add_blue(6,2)\ngame.render()\nactual = game.is_under_attack()\nexpected = True\nassert actual == expected","400ea8ff":"#Vertical Check\ngame = ChessBoard(8)\nred_q = game.add_red(3,7)\nblue_q = game.add_blue(6,7)\ngame.render()\nactual = game.is_under_attack()\nexpected = True\nassert actual == expected","0367fd2f":"#Diagonal Check\ngame = ChessBoard(8)\nred_q = game.add_red(2,1)\nblue_q = game.add_blue(6,5)\ngame.render()\nactual = game.is_under_attack()\nexpected = True\nassert actual == expected","75f4dd20":"#Not Under Attack\ngame = ChessBoard(8)\nred_q = game.add_red(4,3)\nblue_q = game.add_blue(1,5)\ngame.render()\nactual = game.is_under_attack()\nexpected = False\nassert actual == expected","977a76a7":"#Credits\n## Resources I used  \n[stack_overflow for Diagonal](https:\/\/stackoverflow.com\/questions\/19524155\/how-do-you-test-for-diagonal-in-n-queens)   \n###People I worked with  \nBrandon M , Eddie P, Connor B, Roger H"}}