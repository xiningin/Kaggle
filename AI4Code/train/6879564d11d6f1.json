{"cell_type":{"d789ce3f":"code","5a944250":"code","e9e2321e":"code","29935c79":"code","a6f0bc5d":"code","a2a2e175":"code","b42ece3b":"code","92b7007e":"code","69e38409":"code","0134ad99":"code","9e4229bf":"code","cd564c1a":"code","116d0b7b":"code","b1dcdcd6":"code","7823afed":"code","d51599ac":"code","377aaf28":"code","9a20910c":"code","ee5bbc03":"code","59e82bf7":"code","9fb180f0":"code","ccde3a07":"code","b3a1efe5":"code","5da0c15e":"code","bd290750":"code","40be9d63":"code","ee1c8fdc":"code","bba19a09":"code","27afdc6b":"code","cbff02c9":"code","c6c412f2":"code","b13678e7":"code","0be5b1a1":"code","3bfbbabe":"code","32165bbe":"markdown","b54d6a92":"markdown","0172b6ea":"markdown","f41d953a":"markdown","5dbed1ee":"markdown","e8bcda20":"markdown","e8f8999c":"markdown","b12021e2":"markdown","057ebdd9":"markdown","c8348f7d":"markdown","1acb1863":"markdown","a4335b2c":"markdown","c4e432aa":"markdown","fcd5eeeb":"markdown","ff24f5fa":"markdown","6c70f7fb":"markdown","a39ecacb":"markdown","eb838e24":"markdown","d1492e43":"markdown","e756536f":"markdown","ca9a5834":"markdown"},"source":{"d789ce3f":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as ex\nimport plotly.graph_objects as go","5a944250":"df = pd.read_csv('\/kaggle\/input\/credit-card-customers\/BankChurners.csv')","e9e2321e":"df.head(10)","29935c79":"del df['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1']\ndel df['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2']","a6f0bc5d":"df.info()","a2a2e175":"df['Attrition_Flag'].value_counts()","b42ece3b":"df['Income_Category'] = df['Income_Category'].replace(\n    {\n        'Unknown': 0, 'Less than $40K': 1, \n        '$40K - $60K': 2, '$60K - $80K': 3, \n        '$80K - $120K': 4, '$120K +': 5\n    }\n)\ndf['Attrition_Flag'] = df['Attrition_Flag'].replace(\n    {\n        'Attrited Customer': 0, 'Existing Customer': 1\n    }\n)\ndf['Gender'] = df['Gender'].replace(\n    {\n        'F': 0, 'M': 1\n    }\n)\ndf['Education_Level'] = df['Education_Level'].replace(\n    {\n        'Unknown': 0, 'Uneducated': 1, 'High School': 2,\n        'College': 3, 'Graduate': 4, 'Post-Graduate': 5, 'Doctorate': 6\n    }\n)\ndf['Marital_Status'] = df['Marital_Status'].replace(\n    {\n        'Unknown': 0, 'Single': 1, 'Married': 2, 'Divorced': 3\n    }\n)\ndf['Card_Category'] = df['Card_Category'].replace(\n    {\n        'Blue': 0, 'Silver': 1, 'Gold': 2, 'Platinum': 3\n    }\n)","92b7007e":"df.info()","69e38409":"from sklearn.model_selection import train_test_split\nx = df.drop(['Attrition_Flag'], axis=1)\ny = df['Attrition_Flag']\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","0134ad99":"from imblearn.over_sampling import SMOTE\nsm = SMOTE(sampling_strategy='minority', random_state=7)\n\nxx_train, yy_train = sm.fit_resample(x_train, y_train)\ndf_train = pd.concat([pd.DataFrame(yy_train), pd.DataFrame(xx_train)], axis=1)\n\nXX, YY = sm.fit_resample(df.drop('Attrition_Flag', axis=1), df['Attrition_Flag'])\ndf_os = pd.concat([pd.DataFrame(YY), pd.DataFrame(XX)], axis=1)","9e4229bf":"print('Before SMOTE:') \nprint(df['Attrition_Flag'].value_counts(), '\\n')\nprint('After SMOTE:')\nprint(df_os['Attrition_Flag'].value_counts())","cd564c1a":"plt.rcParams[\"figure.figsize\"] = (12,5)","116d0b7b":"sns.set_style('whitegrid')\nx_labels = ['Unknown', '<$40K', '$40K - $60K', '$60K - $80K', '$80K - $120K', '>$120K']\nsns.barplot(x='Income_Category', y='Attrition_Flag', data=df)\nplt.ylabel('ATTRITION FLAG')\nplt.xlabel('INCOME CATEGORY')\nplt.xticks([0, 1, 2, 3, 4, 5], x_labels)\nplt.title('INCOME vs FLAG (BEFORE SMOTE)')\nplt.show()","b1dcdcd6":"sns.set_style('whitegrid')\nx_labels = ['Unknown', '<$40K', '$40K - $60K', '$60K - $80K', '$80K - $120K', '>$120K']\nsns.barplot(x='Income_Category', y='Attrition_Flag', data=df_os)\nplt.ylabel('ATTRITION FLAG')\nplt.xlabel('INCOME CATEGORY')\nplt.xticks([0, 1, 2, 3, 4, 5], x_labels)\nplt.title('INCOME vs FLAG  (AFTER SMOTE)')\nplt.show()","7823afed":"sns.set_style('whitegrid')\nsns.barplot(x='Customer_Age', y='Attrition_Flag', data=df)\nplt.ylabel('ATTRITION FLAG')\nplt.xlabel('AGE')\nplt.title('AGE vs FLAG  (BEFORE SMOTE)')\nplt.show()","d51599ac":"sns.set_style('whitegrid')\nsns.barplot(x='Customer_Age', y='Attrition_Flag', data=df_os)\nplt.ylabel('ATTRITION FLAG')\nplt.xlabel('AGE')\nplt.title('AGE vs FLAG  (AFTER SMOTE)')\nplt.show()","377aaf28":"sns.set_style('whitegrid')\nx_labels = ['Unknown', 'Uneducated', 'High School', \n            'College', 'Graduate', 'Post-Graduate', 'Doctorate']\nsns.barplot(x='Education_Level', y='Attrition_Flag', data=df)\nplt.ylabel('ATTRITION FLAG')\nplt.xlabel('EDUCATION LEVEL')\nplt.xticks([0, 1, 2, 3, 4, 5, 6], x_labels)\nplt.title('EDUCATION LEVEL vs FLAG  (BEFORE SMOTE)')\nplt.show()","9a20910c":"sns.set_style('whitegrid')\nx_labels = ['Unknown', 'Uneducated', 'High School', \n            'College', 'Graduate', 'Post-Graduate', 'Doctorate']\nsns.barplot(x='Education_Level', y='Attrition_Flag', data=df_os)\nplt.ylabel('ATTRITION FLAG')\nplt.xlabel('EDUCATION LEVEL')\nplt.xticks([0, 1, 2, 3, 4, 5, 6], x_labels)\nplt.title('EDUCATION LEVEL vs FLAG  (AFTER SMOTE)')\nplt.show()","ee5bbc03":"f, axes = plt.subplots(1, 2)\nsns.barplot(x=\"Attrition_Flag\", y=\"Total_Amt_Chng_Q4_Q1\", data=df_os, ax=axes[0])\nsns.barplot(x=\"Attrition_Flag\", y=\"Total_Revolving_Bal\", data=df_os, ax=axes[1])\naxes[0].set_title('QUARTERLY CHANGE OF SPENDINGS')\naxes[0].set_ylabel('QUARTERLY TOTAL AMOUNT')\naxes[0].set_xlabel('FLAG')\naxes[0].set_xticks([0, 1], ['Attrited Customer', 'Existing Customer'])\naxes[1].set_title('TOTAL REVOLVING BALANCE')\naxes[1].set_ylabel('REVOLVING BALANCE')\naxes[1].set_xlabel('FLAG')\naxes[1].set_xticks([0, 1], ['Attrited Customer', 'Existing Customer'])\nplt.show()","59e82bf7":"sns.barplot(x=\"Marital_Status\", y=\"Total_Trans_Amt\", hue='Attrition_Flag', data=df_os)\nplt.xticks([0, 1, 2, 3], ['Unknown', 'Single', 'Married', 'Divorced'])\nplt.legend(labels=['Left: Attrited', 'Right: Existing'])\nplt.xlabel('MARITAL STATUS')\nplt.ylabel('TOTAL SPENDINGS')\nplt.title('MARRIAGE EFFECT')\nplt.show()","9fb180f0":"labels = ['Unknown', 'Uneducated', 'High School', 'College', 'Graduate', 'Post-Graduate', 'Doctorate']\nfig = go.Figure(data=[go.Pie(labels=labels, values=df_os['Education_Level'])])\nfig.show()","ccde3a07":"sns.barplot(x=\"Card_Category\", y=\"Total_Trans_Amt\", hue='Attrition_Flag', data=df_os)\nplt.xticks([0, 1, 2, 3], ['Blue', 'Silver', 'Gold', 'Platinum'])\nplt.legend(labels=['Left: Attrited', 'Right: Existing'])\nplt.xlabel('CARD CATEGORY')\nplt.ylabel('TOTAL SPENDINGS'),\nplt.title('EFFECT OF CARD CLASS')\nplt.show()","b3a1efe5":"corr = df.corr()\n\nplt.figure(figsize=(15,8))\nsns.heatmap(corr, cmap='coolwarm', annot = True)\nplt.show()","5da0c15e":"corr[abs(corr['Attrition_Flag']) > 0.11].index","bd290750":"df_train = df_train[['Attrition_Flag', 'Total_Relationship_Count', 'Months_Inactive_12_mon',\n       'Contacts_Count_12_mon', 'Total_Revolving_Bal', 'Total_Amt_Chng_Q4_Q1',\n       'Total_Trans_Amt', 'Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1', 'Avg_Utilization_Ratio']]","40be9d63":"df_train.info()","ee1c8fdc":"x_test = x_test[['Total_Relationship_Count', 'Months_Inactive_12_mon',\n       'Contacts_Count_12_mon', 'Total_Revolving_Bal', 'Total_Amt_Chng_Q4_Q1',\n       'Total_Trans_Amt', 'Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1', 'Avg_Utilization_Ratio']]","bba19a09":"from sklearn.metrics import classification_report","27afdc6b":"X = df_train.drop(['Attrition_Flag'], axis=1)\nY = df_train['Attrition_Flag']","cbff02c9":"X.shape, x_test.shape","c6c412f2":"Y.shape, y_test.shape","b13678e7":"from sklearn.linear_model import LogisticRegression\nlogistic = LogisticRegression(solver='liblinear')\nlogistic.fit(X, Y)\nLR_pred = logistic.predict(x_test)\nprint(classification_report(y_test, LR_pred))","0be5b1a1":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()\ntree.fit(X, Y)\nDT_pred = tree.predict(x_test)\nprint(classification_report(y_test, DT_pred))","3bfbbabe":"from sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier()\nforest.fit(X, Y)\nRF_pred = forest.predict(x_test)\nprint(classification_report(y_test, RF_pred))","32165bbe":"Deleting the last two columns as dataset owner suggested.","b54d6a92":"I hope you find this notebook helpful and informative. Give me an upvote if you do, take care!","0172b6ea":"1. Fixing an imbalanced dataset by Will Badr: https:\/\/bit.ly\/3qHCtGG","f41d953a":"# **BALANCE IS KEY**","5dbed1ee":"# CLASSIFICATION","e8bcda20":"There are not any missing variables.","e8f8999c":"We have succesfully generated new synthetic data to make our dataset more balanced. To see the importance of balanced data, I will look at a few features of imbalanced and balanced datasets and see if SMOTE helped us or not.","b12021e2":"# Exploratory Data Analysis","057ebdd9":" <img src=\"https:\/\/media.giphy.com\/media\/xUPOqo6E1XvWXwlCyQ\/giphy-downsized.gif\">","c8348f7d":"Final step before applying SMOTE: Create the test set for later use. Test set will be the ultimate test for the models so it is better to use original data in it.","1acb1863":"All variables in the dataset should be in integer or float form to apply SMOTE.","a4335b2c":"We will create the train and the test data here and also We will create a non-divided dataset for just explatory data analysis.","c4e432aa":"We have test the effect of balance in three different features. As you can see, the balance of the data is one of the most important things in data science. We did not do any modelling and predictions yet but we can tell the difference. We will do little bit more analysis before continue with classification.","fcd5eeeb":"I will take these features into consideration because these are the most correlated ones to the *flag*, in a positive way or negative way.","ff24f5fa":"# References","6c70f7fb":"# Synthetic Minority Oversampling Technique (SMOTE)","a39ecacb":" <img src=\"https:\/\/media.giphy.com\/media\/Ry1MOAeAYXvRVQLPw3\/giphy.gif\">","eb838e24":"As you go on with this notebook, you will see that we have an imbalanced dataset, and you will see how we approached this imbalanced data to make successful classification models. Have a nice reading.","d1492e43":"*Attrition Flag* is our resultant feature and it is not balanced. This is a very big problem for data analysis and classification model so we need to balance our data before doing anything. BUT I will use the imbalanced data in a few visualizations to show you the difference.","e756536f":"I have applied three main machine learning algorithms here. Using SMOTE gave us successful results, especially random forest. But we should remember that synthetic data is never as good as real data. We only use it if we need to, like this imbalanced dataset, we do needed it and it worked.","ca9a5834":"Now, we will check the overall correlation between features"}}