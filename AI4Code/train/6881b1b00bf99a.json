{"cell_type":{"73b2b5c7":"code","c7cbff23":"code","f908d26b":"code","f27112f0":"code","0cdbe0a2":"code","cd08ecbf":"code","ad68839c":"code","e73d2045":"code","22ecee0a":"code","878c0b88":"code","1862ca4b":"code","5e661371":"code","2aab6d3c":"markdown","63fb1295":"markdown"},"source":{"73b2b5c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c7cbff23":"import matplotlib.pyplot as plt\nimport os\nimport re\nimport math","f908d26b":"sample_submission = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/sample_submission.csv')\ntrain_data = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/test.csv')","f27112f0":"train_data.head()","0cdbe0a2":"test_data.head()","cd08ecbf":"print('train_data\u306e\u8981\u7d20\u6570', train_data.shape)\nprint('test_data\u306e\u8981\u7d20\u6570', test_data.shape)","ad68839c":"print('train_data\u306e\u30e6\u30cb\u30fc\u30af\u306a\u30ea\u30b9\u30c8', train_data['breath_id'].unique())\nprint('train_data\u306e\u30e6\u30cb\u30fc\u30af\u306a\u5024\u306e\u500b\u6570', train_data['breath_id'].nunique())\nprint('test_data\u306e\u30e6\u30cb\u30fc\u30af\u306a\u30ea\u30b9\u30c8', test_data['breath_id'].unique())\nprint('test_data\u306e\u30e6\u30cb\u30fc\u30af\u306a\u5024\u306e\u500b\u6570', test_data['breath_id'].nunique())","e73d2045":"groupby_breath_id = train_data.groupby('breath_id').mean()\nprint('R\u306e\u30e6\u30cb\u30fc\u30af\u306a\u5024', groupby_breath_id['R'].unique())\nprint('C\u306e\u30e6\u30cb\u30fc\u30af\u306a\u5024' ,groupby_breath_id['C'].unique())","22ecee0a":"groupby_breath_id.describe()","878c0b88":"train_3 = train_data.loc[train_data['breath_id'] == 1].head()","1862ca4b":"train_0 = train_data.loc[train_data['breath_id'] == 1000].head()\ntrain_0.head()","5e661371":"plt.figure(figsize=(16,9))\nplt.plot(train_3['time_step'], train_3['pressure'], label='pressure')\nplt.plot(train_3['time_step'], train_3['u_in'], label='u_in')\nplt.plot(train_3['time_step'], train_3['u_out'], label='u_out')\nplt.legend()\nplt.show()","2aab6d3c":"# \u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u6982\u8981\n## \u4e0e\u3048\u3089\u308c\u308b\u3082\u306e  \n\u4eba\u5de5\u547c\u5438\u5668\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf  \n\u30fbinspratory(\u5438\u3063\u305f\u606f)\u5074\u547c\u5438\u5668\u56de\u8def\u306e\u30d0\u30eb\u30d6\u306e\u958b\u9589\u5ea6(0~100)  \n\u30fbexpiratory(\u5410\u3044\u305f\u606f)\u5074\u547c\u5438\u5668\u56de\u8def\u306e\u5f01(0 or 1)  \n\u30fb\u80ba\u306e\u5c5e\u6027\u5024(time_step\u306b\u3088\u3089\u305a\u4e00\u5b9a\u3001breath_id\u306b\u3088\u308a\u5024\u304c\u5909\u5316(\u305d\u308c\u305e\u308c\uff13\u7a2e\u985e\u305a\u3064))  \n\u3000\u30fbR(\u62b5\u6297)\u3000\u2026 \u6c17\u9053\u304c\u3069\u306e\u7a0b\u5ea6\u5236\u9650\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u8868\u3059\u5024\u3001\u5927\u304d\u3044\u307b\u3069\u62b5\u6297\u304c\u5f37\u3044  \n\u3000\u30fbC(\u30b3\u30f3\u30d7\u30e9\u30a4\u30a2\u30f3\u30b9)\u3000\u2026 \u80ba\u306e\u30b3\u30f3\u30d7\u30e9\u30a4\u30a2\u30f3\u30b9\u3092\u8868\u3059\u5024\u3001\u98a8\u8239\u3092\u30a4\u30e1\u30fc\u30b8\u3059\u308b\u3068\u819c\u539a\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u30b3\u30f3\u30d7\u30e9\u30a4\u30a2\u30f3\u30b9\u3092\u8abf\u6574\u53ef\u80fd\u3002C\u304c\u5927\u304d\u304f\u306a\u308b\u307b\u3069\u98a8\u8239\u306f\u5439\u304d\u3084\u3059\u3044\u3002  \n\u30fbbreath_id \u2026 \u5404\u8a66\u884c\u306b\u3064\u3051\u3089\u308c\u305f\u756a\u53f7\u3001\u8a66\u884c\u6570\u306f125,750\u500b\u5b58\u5728\u3057\u3001\u305d\u306e\u3046\u3061\u306e7.5\u4e07\u500b\u304c\u8a13\u7df4\u7528\u30015\u4e07\u500b\u304c\u30c6\u30b9\u30c8\u7528\u3068\u3057\u3066\u4f7f\u7528  \n## \u4e88\u6e2c\u3059\u308b\u3082\u306e\n\u30fbPressure \u2026 expiratory\u5074\u3067\u6e2c\u5b9a\u3055\u308c\u305f\u7a7a\u6c17\u306e\u5727\u529b  \n\u203bcmH2O\u306f\u6c34\u4e2d\u30bb\u30f3\u30c1\u30e1\u30fc\u30c8\u30eb\u3068\u8aad\u3080\u5727\u529b\u306e\u5358\u4f4d","63fb1295":"# EDA"}}