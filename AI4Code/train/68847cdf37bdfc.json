{"cell_type":{"c6e33167":"code","8861fb95":"code","b897b1c6":"code","21fcd131":"code","4e7259dd":"code","2592d168":"code","80065578":"code","347d0d7d":"code","8d823f5e":"code","2a124bb4":"code","98b1033a":"code","e166df79":"code","29e0ef6c":"code","d838917d":"code","c9453b46":"code","34db4165":"code","670523ab":"markdown","01982919":"markdown","1a8c4c75":"markdown","1ccae9d1":"markdown","8481af17":"markdown","bf4962ec":"markdown","344f792d":"markdown","2ed043d9":"markdown","60380250":"markdown","8ad8a98c":"markdown"},"source":{"c6e33167":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nprint('Modules loaded')","8861fb95":"X = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","b897b1c6":"X.SalePrice.describe()","21fcd131":"sns.distplot(X.SalePrice)","4e7259dd":"print(\"Skewness: %f\" % X.SalePrice.skew())\nprint(\"Kurtosis: %f\" % X.SalePrice.kurt())","2592d168":"X.columns","80065578":"X = X.drop(['SaleType','SaleCondition','Id','MoSold', 'YrSold'], axis = 1)","347d0d7d":"total = X.isnull().sum().sort_values(ascending = False)\npercent = (X.isnull().sum()\/X.isnull().count()).sort_values(ascending = False)\nmissing_data = pd.concat([total, percent], axis =1, keys=['Total', 'Percent'])\nmissing_data[(missing_data.Percent > 0)]","8d823f5e":"X = X.drop(missing_data[missing_data.Percent > 0.1].index, axis = 1)","2a124bb4":"numerical_cols = [cname for cname in X.columns if X[cname].dtype in ['int64', 'float64']]\ncategorical_cols = [cname for cname in X.columns if X[cname].nunique() < 10 and \n                    X[cname].dtype == \"object\"]\nmy_cols = categorical_cols + numerical_cols\nprint(categorical_cols,numerical_cols)","98b1033a":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='median')\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","e166df79":"X_prepro = preprocessor.fit_transform(X)","29e0ef6c":"prepro_cols = numerical_cols + preprocessor.named_transformers_.cat.named_steps.onehot.get_feature_names(X[categorical_cols].columns).tolist()","d838917d":"X_prepro = pd.DataFrame(data = X_prepro, columns = prepro_cols, index = X.index)","c9453b46":"corrmat = X_prepro.corr()\nf, ax = plt.subplots(figsize=(18, 9))\nsns.heatmap(corrmat, vmax=.8, square=True)","34db4165":"k = 20 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(X_prepro[cols].values.T)\nsns.set(font_scale=1.25)\nf, ax = plt.subplots(figsize=(18, 9))\nsns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)","670523ab":"### Data Leakage: Variables acquired after the sale","01982919":"# Analysing the different independent variables\n","1a8c4c75":"### Categorical versus Numerical data","1ccae9d1":"### Missing Values","8481af17":"### Dependent variables overview","bf4962ec":"# Analysing the relationship between the variables","344f792d":"### Transformed into numpy array, needs to go back to pd dataframe","2ed043d9":"## Variables with highest correlation regarding 'SalePrice'","60380250":"#### Changing the categorical data to numerical data and imputing the left over missing values","8ad8a98c":"# Analysing the dependent variable: 'SalePrice'"}}