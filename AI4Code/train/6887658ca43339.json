{"cell_type":{"b7481731":"code","9245fabe":"code","c22fda77":"code","db25f0df":"code","8aadc58c":"code","54666f74":"code","63b58401":"code","661158fa":"code","68473120":"code","b94b5a81":"code","b9f7cf46":"code","53be9419":"code","a5387b56":"code","ab42c854":"code","07a13f01":"code","18582d63":"code","29f3f6bc":"code","a5a100f7":"markdown","70f07aec":"markdown","9b0bfae7":"markdown","ed3679a7":"markdown"},"source":{"b7481731":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9245fabe":"import matplotlib.pyplot as plt\nimport re","c22fda77":"#Reading the input file and dropping a redundant column \ndata = pd.read_csv('\/kaggle\/input\/times-of-india-headlines-2020\/2020_headlines.csv')\ndata.drop(columns=['Unnamed: 0'], inplace= True)","db25f0df":"# Lower-casing of headlines for text normalisation\ndata['headlines'] = data['headlines'].apply(lambda x : x.lower())","8aadc58c":"data.head()","54666f74":"def TextMatch(x):\n    patterns = ['covid-19', 'covid', 'corona','corona virus']\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, x):\n            result.append(1)\n        else:\n            result.append(0)\n    if np.sum(result) != 0:\n        return 1\n    else:\n        return 0","63b58401":"data['Flag'] = data['headlines'].apply(lambda x : TextMatch(x))","661158fa":"data.head()","68473120":"data['Flag'].value_counts()","b94b5a81":"data['date-time'] = pd.to_datetime((data.year*10000+data.month*100+data.day).apply(str),format='%Y%m%d')","b9f7cf46":"data.head()","53be9419":"data.drop(columns=['year','month','day'], inplace= True)","a5387b56":"fig, ax = plt.subplots(figsize=(15,7))\ndata.groupby(['date-time']).sum()['Flag'].plot(ax=ax)\nplt.grid()\nplt.ylabel('Count of COVID Mentions')\n#plt.xlabel('Date')","ab42c854":"from wordcloud import WordCloud,STOPWORDS","07a13f01":"wordcloud = WordCloud(width = 3000, height = 2000, random_state=1, background_color='black', colormap='Set2', collocations=False, stopwords = STOPWORDS)","18582d63":"wordcloud.generate(' '.join(data['headlines']))","29f3f6bc":"plt.figure(figsize=(20,20))\nplt.imshow(wordcloud)\nplt.axis('off')","a5a100f7":"_TextMatch()_ function matches the patterns (user-defined) for each text string and returns an output of 1 if the pattern matches.  \nSubsequently, we sum the elements of the array to see if for a particular news strip, any of the pattern matched or not!","70f07aec":"As we can see, almost 15.5k news article headlines had mention's of _CoVID-19_","9b0bfae7":"WordCloud","ed3679a7":"As we can see most frequent words that have occured are : _covid_, _case_, _lockdown_, _delhi_, _test_, _day_"}}