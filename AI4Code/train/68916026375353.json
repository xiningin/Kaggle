{"cell_type":{"9891ac1f":"code","9d14a7f3":"code","0e1ed098":"code","c0f5449f":"code","78719ade":"code","be69bff0":"code","fb08aa1e":"code","eef9db75":"code","db3fee7c":"code","3c404dca":"code","5001ed7a":"code","3189cf6b":"code","8e8faf34":"code","e760bc43":"code","04e93d13":"code","6bcbdadf":"code","ff57d20a":"code","d728db2c":"code","50d87315":"code","adb0b04d":"code","69431e2f":"code","53dda98e":"code","f8affd73":"code","f7353398":"code","65ea6681":"code","0f2c7128":"code","11d260e4":"code","c6ed7b56":"markdown","650aa047":"markdown","7d43bf10":"markdown","98ce18e7":"markdown","44583fd6":"markdown","b43e54bc":"markdown","c9003803":"markdown","9876e723":"markdown","e2a65d08":"markdown","ec8fa34f":"markdown","682bd028":"markdown","c9ab9162":"markdown","04d21fde":"markdown","0f5953e7":"markdown","b87e84cb":"markdown","04fb91c4":"markdown","3d1322e1":"markdown","ed44da36":"markdown","b659394a":"markdown","10fe03ff":"markdown","520ce2fe":"markdown","a1acdc97":"markdown","7bbb6f68":"markdown","71a47dea":"markdown","51a34c99":"markdown","e6f8f514":"markdown","f46b326b":"markdown","ef0a0dc7":"markdown","fb6cf337":"markdown","4fe77b5c":"markdown","b8f4ccbf":"markdown","1beb6f5e":"markdown","bb2d353c":"markdown","021e4bf0":"markdown","6faa0091":"markdown","23256a37":"markdown","3439df56":"markdown","e23d3610":"markdown","49246641":"markdown","8779c940":"markdown","f0a450f2":"markdown","0620c809":"markdown","11a0f2d4":"markdown","4c9b1538":"markdown"},"source":{"9891ac1f":"# importing packages\nimport numpy as np # to perform calculations \nimport pandas as pd # to read data\nimport matplotlib.pyplot as plt # to visualise","9d14a7f3":"# In read_csv() function, we have passed the location to where the file is located at dphi official github page\nboston_data = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/dphi-official\/Datasets\/master\/Boston_Housing\/Training_set_boston.csv\" )","0e1ed098":"boston_data.head()","c0f5449f":"X = boston_data.drop('MEDV', axis = 1)    # Input Variables\/features\ny = boston_data.MEDV      # output variables\/features","78719ade":"# import train_test_split\nfrom sklearn.model_selection import train_test_split \n\n# Assign variables to capture train test split output\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# X_train: independent\/input feature data for training the model\n# y_train: dependent\/output feature data for training the model\n# X_test: independent\/input feature data for testing the model; will be used to predict the output values\n# y_test: original dependent\/output values of X_test; We will compare this values with our predicted values to check the performance of our built model.\n \n# test_size = 0.20: 20% of the data will go for test set and 70% of the data will go for train set\n# random_state = 42: this will fix the split i.e. there will be same split for each time you run the code","be69bff0":"# find the number of input features\nn_features = X.shape[1]\nprint(n_features)","fb08aa1e":"from tensorflow.keras import Sequential    # import Sequential from tensorflow.keras\nfrom tensorflow.keras.layers import Dense  # import Dense from tensorflow.keras.layers\nfrom numpy.random import seed     # seed helps you to fix the randomness in the neural network.  \nimport tensorflow","eef9db75":"# define the model\nmodel = Sequential()\nmodel.add(Dense(10, activation='relu', input_shape=(n_features,)))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1))","db3fee7c":"# import RMSprop optimizer\nfrom tensorflow.keras.optimizers import RMSprop\noptimizer = RMSprop(0.01)    # 0.01 is the learning rate","3c404dca":"model.compile(loss='mean_squared_error',optimizer=optimizer)    # compile the model","5001ed7a":"seed_value = 42\nseed(seed_value)        # If you build the model with given parameters, set_random_seed will help you produce the same result on multiple execution\n\n\n# Recommended by Keras -------------------------------------------------------------------------------------\n# 1. Set `PYTHONHASHSEED` environment variable at a fixed value\nimport os\nos.environ['PYTHONHASHSEED']=str(seed_value)\n\n# 2. Set `python` built-in pseudo-random generator at a fixed value\nimport random\nrandom.seed(seed_value)\n\n# 3. Set `numpy` pseudo-random generator at a fixed value\nimport numpy as np\nnp.random.seed(seed_value)\n# Recommended by Keras -------------------------------------------------------------------------------------\n\n\n# 4. Set the `tensorflow` pseudo-random generator at a fixed value\ntensorflow.random.set_seed(seed_value) \nmodel.fit(X_train, y_train, epochs=10, batch_size=30, verbose = 1)","3189cf6b":"model.evaluate(X_test, y_test)","8e8faf34":"####################### Complete example to check the performance of the model with different learning rates #######################################\n# define the model\nmodel = Sequential()\nmodel.add(Dense(10, activation='relu', input_shape=(n_features,)))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1))\n\noptimizer = RMSprop(0.1)    # 0.1 is the learning rate\nmodel.compile(loss='mean_squared_error',optimizer=optimizer)    # compile the model\n\n# fit the model \nmodel.fit(X_train, y_train, epochs=10, batch_size=30, verbose = 1)\n\n# evaluate the model\nprint('The MSE value is: ', model.evaluate(X_test, y_test))","e760bc43":"# Play with learning rate\nlearning_rate = ?          # Replace ? with a floating-point number\nepochs = 10\noptimizer = RMSprop(learning_rate)\nmodel.compile(loss='mean_squared_error',optimizer=optimizer)    # compile the model\nmodel.fit(X_train, y_train, epochs=epochs, batch_size=30)     # fit the model\nmodel.evaluate(X_test, y_test)       # Evaluate the model","04e93d13":"####################### Complete example to check the performance of the model with different epochs and learning rate = 0.01 #######################################\n# define the model\nmodel = Sequential()\nmodel.add(Dense(10, activation='relu', input_shape=(n_features,)))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1))\n\noptimizer = RMSprop(0.1)    # 0.1 is the learning rate\nmodel.compile(loss='mean_squared_error',optimizer=optimizer)    # compile the model\n\n# fit the model \nmodel.fit(X_train, y_train, epochs=100, batch_size=30, verbose = 1)\n\n# evaluate the model\nprint('The MSE value is: ', model.evaluate(X_test, y_test))","6bcbdadf":"# Play with epochs\nlearning_rate = 0.01         \nepochs = ?             # Replace ? with an integer\noptimizer = RMSprop(learning_rate)\nmodel.compile(loss='mean_squared_error',optimizer=optimizer)    # compile the model\nmodel.fit(X_train, y_train, epochs=epochs, batch_size=30)     # fit the model\nmodel.evaluate(X_test, y_test)       # Evaluate the model","ff57d20a":"# play with learning rate and epochs\nlearning_rate = ?        # Replace ? with a floating-point number\nepochs = ?             # Replace ? with an integer\noptimizer = RMSprop(learning_rate)\nmodel.compile(loss='mean_squared_error',optimizer=optimizer)    # compile the model\nmodel.fit(X_train, y_train, epochs=epochs, batch_size=30)     # fit the model\nmodel.evaluate(X_test, y_test)       # Evaluate the model","d728db2c":"####################### Complete example to check the performance of the model with different batch size while keeping epochs as 30 and learning rate as 0.01 #######################################\n# define the model\nmodel = Sequential()\nmodel.add(Dense(10, activation='relu', input_shape=(n_features,)))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1))\n\noptimizer = RMSprop(0.1)    # 0.1 is the learning rate\nmodel.compile(loss='mean_squared_error',optimizer=optimizer)    # compile the model\n\n# fit the model \nmodel.fit(X_train, y_train, epochs=10, batch_size=40, verbose = 1)\n\n# evaluate the model\nprint('The MSE value is: ', model.evaluate(X_test, y_test))","50d87315":"# play with batch size\nlearning_rate = 0.01        \nepochs = 150         \nbatch = ?      # Replace ? with an integer    \noptimizer = RMSprop(learning_rate)\nmodel.compile(loss='mean_squared_error',optimizer=optimizer)    # compile the model\nmodel.fit(X_train, y_train, epochs=epochs, batch_size=batch)     # fit the model\nmodel.evaluate(X_test, y_test)       # Evaluate the model","adb0b04d":"# Import the GridSearchCV class\nfrom sklearn.model_selection import GridSearchCV\n\n# 1. Define the model's architecture\nmodel = Sequential()\nmodel.add(Dense(10, activation='relu', input_shape=(n_features,)))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1))\noptimizer = RMSprop(0.1)    # 0.1 is the learning rate\nmodel.compile(loss='mean_squared_error',optimizer=optimizer)    # compile the model\n\n# 2. Define the hyperparameters grid to be validated\nbatch_size = [10, 20, 40, 60, 80, 100]\nepochs = [10, 50, 100]\nparam_grid = dict(batch_size=batch_size, epochs=epochs)\ngrid = GridSearchCV(estimator=model, param_grid=param_grid, scoring='neg_mean_squared_error', n_jobs=-1)\n\n# 3. Run the GridSearchCV process\ngrid_result = grid.fit(X_train, y_train)\n\n# 4. Print the results of the best model\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))","69431e2f":"# ----------------------------- Functional Tuning - Option 1: using Sklearn  ------------------------------\n# Goal: tune the batch size and epochs\n\n# Import KerasRegressor class\nfrom keras.wrappers.scikit_learn import KerasRegressor\n\n# Define the model trhough a user-defined function\ndef create_model(optimizer=RMSprop(0.01)):\n  model = Sequential()\n  model.add(Dense(10, activation='relu', input_shape=(n_features,)))\n  model.add(Dense(8, activation='relu'))\n  model.add(Dense(1))\n  model.compile(loss='mse', metrics=['mse'], optimizer=optimizer)    # compile the model\n  return model\nmodel = KerasRegressor(build_fn=create_model, verbose=1)\n\n# Define the hyperparameters grid to be validated\nbatch_size = [10, 20, 30, 40, 60, 80, 100]\nepochs = [10, 50, 100]\nparam_grid = dict(batch_size=batch_size, nb_epoch=epochs)\nmodel = KerasRegressor(build_fn=create_model, verbose=1)\ngrid = GridSearchCV(estimator=model, param_grid=param_grid, cv=5, n_jobs=-1)\n\n# Run the GridSearchCV process\ngrid_result = grid.fit(X_train, y_train, verbose = 1)\n\n# Print the results of the best model\nprint('Best params: ' + str(grid_result.best_params_))","53dda98e":"# Import the cross validation evaluator\nfrom sklearn.model_selection import cross_val_score\n\n# Measure the model's performance\nresults = cross_val_score(grid.best_estimator_, X_test, y_test, cv=5)\nprint('Results: \\n  * Mean:', -results.mean(), '\\n  * Std:', results.std())","f8affd73":"# ----------------------------- Functional Tuning - Option 2: using Keras Tuner ------------------------------\n# Goal: tune the learning rate\n\n# 0. Install and import all the packages needed\n!pip install -q -U keras-tuner\nimport kerastuner as kt\n\n# 1. Define the general architecture of the model through a creation user-defined function\ndef model_builder(hp):\n  model = Sequential()\n  model.add(Dense(10, activation='relu', input_shape=(n_features,)))\n  model.add(Dense(8, activation='relu'))\n  model.add(Dense(1))\n  hp_learning_rate = hp.Choice('learning_rate', values = [1e-1, 1e-2, 1e-3, 1e-4]) # Tuning the learning rate (four different values to test: 0.1, 0.01, 0.001, 0.0001)\n  optimizer = RMSprop(learning_rate = hp_learning_rate)                            # Defining the optimizer\n  model.compile(loss='mse',metrics=['mse'], optimizer=optimizer)                   # Compiling the model \n  return model                                                                     # Returning the defined model\n\n# 2. Define the hyperparameters grid to be validated\ntuner_rs = kt.RandomSearch(\n              model_builder,                # Takes hyperparameters (hp) and returns a Model instance\n              objective = 'mse',            # Name of model metric to minimize or maximize\n              seed = 42,                    # Random seed for replication purposes\n              max_trials = 5,               # Total number of trials (model configurations) to test at most. Note that the oracle may interrupt the search before max_trial models have been tested.\n              directory='random_search')    # Path to the working directory (relative).\n\n# 3. Run the GridSearchCV process\ntuner_rs.search(X_train, y_train, epochs=10, validation_split=0.2, verbose=1)","f7353398":"# 4.1. Print the summary results of the hyperparameter tuning procedure\ntuner_rs.results_summary()","65ea6681":"# 4.2. Print the results of the best model\nbest_model = tuner_rs.get_best_models(num_models=1)[0]\nbest_model.evaluate(X_test, y_test)","0f2c7128":"# Load new test data\nnew_test_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/dphi-official\/Datasets\/master\/Boston_Housing\/Testing_set_boston.csv')","11d260e4":"# make a prediction\nmodel.predict(new_test_data)","c6ed7b56":"# Training our model\n","650aa047":"## Loading Libraries\nAll Python capabilities are not loaded to our working environment by default (even they are already installed in your system). So, we import each and every library that we want to use.\n\nIn data science, numpy and pandas are most commonly used libraries. Numpy is required for calculations like means, medians, square roots, etc. Pandas is used for data processing and data frames. Matplotlib is used for data visualization. We chose alias names for our libraries for the sake of our convenience (numpy --> np and pandas --> pd, matplotlib.pyplot as plt).\n\n**pyplot:** pyplot is matplotlib's plotting framework. It is the most used module of matplotlib.","7d43bf10":"## About the Dataset\nWe will be working on a data set that comes from the real estate industry in Boston (US). This database contains 14 attributes. The target variable refers to the median value of owner-occupied homes in 1000 USD's.\n\n* CRIM: per capita crime rate by town\n* ZN: proportion of residential land zoned for lots over 25,000 sq.ft.\n* INDUS: proportion of non-retail business acres per town\n* CHAS: Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\n* NOX: nitric oxides concentration (parts per 10 million)\n* RM: average number of rooms per dwelling\n* AGE: proportion of owner-occupied units built prior to 1940\n* DIS: weighted distances to five Boston employment centres\n* RAD: index of accessibility to radial highways\n* TAX: full-value property-tax rate per 10,000 USD\n* PTRATIO: pupil-teacher ratio by town\n* B: 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n* LSTAT: lower status of the population (%)\n* MEDV: Median value of owner-occupied homes in 1000 USD's (Target)\n","98ce18e7":"### 2. Compile the model\nCompiling the model requires that you first select a loss function that you want to optimize, such as mean squared error or cross-entropy.\n\nIt also requires that you select an algorithm to perform the optimization procedure. We\u2019re using **RMSprop** as our optimizer here. RMSprop stands for **Root Mean Square Propagation**. It\u2019s one of the most popular gradient descent optimization algorithms for deep learning networks. RMSprop is an optimizer that\u2019s reliable and fast. \n\n**Note:** For the time being understand gradient descent as just an optimization algorithm. You will know more about it in the next module.\n\nIt may also require that you select any performance metrics to keep track of during the model training process. The loss function used here is **mean squared error.** (don't worry if you don't know about the loss function mean squared error, for the time being just know it's a function that helps you know the error or loss your model is giving. You will learn more about loss functions in the coming modules)\n\nFrom an API perspective, this involves calling a function to compile the model with the chosen configuration, which will prepare the appropriate data structures required for the efficient use of the model you have defined.","44583fd6":"# Separating Input Features and Output Features\nBefore building any machine learning model, we always separate the input variables and output variables. Input variables are those quantities whose values are changed naturally in an experiment, whereas output variable is the one whose values are dependent on the input variables. So, input variables are also known as independent variables as its values are not dependent on any other quantity, and output variable\/s are also known as dependent variables as its values are dependent on other variable i.e. input variables. Like here in this data, we are trying to predict the price of a houce, so this is our target column i.e. 'MEDV'\n\nBy convention input variables are represented with 'X' and output variables are represented with 'y'.","b43e54bc":"#### **Summary of hyperparameter tuning**\nMost machine learning problems require a lot of hyperparameter tuning. Unfortunately, we can't provide concrete tuning rules for every model. Lowering the learning rate can help one model converge efficiently but make another model converge much too slowly. You must experiment to find the best set of hyperparameters for your dataset. That said, here are a few rules of thumb:\n\n*  Training loss should steadily decrease, steeply at first, and then more slowly until the slope of the curve reaches or approaches zero.\n*  If the training loss does not converge, train for more epochs.\n*  If the training loss decreases too slowly, increase the learning rate. Note that setting the learning rate too high may also prevent training loss from converging.\n*  If the training loss varies wildly (that is, the training loss jumps around), decrease the learning rate.\n*  Lowering the learning rate while increasing the number of epochs or the batch size is often a good combination.\n*  Setting the batch size to a very small batch number can also cause instability. First, try large batch size values. Then, decrease the batch size until you see degradation.\n*  For real-world datasets consisting of a very large number of examples, the entire dataset might not fit into memory. In such cases, you'll need to reduce the batch size to enable a batch to fit into memory.\n\nRemember: the ideal combination of hyperparameters is data dependent, so you must always experiment and verify.","c9003803":"### 1. Define the model\nDefining the model requires that you first select the type of model that you need and then choose the architecture or network topology.\n\nFrom an API perspective, this involves defining the layers of the model, configuring each layer with a number of nodes and activation function, and connecting the layers together into a cohesive model.\n\nModels can be defined either with the Sequential API or the Functional API (you will know this in later modules). Here we will define the model with Sequential API. Now **what is Sequential API?**\n\n**Sequential API**\nThe sequential API is the simplest API to get started with Deep Learning. \n\nIt is referred to as \u201csequential\u201d because it involves defining a Sequential class and adding layers to the model one by one in a linear manner, from input to output.\n\nThe example below defines a Sequential MLP model that accepts one input (i.e. 'YearsExperience'), has one hidden layer with 1 node and then an output layer with one node to predict a numerical value.\n\n","9876e723":"After splitting the data into training and testing sets, it's time to train our first deep learning model. Wait! Before training the deep learning model, let's understand the **Deep Learning Model Life-Cycle**.","e2a65d08":"### Exercise 2\n\nTest several epoch values to see the impact of varying this value when defining your model.","ec8fa34f":"The activation function we have chosen is **ReLU**, which stands for **rectified linear unit**. Activation function decides, whether a neuron should be activated or not\n\nReLU is defined mathematically as **F(x) = max(0,x)**. In other words, the output is x, if x is greater than 0, and the output is 0 if x is 0 or negative.","682bd028":"As you can see above, how the loss (cost) i.e. MSE has changed by just changing the learning rate.","c9ab9162":"We want to check the performance of the model that we built. For this purpose, we always split (both input and output data) the given data into training set which will be used to train the model, and test set which will be used to check how accurately the model is predicting outcomes.\n\nFor this purpose we have a class called 'train_test_split' in the 'sklearn.model_selection' module.\n\nWe split 80% of the data to the training set while 20% of the data to test set using below code.\nThe test_size variable is where we actually specify the proportion of the test set.\n\nBy passing our X and y variables into the train_test_split method, we are able to capture the splits in data by assigning 4 variables to the result.","04d21fde":"What is **verbose**?\n\nBy setting verbose 0, 1 or 2 you just say how do you want to 'see' the training progress for each epoch.\n\n`verbose=0` will show you nothing (silent)\n\n`verbose=1` will show you an animated progress bar like this:\n\n![progres_bar](https:\/\/dphi-courses.s3.ap-south-1.amazonaws.com\/Deep+Learning+Bootcamp\/progress+bar.png)\n\n`verbose=2` will just mention the number of epoch like this:\n\n![verbose = 2](https:\/\/dphi-courses.s3.ap-south-1.amazonaws.com\/Deep+Learning+Bootcamp\/epoch.png)","0f5953e7":"We can do a hyperparameter tuning procedure in two ways:\n1. Implementing hyperparameter tuning with Sklearn\n2. Implementing hyperparameter tuning with Keras","b87e84cb":"**Batch Size**\n\nThe number of examples in a batch.","04fb91c4":"#### 5. Make a Prediction\nMaking a prediction is the final step in the life-cycle. It is why we wanted the model in the first place.\n\nIt requires you have new data for which a prediction is required, e.g. where you do not have the target values.\n\nFrom an API perspective, you simply call a function to make a prediction of a class label, probability, or numerical value: whatever you designed your model to predict.\n\nWe have our new test data located at the given github location:\n\nhttps:\/\/raw.githubusercontent.com\/dphi-official\/Datasets\/master\/Boston_Housing\/Testing_set_boston.csv\n\n","3d1322e1":"Let's first take a look at the implementation of GridSearchCV with Sklearn, following the steps:\n1. Define the general architecture of the model\n2. Define the hyperparameters grid to be validated\n3. Run the GridSearchCV process\n4. Print the results of the best model","ed44da36":"You can see above how the loss (cost) i.e. MSE has changed just by changing the epochs and keeping the learning rate same as 0.01 (i.e. the first model we built)","b659394a":"### 3. Fitting the model\nFitting the model requires that you first select the training configuration, such as the number of epochs (loops through the training dataset) and the batch size (number of samples in an epoch used to estimate model error).\n\nTraining applies the chosen optimization algorithm to minimize the chosen loss function and updates the model using the backpropagation (don't worry if you don't know this term, you will know it in the next module) of error algorithm.\n\nFitting the model is the slow part of the whole process and can take seconds to hours to days, depending on the complexity of the model, the hardware you\u2019re using, and the size of the training dataset.\n\nFrom an API perspective, this involves calling a function to perform the training process. This function will block (not return) until the training process has finished.\n\nWhile fitting the model, a progress bar will summarize the status of each epoch and the overall training process.","10fe03ff":"We can observe an error in the hyperparameter tuning procedure using native Sklearn, because the defined model is a Sequential model implemented by Keras, not a scikit-learn estimator. In order to correct this error, we will integrate Sklearn and Keras properly, by (a) creating a `create_model` function that allows to create the model in an automated way, and (b) defining a `KerasRegressor` model which is an implementation of the scikit-learn regressor API for Keras.","520ce2fe":"### Exercise 3\n\nFind the best possible combination of *learning rate* and *epochs* while testing some combinations","a1acdc97":"You can see above the cost(loss) value i.e. MSE for batch size 40 while keeping epochs as 10 and learning rate as 0.01","7bbb6f68":"### Exercise 4\n\nTest several batch size values to see the impact of varying this value when defining your model.","71a47dea":"The summary shows the general performance measured in MSE for each of the learning rate variations in the hyperparameter tuning process. The variations are sorted from lowest to highest performance, which is why we see that the model with the best performance is the one with a learning rate of 0.01, and the worst model the one with a learning rate of 0.0001. This performance is due to the Gradient Descent process. A balance must be sought in the learning rate value, which allows finding the best regression coefficients for which the loss is the minimum.\n\nLet's now look at the general performance of the model, evaluated with our testing set. We access the best model (model in position 0) by accessing the `get_best_models(num_models = 1)[0]`, where `num_models` refers to the number of models to extract and the `0` index to the index where the extraction of the models begins, which in this case will be only the best one. Then we evaluate the model using the `evalate()` function and our testing set (features (`X_test`) and real target values (`y_test`)):","51a34c99":"## Neural Network: Architecture\nHere we are giving you just an overview of the architecture of Neural Network. You will know more about it in next module.\n\nNeural Networks consists of an input and output layer with one or more hidden layers.\n\n![neural network architecture](https:\/\/dphi-courses.s3.ap-south-1.amazonaws.com\/Deep+Learning+Bootcamp\/nn+arch.png)","e6f8f514":"**Learning Rate**\n\nA scalar used to train a model via gradient descent. During each iteration, the **gradient descent** algorithm multiplies the learning rate by the gradient. The resulting product is called the **gradient step**.\n\nLearning rate is a key **hyperparameter**.","f46b326b":"The mean squared error we got here is 64.8. Now, **what does it mean?**\n\nWhen you subtract the predicted values (of X_test data) from the acutal value (of X_test data), then square it and sum all the squares, and finally take a mean (i.e. average) of it, the result you will get is 64.8 in this case.\n\nevaluate() does this task automatically. If you want to get the prediciton for X_test you can do **`model.predict(X_test)`**","ef0a0dc7":"#### **Implementing hyperparameter tuning with Keras**\nNow we will go through the process of automating hyperparameter tuning using **Random Search** and **Keras**. Random Search is a hyperparameter search procedure that is performed on a defined grid of hyperparameters. However, not all hyperparameter combinations are used to train a new model, only some selected randomly, while a process of cross-validation to measure the performance of temporal models. Once the process is complete, the hyperparameters and the best performing model are chosen.\n\nLet's take a look at the implementation of Random Search with Keras, following the steps:\n\n0. Install and import all the packages needed\n1. Define the general architecture of the model through a creation function\n2. Define the hyperparameters grid to be validated\n3. Run the GridSearchCV process\n4. Print the results of the best model\n\nTo execute the hyperparameter tuning procedure we will use the `keras-tuner`, a library that helps you pick the optimal set of hyperparameters for your TensorFlow model.","fb6cf337":"Note that the visible layer of the network is defined by the \u201cinput_shape\u201d argument on the first hidden layer. That means in the above example, the model expects the input for one sample to be a vector of n_features (i.e. 13) number . \n\nThe sequential API is easy to use because you keep calling model.add() until you have added all of your layers.","4fe77b5c":"#### Resources\n*  [https:\/\/machinelearningmastery.com\/tensorflow-tutorial-deep-learning-with-tf-keras\/](https:\/\/machinelearningmastery.com\/tensorflow-tutorial-deep-learning-with-tf-keras\/)\n*  [https:\/\/heartbeat.fritz.ai\/linear-regression-using-keras-and-python-7cee2819a60c](https:\/\/heartbeat.fritz.ai\/linear-regression-using-keras-and-python-7cee2819a60c)\n*  Google Machine Learning Crash Course","b8f4ccbf":"### Exercise 1\n\nTest several learning rate values to see the impact of varying this value when defining your model.","1beb6f5e":"# Splitting the data","bb2d353c":"#### **Implementing hyperparameter tuning with Sklearn**\nWell, we can automate the hyperparameter tunning using **GridSearCV**. GridSearchCV is a hyperparameter search procedure that is done over a defined grid of hyperparameters. Each one of the hyperparameter combinations is used for training a new model, while a cross-validation process is executed to measure the performance of the provisional models. Once the process is done, the hyperparameters and the model with the best performance are chosen.\n","021e4bf0":"### 4. Evaluate the model\nEvaluating the model requires that you first choose a holdout dataset used to evaluate the model. This should be data not used in the training process i.e. the X_test.\n\nThe speed of model evaluation is proportional to the amount of data you want to use for the evaluation, although it is much faster than training as the model is not changed.\n\nFrom an API perspective, this involves calling a function with the holdout dataset and getting a loss and perhaps other metrics that can be reported.","6faa0091":"#### Hyperparameter Tunning\nThe hyperparameters here in this notebook are:\n1. Learning Rate\n2. Epochs\n3. Batch Size\n\nWe can try and change the values of these parameters and see the performance  of the model (evaluate the model) on X_test data","23256a37":"## View Data","3439df56":"\n**Congratulations! You have successfully build your first deep learning model and predicted the output (i.e. MEDV) of new test data.**","e23d3610":"The iterative hyperparameter optimization process that has been completed has gone through the four defined Learning rate values (0.1, 0.01, 0001, and 0.0001), running a 10-epochs training processo per learning rate, with a validation set of 20% of the general dataset. \n\nLet's see the summary of the hyperparameter optimization process:","49246641":"# Agenda\n1. About the Dataset\n2. Objective\n3. Loading Libraries\n4. Loading Data\n5. View Data\n6. Separate Input Features and Output Features\n7. Split The Data into Train and Test Set\n8. Train the model (The five step model life cycle)\n  1. Define the model.\n  2. Compile the model.\n  3. Fit the model.\n  4. Evaluate the model\n    * Hyperparameter Tunning\n  5. Prediction","8779c940":"## The 5 Step Model Life-Cycle\n\nA model has a life-cycle, and this very simple knowledge provides the backbone for both modeling a dataset and understanding the tf.keras API.\n\nThe five steps in the life-cycle are as follows:\n\n1. Define the model.\n2. Compile the model.\n3. Fit the model.\n4. Make predictions on the test data.\n5. Evaluate the model.\n\nWe will take closer look into each of the steps and parallely build the deep learning model.","f0a450f2":"**Epochs**\n\nA full training pass over the entire dataset such that each example has been seen once. Thus, an epoch represents N\/batch size training iterations, where N is the total number of examples.","0620c809":"**Why learning rate = 0.01?**\n\nIt is important to find a good value for the learning rate for your model on your training dataset. we cannot analytically calculate the optimal learning rate for a given model on a given dataset. Instead, a good (or good enough) learning rate must be discovered via trial and error.\n\nThe range of values to consider for the learning rate is less than 1.0 and greater than $10^{-6}$.\n\nA traditional default value for the learning rate is 0.1 or 0.01, and this may represent a good starting point on your problem.","11a0f2d4":"## Loading Data\nPandas module is used for reading files. We have our data in '.csv' format. We will use 'read_csv()' function for loading the data.","4c9b1538":"## Objective\nThe objective is to use linear regression to find the median value of owner-occupied homes in 1000 USD's.\n\nWe will build a Machine learning model (i.e. Linear Regression) using `tensorflow.keras` (in short `tf.keras`) API."}}