{"cell_type":{"3e31bddc":"code","b3225891":"code","a37d47b4":"code","b8b806a8":"code","7ba71a74":"code","d6a68486":"code","7fc54530":"code","b1925746":"code","57a9e314":"code","68d3805a":"code","58e4f1f5":"code","0673559d":"code","671a5a46":"code","5a3489c0":"code","8389e9c4":"code","e1d2d26e":"code","73b42067":"code","35e16ef3":"code","c04f7eb1":"code","10b65b1a":"code","036ee79b":"code","b023dda7":"code","34881d63":"code","09c30aa5":"markdown","823e11a6":"markdown","dcda0ccf":"markdown","325d8d93":"markdown","64623374":"markdown"},"source":{"3e31bddc":"import pandas as pd\nimport numpy as np\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.engine.topology import Layer\nfrom keras import initializers as initializers, regularizers, constraints\nfrom keras.callbacks import Callback\nfrom keras.layers import Embedding, Input, Dense, LSTM, GRU, Bidirectional, TimeDistributed\nfrom keras import backend as K\nfrom keras import optimizers\nfrom keras.models import Model\nimport nltk\nimport re\nimport matplotlib.pyplot as plt\nimport sys\nfrom sklearn.metrics import roc_auc_score","b3225891":"def dot_product(x, kernel):\n    \"\"\"\n    Wrapper for dot product operation, in order to be compatible with both\n    Theano and Tensorflow\n    Args:\n        x (): input\n        kernel (): weights\n    Returns:\n    \"\"\"\n    if K.backend() == 'tensorflow':\n        return K.squeeze(K.dot(x, K.expand_dims(kernel)), axis=-1)\n    else:\n        return K.dot(x, kernel)\n\nclass AttentionWithContext(Layer):\n    \"\"\"\n    Attention operation, with a context\/query vector, for temporal data.\n    Supports Masking.\n    Follows the work of Yang et al. [https:\/\/www.cs.cmu.edu\/~diyiy\/docs\/naacl16.pdf]\n    \"Hierarchical Attention Networks for Document Classification\"\n    by using a context vector to assist the attention\n    # Input shape\n        3D tensor with shape: `(samples, steps, features)`.\n    # Output shape\n        2D tensor with shape: `(samples, features)`.\n    How to use:\n    Just put it on top of an RNN Layer (GRU\/LSTM\/SimpleRNN) with return_sequences=True.\n    The dimensions are inferred based on the output shape of the RNN.\n    Note: The layer has been tested with Keras 2.0.6\n    Example:\n        model.add(LSTM(64, return_sequences=True))\n        model.add(AttentionWithContext())\n        # next add a Dense layer (for classification\/regression) or whatever...\n    \"\"\"\n\n    def __init__(self,\n                 W_regularizer=None, u_regularizer=None, b_regularizer=None,\n                 W_constraint=None, u_constraint=None, b_constraint=None,\n                 bias=True, **kwargs):\n\n        self.supports_masking = True\n        self.init = initializers.get('glorot_uniform')\n\n        self.W_regularizer = regularizers.get(W_regularizer)\n        self.u_regularizer = regularizers.get(u_regularizer)\n        self.b_regularizer = regularizers.get(b_regularizer)\n\n        self.W_constraint = constraints.get(W_constraint)\n        self.u_constraint = constraints.get(u_constraint)\n        self.b_constraint = constraints.get(b_constraint)\n\n        self.bias = bias\n        super(AttentionWithContext, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        assert len(input_shape) == 3\n\n        self.W = self.add_weight((input_shape[-1], input_shape[-1],),\n                                 initializer=self.init,\n                                 name='{}_W'.format(self.name),\n                                 regularizer=self.W_regularizer,\n                                 constraint=self.W_constraint)\n        if self.bias:\n            self.b = self.add_weight((input_shape[-1],),\n                                     initializer='zero',\n                                     name='{}_b'.format(self.name),\n                                     regularizer=self.b_regularizer,\n                                     constraint=self.b_constraint)\n\n        self.u = self.add_weight((input_shape[-1],),\n                                 initializer=self.init,\n                                 name='{}_u'.format(self.name),\n                                 regularizer=self.u_regularizer,\n                                 constraint=self.u_constraint)\n\n        super(AttentionWithContext, self).build(input_shape)\n\n    def compute_mask(self, input, input_mask=None):\n        # do not pass the mask to the next layers\n        return None\n\n    def call(self, x, mask=None):\n        uit = dot_product(x, self.W)\n\n        if self.bias:\n            uit += self.b\n\n        uit = K.tanh(uit)\n        ait = dot_product(uit, self.u)\n\n        a = K.exp(ait)\n\n        # apply mask after the exp. will be re-normalized next\n        if mask is not None:\n            # Cast the mask to floatX to avoid float64 upcasting in theano\n            a *= K.cast(mask, K.floatx())\n\n        # in some cases especially in the early stages of training the sum may be almost zero\n        # and this results in NaN's. A workaround is to add a very small positive number \u03b5 to the sum.\n        # a \/= K.cast(K.sum(a, axis=1, keepdims=True), K.floatx())\n        a \/= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n\n        a = K.expand_dims(a)\n        weighted_input = x * a\n        return K.sum(weighted_input, axis=1)\n\n    def compute_output_shape(self, input_shape):\n        return input_shape[0], input_shape[-1]","a37d47b4":"max_features=200000\nmax_senten_len=300\nmax_senten_num=100\nembed_size=300\nVALIDATION_SPLIT = 0.2","b8b806a8":"df = pd.read_csv('..\/input\/articles.csv')","7ba71a74":"df = df[['text', 'claps']]","d6a68486":"df.info()","7fc54530":"df['claps'] = df['claps'].apply(lambda s: int(float(s[:-1]) * 1000) if s[-1] == 'K' else int(s))","b1925746":"claps = df['claps']\ntext = df['text']\npara = text.apply(lambda x: x.split('\\n'))","57a9e314":"merged_sent = []\nfor sentences in para:\n    m = len(sentences)\n    for sentence in sentences:\n        merged_sent.append(sentence)","68d3805a":"merged_sent = np.array(merged_sent)","58e4f1f5":"tokenizer = Tokenizer(num_words=max_features, oov_token=True)\ntokenizer.fit_on_texts(merged_sent)","0673559d":"data = np.zeros((para.shape[0], max_senten_num, max_senten_len), dtype='int32')\nfor i, sentences in enumerate(para):\n    for j, sentence in enumerate(sentences):\n        if j < max_senten_num:\n            k = 0\n            for _, word in enumerate(sentence.split()):\n                try:\n                    if k < max_senten_len:\n                        data[i, j, k] = tokenizer.texts_to_sequences([word])[0][0]\n                        k=k+1\n                except:\n#                    print(word)\n                    pass","671a5a46":"data.shape","5a3489c0":"word_index = tokenizer.word_index\nprint('Total %s unique tokens.' % len(word_index))","8389e9c4":"print('Shape of data tensor:', data.shape)","e1d2d26e":"indices = np.arange(data.shape[0])\nnp.random.shuffle(indices)\ndata = data[indices]\nlabels = claps[indices]\nnb_validation_samples = int(VALIDATION_SPLIT * data.shape[0])\n\nx_train = data[:-nb_validation_samples]\ny_train = labels[:-nb_validation_samples]\nx_val = data[-nb_validation_samples:]\ny_val = labels[-nb_validation_samples:]","73b42067":"REG_PARAM = 1e-13\nl2_reg = regularizers.l2(REG_PARAM)","35e16ef3":"embedding_layer = Embedding(len(word_index) + 1,embed_size,input_length=max_senten_len,trainable=True,mask_zero=True,embeddings_regularizer=l2_reg)\nword_input = Input(shape=(max_senten_len,), dtype='float32')\nword_sequences = embedding_layer(word_input)\nword_lstm = Bidirectional(LSTM(200, return_sequences=True, kernel_regularizer=l2_reg))(word_sequences)\nword_dense = TimeDistributed(Dense(150, kernel_regularizer=l2_reg))(word_lstm)\nword_att = AttentionWithContext(W_regularizer=l2_reg)(word_dense)\nwordEncoder = Model(word_input, word_att)\n\nsent_input = Input(shape=(max_senten_num, max_senten_len), dtype='float32')\nsent_encoder = TimeDistributed(wordEncoder)(sent_input)\nsent_lstm = Bidirectional(LSTM(200, return_sequences=True, kernel_regularizer=l2_reg))(sent_encoder)\nsent_dense = TimeDistributed(Dense(150, kernel_regularizer=l2_reg))(sent_lstm)\nsent_att = AttentionWithContext(W_regularizer=l2_reg)(sent_dense)\npreds = Dense(1, kernel_regularizer=l2_reg)(sent_att)\nmodel = Model(sent_input, preds)\nmodel.compile(loss='mse',optimizer='adam',metrics=['mae'])","c04f7eb1":"history = model.fit(x_train, y_train, validation_data=(x_val, y_val),epochs=100, batch_size=8)","10b65b1a":"print(history.history.keys())","036ee79b":"# summarize history for accuracy\nplt.plot(history.history['mean_absolute_error'])\nplt.plot(history.history['val_mean_absolute_error'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","b023dda7":"# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","34881d63":"model.save('han_clap_predictor.h5')","09c30aa5":"### Data","823e11a6":"### Config","dcda0ccf":"### Attention Layer","325d8d93":"## Plotting time","64623374":"### Model"}}