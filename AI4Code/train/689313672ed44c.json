{"cell_type":{"db0a8b82":"code","020c1c86":"code","cf524da7":"code","ce384b4e":"code","ad444dfe":"code","96ce724a":"code","0a7b2b94":"code","1a93f2ad":"code","c20b8d73":"code","769fd333":"code","09dc6fe2":"code","1a5b4b1d":"code","0ee3fa55":"code","aea6e79e":"code","59683607":"code","72da4770":"code","99f45bc9":"code","c23c0b0a":"code","9b4f2592":"code","bfdb6f30":"code","337034ea":"code","ee7870bc":"code","2e9243b4":"code","717082f2":"markdown","728fba31":"markdown","106a415c":"markdown","974ad61e":"markdown"},"source":{"db0a8b82":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","020c1c86":"## This notebook is still in progress ","cf524da7":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","ce384b4e":"data = pd.read_csv(\"\/kaggle\/input\/customer-personality-analysis\/marketing_campaign.csv\", sep=\"\\t\")\n\n#SHAPE OF THE DATASET.....\nprint(\"Shape of the DataFrame is :\",data.shape)","ad444dfe":"data.head()","96ce724a":"#CHECK THE COLUMNS NAME\nprint(\"Columns in DataFrame is :\\n\",data.columns)","0a7b2b94":"#PRINT THE COMPLETE INFORMATION OF THE DATASET\nprint(\"Summary of a Dataframe :\",data.info())","1a93f2ad":"# COUNT THE NUMBER OF NULL VALUES\ndata.isnull().sum()","c20b8d73":"# NULL VALUE VISUALIZATION\nsns.heatmap(data.isnull())","769fd333":"# AS WE CAN SEE ONLY \"INCOME\" HAS 24 NULL VALUES \n# WE CAN SIMPLY FILL NULL WITH THE MEAN OF THE INCOME\ndata['Income'].fillna(data['Income'].mean(), inplace=True)","09dc6fe2":"# NO WE DON'T HAVE ANY NULL VALUE\ndata.isnull().sum()","1a5b4b1d":"sns.heatmap(data.isnull())","0ee3fa55":"plt.figure(figsize=(20,5))\nsns.countplot(data['Year_Birth'])\nplt.xticks(rotation=90);","aea6e79e":"data['Education'].unique()","59683607":"data['Education'].value_counts()","72da4770":"sns.countplot(data[\"Education\"]);","99f45bc9":"data['Marital_Status'].unique()","c23c0b0a":"data['Marital_Status'].value_counts()","9b4f2592":"sns.countplot(data['Marital_Status'])\nplt.xticks(rotation=90);","bfdb6f30":"# MARRIED AND TOGETHER ARE SAME AND SHOULD BE CONSIDER AS MARRIED\n# DIVORCED, WIDOW, ALONE, ABSURD, YOLO SHOULD BE CONSIDER AS SINGLE\ndf = data.copy()\ndf['Marital_Status'] = df['Marital_Status'].replace([\"Together\", \"Married\"], \"Relationship\")\ndf['Marital_Status'] = df['Marital_Status'].replace(['Single','Divorced','Widow', 'Alone','Absurd', 'YOLO'], \"Single\")\nsns.countplot(df['Marital_Status']);","337034ea":"print(f\"Relationship % is :- {len(df[df['Marital_Status'] == 'Relationship'])\/ len(df['Marital_Status'])*100}\")\nprint(f\"Single % is :- {len(df[df['Marital_Status'] == 'Single'])\/ len(df['Marital_Status'])*100}\")","ee7870bc":"print(f\"Maximum Income is :- {data['Income'].max()}, and Minimun Income is :- {data['Income'].min()}\")","2e9243b4":"# Still in progress","717082f2":"## Year Birth Analysis","728fba31":"## Marital_Status Analysis","106a415c":"## Education Analysis","974ad61e":"## Income Analysis"}}