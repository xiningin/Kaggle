{"cell_type":{"2dba27b3":"code","6880f00e":"code","8cf91678":"code","6f6e950e":"code","399fa40e":"code","615c5e46":"code","1b326914":"code","53ea0758":"code","a3c209af":"code","f63f54b7":"code","01f74171":"code","6b08c858":"code","0dc8735c":"code","16d72c42":"code","00071ca6":"code","4f663dfb":"code","e371076f":"code","b4d9e6cc":"code","fec69fc0":"code","5a11d9ed":"code","0b64f243":"code","c3f34a22":"code","41d8b42b":"code","d45c5ae0":"code","8a57eb17":"code","ad1384a3":"code","81947b3a":"code","792b563d":"code","6d52f859":"code","ed3c6447":"code","f79bfcf7":"code","5e227607":"code","0a1ae694":"code","ee92471d":"code","f6fda1b6":"code","d2bf6aee":"code","25c7bf56":"code","da41ba17":"code","9895f283":"code","f64dfc46":"code","49dbd713":"code","6e2963dd":"code","db0047eb":"code","193bc421":"code","2a308204":"code","3099a0c3":"code","740c2385":"code","2f8ada85":"code","9568dc7c":"code","9582b933":"code","c65dc541":"code","b1b210e9":"code","ee8c6fa9":"code","4e0c9470":"markdown","7d195278":"markdown","e82e5124":"markdown","ce5a491d":"markdown","99b444f1":"markdown","fba14f15":"markdown","f98cd314":"markdown","05d57449":"markdown","272c04d5":"markdown","88bd782b":"markdown","833cdb2f":"markdown","e9a390c9":"markdown","20696dc8":"markdown","0ffa8939":"markdown","975e26af":"markdown","9f1d5c70":"markdown","bb2222f3":"markdown","d7f2074d":"markdown","ffa4de12":"markdown","0b40f2aa":"markdown","1a06d9da":"markdown"},"source":{"2dba27b3":"import os\nimport numpy as np\nimport pandas as pd\nimport warnings\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn import preprocessing\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.naive_bayes import GaussianNB , MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.model_selection import cross_val_predict, cross_val_score\nfrom sklearn.metrics import precision_score,accuracy_score,confusion_matrix,f1_score,recall_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nfrom mlxtend.classifier import EnsembleVoteClassifier\nfrom mlxtend.classifier import StackingCVClassifier\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.linear_model import LogisticRegression","6880f00e":"def dist(i):\n  plt.subplot(4,2,i+1)\n  sns.histplot(df, x=df.columns[i], hue=df.Outcome, bins=17, kde=True)\n\n# kde: kernel density estimate","8cf91678":"def dist_box(df,col):\n    fig,(ax1,ax2)=plt.subplots(2,1)\n    sns.distplot(df[col],ax=ax1)\n    sns.boxplot(df[col],ax=ax2)","6f6e950e":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","399fa40e":"df = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")","615c5e46":"print (\">>> Data frame shape: \" , df.shape , \"<<<\\n\")\ndf.head()","1b326914":"df.info (verbose = True)","53ea0758":"df.describe().T","a3c209af":"df.Outcome.value_counts()","f63f54b7":"plt.figure(figsize=(20,20), dpi = 300)\nfor i in range (0,len(df.columns)-1):\n  dist(i)","01f74171":"from pandas.plotting import scatter_matrix\np=scatter_matrix(df,figsize=(15,15))","6b08c858":"fig = plt.figure(figsize=(18,15))\ngs = fig.add_gridspec(3,3)\ngs.update(wspace=0.5, hspace=0.25)\n\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[0,2])\nax3 = fig.add_subplot(gs[1,0])\nax4 = fig.add_subplot(gs[1,1])\nax5 = fig.add_subplot(gs[1,2])\nax6 = fig.add_subplot(gs[2,0])\nax7 = fig.add_subplot(gs[2,1])\nax8 = fig.add_subplot(gs[2,2])\n\nbackground_color = \"#c9c9ee\"\n# c9c9ee\ncolor_palette = [\"#f56476\",\"#ff8811\",\"#ff0040\",\"#ff7f6c\",\"#f0f66e\",\"#990000\"]\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color)\nax2.set_facecolor(background_color)\nax3.set_facecolor(background_color)\nax4.set_facecolor(background_color)\nax5.set_facecolor(background_color)\nax6.set_facecolor(background_color)\nax7.set_facecolor(background_color)\nax8.set_facecolor(background_color)\n\n# Title of the plot\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.tick_params(left=False, bottom=False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.text(0.5,0.5,\n         'Boxenplot plot \\n features\\n',\n         horizontalalignment='center',\n         verticalalignment='center',\n         fontsize=18, fontweight='bold',\n         fontfamily='serif',\n         color=\"#000000\")\n\n# Pregnancies \nax1.text(-0.18, 19, 'Pregnancies', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax1,y=df['Pregnancies'],palette=[\"#f56476\"],width=0.6)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\n# Glucose \nax2.text(-0.1, 217, 'Glucose', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax2,y=df['Glucose'],palette=[\"#ff8811\"],width=0.6)\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\n\n# BloodPressure \nax3.text(-0.20, 132, 'BloodPressure', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax3,y=df['BloodPressure'],palette=[\"#ff0040\"],width=0.6)\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\n# SkinThickness \nax4.text(-.2, 110, 'SkinThickness', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax4.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax4,y=df['SkinThickness'],palette=[\"#ff7f6c\"],width=0.6)\nax4.set_xlabel(\"\")\nax4.set_ylabel(\"\")\n\n# Insulin \nax5.text(-0.10, 900, 'Insulin', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax5,y=df['Insulin'],palette=[\"#f0f66e\"],width=0.6)\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\n# BMI \nax6.text(-0.08, 77, 'BMI', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax6.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax6,y=df['BMI'],palette=[\"#990000\"],width=0.6)\nax6.set_xlabel(\"\")\nax6.set_ylabel(\"\")\n\n# DPF \nax7.text(-0.065, 2.8, 'DPF', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax7.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax7,y=df['DiabetesPedigreeFunction'],palette=[\"#3339FF\"],width=0.6)\nax7.set_xlabel(\"\")\nax7.set_ylabel(\"\")\n\n# Age \nax8.text(-0.08, 86, 'Age', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax8.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax8,y=df['Age'],palette=[\"#34495E\"],width=0.6)\nax8.set_xlabel(\"\")\nax8.set_ylabel(\"\")\n\n\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)\n    ax6.spines[s].set_visible(False)\n    ax7.spines[s].set_visible(False)\n    ax8.spines[s].set_visible(False)","0dc8735c":"p=sns.pairplot(df, hue = 'Outcome')","16d72c42":"plt.figure(figsize=(15,15))\np=sns.heatmap(df.corr(), annot=True,cmap ='RdYlGn')","00071ca6":"print(df.Outcome.value_counts())\np=df.Outcome.value_counts().plot(kind='bar',figsize=(10,10)) ","4f663dfb":"print(df.replace(0,np.NaN).isnull().sum())","e371076f":"df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)\nprint(\"\\nCount of discovered nulls:\\n\" , df.isnull().sum())","b4d9e6cc":"df['Glucose'].fillna(df['Glucose'].mean(), inplace = True)\ndf['BloodPressure'].fillna(df['BloodPressure'].mean(), inplace = True)\ndf['SkinThickness'].fillna(df['SkinThickness'].median(), inplace = True)\ndf['Insulin'].fillna(np.random.choice(df['Insulin'][~df['Insulin'].isna()]),inplace = True)\ndf['BMI'].fillna(df['BMI'].mean(), inplace = True)\n\nprint(\"\\nCount of nulls in the secondary date frame:\\n\" , df.isnull().sum())","fec69fc0":"plt.figure(figsize=(20,20))\nfor i in range (0,len(df.columns)-1):\n    dist_box(df,df.columns[i])","5a11d9ed":"u=df['Insulin'].mean()+(3*df['Insulin'].std())\nl=df['Insulin'].mean()-(3*df['Insulin'].std())\n\ndf_out_in=df[(df['Insulin']>u)|(df['Insulin']<l)]\n\nprint(\"Number of Outliers:\" , len(df_out_in))\ndf_out_in","0b64f243":"df['Insulin']=np.where(df['Insulin']>=415,df['Insulin'].mode()[0],df['Insulin'])","c3f34a22":"u=df['BloodPressure'].mean()+(3*df['BloodPressure'].std())\nl=df['BloodPressure'].mean()-(3*df['BloodPressure'].std())\n\ndf_out_bp=df[(df['BloodPressure']>u)|(df['BloodPressure']<l)]\n\nprint(\"Number of Outliers:\" , len(df_out_bp))\ndf_out_bp","41d8b42b":"df['BloodPressure']=np.where((df['BloodPressure']>=110)                                                       \n                           | (df['BloodPressure']<=30  ) ,df['BloodPressure'].mode()[0],df['BloodPressure'])","d45c5ae0":"u=df['SkinThickness'].mean()+(3*df['SkinThickness'].std())\nl=df['SkinThickness'].mean()-(3*df['SkinThickness'].std())\n\ndf_out_st=df[(df['SkinThickness']>u)|(df['SkinThickness']<l)]\n\nprint(\"Number of Outliers:\" , len(df_out_st))\ndf_out_st","8a57eb17":"df['SkinThickness']=np.where((df['SkinThickness']>=56)                                                       \n                           ,df['SkinThickness'].mode()[0],df['SkinThickness'])","ad1384a3":"u=df['Pregnancies'].mean()+(3*df['Pregnancies'].std())\nl=df['Pregnancies'].mean()-(3*df['Pregnancies'].std())\n\ndf_out_pr=df[(df['Pregnancies']>u)|(df['Pregnancies']<l)]\n\nprint(\"Number of Outliers:\" , len(df_out_pr))\ndf_out_pr","81947b3a":"df['Pregnancies']=np.where((df['Pregnancies']>13)                                                       \n                           ,df['Pregnancies'].mode()[0],df['Pregnancies'])","792b563d":"x=df.drop('Outcome',axis=1)\ny=df.Outcome\n\nxtrain,xtest,ytrain,ytest= train_test_split(x,y,test_size=0.3,random_state=7)\nprint(xtrain.shape)\nprint(xtest.shape)","6d52f859":"xtrain,xtest,ytrain,ytest = train_test_split(x, y, random_state = 7, stratify=y)\nsmt = SMOTE()\nxtrain, ytrain = smt.fit_resample(xtrain, ytrain)\nnp.bincount(ytrain)","ed3c6447":"sc= preprocessing.StandardScaler()\nxtrain=pd.DataFrame(sc.fit_transform(xtrain,ytrain ),index=xtrain.index,columns=xtrain.columns)\n\nxtrain.head()","f79bfcf7":"xtest=pd.DataFrame(sc.transform(xtest),index=xtest.index,columns=xtest.columns)\nxtest.head()","5e227607":"\"\"\"sc_x = preprocessing.StandardScaler()\nx =  pd.DataFrame(sc_x.fit_transform(df.drop([\"Outcome\"],axis = 1),),\n        columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age'])\n\nx.describe().T\"\"\"","0a1ae694":"test_scores = []\ntrain_scores = []\nk_range = list(range(1,30))\n\nfor i in k_range:\n\n    knn = KNeighborsClassifier(i)\n    knn.fit(xtrain,ytrain)\n    \n    train_scores.append(knn.score(xtrain,ytrain))\n    test_scores.append(knn.score(xtest,ytest))\n    \nplt.plot(k_range, test_scores)\n\nplt.xlabel('Value of k for KNN')\nplt.ylabel('Accuracy Score')\n\nplt.title('Accuracy Scores for Values of k of k-Nearest-Neighbors')    ","ee92471d":"#LogisticRegression\nlr_c=LogisticRegression(random_state=7)\nlr_c.fit(xtrain,ytrain)\nlr_pred=lr_c.predict(xtest)\nlr_cm=confusion_matrix(ytest,lr_pred)\nlr_ac=accuracy_score(ytest, lr_pred)\n\n#MLP\nMLP = MLPClassifier(random_state=7)\nMLP.fit(xtrain,ytrain)\nMLP_pred=MLP.predict(xtest)\nMLP_cm=confusion_matrix(ytest,MLP_pred)\nMLP_ac=accuracy_score(ytest, MLP_pred)\n\n#Bayes\ngaussian=GaussianNB()\ngaussian.fit(xtrain,ytrain)\nbayes_pred=gaussian.predict(xtest)\nbayes_cm=confusion_matrix(ytest,bayes_pred)\nbayes_ac=accuracy_score(bayes_pred,ytest)\n\n#SVM  \nsvc_r=SVC(random_state=7)\nsvc_r.fit(xtrain,ytrain)\nsvr_pred=svc_r.predict(xtest)\nsvr_cm=confusion_matrix(ytest,svr_pred)\nsvr_ac=accuracy_score(ytest, svr_pred)\n\n#RandomForest\nrdf_c=RandomForestClassifier(random_state=7)\nrdf_c.fit(xtrain,ytrain)\nrdf_pred=rdf_c.predict(xtest)\nrdf_cm=confusion_matrix(ytest,rdf_pred)\nrdf_ac=accuracy_score(rdf_pred,ytest)\n\n# DecisionTree Classifier\ndtree_c=DecisionTreeClassifier(random_state=7)\ndtree_c.fit(xtrain,ytrain)\ndtree_pred=dtree_c.predict(xtest)\ndtree_cm=confusion_matrix(ytest,dtree_pred)\ndtree_ac=accuracy_score(dtree_pred,ytest)\n\n#KNN\nknn=KNeighborsClassifier(n_neighbors=28)\nknn.fit(xtrain,ytrain)\nknn_pred=knn.predict(xtest)\nknn_cm=confusion_matrix(ytest,knn_pred)\nknn_ac=accuracy_score(knn_pred,ytest)","f6fda1b6":"plt.figure(figsize=(20,10))\n\nplt.subplot(2,4,1)\nplt.title(\"LogisticRegression_cm\")\nsns.heatmap(lr_cm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False)\n\nplt.subplot(2,4,2)\nplt.title(\"MLP\")\nsns.heatmap(MLP_cm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False)\n\nplt.subplot(2,4,3)\nplt.title(\"bayes_cm\")\nsns.heatmap(bayes_cm,annot=True,cmap=\"Oranges\",fmt=\"d\",cbar=False)\n\nplt.subplot(2,4,4)\nplt.title(\"RandomForest\")\nsns.heatmap(rdf_cm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False)\n\nplt.subplot(2,4,5)\nplt.title(\"SVM\")\nsns.heatmap(svr_cm,annot=True,cmap=\"Reds\",fmt=\"d\",cbar=False)\n\nplt.subplot(2,4,6)\nplt.title(\"DecisionTree_cm\")\nsns.heatmap(dtree_cm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False)\n\nplt.subplot(2,4,7)\nplt.title(\"kNN_cm\")\nsns.heatmap(knn_cm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False)","d2bf6aee":"models = pd.DataFrame({'Model': ['LogisticRegression','MLP','Bayes','SVM',\n                                      'RandomForest','DecisionTree_Classifier','KNN'],'Train & test accuracy': [lr_ac,MLP_ac,bayes_ac,svr_ac,rdf_ac,dtree_ac,knn_ac]})\n\nmodels.sort_values(by = 'Train & test accuracy', ascending = False).reset_index(drop=True)","25c7bf56":"max_train_score = max(train_scores)\ntrain_scores_ind = [i for i, v in enumerate(train_scores) if v == max_train_score]\nprint('Max train score {} % and k = {}'.format(max_train_score*100,list(map(lambda x: x+1, train_scores_ind))))","da41ba17":"max_test_score = max(test_scores)\ntest_scores_ind = [i for i, v in enumerate(test_scores) if v == max_test_score]\nprint('Max test score {} % and k = {}'.format(max_test_score*100,list(map(lambda x: x+1, test_scores_ind))))","9895f283":"plt.figure(figsize=(20,5))\np = sns.lineplot(k_range,train_scores,marker='*',label='Train Score')\np = sns.lineplot(k_range,test_scores,marker='o',label='Test Score')","f64dfc46":"knn = KNeighborsClassifier(28)\n\nknn.fit(xtrain,ytrain)\nknn.score(xtest,ytest)","49dbd713":"from sklearn.metrics import confusion_matrix\n#let us get the predictions using the classifier we had fit above\nypred = knn.predict(xtest)\nconfusion_matrix(ytest,ypred)\npd.crosstab(ytest, ypred, rownames=['True'], colnames=['Predicted'], margins=True)","6e2963dd":"ypred = knn.predict(xtest)\nfrom sklearn import metrics\ncnf_matrix = metrics.confusion_matrix(ytest, ypred)\np = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","db0047eb":"from sklearn.metrics import classification_report\nprint(classification_report(ytest,ypred))","193bc421":"from sklearn.metrics import roc_curve\nypred_proba = knn.predict_proba(xtest)[:,1]\nfpr, tpr, thresholds = roc_curve(ytest, ypred_proba)","2a308204":"plt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr, label='Knn')\nplt.xlabel('fpr')\nplt.ylabel('tpr')\nplt.title('Knn(n_neighbors=21) ROC curve')\nplt.show()","3099a0c3":"from sklearn.metrics import roc_auc_score\nroc_auc_score(ytest,ypred_proba)","740c2385":"DT=DecisionTreeClassifier(criterion= 'gini', max_depth= 5,\n                          min_samples_leaf= 2, min_samples_split= 3, splitter= 'best',random_state=22)\nDT.fit(xtrain,ytrain)\n\npred_dt=DT.predict(xtest)\n\nacc_DT=accuracy_score(pred_dt,ytest)\nacc_DT","2f8ada85":"from sklearn.model_selection import GridSearchCV\n\nparam={'criterion':['gini','antropy'],\n      'max_depth':[3,4,5],\n      'min_samples_split':[3,4,5,6],\n      'min_samples_leaf':[2,3,4]}\n\nGS=GridSearchCV(DT,param,cv=5,scoring='f1')\nGS.fit(x,y)\n\nprint('best score :' , GS.best_score_)\nprint('best param :', GS.best_params_)","9568dc7c":"GNB=GaussianNB()\nGNB.fit(xtrain,ytrain)\npred=GNB.predict(xtest)\n\nprint(confusion_matrix(ytest,pred))\n\nacc_GNB=accuracy_score(ytest,pred)\nprint(acc_GNB)","9582b933":"MLP = MLPClassifier(random_state=7)\nMLP.fit(xtrain,ytrain)\nMLP_pred=MLP.predict(xtest)\nMLPcm=confusion_matrix(ytest,MLP_pred)\nMLP_ac=accuracy_score(ytest, MLP_pred)\n\nMLP_ac","c65dc541":"svm=SVC(C= 10, kernel= 'linear',random_state=7)\nsvm.fit(xtrain,ytrain)\nsvm_pred=svm.predict(xtest)\nsvm_cm=confusion_matrix(ytest,svm_pred)\nacc_svm=accuracy_score(svm_pred,ytest)\n\nacc_svm","b1b210e9":"lr_c=LogisticRegression(C= 10, penalty= 'l2',random_state=22)\nlr_c.fit(xtrain,ytrain)\nlr_pred=lr_c.predict(xtest)\nlr_cm=confusion_matrix(ytest,lr_pred)\nlr_ac=accuracy_score(ytest, lr_pred)\n\nlr_ac","ee8c6fa9":"model=RandomForestClassifier(n_estimators=100,max_features=0.9,criterion='gini',max_depth=3,random_state=7)\n#model.fit(x,y)\nscore=cross_val_predict(model,x,y,cv=10)\nprint(classification_report(y,score))\nacc_rf=accuracy_score(y, score)\nprint(acc_rf)","4e0c9470":"# 5. ML Algorithms","7d195278":"# 4. Data manipulation\n## 4.1. Null Managing","e82e5124":"## 3.2. Preliminary Visualizations","ce5a491d":"## 2.3. Importing the data","99b444f1":"### ***!!!*** Pregnancies' zeros should not be considered nulls","fba14f15":"## 5.6. Logistic Regression","f98cd314":"# 1. About Dataset\n## 1.1. Context\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\n## 1.2. Content\nThe datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\n## 1.3. Variables\n**Pregnancies:** Number of times pregnant\n\n**Glucose:** Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n\n**BloodPressure:** Diastolic blood pressure (mm Hg)\n\n**SkinThickness:** Triceps skin fold thickness (mm)\n\n**Insulin:** 2-Hour serum insulin (mu U\/ml)\n\n**BMI:** Body mass index (weight in kg\/(height in m)^2)\n\n**DiabetesPedigreeFunction:** Diabetes pedigree function\n\n**Age:** Age (years)\n\n**Outcome:** Class variable (0 or 1) 268 of 768 are 1, the others are 0","05d57449":"# 3. Data understanding\n## 3.1 Details","272c04d5":"# 2. Prerequisites\n## 2.1. Importing libraries","88bd782b":"## 4.2. Outlier Managing","833cdb2f":"## 5.7. Random Forest Classifier","e9a390c9":"## 4.4. Data Scaling","20696dc8":"## 5.4. Neural Network","0ffa8939":"## 5.5. SVM","975e26af":"## 5.1. KNN","9f1d5c70":"### ***!!!*** Our data is imbalance","bb2222f3":"### ***!!!*** There isn't any null, because nulls has been entered as Zeros!","d7f2074d":"## 2.2. Defining the functions","ffa4de12":"## 5.3. Naive Bayes","0b40f2aa":"## 5.2. Tree","1a06d9da":"## 4.3. Train \/ Test Splitting"}}