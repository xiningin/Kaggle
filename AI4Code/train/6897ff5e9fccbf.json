{"cell_type":{"d4b18d99":"code","337a7c04":"code","b013c87a":"code","5c599a26":"code","9d690d6e":"code","1c6e8eee":"code","8b472d13":"code","a14e21a3":"code","575e12b9":"code","678ceb3e":"code","ab99e345":"code","f1664d8d":"code","298bdb75":"code","b5c71511":"code","f1d18cca":"code","73084a96":"code","21d6afcd":"code","01d3a69d":"code","b257b40e":"code","adc08a6d":"code","0e89cbf8":"code","46192d5f":"code","4a8a5d42":"code","63a517b1":"code","aed1df7b":"code","8ae5c0c4":"code","e97cb4ee":"code","f77749d6":"code","3168fea4":"code","3e3b6c56":"code","ff3ef1dd":"code","f418d66c":"code","8647fb85":"markdown","536c4a43":"markdown","fa2dc7ce":"markdown","c55191fc":"markdown","1509b1d2":"markdown","72e51c33":"markdown","7dee8bfc":"markdown","6657bbd3":"markdown","432b34bf":"markdown","47e9ef6e":"markdown","3c9afba9":"markdown","be73a923":"markdown","ca945fe6":"markdown","29ca9066":"markdown","b988cd52":"markdown"},"source":{"d4b18d99":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","337a7c04":"data = pd.read_csv('\/kaggle\/input\/passenger-list-for-the-estonia-ferry-disaster\/estonia-passenger-list.csv')","b013c87a":"data.head()","5c599a26":"len(data)","9d690d6e":"data.Country.value_counts()","1c6e8eee":"data.Sex.value_counts()","8b472d13":"plt.figure(figsize=(12, 6))\ndata.groupby('Age')['PassengerId'].count().plot()","a14e21a3":"sns.countplot(data.Category)","575e12b9":"# C = Crew, P = Passenger","678ceb3e":"sns.countplot(data.Survived)","ab99e345":"data.isnull().sum()","f1664d8d":"# No null values","298bdb75":"sns.catplot(x=\"Sex\", y=\"Survived\", kind=\"bar\", data=data)","b5c71511":"sns.catplot(x=\"Category\", y=\"Survived\", kind=\"bar\", data=data)","f1d18cca":"grid = sns.FacetGrid(data, row='Survived', size=3, aspect=1.6)\ngrid.map(sns.distplot, 'Age', 'Survived')\ngrid.add_legend()","73084a96":"# Most young people survived","21d6afcd":"data.groupby('Survived')['Age'].mean()","01d3a69d":"data.groupby('Country')['Survived'].mean().reset_index().sort_values('Survived', ascending=False)","b257b40e":"# Convert categorical features","adc08a6d":"data['Sex'] = data.Sex.astype('category').cat.codes\ndata['Category'] = data.Category.astype('category').cat.codes\ndata['Country'] = data.Country.astype('category').cat.codes","0e89cbf8":"sns.distplot(data.Age, bins=8)","46192d5f":"data['AgeBin'] = pd.cut(data['Age'], 10)\ndata[['AgeBin', 'Survived']].groupby(['AgeBin'], as_index=False).mean().sort_values(by='AgeBin', ascending=True)","4a8a5d42":"# ~50% of surviving between 17 and 35","63a517b1":"data.loc[ data['Age'] <= 10, 'Age'] = 0\ndata.loc[(data['Age'] > 10) & (data['Age'] <= 20), 'Age'] = 1\ndata.loc[(data['Age'] > 20) & (data['Age'] <= 30), 'Age'] = 2\ndata.loc[(data['Age'] > 30) & (data['Age'] <= 40), 'Age'] = 3\ndata.loc[(data['Age'] > 40) & (data['Age'] <= 50), 'Age'] = 4\ndata.loc[(data['Age'] > 50) & (data['Age'] <= 60), 'Age'] = 5\ndata.loc[(data['Age'] > 60) & (data['Age'] <= 70), 'Age'] = 6\ndata.loc[ data['Age'] > 70, 'Age'] = 7","aed1df7b":"# Remove PassengerId, Firstname and Lastname\ndata = data[['Country', 'Sex', 'Age', 'Category', 'Survived']]","8ae5c0c4":"data.head()","e97cb4ee":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV","f77749d6":"X = data.drop(\"Survived\", axis=1)\nY = data[\"Survived\"]","3168fea4":"# Split 20% test, 80% train\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=0)","3e3b6c56":"# Logistic Regression\n\nlog = LogisticRegression(max_iter=100)\nlog.fit(X_train, Y_train)\nY_pred_log = log.predict(X_test)\nacc_log = accuracy_score(Y_pred_log, Y_test)\nacc_log","ff3ef1dd":"rf = RandomForestClassifier()\n\n# search the best params\ngrid = {'n_estimators':[100,200], 'max_depth': [2,5,10]}\n\nclf_rf = GridSearchCV(rf, grid, cv=10)\nclf_rf.fit(X_train, Y_train)\n\nY_pred_rf = clf_rf.predict(X_test)\n# get the accuracy score\nacc_rf = accuracy_score(Y_pred_rf, Y_test)\nprint(acc_rf)","f418d66c":"# The best model is the Random Forest","8647fb85":"### Survived","536c4a43":"### Sex","fa2dc7ce":"# Conclusion","c55191fc":"### Age","1509b1d2":"# Data Exploration","72e51c33":"### Number of Passengers","7dee8bfc":"### Category x Survived","6657bbd3":"### Category","432b34bf":"###  Sex x Survived","47e9ef6e":"# Data Featuring","3c9afba9":"### Country x Survived","be73a923":"### Age x Survived","ca945fe6":"### Countries","29ca9066":"# Creating the model","b988cd52":"# Data Prediction"}}