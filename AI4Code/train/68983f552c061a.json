{"cell_type":{"2271ef94":"code","5adfe690":"code","a7934db4":"code","321e9c67":"code","6eff061c":"code","77b7cec2":"code","c06aff12":"code","dfd8ccc0":"code","c671cb18":"code","67202ef4":"code","af8bf597":"code","a60a067a":"code","f5e7b8cc":"code","b43358d2":"code","63a142a1":"code","9302ed85":"code","591627bb":"code","cd63865c":"code","9adb0b5a":"code","6e0e1b8d":"code","1da4ba20":"code","93605c62":"code","161ccaf3":"code","d7acb473":"code","e7dd57fa":"code","419f821f":"code","d4749da8":"code","256b0e1e":"markdown","d413d315":"markdown","cd04ca04":"markdown","e11073ce":"markdown","4a42cb13":"markdown","f50e0205":"markdown","dc6f3473":"markdown","73c42feb":"markdown"},"source":{"2271ef94":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","5adfe690":"df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\nprint(df.shape)","a7934db4":"print(df.columns)","321e9c67":"df.head()","6eff061c":"data = df.values\nprint(data.shape)\nprint(type(data))","77b7cec2":"x = data[:,1:]\ny = data[:,0]\n\nprint(x.shape,y.shape)","c06aff12":" from sklearn.model_selection import train_test_split","dfd8ccc0":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 42)","c671cb18":"print(x_train.shape,y_train.shape)","67202ef4":"def drawimg(sample):\n    img = sample.reshape((28,28))\n    plt.imshow(img,cmap = \"gray\")\n    plt.show()\n    \ndrawimg(x_train[10])","af8bf597":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.metrics import accuracy_score,confusion_matrix","a60a067a":"log_reg = LogisticRegression()\nlog_reg.fit(x_train,y_train)\n\nlog_acc=accuracy_score(y_test,log_reg.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,log_reg.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,log_reg.predict(x_test))*100))","f5e7b8cc":"d_tree = DecisionTreeClassifier()\nd_tree.fit(x_train,y_train)\n\nd_acc=accuracy_score(y_test,d_tree.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,d_tree.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,d_tree.predict(x_test))*100))","b43358d2":"r_for = RandomForestClassifier()\nr_for.fit(x_train,y_train)\n\nr_acc=accuracy_score(y_test,r_for.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,r_for.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,r_for.predict(x_test))*100))","63a142a1":"k_nei = KNeighborsClassifier()\nk_nei.fit(x_train,y_train)\n\nk_acc = accuracy_score(y_test,k_nei.predict(x_test))\n\nprint(\"Train set Accuracy:\"+str(accuracy_score(y_train,k_nei.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,k_nei.predict(x_test))*100))","9302ed85":"from sklearn.ensemble import VotingClassifier\n\nmodel = VotingClassifier(estimators=[('lr', log_reg), ('rf', r_for),('sc',k_nei)], voting='hard')\nmodel.fit(x_train,y_train)\nmodel.score(x_test,y_test)\nm_acc = accuracy_score(y_test,model.predict(x_test))","591627bb":"x_val=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","cd63865c":"sample_submission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\nsample_submission.head()","9adb0b5a":"test_pred = model.predict(x_val)","6e0e1b8d":"index_list = []\nfor i in list(x_val.index):\n    index_list.append(i+1)","1da4ba20":"submission_df = pd.DataFrame({\n    \"ImageId\": index_list,\n    \"Label\": test_pred\n})","93605c62":"submission_df.head()","161ccaf3":"submission_df.to_csv('submission_model.csv', index=False)","d7acb473":"test_pred = model.predict(x_test)","e7dd57fa":"M_acc = accuracy_score(y_test,test_pred)","419f821f":"models = pd.DataFrame({\n    'Model': ['Logistic','KNN',  'Decision Tree Classifier',\n             'Random Forest Classifier', 'model' ],\n    'Score': [ log_acc,k_acc, d_acc, r_acc,M_acc ]\n})\n\nmodels.sort_values(by = 'Score', ascending = False)","d4749da8":"c = ['red', 'yellow', 'black', 'blue', 'orange']\nmodels.plot(kind='bar',color=c)\nplt.show()","256b0e1e":"**LogisticRegession**","d413d315":"# <center> <div class=\"alert-block alert-info alert\"> <span style=\"color:crimson;\"> Models <\/center>","cd04ca04":"**KNeighborsClassifier**","e11073ce":"**RandomForestClassifier**","4a42cb13":"![image.png](attachment:4918ca2f-f484-4929-a101-430004e05000.png)","f50e0205":"**DecisionTreeClassifier**","dc6f3473":"**Data Preparation**","73c42feb":"# <center> <div class=\"alert-block alert-info alert\"> <span style=\"color:crimson;\">Recognising Handwritten Digits on MNIST Dataset using KNN <\/center>"}}