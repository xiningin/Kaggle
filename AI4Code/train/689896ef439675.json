{"cell_type":{"a458beae":"code","0d1e9184":"code","48bcb032":"code","95ffbb2d":"code","4b4ce6f2":"code","2031c25b":"code","010da782":"code","fd139f66":"code","737f1634":"code","8885f07f":"code","833a0d04":"code","72e0595b":"code","790d4524":"code","b15daa75":"code","813da5bf":"code","0caf57f2":"code","70a003ca":"code","1598ce09":"code","4fb4eaef":"code","d79c90f0":"code","6e9977d7":"code","dd6c1187":"code","15fdf124":"code","736161f3":"code","dfc24f4f":"code","6ee31ad8":"code","ee271729":"code","a0ed6b1d":"code","f62a9a9c":"code","b2dfc433":"code","3030058a":"code","17cd6e1d":"code","c1ce6afb":"code","e5b738af":"code","cd0df97f":"code","d7999edd":"code","e10acc5e":"code","b5b7864f":"code","fcfcdb86":"code","90504e62":"code","ea160f8a":"code","eca82783":"code","1a0b1d7d":"code","000398eb":"code","07904d67":"code","715d6308":"code","f7f42913":"code","01c92cf9":"code","dd3a2d54":"code","9466977c":"code","a557b7fe":"code","42f9af15":"code","ca334545":"code","b5fb3f6e":"code","1c615ffb":"code","5a16b0f2":"code","fec95229":"code","aa28de43":"code","10929179":"code","1a3be665":"code","d7e5735f":"code","51adb0a7":"code","e9ae97d9":"code","f0e6cad2":"code","bf99e161":"code","748a3d12":"code","224b30da":"code","24e77692":"code","37d1c275":"code","9ebf0fb0":"code","6df83782":"code","28d1144a":"code","4504827b":"code","792d8121":"code","d72f10c2":"code","8f077c2b":"code","638ba746":"code","b4e26896":"code","ccaddc7c":"code","0d0a9e4c":"code","b72deb92":"code","84bc4b5d":"code","300b76d5":"code","6833499e":"code","2609019a":"code","a2790c61":"code","ff25c3ff":"code","ca2c90d7":"code","6a123d61":"code","f9828410":"code","1d8c9390":"code","55aea895":"markdown"},"source":{"a458beae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d1e9184":"import os\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\npd.set_option('max_rows', None)","48bcb032":"train_df=pd.read_csv(\"..\/input\/titanic\/train.csv\")","95ffbb2d":"test_df=pd.read_csv(\"..\/input\/titanic\/test.csv\")","4b4ce6f2":"train_df.head()","2031c25b":"test_df.head()","010da782":"def plot_missing_data(dataset,title):\n    fig,ax=plt.subplots(figsize=(5,5))\n    plt.title(title)\n    sns.heatmap(dataset.isnull(),cbar=False)","fd139f66":"train_df.info()","737f1634":"plot_missing_data(train_df,\"Training Dataset\")","8885f07f":"test_df.info()","833a0d04":"plot_missing_data(test_df,\"Test Dataset\")","72e0595b":"def bar_chart_stacked(dataset,feature,stacked=True):\n    survived=dataset[dataset['Survived']==1][feature].value_counts()\n    dead=dataset[dataset['Survived']==0][feature].value_counts()\n    df_survived_dead=pd.DataFrame([survived,dead])\n    df_survived_dead.index=['Passengers Survived','Passengers Died']\n    ax=df_survived_dead.plot(kind='bar',stacked=stacked,figsize=(5,5))","790d4524":"train_df['Survived'].value_counts()","b15daa75":"train_df['Survived'].value_counts(normalize=True)","813da5bf":"bar_chart_stacked(train_df,\"Survived\")","0caf57f2":"train_df['Sex'].value_counts().to_frame()","70a003ca":"bar_chart_stacked(train_df,\"Sex\")","1598ce09":"bar_chart_stacked(train_df,'Pclass')","4fb4eaef":"pd.pivot_table(train_df,index=\"Survived\",columns=\"Pclass\",values=\"Ticket\",aggfunc='count')","d79c90f0":"train_df.groupby(['Pclass']).Survived.mean().to_frame()","6e9977d7":"def bar_chart_compare(dataset,feature1,feature2=None,title=\"Survival rate by sex and class\"):\n    plt.figure(figsize=[5,5])\n    plt.title(title)\n    g=sns.barplot(x=feature1,y='Survived',hue=feature2,ci=None,data=dataset).set_ylabel('Survival rate')","dd6c1187":"bar_chart_compare(train_df,'Pclass','Sex')","15fdf124":"pd.pivot_table(train_df,index='Survived',columns=['Pclass','Sex'],values='Ticket',aggfunc='count')","736161f3":"train_df.groupby(['Pclass','Sex']).Survived.mean().to_frame()","dfc24f4f":"def plot_distribution(dataset,feature,title,bins=30,hist=True,fsize=(5,5)):\n    fig,ax=plt.subplots(figsize=fsize)\n    ax.set_title(title)\n    sns.distplot(train_df[feature],color='g',bins=bins,ax=ax)","6ee31ad8":"def plot_kernel_density_estimate_survivors(dataset,feature1,title,fsize=(5,5)):\n    fig,ax=plt.subplots(figsize=fsize)\n    ax.set_title(title)\n    sns.kdeplot(dataset[feature1].loc[train_df[\"Survived\"]==1],\n               shade=True,ax=ax,label='Survived').set_xlabel(feature1)\n    sns.kdeplot(dataset[feature1].loc[train_df['Survived']==0],shade=True,ax=ax,label=\"Died\")","ee271729":"plot_kernel_density_estimate_survivors(train_df,\"Age\",\"Age Distribution Passengers\")","a0ed6b1d":"plot_kernel_density_estimate_survivors(train_df,\"Age\",\"Age Distribution Surived vs Died\")","f62a9a9c":"def plot_swarm_survivors(dataset,feature1,feature2,title,fsize=(155)):\n    fig,ax=plt.subplots(figsize=(18,5))\n    ax.grid(True)\n    plt.xticks(list(range(0,100,2)))\n    sns.swarmplot(y=feature1,x=feature2,hue='Survived',data=train_df).set_title(title)","b2dfc433":"plot_swarm_survivors(train_df,\"Sex\",\"Age\",\"Survivor swarmplot for age and gender\")","3030058a":"plot_swarm_survivors(train_df,\"Age\",\"Pclass\",\"Survivor Swarmplot for Age and Gender\")","17cd6e1d":"train_df.Fare.describe()","c1ce6afb":"plot_distribution(train_df,\"Fare\",\"Fare Distribution Passengers\")","e5b738af":"def plot_quartiles(dataset,feature,title,categories):\n    fig,axarr=plt.subplots(figsize=(5,5))\n    fare_ranges=pd.qcut(dataset[feature],len(categories),labels=categories)\n    axarr.set_title(title)\n    sns.barplot(x=fare_ranges,y=dataset.Survived,ci=None,ax=axarr).set_ylabel('Survival rate')","cd0df97f":"categories=['Cheap', 'Standard', 'Expensive', 'Luxury']\n\nplot_quartiles(train_df,\"Fare\",\"Survival Rate by Fare Ranges\/Categories\",categories)","d7999edd":"plot_swarm_survivors(train_df,\"Fare\",\"Sex\",\"Survivor Swarmplot for Age and Gender\")","e10acc5e":"train_df.loc[train_df.Fare==0]","b5b7864f":"len(train_df.loc[train_df.Fare==0])","fcfcdb86":"def show_countplot(dataset,feature,title,fsize=(5,5)):\n    fig,ax=plt.subplots(figsize=fsize)\n    sns.countplot(dataset[feature],ax=ax).set_title(title)\n    \ndef show_compare_countplot(dataset,feature1,feature2,title):\n    fig,ax=plt.subplots(figsize=(5,5))\n    p=sns.countplot(x=feature1,hue=feature2,data=dataset,ax=ax).set_title(title)","90504e62":"bar_chart_stacked(train_df,'Embarked')","ea160f8a":"show_countplot(train_df,\"Embarked\",\"Passengers count by boarding point\")","eca82783":"train_df['Embarked'].value_counts().to_frame()","1a0b1d7d":"show_compare_countplot(train_df,\"Embarked\",\"Survived\",\"Survivor count by place of embarktion\")","000398eb":"pd.pivot_table(train_df,index=\"Survived\",columns=\"Embarked\",values=\"Ticket\",aggfunc='count')","07904d67":"train_df.groupby(['Embarked']).Survived.mean().to_frame()","715d6308":"show_compare_countplot(train_df,\"Embarked\",\"Pclass\",\"Passenger count by place of embarktion and class\")","f7f42913":"train_df.groupby(['Embarked','Pclass']).Survived.sum().to_frame()","01c92cf9":"show_compare_countplot(train_df,\"Embarked\",\"Sex\",\"Passenger count by place of embarktion and sex\")","dd3a2d54":"train_df['SibSp'].value_counts().to_frame()","9466977c":"bar_chart_compare(train_df,\"SibSp\",title = \"Surival rate by siblings \/ spouses aboard the Titanic\")","a557b7fe":"train_df.groupby(['SibSp']).Survived.mean().to_frame()","42f9af15":"show_countplot(train_df,'SibSp','SibSp Distribution',(15,3))","ca334545":"show_compare_countplot(train_df,\"SibSp\",\"Survived\",\"Survivor count by number of siblings \/ spouses aboard the Titanic\")","b5fb3f6e":"show_countplot(train_df,\"Parch\",\"Parch Distribution\",(15,3))","1c615ffb":"bar_chart_compare(train_df,\"Parch\",title=\"Survival rate by Parch\")","5a16b0f2":"train_df.groupby(['Parch']).Survived.mean().to_frame()","fec95229":"show_compare_countplot(train_df,\"Parch\",\"Survived\",\"Survivor count by Parch\")","aa28de43":"pd.unique(train_df['Name'])","10929179":"train_df['Title']=train_df['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())\ntest_df['Title']=test_df['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())","1a3be665":"train_df.head()","d7e5735f":"train_df['Title'].value_counts().to_frame()","51adb0a7":"show_countplot(train_df,\"Title\",\"Title Distribution\",(15,3))","e9ae97d9":"train_df['Title'].replace(['Mme','Ms','Lady','Mlle','the Countess','Dona'],'Miss',inplace=True)\ntest_df['Title'].replace(['Mme','Ms','Lady','Mlle','the Countess','Dona'],'Miss',inplace=True)\ntrain_df['Title'].replace(['Major', 'Col', 'Capt', 'Don', 'Sir', 'Jonkheer'],'Mr',inplace=True)\ntest_df['Title'].replace(['Major', 'Col', 'Capt', 'Don', 'Sir', 'Jonkheer'],'Mr',inplace=True)","f0e6cad2":"show_countplot(train_df,\"Title\",\"Title Distribution after substitution\",(15,3))","bf99e161":"bar_chart_stacked(train_df,'Title')","748a3d12":"bar_chart_compare(train_df,\"Title\",title=\"Survival rate by Title\")","224b30da":"train_df[['Cabin','Ticket']]","24e77692":"train_df['Ticket_2letter']=train_df.Ticket.apply(lambda x:x[:2])","37d1c275":"train_df.Ticket.apply(lambda x:x[:2])","9ebf0fb0":"test_df['Ticket_2letter']=train_df.Ticket.apply(lambda x:x[:2])","6df83782":"train_df['Ticket_len']=train_df.Ticket.apply(lambda x:len(x))\ntest_df['Ticket_len']=test_df.Ticket.apply(lambda x:len(x))","28d1144a":"train_df.Ticket.apply(lambda x:len(x))","4504827b":"train_df['Cabin_num']=train_df.Ticket.apply(lambda x:len(x.split()))\ntest_df['Cabin_num']=test_df.Ticket.apply(lambda x:len(x.split()))","792d8121":"train_df.Ticket.apply(lambda x:len(x.split()))","d72f10c2":"train_df['Cabin_1letter']=train_df.Ticket.apply(lambda x:x[:1])\ntest_df['Cabin_1letter']=test_df.Ticket.apply(lambda x:x[:1])","8f077c2b":"train_df.Ticket.apply(lambda x:x[:1])","638ba746":"len(train_df['Ticket'].value_counts().to_frame())","b4e26896":"len(train_df['Ticket_2letter'].value_counts().to_frame())","ccaddc7c":"train_df['Cabin_num'].value_counts().to_frame()","0d0a9e4c":"len(train_df['Cabin_1letter'].value_counts().to_frame())","b72deb92":"train_df['Fam_size']=train_df['SibSp']+train_df['Parch']+1\ntest_df['Fam_size']=test_df['SibSp']+train_df['Parch']+1","84bc4b5d":"bar_chart_compare(train_df,\"Fam_size\",title=\"Survival rate by family size\")","300b76d5":"show_compare_countplot(train_df,\"Fam_size\",\"Survived\",\"Survivor count by family size\")","6833499e":"train_df['Fam_type']=pd.cut(train_df.Fam_size,[0,1,4,7,11],labels=['Solo', 'Small', 'Big', 'Very big'])\ntest_df['Fam_type']=pd.cut(test_df.Fam_size,[0,1,4,7,11],labels=['Solo', 'Small', 'Big', 'Very big'])\n","2609019a":"bar_chart_compare(train_df,\"Fam_type\",title=\"Survival rate by family type\")","a2790c61":"show_compare_countplot(train_df,\"Fam_type\",\"Survived\",\"Survivor count by family type\")","ff25c3ff":"y=train_df['Survived']\nfeatures=['Pclass', 'Fare', 'Title', 'Embarked', 'Fam_type', 'Ticket_len', 'Ticket_2letter']\nX=train_df[features]\nX.head()","ca2c90d7":"numerical_cols=['Fare']\ncategorical_cols=['Pclass','Title','Embarked','Fam_type','Ticket_len','Ticket_2letter']\nnumerical_transformer=SimpleImputer(strategy='median')\ncategorical_transformer=Pipeline(steps=[\n    ('imputer',SimpleImputer(strategy='most_frequent')),\n    ('onehot',OneHotEncoder(handle_unknown='ignore'))\n    \n])\n\npreprocessor=ColumnTransformer(\ntransformers=[\n    ('num',numerical_transformer,numerical_cols),\n    ('cat',categorical_transformer,categorical_cols)\n])\n\ntitanic_pipeline=Pipeline(steps=[\n    ('preproccessor',preprocessor),\n    ('model',RandomForestClassifier(random_state=0,n_estimators=500,max_depth=5))\n    \n])\n\ntitanic_pipeline.fit(X,y)\n\nprint('Cross Score: {:.3f}'.format(cross_val_score(titanic_pipeline,X,y,cv=10).mean()))","6a123d61":"X_test=test_df[features]\nX_test.head()","f9828410":"predictions=titanic_pipeline.predict(X_test)","1d8c9390":"output=pd.DataFrame({'PassengerId':test_df.PassengerId,'Survived':predictions})\noutput.to_csv('submission.csv',index=False)\nprint(\"Your submission was successfully saved!\")","55aea895":"bar_chart_compare(train_df,\"Title\",title=\"Survival rate by Title\")"}}