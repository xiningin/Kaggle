{"cell_type":{"68029e38":"code","b5dbd8b6":"code","b82daa10":"code","0d25ff2e":"code","de38ef22":"code","ba81cdd9":"code","3deb656c":"code","133cb20f":"code","d261f494":"code","7b6e3dd0":"code","31ad894b":"code","5923e942":"code","4424cff7":"code","b6ad9376":"code","4a35d342":"code","ec1023fa":"code","44a8c8b3":"code","57b6518d":"code","6976972a":"code","3990f96b":"code","2a252daa":"code","dbb0d0e3":"code","3ba23ef9":"code","4cb5e8a4":"code","931477f4":"code","271d2beb":"code","29281607":"code","67ef277d":"code","e7127ee8":"code","d6481929":"code","87eb1e07":"code","1eaf9ed7":"code","4c3b30df":"markdown","e251e3c5":"markdown","ba032c5c":"markdown","b5709f51":"markdown","dfa55b87":"markdown","339f939f":"markdown","4c06e2da":"markdown","43059c7a":"markdown","6b503342":"markdown","15fbd833":"markdown","50e6d2da":"markdown","9c28d4d5":"markdown","73ad2e41":"markdown","bc0eb1da":"markdown"},"source":{"68029e38":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5dbd8b6":"# Important Libraries\nimport pandas as pd\n\n# Libraries for Visualization\nimport plotly.express as px\nimport matplotlib.pyplot as plt \n\n# Data Viz Lib\nimport seaborn as sns # not used in this code\n\n# Data Viz Lib\nimport numpy as np \n\n# Numeric Calculation\n\n# Library required for splitting the data in Train and Test\nfrom sklearn.model_selection import train_test_split\n\n# Library required for the Linear Regression Algorithm\nfrom sklearn.linear_model import LinearRegression\n\n# Library for the metric required to evaluate the model\nfrom sklearn.metrics import mean_absolute_error\n\n%matplotlib inline \n# allow to plot the charts inline","b82daa10":"df = pd.read_csv('\/kaggle\/input\/house-sales\/house_sales.csv')","0d25ff2e":"df.head()","de38ef22":"df.sample(10)","ba81cdd9":"df.dtypes","3deb656c":"df.info()","133cb20f":"df.shape","d261f494":"df.isnull().sum()","7b6e3dd0":"df_new = pd.DataFrame(df.price )\ndf_new['sqft_living'] = df.sqft_living","31ad894b":"df_new.head()","5923e942":"df_new.shape","4424cff7":"df_new.isnull().sum()","b6ad9376":"fig = px.scatter(x = df_new.price, y = df_new.sqft_living, labels = {'x' : 'price', 'y' : 'sqft_living'}, trendline=\"ols\")\nfig.data[1].line.color = 'red'\nfig.show()","4a35d342":"df_new.loc[(df_new.sqft_living>13000)] ","ec1023fa":"df_new.drop(df_new.query(\"sqft_living > 13000\").index, inplace=True)","44a8c8b3":"df_new.shape","57b6518d":"fig = px.scatter(x = df_new.price, y = df_new.sqft_living, labels = {'x' : 'price', 'y' : 'sqft_living'}, trendline=\"ols\")\nfig.data[1].line.color = 'red'\nfig.show()","6976972a":"feature = df_new.sqft_living.values\ntarget = df_new.price.values","3990f96b":"feature = feature.reshape(-1,1)\ntarget = target.reshape(-1,1)","2a252daa":"X_train, X_test, Y_train, Y_test = train_test_split(feature, target, test_size = 0.2, random_state = 0)\nprint(\"X-Train :\",X_train.shape)\nprint(\"X-Test :\",X_test.shape)\nprint(\"Y-Train :\",Y_test.shape)\nprint(\"Y-Test :\",Y_test.shape)","dbb0d0e3":"# Instantiating the object of the class\nlr = LinearRegression()\n\n# Fitting the model\nlr.fit(X_train, Y_train)","3ba23ef9":"plt.figure(figsize = (15,8))\nplt.scatter(X_train, Y_train)\nplt.plot(X_train, lr.predict(X_train), color = 'red')\nplt.title('Price vs Sqft_living')\nplt.xlabel('price')\nplt.ylabel('square feet Living')\nplt.show()","4cb5e8a4":"pred_vals = lr.predict(X_test)\npred_vals","931477f4":"df_ac_vs_pr = pd.DataFrame(pred_vals, index = range(0,4323), columns = ['Predicted'])\ndf_ac_vs_pr['Actual'] = Y_test","271d2beb":"df_ac_vs_pr.head()","29281607":"print('Mean Absolute Error =', mean_absolute_error(Y_test, pred_vals))","67ef277d":"# Defining variable 'y' with given data\ny = np.array(3000)\ny = y.reshape(-1, 1)\n\n# Predicting on the basis of the value in 'y'\npred_y = lr.predict(y)\npred_y","e7127ee8":"print('The score obtained after studying for {} hours = {}'.format(y[0][0], pred_y[0][0]))","d6481929":"def mape(actual, pred): \n    actual, pred = np.array(actual), np.array(pred)\n    return np.mean(np.abs((actual - pred) \/ actual)) * 100","87eb1e07":"mape(Y_test, pred_vals)","1eaf9ed7":"### Conclusion :: As MAPE is 36% , that means sqft_living alone is not responsible for Proce veriation.","4c3b30df":"#### Conclusion :: 1 outlier is present","e251e3c5":"### Finding the solution of question asked in the problem statement","ba032c5c":"#### Predicting the values","b5709f51":"### Step 7 : Evaluating the performance of the model","dfa55b87":"### Step 3 : Understanding the Data","339f939f":"### Step 5 : Splitting the dataset into Train and Test data","4c06e2da":"## **Task 1 - Predicting the price of the house as per square feet area**\n### Given Problem Statement\n### 1. A simple linear regression task involving 2 variables, we need to predict the price of the house as per sqrft area. \n### 2. What will be the predicted price, if the plot size is 3000 and will the one dependent variable is enough to predict the Price of the House ?","43059c7a":"### Step 2 : Reading the data into Pandas Dataframe","6b503342":"### Calculation MAPE","15fbd833":"### Step 4: Exploring the data","50e6d2da":"#### Creating a dataframe with Actual and Predicted Values","9c28d4d5":"### Step 6 : Implementing the Linear Regression Algorithm","73ad2e41":"### Step 1 : Importing Required Libraries","bc0eb1da":"### Plotting the Regression Line with Actual vs Predicted values"}}