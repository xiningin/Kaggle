{"cell_type":{"96b85756":"code","922d9ac8":"code","0dfe1618":"code","391aa412":"code","369afa09":"code","19f12b87":"code","1e268a49":"code","29f16e55":"code","f4bf5577":"markdown","770835d7":"markdown","3846d53a":"markdown"},"source":{"96b85756":"import numpy as np\nimport pandas as pd\ndata = pd.read_csv('\/kaggle\/input\/congressional-voting-records\/house-votes-84.csv')\ndata.head()","922d9ac8":"ynmap = {'y':1,'n':0,'?':np.nan}\npartymap = {'republican':1,'democrat':0}\ndata['republican'] = data['Class Name'].map(partymap)\ndata.drop('Class Name',axis=1,inplace=True)\nfor column in data.columns.drop('republican'):\n    data[column+'1'] = data[column].map(ynmap)\n    data.drop(column,axis=1,inplace=True)\ndata_col = data.columns\ndata.head()","0dfe1618":"#impute missing values\nfrom sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors=5)\ndata = pd.DataFrame(imputer.fit_transform(data),columns=data_col)","391aa412":"data.head()","369afa09":"import sklearn\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(data.drop('republican',axis=1),data['republican'],test_size=0.35)","19f12b87":"from sklearn.linear_model import LogisticRegression\nlog = LogisticRegression()\nlog.fit(X_train,y_train)","1e268a49":"(log.predict(X_test) - y_test).apply(abs).mean()","29f16e55":"for k_value in range(1,30):\n    import numpy as np\n    import pandas as pd\n    data = pd.read_csv('\/kaggle\/input\/congressional-voting-records\/house-votes-84.csv')\n    \n    ynmap = {'y':1,'n':0,'?':np.nan}\n    data['republican'] = data['Class Name'].map(partymap)\n    data.drop('Class Name',axis=1,inplace=True)\n    for column in data.columns.drop('republican'):\n        data[column+'1'] = data[column].map(ynmap)\n        data.drop(column,axis=1,inplace=True)\n    partymap = {'republican':1,'democrat':0}\n    data_col = data.columns\n    \n    #impute missing values\n    from sklearn.impute import KNNImputer\n    imputer = KNNImputer(n_neighbors=k_value)\n    data = pd.DataFrame(imputer.fit_transform(data),columns=data_col)\n    \n    from sklearn.linear_model import LogisticRegression\n    log = LogisticRegression()\n    log.fit(X_train,y_train)\n    print('K-Value: '+str(k_value)+\" | Absolute Mean Error: \"+str((log.predict(X_test) - y_test).apply(abs).mean()))","f4bf5577":"# Party classification. Mean Absolute Error: ~0.019","770835d7":"I guess the k-value doesn't matter.","3846d53a":"# Finding the best k-means imputer"}}