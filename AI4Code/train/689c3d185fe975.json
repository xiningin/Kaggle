{"cell_type":{"72b00392":"code","a598462f":"code","2fa93ae4":"code","57457dbe":"code","bfcf2004":"code","5fc33a00":"code","e476b03f":"code","3be9af9e":"code","cc6e8405":"code","d2eecd5e":"code","d89e8e0d":"code","a930019b":"code","ba5568db":"code","24d66cbb":"code","34fb3794":"code","d63b317e":"code","ce24cd9d":"code","f1b5b9dc":"code","77ec4c0c":"code","83aa1d81":"code","455c74a6":"code","f4102660":"code","52cb5080":"code","3baf1bbd":"code","1587f893":"code","6e6b0100":"code","4f4d5a3c":"code","c4d56c19":"code","87e899d6":"code","2bd4bd09":"code","17b29d97":"code","2ba07ead":"code","dad91d3b":"code","b2f1fffd":"code","839bba19":"code","a1ca0283":"code","86a4f84c":"code","dcd0c4d4":"code","f895b0f5":"code","18b51c44":"markdown","391d27fc":"markdown","8254cfb3":"markdown","2358feab":"markdown","fe5eb306":"markdown","ab555d28":"markdown","fa6823cc":"markdown","f89d5b87":"markdown","adc33795":"markdown","319d6c4f":"markdown","f5a29593":"markdown","c08bf8ac":"markdown","1e16b036":"markdown","0dc80a54":"markdown","e75d2917":"markdown","d48a5c9b":"markdown","0dd3e8ab":"markdown","fd5bf45f":"markdown","2dc61bd7":"markdown","7777ed90":"markdown","2c89607e":"markdown"},"source":{"72b00392":"# Installs\n!pip install pycountry_convert \n!pip install folium\n!pip install calmap","a598462f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker \nimport pycountry_convert as pc\nimport folium\nimport branca\nfrom datetime import datetime, timedelta,date\nfrom scipy.interpolate import make_interp_spline, BSpline\nimport plotly.express as px\nimport json, requests\nimport calmap\n\nfrom keras.layers import Input, Dense, Activation, LeakyReLU, Dropout\nfrom keras import models\nfrom keras.optimizers import RMSprop, Adam\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","2fa93ae4":"# Jhon hopkins Dataset\ndf_confirmed = pd.read_csv('..\/input\/global-data\/time_series_covid19_confirmed_global.csv')\ndf_deaths = pd.read_csv('..\/input\/global-data\/time_series_covid19_deaths_global.csv')\ndf_recovered = pd.read_csv('..\/input\/global-data\/time_series_covid19_recovered_global.csv')\n\ndf_covid19 = pd.read_csv(\"..\/input\/covid19\/cases_country.csv\")\ndf_table = pd.read_csv(\"..\/input\/covid19\/cases_time.csv\",parse_dates=['Last_Update'])","57457dbe":"#new dataset \ndf_covid19 = df_covid19.drop([\"People_Tested\",\"People_Hospitalized\",\"UID\",\"ISO3\",\"Mortality_Rate\"],axis =1)\ndf_covid19.head(2)","bfcf2004":"df_confirmed.head()","5fc33a00":"df_deaths.head()","e476b03f":"df_table.head()","3be9af9e":"df_confirmed = df_confirmed.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_deaths = df_deaths.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_covid19 = df_covid19.rename(columns={\"Country_Region\": \"country\"})\ndf_covid19[\"Active\"] = df_covid19[\"Confirmed\"]-df_covid19[\"Recovered\"]-df_covid19[\"Deaths\"]\ndf_recovered = df_recovered.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_confirmed.head()","cc6e8405":"# getting all countries\ncountries = np.asarray(df_confirmed[\"country\"])\ncountries1 = np.asarray(df_covid19[\"country\"])\n\n\n","d2eecd5e":"df_countries_cases = df_covid19.copy().drop(['Lat','Long_','continent','Last_Update'],axis =1)\ndf_countries_cases.index = df_countries_cases[\"country\"]\ndf_countries_cases = df_countries_cases.drop(['country'],axis=1)\n\ndf_continents_cases = df_covid19.copy().drop(['Lat','Long_','country','Last_Update'],axis =1)\ndf_continents_cases = df_continents_cases.groupby([\"continent\"]).sum()\n\ndf_countries_cases.fillna(0,inplace=True)\ndf_continents_cases.fillna(0,inplace=True)","d89e8e0d":"df_t = pd.DataFrame(pd.to_numeric(df_countries_cases.sum()),dtype=np.float64).transpose()\ndf_t[\"Mortality Rate (per 100)\"] = np.round(100*df_t[\"Deaths\"]\/df_t[\"Confirmed\"],2)\ndf_t.style.background_gradient(cmap='Reds',axis=1).format(\"{:.2f}\").format(\"{:.0f}\",subset=[\"Confirmed\",\"Deaths\",\"Recovered\",\"Active\"])","a930019b":"df_continents_cases[\"Mortality Rate (per 100)\"] = np.round(100*df_continents_cases[\"Deaths\"]\/df_continents_cases[\"Confirmed\"],2)\ndf_continents_cases.style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Pastel1_r',subset=[\"Incident_Rate\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate (per 100)\"])\\\n                        .format(\"{:.2f}\")\\\n                        .format(\"{:.0f}\",subset=[\"Confirmed\",\"Deaths\",\"Recovered\",\"Active\"])","ba5568db":"# df_countries_cases.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='Wistia')\ndf_countries_cases[\"Mortality Rate (per 100)\"] = np.round(100*df_countries_cases[\"Deaths\"]\/df_countries_cases[\"Confirmed\"],2)\ndf_countries_cases.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Pastel1_r',subset=[\"Incident_Rate\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate (per 100)\"])\\\n                        .format(\"{:.2f}\")\\\n                        .format(\"{:.0f}\",subset=[\"Confirmed\",\"Deaths\",\"Recovered\",\"Active\"])","24d66cbb":"df_ind = df_countries_cases.iloc[26, :]\ndf_india_cases = pd.DataFrame(df_ind).transpose()\ndf_india_cases[\"Mortality Rate (per 100)\"] = np.round(100*df_india_cases[\"Deaths\"]\/df_countries_cases[\"Confirmed\"],2)\ndf_india_cases.style.background_gradient(cmap='Blues',axis=1).format(\"{:.2f}\").format(\"{:.0f}\",subset=[\"Confirmed\",\"Deaths\",\"Recovered\",\"Active\"])","34fb3794":"import seaborn as sns\nsns.set(style=\"darkgrid\")\n\nf = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True).invert_xaxis()\nplt.bar(df_countries_cases.sort_values('Confirmed')[\"Confirmed\"].index[-5:],df_countries_cases.sort_values('Confirmed')[\"Confirmed\"].values[-5:],color=\"green\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top 5 Countries: Confirmed Cases\",fontsize=20)\nplt.show()","d63b317e":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True).invert_xaxis()\nplt.bar(df_countries_cases.sort_values('Deaths')[\"Deaths\"].index[-5:],df_countries_cases.sort_values('Deaths')[\"Deaths\"].values[-5:],color=\"red\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Deaths Cases\",fontsize=18)\nplt.title(\"Top 5 Countries: Deaths Cases\",fontsize=20)\nplt.show()","ce24cd9d":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True).invert_xaxis()\nplt.bar(df_countries_cases.sort_values('Active')[\"Active\"].index[-5:],df_countries_cases.sort_values('Active')[\"Active\"].values[-5:],color=\"darkorange\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Active Cases\",fontsize=18)\nplt.title(\"Top 5 Countries: Active Cases\",fontsize=20)\nplt.show()","f1b5b9dc":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True).invert_xaxis()\nplt.bar(df_countries_cases.sort_values('Recovered')[\"Recovered\"].index[-5:],df_countries_cases.sort_values('Recovered')[\"Recovered\"].values[-5:],color=\"limegreen\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Recovered Cases\",fontsize=18)\nplt.title(\"Top 5 Countries: Recovered Cases\",fontsize=20)\nplt.show()","77ec4c0c":"corr = df_countries_cases.corr()\nax = sns.heatmap(corr,annot=True,cmap='RdYlGn',linewidths=0.1,annot_kws={'size':12})\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nfig=plt.gcf()\nfig.set_size_inches(12,10)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","83aa1d81":"world_map = folium.Map(location=[10,0], tiles=\"cartodbpositron\", zoom_start=2,max_zoom=8,min_zoom=2)\nfor i in range(0,len(df_confirmed)):\n    folium.Circle(\n        location=[df_confirmed.iloc[i]['Lat'], df_confirmed.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+df_confirmed.iloc[i]['country']+\"<\/h5>\"+\n                    \"<div style='text-align:center;'>\"+str(np.nan_to_num(df_confirmed.iloc[i]['state']))+\"<\/div>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(df_confirmed.iloc[i,-1])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(df_deaths.iloc[i,-1])+\"<\/li>\"+\n        \"<li>Mortality Rate:   \"+str(np.round(df_deaths.iloc[i,-1]\/(df_confirmed.iloc[i,-1]+1.00001)*100,2))+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=(int((np.log(df_confirmed.iloc[i,-1]+1.00001)))+0.2)*50000,\n        color='#ff6600',\n        fill_color='red',\n        fill=True).add_to(world_map)\n\nworld_map\n","455c74a6":"temp_df = pd.DataFrame(df_countries_cases['Confirmed'])\ntemp_df = temp_df.reset_index()\nfig = px.choropleth(temp_df, locations=\"country\",\n                    color=np.log10(temp_df[\"Confirmed\"]), # lifeExp is a column of gapminder\n                    hover_name=\"country\", # column to add to hover information\n                    hover_data=[\"Confirmed\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,locationmode=\"country names\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title_text=\"Confirmed Cases Heat Map (Log Scale)\")\nfig.update_coloraxes(colorbar_title=\"Confirmed Cases(Log Scale)\",colorscale=\"Blues\")\nfig.show()","f4102660":"temp_df = pd.DataFrame(df_countries_cases['Recovered'])\ntemp_df = temp_df.reset_index()\nfig = px.choropleth(temp_df, locations=\"country\",\n                    color=np.log10(temp_df.iloc[:,-1]+1), # lifeExp is a column of gapminder\n                    hover_name=\"country\", # column to add to hover information\n                    hover_data=[\"Recovered\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,locationmode=\"country names\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title_text=\"Recovered Heat Map (Log Scale)\")\nfig.update_coloraxes(colorbar_title=\"Recovered\",colorscale=\"Greens\")\n\nfig.show()","52cb5080":"temp_df = pd.DataFrame(df_countries_cases['Deaths'])\ntemp_df = temp_df.reset_index()\nfig = px.choropleth(temp_df, locations=\"country\",\n                    color=np.log10(temp_df[\"Deaths\"]+1), # lifeExp is a column of gapminder\n                    hover_name=\"country\", # column to add to hover information\n                    hover_data=[\"Deaths\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,locationmode=\"country names\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title_text=\"Deaths Heat Map (Log Scale)\")\nfig.update_coloraxes(colorbar_title=\"Deaths (Log Scale)\",colorscale=\"Reds\")\nfig.show()","3baf1bbd":"case_nums_country = df_confirmed.groupby(\"country\").sum().drop(['Lat','Long'],axis =1).apply(lambda x: x[x > 0].count(), axis =0)\nd = [datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in case_nums_country.index]\n\nf = plt.figure(figsize=(15,8))\nf.add_subplot(111)\nmarker_style = dict(c=\"red\",linewidth=6, linestyle='-', marker='*',markersize=15, markerfacecolor='#ffffff')\nplt.plot(d, case_nums_country,**marker_style)\nplt.tick_params(labelsize = 14)\nplt.xticks(list(np.arange(0,len(d),int(len(d)\/5))),d[:-1:int(len(d)\/5)]+[d[-1]])\n\n#labels\nplt.xlabel(\"Dates\",fontsize=18)\nplt.ylabel(\"Number of Countries\/Regions\",fontsize=1)\nplt.show()\nplt.close()","1587f893":"\ndf_data = df_table.groupby(['Last_Update', 'Country_Region'])['Confirmed', 'Deaths'].max().reset_index().fillna(0)\ndf_data[\"Last_Update\"] = pd.to_datetime( df_data[\"Last_Update\"]).dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter_geo(df_data, locations=\"Country_Region\", locationmode='country names', \n                     color=np.power(df_data[\"Confirmed\"],0.3)-2 , size= np.power(df_data[\"Confirmed\"]+1,0.3)-1, hover_name=\"Country_Region\",\n                     hover_data=[\"Confirmed\"],\n                     range_color= [0, max(np.power(df_data[\"Confirmed\"],0.3))], \n                     projection=\"natural earth\", animation_frame=\"Last_Update\", \n                     color_continuous_scale=px.colors.sequential.Plasma,\n                     title='COVID-19: Progression of spread'\n                    )\nfig.update_coloraxes(colorscale=\"hot\")\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","6e6b0100":"temp = df_confirmed.groupby('country').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_confirmed.columns[-1], ascending= False)\n\nthreshold = 50\nf = plt.figure(figsize=(15,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i >= 9:\n        if country != \"India\" and country != \"Japan\" :\n            continue\n    days = 100\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:days]\n     \n    date = np.arange(0,len(t[:days]))\n    xnew = np.linspace(date.min(), date.max(), 30)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    if country != \"India\":\n        plt.plot(xnew,power_smooth,'-o',label = country,linewidth =3, markevery=[-1])\n    else:\n        marker_style = dict(linewidth=4, linestyle='-', marker='o',markersize=10, markerfacecolor='#ffffff')\n        plt.plot(date,t,\"-.\",label = country,**marker_style)\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,days,7),[ \"Day \"+str(i) for i in range(days)][::7])     \n\n# Reference lines \nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,int(days-22))\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every second day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,int(days-4))\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,int(days-4))\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n\n# India is following trend similar to doulbe the cases in 4 days but it may increase the rate \nx = np.arange(0,int(days-5))\ny = 2**(x\/4+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"Red\")\nplt.annotate(\".. every 4 days\",(x[-3],y[-1]),color=\"Red\",xycoords=\"data\",fontsize=14,alpha = 0.8)\n\n# plot Params\nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize=17)\nplt.title(\"Trend Comparison of Different Countries\\n and India (confirmed) \",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.show()","4f4d5a3c":"sns.set(style=\"whitegrid\")\nthoudand = 1000\ntemp = df_confirmed.groupby('country').sum().diff(axis=1).sort_values(df_deaths.columns[-1],ascending =False).head(10).replace(np.nan,0)\nthreshold = 0\nf = plt.figure(figsize=(20,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>=threshold]\n    \n    date = np.arange(0,len(t[:]))\n    plt.plot(date,t\/thoudand,'-o',label = country,linewidth =2, markevery=[-1])\n\n\nnextdays = [(datetime.strptime(d[-1],'%d %b')+timedelta(days=i)).strftime(\"%d %b\") for i in range(1,7+1)]\ntotal =d+nextdays\n\n# X-axis\nplt.xticks(list(np.arange(0,len(total),int(len(total)\/5))),total[:-1:int(len(total)\/5)]+[total[-1]])\n\n# Tick-Parameters\nax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.tick_params(which='both', width=1,labelsize=14)\nax.tick_params(which='major', length=6)\nax.tick_params(which='minor', length=3, color='0.8')\n\n# Grid\nplt.grid(lw = 1, ls = '-', c = \"0.85\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.95\", which = 'minor')\n\n# Plot Title\nplt.title(\"COVID-19 Daily Confirmed Cases in Different Countries\",{'fontsize':24})\n\n# Axis Lable\nplt.xlabel(\"Date\",fontsize =18)\nplt.ylabel(\"Number of Daily Confirmed Cases (Thousand)\",fontsize =18)\n\n# plt.yscale(\"log\")\nplt.legend(fontsize=18) \nplt.show()","c4d56c19":"thoudand = 1000\ntemp = df_deaths.groupby('country').sum().diff(axis=1).sort_values(df_deaths.columns[-1],ascending =False).head(10).replace(np.nan,0)\nthreshold = 0\nf = plt.figure(figsize=(20,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>=threshold]\n    \n    date = np.arange(0,len(t[:]))\n    plt.plot(date,t\/thoudand,'-o',label = country,linewidth =2, markevery=[-1])\n\n\nnextdays = [(datetime.strptime(d[-1],'%d %b')+timedelta(days=i)).strftime(\"%d %b\") for i in range(1,7+1)]\ntotal =d+nextdays\n\n# X-axis\nplt.xticks(list(np.arange(0,len(total),int(len(total)\/5))),total[:-1:int(len(total)\/5)]+[total[-1]])\n\n# Tick-Parameters\nax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.tick_params(which='both', width=1,labelsize=15)\nax.tick_params(which='major', length=6)\nax.tick_params(which='minor', length=3, color='0.8')\n\n# Grid\nplt.grid(lw = 1, ls = '-', c = \"0.85\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.95\", which = 'minor')\n\n# Plot Title\nplt.title(\"COVID-19 Daily Deaths Reported in Different Countries\",{'fontsize':24})\n\n# Axis Lable\nplt.xlabel(\"Date\",fontsize =18)\nplt.ylabel(\"Number of Daily Deaths Reported (Thousand)\",fontsize =18)\n\n# plt.yscale(\"log\")\nplt.legend(fontsize=18) \nplt.show()","87e899d6":"df_data = df_table.groupby(['Last_Update', 'Country_Region'])['Confirmed', 'Deaths','continent'].max().reset_index().fillna(0)\ndf_data[\"Last_Update\"] = pd.to_datetime( df_data[\"Last_Update\"]).dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter(df_data, y=100*df_data[\"Deaths\"]\/(df_data[\"Confirmed\"]+1),\n                    x= df_data[\"Confirmed\"]+1,\n                    range_y = [-1,18],\n                    range_x = [1,df_data[\"Confirmed\"].max()+10000],\n                    color= \"continent\", hover_name=\"Country_Region\",\n                    hover_data=[\"Confirmed\",\"Deaths\"],\n                    range_color= [0, max(np.power(df_data[\"Confirmed\"],0.3))], \n                    animation_frame=\"Last_Update\", \n                    animation_group=\"Country_Region\",\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    title='COVID-19: Change in Mortality Rate of Each Countries Over Time',\n                    size = np.power(df_data[\"Confirmed\"]+1,0.3)-0.5,\n                    size_max = 30,\n                    log_x=True,\n                    height =700,\n                    )\nfig.update_coloraxes(colorscale=\"hot\")\nfig.update(layout_coloraxis_showscale=False)\nfig.update_xaxes(title_text=\"Confirmed Cases (Log Scale)\")\nfig.update_yaxes(title_text=\"Mortality Rate (%)\")\nfig.show()","2bd4bd09":"# Getting data for India and Oouside India\n# df - Cumulative data for India, outside India and world total  (confirmed cases)\n# df_newcases- new cases reported per day  (confirmed cases)\ndf_confirmed_report = df_confirmed.iloc[:,:105].copy()\ndf_confirmed_report.loc[df_confirmed_report['country'] != \"India\",\"country\"] = \"Outside India\"\ndf_confirmed_report = df_confirmed_report.groupby(\"country\").sum().drop([\"Lat\",\"Long\"],axis =1)\ndf_confirmed_report.loc[\"Total\"] = df_confirmed_report.sum()\ndf_confirmed_newcases = df_confirmed_report.groupby(level =0).diff(axis =1)\ndf_confirmed_newcases = df_confirmed_newcases.replace(np.nan, 0, regex=True) \nf = plt.figure(figsize=(15,8))\nax1 = f.add_subplot(111)\n\nax1.bar(df_confirmed_report[df_confirmed_report.index == \"India\"].columns,df_confirmed_newcases[df_confirmed_newcases.index == \"India\"].values[0], label = \"India (New)\",color='dodgerblue')\nax1.bar(df_confirmed_report[df_confirmed_report.index == \"Outside India\"].columns,df_confirmed_newcases[df_confirmed_newcases.index == \"Outside India\"].values[0],bottom=df_confirmed_newcases[df_confirmed_newcases.index == \"India\"].values[0],label = \"Outside India (New)\",color='orangered')\n\n# Labels\nax1.set_xlabel(\"Dates\",fontsize=17)\nax1.set_ylabel(\"New Cases Reported\",fontsize =17)\n\nax1.tick_params(size=10,labelsize=15)\nlength = len(df_confirmed_report.columns)\nax1.set_xticks(np.arange(0.5, length, int(length\/5)))\nax1.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_confirmed_report.columns][::int(length\/5)],fontsize=15)\nl = np.arange(0, df_confirmed_report.max(axis = 1)[2]\/10+10000, 5000)\nax1.set_yticks(l[::int(len(l)\/5)])\n# ax1.spines['bottom'].set_position('zero')\n\nax2 = ax1.twinx()\nmarker_style = dict(linewidth=6, linestyle='-', marker='o',markersize=6, markerfacecolor='#ffffff')\n\nax2.plot(df_confirmed_report[df_confirmed_report.index == \"Total\"].columns ,df_confirmed_report[df_confirmed_report.index == \"Total\"].values[0],**marker_style,label = \"World Total (Cumulative)\",color=\"darkorange\",clip_on=False)\nax2.plot(df_confirmed_report[df_confirmed_report.index == \"India\"].columns ,df_confirmed_report[df_confirmed_report.index == \"India\"].values[0],**marker_style,label = \"India (Cumulative)\",color=\"limegreen\",clip_on=False)\nax2.plot(df_confirmed_report[df_confirmed_report.index == \"Outside India\"].columns ,df_confirmed_report[df_confirmed_report.index == \"Outside India\"].values[0],**marker_style,label =\"Outside India (Cumulative)\",color=\"darkviolet\",clip_on=False)\nax2.bar([0],[0])\n\n# Label\nax2.tick_params(labelsize=15)\nax2.set_ylabel(\"Cumulative\",fontsize =17)\nax2.set_xticks(np.arange(0.5, length, int(length\/5)))\nax2.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_confirmed_report.columns][::int(length\/5)],fontsize=15)\nl = np.arange(0, df_confirmed_report.max(axis = 1)[2]+100000, 100000)\nax2.set_yticks(l[::int(len(l)\/5)])\n\nf.tight_layout()\nf.legend(loc = \"upper left\", bbox_to_anchor=(0.1,0.95))\nplt.title(\"COVID-19 Confirmed Cases: India Vs Rest of the World\",fontsize = 22)\nplt.show()\n","17b29d97":"! pip install googlemaps\nfrom plotly.subplots import make_subplots\nimport googlemaps\nimport re \nimport pycountry\nimport pycountry_convert as pc\nimport requests\n\nimport os\n\nsns.set()\nimport pycountry\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot \nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\n\n!pip install pywaffle\nfrom pywaffle import Waffle\n\npy.init_notebook_mode(connected=True)\nimport folium \nfrom folium import plugins\nplt.style.use(\"fivethirtyeight\")# for pretty graphs\n\n# Increase the default plot size and set the color scheme\nplt.rcParams['figure.figsize'] = 8, 5\n#plt.rcParams['image.cmap'] = 'viridis'\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Disable warnings \nimport warnings\nwarnings.filterwarnings('ignore')","2ba07ead":"df= pd.read_csv('..\/input\/india-fights-covid19\/Covid cases in India.csv')\ndf_india = df.copy()\n\n# Coordinates of India States and Uts\nIndia_coord = pd.read_csv('..\/input\/india-fights-covid19\/Indian Coordinates.csv')\n\n#Day by day data of India, Korea and Italy\ndbd_India = pd.read_excel('..\/input\/india-fights-covid19\/per_day_cases.xlsx',sheet_name='India')\n\ndf.head()","dad91d3b":"india_data_json = requests.get('https:\/\/api.rootnet.in\/covid19-in\/unofficial\/covid19india.org\/statewise').json()\ndf_india = pd.io.json.json_normalize(india_data_json['data']['statewise'])\ndf_india = df_india.set_index(\"state\")","b2f1fffd":"df_india[\"Mortality Rate (per 100)\"]= np.round(np.nan_to_num(100*df_india[\"deaths\"]\/df_india[\"confirmed\"]),2)\ndf_india.style.background_gradient(cmap='Blues',subset=[\"confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"active\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate (per 100)\"])\\\n                        .format(\"{:.2f}\",subset=[\"Mortality Rate (per 100)\"])","839bba19":"df_full = pd.merge(India_coord,df,on='Name of State \/ UT')\n\n\nf, ax = plt.subplots(figsize=(12, 8))\ndata = df_full[['Name of State \/ UT','Total Confirmed cases','Cured\/Discharged\/Migrated','Deaths']]\ndata.sort_values('Total Confirmed cases',ascending=False,inplace=True)\nsns.set_color_codes(\"bright\")\nsns.barplot(x=\"Total Confirmed cases\", y=\"Name of State \/ UT\", data=data,\n            label=\"Total\", color=\"r\")\n\nsns.set_color_codes(\"bright\")\nsns.barplot(x=\"Cured\/Discharged\/Migrated\", y=\"Name of State \/ UT\", data=data,\n            label=\"Recovered\", color=\"g\")\n\nsns.set_color_codes(\"bright\")\nsns.barplot(x=\"Deaths\", y=\"Name of State \/ UT\", data=data,\n            label=\"Deaths\", color=\"b\")\n\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 10000), ylabel=\"\",\n       xlabel=\"Cases\")\nsns.despine(left=True, bottom=True)","a1ca0283":"fig = px.bar(dbd_India, x=\"Date\", y=\"Total Cases\", color='Total Cases', orientation='v', height=600,\n             title='Confirmed Cases in India', color_discrete_sequence = px.colors.cyclical.mygbm)\n\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()","86a4f84c":"%%HTML\n<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/2061549\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/2061549\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>\n","dcd0c4d4":"# Adding Location data (Latitude,Longitude)\nlocations = {\n    \"Kerala\" : [10.8505,76.2711],\n    \"Maharashtra\" : [19.7515,75.7139],\n    \"Karnataka\": [15.3173,75.7139],\n    \"Telangana\": [18.1124,79.0193],\n    \"Uttar Pradesh\": [26.8467,80.9462],\n    \"Rajasthan\": [27.0238,74.2179],\n    \"Gujarat\":[22.2587,71.1924],\n    \"Delhi\" : [28.7041,77.1025],\n    \"Punjab\":[31.1471,75.3412],\n    \"Tamil Nadu\": [11.1271,78.6569],\n    \"Haryana\": [29.0588,76.0856],\n    \"Madhya Pradesh\":[22.9734,78.6569],\n    \"Jammu and Kashmir\":[33.7782,76.5762],\n    \"Ladakh\": [34.1526,77.5770],\n    \"Andhra Pradesh\":[15.9129,79.7400],\n    \"West Bengal\": [22.9868,87.8550],\n    \"Bihar\": [25.0961,85.3131],\n    \"Chhattisgarh\":[21.2787,81.8661],\n    \"Chandigarh\":[30.7333,76.7794],\n    \"Uttarakhand\":[30.0668,79.0193],\n    \"Himachal Pradesh\":[31.1048,77.1734],\n    \"Goa\": [15.2993,74.1240],\n    \"Odisha\":[20.9517,85.0985],\n    \"Andaman and Nicobar Islands\": [11.7401,92.6586],\n    \"Puducherry\":[11.9416,79.8083],\n    \"Manipur\":[24.6637,93.9063],\n    \"Mizoram\":[23.1645,92.9376],\n    \"Assam\":[26.2006,92.9376],\n    \"Meghalaya\":[25.4670,91.3662],\n    \"Tripura\":[23.9408,91.9882],\n    \"Arunachal Pradesh\":[28.2180,94.7278],\n    \"Jharkhand\" : [23.6102,85.2799],\n    \"Nagaland\": [26.1584,94.5624],\n    \"Sikkim\": [27.5330,88.5122],\n    \"Dadra and Nagar Haveli\":[20.1809,73.0169],\n    \"Lakshadweep\":[10.5667,72.6417],\n    \"Daman and Diu\":[20.4283,72.8397]    \n}\ndf_india[\"Lat\"] = \"\"\ndf_india[\"Long\"] = \"\"\n\nfor index in df_india.index :\n    if index in locations:\n        df_india.loc[df_india.index == index,\"Lat\"] = locations[index][0]\n        df_india.loc[df_india.index == index,\"Long\"] = locations[index][1]\n    else:\n        df_india.drop([index],inplace=True)","f895b0f5":"india = folium.Map(location=[23,80], zoom_start=4,max_zoom=6,min_zoom=4,height=500,width=\"80%\")\nfor i in range(0,len(df_india[df_india['confirmed']>0].index)):\n    folium.Circle(\n        location=[df_india.iloc[i]['Lat'], df_india.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+df_india.iloc[i].name+\"<\/h5>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(df_india.iloc[i]['confirmed'])+\"<\/li>\"+\n        \"<li>Active:   \"+str(df_india.iloc[i]['active'])+\"<\/li>\"+\n        \"<li>Recovered:   \"+str(df_india.iloc[i]['recovered'])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(df_india.iloc[i]['deaths'])+\"<\/li>\"+\n        \n        \"<li>Mortality Rate:   \"+str(np.round(df_india.iloc[i]['Mortality Rate (per 100)'],2))+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=(int(np.log2(df_india.iloc[i]['confirmed']+1)))*15000,\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(india)\n\nindia  ","18b51c44":"### Top 5 countries (Confirmed Cases and Deaths)","391d27fc":"### Coninent Wise Reported Cases in the world \nConinent Wise reported confirmed cases, recovered cases, deaths, active cases","8254cfb3":"# General Analysis of Data\n\nGetting country wise and continent wise data.","2358feab":"# Covid-19 Analysis India vs The World\n## Prerequsites ","fe5eb306":"## Global Confirmed Cases Visualization Using: Choropleth Maps ","ab555d28":"# COVID-19 Spread Analysis\n## 1. Spread Across World","fa6823cc":"### Country Wise Reported Cases in the world \nConinent Wise reported confirmed cases, recovered cases, deaths, active cases","f89d5b87":"## India Vs Outside India First 100 days","adc33795":"# Correlation Analysis\n### Country Wise Correlation","319d6c4f":"# India Statewise Analysis","f5a29593":"## 2. Spread Across Progression","c08bf8ac":"# COVID-19 Spread Comparison of few most affected countries and INDIA in First 100 days","1e16b036":"## Importing The Required Libraries","0dc80a54":"## Confirmed vs Recovered vs Deaths","e75d2917":"## Global Deaths Cases Visualization Using: Choropleth Maps ","d48a5c9b":"# Visulization using Maps(Folium)\n## 1) The World","0dd3e8ab":"# COVID-19: Change in Mortality Rate of Each Countries Over Time","fd5bf45f":"## Preprocessing of Datasets","2dc61bd7":"### Global Reported Cases till Date\nTotal number of confirmed cases, deaths reported, revoveries and active cases all across the world","7777ed90":"## Global Recovered Cases Visualization Using: Choropleth Maps ","2c89607e":"## Cases in India reported till date "}}