{"cell_type":{"cb1bf57b":"code","06a5e263":"code","b8a1064e":"code","09f9602b":"code","d6d43f83":"code","a41170d2":"code","54e64b4c":"code","8379f422":"code","e7d014c7":"code","f01e5892":"code","350ec7df":"code","59a09fd4":"code","5f15e6d0":"code","4ee0bcde":"code","9bfd3173":"code","2dc1082b":"code","6633fc03":"code","a79a92c7":"code","7cf22f66":"code","21f5cade":"code","35d59f77":"code","f9bf83fd":"code","cbb27659":"code","b919351c":"markdown","0b27377b":"markdown","f431675d":"markdown","f67805d6":"markdown","9e675036":"markdown","1bd6f4ad":"markdown","32fc379e":"markdown","4a57e5a4":"markdown","9e2626cb":"markdown","6d710d00":"markdown","da97e094":"markdown","e0f8c4f8":"markdown","7a2251a6":"markdown","0cd412e8":"markdown","828994f5":"markdown","d84854da":"markdown","ab7e3997":"markdown"},"source":{"cb1bf57b":"from warnings import filterwarnings\nfilterwarnings(action='ignore')\n\nimport numpy as np\nimport pandas as pd\npd.set_option(\"display.max_columns\", None)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB, BernoulliNB, MultinomialNB\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, ExtraTreesClassifier\n\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\nimport pickle","06a5e263":"df = pd.read_csv(\"..\/input\/iris-flower-dataset\/IRIS.csv\")","b8a1064e":"df.head(4)","09f9602b":"print(f\"Dataset have {df.shape[0]} rows and {df.shape[1]} columns\")","d6d43f83":"df.isna().sum()","a41170d2":"plt.figure(figsize=(10, 6))\nax = sns.countplot(x=\"species\", data=df)\n\nplt.xlabel(\"Species\", fontsize=14)\nplt.ylabel(\"Count\", fontsize=14)\nplt.title(\"Species vs count\", fontsize=16)\nplt.show()","54e64b4c":"def get_target(val):\n    res = ''\n    if val == 'Iris-setosa':\n        res = 1\n    elif val == 'Iris-versicolor':\n        res = 2\n    elif val == 'Iris-virginica':\n        res = 3\n    return res\n\n\ndf['target'] = df['species'].apply(get_target)","8379f422":"df.head(2)","e7d014c7":"features = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']\n\nfor col in features:\n    plt.figure(figsize=(10, 6))\n    sns.distplot(df[col])\n    plt.title(\"Distribution of \"+col, fontsize=16)\n    plt.show()","f01e5892":"plt.figure(figsize=(10, 10))\nsns.heatmap(df.drop(columns=['species']).corr(), fmt='.2f', annot=True)\n\nplt.show()","350ec7df":"X, y = df.drop(columns=['species', 'target']), df['species']","59a09fd4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.25, stratify=y)","5f15e6d0":"scaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test  = scaler.transform(X_test)","4ee0bcde":"label_enc = LabelEncoder()\nlabel_enc.fit(y_train)\n\ny_train = label_enc.transform(y_train)\ny_test = label_enc.transform(y_test)","9bfd3173":"def cvs(clf, name, c=5):\n    res =  cross_val_score(clf, X, y, cv=c)\n    _data = {}\n    _data['algo'] = name\n    _data['mean'] = res.mean()\n    _data['std'] = res.std()\n    return _data","2dc1082b":"scores = []\n\nlr = LogisticRegression()\nknn = KNeighborsClassifier()\ngnb = GaussianNB()\nbnb = BernoulliNB()\nmnb = MultinomialNB()\nrfc = RandomForestClassifier()\nabc = AdaBoostClassifier()\netc = ExtraTreesClassifier()\nxgb = XGBClassifier()\nlgc = LGBMClassifier()\n\nscores.append(cvs(lr, 'lr'))\nscores.append(cvs(knn, 'knn'))\nscores.append(cvs(gnb, 'gnb'))\nscores.append(cvs(bnb, 'bnb'))\nscores.append(cvs(mnb, 'mnb'))\nscores.append(cvs(rfc, 'rfc'))\nscores.append(cvs(abc, 'abc'))\nscores.append(cvs(etc, 'etc'))\nscores.append(cvs(xgb, 'xgb'))\nscores.append(cvs(lgc, 'lgc'))","6633fc03":"df_algo = pd.DataFrame.from_records(scores)\ndf_algo = df_algo.sort_values(by=['std'])\n\nprint(df_algo)","a79a92c7":"sns.set_style(\"white\")\nfig = plt.figure(figsize=(24, 12))\n\nax1 = sns.pointplot(x=df_algo.algo.tolist(), y=df_algo[\"mean\"], markers=['o'], linestyles=['-'], color='red')\nfor i, score in enumerate(df_algo[\"mean\"].tolist()):\n    ax1.text(i, score + 0.002, '{:.2f}'.format(score), horizontalalignment='left', fontsize=24, color='black', weight='semibold')\n\nax2 = sns.pointplot(x=df_algo.algo.tolist(), y=df_algo[\"std\"], markers=['o'], linestyles=['-'])\nfor i, score in enumerate(df_algo[\"std\"].tolist()):\n    ax2.text(i, score + 0.002, '{:.6f}'.format(score), horizontalalignment='left', fontsize=20, color='black', weight='semibold')\n\n\nplt.title('Scores of Models', fontsize=30)\nplt.xticks(fontsize=24)\nplt.yticks(fontsize=24)\nplt.show()","7cf22f66":"rfc = RandomForestClassifier()\nrfc.fit(X_train, y_train)\n\nprint(rfc.score(X_train, y_train), rfc.score(X_test, y_test))","21f5cade":"ypred = rfc.predict(X_test)\nprint(classification_report(y_test, ypred))\nprint(\"\\n\\n\")\nprint(confusion_matrix(y_test, ypred))","35d59f77":"# Save the Modle to file in the current working directory\nmodel_filename = \".\/model.pkl\"  \nlabel_enc_filename = \".\/label_encoder.obj\"\nscaler_filename = \".\/scaler.obj\"\n\nwith open(model_filename, 'wb') as file_model:  \n    pickle.dump(rfc, file_model)\n    \nwith open(label_enc_filename, 'wb') as file_enc:  \n    pickle.dump(label_enc, file_enc)\n    \nwith open(scaler_filename, 'wb') as file_scaler:  \n    pickle.dump(scaler, file_scaler)","f9bf83fd":"# Load the Model back from file\nwith open(model_filename, 'rb') as file_model:  \n    model = pickle.load(file_model)\n\n\n# Load the Encoder back from file\nwith open(label_enc_filename, 'rb') as file_enc:  \n    lblencoder = pickle.load(file_enc)\n\n    \n# Load the Scaler back from file\nwith open(scaler_filename, 'rb') as file_scaler:  \n    scaler = pickle.load(file_scaler)","cbb27659":"y_testpred = rfc.predict(X_test)\n\nprint(classification_report(y_test, y_testpred))\nprint(confusion_matrix(y_test, y_testpred))","b919351c":"### Correlation plot","0b27377b":"### Let's check for na values","f431675d":"### Scale data","f67805d6":"### As you can see Randomforest Classifier have 0.02494 standard deviation and 97% accuracy","9e675036":"### Create function for cross-validation","1bd6f4ad":"### Load model, scaler, and label encoder from file","32fc379e":"### Encode labels","4a57e5a4":"### Save model, scaler, and label encoder","9e2626cb":"### Create Train, test data","6d710d00":"### Plot performance of all algos","da97e094":"#### There is no null values in dataset","e0f8c4f8":"### Distribution of Features","7a2251a6":"### Create random Forest classifier","0cd412e8":"## Datasets Distribution according to species","828994f5":"### Load data","d84854da":"### Classification report","ab7e3997":"### separate features, target"}}