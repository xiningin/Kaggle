{"cell_type":{"1a703c5c":"code","01fe2096":"code","2c2361e8":"code","d86db819":"code","55998d4e":"code","ffb44941":"code","bdb8f14c":"code","86ef9256":"code","625b1de8":"code","c4059998":"code","9ec4ebb2":"code","a8364448":"code","fa1a1c24":"code","6bc437e4":"code","c9ec824e":"code","47b28ab0":"code","6165bab6":"code","22d6199e":"code","2e59abbf":"code","b4e7e92f":"code","8860619e":"code","14e603c7":"code","21fd5200":"code","7d70c644":"code","4b8124fe":"code","c046eb41":"code","4a399112":"code","ca0603f1":"code","0d3275c9":"code","6511b537":"code","c19c52dc":"code","c44222f8":"code","87e768ba":"code","ee06009a":"code","9195fb69":"code","e6da7cf6":"code","02531fa1":"code","1c117438":"code","3b06ce20":"code","a7e170e8":"code","48068535":"code","03ca65ff":"code","dfbe199c":"code","e9db83ef":"code","e6501ca9":"code","cdd39a25":"code","3347250a":"code","dfc46c3a":"code","cae8cd3f":"code","e7ba420b":"code","1a43e678":"code","8cedb88c":"code","2b77de1b":"code","7a97268b":"code","8656571d":"code","222704f8":"code","4c0562b9":"code","bed535bd":"code","cf2b65f5":"code","c5e492b5":"code","6b22f91c":"code","f588a446":"code","aa89f457":"code","b9d4d1a2":"code","6642f168":"code","691c5ab6":"code","bd81a624":"code","5876b385":"code","156584ea":"code","a726061f":"code","b21df216":"code","426d7a7d":"code","17fbb0e9":"code","26b474ee":"markdown","0254a1a7":"markdown","3f6b5990":"markdown","0939a7d3":"markdown","0273f693":"markdown","ba9d2f68":"markdown","d6de867f":"markdown","07049ccb":"markdown","9570ff86":"markdown","58f7dac1":"markdown","095d3a4e":"markdown","331f2414":"markdown","75d4cc8b":"markdown","c7b10c59":"markdown","21c3498c":"markdown","75e16ed5":"markdown","34450f63":"markdown","3d2614b4":"markdown","d1faefd2":"markdown","eae2abd0":"markdown","fd485ade":"markdown","3865cfaf":"markdown","f3b1ca54":"markdown","3e388a87":"markdown","5df2f401":"markdown","fb0e977c":"markdown","7de21fcf":"markdown","5d5baa03":"markdown","5cda3c56":"markdown","a6fcbe24":"markdown","5885c4b6":"markdown","8e7dfbf7":"markdown"},"source":{"1a703c5c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nplt.style.use('seaborn')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01fe2096":"pd.set_option('display.max_columns', 40)","2c2361e8":"data1 = pd.read_csv('..\/input\/ecommerce-fraud-data\/Customer_DF (1).csv')\ndata2= pd.read_csv('..\/input\/ecommerce-fraud-data\/cust_transaction_details (1).csv')","d86db819":"data1.head()","55998d4e":"data2.head()","ffb44941":"data1.shape ,data2.shape ","bdb8f14c":"data1.info()","86ef9256":"data2.info()","625b1de8":"data1.duplicated().any()","c4059998":"data2.duplicated().any()","9ec4ebb2":"data1.isna().any()","a8364448":"data2.isna().any()","fa1a1c24":"## See the difference email in data1 and data2\ndata1['customerEmail'].nunique() , data2['customerEmail'].nunique()","6bc437e4":"sns.countplot(data2['paymentMethodType'],data = data2)\nax = plt.gca()\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=12, ha='center', va='bottom')\nplt.show()","c9ec824e":"sns.countplot(x='paymentMethodType',hue='orderState',data = data2)\nax = plt.gca()\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=12, ha='center', va='bottom')\nplt.show()","47b28ab0":"plt.figure(figsize=(15,5))\nsns.countplot(x='paymentMethodProvider',hue = 'paymentMethodRegistrationFailure',data=data2)\nplt.legend (['Success','Fail'])\nax = plt.gca()\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    height = np.nan_to_num(p.get_height(), 0)\n    ax.text(p.get_x()+0.2, p.get_y() + height, '%d' % height, \n            fontsize=12, ha='center', va='bottom')\n## tambahkan prameter angka\nplt.show()","6165bab6":"plt.figure(figsize=(15,5))\nsns.countplot(x = 'No_Payments',hue = 'Fraud',data=data1)\nax = plt.gca()\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    height = np.nan_to_num(p.get_height(), 0)\n    ax.text(p.get_x()+0.2, p.get_y() + height, '%d' % height, \n            fontsize=12, ha='center', va='bottom')\n## tambahkan prameter angka\nplt.show()","22d6199e":"sns.displot(data2['transactionAmount'])","2e59abbf":"data2[data2['transactionAmount'] > 100]","b4e7e92f":"data1[data1['customerEmail']=='uguzman@yahoo.com']['Fraud']","8860619e":"sns.countplot(x= 'Fraud',data=data1)\nax = plt.gca()\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    height = np.nan_to_num(p.get_height(), 0)\n    ax.text(p.get_x()+0.4, p.get_y() + height, '%d' % height, \n            fontsize=15, ha='center', va='bottom')\nplt.show()","14e603c7":"final = data1[data1['customerEmail'].isin(data2['customerEmail'])== True].reset_index(drop=True)\nfinal.shape","21fd5200":"final.head()","7d70c644":"final.drop('Unnamed: 0',axis = 1, inplace = True)","4b8124fe":"No_transactionsFail = []\nfor i in range(0,143):\n    s=0\n    for j in range(0,623):\n        if(final['customerEmail'][i]==data2['customerEmail'][j]):\n            s += data2['transactionFailed'][j]\n    No_transactionsFail.append(s)\nfinal['No_transactionsFail'] = No_transactionsFail","c046eb41":"Total_transaction_amt = []\nfor i in range(0,143):\n    s=0\n    for j in range(0,623):\n        if(final['customerEmail'][i]==data2['customerEmail'][j]):\n            s += data2['transactionAmount'][j]\n    Total_transaction_amt.append(s)   \nfinal['Total_transaction_amt'] = Total_transaction_amt","4a399112":"paymentRegFailure = []\nfor i in range(0,143):\n    s=0\n    for j in range(0,623):\n        if(final['customerEmail'][i]==data2['customerEmail'][j]):\n            s += data2['paymentMethodRegistrationFailure'][j]\n    paymentRegFailure.append(s)   \nfinal['PaymentRegFail'] = paymentRegFailure","ca0603f1":"def col_make(column_name,category):\n    array = []\n    for i in range(0,143):\n        s=0\n        for j in range(0,623):\n            if(final['customerEmail'][i]==data2['customerEmail'][j]):\n                if data2[column_name][j]==category:\n                    s+=1\n        array.append(s)\n    return array ","0d3275c9":"PaypalPayments = col_make('paymentMethodType','paypal')\nApplePayments = col_make('paymentMethodType','apple pay')\nBitcoinPayments = col_make('paymentMethodType','bitcoin')\nCardPayments = col_make('paymentMethodType','card')\n\nfinal['PaypalPayments']= PaypalPayments\nfinal['ApplePayments']= ApplePayments\nfinal['CardPayments']= CardPayments\nfinal['BitcoinPayments']= BitcoinPayments","6511b537":"OrdersFulfilled = col_make('orderState','fulfilled')\nOrdersFailed =  col_make('orderState','failed')\nOrdersPending = col_make('orderState','pending')\n\nfinal['OrdersFulfilled'] = OrdersFulfilled\nfinal['OrdersPending'] = OrdersPending\nfinal['OrdersFailed'] = OrdersFailed","c19c52dc":"JCB_16 = col_make('paymentMethodProvider','JCB 16 digit')\nAmericanExp = col_make('paymentMethodProvider','American Express')\nVISA_16 =  col_make('paymentMethodProvider','VISA 16 digit')\nDiscover =  col_make('paymentMethodProvider','Discover')\nVoyager = col_make('paymentMethodProvider','Voyager')\nVISA_13 = col_make('paymentMethodProvider','VISA 13 digit')\nMaestro = col_make('paymentMethodProvider','Maestro')\nMastercard = col_make('paymentMethodProvider','Mastercard')\nDC_CB =col_make('paymentMethodProvider','Diners Club \/ Carte Blanche')\nJCB_15= col_make('paymentMethodProvider','JCB 15 digit')\n\nfinal['JCB_16'] = JCB_16\nfinal['AmericanExp'] = AmericanExp \nfinal['VISA_16'] = VISA_16 \nfinal['Discover'] = Discover\nfinal['Voyager'] = Voyager \nfinal['VISA_13'] = VISA_13\nfinal['Maestro'] = Maestro \nfinal['Mastercard'] = Mastercard\nfinal['DC_CB'] = DC_CB \nfinal['JCB_15'] = JCB_15","c44222f8":"Trns_fail_order_fulfilled = []\nfor i in range(0,143):\n    s=0\n    for j in range(0,623):\n        if(final['customerEmail'][i]==data2['customerEmail'][j]):\n            if (data2['orderState'][j]=='fulfilled') & (data2['transactionFailed'][j]==1):\n                s+=1\n    Trns_fail_order_fulfilled.append(s)\nfinal['Trns_fail_order_fulfilled'] = Trns_fail_order_fulfilled","87e768ba":"final.head()","ee06009a":"Duplicate_IP = []\nfor i in range(0,143):\n    s=0\n    for j in range(0,143):\n        if(final['customerIPAddress'][i]==final['customerIPAddress'][j]):\n            s+=1\n    s-=1        \n    Duplicate_IP.append(s)\nfinal['Duplicate_IP'] = Duplicate_IP","9195fb69":"Duplicate_Address = []\nfor i in range(0,143):\n    s=0\n    for j in range(0,143):\n        if(final['customerBillingAddress'][i]==final['customerBillingAddress'][j]):\n            s+=1\n    s-=1        \n    Duplicate_Address.append(s)\nfinal['Duplicate_Address']=Duplicate_Address","e6da7cf6":"final = pd.get_dummies(final,columns=['Fraud'],prefix=['Fraud'],drop_first=True)\nfinal = final.rename(columns={\"Fraud_True\": \"Fraud\"})\nfinal.head()","02531fa1":"sns.countplot(x= 'Fraud',data=final)\nax = plt.gca()\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    height = np.nan_to_num(p.get_height(), 0)\n    ax.text(p.get_x()+0.4, p.get_y() + height, '%d' % height, \n            fontsize=15, ha='center', va='bottom')\nplt.show()","1c117438":"final[final['Duplicate_IP']>0]","3b06ce20":"final[final['Duplicate_Address']>0]","a7e170e8":"sns.countplot(x = final['OrdersFulfilled'], hue = final['Fraud'])\nplt.show()","48068535":"corr = final.corr()\ncorr2 = corr.iloc[-1:,:]\n\nplt.figure(figsize=(20, 5))\nax = sns.heatmap(corr2, annot=True, vmin=-1, vmax=1, center=0)\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nplt.title('Heatmap Correlation for fraud')\nplt.show()","03ca65ff":"x = final.drop(['customerEmail','customerPhone', 'customerDevice', 'customerIPAddress',\n       'customerBillingAddress','Fraud'], axis=1)\ny = final['Fraud']","dfbe199c":"from sklearn.model_selection import train_test_split","e9db83ef":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","e6501ca9":"x_train.shape","cdd39a25":"x_test.shape","3347250a":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, plot_confusion_matrix\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,roc_auc_score\nfrom sklearn.model_selection import GridSearchCV , RandomizedSearchCV","dfc46c3a":"Lr_model = LogisticRegression(solver='liblinear')\nLr_model.fit(x_train,y_train)","cae8cd3f":"y_pred_lr= Lr_model.predict(x_test)","e7ba420b":"print(classification_report(y_test, y_pred_lr))\nsns.heatmap(confusion_matrix(y_test, y_pred_lr), annot = True)\nplt.show()","1a43e678":"test_error_rate=[]\nfor k in range(1,30):\n    knn_midel=KNeighborsClassifier(n_neighbors=k)\n    knn_midel.fit(x_train,y_train)\n    y_p_test=knn_midel.predict(x_test)\n    test_error=1-accuracy_score(y_test,y_p_test)\n    test_error_rate.append(test_error)","8cedb88c":"plt.figure(figsize=(12,6))\nplt.plot(range(1,30),test_error_rate,label='test_error')\nplt.legend()\nplt.xlabel('k Value')\nplt.ylabel('Error')\nplt.show()","2b77de1b":"knn_model = KNeighborsClassifier(n_neighbors = 6)\nknn_model = knn_model.fit(x_train,y_train)","7a97268b":"y_pred_knn = knn_model.predict(x_test)","8656571d":"print(classification_report(y_test, y_pred_knn))\nsns.heatmap(confusion_matrix(y_test, y_pred_knn), annot = True)","222704f8":"svc = SVC()\nsvc = svc.fit(x_train, y_train)\ny_pred_svc = svc.predict(x_test)","4c0562b9":"print(classification_report(y_test, y_pred_svc))\nsns.heatmap(confusion_matrix(y_test, y_pred_svc), annot = True)","bed535bd":"model_rf = RandomForestClassifier()\nmodel_rf = model_rf.fit(x_train, y_train)\ny_pred_rd = model_rf.predict(x_test)","cf2b65f5":"print(classification_report(y_test, y_pred_rd))\nsns.heatmap(confusion_matrix(y_test, y_pred_rd), annot = True)","c5e492b5":"accuracy, precision, recall, roc = [],[],[],[]\npredictions = [y_pred_rd,y_pred_knn,y_pred_svc,y_pred_lr]\n\n               \nfor i in range (len(predictions)):\n    accuracy.append(accuracy_score(y_test, predictions[i]))\n    precision.append(precision_score(y_test, predictions[i]))\n    recall.append(recall_score(y_test, predictions[i]))\n    roc.append(roc_auc_score(y_test, predictions[i]))\n\ncompare = pd.DataFrame ({'Accuracy': accuracy, 'Precision': precision, 'Recall': recall, 'ROC_score':roc}, index=['rf','knn',\"svm\",'lr'])\ncompare.sort_values('Accuracy', ascending=False)","6b22f91c":"model_params = {\n     'svm': {\n        'model': SVC(),\n        'params' : {\n            'C' : [1.0, 2.0, 4.0, 6.0, 8.0, 10.0],\n            'kernel': ['rbf'],\n            'gamma' : ['scale', 'auto']\n        }  \n    },\n    'knn': {\n        'model' : KNeighborsClassifier(),\n        'params' : {\n            'n_neighbors' : [i for i in range(1,50,1)],\n            'weights' : ['uniform', 'distance'],\n            'algorithm' : ['auto', 'ball_tree', 'kd_tree', 'brute'],\n            'n_jobs' : [-1]   \n        }  \n    },\n    'random_forest': {\n        'model': RandomForestClassifier(),\n        'params' : {\n            'n_estimators': [i for i in range(1,100,5)],\n            'criterion' : ['gini', 'entropy'],\n            'max_features' : ['auto', 'sqrt', 'log2'],\n            'n_jobs' : [-1]\n        }\n    },\n    'logistic_regression' : {\n        'model': LogisticRegression(),\n        'params': {\n            'C': [1.0, 2.0, 4.0, 6.0, 8.0, 10.0],\n            'penalty' : ['l1', 'l2', 'elasticnet'],\n            'solver' : ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n            'multi_class' : ['auto', 'ovr', 'multinomial'],\n            'n_jobs' : [-1]\n        }\n    }\n}","f588a446":"%%time\nscores = []\n\nfor model_name, mp in model_params.items():\n    clf =  GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)\n    clf.fit(x_train, y_train)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\n    \ndata = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndata","aa89f457":"%%time\nscores = []\n\nfor model_name, mp in model_params.items():\n    clf_random =  RandomizedSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)\n    clf_random.fit(x_train, y_train)\n    scores.append({\n        'model': model_name,\n        'best_score': clf_random.best_score_,\n        'best_params': clf_random.best_params_\n    })\n    \ndata1 = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndata1","b9d4d1a2":"data['best_params'][2]","6642f168":"model = RandomForestClassifier(n_jobs = -1, n_estimators = 16, max_features = 'auto', criterion = 'gini')","691c5ab6":"model.fit(x_train, y_train)","bd81a624":"importance = model.feature_importances_","5876b385":"kolom = list(x.columns)\nkolom","156584ea":"df_imp = pd.DataFrame({'columns' : kolom,\n                      'Importance' : importance})","a726061f":"df_imp","b21df216":"df_imp.set_index('columns').sort_values('Importance',ascending=False\n                                       ).plot(kind='bar')\nplt.show()","426d7a7d":"df_imp['persen'] = round(df_imp['Importance']*100,2)","17fbb0e9":"df_imp.sort_values('persen',ascending=False)","26b474ee":"### which payment status appears most often??","0254a1a7":"## Machine Learning","3f6b5990":"## Conclusion \n\n- There are 2 variables that have the most influence in determining fraud or not , that is Total Transaction Amount and Number of Payment\n- This model will be more perfect if more data is trained","0939a7d3":"## KNN","0273f693":"we drop columns that have no effect","ba9d2f68":"There are 4 customers who have the same \"IP Address\" and it is impossible for one device to have the same IP address, so it has to be fraudulent.","d6de867f":"we can see that if the Fulfilled Order Amount is greater than 8 then the transaction is has to be \"Fraud\"","07049ccb":"## Feature Engineering\n\nwe join the data2 with the data1 because we want to see a pattern for fraud","9570ff86":"### Result \nif no of payment more than 4 is Fraud","58f7dac1":"## Exploratory Data Analysis (EDA)","095d3a4e":"### Create variable target","331f2414":"## Comparasion fraud & non fraud transactions","75d4cc8b":"### Total number of payments per Fraud Transactions","c7b10c59":"There are 3 transactions from different customers but have the same customerBillingAddress, can be done by the same customer","21c3498c":"### Import Dataset","75e16ed5":"### Data Cleaning","34450f63":"### Logistic Regresion","3d2614b4":"### which payment providers the most 'failure' ???","d1faefd2":"### Result\nThere is 1 transaction above 100 USD and also is Fraud","eae2abd0":"## Distribution of Transaction Amount","fd485ade":"### Which Payment Methods that the most use??","3865cfaf":"## Random Forest","f3b1ca54":"### Check Missing Value","3e388a87":"## Split, Train, Test Data","5df2f401":"### Result :\n- Payment Method that the most use is card\n- For other payment methods are relatively the same in use","fb0e977c":"## RandomizedSearchCV","7de21fcf":"The correlation formed between fraud and other variables tends to be not strong, because the data is too little","5d5baa03":"## GridSearchCV","5cda3c56":"## SVM","a6fcbe24":"## Data Visualization","5885c4b6":"### Import Library","8e7dfbf7":"# Dataset Fraud E-Commerce"}}