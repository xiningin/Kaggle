{"cell_type":{"ea35ae2c":"code","0fcdd838":"code","b68e64fc":"code","72eae1ca":"code","f4bb4bd9":"code","e662410c":"code","3d694a1e":"code","5451ff63":"code","86811d33":"code","958ee740":"code","e30efa43":"code","e0756f56":"markdown","47347f2d":"markdown","f9f50071":"markdown","555c27b3":"markdown","dc82e28f":"markdown"},"source":{"ea35ae2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfrom csv import reader\n\n#-- function to get dataset\ndef get_dataset(dataset_file):\n    opened_file = open(dataset_file, encoding='UTF-8')\n    read_file = reader(opened_file)\n    return list(read_file)\n\n\n#-- lets get apple store data\nios_dataset = get_dataset('\/kaggle\/input\/app-store-apple-data-set-10k-apps\/AppleStore.csv')\nios_header = ios_dataset[0]\nios = ios_dataset[1:]\n","0fcdd838":"#-- function to explore given dataset\ndef explore_data(dataset, start, end, rows_and_columns=False):\n    dataset_slice = dataset[start:end]\n    for row in dataset_slice:\n        print(row)\n        print('\\n')  # adds new line after every row\n    if rows_and_columns:\n        print('Number of Rows :', len(dataset))\n        print('Number of Columns :', len(dataset[0]))","b68e64fc":"print(ios_header)\nexplore_data(ios,0, 3, True)","72eae1ca":"#-- lets be smart about it and remove all the rows which doesn't match \n#-- header length\ndef remove_dirty_rows(dataset, header, counter=0):\n    for row in dataset:\n        if len(row) != len(header):\n            del dataset[counter]\n        counter += 1\n    return dataset\n\nios = remove_dirty_rows(ios,ios_header)","f4bb4bd9":"def is_this_string_non_english(string):\n    non_ascii = 0\n    for character in string:\n        if ord(character) > 127:\n            non_ascii += 1\n    if non_ascii > 3:\n        return False\n    else:\n        return True\n\n        \nprint(is_this_string_non_english('Instagram'))\nprint(is_this_string_non_english('\u7231\u5947\u827aPPS -\u300a\u6b22\u4e50\u98822\u300b\u7535\u89c6\u5267\u70ed\u64ad'))\nprint(is_this_string_non_english('Docs To Go\u2122 Free Office Suite'))\nprint(is_this_string_non_english('Instachat \ud83d\ude1c'))","e662410c":"\ndef get_english_apps(dataset):\n    english_apps = []\n    non_english_apps = []\n    for row in dataset:\n        if is_this_string_non_english(row[0]):\n            english_apps.append(row)\n        else:\n            non_english_apps.append(row)\n    return english_apps, non_english_apps\n\n\nios_english = []\nfor app in ios:\n    name = app[1]\n    if is_this_string_non_english(name):\n        ios_english.append(app)\n\n(ios_english, ios_non_english) = get_english_apps(ios)\n\n\nprint('\\n')\nexplore_data(ios_english, 0, 3, True)","3d694a1e":"def freq_table(dataset, index):\n    table = {}\n    total = 0\n    \n    for row in dataset:\n        total += 1\n        value = row[index]\n        if value in table:\n            table[value] += 1\n        else:\n            table[value] = 1\n    \n    table_percentages = {}\n    for key in table:\n        percentage = (table[key] \/ total) * 100\n        table_percentages[key] = percentage \n    \n    return table_percentages\n\n\ndef display_table(dataset, index):\n    table = freq_table(dataset, index)\n    table_display = []\n    for key in table:\n        key_val_as_tuple = (table[key], key)\n        table_display.append(key_val_as_tuple)\n        \n    table_sorted = sorted(table_display, reverse = True)\n    for entry in table_sorted:\n        print(entry[1], ':', entry[0])\n    ","5451ff63":"display_table(ios_english,-5)","86811d33":"genres_ios = freq_table(ios_english, -5)\n\nfor genre in genres_ios:\n    total = 0\n    len_genre = 0\n    for app in ios_english:\n        genre_app = app[-5]\n        if genre_app == genre:            \n            n_ratings = float(app[5])\n            total += n_ratings\n            len_genre += 1\n    avg_n_ratings = total \/ len_genre\n    print(genre, ':', avg_n_ratings)","958ee740":"for app in ios_english:\n    if app[-5] == 'Navigation':\n        print(app[1], ':', app[5]) # printing name and number of ratings","e30efa43":"for app in ios_english:\n    if app[-5] == 'Reference':\n        print(app[1], ':', app[5])","e0756f56":"# Cleaning Duplicated rows\n\n    There are some rows which have been duplicated in this dataset, which means if we don't remove those rows then it will affect our confidence level in clean data. \n    In next step we will be looking at techniques where we will first print some of these duplicated rows and apps and later stage we will use the most recent row or row which makes more sense","47347f2d":"Aim of this project is to identify what kind of apps company \nshould focus on building. We will be analysing given dataset to\nextract the information which will provide clean data which will demonstrate what kind of apps will attract more users.\n","f9f50071":"finally finishing the first module and first project","555c27b3":"# Apps Market Analysis for Apple App Store","dc82e28f":"Our goal is to build apps which are free to download and install and which will generate significant revanue. "}}