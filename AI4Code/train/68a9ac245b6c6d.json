{"cell_type":{"befcd345":"code","9b95f528":"code","59c3ec6b":"code","5034da90":"code","1b054499":"code","650282d5":"code","bb17f9a3":"code","9face967":"code","cd37c71d":"code","badd58d4":"code","61e02136":"code","a9d7b87c":"code","a1307650":"code","877bca25":"code","da12391a":"code","f16e4540":"code","0fbbc439":"code","cc959c02":"code","78bcf6fc":"code","04706c36":"code","85d8f425":"code","ae57f514":"code","6c3c5518":"code","53ed141e":"code","bbf9320f":"code","8f656ab3":"code","3caee574":"code","1e00e111":"code","ed98d5c3":"code","1fdb9318":"code","bfeb2951":"code","3c141b76":"code","e354af56":"code","7b841eb7":"code","73eaa7e9":"code","a75ba55b":"code","363847b9":"code","b8ced42b":"code","37cd35a3":"code","4fa3513d":"code","2c941de6":"code","b00f594f":"code","1a40c274":"code","8b465b28":"code","aae2c4ac":"code","c508da40":"code","e35d9a36":"code","ab742cc7":"code","fd99991a":"code","329139b0":"code","a1a0f807":"code","c5d264b1":"code","e3863e70":"code","aede6ad1":"code","41c6c1db":"code","5cdb35f9":"code","39b58d03":"code","927ff141":"code","42b6eb81":"code","11ea7ba7":"code","29d7a2dc":"code","c836a56c":"code","55fca370":"code","40284d51":"code","fbd529ed":"code","314f636e":"code","ece40b42":"code","88e22371":"code","5f1f7920":"code","8a7609b0":"code","94b96117":"code","201b9c14":"code","9201cd52":"code","7153e09d":"code","393d396e":"code","ca376ee4":"code","56b13a50":"code","a63ca45b":"code","f37bfb5f":"code","97afcd3d":"code","b78506f2":"code","cab65cb9":"code","4e13c14d":"code","f8de88aa":"code","5201c848":"code","eb7ab7e5":"code","1a30e8c1":"code","cc142fb5":"code","cf324b97":"code","df7fd874":"code","2da5fbe4":"code","f6a70ed4":"code","4eeff771":"code","9b434bce":"code","e6a60e2e":"code","2b3f00d7":"code","55d4e661":"code","c39723cf":"code","8259c8d4":"code","32645984":"code","0e0359a2":"code","f69b839a":"code","5a28bc6f":"code","a27f782f":"code","0fd34ee8":"code","fd34df4e":"code","5062b0ca":"code","c64921b8":"code","9ce404bd":"code","c5534ebf":"code","f921ab36":"code","541fec4d":"code","c6eb4c34":"code","b15ae5c5":"code","04062b3d":"code","06fa7455":"code","e42f9500":"code","a38bdd41":"code","c502f8aa":"code","2cfdfb6c":"code","63ed5e0a":"code","313e869f":"code","92bcaa23":"code","66a95205":"code","88c1b491":"code","786ac72d":"code","14edfb66":"code","50de0543":"code","c4c966b4":"code","d065cef3":"code","335c8250":"code","5f5abf73":"code","1be94fdd":"code","5b23cb89":"code","0c5534d6":"code","80959b2f":"code","cb7bbbe2":"code","b64561e8":"code","d1e9c43e":"code","034ed330":"code","698a5fa3":"code","ebcc4b9e":"code","6cc7bd1e":"code","9c828ac6":"code","48a9a4fc":"code","04577785":"code","7a4189fc":"code","3bf3a9b4":"code","d26df5ad":"code","76534e47":"code","ae3a34ee":"code","958d705a":"code","3e8b7194":"code","1f9bcf6e":"code","214b959a":"code","8d436a5d":"code","f771637f":"code","6fa33935":"code","75a64af3":"code","64210452":"markdown","f3806b95":"markdown","1c49506d":"markdown","ce2d4c9b":"markdown","1e3f0f23":"markdown","af2898aa":"markdown","a05cbf67":"markdown","c0f0d3c6":"markdown","c0a36951":"markdown","9292e0ad":"markdown","315ce26c":"markdown","3e89c949":"markdown","33a322cf":"markdown","4d29b268":"markdown","3a38b152":"markdown","27495bc1":"markdown","e772ce57":"markdown","aa2e0256":"markdown","376eeec4":"markdown","43e4c18f":"markdown","069cf4f8":"markdown","529b7027":"markdown","f509b85a":"markdown","a1f2d37d":"markdown","294835ad":"markdown","95edfa63":"markdown","2df85d0a":"markdown","c6837add":"markdown","8188a617":"markdown","ca6e3d58":"markdown","5bf58320":"markdown","e70b99e8":"markdown","0c8ed8fd":"markdown","1c056a78":"markdown","62a7f192":"markdown","27803fc5":"markdown","40fb8184":"markdown","f5b39dd1":"markdown","fe77af9a":"markdown","cc8f69e6":"markdown","349e448e":"markdown","b76d837d":"markdown","645c98a8":"markdown","848ffa69":"markdown","65cf91cb":"markdown","55db76bd":"markdown","5d8c1227":"markdown","cb9ba115":"markdown","ada5d5f6":"markdown","f4b5ec24":"markdown","fc0928fe":"markdown","d80b7db1":"markdown","4339cd01":"markdown","9d86fec6":"markdown","0640065a":"markdown","e7a82f82":"markdown","ee9701f6":"markdown","1950573b":"markdown","c0da004d":"markdown","aeeaabed":"markdown","7207932a":"markdown","bb35d33a":"markdown"},"source":{"befcd345":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","9b95f528":"data = pd.read_excel('..\/input\/flight-price\/Data_Train.xlsx')","59c3ec6b":"data.head()","5034da90":"data.shape","1b054499":"data.isnull().any()","650282d5":"data.loc[data[\"Total_Stops\"].isnull()]","bb17f9a3":"#Checking what are the values that the Total_Stops take\ndata[\"Total_Stops\"].value_counts()","9face967":"#Filling the missing value with \"non_stop\"\ndata.loc[data[\"Total_Stops\"].isnull(),\"Total_Stops\"] = \"non-stop\"","cd37c71d":"#Checking missing values again\ndata.isnull().any()","badd58d4":"#Checking missing values in Route\ndata.loc[data[\"Route\"].isnull()]","61e02136":"#Checking what are the values that the Route take\ndata[\"Route\"].value_counts()","a9d7b87c":"#Filling the missing value in Route variable\ndata.loc[data[\"Route\"].isnull(),\"Route\"] = \"DEL \u2192 COK\"","a1307650":"data[\"Total_Stops\"].value_counts()","877bca25":"stops_map = {\"non-stop\": 0,\n             \"1 stop\": 1,\n             \"2 stops\": 2,\n             \"3 stops\": 3,\n             \"4 stops\": 4}","da12391a":"data[\"Total_Stops\"] = data[\"Total_Stops\"].map(stops_map)","f16e4540":"data[\"Total_Stops\"].value_counts()","0fbbc439":"route_df = data[\"Route\"].str.split(\"\u2192\")","cc959c02":"route_df","78bcf6fc":"route_df[100][1:-1]","04706c36":"route_df.head()","85d8f425":"for index in data.index:\n    data.loc[index, \"Source\"] = route_df[index][0].strip()\n    data.loc[index, \"Destination\"] = route_df[index][-1].strip()\n    del route_df[index][0]\n    del route_df[index][-1]","ae57f514":"data.head()","6c3c5518":"route_df.head()","53ed141e":"route_df = route_df.apply(pd.Series)","bbf9320f":"route_df.rename({0:'Stop_1', 1:'Stop_2', 2:'Stop_3', 3:'Stop_4'}, axis = 'columns', inplace = True)","8f656ab3":"route_df.head()","3caee574":"data.drop(labels=['Route'], axis= 'columns', inplace=True)","1e00e111":"new_data = pd.concat([data, route_df], axis =1)","ed98d5c3":"new_data.head()","1fdb9318":"#Converting Departure Time and Duration into datetime format\nnew_data[\"Dep_Time\"] = pd.to_datetime(new_data[\"Date_of_Journey\"]+ ' ' + new_data[\"Dep_Time\"])","bfeb2951":"new_data[\"Dep_Time\"]","3c141b76":"new_data.drop(labels=[\"Date_of_Journey\", \"Arrival_Time\"], axis= 'columns', inplace = True)","e354af56":"new_data.head()","7b841eb7":"#TODO: Convert Duration to proper datetime format using regex and datetime functions\n\n#TODO: Check contents of Additional_Info\n\n#TODO: Seperate Price (y) and reemaing data (X)\n\n#TODO: One Hot Encode these features: 'Airline', 'Additional_Info', 'Stop_<all>'\n\n#Then the data will be ready to be used in any Regression model.","73eaa7e9":"#Finding all numbers in a string\nimport re\nduration_series = new_data[\"Duration\"].str.findall(r'\\d+')","a75ba55b":"duration_series","363847b9":"from datetime import datetime\nfrom datetime import timedelta\nfor i, duration_list in enumerate(duration_series.values):\n    hours = int(duration_list[0])\n    if len(duration_list)==1:\n        mins = 0\n    else:\n        mins = int(duration_list[1])\n        \n    new_data.loc[i, \"Duration\"] = 60*hours + mins","b8ced42b":"new_data.rename(columns={\"Duration\": \"Minutes\"}, inplace = True)","37cd35a3":"new_data.head()","4fa3513d":"new_data[\"Additional_Info\"].value_counts()","2c941de6":"new_data.loc[new_data[\"Additional_Info\"]==\"No Info\", \"Additional_Info\"] = \"No info\"","b00f594f":"new_data.head()","1a40c274":"new_data.groupby('Airline')['Price'].mean().sort_values(ascending=False)","8b465b28":"new_data['Airline'].value_counts()","aae2c4ac":"for col in ['Multiple carriers Premium economy', 'Jet Airways Business', 'Vistara Premium economy','Trujet']:\n    new_data = new_data.drop(new_data.index[new_data.Airline == col],  axis=0)","c508da40":"new_data.Airline.value_counts()","e35d9a36":"new_data.groupby('Airline')['Price'].mean().sort_values(ascending=False)","ab742cc7":"airline_dict = {}\nfor rank, key in enumerate(new_data.groupby('Airline')['Price'].mean().sort_values(ascending=False).keys()):\n    airline_dict[key] = rank+1\nairline_dict","fd99991a":"new_data['Airline'] = new_data['Airline'].replace(airline_dict)","329139b0":"new_data.head()","a1a0f807":"new_data['Month'] = new_data['Dep_Time'].dt.month\nnew_data['Date'] = new_data['Dep_Time'].dt.day\nnew_data['Hour'] = new_data['Dep_Time'].dt.hour","c5d264b1":"new_data.head()","e3863e70":"new_data.groupby('Source')['Price'].mean()","aede6ad1":"new_data.groupby('Destination')['Price'].mean()","41c6c1db":"new_data.describe()","5cdb35f9":"new_data[\"Total_Stops\"].hist()","39b58d03":"new_data[\"Minutes\"].plot()","927ff141":"new_data[\"Minutes\"].hist()","42b6eb81":"#Less bins => More information lost\n#So let us try to increase bins\nnew_data[\"Minutes\"].hist(bins=30)","11ea7ba7":"new_data[\"Minutes\"].hist(bins=20)","29d7a2dc":"new_data.groupby('Airline')['Price'].mean()","c836a56c":"airline_grouped = new_data.groupby('Airline')['Price'].mean()\n\nairline_grouped.plot.bar()","55fca370":"#Plotting again, without Jet Airways Business","40284d51":"new_data['Dep_Time'] = pd.to_datetime(new_data['Dep_Time'])","fbd529ed":"new_data.groupby(new_data[\"Dep_Time\"].dt.month)[\"Price\"].mean()","314f636e":"month_average = new_data.groupby(new_data[\"Dep_Time\"].dt.month)[\"Price\"].mean()\nmonth_average.index = [\"January\", \"March\", \"April\", \"May\", \"June\", \"September\", \"December\"]\nmonth_average.plot.bar()","ece40b42":"new_data.groupby(new_data[\"Dep_Time\"].dt.weekday_name)[\"Price\"].mean()","88e22371":"days = [\"Monday\",\"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\nweekday_grouped = new_data.groupby(new_data[\"Dep_Time\"].dt.weekday_name)[\"Price\"].mean().reindex(days)\nweekday_grouped.plot.bar()","5f1f7920":"new_data.groupby(new_data[\"Dep_Time\"].dt.day)[\"Price\"].mean()","8a7609b0":"day_grouped = new_data.groupby(new_data[\"Dep_Time\"].dt.day)[\"Price\"].mean()\nday_grouped.plot.bar()","94b96117":"time_grouped = new_data.groupby(new_data[\"Dep_Time\"].dt.hour)['Price'].mean()","201b9c14":"time_grouped.plot.bar()","9201cd52":"new_data.groupby('Additional_Info')['Price'].mean()","7153e09d":"info_grouped = new_data.groupby('Additional_Info')['Price'].mean()\ninfo_grouped.plot.bar()","393d396e":"new_data[\"Minutes\"].values.max()","ca376ee4":"new_data[\"Minutes\"].values.min()","56b13a50":"NUM_BINS = (2860 - 75)\/\/300\nbins = np.linspace(75,2860,NUM_BINS) #Bins in the interval of 5 hours (300 mins)\nhours_df = pd.cut(new_data['Minutes'], bins)","a63ca45b":"hours_df","f37bfb5f":"new_data.groupby(hours_df)['Price'].mean()","97afcd3d":"new_data.groupby(hours_df)['Price'].mean().plot.bar()","b78506f2":"new_data[[\"Minutes\", \"Price\"]].corr()","cab65cb9":"source_grouped = new_data.groupby('Source')[\"Price\"].mean()\nsource_grouped.plot.bar()","4e13c14d":"dest_grouped = new_data.groupby('Destination')[\"Price\"].mean()\ndest_grouped.plot.bar()","f8de88aa":"new_data.head()","5201c848":"#Creating a new dataframe\ntemp_df = new_data.copy()\ntemp_df[\"Dep_Day\"] = new_data[\"Dep_Time\"].dt.weekday.values\ntemp_df[\"Dep_Month\"] = new_data[\"Dep_Time\"].dt.month.values\ntemp_df[\"Dep_Hour\"] = new_data[\"Dep_Time\"].dt.hour.values\ntemp_df.drop(labels=[\"Dep_Time\"], axis = 'columns', inplace = True)\ntemp_df.head()","eb7ab7e5":"temp_df.loc[temp_df[\"Additional_Info\"] == \"No info\", \"Additional_Info\"] = np.nan","1a30e8c1":"temp_df.head()","cc142fb5":"temp_df[\"Dep_Day\"] = np.sin(2*np.pi*new_data[\"Dep_Time\"].dt.day.values\/7)\ntemp_df[\"Dep_Hour\"] = np.sin(2*np.pi*new_data[\"Dep_Time\"].dt.hour.values\/24)\ntemp_df[\"Dep_Month\"] = np.sin(2*np.pi*new_data[\"Dep_Time\"].dt.month.values\/12)\ntemp_df.head()","cf324b97":"temp_df.rename({'Dep_Day':'Dep_Day_sine', 'Dep_Hour': 'Dep_Hour_sine', 'Dep_Month': 'Dep_Month_sine'},\n               axis = 'columns', inplace = True)","df7fd874":"temp_df.head()","2da5fbe4":"from sklearn.preprocessing import OneHotEncoder","f6a70ed4":"categorical_features = ['Airline', 'Source', 'Destination','Additional_Info', 'Stop_1', \n                                            'Stop_2', 'Stop_3', 'Stop_4']","4eeff771":"temp_df.head()","9b434bce":"one_hot = pd.get_dummies(temp_df[categorical_features], drop_first=True)","e6a60e2e":"one_hot.head()","2b3f00d7":"one_hot.shape","55d4e661":"one_hot_df = pd.concat([temp_df, one_hot], axis = 1)","c39723cf":"one_hot_df.drop(labels = categorical_features, axis = 'columns', inplace = True)","8259c8d4":"one_hot_df.head()","32645984":"one_hot_df['Price'].hist()","0e0359a2":"#Taking log of prices\none_hot_df['Price'] = np.log(np.log(one_hot_df['Price']))","f69b839a":"one_hot_df['Price'].hist()","5a28bc6f":"#Rescaling Minutes\none_hot_df['Minutes'] \/= one_hot_df['Minutes'].max()","a27f782f":"one_hot_df.head()","0fd34ee8":"y = one_hot_df[\"Price\"].values\nX = one_hot_df.drop(labels= ['Price'], axis = 'columns').values","fd34df4e":"X.shape, y.shape","5062b0ca":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.25, random_state = 2)","c64921b8":"X_train.shape, y_train.shape","9ce404bd":"X_val.shape, y_val.shape","c5534ebf":"from sklearn.metrics import make_scorer","f921ab36":"import math\ndef rmsle(y, y_pred):\n    assert len(y) == len(y_pred)\n    terms_to_sum = [(math.log(y_pred[i] + 1) - math.log(y[i] + 1)) ** 2.0 for i,pred in enumerate(y_pred)]\n    return (sum(terms_to_sum) * (1.0\/len(y))) ** 0.5","541fec4d":"def rmsle_score(y, y_pred):\n    return 1 - rmsle(y, y_pred)","c6eb4c34":"rmsle_scorer = make_scorer(rmsle_score, greater_is_better = True)","b15ae5c5":"from sklearn.ensemble import RandomForestRegressor","04062b3d":"rfg = RandomForestRegressor()","06fa7455":"rfg.fit(X_train, y_train)","e42f9500":"rfg.score(X_val, y_val)","a38bdd41":"rfg.score(X_train, y_train)","c502f8aa":"y_pred = rfg.predict(X_val)","2cfdfb6c":"1 - rmsle(y_val, y_pred)","63ed5e0a":"1 - rmsle(rfg.predict(X_train), y_train)","313e869f":"from sklearn.linear_model import LinearRegression","92bcaa23":"lnr = LinearRegression()","66a95205":"lnr.fit(X_train, y_train)","88c1b491":"lnr.score(X_train, y_train)","786ac72d":"lnr.score(X_val, y_val)","14edfb66":"y_pred = lnr.predict(X_val)","50de0543":"1 - rmsle(y_val, y_pred)","c4c966b4":"1 - rmsle(lnr.predict(X_train), y_train)","d065cef3":"from sklearn.linear_model import Ridge","335c8250":"rdg = Ridge()","5f5abf73":"rdg.fit(X_train, y_train)","1be94fdd":"1 - rmsle(rdg.predict(X_val), y_val)","5b23cb89":"1 - rmsle(rdg.predict(X_train), y_train)","0c5534d6":"from sklearn.linear_model import Lasso","80959b2f":"lasso = Lasso()","cb7bbbe2":"lasso.fit(X_train, y_train)","b64561e8":"1 - rmsle(lasso.predict(X_val), y_val)","d1e9c43e":"1 - rmsle(lasso.predict(X_train), y_train)","034ed330":"from sklearn.svm import SVR","698a5fa3":"svr = SVR()","ebcc4b9e":"svr.fit(X_train, y_train)","6cc7bd1e":"1 - rmsle(svr.predict(X_val), y_val)","9c828ac6":"1 - rmsle(svr.predict(X_train), y_train)","48a9a4fc":"RFnew = RandomForestRegressor(n_estimators=20)","04577785":"RFnew.fit(X_train, y_train)","7a4189fc":"1 - rmsle(RFnew.predict(X_val), y_val)","3bf3a9b4":"1 - rmsle(RFnew.predict(X_train), y_train)","d26df5ad":"RFnew = RandomForestRegressor(n_estimators=100, max_depth = 20,min_samples_split = 15, max_features='sqrt',\n                              min_samples_leaf = 1)\nRFnew.fit(X_train, y_train)","76534e47":"1 - rmsle(RFnew.predict(X_val), y_val)","ae3a34ee":"1 - rmsle(RFnew.predict(X_train), y_train)","958d705a":"param_rf = {'n_estimators':[80,110,140,170], 'max_depth':[17,18,19,20],\n            'min_samples_split':[5,10,20,30,50,80], 'min_samples_leaf':[1,2,3],\n            'max_features':['log2','sqrt','auto']}","3e8b7194":"from sklearn.model_selection import RandomizedSearchCV","1f9bcf6e":"gridRF = RandomizedSearchCV(estimator = RFnew, param_distributions = param_rf, scoring = rmsle_scorer, n_iter = 40)","214b959a":"gridRF.fit(X_train, y_train)","8d436a5d":"gridRF.best_params_","f771637f":"gridRF.score(X_train, y_train)","6fa33935":"gridRF.score(X_val, y_val)","75a64af3":"gridRF.best_score_","64210452":"# Flight Prediction","f3806b95":"### Plotting Airline","1c49506d":"## Training and Validation Set","ce2d4c9b":"**Comments**: <br>\nOnly 9 days data from 6 months given <br>\nThe tickets are booked highest on 3rd","1e3f0f23":"## Making your own scorer: MSLE","af2898aa":"# Final Touchups","a05cbf67":"## Model 1: RandomForestRegression","c0f0d3c6":"**Comments**: <br>\nSunday, Monday and Thursday one of the highest. <br>\nPrices dip from Monday to Wednesday and increases from Friday to Sunday","c0a36951":"## Step 2: Data Formatting","9292e0ad":"**Comment**: Flights leaving from Delhi and CCU have a higher rate in general","315ce26c":"## Can we see any relation with Additional Info?","3e89c949":"### Checking Prices Monthly","33a322cf":"## Cleaning the data","4d29b268":"**Comment: As we can see,**\n- Departure Time and Duration ae well formatted.\n- However, Arrival Time is not well formatted. It would take a lot of time to clean it to make it usable.","3a38b152":"**Comments** The price generally increases with increase in minutes","27495bc1":"- Airline: Nominal Categorical\n- Date_of_Journey: Numerical\n- Source\/Destination\/Route: Nominal Categorical\n- Dep Time\/ Arrival Time\/ Duration : Numerical\n- Total_Stops: Ordinal Categorical\n- Addditional info: Nominal Categorical","e772ce57":"### Comment: Source and Destination are Important Features than Intermediate Stops, hence kept them as seperate features.","aa2e0256":"## Plotting Numerical features\nIt's easier to visualize numerical features","376eeec4":"#### NOTE: The above model was come up with a lot of trials. (Overfits very less)","43e4c18f":"## Performing Grid Search","069cf4f8":"**Comment** : There are 10,683 flight records, and 11 features. <br>\n- Airline: String (Flight company)\n- Date of Journey (Date)\n- Dep Time\/ Arrival Time\/ Duration (Flight time)\n- Source\/Destination\/Route\/ Total Stops (Flight path)\n- Additional info\n- Price (Target feature)\n<br>\n\n**According to me**: <br>\n- Source and Destination is not required. It is covered in Route.\n- The route needs to be converted into meaningful features.\n- Total stops and Route are somewhat related\n- Out of Dep Time\/ Arrival Time and Duration, only two features are important. The third one is dependent on other two.\n- Additional info is mostly a sparse feature","529b7027":"## Model5: SVM Regression","f509b85a":"### Is there a relation between the Day of the ticket booked?","a1f2d37d":"# Data Preparation ends here\n-------------------------","294835ad":"### 2.1 Mapping Ordinal feature: Total Stops","95edfa63":"## Is there any relation between the day of the month the ticket is booked?","2df85d0a":"## Plotting Categorical Features","c6837add":"### Very Important: Days\/Weekday are NOT Categorical nor Numerical\nThey are cyclic statistics","8188a617":"- The **Day (Mon, Tue, Wed, etc)** features affects the prices (graph above)\n- The **Month (Jan, March, etc)** feature also affects the prices","ca6e3d58":"## Is there a relation between the time of the day the ticket is booked?","5bf58320":"**Comments**: Jey Airaways Business has an extremely high price. <br>\nIn airlines feature, Jet Airways Buisness is highly determining of the price of flight","e70b99e8":"### Step 1: Missing values","0c8ed8fd":"**Comments**: Prices dipped in **April**. Highest in **January** <br>\n**IMPORTANT: No data given for February, June, July, August, October and November**","1c056a78":"## Model3: Ridge Regression","62a7f192":"**Minutes feature is highly right skewed with average at 520 minutes**","27803fc5":"**Comment**: Woahh! You can see how it worked as desired! <br>\nYou can find str.split() function in pandas here. <br>","40fb8184":"**Comment**: The minutes and price has a correlation of 0.5","f5b39dd1":"## Last Data Formatting: Splitting Dep_Time into Hour, Day, Month","fe77af9a":"## Most Important: Does Source and Destination matters?","cc8f69e6":"{'n_estimators': 80,\n 'min_samples_split': 5,\n 'min_samples_leaf': 2,\n 'max_features': 'auto',\n 'max_depth': 18}","349e448e":"**Comments**: These are the only numerical features in our dataset","b76d837d":"**NOTE: First we compare the scores with the default settings**","645c98a8":"**Comment**: One of these features is redundant.","848ffa69":"**NOTE**\n- **Numerical** : Line plot\n- **Nominal categorical** : Bar Plot\n- **Ordinal Categorical**: Histogram\n\nSo, you can figure out, why I plotted a histogram for the Total_Stops feature.","65cf91cb":"# Summer Analytics: Stop here","55db76bd":"### Describing the features","5d8c1227":"**Comment**: Wooh! The data looks cleaner","cb9ba115":"### 2.3 Making sense out of Dep_time, Arrival_Time and Duration (One of the toughest task)","ada5d5f6":"**Comment** : We find that there are missing values in **Route** and **Total_Stops**","f4b5ec24":"### 2.2 Making sense out of Source, Destination and Route features","fc0928fe":"## Rescaling","d80b7db1":"**Comment**: Not much can be inferred.","4339cd01":"**Comments**: As we can see, the plot for Minutes is highly noisy. <br>\nSo, we should try to create bins and plot it to de-noise it. <br>\nTherefore, let us try Histogram (**Default bins are 10**)","9d86fec6":"# Visaulizations and Plottings","0640065a":"## Model4: Lasso","e7a82f82":"## Model 2: Linear Regression","ee9701f6":"## Does the minutes of Flight affect the price?","1950573b":"**Comment**: Now, we will split Dep_Time into different columns as: Day, Month and Hour","c0da004d":"### One- Hot Encoding","aeeaabed":"**Comments**: Busines class plays an important role.","7207932a":"## Let's explore RandomForestRegressor a bit","bb35d33a":"### 2.4 Checking Additional_Info"}}