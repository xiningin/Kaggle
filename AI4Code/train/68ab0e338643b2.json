{"cell_type":{"7841d94b":"code","905689d1":"code","07c9d15e":"code","7f6087e6":"code","1591d5d3":"code","e1eec504":"code","6481e4de":"code","c483fc98":"code","33627201":"code","3bf6c685":"code","db57d782":"code","0b3a4804":"code","cca1cb9a":"code","ec7b06d7":"markdown","58822eff":"markdown","1d6fffdc":"markdown","6ac85332":"markdown","ad77a5b6":"markdown","d33d4f22":"markdown","f1f2a123":"markdown","896a2546":"markdown"},"source":{"7841d94b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","905689d1":"import torch\nimport numpy as np\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch import nn\nfrom torchvision import transforms\nimport matplotlib.pyplot as plt\nimport torchvision","07c9d15e":"print(torch.__version__)","7f6087e6":"data_train = pd.read_csv('..\/input\/fashion-mnist_train.csv')\ndata_test = pd.read_csv('..\/input\/fashion-mnist_test.csv')","1591d5d3":"data_train.head()","e1eec504":"class MyDataset(Dataset):\n    '''\n    Build your own dataset\n    '''\n    def __init__(self, data, transform = None):\n        self.fashion_mnist = list(data.values)\n        self.transform = transform\n        label, img = [],[]\n        for one_line in self.fashion_mnist:\n            label.append(one_line[0])\n            img.append(one_line[1:])\n        self.label = np.asarray(label)\n        self.img = np.asarray(img).reshape(-1, IMAGE_SIZE, IMAGE_SIZE, CHANNEL).astype('float32')\n\n    def __getitem__(self, item):\n        label, img = self.label[item], self.img[item]\n        if self.transform is not None:\n            img = self.transform(img)\n\n        return label, img\n\n    def __len__(self):\n        return len(self.label)","6481e4de":"BATCH_SIZE = 50\nLR = 0.005\nNUM_CLASS = 10\nIMAGE_SIZE = 28\nCHANNEL = 1\nTrain_epoch = 5\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\nCLASS_CLOTHING = {0 :'T-shirt\/top',\n                  1 :'Trouser',\n                  2 :'Pullover',\n                  3 :'Dress',\n                  4 :'Coat',\n                  5 :'Sandal',\n                  6 :'Shirt',\n                  7 :'Sneaker',\n                  8 :'Bag',\n                  9 :'Ankle boot'}","c483fc98":"My_transform = transforms.Compose([\n    transforms.ToTensor(),# default : range [0, 255] -> [0.0,1.0]\n])\n\nTrain_data = MyDataset(data_train, transform=My_transform)\nTest_data = MyDataset(data_test, transform=My_transform)\n\nTrain_dataloader = DataLoader(dataset=Train_data,\n                              batch_size = BATCH_SIZE,\n                              shuffle=False\n                              )\nTest_dataloader = DataLoader(dataset=Test_data,\n                              batch_size = BATCH_SIZE,\n                              shuffle=False\n                              )","33627201":"data_iter = iter(Train_dataloader)# at this time I set batch_size = 4\nlabel , img = next(data_iter)\n\ndef imshow(img, title):\n    img = torchvision.utils.make_grid(img)\/255\n    img = img.numpy().transpose([1, 2, 0])\n    plt.imshow(img)\n    if title is not None:\n        plt.title(title)\n\nimshow(img, [CLASS_CLOTHING[x] for x in label.numpy().tolist()])\nplt.show()","3bf6c685":"class My_Model(nn.Module):\n    def __init__(self, num_of_class):\n        super(My_Model, self).__init__()\n        self.layer1 = nn.Sequential(\n            nn.Conv2d(1, 16, kernel_size=5, stride=1, padding=2),\n            nn.BatchNorm2d(16),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2))\n        self.layer2 = nn.Sequential(\n            nn.Conv2d(16, 32, kernel_size=5, stride=1, padding=2),\n            nn.BatchNorm2d(32),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2))\n        self.fc = nn.Linear(7 * 7 * 32, num_of_class)\n\n    def forward(self, x):\n        out = self.layer1(x)\n        out = self.layer2(out)\n        out = out.reshape(out.size(0), -1)\n        out = self.fc(out)\n        return out","db57d782":"def train():\n    model = My_Model(NUM_CLASS).to(device)\n    optimizer = torch.optim.Adam(model.parameters(), lr = LR)\n    criterion = nn.CrossEntropyLoss()\n    for epoch in range(1, Train_epoch + 1):\n        for batch_id, (label, image) in enumerate(Train_dataloader):\n            label, image = label.to(device), image.to(device)\n            output = model(image)\n            loss = criterion(output, label)\n\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n\n            if batch_id % 1000 == 0:\n                print('Loss :{:.4f} Epoch[{}\/{}]'.format(loss.item(), epoch, Train_epoch))\n    return model","0b3a4804":"def test(model):\n    with torch.no_grad():\n        correct = 0\n        total = 0\n        for label , image in Test_dataloader:\n            image = image.to(device)\n            label = label.to(device)\n            outputs = model(image)\n            predicted = torch.argmax(outputs,dim=1)\n            total += label.size(0)\n            correct += (predicted == label).sum().item()\n        print('Test Accuracy of the model on the test images: {} %'.format(100 * correct \/ total))","cca1cb9a":"if __name__ == '__main__':\n    model = train()\n    test(model)","ec7b06d7":"\nAnd then we load the model and see how model act on the test dataset.","58822eff":"It's my first try in kaggle","1d6fffdc":"Now define our model and train ! ","6ac85332":"And now load our data and prepare for train ","ad77a5b6":"**First build your own dataset and read the csv file into it**","d33d4f22":"At this time we can show some images in this Dataloader","f1f2a123":"**Fashion MNIST- CNN Model Prediction using Pytorch**","896a2546":"To begin with , import same necessary third party libraries and parameters"}}