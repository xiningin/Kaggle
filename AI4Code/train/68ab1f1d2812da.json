{"cell_type":{"4ac8ee6a":"code","6ea97d99":"code","944fd2b8":"code","abc39d4e":"code","32a6f0ee":"code","be03a46c":"code","e680f4d6":"code","b7ee4f20":"code","c245abbc":"code","31fd0037":"code","85321006":"code","83171712":"code","2b9fc53d":"code","363d2f84":"code","cafc4921":"code","c94726c8":"code","9a05b3b9":"code","cef50583":"code","e06366a4":"code","b1d5c3e0":"code","5f42374a":"code","ce22f714":"code","26afdae0":"code","1d5c92f1":"code","b1f88467":"code","99706d8e":"code","43b9be27":"code","465d4820":"code","f791d53e":"code","9b5a651c":"code","b07b401c":"code","df4e1424":"code","22ce9162":"code","64f34d08":"code","84fc98e4":"code","f2f1afc6":"markdown","fc3bc7c7":"markdown","290459a9":"markdown","894a27e4":"markdown","820e37c1":"markdown","2d9b24fb":"markdown","1d8f7c15":"markdown","683fcf92":"markdown","26b172d7":"markdown","5d324ff8":"markdown","266b6830":"markdown","9c07af87":"markdown","2c46fcaf":"markdown","ba17b1ba":"markdown","45119fe4":"markdown","e04e4755":"markdown","07dfd1f5":"markdown","61df9e18":"markdown","ffd3c5a2":"markdown","2e1b5a83":"markdown","06a6b7c9":"markdown","ccb933e0":"markdown","ae369378":"markdown","0892c22d":"markdown","53cff497":"markdown","c06a4f27":"markdown"},"source":{"4ac8ee6a":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd","6ea97d99":"train_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","944fd2b8":"# data type and missing values of each column\ntrain_df.info()","abc39d4e":"test_df.info()","32a6f0ee":"# Description of both datasets\ntrain_df.describe()","be03a46c":"test_df.describe()","e680f4d6":"# 1st 5 rows of every column for overview\ntrain_df.head()","b7ee4f20":"test_df.head()","c245abbc":"sns.distplot(train_df['SalePrice'])","31fd0037":"plt.rcParams['figure.figsize']=35,35\ng = sns.heatmap(train_df.corr(),annot=True, fmt = \".1f\")","85321006":"sns.barplot(x='YearBuilt', y='SalePrice', data=train_df)","83171712":"sns.barplot(x='SaleCondition', y='SalePrice', data=train_df)","2b9fc53d":"sns.barplot(x='YrSold', y='SalePrice', data=train_df)\n","363d2f84":"train_df=train_df.drop(\"Id\",axis=1)\ntrain_df=train_df.drop(\"Alley\",axis=1)\ntrain_df=train_df.drop(\"PoolQC\",axis=1)\ntrain_df=train_df.drop(\"Fence\",axis=1)\ntrain_df=train_df.drop(\"MiscFeature\",axis=1)","cafc4921":"test_df=test_df.drop(\"Alley\",axis=1)\ntest_df=test_df.drop(\"PoolQC\",axis=1)\ntest_df=test_df.drop(\"Fence\",axis=1)\ntest_df=test_df.drop(\"MiscFeature\",axis=1)","c94726c8":"train_df[\"LotFrontage\"] = train_df[\"LotFrontage\"].fillna(train_df[\"LotFrontage\"].mean())\ntrain_df[\"MasVnrArea\"] = train_df[\"MasVnrArea\"].fillna(train_df[\"MasVnrArea\"].mean())\ntrain_df[\"GarageYrBlt\"] = train_df[\"GarageYrBlt\"].fillna(2001)","9a05b3b9":"c = (\"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\", \"BsmtFinType2\", \"BsmtCond\", \"BsmtQual\", \"BsmtExposure\", \"MasVnrType\", \"Electrical\", \"FireplaceQu\", \"BsmtFinType1\")\nfor col in c:\n  if train_df[col].dtype == \"object\":\n    train_df[col] = train_df[col].fillna(\"None\")\n\n''' OR\nfor col in (\"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\", \"BsmtFinType2\", \"BsmtCond\", \"BsmtQual\", \"BsmtExposure\", \"MasVnrType\", \"Electrical\", \"FireplaceQu\", \"BsmtFinType1\"):\n  test_df[col] = test_df[col].fillna('None')\n'''","cef50583":"test_df[\"LotFrontage\"] = test_df[\"LotFrontage\"].fillna(test_df[\"LotFrontage\"].mean())\ntest_df[\"MasVnrArea\"] = test_df[\"MasVnrArea\"].fillna(test_df[\"MasVnrArea\"].mean())\ntest_df[\"GarageYrBlt\"] = test_df[\"GarageYrBlt\"].fillna(2001)\ntest_df[\"GarageCars\"] = test_df[\"GarageCars\"].fillna(0)\ntest_df[\"GarageArea\"] = test_df[\"GarageArea\"].fillna(test_df[\"GarageArea\"].mean())\ntest_df[\"BsmtFullBath\"] = test_df[\"BsmtFullBath\"].fillna(0)\ntest_df[\"BsmtHalfBath\"] = test_df[\"BsmtHalfBath\"].fillna(0)\ntest_df[\"BsmtFinSF1\"] = test_df[\"BsmtFinSF1\"].fillna(test_df[\"BsmtFinSF1\"].mean())\ntest_df[\"BsmtFinSF2\"] = test_df[\"BsmtFinSF2\"].fillna(test_df[\"BsmtFinSF2\"].mean())\ntest_df[\"TotalBsmtSF\"] = test_df[\"TotalBsmtSF\"].fillna(test_df[\"TotalBsmtSF\"].mean())\ntest_df[\"BsmtUnfSF\"] = test_df[\"BsmtUnfSF\"].fillna(test_df[\"BsmtUnfSF\"].mean())","e06366a4":"c = (\"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\", \"BsmtFinType2\", \"BsmtCond\", \"BsmtQual\", \"BsmtExposure\", \"MasVnrType\", \"Electrical\",\"MSZoning\",\"Utilities\",\"Exterior1st\",\"Exterior2nd\",\"KitchenQual\",\"Functional\",\"FireplaceQu\",\"SaleType\", \"BsmtFinType1\")\nfor col in c:\n  if test_df[col].dtype == \"object\":\n    test_df[col] = test_df[col].fillna(\"None\")\n\n''' OR\nfor col in (\"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\", \"BsmtFinType2\", \"BsmtCond\", \"BsmtQual\", \"BsmtExposure\", \"MasVnrType\", \"Electrical\",\"MSZoning\",\"Utilities\",\"Exterior1st\",\"Exterior2nd\",\"KitchenQual\",\"Functional\",\"FireplaceQu\",\"SaleType\", \"BsmtFinType1\"):\n  test_df[col] = test_df[col].fillna('None')\n'''","b1d5c3e0":"# All the missing values are filled\ntrain_df.info()","5f42374a":"test_df.info()","ce22f714":"from sklearn.preprocessing import LabelEncoder\ncatagory_cols = ('MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType', 'HouseStyle', 'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','ExterCond','Foundation','Heating','HeatingQC','CentralAir','KitchenQual','Functional','FireplaceQu','PavedDrive','SaleType','SaleCondition', \"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\", \"BsmtFinType2\", \"BsmtCond\", \"BsmtQual\", \"BsmtExposure\", \"MasVnrType\", \"Electrical\", \"BsmtFinType1\", \"ExterQual\")\nfor c in catagory_cols:\n  le = LabelEncoder()\n  train_df[c]= le.fit_transform(train_df[c].values)","26afdae0":"from sklearn.preprocessing import LabelEncoder\ncatagory_cols = ('MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType', 'HouseStyle', 'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','ExterCond','Foundation','Heating','HeatingQC','CentralAir','KitchenQual','Functional','FireplaceQu','PavedDrive','SaleType','SaleCondition', \"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\", \"BsmtFinType2\", \"BsmtCond\", \"BsmtQual\", \"BsmtExposure\", \"MasVnrType\", \"Electrical\", \"BsmtFinType1\", \"ExterQual\")\nfor c in catagory_cols:\n  le = LabelEncoder()\n  test_df[c]= le.fit_transform(test_df[c].values)","1d5c92f1":"# All the categorical data is encoded with numbers\ntrain_df.head()","b1f88467":"test_df.head()","99706d8e":"X_train = train_df.drop(\"SalePrice\", axis=1)\nY_train = train_df[\"SalePrice\"]\nX_test  = test_df.drop(\"Id\", axis=1).copy()\n''' OR\nX_train = train_df[:, 0:-1]\nY_train = train_df[:, -1]\nX_test  = test_df[:, 1:]\n'''","43b9be27":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","465d4820":"print(X_train)","f791d53e":"print(Y_train)","9b5a651c":"# Principle Component Analysis\nfrom sklearn.decomposition import PCA\npca = PCA(n_components = 10)\nX_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)","b07b401c":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 200, random_state = 0)\nregressor.fit(X_train, Y_train)\nY_pred = regressor.predict(X_test)","df4e1424":"''' OR\nfrom xgboost import XGBRegressor\nregressor = XGBRegressor()\nregressor.fit(X_train, Y_train)\nY_pred = regressor.predict(X_test)\n'''","22ce9162":"from sklearn.metrics import accuracy_score\nregressor.score(X_train, Y_train)\nregressor = round(regressor.score(X_train, Y_train) * 100, 2)\nregressor","64f34d08":"submission = pd.DataFrame({\n        \"Id\": test_df[\"Id\"],\n        \"SalePrice\": Y_pred\n    })","84fc98e4":"submission.to_csv('RandomForest.csv', index=False)","f2f1afc6":"### \"Train\"","fc3bc7c7":"# Importing the dataset","290459a9":"### Updated info()","894a27e4":"# Dataset information","820e37c1":"### \"Train\" Numerical","2d9b24fb":"# <font color='blue'>Part 1 - Data Preprocessing<\/font>","1d8f7c15":"# Importing libraries","683fcf92":"# <font color='blue'>House Pricing:<\/font> <font color='red'>Advance Regression Technique<\/font> with 98% accuracy by using RandomForest Regression\n* **Part 1 - Data Preprocessing**\n   1. Importing libraries\n   2. Importing the dataset\n   3. Dataset information\n   4. Dropping unnecessary columns\n      - \"Train\" \n      - \"Test\" \n   5. Taking care of misssing data\n      - \"Train\" Numerical\n      - \"Train\" Categorical\n      - \"Test\" Numerical\n      - \"Test\" Categorical\n      - Updated info()\n   6. Encoding categorical data\n      - \"Train\"\n      - \"Test\"\n      - Updated head()\n   7. Spliting the Train & Test datasets\n   8. Feature Scaling  \n   9. Dimensionality reduction\n* **Part 2 - Training the Regression model**\n   1. RandomForest \n   2. Other algorithms\n   3. Accuracy score  \n* **Part 3 - Creating a submission.csv**","26b172d7":"# Encoding categorical data with LabelEncoder()","5d324ff8":"# Dropping unnecessary columns","266b6830":"# <font color='blue'>Part 2 - Training the Regression model on the Training set<\/font>","9c07af87":"### \"Test\" Categorical","2c46fcaf":"# Dimensionality Reduction","ba17b1ba":"### \"Test\"","45119fe4":"# Spliting the Train & Test datasets","e04e4755":"### \"Train\"","07dfd1f5":"### \"Test\"","61df9e18":"### \"Train\" Categorical ","ffd3c5a2":"### \"Test\" Numerical","2e1b5a83":"# Feature Scaling","06a6b7c9":"### Accuracy score","ccb933e0":"# <font color='blue'>Part 3 - Creating a submission.csv<\/font>","ae369378":"# Taking care of misssing data","0892c22d":"# If you liked my work then please upvote, Thank you.","53cff497":"### Other Algorithms ","c06a4f27":"### Updated head()"}}