{"cell_type":{"b80da1a3":"code","3cb702fd":"code","50f03a24":"code","0e0cf000":"code","4774d17c":"code","e39f2508":"code","4f20df9f":"code","7d54082c":"code","b52a13a6":"code","ef4970ed":"code","b1f7b72a":"code","835ae3e0":"code","662bed51":"code","a8974094":"code","e20e4c8f":"code","e0a8cd50":"code","dcb77d33":"code","0fbd7c0e":"code","680a296a":"code","e0ee975e":"code","0e661a3f":"code","2b354eee":"code","64dce5ca":"code","4693fa2e":"code","976d7de8":"code","499b292a":"code","4ad0814a":"code","fc73158a":"code","82e73cbe":"code","70193cfc":"code","eaca1ce9":"code","ebb3fd0b":"code","2c9797f9":"code","eae59d53":"code","34b5a8f0":"code","677e7626":"code","5675c946":"code","3d786f5d":"code","3eda5e03":"code","3d3c5fa9":"code","89e74814":"code","b42eb204":"markdown","e87dd3ca":"markdown","a63c1eb3":"markdown","9cd3a9ab":"markdown","05f16e0a":"markdown","e459f3a6":"markdown","e5611309":"markdown","909103fd":"markdown","e3928bcc":"markdown","183ab6a2":"markdown","326b8e13":"markdown","3ad65039":"markdown","a12e223a":"markdown","72b0b9ee":"markdown","4fca79b5":"markdown","4e3c5187":"markdown","17c5022c":"markdown","a009c86e":"markdown","5b32402d":"markdown","6af8f2c6":"markdown","b622fa05":"markdown","8ef13bcd":"markdown","dcfbfc42":"markdown","795d14e2":"markdown","3000a8f7":"markdown","7ecb9138":"markdown","e875fe5f":"markdown","06f86037":"markdown","544d0007":"markdown","6f5c8b04":"markdown","2d1bc607":"markdown","135b1a5c":"markdown"},"source":{"b80da1a3":"!pip install optuna\n","3cb702fd":"import numpy as np\nimport pandas as pd\nimport os\nimport time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn import metrics \nimport lightgbm as lgb\nimport optuna","50f03a24":"path = \"..\/input\/ventilator-pressure-prediction\/\"\nos.listdir(path)","0e0cf000":"train = pd.read_csv(path + 'train.csv')","4774d17c":"test = pd.read_csv(path + 'test.csv')","e39f2508":"train","4f20df9f":"test","7d54082c":"submission = pd.read_csv(path + 'sample_submission.csv')","b52a13a6":"submission","ef4970ed":"# histgoram of pressure\nplt.figure(figsize= (10,5))\ntrain['pressure'].hist(bins=50)\nprint(\"mean: {}, std: {}\".format(train['pressure'].mean(), train['pressure'].std()))\nplt.show()","b1f7b72a":"plt.figure(figsize = (10,5))\nsns.histplot(data=train,x='time_step', bins=20)\nplt.show()","835ae3e0":"plt.figure(figsize = (10,5))\nsns.histplot(data=train,x='u_in', bins=30)\nplt.show()","662bed51":"sns.countplot(x='u_out', data=train)\nplt.title('Count of u_out in train')\nplt.show()","a8974094":"print(set(test['breath_id'].unique()).intersection(set(train['breath_id'].unique())))\nprint(\"breath_id in train: {0},breath_id in test: {1}\".format(train['breath_id'].nunique(), test['breath_id'].nunique()))","e20e4c8f":"fig, ax = plt.subplots(figsize = (12, 8))\nplt.subplot(2, 2, 1)\nsns.countplot(x='R', data=train)\nplt.title('Count of R in train')\nplt.subplot(2, 2, 2)\nsns.countplot(x='R', data=test)\nplt.title('Count of R in test')\nplt.subplot(2, 2, 3)\nsns.countplot(x='C', data=train)\nplt.title('Count of C in train')\nplt.subplot(2, 2, 4)\nsns.countplot(x='C', data=test)\nplt.title('Count of C in test')","e0a8cd50":"ventilation_cycle = train[train['breath_id']==2]\nprint(f\"Unique value counts in each time stamp\\n{ventilation_cycle.nunique()}\\n\")","dcb77d33":"fig, ax1 = plt.subplots(figsize = (12, 8))\n\nbreath_1 = train.loc[train['breath_id'] == 928]\nax2 = ax1.twinx()\n\nax1.plot(breath_1['time_step'], breath_1['pressure'], 'r-', label='pressure')\nax1.plot(breath_1['time_step'], breath_1['u_in'], 'g-', label='u_in')\nax2.plot(breath_1['time_step'], breath_1['u_out'], 'b-', label='u_out')\n\nax1.set_xlabel('Timestep')\n\nax1.legend(loc=(1.1, 0.8))\nax2.legend(loc=(1.1, 0.7))\nplt.show()","0fbd7c0e":"# cumulative sum of the u_in feature\ntrain[\"u_in_cumsum\"] = (train['u_in']).groupby(train['breath_id']).cumsum()\ntest['u_in_cumsum'] = (test['u_in']).groupby(test['breath_id']).cumsum()","680a296a":"train['u_in_lag'] = train.groupby('breath_id')['u_in'].shift(2)\ntrain = train.fillna(0)\ntest['u_in_lag'] = test.groupby('breath_id')['u_in'].shift(2)\ntest = test.fillna(0)","e0ee975e":"fig, ax1 = plt.subplots(figsize = (12, 8))\n\nbreath_1 = train.loc[train['breath_id'] == 928]\nax2 = ax1.twinx()\n\nax1.plot(breath_1['time_step'], breath_1['pressure'], 'r-', label='pressure')\nax1.plot(breath_1['time_step'], breath_1['u_in'], 'g-', label='u_in')\nax2.plot(breath_1['time_step'], breath_1['u_in_lag'], 'b-', label='u_in_lag')\n\n\nax1.set_xlabel('Timestep')\n\nax1.legend(loc=(1.1, 0.8))\nax2.legend(loc=(1.1, 0.7))\nplt.show()","0e661a3f":"train","2b354eee":"test","64dce5ca":"# import pickle","4693fa2e":"# def objective(trial, data=train, target=['pressure']):\n#     train_x, valid_x, train_y, valid_y = train_test_split(data, target, test_size=0.2, random_state=42)\n#     param = {\n#         \"metric\": \"mae\",\n#         'random_state': 7014,\n#         'n_estimators': 100,\n#         'learning_rate' : trial.suggest_categorical('learning_rate', [0.25,0.3,0.35,0.4,]),\n#         'max_depth': trial.suggest_categorical('max_depth', [2,3,4,5]),       \n#         \"lambda_l1\": trial.suggest_float(\"lambda_l1\", 1e-8, 10.0, log=True),\n#         \"num_leaves\": trial.suggest_int(\"num_leaves\", 2, 256),\n#         'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.3,0.4,0.5,0.6,0.7,0.8,0.9, 1.0]),\n#         \"feature_fraction\": trial.suggest_float(\"feature_fraction\", 0.4, 1.0),\n#         \"min_child_samples\": trial.suggest_int(\"min_child_samples\", 5, 100),      \n#     }\n#     model = lgb.LGBMRegressor(**param)\n    \n#     model.fit(train_x, train_y, eval_set=[(valid_x, valid_y)], early_stopping_rounds=100,verbose=False)\n    \n#     preds = model.predict(valid_x)\n    \n#     rmse = mean_absolute_error(valid_y, preds)\n    \n#     with open(\"{}.pickle\".format(trial.number), \"wb\") as fout:\n#         pickle.dump(model, fout)\n    \n#     return rmse","976d7de8":"# study = optuna.create_study(direction=\"minimize\")\n# study.optimize(objective, n_trials=100)\n# print('Number of finished trials:', len(study.trials))\n# print('Best trial:', study.best_trial.params)","499b292a":"# Best trial: {'max_depth': 5, 'lambda_l1': 2.7070003149190957e-06, 'num_leaves': 134, 'colsample_bytree': 0.4, 'feature_fraction': 0.7441879399513947, 'min_child_samples': 98","4ad0814a":"#study.trials_dataframe()","fc73158a":"#optuna.visualization.plot_optimization_history(study)","82e73cbe":"#optuna.visualization.plot_parallel_coordinate(study)\n#optuna.visualization.plot_slice(study)\n#optuna.visualization.plot_contour(study, params=['num_leaves', 'max_depth', 'subsample'])\n#optuna.visualization.plot_param_importances(study)","70193cfc":"#optuna.visualization.plot_param_importances(study)","eaca1ce9":"scores = []\nfeature_importance = pd.DataFrame()\nmodels = []\ncolumns = [col for col in train.columns if col not in ['id', 'breath_id', 'pressure']]\nX = train[columns]\ny = train['pressure']","ebb3fd0b":"#Best trial: {'learning_rate': 0.4, 'max_depth': 5, 'lambda_l1': 4.492527545624383, 'num_leaves': 103, 'colsample_bytree': 0.3, 'feature_fraction': 0.9988579060918809, 'min_child_samples': 34}","2c9797f9":"params = {'objective': 'regression',\n          'boosting_type' : 'gbdt',\n          'metric' : 'mae',\n          'n_jobs' : -1,\n          'learning_rate': 0.4,\n          'max_depth': 5,\n          'lambda_l1': 4.5,\n          'num_leaves': 103,\n          'colsample_bytree': 0.3,\n          'feature_fraction': 1,\n          'min_child_samples': 34}","eae59d53":"folds = GroupKFold(n_splits=5)\nfor fold_n, (train_index, valid_index) in enumerate(folds.split(train, y, groups=train['breath_id'])):\n    print(f'fold {fold_n} started at {time.ctime()}')\n    X_train, X_valid =  X[columns].iloc[train_index], X[columns].iloc[valid_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n    \n    model = lgb.LGBMRegressor(**params, n_estimators=100)\n    model.fit(X_train, y_train,\n             eval_set = [(X_train, y_train), (X_valid, y_valid)],\n             verbose=1000, early_stopping_rounds=100)\n    score = metrics.mean_absolute_error(y_valid, model.predict(X_valid))\n    \n    models.append(model)\n    scores.append(score)","34b5a8f0":"print('CV mean score: {0:.4f}, std{1:.4f}'.format(np.mean(scores), np.std(scores)))","677e7626":"#feature_importance[\"importance\"] \/= 5","5675c946":"test[columns]","3d786f5d":"test[columns]","3eda5e03":"for model in models:\n    submission['pressure'] += model.predict(test[columns])\nsubmission['pressure'] \/= 5","3d3c5fa9":"submission","89e74814":"submission.to_csv('sumbission.csv', index=False)","b42eb204":"### Model Training","e87dd3ca":"##### each time stump is constantly 80","a63c1eb3":"### Time series data(pressure\/ u_in \/ u_out)","9cd3a9ab":"# Overview","05f16e0a":"- id - globally-unique time step identifier across an entire file \/ \u30d5\u30a1\u30a4\u30eb\u5168\u4f53\u3067\u4e00\u610f\u306e\u30bf\u30a4\u30e0\u30b9\u30c6\u30c3\u30d7\u8b58\u5225\u5b50\n- breath_id - globally-unique time step for breaths \/ \u547c\u5438\u306e\u4e00\u610f\u306a\u30bf\u30a4\u30e0\u30b9\u30c6\u30c3\u30d7\u8b58\u5225\u5b50\n- R - lung attribute indicating how restricted the airway is (in cmH2O\/L\/S). Physically, this is the change in pressure per change in flow (air volume per time). Intuitively, one can imagine blowing up a balloon through a straw. We can change R by changing the diameter of the straw, with higher R being harder to blow. \/ \u6c17\u9053\u304c\u3069\u306e\u7a0b\u5ea6\u5236\u9650\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u793a\u3059\u80ba\u5c5e\u6027\uff08\u5358\u4f4d\uff1acmH2O\/L\/S\uff09\u3002\u7269\u7406\u7684\u306b\u306f\u3001\u6d41\u91cf\uff08\u6642\u9593\u5f53\u305f\u308a\u306e\u7a7a\u6c17\u91cf\uff09\u306e\u5909\u5316\u306b\u5bfe\u3059\u308b\u5727\u529b\u306e\u5909\u5316\u3067\u3059\u3002\u76f4\u611f\u7684\u306b\u306f\u3001\u30b9\u30c8\u30ed\u30fc\u3067\u98a8\u8239\u3092\u81a8\u3089\u307e\u305b\u308b\u3088\u3046\u306a\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\u30b9\u30c8\u30ed\u30fc\u306e\u76f4\u5f84\u3092\u5909\u3048\u308b\u3053\u3068\u3067R\u3092\u5909\u5316\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u3001R\u304c\u5927\u304d\u3044\u307b\u3069\u5439\u304d\u306b\u304f\u304f\u306a\u308a\u307e\u3059\u3002\n- C - lung attribute indicating how compliant the lung is (in mL\/cmH2O). Physically, this is the change in volume per change in pressure. Intuitively, one can imagine the same balloon example. We can change C by changing the thickness of the balloon\u2019s latex, with higher C having thinner latex and easier to blow. \/ \u80ba\u306e\u9069\u5408\u6027\u3092\u793a\u3059\u80ba\u5c5e\u6027\uff08\u5358\u4f4d\uff1amL\/cmH2O\uff09\u3002\u7269\u7406\u7684\u306b\u306f\u3001\u5727\u529b\u306e\u5909\u5316\u306b\u5bfe\u3059\u308b\u4f53\u7a4d\u306e\u5909\u5316\u3092\u8868\u3057\u307e\u3059\u3002\u76f4\u611f\u7684\u306b\u306f\u3001\u540c\u3058\u98a8\u8239\u306e\u4f8b\u3092\u60f3\u50cf\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u98a8\u8239\u306e\u30e9\u30c6\u30c3\u30af\u30b9\u306e\u539a\u3055\u3092\u5909\u3048\u308b\u3053\u3068\u3067C\u3092\u5909\u5316\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002C\u304c\u5927\u304d\u3044\u307b\u3069\u30e9\u30c6\u30c3\u30af\u30b9\u304c\u8584\u304f\u3001\u5439\u304d\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\n- time_step - the actual time stamp. \/ \u5b9f\u969b\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\n- \u2605u_in - the control input for the inspiratory solenoid valve. Ranges from 0 to 100. \/ \u5438\u6c17\u30bd\u30ec\u30ce\u30a4\u30c9\u30d0\u30eb\u30d6\u306e\u5236\u5fa1\u5165\u529b\u3067\u3059\u30020\uff5e100\u306e\u7bc4\u56f2\u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n- \u2605u_out - the control input for the exploratory solenoid valve. Either 0 or 1. \/ \u6392\u6c17\u30bd\u30ec\u30ce\u30a4\u30c9\u30d0\u30eb\u30d6\u306e\u5236\u5fa1\u5165\u529b\u3067\u3059\u30020\u307e\u305f\u306f1\u306e\u3044\u305a\u308c\u304b\u3067\u3059\u3002\n- pressure - the airway pressure measured in the respiratory circuit, measured in cmH2O. \/ \u547c\u5438\u56de\u8def\u3067\u6e2c\u5b9a\u3055\u308c\u305f\u6c17\u9053\u306e\u5727\u529b\u3067\u3001\u5358\u4f4d\u306fcmH2O\u3067\u3059\u3002","e459f3a6":"### Prediction","e5611309":"### Submission","909103fd":"the breath_id in train and test don't overlap.we should consider prevent from overfitting one breath_id in train.","e3928bcc":"#### u_in  \n(The control input for the inspiratory solenoid valve. Ranges from 0 to 100)","183ab6a2":"#### Check 1 ventilation cycle","326b8e13":"#### pressure(objective variable)","3ad65039":"## thanks Reference\n*  [Ventilator Pressure: Preliminary EDA (EN\/JPN)](https:\/\/www.kaggle.com\/kaitohonda\/ventilator-pressure-preliminary-eda-en-jpn\/edit)\n* [Google-Brain_Starter](https:\/\/www.kaggle.com\/drcapa\/google-brain-starter) \n* [Ventilator Pressure Prediction: EDA, FE and models](https:\/\/www.kaggle.com\/artgor\/ventilator-pressure-prediction-eda-fe-and-models#Model-training)\n* [Ventilator Pressure Prediction [EDA]](https:\/\/www.kaggle.com\/manojkumars00\/ventilator-pressure-prediction-eda)\n* [LGBM on CPU+Optuna Tuning](https:\/\/www.kaggle.com\/towhidultonmoy\/lgbm-on-cpu-optuna-tuning)","a12e223a":"##### Our target(pressure) is rising and,after u_in become 0 and u_out beacomes 1 at the same time the pressure has suddenly drop","72b0b9ee":"### Problem\n* developing new methods for controlling mechanical ventilators is prohibitively expensive, even before reaching clinical trials. High-quality simulators could reduce this barrier\n\n### Goal\n* to  simulate a ventilator connected to a sedated patient's lung that take lung attributes compliance and resistance into account.  \n(\u93ae\u9759\u72b6\u614b\u306e\u60a3\u8005\u306e\u80ba\u306b\u63a5\u7d9a\u3055\u308c\u305f\u4eba\u5de5\u547c\u5438\u5668\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3002\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306f\u80ba\u306e\u7279\u6027\u3067\u3042\u308b\u8ffd\u5f93\u6027\u3084\u62b5\u6297\u3092\u8003\u616e\u3059\u308b)","4fca79b5":"#### Termiology","4e3c5187":"### Feature Engineering","17c5022c":"\n- PEEP \u30fb\u30fb\u30fb to apply positive pressure (PEEP\u306f\u606f\u3092\u5410\u3044\u305f\u6642\u306b\u967d\u5727\u3092\u304b\u3051\u3066\u304a\u304f\u3053\u3068)  \n    - \u21e8improvement effect of oxygenation\u3000(\u9178\u7d20\u5316\u306e\u6539\u5584\u52b9\u679c)\n    - \u21c4 risk of incomplete circulatioin(\u5faa\u74b0\u4e0d\u5168\u306e\u30ea\u30b9\u30af)\n- postive pressure \u30fb\u30fb\u30fb state high pressure than outside (\u967d\u5727..\u5916\u3088\u308a\u3082\u6c17\u5727\u304c\u9ad8\u3044\u72b6\u614b)\n\n\n- R \/ C  \nA ventilator needs to take into account the structure of the lung to determine the optimal pressure to induce. Such\nstructural factors include compliance (C), or the change in lung volume per unit pressure, and resistance (R), or the\nchange in pressure per unit flow.","a009c86e":"Check whether or not test \/ train data overlap","5b32402d":"### Columns","6af8f2c6":"u_out  \n(The control input for the exploratory solenoid valve. Either 0 or 1)","b622fa05":"### Library","8ef13bcd":"# Data","dcfbfc42":"### hyperparameters Tuning","795d14e2":"### EDA","3000a8f7":"#### Visualize TimeStamp","7ecb9138":"* The ventilator data used in this competition was produced using a modified open-source ventilator connected to an artificial bellows test lung via a respiratory circuit  \n(\u3053\u306e\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3057\u305f\u4eba\u5de5\u547c\u5438\u5668\u306e\u30c7\u30fc\u30bf\u306f\u3001\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u4eba\u5de5\u547c\u5438\u5668\u3092\u6539\u9020\u3057\u3001\u547c\u5438\u56de\u8def\u3092\u4ecb\u3057\u3066\u4eba\u5de5\u7684\u306a\u8a66\u9a13\u80ba\u306b\u63a5\u7d9a\u3057\u3066\u4f5c\u6210\u3055\u308c\u305f)\n* he diagram below illustrates the setup, tow control inputs highlighted in green and the state variable (airway pressure) to predict in blue  \n(\u4e0b\u56f3\u3067\u306f2\u3064\u306e\u5236\u5fa1\u5165\u529b\u3092\u7dd1\u3067\u3001\u4e88\u6e2c\u3059\u308b\u72b6\u614b\u5909\u6570\uff08\u6c17\u9053\u5727\uff09\u3092\u9752\u3067\u793a\u3059)\n* 1st contorl input is  a continuous variable from 0 to 100 representing the percentage the inspiratory solenoid valve is open to let air into the lung (i.e., 0 is completely closed and no air is let in and 100 is completely open)  \n(1\u3064\u76ee\u306e\u5236\u5fa1\u5165\u529b\u306f0\u301c100\u306e\u9023\u7d9a\u5909\u6570\u3067\u3001\u7a7a\u6c17\u3092\u80ba\u306b\u5165\u308c\u308b\u305f\u3081\u306b\u5438\u6c17\u96fb\u78c1\u5f01\u3092\u958b\u304f\u5272\u5408\u3092\u8868\u3057\u307e\u3059\uff08\u3059\u306a\u308f\u3061\u30010\u306f\u5b8c\u5168\u306b\u9589\u3058\u3066\u7a7a\u6c17\u3092\u5165\u308c\u305a\u3001100\u306f\u5b8c\u5168\u306b\u958b\u304f\u3002  \n* 2nd control input is a binary variable representing whether the exploratory valve is open (1) or closed (0) to let air out  \n(2\u3064\u76ee\u306e\u5236\u5fa1\u5165\u529b\u306f\u3001\u7a7a\u6c17\u3092\u51fa\u3059\u305f\u3081\u306e\u6392\u6c17\u96fb\u78c1\u5f01\u304c\u958b\u3044\u3066\u3044\u308b\uff081\uff09\u304b\u9589\u3058\u3066\u3044\u308b\uff080\uff09\u304b\u3092\u8868\u3059\u4e8c\u5024\u5909\u6570)","e875fe5f":"### Metrics\n**mean absolute error |\ud835\udc4b\u2212\ud835\udc4c|**\n  \nwhere \ud835\udc4b is the vector of predicted pressure and \ud835\udc4c is the vector of actual pressures across all breaths in the test set.","06f86037":"Each time series represents an approximately 3-second breath. The files are organized such that each row is a time step in a breath and gives the two control signals, the resulting airway pressure, and relevant attributes of the lung, described below.  \n\u5404\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306f\u7d043\u79d2\u306e\u547c\u5438\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u306f\u5404\u884c\u304c\u547c\u5438\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u3068\u306a\u308b\u3088\u3046\u306b\u69cb\u6210\u3055\u308c\u3066\u304a\u308a\u30012\u3064\u306e\u5236\u5fa1\u4fe1\u53f7\u3001\u305d\u306e\u7d50\u679c\u3068\u3057\u3066\u306e\u6c17\u9053\u5727\u3001\u304a\u3088\u3073\u4ee5\u4e0b\u306b\u8ff0\u3079\u308b\u80ba\u306e\u95a2\u9023\u5c5e\u6027\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u307e\u3059\u3002","544d0007":"### Split data (Version2)","6f5c8b04":"Objecttive Variable is **pressure**","2d1bc607":"![](https:\/\/raw.githubusercontent.com\/google\/deluca-lung\/main\/assets\/2020-10-02%20Ventilator%20diagram.svg)\n","135b1a5c":"#### \u203bIn this notebook , main language is English, sublanguage is Japanese."}}