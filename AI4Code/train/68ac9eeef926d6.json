{"cell_type":{"f95bb4d0":"code","fa72d8f5":"code","b97dc3a6":"code","c723a069":"code","8329589e":"code","4f098bb7":"code","a31591e0":"code","14304309":"code","ed347b3d":"code","b32cb793":"code","0b5df9d6":"code","78285bdc":"code","ba61a8e6":"code","52b72831":"code","0204dbb8":"code","df40f5ee":"code","7085ac22":"code","048515a6":"code","1aa0ac73":"code","a17d0dc4":"code","7708c3dc":"code","5f5c67d7":"code","2315ef67":"markdown","182c6e30":"markdown","56a9f5bb":"markdown","2159f56e":"markdown","173a079c":"markdown","889256f2":"markdown","483a1ed7":"markdown","3d19f117":"markdown","4c79a0ec":"markdown"},"source":{"f95bb4d0":"import gc\nimport os\nimport sys\nimport time\nimport numpy as np\nimport pandas as pd\nimport feather\nimport pickle\n\nfrom sklearn.model_selection import KFold, TimeSeriesSplit\nfrom sklearn.metrics import log_loss, accuracy_score, mean_squared_error\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm\n\nfrom fbprophet import Prophet\nfrom fbprophet.diagnostics import cross_validation\nfrom fbprophet.diagnostics import performance_metrics\nfrom fbprophet.plot import plot_cross_validation_metric\nfrom fbprophet.plot import add_changepoints_to_plot\nfrom fbprophet.plot import plot_plotly\nfrom fbprophet.plot import plot_yearly\nimport plotly.offline as py\nfrom datetime import date\n\nimport warnings\nwarnings.filterwarnings('ignore')","fa72d8f5":"os.listdir('..\/input\/ashrae-energy-prediction')","b97dc3a6":"train_ = pd.read_csv('..\/input\/ashrae-energy-prediction\/train.csv')\ntest_ = pd.read_csv('..\/input\/ashrae-energy-prediction\/test.csv')\nweather_train_ = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_train.csv')\nweather_test_ = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_test.csv')\nmetadata = pd.read_csv('..\/input\/ashrae-energy-prediction\/building_metadata.csv')","c723a069":"# select 1 building\nbuilding_id = 1085\nsite_id = metadata[metadata['building_id']==building_id]['site_id'].values[0]\ntrain = train_[train_['building_id'] == building_id]\ntest = test_[test_['building_id'] == building_id]\ntrain['timestamp'] = pd.to_datetime(train['timestamp'])\ntest['timestamp'] = pd.to_datetime(test['timestamp'])\ntrain = train[['timestamp', 'meter_reading']].reset_index(drop=True)\ntest = test[['timestamp']].reset_index(drop=True)\ntrain.columns = ['ds', 'y']\ntest.columns = ['ds']\nweather_train = weather_train_[weather_train_['site_id']==site_id].reset_index(drop=True)\nweather_test = weather_test_[weather_test_['site_id']==site_id].reset_index(drop=True)\nweather_train['timestamp'] = pd.to_datetime(weather_train['timestamp'])\nweather_test['timestamp'] = pd.to_datetime(weather_test['timestamp'])","8329589e":"train.head()","4f098bb7":"weather_train.head()","a31591e0":"train['y'].plot();","14304309":"n_test = 2000\nX_train = train[:-n_test]\nX_valid = train[-n_test:]\ny_valid = X_valid['y']\nX_valid = X_valid.drop('y', axis=1)","ed347b3d":"# holidays\n# thanks to https:\/\/www.kaggle.com\/rohanrao\/ashrae-half-and-half\nholidays = [\"2016-01-01\", \"2016-01-18\", \"2016-02-15\", \"2016-05-30\", \"2016-07-04\",\n            \"2016-09-05\", \"2016-10-10\", \"2016-11-11\", \"2016-11-24\", \"2016-12-26\",\n            \"2017-01-01\", \"2017-01-16\", \"2017-02-20\", \"2017-05-29\", \"2017-07-04\",\n            \"2017-09-04\", \"2017-10-09\", \"2017-11-10\", \"2017-11-23\", \"2017-12-25\",\n            \"2018-01-01\", \"2018-01-15\", \"2018-02-19\", \"2018-05-28\", \"2018-07-04\",\n            \"2018-09-03\", \"2018-10-08\", \"2018-11-12\", \"2018-11-22\", \"2018-12-25\",\n            \"2019-01-01\"]\nholidays = pd.DataFrame({\n  'holiday': 'holiday',\n  'ds': pd.to_datetime(holidays),\n  'lower_window': 0,\n  'upper_window': 0,\n})\n# Black Friday\nholidays.loc[holidays['ds'] == pd.to_datetime('2016-11-24'), 'upper_window'] = 1\nholidays.loc[holidays['ds'] == pd.to_datetime('2017-11-23'), 'upper_window'] = 1\nholidays.loc[holidays['ds'] == pd.to_datetime('2018-11-22'), 'upper_window'] = 1","b32cb793":"params_prophet = {\n    'growth': 'logistic', # Prophet allows you to make forecasts using a logistic growth trend model\n    'changepoint_prior_scale' :0.03, # trend flexibility default 0.05\n    'holidays': holidays\n}","0b5df9d6":"X_train['floor'] = X_train['y'].min()\nX_train['cap'] = X_train['y'].max()","78285bdc":"X_train","ba61a8e6":"m = Prophet(**params_prophet)\nm.fit(X_train)","52b72831":"#future = m.make_future_dataframe(periods=365*24, freq='H')\nfuture = pd.concat([X_train[['ds']], X_valid])\nfuture['floor'] = X_train['y'].min()\nfuture['cap'] = X_train['y'].max()\nfcst = m.predict(future)\nfig = m.plot(fcst)","0204dbb8":"fig = m.plot(fcst)\na = add_changepoints_to_plot(fig.gca(), m, fcst)","df40f5ee":"fig = m.plot_components(fcst)","7085ac22":"weather_train = weather_train.fillna(0)\nX_train = pd.merge(X_train, weather_train.drop('site_id', axis=1), left_on = 'ds', right_on = 'timestamp').drop('timestamp', axis=1)\nfuture = pd.merge(future, weather_train.drop('site_id', axis=1), left_on = 'ds', right_on = 'timestamp').drop('timestamp', axis=1)\nX_train.head()","048515a6":"cols = ['air_temperature', 'cloud_coverage','dew_temperature', 'precip_depth_1_hr', 'sea_level_pressure', 'wind_direction', 'wind_speed']\nm = Prophet(**params_prophet)\nfor col in cols:\n    m.add_regressor(col)\nm.fit(X_train)","1aa0ac73":"fcst = m.predict(future)\nfig = m.plot(fcst)","a17d0dc4":"weather_test = weather_test.fillna(0)\ntest['floor'] = X_train['y'].min()\ntest['cap'] = X_train['y'].max()\nX_test = pd.merge(test, weather_test.drop('site_id', axis=1), left_on = 'ds', right_on = 'timestamp').drop('timestamp', axis=1)\nX_test.head()","7708c3dc":"fcst = m.predict(X_test)\npreds = fcst.yhat","5f5c67d7":"preds.plot();","2315ef67":"In this competition we can use some features, thus we add some features to model as exogenous features.","182c6e30":"## Add exogenous features","56a9f5bb":"Prophet can set holidays and how long effect it is.","2159f56e":"## Read Data","173a079c":"## Plane Model","889256f2":"Prophet predict linear trend, because have only one year data. We cannot capture seasoneal trends.","483a1ed7":"## Prophet","3d19f117":"This kernel predict 1 building energy consumption by [Prophet](https:\/\/facebook.github.io\/prophet\/docs\/quick_start.html).  \nThere is another prophet kernel: Vopani's [great kernel](https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy), but I prepared this kernel for a few days so I will release it.\n","4c79a0ec":"## Predict test data"}}