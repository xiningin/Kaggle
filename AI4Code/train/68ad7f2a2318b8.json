{"cell_type":{"90a0cf37":"code","3507545b":"code","13e8c4e8":"code","fdcc6201":"code","92be2738":"code","d9099f55":"code","9fda36e8":"code","722e15f3":"code","6f9d2222":"code","faed9176":"code","31b1a0de":"code","e382aa5d":"code","f1147d8d":"code","86aec3ed":"code","a27c60f6":"code","13e3c2b6":"code","bfb5680b":"code","bb88b49d":"code","2e3dcaf4":"code","d66a7e5f":"code","0979d7a7":"code","32be33fc":"code","0f73aa00":"code","bb0c2ab8":"code","84b37e61":"code","e615486c":"code","f4885ae2":"code","82934cc1":"code","bbdffcbf":"code","d08e7d72":"code","6c775864":"code","a929c70e":"code","aaddd839":"code","d7f8338e":"code","eb40108b":"code","82aebe28":"code","fcdca164":"code","b15719ca":"code","a7c56e3c":"code","67baaf53":"code","4c4005d7":"code","17268caf":"code","749bcff5":"code","ec23471b":"code","02131c99":"code","e5993dd6":"code","1810b37e":"code","b1afd46d":"code","71b71508":"markdown","ca1ed409":"markdown","bb30ed2b":"markdown","52f34af6":"markdown","50988cb7":"markdown","7b82fcff":"markdown","7e3b5f66":"markdown"},"source":{"90a0cf37":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport gc\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3507545b":"data_train = pd.read_csv('..\/input\/elo-merchant-category-recommendation\/train.csv')\ndata_test = pd.read_csv('..\/input\/elo-merchant-category-recommendation\/test.csv')","13e8c4e8":"data_train.target.value_counts().sort_index()","fdcc6201":"data_train.first_active_month.value_counts().sort_index().plot()","92be2738":"data_test.first_active_month.value_counts().sort_index().plot()","d9099f55":"percent_low = data_train.target.value_counts(normalize=True).sort_index().iloc[0]","9fda36e8":"print('We expect {:,.10} of -33.219 in the test set.'.format(percent_low * len(data_test.index)))","722e15f3":"data_normal = data_train.loc[data_train.target>-30]\ndata_less = data_train.loc[data_train.target<-30]","6f9d2222":"pd.concat([data_normal.first_active_month.value_counts(normalize=True).sort_index(),\n           data_less.first_active_month.value_counts(normalize=True).sort_index()],axis=1).plot()\nplt.legend(['normal','-33'])\n","faed9176":"pd.concat([data_normal.feature_1.value_counts(normalize=True).sort_index(),\n           data_less.feature_1.value_counts(normalize=True).sort_index()],axis=1).plot(kind='bar')\nplt.legend(['normal','-33'])","31b1a0de":"pd.concat([data_normal.feature_2.value_counts(normalize=True).sort_index(),\n           data_less.feature_2.value_counts(normalize=True).sort_index()],axis=1).plot(kind='bar')\nplt.legend(['normal','-33'])","e382aa5d":"pd.concat([data_normal.feature_3.value_counts(normalize=True).sort_index(),\n           data_less.feature_3.value_counts(normalize=True).sort_index()],axis=1).plot(kind='bar')\nplt.legend(['normal','-33'])","f1147d8d":"card_id = list(data_train.card_id.unique()) + list(data_test.card_id.unique())\nmerchant_id = list(pd.read_csv('..\/input\/elo-merchant-category-recommendation\/merchants.csv',usecols=['merchant_id']).merchant_id.unique())\ncard_id_dict = {value: key for key, value in enumerate(card_id)}\nmerchant_id_dict = {value: key for key, value in enumerate(merchant_id)}","86aec3ed":"data_normal['card_id_label'] = data_normal.card_id.map(lambda x: card_id_dict[x])\ndata_less['card_id_label'] = data_less.card_id.map(lambda x: card_id_dict[x])","a27c60f6":"data_hist = pd.read_csv('..\/input\/cleaning-historical-txns\/historical_transactions.csv')","13e3c2b6":"# Memory saving function credit to https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    #start_mem = df.memory_usage().sum() \/ 1024**2\n    #print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n\n    for col in df.columns:\n        col_type = df[col].dtype\n\n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    #end_mem = df.memory_usage().sum() \/ 1024**2\n    #print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    #print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n\n    return df","bfb5680b":"data_hist.info()","bb88b49d":"data_hist.category_2 = data_hist.category_2.astype(int)","2e3dcaf4":"data_hist = reduce_mem_usage(data_hist)\ndata_hist.purchase_amount = data_hist.purchase_amount.astype(float)\ngc.collect()\ndata_hist.info()","d66a7e5f":"data_normal_hist = data_hist.loc[data_hist.card_id_label.isin(data_normal.card_id_label)]\ndata_less_hist = data_hist.loc[data_hist.card_id_label.isin(data_less.card_id_label)]","0979d7a7":"print('''There are {:,} transactions from the normal target card,\n{:,} transactions from the -33 target card,\nremaining {:,} transactions for the test set.'''.format(\nlen(data_normal_hist), len(data_less_hist), len(data_hist)-len(data_normal_hist)-len(data_less_hist)))","32be33fc":"from scipy.stats import percentileofscore","0f73aa00":"authorised_normal = data_normal_hist.groupby('card_id_label').authorized_flag.agg(['count','mean'])\nauthorised_normal.head(10)","bb0c2ab8":"authorised_normal['count_less_than100'] = authorised_normal['count'].map(lambda x: 1 if x<100 else 0)\nauthorised_normal['have_unauthorised'] = authorised_normal['mean'].map(lambda x: 1 if x<1 else 0)","84b37e61":"authorised_less = data_less_hist.groupby('card_id_label').authorized_flag.agg(['count','mean'])\nauthorised_less['count_less_than100'] = authorised_less['count'].map(lambda x: 1 if x<100 else 0)\nauthorised_less['have_unauthorised'] = authorised_less['mean'].map(lambda x: 1 if x<1 else 0)","e615486c":"pd.concat([authorised_normal.count_less_than100.value_counts(normalize=True).sort_index(),\n           authorised_less.count_less_than100.value_counts(normalize=True).sort_index()],axis=1).plot(kind='bar')\nplt.legend(['normal','-33'])","f4885ae2":"pd.concat([authorised_normal.have_unauthorised.value_counts(normalize=True).sort_index(),\n           authorised_less.have_unauthorised.value_counts(normalize=True).sort_index()],axis=1).plot(kind='bar')\nplt.legend(['normal','-33'])","82934cc1":"data_normal_hist.groupby('card_id_label').authorized_flag.agg(['count']).describe()","bbdffcbf":"data_less_hist.groupby('card_id_label').authorized_flag.agg(['count']).describe()","d08e7d72":"data_normal_hist.groupby('card_id_label').authorized_flag.agg(['count'])['count'].value_counts(normalize=True).sort_index().plot()\ndata_less_hist.groupby('card_id_label').authorized_flag.agg(['count'])['count'].value_counts(normalize=True).sort_index().plot()","6c775864":"data_normal_hist.groupby('card_id_label').authorized_flag.agg(['mean'])['mean'].describe()","a929c70e":"data_less_hist.groupby('card_id_label').authorized_flag.agg(['mean'])['mean'].describe()","aaddd839":"data_normal_hist.groupby('card_id_label').authorized_flag.agg(['mean'])['mean'].value_counts(normalize=True).sort_index().plot()\ndata_less_hist.groupby('card_id_label').authorized_flag.agg(['mean'])['mean'].value_counts(normalize=True).sort_index().plot()","d7f8338e":"def get_agg_stats(columns,func):\n    normal = data_normal_hist.groupby('card_id_label')[columns].agg(func)\n    \n    less = data_less_hist.groupby('card_id_label')[columns].agg(func)\n    return normal, less","eb40108b":"cat1_normal, cat1_less = get_agg_stats('category_1',['mean'])","82aebe28":"def add_new_columns(normal, less, new_column_name, column_name, func):\n    normal[new_column_name] = normal[column_name].map(func)\n    less[new_column_name] = less[column_name].map(func)\n    return normal, less","fcdca164":"cat1_normal, cat1_less = add_new_columns(cat1_normal, cat1_less, 'mixed', 'mean', lambda x: 1 if x>0 and x<1 else 0)","b15719ca":"pd.concat([cat1_normal['mixed'].value_counts(normalize=True).sort_index(),\n           cat1_less['mixed'].value_counts(normalize=True).sort_index()],axis=1).plot(kind='bar')\nplt.legend(['normal','-33'])","a7c56e3c":"instal_normal, instal_less = get_agg_stats('installments',['mean'])\ninstal_normal, instal_less = add_new_columns(instal_normal, instal_less, 'use_instal', 'mean', lambda x: 1 if x>0 else 0)\npd.concat([instal_normal['use_instal'].value_counts(normalize=True).sort_index(),\n           instal_less['use_instal'].value_counts(normalize=True).sort_index()],axis=1).plot(kind='bar')\nplt.legend(['normal','-33'])","67baaf53":"cat2_normal, cat2_less = get_agg_stats('category_2',['nunique'])\ncat2_normal, cat2_less = add_new_columns(cat2_normal, cat2_less, 'more_than_1', 'nunique', lambda x: 1 if x>1 else 0)\npd.concat([cat2_normal['more_than_1'].value_counts(normalize=True).sort_index(),\n           cat2_less['more_than_1'].value_counts(normalize=True).sort_index()],axis=1).plot(kind='bar')\nplt.legend(['normal','-33'])","4c4005d7":"cat3_normal, cat3_less = get_agg_stats('category_3',['nunique'])\ncat3_normal, cat3_less = add_new_columns(cat3_normal, cat3_less, 'more_than_1', 'nunique', lambda x: 1 if x>1 else 0)\npd.concat([cat3_normal['more_than_1'].value_counts(normalize=True).sort_index(),\n           cat3_less['more_than_1'].value_counts(normalize=True).sort_index()],axis=1).plot(kind='bar')\nplt.legend(['normal','-33'])","17268caf":"merc_cat_normal, merc_cat_less = get_agg_stats('merchant_category_id',['nunique'])\nmerc_cat_normal, merc_cat_less = add_new_columns(merc_cat_normal, merc_cat_less, 'more_than_25', 'nunique', lambda x: 1 if x>25 else 0)\npd.concat([merc_cat_normal['more_than_25'].value_counts(normalize=True).sort_index(),\n           merc_cat_less['more_than_25'].value_counts(normalize=True).sort_index()],axis=1).plot(kind='bar')\nplt.legend(['normal','-33'])","749bcff5":"month_lag_normal, month_lag_less = get_agg_stats('month_lag',['median'])\nmonth_lag_normal, month_lag_less = add_new_columns(month_lag_normal, month_lag_less, 'more_than_-3', 'median', lambda x: 1 if x>-3 else 0)\npd.concat([month_lag_normal['more_than_-3'].value_counts(normalize=True).sort_index(),\n           month_lag_less['more_than_-3'].value_counts(normalize=True).sort_index()],axis=1).plot(kind='bar')\nplt.legend(['normal','-33'])","ec23471b":"data_less_hist.columns","02131c99":"purchase_amount_normal = data_normal_hist.groupby('card_id_label').purchase_amount.agg(['sum','mean','median'])\npurchase_amount_normal['sum_positive'] = purchase_amount_normal['sum'].map(lambda x: 1 if x>0 else 0)\npurchase_amount_normal['mean_positive'] = purchase_amount_normal['mean'].map(lambda x: 1 if x>0 else 0)","e5993dd6":"purchase_amount_less = data_less_hist.groupby('card_id_label').purchase_amount.agg(['sum','mean','median'])\npurchase_amount_less['sum_positive'] = purchase_amount_less['sum'].map(lambda x: 1 if x>0 else 0)\npurchase_amount_less['mean_positive'] = purchase_amount_less['mean'].map(lambda x: 1 if x>0 else 0)","1810b37e":"pd.concat([purchase_amount_normal.sum_positive.value_counts(normalize=True).sort_index(),\n           purchase_amount_less.sum_positive.value_counts(normalize=True).sort_index()],axis=1).plot(kind='bar')\nplt.legend(['normal','-33'])","b1afd46d":"pd.concat([purchase_amount_normal.mean_positive.value_counts(normalize=True).sort_index(),\n           purchase_amount_less.mean_positive.value_counts(normalize=True).sort_index()],axis=1).plot(kind='bar')\nplt.legend(['normal','-33'])","71b71508":"There is a higher chance of feature_1 == 5, given that the target is -33.","ca1ed409":"From the two plots above, we can see that the distribution is very similar, this would suggest that a bigger original data set was split into the train set and the test set. Hence, it would be alrigh to assume that there will be target that are around -33. This is also consistent with the high RMSE in the leaderboard. The culprit is most likely the existence of such outliers target.\n\nHence, assuming the same proportion of -33 target in the test set as the train set, I calculated how many -33 target are we expecting in the test set.","bb30ed2b":"Many EDA notebook has probably shown that there is a substantial amount of target that is around -33. So I wanted to investigate a little bit into this.","52f34af6":"There is a higher chance of feature_2 == 3, given that the target is -33.","50988cb7":"I split the train set into 2: data_normal for target > -30, data_less for target < -30.","7b82fcff":"There is a higher chance of feature_3 == 1, given that the target is -33.","7e3b5f66":"We see that there is some differences in the distribution of first_active_month."}}