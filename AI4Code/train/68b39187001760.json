{"cell_type":{"d6d98cc4":"code","26fa4ddd":"code","87adce21":"code","8644467c":"code","edd121c8":"code","8b0b0bcd":"code","0467b6bb":"code","3dac616a":"code","1ac1554e":"code","f3402532":"code","683eb96f":"code","fddc8249":"code","a0e5cd5f":"code","3ba581c4":"code","8464f06d":"code","8470c1d9":"code","49dcaf8d":"code","6751564c":"code","cdb0f186":"code","741d6b21":"code","eab67739":"code","779390b1":"code","74f574df":"code","2663f118":"code","f53d3d90":"code","8cf158c6":"code","5173bd6f":"code","9b7cbe2a":"code","d496c5a6":"code","7f50bb38":"code","75b51ac4":"code","2d9b2c17":"code","c43fa82b":"code","91350c75":"code","0af4372d":"code","7bb2c8f9":"code","c5c4c856":"code","27556419":"code","bc0315af":"code","0d24c83f":"code","130a0ba1":"code","ac71d36e":"code","88542792":"code","9545951a":"code","00becca4":"code","476d04d4":"code","26eccb06":"code","e928fbd6":"code","cb0b05db":"code","b7f40a83":"code","7874f96f":"code","928ad77e":"code","9f919456":"markdown","4ce779dc":"markdown","7bbfed6a":"markdown","3d1a3ddf":"markdown","71868b22":"markdown","ab181585":"markdown","5c22fca6":"markdown","4ccc9011":"markdown"},"source":{"d6d98cc4":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport datetime\nimport seaborn as sns","26fa4ddd":"games_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/games.csv')","87adce21":"games_df.head()","8644467c":"games_df.shape","edd121c8":"games_df.isnull().sum()","8b0b0bcd":"games_df.dtypes","0467b6bb":"# Converting to datetime.date values\ngames_df['gameDate'] = pd.to_datetime(games_df['gameDate']).dt.date\n\n# Converting to datetime.time values\ngames_df['gameTimeEastern'] = pd.to_datetime(games_df['gameTimeEastern']).dt.time","3dac616a":"games_df.head()","1ac1554e":"games_df['gameDate'].value_counts().reset_index()","f3402532":"# Checking the frequency of games in relation to game dates\ndate_dist = games_df['gameDate'].value_counts().reset_index()\n\n# Renaming the columns\ndate_dist.columns = ['date', 'frequency']","683eb96f":"date_dist.head()","fddc8249":"# Sorting the DataFrame based on the date values\nsorted_date_dist = date_dist.sort_values('date').set_index('date')\n\n# Looking at the first five rows\nsorted_date_dist.head()","a0e5cd5f":"def find_dist(df, col_name):\n    \n    # Checking the frequency of games in relation to the column values\n    dist = df[col_name].value_counts().reset_index()\n    \n    # Renaming the columns\n    dist.columns = [col_name, 'frequency']\n        \n    # Sorting the DataFrame based on the column values\n    sorted_dist = dist.sort_values(col_name, ascending=True).set_index(col_name)\n\n    # Plotting a bar plot\n    sorted_dist.plot(kind='bar', figsize=(20,4))\n\n    # Return a boolean indicating the function was successfully executed\n    return True\n\n# Visualizing the frequency distribution of games in relation to the date\nfind_dist(games_df, 'gameDate')","3ba581c4":"games_df.head()","8464f06d":"# Visualizing frequency distribution of games in relation to the time\nfind_dist(games_df, 'gameTimeEastern')","8470c1d9":"# Visualizing frequency distribution of games in relation to the week\nfind_dist(games_df, 'week')","49dcaf8d":"games_df.head()","6751564c":"# Creating a column containing the day of the week information extracted from the date\ngames_df['gameDay'] = games_df['gameDate'].apply(lambda x: x.strftime('%A'))","cdb0f186":"games_df.head()","741d6b21":"# Visualizing frequency distribution of games in relation to the day of the week\nplt.figure(figsize=(16,6))\ngraph = sns.countplot(x='gameDay',data=games_df,palette='plasma')\n\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.3,height ,ha=\"center\")\n    \nplt.show()","eab67739":"players_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/players.csv')","779390b1":"players_df.head()","74f574df":"players_df.shape","2663f118":"players_df.isnull().sum()","f53d3d90":"# Converting to datetime.date values\nplayers_df['birthDate'] = pd.to_datetime(players_df['birthDate']).dt.date\n\n# Extracting the year\nplayers_df['birthYear'] = pd.to_datetime(players_df['birthDate']).dt.year","8cf158c6":"players_df.head()","5173bd6f":"# Finding the age of the players in respect to the year 2018.\nplayers_df['age'] = 2018 - players_df['birthYear']\n\nplayers_df.head()","9b7cbe2a":"def find_dist(df, col_name):\n    \n    # Checking the frequency of games in relation to the column values\n    dist = df[col_name].value_counts().reset_index()\n    \n    # Renaming the columns\n    dist.columns = [col_name, 'frequency']\n        \n    # Sorting the DataFrame based on the column values\n    sorted_dist = dist.sort_values(col_name, ascending=True).set_index(col_name)\n\n    # Plotting a bar plot\n    sorted_dist.plot(kind='bar', figsize=(20,4))\n\n    # Return a boolean indicating the function was successfully executed\n    return True","d496c5a6":"# Visualizing frequency distribution of players in relation to their age using the function defined\nfind_dist(players_df, 'age')","7f50bb38":"# Visualizing frequency distribution of players in relation to their age with Seaborn\nplt.figure(figsize=(16,6))\ngraph = sns.countplot(x='age',data=players_df,palette='plasma')\n\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.5,height ,ha=\"center\")\n    \nplt.show()","75b51ac4":"# Visualizing frequency distribution of players in relation to their born year with Seaborn\nplt.figure(figsize=(16,6))\ngraph = sns.countplot(x='birthYear',data=players_df,palette='viridis')\n\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.5,height ,ha=\"center\")\n    \nplt.show()","2d9b2c17":"players_df.head()","c43fa82b":"# Visualizing frequency distribution of players in relation to their colleges\nplt.figure(figsize=(16,6))\ngraph = sns.countplot(x='collegeName',data=players_df,palette='coolwarm',\n                      order=players_df.collegeName.value_counts().iloc[:15].index)\n\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.3,height ,ha=\"center\")\n    \nplt.show()","91350c75":"# Visualizing frequency distribution of players in relation to their positions using the function defined\nfind_dist(players_df, 'position')","0af4372d":"# Visualizing frequency distribution of players in relation to their positions using Seaborn\nplt.figure(figsize=(16,6))\ngraph = sns.countplot(x='position',data=players_df)\n\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.3,height ,ha=\"center\")\n    \nplt.show()","7bb2c8f9":"# Selecting position = CB\nplayers_df.query('position == \"CB\"')","c5c4c856":"# Visualizing frequency distribution of players in relation to the CB position\nfind_dist(players_df.query('position == \"CB\"'), 'age')","27556419":"# Visualizing frequency distribution of players in relation to the WR position\nfind_dist(players_df.query('position == \"WR\"'), 'age')","bc0315af":"players_df.head(10)","0d24c83f":"# Fixing the inconsistency by converting all data to inches\nplayers_df['height'] = players_df['height'].apply(lambda x: int(x[0])*12 + int(x[2]) if '-' in x else int(x))","130a0ba1":"players_df.head(10)","ac71d36e":"players_df.describe()","88542792":"# Extracting the height values\nplayers_df['height'].values","9545951a":"# Assigning the height and weight values\nheight = players_df['height'].values\nweight = players_df['weight'].values","00becca4":"# Plotting a joint plot\nsns.jointplot(weight, height)","476d04d4":"plays_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/plays.csv')","26eccb06":"plays_df.head()","e928fbd6":"plays_df.shape","cb0b05db":"f,ax=plt.subplots(1,2,figsize=(13,5))\n\nsns.countplot(plays_df[\"quarter\"], ax=ax[0])\nax[0].set_title(\"o distribution\")\n\nsns.countplot(plays_df[\"down\"], ax=ax[1])\n\nplt.show()","b7f40a83":"f,ax=plt.subplots(1,2,figsize=(16,5))\n\ng1 = sns.countplot(plays_df[\"yardsToGo\"], ax=ax[0])\ng1.set_xticklabels(g1.get_xticklabels(),rotation=90)\n\ng2 = sns.countplot(plays_df[\"possessionTeam\"], ax=ax[1])\ng2.set_xticklabels(g2.get_xticklabels(),rotation=90)\n\nplt.show()","7874f96f":"f,ax=plt.subplots(1,2,figsize=(15,4))\n\ng1 = sns.countplot(plays_df[\"offenseFormation\"], ax=ax[0])\ng1.set_xticklabels(g1.get_xticklabels(),rotation=90)\n\ng2 = sns.countplot(plays_df[\"defendersInTheBox\"], ax=ax[1])\ng2.set_xticklabels(g2.get_xticklabels(),rotation=90)\n\nfor p in g1.patches:\n    height = p.get_height()\n    g1.text(p.get_x()+p.get_width()\/2., height + 0.3,height ,ha=\"center\")\n    \nfor p in g2.patches:\n    height = p.get_height()\n    g2.text(p.get_x()+p.get_width()\/2., height + 0.3,height ,ha=\"center\")\n    \nplt.show()","928ad77e":"# Visualizing Pass Result using Seaborn\nplt.figure(figsize=(10,5))\ngraph = sns.countplot(x='passResult',data=plays_df)\n\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.3,height ,ha=\"center\")\n    \nplt.show()","9f919456":"There are a total of 50 different game dates.","4ce779dc":"## Analyzing the NFL PLays \n\nPlay data: The plays.csv file contains play-level information from each game. The key variables are gameId and playId","7bbfed6a":"## Analyzing the NFL Games \n\nGame data: The games.csv contains the teams playing in each game. The key variable is gameId","3d1a3ddf":"Age distribution of players in the CB (Cornerback) and WR (Wide Receiver) positions. \nFor this, we select the data points for either of the positions and then, find their age distribution.","71868b22":"- nflId: Player identification number, unique across players (numeric)\n- height: Player height (text)\n- weight: Player weight (numeric)\n- birthDate: Date of birth (YYYY-MM-DD)\n- collegeName: Player college (text)\n- position: Player position (text)\n- displayName: Player name (text)","ab181585":"- gameId: Game identifier, unique (numeric)\n- gameDate: Game Date (time, mm\/dd\/yyyy)\n- gameTimeEastern: Start time of game (time, HH:MM:SS, EST)\n- homeTeamAbbr: Home team three-letter code (text)\n- visitorTeamAbbr: Visiting team three-letter code (text)\n- week: Week of game (numeric)","5c22fca6":"- gameId: Game identifier, unique (numeric)\n\n- playId: Play identifier, not unique across games (numeric)\n\n- playDescription: Description of play (text)\n\n- quarter: Game quarter (numeric)\n\n- down: Down (numeric)\n\n- yardsToGo: Distance needed for a first down (numeric)\n\n- possessionTeam: Team on offense (text)\n\n- playType: Outcome of dropback: sack or pass (text)\n\n- yardlineSide: 3-letter team code corresponding to line-of-scrimmage (text)\n\n- yardlineNumber: Yard line at line-of-scrimmage (numeric)\n\n- offenseFormation: Formation used by possession team (text)\n\n- personnelO: Personnel used by offensive team (text)\n\n- defendersInTheBox: Number of defenders in close proximity to line-of-scrimmage (numeric)\n\n- numberOfPassRushers: Number of pass rushers (numeric)\n\n- personnelD: Personnel used by defensive team (text)\n\n- typeDropback: Dropback categorization of quarterback (text)\n\n- preSnapHomeScore: Home score prior to the play (numeric)\n\n- preSnapVisitorScore: Visiting team score prior to the play (numeric)\n\n- gameClock: Time on clock of play (MM:SS)\n\n- absoluteYardlineNumber: Distance from end zone for possession team (numeric)\n\n- penaltyCodes: NFL categorization of the penalties that ocurred on the play. For purposes of this contest, the most important penalties are Defensive Pass Interference (DPI), Offensive Pass Interference (OPI), Illegal Contact (ICT), and Defensive Holding (DH). Multiple penalties on a play are separated by a ; (text)\n\n- penaltyJerseyNumber: Jersey number and team code of the player commiting each penalty. Multiple penalties on a play are separated by a ; (text)\n\n- passResult: Outcome of the passing play (C: Complete pass, I: Incomplete pass, S: Quarterback sack, IN: Intercepted pass, text)\n\n- offensePlayResult: Yards gained by the offense, excluding penalty yardage (numeric)\n\n- playResult: Net yards gained by the offense, including penalty yardage (numeric)\n\n- epa: Expected points added on the play, relative to the offensive team. Expected points is a metric that estimates the average of every next scoring outcome given the play's down, distance, yardline, and time remaining (numeric)\n\n- isDefensivePI: An indicator variable for whether or not a DPI penalty ocurred on a given play (TRUE\/FALSE)","4ccc9011":"## Analyzing the Players\n\nPlayer data: The players.csv file contains player-level information from players that participated in any of the tracking data files. \nThe key variable is nflId."}}