{"cell_type":{"a58a94c9":"code","11819576":"code","de551177":"code","b4f37504":"code","71d75878":"code","0882de56":"code","97675b19":"code","67b7832d":"code","2732b97d":"code","27c407f5":"code","30cc4cde":"code","8ca38bbe":"code","cccab81c":"code","a7721282":"code","55371084":"code","4a6cf822":"code","2026c3c6":"code","e7652f65":"code","2c166b4f":"code","5d7a37b2":"code","b8337966":"code","c8be488f":"code","1d13c5a6":"code","e4c45a3a":"code","fd4d7755":"code","da0a47ad":"code","a2112d01":"markdown","d951ae7a":"markdown","fdc800de":"markdown","9e9a18b5":"markdown","2e3cc066":"markdown","5711fc94":"markdown","56ae46eb":"markdown","7d448148":"markdown","25651ff7":"markdown","8cdfd5e7":"markdown","c16cbf58":"markdown","657dbb34":"markdown"},"source":{"a58a94c9":"import os\nimport json\nfrom pprint import pprint\nfrom copy import deepcopy\n\nimport numpy as np\nimport pandas as pd\nfrom tqdm.notebook import tqdm","11819576":"def format_name(author):\n    middle_name = \" \".join(author['middle'])\n    \n    if author['middle']:\n        return \" \".join([author['first'], middle_name, author['last']])\n    else:\n        return \" \".join([author['first'], author['last']])\n\n\ndef format_affiliation(affiliation):\n    text = []\n    location = affiliation.get('location')\n    if location:\n        text.extend(list(affiliation['location'].values()))\n    \n    institution = affiliation.get('institution')\n    if institution:\n        text = [institution] + text\n    return \", \".join(text)\n\ndef format_authors(authors, with_affiliation=False):\n    name_ls = []\n    \n    for author in authors:\n        name = format_name(author)\n        if with_affiliation:\n            affiliation = format_affiliation(author['affiliation'])\n            if affiliation:\n                name_ls.append(f\"{name} ({affiliation})\")\n            else:\n                name_ls.append(name)\n        else:\n            name_ls.append(name)\n    \n    return \", \".join(name_ls)\n\ndef format_body(body_text):\n    texts = [(di['section'], di['text']) for di in body_text]\n    texts_di = {di['section']: \"\" for di in body_text}\n    \n    for section, text in texts:\n        texts_di[section] += text\n\n    body = \"\"\n\n    for section, text in texts_di.items():\n        body += section\n        body += \"\\n\\n\"\n        body += text\n        body += \"\\n\\n\"\n    \n    return body\n\ndef format_bib(bibs):\n    if type(bibs) == dict:\n        bibs = list(bibs.values())\n    bibs = deepcopy(bibs)\n    formatted = []\n    \n    for bib in bibs:\n        bib['authors'] = format_authors(\n            bib['authors'], \n            with_affiliation=False\n        )\n        formatted_ls = [str(bib[k]) for k in ['title', 'authors', 'venue', 'year']]\n        formatted.append(\", \".join(formatted_ls))\n\n    return \"; \".join(formatted)","de551177":"def load_files(dirname):\n    filenames = os.listdir(dirname)\n    raw_files = []\n\n    for filename in tqdm(filenames):\n        filename = dirname + filename\n        file = json.load(open(filename, 'rb'))\n        raw_files.append(file)\n    \n    return raw_files\n\ndef generate_clean_df(all_files):\n    cleaned_files = []\n    \n    for file in tqdm(all_files):\n        features = [\n            file['paper_id'],\n            file['metadata']['title'],\n            format_authors(file['metadata']['authors']),\n            format_authors(file['metadata']['authors'], \n                           with_affiliation=True),\n            format_body(file['abstract']),\n            format_body(file['body_text']),\n            format_bib(file['bib_entries']),\n            file['metadata']['authors'],\n            file['bib_entries']\n        ]\n\n        cleaned_files.append(features)\n\n    col_names = ['paper_id', 'title', 'authors',\n                 'affiliations', 'abstract', 'text', \n                 'bibliography','raw_authors','raw_bibliography']\n\n    clean_df = pd.DataFrame(cleaned_files, columns=col_names)\n    clean_df.head()\n    \n    return clean_df","b4f37504":"biorxiv_dir = '\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/biorxiv_medrxiv\/biorxiv_medrxiv\/'\nfilenames = os.listdir(biorxiv_dir)\nprint(\"Number of articles retrieved from biorxiv:\", len(filenames))","71d75878":"all_files = []\n\nfor filename in filenames:\n    filename = biorxiv_dir + filename\n    file = json.load(open(filename, 'rb'))\n    all_files.append(file)","0882de56":"texts = [(di['section'], di['text']) for di in file['body_text']]\ntexts_di = {di['section']: \"\" for di in file['body_text']}\nfor section, text in texts:\n    texts_di[section] += text","97675b19":"body = \"\"\n\nfor section, text in texts_di.items():\n    body += section\n    body += \"\\n\\n\"\n    body += text\n    body += \"\\n\\n\"","67b7832d":"authors = all_files[0]['metadata']['authors']","2732b97d":"authors = all_files[4]['metadata']['authors']\nprint(\"Formatting without affiliation:\")\nprint(format_authors(authors, with_affiliation=False))\nprint(\"\\nFormatting with affiliation:\")\nprint(format_authors(authors, with_affiliation=True))","27c407f5":"cleaned_files = []\n\nfor file in tqdm(all_files):\n    features = [\n        file['paper_id'],\n        file['metadata']['title'],\n        format_authors(file['metadata']['authors']),\n        format_authors(file['metadata']['authors'], \n                       with_affiliation=True),\n        format_body(file['abstract']),\n        format_body(file['body_text']),\n        format_bib(file['bib_entries']),\n        file['metadata']['authors'],\n        file['bib_entries']\n    ]\n    \n    cleaned_files.append(features)","30cc4cde":"col_names = [\n    'paper_id', \n    'title', \n    'authors',\n    'affiliations', \n    'abstract', \n    'text', \n    'bibliography',\n    'raw_authors',\n    'raw_bibliography'\n]\n\nclean_df = pd.DataFrame(cleaned_files, columns=col_names)\nclean_df.head()","8ca38bbe":"#clean_df.to_csv('biorxiv_clean.csv', index=False)","cccab81c":"pmc_dir = '\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/pmc_custom_license\/pmc_custom_license\/'\npmc_files = load_files(pmc_dir)\npmc_df = generate_clean_df(pmc_files)\npmc_df.head()","a7721282":"#pmc_df.to_csv('clean_pmc.csv', index=False)","55371084":"comm_dir = '\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/comm_use_subset\/comm_use_subset\/'\ncomm_files = load_files(comm_dir)\ncomm_df = generate_clean_df(comm_files)\ncomm_df.head()","4a6cf822":"#comm_df.to_csv('clean_comm_use.csv', index=False)","2026c3c6":"noncomm_dir = '\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/noncomm_use_subset\/noncomm_use_subset\/'\nnoncomm_files = load_files(noncomm_dir)\nnoncomm_df = generate_clean_df(noncomm_files)\nnoncomm_df.head()","e7652f65":"!pip install Whoosh","2c166b4f":"from whoosh.index import create_in\nfrom whoosh.fields import *","5d7a37b2":"schema = Schema(paper_id = TEXT(stored=True), title=TEXT(stored=True), abstract = TEXT(stored = True), content = TEXT(stored = True))","b8337966":"ix = create_in(\".\", schema)","c8be488f":"writer = ix.writer()","1d13c5a6":"papers = [clean_df, pmc_df, comm_df, noncomm_df]\n#merged_papers = pd.concat(papers)","e4c45a3a":"for paper_set in papers:\n    for index, row in paper_set.iterrows():\n        writer.add_document(paper_id = row['paper_id'],\n                            title    = row['title'],\n                            abstract = row['abstract'],\n                            content  = row['text']\n                           )\nwriter.commit()","fd4d7755":"from whoosh.qparser import QueryParser\nfrom whoosh.query import *","da0a47ad":"searcher = ix.searcher()\nproposed_time_strings = []\nwith ix.searcher() as searcher:\n    parser = QueryParser(\"content\", ix.schema)\n    querystring = u\"human incubation AND(content:period OR content:time) AND(content:corona) AND(content:virus)\"# AND(content:months OR content:weeks OR content:days OR content:hours OR content:minutes OR content:seconds)\"\n    myquery = parser.parse(querystring)\n    print(myquery)\n    results = searcher.search(myquery)\n    results.fragmenter.surround = 500\n    results.fragmenter.maxchars = 1500\n    print(len(results))\n    for res in results:\n        print(res['title'])\n        #if(str.find(sub,start,end))\n        res_strings = res.highlights(\"content\", top = 5)\n        print(res_strings)\n        print(\"END__________________________________________________\")\n        #if(res_strings.find(\"days\") or res_strings.find(\"minutes\") or res_strings.find(\"hours\") or res_strings.find(\"seconds\") or res_strings.find(\"weeks\")):\n        proposed_time_strings.append(res_strings)\n        #proposed_times.append([int(s) for s in res_strings.split() if s.isdigit()])\n    \n    \n        ","a2112d01":"## How long is the incubation period of the virus?\n\nFrom searching through the literature we find the following points:\n\n*The history and epidemiology of Middle East respiratory syndrome corona virus* reports that the median incubation period for MERS-CoV is 5.2-12 days.\n\n*Simulating the infected population and spread trend of 2019-nCov under different policy by EIR model* reports that \"Early predictions for incubation time are between 2 and 14 days, based on data from similar coronaviruses, with the 95th percentile of the distribution at 12.5 days [1] .\n\n*Clinical characteristics of 82 death cases with COVID-19* states the following: [4] [5] [6] [7] Generally, the incubation period of COVID-19 was 3 to 7 days.\nNOTE: I have left the citation numbers for further searching -- this paper seems to have the citations at the beggining of sentences?\n\n*Association of Population migration and Coronavirus Disease 2019 epidemic control* says 7 days: However, during the 24 hours around the announcement of travel ban in Wuhan, a sudden large inflow from Wuhan was observed due to the fleeing population. This would explain the burst of new cases on January 31, despite the launch of Level 1 Response. The time lag of 7 days was consistent with the average incubation period reported [23] .\n\n\nThese values were extracted manually from the highlights of the queries. This process could be expedited with regexp queries","d951ae7a":"Now we'll iterate over all of the papers and add them to our index.","fdc800de":"## Data Prep Acknowledgements\n\nAll of the data prep was taken from this notebook: https:\/\/www.kaggle.com\/xhlulu\/cord-19-eda-parse-json-and-generate-clean-csv. Thank you, xhlulu!\n\n## Goal\n\nThe goal in this notebook is to take the cleaned data frames, index them, and strategically search them to find the answers to the task questions.","9e9a18b5":"Next, we create an indexiing object that is defined with our schema.","2e3cc066":"## PMC: Generate CSV","5711fc94":"## Commercial Use: Generate CSV","56ae46eb":"Let's import the parsing and querying tools.","7d448148":"Now we need to make a writer to store our indexed data.","25651ff7":"# Indexing\n\nBefore we can begin looking into the data, it's best to index it for faster and more efficient querying.\n\nFirst we need to define a schema that represents what we'll be storing.  For now, I just want to have the paper_id, title, abstract, and main text of the papers.","8cdfd5e7":"## Non-commercial Use: Generate CSV","c16cbf58":"## Indexing and Searching through the data\n\nI'll be using the library [Whoosh](https:\/\/whoosh.readthedocs.io\/en\/latest\/highlight.html) to index and process the data.","657dbb34":"Before we index the data, let's make it easier to iterate over."}}