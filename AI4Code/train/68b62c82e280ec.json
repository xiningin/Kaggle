{"cell_type":{"673a33f5":"code","3d4cf811":"code","6eefbd5c":"code","5f2f2e5a":"code","d98aea2c":"code","0d7c4876":"code","959d6679":"code","17b166ae":"code","c285e59b":"code","48d8464b":"code","e8758e9d":"code","c69e316e":"code","7ba79a9c":"code","4dd8e5c3":"code","b56387be":"code","1bbc14b5":"code","c11c494a":"code","b5156564":"code","df5d4ae9":"code","d9247055":"code","a531680d":"code","4ac41316":"code","3a7f85ac":"code","d3f3525a":"code","c6bb255f":"code","e9fd35fb":"code","6f89d2d1":"code","87dca723":"code","03e9dd70":"code","0fd194c5":"code","d134cca3":"code","2d3dabf4":"code","39aca6a5":"code","e435098e":"code","3fba8285":"code","698c241a":"code","22bb8fcb":"code","9fcc444c":"code","e90c1b2d":"code","8c57ffe0":"code","b3b3c056":"code","8ecec778":"code","89361562":"code","9a537e4a":"code","68caab09":"code","805f0ec6":"code","d26c03e5":"code","1c92f084":"code","c02a08d7":"code","db35d426":"code","72926ac0":"code","b6f188bc":"code","933f2ca7":"code","9e865c47":"code","83e88356":"markdown"},"source":{"673a33f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3d4cf811":"# Read suicides dataframe\nsd = pd.read_csv('\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv')","6eefbd5c":"# What's in the table?\nsd.head()","5f2f2e5a":"# Erase year 2016 (I will work with the other years)\nsd = sd[sd.year != 2016]","d98aea2c":"# See if the names of columns has an extra spacer of something\nlist(sd.columns.values) ","0d7c4876":"# Rename columns for better code\nsd.rename(columns={\"suicides_no\": \"suicides\", \"suicides\/100k pop\": \"s\/100k\", \n                   \" gdp_for_year ($) \": \"gdp_for_year\", \"gdp_per_capita ($)\": \"gdp\" }, inplace=True)","959d6679":"list(sd.columns.values) ","17b166ae":"# Deleting columns that I not going to use\nsd.drop(['country-year', 'HDI for year', 'gdp_for_year'], axis=1, inplace=True)","c285e59b":"sd","48d8464b":"# How many unique countries\nlen(sd.country.unique())","e8758e9d":"sd.describe()","c69e316e":"# How many women and men?\nt1 = pd.pivot_table(sd, values='suicides', index=['country'], columns=['sex'], aggfunc=np.sum)\nplt.figure(figsize=(8, 7))\nsplot = t1[['male','female']].sum().plot.bar(color=['red', 'blue'])\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')","7ba79a9c":"splot = t1[['male','female']].sum().plot.pie(autopct='%1.1f%%')\nplt.ylabel(\"Sex\")","4dd8e5c3":"# Study generations\nsd.generation.unique()","b56387be":"# How many by generation?\nt2 = pd.pivot_table(sd, values='suicides', index=['country'], columns=['generation'], aggfunc=np.sum)\nplt.figure(figsize=(8, 7))\nsplot = t2[['G.I. Generation', 'Silent','Boomers', 'Generation X', 'Millenials', 'Generation Z']].sum().plot.bar(color=['green','yellow', 'red', 'blue', 'brown'])\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')","1bbc14b5":"# Study age range\nsd.age.unique()","c11c494a":"# How many by generation?\nt3 = pd.pivot_table(sd, values='suicides', index=['country'], columns=['age'], aggfunc=np.sum)\nplt.figure(figsize=(8, 7))\nsplot = t3[['5-14 years', '15-24 years','25-34 years', '35-54 years', '55-74 years', '75+ years']].sum().plot.bar(color=['green','yellow', 'red', 'blue', 'brown'])\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')","b5156564":"# How many by Age?\nt3 = pd.pivot_table(sd, values='suicides', index=['country'], columns=['age'], aggfunc=np.sum)\nplt.figure(figsize=(8, 7))\nsplot = t3[['5-14 years', '15-24 years','25-34 years', '35-54 years', '55-74 years', '75+ years']]\\\n.sum().plot.pie(autopct='%1.1f%%', explode=(0, 0, 0, 0.1, 0, 0) )\nplt.ylabel(\"Age\")","df5d4ae9":"# Which country has more suicides in total?\nsd[sd['suicides']==sd['suicides'].max()]['country']","d9247055":"# Top 20 countries with more suicides\nt1 = pd.pivot_table(sd, values='s\/100k', index=['country'], columns=['sex'], aggfunc=np.sum)\nt1['Total'] = t1['female'] + t1['male']\nt1.sort_values(by = 'Total',ascending = False).head(20)","a531680d":"# Create new table with n\u00ba of suicides per age and year\nt2 = pd.pivot_table(sd, values='suicides', index=['year'], columns=['age'], aggfunc=np.sum)","4ac41316":"t2","3a7f85ac":"# Studying young people\nt2.drop(columns=['35-54 years', '55-74 years', '75+ years'], inplace =True)","d3f3525a":"# General plot for obtaining the top years\nt2.plot(kind='barh', figsize=(20,10))","c6bb255f":"# Range with the bigger suicedes rate\nsub_t2 = t2.iloc[10:19]","e9fd35fb":"sub_t2.plot(kind='barh', figsize=(20,10))","6f89d2d1":"# Create new table with n\u00ba of suicides per sex and year\npd.pivot_table(sd, values='suicides', index=['year'], columns=['sex'], aggfunc=np.sum).plot.bar(figsize=(20,10))\n","87dca723":"ct=pd.pivot_table(sd, values='suicides', index=['year'], columns=['sex'], aggfunc=np.sum)\n# Comparing the worst year of lower (1987) and the worst higger (2000)\n# Percentage\n100*(ct.iloc[2][1]\/ct.iloc[15][1])","03e9dd70":"# Study generations\nsd.generation.unique()","0fd194c5":"# Top 20 countries with more suicides in the millenials\n# Suicides per 100k population\nt3 = pd.pivot_table(sd, values='s\/100k', index=['country'], columns=['generation'], aggfunc=np.sum)\nt3.sort_values(by = 'Millenials',ascending = False).head(20)","d134cca3":"# Top 20 countries with more suicides in the Generation X\n# Suicides per 100k population\nt4 = pd.pivot_table(sd, values='s\/100k', index=['country'], columns=['generation'], aggfunc=np.sum)\nt4.sort_values(by = 'Generation X',ascending = False).head(20)","2d3dabf4":"# Top 20 countries with more suicides in the Generation Z\n# Suicides per 100k population\nt5 = pd.pivot_table(sd, values='s\/100k', index=['country'], columns=['generation'], aggfunc=np.sum)\nt5.sort_values(by = 'Generation Z',ascending = False).head(20)","39aca6a5":"lit = sd[sd['country']=='Lithuania']\nlit","e435098e":"# Relation between GDP and Suicides\nsns.jointplot(x='gdp', y='suicides', kind='reg', data=lit)","3fba8285":"# How many by generation?\ntl = pd.pivot_table(lit, values='suicides', index=['country'], columns=['age'], aggfunc=np.sum)\nplt.figure(figsize=(8, 7))\ntl_o = tl[['5-14 years', '15-24 years','25-34 years', '35-54 years', '55-74 years', '75+ years']].sum().plot.bar(color=['green','yellow', 'red', 'blue', 'brown'])\nfor p in tl_o.patches:\n    tl_o.annotate(format(p.get_height(), '.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')","698c241a":"# How many by generation?\nt2 = pd.pivot_table(lit, values='suicides', index=['country'], columns=['generation'], aggfunc=np.sum)\nplt.figure(figsize=(8, 7))\nsplot = t2[['G.I. Generation', 'Silent','Boomers', 'Generation X', 'Millenials', 'Generation Z']].sum().plot.bar(color=['green','yellow', 'red', 'blue', 'brown'])\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')","22bb8fcb":"sd1 = sd.groupby(['country'], as_index = False).sum()\nsd1","9fcc444c":"!pip install chart_studio","e90c1b2d":"# Map plot with the suicides number\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\n\n\nlayout = dict(title='Number of suicides', geo=dict(showframe=False, projection={'type': 'natural earth'}))\n\ndata = go.Choropleth(locations=sd1['country'], \n                     locationmode='country names', \n                     z=sd1['suicides'], \n                     colorscale='Viridis', \n                     colorbar={'title': 'Suicides'})\n\nfig = go.Figure(data=[data], layout=layout)\n\niplot(fig)","8c57ffe0":"sd.columns","b3b3c056":"y = sd['suicides']","8ecec778":"X = sd[['gdp', 'population']]","89361562":"# Create a test data\nfrom sklearn.model_selection import train_test_split","9a537e4a":"# Use random_state for reproducibility\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=45)","68caab09":"from sklearn.linear_model import LinearRegression","805f0ec6":"# Linear regression object\nlm = LinearRegression()","d26c03e5":"# Fit the training data\nlm.fit(X_train,y_train)","1c92f084":"# The coefficients\nprint('Coefficients: \\n', lm.intercept_)","c02a08d7":"# The coefficients\nprint('Coefficients: \\n', lm.coef_)","db35d426":"cdf = pd.DataFrame(lm.coef_, X.columns, columns=['Coeff'])\ncdf.head()","72926ac0":"# We give to the model data that never saw (in our case X_text)\n# We train our model with X_train\npredictions = lm.predict( X_test)","b6f188bc":"plt.scatter(y_test,predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')","933f2ca7":"# calculate these metrics by hand!\nfrom sklearn import metrics\nimport numpy as np\n\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","9e865c47":"sns.distplot((y_test-predictions),bins=40);","83e88356":"As you can see gdp_for_year ($)  has two extra spaces. These extra characters produces problems."}}