{"cell_type":{"01fd4b8c":"code","5ea5af44":"code","8c5fd7ee":"code","43d54abf":"code","6329b44c":"code","2293cb1f":"code","f328ba6e":"code","5ded9de8":"code","fe761fd0":"code","42b9f97c":"code","b32450a2":"code","19a850d7":"code","27b23c5d":"code","7ae464ac":"code","db136f2f":"code","a065fb53":"code","8375d588":"code","98a74ecf":"code","b6b8a984":"code","836971d6":"code","b3498a59":"code","5c583c71":"code","7135a181":"code","fd11a915":"code","2b696894":"code","3e8749b9":"code","8656b3e1":"code","69f0f0dd":"code","1778fe5b":"code","850d2930":"code","c79fbd32":"code","3d7189e3":"code","ed84a890":"code","52c208df":"code","e386929f":"markdown","a29be0a3":"markdown","ae95a87a":"markdown"},"source":{"01fd4b8c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5ea5af44":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","8c5fd7ee":"train.head()","43d54abf":"test.info()","6329b44c":"train.isnull().sum()","2293cb1f":"test.isnull().sum()","f328ba6e":"#Treat Age\ntrain['Age'] = train['Age'].fillna(value=train['Age'].median())\ntest['Age'] = test['Age'].fillna(value=test['Age'].median())","5ded9de8":"#Treat Fare\ntrain['Fare'] = train['Fare'].fillna(value=train['Fare'].median())\ntest['Fare'] = test['Fare'].fillna(value=test['Fare'].median())","fe761fd0":"train['Embarked'].mode()[0]","42b9f97c":"#Treat Embarked\ntrain['Embarked'] = train['Embarked'].fillna(value=train['Embarked'].mode()[0])\ntest['Embarked'] = test['Embarked'].fillna(value=test['Embarked'].mode()[0])","b32450a2":"#Treat Cabin\ntrain['Cabin'] = train['Cabin'].fillna('Missing')\ntrain['Cabin'] = train['Cabin'].str[0]\ntrain['Cabin'].value_counts()","19a850d7":"#Treat Cabin\ntest['Cabin'] = test['Cabin'].fillna('Missing')\ntest['Cabin'] = test['Cabin'].str[0]\ntest['Cabin'].value_counts()","27b23c5d":"#Extract Title from Name\ntrain['Title'] = train['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntest['Title'] = test['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","7ae464ac":"#We will combine a few categories, since few of them are unique \ntrain['Title'] = train['Title'].replace(['Capt', 'Dr', 'Major', 'Rev'], 'Officer')\ntrain['Title'] = train['Title'].replace(['Lady', 'Countess', 'Don', 'Sir', 'Jonkheer', 'Dona'], 'Royal')\ntrain['Title'] = train['Title'].replace(['Mlle', 'Ms'], 'Miss')\ntrain['Title'] = train['Title'].replace(['Mme'], 'Mrs')\ntrain['Title'].value_counts()","db136f2f":"#We will combine a few categories, since few of them are unique \ntest['Title'] = test['Title'].replace(['Capt', 'Dr', 'Major', 'Rev'], 'Officer')\ntest['Title'] = test['Title'].replace(['Lady', 'Countess', 'Don', 'Sir', 'Jonkheer', 'Dona'], 'Royal')\ntest['Title'] = test['Title'].replace(['Mlle', 'Ms'], 'Miss')\ntest['Title'] = test['Title'].replace(['Mme'], 'Mrs')\ntest['Title'].value_counts()","a065fb53":"#Family Size & Alone \ntrain['Family_Size'] = train['SibSp'] + train['Parch'] + 1\ntrain['IsAlone'] = 0\ntrain.loc[train['Family_Size']==1, 'IsAlone'] = 1","8375d588":"#Family Size & Alone \ntest['Family_Size'] = test['SibSp'] + test['Parch'] + 1\ntest['IsAlone'] = 0\ntest.loc[train['Family_Size']==1, 'IsAlone'] = 1","98a74ecf":"train.head()","b6b8a984":"all = pd.concat([train, test], sort = False)\nall.info()","836971d6":"all_dummies = pd.get_dummies(all.drop(['Name', 'Ticket'], axis = 1), drop_first = True)\nall_dummies.head()","b3498a59":"all_train = all_dummies[all_dummies['Survived'].notna()]","5c583c71":"all_test = all_dummies[all_dummies['Survived'].isna()]","7135a181":"y = all_train['Survived']\nX = all_train.drop(['Survived', 'PassengerId'], axis = 1)","fd11a915":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.30, random_state=101)","2b696894":"from sklearn.linear_model import LogisticRegression","3e8749b9":"logModel = LogisticRegression(max_iter = 5000)\nlogModel.fit(X_train, y_train)","8656b3e1":"predictions = logModel.predict(X_test)\npredictions","69f0f0dd":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","1778fe5b":"logModel.score(X_train, y_train)","850d2930":"logModel.score(X_test, y_test)","c79fbd32":"X_Submission = all_test.drop(['PassengerId', 'Survived'], axis = 1)","3d7189e3":"pred_for_submission = logModel.predict(X_Submission).astype(int)","ed84a890":"logSub = pd.DataFrame({'PassengerId': all_test['PassengerId'], 'Survived':pred_for_submission })\nlogSub.head(1)","52c208df":"logSub.to_csv(\"1_Logistics_Regression_Submission.csv\", index = False)","e386929f":"# Make Submission","a29be0a3":"# Process Data for Modelling","ae95a87a":"# Log Model"}}