{"cell_type":{"62e2c523":"code","f6877883":"code","101fb291":"code","d63194eb":"code","7c27f775":"code","eb8473c0":"code","84397071":"code","b7f6d6ea":"markdown","7c4098a9":"markdown","b7e7bb11":"markdown","3cea2f42":"markdown","7b67ad42":"markdown","5b2bece1":"markdown"},"source":{"62e2c523":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport keras\nfrom tqdm import tqdm\nimport cv2\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f6877883":"from keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(\n        '..\/input\/brain-tumor-mri-dataset\/Training\/', \n        target_size=(150, 150), \n        batch_size=20, \n        class_mode='categorical',\n        shuffle=True)\n\nvalidation_generator = test_datagen.flow_from_directory(\n         '..\/input\/brain-tumor-mri-dataset\/Testing\/',\n        target_size=(150, 150),\n        batch_size=20,\n        color_mode='rgb',\n        class_mode='categorical',\n        shuffle=True)","101fb291":"for data_batch, labels_batch in train_generator:\n    print('data batch shape:', data_batch.shape)\n    print('labels batch shape:', labels_batch.shape)\n    plt.imshow(data_batch[0])\n    break","d63194eb":"from keras import layers\nfrom keras import models\nfrom tensorflow.keras import optimizers\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(4, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n                      optimizer=optimizers.RMSprop(learning_rate=1e-4),\n                      metrics=['acc'])","7c27f775":"model.summary()","eb8473c0":"history = model.fit_generator(\n        train_generator,\n        steps_per_epoch=100,\n        epochs=30,\n        validation_data=validation_generator,\n        validation_steps=1)","84397071":"test_generator = test_datagen.flow_from_directory(\n         '..\/input\/brain-tumor-mri-dataset\/Testing\/',\n        target_size=(150, 150),\n        batch_size=20,\n        color_mode='rgb',\n        class_mode='categorical')\n\ntest_loss, test_acc = model.evaluate_generator(test_generator, steps=50)\nprint('test acc:', test_acc)","b7f6d6ea":"# Keras Pre-processing","7c4098a9":"This is what an individual image looks like after re-scaling","b7e7bb11":"# After pre-processing","3cea2f42":"# Building model","7b67ad42":"Finding accuracy of model on test data set","5b2bece1":"Splitting into training and validation data sets"}}