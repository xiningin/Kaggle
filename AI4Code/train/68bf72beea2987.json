{"cell_type":{"32413d4f":"code","46a55ea6":"code","4cd20340":"code","47451c32":"code","6e00dcae":"code","107285c3":"code","e3b0af21":"code","62bc4d79":"code","71ccb489":"code","1948f668":"code","674e25be":"code","1560ebee":"code","842c2085":"code","84c0dde4":"markdown","7d22bac8":"markdown","2f754eba":"markdown","0c83f774":"markdown","2dda1c07":"markdown","46975d63":"markdown","89eb4e26":"markdown","f8937b59":"markdown","6977d389":"markdown","cc0d6972":"markdown"},"source":{"32413d4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46a55ea6":"import json\ndata  = []\nwith open(\"\/kaggle\/input\/arxiv\/arxiv-metadata-oai-snapshot.json\", 'r') as f:\n    for line in f: \n        data.append(json.loads(line))","4cd20340":"data = pd.DataFrame(data[:50000])","47451c32":"# installing haystack\n\n! pip install git+https:\/\/github.com\/deepset-ai\/haystack.git","6e00dcae":"# importing necessary dependencies\n\nfrom haystack import Finder\nfrom haystack.indexing.cleaning import clean_wiki_text\nfrom haystack.indexing.utils import convert_files_to_dicts, fetch_archive_from_http\nfrom haystack.reader.farm import FARMReader\nfrom haystack.reader.transformers import TransformersReader\nfrom haystack.utils import print_answers","107285c3":"! wget https:\/\/artifacts.elastic.co\/downloads\/elasticsearch\/elasticsearch-7.6.2-linux-x86_64.tar.gz -q\n! tar -xzf elasticsearch-7.6.2-linux-x86_64.tar.gz\n! chown -R daemon:daemon elasticsearch-7.6.2\n \nimport os\nfrom subprocess import Popen, PIPE, STDOUT\nes_server = Popen(['elasticsearch-7.6.2\/bin\/elasticsearch'],\n                   stdout=PIPE, stderr=STDOUT,\n                   preexec_fn=lambda: os.setuid(1)  # as daemon\n                  )\n# wait until ES has started\n! sleep 30","e3b0af21":"from haystack.database.elasticsearch import ElasticsearchDocumentStore\ndocument_store = ElasticsearchDocumentStore(host=\"localhost\", username=\"\", password=\"\", index=\"document\")","62bc4d79":"# Now, let's write the dicts containing documents to our DB.\ndocument_store.write_documents(data[['title', 'abstract']].rename(columns={'title':'name','abstract':'text'}).to_dict(orient='records'))","71ccb489":"from haystack.retriever.sparse import ElasticsearchRetriever\nretriever = ElasticsearchRetriever(document_store=document_store)","1948f668":"reader = FARMReader(model_name_or_path=\"deepset\/roberta-base-squad2\", use_gpu=True, context_window_size=500)","674e25be":"finder = Finder(reader, retriever)","1560ebee":"sample_questions = [\"What do we know about Bourin and Uchiyama?\",\n       \"How is structure of event horizon linked with Morse theory?\",\n       \"What do we know about symbiotic stars\"]","842c2085":"prediction = finder.get_answers(question=\"What do we know about symbiotic stars\", top_k_retriever=10, top_k_reader=2)\nresult = print_answers(prediction, details=\"minimal\")","84c0dde4":"### And we're done !\nBelow is the list of questions that I was asking the model and the results were pleasing.","7d22bac8":"I'm limiting my analysis to just 50,000 documents because of the compute limit.","2f754eba":"Once `ElasticsearchDocumentStore` is setup, we will write our documents\/texts to the DocumentStore.\n* Writing documents to `ElasticsearchDocumentStore` requires a format - **List of dictionaries**\nThe default format here is: \n`[{\"name\": \"<some-document-name>, \"text\": \"<the-actual-text>\"},\n{\"name\": \"<some-document-name>, \"text\": \"<the-actual-text>\"}\n{\"name\": \"<some-document-name>, \"text\": \"<the-actual-text>\"}]`\n\n(Optionally: you can also add more key-value-pairs here, that will be indexed as fields in Elasticsearch and can be accessed later for filtering or shown in the responses of the Finder)\n\n* We will use **title** column to pass as `name` and **abstract** column to pass as the `text`","0c83f774":"And finally:  The **Finder** sticks together reader and retriever in a pipeline to answer our actual questions. ","2dda1c07":"### Setting up DocumentStore\nHaystack finds answers to queries within the documents stored in a `DocumentStore`. The current implementations of `DocumentStore` include `ElasticsearchDocumentStore`, `SQLDocumentStore`, and `InMemoryDocumentStore`.\n\nBut they recommend `ElasticsearchDocumentStore` because as it comes preloaded with features like [full-text queries](https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/full-text-queries.html), [BM25 retrieval](https:\/\/www.elastic.co\/elasticon\/conf\/2016\/sf\/improved-text-scoring-with-bm25), and [vector storage for text embeddings](https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/7.6\/dense-vector.html).\n\nSo - Let's set up a `ElasticsearchDocumentStore`","46975d63":"### Reading the entire json metadata\nThis cell may take a minute to run considering the volume of data","89eb4e26":"# Question & Answering with ArXiV papers at scale\nThis notebook is about neural question and answering using transformers models (ALBERT) at SCALE. The below approach is capable to perform Q&A across millions of documents in few seconds.\n\nI will be using ArXiV's papers abstracts to do Q&A at this point it time as I do not have access to actual PDF texts. But - the same approach can be followed to seek answers from actual text in place of just the abstracts. \n\nI will post another notebook when I get my hands on the actual paper's texts. Now let's dive in...","f8937b59":"### Welcome Haystack!\n\n<img src=\"https:\/\/raw.githubusercontent.com\/deepset-ai\/haystack\/master\/docs\/img\/sketched_concepts_white.png\">\n\nThe secret sauce behind scaling up is **Haystack**. It lets you scale QA models to large collections of documents! \nYou can read more about this amazing library here https:\/\/github.com\/deepset-ai\/haystack\n\nFor installation: `! pip install git+https:\/\/github.com\/deepset-ai\/haystack.git`\n\nBut just to give a background, there are 3 major components to Haystack.\n1. **Document Store:** Database storing the documents for our search. We recommend Elasticsearch, but have also more light-weight options for fast prototyping (SQL or In-Memory).\n2. **Retriever:** Fast, simple algorithm that identifies candidate passages from a large collection of documents. Algorithms include TF-IDF or BM25, custom Elasticsearch queries, and embedding-based approaches. The Retriever helps to narrow down the scope for Reader to smaller units of text where a given question could be answered.\n3. **Reader:** Powerful neural model that reads through texts in detail to find an answer. Use diverse models like BERT, RoBERTa or XLNet trained via FARM or Transformers on SQuAD like tasks. The Reader takes multiple passages of text as input and returns top-n answers with corresponding confidence scores. You can just load a pretrained model from Hugging Face's model hub or fine-tune it to your own domain data.\n\nAnd then there is **Finder** which glues together a Reader and a Retriever as a pipeline to provide an easy-to-use question answering interface.","6977d389":"A **Reader** scans the texts returned by retrievers in detail and extracts the k best answers. They are based on powerful, but slower deep learning models.\n\nHaystack currently supports Readers based on the frameworks FARM and Transformers. With both you can either load a local model or one from Hugging Face's model hub (https:\/\/huggingface.co\/models).\n\nHere: a medium sized RoBERTa QA model using a Reader based on FARM (https:\/\/huggingface.co\/deepset\/roberta-base-squad2)","cc0d6972":"### Let's prepare Retriever, Reader,  & Finder\n**Retrievers** help narrowing down the scope for the Reader to smaller units of text where a given question could be answered. They use some simple but fast algorithm.\n\nHere: We use Elasticsearch's default BM25 algorithm"}}