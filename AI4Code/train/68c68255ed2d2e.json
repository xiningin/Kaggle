{"cell_type":{"deaa2ef9":"code","33a93766":"code","83d352c3":"code","a2fc5725":"code","ebdc6c4d":"code","55420958":"code","f95a3d6e":"code","57b998f5":"code","b532ae54":"code","39205844":"code","a26446e6":"code","515cbcaa":"code","16fa1dd5":"code","c8f8ef2a":"code","ca5fedc0":"code","408de4b0":"code","85056f63":"code","8975e5e0":"code","3897f612":"code","9db010c7":"code","c062fe0d":"code","4892d292":"code","d11ffd3c":"markdown","4e125b9d":"markdown","074711a1":"markdown","cf73e77e":"markdown","d821d5b6":"markdown","b600e23f":"markdown","404d5404":"markdown","6ab13831":"markdown","87730bc8":"markdown","47eb923a":"markdown","1f744ec9":"markdown","ba13c18b":"markdown","eb7d35c1":"markdown","9db56e43":"markdown"},"source":{"deaa2ef9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\nimport random\n\nimport warnings\nwarnings.simplefilter('ignore')\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\n\nsns.set(style='white', context='notebook', palette='deep')","33a93766":"Y_train = train['label']\nX_train = train.drop('label',axis=1)\ndel train","83d352c3":"plt.figure(figsize=(14,8))\ngraf = sns.countplot(Y_train, palette=\"deep\")\nplt.show()\nY_train.value_counts()","a2fc5725":"X_train.isnull().any().describe()","ebdc6c4d":"test.isnull().any().describe()","55420958":"X_train = X_train\/255.0\ntest = test \/ 255.0","f95a3d6e":"X_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","57b998f5":"Y_train = to_categorical(Y_train, num_classes = 10)","b532ae54":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nX_train, X_val, Y_train, Y_val =train_test_split(X_train,Y_train,test_size=0.2,random_state=42)","39205844":"fig=plt.figure(figsize=(16, 16))\nfor i in range(1,10):\n    rand_num = random.randint(0,25000)\n    fig.add_subplot(3, 3, i)\n    img_number = plt.imshow(X_train[rand_num][:,:,0])","a26446e6":"model = Sequential()\n\nmodel.add(Conv2D(filters = 16, kernel_size = (3, 3), activation='relu',input_shape = (28, 28, 1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 16, kernel_size = (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 16, kernel_size = (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 32, kernel_size = (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))","515cbcaa":"model.summary()","16fa1dd5":"datagen = ImageDataGenerator(zoom_range = 0.1,\n                            height_shift_range = 0.1,\n                            width_shift_range = 0.1,\n                            rotation_range = 10)","c8f8ef2a":"optimizer = Adam(lr=0.0001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)\n","ca5fedc0":"model.compile(optimizer = optimizer, loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n","408de4b0":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","85056f63":"epochs = 20\nbatch_size = 16","8975e5e0":"hist = model.fit_generator(datagen.flow(X_train, Y_train, batch_size=batch_size),\n                           steps_per_epoch=X_train.shape[0] \/\/ batch_size,\n                           epochs=epochs, \n                           verbose=2,\n                           validation_data=(X_val,Y_val), \n                           callbacks=[learning_rate_reduction])","3897f612":"Y_hat = model.predict(X_val)\nY_pred = np.argmax(Y_hat, axis=1)\nY_true = np.argmax(Y_val, axis=1)\ncm = confusion_matrix(Y_true, Y_pred)\nclasses = range(10)\nplt.imshow(cm, interpolation='nearest', cmap = plt.cm.gray_r)\nplt.title('Confusion matrix')\nplt.colorbar()\ntick_marks = np.arange(len(classes))\nplt.xticks(tick_marks, classes, rotation=45)\nplt.yticks(tick_marks, classes)\n\nthresh = cm.max() \/ 2.\nfor i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n    plt.text(j, i, cm[i, j],\n             horizontalalignment=\"center\",\n             color=\"white\" if cm[i, j] > thresh else \"black\")\n\nplt.tight_layout()\nplt.ylabel('True label')\nplt.xlabel('Predicted label')","9db010c7":"fig, ax = plt.subplots(2,1)\nax[0].plot(hist.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(hist.history['val_loss'], color='r', label=\"Validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(hist.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(hist.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","c062fe0d":"predicted_classes = model.predict_classes(test)\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predicted_classes)+1)),\n                         \"Label\": predicted_classes})\nsubmissions.to_csv(\"submissions.csv\", index=False, header=True)","4892d292":"model.save('my_model.h5')\njson_string = model.to_json()","d11ffd3c":"**Hyperparameters **","4e125b9d":"**Importing Necessary Modules**","074711a1":"**Normalization**","cf73e77e":"**Data augmentation**","d821d5b6":"**Training and validation curves**","b600e23f":"** Split training and valdiation set**","404d5404":"**Prediction **","6ab13831":"**Confusion matrix**","87730bc8":"**Data Visualization**","47eb923a":"**Convolutional Neural Networks**","1f744ec9":"** Label encoding**","ba13c18b":"**Data preparation**","eb7d35c1":"**Fitting a model**","9db56e43":"**Reshape**"}}