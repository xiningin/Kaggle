{"cell_type":{"b4de0101":"code","0e4a15b4":"code","b0f3f46c":"code","f27a020a":"code","accd2e39":"code","1b1fa77a":"code","314a08e5":"code","32b9a045":"code","7d2a597b":"code","fca4d70f":"code","34fa7953":"code","70174c9c":"code","f4677ca9":"code","3b7a0150":"code","00227143":"code","66d65509":"code","29fc8299":"code","3d52ceaf":"code","7afbf3e4":"code","e5a02305":"code","3b1d4737":"code","5bce8392":"code","25f6a0a0":"code","a974a1cb":"code","37890120":"code","6c7d8628":"code","f812ab4d":"code","8acbe2ea":"code","a155fe6d":"code","de9ef50d":"code","c4fb2dad":"code","ef72da88":"code","7cd3a950":"code","10d1c344":"code","67d14b20":"code","62e2ce50":"code","31640c95":"markdown","aed8b83d":"markdown","6ae5e24d":"markdown","60ef52d3":"markdown","c96692a9":"markdown","034111f3":"markdown","637e2239":"markdown","d83fb67e":"markdown","1cdcc044":"markdown","186cf1cf":"markdown","06ae2466":"markdown","edec2747":"markdown","e185d2a9":"markdown","816bf410":"markdown","571a591b":"markdown","f32991a7":"markdown","3a6c2afd":"markdown"},"source":{"b4de0101":"import numpy as np\nimport pickle\nimport cv2\nfrom os import listdir\nfrom sklearn.preprocessing import LabelBinarizer\nfrom keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation, Flatten, Dropout, Dense\nfrom keras import backend as K\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import SGD,RMSprop,Adam, Adadelta\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import img_to_array\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n\nimport os\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\/corndieases\/corn disease\"]).decode(\"utf8\"))\n","0e4a15b4":"import os\nprint(os.listdir(\"..\/input\/corndieases\/corn disease\"))","b0f3f46c":"n = 224","f27a020a":"EPOCHS = 50\n\nINIT_LR = 1e-4\nBS = 64\ndefault_image_size = tuple((n, n))\nimage_size = 0\ndirectory_root = '..\/input\/corndieases\/'\nwidth=n\nheight=n\ndepth=3","accd2e39":"def convert_image_to_array(image_dir):\n    try:\n        image = cv2.imread(image_dir)\n        if image is not None :\n            image = cv2.resize(image, default_image_size)   \n            return img_to_array(image)\n        else :\n            return np.array([])\n    except Exception as e:\n        print(f\"Error : {e}\")\n        return None","1b1fa77a":"image_list, label_list = [], []\ntry:\n    print(\"[INFO] Loading images ...\")\n    root_dir = listdir(directory_root)\n    for directory in root_dir :\n        # remove .DS_Store from list\n        if directory == \".DS_Store\" :\n            root_dir.remove(directory)\n\n    for plant_folder in root_dir :\n        plant_disease_folder_list = listdir(f\"{directory_root}\/{plant_folder}\")\n        \n        for disease_folder in plant_disease_folder_list :\n            # remove .DS_Store from list\n            if disease_folder == \".DS_Store\" :\n                plant_disease_folder_list.remove(disease_folder)\n\n        for plant_disease_folder in plant_disease_folder_list:\n            print(f\"[INFO] Processing {plant_disease_folder} ...\")\n            plant_disease_image_list = listdir(f\"{directory_root}\/{plant_folder}\/{plant_disease_folder}\/\")\n                \n            for single_plant_disease_image in plant_disease_image_list :\n                if single_plant_disease_image == \".DS_Store\" :\n                    plant_disease_image_list.remove(single_plant_disease_image)\n\n            for image in plant_disease_image_list:\n                image_directory = f\"{directory_root}\/{plant_folder}\/{plant_disease_folder}\/{image}\"\n                if image_directory.endswith(\".jpg\") == True or image_directory.endswith(\".JPG\") == True:\n                    image_list.append(convert_image_to_array(image_directory))\n                    label_list.append(plant_disease_folder)\n    print(\"[INFO] Image loading completed\")  \nexcept Exception as e:\n    print(f\"Error : {e}\")","314a08e5":"image_size = len(image_list)\nprint(image_size)","32b9a045":"label_binarizer = LabelBinarizer()\nimage_labels = label_binarizer.fit_transform(label_list)\npickle.dump(label_binarizer,open('label_transform.pkl', 'wb'))\nn_classes = len(label_binarizer.classes_)","7d2a597b":"print(label_binarizer.classes_)","fca4d70f":"np_image_list = np.array(image_list, dtype=np.float32) \/ 255.0","34fa7953":"print(\"[INFO] Spliting data to train, test\")\nx_train, x_test, y_train, y_test = train_test_split(np_image_list, image_labels, test_size=0.2, random_state = 42) ","70174c9c":"x_test_final = x_test[-200:]\ny_test_final = y_test[-200:]\n\nx_test = x_test[:-200]\ny_test = y_test[:-200]","f4677ca9":"aug = ImageDataGenerator(\n    rotation_range=25, width_shift_range=0.1,\n    height_shift_range=0.1, shear_range=0.2, \n    zoom_range=0.2,horizontal_flip=True, \n    fill_mode=\"nearest\")","3b7a0150":"from keras import layers\nfrom keras.models import Model\n\nfrom keras.applications import VGG16","00227143":"def return_model():\n    pretrained_model = VGG16(include_top=False,weights=\"imagenet\", input_shape=(n, n,3))\n    \n    new_model = Sequential()\n    new_model.add(pretrained_model)\n    \n    new_model.add(Flatten())\n    new_model.add(Dense(256,activation='relu'))\n    new_model.add(Dropout(0.25))\n    new_model.add(Dense(4,activation='softmax'))\n\n    \n    \n    opt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\n    # distribution\n    new_model.compile(loss=\"categorical_crossentropy\", optimizer=opt,metrics=[\"accuracy\"])\n    return new_model","66d65509":"model = return_model()\nmodel.summary()","29fc8299":"from keras.utils.vis_utils import plot_model\n\nplot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","3d52ceaf":"#opt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\n# distribution\n#model.compile(loss=\"binary_crossentropy\", optimizer=opt,metrics=[\"accuracy\"])\n# train the network\nprint(\"[INFO] training network...\")","7afbf3e4":"from keras import callbacks\nfile_path = \"weights_best_.hdf5\"\ncheckpoint = ModelCheckpoint(file_path, monitor='val_loss', verbose=0, save_best_only=True, mode='min')\nearly = EarlyStopping(monitor=\"val_loss\", mode=\"min\", patience=3)\ncallbacks_list = [checkpoint, early]","e5a02305":"history = model.fit_generator(\n    aug.flow(x_train, y_train, batch_size=BS),\n    validation_data=(x_test, y_test),\n    steps_per_epoch=len(x_train) \/\/ BS,\n    epochs=EPOCHS, verbose=1,\n    callbacks = callbacks_list \n    )","3b1d4737":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\n\n#Train and validation accuracy\nplt.plot(epochs, acc, 'b-o', label='Training accurarcy')\nplt.plot(epochs, val_acc, 'r-o', label='Validation accurarcy')\nplt.title('Training and Validation accurarcy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.figure()\n#Train and validation loss\nplt.plot(epochs, loss, 'b-o', label='Training loss')\nplt.plot(epochs, val_loss, 'r-o', label='Validation loss')\nplt.title('Training and Validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","5bce8392":"from matplotlib.ticker import MaxNLocator\n\nax = plt.figure().gca()\nax.xaxis.set_major_locator(MaxNLocator(integer=True))\nplt.margins(x=0)\n\n# Plot training & validation accuracy values\nplt.plot(history.history['accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train'], loc='upper left')\nplt.show()","25f6a0a0":"from matplotlib.ticker import MaxNLocator\n\nax = plt.figure().gca()\nax.xaxis.set_major_locator(MaxNLocator(integer=True))\nplt.margins(x=0)\n\n# Plot training & validation loss values\nplt.plot(history.history['loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\n","a974a1cb":"print(\"[INFO] Calculating model accuracy\")\nscores = model.evaluate(x_test_final, y_test_final)\nprint(f\"Test Accuracy: {scores[1]*100}\")","37890120":"#Model Save\nmodel.save_weights('model_weights.h5')\nmodel.save('model_keras.h5')","6c7d8628":"from sklearn.metrics import confusion_matrix\ny_pred = model.predict(x_test_final)\n\n#getting labels\ny_pred_labels = np.argmax(y_pred,axis = 1)\ny_true = np.argmax(y_test_final,axis = 1)","f812ab4d":"#Creating a confusion matrix\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_true,y_pred_labels)\ncm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]","8acbe2ea":"label_binarizer.classes_","a155fe6d":"label = ['Corn_(maize)___healthy','Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot', 'Corn_(maize)___Common_rust_','Corn_(maize)___Northern_Leaf_Blight']\nlabel = np.array(label)","de9ef50d":"import pandas as pd\nimport seaborn as sns\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, precision_recall_fscore_support, roc_curve, auc\nfrom itertools import cycle\n\n#Transform to df for easier plotting\ncm_df = pd.DataFrame(cm, index = label,\n                     columns = label\n                    )\n\n\nplt.figure(figsize = (6,6))\nsns.heatmap(cm_df, annot = True,cmap='Blues',cbar=False)\nplt.title('Corn Infection Classification (VGG16)')\nplt.ylabel('True Label')\nplt.xlabel('Prediction label')\nplt.show()","c4fb2dad":"new_label = label\nnew_class = 4","ef72da88":"label.shape","7cd3a950":"#ravel flatten the array into single vector\ny_pred_ravel = y_pred.ravel()\nlw = 2","10d1c344":"plt.rcParams[\"figure.figsize\"] = [8,6]\n\nfpr = dict()\ntpr = dict()\nroc_auc = dict()\n\nfor i in range(new_class):\n    fpr[i], tpr[i], _ = roc_curve(y_test_final[:,i], y_pred[:,i])\n    roc_auc[i] = auc(fpr[i], tpr[i])\n    \ncolors = cycle(['red', 'green','black'])\nfor i, color in zip(range(new_class), colors):\n    plt.plot(fpr[i], tpr[i], color=color, lw=lw,\n             label='ROC curve of class {0}'''.format(label[i]))\n    \nplt.plot([0, 1], [0, 1], 'k--', lw=lw)\nplt.xlim([0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic')\nplt.legend(loc=\"lower right\")\n\nplt.show()\n","67d14b20":"y_pred_probs = model.predict(x_test_final)\ny_pred_classes = np.argmax(y_pred_probs, axis=1)\n\n# reduce to 1d array\nyhat_probs = y_pred_probs[:,0]\nyhat_classes = y_pred_classes\n\ny_test_final = np.argmax(y_test_final, axis=1)","62e2ce50":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test_final, yhat_classes))","31640c95":"Plot the train and val curve","aed8b83d":"# Confusion Matrix","6ae5e24d":"# Adding Callback","60ef52d3":"1. Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot\n2. Corn_(maize)___Common_rust_\n3. Corn_(maize)___healthy\n4. Corn_(maize)___Northern_Leaf_Blight\n","c96692a9":"Fetch images from directory","034111f3":"Import neccessary packages","637e2239":"# ROC Curve\n","d83fb67e":"Transform Image Labels uisng [Scikit Learn](http:\/\/scikit-learn.org\/)'s LabelBinarizer","1cdcc044":"Model Accuracy","186cf1cf":"Model Summary","06ae2466":"Get Size of Processed Image","edec2747":"Print the classes","e185d2a9":"Save model using Pickle","816bf410":"# Change the class name as per your desire","571a591b":"Function to convert images to array","f32991a7":"# Change name in the label","3a6c2afd":"# Taking 200 images seperate for final testing"}}