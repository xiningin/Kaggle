{"cell_type":{"60ca9f68":"code","362bd358":"code","e21e87bb":"code","3ce792f6":"code","aabf52c7":"code","b229fa77":"code","e2610a86":"code","27734153":"code","b2b98e06":"code","283960ac":"code","9e7fa3ef":"markdown","c1daaab1":"markdown","caa49076":"markdown","0b89fd14":"markdown","0846f342":"markdown","de42c9b4":"markdown","f31bdea6":"markdown","dc7362f5":"markdown","d5a7f874":"markdown","89291cf3":"markdown"},"source":{"60ca9f68":"# Setup plotting\nimport matplotlib.pyplot as plt\n\nplt.style.use('seaborn-whitegrid')\n# Set Matplotlib defaults\nplt.rc('figure', autolayout=True)\nplt.rc('axes', labelweight='bold', labelsize='large',\n       titleweight='bold', titlesize=18, titlepad=10)\n\n# Setup feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.deep_learning_intro.ex1 import *","362bd358":"import pandas as pd\n\nred_wine = pd.read_csv('..\/input\/dl-course-data\/red-wine.csv')\nred_wine.head()","e21e87bb":"red_wine.shape # (rows, columns)","3ce792f6":"# YOUR CODE HERE\ninput_shape = [len(red_wine.columns) - 1]\n\n# Check your answer\nq_1.check()","aabf52c7":"# Lines below will give you a hint or solution code\n#q_1.hint()\n#q_1.solution()","b229fa77":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\n# YOUR CODE HERE\nmodel = keras.Sequential([\n    layers.Dense(units=1, input_shape=input_shape)\n])\n\n# Check your answer\nq_2.check()","e2610a86":"# Lines below will give you a hint or solution code\n#q_2.hint()\n#q_2.solution()","27734153":"# YOUR CODE HERE\nw, b = model.weights\n\n# Check your answer\nq_3.check()","b2b98e06":"# Lines below will give you a hint or solution code\n#q_3.hint()\n#q_3.solution()","283960ac":"import tensorflow as tf\nimport matplotlib.pyplot as plt\n\nmodel = keras.Sequential([\n    layers.Dense(1, input_shape=[1]),\n])\n\nx = tf.linspace(-1.0, 1.0, 100)\ny = model.predict(x)\n\nplt.figure(dpi=100)\nplt.plot(x, y, 'k')\nplt.xlim(-1, 1)\nplt.ylim(-1, 1)\nplt.xlabel(\"Input: x\")\nplt.ylabel(\"Target y\")\nw, b = model.weights # you could also use model.get_weights() here\nplt.title(\"Weight: {:0.2f}\\nBias: {:0.2f}\".format(w[0][0], b[0]))\nplt.show()","9e7fa3ef":"You can get the number of rows and columns of a dataframe (or a Numpy array) with the `shape` attribute.","c1daaab1":"(By the way, Keras represents weights as tensors, but also uses tensors to represent data. When you set the `input_shape` argument, you are telling Keras the dimensions of the array it should expect for each example in the training data. Setting `input_shape=[3]` would create a network accepting vectors of length 3, like `[0.2, 0.4, 0.6]`.)\n \n\n# Optional: Plot the output of an untrained linear model\n \nThe kinds of problems we'll work on through Lesson 5 will be *regression* problems, where the goal is to predict some numeric target. Regression problems are like \"curve-fitting\" problems: we're trying to find a curve that best fits the data. Let's take a look at the \"curve\" produced by a linear model. (You've probably guessed that it's a line!)\n \nWe mentioned that before training a model's weights are set randomly. Run the cell below a few times to see the different lines produced with a random initialization. (There's no coding for this exercise -- it's just a demonstration.)","caa49076":"The *Red Wine Quality* dataset consists of physiochemical measurements from about 1600 Portuguese red wines.  Also included is a quality rating for each wine from blind taste-tests. \n\nFirst, run the next cell to display the first few rows of this dataset.","0b89fd14":"# 2) Define a linear model\n\nNow define a linear model appropriate for this task. Pay attention to how many inputs and outputs the model should have.","0846f342":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/191966) to chat with other Learners.*","de42c9b4":"# Keep Going #\n\nAdd hidden layers and [**make your models deep**](https:\/\/www.kaggle.com\/ryanholbrook\/deep-neural-networks) in Lesson 2.","f31bdea6":"**This notebook is an exercise in the [Intro to Deep Learning](https:\/\/www.kaggle.com\/learn\/intro-to-deep-learning) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/ryanholbrook\/a-single-neuron).**\n\n---\n","dc7362f5":"# Introduction #\n\nIn the tutorial we learned about the building blocks of neural networks: *linear units*. We saw that a model of just one linear unit will fit a linear function to a dataset (equivalent to linear regression). In this exercise, you'll build a linear model and get some practice working with models in Keras.\n\nBefore you get started, run the code cell below to set everything up.","d5a7f874":"# 1) Input shape #\n\nHow well can we predict a wine's perceived quality from the physiochemical measurements?  \n\nThe target is `'quality'`, and the remaining columns are the features.  How would you set the `input_shape` parameter for a Keras model on this task?","89291cf3":"# 3) Look at the weights\n\nInternally, Keras represents the weights of a neural network with **tensors**. Tensors are basically TensorFlow's version of a Numpy array with a few differences that make them better suited to deep learning. One of the most important is that tensors are compatible with [GPU](https:\/\/www.kaggle.com\/docs\/efficient-gpu-usage) and [TPU](https:\/\/www.kaggle.com\/docs\/tpu)) accelerators. TPUs, in fact, are designed specifically for tensor computations.\n\nA model's weights are kept in its `weights` attribute as a list of tensors. Get the weights of the model you defined above. (If you want, you could display the weights with something like: `print(\"Weights\\n{}\\n\\nBias\\n{}\".format(w, b))`)."}}