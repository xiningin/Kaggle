{"cell_type":{"fd5137e3":"code","08e276f2":"code","45780246":"code","7dbd246f":"code","92815608":"code","dadf0659":"code","95d3a9ad":"code","00bcaa89":"code","1ec9309e":"code","374ca156":"code","721d9fb6":"code","960e24d2":"code","598d9cf5":"code","a003727f":"code","7a356f6c":"code","7f3b7fe4":"code","378c14cf":"code","33329c00":"code","d66f4bbc":"code","d5470449":"code","feb44901":"code","3c3dca33":"code","ceb2efc4":"code","fbf8fd58":"code","699c38b4":"code","728863a7":"markdown","774548ee":"markdown","c5a92aa1":"markdown","8fbd878d":"markdown","6f7ffa78":"markdown","f6b50225":"markdown","caa73b76":"markdown","0ea8555b":"markdown","6fa9a281":"markdown","ea1fcd44":"markdown","a1d495bd":"markdown","362190e6":"markdown","3e62f83f":"markdown","beb7e954":"markdown","a37a7751":"markdown","e5df3a43":"markdown","0c6a119a":"markdown","a8736e35":"markdown","4c12fbc8":"markdown"},"source":{"fd5137e3":"# Don't forget to make sure your Internet connection is turned on\n! pip install adaptnlp","08e276f2":"import numpy as np\nimport pandas as pd\nimport os\n\ntarget_corrected = True\nto_lower = True","45780246":"MODEL = 'bert'\nMODEL_DIR = '\/kaggle\/' + MODEL + '-working'\ntry:\n    os.mkdir(MODEL_DIR)\nexcept:\n    pass","7dbd246f":"df_train = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv', dtype={'id': np.int16, 'target': np.int8})\ndf_test = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv', dtype={'id': np.int16})","92815608":"# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\ndef clean_tweets(tweet):\n    \"\"\"Removes links and non-ASCII characters\"\"\"\n    \n    tweet = ''.join([x for x in tweet if x in string.printable])\n    \n    # Removing URLs\n    tweet = re.sub(r\"http\\S+\", \"_url_\", tweet)\n    \n    return tweet","dadf0659":"# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\ndef remove_emoji(text):\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'_emoji_', text)","95d3a9ad":"# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\ndef remove_punctuations(text):\n    punctuations = '@#!?+&*[]-%.:\/();$=><|{}^' + \"'`\"\n    \n    for p in punctuations:\n        text = text.replace(p, f' {p} ')\n\n    text = text.replace('...', ' ... ')\n    \n    if '...' not in text:\n        text = text.replace('..', ' ... ')\n    \n    return text","00bcaa89":"# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\nabbreviations = {\n    \"$\" : \" dollar \",\n    \"\u20ac\" : \" euro \",\n    \"4ao\" : \"for adults only\",\n    \"a.m\" : \"before midday\",\n    \"a3\" : \"anytime anywhere anyplace\",\n    \"aamof\" : \"as a matter of fact\",\n    \"acct\" : \"account\",\n    \"adih\" : \"another day in hell\",\n    \"afaic\" : \"as far as i am concerned\",\n    \"afaict\" : \"as far as i can tell\",\n    \"afaik\" : \"as far as i know\",\n    \"afair\" : \"as far as i remember\",\n    \"afk\" : \"away from keyboard\",\n    \"app\" : \"application\",\n    \"approx\" : \"approximately\",\n    \"apps\" : \"applications\",\n    \"asap\" : \"as soon as possible\",\n    \"asl\" : \"age, sex, location\",\n    \"atk\" : \"at the keyboard\",\n    \"ave.\" : \"avenue\",\n    \"aymm\" : \"are you my mother\",\n    \"ayor\" : \"at your own risk\", \n    \"b&b\" : \"bed and breakfast\",\n    \"b+b\" : \"bed and breakfast\",\n    \"b.c\" : \"before christ\",\n    \"b2b\" : \"business to business\",\n    \"b2c\" : \"business to customer\",\n    \"b4\" : \"before\",\n    \"b4n\" : \"bye for now\",\n    \"b@u\" : \"back at you\",\n    \"bae\" : \"before anyone else\",\n    \"bak\" : \"back at keyboard\",\n    \"bbbg\" : \"bye bye be good\",\n    \"bbc\" : \"british broadcasting corporation\",\n    \"bbias\" : \"be back in a second\",\n    \"bbl\" : \"be back later\",\n    \"bbs\" : \"be back soon\",\n    \"be4\" : \"before\",\n    \"bfn\" : \"bye for now\",\n    \"blvd\" : \"boulevard\",\n    \"bout\" : \"about\",\n    \"brb\" : \"be right back\",\n    \"bros\" : \"brothers\",\n    \"brt\" : \"be right there\",\n    \"bsaaw\" : \"big smile and a wink\",\n    \"btw\" : \"by the way\",\n    \"bwl\" : \"bursting with laughter\",\n    \"c\/o\" : \"care of\",\n    \"cet\" : \"central european time\",\n    \"cf\" : \"compare\",\n    \"cia\" : \"central intelligence agency\",\n    \"csl\" : \"can not stop laughing\",\n    \"cu\" : \"see you\",\n    \"cul8r\" : \"see you later\",\n    \"cv\" : \"curriculum vitae\",\n    \"cwot\" : \"complete waste of time\",\n    \"cya\" : \"see you\",\n    \"cyt\" : \"see you tomorrow\",\n    \"dae\" : \"does anyone else\",\n    \"dbmib\" : \"do not bother me i am busy\",\n    \"diy\" : \"do it yourself\",\n    \"dm\" : \"direct message\",\n    \"dwh\" : \"during work hours\",\n    \"e123\" : \"easy as one two three\",\n    \"eet\" : \"eastern european time\",\n    \"eg\" : \"example\",\n    \"embm\" : \"early morning business meeting\",\n    \"encl\" : \"enclosed\",\n    \"encl.\" : \"enclosed\",\n    \"etc\" : \"and so on\",\n    \"faq\" : \"frequently asked questions\",\n    \"fawc\" : \"for anyone who cares\",\n    \"fb\" : \"facebook\",\n    \"fc\" : \"fingers crossed\",\n    \"fig\" : \"figure\",\n    \"fimh\" : \"forever in my heart\", \n    \"ft.\" : \"feet\",\n    \"ft\" : \"featuring\",\n    \"ftl\" : \"for the loss\",\n    \"ftw\" : \"for the win\",\n    \"fwiw\" : \"for what it is worth\",\n    \"fyi\" : \"for your information\",\n    \"g9\" : \"genius\",\n    \"gahoy\" : \"get a hold of yourself\",\n    \"gal\" : \"get a life\",\n    \"gcse\" : \"general certificate of secondary education\",\n    \"gfn\" : \"gone for now\",\n    \"gg\" : \"good game\",\n    \"gl\" : \"good luck\",\n    \"glhf\" : \"good luck have fun\",\n    \"gmt\" : \"greenwich mean time\",\n    \"gmta\" : \"great minds think alike\",\n    \"gn\" : \"good night\",\n    \"g.o.a.t\" : \"greatest of all time\",\n    \"goat\" : \"greatest of all time\",\n    \"goi\" : \"get over it\",\n    \"gps\" : \"global positioning system\",\n    \"gr8\" : \"great\",\n    \"gratz\" : \"congratulations\",\n    \"gyal\" : \"girl\",\n    \"h&c\" : \"hot and cold\",\n    \"hp\" : \"horsepower\",\n    \"hr\" : \"hour\",\n    \"hrh\" : \"his royal highness\",\n    \"ht\" : \"height\",\n    \"ibrb\" : \"i will be right back\",\n    \"ic\" : \"i see\",\n    \"icq\" : \"i seek you\",\n    \"icymi\" : \"in case you missed it\",\n    \"idc\" : \"i do not care\",\n    \"idgadf\" : \"i do not give a damn fuck\",\n    \"idgaf\" : \"i do not give a fuck\",\n    \"idk\" : \"i do not know\",\n    \"ie\" : \"that is\",\n    \"i.e\" : \"that is\",\n    \"ifyp\" : \"i feel your pain\",\n    \"IG\" : \"instagram\",\n    \"iirc\" : \"if i remember correctly\",\n    \"ilu\" : \"i love you\",\n    \"ily\" : \"i love you\",\n    \"imho\" : \"in my humble opinion\",\n    \"imo\" : \"in my opinion\",\n    \"imu\" : \"i miss you\",\n    \"iow\" : \"in other words\",\n    \"irl\" : \"in real life\",\n    \"j4f\" : \"just for fun\",\n    \"jic\" : \"just in case\",\n    \"jk\" : \"just kidding\",\n    \"jsyk\" : \"just so you know\",\n    \"l8r\" : \"later\",\n    \"lb\" : \"pound\",\n    \"lbs\" : \"pounds\",\n    \"ldr\" : \"long distance relationship\",\n    \"lmao\" : \"laugh my ass off\",\n    \"lmfao\" : \"laugh my fucking ass off\",\n    \"lol\" : \"laughing out loud\",\n    \"ltd\" : \"limited\",\n    \"ltns\" : \"long time no see\",\n    \"m8\" : \"mate\",\n    \"mf\" : \"motherfucker\",\n    \"mfs\" : \"motherfuckers\",\n    \"mfw\" : \"my face when\",\n    \"mofo\" : \"motherfucker\",\n    \"mph\" : \"miles per hour\",\n    \"mr\" : \"mister\",\n    \"mrw\" : \"my reaction when\",\n    \"ms\" : \"miss\",\n    \"mte\" : \"my thoughts exactly\",\n    \"nagi\" : \"not a good idea\",\n    \"nbc\" : \"national broadcasting company\",\n    \"nbd\" : \"not big deal\",\n    \"nfs\" : \"not for sale\",\n    \"ngl\" : \"not going to lie\",\n    \"nhs\" : \"national health service\",\n    \"nrn\" : \"no reply necessary\",\n    \"nsfl\" : \"not safe for life\",\n    \"nsfw\" : \"not safe for work\",\n    \"nth\" : \"nice to have\",\n    \"nvr\" : \"never\",\n    \"nyc\" : \"new york city\",\n    \"oc\" : \"original content\",\n    \"og\" : \"original\",\n    \"ohp\" : \"overhead projector\",\n    \"oic\" : \"oh i see\",\n    \"omdb\" : \"over my dead body\",\n    \"omg\" : \"oh my god\",\n    \"omw\" : \"on my way\",\n    \"p.a\" : \"per annum\",\n    \"p.m\" : \"after midday\",\n    \"pm\" : \"prime minister\",\n    \"poc\" : \"people of color\",\n    \"pov\" : \"point of view\",\n    \"pp\" : \"pages\",\n    \"ppl\" : \"people\",\n    \"prw\" : \"parents are watching\",\n    \"ps\" : \"postscript\",\n    \"pt\" : \"point\",\n    \"ptb\" : \"please text back\",\n    \"pto\" : \"please turn over\",\n    \"qpsa\" : \"what happens\", #\"que pasa\",\n    \"ratchet\" : \"rude\",\n    \"rbtl\" : \"read between the lines\",\n    \"rlrt\" : \"real life retweet\", \n    \"rofl\" : \"rolling on the floor laughing\",\n    \"roflol\" : \"rolling on the floor laughing out loud\",\n    \"rotflmao\" : \"rolling on the floor laughing my ass off\",\n    \"rt\" : \"retweet\",\n    \"ruok\" : \"are you ok\",\n    \"sfw\" : \"safe for work\",\n    \"sk8\" : \"skate\",\n    \"smh\" : \"shake my head\",\n    \"sq\" : \"square\",\n    \"srsly\" : \"seriously\", \n    \"ssdd\" : \"same stuff different day\",\n    \"tbh\" : \"to be honest\",\n    \"tbs\" : \"tablespooful\",\n    \"tbsp\" : \"tablespooful\",\n    \"tfw\" : \"that feeling when\",\n    \"thks\" : \"thank you\",\n    \"tho\" : \"though\",\n    \"thx\" : \"thank you\",\n    \"tia\" : \"thanks in advance\",\n    \"til\" : \"today i learned\",\n    \"tl;dr\" : \"too long i did not read\",\n    \"tldr\" : \"too long i did not read\",\n    \"tmb\" : \"tweet me back\",\n    \"tntl\" : \"trying not to laugh\",\n    \"ttyl\" : \"talk to you later\",\n    \"u\" : \"you\",\n    \"u2\" : \"you too\",\n    \"u4e\" : \"yours for ever\",\n    \"utc\" : \"coordinated universal time\",\n    \"w\/\" : \"with\",\n    \"w\/o\" : \"without\",\n    \"w8\" : \"wait\",\n    \"wassup\" : \"what is up\",\n    \"wb\" : \"welcome back\",\n    \"wtf\" : \"what the fuck\",\n    \"wtg\" : \"way to go\",\n    \"wtpa\" : \"where the party at\",\n    \"wuf\" : \"where are you from\",\n    \"wuzup\" : \"what is up\",\n    \"wywh\" : \"wish you were here\",\n    \"yd\" : \"yard\",\n    \"ygtr\" : \"you got that right\",\n    \"ynk\" : \"you never know\",\n    \"zzz\" : \"sleeping bored and tired\"\n}","1ec9309e":"# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\ndef convert_abbrev(word):\n    return abbreviations[word.lower()] if word.lower() in abbreviations.keys() else word","374ca156":"# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\ndef convert_abbrev_in_text(text):\n    tokens = word_tokenize(text)\n    tokens = [convert_abbrev(word) for word in tokens]\n    text = ' '.join(tokens)\n    return text","721d9fb6":"import string\nimport re\nfrom nltk.tokenize import word_tokenize\ndf_train[\"text\"] = df_train[\"text\"].apply(lambda x: clean_tweets(x))\ndf_test[\"text\"] = df_test[\"text\"].apply(lambda x: clean_tweets(x))\n\ndf_train[\"text\"] = df_train[\"text\"].apply(lambda x: remove_emoji(x))\ndf_test[\"text\"] = df_test[\"text\"].apply(lambda x: remove_emoji(x))\n\ndf_train[\"text\"] = df_train[\"text\"].apply(lambda x: remove_punctuations(x))\ndf_test[\"text\"] = df_test[\"text\"].apply(lambda x: remove_punctuations(x))\n\ndf_train[\"text\"] = df_train[\"text\"].apply(lambda x: convert_abbrev_in_text(x))\ndf_test[\"text\"] = df_test[\"text\"].apply(lambda x: convert_abbrev_in_text(x))\n\nif to_lower:\n    df_train[\"text\"] = df_train[\"text\"].apply(lambda x: x.lower())\n    df_test[\"text\"] = df_test[\"text\"].apply(lambda x: x.lower())","960e24d2":"# Thanks to https:\/\/www.kaggle.com\/wrrosa\/keras-bert-using-tfhub-modified-train-data - \n# author of this kernel read tweets in training data and figure out that some of them have errors:\nif target_corrected:\n    ids_with_target_error = [328,443,513,2619,3640,3900,4342,5781,6552,6554,6570,6701,6702,6729,6861,7226]\n    df_train.loc[df_train['id'].isin(ids_with_target_error),'target'] = 0\n    df_train[df_train['id'].isin(ids_with_target_error)]","598d9cf5":"from adaptnlp import EasyDocumentEmbeddings, SequenceClassifierTrainer","a003727f":"from sklearn.model_selection import train_test_split\ntrain, tbd_test = train_test_split(df_train, test_size=0.2)\ntest, dev = train_test_split(tbd_test, test_size=0.5)","7a356f6c":"label_training_dir = MODEL_DIR + '\/label_training'\ntry:\n    os.mkdir(label_training_dir)\nexcept:\n    pass","7f3b7fe4":"train.to_csv(label_training_dir + \"\/train.csv\", index=False)\ntest.to_csv(label_training_dir + \"\/test.csv\", index=False)\ndev.to_csv(label_training_dir + \"\/dev.csv\", index=False)","378c14cf":"configs = {\"pool_configs\": {\"fine_tune_mode\": \"linear\", \"pooling\": \"mean\"},\n\"rnn_configs\": {\"hidden_size\": 512,\n                                   \"rnn_layers\": 1,\n                                   \"reproject_words\": True,\n                                   \"reproject_words_dimension\": 256,\n                                   \"bidirectional\": False,\n                                   \"dropout\": 0.4,\n                                   \"word_dropout\": 0.0,\n                                   \"locked_dropout\": 0.0,\n                                   \"rnn_type\": \"GRU\",\n                                   \"fine_tune\": True, }}","33329c00":"corpus = label_training_dir # Or path to directory of train.csv, test.csv, dev.csv files at \"Path\/to\/data\/directory\" \nFINETUNED_MODEL_DIR = MODEL_DIR\nOUTPUT_DIR = label_training_dir\ndoc_embeddings = EasyDocumentEmbeddings(\"bert-base-uncased\", methods = [\"rnn\"],)","d66f4bbc":"sc_configs = {\n              \"corpus\": corpus,\n              \"encoder\": doc_embeddings,\n              \"column_name_map\": {3: \"text\", 4: \"label\"},\n              \"corpus_in_memory\": True,\n              \"predictive_head\": \"flair\",\n             }\nsc_trainer = SequenceClassifierTrainer(**sc_configs)","d5470449":"sc_lr_configs = {\n        \"output_dir\": OUTPUT_DIR,\n        \"file_name\": \"learning_rate.tsv\",\n        \"start_learning_rate\": 1e-8,\n        \"end_learning_rate\": 10,\n        \"iterations\": 100,\n        \"mini_batch_size\": 32,\n        \"stop_early\": True,\n        \"smoothing_factor\": 0.8,\n        \"plot_learning_rate\": True,\n}\nlearning_rate = sc_trainer.find_learning_rate(**sc_lr_configs)","feb44901":"sc_train_configs = {\n        \"output_dir\": OUTPUT_DIR,\n        \"learning_rate\": learning_rate,\n        \"mini_batch_size\": 32,\n        \"anneal_factor\": 0.5,\n        \"patience\": 2, # If the model does not improve after this this many steps the learning rate will decrease\n        \"max_epochs\": 10,\n        \"plot_weights\": False,\n        \"batch_growth_annealing\": False,\n}\nsc_trainer.train(**sc_train_configs)","3c3dca33":"from adaptnlp import EasySequenceClassifier\n# Set example text and instantiate tagger instance\nexample_text = [\"that was a really bad storm! but I suppose it could have been worse\"]\nMODEL_PATH = OUTPUT_DIR + '\/final-model.pt'\n\nclassifier = EasySequenceClassifier()\n\n# Example prediction\nsentences = classifier.tag_text(example_text, model_name_or_path=MODEL_PATH)\nprint(\"Label output:\\n\")\nfor sentence in sentences:\n    print(sentence.labels)\n    print(sentence.labels[0].value)\n    print(sentence.labels[0].score)","ceb2efc4":"df_test['target'] = df_test['text'].apply(lambda x: classifier.tag_text(x, model_name_or_path=MODEL_PATH)[0].labels[0].value)","fbf8fd58":"submission = df_test[['id', 'target']]\nsubmission['target'].value_counts()","699c38b4":"submission.to_csv('\/kaggle\/working\/submission.csv', index=False)","728863a7":"Transformers (which AdaptNLP is built upon) expects to have a directory with the name of the model in it. In this case, we're just going with the basic BERT model (though I encourage you to try others for better performance)","774548ee":"Now we actually train the model!","c5a92aa1":"Thanks to https:\/\/www.kaggle.com\/vbmokin\/nlp-eda-bag-of-words-tf-idf-glove-bert","8fbd878d":"Install [AdaptNLP](https:\/\/github.com\/Novetta\/adaptnlp) a new python library that makes it easier to train transformer-based models. It is a wrapper for Hugging Face transformers and Zalando Research flair. Benefits of AdaptNLP include:\n* Fine tuning of the underlying language model (example will be released in another notebook, but you can find a [tutorial in the repo](https:\/\/github.com\/Novetta\/adaptnlp\/blob\/master\/tutorials))\n* An automated learning rate finder so you can more easily find an ideal learning rate\n* Easily switch between different models (BERT, RoBERTa, XLM, etc. See [model list](https:\/\/huggingface.co\/transformers\/pretrained_models.html)) or combine different models\n* Easily update hyperparameters for models","6f7ffa78":"AdaptNLP expects a training, test, and validation (or dev) set. We split to 80% training, 10% test, and 10% validation.","f6b50225":"We can include example text that I came up with. I have found that models that perform well tend to rate this as a positive with high confidence","caa73b76":"# Data Cleaning","0ea8555b":"We will now instantiate the sequence classifier, pointing it to our data and letting it know where the text and labels are.","6fa9a281":"# Sequence model training","ea1fcd44":"# Prepare directories for expected format","a1d495bd":"![image.png](attachment:image.png)","362190e6":"Note: I have changed many of the removals to substitutions, which could be learned during language model fine tuning. In this case we are only using the base model with no LM fine tuning.","3e62f83f":"I have updated the default configs a bit, which are found [here](https:\/\/github.com\/Novetta\/adaptnlp\/blob\/eb728b6be1a95261af01931c86f719742f6933b2\/adaptnlp\/embeddings.py#L283)","beb7e954":"We just use the base BERT model below, but it is trivial to swap in more sophisticated architectures. You can even combine models just by listing more!","a37a7751":"Get the labels on the submission data. Alternatively, you can call `.score` instead of `.value` to get the raw predicted score between 0 and 1","e5df3a43":"# Prepare submission","0c6a119a":"Run the learning rate finder. This is based on [fastai's learning rate finder](https:\/\/docs.fast.ai\/callbacks.lr_finder.html), but with a tool that suggests a good learning rate.","a8736e35":"Save the train, test, dev sets to the appropriate directory expected by the sequence training model.","4c12fbc8":"# Train the Text Classification model"}}