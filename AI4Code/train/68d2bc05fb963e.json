{"cell_type":{"d00ad8bc":"code","b6b80148":"code","555277a1":"code","44105945":"code","51c6448c":"code","400cdc72":"code","c8950d42":"code","def0309d":"markdown","ec00b03c":"markdown","56215989":"markdown"},"source":{"d00ad8bc":"import numpy as np\nimport pandas as pd\nimport math\nfrom scipy.io import wavfile\nfrom numpy.fft import fft\nimport matplotlib.pyplot as plot","b6b80148":"\nimport os\nos.getcwd()\nos.chdir('\/kaggle')\nos.getcwd()\nos.listdir('\/kaggle\/input')","555277a1":"import os\nfile_path='\/kaggle\/input'\nfile_name = 'audio_piano.wav'\nfile=os.path.join(file_path,file_name)\nprint(file)","44105945":"\n\nplot.rcParams['xtick.labelsize']=14\nplot.rcParams['ytick.labelsize']=14\nplot.style.use('seaborn')\nplot.show()\n\n\n\nthreshold= 800 # its the threshold frequency. we do not want any frequency below 800 as all sounds below 800 can be considered as noise in this case\n\nfs, snd = wavfile.read(file) # read the file with piano music, filename = audio_piano\n\ny= snd [:,0]\n\nplot.figure(figsize =(20,8))\nn = len(y)\n\np = fft(y) # fft is the numpy function to apply fourier transformation on the audio file\n\nmag = np.sqrt(p.real**2 + p.imag**2)\n\nmag = mag*2\/n\n\nmag = mag[0:math.ceil((n)\/2.0)]\nfreq = np.arange(0, len(mag),1.0)*(fs\/n)\n\nplot.plot(freq\/1000, mag , color = 'b')\n# plot.xticks(np.arange(min(freq\/1000), max(freq\/1000)+1, 1.0))\n","51c6448c":"\n# Lets try creating some sine waves\na = np.arange(2,10,2) # arange (start,end,step)\nprint(a)\nb = np.linspace(2,10,5) # linspace(start, end, number)\nprint(b)\n\n\n\ndef genwave(freq, amp, T, shift, sr):\n    time = np.arange(0,T,T\/sr)\n    X = amp*np.sin(2*np.pi*freq*time+shift)\n    return time, X\n\n\n\ntime, amplitude = genwave(10,1,1,0, 1000)\nfig = plot.figure(figsize=(15,5))\n\nprint(len(time))\nprint(len(amplitude))\n\nax = fig.add_axes([0,0,4,4])\nax.plot(time, amplitude, c = 'b')\nplot.show()\nax.set_ylim([-4,4])\n\nplot.rcParams['xtick.labelsize']=14\nplot.rcParams['ytick.labelsize']=14\nplot.style.use('seaborn')\nax.plot(time, amplitude, c = 'b')\nplot.grid(True, which = 'both')\nplot.show()","400cdc72":"# a simple version of genwave without the phase shift\ndef genwave(freq, amp, T, sr):\n    time = np.arange(0,T,T\/sr)\n    X = amp*np.sin(2*np.pi*freq*time)\n    return time, X\n\nplot.rcParams['xtick.labelsize']=14\nplot.rcParams['ytick.labelsize']=14\nplot.style.use('seaborn')\nf,axarr = plot.subplots(4, figsize=(20,8))\nsr =1000\nx,y  = genwave (500,2,1,sr)\n_, y2 = genwave(100,2,1,sr)\n_,y3 =genwave(250,1,1,sr) \n\ny_final = y+y2+y3\naxarr[0].plot(x,y_final)\n\naxarr[1].plot(x,y)\naxarr[2].plot(x,y2)\naxarr[3].plot(x,y3)\n","c8950d42":"def gen_wave(freq, amp, T, shift, sr):\n    time = np.arange(0,T,T\/sr)\n    X = amp*np.sin(2*np.pi*freq*time+shift)\n    return time, X\n\n\nplot.rcParams['xtick.labelsize']=14\nplot.rcParams['ytick.labelsize']=14\nplot.style.use('seaborn')\nf,axarr = plot.subplots(4, figsize=(20,8))\nsr =1000\nx,A=  gen_wave(1,3,10,0,100)\n_, A2 = gen_wave(4, 20, 10, 180,100)\n# _,y3 =genwave(250,1,1,sr) \n\ny_final = A +A2\naxarr[0].plot(x,y_final)\n\naxarr[1].plot(x,A)\naxarr[2].plot(x,A2)\n# axarr[3].plot(x,y3)","def0309d":"This notebook demonstrates plotting of an audio clip and analyse  of the same by slicing the same and finding out the patterns in it using the standard python libraries. I was working on Fourier Transformation and as a part of the learning process, started plotting audio waves. Hope, some of you will find it interesting. Thanks in advance.","ec00b03c":"The below plots demostrates how the final wave is shaped based on the various components waves. we are generating waves with varying frequency, amplitude, initial shift  & sampling rate.\nThen plotting the final wave built from the combination of the generated waves. \nYou can play with the various parameters and see how the resultant wave is effected","56215989":"I have uploaded an audio clip of piano sound downloaded from internet.we will see how we can plot an audio file data using matplotlib"}}