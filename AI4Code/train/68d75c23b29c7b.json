{"cell_type":{"63e1dd3b":"code","361e31fa":"code","d8e5c837":"code","33442888":"code","d00403ae":"code","12fbe88f":"code","7f62576a":"code","29a38a28":"code","bb9fc747":"code","5c345df3":"code","4baba97e":"code","0f31a4ea":"code","2ec225ce":"code","d90fbf1d":"code","3287ddff":"code","cefd6f13":"code","45657026":"code","0617ed37":"code","5a6f2af6":"code","a6c01c02":"code","47eac4c6":"code","8f964f56":"code","7c38a31c":"code","da877f97":"code","ed326408":"code","8c995650":"markdown","0e29feb7":"markdown","a185eaa0":"markdown","cad10a2b":"markdown","7a758dc9":"markdown","52317c39":"markdown","0275da1c":"markdown","e5b01bfa":"markdown","69e65def":"markdown","82424967":"markdown","14a5a4f4":"markdown","3eb74f14":"markdown","07f64c16":"markdown","489a067b":"markdown","3cfcfacf":"markdown","0e428c82":"markdown"},"source":{"63e1dd3b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","361e31fa":"data_2015=pd.read_csv(\"..\/input\/world-happiness\/2015.csv\")\ndata_2016=pd.read_csv(\"..\/input\/world-happiness\/2016.csv\")\ndata_2017=pd.read_csv(\"..\/input\/world-happiness\/2017.csv\")\ndata_2018=pd.read_csv(\"..\/input\/world-happiness\/2018.csv\")\ndata_2019=pd.read_csv(\"..\/input\/world-happiness\/2019.csv\")","d8e5c837":"#Summary Analysis\n\ndata_2019.head()","33442888":"#Checking info because of the data types and missing values.\n\n#data_2015.info()\n#data_2016.info()\n#data_2017.info()\n#data_2018.info()\ndata_2019.info()","d00403ae":"score_list=list(data_2019.Score)\nfor i in range(0,5):\n    print(score_list[i])","12fbe88f":"np.mean(score_list)","7f62576a":"data_happy=[]\ndata_sad=[]\n    \nfor i in range(len(score_list)):\n    if score_list[i]>np.mean(score_list):\n        data_happy.append(score_list[i])\n    else:\n        data_sad.append(score_list[i])","29a38a28":"len(data_happy)","bb9fc747":"len(data_sad)","5c345df3":"data_2019.drop([\"Overall rank\",\"Country or region\"],axis=1,inplace=True)","4baba97e":"data_2019.head()","0f31a4ea":"data_2019.Score=[1 if each>np.mean(score_list) else 0 for each in data_2019.Score]","2ec225ce":"data_2019.head()","d90fbf1d":"y=data_2019.Score.values   \nx_data=data_2019.drop([\"Score\"],axis=1)","3287ddff":"y","cefd6f13":"x_data.head()","45657026":"x=(x_data - np.min(x_data))\/(np.max(x_data) - np.min(x_data)).values","0617ed37":"x.head()","5a6f2af6":"# 80% Train - 20% Test\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\nx_train=x_train.T\nx_test=x_test.T\n\nprint(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)","a6c01c02":"# dimension = 6\ndef initialize_weights_and_bias(dimension):\n    \n    w=np.full((dimension,1),0.01)   #make 6 w=[0.01] \n    b=0.0\n    return w,b\n\n# w,b=initialize_weights_and_bias(6)\n\n# Sigmoid Function\ndef sigmoid(z):\n    y_head = 1 \/ (1 + np.exp(-z))\n    return y_head\n\n# print(sigmoid(0))","47eac4c6":"def forward_backward_propagation(w,b,x_train,y_train):\n    #forward propagation\n    z=np.dot(w.T,x_train) + b\n    y_head=sigmoid(z)\n    loss=-y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost=(np.sum(loss))\/x_train.shape[1]\n    \n    #backward propagation\n    derivative_weight=(np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias=np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients={\"derivative_weight\": derivative_weight,\"derivative_bias\": derivative_bias}\n    \n    return cost,gradients","8f964f56":"# Updating(learning) parameters\ndef update(w,b,x_train,y_train,learning_rate,number_of_iteration):\n    cost_list=[]\n    cost_list2=[]\n    index=[]\n    #updating parameters isnumber_of_iteration times\n    \n    for i in range(number_of_iteration):\n        #make forward and backward propagation and find cost and gradients\n        cost,gradients=forward_backward_propagation(w, b, x_train, y_train)\n        cost_list.append(cost)\n        \n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i%20 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print(\"Cost after iteration %i: %f\" %(i,cost))\n    # we update (learn) parameters weights and bias\n    parameters = {\"weight\": w, \"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","7c38a31c":"def predict(w,b,x_test):\n    #x_test is an input for forward propagation\n    z=sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction=np.zeros((1,x_test.shape[1]))\n    #if z is bigger than 0.5, our prediction is sign one (y_head=1)\n    #if z is smaller than 0.5, our prediction is sign zero (y_head=0)\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n            \n    return Y_prediction","da877f97":"#%% Logistic Regression\ndef logistic_regression(x_train, y_train, x_test, y_test, learning_rate, num_iterations):\n    #initialize\n    dimension = x_train.shape[0]   #that is 30\n    w,b = initialize_weights_and_bias(dimension)\n    #do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate, num_iterations)\n    \n    y_prediction_test=predict(parameters[\"weight\"], parameters[\"bias\"], x_test)\n    \n    #print test errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test, learning_rate=1, num_iterations=500)","ed326408":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(x_train.T, y_train.T)\nprint(\"test accuracy {}\".format(lr.score(x_test.T, y_test.T)))","8c995650":"<a id=\"6\"><\/a> <br>\n## Editing Score Data for Binary Classification\n\nWe set the score data of the countries whose score is above the average as 1 and the others are 0.","0e29feb7":"<a id=\"10\"><\/a> <br>\n## Forward - Backward Propagation","a185eaa0":"<a id=\"11\"><\/a> <br>\n## Updating Parameters","cad10a2b":"<a id=\"3\"><\/a> <br>\n# Logistic Regression","7a758dc9":"<a id=\"8\"><\/a> <br>\n## Train - Test Split  \n\nWe use 80% of our report for training and 20% for testing. That's why we're splitting this way.","52317c39":"<a id=\"14\"><\/a> <br>\n# Logistic Regression with Sklearn","0275da1c":"# Introduction\n\nThis notebook is about World Happiness Report which is a landmark survey of the state of global happiness.\n\nIn this tutorial, I am going to work on Machine Learning.\n\n<font color='red'>\nContent:\n    \n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n3. [Logistic Regression](#3)\n    * [Prepearing the Data for Logistic Regression](#4)\n    * [Droping Unuseful Features](#5)\n    * [Editing Score Data for Binary Classification](#6)\n    * [Normalization](#7)\n    * [Train - Test Split](#8)\n    * [Initializing Parameters and Sigmoid Function](#9)\n    * [Forward - Backward Propagation](#10)\n    * [Updating Parameters](#11)\n    * [Prediction](#12)\n    * [Cost and Test Accuracy](#13)\n4. [Logistic Regression with Sklearn](#14)","e5b01bfa":"<a id=\"12\"><\/a> <br>\n## Prediction","69e65def":"<a id=\"1\"><\/a> <br>\n# Load and Check Data\n\n* First of all, we are going to read the reports in our dataset.","82424967":"* I will work 2019's data, so firstly I check the score of countries.\n* By finding the mean of these data, I will identify countries whose average score points are above and below the average.\n* I will group the countries in this way.","14a5a4f4":"As you can see, we have different kind of columns in our reports. So I will work 2019 year's reports.\n\nIn 2019 year's report;\n\n* Length:156 (Range Index)\n* Features are float other than rank and country.\n* We have no NAN values in this reports.","3eb74f14":"<a id=\"4\"><\/a> <br>\n## Prepearing the Data for Logistic Regression","07f64c16":"<a id=\"7\"><\/a> <br>\n## Normalization\n\nWe normalize the data so that the effect of each data is equal.","489a067b":"<a id=\"5\"><\/a> <br>\n## Droping Unuseful Features\n\nWe work with features that affect the score data. So we can ignore Overall Rank and Country features.","3cfcfacf":"<a id=\"13\"><\/a> <br>\n## Cost and Test Accuracy","0e428c82":"<a id=\"9\"><\/a> <br>\n## Initializing Parameters and Sigmoid Function\n\nWe set our w and b parameters and define the sigmoid function. -> w = [0.01] -> b = 0.0"}}