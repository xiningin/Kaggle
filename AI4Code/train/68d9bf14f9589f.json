{"cell_type":{"977c85eb":"code","fe07123f":"code","5c2cb070":"code","8f7b1199":"code","a968d23e":"code","d0bbb4db":"code","d59875f2":"code","dcabb4fb":"code","9d187641":"code","c8054de1":"code","9e293b6a":"code","f6b7c967":"code","b84e36b3":"code","ae172811":"code","9d43b05d":"code","d01d8922":"code","00c86473":"code","9dcd54bd":"code","a0a1444c":"code","94a5540b":"code","3ecf4937":"code","c99f2672":"code","b0132e1b":"code","e5757e30":"code","85110fcb":"code","3ad13aeb":"markdown","adfb170b":"markdown","03e49d10":"markdown"},"source":{"977c85eb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe07123f":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom keras.models import Sequential\nfrom keras.optimizers import RMSprop\nfrom keras.utils.np_utils import to_categorical\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\n%matplotlib inline","5c2cb070":"train_df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntrain_df.head()","8f7b1199":"train_df.shape","a968d23e":"train_df['label'].value_counts()","d0bbb4db":"plt.figure(figsize=(8,4))\nsns.countplot(train_df['label'])\nplt.show()","d59875f2":"x_train = train_df.drop(labels = ['label'], axis = 1)\nx_train.head(1)","dcabb4fb":"y_train = train_df['label']\ny_train.head()","9d187641":"x_train = x_train.values.reshape(-1, 28, 28, 1)\nx_train = x_train \/ 255.0","c8054de1":"y_train = to_categorical(y_train, num_classes=10)","9e293b6a":"plt.imshow(x_train[5][:,:,0])\nplt.show()","f6b7c967":"y_train[5]","b84e36b3":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.5))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\n\noptimizer = RMSprop(lr=0.01)","ae172811":"model.compile(optimizer = 'adam' , loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])\n\nmodel.summary()","9d43b05d":"epochs=20\nbatch_size=64\nmodel.fit(x_train,y_train,epochs=epochs,batch_size=batch_size)","d01d8922":"test_df= pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest_df.head()","00c86473":"x_test = test_df.values.reshape(-1, 28, 28, 1)\nx_test = x_test \/ 255.0","9dcd54bd":"y_test=model.predict(x_test)","a0a1444c":"plt.imshow(x_test[0][:,:,0])\nplt.show()","94a5540b":"y_test[0]","3ecf4937":"y_test=[np.argmax(y_test1) for y_test1 in y_test]","c99f2672":"y_test[0]","b0132e1b":"submission = pd.DataFrame({'ImageId' : [i+1 for i in range(len(y_test))] , 'Label' : y_test})","e5757e30":"submission","85110fcb":"submission.to_csv('.\/submission.csv', index = False)","3ad13aeb":"# **Model Building**","adfb170b":"# **Data Preprocessing**","03e49d10":"# **Compiling the Model**"}}