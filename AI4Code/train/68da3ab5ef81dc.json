{"cell_type":{"d423be96":"code","f05f28a2":"code","ef44cf70":"code","f1f00fe6":"code","08743755":"code","4f758580":"code","9d72f733":"code","0c37293f":"code","7a166578":"code","8c44c16f":"code","afde5e3e":"code","df34b112":"code","b5ede83a":"code","4ce96ea8":"code","6381a058":"code","30335cbc":"code","3e7832db":"code","bdc194c8":"code","4c048613":"code","53332179":"markdown","ef682e08":"markdown"},"source":{"d423be96":"from sklearn.metrics import make_scorer, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import ExtraTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import preprocessing\nfrom scipy.stats import norm\nimport matplotlib.pylab as pylab\nimport matplotlib.pyplot as plt\nfrom pandas import get_dummies\nimport matplotlib as mpl\nfrom scipy import stats\nimport xgboost as xgb\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport warnings\nimport sklearn\nimport scipy\nimport numpy\nimport json\nimport sys\nimport csv\nimport os","f05f28a2":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ef44cf70":"df_train=pd.read_csv(\"\/kaggle\/input\/mushroom-classification\/mushrooms.csv\")","f1f00fe6":"df_train.head()","08743755":"#function for missing data\ndef missing_data(df_train):\n    total = df_train.isnull().sum().sort_values(ascending=False)\n    percent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\n    missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    return(missing_data.head(20))","4f758580":"missing_data(df_train)","9d72f733":"df_train.info()","0c37293f":"df_train[\"class\"]= df_train[\"class\"].replace(\"p\", 1)\ndf_train[\"class\"]= df_train[\"class\"].replace(\"e\", 0)","7a166578":"df_train['class']=df_train['class'].astype('int')","8c44c16f":"df_train_new=df_train.drop(['class'],axis=1)","afde5e3e":"encoded = pd.get_dummies(df_train_new)\nencoded.head()","df34b112":"dependent_all=df_train['class']\nindependent_all=encoded","b5ede83a":"x_train,x_test,y_train,y_test=train_test_split(independent_all,dependent_all,test_size=0.3,random_state=100)","4ce96ea8":"xgboost = xgb.XGBClassifier(max_depth=3,n_estimators=300,learning_rate=0.05)","6381a058":"xgboost.fit(x_train,y_train)","30335cbc":"#XGBoost modelon the train set\nXGB_prediction = xgboost.predict(x_train)\nXGB_score= accuracy_score(y_train,XGB_prediction)\nXGB_score","3e7832db":"#XGBoost model on the test\nXGB_prediction = xgboost.predict(x_test)\nXGB_score= accuracy_score(y_test,XGB_prediction)\nXGB_score","bdc194c8":"rfc2=RandomForestClassifier()\nrfc2.fit(x_train,y_train)\n#model on train using all the independent values in df\nrfc_prediction = rfc2.predict(x_train)\nrfc_score= accuracy_score(y_train,rfc_prediction)\nprint(rfc_score)\n#model on test using all the indpendent values in df\nrfc_prediction = rfc2.predict(x_test)\nrfc_score= accuracy_score(y_test,rfc_prediction)\nprint(rfc_score)","4c048613":"log =LogisticRegression()\nlog.fit(x_train,y_train)\n#model on train using all the independent values in df\nlog_prediction = log.predict(x_train)\nlog_score= accuracy_score(y_train,log_prediction)\nprint(log_score)\n#model on train using all the independent values in df\nlog_prediction = log.predict(x_test)\nlog_score= accuracy_score(y_test,log_prediction)\nprint(log_score)","53332179":"**Mushroom Classification **","ef682e08":"( please upvote if you like )"}}