{"cell_type":{"ea07a017":"code","0d66c338":"code","e5f482f2":"code","e434c799":"code","cd33e010":"code","a5e6214c":"code","a2ad9ba0":"code","4ed95c19":"code","73ed65f3":"code","5b114382":"code","efa4415c":"code","9ba86054":"code","1dbc10d3":"code","daaac017":"code","a62ae1ef":"code","75d50dcd":"code","866770f9":"code","8c650809":"code","829236a3":"code","adbc92fa":"code","314a42cc":"code","0f6d8aef":"code","56765149":"code","94d601ab":"code","11899708":"code","1c1b91a3":"markdown","dedd2c18":"markdown","b5f767b5":"markdown","f4bcd1be":"markdown","453caf93":"markdown","091793e3":"markdown","18883cba":"markdown","a88870c1":"markdown","dcec999a":"markdown","58fa9fbf":"markdown","eaaf30d3":"markdown","d6049284":"markdown","27b5b38e":"markdown","6bf3166e":"markdown","651a5819":"markdown","f53d3300":"markdown","b975e3db":"markdown","f90e8f51":"markdown","f7f160b3":"markdown","e35b3d60":"markdown","a2d0999f":"markdown","a2485b5d":"markdown","6c4c049d":"markdown","360268aa":"markdown"},"source":{"ea07a017":"from keras.datasets import fashion_mnist, mnist\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D, Dropout\nfrom keras.models import Model\n\nimport os,cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 20, 10\n\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd# Any results you write to the current directory are saved as output.\nfrom IPython.display import display, Image\n\nfrom keras.preprocessing.image import load_img\nfrom keras import Model\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom keras.models import load_model\nfrom keras.optimizers import Adam\nfrom keras.utils.vis_utils import plot_model\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Input, Conv2D, Conv2DTranspose, MaxPooling2D, concatenate, Dropout\n\n# Any results you write to the current directory are saved as output.\nfrom IPython.display import display, Image","0d66c338":"# get the data\nfilname = '..\/input\/facial-expression\/fer2013\/fer2013.csv'\n\n#different labels of images(not useful known about for current problem)\nlabel_map = ['Anger', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\n\n#different features names\nnames=['emotion','pixels','usage']\n\n#Reading data in dataframe\ndf=pd.read_csv('..\/input\/facial-expression\/fer2013\/fer2013.csv',names=names, na_filter=False)\nim=df['pixels']\ndf.head(10)","e5f482f2":"#reading data and labels from dataset and appending in list\n\ndef getData(filname):\n    # images are 48x48\n    # N = 35887\n    Y = []\n    X = []\n    first = True\n    for line in open(filname):\n        if first:\n            first = False\n        else:\n            row = line.split(',')\n            Y.append(int(row[0]))\n            X.append([int(p) for p in row[1].split()])\n\n    X, Y = np.array(X), np.array(Y)\n    return X, Y","e434c799":"#extracting data from dataset\nX, Y = getData(filname)\nnum_class = len(set(Y))\n#print(num_class)","cd33e010":"# keras with tensorflow backend\nN, D = X.shape\n\n#reshaping the dataset\nX = X.reshape(N, 48, 48, 1)","a5e6214c":"#splitting data in train, test\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42, shuffle=True)","a2ad9ba0":"x_train.shape","4ed95c19":"#NOrmalizing the images\nx_train = x_train.astype('float32') \/ 255.\nx_test = x_test.astype('float32') \/ 255.\n\n#reshaping the images\nx_train = np.reshape(x_train, (len(x_train), 48, 48, 1))  # adapt this if using `channels_first` image data format\nx_test = np.reshape(x_test, (len(x_test), 48, 48, 1))  # adapt this if using `channels_first` image data format\n\n\n#adding noise in data\nnoise_factor = 0.1\nx_train_noisy = x_train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_train.shape) \nx_test_noisy = x_test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_test.shape) \n\n#clipping put data near to 0--->0 aand data near to 1-->1(eg=0.3-->0 or 0.7-->1)\nx_train_noisy = np.clip(x_train_noisy, 0., 1.)\nx_test_noisy = np.clip(x_test_noisy, 0., 1.)","73ed65f3":"x_test_final_noisy = x_test_noisy[-100:]\nx_test_noisy = x_test_noisy[:-100]\n\nx_test_final_original = x_test[-100:]\nx_test = x_test[:-100]","5b114382":"n = 10","efa4415c":"plt.figure(figsize=(48, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_train_noisy[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","9ba86054":"display(Image(filename=\"\/kaggle\/input\/images-architecture\/images_architecture\/autoencoder.png\"))","1dbc10d3":"\n\ninput_img = Input(shape=(48, 48, 1))  # adapt this if using `channels_first` image data format\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)\nx = MaxPooling2D((2, 2), padding='same')(x)\nx = Dropout(0.2)(x)\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nencoded = MaxPooling2D((2, 2), padding='same')(x)\n\n\n# at this point the representation is (7, 7, 32)\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(encoded)\nx = UpSampling2D((2, 2))(x)\nx = Dropout(0.2)(x)\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nx = UpSampling2D((2, 2))(x)\n\ndecoded = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)\n\nautoencoder = Model(input_img, decoded)\nautoencoder.compile(optimizer='adam', loss='MSE')","daaac017":"autoencoder.summary()","a62ae1ef":"autoencoder.fit(x_train_noisy, x_train,\n                epochs=35,\n                batch_size=64,\n                shuffle=True,\n                validation_data=(x_test_noisy, x_test))","75d50dcd":"predict = autoencoder.predict(x_test_final_noisy)","866770f9":"n=10","8c650809":"plt.figure(figsize=(40, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_test_final_original[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","829236a3":"plt.figure(figsize=(40, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_test_final_noisy[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","adbc92fa":"plt.figure(figsize=(40, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(predict[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","314a42cc":"epochs = range(len(autoencoder.history.history['loss']))\n\nplt.plot(epochs,autoencoder.history.history['loss'],'r', label='train_loss')\nplt.plot(epochs,autoencoder.history.history['val_loss'],'b', label='val_loss')\nplt.title('train_loss vs val_loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\nplt.figure()\n\n","0f6d8aef":"from skimage.measure import compare_ssim, compare_psnr, compare_mse\nfrom skimage import data, img_as_float","56765149":"compare_ssim(x_test_final_original, predict, multichannel=True)","94d601ab":"compare_psnr(x_test_final_original, predict)","11899708":"# whole dataset\ncompare_mse(x_test_final_original, predict)","1c1b91a3":"## Original Test images","dedd2c18":"# One of the way we can achieve our goal of removing noise is AutoEncoder\n\n**Copied from Keras Blog(https:\/\/blog.keras.io\/building-autoencoders-in-keras.html):\n**\n* What are autoencoders good for?\n* Today two interesting practical applications of autoencoders are data denoising (which we feature later in this post), and dimensionality reduction for data visualization. With appropriate dimensionality and sparsity constraints, autoencoders can learn data projections that are more interesting than PCA or other basic techniques.","b5f767b5":"# Structural Similarity Index\n\n* When comparing images, the mean squared error (MSE)--while simple to implement--is not highly indicative of perceived similarity. Structural similarity aims to address this shortcoming by taking texture into account\n\n","f4bcd1be":"# AutoEncoder: Train Loss VS validation loss","453caf93":"# Visualizing the prediction","091793e3":"## Reshaping images","18883cba":"# Data Preprocessing","a88870c1":"# Extracting Data and splitting train and test ","dcec999a":"## Adding labels and images(pixel values) in respective array","58fa9fbf":"# Importing libraries","eaaf30d3":"* Image denoising is to remove noise from a noisy image, so as to restore the true image\n* In this notebook FER2013 dataset is used which contains approx 35 thousand images of 7 different emotions\n* Image is grayscale of size 48*48","d6049284":"# AutoEncoder Summary","27b5b38e":"# MSE","6bf3166e":"# Construction of Model","651a5819":"## Noised Test images","f53d3300":"# Training Model","b975e3db":"## Making Prediction","f90e8f51":"## AutoEncoder Architecture","f7f160b3":"# Visualization of 10 Data","e35b3d60":"# Taking 100 images seperate for final testing","a2d0999f":"# PSNR\n\nSource: https:\/\/www.mathworks.com\/help\/vision\/ref\/psnr.html\n\n* The PSNR block computes the peak signal-to-noise ratio, in decibels, between two images. This ratio is used as a quality measurement between the original and a compressed image. The higher the PSNR, the better the quality of the compressed, or reconstructed image.\n\n* The mean-square error (MSE) and the peak signal-to-noise ratio (PSNR) are used to compare image compression quality. The MSE represents the cumulative squared error between the compressed and the original image, whereas PSNR represents a measure of the peak error. The lower the value of MSE, the lower the error.","a2485b5d":"## Extract data from CSV","6c4c049d":"## Generated Test images","360268aa":"**Refer to Keras Blog for better idea : https:\/\/blog.keras.io\/building-autoencoders-in-keras.html**"}}