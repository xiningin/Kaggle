{"cell_type":{"33b29bf5":"code","0e85f97c":"code","21786838":"code","af36cef9":"code","276342e9":"code","4afd1339":"code","8a9d8987":"code","f258ffc5":"code","e893a7fc":"code","1bd26e00":"code","50a0cc23":"code","0353c572":"code","4ff38973":"code","575407d6":"code","d32b68eb":"code","ebf54784":"code","81b2271d":"code","2e60cb28":"code","80c27cd6":"code","ef151430":"code","7c60061b":"code","0fc00e97":"code","d06bc175":"code","34ed6df8":"markdown","d7477eaa":"markdown"},"source":{"33b29bf5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e85f97c":"#possibly use SVC, naive, KNN, SVC ensembler\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib import pyplot\nsns.set(style='white', context='notebook', palette='deep')","21786838":"df = pd.read_csv(\"..\/input\/adult-census-income\/adult.csv\")\ndf.head()","af36cef9":"#only works for qualitative  data\ndf.describe()","276342e9":"df.replace('?', np.NaN,inplace = True)\ndf.head()","4afd1339":"df.info()","8a9d8987":"#summary of all the values in dataset\nfor i in df.columns:\n    print(df[i].value_counts())","f258ffc5":"import seaborn as sns\nint_df=['age', 'fnlwgt', 'education' 'relationship', 'race', 'sex',\n       'capital.gain', 'capital.loss', 'hours.per.week']\nsns.kdeplot(data=df, x=df['age'])","e893a7fc":"#Both capital loss and gain are both are thin tailed and are zero for most of the cases. \n#Similarly, average is 40hrs for most cases.\n#sns.kdeplot(data=df, x=df['capital.gain'])\n#sns.kdeplot(data=df, x=df['capital.loss'])\n#sns.kdeplot(data=df, x=df['hours.per.week'])\n#sns.kdeplot(data=df, x=df['marital.status'])\n","1bd26e00":"df.drop(['capital.gain','capital.loss'], axis=1, inplace=True)\ndf.drop(['hours.per.week'], axis=1, inplace=True)\n","50a0cc23":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ndf['workclass'] = le.fit_transform(df['workclass'])\ndf['marital.status'] = le.fit_transform(df['marital.status'])\ndf['occupation'] = le.fit_transform(df['occupation'])\ndf['relationship'] = le.fit_transform(df['relationship'])\ndf['race'] = le.fit_transform(df['race'])\ndf['sex'] = le.fit_transform(df['sex'])\ndf['native.country'] = le.fit_transform(df['native.country'])\ndf['income'] = le.fit_transform(df['income'])\ndf['education'] = le.fit_transform(df['education'])\n","0353c572":"df.describe()","4ff38973":"df.corr()","575407d6":" \nax = sns.heatmap(df.corr())","d32b68eb":"df.describe()","ebf54784":"#sns.countplot(x=\"education.num\", data=df)\n# we can try to remove outliers\n","81b2271d":"#print(df['native.country'].value_counts())\n# df=df[df['native.country']==38] \n# df=df[df['education.num'] not in [2,3,16,15,4,5,6,7,8] ]\n# print(df.shape)\n# # c=0\n# # for i in df['native.country']!='38':\n# #     c+=1\n# # print(c)\n# # df.head()\ndf.shape","2e60cb28":"x = df.drop(['income'], axis = 1)\ny = df['income']\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2) ","80c27cd6":"from sklearn.naive_bayes import GaussianNB\ngb = GaussianNB()\ngb.fit(x_train,y_train)\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\ny_pred = gb.predict(x_test)\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(accuracy_score(y_test,y_pred)*100)","ef151430":"from sklearn.metrics import roc_curve, auc, roc_auc_score\nauc_nb = roc_auc_score(y_test, gb.predict_proba(x_test)[:,1])\nprint(f\"The AUC Score  is {round(auc_nb,3)*100} %\")","7c60061b":"from sklearn.svm import SVC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nsvc=make_pipeline(StandardScaler(), SVC(gamma='auto'))\nsvc.fit(x_train,y_train)\ny_pred = svc.predict(x_test)\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(accuracy_score(y_test,y_pred)*100)\n","0fc00e97":"from sklearn.metrics import roc_curve, auc, roc_auc_score\nauc_nb = roc_auc_score(y_test, gb.predict_proba(x_test)[:,1])\nprint(f\"The AUC Score  is {round(auc_nb,3)*100} %\")","d06bc175":"from sklearn.neighbors import KNeighborsClassifier\nneigh = KNeighborsClassifier(n_neighbors=1000)\nneigh.fit(x_train,y_train)\ny_pred = svc.predict(x_test)\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(accuracy_score(y_test,y_pred)*100)","34ed6df8":"**Exploratory data analysis**","d7477eaa":"Description of fnlwgt (final weight)\nThe weights on the Current Population Survey (CPS) files are controlled to independent estimates of the civilian noninstitutional population of the US. These are prepared monthly for us by Population Division here at the Census Bureau. We use 3 sets of controls. These are:\n\nA single cell estimate of the population 16+ for each state.\n\nControls for Hispanic Origin by age and sex.\n\nControls by Race, age and sex.\n\nWe use all three sets of controls in our weighting program and \"rake\" through them 6 times so that by the end we come back to all the controls we used. The term estimate refers to population totals derived from CPS by creating \"weighted tallies\" of any specified socio-economic characteristics of the population. People with similar demographic characteristics should have similar weights. There is one important caveat to remember about this statement. That is that since the CPS sample is actually a collection of 51 state samples, each with its own probability of selection, the statement only applies within state."}}