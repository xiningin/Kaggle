{"cell_type":{"9db4f4ea":"code","711e8dd4":"code","27d3e968":"code","743a17fd":"code","d468a093":"code","b28b6621":"code","867e250b":"code","fc1d9e6c":"code","9dcb5cb8":"code","f8d56395":"code","94d27212":"code","a582d4b1":"code","a385646f":"code","1b2d92e4":"code","9dc52281":"code","15a51502":"code","3c1d7583":"code","c372e6a8":"code","d5eb0e1a":"markdown","eddc2cf9":"markdown","5eb8c227":"markdown","8ab3a21d":"markdown","40d4f321":"markdown","218297aa":"markdown","21340fd7":"markdown","2119a76e":"markdown","f78b9b44":"markdown","e43351b2":"markdown"},"source":{"9db4f4ea":"import pandas as pd\nimport numpy as np\nfrom mlxtend.frequent_patterns import apriori, association_rules\nimport plotly.express as px","711e8dd4":"df_ = pd.read_csv(\"..\/input\/market-basket-analysis\/Assignment-1_Data.csv\", sep = \";\")\ndf = df_.copy()","27d3e968":"df.head(10)","743a17fd":"def check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())","d468a093":"check_df(df)","b28b6621":"# Drop na values\ndf.dropna(inplace=True)\n# Quantity and Price should be  greater than 0\ndf = df[df[\"Quantity\"] > 0]\n# We have to change the price column datatype as a numeric\ndf ['Price'] = pd.to_numeric(df['Price'], errors='coerce')\ndf = df[df[\"Price\"] > 0]","867e250b":"check_df(df)","fc1d9e6c":"total_sales = df\ntotal_sales[\"Total_Price\"] = total_sales[\"Price\"] * total_sales[\"Quantity\"]\n#total_sales.columns\ntotal_sales_per_customer = total_sales.groupby([\"CustomerID\", \"Country\"]).agg({\"Total_Price\": \"sum\"})\ntotal_sales_per_customer.head(10)","9dcb5cb8":"total_sales_per_customer.reset_index(inplace=True)\ntotal_sales_per_customer.sort_values(by = \"Total_Price\", ascending = False).head(10)","f8d56395":"# consider that for all time period\ndata_fig = total_sales_per_customer.sort_values(by = \"Total_Price\", ascending = False).head(100)\n\nfig = px.scatter(data_fig, x=\"CustomerID\", y=\"Total_Price\",\n\t         size=\"Total_Price\", color=\"Country\",\n                 hover_name=\"Country\", log_x=True, size_max=60, title=\"Top 100 Shoppers and Their Contries & Shopping Amounts\")\nfig.show()","94d27212":"# consider that for all time period\n#total_sales_per_customer.head(20)\ntotal_sales_per_customer.groupby([\"Country\"]).agg({\"Total_Price\":\"sum\"}).reset_index().sort_values(by=\"Total_Price\", ascending=False )","a582d4b1":"# consider that for all time period\ndata = total_sales_per_customer.groupby([\"Country\"]).agg({\"Total_Price\":\"sum\"}).reset_index().sort_values(by=\"Total_Price\", ascending=False )\nfig = px.bar(data, x='Country', y='Total_Price' , title = \"Shopping Amounts by Countries\")\nfig.show()","a385646f":"#df_united_kingdom = df.loc[df[\"Country\"]==\"United Kingdom\"]\ndf_invoice_product_matrix = df.groupby(['BillNo', 'Itemname']).  \\\n    agg({\"Quantity\": \"sum\"}).unstack().fillna(0).  \\\n    applymap(lambda x: 1 if x > 0 else 0)\n\ndf_invoice_product_matrix.head(10)","1b2d92e4":"frequent_itemsets = apriori(df_invoice_product_matrix, min_support=0.001, use_colnames=True) \nfrequent_itemsets.sort_values(\"support\", ascending=False)","9dc52281":"rules = association_rules(frequent_itemsets, metric=\"support\", min_threshold=0.001)\nrules.sort_values(\"support\", ascending=False).head(10)\n","15a51502":"sorted_rules = rules.sort_values(\"lift\", ascending=False)\nrules.sort_values(\"lift\", ascending=False).head(10)","3c1d7583":"# We can try below products in the loop\n# ('Quantity', 'VANILLA SCENT CANDLE JEWELLED BOX')\n# ('Quantity', 'DOORMAT MERRY CHRISTMAS RED')\n# ('Quantity', 'DOORMAT RESPECTABLE HOUSE')\n# ('Quantity', 'DOORMAT SPOTTY HOME SWEET HOME')\n# ('Quantity', 'DOORMAT UNION FLAG')\n# ('Quantity', 'DOORMAT UNION FLAG')\n\nrecommendation_list = []\n\nfor i, product in sorted_rules[\"antecedents\"].items():\n    for j in list(product):\n        if j == ('Quantity', 'MARIE ANTOINETTE TRINKET BOX GOLD'):\n            recommendation_list.append(list(sorted_rules.iloc[i][\"consequents\"]))","c372e6a8":"recommendation_list","d5eb0e1a":"# 3) Exploratory Data Analysis and Some Visualizations","eddc2cf9":"![Thanks](https:\/\/ecospiritualityresources.files.wordpress.com\/2018\/03\/thanks-for-reading.png)","5eb8c227":"# 2) Data Pre-processing","8ab3a21d":"# 4) Invoice Product Matrix","40d4f321":"# 5) Assosiciation Rules Learning","218297aa":"![ARL](https:\/\/miro.medium.com\/max\/2880\/1*DHfQvlMVBaJCHpYmj1kmCw.png)","21340fd7":" # 1) Import Libraries","2119a76e":"# Market Basket Analysis with Association Rule Learning and Data Analysis","f78b9b44":"#### As a result, the products that are purchased together with the ***('Quantity', 'MARIE ANTOINETTE TRINKET BOX GOLD')*** product are seen below.","e43351b2":"## Top 10 Shoppers and Their Coutries"}}