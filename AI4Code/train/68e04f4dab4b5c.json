{"cell_type":{"8a74182d":"code","9388cadc":"code","cc9c4dcb":"code","39f409b4":"code","8ad08c45":"code","ff107012":"code","a60a76c2":"code","f354fbbd":"code","5ea35ffc":"code","ac1a001d":"code","cb6098b1":"code","1a226a2b":"code","c7adaa66":"code","7b6bb3d1":"code","8d571329":"code","1310ccb9":"code","558e28b7":"code","bc5903c5":"code","c2413584":"code","3bc2ece9":"code","37bbea53":"code","5383f0af":"code","c9afc11c":"code","cd6dda0a":"code","470c13aa":"code","0c71f6a6":"code","2085b230":"code","710867d8":"code","f71b8a94":"code","01c8c736":"code","8ee7f2c9":"code","abd32ae9":"code","daaa057f":"code","ec19f632":"code","ca774ee9":"code","a8f36265":"code","e7829811":"code","4ee4b49d":"code","d305f091":"code","3750781c":"code","552cf19a":"code","88175fd6":"code","aa3387bc":"code","ca927ca8":"code","efb1c235":"code","f90b2870":"code","c55f42b9":"code","154b9e8c":"markdown","6e78f816":"markdown","5efa3cf8":"markdown","df3553fd":"markdown"},"source":{"8a74182d":"import pandas as pd\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\nimport os\nimport tensorflow as tf\nimport copy\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.metrics import log_loss\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.decomposition import PCA\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns',None)","9388cadc":"train_features=pd.read_csv(\"..\/input\/lish-moa\/train_features.csv\")\ntrain_targets_scored=pd.read_csv(\"..\/input\/lish-moa\/train_targets_scored.csv\")\ntrain_targets_nonscored=pd.read_csv(\"..\/input\/lish-moa\/train_targets_nonscored.csv\")\ntest_features=pd.read_csv('..\/input\/lish-moa\/test_features.csv')\nsample_submission=pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')","cc9c4dcb":"plt.hist(train_features.iloc[10,4:].values)","39f409b4":"GENES=[col for col in train_features.columns if col.startswith('g-')]\nCELLS=[col for col in train_features.columns if col.startswith('c-')]","8ad08c45":"for col in (GENES+CELLS):\n    transformer=QuantileTransformer(n_quantiles=100,random_state=0,output_distribution=\"normal\")\n    vec_len=len(train_features[col].values)\n    vec_len_test=len(test_features[col].values)\n    raw_vec=train_features[col].values.reshape(vec_len,1)\n    transformer.fit(raw_vec)\n    train_features[col]=transformer.transform(raw_vec).reshape(1,vec_len)[0]\n    test_features[col]=transformer.transform(test_features[col].values.reshape(vec_len_test,1)).reshape(1,vec_len_test)[0]","ff107012":"train_features.describe()","a60a76c2":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    \nseed_everything(seed=42)","f354fbbd":"n_comp=30\ndata = pd.concat([pd.DataFrame(train_features[GENES]), pd.DataFrame(test_features[GENES])])\ndata2 = (PCA(n_components=n_comp, random_state=42).fit_transform(data[GENES]))\ntrain2 = data2[:train_features.shape[0]]; test2 = data2[-test_features.shape[0]:]\n\ntrain2 = pd.DataFrame(train2, columns=[f'pca_G-{i}' for i in range(n_comp)])\ntest2 = pd.DataFrame(test2, columns=[f'pca_G-{i}' for i in range(n_comp)])\n\n# drop_cols = [f'c-{i}' for i in range(n_comp,len(GENES))]\ntrain = pd.concat((train_features[['cp_type','cp_time','cp_dose']], train2), axis=1)\ntest = pd.concat((test_features[['cp_type','cp_time','cp_dose']], test2), axis=1)","5ea35ffc":"train_features.shape","ac1a001d":"test_features.isnull().sum()","cb6098b1":"#CELLS\nn_comp = 15\n\ndata = pd.concat([pd.DataFrame(train_features[CELLS]), pd.DataFrame(test_features[CELLS])])\ndata2 = (PCA(n_components=n_comp, random_state=42).fit_transform(data[CELLS]))\ntrain2 = data2[:train_features.shape[0]]; test2 = data2[-test_features.shape[0]:]\n\ntrain2 = pd.DataFrame(train2, columns=[f'pca_C-{i}' for i in range(n_comp)])\ntest2 = pd.DataFrame(test2, columns=[f'pca_C-{i}' for i in range(n_comp)])\n\n# drop_cols = [f'c-{i}' for i in range(n_comp,len(CELLS))]\ntrain = pd.concat((train, train2), axis=1)\ntest = pd.concat((test, test2), axis=1)","1a226a2b":"#train=train_features\n#test=test_features\n","c7adaa66":"from sklearn.feature_selection import VarianceThreshold\n\n\nvar_thresh=VarianceThreshold(threshold=0.5)","7b6bb3d1":"data=train.append(test)\ndata.shape","8d571329":"data_transformed=var_thresh.fit_transform(data.iloc[:,4:])\ndata_transformed.shape","1310ccb9":"data.head()","558e28b7":"train_transformed=data_transformed[:train_features.shape[0]]\ntest_transformed=data_transformed[-test_features.shape[0]:]","bc5903c5":"train_transformed.shape,test_transformed.shape","c2413584":"train_features=pd.DataFrame(train_features[['sig_id','cp_type','cp_time','cp_dose']].values.reshape(-1,4),columns=['sig_id','cp_type','cp_time','cp_dose'])\ntrain_features=pd.concat([train_features,pd.DataFrame(train_transformed[:,4:])],axis=1)\n \n","3bc2ece9":"train_features.shape","37bbea53":"test_features=pd.DataFrame(test_features[['sig_id','cp_type','cp_time','cp_dose']].values.reshape(-1,4),columns=['sig_id','cp_type','cp_time','cp_dose'])\ntest_features=pd.concat([test_features,pd.DataFrame(test_transformed[:,4:])],axis=1)","5383f0af":"train=train_features.merge(train_targets_scored,on='sig_id')\ntarget=train[train_targets_scored.columns]","c9afc11c":"target.shape,train_features.shape\n","cd6dda0a":"#train=train.drop('cp_type',axis=1)\n#test=test_features.drop('cp_type',axis=1)\n","470c13aa":"train.isnull()","0c71f6a6":"train=train.loc[train['cp_type']!='ctl_vehicle']","2085b230":"train=train_features.drop('sig_id',axis=1)\ntest=test_features.drop('sig_id',axis=1)","710867d8":"COLS=['cp_type','cp_time','cp_dose']\nFE=[]\nfor col in COLS:\n    for mod in train[col].unique():\n        FE.append(mod)\n        train[mod]=(train[col]==mod).astype(int)","f71b8a94":"COLS=['cp_type','cp_time','cp_dose']\nFE=[]\nfor col in COLS:\n    for mod in test[col].unique():\n        FE.append(mod)\n        test[mod]=(test[col]==mod).astype(int)","01c8c736":"train=train.drop(['cp_type','cp_time','cp_dose'],axis=1)\ntest=test.drop(['cp_type','cp_time','cp_dose'],axis=1)","8ee7f2c9":"target_cols=target.drop('sig_id',axis=1).columns.values.tolist()\n","abd32ae9":"target=target.drop('sig_id',axis=1)","daaa057f":"target_cols","ec19f632":"#import xgboost as xgb\n#from sklearn.model_selection import train_test_split\n#from sklearn.multioutput import MultiOutputClassifier\n#from sklearn.metrics import accuracy_score\n\n#x_train,x_test,y_train,y_test=train_test_split(train,target,test_size=0.2,random_state=42)\n#xgb_estimator=xgb.XGBClassifier(objective='binary:logistic')\n#multilabel_model=MultiOutputClassifier(xgb_estimator)\n#multilabel_model.fit(x_train,y_train)","ca774ee9":"train=train.astype(float)","a8f36265":"target=target.astype(float)","e7829811":"num_columns=train.shape[1]","4ee4b49d":"from keras.models import Sequential\nfrom keras.layers import Dense,Activation,Dropout,BatchNormalization\nimport keras\nfrom keras.optimizers import SGD\nimport tensorflow as tf\n","d305f091":"train.shape,test.shape","3750781c":"nodes=[1024,2048]\ndropout=[0.2,0.25]\nfunc=['relu','tanh']\npreds=0","552cf19a":"for i in range(3):\n    model=Sequential()\n    model.add(BatchNormalization())\n    model.add(Dropout(dropout[i]))\n    model.add(Dense(nodes[i],activation=func[i],input_dim=train.shape[1],kernel_initializer='uniform'))\n    model.add(BatchNormalization())\n    model.add(Dense(nodes[i],activation=func[i]))\n    model.add(Dropout(dropout[i]))\n    model.add(Dense(1048,activation='tanh'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.25))\n    #model.add(Dense(1024,kernel_initializer='uniform',activation='tanh'))\n    #model.add(Dropout(0.5))\n    model.add(Dense(target.shape[1],activation='sigmoid'))\n    sgd=SGD(lr=0.01,momentum=0.9)\n    model.compile(optimizer=sgd,loss='binary_crossentropy',metrics=['accuracy'])\n    model.fit(train.values,target.values,batch_size=60,epochs=20,verbose=2)\n    preds+=model.predict(test)\n","88175fd6":"preds","aa3387bc":"preds\/=2\npreds","ca927ca8":"id=test_features.loc[test_features['cp_type'] =='ctl_vehicle', 'sig_id']","efb1c235":"df=pd.DataFrame(preds,columns=list(target),index=test_features['sig_id'])\ndf.index[0]","f90b2870":"for i in range(len(df.index)):\n    if df.index[i] in(id):\n        df.iloc[df.index[i],train_targets_scored.columns[1:]]=0","c55f42b9":"df.to_csv('submission.csv')","154b9e8c":"The code below is showing use of the dataframe.sum() operation.df.sum()\nHere we find the total of the values in each column and then sort each columns in ascending order according to the sum calculated for each column.","6e78f816":"# Feature Selection","5efa3cf8":"Here we focus on only the gene features and apply pca to decompose the gene features to 50","df3553fd":"# Application of PCA"}}