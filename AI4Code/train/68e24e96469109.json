{"cell_type":{"40eccdeb":"code","5f813fca":"code","1cf6c808":"code","4733ffca":"code","395a8aba":"code","54cdcc30":"code","fb8a5f43":"code","70c100c1":"code","656eff99":"code","ed09c953":"code","45d0327d":"code","d4380def":"code","4c7275e4":"code","1a63f5fb":"code","9b81bcfe":"code","b3409b75":"code","6542c3d9":"code","f2b6409e":"code","90a55b6e":"code","332b3cde":"code","2b809328":"code","24c81db8":"code","0538954b":"code","6764519e":"code","946f79d2":"code","428e0e10":"code","4c0e1a85":"code","1f427875":"code","2b56ce95":"code","f4126881":"code","71408f5a":"code","0630b14e":"code","97bf59cd":"code","bb91797c":"code","2a89d166":"code","18bc6155":"code","7d6ddd3d":"code","359e5b30":"code","b744e571":"code","1b0ea815":"code","fa175fae":"code","457e6c85":"code","cd4e1f37":"code","bcf6970d":"code","2dbc2bdb":"code","a91e5d94":"code","f07d10e2":"code","c39f6b0a":"code","0e006018":"code","0abdfa33":"code","e7bd4b47":"code","4785413b":"code","1e9102c7":"code","7c4a2988":"code","68fc23a6":"code","675ca704":"code","f79b92a0":"code","61e0c29e":"code","735c0455":"code","851644c1":"code","dacfe5dc":"code","db1112b1":"code","09aee593":"code","52d8b36c":"code","b059d55a":"code","1e468e02":"code","90e53d3a":"code","b48d00ff":"code","755acb01":"code","48edeadf":"code","11c9ed2f":"markdown","3aed4a04":"markdown","526caa56":"markdown","6b5f7805":"markdown","3360082d":"markdown","8c308b23":"markdown","451a5c43":"markdown","96475d73":"markdown","ca89bf34":"markdown","a16bf3c1":"markdown","613e35fd":"markdown","1d124f24":"markdown","9ff1b91e":"markdown","e4308239":"markdown","e918818a":"markdown","08f1abf1":"markdown","f7e2557c":"markdown","7031cf47":"markdown","c27d4ad8":"markdown","e670120c":"markdown","a68a62d4":"markdown","7023342d":"markdown","ecff9dff":"markdown","7b35b016":"markdown"},"source":{"40eccdeb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n\nimport missingno as no\n\nfrom sklearn.preprocessing import LabelEncoder","5f813fca":"sns.set_style('whitegrid')","1cf6c808":"train_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv\")\nsample_df = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/sample_submission.csv\")","4733ffca":"train_df.head()","395a8aba":"no.matrix(train_df, figsize=(18,4));","54cdcc30":"train_df.shape, test_df.shape","fb8a5f43":"train_df.drop('id', axis=1).describe().T.style.bar(subset=['mean'], color=px.colors.qualitative.Pastel[4])\\\n                                        .background_gradient(subset=['std'], cmap='Greens')","70c100c1":"plt.figure(figsize=(12,5))\nsns.countplot(x=train_df['target'], palette='coolwarm')\nplt.title(\"Distribution of target labels\", fontdict={'fontsize':24})\nplt.xlabel('Target', fontdict={'fontsize':16})\nplt.ylabel('Count', fontdict={'fontsize':16});","656eff99":"class_ratio = 100 * train_df['target'].value_counts() \/ len(train_df)\n\nplt.figure(figsize=(12,5))\nsns.barplot(x=class_ratio.index,y=class_ratio.values, palette='coolwarm')\nplt.title(\"Target labels Percentage in training dataset\", fontdict={'fontsize':24})\nplt.ylabel(\"Percentage %\")\nplt.xlabel(\"Target label\");","ed09c953":"lb = LabelEncoder()\ntrain_df['num_target'] = lb.fit_transform(train_df['target'])","45d0327d":"fig, ax = plt.subplots(figsize=(28,16))\ncorr_mat = train_df.drop([\"id\", 'target'], axis=1).corr()\nmask = np.zeros_like(corr_mat, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nsns.heatmap(corr_mat, mask=mask, square=True, ax=ax, linewidths=0.1,center=0, cmap='coolwarm_r');","d4380def":"fig = plt.figure(figsize=(18,5))\nsns.barplot(y=corr_mat['num_target'].values[:-1],x=corr_mat['num_target'].index[:-1], palette='coolwarm')\nplt.xticks(rotation=90);","4c7275e4":"feat_cols = [col for col in train_df.columns if col not in ['target','num_target','id']]\n\nfig = plt.figure(figsize=(20,40))\nfor i,col in enumerate(feat_cols[:12]):\n    temp_df = train_df[[col,'target']].groupby('target').mean()\n    plt.subplot(25,3,i+1)\n    sns.barplot(x=temp_df.index[:12],y=temp_df[col][:12], palette='coolwarm')\n    plt.ylabel(f\"feature_{i} mean\")\n    plt.tight_layout()","1a63f5fb":"fig = plt.figure(figsize=(20,40))\n\nfor i, col in enumerate(feat_cols):\n    plt.subplot(25,3, i+1)\n    sns.kdeplot(train_df[col], fill=True, color='red')\n    sns.kdeplot(test_df[col], fill=True, color='blue')\nplt.tight_layout()","9b81bcfe":"# Create fig and gridspec\nfig = plt.figure(figsize=(16,10),dpi=80)\ngrid = plt.GridSpec(4,4, hspace=0.5,wspace=0.2)\n\n# Define the axes\nax_main = fig.add_subplot(grid[:-1,:-1])\nax_right = fig.add_subplot(grid[:-1,-1], xticklabels=[],yticklabels=[])\nax_bottom = fig.add_subplot(grid[-1,0:-1],xticklabels=[],yticklabels=[])\n\n# Scatterplot on main ax\nax_main.scatter(x='feature_12', y='feature_39',c='num_target',data=train_df,alpha=.9,cmap=\"coolwarm\")\n\n# Boxplot on the right\nax_right.boxplot(x=train_df['feature_39'])\n\n# boxplot on the bottom\nax_bottom.boxplot(x=train_df['feature_12'],vert=False, )\n\n# Decorations\nax_main.set(title='Scatterplot with Boxplot \\n feature_39 vs. feature_12', xlabel='feature_39', ylabel='feature_12');","b3409b75":"sns.set_style('white')","6542c3d9":"df_agg = train_df.loc[:,['feature_39','target']].groupby('target')\nvals = [df['feature_39'].values.tolist() for i,df in df_agg]\nplt.figure(figsize=(16,9),dpi=80)\n# create color list\ncolors = [plt.cm.coolwarm(i\/float(len(vals)-1)) for i in range(len(vals))]\n# plot histogram\nn, bins, patches = plt.hist(vals,30,stacked=True,density=False,color=colors[:len(vals)])\nplt.xlim(0,15)\n# decorations\nplt.legend({group:col for group,col in zip(np.unique(train_df['target']).tolist(),colors[:len(vals)])})\nplt.title('Stacked histogram of fearure_39 colored by class', fontsize=22);","f2b6409e":"# Density Plot\nplt.figure(figsize=(10,5), dpi= 80)\nfor i in range(len(train_df['target'].unique())):\n    sns.kdeplot(train_df.loc[train_df['target'] == f'Class_{i}', \"feature_39\"], shade=False, color=colors[i], alpha=.3, fill=None)\nplt.title(\"Density plot of feature_39\", fontsize=22)\nplt.legend({group:val for group,val in zip(train_df['target'].unique(),colors[:9])});","90a55b6e":"!pip install joypy\nimport joypy","332b3cde":"plt.figure(figsize=(16,10),dpi=80)\nfig, axes = joypy.joyplot(train_df, \n                          column=['feature_39','feature_10','feature_67'],\n                          by='target',\n                          figsize=(14,10),\n                          legend=True,\n                          color=['g','r','b'])\nplt.title(\"Chosen features distribution per class\",fontsize=22);","2b809328":"# Drop unwanted columns\ntrain_df.drop([\"id\",\"target\"], axis=1, inplace=True)\ntest_df.drop(\"id\", axis=1, inplace=True)","24c81db8":"train_df.shape, test_df.shape","0538954b":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Split our data into X & y\nX = train_df.iloc[:,:-1].values\ny = train_df.iloc[:,-1].values\n\n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.2,\n                                                    random_state=42,\n                                                    stratify=y)\n\n# Normalize the data\nsc = MinMaxScaler(feature_range=(0,1))\nX_train_norm = sc.fit_transform(X_train)  # First we fit and transform train set and than transform test set to avoid data leakage\nX_test_norm = sc.transform(X_test)","6764519e":"# Check the shape of our datasets\nX_train_norm.shape, X_test_norm.shape","946f79d2":"import tensorflow as tf\nimport tensorflow.keras.backend as K\nprint(tf.__version__)","428e0e10":"# Create a base model\nbase_model = tf.keras.Sequential([\n    tf.keras.layers.Dense(75, activation='relu'),\n    tf.keras.layers.Dense(75, activation='relu'),\n    tf.keras.layers.Dense(9, activation='softmax')  # we have multi-class classification problem\n])\n\n# Compile the base model\nbase_model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(), # expect labels to provided as integers\n                   optimizer=tf.keras.optimizers.Adam(lr=0.001),\n                   metrics=[\"accuracy\"])\n\n# Fit the base model\nbase_history = base_model.fit(X_train_norm, \n                              y_train, \n                              epochs=20,\n                              validation_data=(X_test_norm, y_test))","4c0e1a85":"# Create a data frame\nbase_history_df = pd.DataFrame(base_history.history)","1f427875":"import warnings\nwarnings.filterwarnings(\"ignore\")","2b56ce95":"def plot_history(df, fold=1):\n    fig, ax = plt.subplots(nrows=1,ncols=2, figsize=(18,5))\n    \n    fig.suptitle(f\"FOLD={fold}\")\n\n    # First plot\n    df[[\"loss\",\"val_loss\"]].plot(ax=ax[0])\n    ax[0].set_xlabel(\"Epochs\")\n    ax[0].set_ylabel(\"Loss\")\n    ax[0].set_title(\"Training and Validation Loss\")\n\n    # Second plot\n    df[[\"accuracy\",\"val_accuracy\"]].plot(ax=ax[1])\n    ax[1].set_xlabel(\"Epochs\")\n    ax[1].set_ylabel(\"Accuracy\")\n    ax[1].set_title(\"Training and Validation Accuracy\")\n    \nplot_history(base_history_df)","f4126881":"base_model.evaluate(X_train_norm, y_train)\nbase_model.evaluate(X_test_norm,y_test)","71408f5a":"# Make predictions\nbase_y_pred = base_model.predict(X_test_norm)\n# Convert all of the prediction probabilities into integers\nbase_y_pred_int = base_y_pred.argmax(axis=1)\nbase_y_pred_int[:10]","0630b14e":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, base_y_pred_int))","97bf59cd":"classes_names = {l:i for (i,l) in enumerate(lb.classes_)}","bb91797c":"import itertools\nfrom sklearn.metrics import confusion_matrix\n\ndef make_confusion_matrix(y_true, y_preds, classes=None, figsize=(15,15),text_size=15):\n    \"\"\"\n    Plots confusion matrix for given true labels and model predictions.\n    \"\"\"\n    # Create the confusion matrix\n    cm = confusion_matrix(y_true, y_preds)\n    cm_norm = cm.astype(\"float\") \/ cm.sum(axis=1)[:,np.newaxis] # normalize out confusion matrix\n    n_classes = cm.shape[0]\n    \n    # Create a matrix plot\n    fig, ax = plt.subplots(figsize=figsize)\n    cax = ax.matshow(cm, cmap=plt.cm.Blues)\n    fig.colorbar(cax)\n    \n    # Set labels to be classes\n    if classes:\n        labels=classes\n    else:\n        labels=np.arange(cm.shape[0])\n        \n    # Label the axes\n    ax.set(title=\"Confusion matrix\",\n           xlabel=\"Predicted labels\",\n           ylabel=\"True labels\",\n           xticks=np.arange(n_classes),\n           yticks=np.arange(n_classes),\n           xticklabels=labels,\n           yticklabels=labels)\n    \n    # Set x-axis labels to bottom\n    ax.xaxis.set_label_position(\"bottom\")\n    ax.xaxis.tick_bottom()\n    \n    # Adjust label size\n    ax.yaxis.label.set_size(text_size)\n    ax.xaxis.label.set_size(text_size)\n    ax.title.set_size(text_size)\n    \n    # Set threshold to different colors\n    threshold = (cm.max() + cm.min()) \/ 2.\n    \n    # Plot the text on each cell\n    for i,j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, f\"{cm[i,j]} ({cm_norm[i,j]*100:.1f})\",\n        horizontalalignment='center',\n        color='white' if cm[i,j] > threshold else 'black',\n        size=text_size)","2a89d166":"confusion_matrix(y_test, base_y_pred_int)","18bc6155":"# Make a confusion matrix plot\nmake_confusion_matrix(y_true=y_test, \n                      y_preds=base_y_pred_int, \n                      classes=classes_names.keys(), \n                      figsize=(18,15),\n                      text_size=15)","7d6ddd3d":"from sklearn.metrics import plot_roc_curve, auc, roc_curve","359e5b30":"n_classes = len(classes_names)\n\ndef roc_auc_plot(y_true, y_preds, n_classes):\n    \"\"\"\n    Compute ROC Curve and ROC Area for each class than create a plot.\n    \"\"\"\n    # Compute roc and auc for each class\n    fpr = dict()\n    tpr = dict()\n    roc_auc = dict()\n    y_true = tf.one_hot(y_true, depth=n_classes)\n    for i in range(n_classes):\n        fpr[i], tpr[i], _ = roc_curve(y_true[:,i],y_preds[:,i])\n        roc_auc[i] = auc(fpr[i],tpr[i])\n        \n    # Plot Roc curve\n    linestyles = ['-', '--', '-.', ':','-', '--', '-.', ':','-']\n\n    plt.figure(figsize=(12,10))\n    for i in range(n_classes):\n        plt.plot(fpr[i], \n                 tpr[i], \n                 label='ROC curve of class {0} (area={1:0.2f})'.format(i+1, roc_auc[i]),\n                 linestyle=linestyles[i])\n        \n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic to multi-class')\n    plt.legend(loc=\"lower right\")\n    plt.show()","b744e571":"roc_auc_plot(y_test, base_y_pred, n_classes)","1b0ea815":"def ann_model(X_train, X_test, y_train, y_true):\n    \n    # Create Early Stopping\n    early_stop = tf.keras.callbacks.EarlyStopping(\n        monitor='val_accuracy',patience=4,min_delta=0,verbose=1,\n        mode='max',baseline=0,restore_best_weights=True)\n    \n    # Create a model\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(75,activation='sigmoid'),\n        tf.keras.layers.Dropout(0.3),\n        tf.keras.layers.Dense(100,activation='sigmoid'),\n        tf.keras.layers.Dropout(0.3),\n        tf.keras.layers.Dense(100,activation='sigmoid'),\n        tf.keras.layers.Dropout(0.3),\n        tf.keras.layers.Dense(75, activation='sigmoid'),\n        tf.keras.layers.Dropout(0.3),\n        tf.keras.layers.Dense(9, activation='softmax')  # We have multi-class classification problem\n    ])\n    \n    # Compile the model\n    model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(), # expect labels to be provide as integer\n                  optimizer=tf.keras.optimizers.Adam(lr=0.001),\n                  metrics=['accuracy']\n                 )\n    \n    # Fit the model\n    history = model.fit(X_train, \n                        y_train, \n                        epochs=60,\n                        validation_data=(X_test, y_true),\n                        callbacks=[early_stop]) \n    \n    model.evaluate(X_test,y_true)\n    \n    return history, model","fa175fae":"tf.random.set_seed(42)\nhistory, model_ann = ann_model(X_train=X_train_norm,\n                     X_test=X_test_norm,\n                     y_train=y_train,\n                     y_true=y_test)","457e6c85":"history_df = pd.DataFrame(history.history)\nplot_history(history_df)","cd4e1f37":"def find_ideal_lr(X_train, X_test, y_train, y_test):\n    \n    # Create the learning rate callback to find ideal learning rate\n    lr_scheduler = tf.keras.callbacks.LearningRateScheduler(lambda epoch: 1e-4 * 10**(epoch\/20))\n    \n    # Create a model\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(75,activation='sigmoid'),\n        tf.keras.layers.Dropout(0.3),\n        tf.keras.layers.Dense(100,activation='sigmoid'),\n        tf.keras.layers.Dropout(0.3),\n        tf.keras.layers.Dense(100,activation='sigmoid'),\n        tf.keras.layers.Dropout(0.3),\n        tf.keras.layers.Dense(75, activation='sigmoid'),\n        tf.keras.layers.Dropout(0.3),\n        tf.keras.layers.Dense(9, activation='softmax')  # We have multi-class classification problem\n    ])\n    \n    # Compile the model\n    model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(), # expect labels to be provide as integer\n                  optimizer=tf.keras.optimizers.Adam(),\n                  metrics=['accuracy']\n                 )\n    \n    # Fit the model\n    history = model.fit(X_train, \n                        y_train, \n                        epochs=60,\n                        validation_data=(X_test, y_test),\n                        callbacks=[lr_scheduler])\n    \n    # Evaluate the model\n    model.evaluate(X_test,y_test)\n    \n    return history, model","bcf6970d":"tf.random.set_seed(42)\nhistory, _ = find_ideal_lr(X_train=X_train_norm,\n                           X_test=X_test_norm,\n                           y_train=y_train,\n                           y_test=y_test)","2dbc2bdb":"find_lr_history_df = pd.DataFrame(history.history)\nplot_history(find_lr_history_df)","a91e5d94":"# Plot the learning rate decay curve\nlrs = 1e-4 * (10**(tf.range(60)\/20))\nplt.figure(figsize=(12,7))\nplt.semilogx(lrs, history.history['loss'])\nplt.axvline(x=1e-2, linestyle='--', color='red')\nplt.xlabel(\"Learning rate\")\nplt.ylabel(\"Loss\")\nplt.title(\"Finding the ideal learning rate\")\nplt.grid()","f07d10e2":"def ann_model(X_train, X_test, y_train, y_test):\n    \n    # Create Early Stopping\n    early_stop = tf.keras.callbacks.EarlyStopping(\n        monitor='val_accuracy',patience=4,min_delta=0,verbose=1,\n        mode='max',baseline=0,restore_best_weights=True)\n    \n    # Create a model\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(75,activation='sigmoid'),\n        tf.keras.layers.Dropout(0.3),\n        tf.keras.layers.Dense(100,activation='sigmoid'),\n        tf.keras.layers.Dropout(0.3),\n        tf.keras.layers.Dense(100,activation='sigmoid'),\n        tf.keras.layers.Dropout(0.3),\n        tf.keras.layers.Dense(75, activation='sigmoid'),\n        tf.keras.layers.Dropout(0.3),\n        tf.keras.layers.Dense(9, activation='softmax')  # We have multi-class classification problem\n    ])\n    \n    # Compile the model\n    model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(), # expect labels to be provide as integer\n                  optimizer=tf.keras.optimizers.Adam(lr=0.01),  # ideal learning rate\n                  metrics=['accuracy']\n                 )\n    \n    # Fit the model\n    history = model.fit(X_train, \n                        y_train, \n                        epochs=60,\n                        validation_data=(X_test, y_test),\n                        callbacks=[early_stop]) \n    \n    # Evaluate the model\n    model.evaluate(X_test,y_test)\n    \n    return history, model\n\ntf.random.set_seed(42)\nhistory, ann = ann_model(X_train=X_train_norm,\n                         X_test=X_test_norm,\n                         y_train=y_train,\n                         y_test=y_test)","c39f6b0a":"history_df = pd.DataFrame(history.history)\nplot_history(history_df)","0e006018":"SEED=45\nEPOCHS=100\nBATCH_SIZE=512\nN_FOLDS=10\nN_CLASS=9","0abdfa33":"def custom_metric(y_true,y_pred):\n    cce = tf.keras.losses.SparseCategoricalCrossentropy()\n    y_pred = K.clip(y_pred, 1e-15, 1-1e-15)\n    loss = K.mean(cce(y_true, y_pred))\n    return loss","e7bd4b47":"def ann_model_2(X_train, X_test, y_train, y_test):\n    \n    # Create Early Stopping\n    es = tf.keras.callbacks.EarlyStopping(\n         monitor='val_custom_metric',patience=42,min_delta=0.0001,verbose=1,\n         mode='min',baseline=0,restore_best_weights=False)\n    \n    # Create weights initializer\n    weights_initializer = tf.keras.initializers.GlorotUniform(seed=SEED)\n    \n    # Create plateau\n    plateau = tf.keras.callbacks.ReduceLROnPlateau(\n        monitor='val_loss',factor=0.04, patience=3,verbose=1,mode='min',cooldown=1)\n    \n    # Create a model\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(75,activation='sigmoid', kernel_initializer=weights_initializer),\n        tf.keras.layers.Dropout(0.2),\n        # tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dense(100,activation='sigmoid', kernel_initializer=weights_initializer),\n        tf.keras.layers.Dropout(0.2),\n        # tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dense(100,activation='sigmoid', kernel_initializer=weights_initializer),\n        tf.keras.layers.Dropout(0.2),\n        # tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dense(75, activation='sigmoid', kernel_initializer=weights_initializer),\n        tf.keras.layers.Dropout(0.2),\n        # tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dense(9, activation='softmax'), # We have multi-class classification problem\n    ])\n    \n    # Compile the model\n    model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(), # expect labels to be provide as integer\n                  optimizer=tf.keras.optimizers.Adam(lr=0.01),  # ideal learning rate\n                  metrics=[\"accuracy\",custom_metric]\n                 )\n    \n    # Fit the model\n    history = model.fit(X_train, \n                        y_train, \n                        epochs=EPOCHS,\n                        batch_size=BATCH_SIZE,\n                        validation_data=(X_test, y_test),\n                        callbacks=[plateau,es],\n                        verbose=1) \n    \n    # Evaluate the model\n    # model.evaluate(X_test,y_test)\n    \n    return history, model","4785413b":"tf.random.set_seed(42)\nhistory, ann = ann_model_2(X_train=X_train_norm, # use X_train when using BatchNormalization\n                           X_test=X_test_norm,\n                           y_train=y_train,\n                           y_test=y_test)","1e9102c7":"history_df = pd.DataFrame(history.history)\nplot_history(history_df)","7c4a2988":"# Scale our test data first\ntest_df_norm = sc.transform(test_df) # we only need to transform the data as we already trained our scaler\n# Make predictions\nann_y_preds = ann.predict(test_df_norm)\n# Paste the prediction for each class into sample df\nfor i,col in enumerate(classes_names):\n    sample_df[col] = ann_y_preds[:,i]\n    \nsample_df.to_csv(\"submission7.csv\", index=False)","68fc23a6":"K.clear_session()","675ca704":"from sklearn.model_selection import StratifiedKFold\ntrain_df[\"kfold\"] = -1\nskf = StratifiedKFold(n_splits=N_FOLDS, shuffle=True, random_state=SEED)\n\nfor fold, (tr_idx, ts_idx) in enumerate(skf.split(X=train_df, y=train_df['num_target'])):\n    train_df.loc[ts_idx,\"kfold\"] = fold","f79b92a0":"train_df[\"kfold\"].value_counts()","61e0c29e":"def ann_model_kfolds(train, test):\n    \n    \"\"\"\n    Function performs cross-validation using StratifyKFolds.\n    \"\"\"  \n    \n    # Create place holders for our predictions\n    oof_train = np.zeros(shape=(train_df.shape[0], N_CLASS))\n    oof_preds = np.zeros(shape=(test_df.shape[0], N_CLASS))\n    history_dict = {}\n    test_fold_preds = {}\n    folds_acc = []\n    folds_loss = []\n    \n    for fold in range(N_FOLDS):\n        print(f\"=========FOLD_{fold+1}=========\")\n        t_df = train[train.kfold !=fold].reset_index(drop=True)\n        v_df = train[train.kfold ==fold].reset_index(drop=True)\n        \n        # Split into training and testing set\n        xtrain = t_df.drop([\"num_target\",'kfold'], axis=1).values\n        xvalid = v_df.drop([\"num_target\",\"kfold\"],axis=1).values\n        ytrain = t_df[\"num_target\"].values\n        yvalid = v_df[\"num_target\"].values\n        \n        # Normalize datasets\n        sc = MinMaxScaler()\n        xtrain_norm = sc.fit_transform(xtrain)\n        xvalid_norm = sc.transform(xvalid)\n        test_norm = sc.transform(test.values)\n        \n        # Time for our model\n        history, ann_model = ann_model_2(X_train=xtrain_norm,\n                                         X_test=xvalid_norm,\n                                         y_train=ytrain,\n                                         y_test=yvalid)\n        \n        # Save history for a model in specific fold\n        history_dict[f\"Fold_{fold+1}\"] = history\n        \n        # Make predictions for our model in a fold split \n        fold_y_preds = ann_model.predict(xvalid_norm)\n        fold_y_pred_test = ann_model.predict(test_norm)\n        \n        # Evaluate our model\n        model_eval = ann_model.evaluate(xvalid_norm, yvalid)\n        \n        # Print our our results\n        print(f\"Fold_{fold+1} Validation Accuracy={model_eval[1]}\")\n        print(f\"Fold_{fold+1} Validation Loss={model_eval[0]}\")\n        print(\"\\n\")\n        \n        # Save our predictions\n        folds_acc.append(model_eval[1])\n        folds_loss.append(model_eval[0])\n        \n        oof_train[v_df.index] = fold_y_preds\n        oof_preds += fold_y_pred_test\n        test_fold_preds[f\"fold_{fold+1}\"] = oof_preds\n        \n    return folds_acc, folds_loss, history_dict, oof_train, oof_preds, test_fold_preds","735c0455":"        \nacc, loss, folds_history, train_pred, test_pred, test_fold_dict = ann_model_kfolds(train_df, test_df)\nprint(\"\\n\")\nprint(\"============Final Models Metrics==============\")\nprint(f\"Mean Accuracy after {N_FOLDS}_folds: {np.mean(acc):.2f}%\")\nprint(f\"Mean Loss after {N_FOLDS}_folds: {np.mean(loss)}\")","851644c1":"for i in range(1,N_FOLDS):\n    temp_df = pd.DataFrame(folds_history[f\"Fold_{i}\"].history)\n    plot_history(temp_df,i)","dacfe5dc":"test_pred = np.clip((test_pred \/ N_FOLDS), 1e-15, 1-1e-15)\nsub_id_df = pd.DataFrame(sample_df['id'], columns=['id'])\nsub_df = pd.DataFrame(test_pred, columns=lb.classes_)\nsub_concat_df = pd.concat([sub_id_df,sub_df], axis=1)\nsub_concat_df.to_csv(f\"sub_({N_FOLDS})_folds.csv\", index=False)","db1112b1":"K.clear_session()","09aee593":"cat_tr_df = train_df.drop(['num_target','kfold'], axis=1).astype('category')\ncat_ts_df = test_df.astype('category')\ncat_tr_df['train'] = 1\ncat_ts_df['train'] = 0\n\ntr_ts_df = pd.concat([cat_tr_df, cat_ts_df])\ndummy_tr_ts_df = pd.get_dummies(tr_ts_df, drop_first=True)\n\ndummy_tr_df = dummy_tr_ts_df[dummy_tr_ts_df['train']==1]\ndummy_ts_df = dummy_tr_ts_df[dummy_tr_ts_df['train']==0]\n\ndummy_tr_df = pd.concat([dummy_tr_df,train_df[['num_target','kfold']]], axis=1)","52d8b36c":"N_COMPONENTS = 75\n\nfrom sklearn.decomposition import PCA, SparsePCA","b059d55a":"pca = PCA(n_components=N_COMPONENTS, random_state=SEED).fit(dummy_tr_df.drop(['num_target','kfold'],axis=1))\n#sparse_pca = SparsePCA(n_components=N_COMPONENTS, random_state=SEED).fit(dummy_tr_df.drop(['num_target','kfold'],axis=1))","1e468e02":"# Create training and test datasets with features from PCA\npca_tr_df = pd.DataFrame(pca.transform(dummy_tr_df.drop(['num_target','kfold'], axis=1)),\n                         columns=[f\"feature_{i}\" for i in range(N_COMPONENTS)])\n\npca_ts_df = pd.DataFrame(pca.transform(dummy_ts_df),\n                         columns = [f\"feature_{i}\" for i in range(N_COMPONENTS)])\n\n# Create training and test dataset with features from SparsePCA\n#spca_tr_df = pd.DataFrame(sparse_pca.transform(dummy_tr_df.drop(['num_target','kfold'], axis=1)),\n                          #columns=[f\"feature_{i}\" for i in range(N_COMPONENTS)])\n\n#spca_ts_df = pd.DataFrame(sparse_pca.transform(dummy_ts_df)),\n                          #columns=[f\"feature_{i}\" for i in range(N_COMPONENTS)])","90e53d3a":"pca_tr_df['kfold'] = -1\npca_tr_df['num_target'] = train_df['num_target'].values\nskf = StratifiedKFold(n_splits=N_FOLDS, shuffle=True, random_state=SEED)\nfor fold, (tr_idx, ts_idx) in enumerate(skf.split(X=pca_tr_df, y=pca_tr_df['num_target'])):\n    pca_tr_df.loc[ts_idx,'kfold'] = fold","b48d00ff":"pca_tr_df.shape, pca_ts_df.shape","755acb01":"acc, loss, folds_history, train_pred, test_pred, test_fold_dict = ann_model_kfolds(pca_tr_df, \n                                                                                   pca_ts_df)\nprint(\"\\n\")\nprint(\"============Final Metrics for a new aproach ==============\")\nprint(f\"Mean Accuracy after {N_FOLDS}_folds: {np.mean(acc):.2f}%\")\nprint(f\"Mean Loss after {N_FOLDS}_folds: {np.mean(loss)}\")","48edeadf":"test_pred = test_pred \/ N_FOLDS\nsub_id_df = pd.DataFrame(sample_df['id'], columns=['id'])\nsub_df = pd.DataFrame(test_pred, columns=lb.classes_)\nsub_concat_df = pd.concat([sub_id_df,sub_df], axis=1)\nsub_concat_df.to_csv(f\"sub_({N_FOLDS})_folds_dummy_and_pca.csv\", index=False)","11c9ed2f":"As we can see our model has improved with less epochs,means using less comutation time. Now, I will try weights initialization to find out if this could improve my model. I'm also going to change metric which we're going to monitor as accuracy is not our goal, hence by observing accuracy we might not necessary get the best loss.","3aed4a04":"### AUC-ROC curve\n\n\ud83d\udd11 **Note:** AUC ROC Curve is a performance measurement for classification problem with various thresholds settings. ROC is a probability curve and AUC represents the degree or measure of separability. It tells how much the model is capable of distinguishing between the classes.","526caa56":"##  \ud83d\udcca Exploratory Data Analysis\n\nAlthough this data set is similar to the previous one and we could start creating model strait away, it is a good practice to look at the properties of a dataset we are working on.","6b5f7805":"As we can see, we have inbalance problem again where majority of it is in class 6 and class 8 so I will apply StratifiedKFold method to help me deal with it. Importance of knowing whether we have balanced or unbalanced target labels is also when it comes to evaluate the model performance. In this case more reliable metrics are f1, precision and recall instead of accuracy.","3360082d":"Hi Kagglers!\nI was wondering how am I supposed to aproach this month competition, what can we do what hasn't been done yet. I decided that this time I focus on creating model in Tensorflow with a deep understanding of workflow and what should be done to create robust model with hope of improving metrics. I would also try to create some nice plots in EDA part.","8c308b23":"### \ud83c\udfaf Our target labels","451a5c43":"Let's see features correlation to the target.","96475d73":"### Confusion matrix","ca89bf34":"## \ud83d\udce1Import Libraries and Datasets","a16bf3c1":"### Features distribution in training and test dataset.","613e35fd":"## Submit our n_folds model","1d124f24":"There are no missing values in training and test datasets.","9ff1b91e":"### Evaluate our base model","e4308239":"### Classification report\n\n","e918818a":"Training and test dataset distribution are virtually the same with lots of outliers. In normal case scenario we would have to deal with it, but in this case were the dataset is created syntheticaly using CGAN I found very little difference in performance of the model, therefore I will not deal with outliers in this notebook.Let's have a closer look into few features with different distribution and create some nice plots and have some fun with it.","08f1abf1":"## How we can improve our model?\n\nTo improve our model we can:\n* Increase hidden layers\n* Add more neurons in hidden layer \n* Change non-linear activation function\n* Find the ideal learning rate\n* Weight initialization\n* Change optimizer\n* Cross-Validate our data\n* Normalizing\/Scaling data\n* Batch Normalization\n\nTo avoid overfitting we can:\n* use dropout method\n* set early stopping\n\nIt's a good idea to change one thing at a time and see if our model improves. I'm going to create a function where I will try these techniques to build a robust model.","f7e2557c":"## Submision","7031cf47":"### Correlation between features and target.","c27d4ad8":"# It's time to create a base ANN (Artificial Neural Network) model. \ud83e\udd41\ud83c\udfba\n\nIn this notebook I would like to create a robust model using Tensorflow. First I will create a base model and than I will try to imrove the model.There are few things to be done in order to make neural network working:\n* All data needs to be numerical.\n* data should be presented in tensors (tensorflow also works great with arrays)\n* Scaled the data (a model performes much better ones a data is normalized)\n\nTo create a base model I will split data with train_test_split. Later, when we try to imrove our model performace and make our model more robust I will use one of the cross validation methods to split the data.","e670120c":"## Base ANN model","a68a62d4":"\ud83d\udd11 **Note:** As we can see on the first plot above, the training loss started with ~1.80 value and have gone down to ~1.72 and it looks like it could go a little bit more if we train for more epochs. On the other hand loss on test data have gone down from ~1.78 to ~1.77 than sort of leveling and as we increase number of epochs loss is going up. Looks like the base model is overfitting. We will have to apply regularization to tackle this issue. Accuracy also increase on training data but is decreasing on test data as we can see on second plot above\n\n\nTo evaluate classification model we can use other metrics as:\n1. Precision (Specificity) - is the ratio of True Positives to all positives predicted by a model(low precision: the more false positive model predicts, the lower the precision).\n2. Recall (also known as Sensitivity) - is the ratio of True Positives to all positives in your data\n3. F1-score - in case we want to find ideal blend of precision and recall\n\nAlongside visualizing our model results as much as possible, there are handfull evaluation methods we should be familiar with. To main ones we can include:\n* Confusion matrix\n* Classification report\n* Receiver Operating Characteristic (ROC) curve\n\nLet's make predictions and try these methods to evaluate our model. We have to remember that our predictions array come out in prediction probability form... to standard output form the sigmoid or softmax activation function.","7023342d":"From these plots we can tell that all features have weak correlation to the target column and the correlation is positive. Feature 20 has no correlation to the target column.","ecff9dff":"## Different aproach","7b35b016":"\ud83d\udd11**Note:** Looks like we can increase number of epochs as val_loss is still lover than training set and accuracy of training and test set stays on the same level (in this case they are beautifully interwine together)."}}