{"cell_type":{"0e3c8260":"code","d5bac1da":"code","fe20b668":"code","7b2c2b07":"code","3e9815b4":"code","2ac3718d":"code","b6108d71":"code","cecc18d3":"code","06934296":"code","8bbbcd05":"code","49443991":"code","a49bde75":"code","15654b66":"code","91c9924a":"code","16287873":"code","75fb7c60":"code","6f960f0e":"code","4425d872":"code","200a57e7":"code","670846bd":"markdown","3ea7f155":"markdown","b34355ad":"markdown","60dbe74e":"markdown","3eb6c984":"markdown","a2602824":"markdown","52d7729b":"markdown","27a514d2":"markdown","229153cd":"markdown","93690422":"markdown","59b842d5":"markdown","a8ef44d8":"markdown","7c6868c5":"markdown","4146bfe7":"markdown","816e7957":"markdown","24685ee6":"markdown","97225b1c":"markdown"},"source":{"0e3c8260":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d5bac1da":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder","fe20b668":"score= pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')\nscore.head(5)","7b2c2b07":"score.rename(columns={\"race\/ethnicity\":\"ethnicity\", \"parental level of education\":\"parent education\", \"math score\":\"math\", \"reading score\":\"reading\", \"writing score\":\"writing\", \"test preparation course\":\"pre_test\"}, inplace=True)\nscore.head()","3e9815b4":"score.dtypes","2ac3718d":"fig, ax= plt.subplots()\nfig.subplots_adjust(hspace=0.8, wspace=0.8, left=0.2, right=1.5)\nfor idx in range(3):\n    plt.subplot(1,3, idx+1)\n    gender_df= score.groupby(\"gender\")[list(score.columns[-3:])[idx]].describe()\n    sns.barplot(gender_df.index, gender_df.loc[:,\"mean\"].values)\n    plt.ylabel(\"score\")\n    plt.title(list(score.columns[-3:])[idx])\n    \nplt.show()","b6108d71":"fig, ax= plt.subplots()\nfig.subplots_adjust(hspace=0.8, wspace=0.8, left=0.2, right=1.5)\nfor idx in range(3):\n    plt.subplot(1,3, idx+1)\n    ethn_df = score.groupby(\"ethnicity\")[list(score.columns[-3:])[idx]].mean()\n    sns.barplot(x=ethn_df.index, y=ethn_df.values, palette= \"Reds\")\n    plt.xlabel(\"Group\")\n    plt.ylabel(\"mean score\")\n    plt.xticks(rotation= 90)\n    plt.title(list(score.columns[-3:])[idx])\n    \nplt.show()","cecc18d3":"for item in score.columns[-3:]:\n    sns.boxplot(x=score[\"pre_test\"], y=score[item])\n    plt.title(item + \"vs pre test\", loc=\"left\")\n    plt.show()","06934296":"for item in score.columns[-3:]:\n    sns.boxplot(x=score[\"lunch\"], y=score[item])\n    plt.title(item + \"vs Lunch\", loc=\"left\")\n    plt.show()","8bbbcd05":"score.isnull().sum()","49443991":"from sklearn.preprocessing import LabelEncoder\n\n#creating an encoder\nle= LabelEncoder()\n\n#label encoding for pre_test\nscore['pre_test']= le.fit_transform(score['pre_test'])\n\n#label encoding for lunch\nscore['lunch']= le.fit_transform(score['lunch'])\n\n#label encoding for ethnicity\n#we need to map the values to each of the categories\nscore['ethnicity']= score['ethnicity'].replace('group A', 1)\nscore['ethnicity']= score['ethnicity'].replace('group B', 2)\nscore['ethnicity']= score['ethnicity'].replace('group C', 3)\nscore['ethnicity']= score['ethnicity'].replace('group D', 4)\nscore['ethnicity']= score['ethnicity'].replace('group E', 5)\n\n#label encoding for parent education\nscore['parent education']= le.fit_transform(score['parent education'])\n\n#label encoding for gender\nscore['gender']= le.fit_transform(score['gender'])\n\n#we need to map the values to each gender\nscore['gender']= score['gender'].replace('female', 0)\nscore['gender']= score['gender'].replace('male', 1)\n\n#label encoding for maths\nscore['math']= le.fit_transform(score['math'])\n\n#label encoding for reading\nscore['reading']= le.fit_transform(score['reading'])\n\n#label encoding for writing \nscore['writing']= le.fit_transform(score['writing'])","a49bde75":"score['gender']","15654b66":"score.head(5)","91c9924a":"X= score.drop(['pre_test'], axis=1)\ny= score['pre_test']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test= train_test_split(X, y, test_size=0.25, random_state=45)\n\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","16287873":"from sklearn.preprocessing import MinMaxScaler\n\nmm= MinMaxScaler()\n\nX_train= mm.fit_transform(X_train)\nX_test= mm.transform(X_test)","75fb7c60":"from sklearn.linear_model import LogisticRegression\n\nmodel= LogisticRegression()\n\nmodel.fit(X_train, y_train)\n\ny_pred= model.predict(X_test)\n\nprint(\"Training Accuracy:\", model.score(X_train, y_train))\nprint(\"Testing Accuracy:\", model.score(X_test, y_test))","6f960f0e":"from sklearn.metrics import confusion_matrix\n\ncm= confusion_matrix(y_test, y_pred)\n\nplt.rcParams['figure.figsize']= (8,8)\n\nsns.heatmap(cm, annot= True, cmap='Greens')\n\nplt.title('Confusion Matrix for Logistic Regression', fontweight=30, fontsize=20)\n\nplt.show()","4425d872":"from sklearn.ensemble import RandomForestClassifier\n\nmodel= RandomForestClassifier()\n\nmodel.fit(X_train, y_train)\n\ny_pred= model.predict(X_test)\n\nprint(\"Training Accuracy:\", model.score(X_train, y_train))\nprint(\"Testing Accuracy:\", model.score(X_test, y_test))","200a57e7":"from sklearn.metrics import confusion_matrix\n\ncm= confusion_matrix(y_test, y_pred)\n\nplt.rcParams['figure.figsize'] = (8,8)\n\nsns.heatmap(cm, annot= True, cmap ='Reds')\nplt.title(\"Confusion Matrix for RandomForest\", fontweight=30, fontsize=20)\n\nplt.show()","670846bd":"As we can see there is no missing value\/null values in our dataset.","3ea7f155":"**LogisticRegression**","b34355ad":"**Label Encoding**","60dbe74e":"**Introduction:-**\n\nTo know which factor affects student's performance in exam, we are going to excute this data and observe which factor is affecting the student's performance by classifying the score of the stundents to couple of ranks. The independent variable are as follows:-\n\n1. Gender:- Sex of Students\n2. Race\/Ethnicity:- Ethncity of students\n3. Parental level of education:- Parent's final education\n4. Lunch:- Having Lunch(Before or After having Lunch)\n5. Test preparation course:- complete or not complete before test\n\nNow, Let's import some of the various commands and have access to our dataset.","3eb6c984":"As we can Group by E has the best performance among all and Group A has the least.","a2602824":"As we can see that once students have standard lunch, it gets easier to score better.","52d7729b":"Let's read the datset and check first 5 heads.","27a514d2":"spliting into training and testing","229153cd":"The score distribution got narrower if students complete the preparation before test, and also we can figure out from this graph that average of the score is better.","93690422":"Now, we are going to make a classification model. So first we need to find any missing value in our data or null values.","59b842d5":"Let's see the result of score and test preparation","a8ef44d8":"We need to figure out performance of each male and female candidates by using barplot.","7c6868c5":"We infer from the above graph that make candidates has good performance in math as compared to reading and writing. By looking at other two we can say that male candidates performance is not up to the mark.","4146bfe7":"As we can see that there are some column names which is too long, so need to rename the column name to look more concise.","816e7957":"**RandomForest**","24685ee6":"Now, we will galance the performance of ethnicity using the same.","97225b1c":"It looks perfect as we needed, now check the data type."}}