{"cell_type":{"1cc9881e":"code","8a647108":"code","5ea46dbe":"code","8e8cbb9f":"code","fa971f79":"code","ba185bc0":"code","32c89471":"code","f5491dcd":"code","8592b8d7":"code","1ea6ee36":"code","c8aad086":"code","d8aebc89":"code","19585720":"code","c174859b":"code","19f983d8":"code","c83f4353":"code","0a74d63c":"code","b23d039d":"code","463427ad":"code","7779c1f6":"code","8ee4593a":"code","8778a9f3":"code","b8a8158e":"code","97f9b6a8":"code","559d896b":"code","0d669049":"code","24e5bae5":"markdown","3c1a2ea8":"markdown","8490a7b0":"markdown","949f3373":"markdown","e20bdd1b":"markdown","61e4bf1c":"markdown","49ad7afa":"markdown","5dc3b790":"markdown","ff36c5d6":"markdown","f412111c":"markdown","fdc5ee36":"markdown","2fd18a4c":"markdown","a65089bb":"markdown","0e59d8b0":"markdown","aef89f22":"markdown","3d69d8ec":"markdown","830a0779":"markdown","a921cbab":"markdown","bfb5dafe":"markdown","64dd7057":"markdown","5d45a855":"markdown","25dd1439":"markdown","01c1ed55":"markdown","cb17fea1":"markdown","78ccf8ea":"markdown","3c4d4606":"markdown","298dcf9d":"markdown","81846dc5":"markdown","3ca812fe":"markdown","57de9da6":"markdown","25adf64d":"markdown","0caf16e2":"markdown","da8d42dd":"markdown","22fc1c42":"markdown","bf442d17":"markdown","a1c4a4cc":"markdown","2501badb":"markdown","bc82e942":"markdown","603f06ec":"markdown","fd7f360b":"markdown","05e59f1b":"markdown","80bb63ca":"markdown"},"source":{"1cc9881e":"# The Python modules uses in this tutorial are:\n\n# - Pandas\n# - Numpy\n# - Matplotlib\n# - Seaborn\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8a647108":"df = pd.read_csv('..\/input\/loans_train.csv')","5ea46dbe":"# Print first 5 rows of the dataframe\ndf.head(5)","8e8cbb9f":"# Print last 5 rows of the dataframe\ndf.tail(5)","fa971f79":"# Print statistical summary for all numerical attributes\ndf.describe()","ba185bc0":"df['Gender'].value_counts()","32c89471":"df['Gender'].count()","f5491dcd":"# Let's start by plotting a histogram of ApplicantIncome using the command:\n\ndf['ApplicantIncome'].hist(bins=50)\nplt.xlabel('Applicant Income')\nplt.ylabel('Number of Applicants')","8592b8d7":"df.boxplot(column='ApplicantIncome')","1ea6ee36":"# Boxplots of ApplicantIncome, grouped by the categorical attribute Education\ndf.boxplot(column='ApplicantIncome', by='Education')\nplt.title('Boxplot of ApplicantIncome grouped by Education')\nplt.suptitle(\"\") # get rid of the automatic 'Boxplot grouped by group_by_column_name' title","c8aad086":"df['LoanAmount'].hist(bins=50)\nplt.xlabel(\"Loan Amount\")\nplt.ylabel('Number of Applicants')","d8aebc89":"# Boxplot of LoanAmount\ndf.boxplot(column='LoanAmount')","19585720":"df.plot.scatter(x='ApplicantIncome', y='LoanAmount')","c174859b":"sns.regplot(x='ApplicantIncome', y='LoanAmount', data=df)","19f983d8":"sns.boxplot(x=df['LoanAmount'])","c83f4353":"#Violin plot for LoanAmount\n\nsns.violinplot(x=df['LoanAmount'])","0a74d63c":"#Strip plot for LoanAmount\n\nsns.stripplot(x=df['LoanAmount'], jitter=True)","b23d039d":"#Swarm plot for LoanAmount\n\nsns.swarmplot(x=df['LoanAmount'])","463427ad":"sns.violinplot(x='Education', y='ApplicantIncome', data=df)","7779c1f6":"frequency_table = df['Credit_History'].value_counts(ascending=True)\nprint('Frequency Table for Credit History:') \nprint(frequency_table)","8ee4593a":"pivot_table = df.pivot_table(values='Loan_Status',\n                       index=['Credit_History'],\n                       aggfunc=lambda x: x.map({'Y':1, 'N':0}).mean()) ","8778a9f3":"# Print pivot table\nprint(pivot_table)","b8a8158e":"# Plot the frequency table for Credit_History\nfrequency_table.plot(kind='bar')\nplt.xlabel('Credit History')\nplt.ylabel('Number of Applicants')\nplt.title('Applicants by Credit History')","97f9b6a8":"# Plot pivot table\npivot_table.plot(kind='bar')\nplt.xlabel('Credit History')\nplt.ylabel('Probability of Getting a Loan')\nplt.title('Probability of Getting a Loan by Credit History')\nplt.legend().set_visible(False) # we don't need the default legend","559d896b":"stacked_chart = pd.crosstab(df['Credit_History'], df['Loan_Status'])\nstacked_chart.plot(kind='bar', stacked=True, color=['red', 'blue'])\nplt.ylabel('Number of Applicants')","0d669049":"stacked_chart_gender = pd.crosstab([df['Credit_History'], df['Gender']], df['Loan_Status'])\nstacked_chart_gender.plot(kind='bar', stacked=True, color=['red', 'blue'], grid=False)\nplt.ylabel('Number of Applicants')","24e5bae5":"### Numerical Attributes","3c1a2ea8":"# TUTORIAL 2: EXPLORATORY DATA ANALYSIS (EDA)","8490a7b0":"## Basic Observations and Terminology","949f3373":"Again, there are some extreme values. Clearly, both `ApplicantIncome` and `LoanAmount` require some amount of data munging (see Tutorial 3). `LoanAmount` has missing values as well as many extreme values, while `ApplicantIncome` has a few extreme values, which demand deeper understanding. We will take this up in the next lab exercise.","e20bdd1b":"Let's plot `Credit_History` and the probability of getting a loan based on `Credit_History`.","61e4bf1c":"This is an extended version of section 3 of the tutorial at https:\/\/www.analyticsvidhya.com\/blog\/2016\/01\/complete-tutorial-learn-data-science-python-scratch-2\/. I publush it for educational purpuses only.\n\nThis tutorial demonstrates EDA of an example dataset with the Python modules `Pandas`, `Numpy`, `Matplotib` and `Seaborn`.\n\n> *\"At a high level, EDA is the practice of using visual and quantitative methods to understand and summarize a dataset without making any assumptions about its contents. It is a crucial step to take before diving into machine learning or statistical modeling because it provides the context needed to develop an appropriate model for the problem at hand and to correctly interpret its results.\"*\n> <a href=\"https:\/\/www.svds.com\/value-exploratory-data-analysis\/\">Chloe Mawer<\/a> ","49ad7afa":"Now that we are familiar with the basic dataset characteristics, let's look closer at the distribution of some numerical attributes. Let's take, for example, the numerical attributes `ApplicantIncome` and `LoanAmount`.","5dc3b790":"The boxplot above confirms the presence of a lot of outliers\/extreme values. This may be attributed to the income disparity in the society. Part of this can be due to the fact that we are looking at people with different education levels. Let us segregate them by `Education`.","ff36c5d6":"## Importing Modules and Dataset","f412111c":"We can see that there is no substantial difference between the mean income of graduates and non-graduates. But there are a higher number of graduates with very high incomes.","fdc5ee36":"### Categorical Attributes","2fd18a4c":"Once the dataset is loaded into a dataframe, we can have a look at the first and the last few data rows with the dataframe methods `head()` and `tail()`, respectively.","a65089bb":"You can see examples of the full potential of Seaborn's boxplots, violinplots, stripplots and swarmplots starting at https:\/\/seaborn.pydata.org\/generated\/seaborn.boxplot.html.","0e59d8b0":"For the categorical (non-numerical) attributes (e.g. `Property_Area`, `Gender`, `Education`, etc.), we can look at the count of each value\/category (i.e. a frequency table) to understand how well each category is represented in the dataset.\n\n`dfname['column_name']` is a basic indexing technique to acess a particular column of the dataframe.\n\nFor example, for attribute `Gender` the frequency table can be printed by the command:","aef89f22":"As noted above `Credit_History` is rather a categorical attribute with two categories\/values:\n- 0 - the applicant has no credic history\n- 1 - the applicant has a credit history\n\nLet's look at the chances of getting a loan based on credit history. That is, let's examine the relation between atributes `Credit_History` and `Loan_Status`.","3d69d8ec":"Finally, let's redraw the boxplots of `ApplicantIncome`, grouped by the categorical attribute `Education`, as violinplots.","830a0779":"In the histogram above, we observe that there are few extreme values of `ApplicantIncome`. The use of 50 bins allows to depict the distribution clearly. Next, we look at boxplots to understand the distribution better.","a921cbab":"The pivot table can be interprted as follows. The probability for getting a loan is 0.078652 (i.e. ~8%) for applicants with no credit history, and 0.795789 (i.e. ~80%) for applicants with a credit history.","bfb5dafe":"# A. Getting Started","64dd7057":"# B. Distribution Analysis of Numerical Atributes","5d45a855":"We can see that the number of males in the dataset is more than three times larger than the number of females. We can also check the total count of values in column `Gender` with the command:","25dd1439":"After importing the modules, the next step is to load the dataset into a Pandas dataframe.\nDataframe is the term used in Pandas for two-dimensional arrays.\n\nIn this tutorial, we use the example dataset loans_train.csv available as a CSV file.\nThe file loans_train.csv is taken from an Analytics Vidhya competition.","01c1ed55":"Next, build an Excel-style pivot table for `Loan_Status` and `Credit_History` with the pivot_table method:","cb17fea1":"Next, we will use the `Seaborn` module to demonstrate a few variations or alternatives to boxplots. First, let's draw a seaborn-style boxplot for LoanAmount","78ccf8ea":"And then a few alternative plots.","3c4d4606":"# C. Distribution Analysis of Categorical Attributes","298dcf9d":"Alternately, the two plots above can be combined in a stacked chart by plotting the output of Pandas' `crosstab()` function:","81846dc5":"## Loan Amount","3ca812fe":"Based on this scatter plot we can say that LoanAmount probably tends to grow linearly as ApplicantIncome grows. We can see the trend clearer with `Seaborn's regplot`, which draws a line that best fits the relation between two numeric attributes.\n\n> *\"Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\"*https:\/\/seaborn.pydata.org\/\n\n","57de9da6":"This regplot suggests that typically LoanAmount is 100 times lower than ApplicantIncome.","25adf64d":"We can see that the dataset has 614 data rows, and both numerical and categorical atrributes. The data rows are typically called *observations* or *examples*, and the columns are also called *attributes* or *features*. The typical data analysis techniques and machine learning algorithms assume that each attribute is either numerical or categorical.","0caf16e2":"## Relationship between ApplicantIncome and LoanAmount","da8d42dd":"First, let's take a look at the frequency table for attribute `Credit_History`:","22fc1c42":"## ApplicantIncome","bf442d17":"Next, we examine a histogram of the numerical attribute LoanAmount.","a1c4a4cc":"That is, there are 13 missing values in column `Gender`.","2501badb":"There are a few inferences we can draw by looking at the output of `describe()`:\n\n- `LoanAmount` has (614 \u2013 592) 22 missing values.\n- `Loan_Amount_Term` has (614 \u2013 600) 14 missing values.\n- `Credit_History` has (614 \u2013 564) 50 missing values.\n\nNote that `Credit_History` is rather a categorical attribute despite having numerical values. We can see that about 84% of the applicants have a credit history. How? `Credit_History` has value 1 for those who have a credit history, and 0 otherwise. The mean of `Credit_History` is 0.84, i.e. 84% of the applicants have a credit history.\n\nPlease note that we can also get an idea of a possible skew in the data by comparing the mean to the median. The median of each numerical attribute is the 50% figure.","bc82e942":"Furthermore, we can stackchart `Credit_History` and `Gender` against `Loan_Status`.","603f06ec":"## Boxplots, Violinplots, Stripplots and Swarmplots","fd7f360b":"# Final Note\n\nThe next tutorial demonstrates how the EDA techniques demonstrated in this tutorial can be utilised for data preparation before training a predictive model.\n\n[Continue with Tutorial 3: Data Preparation](https:\/\/www.kaggle.com\/nikniko101v\/tutorial-3-data-preparation)","05e59f1b":"Finally, let's examine the relationship between `ApplicantIncome` and `LoanAmount` with a scatter plot.","80bb63ca":"Here the values of `Loan_Status` are grouped by the index `Credit_History`, and the aggfunc is applied to each group. In the example above aggfunc is `mean()`, assuming the Y and N values in column `Loan_Status` are replaced by 1s and 0s, respectively."}}