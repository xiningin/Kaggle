{"cell_type":{"b4034a31":"code","542d7581":"code","d8d687db":"code","cbf3a27c":"code","941782a2":"code","a376dfde":"code","ba7ed6cc":"code","2bc1190a":"code","d8a9b02a":"code","a0e28970":"code","0425b1f1":"code","4b53f091":"code","a0494f0f":"code","26cec3b9":"code","3a5053e6":"code","c7f3c7ca":"code","74042af6":"code","65512b63":"code","23078eb3":"code","3d80c022":"code","974f285f":"code","082ead15":"code","f4127ba3":"code","be411ce1":"code","eb2d7dd0":"code","9d21bc2f":"code","e519c985":"code","f2eab635":"code","b9fdaff4":"code","4354c3c4":"code","25f99ec9":"code","731a95f2":"code","e5141494":"code","10e0ccad":"code","2cb81bde":"code","b9b6f77b":"code","cd6f3f34":"code","51c79bc8":"code","9875a1e6":"code","e2221e42":"code","e36db87b":"code","0ffcf683":"code","9b688732":"code","d77b5fcf":"code","5d101c3e":"code","789d4508":"code","a98106df":"code","802eefa5":"markdown","ac4660e5":"markdown","2b1ab092":"markdown","d0e718a0":"markdown","ade58e0b":"markdown","e4a751cb":"markdown","81059155":"markdown","f7609479":"markdown","300034fd":"markdown","9bc5aec6":"markdown","9f9bc33b":"markdown","cc33ecc5":"markdown","b56d7e4b":"markdown","78eb8f4e":"markdown","60f39e68":"markdown","46f15661":"markdown","426b8778":"markdown","4ac4c814":"markdown","33bdaea2":"markdown","73d52ec4":"markdown","80b5f5d5":"markdown","a38d4437":"markdown","f512dcce":"markdown","a2852f28":"markdown","2f60bddc":"markdown","a384f710":"markdown","aaa92b5b":"markdown","8d9ee93a":"markdown","82104786":"markdown","03016a88":"markdown","aea5942f":"markdown","99f40da9":"markdown","f003827e":"markdown"},"source":{"b4034a31":"# Data manipulation libraries\nimport numpy as np\nimport pandas as pd\nimport missingno as msno\n\n# Visualization libraries\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Avoid Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","542d7581":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","d8d687db":"print(train.shape)\ntrain.head()","cbf3a27c":"print(test.shape)\ntest.head()","941782a2":"train.info()","a376dfde":"test.info()","ba7ed6cc":"msno.matrix(train, color = (.30, .20, .89), figsize=(8,8))\nplt.show()","2bc1190a":"# One more way to visualize using seaborn heatmap\nplt.figure(figsize=(10,10))\nsns.heatmap(train.isnull(), center=1)\nplt.show()","d8a9b02a":"# missing data in train data\nmissing_percentages = (train[train.columns].isnull().sum() \/ train.shape[0]) * 100\nmissing_percentages","a0e28970":"# missing data in test data\nmissing_percentages_test = (test[test.columns].isnull().sum() \/ test.shape[0]) * 100\nmissing_percentages_test","0425b1f1":"# total missing data counts in train and test data\nmissing_values_count = train.isnull().sum()\nmissing_values_count_test = test.isnull().sum()\n\n# find the percentage of missing data in training data\ntotal_cells = np.product(train.shape)\ntotal_missing = missing_values_count.sum()\npercent_missing = (total_missing \/ total_cells)*100\nprint(\"The percentage of total missing data from the training dataset is :\", percent_missing, \"%\")\n\n# find the percentage of missing data in testing data\ntotal_cells_test = np.product(test.shape)\ntotal_missing_test = missing_values_count_test.sum()\npercent_missing_test = (total_missing_test \/ total_cells_test)*100\nprint(\"The percentage of total missing data from the testing dataset is :\", percent_missing_test, \"%\")","4b53f091":"train.describe().transpose()","a0494f0f":"train.head()","26cec3b9":"for i in train.columns:\n    print(\"The number of unique values in {} is {}\".format(i, len(train[i].unique())))","3a5053e6":"categorical_features = [\"Pclass\",\"Sex\",\"Embarked\",\"Parch\",\"SibSp\"]\ncontinuous_features = [\"Age\",\"Fare\"]","c7f3c7ca":"# Checking the count & distribution of Survived\nfig = plt.figure(figsize=(15,8))\nplt.subplot(1,2,1)\nax = sns.countplot(x=\"Survived\",data=train)\nplt.subplot(1,2,2)\nsns.distplot(train.loc[: ,'Survived'], hist_kws={\"color\":\"r\"}, kde_kws={\"color\":\"b\", \"lw\":2})\nplt.show()","74042af6":"print(\"The percentage of people who didn't survive :\",((train['Survived'] == 0).sum() \/ train.shape[0]) * 100)\nprint(\"The percentage of people who did survive :\",((train['Survived'] == 1).sum() \/ train.shape[0]) * 100)","65512b63":"fig = plt.figure(figsize=(15,8))\nplt.subplot(1,2,1)\nax = sns.countplot(x=\"Pclass\",data=train)\nplt.subplot(1,2,2)\nsns.distplot(train.loc[: ,\"Pclass\"], hist_kws={\"color\":\"r\"}, kde_kws={\"color\":\"b\", \"lw\":2})\nplt.show()","23078eb3":"print(\"The percentage of people in class 1 :\",((train['Pclass'] == 1).sum() \/ train.shape[0]) * 100)\nprint(\"The percentage of people in class 2 :\",((train['Pclass'] == 2).sum() \/ train.shape[0]) * 100)\nprint(\"The percentage of people in class 3 :\",((train['Pclass'] == 3).sum() \/ train.shape[0]) * 100)","3d80c022":"fig = plt.figure(figsize=(15,8))\nplt.subplot(1,2,1)\nax = sns.countplot(x=\"Parch\",data=train)\nplt.subplot(1,2,2)\nsns.distplot(train.loc[: ,\"Parch\"], hist_kws={\"color\":\"r\"}, kde_kws={\"color\":\"b\", \"lw\":2})\nplt.show()","974f285f":"fig = plt.figure(figsize=(15,8))\nplt.subplot(1,2,1)\nax = sns.countplot(x=\"SibSp\",data=train)\nplt.subplot(1,2,2)\nsns.distplot(train.loc[: ,\"SibSp\"], hist_kws={\"color\":\"r\"}, kde_kws={\"color\":\"b\", \"lw\":2})\nplt.show()","082ead15":"fig = plt.figure(figsize=(6,6))\nsns.set_palette([\"#8072fa\",\"orange\"])\nax = sns.countplot(x=\"Sex\",data=train)\nplt.show()","f4127ba3":"print(\"The percentage of people who are male :\",((train['Sex'] == \"male\").sum() \/ train.shape[0]) * 100)\nprint(\"The percentage of people who are female :\",((train['Sex'] == \"female\").sum() \/ train.shape[0]) * 100)","be411ce1":"fig = plt.figure(figsize=(6,6))\nsns.set_palette([\"#8072fa\",\"orange\",\"Red\"])\nax = sns.countplot(x=\"Embarked\",data=train)\nplt.show()","eb2d7dd0":"print(\"The percentage of people embarked at S :\",((train['Embarked'] == \"S\").sum() \/ train.shape[0]) * 100)\nprint(\"The percentage of people embarked at C :\",((train['Embarked'] == \"C\").sum() \/ train.shape[0]) * 100)\nprint(\"The percentage of people embarked at Q :\",((train['Embarked'] == \"Q\").sum() \/ train.shape[0]) * 100)","9d21bc2f":"fig = plt.figure(figsize=(8,14))\nfor index,col in enumerate(continuous_features):\n    plt.subplot(4,1,index+1)\n    sns.boxplot(train.loc[:, col], color=\"#8072fa\",linewidth=2.5)\nfig.tight_layout(pad = 2)","e519c985":"fig = plt.figure(figsize=(8,14))\nfor index,col in enumerate(continuous_features):\n    plt.subplot(4,1,index+1)\n    sns.distplot(train.loc[:, col], color=\"orange\", kde_kws={\"color\":\"r\", \"lw\":2})\nfig.tight_layout(pad = 2)","f2eab635":"train.head()","b9fdaff4":"cr = train.corr(method='pearson')\nfig = px.imshow(cr)\nfig.show()","4354c3c4":"fig = px.histogram(data_frame=train,\n                   x=\"Survived\",\n                   y=None,\n                   color='Sex',\n                   width=500,\n                   template=\"plotly_dark\",\n                  color_discrete_map={\"male\":\"#8072fa\",\"female\":\"orange\"})\nfig.show()","25f99ec9":"fig = px.histogram(data_frame=train,\n                   x=\"Embarked\",\n                   y=None,\n                   color='Survived',\n                   width=500,\n                   template=\"plotly_dark\",\n                  color_discrete_map={1:\"#8072fa\",0:\"orange\"})\nfig.show()","731a95f2":"fig = px.histogram(data_frame=train,\n                   x=\"Pclass\",\n                   y=None,\n                   color='Survived',\n                   width=500,\n                   template=\"plotly_dark\",\n                  color_discrete_map={0:\"#8072fa\",1:\"orange\"})\nfig.show()","e5141494":"fig = px.histogram(data_frame=train,\n                   x=\"Parch\",\n                   y=None,\n                   color='Survived',\n                   width=500,\n                   template=\"plotly_dark\",\n                  color_discrete_map={1:\"#8072fa\",0:\"orange\"})\nfig.show()","10e0ccad":"fig = px.histogram(data_frame=train,\n                   x=\"SibSp\",\n                   y=None,\n                   color='Survived',\n                   width=500,\n                   template=\"plotly_dark\",\n                  color_discrete_map={1:\"#8072fa\",0:\"orange\"})\nfig.show()","2cb81bde":"train['Age'].fillna(train['Age'].mean(),inplace=True)\ntest['Age'].fillna(train['Age'].mean(),inplace=True)\n\ntrain['Fare'].fillna(train['Fare'].mean(),inplace=True)\ntest['Fare'].fillna(train['Fare'].mean(),inplace=True)\n\ntrain['Embarked'].fillna(train['Embarked'].mode()[0],inplace=True)\ntest['Embarked'].fillna(train['Embarked'].mode()[0],inplace=True)","b9b6f77b":"train.drop(['Name','Ticket','Cabin','PassengerId'], axis=1, inplace=True)\ntest.drop(['Name','Ticket','Cabin','PassengerId'], axis=1, inplace=True)","cd6f3f34":"train['Fare'] = train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ntest['Fare'] = test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","51c79bc8":"plt.figure(figsize = (8,6))\nsns.distplot(train.loc[:, 'Fare'],color='orange',kde_kws={\"color\":\"r\", \"lw\":2})\nplt.show()","9875a1e6":"train[\"relatives\"] = train[\"Parch\"] + train[\"SibSp\"] + 1\ntest[\"relatives\"] = test[\"Parch\"] + test[\"SibSp\"] + 1","e2221e42":"fig = px.histogram(data_frame=train,\n                   x=\"relatives\",\n                   y=None,\n                   color='Survived',\n                   width=500,\n                   template=\"plotly_dark\",\n                  color_discrete_map={1:\"#8072fa\",0:\"orange\"})\nfig.show()","e36db87b":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.metrics import roc_auc_score, accuracy_score","0ffcf683":"object_cols = ['Sex','Embarked']\nfor col in object_cols:\n    label_encoder = LabelEncoder()\n    label_encoder.fit(train[col])\n    train[col] = label_encoder.transform(train[col])\n    test[col] = label_encoder.transform(test[col])","9b688732":"train.head()","d77b5fcf":"features = ['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked','relatives']\ntarget = train['Survived'].values","5d101c3e":"lr = LogisticRegression()\nlr.fit(train[features], target)\nprint(\"Logistic Regression ROC AUC score:\", roc_auc_score(target, lr.predict_proba(train[features])[:,1]))\nprint('Logistic Regression Accuracy score:', accuracy_score(target, lr.predict(train[features])))","789d4508":"dt = DecisionTreeClassifier(random_state = 42)\ndt.fit(train[features], target)\nprint('Decision Tree ROC AUC score:', roc_auc_score(target, dt.predict_proba(train[features])[:,1]))\nprint('Decision Tree Accuracy score:', accuracy_score(target, dt.predict(train[features])))","a98106df":"sample_submission['Survived'] = lr.predict(test[features])\nsample_submission.to_csv('submission.csv',index=False)\nsample_submission.head()","802eefa5":"<h2 style=\"font-size:35px; background-color:#8072fa; text-align:center; color:#fac472\">Exploratory Data Analysis<\/h2>","ac4660e5":"**Parch**","2b1ab092":"<h2 style=\"font-size:35px; background-color:#8072fa; text-align:center; color:#fac472\">Data Preprocessing<\/h2>","d0e718a0":"It seems that there are missing values in both train and test data.","ade58e0b":"Decision Tree is overfitting the data without tuning. So using Log Reg for final predictions.","e4a751cb":"**Conclusions from the EDA**\n- There are NaNs value in\n    1. Age\n    2. Ticket\n    3. Fare\n    4. Cabin\n    5. Embarked\n- The people who survived and the people who didn't are almost equally distributed in train data.\n- There are a lot of outliers in Fare feature since the distribution curve of Fare is highly right-skewed.\n- The correlation graph doesn't show any significant correlation between features, so no dimensionality reduction can be performed. \n- Parch and SibSp represent the number of parents and siblings respectively. These can be added to form a feature of relatives.","81059155":"### If you like the notebook, consider giving an upvote.\nThese are my other notebooks:\n1. https:\/\/www.kaggle.com\/namanmanchanda\/cat-vs-dog-classifier-10-lines-of-code-fast-ai\n2. https:\/\/www.kaggle.com\/namanmanchanda\/star-wars-classifier\n3. https:\/\/www.kaggle.com\/namanmanchanda\/gradient-descent-101","f7609479":"Most of the people who embarked at Southampton didn't survive. Most of the people who embarked at Cherbourg survived.","300034fd":"> Understanding the features","9bc5aec6":"**Sex**","9f9bc33b":"Adding Parch and SibSp into one feature","cc33ecc5":"The Fare has a lot of outliers.","b56d7e4b":"**The notebook consists of the following:-**\n1. Importing libraries\n2. Understanding Data\n3. Visualising Missing Data\n4. Exploratory Data Analysis\n   - Univariate Analysis\n   - Bivariate Analysis\n7. Data preprocessing\n8. Modeling and Prediction","78eb8f4e":"<h2 style=\"font-size:35px; background-color:#8072fa; text-align:center; color:#fac472\">Modeling<\/h2>","60f39e68":"<h2 style=\"font-size:35px; background-color:#8072fa; text-align:center; color:#fac472\">Understanding Data<\/h2>","46f15661":"Label Encoding the categorical features","426b8778":"<h2 style=\"font-size:35px; background-color:orange; text-align:center; color:blue\">TPS April'21 <\/h2>","4ac4c814":"> Logistic Regression model","33bdaea2":"Applying a log function to reduce the influence of outliers in Fare column. Since there are a large number of outliers, removing them will lead to loss of a large numberof points.","73d52ec4":"<h2 style=\"font-size:35px; background-color:#8072fa; text-align:center; color:#fac472\">Univariate Analysis<\/h2>","80b5f5d5":"Ticket number,Cabin & Name number doesn't seem to influence Survival. ","a38d4437":"*The columns with missing values are*\n- Age\n- Ticket\n- Fare\n- Cabin\n- Embarked","f512dcce":"Clearly, more females survived than males.","a2852f28":"> Handling missing data","2f60bddc":"> Understanding the target variable - Survived","a384f710":"*The categorical features are*\n- Pclass\n- Sex\n- Embarked\n- Parch\n- SibSp\n\n*The continuous features are*\n- Age\n- Fare\n\n*The ones which will be dealt manually are*\n- Ticket\n- Cabin\n- Name","aaa92b5b":"> Decision Tree model","8d9ee93a":"<h2 style=\"font-size:35px; background-color:#8072fa; text-align:center; color:#fac472\">Bivariate Analysis<\/h2>","82104786":"**Pclass**","03016a88":"<h2 style=\"font-size:35px; background-color:#8072fa; text-align:center; color:#fac472\">Importing libraries<\/h2>","aea5942f":"<h2 style=\"font-size:35px; background-color:#8072fa; text-align:center; color:#fac472\">Visualising Missing Data<\/h2>","99f40da9":"**Embarked**","f003827e":"**SibSp**"}}