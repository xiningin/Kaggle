{"cell_type":{"4680ebcf":"code","8098da9f":"code","d298a95d":"code","943c10ba":"code","fdd11173":"code","6b472411":"code","8f9e9382":"code","d64047f7":"code","e18a47e6":"code","68684cff":"code","7d0ac04c":"code","a6beb826":"code","925810ae":"code","429087af":"code","fc91103b":"code","2a9f52b0":"code","c14a8420":"code","626e3112":"code","d09ed2fe":"code","77daab57":"markdown","a5fb2c4d":"markdown","101ee880":"markdown","afd47c60":"markdown","18d63b28":"markdown","20682958":"markdown","a21a5c94":"markdown","c643249d":"markdown","92544459":"markdown","fc91e52b":"markdown","eb074962":"markdown","637bd27d":"markdown","4313ad68":"markdown","7d6ddb98":"markdown","493645d0":"markdown","67e981bb":"markdown","7de63049":"markdown","f146e6b3":"markdown","e14a3247":"markdown"},"source":{"4680ebcf":"import pandas as pd\nimport numpy as np\nimport sklearn\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport seaborn as sns\nplt.style.use('seaborn')","8098da9f":"train = pd.read_csv('\/kaggle\/input\/adult-pmr3508\/train_data.csv', index_col = ['Id'], na_values = '?')","d298a95d":"#transformando os dados da coluna \"income\" de categ\u00f3ricos para bin\u00e1rios -> 1 - >= 50k e 0 - < 50k \ntrain['income'] = LabelEncoder().fit_transform(train['income'])\n\n#checando os dados faltantes\ntrain.isna().sum()","943c10ba":"train.head()","fdd11173":"#Verificando a correla\u00e7\u00e3o entre os dados da base\n\nsns.heatmap(train.corr(), square = True, annot = True, vmin = -0.1, vmax = 1, cmap = 'Blues')\nplt.show()","6b472411":"# Definindo a fun\u00e7\u00e3o para plotar os dados\n\ndef analise (Coluna, variavel = 'Cat', qtd = 1):\n    if (qtd == 1):\n        if (variavel == 'Cat'):\n            sns.barplot(x = Coluna, y = 'income', data = train)\n            plt.xticks(rotation=90)\n            plt.tight_layout()\n            plt.title(\"Barplot - \" + Coluna)\n            plt.show()\n        if (variavel == 'Num'):\n            sns.boxplot(x = 'income', y = Coluna, data = train)\n            plt.title(\"Boxplot - \" + Coluna)\n            plt.show()\n    else:\n        if (variavel == 'Cat'):\n            train.groupby([Coluna, 'income']).size().unstack().plot(kind = 'bar', stacked = True)\n            plt.title(\"Total de ocorr\u00eancias - \"+ Coluna)\n            plt.show()\n        if (variavel == 'Num'):\n            train[Coluna].hist(by = train['income'], sharex = True, sharey = True, bins = 12, stacked = True)\n            plt.show()\n\n#     train.groupby([Coluna, 'income']).size().groupby(level=0).apply(lambda x: 100*x \/ x.sum()).unstack().plot(kind = 'bar', stacked = True)\n#     plt.gca().yaxis.set_major_formatter(mtick.PercentFormatter())\n","8f9e9382":"analise('age', variavel = 'Num')\nanalise('workclass')\nanalise('fnlwgt', variavel = 'Num')\nanalise('education')\nanalise('education.num', variavel = 'Num')\nanalise('marital.status')\nanalise('occupation')\nanalise('relationship')\nanalise('race')\nanalise('sex')\nanalise('capital.gain', variavel = 'Num')\nanalise('capital.loss', variavel = 'Num')\nanalise('hours.per.week', variavel = 'Num')\nanalise('native.country')","d64047f7":"#Avaliando o percentual da base em cada categoria do native.country\nprint(train['native.country'].value_counts()\/train.shape[0]*100)","e18a47e6":"#Checando a moda destas features:\n\nprint('Workclass:', train.mode().iloc[0][1])\nprint('Occupation:', train.mode().iloc[0][6])\nprint('Native.country:', train.mode().iloc[0][13])\n\ntrain['workclass'].value_counts().plot(kind = 'bar', title = 'Contagem de ocorr\u00eancia das categorias da feature Workclass')\nplt.show()\ntrain['occupation'].value_counts().plot(kind = 'bar', title = 'Contagem de ocorr\u00eancia das categorias da feature Occupation')\nplt.show()\ntrain['native.country'].value_counts().plot(kind = 'bar', title = 'Contagem de ocorr\u00eancia das categorias da feature Native.country')\nplt.show()","68684cff":"#tratando os dados faltantes\n\n#substituindo dados faltantes pela moda de cada coluna\n\ntrain['workclass'] = train['workclass'].fillna(train.mode().iloc[0][1], inplace = False)\ntrain['native.country'] = train['native.country'].fillna(train.mode().iloc[0][13], inplace = False)\nprint(train.shape)\n\n#removendo linhas com dados faltantes para a feature Occupation\ntrain = train.dropna()\n\nprint(train.isna().sum())\nprint(train.shape)","7d0ac04c":"#Normalizando as features num\u00e9ricas com dados n\u00e3o muito dispersos\n\ntrain[['age', 'education.num', 'hours.per.week']] = StandardScaler().fit_transform(train[['age', 'education.num', 'hours.per.week']])\n\n#Teste - Normalizando as features num\u00e9ricas com dados muito dispersos\n\n# train[['capital.gain', 'capital.loss']] = RobustScaler().fit_transform(train[['capital.gain', 'capital.loss']])","a6beb826":"train['is.from.USA'] = (train['native.country'] == 'United-States').astype(int)","925810ae":"train = pd.get_dummies(train, columns = ['workclass', 'marital.status', 'occupation', 'relationship', 'race', 'sex'], drop_first = True)\ntrain.head()","429087af":"train = train.drop(['native.country', 'fnlwgt', 'education'], axis = 1)\n\n#Teste para checar se as features capital.gain e capital.loss devem ser incluidas no modelo ou n\u00e3o\n# train = train.drop(['capital.gain', 'capital.loss'], axis = 1)\n\ntrain.head()","fc91103b":"Xtrain = train\nYtrain = train.pop('income')\nprint(Xtrain.head())\nprint(Ytrain.head())","2a9f52b0":"#Testando o modelo para clusteriza\u00e7\u00e3o de 15 a 25 clusters\nn_neighb = list(range(15,25))\n\n#Definindo 10 folds para a cross-validation\nn_folds = 10\n\nscores = {}\n\nfor i in n_neighb:\n    knn = KNeighborsClassifier(n_neighbors = i)\n    #Definindo o score como a m\u00e9dia entre as acur\u00e1cias de cada um dos 10 folds\n    score = cross_val_score(knn, Xtrain, Ytrain, cv = n_folds, scoring = 'accuracy').mean()\n    print(f'N\u00famero de vizinhos k= {i} | Acur\u00e1cia: {score}')\n    scores[i] = score\n    \n#Melhor quantidade de clusters\nMelhor_k = max(scores, key = scores.get)\nprint(f'Melhor n\u00famero de vizinhos k= {Melhor_k} | Acur\u00e1cia: {scores[Melhor_k]}')","c14a8420":"knn = KNeighborsClassifier(n_neighbors = Melhor_k)\nknn.fit(Xtrain, Ytrain)","626e3112":"test = pd.read_csv('\/kaggle\/input\/adult-pmr3508\/test_data.csv', index_col = ['Id'], na_values = '?')\n\ntest['workclass'] = test['workclass'].fillna(train.mode().iloc[0][1], inplace = False)\ntest['native.country'] = test['native.country'].fillna(train.mode().iloc[0][13], inplace = False)\ntest['occupation'] = test['occupation'].fillna(train.mode().iloc[0][6], inplace = False)\n# test = test.dropna()\n\ntest[['age', 'education.num', 'hours.per.week']] = StandardScaler().fit_transform(test[['age', 'education.num', 'hours.per.week']])\n# test[['capital.gain', 'capital.loss']] = RobustScaler().fit_transform(test[['capital.gain', 'capital.loss']])\n\ntest['is.from.USA'] = (test['native.country'] == 'United-States').astype(int)\ntest = pd.get_dummies(test, columns = ['workclass', 'marital.status', 'occupation', 'relationship', 'race', 'sex'], drop_first = True)\n\ntest = test.drop(['native.country', 'fnlwgt', 'education'], axis = 1)\n# test = test.drop(['capital.gain', 'capital.loss'], axis = 1)\n\n\n#Verificou-se que o arquivo test possui um dos valores na feature \n# occupation e dois na feature workclass a mais do que a base de treino,\n# resultando na falta de tr\u00eas das colunas geradas pelo one-hot encoding,\n# por isso, retira-se da df test tr\u00eas colunas:\n# 'workclass_Federal-gov', 'workclass_Never-worked', 'occupation_Adm-clerical'\n\ntest = test.drop(['workclass_Federal-gov','workclass_Never-worked','occupation_Adm-clerical'], axis=1)","d09ed2fe":"Ytest = knn.predict(test)\n\n#Definindo os dados no formato de submiss\u00e3o:\nPredicao = pd.DataFrame(index = test.index)\nPredicao['income'] = Ytest\nPredicao['income'] = Predicao['income'].replace([0,1],['<=50K','>50K'])\nPredicao.head()\n\nPredicao.to_csv('submission.csv')","77daab57":"# 1- Importando bibliotecas","a5fb2c4d":"## Treinando o classificador com os par\u00e2metros definidos","101ee880":"# 3- Explorando os dados","afd47c60":"# 6- Rodando o modelo para a base de teste\n### Repetindo os procedimentos realizados em cima da base de treino para a base de teste:","18d63b28":"Observa-se que h\u00e1 uma correla\u00e7\u00e3o significativa para todas as features exceto a fnlwgt, o que sugere que desconsiderar esta feature no modelo \u00e9 uma possibilidade.\n\nAnalisando os dados:","20682958":"## Preparando a base apenas com as features selecionadas para o modelo\n\nTransformando a coluna de native.country:","a21a5c94":"Removendo as colunas que n\u00e3o ser\u00e3o usadas:","c643249d":"# 4- Tratando dados","92544459":"## Normalizando as distribui\u00e7\u00f5es de features\n\nTestando se o modelo com os dados num\u00e9ricos normalizados possui melhor desempenho:","fc91e52b":"Transformando as features categ\u00f3ricas em num\u00e9ricas:\n\nAqui podemos usar Label Encoding, que seria simplesmente atribuir um n\u00famero (id) para cada categoria da feature, nesse caso, como os n\u00fameros apenas representam a categoria e n\u00e3o possuem rela\u00e7\u00e3o entre si, isso pode prejudicar o modelo.\n\nComo alternativa, pode-se usar one-hot encoding, que consiste na cria\u00e7\u00e3o de uma coluna nova para cada categoria, marcando com bin\u00e1rios caso a categoria seja a que a nova coluna representa.\n\nOptou-se pela aplica\u00e7\u00e3o de one-hot encoding, inclusive na coluna education, que j\u00e1 possuia um label encoding representado pela coluna education.num.","eb074962":"# 2- Carregando os dados de treino","637bd27d":"## Dados Faltantes\n\n### Avalia-se duas possibilidades, excluir linhas com dados faltantes do modelo ou completar os dados faltantes com a moda dos valores de cada feature com dado faltante (Workclass, Occupation e Native.country)","4313ad68":"# 5- Classificador KNN\n\n### Testando os melhores par\u00e2metros para o classificador kNN (n\u00famero de neighbors e n\u00famero de folds para o cross-validation)","7d6ddb98":"Separando a label (dado que ser\u00e1 previsto) das features usadas na predi\u00e7\u00e3o:","493645d0":"Pelos gr\u00e1ficos das vari\u00e1veis num\u00e9ricas, \u00e9 poss\u00edvel observar que pessoas com renda >= 50k possuem em m\u00e9dia:\n- idade maior (~45 vs ~35)\n- hours.per.week maior (~45 vs ~38)\n\nObserva-se que as vari\u00e1veis capital.gain, capital.loss e hours.per.week possuem dados muito distribu\u00eddos, prinicipalmente as duas primeiras, que possuem at\u00e9 o 3\u00ba quartil com o valor 0. \u00c9 v\u00e1lido avaliar se a inclus\u00e3o dessas vari\u00e1veis (capital.gain e capital.loss) \u00e9 v\u00e1lida.\n\nPelos gr\u00e1ficos das vari\u00e1veis categ\u00f3ricas, pode-se observar que as seguintes categorias possuem renda maior:\n- Workclass: Self-emp-inc e federal-gov (~0.55 e ~0.4)\n- Education: Prof-school, Doctorate e Masters (~0.72, ~0.73, ~0.55)\n- Marital.status: Married-civ-spouse e Married-AF-spouse (~0.45 e ~0.42, sendo o segundo com uma incerteza grande)\n- Occupation: Exec-managerial, Prof-specialty, Protective-serv e Tech-support (~0.48, ~0.34, ~0.32 e ~0.3)\n- Relationship: Wife e Husband (~0.47 e ~0.45)\n- Race: White e Asian-Pac-Islander (~0.25 e ~0.26, sendo o segundo com uma incerteza maior)\n- Sex: Male vs Female (~0.3 vs ~0.11)\n- Native.country: Observa-se um grande n\u00edvel de incerteza para essas vari\u00e1veis (exceto para o United-States que possui uma base maior), mas destacam-se os pa\u00edses Iran, France, India, Taiwan e Japan. Esta feature deve ser mais explorada.","67e981bb":"### An\u00e1lise dos dados","7de63049":"### Realizando a predi\u00e7\u00e3o na tabela test:","f146e6b3":"Observa-se que a base \u00e9 composta em 90% por estado-unidenses, ~2% por mexicanos e menos de 1% para cada uma das outras categorias. Assim, v\u00ea-se que o relevante a se extrair dessa feature \u00e9 o fato de a pessoa ser estado-unidense ou n\u00e3o, por isso, essa feature ser\u00e1 substitu\u00edda por uma flag marcando 1 para estado-unidense e 0 para outros.","e14a3247":"Para as features Workclass e Native.country faz sentido realizar a substitui\u00e7\u00e3o pela moda, visto que h\u00e1 uma categoria claramente predominante para essas features. \n\nJ\u00e1 para a feature Occupation, a moda ocorre um n\u00famero de vezes pr\u00f3ximo \u00e0s outras categorias, n\u00e3o distoando muito. Al\u00e9m disso, o n\u00famero de dados faltantes chega a quase metade do n\u00famero de ocorr\u00eancias da moda, de modo que a substitui\u00e7\u00e3o dos dados faltantes causaria um aumento de ~50% nas ocorr\u00eancias da moda, por isso faz mais sentido excluir as linhas com dados faltantes para esta feature."}}