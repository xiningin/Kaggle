{"cell_type":{"8866b392":"code","48cd009b":"code","20714841":"code","aad05093":"code","fd87ac9f":"code","95f3ea5b":"code","9b96efae":"code","c38df7bd":"code","bcafb198":"code","576164d7":"code","01a492d0":"code","d5c8d76d":"code","ae6f0115":"code","4bd3d289":"markdown","84cc17bc":"markdown","7290364e":"markdown","615b0880":"markdown","321f3998":"markdown"},"source":{"8866b392":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport SimpleITK as sitk","48cd009b":"path = '..\/input\/'","20714841":"reader = sitk.ImageSeriesReader() #create image reader object\nfilenamesDICOM = reader.GetGDCMSeriesFileNames(path) #get a series of file address\nreader.SetFileNames(filenamesDICOM) #set all the address in image reader object\nimgOriginal = reader.Execute() # read all the images","aad05093":"# This is the femous help function which helps you to show your image read by sitk.ReadImage object\n# This help function is available everywhere in the internate\ndef sitk_show(img, title=None, margin=0.05, dpi=40 ):\n    nda = sitk.GetArrayFromImage(img)\n    spacing = img.GetSpacing()\n    figsize = (1 + margin) * nda.shape[0] \/ dpi, (1 + margin) * nda.shape[1] \/ dpi\n    extent = (0, nda.shape[1]*spacing[1], nda.shape[0]*spacing[0], 0)\n    fig = plt.figure(figsize=figsize, dpi=dpi)\n    ax = fig.add_axes([margin, margin, 1 - 2*margin, 1 - 2*margin])\n\n    plt.set_cmap(\"gray\")\n    ax.imshow(nda,extent=extent,interpolation=None)","fd87ac9f":"img1 = imgOriginal[:,:,0] # select the first image","95f3ea5b":"#Image smoothing function, to find suitable smooting play with image1,timeStep, numberOfIterations\nimgSmooth = sitk.CurvatureFlow(image1=img1,\n                                    timeStep=0.125,\n                                    numberOfIterations=5)","9b96efae":"sitk_show(img1)","c38df7bd":"sitk_show(imgSmooth)","bcafb198":"imgWhiteMatter = sitk.ConnectedThreshold(image1=imgSmooth, \n                                              seedList=[(170,100)], \n                                              lower=170, \n                                              upper=900,\n                                              replaceValue=1)\nsitk_show(imgWhiteMatter)","576164d7":"imgSmoothInt = sitk.Cast(sitk.RescaleIntensity(imgSmooth), imgWhiteMatter.GetPixelID())\nsitk.GetArrayFromImage(imgSmoothInt) \n# converted all pixel values to imgWhiteMatter pixel value type (Int) and re-scalled\n# Pixel value type is same -> ready to overlay","01a492d0":"overlay_image = sitk.LabelOverlay(imgSmoothInt, imgWhiteMatter)\nsitk.GetArrayFromImage(overlay_image) \n# you can see, one image layer as RGB layer has been added. Look at the array start array([[[","d5c8d76d":"sitk_show(overlay_image)","ae6f0115":"imgWhiteMatterNoHoles = sitk.VotingBinaryHoleFilling(image1=imgWhiteMatter,\n                                                          radius=[2]*3,\n                                                          majorityThreshold=1,\n                                                          backgroundValue=0,\n                                                          foregroundValue=1)\n\nsitk_show(sitk.LabelOverlay(imgSmoothInt, imgWhiteMatterNoHoles))","4bd3d289":"# Hole filling operation\nthis filter operation fill all the intermideate holes by using KNN (voting) algorithm on each pixel of an image\n-- if you are not happy with the result them play with imgWhiteMatter (sitk.ConnectedThreshold class) parameters (lower, upper) make sure you got right seeList","84cc17bc":"# Medical Image Segmentation with python\nRef: https:\/\/pyscience.wordpress.com\/2014\/10\/19\/image-segmentation-with-python-and-simpleitk\/","7290364e":"### White Matter filter -> SimpleITK.ConnectedThreshold\n\nWhat this filter does is simply \u201clabel pixels with a fixed value that are connected to a seed (1stSeeds in example below) and lie within a range of values (lower = 200 and upper = 900)\u201d. Essentially, this filter operates on the input image starting from a series of **given \u2018seed points\u2019.** It then starts \u2018**growing\u2019 a region around those points** and keeps **adding the neighboring points** as long as their values fall within given thresholds. Let\u2019s see how it\u2019s done:\n\nSeed points (seedList) selection is very important: it has to fall in the targeted region, otherwise it won't work","615b0880":"### Image comparison non-smooth vs Smooth image","321f3998":"### sitk.Cast() function\nCasting an image\u2019s pixel type into another is done with the SimpleITK.Cast() function: \nsitk.Cast(sitk.RescaleIntensity(**TargetImage**), **TargetValueType**)\n\n**Main goal:** We want to overlay smooth image and whitematter image. It will produce different collor (by RGB) as we are adding RGB layer\n\nTo run **SimpleITK.LabelOverlayImageFilter** class we need to make sure both image layer has same pixel value type. To do that we need to use sitk.cast function"}}