{"cell_type":{"bcbee9c7":"code","c947e825":"code","6c8a7ed7":"code","1e13fa98":"code","9e86288e":"code","be780332":"code","33b8b468":"code","759da481":"code","6d9e6e55":"code","1184cc38":"code","6dac2d87":"code","fd97e0e8":"code","7751a423":"code","8a3429f3":"code","faaebd74":"code","ad4a92da":"code","a037ad45":"code","6a4f3d6c":"code","7240c268":"code","da9968af":"code","0efa4dbf":"markdown","a8a48810":"markdown","0dfdb107":"markdown","34b33208":"markdown","e5c61956":"markdown"},"source":{"bcbee9c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom mlxtend.frequent_patterns import apriori, association_rules\n\npd.set_option('display.expand_frame_repr', False)\npd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c947e825":"!pip install openpyxl","6c8a7ed7":"df_ = pd.read_excel(\"\/kaggle\/input\/online-retail\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\", engine='openpyxl')","1e13fa98":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n    \ndef check_id(dataframe, stock_code):\n    product_name = dataframe[dataframe[\"StockCode\"] == stock_code][[\"Description\"]].values[0].tolist()\n    print(product_name)","9e86288e":"dataframe = df_.copy()","be780332":"dataframe.info()","33b8b468":"dataframe.head()","759da481":"print(\"##################### Shape #####################\")\nprint(dataframe.shape)\nprint(\"##################### Types #####################\")\nprint(dataframe.dtypes)\nprint(\"##################### NA #####################\")\nprint(dataframe.isnull().sum())\nprint(\"##################### Quantiles #####################\")\nprint(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)","6d9e6e55":"dataframe.dropna(inplace=True)\ndataframe = dataframe[~dataframe[\"Invoice\"].str.contains(\"C\", na=False)]\ndataframe = dataframe[dataframe[\"Quantity\"] > 0]\ndataframe = dataframe[dataframe[\"Price\"] > 0]\nreplace_with_thresholds(dataframe, \"Quantity\")\nreplace_with_thresholds(dataframe, \"Price\")","1184cc38":"print(\"##################### Shape #####################\")\nprint(dataframe.shape)\nprint(\"##################### Types #####################\")\nprint(dataframe.dtypes)\nprint(\"##################### NA #####################\")\nprint(dataframe.isnull().sum())\nprint(\"##################### Quantiles #####################\")\nprint(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)","6dac2d87":" df_ger = dataframe[dataframe['Country'] == \"Germany\"]","fd97e0e8":"print(\"##################### Shape #####################\")\nprint(dataframe.shape)\nprint(\"##################### Types #####################\")\nprint(dataframe.dtypes)\nprint(\"##################### NA #####################\")\nprint(dataframe.isnull().sum())\nprint(\"##################### Quantiles #####################\")\nprint(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)","7751a423":"df_ger_inv_pro_df =  df_ger.groupby(['Invoice', \"StockCode\"])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\ndf_ger_inv_pro_df.head()","8a3429f3":"frequent_itemsets = apriori(df_ger_inv_pro_df, min_support=0.01, use_colnames=True)\nfrequent_itemsets.sort_values(\"support\", ascending=False).head()","faaebd74":"rules = association_rules(frequent_itemsets, metric=\"support\", min_threshold=0.01)\nrules.sort_values(\"support\", ascending=False).head()","ad4a92da":"rules.sort_values(\"lift\", ascending=False).head(500)","a037ad45":"product_id = 21987","6a4f3d6c":"check_id(dataframe, product_id)","7240c268":"sorted_rules = rules.sort_values(\"lift\", ascending=False)\nrecommendation_list = []\nfor i, product in enumerate(sorted_rules[\"antecedents\"]):\n    for j in list(product):\n        if j == product_id:\n            recommendation_list.append(list(sorted_rules.iloc[i][\"consequents\"])[0])\nrecommendation_list[0:2]","da9968af":"for product_id in recommendation_list[0:5]:\n    check_id(dataframe, product_id)","0efa4dbf":"## Creating an Invoice-Product Matrix","a8a48810":"## Creating Association Rules","0dfdb107":"### Let's reduce the dataset for Germany.","34b33208":"## Data Preprocessing","e5c61956":"## Recommend Products to basket-level Users\n\nExample :\n*  User product id: 21987\n"}}