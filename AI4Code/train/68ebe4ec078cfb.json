{"cell_type":{"2d948492":"code","8715b5c3":"code","675d722a":"code","cd68b652":"code","d5f4d2e9":"code","ffe1bd24":"code","4c701111":"code","078d7be7":"code","afe76ab1":"code","9ae08329":"code","7d050ecf":"code","11b72afb":"code","937e613a":"code","5938f557":"code","cf20c03c":"code","8081e7b5":"markdown"},"source":{"2d948492":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8715b5c3":"import time\nimport matplotlib.pyplot as plt\nimport seaborn as sns","675d722a":"l = os.listdir('\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/')\nl\nl = list( filter(lambda x: 'sciPlex2' in x, l ) )\nprint(l)\n'''\n['GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_hashSampleSheet.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_hashTable.out.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n 'GSM4150377_sciPlex2_pData.txt']\n'''\ndirname =  '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/'\nll = list( filter(lambda x: 'gene.annotations' in x, l ) )\nprint(ll)\ngenes = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\ngenes","cd68b652":"!pip install mygene\nimport mygene\nmg = mygene.MyGeneInfo()","d5f4d2e9":"t0 = time.time()\nfor i in range(len(genes)):\n    ens_id = genes[0].iat[i]\n    ens_id = ens_id.split('.')[0]\n    \n    try:\n        g = mg.getgene(ens_id)\n        #print(i,ens_id)\n        #print(g.keys())\n\n        IX = genes.index[i]\n        list1 = ['symbol',   'type_of_gene', 'map_location' ,   'name', 'entrezgene', 'alias', 'other_names'  ] \n        for k in list1:\n            if k in g.keys():\n                genes.loc[IX,k] = str(g[k])\n        if  ('genomic_pos_hg19' in g.keys()) and ( isinstance(g['genomic_pos_hg19'], dict) ):\n            for k in ['chr','start','end', 'strand' ]:\n                if k in g['genomic_pos_hg19'].keys():\n                    genes.loc[IX,k] = (g['genomic_pos_hg19'][k])\n        if 'generif' in g.keys():\n            genes.loc[IX,'count pubmed'] = len(g['generif'])\n        if 'summary' in g.keys():\n            genes.loc[IX,'summary'] = g['summary']\n    except:\n        pass\n    \n    if i%500 == 0:\n        print(i, np.round(time.time() - t0 ,1))\n    if i >= 10e10:\n        break\n        \ngenes['len'] = genes['end'] - genes['start']\ngenes    ","ffe1bd24":"genes.to_csv('genes_58347_sciPlex2_info.csv')","4c701111":"genes.head(10)","078d7be7":"genes['entrezgene'].isnull().sum(), genes['symbol'].isnull().sum(), ","afe76ab1":"genes['count pubmed'].describe()","9ae08329":"genes['len'] = genes['end'] - genes['start']\ngenes['len'].describe()","7d050ecf":"genes['chr'].value_counts()","11b72afb":"genes['strand'].isnull().sum()","937e613a":"genes['strand'].value_counts() ","5938f557":"genes['type_of_gene'].isnull().sum()","cf20c03c":"genes['type_of_gene'].value_counts() ","8081e7b5":"# What is about ?\n\nHere we take human genes measured in sciPlex2  (58347 genes) and add various information on them based on MyGene package.\n\nResultitng file is saved to csv \n"}}