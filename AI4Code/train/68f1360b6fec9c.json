{"cell_type":{"870da7dd":"code","935a160b":"code","3c6fb596":"code","ba2a9ca5":"code","d37e1b0a":"code","eab55a71":"code","81963172":"code","bb0f302b":"code","ea04e8a4":"code","e34a4c41":"code","4ed0150b":"code","22b401b4":"code","82bd4840":"code","7a684514":"code","5356cf31":"code","41f7d724":"code","64e61eb6":"code","74356cf4":"code","316f1959":"code","4181ac61":"code","bceef06e":"code","a4b6951d":"code","a1dbbcab":"code","071c64a1":"code","305d1435":"code","20bd108f":"code","979b258c":"code","beb479b7":"code","0bd2a437":"code","c6423a1c":"code","7adfedca":"code","060d1cae":"code","9b9bd546":"code","aa0d9e8a":"code","49c248bf":"code","ace00a75":"code","b56afa99":"code","3e23118c":"code","4215ebf6":"code","8035967b":"markdown","a83573fb":"markdown","9bb50d11":"markdown"},"source":{"870da7dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv\npd.options.display.max_columns = None\npd.options.display.max_rows = None\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","935a160b":"import seaborn as sns\nfrom matplotlib import *\nfrom matplotlib import pyplot as plt\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.metrics import accuracy_score\nfrom lightgbm import LGBMClassifier","3c6fb596":"train_data = pd.read_csv('\/kaggle\/input\/av-janatahack-machine-learning-in-agriculture\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/av-janatahack-machine-learning-in-agriculture\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/av-janatahack-machine-learning-in-agriculture\/sample_submission.csv')\ntrain_data.columns = train_data.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\ntest_data.columns = test_data.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')","ba2a9ca5":"print('Train Data Shape: ', train_data.shape)\nprint('Test Data Shape: ', test_data.shape)\ntrain_data.head()","d37e1b0a":"train_data.dtypes","eab55a71":"train_data.isnull().sum()","81963172":"train_data.nunique()","bb0f302b":"print('Season volume:\\n', train_data.season.value_counts())\nprint('Crop volume:\\n', train_data.crop_type.value_counts())\nprint('Soil volume:\\n', train_data.soil_type.value_counts())\nprint('Pesticide volume:\\n', train_data.pesticide_use_category.value_counts())\nprint('Soil wise crop damage volume:\\n', train_data.groupby('soil_type')['crop_damage'].value_counts())\nprint('Crop wise crop damage volume:\\n', train_data.groupby('crop_type')['crop_damage'].value_counts())\nprint('Season wise crop damage volume:\\n', train_data.groupby('season')['crop_damage'].value_counts())","ea04e8a4":"plt.figure(figsize = (10, 8))\nsns.scatterplot(x = 'number_doses_week', y = 'estimated_insects_count', hue = 'season', data = train_data)\nplt.show()","e34a4c41":"sns.catplot(x = 'pesticide_use_category', y = 'number_weeks_used', data = train_data, hue = 'crop_damage')\nsns.despine()","4ed0150b":"sns.catplot(x = 'crop_type', y = 'estimated_insects_count', data = train_data, hue = 'crop_damage')\nsns.despine()","22b401b4":"sns.catplot(x = 'crop_type', y = 'number_doses_week', kind = 'violin', data = train_data, hue = 'crop_damage')\nsns.despine()","82bd4840":"ax = sns.violinplot(x = 'soil_type', y = 'number_doses_week', hue = 'pesticide_use_category', data = train_data)","7a684514":"ax = sns.violinplot(x = 'crop_type', y = 'number_doses_week', hue = 'pesticide_use_category', data = train_data)","5356cf31":"ax = sns.violinplot(x = 'season', y = 'number_doses_week', hue = 'pesticide_use_category', data = train_data)","41f7d724":"sns.catplot(x = 'crop_damage', y = 'number_weeks_used', data = train_data, hue = 'season')\nsns.despine()","64e61eb6":"sns.catplot(x = \"soil_type\", y = 'estimated_insects_count', kind = 'box', data = train_data)\nsns.despine()","74356cf4":"sns.catplot(x = \"crop_type\", y = 'estimated_insects_count', kind = 'box', data = train_data)\nsns.despine()","316f1959":"sns.pairplot(train_data[['estimated_insects_count', 'number_doses_week', 'crop_damage', 'number_weeks_used', 'number_weeks_quit']], hue = 'crop_damage')\nsns.despine()","4181ac61":"plt.figure(figsize = (16, 5))\nfor i in range(1, 5):\n    cols = ['estimated_insects_count', 'number_doses_week', 'number_weeks_used', 'number_weeks_quit']\n    col = cols[i-1]\n    ax = plt.subplot(1, 4, i)\n    plt.boxplot(train_data.loc[~(train_data[col].isnull()), col], patch_artist = True, widths = 0.6)\n    ax.set_title(col)","bceef06e":"train_data['id'] = train_data['id'].apply(lambda x: x.split('F')[1])\ntest_data['id'] = test_data['id'].apply(lambda x: x.split('F')[1])\ntrain_data.loc[(train_data['pesticide_use_category'] == 1), 'number_weeks_used'] = 0","a4b6951d":"testData = test_data.copy()\ntestData['crop_damage'] = -1\ntrain_data['flag'] = 'train'\ntest_data['flag'] = 'test'\n#master_data = train_data[train_data.columns[~train_data.columns.isin(['crop_damage'])]].append(test_data[train_data.columns[~train_data.columns.isin(['crop_damage'])]])\nmaster_data = train_data.append(testData)\nmaster_data = master_data.sort_values(by = ['id'], ascending = (True))\nmaster_data = master_data.reset_index(drop = True)","a1dbbcab":"master_data['soil_type_damage'] = master_data.sort_values(['id']).groupby(['soil_type'])['crop_damage'].apply(lambda x: x.shift().rolling(5, min_periods=1).mean()).fillna(-999).values\nmaster_data['estimated_insects_count_damage'] = master_data.sort_values(['id']).groupby(['estimated_insects_count'])['crop_damage'].apply(lambda x: x.shift().rolling(5, min_periods=1).mean()).fillna(-999).values\nmaster_data['crop_type_damage'] = master_data.sort_values(['id']).groupby(['crop_type'])['crop_damage'].apply(lambda x: x.shift().rolling(5, min_periods=1).mean()).fillna(-999).values\nmaster_data['pesticide_use_category_damage'] = master_data.sort_values(['id']).groupby(['pesticide_use_category'])['crop_damage'].apply(lambda x: x.shift().rolling(5, min_periods=1).mean()).fillna(-999).values\nmaster_data['season_damage'] = master_data.sort_values(['id']).groupby(['season'])['crop_damage'].apply(lambda x: x.shift().rolling(5, min_periods=1).mean()).fillna(-999).values\nmaster_data['soil_type_damage_lag2'] = master_data.sort_values(['id']).groupby(['soil_type'])['crop_damage'].apply(lambda x: x.shift(periods=2).rolling(5, min_periods=1).mean()).fillna(-999).values\nmaster_data['estimated_insects_count_damage_lag2'] = master_data.sort_values(['id']).groupby(['estimated_insects_count'])['crop_damage'].apply(lambda x: x.shift(periods=2).rolling(5, min_periods=1).mean()).fillna(-999).values\nmaster_data['crop_type_damage_lag2'] = master_data.sort_values(['id']).groupby(['crop_type'])['crop_damage'].apply(lambda x: x.shift(periods=2).rolling(5, min_periods=1).mean()).fillna(-999).values\nmaster_data['pesticide_use_category_damage_lag2'] = master_data.sort_values(['id']).groupby(['pesticide_use_category'])['crop_damage'].apply(lambda x: x.shift(periods=2).rolling(5, min_periods=1).mean()).fillna(-999).values\nmaster_data['season_damage_lag2'] = master_data.sort_values(['id']).groupby(['season'])['crop_damage'].apply(lambda x: x.shift(periods=2).rolling(5, min_periods=1).mean()).fillna(-999).values\n","071c64a1":"master_data['crop_damage_lag1'] = master_data['crop_damage'].shift(fill_value=-999)\nmaster_data['estimated_insects_count_lag1'] = master_data['estimated_insects_count'].shift(fill_value=-999)\nmaster_data['crop_type_lag1'] = master_data['crop_type'].shift(fill_value=-999)\nmaster_data['soil_type_lag1'] = master_data['soil_type'].shift(fill_value=-999)\nmaster_data['pesticide_use_category_lag1'] = master_data['pesticide_use_category'].shift(fill_value=-999)\nmaster_data['number_doses_week_lag1'] = master_data['number_doses_week'].shift(fill_value=-999)\nmaster_data['number_weeks_used_lag1'] = master_data['number_weeks_used'].shift(fill_value=-999)\nmaster_data['number_weeks_quit_lag1'] = master_data['number_weeks_quit'].shift(fill_value=-999)\nmaster_data['season_lag1'] = master_data['season'].shift(fill_value=-999)\n\nmaster_data['crop_damage_lag2'] = master_data['crop_damage'].shift(periods=2,fill_value=-999)\nmaster_data['estimated_insects_count_lag2'] = master_data['estimated_insects_count'].shift(periods=2,fill_value=-999)\nmaster_data['crop_type_lag2'] = master_data['crop_type'].shift(fill_value=-999)\nmaster_data['soil_type_lag2'] = master_data['soil_type'].shift(fill_value=-999)\nmaster_data['pesticide_use_category_lag2'] = master_data['pesticide_use_category'].shift(periods=2,fill_value=-999)\nmaster_data['number_doses_week_lag2'] = master_data['number_doses_week'].shift(periods=2,fill_value=-999)\nmaster_data['number_weeks_used_lag2'] = master_data['number_weeks_used'].shift(periods=2,fill_value=-999)\nmaster_data['number_weeks_quit_lag2'] = master_data['number_weeks_quit'].shift(periods=2,fill_value=-999)\nmaster_data['season_lag2'] = master_data['season'].shift(periods=2,fill_value=-999)","305d1435":"train_data, test_data = master_data[master_data.flag == 'train'], master_data[master_data.flag == 'test']","20bd108f":"impute = -999","979b258c":"train_data = train_data.drop(['flag'], axis = 1)\ntest_data = test_data.drop(['flag'], axis = 1)\ntest_data = test_data.drop(['crop_damage'], axis = 1)","beb479b7":"print(train_data.shape, test_data.shape)","0bd2a437":"train_data.head()","c6423a1c":"train_data['number_weeks_used'] = train_data['number_weeks_used'].apply(lambda x: impute if pd.isna(x) else x)\ntest_data['number_weeks_used'] = test_data['number_weeks_used'].apply(lambda x: impute if pd.isna(x) else x)\n\ntrain_data['number_weeks_used_lag1'] = train_data['number_weeks_used_lag1'].apply(lambda x: impute if pd.isna(x) else x)\ntest_data['number_weeks_used_lag1'] = test_data['number_weeks_used_lag1'].apply(lambda x: impute if pd.isna(x) else x)\n\ntrain_data['number_weeks_used_lag2'] = train_data['number_weeks_used_lag2'].apply(lambda x: impute if pd.isna(x) else x)\ntest_data['number_weeks_used_lag2'] = test_data['number_weeks_used_lag2'].apply(lambda x: impute if pd.isna(x) else x)","7adfedca":"X_train, X_test = train_test_split(train_data, test_size = 0.40, random_state = 22, shuffle = True, stratify = train_data['crop_damage'])","060d1cae":"cat_cols = ['crop_type', 'soil_type', 'pesticide_use_category', 'season', 'crop_type_lag1', 'soil_type_lag1', 'pesticide_use_category_lag1', 'season_lag1']\nfeature_cols = train_data.columns.tolist()\nfeature_cols.remove('id')\nfeature_cols.remove('crop_damage')","9b9bd546":"params = {}\nparams['learning_rate'] = 0.04\nparams['max_depth'] = 18\nparams['n_estimators'] = 3000\nparams['objective'] = 'multiclass'\nparams['boosting_type'] = 'gbdt'\nparams['subsample'] = 0.7\nparams['random_state'] = 42\nparams['colsample_bytree']=0.7\nparams['min_data_in_leaf'] = 55\nparams['reg_alpha'] = 1.7\nparams['reg_lambda'] = 1.11\nparams['class_weight']: {0: 0.44, 1: 0.4, 2: 0.37}","aa0d9e8a":"clf = LGBMClassifier(**params)\n    \nclf.fit(X_train[feature_cols], X_train['crop_damage'], early_stopping_rounds = 100, \n        eval_set = [(X_train[feature_cols], X_train['crop_damage']), (X_test[feature_cols], X_test['crop_damage'])],\n        eval_metric='multi_error', verbose = True, categorical_feature = cat_cols)\n\neval_score = accuracy_score(X_test['crop_damage'], clf.predict(X_test[feature_cols]))","49c248bf":"print('Eval ACC: {}'.format(eval_score))","ace00a75":"train_data = pd.concat((X_train, X_test))","b56afa99":"clf = LGBMClassifier(**params)\n\nclf.fit(X_train[feature_cols], X_train['crop_damage'], eval_metric = 'multi_error', verbose = False, categorical_feature = cat_cols)\n\n# eval_score_auc = roc_auc_score(df_train[label_col], clf.predict(df_train[feature_cols]))\neval_score_acc = accuracy_score(X_train['crop_damage'], clf.predict(X_train[feature_cols]))\n\nprint('ACC: {}'.format(eval_score_acc))","3e23118c":"Ypreds = clf.predict(test_data[feature_cols])","4215ebf6":"submission = pd.DataFrame({'ID': test_data['id'], 'Crop_Damage': Ypreds})\nsubmission.to_csv('agriculture.csv', index = False)","8035967b":"### Converting IDs to numbers and reordering according to observation sequence","a83573fb":"There is more damage to crops getting less than 50 dosages per week ","9bb50d11":"## Handling missing values"}}