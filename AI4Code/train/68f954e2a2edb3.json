{"cell_type":{"e52e4d39":"code","c409e3ac":"code","9ccb6833":"code","647b0fc4":"code","4c553b98":"code","997ba412":"code","076bdcac":"code","1d91c13f":"code","e3c88b5f":"code","8cbb9d1d":"code","864eeb6e":"code","0e93f6ba":"code","24480afa":"code","dc1ed68c":"code","a79ef046":"code","55fd100c":"code","88673438":"code","42a2c275":"code","821b69a8":"code","451222a7":"code","90c4b9e8":"code","318c74c0":"code","4707c608":"code","09e1e1b1":"code","6f485ac3":"code","086da2f7":"code","12460b7b":"code","3f69a44a":"code","98feacfa":"code","6d4bb21c":"code","e6dbd04a":"code","f4273ea5":"code","35540913":"code","1d6f357d":"code","03ca4d59":"code","749fe58e":"code","ff362fd2":"code","61fbd7e4":"code","58e5a8fd":"code","e251639d":"code","201befcb":"code","8be30dc7":"code","c9db3015":"markdown","00e69227":"markdown","fb7aeb89":"markdown","9d8ad4e0":"markdown","72611e00":"markdown","6a361525":"markdown","ca6af2d5":"markdown","69f706f9":"markdown","53ff8e9e":"markdown","c9a40459":"markdown","1565c3a0":"markdown","8f7db7d1":"markdown","e903ab0f":"markdown","ba39c708":"markdown","b6502df7":"markdown","82d3f924":"markdown","9d33aa77":"markdown","aee408e8":"markdown","76ae1f4f":"markdown","1a880ad5":"markdown","b23b9442":"markdown","8b61604e":"markdown","e934af67":"markdown","822b43e8":"markdown","3320b998":"markdown","49e38873":"markdown","fc86c3e7":"markdown","ad33a379":"markdown","935c89ed":"markdown","63bf8fe9":"markdown","25eab0ea":"markdown","a6ed5e1e":"markdown","a8b364ff":"markdown","3cb2613a":"markdown","f2a5f114":"markdown","e3d53dee":"markdown","683efc93":"markdown","b46ec51e":"markdown"},"source":{"e52e4d39":"# importing the neccessary packages\nimport pandas as pd\nimport statistics\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# the first column can be used as index of the dataframe\nfifa18 = pd.read_csv(\"..\/input\/CompleteDataset.csv\", index_col=0)","c409e3ac":"# all columns\nprint(fifa18.columns)\n# Take a look at the data\nfifa18.head()","9ccb6833":"print(\"mixed types: \\n\", fifa18.columns[23:35])\nprint(\"unique values, column 23\\n\\n\", fifa18.iloc[:,23].unique())\nprint(\"unique values, column 23\\n\\n\", fifa18.iloc[:,30].unique())\nprint(\"unique values, column 66\\n\\n\", fifa18.iloc[:,66].unique())","647b0fc4":"# #This operation took more than 10 minutes\n\n# for i, v in enumerate(fifa18['Value']):\n#     if('M' in v):\n#         # 1:-1 is slicing string from one to size - 1\n#         # you know that slicing doesn't include the last element\n#         fifa18['Value'][i] = float(fifa18['Value'][i][1:-1]) * 1e6\n#     elif('K' in v):\n#         fifa18['Value'][i] = float(fifa18['Value'][i][1:-1]) * 1e3\n#     else:\n#         fifa18['Value'][i] = float(fifa18['Value'][i][1:])\n# df.to_csv(\"fifa18_mod1.csv\")\n# for i, w in enumerate(df['Wage']):\n#     if('K' in w):\n#         df['Wage'][i] = float(df['Wage'][i][1:-1]) * 1e3\n#     elif('\u20ac0' in w):\n#         df['Wage'][i] = float(df['Wage'][i][1:])     \n# df.to_csv(\"fifa18_mod1.csv\")\n# So I am using apply instead","4c553b98":"def fix(x):\n    # evaluate sum\n    if('+' in str(x).strip()):\n        calc = x.split('+')\n        return int(calc[0]) + int(calc[1])\n    # evaluate subtraction\n    elif('-' in str(x).strip()):\n        calc = x.split('-')\n        return int(calc[0]) + int(calc[1])\n    # convert to integer if string contains a valid number\n    elif str(x).strip().isdigit():\n        return int(x)\n    # return as it is, for example null values\n    else:\n         return x\nfor column in fifa18.iloc[:,11:74]:\n    fifa18[column] = fifa18[column].apply(fix)\n# save the modfied dataframe\nfifa18.to_csv(\"fifamod3.csv\")","997ba412":"fifa18.head(5)","076bdcac":"print(\"mixed types: \\n\", fifa18.columns[23:35])\nprint(\"unique values, column 23\\n\\n\", fifa18.iloc[:,23].unique())\nprint(\"unique values, column 23\\n\\n\", fifa18.iloc[:,30].unique())\nprint(\"unique values, column 66\\n\\n\", fifa18.iloc[:,66].unique())","1d91c13f":"print(\"Number of nulls in RWB column: \", fifa18[\"RWB\"].isna().sum())\nprint(\"Number of nulls in RWB column: \", fifa18[\"RWB\"].isnull().sum())","e3c88b5f":"# positional attribute\nprint(\"type of personal attribute: \", fifa18['Name'].dtype)\nprint(\"type of performance attribute: \", fifa18['Agility'].dtype)\nprint(\"type of positional attribute: \", fifa18['LS'].dtype)\nprint(\"type of prefered position attribute: \", fifa18['Preferred Positions'].dtype)","8cbb9d1d":"# silenting warnings\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\npd.options.mode.chained_assignment = None  # default='warn'","864eeb6e":"def convert(v):\n        if('M' in str(v)):\n            return float(v[1:-1]) * 1e6\n        elif('K' in str(v)):\n            return float(v[1:-1]) * 1e3  \n        elif('\u20ac0' in str(v)):\n            return float(v[1:])\n        else:\n            return v\n\nfifa18['Value'] = fifa18['Value'].apply(convert)\nfifa18['Wage'] = fifa18['Wage'].apply(convert)\nfifa18.to_csv(\"fifamod3.csv\")","0e93f6ba":"print(\"type of Value: \", fifa18['Value'].dtype)\nprint(\"type of Wage: \", fifa18['Wage'].dtype)","24480afa":"all_perfo_attribs = np.concatenate([np.arange(5,7), np.arange(11,46)])\nprint(all_perfo_attribs)","dc1ed68c":"ten_perfo_attribs = np.random.choice(all_perfo_attribs, 10)\nprint(\"randomly selected: \", ten_perfo_attribs)\nfifa18.iloc[:, ten_perfo_attribs].describe()","a79ef046":"# Making sure the data is consistent on Club, Value and Wage columns\nwage_0 = fifa18[(fifa18['Wage'] == 0)]\nvalue_0 = fifa18[(fifa18['Value'] == 0)]\nfifa18_has_clubs = fifa18.dropna(subset = ['Club'])\nconsistent = fifa18[(fifa18['Wage'] == 0) & (fifa18['Value'] == 0)]\n\nprint(\"Players with no Clubs: \", len(fifa18) - len(fifa18_has_clubs))\nprint(\"Players with no Clubs:\", len(consistent))","55fd100c":"fifa18[(fifa18['Wage'] == 0) & (fifa18['Value'] == 0)]['Name'].count()","88673438":"fig, (ax1,ax2) = plt.subplots(1,2, figsize=(12,4), sharey=True) \nwages = fifa18['Wage']\nsns.distplot(fifa18['Wage'], kde=True, rug=False, ax=ax1);\nsns.distplot(wages[wages < 100000], kde=True, rug=False, ax=ax2);","42a2c275":"length = len(fifa18)\nwages = fifa18['Wage']\nhighest_payed = wages.sort_values(ascending=False)[0:5].index\n# lowest payed players ignoring 0\nlowest_payed = (wages[wages != 0]).sort_values(ascending=True)[0:5].index\nprint(\"highest paid\\n\" ,fifa18[['Name','Wage']].loc[highest_payed])\nprint(\"lowest paid\\n\" ,fifa18[['Name','Wage']].loc[lowest_payed])\n","821b69a8":"# group the data by football club\ndata_group_by_club = fifa18.groupby('Club')\n# find the mean of each attribute and select the Overall column\nclubs_average_overall = data_group_by_club.mean()['Overall']\n# sort the average overall in descending order and slice the top 5\ntop_clubs_top_5 = clubs_average_overall.sort_values(ascending = False)[:5]\n# filter the big dataframe to include only players from top clubs\nfifa18_top_5 = fifa18.loc[fifa18['Club'].isin(top_clubs_top_5.index)]\n# create seaborn FacetGrid object, it will contain cell per club\ng = sns.FacetGrid(fifa18_top_5, col='Club')\n# In each column plot the age distrubtion of a club\ng.map(sns.distplot, \"Age\")\nplt.show()","451222a7":"g = sns.FacetGrid(fifa18_top_5, col='Club')\ng.map(sns.boxplot, \"Age\", order='')\nplt.show()","90c4b9e8":"# Categorize ages into two\nfifa18_top_5['Age_Cat'] = fifa18_top_5['Age'].apply(lambda x: \"Above 30\" if x >= 30 else \"Below 30\")\ng = sns.FacetGrid(fifa18_top_5, col = 'Club', row='Age_Cat', height=4, margin_titles=True)\n#plt.subplots_adjust(top=0.6)\n#g.fig.suptitle('Players Stamina') \ng.map(sns.distplot, \"Stamina\")\nplt.show()","318c74c0":"print(fifa18.columns[46:])\nprint(len(fifa18.columns[46:]) - 2)","4707c608":"forward = ['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW']\n# All the midfield positions end with an M\nmidfield = ['LAM', 'CAM', 'RAM', 'LM', 'LCM', 'RCM','CM', 'RM', 'LDM', 'CDM', 'RDM']\ndefense = ['LB', 'LWB', 'LCB', 'CB', 'RCB', 'RB', 'RWB']\n\nassert(len(forward) + len(midfield) + len(defense) == 26)","09e1e1b1":"# if all are true\nd = True\nm = True\nf = True\noutput = int(\"\".join([str(int(d)), str(int(m)), str(int(f))]), 2)\nprint(\"player likes to play in all positions: \", output)\nd = True\nm = True\nf = False\noutput = int(\"\".join([str(int(d)), str(int(m)), str(int(f))]), 2)\nprint(\"player likes to play in defense and midfield: \", output)","6f485ac3":"def check(p):\n    pos = p.split()\n    # does it contain defender position\n    d = any(i.strip() in defense for i in pos) \n    # does it contain midfield position\n    m = any(i.strip() in midfield for i in pos)   \n    # does it contain forward position\n    f = any(i.strip() in forward for i in pos)  \n    \n    # The outer int is used to represent a binary number\n    # and convert to decimal\n    return int(\"\".join([str(int(d)), str(int(m)), str(int(f))]), 2)\n\nfifa18[\"Pref_Pos_Encoded\"] = fifa18['Preferred Positions'].apply(check)","086da2f7":"# Test the check function\ntwo_columns = fifa18[['Preferred Positions','Pref_Pos_Encoded']]\n# select a random starting point in the data\nstart = np.random.randint(len(fifa18) - 3)\nprint(two_columns[start: start+5])","12460b7b":"sns.set(style=\"whitegrid\")\nax = sns.countplot(x=\"Pref_Pos_Encoded\", data=fifa18)\nplt.xticks(np.arange(8), ('GK', 'Forward', 'Midfiled', 'M & F', 'Defender','D & F','D & M','D, M, F'))\nax.set_title(\"Players Preferred Position\")\nplt.xlabel('')\nplt.show()","3f69a44a":"print(\"D & F: \", len(two_columns[two_columns['Pref_Pos_Encoded'] == 5]))\nprint(\"D, M & F: \", len(two_columns[two_columns['Pref_Pos_Encoded'] == 7]))","98feacfa":"rare_players = fifa18[(fifa18['Pref_Pos_Encoded'] == 5) | (fifa18['Pref_Pos_Encoded'] == 7)]\nindices = fifa18[fifa18['Pref_Pos_Encoded'] == 7]['Overall'].sort_values(ascending = False)\nfifa18.loc[indices].drop_duplicates().head(3)","6d4bb21c":"fifa18.columns","e6dbd04a":"# Column indices of performance attributes\nall_perfo_attribs","f4273ea5":"# create a dataframe containing only player performance attributes(columns)\nfifa18_performance = fifa18.iloc[:,all_perfo_attribs]","35540913":"fifa18_performance.columns","1d6f357d":"corr = fifa18_performance.corr()","03ca4d59":"#Three steps needed to have resized diagram\nfig, ax = plt.subplots(figsize=(10,8)) \nsns.heatmap(corr, linewidths=.5, ax=ax)\nax.set_title(\"Correlation Between Performance Attributes\")","749fe58e":"ball_control = corr[['Ball control']].sort_values(ascending = False, by = \"Ball control\")\ntop_correlated = ball_control.head(5)\nprint(\"Highest Positive Correlation to Ball Control\\n\", top_correlated)\nfig, (ax1,ax2,ax3) = plt.subplots(1,3, figsize=(16,8)) \n\nax1.set_title(\"Ball Control vs. Dribbling\")\nax2.set_title(\"Agility vs. Strength\")\nax3.set_title(\"Balance vs. Strength\")\n\nsns.regplot(x=\"Ball control\", y=\"Dribbling\", ax = ax1, data=fifa18, color='b')\nsns.regplot(x=\"Agility\", y=\"Strength\", ax = ax2, data=fifa18, color=\"g\")\nsns.regplot(x=\"Balance\", y=\"Strength\", ax = ax3, data=fifa18, color=\"y\")","ff362fd2":"fifa18.loc[(fifa18[\"Strength\"] > 80) & (fifa18[\"Balance\"] > 80)]","61fbd7e4":"fifa18_filtered = fifa18.loc[fifa18['Pref_Pos_Encoded'].isin([4,2,1])]\n# convert the numerical encoding into representative text\nfifa18_filtered['Pref_Pos_String'] = fifa18_filtered['Pref_Pos_Encoded'].apply(lambda x: \"Defense\" if x == 4 else (\"Midfield\" if x == 2 else \"Attack\"))\n# create 3 by 3 grid of axes\nfig, axes= plt.subplots(3,3, figsize=(16,8),sharey = True) \n# find preformance columns\np_columns = fifa18_performance.columns\n# select 9 attributes\nunder_study = list(p_columns[3:12])\n# flatten the axis list\naxes_list = axes.ravel()\nfor i, ax in enumerate(axes_list):\n    ax.xaxis.label.set_visible(False)\n    ax.grid = False\n    sns.barplot(x=\"Pref_Pos_String\", y=under_study[i], data=fifa18_filtered, ax = ax)","58e5a8fd":"grouped_mean = fifa18_filtered.iloc[:, np.append(all_perfo_attribs,75)].groupby(\"Pref_Pos_String\").mean()\ngrouped_mean","e251639d":"grouped_mean.loc[\"Attack\"][5:].sort_values(ascending = False).head(5)","201befcb":"grouped_mean.loc[\"Midfield\"][3:].sort_values(ascending = False).head(5)","8be30dc7":"grouped_mean.loc[\"Defense\"][3:].sort_values(ascending = False).head(5)","c9db3015":"See the diagonal cells across, it shows the correlation of same variables is one(maximum). The black cross shows that the goal keeper attributes are not correlated with most of the other attributes. Visually, most of the attributes seem to be correlated to each other.\n\nIn the heatmap I see a black cell for Balance and Strength, also for Agility and Balance. The next graph will show a regression plot or scatter plot of these behavious.","00e69227":"**Top features of Attackers**","fb7aeb89":"**Top features of Midfielders**","9d8ad4e0":"**Converting attributes involving currency into floating point values**\n\nI converted \"Value\" and \"Wage\" columns from String to float. \n* Cut out the currency symbol\n* Multiplied by the prefixes accordingly\n\n    -  M = 1e6 \n\n    -  K = 1e3\n\n\u20ac95.5M will be 95500000 \n\n\u20ac4.1K will be 4100\n\n\u20ac0 will be 0.","72611e00":"## C. Analysis","6a361525":"Randomly select 10 of them and show summary statistics","ca6af2d5":"## 4. Propose further research","69f706f9":"Most players prefer to play in the midfield position only, followed by defender only preferences. Roughly, number of midfield- forward preferences is equal to defender-midfield preferences. The graph could not show bars for D & F and D,M,F because those kind of players are very rare. Finding a player who prefers to play in either defender or forward position is rare and the same is true for a player who has prefered positions from all over the field.\nI can check the lengths of those two categories","53ff8e9e":"FIFA likes to add to and subtract from attributes and put the calculation as it is. As shown above, the columns contain add or subtract operations, not only from 23 up to 35, even column 66 has this problem. All personal attributes and Overall(5), Potential(6), Special(11) don't contain mixed types. I am checking from Acceleration(12) up to the end, ST(73)\n\nI tried to fix the columns using the code below, more or less it worked but It also took more than 10 minutes. I was searching for a better way to clean the columns and found apply method. ","c9a40459":"**Classifying the player positons like below will help answer the next analytic questions**\n\nForward Positions\n- LS, ST RS, LW, LF, CF, RF, RW\n\nMidfield Positions\n- LAM, CAM, RAM, LM, LCM, RCM, CM, RM, LDM, CDM, RDM\n\nDefender Positions\n\n- LB, LWB, LCB, CB, RCB, RB, RWB\n\nGoal Keeper\n\n- GK","1565c3a0":"DtypeWarning: Columns (23,35) have mixed types. Trying to select columns by column number using loc (fifa18.loc[:,23]) didn't work so I used iloc. The data contains columns with mixed types. All the columns 23 up to 35 are player performance attributes. ","8f7db7d1":"**Analytic Question 3: How does the performance attributes vary among forwards, midfielders and defenders?**","e903ab0f":"These are column numbers of all 37 performance attributes.","ba39c708":"The +, - problems are fixed now, The unique values confirm that, and in addition, I checked specific rows and found that cells involving operands are correctly evaluated(cleaned)\n\nMost of the numeric attributes  are succesffuly converted to int64\/float.A NaN value signifies missing data, they are not missing due to error but by logic. For example all Goal Keepers don't have positional attributes.\n\nfind the NaNs(for example take RWB attribute)\n- fifa18[\"RWB\"].isna()\n- fifa18[\"RWB\"].isnull()","b6502df7":"# Analytic Report and Research Proposal ","82d3f924":"The distribution of ages shows most players of all the clubs here are aged between 20 and 30. Juventus has reasonable amount of older players who are in the 30 to 40 range. Bayern distibution is the widest of the five. I want to see which club has the oldest and youngest players next.","9d33aa77":"*Slow way*","aee408e8":"Now let me see who are the most highly paid players and lowest paid players(ignoring free agents)","76ae1f4f":"Among the collection of data sources mentioned in the curriculum I selected the FIFA 18 Complete Player Dataset that is downloaded from Kaggle(https:\/\/www.kaggle.com\/thec03u5\/fifa-18-demo-player-dataset). It contains 17k+ players, 70+ attributes extracted from the latest edition of FIFA\n\nComplete Dataset including :\n\n- Player personal attributes (Nationality, Club, Photo, Age, Value etc.): 7, columns **[0:4] and [7:8]**\n- Player performance attributes (Overall, Potential, Aggression, Agility etc.): 37, columns **[5:6], [11:45]**\n- Player preferred position and ratings at all positions:28, columns **[46:73]**","1a880ad5":"These are the column headers for the positional attributes(ratings).If we count the abbreviated player positions only we would get 26. Remember GK is not a column","b23b9442":"**Analytic Question 1:  Which clubs have highly skilled players on average and what is the distrubiton of ages in those clubs?**","8b61604e":"I thought stamina of players decreases as they cross the age 30. It is somewhat true for Real Madrid and Juventus players. Barcelona and Bayern seem to have a similar distribution regarless of age, But look at Paris Saint-Germain above 30 players have a higher stamina on average.","e934af67":"The high correlation between Ball control and Dribbling makes sense, because a person who dribbles for long time without losing the ball is often highly skilled in controlling the ball. Agility is ability to move quickly and easily.Strength is the quality or state of being strong. Balance is generally what keeps players on their feet. Both agility and balance are not correlated with strength. It is interperated as, most players who are strong don't have high balance or agility rating. I bet if a player has high balance, high strength, he is a super player. \n\nCoaches say a person who has high balance and strength is not likey to be pushed off the ball easily. Let me find those players.","822b43e8":"\n**Given a new player with a set of skills and position preferences, predict the wage he could be paid?**\n\n- how much a player can earn in different teams\nWage is a continous variable, therefore by training a regression model, we can predict wages or values of players. It is a supervised machine learning problem\n\n**Can we cluster similar players and form a team without taking too many players from a single cluster?** \n\n- see which team has the most diversified squad\nFinding similarities is unsupervised machine learning, It deals about similaritiy functions, cluster size, finding centriod. We can use techniques like Kmeans, hierarchical clustering, expectation maximization\n\n**Can a model recommend a player in a similar position from other clubs?**\n\nSoccer Teams play in various formations and different set of positions are utilized, see the image I created by hand using this link https:\/\/drive.google.com\/open?id=1OAE4U3VlwKfSI7DOte05weTaqXa97CQF. The image shows all possible positions players can be.\nFor example a typical 4-3-3 formation may involve: (LB, LCB, RCB, LDM, CDM, RDM, LS ST RS), 5-4-1 can be (LB,LCB,CB,RCB,RB, LM, CM, CDM, RM, CF). A complete diagram of formations in on this link: https:\/\/cdn.mulefactory.com\/gallery\/uploaded\/images\/Wiki\/FIFA17\/formations.png\n\n**What is the best formation a team can adopt in order to get a maximum performance from it's current squad?**\n","3320b998":"The distrubiton of wages is highly skewed to the right, most players earn a small wage and few lucky ones get highest wages.The plot on the right shows a zoomed out version of the first or distrubtion of salaries ranging from 0 up to 100000, it clearly shows that majority of players earn around 5000. Not many players earn 100000 let alone 500000","49e38873":"**Top features of Defenders**","fc86c3e7":"*Fast and efficent*","ad33a379":"I found that many players have a wage, value of 0 and not part of any club. These players are called Free Agents. ","935c89ed":"In a previous cell the players are categorized into 7 types. Let us study three of them\n\n- 1 0 0  Defense Position Only\n- 0 1 0  Midfieder Position Only\n- 0 0 1  Forward Position Only\n\n\nThe performace attributes are so many, thus I choose to study some of them.","63bf8fe9":"Below I am plotting to see how distribution of stamina looks for players below 30 and above 30 in the top 5 clubs","25eab0ea":"Midfieldrs are better in Crossing, Curve, Ball Control, Agility. Defenders are more agressive than the others. Composure is balanced among all. Attackers exceed Midfielders slightly on Acceleration. Defenders are not good at Dribbling and Agility compared to the other two.\n\nEventhough, it is diffcult to show all performance attributes in one graph, I can group by them by position string(Attack, Midfield, Defense) and find the mean. ","a6ed5e1e":"**Analytic Question 2: How many players prefer playing in one area(either forward, midfield or defender) only?** ","a8b364ff":"The returned value is the decimal representation of a binary number generated depending on the preferred position of a player. I illustrate the process below","3cb2613a":"The range of ages for Bayern is confirmed again, because they have one of the youngest players and the maximum age goes upto 35. Barca and Juventus don't have under 20 players. The distance between the maximum age and the 3rd quartile is narrow in the two spain clubs and it increases to a wide margin as we go from PSG to Juventus.","f2a5f114":"I coded a function below which returns\n\n- 0 GK position\n- 1 forward position only\n- 2 midfield position only\n- 2 defense position only\n- 3 midfield and forward\n- 4 defense and midfield\n- 5 forward and defense\n- 6 forward, defense and midfield\n\nI represented the  cases in a truth table\n    <table align = left >\n    <tr>\n    <td><b>Defense<\/b><\/td>\n    <td><b>Midfield<\/b><\/td>\n    <td><b>Forward<\/b><\/td>\n    <td><b>To Decimal<\/b><\/td>\n    <tr\/>\n    <tr><td>0<\/td><td>0<\/td><td>0<\/td><td>0<\/td><\/tr>\n    <tr><td>0<\/td><td>0<\/td><td>1<\/td><td>1<\/td><\/tr>\n    <tr><td>0<\/td><td>1<\/td><td>0<\/td><td>2<\/td><\/tr>\n    <tr><td>0<\/td><td>1<\/td><td>1<\/td><td>3<\/td><\/tr>\n    <tr><td>1<\/td><td>0<\/td><td>0<\/td><td>4<\/td><\/tr>\n    <tr><td>1<\/td><td>0<\/td><td>1<\/td><td>5<\/td><\/tr>\n    <tr><td>1<\/td><td>1<\/td><td>0<\/td><td>6<\/td><\/tr>\n    <tr><td>1<\/td><td>1<\/td><td>1<\/td><td>7<\/td><\/tr>\n   <\/table>","e3d53dee":"## A.  Data Cleaning","683efc93":"## B. Exploring Data","b46ec51e":"Are there any star player(above 80 overall) in among these 99 players"}}