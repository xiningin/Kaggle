{"cell_type":{"c782e53c":"code","0d8f3c79":"code","86c1232b":"code","e2b0515b":"code","7385ad88":"code","2c4df8b5":"code","8056bee0":"code","296843ad":"code","286dad74":"code","fdeb00eb":"code","67e9a5a7":"code","2840f07e":"code","644eb5fc":"code","0ac0180b":"code","f4e9b063":"code","ebdecbbe":"code","ffc884bf":"code","6b847931":"code","4c19dc29":"code","21e7f079":"code","0c2829e4":"code","607b7f88":"code","eeb9ff2b":"code","9afa0e21":"code","e4f1ae5a":"code","6f0dc92a":"code","60eb7723":"markdown"},"source":{"c782e53c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d8f3c79":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","86c1232b":"import keras","e2b0515b":"# importing the dataset\n\ndataset = pd.read_csv(\"..\/input\/churn-modelling\/Churn_Modelling.csv\")","7385ad88":"dataset","2c4df8b5":"# our aim will be to predict whether the employee will leave the bank or not\n# Y will be the exited column","8056bee0":"#Seperating the dependent and independent variable sets\n\nX = dataset.iloc[: , 3 : 13]\ny = dataset.iloc[: , 13]","296843ad":"#as in the X dataset the \"Gender\" and \"Geography\" are categorical variables, so creating the dummy variables\n#for the two columns\n\ngeography = pd.get_dummies(X['Geography'] , drop_first = True)\ngender = pd.get_dummies(X['Gender'] , drop_first = True)\n","286dad74":"#now concatinating the new dummy columns with the X data frame\n\nX = pd.concat([X , geography , gender] , axis = 1)","fdeb00eb":"# now deleting the original categorical columns\n\nX = X.drop(['Geography' , 'Gender'] , axis = 1)","67e9a5a7":"X.describe()","2840f07e":"# now splitting the X dataset into training set and testing set\n\nfrom sklearn.model_selection import train_test_split\n\nX_train , X_test , y_train , y_test = train_test_split(X , y , test_size = 0.2 , random_state = 0)","644eb5fc":"X_test","0ac0180b":"# now we will do some feature scaling\n\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","f4e9b063":"import tensorflow\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n","ebdecbbe":"# intializing the sequencer\n\nclassifier = Sequential()","ffc884bf":"#lets add the input layer in our ANN\nclassifier.add(Dense(units = 6 , activation = \"relu\" , kernel_initializer = \"he_uniform\" , input_dim = 11))","6b847931":"# adding the first hidden layer\n\nclassifier.add(Dense(units = 6 , activation = \"relu\" , kernel_initializer = \"he_uniform\"))","4c19dc29":"#Adding the output layer\n\nclassifier.add(Dense(units = 1 , activation = \"sigmoid\" , kernel_initializer = \"glorot_uniform\"))","21e7f079":"# Now compiling our ANN\n\nclassifier.compile(optimizer = \"adam\" , loss = \"binary_crossentropy\" , metrics = ['accuracy'])","0c2829e4":"classifier.summary()","607b7f88":"# fitting the ANN on our trainig set\n\nmodel_history = classifier.fit(X_train , y_train , validation_split = 0.33 , batch_size = 10 , epochs = 100 , verbose = 0)","eeb9ff2b":"# now we have successfully trained our model, lets check its accuracy\n\nprint(model_history.history['val_accuracy'])","9afa0e21":"# Our model got the training accuracy of 85.3 percent\n#Now testing our model\n\ny_pred = classifier.predict(X_test)\ny_pred = (y_pred > 0.5)\n\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test , y_pred)","e4f1ae5a":"print(cm)","6f0dc92a":"# printing the accuracy score\n\nfrom sklearn.metrics import accuracy_score\n\nscore = accuracy_score(y_pred , y_test)\nprint(score)","60eb7723":"Now lets start making the ANN\n"}}