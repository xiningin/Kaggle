{"cell_type":{"54917656":"code","49f16407":"code","edc35ee7":"code","d518e6d0":"code","a4627ddb":"code","cf1497b3":"code","a5186750":"code","5347ae43":"code","e68aabc4":"code","3a3f8a21":"code","68bd1146":"code","4db01d22":"code","a3f1d508":"code","56c78d0f":"code","6c166f27":"code","01b2dda4":"code","5fdb8276":"code","29912de4":"code","6e11eba8":"code","0595220d":"code","da2089e0":"code","6f79e66b":"code","128c21c4":"code","4ed2ea53":"code","75e34537":"code","a6c6054f":"code","b2758581":"code","a077ab42":"code","6c3c1075":"code","1e2eb5dd":"code","92765686":"code","1d2eb605":"code","7da3dc3d":"code","4605874b":"code","16d9847e":"code","b41376e3":"code","aaf41598":"code","091a4b51":"code","01ffb894":"code","6af60f5f":"code","eb2199f2":"code","7b7a503d":"code","54f153b2":"code","47a1d4e4":"code","f3b6cc9d":"code","98959159":"code","0d1bdad8":"code","1111ef20":"code","1cc141dc":"code","b69f9e93":"code","5c4eae1a":"code","bc9ceb22":"code","a2a43a16":"code","cacca16d":"code","c631c28a":"code","5c710e3a":"code","0ebc0e96":"code","734b4451":"code","ff9ce930":"code","800e474b":"code","9c319506":"code","f7940a75":"code","035afba3":"code","f53c021f":"code","f9567069":"code","4ce86a2e":"code","04531c52":"code","899ef078":"code","5cd1547a":"code","f9cf5183":"code","bbbb7527":"code","8202f856":"code","2daf72ec":"code","04ca28a6":"code","c5608aec":"code","a09854ee":"code","c8c17f7b":"code","31d0b9a6":"code","5a1cdd78":"code","80ca92d3":"code","f5dd5934":"code","062219f0":"code","dfddc111":"code","6e10fa3e":"code","b8b6d49f":"code","250f0197":"code","1d76ab10":"code","46faa91f":"code","655c856b":"code","8861dc96":"code","5756cdf9":"code","d9cbc42b":"code","e0125490":"code","da4ca821":"code","e4f41f43":"code","c9960b66":"code","1bf5c948":"code","9aa1ce4b":"code","f1594b05":"code","c1e0503e":"code","33ee0246":"code","bff01764":"code","ae4e8765":"code","0adf75c4":"code","adc9da08":"code","e53bfcfc":"code","8a8557c5":"code","93749a37":"code","9e00d8e7":"code","3be29de5":"code","4748ca77":"markdown","500ab8d7":"markdown","81d34a8e":"markdown","83a86b0e":"markdown","9d8d1bff":"markdown","d8ce2a89":"markdown","1fdd7f4f":"markdown","bc521463":"markdown","3173a27e":"markdown","a2aaddca":"markdown","a847c515":"markdown","175a1b2e":"markdown","0f2dfd82":"markdown","c05be94b":"markdown","4094b23f":"markdown","f92f22cb":"markdown","5e0076c3":"markdown","77fc9e2d":"markdown","150327ac":"markdown","5379fc7c":"markdown","0e8e5d78":"markdown","9e0fc4f3":"markdown","1ea7b816":"markdown","9d2579a7":"markdown","eab89833":"markdown","b7e54b38":"markdown","5ac4f4b3":"markdown","346fe8d0":"markdown","6747f63f":"markdown","fd2a4133":"markdown","1428416b":"markdown","a0731f22":"markdown","439f449d":"markdown","4a895a0f":"markdown","e0763b19":"markdown","28c8628b":"markdown","b69000ba":"markdown","75ac44f7":"markdown","4faa75df":"markdown","401eb333":"markdown","9d4be617":"markdown","867c82e5":"markdown","e5fe96a5":"markdown","11913e0b":"markdown","1c55823b":"markdown","e3a144c9":"markdown","4013b378":"markdown","147f90e9":"markdown","38fa4f78":"markdown","970cfbe6":"markdown","9ff40ac2":"markdown","10bfbbea":"markdown","7ad82fe1":"markdown","2abdc0ab":"markdown","a9cd7208":"markdown","80df4ecb":"markdown","2b464350":"markdown","8b51fb06":"markdown","1083c946":"markdown","8a044a1b":"markdown","82258433":"markdown","4ec8f7f6":"markdown","9b0ac9f5":"markdown","985038a0":"markdown","454e1e46":"markdown","15203fc9":"markdown","d829dd3d":"markdown","518a2a07":"markdown","3a7c4a92":"markdown","4f4fe004":"markdown","2402cae5":"markdown","3064a566":"markdown","22b0ca54":"markdown","035e2e90":"markdown","e8fc6695":"markdown","4558476d":"markdown","bcb5fa07":"markdown","37d07f6f":"markdown","e50debba":"markdown","1b2a9e17":"markdown","94452b3e":"markdown","9f9c912a":"markdown","51d1afc0":"markdown","8924b0d7":"markdown","312b73d3":"markdown","0f97e825":"markdown","cacb7ef5":"markdown","e462c32c":"markdown","ef2e4db2":"markdown","1a246a1f":"markdown","b232e061":"markdown","120ada69":"markdown","4d2ed925":"markdown","fac77f90":"markdown","be00e3c3":"markdown","46df7df4":"markdown","763fe085":"markdown","15965f0d":"markdown","523bb7b6":"markdown","2e337fa8":"markdown","17b60833":"markdown","f005b790":"markdown","ad14d3bd":"markdown","b07be10f":"markdown","6c80a1f0":"markdown","cb38c336":"markdown","d17007e4":"markdown","3994fcd7":"markdown","81c63533":"markdown","987f56b7":"markdown","1a55d8a8":"markdown","9f39387d":"markdown","c6c456d5":"markdown","45b9ec86":"markdown","dd215ce5":"markdown","f00f0e87":"markdown","f22da571":"markdown","dcfbd3fe":"markdown","44c77872":"markdown","c8e2c99d":"markdown","63669a6b":"markdown"},"source":{"54917656":"!pip install pdpipe","49f16407":"import pandas as pd\nimport pdpipe as pdp\nimport numpy as np\n\nimport pycountry\n\n# the commented code below will only be useful in a stand-alone version\n#from google.oauth2 import service_account\n#import google.auth\n\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\n\n\nfrom sklearn import preprocessing\nimport time\nfrom datetime import datetime","edc35ee7":"# auxiliary helper functions and common pipelines reused below\n\ndef heatmap_numeric_w_dependent_variable(df, dependent_variable):\n    '''\n    Takes df, a dependant variable as str\n    Returns a heatmap of all independent variables' correlations with dependent variable \n    '''\n    plt.figure(figsize=(8, 10))\n    g = sns.heatmap(df.corr()[[dependent_variable]].sort_values(by=dependent_variable), \n                    annot=True, \n                    cmap='coolwarm', \n                    vmin=-1,\n                    vmax=1) \n    return g\n\ndef histograms_numeric_columns(df, numerical_columns, col_wrap):\n    '''\n    Takes df, numerical columns as list\n    Returns a group of histagrams\n    '''\n    f = pd.melt(df, value_vars=numerical_columns) \n    g = sns.FacetGrid(f, col='variable',  col_wrap=col_wrap, sharex=False, sharey=False)\n    g = g.map(sns.distplot, 'value')\n    return g\n\n\n# map country alpha 2 codes to country names to display in the map\ndef get_country_name(alpha_2_code):\n    '''\n    Takes the alpha-2 country code as an input\n    Returns a full country name\n    '''\n    country_obj = pycountry.countries.get(alpha_2=alpha_2_code)\n    country_name = country_obj.name\n    return country_name\n\n\n# map country alpha 3 codes to country names to display in the map\ndef get_country_name_by_alpha3(alpha_3_code):\n    '''\n    Takes the alpha-3 country code as an input\n    Returns a full country name\n    '''\n    country_name = \"\"\n    country_obj = pycountry.countries.get(alpha_3=alpha_3_code)\n    if country_obj is None:\n        country_name = alpha_3_code\n    else:\n        country_name = country_obj.name\n    return country_name\n\n\ncountry_name_pipeline = pdp.PdPipeline([\n    pdp.ApplyByCols(['country_id'], get_country_name),\n])\n\ncountry_name_pipeline3 = pdp.PdPipeline([\n    pdp.ApplyByCols(['country_id'], get_country_name_by_alpha3),\n])\n\n# set the size of the geo bubble\ndef set_size(value):\n    '''\n    Takes the numeric value of a parameter to visualize on a map (Plotly Geo-Scatter plot)\n    Returns a number to indicate the size of a bubble for a country which numeric attribute value \n    was supplied as an input\n    '''\n    result = np.log(1+value\/1000)\n    if result < 0:\n        result = 0.001\n    return result","d518e6d0":"confirmed_ts_df = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\")\ndeaths_ts_df = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\")\nrecovered_ts_df = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\")","a4627ddb":"confirmed_ts_melted_df = confirmed_ts_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long',],\n                     var_name='covid_date', value_name='confirmed').copy()\n\ndeaths_ts_melted_df = deaths_ts_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long',],\n                     var_name='covid_date', value_name='deaths').copy()\n\nrecovered_ts_melted_df = recovered_ts_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long',],\n                     var_name='covid_date', value_name='recovered').copy()","cf1497b3":"pipeline = pdp.PdPipeline([\n    pdp.ApplyByCols(['covid_date'], pd.to_datetime),\n    pdp.ColRename({'Country\/Region': 'country_id', 'Province\/State': 'state', 'Lat': 'lat', 'Long': 'long'})\n])\n\nconfirmed_ts_fcg_df = pipeline.apply(confirmed_ts_melted_df).sort_values(by=['country_id', 'covid_date'])\ndeaths_ts_fcg_df = pipeline.apply(deaths_ts_melted_df).sort_values(by=['country_id', 'covid_date'])\nrecovered_ts_fcg_df = pipeline.apply(recovered_ts_melted_df).sort_values(by=['country_id', 'covid_date'])\n\ncovid_df = pd.merge(\n    pd.merge(confirmed_ts_fcg_df, deaths_ts_fcg_df, on=['state', 'country_id', 'lat', 'long','covid_date']),\n    recovered_ts_fcg_df, on=['state', 'country_id', 'lat', 'long','covid_date'])\n\ncovid_df.head()","a5186750":"covid_start_date = covid_df[\"covid_date\"].dt.date.min()\ncovid_end_date = covid_df[\"covid_date\"].dt.date.max()\nprint(\"Start Date:\", covid_start_date)\nprint(\"End Date:\", covid_end_date)","5347ae43":"# World population SQL query\nsql = \"\"\"\nSELECT \ncountry_code as country_id, -- alpha3 country code\nyear_2018 as pop\nFROM `bigquery-public-data.world_bank_global_population.population_by_country` \nWHERE year_2018 IS NOT NULL\n\"\"\"\n\n# we are going to get use of Using Kaggle's public dataset BigQuery integration to aid researcher needs free of charge \n# you can refer to https:\/\/www.kaggle.com\/bigquery\/covid19-google-mobility to see the terms and conditions of such an integration\n# explained\n\nfrom google.cloud import bigquery\nclient = bigquery.Client()\n\n# Set up the query\nquery_job = client.query(sql)\n\n# Make an API request  to run the query and return a pandas DataFrame\npopulation_df = query_job.to_dataframe()\n\n# Note: the code commented below is used in a stand-alone notebook where google auth and standard pandas capabilities are\n# better to utilize\n# population_df = pd.read_gbq(sql, project_id=your_project_id, credentials=credentials, dialect='standard')\n\ndisplay(population_df.head(20))","e68aabc4":"# replace country alpha3 code with country name\npopulation_df = country_name_pipeline3.apply(population_df)","3a3f8a21":"# merge COVID-19 and population datrasets\n\ncovid_df = pd.merge(covid_df,\n                 population_df,\n                 on='country_id')","68bd1146":"# Basic clean-up and dates features\n\nle = preprocessing.LabelEncoder()\n\ncovid_df_corr = covid_df.copy()\ncovid_df_corr['day_num'] = le.fit_transform(covid_df_corr.covid_date)\ncovid_df_corr['day'] = covid_df_corr['covid_date'].dt.day\ncovid_df_corr['month'] = covid_df_corr['covid_date'].dt.month\ncovid_df_corr['year'] = covid_df_corr['covid_date'].dt.year\n\n# Fill null values given that we merged train-test datasets\ncovid_df_corr['state'].fillna(\"None\", inplace=True)\ncovid_df_corr['confirmed'].fillna(0, inplace=True)\ncovid_df_corr['deaths'].fillna(0, inplace=True)\ncovid_df_corr['recovered'].fillna(0, inplace=True)\n\n# lag and trend calculation\ndef calculate_trend(df, lag_list, column):\n    for lag in lag_list:\n        trend_column_lag = \"Trend_\" + column + \"_\" + str(lag)\n        df[trend_column_lag] = (df[column]-df[column].shift(lag, fill_value=-999))\/df[column].shift(lag, fill_value=0)\n\n        # df[col1] = df[column] + df[column2]\n    return df\n  \ndef calculate_lag(df, lag_list, column):\n    for lag in lag_list:\n        column_lag = \"Lag_\" + column + \"_\" + str(lag)\n        df[column_lag] = df[column].shift(lag, fill_value=0)\n    return df\n\n\nts = time.time()\ncovid_df_corr = calculate_lag(covid_df_corr, range(1,7), 'confirmed')\ncovid_df_corr = calculate_lag(covid_df_corr, range(1,7), 'deaths')\ncovid_df_corr = calculate_lag(covid_df_corr, range(1,7), 'recovered')\ncovid_df_corr = calculate_trend(covid_df_corr, range(1,7), 'confirmed')\ncovid_df_corr = calculate_trend(covid_df_corr, range(1,7), 'deaths')\ncovid_df_corr = calculate_trend(covid_df_corr, range(1,7), 'recovered')\n\ncovid_df_corr.replace([np.inf, -np.inf], 0, inplace=True)\ncovid_df_corr.fillna(0, inplace=True)\nprint(\"Time spent: \", time.time()-ts)","4db01d22":"# Ref.: https:\/\/www.datacamp.com\/community\/tutorials\/moving-averages-in-pandas\ncovid_df_corr['confirmed_ema'] = covid_df_corr['confirmed'].ewm(span=7,adjust=False).mean()\ncovid_df_corr['deaths_ema'] = covid_df_corr['deaths'].ewm(span=7,adjust=False).mean()\ncovid_df_corr['recovered_ema'] = covid_df_corr['recovered'].ewm(span=7,adjust=False).mean()","a3f1d508":"display(covid_df_corr.head(10))","56c78d0f":"def add_extra_trends(df):\n\n    df1 = df.copy()\n\n    df1['NewConfirmed'] = df1['confirmed'] - df1['confirmed'].shift(1)\n    df1['NewConfirmed'] = df1['NewConfirmed'].fillna(df1['confirmed'])\n    df1['PreviousDayNewConfirmed'] = df1['NewConfirmed']\n    df1['PreviousDayNewConfirmed'] = df1['PreviousDayNewConfirmed'].fillna(0)\n    df1['growth_factor'] = df1['confirmed'] \/ df1['PreviousDayNewConfirmed'] # https:\/\/www.youtube.com\/watch?v=Kas0tIxDvrg\n    df1['growth_factor'] = df1['growth_factor'].rolling(3).median() # add smoothing\n        \n\n    df1['NewFatalities'] = df1['deaths'] - df1['deaths'].shift(1)\n    df1['NewFatalities'] = df1['NewFatalities'].fillna(df1['deaths'])\n    df1['PreviousDayNewFatalities'] = df1['deaths'].shift(1) - df1['deaths'].shift(2)\n    df1['PreviousDayNewFatalities'] = df1['PreviousDayNewFatalities'].fillna(0)\n    df1['mortality_factor'] = df1['NewFatalities'] \/ df1['PreviousDayNewFatalities']\n    df1['mortality_factor'] = df1['mortality_factor'].rolling(3).median() # add smoothing\n        \n    df1['case_fatality_rate'] = df1['deaths'] \/ df1['confirmed']\n    df1['infection_rate'] = df1['confirmed'] \/ df1['pop']\n    df1['mortality_rate'] = df1['deaths'] \/ df1['pop']\n        \n    df1 = df1.replace([np.inf, -np.inf], np.nan)\n    df1['growth_factor'] = np.where(df1['confirmed']==0, 0, df1['growth_factor'].fillna(1.25)) # assumed\n    df1['mortality_factor'] = np.where(df1['deaths']==0, 0, df1['mortality_factor'].fillna(1.25)) # assumed\n    df1['case_fatality_rate'] = round(df1['case_fatality_rate'].fillna(0), 4)\n    df1['infection_rate'] = round(df1['infection_rate'].fillna(0), 4)\n    df1['mortality_rate'] = round(df1['mortality_rate'].fillna(0), 4)\n      \n    return df1.drop(['NewConfirmed', 'PreviousDayNewConfirmed', 'NewFatalities', 'PreviousDayNewFatalities'], axis=1)\n\ncovid_df_corr = add_extra_trends(covid_df_corr)\ndisplay(covid_df_corr.head(10))","6c166f27":"# Correlation of COVID-19 pandemic indicators\ncorr_transform = pdp.PdPipeline([\n    pdp.ColDrop ({'state',\t'country_id',\t'lat',\t'long',\t'covid_date', 'year',\n                  'day', 'month'\n    })\n])\n\n\ndata = corr_transform.apply(covid_df_corr)\ncorr = data.corr()\n\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n)\nax.set_title('Correlation of Basic COVID-19 Metrics')\nax","01b2dda4":"# check correlations with Confirmed\ncorr_transform = pdp.PdPipeline([\n    pdp.ColDrop ({'state',\t'lat',\t'long', 'year',\n                  'day', 'month'\n    })\n])\ncovid_df_corr = corr_transform.apply(covid_df_corr)\nheatmap_numeric_w_dependent_variable(covid_df_corr, 'confirmed')","5fdb8276":"# check correlations with Deaths\nheatmap_numeric_w_dependent_variable(covid_df_corr, 'deaths')","29912de4":"# check correlations with Recovered\nheatmap_numeric_w_dependent_variable(covid_df_corr, 'recovered')","6e11eba8":"# we are going to extract data from BigQuery\n\ndef debugLogSQL(sql):\n     print (' '.join([line.strip() for line in sql.splitlines()]).strip())\n\n# SQL Query for aggregated mobility trend data\nsql = \"\"\"\n  SELECT\n  country_region_code as country_id, \n  date as covid_date,\n  ROUND(AVG(retail_and_recreation_percent_change_from_baseline), 4) as retail_and_recreation_percent_change_from_baseline, \n  ROUND(AVG(grocery_and_pharmacy_percent_change_from_baseline), 4) as grocery_and_pharmacy_percent_change_from_baseline,\n  ROUND(AVG(parks_percent_change_from_baseline), 4) as parks_percent_change_from_baseline,\n  ROUND(AVG(transit_stations_percent_change_from_baseline), 4) as transit_stations_percent_change_from_baseline,\n  ROUND(AVG(workplaces_percent_change_from_baseline), 4) as workplaces_percent_change_from_baseline,\n  ROUND(AVG(residential_percent_change_from_baseline), 4) as residential_percent_change_from_baseline\n  FROM `bigquery-public-data.covid19_google_mobility.mobility_report`\n  GROUP BY country_region_code, date\n\"\"\"\n# debugLogSQL(sql)\n\n# Set up the query\nquery_job = client.query(sql)\n\n# Make an API request  to run the query and return a pandas DataFrame\ngoogle_mobility_df = query_job.to_dataframe()\n\n# Note: the commented code below will be useful if you run a stand-alone notebook on either your premise or in Google Collab\n# google_mobility_df = pd.read_gbq(sql, project_id=your_project_id, credentials=credentials, dialect='standard')\n\ndisplay(google_mobility_df.tail())","0595220d":"display(google_mobility_df.info())","da2089e0":"google_mobility_df.describe()","6f79e66b":"google_mobility_df.groupby('country_id').mean()","128c21c4":"# Missing value summary\nnan_columns = []\nnan_values = []\n\nfor column in google_mobility_df.columns:\n    nan_columns.append(column)\n    nan_values.append(google_mobility_df[column].isnull().sum())\n\nfig = go.Figure(go.Bar(\n            x=nan_columns,\n            y=nan_values,\n            orientation='v'))\n\nfig.update_layout(\n    title='Missing Values in Google Mobility Trend Attributes',\n    xaxis_title=\"Column names\",\n    yaxis_title=\"Number of Missing values\"\n)\n\nfig.show()","4ed2ea53":"country_na = google_mobility_df.groupby('country_id').count().rsub(google_mobility_df.groupby('country_id').size(), axis=0)","75e34537":"country_na.sort_values('retail_and_recreation_percent_change_from_baseline', \n                   ascending=False)[\n                        [ \n                          'retail_and_recreation_percent_change_from_baseline'\n                        ]\n                              ][:10].style.background_gradient(cmap='Oranges')","a6c6054f":"country_na.sort_values('grocery_and_pharmacy_percent_change_from_baseline', \n                   ascending=False)[\n                                    [ \n                                     'grocery_and_pharmacy_percent_change_from_baseline'\n                                    ]\n                                  ][:10].style.background_gradient(cmap='Oranges')","b2758581":"country_na.sort_values('parks_percent_change_from_baseline', \n        ascending=False)[\n                                [ \n                                  'parks_percent_change_from_baseline'\n                                ]\n                          ][:10].style.background_gradient(cmap='Oranges')","a077ab42":"country_na.sort_values('transit_stations_percent_change_from_baseline', \n        ascending=False)[\n                            [ \n                              'transit_stations_percent_change_from_baseline'\n                            ]\n                          ][:10].style.background_gradient(cmap='Oranges')","6c3c1075":"country_na.sort_values('workplaces_percent_change_from_baseline', \n        ascending=False)[\n                            [ \n                              'workplaces_percent_change_from_baseline'\n                            ]\n                          ][:10].style.background_gradient(cmap='Oranges')","1e2eb5dd":"country_na.sort_values('residential_percent_change_from_baseline', \n        ascending=False)[\n                            [ \n                              'residential_percent_change_from_baseline'\n                            ]\n                          ][:11].style.background_gradient(cmap='Oranges')","92765686":"fig = px.histogram(google_mobility_df, \n                   x=\"retail_and_recreation_percent_change_from_baseline\", \n                   marginal=\"violin\", # or  box, rug\n                   )\nfig.show()","1d2eb605":"max_df = google_mobility_df.groupby('country_id')['retail_and_recreation_percent_change_from_baseline'].max().reset_index()\n\nmax_df.sort_values('retail_and_recreation_percent_change_from_baseline', \n                   ascending=False)[\n                                    ['country_id', \n                                     'retail_and_recreation_percent_change_from_baseline'\n                                    ]\n                                  ][:20].style.background_gradient(cmap='Oranges')","7da3dc3d":"df_in = max_df.sort_values('retail_and_recreation_percent_change_from_baseline', \n                   ascending=False)[\n                                    ['country_id']\n                                  ][:20]\n\nretail_and_recreation_percent_change_from_baseline_max = df_in['country_id'].to_list()\n\nprint(retail_and_recreation_percent_change_from_baseline_max, end= \" \")","4605874b":"min_df = google_mobility_df.groupby('country_id')['retail_and_recreation_percent_change_from_baseline'].min().reset_index()\n\nmin_df.sort_values('retail_and_recreation_percent_change_from_baseline', \n                   ascending=True)[\n                                    ['country_id', \n                                     'retail_and_recreation_percent_change_from_baseline'\n                                    ]\n                                  ][:20].style.background_gradient(cmap='Blues')","16d9847e":"df_in = min_df.sort_values('retail_and_recreation_percent_change_from_baseline', \n                   ascending=True)[\n                                    ['country_id']\n                                  ][:20]\n\nretail_and_recreation_percent_change_from_baseline_min = df_in['country_id'].to_list()\n\nprint(retail_and_recreation_percent_change_from_baseline_min, end= \" \")","b41376e3":"formated_gdf = google_mobility_df.fillna(0).groupby(['covid_date', 'country_id'])['retail_and_recreation_percent_change_from_baseline'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['covid_date'] = pd.to_datetime(formated_gdf['covid_date'])\nformated_gdf['covid_date'] = formated_gdf['covid_date'].dt.strftime('%m\/%d\/%Y')\n\ncountry_size_pipeline = pdp.PdPipeline([\n    pdp.ApplyByCols('retail_and_recreation_percent_change_from_baseline', \n                    set_size, 'size', drop=False)\n])\n\nformated_gdf = country_size_pipeline.apply(formated_gdf)\n\nformated_gdf.fillna(0, inplace=True)\n\nformated_gdf = country_name_pipeline.apply(formated_gdf)","aaf41598":"fig = px.scatter_geo(\n    formated_gdf, locations=\"country_id\", locationmode='country names', \n    color=\"retail_and_recreation_percent_change_from_baseline\", \n    size='size', hover_name=\"country_id\", \n    range_color= [-100, 20], \n    projection=\"natural earth\", animation_frame=\"covid_date\", \n    title='Google Mobility Trend: Changes in Retail and Recreation Area Visits Over Time', \n    color_continuous_scale=\"portland\")\n\nfig.show()","091a4b51":"fig = px.histogram(google_mobility_df, \n                   x=\"workplaces_percent_change_from_baseline\", \n                   marginal=\"violin\", # or  box, rug\n                   )\nfig.show()","01ffb894":"max_df = google_mobility_df.groupby('country_id')['workplaces_percent_change_from_baseline'].max().reset_index()\n\nmax_df.sort_values('workplaces_percent_change_from_baseline', \n                   ascending=False)[\n                                    ['country_id', \n                                     'workplaces_percent_change_from_baseline'\n                                    ]\n                                  ][:20].style.background_gradient(cmap='Oranges')","6af60f5f":"df_in = max_df.sort_values('workplaces_percent_change_from_baseline', \n                   ascending=False)[\n                                    ['country_id']\n                                  ][:20]\n\nworkplaces_percent_change_from_baseline_max = df_in['country_id'].to_list()\n\nprint(workplaces_percent_change_from_baseline_max, end= \" \")","eb2199f2":"min_df = google_mobility_df.groupby('country_id')['workplaces_percent_change_from_baseline'].min().reset_index()\n\nmin_df.sort_values('workplaces_percent_change_from_baseline', \n                   ascending=True)[\n                                    ['country_id', \n                                     'workplaces_percent_change_from_baseline'\n                                    ]\n                                  ][:20].style.background_gradient(cmap='Blues')","7b7a503d":"df_in = min_df.sort_values('workplaces_percent_change_from_baseline', \n                   ascending=True)[\n                                    ['country_id']\n                                  ][:20]\n\nworkplaces_percent_change_from_baseline_min = df_in['country_id'].to_list()\n\nprint(workplaces_percent_change_from_baseline_min, end= \" \")","54f153b2":"formated_gdf = google_mobility_df.fillna(0).groupby(['covid_date', 'country_id'])['workplaces_percent_change_from_baseline'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['covid_date'] = pd.to_datetime(formated_gdf['covid_date'])\nformated_gdf['covid_date'] = formated_gdf['covid_date'].dt.strftime('%m\/%d\/%Y')\n\ncountry_size_pipeline = pdp.PdPipeline([\n    pdp.ApplyByCols('workplaces_percent_change_from_baseline', \n                    set_size, 'size', drop=False)\n])\n\nformated_gdf = country_size_pipeline.apply(formated_gdf)\n\nformated_gdf.fillna(0, inplace=True)\n\nformated_gdf = country_name_pipeline.apply(formated_gdf)","47a1d4e4":"fig = px.scatter_geo(\n    formated_gdf, locations=\"country_id\", locationmode='country names', \n    color=\"workplaces_percent_change_from_baseline\", \n    size='size', hover_name=\"country_id\", \n    range_color= [-100, 20], \n    projection=\"natural earth\", animation_frame=\"covid_date\", \n    title='Google Mobility Trend: Changes in Workplace and Office Center Visits Over Time', \n    color_continuous_scale=\"portland\")\n\nfig.show()","f3b6cc9d":"fig = px.histogram(google_mobility_df, \n                   x=\"grocery_and_pharmacy_percent_change_from_baseline\", \n                   marginal=\"violin\", # or  box, rug\n                   )\nfig.show()","98959159":"max_df = google_mobility_df.groupby('country_id')['grocery_and_pharmacy_percent_change_from_baseline'].max().reset_index()\n\nmax_df.sort_values('grocery_and_pharmacy_percent_change_from_baseline', \n                   ascending=False)[\n                                    ['country_id', \n                                     'grocery_and_pharmacy_percent_change_from_baseline'\n                                    ]\n                                  ][:20].style.background_gradient(cmap='Oranges')","0d1bdad8":"df_in = max_df.sort_values('grocery_and_pharmacy_percent_change_from_baseline', \n                   ascending=False)[\n                                    ['country_id']\n                                  ][:20]\n\ngrocery_and_pharmacy_percent_change_from_baseline_max = df_in['country_id'].to_list()\n\nprint(grocery_and_pharmacy_percent_change_from_baseline_max, end= \" \")","1111ef20":"min_df = google_mobility_df.groupby('country_id')['grocery_and_pharmacy_percent_change_from_baseline'].min().reset_index()\n\nmin_df.sort_values('grocery_and_pharmacy_percent_change_from_baseline', \n                   ascending=True)[\n                                    ['country_id', \n                                     'grocery_and_pharmacy_percent_change_from_baseline'\n                                    ]\n                                  ][:20].style.background_gradient(cmap='Blues')","1cc141dc":"df_in = min_df.sort_values('grocery_and_pharmacy_percent_change_from_baseline', \n                   ascending=True)[\n                                    ['country_id']\n                                  ][:20]\n\ngrocery_and_pharmacy_percent_change_from_baseline_min = df_in['country_id'].to_list()\n\nprint(grocery_and_pharmacy_percent_change_from_baseline_min, end= \" \")","b69f9e93":"formated_gdf = google_mobility_df.fillna(0).groupby(['covid_date', 'country_id'])['grocery_and_pharmacy_percent_change_from_baseline'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['covid_date'] = pd.to_datetime(formated_gdf['covid_date'])\nformated_gdf['covid_date'] = formated_gdf['covid_date'].dt.strftime('%m\/%d\/%Y')\n\ncountry_size_pipeline = pdp.PdPipeline([\n    pdp.ApplyByCols('grocery_and_pharmacy_percent_change_from_baseline', \n                    set_size, 'size', drop=False)\n])\n\nformated_gdf = country_size_pipeline.apply(formated_gdf)\n\nformated_gdf.fillna(0, inplace=True)\n\nformated_gdf = country_name_pipeline.apply(formated_gdf)","5c4eae1a":"fig = px.scatter_geo(\n    formated_gdf, locations=\"country_id\", locationmode='country names', \n    color=\"grocery_and_pharmacy_percent_change_from_baseline\", \n    size='size', hover_name=\"country_id\", \n    range_color= [-100, 20], \n    projection=\"natural earth\", animation_frame=\"covid_date\", \n    title='Google Mobility Trend: Changes in Grocery and Pharmacy Visits Over Time', \n    color_continuous_scale=\"portland\")\n\nfig.show()","bc9ceb22":"fig = px.histogram(google_mobility_df, \n                   x=\"parks_percent_change_from_baseline\", \n                   marginal=\"violin\", # or  box, rug\n                   )\nfig.show()","a2a43a16":"max_df = google_mobility_df.groupby('country_id')['parks_percent_change_from_baseline'].max().reset_index()\n\nmax_df.sort_values('parks_percent_change_from_baseline', \n                   ascending=False)[\n                                    ['country_id', \n                                     'parks_percent_change_from_baseline'\n                                    ]\n                                  ][:20].style.background_gradient(cmap='Oranges')","cacca16d":"df_in = max_df.sort_values('parks_percent_change_from_baseline', \n                   ascending=False)[\n                                    ['country_id']\n                                  ][:20]\n\nparks_percent_change_from_baseline_max = df_in['country_id'].to_list()\n\nprint(parks_percent_change_from_baseline_max, end= \" \")","c631c28a":"min_df = google_mobility_df.groupby('country_id')['parks_percent_change_from_baseline'].min().reset_index()\n\nmin_df.sort_values('parks_percent_change_from_baseline', \n                   ascending=True)[\n                                    ['country_id', \n                                     'parks_percent_change_from_baseline'\n                                    ]\n                                  ][:20].style.background_gradient(cmap='Blues')","5c710e3a":"df_in = min_df.sort_values('parks_percent_change_from_baseline', \n                   ascending=True)[\n                                    ['country_id']\n                                  ][:20]\n\nparks_percent_change_from_baseline_min = df_in['country_id'].to_list()\n\nprint(parks_percent_change_from_baseline_min, end= \" \")","0ebc0e96":"formated_gdf = google_mobility_df.fillna(0).groupby(['covid_date', 'country_id'])['parks_percent_change_from_baseline'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['covid_date'] = pd.to_datetime(formated_gdf['covid_date'])\nformated_gdf['covid_date'] = formated_gdf['covid_date'].dt.strftime('%m\/%d\/%Y')\n\ncountry_size_pipeline = pdp.PdPipeline([\n    pdp.ApplyByCols('parks_percent_change_from_baseline', \n                    set_size, 'size', drop=False)\n])\n\nformated_gdf = country_size_pipeline.apply(formated_gdf)\n\nformated_gdf.fillna(0, inplace=True)\n\nformated_gdf = country_name_pipeline.apply(formated_gdf)","734b4451":"fig = px.scatter_geo(\n    formated_gdf, locations=\"country_id\", locationmode='country names', \n    color=\"parks_percent_change_from_baseline\", \n    size='size', hover_name=\"country_id\", \n    range_color= [-100, 20], \n    projection=\"natural earth\", animation_frame=\"covid_date\", \n    title='Google Mobility Trend: Changes in Park Visits Over Time', \n    color_continuous_scale=\"portland\")\n\nfig.show()","ff9ce930":"fig = px.histogram(google_mobility_df, \n                   x=\"transit_stations_percent_change_from_baseline\",  \n                   marginal=\"violin\", # or  box, rug\n                   )\nfig.show()","800e474b":"max_df = google_mobility_df.groupby('country_id')['transit_stations_percent_change_from_baseline'].max().reset_index()\n\nmax_df.sort_values('transit_stations_percent_change_from_baseline', \n                   ascending=False)[\n                                    ['country_id', \n                                     'transit_stations_percent_change_from_baseline'\n                                    ]\n                                  ][:20].style.background_gradient(cmap='Oranges')","9c319506":"df_in = max_df.sort_values('transit_stations_percent_change_from_baseline', \n                   ascending=False)[\n                                    ['country_id']\n                                  ][:20]\n\ntransit_stations_percent_change_from_baseline_max = df_in['country_id'].to_list()\n\nprint(transit_stations_percent_change_from_baseline_max, end= \" \")","f7940a75":"min_df = google_mobility_df.groupby('country_id')['transit_stations_percent_change_from_baseline'].min().reset_index()\n\nmin_df.sort_values('transit_stations_percent_change_from_baseline', \n                   ascending=True)[\n                                    ['country_id', \n                                     'transit_stations_percent_change_from_baseline'\n                                    ]\n                                  ][:20].style.background_gradient(cmap='Blues')","035afba3":"df_in = min_df.sort_values('transit_stations_percent_change_from_baseline', \n                   ascending=True)[\n                                    ['country_id']\n                                  ][:20]\n\ntransit_stations_percent_change_from_baseline_min = df_in['country_id'].to_list()\n\nprint(transit_stations_percent_change_from_baseline_min, end= \" \")","f53c021f":"formated_gdf = google_mobility_df.fillna(0).groupby(['covid_date', 'country_id'])['transit_stations_percent_change_from_baseline'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['covid_date'] = pd.to_datetime(formated_gdf['covid_date'])\nformated_gdf['covid_date'] = formated_gdf['covid_date'].dt.strftime('%m\/%d\/%Y')\n\ncountry_size_pipeline = pdp.PdPipeline([\n    pdp.ApplyByCols('transit_stations_percent_change_from_baseline', \n                    set_size, 'size', drop=False)\n])\n\nformated_gdf = country_size_pipeline.apply(formated_gdf)\n\nformated_gdf.fillna(0, inplace=True)\n\nformated_gdf = country_name_pipeline.apply(formated_gdf)","f9567069":"fig = px.scatter_geo(\n    formated_gdf, locations=\"country_id\", locationmode='country names', \n    color=\"transit_stations_percent_change_from_baseline\", \n    size='size', hover_name=\"country_id\", \n    range_color= [-100, 20], \n    projection=\"natural earth\", animation_frame=\"covid_date\", \n    title='Google Mobility Trend: Changes in Transit Station Visits Over Time', \n    color_continuous_scale=\"portland\")\n\nfig.show()","4ce86a2e":"fig = px.histogram(google_mobility_df, \n                   x=\"residential_percent_change_from_baseline\", \n                   marginal=\"violin\", # or  box, rug\n                   )\nfig.show()","04531c52":"max_df = google_mobility_df.groupby('country_id')['residential_percent_change_from_baseline'].max().reset_index()\n\nmax_df.sort_values('residential_percent_change_from_baseline', \n                   ascending=False)[\n                                    ['country_id', \n                                     'residential_percent_change_from_baseline'\n                                    ]\n                                  ][:20].style.background_gradient(cmap='Oranges')","899ef078":"df_in = max_df.sort_values('residential_percent_change_from_baseline', \n                   ascending=False)[\n                                    ['country_id']\n                                  ][:20]\n\nresidential_percent_change_from_baseline_max = df_in['country_id'].to_list()\n\nprint(residential_percent_change_from_baseline_max, end= \" \")","5cd1547a":"min_df = google_mobility_df.groupby('country_id')['residential_percent_change_from_baseline'].min().reset_index()\n\nmin_df.sort_values('residential_percent_change_from_baseline', \n                   ascending=True)[\n                                    ['country_id', \n                                     'residential_percent_change_from_baseline'\n                                    ]\n                                  ][:20].style.background_gradient(cmap='Blues')","f9cf5183":"df_in = min_df.sort_values('residential_percent_change_from_baseline', \n                   ascending=True)[\n                                    ['country_id']\n                                  ][:20]\n\nresidential_percent_change_from_baseline_min = df_in['country_id'].to_list()\n\nprint(residential_percent_change_from_baseline_min, end= \" \")","bbbb7527":"formated_gdf = google_mobility_df.fillna(0).groupby(['covid_date', 'country_id'])['residential_percent_change_from_baseline'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['covid_date'] = pd.to_datetime(formated_gdf['covid_date'])\nformated_gdf['covid_date'] = formated_gdf['covid_date'].dt.strftime('%m\/%d\/%Y')\n\ncountry_size_pipeline = pdp.PdPipeline([\n    pdp.ApplyByCols('residential_percent_change_from_baseline', \n                    set_size, 'size', drop=False)\n])\n\nformated_gdf = country_size_pipeline.apply(formated_gdf)\n\nformated_gdf.fillna(0, inplace=True)\n\nformated_gdf = country_name_pipeline.apply(formated_gdf)","8202f856":"fig = px.scatter_geo(\n    formated_gdf, locations=\"country_id\", locationmode='country names', \n    color=\"residential_percent_change_from_baseline\", \n    size='size', hover_name=\"country_id\", \n    range_color= [-100, 20], \n    projection=\"natural earth\", animation_frame=\"covid_date\", \n    title='Google Mobility Trend: Changes in Residential Area Visits Over Time', \n    color_continuous_scale=\"portland\")\n\nfig.show()","2daf72ec":"# Correlation of Mobility Trend variables\nle = preprocessing.LabelEncoder()\n\ngoogle_mobility_df_corr = google_mobility_df.copy()\ngoogle_mobility_df_corr['day_num'] = le.fit_transform(google_mobility_df_corr.covid_date)\ncorr_transform_google_mobility = pdp.PdPipeline([\n    pdp.ColDrop ({\n        'country_id',\n        'covid_date'     \n    })\n])\n\n\ndata = corr_transform_google_mobility.apply(google_mobility_df_corr)\ncorr = data.corr()\n\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n)\nax.set_title('Correlation of Basic COVID-19 Metrics')\nax","04ca28a6":"google_mobility_df.info()","c5608aec":"covid_df_corr.info()","a09854ee":"covid_date_pipeline = pdp.PdPipeline([\n    pdp.ApplyByCols(['covid_date'], pd.to_datetime),\n])\n\n# merge COVID-19 and Google Trends Mobility Attributes\n\ndata_all = pd.merge(covid_df_corr,\n                 covid_date_pipeline.apply(country_name_pipeline.apply(google_mobility_df)),\n                 on=['country_id', 'covid_date'])\n\ndisplay(data_all.head(10))","c8c17f7b":"corr_transform = pdp.PdPipeline([\n    pdp.ColDrop ({\n        'country_id','covid_date',\n        'grocery_and_pharmacy_percent_change_from_baseline',\n        'parks_percent_change_from_baseline',\n        'transit_stations_percent_change_from_baseline',\n        'workplaces_percent_change_from_baseline',\n        'residential_percent_change_from_baseline'\n    })\n])\n\ndata_all_corr = corr_transform(data_all)\n\nheatmap_numeric_w_dependent_variable(data_all_corr, \n                    'retail_and_recreation_percent_change_from_baseline')","31d0b9a6":"corr_transform = pdp.PdPipeline([\n    pdp.ColDrop ({\n        'country_id', 'covid_date',\n        'retail_and_recreation_percent_change_from_baseline',\n        'parks_percent_change_from_baseline',\n        'transit_stations_percent_change_from_baseline',\n        'workplaces_percent_change_from_baseline',\n        'residential_percent_change_from_baseline'\n    })\n])\n\ndata_all_corr = corr_transform(data_all)\n\nheatmap_numeric_w_dependent_variable(data_all_corr, \n              'grocery_and_pharmacy_percent_change_from_baseline')","5a1cdd78":"corr_transform = pdp.PdPipeline([\n    pdp.ColDrop ({\n        'country_id', 'covid_date',\n        'retail_and_recreation_percent_change_from_baseline',\n        'grocery_and_pharmacy_percent_change_from_baseline',\n        'transit_stations_percent_change_from_baseline',\n        'workplaces_percent_change_from_baseline',\n        'residential_percent_change_from_baseline'\n    })\n])\n\ndata_all_corr = corr_transform(data_all)\n\nheatmap_numeric_w_dependent_variable(data_all_corr, \n                    'parks_percent_change_from_baseline')","80ca92d3":"corr_transform = pdp.PdPipeline([\n    pdp.ColDrop ({\n        'country_id',\t'covid_date',\n        'retail_and_recreation_percent_change_from_baseline',\t\n        'grocery_and_pharmacy_percent_change_from_baseline',\n        'parks_percent_change_from_baseline',\t\n        'workplaces_percent_change_from_baseline',\n        'residential_percent_change_from_baseline'\n    })\n])\n\ndata_all_corr = corr_transform(data_all)\n\nheatmap_numeric_w_dependent_variable(data_all_corr, \n                    'transit_stations_percent_change_from_baseline')","f5dd5934":"corr_transform = pdp.PdPipeline([\n    pdp.ColDrop ({\n        'country_id', 'covid_date',\n        'retail_and_recreation_percent_change_from_baseline',\t\n        'grocery_and_pharmacy_percent_change_from_baseline',\n        'parks_percent_change_from_baseline',\n        'transit_stations_percent_change_from_baseline',\n        'residential_percent_change_from_baseline'\n    })\n])\n\ndata_all_corr = corr_transform(data_all)\n\nheatmap_numeric_w_dependent_variable(data_all_corr, \n                    'workplaces_percent_change_from_baseline')","062219f0":"corr_transform = pdp.PdPipeline([\n    pdp.ColDrop ({\n        'country_id',\t'covid_date',\n        'retail_and_recreation_percent_change_from_baseline',\t\n        'grocery_and_pharmacy_percent_change_from_baseline',\n        'parks_percent_change_from_baseline',\n        'transit_stations_percent_change_from_baseline',\n        'workplaces_percent_change_from_baseline'\n    })\n])\n\ndata_all_corr = corr_transform(data_all)\n\nheatmap_numeric_w_dependent_variable(data_all_corr, \n                    'residential_percent_change_from_baseline')","dfddc111":"# dataset for clustering analysis\nclustering_gmt_df = google_mobility_df.groupby('country_id').mean().reset_index()\n\ndisplay(clustering_gmt_df.head())","6e10fa3e":"# build the clustering model\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import metrics\n\ndrop_country_pipe = pdp.PdPipeline([\n    pdp.ColDrop ({\n        'country_id'\n    })\n])\n\nX = drop_country_pipe(clustering_gmt_df)\n\nX = X.fillna(0)\n\nX = StandardScaler().fit_transform(X)","b8b6d49f":"# determine the best value for eps , using the approach in \n# https:\/\/towardsdatascience.com\/machine-learning-clustering-dbscan-determine-the-optimal-value-for-epsilon-eps-python-example-3100091cfbc\nneigh = NearestNeighbors(n_neighbors=2)\nnbrs = neigh.fit(X)\ndistances, indices = nbrs.kneighbors(X)\n\n# next, we sort and plot the results\ndistances = np.sort(distances, axis=0)\ndistances = distances[:,1]","250f0197":"fig = px.scatter(\n    distances, \n    title='Distance Curve')\nfig.update_xaxes(title_text='Distances')\nfig.update_yaxes(title_text='Distance threashold (espsilon)')\nfig.show()","1d76ab10":"# Compute DBSCAN\ndb = DBSCAN(eps=1.44, min_samples=8).fit(X)\ncore_samples_mask = np.zeros_like(db.labels_, dtype=bool)\ncore_samples_mask[db.core_sample_indices_] = True\nlabels = db.labels_\n\n# Number of clusters in labels, ignoring noise if present.\nn_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)\nn_noise_ = list(labels).count(-1)\n\nprint('Estimated number of clusters: %d' % n_clusters_)\nprint('Estimated number of noise points: %d' % n_noise_)\n\nprint(\"Silhouette Coefficient: %0.3f\"\n      % metrics.silhouette_score(X, labels))","46faa91f":"# Black removed and is used for noise instead.\nunique_labels = set(labels)\ncolors = [plt.cm.Spectral(each)\n          for each in np.linspace(0, 1, len(unique_labels))]\nfor k, col in zip(unique_labels, colors):\n    if k == -1:\n        # Black used for noise.\n        col = [0, 0, 0, 1]\n\n    class_member_mask = (labels == k)\n\n    xy = X[class_member_mask & core_samples_mask]\n    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=tuple(col),\n             markeredgecolor='k', markersize=14)\n\n    xy = X[class_member_mask & ~core_samples_mask]\n    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=tuple(col),\n             markeredgecolor='k', markersize=6)\n\nplt.title('Estimated number of clusters: %d' % n_clusters_)\nplt.show()","655c856b":"clustering_gmt_df['cluster'] = labels","8861dc96":"clustering_gmt_df.groupby('cluster').mean().reset_index()","5756cdf9":"print(clustering_gmt_df[clustering_gmt_df['cluster'] == -1]['country_id'].sort_values().values.tolist(), end=\" \")","d9cbc42b":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_samples, silhouette_score\n\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n\n# subset just two features in a dataframe for clustering analysis\ndrop_non_used_features_pipe = pdp.PdPipeline([\n    pdp.ColDrop ({\n        'country_id',\n        'retail_and_recreation_percent_change_from_baseline',\n        'grocery_and_pharmacy_percent_change_from_baseline',\n        'transit_stations_percent_change_from_baseline',\n        'workplaces_percent_change_from_baseline'\n    })\n])\n\ndim2_clustering_df = drop_non_used_features_pipe(clustering_gmt_df)\n\ndim2_clustering_df = dim2_clustering_df.fillna(0)\n\nX = StandardScaler().fit_transform(dim2_clustering_df)\n\nrange_n_clusters = [2, 3, 4, 5, 6]\n\nfor n_clusters in range_n_clusters:\n    # Create a subplot with 1 row and 2 columns\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    fig.set_size_inches(18, 7)\n\n    # The 1st subplot is the silhouette plot\n    # The silhouette coefficient can range from -1, 1 but in this example all\n    # lie within [-0.1, 1]\n    ax1.set_xlim([-0.1, 1])\n    # The (n_clusters+1)*10 is for inserting blank space between silhouette\n    # plots of individual clusters, to demarcate them clearly.\n    ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])\n\n    # Initialize the clusterer with n_clusters value and a random generator\n    # seed of 10 for reproducibility.\n    clusterer = KMeans(n_clusters=n_clusters, random_state=10)\n    cluster_labels = clusterer.fit_predict(X)\n\n    # The silhouette_score gives the average value for all the samples.\n    # This gives a perspective into the density and separation of the formed\n    # clusters\n    silhouette_avg = silhouette_score(X, cluster_labels)\n    print(\"For n_clusters =\", n_clusters,\n          \"The average silhouette_score is :\", silhouette_avg)\n\n    # Compute the silhouette scores for each sample\n    sample_silhouette_values = silhouette_samples(X, cluster_labels)\n\n    y_lower = 10\n    for i in range(n_clusters):\n        # Aggregate the silhouette scores for samples belonging to\n        # cluster i, and sort them\n        ith_cluster_silhouette_values = \\\n            sample_silhouette_values[cluster_labels == i]\n\n        ith_cluster_silhouette_values.sort()\n\n        size_cluster_i = ith_cluster_silhouette_values.shape[0]\n        y_upper = y_lower + size_cluster_i\n\n        color = cm.nipy_spectral(float(i) \/ n_clusters)\n        ax1.fill_betweenx(np.arange(y_lower, y_upper),\n                          0, ith_cluster_silhouette_values,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n\n        # Label the silhouette plots with their cluster numbers at the middle\n        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n\n        # Compute the new y_lower for next plot\n        y_lower = y_upper + 10  # 10 for the 0 samples\n\n    ax1.set_title(\"The silhouette plot for the various clusters.\")\n    ax1.set_xlabel(\"The silhouette coefficient values\")\n    ax1.set_ylabel(\"Cluster label\")\n\n    # The vertical line for average silhouette score of all the values\n    ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n\n    ax1.set_yticks([])  # Clear the yaxis labels \/ ticks\n    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n\n    # 2nd Plot showing the actual clusters formed\n    colors = cm.nipy_spectral(cluster_labels.astype(float) \/ n_clusters)\n    ax2.scatter(X[:, 0], X[:, 1], marker='.', s=30, lw=0, alpha=0.7,\n                c=colors, edgecolor='k')\n\n    # Labeling the clusters\n    centers = clusterer.cluster_centers_\n    # Draw white circles at cluster centers\n    ax2.scatter(centers[:, 0], centers[:, 1], marker='o',\n                c=\"white\", alpha=1, s=200, edgecolor='k')\n\n    for i, c in enumerate(centers):\n        ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1,\n                    s=50, edgecolor='k')\n\n    ax2.set_title(\"The visualization of the clustered data.\")\n    ax2.set_xlabel(\"Feature space for the 1st feature\")\n    ax2.set_ylabel(\"Feature space for the 2nd feature\")\n\n    plt.suptitle((\"Silhouette analysis for KMeans clustering on sample data \"\n                  \"with n_clusters = %d\" % n_clusters),\n                 fontsize=14, fontweight='bold')\n\nplt.show()","e0125490":"from sklearn.cluster import KMeans\n\nkmeans = KMeans(n_clusters=5)\nkmeans.fit(X)","da4ca821":"clusters = kmeans.predict(X)\ncentroids = kmeans.cluster_centers_","e4f41f43":"# assign the clustering labels\nclustering_gmt_df['cluster'] = clusters","c9960b66":"clustering_gmt_df.groupby('cluster').mean().reset_index()","1bf5c948":"print(clustering_gmt_df[clustering_gmt_df['cluster'] == 0]['country_id'].values.tolist(), end=\" \")","9aa1ce4b":"print(clustering_gmt_df[clustering_gmt_df['cluster'] == 1]['country_id'].values.tolist(), end=\" \")","f1594b05":"print(clustering_gmt_df[clustering_gmt_df['cluster'] == 2]['country_id'].values.tolist(), end=\" \")","c1e0503e":"print(clustering_gmt_df[clustering_gmt_df['cluster'] == 3]['country_id'].values.tolist(), end=\" \")","33ee0246":"print(clustering_gmt_df[clustering_gmt_df['cluster'] == 4]['country_id'].values.tolist(), end=\" \")","bff01764":"from sklearn.cluster import AgglomerativeClustering\nimport scipy.cluster.hierarchy as sch\n\n\ndendrogram = sch.dendrogram(sch.linkage(X, method='ward'))","ae4e8765":"model = AgglomerativeClustering(n_clusters=4, affinity='euclidean', linkage='ward')\nmodel.fit(X)\nlabels = model.labels_\n\ndisplay(labels)","0adf75c4":"# assign the clustering labels\nclustering_gmt_df['cluster'] = labels","adc9da08":"fig = px.scatter(\n    x=clustering_gmt_df['residential_percent_change_from_baseline'], \n    y=clustering_gmt_df['parks_percent_change_from_baseline'],\n    color=clustering_gmt_df['cluster'],\n    title='Agglomerative clusters')\nfig.update_xaxes(title_text='residential_percent_change_from_baseline')\nfig.update_yaxes(title_text='parks_percent_change_from_baseline')\nfig.update_layout(legend_title_text='Clusters')\nfig.show()","e53bfcfc":"clustering_gmt_df.groupby('cluster').mean().reset_index()","8a8557c5":"print(clustering_gmt_df[clustering_gmt_df['cluster'] == 0]['country_id'].values.tolist(), end=\" \")","93749a37":"print(clustering_gmt_df[clustering_gmt_df['cluster'] == 1]['country_id'].values.tolist(), end=\" \")","9e00d8e7":"print(clustering_gmt_df[clustering_gmt_df['cluster'] == 2]['country_id'].values.tolist(), end=\" \")","3be29de5":"print(clustering_gmt_df[clustering_gmt_df['cluster'] == 3]['country_id'].values.tolist(), end=\" \")","4748ca77":"Based on the histogram above, we can see that \n- the median of the deviation from the pre-pandemic trend for *parks_percent_change_from_baseline* visiting is -14% (accross all of the country\/observation date pairs within the observation interval)\n- there are extreme peak values on both ends of the distribution histogram (like -100% or +358%) that indicate the interesting edge cases to investigate in a country-by-country manner\n- we also see a bunch of outliers detected for *parks_percent_change_from_baseline* - it will be interesting to delve into such extreme deviations in the country-by-country manner down the road\n\nNow let's look at the top 20 countries where the largest deviations of *parks_percent_change_from_baseline* observed on any of the dates within the pandemy interval","500ab8d7":"#### Inspection of residential_percent_change_from_baseline","81d34a8e":"As we can see, only 2 countries - GW (Guinea-Bissau) and LI (Liechtenstein) - have some missing data for *workplaces_percent_change_from_baseline*, and the rest of the countries has no missing values for this feature. So we can conclude the overall quality of *workplaces_percent_change_from_baseline* data is quite good.\n\nBelow is the outlook on NA values for *residential_percent_change_from_baseline*","83a86b0e":"We can see that the countries below have the maximal extreme positive deviations of *workplaces_percent_change_from_baseline*","9d8d1bff":"As we can see, GW (Guinea-Bissau) and LI (Liechtenstein) lead the list of countries with missing values for *retail_and_recreation_percent_change_from_baseline*, and the third country to have some NAs for this feature is RE (R\u00e9union island, the French department in Indian ocean). So we can conclude the overall quality of *retail_and_recreation_percent_change_from_baseline* data is quite good.\n\nBelow is the outlook on NA values in *grocery_and_pharmacy_percent_change_from_baseline* by country","d8ce2a89":"##### The optimal value for *epsilon* will be found at the point of maximum curvature in the curve above. It looks like eps = 1.44.\n\nWe train our DBSCAN model, selecting 1.44 for eps and setting min_samples to 8.","1fdd7f4f":"## Correlations with residential_percent_change_from_baseline","bc521463":"Based on the histogram above, we can see that \n- the median of the deviation from the pre-pandemic trend for *office and workdplace area* visiting is -22% (accross all of the country\/observation date pairs within the observation interval)\n- there are extreme peak values on both ends of the distribution histogram (like -92% or +56%) that indicate the interesting edge cases to investigate in a country-by-country manner\n\nNow let's look at the top 20 countries where the largest deviations of *workplaces_percent_change_from_baseline* observed on any of the dates within the pandemy interval","3173a27e":"We find that\n\n- *residential_percent_change_from_baseline* has negative correlations with the rest of the Google Mobility Trend attributes - it draws a sense of wisdom here as the generic global lockdown and quarantine containment measures in the majority of the countries across the globe forced the populations to walk around their residential areas mainly while drastically reducing movements in other types of areas\n- *parks_percent_change_from_baseline*, surprisingly, does not show any strong correlations with other features; we can explain it by the strong global beliefs in the power of fresh air and natural resorts toward struggling with viral infrections (Covid-19 inclusive); despite many countries specifically enforced ban on parks and natural areas visits as a part of the lockdown restrictions, people ignored on the large scale (however, there is a subset of countries where park visits drop was really dramatic - we are going to review it down the road below)\n- the rest of Google Mobility Trend attributes displayed strong pair correlations that is in line with the common sense intuition - the global lockdown restrictions should have resulted in drop in visits\/moves around all of the areas except the residential ones","a2aaddca":"# Getting World Population Charts\nIn order to build certain useful COVID-19 pandemic features (like infection rate, mortality rate from COVID-19), we will have to obtain the country population data.\n\nIn this case, we are going to use World Bank's world population data as of the end of 2018 as uploaded to BigQuery Public Datasets area (bigquery-public-data:world_bank_global_population dataset)","a847c515":"Now we are going to review the list of countries fitting into the core cluster 1 (*'mobility conservatives'*):","175a1b2e":"Now let's look at the top 20 countries where the smallest deviations of *parks_percent_change_from_baseline* observed on any of the dates within the pandemy interval","0f2dfd82":"**Note:** To learn more about the dataset, please refer to the data documentation on Google site: https:\/\/www.google.com\/covid19\/mobility\/data_documentation.html","c05be94b":"We are going to review the list of countries fitting into the core cluster 0 (*'mobility parkoholic liberals'*):","4094b23f":"As we can see, there are extreme cases of both the drastic decrease and drastic increase in the certain types of people mobility during the COVID-19 pandemic\/quarantine. So it would be nice to explore it in more details down the road.\n\nLet's now look at the mean values of each trend attribute by countries","f92f22cb":"We find that there is a bunch of auto-correlations between *confirmed* cases and a number of derived lag features. Namely, the following feature variables show strong correlations with _confirmed_ cases\n\n- deaths\n- recovered\n- confirmed_ema\n- deaths_ema\n- Lag_confirmed_1\n- Lag_confirmed_2\n- Lag_confirmed_3\n- Lag_confirmed_4\n- Lag_confirmed_5\n- Lag_confirmed_6\n- Lag_deaths_1\n- Lag_deaths_2\n- Lag_deaths_3\n- Lag_deaths_4\n- Lag_deaths_5","5e0076c3":"We can see that the countries below have the maximal extreme negative deviations of *grocery_and_pharmacy_percent_change_from_baseline*","77fc9e2d":"Now we are going to review the list of countries fitting into the core cluster 3 (*'mobility workaholic democrates'*):","150327ac":"# Preface\n\nThis notebook is focused on\n\n* exhaustive EDA of COVID-19 pandemic metrics\n* exhaustive EDA of Google Mobility Trends dataset\/metrics (in the evidence of COVID-19 pandemic, collected and updated regularly since Feb 15, 2020)\n* correlation of COVID-19 pandemic metrics (confirmed, deaths, recovered and the derivative trend and lag metrics) with the mobility trend metrics\n\n**Note:** In the scope of the current data analytics effort, we are going to analize Google Mobility Trends on the national level, without breaking the analysis down by country regions\/provinces.","5379fc7c":"We will see the specific charactericstics of the clusters, in terms of Google Mobility Trend averages:","0e8e5d78":"We will see the specific charactericstics of the clusters, in terms of Google Mobility Trend averages:","9e0fc4f3":"As we can see, *residential_percent_change_from_baseline* has the biggest amount of NAs within the dataset attributes yet none of the features has the ratio of NaNs exceeding 10% of the population (which is definitely an indicator of a reasonably good quality of the input data, from NaN perspective).\n\nAfter it, let's review the distribution of NA values by country.","1ea7b816":"Now we are going to look at the countries in *cluster 1*:","9d2579a7":"We can see that the countries below have the maximal extreme negative deviations of *parks_percent_change_from_baseline*","eab89833":"We are going to fetch the aggregated data from it with the columns described below\n\n<table>\n<thead>\n<td>Field name<\/td><td>Type<\/td><td>Mode<\/td><td>Description<\/td>\n<\/thead>\n<tr>\n<td>country_region_code<\/td><td>STRING<\/td><td>NULLABLE<\/td>\n<td>2 letter alpha code for the country\/region in which changes are measured relative to the baseline. These values correspond with the ISO 3166-1 alpha-2 codes<\/td>\n<\/tr>\n<tr>\n<td>country_region<\/td><td>STRING<\/td><td>NULLABLE<\/td>\t\n<td>The country\/region in which changes are measured relative to the baseline<\/td>\n<\/td>\n<tr>\n<td>covid_date<\/td><td>DATE<\/td><td>NULLABLE<\/td><td>\nChanges for a given date as compared to baseline. Baseline is the median value, for the corresponding day of the week, during the 5-week period Jan 3\u2013Feb 6, 2020.<\/td>\n<\/tr>\n<tr>\n<td>retail_and_recreation_percent_change_from_baseline<\/td><td>INTEGER<\/td><td>NULLABLE<\/td><td>Mobility trends for places like restaurants, cafes, shopping centers, theme parks, museums, libraries, and movie theaters.<\/td>\n<\/tr>\n<tr>\n<td>grocery_and_pharmacy_percent_change_from_baseline<\/td><td>INTEGER<\/td><td>NULLABLE<\/td><td>Mobility trends for places like grocery markets, food warehouses, farmers markets, specialty food shops, drug stores, and pharmacies.<\/td>\n<\/tr>\n<tr>\n<td>parks_percent_change_from_baseline<\/td><td>INTEGER<\/td><td>NULLABLE<\/td><td>Mobility trends for places like local parks, national parks, public beaches, marinas, dog parks, plazas, and public gardens.<\/td>\n<\/tr>\n<tr>\n<td>transit_stations_percent_change_from_baseline<\/td><td>INTEGER<\/td><td>NULLABLE<\/td><td>Mobility trends for places like public transport hubs such as subway, bus, and train stations.<\/td>\n<\/tr>\n<tr>\n<td>workplaces_percent_change_from_baseline<\/td><td>INTEGER<\/td><td>NULLABLE<\/td><td>Mobility trends for places of work.<\/td>\n<\/tr>\n<tr>\n<td>residential_percent_change_from_baseline<\/td><td>INTEGER<\/td><td>NULLABLE<\/td><td>Mobility trends for places of residence.<\/td>\n<\/tr>\n<\/table>","b7e54b38":"We can observe medium negative correlations ( <= -0.2) between *retail_and_recreation_percent_change_from_baseline* and a number of COVID-19 pandemic spread features\n\n- mortality_factor (-0.27)\n- case_fatality_rate","5ac4f4b3":"The worldwide history of the Changes in Residential Area Visits is displayed below","346fe8d0":"Now let's look at the top 20 countries where the smallest deviations of *transit_stations_percent_change_from_baseline* observed on any of the dates within the pandemy interval","6747f63f":"As we can see, the same 3 countries have some missing data for *grocery_and_pharmacy_percent_change_from_baseline*, and the rest of the countries has no missing values for this feature. So we can conclude the overall quality of *grocery_and_pharmacy_percent_change_from_baseline* data is quite good.\n\nBelow is the outlook on NA values in *parks_percent_change_from_baseline* by country","fd2a4133":"Based on the histogram above, we can see that \n- the median of the deviation from the pre-pandemic trend for *residential_percent_change_from_baseline* visiting is +12% (accross all of the country\/observation date pairs within the observation interval)\n- there are extreme peak values on both ends of the distribution histogram (like -7% or +55%) that indicate the interesting edge cases to investigate in a country-by-country manner\n- there is a bunch of outliers detected for *residential_percent_change_from_baseline*, which is also interesting to delve into down the road\n\nNow let's look at the top 20 countries where the largest deviations of *transit_stations_percent_change_from_baseline* observed on any of the dates within the pandemy interval","1428416b":"We will see the specific charactericstics of the clusters, in terms of Google Mobility Trend averages:","a0731f22":"# Correlation Between COVID-19 Pandemic Attirbutes and Google Mobility Trend Features\n\nFirst of all, we will merge the dataframes with the COVID-19 pandemic attributes and Google Mobile Trend features into a single dataframe.","439f449d":"Now we assign the clustering labels to the countries","4a895a0f":"Based on the histogram above, we can see that \n- the median of the deviation from the pre-pandemic trend for *retail and recreation area* visiting is -31,25% (accross all of the country\/observation date pairs within the observation interval)\n- there are extreme peak values on both ends of the distribution (like -98.33% or +60%) that indicate the interesting edge cases to investigate in a country-by-country manner","e0763b19":"Now we are going to look at the countries in *cluster 2*:","28c8628b":"Based on the histogram above, we can see that \n- the median of the deviation from the pre-pandemic trend for *grocery_and_pharmacy_percent_change_from_baseline* visiting is -11% (accross all of the country\/observation date pairs within the observation interval)\n- there are extreme peak values on both ends of the distribution histogram (like -98.5% or +85%) that indicate the interesting edge cases to investigate in a country-by-country manner\n- we also see a bunch of outliers detected for *grocery_and_pharmacy_percent_change_from_baseline* - it will be interesting to delve into such extreme deviations in the country-by-country manner down the road\n\nNow let's look at the top 20 countries where the largest deviations of *grocery_and_pharmacy_percent_change_from_baseline* observed on any of the dates within the pandemy interval","b69000ba":"Now we will melt and transform the canonic time series data into a long-form dataframes","75ac44f7":"Now we are going to determine the best value for *eps* (the observation distance threashold), using the approach explained in \nhttps:\/\/towardsdatascience.com\/machine-learning-clustering-dbscan-determine-the-optimal-value-for-epsilon-eps-python-example-3100091cfbc\n","4faa75df":"The worldwide history of the Changes in Park Visits is displayed below","401eb333":"We can see that the countries below have the maximal extreme positive deviations of *residential_percent_change_from_baseline*","9d4be617":"As we can see, there 10 countries with missing data for *residential_percent_change_from_baseline* feature (with GW (Guinea-Bissau), RE (Reunion Island) and LI (Liechtenstein) leading the charts, again). So the quality of data for this feature is a little worse then for the rest of the features in the dataset (yet still good enough).\n\n**Missing Data Summary**\n\nAs we can see, the Google Trends data are inconsistent for three countries below\n\n- LI\n- GW\n- RE\n\nIn addition to it, there is a number of contries with a small number of missing values for *residential_percent_change_from_baseline*, as per the list below\n\n- AG\n- AW\n- CV\n- PG\n- BZ\n- BB\n- LU\n\nWe can also see the lack of data for several countries (China, Northen Korea etc.) in Google Mobility Trends dataset (due to some legal restrictions or complex technical issues, most probably).\n\nFor the rest of the countries all 6 attributes from Google Mobility Trends dataset are fully supplied.\n\n**Note**: The information for Russia and Ukraine have been added quite recently, sometime after Jun 10, 2020 (which is definitely a good indicator)","867c82e5":"# Getting and Pre-processing COVID-19 Pandemic Data\u00b6\nWe will load public open data about Novel Coronavirus (COVID-19) Cases, provided by JHU CSSE (https:\/\/systems.jhu.edu\/research\/public-health\/ncov\/), as per their online repository at https:\/\/github.com\/CSSEGISandData\/COVID-19 (updated daily)","e5fe96a5":"Now we are going to assign the clusters back to the dataframe of countries","11913e0b":"Based on the histogram above, we can see that \n- the median of the deviation from the pre-pandemic trend for *transit_stations_percent_change_from_baseline* visiting is -38% (accross all of the country\/observation date pairs within the observation interval)\n- there are extreme peak values on both ends of the distribution histogram (like -100% or +37%) that indicate the interesting edge cases to investigate in a country-by-country manner\n\nNow let's look at the top 20 countries where the largest deviations of *transit_stations_percent_change_from_baseline* observed on any of the dates within the pandemy interval","1c55823b":"As we can see, as of the time of running the latest session for this notebook (Jun 13, 2020), it computed one dense cluster and a number of noise points (countries with the outstanding average mobility trend patterns).\n\n**Note**: the result is drastically changed from Jun 12 where the best computation displayed 2 cluster plus a bunch of noise data. It can be explained by the major data update happened on Google end.\n\nNow we are going to assign the clustering labels back to the countries to see what it looks like.","e3a144c9":"We find that the following feature variables display the strong and mediumm correlation with the number of _recovered_ cases\n\n- confirmed\n- deaths              \n- Lag_confirmed_1\n- Lag_confirmed_2\n- Lag_confirmed_3\n- Lag_confirmed_4\n- Lag_confirmed_5\n- Lag_confirmed_6\n- Lag_deaths_1\n- Lag_deaths_2\n- Lag_deaths_3\n- Lag_deaths_4\n- Lag_deaths_5\n- Lag_deaths_6\n- Lag_recovered_1\n- Lag_recovered_2\n- Lag_recovered_3\n- Lag_recovered_4\n- Lag_recovered_5\n- Lag_recovered_6\n- confirmed_ema\n- deaths_ema\n- recovered_ema","4013b378":"# Clustering Countries by Google Mobility Trend Patterns\n\nThe purpose of the clustering experiments  is to try to find the informative clustering of countries by certain patterns in their Google Mobile Trend statistics. If a relevant clustering calculated\/found, it will add an edge to \n\n- grouping countries with similar Google Mobility Trend behaviour\n- analizing the impact of COVID-19 pandemic in each country group\n- providing the ground to use Google Mobility Trend-based clustering in future ML efforts to predict the pandemic spread in a cluster-then-predict setup\n\nIn the sections below, we are going to undertake two basic experiments\n\n- clustering in the entire (highly diminsional) space of numeric Google Mobility Trend features\n- 2-dimensional clustering in ( *residential_percent_change_from_baseline* - *parks_percent_change_from_baseline* ) space, using KMeans clustering approach\n- \n\n## Higly-dimensional Clustering Experiment\n\nIn this mini-research, we are going to use all of 6 numeric features in Google Mobility Trend dataset.\n\nAs we are going to operate in a 6-dimensional space to cluster countries by Google Mobility Trend attributes, we will use the motivation conveyed by https:\/\/towardsdatascience.com\/how-to-cluster-in-high-dimensions-4ef693bacc6 to use DBSCAN as a clustering algorithm.\n\nFirst of all, we will prepare the dataset for the clustering analysis by calculating mean values of each Google Mobile Trend by countries.","147f90e9":"Looking at the dendrogram, the highest vertical distance that doesn\u2019t intersect with any clusters is the top cyan one. Given that, the optimal number of clusters is 4.\n","38fa4f78":"## Correlations with grocery_and_pharmacy_percent_change_from_baseline","970cfbe6":"We can also tell the additional story behind the calculated clusters as follows\n\n- Cluster 2 (*'country with messy data'*) is identic to the noise bucket calculated by DBSCAN in the previous experiment above (it contains Guinea-Bissau (GW) and Reunion Island (RE))\n- Cluster 0 and 3 (*'mobility liberals'*) contain both the countries with the less stressful mobility restrictions during their lockdown periods; however, we can see both the countries considered to be more successful in the pandemic containment (like Germany or Austria) as well as less successful ones (like USA, Canada, Greece etc.)\n- Cluster 1 (*'mobility conservatives'*) contains both the countries with the less stressful mobility restrictions during their lockdown periods; however, we can see both the countries considered to be more successful in the pandemic containment (like United Arabian Emirates) as well as less successful ones (like Italy etc.)\n- In general, this clustering options adds more analytical edge vs. DBSCAN clustering experiment above\n- The fact that both nominated-to-be-successful and nominated-to-be-less-then-successful countries (by expert epidemiologist appraisal) are mixed in the clusters supports the intelligence we draw in the correlation analysis above - it looks like Google Mobility Trend featuers cannot be good predictors \/ success indicators to individual countries\/national states being effective in COVID-19 pandemy containment\n\nAnyway, taking the insights from this clustering experiment can be fruitful in the future in-depth per-country investigations.","9ff40ac2":"Now let's look at the top 20 countries where the smallest deviations of *retail_and_recreation_percent_change_from_baseline* observed on any of the dates within the pandemy interval","10bfbbea":"As we can see, only 2 countries - GW (Guinea-Bissau) and LI (Liechtenstein) - have some missing data for *transit_stations_percent_change_from_baseline*, and the rest of the countries has no missing values for this feature. So we can conclude the overall quality of *transit_stations_percent_change_from_baseline* data is quite good.\n\nBelow is the outlook on NA values for *workplaces_percent_change_from_baseline*","7ad82fe1":"### Individual Feature Inspection","2abdc0ab":"As we can see, the noise bucket contains Denmark (DK) and Sweden (SE) that have been highly criticised for the lack of strong lockdown measures in containing Covid-19 spread. Two other bucket 'members' are Guinea-Bissau (GW) and Reunion Island (RE)","a9cd7208":"We can see that the countries below have the maximal extreme positive deviations of *transit_stations_percent_change_from_baseline*","80df4ecb":"We are going to draw the correlation charts for basic pandemic features we just generated\n\n## General Correlations","2b464350":"### Correlation Analysis of Google Mobile Trend Features\n\nWe will check the correlation of the numeric variables globally","8b51fb06":"We can interpret the computed clustes as follows\n\n- cluster with index -1 (noisy countries without affirmative DBSCAN cluster labelling): intensively visiting parks (despite the lockdown restrictions), smaller reduction in *retail_and_recreation_percent_change_from_baseline*, smaller increase in *residential_percent_change_from_baseline*, and greater reduction in the rest of attributes vs. the core cluster\n- cluster with index 0: core countries cluser\n\nThe fact of the core cluster to contain almost alll of the globe (as of Jun 13, 2020) confirms the earlier drawn intelligence as for the google mobility trends relations with the COVID-19 pandemic features. Since the core cluster contains both the countries considered to be excellent in the pandemic containment (like Germany) and ones with the poor conduct (like Brazil or India), it can be regarded to as another proof of the google mobility trends not showing strong correlation \/ having direct impact on the COVID-19 pandemic statistics.","1083c946":"We can see that the countries below have the maximal extreme negative deviations of *retail_and_recreation_percent_change_from_baseline*","8a044a1b":"We can observe medium negative correlations ( <= -0.2) between *parks_percent_change_from_baseline* and a number of COVID-19 pandemic spread features\n\n- mortality_factor (-0.24)","82258433":"Let's see the top countries where the most of NA values in *retail_and_recreation_percent_change_from_baseline* attribute are present","4ec8f7f6":"We can observe medium negative correlations ( <= -0.2) between *transit_stations_percent_change_from_baseline* and a number of COVID-19 pandemic spread features\n\n- mortality_factor (-0.3)\n- case_fatality_rate","9b0ac9f5":"## Adding Additional Pandemic Features and Country Population","985038a0":"## Basic Google Mobility Trends Review\n\nAfter we fetched the data from BigQuery, let's take a look at some basic mobile trend data.\n\nThe structure of the mobile trend data is described below","454e1e46":"Worldwide history of changes in Retail and Recreation Area Visits is displayed below","15203fc9":"# Google Mobility Trend Data\n\nWe are going to extract aggregated Google Mobility trend report data from a public dataset in BigQuery (namely, **bigquery-public-data.covid19_google_mobility** dataset, **mobility_report** table)","d829dd3d":"We can observe medium negative correlations ( <= -0.2) between *workplaces_percent_change_from_baseline* and a number of COVID-19 pandemic spread features\n\n- mortality_factor (-0.23)\n- case_fatality_rate","518a2a07":"#### Inspection of grocery_and_pharmacy_percent_change_from_baseline","3a7c4a92":"We can observe medium negative correlations ( <= -0.2) between *grocery_and_pharmacy_percent_change_from_baseline* and a number of COVID-19 pandemic spread features\n\n- mortality_factor (-0.3)","4f4fe004":"## 2-dimensional clustering in ( *residential_percent_change_from_baseline* - *parks_percent_change_from_baseline* ) space\n\nAs manifested by the correlation analysis above, *residential_percent_change_from_baseline* and *parks_percent_change_from_baseline* features can draw interesting analytical insights on various mobility patterns adopted in different countries across the globe.\n\nReducing the clustering feature space to 2 will allow for more relevant utilization of Euclidian distance-based clustering algorithms (like KMeans clustering).\n\nHowever, the weak side of such algorithms is a certain voluntarism of a researcher in specifying the number of target clusters to be calculated by the analytical software before the actual analysis started. Thus the final clustering composition is very sensitive to the decision on the number of clusters to calculate (and thus the real analytical edge of the clustering composition could be less then useful).\n\nTo mitigate such a risk, we are going to put some data-driven ground into selection of a number of clusters to calculate for our current KMeans clustering experiment, using so called *'silhouette analysis'* (as explained in https:\/\/scikit-learn.org\/stable\/auto_examples\/cluster\/plot_kmeans_silhouette_analysis.html)","2402cae5":"We find that there is a bunch of auto-correlations between fatal cases (*deaths*) and a number of derived lag\/trend features. Namely, the following feature variables show strong correlations with _deaths_ cases\n\n- confirmed\n- recovered\n- Lag_confirmed_1\n- Lag_confirmed_2\n- Lag_confirmed_3\n- Lag_confirmed_4\n- Lag_confirmed_5\n- Lag_deaths_1\n- Lag_deaths_2\n- Lag_deaths_3\n- Lag_deaths_4\n- Lag_deaths_5\n- Lag_deaths_6\n- Lag_recovered_1\n- Lag_recovered_2\n- Lag_recovered_3\n- Lag_recovered_4\n- Trend_confirmed_1\n- Trend_deaths_1\n- Trend_deaths_5\n- Trend_deaths_6\n- confirmed_ema\n- deaths_ema\n- recovered_ema\n- mortality_rate","3064a566":"### Missing Values\n\nFirst of all, we will review the number of missing values (NAs) in each attributes of Google Mobility Trend dataset","22b0ca54":"Finally, we are going to plot the clustering results","035e2e90":"After we get the World Bank's population data from BigQuery, we replace the alpha 3 country codes with the canonical country names, to make it ready for the merge with COVID-19 pandemics dataset","e8fc6695":"Now we are going to review the list of countries fitting into the core cluster 2 (*'remote countries with messy data'*):","4558476d":"The silhouette plot shows that the n_clusters value of 2, 3, and 4 are a bad pick for the given data due to the presence of clusters with below average silhouette scores and also due to wide fluctuations in the size of the silhouette plots. \n\nHowever, Silhouette analysis is more inclined to recommend computing 5 or 6 clusters on our dataset.\n\nAlso from the thickness of the silhouette plot the cluster size can be visualized. \n\nNow, we are going to apply *KMean clustering* with *5* clusters to compute on our feature space dataset.","bcb5fa07":"Now we will further transform the data as well as put them into the single dataframe","37d07f6f":"## Correlation Analysis Take-Aways\n\nAs we find out, none of Google Mobility Trend features demonstrate any strong correlation with any of the COVID-19 pandemic features. It is an essential take-away it clearly shows lack of strong impact of the changes in human behaviour \/ population mobility trends on actual spread of and mortality from COVID-19.\n\nThere are different drivers explaining COVID-19 pandemic statistics outside the mobility trend features.\n\nAnother policy-related take-away is we cannot draw any data-driven intelligence on the statistically proven positive effect of mobility limitations (after the quarintine \/ lockdown containment measures launched across the globe.","e50debba":"## Correlations with retail_and_recreation_percent_change_from_baseline","1b2a9e17":"The worldwide history of the Changes in Grocery and Pharmacy Visits is displayed below","94452b3e":"Now let's look at the top 20 countries where the smallest deviations of *transit_stations_percent_change_from_baseline* observed on any of the dates within the pandemy interval","9f9c912a":"We can see that the countries below have the maximal extreme negative deviations of *workplaces_percent_change_from_baseline*","51d1afc0":"As we can see, the same 3 countries have some missing data for *parks_percent_change_from_baseline*, and the rest of the countries has no missing values for this feature. So we can conclude the overall quality of *parks_percent_change_from_baseline* data is quite good.\n\nBelow is the outlook on NA values for *transit_stations_percent_change_from_baseline* ","8924b0d7":"## Adding Exponential Moving Averages","312b73d3":"Now we are going to look at the countries in *cluster 0*:","0f97e825":"## More Detailed Outlook on Correlations with Deaths","cacb7ef5":"## Correlations with workplaces_percent_change_from_baseline","e462c32c":"#### Inspection of retail_and_recreation_percent_change_from_baseline","ef2e4db2":"Now we can plot the clusters calculated","1a246a1f":"#### Inspection of parks_percent_change_from_baseline","b232e061":"We can see that the countries below have the maximal extreme positive deviations of *parks_percent_change_from_baseline*","120ada69":"## Basic EDA of Mobility Trend Data","4d2ed925":"## More Detailed Outlook on Correlations with Deaths","fac77f90":"#### Inspection of workplaces_percent_change_from_baseline inspection\n\nFirst of all, let's check the distribution of this variable via its histogram","be00e3c3":"The date range covered by the current COVID-19 dataset is as follows","46df7df4":"# Future Research Directions\n\nThe reseach displayed by this notebook is by no mean complete. We are going to extend it soon.\n\nThe extension directions are envisioned as follows\n\n1. more specific case studies for per-country mobility dynamics (with focus on European countries, Japan, Singapore, and possibly Russia)\n2. additional analysis as for the correlation between the mobility trend changes and initial charts of economic slow-down caused by the quarantine\/pandemic lockdown\n3. providing more detailed story telling on the history of mobility trend changes over time, with some of the spikes per countries to be explained","763fe085":"Then we learn the cluster labels","15965f0d":"# Data Sources\n\n1.   JHU CoronaVirus Dataset: https:\/\/github.com\/CSSEGISandData\/COVID-19\n2.   Google Mobility Trends dataset for COVID-19 pandemy time (since Feb 15, 2020) is maintained in Big Query Public Data project (namely, in *bigquery-public-data.covid19_google_mobility* dataset)\n3.   World Bank's World Population Data as of the end of 2018 (extracted from Big Query Public Data project, *bigquery-public-data:world_bank_global_population dataset*)","523bb7b6":"The worldwide history of the Changes in Park Visits is displayed below","2e337fa8":"Now we are going to look at the countries in *cluster 3*:","17b60833":"## Correlations with transit_stations_percent_change_from_baseline","f005b790":"As we see, there is a statistically significant difference between the countries in each cluster. We can interpret the computed clustes as follows\n\n- cluster 0: *'mobility centrists'* (the trend changes in between the outher clusters below)\n- cluster 1: *'mobility workaholic liberals'* (the biggest drops in terms of *retail_and_recreation_percent_change_from_baseline*,   *parks_percent_change_from_baseline* and\t*workplaces_percent_change_from_baseline*; the second biggest drop in *grocery_and_pharmacy_percent_change_from_baseline*,and *transit_stations_percent_change_from_baseline*; the biggest increase in *residential_percent_change_from_baseline*)\n- cluster 2: *'countries with messy data'* (bigger drops in *retail_and_recreation_percent_change_from_baseline*, *grocery_and_pharmacy_percent_change_from_baseline*, *transit_stations_percent_change_from_baseline*, and\t*workplaces_percent_change_from_baseline* vs. cluster 0; outstanding increase in *parks_percent_change_from_baseline*; messy data in *residential_percent_change_from_baseline*)\n- cluster 3: *'mobility concervatives'* (moderate drop in *retail_and_recreation_percent_change_from_baseline*, *grocery_and_pharmacy_percent_change_from_baseline*, and *transit_stations_percent_change_from_baseline* - only countries in *cluster 0* display the smaller drop; smallest drop in *workplaces_percent_change_from_baseline* vs. the rest of the clusters; quite a small drop in *parks_percent_change_from_baseline*; smaller increase in *residential_percent_change_from_baseline* - only countries in *cluster 0* display the smaller increase)\n- cluster 4: *'mobility parkoholic liberals'* (the lowest drops in terms of *retail_and_recreation_percent_change_from_baseline*, *grocery_and_pharmacy_percent_change_from_baseline*, *transit_stations_percent_change_from_baseline*, and\t*workplaces_percent_change_from_baseline*; huge increase in *parks_percent_change_from_baseline*; moderate increase in *residential_percent_change_from_baseline*)\n","ad14d3bd":"We can observe medium positive correlations (> 0.2 ) between *residential_percent_change_from_baseline* and a number of COVID-19 pandemic spread features\n\n- mortality_factor (0.29)\n- case_fatality_rate","b07be10f":"Now let's look at the top 20 countries where the largest deviations of *retail_and_recreation_percent_change_from_baseline* observed on any of the dates within the pandemy interval","6c80a1f0":"Now let's look at the top 20 countries where the smallest deviations of *workplaces_percent_change_from_baseline* observed on any of the dates within the pandemy interval","cb38c336":"We can see that the countries below have the maximal extreme positive deviations of *retail_and_recreation_percent_change_from_baseline*:","d17007e4":"We can see that the countries below have the maximal extreme negative deviations of *residential_percent_change_from_baseline*","3994fcd7":"Now we are going to compute the DBSCAN clusters. Let's import neccessary packages as well as initialize the auxiliary objects to be used down the road","81c63533":"Now we are going to review the list of countries fitting into the core cluster 4 ('mobility centrists'):","987f56b7":"## Correlations with parks_percent_change_from_baseline","1a55d8a8":"Let's describe the basic stat characteristics of the mobility trends data","9f39387d":"#### Inspection of transit_stations_percent_change_from_baseline","c6c456d5":"# COVID-19 Pandemic Feature Enrichment\n\nTo the major extent, the feature engineering flow below is inspired by the ideas in https:\/\/www.kaggle.com\/twhelan\/code-to-create-an-enriched-dataset\n\nOn top of the abvoe-mentioned feature engineering inspirations, I added Exponential Moving Average features.\n\n## Basic clean-up, dates, lag, and trend features","45b9ec86":"# Correlation of the basic pandemic features","dd215ce5":"We can see that the countries below have the maximal extreme positive deviations of *grocery_and_pharmacy_percent_change_from_baseline*","f00f0e87":"The worldwide history of the Changes in Workplace and Office Center Visits is displayed below","f22da571":"## More Detailed Outlook on Correlations with Confirmed","dcfbd3fe":"We are going to review the list of the countries in the noisy bucket (cluster with the index -1):","44c77872":"We can see that the countries below have the maximal extreme negative deviations of *parks_percent_change_from_baseline*","c8e2c99d":"Now let's look at the top 20 countries where the smallest deviations of *grocery_and_pharmacy_percent_change_from_baseline* observed on any of the dates within the pandemy interval","63669a6b":"## Agglomerative clustering in 2-dimensional clustering in ( *residential_percent_change_from_baseline* - *parks_percent_change_from_baseline* ) space\n\nAs we could see, 2-dimensional clustering in ( *residential_percent_change_from_baseline* - *parks_percent_change_from_baseline* ) space could yield a good and meaningful country clustering separation.\n\nWe would like to try one more clustering approach where upfrount assumptions on the number of clustering are not required. Namely, the intetion is to implement the agglomerative clustering. Agglomerative clustering is one of the hierarchical clustering methods widely used in practical ML projects (you can refer to https:\/\/towardsdatascience.com\/machine-learning-algorithms-part-12-hierarchical-agglomerative-clustering-example-in-python-1e18e0075019 to see one of the good example-based case studies on agglomerative clustering).\n"}}