{"cell_type":{"161428d9":"code","b358b1c0":"code","adaccfb6":"code","221bc131":"code","43745094":"code","22c53c85":"code","b3eb2c63":"code","1f9c9814":"code","e9a3eec7":"code","86a8113e":"code","cb89378e":"code","afc19083":"code","08baf306":"code","26426901":"code","687ca43e":"code","247f212a":"code","a431e585":"code","030a1ca8":"code","ee8c9019":"code","70bf92a9":"code","c539c3c3":"code","797cf648":"code","54ca647a":"code","dd90e257":"code","d4461cdd":"code","fb1a8f5b":"code","30eaeb8d":"code","f24ebb05":"code","49b5b87d":"code","1ec78820":"code","7982c1d5":"code","b4def2a1":"code","1a999e77":"code","bc750c9d":"code","e9d919e8":"code","f666091a":"code","f893bd5f":"code","ee922414":"code","632d146e":"code","bf9cbdf5":"code","7171920c":"code","a5c8ad63":"code","1458499c":"code","95417bbd":"code","fbb4947b":"code","5bd063b5":"code","62b521b0":"code","041c037c":"code","7d2b06b9":"code","8423e71a":"code","bc9f337c":"code","9ab1dea4":"code","21a8adc6":"code","b285df60":"code","b4248c83":"code","6f23d5fe":"code","8aa8f4d5":"code","a98feb87":"code","78003ee1":"code","0b222a82":"code","d9b2759a":"code","87c47e52":"code","67ec4778":"code","e022274e":"code","fddd8306":"code","0a0f7b83":"code","b510b185":"code","07019b0a":"code","4f6fd153":"code","2ff28fbb":"code","9d4abbce":"code","ca53f960":"code","fd997698":"code","86a98ab0":"code","ce3fbb1a":"code","f95a8ce6":"code","18023249":"code","986b6961":"code","7e375ec3":"code","a50eb0c4":"code","ebd6f1ac":"code","f8275288":"code","0af18ff6":"code","8fe3f6d1":"code","d503e5b5":"code","767352e8":"code","59ff196d":"code","d65d72e7":"code","4385f479":"code","bb89f1e1":"code","74023474":"code","312386ec":"code","524c5e8d":"code","8bfe5e6f":"code","529c5c73":"code","0579ddae":"code","72d3dfb7":"code","5704c82d":"code","b5d6a0fe":"code","ce50a778":"code","7d894928":"code","a2045c7b":"code","60d8908b":"code","ea7bd1ea":"code","a2128f8a":"code","aa29ac64":"code","0f8322d9":"code","e16b1874":"code","003e21bd":"code","5ac5cbfb":"code","03bed162":"code","77370ce6":"code","fccf778e":"code","1cc1622f":"code","5ea4e651":"code","e29e73aa":"code","2870ce91":"code","8057a080":"code","e2a7beab":"code","68ca0bce":"code","37e9010a":"code","269bd5b3":"code","4c95e4ac":"code","5a9751c8":"code","dd4fe651":"code","f1101bb7":"code","40b52030":"code","ecefb13d":"code","0b8dd1f9":"code","95bd1e6c":"code","4e921a26":"code","bf36e03e":"markdown","fbbce914":"markdown","6b539341":"markdown","e1bdfe2e":"markdown","66837581":"markdown","ab8c9313":"markdown","0421a836":"markdown","c90940f6":"markdown","b3460b4a":"markdown","8257ee5e":"markdown","ff69a733":"markdown","0600ce88":"markdown","8b9946ec":"markdown","d6d4e8c4":"markdown","de948a6f":"markdown","04c48f9a":"markdown","4fd9f177":"markdown","75f63b06":"markdown","24892457":"markdown","c8456189":"markdown","970fd168":"markdown","eacd4ed3":"markdown","09752ef9":"markdown","66e8081d":"markdown"},"source":{"161428d9":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt","b358b1c0":"df = pd.read_csv(\"..\/\/input\/\/telco-customer-churn\/\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\ndf.head()","adaccfb6":"df.info()","221bc131":"df.shape","43745094":"## to view all the columns\ndf.head().T","22c53c85":"## making the data uniform by doing lowercase and removing the spaces\ndf.columns = df.columns.str.lower().str.replace(' ','_')\ncategorical_columns = list(df.dtypes[df.dtypes=='object'].index)\n\nfor c in categorical_columns:\n    df[c]=df[c].str.lower().str.replace(' ','_')\n    \ndf.head().T","b3eb2c63":"df.dtypes","1f9c9814":"tc = pd.to_numeric(df.totalcharges,errors='coerce')\ndf[tc.isnull()][['customerid','totalcharges']]","e9a3eec7":"## filling the missing value with zero \ndf.totalcharges = pd.to_numeric(df.totalcharges,errors='coerce')\ndf.totalcharges = df.totalcharges.fillna(0)","86a8113e":"## Converting yes and no to numbers\ndf.churn = (df.churn == 'yes').astype(int)","cb89378e":"df.churn.head()","afc19083":"from sklearn.model_selection import train_test_split","08baf306":"## splitting the data in train and test\ndf_full_train,df_test = train_test_split(df,test_size = 0.2,random_state = 1)","26426901":"len(df_full_train),len(df_test)","687ca43e":"## splitting the full training data into validation and training data\ndf_train, df_val = train_test_split(df_full_train,test_size = 0.25,random_state=1)","247f212a":"len(df_train),len(df_val),len(df_test)","a431e585":"### Removing the index\ndf_train = df_train.reset_index(drop = True)\ndf_val = df_val.reset_index(drop = True)\ndf_test = df_test.reset_index(drop = True)","030a1ca8":"## Giving the value to be predicted to y \ny_train = df_train.churn.values\ny_test = df_test.churn.values\ny_val = df_val.churn.values","ee8c9019":"# Deleting the column\ndel df_train['churn']\ndel df_test['churn']\ndel df_val['churn']","70bf92a9":"df_full_train.isnull().sum()","c539c3c3":"df_full_train.churn.value_counts()","797cf648":"## to see the percentage \n#  % of 1 is called the churnrate \ndf_full_train.churn.value_counts(normalize=True)","54ca647a":"# we get churn rate as mean will take 0s and 1s and mean of 0 will be 0 so we get means of 1 \nglobal_churn_rate = df_full_train.churn.mean()\nround(global_churn_rate,3)","dd90e257":"df_full_train.dtypes","d4461cdd":"numerical = ['tenure','monthlycharges','totalcharges']","fb1a8f5b":"df_full_train.columns","30eaeb8d":"categorical = ['gender', 'seniorcitizen', 'partner', 'dependents',\n       'phoneservice', 'multiplelines', 'internetservice',\n       'onlinesecurity', 'onlinebackup', 'deviceprotection', 'techsupport',\n       'streamingtv', 'streamingmovies', 'contract', 'paperlessbilling',\n       'paymentmethod']","f24ebb05":"df_full_train[categorical].nunique()","49b5b87d":"df_full_train = df_full_train.reset_index(drop = True)","1ec78820":"df_full_train.head()","7982c1d5":"df_full_train.shape","b4def2a1":"churn_female  = df_full_train[df_full_train.gender == 'female'].churn.mean()\nchurn_female","1a999e77":"churn_male  = df_full_train[df_full_train.gender == 'male'].churn.mean()\nchurn_male","bc750c9d":"global_churn_rate","e9d919e8":"df_full_train.partner.value_counts()","f666091a":"churn_partner = df_full_train[df_full_train.partner=='yes'].churn.mean()\nchurn_partner","f893bd5f":"churn_no_partner = df_full_train[df_full_train.partner=='no'].churn.mean()\nchurn_no_partner","ee922414":"global_churn_rate - churn_partner","632d146e":"global_churn_rate - churn_no_partner","bf9cbdf5":"global_churn_rate - churn_female","7171920c":"global_churn_rate - churn_male","a5c8ad63":"churn_no_partner\/global_churn_rate","1458499c":"churn_partner\/global_churn_rate","95417bbd":"df_full_train.groupby('gender').churn.mean()","fbb4947b":"df_group = df_full_train.groupby('gender').churn.agg(['mean','count'])\ndf_group['diff'] = df_group['mean'] - global_churn_rate\ndf_group['risk'] = df_group['mean'] \/global_churn_rate\ndf_group","5bd063b5":"## now we want to do this for every categorical variable","62b521b0":"from IPython.display import display","041c037c":"for c in categorical:\n    df_group = df_full_train.groupby(c).churn.agg(['mean','count'])\n    df_group['diff'] = df_group['mean'] - global_churn_rate\n    df_group['risk'] = df_group['mean'] \/global_churn_rate\n    display(df_group)\n    print()\n    print()","7d2b06b9":"from sklearn.metrics import mutual_info_score","8423e71a":"mutual_info_score(df_full_train.churn,df_full_train.contract)","bc9f337c":"mutual_info_score(df_full_train.gender,df_full_train.churn)","9ab1dea4":"mutual_info_score(df_full_train.partner,df_full_train.churn)","21a8adc6":"## SEEING SCORE FOR EACH CATEGORICAL VARIABLES \n\ndef mutual_info_churn_score(series):\n    return mutual_info_score(series,df_full_train.churn)","b285df60":"mi = df_full_train[categorical].apply(mutual_info_churn_score)\nmi.sort_values(ascending=False)","b4248c83":"df_full_train[numerical].corrwith(df_full_train.churn)","6f23d5fe":"## 2 means 2 months and 12 means 12 months for tenure\ndf_full_train[df_full_train.tenure<=2].churn.mean()","8aa8f4d5":"df_full_train[(df_full_train.tenure>2) & df_full_train.tenure<=12].churn.mean()","a98feb87":"df_full_train[df_full_train.tenure>12].churn.mean()","78003ee1":"## Negative Correlation for Tenure as the value is decreasing ","0b222a82":"## 20 means 20 $ and 50 means 50$\ndf_full_train[df_full_train.monthlycharges<=20].churn.mean()","d9b2759a":"df_full_train[(df_full_train.monthlycharges>20) & df_full_train.tenure<=50 ].churn.mean()","87c47e52":"df_full_train[df_full_train.monthlycharges>50].churn.mean()","67ec4778":"## MonthyCharges show +ve correlation ","e022274e":"from sklearn.feature_extraction import DictVectorizer","fddd8306":"df_train[['gender','contract']].iloc[:100]","0a0f7b83":"## used orient = records for displaying row wise\ndicts = df_train[['gender','contract']].iloc[:100].to_dict(orient = 'records')\ndicts","b510b185":"dv = DictVectorizer(sparse = False)","07019b0a":"dv.fit(dicts)","4f6fd153":"## on not using sparse = False\ndv.transform(dicts)","2ff28fbb":"dv.get_feature_names()","9d4abbce":"## first 3 are contract and last 2 are gender \ndv.transform(dicts)","ca53f960":"## Implementing on whole data set","fd997698":"train_dicts = df_train[categorical+numerical].to_dict(orient = 'records')","86a98ab0":"train_dicts[0]","ce3fbb1a":"dv =DictVectorizer(sparse= False)\ndv.fit(train_dicts)","f95a8ce6":"# dv.get_feature_names()","18023249":"# list(dv.transform(train_dicts)[0]) ## first row","986b6961":"X_train = dv.fit_transform(train_dicts)\nX_train.shape","7e375ec3":"## Same for Validation dataset","a50eb0c4":"val_dicts = df_val[categorical+numerical].to_dict(orient = 'records')","ebd6f1ac":"X_val = dv.transform(val_dicts)","f8275288":"def sigmmoid(z):\n    return 1\/(1+np.exp(-z))","0af18ff6":"z = np.linspace(-5,5,51)","8fe3f6d1":"sigmmoid(z)","d503e5b5":"plt.plot(z,sigmmoid(z))","767352e8":"def linear_regression(xi):\n    result = w0\n    \n    for j in range(len(w)):\n        result = result + xi[j]*w[j]\n    return result","59ff196d":"def logitic_regression(xi):\n    score = w0\n    for j in range(len(w)):\n        score = score + xi[j]*w[j]\n        \n    result = sigmmoid(score)\n    return result","d65d72e7":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)","4385f479":"model.coef_[0].round(3)","bb89f1e1":"model.intercept_[0]","74023474":"## These are known as hard predictions \nmodel.predict(X_train)","312386ec":"## These are known as soft predictions\n\n# 1st column is for probability of being -ve class i.e 0 (prob of non-churning)\n# 2nd column probability of being +ve class i.e 1 (prob of churning)\n\nmodel.predict_proba(X_train)","524c5e8d":"## we are not interested in -ve class so we will take the the 2nd column\ny_pred = model.predict_proba(X_val)[:,1]\ny_pred","8bfe5e6f":"churn_descion = (y_pred >=0.5)\ndf_val[churn_descion].customerid","529c5c73":"y_val","0579ddae":"churn_descion.astype(int)","72d3dfb7":"(y_val == churn_descion).mean()","5704c82d":"df_pred = pd.DataFrame()\ndf_pred['probability'] = y_pred\ndf_pred['prediction']  = churn_descion.astype(int)\ndf_pred['actual_value'] = y_val","b5d6a0fe":"df_pred","ce50a778":"df_pred['correct'] = df_pred.prediction == df_pred.actual_value","7d894928":"df_pred","a2045c7b":"df_pred.correct.mean()","60d8908b":"## explaining what does zip do\na = [1,2,3,4]\nb = 'abcd'\ndict(zip(a,b))","ea7bd1ea":"dict(zip(dv.get_feature_names(),model.coef_[0].round(3)))","a2128f8a":"small = ['contract','tenure','monthlycharges']","aa29ac64":"df_train[small].iloc[:10].to_dict(orient = 'records')","0f8322d9":"dicts_train_small = df_train[small].to_dict(orient = 'records')\ndicts_val_small = df_val[small].to_dict(orient = 'records')","e16b1874":"dv_small = DictVectorizer(sparse = False)\ndv_small.fit(dicts_train_small)","003e21bd":"dv_small.get_feature_names()","5ac5cbfb":"X_train_small = dv_small.transform(dicts_train_small)","03bed162":"model_small = LogisticRegression()","77370ce6":"model_small.fit(X_train_small,y_train)","fccf778e":"w0 = model_small.intercept_[0]\nw0","1cc1622f":"w= model_small.coef_[0]\nw.round(3)","5ea4e651":"dict(zip(dv_small.get_feature_names(),w.round(3)))","e29e73aa":"sigmmoid(-2.7)","2870ce91":"dicts_full_train = df_full_train[categorical+numerical].to_dict(orient='records')","8057a080":"dicts_full_train","e2a7beab":"dv = DictVectorizer(sparse = False)\nX_full_train = dv.fit_transform(dicts_full_train)","68ca0bce":"y_full_train = df_full_train.churn.values","37e9010a":"model = LogisticRegression().fit(X_full_train,y_full_train)","269bd5b3":"# repeating the process of test dataset\ndicts_test = df_test[categorical+numerical].to_dict(orient='records')","4c95e4ac":"dv = DictVectorizer(sparse = False)\nX_test = dv.fit_transform(dicts_test)","5a9751c8":"y_pred = model.predict_proba(X_test)[:,1]","dd4fe651":"churn_descion = y_pred >=0.5","f1101bb7":"(churn_descion == y_test).mean()","40b52030":"customer = dicts_test[10]\ncustomer","ecefb13d":"X_small = dv.transform([customer])","0b8dd1f9":"X_small.shape","95bd1e6c":"model.predict_proba(X_small)[0,1]","4e921a26":"y_test[10]","bf36e03e":"- Churn rate\n- Risk ratio\n- Mutual Information - later","fbbce914":"- Train a model with Scikit-learn \n- Apply it to the validation dataset\n- Calculate the accuracy ","6b539341":"## Feature importance: Correlation\n- How about numerical columns ?\n- Correlation coefficient","e1bdfe2e":"### look the notebook copy or the vid 3.5 ","66837581":"- Look at the coefficients\n- Train a smaller model with fewer features ","ab8c9313":"## Feature importance: churn rate and risk ratio ","0421a836":"Mutual information - concept from information theory, it tells us how much we can learn about one variable if we know the value of another\n- https:\/\/en.wikipedia.org\/wiki\/Mutual_information","c90940f6":"####  Numerical Features  ","b3460b4a":"# Using the model","8257ee5e":"- Perform the train\/validation\/test split with scikit learn ","ff69a733":"# Logistic Regression \n- Binary Classification \n- Linear vs logistic regression  ","0600ce88":"# Feature Importance: Mutual Information ","8b9946ec":"# Model interpretation","d6d4e8c4":"# One-hot Encoding ","de948a6f":"# Training Logistic Regression with Scikit-Learn","04c48f9a":"- Check missing values\n- look at the target variable(churn)\n- look at the numerical and categorical values","4fd9f177":"#### Churn Rate","75f63b06":"### Categorical Features ","24892457":"by seeing the above 3 contract> partner > gender is more important","c8456189":"### sql query \n    SELECT\n        gender,\n        AVG(churn),\n        AVG(churn) - global_churn AS diff,\n        AVG(churn) \/ global_churn AS risk\n    FROM\n        data\n    GROUP BY\n        gender;","970fd168":"## Risk Ratio ","eacd4ed3":"## EDA ","09752ef9":"## Setting up the validation framework","66e8081d":"have to convert above query in python "}}