{"cell_type":{"abd6e1ac":"code","300398ab":"code","10fa0fdc":"code","bd59cb46":"code","ffe363f5":"code","dac407aa":"code","dea6f946":"code","bfa44f3c":"code","c98cbcd2":"code","58dd5b08":"code","023cf582":"code","a2a0f79d":"code","438a5543":"code","920fcaaa":"code","fc796ed9":"code","66374b01":"code","6c5b8634":"code","6de729a3":"code","2cef6eef":"code","40bc208b":"markdown","d23c379d":"markdown","f627164c":"markdown","7166ea28":"markdown","ba8da86e":"markdown","9c513519":"markdown","15be020a":"markdown","d4936f0e":"markdown","e21a0254":"markdown","eb3d6b98":"markdown","2b0bc35b":"markdown","c88949e8":"markdown","a958d426":"markdown","df1187ff":"markdown","4f27b5d4":"markdown","98a1fa24":"markdown","dcb48abf":"markdown","31122b4b":"markdown","4c98f36e":"markdown","13fc0a51":"markdown","33f1b160":"markdown","2ddc1eb4":"markdown","a7d0ad5f":"markdown","3e4d2f7f":"markdown","74dfccf0":"markdown","acab601f":"markdown","ab028b94":"markdown"},"source":{"abd6e1ac":"import pandas as pd\nimport datetime\nimport pandas_datareader.data as web\nfrom pandas import Series, DataFrame\n\n\nstart = datetime.datetime(2012, 1, 1)\nend = datetime.datetime(2019, 9, 1)\n\ndf = web.DataReader(\"AAPL\", 'yahoo', start, end)\ndf.tail()","300398ab":"close_px = df['Adj Close']\nmavg = close_px.rolling(window=100).mean()\nmavg.tail(10)","10fa0fdc":"%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\n\n# Adjusting the size of matplotlib\nimport matplotlib as mpl\nmpl.rc('figure', figsize=(8, 7))\nmpl.__version__\n\n# Adjusting the style of matplotlib\nstyle.use('ggplot')\n\nclose_px.plot(label='AAPL')\nmavg.plot(label='mavg')\nplt.legend()","bd59cb46":"rets = close_px \/ close_px.shift(1) - 1\nrets.plot(label='return')","ffe363f5":"dfcomp = web.DataReader(['AAPL', 'GE', 'GOOG', 'IBM', 'MSFT'],'yahoo',start=start,end=end)['Adj Close']\ndfcomp.tail()","dac407aa":"import seaborn as sns\nretscomp = dfcomp.pct_change()\n\ncorr = retscomp.corr()\nprint(corr)\nsns.heatmap(corr, annot=True)","dea6f946":"sns.pairplot(retscomp);","bfa44f3c":"plt.imshow(corr, cmap='hot', interpolation='none')\nplt.colorbar()\nplt.xticks(range(len(corr)), corr.columns)\nplt.yticks(range(len(corr)), corr.columns);","c98cbcd2":"plt.scatter(retscomp.mean(), retscomp.std())\nplt.xlabel('Expected returns')\nplt.ylabel('Risk')\nfor label, x, y in zip(retscomp.columns, retscomp.mean(), retscomp.std()):\n    plt.annotate(\n        label, \n        xy = (x, y), xytext = (20, -20),\n        textcoords = 'offset points', ha = 'right', va = 'bottom',\n        bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),\n        arrowprops = dict(arrowstyle = '->', connectionstyle = 'arc3,rad=0'))","58dd5b08":"df.columns","023cf582":"dfreg = df[[\"Adj Close\",\"Volume\"]].copy()\ndfreg['HL_PCT'] = (df['High'] - df['Low'])\/df['Close'] * 100\ndfreg['Change_PCT'] = (df['Close'] - df['Open'])\/df['Open'] * 100\ndfreg.head()","a2a0f79d":"import math\nimport numpy as np\nfrom sklearn import preprocessing\n\n# Drop missing value\ndfreg.fillna(value=-99999, inplace=True)\n\n# We want to separate 1 percent of the data to forecast\nforecast_out = int(math.ceil(0.01 * len(dfreg)))\n\n# Separating the label here, we want to predict the AdjClose\nforecast_col = 'Adj Close'\ndfreg['label'] = dfreg[forecast_col].shift(-forecast_out)\nX = np.array(dfreg.drop(['label'], 1))\n\n# Scale the X so that everyone can have the same distribution for linear regression\nX = preprocessing.scale(X)\n\n# Finally We want to find Data Series of late X and early X (train) for model generation and evaluation\nX_lately = X[-forecast_out:]\nX = X[:-forecast_out]\n\n# Separate label and identify it as y\ny = np.array(dfreg['label'])\ny = y[:-forecast_out]","438a5543":"from sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\n\nfrom sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline","920fcaaa":"from sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)\n\n# Linear regression\nclfreg = LinearRegression(n_jobs=-1)\nclfreg.fit(X_train, y_train)\n# Quadratic Regression 2\nclfpoly2 = make_pipeline(PolynomialFeatures(2), Ridge())\nclfpoly2.fit(X_train, y_train)\n\n# Quadratic Regression 3\nclfpoly3 = make_pipeline(PolynomialFeatures(3), Ridge())\nclfpoly3.fit(X_train, y_train)","fc796ed9":"# KNN Regression\nclfknn = KNeighborsRegressor(n_neighbors=2)\nclfknn.fit(X_train, y_train)","66374b01":"confidencereg = clfreg.score(X_test, y_test)\nconfidencepoly2 = clfpoly2.score(X_test,y_test)\nconfidencepoly3 = clfpoly3.score(X_test,y_test)\nconfidenceknn = clfknn.score(X_test, y_test)","6c5b8634":"print(\"# results\")\nprint('The linear regression confidence is {}'.format(confidencereg))\nprint('The quadratic regression 2 confidence is {}'.format(confidencepoly2))\nprint('The quadratic regression 3 confidence is {}'.format(confidencepoly3))\nprint('The KNN confidence is {}'.format(confidenceknn))","6de729a3":"forecast_set = clfreg.predict(X_lately)\ndfreg['Forecast'] = np.nan\nforecast_set","2cef6eef":"last_date = dfreg.iloc[-1].name\nlast_unix = last_date\nnext_unix = last_unix + datetime.timedelta(days=1)\n\nfor i in forecast_set:\n    next_date = next_unix\n    next_unix += datetime.timedelta(days=1)\n    dfreg.loc[next_date] = [np.nan for _ in range(len(dfreg.columns)-1)]+[i]\ndfreg['Adj Close'].tail(500).plot()\ndfreg['Forecast'].tail(500).plot()\nplt.legend(loc=4)\nplt.xlabel('Date')\nplt.ylabel('Price')\nplt.show()","40bc208b":" For the rest of analysis, we will use the Closing Price which remarks the final price in which the stocks are traded by the end of the day.","d23c379d":"## Pre-processing & Cross Validation\nWe will clean up and process the data using the following steps before putting them into the prediction models:\n1. Drop missing value\n2. Separating the label here, we want to predict the AdjClose\n3. Scale the X so that everyone can have the same distribution for linear regression\n4. Finally We want to find Data Series of late X and early X (train) for model generation and evaluation\n5. Separate label and identify it as y\n6. Separation of training and testing of model by cross validation train test split\n\nPlease refer the preparation codes below.","f627164c":"## Future Improvements\/ Challenges\n\nTo further analyse the stocks, here are some ideas on how you could contribute. These ideas would be useful to get a more comprehensive analysis on stocks. Feel free to let me know should there be more clarifications needed.\n\n1. Analyse economic qualitative factors such as news (news sourcing and sentimental analysis)\n2. Analyse economic quantitative factors such as HPI of a certain country, economic inequality among origin of company","7166ea28":"From the Scatter Matrix and Heatmap, we can find great correlations among the competing stocks. However, this might not show causality, and could just show the trend in the technology industry rather than show how competing stocks affect each other.","ba8da86e":"From here we could see most of the distributions among stocks which approximately positive correlations.\nTo prove the positive correlations, we will use heat maps to visualize the correlation ranges among the competing stocks. Notice that the lighter the color, the more correlated the two stocks are.","9c513519":"## Stocks Analysis with Pandas and Scikit-Learn\n\nThe objective for this publication is to understand one way on analyzing stocks using Python Code. \n\nTo start learning and analyzing stocks, \n1. we will start off by taking a quick look at the historical stocks prices. This will be done by extracting latest stocks data from pandas web-data reader and Yahoo Finance. \n2. Then we will try to view the data through exploratory analysis such as correlation heatmap, matplotlib visualization, and prediction analysis using Linear Analysis and K Nearest Neighbor (KNN).","15be020a":"## Return Deviation \u2014 to determine risk and return\nExpected Return measures the mean, or expected value, of the probability distribution of investment returns. The expected return of a portfolio is calculated by multiplying the weight of each asset by its expected return and adding the values for each investment \u2014 Investopedia.\nFollowing is the formula you could refer to:\n\nFormula for Returns","d4936f0e":"Now you could view this neat chart of risk and return comparisons for competing stocks. Logically, you would like to minimize the risk and maximize returns. ","e21a0254":"## Simple Linear Analysis & Quadratic Discriminant Analysis\nSimple Linear Analysis shows a linear relationship between two or more variables. When we draw this relationship within two variables, we get a straight line. Quadratic Discriminant Analysis would be similar to Simple Linear Analysis, except that the model allowed polynomial (e.g: x squared) and would produce curves.\nLinear Regression predicts dependent variables (y) as the outputs given independent variables (x) as the inputs.","eb3d6b98":"## Analysing your Competitors Stocks\nIn this segment, we are going to analyse on how one company performs in relative with its competitor. Let\u2019s assume we are interested in technology companies and want to compare the big guns: Apple, GE, Google, IBM, and Microsoft.","2b0bc35b":"This will calculate the Moving Average for the last 100 windows (100 days) of stocks closing price and take the average for each of the window\u2019s moving average. As you could see, The Moving Average steadily rises over the window and does not follow the jagged line of stocks price chart.\n\nFor better understanding, let\u2019s plot it out with Matplotlib. We will overlay the Moving Average with our Stocks Price Chart.","c88949e8":"As we can see the blue color showcased the forecast on the stocks price based on regression. The forecast predicted that there would be a downturn for not too long, then it will recover. Therefore, we could buy the stocks during downturn and sell during upturn.","a958d426":"Logically, our ideal stocks should return as high and stable as possible. If you are risk averse(like me), you might want to avoid this stocks as you saw the 10% drop in 2013 and 2019 starting. This decision is heavily subjected to your general sentiment of the stocks and competitor analysis.","df1187ff":"Let us further improve our analysis by plotting the pairplot to visualize possible correlations among competing stocks. It helps generate estimations of the overall distributions.","4f27b5d4":"## Exploring Rolling Mean and Return Rate of Stocks\nIn this analysis, we analyse stocks using two key measurements: Rolling Mean and Return Rate.\n\n## Rolling Mean (Moving Average) \u2014 to determine trend\nRolling mean\/Moving Average (MA) smooths out price data by creating a constantly updated average price. This is useful to cut down \u201cnoise\u201d in our price chart. Furthermore, this Moving Average could act as \u201cResistance\u201d meaning from the downtrend and uptrend of stocks you could expect it will follow the trend and less likely to deviate outside its resistance point.","98a1fa24":"## Stocks Returns Rate and Risk\nApart from correlation, we also analyse each stock\u2019s risks and returns. In this case we are extracting the average of returns (Return Rate) and the standard deviation of returns (Risk).","dcb48abf":"This shows an enormous accuracy score (>0.95) for most of the models. However this does not mean we can blindly place our stocks. There are still many issues to consider, especially with different companies that have different price trajectories over time.\n\nFor sanity testing, let us print some of the stocks forecast.\n","31122b4b":"We will plug and play the existing Scikit-Learn library and train the model by selecting our X and y train sets. The code will be as following.","4c98f36e":"## Evaluation\nA simple quick and dirty way to evaluate is to use the score method in each trained model. The score method finds the mean accuracy of self.predict(X) with y of the test data set.","13fc0a51":"## Loading YahooFinance Dataset\nPandas web data reader is an extension of pandas library to communicate with most updated financial data. This will include sources as: Yahoo Finance, Google Finance, Enigma, etc.\nWe will extract Apple Stocks Price using the following codes:","33f1b160":"## Predicting Stocks Price\n## Feature Engineering\nWe will use these three machine learning models to predict our stocks: Simple Linear Analysis, Quadratic Discriminant Analysis (QDA), and K Nearest Neighbor (KNN). But first, let us engineer some features: High Low Percentage and Percentage Change.","2ddc1eb4":"Let\u2019s start code out the Rolling Mean:","a7d0ad5f":"## K Nearest Neighbor (KNN)\nThis KNN uses feature similarity to predict values of data points. This ensures that the new point assigned is similar to the points in the data set. To find out similarity, we will extract the points to release the minimum distance (e.g: Euclidean Distance).","3e4d2f7f":"## Model Generation \u2014 Where the prediction fun starts\nBut first, let\u2019s insert the following imports for our Scikit-Learn:**","74dfccf0":"his will return you a slick table of closing prices among the stocks prices from Yahoo Finance. Neat!!\n\n## Correlation Analysis \u2014 Does one competitor affect others?\n\nWe can analyse the competition by running the percentage change and correlation function in pandas. Percentage change will find how much the price changes compared to the previous day which defines returns. Knowing the correlation will help us see whether the returns are affected by other stocks\u2019 returns","acab601f":"## Plotting the Prediction\nBased on the forecast, we will visualize the plot with our existing historical data. This will help us visualize how the model fares to predict future stocks pricing.","ab028b94":"The Moving Average makes the line smooth and showcase the increasing or decreasing trend of stocks price.\n\nIn this chart, the Moving Average showcases increasing trend the upturn or downturn of stocks price. \n\nLogically, you should buy when the stocks are experiencing downturn and sell when the stocks are experiencing upturn"}}