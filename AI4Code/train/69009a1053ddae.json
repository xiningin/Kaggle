{"cell_type":{"159bdd6a":"code","2b808c1f":"code","61c25a54":"code","bbe38624":"code","57359c1d":"code","655aebf2":"code","32336a85":"code","9f2e61ad":"code","f3042e85":"code","4c54f249":"code","0d4cf907":"code","647e1ed2":"code","83dc0c0a":"code","51093a71":"markdown","c56bda87":"markdown","1a965674":"markdown","1e4f3348":"markdown","2f38eb8a":"markdown"},"source":{"159bdd6a":"!pip install -qq transforms3d","2b808c1f":"import os, sys\n!git clone -q https:\/\/github.com\/CalciferZh\/AMCParser","61c25a54":"sys.path.append('AMCParser')\nimport amc_parser as amc","bbe38624":"%matplotlib inline\nfrom pathlib import Path\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom mpl_toolkits.mplot3d import Axes3D","57359c1d":"BASE_DIR = Path('..') \/ 'input' \/ 'allasfamc' \/ 'all_asfamc'\ndatasets_df = pd.DataFrame({'path': list(BASE_DIR.glob('subjects\/*\/*.amc'))})\ndatasets_df['Subject'] = datasets_df['path'].map(lambda x: x.parent.stem)\ndatasets_df['Activity'] = datasets_df['path'].map(lambda x: x.stem.split('_')[-1].lower())\ndatasets_df['asf_path'] = datasets_df['path'].map(lambda x: x.parent \/ (x.parent.stem + '.asf'))\n\ndatasets_df.sample(3)","655aebf2":"datasets_df[['Subject', 'Activity']].describe()","32336a85":"test_rec = datasets_df.iloc[0]\nprint(test_rec)","9f2e61ad":"joints = amc.parse_asf(test_rec['asf_path'])\nmotions = amc.parse_amc(test_rec['path'])","f3042e85":"frame_idx = np.random.choice(range(len(motions)))\njoints['root'].set_motion(motions[frame_idx])\njoints['root'].draw()","4c54f249":"from IPython.display import FileLink\nfrom matplotlib.animation import FuncAnimation\nfig = plt.figure()\nax = Axes3D(fig)\n\ndef draw_frame(i):\n    ax.cla()\n    ax.set_xlim3d(-50, 10)\n    ax.set_ylim3d(-20, 40)\n    ax.set_zlim3d(-20, 40)\n    joints['root'].set_motion(motions[i])\n    c_joints = joints['root'].to_dict()\n    xs, ys, zs = [], [], []\n    for joint in c_joints.values():\n      xs.append(joint.coordinate[0, 0])\n      ys.append(joint.coordinate[1, 0])\n      zs.append(joint.coordinate[2, 0])\n    ax.plot(zs, xs, ys, 'b.')\n\n    for joint in c_joints.values():\n      child = joint\n      if child.parent is not None:\n        parent = child.parent\n        xs = [child.coordinate[0, 0], parent.coordinate[0, 0]]\n        ys = [child.coordinate[1, 0], parent.coordinate[1, 0]]\n        zs = [child.coordinate[2, 0], parent.coordinate[2, 0]]\n        ax.plot(zs, xs, ys, 'r')\nout_path = 'simple_animation.gif'\nFuncAnimation(fig, draw_frame, range(0, len(motions), 10)).save(out_path, \n                                                  bitrate=8000,\n                                                  fps=8)\nplt.close('all')\nFileLink(out_path)","0d4cf907":"def get_joint_pos_dict(c_joints, c_motion):\n    c_joints['root'].set_motion(c_motion)\n    out_dict = {}\n    for k1, v1 in c_joints['root'].to_dict().items():\n        for k2, v2 in zip('xyz', v1.coordinate[:, 0]):\n            out_dict['{}_{}'.format(k1, k2)] = v2\n    return out_dict\nmotion_df = pd.DataFrame([get_joint_pos_dict(joints, c_motion) for c_motion in motions])\nmotion_df.to_csv('motion.csv', index=False)\nmotion_df.sample(3)","647e1ed2":"fig, m_axs = plt.subplots(3, 1, figsize=(20, 10))\nfor c_x, c_ax in zip('xyz', m_axs):\n    for joint_name in joints.keys():\n        if ('foot' in joint_name) or ('toes' in joint_name):\n            c_ax.plot(motion_df['{}_{}'.format(joint_name, c_x)], label=joint_name)\n    c_ax.set_title(c_x);\nm_axs[0].legend()","83dc0c0a":"!rm -rf AMCParser","51093a71":"### Clean up bumpf\nKaggle gets upset if there are too many directories in the output","c56bda87":"Draw a random frame","1a965674":"## Parse the data\nWe read the joint information from the asf (one per subject) and then apply the motions (one per movement and hundreds of frames recorded)","1e4f3348":"# Overview\nA notebook showing how to read the AMC\/ASF data in the CMU Mocap and make simple visualizations. The notebook uses the code from https:\/\/github.com\/CalciferZh\/AMCParser\/ to read and show the data","2f38eb8a":"## Make a nice animation"}}