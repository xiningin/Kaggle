{"cell_type":{"a1cd592d":"code","3c328341":"code","fcd31612":"code","139b023e":"code","3278fb2d":"code","6796223d":"code","8c03bfba":"code","e6b8f255":"code","91233143":"code","9326b1af":"code","81a26891":"code","4ba27257":"code","1ead9136":"markdown","3b802415":"markdown","38cf045f":"markdown","69f3a2bf":"markdown","7c3bf4fb":"markdown","d7797d92":"markdown","03fda075":"markdown","85ffbb3d":"markdown","33d727f1":"markdown","97293dca":"markdown","35bae984":"markdown","52d9336b":"markdown","4edcc44f":"markdown","0ecbd44c":"markdown","87cbb1a9":"markdown","5f34c391":"markdown","8d0f75f6":"markdown"},"source":{"a1cd592d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec # Alignments\n\nimport seaborn as sns # theme & dataset\nprint(f\"Matplotlib Version : {mpl.__version__}\")\nprint(f\"Seaborn Version : {sns.__version__}\")\n\nSummary = pd.read_csv('\/kaggle\/input\/air-pollution-in-seoul\/AirPollutionSeoul\/Measurement_summary.csv')\nItem = pd.read_csv('\/kaggle\/input\/air-pollution-in-seoul\/AirPollutionSeoul\/Original Data\/Measurement_item_info.csv')\nInfo = pd.read_csv('\/kaggle\/input\/air-pollution-in-seoul\/AirPollutionSeoul\/Original Data\/Measurement_info.csv')\nStation = pd.read_csv('\/kaggle\/input\/air-pollution-in-seoul\/AirPollutionSeoul\/Original Data\/Measurement_station_info.csv')","3c328341":"plt.rcParams['figure.dpi'] = 200","fcd31612":"dpi=200","139b023e":"fig, axes = plt.subplots(2, 3, figsize=(8, 5))\nplt.show()","3278fb2d":"fig, axes = plt.subplots(2, 3, figsize=(8, 5))\nplt.tight_layout()\nplt.show()","6796223d":"# With Subplot2grid\n\nfig = plt.figure(figsize=(8,5))  \n#Figure Initialized\n\nax = [None for _ in range(6)]\n#this will make a list to save many ax for setting parameter in each one.\n\nax[0] = plt.subplot2grid((3,4), (0,0), colspan=4)\nax[1] = plt.subplot2grid((3,4), (1,0), colspan=1)\nax[2] = plt.subplot2grid((3,4), (1,1), colspan=1)\nax[3] = plt.subplot2grid((3,4), (1,2), colspan=1)\nax[4] = plt.subplot2grid((3,4), (1,3), colspan=1,rowspan=2)\nax[5] = plt.subplot2grid((3,4), (2,0), colspan=3)\n\nfor ix in range(6): \n    ax[ix].set_title('ax[{}]'.format(ix)) # make ax title for distinguish:)\n    ax[ix].set_xticks([]) # to remove x ticks\n    ax[ix].set_yticks([]) # to remove y ticks\n    \nfig.tight_layout()\nplt.show()\n","8c03bfba":"fig = plt.figure(figsize=(8, 5))\n\nax = [None for _ in range(3)]\n\n\nax[0] = fig.add_axes([0.1,0.1,0.8,0.4]) # x, y, dx, dy\nax[1] = fig.add_axes([0.15,0.6,0.25,0.6])\nax[2] = fig.add_axes([0.5,0.6,0.4,0.3])\n\nfor ix in range(3):\n    ax[ix].set_title('ax[{}]'.format(ix))\n    ax[ix].set_xticks([])\n    ax[ix].set_yticks([])\n\nplt.show()","e6b8f255":"fig = plt.figure(figsize=(8, 5))\n\ngs = fig.add_gridspec(3, 3) # make 3 by 3 grid (row, col)\n\nax = [None for _ in range(5)]\n\nax[0] = fig.add_subplot(gs[0, :]) \nax[0].set_title('gs[0, :]')\n\nax[1] = fig.add_subplot(gs[1, :-1])\nax[1].set_title('gs[1, :-1]')\n\nax[2] = fig.add_subplot(gs[1:, -1])\nax[2].set_title('gs[1:, -1]')\n\nax[3] = fig.add_subplot(gs[-1, 0])\nax[3].set_title('gs[-1, 0]')\n\nax[4] = fig.add_subplot(gs[-1, -2])\nax[4].set_title('gs[-1, -2]')\n\nfor ix in range(5):\n    ax[ix].set_xticks([])\n    ax[ix].set_yticks([])\n\nplt.tight_layout()\nplt.show()","91233143":"from collections import OrderedDict\ncmaps = OrderedDict()\ncmaps['Diverging'] = [\n            'PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu',\n            'RdYlBu', 'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic']","9326b1af":"cmaps['Qualitative'] = ['Pastel1', 'Pastel2', 'Paired', 'Accent',\n                        'Dark2', 'Set1', 'Set2', 'Set3',\n                        'tab10', 'tab20', 'tab20b', 'tab20c']","81a26891":"cmaps['Perceptually Uniform Sequential'] = [\n            'viridis', 'plasma', 'inferno', 'magma', 'cividis']\n\ncmaps['Sequential'] = [\n            'Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds',\n            'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',\n            'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn']","4ba27257":"nrows = max(len(cmap_list) for cmap_category, cmap_list in cmaps.items())\ngradient = np.linspace(0, 1, 256)\ngradient = np.vstack((gradient, gradient))\n\n\ndef plot_color_gradients(cmap_category, cmap_list, nrows):\n    fig, axes = plt.subplots(nrows=nrows)\n    fig.subplots_adjust(top=0.95, bottom=0.01, left=0.2, right=0.99)\n    axes[0].set_title(cmap_category + ' colormaps', fontsize=14)\n\n    for ax, name in zip(axes, cmap_list):\n        ax.imshow(gradient, aspect='auto', cmap=plt.get_cmap(name))\n        pos = list(ax.get_position().bounds)\n        x_text = pos[0] - 0.01\n        y_text = pos[1] + pos[3]\/2.\n        fig.text(x_text, y_text, name, va='center', ha='right', fontsize=10)\n\n    # Turn off *all* ticks & spines, not just the ones with colormaps.\n    for ax in axes:\n        ax.set_axis_off()\n\n\nfor cmap_category, cmap_list in cmaps.items():\n    plot_color_gradients(cmap_category, cmap_list, nrows)\n\nplt.show()","1ead9136":"![tenor.gif](attachment:tenor.gif)","3b802415":"Another way is to use gridspec. This allows you to use **add_subplot together**, similar to subplots to grid.\n\nThis approach allows you to take advantage of the concept of list to use a developer-friendly grid","38cf045f":"Thses are some of the colormap that i use usually but there are amny more.\n\nSee All the colormap avalabile on the matplotlib library here : [Matplotlib Documentation](http:\/\/https:\/\/matplotlib.org\/3.1.0\/tutorials\/colors\/colormaps.html)","69f3a2bf":"#will put table of content later\n","7c3bf4fb":"### Qualitative Colormap\n\nA palette of independent colors, often used for categorical variables.\n\nIt is recommended to organize up to 10 colors, and to group more and smaller categories with other.\n\nRepeating colors can be confusing, so try to avoid overlapping as much as possible. It's a good idea to change color to color rather than saturation and brightness.","d7797d92":"### **Hello Everyone!**\n\nI am Gaurav Ahuja And This is a notebook which organizes various tips and contents of matplotlib.\n\n**Matplotlib** is a plotting library for the Python programming language and its numerical mathematics extension **NumPy**.","03fda075":"But should it be the same size depending on the subplot? For example, bar graphs and pie charts are often very different in ratio.\n\nIn that case, the layout should be different.\n\nIn that case, you can easily use the grid system using **plt.subplot2grid**. ","85ffbb3d":"Or You can use **plt.add_axes()** to create an ax where you want.","33d727f1":"![MAt.png](attachment:MAt.png)","97293dca":"The first of the **plt.subplot()** parameters specifies the number of rows and the second the number of columns. \n\nThe graph looks a bit frustrating. In this case, you can use **plt.tight_layout()** to solve the frustration.","35bae984":"# 0. Setting\n\nWe set the resolution through the **dpi(Dots per Inch)** setting of the figure.\n\nMatplotlib has a low default resolution itself, so setting this up is a bit more professional.\n\nAnd We definitely want that.","52d9336b":"We'll show the range of each colormap. ","4edcc44f":"The above both Code line works the same.\n\nAnd for every plot set figsize. The graph gives a very different feeling depending on the ratio.","0ecbd44c":"### Sequential Colormap\n\nThis palette is appropriate for variables with numbers or sorted values.\n\nUsed a lot in comparison of figures. Especially effective for expressing density. Take advantage of map graphs for better visualization.\n\nSimilar to diverging, but with a slightly different part because each endpoint is a color criterion, not the median. It usually indicates that light values are dark on dark backgrounds and dark values on light backgrounds.\n","87cbb1a9":"# 1. Alignments\n\nTwo or more graphs are much more visually and semantically better than just one.\n\nThe easiest way to do this is to place the rectangles of the same shape.\n\nUsually you can start with the initial size with subplots.","5f34c391":"# 2. ColorMap\n\nColor is a major factor in creating effective charts. A good set of colors will highlight the story you want the data to tell, while a poor one will hide or distract from a visualization\u2019s purpose.\n\nThe matplotlib team has already created a good color palette, and we just need to use it.\n\nNow, This is a very interesting article that you all can read for same matter : \n[How to Choose Colors for Your Data Visualizations](http:\/\/https:\/\/medium.com\/nightingale\/how-to-choose-the-colors-for-your-data-visualizations-50b2557fa335)","8d0f75f6":"### Diverging Colormap\n\nThis colormap is usually used in visualizations where the median is obvious.\n\nIt is usually visualized on a white background, white in the center, and darker in color toward both ends. In other words, the lighter the value, the closer to the center, the darker, the closer to the end.\n\nCurrently it is a continuous colormap, but you can also use discrete colorpalette depending on the interval.Matplotlib loads the library's palette with that element in the cmap parameter. You can, of course, make it custom."}}