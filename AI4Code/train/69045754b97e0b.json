{"cell_type":{"a1e835fb":"code","3c9ceadb":"code","ec7037a6":"code","a54f15e0":"code","6184a30b":"code","c8d570e7":"code","5b6ad113":"code","160ab268":"code","d571d06b":"code","25a43950":"code","066bdbd0":"code","5072f627":"code","748a6051":"code","f10b599d":"code","55c6f857":"code","4115dad4":"markdown","1047794c":"markdown","6612d60c":"markdown","ea9cfb8d":"markdown","196efe9f":"markdown","0f5a5373":"markdown","3999ecdd":"markdown","48b31bb2":"markdown","92748cc2":"markdown","346a4320":"markdown","7bb75d72":"markdown"},"source":{"a1e835fb":"import numpy as np\nimport cv2\nimport os \n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scikitplot.metrics import plot_confusion_matrix as plt_con_mat\n\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.layers import Conv2D, Dense, Dropout, MaxPooling2D, Flatten\nfrom keras.utils import plot_model","3c9ceadb":"ROW = 128\nCOL = 128\n\npath = \"..\/input\/utkface-new\/UTKFace\"","ec7037a6":"file_names = os.listdir(path)\n\ngender = [i.split('_')[1] for i in file_names]\ny_data = np.array([int(i) for i in gender])\ny_data = np.expand_dims(y_data, axis = -1)\n\nprint(y_data.shape)","a54f15e0":"X_data = np.array([cv2.resize(cv2.imread(os.path.join(path,file)), (ROW, COL)) for file in file_names])\nprint(X_data.shape)","6184a30b":"y_data = to_categorical(y_data)\n\nX_temp, X_val, y_temp, y_val = train_test_split(X_data, y_data, test_size = 0.1, shuffle = True, random_state = 1)\nX_train, X_test, y_train, y_test = train_test_split(X_temp, y_temp, test_size = 0.1, random_state = 1)\n\nprint(X_train.shape, y_train.shape)\nprint(X_val.shape, y_val.shape)\nprint(X_test.shape, y_test.shape)","c8d570e7":"idxs = [0,1]\nx_ticks = ['male', 'female']\n\nplt.bar(idxs, [len([i for i in X_train if np.argmax(i) == 0]), \n                len([i for i in X_train if np.argmax(i) == 1])\n               ],\n       color = ['b','r'])\nplt.xticks(idxs, x_ticks)\nplt.title('Training')\nplt.show()","5b6ad113":"plt.bar(idxs, [len([i for i in X_val if np.argmax(i) == 0]), \n                len([i for i in X_val if np.argmax(i) == 1])\n               ],\n       color = ['b','r'])\nplt.xticks(idxs, x_ticks)\nplt.title('Validation data')\nplt.show()","160ab268":"plt.bar(idxs, [len([i for i in X_val if np.argmax(i) == 0]), \n                len([i for i in X_val if np.argmax(i) == 1])\n               ],\n       color = ['b','r'])\nplt.xticks(idxs, x_ticks)\nplt.title('Testing data')\nplt.show()","d571d06b":"m = 0\nf = 0\n\nmale_images = []\nfemale_images = []\n\nfor idx, label in enumerate(y_train):\n\n    if(m <= 5 and np.argmax(label) == 0):\n        male_images.append(idx)\n        m += 1\n    elif(f <= 5):\n        female_images.append(idx)\n        f += 1\n        \n    if(m == 5 and f == 5):\n        break\n        \nfig, ax = plt.subplots(5, 2, figsize = (15, 15))\n\nax[0, 0].title.set_text(\"Male\")\nax[0, 1].title.set_text(\"Female\")\n\nfor i in range(5):\n    \n    ax[i, 0].imshow(X_train[male_images[i]])\n    ax[i, 0].axis('off')\n    ax[i, 1].imshow(X_train[female_images[i]])\n    ax[i, 1].axis('off')\n\nplt.show()","25a43950":"model = Sequential()\n\nmodel.add(Conv2D(16, kernel_size = (3, 3), activation = 'relu', input_shape = (ROW, COL, 3)))\nmodel.add(MaxPooling2D(2, 2))\n\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(128, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(2, activation = 'softmax'))\nmodel.summary()","066bdbd0":"plot_model(model, show_shapes=True, show_layer_names=True)","5072f627":"model.compile(optimizer = 'adam', \n              loss = 'categorical_crossentropy', \n              metrics=['accuracy', 'Precision', 'Recall'])\n\nhistory = model.fit(X_train, y_train, \n                    validation_data = (X_val, y_val), \n                    epochs = 15,\n                    batch_size = 64)","748a6051":"sns.set()\nfig = plt.figure(0, (12, 4))\n\nax = plt.subplot(1, 2, 1)\nsns.lineplot(history.epoch, history.history['accuracy'], label = 'train')\nsns.lineplot(history.epoch, history.history['val_accuracy'], label = 'validation')\nplt.title('Accuracy')\nplt.tight_layout()\n\nax = plt.subplot(1, 2, 2)\nsns.lineplot(history.epoch, history.history['loss'], label = 'train')\nsns.lineplot(history.epoch, history.history['val_loss'], label = 'validation')\nplt.title('Loss')\nplt.tight_layout()\n\n#plt.savefig('epoch_history.png')\nplt.show()","f10b599d":"preds = model.predict_classes(X_test)\ny_true = np.argmax(y_test, axis=1)\n\nplt_con_mat(y_true, preds, figsize=(14,14))\nplt.show()","55c6f857":"model.save('gender.hdf5')","4115dad4":"## Loading the data","1047794c":"# Gender Detection\n\nIn this notebook I have implemented a Convolutional Neural Network to classify a given image of human face into male and female. ","6612d60c":"## Few examples of the images","ea9cfb8d":"## Neccessary imports","196efe9f":"## Evaluating the model on the test data","0f5a5373":"## Comstructing the CNN model","3999ecdd":"## Splitting the data into train, validation and test sets","48b31bb2":"## Visualising the performance of the model","92748cc2":"## Training the model","346a4320":"## Visualising the CNN model","7bb75d72":"## Visualising the data"}}