{"cell_type":{"d41c7bc7":"code","e4006daf":"code","2c02d157":"code","c79839cd":"code","cc050bae":"code","0916ef10":"code","45e17d44":"code","eb156164":"code","1206eda3":"code","60473980":"code","0113ff76":"code","a51d34aa":"code","f7b6bbb0":"code","6b95a444":"code","83752cb6":"code","9d7e1df3":"code","304a1fd5":"code","88e4f9f4":"code","e31a7e29":"code","e96d70ec":"code","75bc1c2e":"code","4d0039b8":"code","062e9111":"code","9a2872e6":"code","628e89cf":"code","daca8be0":"code","a59ee1df":"code","502d27fb":"code","fdbb240d":"code","ec19a4c0":"code","d3feed11":"code","72c24db2":"code","b2d12916":"code","e2c3b0dc":"code","46357564":"code","06c8e610":"code","7e825930":"code","d1bf6329":"code","b065433b":"code","51c914f2":"code","2c12a044":"code","1d656fff":"code","8ac4acba":"code","bdd18ac6":"code","8d7403c5":"code","6d282e45":"code","f2572be2":"code","8467ad41":"code","6cd9bb2f":"code","44a95650":"code","bda836c5":"code","d4be6f35":"code","5348863a":"code","0f222972":"markdown","c2019438":"markdown","3257cab7":"markdown","32d3b96d":"markdown","645921d7":"markdown","eca0f5a5":"markdown","56baf545":"markdown","735f9289":"markdown","378503dd":"markdown","5c3efc27":"markdown","5f6e7c62":"markdown","c9d622ea":"markdown","3a4308fb":"markdown","beda39d5":"markdown"},"source":{"d41c7bc7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e4006daf":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np","2c02d157":"df = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')","c79839cd":"df.head()","cc050bae":"df.isnull().sum()","0916ef10":"import seaborn as sns\nsns.countplot(x='Outcome', data=df)\nplt.show()","45e17d44":"diabetes_count = len(df.loc[df['Outcome'] == 1])\nno_diabetes_count=len(df.loc[df['Outcome']==0])\n(diabetes_count, no_diabetes_count)","eb156164":"#distribution of various parameters in the dataset except the target variable\ncols=['Pregnancies','Glucose','BloodPressure','SkinThickness',\n      'Insulin','BMI','DiabetesPedigreeFunction','Age']\nnum=df[cols]\nfor i in num.columns:\n    plt.hist(num[i])\n    plt.title(i)\n    plt.show()","1206eda3":"print(\"total number of rows : {0}\".format(len(df)))\nprint(\"number of rows with 0 Pregnancies: {0}\".format(len(df.loc[df['Pregnancies'] == 0])))\nprint(\"number of rows with 0 Glucose: {0}\".format(len(df.loc[df['Glucose'] == 0])))\nprint(\"number of rows with 0 BloodPressure: {0}\".format(len(df.loc[df['BloodPressure'] == 0])))\nprint(\"number of rows with 0 SkinThickness: {0}\".format(len(df.loc[df['SkinThickness'] == 0])))\nprint(\"number of rows with 0 Insulin: {0}\".format(len(df.loc[df['Insulin'] == 0])))\nprint(\"number of rows with 0 BMI: {0}\".format(len(df.loc[df['BMI'] == 0])))\nprint(\"number of rows with 0 DiabetesPedigreeFunction: {0}\".format(len(df.loc[df['DiabetesPedigreeFunction'] == 0])))\nprint(\"number of rows with 0 Ages: {0}\".format(len(df.loc[df['Age'] == 0])))","60473980":"from sklearn.impute import SimpleImputer\nzcol=['Glucose','BloodPressure','SkinThickness',\n      'Insulin','BMI']\nzcols=df[zcol]\nimputer = SimpleImputer(missing_values=0, strategy=\"mean\", verbose=0)\nimputed_df = pd.DataFrame(imputer.fit_transform(zcols))\nimputed_df.columns = zcols.columns\ntemp=imputed_df.copy()\nzcols=temp.copy()","0113ff76":"zcols.head()","a51d34aa":"df.drop(['Glucose','BloodPressure','SkinThickness',\n      'Insulin','BMI'], axis=1, inplace=True)","f7b6bbb0":"df=df.join(zcols)\ndf.head()","6b95a444":"df.dtypes","83752cb6":"outcome=df['Outcome']\ndf.drop(['Outcome'], axis=1, inplace=True)\ndf=df.join(outcome)\ndf.head()","9d7e1df3":"X=df.iloc[:,:-1]\ny=df.iloc[:,-1]","304a1fd5":"X.head()","88e4f9f4":"y.head()","e31a7e29":"# stratify the outcome\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train, y_test=train_test_split(X,y,test_size=0.25,random_state=0,stratify=y)\n#stratify=y","e96d70ec":"X_train.head()","75bc1c2e":"X_test.head()","4d0039b8":"from sklearn.model_selection import cross_val_score\nfrom sklearn import metrics","062e9111":"#Scaling the training and test dataset\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","9a2872e6":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\nkfold = StratifiedKFold(n_splits=8)\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","628e89cf":"from sklearn.linear_model import LogisticRegression","daca8be0":"'''lr = LogisticRegression(max_iter = 2000, random_state=0)\ncv = cross_val_score(lr,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\nlr.fit(X_train,y_train)\ny_pred_lr=lr.predict(X_test)\nprint('The accuracy of the Logistic Regression is',metrics.accuracy_score(y_pred_lr,y_test)*100)\n\n[0.76388889 0.73611111 0.69444444 0.77777778 0.81944444 0.73611111\n 0.77777778 0.83333333]\n76.73611111111111\nThe accuracy of the Logistic Regression is 75.0'''","a59ee1df":"'''#Hyperparameter Tuning \nlr = LogisticRegression(random_state=0)\nparam_grid = {'max_iter' : [2000,4000],\n              'penalty' : ['l1', 'l2','elasticnet'],\n              'C' : np.logspace(-4, 4, 50),\n              'solver' : ['newton-cg\u2019, \u2018lbfgs\u2019, \u2018liblinear\u2019, \u2018sag','saga']\n                }\n\nclf_lr = GridSearchCV(lr, param_grid = param_grid, cv = kfold, verbose = True, n_jobs = -1)\nbest_clf_lr = clf_lr.fit(X_train,y_train)\nbest_clf_lr.best_estimator_'''","502d27fb":"lr = LogisticRegression(C=0.8286427728546842, max_iter=2000, solver='saga', random_state=0)\ncv = cross_val_score(lr,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\nlr.fit(X_train,y_train)\ny_pred_lr=lr.predict(X_test)\nprint('The accuracy of the Logistic Regression is',metrics.accuracy_score(y_pred_lr,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_lr)\nprint(cm)\nclassification_report(y_test, y_pred_lr)","fdbb240d":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ncv = cross_val_score(gnb,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ngnb.fit(X_train,y_train)\ny_pred_gnb=gnb.predict(X_test)\nprint('The accuracy of the Naive Bayes is',metrics.accuracy_score(y_pred_gnb,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_gnb)\nprint(cm)\nclassification_report(y_test, y_pred_gnb)","ec19a4c0":"'''from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(random_state=0)\nrf.fit(X_train, y_train)\ncv = cross_val_score(rf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_rf = rf.predict(X_test)\nprint('The accuracy of the RandomForestClassifier is',metrics.accuracy_score(y_pred_rf,y_test)*100)\n\n[0.68055556 0.80555556 0.77777778 0.76388889 0.79166667 0.70833333\n 0.76388889 0.70833333]\n75.0\nThe accuracy of the RandomForestClassifier is 77.08333333333334'''","d3feed11":"'''#Hyperparameter Tuning\nrf = RandomForestClassifier(random_state = 0)\nparam_grid =  {'n_estimators': [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800], \n                                  'bootstrap': [True,False],\n                                  'max_depth': [3,4,5,6,7,8,9,10,15,20,50,None],\n                                  'max_features': [3,'auto','sqrt','log2'],\n                                  'bootstrap': [False, True],\n                                  'criterion': ['gini', 'entropy'],\n                                  'min_samples_leaf': [1,2,3,4,5,6,7,8,9,10],\n                                  'min_samples_split': [2 ,3,4,5,6,7,8,9,10]}\n                                  \nclf_rf_rnd = RandomizedSearchCV(rf, param_distributions = param_grid, n_iter = 300, \ncv = kfold, verbose = True, n_jobs = -1)\nbest_clf_rf_rnd = clf_rf_rnd.fit(X_train,y_train)\nbest_clf_rf_rnd.best_estimator_'''","72c24db2":"'''param_grid =  {'n_estimators': [500,600,700,800], \n                                  'bootstrap': [True,False],\n                                  'max_depth': [40,50,60,70],\n                                  'max_features': ['log2'],\n                                  'bootstrap': [True],\n                                  'criterion': ['entropy'],\n                                  'min_samples_leaf': [3,4,5,6],\n                                  'min_samples_split': [7,8,9,10]}\nclf_rf_gr = GridSearchCV(rf, param_grid = param_grid, \ncv = kfold, verbose = True, n_jobs = -1)\nbest_clf_rf_gr = clf_rf_gr.fit(X_train,y_train)\nbest_clf_rf_gr.best_estimator_\n\nRandomForestClassifier(criterion='entropy', max_depth=40, max_features='log2',\n                       min_samples_leaf=4, min_samples_split=9,\n                       n_estimators=500, random_state=0)'''","b2d12916":"'''param_grid =  {'n_estimators': [400,500,600,700,800], \n                                  'bootstrap': [True,False],\n                                  'max_depth': [40,50,60,70],\n                                  'max_features': ['log2'],\n                                  'bootstrap': [True],\n                                  'criterion': ['entropy'],\n                                  'min_samples_leaf': [3,4,5,6],\n                                  'min_samples_split': [7,8,9,10]}\nclf_rf_gr = GridSearchCV(rf, param_grid = param_grid, \ncv = kfold, verbose = True, n_jobs = -1)\nbest_clf_rf_gr = clf_rf_gr.fit(X_train,y_train)\nbest_clf_rf_gr.best_estimator_'''","e2c3b0dc":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(criterion='entropy', max_depth=40, max_features='log2',\n                       min_samples_leaf=4, min_samples_split=9,\n                       n_estimators=500, random_state=0)\nrf.fit(X_train, y_train)\ncv = cross_val_score(rf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_rf = rf.predict(X_test)\nprint('The accuracy of the RandomForestClassifier is',metrics.accuracy_score(y_pred_rf,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_rf)\nprint(cm)\nclassification_report(y_test, y_pred_rf)","46357564":"'''from sklearn.svm import SVC\nsvc = SVC(random_state = 0, probability=True)\nparam_grid =  {'kernel' :['linear', 'rbf\u2019, \u2018poly'],\n               'gamma' :[0.1,0.5, 1,5, 10,20,50,70, 100],\n               'C' :[0.1, 1, 10, 100, 1000],\n               'degree' :[0, 1, 2, 3, 4, 5, 6]}\nclf_svc_rnd = RandomizedSearchCV(svc, param_distributions = param_grid, n_iter = 200, \ncv = kfold, verbose = True, n_jobs = -1)\nbest_clf_svc_rnd = clf_svc_rnd.fit(X_train,y_train)\nbest_clf_svc_rnd.best_estimator_'''            ","06c8e610":"'''from sklearn.svm import SVC\nsvc = SVC(C=100, gamma=20, kernel='linear', probability=True, random_state=0)\nsvc.fit(X_train, y_train)\ncv = cross_val_score(svc,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_svc = svc.predict(X_test)\nprint('The accuracy of the Linear SVC is',metrics.accuracy_score(y_pred_svc,y_test)*100)'''","7e825930":"#Linear SVC\nfrom sklearn.svm import SVC\nsvcl = SVC(kernel = 'linear', random_state = 0, probability=True)\nsvcl.fit(X_train, y_train)\ncv = cross_val_score(svcl,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_svcl = svcl.predict(X_test)\nprint('The accuracy of the Linear SVC is',metrics.accuracy_score(y_pred_svcl,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_svcl)\nprint(cm)\nclassification_report(y_test, y_pred_svcl)","d1bf6329":"#rbf SVC\nfrom sklearn.svm import SVC\nsvck = SVC(kernel = 'rbf', random_state = 0, probability=True)\nsvck.fit(X_train, y_train)\ncv = cross_val_score(svck,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_svck = svck.predict(X_test)\nprint('The accuracy of the Kernel SVC is',metrics.accuracy_score(y_pred_svck,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_svck)\nprint(cm)\nclassification_report(y_test, y_pred_svck)","b065433b":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(random_state = 0)\ndt.fit(X_train, y_train)\ncv = cross_val_score(dt,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_dt = dt.predict(X_test)\nprint('The accuracy of the Decision Tree Classifier is',metrics.accuracy_score(y_pred_dt,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_dt)\nprint(cm)\nclassification_report(y_test, y_pred_dt)","51c914f2":"'''from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\ncv = cross_val_score(knn,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_knn = knn.predict(X_test)\nprint('The accuracy of the K-Neighbors Classifier is',metrics.accuracy_score(y_pred_knn,y_test)*100)'''","2c12a044":"'''from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nparam_grid = {'n_neighbors' : [3,5,7,9,11,13,15,16,17,19],\n              'weights' : ['uniform', 'distance'],\n              'algorithm' : ['auto', 'ball_tree','kd_tree'],\n              'p' : [1,2,3,4,5,6,7,8,9,10]}\nclf_knn = GridSearchCV(knn, param_grid = param_grid, cv = kfold, verbose = True, n_jobs = -1)\nbest_clf_knn = clf_knn.fit(X_train,y_train)\nbest_clf_knn.best_estimator_'''","1d656fff":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=15, weights='distance')\nknn.fit(X_train, y_train)\ncv = cross_val_score(knn,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_knn = knn.predict(X_test)\nprint('The accuracy of the K-Neighbors Classifier is',metrics.accuracy_score(y_pred_knn,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_knn)\nprint(cm)\nclassification_report(y_test, y_pred_knn)","8ac4acba":"from xgboost import XGBClassifier","bdd18ac6":"'''from xgboost import XGBClassifier\nxgb = XGBClassifier(random_state =0)\nxgb.fit(X_train, y_train)\ncv = cross_val_score(xgb,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_xgb = xgb.predict(X_test)\nprint('The accuracy of the XGB Classifier is',metrics.accuracy_score(y_pred_xgb,y_test)*100)\n\n[0.73611111 0.79166667 0.70833333 0.73611111 0.81944444 0.68055556\n 0.79166667 0.72222222]\n74.82638888888889\nThe accuracy of the XGB Classifier is 75.52083333333334'''","8d7403c5":"'''xgb = XGBClassifier(random_state = 0)\n\nparam_grid = {\n    'n_estimators': [20, 50, 100, 250,300,400, 500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000],\n    'colsample_bytree': [0.2,0.3,0.4, 0.5,0.6, 0.7, 0.8, 0.9, 1],\n    'max_depth': [2, 5, 8,10, 15, 20, 25, None],\n    'reg_alpha': [0, 0.5, 1],\n    'reg_lambda': [1, 1.5, 2,2.5,3,4],\n    'subsample': [0.2,0.3,0.4,0.5,0.6, 0.7, 0.8,0.9],\n    'learning_rate':[.01,0.05,0.1,0.2,0.3,0.5,0.6,0.7,0.9],\n    'gamma':[0,.01,.1,.5,1,10,20,30,40,50,70,100],\n    'min_child_weight':[0,.01,0.05,0.1,1,10,100],\n    'sampling_method': ['uniform', 'gradient_based']\n}\n\nclf_xgb_rnd = RandomizedSearchCV(xgb, param_distributions = param_grid, n_iter = 200, \ncv = kfold, verbose = True, n_jobs = -1)\nbest_clf_xgb_rnd = clf_xgb_rnd.fit(X_train,y_train)'''","6d282e45":"#best_clf_xgb_rnd.best_estimator_","f2572be2":"xgb = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.4, gamma=0.01, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.01, max_delta_step=0, max_depth=10,\n              min_child_weight=10, monotone_constraints='()',\n              n_estimators=1200, n_jobs=0, num_parallel_tree=1, random_state=0,\n              reg_alpha=0.5, reg_lambda=2, sampling_method='uniform',\n              scale_pos_weight=1, subsample=0.7, tree_method='exact',\n              validate_parameters=1, verbosity=None)\nxgb.fit(X_train, y_train)\ncv = cross_val_score(xgb,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_xgb = xgb.predict(X_test)\nprint('The accuracy of the XGB Classifier is',metrics.accuracy_score(y_pred_xgb,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_xgb)\nprint(cm)\nclassification_report(y_test, y_pred_xgb)","8467ad41":"from sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('lr', lr),('gnb',gnb),('knn',knn),\n                                            ('rf',rf),('svck',svck),('svcl',svcl),\n                                            ('xgb',xgb)], voting = 'soft') \nvoting_clf.fit(X_train, y_train)\ncv = cross_val_score(voting_clf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_vclf = voting_clf.predict(X_test)\nprint('The accuracy of the Voting Classifier is',metrics.accuracy_score(y_pred_vclf,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_vclf)\nprint(cm)\nclassification_report(y_test, y_pred_vclf)","6cd9bb2f":"from sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('rf',rf),('svck',svck),('knn',knn),\n                                            ('xgb',xgb)], voting = 'soft') \nvoting_clf.fit(X_train, y_train)\ncv = cross_val_score(voting_clf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_vclf = voting_clf.predict(X_test)\nprint('The accuracy of the Voting Classifier is',metrics.accuracy_score(y_pred_vclf,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_vclf)\nprint(cm)\nclassification_report(y_test, y_pred_vclf)","44a95650":"from sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('svck',svck),\n                                            ('rf',rf),\n                                            ('xgb',xgb)], voting = 'soft') \nvoting_clf.fit(X_train, y_train)\ncv = cross_val_score(voting_clf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_vclf = voting_clf.predict(X_test)\nprint('The accuracy of the Voting Classifier is',metrics.accuracy_score(y_pred_vclf,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_vclf)\nprint(cm)\nclassification_report(y_test, y_pred_vclf)","bda836c5":"from sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('lr', lr),('gnb',gnb),('knn',knn),\n                                            ('rf',rf),('svck',svck),('svcl',svcl),('dt',dt),\n                                            ('xgb',xgb)], voting = 'hard') \nvoting_clf.fit(X_train, y_train)\ncv = cross_val_score(voting_clf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_vclf = voting_clf.predict(X_test)\nprint('The accuracy of the Voting Classifier is',metrics.accuracy_score(y_pred_vclf,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_vclf)\nprint(cm)\nclassification_report(y_test, y_pred_vclf)","d4be6f35":"from sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('rf',rf),('svck',svck),('knn',knn),\n                                            ('xgb',xgb)], voting = 'hard') \nvoting_clf.fit(X_train, y_train)\ncv = cross_val_score(voting_clf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_vclf = voting_clf.predict(X_test)\nprint('The accuracy of the Voting Classifier is',metrics.accuracy_score(y_pred_vclf,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_vclf)\nprint(cm)\nclassification_report(y_test, y_pred_vclf)","5348863a":"from sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(estimators = [('svck',svck),\n                                            ('rf',rf),\n                                            ('xgb',xgb)], voting = 'hard') \nvoting_clf.fit(X_train, y_train)\ncv = cross_val_score(voting_clf,X_train,y_train,cv=kfold)\nprint(cv)\nprint(cv.mean()*100)\ny_pred_vclf = voting_clf.predict(X_test)\nprint('The accuracy of the Voting Classifier is',metrics.accuracy_score(y_pred_vclf,y_test)*100)\ncm=confusion_matrix(y_test, y_pred_vclf)\nprint(cm)\nclassification_report(y_test, y_pred_vclf)","0f222972":"SVM","c2019438":"XGBoost","3257cab7":"So, I got max accuracy of 78.125% using voting classifier with croos_val_score of 76.21% and recall of 0.61.","32d3b96d":"# PIMA Diabetes Dataset\n\nHere, I have implemented various Classification techniques and the best accuracy which I could come with was 78.125% with ensemble voting classifier.\n\nNote: In the dataset some independent variables have '0' values like Insulin, Blood Pressure(which realistically can't be zero). So, I have tried to replace those '0' values by using imputer technique.\n\nAgain, the accuracy is 78.125% with recall of 0.61 and cross_val_score of 76.21%.\n\nI have also tried by not altering those '0' values in some independent variables in another notebbok. To my surprise, without changing the 0 values, I was able to get an accuracy of 80.208% with  cross_val_score of 75.86% and recall of 0.66.\nIf you want, you can check out that notebook by clicking here: https:\/\/www.kaggle.com\/max22112019\/pima-diabetes-classification","645921d7":"Random Forest Classifier","eca0f5a5":"# Apply ML Algorithms","56baf545":"The dataset is balanced in terms of 0 and 1 outcomes.","735f9289":"Voting Classifier","378503dd":"Logistic Regression","5c3efc27":"GaussianNB","5f6e7c62":"All the O values have now been filled with median values","c9d622ea":"Decision Tree Classifier","3a4308fb":"Some variables have '0' values. However, we need to replace those '0' values by using imputer technique.","beda39d5":"K-Nearest Neighbours"}}