{"cell_type":{"bfa059a0":"code","cb2fbe5c":"code","b13bdcdc":"code","08eda697":"code","fe2da173":"code","3e230a5a":"code","f1e67064":"code","44362fc5":"code","5a3a5f9f":"code","2c565b37":"markdown","599555fa":"markdown","9d159e56":"markdown","f449f59b":"markdown","4fa68bc2":"markdown","f6bf533f":"markdown"},"source":{"bfa059a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cb2fbe5c":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as mpatches\n\nfrom pandas_profiling import ProfileReport\nfrom scipy.stats import shapiro\nfrom scipy.stats import levene\nimport missingno\n%matplotlib inline\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import iplot\nfrom collections import Counter\nfrom lightgbm import LGBMClassifier\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import VotingClassifier\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import plot_roc_curve\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\n\nimport warnings\nwarnings.filterwarnings('ignore')","b13bdcdc":"heart = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndf = heart.copy()\ndf.head()","08eda697":"def check_df(dataframe, head=5):\n    \n    print(\" SHAPE \".center(70,'#'))\n    print('Rows: {}'.format(dataframe.shape[0]))\n    print('Columns: {}'.format(dataframe.shape[1]))\n    print(\" TYPES \".center(70,'#'))\n    print(dataframe.dtypes)\n    print(\" HEAD \".center(70,'#'))\n    print(dataframe.head(head))\n    print(' TAIL '.center(70,'#'))\n    print(dataframe.tail(head))\n    print(' MISSING VALUES '.center(70,'#'))\n    print(dataframe.isnull().sum())\n    print(' DUPLICATED VALUES '.center(70,'#'))\n    print(dataframe.duplicated().sum())\n    print(\" QUANTILES \".center(70,'#'))\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n    \ncheck_df(df)","fe2da173":"desc = df.describe().T\ndesc_df = pd.DataFrame(index= [col for col in df.columns if df[col].dtype != 'O'], \n                   columns= df.describe().T.columns.tolist(),data= desc )\n\nf,ax = plt.subplots(figsize=(12,8))\nsns.heatmap(desc_df, annot=True,cmap = \"Blues\", fmt= '.0f',\n            ax=ax,linewidths = 5, cbar = False,\n            annot_kws={\"size\": 16})\n\nplt.xticks(size = 18)\nplt.yticks(size = 14, rotation = 0)\nplt.title(\"Descriptive Statistics\", size = 16)\nplt.show()","3e230a5a":"fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(25, 15))\n\ndf['temp_age'] = (df['age']\/5).astype('int')\nsns.set(style=\"darkgrid\")\n\n# set the figure size\n\n# top bar -> sum all values to find y position of the bars\ndf1 = df.groupby(['temp_age'])['sex'].count().reset_index(name = 'count')\ndff = df[df.sex == 0].groupby(['temp_age'])['sex'].count().reset_index(name = 'count')\nage = df1.merge(dff, on='temp_age', how='outer').fillna(0)\nage['temp_age'] =  age['temp_age'].apply(lambda x:str(x*5) + \"-\" + str((x+1)*5 - 1))\n\ndf['temp_trtbps'] = (df['trtbps']\/10).astype('int')\ndf1 = df.groupby(['temp_trtbps'])['sex'].count().reset_index(name = 'count')\ndff = df[df.sex == 0].groupby(['temp_trtbps'])['sex'].count().reset_index(name = 'count')\nresting_bp = df1.merge(dff, on='temp_trtbps', how='outer').fillna(0)\nresting_bp['temp_trtbps'] =  resting_bp['temp_trtbps'].apply(lambda x:str(x*10) + \"-\" + str((x+1)*10 - 1))\n\ndf['temp_chol'] = (df['chol']\/40).astype('int')\ndf1 = df.groupby(['temp_chol'])['sex'].count().reset_index(name = 'count')\ndff = df[df.sex == 0].groupby(['temp_chol'])['sex'].count().reset_index(name = 'count')\nchol = df1.merge(dff, on='temp_chol', how='outer').fillna(0)\nchol['temp_chol'] =  chol['temp_chol'].apply(lambda x:str(x*40) + \"-\" + str((x+1)*40 - 1))\n\ndf['temp_thalachh'] = (df['thalachh']\/15).astype('int')\ndf1 = df.groupby(['temp_thalachh'])['sex'].count().reset_index(name = 'count')\ndff = df[df.sex == 0].groupby(['temp_thalachh'])['sex'].count().reset_index(name = 'count')\nmaxBP = df1.merge(dff, on='temp_thalachh', how='outer').fillna(0)\nmaxBP['temp_thalachh'] =  maxBP['temp_thalachh'].apply(lambda x:str(x*15) + \"-\" + str((x+1)*15 - 1))\n\n# bar chart 1 -> top bars 1\nbar1 = sns.barplot(x = \"temp_age\", y = 'count_x', data=age, ax=ax[0][0],color='darkblue')\n\n# bar chart 1 -> bottom bars (group of 'sex=0')\nbar2 = sns.barplot(x=\"temp_age\", y= 'count_y', data=age, ax=ax[0][0], estimator=sum, ci=None,  color='lightblue')\n\n# bar1 chart 2\nbar1 = sns.barplot(x = \"temp_chol\", y = 'count_x', data=chol, ax=ax[0][1], color='darkblue')\n\n# bar chart 2 -> bottom bars (group of 'sex=0')\nbar2 = sns.barplot(x=\"temp_chol\", y= 'count_y', data=chol, ax=ax[0][1], estimator=sum, ci=None,  color='lightblue')\n\n# bar1 chart 2\nbar1 = sns.barplot(x = \"temp_trtbps\", y = 'count_x', data=resting_bp, ax=ax[1][0], color='darkblue')\n\n# bar chart 2 -> bottom bars (group of 'sex=0')\nbar2 = sns.barplot(x=\"temp_trtbps\", y= 'count_y', data=resting_bp, ax=ax[1][0], estimator=sum, ci=None,  color='lightblue')\n\n# bar1 chart 2\nbar1 = sns.barplot(x = \"temp_thalachh\", y = 'count_x', data=maxBP, ax=ax[1][1], color='darkblue')\n\n# bar chart 2 -> bottom bars (group of 'sex=0')\nbar2 = sns.barplot(x=\"temp_thalachh\", y= 'count_y', data=maxBP, ax=ax[1][1], estimator=sum, ci=None,  color='lightblue')\n\n# add legend\ntop_bar = mpatches.Patch(color='darkblue', label='Male')\nbottom_bar = mpatches.Patch(color='lightblue', label='Female')\nax[0][0].legend(handles=[top_bar, bottom_bar])\nax[0][0].set_title(\"Age vs Sex Plot\")\nax[0][0].set_xlabel(\"Age\")\nax[0][0].set_ylabel(\"Count\")\nax[0][1].legend(handles=[top_bar, bottom_bar])\nax[0][1].set_title(\"Cholesterol vs Sex Plot\")\nax[0][1].set_xlabel(\"Cholesterol (mg\/dl)\")\nax[0][1].set_ylabel(\"Count\")\nax[1][0].legend(handles=[top_bar, bottom_bar])\nax[1][0].set_title(\"Resting BP vs Sex Plot\")\nax[1][0].set_xlabel(\"Resting Bp (mm Hg)\")\nax[1][0].set_ylabel(\"Count\")\nax[1][1].legend(handles=[top_bar, bottom_bar])\nax[1][1].set_title(\"Max BP vs Sex Plot\")\nax[1][1].set_xlabel(\"Max BP (mm Hg)\")\nax[1][1].set_ylabel(\"Count\")\n\nfig.suptitle(\"Gender VS Quantitative Data\", fontsize=18)\n\n# show the graph\nplt.show()\n\ndf.drop(columns = ['temp_age','temp_trtbps','temp_chol','temp_thalachh'], inplace = True)","f1e67064":"sns.set_style(\"white\")\nmatrix = np.triu(df.corr(method=\"pearson\"))\nf,ax=plt.subplots(figsize = (15,15))\nx_axis_labels = ['age','sex','chest pain type','resting blood pressure','cholestoral','if fasting blood sugar > 120','resting electrocardiographic results','max heart rate','exercise induced angina','previous peak','slope','number of major vessels','thal rate','chance of heart attack']\ny_axis_labels = ['age','sex','chest pain type','resting blood pressure','cholestoral','if fasting blood sugar > 120','resting electrocardiographic results','max heart rate','exercise induced angina','previous peak','slope','number of major vessels','thal rate','chance of heart attack']\nsns.heatmap(df.corr(),xticklabels=x_axis_labels, yticklabels=y_axis_labels,annot= True,fmt = \".2f\",ax=ax,\n            vmin = -1, vmax = 1, mask = matrix, cmap = \"Blues\",\n            linewidth = 0.4,linecolor = \"white\",annot_kws={\"size\": 12})\nplt.xticks(rotation=90,size=10)\nplt.yticks(rotation=0,size=10)\nplt.title('Pearson Correlation Map', size = 14)\nplt.show()","44362fc5":"sub_df = ['age','sex','caa','trtbps','chol','thalachh','output']\nsns.pairplot(df[sub_df],height=5)","5a3a5f9f":"data = go.Scatter3d(x = df['age'],y = df['trtbps'],z = df['chol'],\n                    mode='markers',text=df['output'], marker=dict(color=df['output'],size=7,\n                                                colorscale='Blues',showscale=False,opacity=0.65))\n\nlayout = go.Layout(title=dict(text='Age - trtbps - chol',y=0.9,x=0.5,xanchor= 'center',yanchor= 'top'),\n                   scene = dict(xaxis = dict(title='Age'),\n                                yaxis = dict(title = 'trtbps'),\n                                zaxis = dict(title='chol')),template='plotly_dark')\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","2c565b37":"Map to show corelation between two categories. Darker values mean higher corelation. ","599555fa":"![cardioVA_public.jpg](attachment:a91f1c19-c8ab-4585-af30-92451ea3b518.jpg)","9d159e56":"The image above is a refrence image given by the cdc found here https:\/\/www.cdc.gov\/genomics\/visual\/visual_abstract.htm.","f449f59b":"### Observations\n1. There are more males in this dataset\n2. There are more males with a lower resting blood pressure than females\n3. The resting blood pressure is right skewed with a mean of 132\n4. There are more females with a higher cholesterol level than males\n5. The max bp is left skewed with a mean of 150","4fa68bc2":"### Data Info\n\n* Age : Age of the patient\n* Sex : Sex of the patient\n* cp : Chest Pain type chest pain type\n    + Value 1: typical angina\n    + Value 2: atypical angina\n    + Value 3: non-anginal pain\n    + Value 4: asymptomatic\n* trtbps : resting blood pressure (in mm Hg)\n* chol : cholestoral in mg\/dl fetched via BMI sensor\n* exang: exercise induced angina (1 = yes; 0 = no)\n* fbs : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n* rest_ecg : resting electrocardiographic results\n    + Value 0: normal\n    + Value 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n    + Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\n* thalach : maximum heart rate achieved\n* thalachh: maximum heart rate achieved\n* exng: exercise induced angina (1 = yes; 0 = no)\n* oldpeak: Previous peak\n* slp: Slope\n* caa: number of major vessels (0-3)\n* thall: Thal rate\n* output: \n    + 0= less chance of heart attack \n    + 1= more chance of heart attack","f6bf533f":"The correlation between the change of a heart attack and a higher max heart rate is 0.42. The data suggests that a higher max heart rate causes heart attacks. "}}