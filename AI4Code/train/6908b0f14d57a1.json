{"cell_type":{"1367e0e5":"code","67418691":"code","e31ba1a5":"code","2e1b353a":"code","6a8ee38d":"code","382b1fad":"code","77c3abd1":"code","3c652a2a":"code","2c7134f2":"code","607586f8":"code","91326c61":"code","746b9532":"code","1d1fc41c":"code","b0b2f3eb":"code","b8e400fd":"code","6e024ec7":"code","56b47613":"code","14440e3d":"code","453f8cd3":"code","71fef757":"code","7b4b1a9d":"code","2beccdc2":"code","55775ef3":"code","5df217c6":"code","796631f0":"code","7cd0eeba":"code","f33dfc1a":"code","78386b30":"code","6f2d203f":"code","f60cc2bb":"code","c3e0a5e5":"code","4ce9b0d1":"code","fdeff0a4":"code","e1e3853d":"code","33e168c0":"code","9c7e931d":"code","b2450ffc":"code","f698e463":"code","7068663c":"code","b49ff543":"code","8e58245c":"code","e517faf6":"code","e2ab621b":"code","366ef091":"code","5c2f469b":"code","378bb4bf":"code","965877a3":"code","72050954":"code","cfff78f7":"code","87228e58":"code","f901b5bb":"code","a5b69516":"code","900851fa":"code","e9cee2d3":"code","ecb493ad":"code","de15fced":"code","5e52210d":"code","b8db2b63":"code","6f9a748b":"code","e22fcda8":"code","53e8cba8":"code","da1d4736":"code","78529fe2":"code","310db5d8":"code","03bdddda":"code","898cf84e":"code","30d0fad8":"code","8d21c699":"code","0e1c08b5":"code","09940ce2":"code","33e9c8dd":"code","dee6b6be":"code","241e24c9":"code","aa885878":"code","efc9e717":"code","deedf9e9":"code","bb37429f":"code","5c27ad47":"code","8e1582d2":"code","adb35654":"code","c88198c8":"code","c459de2a":"code","4cef88d3":"code","5d1e89d2":"code","8193be20":"code","0a21b639":"code","d4167855":"code","8192bdea":"code","7cbb8e39":"code","0ea759f1":"code","c67b172b":"markdown","1bde2272":"markdown","6be4dd13":"markdown","f0d510a0":"markdown","bdc5c41c":"markdown","5f91ab9b":"markdown","1256b0b8":"markdown","b3ba792f":"markdown","1407a5dd":"markdown","9e8ff5ec":"markdown","f0f2d230":"markdown","dadfca05":"markdown","c1931d86":"markdown","479f06de":"markdown","e5870469":"markdown","34f033fd":"markdown","a0776b75":"markdown","ffb51389":"markdown","21eead5d":"markdown","152bb215":"markdown","20eaa343":"markdown","8ffca572":"markdown","f494b5ff":"markdown","a6918ba2":"markdown","3b26e823":"markdown","ba517d0b":"markdown","26874012":"markdown","26d720f2":"markdown","afc71a2a":"markdown","507a9996":"markdown","e2d76890":"markdown","0d9f9be7":"markdown","ff8976aa":"markdown","dd611139":"markdown","3ca38d28":"markdown","d3f52894":"markdown","b9fd711e":"markdown","c88b8767":"markdown","9120dde1":"markdown","e253b6ff":"markdown","a77cb761":"markdown","913dacbd":"markdown","a320890b":"markdown","54e3780c":"markdown","9b9a2f31":"markdown","62d412a3":"markdown","0ee5713d":"markdown","5390efd0":"markdown","9768f2f6":"markdown"},"source":{"1367e0e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67418691":"import matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split, KFold, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering\nfrom sklearn.manifold import TSNE\nfrom sklearn.metrics import r2_score\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom datetime import datetime\n\nimport warnings\nwarnings.filterwarnings('ignore')","e31ba1a5":"TRAIN_DATASET_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/test.csv'","2e1b353a":"df_train = pd.read_csv(TRAIN_DATASET_PATH, sep=\",\")\ndf_test = pd.read_csv(TEST_DATASET_PATH, sep=\",\")","6a8ee38d":"df_train.info()","382b1fad":"df_train['Id'] = df_train['Id'].astype(str)\ndf_train['DistrictId'] = df_train['DistrictId'].astype(str)","77c3abd1":"df_train.describe()","3c652a2a":"plt.hist(df_train['Price'], bins=20)\nplt.show()","2c7134f2":"df_num_features = df_train.select_dtypes(include=['float64','float32', 'float16']).copy()\ndf_num_features.drop('Price', axis=1, inplace=True)","607586f8":"df_num_features.head(5)","91326c61":"df_num_features.hist(figsize=(16,16), bins=20, grid=False)\nplt.show()","746b9532":"df_train['Rooms'].value_counts()","1d1fc41c":"df_train.loc[df_train['Rooms'] <= 5, 'Rooms'].hist(bins=10)\nplt.show()","b0b2f3eb":"df_train.loc[df_train['Rooms'] >= 6, 'Rooms'] = df_train['Rooms'].median()","b8e400fd":"df_train.loc[df_train['Rooms'] == 0, 'Rooms'] = 1","6e024ec7":"df_train['Rooms'].hist(bins=5)","56b47613":"df_train.loc[df_train['Square'] <= 200, 'Square'].hist(bins=20)\nplt.show()","14440e3d":"df_train.query('Square < 15')","453f8cd3":"df_train.loc[df_train['Square'] >= 300]","71fef757":"df_train.loc[df_train['Square'] >= 300, 'Square'] = df_train['Square'].median()","7b4b1a9d":"df_train.loc[df_train['LifeSquare'] <= 300, 'LifeSquare'].hist(bins=20)\nplt.show()","2beccdc2":"df_train.loc[df_train['LifeSquare'] >= 300, 'LifeSquare'] = df_train['LifeSquare'].median()","55775ef3":"df_train.loc[df_train['KitchenSquare'] <= 50, 'KitchenSquare'].hist(bins=20)\nplt.show()","5df217c6":"df_train.loc[df_train['KitchenSquare'] >= 50, 'KitchenSquare'] = df_train['KitchenSquare'].median()","796631f0":"df_train.query('(LifeSquare + KitchenSquare) > Square')","7cd0eeba":"df_train['FullSquare_outlier'] = 0\ndf_train.loc[(df_train['LifeSquare'] + df_train['KitchenSquare']) > df_train['Square'], 'FullSquare_outlier'] = 1","f33dfc1a":"df_train.query('KitchenSquare == 0 & Rooms > 1')","78386b30":"square_diff = df_train['Square'] - df_train['LifeSquare'] - df_train['KitchenSquare']\nsquare_diff.loc[(square_diff < square_diff.quantile(0.975)) & (square_diff > square_diff.quantile(0.025))].hist(bins=20)\nplt.show()","6f2d203f":"square_lifeSquare_div = df_train['LifeSquare'] \/ df_train['Square']\nsquare_lifeSquare_div.loc[(square_lifeSquare_div < square_lifeSquare_div.quantile(0.995))].hist(bins=20)\nplt.show()","f60cc2bb":"square_lifeSquare_div.median()","c3e0a5e5":"square_KitchenSquare_div = df_train['KitchenSquare'] \/ df_train['Square']\nsquare_KitchenSquare_div.loc[(square_KitchenSquare_div < square_KitchenSquare_div.quantile(0.995))].hist(bins=20)\nplt.show()","4ce9b0d1":"square_KitchenSquare_div.median()","fdeff0a4":"square_KitchenSquare_div_median = (df_train['KitchenSquare'] \/ df_train['Square']).median()\nsquare_lifeSquare_div_median = (df_train['LifeSquare'] \/ df_train['Square']).median()","e1e3853d":"df_train.loc[df_train['LifeSquare'].isna(), 'LifeSquare'] = df_train.loc[df_train['LifeSquare'].isna(), 'Square'] * square_lifeSquare_div.median()\ndf_train.loc[df_train['KitchenSquare'].isna(), 'KitchenSquare'] = df_train.loc[df_train['KitchenSquare'].isna(), 'Square'] * square_KitchenSquare_div.median()","33e168c0":"df_train[['Floor','HouseFloor']].describe()","9c7e931d":"df_train['Floor'].hist(bins=20)\nplt.show()","b2450ffc":"df_train['HouseFloor'].hist(bins=20)\nplt.show()","f698e463":"df_train.loc[df_train['HouseFloor'] > 50]","7068663c":"df_train.loc[df_train['HouseYear'] == 1977, 'HouseFloor'].describe()","b49ff543":"df_train['HouseFloor'].median()","8e58245c":"df_train.loc[df_train['HouseFloor'] > 50, 'HouseFloor'] = df_train['HouseFloor'].median()","e517faf6":"df_train['HouseFloor_outlier'] = 0\ndf_train.loc[df_train['Floor'] > df_train['HouseFloor'], 'HouseFloor_outlier'] = 1\ndf_train.loc[df_train['Floor'] == 0, 'HouseFloor_outlier'] = 1","e2ab621b":"plt.scatter(df_train['HouseFloor'], df_train['Floor'])","366ef091":"df_train.loc[df_train['HouseFloor_outlier'] == 1, 'HouseFloor'] = df_train.loc[df_train['HouseFloor_outlier'] == 1, 'Floor']","5c2f469b":"plt.scatter(df_train['HouseFloor'], df_train['Floor'])","378bb4bf":"df_int_features = df_train.select_dtypes(include=['int64','int32', 'int16']).copy()","965877a3":"df_int_features.head(5)","72050954":"df_train.loc[df_train['HouseYear'] > 2020]","cfff78f7":"df_train.loc[df_train['HouseYear'] > 2020, 'HouseYear'] = 2020","87228e58":"df_train['Social_1'].hist(bins=20)\nplt.show()","f901b5bb":"df_train['Social_1'].hist(bins=20)\nplt.show()","a5b69516":"df_train['Social_2'].hist(bins=20)\nplt.show()","900851fa":"df_train['Social_2'].hist(bins=20)\nplt.show()","e9cee2d3":"df_train.loc[~df_train['Healthcare_1'].isna(), 'Healthcare_1'].hist(bins=20)\nplt.show()","ecb493ad":"df_train.loc[~df_train['Healthcare_1'].isna()]","de15fced":"df_train.loc[~df_train['Healthcare_1'].isna(), 'DistrictId'].value_counts()","5e52210d":"df_train['DistrictId'].value_counts()","b8db2b63":"df_train.drop('Healthcare_1', axis=1, inplace=True)","6f9a748b":"df_train['Helthcare_2'].hist(bins=20)\nplt.show()","e22fcda8":"df_train.loc[df_train['Helthcare_2'] >100, 'Helthcare_2']","53e8cba8":"df_train['Shops_1'].hist(bins=20)\nplt.show()","da1d4736":"df_train['Shops_2'].value_counts()","78529fe2":"df_train['Ecology_1'].hist(bins=20)\nplt.show()","310db5d8":"df_train['Ecology_2'].value_counts()","03bdddda":"df_train['Ecology_2'].value_counts()","898cf84e":"class DataPreprocessing:\n\n    def __init__(self):\n        self.medians=None\n        self.lifeSquare_coef=None\n        self.KitchenSquare_coef=None\n        \n    def fit(self, X):  \n        self.medians = X.median()\n        self.lifeSquare_coef=(X['LifeSquare'] \/ X['Square']).median()\n        self.KitchenSquare_coef=(X['KitchenSquare'] \/ X['Square']).median()\n        \n    def transform(self, X):\n\n        # Rooms      \n        X.loc[X['Rooms'] >= 6, 'Rooms'] = self.medians['Rooms']\n        X.loc[X['Rooms'] == 0, 'Rooms'] = 1\n        \n        #Square\n        X.loc[X['Square'] >= 300, 'Square'] = self.medians['Square']\n        X.loc[X['Square'].isna(), 'Square'] = self.medians['Square']\n        \n        #LifeSquare\n        X.loc[X['LifeSquare'] >= 300, 'LifeSquare'] = self.medians['LifeSquare']\n        X.loc[X['LifeSquare'].isna(), 'LifeSquare'] = self.medians['LifeSquare']\n        \n        # KitchenSquare\n        X.loc[X['KitchenSquare'] >= 50, 'KitchenSquare'] = self.medians['KitchenSquare']\n        X.loc[X['KitchenSquare'].isna(), 'KitchenSquare'] = self.medians['KitchenSquare']\n\n        #All Squares\n        X['FullSquare_outlier'] = 0\n        \n        X.loc[(X['LifeSquare'] + X['KitchenSquare']) > X['Square'], 'FullSquare_outlier'] = 1\n        \n        X.loc[X['LifeSquare'].isna(), 'LifeSquare'] = X.loc[\n            X['LifeSquare'].isna(), 'Square'] * self.lifeSquare_coef\n        X.loc[df_train['KitchenSquare'].isna(), 'KitchenSquare'] = X.loc[\n            X['KitchenSquare'].isna(), 'Square'] * self.KitchenSquare_coef\n          \n        # HouseFloor, Floor\n        X.loc[X['HouseFloor'] > 50, 'HouseFloor'] = X['HouseFloor'].median()\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['HouseFloor_outlier'] == 1, 'HouseFloor'] = X.loc[X['HouseFloor_outlier'] == 1, 'Floor']\n        \n        \n        # HouseYear\n        current_year = datetime.now().year\n        df_train.loc[df_train['HouseYear'] > current_year, 'HouseYear'] = current_year\n        \n        # Healthcare_1\n        if 'Healthcare_1' in X.columns:\n            X.drop('Healthcare_1', axis=1, inplace=True)\n            \n        X.fillna(self.medians, inplace=True)\n        \n        return X","30d0fad8":"binary_to_numbers = {'A': 0, 'B': 1}\n\ndf_train['Ecology_2'] = df_train['Ecology_2'].replace(binary_to_numbers)\ndf_train['Ecology_3'] = df_train['Ecology_3'].replace(binary_to_numbers)\ndf_train['Shops_2'] = df_train['Shops_2'].replace(binary_to_numbers)","8d21c699":"df_train['Square_per_room'] = df_train['Square'] \/ df_train['Rooms']","0e1c08b5":"df_train","09940ce2":"district_means = df_train.groupby('DistrictId').mean()","33e9c8dd":"plt.plot(sorted(district_means['Price']))\nplt.show()","dee6b6be":"Dist_classes = pd.DataFrame({'class': np.arange(205), 'DistrictId': district_means.sort_values(by=['Price'])['Price'].keys()})","241e24c9":"df_train = df_train.merge(Dist_classes,on='DistrictId', how='left')","aa885878":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n \n        self.binary_to_numbers = None\n        self.district_classes = None\n        \n    def fit(self, X, y=None):\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictClass\n        if y is not None:\n            df = X.copy()\n            df['Price'] = y.values\n            district_means = df.groupby('DistrictId').mean()\n            self.district_classes = pd.DataFrame(\n                {'class': np.arange(205), 'DistrictId': district_means.sort_values(by=['Price'])['Price'].keys()})\n\n    def transform(self, X):\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].replace(binary_to_numbers)\n        X['Ecology_3'] = X['Ecology_3'].replace(binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].replace(binary_to_numbers)\n        \n        # mean square_of_room\n        X['Square_per_room'] = X['Square'] \/ X['Rooms']\n        \n        # DistrictId Class\n        \n        X = X.merge(self.district_classes,on='DistrictId', how='left')\n        X.loc[X['class'].isna(), 'class'] = X['class'].median()\n        return X\n    ","efc9e717":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)","deedf9e9":"X = train_df.drop(columns='Price')\ny = train_df['Price']","bb37429f":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.2, shuffle=True, random_state = 42)","5c27ad47":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)","8e1582d2":"X_train.shape, X_valid.shape, test_df.shape","adb35654":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)","c88198c8":"X_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)","c459de2a":"X_train.shape, X_valid.shape, test_df.shape","4cef88d3":"# parameters = {'n_estimators': [800,1000,1200],\n#               'max_depth':[8, 9, 10, 11, 12],\n#               'min_samples_leaf': [3, 4, 5]}\n# clf = GridSearchCV(clr,param_grid=parameters, scoring='r2',\n#                    cv=KFold(n_splits=5, random_state=21, shuffle=True))\n# clf.fit(X_train, y_train)","5d1e89d2":"# clf.best_params_","8193be20":"clr_fin = RandomForestRegressor(n_estimators=1200, max_depth=12, min_samples_leaf=4,  random_state=42)\nclr_fin.fit(X_train, y_train)\ny_pred = clr_fin.predict(X_valid)\nr2_score(y_valid, y_pred)","0a21b639":"test_df","d4167855":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","8192bdea":"predictions = clr_fin.predict(test_df)\npredictions","7cbb8e39":"submit['Price'] = predictions\nsubmit.head()","0ea759f1":"submit.to_csv('rf_submit.csv', index=False)","c67b172b":"#### Ecology_2","1bde2272":"#### RandomForest","6be4dd13":"#### \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n* Id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* Floor - \u044d\u0442\u0430\u0436\n* HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Healthcare_1, Helthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* Price - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","f0d510a0":"\u0411\u043e\u043b\u044c\u0448\u0438\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 lifeSquare \u0438\/\u0438\u043b\u0438 KitchenSquare. \u041e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n","bdc5c41c":"\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0435 \u0432\u044b\u0441\u043e\u0442\u044b \u044d\u0442\u0430\u0436\u0430 \u043f\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044e \u043a \u0432\u044b\u0441\u043e\u0442\u0435 \u0434\u043e\u043c\u0430, \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u0440\u0438 \u043c\u0430\u043b\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u0432\u044b\u0441\u043e\u0442\u044b \u0434\u043e\u043c\u0430, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0447\u0442\u043e \u044d\u0442\u043e \u043f\u043e\u043b\u0435 \u0447\u0430\u0441\u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043b\u043e\u0441\u044c","5f91ab9b":"#### \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0439\u043e\u043d\u044b \u043f\u043e \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0446\u0435\u043d\u0430\u043c \u043d\u0430 \u0436\u0438\u043b\u044c\u0435","1256b0b8":"#### Social_1","b3ba792f":"### \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447","1407a5dd":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0438 \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f lifeSquare \u0438 KitchenSquare","9e8ff5ec":"#### \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","f0f2d230":"### \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435","dadfca05":"#### \u041f\u0443\u0442\u0438 \u043a \u0434\u0438\u0440\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0438 \u0444\u0430\u0439\u043b\u0430\u043c","c1931d86":"\u041f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u0441\u043e Square \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u043c \u0436\u0438\u043b\u044b\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 300, \u0442\u0435 \u0447\u0442\u043e \u0431\u043e\u043b\u0435\u0435, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439","479f06de":"#### Ecology_3","e5870469":"#### C\u0440\u0435\u0434\u043d\u044f\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u044b","34f033fd":"#### Square","a0776b75":"#### Floor, HouseFloor","ffb51389":"#### HouseYear","21eead5d":"#### Rooms","152bb215":"#### Shops_1","20eaa343":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u0435\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u044b\u0435 6 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439, \u0440\u0430\u0432\u043d\u044b\u0435 0 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c 1, \u043d\u0435\u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u0430\u043b\u043e","8ffca572":"\u041f\u043b\u043e\u0449\u0430\u0434\u0438 \u0431\u043e\u043b\u0435\u0435 300 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439","f494b5ff":"#### \u0421\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437, \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0449\u0438\u0445 \u043f\u043b\u043e\u0449\u0430\u0434\u044c","a6918ba2":"#### \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","3b26e823":"\u0422\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 HealthCare_1, \u0441\u0440\u0435\u0434\u043d\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0430\u043c, \u043d\u043e \u043d\u0435 \u0432\u0441\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u043a\u0440\u044b\u0442\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0449\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u043e\u0435 \u043f\u043e\u043b\u0435, \u0432\u0432\u0438\u0434\u0443 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","ba517d0b":"#### Social_2","26874012":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0434\u043e\u043b\u0438 lifeSquare \u0438 KitchenSquare \u0434\u043b\u044f Square. \u0427\u0442\u043e\u0431\u044b \u0431\u043e\u043b\u0435\u0435 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","26d720f2":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u043e\u043b\u0435 \u0432\u044b\u0441\u043e\u0442\u044b \u0434\u043e\u043c\u0430, \u043d\u0430 \u043c\u0435\u0441\u0442\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u044d\u0442\u0430\u0436\u0430","afc71a2a":"#### KitchenSquare","507a9996":"#### Social_3","e2d76890":"#### Healthcare_1","0d9f9be7":"\u0421\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 Rooms, Sqare, lifeSquare, KitchenSquare, HouseFloor, \u0438\u043c\u0435\u044e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u044b","ff8976aa":"### Pipeline","dd611139":"#### Healthcare_2","3ca38d28":"#### Ecology_1","d3f52894":"\u041f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u043c\u0435\u043d\u0435\u0435 15 \u043e\u0447\u0435\u043d\u044c \u043c\u0430\u043b\u043e\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u044b, \u0445\u043e\u0442\u044f \u044d\u0442\u043e \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b. \u0412 \u0446\u0435\u043b\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043e\u0447\u0435\u043d\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u043d\u043e, \u043d\u043e \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u0445 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u0442\u043e\u0436\u0435 \u043d\u0435 \u0432\u0435\u0440\u043d\u043e, \u0442\u0430\u043a \u043a\u0430\u043a LifeSquare \u0438 KitchenSquare \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 Square. \u0418\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432\u043c\u0435\u0441\u0442\u0435","b9fd711e":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f KitchenSquare \u0431\u043e\u043b\u0435\u0435 50 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u043d\u044b\u043c\u0438","c88b8767":"#### \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","9120dde1":"#### \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f","e253b6ff":"#### \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432","a77cb761":"#### \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432","913dacbd":"### \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","a320890b":"\u0414\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0444\u0438\u0447\u0443","54e3780c":"# EDA","9b9a2f31":"\u0412\u0435\u0440\u043e\u044f\u0442\u043d\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0447\u0430\u0442\u043a\u0438, 177 == 17, \u0430 99 == 9. \u0432 pipeline \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438 \u043f\u043e \u0433\u043e\u0434\u0443 \u0441\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0434\u043e\u043c\u0430 \u043b\u0438\u0431\u043e \u043e\u0431\u0449\u0435\u0439 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439","62d412a3":"\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u044b \u043e\u043f\u0435\u0447\u0430\u0442\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0434\u043b\u044f pipeline \u043f\u0440\u043e\u0449\u0435 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0433\u043e\u0434","0ee5713d":"#### \u0412\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","5390efd0":"#### LifeSquare","9768f2f6":"\u041f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0431\u0435\u0437 \u043a\u0443\u0445\u043d\u0438 \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a KitchenSquare \u043a\u0430\u043a \u0438 LifeSquare \u0437\u0430\u0434\u0430\u043d\u044b \u043d\u0435 \u0432\u0435\u0437\u0434\u0435.\n\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438, \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043d\u0438"}}