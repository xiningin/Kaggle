{"cell_type":{"9eb1eb4b":"code","e7196783":"code","a8e17b0e":"code","1c860df4":"code","55ceddc0":"code","f4625986":"code","80aa7366":"code","9bc39412":"code","f01c4ec3":"code","bc13ad0f":"code","3b13c07a":"code","5fa6607f":"code","22fe4b10":"code","f6eb5b24":"code","c62f533d":"code","f4bcc43c":"code","8e69c7b7":"code","7fb11efc":"code","efbec29a":"code","c1915694":"code","8b98688b":"code","3e90c7e4":"code","b6ace483":"markdown"},"source":{"9eb1eb4b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e7196783":"#reading the data in dataframe\ntrain_data=pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_data=pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n","a8e17b0e":"#checking for maximum and minimum values of each colums\nprint(train_data.max())\nprint(test_data.min())","1c860df4":"#converting the data into nd_array\n\ntrain_data=train_data.values\ntest_data=test_data.values","55ceddc0":"#checking the shape of train data\nprint(train_data.shape)\nprint(test_data.shape)","f4625986":"# Here i am dividing the tain_data into train_X and train_Y\ntrain_X=train_data[:,1:785]\ntrain_Y=train_data[:,0]\n","80aa7366":"del train_data","9bc39412":"#shape of train_X and train_Y\nprint(train_X.shape)\nprint(train_Y.shape)","f01c4ec3":"#now reshaping the data into 28* 28 pixel\ntrain_X=train_X.reshape(-1,28,28)\ntest_data=test_data.reshape(-1,28,28)","bc13ad0f":"train_X.shape","3b13c07a":"#plotting the a particular image along with its label\nimport matplotlib.pyplot as plt\n\nplt.imshow(train_X[100])\nprint('\\n')\nprint(train_Y[100])","5fa6607f":"#normalizing the data so that learning can be fast\ntrain_X=train_X\/255\ntest_data=test_data\/255","22fe4b10":"# converting the labels into one hot encoder\nfrom keras.utils.np_utils import to_categorical\ntrain_Y = to_categorical(train_Y,num_classes=10)","f6eb5b24":"#now it's time for the model building\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Conv2D,Flatten,Dropout,MaxPool2D\nfrom keras.optimizers import RMSprop\n\n\nmodel=Sequential(layers=[Conv2D(32,kernel_size=(2,2),strides=(1,1),padding='same',activation='relu',input_shape=(28,28,1)),\n                MaxPool2D(pool_size=(2,2),strides=(1,1),padding='valid'),\n                Dropout(0.2),\n                Conv2D(64,kernel_size=(2,2),strides=(1,1),padding='same',activation='relu'),\n                MaxPool2D(pool_size=(2,2),strides=(1,1),padding='valid'),\n                Dropout(0.2),\n                Flatten(),\n                Dense(128,activation='relu'),\n                Dense(10,activation='softmax')])\n","c62f533d":"train_X=train_X.reshape(-1,28,28,1)","f4bcc43c":"#define the model optimizer \noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n#compiling the model \nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","8e69c7b7":"model.fit(train_X,train_Y,epochs=15,verbose=1,batch_size=32)","7fb11efc":"test_data=test_data.reshape(-1,28,28,1)","efbec29a":"results=model.predict(test_data,batch_size=32,verbose=1)","c1915694":"results = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","8b98688b":"results","3e90c7e4":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"\/kaggle\/working\/submission.csv\",index=False)","b6ace483":"Here our train data contain 42000 grayscale image each of 28 * 28 pixels with label of each image\nand our data set contain 28000 images"}}