{"cell_type":{"e36ad0f9":"code","3bb80e53":"code","c1bd6731":"code","1d9f05b7":"code","b3349be0":"code","9a2cf8e1":"code","c1fd1f20":"code","a14d5ffa":"code","9ac715a6":"code","d6d9cd4f":"code","b6e23a9d":"code","9a2992f3":"code","c39106bf":"code","0d868b90":"code","8abbb0f6":"code","cf689cec":"code","70d00c39":"code","3f7b13df":"code","df816f64":"code","7caed02d":"code","d3b8e207":"code","de418808":"code","928add4f":"code","eadc2145":"code","3accc1fc":"code","afabe27a":"code","777d4979":"code","48c9d92a":"code","1d2a0a79":"code","52f9dd3f":"code","19b51041":"code","d1c56a74":"code","5a5cc9f3":"code","52a6b367":"code","38dba867":"markdown","f6a164a0":"markdown","62af9f99":"markdown","0f97f2da":"markdown","2a756669":"markdown","4128ff4b":"markdown","e22c3627":"markdown","aefed78e":"markdown"},"source":{"e36ad0f9":"#library imports\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\n\nimport itertools\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix","3bb80e53":"#loading data\n(X_train, y_train), (X_test, y_test) = keras.datasets.fashion_mnist.load_data()","c1bd6731":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","1d9f05b7":"plt.figure(figsize=(15, 6))\nn_rows = 5\nn_cols = 10\n\nfor i in range(n_rows * n_cols):\n    ax = plt.subplot(n_rows, n_cols, i+1)\n    plt.imshow(X_train[i], cmap='binary')\n    plt.axis('off')\n    \nplt.tight_layout()\nplt.show()","b3349be0":"y_train[:50]","9a2cf8e1":"class_names = [\"T-shirt\/top\", \"Trouser\", \"Pullover\", \"Dress\", \"Coat\", \"Sandal\", \"Shirt\", \"Sneaker\", \"Bag\", \"Ankle boot\"]","c1fd1f20":"class_names[y_train[0]]","a14d5ffa":"plt.figure(figsize=(15, 6))\nn_rows = 5\nn_cols = 10\n\nfor i in range(n_rows * n_cols):\n    ax = plt.subplot(n_rows, n_cols, i+1)\n    plt.imshow(X_train[i], cmap='binary')\n    plt.axis('off')\n    plt.title(class_names[y_train[i]], fontdict={'fontsize': 12, 'color': 'black'})\n    \nplt.tight_layout()\nplt.show()","9ac715a6":"#further split training set into training and validation set\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","d6d9cd4f":"#scale data to range 0-1\nX_train = X_train \/ 255.\nX_valid = X_valid \/ 255.\nX_test = X_test\/ 255.","b6e23a9d":"#scale inputs to mean 0 and standard deviation 1\npixel_means = X_train.mean(axis=0, keepdims=True)\npixel_stds = X_train.std(axis=0, keepdims=True) + 1e-7\nX_train = (X_train - pixel_means) \/ pixel_stds\nX_valid = (X_valid - pixel_means) \/ pixel_stds\nX_test = (X_test - pixel_means) \/ pixel_stds\n\n#reshape data to [28, 28, 1], since Keras requires an extra dimension in the end which corresponds to channels\nX_train = X_train[..., np.newaxis]\nX_valid = X_valid[..., np.newaxis]\nX_test = X_test[..., np.newaxis]","9a2992f3":"X_train.shape, X_valid.shape, X_test.shape","c39106bf":"#encode labels to one hot vectors\ny_train = keras.utils.to_categorical(y_train, num_classes=10)\ny_valid = keras.utils.to_categorical(y_valid, num_classes=10)\ny_test = keras.utils.to_categorical(y_test, num_classes=10)","0d868b90":"keras.backend.clear_session()\ntf.random.set_seed(42)\nnp.random.seed(42)","8abbb0f6":"from functools import partial\n\nDefaultConv2D = partial(keras.layers.Conv2D, kernel_size=3, activation='relu', padding='same')\n\nmodel = keras.models.Sequential([\n    DefaultConv2D(filters=64, kernel_size=7, input_shape=[28, 28, 1]), \n    keras.layers.MaxPool2D(pool_size=2), \n    DefaultConv2D(filters=128), \n    DefaultConv2D(filters=128), \n    keras.layers.MaxPool2D(pool_size=2), \n    DefaultConv2D(filters=256), \n    DefaultConv2D(filters=256), \n    keras.layers.MaxPool2D(pool_size=2), \n    keras.layers.Flatten(), \n    keras.layers.Dense(units=128, activation='relu'), \n    keras.layers.Dropout(0.5), \n    keras.layers.Dense(units=64, activation='relu'), \n    keras.layers.Dropout(0.5), \n    keras.layers.Dense(units=10, activation='softmax')])","cf689cec":"model.summary()","70d00c39":"model.compile(loss='categorical_crossentropy', optimizer='nadam', metrics=['accuracy'])","3f7b13df":"learning_rate_reduction_cb = keras.callbacks.ReduceLROnPlateau(\n    monitor='val_accuracy', patience=3, verbose=1, factor=0.5, min_lr=0.00001)","df816f64":"model_checkpoint_cb = keras.callbacks.ModelCheckpoint(\n    'cnn_fashion_mnist_v1.h5', monitor='val_accuracy', save_best_only=True)\ncallbacks = [learning_rate_reduction_cb, model_checkpoint_cb]","7caed02d":"history = model.fit(X_train, y_train, epochs=30, validation_data=(X_valid, y_valid), callbacks=callbacks)","d3b8e207":"model = keras.models.load_model('cnn_fashion_mnist_v1.h5')\nmodel.evaluate(X_valid, y_valid)","de418808":"keras.backend.clear_session()\ntf.random.set_seed(42)\nnp.random.seed(42)","928add4f":"DefaultConv2D = partial(keras.layers.Conv2D, kernel_size=3, strides=1, padding='same', use_bias=False)\n\nclass ResidualUnit(keras.layers.Layer):\n    def __init__(self, filters, strides=1, activation='relu', **kwargs):\n        super().__init__(**kwargs)\n        self.activation = keras.activations.get(activation)\n        self.main_layers = [DefaultConv2D(filters, strides=strides), \n                            keras.layers.BatchNormalization(), \n                            self.activation, \n                            DefaultConv2D(filters), \n                            keras.layers.BatchNormalization()]\n        self.skip_layers = []\n        if strides > 1:\n            self.skip_layers = [DefaultConv2D(filters, kernel_size=1, strides=strides), \n                                keras.layers.BatchNormalization()]\n    \n    def call(self, inputs):\n        Z = inputs\n        for layer in self.main_layers:\n            Z = layer(Z)\n        skip_Z = inputs\n        for layer in self.skip_layers:\n            skip_Z = layer(skip_Z)\n        return self.activation(Z + skip_Z)","eadc2145":"model = keras.models.Sequential()\nmodel.add(DefaultConv2D(64, kernel_size=7, input_shape=[28, 28, 1]))\nmodel.add(keras.layers.BatchNormalization())\nmodel.add(keras.layers.Activation('relu'))\nmodel.add(keras.layers.MaxPool2D(pool_size=3, strides=2, padding='same'))\nprev_filters = 64\nfor filters in [64] * 3 + [128] * 4 + [256] * 6 + [512] * 3:\n    strides = 1 if filters == prev_filters else 2\n    model.add(ResidualUnit(filters, strides=strides))\n    prev_filters = filters\nmodel.add(keras.layers.GlobalAvgPool2D())\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(10, activation='softmax'))","3accc1fc":"model.summary()","afabe27a":"model.compile(loss='categorical_crossentropy', optimizer='nadam', metrics=['accuracy'])","777d4979":"history = model.fit(X_train, y_train, epochs=30, validation_data=(X_valid, y_valid), callbacks=[learning_rate_reduction_cb])","48c9d92a":"model.evaluate(X_valid, y_valid)","1d2a0a79":"fig, ax = plt.subplots(2, 1)\nax[0].plot(history.history['loss'], color='b', label='Training loss')\nax[0].plot(history.history['val_loss'], color='r', label='Validation loss')\nax[0].legend(loc='best', shadow=True)\nax[1].plot(history.history['accuracy'], color='b', label='Training accuracy')\nax[1].plot(history.history['val_accuracy'], color='r', label='Validation accuracy')\nax[1].legend(loc='best', shadow=True)\nplt.show()","52f9dd3f":"def plot_confusion_matrix(cm, classes, title='Confusion Matrix', cmap=plt.cm.Blues):\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    threshold = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j], horizontalalignment='center', \n                 color='white' if cm[i, j] > threshold else 'black')\n    plt.tight_layout()\n    plt.ylabel('True Label')\n    plt.xlabel('Predicted Label')","19b51041":"y_pred = model.predict(X_valid)\ny_pred_classes = np.argmax(y_pred, axis=1)\ny_true = np.argmax(y_valid, axis=1)\nconfusion_matrix = confusion_matrix(y_true, y_pred_classes)","d1c56a74":"plot_confusion_matrix(confusion_matrix, classes=range(10))","5a5cc9f3":"class_names","52a6b367":"model.evaluate(X_test, y_test)","38dba867":"We will use ReduceLROnPlateau to reduce the learning rate by half if the accuracy is not improved after 3 epochs:","f6a164a0":"Let's try and build a ResNet-34 architecture from scratch. First we will define a ResidualUnit which is the core of ResNet:","62af9f99":"# Model Building","0f97f2da":"Lastly, we will also use ModelCheckpoint callback to keep the model that has achieve the best performance so far:","2a756669":"The accuracy has slightly improved using the ResNet-34 architecture.","4128ff4b":"Here we can see that the model has the most trouble classifying 'Shirt' (class_names[6]), and misclassifying as 'T-shirt\/top' (class_names[0]).","e22c3627":"# Model Evaluation","aefed78e":"# Data Preparation"}}