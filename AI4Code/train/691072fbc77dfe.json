{"cell_type":{"7ff68f9b":"code","2c8ec12f":"code","acc6600c":"code","1acd0a98":"code","0d6f5ea1":"code","160b57a9":"code","8450a546":"code","8efec843":"code","b83cef8f":"code","ab819851":"code","9be6459f":"code","cff003e7":"code","08b16458":"code","392bdf7a":"code","f08e096e":"code","cbb1d26d":"code","3e02ef37":"code","70a175a4":"code","49c4e34b":"code","bb4eaf09":"code","4e758bf9":"code","0882be65":"code","d22cb813":"code","56249397":"code","04ac3545":"code","f0b47cb3":"code","7ab0660a":"code","4ecba226":"code","d196bbe8":"code","f4203e08":"code","edf40b47":"code","0b847d33":"code","512ce792":"code","17377be6":"code","ac1143aa":"code","07666f8e":"code","eef53e23":"code","84354ae7":"code","3d251690":"code","0c7356b9":"code","e36aade6":"code","7d3644cb":"code","de036093":"code","a1e3cf71":"code","f6a16601":"code","785bb6c6":"code","4aa4c292":"code","f085fd7b":"code","9ddb6b3d":"code","25b07642":"code","2c9cbf74":"code","316b0a46":"code","cb25c5c3":"code","3df6c48c":"code","0771814b":"code","67b62bc1":"code","f0da6647":"code","964b975f":"code","6577f207":"code","ccb0d55d":"code","22c199f8":"code","c7075736":"code","e329b14d":"code","a3a68a46":"code","20d24713":"code","8ec2b455":"code","1fbfa425":"code","e645c033":"code","91969a5e":"code","04d5de95":"code","c83614aa":"code","762e10db":"code","4c6f294f":"code","83ca668f":"code","35e34819":"code","56e39fd0":"code","bb288e3f":"code","c202253e":"code","3b0d6f08":"code","b0347e70":"markdown","628b4b56":"markdown","51e8f41f":"markdown","ed191206":"markdown","2643f1bf":"markdown","6541ebb6":"markdown","ef7d4ad1":"markdown","36212b26":"markdown","efb342ad":"markdown","aa318316":"markdown","78ab9dd3":"markdown","4f048244":"markdown","45241cea":"markdown","67c982f3":"markdown","3112c9a9":"markdown","87091929":"markdown","04916491":"markdown","c7119a35":"markdown","9ba01f1d":"markdown","d8e716c0":"markdown","a97ed4c4":"markdown","bfc9d3c3":"markdown","e951cfa8":"markdown","1aeb78eb":"markdown","372b2715":"markdown","fc430886":"markdown","e984f4ab":"markdown"},"source":{"7ff68f9b":"!pip install pycountry_convert\n!pip install folium\n!pip install plotly","2c8ec12f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker \n#import pycountry_convert as pc\nimport folium\nimport branca\nfrom datetime import datetime, timedelta,date\nfrom scipy.interpolate import make_interp_spline, BSpline\nimport plotly.express as px\nimport json, requests\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker \nimport folium\nimport branca\nfrom datetime import datetime, timedelta,date\nfrom scipy.interpolate import make_interp_spline, BSpline\nimport plotly.express as px\nimport json, requests\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"xgridoff\"\n\n\n%matplotlib inline\n\n\n%matplotlib inline","acc6600c":"import pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\n\nreq = requests.get('https:\/\/www.worldometers.info\/coronavirus\/')\nsoup = BeautifulSoup(req.text, \"lxml\")\n\ndf_country = soup.find('div',attrs={\"id\" : \"nav-tabContent\"}).find('table',attrs={\"id\" : \"main_table_countries_today\"}).find_all('tr')\narrCountry = []\nfor i in range(8,len(df_country)-1):\n#for i in range(1,205):\n    tmp = df_country[i].find_all('td')\n    if (tmp[0].string.find('<a') == -1):\n        country = [tmp[0].string]\n    else:\n        country = [tmp[0].a.string] # Country\n    for j in range(1,12):\n        if (str(tmp[j].string) == 'None' or str(tmp[j].string) == ' '):\n            country = country + [0]\n        else:\n            #country = country + [float(tmp[j].string.replace(',','').replace('+',''))]\n            #Float have been removed due to error\n            country = country + [(tmp[j].string.replace(',','').replace('+',''))]\n    arrCountry.append(country)\ndf_worldinfor = pd.DataFrame(arrCountry)\ndf_worldinfor.columns = ['Country','Total Cases','Cases','Total Deaths','Deaths','Total Recovers','Active','Serious Critical',\n                        'Total Cases\/1M pop','Deaths\/1M pop','Total Test','Tests\/1M pop']\n#df_worldinfor.columns = ['Country','Total Cases','Cases','Total Deaths','Deaths','Total Recovers','Active','Serious Critical',\n#                         'Total Cases\/1M pop']\nfor i in range(0,len(df_worldinfor)):\n    df_worldinfor['Country'].iloc[i] = df_worldinfor['Country'].iloc[i].strip()","1acd0a98":"#df_worldinfor.to_csv('testingdataworldwide.csv')\ndf_worldinfor.head()\n#df_worldinfor=pd.to_numeric(df_worldinfor[\"Total Cases\"], downcast=\"float\")\ndf_worldinfor1=df_worldinfor.apply(pd.to_numeric,errors='ignore')\ndf_worldinfor1['Total Recovers']= pd.to_numeric(df_worldinfor1['Total Recovers'],errors='coerce')\ndf_worldinfor1.head()","0d6f5ea1":"df_worldinfor1 = df_worldinfor1[df_worldinfor1.Country != 'Total:']\ndf_worldinfor1.style.background_gradient(cmap='Wistia')","160b57a9":"df_worlddata = df_worldinfor1[df_worldinfor1.Country != 'World']\ndf_worlddata.index = df_worlddata[\"Country\"]\ndf_worlddata = df_worlddata.drop(['Country'],axis=1)\ndf_worlddata.head()","8450a546":"df_test=df_worlddata.drop(['Total Cases','Cases','Total Deaths','Deaths','Total Recovers','Active','Serious Critical',\n                           'Total Cases\/1M pop','Deaths\/1M pop'],axis=1)","8efec843":"df_test.head()","b83cef8f":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_test.sort_values('Tests\/1M pop')[\"Tests\/1M pop\"].index[-50:],df_test.sort_values('Tests\/1M pop')[\"Tests\/1M pop\"].values[-50:],color=\"red\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Tests\/1M pop \",fontsize=18)\nplt.title(\"Top Countries (Tests\/1M pop )\",fontsize=20)\nplt.grid(alpha=0.3)","ab819851":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_test.sort_values('Total Test')[\"Total Test\"].index[-50:],df_test.sort_values('Total Test')[\"Total Test\"].values[-50:],color=\"crimson\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Total Test\",fontsize=18)\nplt.title(\"Top Countries (Total Test )\",fontsize=20)\nplt.grid(alpha=0.3)","9be6459f":"df_test_Final=df_worldinfor1.drop(['Cases','Deaths','Total Recovers','Active','Serious Critical','Deaths\/1M pop','Total Cases\/1M pop'],axis=1)\n","cff003e7":"df_test_Final[\"MortalityRate\"] = np.round(100*df_test_Final[\"Total Deaths\"]\/df_test_Final[\"Total Cases\"],2)\ndf_test_Final[\"Positive\"] = np.round(100*df_test_Final[\"Total Cases\"]\/df_test_Final[\"Total Test\"],2)","08b16458":"df_test_Final = df_test_Final[df_test_Final.Country != 'World']\ndf_test_Final.head(2)","392bdf7a":"df_test_Final.style.background_gradient(cmap='Blues',subset=[\"Total Test\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Tests\/1M pop\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Total Cases\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Total Deaths\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"MortalityRate\"])\\\n                        .background_gradient(cmap='bone_r',subset=[\"Positive\"])","f08e096e":"df_test_Final.corr().style.background_gradient(cmap='Blues').format(\"{:.2f}\")","cbb1d26d":"df_test_Final_top = df_test_Final[df_test_Final['Total Test'] > 200000] ","3e02ef37":"fig = px.bar(df_test_Final_top.sort_values(\"Total Test\"),\n            x='Country', y=\"Total Test\",\n            text = \"MortalityRate\",\n            hover_name=\"Country\",\n            hover_data=[\"Total Cases\",\"Total Deaths\",\"Total Test\",\"Positive\"],\n            title='COVID-19: Tests Over Countries',\n)\n\nfig.update_xaxes(title_text=\"Country\")\nfig.update_yaxes(title_text=\"Number of Tests (Text on bars is Mortality Rate %)\")\nfig.show()\n\n","70a175a4":"fig = px.pie(df_test_Final_top, values='Total Test', names='Country')\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()","49c4e34b":"fig = px.pie(df_test_Final_top, values='Tests\/1M pop', names='Country')\nfig.update_traces(textposition='inside',textfont_size=14)\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()","bb4eaf09":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_worlddata.sort_values('Total Cases')[\"Total Cases\"].index[-20:],df_worlddata.sort_values('Total Cases')[\"Total Cases\"].values[-20:],color=\"red\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Total Cases\",fontsize=18)\nplt.title(\"Top Countries (Total #)\",fontsize=20)\nplt.grid(alpha=0.3)","4e758bf9":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_worlddata.sort_values('Active')[\"Active\"].index[-20:],df_worlddata.sort_values('Active')[\"Active\"].values[-20:],color=\"darkcyan\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Active\",fontsize=18)\nplt.title(\"Top Countries (Active #)\",fontsize=20)\nplt.grid(alpha=0.3)","0882be65":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_worlddata.sort_values('Serious Critical')[\"Serious Critical\"].index[-20:],df_worlddata.sort_values('Serious Critical')[\"Serious Critical\"].values[-20:],color=\"crimson\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Serious Critical\",fontsize=18)\nplt.title(\"Top Countries (Critical #)\",fontsize=20)\nplt.grid(alpha=0.3)","d22cb813":"# Retriving Dataset\nconfirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\n\n# Depricated\ndf_recovered = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nrecovered = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")","56249397":"covid_country = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")","04ac3545":"confirmed = confirmed.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndeaths = deaths.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\nrecovered = recovered.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ncovid_country = covid_country.rename(columns={\"Country_Region\": \"country\"})\ncovid_country[\"Active\"] = covid_country[\"Confirmed\"]-covid_country[\"Recovered\"]-covid_country[\"Deaths\"]","f0b47cb3":"confirmed.head(),deaths.head(),covid_country.head(),recovered.head()","7ab0660a":"confirmed.head()","4ecba226":"confirmed1=pd.melt(confirmed,id_vars=['state','country','Lat','Long'],var_name='date', value_name='Confirmed')\nconfirmed1['date'] = confirmed1['date'].astype('datetime64[ns]') \nconfirmed1.sort_values(by=\"date\")","d196bbe8":"grouped = confirmed1.groupby('date')['date', 'Confirmed'].sum().reset_index()\n\nfig = px.line(grouped, x=\"date\", y=\"Confirmed\", \n              title=\"Worldwide Confirmed Cases Over Time\")\nfig.show()\n\nfig = px.line(grouped, x=\"date\", y=\"Confirmed\", \n              title=\"Worldwide Confirmed Cases (Logarithmic Scale) Over Time\", \n              log_y=True)\nfig.show()","f4203e08":"Confirmed_US = confirmed1[confirmed1['country'] == \"US\"].reset_index()\nUSData = Confirmed_US.groupby('date')['Confirmed'].sum().reset_index()\nConfirmed_Spain = confirmed1[confirmed1['country'] == \"Spain\"].reset_index()\nSpainData = Confirmed_Spain.groupby('date')['Confirmed'].sum().reset_index()\nConfirmed_Italy = confirmed1[confirmed1['country'] == \"Italy\"].reset_index()\nItalyData = Confirmed_Italy.groupby('date')['Confirmed'].sum().reset_index()\nConfirmed_India = confirmed1[confirmed1['country'] == \"India\"].reset_index()\nIndiaData = Confirmed_India.groupby('date')['Confirmed'].sum().reset_index()\nConfirmed_France = confirmed1[confirmed1['country'] == \"France\"].reset_index()\nFranceData = Confirmed_France.groupby('date')['Confirmed'].sum().reset_index()\nConfirmed_China = confirmed1[confirmed1['country'] == \"China\"].reset_index()\nChinaData = Confirmed_China.groupby('date')['Confirmed'].sum().reset_index()\nConfirmed_UK = confirmed1[confirmed1['country'] == \"United Kingdom\"].reset_index()\nUKData = Confirmed_UK.groupby('date')['Confirmed'].sum().reset_index()\nConfirmed_Germany = confirmed1[confirmed1['country'] == \"Germany\"].reset_index()\nGermanyData = Confirmed_Germany.groupby('date')['Confirmed'].sum().reset_index()\nConfirmed_Iran = confirmed1[confirmed1['country'] == \"Iran\"].reset_index()\nIranData = Confirmed_Iran.groupby('date')['Confirmed'].sum().reset_index()\n\nWorld_rest = confirmed1[~confirmed1['country'].isin(['China', 'Italy', 'US','Spain','Italy','Iran','France','United Kingdom','Germany'])].reset_index()\nWorld_rest = World_rest.groupby('date')['date', 'Confirmed'].sum().reset_index()\n","edf40b47":"plot_titles = ['China', 'Italy', 'US','Spain','Iran','France','United Kingdom','Germany', 'Rest of the World']\npio.templates.default = \"plotly_dark\"\nfig = px.line(ChinaData, x=\"date\", y=\"Confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[0].upper()} Over Time\", \n              color_discrete_sequence=['#F61067'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(ItalyData, x=\"date\", y=\"Confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[1].upper()} Over Time\", \n              color_discrete_sequence=['#91C4F2'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(USData, x=\"date\", y=\"Confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[2].upper()} Over Time\", \n              color_discrete_sequence=['#6F2DBD'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(SpainData, x=\"date\", y=\"Confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[3].upper()} Over Time\", \n              color_discrete_sequence=['#6F2DBD'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(IranData, x=\"date\", y=\"Confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[4].upper()} Over Time\", \n              color_discrete_sequence=['#6F2DBD'],\n              height=500\n             )\nfig.show()\n\n\nfig = px.line(FranceData, x=\"date\", y=\"Confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[5].upper()} Over Time\", \n              color_discrete_sequence=['#6F2DBD'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(UKData, x=\"date\", y=\"Confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[6].upper()} Over Time\", \n              color_discrete_sequence=['#6F2DBD'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(GermanyData, x=\"date\", y=\"Confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[7].upper()} Over Time\", \n              color_discrete_sequence=['#6F2DBD'],\n              height=500\n             )\nfig.show()\n\n\nfig = px.line(World_rest, x=\"date\", y=\"Confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[8].upper()} Over Time\", \n              color_discrete_sequence=['#FFDF64'],\n              height=500\n             )\nfig.show()\nout = \"output\/\"","0b847d33":"countries=dict()\nfor cnt in confirmed1['country'].unique():\n    countries[cnt]=confirmed1.loc[confirmed1['country']==cnt,'country'].unique()","512ce792":"countries","17377be6":"india_data = requests.get('https:\/\/api.rootnet.in\/covid19-in\/unofficial\/covid19india.org\/statewise').json()\nindia_covid = pd.io.json.json_normalize(india_data['data']['statewise'])\nindia_covid = india_covid.set_index(\"state\")","ac1143aa":"total = india_covid.sum()\ntotal.name = \"Total\"\npd.DataFrame(total).transpose().style.background_gradient(cmap='OrRd',axis=1)","07666f8e":"india_covid.corr().style.background_gradient(cmap='Reds')","eef53e23":"india_covid.style.background_gradient(cmap='viridis')","84354ae7":"india_covid[india_covid['deaths'] > 5].style.background_gradient(cmap='PuBu')","3d251690":"india_covid[india_covid['recovered'] > 50].style.background_gradient(cmap='PuBu')","0c7356b9":"india_covid[india_covid['active'] > 50].style.background_gradient(cmap='afmhot')","e36aade6":"india_covid[india_covid['active'] < 30].style.background_gradient(cmap='gist_heat')","7d3644cb":"\nlocations = {\n    \"Kerala\" : [10.8505,76.2711],\n    \"Maharashtra\" : [19.7515,75.7139],\n    \"Karnataka\": [15.3173,75.7139],\n    \"Telangana\": [18.1124,79.0193],\n    \"Uttar Pradesh\": [26.8467,80.9462],\n    \"Rajasthan\": [27.0238,74.2179],\n    \"Gujarat\":[22.2587,71.1924],\n    \"Delhi\" : [28.7041,77.1025],\n    \"Punjab\":[31.1471,75.3412],\n    \"Tamil Nadu\": [11.1271,78.6569],\n    \"Haryana\": [29.0588,76.0856],\n    \"Madhya Pradesh\":[22.9734,78.6569],\n    \"Jammu and Kashmir\":[33.7782,76.5762],\n    \"Ladakh\": [34.1526,77.5770],\n    \"Andhra Pradesh\":[15.9129,79.7400],\n    \"West Bengal\": [22.9868,87.8550],\n    \"Bihar\": [25.0961,85.3131],\n    \"Chhattisgarh\":[21.2787,81.8661],\n    \"Chandigarh\":[30.7333,76.7794],\n    \"Uttarakhand\":[30.0668,79.0193],\n    \"Himachal Pradesh\":[31.1048,77.1734],\n    \"Goa\": [15.2993,74.1240],\n    \"Odisha\":[20.9517,85.0985],\n    \"Andaman and Nicobar Islands\": [11.7401,92.6586],\n    \"Puducherry\":[11.9416,79.8083],\n    \"Manipur\":[24.6637,93.9063],\n    \"Mizoram\":[23.1645,92.9376],\n    \"Assam\":[26.2006,92.9376],\n    \"Meghalaya\":[25.4670,91.3662],\n    \"Tripura\":[23.9408,91.9882],\n    \"Arunachal Pradesh\":[28.2180,94.7278],\n    \"Jharkhand\" : [23.6102,85.2799],\n    \"Nagaland\": [26.1584,94.5624],\n    \"Sikkim\": [27.5330,88.5122],\n    \"Dadra and Nagar Haveli\":[20.1809,73.0169],\n    \"Lakshadweep\":[10.5667,72.6417],\n    \"Daman and Diu\":[20.4283,72.8397]    \n}\nindia_covid[\"Lat\"] = \"\"\nindia_covid[\"Long\"] = \"\"\nfor index in india_covid.index :\n    india_covid.loc[india_covid.index == index,\"Lat\"] = locations[index][0]\n    india_covid.loc[india_covid.index == index,\"Long\"] = locations[index][1]","de036093":"# url = \"https:\/\/raw.githubusercontent.com\/Subhash9325\/GeoJson-Data-of-Indian-States\/master\/Indian_States\"\n# state_json = requests.get(url).json()\nindia = folium.Map(location=[23,80], zoom_start=4,max_zoom=6,min_zoom=4,height=500,width=\"80%\")\nfor i in range(0,len(india_covid[india_covid['confirmed']>0].index)):\n    folium.Circle(\n        location=[india_covid.iloc[i]['Lat'], india_covid.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+india_covid.iloc[i].name+\"<\/h5>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(india_covid.iloc[i]['confirmed'])+\"<\/li>\"+\n        \"<li>Active:   \"+str(india_covid.iloc[i]['active'])+\"<\/li>\"+\n        \"<li>Recovered:   \"+str(india_covid.iloc[i]['recovered'])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(india_covid.iloc[i]['deaths'])+\"<\/li>\"+\n        \n        \"<li>Mortality Rate:   \"+str(np.round(india_covid.iloc[i]['deaths']\/(india_covid.iloc[i]['confirmed']+1)*100,2))+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=(int(np.log2(india_covid.iloc[i]['confirmed']+1)))*15000,\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(india)\n\nindia","a1e3cf71":"USA_Covid = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-13-2020.csv\")\n\n\n\nUSA_Covid = USA_Covid.loc[USA_Covid[\"Country_Region\"]== \"US\"]\nUSA_Covid = USA_Covid.rename(columns={\"Admin2\":\"County\"})","f6a16601":"USA_Covid.loc[:,[\"Province_State\",\"Confirmed\",\"Deaths\",\"County\"]].sort_values(\"Confirmed\",ascending=False).set_index(\"County\")[:16].style.background_gradient(cmap='Wistia')","785bb6c6":"USA_Covid[USA_Covid['Confirmed'] > 5000].style.background_gradient(cmap='afmhot')","4aa4c292":"# Retriving Dataset\nconfirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\n\n# Depricated\ndf_recovered = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nrecovered = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")","f085fd7b":"covid_country = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")","9ddb6b3d":"confirmed = confirmed.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndeaths = deaths.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\nrecovered = recovered.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ncovid_country = covid_country.rename(columns={\"Country_Region\": \"country\"})\ncovid_country[\"Active\"] = covid_country[\"Confirmed\"]-covid_country[\"Recovered\"]-covid_country[\"Deaths\"]\n","25b07642":"def plot_params(ax,axis_label= None, plt_title = None,label_size=15, axis_fsize = 15, title_fsize = 20, scale = 'linear' ):\n    # Tick-Parameters\n    ax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.tick_params(which='both', width=1,labelsize=label_size)\n    ax.tick_params(which='major', length=6)\n    ax.tick_params(which='minor', length=3, color='0.8')\n    \n    # Grid\n    plt.grid(lw = 1, ls = '-', c = \"0.7\", which = 'major')\n    plt.grid(lw = 1, ls = '-', c = \"0.9\", which = 'minor')\n\n    # Plot Title\n    plt.title( plt_title,{'fontsize':title_fsize})\n    \n    # Yaxis sacle\n    plt.yscale(scale)\n    plt.minorticks_on()\n    # Plot Axes Labels\n    xl = plt.xlabel(axis_label[0],fontsize = axis_fsize)\n    yl = plt.ylabel(axis_label[1],fontsize = axis_fsize)\n    \ndef visualize_covid_cases(confirmed, deaths, continent=None , country = None , state = None, period = None, figure = None, scale = \"linear\"):\n    x = 0\n    if figure == None:\n        f = plt.figure(figsize=(10,10))\n        # Sub plot\n        ax = f.add_subplot(111)\n    else :\n        f = figure[0]\n        # Sub plot\n        ax = f.add_subplot(figure[1],figure[2],figure[3])\n    \n    plt.tight_layout(pad=10, w_pad=5, h_pad=5)\n    \n    stats = [confirmed, deaths]\n    label = [\"Confirmed\", \"Deaths\"]\n    \n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else: \n        params = [\"All\", \"All\"]\n    color = [\"darkcyan\",\"crimson\"]\n    marker_style = dict(linewidth=3, linestyle='-', marker='o',markersize=4, markerfacecolor='#ffffff')\n    for i,stat in enumerate(stats):\n        if params[1] == \"All\" :\n            cases = np.sum(np.asarray(stat.iloc[:,5:]),axis = 0)[x:]\n        else :\n            cases = np.sum(np.asarray(stat[stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        date = np.arange(1,cases.shape[0]+1)[x:]\n        plt.plot(date,cases,label = label[i]+\" (Total : \"+str(cases[-1])+\")\",color=color[i],**marker_style)\n\n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(stats[0].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1].iloc[:,5:]),axis = 0)[x:]\n    else :\n        Total_confirmed =  np.sum(np.asarray(stats[0][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        \n    text = \"From \"+stats[0].columns[5]+\" to \"+stats[0].columns[-1]+\"\\n\"\n    text += \"Mortality rate : \"+ str(int(Total_deaths[-1]\/(Total_confirmed[-1])*10000)\/100)+\"\\n\"\n    text += \"Last 5 Days:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-6])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-6])+\"\\n\"\n    text += \"Last 24 Hours:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-2])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-2])+\"\\n\"\n    \n    plt.text(0.02, 0.78, text, fontsize=15, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n    \n    # Plot Axes Labels\n    axis_label = [\"Days (\"+confirmed.columns[5]+\" - \"+confirmed.columns[-1]+\")\",\"No of Cases\"]\n    \n    # Plot Parameters\n    plot_params(ax,axis_label,scale = scale)\n    \n    # Plot Title\n    if params[1] == \"All\" :\n        plt.title(\"COVID-19 Cases World\",{'fontsize':25})\n    else:   \n        plt.title(\"COVID-19 Cases for \"+params[1] ,{'fontsize':25})\n        \n    # Legend Location\n    l = plt.legend(loc= \"best\",fontsize = 15)\n    \n    if figure == None:\n        plt.show()\n        \ndef get_total_cases(cases, country = \"All\"):\n    if(country == \"All\") :\n        return np.sum(np.asarray(cases.iloc[:,5:]),axis = 0)[-1]\n    else :\n        return np.sum(np.asarray(cases[cases[\"country\"] == country].iloc[:,5:]),axis = 0)[-1]\n    \ndef get_mortality_rate(confirmed,deaths, continent = None, country = None):\n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else :\n        params = [\"All\", \"All\"]\n    \n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(confirmed.iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths.iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/Total_confirmed)*100,2)\n    else :\n        Total_confirmed =  np.sum(np.asarray(confirmed[confirmed[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths[deaths[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/Total_confirmed)*100,2)\n    \n    return np.nan_to_num(mortality_rate)\ndef dd(date1,date2):\n    return (datetime.strptime(date1,'%m\/%d\/%y') - datetime.strptime(date2,'%m\/%d\/%y')).days\n\n\nout = \"output\/\"","2c9cbf74":"country_df = covid_country.copy().drop(['Lat','Long_','Last_Update'],axis =1)\ncountry_df.index = country_df[\"country\"]\ncountry_df = country_df.drop(['country'],axis=1)\n","316b0a46":"country_df.head()","cb25c5c3":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(country_df.sort_values('Confirmed')[\"Confirmed\"].index[-20:],country_df.sort_values('Confirmed')[\"Confirmed\"].values[-20:],color=\"red\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top Countries (Confirmed Cases)\",fontsize=20)\nplt.grid(alpha=0.3)\n","3df6c48c":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(country_df.sort_values('Deaths')[\"Deaths\"].index[-20:],country_df.sort_values('Deaths')[\"Deaths\"].values[-20:],color=\"crimson\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top Countries (Death #)\",fontsize=20)\nplt.grid(alpha=0.3)\n\n","0771814b":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(country_df.sort_values('Active')[\"Active\"].index[-20:],country_df.sort_values('Active')[\"Active\"].values[-20:],color=\"crimson\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top Countries (Active #)\",fontsize=20)\nplt.grid(alpha=0.3)\n","67b62bc1":"f = plt.figure(figsize=(20,15))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(country_df.sort_values('Recovered')[\"Recovered\"].index[-20:],country_df.sort_values('Recovered')[\"Recovered\"].values[-20:],color=\"limegreen\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Recovered Cases\",fontsize=18)\nplt.title(\"Top Countries (Recovered #)\",fontsize=20)\nplt.grid(alpha=0.3)\n","f0da6647":"pd.DataFrame(country_df.sum()).transpose().style.background_gradient(cmap='Wistia',axis=1)","964b975f":"country_df.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='PuBu')\n","6577f207":"world_map = folium.Map(location=[10,0], tiles=\"cartodbpositron\", zoom_start=2,max_zoom=6,min_zoom=2)\nfor i in range(0,len(confirmed)):\n    folium.Circle(\n        location=[confirmed.iloc[i]['Lat'], confirmed.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+confirmed.iloc[i]['country']+\"<\/h5>\"+\n                    \"<div style='text-align:center;'>\"+str(np.nan_to_num(confirmed.iloc[i]['state']))+\"<\/div>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(confirmed.iloc[i,-1])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(deaths.iloc[i,-1])+\"<\/li>\"+\n        \"<li>Mortality Rate:   \"+str(np.round(deaths.iloc[i,-1]\/(confirmed.iloc[i,-1]+1.00001)*100,2))+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=(int((np.log(confirmed.iloc[i,-1]+1.00001)))+0.2)*50000,\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(world_map)\n\nworld_map\n","ccb0d55d":"confirmed = confirmed.replace(np.nan, '', regex=True)\ndeaths = deaths.replace(np.nan, '', regex=True)","22c199f8":"df_countries = confirmed.groupby([\"country\"]).sum()\ndf_countries = df_countries.sort_values(df_countries.columns[-1],ascending = False)\ncountries = df_countries[df_countries[df_countries.columns[-1]] >= 9000].index\n\ncols =2\nrows = int(np.ceil(countries.shape[0]\/cols))\nf = plt.figure(figsize=(20,8*rows))\nfor i,country in enumerate(countries):\n    visualize_covid_cases(confirmed, deaths,country = country,figure = [f,rows,cols, i+1])\n\nplt.show()","c7075736":"temp = confirmed.groupby('country').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(confirmed.columns[-1], ascending= False)\n\nthreshold = 50\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i >= 9:\n        if country != \"India\" and country != \"Japan\" :\n            continue\n    x = 91\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:x]\n     \n    date = np.arange(0,len(t[:x]))\n    xnew = np.linspace(date.min(), date.max(), 91)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    if country != \"India\":\n        plt.plot(xnew,power_smooth,'-o',label = country,linewidth =3, markevery=[-1])\n    else:\n        marker_style = dict(linewidth=4, linestyle='-', marker='o',markersize=10, markerfacecolor='#ffffff')\n        plt.plot(date,t,\"-.\",label = country,**marker_style)\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,91,7),[ \"D \"+str(i) for i in range(91)][::7])     \n\n# Reference lines \nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every socend day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n\n# India is following trend similar to doulbe the cases in 4 days but it may increase the rate \nx = np.arange(0,26)\ny = 2**(x\/4+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"Red\")\nplt.annotate(\".. every 4 days\",(x[-3],y[-1]),color=\"Red\",xycoords=\"data\",fontsize=14,alpha = 0.8)\n\n# plot Params\nplt.xlabel(\"Day\",fontsize=17)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize=17)\nplt.title(\"Trend Comparison of Different Countries\\n and India (confirmed) \",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.show()","e329b14d":"temp = deaths.groupby('country').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(deaths.columns[-1], ascending= False)\n\nthreshold = 10\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i > 10:\n        break\n    x = 91\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:x]\n     \n    date = np.arange(0,len(t[:x]))\n    xnew = np.linspace(date.min(), date.max(), 91)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    plt.plot(xnew,power_smooth,'-o',label = country,linewidth =3, markevery=[-1])\n\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,91,7),[ \"D \"+str(i) for i in range(91)][::7])     \n\n# Reference lines \nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every socend day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n# plot Params\nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Deaths\",fontsize=17)\nplt.title(\"Trend Comparison of Different Countries \\n(Deaths)\",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.show()","a3a68a46":"rows = 4\nf = plt.figure(figsize=(15,10*rows))\n\nstats = [covid_country.loc[:,['country','Confirmed']],covid_country.loc[:,['country','Deaths']],covid_country.loc[:,['country','Active']],covid_country.loc[:,['country','Recovered']]]\nlabel = [\"Confirmed\",\"Deaths\",\"Active\",\"Recovered\"]\nthreshold = [4000,100,4000,1000]\nfor i, stat in enumerate(stats):\n    plt.tight_layout()\n    df_countries = stat.groupby([\"country\"]).sum()\n    df_countries = df_countries.sort_values(df_countries.columns[-1],ascending= False)\n    others = df_countries[df_countries[df_countries.columns[-1]] < threshold[i] ].sum()[-1]\n    df_countries = df_countries[df_countries[df_countries.columns[-1]] > threshold[i]]\n    df_countries = df_countries[df_countries.columns[-1]]\n    df_countries[\"others\"] = others\n    labels = [df_countries.index[i] +\" (\" + str(int(df_countries[i])) +\") \"for i in range(df_countries.shape[0])]\n\n    ax = f.add_subplot(rows,1,i+1)\n    plt.pie(df_countries, labels=labels,autopct='%1.1f%%',pctdistance=0.85, labeldistance=1.1,textprops = {'fontsize':10.5})\n    my_circle=plt.Circle( (0,0), 0.7, color='white')\n    p=plt.gcf()\n    p.gca().add_artist(my_circle)\n    plt.text(0.5,0.5,\"World Total \"+label[i]+ \" COVID-19 Cases\\n\"+str(stat.sum().values[1]), horizontalalignment='center',verticalalignment='center',transform=ax.transAxes, size=18, alpha = 0.6)\n\n\nplt.show()\n","20d24713":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom random import random\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom tqdm import tqdm\n\ndef RMSLE(pred,actual):\n    return np.sqrt(np.mean(np.power((np.log(pred+1)-np.log(actual+1)),2)))","8ec2b455":"pd.set_option('mode.chained_assignment', None)\ntest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\")\ntrain['Province_State'].fillna('', inplace=True)\ntest['Province_State'].fillna('', inplace=True)\ntrain['Date'] =  pd.to_datetime(train['Date'])\ntest['Date'] =  pd.to_datetime(test['Date'])\ntrain = train.sort_values(['Country_Region','Province_State','Date'])\ntest = test.sort_values(['Country_Region','Province_State','Date'])","1fbfa425":"train[['ConfirmedCases', 'Fatalities']] = train.groupby(['Country_Region', 'Province_State'])[['ConfirmedCases', 'Fatalities']].transform('cummax') ","e645c033":"train['NewCases'] = train['ConfirmedCases'] - train['ConfirmedCases'].shift(1)\ntrain['NewCases'] = train['NewCases'].fillna(0.0)\ntrain['FatalityNew'] = train['Fatalities'] - train['Fatalities'].shift(1)\ntrain['FatalityNew'] = train['FatalityNew'].fillna(0.0)\ntrain['MortalityRate'] = train['Fatalities'] \/ train['ConfirmedCases']\ntrain['MortalityRate'] = train['MortalityRate'].fillna(0.0)\ntrain['GrowthRate']= train['NewCases']\/train['NewCases'].shift(1)\ntrain['GrowthRate']= train['GrowthRate'].replace([-np.inf, np.inf],  0.0)\ntrain['GrowthRate']= train['GrowthRate'].fillna(0.0) ","91969a5e":"train.head()","04d5de95":"train.head()","c83614aa":"from sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\n\nfeature_day = [1,20,50,100,200,500,1000]\ndef CreateInput(data):\n    feature = []\n    for day in feature_day:\n        #Get information in train data\n        data.loc[:,'Number day from ' + str(day) + ' case'] = 0\n        if (train[(train['Country_Region'] == country) & (train['Province_State'] == province) & (train['ConfirmedCases'] < day)]['Date'].count() > 0):\n            fromday = train[(train['Country_Region'] == country) & (train['Province_State'] == province) & (train['ConfirmedCases'] < day)]['Date'].max()        \n        else:\n            fromday = train[(train['Country_Region'] == country) & (train['Province_State'] == province)]['Date'].min()       \n        for i in range(0, len(data)):\n            if (data['Date'].iloc[i] > fromday):\n                day_denta = data['Date'].iloc[i] - fromday\n                data['Number day from ' + str(day) + ' case'].iloc[i] = day_denta.days \n        feature = feature + ['Number day from ' + str(day) + ' case']\n    \n    return data[feature]\npred_data_all = pd.DataFrame()\nwith tqdm(total=len(train['Country_Region'].unique())) as pbar:\n    for country in train['Country_Region'].unique():\n        for province in train[(train['Country_Region'] == country)]['Province_State'].unique():\n            df_train = train[(train['Country_Region'] == country) & (train['Province_State'] == province)]\n            df_test = test[(test['Country_Region'] == country) & (test['Province_State'] == province)]\n            X_train = CreateInput(df_train)\n            y_train_confirmed = df_train['ConfirmedCases'].ravel()\n            y_train_fatalities = df_train['Fatalities'].ravel()\n            X_pred = CreateInput(df_test)\n\n            # Define feature to use by X_pred\n            feature_use = X_pred.columns[0]\n            for i in range(X_pred.shape[1] - 1,0,-1):\n                if (X_pred.iloc[0,i] > 0):\n                    feature_use = X_pred.columns[i]\n                    break\n            idx = X_train[X_train[feature_use] == 0].shape[0]          \n            adjusted_X_train = X_train[idx:][feature_use].values.reshape(-1, 1)\n            adjusted_y_train_confirmed = y_train_confirmed[idx:]\n            adjusted_y_train_fatalities = y_train_fatalities[idx:] #.values.reshape(-1, 1)\n              \n            adjusted_X_pred = X_pred[feature_use].values.reshape(-1, 1)\n\n            model = make_pipeline(PolynomialFeatures(2), BayesianRidge())\n            model.fit(adjusted_X_train,adjusted_y_train_confirmed)                \n            y_hat_confirmed = model.predict(adjusted_X_pred)\n\n            model.fit(adjusted_X_train,adjusted_y_train_fatalities)                \n            y_hat_fatalities = model.predict(adjusted_X_pred)\n\n            pred_data = test[(test['Country_Region'] == country) & (test['Province_State'] == province)]\n            pred_data['ConfirmedCases_hat'] = y_hat_confirmed\n            pred_data['Fatalities_hat'] = y_hat_fatalities\n            pred_data_all = pred_data_all.append(pred_data)\n        pbar.update(1)\n    \ndf_val = pd.merge(pred_data_all,train[['Date','Country_Region','Province_State','ConfirmedCases','Fatalities']],on=['Date','Country_Region','Province_State'], how='left')\ndf_val.loc[df_val['Fatalities_hat'] < 0,'Fatalities_hat'] = 0\ndf_val.loc[df_val['ConfirmedCases_hat'] < 0,'ConfirmedCases_hat'] = 0\n\ndf_val_1 = df_val.copy()","762e10db":"RMSLE(df_val[(df_val['ConfirmedCases'].isnull() == False)]['ConfirmedCases'].values,df_val[(df_val['ConfirmedCases'].isnull() == False)]['ConfirmedCases_hat'].values)","4c6f294f":"RMSLE(df_val[(df_val['Fatalities'].isnull() == False)]['Fatalities'].values,df_val[(df_val['Fatalities'].isnull() == False)]['Fatalities_hat'].values)","83ca668f":"val_score = []\nfor country in df_val['Country_Region'].unique():\n    df_val_country = df_val[(df_val['Country_Region'] == country) & (df_val['Fatalities'].isnull() == False)]\n    val_score.append([country, RMSLE(df_val_country['ConfirmedCases'].values,df_val_country['ConfirmedCases_hat'].values),RMSLE(df_val_country['Fatalities'].values,df_val_country['Fatalities_hat'].values)])\n    \ndf_val_score = pd.DataFrame(val_score) \ndf_val_score.columns = ['Country','ConfirmedCases_Scored','Fatalities_Scored']\ndf_val_score.sort_values('ConfirmedCases_Scored', ascending = False)","35e34819":"country = \"India\"\ndf_val = df_val_1\ndf_country = df_val[df_val['Country_Region'] == country].groupby(['Date','Country_Region']).sum().reset_index()\ndf_train = train[(train['Country_Region'].isin(df_country['Country_Region'].unique())) & (train['ConfirmedCases'] > 0)].groupby(['Date']).sum().reset_index()\n\nidx = df_country[((df_country['ConfirmedCases'].isnull() == False) & (df_country['ConfirmedCases'] > 0))].shape[0]\nfig = px.line(df_country, x=\"Date\", y=\"ConfirmedCases_hat\", title='Forecast Total Cases of ' + df_country['Country_Region'].values[0])\nfig.add_scatter(x=df_train['Date'], y=df_train['ConfirmedCases'], mode='lines', name=\"Actual train\", showlegend=True)\nfig.add_scatter(x=df_country['Date'][0:idx], y=df_country['ConfirmedCases'][0:idx], mode='lines', name=\"Actual test\", showlegend=True)\nfig.show()\n\nfig = px.line(df_country, x=\"Date\", y=\"Fatalities_hat\", title='Forecast Total Fatalities of ' + df_country['Country_Region'].values[0])\nfig.add_scatter(x=df_train['Date'], y=df_train['Fatalities'], mode='lines', name=\"Actual train\", showlegend=True)\nfig.add_scatter(x=df_country['Date'][0:idx], y=df_country['Fatalities'][0:idx], mode='lines', name=\"Actual test\", showlegend=True)\n\nfig.show()","56e39fd0":"df_val = df_val_1\nsubmission = df_val[['ForecastId','ConfirmedCases_hat','Fatalities_hat']]\nsubmission.columns = ['ForecastId','ConfirmedCases','Fatalities']\nsubmission.to_csv('submission.csv', index=False)\nsubmission","bb288e3f":"index_columns = ['Province\/State','Country\/Region','Lat','Long']","c202253e":"cases = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\")\ncases = pd.melt(cases, \n                  id_vars = index_columns, \n                  var_name = 'ObservationDate', \n                  value_name = 'Confirmed')\ncases.head()","3b0d6f08":"import pandas as pd \nimport plotly.offline as py\nimport plotly.express as px\n\n\npy.init_notebook_mode(connected=True)\n\ngrp = cases.groupby(['ObservationDate', 'Country\/Region'])['Confirmed'].max()\ngrp = grp.reset_index()\ngrp['Date'] = pd.to_datetime(grp['ObservationDate'])\ngrp['Date'] = grp['Date'].dt.strftime('%m\/%d\/%Y')\ngrp['Active'] = grp['Confirmed'] #- grp['Recovered'] - grp['Deaths']\ngrp['Country'] =  grp['Country\/Region']\n\nfig = px.choropleth(grp, locations=\"Country\", locationmode='country names', \n                     color=\"Confirmed\", hover_name=\"Country\/Region\",hover_data = [grp.Active],projection=\"natural earth\",\n                     animation_frame=\"Date\",width=1000, height=700,\n                     color_continuous_scale='Reds',\n                     range_color=[1000,100000],\n\n                     title='World Map of Coronavirus')\n\nfig.update(layout_coloraxis_showscale=True)\npy.offline.iplot(fig)","b0347e70":"### Top 20 Countries as per Confirmed Cases","628b4b56":"**Recovery Count >50**","51e8f41f":"**\n**Let us now analyze top 20 countries with number of Total cases**\n**Will analyze Top counties as per confirmed, Most number of deaths, recovered and Critical case(Requiring ICU)**","ed191206":"<hr>\n1. **Looks like the exponential growth of the pandemic is still in it's peaks and that is not good at all**\n\n2. **Now max of Europe and USA and countries like India are also doubling the case in 4 days or weeks which is not good at all**\n\n3. **Number of cases are increasing as world have increase number of test. You can view from viz provided above for Testing Data**\n\n","2643f1bf":"**Active Count >50**","6541ebb6":"**Adding some derived features**","ef7d4ad1":"###  Looking for Data for USA, Italy, Spain, etc and comparing with rest of world","36212b26":"**You can refer to our Blog** :https:\/\/kite4sky.in\/2020\/04\/10\/covid-19-analysis\/\n\n**Live Dashboard: https:\/\/public.tableau.com\/profile\/kamal3974#!\/vizhome\/DashboardIndiaCovid1_1\/Overview**","efb342ad":"**Top 20 Countries as per Total number of Test**","aa318316":"<hr>\n### India Data\n1. India recently have largest Lockdown Period of 21 Days ending on 14th April\n2. Prime Minister Of India have extended Lockdwon upto May-5th\n3. Lets see how india is doing in handling Covid-19 crisis","78ab9dd3":"#### Please upvote, in case you find this notebook helpful\n> <font size=4 color='Blue'>(The Visualizations are updated every 24 Hours)<\/font>\n\n<img align=\"left\" src=\"https:\/\/www.vmcdn.ca\/f\/files\/okotokstoday\/images\/okotoks-today\/covid-19.jpg;w=635\"><\/img>","4f048244":"**Forecast with BayesianRidge**","45241cea":"**Mortality Count >5**","67c982f3":"<hr>\n1. **In case we look as per counties above, they are having more then 65 % cases among 212 counties worldwide**\n2. **China curve have been flatten after March**\n3. **European country like Italy, France, Germany have sttep rise**\n4. **USA case is very critical** but they have increase testing in large number during this days","3112c9a9":"**Active Count >50**","87091929":"### Analyzing USA Data","04916491":"<hr>\n### Let us now identify critical cases\n1. This will be most important as this will identify the number of deaths in coming days\n2. USA will have more number of death in coming day as they are having more number of serious cases\n3. France and Spain followed by USA","c7119a35":"<hr>\n**As per figure above you can notice following points**\n1. USA is doing maximum number of test nowdays and that is the reason they are having so much count nowdays\n2. India have also increase number of test at daily basis now\n3. South Korea, despite being less number of cases have done more number of test, and that is the reason they are able to make the curve flat after their count of 9 k cases","9ba01f1d":"## Confirmed Cases on Maps","d8e716c0":"### Forecasting","a97ed4c4":"<hr>\n### COVID-19 is wreaking havoc across the globe!!!\n1. How the countries are dealing with it\n2.  Or one of those European countries that are literally on fire at the moment because of the virus? \n3.  How good is the US doing?\n4.  While i am writing this kernal data for different countries in world is getting doubled each 2nd day, 4th day and so on. We all have been a complete failure for stopping the virus growth daily. As you can see in the trend below, how the data for counties is getting doubled each 2nd day or 4th day. Japan is the only country which is having doubling rate near about to week. Week later USA was doubling it count in 4 Days. This week i.e. as of 8th April ,the number of confirmed coronavirus cases in the U.S. surpassed 426,000 on Wednesday, according to figures provided by NBC, with 12,864 fatalities nationwide.Just one week back they were having around 213,000 cases. India is also doubling its figures every 4th-5th consecutive day now. India was having 3082 cases on 4th April and on 8th April it have been doubled to 5916. You can refer to image below as per doubling rate for different counties. As per the graph we can easily see the growth for Spain, Italy and Germany have started to steep down. We will discuss the reason for this further\n5.  How Lockdown wordk? \n6.  Lessons to learn from countries who have done good so far?\n\n","bfc9d3c3":"**Top Contries as per Active Cases**","e951cfa8":"<hr> \n**Some of Key Findings**\n1. India have crossed 10k Confirmed cases asof Apr-13\n2. Maharshtra is the state with most number of cases with Recovered , Active  and confirm cases and even death as well followed by Delhi, Tamilnadu, Rajashthan, MP\n3. Still there are 19 states which have less then 30 active count, govt. could stary slight business out there, locking entry from hot spot area","1aeb78eb":"#### Applying web scrapping ","372b2715":"# Content :\n<hr>\n\n* **[Data Updates -Apr-14-2020](#Calander)** \n* **[Data Updates -May-04-2020](#Calander)** ***<span style=\"color:red\">New<\/span>***\n* [Correlation Analysis](#Correlation-Analysis) \n* **[Visualization on Map](#Visualization-on-Map)** \n    * [Global Confirmed Cases Heat Map](#Global-Confirmed-Cases-Heat-Map)\n    * [Global Deaths Heat Map ](#Global-Deaths-Heat-Map)\n* **[Testing Data Analysis](#Testing-Analysis)** ***<span style=\"color:red\">New<\/span>***\n\n","fc430886":"**Some more analysis On Testing**","e984f4ab":"<hr>\n1. Validating Testing Data around the world\n2. How different counties are performing test wise around the world\n3. Let us visulize as per total number of test and test among Million people"}}