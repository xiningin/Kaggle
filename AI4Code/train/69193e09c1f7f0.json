{"cell_type":{"e3397f7a":"code","c81a1917":"code","fe9daa9d":"code","4f6829ed":"code","fdaf0204":"code","a11c3155":"code","3c667733":"code","6a2de0dd":"code","97987eb1":"code","d7f6b07a":"code","025bc6c3":"code","358888ca":"code","dc797bdf":"code","8b2a6689":"code","e4d0419d":"code","130ab1f9":"code","1b5112a8":"markdown","03727ee9":"markdown","63ec9a97":"markdown","d56f2263":"markdown","b08b9b6e":"markdown","31c30dbc":"markdown","913f0f7e":"markdown","6bd6ed24":"markdown","6adac097":"markdown","b4833265":"markdown","9e3f4146":"markdown","229644bc":"markdown","5230df62":"markdown","43e9cf56":"markdown","fffbcbee":"markdown","e9f58876":"markdown","8f33a096":"markdown","2d2664af":"markdown","1060c58a":"markdown","21847ec4":"markdown","e39c3135":"markdown"},"source":{"e3397f7a":"# Setting the notebook\nimport numpy as np\nimport pandas as pd\nimport os\nfrom IPython.display import display, HTML, Javascript\nimport plotly.graph_objects as go\nimport pandas as pd\nimport requests\nimport json\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# Get the kagglers answers\nanswers = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\")\n\n# Store the questions contained in the answers (first line) and drop the line from the answers\nquestions = answers.iloc[0]\nanswers = answers.drop(0).reset_index(drop=True)","c81a1917":"\"\"\"\nThis cell contains some python wrappers for javascript based modules such as ChartJs, D3.js.\nIt mainly contains adapted source code from different sources referenced at the end of my notebook.\n\"\"\"\n\n\n# Cool way to display numbers\ndef countUp(html_ids, values, titles):\n    \"\"\"\n    Displays numerical values within cards with countUp effects style.\n    \n    Args:\n        html_ids (list of str): set the ids for the displayed HTML elements\n        values (list of int): set the values displayed on the cards\n        titles (list of str): set the titles displayed on the cards\n\n    Returns:\n        Displays the cards with a countUp animation\n    \"\"\"\n    count_ups = \"\"\n    html_strings = \"\"\n    for i in range(0, len(html_ids)):\n        html_strings = html_strings + \"\"\"\n        <div style=\"box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2); width: 300px; margin: auto; text-align: center;\">\n            <h4 style=\"padding-top: 20px\">%(title)s<\/h4>\n            <br>\n            <h1 id=%(html_id)s style=\"padding-bottom: 20px\"> <\/h1>\n        <\/div>\n        \"\"\"%{\"html_id\": html_ids[i], \"title\": titles[i]}\n        \n        count_ups = count_ups + \"\"\"\n        var numAnim = new countUp.CountUp(%(html_id)s, %(value)s);\n        numAnim.start();\n        \"\"\"%{\"html_id\": html_ids[i], \"value\": values[i]}\n        \n    js_string = \"\"\"\n    require(['https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/countup.js\/2.0.7\/countUp.umd.js'], function(countUp){\n        %(count_ups)s\n    })\n    \"\"\"%{\"count_ups\": count_ups}\n    \n    display(Javascript(js_string))\n    display(\n        HTML(\n            \"\"\"\n            <div style=\"justify-content: space-around; display:flex; flex-wrap: wrap; align-content:space-between\">\n                %(html_strings)s\n            <\/div>\n            \"\"\"%{\"html_strings\": html_strings}\n        )\n    )\n    \n\n    \n# Use the chartjs library to plot graphs\ndef chartjs(chartType, chartId, data, options={}, width=\"700px\", height=\"400px\", displayGraph=True):\n    \"\"\"\n    Method allowing to use chartjs modules for plotting.\n    Parameters can be found at: https:\/\/www.chartjs.org\/\n    A simple example for the parameters structure are shown at: https:\/\/www.chartjs.org\/docs\/latest\/#creating-a-chart\n    \n    Args:\n        chartType: one of the supported chart type options (line, bar, radar, polarArea, pie, doughnut)\n        data: a python dictionary containing the data and the labels\n        options: a python dictionary containing graph options\n        width: default 700px\n        height: default 400px\n    \"\"\"\n    \n    js_string = \"\"\"\n        require(['https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/Chart.js\/2.9.3\/Chart.min.js', 'https:\/\/cdn.jsdelivr.net\/gh\/emn178\/chartjs-plugin-labels\/src\/chartjs-plugin-labels.js'], function(chartjs, legendPlugin){\n            var chartType=\"%(chartType)s\";\n            var data=%(data)s;\n            var options=%(options)s;\n            var chartId=\"%(chartId)s\";\n\n            var ctx = document.getElementById(chartId).getContext('2d');\n            var myChart = new Chart(ctx, {\n                type: chartType,\n                data: data,\n                options: options\n                });\n                })\n            \"\"\" %{'chartType': chartType, 'data': data, 'options': options, 'chartId': chartId}\n    \n    html_string = \"\"\"\n    <canvas id=\"%(chartId)s\" width=%(width)s height=%(height)s> <\/canvas>\n    \"\"\"%{\"width\": width, \"height\":height, \"chartId\": chartId}\n    \n    if displayGraph:\n        display(Javascript(js_string))\n        display(HTML(html_string))\n    else:\n        return html_string, js_string\n\ndef loadJs(jsStrings):\n    for jsString in jsStrings:\n        display(Javascript(jsString))\n\n\ndef pandasToChartJs(df, chartType, xAxis, yAxis, yLabels=None):\n    labels = df[xAxis].tolist()\n    data = df[yAxis]\n    if chartType == \"doughnut\":\n        datasets = [{\n            'label': labels,\n            'backgroundColor': palette[0:data.shape[0]],\n            'borderColor': palette_plain[0:data.shape[0]],\n            'hoverBorderWidth': 2,\n            'data': data.iloc[:,0].tolist()\n        }]\n    else:\n        if yLabels is None: yLabels = [i for i in range(0, data.shape[1])]\n        datasets = [{\n            'label': yLabels[i],\n            'backgroundColor': [palette[i] for _ in range(data.shape[0])],\n            'borderColor': [palette_plain[i] for _ in range(data.shape[0])],\n            'hoverBorderWidth': 2,\n            'data': data.iloc[:,i].tolist()\n        }  for i in range(0, data.shape[1])]\n    return {'labels': labels, 'datasets': datasets}\n\n\ndef doughnut(df, columnName, chartId):\n    # Gender distribution\n    doughnut_data = df[columnName].value_counts().reset_index()\n    doughnut_data = pandasToChartJs(doughnut_data, chartType=\"doughnut\", xAxis=\"index\", yAxis=[columnName])\n\n    # Chart options\n    options= {\n        'legend': {'position': 'top'},\n    }\n\n    # Show gender distribution\n    return chartjs(chartType=\"doughnut\", chartId=chartId, data=doughnut_data, height='180px', options=options, displayGraph=False)\n\n\n# Palette https:\/\/colorbrewer2.org\/#type=qualitative&scheme=Set3&n=11\npalette = ['rgba(141,211,199,0.7)','rgba(255,255,179,0.7)','rgba(190,186,218,0.7)','rgba(251,128,114,0.7)','rgba(128,177,211,0.7)',\n 'rgba(253,180,98,0.7)','rgba(179,222,105,0.7)','rgba(252,205,229,0.7)','rgba(217,217,217,0.7)','rgba(188,128,189,0.7)',\n 'rgba(204,235,197,0.7)', 'rgba(111,211,199,0.7)', 'rgba(255,235,159,0.7)', 'rgba(140,196,208,0.7)']\n\npalette_plain = ['rgba(141,211,199,1)','rgba(255,255,179,1)','rgba(190,186,218,1)','rgba(251,128,114,1)','rgba(128,177,211,1)',\n 'rgba(253,180,98,1)','rgba(179,222,105,1)','rgba(252,205,229,1)','rgba(217,217,217,1)','rgba(188,128,189,1)',\n 'rgba(204,235,197,1)', 'rgba(111,211,199,1)', 'rgba(255,235,159,1)', 'rgba(140,196,208,1)']","fe9daa9d":"# Assign the profiles with their corresponding titles\nprofiles = {\n    'Data Engineer': 'Developer',\n    'Software Engineer': 'Developer',\n    'DBA\/Database Engineer': 'Developer',\n    \n    'Data Analyst': 'Practitioner',\n    'Business Analyst': 'Practitioner',\n    'Product\/Project Manager': 'Practitioner',\n    \n    'Machine Learning Engineer': 'Mathematician',\n    'Research Scientist': 'Mathematician',\n    'Statistician': 'Mathematician',\n    \n    'Data Scientist': 'Data Scientist',\n    'Student': 'Student'\n}\n\nanswers[\"Profile\"] = answers[\"Q5\"].map(profiles)\nanswers[\"Profile\"].fillna(\"Unemployed - Other\", inplace=True)\nanswers[[\"Q5\", \"Profile\"]].head(4)","4f6829ed":"### Display global indicators\n# Answers represented with some global indicators\nnumber_of_questions = 35\nnumber_of_respondents = answers.shape[0]\ndisplay(HTML(\"<hr><\/hr>\"))\ndisplay(HTML(\"\"\"<h2 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Kagglers answered to the Kaggle 2020 survey where results ended with ... <\/h2>\"\"\"))\ndisplay(HTML(\"\"\"<h3 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(150, 150, 150, 1)\"> 20 036 kagglers answering the 35 questions of the survey <\/h3>\"\"\"))\ncountUp([\"nbQuestions\", \"nbRespondents\"], [number_of_questions, number_of_respondents], titles=[\"Number of questions\", \"Number of respondents\"])\ndisplay(HTML(\"<hr><\/hr>\"))\n\n### Display map graph\n# Set the ISO 3 codes\ndisplay(HTML(\"\"\"<h2 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Kagglers are coming from all five continents ... <\/h2>\"\"\"))\ndisplay(HTML(\"\"\"<h3 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(150, 150, 150, 1)\"> India and the USA are taking the lead with respectively 29.2% and 11.16% of the respondents<\/h3>\"\"\"))\ngeographical_distribution = answers[\"Q3\"].value_counts().reset_index()\nurl = \"http:\/\/country.io\/names.json\"\nresp = requests.get(url=url).json()\ncountries_dict = {v: k for k, v in resp.items()}\n\ngeographical_distribution[\"code\"] = geographical_distribution[\"index\"].map(countries_dict)\nurl = 'http:\/\/country.io\/iso3.json'\nresp = requests.get(url=url).json()\n\n# The undetected countries for ISO 3 mapping\ncountries_dict_comp = {\n    \"United States of America\": \"USA\",\n    \"Other\": \"ATA\",\n    \"United Kingdom of Great Britain and Northern Ireland\": \"GBR\",\n    \"Iran, Islamic Republic of...\": \"IRN\",\n    \"Viet Nam\": \"VNM\",\n    \"Republic of Korea\": \"KOR\"\n}\ngeographical_distribution[\"code\"] = geographical_distribution[\"code\"].replace(resp)\ngeographical_distribution[\"code\"] = np.where(geographical_distribution[\"code\"].isna(), geographical_distribution[\"index\"].replace(countries_dict_comp), geographical_distribution[\"code\"])\ngeographical_distribution[\"Q3\"] = np.round(geographical_distribution[\"Q3\"]\/sum(geographical_distribution[\"Q3\"])*100, 2)\n\n# Configuration\nconfig = dict(\n    {'scrollZoom': False,\n     'modeBarButtonsToRemove': ['toImage', 'pan2d', 'select2d', 'lasso2d']\n    }\n)\n\n# Kagglers location map\nfig = go.Figure(data=go.Choropleth(\n    locations = geographical_distribution['code'],\n    z = geographical_distribution['Q3'],\n    text = geographical_distribution['index'],\n    colorscale = [[i\/5.0, palette[i]] for i in range(0, 6)],\n    autocolorscale=False,\n    reversescale=False,\n    marker_line_color='darkgray',\n    marker_line_width=0.5,\n    colorbar_ticksuffix = '%',\n    colorbar_title = '% of Kagglers',\n    hovertemplate = \"<b>%{text}<\/b><br><br>\" + \"<b>Percentage of Kagglers: %{z}%<b> <extra><\/extra>\"\n))\n\nfig.update_layout(\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    ),\n    margin=dict(t=10, b=10)\n)\n\nfig.show(config=config)\n\ndisplay(HTML(\"\"\"<div style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-style:italic; color:rgba(50, 50, 50, 1)\"> Note that people coming from \"Other\" countries actually live in Antartica ! Joke aside, 6.93% of the kagglers living in other countries can't be neglected<\/div>\"\"\"))\n\ndisplay(HTML(\"<hr><\/hr>\"))\ndisplay(HTML(\"\"\"<h2 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Kagglers are fairly young ... <\/h2>\"\"\"))\ndisplay(HTML(\"\"\"<h3 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(150, 150, 150, 1)\"> Youngsters are very welcome here since the age groups' Top 3 is (in order) 25-29, 22-24 and 18-21<\/h3>\"\"\"))\n# Age BarChart\nage_distribution = answers[\"Q1\"].value_counts().reset_index()\nage_distribution[\"index\"] = pd.Categorical(age_distribution[\"index\"]).reorder_categories(['18-21', '22-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-69', '70+'])\nage_distribution.sort_values(\"index\", inplace=True)\nage_distribution_data = pandasToChartJs(age_distribution, chartType=\"bar\", xAxis=\"index\", yAxis=[\"Q1\"], yLabels=[\"# of Kagglers\"])\nfor i in range(0, 3):\n    age_distribution_data['datasets'][0][\"backgroundColor\"][i] = palette[1]\n    age_distribution_data['datasets'][0][\"borderColor\"][i] = palette_plain[1]\n# Chart options\noptions= {'legend': {'display': 0},\n          'scales': {'yAxes':[{'scaleLabel':{'display': 1, 'labelString':'Number of Respondents'}}],\n                     'xAxes':[{'scaleLabel':{'display': 1, 'labelString':'Age Ranges'}}]},\n          'plugins':{'labels': {'render':'value'}}\n         }\n# Show Age distibution\nbar_html, bar_js = chartjs(chartType=\"bar\", chartId=\"age_distribution\", data=age_distribution_data, options=options, height='auto', width='auto', displayGraph=False)\ndisplay(Javascript(bar_js))\ndisplay(HTML(bar_html))\n\n# Gender\ndisplay(HTML(\"<hr><\/hr>\"))\ndisplay(HTML(\"\"\"<h2 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Kagglers are mainly men ...<\/h2>\"\"\"))\ndisplay(HTML(\"\"\"<h3 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(150, 150, 150, 1)\"> A convergence to parity seems to be distinguishable with the coming generation <\/h3>\"\"\"))\ngender = answers[(answers[\"Q2\"] == \"Man\") | (answers[\"Q2\"] == \"Woman\")]\ngender = gender.groupby([\"Q1\", \"Q2\"]).apply(lambda x: x.shape[0])\ngender = gender.groupby(level=\"Q1\").apply(lambda x: 100 * x \/ float(x.sum())).reset_index(name=\"percentage\")\n\nmen = gender[gender[\"Q2\"] == 'Man']\nwomen = gender[gender[\"Q2\"] == 'Woman']\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=men[\"percentage\"],\n    y=men[\"Q1\"],\n    name='Percentage of men',\n    marker=dict(\n        color=palette[0],\n        line_color=palette_plain[0],\n    )\n))\nfig.add_trace(go.Scatter(\n    x=women[\"percentage\"],\n    y=women[\"Q1\"],\n    name='Percent of Women',\n    marker=dict(\n        color=palette[2],\n        line_color=palette_plain[2]\n    )\n))\n\nfig.update_traces(mode='markers', marker=dict(line_width=1, symbol='circle', size=16))\n\nfig.update_layout(\n    yaxis=dict(showspikes=True, title=\"Kaggler's Age\"),\n    xaxis=dict(\n        showgrid=False,\n        showline=True,\n        linecolor='rgb(102, 102, 102)',\n        tickfont_color='rgb(102, 102, 102)',\n        showticklabels=True,\n        dtick=10,\n        ticks='outside',\n        tickcolor='rgb(102, 102, 102)',\n        showspikes=True,\n    ),\n    margin=dict(t=0),\n    legend=dict(\n        font_size=10,\n        yanchor='middle',\n        xanchor='right',\n    ),\n    width=800,\n    height=600,\n    paper_bgcolor='white',\n    plot_bgcolor='white',\n    hovermode='closest',\n)\nfig.add_vline(x=50, line_width=2, line_dash=\"dash\", line_color=\"rgba(204, 204, 204, 0.95)\")\nfig.show(config={'displayModeBar': False})","fdaf0204":"def composition_doughnut(df, chartId):\n    # Composition of the mathematicians with a doughnut chart\n    titles_composition = df.groupby(\"Q5\").apply(lambda x : x.shape[0]).reset_index(name=\"count\")\n    titles_composition_chartjs = pandasToChartJs(titles_composition, chartType=\"doughnut\", xAxis=\"Q5\", yAxis=[\"count\"])\n    titles_composition_options = {\n        'legend': {'position': 'bottom'},\n        'circumference': 1*np.math.pi,\n        'rotation': 1*np.math.pi,\n        'cutoutPercentage': 70,\n        'plugins':{\n            'labels': {\n                'render': 'percentage',\n                'fontColor': ['green', '#FFC270', 'purple'],\n                'precision': 2,\n                'arc': 1,\n                'fontSize': 8\n            }\n        }\n    }\n    return chartjs(\"doughnut\", chartId, titles_composition_chartjs, displayGraph=False, options=titles_composition_options, height=250, width='auto')\n\ndef skills_radar(df, chartId, color=0, return_chart_data=False, label=''):\n    # Mathematicians skills\n    def answers_count(df, question_column, question_parts_number):\n        \"\"\"\n        Counts if an answer exists or not for a specific question.\n        Ex: If Q7 is chosen, counts the values which are not NA for Q7_Part_1 to Q7_Part_12 (including Q7_OTHER) if question_parts_number=13\n        \"\"\"\n        sub_df = df[[\"{}_Part_{}\".format(question_column, i) for i in range(1, question_parts_number)] + [\"{}_OTHER\".format(question_column)]]\n        nb_answers = sub_df.apply(lambda x: x.notna()).sum(axis=1)\n        #nb_answers[nb_answers < 1] = 0\n        #nb_answers[nb_answers >=1] = 1\n        return np.round(nb_answers.mean(),2)\n    programming_languages = answers_count(df, \"Q7\", 13)\n    programming_environments = answers_count(df, \"Q9\", 12)\n    plotting_libraries = answers_count(df, \"Q14\", 12)\n    ml_libraries = answers_count(df, \"Q16\", 16)\n    cloud_computing_platforms = answers_count(df, \"Q26_A\", 12)\n    databases = answers_count(df, \"Q29_A\", 18)\n    bi_tools = answers_count(df, \"Q31_A\", 15)\n    radar_labels = [\"#Programming Languages\", \"#IDEs\", \"#Plotting Libraries\", \"#ML Libraries\", \"#Cloud Computing Platforms\", \"#Big Data Products\", \"#BI Tools\"]\n    radar_dataset = [{\n        'data': [programming_languages, programming_environments, plotting_libraries, ml_libraries, cloud_computing_platforms, databases, bi_tools],\n        'backgroundColor': palette[color],\n        'borderColor': palette_plain[color],\n        'hoverBackgroundColor': palette[color],\n        'label': label\n    }]\n    options= {'legend': {'display': 0}, 'scale':{'ticks': {'suggestedMin': 0, 'suggestedMax': 3.5}}}\n    data = {\n        'labels': radar_labels,\n        'datasets': radar_dataset\n    }\n    if return_chart_data:\n        return data\n    else:\n        return chartjs('radar', chartId, data=data, height=250, displayGraph=False, options=options, width='auto')\n    \n    \n# Mathematicians stats\nmathematicians = answers[answers[\"Profile\"] == \"Mathematician\"]\n# Number of mathematicians in the dataset\nnumber_of_mathematicians = mathematicians.shape[0]\n# Proportion of mathematicians\nprop_of_mathematicians = np.round((number_of_mathematicians\/answers.shape[0])*100, 2)\n# Doughnut charts\nmathematicians_doughnut_html, mathematicians_doughnut_js = composition_doughnut(mathematicians, \"mathematiciansDoughnut\")\n# Skill radar\nmathematicians_radar_html, mathematicians_radar_js =  skills_radar(mathematicians, \"mathematicianRadar\", color=0, label=\"Mathematician\")\n\n# HTML output\nhtml_string = \"\"\"\n<table>\n    <tr>\n        <h2 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> The Mathematician <\/h2>\n        <br><\/br>\n        <h3 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(150, 150, 150, 1)\"> Number of Mathematicians: %(number_of_mathematicians)s among %(number_of_observations)s observations (%(prop_of_mathematicians)s%%) <\/h3>\n    <\/tr>\n    <tr>\n        <td><img src=\"https:\/\/image.flaticon.com\/icons\/png\/512\/827\/827371.png\" width=\"600px\"><\/td>\n        <td>\n            <div align='justify' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif;\">\n                <h3 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Description <\/h3>\n                <br><\/br>\n                The Mathematician is interested in the comprehension of the maths behind ML algorithms.\n                Her\/His strong taste for statistics makes him a good candidate for Research scientist or Statistician.\n                She\/He knows enough about coding to plot graphs aimed at showing her\/his point\n                his point.\n            <\/div>\n        <\/td>  \n    <\/tr>\n    <tr>\n        <td>\n            <div>\n                <h3 align='left' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\">  Mathematicians are composed of ... <\/h3>\n                %(mathematicians_doughnut_html)s\n            <\/div>\n            <\/td>\n        <td>\n            <div>\n                <h3 align='left' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Skills <\/h3>\n                <p align='left' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:italic; color:rgba(150, 150, 150, 1)\"> Each point corresponds to a computed average <\/p>\n                %(radar_html)s\n            <\/div>\n        <\/td>\n    <\/tr>\n<\/table>\n\n\n\"\"\"%{\"radar_html\": mathematicians_radar_html,\n     \"number_of_mathematicians\": number_of_mathematicians,\n     \"number_of_observations\": answers.shape[0],\n     \"prop_of_mathematicians\": prop_of_mathematicians,\n     \"mathematicians_doughnut_html\": mathematicians_doughnut_html\n    }\n\ndisplay(Javascript(mathematicians_radar_js))\ndisplay(Javascript(mathematicians_doughnut_js))\ndisplay(HTML(html_string))","a11c3155":"# Developer stats\npractitioners = answers[answers[\"Profile\"] == \"Practitioner\"]\n# Number of mathematicians in the dataset\nnumber_of_practitioners = practitioners.shape[0]\n# Proportion of mathematicians\nprop_of_practitioners = np.round((number_of_practitioners\/answers.shape[0])*100, 2)\n# Doughnut charts\npractitioners_doughnut_html, practitioners_doughnut_js = composition_doughnut(practitioners, \"practitionerDoughnut\")\n# Skill radar\npractitioners_radar_html, practitioners_radar_js =  skills_radar(practitioners, \"practitionerRadar\", color=1, label='Practitioner')\n\n# HTML output\nhtml_string = \"\"\"\n<table>\n    <tr>\n        <h2 align=\"left\" style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> The Practitioner <\/h2>\n        <br><\/br>\n        <h3 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(150, 150, 150, 1)\"> Number of Practitioners: %(number_of_practitioners)s among %(number_of_observations)s observations (%(prop_of_practitioners)s%%)<\/h3>\n    <\/tr>\n    \n    <tr>\n        <td><img src=\"https:\/\/image.flaticon.com\/icons\/png\/512\/1754\/1754024.png\" width=\"600px\"><\/td>\n        <td>\n            <div align='justify' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif;\">\n            <h3 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Description <\/h3>\n            <br><\/br>\n            The Practitioner is interested in being practical and is the one who will be the more exposed to the client.\n            She\/He gives as much importance for the form as the content and will rely on tools allowing her\/him to tell good stories about the data she\/he has.\n            She\/He does not want to get too involved in low-level frameworks (except for data visualization maybe) and rely on others to provide him what he lacks.\n            <\/div>\n        <\/td>\n    <\/tr>\n    \n    <tr>\n        <td>\n            <div>\n                <h3 align='left' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Practitioners are composed of ... <\/h3>\n                %(practitioners_doughnut_html)s \n            <\/div>\n        <\/td>\n        <td>\n            <div>\n                <h3 align='left' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Skills <\/h3>\n                <p align='left' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:italic; color:rgba(150, 150, 150, 1)\"> Each point corresponds to a computed average <\/p>\n                %(radar_html)s\n            <\/div>\n        <\/td>\n    <\/tr>\n    \n<\/table>\n\n\"\"\"%{\"radar_html\": practitioners_radar_html,\n     \"number_of_practitioners\": number_of_practitioners,\n     \"number_of_observations\": answers.shape[0],\n     \"prop_of_practitioners\": prop_of_practitioners,\n     \"practitioners_doughnut_html\": practitioners_doughnut_html,\n    }\n\ndisplay(Javascript(practitioners_radar_js))\ndisplay(Javascript(practitioners_doughnut_js))\ndisplay(HTML(html_string))","3c667733":"# Developer stats\ndevelopers = answers[answers[\"Profile\"] == \"Developer\"]\n# Number of developers in the dataset\nnumber_of_developers = developers.shape[0]\n# Proportion of developers\nprop_of_developers = np.round((number_of_developers\/answers.shape[0])*100, 2)\n# Doughnut charts\ndevelopers_doughnut_html, developers_doughnut_js = composition_doughnut(developers, \"developersDoughnut\")\n# Skill radar\ndevelopers_radar_html, developers_radar_js = skills_radar(developers, \"developerRadar\", color=2, label='Developer')\n\n# HTML output\nhtml_string = \"\"\"\n<table>\n    <tr>\n        <h2 align=\"left\" style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> The Developer <\/h2>\n        <br><\/br>\n        <h3 align=\"left\" style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(150, 150, 150, 1)\"> Number of Developers: %(number_of_developers)s among %(number_of_observations)s observations (%(prop_of_developers)s%%) <\/h3>\n    <\/tr>\n    <tr>\n        <td><img src=\"https:\/\/image.flaticon.com\/icons\/png\/512\/1688\/1688400.png\" width=\"600px\"><\/td>\n        <td>\n            <div align='justify' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif;\">\n            <h3 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Description <\/h3>\n            <br><\/br>\n            The Developer is the one who has a better knowledge of programming than the others.\n            The one who will get hives if you don't follow the PEP8 conventions.\n            She\/He is good at structuring things making her\/him to be a great contender for a software engineer position.\n            <\/div>\n        <\/td>\n    <\/tr>\n    \n    <tr>\n        <td>\n            <div>\n                <h3 align='left' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Developers are composed of ... <\/h3>\n                %(developers_doughnut_html)s \n            <\/div>\n        <\/td>\n        <td>\n            <div>\n                <h3 align='left' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Skills <\/h3>\n                <p align='left' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:italic; color:rgba(150, 150, 150, 1)\"> Each point corresponds to a computed average <\/p>\n                %(radar_html)s\n            <\/div>\n        <\/td>\n    <\/tr>\n<\/table>\n\n\n\"\"\"%{\"radar_html\": developers_radar_html,\n     \"number_of_developers\": number_of_developers,\n     \"number_of_observations\": answers.shape[0],\n     \"prop_of_developers\": prop_of_developers,\n     \"developers_doughnut_html\": developers_doughnut_html,\n    }\n\ndisplay(Javascript(developers_radar_js))\ndisplay(Javascript(developers_doughnut_js))\ndisplay(HTML(html_string))","6a2de0dd":"m_data = skills_radar(mathematicians, \"mathematicianRadar\", color=0, return_chart_data=True, label='Mathematician')\np_data = skills_radar(practitioners, \"practitionerRadar\", color=1, return_chart_data=True, label='Practitioner')\nd_data = skills_radar(developers, \"developerRadar\", color=2, return_chart_data=True, label='Developer')\n\np_data[\"datasets\"].append(m_data[\"datasets\"][0])\np_data[\"datasets\"].append(d_data[\"datasets\"][0])\n\ndisplay(HTML(\"\"\"\n<h3 align='left' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Skills overlay<\/h3>\n<p align='left' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(150, 150, 150, 1)\"> Each point corresponds to a computed average <\/p>\n\"\"\"))\nchartjs('radar', \"stackRadar\", data=p_data, height=250, width='auto')","97987eb1":"# Data Scientist stats\ndata_scientists = answers[answers[\"Profile\"] == \"Data Scientist\"]\n# Number of Data Scientists in the dataset\nnumber_of_data_scientists = data_scientists.shape[0]\n# Proportion of Data Scientists\nprop_of_data_scientists = np.round((number_of_data_scientists\/answers.shape[0])*100, 2)\n# Skill radar\ndata_scientists_radar_html, data_scientists_radar_js =  skills_radar(data_scientists, \"scientistRadar\", color=3, label='Data Scientist')\n\n# HTML output\nhtml_string = \"\"\"\n<table>\n    <tr>\n        <h2 align=\"left\" style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> The Data Scientist <\/h2>\n        <br><\/br>\n        <h3 align=\"left\" style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(150, 150, 150, 1)\"> Number of Data Scientists: %(number_of_data_scientists)s among %(number_of_observations)s observations (%(prop_of_data_scientists)s%%) <\/h3>\n    <\/tr>\n    <tr>\n        <td><img src=\"https:\/\/cdn3.iconfinder.com\/data\/icons\/casino-and-gambling-icons\/505\/Jack-2-512.png\" width=\"400px\" height=\"100px\"><\/td>\n        <td>\n            <div align='justify' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif;\">\n            <h3 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Description <\/h3>\n            <br><\/br>\n            A Jack of all trades who is proficient in statistical analysis, who has great insights on the business impact and who is creative enough to develop the solutions on his own.\n            <\/div>\n        <\/td>\n    <\/tr>\n    \n    <tr>\n        <td colspan=\"2\">\n            <div>\n                <h3 align='left' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Skills <\/h3>\n                <p align='left' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:italic; color:rgba(150, 150, 150, 1)\"> Each point corresponds to a computed average <\/p>\n                %(radar_html)s\n            <\/div>\n        <\/td>\n    <\/tr>\n<\/table>\n\n\n\"\"\"%{\"radar_html\": data_scientists_radar_html,\n     \"number_of_data_scientists\": number_of_data_scientists,\n     \"number_of_observations\": answers.shape[0],\n     \"prop_of_data_scientists\": prop_of_data_scientists,\n    }\n\ndisplay(Javascript(data_scientists_radar_js))\ndisplay(HTML(html_string))","d7f6b07a":"ds_data = skills_radar(data_scientists, \"scientistRadar\", color=3, return_chart_data=True, label='Data Scientist')\np_data[\"datasets\"].append(ds_data[\"datasets\"][0])\nchartjs('radar', \"stackRadar2\", data=p_data, height=250, width='auto')","025bc6c3":"# Student stats\nstudents = answers[answers[\"Profile\"] == \"Student\"]\n# Number of Students in the dataset\nnumber_of_students = students.shape[0]\n# Proportion of Students\nprop_of_students = np.round((number_of_students\/answers.shape[0])*100, 2)\n# Skill radar\nstudents_radar_html, students_radar_js =  skills_radar(students, \"studentRadar\", color=4, label='Student')\n\n# HTML output\nhtml_string = \"\"\"\n<table>\n    <tr>\n        <h2 align=\"left\" style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> The Student <\/h2>\n        <br><\/br>\n        <h3 align=\"left\" style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(150, 150, 150, 1)\"> Number of Students: %(number_of_students)s among %(number_of_observations)s observations (%(prop_of_students)s%%) <\/h3>\n    <\/tr>\n    <tr>\n        <td><img src=\"https:\/\/image.flaticon.com\/icons\/png\/512\/3750\/3750011.png\" width=\"400px\" height=\"100px\"><\/td>\n        <td>\n            <div align='justify' style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif;\">\n            <h3 style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-weight:normal; color:rgba(50, 50, 50, 1)\"> Description <\/h3>\n            <br><\/br>\n            The student is the starting point of the data journey.\n            She\/he will learn through courses different aspects of data and will follow the path of the Mathematician, Practitioner or Developer.\n            As a learner, every possibilities are offered to her\/him !\n            <\/div>\n        <\/td>\n    <\/tr>\n<\/table>\n\n\n\"\"\"%{\"radar_html\": students_radar_html,\n     \"number_of_students\": number_of_students,\n     \"number_of_observations\": answers.shape[0],\n     \"prop_of_students\": prop_of_students,\n    }\n\ndisplay(Javascript(students_radar_js))\ndisplay(HTML(html_string))","358888ca":"stackbar_degrees = answers[answers[\"Profile\"] != 'Unemployed - Other']\nstackbar_degrees = stackbar_degrees.groupby([\"Q4\", \"Profile\"]).apply(lambda x: x.shape[0])\nstackbar_degrees = stackbar_degrees.groupby(level=\"Profile\").apply(lambda x: 100 * x \/ float(x.sum())).reset_index(name=\"percentage\")\n\n# Cartesian product of profiles and Q4\nprofiles = stackbar_degrees[\"Profile\"].unique()\nq4 = ['Bachelor\u2019s degree', 'Master\u2019s degree', 'Doctoral degree', 'I prefer not to answer', \n      'No formal education past high school', 'Some college\/university study without earning a bachelor\u2019s degree',\n      'Professional degree']\nindex = pd.MultiIndex.from_product([q4, profiles], names = [\"Q4\", \"Profile\"])\ncartesian_product = pd.DataFrame(index = index).reset_index()\n\n# Left join \nstackbar_degrees = cartesian_product.merge(stackbar_degrees, how='left', on=[\"Q4\", \"Profile\"]).fillna(0)\nstackbar_degrees[\"percentage\"] = np.round(stackbar_degrees[\"percentage\"], 2)\n\nlabels = stackbar_degrees[\"Profile\"].unique().tolist()\ndatasets = []\n\nfor i, degree in enumerate(stackbar_degrees[\"Q4\"].unique()):\n    degree_df = stackbar_degrees[stackbar_degrees[\"Q4\"] == degree]\n    datasets.append({\n        'label': degree,\n        'data': degree_df[\"percentage\"].to_list(),\n        'backgroundColor': palette[i],\n        'hoverBackgroundColor': palette[i],\n        'hoverBorderWidth': 1\n    })\n    \noptions = {\n    'scales': {\n        'xAxes': [{ \n            'stacked': 1,\n            'ticks': {\n                'min': 0,\n                'max': 100,\n            },\n            'scaleLabel': {\n                'display': 1,\n                'labelString': 'Degrees Obtained (%)',\n            },\n            }],\n        'yAxes': [{ \n            'stacked': 1, \n            'gridLines': { 'display': 0 },\n        }],\n    },\n    'plugins':{\n            'labels': {\n                'render': 'percentage',\n                'precision': 2,\n                'fontSize': 8,\n            }\n        },\n}\ndel(stackbar_degrees)\nchartjs(chartType=\"horizontalBar\", chartId=\"hbarDegree\", data={'labels': labels, 'datasets': datasets}, options=options, height=300)","dc797bdf":"stackbar_ages = answers[answers[\"Profile\"] != 'Unemployed - Other']\nstackbar_ages = stackbar_ages.groupby([\"Q1\", \"Profile\"]).apply(lambda x: x.shape[0])\nstackbar_ages = stackbar_ages.groupby(level=\"Profile\").apply(lambda x: 100 * x \/ float(x.sum())).reset_index(name=\"percentage\")\n\n# Cartesian product of profiles and Q4\nprofiles = stackbar_ages[\"Profile\"].unique()\nq1 = stackbar_ages[\"Q1\"].unique()\nindex = pd.MultiIndex.from_product([q1, profiles], names = [\"Q1\", \"Profile\"])\ncartesian_product = pd.DataFrame(index = index).reset_index()\n\n# Left join \nstackbar_ages = cartesian_product.merge(stackbar_ages, how='left', on=[\"Q1\", \"Profile\"]).fillna(0)\nstackbar_ages[\"percentage\"] = np.round(stackbar_ages[\"percentage\"], 2)\n\nlabels = stackbar_ages[\"Profile\"].unique().tolist()\ndatasets = []\n\nfor i, age in enumerate(stackbar_ages[\"Q1\"].unique()):\n    age_df = stackbar_ages[stackbar_ages[\"Q1\"] == age]\n    datasets.append({\n        'label': age,\n        'data': age_df[\"percentage\"].to_list(),\n        'backgroundColor': palette[i],\n        'hoverBackgroundColor': palette[i],\n        'hoverBorderWidth': 1\n    })\n    \noptions = {\n    'scales': {\n        'xAxes': [{ \n            'stacked': 1,\n            'ticks': {\n                'min': 0,\n                'max': 100,\n            },\n            'scaleLabel': {\n                'display': 1,\n                'labelString': 'Age Range (%)',\n            },\n            }],\n        'yAxes': [{ \n            'stacked': 1, \n            'gridLines': { 'display': 0 },\n        }],\n    },\n    'plugins':{\n            'labels': {\n                'render': 'percentage',\n                'precision': 2,\n                'fontSize': 8,\n            }\n        },\n}\ndel(stackbar_ages)\nchartjs(chartType=\"horizontalBar\", chartId=\"hbarAge\", data={'labels': labels, 'datasets': datasets}, options=options, height=300)\ndisplay(HTML(\"\"\"<div style=\"font-family: Helvetica Neue, Helvetica, 'Arial', sans-serif; font-style:italic; color:rgba(50, 50, 50, 1)\"> Also note that the data scientists are the eldest (and thus, overall more exeperienced) which concurs to their mastering of a lot of tools !<\/div>\"\"\"))\n","8b2a6689":"import lightgbm as lgbm\nimport pprint\nfrom sklearn import preprocessing\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score\n\ndef random_groups():\n    \"\"\"\n    Forming random groups of three job titles\n    \"\"\"\n    profiles = ['Data Engineer', 'Software Engineer', 'DBA\/Database Engineer', \n                'Data Analyst', 'Business Analyst', 'Product\/Project Manager',\n                'Machine Learning Engineer', 'Research Scientist','Statistician']\n    groups = {}\n    np.random.shuffle(profiles)\n    j=0\n    for i in range(0, len(profiles)):\n        if i%3 == 0:\n            j = j+1\n        groups.update({profiles[i]: \"Group {}\".format(j)})\n    return groups","e4d0419d":"answers = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\").drop(0).reset_index(drop=True)\n\ndef model(groups):\n    \"\"\"\n    A minimalist data preparation to fit LGBMClassifier\n    \"\"\"\n    df = answers.copy()\n    df[\"path\"] = df[\"Q5\"].map(groups[0])\n    df = df[df[\"path\"].notna()]\n    df = df.fillna(0)\n    for col in df.columns:\n        le = preprocessing.LabelEncoder()\n        df[col] = le.fit_transform(df[col].astype(str))\n    label = df[\"path\"]\n    scaler = preprocessing.MinMaxScaler(feature_range=(-1,1))\n    columns = df.columns\n    df = scaler.fit_transform(df)\n    df = pd.DataFrame(df, columns=columns)\n    return df.drop(\"path\", axis=1).reset_index(drop=True), label.reset_index(drop=True)\n\ndef kfolding():\n    print(\"K-fold with the Random grouping\")\n    kf = KFold(n_splits=5, shuffle=True)\n    X, y = model(groups)\n    X.drop(\"Q5\", axis=1, inplace=True)\n    for train_index, test_index in kf.split(X):\n        X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n        y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n        clf = LGBMClassifier(objective='multiclass')\n        clf.fit(X_train, y_train)\n        preds = clf.predict(X_test)\n        print(accuracy_score(y_test,preds))\n        \n    print(\"\\nK-fold with the Notebook's grouping\")\n    X, y = model([{\n        'Data Engineer': 'Developer',\n        'Software Engineer': 'Developer',\n        'DBA\/Database Engineer': 'Developer',\n    \n        'Data Analyst': 'Practitioner',\n        'Business Analyst': 'Practitioner',\n        'Product\/Project Manager': 'Practitioner',\n\n        'Machine Learning Engineer': 'Mathematician',\n        'Research Scientist': 'Mathematician',\n        'Statistician': 'Mathematician',\n    }])\n    X.drop(\"Q5\", axis=1, inplace=True)\n    for train_index, test_index in kf.split(X):\n        X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n        y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n        clf = LGBMClassifier(objective='multiclass')\n        clf.fit(X_train, y_train)\n        preds = clf.predict(X_test)\n        print(accuracy_score(y_test,preds))","130ab1f9":"groups = []\nfor _ in range(1):\n    groups.append(random_groups())\n\nprint(\"Random Grouping: \")\npprint.pprint(groups)\n\nprint(\"\\n\")\nkfolding()","1b5112a8":"By rerunning the cell above, you will probably end to the conclusion that the Notebook's grouping is better","03727ee9":"<a id=\"s2\"> <h2>Sources<\/h2> <\/a>\n1. Source of the Data Science Venn Diagram: http:\/\/drewconway.com\/zia\/2013\/3\/26\/the-data-science-venn-diagram\n2. Some love for ChartJS and its documentation: https:\/\/www.chartjs.org\/docs\/latest\/\n3. Python wrapping of ChartJs from: https:\/\/gist.github.com\/fabriziopandini\/7e8efdd7063a518a2d2d","63ec9a97":"Letting aside the kagglers with job titles labelled as \"Currently not employed\", \"Other\", and \"Nan\" due to the inherent within heterogeneity of these groups, the remaining job title is the one labelled as **Student**.","d56f2263":"<a id=\"s1\">\n    <h2> What about the other kagglers? <\/h2>\n<\/a>","b08b9b6e":"So far, I only covered a specific part of the respondents. I purposely left aside the other kinds of kagglers and I will now get back to two of them.\n\n\nThe first one I want to get back on is the \"Data Scientist\". One of the main reasons why I didn't categorize the data scientist is because the term itself is less easier to define. The role of a data scientist is kind of hybrid and the data scientist has to possess a wide range of skills to be defined as such.\n\n<img src=\"https:\/\/images.squarespace-cdn.com\/content\/v1\/5150aec6e4b0e340ec52710a\/1364352051365-HZAS3CLBF7ABLE3F5OBY\/ke17ZwdGBToddI8pDm48kB2M2-8_3EzuSSXvzQBRsa1Zw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZUJFbgE-7XRK3dMEBRBhUpxPe_8B-x4gq2tfVez1FwLYYZXud0o-3jV-FAs7tmkMHY-a7GzQZKbHRGZboWC-fOc\/Data_Science_VD.png?format=1500w\"\/>\n\n>*The Data Scientist is theoritically at the crossroads of the Venn graph. The representation is pretty popular and widely used to explain what it takes to be a data scientist.*\n\nThe graph also gives you the reason why I inferred the 3 types of profiles! If everything goes well, we should see that Kaggle's Data Scientists are in reality mathematicians, developers and practitioners all at the same time.","31c30dbc":"<a> <h2>Appendices<\/h2> <\/a>","913f0f7e":"<a id=\"s2\"> <h2>The Profiles<\/h2> <\/a>","6bd6ed24":"* **The Practitioners** are slightly more familiar with BI tools than other types of profiles and have a lower use of the tools in all the others areas. A possible explanation is that the practitioners are investing time in non-related data tasks while at work (might be team management, communication related tasks ...)\n\n* **The Developers** are using a wide range of programming languages to complete their tasks and are using them on their adapted IDE's. They are also topping on the daily use of Big Data and database related products.\n\n* **The Mathematicians** are distinguishing themselves by their more extensive use of Machine Learning Libraries and the knowledge of around 2 plotting libraries to present their works.","6adac097":"<a id=\"radar\"> <h4>What are the values in the radar charts ? <\/h4> <\/a>\nSkills levels are coming from the answers of multiple choice questions and are computed the following way:\n1. Select the data from a specific multiple choice question (i.e all the columns beginning with *Q7_Part_** for Q7. What programming languages do you use on a regular basis?)\n2. Count the number of non NaN answers for each observation (i.e if Python and R are used on regular basis for an observation, the count will be 2)\n3. Average the counts over all the observations (i.e the average number of programming languages used is represented)\n\nSkills level are computed for each profiles and each spoke refers to a question of the survey:\n- **Programming Languages**: the average number of programming languages used on a daily basis refers to **Q7**\n- **IDEs**: the average number of integrated development environments (IDE's) used on a regular basis refers to **Q9**\n- **Plotting Libraries**: the average number of data visualization libraries or tools used on a regular basis refers to **Q14**\n- **ML Libraries**: the average number of machine learning frameworks do you used on a regular basis refers to **Q16**\n- **Cloud Computing Platforms**: the average number of cloud computing platforms used on a daily basis refers to **Q26-A**\n- **Big Data Products**: the average number of big data products used on a daily basis refers to **Q29-A**\n- **BI Tools**: the average number of business intelligence tools used on a daily basis refers to **Q31-A**","b4833265":"Now that the **\"Profile\"** is in our dataframe, I will try to confirm the assumptions I made for the profiles and analyze in more depth what are the characteristics of each profile. But beforehand ...","9e3f4146":"The 3 types of profiles I defined are covering 40.14% of the dataset (12.63% are Developers, 14.8% are Practitioners and 12.71% are Mathematicians). Each profile is represented by a radar chart where each spoke represents the average number of tools used for its respective label, i.e the Developer is using 3.06 programming languages in average on a daily basis. To understand how the values are computed and where they are coming from, you can have a look at the [appendices of the notebook](#radar) (or follow the source code!)\n\nEach profile performs best in different areas and just by overlaying the graphs we may see which components are standing out.","229644bc":"The students are diverging from their working counterparts by:\n* The fact that they are not using any BI tool, Big Data Infrastructures nor Cloud Computing Platforms ([following the survey's logic](https:\/\/www.kaggle.com\/c\/kaggle-survey-2020\/data))\n\n* Having the highest rate of kagglers with a Bachelor's degree and people in some college\/university without earning a bachelor's degree probably due to the fact that the students are composed of freshmen and students who are still studying to obtain a master degree or a doctoral degree ","5230df62":"**The Data Scientists** are manipulating a lot of tools in many different contexts and usually more than any of the other profiles. This is particularly true for both ML libraries and Plotting libraries where the average number of ML and Plotting libraries used on a daily basis are respectively 3.26 and 2.64.","43e9cf56":"Again, just by overlaying the Data Scientist radar chart over the other profiles' we obtain:","fffbcbee":"That said, I invite you to have a look at the following notebooks who are offering the univariate and bivariate analysis you might be looking for:\n* https:\/\/www.kaggle.com\/subinium\/kaggle-2020-visualization-analysis\n* https:\/\/www.kaggle.com\/frankmollard\/survey-2020-analysis","e9f58876":"<a id=\"s1\">\n    <h2> ... What are 2020 kagglers made of? <\/h2>\n<\/a>","8f33a096":"<a id=\"groups\"> <h4> Why the grouping we chose minimizes the loss compared to others groupings ?<\/h4> <\/a>\nA little note on why I split the data the way I did. Each profile is the aggregation of job titles. The groups I made can be considered fairly good if they are distincts from each other. To verify that, I will use a method, which is far from being the most academic one and does not constitute an accurate proof, but will do the job to show my point.\n\nSo here is the strategy:\n1. I will create new groups using the titles. These new groups will be compared to the Mathematician\/Practitioner\/Developer group I chose for the notebook.\n2. I will use an ML algorithm and see which group get the best accuracy and use a k-fold cross-validation\n\nThe model with the best accuracies should be the one where the features have more discriminative power","2d2664af":"Is it necessary to have a study through \"Profiles\"? Short answer is no but the main reason is the simplification of the analysis. Instead of describing what each job consists of, I chose to tell you what the job is relying on. If you ask what does a Research Scientist do, I will answer you that he does Maths. If you ask what does a Statistician do, I will still answer you that he does Maths. That is because Maths is the raw material for both jobs and what they have in common. \nMaking an EDA with 3 groups (# of Profiles) instead of more makes the comparisons easier to do and allows me to focus on the \"core skills\" that define a range of jobs.\n\nThe drawback for this regroupment in \"Profiles\" might be oversimplification ! Creating bigger groups necessarily leads to a loss of information. While we surely lost information down the road, you might be interested in the reason [why the grouping we chose limits the loss compared to others groupings](#groups).","1060c58a":"*A \"**Profile**\" column is added to the original input data*","21847ec4":"<h2> Kagglers' Profiles <\/h2>\n\nWorking with data involves mastering a large array of skills. Kagglers are all working with data but don't specialize in the same things ! That is why some are hired by some company as **Research Scientists**, **Business Analysts** or **Data Engineers**. The distinctions don't only come up with a different title name but are also coming up with differences in the **tools**, **programming languages**, **developing frameworks** each profession requires.\n\nIf you played a few role-playing games in your childhood, you often begin as a **Novice** and have to choose a **character class** conditionning the skills you're going to develop. For instance if you chose to become a **Swordsman**, you will develop your **strength** and **stamina** but lack the **wisdom** and **dexterity** that your **Mage** fellow has.\n\nBy analogy, you can now replace the words **Novice** to **Student**, **character class** to **job title**, **swordsman** to **software engineer**, **strength** to **programming skill** and you get a sentence which is still making sense.\n\nWhile studying a student has to choose courses leading to raise certain skills ; while working a worker has to apply his skills and develop new ones. The whole notebook will revolve an assumption which is : Skills are defining who you are.\n\n\nInstead of working directly on the job titles (answers of Q5 in the survey), I will specify 3 types of profiles:\n* **The Mathematician**: she\/he is interested in the comprehension of the maths behind ML algorithms. Her\/His strong taste for statistics makes him a good candidate for Research scientist or Statistician. She\/He knows enough about coding to plot graphs aimed at showing her\/his point.\n* **The Practitioner**: she\/he is interested in being practical and is the one who will be the more exposed to the client. She\/He gives as much importance for the form as the content and will rely on tools allowing her\/him to tell good stories about the data she\/he has. She\/He does not want to get too involved in low-level frameworks (except for data visualization maybe) and rely on others to provide him what he lacks.\n* **The Developer**: she\/he is the one who has a better knowledge of programming than the others. The one who will get hives if you don't follow the PEP8 conventions. She\/He is good at structuring things making her\/him to be a great candidate for a software engineer position.\n\nThe profiles will simply be a mapping from the job titles (Q5) and will be organized this way ...","e39c3135":"* Being the youngest among all the others groups of kagglers"}}