{"cell_type":{"3daf972a":"code","7535ab88":"code","234cd01a":"code","34140696":"code","f8aff4d0":"code","0a9b99a9":"code","9786521a":"code","43cdf40f":"code","7752506f":"code","c84c7114":"code","c79fe015":"code","36872a07":"code","34fdd2d9":"code","bcc928d2":"code","c6c41a91":"code","7a6d6066":"code","6e6e73ea":"code","195f9498":"code","668c2c49":"code","00185285":"code","b1c4b368":"code","7d36c349":"code","34916022":"code","a958d74f":"markdown","dcabcaea":"markdown","59aa814f":"markdown","be8fcee1":"markdown","0828df42":"markdown","aa8d492f":"markdown","62f59548":"markdown","53f2843c":"markdown","2c77ae12":"markdown","5786b928":"markdown","fa1f7c71":"markdown","5f803342":"markdown"},"source":{"3daf972a":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport tensorflow as tf\n\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras import metrics\nfrom tensorflow.keras import backend as K","7535ab88":"# Reading the folder architecture of Kaggle to get the dataset path.\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","234cd01a":"# Reading the Train and Test Datasets.\nfish_train = pd.read_csv(\"\/kaggle\/input\/fishes\/train.csv\")\nfish_test = pd.read_csv(\"\/kaggle\/input\/fishes\/test.csv\")","34140696":"# Let's see the shape of the train and test data\nprint(fish_train.shape, fish_test.shape)","f8aff4d0":"# Looking at a few rows from the data isn't a bad idea.\nfish_train.head()","0a9b99a9":"# and yeah, here you will see the basic statistical insights of the numerical features of train data.\nfish_train.describe()","9786521a":"fish_train.isna().any().any()","43cdf40f":"# dividing the data into the input and output features to train make the model learn based on what to take in and what to throw out.\nfish_train_data = fish_train.loc[:, \"#px0\":]\nfish_train_label = fish_train.loc[:, \"Label\"]\n\n# Notmailzing the images array to be in the range of 0-1 by dividing them by the max possible value. \n# Here is it 255 as we have 255 value range for pixels of an image. \nfish_train_data = fish_train_data\/255.0\nfish_test = fish_test\/255.0","7752506f":"# Let's make some beautiful plots.\ndigit_array = fish_train.loc[3, \"#px0\":]\narr = np.array(digit_array) \n\n#.reshape(a, (28,28))\nimage_array = np.reshape(arr, (28,28))\n\ndigit_img = plt.imshow(image_array, cmap=plt.cm.binary)\nplt.colorbar(digit_img)\nprint(\"IMAGE LABEL: {}\".format(fish_train.loc[3, \"Label\"]))","c84c7114":"# Let's build a count plot to see the count of all the labels.\nsns.countplot(fish_train.Label)\nprint(list(fish_train.Label.value_counts().sort_index()))","c79fe015":"# Converting dataframe into arrays\nfish_train_data = np.array(fish_train_data)\nfish_train_label = np.array(fish_train_label)","36872a07":"# Reshaping the input shapes to get it in the shape which the model expects to recieve later.\nfish_train_data = fish_train_data.reshape(fish_train_data.shape[0], 28, 28, 1)\nprint(fish_train_data.shape, fish_train_label.shape)","34fdd2d9":"fish_train_data.shape[0]","bcc928d2":"# But first import some cool libraries before getting our hands dirty!! \n# TensorFlow is Google's open source AI framework and we are using is here to build model.\n# Keras is built on top of Tensorflow and gives us\n# NO MORE GEEKY STUFF, Know more about them here:  https:\/\/www.tensorflow.org     https:\/\/keras.io\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Lambda, Flatten, BatchNormalization\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, AvgPool2D\nfrom tensorflow.keras.optimizers import Adadelta\nfrom keras.utils.np_utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras.callbacks import LearningRateScheduler","c6c41a91":"model = Sequential()\n\n\n#First Hidden layer\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n#Dropout to avoid overfitting\nmodel.add(Dropout(0.25))\n\n#Second Hidden layer\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n#Dropout to avoid overfitting\nmodel.add(Dropout(0.25))\n\n#Flatten output of conv\nmodel.add(Flatten())\n\n#Fully Connected layer\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\n\n#Output layer\nmodel.add(Dense(10, activation = \"softmax\"))\n\nmodel.compile(optimizer = \"adam\", loss = tf.losses.sparse_categorical_crossentropy, metrics = ['accuracy'])\nhist = model.fit(fish_train_data, fish_train_label, epochs = 50)","7a6d6066":"def plot_model_performance(metric, validations_metric):\n    plt.plot(model_history.history[metric],label = str('Training ' + metric))\n    plt.plot(model_history.history[validations_metric],label = str('Validation ' + metric))\n    plt.legend()","6e6e73ea":"plot_model_performance('accuracy', 'val_accuracy')","195f9498":"plot_model_performance('loss', 'val_loss')","668c2c49":"# reshaping the test arrays as we did to train images above somewhere.\nfish_test_arr = np.array(fish_test)\nfish_test_arr = fish_test_arr.reshape(fish_test_arr.shape[0], 28, 28, 1)\nprint(fish_test_arr.shape)","00185285":"# Now, since the model is trained, it's time to find the results for the unseen test images.\npredictions = model.predict(fish_test_arr)","b1c4b368":"# Finally, making the final submissions assuming that we have to submit it in any comptition. P)\npredictions_test = []\npredictions_label = []\n\nfor i in predictions:\n    predictions_test.append(np.argmax(i))\n    \nfor i in predictions_test:\n    if i == 0: \n        predictions_label.append('Pomfret')\n    elif i == 1: \n        predictions_label.append('Mackerel')\n    else: \n        predictions_label.append('Shark')","7d36c349":"submission =  pd.DataFrame({\n        \"ImageId\": fish_test.index+1,\n        \"Prediction\": predictions_test,\n        \"Label\":predictions_label\n    })\n\nsubmission.to_csv('my_submission.csv', index=False)","34916022":"submission.head(50)","a958d74f":"### Transforming testing data","dcabcaea":"## Data Cleaning and Normalization","59aa814f":"### Building a Sequential Model","be8fcee1":"### Data Normalization","0828df42":"### Model Performance Analysis","aa8d492f":"## Import Libraries","62f59548":"# Fish species Classification\n\n> Referred MNIST digit recognizer notebook","53f2843c":"### Model Building Process\n> Training a neural network with one input layer, one hidden layer and one output layer for learning the digits in images.","2c77ae12":"### Countplot for each of the 10 digits.","5786b928":"#### NOTE:\n* Data is totally clean in this case (since the final result says `False` which means it has no missing values)\n* There is no empty field. Data is clean already.","fa1f7c71":"### Visulaize a single digit with an array","5f803342":"### Prediction & Submission"}}