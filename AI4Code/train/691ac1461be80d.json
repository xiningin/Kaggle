{"cell_type":{"bfdae326":"code","e2869d43":"code","89bb296f":"code","cf4cb019":"code","af2ab980":"code","422167da":"code","42fdba26":"code","a66701fc":"code","7ae36394":"code","aa269d15":"code","c7517e53":"code","3cb0c086":"code","6c8900ed":"code","83b168aa":"code","d009e6f0":"code","2cf13931":"code","ec40d533":"code","024c3759":"code","f09e38b9":"code","90912625":"code","ffb621f7":"code","3a7763e8":"code","cd5bcdb7":"code","64a06790":"code","89b1927b":"code","797dd307":"code","d0e92451":"code","738d1f44":"code","d31b02a2":"code","3f503e9a":"code","f74cf25e":"code","eeeca9fa":"code","91a49884":"code","c3ce16d1":"code","487975c4":"code","34ed39dd":"code","3c97423b":"code","dab72039":"code","34996e28":"code","7099e4f3":"code","04accea2":"code","aff2f265":"code","4370552b":"code","0b3f6d72":"code","f7c77e7c":"code","4b633c25":"code","168433b1":"code","48bbdcea":"code","3f19544f":"code","d9b5b48f":"code","208df8b3":"code","e68222bb":"code","3e5be666":"code","1fc43e79":"code","5915ba4d":"code","78549df4":"code","958f187c":"code","5e8fd7de":"code","55f08963":"code","c60880f1":"code","4c161bcf":"code","d55da341":"code","93387756":"code","8b70efbd":"code","69c8b6d0":"code","978da3a4":"code","5cf84ee8":"code","54102975":"code","0810f943":"code","9a0b247f":"code","d13d2f3d":"code","ea064a55":"code","a0d3e50d":"code","5404d802":"code","aa076620":"code","c9e783a9":"markdown","e6abe767":"markdown","f4aaacc9":"markdown","4cd2e892":"markdown","a7fe7461":"markdown","3262505f":"markdown","4edd3d01":"markdown","d3a59173":"markdown","60056179":"markdown","f7df5fd1":"markdown","7b6a726f":"markdown","0a720707":"markdown","dfcad3f8":"markdown","5d029335":"markdown","dba8700f":"markdown","0ba33370":"markdown","d0cd6c43":"markdown","6a55649a":"markdown","bb510806":"markdown","fbf0f7e5":"markdown","65ace4aa":"markdown","ad603c7a":"markdown","98e5c5a4":"markdown","467c425a":"markdown","dc016868":"markdown","19785880":"markdown","74555a32":"markdown","8eabc738":"markdown","f1d319f0":"markdown","200e6343":"markdown","92645546":"markdown","3e573651":"markdown","2683c005":"markdown","f16c766b":"markdown","6bd1bb5d":"markdown","b3ae4325":"markdown","a9bf664b":"markdown","48e2e146":"markdown","5d221e45":"markdown","39309b85":"markdown","bea07538":"markdown","3be537a7":"markdown","ddbabc37":"markdown","d38bf5a8":"markdown"},"source":{"bfdae326":"import numpy as np # \uc120\ud615\ub300\uc218\nimport pandas as pd # \ub370\uc774\ud130 \ud504\ub85c\uc138\uc2f1 (csv \ud30c\uc77c \uc77d\uae30 \ub4f1)\nimport seaborn as sns # \ub370\uc774\ud130 \uc2dc\uac01\ud654\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport plotly.express as px\n\nfrom datetime import date, timedelta\nfrom sklearn.cluster import KMeans # k \ud3c9\uade0 \uad70\uc9d1\nfrom fbprophet import Prophet # \uc2dc\uacc4\uc5f4 \uc608\uce21\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nimport plotly.offline as py\nfrom statsmodels.tsa.arima_model import ARIMA # arima \uc2dc\uacc4\uc5f4\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport statsmodels.api as sm\nfrom keras.models import Sequential # \ub525\ub7ec\ub2dd \ucf00\ub77c\uc2a4\nfrom keras.layers import LSTM,Dense\nfrom keras.layers import Dropout\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\n\n# kaggle directory \uc5d0\uc11c \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\n# coronavirusdataset \uc0ac\uc6a9\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e2869d43":"# \uc99d\uc0c1 \ubd84\ub958 (\uc99d\uc0c1 \ubcc4 \ubc1c\ud604 \ud37c\uc13c\ud14c\uc774\uc9c0 \ub2f4\uc740 data frame \ub9cc\ub4e4\uae30)\nsymptoms={'symptom':['Fever',\n        'Dry cough',\n        'Fatigue',\n        'Sputum production',\n        'Shortness of breath',\n        'Muscle pain',\n        'Sore throat',\n        'Headache',\n        'Chills',\n        'Nausea or vomiting',\n        'Nasal congestion',\n        'Diarrhoea',\n        'Haemoptysis',\n        'Conjunctival congestion'],'percentage':[87.9,67.7,38.1,33.4,18.6,14.8,13.9,13.6,11.4,5.0,4.8,3.7,0.9,0.8]}\n\nsymptoms=pd.DataFrame(data=symptoms,index=range(14))\nsymptoms","89bb296f":"# bar chart\ub85c \ub098\ud0c0\ub0b4\uae30\nfig = px.bar(symptoms[['symptom','percentage']].sort_values('percentage', ascending=False),\n            y='percentage', x='symptom', color='symptom',\n            log_y=True, template='ggplot2', title='Symptoms of Coronavirus')\nfig.show()","cf4cb019":"# pie chart\ub85c \ub098\ud0c0\ub0b4\uae30\nfig = px.pie(symptoms,\n             values='percentage',\n             names='symptom',\n             template='seaborn')\nfig.update_traces(rotation=90, pull=0.05, textinfo='percent+label')\nfig.show()","af2ab980":"# tree plot\uc73c\ub85c \ub098\ud0c0\ub0b4\uae30\nfig = px.treemap(symptoms, path=['symptom'], values='percentage',\n                color='percentage', hover_data=['symptom'],\n                color_continuous_scale='Rainbow')\nfig.show()","422167da":"# word cloud\ub85c \ub098\ud0c0\ub0b4\uae30\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in symptoms.symptom)\nwordcloud = WordCloud(max_words=200, colormap='Set3', background_color='white').generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1, figsize=(12,12))\nplt.show()","42fdba26":"comp = pd.read_excel('\/kaggle\/input\/covid19327\/COVID-19-3.27-top30-500.xlsx')\n\ndf_patient = pd.read_csv('..\/input\/patient\/patient.csv')\ndf_route = pd.read_csv('..\/input\/route\/route.csv')\n\nweather = pd.read_csv('..\/input\/coronavirusdataset\/Weather.csv')","a66701fc":"# \ud658\uc790 \ub370\uc774\ud130 \ubd84\ub958 \uc54c\uc544\ubcf4\uae30\ndf_patient.head()","7ae36394":"df_patient.dtypes","aa269d15":"# \uacb0\uce21\uce58 \ucd1d\ud569 \ub098\ud0c0\ub0b4\uae30\ndf_patient.isna().sum()","c7517e53":"# \ucd9c\uc0dd\uc5f0\ub3c4 \uacb0\uce21\uce58 \ucc98\ub9ac : \uc815\uc758\ud560 \uc218 \uc5c6\ub294 \uc218(NaN)\uc73c\ub85c \uce58\ud658\ndf_patient['birth_year'] = df_patient.birth_year.fillna(0.0).astype(int)\ndf_patient['birth_year'] = df_patient['birth_year'].map(lambda val: val if val > 0 else np.nan)","3cb0c086":"# \ud655\uc9c4\uc77c datetime\uc73c\ub85c type \ubcc0\uacbd\ud558\uae30\ndf_patient.confirmed_date = pd.to_datetime(df_patient.confirmed_date)\n# daily_count (\ud558\ub8e8\uc5d0 \ubc1c\uc0dd\ud55c \ud655\uc9c4\uc790 \uc218 \ud655\uc778 \ubcc0\uc218) \uc0dd\uc131\ud558\uae30\ndaily_count = df_patient.groupby(df_patient.confirmed_date).id.count()\n# accumulated_count (\ub204\uc801 \ud655\uc9c4\uc790 \uc218 \ud655\uc778 \ubcc0\uc218) \uc0dd\uc131\ud558\uae30\naccumulated_count = daily_count.cumsum()","6c8900ed":"# \ub098\uc774 \ubcc0\uc218 \ub9cc\ub4e4\uae30\ndf_patient['age'] = 2020 - df_patient['birth_year']\ndf_patient['age'].head()","83b168aa":"# \ub098\uc774 \ubd84\ud3ec \ubd84\ub958\ud558\uae30\nimport math\ndef group_age(age):\n    if age >= 0: # NaN \uc544\ub2d0 \ub54c\n        if age % 10 != 0: # 10\ub300\uac00 \uc544\ub2d0 \ub54c\n            lower = int(math.floor(age \/ 10.0)) * 10\n            upper = int(math.ceil(age \/ 10.0)) * 10 - 1\n            return f\"{lower}-{upper}\"\n        else: # 10\uc138 \uc774\ud558 \uc601\uc720\uc544\n            lower = int(age)\n            upper = int(age+9)\n            return f\"{lower}-{upper}\"\n    return \"Unknown\" # NaN \uc77c \ub54c\n\ndf_patient['age_range'] = df_patient['age'].apply(group_age)\ndf_patient['age_range'].head()","d009e6f0":"# df_patient\ub97c \uc0ac\uc6a9\ud558\uae30 \uc27d\uac8c patient\ub85c \ubcc0\uacbd\ud568\npatient = df_patient","2cf13931":"# \ub0a0\uc9dc columns datetime\uc73c\ub85c type \ubcc0\ud658\ndate_cols = ['confirmed_date', 'released_date', 'deceased_date']\nfor col in date_cols:\n    patient[col] = pd.to_datetime(patient[col])","ec40d533":"# time_to_release_since_confirmed (\ud655\uc815 \uc774\ud6c4\ub85c \uc99d\uc0c1 \ubc1c\ud604 \uc2dc\uc791\ud55c \ub0a0\uc9dc) \ubcc0\uc218 \ub9cc\ub4e4\uae30\npatient['time_to_release_since_confirmed'] = patient['released_date'] - patient['confirmed_date']\n# time_to_death_since_confirmed (\ud655\uc815 \uc774\ud6c4\ub85c \uc0ac\ub9dd\ud55c \ub0a0\uc9dc) \ubcc0\uc218 \ub9cc\ub4e4\uae30\npatient['time_to_death_since_confirmed'] = patient['deceased_date'] - patient['confirmed_date']\n# duration_since_confirmed (\ud655\uc815 \uc774\ud6c4 \uc9c0\uc18d \uae30\uac04) \ubcc0\uc218 \ub9cc\ub4e4\uae30\npatient['duration_since_confirmed'] = patient[['time_to_release_since_confirmed', 'time_to_death_since_confirmed']].min(axis=1)\n# duration_days (\ud655\uc815 \uc774\ud6c4 \uc9c0\uc18d \uae30\uac04 \uc77c\uc218) \ubcc0\uc218 \ub9cc\ub4e4\uae30\npatient['duration_days'] = patient['duration_since_confirmed'].dt.days\n\n# age range \ubd84\ub958\nage_ranges = sorted(set([ar for ar in patient['age_range'] if ar != 'Unknown']))\n# state_by_gender (\uc131\ubcc4\uacfc \ud604\uc7ac \uc0c1\ud0dc) \ubcc0\uc218 \ub9cc\ub4e4\uae30\npatient['state_by_gender'] = patient['state'] + '-' + patient['sex']","024c3759":"accumulated_count.plot()\nplt.title('Accumulated Confirmed Count')","f09e38b9":"# \ucd5c\uadfc 2\uc8fc \ub300\ud55c\ubbfc\uad6d \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\ntime = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ntime = time[time['Country\/Region'] == 'South Korea']\ntime = time.tail(14)","90912625":"# bar chart - \ucd5c\uadfc 2\uc8fc \ub204\uc801\uc218 \ubd84\ud3ec \uc2dc\uac01\ud654\nplt.figure(figsize=(23, 10))\nplt.bar(time.ObservationDate, time.Confirmed, label='Confirm')\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.legend(frameon=True, fontsize=12)\nplt.title('Confirm', fontsize=30)\nplt.show()\n\nplt.figure(figsize=(23, 10))\nplt.bar(time.ObservationDate, time.Recovered, label='Recovery')\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.legend(frameon=True, fontsize=12)\nplt.title('Recovery', fontsize=30)\nplt.show()\n\nplt.figure(figsize=(23, 10))\nplt.bar(time.ObservationDate, time.Deaths, label='Death')\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.legend(frameon=True, fontsize=12)\nplt.title('Death', fontsize=30)\nplt.show()","ffb621f7":"# bar chart - \ucd5c\uadfc 2\uc8fc \ub204\uc801\uc218 \ud55c \uadf8\ub798\ud504\uc5d0 \ubcf4\uc774\uac8c \uc2dc\uac01\ud654 \ud558\uae30\nplt.figure(figsize=(23, 10))\nplt.bar(time.ObservationDate, time.Confirmed, label='Confirm')\nplt.bar(time.ObservationDate, time.Recovered, label='Recovery')\nplt.bar(time.ObservationDate, time.Deaths, label='Death')\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.legend(frameon=True, fontsize=12)\nplt.title('Confirm vs Recovery vs Death', fontsize=30)\nplt.show()\n\n# line plot - \ucd5c\uadfc 2\uc8fc \ub204\uc801\uc218 \uc810 \ubd84\ud3ec\ub85c \ub098\ud0c0\ub0b4\uae30\nf, ax = plt.subplots(figsize=(23,10))\nax = sns.scatterplot(x='ObservationDate', y='Confirmed', data=time, color='black', label='Confirm')\nax = sns.scatterplot(x='ObservationDate', y='Recovered', data=time, color='red', label='Recovery')\nax = sns.scatterplot(x='ObservationDate', y='Deaths', data=time, color='blue', label='Death')\nplt.plot(time.ObservationDate, time.Confirmed, zorder=1, color='black')\nplt.plot(time.ObservationDate, time.Recovered, zorder=1, color='red')\nplt.plot(time.ObservationDate, time.Deaths, zorder=1, color='blue')","3a7763e8":"# pie chart - \ucd5c\uadfc 2\uc8fc \ucd1d \ud655\uc9c4\/\ud68c\ubcf5\/\uc0ac\ub9dd\uc790\uc218 \ud30c\uc774 \uadf8\ub798\ud504\ub85c \ub098\ud0c0\ub0b4\uae30\ntotal_confirmed = time['Confirmed'].sum()\ntotal_recovered = time['Recovered'].sum()\ntotal_death = time['Deaths'].sum()\n\ndata = [['Confirmed', total_confirmed], ['Recovered', total_recovered], ['Death', total_death]]\ndf = pd.DataFrame(data, columns = ['state', 'count'])\nfig = px.pie(df,\n            values='count',\n            names='state',\n            title='State of Patient',\n            template='seaborn')\nfig.update_traces(rotation=90, pull=0.05, textinfo='percent+label')\nfig.show()","cd5bcdb7":"# \ubcc0\uc218 \uc0dd\uc131\ntime['Confirmed_new'] = time['Confirmed']-time['Confirmed'].shift(1)\ntime['Recovered_new'] = time['Recovered']-time['Recovered'].shift(1)\ntime['Deaths_new'] = time['Deaths']-time['Deaths'].shift(1)","64a06790":"# bar chart - \uc77c\uc77c \uc99d\uac00\uc218 \uc2dc\uac01\ud654\nplt.figure(figsize=(23,10))\nplt.bar(time.ObservationDate, time.Confirmed_new,label=\"Confirm\")\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.legend(frameon=True, fontsize=12)\nplt.title('Confirm',fontsize=30)\nplt.show()\n\nplt.figure(figsize=(23,10))\nplt.bar(time.ObservationDate, time.Recovered_new,label=\"Recovery\")\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.legend(frameon=True, fontsize=12)\nplt.title('Recovery',fontsize=30)\nplt.show()\n\nplt.figure(figsize=(23,10))\nplt.bar(time.ObservationDate, time.Deaths_new,label=\"Death\")\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.legend(frameon=True, fontsize=12)\nplt.title('Death',fontsize=30)\nplt.show()","89b1927b":"# line plot - \uc77c\uc77c \uc99d\uac00\uc218 \uc2dc\uac01\ud654\nf, ax = plt.subplots(figsize=(23,10))\nax = sns.scatterplot(x='ObservationDate', y='Confirmed_new', data=time, color='black', label='Confirm')\nax = sns.scatterplot(x='ObservationDate', y='Recovered_new', data=time, color='red', label='Recovery')\nax = sns.scatterplot(x='ObservationDate', y='Deaths_new', data=time, color='blue', label='Death')\nplt.plot(time.ObservationDate, time.Confirmed_new, zorder=1, color='black')\nplt.plot(time.ObservationDate, time.Recovered_new, zorder=1, color='red')\nplt.plot(time.ObservationDate, time.Deaths_new, zorder=1, color='blue')","797dd307":"global_data = time","d0e92451":"def smoother(inputdata,w,imax):\n    data = 1.0*inputdata\n    data = data.replace(np.nan,1)\n    data = data.replace(np.inf,1)\n    #print(data)\n    smoothed = 1.0*data\n    normalization = 1\n    for i in range(-imax,imax+1):\n        if i==0:\n            continue\n        smoothed += (w**abs(i))*data.shift(i,axis=0)\n        normalization += w**abs(i)\n    smoothed \/= normalization\n    return smoothed\n\ndef growth_factor(confirmed): # \uc99d\uac00\uc728\n    confirmed_iminus1 = confirmed.shift(1, axis=0)\n    confirmed_iminus2 = confirmed.shift(2, axis=0)\n    return (confirmed-confirmed_iminus1)\/(confirmed_iminus1-confirmed_iminus2)\n\ndef growth_ratio(confirmed): # \ucc28\uc9c0 \ube44\uc728\n    confirmed_iminus1 = confirmed.shift(1, axis=0)\n    return (confirmed\/confirmed_iminus1)\n\n# input\uc5d0 \uc788\ub294 \uad6d\uac00\ndef plot_country_active_confirmed_recovered(country):\n    # \ucf00\uc774\uc2a4 \ub098\ub204\uae30\n    country_data = global_data[global_data['Country\/Region']==country]\n    table = country_data.drop(['SNo', 'Province\/State', 'Last Update'], axis=1)\n    table['ActiveCases'] = table['Confirmed'] - table['Recovered'] - table['Deaths']\n    table2 = pd.pivot_table(table, values=['ActiveCases', 'Confirmed', 'Recovered', 'Deaths'], index=['ObservationDate'], aggfunc=np.sum)\n    table3 = table2.drop(['Deaths'], axis=1)\n    \n    # \uc99d\uac00\uc728\n    w = 0.5\n    table2['GrowthFactor'] = growth_factor(table2['Confirmed'])\n    table2['GrowthFactor'] = smoother(table2['GrowthFactor'],w,5)\n\n    # 2\ucc28 \ubbf8\ubd84\n    table2['2nd_Derivative'] = np.gradient(np.gradient(table2['Confirmed']))\n    table2['2nd_Derivative'] = smoother(table2['2nd_Derivative'],w,7)\n\n\n    # \ube44\uc728\n    table2['GrowthRatio'] = growth_ratio(table2['Confirmed'])\n    table2['GrowthRatio'] = smoother(table2['GrowthRatio'],w,5)\n    \n    # \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\n    table2['GrowthRate']=np.gradient(np.log(table2['Confirmed']))\n    table2['GrowthRate'] = smoother(table2['GrowthRate'],0.5,3)\n    \n    # 1.0\ubd80\ud130 \uadf8\ub798\ud504\ub85c \ub098\ud0c0\ub0c4\n    x_coordinates = [1, 100]\n    y_coordinates = [1, 1]\n    f, ax = plt.subplots(figsize=(15,5))\n    table2['Deaths'].plot(title='Deaths') # \uc77c\uc77c \uc0ac\ub9dd\uc218 \uadf8\ub798\ud504\n    plt.show()\n    f, ax = plt.subplots(figsize=(15,5)) \n    table2['GrowthFactor'].plot(title='Growth Factor') # \uc99d\uac00\uc728\n    plt.plot(x_coordinates, y_coordinates) \n    plt.show()\n    f, ax = plt.subplots(figsize=(15,5)) \n    table2['2nd_Derivative'].plot(title='2nd_Derivative') # 2\ucc28 \ubbf8\ubd84\n    plt.show()\n    f, ax = plt.subplots(figsize=(15,5))\n    table2['GrowthRatio'].plot(title='Growth Ratio') # \uc99d\uac00 \ube44\uc728\n    plt.plot(x_coordinates, y_coordinates)\n    plt.show()\n    f, ax = plt.subplots(figsize=(15,5))\n    table2['GrowthRate'].plot(title='Growth Rate') # \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\n    plt.show()\n\n    return ","738d1f44":"plot_country_active_confirmed_recovered('South Korea')","d31b02a2":"# \uac10\uc5fc \ud658\uc790\ninfected_patient = patient.shape[0]\n\n# \ubc1c\ud604 \/ \uc0ac\ub9dd \/ \uaca9\ub9ac\ub85c \ubd84\ub958\nrp = patient.loc[patient[\"state\"] == \"released\"].shape[0]\ndp = patient.loc[patient[\"state\"] == \"deceased\"].shape[0]\nip = patient.loc[patient[\"state\"]== \"isolated\"].shape[0]\n\n# \ubc1c\ud604 \/ \uc0ac\ub9dd \/ \uaca9\ub9ac\uc790 \uc218 \ube44\uc728\nrp=rp\/patient.shape[0]\ndp=dp\/patient.shape[0]\nip=ip\/patient.shape[0]\n\nprint(\"The percentage of recovery is \"+ str(rp*100) )\nprint(\"The percentage of deceased is \"+ str(dp*100) )\nprint(\"The percentage of isolated is \"+ str(ip*100) )","3f503e9a":"states = pd.DataFrame(patient[\"state\"].value_counts())\nstates[\"status\"] = states.index\nstates.rename(columns={\"state\": \"count\"}, inplace=True)\n# \uc0c1\ud0dc \ubcc4 \uc778\uc6d0\uc218 \uc138\uae30\n\n# pie chart - \ubc1c\ud604 \/ \uc0ac\ub9dd \/ \uaca9\ub9ac\uc790 \uc218 \ube44\uc728 \uc2dc\uac01\ud654\nfig = px.pie(states,\n             values=\"count\",\n             names=\"status\",\n             title=\"Current state of patients\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"value+percent+label\")\nfig.show()\n","f74cf25e":"# \ubc1c\ud604\uc790 \uc815\ubcf4\nreleased = df_patient[df_patient.state == 'released']\nreleased.head()","eeeca9fa":"# \uaca9\ub9ac\uc790 \uc815\ubcf4\nisolated = df_patient[df_patient.state == 'isolated']\nisolated.head()","91a49884":"# \uc0ac\ub9dd\uc790 \uc815\ubcf4\ndeceased = df_patient[df_patient.state == 'deceased']\ndeceased.head()","c3ce16d1":"# \ubc1c\ud604\uc790 \ub098\uc774 \ubd84\ud3ec\nplt.figure(figsize=(10,6))\nsns.set_style(\"darkgrid\")\nplt.title(\"Age distribution of the released\")\nsns.kdeplot(data=released['age'], shade=True)","487975c4":"agr = released[released.age_range!=\"Unknown\"]\nfig = px.pie(agr,\n             names=\"age_range\",\n             title=\"Age of released person\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","34ed39dd":"# \uaca9\ub9ac\uc790 \ub098\uc774 \ubd84\ud3ec\nplt.figure(figsize=(10,6))\nsns.set_style(\"darkgrid\")\nplt.title(\"Age distribution of the isolated\")\nsns.kdeplot(data=isolated['age'], shade=True)","3c97423b":"agi = isolated[isolated.age_range!=\"Unknown\"]\nfig = px.pie(agi,\n             names=\"age_range\",\n             title=\"Age of isolated person\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","dab72039":"# \uc0ac\ub9dd\uc790 \ub098\uc774 \ubd84\ud3ec\nplt.figure(figsize=(10,6))\nsns.set_style(\"darkgrid\")\nplt.title(\"Age distribution of the deceased\")\nsns.kdeplot(data=deceased['age'], shade=True)","34996e28":"agd = deceased[deceased.age_range!=\"Unknown\"]\nfig = px.pie(agd,\n             names=\"age_range\",\n             title=\"Age of Dead person\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","7099e4f3":"male_dead = deceased[deceased.sex=='male']\nfemale_dead = deceased[deceased.sex=='female']","04accea2":"plt.figure(figsize=(10,6))\nsns.set_style(\"darkgrid\")\nplt.title(\"Age distribution of the deceased by gender\")\nsns.kdeplot(data=female_dead['age'], label=\"Women\", shade=True)\nsns.kdeplot(data=male_dead['age'],label=\"Male\" ,shade=True)","aff2f265":"plt.figure(figsize=(10,8))\nsns.set_style(\"darkgrid\")\nsns.distplot(a=male_dead['age'], label=\"Men\", kde=False)\nsns.distplot(a=female_dead['age'], label=\"Women\", kde=False)\nplt.title(\"Age distribution of the deceased by sex\")\nplt.legend()","4370552b":"sns.kdeplot(data=deceased['age'],label='deceased', shade=True)\nsns.kdeplot(data=released['age'],label='released', shade=True)\nsns.kdeplot(data=isolated['age'],label='isolated', shade=True)","0b3f6d72":"# \uc131\ubcc4\uc5d0 \ub530\ub978 \uc0ac\ub9dd\uc790 \uc218 \nplt.figure(figsize=(15, 5))\nplt.title('Sex')\ndeceased.sex.value_counts().plot.bar();","f7c77e7c":"fig = px.pie( values=deceased.groupby(['sex']).size().values,names=deceased.groupby(['sex']).size().index)\nfig.update_layout(\n    font=dict(\n        size=15,\n        color=\"#242323\"\n    )\n    )   \n    \npy.iplot(fig)","4b633c25":"# \uc131\ubcc4\uc5d0 \ub530\ub978 \uaca9\ub9ac\uc790 \uc218\nplt.figure(figsize=(15, 5))\nplt.title('Sex')\nisolated.sex.value_counts().plot.bar();","168433b1":"fig = px.pie( values=isolated.groupby(['sex']).size().values,names=isolated.groupby(['sex']).size().index)\nfig.update_layout(\n    font=dict(\n        size=15,\n        color=\"#242323\"\n    )\n    )   \n    \npy.iplot(fig)","48bbdcea":"# \uc131\ubcc4\uc5d0 \ub530\ub978 \ubc1c\ud604\uc790 \uc218\nplt.figure(figsize=(15, 5))\nplt.title('Sex')\nreleased.sex.value_counts().plot.bar();","3f19544f":"fig = px.pie( values=released.groupby(['sex']).size().values,names=released.groupby(['sex']).size().index)\nfig.update_layout(\n    font=dict(\n        size=15,\n        color=\"#242323\"\n    )\n    )   \n    \npy.iplot(fig)","d9b5b48f":"plt.figure(figsize=(15, 5))\nplt.title('Infection Reason')\ndf_patient.infection_reason.value_counts().plot.bar();","208df8b3":"fig = px.pie( values=df_patient.groupby(['infection_reason']).size().values,names=df_patient.groupby(['infection_reason']).size().index)\nfig.update_layout(\n    font=dict(\n        size=15,\n        color=\"#242323\"\n    )\n    )   \n    \npy.iplot(fig)","e68222bb":"# \uacb0\uce21\uce58 \uc81c\uac70\ninf_rsn =  df_patient['infection_reason']\ninf_rsn  = inf_rsn.dropna()","3e5be666":"# \uc6cc\ub4dc\ud074\ub77c\uc6b0\ub4dc\ub85c \ub098\ud0c0\ub0b4\uae30\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in inf_rsn)\nwordcloud = WordCloud(max_words = 200, colormap = 'Set3', background_color='white').generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis('off')\nplt.figure(1, figsize=(12,12))\nplt.show()","1fc43e79":"sns.set_style(\"whitegrid\")\nsns.FacetGrid(df_patient,  size = 20)\\\n.map(plt.scatter, 'age', 'infection_reason')\\\n.add_legend()\nplt.title('Age vs Infection Reason',fontsize=30)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=15)\nplt.show()","5915ba4d":"df_route.head()","78549df4":"# \uacb0\uce21\uce58 \uccb4\ud06c \ud558\uae30\ndf_route.isna().sum() # \uacb0\uce21\uce58 \uc5c6\uc74c \ud655\uc778","958f187c":"# \ud074\ub7ec\uc2a4\ud130\ub9c1 \uc704\ud55c \uc791\uc5c5 \uc2e4\uc2dc\nclus = df_route.loc[:, ['id', 'latitude', 'longitude']]\nclus.head()","5e8fd7de":"# \ud074\ub7ec\uc2a4\ud130 \uac1c\uc218 \uc54c\uc544\ubcf4\uae30\nK_clusters = range(1,8)\nkmeans = [KMeans(n_clusters=i) for i in K_clusters]\n\nY_axis = df_route[['latitude']]\nX_axis = df_route[['longitude']]\nscore = [kmeans[i].fit(Y_axis).score(Y_axis) for i in range(len(kmeans))]\n\nplt.plot(K_clusters, score)\nplt.xlabel('Number of Clusters')\nplt.ylabel('Score')\nplt.show()","55f08963":"# K \ud3c9\uade0 \ud074\ub7ec\uc2a4\ud130\ub9c1 \uc9c4\ud589\nkmeans = KMeans(n_clusters = 3, init ='k-means++')\nkmeans.fit(clus[clus.columns[1:3]])\nclus['cluster_label'] = kmeans.fit_predict(clus[clus.columns[1:3]])\ncenters = kmeans.cluster_centers_\nlabels = kmeans.predict(clus[clus.columns[1:3]])","c60880f1":"# \ud074\ub7ec\uc2a4\ud130 \uc2dc\uac01\ud654\nclus.plot.scatter(x = 'latitude', y = 'longitude', c=labels, s=50, cmap='viridis')\nplt.scatter(centers[:, 0], centers[:, 1], c='black', s=100, alpha=0.5)","4c161bcf":"# folium\uc744 \ud1b5\ud574 \uc9c0\ub3c4 \uc2dc\uac01\ud654\nimport folium\nsouthkorea_map = folium.Map(location=[36.55,126.983333], zoom_start=7, tiles='Stamen Toner') # \ucda9\uccad\ub3c4 \ucbe4 \ubd80\uadfc \uc704\uce58\n\nfor lat, lon, city in zip(df_route['latitude'], df_route['longitude'], df_route['city']):\n    folium.CircleMarker([lat, lon],\n                      radius = 5,\n                      color = 'red',\n                      popup = ('City' + str(city) + '<br>'),\n                      fill_color = 'red',\n                      fill_opacity = 0.7).add_to(southkorea_map)\n    \nsouthkorea_map","d55da341":"# \uc2dc\uac04 \uacbd\uacfc\uc5d0 \ub530\ub77c \ud37c\uc9c0\ub294 \uc815\ub3c4 \uc9c0\ub3c4\ub85c \ud45c\ud604\ncmap1 = df_route\ncmap1 = cmap1.groupby(['date', 'province','latitude','longitude'])['id'].max()\n\n\ncmap1 = cmap1.reset_index()\ncmap1.head()\ncmap1['size'] = cmap1['id']*900\ncmap1\nfig = px.scatter_mapbox(cmap1, lat=\"latitude\", lon=\"longitude\",\n                     color=\"id\", size='size',\n                     color_continuous_scale='burgyl',\n                     animation_frame=\"date\", \n                     title='Spread total cases over time')\nfig.update(layout_coloraxis_showscale=True)\nfig.update_layout(mapbox_style=\"carto-positron\",\n                  mapbox_zoom=3)\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.show()\n","93387756":"# \uc2dc\/\ub3c4 \uae30\uc900 \ube44\uad50\nplt.figure(figsize=(15,5))\nplt.title('Number patients in province')\ndf_route.province.value_counts().plot.bar();","8b70efbd":"fig = px.pie(values=df_route.groupby(['province']).size().values,names=df_route.groupby(['province']).size().index)\nfig.update_layout(\n    font=dict(\n        size=15,\n        color=\"#242323\"\n    )\n    )   \n    \npy.iplot(fig)","69c8b6d0":"# setting\ndata = daily_count.resample('D').first().fillna(0).cumsum()\ndata = data[20:] # 2\/9\ubd80\ud130 \ub370\uc774\ud130 \uc0ac\uc6a9\nx = np.arange(len(data)).reshape(-1, 1)\ny = data.values","978da3a4":"from sklearn.neural_network import MLPRegressor\nmodel = MLPRegressor(hidden_layer_sizes=[32, 32, 10], max_iter=50000, alpha=0.0005, random_state=26)\n_=model.fit(x, y)","5cf84ee8":"test = np.arange(len(data)+7).reshape(-1, 1)\npred = model.predict(test)\nprediction = pred.round().astype(int)\nweek = [data.index[0] + timedelta(days=i) for i in range(len(prediction))]\ndt_idx = pd.DatetimeIndex(week)\npredicted_count = pd.Series(prediction, dt_idx)","54102975":"# \uc2e4\uc81c \ucd5c\uadfc \ud655\uc9c4\uc790\uc640 \uc608\uce21 \ud655\uc9c4\uc790\uc218 \uadf8\ub798\ud504\ub85c \ube44\uad50\ud558\uae30\naccumulated_count.plot()\npredicted_count.plot()\nplt.title('Prediction of Accumulated Confirmed Count')\nplt.legend(['current confirmd count', 'predicted confirmed count'])\nplt.show()","0810f943":"prophet= pd.DataFrame(data)\nprophet\npr_data = prophet.reset_index()\npr_data.columns = ['ds','y']\npr_data.head()","9a0b247f":"# \uc608\uce21\ud558\uae30\nm=Prophet()\nm.fit(pr_data)\nfuture=m.make_future_dataframe(periods=15)\nforecast=m.predict(future)\nforecast","d13d2f3d":"# \uc608\uce21 \uadf8\ub798\ud504\ub85c \ub098\ud0c0\ub0b4\uae30\nfigure = plot_plotly(m, forecast)\npy.iplot(figure) \n\nfigure = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count')","ea064a55":"figure=m.plot_components(forecast)","a0d3e50d":"confirm_cs = pd.DataFrame(data).cumsum()\narima_data = confirm_cs.reset_index()\narima_data.columns = ['confirmed_date','count']\narima_data.head()","5404d802":"model = ARIMA(arima_data['count'].values, order=(1, 2, 1))\nfit_model = model.fit(trend='c', full_output=True, disp=True)\nfit_model.summary()","aa076620":"fit_model.plot_predict()\nplt.title('Forecast vs Actual')\npd.DataFrame(fit_model.resid).plot()","c9e783a9":"### \ud68c\uadc0 \ubaa8\ud615 \ub9cc\ub4e4\uae30","e6abe767":"### \ubc1c\ud604 \/ \uaca9\ub9ac \/ \uc0ac\ub9dd\uc790 \ubcc4 \ub098\uc774 \ubd84\ud3ec \uc54c\uc544\ubcf4\uae30","f4aaacc9":"### \uacbd\ub85c \ub370\uc774\ud130\ub97c \ud1b5\ud55c \ud074\ub7ec\uc2a4\ud130\ub9c1","4cd2e892":"![\uc0ac\ud68c\uc801 \uac70\ub9ac\ub450\uae30](https:\/\/www.gyeongju.go.kr\/upload\/ckuploads\/2020\/20200405\/08FCA747201F4969994E87EA07D6D25C.png)","a7fe7461":"\uaca9\ub9ac\uc790 \uc218\ub294 \uc131\ubcc4\uc5d0 \ub530\ub978 \ucc28\uc774\uac00 \ud06c\uac8c \uc5c6\ub2e4.","3262505f":"### \ucf54\ub85c\ub098-19 \uc99d\uc0c1 \ubd84\ub958\ud558\uae30 <br>\n[\ud574\ub2f9 \ubb38\uc11c \ucc38\uace0](https:\/\/en.wikipedia.org\/wiki\/Coronavirus_disease_2019)","4edd3d01":"### \ub098\uc774 \ubcc4 \uac10\uc5fc \uc6d0\uc778 \ubd84\ud3ec \uc54c\uc544\ubcf4\uae30","d3a59173":"pie chart\uc5d0\uc11c\ub294 \ud604\uc7ac \ud655\uc9c4\uc790\uc218\uc640 \ud68c\ubcf5\uc790\uc218\uc758 \ube44\uc728\uc774 \uac70\uc758 \ube44\uc2b7\ud574\uc9c0\uace0 \uc788\ub294 \uc0c1\ud669\uc774\ub77c \uc55e\uc11c \uc0b4\ud3b4\ubcf8 \uadf8\ub798\ud504\ub97c \ub354\ud574\ubcfc \ub54c, <br>\n\ud68c\ubcf5\uc790\uc218\uc640 \ud655\uc9c4\uc790\uc218\uc758 \uc99d\uac00 \ucd94\uc774\uac00 \uc704\uc640 \uac19\uc774 \ud758\ub7ec\uac04\ub2e4\uba74 \ud68c\ubcf5\uc790\uc218\uc758 \ube44\uc728\uc774 \ud655\uc9c4\uc790\uc218\uc758 \ube44\uc728\ubcf4\ub2e4 \uc55e\uc124 \uac83\uc73c\ub85c \uc608\uc0c1\ud560 \uc218 \uc788\ub2e4.","60056179":"### \ud604\uc7ac \uc0c1\ud0dc\ubcc4 \uc99d\uac00\uc728\uacfc \ube44\uc728 \ub098\ud0c0\ub0b4\uae30","f7df5fd1":"regression model\uc774 \uc2e4\uc81c \ub370\uc774\ud130\ub97c \uc81c\ub300\ub85c \ubc18\uc601\ud558\uc5ec \uc608\uce21\ud558\uace0 \uc788\ub2e4.","7b6a726f":"### \uc131\ubcc4\uc5d0 \ub530\ub978 \uc0ac\ub9dd\uc790 \ub098\uc774\ubcc4 \ubd84\ud3ec \uc54c\uc544\ubcf4\uae30","0a720707":"\uaca9\ub9ac\uc790\ub294 \uc5f0\ub839\ub300\ubcc4\ub85c \ub2e4\uc591\ud558\uac8c \ubd84\ud3ec\ub418\uc5b4 \uc788\ub2e4. 20\ub300\uac00 \uac00\uc7a5 \ub9ce\uace0, \uadf8 \uc774\ud6c4\ub85c 50\ub300, 30\ub300\uc640 60\ub300\uac00 \ub4a4\ub97c \uc787\ub294\ub2e4.","dfcad3f8":"\uc804\uccb4 \ube44\uc728\uc744 \ubcfc \ub54c, \ud68c\ubcf5\uc790\uc218\ub294 \uc0c1\uc2b9\ud558\ub294 \ubc18\uba74 \ud655\uc9c4\uc790\uc218\uc640 \uc0ac\ub9dd\uc790\uc218\ub294 \ub354\ub514\uac8c \uc0c1\uc2b9\ud558\uace0 \uc788\uc5b4 \uae0d\uc815\uc801\uc73c\ub85c \uc804\ub9dd\ud560 \uc218 \uc788\ub2e4.","5d029335":"### \uac10\uc5fc \uc0ac\uc720 \uc54c\uc544\ubcf4\uae30","dba8700f":"### \ub204\uc801 \ud655\uc9c4 \/ \ud68c\ubcf5 \/ \uc0ac\ub9dd\uc790 \uc218 \ubd84\ud3ec \uc815\ub9ac","0ba33370":"\ub0a8\uc131\uc774 \uc5ec\uc131\ubcf4\ub2e4 \uc0ac\ub9dd\uc790 \uc218 \ube44\uc728\uc774 2\ubc30 \uc774\uc0c1\uc73c\ub85c \ub098\ud0c0\ub09c\ub2e4.","d0cd6c43":"\ub098\uc774\uac00 \ub9ce\uc744 \uc218\ub85d \uc5ec\uc131\ubcf4\ub2e4 \ub0a8\uc131\uc758 \uc0ac\ub9dd\uc790 \uc218\uac00 \ub354 \ub192\ub2e4\uace0 \ubcfc \uc218 \uc788\ub2e4.","6a55649a":"### \ub204\uc801 \ud655\uc9c4\uc790\uc218 \uadf8\ub798\ud504\ub85c \ub098\ud0c0\ub0b4\uae30","bb510806":"### \uc608\uce21\uacfc \uc2e4\uc81c \ub370\uc774\ud130 \ube44\uad50\ud558\uae30","fbf0f7e5":"### \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30","65ace4aa":"\ub098\uc774\uac00 \uc5b4\ub9b4\uc218\ub85d \uaca9\ub9ac\uc790 \ubd84\ud3ec\uac00 \ub192\uace0, \ub098\uc774\uac00 \ub9ce\uc744 \uc218\ub85d \uc0ac\ub9dd\uc790 \ubd84\ud3ec\uac00 \ub192\ub2e4.","ad603c7a":"\ub2e4\ub978 \uad6d\uac00\uc5d0 \uac14\ub2e4\uc640\uc11c \ubc14\uc774\ub7ec\uc2a4\uac00 \ubc1c\ud604\ub41c \uc5f0\ub839\ub300\ub294 \uccad\ub144\uce35\uc774 \uc911\uc7a5\ub144\uce35\ubcf4\ub2e4 \ub192\uac8c \ubcf4\uc778\ub2e4.","98e5c5a4":"\ubc1c\ud604\uc790\ub294 30\ub300\uac00 25.7%\ub85c \uac00\uc7a5 \ub9ce\uc558\uace0, \uadf8 \ub4a4\ub97c \uc774\uc5b4 40-50\ub300, 20\ub300, 60\ub300, 70\ub300 \uc21c\uc73c\ub85c \ub098\ud0c0\ub0ac\ub2e4. <br>\n\uc8fc\ub85c \uccad\uc7a5\ub144\uce35\uc5d0\uc11c \ub9ce\uc774 \ubc1c\ud604\ub418\uc5c8\uace0, \ud65c\ubc1c\ud55c \uc0ac\ud68c\uc0dd\ud65c\ub85c \uc778\ud558\uc5ec \ud0c0\uc778 \uc811\ucd09 \ube48\ub3c4\uac00 \ub192\uae30 \ub54c\ubb38\uc73c\ub85c \ucd94\uc815\ud55c\ub2e4.","467c425a":"\ubc1c\ud604\uc790 \uc218 \ub610\ud55c \uc131\ubcc4\uc5d0 \ub530\ub978 \ucc28\uc774\uac00 \ud06c\uac8c \ubcf4\uc774\uc9c0 \uc54a\ub294\ub2e4.","dc016868":"\uac10\uc5fc \uc0ac\uc720\ub294 \ud658\uc790\uc640\uc758 \uc811\ucd09\uc774 \uc808\ubc18\uc73c\ub85c \uac00\uc7a5 \ub9ce\uc558\uace0, \uadf8 \ub4a4\ub85c \ub300\uad6c\ub098 \uc6b0\ud55c\uacfc \uac19\uc740 \ud3ed\ubc1c\uc801 \ubc1c\ud604 \uc9c0\uc5ed \ubc29\ubb38, \uc774\uc2a4\ub77c\uc5d8\uc774\ub098 \uc2f1\uac00\ud3ec\ub974\uc640 \uac19\uc740 \ubc1c\ud604 \uad6d\uac00\uc5d0 \ubc29\ubb38\ud55c \uc21c\uc73c\ub85c \uc9d1\uacc4\ub410\ub2e4.","19785880":"1. id : \ud658\uc790 ID\n2. sex : \uc131\ubcc4\n3. birth_year : \ucd9c\uc0dd\uc5f0\ub3c4\n4. country : \uad6d\uac00\n5. region : \uc138\ubd80 \uc9c0\uc5ed\n6. group : \uc9d1\ub2e8 \uac10\uc5fc \uc5ec\ubd80\n7. infection_reason : \uac10\uc5fc \uc0ac\uc720\n8. infection_order : \uac10\uc5fc \uc5ec\ubd80\n9. infected_by : \uc5b4\ub5a4 \ud658\uc790 ID\ub85c\ubd80\ud130 \uac10\uc5fc\ub418\uc5c8\ub294\uc9c0\n10. contact_number : \uc811\ucd09\uc790 \uc218\n11. confirmed_date : \ud655\uc9c4\uc77c\n12. released_date : \uc99d\uc0c1 \ubc1c\ud604\uc77c\n13. deceased_date : \uc0ac\ub9dd\uc77c\n14. state : \ud604\uc7ac \uc0c1\ud0dc (isolated \uaca9\ub9ac \/ released \uaca9\ub9ac\ud574\uc81c \/ deceased \uc0ac\ub9dd)","74555a32":"### \uc9c0\uc5ed \ubcc4 \ud658\uc790 \uc218 \ube44\uad50\ud558\uae30","8eabc738":"### \uacb0\uce21\uce58 \ud655\uc778 \ubc0f \ucc98\ub9ac & \ubcc0\uc218 \uc0dd\uc131","f1d319f0":"\uadf8\ub798\ud504\ub97c \ubcfc \ub54c, number of clusters\uac00 3\uac1c \uc774\ud6c4\ub85c \uadf8\ub798\ud504\uac00 \uc644\ub9cc\ud558\uae30 \ub54c\ubb38\uc5d0 \ucd5c\ub300\uce58\uc778 3\uac1c\ub85c \uc124\uc815\ud55c\ub2e4.","200e6343":"\ucf54\ub85c\ub098-19, \ud604\uc7ac\uae4c\uc9c0 \ud55c\uad6d\uc5d0\uc11c \uc5b4\ub5a0\ud55c \uc591\uc0c1\uc73c\ub85c \uc9c4\ud589\ub418\uace0 \uc788\ub294 \uac83\uc77c\uae4c? <br>\n\uc815\ubd80\ub294 \uc5f0\uc77c '\uc0ac\ud68c\uc801 \uac70\ub9ac\ub450\uae30'\ub97c \uac15\uc870\ud558\uba70 \uc0ac\ub78c\ub4e4\uac04\uc758 \uc811\ucd09\uc744 \uc790\uc81c\ud558\ub77c\uace0 \ub2f9\ubd80\ud558\uace0 \uc788\ub2e4. <br>\n\ucf54\ub85c\ub098-19\uc5d0 \ub300\ud574 \uc544\uc9c1 \uc548\uc2ec\ud558\uae30\ub294 \uc2dc\uae30\uc0c1\uc870\uc778\uc9c0 \ud658\uc790 \ub370\uc774\ud130\ub97c \ud1b5\ud574 \uc54c\uc544\ubcf4\uace0\uc790 \ud55c\ub2e4!","92645546":"### \uc131\ubcc4\uc5d0 \ub530\ub978 \ubc1c\ud604 \/ \uaca9\ub9ac \/ \uc0ac\ub9dd\uc790 \uc218 \uc54c\uc544\ubcf4\uae30","3e573651":"2020\ub144 2\uc6d4 20\uc77c \ubd80\uadfc\uc5d0\uc11c \uc2dc\uc791\ud558\uc5ec \ub204\uc801 \ud655\uc9c4\uc790 \uc218\uac00 \uae30\ud558\uae09\uc218\uc801\uc73c\ub85c \ub298\uc5b4\ub098\uae30 \uc2dc\uc791\ud558\uc600\ub2e4. <br>\n\ud574\ub2f9 \ud655\uc9c4\uc790 \uc218 \uc99d\uac00\ub294 ID 31\ubc88 \ub300\uad6c \uc2e0\ucc9c\uc9c0 \uad50\uc778 \ud658\uc790\uac00 '\uc288\ud37c \uc804\ud30c\uc790' \uc5ed\ud560\uc744 \ud558\uba74\uc11c \uc704\uc640 \uac19\uc774 \ud655\uc0b0\ub41c \uac83\uc73c\ub85c \ubcf4\uc778\ub2e4\ub294 \uae30\uc0ac\uac00 \uc218\ucc28\ub840 \ub098\uc628 \ubc14 \uc788\ub2e4. <br>\n\n*[\uad00\ub828 \uae30\uc0ac \ucc38\uace0: \uc2e0\ucc9c\uc9c0 \ub300\uad6c\uad50\ud68c\uc11c '\uc288\ud37c\uc804\ud30c' \ubc1c\uc0dd\u2026\uc608\ubc30 \ucc38\uc11d\uc790 \uc804\uc6d0\uc870\uc0ac(\uc885\ud5692\ubcf4) \/ 2020.02.19](https:\/\/www.yna.co.kr\/view\/AKR20200219114353017?section=search)*","2683c005":"## [\ubb34\uc791\uc815 kaggle \ub530\ub77c\ud558\uae30] \ucf54\ub85c\ub098-19 \ub300\ud55c\ubbfc\uad6d \ubd84\uc11d","f16c766b":"\uc0ac\ub9dd\uc790\ub294 \uc6b0\ub9ac\uac00 \uae30\uc874\uc5d0 \uc608\uc0c1\ud558\uace0 \uc788\ub358 \ub300\ub85c \uace0\ub839\uce35\uc774 \ub9ce\uc740 \ube44\uc728\uc744 \ucc28\uc9c0\ud558\uace0 \uc788\ub2e4. \uc0ac\ub9dd\uc790\uc758 \uc808\ubc18\uc774 60-70\ub300\uc774\ub2e4. <br>\n\uc601\uc720\uc544\uae30 ~ 20\ub300 \ubc1c\ud604\uc790\uc5d0\uac8c\uc11c\ub294 \uc0ac\ub9dd\uc790 \uc218\uac00 \ub098\uc624\uc9c0 \uc54a\uc558\ub2e4.","6bd1bb5d":"### Prophet \uc608\uc5b8 - \uc2dc\uacc4\uc5f4 \ubaa8\ub378","b3ae4325":"### \uc77c\uc77c \uc99d\uac00\uc728 \uc0b4\ud3b4\ubcf4\uae30","a9bf664b":"### *\ucc38\uace0 : \uc804 \uc138\uacc4 \uac10\uc5fc \uad6d\uac00 \uc54c\uc544\ubcf4\uae30 *","48e2e146":"### ARIMA \uc2dc\uacc4\uc5f4 \ubaa8\ub378","5d221e45":"### \ub098\uc774\uc5d0 \ub530\ub978 \ubc1c\ud604\uc790\uc640 \uc0ac\ub9dd\uc790 \uc218 \ube44\uad50\ud558\uae30","39309b85":"*kaggle \uc5f0\uc2b5\uc744 \uc704\ud55c notebook\uc785\ub2c8\ub2e4. <br>\n*\ud574\ub2f9 \ucee4\ub110\uc740 \ub2e4\uc74c \uc790\ub8cc\ub97c \ucc38\uace0\ud558\uc600\uc2b5\ub2c8\ub2e4. <br>\n* [vanshjatana\uc758 Analysis on Coronavirus](https:\/\/www.kaggle.com\/vanshjatana\/analysis-on-coronavirus)","bea07538":"### \ud658\uc790 \ub370\uc774\ud130 \ubd84\ud3ec \ud655\uc778\ud558\uae30","3be537a7":"### \uc2dc\uacc4\uc5f4 \ubd84\uc11d (\ucd5c\uadfc 2\uc8fc \ub370\uc774\ud130\ub9cc \ubd88\ub7ec\uc624\uae30)","ddbabc37":"### \ud658\uc790 \ud604\uc7ac \uc0c1\ud0dc \ubd84\ud3ec \uc54c\uc544\ubcf4\uae30","d38bf5a8":"### Route Data \uc0b4\ud3b4\ubcf4\uae30"}}