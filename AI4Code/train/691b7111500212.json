{"cell_type":{"f07d2ebb":"code","926f4ec8":"code","ec10fb11":"code","1d026726":"code","74e86afe":"code","3585c968":"code","3a12f0f3":"code","91b32b9a":"code","792de022":"code","418882ed":"code","d32ae8ca":"code","b5c4e5ae":"code","c55237ce":"code","ab1c3928":"code","fb19e999":"code","599beace":"code","17866211":"code","7d5723b5":"code","b2f23cf5":"code","330f7205":"code","d15a3fd8":"code","d5637743":"code","f6f307a4":"code","34ff57f3":"code","ca7aedd8":"code","26241ef0":"code","6c7dcdab":"code","349a64be":"code","fe78c66a":"code","57ead61a":"code","d68db723":"code","f422eaef":"code","7c362663":"code","ab5966fd":"code","714892a1":"markdown","7e92e54c":"markdown","76dd8a16":"markdown","e5272191":"markdown","8dabffd8":"markdown","489885ba":"markdown","b7584c1a":"markdown","a27c98b1":"markdown","ac646479":"markdown","a5a03b8b":"markdown","c30810a7":"markdown","760cfe2c":"markdown","e407d679":"markdown"},"source":{"f07d2ebb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","926f4ec8":"import torch\nfrom tqdm.notebook import tqdm","ec10fb11":"df = pd.read_csv(\"\/kaggle\/input\/smile-twitter-emotion-dataset\/smile-annotations-final.csv\",\n                names = ['Id','Text','Category'])\ndf.set_index('Id',inplace = True)\ndf[:4]","1d026726":"df.Text.iloc[0]","74e86afe":"df.Category.value_counts()","3585c968":"df = df[(df.Category!=\"nocode\")]\ndf = df[~(df.Category.str.contains(\"\\|\"))]\ndf.Category.value_counts()","3a12f0f3":"possible_label = df.Category.unique()\ndict_label = {}\nfor index,possible_label in enumerate(possible_label):\n    dict_label[possible_label] = index\ndict_label","91b32b9a":"df[\"Label\"] = df[\"Category\"].replace(dict_label)\ndf.head()","792de022":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.rcParams['figure.figsize'] = (5,5)\nsns.countplot(df[\"Label\"],hue = df[\"Label\"],palette = 'dark')\nplt.legend(loc = 'upper right')\nplt.show()","418882ed":"labels = [0,1,2,3,4,5]\nsizes = df[\"Label\"].value_counts()\ncolors = plt.cm.copper(np.linspace(0, 1, 5))\nexplode = [0.1, 0.1,0.1, 0.2, 0.5, 0.9]\ncmap = plt.get_cmap('Spectral')\nplt.pie(sizes,labels = labels,colors = colors,shadow = True,explode = explode)\nplt.legend()\nplt.show()","d32ae8ca":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(df.index.values,\n                                                df.Label.values,\n                                                test_size = 0.15,\n                                                random_state=17,\n                                                stratify = df.Label.values)","b5c4e5ae":"# df[\"data_type \"] = ['not_set']*df.shape[0]\n# df.head()","c55237ce":"# for i in df.index:\n#     if i in X_train:\n#         df[\"data_type\"].replace(\"not_set\",\"train\")\n#     elif i in X_test:\n#         df[\"data_type\"].replace(\"not_set\",\"test\")\n# df.head() \ndf.loc[X_train,'data_type'] = 'train'\ndf.loc[X_test,'data_type'] = 'test'","ab1c3928":"df.head()","fb19e999":"df.groupby(['Category','Label','data_type']).count()","599beace":"from transformers import BertTokenizer\nfrom torch.utils.data import TensorDataset","17866211":"tokenizer = BertTokenizer.from_pretrained('bert-base-uncased',\n                                         do_lower_case = True)","7d5723b5":"encoder_train = tokenizer.batch_encode_plus(df[df[\"data_type\"]=='train'].Text.values,\n                                           add_special_tokens = True,\n                                            return_attention_masks = True,\n                                           pad_to_max_length = True,\n                                           max_length = 256,\n                                           return_tensors = 'pt')\n\n\n\nencoder_test = tokenizer.batch_encode_plus(df[df[\"data_type\"]=='test'].Text.values,\n                                           add_special_tokens = True,\n                                            return_attention_masks = True,\n                                           pad_to_max_length = True,\n                                           max_length = 256,\n                                           return_tensors = 'pt')\n\ninput_ids_train = encoder_train['input_ids']\nattention_masks_train = encoder_train[\"attention_mask\"]\nlabels_train = torch.tensor(df[df['data_type']=='train'].Label.values)\n\n\ninput_ids_test = encoder_test['input_ids']\nattention_masks_test = encoder_test[\"attention_mask\"]\nlabels_test = torch.tensor(df[df['data_type']=='test'].Label.values)","b2f23cf5":"data_train = TensorDataset(input_ids_train,attention_masks_train,labels_train)\ndata_test = TensorDataset(input_ids_test,attention_masks_test,labels_test)\n","330f7205":"len(data_train),len(data_test)","d15a3fd8":"from transformers import BertForSequenceClassification\nmodel = BertForSequenceClassification.from_pretrained('bert-base-uncased',\n                                     num_labels = len(dict_label),\n                                     output_attentions = False,\n                                     output_hidden_states =  False)","d5637743":"from torch.utils.data import RandomSampler,SequentialSampler,DataLoader\n\ndataloader_train = DataLoader(\n    data_train,\n    sampler= RandomSampler(data_train),\n    batch_size = 16\n    \n)\n\n\ndataloader_test = DataLoader(\n    data_test,\n    sampler= RandomSampler(data_test),\n    batch_size = 32\n    \n)","f6f307a4":"from transformers import AdamW,get_linear_schedule_with_warmup\noptimizer = AdamW(model.parameters(),lr = 1e-5,eps = 1e-8)\n\nepochs  = 10\nscheduler = get_linear_schedule_with_warmup(\n            optimizer,\n    num_warmup_steps = 0,\n   num_training_steps = len(dataloader_train)*epochs \n)","34ff57f3":"from sklearn.metrics import f1_score \n\ndef f1_score_func(preds,labels):\n    preds_flat = np.argmax(preds,axis=1).flatten()\n    labels_flat = labels.flatten()\n    return f1_score(labels_flat,preds_flat,average = 'weighted')\n","ca7aedd8":"def accuracy_per_class(preds,labels):\n    label_dict_reverse = {v:k for k,v in dict_label.items()}\n    \n    preds_flat = np.argmax(preds,axis=1).flatten()\n    labels_flat = labels.flatten()\n    \n    for label in np.unique(labels_flat):\n        y_preds = preds_flat[labels_flat==label]\n        y_true = labels_flat[labels_flat==label]\n        print(f\"Class:{label_dict_reverse}\")\n        print(f\"Accuracy:{len(y_preds[y_preds==label])}\/{len(y_true)}\\n\")","26241ef0":"import random\n\nseed_val = 17\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)","6c7dcdab":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel.to(device)\n\nprint(f\"Loading:{device}\")","349a64be":"def evaluate(dataloader_val):\n    model.eval()\n    \n    loss_val_total = 0\n    predictions,true_vals = [],[]\n    \n    for batch in tqdm(dataloader_val):\n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':  batch[0],\n                  'attention_mask':batch[1],\n                  'labels': batch[2]\n                 }\n        with torch.no_grad():\n            outputs = model(**inputs)\n            \n        loss = outputs[0]\n        logits = outputs[1]\n        loss_val_total +=loss.item()\n        \n        logits = logits.detach().cpu().numpy()\n        label_ids = inputs['labels'].cpu().numpy()\n        predictions.append(logits)\n        true_vals.append(label_ids)\n        \n        \n    loss_val_avg = loss_val_total\/len(dataloader_val)  \n    \n    predictions = np.concatenate(predictions,axis=0)\n    true_vals = np.concatenate(true_vals,axis=0) \n    return loss_val_avg,predictions,true_vals\n            ","fe78c66a":"for epoch in tqdm(range(1,epochs+1)):\n    model.train()\n    \n    loss_train_total=0\n    \n    progress_bar = tqdm(dataloader_train,desc = \"Epoch: {:1d}\".format(epoch),leave = False,disable = False)\n    \n    \n    for batch in progress_bar:\n        model.zero_grad()\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {\n            \"input_ids\":batch[0],\n            \"attention_mask\":batch[1],\n            \"labels\":batch[2]\n            \n        }\n        outputs = model(**inputs)\n        \n        loss = outputs[0]\n#         logits = outputs[1]\n        loss_train_total +=loss.item()\n        loss.backward()\n        \n        torch.nn.utils.clip_grad_norm(model.parameters(),1.0)\n        \n        optimizer.step()\n        scheduler.step()\n        \n        \n        progress_bar.set_postfix({'training_loss':'{:.3f}'.format(loss.item()\/len(batch))})\n#     torch.save(model.state_dict(),f'\/kaggle\/output\/BERT_ft_epoch{epoch}.model')To save the model after each epoch\n    \n    tqdm.write('\\nEpoch {epoch}')\n    \n    loss_train_avg = loss_train_total\/len(dataloader_train)\n    tqdm.write(f'Training Loss: {loss_train_avg}')\n    val_loss,predictions,true_vals = evaluate(dataloader_test)\n    test_score = f1_score_func(predictions,true_vals)\n    tqdm.write(f'Val Loss:{val_loss}\\n Test Score:{test_score}')\n    ","57ead61a":"# from transformers import BertForSequenceClassification\n# model = BertForSequenceClassification.from_pretrained('bert-base-uncased',\n#                                      num_labels = len(dict_label),\n#                                      output_attentions = False,\n#                                      output_hidden_states =  False)","d68db723":"model.to(device)\n","f422eaef":"# #using saved model\n# model.load_state_dict(torch.load(\"Path of saved model\"))# in case want to use the saved model\n# _,predictions,true_vals = evaluate(dataloader_test)\n# accuracy_per_class(predictions,true_vals)","7c362663":"_,predictions,true_vals = evaluate(dataloader_test)","ab5966fd":"accuracy_per_class(predictions,true_vals)","714892a1":"Defining Evaluation","7e92e54c":"Defining Model metrics","76dd8a16":"* Training Data","e5272191":"# Modeling","8dabffd8":"We will be filtering the emotions with single emotions and ignoring the rest.","489885ba":"Reading SMILE twitter emotion dataset","b7584c1a":"![BERT](https:\/\/miro.medium.com\/max\/2960\/0*63_xsVQp0Wezk9ua.jpg)","a27c98b1":"# Using the saved model","ac646479":"#  What is BERT?\n* BERT stands for Bidirectional Encoders Representations from Transformers.\n* Bidirectional - to understand the text you\u2019re looking you\u2019ll have to look back (at the previous words) and forward (at the next words)\n* Transformers - The Attention Is All You Need paper presented the Transformer model. The Transformer reads entire sequences of tokens at once. In a sense, the model is non-directional, while LSTMs read sequentially (left-to-right or right-to-left). The attention mechanism allows for learning contextual relations between words (e.g. his in a sentence refers to Jim).\n* (Pre-trained) contextualized word embeddings - The ELMO paper introduced a way to encode words based on their meaning\/context. Nails has multiple meanings - fingernails and metal nails.\n\nIn this notebook we will be using transformers library by hugging face.","a5a03b8b":"* Counts of Emotions in the dataset","c30810a7":"From torch we will use data loader,randomsampler to load data in an iterable format but extracting different subsamples from dataset.","760cfe2c":"Encoding text by tokenizing using BERT Tokenizer\n* In order to use BERT text embeddings as input to train text classification model, we need to tokenize our text reviews. Tokenization refers to dividing a sentence into individual words. To tokenize our text, we will be using the BERT tokenizer","e407d679":"* We will use sequence classification model as we have to classify multi label text from the dataset."}}