{"cell_type":{"7865d0ae":"code","22fc4b5a":"code","7a4ac74a":"code","f2b1f454":"code","2dd27756":"code","89754994":"code","d523d3af":"code","5721c6da":"code","32e2836a":"code","3986aaf3":"code","69cdd779":"code","e48033c0":"code","dc97c52c":"code","8d6ec0ac":"code","e9dea2dd":"code","0ef570a4":"code","3f079362":"code","10449a6f":"code","ca2deee4":"code","a709e867":"code","9786d143":"code","d8c0e39b":"code","34369dc9":"code","067ba8c3":"code","82f6ff66":"code","d43f2c4d":"code","4992ca47":"code","17437f86":"code","bd3bc56d":"code","7d31e82d":"code","e94fe1c9":"code","c63cbfc6":"code","8f1285c6":"code","399d9481":"code","926d3550":"code","523625f7":"code","1801ba11":"code","65d07f11":"code","b442e76f":"code","fb294033":"code","3ca79c09":"code","0da301c9":"code","c0809a1e":"code","5ba4d36d":"code","f8d3b17c":"code","4417bbdb":"code","485c545c":"code","a077e188":"code","46724470":"code","e54c95a6":"code","f2b3ec07":"code","f0721f56":"code","7c668dc5":"code","b3ba03ba":"code","4e52067d":"code","6a03a8e4":"code","fd62e1b9":"code","d5668363":"code","99d0ebb1":"code","1413a379":"code","f54668ea":"code","2a9aecd0":"code","ca1ed69e":"code","01eb8f0a":"code","0ae35264":"code","c751b6f3":"code","3878f07f":"code","76362eb4":"code","9ace6ab2":"code","8c2f90d8":"code","896b75ad":"code","3cb4aca8":"code","22296d94":"code","6a8dcc67":"code","6c8a5ab5":"code","f9886b84":"code","280f5dc8":"code","496cc7b8":"code","51f1e0fa":"code","1730f65e":"code","00a1d347":"code","0e8e480e":"code","968616f2":"code","1eb87914":"code","239bb9d5":"code","31aee12d":"code","39d39c11":"code","81ed909c":"code","9ea93bd1":"code","6109cb9d":"markdown","a485de5b":"markdown","97cb1377":"markdown","6ae49b91":"markdown","9049738e":"markdown","94e73417":"markdown","d94aaba4":"markdown","454c6c49":"markdown","6f8b77de":"markdown","10b3234d":"markdown","8467bc8f":"markdown","d7b2dfd2":"markdown","28d32825":"markdown","6cd834df":"markdown","c656ce81":"markdown","7d6bd58e":"markdown","7bab8e1b":"markdown","4347ca5c":"markdown","de7df285":"markdown","daa97a62":"markdown","5c3089a5":"markdown","2fa549a0":"markdown","0b44e34d":"markdown","757ae9ee":"markdown","8543fa9d":"markdown","adf02b94":"markdown","3244c930":"markdown","9f1947ef":"markdown","2f86e99f":"markdown","16e90b87":"markdown","addd8cec":"markdown","03ce025a":"markdown","436dc4b6":"markdown","6c22b089":"markdown","9c0de333":"markdown","a883f6c5":"markdown","b7b2bc7f":"markdown","fd9bcede":"markdown","5f52882b":"markdown","37ddfb11":"markdown","0b996e60":"markdown","61a60862":"markdown","71a84703":"markdown","37a89070":"markdown","c8a95345":"markdown","bf820abe":"markdown","48a6181b":"markdown","e99780bb":"markdown","ee39ac0b":"markdown","27b2e843":"markdown","68f467d3":"markdown","d566f2f3":"markdown","a9064682":"markdown","14be147a":"markdown","eead523c":"markdown","bbbccf5f":"markdown","887c8ba9":"markdown","c060d9da":"markdown","e0ee4b1b":"markdown","7e716684":"markdown","ffeb11fd":"markdown","d134fcde":"markdown","f10af504":"markdown","8a338073":"markdown","9d56c52c":"markdown","8ae774dd":"markdown","7893ee2d":"markdown","ac8de7d7":"markdown","d1ffa60e":"markdown","f1034803":"markdown","ce8dc416":"markdown","0cb968ee":"markdown","3b8656ee":"markdown","da7154b7":"markdown","43ce0023":"markdown","5cec45e9":"markdown"},"source":{"7865d0ae":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","22fc4b5a":"import warnings\n\nwarnings.filterwarnings('ignore')","7a4ac74a":"# Import train and test dataset\n\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\n\n\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\n","f2b1f454":"df_train.shape , df_test.shape","2dd27756":"df_train.head()","89754994":"df_test.head()","d523d3af":"df_train.info()","5721c6da":"df_test.info()","32e2836a":"df_train.describe()","3986aaf3":"df_test.describe()","69cdd779":"# check the type of variables in dataset\n\ndf_train.dtypes","e48033c0":"# find categorical variables\n\n\ncategorical = [var for var in df_train.columns if df_train[var].dtype=='O']\n\n\nprint('There are {} categorical variables\\n'.format(len(categorical)))\n\n\nprint('The categorical variables are :', categorical)","dc97c52c":"# view the categorical variables\n\ndf_train[categorical].head()","8d6ec0ac":"# find numerical variables\n\nnumerical = [var for var in df_train.columns if df_train[var].dtype!='O']\n\nprint('There are {} numerical variables\\n'.format(len(numerical)))\n\nprint('The numerical variables are :', numerical)","e9dea2dd":"# preview the numerical variables\n\ndf_train[numerical].head()","0ef570a4":"# check missing values in variables in training data\n\ndf_train.isnull().sum()","3f079362":"# check missing values in variables in test data\n\ndf_test.isnull().sum()","10449a6f":"df_train['Sex'].value_counts()","ca2deee4":"df_test['Sex'].value_counts()","a709e867":"# label minors as child, and remaining people as female or male\n\ndef label_child(passenger):\n    \n    # take the age and sex\n    age, sex = passenger\n    \n    # compare age, return child if under 16, otherwise leave sex\n    if age < 16:\n        return 'child'\n    else:\n        return sex","9786d143":"# create a new column `person` which specify the person as male, female or child\n\ndf_train['Person'] = df_train[['Age', 'Sex']].apply(label_child, axis = 1)\n\ndf_test['Person'] = df_test[['Age', 'Sex']].apply(label_child, axis = 1)","d8c0e39b":"# check the distribution in `Person` variable in training data\n\ndf_train['Person'].value_counts()","34369dc9":"# check the distribution in `Person` variable in test data\n\ndf_test['Person'].value_counts()","067ba8c3":"# print number of labels in Pclass variable\n\nprint('Pclass contains', len(df_train['Pclass'].unique()), 'labels')","82f6ff66":"# view labels in Pclass variable\n\ndf_train['Pclass'].unique()","d43f2c4d":"# check frequency distribution of values in Pclass variable\n\ndf_train['Pclass'].value_counts()","4992ca47":"# Person segregated by class in training set\n\nsns.factorplot('Pclass', data = df_train, hue = 'Person', kind = 'count')","17437f86":"# distribution of age in training dataset\n\ndf_train['Age'].hist(bins=25, grid=False)\n","bd3bc56d":"# distribution of age in test dataset\n\n\ndf_test['Age'].hist(bins=25, grid=False)","7d31e82d":"# age segregated by Person\n\nfig = sns.FacetGrid(df_train, hue = 'Person', aspect = 4)\nfig.map(sns.kdeplot, 'Age', shade = True)\nfig.add_legend()","e94fe1c9":"# view the median age of people in training and test set\n\nfor df1 in [df_train, df_test]:\n    print(df1.groupby('Person')['Age'].median())","c63cbfc6":"# impute missing values with respective median values\n\nfor df1 in [df_train, df_test]:\n    df1['Age'] = df1['Age'].fillna(df1.groupby('Person')['Age'].transform('median'))","8f1285c6":"df_train['Age'].isnull().sum()        ","399d9481":"df_test['Age'].isnull().sum()","926d3550":"# print number of labels in Cabin variable\n\nprint('Cabin contains', len(df_train['Cabin'].unique()), 'labels in training set')\n\nprint('\\nCabin contains', len(df_test['Cabin'].unique()), 'labels in test set')","523625f7":"df_train['CabinLetter'] = df_train['Cabin'].str.get(0)\n\ndf_test['CabinLetter'] = df_test['Cabin'].str.get(0)","1801ba11":"# print number of labels in CabinLetter variable\n\nprint('CabinLetter contains', len(df_train['CabinLetter'].unique()), 'labels in training set\\n')\n\nprint('CabinLetter contains', len(df_test['CabinLetter'].unique()), 'labels in test set')\n","65d07f11":"# view labels in CabinLetter variable in training set\n\ndf_train['CabinLetter'].unique()","b442e76f":"# view labels in CabinLetter variable in test set\n\ndf_test['CabinLetter'].unique()","fb294033":"# view labels in Cabin variable in training set\n\ndf_train['Cabin'].unique()","3ca79c09":"df_train['CabinLetter'].isnull().sum()","0da301c9":"df_test['CabinLetter'].isnull().sum()","c0809a1e":"sns.factorplot('CabinLetter', data = df_train, hue = 'Person', kind = 'count')","5ba4d36d":"sns.factorplot('CabinLetter', data = df_test, hue = 'Person', kind = 'count')","f8d3b17c":"# impute missing values in CabinLetter with respective mode values\n\nfor df1 in [df_train, df_test]:\n    df1['CabinLetter'] = df1['CabinLetter'].fillna(df1['CabinLetter'].mode().iloc[0])","4417bbdb":"for df1 in [df_train, df_test]:\n    print(df1['CabinLetter'].isnull().sum())","485c545c":"df_train.drop('Cabin', axis = 1, inplace = True)\n\ndf_test.drop('Cabin', axis = 1, inplace = True)","a077e188":"# check distribution of `Embarked` variable in training set\n\ndf_train['Embarked'].value_counts()","46724470":"# check distribution of `Embarked` variable in test set\n\ndf_test['Embarked'].value_counts()","e54c95a6":"# where did people from different classes get on board\n\nsns.factorplot('Embarked', data = df_train, hue= 'Pclass', kind = 'count')","f2b3ec07":"for df1 in [df_train, df_test]:\n    print(df1['Embarked'].isnull().sum())","f0721f56":"df_train['Embarked'].fillna('S', inplace = True)","7c668dc5":"for df1 in [df_train, df_test]:\n    print(df1['Fare'].isnull().sum())","b3ba03ba":"df_test['Fare'].fillna(df_test.Fare.mean(), inplace =True)","4e52067d":"df_train.isnull().sum()","6a03a8e4":"df_test.isnull().sum()","fd62e1b9":"for df1 in [df_train, df_test]:\n    df1['Familyman'] = df1.Parch + df1.SibSp\n    df1['Familyman'].loc[df1['Familyman'] > 0] = 'Yes'\n    df1['Familyman'].loc[df1['Familyman'] == 0] = 'No'","d5668363":"# check the frequency distribution of `Familyman` variable\n\nfor df1 in [df_train, df_test]:\n    print(df1['Familyman'].value_counts())","99d0ebb1":"def man_with_spouse(passenger):\n    sex, sibsp = passenger\n    if sex == 'male' and sibsp > 0:\n        return 1\n    else:\n        return 0","1413a379":"# create a new variable `man_and_spouse` to check whether a man is travelling with spouse\n\nfor df1 in [df_train, df_test]:\n    df1['man_and_spouse'] = df1[['Sex', 'SibSp']].apply(man_with_spouse, axis = 1)","f54668ea":"def woman_with_child(passenger):\n    age, sex, parch = passenger\n    if age > 20 and sex == 'female' and parch > 0:\n        return 1\n    else:\n        return 0","2a9aecd0":"# create a new variable `is_mother` to check whether a woman is travelling with child\n\nfor df1 in [df_train, df_test]:\n    df1['is_mother'] = df1[['Age', 'Sex', 'Parch']].apply(woman_with_child, axis = 1)","ca1ed69e":"# Preview the train dataset again\n\ndf_train.head()","01eb8f0a":"# preview the test dataset again\n\ndf_test.head()","0ae35264":"# drop PassengerId variable \n\nfor df1 in [df_train, df_test]:\n    df1.drop('PassengerId', axis=1, inplace=True)\n","c751b6f3":"# drop Ticket variable \n\nfor df1 in [df_train, df_test]:\n    df1.drop('Ticket', axis=1, inplace=True)","3878f07f":"# drop Name variable \n\nfor df1 in [df_train, df_test]:\n    df1.drop('Name', axis=1, inplace=True)","76362eb4":"X_train = df_train.drop(['Survived'], axis=1)\n\ny_train = df_train.Survived\n\nX_test = df_test","9ace6ab2":"X_train.head()","8c2f90d8":"X_test.head()","896b75ad":"# encode sex variable\n\nfor df1 in [X_train, X_test]:\n    df1['Sex']  = pd.get_dummies(df1.Sex, drop_first=True)","3cb4aca8":"X_train.Sex.unique()","22296d94":"X_test.Sex.unique()","6a8dcc67":"# import category encoders\n\nimport category_encoders as ce","6c8a5ab5":"# encode categorical variables with ordinal encoding\n\nencoder = ce.OneHotEncoder(cols=['Embarked', 'Person', 'CabinLetter', 'Familyman'])\n\nX_train = encoder.fit_transform(X_train)\n\nX_test = encoder.transform(X_test)","f9886b84":"X_train.head()","280f5dc8":"cols = X_train.columns","496cc7b8":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\n\nX_train = scaler.fit_transform(X_train)\n\nX_test = scaler.transform(X_test)\n","51f1e0fa":"X_train = pd.DataFrame(X_train, columns=[cols])","1730f65e":"X_test = pd.DataFrame(X_test, columns=[cols])","00a1d347":"from xgboost import XGBClassifier","0e8e480e":"xgb_final = XGBClassifier()","968616f2":"xgb_final.fit(X_train, y_train)","1eb87914":"y_pred = xgb_final.predict(X_test)","239bb9d5":"test_df = pd.read_csv('..\/input\/titanic\/test.csv')\n","31aee12d":"test_df.head()","39d39c11":"submission = pd.DataFrame({\n                        \"PassengerId\": test_df['PassengerId'],\n                        \"Survived\": y_pred\n                          })","81ed909c":"submission.head()","9ea93bd1":"#Convert DataFrame to a csv file that can be uploaded\n#This is saved in the same directory as your notebook\n\nfilename = 'Titanic Predictions.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","6109cb9d":"The `Sex` variable are categorized into 2 categories -`Male` and `Female`. Males have relatively low probability of survival than females. \n\nRight ? - Wrong.\n\nMale and female categories also have children. So, a male child have a relatively higher probability of survival than a male person. So, I will segregate the children from the passengers onboard at titanic.","a485de5b":"### Observations\n\n\n- We can see that age is positively skewed in case of male, female and child. So, mean is not an appropriate measure for imputation in this case\n\n\n- Whenever we have positively skewed distribution, we should use median for missing values imputation. So, I will use median age to impute missing values.","97cb1377":"### Remove unimportant features - `Ticket` , `Name` and `PassengerId`\n","6ae49b91":"### Again check for missing values in `CabinLetter`","9049738e":"## 10. Machine Learning algorithm building\n","94e73417":"We can see that all the missing values have been removed from the dataset.","d94aaba4":"## 9. Feature scaling","454c6c49":"## 2. Import data","6f8b77de":"## 7. Feature engineering","10b3234d":"### Check whether a person is a mother travelling with children","8467bc8f":"The above analysis shows that most people were travelling alone with no family. So, they have relatively low orobability of survival.","d7b2dfd2":"## Check for missing values in the training and test data set","28d32825":"We can see that there are categorical and numerical variables in the dataset. Moreover several of the variables contain missing values. I will explore this later.\n\nNow, I will view the summary statistics of numerical variables.","6cd834df":"### Import libraries","c656ce81":"In this case, We can see that the `Age`, `Fare` and `Cabin` variable contain missing values in test dataset. ","7d6bd58e":"We can see that number of labels in `Cabin` training and test set have been significantly reduced from 148 to 9 and from 77 to 8.","7bab8e1b":"### Check for missing values in `Age` variable","4347ca5c":"I will impute missing values in `CabinLetter` by the most frequent values segregated by person.","de7df285":"### XGBoost Classifier","daa97a62":"### Preview the dataset","5c3089a5":"### Encode categorical variables\n\n\nNow, I will encode the categorical variables.","2fa549a0":"### Find numerical variables\n\nIn this section, I will find the numerical variables.","0b44e34d":"## Explore `Sex` variable","757ae9ee":"### encode sex variable","8543fa9d":"## 5. Data Preprocessing","adf02b94":"### Impute `Embarked` variable with the most frequent port (S)","3244c930":"There are 3 ports of embarkation. They are `Cherbourg(C)`, `Queenstown(Q)` and `Southampton(S)`.","9f1947ef":"- We can see that there are 3 discrete variables and 2 continuous variables in the dataset.\n\n- The 3 discrete variables are - `Pclass`, `SibSp` and `Parch`.\n\n- The 2 continuous variables are - `Fare` and `Age`.","2f86e99f":"### Check for missing values in `Embarked` variable","16e90b87":"We can see that there are mixture of categorical and numerical variables in the dataset. Numerical are those of type int and float. Categorical those of type object.","addd8cec":"### Titanic Disaster\n","03ce025a":"We have a problem here. There are large number of labels in `Cabin` variable in training and test set. \n\nTo solve the problem, I will extract first letter of Deck from `Cabin`. The number of `Cabin` is irrelevant as the letter specifies the location in the boat.","436dc4b6":"### Drop old variable `Cabin`","6c22b089":"### Imputation of `Age` variable\n","9c0de333":"The above plots show number of people onboard in different types of cabin.","a883f6c5":"We can see that there are 891 instances and 12 variables in the dataset.","b7b2bc7f":"### View summary statistics of numerical variables","fd9bcede":"### Check the shape of dataframe","5f52882b":"- We can see that there 2 mixed type of variables: Cabin and Ticket\n\n\n- Cabin and Ticket variables contain both numbers and letters. I will extract the numerical part and then the non-numerical part and generate 2 variables out of them.\n\n","37ddfb11":"We can see that the `Age`, `Cabin` and `Embarked` variable contain missing values in training dataset. ","0b996e60":"Now, we can see that there are no missing values in `Age` variable in training and test set.","61a60862":"## Explore `Cabin` variable","71a84703":"## Explore `Pclass` variable","37a89070":"Now, we can see that there are no missing values in the `CabinLetter` variable.","c8a95345":"### Observations\n\n\n- We can see that there are large number of men travelling in Pclass 3. These men have lowest probability of survival amongst all combinations of `Person` and `Pclass`.\n\n\n- `Female` and `child` in Pclass 1 have highest probability of survival amongst all combinations of `Person` and `Pclass`.\n\n\n- The children in Pclass 3 have a higher probability of survival than men in Pclass 3.","bf820abe":"### encode remaining categorical variable with categorical encoder","48a6181b":"### Explore whether a passenger was with family or not","e99780bb":"### Check for missing values in `Fare` variable","ee39ac0b":"### Extract first letter of Deck from the Cabin\n\n\nI will create a new variable `CabinLetter` that will extract first letter of `Cabin`.","27b2e843":"## 3. Exploratory Data Analysis","68f467d3":"We now have `X_train` dataset ready to be fed into a classifier. \n","d566f2f3":"So, I have created a new column `Person` which categorized the passengers as male, female and child.","a9064682":"### Check for missing values in `CabinLetter` variable","14be147a":"We can see that `Age` is positively skewed. I will do some visualizations to explore more about the `Age` variable.","eead523c":"## 6. Declare feature vector and target variable","bbbccf5f":"### Feature extraction for child label","887c8ba9":"### Drop `Ticket` variable\n\n\n`Ticket` variable contain too many labels. So, it doesn't have much predictive power. I will remove it from the dataset.","c060d9da":"## Explore `Age` variable","e0ee4b1b":"We can see that there are 2 missing values in `Embarked` variable in training set and none in test set.","7e716684":"We can see that there is a label `T` in the `Cabin` variable in training set.","ffeb11fd":"## Preview the dataset again","d134fcde":"We can see that there is a null value in `Fare` variable in test set. I will replace it with the mean fare in test set.","f10af504":"### Drop `PassengerId` variable\n\n\n`PassengerId` is a unique identifier for each passenger. So, it is not a variable that contributes towards the predictive power of the model. Hence, I will remove this variable from the dataset. ","8a338073":"## Explore `Embarked` variable","9d56c52c":"We can see that the categorical variables that are required to be encoded are `Sex`, `Embarked`, `Person`, `CabinLetter` and `Familyman`.","8ae774dd":"### Identify types of variables\n\n\nIn this section, I will find out what types of variables there are in this dataset.","7893ee2d":"## Explore `Fare` variable","ac8de7d7":"### Summary - Types of variables\n\n\n- There are 5 categorical variables in the dataset. They are given by `Name`, `Sex`, `Ticket`, `Cabin` and `Embarked`.\n\n- Out of the above 5 categorical variables, 2 are of mixed type variables - `Ticket` and `Cabin`\n\n- There are 5 numerical variables in the dataset. They are given by `Pclass`, `Age`, `SibSp`, `Parch` and `Fare`.\n\n- Out of the above 5 numerical variables - 3 are discrete variables and 2 are continuous variables in the dataset.\n\n- The 3 discrete variables are - `Pclass`, `SibSp` and `Parch`.\n\n- The 2 continuous variables are - `Fare` and `Age`.\n","d1ffa60e":"### View summary of dataframe","f1034803":"### Drop `Name` variable","ce8dc416":"The above comparision shows that there is an extra label in `CabinLetter` variable in training set. So, I will take a look at the `Cabin` labels in training set. ","0cb968ee":"### Check whether a man is travelling with spouse","3b8656ee":"### Ignore warnings","da7154b7":"Now, I will segregate the Person by class.","43ce0023":"## 4. Data Exploration and Preprocessing \n\n\nNow, I will explore the potential problems within variables. I will start by finding the missing values.\n\n\n### Missing values in variables","5cec45e9":"### Find categorical variables\n\nIn this section, I will find the categorical variables."}}