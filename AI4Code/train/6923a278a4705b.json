{"cell_type":{"389f688d":"code","4b2179e1":"code","b4da055c":"code","9438e863":"code","a935480c":"code","18b2a931":"code","a749cbf2":"code","b1de85d6":"code","6b841e32":"code","f2354f02":"code","51c68b6b":"code","7310b817":"code","8924e827":"code","50d140ca":"code","417379a8":"code","0dc24e06":"code","79e40165":"code","4b19cc95":"code","be0e1fd6":"code","b0550a1f":"code","d80bce79":"code","f69666b3":"code","b15159a1":"code","c4b254f4":"code","e2c5d6f3":"code","97fda37f":"code","320a64b9":"code","914fce3e":"code","6ac4d4ec":"code","20439635":"code","4e1bf7c0":"code","95bc771a":"code","8b9ebec2":"code","0ac7d6ee":"code","d5a045b8":"code","d6590fa3":"code","3058e097":"code","02e252ba":"code","42154054":"code","f1eaf6d0":"code","35c11ca3":"code","cd4d50e1":"code","87608f08":"code","6f0ab1c7":"code","1c53cdd6":"code","ebe4b047":"code","5935f62d":"code","d7329b81":"code","5b631667":"code","db9466ae":"code","b8d525e7":"code","0a547f5a":"code","30c4d1db":"code","18bc9679":"code","0820d686":"code","c1c83a87":"code","79195c46":"code","f63176fd":"code","dddb359b":"markdown","26deb533":"markdown","80ccf432":"markdown","2b2e9335":"markdown","c99b955c":"markdown","1c2e2e3f":"markdown","109de499":"markdown","b9dbcdbc":"markdown","786685c0":"markdown","8bfd6d2c":"markdown","44e52f4b":"markdown","3d19b6f6":"markdown","d0b80c88":"markdown","53653ad1":"markdown","32701ec7":"markdown","8575faad":"markdown","7e58077c":"markdown","0ec7ff02":"markdown","3264a942":"markdown","16b0f444":"markdown","983dcd8a":"markdown","af821437":"markdown","bebd8e5b":"markdown","b89b13f6":"markdown","8ec8e4ab":"markdown","e7641a97":"markdown","da8a33eb":"markdown","b84b49ea":"markdown"},"source":{"389f688d":"import os\nfrom os.path import join\nimport warnings\nimport calendar\n\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot","4b2179e1":"%matplotlib inline\n\nsns.set_style('whitegrid')\nsns.set_context(\"paper\", font_scale=1.5)\ninit_notebook_mode(connected=True)\nplt.rcParams.update({'font.size': 12})\n\nwarnings.filterwarnings('ignore')","b4da055c":"purple_colors = sns.color_palette(\"Purples\")","9438e863":"input_path = '..\/input'","a935480c":"csv_names = sorted(os.listdir(input_path))\ncsv_descriptions = ['Answers text with question id', 'All comments with parent details (Q or A)', \n                'Emails sent to the subscribers with mail frequency and question details',\n                'Which group does a member belong to', 'Mapping from group id to name',\n                'Mapping from email to questions', 'Details of professionals who joined with location and date',\n                'Questions with time it was asked and student ID',\n               'Which school does a member belong to',\n               'Details of students who joined with location and date',\n               'Tag ID to question mapping', 'Tag ID to user mapping',\n               'Tag ID to tag name mapping']\n\nfor i, (a,b) in enumerate(zip(csv_names, csv_descriptions)):\n    print('{:>2}. {:>25}  :  {}'.format(i+1,a,b)) ","18b2a931":"# Loading the csvs\n\ndf_tags = pd.read_csv(join(input_path,'tags.csv'))\ndf_tag_users = pd.read_csv(join(input_path,'tag_users.csv'))\ndf_tag_questions = pd.read_csv(join(input_path,'tag_questions.csv'))\n\ndf_students = pd.read_csv(join(input_path,'students.csv'))\ndf_professionals = pd.read_csv(join(input_path,'professionals.csv'))\n\ndf_emails = pd.read_csv(join(input_path,'emails.csv'))\ndf_matches = pd.read_csv(join(input_path,'matches.csv'))\n\ndf_questions = pd.read_csv(join(input_path, 'questions.csv'))\ndf_answers = pd.read_csv(join(input_path, 'answers.csv'))\n\ndf_comments = pd.read_csv(join(input_path, 'comments.csv'))","a749cbf2":"num_of_questions = len(set(df_questions['questions_id']))\nprint('Total Number Of Questions : {}'.format(num_of_questions))","b1de85d6":"df_questions['questions_date_added'] = pd.to_datetime(df_questions['questions_date_added'])\ndf_questions_copy = df_questions.set_index(keys='questions_date_added')","6b841e32":"df_questions_yearly_distibution = df_questions_copy['questions_id'].groupby([df_questions_copy.index.year]).count()\ndf_questions_month_distibution = df_questions_copy['questions_id'].groupby([df_questions_copy.index.month]).count()\n\ndf_questions_copy['month_year'] = df_questions_copy.index.to_period('M').astype('str')\ndf_questions_monthly_distibution = df_questions_copy[['month_year', 'questions_id']].groupby(by='month_year').count()","f2354f02":"fig = plt.figure(figsize=(16, 12))\nax1 = plt.subplot2grid((2, 2), (0, 0))\nax2 = plt.subplot2grid((2, 2), (0, 1))\nax3 = plt.subplot2grid((2, 2), (1, 0), colspan=2)\n\nax1.set_xlabel('Years')\nax2.set_xlabel('Month Number')\nax3.set_xlabel('Month (MM-YYYY)')\n\nax1.set_ylabel('No. Of Questions Asked')\nax2.set_ylabel('Average No. Of Questions for each month')\nax3.set_ylabel('No. Of Questions Asked')\n\nax1.set_title('Questions asked per year')\nax2.set_title('Average questions asked per month')\nax3.set_title('Questions month over month')\n\nax3.set_xticklabels(ax3.get_xticklabels(), rotation=90)\nax2.set_xticklabels(ax2.get_xticklabels(), rotation=90)\n\nx_ = df_questions_month_distibution.index.values \nsns.barplot(df_questions_yearly_distibution.index.values, \n            df_questions_yearly_distibution.values, \n            color=purple_colors[-2], \n            ax=ax1)\nax1.axhline(0, color=\"k\", clip_on=False)\nsns.barplot([calendar.month_name[m ] for m in x_], \n            df_questions_month_distibution.values, \n            color=purple_colors[-2], \n            ax=ax2)\nax2.axhline(0, color=\"k\", clip_on=False)\nsns.barplot(df_questions_monthly_distibution.index.values, \n            df_questions_monthly_distibution.values.ravel(), \n            color=purple_colors[-2], \n            ax=ax3)\nax3.axhline(0, color=\"k\", clip_on=False)\n\nfig.tight_layout()","51c68b6b":"TOP_NUM = 30","7310b817":"num_of_professionals = len(set(df_professionals['professionals_id']))\nprint('Total Number Of Professionals : {}'.format(num_of_professionals))","8924e827":"df_professionals['professionals_industry'] = df_professionals[~pd.isnull(df_professionals['professionals_industry'])]['professionals_industry'].astype(str)\ndf_professionals_industry = df_professionals['professionals_industry'].value_counts().sort_values(ascending=False)\n\ndf_professionals['professionals_location'] = df_professionals[~pd.isnull(df_professionals['professionals_location'])]['professionals_location'].astype(str)\ndf_professionals_location = df_professionals['professionals_location'].value_counts().sort_values(ascending=False)","50d140ca":"fig, ax = plt.subplots(1, 2, figsize=(25, 9))\nsns.barplot(df_professionals_industry.index.values[:TOP_NUM], \n            df_professionals_industry.values[:TOP_NUM], \n            color=purple_colors[-2], \n            ax=ax[0])\n\nsns.barplot(df_professionals_location.index.values[:TOP_NUM], \n            df_professionals_location.values[:TOP_NUM], \n            color=purple_colors[-2], \n            ax=ax[1])\n\nax[0].set_title('Professionals by industry')\nax[1].set_title('Professionals by location')\n\nax[0].set_ylabel('Count')\nax[1].set_ylabel('Count')\n\nax[0].set_xlabel('Industry')\nax[1].set_xlabel('Location')\n\nax[0].set_xticklabels(ax[0].get_xticklabels(), rotation=90, fontsize=15);\nax[1].set_xticklabels(ax[1].get_xticklabels(), rotation=90, fontsize=15);\n\nax[0].axhline(0, color=\"k\", clip_on=False)\nax[1].axhline(0, color=\"k\", clip_on=False)","417379a8":"df_professionals['professionals_date_joined'] = pd.to_datetime(df_professionals['professionals_date_joined'])\ndf_professionals_copy = df_professionals.set_index(keys='professionals_date_joined')","0dc24e06":"df_professionals_yearly_distibution = df_professionals_copy['professionals_id'].groupby([df_professionals_copy.index.year]).count()\ndf_professionals_month_distibution = df_professionals_copy['professionals_id'].groupby([df_professionals_copy.index.month]).count()\n\ndf_professionals_copy['month_year'] = df_professionals_copy.index.to_period('M').astype('str')\ndf_professionals_monthly_distibution = df_professionals_copy[['month_year', 'professionals_id']].groupby(by='month_year').count()\n\nx = df_professionals_month_distibution.index.values","79e40165":"fig = plt.figure(figsize=(16, 12))\nax1 = plt.subplot2grid((2, 2), (0, 0))\nax2 = plt.subplot2grid((2, 2), (0, 1))\nax3 = plt.subplot2grid((2, 2), (1, 0), colspan=2)\n\nax1.set_xlabel('Years')\nax2.set_xlabel('Month Number')\nax3.set_xlabel('Month (MM-YYYY)')\n\nax1.set_ylabel('No. Of Professionals Joined')\nax2.set_ylabel('No. Of Professionals Joined')\nax3.set_ylabel('No. Of Professionals Joined')\n\nax2.set_xticklabels(ax2.get_xticklabels(), rotation=90)\nax3.set_xticklabels(ax3.get_xticklabels(), rotation=90)\n\nsns.barplot(df_professionals_yearly_distibution.index.values, \n            df_professionals_yearly_distibution.values, \n            color=purple_colors[-2], \n            ax=ax1)\nax1.axhline(0, color=\"k\", clip_on=False)\nsns.barplot([calendar.month_name[m] for m in x], \n            df_professionals_month_distibution.values, \n            color=purple_colors[-2], \n            ax=ax2)\nax2.axhline(0, color=\"k\", clip_on=False)\nsns.barplot(df_professionals_monthly_distibution.index.values, \n            df_professionals_monthly_distibution.values.ravel(), \n            color=purple_colors[-2], \n            ax=ax3);\nax3.axhline(0, color=\"k\", clip_on=False)\n\nfig.suptitle('Distribution of professionals joining over time');\n\nfig.tight_layout(pad=3.5)","4b19cc95":"df_email_matches = df_emails.merge(df_matches, left_on='emails_id', right_on='matches_email_id', how='outer')\ndf_email_matches = df_email_matches.drop('matches_email_id', axis=1)\ndf_email_matches = df_email_matches.rename({'emails_id' : 'email_id'}, axis=1)","be0e1fd6":"fig, ax = plt.subplots(1, 1, figsize=(9, 9))\n\nsns.countplot(x='emails_frequency_level', data=df_emails, ax=ax, color=purple_colors[-2]);\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, horizontalalignment='right')\nax.set_xlabel('Email notification Frequency');\nax.set_title('Subscribers count by frequency')\nax.axhline(0, color=\"k\", clip_on=False)","b0550a1f":"df_question_count_in_email = df_email_matches.groupby(['email_id', 'emails_frequency_level']).count()['matches_question_id']\ndf_question_count_in_email = df_question_count_in_email.swaplevel(1, 0)","d80bce79":"print('Immediate mailing subscription: \\n')\nprint(df_question_count_in_email.xs('email_notification_immediate').value_counts()[:5])","f69666b3":"print('Daily mailing subscription: \\n')\nprint(df_question_count_in_email.xs('email_notification_daily').value_counts()[:5])","b15159a1":"print('Weekly mailing subscription: \\n')\nprint(df_question_count_in_email.xs('email_notification_weekly').value_counts()[:5])","c4b254f4":"fig, ax = plt.subplots(1, 1, figsize=(16, 9))\ndf_matches_count = df_email_matches.groupby('matches_question_id').count()['email_id']\nsns.distplot(df_matches_count.values, kde=False, norm_hist=False, color=purple_colors[-2])\nax.set_title('Distribution of # recepients receiving a question')\nax.set_xlabel('# recepients')\nax.set_ylabel('# questions')","e2c5d6f3":"df_question_sent = df_matches.groupby('matches_question_id', as_index=False).count()\ndf_question_sent = df_question_sent.rename({'matches_email_id' : 'member_in_emails'}, axis=1)","97fda37f":"df_questions['questions_title_length'] = df_questions['questions_title'].apply(len)\ndf_questions['questions_body_length'] = df_questions['questions_body'].apply(len)\n\ndf_questions = df_questions.merge(df_question_sent, left_on='questions_id', \n                                  right_on='matches_question_id', how='left')\ndf_questions = df_questions.drop(['matches_question_id'], axis=1)\n\ndf_questions['questions_date_added'] = pd.to_datetime(df_questions['questions_date_added'])\ndf_answers['answers_date_added'] = pd.to_datetime(df_answers['answers_date_added'])","320a64b9":"df_questions_indexed = df_questions.set_index(keys='questions_date_added')\ndf_answers_indexed = df_answers.set_index(keys='answers_date_added')\n\ndf_answers_indexed = df_answers_indexed.drop_duplicates(subset='answers_question_id', keep='first')\ndf_questions_yearly_distibution = df_questions_indexed['questions_id'].groupby([df_questions_indexed.index.year]).count()\ndf_answers_yearly_distibution = df_answers_indexed['answers_question_id'].groupby([df_answers_indexed.index.year]).count()","914fce3e":"plt.figure(figsize=[16,6])\nplt.plot(df_questions_yearly_distibution.values, color='orange')\nplt.plot(df_answers_yearly_distibution.values, color='blue')\nplt.xticks(range(len(df_questions_yearly_distibution.index.values)), df_questions_yearly_distibution.index.values);\nplt.title(\"Number of questions asked and questions answered over years\");\nplt.xlabel(\"Years\");\nplt.ylabel(\"Number of questions\");\nplt.legend(['Questions asked','Questions answered'], loc=0);","6ac4d4ec":"df_questions_answers = df_questions.merge(df_answers, left_on='questions_id', right_on='answers_question_id', how='inner')\ndf_questions_answers_copy = df_questions_answers[['questions_id', 'questions_date_added', 'answers_date_added', \n                                                  'questions_title_length', 'questions_body_length', 'member_in_emails']]\n\ndf_questions_answers_copy['time_to_answer'] = df_questions_answers_copy['answers_date_added'] - df_questions_answers_copy['questions_date_added']\ndf_questions_answers_copy['time_to_answer_in_days'] = df_questions_answers_copy['time_to_answer'].dt.days\nplt.figure(figsize=[16,6])\nplt.hist(df_questions_answers_copy['time_to_answer_in_days'].values, bins=100, color=purple_colors[-2]);\nplt.xlabel('Days')\nplt.title('Time to answer in days');","20439635":"plt.figure(figsize=[12,8])\nsns.distplot(df_questions_answers_copy['questions_title_length'], kde=False, norm_hist=False, color=purple_colors[-2])\nplt.title('Distribution of title length for questions');","4e1bf7c0":"plt.figure(figsize=[12,8])\nsns.distplot(df_questions_answers_copy[df_questions_answers_copy['questions_body_length']<1000]['questions_body_length'], kde=False, norm_hist=False, bins=50, color=purple_colors[-2])\nplt.title('Distribution of body length for questions');","95bc771a":"df_questions_answers_copy[['questions_title_length', 'questions_body_length', 'time_to_answer_in_days']].corr()","8b9ebec2":"df_questions_answers_copy_1 = df_questions_answers_copy[df_questions_answers_copy['questions_body_length'] < 1000]\n\nplt.figure(figsize=[6,6])\nplt.scatter(df_questions_answers_copy_1['questions_body_length'], df_questions_answers_copy_1['time_to_answer_in_days'], alpha=0.5, color=purple_colors[-3])\nplt.title('Scatter plot of question body length vs time to answer');\nplt.xlabel('Questions body length');\nplt.ylabel('Time to answer in days');","0ac7d6ee":"df_questions_answers_copy[['member_in_emails', 'time_to_answer_in_days']].corr()","d5a045b8":"num_of_answers = len(set(df_answers['answers_id']))\nprint('Total Number Of answers : {}'.format(num_of_answers))\n\nnum_of_questions = len(set(df_answers['answers_question_id']))\nprint('Total Number Of Questions answered : {}'.format(num_of_questions))","d6590fa3":"df_tag_question = df_tag_questions.merge(right=df_tags, how=\"left\", left_on=\"tag_questions_tag_id\", right_on=\"tags_tag_id\")\nmapping = dict(df_tag_question[['tag_questions_question_id', 'tags_tag_name']].values)\ndf_answer = df_answers.copy()\ndf_answer['tag_name'] = df_answers.answers_question_id.map(mapping)","3058e097":"df_answers_tags = df_answer.tag_name.value_counts().sort_values(ascending=True).tail(30).sort_values(ascending=False)\nplt.figure(figsize=[20,8])\nax = sns.barplot(x = df_answers_tags.index.values, y= df_answers_tags.values, color=purple_colors[-2])\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, horizontalalignment='right')\n# df_answers_tags.plot.barh(figsize=(10, 8),  width=1)\nplt.title(\"Top 50 Question tags for the answers\", fontsize=15)\nplt.ylabel('Number of Answers', fontsize=15)\nplt.xlabel('Question tags', fontsize=15)\nplt.show()","02e252ba":" \ndf_answer['answers_length'] = df_answer['answers_body'].apply(lambda x: len(str(x).split()))\n\nplt.figure(figsize=[9,6])\nsns.distplot(df_answer['answers_length'], kde=False, norm_hist=False, color=purple_colors[-2])\nplt.title('Distribution of length for answer bodies');","42154054":"number_answers_for_question = df_answers['answers_question_id'].value_counts(ascending=True).values\n\nplt.figure(figsize=[12,8])\nsns.distplot(number_answers_for_question, kde=False, norm_hist=False, color=purple_colors[-2])\nplt.title('Distribution of number of answers for question');\nplt.xlabel('# answers')","f1eaf6d0":"print('There are {} total comments'.format(df_comments.shape[0]))\nprint('Comments by {} unique authors'.format(np.unique(df_comments['comments_author_id']).shape[0]))","35c11ca3":"df_comments['is_author_prof'] = df_comments['comments_author_id'].isin(list(df_professionals['professionals_id']))\ndf_comments['is_author_student'] = df_comments['comments_author_id'].isin(list(df_students['students_id']))\ndf_comments['is_author_other_user'] = np.logical_not(np.logical_or(df_comments['is_author_prof'], df_comments['is_author_student']))\n\nprint('Number of comments by professionals: {}'.format(sum(df_comments['is_author_prof'])))\nprint('Number of comments by students: {}'.format(sum(df_comments['is_author_student'])))\nprint('Number of comments by other users: {}'.format(sum(df_comments['is_author_other_user'])))","cd4d50e1":"df_comments['is_parent_question'] = df_comments['comments_parent_content_id'].isin(list(df_questions['questions_id']))\ndf_comments['is_parent_answer'] = df_comments['comments_parent_content_id'].isin(list(df_answers['answers_id']))\n\nprint('Number of comments on questions: {}'.format(sum(df_comments['is_parent_question'])))\nprint('Number of comments on answers: {}'.format(sum(df_comments['is_parent_answer'])))","87608f08":"comments_body = df_comments['comments_body']","6f0ab1c7":"def f(txt):\n    return len(str(txt).split(\" \"))\n    \ndf_comments['comments_body_len'] = df_comments['comments_body'].apply(f)\n\nplt.figure(figsize=[12,8])\nsns.distplot(df_comments['comments_body_len'], kde=False, norm_hist=False, color=purple_colors[-2])\nplt.title('Distribution of length for comment bodies');","1c53cdd6":"has_thank_index = ['thank' in str(a).lower() for a in comments_body]\nprint(\"Number of comments with string 'thank': \"+str(sum(has_thank_index)))\nhas_thank_comments = df_comments[has_thank_index]\nhas_thank_comments['comments_body'].head()","ebe4b047":"has_html_index = ['<html>' in str(a).lower() for a in comments_body]\nprint(\"Number of comments with string '<html>': \"+str(sum(has_html_index)))\nhas_html_comments = df_comments[has_html_index]\nhas_html_comments['comments_body'].head()","5935f62d":"short_thank_you_comments_index = np.logical_and(df_comments['comments_body_len']<10, has_thank_index)\nshort_thank_you_comments = df_comments[short_thank_you_comments_index]\nprint(\"Number of short comments with string 'thank' in them: {}\".format(short_thank_you_comments.shape[0]))\nshort_thank_you_comments['comments_body'].tail()","d7329b81":"long_comments_index = np.logical_not(short_thank_you_comments_index)\nlong_comments = df_comments[long_comments_index]\nprint(\"Number of long comments to be analysed further: {}\".format(long_comments.shape[0]))\nlong_comments['comments_body'].head()","5b631667":"num_unique_users = len(np.unique(df_tag_users[['tag_users_user_id']])) \nnum_unique_tags = df_tags.shape[0]\n\nprint('There are {} unique tags'.format(num_unique_tags))\nprint('In all {} tags have been given to {} unique users'.format(df_tag_users.shape[0], num_unique_users))","db9466ae":"df_count_tags_per_user = df_tag_users.groupby('tag_users_user_id').count()","b8d525e7":"data = [go.Histogram(x=df_count_tags_per_user.values[:,0], nbinsx=90, \n                     marker=dict(color='rgb({}, {}, {})'.format(*list(map(int, tuple([z * 255 for z in purple_colors[-2]]))))), \n                     opacity=0.75)]\nlayout = go.Layout(\n    title='Distribution of tags per user',\n    xaxis=dict(\n        title='# tags'\n    ),\n    yaxis=dict(\n        title='# Users'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","0a547f5a":"df_count_tags_per_user.values.shape","30c4d1db":"df_count = df_tag_users.groupby('tag_users_tag_id').count()\ndf_count = df_count.sort_values(by='tag_users_user_id').reset_index()\ndf_count = df_count.rename({'tag_users_user_id':'count'}, axis=1)\ndf_tags_users_merged = df_count.merge(df_tags, right_on='tags_tag_id', left_on='tag_users_tag_id')\ndf_tags_users_merged = df_tags_users_merged.drop(['tags_tag_id', 'tag_users_tag_id'], axis=1)\ndf_tags_users_merged.sort_values(by='count', ascending=False).head(20)\ndf_tags_users_merged_sorted = df_tags_users_merged.sort_values(by='count', ascending=False)\n\ndata = [go.Bar(\n            y=df_tags_users_merged_sorted['count'][:TOP_NUM],\n            x=df_tags_users_merged_sorted['tags_tag_name'][:TOP_NUM], \n            marker=dict(color='rgb({}, {}, {})'.format(*list(map(int, tuple([z * 255 for z in purple_colors[-2]]))))),\n            opacity=0.75\n)]\n\nlayout = dict(\n    width = 800,\n    height = 550,\n    title = '30 most common tags overall',\n    xaxis = dict(\n         tickangle=315,tickfont = dict(size=13,  color='grey'),\n    ),\n    yaxis = go.layout.YAxis(\n        title = '# Users',\n        automargin = True,\n        titlefont = dict(size=17, color='grey')\n    ),\n    margin=dict(b=130)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","18bc9679":"all_tagged_users = set(df_tag_users['tag_users_user_id'])\nstudent_users = set(df_students['students_id']) \nprofessional_users = set(df_professionals['professionals_id'])\n\ntagged_students = all_tagged_users.intersection(student_users)\ntagged_professionals = all_tagged_users.intersection(professional_users)\nprint('Of the {} tagged users, {} are students and {} are professionals'.format(len(all_tagged_users),\n                                                                               len(tagged_students),\n                                                                               len(tagged_professionals)))","0820d686":"df_student_users = df_tag_users.merge(df_students, left_on='tag_users_user_id', right_on='students_id')\ndf_student_users = df_student_users.drop('tag_users_user_id', axis=1)\ndf_student_users.shape\ndf_professional_users = df_tag_users.merge(df_professionals, left_on='tag_users_user_id', right_on='professionals_id')\ndf_professional_users = df_professional_users.drop('tag_users_user_id', axis=1)\ndf_professional_users.shape\nprint('In all {} tags have been given to  {} to students and {} to professionals'.format(df_tag_users.shape[0], \n                                                                 df_student_users.shape[0], \n                                                                 df_professional_users.shape[0]))","c1c83a87":"df_count = df_student_users[['students_id', 'tag_users_tag_id']].groupby('tag_users_tag_id').count()\ndf_count = df_count.sort_values(by='students_id').reset_index()\ndf_count = df_count.rename({'students_id':'count'}, axis=1)\ndf_tags_users_merged = df_count.merge(df_tags, right_on='tags_tag_id', left_on='tag_users_tag_id')\ndf_tags_users_merged = df_tags_users_merged.drop([ 'tags_tag_id', 'tag_users_tag_id'], axis=1)\ndf_tags_users_merged_sorted = df_tags_users_merged.sort_values(by='count', ascending=False)\n\ndata = [go.Bar(\n            y=df_tags_users_merged_sorted['count'][:30],\n            x=df_tags_users_merged_sorted['tags_tag_name'][:30],\n            marker=dict(color='rgb({}, {}, {})'.format(*list(map(int, tuple([z * 255 for z in purple_colors[-2]]))))),\n            opacity=0.75\n            \n)]\n\nlayout = dict(\n    width = 800,\n    height = 550,\n    title = '30 most common tags for students',\n    xaxis = dict(\n         tickangle=315,tickfont = dict(size=13,  color='grey'),\n    ),\n    yaxis = go.layout.YAxis(\n        title = '# Users',\n        automargin = True,\n        titlefont = dict(size=17, color='grey')\n    ),\n    margin=dict(b=100)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","79195c46":"df_count = df_professional_users[['professionals_id', 'tag_users_tag_id']].groupby('tag_users_tag_id').count()\ndf_count = df_count.sort_values(by='professionals_id').reset_index()\ndf_count = df_count.rename({'professionals_id':'count'}, axis=1)\ndf_tags_users_merged = df_count.merge(df_tags, right_on='tags_tag_id', left_on='tag_users_tag_id')\ndf_tags_users_merged = df_tags_users_merged.drop(['tags_tag_id', 'tag_users_tag_id'], axis=1)\ndf_tags_users_merged_sorted = df_tags_users_merged.sort_values(by='count', ascending=False)\n\ndata = [go.Bar(\n            y=df_tags_users_merged_sorted['count'][:30],\n            x=df_tags_users_merged_sorted['tags_tag_name'][:30],\n            marker=dict(color='rgb({}, {}, {})'.format(*list(map(int, tuple([z * 255 for z in purple_colors[-2]]))))),\n            opacity=0.75\n            \n)]\n\nlayout = dict(\n    width = 800,\n    height = 550,\n    title = '30 most common tags for professionals',\n    xaxis = dict(\n         tickangle=315,tickfont = dict(size=13,  color='grey'),\n    ),\n    yaxis = go.layout.YAxis(\n        title = '# Users',\n        automargin = True,\n        titlefont = dict(size=17, color='grey')\n    ),\n    margin=dict(b=130)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","f63176fd":"df_tag_questions.head()\ndf_tags_users_merged = df_tag_questions.merge(df_tags, left_on='tag_questions_tag_id', right_on='tags_tag_id')\ndf_tags_users_merged = df_tags_users_merged.drop(['tag_questions_tag_id'], axis=1)\ndf_tags_users_merged = df_tags_users_merged.groupby(['tags_tag_name']).count()\ndf_tags_users_merged = df_tags_users_merged.drop('tags_tag_id', axis=1).reset_index()\ndf_tags_users_merged_sorted = df_tags_users_merged.sort_values(by='tag_questions_question_id', ascending=False)\ndata = [go.Pie(\n            values=df_tags_users_merged_sorted['tag_questions_question_id'][:30],\n            labels=df_tags_users_merged_sorted['tags_tag_name'][:30],\n            #marker=dict(color='rgb({}, {}, {})'.format(*list(map(int, tuple([z * 255 for z in purple_colors[-2]]))))),\n            #opacity=0.75\n)]\n\nlayout = dict(\n    width = 1000,\n    height = 800,\n    title = 'Most common 30 tags',\n    xaxis = dict(\n        title = '# Users'\n    ),\n    yaxis = go.layout.YAxis(\n        automargin = True,\n        titlefont = dict(size=30),\n        tickfont = dict(size=13),\n\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","dddb359b":"### Data Science for good: CareerVillage.org\n\nCareervillage.org is a nonprofit which crowdsources career advice for underserved youth. Their mission statement speaks for itself:\n> Our mission is to democratize access to the career advice and guidance underserved youth need to create professional goals and understand their personal paths to those goals. We exist first and foremost to level the playing field. <br\/>\n\nTheir main goal is building a platform which crowd sources career advice from their over 15k professional members to give insights into different career options and also relevant career advice to youths who need it most, to inspire and motivate them. <br\/>\n\n\nCheck out their [blog](https:\/\/medium.com\/@careervillage) for more details.\n\n","26deb533":"<h3><a id=\"4\"> ETA in answering <\/a> <\/h3>\n![](https:\/\/images.freeimages.com\/images\/small-previews\/38e\/pocket-watch-3-1419880.jpg)","80ccf432":"<h3><a id=\"6\"> Comments <\/a> <\/h3>\n<img src=\"http:\/\/thirdrock.com.au\/wp-content\/uploads\/2018\/04\/comment1.jpg\" alt=\"Drawing\" style=\"width: 500px;\"\/>\n<!--![](http:\/\/thirdrock.com.au\/wp-content\/uploads\/2018\/04\/comment1.jpg) .element height=\"10%\" width=\"10%\" -->","2b2e9335":"Observations:\n*     19 questions sent to weekly subscribers\n*     3 questions sent to daily subscribers\n*     1 question sent to immediate subscribers","c99b955c":"<h3><a id=\"5\"> Answers <\/a> <\/h3>\n<img src=\"https:\/\/www.coronainsights.com\/wp-content\/uploads\/2014\/12\/Question-Answer.jpg\" alt=\"Drawing\" style=\"width: 500px;\"\/>","1c2e2e3f":"Next, we'll start the analysis by loading the csvs, merging the csvs where applicable and looking into the relevant details in the respective csvs. We also try and find out which of the fields appear relevant to predicting a relevant recepient for a given question during the below analysis. \n\nWe analyse the data in the following order:\n* [Questions](#1)\n* [Professionals](#2)\n* [Emails and matches](#3)\n* [ETA in answer](#4)\n* [Answers](#5)\n* [Comments](#6)\n* [Tags](#7)","109de499":" Most common tags","b9dbcdbc":"Top tags in questions","786685c0":"As can be seen, there is very little correlation between the length of questions body and the time it takes to answer the question in days.","8bfd6d2c":"<h3><a id=\"3\"> E mails and matches <\/a> <\/h3>\n![Emails](https:\/\/maxcdn.icons8.com\/app\/uploads\/2016\/10\/mail.png)","44e52f4b":"## Time Distribution Of Number Of Professionals who joined","3d19b6f6":"## Time Distribution Of Number Of Questions were asked","d0b80c88":"<img src=\"https:\/\/4.bp.blogspot.com\/-OIAJ2gnXHA8\/Vyh32uGTMtI\/AAAAAAAACEQ\/8ihj8MTQ9BcjpJGCzgmQBFa4_bXJzBzEQCLcB\/s1600\/Comments.gif\" alt=\"Drawing\" style=\"width: 500px;\"\/>","53653ad1":"As can be seen from the above plot, questions peak around May of each year (which matches the college joining time) and also that they peaked in 2016 - showing growing popularity of the platform around 2016.","32701ec7":"## Distribution of professionals by industry and  location","8575faad":"<h2>Problem statement: <\/h2>\n\nDevelop a method to recommend relevant questions to the professionals who are most likely to answer them. With solutions being evaluated based on\n\n**Performance**: How well does the solution match professionals to the questions they would be motivated to answer? \n\n**Easy to implement**: The CareerVillage.org team wants to put the winning submissions to work, quickly. \n\n**Extensibility:** In the future, CareerVillage.org aims to add more data features and to accommodate new objectives which should be possible with the suggested solutions. ","7e58077c":"![Career Village](https:\/\/www.careervillage.org\/static\/img\/careervillage-logo.png)","0ec7ff02":"The growing popularity of the platform and the increasing number of professionals joining in are evident from the yearwise distribution of number of professionals joining in.","3264a942":"## Number of Answers for Questions","16b0f444":"<h2>About the dataset <\/h2>\nAlong with google.org, CarrerVillage.org has released years worth of data from their website including emails sent out to professionals, the questions, answers and comments exchanged, the professions, locations and school details of the student and professional members. \n\nData is for years 2012 though 2019 Feb. It has been provided in 13 csvs which are listed below with a short description of the csvs.","983dcd8a":"<h3><a id=\"1\"> Questions dataset <\/a> <\/h3>\n![Questions](https:\/\/knowyourteam.com\/blog\/wp-content\/uploads\/2018\/12\/bf28e-1y32gotcrvncb8ot3jctsea.png)\n \nA total of 23931 questions have been asked over the years (Sep 2011 to Jan 2019). We look at the numbers year by year, month by month and also monthly average. ","af821437":"<h3><a id=\"7\"> Tags <\/a> <\/h3>\n![](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*xgoysqs1OfNCYXlLYZZtuw.jpeg)","bebd8e5b":"More exciting stuff coming soon. Stay tuned! :)","b89b13f6":"### Number of questions per email\nBelow we show the number of questions per email sent to subscribers with different subscription frequencies. \n","8ec8e4ab":"Length of answer body","e7641a97":"Top 20 student based tags","da8a33eb":"<h3><a id=\"2\"> Professionals <\/a> <\/h3>\n![Professionals](http:\/\/m.professionalsinteract.com\/images\/Professionals2.jpg)\n\nA total of 28k professionals are on the platform with their professions and areas of expertise as diverse as showcased in the image :)\nWe look at the distributions of the industries these professionals belong to, locations and joining dates.","b84b49ea":"Top 20 professionals tags"}}