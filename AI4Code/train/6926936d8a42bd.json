{"cell_type":{"0043791d":"code","d08d7db3":"code","9b2311dd":"code","2a9bbc45":"code","10620237":"code","31db5111":"code","867e58cf":"code","316be824":"code","47a6c536":"code","319cae2f":"code","f75dd00b":"code","0a6c23ae":"code","ff8a6014":"code","364f39ef":"code","5c241913":"code","dda3b066":"code","1fd6ddf1":"code","2c1a320a":"code","2e8bae92":"code","aa6f0979":"code","0beb07c1":"code","9ad6b392":"code","7f4377d1":"code","3a2e68f4":"code","15462d78":"markdown","e32d278b":"markdown","404f1668":"markdown","c0a380ce":"markdown","0224a8d3":"markdown","f25d0b99":"markdown","cafdd93b":"markdown","29d99f27":"markdown","4c402a8a":"markdown","583f9c0e":"markdown"},"source":{"0043791d":"# !pip install -q kaggle\n\n# !mkdir ~\/.kaggle\n# !cp kaggle.json ~\/.kaggle\/\n# !chmod 600 ~\/.kaggle\/kaggle.json\n\n# !kaggle datasets download -d nikhilpandey360\/chest-xray-masks-and-labels\n\n# !unzip -q \/content\/chest-xray-masks-and-labels.zip\n# !rm \/content\/chest-xray-masks-and-labels.zip","d08d7db3":"import os\nimport warnings\nimport sys\nimport cv2\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport random\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline\nimport numpy as np\nfrom urllib.parse import urlparse\nimport tensorflow as tf\nimport tensorflow.keras\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.optimizers import *\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ModelCheckpoint, LearningRateScheduler\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.applications.vgg16 import VGG16","9b2311dd":"warnings.filterwarnings(\"ignore\")","2a9bbc45":"## In Colab\n# image_path_train = '\/content\/Lung Segmentation\/CXR_png\/'\n# mask_path_train = '\/content\/Lung Segmentation\/masks\/'\n# image_path_test = '\/content\/Lung Segmentation\/test\/'\n\n## Kaggle\nimage_path_train = '..\/input\/chest-xray-masks-and-labels\/Lung Segmentation\/CXR_png\/'\nmask_path_train = '..\/input\/chest-xray-masks-and-labels\/Lung Segmentation\/masks\/'\nimage_path_test = '..\/input\/chest-xray-masks-and-labels\/Lung Segmentation\/test\/'","10620237":"images = os.listdir(image_path_train)\nmask = os.listdir(mask_path_train)\nmask = [fName.split(\".png\")[0] for fName in mask]\nimage_file_name = [fName.split(\"_mask\")[0] for fName in mask]","31db5111":"check = [i for i in mask if \"mask\" in i]\nprint(\"Total mask that has modified name:\", len(check))","867e58cf":"testing_files = set(os.listdir(image_path_train)) & set(os.listdir(mask_path_train))\ntraining_files = check","316be824":"def getData(X_shape, flag = \"MONT\"):\n    im_array = []\n    mask_array = []\n    shape = (X_shape, X_shape)\n    # X_shape = image_size\n    if flag == \"MONT\":\n        for i in tqdm(testing_files): \n            \n            # im.shape = (X_shape, X_shape, 1)\n            im = cv2.imread(os.path.join(image_path_train, i))\n            im = cv2.resize(im, shape)\n            # im = cv2.equalizeHist(im)\n            # mask.shape = (X_shape, X_shape, 1)\n            mask = cv2.imread(os.path.join(mask_path_train, i))\n            mask = cv2.resize(mask, shape)[:, :, 0]\n            \n            im_array.append(im)\n            mask_array.append(mask)\n    \n    if flag == \"SHEN\":\n        for i in tqdm(training_files): \n            \n            # im.shape = (X_shape, X_shape, 1)\n            im = cv2.imread(os.path.join(image_path_train, i.split(\"_mask\")[0] + \".png\"))\n            im = cv2.resize(im, shape)\n            # im = cv2.equalizeHist(im)\n            # mask.shape = (X_shape, X_shape, 1)\n            mask = cv2.imread(os.path.join(mask_path_train, i + \".png\"))\n            mask = cv2.resize(mask, shape)[:, :, 0]\n            \n            im_array.append(im)\n            mask_array.append(mask)\n    # return list\n    return im_array, mask_array","47a6c536":"def get_test(X_shape, n_samples = 100):\n    im_array = []\n    shape = (X_shape, X_shape)\n    test_files = random.choices(list(os.listdir(image_path_test)), k=n_samples)\n    for i in tqdm(test_files):\n        im = cv2.imread(os.path.join(image_path_test, i))\n        im = cv2.resize(im, shape)\n        # im = cv2.equalizeHist(im)\n        im_array.append(im)\n    return im_array","319cae2f":"dim, n_samples = 256, 50 # n_samples = [1, 96]\n\nimage_shen, mask_shen = getData(dim, flag = \"SHEN\")\nimage_mont, mask_mont = getData(dim, flag = \"MONT\")\nX_test = get_test(dim, n_samples = n_samples)","f75dd00b":"image_shen = np.array(image_shen).reshape(len(image_shen), dim, dim, 3)\nmask_shen = np.array(mask_shen).reshape(len(mask_shen), dim, dim, 1)\n\nimage_mont = np.array(image_mont).reshape(len(image_mont), dim, dim, 3)\nmask_mont = np.array(mask_mont).reshape(len(mask_mont), dim, dim, 1)\n\nX_test = np.array(X_test).reshape(len(X_test), dim, dim, 3)","0a6c23ae":"print(image_shen.shape, mask_shen.shape)\nprint(image_mont.shape, mask_mont.shape)\nprint(X_test.shape)","ff8a6014":"i = 25\nfig, axs = plt.subplots(nrows=3, ncols=2, figsize=(9, 13))\naxs[0, 0].imshow(image_shen[i])\naxs[0, 1].imshow(mask_shen[i].reshape(256, 256), cmap='gray')\naxs[0, 0].set_ylabel('Shenzhen')\n\naxs[1, 0].imshow(image_mont[i])\naxs[1, 1].imshow(mask_mont[i].reshape(256, 256), cmap='gray')\naxs[1, 0].set_ylabel('Montgomery')\n\naxs[2, 0].imshow(X_test[i])\naxs[2, 0].set_ylabel('NIH')\n\naxs[0, 0].set_title('CXR')\naxs[1, 0].set_title('CXR')\naxs[2, 0].set_title('CXR')\n\naxs[0, 1].set_title('mask')\naxs[1, 1].set_title('mask')\n\nfig.delaxes(axs[2, 1])","364f39ef":"images = np.concatenate((image_shen, image_mont), axis=0)\nmasks  = np.concatenate((mask_shen, mask_mont), axis=0)\n\nprint(images.shape, masks.shape)","5c241913":"X_train, X_val, Y_train, Y_val = train_test_split(images \/ 255.0, \n                                                  masks \/ 255., \n                                                  test_size = 0.15, \n                                                  random_state = 2018)\nX_testNorm = X_test \/ 255.0","dda3b066":"!pip install -q segmentation-models==1.0.1","1fd6ddf1":"import segmentation_models as sm\n\nsm.set_framework('tf.keras')\nsm.framework()","2c1a320a":"model = sm.Unet('vgg16', classes=1, \n                activation='sigmoid', \n                encoder_weights='imagenet')","2e8bae92":"model.summary()","aa6f0979":"loss = sm.losses.DiceLoss(class_weights=np.array([0.5, 0.5]))\n\nmetrics = [sm.metrics.IOUScore(threshold=0.5), \n           sm.metrics.FScore(threshold=0.5), 'acc']\n\noptimizer = tf.keras.optimizers.Adam(learning_rate=0.0001)","0beb07c1":"model.compile(optimizer=optimizer, loss=loss, metrics=metrics)","9ad6b392":"res = model.fit(X_train, Y_train, validation_data=(X_val, Y_val), \n                batch_size=32, epochs=50)","7f4377d1":"preds = model.predict(X_testNorm)","3a2e68f4":"fig, axs = plt.subplots(nrows=5, ncols=2, figsize=(10, 20))\n\nfor i in range(5):\n    for j in range(2):\n        if j != 1:\n            axs[i, j].imshow(X_testNorm[i])\n            axs[i, j].set_title('CXR')\n        else:\n            axs[i, j].imshow(preds[i].reshape(256, 256), cmap='gray')\n            axs[i, j].set_title('predicted mask')","15462d78":"# segmentation models","e32d278b":"# Dataset\n","404f1668":"## visualize data","c0a380ce":"## Data Path","0224a8d3":"in Google Colab","f25d0b99":"# libraries","cafdd93b":"# data","29d99f27":"## loading data","4c402a8a":"## split data","583f9c0e":"## Load functions"}}