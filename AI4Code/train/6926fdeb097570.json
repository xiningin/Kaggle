{"cell_type":{"e8574255":"code","ff9554cf":"code","0b3f81a7":"code","165b093f":"code","911e714f":"code","28a6bf25":"code","fc65e71b":"code","e520402a":"code","c5654eac":"code","bb7e1e5f":"code","1595a433":"code","67dbe20a":"code","79c3cd85":"code","93a6877e":"code","b97fa3fe":"code","c561b2f2":"code","dcb71547":"code","a9a31350":"code","3b15768b":"code","7149c232":"code","6ced64a6":"code","0ad72226":"code","b17c62dc":"code","ad8373c3":"code","ccc5af82":"code","4762eb7f":"code","cfe7aa45":"code","7f6ed99d":"code","3c8d7a7f":"code","beba355f":"code","218a5835":"code","34b7ba84":"code","1b26edef":"code","b8c472c9":"code","1bf21623":"code","d0904a43":"markdown","bdf1ba1d":"markdown","ab8ada4c":"markdown","3831aba2":"markdown","5cdb341e":"markdown","f66cb5be":"markdown","d54f7588":"markdown"},"source":{"e8574255":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ff9554cf":"import json\n#reads data into dictionary\ndata = [json.loads(line) for line in open('\/kaggle\/input\/yelp-dataset\/business.json', 'r')]","0b3f81a7":"#Convert dictionary into a pandas df\nimport pandas as pd\ndf=pd.DataFrame.from_dict(data)\ndf.head(2)","165b093f":"##Explore the data in State\ndf['state'].unique()","911e714f":"import numpy as np\n#First, isolate Nevada rows \nNV=df[(df['state']=='NV')]\n#Then eliminate closed businesses from the df\nNV=NV[(NV['is_open']==1)] \n#drop rows with 'None' data\nNV = NV.replace(to_replace='None', value=np.nan).dropna()\nNV.head(2)","28a6bf25":"#clean df\nNV=NV.drop(['business_id', 'is_open'], axis=1)\nNV.head(2)","fc65e71b":"%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap","e520402a":"fig = plt.figure(figsize=(8, 8))\nm = Basemap(projection='lcc', resolution=None,\n            width=8E6, height=8E6, \n            lat_0=45, lon_0=-100,)\nm.etopo(scale=0.5, alpha=0.5)\n\n# Map (long, lat) to (x, y) for plotting\nx, y = m(-117.224121, 39.876019)\nplt.plot(x, y, 'ok', markersize=5)\nplt.text(x, y, ' Nevada', fontsize=12)","c5654eac":"#map of Greater LA with business markers\nimport folium\nm = folium.Map(location=[36.1699, -115.1398], zoom_start=8)\n\nNV.apply(lambda row:folium.CircleMarker(location=[row['latitude'], row['longitude']], \n                                              radius=2, popup=row['name'])\n                                             .add_to(m), axis=1)\n\nm","bb7e1e5f":"#focus on businesses with 3 stars and above\nLV=NV[(NV['stars']>=3) & (NV['city']=='Las Vegas')] \nLV.head(2)","1595a433":"#Just those businesses with 20 or more reviews\nLV=LV[(LV['review_count']>20)]","67dbe20a":"LV","79c3cd85":"#check the number of unique labels in the category column\nLV['categories'].nunique()","93a6877e":"#map the new data frame\n\nn = folium.Map(location=[36.1699, -115.1398], zoom_start=10)\n\nLV.apply(lambda row:folium.CircleMarker(location=[row['latitude'], row['longitude']], \n                                              radius=2, popup=row['name'])\n                                             .add_to(n), axis=1)\nn","b97fa3fe":"#statistical description\nLV.describe()","c561b2f2":"#turn columns to list\nlat=LV['latitude']\nlon=LV['longitude']\n\ndef merge(lat, lon): \n      #merge two lists into touple\n    merged_list = tuple(zip(lat, lon))  \n    return merged_list \n\ncoord=list(merge(lat, lon)) ","dcb71547":"def distance(instance1, instance2):\n    # just in case, if the instances are lists or tuples:\n    instance1 = np.array(instance1) \n    instance2 = np.array(instance2)\n    \n    return np.linalg.norm(instance1 - instance2)\ndist=[]\nfor row in coord: \n    airport= (36.0840, -115.1537)\n    d=(distance(row, airport))\n    dist.append(d)\n    print(d)\n","a9a31350":"LV['Distance from airport']=dist\n","3b15768b":"#need the data to be numerical\nneighbor=LV[['name','stars','categories','review_count','Distance from airport','postal_code', 'latitude', 'longitude']]\nneighbor","7149c232":"neighbor.info()","6ced64a6":"neighbor['postal_code']=neighbor['postal_code'].astype('category')\nneighbor['zip code']=neighbor['postal_code'].cat.codes\n\nneighbor['name']=neighbor['name'].astype('category')\nneighbor['business']=neighbor['name'].cat.codes\n\nneighbor['categories']=neighbor['categories'].astype('category')\nneighbor['business type']=neighbor['categories'].cat.codes\n\nneighbor.head()","0ad72226":"Nums=neighbor.drop(['name','categories', 'postal_code'], axis=1)\nNums.head(3)","b17c62dc":"Nums.describe()","ad8373c3":"#visualize relative to 'stars' rating\nimport seaborn as sns\n\nsns.pairplot(Nums, hue='stars') #colors defined by cats in single column","ccc5af82":"#split the dataset\nfrom sklearn.model_selection import train_test_split\n\nX = Nums.iloc[:,2-9].values.reshape(-1, 1)\ny = Nums.iloc[:, 1].values #target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) # 70% training and 30% test","4762eb7f":"#standardize data with scaler\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","cfe7aa45":"### define number of neighbors and train the model\n\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 3)\nclassifier.fit(X_train, y_train)","7f6ed99d":"#predict\ny_pred = classifier.predict(X_test)","3c8d7a7f":"from sklearn.metrics import classification_report, accuracy_score\n\nresult1 = accuracy_score(y_test,y_pred)\nprint(\"Accuracy:\",result1)  ##accuracy of knn model\n\nresult2 = classification_report(y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result2)\n","beba355f":"##map categories with different color markers","218a5835":"#folium   \nb1 = folium.Map(location = [36.1699, -115.1398], \n                                        zoom_start = 11) #Las Vegas\n  \nfolium.Marker([36.0840, -115.1537], \n              popup = 'Airport').add_to(b1) #The airport\n  \nfolium.Marker([36.1671, -115.1356], \n              popup = 'Downtown Las Vegas').add_to(b1) #downtown\n  \n# Add a line to the map   \nfolium.PolyLine(locations = [(36.0840, -115.1537), (36.1671, -115.1356)], \n                line_opacity = 0.5).add_to(b1) \n  \nb1.save(\"map1.html\") \n\nb1","34b7ba84":"#visualize the top businesses near the airport\nnear=neighbor[(neighbor['Distance from airport']<0.05)&(neighbor['stars']>4.5)]","1b26edef":"near","b8c472c9":"b1\n\nnear.apply(lambda row:folium.CircleMarker(location=[row['latitude'], row['longitude']], \n                                              radius=2, popup=row['name'], zoom_start = 10)\n                                             .add_to(b1), axis=1)\n\nb1","1bf21623":"folium.Marker(\n    location=[36.082059, -115.172787],\n    popup='Las Vegas SIGN',\n    icon=folium.Icon(color='gray') \n).add_to(b1)\nfolium.Marker(\n    location=[36.108725, -115.165826],\n    popup='Nearest Hospital',\n    icon=folium.Icon(color='red') \n).add_to(b1)\nfolium.Marker(\n    location=[36.147247, -115.156031],\n    popup='Stratosphere Hotel',\n    icon=folium.Icon(color='purple') \n).add_to(b1)\nb1","d0904a43":"Above, there are:   \n20716 businesses listed as currently in service in the greater Las Vegas in the state of Nevada (The original dataset ommited businesses beyond Las Vegas).   \nLocation, ratings, review counts, attrbutes specific to the business, 15032 categories of businesses and hours of operations.   \n\n","bdf1ba1d":"Preprocess data, define # of neighbors, and find the closest neighbors   ","ab8ada4c":"#### **KNN** k-nearest-neighbor ####     \n1. Calculate distance: compare coordinates with a starting point.   \nHere, I use the McCarran International Airport coordinates.   ","3831aba2":"Make predictions and test the model","5cdb341e":" **Geospatial data** represent position data of something with respect to something else (https:\/\/www.datacamp.com\/community\/tutorials\/geospatial-data-python).   \n \n    ","f66cb5be":"The data is not evenly distributed among states. Also, state is widely defined:    \nThese include some in the US, some from Canada, and the UK.   \n**NEVADA**   \nThis is the state in the data with the second most amount of entries. ","d54f7588":"The data frame above reflects those businesses listed in the Yelp dataset in 'Las Vegas', with 3+ stars.    \nThat amounts to 14,235 businesses, and 11,209 unique labels in 'categories'.    \nThe 'categories' column could be more efficient if author classified synonyms under same label.\n"}}