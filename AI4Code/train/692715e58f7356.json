{"cell_type":{"7568f2cd":"code","caa25330":"code","2b32a4c5":"code","31702c15":"code","72459520":"markdown","19fe6feb":"markdown","6c1ed559":"markdown","f3ef1fad":"markdown","7003a194":"markdown","47f5840b":"markdown","4bebb2cc":"markdown"},"source":{"7568f2cd":"# Install:\n# Kaggle environments.\n!git clone https:\/\/github.com\/Kaggle\/kaggle-environments.git\n!cd kaggle-environments && pip install .\n\n# GFootball environment.\n!apt-get update -y\n!apt-get install -y libsdl2-gfx-dev libsdl2-ttf-dev\n\n# Make sure that the Branch in git clone and in wget call matches !!\n!git clone -b v2.7 https:\/\/github.com\/google-research\/football.git\n!mkdir -p football\/third_party\/gfootball_engine\/lib\n\n!wget https:\/\/storage.googleapis.com\/gfootball\/prebuilt_gameplayfootball_v2.7.so -O football\/third_party\/gfootball_engine\/lib\/prebuilt_gameplayfootball.so\n!cd football && GFOOTBALL_USE_PREBUILT_SO=1 pip3 install .","caa25330":"%%writefile agent.py\n\n# Importing Important Imports\nfrom kaggle_environments.envs.football.helpers import *\nimport math\n\nclass Vector:\n\n\t'''\n\tVector Object\n\tParameters: Iterable of length 2 or 3\n\t'''\n\n\tdef __init__(self, positions = [0, 0, 0]):\n\t\tif len(positions) < 3: positions.append(0)\n\t\tself.x, self.y, self.z = positions\n\t\tself.vel = None\n\n\tdef dist(self, other):\n\t\t''' Euclidean distance '''\n\t\treturn math.hypot(other.x - self.x, other.y - self.y)\n\t\n\tdef add(self, vel):\n\t\t''' Adds one vector to the other '''\n\t\treturn Vector([self.x + vel.x, self.y + vel.y, self.z + vel.z])\n\n\tdef mult(self, x):\n\t\t''' Scales the vector by x '''\n\t\treturn Vector([self.x * x, self.y * x, self.z * x])\n\n@human_readable_agent\ndef agent(obs):\n\n\t''' Main Agent '''\n\n\t# Loading Variables\n\n\tN = len(obs['left_team'])\n\n\t# Teams\n\tteam = list(map(Vector, obs['left_team']))\n\topponents = list(map(Vector, obs['right_team']))\n\n\t# Indexes of Active Players\n\tballer = obs['ball_owned_player']\n\tactive = obs['active']\n\n\t# Key Players\n\tplayer = team[active]\n\tgoalkeeper = opponents[0]\n\n\t# Ball Variables\n\tballOwned = (obs['ball_owned_team'] == 0 and active == baller)\n\tball = Vector(obs['ball'])\n\tball.vel = Vector(obs['ball_direction'])\n\n\t# Special Helpers\n\tsticky = obs['sticky_actions']\n\tmode = obs['game_mode']\n\n\t# Enemy Goal\n\ttarget = Vector([1, 0])\n\n\t# Directions for movement\n\tdirections = [\n\t\t[Action.TopLeft, Action.Top, Action.TopRight],\n\t\t[Action.Left, Action.Idle, Action.Right],\n\t\t[Action.BottomLeft, Action.Bottom, Action.BottomRight]\n\t]\n\n\tdef stickyCheck(action, direction):\n\t\t''' Checking for direction and actions '''\n\t\tif direction not in sticky:\n\t\t\treturn direction\n\t\treturn action\n\t\n\tdef dirsign(value):\n\t\t''' Getting index for directions '''\n\t\tif abs(value) < 0.01: return 1\n\t\telif value < 0: return 0\n\t\treturn 2\n\n\tdef getDirection(target, position = player):\n\t\t''' Getting direction to move from position to target '''\n\t\txdir = dirsign(target.x - position.x)\n\t\tydir = dirsign(target.y - position.y)\n\t\treturn directions[ydir][xdir]\n\n\t# Always Sprint\n\tif Action.Sprint not in sticky:\n\t\treturn Action.Sprint\n\n\t# Offense Patterns\n\tif ballOwned:\n\n\t\t# Special Situations\n\t\tif mode in [GameMode.Penalty, GameMode.Corner, GameMode.FreeKick]:\n\t\t\tif player.x > 0: return Action.Shot\n\t\t\treturn Action.LongPass\n\n\t\t# Goalkeeper Check\n\t\tif baller == 0: \n\t\t\treturn Action.LongPass\n\t\t\n\t\t# Bad Angle Pass\n\t\tif abs(player.y) > 0.2 and player.x > 0.7: \n\t\t\treturn Action.HighPass\n\t\t\t\n\t\t# Close to Goalkeeper Shot\n\t\tif player.dist(goalkeeper) < 0.4:\n\t\t\treturn Action.Shot\n\n\t\t# Goalkeeper is Out\n\t\tif goalkeeper.dist(target) > 0.2:\n\t\t\tif player.x > 0:\n\t\t\t\treturn Action.Shot\n\n\t\t#####################\n\t\t## Your Ideas Here ##\n\t\t#####################\n\n\t\t# Run to Goal\n\t\treturn getDirection(target)\n\n\t# Defensive Patterns\n\telse:\n\n\t\t# Find the Ball's Next Positions\n\t\tnextBall = ball.add(ball.vel.mult(3))\n\n\t\t# Running to the next Ball Position\n\t\tif ball.dist(player) > 0.005:\n\t\t\treturn getDirection(nextBall)\n\t\t\n\t\t# Sliding\n\t\telif ball.dist(player) <= 0.005:\n\t\t\treturn Action.Slide\n\t\t\n\t\t# Running Directly at the Ball\n\t\treturn getDirection(ball)","2b32a4c5":"%%writefile visualizer.py\nfrom matplotlib import animation, patches, rcParams\nfrom matplotlib import pyplot as plt\nfrom kaggle_environments.envs.football.helpers import *\n\nWIDTH = 110\nHEIGHT = 46.2\nPADDING = 10\n\n\ndef initFigure(figwidth=12):\n    figheight = figwidth * (HEIGHT + 2 * PADDING) \/ (WIDTH + 2 * PADDING)\n\n    fig = plt.figure(figsize=(figwidth, figheight))\n    ax = plt.axes(xlim=(-PADDING, WIDTH + PADDING), ylim=(-PADDING, HEIGHT + PADDING))\n    plt.axis(\"off\")\n    return fig, ax\n\n\ndef drawPitch(ax):\n    paint = \"white\"\n\n    # Grass around pitch\n    rect = patches.Rectangle((-PADDING \/ 2, -PADDING \/ 2), WIDTH + PADDING, HEIGHT + PADDING,\n                             lw=1, ec=\"black\", fc=\"#3f995b\", capstyle=\"round\")\n    ax.add_patch(rect)\n\n    # Pitch boundaries\n    rect = plt.Rectangle((0, 0), WIDTH, HEIGHT, ec=paint, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n\n    # Middle line\n    plt.plot([WIDTH \/ 2, WIDTH \/ 2], [0, HEIGHT], color=paint, lw=2)\n\n    # Dots\n    dots_x = [11, WIDTH \/ 2, WIDTH - 11]\n    for x in dots_x:\n        plt.plot(x, HEIGHT \/ 2, \"o\", color=paint, lw=2)\n\n    # Penalty box\n    penalty_box_dim = [16.5, 40.3]\n    penalty_box_pos_y = (HEIGHT - penalty_box_dim[1]) \/ 2\n\n    rect = plt.Rectangle((0, penalty_box_pos_y),\n                         penalty_box_dim[0], penalty_box_dim[1], ec=paint, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n    rect = plt.Rectangle((WIDTH, penalty_box_pos_y), -\n                         penalty_box_dim[0], penalty_box_dim[1], ec=paint, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n\n    # Goal box\n    goal_box_dim = [5.5, penalty_box_dim[1] - 11 * 2]\n    goal_box_pos_y = (penalty_box_pos_y + 11)\n\n    rect = plt.Rectangle((0, goal_box_pos_y),\n                         goal_box_dim[0], goal_box_dim[1], ec=paint, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n    rect = plt.Rectangle((WIDTH, goal_box_pos_y),\n                         -goal_box_dim[0], goal_box_dim[1], ec=paint, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n\n    # Goals\n    goal_width = 0.044 \/ 0.42 * HEIGHT\n    goal_pos_y = (HEIGHT \/ 2 - goal_width \/ 2)\n    rect = plt.Rectangle((0, goal_pos_y), -2, goal_width,\n                         ec=paint, fc=paint, lw=2, alpha=0.3)\n    ax.add_patch(rect)\n    rect = plt.Rectangle((WIDTH, goal_pos_y), 2, goal_width,\n                         ec=paint, fc=paint, lw=2, alpha=0.3)\n    ax.add_patch(rect)\n\n    # Middle circle\n    mid_circle = plt.Circle([WIDTH \/ 2, HEIGHT \/ 2], 9.15, color=paint, fc=\"None\", lw=2)\n    ax.add_artist(mid_circle)\n\n    # Penalty box arcs\n    left = patches.Arc([11, HEIGHT \/ 2], 2 * 9.15, 2 * 9.15,\n                       color=paint, fc=\"None\", lw=2, angle=0, theta1=308, theta2=52)\n    ax.add_patch(left)\n    right = patches.Arc([WIDTH - 11, HEIGHT \/ 2], 2 * 9.15, 2 * 9.15,\n                        color=paint, fc=\"None\", lw=2, angle=180, theta1=308, theta2=52)\n    ax.add_patch(right)\n\n    # Arcs on corners\n    corners = [[0, 0], [WIDTH, 0], [WIDTH, HEIGHT], [0, HEIGHT]]\n    angle = 0\n    for x, y in corners:\n        c = patches.Arc([x, y], 2, 2,\n                        color=paint, fc=\"None\", lw=2, angle=angle, theta1=0, theta2=90)\n        ax.add_patch(c)\n        angle += 90\n\n\ndef scale_x(x):\n    return (x + 1) * (WIDTH \/ 2)\n\n\ndef scale_y(y):\n    return (y + 0.42) * (HEIGHT \/ 0.42 \/ 2)\n\n\ndef extract_data(raw_obs):\n    obs = raw_obs[0][\"observation\"][\"players_raw\"][0]\n    res = dict()\n    res[\"left_team\"] = [(scale_x(x), scale_y(y)) for x, y in obs[\"left_team\"]]\n    res[\"right_team\"] = [(scale_x(x), scale_y(y)) for x, y in obs[\"right_team\"]]\n\n    ball_x, ball_y, ball_z = obs[\"ball\"]\n    res[\"ball\"] = [scale_x(ball_x), scale_y(ball_y), ball_z]\n    res[\"score\"] = obs[\"score\"]\n    res[\"steps_left\"] = obs[\"steps_left\"]\n    res[\"ball_owned_team\"] = obs[\"ball_owned_team\"]\n\n    left_active = raw_obs[0][\"observation\"][\"players_raw\"][0][\"active\"]\n    res[\"left_player\"] = res[\"left_team\"][left_active]\n\n    right_active = raw_obs[1][\"observation\"][\"players_raw\"][0][\"active\"]\n    res[\"right_player\"] = res[\"right_team\"][right_active]\n\n    res[\"right_team_roles\"] = obs[\"right_team_roles\"]\n    res[\"left_team_roles\"] = obs[\"left_team_roles\"]\n    res[\"left_team_direction\"] = obs[\"left_team_direction\"]\n    res[\"right_team_direction\"] = obs[\"right_team_direction\"]\n    res[\"game_mode\"] = GameMode(obs[\"game_mode\"]).name\n    return res\n\n\ndef draw_team(obs, team, side):\n    x_coords, y_coords = zip(*obs[side])\n    team.set_data(x_coords, y_coords)\n\n\ndef draw_ball(obs, ball):\n    ball.set_markersize(8 + obs[\"ball\"][2])  # Scale size of ball based on height\n    ball.set_data(obs[\"ball\"][:2])\n\n\ndef draw_active_players(obs, left_player, right_player):\n    x1, y1 = obs[\"left_player\"]\n    left_player.set_data(x1, y1)\n\n    x2, y2 = obs[\"right_player\"]\n    right_player.set_data(x2, y2)\n\n    if obs[\"ball_owned_team\"] == 0:\n        left_player.set_markerfacecolor(\"yellow\")\n        left_player.set_markersize(20)\n        right_player.set_markerfacecolor(\"blue\")\n        right_player.set_markersize(18)\n    elif obs[\"ball_owned_team\"] == 1:\n        left_player.set_markerfacecolor(\"firebrick\")\n        left_player.set_markersize(18)\n        right_player.set_markerfacecolor(\"yellow\")\n        right_player.set_markersize(20)\n    else:\n        left_player.set_markerfacecolor(\"firebrick\")\n        left_player.set_markersize(18)\n        right_player.set_markerfacecolor(\"blue\")\n        right_player.set_markersize(18)\n\n\ndef draw_team_active(obs, team_left_active, team_right_active):\n    team_left_active.set_data(WIDTH \/ 2 - 7, -7)\n    team_right_active.set_data(WIDTH \/ 2 + 7, -7)\n\n    if obs[\"ball_owned_team\"] == 0:\n        team_left_active.set_markerfacecolor(\"indianred\")\n    else:\n        team_left_active.set_markerfacecolor(\"mistyrose\")\n\n    if obs[\"ball_owned_team\"] == 1:\n        team_right_active.set_markerfacecolor(\"royalblue\")\n    else:\n        team_right_active.set_markerfacecolor(\"lightcyan\")\n\n\ndef draw_players_directions(obs, directions, side):\n    index = 0\n    if \"right\" in side:\n        index = 11\n    for i, player_dir in enumerate(obs[f\"{side}_direction\"]):\n        x_dir, y_dir = player_dir\n        dist = (x_dir ** 2 + y_dir ** 2)**0.5 + 0.00001  # to prevent division by 0\n        x = obs[side][i][0]\n        y = obs[side][i][1]\n        directions[i + index].set_data([x, x + x_dir \/ dist], [y, y + y_dir \/ dist])\n\n\ndef player_actions(step, side):\n    if side == 0:\n        actions = {0: \"idle\", 1: \"\u2190\", 2: \"\u2196\", 3: \"\u2191\", 4: \"\u2197\", 5: \"\u2192\", 6: \"\u2198\", 7: \"\u2193\", 8: \"\u2199\",\n                   9: \"l_pass\", 10: \"h_pass\", 11: \"s_pass\", 12: \"shot\",\n                   13: \"sprint\", 14: \"rel_dir\", 15: \"rel_spr\",\n                   16: \"slide\", 17: \"dribble\", 18: \"stp_drb\"}\n    else:\n        actions = {0: \"idle\", 1: \"\u2192\", 2: \"\u2198\", 3: \"\u2193\", 4: \"\u2199\", 5: \"\u2190\", 6: \"\u2196\", 7: \"\u2191\", 8: \"\u2197\",\n                   9: \"l_pass\", 10: \"h_pass\", 11: \"s_pass\", 12: \"shot\",\n                   13: \"sprint\", 14: \"rel_dir\", 15: \"rel_spr\",\n                   16: \"slide\", 17: \"dribble\", 18: \"stp_drb\"}\n\n    obs = step[side][\"observation\"][\"players_raw\"][0]\n\n    if obs[\"sticky_actions\"][8]:\n        spr = \"+spr\"\n    else:\n        spr = \"-spr\"\n\n    if obs[\"sticky_actions\"][9]:\n        drb = \"+drb\"\n    else:\n        drb = \"-drb\"\n\n    if 1 in obs[\"sticky_actions\"][0:8]:\n        i = obs[\"sticky_actions\"][0:8].index(1) + 1\n        drn = actions[i]\n    else:\n        drn = \"|\"\n\n    if step[side][\"action\"]:\n        act = actions[step[side][\"action\"][0]]\n    else:\n        act = \"idle\"\n\n    return f\"{spr} {drb} {drn} [{act}]\".ljust(24, \" \")\n\n\nsteps = None\ndrawings = None\ndirections = None\nball = left_player = right_player = None\nteam_left = team_right = None\nteam_left_active = team_right_active = None\nteam_left_actions = team_right_actions = None\nteam_left_number = team_right_number = None\nteam_left_direction = team_right_direction = None\ntext_frame = game_mode = match_info = None\n\n\ndef init():\n    ball.set_data([], [])\n    left_player.set_data([], [])\n    right_player.set_data([], [])\n    team_left.set_data([], [])\n    team_right.set_data([], [])\n    team_left_active.set_data([], [])\n    team_right_active.set_data([], [])\n    return drawings\n\n\ndef animate(i):\n    obs = extract_data(steps[i])\n\n    # Draw info about ball possesion\n    draw_active_players(obs, left_player, right_player)\n    draw_team_active(obs, team_left_active, team_right_active)\n\n    # Draw players\n    draw_team(obs, team_left, \"left_team\")\n    draw_team(obs, team_right, \"right_team\")\n\n    draw_players_directions(obs, directions, \"left_team\")\n    draw_players_directions(obs, directions, \"right_team\")\n\n    draw_ball(obs, ball)\n\n    # Draw textual informations\n    text_frame.set_text(f\"Step {i}\/{obs['steps_left'] + i - 1}\")\n    game_mode.set_text(f\"{obs['game_mode']} Mode\")\n\n    score_a, score_b = obs[\"score\"]\n    match_info.set_text(f\"{score_a} : {score_b}\")\n\n    team_left_actions.set_text(player_actions(steps[i], 0))\n    team_right_actions.set_text(player_actions(steps[i], 1))\n\n    team_left_number.set_text(str(steps[i][0][\"observation\"][\"players_raw\"][0][\"active\"]))\n    team_right_number.set_text(str(steps[i][1][\"observation\"][\"players_raw\"][0][\"active\"]))\n\n    return drawings\n\n\ndef visualize(trace):\n    global steps\n    global drawings\n    global directions\n    global ball, left_player, right_player\n    global team_left, team_right\n    global team_left_active, team_right_active\n    global text_frame, game_mode, match_info\n    global team_left_actions, team_right_actions\n    global team_left_number, team_right_number\n    global team_left_direction, team_right_direction\n\n    rcParams['font.family'] = 'monospace'\n    rcParams['font.size'] = 12\n\n    steps = trace\n\n    fig, ax = initFigure()\n    drawPitch(ax)\n    ax.invert_yaxis()\n\n    left_player, = ax.plot([], [], \"o\", ms=18, mfc=\"firebrick\", mew=0, alpha=0.5)\n    right_player, = ax.plot([], [], \"o\", ms=18, mfc=\"blue\", mew=0, alpha=0.5)\n    team_left, = ax.plot([], [], \"o\", ms=12, mfc=\"firebrick\", mew=1, mec=\"white\")\n    team_right, = ax.plot([], [], \"o\", ms=12, mfc=\"blue\", mew=1, mec=\"white\")\n    ball, = ax.plot([], [], \"o\", ms=8, mfc=\"wheat\", mew=1, mec=\"black\")\n\n    team_left_active, = ax.plot([], [], \"o\", ms=16, mfc=\"mistyrose\", mec=\"None\")\n    team_right_active, = ax.plot([], [], \"o\", ms=16, mfc=\"lightcyan\", mec=\"None\")\n\n    textheight = -6\n    text_frame = ax.text(-5, textheight, \"\", ha=\"left\")\n    match_info = ax.text(WIDTH \/ 2, textheight, \"\", ha=\"center\", fontweight=\"bold\")\n    game_mode = ax.text(WIDTH + 5, textheight, \"\", ha=\"right\")\n\n    team_left_actions = ax.text(WIDTH \/ 4 + 2, textheight, \"\", ha=\"center\")\n    team_right_actions = ax.text(3 * WIDTH \/ 4 + 2, textheight, \"\", ha=\"center\")\n\n    team_left_number = ax.text(WIDTH \/ 2 - 7, -6.3, \"\", ha=\"center\", fontsize=10)\n    team_right_number = ax.text(WIDTH \/ 2 + 7, -6.3, \"\", ha=\"center\", fontsize=10)\n\n    # Drawing of directions definitely can be done in a better way\n    directions = []\n    for _ in range(22):\n        direction, = ax.plot([], [], color=\"yellow\", lw=1.5)\n        directions.append(direction)\n\n    drawings = [team_left_active, team_right_active, left_player, right_player,\n                team_left, team_right, ball, text_frame, match_info,\n                game_mode, team_left_actions, team_right_actions, team_left_number, team_right_number]\n\n    fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=None, hspace=None)\n    anim = animation.FuncAnimation(fig, animate, init_func=init, blit=True,\n                                   interval=100, frames=len(steps), repeat=True)\n    return anim","31702c15":"from kaggle_environments import make\nfrom kaggle_environments import agent\n\nfrom visualizer import visualize\nfrom IPython.display import HTML\n\nenv = make(\"football\", configuration={\"save_video\": True, \"scenario_name\": \"11_vs_11_kaggle\", \"running_in_notebook\": True}, debug = True)\noutput = env.run(['agent.py', 'do_nothing'])\nscores = output[-1][0][\"observation\"][\"players_raw\"][0][\"score\"]\n\nprint(\"Scores  {0} : {1}\".format(*scores))\n\nviz = visualize(output)\nHTML(viz.to_html5_video())","72459520":"# Install Environments","19fe6feb":"# Conclusion\nI'd love to hear your guys' thoughts about this idea. Feel free to ask questions and share your score! Feedback and ideas are always welcome, and thank you Kaggle for this amazing opportunity!","6c1ed559":"# Overview\n\nThe agent in this notebook was designed with human readability in mind. All list positions are converted to a custom Vector object for ease of use, so instead of writing `obs['left_team'][obs['active']][0]`, you can simply write: `player.x` to get the controlled player's X position. The main components from the observation are loaded and converted into variables so there isn't much redundant calling of the `obs` value.\n\n# References\n\nThese are amazing notebooks which were the core of this agent model. Make sure to check them out.\n* https:\/\/www.kaggle.com\/sx2154\/gfootball-rules-from-environment-exploration\n* https:\/\/www.kaggle.com\/eugenkeil\/simple-baseline-bot\n* https:\/\/www.kaggle.com\/jaronmichal\/human-readable-visualization\n* https:\/\/www.kaggle.com\/david1013\/tunable-baseline-bot\n* https:\/\/www.kaggle.com\/yegorbiryukov\/gfootball-with-memory-patterns","f3ef1fad":"# Visualizer Code\nThe code here is from [this beautiful notebook](https:\/\/www.kaggle.com\/jaronmichal\/human-readable-visualization) to show the game. (Collapsed)","7003a194":"# Agent\n\nA fairly basic agent model for a core setup of a stronger agent. There is nothing too special in the agent given, but it sets up a base for simple implementation of newer techniques. I found with my experience in the [ConnectX](http:\/\/kaggle.com\/c\/connectx) competition is that it is good to build a strong setup and then fine tune details and features later. This should help with speeding up development in the competition.","47f5840b":"# Running the Agent","4bebb2cc":"# Vector Object\n\nThe Vector object used to hold the x, y and z positions of the lists is very useful for readability (Positions with only and X and a Y will be assigned an default Z value of 0 for consistancy). It automatically loads them into the values and has built-in helper functions for useful features.\n\n# Features\n* `Vector.x, Vector.y, Vector.z` for values\n* `Vector.dist(other: Vector) -> float` -- Find the euclidean distance between two vectors\n* `Vector.add(vel: float) -> Vector` -- Adding one vector to another vector\n* `Vector.mult(x: float) -> Vector` -- Multplies all values in the object by a scale\n* More can be added easily for use later"}}