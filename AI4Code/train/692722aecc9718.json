{"cell_type":{"c69b3f58":"code","eff06568":"code","9966c2de":"code","0183daf9":"code","e3c33a49":"code","ed8f1679":"code","4cfe2a41":"code","d4c34803":"code","b849cdef":"code","7e6bacfc":"code","4970c57e":"code","fa3edac5":"code","d60dba77":"code","0d2de504":"code","54e8ab4a":"code","a4e3c487":"code","c9e59a89":"code","bbfe4c55":"code","e0c9f470":"code","11f195b6":"code","61ad49f3":"code","366d6b05":"code","4bf2859a":"code","d577674b":"code","e9232fd6":"code","4c3ce24d":"code","49c050c4":"code","ccea5f7f":"code","0a73dedc":"code","c4d44bd5":"code","54d9e6ec":"code","1e04671d":"code","271a82ad":"code","bbb05c1f":"code","49c86911":"code","c23fef44":"code","1333828a":"code","04cb5871":"code","e8178194":"code","cabb8e2a":"code","1899fd3c":"code","adb2c475":"code","1a72aa15":"code","86a4de5a":"code","8bf24b6e":"code","1aac6b02":"code","a948e120":"code","c402e9a0":"code","db5a0685":"code","06300a7f":"code","e178b9a7":"code","e3a5927c":"code","51676f8e":"code","ab73dac4":"code","31ae2f00":"code","d6523b03":"code","aa0d41a2":"code","83cc5bb1":"code","f102260d":"code","60d5f091":"code","a1447963":"code","98957d4a":"code","80ab7f0d":"code","cc03c2a0":"code","d2a136f7":"code","d8c7fdf4":"code","7e39ce79":"code","8eb987de":"code","b1f9449d":"code","ffcf3751":"code","bd5a54b4":"code","11adf0a0":"code","1d2fbeb6":"code","123287f1":"code","b2420a99":"code","931d64a6":"code","115f72df":"code","c706267c":"code","f3a88b93":"code","17d01d10":"code","37a67cad":"code","3e8d2a8c":"code","e31e4b55":"code","5dee800f":"code","7a87a6aa":"code","d412968b":"code","1480e722":"code","f4956cd7":"code","4257c01f":"code","e0e7d6fa":"code","fe2e74bb":"code","d7328329":"code","24948d4b":"code","d1b73516":"code","5aa29d42":"code","09edbfcb":"code","d02c8e02":"code","5f0cd9c3":"code","375c4c2d":"code","2ca1b00d":"code","15bb92f6":"code","d59dd466":"markdown","354d7aa6":"markdown","742fcdb3":"markdown","686aca43":"markdown","8171d2dc":"markdown","b8be6233":"markdown","45c8ceed":"markdown","9caabf57":"markdown","1f30e593":"markdown","89502eb0":"markdown","c8fecc2a":"markdown","1b37c778":"markdown","f1e23fc4":"markdown","ab4c0943":"markdown","7a9f9358":"markdown","670649de":"markdown"},"source":{"c69b3f58":"import numpy as np\nimport pandas as pd\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom re import sub\nfrom decimal import Decimal\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom scipy import stats","eff06568":"listings = pd.read_csv('..\/input\/seattle\/listings.csv')\nld = listings.loc[:,['id','host_is_superhost','neighbourhood_group_cleansed', 'property_type', 'room_type', 'latitude', 'longitude', 'guests_included', 'bathrooms', 'bedrooms', 'beds', 'bed_type', 'amenities', 'price', 'cleaning_fee', 'instant_bookable', 'cancellation_policy']] ","9966c2de":"display(listings.head())","0183daf9":"ld.count()","e3c33a49":"ld = ld.dropna(subset=['host_is_superhost','neighbourhood_group_cleansed', 'property_type', 'room_type', 'latitude', 'longitude', 'guests_included', 'bathrooms', 'bedrooms', 'beds', 'bed_type', 'amenities', 'price', 'instant_bookable', 'cancellation_policy']) \nld.count()","ed8f1679":"ld['cleaning_fee'] = ld['cleaning_fee'].fillna(0)","4cfe2a41":"ld['cleaning_fee'].head()","d4c34803":"ld.head()","b849cdef":"ld[ld['bedrooms'] > 6]","7e6bacfc":"ld.loc[ld.loc[:, 'host_is_superhost'] == 't', 'host_is_superhost'] = 1\nld.loc[ld.loc[:, 'host_is_superhost'] == 'f', 'host_is_superhost'] = 0","4970c57e":"ld.head()","fa3edac5":"# all the possible values\nset(ld['neighbourhood_group_cleansed'])","d60dba77":"neighbourhood = pd.get_dummies(ld['neighbourhood_group_cleansed'].str.lower().str.replace(' ', '_'))","0d2de504":"neighbourhood.head()","54e8ab4a":"ld_1 = pd.merge(ld, neighbourhood, left_index=True, right_index=True)\nld_1 = ld_1.drop('neighbourhood_group_cleansed', 1)","a4e3c487":"ld_1.head()","c9e59a89":"property_type = pd.get_dummies(ld_1['property_type'])","bbfe4c55":"property_type.head()","e0c9f470":"ld_2 = pd.merge(ld_1, property_type, left_index=True, right_index=True)\nld_2 = ld_2.drop('property_type', 1)","11f195b6":"ld_2.head()","61ad49f3":"room_type = pd.get_dummies(ld_2['room_type'])","366d6b05":"room_type.head()","4bf2859a":"ld_3= pd.merge(ld_2, room_type, left_index=True, right_index=True)\nld_3 = ld_3.drop('room_type', 1)","d577674b":"bed_type = pd.get_dummies(ld_3['bed_type'])","e9232fd6":"bed_type.head()","4c3ce24d":"ld_4= pd.merge(ld_3, bed_type, left_index=True, right_index=True)\nld_4 = ld_4.drop('bed_type', 1)","49c050c4":"ld_4.loc[ld_4.loc[:, 'instant_bookable'] == 't', 'instant_bookable'] = 1\nld_4.loc[ld_4.loc[:, 'instant_bookable'] == 'f', 'instant_bookable'] = 0","ccea5f7f":"ld_4.head()","0a73dedc":"cancellation = pd.get_dummies(ld_4['cancellation_policy'])","c4d44bd5":"cancellation.head()","54d9e6ec":"ld_5= pd.merge(ld_4, cancellation, left_index=True, right_index=True)\n   ","1e04671d":"ld_5['guests_included'].max()","271a82ad":"def normalizing(column):\n    new_column = (column - column.min()) \/ (column.max() - column.min())\n    return new_column","bbb05c1f":"ld_5['guests_included'] = normalizing(ld_5['guests_included'])","49c86911":"ld_5.head()","c23fef44":"ld_5['bathrooms'] = normalizing(ld_5['bathrooms'])","1333828a":"ld_5['bedrooms'] = normalizing(ld_5['bedrooms'])","04cb5871":"ld_5['beds'] = normalizing(ld_5['beds'])","e8178194":"ld_5.head()","cabb8e2a":"## seattle airport: 47.4502\u00b0 N, 122.3088\u00b0 W\nairport_lat = 47.4502\nairport_lon = -122.3088\n\n## downtown: 47.6050\u00b0 N, 122.3344\u00b0 W\ndt_lat = 47.6050\ndt_lon = -122.3344\n\n## pike place: 47.6101\u00b0 N, 122.3421\u00b0 W\npp_lat = 47.6101\npp_lon = -122.3421\n\n## seattle amazon headquarter: 47.6062\u00b0 N, 122.3321\u00b0 W\namazon_lat = 47.6062\namazon_lon = -122.3321\n\n## longitude and latitude in datasets\nlat_data = ld_5['latitude']\nlon_data = ld_5['longitude']","1899fd3c":"lat_data[1]","adb2c475":"lon_data[1]","1a72aa15":"airport_lat","86a4de5a":"AVG_EARTH_RADIUS = 6371","8bf24b6e":"def haversine_array(lat1, lng1, ld_5):\n    lat1, lng1, lat2, lng2 = map(np.radians, (lat1, lng1, ld_5['latitude'], ld_5['longitude']))\n    lat = lat2 - lat1\n    lng = lng2 - lng1\n    d = np.sin(lat * 0.5) ** 2 + np.cos(lat1) * np.cos(lat2) * np.sin(lng * 0.5) ** 2\n    h = 2 * AVG_EARTH_RADIUS * np.arctan2(np.sqrt(d), np.sqrt(1-d))\n    return h","1aac6b02":"ld_5['d_airport'] = haversine_array(airport_lat, airport_lon, ld_5)\nld_5['d_downtown'] = haversine_array(dt_lat, dt_lon, ld_5)\nld_5['d_pikeplace'] = haversine_array(pp_lat, pp_lon, ld_5)\nld_5['d_amazon'] = haversine_array(amazon_lat, amazon_lon, ld_5)\n","a948e120":"ld_5.head()","c402e9a0":"ld_5['d_airport'] = normalizing(ld_5['d_airport'])\nld_5['d_downtown'] = normalizing(ld_5['d_downtown'])\nld_5['d_pikeplace'] = normalizing(ld_5['d_pikeplace'])\nld_5['d_amazon'] = normalizing(ld_5['d_amazon'])\n","db5a0685":"ld_5.head()","06300a7f":"ld_6 = ld_5.drop('latitude', 1)\nld_6.head()","e178b9a7":"ld_7 = ld_6.drop('longitude', 1)","e3a5927c":"ld_7.head()","51676f8e":"ld_7['price'] = ld_7['price'].replace('[\\$,]','',regex=True).astype(float)\nld_7['cleaning_fee'] = ld_7['cleaning_fee'].replace('[\\$,]','',regex=True).astype(float)\nld_7['price'] = normalizing(ld_7['price'])\nld_7['cleaning_fee'] = normalizing(ld_7['cleaning_fee'] )","ab73dac4":"ld_7.head()","31ae2f00":"ld_8 = ld_7.copy()\nld_8.head()","d6523b03":"ld_8[\"amenities\"] = ld_8[\"amenities\"].str.lower().str.replace('{','').str.replace('}','').str.replace('\"','').str.replace(' ','_').str.split(',')\nld_8.head()\n\n","aa0d41a2":"mlb = MultiLabelBinarizer()\nfinal_df = ld_8.join(pd.DataFrame(mlb.fit_transform(ld_8.pop('amenities')),\n                          columns=mlb.classes_,\n                          index=ld_8.index))\nfinal_df.head()","83cc5bb1":"df = final_df.loc[:,['id','guests_included', 'bathrooms', 'bedrooms', 'beds', 'price']] ","f102260d":"z = np.abs(stats.zscore(final_df.loc[:,['guests_included', 'bathrooms', 'bedrooms', 'beds', 'price']] ))\nprint(z)","60d5f091":"df.count()","a1447963":"exclude_outlier = df[(z < 3).all(axis=1)]","98957d4a":"exclude_outlier.head()","80ab7f0d":"exclude_outlier1 = exclude_outlier.drop(['guests_included','bathrooms', 'bedrooms', 'beds', 'price'], 1)","cc03c2a0":"exclude_outlier.count()","d2a136f7":"exclude_outlier1.head()","d8c7fdf4":"final = pd.merge(final_df, exclude_outlier1, how='right', on='id')","7e39ce79":"final.head()","8eb987de":"final.count()","b1f9449d":"reviews = pd.read_csv('..\/input\/seattle\/reviews.csv')","ffcf3751":"reviews.head()","bd5a54b4":"rv = reviews.loc[:, ['listing_id', 'id','comments']]","11adf0a0":"rv.head(20)","1d2fbeb6":"listings_and_reviews = pd.merge(rv, final, left_on = \"listing_id\", right_on = \"id\")","123287f1":"len(set(listings_and_reviews['listing_id']))","b2420a99":"listings_and_reviews.head()","931d64a6":"listings_and_reviews.iloc[:,1].count()\ncombined = listings_and_reviews.dropna()\ncombined.iloc[:,1].count()","115f72df":"combined.groupby('listing_id').count().head()","c706267c":"size = 10 # sample size \nreplace = True # with replacement \nfn = lambda obj: obj.loc[np.random.choice(obj.index, size, replace),:] \ncombined = combined.groupby('listing_id', as_index=False).apply(fn).drop(['id_x','id_y'], axis=1)","f3a88b93":"comments = combined['comments']","17d01d10":"comments.head(10)","37a67cad":"combined['comments'].head()","3e8d2a8c":"from stop_words import get_stop_words\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.corpus import stopwords\nimport string\nfrom nltk.tokenize import word_tokenize ","e31e4b55":"def preprocess(sentence):\n    outputSentence = sentence.lower()\n    outputSentence = replaceContractions(outputSentence)\n    outputSentence = removePunc(outputSentence)\n    outputSentence = removeNumbers(outputSentence)\n    #outputSentence = remove_non_english(outputSentence)\n    return outputSentence","5dee800f":"def replaceContractions(sentence):\n    outputSentence = sentence\n    outputSentence = outputSentence.replace(\"won't\", \"will not\")\n    outputSentence = outputSentence.replace(\"can\\'t\", \"can not\")\n    outputSentence = outputSentence.replace(\"n\\'t\", \" not\")\n    outputSentence = outputSentence.replace(\"\\'re\", \" are\")\n    outputSentence = outputSentence.replace(\"\\'s\", \" is\")\n    outputSentence = outputSentence.replace(\"\\'d\", \" would\")\n    outputSentence = outputSentence.replace(\"\\'ll\", \" will\")\n    outputSentence = outputSentence.replace(\"\\'t\", \" not\")\n    outputSentence = outputSentence.replace(\"\\'ve\", \" have\")\n    outputSentence = outputSentence.replace(\"\\'m\", \" am\")\n    return outputSentence\n","7a87a6aa":"def removePunc(sentence):\n    removePuncTrans = str.maketrans(\"\", \"\", string.punctuation)\n    outputSentence = sentence.translate(removePuncTrans)\n    return outputSentence","d412968b":"def removeNumbers(sentence):\n    outputSentence = sentence\n    removeDigitsTrans = str.maketrans('', '', string.digits)\n    outputSentence = outputSentence.translate(removeDigitsTrans)\n    return outputSentence","1480e722":"combined['comments'] = combined['comments'].apply(preprocess)","f4956cd7":"import re\ndef EngStopword(context):\n    english = re.findall(\"[a-z]+\",context)\n    e_clean = [t for t in english if t not in stopwords.words('english') and len(t) is not 1]\n    return e_clean","4257c01f":"combined['comments'] = combined['comments'].apply(EngStopword)","e0e7d6fa":"combined['comments'].head(20)","fe2e74bb":"combined.head()","d7328329":"combined1 = combined.groupby('listing_id')['comments'].apply(list)","24948d4b":"combined4 = combined1.to_frame()","d1b73516":"combined2 = combined.drop('comments', 1)","5aa29d42":"combined3 = combined2.drop_duplicates('listing_id')","09edbfcb":"combined3.head()","d02c8e02":"combined3.head()","5f0cd9c3":"combined4.head()","375c4c2d":"final = pd.merge(combined4, combined3 , how='inner', on='listing_id')\n","2ca1b00d":"final.head()","15bb92f6":"final.to_csv('data1.csv')","d59dd466":" ## Column 3: Property type\n \n - Column indicates which property type it is(ex. house, apartment, etc)","354d7aa6":"def remove_non_english(line):\n    split = line.split()\n    stemmer = SnowballStemmer(\"english\")\n    split = [stemmer.stem(w) for w in split]\n    return ' '.join(split)","742fcdb3":"# Removing all the listings with missing values\n\nIn this step, we are looking for all the listings containing missing values.  We will remove them, and store them in another dataframe. ","686aca43":"# Column 8: Guest included \n- column states the number of guests can be accomodated for each listing\n- we need to normalize the value to 0-1","8171d2dc":"# Grabbing Airbnb Listings Data\n\nWe chose specific data points from the listings data that we thought were easy for us to categorize during our data cleaning process, and, intuitively, seemed most relevant to predicting the pricing.\n\nData points:\n- host_is_superhost\n- neighbourhood_group_cleansed\n- property_type\n- room_type\n- latitude\n- longitude\n- guests_included\n- bathrooms\n- bedrooms\n- beds\n- bed_type\n- amenities\n- price\n- cleaning_fee\n- instant_bookable\n- cancellation_policy","b8be6233":"## Column 7: Cancellation policy\n- Column indicates which kind of standardlized cancellation policy the host chooses.\n- There are three cancellation policies - flexible, moderate and strict ","45c8ceed":"## Column 2: neighbourhood_group_cleansed\n- neighborhood category string that states which neighbourhood it belongs to","9caabf57":"## Column 4: Room type\n \n - Column indicates which room type it is(ex. Entire home\/apt )","1f30e593":"# Clean the review data\n\n- take 10 random reviews for each listing","89502eb0":"## Column 6: Instant Bookable\n \n- Boolean declaring whether or not the listing can be instant booked. \n- Convert `True = 1` and `False = 0`","c8fecc2a":"## Column 5: Bed type\n \n - Column states what kind of bed the listing has(ex. Real Bed, Futon, etc )","1b37c778":"# Column 11, 12: Longitude and Latitude \n- column states the longitude and latitude of each listing \n- we can use these two values, and map them to x, y and z coordinates. In this way we can make sure close points in the 3D space are close to each other. \n- x = cos(lat) * cos(lon)\n- y = cos(lat) * sin(lon), \n- z = sin(lat) ","f1e23fc4":"# Column 14: Amenities \n- column indudes all the amentities for each listing","ab4c0943":"## Column 1: host_is_superhost\n- Boolean declaring whether host fulfills Airbnb's superhost requirements: https:\/\/www.airbnb.ca\/help\/article\/829\/how-do-i-become-a-superhost\n- Convert `True = 1` and `False = 0`","7a9f9358":"# Column 13: price, cleaning fee\n- column includes the avrage price and cleaning_fee per night for each listing","670649de":"# Column 8, 9, 10: bathrooms, bedrooms, beds\n- column states the number of bathrooms, bedrooms, and beds in each listing\n- normalize the value to 0-1"}}