{"cell_type":{"064d9f54":"code","bd7dc4a3":"code","efd2994d":"code","5950fa28":"code","77d39772":"code","9b3d447e":"code","9c9fdcbe":"code","207e2425":"code","b61e65f0":"code","056b2a68":"code","87525775":"code","981de993":"code","3af95f85":"code","230eb52a":"code","ca5a24e0":"code","4ba70a04":"code","eb85b060":"code","26523b3d":"code","a2532780":"markdown","60e4d060":"markdown","d599137a":"markdown","ff136c3b":"markdown","ae419edd":"markdown","5a368877":"markdown","c36564ea":"markdown","fd840f08":"markdown","516bc8ee":"markdown","046f2a3b":"markdown","f06dadea":"markdown","4188b8b0":"markdown","b7214f92":"markdown"},"source":{"064d9f54":"import pandas as pd\nimport numpy as np\nimport pylab as py\nimport scipy.optimize as opt\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt\n%matplotlib inline","bd7dc4a3":"df = pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\ndf.head()","efd2994d":"df.columns","5950fa28":"data = df[['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes','ejection_fraction', 'high_blood_pressure', 'platelets','serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time','DEATH_EVENT']]\ndata[\"DEATH_EVENT\"] = data[\"DEATH_EVENT\"].astype(\"int\")\ndata.head()","77d39772":"X = np.asanyarray(data[['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes','ejection_fraction', 'high_blood_pressure', 'platelets','serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']])\nX[0:5]","9b3d447e":"y = np.asanyarray(data['DEATH_EVENT'])\ny[0:5]","9c9fdcbe":"X = preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]","207e2425":"from sklearn.model_selection import train_test_split\nX_train, X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3, random_state = 1)","b61e65f0":"print(\"Train Set:\",X_train.shape,y_train.shape)\nprint(\"Test Set:\",X_test.shape,y_test.shape)","056b2a68":"from sklearn.linear_model import LogisticRegression\nLR = LogisticRegression(C = 0.01, solver = \"liblinear\").fit(X_train,y_train)\nLR","87525775":"from sklearn import svm\nclf = svm.SVC(kernel=\"sigmoid\")\nclf.fit(X_train,y_train)\ny_hat = clf.predict(X_test)\ny_hat[0:5]","981de993":"yhat = LR.predict(X_test)\nyhat","3af95f85":"yhat_prob = LR.predict_proba(X_test)\nyhat_prob","230eb52a":"#Evaluation\nfrom sklearn.metrics import confusion_matrix,classification_report\nimport itertools\ndef plot_confusion_matrix(cm,classes,\n                         normalize = False,\n                         title='Confusion Matrix',\n                         cmap = plt.cm.Blues):\n    if normalize:\n        cm = cm.astype('float')\/cm.sum(axis = 1)[:,np.newaxis]\n        print(\"After Normalization\")\n    else:\n        print(\"Without Normalization\")\n    print(cm)\n    plt.imshow(cm,interpolation='nearest',cmap = cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks,classes,rotation = True,color='white')\n    plt.yticks(tick_marks,classes,rotation =True,color='white')\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max()\/2\n    for i,j in itertools.product(range(cm.shape[0]),range(cm.shape[1])):\n        plt.text(j,i,format(cm[i,j],fmt),\n                horizontalalignment = \"center\",\n                color = 'white' if cm[i,j]>thresh else \"black\")\n        \n    plt.tight_layout()\n    plt.xlabel(\"Predicted\",color='white',size=20)\n    plt.ylabel(\"True\",color='white',size=20)","ca5a24e0":"from sklearn.metrics import f1_score\nf1_score(y_test,yhat,average = \"weighted\")","4ba70a04":"f1_score(y_test,y_hat,average = \"weighted\")","eb85b060":"cnf_matrix=confusion_matrix(y_test,yhat,labels=[0,1])\nnp.set_printoptions(precision = 2)\nprint(classification_report(y_test,yhat))\nplt.figure()\nplot_confusion_matrix(cnf_matrix,classes=['Survived(0)','Died(1)'],normalize=False,title='Confusion Matrix')","26523b3d":"cnf_matrix=confusion_matrix(y_test,y_hat,labels=[0,1])\nnp.set_printoptions(precision = 2)\nprint(classification_report(y_test,yhat))\nplt.figure()\nplot_confusion_matrix(cnf_matrix,classes=['Survived(0)','Died(1)'],normalize=False,title='Confusion Matrix')","a2532780":"# Importing Libraries","60e4d060":"# Selecting Feature (X) and target Variable (y)","d599137a":"# <u> Death Prediction<\/u>\n<u>Authored by : Pratham Tripathi [(github)](http:\/\/https:\/\/github.com\/pratham0203) <\/u>\n\nIn this Solution we are going to use two MAchine Learning Algorithms namely:\n\n- Logistic Regression\n- SVM (Simple Vector Machine)\n\n## <u> Logistic Regression <\/u>\nLogistic regression is a statistical model that in its basic form uses a logistic function to model a binary dependent variable, although many more complex extensions exist. In regression analysis, logistic regression (or logit regression) is estimating the parameters of a logistic model (a form of binary regression).\n\n## <u> Simple Vector Machine <\/u>\nSupport Vector Machine\u201d (SVM) is a supervised machine learning algorithm which can be used for both classification or regression challenges. However, it is mostly used in classification problems.What it does is instead of choosing a paticular line of regression or anything it uses Kernel which is plotting of points on a hyperplane and then by using a separator it distinguishes different classes thus the classification takes place.","ff136c3b":"## F1 Score of SVM","ae419edd":"# Reading the data","5a368877":"# Confusion Matrix for Logisitic Regression","c36564ea":"# Simple Vector Model","fd840f08":"# Processing the data","516bc8ee":"# Splitting Database","046f2a3b":"# Logistic Regression Model","f06dadea":"Confusion Matrix for ","4188b8b0":"## F1 Score of Logisitic Regression Model","b7214f92":"# Confusion Matrix Definition "}}