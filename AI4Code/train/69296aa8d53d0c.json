{"cell_type":{"fc1f5cc8":"code","03b27cb7":"code","2ec26198":"code","0872a97e":"code","8888aa84":"code","456d0753":"code","874d6524":"code","3bda7479":"code","e932f99c":"code","585ac6fa":"code","219c4c39":"code","a6e4c100":"code","e24b8c14":"code","8c7e30e8":"code","acf9d00c":"code","97582f92":"code","1ad8447c":"code","96a2840b":"code","7e97c457":"code","6c185a64":"code","3792f24a":"code","60aefbb7":"code","a368344e":"code","a3eac56c":"code","fdaea6a1":"code","9e5dab79":"code","4d3284c1":"code","67ad0e61":"code","30e157a9":"code","ef505129":"markdown","19a70252":"markdown","e570780d":"markdown","d903ce59":"markdown","5f33db10":"markdown","3bd6e7a1":"markdown","1aab482b":"markdown","c83a18f9":"markdown"},"source":{"fc1f5cc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03b27cb7":"raw_data = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\nraw_data","2ec26198":"#Check Null Data\nraw_data.isna().sum()","0872a97e":"#There are 201 null 'bmi' data\nlen(raw_data) * 0.05","8888aa84":"#Total null data on 'bmi' is less than 5%, so its okay to delete it\nraw_data = raw_data.dropna(axis=0).reset_index(drop=True)\nraw_data","456d0753":"raw_data.describe(include='all')","874d6524":"#There are 3 types of gender, because normally there are 2 types of gender so have to check\nraw_data['gender'].unique()","3bda7479":"#There gender data 'Other', lets check how many data with gender 'Other'\nraw_data[raw_data['gender'] == 'Other'].count()","e932f99c":"#Just 1 data, so I think it's okay to drop data with gender 'Other'\nraw_data = raw_data.drop(raw_data[raw_data['gender'] == 'Other'].index , axis=0).reset_index(drop=True)\n\nraw_data.describe(include='all')","585ac6fa":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")","219c4c39":"f, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\n\nax1.pie(x=raw_data['stroke'].value_counts(), labels=raw_data['stroke'].value_counts().index.map({0:'Not Stroke', 1:'Stroke'}), autopct='%1.1f%%')\nax1.legend(\n    title='Status',\n    loc = 'lower right')\nax1.set_title('Distribution of Strokes')\n\nplots = sns.barplot(x=raw_data['stroke'].value_counts().index.map({0:'Not Stroke', 1:'Stroke'}), y=raw_data['stroke'].value_counts(), ax=ax2)\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.0f'), (bar.get_x() + bar.get_width() \/ 2, bar.get_height()), ha='center', va='center', xytext=(0, 8), textcoords='offset points')\nax2.set_ylabel('Total')\nax2.set_title('Total Strokes')\n\nplt.show()","a6e4c100":"data_stroked = raw_data[raw_data['stroke'] == 1].reset_index(drop=True)\ndata_stroked","e24b8c14":"f, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\n\nax1.pie(x=data_stroked['gender'].value_counts(), labels=data_stroked['gender'].value_counts().index, autopct='%1.1f%%')\nax1.legend(\n    title='Status',\n    loc = 'lower right')\nax1.set_title('Distribution of Strokes')\n\nplots = sns.barplot(x=data_stroked['gender'].value_counts().index, y=data_stroked['gender'].value_counts(), ax=ax2)\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.0f'), (bar.get_x() + bar.get_width() \/ 2, bar.get_height()), ha='center', va='center', xytext=(0, 8), textcoords='offset points')\nax2.set_ylabel('Total')\nax2.set_title('Total Strokes')\n\nplt.show()","8c7e30e8":"sns.histplot(data_stroked['age'], bins=4)\nplt.xlabel('age')\nplt.ylabel('total')\nplt.title('Distribution of Stroke Based on Age')\nplt.show()","acf9d00c":"f, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(20,5))\n\nsns.scatterplot(x=data_stroked['age'], y=data_stroked['avg_glucose_level'], ax=ax1)\nax1.set_xlabel('age')\nax1.set_ylabel('avg_glucose_level')\nax1.set_title('avg_glucose_level - age')\n\nsns.scatterplot(x=data_stroked['age'], y=data_stroked['bmi'], ax=ax2)\nax2.set_xlabel('age')\nax2.set_ylabel('bmi')\nax2.set_title('bmi - age')\n\nplt.show()","97582f92":"#Removing Outliers\nq = data_stroked['age'].quantile(0.01)\ndata_stroked = data_stroked[data_stroked['age'] > q].reset_index(drop=True)\ndata_stroked","1ad8447c":"#Re-ScatterPlot\nf, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(20,5))\n\nsns.scatterplot(x=data_stroked['age'], y=data_stroked['avg_glucose_level'], ax=ax1)\nax1.set_xlabel('age')\nax1.set_ylabel('avg_glucose_level')\nax1.set_title('avg_glucose_level - age')\n\nsns.scatterplot(x=data_stroked['age'], y=data_stroked['bmi'], ax=ax2)\nax2.set_xlabel('age')\nax2.set_ylabel('bmi')\nax2.set_title('bmi - age')\n\nplt.show()","96a2840b":"#ScatterPlot All Data\nf, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(20,5))\n\nsns.scatterplot(x=raw_data['age'], y=raw_data['avg_glucose_level'], ax=ax1)\nax1.set_xlabel('age')\nax1.set_ylabel('avg_glucose_level')\nax1.set_title('avg_glucose_level - age')\n\nsns.scatterplot(x=raw_data['age'], y=raw_data['bmi'], ax=ax2)\nax2.set_xlabel('age')\nax2.set_ylabel('bmi')\nax2.set_title('bmi - age')\n\nplt.show()","7e97c457":"import statsmodels.api as sm\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split","6c185a64":"data_pre = raw_data.copy()\ndata_pre","3792f24a":"le = LabelEncoder()\ndata_pre['gender'] = le.fit_transform(data_pre['gender'])\ndata_pre['ever_married'] = le.fit_transform(data_pre['ever_married'])\ndata_pre['work_type'] = le.fit_transform(data_pre['work_type'])\ndata_pre['Residence_type'] = le.fit_transform(data_pre['Residence_type'])\ndata_pre['smoking_status'] = le.fit_transform(data_pre['smoking_status'])\ndata_pre.head()","60aefbb7":"x1 = data_pre[['hypertension', 'smoking_status', 'heart_disease', 'bmi', 'avg_glucose_level']] #so, I conclude there are 5 causes \ny = data_pre['stroke']","a368344e":"x1_const = sm.add_constant(x1)\n\nx1_train, x1_test, y_train, y_test = train_test_split(x1_const, y, test_size=0.2, random_state=365)","a3eac56c":"reg = sm.Logit(y_train, x1_train)\nresult = reg.fit()\n\nresult.summary()","fdaea6a1":"table_predict = pd.DataFrame()\ntable_predict['actual'] = y_test\ntable_predict['predict'] = np.round(result.predict(x1_test))\ntable_predict","9e5dab79":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score","4d3284c1":"cm = confusion_matrix(table_predict['actual'], table_predict['predict'])\ncm","67ad0e61":"accuracy = accuracy_score(table_predict['actual'], table_predict['predict'])\naccuracy","30e157a9":"print('Accuracy The Model :', np.round(accuracy, 2) * 100, '%')","ef505129":"Distribution of Stroke Based on Gender","19a70252":"Distribution and Total Strokes","e570780d":"Determine independent and dependent variables\n\n*To determine the independent variables, I read on Halodoc (https:\/\/www.halodoc.com\/artikel\/apa-saja-penyebab-stroke-ini-8-jawabannya) about the factors that cause stroke*","d903ce59":"# Modeling","5f33db10":"# Data Visualization","3bd6e7a1":"Distribution of Stroke Based on Age ","1aab482b":"The model used is Logistic Regression.\nWith variable parameters used:\n1. hypertension = \"0: do not have hypertension, 1: have hypertension\"\n2. smoking_status = 4 levels of the person smoking (0-3)\n3. heart_disease = \"0: no heart disease, 1: heart disease\"\n4. BMI = body mass index, the higher the BMI (> 35), the person is obese\n5. avg_glucose_level = average blood sugar in the body ","c83a18f9":"# The Accuracy is 96%"}}