{"cell_type":{"260a6704":"code","01e2d16e":"code","804636ad":"code","1434c004":"code","1105a57a":"code","97e363a0":"code","2d63673c":"code","527a43c1":"code","8adfb1b8":"code","30153bc8":"code","8d08a7f7":"code","00ea9413":"code","2ba89f96":"code","15f9265d":"code","ce402968":"code","a2098153":"code","e957c722":"markdown","66d38b80":"markdown","208940a5":"markdown","6d72d805":"markdown","397dfd34":"markdown","79a2d691":"markdown"},"source":{"260a6704":"import os\nimport shutil\nimport cv2\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.applications.vgg19 import preprocess_input\nimport matplotlib.pyplot as plt\nimport tensorflow \nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import InputLayer, BatchNormalization, Dropout, Flatten, Dense, Activation, MaxPool2D, Conv2D\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom tensorflow.keras.applications.vgg19 import VGG19\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.metrics import Recall,Precision\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom pathlib import Path\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'","01e2d16e":"root_path = Path(\"..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\")\nsub_paths = root_path.glob(r'**\/*.png')\n#converting to list, will deal with generator later\nsub_paths = list(sub_paths)\n\n#creating temporary list to handle generator\ndata = []\nfor i in range(len(sub_paths)):\n    #get the 2nd from last directory name\n    label = os.path.split(os.path.split(sub_paths[i])[0])[1]\n    data.append([str(sub_paths[i]), label])\n    \n#Appending data to dataframe\ndf = pd.DataFrame(data, columns=['path', 'label'])\n#Removing ground truths \ndf = df[df['label'].apply(lambda x: x[-2:] != 'GT')].reset_index(drop=True)","804636ad":"#Splitting into training, validation, and testing data\ntrain_df, test_df = train_test_split(df, test_size=0.2, random_state=2, shuffle=True)\ntrain_df.count()\ntest_df.count()","1434c004":"#Importing images using image data preprocessing provided from keras\ntrain_generator = ImageDataGenerator(validation_split=0.2)\ntest_generator = ImageDataGenerator()\n\ntrain_imgs = train_generator.flow_from_dataframe(\n    dataframe = train_df,\n    x_col = \"path\",\n    y_col = \"label\",\n    target_size = (384, 384),\n    color_mode = \"rgb\",\n    class_mode = \"categorical\",\n    batch_size = 32,\n    shuffle = True,\n    subset = \"training\"\n)\n\nval_imgs = train_generator.flow_from_dataframe(\n    dataframe = train_df,\n    x_col = \"path\",\n    y_col = \"label\",\n    target_size = (384, 384),\n    color_mode = \"rgb\",\n    class_mode = \"categorical\",\n    batch_size = 32,\n    shuffle = True,\n    subset = \"validation\"\n)\n\ntest_imgs = test_generator.flow_from_dataframe(\n    dataframe = test_df,\n    x_col = \"path\",\n    y_col = \"label\",\n    target_size = (384, 384),\n    color_mode = \"rgb\",\n    class_mode = \"categorical\",\n    batch_size = 32,\n    shuffle = False\n)","1105a57a":"import sys\nsys.path.append('..\/input\/swin-transformer-tf-fixed')\nfrom swintransformer import SwinTransformer","97e363a0":"\"\"\"def auto_select_accelerator():\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"Running on TPU:\", tpu.master())\n    except ValueError:\n        strategy = tf.distribute.get_strategy()\n    print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n    \n    return strategy\"\"\"","2d63673c":"#strategy = auto_select_accelerator()","527a43c1":"#with strategy.scope():\nmodel = tf.keras.Sequential([\n    tf.keras.layers.InputLayer(input_shape=[384, 384, 3]),\n    SwinTransformer('swin_large_384', num_classes=9, include_top=False, pretrained=True, use_tpu=False),\n    tf.keras.layers.Dropout(rate=0.1),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dropout(rate=0.1),\n    tf.keras.layers.Dense(9, activation='softmax')\n])\n\nmodel.compile(\n    optimizer=tf.keras.optimizers.Adam(1e-4),\n    loss=tf.keras.losses.CategoricalCrossentropy(),\n    metrics=[tf.keras.metrics.AUC(multi_label=True), \"acc\"])\n\nmodel.summary()","8adfb1b8":"from tensorflow.keras.utils import plot_model\nfrom IPython.display import SVG, Image\nplot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)\nImage('model.png',width=400, height=200)","30153bc8":"# Defining Callbacks\n\nfilepath = '.\/best_weights.hdf5'\n\nearlystopping = EarlyStopping(monitor = 'val_accuracy', \n                              mode = 'max' , \n                              patience = 5,\n                              verbose = 1)\n\ncheckpoint    = ModelCheckpoint(filepath, \n                                monitor = 'val_accuracy', \n                                mode='max', \n                                save_best_only=True, \n                                verbose = 1)\n\n\ncallback_list = [earlystopping, checkpoint]","8d08a7f7":"model_history=model.fit(train_imgs,\n                        validation_data=val_imgs,\n                        epochs = 10,\n                        callbacks = callback_list,\n                        verbose = 1)","00ea9413":"import keras\nmodel.save('.\/best_weights.hdf5')\n#model = keras.models.load_model('.\/best_weights.hdf5')","2ba89f96":"plt.plot(model_history.history['accuracy'])\nplt.plot(model_history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='lower right')\nplt.show()\n\nplt.plot(model_history.history['loss'])\nplt.plot(model_history.history['val_loss'])\nplt.title('train set loss')\n\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper right')\nplt.show()\n\nplt.plot(model_history.history['precision'])\nplt.plot(model_history.history['val_precision'])\nplt.title(' precision')\nplt.ylabel('precision')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper right')\nplt.show()\n\n\nplt.plot(model_history.history['recall'])\nplt.plot(model_history.history['val_recall'])\nplt.title(' recall')\nplt.ylabel('recall')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper right')\nplt.show()\n","15f9265d":"loss, accuracy , precision,recall=model.evaluate(test_imgs)\nprint('Test Accuracy: %.3f' % accuracy)\nprint('Test Precision: %.3f' % precision)\nprint('Test Recall: %.3f' % recall)\nprint('Test loss: %.3f' % loss)\n","ce402968":"y_pred = model.predict(test_imgs)\ny_pred = np.argmax(y_pred,axis=1)","a2098153":"from sklearn.metrics import classification_report\nprint(classification_report(test_imgs.labels,y_pred))","e957c722":"# Freezing Layers","66d38b80":"# Defining Callbacks","208940a5":"# Test","6d72d805":"# Plot","397dfd34":"# Model Initialization","79a2d691":"# ImageDataGenerator"}}