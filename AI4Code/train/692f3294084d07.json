{"cell_type":{"93d624e8":"code","f6935f2c":"code","7cb3fc29":"code","3ef9b7e5":"code","f284df5a":"code","12591611":"code","ee8e5018":"code","3c9398ad":"code","47f31bf2":"code","219aa585":"code","abe80137":"code","23fe4d71":"code","46fb6e9c":"code","1a32f6ec":"code","05997d81":"code","aee27d0f":"code","bf0aaf30":"code","9b1b46aa":"code","3e0c73ff":"code","f5aa6dfd":"code","c36f3aec":"code","b546e46a":"code","e1875f09":"code","278def79":"code","befef433":"code","5c11f2d4":"code","d79f06a3":"code","0abf579d":"code","865d8514":"code","d8648391":"code","82c1cf54":"code","fea81ac3":"code","4048e01c":"code","845a8132":"markdown","bcea41c0":"markdown","94f06996":"markdown","afb80c0f":"markdown","62c14c3d":"markdown","62ba80e6":"markdown","6db38bdc":"markdown"},"source":{"93d624e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f6935f2c":"fifa_df = pd.read_csv(\"..\/input\/data.csv\")","7cb3fc29":"fifa_df.head(5)","3ef9b7e5":"fifa_df.info()","f284df5a":"# Try to get some useful features and this featuref is not null\nuseful_feat     = ['Name',\n                   'Age',\n                   'Photo', \n                   'Nationality', \n                   'Flag',\n                   'Overall',\n                   'Potential', \n                   'Club', \n                   'Club Logo', \n                   'Value',\n                   'Wage',\n                   'Preferred Foot',\n                   'International Reputation',\n                   'Weak Foot',\n                   'Skill Moves',\n                   'Work Rate',\n                   'Body Type',\n                   'Position',\n                   'Joined', \n                   'Contract Valid Until',\n                   'Height',\n                   'Weight',\n                   'Crossing', \n                   'Finishing',\n                   'HeadingAccuracy',\n                   'ShortPassing', \n                   'Volleys', \n                   'Dribbling',\n                   'Curve',\n                   'FKAccuracy',\n                   'LongPassing',\n                   'BallControl',\n                   'Acceleration',\n                    'SprintSpeed',\n                   'Agility',\n                   'Reactions', \n                   'Balance',\n                   'ShotPower', \n                   'Jumping',\n                   'Stamina', \n                   'Strength',\n                   'LongShots',\n                   'Aggression',\n                   'Interceptions',\n                   'Positioning', \n                   'Vision', \n                   'Penalties',\n                   'Composure',\n                   'Marking',\n                   'StandingTackle', \n                   'SlidingTackle',\n                   'GKDiving',\n                   'GKHandling',\n                   'GKKicking',\n                   'GKPositioning',\n                   'GKReflexes']\n","12591611":"df = pd.DataFrame(fifa_df, columns=useful_feat)","ee8e5018":"sns.heatmap(data=df.isnull() )\n# it seems there is still a lot of null data","3c9398ad":"# find the age distribution\nplt.figure(1, figsize=(18, 7))\nsns.countplot( x= 'Age', data=df, palette='Accent')\nplt.title('Age distribution of all players')\n# It seems most of the age is distributed form 19 ~ 30","47f31bf2":"# The eldest players\ndf.sort_values(by= 'Age', ascending=False)[['Name','Nationality', 'Club', 'Position', 'Overall', 'Age']].head(5)","219aa585":"# The youngest players\ndf.sort_values(by= 'Age')[['Name','Nationality', 'Club', 'Position', 'Overall', 'Age']].head(5)","abe80137":"# Age distribution in few famous clubs\nvals = ['Tottenham Hotspur' , 'Juventus' , 'Paris Sain-Germain' ,'FC Bayern M\u00fcnchen',\n       'Real Madrid' , 'FC Barcelona' , 'Borussia Dortmund' , 'Manchester United' , \n       'FC Porto' , 'As Monaco' , 'BSC Young Boys']\ndf_club_age = df.loc[df['Club'].isin(vals) & df['Age']]\nplt.figure(1, figsize=(15, 7))\nsns.violinplot(x = 'Club', y = 'Age', data = df_club_age )\nplt.title('Age distribution in some clubs')\nplt.xticks(rotation=50)\nplt.show()\n# Real madrid is young, Juventus is not very young, Real Madrid perform very good in recent Champions League","23fe4d71":"# Age distribution in few countries\nvals = ['England' , 'Brazil' , 'Portugal' ,'Argentina',\n       'Italy' , 'Spain' , 'Germany' , 'Russia' , \n       'Chile' , 'Japan' , 'India', 'France']\ndf_age_country = df.loc[df['Nationality'].isin(vals) & df['Age'] ]\nplt.figure(1, figsize=(15, 7))\nsns.violinplot(x = 'Nationality', y = 'Age', data = df_age_country)\nplt.title('Age distribution in some countries')\nplt.xticks(rotation = 50)\nplt.show()\n# It seems very average","46fb6e9c":"# handle all the players\ndef preprocess_value(x):\n    x = str(x).replace('\u20ac', '')\n    if('M' in str(x)):\n        x = str(x).replace('M', '')\n        x = float(x) * 1000000\n    elif('K' in str(x)):\n        x = str(x).replace('K', '')\n        x = float(x) * 1000\n    return float(x)\n\ndf['Value'] = df['Value'].apply(preprocess_value)","1a32f6ec":"# Value ditribution\nplt.figure(1, figsize=(18, 7))\nsns.countplot( x= 'Value', data=df)\nplt.title('Value distribution of all players')","05997d81":"# find the most expensive players\ndf.sort_values(by='Value', ascending=False)[['Name','Nationality', 'Club', 'Position', 'Overall', 'Value']].head(5)","aee27d0f":"# Which club has the average expensive players\nClub_value = df.groupby('Club')['Value'].mean()\nClub_value.sort_values(ascending=False).head(5)\n# These top guys is commen in Champion League","bf0aaf30":"# which club has the highest total value \nclub_values =df.groupby('Club')['Value'].sum()\nclub_values.sort_values(ascending=False).head(5)","9b1b46aa":"# Nationality players count\nplt.figure(1, figsize=(22, 12))\nplt.title(\"Which country produce the most players\")\nsns.countplot(y = \"Nationality\", order=df['Nationality'].value_counts().index[0:5] ,data=df)\n# England is rich at good football players","3e0c73ff":"# Include all the player except goalkeeper\nvals = ['RF', 'ST', 'LW', 'RCM', 'LF', 'RS', 'RCB', 'LCM', 'CB',\n       'LDM', 'CAM', 'CDM', 'LS', 'LCB', 'RM', 'LAM', 'LM', 'LB', 'RDM',\n       'RW', 'CM', 'RB', 'RAM', 'CF', 'RWB', 'LWB']\nml_players= df.loc[df['Position'].isin(vals) & df['Position']]","f5aa6dfd":"# choose all the columns we need\nml_cols =          ['Crossing', \n                   'Finishing',\n                   'HeadingAccuracy',\n                   'ShortPassing', \n                   'Volleys', \n                   'Dribbling',\n                   'Curve',\n                   'FKAccuracy',\n                   'LongPassing',\n                   'BallControl',\n                   'Acceleration',\n                    'SprintSpeed',\n                   'Agility',\n                   'Reactions', \n                   'Balance',\n                   'ShotPower', \n                   'Jumping',\n                   'Stamina', \n                   'Strength',\n                   'LongShots',\n                   'Aggression',\n                   'Interceptions',\n                   'Positioning', \n                   'Vision', \n                   'Penalties',\n                   'Composure',\n                   'Marking',\n                   'StandingTackle', \n                   'SlidingTackle',\n                    'Overall'\n                   ]","c36f3aec":"df_ml = pd.DataFrame(data=ml_players, columns=ml_cols)","b546e46a":"# check the data\ndf_ml.info()","e1875f09":"df_ml.isnull().any()","278def79":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","befef433":"# Train test split\ny = df_ml['Overall']\nX = df_ml[['Crossing', \n           'Finishing',\n           'HeadingAccuracy',\n           'ShortPassing', \n           'Volleys', \n           'Dribbling',\n           'Curve',\n           'FKAccuracy',\n           'LongPassing',\n           'BallControl',\n           'Acceleration',\n            'SprintSpeed',\n           'Agility',\n           'Reactions', \n           'Balance',\n           'ShotPower', \n           'Jumping',\n           'Stamina', \n           'Strength',\n           'LongShots',\n           'Aggression',\n           'Interceptions',\n           'Positioning', \n           'Vision', \n           'Penalties',\n           'Composure',\n           'Marking',\n           'StandingTackle', \n           'SlidingTackle']]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=101)","5c11f2d4":"lm = LinearRegression()","d79f06a3":"lm.fit(X_train, y_train)","0abf579d":"print('Coefficients:', lm.coef_)","865d8514":"predictions = lm.predict(X_test)","d8648391":"plt.scatter(y_test, predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted y')","82c1cf54":"# Evaluate the data\nfrom sklearn import metrics\nprint(\"MAE\", metrics.mean_absolute_error(y_test, predictions))\nprint(\"MSE\", metrics.mean_squared_error(y_test, predictions))\nprint(\"RMSE\", np.sqrt(metrics.mean_squared_error(y_test, predictions)))\n#  the results seems perfect","fea81ac3":"sns.distplot((y_test - predictions), bins=50)","4048e01c":"# Get the effect of every parameter\ncoeffecients = pd.DataFrame(lm.coef_, X.columns)\ncoeffecients.columns = ['Coeffecient']\ncoeffecients","845a8132":"> # Nationality","bcea41c0":"* It seems ball control, short passing, composure is the key role in the game.","94f06996":"> # Club","afb80c0f":"> # Players' value","62c14c3d":"> # Age distribution","62ba80e6":"> # Data exploration","6db38bdc":"> # Try to do the machine learning to predict the overall\nIn this part we try to do the machine learning of the players overall, it seems we can't include the player of the goalkeeper"}}