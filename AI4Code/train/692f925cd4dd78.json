{"cell_type":{"242be706":"code","4da98cb5":"code","9b39397b":"code","2b06ed49":"code","a55f17c6":"code","30176dd5":"code","9e0ef759":"code","abc3cf4c":"code","882109db":"code","809879a4":"code","874e8445":"code","2662a3f2":"code","b4a30e83":"code","6a8e6c2c":"code","fbe3667d":"code","f26cc865":"code","67c70ffa":"code","5a9d4c88":"code","c49c91a5":"code","67d8ec46":"code","6dd3eb88":"code","b9e49d2d":"code","0553266b":"code","d698d804":"code","a9be4f7a":"code","7504eb76":"code","4b0f8ed4":"code","7e0d8b18":"code","8cab068b":"code","e3ba493a":"code","18f6dfc4":"code","d41272a7":"code","893ebda8":"code","5094c4bd":"code","d19ad0c6":"code","b98df932":"code","dc139826":"code","05ee4fe6":"code","be73448b":"code","f08ae76c":"code","9476152c":"code","22662321":"code","c1f1fd64":"code","39107475":"code","63c075ec":"code","e6426b04":"markdown","fc361369":"markdown","5095541e":"markdown","3d23837e":"markdown","c4e8669b":"markdown","68709e2e":"markdown","0c607313":"markdown"},"source":{"242be706":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4da98cb5":"%matplotlib inline\n\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 10,6","9b39397b":"train = pd.read_csv('\/kaggle\/input\/predict-demand\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/predict-demand\/test.csv')","2b06ed49":"train.tail()","a55f17c6":"# All values after row 6479 are NaN.\ntrain  = train.drop(train.index[6480:])\ntrain.tail()","30176dd5":"pd.DataFrame(train.groupby(['brand', 'container'], axis =0, as_index=True).count()['id'])","9e0ef759":"gazoza_train = train[train['brand'] == 'gazoza'].reset_index(drop=True)\n\n# Fill in the missing contiainer types\ngazoza_train.at[340, 'container'] = 'can'\ngazoza_train.at[798, 'container'] = 'glass'\ngazoza_train.at[984, 'container'] = 'glass'\ngazoza_train.at[1214, 'container'] = 'plastic'\ngazoza_train.at[1229, 'container'] = 'glass'\n# Fill in the missing capacity types\ngazoza_train.at[368, 'capacity'] = '1.5lt'\ngazoza_train.at[648, 'capacity'] = '500ml'\ngazoza_train.at[962, 'capacity'] = '500ml'\n# Choose features\n# gazoza_train.drop(['id','shop','long','brand','container'], axis=1, inplace=True)\ngazoza_train['date'] = pd.to_datetime(gazoza_train['date'])\n# Remove the sufix of the values of the capacity column, Change into numerics\ngazoza_train['capacity'] = gazoza_train['capacity'].map(lambda x: str(x)[:-2])\ngazoza_train['capacity'] = pd.to_numeric(gazoza_train['capacity'])\n\n#----------------------\n\ngazoza_test = test[test['brand'] == 'gazoza'].reset_index(drop=True)\n# Fill in the missing capacity types\ngazoza_test.at[208, 'capacity'] = '330ml'\ngazoza_test.at[209, 'capacity'] = '500ml'\n# Choose features\n# gazoza_test.drop(['id','shop','long','brand','container'], axis=1, inplace=True)\ngazoza_test['date'] = pd.to_datetime(gazoza_test['date'])\n# Remove the sufix of the values of the capacity column, Change into numerics\ngazoza_test['capacity'] = gazoza_test['capacity'].map(lambda x: str(x)[:-2])\ngazoza_test['capacity'] = pd.to_numeric(gazoza_test['capacity'])\n\n# -----------------------\ngazoza_test.info()","abc3cf4c":"# Fill in the missing values for lat column of training set\ngazoza_train['lat'] = gazoza_train.apply(lambda row: 37.97945 if (row['shop'] == 'shop_1') else row['lat'],axis=1)\ngazoza_train['lat'] = gazoza_train.apply(lambda row: 35.32787 if (row['shop'] == 'shop_2') else row['lat'],axis=1)\ngazoza_train['lat'] = gazoza_train.apply(lambda row: 37.96245 if (row['shop'] == 'shop_3') else row['lat'],axis=1)\ngazoza_train['lat'] = gazoza_train.apply(lambda row: 39.63689 if (row['shop'] == 'shop_5') else row['lat'],axis=1)\ngazoza_train['lat'] = gazoza_train.apply(lambda row: 38.24444 if (row['shop'] == 'shop_6') else row['lat'],axis=1)\n\n# Fill in the missing values for long column of training set\ngazoza_train['long'] = gazoza_train.apply(lambda row: 23.68708 if (row['shop'] == 'shop_3') else row['long'],axis=1)\ngazoza_train['long'] = gazoza_train.apply(lambda row: 22.93086 if (row['shop'] == 'shop_4') else row['long'],axis=1)\ngazoza_train['long'] = gazoza_train.apply(lambda row: 21.73444 if (row['shop'] == 'shop_6') else row['long'],axis=1)\n\n# Fill in the missing values for lat column of testing set\ngazoza_test['lat'] = gazoza_test.apply(lambda row: 37.96245 if (row['shop'] == 'shop_3') else row['lat'],axis=1)\ngazoza_test['lat'] = gazoza_test.apply(lambda row: 39.63689 if (row['shop'] == 'shop_5') else row['lat'],axis=1)\n\n\n# Fill in the missing values for long column of testing set\ngazoza_test['long'] = gazoza_test.apply(lambda row: 23.68708 if (row['shop'] == 'shop_3') else row['long'],axis=1)\ngazoza_test['long'] = gazoza_test.apply(lambda row: 21.73444 if (row['shop'] == 'shop_6') else row['long'],axis=1)\ngazoza_test['long'] = gazoza_test.apply(lambda row: 25.14341 if (row['shop'] == 'shop_2') else row['long'],axis=1)\ngazoza_test['long'] = gazoza_test.apply(lambda row: 23.71622 if (row['shop'] == 'shop_1') else row['long'],axis=1)\ngazoza_test['long'] = gazoza_test.apply(lambda row: 22.41761 if (row['shop'] == 'shop_5') else row['long'],axis=1)","882109db":"gazoza_train.info()","809879a4":"gazoza_test.info()","874e8445":"sns.relplot(data=gazoza_train, x='date', y='quantity', col = 'container', kind='line')","2662a3f2":"gazoza_train[(gazoza_train['city'] == 'Athens') & (gazoza_train['capacity'] == 1.5)]","b4a30e83":"qty = pd.DataFrame(gazoza_train.groupby(['date'], axis =0, as_index=True).sum()['quantity'])","6a8e6c2c":"# Plot Graph of Gazoza sales ove the years\n\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of Drinks Sold\")\nplt.title(\"Gazoza Drinks Sold in Greece Over Time\")\nplt.plot(qty)","fbe3667d":"# Determine rolling statistics\n\nrolmean = qty.rolling(window = 4).mean()\nrolstd = qty.rolling(window = 4).std()\n\n# Plot rolling statistics:\norig = plt.plot(qty, color='blue', label='Collected Data')\nmeanR = plt.plot(rolmean, color='red', label='Rolling Mean')\nstdR = plt.plot(rolstd, color='black', label='Rolling Std')\nplt.legend(loc='best')\nplt.title(\"Rolling Mean & Standard Deviation\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of Drinks Sold\")\nplt.show(block = False)","f26cc865":"# Perform Dickey-Fuller Test\n\nfrom statsmodels.tsa.stattools import adfuller\n\ndef dickeyfuller(timeseries):\n    print('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries[:], autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic', 'p-value', '#Lags Used', 'Number of Observations Used'])\n    for key, value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print(dfoutput)","67c70ffa":"dickeyfuller(qty)","5a9d4c88":"qty_log = np.log(qty)\nplt.plot(qty_log)\nplt.title(\"Log Scale Gazoza Drinks Sold in Greece Over Time\")","c49c91a5":"dickeyfuller(qty_log)","67d8ec46":"# Determine rolling statistics\n\nrolmean_log = qty_log.rolling(window = 4).mean()\nrolstd_log = qty_log.rolling(window = 4).std()\n\n# Plot rolling statistics:\norig_log = plt.plot(qty_log, color='blue', label='Log of Data')\nmeanR_log = plt.plot(rolmean_log, color='red', label='Rolling Mean')\nstdR_log = plt.plot(rolstd_log, color='black', label='Rolling Std')\nplt.legend(loc='best')\nplt.title(\"Rolling Mean & Standard Deviation\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of Drinks Sold\")\nplt.show(block = False)","6dd3eb88":"from statsmodels.tsa.seasonal import seasonal_decompose\ndesomposition = seasonal_decompose(qty_log)\n\ntrend = desomposition.trend\nseasonal = desomposition.seasonal\nresedual = desomposition.resid\n\nplt.subplot(411)\nplt.plot(qty_log, label=\"Original\")\nplt.legend(loc='best')\nplt.subplot(412)\nplt.plot(trend, label ='Trend')\nplt.legend(loc='best')\nplt.subplot(413)\nplt.plot(seasonal, label ='Seasonality')\nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(resedual, label ='Reseduals')\nplt.legend(loc='best')\n\ndecomposedLogData = resedual\ndecomposedLogData.dropna(inplace = True)\ndickeyfuller(decomposedLogData)","b9e49d2d":"dataLogDiffShifting = qty_log - qty_log.shift()\nplt.plot(dataLogDiffShifting)\nplt.title(\"Shift values to use in forecasting\")","0553266b":"dataLogDiffShifting.dropna(inplace=True)","d698d804":"#ACF  and PACF plots:\nfrom statsmodels.tsa.stattools import acf, pacf\n\nlag_acf = acf(dataLogDiffShifting, nlags = 4)\nlag_pacf = pacf(dataLogDiffShifting, nlags = 4, method = 'ols') # ordinary least square\n\n#Plot ACF:\nplt.subplot(121)\nplt.plot(lag_acf)\nplt.axhline(y=0, linestyle = '--', color ='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(dataLogDiffShifting)), linestyle = '--', color ='gray')\nplt.axhline(y=1.96\/np.sqrt(len(dataLogDiffShifting)), linestyle = '--', color ='gray')\nplt.title('Autocorrelation Function')\n\n#Plot PACF\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y=0, linestyle = '--', color ='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(dataLogDiffShifting)), linestyle = '--', color ='gray')\nplt.axhline(y=1.96\/np.sqrt(len(dataLogDiffShifting)), linestyle = '--', color ='gray')\nplt.title('Partial Autocorrelation Function')\nplt.tight_layout()","a9be4f7a":"from statsmodels.tsa.arima_model import ARIMA\n\n#AR Model\nmodel = ARIMA(qty_log, order = (5,1,2)) #P, d, Q values\nresults_AR = model.fit(disp = -1)\nplt.plot(dataLogDiffShifting)\nplt.plot(results_AR.fittedvalues, color = 'red')\nplt.title('RSS: %.4f'% sum((results_AR.fittedvalues - dataLogDiffShifting['quantity'])**2))\nprint('Plotting AR Model')","7504eb76":"predictions_ARIMA_diff = pd.Series(results_AR.fittedvalues, copy = True)\nprint(predictions_ARIMA_diff.head())","4b0f8ed4":"# Convert to cumulative sum\npredictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()\nprint(predictions_ARIMA_diff_cumsum.head())","7e0d8b18":"predictions_ARIMA_log = pd.Series(qty_log['quantity'], index=qty_log.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum, fill_value = 0)\npredictions_ARIMA_log.head()","8cab068b":"predictions_ARIMA = np.exp(predictions_ARIMA_log)\nplt.plot(qty)\nplt.plot(predictions_ARIMA)\nplt.title(\"Actual Data vs. Predicted Results\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Quantity Sold\")","e3ba493a":"qty_test = pd.DataFrame(gazoza_test.groupby(['date'], axis =0, as_index=True).sum()['quantity'])\n\n# Plot Graph of Gazoza sales ove the years\n\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of Drinks Sold\")\nplt.title(\"Gazoza Drinks Sold in Greece Over Time: Test Set\")\nplt.plot(qty_test)","18f6dfc4":"results_AR.plot_predict(1,84)\nplt.title(\"Forecast for 2018\")\nplt.xlabel(\"Date\")","d41272a7":"forecast_18 = pd.Series(results_AR.forecast(steps=12)[0])","893ebda8":"forecast_18.index = qty_test.index","5094c4bd":"conf_int = results_AR.forecast(steps=12)[2]\nhigh = []\nlow = []\nfor x in conf_int:\n    low.append(x[0])\n    high.append(x[1])\n    \nlow_bound = pd.Series(low, index = qty_test.index)\nhigh_bound = pd.Series(high, index = qty_test.index)","d19ad0c6":"plt.plot(qty_test, label = \"2018 Test Data\")\nplt.plot(np.exp(forecast_18), label = \"2018 Forecast\")\n\nplt.plot(np.exp(low_bound), linestyle = '--', color ='gray', label = '95% Confidence Interval')\nplt.plot(np.exp(high_bound), linestyle = '--', color ='gray')\n\nplt.legend(loc='best')\nplt.title(\"2018 Forecast vs 2018 Test\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Quantity Sold\")\n","b98df932":"NN_pred = [27995.53125, 23516.5625, 43323.83203125, 29774.40234375, 33537.34765625, 70139.9453125, 43992.3203125, 52559.10546875, 28519.216796875, 41201.68359375, 37230.76171875, 28008.6328125, 15068.306640625, 53544.8515625, 27877.029296875, 55124.234375, 46199.5234375, 37970.35546875, 20397.423828125, 17169.49609375, 24014.318359375, 30734.091796875, 19227.01953125, 35711.67578125, 43398.37109375, 24988.18359375, 49291.14453125, 33905.75390625, 21092.140625, 18523.40625, 8996.20703125, 32146.455078125, 13686.7841796875, 14233.4130859375, 27304.142578125, 46164.00390625, 31509.890625, 26958.54296875, 38854.87109375, 38880.48828125, 35190.87109375, 49890.19140625, 71913.0625, 40483.1875, 34886.7421875, 19460.2265625, 37590.765625, 31629.5234375, 38371.40234375, 34561.57421875, 55011.75, 58391.1875, 23737.64453125, 45129.44140625, 25710.375, 33765.53515625, 34778.96875, 31293.46484375, 47564.203125, 37007.83203125, 33198.61328125, 31615.2265625, 30672.3203125, 16498.169921875, 25355.603515625, 38380.02734375, 19921.14453125, 15839.169921875, 52092.11328125, 52734.98046875, 66335.6875, 38484.32421875, 33439.15234375, 21001.66796875, 42554.59765625, 35852.05859375, 50307.07421875, 50665.0, 69231.234375, 42383.16015625, 26663.25, 53392.8671875, 28573.515625, 34009.9453125, 39956.50390625, 26632.994140625, 37432.921875, 41723.14453125, 49404.46875, 45379.0546875, 26688.580078125, 37427.03125, 37474.4921875, 24938.96484375, 48030.3046875, 43909.546875, 29060.2109375, 67551.9375, 50301.796875, 23725.052734375, 13720.724609375, 33999.34375, 28512.76953125, 10637.6240234375, 39149.33203125, 25444.76171875, 30374.298828125, 35924.77734375, 31564.185546875, 29570.2890625, 40910.09375, 26785.978515625, 53981.1875, 52303.34375, 35203.890625, 69333.734375, 42392.890625, 37152.0234375, 58010.87890625, 32404.88671875, 29477.134765625, 44852.078125, 26087.58203125, 41751.3203125, 49078.78515625, 20083.494140625, 32528.818359375, 43357.875, 44197.8046875, 33356.62890625, 45851.48828125, 71055.59375, 43619.21484375, 42871.9375, 30516.349609375, 32907.0078125, 41599.7109375, 21804.482421875, 21607.615234375, 57112.26953125, 40662.93359375, 34989.27734375, 54343.9765625, 52764.5859375, 31167.564453125, 39070.9609375, 47230.59375, 37018.05078125, 38778.203125, 28512.91015625, 27252.984375, 42987.33203125, 26270.578125, 24253.88671875, 40682.4296875, 41081.109375, 51537.83984375, 25260.09765625, 64921.359375, 13649.220703125, 50031.4375, 19499.998046875, 27483.662109375, 19638.134765625, 39703.21875, 41357.453125, 24828.607421875, 55624.38671875, 56818.8671875, 44787.83984375, 75056.171875, 46479.01171875, 40996.97265625, 53417.18359375, 29909.45703125, 21538.673828125, 41609.44140625, 35022.06640625, 26955.34375, 44190.3828125, 30243.65625, 23796.41796875, 34811.61328125, 43152.23046875, 51311.85546875, 53467.75, 41293.0859375, 70035.671875, 39494.1171875, 29174.099609375, 58109.79296875, 32986.46875, 27690.654296875, 40554.1328125, 28288.490234375, 37389.99609375, 14594.43359375, 18129.9140625, 35436.28515625, 26497.876953125, 46253.0234375, 39117.265625, 56855.5703125, 55177.7265625, 44436.01953125, 71817.46875, 46895.90234375, 36585.85546875, 58718.1640625, 37862.078125, 16612.62890625, 41212.01171875, 34686.59375, 26125.1171875, 46643.03125, 49484.62890625]\nNN_comp = pd.Series(NN_pred, index = gazoza_test['date'])","dc139826":"NN_ts = pd.DataFrame(NN_comp.groupby(['date'], axis =0, as_index=True).sum())","05ee4fe6":"plt.plot(qty_test, label = \"2018 Test Data\")\nplt.plot(np.exp(forecast_18), label = \"Time Series Forecast\")\nplt.plot(NN_ts, label = \"NN predictions\")\n\nplt.legend(loc='best')\nplt.title(\"2018 Forecast vs 2018 Test\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Quantity Sold\")","be73448b":"from scipy.stats import norm","f08ae76c":"# Plot the Histogram\nplt.figure(figsize=(10, 6), dpi=80)\nplt.hist(qty, bins = 8, edgecolor='black', alpha = 0.6, density = True, label = \"Quantity Sold Data\") \n\n# Plot the PDF.\nxmin_qty, xmax_qty = plt.xlim()\nx_qty = np.linspace(xmin_qty, xmax_qty, 100)\np_qty = norm.pdf(x_qty, np.mean(qty), np.std(qty))\nplt.plot(x_qty, p_qty, 'k', linewidth=2, label = \"Normal Dist\")\ntitle_qty = \"Best Fit for Gazoza Sale Aggregated by Month\"\nplt.legend(loc='best')\nplt.title(title_qty)\n\nplt.show()","9476152c":"# 796533.11111111\nplt.plot(qty_test, label = \"2018 Test Data\")\nplt.axhline(y=np.mean(qty_test['quantity']), label = \"Mean of Test Data\", color = 'gray')\nplt.plot(np.exp(forecast_18), label = \"Time Series Forecast\")\nplt.plot(NN_ts, label = \"NN predictions\")\nplt.axhline(y=758986.05493514, label = \"Newsvendor Model, Cu = 0.3, Co = 0.4\", color = 'red')\n\nplt.legend(loc='best')\nplt.title(\"2018 Forecast vs 2018 Test: Comparing Different Methods\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Quantity Sold\")","22662321":"def cost_function(data, pred, Cu, Co):\n    total_cost = 0\n    for i in range(len(data)):\n        if pred.values[i] > data.values[i]:\n            total_cost = total_cost + Co*(pred.values[i]-data.values[i])\n        else:\n            total_cost = total_cost + Cu*(data.values[i]-pred.values[i])\n    return total_cost","c1f1fd64":"print(\"NN results\")\ncost_function(qty_test, NN_ts, 0.3, 0.4)[0]","39107475":"print(\"TS results\")\ncost_function(qty_test, np.exp(forecast_18), 0.3, 0.4)[0]","63c075ec":"print(\"NV results\")\nNV_list = []\nfor x in range(len(qty_test)):\n    NV_list.append(758986.05493514)\nNV_array = pd.Series(NV_list)\ncost_function(qty_test, NV_array, 0.3, 0.4)[0]","e6426b04":"## Time Series Analysis","fc361369":"Let's assume that we order exactly the amount of the demand forecasted. The cost for each method can be caalcculated as follows","5095541e":"This Time Series Analysis was done with the help of the YouTube channel, edureka!. https:\/\/www.youtube.com\/watch?v=e8Yw4alG16Q","3d23837e":"## Clean Up Features","c4e8669b":"Using the rolling statisitcs, we may assume that the data is not stationary over time. However, we could do Dickey-Fuller test to determine whether this is statistically supported.","68709e2e":"There are multiple brands, but for this task, we will only forcus on the Gazoza brand.","0c607313":"According to the Dickey-Fuller test, the trend in the time series is not statistically significant at a 95% confidence level. We see that the p-value of the test is less than 0.05."}}