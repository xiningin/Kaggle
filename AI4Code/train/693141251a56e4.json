{"cell_type":{"e809e015":"code","0bf5f601":"code","2c3f9a8d":"code","ceeae8bd":"code","19d39f82":"code","d6786d76":"code","59244846":"code","e56bfe7e":"code","ea2c50ed":"code","0d00d931":"code","ca53b722":"code","c9581ab0":"code","7a494790":"code","6fea2b0d":"code","fff0ec62":"code","c02a90f5":"code","7ab6b215":"code","20921eae":"code","8882a8d0":"code","02fb6f97":"code","3237386d":"code","8bdddfa5":"code","765e7091":"code","d082785f":"code","5ef35d2a":"code","0a12d835":"code","dc8ff900":"code","9069085a":"code","7c526bdb":"code","b67fcd12":"code","d1753479":"code","03e58a3d":"code","ca7201da":"code","f4dfd2c8":"code","76264797":"code","6c05f090":"code","d986d2c5":"code","f2f64a27":"code","7d45a260":"code","0c0a8a94":"code","47dcb197":"code","007bc4d0":"code","37dbc909":"code","ccac1ee9":"code","481cacd7":"code","9955b0fb":"code","4bf1d652":"code","ccc8fcc9":"code","d6a5b60f":"code","e9d051ef":"code","1a5a59b5":"code","e8d4d3d9":"code","50838d78":"code","42247c99":"code","817a0c2e":"code","afd0df61":"code","e1818327":"code","f11db3a0":"code","277d477d":"code","8af48471":"code","6e331b38":"code","39368162":"code","bcf47375":"code","54772b49":"code","45fff3c4":"code","425d36ed":"code","e93b3a04":"code","b2ffaac1":"code","52519101":"code","5c3315e9":"code","5c56b9de":"code","6457ea1b":"code","34df7108":"code","00921163":"code","bde4ee36":"code","c1f6d493":"code","d04a0999":"code","b9212100":"code","a273f05d":"code","e7bbc624":"code","57d3b2dd":"code","017c3111":"code","ee8a8c85":"code","e3272adc":"code","94a9c1cb":"code","35672a90":"code","be6bd8d6":"code","3ea482a2":"code","f55ca494":"code","133cec3a":"code","d204b377":"code","1ce73aed":"code","6dd5e827":"code","6e239628":"code","07022451":"code","18e8536d":"code","5c3f29c3":"code","7098946a":"code","1bdc3e27":"code","cf351a82":"code","6178511c":"code","9899dd4a":"code","915937f9":"code","8517d230":"code","2bb1b93a":"code","b34fbadc":"code","22d2a231":"code","ca5b0ad0":"code","8388505b":"code","432fab05":"code","95a7b2ac":"code","9d35ba68":"code","1caaf39f":"code","e1412b4f":"code","a379b18c":"code","92e9a0e1":"code","3c59e3b1":"code","68a3d8e8":"code","4fe22c94":"code","bc8de690":"code","50866b0c":"code","ee38e5a6":"code","911e3f7e":"code","b6f41094":"code","b72cdd21":"code","475997be":"code","5a31ba6a":"code","f11741b3":"code","00289931":"code","3b79184b":"code","076573d6":"code","5a58c76c":"code","11663297":"code","3d7103bc":"code","7daa5be1":"markdown","e5f65941":"markdown","e8511932":"markdown","9d1b4d13":"markdown","10cd7012":"markdown","ca09b2fa":"markdown","ad92785c":"markdown","3b384114":"markdown","4d96c6ba":"markdown","653841c5":"markdown","2b19c364":"markdown","e2d25f61":"markdown","e6df4c78":"markdown","3db11c8a":"markdown","0933bd65":"markdown","2e5840cf":"markdown","78f1336c":"markdown","c73462c7":"markdown","467681ef":"markdown","c9d3fbab":"markdown","bf19854f":"markdown","ac574e90":"markdown","f96528ab":"markdown","a2856da7":"markdown","f6a6ea6d":"markdown","26d1421e":"markdown","112d052b":"markdown","49c4c7b2":"markdown","8c936f37":"markdown","9d2810d6":"markdown","c403b29a":"markdown","25b7df08":"markdown","3f46a714":"markdown","069f02ff":"markdown","670b99ba":"markdown","38103843":"markdown","ae71af01":"markdown","94701db5":"markdown","e063223b":"markdown","6a1cb66b":"markdown","72b3ab28":"markdown","b9d29c9b":"markdown","7e90c7bd":"markdown","48a047bf":"markdown","c2e36ff9":"markdown","00c58db0":"markdown","19974678":"markdown","5bfea808":"markdown","b6d7c446":"markdown","48bd978a":"markdown","3d6bbf6b":"markdown","9b59655a":"markdown","32a013e3":"markdown","addc43f5":"markdown","0d6e6e90":"markdown","5d95888c":"markdown","7f74a81e":"markdown","c134cb94":"markdown","7380517f":"markdown","2de5d323":"markdown","ac7b797a":"markdown","83851910":"markdown","232fe16b":"markdown","5a538b3a":"markdown","30bd0f68":"markdown","3f68ffb2":"markdown","9734e0ab":"markdown","62a0cac4":"markdown","bd76538c":"markdown","b28d9321":"markdown","3374735f":"markdown","9e4b9d90":"markdown","404d4ba1":"markdown"},"source":{"e809e015":"# Ignore warnings\nimport warnings\nwarnings.simplefilter(action='ignore')\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy\nimport graphviz\n\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler, OrdinalEncoder\nfrom category_encoders import BinaryEncoder\nfrom category_encoders import OneHotEncoder as OHE\nfrom sklearn.metrics import  precision_recall_curve, roc_auc_score, confusion_matrix, accuracy_score, recall_score, precision_score, f1_score,auc, roc_curve, r2_score, plot_roc_curve\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression, Perceptron\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn import tree\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nseed = 42","0bf5f601":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain_data = train_df.copy()\ntrain_data.head()","2c3f9a8d":"test_df = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_data = test_df.copy()\ntest_data.head()","ceeae8bd":"print('Number of observations: ', train_data.shape[0])\nprint('Number of variables: ', train_data.shape[1])","19d39f82":"train_data.duplicated().sum()","d6786d76":"# Dataset without 'PassengerId' variable\ntrain_data_without_PassengerId = train_data.loc[:, train_data.columns != 'PassengerId']","59244846":"train_data_without_PassengerId.duplicated().sum()","e56bfe7e":"train_data['Survived'].value_counts()","ea2c50ed":"train_data['Survived'].value_counts().plot.bar(title=\"Histogram of the target variable 'Survived'\")\nplt.show()","0d00d931":"# Generate descriptive statistics for each variable\ntrain_data.describe(include='all').T","ca53b722":"# Data type of each variable\ntrain_data.dtypes","c9581ab0":"# Missing values\ntrain_data.isnull().sum()","7a494790":"# Remove 'Cabin' variable from training dataset\ntrain_data.drop(['Cabin'], axis=1, inplace=True)\ntrain_data.columns","6fea2b0d":"age_mean = train_data['Age'].mean()\ntrain_data['Age'] = train_data['Age'].fillna(age_mean)","fff0ec62":"# Select categorical variables\ntrain_data_categorical_variables = train_data.select_dtypes(include='object')\ntrain_data_categorical_variables.head()","c02a90f5":"for col in train_data_categorical_variables.columns:\n    contingency_table = pd.crosstab(train_data_categorical_variables[col], train_data['Survived'])\n    chi2, pval, dof, expected_matrix = scipy.stats.chi2_contingency(contingency_table)\n    if pval >= 0.05:\n        print(f\"------ Variable '{col}' vs 'Survived' ------\")\n        print(f\"\\nP-Value:{pval:0.2}\\t P-value < 0.05: {pval < 0.05}\\n\")","7ab6b215":"# Remove 'Name' variable from training dataset\ntrain_data.drop(['Name'], axis=1, inplace=True)\ntrain_data.columns","20921eae":"# Select numeric variables\nnumeric_variables = ['int64', 'float64']\ntrain_data_numeric_variables = train_data.select_dtypes(include=numeric_variables)\ntrain_data_numeric_variables.head()","8882a8d0":"# Apply Pearson Correlation between variables and the target variable\nfor col in train_data_numeric_variables.columns:\n    corr, pval = scipy.stats.pearsonr(train_data_numeric_variables[col], train_data['Survived'])\n    if pval >= 0.05:\n        print(f\"Variable: {col}\\nCorrelation: {corr:>3.2f}\\t P-Value: {pval:0.2}\\t P-value < 0.05: {pval < 0.05}\\n\")","02fb6f97":"# # Remove 'PassengerId' and 'SibSp' variables from training dataset\ntrain_data.drop(['PassengerId', 'SibSp'], axis=1, inplace=True)\ntrain_data.columns","3237386d":"# # Select numeric variables\nnumeric_variables = ['int64', 'float64']\ntrain_data_numeric_variables = train_data.select_dtypes(include=numeric_variables)\ntrain_data_numeric_variables.columns","8bdddfa5":"# Check the minimum and maximum value\ntrain_data['Survived'].min(), train_data['Survived'].max()","765e7091":"# Median\ntrain_data['Survived'].median()","d082785f":"# Box Plot\nsns.boxplot(x=train_data['Survived']).set_title(\"Box Plot of variable 'Survived'\")\nplt.show()","5ef35d2a":"# Check the minimum and maximum value\ntrain_data['Pclass'].min(), train_data['Pclass'].max()","0a12d835":"# Box Plot\nsns.boxplot(x=train_data['Pclass']).set_title(\"Box Plot of variable 'Pclass'\")\nplt.show()","dc8ff900":"# Validate number of unique values\ntrain_data['Pclass'].value_counts()","9069085a":"# Check the minimum and maximum value\ntrain_data['Age'].min(), train_data['Age'].max()","7c526bdb":"# Box Plot\nsns.boxplot(x=train_data['Age']).set_title(\"Box Plot of variable 'Age'\")\nplt.show()","b67fcd12":"train_data.loc[train_data['Age'] <= 11, 'Age'] = 0\ntrain_data.loc[(train_data['Age'] > 11) & (train_data['Age'] <= 17), 'Age'] = 1\ntrain_data.loc[(train_data['Age'] > 17) & (train_data['Age'] <= 25), 'Age'] = 2\ntrain_data.loc[(train_data['Age'] > 25) & (train_data['Age'] <= 40), 'Age'] = 3\ntrain_data.loc[(train_data['Age'] > 40) & (train_data['Age'] <= 59), 'Age'] = 4\ntrain_data.loc[ train_data['Age'] > 59, 'Age'] = 5","d1753479":"child = train_data[train_data['Age']==0]['Age'].value_counts()\nadolescent = train_data[train_data['Age']==1]['Age'].value_counts()\nyoung_adult = train_data[train_data['Age']==2]['Age'].value_counts()\nadult = train_data[train_data['Age']==3]['Age'].value_counts()\nmiddle_age_adult = train_data[train_data['Age']==4]['Age'].value_counts()\nsenior = train_data[train_data['Age']==5]['Age'].value_counts()\n\ndf = pd.DataFrame({'': ['<=11', ']11-17]', ']17-25]', ']25-40]', ']40-59]', '>59'], 'Number of Passengers': [int(child), int(adolescent), int(young_adult), int(adult), int(middle_age_adult), int(senior)]})\ndf.index=['child','adolescent', 'young_adult', 'adult', 'middle_age_adult', 'senior']\ndf.plot.bar(x='', y='Number of Passengers', rot=0, color='steelblue')","03e58a3d":"train_data['Age'] = train_data['Age'].astype(int)","ca7201da":"sns.boxplot(x=train_data['Age'])","f4dfd2c8":"# Check the minimum and maximum value\ntrain_data['Parch'].min(), train_data['Parch'].max()","76264797":"# Check the mean value\ntrain_data['Parch'].mean()","6c05f090":"# Missing values\ntrain_data['Parch'].isnull().sum()","d986d2c5":"# Box Plot\nsns.boxplot(x=train_data['Parch']).set_title(\"Box Plot of variable 'Parch'\")\nplt.show()","f2f64a27":"# Validate number of unique values\ntrain_data['Parch'].value_counts()","7d45a260":"# Check the minimum and maximum value\ntrain_data['Fare'].min(), train_data['Fare'].max()","0c0a8a94":"# Box Plot\nsns.boxplot(x=train_data['Fare']).set_title(\"Box Plot of variable 'Fare'\")\nplt.show()","47dcb197":"fare_mean = train_data['Fare'].mean()\nprint(fare_mean\/2)\nprint(fare_mean)\nprint(fare_mean + (fare_mean\/2))\nprint(fare_mean*2)","007bc4d0":"train_data.loc[train_data['Fare'] <= 16, 'Fare'] = 0\ntrain_data.loc[(train_data['Fare'] > 16) & (train_data['Fare'] <= 32), 'Fare'] = 1\ntrain_data.loc[(train_data['Fare'] > 32) & (train_data['Fare'] <= 48), 'Fare'] = 2\ntrain_data.loc[(train_data['Fare'] > 48) & (train_data['Fare'] <= 64), 'Fare'] = 3\ntrain_data.loc[ train_data['Fare'] > 64, 'Fare'] = 4","37dbc909":"low = train_data[train_data['Fare']==0]['Fare'].value_counts()\nmedium_low = train_data[train_data['Fare']==1]['Fare'].value_counts()\nmedium = train_data[train_data['Fare']==2]['Fare'].value_counts()\nmedium_high = train_data[train_data['Fare']==3]['Fare'].value_counts()\nhigh = train_data[train_data['Fare']==4]['Fare'].value_counts()\n\ndf = pd.DataFrame({'': ['Low', 'MediumLow', 'Medium', 'MediumHigh', 'High'], 'Fare': [int(low), int(medium_low), int(medium), int(medium_high), int(high)]})\ndf.index=['low','medium_low', 'medium', 'medium_high', 'high']\ndf.plot.bar(x='', y='Fare', rot=0, color='steelblue')","ccac1ee9":"train_data['Fare'] = train_data['Fare'].astype(int)","481cacd7":"train_data.dtypes","9955b0fb":"train_data['Sex'].value_counts()","4bf1d652":"# Validate amount of unique values\ntrain_data['Sex'].nunique()","ccc8fcc9":"train_data['Sex'] = train_data['Sex'].map({\"male\": 0, \"female\": 1})","d6a5b60f":"train_data['Ticket'].value_counts()","e9d051ef":"# Validate amount of unique values\ntrain_data['Ticket'].nunique()","1a5a59b5":"train_data = train_data.drop(['Ticket'], axis=1)","e8d4d3d9":"train_data['Embarked'] = train_data['Embarked'].map({\"S\": 0, \"C\": 1, \"Q\": 2})","50838d78":"# Missing values\ntrain_data['Embarked'].isnull().sum()","42247c99":"# Fill in missing values with mode value\ntrain_data['Embarked'] = train_data['Embarked'].fillna(train_data['Embarked'].mode()[0])","817a0c2e":"train_data['Embarked'] = train_data['Embarked'].astype(int)","afd0df61":"train_data['Embarked'].value_counts()","e1818327":"# Check type of variables\ntrain_data.dtypes","f11db3a0":"def get_title(x):\n    return x.split(',')[1].split('.')[0].strip()\ntrain_data['Title'] = train_df['Name'].apply(get_title)","277d477d":"train_data['Title'].value_counts()","8af48471":"# Convert categorical variable into numeric\ntrain_data['Title'] = train_data['Title'].map({\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4})","6e331b38":"# Samples with titles different from those previously selected will be filled with the value 0\ntrain_data['Title'] = train_data['Title'].fillna(0)","39368162":"train_data['Title'] = train_data['Title'].astype(int)","bcf47375":"train_data['Title'].value_counts()","54772b49":"# Cria\u00e7\u00e3o de nova vari\u00e1vel\ntrain_data['FamilySize'] = train_df['SibSp'] + train_df['Parch'] + 1","45fff3c4":"train_data = train_data.drop(['Parch'], axis=1)","425d36ed":"train_data['FamilySize'].value_counts()","e93b3a04":"train_df['Cabin'] = train_df['Cabin'].fillna('U')","b2ffaac1":"train_data['Deck'] = train_df['Cabin'].apply(lambda x: x[0])","52519101":"train_data['Deck'] = train_data['Deck'].map({\"U\": 0, \"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"T\": 8})","5c3315e9":"train_data['Deck'].value_counts()","5c56b9de":"train_data.head()","6457ea1b":"# Heat Map\nplt.figure(figsize=(12, 8))\ndf_corr = train_data.corr()\nmask = np.triu(df_corr)\nsns.heatmap(df_corr, cmap=\"coolwarm\", annot=True, square=True, mask=mask)","34df7108":"for col in train_data.columns:\n    corr, pval = scipy.stats.pearsonr(train_data[col], train_data['Survived'])\n    if pval >= 0.05:\n        print(f\"Var: {col}\\nCorrelation: {corr:>3.2f}\\t P-Value: {pval:0.2}\\n\")","00921163":"train_data = train_data.drop(\n        ['Title', 'Fare', 'Deck', 'FamilySize'],\n        axis='columns'\n)","bde4ee36":"train_data.columns","c1f6d493":"train_data.shape","d04a0999":"features = [\"Pclass\", \"Sex\", \"Age\", \"Embarked\"]\ntest_data = test_df[features]\ntest_data","b9212100":"# Missing values\ntest_data.isnull().sum()","a273f05d":"age_mean = test_data['Age'].mean()\ntest_data['Age'] = test_data['Age'].fillna(age_mean)","e7bbc624":"test_data.loc[test_data['Age'] <= 11, 'Age'] = 0\ntest_data.loc[(test_data['Age'] > 11) & (test_data['Age'] <= 17), 'Age'] = 1\ntest_data.loc[(test_data['Age'] > 17) & (test_data['Age'] <= 25), 'Age'] = 2\ntest_data.loc[(test_data['Age'] > 25) & (test_data['Age'] <= 40), 'Age'] = 3\ntest_data.loc[(test_data['Age'] > 40) & (test_data['Age'] <= 59), 'Age'] = 4\ntest_data.loc[test_data['Age'] > 59, 'Age'] = 5","57d3b2dd":"child = test_data[test_data['Age']==0]['Age'].value_counts()\nadolescent = test_data[test_data['Age']==1]['Age'].value_counts()\nyoung_adult = test_data[test_data['Age']==2]['Age'].value_counts()\nadult = test_data[test_data['Age']==3]['Age'].value_counts()\nmiddle_age_adult = test_data[test_data['Age']==4]['Age'].value_counts()\nsenior = test_data[test_data['Age']==5]['Age'].value_counts()\n\ndf_test_data = pd.DataFrame({'': ['<=11', ']11-17]', ']17-25]', ']25-40]', ']40-59]', '>59'], 'Number of Passengers': [int(child), int(adolescent), int(young_adult), int(adult), int(middle_age_adult), int(senior)]})\ndf_test_data.index=['child','adolescent', 'young_adult', 'adult', 'middle_age_adult', 'senior']\ndf_test_data.plot.bar(x='', y='Number of Passengers', rot=0, color='steelblue')","017c3111":"test_data['Age'] = test_data['Age'].astype(int)","ee8a8c85":"# Data type of each variable\ntest_data.dtypes","e3272adc":"test_data['Sex'] = test_data['Sex'].map({\"male\": 0, \"female\": 1})","94a9c1cb":"test_data['Embarked'] = test_data['Embarked'].map({\"S\": 0, \"C\": 1, \"Q\": 2})","35672a90":"# Data type of each variable\ntest_data.dtypes","be6bd8d6":"test_data.head()","3ea482a2":"train_set, test_set = train_test_split(train_data, test_size=0.2, random_state=seed)","f55ca494":"X_train = train_set.drop(['Survived'], axis = 'columns')\ny_train = train_set['Survived']\n\nX_test = test_set.drop(['Survived'], axis = 1)\ny_test = test_set['Survived']","133cec3a":"scaler = MinMaxScaler()","d204b377":"features_names = X_train.columns\n\nX_train = scaler.fit_transform(X_train)\nX_train = pd.DataFrame(X_train, columns = features_names)\n\nX_test = scaler.transform(X_test)\nX_test = pd.DataFrame(X_test, columns = features_names)","1ce73aed":"y_preds_all_survived = np.ones(y_test.shape)","6dd5e827":"accuracy_score(y_test, y_preds_all_survived)","6e239628":"y_preds_all_died = np.zeros(y_test.shape)","07022451":"accuracy_score(y_test, y_preds_all_died)","18e8536d":"# Function to generate graph with AUC curve and ROC curve\ndef auc_roc_plot(y_test, y_preds):\n    fpr, tpr, thresholds = roc_curve(y_test,y_preds)\n    roc_auc = auc(fpr, tpr)\n\n    plt.title('Receiver Operating Characteristic')\n    plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\n    plt.legend(loc = 'lower right')\n    plt.plot([0, 1], [0, 1],'r--')\n    plt.xlim([0, 1])\n    plt.ylim([0, 1])\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')\n    plt.show()","5c3f29c3":"%%time\nlr = LogisticRegression(max_iter=500, solver='lbfgs', random_state=seed, class_weight='balanced')\nparameters = {'C':[0.001, 0.01, 0.1, 1, 10]}\nclf_lr_lbfgs = GridSearchCV(lr, parameters, cv=5).fit(X_train, y_train)","7098946a":"lr_lbfgs_score = clf_lr_lbfgs.score(X_test, y_test)\nlr_lbfgs_score","1bdc3e27":"y_preds = clf_lr_lbfgs.predict_proba(X_test)[:,1]","cf351a82":"fpr, tpr, thresholds = roc_curve(y_test,y_preds)\nlr_lbfgs_roc_auc = auc(fpr, tpr)\nlr_lbfgs_roc_auc","6178511c":"auc_roc_plot(y_test, y_preds)","9899dd4a":"%%time\nlr = LogisticRegression(max_iter=2000, solver='sag', random_state=seed, class_weight='balanced')\nparameters = {'C':[0.001, 0.01, 0.1, 1, 10, 100], 'penalty': ['l2']}\nclf_lr_sag = GridSearchCV(lr, parameters, cv=5).fit(X_train, y_train)","915937f9":"y_preds = clf_lr_sag.predict_proba(X_test)[:,1]","8517d230":"fpr, tpr, thresholds = roc_curve(y_test,y_preds)\nlr_sag_roc_auc = auc(fpr, tpr)\nlr_sag_roc_auc","2bb1b93a":"auc_roc_plot(y_test, y_preds)","b34fbadc":"%%time\nknn = KNeighborsClassifier()\nparameters = {'n_neighbors': range(1, 10, 1)}\nclf_knn_1_10 = GridSearchCV(knn, parameters, cv=5).fit(X_train, y_train)","22d2a231":"y_preds = clf_knn_1_10.predict_proba(X_test)[:,1]","ca5b0ad0":"fpr, tpr, thresholds = roc_curve(y_test,y_preds)\nknn_1_10_roc_auc = auc(fpr, tpr)\nknn_1_10_roc_auc","8388505b":"auc_roc_plot(y_test, y_preds)","432fab05":"# Validate the best number of k to apply to the model\nfor k in range(1, 100, 10):\n    knn = KNeighborsClassifier(n_neighbors = k).fit(X_train, y_train) \n    accuracy = knn.score(X_test, y_test)\n    print('Accuracy for k =' , k , 'is:', accuracy)","95a7b2ac":"%%time\nknn = KNeighborsClassifier()\nparameters = {'n_neighbors':  range(11, 21, 1)}\nclf_knn_11_21 = GridSearchCV(knn, parameters, cv=5).fit(X_train, y_train)","9d35ba68":"y_preds = clf_knn_11_21.predict_proba(X_test)[:,1]","1caaf39f":"fpr, tpr, thresholds = roc_curve(y_test,y_preds)\nknn_11_21_roc_auc = auc(fpr, tpr)\nknn_11_21_roc_auc","e1412b4f":"auc_roc_plot(y_test, y_preds)","a379b18c":"%%time\ntrees = tree.DecisionTreeClassifier(random_state=seed, class_weight='balanced')\nparameters = {'max_depth':[3, 6, 9], 'min_samples_split': [2, 4, 10, 20]}\nclf_tree = GridSearchCV(trees, parameters, cv=5).fit(X_train, y_train)","92e9a0e1":"y_preds = clf_tree.predict_proba(X_test)[:,1]","3c59e3b1":"fpr, tpr, thresholds = roc_curve(y_test,y_preds)\ntree_roc_auc = auc(fpr, tpr)\ntree_roc_auc","68a3d8e8":"auc_roc_plot(y_test, y_preds)","4fe22c94":"%%time\nrf_5_gini = RandomForestClassifier(random_state=seed, max_depth=5, class_weight='balanced', criterion='gini')\nparameters = {'n_estimators':[10, 100, 300]}\nclf_rf_5_gini = GridSearchCV(rf_5_gini, parameters, cv=5).fit(X_train, y_train)","bc8de690":"y_preds = clf_rf_5_gini.predict_proba(X_test)[:,1]","50866b0c":"fpr, tpr, thresholds = roc_curve(y_test,y_preds)\nrf_roc_auc = auc(fpr, tpr)\nrf_roc_auc","ee38e5a6":"auc_roc_plot(y_test, y_preds)","911e3f7e":"X_train.shape","b6f41094":"%%time\nmlp = MLPClassifier(random_state=seed, max_iter=3000)\nparameters = {'hidden_layer_sizes': [(5,), (5, 3), (5, 3, 2)]}\nclf_mlp = GridSearchCV(mlp, parameters, cv=5).fit(X_train, y_train)","b72cdd21":"clf_mlp.best_estimator_","475997be":"y_preds = clf_mlp.predict_proba(X_test)[:,1]","5a31ba6a":"fpr, tpr, thresholds = roc_curve(y_test,y_preds)\nnn_roc_auc = auc(fpr, tpr)\nnn_roc_auc","f11741b3":"auc_roc_plot(y_test, y_preds)","00289931":"%%time\nsvc = SVC(random_state=seed, class_weight='balanced', gamma='scale', probability=True)\nparameters = {'C':[0.1, 10, 100], 'kernel': ['rbf']}\nclf_svc_rbf = GridSearchCV(svc, parameters, cv=5).fit(X_train, y_train)","3b79184b":"y_preds = clf_svc_rbf.predict_proba(X_test)[:,1]","076573d6":"fpr, tpr, thresholds = roc_curve(y_test, y_preds)\nsvm_roc_auc = auc(fpr, tpr)\nsvm_roc_auc","5a58c76c":"auc_roc_plot(y_test, y_preds)","11663297":"models = pd.DataFrame({\n    'Model': ['Logistic Regression', 'KNN', 'Decision Tree', 'Random Forest', 'Neural Networks', 'SVM'],\n    'AUC': [lr_lbfgs_roc_auc, knn_11_21_roc_auc, tree_roc_auc, rf_roc_auc, nn_roc_auc, svm_roc_auc]})\n\nmodels.sort_values(by='AUC', ascending=False)","3d7103bc":"y = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"Age\", \"Embarked\"]\nX = train_data[features]\nX_test = test_data[features]\n\nprint(y)\nprint(X)\nprint(X_test)\n\nrf_5_gini = RandomForestClassifier(random_state=seed, max_depth=5, class_weight='balanced', criterion='gini')\nparameters = {'n_estimators': [10, 100, 300]}\nclf_rf_5_gini = GridSearchCV(rf_5_gini, parameters, cv=5).fit(X_train, y_train)\n\npredictions = clf_rf_5_gini.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_df.PassengerId, 'Survived': predictions})\noutput.to_csv('new_submission_randomforest.csv', index=False)\nprint(\"File successfully created!\")","7daa5be1":"**'PassengerId' and 'SibSp' variables have a P-Value greater than 0.05 and for this reason they must be removed from the dataset.**","e5f65941":"**Compare results of Machine Learning Models**","e8511932":"**With the value of k between 11 and 21, it was possible to obtain an AUC value of ~0.87 <br>\nComparing with the result obtained previously, it is concluded that with the KNN model it was possible to obtain better results.**","9d1b4d13":"**The best AUC value obtained by applying the Logistic Regression model was ~0.86**","10cd7012":"**The variable 'Survived' contains information about the survival or not of each passenger: <br>\n0: The passenger did not survive the disaster <br>\n1: The passenger survived the disaster**","ca09b2fa":"**The Neural Network model obtained a value of ~0.87, which is very close to that obtained by the Random Forest model.**","ad92785c":"**The model with the best AUC value was the Random Forest.**","3b384114":"### Data Preprocessing for testing dataset","4d96c6ba":"**In the Box Plot graph we verify that there are a lot of outliers. To smooth the attribute, the Binning method will be applied, according to prices groups: <br>**\n- **Low**: Up to 16;\n- **Medium-Low**: Greater than 16 to 32;\n- **Medium**: Greater than 32 to 48;\n- **Medium-High**: Greater than 48 up to 64;\n- **High**: Greater than 64.","653841c5":"**The Decision Tree model obtained worse results than the previous ones and for this reason it will not be the best model to be used in this dataset.**","2b19c364":"**Baseline**","e2d25f61":"**'Ticket' variable**","e6df4c78":"**Validate number of unique values of the target variable 'Survived'**","3db11c8a":"**Pearson correlation between all variables**","0933bd65":"**Creating new variables**","2e5840cf":"#### Exploratory Data Analysis and Feature Selection","78f1336c":"**Most of the passengers who traveled on the ship were between 26 and 40 years old.**","c73462c7":"**Dataset snippet after data cleaning, transformation and exploration**","467681ef":"#### Logistic Regression","c9d3fbab":"**Transformation of Categorical to Numerical Variables**","bf19854f":"**In the Box Plot graph we verify that there are outliers. To smooth the attribute, the Binning method will be applied, according to the age of each passenger:**<br>\n- **Child**: Up to 11 years old; <br>\n- **Teenager**: Over 11 to 17 years old; <br>\n- **Young Adult**: Over 17 to 25 years old; <br>\n- **Adult**: Over 25 to 40 years old; <br>\n- **Middle Age Adult**: Over 40 to 59 years old;<br>\n- **Senior**: Over 59 years old.","ac574e90":"You must remove the variable 'FamilySize' from the dataset. The new variable created earlier is not a good predictor.","f96528ab":"**Pearson correlation between variables and the target variable**","a2856da7":"**Load training and test datasets**","f6a6ea6d":"##### Normalization","26d1421e":"Port of embarkation: <br>\nS = Southampton <br>\nC = Cherbourg <br>\nQ = Queenstown <br>\n\nIt was decided to turn 'S' to 0, 'C' to 1 and 'Q' to 2:","112d052b":"**'Sex' variable**","49c4c7b2":"**Note: It is possible to conclude that most passengers traveled in 3rd Class.**","8c936f37":"### Machine Learning Models","9d2810d6":"**New variable: 'Title'**","c403b29a":"**[Numeric variables] - Removal validation**","25b7df08":"**After treating the variables and transforming them into numerical variables, it will then be validated whether it will be necessary to remove variables before applying the Machine Learning models using Pearson Correlation.**","3f46a714":"**'Embarked' variable**","069f02ff":"**[Categorical variables] - Removal validation**","670b99ba":"**The model Random Forest obtained the value of ~0.87. It is the best AUC value obtained.**","38103843":"**It is concluded that most passengers were on board without parents or children.**","ae71af01":"**[Numeric variables] - Outliers Verification and Treatment**","94701db5":"**'Sex' variable**","e063223b":"#### K Nearest Neighbour (KNN)","6a1cb66b":"**New variable: 'Deck'**","72b3ab28":"The variable has a large amount of unique values, which indicates that it will not be a good predictor variable. For this reason it must be removed from the dataset.","b9d29c9b":"**'Survived' variable target**","7e90c7bd":"**'Age' variable: Fill in missing data with mean value**","48a047bf":"**'Fare' variable: Ticket price**","c2e36ff9":"**New variable: 'FamilySize'**","00c58db0":"It was decided to turn 'male' to 0 and 'female' to 1:","19974678":"- The variables 'Title' and 'Sex' have very high correlation (0.61) -> they encode the same information. The 'Title' variable must be removed as it has a lower correlation with the target variable; <br>\n- The variables 'Fare' and 'Pclass' have very high correlation (0.54) -> The variable 'Fare' must be removed; <br>\n- Variables 'Pclass' and 'Deck' have high correlation (-0.57) -> The variable 'Deck' must be removed.","5bfea808":"**'Embarked' variable**","b6d7c446":"**Chi-squared Test: variables are not independent if the null hypothesis is rejected. For the null hypothesis to be rejected, the value of P-Value must be less than 0.05. <br>\nH0 (Null Hypothesis): The two variables are independent.**","48bd978a":"The 'Cabin' variable samples have letters and numbers, and the letter identifies the ship's cabin. <br>\nSome cabins were closer to the lifeboat and passengers who were in certain cabins may have been able to get off the ship first than the rest.","3d6bbf6b":"##### Transformation of Categorical to Numerical Variables","9b59655a":"Let's just consider the titles with more samples: 'Mr', 'Miss', 'Mrs' and 'Master'.","32a013e3":"**Conclusion: most tickets sold were low priced.**","addc43f5":"Conclusion: Most passengers embarked at Southampton port.","0d6e6e90":"By observing the dataset variables we will be able to verify if it is possible to create new variables with information relevant to the problem.","5d95888c":"**'Pclass' variable**","7f74a81e":"In the dataset there is the SibSp attribute that contains the number of siblings or spouse on board and the Parch attribute that indicates the number of parents or children on board. <br>\nWith these two separate attributes it is not possible to validate the size of the family that followed on board, so a new variable 'FamilySize' will be created.","c134cb94":"#### Neural Networks","7380517f":"**Note: The 'Age' variable has 177 missing values that will be filled in with the mean age value.**","2de5d323":"#### Support Vector Machine (SVM)","ac7b797a":"**The variable 'Name' has a value of P-Value greater than 0.05 (the null hypothesis was not rejected). <br>\nThis variable is independent of the target variable and for this reason it should be removed from the dataset because it will not be a good predictive variable.**","83851910":"**Applying the SVM model, it was possible to obtain the AUC value of ~0.82 <br> \nThis value is lower than that obtained by the Random Forest model, which so far is the best model for this dataset.**","232fe16b":"Most of the mathematical models that Machine Learning algorithms use require numerical attributes, so it is very important to perform the conversion of categorical attributes.","5a538b3a":"**'Parch' variable: Number of parents or children on board**","30bd0f68":"**Validate duplicate observations**","3f68ffb2":"#### Random Forests","9734e0ab":"**The variable 'Pclass' contains information about the ticket class: 1st, 2nd or 3rd Class.**","62a0cac4":"The variable 'Name' has the information of the honorific title of the respective passenger. <br> This information could be important and for that reason we will remove the title from this variable and create a new variable 'Title'.","bd76538c":"**Generate file for Kaggle submission (using Random Forest model):**","b28d9321":"#### Decision Trees","3374735f":"**In the training dataset sample, 342 passengers survived and 549 did not survive the disaster. The target variable is an unbalanced variable.**","9e4b9d90":"**Note: The variable 'Cabin' has too many missing values (687), it must be removed.**","404d4ba1":"**'Age' variable: Age of passengers**"}}