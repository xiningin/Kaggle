{"cell_type":{"f19a53f5":"code","a3992bd9":"code","9ddc09cf":"code","b1ae70f2":"code","50a2b452":"code","ef1e96ee":"code","12aa59a5":"code","761bb74f":"code","3649492b":"code","1cb2536d":"code","5b3105de":"code","16026f5b":"code","696f1286":"code","2f00b1de":"code","8e7e3232":"code","61495fe8":"code","d0d5fafc":"code","53131511":"code","3f014136":"code","16142d29":"code","0ec2cb4a":"code","bc397628":"markdown","e082842b":"markdown","66a43537":"markdown","1068e060":"markdown","847dd1db":"markdown"},"source":{"f19a53f5":"import numpy as np \nimport pandas as pd\n\nimport os\n\nfrom PIL import Image\n\nfrom matplotlib import pyplot as plt\nfrom skimage import color\nfrom skimage.feature import hog\nfrom sklearn import svm\nfrom sklearn.metrics import classification_report,accuracy_score","a3992bd9":"# Se crean listas de elementos para \n# entrenar, testear y validar\n\nnormal_train_folders = os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\")\npneumonia_train_folders = os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\")\n\nnormal_test_folders= os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\")\npneumonia_test_folders = os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/test\/PNEUMONIA\")\n\nnormal_val_folders= os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/NORMAL\")\npneumonia_val_folders = os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/PNEUMONIA\")","9ddc09cf":"# Se crean arreglos con las im\u00e1genes\n# redimensionadas en (80,80)\n# Para sanos y neumon\u00eda, para\n# entrenar, testear y validar\n\nnormal_train = np.zeros(len(normal_train_folders), dtype=object)\nfor dirname, _, filenames in os.walk(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\"):\n    for i in range(len(filenames)):\n        img = Image.open(os.path.join(dirname, filenames[i]))\n        img = img.resize((80,80), Image.ANTIALIAS)\n        img = np.array(img)\n        img.reshape((80,80,-1))\n        normal_train[i]=img\n\npneumonia_train=np.zeros(len(pneumonia_train_folders),dtype=object)\nfor dirname, _, filenames in os.walk(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\"):\n    for i in range(len(filenames)):\n        img = Image.open(os.path.join(dirname, filenames[i]))\n        img = img.resize((80,80), Image.ANTIALIAS)\n        img = np.array(img)\n        img.reshape((80,80,-1))\n        pneumonia_train[i]=img\n\nnormal_test=np.zeros(len(normal_test_folders),dtype=object)\nfor dirname, _, filenames in os.walk(\"..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\"):\n    for i in range(len(filenames)):\n        img = Image.open(os.path.join(dirname, filenames[i]))\n        img = img.resize((80,80), Image.ANTIALIAS)\n        img = np.array(img)\n        img.reshape((80,80,-1))\n        normal_test[i]=img        \n\npneumonia_test=np.zeros(len(pneumonia_test_folders),dtype=object)\nfor dirname, _, filenames in os.walk(\"..\/input\/chest-xray-pneumonia\/chest_xray\/test\/PNEUMONIA\"):\n    for i in range(len(filenames)):\n        img = Image.open(os.path.join(dirname, filenames[i]))\n        img = img.resize((80,80), Image.ANTIALIAS)\n        img = np.array(img)\n        img.reshape((80,80,-1))\n        pneumonia_test[i]=img\n        \nnormal_val=np.zeros(len(normal_val_folders),dtype=object)\nfor dirname, _, filenames in os.walk(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/NORMAL\"):\n    for i in range(len(filenames)):\n        img = Image.open(os.path.join(dirname, filenames[i]))\n        img = img.resize((80,80), Image.ANTIALIAS)\n        img = np.array(img)\n        img.reshape((80,80,-1))\n        normal_val[i]=img        \n\npneumonia_val=np.zeros(len(pneumonia_val_folders),dtype=object)\nfor dirname, _, filenames in os.walk(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/PNEUMONIA\"):\n    for i in range(len(filenames)):\n        img = Image.open(os.path.join(dirname, filenames[i]))\n        img = img.resize((80,80), Image.ANTIALIAS)\n        img = np.array(img)\n        img.reshape((80,80,-1))\n        pneumonia_val[i]=img","b1ae70f2":"# Muestra de las im\u00e1genes redimensionadas\nplt.imshow(normal_train[42])","50a2b452":"# Se crean arreglos tanto para las im\u00e1genes\n# de los gradientes \n# como para los atributos que entrega HOG\n\nppc = 8\n\nnormal_hog_train_images = np.zeros(len(normal_train),dtype=object)\nnormal_hog_train_features = np.zeros(len(normal_train),dtype=object)\n\npneumonia_hog_train_images = np.zeros(len(pneumonia_train),dtype=object)\npneumonia_hog_train_features = np.zeros(len(pneumonia_train),dtype=object)\n\nnormal_hog_test_images = np.zeros(len(normal_test),dtype=object)\nnormal_hog_test_features = np.zeros(len(normal_test),dtype=object)\n\npneumonia_hog_test_images = np.zeros(len(pneumonia_test),dtype=object)\npneumonia_hog_test_features = np.zeros(len(pneumonia_test),dtype=object)\n\nnormal_hog_val_images = np.zeros(len(normal_val),dtype=object)\nnormal_hog_val_features = np.zeros(len(normal_val),dtype=object)\n\npneumonia_hog_val_images = np.zeros(len(pneumonia_val),dtype=object)\npneumonia_hog_val_features = np.zeros(len(pneumonia_val),dtype=object)\n\nfor i in range(len(normal_train)):\n    fd, hog_image = hog(normal_train[i], orientations=8, pixels_per_cell=(ppc, ppc),\n                    cells_per_block=(4, 4), visualize=True)\n    normal_hog_train_images[i] = hog_image\n    normal_hog_train_features[i] = fd\n\n    \nfor i in range(len(pneumonia_train)):\n    fd, hog_image = hog(pneumonia_train[i], orientations=8, pixels_per_cell=(ppc, ppc),\n                    cells_per_block=(4, 4), visualize=True)\n    pneumonia_hog_train_images[i] = hog_image\n    pneumonia_hog_train_features[i] = fd\n    \nfor i in range(len(normal_test)):\n    fd, hog_image = hog(normal_test[i], orientations=8, pixels_per_cell=(ppc, ppc),\n                    cells_per_block=(4, 4), visualize=True)\n    normal_hog_test_images[i] = hog_image\n    normal_hog_test_features[i] = fd\n\n    \nfor i in range(len(pneumonia_test)):\n    fd, hog_image = hog(pneumonia_test[i], orientations=8, pixels_per_cell=(ppc, ppc),\n                    cells_per_block=(4, 4), visualize=True)\n    pneumonia_hog_test_images[i] = hog_image\n    pneumonia_hog_test_features[i] = fd\n\nfor i in range(len(normal_val)):\n    fd, hog_image = hog(normal_val[i], orientations=8, pixels_per_cell=(ppc, ppc),\n                    cells_per_block=(4, 4), visualize=True)\n    normal_hog_val_images[i] = hog_image\n    normal_hog_val_features[i] = fd\n\n    \nfor i in range(len(pneumonia_val)):\n    fd, hog_image = hog(pneumonia_val[i], orientations=8, pixels_per_cell=(ppc, ppc),\n                    cells_per_block=(4, 4), visualize=True)\n    pneumonia_hog_val_images[i] = hog_image\n    pneumonia_hog_val_features[i] = fd","ef1e96ee":"# Muestra de los gradientes\nplt.imshow(normal_hog_train_images[42])","12aa59a5":"# Se crean arreglos para los labels\n# donde se asigna 1 para los sanos\n# y 0 para los enfermos\n\nnormal_train_labels = np.array([0 for i in range(len(normal_train))])\npneumonia_train_labels = np.array([1 for i in range(len(pneumonia_train))])\ntrain_labels = np.concatenate((normal_train_labels,pneumonia_train_labels))\n\nnormal_test_labels = np.array([0 for i in range(len(normal_test))])\npneumonia_test_labels = np.array([1 for i in range(len(pneumonia_test))])\ntest_labels = np.concatenate((normal_test_labels,pneumonia_test_labels))\n\nnormal_val_labels = np.array([0 for i in range(len(normal_val))])\npneumonia_val_labels = np.array([1 for i in range(len(pneumonia_val))])\nval_labels = np.concatenate((normal_val_labels,pneumonia_val_labels))","761bb74f":"normal_hog_train_features=normal_hog_train_features.tolist()\npneumonia_hog_train_features=pneumonia_hog_train_features.tolist()","3649492b":"from sklearn.preprocessing import StandardScaler\n\n# Se preprocesan y normalizan los atributos\n# para optimizar la convergencia del modelo\n\nnormal_hog_train_features=normal_hog_train_features.tolist()\npneumonia_hog_train_features=pneumonia_hog_train_features.tolist()\n\nscaler = StandardScaler().fit(normal_hog_train_features+pneumonia_hog_train_features)\nnormal_hog_train_features = scaler.transform(normal_hog_train_features)\npneumonia_hog_train_features = scaler.transform(pneumonia_hog_train_features)","1cb2536d":"from sklearn.svm import SVC\n\ntrain_set = np.vstack((normal_hog_train_features,pneumonia_hog_train_features))\n\nprint(\"Training classifier...\")\n\nclf = SVC(kernel=\"linear\", C=0.1)\nclf.fit(train_set, train_labels)","5b3105de":"normal_hog_test_features=normal_hog_test_features.tolist()\npneumonia_hog_test_features=pneumonia_hog_test_features.tolist()","16026f5b":"# Se preprocesan y normalizan los atributos de testeo\n\nnormal_hog_test_features = scaler.transform(normal_hog_test_features)\npneumonia_hog_test_features = scaler.transform(pneumonia_hog_test_features)","696f1286":"# Set de testeo y se hace la predicci\u00f3n\ntest_X = np.vstack((normal_hog_test_features,pneumonia_hog_test_features))\npred_test = clf.predict(test_X)","2f00b1de":"# Histograma para visualizar resultados\n\nplt.figure(figsize=(10,5))\nplt.hist(test_labels - pred_test)\nplt.yscale('log')\nplt.xlabel('Clase Real - Clase Predicha')","8e7e3232":"# Funci\u00f3n para la matriz de confusi\u00f3n\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.utils.multiclass import unique_labels\n\ndef plot_confusion_matrix(y_true, y_pred, classes,\n                          normalize=False,\n                          title=None,\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if not title:\n        if normalize:\n            title = 'Matriz de confusion normalizada'\n        else:\n            title = 'Matriz de confusion, sin normalizacion'\n\n    # Compute confusion matrix\n    cm = confusion_matrix(y_true, y_pred)\n    # Only use the labels that appear in the data\n    classes = classes[unique_labels(y_true, y_pred)]\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Matriz de confusion normalizada\")\n    else:\n        print('Matriz de confusion, sin normalizacion')\n\n    print(cm)\n\n    fig, ax = plt.subplots(figsize = (8,8))\n    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)\n    ax.figure.colorbar(im, ax=ax)\n    # We want to show all ticks...\n    ax.set(xticks=np.arange(cm.shape[1]),\n           yticks=np.arange(cm.shape[0]),\n           # ... and label them with the respective list entries\n           xticklabels=classes, yticklabels=classes,\n           title=title,\n           ylabel='Etiqueta Real',\n           xlabel='Etiqueta Predicha')\n\n    # Rotate the tick labels and set their alignment.\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n             rotation_mode=\"anchor\", fontsize=15)\n\n    # Loop over data dimensions and create text annotations.\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i in range(cm.shape[0]):\n        for j in range(cm.shape[1]):\n            ax.text(j, i, format(cm[i, j], fmt), fontsize=25,\n                    ha=\"center\", va=\"center\",\n                    color=\"white\" if cm[i, j] > thresh else \"black\")\n            \n    ax.grid(False)\n    fig.tight_layout()\n    return ax","61495fe8":"#np.set_printoptions(precision=2)\n\n# Matriz de confusi\u00f3n no normalizada\nplot_confusion_matrix(test_labels, pred_test, classes=np.array([\"PNEUMONIA\",\"NORMAL\"]), normalize = True,\n                      title='Matriz de confusion, con normalizacion')","d0d5fafc":"# M\u00e9tricas del modelo\n\nfrom sklearn.metrics import classification_report\nprint(classification_report(test_labels, pred_test, target_names=[\"NORMAL\",\"PNEUMONIA\"]))","53131511":"from sklearn.model_selection import cross_val_score\n\n# Creamos un nuevo clasificador para hacer las pruebas de cross-validation\n\ncv_svm = SVC(kernel=\"linear\", C=0.1)\n\n# Calculamos el puntaje tomando 10 subconjuntos del conjunto de entrenamiento\n\nscores = cross_val_score(cv_svm, train_set, train_labels, cv=10, scoring=None)\n\nprint('Cross validation promedio: ', format(scores.mean(), '.3f'))\nprint('Cross validation std:      ', format(scores.std(), '.3f'))","3f014136":"# Histograma para visualizar resultados\n\npred_test = clf.predict(test_X)\nplt.figure(figsize=(10,5))\nplt.hist(test_labels - pred_test)\nplt.yscale('log')\nplt.xlabel('Clase Real - Clase Predicha')","16142d29":"cw = np.arange(0.025,0.4,0.025)\nscores = np.zeros(np.shape(cw))\nstds = np.zeros(np.shape(cw))\n\n\nfor s, n in enumerate(cw):\n  clf = SVC(gamma=\"auto\", kernel=\"linear\", C=n)\n  cv_scores = cross_val_score(clf, train_set, train_labels, cv=5, scoring=\"accuracy\")\n  scores[s] = cv_scores.mean()\n  stds[s] = cv_scores.std()","0ec2cb4a":"import matplotlib.pyplot as plt\n\nplt.fill_between(cw, scores-stds, scores+stds, alpha=0.3)\nplt.plot(cw, scores)\nplt.xlabel('Magnitud de la regularizaci\u00f3n')\nplt.ylabel('Puntaje de Cross-Validation')\nplt.title('Puntaje en funci\u00f3n de la regularizaci\u00f3n)","bc397628":"# Testeando el modelo","e082842b":"#  Preparaci\u00f3n de las im\u00e1genes y atributos de HOG","66a43537":"# Entrenando a un SVM","1068e060":"# Buscando hiperpar\u00e1metros","847dd1db":"# Cross validation"}}