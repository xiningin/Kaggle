{"cell_type":{"70930037":"code","0cd92336":"code","d76ea8b4":"code","891ba198":"code","fc791c97":"code","2604456f":"code","97bbd235":"code","6dc971d7":"code","23ca029f":"code","1809e8ff":"code","6b83aca5":"code","f55d3abf":"code","6f4e49a3":"code","920a9e99":"code","44912b88":"code","8a937a50":"code","f893762e":"code","03f0d515":"code","f9b051cf":"code","f894e559":"code","da367994":"code","59975a5a":"code","0eca2d54":"code","7740cad2":"code","5b08ae1f":"code","9ff0945e":"code","37bc511a":"code","99909916":"code","c5c2fdc0":"code","69845aee":"code","1bb578df":"code","0aa39d43":"code","f5dc2712":"code","0d64c34f":"code","db000940":"code","d0fb23e6":"code","155ac7ec":"code","24692a06":"code","f145898c":"code","f4a0f2a5":"code","eef80db7":"code","68a213df":"code","8a4abff5":"code","0cfbadc7":"code","31237031":"code","7e9db3a2":"code","ab382925":"code","8e89cdaf":"code","6fdab2b5":"code","1f5c03c0":"code","d1bcd3dc":"code","6fbf5bc4":"code","11c61a60":"code","533afefc":"code","0768998d":"code","f2429b47":"code","822a85db":"code","7fe4c5f9":"code","f40adbdf":"code","6c46c4ee":"code","503a5d0e":"code","9f4c45f6":"code","df866852":"code","ec1b8667":"code","49b008b4":"code","22411c82":"code","23efb0ff":"code","9a03fb41":"code","25b0a774":"code","dcf9f8ac":"code","d5490ca3":"code","dd752a2b":"code","f3429a20":"code","8ddb5528":"markdown","957162c6":"markdown","92f787fb":"markdown","ccbcdb1b":"markdown","52eb0bc6":"markdown","6f5e745e":"markdown","23a48bbc":"markdown","ec629c8e":"markdown","5077fdfb":"markdown","0bb2681e":"markdown","eef97218":"markdown","fda19314":"markdown","69342817":"markdown","46409045":"markdown","5586d9ff":"markdown","c9a7baf6":"markdown","0deb9589":"markdown","44df1a1b":"markdown","7fa4be2a":"markdown","12f43741":"markdown","084bc5fe":"markdown","9abdb000":"markdown","2ad06fc2":"markdown","cd025791":"markdown","7fe9e1fc":"markdown","9f46b901":"markdown","962fde79":"markdown","9c864886":"markdown","00ffdd17":"markdown","04a24846":"markdown","241a71e5":"markdown","883ee679":"markdown","4bc742ec":"markdown","ebaebaca":"markdown","225d3ddb":"markdown","ddfbcc88":"markdown","4374e0f5":"markdown","de653b7d":"markdown","2debfca5":"markdown","b9711ec1":"markdown","0a8f094b":"markdown","1ac018d4":"markdown","f3c5e7e0":"markdown","ebb54d69":"markdown","4125aa76":"markdown","1147bcc6":"markdown"},"source":{"70930037":"# Import Packages\nimport pandas as pd              # Data Analysis package\nimport numpy as np               \nimport matplotlib.pyplot as plt  # Data Virtualization package\n%matplotlib inline \nimport seaborn as sns            # Data Virtualization package\nimport warnings                  # Supress Warnings\nwarnings.filterwarnings('ignore')","0cd92336":"# Create dataframe by reading the car price dataset\ncar_details = pd.read_csv('..\/input\/CarPrice_Assignment.csv')","d76ea8b4":"# Read the first 5 observations from the dataframe\ncar_details.head()","891ba198":"# Print the shape of the car_details dataframe\ncar_details.shape","fc791c97":"# Describe car_details dataframe\ncar_details.describe()","2604456f":"# Get the detailed information\ncar_details.info()","97bbd235":"# Split the company name from CarName variable\ncompanyname = car_details['CarName'].apply(lambda name : name.split(' ')[0])","6dc971d7":"# Dropping the CarName variable as it is not needed\ncar_details.drop(columns = {'CarName'}, axis = 1, inplace = True)","23ca029f":"# Adding the companyname as a new variable\ncar_details.insert(loc = 3, column = 'companyname', value = companyname)","1809e8ff":"# Get the list of first 5 observations\ncar_details.head()","6b83aca5":"# Check the unique values in companyname variable\ncar_details['companyname'].unique()","f55d3abf":"# Convert the data into lowercase\ncar_details['companyname'] = car_details['companyname'].str.lower()","6f4e49a3":"# Define a function to rename the spelling mistakes\ndef renameCompanyName(error_data, correct_data):\n  car_details['companyname'].replace(error_data, correct_data, inplace = True)","920a9e99":"# Call renameCompanyName function\nrenameCompanyName('vw','volkswagen')\nrenameCompanyName('vokswagen','volkswagen')\nrenameCompanyName('maxda','mazda')\nrenameCompanyName('porcshce','porsche')\nrenameCompanyName('toyouta','toyota')","44912b88":"# Check the unique values in companyname variable\ncar_details['companyname'].unique()","8a937a50":"# Checking for duplicate values in car_details dataframe\ncar_details.loc[car_details.duplicated()]","f893762e":"# Let's understand the price of the car\nplt.figure(figsize=(15,6)) # Set width and height for the plots\n\nplt.subplot(1,2,1) # Set the rows, columns and their indexing position\nsns.distplot(a = car_details.price)\n\nplt.subplot(1,2,2) # Set the rows, columns and their indexing position\nsns.boxplot(y = car_details.price)","03f0d515":"# Let's see the mean, median and other percentile for the car prices\ncar_details.price.describe(percentiles = [0.25, 0.5, 0.75, 0.85, 0.95, 1])","f9b051cf":"# Let's virtualize the car companies, car types and fuel types\nplt.figure(figsize = (20,6))\n\nplt.subplot(1,3,1)\nplt1 = car_details.companyname.value_counts().plot('bar')\nplt.title('Companies')\nplt1.set(xlabel = 'Car Company', ylabel='Frequency of Car Company')\n\nplt.subplot(1,3,2)\nplt1 = car_details.carbody.value_counts().plot('bar')\nplt.title('Car Type')\nplt1.set(xlabel = 'Car Type', ylabel='Frequency of Car type')\n\nplt.subplot(1,3,3)\nplt1 = car_details.fueltype.value_counts().plot('bar')\nplt.title('Fuel Type')\nplt1.set(xlabel = 'Fuel Type', ylabel='Frequency of fuel type')","f894e559":"# Let's virutalize the engine types\nplt1 = car_details.enginetype.value_counts().plot('bar')\nplt.title('Engine Type')\nplt1.set(xlabel = 'Engine Type', ylabel='Frequency of Engine Type')","da367994":"plt.figure(figsize=(20,6))\n\nplt.subplot(1,3,1)\nplt1 = car_details.groupby('companyname')['price'].mean().sort_values(ascending = False).plot('bar')\nplt1.set(xlabel = 'Car Company', ylabel = 'Average Price')\n\nplt.subplot(1,3,2)\nplt1 = car_details.groupby('enginetype')['price'].mean().sort_values(ascending = False).plot('bar')\nplt1.set(xlabel = 'Engine Type', ylabel = 'Average Price')\n\nplt.subplot(1,3,3)\nplt1 = car_details.groupby('fueltype')['price'].mean().sort_values(ascending = False).plot('bar')\nplt1.set(xlabel = 'Fuel Type', ylabel = 'Average Price')","59975a5a":"plt.figure(figsize=(18,5))\n\nplt.subplot(1,2,1)\nplt1 = car_details.enginelocation.value_counts().sort_values(ascending = False).plot('bar')\nplt1.set(xlabel = 'Engine Location', ylabel = 'Frequency of Engine Location')\n\nplt.subplot(1,2,2)\nplt1 = car_details.groupby('enginelocation')['price'].mean().sort_values(ascending = False).plot('bar')\nplt1.set(xlabel = 'Engine Location', ylabel = 'Average Price')","0eca2d54":"# Calculating the fuel economy by using highwaympg and citympg\ncar_details['fueleconomy'] = (0.45 * car_details['highwaympg']) + (0.55 * car_details['citympg'])","7740cad2":"# Calculating the stroke ratio by using boreratio and stroke\ncar_details['strokeratio'] = car_details['boreratio'] \/ car_details['stroke']","5b08ae1f":"# Categorizing the car companies based on average car price\ncar_details['price'] = car_details['price'].astype('int')\ntemp1 = car_details.copy()\ntemp2 = temp1.groupby('companyname')['price'].mean()\ntemp1 = temp1.merge(temp2.reset_index(), how = 'left', on = 'companyname')\nbins = [0, 10000, 20000, 40000]\ncars_bins = ['Low', 'Medium', 'High']\ncar_details['carsrange'] = pd.cut(temp1['price_y'], bins, right = False, labels = cars_bins)","9ff0945e":"plt.figure(figsize = (15,6))\nplt.title('Fuel Economy vs Price')\nsns.scatterplot(x = car_details['fueleconomy'], y = car_details['price'])\nplt.xlabel('Fuel Economy')\nplt.ylabel('Price')","37bc511a":"plt.figure(figsize=(15,6))\nsns.heatmap(car_details.corr(), annot = True, cmap='YlGnBu')\n","99909916":"categorical_variables = ['symboling', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation',\n                       'enginetype', 'cylindernumber', 'fuelsystem', 'carsrange']\n\ndef dummies(x,df):\n    temp = pd.get_dummies(df[x], drop_first = True)\n    df= pd.concat([df, temp], axis = 1)\n    df.drop([x], axis = 1, inplace = True)\n    return df\n  \nfor variable in categorical_variables:\n   car_details = dummies(variable, car_details)\n","c5c2fdc0":"car_details.shape","69845aee":"car_details.head()","1bb578df":"#Removing car_ID and companyname as it is not required for model building\ncar_details.drop(columns =['car_ID','companyname'], inplace = True)","0aa39d43":"car_details.shape","f5dc2712":"# Importing train_test_split to train the data for model building\nfrom sklearn.model_selection import train_test_split\n\nnp.random.seed(0)\ndf_train, df_test = train_test_split(car_details, train_size = 0.7, test_size = 0.3, random_state = 100)","0d64c34f":"# Use MinMaxScaler to apply scaling\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nnum_vars = ['wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginesize', 'boreratio', 'stroke', 'compressionratio',\n            'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'fueleconomy', 'strokeratio', 'price']\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])","db000940":"df_train.describe()","d0fb23e6":"df_train.head()","155ac7ec":"#Dividing data into X and y variables\ny_train = df_train.pop('price')\nX_train = df_train","24692a06":"#RFE\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","f145898c":"lm = LinearRegression()\nlm.fit(X_train,y_train)\nrfe = RFE(lm, 10)\nrfe = rfe.fit(X_train, y_train)","f4a0f2a5":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","eef80db7":"X_train.columns[rfe.support_]","68a213df":"X_train_rfe = X_train[X_train.columns[rfe.support_]]\nX_train_rfe.head()","8a4abff5":"def buildModel(X,y):\n    X = sm.add_constant(X) #Adding the constant\n    lm = sm.OLS(y,X).fit() # fitting the model\n    print(lm.summary()) # model summary\n    return X\n    \ndef checkVIF(X):\n    vif = pd.DataFrame()\n    vif['Features'] = X.columns\n    vif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n    return(vif)","0cfbadc7":"X_train_new = buildModel(X_train_rfe,y_train)","31237031":"X_train_new = X_train_new.drop(['hardtop'], axis = 1)","7e9db3a2":"X_train_new = buildModel(X_train_new,y_train)","ab382925":"vif_df = X_train_new.drop(['const'], axis = 1)","8e89cdaf":"checkVIF(vif_df)","6fdab2b5":"X_train_new = X_train_new.drop(['curbweight'], axis = 1)","1f5c03c0":"X_train_new = buildModel(X_train_new,y_train)","d1bcd3dc":"X_train_new = X_train_new.drop(['wagon'], axis = 1)","6fbf5bc4":"X_train_new = buildModel(X_train_new,y_train)","11c61a60":"vif_df = X_train_new.drop(['const'], axis = 1)","533afefc":"checkVIF(vif_df)","0768998d":"X_train_new = X_train_new.drop(['horsepower'], axis = 1)","f2429b47":"X_train_new = buildModel(X_train_new,y_train)","822a85db":"X_train_new = X_train_new.drop(['hatchback'], axis = 1)","7fe4c5f9":"X_train_new = buildModel(X_train_new,y_train)","f40adbdf":"X_train_new = X_train_new.drop(['three'], axis = 1)","6c46c4ee":"X_train_new = buildModel(X_train_new,y_train)","503a5d0e":"X_train_new = X_train_new.drop(['dohcv'], axis = 1)","9f4c45f6":"X_train_new = buildModel(X_train_new,y_train)","df866852":"vif_df = X_train_new.drop(['const'], axis = 1)","ec1b8667":"checkVIF(vif_df)","49b008b4":"lm = sm.OLS(y_train,X_train_new).fit()\ny_train_price = lm.predict(X_train_new)","22411c82":"# Plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  \nplt.xlabel('Errors', fontsize = 18) ","23efb0ff":"# Scaling the test data\nnum_vars = ['wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight', 'enginesize', 'boreratio', 'stroke', 'compressionratio',\n            'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'fueleconomy', 'strokeratio', 'price']\ndf_test[num_vars] = scaler.fit_transform(df_test[num_vars])","9a03fb41":"#Dividing into X and y\ny_test = df_test.pop('price')\nX_test = df_test","25b0a774":"# Now let's use our model to make predictions.\nX_train_new = X_train_new.drop('const',axis=1)\n# Creating X_test_new dataframe by dropping variables from X_test\nX_test_new = X_test[X_train_new.columns]\n\n# Adding a constant variable \nX_test_new = sm.add_constant(X_test_new)","dcf9f8ac":"# Making predictions\ny_pred = lm.predict(X_test_new)","d5490ca3":"from sklearn.metrics import r2_score \nr2_score(y_test, y_pred)","dd752a2b":"print(lm.summary())","f3429a20":"# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)              \nplt.xlabel('y_test', fontsize=18)                          \nplt.ylabel('y_pred', fontsize=16)  ","8ddb5528":"**MODEL VIII**","957162c6":"**Problem Statement**\n\nA Chinese automobile company Geely Auto aspires to enter the US market by setting up their manufacturing unit there and producing cars locally to give competition to their US and European counterparts.\n\nThey have contracted an automobile consulting company to understand the factors on which the pricing of cars depends. Specifically, they want to understand the factors affecting the pricing of cars in the American market, since those may be very different from the Chinese market.\n\n\n**Company wants to know**\n\n\n1.   Which variables are significant in predicting the price of a car\n2.   How well those variables describe the price of a car\n\nBased on various market surveys, the consulting firm has gathered a large dataset of different types of cars across the American market.\n\n**Business Goal**\n\nYou are required to model the price of cars with the available independent variables. It will be used by the management to understand how exactly the prices vary with the independent variables. They can accordingly manipulate the design of the cars, the business strategy etc. to meet certain price levels. Further, the model will be a good way for management to understand the pricing dynamics of a new market. \n","92f787fb":"All the features has p-value less than 0.05. Let's check VIF.","ccbcdb1b":"Dropping **three** and it has high p-value.","52eb0bc6":"**Step 6 : Test Train Data Split and Feature Scaling**","6f5e745e":"From the above result, we have spelling mistakes in the companyname variable. The following list shows the words which has spelling mistakes. Words in bold is the correct spelling.\n\n\n1.   **volkswagen** = vokswagen, vw\n2.   **mazda** = maxda\n3.   **porsche** = porcshce\n4.   **toyota** = toyouta\n\n\n","23a48bbc":"price has high correlation for the list of features\n\n\n*   carlength = 0.68\n*   carwidth = 0.76\n*   curbweight = 0.84\n*   enginesize = 0.87\n*   horsepower = 0.81\n\n","ec629c8e":"Dropping **hatchback**. Hence it has high p-value.","5077fdfb":"All the features has good p-value and check for VIF.","0bb2681e":"**dhc** is the most favored engine type for the car companies","eef97218":"**dohcv** has high p-value and hence dropping it.","fda19314":"**horsepower** has high VIF and dropping it.","69342817":"**MODEL IV**","46409045":"**hardtop** has high p-value and dropping it.","5586d9ff":"We have 205 observations in car_details dataframe. Let's describe it.","c9a7baf6":"All the features has good p-value and let's look for VIF.","0deb9589":"**Step 1 : Reading and Understanding the dataset**","44df1a1b":"Let's compare the average prices for car companies and engine type.","7fa4be2a":"\n\n*   There is a significance difference between mean and median of the car prices.\n*   There is a high variance in the car prices whereas 85 % of the car prices falls within 18500 and the remaining 15% ranges between 18500 and 45400.\n\n","12f43741":"**curbweight** has high VIF and dropping it.","084bc5fe":"**Step 3 : Data Virtualization**","9abdb000":"**MODEL I**","2ad06fc2":"There is a negative correlation between fuel economy and price and it is significant","cd025791":"**MODEL V**","7fe9e1fc":"**Step 2 : Data Cleaning and Preparation**","9f46b901":"**wagon** has p-value and dropping this feature.","962fde79":"As a result, there is no duplicated values.","9c864886":"**jaguar, buick, porsche, bmw, volvo** are the top 5 car companies having higher average price.\n\n**dohcv** is the most favored engine type.\n\n**diesel** has the highest average prices than **gas**. Most of the car companies preferred **gas**\nas their fuel type.","00ffdd17":"**Step 5 : Dummy Variables**","04a24846":"**Residual Analysis of Model**","241a71e5":"Evaluation of test data","883ee679":"**toyota** is the most favored car company.\n\n**sedan** is the car type being used by most of the car companies.\n\n**gas** is used mostly than diesel\n","4bc742ec":"Building model using statsmodel, for the detailed statistics","ebaebaca":"**Step 7 : Model Building**","225d3ddb":"**Step 4 : Extracting new features**","ddfbcc88":"**MODEL VI**","4374e0f5":"Error terms seem to be normally distributed, so the assumption on the linear modeling seems to be fulfilled.","de653b7d":"From the distribution plot, we can see that there is right skewed and most of the car prices are below 20000.\n\nIn the box plot, there are outliers which shows some of the car prices are significantly higher.","2debfca5":"Features **High, carwidth** and **rear** has good p-value and good VIF.\n\nHigh represents the car companies which has high average car price.\n\ncarwidth represents the width of the car.\n\nrear represents the engine location.","b9711ec1":"**MODEL II**","0a8f094b":"**Step 9 : Prediction and Evaluation**","1ac018d4":"**front** is the most favored engine location used by most of the car companies.\n**rear** has the highest average price then **front**.","f3c5e7e0":"**MODEL III**","ebb54d69":"**MODEL VII**","4125aa76":"**Virtualize the categorical variables**","1147bcc6":"For test data and train data, R-squrared values are 0.83 and 0.86 respectively.\n\nAdjusted R-squared value for train data is 0.86.\n\np-values for all the features has less than 0.05 and it is statistically significant.\n\nHence, 86% of variance explained. Prob (F-statistic) has 9.90e-60 (approx. 0.0) - Model fit is significant."}}