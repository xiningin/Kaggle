{"cell_type":{"5fd97f47":"code","087fbcbd":"code","a8a3c320":"code","e87734dd":"code","ca963bef":"code","6539890c":"code","28b3f5fb":"code","bd83a62d":"code","e17c0b00":"code","1c9a84d3":"code","674b9d5a":"code","d79b2200":"code","3b7f3657":"code","7937242c":"code","f015593e":"code","ff01bb75":"code","383c99a5":"code","75741609":"code","20c7a55a":"code","9d990c0e":"markdown","66e3bd5d":"markdown"},"source":{"5fd97f47":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nimport matplotlib as mpl\nimport matplotlib.pylab as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n\nfrom tqdm import tqdm_notebook\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold, StratifiedKFold","087fbcbd":"#import xgboost as xgb\nimport lightgbm as lgb","a8a3c320":"from sklearn import preprocessing as pp \nfrom scipy.stats import pearsonr \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold \nfrom sklearn.metrics import log_loss \nfrom sklearn.metrics import precision_recall_curve, average_precision_score \nfrom sklearn.metrics import roc_curve, auc, roc_auc_score\nfrom sklearn.metrics import confusion_matrix, classification_report ","e87734dd":"DATA_DIR  = os.path.join('\/kaggle\/input\/lish-moa')\nTRAIN_FEATURE_FILE = os.path.join(DATA_DIR, 'train_features.csv')\nTEST_FEATURE_FILE = os.path.join(DATA_DIR, 'test_features.csv')\n\nTRAIN_TRAGET_FILE = os.path.join(DATA_DIR, 'train_targets_scored.csv')\nSUBMISSION_FILE = os.path.join(DATA_DIR, 'sample_submission.csv')","ca963bef":"train_feat = pd.read_csv(TRAIN_FEATURE_FILE)","6539890c":"train_target = pd.read_csv(TRAIN_TRAGET_FILE)","28b3f5fb":"y_columns = train_target.drop(columns='sig_id', axis=0)","bd83a62d":"test_feat = pd.read_csv(TEST_FEATURE_FILE)","e17c0b00":"train_feat.at[train_feat['cp_type'].str.contains('ctl_vehicle'),train_feat.filter(regex='-.*').columns] = 0.0\ntest_feat.at[test_feat['cp_type'].str.contains('ctl_vehicle'),test_feat.filter(regex='-.*').columns] = 0.0  \n\nfor feature in ['cp_type', 'cp_dose']:\n    le = LabelEncoder()\n    le.fit(list(train_feat[feature].astype(str).values) + list(test_feat[feature].astype(str).values))\n    train_feat[feature] = le.transform(list(train_feat[feature].astype(str).values))\n    test_feat[feature] = le.transform(list(test_feat[feature].astype(str).values))   \n","1c9a84d3":"params_lightGB = {\n    'num_leaves': 491,\n    'min_child_weight': 0.03,\n    'feature_fraction': 0.3,\n    'bagging_fraction': 0.4,\n    'min_data_in_leaf': 106,\n    'objective': 'binary',\n    'max_depth': -1,\n    'learning_rate': 0.01,\n    \"boosting_type\": \"gbdt\",\n    \"bagging_seed\": 11,\n    \"metric\": 'binary_logloss',\n    \"verbosity\": 0,\n    'reg_alpha': 0.4,\n    'reg_lambda': 0.6,\n    'random_state': 2020\n}","674b9d5a":"skf = StratifiedKFold(n_splits=5, random_state=2020, shuffle=True)","d79b2200":"sub = pd.read_csv(SUBMISSION_FILE)","3b7f3657":"top_feats = [  0,   1,   2,   3,   5,   6,   8,   9,  10,  11,  12,  14,  15,\n        16,  18,  19,  20,  21,  23,  24,  25,  27,  28,  29,  30,  31,\n        32,  33,  34,  35,  36,  37,  39,  40,  41,  42,  44,  45,  46,\n        48,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,\n        63,  64,  65,  66,  68,  69,  70,  71,  72,  73,  74,  75,  76,\n        78,  79,  80,  81,  82,  83,  84,  86,  87,  88,  89,  90,  92,\n        93,  94,  95,  96,  97,  99, 100, 101, 103, 104, 105, 106, 107,\n       108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\n       121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134,\n       135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,\n       149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 163, 164,\n       165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 180,\n       181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195,\n       197, 198, 199, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213,\n       214, 215, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230,\n       231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245,\n       246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260,\n       261, 263, 265, 266, 268, 270, 271, 272, 273, 275, 276, 277, 279,\n       282, 283, 286, 287, 288, 289, 290, 294, 295, 296, 297, 299, 300,\n       301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315,\n       316, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331,\n       332, 333, 334, 335, 338, 339, 340, 341, 343, 344, 345, 346, 347,\n       349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362,\n       363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377,\n       378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391,\n       392, 393, 394, 395, 397, 398, 399, 400, 401, 403, 405, 406, 407,\n       408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422,\n       423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435,\n       436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450,\n       452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465,\n       466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482,\n       483, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 500, 501,\n       502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 516, 517,\n       518, 519, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533,\n       534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547,\n       549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563,\n       564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 580,\n       581, 582, 583, 586, 587, 590, 591, 592, 593, 595, 596, 597, 598,\n       599, 600, 601, 602, 603, 605, 607, 608, 609, 611, 612, 613, 614,\n       615, 616, 617, 619, 622, 623, 625, 627, 630, 631, 632, 633, 634,\n       635, 637, 638, 639, 642, 643, 644, 645, 646, 647, 649, 650, 651,\n       652, 654, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668,\n       669, 670, 672, 674, 675, 676, 677, 678, 680, 681, 682, 684, 685,\n       686, 687, 688, 689, 691, 692, 694, 695, 696, 697, 699, 700, 701,\n       702, 703, 704, 705, 707, 708, 709, 711, 712, 713, 714, 715, 716,\n       717, 723, 725, 727, 728, 729, 730, 731, 732, 734, 736, 737, 738,\n       739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751,\n       752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765,\n       766, 767, 769, 770, 771, 772, 774, 775, 780, 781, 782, 783, 784,\n       785, 787, 788, 790, 793, 795, 797, 799, 800, 801, 805, 808, 809,\n       811, 812, 813, 816, 819, 820, 821, 822, 823, 825, 826, 827, 829,\n       831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845,\n       846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 860, 861, 862,\n       864, 867, 868, 870, 871, 873, 874]","7937242c":"X_train = train_feat.drop(columns=['sig_id'])\nX_test = test_feat.drop(columns=['sig_id'])\n\n# get top_feat    \nX_train = X_train.iloc[:, top_feats]\nX_test = X_test.iloc[:, top_feats]    \n\nprint(X_train.head())\nprint(X_test.head())","f015593e":"from sklearn.decomposition import PCA\n\nn_components = 600\nwhiten = False\nrandom_state = 2020\n\npca = PCA(n_components=n_components, whiten=whiten, random_state=random_state)\n\nX_train_PCA = pca.fit_transform(X_train)\nX_train_PCA = pd.DataFrame(data=X_train_PCA, index=X_train.index)\n\nX_train_PCA = X_train_PCA[[0, 1, 2]]\n\nX_test_PCA = pca.transform(X_test)\nX_test_PCA = pd.DataFrame(data=X_test_PCA, index=X_test.index)\n\nX_test_PCA = X_test_PCA[[0, 1, 2]]","ff01bb75":"X_train = pd.concat([X_train, X_train_PCA], axis=1).copy()\nX_test = pd.concat([X_test, X_test_PCA], axis=1).copy()","383c99a5":"for i, column in enumerate(y_columns.columns):\n\n    y_train = train_target[column]\n    # y_test = ###\n    \n    trainingScores = []\n    cvScores = []\n        \n    print('                               ')\n    print('#######################################')\n    print('### start run ', column, ' index ', i )\n           \n    preds = np.zeros(test_feat.shape[0])\n    oof = np.zeros(X_train.shape[0])\n           \n    for train_idx, val_idx in skf.split(X_train, y_train):\n\n\n        X_train_fold, X_val_fold = X_train.iloc[train_idx,:], X_train.iloc[val_idx,:]\n        y_train_fold, y_val_fold = y_train.iloc[train_idx], y_train.iloc[val_idx]\n\n\n        lgb_train = lgb.Dataset(X_train_fold, y_train_fold)\n        lgb_eval = lgb.Dataset(X_val_fold, y_val_fold, reference=lgb_train)\n        gbm = lgb.train(params_lightGB, lgb_train, 10000, valid_sets = [lgb_train, lgb_eval], verbose_eval=0, early_stopping_rounds=30)\n        \n        #loglossTraining = log_loss(y_train_fold, gbm.predict(X_train_fold, num_iteration=gbm.best_iteration), labels=[1,0])\n        #trainingScores.append(loglossTraining)\n\n    \n        loglossCV = log_loss(y_val_fold, gbm.predict(X_val_fold, num_iteration=gbm.best_iteration), labels=[1,0])       \n        cvScores.append(loglossCV)\n\n        preds += gbm.predict(X_test) \/ skf.n_splits\n\n        oof[val_idx] = gbm.predict(X_train.iloc[val_idx])\n        \n        #print('Training Log Loss: ', loglossTraining)\n        #print('CV Log Loss: ', loglossCV)\n            \n    loss = log_loss(y_train, oof)\n    sub[column] = preds\n    \n    print('CV Log Loss: ' , loss)\n    \n    #print('Training Log Loss: ', trainingScores)\n    #print('CV Log Loss: ', cvScores)","75741609":"sub.to_csv('submission.csv', index=False) ","20c7a55a":"print('done ...')","9d990c0e":"from https:\/\/www.kaggle.com\/amanmishra4yearbtech\/moa-keras-multilabel-neural-network-v-2-0\/notebook","66e3bd5d":"This notebook was written for beginners.  \nModel : lightgbm"}}