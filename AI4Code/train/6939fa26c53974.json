{"cell_type":{"a2be4acc":"code","b858130d":"code","93847fff":"code","1233e862":"code","47322495":"code","dabf08a4":"code","9e4f3d19":"code","4fe51b32":"code","5d6c12c8":"code","057ef787":"code","5cdbd666":"code","23fb8847":"code","382a4022":"code","5ad1d136":"code","f39730f6":"code","c0c3a12a":"code","bbd53645":"code","24a4357d":"code","b46552e1":"code","9b4d09a6":"code","11f20231":"code","988609f7":"code","4409a3d4":"code","ab341432":"code","c295cece":"code","9580442e":"markdown","524bfafe":"markdown","3ccc369c":"markdown","0aeea369":"markdown","5d5563bd":"markdown","e146f98e":"markdown","dafa1882":"markdown","f327b0e6":"markdown","c6a41162":"markdown","f6ff1d8b":"markdown","588839fa":"markdown","7e1b1862":"markdown","5adc9b27":"markdown","fcdcb925":"markdown","c36968f4":"markdown"},"source":{"a2be4acc":"# Necessary libraries to start with\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\n\n\n\n#Make sure data files are there\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b858130d":"#Loading in training data\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n\n#Check data\ntrain_data.head()","93847fff":"#Load test_data\n\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\n#Check data, should be without survived column\ntest_data.head()","1233e862":"#See mean, std, min, max of current train_data\nprint(train_data.describe())","47322495":"#Check for any missing data\nmissingDataTrain = train_data.isna().sum()\nprint(missingDataTrain)","dabf08a4":"#See hist of Age with missing data\nplt.hist(train_data['Age'])\nplt.show()","9e4f3d19":"#Fill missing age data as it could provide as another feature to be trained on\ntrain_data['Age'].fillna(method = 'pad', inplace = True)\n\nplt.hist(train_data['Age'])\nplt.show()","4fe51b32":"#Verify the missing age has been filled\nmissingDataTrain = train_data.isna().sum()\nprint(missingDataTrain)","5d6c12c8":"#Repeat the same process for test data\nprint(test_data.describe())","057ef787":"#Check for any missing data\nmissingDataTest = test_data.isna().sum()\nprint(missingDataTest)","5cdbd666":"#Fill missing age data as it could provide as another feature to be trained on\ntest_data['Age'].fillna(method = 'pad', inplace = True)\ntest_data['Fare'].fillna(method = 'pad', inplace = True)","23fb8847":"#Verify the missing age has been filled\nmissingDataTest = test_data.isna().sum()\nprint(missingDataTest)","382a4022":"#Finding unique values and occurences\nprint(train_data.PassengerId.value_counts())\nprint(train_data.Pclass.value_counts())\nprint(train_data.Sex.value_counts())\nprint(train_data.Age.value_counts())\nprint(train_data.SibSp.value_counts())\nprint(train_data.Parch.value_counts())\nprint(train_data.Fare.value_counts())","5ad1d136":"#See correlation between features\nfeatures1 = ['PassengerId', 'Pclass', 'Age','Sex','Survived']\n#print(train_data[features1].corr())\nprint(pd.get_dummies(train_data[features1]).corr())\nfeatures2 = ['PassengerId', 'SibSp', 'Parch', 'Fare', 'Survived']\nprint(train_data[features2].corr())","f39730f6":"#Hist of specific information\nplt.figure(figsize =(20,4))\nplt.subplot(141)\nplt.hist(train_data['Age'])\nplt.xlabel('Age')\n\nplt.subplot(142)\nplt.hist(train_data['Fare'])\nplt.xlabel('Fare')\n\nplt.subplot(143)\nplt.scatter(train_data['Age'],train_data['Fare'])\nplt.xlabel('Age')\nplt.ylabel('Fare')\n\nplt.subplot(144)\nplt.hist(train_data['Parch'])\nplt.xlabel('Parch')\nplt.suptitle('Information Graphing')\nplt.show()\n\n","c0c3a12a":"#Get Mean, STD, count, min and max for train data after the age data has been filled\nprint(train_data.describe())","bbd53645":"# See survival percentage for women\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","24a4357d":"#See survival percentage for men\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","b46552e1":"from sklearn import neighbors\n\nfeatures = [\"Sex\", \"Parch\", \"Fare\"]\n\ny = train_data[\"Survived\"]\nX = pd.get_dummies(train_data[features])\n\n\nX_train, X_test, y_train, y_test = train_test_split( \n                        X,y,test_size = 0.30, random_state = 42) \n\nknn = neighbors.KNeighborsClassifier(n_neighbors=6)\nknn.fit(X_train, y_train)\npredictions = knn.predict(X_test)\n\n#output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\n#output.to_csv('submission.csv', index=False)\n#print(\"Your submission was successfully saved!\")","9b4d09a6":"print(classification_report(y_test, predictions)) ","11f20231":"# We set random_state=42 for reproducibility \n\ny = train_data[\"Survived\"]\nX = pd.get_dummies(train_data[features])\n\nfeatures = [\"Sex\", \"Parch\", \"Fare\"]\n\nX_train, X_test, y_train, y_test = train_test_split( \n                        X,y,test_size = 0.30, random_state = 42)\n\nparameters = {'alpha':[0.00001, 0.0001, 0.001, 0.01, 0.1, 1], \n             'loss':['hinge', 'log'], 'penalty':['l1','l2']}\n\nlinear_classifier = SGDClassifier(random_state=42)\n\nsearchModel = GridSearchCV(linear_classifier, parameters, cv=10)\n\nsearchModel.fit(X_train, y_train)\n\npredictions = searchModel.predict(X_test)","988609f7":"print(\"Best CV params\", searchModel.best_params_) #Show the params with the best results\nprint(\"Best CV accuracy\", searchModel.best_score_)#Show the best accuracy from the best params\nprint(\"Test accuracy of best grid search hypers:\", searchModel.score(X_test, y_test)) # Show test accuracy\nprint(classification_report(y_test, predictions)) #Show precision, recall, and accuracy","4409a3d4":"from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\n\n# We set random_state=42 for reproducibility \n\ny = train_data[\"Survived\"]\nX = pd.get_dummies(train_data[features])\n\nfeatures = [\"Sex\", \"Parch\", \"Fare\"]\n\nX_train, X_test, y_train, y_test = train_test_split( \n                        X,y,test_size = 0.30, random_state = 42)\n\n# Create Decision Tree classifer object\nclf = DecisionTreeClassifier()\n\n# Train Decision Tree Classifer\nclf = clf.fit(X_train,y_train)\n\n#Predict the response for test dataset\npredictions = clf.predict(X_test)","ab341432":"print(classification_report(y_test, predictions))","c295cece":"from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\n\nfeatures = [\"Sex\", \"Parch\", \"Fare\"]\n\ny = train_data[\"Survived\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\n\n# Create Decision Tree classifer object\nclf = DecisionTreeClassifier()\n\n# Train Decision Tree Classifer\nclf = clf.fit(X,y)\n\n#Predict the response for test dataset\npredictions = clf.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","9580442e":"## SGDClassifier","524bfafe":"### Building Model","3ccc369c":"## Decision Trees","0aeea369":"### Evaluating Model","5d5563bd":"## Nearest Neighbor Classifier","e146f98e":"# Exploratory Data Anaylsis","dafa1882":"# Generate Submission Data Using Best Model","f327b0e6":"# Loading Train and Test Data","c6a41162":"# Summary of what was gathered\n* Women tend to have a strong correlation to survival\n* Women had a higher percentage of survival compared to men\n* Parch, Fare,Age, had correlations to survival, potential features to consider\n* The other columns of data did not have strong correlations or relevant data\n","f6ff1d8b":"# Models","588839fa":"# Evaluation Summary\n* SGDClassifier and Decision Trees show similar accuracy with Decision Tree slightly getting a upper hand\n* Knn neighbors performed the worst out of the three models\n* SGDClassifier is trained with GridSearch CV","7e1b1862":"### Evaluating Model","5adc9b27":"### Evaluating Model","fcdcb925":"### Building Model","c36968f4":"### Building Model"}}