{"cell_type":{"88874252":"code","d3045b98":"code","e7e1f21c":"code","f8ab9ffc":"code","6a40cdeb":"code","e4a393e3":"code","d99e5355":"code","ecacdaa6":"code","d16fc314":"code","c3bc110e":"code","dc246821":"code","0c58fbe0":"code","e3b7c864":"code","a7dc355a":"code","35efc334":"code","57c122e9":"code","1e96aa93":"code","62d48843":"code","d277d4af":"code","fb2b85d2":"code","4c8b725b":"code","612bb17a":"code","bffd4f8d":"code","8ac83c02":"code","4dc2036e":"code","a5c8fad5":"code","54c99b99":"code","9ca563bc":"code","8dbe20e2":"code","62385a04":"code","cfbb232f":"code","8425105d":"code","8c94ad48":"code","d2adde49":"code","67c6ec28":"code","025b9ba4":"code","961ab572":"code","7edef706":"code","df303eae":"code","ba9eb60a":"code","affe52fa":"code","7f4bbbd7":"code","0a73935c":"code","97b225d7":"code","4933143b":"code","3155404d":"code","80569ff8":"code","e2a5bd4f":"markdown","fd9e8519":"markdown","c8484385":"markdown","34cf8ab6":"markdown","0d0b0113":"markdown","a23c78c3":"markdown","d6cd9edf":"markdown","228aafdc":"markdown","7bdd70b7":"markdown","fdad3b59":"markdown"},"source":{"88874252":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # for plotting\nfrom matplotlib import colors\nfrom matplotlib.ticker import PercentFormatter\nimport seaborn as sns\nimport missingno as msno\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n","d3045b98":"\n\ntrain_csv = pd.read_csv('..\/input\/train.csv')\ntest_csv = pd.read_csv('..\/input\/test.csv')\n\nfull = train_csv.append( test_csv , ignore_index = True )\n\n\ntrain = full[:891]\ntest= full[891:]\n\nprint ('Datasets:' , 'full:' , full.shape , 'titanic:' , full.shape)","e7e1f21c":"test.head(10)","f8ab9ffc":"train.head(30)","6a40cdeb":"train.shape","e4a393e3":"train.dtypes","d99e5355":"full.isnull().any().count()","ecacdaa6":"train.describe()","d16fc314":"fig, ax = plt.subplots(figsize=(8,8)) \nax1 = sns.heatmap(full.isnull(), cbar=False)","c3bc110e":"msno.heatmap(train)","dc246821":"null_columns = train.columns[train.isnull().any()]\ntrain[null_columns].isnull().sum()","0c58fbe0":"full = full.drop(labels='Cabin',  axis=1)","e3b7c864":"full.head()","a7dc355a":"full.groupby(['Sex'])['Sex'].count().plot.pie()","35efc334":"full.groupby(['Embarked'])['Embarked'].count().plot.pie()","57c122e9":"full.groupby(['Pclass'])['Pclass'].count().plot.pie()","1e96aa93":"train.groupby(['Survived'])['Survived'].count().plot.pie()","62d48843":"full.groupby(['Parch'])['Parch'].count().plot.pie()","d277d4af":"full_age = full['Age'].dropna().astype(int)\nf, axes = plt.subplots( figsize=(7, 7), sharex=True)\nsns.despine(left=True)\n\nsns.distplot(full_age, color=\"b\", bins=40)","fb2b85d2":"#survived = 'survived'\n#not_survived = 'not survived'\n\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10, 4))\n\n\nwomen = full[full['Sex']=='female']\nmen = full[full['Sex']=='male']\n\n\nax = sns.distplot(women[women['Survived']==1].Age.dropna(), bins=20, label ='survived', ax = axes[0], kde=False)\nax = sns.distplot(women[women['Survived']==0].Age.dropna(), bins=40, label ='not survived', ax = axes[0], kde=False)\nax.legend()\nax.set_title('Female')\n\n\nax = sns.distplot(men[men['Survived']==1].Age.dropna(), bins=20, label = 'survived', ax = axes[1], kde = False)\nax = sns.distplot(men[men['Survived']==0].Age.dropna(), bins=40, label = 'not survived', ax = axes[1], kde = False)\nax.legend()\n_ = ax.set_title('Male')","4c8b725b":"full['Age'].fillna(full['Age'].mean(), inplace=True)","612bb17a":"sex = pd.Series( np.where( full.Sex == 'male' , 1 , 0 ) )\nfull.Sex = sex","bffd4f8d":"full.Sex.head()","8ac83c02":"names = full['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\nnames \n\n","4dc2036e":"titles = pd.get_dummies( names )\ntitles.head()","a5c8fad5":"embarked = pd.get_dummies( full.Embarked , prefix='Titl' )\nembarked.head()","54c99b99":"embarked = pd.get_dummies( full.Embarked , prefix='Embarked' )\nembarked.head()","9ca563bc":"pclass = pd.get_dummies( full.Pclass , prefix='Pclass' )\npclass.head()","8dbe20e2":"full.isnull().sum()","62385a04":"full['Fare'].fillna(full['Fare'].mean(), inplace=True)","cfbb232f":"full['Embarked'].fillna(1, inplace=True)\nfull.isnull().sum()\n#full.head()\n#train = train.dropna()","8425105d":"corr = train.corr()\nf , ax = plt.subplots( figsize =( 12 , 10 ) )\ncmap = sns.diverging_palette( 220 , 10 , as_cmap = True )\nf = sns.heatmap(corr, square=True, cbar_kws={ 'shrink' : .9 }, ax=ax, annot = True, annot_kws = {'fontsize':12})","8c94ad48":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom learntools.core import *\n\ntrain.head()","d2adde49":"y = train.Survived","67c6ec28":"full_X = pd.concat([embarked, pclass, titles, full['Age'], sex, full['Fare'], full['SibSp']], axis=1 )\nfull_X.head()","025b9ba4":"train_Xval = full_X[:891]\ntest_X = full_X[891:]","961ab572":"train_X, val_X, train_y, val_y = train_test_split(train_Xval, y, random_state=1, train_size =.8)","7edef706":"#d_model = DecisionTreeClassifier(random_state=1)\nd_model = RandomForestClassifier(random_state=1)","df303eae":"d_model.fit(train_X, train_y)","ba9eb60a":"val_predictions = d_model.predict(val_X)\nval_predictions","affe52fa":"print (d_model.score( train_X , train_y ) ,d_model.score( val_X , val_y ))","7f4bbbd7":"test_Y = d_model.predict( test_X )\n#test_Y.astype(int)","0a73935c":"passenger_id = full[891:].PassengerId\npassenger_id.head()","97b225d7":"test_Y.shape","4933143b":"final = pd.DataFrame( { 'PassengerId': passenger_id , 'Survived': test_Y } )\n","3155404d":"final = final.astype(int)\nfinal.head()","80569ff8":"final.to_csv( 'titanic_pred.csv' , index = False )","e2a5bd4f":"_______\n","fd9e8519":"# Modeling","c8484385":" ## **Category variable to num**","34cf8ab6":"_____\n## **1) Data Exploring**","0d0b0113":"_____\n","a23c78c3":"**Blank values ?**\n\nCabin, Age, Embarked features contain a number of null values.","d6cd9edf":"**Credit to :  Helge Bjorland & Stian Eide for they tutorial which helped me **","228aafdc":"**Categorical:**  Survived, Sex, and Embarked. Ordinal: Pclass.\n\n**Continous:**  Age, Fare. Discrete: SibSp, Parch.","7bdd70b7":"_____\n## **2) Data Exploring**","fdad3b59":"______"}}