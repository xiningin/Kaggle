{"cell_type":{"8cddd631":"code","cc2bdd2d":"code","7711316d":"code","04b15c40":"code","72b25fa5":"code","c24b2d7e":"code","0553c026":"code","d47e490a":"code","2f165329":"code","bf56365b":"code","702a6a7b":"code","fdfa9124":"code","0f51600c":"code","e954bf0a":"code","d235e5cc":"code","47e043da":"code","a89f0b6c":"code","a5e56d91":"code","9addc11e":"code","717801ab":"code","286ec4fb":"code","fafc85a0":"code","9aa660ac":"code","cc8858b2":"code","51a2bf60":"code","b4661dbf":"code","f2c748fa":"code","8df18694":"code","8c4ccc08":"code","ff357537":"code","43728520":"code","d9d76687":"code","40240915":"code","171e317e":"code","0eb52cbc":"code","50705b85":"code","ca62a1a7":"markdown","65c14901":"markdown","15470785":"markdown","beb1ff44":"markdown","b1713b93":"markdown","525fc1be":"markdown","c186dc20":"markdown","b303404a":"markdown"},"source":{"8cddd631":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cc2bdd2d":"df=pd.read_csv(\"..\/input\/covid19-data\/owid-covid-data.csv\")","7711316d":"df.head()","04b15c40":"df.info()","72b25fa5":"df[df[\"location\"]==\"World\"].index","c24b2d7e":"# drop world and International column because the world and International  contains total data, which disrupts our visualization\ndf.drop(df.loc[df[\"location\"]==\"World\"].index,inplace=True)\ndf.drop(df.loc[df[\"location\"]==\"International\"].index,inplace=True)","0553c026":"# Object date convert to datetime64 \ndf[\"date\"]=pd.to_datetime(df[\"date\"]) # tarihe \u00e7eviriyor","d47e490a":"df[\"date\"]","2f165329":"from sklearn import preprocessing\nx = df[['new_cases']].values.astype(float)\nmin_max_scaler = preprocessing.MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\ndf[\"new_cases\"]=x_scaled\nx = df[['new_deaths']].values.astype(float)\nmin_max_scaler = preprocessing.MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\ndf[\"new_deaths\"]=x_scaled","bf56365b":"df.head()","702a6a7b":"df_turkey=df[df[\"location\"]==\"Turkey\"]\ndf_spain=df[df[\"location\"]==\"Spain\"]\ndf_italy=df[df[\"location\"]==\"Italy\"]\ndf_usa=df[df[\"location\"]==\"United States\"]\ndf_uk=df[df[\"location\"]==\"United Kingdom\"]\ndf_german=df[df[\"location\"]==\"Germany\"]","fdfa9124":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=df_turkey[\"date\"], y=df_turkey[\"total_deaths\"],\n                    mode='lines',\n                    name='Turkey'))\nfig.add_trace(go.Scatter(x=df_spain[\"date\"], y=df_spain[\"total_deaths\"],\n                    mode='lines',\n                    name='spain'))\nfig.add_trace(go.Scatter(x=df_italy[\"date\"], y=df_italy[\"total_deaths\"],\n                    mode='lines',\n                    name='italy'))\nfig.add_trace(go.Scatter(x=df_usa[\"date\"], y=df_usa[\"total_deaths\"],\n                    mode='lines',\n                    name='USA'))\nfig.add_trace(go.Scatter(x=df_uk[\"date\"], y=df_uk[\"total_deaths\"],\n                    mode='lines',\n                    name='UK'))\nfig.add_trace(go.Scatter(x=df_uk[\"date\"], y=df_german[\"total_deaths\"],\n                    mode='lines',\n                    name='Germany'))","0f51600c":"import plotly.express as px\nfig = px.scatter(df_turkey, x=df_turkey[\"date\"], y=df_turkey[\"total_deaths\"], color=\"location\")\nfig.show()","e954bf0a":"# Total Cases in deaths in Turkey\nsumcase_turkey=df_turkey[\"new_cases\"].sum()\nsumdeaths_turkey=df_turkey[\"new_deaths\"].sum()","d235e5cc":"# Total Cases in deaths in Spain\nsumcase_spain=df_spain[\"new_cases\"].sum()\nsumdeaths_spain=df_spain[\"new_deaths\"].sum()","47e043da":"fig = go.Figure(data=[\n    go.Bar(name='Turkey', y=[sumcase_turkey,sumdeaths_turkey]),\n    go.Bar(name='Spain', y=[sumcase_spain,sumdeaths_spain])\n])\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()","a89f0b6c":"# Sort location by total deaths per million for the top 10 data \ndata_sorted=df.groupby(\"location\").sum().sort_values(by=\"total_deaths_per_million\",ascending=False)[:10]","a5e56d91":"data_sorted","9addc11e":"fig = px.bar(data_sorted, x=data_sorted.index, y='total_deaths_per_million')\niplot(fig)","717801ab":"fig = px.bar(data_sorted, x=data_sorted.index, y='total_deaths_per_million',\n             hover_data=['total_deaths', 'total_cases'], color='total_deaths_per_million',\n             labels={'pop':'population of Canada'}, height=400)\nfig.show()","286ec4fb":"fig = px.pie(data_sorted, values='total_deaths_per_million', names=data_sorted.index)\nfig.show()","fafc85a0":"df2=df.groupby(['location', 'iso_code']).sum().sort_values(by=\"new_deaths\",ascending=False)","9aa660ac":"df2.head()","cc8858b2":"iso_code=df2.index.get_level_values('iso_code')\ndf2_location=df2.index.get_level_values('location')","51a2bf60":"fig = px.scatter_geo(df2, locations=iso_code, color=df2_location,\n                     hover_name=df2_location, size=\"new_cases\",\n                     projection=\"natural earth\")\nfig.show()","b4661dbf":"fig = px.choropleth(df2, locations=iso_code,\n                    color=\"new_cases\", # lifeExp is a column of gapminder\n                    hover_name=df2_location, # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig.show()","f2c748fa":"df_date_sorted=df.sort_values(by=\"date\")\nfig = px.choropleth(df_date_sorted, locations=\"location\", locationmode='country names', color=np.log(df_date_sorted[\"total_cases\"]), \n                    hover_name=\"location\", animation_frame=df_date_sorted[\"date\"].dt.strftime('%Y-%m-%d'),\n                    title='Cases over time', color_continuous_scale=px.colors.sequential.Magenta)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","8df18694":"# Listing cities of continents\neu_list=[\n    \"Austria\",\n\"Albania\",\n\"Andorra\",\n\"Belarus\",\n\"Bosnia and Herzegovina\",\n\"Croatia\",\n\"European Union\",\n\"Faroe Islands\",\n\"Gibraltar\",\n\"Guerney and Alderney\",\n\"Iceland\",\n\"Jersey\",\n\"Kosovo\",\n\"Liechtenstein\",\n\"Man, Island of\",\n\"Moldova\",\n\"Monaco\",\n\"Montenegro\",\n\"North Macedonia\",\n\"Norway\",\n\"Russia\",\n\"San Marino\",\n\"Serbia\",\n\"Svalbard and Jan Mayen Islands\",\n\"Switzerland\",\n\"Turkey\",\n\"Ukraine\",\n\"United Kingdom\",\n\"Vatican City State (Holy See)\",\n\"Albania\",\n\"Belgium\",\n\"Bulgaria\",\n\"Croatia\",\n\"Cyprus\",\n\"Czech Republic\",\n\"Denmark\",\n\"Estonia\",\n\"Finland\",\n\"France\",\n\"Germany\",\n\"Greece\",\n\"Hungary\",\n\"Ireland\",\n\"Italy\",\n\"Latvia\",\n\"Lithuania\",\n\"Luxembourg\",\n\"Malta\",\n\"Netherlands\",\n\"Poland\",\n\"Portugal\",\n\"Romania\",\n\"Slovakia\",\n\"Slovenia\",\n\"Spain\",\n\"Sweden\"]\nasia_list=[\n\"Afghanistan\",\n\"Armenia\",\n\"Azerbaijan\",\n\"Brunei\",\n\"Bangladesh\",\n\"Bhutan\",\n\"Brunei Darussalam\",\n\"Cambodia\",\n\"China\",\n\"Georgia\",\n\"Hong Kong\",\n\"India\",\n\"Indonesia\",\n\"Japan\",\n\"Kazakhstan\",\n\"South Korea\",\n\"Kyrgyzstan\",\n\"Laos\",\n\"Macao\",\n\"Malaysia\",\n\"Maldives\",\n\"Mongolia\",\n\"Myanmar\",\n\"Nepal\",\n\"Pakistan\",\n\"Phillipines\",\n\"Singapore\",\n\"Sri Lanka\",\n\"Taiwan\",\n\"Tajikistan\",\n\"Thailand\"\n\"Timor Leste (West)\",\n\"Turkmenistan\",\n\"Uzbekistan\",\n\"Vietnam\"\n]\nmid_east_list=[\n\"Bahrain\",\n\"Iraq\",\n\"Iran\",\n\"Israel\",\n\"Jordan\",\n\"Kuwait\",\n\"Lebanon\",\n\"Oman\",\n\"Palestine\",\n\"Qatar\",\n\"Saudi Arabia\",\n\"Syria\",\n\"United Arab Emirates\",\n\"Yemen\"\n]\nocencia_list=[\n\"Australia\",\n\"Fiji\",\n\"French Polynesia\",\n\"Guam\",\n\"Kiribati\",\n\"Marshall Islands\",\n\"Micronesia\",\n\"New Caledonia\",\n\"New Zealand\",\n\"Papua New Guinea\",\n\"Samoa\",\n\"Samoa, American\",\n\"Solomon, Islands\",\n\"Tonga\",\n\"Vanuatu\"\n]\ncaribbean_list=[\n\"Anguilla\",\n\"Antigua and Barbuda\",\n\"Aruba\",\n\"Bahamas\",\n\"Barbados\",\n\"Bonaire Sint Eustatius and Saba\",\n\"British Virgin Islands\",\n\"Cayman Islands\",\n\"Cuba\",\n\"Cura\u00e7ao\",\n\"Dominica\",\n\"Dominican Republic\",\n\"Grenada\",\n\"Guadeloupe\",\n\"Haiti\",\n\"Jamaica\",\n\"Martinique\",\n\"Monserrat\",\n\"Puerto Rico\",\n\"Saint-Barth\u00e9lemy\",\n\"Saint Kitts and Nevis\",\n\"Saint Lucia\",\n\"Saint Martin\",\n\"Saint Vincent and the Grenadines\",\n\"Sint Maarten\",\n\"Trinidad and Tobago\",\n\"Turks and Caicos Islands\",\n\"United States Virgin Islands\"\n]\n\ncentral_america_list=[\n\"Belize\",\n\"Costa Rica\",\n\"El Salvador\",\n\"Guatemala\",\n\"Honduras\",\n\"Mexico\",\n\"Nicaragua\",\n\"Panama\"\n]\n\nsouth_america_list=[\n\"Argentina\",\n\"Bolivia\",\n\"Brazil\",\n\"Chile\",\n\"Colombia\",\n\"Ecuador\",\n\"Falkland Islands\",\n\"French Guiana\",\n\"Guyana\",\n\"Paraguay\",\n\"Peru\",\n\"Suriname\",\n\"Uruguay\",\n\"Venezuela\"\n]\nnorth_america_list=[\n\"Bermuda\",\n\"Canada\",\n\"Greenland\",\n\"Saint Pierre and Miquelon\",\n\"United States\"\n]\nafrica_list=[\n\"Burundi\",\n\"Comoros\",\n\"Djibouti\",\n\"Eritrea\",\n\"Ethiopia\",\n\"Kenya\",\n\"Madagascar\",\n\"Malawi\",\n\"Mauritius\",\n\"Mayotte\"\n\"Mozambique\",\n\"Reunion\",\n\"Rwanda\",\n\"Seychelles\",\n\"Somalia\",\n\"Tanzania\",\n\"Uganda\",\n\"Zambia\",\n\"Zimbabwe\",\n\"Democratic Republic of Congo\",\n    \"Congo\",\n\"Angola\",\n\"Cameroon\",\n\"Central African Republic\",\n\"Chad\",\n\"Equatorial Guinea\",\n\"Gabon\",\n\"Sao Tome and Principe\",\n\"Algeria\",\n\"Egypt\",\n\"Libyan Arab Jamahiriya\",\n\"Morroco\",\n\"South Sudan\",\n\"Sudan\",\n\"Tunisia\",\n\"Western Sahara\",\n\"Botswana\",\n\"Eswatini (ex-Swaziland)\",\n\"Lesotho\",\n\"Namibia\",\n\"South Africa\",\n\"Benin\",\n\"Burkina Faso\",\n\"Cape Verde\",\n\"Cote d'Ivoire\",\n\"Gambia\",\n\"Ghana\",\n\"Guinea\",\n\"Guinea-Bissau\",\n\"Liberia\",\n\"Mali\",\n\"Mauritania\",\n\"Niger\",\n\"Nigeria\",\n\"Saint Helena\",\n\"Senegal\",\n\"Sierra Leone\",\n\"Togo\"\n]\ncontinent_list=[eu_list,asia_list,mid_east_list,ocencia_list,caribbean_list,central_america_list,south_america_list,north_america_list,africa_list]\ncontinent_str_list=[\"europe\",\"asia\",\"mid_east\",\"ocencia\",\"carribean\",\"central_america\",\"south_america\",\"north_america\",\"africa\"]","8c4ccc08":"indexlocation=[]\nindexlocation2=[]\nindex_list=[0]\nfor i in range(len(continent_list)):\n    for j in continent_list[i]:\n        indexlocation.append(df[df[\"location\"]==\"{}\".format(j)].index)     \n    indexlocation2 = np.concatenate(indexlocation)\n    print(\"number of cities in \",continent_str_list[i],\":\",len(indexlocation2))\n    index_list.append(len(indexlocation2))\n    \nfor l in range(len(index_list)):\n    if(l+1>9):\n        break\n    print(\"loading cities of\",continent_str_list[l],\"......\")\n    for m in range(index_list[l],index_list[l+1]):\n        df.loc[indexlocation2[m],\"continent\"]=continent_str_list[l]","ff357537":"#cities without continent\ndf[\"continent\"].isnull().sum()","43728520":"#transform cities without continents into other\ndf[\"continent\"].fillna(\"other\",inplace=True)","d9d76687":"# convert the date to string format for chart\ndf[\"stringdate\"]=[ i.strftime('%Y-%m-%d') for i in df[\"date\"]]","40240915":"#assigning to \"which_day\" which day of the epidemic\ndf[\"which_day\"]=[float(i.split(\"-\")[2])-30 if(i.split(\"-\")[1]==\"12\") else False for i in df[\"stringdate\"]]\ndf.loc[df[\"which_day\"]==False,\"which_day\"]=[float(i.split(\"-\")[2]) if(i.split(\"-\")[1]==\"01\") else False for i in df[df[\"which_day\"]==False][\"stringdate\"]]\ndf.loc[df[\"which_day\"]==False,\"which_day\"]=[float(i.split(\"-\")[2])+30 if(i.split(\"-\")[1]==\"02\") else False for i in df[df[\"which_day\"]==False][\"stringdate\"]]\ndf.loc[df[\"which_day\"]==False,\"which_day\"]=[float(i.split(\"-\")[2])+60 if(i.split(\"-\")[1]==\"03\") else False  for i in df[df[\"which_day\"]==False][\"stringdate\"]]\ndf.loc[df[\"which_day\"]==False,\"which_day\"]=[float(i.split(\"-\")[2])+90 if(i.split(\"-\")[1]==\"04\") else False for i in df[df[\"which_day\"]==False][\"stringdate\"]]\ndf.loc[df[\"which_day\"]==False,\"which_day\"]=[float(i.split(\"-\")[2])+120 if(i.split(\"-\")[1]==\"05\") else False for i in df[df[\"which_day\"]==False][\"stringdate\"]]","171e317e":"#sort the epidemic by day\ndf_graph=df.sort_values(by=\"which_day\")","0eb52cbc":"import plotly.express as px\nfig = px.bar(df_graph[:], x=\"continent\", y=\"total_cases\", color=\"continent\",\n  animation_frame=\"which_day\", animation_group=\"location\", range_y=[100,1000000])\nfig.show()\n","50705b85":"from IPython.core.display import HTML\nHTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')\n","ca62a1a7":"* **Data Normalization**","65c14901":"## separating countries into continents","15470785":"* ### Sort location by total deaths per million","beb1ff44":"## **Scatter**","b1713b93":"* ### Pie Chart","525fc1be":"## Bar","c186dc20":"* ####  Spain and Turkey compare cases&deaths","b303404a":"## Visualization of all cases in the world"}}