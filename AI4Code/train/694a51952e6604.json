{"cell_type":{"59f4db6d":"code","e0512605":"code","df70412e":"code","6c7fabd7":"code","615866ce":"code","d13ec1c6":"code","52e2add4":"code","96e364f6":"code","b52f54f0":"code","a998b48b":"code","6f16b6dd":"code","ba35112e":"code","a7e9d5e1":"code","3762dcad":"code","8fd70477":"code","d00d611a":"code","9542f737":"code","f499fa64":"code","ac1ebc04":"code","3d3d7847":"code","2b7e09bd":"code","400696e0":"code","5cfc3241":"code","9485b141":"code","337ffa7c":"markdown","11d912ff":"markdown","27ebef12":"markdown","3f07be90":"markdown"},"source":{"59f4db6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e0512605":"df = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv')","df70412e":"#calculating CPM\n#calculating the value that the Advertisers Bid for the month of June\n# CPM(the value which was the winning bid value) = \n#((revenue of the publisher*100)\/revenue_share_percentage)\/measurable_impressions)*1000\n\ndef weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division(((x['total_revenue']*100)),\n                                                x['measurable_impressions'])*1000 , axis=1)","6c7fabd7":"# Clean dataset a little bit\ndf = df.loc[df.CPM >= 0]\n\n# Drop total_revenue as we are using it in CPM\ndf.drop(['total_revenue'], axis=1, inplace=True)","615866ce":"import matplotlib.pyplot as plt\nimport seaborn as sns","d13ec1c6":"df.info()","52e2add4":"df['date'] = pd.to_datetime(df['date'])","96e364f6":"df.describe()","b52f54f0":"sns.pairplot(df[['site_id', 'ad_type_id', 'geo_id', 'device_category_id',\n       'advertiser_id', 'order_id', 'CPM']])","a998b48b":"sns.pairplot(df[['line_item_type_id', 'os_id',\n       'monetization_channel_id', 'ad_unit_id', 'total_impressions',\n       'viewable_impressions', 'measurable_impressions', 'CPM']])","6f16b6dd":"df.nunique()","ba35112e":"# drop revenue_share_percent and integration_type_id as they have just one value\ndf.drop(['revenue_share_percent', 'integration_type_id'], axis=1, inplace=True)","a7e9d5e1":"from sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import cross_val_score","3762dcad":"# split train and test\ntrain = df[df.date < '2019-06-22']\ntest = df[df.date > '2019-06-21']\n\n\ntrain = train.loc[train['CPM'] < train['CPM'].quantile(0.95)]\ntest = test.loc[test['CPM'] < test['CPM'].quantile(0.95)]","8fd70477":"# list of features for fit\nfull_features_list = ['site_id', 'ad_type_id', 'geo_id', 'device_category_id',\n       'advertiser_id', 'order_id', 'line_item_type_id', 'os_id',\n       'monetization_channel_id', 'ad_unit_id',\n       'viewable_impressions', 'measurable_impressions', 'total_impressions']","d00d611a":"# MSE on cross validation on train\nrf_model = RandomForestRegressor()\nrf_scores = cross_val_score(rf_model, train[full_features_list], train['CPM'],\n                         cv = 3, scoring = 'neg_mean_squared_error')\nprint(rf_scores)","9542f737":"# RandomForestRegressor on test dataset\nrf_model.fit(train[full_features_list], train['CPM'])\nrf_test_preds = rf_model.predict(test[full_features_list])\nprint('MSE on test = ', mean_squared_error(test['CPM'], rf_test_preds))","f499fa64":"from catboost import CatBoostRegressor\nfrom sklearn.model_selection import train_test_split","ac1ebc04":"# list of categorical features\ncat_features_list = ['site_id', 'ad_type_id', 'geo_id', 'device_category_id', 'advertiser_id', \n                     'order_id', 'line_item_type_id', 'os_id', 'monetization_channel_id', 'ad_unit_id']","3d3d7847":"# use log target\nX_train, x_val, y_train, y_val = train_test_split(train[full_features_list], np.log1p(train['CPM']))","2b7e09bd":"model_cat = CatBoostRegressor(cat_features=cat_features_list, random_state=42)","400696e0":"model_cat.fit(X_train, y_train, verbose = 200)\ncat_preds_val = model_cat.predict(x_val)\n\nprint('MSE on validation = ', mean_squared_error(np.expm1(y_val), np.expm1(cat_preds_val)))","5cfc3241":"cat_preds_test = model_cat.predict(test[full_features_list])\n\nprint('MSE on test with catboost = ', mean_squared_error(test['CPM'], np.expm1(cat_preds_test)))","9485b141":"print('MSE on test with random forest = ', mean_squared_error(test['CPM'], rf_test_preds))\nprint('MSE on test with catboost = ', mean_squared_error(test['CPM'], np.expm1(cat_preds_test)))","337ffa7c":"### Baseline - Random Forest Regression:","11d912ff":"### CatBoost Regression","27ebef12":"### EDA:","3f07be90":"MSE on test part is slightly better with catboost regressor"}}