{"cell_type":{"bf416e41":"code","0c51e1f4":"code","2119df5e":"code","9da8bbb5":"code","7e0169de":"code","60ec5db1":"code","15bd76fd":"code","cca1826b":"code","53825a29":"code","f157e574":"code","dce6229a":"code","cf9b7c9a":"code","23e344d8":"code","581c3121":"code","9ce74296":"code","38be63df":"code","988c4bf1":"code","24cc5179":"code","1d810064":"code","460140ce":"code","4b0095bb":"code","cb9929d2":"code","a0a7ccc1":"code","b4c00066":"code","f8b9e137":"code","181c77ee":"code","bb1f7d30":"code","0be775a3":"code","b6da6bea":"code","b60dd339":"code","7047433d":"code","8555375c":"code","f0a54418":"code","a3a41bf5":"code","1d079b80":"code","49a496ef":"code","9cd973d1":"code","1eaa8e11":"code","f02d0e3e":"code","3f34041b":"code","644ec2bc":"code","0cddf1e9":"code","803befe3":"code","e152f60a":"code","b39c5530":"code","ba076605":"code","a460cff7":"code","5940b0f3":"code","f3fd66ef":"code","af8a07d0":"code","a248ddf4":"code","ac138fe2":"code","193981f9":"code","c79d4933":"code","d83fcbdf":"code","08fa242a":"code","4d0acac2":"code","7536c083":"code","6572e0ed":"code","df86b43d":"code","f1742427":"code","0250392e":"code","ca2b3667":"code","50009458":"code","36bd3634":"code","a97194d1":"code","9dede56b":"code","9e7f2ef9":"code","095a7969":"code","9e6e510c":"code","a045dff7":"code","09cb9eda":"code","3ed4551f":"code","6c0c0922":"code","f30d5254":"code","a05025b0":"code","11f2629c":"code","315299f9":"code","23c53968":"markdown","e98c16ef":"markdown","b30cd1aa":"markdown","629f33a7":"markdown","9e061d3c":"markdown","12887197":"markdown","6eb26aa7":"markdown","81b63618":"markdown","00075efe":"markdown","6cbe0096":"markdown","98d7b4f0":"markdown"},"source":{"bf416e41":"\"\"\"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\"\"\"","0c51e1f4":"%%time\n# import module we'll need to import our custom module\nfrom shutil import copyfile\n!pip install mediapipe\n\ncopyfile(src = \"..\/input\/sldataset\/SLRP.py\", dst = \"..\/working\/SLRP.py\")\n\nimport pandas as pd\ntrain = pd.read_csv('..\/input\/sldataset\/train.csv')\n\nfrom SLRP import pose_data\n\nx,y = pose_data(start = int(1620),end = int(1755),custom = True,custom_df = train,\n               path_of_the_directory='..\/input\/sldataset\/content\/content\/content',\n                where_word = int(6),rate = 55,aug_rate = 50,where_category = int(5),is_train = True,show_df= True)\n","2119df5e":"#df = pd.read_csv(\"..\/input\/google-play-store-dataset\/googleplaystore.csv\")","9da8bbb5":"#df.head()","7e0169de":"\"\"\"def show_values(axs, orient=\"v\", space=.01):\n    def _single(ax):\n        if orient == \"v\":\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() \/ 2\n                _y = p.get_y() + p.get_height() + (p.get_height()*0.01)\n                value = '{:.1f} Star'.format(p.get_height())\n                ax.text(_x, _y, value, ha=\"center\") \n        elif orient == \"h\":\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() + float(space)\n                _y = p.get_y() + p.get_height() - (p.get_height()*0.5)\n                value = '{:.1f} Star'.format(p.get_width())\n                ax.text(_x, _y, value, ha=\"left\")\n\n    if isinstance(axs, np.ndarray):\n        for idx, ax in np.ndenumerate(axs):\n            _single(ax)\n    else:\n        _single(axs)\"\"\"","60ec5db1":"\"\"\"df_ = df.copy()\ndf_.dropna(inplace = True)\ns = 20\nplt.rcParams['figure.figsize'] = 10,25\n\nplt.rc('font', size=s) #controls default text size\nplt.rc('axes', titlesize=s) #fontsize of the title\nplt.rc('axes', labelsize=s) #fontsize of the x and y labels\nplt.rc('xtick', labelsize=s) #fontsize of the x tick labels\nplt.rc('ytick', labelsize=s) #fontsize of the y tick labels\nplt.rc('legend', fontsize=s)\nplt.title('Category and Rating')\np = sns.barplot(data = df_ , y= 'Category',x = 'Rating')\n#plt.xticks(rotation =90)\nplt.tight_layout()\nshow_values(p,orient=\"h\", space=.01)\nplt.savefig('Category_and_Rating.jpg')\"\"\"","15bd76fd":"#new_data = df_.groupby(['Category','Android Ver'])['Rating'].sum().reset_index()","cca1826b":"\"\"\"s = 20\nplt.rcParams['figure.figsize'] = 25,8\n\nplt.rc('font', size=15) #controls default text size\nplt.rc('axes', titlesize=s) #fontsize of the title\nplt.rc('axes', labelsize=s) #fontsize of the x and y labels\nplt.rc('xtick', labelsize=s) #fontsize of the x tick labels\nplt.rc('ytick', labelsize=s) #fontsize of the y tick labels\nplt.rc('legend', fontsize=s)\nplt.title('Android Version and Rating')\np = sns.barplot(data = df_ , x= 'Android Ver',y = 'Rating')\nplt.xticks(rotation = 45)\nplt.tight_layout()\nshow_values(p,orient=\"v\", space=.01)\nplt.savefig('Android_Version_and_Rating.jpg')\"\"\"","53825a29":"\"\"\"s = 20\nplt.rcParams['figure.figsize'] = 25,8\n\nplt.rc('font', size=s) #controls default text size\nplt.rc('axes', titlesize=s) #fontsize of the title\nplt.rc('axes', labelsize=s) #fontsize of the x and y labels\nplt.rc('xtick', labelsize=s) #fontsize of the x tick labels\nplt.rc('ytick', labelsize=s) #fontsize of the y tick labels\nplt.rc('legend', fontsize=s)\n#plt.hist(df_['Content Rating'])\nfor c in df_.columns:\n    if c not in ['Rating','App','Reviews','Size','Last Updated','Current Ver']:\n        if df_[c].nunique() >=35 :\n            #plt.rc('ytick', labelsize=5) #fontsize of the y tick labels\n            plt.rcParams['figure.figsize'] = 13,35\n            plt.title(f'{c} and Rating')\n            p = sns.barplot(y = df_[c],x = df_['Rating'])\n            #plt.xticks(rotation = 90)\n            plt.tight_layout()\n            plt.legend()\n            show_values(p,orient=\"h\", space=.01)\n            plt.savefig(f'{c}_and_Rating.jpg')           \n            plt.show()\n        elif df_[c].nunique() <= 4:\n            plt.rcParams['figure.figsize'] = 10,10\n            plt.title(f'{c} and Rating')\n            p = sns.barplot(x = df_[c],y = df_['Rating'])\n            #plt.xticks(rotation = 90)\n            plt.tight_layout()\n            show_values(p,orient=\"v\", space=.01)\n            plt.legend()\n            plt.savefig(f'{c}_and_Rating.jpg')            \n            plt.show()\"\"\"","f157e574":"#df_['Last Updated'] = pd.to_datetime(df_['Last Updated'])","dce6229a":"\"\"\"#%matplotlib qt\ns = 20\nplt.rcParams['figure.figsize'] = 25,10\nplt.rc('font', size=15) #controls default text size\nplt.rc('axes', titlesize=s) #fontsize of the title\nplt.rc('axes', labelsize=s) #fontsize of the x and y labels\nplt.rc('xtick', labelsize=s) #fontsize of the x tick labels\nplt.rc('ytick', labelsize=s) #fontsize of the y tick labels\nplt.rc('legend', fontsize=s)\nplt.title('Last Updated and Rating')\nplt.plot_date(data = df_ , x= 'Last Updated',y = 'Rating')\n#sns.barplot(data = df_ , x= 'Last Updated',y = 'Rating')\nplt.xticks(rotation = 45)\nplt.tight_layout()\n\nplt.savefig('Last_Updated_and_Rating.jpg')\"\"\"","cf9b7c9a":"\"\"\"\ns = 20\nplt.rcParams['figure.figsize'] =25,10\nplt.rc('font', size=15) #controls default text size\nplt.rc('axes', titlesize=30) #fontsize of the title\nplt.rc('axes', labelsize=s) #fontsize of the x and y labels\nplt.rc('xtick', labelsize=s) #fontsize of the x tick labels\nplt.rc('ytick', labelsize=s) #fontsize of the y tick labels\nplt.rc('legend', fontsize=s)\nplt.title('Content Rating and Rating')\np = sns.barplot(data = df_ , y= 'Content Rating',x = 'Rating',)\n#sns.barplot(data = df_ , y= 'Last Updated',x = 'Rating')\n#plt.xticks(rotation = 90)\nplt.tight_layout()\nshow_values(p,orient=\"h\", space=.01)\nplt.savefig('Conten_Rating_and_Rating.jpg')\"\"\"","23e344d8":"\"\"\"\ns = 20\nplt.rcParams['figure.figsize'] =10,100\nplt.rc('font', size=15) #controls default text size\nplt.rc('axes', titlesize=30) #fontsize of the title\nplt.rc('axes', labelsize=s) #fontsize of the x and y labels\nplt.rc('xtick', labelsize=s) #fontsize of the x tick labels\nplt.rc('ytick', labelsize=s) #fontsize of the y tick labels\nplt.rc('legend', fontsize=s)\nplt.title('Size and Rating')\np = sns.barplot(data = df_ , y= 'Size',x = 'Rating',)\n#sns.barplot(data = df_ , y= 'Last Updated',x = 'Rating')\n#plt.xticks(rotation = 90)\nplt.tight_layout()\nshow_values(p,orient=\"h\", space=.01)\nplt.savefig('Size_and_Rating.jpg')\"\"\"","581c3121":"\"\"\"#%matplotlib qt\ns = 20\nplt.rcParams['figure.figsize'] = 10,25\nplt.rc('font', size=15) #controls default text size\nplt.rc('axes', titlesize=30) #fontsize of the title\nplt.rc('axes', labelsize=40) #fontsize of the x and y labels\nplt.rc('xtick', labelsize=s) #fontsize of the x tick labels\nplt.rc('ytick', labelsize=s) #fontsize of the y tick labels\nplt.rc('legend', fontsize=s)\nplt.title('Installs and Rating')\np= sns.barplot(data = df_ , y= 'Installs',x = 'Rating',)\n#sns.barplot(data = df_ , y= 'Last Updated',x = 'Rating')\n#plt.xticks(rotation = 90)\nplt.tight_layout()\nshow_values(p,orient=\"h\", space=.01)\nplt.savefig('Install_and_Rating.jpg')\"\"\"","9ce74296":"#df.info()","38be63df":"\"\"\"indexs = df[df.Rating.isnull()].index\ndf.drop(indexs,inplace = True)\"\"\"","988c4bf1":"\"\"\"# First we split train test data\nfrom sklearn.model_selection import train_test_split\nX = df.drop(['Rating'],axis = 1)\nY = df['Rating']\nxtrain,xtest,ytrain,ytest = train_test_split(X,Y,test_size = 0.25,random_state = 0)\nxtrain.shape,xtest.shape\"\"\"","24cc5179":"#xtrain.info()","1d810064":"#xtest.info()","460140ce":"#xtrain[xtrain['Current Ver'].isnull()].index","4b0095bb":"\"\"\"ytrain.drop(xtrain[xtrain['Current Ver'].isnull()].index,inplace = True)\nytrain.drop(xtrain[xtrain['Android Ver'].isnull()].index,inplace = True)\nytest.drop(xtest[xtest['Current Ver'].isnull()].index,inplace = True)\"\"\"","cb9929d2":"\"\"\"xtrain.drop(xtrain[xtrain['Current Ver'].isnull()].index,inplace = True)\nxtrain.drop(xtrain[xtrain['Android Ver'].isnull()].index,inplace = True)\nxtest.drop(xtest[xtest['Current Ver'].isnull()].index,inplace = True)\"\"\"","a0a7ccc1":"#ytrain.drop(xtrain[xtrain['Current Ver'].isna()].index)","b4c00066":"#from IPython.display import display","f8b9e137":"#ytrain.head()","181c77ee":"#display(xtrain.info())\n#display(xtest.info())","bb1f7d30":"#display(xtrain.sample(n = 10))# random show ten rows columns\n#display(xtest.sample(n = 10))","0be775a3":"\"\"\"for c in xtrain.columns:\n    xtrain[c] = xtrain[c].fillna(xtrain[c].median)\nfor c in xtest.columns:\n    xtest[c] = xtest[c].fillna(xtest[c].median)\"\"\"","b6da6bea":"\"\"\"cat_features = []\nfor c in df.columns:\n    if df[c].dtypes == 'O':\n        cat_features.append(c)\ncat_features.remove('App')# app name not deside that rating\"\"\"","b60dd339":"\"\"\"xtrain['Type'].replace(to_replace=['Free', 'Paid'], value=[0, 1],inplace = True)\nxtest['Type'].replace(to_replace=['Free', 'Paid'], value=[0, 1],inplace = True)\"\"\"","7047433d":"\"\"\"xtrain['Last Updated'] = pd.to_datetime(xtrain['Last Updated'],\n                                        errors = 'coerce')\nxtest['Last Updated'] = pd.to_datetime(xtest['Last Updated'],\n                                       errors = 'coerce')\"\"\"","8555375c":"\"\"\"xtrain['Android Ver'] = xtrain['Android Ver'].str.replace('and up', '')                               \nxtest['Android Ver'] = xtest['Android Ver'].str.replace('and up', '')\"\"\"","f0a54418":"\"\"\"index_xtrain = xtrain.Size[xtrain.Size.str.find('.')==True].index\nindex_xtest = xtest.Size[xtest.Size.str.find('.')==True].index\"\"\"","a3a41bf5":"\"\"\"xtrain['Size'][index_xtrain] = xtrain.Size.str.replace('M','00000')[index_xtrain]\nxtest['Size'][index_xtest] = xtest.Size.str.replace('M','00000')[index_xtest]\"\"\"","1d079b80":"\"\"\"xtrain['Size'] = xtrain['Size'].str.replace('.','')\nxtrain['Size'] = xtrain['Size'].str.replace('M','000000')\nxtrain['Size'] = xtrain['Size'].str.replace('k','00000')\nxtest['Size'] = xtest['Size'].str.replace('.','')\nxtest['Size'] = xtest['Size'].str.replace('M','000000')\nxtest['Size'] = xtest['Size'].str.replace('k','000')\"\"\"","49a496ef":"\"\"\"xtrain['Installs'] = xtrain['Installs'].str.replace(',','')\nxtrain['Installs'] = xtrain['Installs'].str.replace('+','')\nxtest['Installs'] = xtest['Installs'].str.replace(',','')\nxtest['Installs'] = xtest['Installs'].str.replace('+','')\"\"\"","9cd973d1":"\"\"\"xtrain.Installs = xtrain.Installs.astype('int64')\nxtest.Installs = xtest.Installs.astype('int64')\"\"\"","1eaa8e11":"\"\"\"xtrain['Size'] = xtrain['Size'].str.replace('Varies with device','0')\nxtest['Size'] = xtest['Size'].str.replace('Varies with device','0')\nxtrain['Size'].astype('int64')\nxtest['Size'].astype('int64')\"\"\"","f02d0e3e":"\"\"\"display(xtrain.info())\ndisplay(xtest.info())\"\"\"","3f34041b":"\"\"\"xtrain['Price'] = xtrain.Price.str.replace('$','')\nxtest['Price'] = xtest.Price.str.replace('$','')\"\"\"","644ec2bc":"\"\"\"xtrain['Price'] = xtrain['Price'].astype('float64')\nxtest['Price'] = xtest['Price'].astype('float64')\"\"\"","0cddf1e9":"\"\"\"xtrain['Size'] = xtrain.Size.astype('int64')\nxtest['Size'] = xtest.Size.astype('int64')\"\"\"","803befe3":"\"\"\"display(xtrain.info())\ndisplay(xtest.info())\"\"\"","e152f60a":"\"\"\"from sklearn.preprocessing import OneHotEncoder, LabelEncoder, MultiLabelBinarizer, Binarizer,OrdinalEncoder\nle = LabelEncoder()\nohe = OneHotEncoder()\nmlb = MultiLabelBinarizer() \nb = Binarizer()\noe = OrdinalEncoder()\"\"\"","b39c5530":"\"\"\"for c in xtrain.columns:\n    if c in {'Category','Genres','Content Rating'}:\n        le.fit(df_[c])\n\n        xtrain[c] = le.transform(xtrain[c])\"\"\"","ba076605":"\"\"\"for c in xtest.columns:\n    if c in {'Category','Genres','Content Rating'}:\n        le.fit(df_[c])\n\n        xtest[c] = le.transform(xtest[c])\"\"\"","a460cff7":"\"\"\"display(xtrain)\ndisplay(xtest)\"\"\"","5940b0f3":"\"\"\"xtrain['Android Ver'] = xtrain['Android Ver'].astype(str)\nxtest['Android Ver'] = xtest['Android Ver'].astype(str)\"\"\"","f3fd66ef":"\"\"\"df['Android Ver'] = df['Android Ver'].str.replace('and up','')\ndf['Android Ver'] = df['Android Ver'].astype(str)\"\"\"","af8a07d0":"\"\"\"display(df['Android Ver'].unique())\ndisplay(xtrain['Android Ver'].unique())\ndisplay(xtest['Android Ver'].unique())\"\"\"","a248ddf4":"\"\"\"le.fit(df['Android Ver'].unique())\nxtrain['Android Ver'] = le.transform(xtrain['Android Ver'])\nxtest['Android Ver'] = le.transform(xtest['Android Ver'])\"\"\"","ac138fe2":"\"\"\"df['Current Ver'] = df['Current Ver'].astype(str)\"\"\"","193981f9":"\"\"\"le.fit(df['Current Ver'].unique())\nxtrain['Current Ver'] = xtrain['Current Ver'].astype(str)\nxtest['Current Ver'] = xtest['Current Ver'].astype(str)\nxtrain['Current Ver'] = le.transform(xtrain['Current Ver'])\nxtest['Current Ver'] = le.transform(xtest['Current Ver'])\"\"\"","c79d4933":"\"\"\"display(xtrain.info())\ndisplay(xtest.info())\"\"\"","d83fcbdf":"\"\"\"xtrain.drop(['App'], axis = 1, inplace = True)\nxtest.drop(['App'],axis = 1, inplace = True)\"\"\"","08fa242a":"\"\"\"\nfeatures = []\nfor c in xtrain.columns:\n    if xtrain[c].dtypes!='O':\n\n        features.append(c)\"\"\"","4d0acac2":"#features.remove('Last Updated')","7536c083":"\"\"\"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nxtrain[features] = ss.fit_transform(xtrain[features])\nxtest[features] = ss.transform(xtest[features])\"\"\"","6572e0ed":"\"\"\"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nimport lightgbm as lgb\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\"\"\"","df86b43d":"#from sklearn.metrics import mean_squared_error as mse","f1742427":"#rf = RandomForestRegressor(n_estimators=1000,max_depth = None).fit(xtrain[features], ytrain,sample_weight = 1\/np.square(ytrain))","0250392e":"\"\"\"rf_pred = rf.predict(xtest[features])\nnp.sqrt(mse(rf_pred,ytest))\"\"\"","ca2b3667":"\"\"\"rf.score(xtest[features],ytest)\"\"\"","50009458":"\"\"\"rf.feature_importances_\"\"\"","36bd3634":"\"\"\"svr = SVR(kernel='poly').fit(xtrain[features],ytrain)\npred_svr = svr.predict(xtest[features])\nprint(np.sqrt(mse(pred_svr,ytest)))\nprint(svr.score(xtest[features],ytest))\"\"\"","a97194d1":"#lr = LinearRegression().fit(xtrain[features], ytrain)","9dede56b":"#lr_pred = lr.predict(xtest[features])\n#np.sqrt(mse(lr_pred,ytest))","9e7f2ef9":"#lr.score(xtest[features], ytest)","095a7969":"#lgbr = lgb.LGBMRegressor(n_estimators=10).fit(xtrain[features], ytrain)","9e6e510c":"#pred = lgbr.predict(xtest[features])\n#np.sqrt(mse(pred,ytest))","a045dff7":"#lgbr.score(xtest[features],ytest)","09cb9eda":"\"\"\"knn = KNeighborsRegressor(n_neighbors=15).fit(xtrain[features], ytrain)\npred = knn.predict(xtest[features])\nprint(np.sqrt(mse(pred,ytest)))\nprint(knn.score(xtest[features],ytest))\"\"\"","3ed4551f":"#xtest[features].shape","6c0c0922":"\"\"\"from keras.layers import Dense,Dropout\nimport keras\nimport tensorflow as tf\nimport keras.backend as k\ndef rmse(ytrue,ypred):\n    return k.sqrt(keras.metrics.mean_squared_error(ytrue,ypred))\ninputs = keras.Input(10)\nlayer1 = Dense(128)(inputs)\ndrop1 = Dropout(0.5)(layer1)\nlayer2 = Dense(64)(drop1)\ndrop2 = Dropout(0.4)(layer2)\nlayer3 = Dense(32)(drop2)\nlayer4 = Dense(1)(layer3)\nmodel = keras.Model(inputs = inputs,outputs = layer4)\nmodel.compile(loss = rmse,optimizer = 'adam')\nh = model.fit(xtrain[features],ytrain,validation_data=(xtest[features],ytest), epochs = 100,\n              callbacks=tf.keras.callbacks.EarlyStopping(\n                  monitor=\"val_loss\",\n                  min_delta=0,\n                  patience=10,\n                  #verbose=3,\n                  mode=\"min\",\n                  baseline=None,\n                  restore_best_weights=False\n                  ))\"\"\"","f30d5254":"\"\"\"print(model.evaluate(xtest[features],ytest))\npred_nn = model.predict(xtest[features])\"\"\"","a05025b0":"\"\"\"plt.figure(figsize = (10,5))\nplt.plot(h.history['loss'],label = 'training loss')\nplt.plot(h.history['val_loss'],label = 'validation loss')\nplt.legend()\nplt.show()\"\"\"","11f2629c":"\"\"\"\nplt.figure(figsize = (10,5))\nx = np.arange(len(ytest))\nplt.plot(x,ytest,label = 'Actual')\n\nplt.plot(x,pred_nn,label = 'predicted')\nplt.legend()\nplt.show()\"\"\"","315299f9":"#np.sqrt(mse(ytest,pred_nn))","23c53968":"## Conclusion\n* Use the Google play store Everyone will indicate how it works to use an application with a rating.\n\n* The other user will know how fast and smooth the application of this code is. \n\n* User experience only deside that app rating ,But this features are slightly different.\n\n* Another one thing we can estimate particular app rating like reviews, latest update ,mobile compatibility (Android Version), free or paid , worth of paid","e98c16ef":"# Category and Rating","b30cd1aa":"# Android Version and Rating","629f33a7":"# Installs and Rating","9e061d3c":"# Type, Price, Genres Vs Rating","12887197":"# Size and Rating","6eb26aa7":"## Content Rating and Rating","81b63618":"* In the dataset mainly predicted app rating, but we see that app Rating 9366 out of 10840 only is available.We also replace that null value with mean or median.\n\n* But it has huge number of null values.\n\n* Before we drop that null values in rating we also see that other columns such as Current Ver, Android Ver ,Type in these are columns also have null values \n\n* So we drop that Rating row related rows only\n\n* when we drop that rating column  also delete that small no of null values, It is replace with that median","00075efe":"## Exploratory Data Analysis","6cbe0096":"## Data Preprocessing","98d7b4f0":"# Last Updated and Rating"}}