{"cell_type":{"ce6caa3a":"code","c223b74e":"code","14d20856":"code","49ea1dc1":"code","a97cc80f":"code","2d15874d":"code","0bb53897":"code","092625b5":"code","304a27f2":"code","21831892":"code","822c8667":"code","ac63c25f":"code","59f02377":"code","999ad458":"code","5949fa75":"code","15b1bc73":"code","0f2fe6ba":"code","223b7998":"code","0984b2d8":"code","87773d49":"code","4f34810d":"code","f06a465f":"code","c6f4d452":"code","78c2421c":"code","2b136cf6":"code","9d40912a":"code","6f440f39":"code","8e774b4a":"code","f7e07d03":"code","607175f2":"code","5abc48c7":"code","43fa86d7":"code","a7129921":"code","e78124a4":"code","bb108d1e":"code","81f7af90":"code","9ac5b0f7":"code","f6adfd8d":"code","8d7bedad":"markdown","8e60c13d":"markdown","b5f5fd6b":"markdown"},"source":{"ce6caa3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c223b74e":"df = pd.read_csv(\"\/kaggle\/input\/used-cars-dataset-from-cardekhocom\/Cardekho_Extract.csv\")","14d20856":"df.dtypes","49ea1dc1":"df_original = df.copy()","a97cc80f":"df['seats'] = df['seats'].str[5:]","2d15874d":"df[df['seats']==\"N\/A\"]['full_name']","0bb53897":"df.at[16375, 'seats'] = 5","092625b5":"dropping_df = df[df['seats'].isnull() & df['full_name'].isnull()]\ndf = pd.concat([df, dropping_df]).drop_duplicates(keep=False)","304a27f2":"df['seats'].astype(float)","21831892":"seat_mode= int(df['seats'].mode())\ndf['seats'].replace({np.nan: seat_mode}, inplace=True)","822c8667":"df['seats'] = df['seats'].astype(int)","ac63c25f":"import re","59f02377":"def engine_power_extractor(text):\n    try:\n        return re.match(r\"(Max Power)([0-9.]+)( bhp)\", text).group(2)\n    except Exception:\n        return np.nan","999ad458":"df['max_power'] = df['max_power'].apply(lambda x: engine_power_extractor(x))","5949fa75":"df['max_power'] = df['max_power'].astype(float)\nmp_mean = df['max_power'].mean()\ndf['max_power'].replace(np.nan, mp_mean, inplace=True)","15b1bc73":"df.describe()","0f2fe6ba":"def extractor(text):\n    try:\n        return re.match(r\"(Engine)([0-9]+)( CC)\", text).group(2)\n    except Exception:\n        return np.nan","223b7998":"df['engine'] = df['engine'].apply(lambda x: extractor(x))","0984b2d8":"df['engine'] = df['engine'].astype(float)","87773d49":"data_mean = df['engine'].mean()","4f34810d":"df['engine'].replace(np.nan, data_mean, inplace=True)","f06a465f":"var = []\nfor x in set(df['mileage']):\n    var.append(x.split()[-1])\nset(var)","c6f4d452":"for x in set(var):\n    print(x)\n    print(sum(df['mileage'].str.contains(x)))","78c2421c":"df[df['mileage'].str.contains(\"km\/kg\")]['fuel_type'].value_counts()","2b136cf6":"df['seller_type'].value_counts()","9d40912a":"km_extractor = lambda kms: \"\".join(list(filter(str.isdigit, kms)))","6f440f39":"df['km_driven'] = df['km_driven'].apply(km_extractor)\ndf['km_driven'] = df['km_driven'].astype(int, )","8e774b4a":"df['year'] = df['year'].apply(int)\ndf['year'] = df['year'].astype(int)","f7e07d03":"df.rename(columns={\"new-price\": \"new_price\"}, inplace=True)","607175f2":"import random","5abc48c7":"def indian_amount_conv(amount):\n    if \"Lakh\" in amount[1]:\n        return float(amount[0])  * 100_000\n    elif \"Cr\" in amount[1]:\n        return float(amount[0])  * 10_000_000","43fa86d7":"good_data = []\nfor row in df['new_price']:\n    if type(row) == float:\n        good_data.append(row)\n        continue\n        \n    price_data = row[29:]\n    if \"Cr-\" in price_data:\n        data_splitted = [price_data.split(\"-\")[0].replace(\"Cr\", \"\")] + price_data.split(\"-\")[1].split()\n        data_splitted[:2] = map(float, data_splitted[:2]) # [1.72, 1.84, 'Cr*']\n        amount = [sum(data_splitted[:2]) \/2 ] + [data_splitted[-1]] # [15.265, 'Lakh*']; Mean value of the range\n        good_data.append(indian_amount_conv(amount)) \n\n    elif \"-\" in price_data:\n        data_splitted = [price_data.split(\"-\")[0]] + price_data.split(\"-\")[1].split()\n        data_splitted[:2] = map(float, data_splitted[:2])\n        if data_splitted[0] > data_splitted[1]:\n            data_splitted[0] = data_splitted[0]\/100\n        amount = [sum(data_splitted[:2]) \/2 ] + [data_splitted[-1]]\n        good_data.append(indian_amount_conv(amount))\n\n    else:\n        amount = price_data.split()\n        good_data.append(indian_amount_conv(amount))","a7129921":"df.head()","e78124a4":"for price in set(df['selling_price']):\n    if not (\"Lakh\" in price or \"Cr\" in price):\n        print(price)","bb108d1e":"price_data = []\nfor price in df['selling_price']:\n    if (\"Lakh\" in price or \"Cr\" in price):\n        price = price.split()\n        price_data.append(indian_amount_conv(price))\n    else:\n        float(price[:-1].replace(\",\", \"\"))\n        price_data.append(price)","81f7af90":"df[\"selling_price_formatted\"] = price_data","9ac5b0f7":"df.head()","f6adfd8d":"df.to_csv(\"Formatted Indian Used Car.csv\")","8d7bedad":"Dataframe marks almost all columns as object.","8e60c13d":"Converting the seats column from object to integer. With mode seat number (5) assigned to missing values.","b5f5fd6b":"`df['seats']` is ready \ud83c\udf89. Now converting `Max Power` column to appropriate data type and replacing missing values with mean values."}}