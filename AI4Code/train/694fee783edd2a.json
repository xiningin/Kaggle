{"cell_type":{"2c575a67":"code","50f9657d":"code","f2040ce1":"code","2f501949":"code","635bc983":"code","8aa40562":"code","41ae1578":"code","90d64a46":"code","08621bfe":"code","d1f53df6":"code","ca796736":"code","d57851a1":"code","5f0a9416":"code","267274e0":"code","3cab4046":"code","ddb243d1":"code","973dbe33":"code","ac6b84be":"code","5d3f85a8":"code","b87eb886":"code","dd90b982":"code","655c9786":"code","524e4dfe":"code","c9a19bc6":"code","9b6ad8f6":"code","224cc1c6":"code","b08ddd9e":"code","57af7c6a":"code","8df93d47":"code","c4d1467f":"code","2d6be013":"code","da207c5f":"code","8f6afa62":"code","2db2014b":"code","784aac09":"code","78e13bb2":"code","fe4a63cb":"code","85fcac29":"code","36261f5f":"code","84a722d0":"code","e0b21f93":"code","91129530":"code","da42a1db":"code","842df5a5":"code","2992a44c":"code","213af167":"code","65ccf9db":"code","18c30ce8":"code","d3c9714f":"code","72e2e557":"code","0a8ee714":"code","113f769a":"code","12778efd":"code","7882a89f":"code","b614d529":"code","0b213f48":"code","1a97cd87":"markdown","64dcdad3":"markdown","426df313":"markdown","4931724d":"markdown","e9728c8a":"markdown","35fde7e6":"markdown","0d2e05b5":"markdown","f0e05253":"markdown","1534e029":"markdown","87c247f8":"markdown","fb0913cb":"markdown","89b403e2":"markdown","0492f50a":"markdown","9b4ed330":"markdown","919af8ad":"markdown","dd239d3a":"markdown"},"source":{"2c575a67":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","50f9657d":"import matplotlib.pyplot as plt\nimport seaborn as sns","f2040ce1":"from sklearn.impute import KNNImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import metrics\nfrom sklearn.metrics import explained_variance_score\nfrom sklearn.model_selection import GridSearchCV, train_test_split","2f501949":"from sklearn.linear_model import LinearRegression, Ridge, Lasso, HuberRegressor","635bc983":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.callbacks import EarlyStopping","8aa40562":"from xgboost import XGBRegressor, train","41ae1578":"df = pd.read_csv('\/kaggle\/input\/life-expectancy-who\/Life Expectancy Data.csv')","90d64a46":"df.head(5)","08621bfe":"print(\"\\t     Unique Values\\n\\n\\n\")\nprint(df.nunique())","d1f53df6":"df = df.drop(['Country'], axis=1)","ca796736":"df.describe()","d57851a1":"print(df.info())","5f0a9416":"plt.figure(figsize=(12, 6))\nplt.tight_layout()\nsns.heatmap(df.isnull())","267274e0":"df.columns","3cab4046":"df.isnull().sum()","ddb243d1":"df = df.dropna(subset=['Life expectancy ', 'Adult Mortality', 'Alcohol', ' BMI ', 'Diphtheria ', \n                       ' thinness  1-19 years', ' thinness 5-9 years', 'Polio'])","973dbe33":"df.isnull().sum()","ac6b84be":"given_values = df.dropna()\nmissing_values_index = list(set(df.index) - set(given_values.index))\nmissing_values = df.loc[missing_values_index]","5d3f85a8":"df.info()","b87eb886":"imputer = KNNImputer(n_neighbors=2)\nimputed_values = pd.DataFrame(imputer.fit_transform(df.drop(['Status'], axis=1)), columns=df.drop(['Status'], axis=1).columns)","dd90b982":"imputed_values['Status'] = df['Status']","655c9786":"plt.figure(figsize=(20, 10))\nsns.heatmap(imputed_values.corr(), annot=True)","524e4dfe":"df2 = pd.DataFrame(pd.get_dummies(data=imputed_values, columns=['Status']))","c9a19bc6":"plt.figure(figsize=(12, 6))\nsns.set_style('darkgrid')\nsns.scatterplot(data=df, y='Life expectancy ', x='Adult Mortality', hue='Status')","9b6ad8f6":"plt.figure(figsize=(15, 8))\nsns.boxplot(df['Year'], df['Life expectancy '], hue=df['Status'], palette=\"coolwarm\")","224cc1c6":"fig, axes = plt.subplots(4, 1, figsize=(20, 40))\nsns.scatterplot(data=df, y='Life expectancy ', x='Alcohol', hue='Status', palette=\"mako_r\", alpha=0.5, ax=axes[0])\nsns.scatterplot(data=df, y='Life expectancy ', x=' HIV\/AIDS', hue='Status', palette=\"mako_r\", alpha=0.5, ax=axes[1])\nsns.scatterplot(data=df, y='Life expectancy ', x='Polio', hue='Status', palette=\"mako_r\", alpha=0.5, ax=axes[2])\nsns.scatterplot(data=df, y='Life expectancy ', x='Diphtheria ', hue='Status', palette=\"mako_r\", alpha=0.5, ax=axes[3])","b08ddd9e":"fig, axes = plt.subplots(1, 2, figsize=(30, 10))\nsns.scatterplot(data=df, y='Life expectancy ', x='Schooling', hue='Status', palette=\"OrRd_r\", alpha=0.5, ax=axes[0])\nsns.scatterplot(data=df, y='Life expectancy ', x='Income composition of resources', hue='Status', palette=\"OrRd_r\", alpha=0.5, ax=axes[1])","57af7c6a":"df2.corr()['Life expectancy ']","8df93d47":"columns_to_drop = []","c4d1467f":"for col in df.drop(['Status'], axis=1).columns:\n    temp = df.corr()[col].loc['Life expectancy ']\n    if temp < 0.35 and temp > -0.2:\n        columns_to_drop.append(col)","2d6be013":"df2 = df2.drop(columns_to_drop, axis=1)","da207c5f":"y = df2['Life expectancy ']\nX = df2.drop(['Life expectancy '], axis=1)","8f6afa62":"scaler = StandardScaler()\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)","2db2014b":"X_Train, X_CV, y_train, y_cv = train_test_split(X, y, test_size=0.4)\nX_Test, X_CV, y_test, y_cv = train_test_split(X_CV, y_cv, test_size=0.5)","784aac09":"lr = LinearRegression()\nlr.fit(X_Train, y_train)","78e13bb2":"print(f\"Explained Variance Score: {explained_variance_score(y_pred=lr.predict(X_Train), y_true=y_train)}\")\nprint(f\"RMSE: {np.sqrt(metrics.mean_squared_error(y_pred=lr.predict(X_Train), y_true=y_train))}\")","fe4a63cb":"print(f\"Explained Variance Score: {explained_variance_score(y_pred=lr.predict(X_CV), y_true=y_cv)}\")\nprint(f\"RMSE: {np.sqrt(metrics.mean_squared_error(y_pred=lr.predict(X_CV), y_true=y_cv))}\")","85fcac29":"gs_rr = GridSearchCV(Ridge(),\n                    param_grid={\n                        'alpha':[0.1, 0.3, 1, 3, 6, 8, 10]\n                    }, verbose=1)\n\ngs_rr.fit(X_Train, y_train)\nrr=gs_rr.best_estimator_","36261f5f":"print(f\"Explained Variance Score: {explained_variance_score(y_pred=rr.predict(X_Train), y_true=y_train)}\")\nprint(f\"RMSE: {np.sqrt(metrics.mean_squared_error(y_pred=rr.predict(X_Train), y_true=y_train))}\")","84a722d0":"print(f\"Explained Variance Score: {explained_variance_score(y_pred=rr.predict(X_CV), y_true=y_cv)}\")\nprint(f\"RMSE: {np.sqrt(metrics.mean_squared_error(y_pred=rr.predict(X_CV), y_true=y_cv))}\")","e0b21f93":"gs_lr = GridSearchCV(Lasso(),\n                    param_grid={\n                        'alpha': [0.1, 0.3, 1, 3, 6, 8, 10]\n                    }, verbose=1)\n\ngs_lr.fit(X_Train, y_train)","91129530":"lasso = gs_lr.best_estimator_","da42a1db":"print(f\"Explained Variance Score: {explained_variance_score(y_pred=lasso.predict(X_Train), y_true=y_train)}\")\nprint(f\"RMSE: {np.sqrt(metrics.mean_squared_error(y_pred=lasso.predict(X_Train), y_true=y_train))}\")","842df5a5":"print(f\"Explained Variance Score: {explained_variance_score(y_pred=lasso.predict(X_CV), y_true=y_cv)}\")\nprint(f\"RMSE: {np.sqrt(metrics.mean_squared_error(y_pred=lasso.predict(X_CV), y_true=y_cv))}\")","2992a44c":"ann = Sequential()\nann.add(Dense(15, activation='relu'))\nann.add(Dense(10, activation='relu'))\nann.add(Dense(10, activation='relu'))\nann.add(Dense(5, activation='relu'))\nann.add(Dense(1))\nann.compile(optimizer='Adam', loss='mse')","213af167":"early_stop = EarlyStopping(monitor='val_loss', mode='min', patience=10)","65ccf9db":"ann.fit(x=np.array(X_Train),\n       y=np.array(y_train),\n       epochs=500,\n       verbose=1,\n       validation_data=(np.array(X_CV), np.array(y_cv)),\n       callbacks=[early_stop])","18c30ce8":"error_ann = pd.DataFrame(ann.history.history)","d3c9714f":"error_ann.plot()","72e2e557":"print(f\"Explained Variance Score: {explained_variance_score(y_pred=ann.predict(X_Train), y_true=y_train)}\")\nprint(f\"RMSE: {np.sqrt(metrics.mean_squared_error(y_pred=ann.predict(X_Train), y_true=y_train))}\")","0a8ee714":"print(f\"Explained Variance Score: {explained_variance_score(y_pred=ann.predict(X_CV), y_true=y_cv)}\")\nprint(f\"RMSE: {np.sqrt(metrics.mean_squared_error(y_pred=ann.predict(X_CV), y_true=y_cv))}\")","113f769a":"gs_xgb = GridSearchCV(XGBRegressor(booster='gbtree', subsample=0.75),\n                     param_grid={\n                         'min_child_weight': [4, 6, 8],\n                         'max_depth': [8, 10, 12],\n                         'eta': [0.3, 0.03], \n                         'learning_rate': [0.01, 0.1],\n                         'reg_alpha': [0.1, 1, 3],\n                         'reg_lambda': [0.1, 1, 2, 3]\n                     }, \n                     verbose=3, \n                     cv=3)\ngs_xgb.fit(X_Train, y_train)","12778efd":"xgb = gs_xgb.best_estimator_","7882a89f":"print(f\"Explained Variance Score: {explained_variance_score(y_pred=xgb.predict(X_Train), y_true=y_train)}\")\nprint(f\"RMSE: {np.sqrt(metrics.mean_squared_error(y_pred=xgb.predict(X_Train), y_true=y_train))}\")","b614d529":"print(f\"Explained Variance Score: {explained_variance_score(y_pred=xgb.predict(X_CV), y_true=y_cv)}\")\nprint(f\"RMSE: {np.sqrt(metrics.mean_squared_error(y_pred=xgb.predict(X_CV), y_true=y_cv))}\")","0b213f48":"print(f\"Explained Variance Score: {explained_variance_score(y_pred=xgb.predict(X_Test), y_true=y_test)}\")\nprint(f\"RMSE: {np.sqrt(metrics.mean_squared_error(y_pred=xgb.predict(X_Test), y_true=y_test))}\")","1a97cd87":"# XGBoost","64dcdad3":"# Lasso Regression","426df313":"# ANN","4931724d":"# EDA","e9728c8a":"Let's use KNN to impute the remaining values since it won't be feasible to drop the remaining values.","35fde7e6":"Let's remove features with less correlations. ","0d2e05b5":"### Performance on CV Set","f0e05253":"# Linear Regression","1534e029":"### Performance on CV Set","87c247f8":"Let's use the XGBoost model since it had the best scores. ","fb0913cb":"### Performance on CV Set","89b403e2":"# Ridge Regression","0492f50a":"# Performance on Test Set","9b4ed330":"A closer look at Life Expectancy's correlation with other features.","919af8ad":"# Models","dd239d3a":"### Performance on CV Set"}}