{"cell_type":{"0426c5ff":"code","0aa1e5fe":"code","b7ab68bb":"code","ef2147cf":"code","a89562bd":"code","7ff38dd6":"code","eb4bf18a":"code","c22b8ff9":"code","51ebfbb4":"code","9d8233cf":"code","a4da7186":"code","25e72fa2":"code","a0ba00c3":"code","5f80d849":"code","15504968":"code","07758864":"code","e9e5168b":"code","8a569023":"code","035736f0":"code","1396e3eb":"code","9979e3b3":"code","bc2e189a":"code","9514819e":"code","0f919ae5":"code","be7d520d":"code","5731109c":"code","6d9c5730":"code","db0b8545":"code","a239c382":"code","ad2ed751":"code","6d5ce565":"code","42bfc25e":"markdown","00ecaa4e":"markdown","033c4328":"markdown","57751c37":"markdown","95f59ff6":"markdown"},"source":{"0426c5ff":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0aa1e5fe":"import warnings\n\nwarnings.filterwarnings('ignore')","b7ab68bb":"plt.style.use('ggplot')","ef2147cf":"data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","a89562bd":"data.isna().sum()","7ff38dd6":"data.duplicated().sum()","eb4bf18a":"data.drop_duplicates(inplace=True)","c22b8ff9":"data.duplicated().sum()","51ebfbb4":"X, y = data.iloc[:,:-1], data['target']","9d8233cf":"fig = plt.figure(figsize=(9,5), dpi=80)\nax = fig.gca()\n\nsns.countplot(y, ax=ax)\nax.set_title('Count Target')","a4da7186":"import scipy as sc","25e72fa2":"col_qua = [i for i in data.columns if len(data[i].unique()) > 5]","a0ba00c3":"for i in col_qua:\n    \n    fig = plt.figure(figsize=(9,5), dpi=70)\n    ax = fig.gca()\n    \n    sns.distplot(X[i], ax=ax, fit=sc.stats.norm)\n    ax.set_title(i)","5f80d849":"for i in col_qua:\n    \n    sts, p_value = sc.stats.shapiro(X[i])\n    \n    fig = plt.figure(figsize=(9,5), dpi=70)\n    ax = fig.gca()\n    \n    sc.stats.probplot(X[i], dist='norm', plot=ax)\n    ax.set_title(f'{i}   Stats: {sts:.3f}   P_value: {p_value:.5f}')\n    \n   \n    \n    #print(i)\n    #print(f'Stats: {sts:.3f}\\tP_value: {p_value:.3f}\\n')","15504968":"!pip install pingouin","07758864":"import pingouin as pg","e9e5168b":"# corr\nmatrix_corr = X.corr(method='spearman')\n\nfig = plt.figure(figsize=(12,8), dpi=80)\nax = fig.gca()\n\nsns.heatmap(matrix_corr, annot=True, cbar=True, cmap='bwr', ax=ax)\nax.set_title('Matrix - Corr')","8a569023":"sig_corr = pg.pairwise_corr(X, method='spearman').loc[:,['X', 'Y', 'r', 'p-unc']]\n\nsig_corr[sig_corr['p-unc'] < 0.05].sort_values(by='p-unc')","035736f0":"from sklearn.model_selection import train_test_split","1396e3eb":"X_train, X_test, y_train, y_test = train_test_split(X, y)","9979e3b3":"y_test.value_counts()","bc2e189a":"from xgboost import XGBClassifier","9514819e":"xgb = XGBClassifier(n_estimators=300, reg_lambda=0.7, reg_alpha=0.7).fit(X_train, y_train)","0f919ae5":"pred = xgb.predict(X_test)","be7d520d":"from sklearn.metrics import classification_report","5731109c":"print(classification_report(y_test, pred))","6d9c5730":"from sklearn.model_selection import cross_val_score","db0b8545":"cross_val_score(xgb, X_test, y_test, cv=4, scoring='f1')","a239c382":"cross_val_score(xgb, X_test, y_test, cv=4, scoring='accuracy')","ad2ed751":"from sklearn.metrics import confusion_matrix","6d5ce565":"fig = plt.figure(figsize=(12,8), dpi=80)\nax = fig.gca()\n\nsns.heatmap(confusion_matrix(y_test, pred), annot=True, cmap='bwr', cbar=True, ax=ax)\nax.set_title('confusion Matrix')","42bfc25e":"# **Distributions of quantitative variables**","00ecaa4e":"***If the p_value is greater than 0.05 it is said that our variable does not have a normal distribution; but if the p_value is less than 0.05 it has a normal distribution***","033c4328":"***We will install Pingouin to verify the significance of the correlations.***","57751c37":"***The variables appear to have a normal distribution, we will verify this with Shapiro.***","95f59ff6":"*Classes are balanced*"}}