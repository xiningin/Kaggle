{"cell_type":{"cec689b1":"code","5ec47690":"code","3d0310d2":"code","758b5e7c":"code","980ce6c1":"code","cfd9c9dd":"code","1305cbc9":"code","5a460d83":"code","6987e451":"code","e50d6ddd":"code","06a350b3":"code","ba1a675b":"code","24c6f560":"code","4f9bfb62":"code","fe252e89":"code","172d6d0c":"code","0f27d847":"code","a835248b":"markdown","7009343d":"markdown","c0eec135":"markdown"},"source":{"cec689b1":"import numpy as np\nimport pandas as pd\nimport random\nimport category_encoders as ce\n\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import roc_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import ShuffleSplit\n\nfrom xgboost import XGBClassifier\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt","5ec47690":"data0 = pd.read_csv('..\/input\/iris\/Iris.csv')\ndata0[0:2].T","3d0310d2":"print(data0['Species'].unique())","758b5e7c":"Name0=data0['Species'].unique()\nName=sorted(Name0)\n\nM=list(range(3))    \nnormal_mapping=dict(zip(Name,M)) \nreverse_mapping=dict(zip(M,Name)) ","980ce6c1":"n=len(data0)\nprint(n)\nN=list(range(n))\nrandom.shuffle(N)","cfd9c9dd":"data0['Species']=data0['Species'].map(normal_mapping)","1305cbc9":"dataX=data0.drop('Species',axis=1)\ndataY=data0['Species']","5a460d83":"dataX=np.array(dataX)\ndataY=np.array(dataY)","6987e451":"trainX=dataX[N[0:(n\/\/10)*8]]\ntestX=dataX[N[(n\/\/10)*8:]]\ntrainY=dataY[N[0:(n\/\/10)*8]]\ntestY=dataY[N[(n\/\/10)*8:]]","e50d6ddd":"X = trainX\ny = trainY","06a350b3":"clf = XGBClassifier(max_depth=3, n_estimators=1000, learning_rate=0.01)","ba1a675b":"ss = ShuffleSplit(n_splits=5,train_size=0.8,test_size =0.2,random_state=0) \n\nfor train_index, test_index in ss.split(X): \n    X_train, X_test = X[train_index], X[test_index]\n    Y_train, Y_test = y[train_index], y[test_index]\n    clf.fit(X_train, Y_train) \n    print(clf.score(X_test, Y_test))","24c6f560":"PRED=clf.predict(testX)\nprint(PRED[0:10])\nANS=testY\nprint(ANS[0:10])","4f9bfb62":"from sklearn.metrics import accuracy_score\naccuracy=accuracy_score(ANS,PRED)\nprint(accuracy)","fe252e89":"from sklearn.metrics import classification_report\nprint(classification_report(ANS,PRED))","172d6d0c":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(ANS,PRED)\nprint(cm)\n\nplt.figure(figsize = (6,5))\ncm2 = pd.DataFrame(data=cm, index=Name, columns=Name)\nsns.heatmap(cm2, annot=True, cmap='Blues')\nplt.show()","0f27d847":"np.set_printoptions(precision=2)\n\ntitles_options = [\n        (\"Confusion matrix, without normalization\", None),\n        (\"Normalized confusion matrix: true\", 'true'),\n        (\"Normalized confusion matrix: pred\", 'pred'),\n        (\"Normalized confusion matrix: all\", 'all'),\n    ]\n\nfig = plt.figure(figsize=(14,12), facecolor=\"w\")\nfig.subplots_adjust(hspace=0.2, wspace=0.4)\n\nfor i, (title, normalize) in enumerate(titles_options):\n\n    ax = fig.add_subplot(2, 2, i+1)\n    disp = plot_confusion_matrix(\n                        clf,testX,testY,\n                        display_labels=Name,\n                        cmap=plt.cm.Blues,\n                        normalize=normalize,\n                        ax=ax,\n                    )\n\n    disp.ax_.set_title(title)\n\n    print(title)\n    print(disp.confusion_matrix)\n    \nplt.show()","a835248b":"# Modeling","7009343d":"# Data Preparation","c0eec135":"# Evaluation"}}