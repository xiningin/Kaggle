{"cell_type":{"f2d43c25":"code","a06801c4":"code","39b18744":"code","761871b3":"code","1c56aab2":"code","bd4c5fac":"code","28aec26b":"code","a4ae1b0d":"code","107793ca":"code","ef8d6bce":"code","27f9e5cc":"code","065c16e4":"code","d61a29aa":"code","e54be447":"code","9403e12e":"code","28ee2583":"code","30811467":"code","93fd1ce4":"code","14987117":"code","8062c95b":"code","2ca02112":"code","fbe3238e":"code","32db8578":"code","83805f8a":"code","3321d25f":"code","c86d901e":"markdown","e00a2fea":"markdown","4a3cd133":"markdown","294e7960":"markdown","39dc419b":"markdown","7d70e49f":"markdown","3d4d7d82":"markdown","df99b888":"markdown","89531f35":"markdown","61588260":"markdown","1eb55992":"markdown","13afc557":"markdown","17dfed6d":"markdown","12c02717":"markdown","7f119fdb":"markdown","f384637c":"markdown","6711093c":"markdown","dc5117b1":"markdown","7153d5b0":"markdown","61d2564d":"markdown","901c426d":"markdown","304cc259":"markdown","12057e58":"markdown","016d9a0b":"markdown","07691c7e":"markdown","bdaec86e":"markdown","e813abc5":"markdown","9d16999a":"markdown","b8d3f906":"markdown","be98c07b":"markdown","72f8213a":"markdown","ffdb32fc":"markdown"},"source":{"f2d43c25":"!pip install tsaug","a06801c4":"import os\nimport io\nimport pandas as pd\nimport numpy as np\n\nimport seaborn as sns\n\nimport matplotlib\n#%matplotlib inline\nfrom matplotlib import pyplot as plt\n#plt.rcParams['figure.figsize'] = 12, 10\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom PIL import Image\nfrom IPython.display import FileLink\n\nimport datetime as dt\nfrom datetime import date, timedelta, datetime\n\nimport sklearn\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\nfrom sklearn.model_selection import train_test_split, GridSearchCV, ShuffleSplit\nfrom sklearn.tree import DecisionTreeRegressor\n\nfrom scipy import stats\nimport statsmodels.api as sm\nfrom itertools import product\n\n# import xgboost as xgb\n# from xgboost import plot_tree\nfrom matplotlib.pylab import rcParams\n\n# from fbprophet import Prophet\n# from fbprophet.make_holidays import make_holidays_df\n# from fbprophet.diagnostics import cross_validation, performance_metrics\n# from fbprophet.plot import plot_cross_validation_metric\n# import holidays\n\nimport tsaug\nfrom tsaug import AddNoise, Convolve, Crop, Drift, Pool, Quantize, Resize, Reverse, TimeWarp\nfrom tsaug.visualization import plot\n\nimport warnings\nwarnings.simplefilter('ignore')","39b18744":"# Download training data\ndf = pd.read_csv('..\/input\/ammonium-prediction-in-river-water\/PB_1996_2019_NH4.csv', sep=';', header=0)\ndf","761871b3":"# Get data from station near Vinnytsia city (#27 - target) and 2 stations upstream (#28, #29)\ndf = df[df['ID_Station'].isin([27, 28, 29])]\ndf['date'] = pd.to_datetime(df['Date'], format='%d.%m.%Y', errors='coerce')\ndf = df[['ID_Station','date','NH4']]\ndisplay(df)","1c56aab2":"# Transform the table\ndf = pd.pivot_table(df, values='NH4', index=['date'], columns='ID_Station')\ndf = df[[27, 28, 29]]\ndf.columns = ['target', 'K1', \"K2\"]\ndf = df.dropna().reset_index(drop=False)\ndf","bd4c5fac":"# Selecting a target featute and removing it from training dataset\ntarget = df.pop('target')","28aec26b":"# Select the stations with the most data in test dataset\ndf2 = df[['date', 'K1']]\ndf2 = df2.dropna().reset_index(drop=True)","a4ae1b0d":"def draw_plot(X_aug, Y_aug):\n    plt.plot(X_aug, Y_aug, linewidth=5);\n    plt.plot(X, Y, color='r', linewidth=1);","107793ca":"def draw_plot_px(title_plot, X_aug, Y_aug, flag=True):\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=X_aug, y=Y_aug,\n                        mode='lines',\n                        name='Processed data'))\n    if flag:\n        fig.add_trace(go.Scatter(x=X, y=Y,\n                            mode='lines',\n                            name='Origin data'))\n    fig.update_layout(title=title_plot)\n    fig.show()","ef8d6bce":"def draw_plot_px2(title_plot, X_aug, Y_aug, label1, X_aug2, Y_aug2, label2):\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=X_aug, y=Y_aug,\n                        mode='lines',\n                        name=label1))\n    fig.add_trace(go.Scatter(x=X_aug2, y=Y_aug2,\n                        mode='lines',\n                        name=label2))\n    fig.add_trace(go.Scatter(x=X, y=Y,\n                        mode='lines',\n                        name='Origin data'))\n    fig.update_layout(title=title_plot)\n    fig.show()","27f9e5cc":"X = np.arange(len(df))\nY = df['K1'].tolist()\nplt.plot(X, Y);","065c16e4":"Y = np.array(Y)\nY[:3]","d61a29aa":"Y_aug, X_aug = tsaug.AddNoise(scale=0.1).augment(Y, X)\nY_aug2, X_aug2 = tsaug.AddNoise(scale=0.05).augment(Y, X)\ndraw_plot_px2('Adding Noise', X_aug, Y_aug, 'scale=0.1', X_aug2, Y_aug2,'scale=0.05')","e54be447":"Y_aug, X_aug = tsaug.Convolve(window=\"flat\", size=10).augment(Y, X)\nY_aug2, X_aug2 = tsaug.Convolve(window=\"flat\", size=30).augment(Y, X)\ndraw_plot_px2('Adding Convolution', X_aug, Y_aug, 'flat with size=10', X_aug2, Y_aug2, 'flat with size=30')","9403e12e":"Y_aug, X_aug = tsaug.Crop(size=100).augment(Y_aug, X_aug)\nY_aug, X_aug = tsaug.Convolve(window=\"flat\", size=10).augment(Y_aug, X_aug)\n\nY_aug2, X_aug2 = tsaug.Crop(size=10).augment(Y, X)\nY_aug2, X_aug2 = tsaug.Convolve(window=\"flat\", size=30).augment(Y_aug2, X_aug2)\ndraw_plot_px2('Adding Convolution', X_aug, Y_aug, 'Crop, size=100 & Flat, size=10', \n              X_aug2, Y_aug2, 'Crop, size=10 & Flat, size=30')","28ee2583":"Y_aug, X_aug = tsaug.Crop(size=100).augment(Y_aug, X_aug)\nY_aug, X_aug = tsaug.Convolve(window=\"flat\", size=10).augment(Y_aug, X_aug)\n\nY_aug2, X_aug2 = tsaug.Crop(size=10).augment(Y, X)\nY_aug2, X_aug2 = tsaug.Convolve(window=\"flat\", size=30).augment(Y_aug2, X_aug2)\ndraw_plot_px2('Adding Convolution', X_aug, Y_aug, 'Crop, size=100 & Flat, size=10', \n              X_aug2, Y_aug2, 'Crop, size=10 & Flat, size=30')","30811467":"Y_aug, X_aug = tsaug.Drift(max_drift=0.3, n_drift_points=5).augment(Y, X)\nY_aug2, X_aug2 = tsaug.Drift(max_drift=0.5, n_drift_points=5).augment(Y, X)\ndraw_plot_px2('Adding Drift', X_aug, Y_aug, 'max_drift=0.3, n_drift_points=5', \n              X_aug2, Y_aug2, 'max_drift=0.5, n_drift_points=5')","93fd1ce4":"Y_aug, X_aug = tsaug.Drift(max_drift=0.3, n_drift_points=5).augment(Y, X)\nY_aug2, X_aug2 = tsaug.Drift(max_drift=0.3, n_drift_points=3).augment(Y, X)\ndraw_plot_px2('Adding Drift', X_aug, Y_aug, 'max_drift=0.3, n_drift_points=5', \n              X_aug2, Y_aug2, 'max_drift=0.3, n_drift_points=3')","14987117":"Y_aug, X_aug = tsaug.Pool(size=2).augment(Y, X)\nY_aug2, X_aug2 = tsaug.Pool(size=5).augment(Y, X)\ndraw_plot_px2('Adding Pool', X_aug, Y_aug, 'size=2', X_aug2, Y_aug2, 'size=5')","8062c95b":"Y_aug, X_aug = tsaug.Quantize(n_levels=10).augment(Y, X)\nY_aug2, X_aug2 = tsaug.Quantize(n_levels=20).augment(Y, X)\ndraw_plot_px2('Adding Quantize', X_aug, Y_aug, 'n_levels=10', X_aug2, Y_aug2, 'n_levels=20')","2ca02112":"Y_aug, X_aug = tsaug.Resize(size=10).augment(Y, X)\nY_aug2, X_aug2 = tsaug.Resize(size=50).augment(Y, X)\ndraw_plot_px2('Adding Resize', X_aug, Y_aug, 'size=10', X_aug2, Y_aug2, 'size=50')","fbe3238e":"Y_aug, X_aug = tsaug.Reverse().augment(Y, X)\ndraw_plot_px('Adding Reverse', X_aug, Y_aug)","32db8578":"Y_aug, X_aug = tsaug.TimeWarp(n_speed_change=2, max_speed_ratio=3).augment(Y, X)\nY_aug2, X_aug2 = tsaug.TimeWarp(n_speed_change=20, max_speed_ratio=3).augment(Y, X)\ndraw_plot_px2('Adding TimeWarp', X_aug, Y_aug, 'n_speed_change=2, max_speed_ratio=3', \n              X_aug2, Y_aug2, 'n_speed_change=20, max_speed_ratio=3')","83805f8a":"Y_aug, X_aug = tsaug.TimeWarp(n_speed_change=20, max_speed_ratio=3).augment(Y, X)\nY_aug2, X_aug2 = tsaug.TimeWarp(n_speed_change=20, max_speed_ratio=5).augment(Y, X)\ndraw_plot_px2('Adding TimeWarp', X_aug, Y_aug, 'n_speed_change=20, max_speed_ratio=3', \n              X_aug2, Y_aug2, 'n_speed_change=20, max_speed_ratio=5')","3321d25f":"# Thanks to https:\/\/tsaug.readthedocs.io\/en\/stable\/quickstart.html\nmy_augmenter = (\n                TimeWarp() # random time warping\n                + Crop(size=100)  # random crop subsequences with length 300\n                + Quantize(n_levels=[10, 20, 30])  # random quantize to 10-, 20-, or 30- level sets\n                + Drift(max_drift=(0.1, 0.3)) @ 0.8  # with 80% probability, random drift the signal up to 10% - 50%\n                + Reverse() @ 0.5  # with 50% probability, reverse the sequence\n                )\n# Build a pipeline of augmenters \nY_aug, X_aug = my_augmenter.augment(Y, X)\ndraw_plot_px('Pipeline of Augmenters', X_aug, Y_aug)","c86d901e":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","e00a2fea":"### 4 Combined Augmentation<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","4a3cd133":"Source: https:\/\/tsaug.readthedocs.io\/en\/stable\/notebook\/Examples%20of%20augmenters.html","294e7960":"Random selection of the crop parameters","39dc419b":"**In time series prediction problems, there are often cases (such as in dataset [Ammonium prediction in river water](https:\/\/www.kaggle.com\/vbmokin\/ammonium-prediction-in-river-water)) when data is scarce, especially for use as training data for neural networks. Then augmentation of these time series can allow to artificially increase the size of a dataset, however it is necessary to do it carefully that the new dataset was relevant to a task and contained the same patterns, but it is already other task.**","7d70e49f":"Reduce the temporal resolution without changing the length.","3d4d7d82":"Drift the value of time series.\n\nThe augmenter drifts the value of time series from its original values randomly and smoothly. The extent of drifting is controlled by the maximal drift and the number of drift points.","df99b888":"## Dataset [Ammonium prediction in river water](https:\/\/www.kaggle.com\/vbmokin\/ammonium-prediction-in-river-water)","89531f35":"Reverse the time line of series.","61588260":"## 3. EDA & FE & Augmentation<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","1eb55992":"### 3.10. TimeWarp<a class=\"anchor\" id=\"3.10\"><\/a>\n\n[Back to Table of Contents](#0.1)","13afc557":"### 3.7. Quantize<a class=\"anchor\" id=\"3.7\"><\/a>\n\n[Back to Table of Contents](#0.1)","17dfed6d":"### 3.1. Basic data<a class=\"anchor\" id=\"3.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","12c02717":"Convolve time series with a kernel window.","7f119fdb":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download data](#2)\n1. [EDA & FE & Augmentation](#3)\n    - [Basic data](#3.1)\n    - [Add Noise](#3.2)\n    - [Convolve](#3.3)\n    - [Crop](#3.4)\n    - [Drift](#3.5)\n    - [Pool](#3.6)\n    - [Quantize](#3.7)\n    - [Resize](#3.8)\n    - [Reverse](#3.9)\n    - [TimeWarp](#3.10)\n1. [Combined Augmentation](#4)","f384637c":"### 3.8. Resize<a class=\"anchor\" id=\"3.8\"><\/a>\n\n[Back to Table of Contents](#0.1)","6711093c":"## 2. Download data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","dc5117b1":"### 3.6. Pool<a class=\"anchor\" id=\"3.6\"><\/a>\n\n[Back to Table of Contents](#0.1)","7153d5b0":"<a class=\"anchor\" id=\"0\"><\/a>\n# Time Series Augmentation","61d2564d":"Quantize time series to a level set.\n\nValues in a time series are rounded to the nearest level in the level set.","901c426d":"### 3.3. Convolve<a class=\"anchor\" id=\"3.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","304cc259":"Random time warping.\n\nThe augmenter random changed the speed of timeline. The time warping is controlled by the number of speed changes and the maximal ratio of max\/min speed.","12057e58":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","016d9a0b":"Crop random sub-sequences from time series.\n\nTo guarantee all output series have the same length, if the crop size is not deterministic, all crops must be resize to a fixed length.","07691c7e":"Add random noise to time series.\n\nThe noise added to every time point of a time series is independent and identically distributed.","bdaec86e":"### 3.2. AddNoise<a class=\"anchor\" id=\"3.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","e813abc5":"## Acknowledgements\n* [Data Science for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-for-tabular-data-advanced-techniques)\n* [EDA for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/eda-for-tabular-data-advanced-techniques)\n* [Datasets for river water quality prediction](https:\/\/www.kaggle.com\/vbmokin\/datasets-for-river-water-quality-prediction)\n* [The system \"MONITORING AND ENVIRONMENTAL ASSESSMENT OF WATER RESOURCES OF UKRAINE\", State Agency of Water Resources of Ukraine](http:\/\/monitoring.davr.gov.ua\/EcoWaterMon\/GDKMap\/Index)","9d16999a":"Dataset has data of the Ammonium ions concentration in river water (the maximum permissible value in Ukraine is 0.5 mg\/cub. dm).\n\nAmmonium ions (NH4) concentration is measured in mg\/cub. dm (ie milligrams in the cubic decimeter).\n\nDatasets has data of river water quality from 8 consecutive stations of the state water monitoring system for Pivdennyi Bug river (from the source of the river to the water intake of the city of Vinnytsia).\n\nTarget is a NH4 concentration in the river crossection with the water intake of the Vinnytsia city.\n\nData for the 1997-2019.","b8d3f906":"### 3.4. Crop<a class=\"anchor\" id=\"3.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","be98c07b":"Change the temporal resolution of time series.\n\nThe resized time series is obtained by linear interpolation of the original time series.","72f8213a":"### 3.9. Reverse<a class=\"anchor\" id=\"3.9\"><\/a>\n\n[Back to Table of Contents](#0.1)","ffdb32fc":"### 3.5. Drift<a class=\"anchor\" id=\"3.5\"><\/a>\n\n[Back to Table of Contents](#0.1)"}}