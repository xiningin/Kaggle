{"cell_type":{"e9fc4869":"code","ce48ed8b":"code","248e6183":"code","82bc8a7e":"code","46932219":"code","8dd36632":"code","dc447995":"code","81f3ad01":"code","345efd45":"code","85c00739":"code","bd0449aa":"code","84f16ea7":"code","b0c5bfd0":"code","c9aeee09":"code","a2365ca1":"code","693f2aa9":"code","915f92bf":"code","e33e1e37":"code","e0911658":"code","26a89957":"code","6c570c35":"code","7a0693d4":"code","3d97ba1f":"code","7dbfadc2":"code","3657aa7d":"code","29567b81":"code","72b4449d":"code","cbdab834":"code","081e05dc":"code","27cd8895":"code","a212292d":"code","2c9cc40c":"code","bb6eab67":"code","3ef75416":"code","d7d618a1":"code","beca385b":"code","51f5dcf2":"code","81322048":"code","3d95ad61":"code","c4e15025":"code","b647cb6e":"code","d9804d8f":"code","dd4110e3":"code","d3e656f2":"code","861c7f65":"code","e35cd0e9":"code","e3b262d1":"code","6998b3e9":"code","90c17685":"code","029b016a":"code","deaf1ff9":"code","ebd593dc":"code","44d1f05d":"code","bc27f401":"code","145edc5a":"code","3b3389e4":"code","c5b0a155":"code","81f4501a":"code","72e6c1b4":"code","86e8165b":"code","7f1fb3c2":"code","02946f9c":"code","6cea5f6d":"code","d852adcb":"code","d54c0546":"code","8a7aabdc":"code","18c46673":"code","1613fcbf":"code","87428f4f":"code","aac8eb10":"code","c64c229a":"code","9c7a842d":"code","f68640f7":"code","52fbbb59":"code","12b11113":"code","d7e5cea0":"markdown","1714e544":"markdown","203e3ed1":"markdown","896fa882":"markdown","410c1a1f":"markdown","f9bf4e0b":"markdown","dc232dc9":"markdown","7ff523cb":"markdown","9a304abf":"markdown","de85c719":"markdown","02078478":"markdown","38d0fecc":"markdown","a1e9bd34":"markdown","41812c02":"markdown","382684a4":"markdown","857702fb":"markdown","bd9fe4d8":"markdown","1824739a":"markdown","d7eea2ff":"markdown","2c3e8972":"markdown","e6d3f5b0":"markdown","1e696d7f":"markdown","29708bcb":"markdown","ccb76c9d":"markdown","eb279b18":"markdown","54a76e67":"markdown","5eff2eab":"markdown","0d188455":"markdown","cc2ae7f7":"markdown","952b1522":"markdown","f0942527":"markdown","203f35e8":"markdown","2fcb1896":"markdown","b74b57af":"markdown","6531d3d8":"markdown","810c0c0b":"markdown","730d898d":"markdown","42feacaf":"markdown","8b634f2d":"markdown","44c665ac":"markdown","fdc2faa4":"markdown","77143479":"markdown","0b153cd8":"markdown","ede7537b":"markdown","1c3c4c56":"markdown","e025a095":"markdown","ba522e03":"markdown","3fdda027":"markdown","f087af7f":"markdown","92e47ba6":"markdown","b6dd9521":"markdown","8779ec6d":"markdown","773346a9":"markdown","1757918e":"markdown","cde77b86":"markdown","a5fa6baa":"markdown","77184a26":"markdown","ee72ab9e":"markdown","b11c818e":"markdown","89f551a9":"markdown","5ecea6f8":"markdown","d959b592":"markdown","107d5f04":"markdown","39a1f1ce":"markdown","0d9f8d65":"markdown","f24c4521":"markdown","f6dc8a27":"markdown","390b2fb4":"markdown","e429c3f4":"markdown","2745b7fa":"markdown","0e3f9a57":"markdown","ae840238":"markdown","db516f0b":"markdown","694c50b8":"markdown","225c919c":"markdown","38e2c048":"markdown","dcf52a48":"markdown","8ff0ed28":"markdown","bff64a01":"markdown","9030969f":"markdown","e04b48a7":"markdown","ceb4c0ff":"markdown","3ec7e9b7":"markdown","2ef0d36d":"markdown","19b504c1":"markdown","388e6ffb":"markdown","4eda4a0c":"markdown","37173d14":"markdown"},"source":{"e9fc4869":"# data processing\nimport pandas as pd\nimport numpy as np\nimport functools\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# data visualization\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nprint(\"\\n Libraries imported successfully\")","ce48ed8b":"# set and define filepath\nballbyball_filepath = \"..\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv\"\nmatches_filepath = \"..\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv\"\n\n# create dataframe for analysis\nballplay = pd.read_csv(ballbyball_filepath)\nmatches = pd.read_csv(matches_filepath)","248e6183":"# display first 5 rows of matches dataframe\nmatches.head(3)","82bc8a7e":"# display first 5 rows of ballplay dataframe\nballplay.head(3)","46932219":"# give an overview \/ description of the dataset\nmatches.describe()","8dd36632":"# give an overview \/ description of the dataset \nballplay.describe()","dc447995":"# check for null values\nmatches.isna().sum()","81f3ad01":"# check for null values\nballplay.isna().sum()","345efd45":"# convert null values based on desired column\nmatches = matches.fillna(matches.mean())\nmatches.head(3)","85c00739":"#city = matches.city.unique()\n#city\n\n#venue = matches.venue.unique()\n#venue\n\n#team_1 = matches.team1.unique()\n#team_1\n\n#team_2 = matches.team2.unique()\n#team_2\n\n# replace repetitive values\nmatches = matches.replace({\"city\": {\"Bangalore\" : \"Bengaluru\"}, \n                           \"team1\": {\"Delhi Daredevils\" : \"Delhi Capitals\", \"Deccan Chargers\" : \"Sunrisers Hyderabad\", \"Pune Warriors\" : \"Rising Pune Supergiants\", \"Rising Pune Supergiant\" : \"Rising Pune Supergiants\"},\n                           \"team2\": {\"Delhi Daredevils\" : \"Delhi Capitals\", \"Deccan Chargers\" : \"Sunrisers Hyderabad\", \"Pune Warriors\" : \"Rising Pune Supergiants\", \"Rising Pune Supergiant\" : \"Rising Pune Supergiants\"},\n                           \"toss_winner\": {\"Delhi Daredevils\" : \"Delhi Capitals\", \"Deccan Chargers\" : \"Sunrisers Hyderabad\", \"Pune Warriors\" : \"Rising Pune Supergiants\", \"Rising Pune Supergiant\" : \"Rising Pune Supergiants\"},\n                           \"winner\": {\"Delhi Daredevils\" : \"Delhi Capitals\", \"Deccan Chargers\" : \"Sunrisers Hyderabad\", \"Pune Warriors\" : \"Rising Pune Supergiants\", \"Rising Pune Supergiant\" : \"Rising Pune Supergiants\"}})\n\nmatches = matches.round(2)\n\nmatches.head(5)","bd0449aa":"result_margin = matches[[\"result\", \"result_margin\"]].groupby([\"result\"], as_index=False).mean()","84f16ea7":"#plotting Graph\n\nfig = px.pie(result_margin, values='result_margin', names='result', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()","b0c5bfd0":"city_result = matches[[\"city\", \"result_margin\"]].groupby([\"city\"], as_index=False).mean()","c9aeee09":"#plotting Graph\n\nfig = px.bar(city_result, x=\"city\", y=\"result_margin\", color=\"result_margin\", template=\"simple_white\", title=\"Role of Hosting City in IPL Wins\")\nfig.show()","a2365ca1":"venue_result = matches[[\"venue\", \"result_margin\"]].groupby([\"venue\"], as_index=False).mean()","693f2aa9":"#plotting Graph\n\nfig = px.bar(venue_result, x=\"venue\", y=\"result_margin\", color=\"result_margin\", template=\"simple_white\", title=\"Role of Hosting Venue in IPL Wins\")\nfig.show()","915f92bf":"toss_margin = matches[[\"toss_decision\", \"result_margin\"]].groupby([\"toss_decision\"], as_index=False).mean()","e33e1e37":"#plotting Graph\n\nfig = px.pie(toss_margin, values='result_margin', names='toss_decision', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()","e0911658":"runs_max = ballplay[[\"id\", \"inning\", \"total_runs\"]].groupby([\"id\", \"inning\"], as_index=False).sum()\nruns_max = runs_max.sort_values(by=\"total_runs\", ascending=False)","26a89957":"#plotting Graph\n\nfig = px.histogram(runs_max, x='total_runs', marginal=\"rug\", color_discrete_sequence=['indianred'], template=\"simple_white\", title=\"Runs Scored Representation\")\nfig.show()","6c570c35":"wickets_max = ballplay[[\"id\", \"inning\", \"is_wicket\"]].groupby([\"id\", \"inning\"], as_index=False).sum()\nwickets_max = wickets_max.sort_values(by=\"is_wicket\", ascending=False)","7a0693d4":"#plotting Graph\n\nfig = px.histogram(wickets_max, x='is_wicket', color_discrete_sequence=['darkgreen'], template=\"simple_white\", title=\"Wickets Taken Representation\")\nfig.show()","3d97ba1f":"dismissal_max = ballplay[[\"is_wicket\", \"dismissal_kind\"]].groupby([\"dismissal_kind\"], as_index=False).sum()\ndismissal_max = dismissal_max.sort_values(by=\"dismissal_kind\", ascending=False)","7dbfadc2":"#plotting Graph\nfig, ax = plt.subplots(figsize=(25,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_total_runs = sns.barplot(x='dismissal_kind', y='is_wicket', data=dismissal_max, ax=ax)\nax.set_title(\"Types of Dismissals\", fontsize=15)\nax.set_ylabel(\"Wicket Count\")\nax.set_xlabel(\"Dismissal\")\nax.set_xticklabels(dismissal_max[\"dismissal_kind\"], rotation=90)\nplt.show()","3657aa7d":"umpire1 = matches[\"umpire1\"].unique() \numpire2 = matches[\"umpire2\"].unique()\numpire1_occurence = []\numpire2_occurence = []\n\nfor i in umpire1:\n    umpire1_occurence.append(matches.loc[(matches[\"umpire1\"] == i), \"id\"].count())\nfor i in umpire2:\n    umpire2_occurence.append(matches.loc[(matches[\"umpire2\"] == i), \"id\"].count())\n    \numpire1_max = pd.DataFrame(list(zip(umpire1, umpire1_occurence)), columns=[\"umpire1\", \"occurence\"])\numpire2_max = pd.DataFrame(list(zip(umpire2, umpire2_occurence)), columns=[\"umpire2\", \"occurence\"])","29567b81":"#plotting Graph\nfig, ax = plt.subplots(figsize=(35,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_total_runs = sns.barplot(x='umpire1', y='occurence', data=umpire1_max.reset_index(), ax=ax)\nax.set_title(\"Max Occurence Umpire 1\", fontsize=15)\nax.set_ylabel(\"Occurence\")\nax.set_xlabel(\"Umpire 1\")\nax.set_xticklabels(umpire1_max[\"umpire1\"], rotation=90)\nplt.show()\n\nfig, ax = plt.subplots(figsize=(35,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_total_runs = sns.barplot(x='umpire2', y='occurence', data=umpire2_max.reset_index(), ax=ax)\nax.set_title(\"Max Occurence Umpire 2\", fontsize=15)\nax.set_ylabel(\"Occurence\")\nax.set_xlabel(\"Umpire 2\")\nax.set_xticklabels(umpire2_max[\"umpire2\"], rotation=90)\nplt.show()","72b4449d":"total_inning_scores = ballplay[[\"id\", \"inning\", \"total_runs\"]].groupby(['id', 'inning'], as_index=False).sum()\ntotal_inning_extras = ballplay[[\"id\", \"inning\", \"extra_runs\"]].groupby(['id', 'inning'], as_index=False).sum()\ntotal_inning_wickets = ballplay[[\"id\", \"inning\", \"is_wicket\"]].groupby(['id', 'inning'], as_index=False).sum()","cbdab834":"#plotting Graph\nfig, ax = plt.subplots(figsize=(25,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_total_runs = sns.swarmplot(x='inning', y='total_runs', data=total_inning_scores.reset_index(), ax=ax)\nax.set_title(\"Runs per Innings in IPL\", fontsize=15)\nax.set_ylabel(\"Total Runs\")\nax.set_xlabel(\"Innings\")\nax.set_xticklabels(total_inning_scores['inning'], rotation=0)\nplt.show()","081e05dc":"#plotting Graph\nfig, ax = plt.subplots(figsize=(25,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_extra_runs = sns.violinplot(x='inning', y='extra_runs', data=total_inning_extras.reset_index(), ax=ax)\nax.set_title(\"Extra Runs per Innings in IPL\", fontsize=15)\nax.set_ylabel(\"Extra Runs\")\nax.set_xlabel(\"Innings\")\nax.set_xticklabels(total_inning_extras['inning'], rotation=0)\nplt.show()","27cd8895":"#plotting Graph\nfig, ax = plt.subplots(figsize=(25,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nsns.despine()\nsns.set_style(\"white\")\nsns_wickets = sns.boxplot(x='inning', y='is_wicket', data=total_inning_wickets.reset_index(), ax=ax)\nax.set_title(\"Wickets per Innings in IPL\", fontsize=15)\nax.set_ylabel(\"Wickets\")\nax.set_xlabel(\"Innings\")\nax.set_xticklabels(total_inning_wickets['inning'], rotation=0)\nplt.show()","a212292d":"score_by_over = ballplay[[\"over\", \"total_runs\"]].groupby(['over'], as_index=False).sum()\nextras_by_over = ballplay[[\"over\", \"extra_runs\"]].groupby(['over'], as_index=False).sum()\nwickets_by_over = ballplay[[\"over\", \"is_wicket\"]].groupby(['over'], as_index=False).sum()","2c9cc40c":"#plotting Graph\n\nfig = px.line(score_by_over, x=\"over\", y=\"total_runs\", template=\"simple_white\")\nfig.show()","bb6eab67":"#plotting Graph\n\nfig = px.line(extras_by_over, x=\"over\", y=\"extra_runs\", template=\"simple_white\")\nfig.show()","3ef75416":"#plotting Graph\n\nfig = px.line(wickets_by_over, x=\"over\", y=\"is_wicket\", template=\"simple_white\")\nfig.show()","d7d618a1":"batsman = ballplay[\"batsman\"].unique()\n\nruns = []\ninning1_score = []\ninning2_score = []\nwicket = []\nballs_play = []\n\n\nfor i in batsman:\n    runs.append(ballplay.loc[(ballplay[\"batsman\"] == i), \"batsman_runs\"].sum())\n    inning1_score.append(ballplay.loc[((ballplay[\"batsman\"] == i) & (ballplay[\"inning\"] == 1)), \"batsman_runs\"].sum())\n    inning2_score.append(ballplay.loc[((ballplay[\"batsman\"] == i) & (ballplay[\"inning\"] == 2)), \"batsman_runs\"].sum())\n    wicket.append(ballplay.loc[(ballplay[\"batsman\"] == i), \"is_wicket\"].sum())\n    balls_play.append(ballplay.loc[(ballplay[\"batsman\"] == i), \"batsman_runs\"].count())\n\naverage = [(int(x) \/ int(y)) if ((y > 0) & (x > 0)) else 0 for x,y in zip(runs, wicket)]\nstrike_rate = [((int(x) \/ int(y)) * 100) if ((y > 0) & (x > 0)) else 0 for x,y in zip(runs, balls_play)]\n\nbatsmen_stats = pd.DataFrame(list(zip(batsman, runs, inning1_score, inning2_score, balls_play, wicket, average, strike_rate)), columns=[\"batsman\", \"runs\", \"innings1 score\", \"innings2 score\", \"balls played\", \"wickets\", \"average\", \"strike rate\"])","beca385b":"#plotting Graph\n\nfig = px.scatter(batsmen_stats, x=\"batsman\", y=\"runs\", template=\"simple_white\", title=\"Total Runs Scored\")\nfig.update_xaxes(showticklabels=False)\nfig.show()","51f5dcf2":"#plotting Graph\nfig, ax = plt.subplots(figsize=(25,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nmost_runs = batsmen_stats.sort_values(by=\"runs\", ascending=False).iloc[0:20, [0, 1]]\n\nsns.despine()\nsns.set_style(\"white\")\nsns_mostruns = sns.barplot(x='batsman', y='runs', data=most_runs.reset_index(), ax=ax)\nax.set_title(\"Highest Run Scorers in IPL\", fontsize=15)\nax.set_ylabel(\"Runs\")\nax.set_xlabel(\"Batsman\")\nax.set_xticklabels(most_runs[\"batsman\"], rotation=90)\nplt.show()","81322048":"#plotting Graph\n\nfig = px.scatter(batsmen_stats, x=\"batsman\", y=\"innings1 score\", template=\"simple_white\", title=\"Inning 1 Scores\")\nfig.update_xaxes(showticklabels=False)\nfig.show()","3d95ad61":"#plotting Graph\nfig, ax = plt.subplots(figsize=(25,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nmost_runs_inning1 = batsmen_stats.sort_values(by=\"innings1 score\", ascending=False).iloc[0:20, [0, 2]]\n\nsns.despine()\nsns.set_style(\"white\")\nsns_mostrunsinning1 = sns.barplot(x='batsman', y='innings1 score', data=most_runs_inning1.reset_index(), ax=ax)\nax.set_title(\"Highest Run Scorers in IPL - Inning 1\", fontsize=15)\nax.set_ylabel(\"Runs\")\nax.set_xlabel(\"Batsman\")\nax.set_xticklabels(most_runs_inning1[\"batsman\"], rotation=90)\nplt.show()","c4e15025":"#plotting Graph\n\nfig = px.scatter(batsmen_stats, x=\"batsman\", y=\"innings2 score\", template=\"simple_white\", title=\"Inning 2 Scores\")\nfig.update_xaxes(showticklabels=False)\nfig.show()","b647cb6e":"#plotting Graph\nfig, ax = plt.subplots(figsize=(25,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nmost_runs_inning2 = batsmen_stats.sort_values(by=\"innings2 score\", ascending=False).iloc[0:20, [0, 3]]\n\nsns.despine()\nsns.set_style(\"white\")\nsns_mostrunsinning2 = sns.barplot(x='batsman', y='innings2 score', data=most_runs_inning2.reset_index(), ax=ax)\nax.set_title(\"Highest Run Scorers in IPL - Inning 2\", fontsize=15)\nax.set_ylabel(\"Runs\")\nax.set_xlabel(\"Batsman\")\nax.set_xticklabels(most_runs_inning2[\"batsman\"], rotation=90)\nplt.show()","d9804d8f":"#plotting Graph\n\nfig = px.scatter(batsmen_stats, x=\"batsman\", y=\"wickets\", template=\"simple_white\", title=\"Wicket Distribution\")\nfig.update_xaxes(showticklabels=False)\nfig.show()","dd4110e3":"#plotting Graph\nfig, ax = plt.subplots(figsize=(25,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nmost_wickets = batsmen_stats.sort_values(by=\"wickets\", ascending=False).iloc[0:20, [0, 5]]\n\nsns.despine()\nsns.set_style(\"white\")\nsns_mostwickets = sns.barplot(x='batsman', y='wickets', data=most_wickets.reset_index(), ax=ax)\nax.set_title(\"Maximum Outs in IPL\", fontsize=15)\nax.set_ylabel(\"Wickets\")\nax.set_xlabel(\"Batsman\")\nax.set_xticklabels(most_wickets[\"batsman\"], rotation=90)\nplt.show()","d3e656f2":"#plotting Graph\n\nfig = px.scatter(batsmen_stats, x=\"batsman\", y=\"balls played\", template=\"simple_white\", title=\"Balls Played\")\nfig.update_xaxes(showticklabels=False)\nfig.show()","861c7f65":"#plotting Graph\nfig, ax = plt.subplots(figsize=(25,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nmost_balls = batsmen_stats.sort_values(by=\"balls played\", ascending=False).iloc[0:20, [0, 4]]\n\nsns.despine()\nsns.set_style(\"white\")\nsns_mostballs = sns.barplot(x='batsman', y='balls played', data=most_balls.reset_index(), ax=ax)\nax.set_title(\"Most Balls Played in IPL\", fontsize=15)\nax.set_ylabel(\"Balls Played\")\nax.set_xlabel(\"Batsman\")\nax.set_xticklabels(most_balls[\"batsman\"], rotation=45)\nplt.show()","e35cd0e9":"#plotting Graph\n\nfig = px.scatter(batsmen_stats, x=\"batsman\", y=\"average\", template=\"simple_white\", title=\"Batsman Averages\")\nfig.update_xaxes(showticklabels=False)\nfig.show()","e3b262d1":"#plotting Graph\nfig, ax = plt.subplots(figsize=(25,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nmost_avg = batsmen_stats.sort_values(by=\"average\", ascending=False).iloc[0:20, [0, 6]]\n\nsns.despine()\nsns.set_style(\"white\")\nsns_bestavg = sns.barplot(x='batsman', y='average', data=most_avg.reset_index(), ax=ax)\nax.set_title(\"Best Batsman Average in IPL\", fontsize=15)\nax.set_ylabel(\"Average\")\nax.set_xlabel(\"Batsman\")\nax.set_xticklabels(most_avg[\"batsman\"], rotation=45)\nplt.show()","6998b3e9":"#plotting Graph\n\nfig = px.scatter(batsmen_stats, x=\"batsman\", y=\"strike rate\", template=\"simple_white\", title=\"Batsman Averages in IPL\")\nfig.update_xaxes(showticklabels=False)\nfig.show()","90c17685":"batsmen_stats = batsmen_stats.round(2)\nbatsmen_stats.head(10)","029b016a":"bowler = ballplay[\"bowler\"].unique()\nmax_extras = []\nextra_runs = []\nruns_given = []\nwickets = []\nballs_bowled = []\n\nfor i in bowler:\n    balls_bowled.append(ballplay.loc[(ballplay[\"bowler\"] == i), \"batsman_runs\"].count())\n    wickets.append(ballplay.loc[(ballplay[\"bowler\"] == i), \"is_wicket\"].sum())\n    runs_given.append(ballplay.loc[(ballplay[\"bowler\"] == i), \"total_runs\"].sum())\n    extra_runs.append(ballplay.loc[(ballplay[\"bowler\"] == i), \"extra_runs\"].sum())\n    \neconomy_rate = [((int(x) \/ (int(y))) * 6) if ((y > 0) & (x > 0)) else 0 for x,y in zip(runs_given, balls_bowled)]\n\nbowler_stats = pd.DataFrame(list(zip(bowler, wickets, balls_bowled, runs_given, extra_runs, economy_rate)), columns=[\"bowler\", \"wickets\", \"balls_bowled\", \"runs\", \"extras (runs)\", \"economy_rate\"])","deaf1ff9":"#plotting Graph\n\nfig = px.scatter(bowler_stats, x=\"bowler\", y=\"balls_bowled\", template=\"simple_white\", title=\"Balls Bowled in IPL\")\nfig.update_xaxes(showticklabels=False)\nfig.show()","ebd593dc":"#plotting Graph\nfig, ax = plt.subplots(figsize=(25,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nmost_balls = bowler_stats.sort_values(by=\"balls_bowled\", ascending=False).iloc[0:20, [0, 2]]\n\nsns.despine()\nsns.set_style(\"white\")\nsns_mostballs = sns.barplot(x='bowler', y='balls_bowled', data=most_balls.reset_index(), ax=ax)\nax.set_title(\"Most Balls Bowled in IPL\", fontsize=15)\nax.set_ylabel(\"Balls Bowled\")\nax.set_xlabel(\"Bowler\")\nax.set_xticklabels(most_balls[\"bowler\"], rotation=45)\nplt.show()","44d1f05d":"#plotting Graph\n\nfig = px.scatter(bowler_stats, x=\"bowler\", y=\"wickets\", template=\"simple_white\", title=\"Wickets Taken in IPL\")\nfig.update_xaxes(showticklabels=False)\nfig.show()","bc27f401":"#plotting Graph\nfig, ax = plt.subplots(figsize=(25,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nmost_wickets = bowler_stats.sort_values(by=\"wickets\", ascending=False).iloc[0:20, [0, 1]]\n\nsns.despine()\nsns.set_style(\"white\")\nsns_mostwickets = sns.barplot(x='bowler', y='wickets', data=most_wickets.reset_index(), ax=ax)\nax.set_title(\"Highest Wickets in IPL\", fontsize=15)\nax.set_ylabel(\"Wickets\")\nax.set_xlabel(\"Bowler\")\nax.set_xticklabels(most_wickets[\"bowler\"], rotation=90)\nplt.show()","145edc5a":"#plotting Graph\n\nfig = px.scatter(bowler_stats, x=\"bowler\", y=\"runs\", template=\"simple_white\", title=\"Total Runs Given\")\nfig.update_xaxes(showticklabels=False)\nfig.show()","3b3389e4":"#plotting Graph\nfig, ax = plt.subplots(figsize=(25,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nmost_runs_given = bowler_stats.sort_values(by=\"runs\", ascending=False).iloc[0:20, [0, 3]]\n\nsns.despine()\nsns.set_style(\"white\")\nsns_runsgiven = sns.barplot(x='bowler', y='runs', data=most_runs_given.reset_index(), ax=ax)\nax.set_title(\"Most Runs Given in IPL\", fontsize=15)\nax.set_ylabel(\"Runs Given\")\nax.set_xlabel(\"Bowler\")\nax.set_xticklabels(most_runs_given[\"bowler\"], rotation=90)\nplt.show()","c5b0a155":"#plotting Graph\n\nfig = px.scatter(bowler_stats, x=\"bowler\", y=\"extras (runs)\", template=\"simple_white\", title=\"Extra Runs Given\")\nfig.update_xaxes(showticklabels=False)\nfig.show()","81f4501a":"#plotting Graph\nfig, ax = plt.subplots(figsize=(25,5))\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = '#000000'\nplt.rcParams['axes.labelcolor']= '#000000'\nplt.rcParams['xtick.color'] = '#000000'\nplt.rcParams['ytick.color'] = '#000000'\nplt.rcParams['font.size']=12\n\nmost_extras = bowler_stats.sort_values(by=\"extras (runs)\", ascending=False).iloc[0:20, [0, 4]]\n\nsns.despine()\nsns.set_style(\"white\")\nsns_mostextras = sns.barplot(x='bowler', y='extras (runs)', data=most_extras.reset_index(), ax=ax)\nax.set_title(\"Most Extra Runs Given in IPL\", fontsize=15)\nax.set_ylabel(\"Extra Runs\")\nax.set_xlabel(\"Bowler\")\nax.set_xticklabels(most_extras[\"bowler\"], rotation=90)\nplt.show()","72e6c1b4":"#plotting Graph\n\nfig = px.scatter(bowler_stats, x=\"bowler\", y=\"economy_rate\", template=\"simple_white\", title=\"Economy Rate\")\nfig.update_xaxes(showticklabels=False)\nfig.show()","86e8165b":"bowler_stats = bowler_stats.round(2)\nbowler_stats.head(10)","7f1fb3c2":"best_players = matches[[\"id\", \"player_of_match\"]].groupby([\"player_of_match\"], as_index=False).count()","02946f9c":"#plotting Graph\n\nfig = px.scatter(best_players, x=\"player_of_match\", y=\"id\", color=\"id\", template=\"simple_white\", title=\"Best Batsman in IPL\")\nfig.update_xaxes(showticklabels=False)\nfig.show()","6cea5f6d":"toss_wins = matches[[\"id\", \"toss_decision\", \"result\"]].groupby([\"toss_decision\", \"result\"], as_index=False).count()","d852adcb":"# plotting Graph\n\nfig =px.bar(toss_wins, x='toss_decision', y='id', color='result', template=\"simple_white\", title=\"Toss Decisions and Match Wins in IPL\")\nfig.show()","d54c0546":"team_winner = matches[[\"id\", \"winner\", \"result\"]].groupby([\"winner\", \"result\"], as_index=False).count()","8a7aabdc":"#plotting Graph\n\nfig = px.bar(team_winner, x=\"winner\", y=\"id\", color='result', barmode='group', template=\"simple_white\", title=\"Team Wins in IPL\")\nfig.show()","18c46673":"runs_lims = pd.cut(batsmen_stats[\"runs\"], 3)\nstrikerate_lims = pd.cut(batsmen_stats[\"strike rate\"], 3)\navg_lims = pd.cut(batsmen_stats[\"average\"], 3)","1613fcbf":"batsmen_stats[\"runs\"].fillna(batsmen_stats[\"runs\"].dropna().median(), inplace=True)\nbatsmen_stats.loc[(batsmen_stats[\"runs\"] <= 1959), \"runs\"] = 1\nbatsmen_stats.loc[(batsmen_stats[\"runs\"] > 1959) & (batsmen_stats[\"runs\"] <= 3918), \"runs\"] = 2\nbatsmen_stats.loc[(batsmen_stats[\"runs\"] > 3918), \"runs\"] = 3\n\nbatsmen_stats[\"strike rate\"].fillna(batsmen_stats[\"strike rate\"].dropna().median(), inplace=True)\nbatsmen_stats.loc[(batsmen_stats[\"strike rate\"] <= 83), \"strike rate\"] = 1\nbatsmen_stats.loc[(batsmen_stats[\"strike rate\"] > 83) & (batsmen_stats[\"strike rate\"] <= 166), \"strike rate\"] = 2\nbatsmen_stats.loc[(batsmen_stats[\"strike rate\"] > 166), \"strike rate\"] = 3\n\nbatsmen_stats[\"average\"].fillna(batsmen_stats[\"average\"].dropna().median(), inplace=True)\nbatsmen_stats.loc[(batsmen_stats[\"average\"] <= 29), \"average\"] = 1\nbatsmen_stats.loc[(batsmen_stats[\"average\"] > 29) & (batsmen_stats[\"average\"] <= 58), \"average\"] = 2\nbatsmen_stats.loc[(batsmen_stats[\"average\"] > 58), \"average\"] = 3\n\nbatsmen_stats.head()","87428f4f":"wickets_lims = pd.cut(bowler_stats[\"wickets\"], 3)\neconomyrate_lims = pd.cut(bowler_stats[\"economy_rate\"], 3)","aac8eb10":"bowler_stats[\"wickets\"].fillna(bowler_stats[\"wickets\"].dropna().median(), inplace=True)\nbowler_stats.loc[(bowler_stats[\"wickets\"] <= 62), \"wickets\"] = 1\nbowler_stats.loc[(bowler_stats[\"wickets\"] > 62) & (bowler_stats[\"wickets\"] <= 125), \"wickets\"] = 2\nbowler_stats.loc[(bowler_stats[\"wickets\"] > 125), \"wickets\"] = 3\n\nbowler_stats[\"economy_rate\"].fillna(bowler_stats[\"economy_rate\"].dropna().median(), inplace=True)\nbowler_stats.loc[(bowler_stats[\"economy_rate\"] <= 7), \"economy_rate\"] = 1\nbowler_stats.loc[(bowler_stats[\"economy_rate\"] > 7) & (bowler_stats[\"economy_rate\"] <= 15), \"economy_rate\"] = 2\nbowler_stats.loc[(bowler_stats[\"economy_rate\"] > 15), \"economy_rate\"] = 3\n\nbowler_stats.head()","c64c229a":"top_batsman = batsmen_stats.loc[(batsmen_stats[\"runs\"] == 3) & (batsmen_stats[\"strike rate\"] >= 2) & (batsmen_stats[\"average\"] >= 2)].sort_values(\"balls played\", ascending=True)\nall_rounder_batsman = batsmen_stats.loc[(batsmen_stats[\"runs\"] <= 2) & (batsmen_stats[\"strike rate\"] <= 2) & (batsmen_stats[\"average\"] <= 2)].sort_values(\"balls played\", ascending=False)\nall_rounder_bowler = bowler_stats.loc[(bowler_stats[\"wickets\"] <= 2) & (bowler_stats[\"economy_rate\"] <= 2)].sort_values(\"balls_bowled\", ascending=False)\ntop_bowler = bowler_stats.loc[(bowler_stats[\"wickets\"] == 3) & (bowler_stats[\"economy_rate\"] >= 2)].sort_values(\"balls_bowled\", ascending=True)","9c7a842d":"top_batsman.head()","f68640f7":"all_rounder_batsman.head()","52fbbb59":"all_rounder_bowler.head()","12b11113":"top_bowler.head()","d7e5cea0":"A chart representing the division of wins amongst IPL matches","1714e544":"### Considering the data at our disposal, we will look through and analyse the following - \n\n* [Individual Match Scores and their rate of improvement](#improve)\n\n\n* [Result Margin](#result_margin) - \n    1. [Role of Win Result](#result_margin_result)\n    2. [Role of Particular City Hosting](#result_margin_city)\n    3. [Role of Particular Venue Hosting](#result_margin_venue)\n    4. [Role of Toss](#result_margin_toss)\n\n\n* [Match Stats](#match) - \n    1. [Highest Runs](#match_runs)\n    2. [Most Wickets](#match_wickets)\n    3. [Greatest Dismissals](#match_dismiss)\n    4. [Recurring Umpires](#match_ump)\n    \n\n* [Inning](#inning) - \n    1. [Total Score](#inning_tot_sc)\n    2. [Extras Score](#inning_tot_ex)\n    3. [Total Wickets](#inning_tot_wic)\n\n        \n* [Per Over](#over) - \n    1. [Mean Score](#over_sc)\n    2. [Mean Extras](#over_ex)\n    3. [Mean Wickets](#over_wic)\n\n\n* [Batsman Stats](#batsman) - \n    1. [Total runs scored](#batsman_runs)\n    2. [Runs scored in each innings](#batsman_runs_innings)\n    3. [Times a batsman has been declared out (number of wickets)](#batsman_wickets)\n    4. [Balls played in total](#batsman_balls)\n    5. [Batsman Average](#batsman_avg)\n    6. [Batsman Strike Rate](#batsman_strikerate)\n    \n    \n* [Bowler Stats](#bowler) - \n    1. [Total balls bowled](#bowler_balls)\n    2. [Total wickets taken](#bowler_wickets)\n    3. [Runs given](#bowler_runs)\n    4. [Extra runs given](#bowler_extras)\n    5. [Economy Rate of bowler](#bowler_ecorate)\n    \n    \n* [IPL Stats](#ipl) - \n    1. [Best Players](#ipl_player)\n    2. [Toss Wins](#ipl_toss)\n    3. [Best Team Performance](#ipl_team)\n    \n\n* [Drafting a team with the best players from our analysis](#self_team)","203e3ed1":"<a id=\"clean\"><\/a>\n## Data Cleaning","896fa882":"A distribution of economy rates per bowler","410c1a1f":"We will be sticking to using the mean of every column present in the dataset to fill in the null values across the dataset.","f9bf4e0b":"A chart representing frequency of Umpire 1 and Umpire 2 appearance","dc232dc9":"<a id=\"improve\"><\/a>\n### Individual Match Scores and Their Rate of Improvement","7ff523cb":"A distribution of extra runs given across matches","9a304abf":"A chart representing the divisions of toss in IPL","de85c719":"## Players can be selected among the four data subsets to create our team. ","02078478":"Our categories for each statistic per batsman produce the following limits - \n\n\n* Runs - \n    1. 0 to 1959\n    2. 1960 to 3918\n    3. 3919 to 5878\n\n\n* Strike Rate - \n    1. 0 to 83\n    2. 84 to 166\n    3. 167 to 250\n\n\n* Average - \n    1. 0 to 29\n    2. 30 to 58\n    3. 59 to 88","38d0fecc":"<a id=\"result_margin_venue\"><\/a>\n#### 3. Role of Particular Venue Hosting","a1e9bd34":"A distribution of wickets taken per batsman","41812c02":"### Importing Libraries","382684a4":"<a id=\"result_margin\"><\/a>\n### Result Margin","857702fb":"Our categories for each statistic per bowler produce the following limits - \n\n\n* Wickets - \n    1. 0 to 62\n    2. 63 to 125\n    3. 126 to 188\n\n\n* Economy Rate - \n    1. 0 to 7\n    2. 8 to 15\n    3. 16 to 23","bd9fe4d8":"A distribution of extra runs given per bowler","1824739a":"### Converting null Values","d7eea2ff":"<a id=\"match_runs\"><\/a>\n#### 1. Highest Runs","2c3e8972":"### Column Exploration & Manipulation","e6d3f5b0":"<a id=\"batsman_balls\"><\/a>\n#### 4. Balls Played in Total","1e696d7f":"A look through certain columns and replacing certain repetitive values","29708bcb":"A representation of wickets taken across a chart","ccb76c9d":"<a id=\"match_wickets\"><\/a>\n#### 2. Most Wickets","eb279b18":"<a id=\"ipl_toss\"><\/a>\n#### 2. Toss Wins","54a76e67":"<a id=\"inning\"><\/a>\n### Innings","5eff2eab":"A chart depicting the wins in IPL across hosting cities","0d188455":"A representation of the types of dismissals across a chart","cc2ae7f7":"A distribution of strike rates per batsman","952b1522":"<a id=\"import\"><\/a>\n## Importing \/ Invoking Datasets and Libraries\n","f0942527":"Our data cleaning process will involve the following - \n* A view of the description of the dataset\n* Checking for any null values\n* If need be, replacing null values with the mean of the column values\n* A look through individual columns of the datasets\n* Change or replace values across any necessary columns","203f35e8":"Toss Win Distribution based on IPL Match Wins","2fcb1896":"<a id=\"batsman\"><\/a>\n### Batsman Stats","b74b57af":"<a id=\"result_margin_city\"><\/a>\n#### 2. Role of Particular City Hosting","6531d3d8":"Inning 2 Score","810c0c0b":"Here is the dataset we used for computations regarding Bo","730d898d":"A chart depicting the wins in IPL across hosting venues","42feacaf":"<a id=\"bowler_ecorate\"><\/a>\n#### 5. Economy Rate of Bowler","8b634f2d":"A distribution of wickets taken across matches","44c665ac":"# Thank You. \n\n### If you like this analysis, please upvote. ","fdc2faa4":"<a id=\"ipl\"><\/a>\n### IPL Stats","77143479":"<a id=\"batsman_runs_innings\"><\/a>\n#### 2. Runs Scored in Each Inning","0b153cd8":"Best Players based on IPL Player of The Match Counts","ede7537b":"<a id=\"ipl_team\"><\/a>\n#### 3. Best Team Performance","1c3c4c56":"A distribution of balls played per batsman","e025a095":"<a id=\"over\"><\/a>\n### Per Over","ba522e03":"<a id=\"over_sc\"><\/a>\n#### 1. Mean Score","3fdda027":"<a id=\"inning_tot_ex\"><\/a>\n#### 2. Total Extras Score","f087af7f":"# IPL Data Analysis\n\n## Extensive Analysis into IPL stats from 2008 to 2020. \n\n#### Indian Premier League is a cricket tournament primarily hosted in India, consisting of 8-10 teams per season competing for the trophy. This dataset looks into the proceedings of the match, down to every ball bowled. We are going to take a look at this dataset and present a thorough analysis over a varied course of topics. ","92e47ba6":"Depiction of wickets taken per over","b6dd9521":"<a id=\"main\"><\/a>\n## Feature Engineering, Data Analysis and Visualization","8779ec6d":"<a id=\"over_ex\"><\/a>\n#### 2. Mean Extras Score","773346a9":"A distribution of balls bowled per bowler","1757918e":"A distribution of total runs scored across matches","cde77b86":"<a id=\"result_margin_toss\"><\/a>\n#### 4. Role of Toss","a5fa6baa":"<a id=\"match_ump\"><\/a>\n#### 4. Recurring Umpires","77184a26":"<a id=\"bowler_wickets\"><\/a>\n#### 2. Total Wickets Taken","ee72ab9e":"<a id=\"bowler_extras\"><\/a>\n#### 4. Extra Runs Given","b11c818e":"### Importing Datasets","89f551a9":"<a id=\"batsman_runs\"><\/a>\n#### 1. Total Runs Scored","5ecea6f8":"<a id=\"match_dismiss\"><\/a>\n#### 3. Greatest Dismissals","d959b592":"<a id=\"result_margin_result\"><\/a>\n#### 1. Role of Win Result","107d5f04":"<a id=\"ipl_batsman\"><\/a>\n#### 1. Best Players","39a1f1ce":"Here is the dataset for all calculations regarding Batsman Stats - ","0d9f8d65":"<a id=\"self_team\"><\/a>\n### Drafting A Team With The Best Players From Analysis","f24c4521":"<a id=\"inning_tot_sc\"><\/a>\n#### 1. Total Score","f6dc8a27":"Innings 1 Score","390b2fb4":"### Dataset Description","e429c3f4":"<a id=\"over_wic\"><\/a>\n#### 3. Mean Wicket Count","2745b7fa":"<a id=\"inning_tot_wic\"><\/a>\n#### 3. Total Wickets","0e3f9a57":"### The best players across IPL are marked across 3 categories. \n\n\n* Batsman\n* Bowler\n* All Rounder\n\n\n#### We will distribute the players across the categories in the following ways - \n\n\n* Divide the following categories into 3 valuations - Best, Average, Subpar\n\n    1. Batsman Runs Scored\n    2. Batsman Average\n    3. Batsman Strike Rate\n    4. Bowler Wickets Taken\n    5. Bowler Economy Rate\n\n\n* The Best Batsmen will have the highest runs scored in the lowest balls played\n* The Best Bowler will have the highest wickets taken in the lowest balls bowled\n* The All Rounders will have an average score across the batsman and bowler stats\n\n\n### After Distribution, we can select players based on our desire to build the perfect team.","ae840238":"Depiction of mean runs scored per over","db516f0b":"A chart depicting the team wins across IPL","694c50b8":"A distribution of averages per batsman","225c919c":"<a id=\"batsman_strikerate\"><\/a>\n#### 6. Batsman Strike Rate","38e2c048":"<a id=\"bowler\"><\/a>\n### Bowler Stats","dcf52a48":"A distribution of total runs given per bowler","8ff0ed28":"A distribution of wickets taken per bowler","bff64a01":"Depiction of mean extras given per over","9030969f":"A representation of runs scored across a chart","e04b48a7":"A distribution of total runs scored per batsman","ceb4c0ff":"For the data, we will use pretty basic and rudimentary data analysis techniques which will help us perform all the tasks mentioned above. In this partiular case, we will divide the work into five categories - \n* [Importing \/ Invoking Libraries and Datasets](#import)\n* [Data Cleaning](#clean)\n* [Feature Engineering](#main)\n* [Exploratory Data Analysis](#main)\n* [Data Visualization](#main)\n","3ec7e9b7":"<a id=\"match\"><\/a>\n### Match Stats","2ef0d36d":"<a id=\"batsman_wickets\"><\/a>\n#### 3. Times a Batsman Has Been Declared Out (Number of Wickets)","19b504c1":"<a id=\"batsman_avg\"><\/a>\n#### 5. Batsman Average","388e6ffb":"<a id=\"bowler_balls\"><\/a>\n#### 1. Balls Bowled","4eda4a0c":"<a id=\"bowler_runs\"><\/a>\n#### 3. Runs Given","37173d14":"### Check for Null Values"}}