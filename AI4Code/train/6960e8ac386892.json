{"cell_type":{"94d0d36e":"code","3af388a8":"code","c35ada4f":"code","dfee1f14":"code","6aa76b28":"code","65e2feb1":"code","281b75b2":"code","32098004":"code","126c1e17":"code","2a60ff0c":"code","a79026eb":"code","58218507":"code","9e17d5ff":"code","6b112b1e":"code","07fb8530":"code","cafeb957":"code","8cde1615":"code","8d59532f":"code","564d96f4":"code","c3d9cefa":"code","bd3bcf87":"code","7898ce95":"code","5dc45224":"code","e3e08e05":"code","87768375":"code","2b0dc02b":"code","e0b24d58":"code","424b3fe0":"code","9fc75523":"markdown","b640781b":"markdown","939a0bea":"markdown","20c0656c":"markdown","d51d85c4":"markdown","8fb808f5":"markdown","dff4e898":"markdown","3425801e":"markdown","1a1c5a6b":"markdown","f05f3f9d":"markdown","ffb142c4":"markdown","5c2f287e":"markdown"},"source":{"94d0d36e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3af388a8":"import gc\nimport random\n\nfrom IPython import display as ipd\nfrom tqdm import tqdm\n\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler, LabelEncoder\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold, KFold,GroupKFold\n\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, f1_score, confusion_matrix\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\nimport tensorflow as tf\nimport tensorflow.keras as keras\n\nfrom tensorflow.keras.models import Sequential, Model\n\nfrom tensorflow.keras.layers import InputLayer, SpatialDropout1D\nfrom tensorflow.keras.layers import add, concatenate, GlobalMaxPooling1D, GlobalAveragePooling1D\nfrom tensorflow.keras.layers import Dense, Input, Dropout, BatchNormalization, Activation, Conv1D, Flatten, MaxPooling1D\nfrom tensorflow.keras.layers import Multiply, Add, Concatenate, Flatten, Average, Lambda\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D\n\nfrom tensorflow.keras.optimizers import Adam, SGD\nfrom tensorflow.keras.callbacks import EarlyStopping, Callback, ModelCheckpoint, ReduceLROnPlateau\n\nfrom tensorflow.keras import backend as K\nfrom tensorflow_addons.optimizers import CyclicalLearningRate","c35ada4f":"def seeding(SEED, use_tf=False):\n    np.random.seed(SEED)\n    random.seed(SEED)\n    os.environ['PYTHONHASHSEED'] = str(SEED)\n    os.environ['TF_CUDNN_DETERMINISTIC'] = str(SEED)\n    if use_tf:\n        tf.random.set_seed(SEED)\n    print('seeding done!!!')\n    \n## https:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2022\/discussion\/298201\ndef SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)    ","dfee1f14":"RANDOM_SEED = 42\nDEBUG = True\n\nseeding(RANDOM_SEED)\n\ntrain = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/sample_submission.csv')","6aa76b28":"train.head()","65e2feb1":"## targets distribution by country\n\nf, (ax1,ax2,ax3) = plt.subplots(3, 1, figsize=(16, 16))\nsns.despine(f)\ng1 = sns.histplot( data=train[train['country'] == 'Finland'], x = 'num_sold', hue='product', ax=ax1,  palette=\"rainbow\")\ng1.set_title(\"Finland\")\ng2 = sns.histplot( data=train[train['country'] == 'Norway'], x = 'num_sold', hue='product', ax=ax2,  palette=\"rainbow\")\ng2.set_title(\"Norway\")\ng3 = sns.histplot( data=train[train['country'] == 'Sweden'], x = 'num_sold', hue='product', ax=ax3,  palette=\"rainbow\")\ng3.set_title(\"Sweden\")","281b75b2":"f, ax1 = plt.subplots(1, 1, figsize=(16, 6))\n\nsns.boxplot( data=train, x=\"country\", y=\"num_sold\", hue=\"product\", ax=ax1, palette=\"Spectral\")\nsns.despine(left=True)","32098004":"## Another nice way of showing distribution\n\nf, ax1 = plt.subplots(1, 1, figsize=(16, 6))\nproduct_order = [\"Kaggle Mug\", \"Kaggle Hat\", \"Kaggle Sticker\"]\nsns.boxenplot(x=\"product\", y=\"num_sold\", palette=\"rainbow\", hue='country', order=product_order, scale=\"linear\", data=train)","126c1e17":"def process_dates(df):\n    df.date = pd.to_datetime(df.date)\n    df['year'] = df.date.dt.year    \n    df['month'] = df.date.dt.month\n    df['week'] = df.date.dt.week\n    df['dayofweek'] = df.date.dt.dayofweek\n    df['dayofyear'] = df.date.dt.dayofyear\n    df['day'] = df.date.dt.day\n    return df\n\ntrain = process_dates(train)\ntest = process_dates(test)","2a60ff0c":"print(f'Train unique days: {train.day.unique().size}, test: {test.day.unique().size}')\nprint(f'Train unique weeks: {train.week.unique().size}, test: {test.week.unique().size}')\nprint(f'Train unique dayofweeks: {train.dayofweek.unique().size}, test: {train.dayofweek.unique().size}')\nprint(f'Train unique months: {train.month.unique().size}, test: {train.month.unique().size}')\nprint(f'Train unique dayofyear: {train.dayofyear.unique().size}, test: {train.dayofyear.unique().size}')","a79026eb":"target = train.num_sold\ntrain.drop(['row_id','num_sold','date'], axis=1, inplace=True)\ntest.drop(['row_id', 'date'], axis=1, inplace=True)","58218507":"country_encoder = LabelEncoder()\ntrain['country_enc'] = country_encoder.fit_transform(train['country'])\ntest['country_enc'] = country_encoder.transform(test['country'])\n\nstore_encoder = LabelEncoder()\ntrain['store_enc'] = store_encoder.fit_transform(train['store'])\ntest['store_enc'] = store_encoder.transform(test['store'])\n\nproduct_encoder = LabelEncoder()\ntrain['product_enc'] = product_encoder.fit_transform(train['product'])\ntest['product_enc'] = product_encoder.transform(test['product'])\n\ngroups = train.year\ntrain.drop(['country','store','product'], axis=1, inplace=True)\ntest.drop(['country','store','product'], axis=1, inplace=True)","9e17d5ff":"for col in train.columns:\n    train[col] = pd.Categorical(train[col])\nfor col in test.columns:\n    test[col] = pd.Categorical(test[col])","6b112b1e":"def create_model(units, dim, optimizer):\n    model = tf.keras.models.Sequential()\n    model.add(tf.keras.Input(shape=(dim,)))\n    model.add(tf.keras.layers.Dense(units = units*4, activation = 'relu'))\n    #model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Dense(units = units*2, activation = 'relu'))\n    #model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Dense(units = units, activation = 'relu'))\n    #model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Dense(units = 1, activation = 'linear'))\n    model.compile(optimizer = optimizer, loss = 'mean_absolute_error')\n    return model    ","07fb8530":"UNITS = 32\nEPOCHS = 200\nBATCH_SIZE = 1024\nTOTAL_SPLITS = 5\nLEARNING_RATE = 0.005\n\nm = create_model(UNITS, train.shape[1], Adam(learning_rate=LEARNING_RATE))\nm.summary()","cafeb957":"#scaler = RobustScaler()\n#train_scaled = scaler.fit_transform(train)\n#test_scaled = scaler.transform(test)","8cde1615":"lr = ReduceLROnPlateau(monitor=\"val_loss\", factor=0.7, patience=20, verbose=1)\nes = EarlyStopping(monitor=\"val_loss\", patience=60, verbose=1, mode=\"min\", restore_best_weights=True)\n\nscores = []\nmodels = []\nhistories = []\nfolds = StratifiedKFold(n_splits=TOTAL_SPLITS, shuffle=True, random_state=RANDOM_SEED)\nfor fold_n, (train_index, valid_index) in enumerate(folds.split(train, target)):\n    print('-'*15, '>', f'Fold {fold_n+1}', '<', '-'*15)\n    X_train, X_valid = train.iloc[train_index], train.iloc[valid_index]\n    y_train, y_valid = target.iloc[train_index], target.iloc[valid_index]    \n    \n    checkpoint_path = f'model_{fold_n}.h5'\n    checkpoint = tf.keras.callbacks.ModelCheckpoint(checkpoint_path, save_best_only=True)\n    \n    model = create_model(UNITS, train.shape[1], Adam(learning_rate=LEARNING_RATE))\n    history = model.fit(X_train, y_train, validation_data=(X_valid, y_valid), batch_size = BATCH_SIZE, epochs = EPOCHS, \n                    verbose=1, shuffle=True, callbacks=[lr, checkpoint])\n    \n    model.load_weights(checkpoint_path)\n    \n    oof_pred = model.predict(X_valid).reshape(-1)\n    score = SMAPE(y_valid, oof_pred)\n    print(f'OOF SMAPE: {score}')\n    \n    scores.append(score)\n    models.append(model)\n    histories.append(history)","8d59532f":"print(f'OOF SMAPE: { np.mean(scores)}')","564d96f4":"xx = range(0, EPOCHS)\ncol_metrics = [\"loss\", \"val_loss\", \"lr\"]\n\nf, (ax1, ax2) = plt.subplots(nrows = 1, ncols = 2, figsize=(16, 8))\nfor hist in histories:\n    df = pd.DataFrame(hist.history, columns=col_metrics)\n    ax1.plot( df[[col_metrics[0], col_metrics[1]]])\nax2.plot( df[[col_metrics[2]]])\n\nplt.show()","c3d9cefa":"y_pred = np.zeros( (len(models), len(test)))\n\nidx = 0\nfor model in models:\n    y_pred[idx] = model.predict(test).reshape(-1)\n    idx += 1    \n    \ny_pred = np.mean(y_pred, axis=0)    ","bd3bcf87":"submission['num_sold'] = np.round(y_pred).astype(int)\nsubmission.to_csv('submission.csv', index=False, float_format='%.6f')\nsubmission.head(20)","7898ce95":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv')\ntest['num_sold'] = 0\ntest['num_sold'] = np.round(y_pred).astype(int)","5dc45224":"f, (ax1,ax2) = plt.subplots(2, 1, figsize=(16, 10))\n\ng1 = sns.histplot( data=train[train['country'] == 'Finland'], x = 'num_sold', hue='product', ax=ax1,  palette=\"rainbow\")\ng1.set_title(\"Finland Train\")\n\ng2 = sns.histplot( data=test[test['country'] == 'Finland'], x = 'num_sold', hue='product', ax=ax2,  palette=\"rainbow\")\ng2.set_title(\"Finland Test\")\nplt.xlim(-20, 2000) ","e3e08e05":"f, (ax1,ax2) = plt.subplots(2, 1, figsize=(16, 10))\n\ng1 = sns.histplot( data=train[train['country'] == 'Norway'], x = 'num_sold', hue='product', ax=ax1,  palette=\"rainbow\")\ng1.set_title(\"Norway Train\")\n\ng2 = sns.histplot( data=test[test['country'] == 'Norway'], x = 'num_sold', hue='product', ax=ax2,  palette=\"rainbow\")\ng2.set_title(\"Norway Test\")\nplt.xlim(-20, 3000) ","87768375":"f, (ax1, ax2) = plt.subplots(2, 1, figsize=(16, 12))\nproduct_order = [\"Kaggle Mug\", \"Kaggle Hat\", \"Kaggle Sticker\"]\nsns.boxenplot(x=\"product\", y=\"num_sold\", palette=\"rainbow\", hue='country', order=product_order, scale=\"linear\", data=train, ax=ax1)\nsns.boxenplot(x=\"product\", y=\"num_sold\", palette=\"rainbow\", hue='country', order=product_order, scale=\"linear\", data=test, ax=ax2)","2b0dc02b":"train.date = pd.to_datetime(train.date)\ntest.date = pd.to_datetime(test.date)","e0b24d58":"f, (ax1, ax2, ax3,ax4) = plt.subplots(4, 1, figsize=(16, 24))\n\ng1 = sns.scatterplot(x=\"date\", y=\"num_sold\", palette=\"rainbow\", hue='country', data=train[train.date.dt.year==2015], ax=ax1)\ng1.set_title(\"Train - 2015\")\n\ng2 = sns.scatterplot(x=\"date\", y=\"num_sold\", palette=\"rainbow\", hue='country', data=train[train.date.dt.year==2016], ax=ax2)\ng2.set_title(\"Train - 2016\")\n\ng3 = sns.scatterplot(x=\"date\", y=\"num_sold\", palette=\"rainbow\", hue='country', data=train[train.date.dt.year==2017], ax=ax3)\ng3.set_title(\"Train - 2017\")\n\ng4 = sns.scatterplot(x=\"date\", y=\"num_sold\", palette=\"rainbow\", hue='country', data=train[train.date.dt.year==2018], ax=ax4)\ng4.set_title(\"Train - 2018\")\n\nplt.show()","424b3fe0":"f, ax1 = plt.subplots(1, 1, figsize=(16, 6))\n\ng1 = sns.scatterplot(x=\"date\", y=\"num_sold\", palette=\"rainbow\", hue='country', data=test[test.date.dt.year==2019], ax=ax1)\ng1.set_title(\"Test - 2019\")\n\nplt.show()","9fc75523":"### Model and train","b640781b":"### Encode category columns ","939a0bea":"### Compare predicted with train ","20c0656c":"### Utils","d51d85c4":"### Data Load","8fb808f5":"### Sales by year and country","dff4e898":"### Submission","3425801e":"## Targets distribution display","1a1c5a6b":"### ... To Be Continued","f05f3f9d":"### Plot metrics","ffb142c4":"## Display predicted compared to train data","5c2f287e":"### Very simple date-based FE"}}