{"cell_type":{"7e1c8376":"code","de7d0408":"code","413b428d":"code","ed974abc":"code","cbecba5d":"code","978071d0":"code","3f0cbe06":"code","903b07e9":"code","726bf688":"code","35932af0":"code","a74e7675":"code","0ce78fa4":"code","e12260b8":"code","a0f2404b":"code","0453da32":"code","748a8156":"code","8fd2507b":"code","6cc33859":"code","38bf76de":"code","3669d512":"code","514d81f5":"code","dfae010c":"code","ec3e2900":"code","89dc88b4":"code","c064b0aa":"code","4b8dd722":"markdown","591b002d":"markdown","d1931721":"markdown","708ccee5":"markdown","7a0205ac":"markdown","ee9211d4":"markdown"},"source":{"7e1c8376":"# Data Manipulation library\nimport numpy as np \nimport pandas as pd\n\n# Data visualisation libraries\nimport matplotlib.pyplot as plt \nimport seaborn as sns \n\n# Image Manipulation \nimport cv2 as cv\n\n# Evaluation and Splitting \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\n# Deep Learning Libraries\nimport keras \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Dropout, Conv2D, Lambda, MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization \nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils.np_utils import to_categorical\n","de7d0408":"# Uploading Data ( ONLY FOR COLLAB)\n# from google.colab import files \n# files.upload() ","413b428d":"# Loading Data \ntrain_data = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_data = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\n\n# Make original data copies \ntrain_og = train_data.copy() \ntest_og = test_data.copy() \nprint(train_data.shape, test_data.shape)","ed974abc":"# Sample of the data \nprint(train_data.head())\nprint(test_data.head())","cbecba5d":"# Extract only the features \nX = train_data.drop(['label'], axis = 1).values\ny = train_data['label'].values\ntest_X = test_data.values","978071d0":"# Grayscale Normalization \nX = X \/ 255.0\ntest_X = test_X \/ 255.0","3f0cbe06":"# Reshape the image data into 3 dimensions (height = 28pixels, width = 28px, 1)\n# because 28 x 28 = 784 \nX = X.reshape(-1, 28, 28, 1)\ntest_X = test_X.reshape(-1, 28, 28, 1)","903b07e9":"# One hot encode the labels. There are 10 labels so we add 10 new dimensions\ny = to_categorical(y)\nprint(y.shape)","726bf688":"# Train and validation splits \nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25, random_state=324)\nprint(X_train.shape, y_train.shape, X_val.shape, y_val.shape)","35932af0":"# Visulaisation of the data \nimages = X_train.reshape(X_train.shape[0], 28, 28)\n\nfig, axis = plt.subplots(1, 5, figsize=(20, 10))\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(images[i], cmap = 'binary')\n    digit = y_train[i].argmax()   # finding the number where the array has a 1 which will be the max value\n    ax.set(title = f\"The number is {digit}\")","a74e7675":"# Important parameters\nepochs = 50\nbatch_size = 64","0ce78fa4":"# Building the CNN Model\nmodel = Sequential() \nmodel.add(Conv2D(filters=64, kernel_size=(3,3),activation='relu', input_shape=(28,28,1)))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), activation='relu'))\nmodel.add(Dropout(0.1))\nmodel.add(MaxPooling2D(pool_size=(2,2))) # MaxPoolinglayer\n\n#model.add(Conv2D(filters=128, kernel_size = (3,3), activation='relu'))\nmodel.add(Dropout(0.1))\n# model.add(MaxPooling2D(pool_size=(2,2)))    \n# model.add(Conv2D(filters=256, kernel_size = (3,3), activation=\"relu\"))\n    \n# model.add(MaxPooling2D(pool_size=(2,2)))\n    \nmodel.add(Flatten())\n#model.add(BatchNormalization())\n#model.add(Dense(512,activation=\"relu\"))\n    \nmodel.add(Dense(10,activation=\"softmax\"))\n    \nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\nmodel.summary()","e12260b8":"# Using to prevent overfitting \n\ndatagen = ImageDataGenerator(featurewise_center=False, \n                             samplewise_center=False, \n                             featurewise_std_normalization=False, \n                             samplewise_std_normalization=False, \n                             zca_whitening=False,\n                             rotation_range=10, \n                             zoom_range=0.1,\n                             width_shift_range=0.1,\n                             height_shift_range=0.1,\n                             horizontal_flip=False,\n                             vertical_flip=False)\n\n#datagen.fit(X_train)\ntrain_gen = datagen.flow(X_train, y_train, batch_size=batch_size)\ntest_gen = datagen.flow(X_val, y_val, batch_size=batch_size)","a0f2404b":"# Model training \nmodel.fit(X, y, batch_size=batch_size, validation_split=0.2, epochs=10)","0453da32":"# Prediction \ny_pred = model.predict(X_val) # Predict encoded label as integers between 0-9\n\nY_pred = np.argmax(y_pred, 1) # Decode Predicted labels\nY_test = np.argmax(y_val, 1) # Decode labels\nacc_score = accuracy_score(y_true = Y_test, y_pred = Y_pred)\nprint(acc_score)","748a8156":"# Printing Model Summary\nmodel.summary()","8fd2507b":"results = model.predict_classes(test_X, verbose=1)\nprint(results)\n\n# select the index with the maximum probability\nresults = pd.Series(results,name=\"Label\")\n\n## Output file \nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"mnist.csv\",index=False)","6cc33859":"# Fit the model \nmodel_history = model.fit_generator(train_gen,\n                                    epochs = epochs,\n                                    steps_per_epoch = X_train.shape[0] \/\/ batch_size,\n                                    validation_data = test_gen,\n                                    validation_steps = X_val.shape[0] \/\/ batch_size)","38bf76de":"# Prediction \ny_pred = model.predict(X_val) # Predict encoded label as integers between 0-9\n\nY_pred = np.argmax(y_pred, 1) # Decode Predicted labels\nY_test = np.argmax(y_val, 1) # Decode labels\nacc_score = accuracy_score(y_true = Y_test, y_pred = Y_pred)\nprint(acc_score)","3669d512":"results = model.predict_classes(test_X, verbose=1)\nprint(results)\n\n# select the index with the maximum probability\nresults = pd.Series(results,name=\"Label\")\n\n## Output file \nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"mnist2.csv\",index=False)","514d81f5":"# Create model\nmodel3 = Sequential()\nmodel3.add(Conv2D(filters=8, kernel_size=(3,3),activation='relu', input_shape=(28,28,1)))\nmodel3.add(Conv2D(filters=8, kernel_size=(3,3), activation='relu'))\nmodel3.add(Dropout(0.1))\nmodel3.add(MaxPooling2D(pool_size=(2,2)))\nmodel3.add(Flatten())\nmodel3.add(Dense(10, activation='softmax'))\n# Compile and summarize\nmodel3.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel3.summary()","dfae010c":"# Train the model\nx1 = train_og.drop(labels = [\"label\"],axis = 1) \nx1=x1.values.reshape(-1, 28, 28, 1)\nx1 = x1 \/ 255.0\ny1 = train_og['label']\nmodel3.fit(x1, y1, epochs=30)","ec3e2900":"# Prediction \ny_pred = model3.predict(X_val) # Predict encoded label as integers between 0-9\n\nY_pred = np.argmax(y_pred, 1) # Decode Predicted labels\nY_test = np.argmax(y_val, 1) # Decode labels\nacc_score = accuracy_score(y_true = Y_test, y_pred = Y_pred)\nprint(acc_score)","89dc88b4":"# Prediction \ny_pred = model3.predict(X_val)\nX_val__ = X_val.reshape(X_val.shape[0], 28, 28)\n\nfig, axis = plt.subplots(4, 4, figsize=(12, 14))\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(X_val__[i], cmap='binary')\n    ax.set(title = f\"Real Number is {y_val[i].argmax()}\\nPredict Number is {y_pred[i].argmax()}\");","c064b0aa":"results = model3.predict_classes(test_X, verbose=1)\nprint(results)\n\n# select the index with the maximum probability\nresults = pd.Series(results,name=\"Label\")\n\n## Output file \nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"mnist3.csv\",index=False)","4b8dd722":"## Building the CNN","591b002d":"### Data Augmentation","d1931721":"### Importing necessary libraries","708ccee5":"# MNIST Image Recognition using Keras","7a0205ac":"## Low Parameter Model ","ee9211d4":"### Encoding"}}