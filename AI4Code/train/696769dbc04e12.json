{"cell_type":{"f6248224":"code","e389531f":"code","05133065":"code","71b30762":"code","fbd4ee02":"code","956a897a":"code","397c6a96":"code","36ae4d30":"code","043233be":"code","67744cf0":"code","fd31021e":"code","621011d1":"code","8644522b":"code","b705f2f2":"markdown","3b090ada":"markdown","7085937e":"markdown","f49fdeda":"markdown","6ea06898":"markdown","c0ca718c":"markdown","c851b8e9":"markdown","620fd339":"markdown","951ef91b":"markdown","ce17cff1":"markdown"},"source":{"f6248224":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\n","e389531f":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndata = pd.read_csv('\/kaggle\/input\/did-it-rain-in-seattle-19482017\/seattleWeather_1948-2017.csv') \ndata.head()","05133065":"#1. Drop the PRCP\ndata=data.drop([\"PRCP\"],axis=1)\n\n# 2 Converting object into datetime to extract day, month and year\nfrom datetime import datetime\ndata[\"DATE\"]=pd.to_datetime(data[\"DATE\"], format= \"%Y-%m-%d\")\n\n# Extract day, month and year\ndata[\"DAY\"]=data[\"DATE\"].dt.day\ndata[\"MONTH\"]=data[\"DATE\"].dt.month\ndata[\"YEAR\"]=data[\"DATE\"].dt.year\ndata=data.drop([\"DATE\"], axis=1)\n\n#Rearrange columns\ndata=data[[\"DAY\", \"MONTH\", \"YEAR\", \"TMAX\", \"TMIN\", \"RAIN\"]]\ndata.head()","71b30762":"data.tail()","fbd4ee02":"x=data.iloc[:,:-1].values\ny=data.iloc[:,-1].values","956a897a":"#Label Encoding for RAIN column\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ny=le.fit_transform(y)\ny","397c6a96":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=42)","36ae4d30":"from sklearn.preprocessing import StandardScaler\nss=StandardScaler()\nx_train=ss.fit_transform(x_train)\nx_test=ss.transform(x_test)","043233be":"# Importing the Keras libraries and packages\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\n\n# Initialising the ANN\nclassifier = Sequential()\n\n# Adding the input layer and the first hidden layer\nclassifier.add(Dense(units = 32, kernel_initializer = 'uniform', activation = 'relu', input_dim = 5))\n\n# Adding the second hidden layer\nclassifier.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'relu'))\n\n# Adding the third hidden layer\nclassifier.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu'))\n\n# Adding the output layer\nclassifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n\n# Compiling the ANN\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n# Fitting the ANN to the Training set\nclassifier.fit(x_train, y_train, batch_size = 10, epochs = 100)","67744cf0":"classifier.predict(ss.transform([[16,11,1992,54,30]]))>0.5\n","fd31021e":"y_pred=ann.predict(x_test)\ny_pred=(y_pred>0.5)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","621011d1":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm=confusion_matrix(y_test, y_pred)\ncm","8644522b":"accuracy_score(y_test, y_pred)","b705f2f2":"## Splitting the dataset for Training and Test set","3b090ada":"# Data Cleaning","7085937e":"## Present Confusion Matrix and Accuracy Score","f49fdeda":"### We need to drop particular columns, that we don't need. \n- Date, but we shall extract day, month and year instead\n- PRCP (otherwise it would be a cheating)\n","6ea06898":"## Prediction: ","c0ca718c":"##  Feature Scaling","c851b8e9":"- Day : 16\n- Month: 11\n- Year: 1992\n- TMAX:54\n- TMIN: 30\n","620fd339":"## Encoding ","951ef91b":"## Building the ANN","ce17cff1":"## Predicting the test set results"}}