{"cell_type":{"24a3634d":"code","0e2ce1d6":"code","23eece40":"code","f78bd59e":"code","d2399c0f":"code","6b6ba28b":"code","86b48cde":"code","ac1df9fd":"code","480bdcb8":"code","65a0fd29":"code","fd025976":"code","285808ac":"code","761c9d77":"code","a65d3c24":"code","20c864f7":"code","23e2f092":"code","53d0d26e":"code","812857a8":"code","a67ade9e":"code","a879c4b8":"code","2da2956d":"code","b8452097":"code","65ea6793":"code","2ba27214":"code","403bc8e1":"code","18397149":"code","2ae5525f":"code","bdc1f76d":"code","f6f15556":"code","a1564a54":"code","81631a36":"code","7551d383":"code","55972f97":"code","64553709":"code","a7da25e7":"markdown","ee5738ae":"markdown","dfa3f6d8":"markdown","6e24ae80":"markdown","172a6c05":"markdown","5b1a9421":"markdown","f7e3b707":"markdown"},"source":{"24a3634d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e2ce1d6":"import pandas as ps\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","23eece40":"train_data=pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_data=pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n","f78bd59e":"train_data","d2399c0f":"test_data","6b6ba28b":"train_data.shape","86b48cde":"X=train_data.drop('label',axis=1)\ny=train_data['label']","ac1df9fd":"X","480bdcb8":"y","65a0fd29":"X.max()","fd025976":"X.min()","285808ac":"X.shape","761c9d77":"X=X\/255.0\ntest_data=test_data\/255.0","a65d3c24":"X=X.values.reshape(-1,28,28,1)\ntest_data=test_data.values.reshape(-1,28,28,1)\n","20c864f7":"X.shape","23e2f092":"y.shape","53d0d26e":"test_data.shape","812857a8":"y","a67ade9e":"from tensorflow.keras.utils import to_categorical","a879c4b8":"y_train=to_categorical(y,num_classes=10)","2da2956d":"y_train","b8452097":"y_train.shape","65ea6793":"from sklearn.model_selection import train_test_split","2ba27214":"X_train, X_test, y_train, y_test = train_test_split(X, y_train, test_size=0.1, random_state=42)","403bc8e1":"X_train.shape","18397149":"y_train.shape","2ae5525f":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D","bdc1f76d":"\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\n\n\nmodel.compile(optimizer = 'adam' , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","f6f15556":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop=EarlyStopping(monitor='val_loss',mode='min',verbose=1,patience=2)","a1564a54":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","81631a36":"image_gen=ImageDataGenerator(rotation_range=10,\n                            width_shift_range=0.1,\n                            height_shift_range=0.1,\n                            shear_range=0.1,\n                            zoom_range=0.1,\n                            horizontal_flip=False,\n                            vertical_flip=False, \n                            fill_mode='nearest')\nimage_gen.fit(X_train)","7551d383":"history = model.fit_generator(image_gen.flow(X_train,y_train, batch_size=16),\n                              epochs = 8, validation_data = (X_test,y_test),\n                              callbacks=[early_stop])","55972f97":"results = model.predict(test_data)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","64553709":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"digit_recognizer.csv\",index=False)","a7da25e7":"# **reshaping the data**","ee5738ae":"# **As we can see that y values are numbers like 1,2,3.... so if we feed this into the neural network then network will assume it as a continous values so we have to convert this into a categorival variables**","dfa3f6d8":"# **Model Building**","6e24ae80":"# **Scaling the data**","172a6c05":"# **Data Augmentation**","5b1a9421":"# **Splitting**","f7e3b707":"# **X and y for training**"}}