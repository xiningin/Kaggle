{"cell_type":{"90bebcb5":"code","92fd3cd4":"code","3dc101b5":"code","fee441ce":"code","d5955814":"code","d995d041":"code","cdbf9721":"code","35108a63":"code","b08946f2":"code","68630b86":"markdown","1c18a18f":"markdown","9752df8f":"markdown"},"source":{"90bebcb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","92fd3cd4":"#!pip install vaex\n!pip install \"dask[complete]\"","3dc101b5":"import dask\nimport dask.dataframe as dd\n\n# It is just a logical read , nothing in memory at this moment\ndf = dd.read_csv('..\/input\/riiid-test-answer-prediction\/train.csv',low_memory=False)","fee441ce":"# As a logical read only column info is there not about rows \ndf.info()","d5955814":"# Delayed for rows just to \ndf.shape","d995d041":"# but you can read as you want \n# like simple dataframe\n# find more on dask site https:\/\/stories.dask.org\/en\/latest\/\ndf.head()","cdbf9721":"%%time\n# Loop over 1,000,000 ( 1 million )\n# look time taken\nfor index , data in df.iterrows():\n    #print(data)\n    #print(20*'--')\n    if index == 1000*1000 :\n        break\n        ","35108a63":"%%time\n\n# Find correct answer of each user \ndf.groupby(df.user_id).answered_correctly.sum().compute()","b08946f2":"# From above output last user id is 2147482888     \n# lets check tail of dataframe\ndf.tail()","68630b86":"# Loop over whole dataframe","1c18a18f":"# Read Full train data in dask dataframe","9752df8f":"# Install dask lib"}}