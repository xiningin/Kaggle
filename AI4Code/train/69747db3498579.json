{"cell_type":{"ae117467":"code","77f1b2c2":"code","5ea86201":"code","990a94d0":"code","ac522836":"code","7f2fcf6d":"code","3a9eeb6b":"code","377ce4f6":"code","037ae8bb":"code","22a70d7d":"code","b151c3f1":"code","f0241c92":"code","b9c1c219":"code","14659ef2":"code","45511b90":"code","0b681755":"code","75238603":"code","d4aa1cc2":"code","91800bd6":"code","e38bc04b":"code","f90134b4":"code","8b50efb9":"code","2e82d6d6":"code","f377cea2":"code","777e90f5":"code","a2f8f40b":"code","a0e0746d":"code","e0f81463":"code","0d8c4c4b":"code","49523cc3":"code","eafec16a":"code","b101b7a9":"code","3b945c4b":"code","686e7159":"code","9b8f2d05":"markdown","90fc4164":"markdown","d5bbe248":"markdown","53e1fd6d":"markdown"},"source":{"ae117467":"import pandas as pd\nimport numpy as np\n\nfrom sklearn import metrics\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.expand_frame_repr', False)\npd.set_option('max_colwidth', -1)\n\nimport pickle\nimport warnings\nwarnings.filterwarnings('ignore')","77f1b2c2":"raw_game_data = pd.read_csv('..\/input\/2012-18_teamBoxScore.csv')\nraw_game_data","5ea86201":"game_data = raw_game_data[1::2].reset_index(drop=True)\ngame_data.columns = map(str.upper, game_data.columns)\ngame_data['TEAMRSLT'] = game_data.apply(lambda x: 1 if x['TEAMRSLT'] == 'Win' else 0, axis=1)\ncolumns = ['TEAMRSLT', 'TEAMFGM', 'TEAMFGA', 'TEAMFG%', 'TEAM3PM', 'TEAM3PA', 'TEAM3P%', 'TEAMFTM',\n           'TEAMFTA', 'TEAMFT%', 'TEAMOREB', 'TEAMDREB', 'TEAMREB', 'TEAMAST', 'TEAMTOV', 'TEAMSTL',\n           'TEAMBLK', 'TEAMPF', 'OPPTFGM', 'OPPTFGA', 'OPPTFG%', 'OPPT3PM', 'OPPT3PA', \n           'OPPT3P%', 'OPPTFTM', 'OPPTFTA', 'OPPTFT%', 'OPPTOREB', 'OPPTDREB', 'OPPTREB', 'OPPTAST', 'OPPTTOV',\n           'OPPTSTL', 'OPPTBLK', 'OPPTPF']\ngame_data = game_data.filter(columns)\ngame_data","990a94d0":"game_data.fillna(0, inplace = True)\ngame_data.isnull().sum().max()","ac522836":"from sklearn.decomposition import PCA\n\nn_components = game_data.shape[1]\npca = PCA(n_components = n_components)\npca.fit(game_data)\n\nexplained_variance_ratio = pca.explained_variance_ratio_ \ncum_explained_variance_ratio = np.cumsum(pca.explained_variance_ratio_)\ncomponents_ = pca.components_ \nlst = []\nfor i in range (0, n_components):\n    lst.append([i+1, round(explained_variance_ratio[i],6), cum_explained_variance_ratio[i]])\npca_predictor = pd.DataFrame(lst)\npca_predictor.columns = ['Component', 'Explained Variance', 'Cumulative Explained Variance']\npca_predictor","7f2fcf6d":"game_data_x = game_data.drop(columns=['TEAMRSLT'])\ngame_data_y = game_data['TEAMRSLT']","3a9eeb6b":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(game_data_x, game_data_y, test_size=0.2, random_state=2)\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","377ce4f6":"#knn \nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(x_train, y_train)\nknn_pred = knn.predict(x_test)\n\nmetrics.accuracy_score(y_test, knn_pred)","037ae8bb":"#linear svm\nfrom sklearn.svm import LinearSVC\n\nsvc_linear = LinearSVC()\nsvc_linear.fit(x_train, y_train)\npred_svc = svc_linear.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_svc)","22a70d7d":"#random forrest classifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nrandom_forest = RandomForestClassifier()\nrandom_forest.fit(x_train, y_train)\npred_random_forest = random_forest.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_random_forest)","b151c3f1":"# Gradient Treee Boosting\nfrom sklearn.ensemble import GradientBoostingClassifier\n\ngradient_boosting = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=1, random_state=0)\ngradient_boosting = gradient_boosting.fit(x_train, y_train)\npred_gradient_boosting = gradient_boosting.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_gradient_boosting)","f0241c92":"# ExtraTreesClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\n\nextra_tree = ExtraTreesClassifier(n_estimators=100)\nextra_tree = extra_tree.fit(x_train, y_train)\npred_extra_tree = extra_tree.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_extra_tree)","b9c1c219":"# MLPClassifier\nfrom sklearn.neural_network import MLPClassifier\n\nMLP_classifier = MLPClassifier()\nMLP_classifier = MLP_classifier.fit(x_train, y_train)\npred_MLP_classifier = MLP_classifier.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_MLP_classifier)","14659ef2":"# SVC\nfrom sklearn.svm import SVC\n\nlinear_SVC = SVC()\nlinear_SVC = linear_SVC.fit(x_train, y_train)\npred_linear_SVC = linear_SVC.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_linear_SVC)","45511b90":"filename = 'nba_pred_modelv1.sav'\npickle.dump(gradient_boosting, open(filename, 'wb'))","0b681755":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\ngame_data_scaled_x = pd.DataFrame(scaler.fit_transform(game_data_x))\ngame_data_scaled_x.columns = game_data_x.columns","75238603":"pca = PCA(n_components=15)\npca = pca.fit(game_data_scaled_x)\nstats_transformed = pca.fit_transform(game_data_scaled_x)\nstats_transformed.shape","d4aa1cc2":"x_train, x_test, y_train, y_test = train_test_split(stats_transformed, game_data_y, test_size=0.2, random_state=2)","91800bd6":"gradient_boosting = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=1, random_state=0)\ngradient_boosting = gradient_boosting.fit(x_train, y_train)\npred_gradient_boosting = gradient_boosting.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_gradient_boosting)","e38bc04b":"linear_SVC = SVC()\nlinear_SVC = linear_SVC.fit(x_train, y_train)\npred_linear_SVC = linear_SVC.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_linear_SVC)","f90134b4":"filename = 'nba_pred_modelv1.sav'\npickle.dump(gradient_boosting, open(filename, 'wb'))\npickle.dump(pca, open('pca', 'wb'))","8b50efb9":"games_stat = raw_game_data.copy()\ngames_stat.columns = map(str.upper, games_stat.columns)\ngames_stat['TEAMRSLT'] = games_stat.apply(lambda x: 1 if x['TEAMRSLT'] == 'Win' else 0, axis=1)\n\nid = 1;\ngame_ids = [];\nfor i in range(0, len(games_stat), 2):\n    game_ids.append(id)\n    game_ids.append(id)\n    id += 1\n\ngames_stat['GAME_ID'] = game_ids\n\nimportance_columns = ['TEAMFGM', 'TEAMFGA', 'TEAMFG%', 'TEAM3PM', 'TEAM3PA', 'TEAM3P%', 'TEAMFTM', \n                      'TEAMFTA', 'TEAMFT%', 'TEAMAST', 'TEAMSTL', 'TEAMBLK', 'TEAMPF', \n                      'OPPTFGM', 'OPPTFGA', 'OPPTFG%', 'OPPT3PM', 'OPPT3PA', 'OPPT3P%', 'OPPTFTM',\n                      'OPPTFTA', 'OPPTFT%', 'OPPTAST', 'OPPTSTL', 'OPPTBLK', 'OPPTPF']\n\ndef get_columns_mean(columns, data_frame_describe, data_frame):\n    for column in columns:\n        mean = data_frame_describe[column]['mean']\n        data_frame[column] = round(mean, 5)\n    \ndef get_teams_mean(game_id, home_team, away_team):\n    columns = ['TEAMFGM', 'TEAMFGA', 'TEAMFG%', 'TEAM3PM', 'TEAM3PA', 'TEAM3P%', 'TEAMFTM',\n           'TEAMFTA', 'TEAMFT%', 'TEAMOREB', 'TEAMDREB', 'TEAMREB', 'TEAMAST', 'TEAMTOV', 'TEAMSTL',\n           'TEAMBLK', 'TEAMPF']\n    \n    opposite_column = ['OPPTFGM', 'OPPTFGA', 'OPPTFG%', 'OPPT3PM', 'OPPT3PA', 'OPPT3P%', 'OPPTFTM', \n            'OPPTFTA', 'OPPTFT%', 'OPPTOREB', 'OPPTDREB', 'OPPTREB', 'OPPTAST', 'OPPTTOV',  'OPPTSTL', \n            'OPPTBLK', 'OPPTPF']\n        \n    HOME = games_stat.loc[(games_stat['GAME_ID'] < game_id) & (games_stat['TEAMABBR'] == home_team), :][-5:]\n    AWAY = games_stat.loc[(games_stat['GAME_ID'] < game_id) & (games_stat['TEAMABBR'] == away_team), :][-5:]\n\n    HOME = HOME.filter(columns)\n    AWAY = AWAY.filter(columns)\n\n    get_columns_mean(HOME.columns, HOME.describe(), HOME)\n    HOME = HOME.iloc[-1:,:]\n\n    get_columns_mean(AWAY.columns, AWAY.describe(), AWAY)\n    AWAY = AWAY.iloc[-1:,:]\n\n    rename_column = dict()\n    for i in range(len(columns)):\n        rename_column[columns[i]] = opposite_column[i]\n    \n    AWAY.rename(columns=rename_column, inplace=True)\n    \n    HOME['key'] = 1\n    AWAY['key'] = 1\n    AWAY_HOME = pd.merge(HOME, AWAY, how='outer')\n    del AWAY_HOME['key']\n\n    AWAY_HOME = AWAY_HOME.filter(importance_columns)\n    AWAY_HOME = list(AWAY_HOME.iloc[0,:])\n    return AWAY_HOME","2e82d6d6":"# get_teams_mean(1, 'CLE', 'NY')\n\ngames = []\nresults = []\n\nfor step in range(50, len(games_stat), 2):\n    team_home = games_stat.iloc[step + 1]\n    team_away = games_stat.iloc[step]\n    game_id = team_home['GAME_ID']\n    team_home_name = team_home['TEAMABBR']\n    team_away_name = team_away['TEAMABBR']\n    result = team_home['TEAMRSLT']\n\n    game = get_teams_mean(game_id, team_home_name, team_away_name)\n    games.append(game)\n    results.append(result)","f377cea2":"game_data_training = pd.DataFrame(np.array(games), columns=importance_columns)\ngame_data_result = pd.DataFrame(np.array(results), columns=['TEAMRSLT'])\ngame_data_result = game_data_result['TEAMRSLT']","777e90f5":"game_data_training.fillna(0, inplace = True)\ngame_data_training.isnull().sum().max()\n\nscaler = MinMaxScaler()\nscaler = scaler.fit(game_data_training)\ngame_data_scaled_training = pd.DataFrame(scaler.transform(game_data_training))\ngame_data_scaled_training.columns = game_data_training.columns\n\npca = PCA(n_components=15)\npca = pca.fit(game_data_training)\nstats_transformed = pca.fit_transform(game_data_scaled_training)\nstats_transformed.shape","a2f8f40b":"x_train, x_test, y_train, y_test = train_test_split(stats_transformed, game_data_result, test_size=0.2, random_state=2)\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","a0e0746d":"# linear svm\n\nsvc_linear = LinearSVC()\nsvc_linear.fit(x_train, y_train)\npred_svc = svc_linear.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_svc)","e0f81463":"#random forrest classifier\n\nrandom_forest = RandomForestClassifier()\nrandom_forest = random_forest.fit(x_train, y_train)\npred_random_forest = random_forest.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_random_forest)","0d8c4c4b":"# Gradient Treee Boosting\n\ngradient_boosting = GradientBoostingClassifier(max_depth=2)\ngradient_boosting = gradient_boosting.fit(x_train, y_train)\npred_gradient_boosting = gradient_boosting.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_gradient_boosting)","49523cc3":"# ExtraTreesClassifier\n\nextra_tree = ExtraTreesClassifier(n_estimators=100, max_depth=None, min_samples_split=2)\nextra_tree = extra_tree.fit(x_train, y_train)\npred_extra_tree = extra_tree.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_extra_tree)","eafec16a":"# MLPClassifier\n\nMLP_classifier = MLPClassifier(hidden_layer_sizes=10000, alpha=1, max_iter=500000000)\nMLP_classifier = MLP_classifier.fit(x_train, y_train)\npred_MLP_classifier = MLP_classifier.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_MLP_classifier)","b101b7a9":"# SVC\n\nlinear_SVC = SVC()\nlinear_SVC = linear_SVC.fit(x_train, y_train)\npred_linear_SVC = linear_SVC.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_linear_SVC)","3b945c4b":"# AdaBoostClassifier\n\nfrom sklearn.ensemble import AdaBoostClassifier\n\nadaBoost_classifier = AdaBoostClassifier()\nadaBoost_classifier = adaBoost_classifier.fit(x_train, y_train)\npred_adaBoost_classifier = adaBoost_classifier.predict(x_test)\n\nmetrics.accuracy_score(y_test, pred_adaBoost_classifier)","686e7159":"pickle.dump(svc_linear, open('svc_linear.sav', 'wb'))\npickle.dump(random_forest, open('random_forest.sav', 'wb'))\npickle.dump(gradient_boosting, open('gradient_boosting.sav', 'wb'))\npickle.dump(extra_tree, open('extra_tree.sav', 'wb'))\npickle.dump(MLP_classifier, open('MLP_classifier.sav', 'wb'))\npickle.dump(linear_SVC, open('linear_SVC.sav', 'wb'))\n\npickle.dump(pca, open('pca', 'wb'))\npickle.dump(scaler, open('scaler', 'wb'))","9b8f2d05":"# Simple data traning and predictions","90fc4164":"The best predictive models of regular matches based on average statistics of the last 5 matches","d5bbe248":"# Try to reduce components(optional)","53e1fd6d":"# Collect average data game per teams(optional)"}}