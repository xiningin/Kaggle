{"cell_type":{"60fe2f46":"code","e94e48d0":"code","d0094565":"code","698ecc94":"code","9ec7b603":"code","5cf625a8":"code","1f2b0048":"code","bb7e089e":"code","c952632a":"code","ebbfecbb":"code","0fffbc04":"code","4f176707":"code","ff1a2648":"code","3e10a736":"code","8d0ac0b7":"code","0e535dfe":"code","dcf7a184":"code","753613cb":"code","0e497c4f":"code","168ca7fb":"code","c024cee5":"code","585c9630":"code","edc332ef":"code","3cf3c65b":"code","db3abe27":"code","2f7109e3":"code","78e8150b":"code","02bfe284":"code","7608b752":"code","3b2b0fa2":"code","56e2e8b1":"code","c9eb93dc":"code","5fe0bee9":"code","81df6a60":"code","daafd29a":"code","e68fc208":"code","6335c275":"code","e34e2246":"code","7908b07d":"code","8f25cbc3":"code","40cf672c":"code","07109c24":"code","cfc91363":"code","67eb5d36":"code","6665a80b":"code","eb2adfed":"code","9f5c444d":"code","23971b11":"code","148c6a7f":"code","f909e36a":"code","ed10484c":"code","ec4d0e76":"code","abfc3631":"code","339158b8":"code","9dad1628":"code","f3e74b64":"code","d054be3e":"code","2f5f83ba":"code","aa15d067":"code","7161614d":"markdown","d179251f":"markdown","ec48ce5c":"markdown","9c941b49":"markdown","8b620b99":"markdown","af766604":"markdown","dcf893c0":"markdown","e6e57695":"markdown","613351ae":"markdown","4c6ce89a":"markdown","36c2c117":"markdown","31a839eb":"markdown","e692a05d":"markdown","f33f13bb":"markdown","f5cf065e":"markdown","66012902":"markdown","1f338f20":"markdown","965ea9f3":"markdown","2af34394":"markdown"},"source":{"60fe2f46":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e94e48d0":"# Importing Necessary Libraries \n\nimport numpy as np\nimport pandas as pd \nimport plotly.express as px\nimport seaborn as sns\n","d0094565":"# Here we have data in CSV format, So we are using Pandas library of Python to read the data present in CSV file\n\ndf=pd.read_csv(\"\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv\")","698ecc94":"df.head(3)","9ec7b603":"df.dtypes  # Object in Pandas is a \"String\"","5cf625a8":"# Finding Duplicate Entries in the dataset\n\ndf[df.duplicated()].head()  # Prints only rows(top 5 as we are using head() method) which having Duplicated entries","1f2b0048":"df.loc[df[\"App\"]==\"Box\",:]","bb7e089e":"# Removing Duplicated entries from a dataset\n\ndf.drop_duplicates(keep=\"first\",inplace=True)","c952632a":"# Checking whether duplicated entries deleted or not\n\ndf[df.duplicated()]","ebbfecbb":"df.info() # Prints the information about the dataset","0fffbc04":"# Finding missing values in the dataset\n\ndf.isna().sum()","4f176707":"# Working with Null or missing value in column Type\n\n# Getting the Column(s) in which Type value is NaN\n\nprint(df[\"Type\"].unique())\ndf[df[\"Type\"].isna()]","ff1a2648":"df.loc[df[\"Type\"].isna(),\"Type\"]=\"Free\"","3e10a736":"# Removed NaN value from the Type column\ndf[df[\"Type\"].isna()]\n\nprint(df.isna().sum())","8d0ac0b7":"df[df[\"Current Ver\"].isna()]","0e535dfe":"# Getting null valunique in Current Ver column...\n\ndf[df[\"Current Ver\"].isna()]\n\n# We cannot make any assumptions on the Current Ver column as it completely depends on the device of a user\n# Replacing NA values in Current Ver column with value \"Varies With device\"\n\ndf.loc[df[\"Current Ver\"].isna(),\"Current Ver\"]=\"Varies with device\"","dcf7a184":"# Removed Null values from Current Ver column\n\ndf[df[\"Current Ver\"].isna()]","753613cb":"df[df[\"Android Ver\"].isna()]\n\n# Making Null values in Android Ver column to \"Varies With device\"\n\ndf.loc[df[\"Android Ver\"].isna(),\"Android Ver\"]=\"Varies with device\"","0e497c4f":"# Removed Null values from Android Ver column....\n\ndf[df[\"Android Ver\"].isna()]","168ca7fb":"# Working with Null values in Content Rating Column...\n\ndf[df[\"Content Rating\"].isna()]","c024cee5":"df.drop(10472,inplace=True)","585c9630":"df[df[\"Content Rating\"].isna()]","edc332ef":"# Working with missing values in Rating column...\n# A common convention to treat missing values in a numeric column is to \n# replace those null values with average value of that column\n\nmean_rating=df.groupby(\"Category\").mean()\nprint(mean_rating)\n\n","3cf3c65b":"df.loc[df[\"Rating\"].isna(),\"Rating\"]=mean_rating.loc[df[df[\"Rating\"].isna()][\"Category\"]][\"Rating\"].values","db3abe27":"df.loc[df[\"Rating\"].isna()]","2f7109e3":"# All missing values in the dataset are cleared\n\ndf.isna().sum()","78e8150b":"# Changing the data types of the columns, so that machine learning algorithms pick them easily....\n\n\n\ndf.dtypes\n","02bfe284":"df.head()","7608b752":"df[\"Price\"].unique().tolist()","3b2b0fa2":"# Importance of Object orientes design or programming...\n\n\nclass ChangeToNumDataType:\n    \n    special_characters=[\"$\",\"+\",\",\",\"k\",\"M\"]\n    \n    def __init__(self,dataSource,columnName,data_type):\n        self.col=columnName;\n        self.type=data_type;\n        self.source=dataSource\n        \n    def change(self):\n        for char in self.special_characters:\n            self.source[self.col]=self.source[self.col].apply(lambda x : x.replace(char,\"\"))\n        return self.source[self.col].astype(self.type)","56e2e8b1":"# Changing the Price column data type\n\nprice_col=ChangeToNumDataType(df,\"Price\",float)\n\ndf[\"Price\"]=price_col.change()\n\n","c9eb93dc":"name=\"Ka$rthik-ya\"\nfor i in [\"$\",\"-\"]:\n    name=name.replace(i,\"\")\nprint(name)","5fe0bee9":"df[\"Price\"].dtypes","81df6a60":"reviews_col=ChangeToNumDataType(df,\"Reviews\",int)\ndf[\"Reviews\"]=reviews_col.change()","daafd29a":"df[\"Reviews\"].dtypes","e68fc208":"df.dtypes","6335c275":"# Changing the Last Updated column to DateTime Object so that we can work with visualizations..\n\ndf[\"Last Updated\"]=pd.to_datetime(df[\"Last Updated\"])","e34e2246":"df[\"Last Updated\"].head(3)","7908b07d":"df.dtypes","8f25cbc3":"df.head(3)","40cf672c":"df.head()","07109c24":"# Creating a new column called \"MinimumDownloads\" and copying data from Installs column\n\ndf[\"MinimumDownloads\"]=df.loc[:,\"Installs\"]\n\ndf.head()\n\n","cfc91363":"# Using above created class to convert this column into Numeric Type\n\nmindown_col=ChangeToNumDataType(df,\"MinimumDownloads\",int)\ndf[\"MinimumDownloads\"]=mindown_col.change()\n","67eb5d36":"df.head()","6665a80b":"df.dtypes","eb2adfed":"# Now we do not need Installs column, So we can drop it from dataset\n\ndf.drop(\"Installs\",axis=1,inplace=True)","9f5c444d":"df.head()","23971b11":"print(min(df[\"Last Updated\"]))\nprint(max(df[\"Last Updated\"])-min(df[\"Last Updated\"]))","148c6a7f":"df.head()","f909e36a":"# Solving Problem\n\nnum_of_apps=df[\"Category\"].value_counts().sort_values(ascending=False)\n\n# Plotting \n\nnum_of_apps_figure=px.bar(df,num_of_apps.index,num_of_apps.values)\n\n# Adding titles to the plot\n\nnum_of_apps_figure.data[0].marker.color=\"#ff7e67\"\n\nnum_of_apps_figure.update_layout(\n    title=\"Categories Vs Number Of Apps\",\n    xaxis_title=\"Categories Of Apps\",\n    yaxis_title=\"Number Of Apps\",\n    xaxis_tickangle=90\n)\n\nnum_of_apps_figure.show()","ed10484c":"# Solving the problem\n\nmax_min_downloads=df.groupby(\"Category\")[\"MinimumDownloads\"].max()\n\n# Plotting the data\n\nmax_min_downloads_figure=px.bar(df,max_min_downloads.index,max_min_downloads.values)\n\n# Adding titles to the plot\nmax_min_downloads_figure.data[0].marker.color=\"#ff7e67\"\n\nmax_min_downloads_figure.update_layout(\n    title=\"Minimum Downloads Vs Categories\",\n    xaxis_title=\"Categories\",\n    yaxis_title=\"Minimum Downloads\",\n    xaxis_tickangle=90\n)\n\nmax_min_downloads_figure.show()","ec4d0e76":"df.head()","abfc3631":"# Plotting\n\nscatter_price_rating=px.scatter(df,df[\"Price\"],df[\"Rating\"])\n\nscatter_price_rating.data[0].marker.color=\"#ff7e67\"\n\n# Adding titles to the plot\n\nscatter_price_rating.update_layout(\n    title=\"Price Vs Rating\",\n)\n\nscatter_price_rating.show()","339158b8":"free_vs_paid=df.groupby(\"Type\")[\"Reviews\"].max()\n\n# Plotting\n\nfree_vs_paid_figure=px.bar(df,free_vs_paid.index,free_vs_paid.values)\n\nfree_vs_paid_figure.data[0].marker.color=\"#ff7e67\"\n\nfree_vs_paid_figure.update_layout(\n    title=\"Type Vs Number Of Reviews\",\n    xaxis_title=\"Type Of App\",\n    yaxis_title=\"Number Of Reviews\"\n)\n\nprint(free_vs_paid_figure)\nfree_vs_paid_figure.show()\n","9dad1628":"# Solving the Problem\n\nfree_paid=df.groupby([\"Type\",\"Category\"]).max()\npaid_cat=free_paid.loc[\"Paid\",\"Price\"]\n\n# Plotting\n\npaid_cat_figure=px.bar(df,paid_cat.index,paid_cat.values)\n\npaid_cat_figure.data[0].marker.color=\"#ff7e67\"\n\npaid_cat_figure.update_layout(\n    title=\"Category Vs Cost(In Dollars)\",\n    xaxis_title=\"Category\",\n    yaxis_title=\"Price\",\n    xaxis_tickangle=90\n)\n\npaid_cat_figure.show()","f3e74b64":"df.groupby(\"Content Rating\")[\"Price\"].max()","d054be3e":"px.scatter(df,df[\"Rating\"],df[\"MinimumDownloads\"])","2f5f83ba":"sns.pairplot(df)","aa15d067":"df[df[\"Size\"]==\"Varies with device\"]","7161614d":"<h1>**Feature Engineering (or) Feature Extraction (or) Feature Construction**","d179251f":"**As Price value for above App is 0, So we can make NaN value in Type as \"Free\"**","ec48ce5c":"<h3> Which Category has the more number of Apps?<\/h3> (Bi-Variate Analysis)","9c941b49":"-----------------------------------------------------------------------------------------------------------------------------------------","8b620b99":"**Observations from above code....**\n<ul>\n<li> Number of Reviews Column is misclassified as datatype \"Object\" instead it should be a Numerical Value <\/li>\n<li> Price Column is also misclassified as Datatype \"Object\" instead it should be a numerical Value <\/li>\n<li> Last Updated is misclassified as DataType Object, Instead it should be a date object\n<\/ul>\n\n<h5>Needs to Work on above items as part of Data cleaning<\/h5>\n \n","af766604":"<h3> Which Category of Apps has Maximum number of Minimum Downloads<\/h3>","dcf893c0":"<h2> Data Cleaning.....!<\/h2>","e6e57695":"<h1> Data Visualization and Exploring Questions about data<\/h1>","613351ae":"<h2> Data Cleaning ends.....<\/h2>","4c6ce89a":"<h3> What is the Maximum price in a whole Category of App if App is Paid?<\/h3>","36c2c117":"As per the above graph, We can observe that Apps with zero price has more ratings. As price is increasing there are no ratings","31a839eb":"**Observations from above code...**\n\n<li> There are 1465 null or missing values in Rating Column<\/li>\n<li> There are 1 null or missing values in Type and Content rating Column each <\/li>\n<li> There are 8 null values in Current Ver column and 3 null values in Android Ver Column <\/li>","e692a05d":"<h3> Which Category of Apps has the Highest rating<\/h3>","f33f13bb":"**If we Observe Install column, All data points in the format of (number+), Say for example 10,000+ means that particular App has minimum 10,000 downloads. So it would be helpful if we create new column called \"MinimumDownloads\" so that we can check how MinimumDownloads effecting the App Rating**","f5cf065e":"**From Above Chart, We can say that, There are maximum number of Apps belong to FAMILY Category. And less number of Apps in Beauty Category**","66012902":"**Above row doesn't make sense at all**\n","1f338f20":"<h3> How Rating of Apps affected by price of the Apps<\/h3>","965ea9f3":"<h1>Problem Statement : Predicting rating of a Google Play Store App <\/h1>\n<small> Author : <b>Karthikeya Sankaramanchi<\/b> <\/small>","2af34394":"<h1>Second step in every data science Project is to get the data<\/h1>\n"}}