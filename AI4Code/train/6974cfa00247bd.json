{"cell_type":{"c37e1af8":"code","9b484f8d":"code","aebb87a3":"code","a43d3a1e":"code","38d9f8ac":"code","fcd4dc0c":"code","fc715cdf":"code","e9a43dbb":"code","f3da5a14":"code","612e744d":"code","9fb99527":"code","77113474":"code","518f6014":"code","3bda3ea6":"code","a173f91e":"code","d85281a8":"code","2c05b3f8":"code","d2fdd51b":"code","36604fa6":"code","caf350e7":"code","26559338":"code","05bc93fa":"code","eb723f34":"code","2e87326e":"code","26ef5fe0":"code","014d0994":"code","f156e7e6":"code","746461dc":"code","29d7c88c":"code","38e43b5c":"code","23f1dddd":"code","db4ad60b":"code","3b62b488":"code","12402393":"code","dd3d3050":"code","dba6f776":"code","416d15b7":"code","32733825":"code","e81da346":"code","4445d632":"code","7f45c46d":"markdown","64064516":"markdown","dbc66457":"markdown","ec990a94":"markdown","85ada1c7":"markdown","04173140":"markdown","f03f17b7":"markdown","d70f3753":"markdown","b821802a":"markdown","dbf28831":"markdown","7cf6e4b6":"markdown","809d93f2":"markdown","fb9a6637":"markdown","0c28db68":"markdown","44523b53":"markdown","54ca248c":"markdown","46045be4":"markdown","ac1565cc":"markdown"},"source":{"c37e1af8":"pip install tld","9b484f8d":"import re\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom colorama import Fore\nfrom urllib.parse import urlparse\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom tld import get_tld, is_tld","aebb87a3":"data = pd.read_csv('..\/input\/malicious-urls-dataset\/malicious_phish.csv')\ndata.head()","a43d3a1e":"data.info()","38d9f8ac":"data.isnull().sum()","fcd4dc0c":"count = data.type.value_counts()\ncount","fc715cdf":"sns.barplot(x=count.index, y=count)\nplt.xlabel('Types')\nplt.ylabel('Count');","e9a43dbb":"data['url'] = data['url'].replace('www.', '', regex=True)\ndata","f3da5a14":"data.head()","612e744d":"rem = {\"Category\": {\"benign\": 0, \"defacement\": 1, \"phishing\":2, \"malware\":3}}\ndata['Category'] = data['type']\ndata = data.replace(rem)","9fb99527":"data['url_len'] = data['url'].apply(lambda x: len(str(x)))","77113474":"def process_tld(url):\n    try:\n        res = get_tld(url, as_object = True, fail_silently=False,fix_protocol=True)\n        pri_domain= res.parsed_url.netloc\n    except :\n        pri_domain= None\n    return pri_domain","518f6014":"data['domain'] = data['url'].apply(lambda i: process_tld(i))","3bda3ea6":"data.head()","a173f91e":"feature = ['@','?','-','=','.','#','%','+','$','!','*',',','\/\/']\nfor a in feature:\n    data[a] = data['url'].apply(lambda i: i.count(a))","d85281a8":"data.head()","2c05b3f8":"def abnormal_url(url):\n    hostname = urlparse(url).hostname\n    hostname = str(hostname)\n    match = re.search(hostname, url)\n    if match:\n        # print match.group()\n        return 1\n    else:\n        # print 'No matching pattern found'\n        return 0","d2fdd51b":"data['abnormal_url'] = data['url'].apply(lambda i: abnormal_url(i))","36604fa6":"sns.countplot(x='abnormal_url', data=data);","caf350e7":"def httpSecure(url):\n    htp = urlparse(url).scheme\n    match = str(htp)\n    if match=='https':\n        # print match.group()\n        return 1\n    else:\n        # print 'No matching pattern found'\n        return 0","26559338":"data['https'] = data['url'].apply(lambda i: httpSecure(i))","05bc93fa":"sns.countplot(x='https', data=data);","eb723f34":"def digit_count(url):\n    digits = 0\n    for i in url:\n        if i.isnumeric():\n            digits = digits + 1\n    return digits","2e87326e":"data['digits']= data['url'].apply(lambda i: digit_count(i))","26ef5fe0":"def letter_count(url):\n    letters = 0\n    for i in url:\n        if i.isalpha():\n            letters = letters + 1\n    return letters","014d0994":"data['letters']= data['url'].apply(lambda i: letter_count(i))","f156e7e6":"def Shortining_Service(url):\n    match = re.search('bit\\.ly|goo\\.gl|shorte\\.st|go2l\\.ink|x\\.co|ow\\.ly|t\\.co|tinyurl|tr\\.im|is\\.gd|cli\\.gs|'\n                      'yfrog\\.com|migre\\.me|ff\\.im|tiny\\.cc|url4\\.eu|twit\\.ac|su\\.pr|twurl\\.nl|snipurl\\.com|'\n                      'short\\.to|BudURL\\.com|ping\\.fm|post\\.ly|Just\\.as|bkite\\.com|snipr\\.com|fic\\.kr|loopt\\.us|'\n                      'doiop\\.com|short\\.ie|kl\\.am|wp\\.me|rubyurl\\.com|om\\.ly|to\\.ly|bit\\.do|t\\.co|lnkd\\.in|'\n                      'db\\.tt|qr\\.ae|adf\\.ly|goo\\.gl|bitly\\.com|cur\\.lv|tinyurl\\.com|ow\\.ly|bit\\.ly|ity\\.im|'\n                      'q\\.gs|is\\.gd|po\\.st|bc\\.vc|twitthis\\.com|u\\.to|j\\.mp|buzurl\\.com|cutt\\.us|u\\.bb|yourls\\.org|'\n                      'x\\.co|prettylinkpro\\.com|scrnch\\.me|filoops\\.info|vzturl\\.com|qr\\.net|1url\\.com|tweez\\.me|v\\.gd|'\n                      'tr\\.im|link\\.zip\\.net',\n                      url)\n    if match:\n        return 1\n    else:\n        return 0","746461dc":"data['Shortining_Service'] = data['url'].apply(lambda x: Shortining_Service(x))","29d7c88c":"sns.countplot(x='Shortining_Service', data=data);","38e43b5c":"def having_ip_address(url):\n    match = re.search(\n        '(([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.'\n        '([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\\/)|'  # IPv4\n        '(([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.'\n        '([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\\/)|'  # IPv4 with port\n        '((0x[0-9a-fA-F]{1,2})\\\\.(0x[0-9a-fA-F]{1,2})\\\\.(0x[0-9a-fA-F]{1,2})\\\\.(0x[0-9a-fA-F]{1,2})\\\\\/)' # IPv4 in hexadecimal\n        '(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}|'\n        '([0-9]+(?:\\.[0-9]+){3}:[0-9]+)|'\n        '((?:(?:\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d|\\d)(?:\\\/\\d{1,2})?)', url)  # Ipv6\n    if match:\n        return 1\n    else:\n        return 0","23f1dddd":"data['having_ip_address'] = data['url'].apply(lambda i: having_ip_address(i))","db4ad60b":"data['having_ip_address'].value_counts()","3b62b488":"plt.figure(figsize=(15, 15))\nsns.heatmap(data.corr(), linewidths=.5)","12402393":"X = data.drop(['url','type','Category','domain'],axis=1)#,'type_code'\ny = data['Category']","dd3d3050":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)","dba6f776":"from sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import plot_roc_curve","416d15b7":"models = [DecisionTreeClassifier,RandomForestClassifier,AdaBoostClassifier,KNeighborsClassifier,SGDClassifier,\n         ExtraTreesClassifier,GaussianNB]\naccuracy_test=[]\nfor m in models:\n    print('#############################################')\n    print('######-Model =>\\033[07m {} \\033[0m'.format(m))\n    model_ = m()\n    model_.fit(X_train, y_train)\n    pred = model_.predict(X_test)\n    acc = accuracy_score(pred, y_test)\n    accuracy_test.append(acc)\n    print('Test Accuracy :\\033[32m \\033[01m {:.2f}% \\033[30m \\033[0m'.format(acc*100))\n    print('\\033[01m              Classification_report \\033[0m')\n    print(classification_report(y_test, pred))\n    print('\\033[01m             Confusion_matrix \\033[0m')\n    cf_matrix = confusion_matrix(y_test, pred)\n    plot_ = sns.heatmap(cf_matrix\/np.sum(cf_matrix), annot=True,fmt= '0.2%')\n    plt.show()\n    print('\\033[31m###################- End -###################\\033[0m')","32733825":"output = pd.DataFrame({\"Model\":['Decision Tree Classifier','Random Forest Classifier',\n                                'AdaBoost Classifier','KNeighbors Classifier','SGD Classifier',\n                                'Extra Trees Classifier','Gaussian NB'],\n                      \"Accuracy\":accuracy_test})","e81da346":"output","4445d632":"plt.figure(figsize=(10, 5))\nplots = sns.barplot(x='Model', y='Accuracy', data=output)\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.2f'),\n                   (bar.get_x() + bar.get_width() \/ 2,\n                    bar.get_height()), ha='center', va='center',\n                   size=15, xytext=(0, 8),\n                   textcoords='offset points')\n\nplt.xlabel(\"Models\", size=14)\nplt.xticks(rotation=20);\nplt.ylabel(\"Accuracy\", size=14)\nplt.show()","7f45c46d":"<h4>Checks to see whether URL contains a shortening service<\/h4>","64064516":"<a id=\"2\"><\/a> <br>\n# \ud83d\uddc3\ufe0f Load Dataset","dbc66457":"<a id=\"4\"><\/a>\n# \ud83d\udd0e Checking for NaN values","ec990a94":"<a id=\"5\"><\/a> <br>\n# \ud83e\uddbe Feature Extraction","85ada1c7":"<a id=\"8\"><\/a> <br>\n# <img src=\"https:\/\/cdn-icons-png.flaticon.com\/64\/3094\/3094836.png\"\/> Final Report","04173140":"<h2 style=\"width: 100%;\n    margin: 0;\n    padding: 0;\n    text-align: center;\">---- Table of contents ----<\/h2>\n\n1. [Importing Libraries](#1)\n2. [Load Dataset](#2)\n3. [Meta information of Dataframe](#3)\n4. [Checking for NaN values](#4)\n5. [Feature Extraction](#5)\n6. [Train & Test Split](#6)\n7. [Training models](#7)\n  <ul>\n      <li>\u2714\ufe0f Decision Tree Classifier<\/li>\n      <li>\u2714\ufe0f Random Forest Classifier<\/li>\n      <li>\u2714\ufe0f AdaBoost Classifier<\/li>\n      <li>\u2714\ufe0f KNeighbors Classifier<\/li>\n      <li>\u2714\ufe0f SGD Classifier<\/li>\n      <li>\u2714\ufe0f Extra Trees Classifier<\/li>\n      <li>\u2714\ufe0f Gaussian NB<\/li>\n  <\/ul>\n8. [Final Report](#8)","f03f17b7":"A URL consists of the top-level domain, hostname, paths, and port of the web\naddress, as in the following diagram:","d70f3753":"<h4>Counts the number of letter characters in a URL<\/h4>","b821802a":"<a id=\"9\"><\/a> <br>\n# \u2728 Thanks","dbf28831":"<a id=\"6\"><\/a> <br>\n# \u2702\ufe0f Train & Test Split","7cf6e4b6":"* Feel free to download Notebook and do experiments on it.\n* Comments if you find something inappropriate and will improve accordingly.\n* Upvote if you find this notebook useful.","809d93f2":"<a id=\"3\"><\/a> <br>\n# \ud83d\udcdd Meta information of Dataframe","fb9a6637":"<a id=\"7\"><\/a> <br>\n# <img src=\"https:\/\/cdn-icons-png.flaticon.com\/32\/4149\/4149680.png\"\/> Training models","0c28db68":"<h4>Counts the number of digit characters in a URL<\/h4>","44523b53":"![url](https:\/\/user-images.githubusercontent.com\/70811337\/150021474-4ba64b34-1d09-427f-9cf6-25508571d18d.PNG)","54ca248c":"<h4>first have to omit the (www.) from the URL which is in fact a sub domain in itself.<\/h4>","46045be4":"<a id=\"1\"><\/a> <br>\n# \ud83d\udce5 Importing Libraries","ac1565cc":"# Detection Malicious URL Using ML Models"}}