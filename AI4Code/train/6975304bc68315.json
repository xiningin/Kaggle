{"cell_type":{"a910d615":"code","40b0e2e0":"code","ad22c672":"code","ab99cd5c":"code","d941ebc9":"code","6ccb8b03":"code","8a805d21":"code","6bbd1fff":"code","e47f5447":"code","db9d995b":"code","85c9f821":"code","227925b9":"code","5f1b9b95":"code","6be80e75":"code","3dcc3593":"code","07824e8f":"code","55aadeda":"code","c640de10":"code","5ba185f8":"code","719c7147":"code","04509e8c":"code","3b7ddb00":"code","656f82ee":"code","04e8116a":"code","521df9b1":"code","0f7cd956":"code","bf187d06":"code","92b744b0":"code","ac21a3a2":"code","1f5b1cfd":"markdown","db3bdefc":"markdown","0991987a":"markdown","2149abef":"markdown","a7ae280a":"markdown","4425ea00":"markdown","6ffb4b5b":"markdown","c53388f0":"markdown","b35bfce8":"markdown","253037c0":"markdown","ff2e73b8":"markdown","9cebf8af":"markdown","79706275":"markdown"},"source":{"a910d615":"#Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport plotly.graph_objects as go\nimport warnings\n\nwarnings.simplefilter(action=\"ignore\",category=\"Futurewarning\")","40b0e2e0":"#mount google drive\nfrom google.colab import drive\ndrive.mount(\"\/content\/MyDrive\")\n","ad22c672":"#define the path of my data folder inside google drive\npath=\"\/content\/MyDrive\/MyDrive\/Dataset\"\nmatch=pd.read_csv(os.path.join(path,'matches.csv'))\ndelivery=pd.read_csv(os.path.join(path,'deliveries.csv'))\nindian_cities=pd.read_csv(os.path.join(path,\"indian_cities.csv\"))","ab99cd5c":"#create a dataframe  IPL Winners List from 2008-2017\nipl_final_winner=pd.DataFrame({\"season\":sorted(set(match[\"season\"])),\"winner Team\":[\"Rajasthan Royals\",\"Sunrisers Hyderabad\",\"Chennai Super Kings\",\"Chennai Super Kings\",\"Kolkata Knight Riders\",\"Mumbai Indians\",\"Kolkata Knight Riders\",\"Mumbai Indians\",\"Sunrisers Hyderabad\",\"Mumbai Indians\"]})","d941ebc9":"#get some information about match csv\n#get column names \ncol_list_match=list(match.columns)\nprint (len(col_list_match))\ncol_list_match\n#col and rows info\nmatch\n","6ccb8b03":"#drop unnecessary cols\nmatch[\"umpire3\"].isnull().sum()\nmatch=match.drop(columns=[\"umpire3\",\"dl_applied\"])\n\n#there replace Rising Pune Supergiants with Rising Pune Supergiant as they both are same team but \"s\" is the entry error\nmatch.replace(\"Rising Pune Supergiants\",\"Rising Pune Supergiant\",inplace=True)","8a805d21":"# *** important note \"Sunrisers Hyderabad\" and \"Deccan Chargers\" are the same team only in season2 the name was different\n#so for the purpose of smooth analysis I am replacing the the name \"Deccan Chargers\" with Sunrisers Hyderabad\n#it will help to find out home ground.\nmatch.replace(\"Deccan Chargers\",\"Sunrisers Hyderabad\",inplace=True)","6bbd1fff":"match","e47f5447":"# 1) Each year how many matches were held -- calculation\nname_unique_season=sorted(set(match[\"season\"]))\nname_of_teams=sorted(set(match[\"team1\"]))\nprint (name_unique_season)\n\ncount_of_total_matches=[]\nfor i in name_unique_season:\n  count_of_total_matches.append((list(match[\"season\"])).count(i))\n  print (\"season_name-\",i,\":\",\"count of total matches :\",(list(match[\"season\"])).count(i))\n\n# 1) Each year how many matches were held -- visualization\nplt.style.available\nplt.style.use('dark_background')\nfig=plt.figure(figsize=(8,8),dpi=100)\naxes=fig.add_axes([0.2,0.2,0.5,0.5])\naxes.set_xlabel(\"season\")\naxes.set_ylabel(\"number of total match\")\naxes.set_title(\" season vs total match\")\naxes.set_xlim(2007,2018)\naxes.bar(name_unique_season,count_of_total_matches,color=\"blue\",edgecolor=\"y\",width=0.5)","db9d995b":"#Name of the all teams played ipl\nprint (name_of_teams)","85c9f821":"\n#Filter out the data for each season and check Number of matches won by each team\nseason1=match[match[\"season\"]==2008]\nseason2=match[match[\"season\"]==2009]\nseason3=match[match[\"season\"]==2010]\nseason4=match[match[\"season\"]==2011]\nseason5=match[match[\"season\"]==2012]\nseason6=match[match[\"season\"]==2013]\nseason7=match[match[\"season\"]==2014]\nseason8=match[match[\"season\"]==2015]\nseason9=match[match[\"season\"]==2016]\nseason10=match[match[\"season\"]==2017]\nlist_season=[season1,season2,season3,season4,season5,season6,season7,season8,season9,season10]\n\ndef max_matches_won(name_of_teams,list_season,*arg):\n  season=[]\n  team_name=[]\n  max_win_count=[]\n  team=\"\"\n  \n  for s in list_season:\n    max_win=0\n\n    for name in name_of_teams:\n      number_of_wins=list(s[\"winner\"]).count(name)\n      if number_of_wins>max_win:\n        max_win=number_of_wins\n        season_year=str(set(list(s[\"season\"])))\n        team=name\n    season.append(season_year)\n    team_name.append(team)\n    max_win_count.append(max_win)\n  return season,team_name,max_win_count\n\nseason,team_name,max_win_count=max_matches_won(name_of_teams,list_season)   \n      ","227925b9":"#create a table to show each season maxmimum number of wins by team\nfig=go.Figure(data=[go.Table(\n    header=dict(values=['season', 'team','Highest winning match count',\"season winner\"],\n                line_color='darkslategray',\n                fill_color='lightskyblue',\n                align='left'),\n    cells=dict(values=[season, # 1st column\n                       team_name,# 2nd column\n                       max_win_count,\n                       list(ipl_final_winner[\"winner Team\"])], #3rd column\n\n               line_color='darkslategray',\n               fill_color='lightcyan',\n               align='left'))\n])\n\nfig.update_layout(width=500, height=500)\nfig.show()\n","5f1b9b95":"# indian_cities_names=list(indian_cities[\"City\"])\n# missing_city=[]\n# #few cities are missing in indian city csv file which exists in match.csv we will add those cities in indian city list\n# for city in set(list(match[\"city\"])):\n#   if city not in indian_cities_names:\n#     missing_city.append(city)\n#     # print (missing_city)\n\n# # once you have the missing city list I removed the cities which were not part of india manuaaly\n# missing_city=[\n#  'Kolkata',\n#  'Kanpur',\n#  'Chandigarh',\n#  'Visakhapatnam',\n#  'Bangalore',\n#  'Dharamsala',\n#  'Durban',\n#  'Nagpur']\n \n# indian_cities_names.extend(missing_city)\n# seasons_played_in_india=[]\n# seasons_not_played_in_india=[]\n# for season in list_season:\n#   l=[]\n#   for city in season[\"city\"]:\n#     if city in indian_cities_names:\n#       l.append(city)\n    \n#   if len(l)==len(season):\n#     print (list(season[\"season\"])[0],\"all the matches were played in india\")\n#     seasons_played_in_india.append(list(season[\"season\"])[0])\n#   else:\n#     print (list(season[\"season\"])[0],\"all the matches were not played in india\")\n\n#     seasons_not_played_in_india.append(list(season[\"season\"])[0])\n# print (f\"seasons played in india {seasons_played_in_india}\")","6be80e75":"#seasons played in india [2008, 2010, 2011, 2012, 2013, 2015, 2016, 2017]\n#replace the value with corresposding dataframe\nseasons_played_in_india=[season1,season3,season4,season5,season6,season8,season9,season10]\n","3dcc3593":"number_of_matches_won=[]\nnumber_of_matches_won_in_home_ground=[]\nteam_name_list=[]\n\nfor teams in name_of_teams:\n  c_win=0\n  c_win_home_ground=0\n  for i in range(len(season1[\"winner\"])):\n    # print (list(season1[\"winner\"])[i])\n    # print (teams)\n    if teams==list(season1[\"winner\"])[i]:\n      c_win=c_win+1\n      list_split=teams.split(\" \")\n\n      if list(season1[\"city\"])[i] in list_split:\n        c_win_home_ground=c_win_home_ground+1\n  team_name_list.append(teams)\n  number_of_matches_won_in_home_ground.append(c_win_home_ground)\n  number_of_matches_won.append(c_win)\n\n  \n  home_ground_win_df=pd.DataFrame({\"team name\":team_name_list,\"number of win\":number_of_matches_won,\"home ground win\":number_of_matches_won_in_home_ground})\n# ******************************************************************************************\n### update ********** the home ground analysis is incorrect as the name of the teams not always\n#colides with city, and if you consider vanue, for different seasons the homeground for different teams\n#were different\n#find the link here for information on homeground\n# https:\/\/en.wikipedia.org\/wiki\/List_of_Indian_Premier_League_venues\n\n# I am working on optimized solution of homeground analysis\n","07824e8f":"#pom=player of the match\ndef top_three_pom(season):\n  count_man_of_the_match=[]\n  player_name=[]\n  for players in set(list(season[\"player_of_match\"])):\n    player_name.append(players)\n    count_man_of_the_match.append(list(season[\"player_of_match\"]).count(players))\n  man_of_the_match=pd.DataFrame({\"players name\":player_name,\"man of the match\":count_man_of_the_match})\n  man_of_the_match=man_of_the_match.sort_values(\"man of the match\",ascending=False)\n  # print (man_of_the_match.head(3))\n\n  # top 3 man of the match\n  fig=go.Figure(data=[go.Table(\n      header=dict(values=[\"player name\",\"man of the matches\"],\n                  line_color='darkslategray',\n                  fill_color='yellow',\n                  align='right'),\n      cells=dict(values=[list(man_of_the_match[\"players name\"])[:5], # 1st column\n                        list(man_of_the_match[\"man of the match\"])[:5],# 2nd column\n                      ],\n                line_color='black',\n                fill_color='cyan',\n                align='right'))\n  ])\n\n  fig.update_layout(width=300, height=400)\n  fig.show()\n","55aadeda":"  print (\"Highest man of the match of all seasons from 2007 to 2017\")\n  top_three_pom(match)","c640de10":"#Bar graph for Highest man of the match of all seasons from 2007 to 2017\nmatch['player_of_match'].value_counts()[:6].plot(kind = 'bar')\n","5ba185f8":"for season in list_season:\n  print (\"Highest man of the match of each season :\",list(season[\"season\"])[0])\n  top_three_pom(season)","719c7147":"match[\"winner\"].value_counts().plot(kind=\"bar\")","04509e8c":"plt.style.use(\"classic\")\nstacked=False\nfor seasons in seasons_played_in_india:\n  wins_each_city=season.groupby([\"winner\",\"city\"])[\"season\"].count().unstack()\n  #bar with stack\n  wins_each_city.plot(kind='bar', stacked=stacked, title=list(seasons[\"season\"])[0], figsize=(10, 10))\n  sns.set_palette(\"Paired\", len(match['city'].unique()))\n  plt.legend()\n\n","3b7ddb00":"combined_data = match.merge(delivery, left_on='id', right_on='match_id')\ncombined_data.head(50)","656f82ee":"# each match analysis \n#input by the user should be match id \n\ndef individual_match_analysis(id):\n  data_frame=combined_data[combined_data[\"id\"]==id]\n  team1=list(data_frame[\"team1\"])[0]\n  team2=list(data_frame[\"team2\"])[0]\n  winning_team=list(data_frame[\"winner\"])[0]\n  toss_wining_team=list(data_frame[\"toss_winner\"])[0]\n  toss_decision=list(data_frame[\"toss_decision\"])[0]\n  batting_team=list(data_frame[\"batting_team\"])[0]\n\n  team=team1 + \" vs \" + team2\n  # run analysis\n  win_by_run=list(data_frame[\"win_by_runs\"])[0]\n  win_by_wicket=list(data_frame[\"win_by_wickets\"])[0]\n\n\n  #INNINGS 1\n  innings_1=data_frame[data_frame[\"inning\"]==1]\n\n    #BATSMAN\n\n  batsman_indivisula_run_inng1=pd.DataFrame(innings_1.groupby([\"batsman\"]).sum()[\"batsman_runs\"])\n  total_run_to_be_chased_by_opponent=innings_1.groupby([\"batsman\"]).sum()[\"total_runs\"].sum()\n    #BOLWER AND OVERS\n  number_of_overs_inn1=list((innings_1.groupby([\"over\"]).sum()).index)\n  total_run_each_over_inn1=list(innings_1.groupby([\"over\"]).sum()[\"total_runs\"])\n  name_of_bolwers_each_over_inn1=[x[1] for x in (innings_1.groupby([\"over\",\"bowler\"]).count()).index ]\n  wickets_taken_inn1=list(innings_1.groupby([\"over\",\"bowler\"]).count()[\"player_dismissed\"])\n  information_each_over_inn1=pd.DataFrame({\"number_of_overs_inn1\":number_of_overs_inn1,\"total_run_each_over_inn1\":total_run_each_over_inn1,\"name_of_bolwers_each_over_inn1\":name_of_bolwers_each_over_inn1,\"wickets_taken_inn1\":wickets_taken_inn1})\n\n  #INNINGS 2\n  innings_2=data_frame[data_frame[\"inning\"]==2]\n\n    #BATSMAN\n\n  batsman_indivisula_run_inn2=pd.DataFrame(innings_2.groupby([\"batsman\"]).sum()[\"batsman_runs\"])\n\n    #BOWLER AND OVERS\n  number_of_overs_inn2=list((innings_2.groupby([\"over\"]).sum()).index)\n  total_run_each_over_inn2=list(innings_2.groupby([\"over\"]).sum()[\"total_runs\"])\n  name_of_bolwers_each_over_inn2=[x[1] for x in (innings_2.groupby([\"over\",\"bowler\"]).count()).index ]\n  wickets_taken_inn2=list(innings_2.groupby([\"over\",\"bowler\"]).count()[\"player_dismissed\"])\n\n  information_each_over_inn2=pd.DataFrame({\"number_of_overs_inn2\":number_of_overs_inn2,\"total_run_each_over_inn2\":total_run_each_over_inn2,\"name_of_bolwers_each_over_inn2\":name_of_bolwers_each_over_inn2,\"wickets_taken_inn2\":wickets_taken_inn2})\n\n  #OVERALL MATCH INFORMATION\n  match_information=pd.DataFrame({\"teams\":[team],\"winning_team\":[winning_team],\"toss_wining_team\":[toss_wining_team],\"toss_decision\":[toss_decision],\"chasing_run\":[total_run_to_be_chased_by_opponent]})\n\n\n  return match_information,batsman_indivisula_run_inng1,information_each_over_inn1,batsman_indivisula_run_inn2,information_each_over_inn2\n\n\n","04e8116a":"#call the function\n#enter the match id you want to analyze\nmatch_information,batsman_indivisula_run_inng1,information_each_over_inn1,batsman_indivisula_run_inn2,information_each_over_inn2=individual_match_analysis(3)\n","521df9b1":"cm = sns.light_palette(\"blue\", as_cmap=True)\nmatch_information.style.background_gradient(cmap=cm).set_caption(\"OVERALL_MATCH_INFORMATION\")","0f7cd956":"cm = sns.light_palette(\"red\", as_cmap=True)\n# a=list(innings_1[\"batting_team\"])[0]\nbatsman_indivisula_run_inng1.style.background_gradient(cmap=cm).set_caption(f\"INNINGS _1\").set_table_attributes(\"style='display:inline'\")\n","bf187d06":"cm = sns.light_palette(\"green\", as_cmap=True)\ninformation_each_over_inn1.style.background_gradient(cmap=cm).set_caption(\"INNINGS _1\").set_table_attributes(\"style='display:inline'\")\n","92b744b0":"cm = sns.light_palette(\"blue\", as_cmap=True)\na=list(innings_2[\"batting_team\"])[0]\n\nbatsman_indivisula_run_inn2.style.background_gradient(cmap=cm).set_caption(f\"INNINGS _2\").set_table_attributes(\"style='display:inline'\")\n","ac21a3a2":"cm = sns.light_palette(\"yellow\", as_cmap=True)\ninformation_each_over_inn2.style.background_gradient(cmap=cm).set_caption(\"INNINGS _2\").set_table_attributes(\"style='display:inline'\")\n","1f5b1cfd":"# Number of wins by each team in each city of INDIA (We do not consider matches played out of india in this analysis)\n","db3bdefc":"INNINGS 2","0991987a":"INNINGS 1","2149abef":"## 1)  Each year how many matches were held","a7ae280a":"# Total number of matches won by teams in 10 years","4425ea00":"# Combine both match and delivery data","6ffb4b5b":"## 2) Number of matches won by each team\n","c53388f0":"# Top 3 Man of the match of each season","b35bfce8":"# Data Analysis on match.csv\n##### 1) Each year how many matches were held\n##### 2) Number of matches won by each team\n##### 3) Number of matches won by each team at their home ground\n##### 4) Which team won highest number of matches\n##### 5) Does the highest number of winning matches team won the Final -- ** for that we would need one extra information that is who is the winner of each year from 2006 to 2017\n##### 6) Every season which player won the highest man of the match from each team\n","253037c0":"# STYLE ALL DATAFRAMES -- Each Match analysis\n","ff2e73b8":"## 3) Number of matches won by each team at their home ground each season\n\n#### ** point to be noted that few seasons were played outside india (or few matches in india + other countiriesin those cases teams dont have homeground ,we will ignore them\n\n\n","9cebf8af":"https:\/\/colab.research.google.com\/github\/Antikadas1\/Kaggle_Challenges\/blob\/main\/Indian_Premier_League_Data_analysis.ipynb","79706275":"## Due to the kaggle kernel issue (queqed) I was unable to run and save here. So I kindly ask you to click on the below google colab link if you want to check the analysis with output"}}