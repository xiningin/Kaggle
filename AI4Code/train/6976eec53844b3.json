{"cell_type":{"d7ed6283":"code","9a322ec7":"code","e2678d8a":"code","fc529cf0":"code","c0e621d7":"code","109d73f7":"code","3c992ed4":"code","6055197a":"code","990b9ec3":"code","960c906e":"code","79cddc56":"code","d814d67a":"code","6a04ed90":"code","8dba3772":"code","8b9615aa":"code","359a58a3":"code","ccf031c1":"code","f58ba137":"code","cfdcf356":"code","9f638f43":"code","9aca4012":"code","139b8336":"markdown","fdf59d9e":"markdown","e468c472":"markdown","1a0ff6dd":"markdown"},"source":{"d7ed6283":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a322ec7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\nfrom sklearn import svm","e2678d8a":"Data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nData.shape","fc529cf0":"Data.head()","c0e621d7":"# Chech NA values\nData.isna().sum(axis=0)\/len(Data)","109d73f7":"### Removing columns with few data\nData = Data.drop(['Cabin'], axis=1)\n\n### Removing files with missing values\nData = Data[Data['Age'].notna()]\nData = Data[Data['Embarked'].notna()]\n\n### Removing non relevant variables\nData = Data.drop(['Ticket', 'Name', 'PassengerId'], axis=1)","3c992ed4":"print(Data.shape)\n\nData.isna().sum(axis=0)\/len(Data)","6055197a":"#from categorical to binary variables\n\nvars_cat = ['Pclass', 'Sex', 'Embarked']\n\nfor i in vars_cat:\n  categorias = Data[i].unique()\n  print(categorias) \n\n  for k in categorias:\n    name = 'Is-' + str(i) + '-' + str(k)\n    # print(name)\n    Data[name] = np.where(Data[i] == k,1,0)\n  \n  Data = Data.drop([i], axis=1)\n\n\nprint(Data.shape)\nprint(Data.columns)\nData.head()","990b9ec3":"sns.heatmap(Data.corr(),cmap='RdBu')","960c906e":"var_predecir = 'Survived'\n\nX = Data.drop([var_predecir], axis=1)\ny = Data[var_predecir]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.01, random_state = 1, stratify=y) \n#stratify same ammount of different values in train and test samples \n\n\n# print(X.columns)\n\n\n### MODELS\nmodel = RandomForestClassifier(n_estimators=100, max_depth=7, random_state=1) #best 100 7\n# model = RandomForestClassifier()\n# model = svm.SVC(decision_function_shape='ovo')\n# model = svm.SVC(kernel='rbf')\n\nmodel.fit(X, y)\n\ny_pred_test = model.predict(X_test)\n\nscore_model = model.score(X_test, y_test)\nprint('Score modelo',score_model)\nprint('=='*32)\n\nacc_score = accuracy_score(y_test, y_pred_test)\nprint('Accuracy score',acc_score)\nprint('=='*32)\n\nprint(classification_report(y_test, y_pred_test))\n\n\n\n","79cddc56":"from scipy.interpolate import griddata\n\nresults = []\n\nfor iscan in [10, 30, 50, 100, 300, 500]:\n    for jscan in [1, 3, 5, 7, 9, 11, 13]:\n        ### MODELS\n        model = RandomForestClassifier(n_estimators=iscan, max_depth=jscan, random_state=1) #best 100 7\n\n        model.fit(X, y)\n\n        y_pred_test = model.predict(X_test)\n        \n        score_model = mean_absolute_error(y_test, y_pred_test)\n        \n        results.append([iscan, jscan, score_model])\n\nprint(results)\nDF = pd.DataFrame(results)\nDF.shape\n\n\nX,Y= np.meshgrid(DF.iloc[:,0],DF.iloc[:,1])\nZ = griddata((DF.iloc[:,0], DF.iloc[:,1]), DF.iloc[:,2], (X, Y),method='nearest')\nplt.contourf(X,Y,Z)\nplt.colorbar()","d814d67a":"print(y_test.value_counts()[0]\/y_test.value_counts()[1])","6a04ed90":"confusion_matrix(y_test, y_pred_test)","8dba3772":"Test_Data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","8b9615aa":"print(Test_Data.shape)\nTest_Data.head()","359a58a3":"# Chech NA values\nTest_Data.isna().sum(axis=0)\/len(Test_Data)","ccf031c1":"### Removing columns with missing values\nTest_Data = Test_Data.drop(['Cabin'], axis=1)\n\n# ### Removing files with missing values\n# Test_Data = Test_Data[Test_Data['Age'].notna()]\n# Test_Data = Test_Data[Test_Data['Fare'].notna()]\n\n### Opci\u00f3n B: completar las filas con datos faltantes con el promedio de la fila\nTest_Data['Age'].fillna(value=Test_Data['Age'].mean(), inplace=True) #Elimina casillas vac\u00edas. Pone el promedio de la columna respectiva \nTest_Data['Fare'].fillna(value=Test_Data['Fare'].mean(), inplace=True) #Elimina casillas vac\u00edas. Pone el promedio de la columna respectiva\n\n### Removing non relevant variables\nTest_Data = Test_Data.drop(['Ticket', 'Name'], axis=1)\n\nprint(Test_Data.shape)","f58ba137":"#from categorical to binary variables\n\nvars_cat = ['Pclass', 'Sex', 'Embarked']\n\nfor i in vars_cat:\n  categorias = Test_Data[i].unique()\n  print(categorias) \n\n  for k in categorias:\n    name = 'Is-' + str(i) + '-' + str(k)\n    # print(name)\n    Test_Data[name] = np.where(Test_Data[i] == k,1,0)\n  \n  Test_Data = Test_Data.drop([i], axis=1)\n\n\nprint(Test_Data.shape)\nprint(Test_Data.columns)\nTest_Data.head()","cfdcf356":"# Chech NA values\nTest_Data.isna().sum(axis=0)\/len(Test_Data)","9f638f43":"y = Data['Survived']\n\nfeatures = ['Age', 'SibSp', 'Parch', 'Fare', \n            'Is-Pclass-3', 'Is-Pclass-1', 'Is-Pclass-2', \n            'Is-Sex-male', 'Is-Sex-female',\n            'Is-Embarked-S', 'Is-Embarked-C', 'Is-Embarked-Q']\n\nX = pd.get_dummies(Data[features])\nX_test = pd.get_dummies(Test_Data[features])\n\npredictions = model.predict(X_test)\noutput = pd.DataFrame({'PassengerId': Test_Data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","9aca4012":"output","139b8336":"# Data cleaning","fdf59d9e":"# Correlations","e468c472":"# Training","1a0ff6dd":"# Submission"}}