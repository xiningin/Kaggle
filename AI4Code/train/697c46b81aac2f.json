{"cell_type":{"0c4ff6a6":"code","7d536668":"code","4217b187":"code","5197e4b6":"code","4d868e91":"code","aadb164c":"code","de6e6614":"code","feeed4c0":"code","a60acf44":"code","e657756a":"code","2755df2f":"code","3a9ad358":"code","4770e26d":"code","f01ccf4a":"markdown","bca6bab6":"markdown","820baa60":"markdown","c660dc52":"markdown","ccbd617d":"markdown","62482fdf":"markdown","89c43203":"markdown","20ee55c9":"markdown","c4a63dd2":"markdown","b5fc7e44":"markdown","0421a0b0":"markdown"},"source":{"0c4ff6a6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport random\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.mobilenet_v2 import MobileNetV2\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input as preprocess_mobilenet\n\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Flatten, Dropout, Input\n","7d536668":"base_dir = \"..\/input\/fruits\/fruits-360\"\ntrain_dir = os.path.join(base_dir,'Training')\ntest_dir = os.path.join(base_dir, 'Test')","4217b187":"def show_samples(folder, rows=3, cols=5):\n    \n    images = []\n    for i in range(rows*cols):\n        fruit = random.choice(os.listdir(folder))\n        image = random.choice(os.listdir(os.path.join(folder, fruit)))\n        images.append([fruit, os.path.join(folder, fruit, image)])\n\n    _, axes = plt.subplots(rows,cols, figsize=(18,5))\n\n    axes = axes.flatten()\n    for img, ax in zip(images, axes):\n        ax.imshow(mpimg.imread(img[1]))\n        ax.set_title(img[0])\n        ax.set_axis_off()\n\n    plt.show()","5197e4b6":"# Sample images from the training set\nshow_samples(train_dir)","4d868e91":"# Sample images from the test set\nshow_samples(test_dir)","aadb164c":"num_classes = len(os.listdir(train_dir))\nprint(f\"Number of classes is {num_classes}\")","de6e6614":"IMAGE_SIZE=[224, 224]\nBATCH_SIZE=32","feeed4c0":"# Create the Generators\ntrain_val_generator = ImageDataGenerator(\n                                        preprocessing_function=preprocess_mobilenet,    \n                                        rotation_range=30,\n                                        width_shift_range=0.2,\n                                        height_shift_range=0.2,\n                                        shear_range=0.1,\n                                        zoom_range=0.2,\n                                        horizontal_flip=True,\n                                        vertical_flip=True,\n                                        fill_mode='nearest',\n                                        validation_split=0.2\n                                        )\n\ntest_generator  = ImageDataGenerator(preprocessing_function=preprocess_mobilenet)\n\n\n# Create the Data for the model\ntrain_data = train_val_generator.flow_from_directory(train_dir, \n                                                    target_size=IMAGE_SIZE,\n                                                    batch_size=BATCH_SIZE,\n                                                    class_mode='categorical',\n                                                    color_mode='rgb',\n                                                    subset='training',\n                                                    shuffle=True,\n                                                    )\n\nval_data = train_val_generator.flow_from_directory(train_dir, \n                                                  target_size=IMAGE_SIZE,\n                                                  batch_size=BATCH_SIZE,\n                                                  class_mode='categorical',\n                                                  color_mode='rgb',\n                                                  subset='validation',\n                                                  shuffle=True,\n                                                  )\n\n\ntest_data = test_generator.flow_from_directory(test_dir, \n                                               target_size=IMAGE_SIZE,\n                                               batch_size=1,\n                                               class_mode='categorical',\n                                               color_mode='rgb',\n                                               shuffle=False\n                                               )","a60acf44":"base_model = MobileNetV2(input_shape=IMAGE_SIZE + [3],\n                         include_top=False,\n                         weights='imagenet',\n                         pooling='avg'\n                         )\n\nfor layer in base_model.layers:\n    layer.trainable = False","e657756a":"x_input = base_model.input\n\noutput = Dense(num_classes, activation='softmax')(base_model.output)\n\nmodel = Model(x_input, output)\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","2755df2f":"hist = model.fit(train_data,\n                 validation_data=val_data,\n                 epochs=6,\n                 verbose=1)","3a9ad358":"y_test_pred = model.predict(test_data)\ny_test_pred = np.argmax(y_test_pred,axis=1)","4770e26d":"model.evaluate(test_data)","f01ccf4a":"#### Create the data generators","bca6bab6":"#### Customize the model by adding our own layers at the end","820baa60":"### Let us see some sample images from the Training and Test folders","c660dc52":"#### Load the pre-trained Mobilenet model","ccbd617d":"## Build the Model","62482fdf":"#### Determine the number of classes","89c43203":"The accuracy on the training and validation sets is 99% and 97% which is commendable considering the effort spent in creating and training the model. Also, there is no overfitting. Transfer learning rocks!","20ee55c9":"#### Train the model","c4a63dd2":"#### Predict the results","b5fc7e44":"### Define the folder paths","0421a0b0":"### Summary\n\nWe can see that even with such a simple approach we can quickly get around 93% accuracy on the test set. \n\nHope you enjoyed this notebook. If so kindly leave a comment or upvote. Thank you :)"}}