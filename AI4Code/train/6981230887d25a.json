{"cell_type":{"7e83ae29":"code","8e93b34d":"code","98065481":"code","ac3f431f":"code","80d5cb40":"code","710f7f9b":"code","e1e5feaa":"code","37555a31":"code","513cd3c6":"code","425d933a":"markdown","8d5b9eed":"markdown","efb78fa8":"markdown","0eadb3bf":"markdown"},"source":{"7e83ae29":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler,RobustScaler\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom lightgbm import LGBMClassifier","8e93b34d":"train = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')#.sample(frac=0.25,random_state=42)#,nrows=500000)\ntest = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')#,nrows=10000)","98065481":"train['is_train'] = True\ntest['is_train'] = False\nX= train.append(test).reset_index(drop = True)\ndel train, test\n\nfeatures = list(set(X.columns)-{'claim','id','is_train'})\nX['n_missing'] = X[features].isna().sum(axis=1).astype('int')\nX['n_missing_std'] = X[features].isna().std(axis=1).astype('float')\nX['mean_orig'] = X[features].mean(axis=1)\nX[features] = X[features].fillna(X[features].mean())\nfor el in ['f40','f70','f45','f47','f1','f28','f13','f42','f65']:\n    X[el+'log']= np.log(X[el].clip(lower=0)+1)\n\nscaler = RobustScaler()\nX[features] = scaler.fit_transform(X[features])\n\nX['med'] = X[features].median(axis=1)\n#X['max'] = X[features].max(axis=1)\nX['max2'] = X[features].abs().max(axis=1)\nX['min'] = X[features].min(axis=1)\n#X['min2'] = X[features].abs().min(axis=1)\nX['skew'] = X[features].skew(axis=1)\nX['mean2'] = (X[features]**2).mean(axis=1)\n\nfeatures = list(set(X.columns)-{'claim','id','is_train','f85'})","ac3f431f":"X.describe()","80d5cb40":"y = X.loc[X.is_train,'claim']\ntest = X[~X.is_train]\nX = X.loc[X.is_train,features]","710f7f9b":"from lightgbm import LGBMClassifier\n\nfinal_predictions = []\nvalid_scores = []\nimp = pd.DataFrame(index = X.columns)\n    \nkf = KFold(n_splits=10, shuffle=True, random_state=42)\nfor fold, (train_idx, valid_idx) in enumerate(kf.split(X=X)):\n    X_train = X.loc[train_idx]\n    X_valid = X.loc[valid_idx]\n    y_train = y.loc[train_idx]\n    y_valid = y.loc[valid_idx]\n    X_test = test[features].copy()\n    \n    scaler = StandardScaler()\n    X_train= scaler.fit_transform(X_train)\n    X_valid = scaler.transform(X_valid)\n    X_test = scaler.transform(X_test)\n    \n    model = LGBMClassifier(\n        max_depth = 3,\n        num_leaves = 7,\n        n_estimators = 20000,\n        colsample_bytree = 0.3,\n        subsample = 0.5,\n        random_state = 42,\n        reg_alpha=18,\n        reg_lambda=17,\n        learning_rate = 0.095,\n        device = 'gpu',\n        objective= 'binary',        \n    )\n    \n    model.fit(X_train, y_train,\n             verbose = False,\n             eval_set = [(X_train, y_train), (X_valid, y_valid)],\n             eval_metric = \"auc\",\n             early_stopping_rounds = 400)\n    \n    preds_valid = model.predict_proba(X_valid)[:,1]\n    preds_test = model.predict_proba(X_test)[:,1]\n    score = roc_auc_score(y_valid, preds_valid)\n    final_predictions.append(preds_test)\n    valid_scores.append(score)\n    print(f'Valid score for Fold {fold} : {score}')\n    \n    imp[\"Fold_\"+str(fold)]=model.feature_importances_\n\nimp[\"Fold_mean\"] = imp.mean(axis=1)\nimp=imp.sort_values('Fold_mean',ascending=False)\n   \nprint('\\nAverage valid score: ', np.mean(valid_scores))\nprint('\\nFeature Importance\\n')\nimp.head(10)","e1e5feaa":"sub = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\npreds = np.mean(np.column_stack(final_predictions), axis=1)\nsub[sub.columns[1]] = preds\nsub.to_csv(\"submission.csv\", index=False)\nsub.describe()","37555a31":"preds.mean()","513cd3c6":"sub","425d933a":"# Training\n\nLGBM classifier with starter parameters from https:\/\/www.kaggle.com\/hsuchialun\/tps-lightgbm-kfold.\n","8d5b9eed":"# TPS August 2021","efb78fa8":"\n# Feature Engineering and Missing Values\nBuilding on [TPS Sep 2021 single LGBM](https:\/\/www.kaggle.com\/hiro5299834\/tps-sep-2021-single-lgbm\/notebook) by [@hiro5299834](https:\/\/www.kaggle.com\/hiro5299834)\n","0eadb3bf":"# Submission "}}