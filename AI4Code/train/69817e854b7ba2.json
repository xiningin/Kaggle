{"cell_type":{"cff4bb8c":"code","ffcdab90":"code","3569fbb6":"code","5eb73005":"code","05f14b36":"code","cbc3f4b9":"code","dec09d17":"code","33f54a91":"code","887ade84":"code","2780683b":"code","ce5bdbd5":"code","0728743f":"code","d40f2384":"code","315e6509":"code","a98d56e2":"code","faad5330":"code","32366b93":"code","c9d86a83":"code","00f42f97":"code","389a6896":"code","79dbe8d4":"code","714e2077":"code","bbb17504":"code","4cd14fb2":"code","a2315d7f":"code","c2d6d49c":"code","7fe42451":"code","10f3ca8e":"code","9d93b9f1":"code","60b7f86e":"code","1162eba8":"code","b7714842":"code","5f7f4899":"code","fdc13768":"code","822e7282":"code","219f0aba":"code","f0afae30":"code","7ed909b4":"code","a907d08e":"code","6110627c":"code","09fb62e1":"code","ac000051":"code","2e13f939":"code","b8ded212":"code","737927f2":"code","410fdbbd":"code","1099e53b":"code","196404d0":"code","660f25a2":"markdown","ecea8465":"markdown","a6ea0baa":"markdown","6548a3b0":"markdown","2f6bc16b":"markdown"},"source":{"cff4bb8c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\npd.set_option('display.max_columns',500)\nfrom sklearn import metrics\nimport time\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nimport math\nimport gc","ffcdab90":"holidays = [\"2016-01-01\", \"2016-01-18\", \"2016-02-15\", \"2016-05-30\", \"2016-07-04\",\n                \"2016-09-05\", \"2016-10-10\", \"2016-11-11\", \"2016-11-24\", \"2016-12-26\",\n                \"2017-01-01\", \"2017-01-16\", \"2017-02-20\", \"2017-05-29\", \"2017-07-04\",\n                \"2017-09-04\", \"2017-10-09\", \"2017-11-10\", \"2017-11-23\", \"2017-12-25\",\n                \"2018-01-01\", \"2018-01-15\", \"2018-02-19\", \"2018-05-28\", \"2018-07-04\",\n                \"2018-09-03\", \"2018-10-08\", \"2018-11-12\", \"2018-11-22\", \"2018-12-25\",\n                \"2019-01-01\"]","3569fbb6":"## Memory optimization\n\n# Original code from https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage by @gemartin\n# Modified to support timestamp type, categorical type\n# Modified to add option to use float16\n\nfrom pandas.api.types import is_datetime64_any_dtype as is_datetime\nfrom pandas.api.types import is_categorical_dtype\n\ndef reduce_mem_usage(df, use_float16=True):\n    \"\"\"\n    Iterate through all the columns of a dataframe and modify the data type to reduce memory usage.        \n    \"\"\"\n    \n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print(\"Memory usage of dataframe is {:.2f} MB\".format(start_mem))\n    \n    for col in df.columns:\n        if is_datetime(df[col]) or is_categorical_dtype(df[col]):\n            continue\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if use_float16 and c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype(\"category\")\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print(\"Memory usage after optimization is: {:.2f} MB\".format(end_mem))\n    print(\"Decreased by {:.1f}%\".format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","5eb73005":"cols = ['air_temperature','precip_depth_1_hr','cloud_coverage','dew_temperature','site_id','timestamp']","05f14b36":"train_df = pd.read_csv('\/kaggle\/input\/ashrae-energy-prediction\/train.csv')\nweather_train_df = pd.read_csv('\/kaggle\/input\/ashrae-energy-prediction\/weather_train.csv',usecols = cols)\nbuilding_meta_df = pd.read_csv('\/kaggle\/input\/ashrae-energy-prediction\/building_metadata.csv')","cbc3f4b9":"#train_df,weather_train_df,building_meta_df = reduce_mem_usage(train_df),reduce_mem_usage(weather_train_df),reduce_mem_usage(building_meta_df)\n","dec09d17":"train = train_df.merge(building_meta_df, on='building_id', how='left')\n\ntrain = train.merge(weather_train_df, on=['site_id', 'timestamp'], how='left')\ndel weather_train_df,building_meta_df\n","33f54a91":"gc.collect();\n","887ade84":"train['timestamp'] = pd.to_datetime(train['timestamp'])","2780683b":"train = reduce_mem_usage(train)\n","ce5bdbd5":"train.tail()","0728743f":"train.shape","d40f2384":"train.dtypes","315e6509":"le = LabelEncoder()\ntrain['primary_use'] = le.fit_transform(train['primary_use'])","a98d56e2":"chtar = (train.shape[0]) \/\/2","faad5330":"train['holidays'] = train['timestamp'].astype(str).isin(holidays)\n","32366b93":"train['holidays'] = train['holidays'].map({True:1,False:0})\n\n","c9d86a83":"train['holidays'] = train['holidays'].astype(np.int8)","00f42f97":"train[(train['site_id'] ==0) & (train['meter'] ==0)& (train['building_id'] <104)][['timestamp','meter_reading']].set_index('timestamp').plot()","389a6896":"train[train['site_id'] ==1][['meter_reading']].max()","79dbe8d4":"train['hour'] = train['timestamp'].dt.hour\ntrain['month'] = train['timestamp'].dt.month\ntrain['weekday'] = train['timestamp'].dt.weekday","714e2077":"train['hour'] = train['hour'].astype(np.int8)\ntrain['month'] = train['month'].astype(np.int8)\ntrain['weekday'] = train['weekday'].astype(np.int8)","bbb17504":"train = train.drop(columns=['timestamp'])\n","4cd14fb2":"\nX_half_1 =train[: chtar].drop(columns = ['meter_reading'])\nX_half_2 = train[ chtar : ].drop(columns = ['meter_reading'])\n\ny_half_1 = np.log1p(train[ chtar : ]['meter_reading'])\ny_half_2 = np.log1p(train[ : chtar  ]['meter_reading'])\ndel train\ngc.collect()","a2315d7f":"import lightgbm as lgb\n\ncategorical_features = [\"building_id\", \"site_id\", \"meter\", \"primary_use\"]\n\n\nd_half_1 = lgb.Dataset(X_half_1, label=y_half_1, categorical_feature=categorical_features, free_raw_data=False)\nd_half_2 = lgb.Dataset(X_half_2, label=y_half_2, categorical_feature=categorical_features, free_raw_data=False)\n\n\nwatchlist_1 = [d_half_1, d_half_2]\nwatchlist_2 = [d_half_2, d_half_1]\n\nparams = {\n    \"objective\": \"regression\",\n    \"boosting\": \"gbdt\",\n    \"num_leaves\": 40,\n    \"learning_rate\": 0.05,\n    \"feature_fraction\": 0.85,\n    \"reg_lambda\": 2,\n    \"metric\": \"rmse\"\n}\n\nprint(\"Building model with first half and validating on second half:\")\nmodel_half_1 = lgb.train(params, train_set=d_half_1, num_boost_round=1000, valid_sets=watchlist_1, verbose_eval=200, early_stopping_rounds=200)\n\nprint(\"Building model with second half and validating on first half:\")\nmodel_half_2 = lgb.train(params, train_set=d_half_2, num_boost_round=1000, valid_sets=watchlist_2, verbose_eval=200, early_stopping_rounds=200)","c2d6d49c":"del X_half_1,X_half_2,y_half_1,y_half_2","7fe42451":"gc.collect()","10f3ca8e":"test_df = pd.read_csv('\/kaggle\/input\/ashrae-energy-prediction\/test.csv')\nweather_test_df = pd.read_csv('\/kaggle\/input\/ashrae-energy-prediction\/weather_test.csv', usecols = cols)","9d93b9f1":"building_meta_df = pd.read_csv('\/kaggle\/input\/ashrae-energy-prediction\/building_metadata.csv')","60b7f86e":"test = test_df.merge(building_meta_df, on='building_id', how='left')\ntest = test.merge(weather_test_df, on=['site_id', 'timestamp'], how='left')\ntest[\"timestamp\"] = pd.to_datetime(test[\"timestamp\"])\n","1162eba8":"del watchlist_1,watchlist_2","b7714842":"del test_df,train_df,weather_test_df,building_meta_df\ngc.collect()","5f7f4899":"test['hour'] = test['timestamp'].dt.hour\ntest['month'] = test['timestamp'].dt.month\ntest['weekday'] = test['timestamp'].dt.weekday\n\n","fdc13768":"test['hour'] = test['hour'].astype(np.int8)\ntest['month'] = test['month'].astype(np.int8)\ntest['weekday'] = test['weekday'].astype(np.int8)","822e7282":"\ntest['holidays'] = test['timestamp'].astype(str).isin(holidays)\ntest['holidays'] = test['holidays'].map({True:1,False:0})\n","219f0aba":"test['holidays'] = test['holidays'].astype(np.int8)\ntest = test.drop(columns=['timestamp'])","f0afae30":"test = reduce_mem_usage(test)","7ed909b4":"rows_id = test['row_id']\ntest.drop(columns=['row_id'],inplace = True)","a907d08e":"le = LabelEncoder()\ntest['primary_use'] = le.fit_transform(test['primary_use'])","6110627c":"preds_half1 = model_half_1.predict(test)","09fb62e1":"del model_half_1\ngc.collect()","ac000051":"gc.collect()","2e13f939":"preds_half2 = model_half_2.predict(test)","b8ded212":"preds_final = np.expm1(preds_half1) + np.expm1(preds_half2) ","737927f2":"preds_final","410fdbbd":"sub = pd.DataFrame({\"row_id\":rows_id,\"meter_reading\":preds_final})\nsub.to_csv('submission.csv', index=False)","1099e53b":"from IPython.display import FileLink","196404d0":"FileLink('submission.csv')","660f25a2":"d_types = {'building_id': np.int16,\n          'meter': np.int8,\n          'site_id': np.int8,\n          'primary_use': 'category',\n          'square_feet': np.int32,\n          'year_built': np.float16,\n          'floor_count': np.float16,\n          'air_temperature': np.float32,\n          'cloud_coverage': np.float16,\n          'dew_temperature': np.float32,\n          'precip_depth_1_hr': np.float16,\n          'sea_level_pressure': np.float32,\n          'wind_direction': np.float16,\n          'wind_speed': np.float32}\n\nfor feature in d_types:\n    train[feature] = train[feature].astype(d_types[feature])\n    \ntrain[\"timestamp\"] = pd.to_datetime(train[\"timestamp\"])\ngc.collect();","ecea8465":"feature_cols = [\"air_temperature\", \"cloud_coverage\", \"dew_temperature\", \"precip_depth_1_hr\"]\ndf_site = train.groupby(\"site_id\")\n    \ndf_rolled = df_site[feature_cols].rolling(window=10, min_periods=0)\n    ","a6ea0baa":"# LABEL ENCODE\ndef encode_LE(col,train=train,test=test,verbose=True):\n    df_comb = pd.concat([train[col],test[col]],axis=0)\n    df_comb,_ = df_comb.factorize(sort=True)\n    nm = col\n    if df_comb.max()>32000: \n        train[nm] = df_comb[:len(train)].astype('int32')\n        test[nm] = df_comb[len(train):].astype('int32')\n    else:\n        train[nm] = df_comb[:len(train)].astype('int16')\n        test[nm] = df_comb[len(train):].astype('int16')\n    del df_comb; x=gc.collect()\n    if verbose: print(nm,', ',end='')","6548a3b0":"<h4> basic time features<\/h4>","2f6bc16b":"# The Test Part"}}