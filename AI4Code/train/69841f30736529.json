{"cell_type":{"48602e9e":"code","aef6b56c":"code","5ef67956":"code","e54f719b":"code","01338b3b":"code","659fce52":"code","dca266f9":"code","0dd89fc5":"code","90bf657e":"code","1705faed":"code","0998a891":"code","091a3f3a":"code","7c01e513":"code","8c2d67b2":"code","516a75ea":"code","47e7c565":"code","9f5b7869":"code","fc524010":"code","af2cfe2a":"code","609645b4":"code","f764ed15":"code","05bd3e36":"code","3a4d5738":"code","5ad698f1":"code","489bb654":"code","66ff2f61":"code","ddd84e5c":"code","95d417f8":"code","55473fe2":"code","9963a39b":"code","59912cbb":"code","3611ef09":"code","659b4bbb":"code","8973c857":"code","68bc73bd":"code","7373adfb":"code","b41a0f27":"code","84d8e46d":"code","b7e48841":"code","02db3e45":"code","a64dcd4f":"code","1f028af2":"code","1b43c613":"code","a85edef7":"code","ab3aa93d":"code","a2470339":"code","ddc1a78f":"code","af70108b":"code","9038e0cc":"code","10416f08":"code","e267a97e":"code","d506aadd":"code","b54b2756":"code","a6fb9b6c":"code","d89fce92":"code","667a5091":"code","30ec662b":"code","ff9dc22a":"code","7dd16959":"code","01aa281d":"code","119c2443":"code","09582aaf":"code","18c425aa":"code","8544face":"code","07fde294":"code","56daece4":"code","8add6585":"code","12bfe820":"code","3f8bf74a":"code","d921e0c0":"code","0da328df":"code","1ac84bc1":"code","5567002e":"code","ff37041a":"code","dba2dabb":"code","05398a89":"code","2d46d34b":"code","7d1765fd":"code","71fc566b":"code","b67db4fc":"code","d7cc36ce":"code","902239b7":"code","b54f4e5f":"code","54180f98":"code","d97da0b3":"code","4b790125":"code","e5eec4a5":"code","a020093c":"code","eef5f690":"code","503ed068":"code","c8591072":"code","4ca16463":"code","03297b85":"code","7e8f85c0":"code","3a1cd2bd":"code","c6313cd2":"code","30c2108e":"code","e08d2f5e":"code","d54e54ca":"code","cc9071e1":"code","5620db15":"code","09c14a28":"code","9ce61ba8":"code","3ccccf31":"code","5e714c88":"code","9deb9629":"code","70e33c3d":"code","ab625a50":"code","c86f3b9b":"code","46bf8bcc":"code","604063c8":"code","fc552bef":"code","dfae8f48":"code","95f86f70":"code","a51c2538":"code","403dea0c":"code","9ac1724a":"code","9a5ec8b2":"code","952aba47":"code","c25ebb9d":"code","6bdd44e1":"code","4de81678":"code","7fae965f":"markdown","080b06aa":"markdown","e70b145a":"markdown","10ff8e78":"markdown","d14952fc":"markdown","2aeb723d":"markdown","277438e7":"markdown","afb93c0e":"markdown","ee4fa1ca":"markdown","0a35c48f":"markdown","03c27b3f":"markdown","d54e5d4d":"markdown","fee2c581":"markdown","aa2464e3":"markdown","83f86a15":"markdown","24633203":"markdown","d0bfe06b":"markdown","a009e38f":"markdown","63b4e578":"markdown","422b715e":"markdown","6b8af5c5":"markdown","2c52790d":"markdown","d93b8c83":"markdown","02eac43b":"markdown","be36e9bc":"markdown","2e45e516":"markdown","a181a9b5":"markdown","c8e1f07d":"markdown","112329a8":"markdown","072129ab":"markdown","485297e9":"markdown","5e2cb74c":"markdown","2bba49fa":"markdown","eafea72b":"markdown","20604ee3":"markdown","b0ccb68f":"markdown","88b368a2":"markdown","6213c525":"markdown","44dc8d0c":"markdown","7a4fe4c3":"markdown","e73c3568":"markdown","88172d7c":"markdown","51b38ddc":"markdown","17886b7d":"markdown","b94bde51":"markdown"},"source":{"48602e9e":"# Gerekli import i\u015flemleri ger\u00e7ekle\u015ftirildi. Do\u011frusal Regresyon modellerine ait import i\u015flemleri yap\u0131ld\u0131.\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.linear_model import Ridge, Lasso, ElasticNet\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn import model_selection\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import RidgeCV, LassoCV, ElasticNetCV\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","aef6b56c":"# Veri seti okuma i\u015flemi ger\u00e7ekle\u015ftirildi.\ndf = pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")","5ef67956":"# Veri setinin ilk 5 g\u00f6zlem birimine eri\u015fildi.\ndf.head()","e54f719b":"# Veri setinin boyutu incelendi. 322 g\u00f6zlem birimi ve 20 de\u011fi\u015fkenden olu\u015fmaktad\u0131r.\ndf.shape","01338b3b":"# Veri setinin yap\u0131sal bilgilerine ula\u015f\u0131ld\u0131.\ndf.info()","659fce52":"# De\u011fi\u015fkenlerdeki e\u015f\u015fiz g\u00f6zlem say\u0131lar\u0131na eri\u015fim sa\u011fland\u0131.\ndf.nunique()","dca266f9":"# League bir kategorik de\u011fi\u015fken oldu\u011fu i\u00e7in buradaki s\u0131n\u0131flardan ka\u00e7 adet oldu\u011fu incelenildi. \n# League de\u011fi\u015fkeni oyuncunun oynam\u0131\u015f oldu\u011fu lig hakk\u0131nda bilgi vermektedir.\ndf[\"League\"].value_counts()","0dd89fc5":"df.League.value_counts().plot.barh();","90bf657e":"# NewLeague bir kategorik de\u011fi\u015fken oldu\u011fu i\u00e7in buradaki s\u0131n\u0131flardan ka\u00e7 adet oldu\u011fu incelenildi. \n# NewLeague de\u011fi\u015fkeni oyuncunun 1987 y\u0131l\u0131nda hangi ligde oynayaca\u011f\u0131 hakk\u0131nda bilgi vermektedir.\ndf[\"NewLeague\"].value_counts()","1705faed":"df.NewLeague.value_counts().plot.barh();","0998a891":"# Division bir kategorik de\u011fi\u015fken oldu\u011fu i\u00e7in buradaki s\u0131n\u0131flardan ka\u00e7 adet oldu\u011fu incelenildi. \n# Division de\u011fi\u015fkeni oyuncunun oynad\u0131\u011f\u0131 pozisyon hakk\u0131nda bilgi vermektedir.\ndf[\"Division\"].value_counts()","091a3f3a":"df.Division.value_counts().plot.barh();","7c01e513":"# Salary (Maa\u015f) de\u011fi\u015fkeninin maksimum de\u011ferine eri\u015filmi\u015ftir. Ayn\u0131 zamanda ba\u011f\u0131ml\u0131 de\u011fi\u015fkenimizdir.\ndf[\"Salary\"].max()","8c2d67b2":"# Salary (Maa\u015f) de\u011fi\u015fkeninin minimum de\u011ferine eri\u015filmi\u015ftir.\ndf[\"Salary\"].min()","516a75ea":"# Salary (Maa\u015f) de\u011fi\u015fkeninin histogram ve yo\u011funluk grafi\u011fi \u00e7izdirilmi\u015ftir.\nsns.distplot(df.Salary);","47e7c565":"# Veri setinin betimsel istatistiklerine eri\u015fildi.\ndf.describe().T","9f5b7869":"# Veri setinin korelasyonuna eri\u015fim sa\u011flanm\u0131\u015ft\u0131r. De\u011fi\u015fkenler aras\u0131nda ne tarz bir ili\u015fki oldu\u011fu incelenmi\u015ftir. \n# Korelasyon de\u011feri > 0 ise pozitif korelasyon bulunmaktad\u0131r. Bir de\u011fi\u015fken de\u011feri artarken di\u011fer de\u011fi\u015fkenin de de\u011feri artmaktad\u0131r.\n# Korelasyon = 0 ise korelasyon yoktur anlam\u0131na gelmektedir.\n# Korelasyon < 0 ise negatif korelasyon bulunmaktad\u0131r. Bir de\u011fi\u015fken artarken di\u011fer de\u011fi\u015fken azalmaktad\u0131r. \n# Korelasyonlar incelendi\u011finde Salary ba\u011f\u0131ml\u0131 de\u011fi\u015fkene pozitif korelasyon olarak etkimekte olan 2 de\u011fi\u015fken bulunmaktad\u0131r. \n# Bu de\u011fi\u015fkenler CRBI ile CRuns de\u011fi\u015fkenleridir. Bunlar artt\u0131k\u00e7a Salary (Maa\u015f) de\u011fi\u015fkeni de artmaktad\u0131r.\ndf.corr()","fc524010":"# Veri setinin korelasyon matrisi grafi\u011fine eri\u015fim sa\u011flanm\u0131\u015ft\u0131r.\nf, ax = plt.subplots(figsize= [20,15])\nsns.heatmap(df.corr(), annot=True, fmt=\".2f\", ax=ax, cmap = \"magma\" )\nax.set_title(\"Correlation Matrix\", fontsize=20)\nplt.show()","af2cfe2a":"# League de\u011fi\u015fkenine g\u00f6re groupby yap\u0131l\u0131p hangi ligde ortalama ne kadar maa\u015f al\u0131nmakta bu incelenmi\u015ftir.\ndf.groupby(\"League\").agg({\"Salary\": \"mean\"})","609645b4":"# 1987 y\u0131l\u0131nda oynayacaklar\u0131 yeni liglerde ortalama ne kadar maa\u015f al\u0131nmakta bu incelenmi\u015ftir.\ndf.groupby(\"NewLeague\").agg({\"Salary\": \"mean\"})","f764ed15":"# Oyuncunun oynad\u0131\u011f\u0131 pozisyona g\u00f6re ortalama ne kadar maa\u015f almakta bu incelenmi\u015ftir.\ndf.groupby(\"Division\").agg({\"Salary\": \"mean\"})","05bd3e36":"# Veri setinin korelasyonu incelendi\u011finde CRBI de\u011fi\u015fkeni pozitif y\u00f6nl\u00fc korelasyona sahipti. Bu de\u011fi\u015fken artt\u0131k\u00e7a Salary de\u011fi\u015fkeninde artmas\u0131 gerekmektedir.\n# Buna dayal\u0131 olarak CRBI de\u011fi\u015fkeni kariyeri boyunca yapm\u0131\u015f oldu\u011fu vuru\u015f say\u0131s\u0131d\u0131r. Buna g\u00f6re gruplay\u0131p Salary de\u011fi\u015fkeninin ortalamas\u0131 incelenmi\u015ftir.\ndf.groupby(\"CRBI\").agg({\"Salary\": \"mean\"})","3a4d5738":"# Veri setinin korelasyonu incelendi\u011finde CRBI de\u011fi\u015fkeni pozitif y\u00f6nl\u00fc korelasyona sahipti. Bu de\u011fi\u015fken artt\u0131k\u00e7a Salary de\u011fi\u015fkeninde artmas\u0131 gerekmektedir.\n# Buna dayal\u0131 olarak CRuns de\u011fi\u015fkeni kariyeri boyunca yapm\u0131\u015f oldu\u011fu ko\u015fu say\u0131s\u0131d\u0131r. Buna g\u00f6re gruplay\u0131p Salary de\u011fi\u015fkeninin ortalamas\u0131 incelenmi\u015ftir.\ndf.groupby(\"CRuns\").agg({\"Salary\": \"mean\"})","5ad698f1":"# League ve Years de\u011fi\u015fkenlerine g\u00f6re gruplay\u0131p acaba hangi ligde ve kariyer s\u00fcresine g\u00f6re maa\u015f ortalamas\u0131 nedir?\n# Lig ve toplam kariyer y\u0131llar\u0131na g\u00f6re gruplanarak oyuncunun ald\u0131klar\u0131 maa\u015flar\u0131n ortalamas\u0131 nedir? \ndf.groupby([\"League\",\"Years\"]).agg({\"Salary\": \"mean\"})","489bb654":"# NewLeague ve Years de\u011fi\u015fkenlerine g\u00f6re gruplay\u0131p acaba 1987 oynad\u0131\u011f\u0131 lig ve kariyer s\u00fcresine g\u00f6re maa\u015f ortalamas\u0131 nedir?\n#  Yeni Lig ve toplam kariyer s\u00fcresine g\u00f6re gruplanarak oyuncunun ald\u0131klar\u0131 maa\u015flar\u0131n ortalamas\u0131 nedir? \ndf.groupby([\"NewLeague\",\"Years\"]).agg({\"Salary\": \"mean\"})","66ff2f61":"# Oyuncular\u0131n oynad\u0131klar\u0131 pozisyonlara g\u00f6re ald\u0131klar\u0131 ortalama maa\u015f nedir buna eri\u015filmi\u015ftir.\ndf.groupby([\"Division\",\"Years\"]).agg({\"Salary\": \"mean\"})","ddd84e5c":"#Kariyeri boyunca isabet say\u0131s\u0131 en y\u00fcksek olan g\u00f6zlem birimlerine veri setini azalan \u015fekilde s\u0131ralayarak eri\u015filmi\u015ftir. \ndf.sort_values(\"CHits\",ascending = False)","95d417f8":"# Liglere g\u00f6re gruplay\u0131p kariyeri boyunca yap\u0131lan isabet say\u0131lar\u0131n\u0131n maksimum de\u011ferine eri\u015filmi\u015ftir.\ndf.groupby(\"League\").agg({\"CHits\": \"max\"})","55473fe2":"# Oyuncular\u0131n oynad\u0131klar\u0131 pozisyonlara g\u00f6re gruplama yap\u0131l\u0131p kariyeri boyunca isabet say\u0131s\u0131n\u0131n maksimum de\u011ferine eri\u015filmi\u015ftir.\ndf.groupby(\"Division\").agg({\"CHits\": \"max\"})","9963a39b":"# Lig de\u011fi\u015fkenine g\u00f6re gruplay\u0131p 1986 y\u0131l\u0131ndaki isabet de\u011ferlerinin maksimumuna eri\u015filmi\u015ftir.\ndf.groupby(\"League\").agg({\"Hits\": \"max\"})","59912cbb":"# Lig de\u011fi\u015fkenine g\u00f6re gruplay\u0131p 1986 y\u0131l\u0131nda beyzbol sopas\u0131 ile yap\u0131lan vuru\u015f say\u0131s\u0131n\u0131n maksimum de\u011ferlerine eri\u015fildi.\ndf.groupby(\"League\").agg({\"AtBat\": \"max\"})","3611ef09":"# Lig de\u011fi\u015fkenine g\u00f6re gruplay\u0131p kariyer s\u00fcresinin ortalama de\u011ferlerine eri\u015filmi\u015ftir.\ndf.groupby(\"League\").agg({\"Years\": \"mean\"})","659b4bbb":"# Lig de\u011fi\u015fkenine g\u00f6re gruplay\u0131p kariyer s\u00fcresinin maksimum de\u011ferlerine eri\u015filmi\u015ftir.\ndf.groupby(\"League\").agg({\"Years\": \"max\"})","8973c857":"# Lig de\u011fi\u015fkenine g\u00f6re gruplay\u0131p hangi ligde ka\u00e7 hata yap\u0131lmakta bunun ortalama de\u011ferlerine eri\u015filmi\u015ftir.\ndf.groupby(\"League\").agg({\"Errors\": \"mean\"})","68bc73bd":"# Lig de\u011fi\u015fkenine g\u00f6re gruplay\u0131p hangi ligde ka\u00e7 hata yap\u0131lmakta bunun maksimum de\u011ferlerine eri\u015filmi\u015ftir.\ndf.groupby(\"League\").agg({\"Errors\": \"max\"})","7373adfb":"# Lig de\u011fi\u015fkenine g\u00f6re gruplay\u0131p 1986 y\u0131l\u0131nda yap\u0131lan sat\u0131\u015f de\u011ferinin maksimum de\u011ferlerine eri\u015filmi\u015ftir.\ndf.groupby(\"League\").agg({\"PutOuts\": \"max\"})","b41a0f27":"# Lig de\u011fi\u015fkenine g\u00f6re gruplay\u0131p liglerde maksimum ka\u00e7 asist yap\u0131lmakta bu de\u011fere eri\u015filmi\u015ftir.\ndf.groupby(\"League\").agg({\"Assists\": \"max\"})","84d8e46d":"# Kariyer s\u00fcresine g\u00f6re gruplay\u0131p oyuncunun kariyeri boyunca beyzbol sopas\u0131 ile yap\u0131lan vuru\u015f say\u0131s\u0131n\u0131n maksimum de\u011ferlerine eri\u015fim sa\u011flanm\u0131\u015ft\u0131r.\ndf.groupby(\"Years\").agg({\"CAtBat\": \"max\"})","b7e48841":"# lig ve Kariyer s\u00fcresine g\u00f6re gruplay\u0131p oyuncunun kariyeri boyunca beyzbol sopas\u0131 ile yap\u0131lan vuru\u015f say\u0131s\u0131n\u0131n maksimum de\u011ferlerine eri\u015fim sa\u011flanm\u0131\u015ft\u0131r.\ndf.groupby([\"League\", \"Years\"]).agg({\"CAtBat\": \"max\"})","02db3e45":"# Lig de\u011fi\u015fkenine g\u00f6re gruplay\u0131p kariyeri boyunca acaba liglerde beyzbol sopas\u0131 ile ortalama ka\u00e7 at\u0131\u015f ger\u00e7ekle\u015fmi\u015ftir buna eri\u015fim sa\u011fland\u0131.\ndf.groupby(\"League\").agg({\"CAtBat\": \"mean\"})","a64dcd4f":"# Kariyerleri ile ilgili olan de\u011fi\u015fkenler kariyer y\u0131llar\u0131na b\u00f6l\u00fcnerek ortalama de\u011ferler elde edilerek veri setinde yeni de\u011fi\u015fkenler olu\u015fturulmu\u015ftur.\ndf[\"OrtCAtBat\"] = df[\"CAtBat\"] \/ df[\"Years\"]\ndf[\"OrtCHits\"] = df[\"CHits\"] \/ df[\"Years\"]\ndf[\"OrtCHmRun\"] = df[\"CHmRun\"] \/ df[\"Years\"]\ndf[\"OrtCruns\"] = df[\"CRuns\"] \/ df[\"Years\"]\ndf[\"OrtCRBI\"] = df[\"CRBI\"] \/ df[\"Years\"]\ndf[\"OrtCWalks\"] = cwalks = df[\"CWalks\"] \/ df[\"Years\"]\ndf.head()","1f028af2":"# Modele oyuncunun \u00f6zellikleri ile ilgili de\u011fi\u015fkenleri verme i\u015flemi ger\u00e7ekle\u015ftiriyoruz. Di\u011fer de\u011fi\u015fkenler sezon boyunca ger\u00e7ekle\u015fen de\u011fi\u015fkenler. \n# Amac\u0131m\u0131z bir oyuncuya maa\u015f tahmini yapmak ise o oyuncunun ki\u015fisel de\u011ferlerine bak\u0131larak tahmin yap\u0131lmak daha mant\u0131kl\u0131 olacakt\u0131r.\ndf = df.drop(['AtBat','Hits','HmRun','Runs','RBI','Walks','Assists','Errors',\"PutOuts\",'League','NewLeague'], axis=1)","1b43c613":"# df'in ilk 5 g\u00f6zlem birimine eri\u015fim sa\u011fland\u0131.\ndf.head()","a85edef7":"# Veri setinde yer alan kategorik de\u011fi\u015fkenlerin say\u0131sal de\u011ferlere d\u00f6n\u00fc\u015ft\u00fcr\u00fclmesi gerekmektedir. \n# Bu nedenle bu d\u00f6n\u00fc\u015f\u00fcm i\u015flemleri Label Encoding ve One Hot Encoding y\u00f6ntemi ile yap\u0131lmaktad\u0131r.\n# Burada One Hot Encoding d\u00f6n\u00fc\u015f\u00fcm\u00fc yap\u0131larak kategorik de\u011fi\u015fkenler say\u0131sal de\u011ferlere d\u00f6n\u00fc\u015f\u00fclm\u00fc\u015ft\u00fcr. Ayn\u0131 zamanda Dummy de\u011fi\u015fken tuza\u011f\u0131ndan da korunulmu\u015ftur.\ndf = pd.get_dummies(df, columns =[\"Division\"], drop_first = True)","ab3aa93d":"df.head()","a2470339":"# Veri setinde eksik g\u00f6zlem olup olmad\u0131\u011f\u0131 sorgulanmaktad\u0131r.\ndf.isnull().sum()","ddc1a78f":"# Eksik g\u00f6zlemlerin g\u00f6rselle\u015ftirilmesi i\u00e7in missingno k\u00fct\u00fcphanesi kullan\u0131larak eksik g\u00f6zlemler g\u00f6rselle\u015ftirilmi\u015ftir.\nimport missingno as msno\nmsno.bar(df);","af70108b":"# Salary (Maa\u015f) de\u011fi\u015fkeninde 59 adet eksik g\u00f6zlem bulunmakta acaba bu eksik g\u00f6zlemler ka\u00e7 y\u0131ll\u0131k kariyere sahip ve hangi ligde oynamaktalar buna eri\u015fim sa\u011flanm\u0131\u015ft\u0131r.\n# K\u0131saca eksik g\u00f6zlem olan de\u011ferler acaba ka\u00e7 y\u0131ll\u0131k kariyer ve hangi ligde oynamaktalar buna eri\u015fim sa\u011fland\u0131.\ndf_eksik = df[df[\"Salary\"].isnull()].head()\ndf_eksik","9038e0cc":"# Eksik g\u00f6zlemler KNN Algoritmas\u0131 ile dolduruldu.\nfrom sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors = 5)\ndf_filled = imputer.fit_transform(df)","10416f08":"# Tekrar sorguland\u0131 eksik de\u011fer var m\u0131 diye hepsinin KNN algoritmas\u0131 ile dolduruldu\u011fu g\u00f6zlemlendi.\ndf = pd.DataFrame(df_filled,columns = df.columns)\ndf.isnull().sum()","e267a97e":"# Salary de\u011fi\u015fkenini boxplot y\u00f6ntemi ile g\u00f6rselle\u015ftirme i\u015flemi yap\u0131lm\u0131\u015ft\u0131r. Ayk\u0131r\u0131 g\u00f6zlemlere grafikte rastlamaktay\u0131z.\nimport seaborn as sns\nsns.boxplot(x = df[\"Salary\"]);","d506aadd":"# Ba\u011f\u0131ml\u0131 de\u011fi\u015fkenin betimsel istatistiklerine eri\u015fim sa\u011flanm\u0131\u015ft\u0131r.\ndf[\"Salary\"].describe()","b54b2756":"# \u0130lk olarak % 1 lik \u00e7eyreklik ve % 99 daki \u00e7eyreklikler incelendi\u011finde ayk\u0131r\u0131 g\u00f6zleme rastlanmam\u0131\u015ft\u0131r.\n# Daha sonra % 5 lik \u00e7eyreklik ve % 95 deki \u00e7eyreklikler incelendi\u011finde ayk\u0131r\u0131 g\u00f6zleme rastlanmam\u0131\u015ft\u0131r.\n# Son olarak % 25 lik \u00e7eyreklik ve % 75 lik \u00e7eyreklikler incelendi\u011finde ayk\u0131r\u0131 g\u00f6zleme rastlanm\u0131\u015ft\u0131r.\n# Sonu\u00e7: 25 ve 75'lik \u00e7eyrekliklere g\u00f6re ba\u011f\u0131ml\u0131 de\u011fi\u015fkene ayk\u0131r\u0131 g\u00f6zlem analizi uygulanackt\u0131r. \u0130\u015f sekt\u00f6r bilgisi konusunda dokunulmayadabilir.\n# Burada 25 ve 75'lik \u00e7eyrekliklerde t\u00fcm de\u011fi\u015fkenlerde ka\u00e7 adet ayk\u0131r\u0131 g\u00f6zlem var buna eri\u015fim sa\u011flanm\u0131\u015ft\u0131r.\n\nfor feature in df:\n\n    Q1 = df[feature].quantile(0.25)\n    Q3 = df[feature].quantile(0.75)\n    IQR = Q3-Q1\n    upper = Q3 + 1.5*IQR\n    lower = Q1 - 1.5*IQR\n\n    if df[(df[feature] > upper) | (df[feature] < lower)].any(axis=None):\n        print(feature,\"yes\")\n        print(df[(df[feature] > upper) | (df[feature] < lower)].shape[0])\n    else:\n        print(feature, \"no\")","a6fb9b6c":"# Salary de\u011fi\u015fkeni i\u00e7in ak\u0131r\u0131 g\u00f6zlem analizinde kullan\u0131lan IQR derinin hesaplanmas\u0131 ve alt ve \u00fcst s\u0131n\u0131rlar\u0131n belirlenilmesi i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\n# Bulunan ayk\u0131r\u0131 g\u00f6zlemler \u00fcst s\u0131n\u0131r ile bask\u0131lanm\u0131\u015ft\u0131r. Ayk\u0131r\u0131 g\u00f6zlem analizinde en yayg\u0131n olarak bask\u0131lama y\u00f6ntemi kullan\u0131lmaktad\u0131r. \nQ1 = df.Salary.quantile(0.25)\nQ3 = df.Salary.quantile(0.75)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\ndf.loc[df[\"Salary\"] > upper,\"Salary\"] = upper","d89fce92":"# Ayk\u0131r\u0131 de\u011ferler \u00fcst s\u0131n\u0131r ile bask\u0131land\u0131r\u0131larak Salary de\u011fi\u015fkenin boxplot (kutu) grafi\u011fi \u00e7izdirilerek ayk\u0131r\u0131 de\u011ferlerden kurtuldu\u011funu g\u00f6zlemlemekteyiz.\nimport seaborn as sns\nsns.boxplot(x = df[\"Salary\"]);","667a5091":"from sklearn.neighbors import LocalOutlierFactor\nlof =LocalOutlierFactor(n_neighbors= 20)\nlof.fit_predict(df)","30ec662b":"# Skor de\u011ferleri gelmi\u015ftir.\ndf_scores = lof.negative_outlier_factor_\nnp.sort(df_scores)[0:30]","ff9dc22a":"# E\u015fik de\u011feri belirlenilmi\u015ftir.\nthreshold = np.sort(df_scores)[9]\nthreshold","7dd16959":"# Belirlenen e\u015fik de\u011fer veri setine uyarlanarak ayk\u0131r\u0131 g\u00f6zlemlerden kurtulunmu\u015f olundu.\noutlier = df_scores > threshold\ndf = df[outlier]","01aa281d":"# Ayk\u0131r\u0131 de\u011ferlerden kurtulduktan sonra veri setimizin boyutu incelenilmi\u015ftir.\ndf.shape","119c2443":"# Gerekli import i\u015flemleri ger\u00e7ekle\u015ftirilmi\u015ftir.\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","09582aaf":"# Ba\u011f\u0131ml\u0131 ve Ba\u011f\u0131ms\u0131z de\u011fi\u015fkenler se\u00e7ilerek X ve y de\u011fi\u015fkenlerine atanm\u0131\u015ft\u0131r. X ba\u011f\u0131ms\u0131z de\u011fi\u015fkeni standardize edilmi\u015ftir.\n# Veri setinde yer alan de\u011fi\u015fkenleri standardizasyon i\u015flemi yap\u0131larak model kurulumunda al\u0131nan hatalar\u0131n d\u00fc\u015f\u00fcr\u00fclmesinde etkili bir fakt\u00f6rd\u00fcr. \n# Birden \u00e7ok standardizasyon y\u00f6ntemi bulunmaktad\u0131r. Bunlar \"Normalize\", \"MinMax\" ve \"Scale\" gibi y\u00f6ntemlerdir.\n# Test ve Train ay\u0131rma i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir. Train setinin % 20'si test setini olu\u015fturmaktad\u0131r. Yani train = % 80 ve test = % 20 olarak ayr\u0131lm\u0131\u015ft\u0131r.\nX = df[[\"OrtCHits\"]]\ny = df[[\"Salary\"]]\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","18c425aa":"# Train setleri ile basit do\u011frusal regresyon model kurulum i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)","8544face":"# Basit Do\u011frusal Regresyonun model denklemi (form\u00fcl\u00fc) yazd\u0131r\u0131lm\u0131\u015ft\u0131r.\n# \u0130ntercept: Model denkleminde yer alan b0 de\u011feridir. Y\u00fckseklikde denilebilir.\n# Coef: Model denkleminde yer alan b1, b2 ... bp de\u011ferleridir.\nprint(\"Form\u00fcl: \"+str(reg_model.intercept_)+\" \"+str(reg_model.coef_)+\"x1\")","07fde294":"# Model e\u011fitim hatas\u0131 hesaplanm\u0131\u015ft\u0131r.\ny_pred = reg_model.predict(X_train)\nreg_model_basit_egitim_hata = np.sqrt(mean_squared_error(y_train, y_pred))\nreg_model_basit_egitim_hata","56daece4":"# Test Hatas\u0131\n# Modelin daha \u00f6nce g\u00f6rmedi\u011fi veriler \u00fczerinden test i\u015flemi ger\u00e7ekle\u015ftirilip RMSE Hata De\u011feri hesaplanm\u0131\u015ft\u0131r.\ny_pred = reg_model.predict(X_test)\nreg_model_basit_test_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nreg_model_basit_test_hata","8add6585":"# Model do\u011frulama y\u00f6netmlerinden K-Fold CV y\u00f6ntemi kullan\u0131larak model do\u011frulama i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nfrom sklearn.model_selection import cross_val_score\nprint(\"Model Do\u011frulama RMSE Hata De\u011feri:\" + str(np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))))","12bfe820":"# Gerekli import i\u015flemleri ger\u00e7ekle\u015ftirilmi\u015ftir.\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split","3f8bf74a":"# Ba\u011f\u0131ml\u0131 ve Ba\u011f\u0131ms\u0131z de\u011fi\u015fkenler belirlenip X ve y de\u011fi\u015fkenlerine atanm\u0131\u015ft\u0131r.\n# Daha sonra ba\u011f\u0131ms\u0131z de\u011fi\u015fkenler standardize edilmi\u015ftir ancak one hot encoding k\u0131sm\u0131nda olu\u015fan yeni dummy de\u011fi\u015fkenleri standardize etmemek gerekmektedir.\n# Bu nedenle ilk \u00f6nce b\u00fct\u00fcn ba\u011f\u0131ms\u0131z de\u011fi\u015fkenler standardize edilip sonras\u0131nda dummy de\u011fi\u015fkenler 1-0 olarak d\u00f6n\u00fc\u015ft\u00fcr\u00fclm\u00fc\u015ft\u00fcr.\n# Standardize i\u015flemi sonucunda dummy de\u011fi\u015fkenlerde yer alan 0 de\u011ferleri negatfi de\u011ferlere 1 de\u011ferleri pozitif de\u011ferlere d\u00f6n\u00fc\u015ft\u00fcr\u00fclm\u00fc\u015ft\u00fcr.\n# Bu nedenle 0'dan k\u00fc\u00e7\u00fck olan de\u011ferlere 0, b\u00fcy\u00fck olan de\u011ferlere 1 de\u011feri bir for d\u00f6ng\u00fcs\u00fc yaz\u0131larak atanm\u0131\u015ft\u0131r.\ny = df[\"Salary\"]\nX = df.drop(\"Salary\",axis=1)\nX = scaler.fit_transform(X)\nfor i in range(len(X)):\n    if X[i][13]<0:\n        X[i][13]=0\n    else:\n        X[i][13]=1  \nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","d921e0c0":"# Ayr\u0131lm\u0131\u015f olan veri setinin boyutlar\u0131na eri\u015fim sa\u011flanm\u0131\u015ft\u0131r.\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","0da328df":"# Train setleri ile \u00e7oklu do\u011frusal regresyon model kurulum i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)","1ac84bc1":"# Model denkleminde yer alan b0 de\u011feridir. Y\u00fckseklikde denilebilir.\nreg_model.intercept_","5567002e":"# Model denkleminde yer alan b1, b2 ... bp de\u011ferleridir.\nreg_model.coef_","ff37041a":"# Model e\u011fitim hatas\u0131 hesaplanm\u0131\u015ft\u0131r.\ny_pred = reg_model.predict(X_train)\nreg_model_egitim_hata = np.sqrt(mean_squared_error(y_train, y_pred))\nreg_model_egitim_hata","dba2dabb":"# Test Hatas\u0131\n# Modelin daha \u00f6nce g\u00f6rmedi\u011fi veriler \u00fczerinden test i\u015flemi ger\u00e7ekle\u015ftirilip RMSE Hata De\u011feri hesaplanm\u0131\u015ft\u0131r.\ny_pred = reg_model.predict(X_test)\nreg_model_test_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nreg_model_test_hata","05398a89":"# Model do\u011frulama y\u00f6netmlerinden K-Fold CV y\u00f6ntemi kullan\u0131larak model do\u011frulama i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nfrom sklearn.model_selection import cross_val_score\nprint(\"Model Do\u011frulama RMSE Hata De\u011feri:\" + str(np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))))","2d46d34b":"# Gerekli import i\u015flemleri yap\u0131lm\u0131\u015ft\u0131r.\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn import model_selection\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import RidgeCV","7d1765fd":"# Train setleri ile ridge regresyon model kurulum i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nridge_model = Ridge()\nridge_model.fit(X_train, y_train)","71fc566b":"# Model denkleminde yer alan b0 de\u011feridir. Y\u00fckseklikde denilebilir.\nridge_model.intercept_","b67db4fc":"# Model denkleminde yer alan b1, b2 ... bp de\u011ferleridir.\nridge_model.coef_","d7cc36ce":"# Model e\u011fitim hatas\u0131 hesaplanm\u0131\u015ft\u0131r.\ny_pred = ridge_model.predict(X_train)\nridge_model_egitim_hata = np.sqrt(mean_squared_error(y_train, y_pred))\nridge_model_egitim_hata","902239b7":"# Test Hatas\u0131\n# Modelin daha \u00f6nce g\u00f6rmedi\u011fi veriler \u00fczerinden test i\u015flemi ger\u00e7ekle\u015ftirilip RMSE Hata De\u011feri hesaplanm\u0131\u015ft\u0131r.\ny_pred = ridge_model.predict(X_test)\nridge_model_test_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nridge_model_test_hata","b54f4e5f":"# Model do\u011frulama y\u00f6netmlerinden K-Fold CV y\u00f6ntemi kullan\u0131larak model do\u011frulama i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nfrom sklearn.model_selection import cross_val_score\nprint(\"Model Do\u011frulama RMSE Hata De\u011feri:\" + str(np.sqrt(np.mean(-cross_val_score(ridge_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))))","54180f98":"# Kurulmu\u015f olunan modelin hiperparametre de\u011ferlerine eri\u015fim sa\u011flanm\u0131\u015ft\u0131r. \n# Hiperparametre optimizasyonunda alpha de\u011ferinin en uygun de\u011feri bulunarak final modeli kurulacakt\u0131r.\nridge_model","d97da0b3":"# Baz\u0131 alpha setleri haz\u0131rlan\u0131lm\u0131\u015ft\u0131r. Model i\u00e7in denenip en uygunu se\u00e7ilecektir.\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nalphas4 = [1e-15, 1e-10, 1e-8, 1e-4, 1e-3,1e-2, 1]\nalphas5 = np.arange(100,10000,10) ","4b790125":"# Belli alpha setleri denenerek final modeli i\u00e7in en uygun alpha de\u011feri belirlenecektir. Cross Validation i\u00e7in RidgeCV fonk. Kullan\u0131lmaktad\u0131r.\nridge_cv = RidgeCV(alphas = alphas3, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train, y_train)","e5eec4a5":"# Final modeli i\u00e7in en uygun alpha de\u011feri se\u00e7ilmi\u015ftir.\nridge_cv.alpha_","a020093c":"# Alpha de\u011feri de\u011fi\u015fkene atanm\u0131\u015ft\u0131r. Kar\u015f\u0131la\u015ft\u0131rma dataframene eklemek i\u00e7in. \nridge_alpha = ridge_cv.alpha_","eef5f690":"# Belirlenen alpha de\u011ferine g\u00f6re final modeli kururlmu\u015ftur.\nridge_tuned = Ridge(alpha = ridge_cv.alpha_)\nridge_tuned.fit(X_train, y_train)","503ed068":"y_pred = ridge_tuned.predict(X_test)\nridge_final_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nridge_final_hata","c8591072":"# Gerekli import i\u015flemleri ger\u00e7ekle\u015ftirilmi\u015ftir.\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import Ridge, Lasso\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn import model_selection\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import RidgeCV, LassoCV","4ca16463":"# Train setleri ile lasso regresyon model kurulum i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nlasso_model = Lasso()\nlasso_model.fit(X_train, y_train)","03297b85":"# Model denkleminde yer alan b0 de\u011feridir. Y\u00fckseklikde denilebilir.\nlasso_model.intercept_","7e8f85c0":"# Model denkleminde yer alan b1, b2 ... bp de\u011ferleridir.\nlasso_model.coef_","3a1cd2bd":"# Model e\u011fitim hatas\u0131 hesaplanm\u0131\u015ft\u0131r.\ny_pred = lasso_model.predict(X_train)\nlasso_model_egitim_hata = np.sqrt(mean_squared_error(y_train, y_pred))\nlasso_model_egitim_hata","c6313cd2":"# Test Hatas\u0131\n# Modelin daha \u00f6nce g\u00f6rmedi\u011fi veriler \u00fczerinden test i\u015flemi ger\u00e7ekle\u015ftirilip RMSE Hata De\u011feri hesaplanm\u0131\u015ft\u0131r.\ny_pred = lasso_model.predict(X_test)\nlasso_model_test_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nlasso_model_test_hata","30c2108e":"# Model do\u011frulama y\u00f6netmlerinden K-Fold CV y\u00f6ntemi kullan\u0131larak model do\u011frulama i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nprint(\"Model Do\u011frulama Hatas\u0131:\" + str(np.sqrt(np.mean(-cross_val_score(lasso_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))))","e08d2f5e":"# Kurulmu\u015f olunan modelin hiperparametre de\u011ferlerine eri\u015fim sa\u011flanm\u0131\u015ft\u0131r. \n# Hiperparametre optimizasyonunda alpha de\u011ferinin en uygun de\u011feri bulunarak final modeli kurulacakt\u0131r.\nlasso_model","d54e54ca":"# Baz\u0131 alpha setleri belirlenilmi\u015ftir.\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nalphas4 = [1e-15, 1e-10, 1e-8, 1e-4, 1e-3,1e-2, 1, 5, 10, 20]\nalphas5 = np.arange(100,10000,10) ","cc9071e1":"# Belli alpha setleri denenerek final modeli i\u00e7in en uygun alpha de\u011feri belirlenecektir. Cross Validation i\u00e7in LassoCV fonk. Kullan\u0131lmaktad\u0131r.\nlasso_cv = LassoCV(alphas = alphas3, cv = 10)\nlasso_cv.fit(X_train, y_train)","5620db15":"# Final modeli i\u00e7in gerekli olan alpha belirlenilmi\u015ftir.\nlasso_cv.alpha_","09c14a28":"# Alpha de\u011feri de\u011fi\u015fkene atanm\u0131\u015ft\u0131r. Kar\u015f\u0131la\u015ft\u0131rma dataframene eklemek i\u00e7in. \nlasso_alpha = lasso_cv.alpha_","9ce61ba8":"# Belirlenen alpha de\u011feri ile final modeli kurulum i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nlasso_tuned = Lasso(alpha = lasso_cv.alpha_)\nlasso_tuned.fit(X_train, y_train)","3ccccf31":"# Final Modeli Test Hatas\u0131\ny_pred = lasso_tuned.predict(X_test)\nlasso_final_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nlasso_final_hata","5e714c88":"# Gerekli import i\u015flemleri ger\u00e7ekle\u015ftirilmi\u015ftir.\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import Ridge, Lasso, ElasticNet\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn import model_selection\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import RidgeCV, LassoCV,ElasticNetCV","9deb9629":"# ElasticNet Model kurulum i\u015flemleri ger\u00e7ekle\u015ftirilmi\u015ftir.\nenet_model = ElasticNet()\nenet_model.fit(X_train, y_train)","70e33c3d":"# Model denkleminde yer alan b0 de\u011feridir. Y\u00fckseklikde denilebilir.\nenet_model.intercept_","ab625a50":"# Model denkleminde yer alan b1, b2 ... bp de\u011ferleridir.\nenet_model.coef_","c86f3b9b":"# E\u011fitim Hatas\u0131\ny_pred = enet_model.predict(X_train)\nenet_model_egitim_hata = np.sqrt(mean_squared_error(y_train, y_pred))\nenet_model_egitim_hata","46bf8bcc":"# Test Hatas\u0131\ny_pred = enet_model.predict(X_test)\nenet_model_test_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nenet_model_test_hata","604063c8":"# Model do\u011frulama i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nprint(\"Model Do\u011frulama RMSE Hata De\u011feri:\" + str(np.sqrt(np.mean(-cross_val_score(enet_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))))","fc552bef":"enet_model","dfae8f48":"# Parametre de\u011ferleri belirlenmi\u015ftir.\nenet_params = {\"l1_ratio\": [0.1,0.4,0.5,0.6,0.8,1],\n              \"alpha\": np.linspace(0,1,1000)}","95f86f70":"# Belirlenen parametrelere g\u00f6re final modeli kurulacakt\u0131r.\nenet_model = ElasticNet()\nenet_model.fit(X_train, y_train)\nfrom sklearn.model_selection import GridSearchCV\ngs_cv_enet = GridSearchCV(enet_model, enet_params, cv = 10).fit(X_train, y_train)","a51c2538":"# En iyi parametreler belirlenilmi\u015ftir.\ngs_cv_enet.best_params_","403dea0c":"# Alpha de\u011feri de\u011fi\u015fkene atanm\u0131\u015ft\u0131r. Kar\u015f\u0131la\u015ft\u0131rma dataframene eklemek i\u00e7in. \nenet_alpha = 0.004004004004004004","9ac1724a":"# Belirlenen parametrelere g\u00f6re final modeli kurulumu yap\u0131lm\u0131\u015ft\u0131r.\nenet_tuned = ElasticNet(**gs_cv_enet.best_params_)\nenet_tuned.fit(X_train, y_train)","9a5ec8b2":"# Final Model Hatas\u0131\ny_pred = enet_tuned.predict(X_test)\nenet_final_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nenet_final_hata","952aba47":"# Modellerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131 yap\u0131lm\u0131\u015ft\u0131r. \nmodeller = [\n    reg_model,\n    ridge_tuned,\n    lasso_tuned,\n    enet_tuned,]\n\n\nfor model in modeller:\n    isimler = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    hata = np.sqrt(mean_squared_error(y_test, y_pred))\n    print(\"-\"*28)\n    print(isimler + \":\" )\n    print(\"Hata:\" + str(hata))","c25ebb9d":"# Elde edilen hatalar g\u00f6rselle\u015ftirildi.\nsonuc = []\n\nsonuclar = pd.DataFrame(columns= [\"Modeller\",\"Hata\"])\n\nfor model in modeller:\n    isimler = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    hata = np.sqrt(mean_squared_error(y_test, y_pred))    \n    sonuc = pd.DataFrame([[isimler, hata]], columns= [\"Modeller\",\"Hata\"])\n    sonuclar = sonuclar.append(sonuc)\n    \n    \nsns.barplot(x= 'Hata', y = 'Modeller', data=sonuclar, color=\"r\")\nplt.xlabel('Hata')\nplt.title('Modellerin Hata Oranlar\u0131');  ","6bdd44e1":"# Elde edilen sonu\u00e7lar dataframe olarak kaydedildi.\nsonuclar_df = pd.DataFrame({\"E\u011fitim Hatas\u0131\":[reg_model_basit_egitim_hata, reg_model_egitim_hata, ridge_model_egitim_hata, lasso_model_egitim_hata, enet_model_egitim_hata],\n                              \"Test Hatas\u0131\":[reg_model_basit_test_hata, reg_model_test_hata, ridge_model_test_hata, lasso_model_test_hata, enet_model_test_hata],                              \n                              \"Test Tuned Hatas\u0131\":[\"Yoktur\",\"Yoktur\",ridge_final_hata, lasso_final_hata,enet_final_hata],\n                               \"Alpha De\u011ferleri\": [\"Yoktur\", \"Yoktur\", ridge_alpha,lasso_alpha, enet_alpha]})\nsonuclar_df.index= [\"BAS\u0130T_LR_DETAY\", \"COKLU_LR_DETAY\",\"RIDGE_DETAY\",\"LASSO_DETAY\",\"ENET_DETAY\"]","4de81678":"# Sonu\u00e7lar incelendi.\nsonuclar_df","7fae965f":"### 3.3) Test Hatas\u0131","080b06aa":"### 2) One Hot Encoding D\u00f6n\u00fc\u015f\u00fcm\u00fc","e70b145a":"### 4.1) Model Kurulum","10ff8e78":"# 2) VER\u0130 \u00d6N \u0130\u015eLEME","d14952fc":"### 1.4) Model Do\u011frulama - K-Fold CV ","2aeb723d":"### 4.2) E\u011fitim Hatas\u0131","277438e7":"### 3.6) Hiperparametre Optimizasyonu sonras\u0131nda Final Model Kurulumu (Model Tuning)","afb93c0e":"### 5.5) Model Hiperparametre Optimizasyonu","ee4fa1ca":"### 3.1) Eksik G\u00f6zlem Birimlerinin Doldurulmas\u0131","0a35c48f":"### 4.1) Local Outlier Factor Y\u00f6ntemi ile Ayk\u0131r\u0131 G\u00f6zlem Analizi (LOF)","03c27b3f":"## 1) Basit Do\u011frusal Regresyon","d54e5d4d":"### 2.2) E\u011fitim Hatas\u0131","fee2c581":"# 4) T\u00fcm Modellerin Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","aa2464e3":"### 5.4) Model Do\u011frulama - K-Fold CV","83f86a15":"### 4.4) Model Do\u011frulama - K-Fold CV","24633203":"### 3.1) Model Kurulum","d0bfe06b":"# 1) Ke\u015fifci Veri Analizi","a009e38f":"### 3) Eksik G\u00f6zlem Analizi","63b4e578":"### 1.3) Test Hatas\u0131","422b715e":"### 4.5) Model Hiperparametre Optimizasyonu","6b8af5c5":"### 5.6) Hiperparametre Optimizasyonu sonras\u0131nda Final Model Kurulumu (Model Tuning)","2c52790d":"### 5.3) Test Hatas\u0131","d93b8c83":"### 5.7) Final Modeli Test Hatas\u0131","02eac43b":"### 4) Ayk\u0131r\u0131 G\u00f6zlem Analizi","be36e9bc":"### 2.4) Model Do\u011frulama - K-Fold CV ","2e45e516":"### 3.4) Model Do\u011frulama - K-Fold CV","a181a9b5":"# 3) Do\u011frusal Regresyon Modelleri ile Modelleme \n\n- Basit Do\u011frusal Regresyon\n- \u00c7oklu Do\u011frusal Regresyon\n- Ridge Regresyon\n- Lasso Regresyon\n- ElasticNet Regresyon\n\nHer bir model t\u00fcm veri seti ile modellenebilir ancak du durumun bir dezavantaj\u0131 bulunmaktad\u0131r model daha \u00f6nce hi\u00e7 g\u00f6rmedi\u011fi verilerde k\u00f6t\u00fc sonu\u00e7lar \u00fcretecektir. Veri setini train ve test \u015feklinde ay\u0131r\u0131p bu \u015fekilde bir model kurulum i\u015flemi ger\u00e7ekle\u015ftirilip al\u0131nan hata de\u011ferleri g\u00f6zlemlenecektir. \u0130sterseniz t\u00fcm veri ile de modeller kurabilirsiniz.","c8e1f07d":"### 5.2) E\u011fitim Hatas\u0131","112329a8":"## 5) ElasticNet Regresyon","072129ab":"### 4.3) Test Hatas\u0131","485297e9":"### 2.3) Test Hatas\u0131","5e2cb74c":"### 4.6) Hiperparametre Optimizasyonu sonras\u0131nda Final Model Kurulumu (Model Tuning)","2bba49fa":"### 3.2) E\u011fitim Hatas\u0131","eafea72b":"## 4) Lasso Regresyon","20604ee3":"### 5.1) Model Kurulum","b0ccb68f":"# Hitters Veri Seti ile Do\u011frusal Regresyon Modelleri Kullan\u0131larak Maa\u015f Tahmini\n\nBu projede do\u011frusal regresyon modelleri kullan\u0131larak maa\u015f tahmini \u00fczerine bir proje ger\u00e7ekle\u015ftirilecektir. Hitters veri seti hakk\u0131nda ve do\u011frusal regresyon modelleri hakk\u0131nda temel bilgiler verilecektir. Proje beyzbol oyuncular\u0131n\u0131n maa\u015flar\u0131n\u0131 tahmin edecek bir makine \u00f6\u011frenmesi modeli geli\u015ftirmektir. Kullan\u0131c\u0131n\u0131n performanslar\u0131na ili\u015fkin bir veri setimiz bulunmaktad\u0131r. Veri seti Amerika'da bulunan bir beyzbol liginin 1986 - 1987 sezonunundaki verileri ve bu ligde oynayan oyuncular\u0131n verilerini i\u00e7eren bir veri setidir.\n\n![beysbol.jpg](attachment:beysbol.jpg)\n\n**Do\u011frusal Regresyon Modelleri:**\n- **Basit Do\u011frusal Regresyon**\n- **Do\u011frusal Regresyon**\n- **Ridge Regresyon**\n- **Lasso Regresyon**\n- **ElasticNet Regresyon**\n\n**1. Ba\u011f\u0131ml\u0131 De\u011fi\u015fken:**\n- **Salary**: 1986-1987 sezonunda kazan\u0131lan maa\u015f\n\n**2. A\u00e7\u0131klay\u0131c\u0131 De\u011fi\u015fkenler:**\n\nHitters Veri setinde yer alan de\u011fi\u015fkenlerin a\u00e7\u0131klanmas\u0131\n\n- **AtBat**: 1986-1987 sezonunda bir beyzbol sopas\u0131 ile topa yap\u0131lan vuru\u015f say\u0131s\u0131\n- **Hits**: 1986-1987 sezonundaki isabet say\u0131s\u0131\n- **HmRun**: 1986-1987 sezonundaki en de\u011ferli vuru\u015f say\u0131s\u0131\n- **Runs**: 1986-1987 sezonunda tak\u0131m\u0131na ka\u00e7 say\u0131 kazand\u0131rd\u0131\n- **RBI**: Bir vurucunun vuru\u015f yapt\u0131g\u0131nda ka\u00e7 tane oyuncuya ko\u015fu yapt\u0131rd\u0131\u011f\u0131.\n- **Walks**: Kar\u015f\u0131 oyuncuya ka\u00e7 defa hata yapt\u0131rd\u0131\u011f\u0131\n- **Years**: Oyuncunun major liginde ka\u00e7 sene oynad\u0131\u011f\u0131\n- **CAtBat**: Oyuncunun kariyeri boyunca ka\u00e7 kez topa vurdu\u011fu\n- **CHits**: Oyuncunun kariyeri boyunca ka\u00e7 kez isabetli vuru\u015f yapt\u0131\u011f\u0131\n- **CHmRun**: Oyucunun kariyeri boyunca ka\u00e7 kez en de\u011ferli vuru\u015fu yapt\u0131\u011f\u0131\n- **CRuns**: Oyuncunun kariyeri boyunca tak\u0131m\u0131na ka\u00e7 tane say\u0131 kazand\u0131rd\u0131\u011f\u0131\n- **CRBI**: Oyuncunun kariyeri boyunca ka\u00e7 tane oyuncuya ko\u015fu yapt\u0131rd\u0131\u011f\u0131\n- **CWalks**: Oyuncun kariyeri boyunca kar\u015f\u0131 oyuncuya ka\u00e7 kez hata yapt\u0131rd\u0131\u011f\u0131\n- **League**: Oyuncunun sezon sonuna kadar oynad\u0131\u011f\u0131 ligi g\u00f6steren A ve N seviyelerine sahip bir fakt\u00f6r\n- **Division**: 1986 sonunda oyuncunun oynad\u0131\u011f\u0131 pozisyonu g\u00f6steren E ve W seviyelerine sahip bir fakt\u00f6r\n- **PutOuts**: Oyun icinde tak\u0131m arkada\u015f\u0131nla yard\u0131mla\u015fma\n- **Assits**: 1986-1987 sezonunda oyuncunun yapt\u0131\u011f\u0131 asist say\u0131s\u0131\n- **Errors**: 1986-1987 sezonundaki oyuncunun hata say\u0131s\u0131\n- **Salary**: Oyuncunun 1986-1987 sezonunda ald\u0131\u011f\u0131 maa\u015f(bin uzerinden)\n- **NewLeague**: 1987 sezonunun ba\u015f\u0131nda oyuncunun ligini g\u00f6steren A ve N seviyelerine sahip bir fakt\u00f6r\n\n**G\u00f6zlem Say\u0131s\u0131: 322**\n\n**De\u011fi\u015fken Say\u0131s\u0131: 20**\n\n**Yap\u0131lan i\u015flemler elde edilen sonu\u00e7lar a\u015fa\u011f\u0131da verilmi\u015ftir. En d\u00fc\u015f\u00fck hatay\u0131 Ridge Regresyon vermi\u015ftir.**\n\n![kar%C5%9F%C4%B1la%C5%9Ft%C4%B1rma.PNG](attachment:kar%C5%9F%C4%B1la%C5%9Ft%C4%B1rma.PNG)  \n![model%20gorsel.PNG](attachment:model%20gorsel.PNG)","88b368a2":"### 2.1) Model Kurulum","6213c525":"### 1.2) E\u011fitim Hatas\u0131","44dc8d0c":"### 3.7) Final Model Test Hatas\u0131","7a4fe4c3":"### 1.1) Model Kurulum","e73c3568":"### 3.5) Model Hiperparametre Optimizasyonu","88172d7c":"### 1) Yeni De\u011fi\u015fkenler Olu\u015fturma\n\nYeni de\u011fi\u015fkenler olu\u015fturmak modeller i\u00e7in \u00f6nem arz etmektedir. Ancak mant\u0131kl\u0131 bir yeni de\u011fi\u015fken olu\u015fturmak gerekir. Bu veri setinde oyuncunun kariyerine ba\u011fl\u0131 de\u011fi\u015fkenler yer almaktad\u0131r ve kariyer s\u00fcresi yer almaktad\u0131r. Bu durumda **kariyere ba\u011fl\u0131 de\u011fi\u015fkenler \/ kariyer s\u00fcresi** yap\u0131l\u0131rsa oyuncu i\u00e7in ortalama de\u011ferler elde edilerek mant\u0131kl\u0131 bir de\u011fi\u015fken olu\u015fturulabilir. A\u015fa\u011f\u0131da yap\u0131lan i\u015flemde bunu ele al\u0131yor olaca\u011f\u0131z.","51b38ddc":"## 3) Ridge Regresyon","17886b7d":"## 2) \u00c7oklu Do\u011frusal Regresyon","b94bde51":"### 4.7) Final Modeli Test Hatas\u0131"}}