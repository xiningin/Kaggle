{"cell_type":{"e117d58b":"code","02791f82":"code","89f0b985":"code","d5a2098f":"code","213be877":"code","ebaf0f79":"code","40fefecb":"code","bbc4a0cd":"code","936423d3":"code","8a40e418":"code","a9240554":"code","ef08322e":"code","585e925a":"code","d76c69d3":"code","84b3715c":"code","1ac7b1c1":"code","949fe523":"code","1d0aa1ef":"markdown","e2bed106":"markdown","f54e6f2b":"markdown","0cfdba04":"markdown","776d0402":"markdown","e962aea4":"markdown","6ff9449f":"markdown","228359da":"markdown","c63a6a45":"markdown"},"source":{"e117d58b":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.offline as py\nfrom plotly.graph_objs import Scatter, Layout\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n#set the backgroung style sheet\nsns.set_style(\"whitegrid\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","02791f82":"survey_df = pd.read_csv('..\/input\/kaggle-survey-2019\/survey_schema.csv')\nmultiChoice_df = pd.read_csv('..\/input\/\/kaggle-survey-2019\/multiple_choice_responses.csv')","89f0b985":"survey_df.head(2)","d5a2098f":"p = survey_df.iloc[0, 1:-1]\ntable = go.Table(\n    columnwidth=[0.4]+[5.8],\n    header=dict(\n        values=['Q.N.', 'Description'],\n        line = dict(color='#506784'),\n        fill = dict(color='lightblue'),\n    ),\n    cells=dict(\n        values=[p.index] + [p.values],\n        line = dict(color='#506784'),\n        fill = dict(color=['rgb(173, 216, 220)', '#f5f5fa'])\n    )\n)\npy.iplot([table], filename='table-of-mining-data')","213be877":"p = multiChoice_df.iloc[0, 1:-1]\ntable = go.Table(\n    columnwidth=[1.4]+[5.8],\n    header=dict(\n        values=['Q.N.', 'Description'],\n        line = dict(color='#506784'),\n        fill = dict(color='lightblue'),\n    ),\n    cells=dict(\n        values=[p.index] + [p.values],\n        line = dict(color='#506784'),\n        fill = dict(color=['rgb(173, 216, 220)', '#f5f5fa'])\n    )\n)\npy.iplot([table], filename='table-of-mining-data')","ebaf0f79":"ss = pd.DataFrame(survey_df.loc[1])\nss = ss.drop(['2019 Kaggle Machine Learning and Data Science Survey','Time from Start to Finish (seconds)'],axis=0)\nss[1] = pd.to_numeric(ss[1])\nss = ss.rename(columns={1:'Number of Responders'})\nss.plot(kind='bar',figsize = (15,6))","40fefecb":"ss = ss.sort_values('Number of Responders')\nprint(\"Questions Which get Least Responce: \")\nprint(ss.head(3))\n\nprint(\"\\nMost Answered Questions: \")\nprint(ss.tail(3))","bbc4a0cd":"gd = multiChoice_df['Q2'][1:].value_counts()\n\ndata = [\ngo.Bar(\n    x = list(gd.index),\n    y = list(gd.values),\n    marker=dict(color=['rgba(55, 128, 191, 1.0)', 'rgba(219, 64, 82, 0.7)',\n               'rgba(50, 171, 96, 0.7)', 'rgb(128,0,128)'])\n),]\nlayout= go.Layout(\n    title= 'Gender Distribution',\n    yaxis=dict(title='Count', ticklen=5, gridwidth=2),\n    xaxis=dict(title='Gender', ticklen=5, gridwidth=2)\n)\nfig= go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='Q2')","936423d3":"age_df = multiChoice_df['Q1'][1:].dropna()\norder= ['18-21', '22-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-69', '70+']\nplt.figure(figsize=(12,5))\nsns.countplot(age_df,order=order)\nplt.xlabel('Age Group')\nplt.ylabel('Count')\nplt.title('Age Group Distribution')\nplt.show()","8a40e418":"lan = []\nfor i in range(1,13):\n    lan.extend(multiChoice_df['Q18_Part_'+str(i)][1:])\n\nf,ax=plt.subplots(1,2,figsize=(20,8))\npd.Series(lan).value_counts().plot.pie(autopct='%1.1f%%',ax=ax[0])\nax[0].set_title('Distribution of Programming Language (Pie Chart)')\nax[0].set_ylabel('')\nsns.countplot(pd.Series(lan).values,ax=ax[1])\nax[1].set_title('Distribution of Programming Language (Bar Plot)')\nplt.xticks(rotation=35)\nplt.show()\n","a9240554":"country_df = multiChoice_df['Q3'][1:].value_counts()\n\ndata = [dict(\n        type='choropleth',\n        locations = list(country_df.index),\n        locationmode='country names',\n        z=(country_df.values),\n        text=list(country_df.index),\n        colorscale='Portland',\n        reversescale=True,\n)]\nlayout = dict(\n    title = 'A Map About Population of Data Scientists in Each Country',\n    geo = dict(showframe=False, showcoastlines=True, projection=dict(type='Mercator'))\n)\nfig = dict(data=data, layout=layout)\npy.iplot(fig, validate=False, filename='world-map')","ef08322e":"countries_map = {\"Africa\": [\"Algeria\", \"Angola\", \"Benin\", \"Botswana\", \"Burkina\", \"Burundi\", \"Cameroon\", \"Cape Verde\", \"Central African Republic\", \"Chad\", \"Comoros\", \"Congo\", \"Congo, Democratic Republic of\", \"Djibouti\", \"Egypt\", \"Equatorial Guinea\", \"Eritrea\", \"Ethiopia\", \"Gabon\", \"Gambia\", \"Ghana\", \"Guinea\", \"Guinea-Bissau\", \"Ivory Coast\", \"Kenya\", \"Lesotho\", \"Liberia\", \"Libya\", \"Madagascar\", \"Malawi\", \"Mali\", \"Mauritania\", \"Mauritius\", \"Morocco\", \"Mozambique\", \"Namibia\", \"Niger\", \"Nigeria\", \"Rwanda\", \"Sao Tome and Principe\", \"Senegal\", \"Seychelles\", \"Sierra Leone\", \"Somalia\", \"South Africa\", \"South Sudan\", \"Sudan\", \"Swaziland\", \"Tanzania\", \"Togo\", \"Tunisia\", \"Uganda\", \"Zambia\", \"Zimbabwe\"], \"Asia\": [\"Afghanistan\", \"Bahrain\", \"Bangladesh\", \"Bhutan\", \"Brunei\", \"Burma (Myanmar)\", \"Cambodia\", \"China\", \"East Timor\", \"India\", \"Indonesia\", \"Iran\", \"Iraq\", \"Israel\", \"Japan\", \"Jordan\", \"Kazakhstan\", \"Korea, North\", \"Korea, South\", \"Kuwait\", \"Kyrgyzstan\", \"Laos\", \"Lebanon\", \"Malaysia\", \"Maldives\", \"Mongolia\", \"Nepal\", \"Oman\", \"Pakistan\", \"Philippines\", \"Qatar\", \"Russian Federation\", \"Saudi Arabia\", \"Singapore\", \"Sri Lanka\", \"Syria\", \"Tajikistan\", \"Thailand\", \"Turkey\", \"Turkmenistan\", \"United Arab Emirates\", \"Uzbekistan\", \"Vietnam\", \"Yemen\", \"\"], \"Europe\": [\"Albania\", \"Andorra\", \"Armenia\", \"Austria\", \"Azerbaijan\", \"Belarus\", \"Belgium\", \"Bosnia and Herzegovina\", \"Bulgaria\", \"Croatia\", \"Cyprus\", \"Czech Republic\", \"Denmark\", \"Estonia\", \"Finland\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Hungary\", \"Iceland\", \"Ireland\", \"Italy\", \"Latvia\", \"Liechtenstein\", \"Lithuania\", \"Luxembourg\", \"Macedonia\", \"Malta\", \"Moldova\", \"Monaco\", \"Montenegro\", \"Netherlands\", \"Norway\", \"Poland\", \"Portugal\", \"Romania\", \"San Marino\", \"Serbia\", \"Slovakia\", \"Slovenia\", \"Spain\", \"Sweden\", \"Switzerland\", \"Ukraine\", \"United Kingdom\", \"Vatican City\"], \"North America\": [\"Antigua and Barbuda\", \"Bahamas\", \"Barbados\", \"Belize\", \"Canada\", \"Costa Rica\", \"Cuba\", \"Dominica\", \"Dominican Republic\", \"El Salvador\", \"Grenada\", \"Guatemala\", \"Haiti\", \"Honduras\", \"Jamaica\", \"Mexico\", \"Nicaragua\", \"Panama\", \"Saint Kitts and Nevis\", \"Saint Lucia\", \"Saint Vincent and the Grenadines\", \"Trinidad and Tobago\", \"United States\"], \"Oceania\": [\"Australia\", \"Fiji\", \"Kiribati\", \"Marshall Islands\", \"Micronesia\", \"Nauru\", \"New Zealand\", \"Palau\", \"Papua New Guinea\", \"Samoa\", \"Solomon Islands\", \"Tonga\", \"Tuvalu\", \"Vanuatu\"], \"South America\": [\"Argentina\", \"Bolivia\", \"Brazil\", \"Chile\", \"Colombia\", \"Ecuador\", \"Guyana\", \"Paraguay\", \"Peru\", \"Suriname\", \"Uruguay\", \"Venezuela\"]}\n\ncountries_map['North America'].extend(['United States of America'])\ncountries_map['Asia'].extend(['Russia'])\ncountries_map['Asia'].extend(['South Korea'])","585e925a":"def parse(data):\n    for i in countries_map.keys():\n        if data in countries_map[i]:\n            return i\n    return \"other\"\nmultiChoice_df['Continent'] = multiChoice_df['Q3'].apply(parse)","d76c69d3":"multiChoice_df['Continent'].value_counts()","84b3715c":"trace = go.Pie(labels = multiChoice_df['Continent'].value_counts().index, \n               values = multiChoice_df['Continent'].value_counts().values, opacity = 0.8,\n               textfont=dict(size=15))\nlayout = dict(title =  'Data Scientists Vs Continents')\nfig = dict(data = [trace], layout=layout)\npy.iplot(fig)","1ac7b1c1":"DP_df = multiChoice_df[['Q2','Continent']][1:].dropna()\nDP_df = DP_df.groupby(['Continent'])['Q2'].value_counts()\n\ntrace1 = go.Bar(\n    x=sorted(multiChoice_df.Continent.unique()),\n    y=DP_df.loc[:,'Male'].values,\n    name='Male',\n    marker = dict(color=\"rgb(113, 50, 141)\")\n)\ntrace2 = go.Bar(\n    x=sorted(multiChoice_df.Continent.unique()),\n    y=DP_df.loc[:,'Female'].values,\n    name='Female',\n    marker = dict(color=\"rgb(119, 74, 175)\")\n)\n\n\ntrace3 = go.Bar(\n    x=sorted(multiChoice_df.Continent.unique()),\n    y=DP_df.loc[:,'Prefer not to say'].values,\n    name='Prefer not to say',\n    marker = dict(color=\"rgb(120, 100, 202)\")\n)\n\ntrace4 = go.Bar(\n    x=sorted(multiChoice_df.Continent.unique()),\n    y=DP_df.loc[:,'Prefer to self-describe'].values,\n    name='Prefer to self-describe',\n    marker = dict(color=\"rgb(117, 127, 221)\")\n)\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(\n    barmode='group',\n    title =  'Gender By Continent'\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='grouped-bar')","949fe523":"DP_df = multiChoice_df[['Q1','Q2']][1:].dropna()\nDP_df = DP_df.groupby(['Q1'])['Q2'].value_counts()\n\ntrace1 = go.Bar(\n    x=sorted(multiChoice_df.Q1.unique()),\n    y=DP_df.loc[:,'Male'].values,\n    name='Male',\n    marker = dict(color=\"rgb(113, 50, 141)\")\n)\ntrace2 = go.Bar(\n    x=sorted(multiChoice_df.Q1.unique()),\n    y=DP_df.loc[:,'Female'].values,\n    name='Female',\n    marker = dict(color=\"rgb(119, 74, 175)\")\n)\n\n\ntrace3 = go.Bar(\n    x=sorted(multiChoice_df.Q1.unique()),\n    y=DP_df.loc[:,'Prefer not to say'].values,\n    name='Prefer not to say',\n    marker = dict(color=\"rgb(120, 100, 202)\")\n)\n\ntrace4 = go.Bar(\n    x=sorted(multiChoice_df.Q1.unique()),\n    y=DP_df.loc[:,'Prefer to self-describe'].values,\n    name='Prefer to self-describe',\n    marker = dict(color=\"rgb(117, 127, 221)\")\n)\n\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    barmode='group',\n    title =  'Gender By Age'\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='grouped-bar')","1d0aa1ef":"**To Be Continued.....**","e2bed106":"#### Question With Most and Least Number of Responces","f54e6f2b":"#### Questions Detail","0cfdba04":"#### Multiple Choise Questions","776d0402":"#### Age Distribution","e962aea4":"#### Distribution of Programming Languages","6ff9449f":"<div style=\"background: linear-gradient(to bottom, #200122, #6f0000); border: 2px; box-radius: 20px\"><h1 style=\"color: white; text-align: center\"><br> <center>DS & ML Survey 2019<center><br><\/h1><\/div>","228359da":"#### Gender Distribution","c63a6a45":"#### Country Heatmap"}}