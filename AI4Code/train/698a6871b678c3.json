{"cell_type":{"7b75244c":"code","e5ba731c":"code","df78029a":"code","4b321070":"code","b5a214a7":"code","10877d87":"code","da8edd6f":"code","9a90f79d":"code","800cc557":"code","543bf768":"code","824a2ddf":"code","2c7fd455":"code","1f484dba":"code","bf08572c":"markdown","567dd901":"markdown","600ae76b":"markdown","98af8fb4":"markdown","1e47d469":"markdown","27f8a228":"markdown","d985397c":"markdown","4d7e2429":"markdown","ce17b026":"markdown"},"source":{"7b75244c":"import pandas as pd\nimport numpy as np\nimport seaborn as sb\nfrom sklearn import preprocessing\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score","e5ba731c":"df = pd.read_csv('..\/input\/laptop-price-predictor\/laptop_pricing.csv', encoding = 'unicode_escape')\ndf","df78029a":"# checking for null values\ndf.isnull().any()","4b321070":"df.columns","b5a214a7":"label_encoder = preprocessing.LabelEncoder()\ndf['\u00ef\u00bb\u00bfManufacturer'] = df['\u00ef\u00bb\u00bfManufacturer'].astype('|S')\ndf['\u00ef\u00bb\u00bfManufacturer'] = label_encoder.fit_transform(df['\u00ef\u00bb\u00bfManufacturer'])","10877d87":"# checking vif\nvariables = df[['\u00ef\u00bb\u00bfManufacturer', 'IntelCore(i-)', 'IntelCoreGen',\n       'processing speed(GHz)', 'Ram(gb)', 'HDD(gb)', 'SSD(gb)',\n       'Graphics(gb)', 'ScreenSize(inch)']]\nvif = pd.DataFrame()\nvif['VIF'] = [variance_inflation_factor(variables.values, i) for i in range(variables.shape[1])]\nvif['Features'] = variables.columns\n\nvif","da8edd6f":"# now, we'll drop columns which have vif>10\ndf = df.drop(['IntelCore(i-)','IntelCoreGen','processing speed(GHz)','HDD(gb)','ScreenSize(inch)'], axis=1)\ndf","9a90f79d":"sb.pairplot(df)","800cc557":"# using Pearson's correlation method\ncorr = df.corr(method='pearson')\nsb.heatmap(corr, annot=True)","543bf768":"data = df.values\nX,y = data[:,:-1], data[:,-1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)  # splitting in the ration 80:20","824a2ddf":"regr = RandomForestRegressor(random_state=0)\nregr.fit(X, y)","2c7fd455":"y_pred = regr.predict(X_test)","1f484dba":"r2_score(y_test, y_pred)","bf08572c":"### Data Preprocessing","567dd901":"# Predictions are 98.79% accurate.","600ae76b":"### Model","98af8fb4":"### Splitting Data for Training and Testing","1e47d469":"# LAPTOP PRICE PREDICTION","27f8a228":"### Getting our Data","d985397c":"### Data Visualization","4d7e2429":"### Making Predictions and Checking Accuracy","ce17b026":"### Importing Libraries"}}