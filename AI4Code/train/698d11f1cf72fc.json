{"cell_type":{"839b887e":"code","a706584a":"code","4012d9b6":"code","e64e41a2":"code","f1687649":"code","47d638b3":"code","e473c618":"code","96f2a89a":"code","c0c0d47a":"code","43d67ce5":"code","4b50fa1f":"code","df6ad07c":"code","c2dc17e4":"code","67f13615":"code","808128bc":"code","2107e582":"code","6cc06aa3":"code","2b9c8eb6":"code","7a6837f6":"code","dd3ce672":"code","8a8dbfd4":"code","6833db88":"code","b95295d8":"code","c9aafa85":"code","3eaa2d86":"code","bae2bcd8":"code","9e6704a0":"code","fe95bcbd":"code","e3cde338":"code","c9af6711":"code","a0f594f6":"code","e26adcf0":"code","8dd5f8ac":"code","eb1918ac":"markdown","c7e83a7c":"markdown","d5bd340e":"markdown","b19ab9b0":"markdown","efa72a89":"markdown","653ad71c":"markdown","4c21b10f":"markdown","74773053":"markdown","f716a166":"markdown"},"source":{"839b887e":"## Import required pacakges\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt","a706584a":"train_set = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_set= pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","4012d9b6":"train_set","e64e41a2":"train_set.shape","f1687649":"test_set.shape","47d638b3":"train_set.info()","e473c618":"train_set.describe()","96f2a89a":"import matplotlib.pyplot as plt\ntrain_set.hist(bins=50, figsize=(20, 15))\nplt.show()","c0c0d47a":"corr_matrix = train_set.corr()\ncorr_matrix['SalePrice'].sort_values(ascending=False)","43d67ce5":"from pandas.plotting import scatter_matrix\nattributes = [\"SalePrice\", \"OverallQual\", \"GrLivArea\", \"GarageCars\",\"GarageArea\"]\nscatter_matrix(train_set[attributes], figsize = (12,8))","4b50fa1f":"train_set.plot(kind=\"scatter\", x=\"OverallQual\", y=\"SalePrice\", alpha=0.8)","df6ad07c":"categorical_features = train_set.select_dtypes(include=[np.object])\ncategorical_features.columns","c2dc17e4":"import missingno as msno\nmsno.matrix(train_set.sample(300))","67f13615":"msno.heatmap(train_set)","808128bc":"msno.bar(train_set.sample(1000))","2107e582":"msno.dendrogram(train_set)","6cc06aa3":"\ntrain_set.skew(), train_set.kurt()","2b9c8eb6":"\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib as mpl\nimport scipy.stats as st\ny = train_set['SalePrice']\nplt.figure(1); plt.title('Johnson SU')\nsns.distplot(y, kde=False, fit=st.johnsonsu)","7a6837f6":"plt.figure(2); plt.title('Normal')\nsns.distplot(y, kde=False, fit=st.norm)","dd3ce672":"plt.figure(3); plt.title('Log Normal')\nsns.distplot(y, kde=False, fit=st.lognorm)","8a8dbfd4":"sns.distplot(train_set.skew(),color='blue',axlabel ='Skewness')","6833db88":"plt.figure(figsize = (12,8))\nsns.distplot(train_set.kurt(),color='r',axlabel ='Kurtosis',norm_hist= False, kde = True,rug = False)","b95295d8":"plt.hist(train_set.kurt(),orientation = 'vertical',histtype = 'bar',label ='Kurtosis', color ='green')\nplt.show()","c9aafa85":"target = np.log(train_set['SalePrice'])\ntarget.skew()\nplt.hist(target,color='brown')","3eaa2d86":"numeric_features = train_set.select_dtypes(include=[np.int64, np.float64])","bae2bcd8":"correlation = numeric_features.corr()\nprint(correlation['SalePrice'].sort_values(ascending = False),'\\n')","9e6704a0":"k= 11\ncols = correlation.nlargest(k,'SalePrice')['SalePrice'].index\nprint(cols)\ncm = np.corrcoef(train_set[cols].values.T)\nf , ax = plt.subplots(figsize = (14,12))\nsns.heatmap(cm, vmax=.8, linewidths=0.01,square=True,annot=True,cmap='viridis',\n            linecolor=\"white\",xticklabels = cols.values ,annot_kws = {'size':12},yticklabels = cols.values)","fe95bcbd":"sns.set()\ncolumns = ['SalePrice','OverallQual','TotalBsmtSF','GrLivArea','GarageArea','FullBath','YearBuilt','YearRemodAdd']\nsns.pairplot(train_set[columns],size = 2 ,kind ='scatter',diag_kind='kde')\nplt.show()","e3cde338":"fig, ((ax1, ax2), (ax3, ax4),(ax5,ax6)) = plt.subplots(nrows=3, ncols=2, figsize=(14,10))\nOverallQual_scatter_plot = pd.concat([train_set['SalePrice'],train_set['OverallQual']],axis = 1)\nsns.regplot(x='OverallQual',y = 'SalePrice',data = OverallQual_scatter_plot,scatter= True, fit_reg=True, ax=ax1)\nTotalBsmtSF_scatter_plot = pd.concat([train_set['SalePrice'],train_set['TotalBsmtSF']],axis = 1)\nsns.regplot(x='TotalBsmtSF',y = 'SalePrice',data = TotalBsmtSF_scatter_plot,scatter= True, fit_reg=True, ax=ax2)\nGrLivArea_scatter_plot = pd.concat([train_set['SalePrice'],train_set['GrLivArea']],axis = 1)\nsns.regplot(x='GrLivArea',y = 'SalePrice',data = GrLivArea_scatter_plot,scatter= True, fit_reg=True, ax=ax3)\nGarageArea_scatter_plot = pd.concat([train_set['SalePrice'],train_set['GarageArea']],axis = 1)\nsns.regplot(x='GarageArea',y = 'SalePrice',data = GarageArea_scatter_plot,scatter= True, fit_reg=True, ax=ax4)\nFullBath_scatter_plot = pd.concat([train_set['SalePrice'],train_set['FullBath']],axis = 1)\nsns.regplot(x='FullBath',y = 'SalePrice',data = FullBath_scatter_plot,scatter= True, fit_reg=True, ax=ax5)\nYearBuilt_scatter_plot = pd.concat([train_set['SalePrice'],train_set['YearBuilt']],axis = 1)\nsns.regplot(x='YearBuilt',y = 'SalePrice',data = YearBuilt_scatter_plot,scatter= True, fit_reg=True, ax=ax6)\nYearRemodAdd_scatter_plot = pd.concat([train_set['SalePrice'],train_set['YearRemodAdd']],axis = 1)\nYearRemodAdd_scatter_plot.plot.scatter('YearRemodAdd','SalePrice')","c9af6711":"saleprice_overall_quality= train_set.pivot_table(index ='OverallQual',values = 'SalePrice', aggfunc = np.median)\nsaleprice_overall_quality.plot(kind = 'bar',color = 'blue')\nplt.xlabel('Overall Quality')\nplt.ylabel('Median Sale Price')\nplt.show()","a0f594f6":"for c in categorical_features:\n    train_set[c] = train_set[c].astype('category')\n    if train_set[c].isnull().any():\n        train_set[c] = train_set[c].cat.add_categories(['MISSING'])\n        train_set[c] = train_set[c].fillna('MISSING')\n\ndef boxplot(x, y, **kwargs):\n    sns.boxplot(x=x, y=y)\n    x=plt.xticks(rotation=90)\nf = pd.melt(train_set, id_vars=['SalePrice'], value_vars=categorical_features)\ng = sns.FacetGrid(f, col=\"variable\",  col_wrap=2, sharex=False, sharey=False, height=5)\ng = g.map(boxplot, \"value\", \"SalePrice\")","e26adcf0":"var = 'SaleType'\ndata = pd.concat([train_set['SalePrice'], train_set[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 10))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nxt = plt.xticks(rotation=45)","8dd5f8ac":"sns.violinplot('Functional', 'SalePrice', data = train_set)","eb1918ac":"\n\nIt hasbeen observed that SalePrice doesn't follow normal distribution, while performing regression it has to be transformed.log transformation does pretty good job, best fit is unbounded Johnson distribution.\n","c7e83a7c":"# Examine categorical features in the train dataset","d5bd340e":"\nHousing Price vs Sales\n\n*     Sale Type & Condition\n*     Sales Seasonality\n\n","b19ab9b0":"\nHeatmap\n\nThe missingno correlation heatmap measures nullity correlation: how strongly the presence or absence of one variable affects the presence of another variable:\n","efa72a89":"# Visualising missing values for a sample of 300","653ad71c":"\nDendrogram\n\nThe dendrogram allows you to more fully correlate variable completion, revealing trends deeper than the pairwise ones visible in the correlation heatmap:\n","4c21b10f":"# To check Correlation****","74773053":"Identification of  Correlation coefficients between numeric features and  target featue i.e \"SalePrice\"","f716a166":"Estimate Skewness and Kurtosis"}}