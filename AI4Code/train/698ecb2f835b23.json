{"cell_type":{"7b8230bc":"code","e876084b":"code","cd8cb8d0":"code","c3e7ee19":"code","f406a45d":"code","5837e635":"code","9ddb8e32":"code","3cfbec6a":"code","08b2d465":"code","7f3ac540":"code","0c5772f8":"code","4b0e23eb":"code","329de79b":"code","5ad226bb":"code","0b91c474":"code","1f599f26":"code","eb4bed34":"code","fa6df822":"code","64b5f98d":"code","333a2742":"code","85353f19":"code","c6c118f6":"code","563c469a":"code","d073657d":"code","c4f8236e":"code","6a8b2ab5":"code","f80a8423":"code","693487d7":"code","06b4b0da":"code","026c11b6":"code","78e65fff":"code","98511f61":"code","7549dfc1":"code","2c6e2caa":"code","d2e868e8":"code","766445e7":"code","57f113eb":"code","5dd9825f":"code","32ee8a82":"code","41703e98":"code","6a8f0021":"code","f3076d67":"code","839c8e7c":"code","5439a384":"code","6a23493c":"code","fbd087f4":"code","aeb6da22":"code","378442ac":"code","d2b873f4":"code","bead8485":"code","0d9c0131":"code","bfd91b7e":"code","cb48b36b":"code","e7e81bf3":"code","3d388fe1":"code","43bc3488":"code","a453302d":"code","61ce868c":"code","d998bbfe":"code","d0912899":"code","df4de1de":"code","19a7c762":"code","ed2cd191":"code","141ba2fe":"code","b2f80d76":"markdown","090993bb":"markdown","2285004f":"markdown","82d9dd0e":"markdown","ccc8efe3":"markdown","2fefdb95":"markdown","e8262631":"markdown","38793f31":"markdown","e2b79533":"markdown","630cb693":"markdown"},"source":{"7b8230bc":"#\ud328\ud0a4\uc9c0 \ubc0f \ub77c\uc774\ube0c\ub7ec\ub9ac \ud638\ucd9c\nimport pandas as pd\nimport numpy as np\nimport gc\nimport time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os, sys \n\n#\uadf8\ub798\ud504\ub97c \ub3d9\uc77c\ud55c \ucc3d \ub0b4\uc5d0 \uc0dd\uc131\ub418\ub3c4\ub85d \uc124\uc815\n%matplotlib inline\n\n#\ucd5c\ub300 \ud589 \ubc0f \uc5f4 \uc0ac\uc774\uc988 \uc124\uc815\npd.set_option('display.max_rows', 300)\npd.set_option('display.max_columns', 200)\n\n# \uacbd\uace0(Warning) \ubb34\uc2dc\ud558\ub3c4\ub85d \uc124\uc815\nimport warnings\nwarnings.filterwarnings('ignore')","e876084b":"#\uc791\uc5c5 \ub514\ub809\ud1a0\ub9ac \uc124\uc815\ndefault_dir = \"..\/input\/home-credit-default-risk\/\"","cd8cb8d0":"# \uba54\ubaa8\ub9ac \uc624\ubc84 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc5ec \uc138\uc158\uc774 \uc885\ub8cc\ub418\ub294 \uacbd\uc6b0\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud55c \uc791\uc5c5\n# \uba54\ubaa8\ub9ac \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud558\uc5ec \uc0ac\uc6a9\ud560 \ub370\uc774\ud130 \ud544\ub4dc\ub97c float64\uac00 \uc544\ub2cc float32 \uc790\ub8cc\ud615\uc73c\ub85c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc9c0\uc815\n\nprev_dtype = {\n    'SK_ID_PREV':np.uint32, 'SK_ID_CURR':np.uint32, 'HOUR_APPR_PROCESS_START':np.int32, 'NFLAG_LAST_APPL_IN_DAY':np.int32,\n    'DAYS_DECISION':np.int32, 'SELLERPLACE_AREA':np.int32, 'AMT_ANNUITY':np.float32, 'AMT_APPLICATION':np.float32,\n    'AMT_CREDIT':np.float32, 'AMT_DOWN_PAYMENT':np.float32, 'AMT_GOODS_PRICE':np.float32, 'RATE_DOWN_PAYMENT':np.float32,\n    'RATE_INTEREST_PRIMARY':np.float32, 'RATE_INTEREST_PRIVILEGED':np.float32, 'CNT_PAYMENT':np.float32,\n    'DAYS_FIRST_DRAWING':np.float32, 'DAYS_FIRST_DUE':np.float32, 'DAYS_LAST_DUE_1ST_VERSION':np.float32,\n    'DAYS_LAST_DUE':np.float32, 'DAYS_TERMINATION':np.float32, 'NFLAG_INSURED_ON_APPROVAL':np.float32\n}\n\nbureau_dtype = {\n    'SK_ID_CURR':np.uint32, 'SK_ID_BUREAU':np.uint32, 'DAYS_CREDIT':np.int32,'CREDIT_DAY_OVERDUE':np.int32,\n    'CNT_CREDIT_PROLONG':np.int32, 'DAYS_CREDIT_UPDATE':np.int32, 'DAYS_CREDIT_ENDDATE':np.float32,\n    'DAYS_ENDDATE_FACT':np.float32, 'AMT_CREDIT_MAX_OVERDUE':np.float32, 'AMT_CREDIT_SUM':np.float32,\n    'AMT_CREDIT_SUM_DEBT':np.float32, 'AMT_CREDIT_SUM_LIMIT':np.float32, 'AMT_CREDIT_SUM_OVERDUE':np.float32,\n    'AMT_ANNUITY':np.float32\n}\n\nbureau_bal_dtype = {\n    'SK_ID_BUREAU':np.int32, 'MONTHS_BALANCE':np.int32,\n}","c3e7ee19":"#\uc0ac\uc6a9\ud560 csv\ud30c\uc77c \ubd88\ub7ec\uc624\uae30\napp_train = pd.read_csv(os.path.join(default_dir, 'application_train.csv'))\napp_test = pd.read_csv(os.path.join(default_dir, 'application_test.csv'))\napps = pd.concat([app_train, app_test]) #train \ud30c\uc77c\uacfc test\ud30c\uc77c\uc744 \uacb0\ud569\n\n#\uacfc\uac70 \ub300\ucd9c \uae30\ub85d\nprev_app = pd.read_csv(os.path.join(default_dir, 'previous_application.csv'), dtype=prev_dtype)\n\n#\uacfc\uac70 \ud0c0\uae08\uc735\uae30\uad00\uacfc \uc2e0\uc6a9\uac70\ub798 \ub0b4\uc5ed\nbureau = pd.read_csv(os.path.join(default_dir, 'bureau.csv'), dtype=bureau_dtype)\nbureau_bal = pd.read_csv(os.path.join(default_dir, 'bureau_balance.csv'), dtype=bureau_bal_dtype)","f406a45d":"# TARGET 1 \uc77c\ub54c \uac12\uc744 \ud655\uc778\n# TARGET 0 \uc77c\ub54c \uac12\uc744 \ud655\uc778\n\ndef show_hist_by_target(df, columns):\n    cond_1 = (df['TARGET'] == 1)\n    cond_0 = (df['TARGET'] == 0)\n    \n    for column in columns:\n        fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(12, 4), squeeze=False)\n        sns.violinplot(x='TARGET', y=column, data=df, ax=axs[0][0] )\n        sns.distplot(df[cond_0][column], ax=axs[0][1], label='0', color='blue')\n        sns.distplot(df[cond_1][column], ax=axs[0][1], label='1', color='red')   ","5837e635":"# category type \uc744 \uc704\ud55c \uc2dc\uac01\ud654 \ud568\uc218\ndef show_category_by_target(df, columns):\n    for column in columns:\n        chart = sns.catplot(x=column, col=\"TARGET\", data=df, kind=\"count\")\n        chart.set_xticklabels(rotation=65)","9ddb8e32":"# Null \uac12 \ud655\uc778 \uac00\ub2a5\ud55c \uc0ac\uc6a9\uc790 \ud568\uc218 (\ub370\uc774\ud130\uc5d0\uc11c \ube44\uc728)\ndef nulldata(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    ms=pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    ms= ms[ms[\"Percent\"] > 0]\n    f,ax =plt.subplots(figsize=(15,10))\n    plt.xticks(rotation='90')\n    fig=sns.barplot(ms.index, ms[\"Percent\"],color=\"green\",alpha=0.8)\n    plt.xlabel('Features', fontsize=15)\n    plt.ylabel('Percent of null values', fontsize=15)\n    plt.title('Percent null data by feature', fontsize=15)\n    return ms","3cfbec6a":"# Numerical Features(\uc22b\uc790\ud615 \ud53c\ucc98) \uacfc Categorical Features(\ubc94\uc8fc\/object \ud53c\ucc98) \uad6c\ubd84 \ud568\uc218\ndef type_features(data):\n    categorical_features = data.select_dtypes(include = [\"object\"]).columns\n    numerical_features = data.select_dtypes(exclude = [\"object\"]).columns\n    print( \"categorical_features :\",categorical_features)\n    print('-----'*40)\n    print(\"numerical_features:\",numerical_features)","08b2d465":"# \uc2dc\uac01\ud654 \ud568\uc218\ndef plot_re(df,t1='',t2=''):\n    f,ax=plt.subplots(1,2,figsize=(12,8))\n    df[[t1,t2]].groupby([t1]).count().plot.bar(ax=ax[0],color='Blue')\n    ax[0].set_title('count of customer on '+t1)\n    sns.countplot(t1,hue=t2,data=df,ax=ax[1],palette=\"spring\")\n    ax[1].set_title(t1+': Target 0 vs Target 1')\n    # Rotate x-labels\n    plt.xticks(rotation=-90)\n    a=plt.show()\n    return a","7f3ac540":"#\uc804\uccb4\ub370\uc774\ud130\uc5d0\uc11c target \ub0b4 \uac12\uc758 \ube44\uc728\uc744 \ud655\uc778 - 0\uacfc 1\uc758 \ube44\uc728\ucc28\uc774\uac00 \ub9ce\uc774\ub0a8 : \ubd88\uaddc\uce59 \ub370\uc774\ud130\napp_train['TARGET'].value_counts()\/app_train.shape[0]","0c5772f8":"app_train['TARGET'].astype(int).plot.hist()","4b0e23eb":"#Target \uac12\uc5d0 \ub530\ub978 \uc18c\ub4dd \uac12 \ubd84\ud3ec \ud655\uc778\ud558\napp_train['AMT_INCOME_TOTAL'].hist() # (1) \uc18c\ub4dd \uc2dc\uac01\ud654","329de79b":"plt.style.use('fivethirtyeight')\n\n# \uace0\uac1d \ub098\uc774\uc5d0 \ub300\ud55c \ud788\uc2a4\ud1a0\uadf8\ub7a8 \ubd84\ud3ec \ud655\uc778\nplt.hist(app_train['DAYS_BIRTH']\/365, edgecolor='k',bins=25)\nplt.title('Age of Client');\nplt.xlabel('Age (years)');\nplt.ylabel('Count');","5ad226bb":"plt.figure(figsize=(10,8))\n\n# \uc81c\ub54c \ub300\ucd9c\uc744 \uc0c1\ud658\ud558\ub294 \uace0\uac1d\uc758 \ub098\uc774 plot (TARGET=0) - \ud30c\ub780\uc0c9\n# \ub098\uc774\uac00 \uc788\uc744\uc218\ub85c \ub300\ucd9c \uc0c1\ud658\uc744 \uc81c\ub300\ub85c \ud560 \ud655\ub960\uc774 \ub192\ub2e4\uace0 \ud310\ub2e8\nsns.kdeplot(app_train.loc[app_train['TARGET']==0,'DAYS_BIRTH']\/365,label='target==0')\n\n# \uc81c\ub54c \ub300\ucd9c\uc744 \uc0c1\ud658\ud558\uc9c0\ubabb\ud558\ub294 \uace0\uac1d\uc758 \ub098\uc774 plot (TARGET=1) - \ube68\uac04\uc0c9\n# \uc80a\uc744\uc218\ub85d \ub300\ucd9c \uc0c1\ud658\uc744 \ud558\uc9c0 \ubabb\ud560 \ud655\ub960\uc774 \ub192\ub2e4\uace0 \ud310\ub2e8\nsns.kdeplot(app_train.loc[app_train['TARGET']==1,'DAYS_BIRTH']\/365,label='target==1')\n\nplt.xlabel('Age(years)');\nplt.ylabel('Density');\nplt.title('Distribution of Ages');","0b91c474":"# TARGET \ubcc0\uc218\uc640 EXT_SOURCE\uc640\uc758 \uc0c1\uad00\uad00\uacc4\uc640 EXT_SOURCE \uc11c\ub85c\uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uc0b4\ud54c\n\next_data=app_train[['TARGET','EXT_SOURCE_1','EXT_SOURCE_2','EXT_SOURCE_3','DAYS_BIRTH']]\next_data_corrs=ext_data.corr()\n\nplt.figure(figsize=(8,6))\n\nsns.heatmap(ext_data_corrs, cmap=plt.cm.RdYlBu_r, vmin=-0.25, annot=True, vmax=0.6)\nplt.title('Correlation Heatmap');\n\n#EXT_SOURCE_1\uc640 TARGET\uac12 \uac04 \uc591\uc758 \uc0c1\uad00\uc131\uc774 \ub192\uc74c","1f599f26":"plt.figure(figsize=(10,12))\n\n# iterate through the sources\nfor i, source in enumerate(['EXT_SOURCE_1','EXT_SOURCE_2','EXT_SOURCE_3']):\n    plt.subplot(3,1,i+1)\n    \n    sns.kdeplot(app_train.loc[app_train['TARGET']==0,source],label='target==0')\n    sns.kdeplot(app_train.loc[app_train['TARGET']==1,source],label='target==1')\n    \n    plt.title('Distribution of %s by Target Value' % source)\n    plt.xlabel('%s' %source);\n    plt.ylabel('Density');\nplt.tight_layout(h_pad=2.5)","eb4bed34":"# \ub300\ucd9c \ud69f\uc218 \ub300\ube44 \uc5f0\uccb4 \ube44\uc728\uc774 \ub0a8\uc131\uc774 \uc5ec\uc131\ubcf4\ub2e4 \ub192\uc74c\n\ncond_1 = (app_train['TARGET'] == 1)\ncond_0 = (app_train['TARGET'] == 0)\n\nprint(app_train['CODE_GENDER'].value_counts()\/app_train.shape[0])\nprint('\\n\uc5f0\uccb4\uc778 \uacbd\uc6b0\\n',app_train[cond_1]['CODE_GENDER'].value_counts()\/app_train[cond_1].shape[0])\nprint('\\n\uc5f0\uccb4\uac00 \uc544\ub2cc \uacbd\uc6b0\\n',app_train[cond_0]['CODE_GENDER'].value_counts()\/app_train[cond_0].shape[0])","fa6df822":"nulldata(app_train)","64b5f98d":"# \uc2dc\uac01\ud654\nsns.boxplot(prev_app.groupby('SK_ID_CURR')['SK_ID_CURR'].count())","333a2742":"# app_train[['SK_ID_CURR', 'TARGET']] \ub450\uac00\uc9c0 \uceec\ub7fc\ub9cc \uac16\uace0 \uc634\n# on='SK_ID_CURR' \uceec\ub7fc \uae30\uc900\uc73c\ub85c \uc870\uc778\n\napp_prev_target = prev_app.merge(app_train[['SK_ID_CURR', 'TARGET']], on='SK_ID_CURR', how='left')\napp_prev_target.shape","85353f19":"# \uc22b\uc790\ud615 dtype \uac16\uace0 \uc788\ub294 \uceec\ub7fc\ub9cc \ucd94\ucd9c\nnum_columns = app_prev_target.dtypes[app_prev_target.dtypes != 'object'].index.tolist()\nnum_columns","c6c118f6":"show_hist_by_target(app_prev_target, num_columns)","563c469a":"# TARGET \uc720\ud615\uc5d0 \ub530\ub77c Category \ud53c\ucc98\ub4e4\uc758 Histogram\uc744 \ube44\uad50\nobject_columns = app_prev_target.dtypes[app_prev_target.dtypes=='object'].index.tolist()\nobject_columns","d073657d":"show_category_by_target(app_prev_target, object_columns)","c4f8236e":"nulldata(prev_app)","6a8b2ab5":"# TARGET \uac12\uc744 \uac00\uc838\uc624\uae30 \uc704\ud574 bureau\ub97c apps\uc640 \uc870\uc778\napp_bureau = bureau.merge(app_train[['SK_ID_CURR', 'TARGET']], left_on='SK_ID_CURR', right_on='SK_ID_CURR', how='inner')\napp_bureau.shape","f80a8423":"f,ax=plt.subplots(1,2,figsize=(12,6))\napp_train.TARGET.value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Distribution of Target')\nax[0].set_ylabel('')\nsns.countplot('TARGET',data=app_train,ax=ax[1])\nax[1].set_title('Target count')\nplt.show()","693487d7":"nulldata(bureau)","06b4b0da":"type_features(bureau)","026c11b6":"# \ud568\uc218 \ud638\ucd9c \n# \ub300\ucd9c \uc0c1\ud0dc\uc5d0 \ub530\ub978 Target\nplot_re(app_bureau,'CREDIT_ACTIVE','TARGET')\n\n# Closed \ub41c \uace0\uac1d \uadf8\ub8f9\uc5d0 \uc18d\ud55c \uace0\uac1d\ubcf4\ub2e4\ub294 \uc2e0\uc6a9 \ud65c\uc131(active) \uace0\uac1d\uc740 \ube44 \uc9c0\uae09 \uc790 \uc218\uac00 \ub9ce\uc74c","78e65fff":"# CREDIT_CURRENCY: \ub300\ucd9c \uae08\uc561 \ud654\ud3d0\uc720\ud615\uc5d0 \ub530\ub978 Target\nplot_re(app_bureau,'CREDIT_CURRENCY','TARGET')\n\n# currency 1\uc744 \uc0ac\uc6a9\ud558\ub294 CREDIT_CURRENCY \uace0\uac1d\uc740 \ube44 \uc9c0\uae09 \uc790 \uc218\uac00 \ub9ce\uc74c","98511f61":"# Credit type \ub530\ub978 Target\nplot_re(app_bureau,'CREDIT_TYPE','TARGET')\n\n# \uc8fc\uc5b4\uc9c4 \ud50c\ub86f\uc744 \ubc14\ud0d5\uc73c\ub85c CREDIT_TYPE \uc18c\ube44\uc790 \uc2e0\uc6a9(consumer credit)\uc774 \ub300\ucd9c\uc744\ubc1b\uc9c0 \uc54a\ub294 \uc0ac\ub78c\uc758 \uc218\uac00 \ub9ce\ub2e4\ub294 \uac83\uc774 \ubd84\uba85\ud568","7549dfc1":"#Numerical Feature \uc2dc\uac01\ud654\nf, ax = plt.subplots(2,3,figsize=(13, 10))\n\n\n# DAYS_CREDIT: \ud604\uc7ac \ub300\ucd9c \uc2e0\uccad \uc77c \uae30\uc900 \uacfc\uac70 \ub300\ucd9c \uc2e0\uccad \uc9c0\ub09c \uae30\uac04 \ubd84\ud3ec \ud655\uc778\nsns.distplot(app_bureau.DAYS_CREDIT.dropna(), kde=True, color=\"g\", \n             ax=ax[0,0]).set_title('DAYS CREDIT Distribution')\n\n# CREDIT_DAY_OVERDUE: \ub300\ucd9c \uc2e0\uccad \uc2dc CB \ud06c\ub808\ub527 \uc5f0\uccb4 \uc77c\uc218\nsns.distplot(app_bureau.CREDIT_DAY_OVERDUE.dropna(), kde=True, color=\"b\",\n             ax=ax[0,1]).set_title(' CREDIT DAY OVERDUE Distribution')\n\n\n# DAYS_CREDIT_UPDATE: \ub300\ucd9c \uc2e0\uccad\uc804 \ub9c8\uc9c0\ub9c9 \uc815\ubcf4 \ubc1b\uc740 \uae30\uac04\nsns.distplot(bureau.DAYS_CREDIT_UPDATE.dropna(), kde=True, \n             color=\"r\", ax=ax[0,2]).set_title('DAYS CREDIT UPDATE Distribution')\n\n\n# AMT_CREDIT_SUM_LIMIT: \uc2e0\uc6a9 \uce74\ub4dc \ud604\uc7ac \uc2e0\uc6a9\ud55c\ub3c4\nsns.distplot(bureau.AMT_CREDIT_SUM_LIMIT.dropna(), kde=True, color=\"g\", \n             ax=ax[1,0]).set_title(' Distribution')\n\n\n# AMT_CREDIT_SUM_DEBT: \ud604\uc7ac \ucc44\ubb34 \uae08\uc561 \ucd1d\uc561\nsns.distplot(bureau.AMT_CREDIT_SUM_DEBT.dropna(), kde=True, color=\"b\",\n             ax=ax[1,1]).set_title(' Distribution')\n\n \n# AMT_CREDIT_SUM_OVERDUE: \ucd5c\ub300 \uc5f0\uccb4\uae08\uc561\nsns.distplot(bureau.AMT_CREDIT_SUM_OVERDUE.dropna(), kde=True, \n             color=\"r\", ax=ax[1,2]).set_title('DAYS CREDIT UPDATE Distribution')","2c6e2caa":"#\uc2e0\uc6a9 \ud55c\ub3c4 \ucd08\uacfc\ud558\uc5ec \uc5f0\uccb4\ub41c \uace0\uac1d \uc5c6\uc74c\nsns.jointplot(x=\"AMT_CREDIT_SUM_LIMIT\", y=\"AMT_CREDIT_SUM_OVERDUE\", data=app_bureau)\nplt.show()","d2e868e8":"# CNT_CREDIT_PROLONG \uc2e0\uc6a9 \uc5f0\uc7a5 \ud69f\uc218\uc5d0 \ub530\ub978 Target\nplot_re(app_bureau,'CNT_CREDIT_PROLONG','TARGET')","766445e7":"# \uc2e0\uc6a9(\ud06c\ub808\ub527)\uc774 \uba87 \ubc88 \uc5f0\uc7a5\uc744 \ud588\ub294\uc9c0, \uc5f0\uc7a5\ub418\uc5c8\ub2e4\uba74 \uc5b4\ub5a4 \ub300\ucd9c type \uc778\uc9c0 \uc54c\uc544\ubcf4\ub294 \uc2dc\uac01\ud654\n\n# CNT_CREDIT_PROLONG \uc2e0\uc6a9 \uc5f0\uc7a5 \ud69f\uc218\n# CREDIT_TYPE \ub300\ucd9c \uc720\ud615\n\nsns.stripplot(x=\"CNT_CREDIT_PROLONG\", y=\"CREDIT_TYPE\", data=app_bureau)\nplt.show()\n\n# \uacb0\uacfc: \uc2e0\uc6a9 \uce74\ub4dc \uc720\ud615 \uc2e0\uc6a9\uc774 \uc5f0\uc7a5 \ub41c \ucd5c\ub300 \ud69f\uc218\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc74c","57f113eb":"# correlated features\n\ncorrmat = app_bureau.corr()\ntop_corr_features = corrmat.index[abs(corrmat[\"TARGET\"])>=0.03]\nplt.figure(figsize=(12,8))\ng = sns.heatmap(app_bureau[top_corr_features].corr(),annot=True,cmap=\"Oranges\")","5dd9825f":"type_features(bureau_bal)","32ee8a82":"# null \uac12\uc744 \ud655\uc778\n\ntotal = bureau_bal.isnull().sum().sort_values(ascending = False)\npercent = (bureau_bal.isnull().sum()\/bureau_bal.isnull().count()*100).sort_values(ascending = False)\nms=pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nms= ms[ms[\"Percent\"] > 0]\nms","41703e98":"f, ax = plt.subplots(figsize=(7,5))\n\n# Count Plot \nsns.countplot(x='STATUS', data=bureau_bal).set_title('count based on status type')","6a8f0021":"def get_apps_processed(apps):\n\n    # \uc2a4\ucf54\uc5b4 \ud3c9\uade0, \ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0 \ubc0f \uacb0\uce21\uce58 \ucc44\uc6b0\uae30\n    apps['APPS_EXT_SOURCE_MEAN'] = apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].mean(axis=1)\n    apps['APPS_EXT_SOURCE_STD'] = apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].std(axis=1)\n    apps['APPS_EXT_SOURCE_STD'] = apps['APPS_EXT_SOURCE_STD'].fillna(apps['APPS_EXT_SOURCE_STD'].mean())\n    \n    # AMT_ANNUITY: \uc6d4 \ub300\ucd9c \uc9c0\uae09\uc561\n    # AMT_CREDIT: \ub300\ucd9c\uae08\uc561\n    # AMT_GOODS_PRICE:\uc18c\ube44\uc790 \ub300\ucd9c\uc0c1\ud488\uc561\n    apps['APPS_ANNUITY_CREDIT_RATIO'] = apps['AMT_ANNUITY']\/apps['AMT_CREDIT']\n    apps['APPS_GOODS_CREDIT_RATIO'] = apps['AMT_GOODS_PRICE']\/apps['AMT_CREDIT']\n    \n    # AMT_INCOME_TOTAL: \uace0\uac1d \ucd1d \uc18c\ub4dd\n    # CNT_FAM_MEMBERS: \uace0\uac1d \uac00\uc871 \uc218\n    apps['APPS_ANNUITY_INCOME_RATIO'] = apps['AMT_ANNUITY']\/apps['AMT_INCOME_TOTAL']\n    apps['APPS_CREDIT_INCOME_RATIO'] = apps['AMT_CREDIT']\/apps['AMT_INCOME_TOTAL']\n    apps['APPS_GOODS_INCOME_RATIO'] = apps['AMT_GOODS_PRICE']\/apps['AMT_INCOME_TOTAL']\n    apps['APPS_CNT_FAM_INCOME_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['CNT_FAM_MEMBERS']\n    \n    # DAYS_BIRTH: \uc2e0\uccad\uc77c\uc790 \uae30\uc900 \uace0\uac1d \ub098\uc774\n    # DAYS_EMPLOYED: \ub300\ucd9c \uc2e0\uccad \uc804 \ud604 \uc9c1\uc5c5 \uc720\uc9c0\uae30\uac04\n    apps['APPS_EMPLOYED_BIRTH_RATIO'] = apps['DAYS_EMPLOYED']\/apps['DAYS_BIRTH']\n    apps['APPS_INCOME_EMPLOYED_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['DAYS_EMPLOYED']\n    apps['APPS_INCOME_BIRTH_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['DAYS_BIRTH']\n    apps['APPS_CAR_BIRTH_RATIO'] = apps['OWN_CAR_AGE'] \/ apps['DAYS_BIRTH']\n    apps['APPS_CAR_EMPLOYED_RATIO'] = apps['OWN_CAR_AGE'] \/ apps['DAYS_EMPLOYED']\n    \n    return apps","f3076d67":"def get_prev_processed(prev):\n    \n    prev['PREV_CREDIT_DIFF'] = prev['AMT_APPLICATION'] - prev['AMT_CREDIT']\n    prev['PREV_GOODS_DIFF'] = prev['AMT_APPLICATION'] - prev['AMT_GOODS_PRICE']\n    prev['PREV_CREDIT_APPL_RATIO'] = prev['AMT_CREDIT']\/ prev['AMT_APPLICATION']\n    prev['PREV_GOODS_APPL_RATIO'] = prev['AMT_GOODS_PRICE'] \/ prev['AMT_APPLICATION']   \n    \n    # \ub370\uc774\ud130 \ub300\uce58\n    prev['DAYS_FIRST_DRAWING'].replace(365243, np.nan, inplace=True)\n    prev['DAYS_FIRST_DUE'].replace(365243, np.nan, inplace=True)\n    prev['DAYS_LAST_DUE_1ST_VERSION'].replace(365243, np.nan, inplace= True)\n    prev['DAYS_LAST_DUE'].replace(365243, np.nan, inplace= True)\n    prev['DAYS_TERMINATION'].replace(365243, np.nan, inplace= True)\n    \n    prev['PREV_DAYS_LAST_DUE_DIFF'] = prev['DAYS_LAST_DUE_1ST_VERSION'] - prev['DAYS_LAST_DUE']\n    \n    # \ub9e4\uc6d4 \ub0a9\ubd80 \uae08\uc561\uacfc \ub0a9\ubd80 \ud69f\uc218 \uacf1\ud574\uc11c \uc804\uccb4 \ub0a9\ubd80 \uae08\uc561 \uad6c\ud568. \n    all_pay = prev['AMT_ANNUITY'] * prev['CNT_PAYMENT']\n    # \uc804\uccb4 \ub0a9\ubd80 \uae08\uc561 \ub300\ube44 AMT_CREDIT \ube44\uc728\uc744 \uad6c\ud558\uace0 \uc5ec\uae30\uc5d0 \ub2e4\uc2dc \ub0a9\ubd80\ud69f\uc218\ub85c \ub098\ub204\uc5b4\uc11c \uc774\uc790\uc728 \uacc4\uc0b0. \n    prev['PREV_INTERESTS_RATE'] = (all_pay\/prev['AMT_CREDIT'] - 1)\/prev['CNT_PAYMENT']\n        \n    return prev","839c8e7c":"def get_prev_amt_agg(prev):\n    '''\n    A newly creatd feature aggregation \n    \uc0c8\ub86d\uac8c \uc0dd\uc131\ub41c \ub300\ucd9c \uc2e0\uccad\uc561 \ub300\ube44 \ub2e4\ub978 \uae08\uc561 \ucc28\uc774 \ubc0f \ube44\uc728\ub85c aggregation \uc218\ud589. \n    '''\n    agg_dict = {\n        'SK_ID_CURR':['count'],\n        'AMT_CREDIT':['mean', 'max', 'sum'],\n        'AMT_ANNUITY':['mean', 'max', 'sum'], \n        'AMT_APPLICATION':['mean', 'max', 'sum'],\n        'AMT_DOWN_PAYMENT':['mean', 'max', 'sum'],\n        'AMT_GOODS_PRICE':['mean', 'max', 'sum'],\n        'RATE_DOWN_PAYMENT': ['min', 'max', 'mean'],\n        'DAYS_DECISION': ['min', 'max', 'mean'],\n        'CNT_PAYMENT': ['mean', 'sum'],\n\n        'PREV_CREDIT_DIFF': ['mean', 'max', 'sum'],\n        'PREV_CREDIT_APPL_RATIO':['mean', 'max'],\n        'PREV_GOODS_DIFF':['mean', 'max', 'sum'],\n        'PREV_GOODS_APPL_RATIO':['mean', 'max'],\n        'PREV_DAYS_LAST_DUE_DIFF':['mean', 'max', 'sum'],\n        'PREV_INTERESTS_RATE':['mean', 'max']\n    }\n    prev_group = prev.groupby('SK_ID_CURR')\n    prev_amt_agg = prev_group.agg(agg_dict)\n    \n    # \uba40\ud2f0 \uc778\ub371\uc2a4 \uceec\ub7fc\uba85 \ubcc0\uacbd\n    prev_amt_agg.columns = [\"PREV_\"+ \"_\".join(x).upper() for x in prev_amt_agg.columns.ravel()]\n    return prev_amt_agg","5439a384":"# previous application groupby + aggregation\ndef get_prev_refused_appr_agg(prev):\n    \n    prev_refused_appr_group = prev[prev['NAME_CONTRACT_STATUS'].isin(['Approved', 'Refused'])].groupby(['SK_ID_CURR', 'NAME_CONTRACT_STATUS'])\n    prev_refused_appr_agg = prev_refused_appr_group['SK_ID_CURR'].count().unstack()\n    \n    # rename column\n    prev_refused_appr_agg.columns = ['PREV_APPROVED_COUNT', 'PREV_REFUSED_COUNT']\n    \n    # NaN\uac12\uc740 \ubaa8\ub450 0\uc73c\ub85c \ubcc0\uacbd. \n    prev_refused_appr_agg = prev_refused_appr_agg.fillna(0)    \n    return prev_refused_appr_agg","6a23493c":"def get_prev_agg(prev):\n    '''\n    Aggregation for previous credit\n    '''\n    prev = get_prev_processed(prev)\n    prev = get_prev_processed(prev)\n    prev_amt_agg = get_prev_amt_agg(prev)\n    \n    # Refused or Approved previous credit\n    prev_refused_appr_agg = get_prev_refused_appr_agg(prev)\n    \n    # prev_amt_agg\uc640 \uc870\uc778. \n    prev_agg = prev_amt_agg.merge(prev_refused_appr_agg, on='SK_ID_CURR', how='left')\n    \n    # SK_ID_CURR\ubcc4 \uacfc\uac70 \ub300\ucd9c\uac74\uc218 \ub300\ube44 APPROVED_COUNT \ubc0f REFUSED_COUNT \ube44\uc728 \uc0dd\uc131. \n    prev_agg['PREV_REFUSED_RATIO'] = prev_agg['PREV_REFUSED_COUNT']\/prev_agg['PREV_SK_ID_CURR_COUNT']\n    prev_agg['PREV_APPROVED_RATIO'] = prev_agg['PREV_APPROVED_COUNT']\/prev_agg['PREV_SK_ID_CURR_COUNT']\n    \n    # 'PREV_REFUSED_COUNT', 'PREV_APPROVED_COUNT' \uceec\ub7fc drop \n    prev_agg = prev_agg.drop(['PREV_REFUSED_COUNT', 'PREV_APPROVED_COUNT'], axis = 1)\n    \n    return prev_agg","fbd087f4":"def get_bureau_processed(bureau):\n    '''\n    feature engineering for bureau\n    \uc608\uc815 \ucc44\ubb34 \uc2dc\uc791 \ubc0f \uc644\ub8cc\uc77c\uacfc \uc2e4\uc81c \ucc44\ubb34 \uc644\ub8cc\uc77c\uac04\uc758 \ucc28\uc774 \ubc0f \ub0a0\uc9dc \ube44\uc728 \uac00\uacf5.  \n    '''\n    \n    # DAYS_CREDIT_ENDDATE : CB \ud06c\ub808\ub527 \ucc44\ubb34 \uc644\ub8cc\uae4c\uc9c0 \ub0a8\uc544\uc788\ub294 \uc77c\uc218(\uc2e0\uccad\uc77c \uae30\uc900)\n    # DAYS_ENDDATE_FACT : CB \ud06c\ub808\ub527 \ucc44\ubb34 \uc644\ub8cc\uae4c\uc9c0 \uac78\ub9b0 \uc2e4\uc81c \uc77c\uc218(\uc2e0\uccad\uc77c \uae30\uc900, \uc0c1\ud0dc\uac00 Close\uc77c\ub54c\ub9cc)\n    # DAYS_CREDIT : \ud604\uc7ac \ub300\ucd9c \uc2e0\uccad \uc77c \uae30\uc900 \uacfc\uac70 \ub300\ucd9c \uc2e0\uccad \uc9c0\ub09c \uae30\uac04\n    bureau['BUREAU_ENDDATE_FACT_DIFF'] = bureau['DAYS_CREDIT_ENDDATE'] - bureau['DAYS_ENDDATE_FACT']\n    bureau['BUREAU_CREDIT_FACT_DIFF'] = bureau['DAYS_CREDIT'] - bureau['DAYS_ENDDATE_FACT']\n    bureau['BUREAU_CREDIT_ENDDATE_DIFF'] = bureau['DAYS_CREDIT'] - bureau['DAYS_CREDIT_ENDDATE']\n  \n    # \ucc44\ubb34 \uae08\uc561 \ub300\ube44\/\ub300\ucd9c \uae08\uc561 \ube44\uc728 \ubc0f \ucc28\uc774 \uac00\uacf5\n    bureau['BUREAU_CREDIT_DEBT_RATIO'] = bureau['AMT_CREDIT_SUM_DEBT'] \/ bureau['AMT_CREDIT_SUM']\n    bureau['BUREAU_CREDIT_DEBT_DIFF'] = bureau['AMT_CREDIT_SUM_DEBT'] - bureau['AMT_CREDIT_SUM']\n    \n    # \uc5f0\uccb4 \uc5ec\ubd80 \ubc0f 120\uc77c \uc774\uc0c1 \uc5f0\uccb4 \uc5ec\ubd80 \uac00\uacf5\n    # CREDIT_DAY_OVERDUE : \ub300\ucd9c \uc2e0\uccad \uc2dc CB \ud06c\ub808\ub527 \uc5f0\uccb4 \uc77c\uc218\n    bureau['BUREAU_IS_DPD'] = bureau['CREDIT_DAY_OVERDUE'].apply(lambda x: 1 if x > 0 else 0)\n    bureau['BUREAU_IS_DPD_OVER120'] = bureau['CREDIT_DAY_OVERDUE'].apply(lambda x: 1 if x > 120 else 0)\n    \n    return bureau","aeb6da22":"#bureau aggregation\ndef get_bureau_day_amt_agg(bureau):\n     \n    bureau_agg_dict = {\n    'SK_ID_BUREAU':['count'],\n    'DAYS_CREDIT':['min', 'max', 'mean'],\n    'CREDIT_DAY_OVERDUE':['min', 'max', 'mean'],\n    'DAYS_CREDIT_ENDDATE':['min', 'max', 'mean'],\n    'DAYS_ENDDATE_FACT':['min', 'max', 'mean'],\n    'AMT_CREDIT_MAX_OVERDUE': ['max', 'mean'],\n    'AMT_CREDIT_SUM': ['max', 'mean', 'sum'],\n    'AMT_CREDIT_SUM_DEBT': ['max', 'mean', 'sum'],\n    'AMT_CREDIT_SUM_OVERDUE': ['max', 'mean', 'sum'],\n    'AMT_ANNUITY': ['max', 'mean', 'sum'],\n\n    'BUREAU_ENDDATE_FACT_DIFF':['min', 'max', 'mean'],\n    'BUREAU_CREDIT_FACT_DIFF':['min', 'max', 'mean'],\n    'BUREAU_CREDIT_ENDDATE_DIFF':['min', 'max', 'mean'],\n    'BUREAU_CREDIT_DEBT_RATIO':['min', 'max', 'mean'],\n    'BUREAU_CREDIT_DEBT_DIFF':['min', 'max', 'mean'],\n    'BUREAU_IS_DPD':['mean', 'sum'],\n    'BUREAU_IS_DPD_OVER120':['mean', 'sum']\n    }\n\n    bureau_grp = bureau.groupby('SK_ID_CURR')\n    bureau_day_amt_agg = bureau_grp.agg(bureau_agg_dict)\n    bureau_day_amt_agg.columns = ['BUREAU_'+('_').join(column).upper() for column in bureau_day_amt_agg.columns.ravel()]\n    # \uc870\uc778\uc744 \uc704\ud574 SK_ID_CURR\uc744 reset_index()\ub85c \uceec\ub7fc\ud654 \n    bureau_day_amt_agg = bureau_day_amt_agg.reset_index()\n\n    return bureau_day_amt_agg","378442ac":"def get_bureau_active_agg(bureau):\n    '''\n    CREDIT_ACTIVE='Active' \uc778 \ub370\uc774\ud130\ub9cc filtering\n    Bureau\uc758 CREDIT_ACTIVE='Active' \uc778 \ub370\uc774\ud130\ub9cc filtering \ud6c4 \uc8fc\uc694 \uceec\ub7fc \ubc0f \uc55e\uc5d0\uc11c \ucc44\ubb34 \ubc0f \ub300\ucd9c\uae08\uc561 \uad00\ub828 \uceec\ub7fc\ub4e4\ub85c SK_ID_CURR \ub808\ubca8\uc758 aggregation \uceec\ub7fc \uc0dd\uc131\n    '''\n    cond_active = bureau['CREDIT_ACTIVE'] == 'Active'\n    bureau_active_grp = bureau[cond_active].groupby(['SK_ID_CURR'])\n    bureau_agg_dict = {\n        'SK_ID_BUREAU':['count'],\n        'DAYS_CREDIT':['min', 'max', 'mean'],\n        'CREDIT_DAY_OVERDUE':['min', 'max', 'mean'],\n        'DAYS_CREDIT_ENDDATE':['min', 'max', 'mean'],\n        'DAYS_ENDDATE_FACT':['min', 'max', 'mean'],\n        'AMT_CREDIT_MAX_OVERDUE': ['max', 'mean'],\n        'AMT_CREDIT_SUM': ['max', 'mean', 'sum'],\n        'AMT_CREDIT_SUM_DEBT': ['max', 'mean', 'sum'],\n        'AMT_CREDIT_SUM_OVERDUE': ['max', 'mean', 'sum'],\n        'AMT_ANNUITY': ['max', 'mean', 'sum'],\n\n        'BUREAU_ENDDATE_FACT_DIFF':['min', 'max', 'mean'],\n        'BUREAU_CREDIT_FACT_DIFF':['min', 'max', 'mean'],\n        'BUREAU_CREDIT_ENDDATE_DIFF':['min', 'max', 'mean'],\n        'BUREAU_CREDIT_DEBT_RATIO':['min', 'max', 'mean'],\n        'BUREAU_CREDIT_DEBT_DIFF':['min', 'max', 'mean'],\n        'BUREAU_IS_DPD':['mean', 'sum'],\n        'BUREAU_IS_DPD_OVER120':['mean', 'sum']\n        }\n\n    bureau_active_agg = bureau_active_grp.agg(bureau_agg_dict)\n    bureau_active_agg.columns = ['BUREAU_ACT_'+('_').join(column).upper() for column in bureau_active_agg.columns.ravel()]\n    # \uc870\uc778\uc744 \uc704\ud574 SK_ID_CURR\uc744 reset_index()\ub85c \uceec\ub7fc\ud654 \n    bureau_active_agg = bureau_active_agg.reset_index()\n    \n    return bureau_active_agg","d2b873f4":"#bureau\uc640 bureau_bal \uc870\uc778 \ud6c4 aggregation \uac00\uacf5\ndef get_bureau_bal_agg(bureau, bureau_bal):\n\n    bureau_bal = bureau_bal.merge(bureau[['SK_ID_CURR', 'SK_ID_BUREAU']], on='SK_ID_BUREAU', how='left')\n    \n    bureau_bal['BUREAU_BAL_IS_DPD'] = bureau_bal['STATUS'].apply(lambda x:1 if x in ['1', '2', '3', '4', '5'] else 0)\n    bureau_bal['BUREAU_BAL_IS_DPD_OVER120'] = bureau_bal['STATUS'].apply(lambda x: 1 if x =='5'  else 0)\n    \n    bureau_bal_grp = bureau_bal.groupby('SK_ID_CURR')\n    \n    # SK_ID_CURR \ub808\ubca8\ub85c \uac74\uc218\uc640 MONTHS_BALANCE\uc758 aggregation \uac00\uacf5 \n    bureau_bal_agg_dict = {\n        'SK_ID_CURR':['count'],\n        'MONTHS_BALANCE':['min', 'max', 'mean'],\n        'BUREAU_BAL_IS_DPD':['mean','sum'],\n        'BUREAU_BAL_IS_DPD_OVER120':['mean','sum']\n    }\n    bureau_bal_agg = bureau_bal_grp.agg(bureau_bal_agg_dict)\n    bureau_bal_agg.columns = ['BUREAU_BAL_'+ '_'.join(column).upper() for column in bureau_bal_agg.columns.ravel()]\n    \n    # SK_ID_CURR\uc744 reset_index()\ub85c \uceec\ub7fc\ud654 \n    bureau_bal_agg = bureau_bal_agg.reset_index()\n    \n    return bureau_bal_agg\n    ","bead8485":"#bureau aggregation \uceec\ub7fc \ubaa8\ub450 \uacb0\ud569\ndef get_bureau_agg(bureau, bureau_bal):\n\n    bureau = get_bureau_processed(bureau)\n    bureau_day_amt_agg = get_bureau_day_amt_agg(bureau)\n    bureau_active_agg = get_bureau_active_agg(bureau)\n    bureau_bal_agg = get_bureau_bal_agg(bureau, bureau_bal)\n    \n    # bureau_day_amt_agg\uc640 bureau_active_agg \uc870\uc778  \n    bureau_agg = bureau_day_amt_agg.merge(bureau_active_agg, on='SK_ID_CURR', how='left')\n    \n    # STATUS\uac00 ACTIVE IS_DPD RATIO \uad00\ub828 \ube44\uc728 \uc7ac\uac00\uacf5. \n    bureau_agg['BUREAU_ACT_IS_DPD_RATIO'] = bureau_agg['BUREAU_ACT_BUREAU_IS_DPD_SUM']\/bureau_agg['BUREAU_SK_ID_BUREAU_COUNT']\n    bureau_agg['BUREAU_ACT_IS_DPD_OVER120_RATIO'] = bureau_agg['BUREAU_ACT_BUREAU_IS_DPD_OVER120_SUM']\/bureau_agg['BUREAU_SK_ID_BUREAU_COUNT']\n    \n    # bureau_agg\uc640 bureau_bal_agg \uc870\uc778\n    bureau_agg = bureau_agg.merge(bureau_bal_agg, on='SK_ID_CURR', how='left')\n    \n    return bureau_agg","0d9c0131":"#\uc694\uc778\ud654(factorize)\ub97c \uc704\ud55c \uc778\ucf54\ub529(encoding)\ndef get_apps_all_encoded(apps_all):\n    object_columns = apps_all.dtypes[apps_all.dtypes == 'object'].index.to_list()\n    for column in object_columns:\n        apps_all[column] = pd.factorize(apps_all[column])[0]\n    return apps_all","bfd91b7e":"#\ubcd1\ud569\ud55c train, test \ub370\uc774\ud130\ub97c \ub2e4\uc2dc \ubd84\ub9ac\ndef get_apps_all_train_test(apps_all):\n    apps_all_train = apps_all[~apps_all['TARGET'].isnull()]\n    apps_all_test = apps_all[apps_all['TARGET'].isnull()]\n    apps_all_test = apps_all_test.drop('TARGET', axis = 1)\n    return apps_all_train, apps_all_test","cb48b36b":"# \ubaa8\ub4e0 \ub370\uc774\ud130 \ud53c\uccd0 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \ubc0f \uacb0\ud569\ndef get_apps_all_with_all_agg(apps, prev_app, bureau, bureau_bal):\n\n    apps_all =  get_apps_processed(apps)\n    print(\"Final Application:\", apps_all)\n    prev_agg = get_prev_agg(prev_app)\n    print(\"Final Previous:\", prev_agg)\n    bureau_agg = get_bureau_agg(bureau, bureau_bal)\n    print(\"Final Bureau:\", bureau_agg)\n    \n    # \uc0dd\uc131\ub41c \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ubaa8\ub450 \uc870\uc778\ud558\uc5ec \ucd5c\uc885 \ud559\uc2b5\/\ud14c\uc2a4\ud2b8 \uc9d1\ud569 \uc0dd\uc131\n    apps_all = apps_all.merge(prev_agg, on='SK_ID_CURR', how='left')\n    apps_all = apps_all.merge(bureau_agg, on='SK_ID_CURR', how='left')\n    \n    print('Final DataSet:', apps_all.shape)\n    \n    return apps_all","e7e81bf3":"# application, previous, bureau, bureau_bal \uad00\ub828 \ub370\uc774\ud130\uc14b \uac00\uacf5 \ubc0f \ucde8\ud569. \napps_all = get_apps_all_with_all_agg(apps, prev_app, bureau, bureau_bal)\n\n# Category \uceec\ub7fc\uc744 \ubaa8\ub450 Label \uc778\ucf54\ub529 \uc218\ud589. \napps_all = get_apps_all_encoded(apps_all)\n\n# \ud559\uc2b5\uacfc \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub85c \ubd84\ub9ac. \napps_all_train, apps_all_test = get_apps_all_train_test(apps_all)","3d388fe1":"print(\"Train Data Set\", apps_all_train.shape)\nprint(\"Test Data Set\", apps_all_test.shape)","43bc3488":"ftr_app = apps_all_train.drop(['SK_ID_CURR', 'TARGET'], axis=1) # feature dateset\ntarget_app = apps_all_train['TARGET'] # target datasets","a453302d":"test_preds = np.zeros(apps_all_test.shape[0])","61ce868c":"from lightgbm import LGBMClassifier\n\nclf = LGBMClassifier(\n                nthread=4,\n                n_estimators=4000,\n                learning_rate=0.01,\n                max_depth = 11,\n                num_leaves=58,\n                colsample_bytree=0.613,\n                subsample=0.708,\n                max_bin=407,\n                reg_alpha=3.564,\n                reg_lambda=4.930,\n                min_child_weight= 6,\n                min_child_samples=165,\n                silent=-1,\n                verbose=-1,\n                )","d998bbfe":"train_x, valid_x, train_y, valid_y = train_test_split(ftr_app, target_app, test_size = 0.3, random_state = 2020)","d0912899":"clf.fit(train_x, train_y, eval_set=[(train_x, train_y),(valid_x, valid_y)], eval_metric= 'auc', verbose= 100, early_stopping_rounds= 200)","df4de1de":"test_preds = clf.predict_proba(apps_all_test.drop('SK_ID_CURR', axis = 1),num_iteration=clf.best_iteration_)[:, 1]","19a7c762":"display(test_preds.shape, test_preds)","ed2cd191":"apps_all_test['TARGET'] = test_preds\napps_all_test[['SK_ID_CURR', 'TARGET']].to_csv('BigData_FINAL_SUBMISSION.csv', index=False)","141ba2fe":"#\ud53c\ucc98\ub4e4\uc758 \uc911\uc694\ub3c4 \uc2dc\uac01\ud654\nfrom lightgbm import plot_importance\nplot_importance(clf, figsize=(16, 32))","b2f80d76":"## (3) EDA","090993bb":"#### \u2462 EDA : Bureau & Bureau Balance","2285004f":"## (2) \ub370\uc774\ud130 \ub85c\ub4dc \ubc0f \uc790\uc8fc \uc0ac\uc6a9\ud560 \ud568\uc218 \uc815\uc758","82d9dd0e":"## (5) \ubaa8\ub378 \uc815\uc758","ccc8efe3":"#### \u2460 EDA : Application_Train\/Test","2fefdb95":"## (1) \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ud328\ud0a4\uc9c0 \ud638\ucd9c","e8262631":"## (6) \ud559\uc2b5 \ubc0f \uc608\uce21","38793f31":"## (4) Feature Engineering","e2b79533":"# 2021-1 \ube45\ub370\uc774\ud130\ubd84\uc11d(001) \uae30\ub9d0 \ud504\ub85c\uc81d\ud2b8\n##### **\u25cf \uc774\ub984: \ubc15\ub3d9\uc5f0**\n##### **\u25cf \ud559\ubc88: 1713561**\n##### **\u25cf \ub0b4\uc6a9: EDA\ub97c \ud1b5\ud574 \ub370\uc774\ud130\ub97c \uc0b4\ud53c\uace0, Feature Engineering\ud55c \ub370\uc774\ud130\ub97c LGBM \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud559\uc2b5\uc2dc\ud0a8 \ub4a4, \uacb0\uacfc\uac12\uc744 \uc608\uce21**\n##### **\u25cf \uc0ac\uc6a9\ud55c \ub370\uc774\ud130: application_train.csv, application_test.csv, previous_application.csv, bureau.csv, bureau_balance.csv**\n-------------------------------------------------------------------------------------------------------------\n##### **\u25cf \ubaa9\ucc28**\n##### (1) \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ud328\ud0a4\uc9c0 \ud638\ucd9c\n##### (2) \ub370\uc774\ud130 \ub85c\ub4dc \ubc0f \uc790\uc8fc \uc0ac\uc6a9\ud560 \ud568\uc218 \uc815\uc758\n##### (3) EDA\n##### (4) Feature Engineering\n##### (5) \ubaa8\ub378 \uc815\uc758\n##### (6) \ud559\uc2b5 \ubc0f \uc608\uce21\n-------------------------------------------------------------------------------------------------------------\n##### **\u25cf \ucc38\uace0\ubb38\ud5cc**\n##### 1) \uc219\uba85\uc5ec\uc790\ub300\ud559\uad50 2021-1 \ube45\ub370\uc774\ud130\ubd84\uc11d(001) \uac15\uc758\uc790\ub8cc 10\uc8fc\ucc28~15\uc8fc\ucc28\n##### 2) https:\/\/www.kaggle.com\/jsaguiar\/lightgbm-with-simple-features\n##### 3) https:\/\/www.kaggle.com\/hikmetsezen\/base-model-with-0-804-auc-on-home-credit\n##### 4) https:\/\/www.kaggle.com\/sangseoseo\/oof-all-home-credit-default-risk\n##### 5) https:\/\/www.kaggle.com\/chienhsianghung\/home-credit-default-risk-lgbm-w-domain-fts\n##### 6) https:\/\/www.kaggle.com\/c\/home-credit-default-risk\/discussion\/59347\n##### 7) https:\/\/www.kaggle.com\/c\/home-credit-default-risk\/discussion\/63032\n##### 8) https:\/\/www.kaggle.com\/pavansanagapati\/14-simple-tips-to-save-ram-memory-for-1-gb-dataset\n","630cb693":"#### \u2461 EDA : Previous Application"}}