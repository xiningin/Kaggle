{"cell_type":{"7e91fa9b":"code","f3a83100":"code","f4e8295d":"code","766548e6":"code","bd4220f9":"code","ab147edd":"code","5416f5f8":"code","672f678b":"code","41930bf2":"code","a6bf1c44":"code","afc753a6":"code","ab032b60":"code","4b7a00af":"code","63249a29":"code","0985d0c2":"code","26a566db":"code","c39e8f2c":"code","952f921b":"code","31763d81":"code","7c7d0316":"code","c7fcef6f":"code","c7d65dfc":"code","2b23ab8e":"code","cd5fd19b":"code","8c26ac24":"code","b376d90a":"code","5628ce2e":"code","72d027c8":"code","cebbabe8":"code","f4419316":"markdown","68066dba":"markdown","7f29450f":"markdown","9cf2a8ec":"markdown","8ce18a0f":"markdown","aeedafc9":"markdown","56bb8e06":"markdown","d5bc9e63":"markdown"},"source":{"7e91fa9b":"!pip install pycaret","f3a83100":"!pip install shap","f4e8295d":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nfrom pycaret.regression import setup, blend_models, create_model, finalize_model, plot_model, predict_model, interpret_model\nimport shap\nfrom fbprophet import Prophet","766548e6":"df_train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\ndf_sub = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","bd4220f9":"df_train['IsTrain'] = 1\ndf_test['IsTrain'] = 0\ndf = pd.concat([df_train, df_test], sort=False,axis=0)\n\ndf['date_time'] = pd.to_datetime(df['date_time'])\ndf.loc[(df['date_time'].dt.month == 12) | (df['date_time'].dt.month <= 2), 'season'] = 1\ndf.loc[(df['date_time'].dt.month >= 3) & (df['date_time'].dt.month <= 5), 'season'] = 2\ndf.loc[(df['date_time'].dt.month >= 6) & (df['date_time'].dt.month <= 8), 'season'] = 3\ndf.loc[(df['date_time'].dt.month >= 9) & (df['date_time'].dt.month <= 11), 'season'] = 4\ndf.drop(columns = 'date_time', inplace = True)\n\ntrain = df.query('IsTrain == 1').drop(['IsTrain'], axis=1)\ntest =  df.query('IsTrain == 0').drop(['IsTrain','target_carbon_monoxide','target_benzene','target_nitrogen_oxides'], axis=1)","ab147edd":"train","5416f5f8":"train1 = train.drop(['target_benzene', 'target_nitrogen_oxides'], axis=1)\ntrain1","672f678b":"reg1 = setup(data=train1, target='target_carbon_monoxide', categorical_features=['season'], silent= True, session_id=1)\ncatboost1 = create_model(\"catboost\")\net1 = create_model(\"et\")\nlightgbm1 = create_model(\"lightgbm\")\ngbr1 = create_model(\"gbr\")\nrf1 = create_model(\"rf\")\nblend1 = blend_models(estimator_list= [catboost1, et1, lightgbm1, gbr1, rf1])\nfinal1 = finalize_model(blend1)\npred1 = predict_model(final1, data=test)","41930bf2":"train2 = train.loc[:,['sensor_2','target_benzene']]\ntrain2.head()","a6bf1c44":"reg2 = setup(data=train2, target='target_benzene', silent= True, session_id=2)\ncatboost2 = create_model(\"catboost\")\net2 = create_model(\"et\")\nlightgbm2 = create_model(\"lightgbm\")\ngbr2 = create_model(\"gbr\")\nrf2 = create_model(\"rf\")\nblend2 = blend_models(estimator_list= [catboost2, et2, lightgbm2, gbr2, rf2])\nfinal2 = finalize_model(blend2)\npred2 = predict_model(final2, data=test)","afc753a6":"train3 = train.drop(['target_benzene', 'target_carbon_monoxide'], axis=1)\ntrain3","ab032b60":"reg3 = setup(data=train3, target='target_nitrogen_oxides', categorical_features=['season'], silent= True, session_id=3)\ncatboost3 = create_model(\"catboost\")\net3 = create_model(\"et\")\nlightgbm3 = create_model(\"lightgbm\")\ngbr3 = create_model(\"gbr\")\nrf3 = create_model(\"rf\")\nblend3 = blend_models(estimator_list= [catboost3, et3, lightgbm3, gbr3, rf3])\nfinal3 = finalize_model(blend3)\npred3 = predict_model(final3, data=test)","4b7a00af":"df_sub.target_carbon_monoxide = pred1.Label\ndf_sub.target_benzene = pred2.Label\ndf_sub.target_nitrogen_oxides = pred3.Label\ndf_sub","63249a29":"def do_prophet(train):\n    m = Prophet(yearly_seasonality=False, weekly_seasonality=False, daily_seasonality=True)\n    m.fit(train)\n    future = m.make_future_dataframe(periods=100,freq='H')\n    predict = m.predict(future)\n    fig1 = m.plot(predict)\n    fig2 = m.plot_components(predict)\n    return(predict)","0985d0c2":"train_c1 = df_sub.query(\"date_time >= '2011-01-01 09:00:00' & date_time < '2011-01-02 21:00:00'\").loc[:,['date_time','target_carbon_monoxide']]\ntrain_c1 = train_c1.rename(columns={'date_time': 'ds', 'target_carbon_monoxide': 'y'})\npred11 = do_prophet(train_c1)","26a566db":"pred_c1 = pred11.query(\"ds >= '2011-01-02 21:00:00' & ds <= '2011-01-05 00:00:00'\").loc[:,['ds','yhat']]\npred_c1 =pred_c1.reset_index(drop=True)","c39e8f2c":"train_c2 = df_sub.query(\"date_time >= '2011-01-26 06:00:00' & date_time < '2011-01-28 17:00:00'\").loc[:,['date_time','target_carbon_monoxide']]\ntrain_c2 = train_c2.rename(columns={'date_time': 'ds', 'target_carbon_monoxide': 'y'})\npred12 = do_prophet(train_c2)","952f921b":"pred_c2 = pred12.query(\"ds >= '2011-01-28 17:00:00' & ds <= '2011-01-29 01:00:00'\").loc[:,['ds','yhat']]\npred_c2 =pred_c2.reset_index(drop=True)","31763d81":"train_c3 = df_sub.query(\"date_time >= '2011-02-07 03:00:00' & date_time < '2011-02-08 17:00:00'\").loc[:,['date_time','target_carbon_monoxide']]\ntrain_c3 = train_c3.rename(columns={'date_time': 'ds', 'target_carbon_monoxide': 'y'})\npred13 = do_prophet(train_c3)","7c7d0316":"pred_c3 = pred13.query(\"ds >= '2011-02-08 17:00:00' & ds <= '2011-02-11 20:00:00'\").loc[:,['ds','yhat']]\npred_c3 =pred_c3.reset_index(drop=True)","c7fcef6f":"train_n1 = df_sub.query(\"date_time >= '2011-01-01 09:00:00' & date_time < '2011-01-02 21:00:00'\").loc[:,['date_time','target_nitrogen_oxides']]\ntrain_n1 = train_n1.rename(columns={'date_time': 'ds', 'target_nitrogen_oxides': 'y'})\npred31 = do_prophet(train_n1)","c7d65dfc":"pred_n1 = pred31.query(\"ds >= '2011-01-02 21:00:00' & ds <= '2011-01-05 00:00:00'\").loc[:,['ds','yhat']]\npred_n1 =pred_n1.reset_index(drop=True)","2b23ab8e":"train_n2 = df_sub.query(\"date_time >= '2011-01-26 06:00:00' & date_time < '2011-01-28 17:00:00'\").loc[:,['date_time','target_nitrogen_oxides']]\ntrain_n2 = train_n2.rename(columns={'date_time': 'ds', 'target_nitrogen_oxides': 'y'})\npred32 = do_prophet(train_n2)","cd5fd19b":"pred_n2 = pred32.query(\"ds >= '2011-01-28 17:00:00' & ds <= '2011-01-29 01:00:00'\").loc[:,['ds','yhat']]\npred_n2 =pred_n2.reset_index(drop=True)","8c26ac24":"train_n3 = df_sub.query(\"date_time >= '2011-02-07 03:00:00' & date_time < '2011-02-08 17:00:00'\").loc[:,['date_time','target_nitrogen_oxides']]\ntrain_n3 = train_n3.rename(columns={'date_time': 'ds', 'target_nitrogen_oxides': 'y'})\npred33 = do_prophet(train_n3)","b376d90a":"pred_n3 = pred33.query(\"ds >= '2011-02-08 17:00:00' & ds <= '2011-02-11 20:00:00'\").loc[:,['ds','yhat']]\npred_n3 =pred_n3.reset_index(drop=True)","5628ce2e":"sub_temp1 = df_sub.query(\"date_time < '2011-01-02 21:00:00'\")\nsub_temp2 = df_sub.query(\"date_time >= '2011-01-02 21:00:00' & date_time <= '2011-01-05 00:00:00'\")\nsub_temp3 = df_sub.query(\"date_time > '2011-01-05 00:00:00' & date_time < '2011-01-28 17:00:00'\")\nsub_temp4 = df_sub.query(\"date_time >= '2011-01-28 17:00:00' & date_time <= '2011-01-29 01:00:00'\")\nsub_temp5 = df_sub.query(\"date_time > '2011-01-29 01:00:00' & date_time < '2011-02-08 17:00:00'\")\nsub_temp6 = df_sub.query(\"date_time >= '2011-02-08 17:00:00' & date_time <= '2011-02-11 20:00:00'\")\nsub_temp7 = df_sub.query(\"date_time > '2011-02-11 20:00:00'\")\n\nsub_temp2 =sub_temp2.reset_index(drop=True)\nsub_temp2.target_carbon_monoxide = pred_c1.yhat\nsub_temp2.target_nitrogen_oxides = pred_n1.yhat\nsub_temp4 =sub_temp4.reset_index(drop=True)\nsub_temp4.target_carbon_monoxide = pred_c2.yhat\nsub_temp4.target_nitrogen_oxides = pred_n2.yhat\nsub_temp6 =sub_temp6.reset_index(drop=True)\nsub_temp6.target_carbon_monoxide = pred_c3.yhat\nsub_temp6.target_nitrogen_oxides = pred_n3.yhat\n\nsubmission = pd.concat([sub_temp1, sub_temp2, sub_temp3, sub_temp4, sub_temp5, sub_temp6, sub_temp7], sort=False,axis=0)","72d027c8":"submission","cebbabe8":"submission.to_csv('pycaret_prophet_submission.csv',index=False)","f4419316":"### Predicted by catboost\n#### Carbon monoxide","68066dba":"## CatBoost and Prophet","7f29450f":"#### Nitrogen oxides","9cf2a8ec":"# Tabular Playground Series - Jul 2021\nContinued from [last time ](https:\/\/www.kaggle.com\/astashiro\/tps-jul2021-03add-features).","8ce18a0f":"#### Benzene","aeedafc9":"Since blending in PyCaretdid not cope well with the large number of features we added, so we decided to add only SEASON. When the sensor was off, we used the value predicted by PyCaret as the feature value and predicted by prophet.","56bb8e06":"#### Nitrogen oxides","d5bc9e63":"### Prophet\n\nUsing the carbon monoxide and nitrogen oxide values predicted by catboost as training data, prophet predicts the areas where the sensors are off.\n\n#### Carbon monoxide"}}