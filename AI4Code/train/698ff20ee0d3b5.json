{"cell_type":{"ab9b6ac7":"code","5192ba28":"code","9a29f485":"code","58ce5c1b":"code","aa3e4451":"code","d25f5cc5":"code","8080925b":"code","aa87882a":"code","293c6860":"code","897223ca":"code","13182971":"code","11cfc7c3":"code","638cd30d":"code","17f5f65a":"code","8b5ac187":"code","8f71968c":"code","48618419":"code","b88b4175":"code","753e73ab":"code","c9e21a8a":"code","0316e421":"code","28e7b7d5":"code","dba8c98c":"code","e5a57630":"code","39c4bc7e":"code","d0205b3d":"code","16d2e2b1":"code","7841dcd0":"code","eca3ece2":"code","228d4b15":"code","4c8c6b7c":"code","9797e1f2":"code","7ab4ee2e":"code","300a5628":"code","8edf6d77":"markdown","41f37866":"markdown","a4b657b3":"markdown","8271a1cd":"markdown","d1868800":"markdown","29abd0d2":"markdown","0fc3fd04":"markdown","f4bc3576":"markdown","555c667c":"markdown","d0d9224f":"markdown","c3ac5612":"markdown","5aa579de":"markdown","533c4b13":"markdown","be894955":"markdown","7ed44430":"markdown","8c840595":"markdown","a214adcb":"markdown","dab946e1":"markdown","1e71e8e6":"markdown","37751307":"markdown","bb393b8d":"markdown","3490af3f":"markdown","77b48aec":"markdown","af8b1d34":"markdown","98f2d375":"markdown","cf406247":"markdown","2e5f1705":"markdown","e18a6337":"markdown","2db8f878":"markdown","2624cc18":"markdown","5f92fd4c":"markdown","51e354f5":"markdown","bbce685e":"markdown","889a345f":"markdown","5abf0ed4":"markdown","8c5d4a3e":"markdown"},"source":{"ab9b6ac7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5192ba28":"import seaborn as sns #data visualization\n\nfrom sklearn.model_selection import train_test_split #data preprocessing to divide our data\n\nimport matplotlib.pyplot as plt #to plot the images of numbers\nfrom tensorflow.keras.models import Sequential, Model #for building neural network\nfrom tensorflow.keras.layers import Dense, Input #for layers of neural network\nfrom tensorflow.keras.utils import to_categorical \n#plot in the notebook itself\n%matplotlib inline \nsns.set(style = 'white', context = 'notebook', palette = 'deep')\nnp.random.seed(42)","9a29f485":"#using pandas.read_csv we read the csv data into a pandas dataframe\n\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\n","58ce5c1b":"#train.head() shows us the first five columns of a dataframe\ntrain.head()","aa3e4451":"\ny_train = train[\"label\"]\nx_train = train.drop(labels = [\"label\"], axis = 1)\n\n\n#sns.countplot will count the number of unique values in y_train and give us the distribution in the form of a graph\ngraph = sns.countplot(y_train)\n\ny_train.value_counts()","d25f5cc5":"print(type(x_train))\nprint(type(y_train))","8080925b":"x_train = x_train.to_numpy()\ny_train = y_train.to_numpy()\n\nprint(type(x_train))\nprint(type(y_train))","aa87882a":"#Data Normalization \nx_train = x_train.astype('float')\/255.","293c6860":"# Splitting our data into training and testing\nx_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size = 0.2, random_state = 42)","897223ca":"\n#Number of the samples we have\nx_train_size = len(x_train)\nx_val_size = len(x_val)\n\nprint(x_train_size)\nprint(x_val_size)","13182971":"\nx_train_noisy = x_train + np.random.rand(x_train_size, 784) * 0.9\nx_val_noisy = x_val + np.random.rand(x_val_size, 784) * 0.9\n\n#clipping the noise under 0 and 1 incase something went above\nx_train_noisy = np.clip(x_train_noisy, 0., 1.)\nx_val_noisy = np.clip(x_val_noisy, 0., 1.)","11cfc7c3":"def plot(x, p , labels = False):\n    plt.figure(figsize = (20,2))\n    for i in range(10):\n        plt.subplot(1, 10, i+1)\n        plt.imshow(x[i].reshape(28,28), cmap = 'binary') #reshaping the to conver 784 to 28x28 for an image plotting\n        plt.xticks([])\n        plt.yticks([])\n        if labels:\n            plt.xlabel(np.argmax(p[i]))\n    plt.show()\n    return\nplot(x_train, None)\n\n    ","638cd30d":"plot(x_train_noisy, None)","17f5f65a":"classifier = Sequential([\n    Dense(512, activation = 'relu', input_shape = (784, )),\n    Dense(512, activation = 'relu'),\n    Dense(256, activation = 'relu'),\n    Dense(10, activation = 'softmax')\n])\n\n#using spare_categorical_crossentropy because labels have not been one-hot encoded\nclassifier.compile(loss = 'sparse_categorical_crossentropy', optimizer = 'adam', metrics = 'accuracy')","8b5ac187":"classifier.summary()","8f71968c":"classifier.fit(x_train, y_train, epochs = 10, batch_size = 512)","48618419":"loss, acc = classifier.evaluate(x_val, y_val)","b88b4175":"loss, acc = classifier.evaluate(x_val_noisy, y_val)","753e73ab":"input_image = Input(shape = (784, ) )\n\nencoded = Dense(512, activation = 'relu')(input_image)\nencoded = Dense(512, activation = 'relu')(encoded)\nencoded = Dense(256, activation = 'relu')(encoded)\nencoded = Dense(256, activation = 'relu')(encoded)\nencoded = Dense(64,  activation = 'relu')(encoded)\n\ndecoded = Dense(512, activation = 'relu')(encoded)\ndecoded = Dense(784, activation = 'sigmoid')(decoded)\n\nautoencoder = Model(input_image, decoded)\nautoencoder.compile(loss= 'binary_crossentropy' , optimizer = 'adam')\nautoencoder.summary()","c9e21a8a":"#Lambda callback willl print the val_loss after each epoch\nfrom tensorflow.keras.callbacks import LambdaCallback\n\nautoencoder.fit(x_train_noisy, x_train,\n               epochs = 100, batch_size = 512,\n               validation_split = 0.2, verbose = False,\n               callbacks=[LambdaCallback(on_epoch_end=lambda e,l: print('{:.3f}'.format(l['val_loss']), end=' _ '))]\n               )\n\nprint(\"Training has finished !\")","0316e421":"preds = autoencoder.predict(x_val_noisy)\n","28e7b7d5":"plot(x_val, None)","dba8c98c":"plot(x_val_noisy, None)","e5a57630":"#plotting the denoised images\nplot(preds, None)","39c4bc7e":"loss, acc = classifier.evaluate(preds, y_val)\nprint(f\"Loss : {loss} \\nAccuracy : {acc}\")","d0205b3d":"noisy_image = Input(shape = (784, ))\nx = autoencoder(noisy_image)\ny = classifier(x)\n \n#combined model\ndenoise_and_classify = Model(noisy_image, y)","16d2e2b1":"final_preds = denoise_and_classify.predict(x_val_noisy)","7841dcd0":"plot(x_val_noisy, final_preds , True)","eca3ece2":"plot(x_val_noisy, to_categorical(y_val), True)","228d4b15":"test = test.to_numpy()\n\nplot(test, None)","4c8c6b7c":"test_preds = denoise_and_classify.predict(test)\n\nresults = np.argmax(test_preds, axis = 1)\n\nresults = pd.Series(results, name = 'Label')","9797e1f2":"#The test images don't have noise but just for fun lets see what the autoencoder does to them\ndenoise_test = autoencoder.predict(test)\nplot(denoise_test, None)\n","7ab4ee2e":"#Plotting test predictions\nplot(test,test_preds, True)","300a5628":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","8edf6d77":"# Combined Model","41f37866":"Constructing a very simple encoder and decoder network.\n* You can see that our bottleneck is the Dense layer with 64 units.\n* In the decoder network, the last layer gives us an output of 784 units using sigmoid activation. Sigmoid activation outputs either 1 or 0.\n* Basically this means that the network will decide either to keep the noisy pixel or not. The output of 784 units are the pixels for out denoised image","a4b657b3":"* We are going to artifically add noise to our data.\n* To do that we simpy add random data to our existing data.\n* Recall that we had earlier normalid out data to be  between 0 and 1 by diving it by 255. Therefore the noise added should also be between 0 and 1. To do that we simply multiply the random noise generated by 0.9\n* After adding the noise we clip the data to be between 0 and 1 again.\n","8271a1cd":"You can observe that autoencoder has somehow tried to *enhance* the images.","d1868800":"Now we will use the autoencoder to produce denoised images from noisy ones present in x_val","29abd0d2":"See the how the noise has been introduced to our dataset","0fc3fd04":"# Building an Autoencoder","f4bc3576":"**Defining a function to plot the images of numbers**\n","555c667c":"# Adding Noise","d0d9224f":"Constructing a very simple neural network to classify our images.","c3ac5612":"**Understanding how to process data for our aim**\n1. Our aim is to predict the class of an image, therefore we are going to store the labels column from the datafram in y_train.\n2. To store x_train we will first drop the \"label\" column from the train dataframe and then proceed cast the dataframe to a new variable x_train\n","5aa579de":"The classifier acheives good accuracy on images with no noise. But what about images with noise in them? The follwoing cell will tell","533c4b13":"# What are Autoencoders?","be894955":"# **Loading Data into Train and Test**","7ed44430":"Plotting predicted class along with the images","8c840595":"Making predictions using the combined network","a214adcb":"# **Basics of Image Denoising using Autoencoders**","dab946e1":"Hi :) \nThis is my first notebook that I prepared to share and help others learn.\n\nI have recently done some courses and I am putting my knowledge to practical use !!!\n\nOpen to suggestions !!!\nHope you like it.\n\nPlease note that I have focused on denoising and not really on analysis of results etc. using confusion matrix and other techniques\n\nThis notebook is not aimed at getting the best results, more fine tuning of the networks will definitely improve the results :)\n\nThis notebook has been coded using TensorFlow 2.0 and Python 3","1e71e8e6":"* Autoencoders are unsupervised neural netowrks which learn how to encode data and then reconstruct the data from reduced encodings to a representation as close to the original data.\n* The consist of and **encoder**, **bottleneck**,** decoder** and **reconstruction loss**.\n* As the name suggests, first the encoder learns to encode the data into a *compressed representation*.\n* The bottleneck is basically the smallest encoded representation of the data.\n* The decoder network learns how to *reconstruct the data* from the encoded network.\n* The reconstruction loss is a measure of how well the image is being reconstructed and how close the output is to the original input.","37751307":"# Denoised Images","bb393b8d":"Please note that data in test does not contain noise, for submitting and showing that our model works on test data too, we are making predictions using the complete model we have built","3490af3f":"Seperate models for noise reduction and classification are not very practical, hence we are going to combine them into single unit using the Model class.","77b48aec":"Plotting actual class with images","af8b1d34":"1. From above we observe that data is stored such a way that a row represents one image and the pixels of the image are stored from pixel0 to pixel783. Which means that there are 784 pixels i.e image size is of 28x28 pixels. \n2. The label column represents the class of the image if it is a one, two, three ... or so on. We have a total of 10 classes (0-9)","98f2d375":"# Training Autoencoder","cf406247":"* To learn more about autoencoders you can visit [this](http:\/\/ufldl.stanford.edu\/tutorial\/unsupervised\/Autoencoders\/)\n* I would suggest going through the above website before proceeding further to get a better understanding of the code. ","2e5f1705":"# Some data analysis","e18a6337":"* As you can see the accuracy of the model decreased manifold because of noise. The model is confused about making predictions because noise has rendered it unusable. Real world data is like that, there is lot of noise in images and if we want to make neural networks and deploy them in making predictions, then they need to be robust to noise too. \n* This is where autoencoders come into play.","2db8f878":"We see that x_train is in the form of a pandas Dataframe and y_train in the form of pandas series, We are going to convert it into numpy to introduce noise in it later.","2624cc18":"Proceeding to train the classifier","5f92fd4c":"# Building and Training a Classifier","51e354f5":"# Data Preprocessing","bbce685e":"# **Importing Libraries**","889a345f":"![](https:\/\/www.jeremyjordan.me\/content\/images\/2018\/03\/Screen-Shot-2018-03-09-at-10.20.44-AM.png)","5abf0ed4":"Earlier the accuracy was around 0.2 on images with noise.\nAs you can see our classifier performs well on denoised images. ","8c5d4a3e":"Making predinctions on our test data. First we convert it into a numpy array"}}