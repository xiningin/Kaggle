{"cell_type":{"80be5123":"code","992cb9a1":"code","864779b9":"code","12a85786":"code","0d1053e1":"code","a211bfda":"code","be63d654":"code","5317c176":"code","8c823926":"code","2f9e09e7":"code","04779fcf":"code","06b6483f":"code","dc6e98cd":"code","f94eac47":"code","c8c03c6b":"code","065759a4":"code","09d8f4d9":"code","dae8a63d":"code","93911046":"code","bfa3a588":"code","5d8c60db":"code","a4a57d20":"code","ccbd2684":"code","ec64851f":"code","afd2d975":"code","b59a376d":"code","2d16b2d8":"code","0f59bff9":"code","68040861":"code","e8ec0765":"code","c1081b77":"code","edf7c565":"code","32926fb6":"code","68f57dae":"code","c2c9e489":"code","3fc2a690":"code","146f92e8":"code","0e25b30d":"code","3f749895":"code","02c9296a":"code","34577f12":"code","e9fa99fc":"code","dbfdb532":"code","1dd399e1":"code","e65e078f":"code","2bc5b557":"code","9563a257":"code","5e033e91":"code","df7d3564":"code","fae14055":"code","b2144e6c":"markdown","f2b279a8":"markdown","8c78345a":"markdown","80d04c0b":"markdown","33da053b":"markdown","36728114":"markdown","64ed7286":"markdown","dddc505d":"markdown","e8e85e63":"markdown","94f279bf":"markdown","cfcbbfff":"markdown","f711b684":"markdown","b57e1529":"markdown","def0dec7":"markdown","60574d66":"markdown","71294daa":"markdown"},"source":{"80be5123":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","992cb9a1":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\nprint(\"train set : \",train.shape)\nprint(\"test set : \",test.shape)","864779b9":"train.head()","12a85786":"test.head()","0d1053e1":"data = []\nfor col in test.columns:\n    # parse column names\n    if col not in ['id', 'target']:\n        col_split_list = col.split(\"-\")\n        \n        # Initialize keep to True\n#         keep = True\n    \n        # Create dictionary that contains all the metadata for each columns\n        col_dict = {\n            'feature_name' : col,\n            'col_name_1' : col_split_list[0],\n            'col_name_2' : col_split_list[1],\n            'col_name_3' : col_split_list[2],\n            'col_name_4' : col_split_list[3]\n#             'keep' : keep\n        }\n        data.append(col_dict)\n    \n# meta = pd.DataFrame(data, columns = ['feature_name', 'col_name_1', 'col_name_2', 'col_name_3', 'col_name_4', 'keep'])\n    \nmeta = pd.DataFrame(data, columns = ['feature_name', 'col_name_1', 'col_name_2', 'col_name_3', 'col_name_4'])\nmeta.set_index('feature_name', inplace=True)","a211bfda":"meta","be63d654":"print('length of unique values of each part of column names:', \n      '\\n', 'col_name_1 :',len(meta.col_name_1.unique()), \n      '\\n', 'col_name_2 :',len(meta.col_name_2.unique()), \n      '\\n', 'col_name_3 :',len(meta.col_name_3.unique()), \n      '\\n', 'col_name_4 :',len(meta.col_name_4.unique()))","5317c176":"meta.col_name_1.value_counts().head(10)","8c823926":"meta.col_name_2.value_counts().head(10)","2f9e09e7":"meta.col_name_3.value_counts().head(10)","04779fcf":"meta.col_name_4.value_counts().head(15)","06b6483f":"meta['col_name_1'].unique()","dc6e98cd":"meta['col_name_2'].unique()","f94eac47":"meta['col_name_3'].unique()","c8c03c6b":"meta['col_name_4'].unique()","065759a4":"meta[(meta.col_name_4 == 'important')]","09d8f4d9":"pd.DataFrame({'count': meta.groupby(['col_name_4', 'col_name_1'])['col_name_4'].size()}).reset_index()","dae8a63d":"meta[(meta.col_name_4 == 'important')]","93911046":"train_4_important = train[['ugly-tangerine-chihuahua-important','muggy-turquoise-donkey-important'] ]","bfa3a588":"temp = meta[(meta.col_name_4 == 'important')].index.tolist() + ['target']","5d8c60db":"train_4_important = train[temp]","a4a57d20":"train_4_important.shape","ccbd2684":"train_4_important.head()","ec64851f":"sns.countplot(train['target'], palette='Set3')","afd2d975":"feats = [f for f in train.columns if f not in ['id','target']]\ndef plot_feature_distribution(df1, df2, label1, label2, features, row, col):\n    i = 0\n    sns.set_style('whitegrid')\n    plt.figure()\n    ratio = int(row\/col\/2)\n    fig, ax = plt.subplots(row,col,figsize=(15,15*(ratio+1)))\n\n    for feature in features:\n        i += 1\n        plt.subplot(row,col,i)\n        sns.distplot(df1[feature], hist=False,label=label1)\n        sns.distplot(df2[feature], hist=False,label=label2)\n        plt.xlabel(feature, fontsize=9)\n        locs, labels = plt.xticks()\n        plt.tick_params(axis='x', which='major', labelsize=6, pad=-6)\n        plt.tick_params(axis='y', which='major', labelsize=6)\n    plt.show();","b59a376d":"t0 = train[feats].loc[train['target'] == 0]\nt1 = train[feats].loc[train['target'] == 1]\nfeatures = train[feats].columns.values\nplot_feature_distribution(t0, t1, '0', '1', features, 64,4)   ","2d16b2d8":"meta[(meta.col_name_1 == 'wheezy')]","0f59bff9":"train[meta[(meta.col_name_1 == 'wheezy')].index].describe()","68040861":"test[meta[(meta.col_name_1 == 'wheezy')].index].describe()","e8ec0765":"t0 = train[feats].loc[train['target'] == 0]\nt1 = train[feats].loc[train['target'] == 1]\nfeatures = meta[(meta.col_name_1 == 'wheezy')].index\nplot_feature_distribution(t0, t1, '0', '1', features,3,2) ","c1081b77":"meta[(meta.col_name_2 == 'copper')]","edf7c565":"train[meta[(meta.col_name_2 == 'copper')].index].describe()","32926fb6":"test[meta[(meta.col_name_2 == 'copper')].index].describe()","68f57dae":"t0 = train[feats].loc[train['target'] == 0]\nt1 = train[feats].loc[train['target'] == 1]\nfeatures = meta[(meta.col_name_2 == 'copper')].index\nplot_feature_distribution(t0, t1, '0', '1', features,3,2) ","c2c9e489":"meta[(meta.col_name_3 == 'turtle')]","3fc2a690":"meta[(meta.col_name_4 == 'magic')]","146f92e8":"meta[(meta.col_name_4 == 'important')]","0e25b30d":"train[meta[(meta.col_name_4 == 'important')].index].describe()","3f749895":"test[meta[(meta.col_name_4 == 'important')].index].describe()","02c9296a":"t0 = train[feats].loc[train['target'] == 0]\nt1 = train[feats].loc[train['target'] == 1]\nfeatures = meta[(meta.col_name_4 == 'important')].index\nplot_feature_distribution(t0, t1, '0', '1', features,7,3) ","34577f12":"meta[(meta.col_name_4 == 'hint')]","e9fa99fc":"train[meta[(meta.col_name_4 == 'hint')].index].describe()","dbfdb532":"test[meta[(meta.col_name_4 == 'hint')].index].describe()","1dd399e1":"t0 = train[feats].loc[train['target'] == 0]\nt1 = train[feats].loc[train['target'] == 1]\nfeatures = meta[(meta.col_name_4 == 'hint')].index\nplot_feature_distribution(t0, t1, '0', '1', features,4,3) ","e65e078f":"plt.figure(figsize = [16,9])\nsns.heatmap(train.corr())","2bc5b557":"sns.heatmap(train[meta[(meta.col_name_1 == 'wheezy')].index].corr())","9563a257":"color = sns.color_palette()\nplt.figure(figsize=(6,6))\nplt.scatter(train[feats[0]], train[feats[1]], c=train.target, alpha = 0.6)","5e033e91":"color = sns.color_palette()\nplt.figure(figsize=(6,6))\nplt.scatter(train['wheezy-copper-turtle-magic'], train['wheezy-harlequin-earwig-gaussian'], c=train.target, alpha = 0.6)","df7d3564":"plt.figure(figsize=(6,6))\nplt.scatter(train['wheezy-harlequin-earwig-gaussian'], train['wheezy-red-iguana-entropy'], c=train.target)","fae14055":"plt.figure(figsize=(6,6))\nplt.scatter(train['wheezy-copper-turtle-magic'], train['wheezy-red-iguana-entropy'], c=train.target, alpha = 0.6)","b2144e6c":"# Make metadata of the column names \n- I got this idea to make a metadata from this kernel : https:\/\/www.kaggle.com\/bertcarremans\/data-preparation-exploration","f2b279a8":"# Target distribution of group of column names","8c78345a":"I will update this kernel regularly! \n\n\nCurrently this kernel contains:\n1. Defining the metadata of silly column names\n    - useful to select specific variables for analysis, visualization, modelling etc.\n2. Distributions of target 0,1 depending on columns\n    - Discovers weird column : 'wheezy-copper-turtle-magic'\n3. Look over statistics of the other columns sharing partial name of 'wheezy-copper-turtle-magic'","80d04c0b":"- statistics with columns which col_name_2==copper","33da053b":"# unique list of each column name parts","36728114":"- statistics of the columns starting with 'wheezy'","64ed7286":"# Example to extract each type of columns","dddc505d":"- 0,1 distribution plots of train data for each column\n- code from : https:\/\/www.kaggle.com\/senkin13\/eda-starter, figsize modified","e8e85e63":"- It seems like the magic feature is categorical","94f279bf":"- notice that 'wheezy-copper-turtle-magic' shows different pattern from other features","cfcbbfff":"## Target distribution","f711b684":"# Visualization","b57e1529":"## heatmap","def0dec7":"- Only one column has 3rd part ==turtle or 4th part ==magic ","60574d66":"## Scatter Plots by features","71294daa":"# unique value counts of each column name parts"}}