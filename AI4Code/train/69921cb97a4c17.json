{"cell_type":{"32c47b59":"code","8f208eb6":"code","87c0d984":"code","2e94dc46":"code","623a7777":"code","4d73e567":"code","cd0a09b6":"code","08ab6857":"code","12559606":"code","4fda7ba0":"code","5db9cacb":"code","6a27d6a8":"code","8594b1a9":"code","86bcb1c2":"code","ac9bae22":"code","e91e74ab":"code","e4846847":"code","46336547":"code","17f34786":"code","f36b6eab":"code","4f931fb9":"code","a7a711ec":"code","c80ada91":"code","5a806f61":"code","11bca43a":"code","939a0f41":"code","ac9d339b":"code","d3a90d8f":"code","a1f8f501":"code","9fd6f2ff":"code","adddb2b8":"code","e6595fd5":"code","ece5eb08":"code","6267df6f":"code","aacdff34":"code","e6470a1b":"code","89242cf5":"code","da7abd10":"code","73edd861":"code","18687b16":"code","47e653eb":"code","8de81b3c":"code","57e400af":"code","ab492e60":"code","c90ebe51":"code","f0e7c65e":"code","a3b864ea":"code","db9ae4ff":"code","f68a3549":"code","d74945e5":"code","4b6b07b8":"code","df8d6214":"code","4d437679":"code","d513a165":"code","b9cd27e2":"code","a6a3d14a":"code","ec5661b9":"code","50099ac3":"code","1635141d":"code","b5a16c74":"code","1963f5a6":"markdown","74ae3761":"markdown","63918bd3":"markdown","81822a15":"markdown","8c38ecfa":"markdown","883e9d9d":"markdown","5f84cf35":"markdown","99a84559":"markdown","6583ed9b":"markdown","7d4052d3":"markdown","adf47a13":"markdown","70437c80":"markdown","56b02866":"markdown","51c5eeb7":"markdown","d557b7b4":"markdown","8e6a54f7":"markdown","5f77641a":"markdown","06cdb6f0":"markdown","1ecc22b7":"markdown","91099571":"markdown","0a6772a1":"markdown","9a072023":"markdown","5bfd4c92":"markdown","21db7d79":"markdown","e6ff4c01":"markdown","e0ea3a05":"markdown","5ff1da40":"markdown","99737953":"markdown","734f763d":"markdown","c3679bf7":"markdown","abe9d91f":"markdown","b27e4a31":"markdown","779682fa":"markdown"},"source":{"32c47b59":"# import libraries \nimport pandas as pd\nimport numpy as np\nimport seaborn as sb\nimport matplotlib.pyplot as plt ","8f208eb6":"data = pd.read_csv(\"\/kaggle\/input\/aviation-accident-database-synopses\/AviationData.csv\",engine='python')  # engine for avoiding unicode error \n# pick relavant data \ndata = data[['Investigation.Type','Aircraft.Damage','Aircraft.Category',\n            'Number.of.Engines','Engine.Type','Purpose.of.Flight',\n            'Total.Fatal.Injuries','Total.Serious.Injuries','Total.Minor.Injuries',\n            'Total.Uninjured','Weather.Condition','Broad.Phase.of.Flight','Event.Date']]\n\ndata.head()","87c0d984":"data.dtypes","2e94dc46":"data.shape","623a7777":"data[data['Total.Fatal.Injuries']==0]","4d73e567":"data = data[data['Total.Fatal.Injuries'].notna()]\ndata","cd0a09b6":"def check_null_values(data):\n    print('=====Number of Missing Values for each Column=====')\n    for col in data.columns:\n        print(col,'=',data[col].isnull().sum())\n\ncheck_null_values(data)","08ab6857":"data['Total.Uninjured'].fillna(data['Total.Uninjured'].mean(), inplace=True)\ndata['Total.Minor.Injuries'].fillna(data['Total.Minor.Injuries'].mean(), inplace=True)\ndata['Total.Serious.Injuries'].fillna(data['Total.Serious.Injuries'].mean(), inplace=True)\ndata['Number.of.Engines'].fillna(data['Number.of.Engines'].mean(), inplace=True)","12559606":"data['Aircraft.Category'].fillna('Unknown',inplace=True)\n\ndata['Engine.Type'].fillna('Others',inplace=True)\ndata['Engine.Type'].replace(['None','Unknown'],'Others')\n\ndata['Purpose.of.Flight'].fillna('Unknown',inplace=True)\ndata['Weather.Condition'].fillna('UNK',inplace=True)\ndata['Broad.Phase.of.Flight'].fillna('UNKNOWN',inplace=True)","4fda7ba0":"# data['Investigation.Type'] = data['Investigation.Type'].astype('category').cat.codes\n# data['Aircraft.Damage'] = data['Aircraft.Damage'].astype('category').cat.codes\n# data['Aircraft.Category'] = data['Aircraft.Category'].astype('category').cat.codes\n# data['Engine.Type'] = data['Engine.Type'].astype('category').cat.codes\n# data['Purpose.of.Flight'] = data['Purpose.of.Flight'].astype('category').cat.codes\n# data['Weather.Condition'] = data['Weather.Condition'].astype('category').cat.codes\n# data['Broad.Phase.of.Flight'] = data['Broad.Phase.of.Flight'].astype('category').cat.codes","5db9cacb":"data['year'] = [int(i.split('-')[0]) for i in data['Event.Date']]\ndata['month'] = [int(i.split('-')[1]) for i in data['Event.Date']]\ndata['day'] = [int(i.split('-')[2]) for i in data['Event.Date']]\ndel data['Event.Date']","6a27d6a8":"data  # cleaned data set ","8594b1a9":"check_null_values(data)","86bcb1c2":"data['Total.Fatal.Injuries'].describe()","ac9bae22":"f,axes = plt.subplots(1,1,figsize=(20,10))\nsb.boxplot(x=data['Total.Fatal.Injuries'], ax=axes)","e91e74ab":"data['ratio'] = data['Total.Fatal.Injuries']\/(data['Total.Uninjured']+\n                                             data['Total.Serious.Injuries']+\n                                             data['Total.Minor.Injuries']+\n                                             data['Total.Fatal.Injuries'])","e4846847":"data[data['ratio'].isnull()]","46336547":"data = data[data['ratio'].notna()]","17f34786":"data['ratio'].describe()","f36b6eab":"f,axes = plt.subplots(1,1,figsize=(20,10))\nsb.boxplot(x=data['ratio'], ax=axes)","4f931fb9":"data['Total.Uninjured'].describe()","a7a711ec":"f,axes = plt.subplots(1,1,figsize=(40,10))\nsb.boxplot(x=data['Total.Uninjured'], ax=axes)","c80ada91":"sb.jointplot(x='Total.Uninjured',y='Total.Fatal.Injuries',data=data)","5a806f61":"data['Total.Serious.Injuries'].describe()","11bca43a":"f,axes = plt.subplots(1,1,figsize=(40,10))\nsb.boxplot(x='Total.Serious.Injuries',data=data, ax=axes)","939a0f41":"sb.jointplot(x='Total.Serious.Injuries',y='Total.Fatal.Injuries',data=data)","ac9d339b":"data['Total.Minor.Injuries'].describe()","d3a90d8f":"f,axes = plt.subplots(1,1,figsize=(40,10))\nsb.boxplot(x='Total.Minor.Injuries',data=data, ax=axes)","a1f8f501":"sb.jointplot(x='Total.Minor.Injuries',y='Total.Fatal.Injuries',data=data)","9fd6f2ff":"data['Investigation.Type'].value_counts()","adddb2b8":"sb.catplot(x='Investigation.Type',y='Total.Fatal.Injuries',data=data)","e6595fd5":"data['Aircraft.Damage'].value_counts()","ece5eb08":"sb.catplot(x='Aircraft.Damage',y='Total.Fatal.Injuries',data=data)","6267df6f":"data['Aircraft.Category'].value_counts()","aacdff34":"f,axes = plt.subplots(1,1,figsize=(30,5))\nsb.catplot(x='Aircraft.Category',y='Total.Fatal.Injuries',data=data,ax=axes)","e6470a1b":"data['Aircraft.Category'].value_counts()","89242cf5":"f,axes = plt.subplots(1,1,figsize=(25,10))\nsb.catplot(x='Engine.Type',y='Total.Fatal.Injuries',data=data,ax=axes)","da7abd10":"data['Purpose.of.Flight'].value_counts()","73edd861":"f,axes = plt.subplots(1,1,figsize=(30,5))\nsb.catplot(x='Purpose.of.Flight',y='Total.Fatal.Injuries',data=data,ax=axes)","18687b16":"data['Weather.Condition'].value_counts()","47e653eb":"sb.catplot(x='Weather.Condition',y='Total.Fatal.Injuries',data=data)","8de81b3c":"data['Broad.Phase.of.Flight'].value_counts()","57e400af":"f,axes = plt.subplots(1,1,figsize=(30,5))\nsb.catplot(x='Broad.Phase.of.Flight',y='Total.Fatal.Injuries',data=data,ax=axes)","ab492e60":"sb.set(style=\"darkgrid\")\nplt.subplot(211)\ng = sb.countplot(x=\"year\", palette=\"GnBu_d\", data=data,order=np.arange(1982,2020))\na = plt.setp(g.get_xticklabels(), rotation=90)","c90ebe51":"data.corr()","f0e7c65e":"def plot_correlation_map( df ):\n    corr = df.corr()\n    f,axes = plt.subplots(figsize=(12,10))\n    g = sb.heatmap(corr,annot=True,ax=axes)\n    bottom, top = g.get_ylim()\n    g.set_ylim(bottom+0.5,top-0.5)    # fix annotation not centered \n\n    \nplot_correlation_map(data)","a3b864ea":"# integer encoding \ndata['Investigation.Type'] = data['Investigation.Type'].astype('category').cat.codes\ndata['Aircraft.Damage'] = data['Aircraft.Damage'].astype('category').cat.codes\ndata['Aircraft.Category'] = data['Aircraft.Category'].astype('category').cat.codes\ndata['Engine.Type'] = data['Engine.Type'].astype('category').cat.codes\ndata['Purpose.of.Flight'] = data['Purpose.of.Flight'].astype('category').cat.codes\ndata['Weather.Condition'] = data['Weather.Condition'].astype('category').cat.codes\ndata['Broad.Phase.of.Flight'] = data['Broad.Phase.of.Flight'].astype('category').cat.codes","db9ae4ff":"# prepare pre\nX = data[['Investigation.Type','Aircraft.Damage','Aircraft.Category',\n            'Number.of.Engines','Engine.Type','Purpose.of.Flight',\n            'Total.Serious.Injuries','Total.Minor.Injuries',\n            'Total.Uninjured','Weather.Condition','Broad.Phase.of.Flight',\n            'year','month','day']]\n\ny = data['ratio']\n# split data \nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.25,shuffle=True)\n\nprint('Training Features Shape:', X_train.shape)\nprint('Training Labels Shape:', y_train.shape)\nprint('Testing Features Shape:', X_test.shape)\nprint('Testing Labels Shape:', y_test.shape)","f68a3549":"# Import LinearRegression model from Scikit-Learn\nfrom sklearn.linear_model import LinearRegression\n\n\n# Linear Regression using Train Data\nlinreg = LinearRegression()         # create the linear regression object\nlinreg.fit(X_train, y_train)        # train the linear regression model\n\n# Coefficients of the Linear Regression line\nprint('Intercept of Regression \\t: b = ', linreg.intercept_)\nprint('Coefficients of Regression \\t: a = ', linreg.coef_)\nprint()\n# Print the Coefficients against Predictors\npd.DataFrame(list(zip(X_train.columns, linreg.coef_)), columns = [\"Predictors\", \"Coefficients\"])","d74945e5":"# Predict the Total values from Predictors\ny_train_pred = linreg.predict(X_train)\ny_test_pred = linreg.predict(X_test)\n\n# Plot the Predictions vs the True values\nf, axes = plt.subplots(1, 2, figsize=(24, 12))\naxes[0].scatter(y_train, y_train_pred, color = \"blue\")\naxes[0].plot(y_train, y_train, 'r-', linewidth = 1)\naxes[0].set_xlabel(\"True values of the Response Variable (Train)\")\naxes[0].set_ylabel(\"Predicted values of the Response Variable (Train)\")\naxes[1].scatter(y_test, y_test_pred, color = \"green\")\naxes[1].plot(y_test, y_test, 'r-', linewidth = 1)\naxes[1].set_xlabel(\"True values of the Response Variable (Test)\")\naxes[1].set_ylabel(\"Predicted values of the Response Variable (Test)\")\nplt.show()","4b6b07b8":"from math import sqrt\ndef evaluate(predicted,actual):\n    size = actual.size\n    mse = ((predicted-actual)**2).sum()\/size\n    print('MSE =',mse)\n    rmse = sqrt(mse)\n    print('RMSE =',rmse)\n    mae = abs(predicted-actual).sum()\/size\n    print('MAE =',mae)\n    var = ((actual-np.mean(actual))**2).sum()\/size\n    R2 = 1-mse\/var\n    print('R^2 =',R2)\n\nprint('Train Set')\nevaluate(linreg.predict(X_train),y_train)\nprint('Test Set')\nevaluate(linreg.predict(X_test),y_test)","df8d6214":"# base model \nfrom sklearn.ensemble import RandomForestRegressor\n\nbase = RandomForestRegressor(n_estimators=100)\nbase.fit(X_train,y_train)","4d437679":"print('Train Set')\nevaluate(base.predict(X_train),y_train)\nprint('Test Set')\nevaluate(base.predict(X_test),y_test)","d513a165":"# Randomized Search to find optimal parameters \nfrom sklearn.model_selection import RandomizedSearchCV\n\n\nrf = RandomForestRegressor()\n\nparam_grid = {\n    'min_samples_split':[2,5,7],\n    'max_depth':[5,10,15,20],\n    'max_features':['auto','sqrt','log2'],\n    'min_samples_leaf': [2, 3, 4],\n    'n_estimators': [100, 500, 1000, 1500]\n}\n\nsearch = RandomizedSearchCV(estimator=rf,param_distributions=param_grid,cv=3,verbose=2,n_jobs = -1)\nsearch.fit(X_train, y_train)","b9cd27e2":"search.best_params_","a6a3d14a":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators=1500, bootstrap=True,\n                           max_features='auto', min_samples_split=5,\n                           min_samples_leaf=2, max_depth=15)\n# training \nrf.fit(X_train,y_train)","ec5661b9":"print('Train Set')\nevaluate(rf.predict(X_train),y_train)\nprint('Test Set')\nevaluate(rf.predict(X_test),y_test)","50099ac3":"from sklearn.tree import export_graphviz\nimport graphviz\nimport os \n\ntreedot = export_graphviz(rf.estimators_[5],                                      # the model\n                          feature_names = X_train.columns,          # the features \n                          filled = True,                                # node colors\n                          rounded = False,                               # make pretty\n                          special_characters = True)                    # postscript\n\ngraphviz.Source(treedot)","1635141d":"importances = list(rf.feature_importances_)\nfeature_importances = [(feature, round(importance, 2)) for feature, importance in zip(X_train.columns, importances)]\nfeature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n[print('Variable: {} Importance: {}'.format(*pair)) for pair in feature_importances];","b5a16c74":"x_values = list(range(len(importances)))\nplt.bar(x_values, importances, orientation = 'vertical')\nplt.xticks(x_values, X_train.columns, rotation='vertical')\nplt.ylabel('Importance'); \nplt.xlabel('Variable'); \nplt.title('Variable Importances');","1963f5a6":"## Phase ","74ae3761":"# Data Preparation ","63918bd3":"# Pratical Motivation\nUse variables to predict the fatal percentage of an accident or incident. \nIt will be formulated as the regression problem with both numerical value and categorical variables.","81822a15":"---\n###  Correlation ","8c38ecfa":"### RadomizedSearch","883e9d9d":"## Flight Purpose ","5f84cf35":"## Uninjured Case ","99a84559":"### Visualization and Performace Evaluation  ","6583ed9b":"## Weather Condition ","7d4052d3":"### Performace Evaluation ","adf47a13":"### Encoding Categorical Variables \n(To present data exploration more intuitively, encoding will be done after that.)","70437c80":"For numerical variables as predicators, replace missing values by mean ","56b02866":"### Interpretation \n#### Visualization ","51c5eeb7":"### Transform the Variable into Fatal Percentage ","d557b7b4":"## Mild Injuries","8e6a54f7":"# Algorithm Optimization and Machine Learning ","5f77641a":"### Result of Data Clearning ","06cdb6f0":"# Explore Analysis \n## Variable to Predict: Fatal Injuries \nThere are many outliers, and they prove to affect the model's result.\n**What causes such outliers?** \n+ Serious accidents\/incidents are rare, and the data set is imbalance. \n+ Different types of aircrafts have different number of passengers","1ecc22b7":"## Investigation Type ","91099571":"## Time ","0a6772a1":"## Data Cleaning \n### Missing Values \nFor the label variable, delete the rows with unknown value","9a072023":"## Serious Injured Case ","5bfd4c92":"### Improved Model Training ","21db7d79":"## Random Forest ","e6ff4c01":"## Linear Regression ","e0ea3a05":"## Aircraft Damage ","5ff1da40":"Records with `ratio==NaN` are abnormal, i.e. all injury cases are 0, and too many unknown columns. Hence, they should be deleted. ","99737953":"### Reformat Date  ","734f763d":"## Prepare date set for Cross-Validation ","c3679bf7":"## Aircraft Category","abe9d91f":"For categorical variables, treat missing values as a separate catogory","b27e4a31":"## Engine Type ","779682fa":"#### Variable Importance "}}