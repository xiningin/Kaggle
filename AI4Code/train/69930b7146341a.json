{"cell_type":{"74b2f10b":"code","dbc276b0":"code","5c543944":"code","446b549a":"code","8e1915bb":"code","9486dc6f":"code","5826c9b6":"code","f8637c98":"code","d05007e3":"code","2fb871f4":"code","0d3ee874":"code","0e61af75":"code","d598e8ea":"code","a6fd8b1e":"code","979bef33":"code","ba49491b":"code","f0b37ccd":"code","9dad0c74":"code","da00e695":"code","60377031":"code","a381eea0":"code","21984e34":"code","9a5e68a6":"code","aa7cae7f":"code","c3792eaf":"code","a278c492":"code","04e4cb5c":"code","4f677932":"code","52a79802":"code","f5e4e57a":"code","2a530f7b":"code","bf83e447":"code","2f2bc0ba":"code","decc25a6":"markdown","7cdce44f":"markdown","440d4e3a":"markdown","b7661908":"markdown","b4e426d5":"markdown","8d44b399":"markdown","4859da5b":"markdown","5156bc5e":"markdown","2c1f0a3d":"markdown","c2b693b4":"markdown","cf642b61":"markdown","909a8a89":"markdown","be8820ed":"markdown","e99884e0":"markdown","ea5889d0":"markdown","653fb984":"markdown","4816465d":"markdown","8cda593b":"markdown","85f617de":"markdown","fdb0ec40":"markdown","5a74af2b":"markdown","6a11a60f":"markdown"},"source":{"74b2f10b":"import pandas as pd\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n","dbc276b0":"train.head(10)","5c543944":"train['Pclass'].value_counts()","446b549a":"print (train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean())","8e1915bb":"print (train[['Sex', 'Survived']].groupby(['Sex'], as_index = False).mean())","9486dc6f":"import seaborn as sns\nsns.set(style=\"whitegrid\")\n\n# Draw a nested barplot to show survival for class and sex\ng = sns.catplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=train,\n                height=6, kind=\"bar\", palette=\"muted\")\ng.despine(left=True)\ng.set_ylabels(\"survival probability\")","5826c9b6":"train['Age'].hist(bins=60)","f8637c98":"import matplotlib.pyplot as plt\nf = sns.FacetGrid(train, col='Survived')\nf.map(plt.hist, 'Age', bins=20)","d05007e3":"train['SibSp'].value_counts()","2fb871f4":"print (train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean())","0d3ee874":"sns.catplot( x = 'SibSp', y = 'Survived',order=[0,1,2,3,4,5,6], height=4, kind = \"point\", data = train)","0e61af75":"train['Parch'].value_counts()","d598e8ea":"print (train[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean())","a6fd8b1e":"sns.catplot( x = 'Parch', y = 'Survived',order=[0,1,2,3,4,5,6], height=4, kind = \"point\", data = train)","979bef33":"train['FareBand'] = pd.qcut(train['Fare'], 4)\ntrain[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)","ba49491b":"train['Embarked'].value_counts()","f0b37ccd":"print (train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean())","9dad0c74":"sns.set(style=\"whitegrid\")\nh = sns.catplot(x=\"Embarked\", y=\"Survived\", data=train,\n                height=4, kind=\"bar\", palette=\"muted\")\nh.despine(left=True)\nh.set_ylabels(\"survival probability\")","da00e695":"train = train.drop(['Name', 'Ticket', 'Cabin'],axis=1)\ntest = test.drop(['Name', 'Ticket','Cabin'],axis=1)\ntrain.head(10)","60377031":"for df in [train,test]:\n    df['Sex_binary']=df['Sex'].map({'male':1,'female':0})","a381eea0":"train['Embarked'] = train['Embarked'].fillna('S')\ntest['Embarked'] = test['Embarked'].fillna('S')","21984e34":"for df in [train,test]:\n    df['Embarked_spots']=df['Embarked'].map({'S':0,'C':1, 'Q':2})","9a5e68a6":"import numpy as np\n\naverage_age_train = train[\"Age\"].mean()\nstd_age_train = train[\"Age\"].std()\ncount_nan_age_train = train[\"Age\"].isnull().sum()\n\naverage_age_test = test[\"Age\"].mean()\nstd_age_test = test[\"Age\"].std()\ncount_nan_age_test = test[\"Age\"].isnull().sum()\n\nrand_1 = np.random.randint(average_age_train - std_age_train, average_age_train + std_age_train, size = count_nan_age_train)\nrand_2 = np.random.randint(average_age_test - std_age_test, average_age_test + std_age_test, size = count_nan_age_test)\n\ntrain[\"Age\"][np.isnan(train[\"Age\"])] = rand_1\ntest[\"Age\"][np.isnan(test[\"Age\"])] = rand_2\n\ntrain['Age'] = train['Age'].astype(int)\ntest['Age'] = test['Age'].astype(int)","aa7cae7f":"test[\"Fare\"].fillna(test[\"Fare\"].median(), inplace=True)","c3792eaf":"train.head(10)","a278c492":"test.head(10)","04e4cb5c":"features = ['Pclass','Age','Sex_binary','SibSp','Parch','Fare', 'Embarked_spots']\ntarget = 'Survived'","4f677932":"train[features].head(5)","52a79802":"train[target].head(3).values","f5e4e57a":"from sklearn.tree import DecisionTreeClassifier\n\nclf= DecisionTreeClassifier(max_depth=3,min_samples_leaf=2) \nclf.fit(train[features], train[target])\n\npredictions = clf.predict(test[features])","2a530f7b":"predictions","bf83e447":"submission = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':predictions})\nsubmission.head()","2f2bc0ba":"filename = 'Titanic Predictions 8.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","decc25a6":"### Pclass","7cdce44f":"## Embarked","440d4e3a":"### sibling or spouse","b7661908":"# Modeling and Prediction","b4e426d5":"The age distribution for all passengers in the sample","8d44b399":"Fill missing values in Age column with random numbers","4859da5b":"Convert DataFrame to a csv file that can be uploaded","5156bc5e":"### Parents or Child","2c1f0a3d":"Select feature column names and target variable we are going to use for training","c2b693b4":"Fill missing values in Fare column with the median value","cf642b61":"## Family relations","909a8a89":"## Fare ","be8820ed":"Convert categorical data into numerical data ","e99884e0":"## Age","ea5889d0":"Create a  DataFrame with the passengers ids and our prediction regarding whether they survived or not","653fb984":"Drop variables that will not be used ","4816465d":"# Data Analysis","8cda593b":"## Load data","85f617de":"The age distributions for people dead and survived","fdb0ec40":"## Passenger class & Sex","5a74af2b":"# Data cleaning","6a11a60f":"### Sex"}}