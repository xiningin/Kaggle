{"cell_type":{"def82fe7":"code","8703d7d6":"code","f2cfd384":"code","43d81e33":"code","8dd00378":"code","57da5e2d":"code","a2c72041":"code","c799e6bf":"code","61e7ef26":"code","32e8e2b8":"code","1451e95b":"code","0125168f":"code","a675bac7":"code","ef520a90":"code","e6939029":"code","b6ecb7fc":"code","7c484342":"code","50e17226":"code","0fbd27d0":"code","e06282a4":"code","5340038a":"markdown","f9a8fd62":"markdown","269b235f":"markdown","e976bc80":"markdown"},"source":{"def82fe7":"\nimport os\nimport numpy as np\nfrom numpy.linalg import norm\nfrom tqdm import tqdm\nimport os\nimport PIL\nimport time\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input\nimport math\nfrom sklearn.neighbors import NearestNeighbors\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom sklearn.decomposition import PCA","8703d7d6":"img_size =224\n\nmodel = ResNet50(weights='imagenet', include_top=False,input_shape=(img_size, img_size, 3),pooling='max')","f2cfd384":"batch_size = 64\nroot_dir = '\/kaggle\/input\/caltech101\/101_ObjectCategories'\n\nimg_gen = ImageDataGenerator(preprocessing_function=preprocess_input)\n\ndatagen = img_gen.flow_from_directory(root_dir,\n                                        target_size=(img_size, img_size),\n                                        batch_size=batch_size,\n                                        class_mode=None,\n                                        shuffle=False)\n\nnum_images = len(datagen.filenames)\nnum_epochs = int(math.ceil(num_images \/ batch_size))\n\nfeature_list = model.predict_generator(datagen, num_epochs,verbose = 1)","43d81e33":"print(\"Num images   = \", len(datagen.classes))\nprint(\"Shape of feature_list = \", feature_list.shape)","8dd00378":"plt.imshow(plt.imread('\/kaggle\/input\/caltech101\/101_ObjectCategories\/BACKGROUND_Google\/image_0001.jpg'))\nplt.show()","57da5e2d":"plt.imshow(plt.imread('\/kaggle\/input\/caltech101\/101_ObjectCategories\/chair\/image_0001.jpg'))\nplt.show()","a2c72041":"# Get full path for all the images in our dataset\n\nfilenames = [root_dir + '\/' + s for s in datagen.filenames]","c799e6bf":"neighbors = NearestNeighbors(n_neighbors=5,\n                             algorithm='ball_tree',\n                             metric='euclidean')\nneighbors.fit(feature_list)","61e7ef26":"plt.imshow(plt.imread('\/kaggle\/input\/ant-and-bee\/hymenoptera_data\/train\/ants\/0013035.jpg'))\nplt.show()","32e8e2b8":"img_path = '\/kaggle\/input\/ant-and-bee\/hymenoptera_data\/train\/ants\/0013035.jpg'\ninput_shape = (img_size, img_size, 3)\nimg = image.load_img(img_path, target_size=(input_shape[0], input_shape[1]))\nimg_array = image.img_to_array(img)\nexpanded_img_array = np.expand_dims(img_array, axis=0)\npreprocessed_img = preprocess_input(expanded_img_array)\n","1451e95b":"test_img_features = model.predict(preprocessed_img, batch_size=1)\n\n_, indices = neighbors.kneighbors(test_img_features)","0125168f":"def similar_images(indices):\n    plt.figure(figsize=(15,10), facecolor='white')\n    plotnumber = 1    \n    for index in indices:\n        if plotnumber<=len(indices) :\n            ax = plt.subplot(2,4,plotnumber)\n            plt.imshow(mpimg.imread(filenames[index]), interpolation='lanczos')            \n            plotnumber+=1\n    plt.tight_layout()\n\nprint(indices.shape)\n\nplt.imshow(mpimg.imread(img_path), interpolation='lanczos')\nplt.xlabel(img_path.split('.')[0] + '_Original Image',fontsize=20)\nplt.show()\nprint('********* Predictions ***********')\nsimilar_images(indices[0])","a675bac7":"pca = PCA(n_components=100)\npca.fit(feature_list)\ncompressed_features = pca.transform(feature_list)","ef520a90":"neighbors_pca_features = NearestNeighbors(n_neighbors=5,\n                             algorithm='ball_tree',\n                             metric='euclidean').fit(compressed_features)","e6939029":"test_img_compressed = pca.transform(test_img_features)\ndistances, indices = neighbors_pca_features.kneighbors(test_img_compressed)\nprint(indices.shape)\nplt.imshow(mpimg.imread(img_path), interpolation='lanczos')\nplt.xlabel(img_path.split('.')[0] + '_Original Image',fontsize=20)\nplt.show()\nprint('********* Predictions  after PCA ***********')\nsimilar_images(indices[0])","b6ecb7fc":"plt.imshow(plt.imread('\/kaggle\/input\/butterfly-dataset\/leedsbutterfly\/images\/0010001.png'))\nplt.show()","7c484342":"img_path = '\/kaggle\/input\/butterfly-dataset\/leedsbutterfly\/images\/0010001.png'\ninput_shape = (img_size, img_size, 3)\nimg = image.load_img(img_path, target_size=(input_shape[0], input_shape[1]))\nimg_array = image.img_to_array(img)\nexpanded_img_array = np.expand_dims(img_array, axis=0)\npreprocessed_img = preprocess_input(expanded_img_array)\n","50e17226":"test_img_features = model.predict(preprocessed_img, batch_size=1)\n\n_, indices = neighbors.kneighbors(test_img_features)","0fbd27d0":"def similar_images(indices):\n    plt.figure(figsize=(15,10), facecolor='white')\n    plotnumber = 1    \n    for index in indices:\n        if plotnumber<=len(indices) :\n            ax = plt.subplot(2,4,plotnumber)\n            plt.imshow(mpimg.imread(filenames[index]), interpolation='lanczos')            \n            plotnumber+=1\n    plt.tight_layout()\n\nprint(indices.shape)\n\nplt.imshow(mpimg.imread(img_path), interpolation='lanczos')\nplt.xlabel(img_path.split('.')[0] + '_Original Image',fontsize=20)\nplt.show()\nprint('********* Predictions ***********')\nsimilar_images(indices[0])","e06282a4":"test_img_compressed = pca.transform(test_img_features)\ndistances, indices = neighbors_pca_features.kneighbors(test_img_compressed)\nprint(indices.shape)\nplt.imshow(mpimg.imread(img_path), interpolation='lanczos')\nplt.xlabel(img_path.split('.')[0] + '_Original Image',fontsize=20)\nplt.show()\nprint('********* Predictions after PCA ***********')\nsimilar_images(indices[0])","5340038a":"Here we observe image a of scorpion in the prediction which is incorrect. Due to the large dimensionality of the features, the NearestNeighbors algorithm is not able to cluster similar features accurately.\n\n<br>\nTo overcome this we will apply PCA to our features and reduce the dimensions and try to find the similar features again.","f9a8fd62":"#                                            Reverse Image Search","269b235f":"We have 9144 images in our dataset. Each image is converted into a 2048 feature vector.","e976bc80":"Create the keras image data generator object and extract the features for the images using Resnet50 predict_generator method."}}