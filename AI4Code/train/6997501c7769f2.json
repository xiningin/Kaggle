{"cell_type":{"8b15df81":"code","e164a9f6":"code","c47c68a6":"code","8a0a0e0c":"code","2f5b06c9":"code","5439af0e":"code","dca48d46":"code","22b9989c":"code","79a8e5bf":"code","65265ecb":"code","d75e501b":"code","e40ccf2d":"code","351a9b88":"code","34b35540":"code","b9964659":"code","7b927c2e":"code","b359242b":"code","8c16eacd":"code","ab0697e7":"code","d26052cd":"code","e3db6de9":"code","4a887611":"code","09887926":"code","0d9764ab":"code","dc76a396":"code","724d1982":"code","67d3fb22":"code","35511fc8":"code","e30a2be1":"code","79ce6696":"code","0ce27868":"code","a62aec10":"code","c4111754":"code","a65343ba":"code","6d6c96a8":"code","d946f6aa":"code","00affcba":"code","3cb7668c":"code","8c1159b0":"code","2b189813":"code","4108ddc4":"code","c463bd3b":"code","7a152762":"code","f4ae5a4c":"code","cccb98ca":"code","56f17b2c":"code","7e1c07fc":"code","e053a25d":"code","10aef986":"code","ecaaab0d":"code","2d2da40a":"code","400a05ec":"markdown","6c947d71":"markdown","481fbcb9":"markdown","210bb65c":"markdown","bfe258ba":"markdown","0c2ea480":"markdown","c818dc60":"markdown","628ebefd":"markdown","56869d7f":"markdown","b6900c8a":"markdown","58db6201":"markdown","296c2669":"markdown"},"source":{"8b15df81":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n#sets the backend of matplotlib to the 'inline' backend\n%matplotlib inline \nimport matplotlib \nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)","e164a9f6":"df1 = pd.read_csv(\"..\/input\/bangalore\/banglore.csv\")\ndf1.head()","c47c68a6":"df1.shape","8a0a0e0c":"df1.columns","2f5b06c9":"df1['area_type'].unique()","5439af0e":"df1['area_type'].value_counts()","dca48d46":"df2 = df1.drop(['area_type','society','balcony','availability'],axis='columns')\ndf2.shape","22b9989c":"df2.isnull().sum()","79a8e5bf":"df2.shape","65265ecb":"df3 = df2.dropna()\ndf3.isnull().sum()","d75e501b":"df3.shape","e40ccf2d":"df3['bhk'] = df3['size'].apply(lambda x: int(x.split(' ')[0]))\ndf3.bhk.unique()","351a9b88":"  def is_float(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True","34b35540":"#Explore total_sqft feature\ndf3[~df3['total_sqft'].apply(is_float)].head(10)","b9964659":"def convert_sqft_to_num(x):\n    tokens = x.split('-')\n    if len(tokens) == 2:\n        return (float(tokens[0])+float(tokens[1]))\/2\n    try:\n        return float(x)\n    except:\n        return None","7b927c2e":"df4 = df3.copy()\ndf4.total_sqft = df4.total_sqft.apply(convert_sqft_to_num)\ndf4 = df4[df4.total_sqft.notnull()]\ndf4.head(2)","b359242b":"df4.loc[30]","8c16eacd":"#Adding a new column\ndf5 = df4.copy()\ndf5['price_per_sqft'] = df5['price']*100000\/df5['total_sqft'] # Price is in lakh rupees\ndf5.head()","ab0697e7":"#Let' s explore location\n\nlen(df5.location.unique())","d26052cd":"#Removing white space\ndf5.location = df5.location.apply(lambda x: x.strip())\nlocation_stats = df5['location'].value_counts(ascending=False)\nlocation_stats\n","e3db6de9":"len(location_stats[location_stats>10])\nlen(location_stats[location_stats<=10])","4a887611":"location_stats_less_than_10 = location_stats[location_stats<=10]\nlocation_stats_less_than_10","09887926":"df5.location = df5.location.apply(lambda x: 'other' if x in location_stats_less_than_10 else x)\nlen(df5.location.unique())","0d9764ab":"df5[df5.total_sqft\/df5.bhk<300].head()","dc76a396":"df5.shape","724d1982":"df6 = df5[~(df5.total_sqft\/df5.bhk<300)]\ndf6.shape","67d3fb22":"df6.price_per_sqft.describe()","35511fc8":"def remove_pps_outliers(df):\n    df_out = pd.DataFrame()\n    for key, subdf in df.groupby('location'):\n        m = np.mean(subdf.price_per_sqft)\n        st = np.std(subdf.price_per_sqft)\n        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]\n        df_out = pd.concat([df_out,reduced_df],ignore_index=True)\n    return df_out\ndf7 = remove_pps_outliers(df6)\ndf7.shape","e30a2be1":"def plot_scatter_chart(df,location):\n    bhk2 = df[(df.location==location) & (df.bhk==2)]\n    bhk3 = df[(df.location==location) & (df.bhk==3)]\n    matplotlib.rcParams['figure.figsize'] = (15,10)\n    plt.scatter(bhk2.total_sqft,bhk2.price,color='red',label='2 BHK', s=50)\n    plt.scatter(bhk3.total_sqft,bhk3.price,marker='+', color='green',label='3 BHK', s=50)\n    plt.xlabel(\"Total Square Feet Area\")\n    plt.ylabel(\"Price (Lakh Indian Rupees)\")\n    plt.title(location)\n    plt.legend()\n    \nplot_scatter_chart(df7,\"Rajaji Nagar\")","79ce6696":"plot_scatter_chart(df7,\"Hebbal\")","0ce27868":"def remove_bhk_outliers(df):\n    exclude_indices = np.array([])\n    for location, location_df in df.groupby('location'):\n        bhk_stats = {}\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            bhk_stats[bhk] = {\n                'mean': np.mean(bhk_df.price_per_sqft),\n                'std': np.std(bhk_df.price_per_sqft),\n                'count': bhk_df.shape[0]\n            }\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            stats = bhk_stats.get(bhk-1)\n            if stats and stats['count']>5:\n                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\n    return df.drop(exclude_indices,axis='index')\ndf8 = remove_bhk_outliers(df7)\n# df8 = df7.copy()\ndf8.shape","a62aec10":"plot_scatter_chart(df8,\"Hebbal\")","c4111754":"plot_scatter_chart(df8,\"Rajaji Nagar\")","a65343ba":"import matplotlib\nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)\nplt.hist(df8.price_per_sqft,rwidth=0.8)\nplt.xlabel(\"Price Per Square Feet\")\nplt.ylabel(\"Count\")","6d6c96a8":"plt.hist(df8.bath,rwidth=0.8)\nplt.xlabel(\"Number of bathrooms\")\nplt.ylabel(\"Count\")","d946f6aa":"df8[df8.bath>10]","00affcba":"#It is unusual to have 2 more bathrooms than number of bedrooms in a home\ndf9 = df8[df8.bath<df8.bhk+2]\ndf9.shape","3cb7668c":"df10 = df9.drop(['size','price_per_sqft'],axis='columns')\ndf10.head(3)","8c1159b0":"dummies = pd.get_dummies(df10.location)\ndummies.head(3)","2b189813":"df11 = pd.concat([df10,dummies.drop('other',axis='columns')],axis='columns')# dropping \"other\" inorder to avoid dummy trap\ndf11.head()","4108ddc4":"df12 = df11.drop('location',axis='columns')\ndf12.head(2)","c463bd3b":"X = df12.drop(['price'],axis='columns')\nX.head(3)","7a152762":"df12 = df11.drop('location',axis='columns')\ndf12.head(2)","f4ae5a4c":"y = df12.price\ny.head(3)","cccb98ca":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=10)","56f17b2c":"from sklearn.linear_model import LinearRegression\nlr_clf = LinearRegression()\nlr_clf.fit(X_train,y_train)\nlr_clf.score(X_test,y_test)","7e1c07fc":"# K Fold Cross validation\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n\ncross_val_score(LinearRegression(), X, y, cv=cv)","e053a25d":"#Find best model using GridSearchCV\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef find_best_model_using_gridsearchcv(X,y):\n    algos = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n    for algo_name, config in algos.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n        gs.fit(X,y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n\nfind_best_model_using_gridsearchcv(X,y)","10aef986":"#Test the model for few properties\ndef predict_price(location,sqft,bath,bhk):    \n    loc_index = np.where(X.columns==location)[0][0]\n\n    x = np.zeros(len(X.columns))\n    x[0] = sqft\n    x[1] = bath\n    x[2] = bhk\n    if loc_index >= 0:\n        x[loc_index] = 1\n\n    return lr_clf.predict([x])[0]","ecaaab0d":"predict_price('1st Phase JP Nagar',1000, 2, 2)","2d2da40a":"predict_price('Indira Nagar',1000, 2, 2)","400a05ec":"# Outlier detection and removal","6c947d71":"Let's categorize locations with less than 10 data points as \"Other\"","481fbcb9":"# Importing and cleaning data","210bb65c":"# Outlier Removal Using Standard Deviation and Mean","bfe258ba":"# Use One Hot Encoding For Location","0c2ea480":"The maximum and minimum values show some extreme cases. Since we are building a model, we have to remove them.","c818dc60":"Now it's suitable for on-hot encoding","628ebefd":"# Model building","56869d7f":"Let's check if for a given location how does the 2 BHK and 3 BHK property prices look like","b6900c8a":"# Feature Engineering","58db6201":"Looks like there are a too many locations.We should reduce dimention","296c2669":"We can use domain knowledge here.For example, When dividing total square foot by number of bedrooms, we sould get a reasonable value."}}