{"cell_type":{"8193972e":"code","f2af57dd":"code","d1f03fb8":"code","d80eb86c":"code","1605d85a":"code","3d98a91e":"code","cda95193":"code","7263b290":"code","46ab9c89":"code","f5846014":"code","cee56660":"code","943c7d77":"code","03b9ea33":"code","fe829393":"code","7d4ede60":"code","2490a629":"code","298ba942":"code","2f99f572":"code","715c0db1":"code","ff46a180":"code","b8336ce9":"code","75e60ec1":"code","99645b08":"code","6010bc50":"code","298283ec":"code","2706fc8e":"code","51657bb0":"markdown","c4447801":"markdown","77bea2c5":"markdown","0e069df2":"markdown","487dda36":"markdown","62ed629b":"markdown","29eaaf61":"markdown","207437e8":"markdown","acba5405":"markdown","1603a1f2":"markdown","e3e4e3b3":"markdown","d82b1d9b":"markdown"},"source":{"8193972e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport sklearn\nimport optuna\nfrom pandas_profiling import ProfileReport\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import ndcg_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import KNNImputer\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import VotingClassifier, RandomForestClassifier\nfrom xgboost.sklearn import XGBClassifier\n\nimport lightgbm as lgb\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', 50)\npd.set_option('display.max_rows', 100)","f2af57dd":"# read in files\nraw_age_df = pd.read_csv(\"..\/input\/airbnb-recruiting-new-user-bookings\/age_gender_bkts.csv.zip\")\nraw_country_df = pd.read_csv(\"..\/input\/airbnb-recruiting-new-user-bookings\/countries.csv.zip\")\nraw_session_df = pd.read_csv('..\/input\/airbnb-recruiting-new-user-bookings\/sessions.csv.zip')\nraw_train_df = pd.read_csv('..\/input\/airbnb-recruiting-new-user-bookings\/train_users_2.csv.zip')\nraw_test_df = pd.read_csv(\"..\/input\/airbnb-recruiting-new-user-bookings\/test_users.csv.zip\")","d1f03fb8":"print('age_bucket: ', raw_age_df['age_bucket'].unique())\nprint('year: ', raw_age_df['year'].unique())\nprint('country_destination: ', raw_age_df['country_destination'].unique())","d80eb86c":"# overall destinations distribution\nby_country_df = raw_age_df.groupby(['country_destination'])['population_in_thousands'].sum().reset_index()\nfig = px.bar(by_country_df, x='country_destination', y='population_in_thousands', color='population_in_thousands', \n             color_continuous_scale=\"darkmint\")\nfig.show()","1605d85a":"# destinations by gender\nby_gender_df = raw_age_df.groupby(['gender', 'country_destination'])['population_in_thousands'].sum().reset_index()\nfig = px.bar(by_gender_df, x='country_destination', y='population_in_thousands', color='gender', barmode = 'group',\n             color_continuous_scale=\"darkmint\")\nfig.show()","3d98a91e":"# overall age distribution\nby_age_df = raw_age_df.groupby(['age_bucket'])['population_in_thousands'].sum().reset_index()\nfig = px.bar(by_age_df, x='age_bucket', y='population_in_thousands', color='population_in_thousands', \n             color_continuous_scale=\"reds\")\nfig.show()","cda95193":"# destination distribution by age\nby_age_df = raw_age_df.groupby(['age_bucket', 'country_destination'])['population_in_thousands'].sum().reset_index()\nfig = px.bar(by_age_df, x='country_destination', y='population_in_thousands', color='age_bucket', barmode = 'group',\n             color_continuous_scale=\"darkmint\")\nfig.show()\n# compared with overall age distribution, DE and IT has more middle aged people, ie 45-60","7263b290":"raw_country_df\n# nothing special here, so no eda for countries","46ab9c89":"report = ProfileReport(raw_session_df, title = 'session report')\nreport","f5846014":"session_df = raw_session_df[['user_id']].dropna().drop_duplicates().set_index('user_id')\n# count total actions for each user\nsession_df['action_count'] = raw_session_df.groupby('user_id')['action'].count()\n# count total time spent (in seconds)\nsession_df['total_secs'] = raw_session_df.groupby('user_id')['secs_elapsed'].sum()\n\nbook_df = raw_train_df[['id', 'country_destination']].merge(session_df[['action_count', 'total_secs']], \n                                                            left_on = 'id', right_index = True, how = 'left')\nprint('Not book: ', book_df.loc[book_df['country_destination'] == 'NDF', ['action_count', 'total_secs']].mean())\nprint('Book: ', book_df.loc[book_df['country_destination'] != 'NDF', ['action_count', 'total_secs']].mean())","cee56660":"session_by_country_df = book_df.groupby(['country_destination'])[['action_count', 'total_secs']].mean().reset_index()\nfig = px.bar(session_by_country_df, x='country_destination', y='action_count', color='action_count', \n             color_continuous_scale=\"greens\")\nfig.show()\nfig = px.bar(session_by_country_df, x='country_destination', y='total_secs', color='total_secs', \n             color_continuous_scale=\"blues\")\nfig.show()\n# People who go to IT spend most time and take most actions\n# People who do not book spend least time and take lesat actions","943c7d77":"report = ProfileReport(raw_train_df, title = 'train')\nreport","03b9ea33":"train_df = raw_train_df.copy()\ntrain_df.loc[train_df['age'] > 1000, 'age'] = (2015 - train_df['age'])\ntrain_df.loc[train_df['age'] > 100, 'age'] = np.nan\nfig = px.box(train_df, x = 'country_destination', y = 'age', color = 'country_destination')\nfig.show()\ntrain_df.loc[train_df['gender'] == '-unknown-', 'gender'] = np.nan\ntmp_df = train_df.groupby(['country_destination', 'gender'])['id'].count().reset_index()\nfig = px.bar(tmp_df, x = 'country_destination', y = 'id', color = 'gender', barmode = 'group')\nfig.show()","fe829393":"# language\nlang_df = train_df[['language', 'country_destination']].value_counts().unstack().fillna(0.0)\nlang_df['sum'] = lang_df.sum(axis = 1)\nfor language in lang_df.index:\n    lang_df.loc[language] = lang_df.loc[language]\/lang_df.loc[language, 'sum']\nlang_df","7d4ede60":"session_df = raw_session_df[['user_id']].dropna().drop_duplicates().set_index('user_id')\n# count total actions for each user\nsession_df['action_count'] = raw_session_df.groupby('user_id')['action'].count()\n# count total time spent (in seconds)\nsession_df['total_secs'] = raw_session_df.groupby('user_id')['secs_elapsed'].sum()\n\n# count each action and time of each action\n\ntmp_df = raw_session_df.groupby(['user_id', 'action']).agg({'user_id': 'count', 'action': 'nunique', 'secs_elapsed': 'sum'})\\\n                       .rename(columns = {'user_id': 'count', 'action': 'nunique', 'secs_elapsed': 'sec'}).unstack()\ncols = []\nfor level0 in tmp_df.columns.levels[0]:\n    for level1 in tmp_df.columns.levels[1]:\n        cols.append(level1 + '_' + level0)\ntmp_df.columns = cols\nsession_df = pd.concat([session_df, tmp_df], axis = 1)\n\n# choose most frequently used device\nraw_session_df.loc[raw_session_df['device_type'].isin(['Linux Desktop', 'Tablet', 'Chromebook', 'Blackberry', 'iPodtouch',\n                                                       'Windows Phone', 'Opera Phone']), 'device_type'] = 'other'\nraw_session_df['device_type'].fillna('-unknown-', inplace = True)\ndevice_df = raw_session_df.groupby(['user_id', 'device_type'])[['device_type']].count()\\\n                          .rename(columns = {'device_type': 'device'}).sort_values('device').reset_index()\\\n                          .drop_duplicates(['user_id'], keep= 'last').set_index('user_id').drop(columns = 'device')\nsession_df = pd.concat([session_df, device_df], axis = 1)\n\ndel tmp_df","2490a629":"# Users in different age tend to choose different destination\n# Calculate the probabilities of choosing different destinations for different age buckets\nage_df = raw_age_df.copy()\nby_age_df = age_df.groupby(['age_bucket', 'country_destination'])['population_in_thousands'].sum().unstack()\nby_age_df.columns = by_age_df.columns.map(lambda x: 'by_age_' + x)\nby_age_df['sum'] = by_age_df.sum(axis = 1)\n\nfor col in by_age_df.columns:\n    by_age_df[col] = by_age_df[col]\/by_age_df['sum']\nby_age_df.drop(columns = ['sum'], inplace = True)","298ba942":"# Combine train test\ndf = pd.concat([raw_train_df, raw_test_df]).reset_index().drop(columns = 'index')\n# Convert timestamp to date\ndf['first_active_date'] = pd.to_datetime(df['timestamp_first_active'].astype(str).map(lambda x: x[:4] + '-' + x[4:6] + '-' + x[6:8]))\ndf.drop(columns = 'timestamp_first_active', inplace = True)\n# gender\ndf.loc[df['gender'] == '-unknown-', 'gender'] = np.nan\ndf['gender'] = df['gender'].str.lower()\n# age\ndf.loc[df['age'] > 1000, 'age'] = (2015 - df['age'])\ndf.loc[~df['age'].between(16, 100), 'age'] = np.nan\ndf['age'].fillna(df['age'].median(), inplace = True)\n# determine if the system language is the same as destination language\ndf['language'] = df['language'].str.upper()\ndf.loc[df['language'] == '-UNKNOWN-', 'language'] = 'EN'\nfor destination in ['US', 'FR', 'CA', 'GB', 'ES', 'IT', 'PT', 'NL', 'DE', 'AU']:\n    if (destination in ['US', 'CA', 'GB', 'AU']):\n        df.loc[df['language'] == 'EN', 'dlanguage_EN'] = 1\n    else:\n        df.loc[df['language'] == destination, f'dlanguage_{destination}'] = 1\ndf.loc[df[[f'dlanguage_{x}' for x in ['EN', 'FR', 'ES', 'IT', 'PT', 'NL', 'DE']]].sum(axis = 1) == 0, 'dlanguage_other'] = 1\n\n# date features\ndf['create_month'] = pd.to_datetime(df['date_account_created']).dt.month\ndf['create_day'] = pd.to_datetime(df['date_account_created']).dt.day\ndf['create_dow'] = pd.to_datetime(df['date_account_created']).dt.dayofweek\ndf['first_month'] = pd.to_datetime(df['first_active_date']).dt.month\ndf['first_day'] = pd.to_datetime(df['first_active_date']).dt.day\ndf['first_dow'] = pd.to_datetime(df['first_active_date']).dt.dayofweek\n\n# set small categories as 'other' to decrease features\nsignup_flow = df['signup_flow'].value_counts()\ndf.loc[df['signup_flow'].isin(signup_flow[signup_flow < 1000].index), 'signup_flow'] = 'other'\ndf['signup_flow'] = df['signup_flow'].astype(str)\naffiliate_provider = df['affiliate_provider'].value_counts()\ndf.loc[df['affiliate_provider'].isin(affiliate_provider[affiliate_provider < 100].index), 'affiliate_provider'] = 'other'\nfirst_affiliate_tracked = df['first_affiliate_tracked'].value_counts()\ndf.loc[df['first_affiliate_tracked'].isin(first_affiliate_tracked[first_affiliate_tracked < 1000].index), 'first_affiliate_tracked'] = 'other'\nfirst_browser = df['first_browser'].value_counts()\ndf.loc[df['first_browser'].isin(first_browser[first_browser < 1000].index), 'first_browser'] = 'other'\n\ndf['action_before_account'] = (df['first_active_date'] < pd.to_datetime(df['date_account_created'])).astype(int)\ndf['is_apple'] = (df['first_device_type'].isin(['Mac Desktop', 'iPhone', 'iPad'])).astype(int)\n\n# fillna\ndf[['gender', 'first_affiliate_tracked']] = df[['gender', 'first_affiliate_tracked']].fillna('-unknown-')\ndf[[f'dlanguage_{x}' for x in ['EN', 'FR', 'ES', 'IT', 'PT', 'NL', 'DE', 'other']]] = df[[f'dlanguage_{x}' for x in ['EN', 'FR', 'ES', 'IT', 'PT', 'NL', 'DE', 'other']]].fillna(0)\n\nprint(df.isna().sum())","2f99f572":"# merge with session\nmerged_df = df.merge(session_df, left_on = 'id', right_index = True, how = 'left')\n# fillna\nfill_cols = session_df.columns.tolist()\nmerged_df[fill_cols] = merged_df[fill_cols].fillna(0)\nmerged_df.loc[merged_df['device_type'] == 0, 'device_type'] = np.nan","715c0db1":"# merged with age and gender\n# convert age to age_bucket\ndef age_bucket(x):\n    if x>= 100:\n        return '100+'\n    else:\n        if x < 10:\n            a = ''\n            b = x\n        else:\n            a = str(int(x\/\/10))\n            b = x%10\n        if b <= 4:\n            return a + '0-' + a + '4'\n        else:\n            return a + '5-' + a + '9'\n\nmerged_df['age_bucket'] = merged_df['age'].map(age_bucket)\nmerged_df = merged_df.merge(by_age_df, on = 'age_bucket', how = 'left')","ff46a180":"# One-hot encoding for categorical variables\ncate_feat_ls = ['gender', 'signup_method', 'signup_flow',\n                'language', 'affiliate_channel', 'affiliate_provider',\n                'first_affiliate_tracked', 'signup_app', 'first_device_type',\n                'first_browser', 'device_type', 'age_bucket']\nclean_df = pd.concat([pd.get_dummies(merged_df[cate_feat_ls]).copy(), merged_df[merged_df.columns.difference(cate_feat_ls)]], axis = 1)","b8336ce9":"# split train test\n# use data after 2014-01-01\nexclude_cols = ['id', 'date_account_created', 'first_active_date', 'date_first_booking', 'country_destination']\n\nX_train = clean_df.loc[(clean_df['country_destination'].notna()) & (clean_df['date_account_created'] >= '2014-01-01'), \n                       clean_df.columns.difference(exclude_cols)]\ny_train = clean_df.loc[(clean_df['country_destination'].notna()) & (clean_df['date_account_created'] >= '2014-01-01'), \n                       'country_destination']\nX_test = clean_df.loc[(clean_df['country_destination'].isna()) & (clean_df['date_account_created'] >= '2014-01-01'), \n                       clean_df.columns.difference(exclude_cols)]","75e60ec1":"# cross validation\n# lgb_clf = lgb.LGBMClassifier()\n# score = cross_val_score(lgb_clf, X_train, y_train, cv = 5, scoring = 'f1_weighted')\n# print(score.mean())","99645b08":"lgb_clf = lgb.LGBMClassifier()\nlgb_clf.fit(X_train, y_train)\n# select features\nmodel = SelectFromModel(lgb_clf, prefit = True)\nX_train = pd.DataFrame(model.transform(X_train), columns = X_train.columns, index = X_train.index)\nX_test = pd.DataFrame(model.transform(X_test), columns = X_test.columns, index = X_test.index)\n\nfeat_import_df = pd.DataFrame({'feature': X_train.columns, 'importance': lgb_clf.feature_importances_})\nfeat_import_df.sort_values(['importance'], ascending = False, inplace = True)\n# Show top 20 features\nfeat_import_df.head(20)","6010bc50":"# # optuna for parameter tunning\n# X_train = X_train[feat_import_df.loc[feat_import_df['importance'] > 10, 'feature'].tolist()]\n# X_test = clean_df.loc[clean_df['country_destination'].isna(), X_train.columns]\n# X_valid = X_train[60000:].copy()\n# X_train = X_train[:60000]\n# y_valid = y_train[60000:].copy()\n# y_train = y_train[:60000]\n# def objective(trial):\n#     param = {\n#         \"objective\": \"multiclass\",\n#         \"verbosity\": -1,\n#         \"num_leaves\": trial.suggest_int(\"num_leaves\", 100, 300),\n#         \"feature_fraction\": trial.suggest_float(\"feature_fraction\", 0.4, 1.0),\n#         \"bagging_fraction\": trial.suggest_float(\"bagging_fraction\", 0.4, 1.0),\n#         \"bagging_freq\": trial.suggest_int(\"bagging_freq\", 1, 7),\n#         \"min_data_in_leaf\": trial.suggest_int(\"min_data_in_leaf\", 50, 100),\n#         \"max_depth\": trial.suggest_int(\"max_depth\", 20, 70),\n#         \"min_child_samples\": trial.suggest_int(\"min_child_samples\", 5, 100),\n#         \"n_estimators\": trial.suggest_int(\"n_estimators\", 100, 500),\n#         \"reg_alpha\": trial.suggest_int(\"reg_alpha\", 0, 1000),\n#         \"reg_lambda\": trial.suggest_int(\"reg_lambda\", 0, 1000)\n#     }\n    \n#     lgb_reg = lgb.LGBMClassifier(**param)\n#     lgb_reg.fit(X_train, y_train)\n#     pred_df = pd.DataFrame(lgb_reg.predict(X_valid), columns = ['pred_country'])\n#     pred_df['true_country'] = y_valid.values\n#     error = sklearn.metrics.f1_score(pred_df['pred_country'], pred_df['true_country'], average = 'weighted')\n#     return error\n\n# study = optuna.create_study(direction=\"maximize\")\n# study.optimize(objective, n_trials=100)\n# print(study.best_params)","298283ec":"param = {'num_leaves': 114,\n                                'feature_fraction': 0.6032352513287674,\n                                'bagging_fraction': 0.8799533044498802,\n                                'bagging_freq': 1,\n                                'min_data_in_leaf': 89,\n                                'max_depth': 69,\n                                'min_child_samples': 8,\n                                'n_estimators': 210,\n                                'reg_alpha': 37,\n                                'reg_lambda': 709}\n\nlgb_clf = lgb.LGBMClassifier(**{'num_leaves': 114,\n                                'min_data_in_leaf': 89,\n                                'n_estimators': 210,\n                                'min_child_samples': 8,\n                                'objective': 'multiclass',\n                                'reg_alpha': 80})\n\nxgb_clf = XGBClassifier(**{'objective': 'multi:softprob',\n                           'n_estimators': 200,\n                           'subsample': 0.8,\n                           'learning_rate': 0.1,\n                           'max_depth': None,\n                           'reg_alpha': 100})\n\nrf_clf = RandomForestClassifier(**{'n_estimators': 200})\n# use voting classifier\nvoting_clf = VotingClassifier(estimators = [('lgb', lgb_clf), ('xgb', xgb_clf), ('rf', rf_clf)], voting = 'soft')\nvoting_clf.fit(X_train, y_train)","2706fc8e":"# predict probability\npred_prob_df = pd.DataFrame(voting_clf.predict_proba(X_test_new), index = raw_test_df['id'].values, columns = np.sort(y_train.unique()))\n# select 5 countries with the highest probabilities\npred_df = pred_prob_df.stack().reset_index().rename(columns = {'level_0': 'id', 'level_1': 'country', 0: 'prob'}).sort_values(['id', 'prob'], ascending = False).reset_index(drop = True)\nuse_index = []\nfor i in range(len(pred_df)):\n    if i%12 < 5:\n        use_index.append(i)\n\npred_df = pred_df.iloc[use_index][['id', 'country']]\nsubmit_df = raw_test_df[['id']].merge(pred_df, on = 'id')\nsubmit_df.to_csv('submission.csv', index = False)","51657bb0":"## Sessions","c4447801":"# Submit","77bea2c5":"## Train dataset","0e069df2":"# EDA","487dda36":"## Age and gender information","62ed629b":"We can observe that people are more likely to go to the country which speak the same language.\n\nFor example for language de(German), 3.3% people go the DE(Germany). While for the language en, only 0.5% people go to Germany. So language has some meanings.","29eaaf61":"# Cleaning and Feature Engineering","207437e8":"## Train and Test","acba5405":"## Sessions","1603a1f2":"# Model","e3e4e3b3":"## Country Info","d82b1d9b":"## Age and Gender"}}