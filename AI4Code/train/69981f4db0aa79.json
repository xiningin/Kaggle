{"cell_type":{"b2fd155c":"code","d2f23b2a":"code","76738d4a":"code","f384dd7b":"code","332278e2":"code","f427b941":"code","1b3c2123":"code","088efb40":"code","2d1d0617":"code","f4ecdec6":"code","10261deb":"code","245ce152":"code","6eac2b4e":"code","2a9a2866":"markdown","b5a41f39":"markdown","c0306c80":"markdown","ab9d031c":"markdown","1a8c4509":"markdown","ea6e5f6f":"markdown","705ce3ea":"markdown","4c98c175":"markdown","a685240b":"markdown","7b45b43c":"markdown","1a61da9e":"markdown"},"source":{"b2fd155c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d2f23b2a":"import pandas as pd\n\ndf =pd.read_csv('https:\/\/raw.githubusercontent.com\/Datamanim\/datarepo\/main\/happy2\/happiness.csv',encoding='utf-8')","76738d4a":"df.head(5)","f384dd7b":"result = df[df.\ud589\ubcf5\ub7ad\ud0b9 ==10]['\uc810\uc218'].mean()\n#result = df[df.\ud589\ubcf5\ub7ad\ud0b9 ==10]['\uc810\uc218'].mean()\n#result = df[df.\ud589\ubcf5\ub7ad\ud0b9 ==10]['\uc810\uc218'].mean()\n#result = df[df.\ud589\ubcf5\ub7ad\ud0b9==10]['\uc810\uc218'].mean()\n\nprint(result)\nprint(result)\n\n# 7.259","332278e2":"result = df[df.\ud589\ubcf5\ub7ad\ud0b9<=50][['\ub144\ub3c4','\uc810\uc218']].groupby('\ub144\ub3c4').mean()\n#result = df[df.\ud589\ubcf5\ub7ad\ud0b9<=50][['\ub144\ub3c4','\uc810\uc218']].groupby('\ub144\ub3c4').mean()\n#result = df[df.\ud589\ubcf5\ub7ad\ud0b9<=50][['\ub144\ub3c4','\uc810\uc218']].groupby('\ub144\ub3c4').mean()\n\nprint(result)","f427b941":"result = df[df.\ub144\ub3c4 ==2018][['\uc810\uc218','\ubd80\ud328\uc5d0 \ub300\ud55c\uc778\uc2dd']].corr().iloc[0,1]\nresult = df[df.\ub144\ub3c4 ==2018][['\uc810\uc218','\ubd80\ud328\uc5d0 \ub300\ud55c\uc778\uc2dd']].corr().iloc[0,1]\nresult = df[df.\ub144\ub3c4 ==2018][['\uc810\uc218','\ubd80\ud328\uc5d0 \ub300\ud55c\uc778\uc2dd']].corr().iloc[0,1]\n\n\nprint(result)\n\n#0.40529","1b3c2123":"result = len(df[['\ud589\ubcf5\ub7ad\ud0b9','\ub098\ub77c\uba85']]) - len(df[['\ud589\ubcf5\ub7ad\ud0b9','\ub098\ub77c\uba85']].drop_duplicates())\nresult = len(df[['\ud589\ubcf5\ub7ad\ud0b9','\ub098\ub77c\uba85']]) - len(df[['\ud589\ubcf5\ub7ad\ud0b9','\ub098\ub77c\uba85']].drop_duplicates())\n\nprint(result)\n\n#15\n","088efb40":"zz = df[df.\ub144\ub3c4 ==2019].corr().unstack().to_frame().reset_index().dropna()\n\nresult = zz[zz[0] !=1].sort_values(0,ascending=False).drop_duplicates(0)\nanswer = result.head(5).reset_index(drop=True)\nanswer.columns = ['v1','v2','corr']\nanswer","2d1d0617":"result = df.groupby('\ub144\ub3c4').tail(5).groupby('\ub144\ub3c4').mean()[['\uc810\uc218']]\nprint(result)","f4ecdec6":"over = df[df.\uc0c1\ub300GDP >= df.\uc0c1\ub300GDP.mean()]['\uc810\uc218'].mean()\nunder = df[df.\uc0c1\ub300GDP <= df.\uc0c1\ub300GDP.mean()]['\uc810\uc218'].mean()\n\nresult= over - under\nprint(result)\n\n#1.4212","10261deb":"result = df.sort_values(['\ub144\ub3c4','\ubd80\ud328\uc5d0 \ub300\ud55c\uc778\uc2dd'],ascending=False).groupby('\ub144\ub3c4').head(20).groupby(['\ub144\ub3c4']).mean()[['\ubd80\ud328\uc5d0 \ub300\ud55c\uc778\uc2dd']]\nprint(result)","245ce152":"result = set(df[(df.\ub144\ub3c4==2018) & (df.\ud589\ubcf5\ub7ad\ud0b9 <=50)].\ub098\ub77c\uba85)  -set(df[(df.\ub144\ub3c4==2019) & (df.\ud589\ubcf5\ub7ad\ud0b9 <=50)].\ub098\ub77c\uba85)\nanswer = len(result)\nprint(answer)","6eac2b4e":"count = df.\ub098\ub77c\uba85.value_counts()\ntarget = count[count>=2].index\n\ndf2 =df.copy()\n\nmultiple = df2[df2.\ub098\ub77c\uba85.isin(target)].reset_index(drop=True)\n\nmultiple.loc[multiple['\ub144\ub3c4']==2018,'\uc810\uc218'] = multiple[multiple.\ub144\ub3c4 ==2018]['\uc810\uc218'].values * (-1)\n\nresult = multiple.groupby('\ub098\ub77c\uba85').sum()['\uc810\uc218'].sort_values().to_frame().iloc[-1]\n\nresult","2a9a2866":"Q9. 2018\ub144\ub3c4 \ud589\ubcf5\ub7ad\ud0b9 50\uc704 \uc774\ub0b4\uc5d0 \ud3ec\ud568\ub410\ub2e4\uac00 2019\ub144 50\uc704 \ubc16\uc73c\ub85c \ubc00\ub824\ub09c \uad6d\uac00\uc758 \uc22b\uc790\ub97c \uad6c\ud558\uc5ec\ub77c\n\n","b5a41f39":"Q4. 2018\ub144\ub3c4\uc640 2019\ub144\ub3c4\uc758 \ud589\ubcf5\ub7ad\ud0b9\uc774 \ubcc0\ud654\ud558\uc9c0 \uc54a\uc740 \ub098\ub77c\uba85\uc758 \uc218\ub97c \uad6c\ud558\uc5ec\ub77c\n\n","c0306c80":"Q1.  \ub370\uc774\ud130\ub294 2018\ub144\ub3c4\uc640 2019\ub144\ub3c4\uc758 \uc804\uc138\uacc4 \ud589\ubcf5 \uc9c0\uc218\ub97c \ud45c\ud604\ud55c\ub2e4. \n\n\uac01\ub144\ub3c4\uc758 \ud589\ubcf5\ub7ad\ud0b9 10\uc704\ub97c \ucc28\uc9c0\ud55c \ub098\ub77c\uc758 \ud589\ubcf5\uc810\uc218\uc758 \ud3c9\uade0\uc744 \uad6c\ud558\uc5ec\ub77c","ab9d031c":"\ucd9c\ucc98: https:\/\/m.cafe.naver.com\/ca-fe\/web\/cafes\/yjbooks\/articles\/21979?useCafeId=false&or=memo.naver.com&buid=21e18a18-2eed-4e6f-8950-6bbe21eeca4c&art=ZXh0ZXJuYWwtc2VydmljZS1uYXZlci1ldGMtZm9yLWNvbW1lbnQ.eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJjYWZlVHlwZSI6IkNBRkVfSUQiLCJhcnRpY2xlSWQiOjIxOTc5LCJpc3N1ZWRBdCI6MTYzODE3NTAzNjA3NywiY2FmZUlkIjoxOTAzOTA1N30.uqt9lZLdGPR4Lz2Ll6ATWB2xZFvCu99mNIX3zJW9Pq8","1a8c4509":"Q8.  \uac01\ub144\ub3c4\uc758 \ubd80\ud328\uc5d0 \ub300\ud55c\uc778\uc2dd\uc744 \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c\ud588\uc744\ub54c \uc0c1\uc704 20\uac1c \uad6d\uac00\uc758 \ubd80\ud328\uc5d0 \ub300\ud55c\uc778\uc2dd\uc758 \ud3c9\uade0\uc744 \uad6c\ud558\uc5ec\ub77c\n\n","ea6e5f6f":"Q10. 2018\ub144,2019\ub144 \ubaa8\ub450 \uae30\ub85d\uc774 \uc788\ub294 \ub098\ub77c\ub4e4 \uc911 \n\n\ub144\ub3c4\ubcc4 \ud589\ubcf5\uc810\uc218\uac00 \uac00\uc7a5 \uc99d\uac00\ud55c \ub098\ub77c\uc640 \uadf8 \uc99d\uac00 \uc218\uce58\ub294?","705ce3ea":"Q3. 2018\ub144\ub3c4 \ub370\uc774\ud130\ub4e4\ub9cc \ucd94\ucd9c\ud558\uc5ec \ud589\ubcf5\uc810\uc218\uc640 \ubd80\ud328\uc5d0 \ub300\ud55c \uc778\uc2dd\uc5d0 \ub300\ud55c \uc0c1\uad00\uacc4\uc218\ub97c \uad6c\ud558\uc5ec\ub77c\n\n","4c98c175":"Q5. 2019\ub144\ub3c4 \ub370\uc774\ud130\ub4e4\ub9cc \ucd94\ucd9c\ud558\uc5ec \uac01\ubcc0\uc218\uac04 \uc0c1\uad00\uacc4\uc218\ub97c \uad6c\ud558\uace0 \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \n\n\uc815\ub82c\ud55c \ud6c4 \uc0c1\uc704 5\uac1c\ub97c \ub370\uc774\ud130 \ud504\ub808\uc784\uc73c\ub85c \ucd9c\ub825\ud558\ub77c\n\n\uceec\ub7fc\uba85\uc740 v1,v2,corr\uc73c\ub85c \ud45c\uc2dc\ud558\ub77c","a685240b":"Q2. \ub370\uc774\ud130\ub294 2018\ub144\ub3c4\uc640 2019\ub144\ub3c4\uc758 \uc804\uc138\uacc4 \ud589\ubcf5 \uc9c0\uc218\ub97c \ud45c\ud604\ud55c\ub2e4. \n\n\uac01\ub144\ub3c4\uc758 \ud589\ubcf5\ub7ad\ud0b9 50\uc704\uc774\ub0b4\uc758 \ub098\ub77c\ub4e4\uc758 \uac01\uac01\uc758 \ud589\ubcf5\uc810\uc218 \ud3c9\uade0\uc744 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ud45c\uc2dc\ud558\ub77c","7b45b43c":"Q6. \uac01 \ub144\ub3c4\ubcc4 \ud558\uc704 \ud589\ubcf5\uc810\uc218\uc758 \ud558\uc704 5\uac1c \uad6d\uac00\uc758 \ud3c9\uade0 \ud589\ubcf5\uc810\uc218\ub97c \uad6c\ud558\uc5ec\ub77c\n\n","1a61da9e":"Q7.2019\ub144 \ub370\uc774\ud130\ub97c \ucd94\ucd9c\ud558\uace0 \n\n\ud574\ub2f9\ub370\uc774\ud130\uc758 \uc0c1\ub300 GDP \ud3c9\uade0 \uc774\uc0c1\uc758 \ub098\ub77c\ub4e4\uacfc \ud3c9\uade0 \uc774\ud558\uc758 \ub098\ub77c\ub4e4\uc758 \ud589\ubcf5\uc810\uc218 \ud3c9\uade0\uc744 \uac01\uac01 \uad6c\ud558\uace0 \n\n\uadf8 \ucc28\uc774\uac12\uc744 \ucd9c\ub825\ud558\ub77c"}}