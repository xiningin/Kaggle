{"cell_type":{"94a0f946":"code","42f3acf4":"code","70cc7701":"code","e9877264":"code","9ad9bd20":"code","714d45e5":"code","8037ca6b":"code","4f13108d":"code","586a699c":"code","92426dc1":"code","61df08cf":"code","f3b5bd6c":"code","e9431863":"code","6705cf52":"code","d7c9522e":"code","3e7658ab":"code","a97a4eae":"code","2242baa4":"code","9985cd72":"code","1abeecac":"code","1e070a99":"code","cb152102":"code","4c8fbeb6":"code","a6004585":"code","3a3b4d4b":"code","01bc0a82":"code","25404a97":"code","de2cfc0c":"code","6424dd45":"code","3e568ad5":"code","5ecb5064":"code","ae228dc9":"code","a83cc5ed":"code","3a293802":"code","3eb4572e":"code","966de2fe":"code","c0041f36":"code","85b5fdcc":"code","2b678df2":"code","6b038401":"code","cff3d3be":"code","3745236a":"code","2ee758ec":"code","1af3be09":"markdown","3c6ca8f2":"markdown","2febb249":"markdown","42e8684b":"markdown","bff50970":"markdown","a166d5b0":"markdown","69122351":"markdown","6a8f8863":"markdown","49efa767":"markdown"},"source":{"94a0f946":"import pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfrom scipy import stats\n\nimport missingno as msno\nplt.style.use('seaborn')\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nmpl.rcParams['axes.unicode_minus'] = False\n\n%matplotlib inline\n\n# \uae30\ubcf8\uc801\uc778 \ubaa8\ub4c8\uc744 import \ud569\ub2c8\ub2e4. \n# mlp.rcParams['axes.unicode_minus'] = False \ucf54\ub4dc\ub294 \uadf8\ub798\ud504\uc5d0\uc11c \ub9c8\uc774\ub108\uc2a4 \ud3f0\ud2b8\uac00 \uae68\uc9c0\ub294 \ubb38\uc81c\uc5d0 \ub300\ud55c \ub300\ucc98\uc785\ub2c8\ub2e4.","42f3acf4":"os.listdir('..\/input\/')","70cc7701":"df_train = pd.read_csv(\"..\/input\/bike-sharing-demand\/train.csv\", parse_dates = [\"datetime\"])\ndf_test = pd.read_csv(\"..\/input\/bike-sharing-demand\/test.csv\", parse_dates = [\"datetime\"])","e9877264":"df_train.head()","9ad9bd20":"df_test.head()","714d45e5":"df_train.shape, df_test.shape","8037ca6b":"df_train.info()","4f13108d":"for col in df_train.columns:\n    msperc = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msperc)","586a699c":"for col in df_test.columns:\n    msperc = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0]))\n    print(msperc)","92426dc1":"msno.matrix(df_train, figsize=(12,5))","61df08cf":"df_train[\"year\"] = df_train[\"datetime\"].dt.year\ndf_train[\"month\"] = df_train[\"datetime\"].dt.month\ndf_train[\"day\"] = df_train[\"datetime\"].dt.day\ndf_train[\"hour\"] = df_train[\"datetime\"].dt.hour\ndf_train[\"minute\"] = df_train[\"datetime\"].dt.minute\ndf_train[\"second\"] = df_train[\"datetime\"].dt.second\n\ndf_test[\"year\"] = df_test[\"datetime\"].dt.year\ndf_test[\"month\"] = df_test[\"datetime\"].dt.month\ndf_test[\"day\"] = df_test[\"datetime\"].dt.day\ndf_test[\"hour\"] = df_test[\"datetime\"].dt.hour\ndf_test[\"minute\"] = df_test[\"datetime\"].dt.minute\ndf_test[\"second\"] = df_test[\"datetime\"].dt.second\n\ndf_train.shape\n\n# datetime\uc758 \ub370\uc774\ud130\ub4e4\uc744 \ud3b8\ud558\uac8c \uc54c\uc544\ubcf4\uae30\uc704\ud574 \ub144,\uc6d4,\uc77c,\uc2dc,\ubd84,\ucd08 \ub2e8\uc704\ub85c \ub098\ub220\uc900\ub2e4.\n# \ud655\uc778\uacb0\uacfc column\uc774 18\ub85c \ub298\uc5b4\ub09c\uac83\uc744 \ubcfc \uc218 \uc788\ub2e4.","f3b5bd6c":"figure, ((ax1,ax2,ax3),(ax4,ax5,ax6)) = plt.subplots(nrows = 2, ncols = 3)\nfigure.set_size_inches(18,10)\n\nsns.barplot(data=df_train, x = \"year\", y = \"count\", ax = ax1)\nsns.barplot(data=df_train, x = \"month\", y = \"count\", ax = ax2)\nsns.barplot(data=df_train, x = \"day\", y = \"count\", ax = ax3)\nsns.barplot(data=df_train, x = \"hour\", y = \"count\", ax = ax4)\nsns.barplot(data=df_train, x = \"minute\", y = \"count\", ax = ax5)\nsns.barplot(data=df_train, x = \"second\", y = \"count\", ax = ax6)\n\nax1.set(ylabel = \"count\", title = \"Rental amount by year\")\nax2.set(ylabel = \"count\", title = \"Rental amount by month\")\nax3.set(ylabel = \"count\", title = \"Rental amount by day\")\nax4.set(ylabel = \"count\", title = \"Rental amount by hour\")\n\n# \uac01 \uae30\uc900\ubcc4 \ub300\uc5ec\ub7c9\uc744 \uc9c1\uad00\uc801\uc73c\ub85c \uc0b4\ud3b4\ubcf4\uae30 \uc704\ud574 barplot\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc2dc\uac01\ud654 \ud574\uc90d\ub2c8\ub2e4.\n# \uc5f0\ub3c4\ubcc4 \ub300\uc5ec\ub7c9\uc744 \ubcf4\uba74 11\ub144\ub3c4\ubcf4\ub2e4 12\ub144\ub3c4\uac00 \ub300\uc5ec\ub7c9\uc774 \ub298\uc5b4\ub09c\uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n# \uc6d4\ubcc4 \ub300\uc5ec\ub7c9\uc744 \ubcf4\uba74 \ub300\uccb4\ub85c \uaca8\uc6b8\ubcf4\ub2e4 \uc5ec\ub984\uc5d0 \ub300\uc5ec\ub7c9\uc774 \ub192\uc740\uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.\n# \uc77c\ubcc4 \ub300\uc5ec\ub7c9\uc740 1~19\uc77c\uae4c\uc9c0\uc758 \ub370\uc774\ud130\ub9cc \ud3ec\ud568\ub41c\ub2e4. \ub098\uba38\uc9c0\ub294 test\ub370\uc774\ud130\uc5d0 \uc788\uc73c\uba70 \uc77c\ub2e8 \ubcf4\ub958\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n# \uc2dc\uac04\ubcc4 \ub300\uc5ec\ub7c9\uc740 \uc624\uc8048\uc2dc\uc640 \uc624\ud6c45\uc2dc, \uc624\ud6c46\uc2dc \uac00\ub7c9\uc774 \ub192\uc740\ub370, \ucd9c\ud1f4\uadfc\uc2dc\uac04\uc5d0 \uc774\uc6a9\ud558\ub294 \uace0\uac1d\uc774 \ub9ce\uc544\uc11c \uadf8\ub7f0\uac83\uc73c\ub85c \ud310\ub2e8\ub429\ub2c8\ub2e4.","e9431863":"df_train[\"dayofweek\"] = df_train[\"datetime\"].dt.dayofweek\ndf_test[\"dayofweek\"] = df_test[\"datetime\"].dt.dayofweek\ndf_train.shape\n\n# \uc694\uc77c \ubcc0\uc218\ub97c \ucd94\uac00\ub85c \uc0dd\uc131\ud574\uc90d\ub2c8\ub2e4. \n# \uc81c\ub300\ub85c \uc0dd\uc131\ub418\uc5b4 column\uc758 \uc218\uac00 19\uac1c\ub85c \ub298\uc5b4\ub0ac\uc2b5\ub2c8\ub2e4.","6705cf52":"df_train[\"dayofweek\"].value_counts()\n\n# 0~6\uae4c\uc9c0\uc758 \ubc94\uc8fc\uc758 \uac2f\uc218\ub97c \uc138\uc5b4\uc90d\ub2c8\ub2e4. \n# 0 = \uc6d4\uc694\uc77c ~ 6 = \uc77c\uc694\uc77c\uc785\ub2c8\ub2e4.\n# 5,6(\ud1a0, \uc77c)\uc758 \ub300\uc5ec\ub7c9\uc774 \uc870\uae08\ub354 \ub9ce\uc740 \uac83\uc73c\ub85c \ubcf4\uc544 \uc55e\uc11c \uc0b4\ud3b4\ubcf8 workingday\uc758 Boxplot \ub0b4\uc6a9\uacfc \uc5b4\ub290\uc815\ub3c4 \uc77c\uce58\ud558\ub294 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.","d7c9522e":"fig, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(nrows = 5)\nfig.set_size_inches(18,25)\n\nsns.pointplot(data = df_train, x = \"hour\", y = \"count\", ax = ax1)\nsns.pointplot(data = df_train, x = \"hour\", y = \"count\", hue = \"workingday\", ax = ax2)\nsns.pointplot(data = df_train, x = \"hour\", y = \"count\", hue = \"dayofweek\", ax = ax3)\nsns.pointplot(data = df_train, x = \"hour\", y = \"count\", hue = \"weather\", ax = ax4)\nsns.pointplot(data = df_train, x = \"hour\", y = \"count\", hue = \"season\",  ax = ax5)\n\n# \uc2dc\uac04\uc758 \ud750\ub984\uc5d0 \ub530\ub978 pointplot\uc744 \uadf8\ub824\uc90d\ub2c8\ub2e4.\n# \uccab\ubc88\uc9f8 plot\uc740 \uc5ed\uc2dc \uc55e\uc11c \ubcf4\uc558\ub358 \uacb0\uacfc\ub4e4\uacfc \uc77c\uce58\ud569\ub2c8\ub2e4.\n# \ub450\ubc88\uc9f8 plot\uc744 \ubcf4\uba74 \uadfc\ubb34\uc77c\ub54c\ub294 \ucd9c\ud1f4\uadfc\uc2dc\uac04\uc5d0 \uc9d1\uc911\ub418\uc5b4 \uc788\uc9c0\ub9cc, \uc544\ub2cc \uacbd\uc6b0\ub294 \uadf8\ub798\ud504\uac00 \ub0ae\uc2dc\uac04\uc5d0 \uc804\uccb4\uc801\uc73c\ub85c \ud3c9\uc774\ud569\ub2c8\ub2e4. \n# \uc138\ubc88\uc9f8 plot\uc744 \ubcf4\uba74 \uc5ed\uc2dc \ub450\ubc88\uc9f8 plot\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c \ud1a0,\uc77c\uc740 \ub0ae\uc2dc\uac04\uc5d0 \uc804\uccb4\uc801\uc73c\ub85c \ud3c9\uc774\ud558\uace0, \ub098\uba38\uc9c0 \uc694\uc77c\uc740 \ucd9c\ud1f4\uadfc \uc2dc\uac04\uc5d0 \uc9d1\uc911\ub429\ub2c8\ub2e4.\n# \ub124\ubc88\uc9f8 plot\uc744 \ubcf4\uba74 \ub9d1\uc740\ub0a0\uc774 \uc5ed\uc2dc \uac00\uc7a5 \ub192\uc740 \ub300\uc5ec\ub7c9\uc744 \ubcf4\uc774\uace0, \uadf8 \ub2e4\uc74c\uc73c\ub85c \uc548\uac1c, \uac00\ubcbc\uc6b4 \ub208\ube44\uac00 \uc624\ub298 \ub0a0\uc528\uc21c\uc73c\ub85c \ub300\uc5ec\ub7c9\uc774 \ub9ce\uc2b5\ub2c8\ub2e4. \uc545\ucc9c\ud6c4\uc778 \ub0a0\uc528\ub294 \uc5c6\ub2e4\uace0 \ubd10\ub3c4 \ubb34\ubc29\ud560 \uc815\ub3c4\uc785\ub2c8\ub2e4.\n# \ub9c8\uc9c0\ub9c9 plot\uc744 \ubcf4\uba74 \ubd04\uc774 \uac00\uc7a5\uc801\uc73c\uba70, \uc5ec\ub984 \uac00\uc744 \uaca8\uc6b8\uc740 \uc870\uae08\uc758 \ucc28\uc774\uac00 \ub098\ub294 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.","3e7658ab":"corr_data = df_train[[\"temp\", \"atemp\", \"casual\", \"registered\", \"humidity\", \"windspeed\", \"count\"]]\n\ncolormap = plt.cm.PuBu\n \nf , ax = plt.subplots(figsize = (12,10))\nplt.title('Correlation of Numeric Features with Rental Count',y=1,size=18)\nsns.heatmap(corr_data.corr(), vmax=.8, linewidths=0.1,square=True,annot=True,cmap=colormap,\n            linecolor=\"white\",annot_kws = {'size':14})\n\n# \uc218\uce58\ud615 \ub370\uc774\ud130\ub4e4\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uc54c\uc544\ubcf4\uae30\uc704\ud574 Heatmap\uc744 \uadf8\ub824\ubd05\ub2c8\ub2e4.\n# count\uc758 \uc5f4\uc744 \ubcf4\uba74 \uac00\uc7a5 \ub208\uc5d0 \ub744\uac8c \uc9c4\ud55c \ubcc0\uc218\ub294 registered\uc785\ub2c8\ub2e4. \uc774 \ubcc0\uc218\ub294 test\ub370\uc774\ud130\uc5d4 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n# \uadf8 \ub2e4\uc74c\uc73c\ub85c \uc0c1\uad00\uacc4\uc218\uac00 \ub192\uc740 \ubcc0\uc218\ub294 casual\uc774\ub2e4.\n# \uc628\ub3c4, \uc2b5\ub3c4, \ud48d\uc18d\uc740 \uac70\uc758 \uad00\uacc4\uac00 \uc5c6\ub2e4\uace0 \ubcfc \uc218 \uc788\ub2e4.\n# temp\uc640 atemp\ub294 \uc628\ub3c4, \uccb4\uac10\uc628\ub3c4\uc778\ub370 \uc0c1\uad00\uacc4\uc218\uac00 \ub9e4\uc6b0 \ub192\uc740\uac78\ub85c \ubd10\uc11c \ub2e4\uc911\uacf5\uc120\uc131\uc744 \ubcf4\uc778\ub2e4\uace0 \ud560 \uc218 \uc788\ub2e4.","a97a4eae":"fig, (ax1, ax2, ax3) = plt.subplots(ncols = 3, figsize=(12,5))\n\ntemp_scatter_plot = pd.concat([df_train['count'],df_train['temp']],axis = 1)\nsns.regplot(x='temp',y = 'count',data = temp_scatter_plot,scatter= True, fit_reg=True, ax=ax1)\nwindspeed_scatter_plot = pd.concat([df_train['count'],df_train['windspeed']],axis = 1)\nsns.regplot(x='windspeed',y = 'count',data = windspeed_scatter_plot,scatter= True, fit_reg=True, ax=ax2)\nhumidity_scatter_plot = pd.concat([df_train['count'],df_train['humidity']],axis = 1)\nsns.regplot(x='humidity',y = 'count',data = humidity_scatter_plot,scatter= True, fit_reg=True, ax=ax3)\n\n# \uc720\uc758\ud558\uc9c0 \uc54a\ub2e4\uace0 \ud310\ub2e8\ub41c \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c Scatterplot\uc744 \uadf8\ub824\ubd05\ub2c8\ub2e4.\n# windspeed\uc758 \uacbd\uc6b0 0\uc5d0 \ub9ce\uc740 \ub370\uc774\ud130\uac00 \ubab0\ub824\uc788\uc2b5\ub2c8\ub2e4. \n# \uc77c\ubc18\uc801\uc73c\ub85c \ud48d\uc18d\uc774 0\uc778 \uacbd\uc6b0\uac00 \ud754\uce58 \uc54a\uc73c\ubbc0\ub85c Null\ub370\uc774\ud130\ub97c 0\uc73c\ub85c \ub300\uccb4\ud55c\uac8c \uc544\ub2cc\uac00 \uc0dd\uac01\ud574\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","2242baa4":"fig, axes = plt.subplots(nrows = 2, figsize = (18,14))\n\nplt.sca(axes[0])\nplt.xticks(rotation = 30, ha = \"right\")\naxes[0].set(ylabel = \"count\", title = \"train windspeed\")\nsns.countplot(data = df_train, x = \"windspeed\", ax = axes[0])\n\nplt.sca(axes[1])\nplt.xticks(rotation = 30, ha = \"right\")\naxes[1].set(ylabel = \"count\", title = \"test windspeed\")\nsns.countplot(data = df_test, x = \"windspeed\", ax = axes[1])\n\n# \ud48d\uc18d\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc2dc\uac01\ud654\ub97c \ud574\uc900\ub2e4.\n# 0\uc5d0\ub300\ud55c \uac12\uc774 \ub9e4\uc6b0\ub9ce\ub2e4.\n# Feature engineering\uc5d0\uc11c \uace0\uccd0\uc8fc\ub3c4\ub85d \ud55c\ub2e4.","9985cd72":"def concatenate_year_month(datetime):\n    return \"{0}-{1}\".format(datetime.year, datetime.month)\n\ndf_train[\"year_month\"] = df_train[\"datetime\"].apply(concatenate_year_month)\ndf_test[\"year_month\"] = df_test[\"datetime\"].apply(concatenate_year_month) \n    \nprint(df_train.shape)\ndf_train[[\"datetime\", \"year_month\"]].head()\n\n# \uc5f0\ub3c4\ubcc4 \ub370\uc774\ud130\uc758 \ub300\uc5ec \ubcc0\ud654\ub97c \uc880\ub354 \uc790\uc138\ud788 \ubcf4\uae30\uc704\ud574 year\uc640 month \ub370\uc774\ud130\ub97c \ubd99\uc5ec\uc90d\ub2c8\ub2e4. ","1abeecac":"fig, ax = plt.subplots(figsize = (18,4))\n\nsns.barplot(data = df_train, y = \"count\", x = \"year_month\")\n\n# 2011\ub144\uc5d0 \ube44\ud574 2012\ub144\uc758 \ub300\uc5ec\ub7c9\uc774 \ub192\uc544\uc84c\ub358\uac83\uc744 \ud655\uc778\ud588\uc5c8\ub294\ub370, \ub450 \ub144\ub3c4\ub97c \uc6d4\ubcc4\ub85c \uc2dc\uac01\ud654\ud558\uc5ec \uc880 \ub354 \uc5f0\uc18d\uc801\uc73c\ub85c \ubcf4\ub3c4\ub85d\ud569\ub2c8\ub2e4.\n# \uc5ed\uc2dc\ub098 2012\ub144\uc758 \ub300\uc5ec\ub7c9\uc774 \ub300\uccb4\uc801\uc73c\ub85c \ub192\uc73c\uba70, \ub450 \uc5f0\ub3c4 \ubaa8\ub450 \ub530\ub73b\ud55c \uacc4\uc808\uc758 \ub300\uc5ec\ub7c9\uc774 \ub354 \ub192\uc2b5\ub2c8\ub2e4.\n# \uc804\uccb4\uc801\uc73c\ub85c \ubcf4\uba74 \uac08\uc218\ub85d \ub300\uc5ec\ub7c9\uc774 \uc99d\uac00\ud558\ub294 \ucd94\uc138\uc785\ub2c8\ub2e4.","1e070a99":"from collections import Counter \n\ndef detect_outliers(df, n, features):\n    outlier_indices = []\n    for col in features:\n        Q1 = np.percentile(df[col], 25)\n        Q3 = np.percentile(df[col], 75)\n        IQR = Q3 - Q1\n        \n        outlier_step = 1.5 * IQR\n        \n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(k for k, v in outlier_indices.items() if v > n)\n        \n    return multiple_outliers\n        \nOutliers_to_drop = detect_outliers(df_train, 2, [\"temp\", \"atemp\", \"casual\", \"registered\", \"humidity\", \"windspeed\", \"count\"])\n\n# train \ub370\uc774\ud130\uc758 \uc774\uc0c1\uce58\ub97c \ud0d0\uc0c9\ud569\ub2c8\ub2e4.\n# IQR(\ud29c\ud0a4\uc758 \ubc29\ubc95)\uc744 \uc774\uc6a9\ud55c \ud568\uc218\ub97c \uc9c0\uc815\ud558\uc5ec \uc774\uc0c1\uce58 \ud0d0\uc0c9\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.","cb152102":"df_train.loc[Outliers_to_drop]","4c8fbeb6":"df_train = df_train.drop(Outliers_to_drop, axis = 0).reset_index(drop=True)\ndf_train.shape","a6004585":"df_train_num = df_train[[\"count\", \"temp\", \"atemp\", \"casual\", \"registered\", \"humidity\", \"windspeed\"]]\n\nfor col in df_train_num:\n    print('{:15}'.format(col), \n          'Skewness: {:05.2f}'.format(df_train[col].skew()) , \n          '   ' ,\n          'Kurtosis: {:06.2f}'.format(df_train[col].kurt())  \n         )\n\n# \ucca8\ub3c4 \uc65c\ub3c4 \ud655\uc778","3a3b4d4b":"fig, axes = plt.subplots(nrows = 5, ncols = 2, figsize=(16, 18))\nsns.boxplot(data = df_train, y=\"count\", x = \"season\", orient = \"v\", ax = axes[0][0])\nsns.boxplot(data = df_train, y=\"count\", x = \"holiday\", orient = \"v\", ax = axes[0][1])\nsns.boxplot(data = df_train, y=\"count\", x = \"workingday\", orient = \"v\", ax = axes[1][0])\nsns.boxplot(data = df_train, y=\"count\", x = \"weather\", orient = \"v\", ax = axes[1][1])\nsns.boxplot(data = df_train, y=\"count\", x = \"dayofweek\", orient = \"v\", ax = axes[2][0])\nsns.boxplot(data = df_train, y=\"count\", x = \"month\", orient = \"v\", ax = axes[2][1])\nsns.boxplot(data = df_train, y=\"count\", x = \"year\", orient = \"v\", ax = axes[3][0])\nsns.boxplot(data = df_train, y=\"count\", x = \"hour\", orient = \"v\", ax = axes[3][1])\nsns.boxplot(data = df_train, y=\"count\", x = \"minute\", orient = \"v\", ax = axes[4][0])\n\naxes[0][0].set(ylabel = \"count\", title = \"Rental count by season\")\naxes[0][1].set(ylabel = \"count\", title = \"Rental count by holiday\")\naxes[1][0].set(ylabel = \"count\", title = \"Rental count by workingday\")\naxes[1][1].set(ylabel = \"count\", title = \"Rental count by weather\")\naxes[2][0].set(ylabel = \"count\", title = \"Rental count by dayofweek\")\naxes[2][1].set(ylabel = \"count\", title = \"Rental count by month\")\naxes[3][0].set(ylabel = \"count\", title = \"Rental count by year\")\naxes[3][1].set(ylabel = \"count\", title = \"Rental count by hour\")\naxes[4][0].set(ylabel = \"count\", title = \"Rental count by minute\")","01bc0a82":"f, ax = plt.subplots(1, 1, figsize = (10,6))\ng = sns.distplot(df_train[\"count\"], color = \"b\", label=\"Skewness: {:2f}\".format(df_train[\"count\"].skew()), ax=ax)\ng = g.legend(loc = \"best\")\n\nprint(\"Skewness: %f\" % df_train[\"count\"].skew())\nprint(\"Kurtosis: %f\" % df_train[\"count\"].kurt())\n\n# \ucca8\ub3c4\uc640 \uc65c\ub3c4 \ud655\uc778","25404a97":"df_train[\"count_Log\"] = df_train[\"count\"].map(lambda i:np.log(i) if i>0 else 0)\n\nf, ax = plt.subplots(1, 1, figsize = (10,6))\ng = sns.distplot(df_train[\"count_Log\"], color = \"b\", label=\"Skewness: {:2f}\".format(df_train[\"count_Log\"].skew()), ax=ax)\ng = g.legend(loc = \"best\")\n\nprint(\"Skewness: %f\" % df_train['count_Log'].skew())\nprint(\"Kurtosis: %f\" % df_train['count_Log'].kurt())\n\ndf_train.drop('count', axis= 1, inplace=True)\n\n# \uce58\uc6b0\uce68 \ud574\uc18c\ub97c\uc704\ud574 \ub85c\uadf8\ub97c \ucde8\ud55c\ub2e4.","de2cfc0c":"trainWind0 = df_train.loc[df_train[\"windspeed\"] == 0]\ntrainWindNot0 = df_train.loc[df_train[\"windspeed\"] != 0]\n\n# \ud48d\uc18d \ubcc0\uc218\uc758 0\uac12 \ub370\uc774\ud130\ub4e4\uc744 \ub9cc\uc838\uc8fc\uae30 \uc704\ud574 0\uc778 \uac12\uacfc \uc544\ub2cc \uac12\ub4e4\ub85c \ub098\ub220\uc90d\ub2c8\ub2e4.","6424dd45":"from sklearn.ensemble import RandomForestClassifier\n# RandomForest\ub85c \uac12\uc744 \uc608\uce21\ud574\ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4.\ndef predict_windspeed(data):\n    dataWind0 = data.loc[data[\"windspeed\"] == 0]\n    dataWindNot0 = data.loc[data[\"windspeed\"] != 0]\n    # \ud48d\uc18d \ub370\uc774\ud130\ub97c 0\uc778 \uac12\uacfc \uc544\ub2cc \uac12\ub4e4\ub85c \ub098\ub220\uc90d\ub2c8\ub2e4.\n    wcol = [\"season\", \"weather\", \"humidity\", \"day\", \"temp\", \"atemp\"]\n    # \uc608\uce21\uc5d0 \ud544\uc694\ud55c \ubcc0\uc218\ub4e4\uc744 \uc9c0\uc815\ud569\ub2c8\ub2e4.\n    dataWindNot0[\"windspeed\"] = dataWindNot0[\"windspeed\"].astype(\"str\")\n    # \ud48d\uc18d\uc774 0\uc774 \uc544\ub2cc \uac12\ub4e4\uc744 string\ub370\uc774\ud130\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4.\n    rf_wind = RandomForestClassifier()\n    rf_wind.fit(dataWindNot0[wcol], dataWindNot0[\"windspeed\"])\n    wind0 = rf_wind.predict(X=dataWind0[wcol])\n    # \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\ub97c \uc0ac\uc6a9\ud558\uc5ec wcol\uc758 \ubcc0\uc218\ub4e4\ub85c 0\uc778 \uac12\ub4e4\uc744 \ud559\uc2b5\uc2dc\ud0a4\uace0 \uc608\uce21\ud569\ub2c8\ub2e4.\n    \n    predictWind0 = dataWind0\n    predictWindNot0 = dataWindNot0\n    # \uc608\uce21\ud55c \uac12\uc744 \ub123\uc5b4\uc904 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n    predictWind0[\"windspeed\"] = wind0\n    # \uc608\uce21\uac12\ub4e4\uc744 \ub123\uc5b4\uc90d\ub2c8\ub2e4.\n    data = predictWindNot0.append(predictWind0)\n    # 0\uc774 \uc544\ub2cc \ub370\uc774\ud130\ub4e4\uacfc \uc608\uce21\uac12\ub4e4\uc744 \ud569\uccd0\uc90d\ub2c8\ub2e4.\n    data[\"windspeed\"] = data[\"windspeed\"].astype(\"float\")\n    # \ud48d\uc18d\uc758 \ub370\uc774\ud130\ub4e4\uc744 \ub2e4\uc2dc float \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4.\n    data.reset_index(inplace = True)\n    data.drop(\"index\", inplace = True, axis = 1)\n    \n    return data\n    ","3e568ad5":"df_train = predict_windspeed(df_train)\ndf_test = predict_windspeed(df_test)\n\nfig, (ax1, ax2) = plt.subplots(nrows = 2, figsize = (18,14))\n\nplt.sca(ax1)\nplt.xticks(rotation = 30, ha = \"right\")\nax1.set(ylabel = \"count\", title = \"train windspeed\")\nsns.countplot(data = df_train, x = \"windspeed\", ax = ax1)\n\nplt.sca(ax2)\nplt.xticks(rotation = 30, ha = \"right\")\nax1.set(ylabel = \"count\", title = \"test windspeed\")\nsns.countplot(data = df_test, x = \"windspeed\", ax = ax2)\n\n# \uc608\uce21\ub41c \ud48d\uc18d\ub370\uc774\ud130 \uc2dc\uac01\ud654, rotation\uc740 \uae00\uc528\uc758 \uac01\ub3c4 \uc870\uc808 \ud30c\ub77c\ubbf8\n","5ecb5064":"df_train = pd.get_dummies(df_train, columns = [\"weather\"], prefix = \"weather\")\ndf_test = pd.get_dummies(df_test, columns = [\"weather\"], prefix = \"weather\")\n\ndf_train = pd.get_dummies(df_train, columns = [\"season\"], prefix = \"season\")\ndf_test = pd.get_dummies(df_test, columns = [\"season\"], prefix = \"season\")\n\n#onehotencoding","ae228dc9":"corr_data = df_train[[\"count_Log\", \"windspeed\"]]\ncorr_data.corr()","a83cc5ed":"datetime_test = df_test['datetime']\n\ndf_train.drop([\"datetime\", \"registered\",\"casual\",\"holiday\", \"year_month\", \"minute\", \"second\"], axis = 1, inplace = True)\ndf_test.drop([\"datetime\",\"holiday\", \"year_month\", \"minute\", \"second\"], axis = 1, inplace = True)\n","3a293802":"df_train.head()","3eb4572e":"df_test.head(20)","966de2fe":"from sklearn.model_selection import train_test_split \nfrom sklearn import metrics \nX_train = df_train.drop(\"count_Log\", axis = 1).values \ntarget_label = df_train[\"count_Log\"].values \nX_test = df_test.values \nX_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size = 0.2, random_state = 2000)","c0041f36":"from sklearn.ensemble import GradientBoostingRegressor\nregressor = GradientBoostingRegressor(n_estimators=2000, learning_rate=0.05,\n                                   max_depth=4, \n                                   min_samples_leaf=15, min_samples_split=10, random_state =42) \n\nregressor.fit(X_tr,y_tr)","85b5fdcc":"y_hat = regressor.predict(X_tr)\nplt.scatter(y_tr, y_hat, alpha = 0.2)\nplt.xlabel('Targets (y_tr)',size=18)\nplt.ylabel('Predictions (y_hat)',size=18)\nplt.show()","2b678df2":"y_hat_test = regressor.predict(X_vld)\nplt.scatter(y_vld, y_hat_test, alpha=0.2)\nplt.xlabel('Targets (y_vld)',size=18)\nplt.ylabel('Predictions (y_hat_test)',size=18)\nplt.show()","6b038401":"from sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score,mean_absolute_error # for regression\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score  # for classification\n\nmodels=[GradientBoostingRegressor()]\nmodel_names=['regressor']\nrmsle=[]\nd={}\nfor model in range (len(models)):\n    clf=models[model]\n    clf.fit(X_tr,y_tr)\n    test_pred=clf.predict(X_vld)\n    rmsle.append(np.sqrt(mean_squared_log_error(test_pred,y_vld)))\nd={'Modelling Algo':model_names,'RMSLE':rmsle}   \nd","cff3d3be":"from sklearn.model_selection import cross_val_score \naccuracies = cross_val_score(estimator = regressor, X = X_tr, y = y_tr, cv = 8)","3745236a":"print(accuracies.mean()) \nprint(accuracies.std())","2ee758ec":"use_logvals = 1 \n\npred_xgb = regressor.predict(X_test) \n\nsub_xgb = pd.DataFrame() \nsub_xgb['datetime'] = datetime_test \nsub_xgb['count'] = pred_xgb \nif use_logvals == 1:\n    sub_xgb['count'] = np.exp(sub_xgb['count'])\n    \nsub_xgb.to_csv('xgb.csv',index=False)","1af3be09":"# Feature Engineering","3c6ca8f2":"### Introduction \n\n#### \ubcf8 \ub300\ud68c\ub294 Regression\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\ub85c, \ub3c4\uc2dc \uc804\uc5ed\uc758 \ud0a4\uc624\uc2a4\ud06c \uc704\uce58 \ub124\ud2b8\uc6cc\ud06c\ub97c \ud1b5\ud574 \uba64\ubc84\uc2ed, \ub80c\ud0c8 \ubc0f \uc790\uc804\uac70 \ubc18\ud488\uc744 \uc5bb\ub294 \ud504\ub85c\uc138\uc2a4\uac00 \uc790\ub3d9\ud654\ub418\ub294 \uc790\uc804\uac70\ub97c \uc784\ub300\ud558\ub294 \uc218\ub2e8\uc778 '\uc790\uc804\uac70 \uacf5\uc720 \uc2dc\uc2a4\ud15c'\uc758 \ub300\uc5ec \uc815\ud655\ud55c \uc218\uc694 \uc608\uce21\uc774 \ubaa9\ud45c\uc785\ub2c8\ub2e4.\n\n#### \ubcf8 \ucee4\ub110\uc740 \ub2e4\ub978 \ubd84\ub4e4\uc774 \uc62c\ub824\uc8fc\uc2e0 \ucee4\ub110\ub4e4\uc744 \ucc38\uace0\ud558\uc5ec \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.\n\n#### Baseline\uc740 \uc720\ud29c\ube0c today\uc624\ub298\ucf54\ub4dc\ub2d8\uc758 '\uc790\uc804\uac70 \uc218\uc694\uc608\uce21' \uc601\uc0c1\uc744 \ubcf4\uace0 \uc791\uc131\ud558\uc600\uc2b5\ub2c8\ub2e4. \n\n#### https:\/\/www.youtube.com\/watch?v=Q_MbN-vu_2w&t=2s\n\n#### \ud574\ub2f9 \uc601\uc0c1\uacfc \uce90\uae00\ub7ec\ub4e4\uc758 \uc5ec\ub7ec \ucee4\ub110\uc744 \ubcf4\uace0 \uacf5\ubd80\ud558\uba70 \uc27d\uace0, \uc88b\uc740 \uc131\ub2a5\uc744 \ub0bc \uc218 \uc788\ub294 \ucee4\ub110\uc744 \ub9cc\ub4e4\uace0\uc790 \ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n#### \uc2e4\uc218\ub098 \ud639\uc740 \uc9c0\uc801\ud560\ub9cc\ud55c \ubb38\uc81c\uac00 \uc788\ub2e4\uba74 Feedback \ud574\uc8fc\uc2dc\uba74 \uac10\uc0ac\ud558\uaca0\uc2b5\ub2c8\ub2e4 !","2febb249":"# EDA","42e8684b":"# Model & Make Submission","bff50970":"### \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ubcc0\uc218\uac00 \uc5b4\ub835\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uc0dd\ub7b5\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4!","a166d5b0":"![](https:\/\/fscl01.fonpit.de\/userfiles\/7611461\/image\/mobility-electric\/mobility-electric_02-w810h462.jpg)","69122351":"# 1. Import & Data check","6a8f8863":"# Bike Sharing Demand","49efa767":"### \ubcf8 \ucee4\ub110\uc758 \uc21c\uc11c\uc785\ub2c8\ub2e4.\n\n#### 1. Import & Data check\n\n#### 2. EDA\n\n#### 3. Feature Engineering\n\n#### 4. Modeling & Make Submission"}}