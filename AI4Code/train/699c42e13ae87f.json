{"cell_type":{"a7bde801":"code","82b90bb7":"code","ac8e2d0f":"code","a48ea8d2":"code","fd2802bd":"code","219ea126":"code","a6ac46e2":"code","960d70db":"code","2d274d5e":"code","4753ac17":"code","66c874af":"code","366d3991":"code","6883da36":"code","c7e633b0":"code","e280c095":"code","5c9f4f18":"code","cb4d5cba":"code","0e842887":"code","31408c7b":"code","6321f4fa":"code","1a81d05d":"code","53464502":"code","15b07eaf":"code","82d90cb4":"code","ce96c5a3":"code","bce68b25":"code","a7d7b08f":"markdown","841c8081":"markdown","9674e365":"markdown","18a1f6d5":"markdown","ff58bfb2":"markdown","18ae34e9":"markdown","8670e746":"markdown","d33251ae":"markdown","319f8674":"markdown","1e75e4ba":"markdown","17ef8e4d":"markdown","2af62628":"markdown","0b0a551f":"markdown","d5006d9f":"markdown","6829d6ec":"markdown","66c29e98":"markdown","98116118":"markdown","b12acf4f":"markdown"},"source":{"a7bde801":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","82b90bb7":"import matplotlib.pyplot as plt\nplt.figure(figsize=(20,20))\nplt.imshow(plt.imread(\"..\/input\/matplotlib\/Capture2.PNG\"))","ac8e2d0f":"x = np.linspace(0,6,50)\ny = x**2 + 2*x + 3","a48ea8d2":"plt.plot(x,y)\nplt.xlabel(\"X Label\")\nplt.ylabel(\"Y Label\")\nplt.title(\"Title\")\nplt.style.use(\"ggplot\")","fd2802bd":"plt.subplot(1,2,1) #This is the first plot in the two column plot in the same row\nplt.plot(x,y,\"r--\")\nplt.subplot(1,2,2)\nplt.plot(y, x, 'g*-')","219ea126":"# Here we specify 2 rows and 2 columns\nplt.subplot(2,2,1) #This refers to the first plot\nplt.plot(x,y,\"r--\")\nplt.subplot(2,2,2) #This refers to the second plot\nplt.plot(x,y,\"g+\")\nplt.subplot(2,2,3) #This refers to the third plot\nplt.plot(x,y,\"r--\")\nplt.subplot(2,2,4) #This refers to the fourth plot\nplt.plot(y,x,\"y+\")\n","a6ac46e2":"fig = plt.figure()\naxes1 = fig.add_axes([0.1,0.1,0.8,0.8])#This numbers represents percentage \naxes1.set_xlabel(\"1. X Label\")\naxes1.set_ylabel(\"1. Y Label\")\naxes2 = fig.add_axes([0.4,0.1,0.8,0.8])\naxes2.set_xlabel(\"2. X Label\")\naxes2.set_ylabel(\"2. Y Label\")\n#The first one refers to left precentage\n#The second one refers to bottom percentage\n#The third one refers to width\n#The fourth one refers to height","960d70db":"fig = plt.figure()\naxes1 = fig.add_axes([0.1,0.1,0.1,0.8])#This numbers represents percentage \naxes1.set_xlabel(\"1. X Label\")\naxes1.set_ylabel(\"1. Y Label\")\naxes2 = fig.add_axes([0.4,0.1,0.8,0.1])\naxes2.set_xlabel(\"2. X Label\")\naxes2.set_ylabel(\"2. Y Label\")","2d274d5e":"#If we change the first item from 0 to 1 we get two figures in a vertical line\nfig = plt.figure()\naxes1 = fig.add_axes([0,1,0.8,0.8]) \naxes1.set_xlabel(\"1. X Label\")\naxes1.set_ylabel(\"1. Y Label\")\naxes2 = fig.add_axes([0,0,0.8,0.8])\naxes2.set_xlabel(\"2. X Label\")\naxes2.set_ylabel(\"2. Y Label\")","4753ac17":"#If we change the second item from 0 to 1 we get two figures in a horizontal line\nfig = plt.figure()\naxes1 = fig.add_axes([0,0,0.8,0.8])#This numbers represents percentage \naxes1.set_xlabel(\"1. X Label\")\naxes1.set_ylabel(\"1. Y Label\")\naxes2 = fig.add_axes([1,0,0.8,0.8])\naxes2.set_xlabel(\"2. X Label\")\naxes2.set_ylabel(\"2. Y Label\")","66c874af":"fig = plt.figure()\naxes1 = fig.add_axes([0,0,0.8,0.8])\naxes1.set_xlabel(\"1. X Label\")\naxes1.set_ylabel(\"1. Y Label\")\naxes2 = fig.add_axes([1,0,0.8,0.8])\naxes2.set_xlabel(\"2. X Label\")\naxes2.set_ylabel(\"2. Y Label\")\naxes3 = fig.add_axes([0,1,0.8,0.8])\naxes3.set_xlabel(\"3. X Label\")\naxes3.set_ylabel(\"3. Y Label\")\naxes4 = fig.add_axes([1,1,0.8,0.8])\naxes4.set_xlabel(\"4. X Label\")\naxes4.set_ylabel(\"4. Y Label\")","366d3991":"fig = plt.figure(figsize=(12,10)) # First we create the figure object\naxes = fig.add_axes([0.1,0.1,0.8,0.8])\naxes.plot(x,y,\"r--\")\naxes.set_xlabel(\"X Label\")\naxes.set_ylabel(\"Y Label\")\naxes.set_title(\"Title\")","6883da36":"fig = plt.figure(figsize=(12,10))\naxes1 = fig.add_axes([0,0,0.8,0.8])\naxes1.set_xlabel(\"X\")\naxes1.set_ylabel(\"Y\")\naxes1.plot(x,y,\"g--\")\naxes2 = fig.add_axes([0.1,0.38,0.4,0.4])\naxes2.set_xlabel(\"Y\")\naxes2.set_ylabel(\"X\")\naxes2.plot(y,x,\"r--\")","c7e633b0":"fig, axes = plt.subplots(nrows=1, ncols=2) # We can specify number of rows and columns with nrows and ncols arguments\n#here we create 2 columns in 1 row","e280c095":"fig, axes = plt.subplots(nrows=1, ncols=2)\naxes[0].plot(x,y,\"r--\")\naxes[1].plot(y,x,\"g*\")","5c9f4f18":"fig,axes = plt.subplots(nrows=2,ncols=3)\n\naxes[0][0].plot(x,y)\naxes[0][1].plot(y,x)\naxes[0][2].plot(x,y)\naxes[1][0].plot(y,x)\naxes[1][1].plot(x,y)\naxes[1][2].plot(y,x)\nplt.tight_layout() # This function will create some space between multiple plots\n","cb4d5cba":"fig,axes = plt.subplots(nrows=2, ncols=1)\naxes[0].plot(x,x**2)\naxes[1].plot(x,x**3)\nfig.savefig(\"test.png\") # here we save the image as a png file","0e842887":"fig,axes = plt.subplots(nrows=2, ncols=1)\naxes[0].plot(x,x**2,\"r--\", label=\"X Squared\")\naxes[0].legend()\naxes[1].plot(x,x**3,label=\"X Cubic\")\naxes[1].legend()","31408c7b":"fig,axes = plt.subplots(nrows=2, ncols=1)\naxes[0].plot(x,x**2,\"r--\", label=\"X Squared\")\naxes[0].legend(loc=4)\naxes[1].plot(x,x**3,label=\"X Cubic\")\naxes[1].legend(loc=10)","6321f4fa":"fig, axes = plt.subplots() # If we do not specify number of rows and columns, it will create a single plot figure\naxes.plot(x,x**2, \"b.-\")\naxes.plot(x,x**3, \"g--\")\naxes.plot(x,x,\"r+\") # we can add any number of lines inside a single plot","1a81d05d":"plt.figure(figsize=(12,20))\nplt.imshow(plt.imread(\"..\/input\/line-examples\/Capture.PNG\"))","53464502":"fig,ax=plt.subplots(figsize=(10,8))\nax.plot(x,x+1, color=\"red\", linestyle=\"solid\", alpha=0.4) #alpha parameter refers to how strong the color will be\nax.plot(x,x+1.5,color=\"green\", linestyle=\"dotted\")\nax.plot(x,x+2,color=\"blue\",linestyle=\"dashed\")\nax.plot(x,x+2.5,color=\"purple\",linestyle=\"dashdot\")\nax.plot(x,x+3,color=\"purple\",linestyle=\":\")","15b07eaf":"fig, ax = plt.subplots(figsize=(12,10))\n\nax.plot(x, x+1, color=\"red\", linewidth=0.25)\nax.plot(x, x+2, color=\"red\", linewidth=0.50)\nax.plot(x, x+3, color=\"red\", linewidth=1.00)\nax.plot(x, x+4, color=\"red\", linewidth=2.00)\n\n# possible linestype options \u2018-\u2018, \u2018\u2013\u2019, \u2018-.\u2019, \u2018:\u2019, \u2018steps\u2019\nax.plot(x, x+5, color=\"green\", lw=3, linestyle='-')\nax.plot(x, x+6, color=\"green\", lw=3, ls='-.')\nax.plot(x, x+7, color=\"green\", lw=3, ls=':')\n\n# custom dash\nline, = ax.plot(x, x+8, color=\"black\", lw=1.50)\nline.set_dashes([5, 10, 15, 10]) # format: line length, space length, ...\n\n# possible marker symbols: marker = '+', 'o', '*', 's', ',', '.', '1', '2', '3', '4', ...\n#Marker refers to interaction point between x and y axis\nax.plot(x, x+ 9, color=\"blue\", lw=3, ls='-', marker='+')\nax.plot(x, x+10, color=\"blue\", lw=3, ls='--', marker='o')\nax.plot(x, x+11, color=\"blue\", lw=3, ls='-', marker='s')\nax.plot(x, x+12, color=\"blue\", lw=3, ls='--', marker='1')\n\n# marker size and color\nax.plot(x, x+13, color=\"purple\", lw=1, ls='-', marker='o', markersize=2)\nax.plot(x, x+14, color=\"purple\", lw=1, ls='-', marker='o', markersize=4)\nax.plot(x, x+15, color=\"purple\", lw=1, ls='-', marker='o', markersize=8, markerfacecolor=\"red\")\nax.plot(x, x+16, color=\"purple\", lw=1, ls='-', marker='s', markersize=8, \n        markerfacecolor=\"yellow\", markeredgewidth=3, markeredgecolor=\"green\");","82d90cb4":"x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\nplt.scatter(x=x, y=y,marker=\"<\",cmap=\"autumn\",color = '#88c999')","ce96c5a3":"x = 4 + np.random.normal(0, 2, 24)\ny = 4 + np.random.normal(0, 2, len(x))\n# size and color:\nsizes = np.random.uniform(15, 80, len(x))\ncolors = np.random.uniform(15, 80, len(x))\n\n# plot\nfig, ax = plt.subplots()\n\nax.scatter(x, y, s=sizes, c=colors, vmin=0, vmax=100)\n","bce68b25":"# make data:\nnp.random.seed(3)\nx = 0.5 + np.arange(8)\ny = np.random.uniform(2, 7, len(x))\n\n# plot\nfig, ax = plt.subplots()\n\nax.bar(x, y, width=1, edgecolor=\"white\", linewidth=0.7)\nplt.style.use(\"classic\")","a7d7b08f":"*We will instantiate figure objects and then call methods or attributes from that object","841c8081":"## 3. Setting Colors, Linewidths, Linetypes","9674e365":"<font color=\"blue\">\n4.2. Bar","18a1f6d5":"<font color=\"green\">\n3.1. Linestyles:","ff58bfb2":"<font color=\"green\">\n    1.1. Basic Plots","18ae34e9":"<font color=\"green\">\n    2.3. Saving Figure, Adding Legend and DPI\n    \nDPI represents pixels per inch in the figure","8670e746":"## 1. Functional Method","d33251ae":"## 4. Matplotlib Plot Types","319f8674":"*The first argument refers to number of rows, the second refers to number of columns, the third one refers to plot number we refer to ","1e75e4ba":"<font color=\"blue\">\nIn this type of plots, the number of columns and rows will be automatically arranged","17ef8e4d":"<font color=\"blue\">\n4.1. Scatter","2af62628":"<font color=\"blue\">\nWe can change the location of the legend by using loc parameter:\nLocation String\n\nLocation Code\n\n'best' : 0\n\n'upper right': 1\n\n'upper left': 2\n\n'lower left': 3\n\n'lower right' : 4\n\n'right' : 5\n\n'center left': 6\n\n'center right' : 7\n\n'lower center': 8\n\n'upper center': 9\n\n'center': 10","0b0a551f":"With matplotlib, we can define the colors of lines and other graphical elements in a number of ways. First of all, we can use the MATLAB-like syntax where 'b' means blue, 'g' means green, etc. The MATLAB API for selecting line styles are also supported: where, for example, 'b.-' means a blue line with dots:","d5006d9f":"<font color=\"green\">\n    2.1. Simle Plots","6829d6ec":"<font color=\"green\">\n    1.2. Multiple Plots","66c29e98":"<font color=\"green\">\n    2.2. Multiple Subplots","98116118":"<font color=\"green\">\nWe can manually decide the size and location of multiple plots","b12acf4f":"## 2. Object Oriented Method"}}