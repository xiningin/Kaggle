{"cell_type":{"9d6ef2eb":"code","6f593233":"code","8a02a24a":"code","8cb8f259":"code","2dd662a6":"code","d0064cb5":"code","2859ff18":"code","7a6de4e2":"code","bbb84d27":"code","b8e84e1c":"code","539eb3e1":"code","119d4039":"code","a86861e1":"code","0a5047cb":"code","7cbbe80c":"code","738d2aed":"code","d2aadfb8":"code","f2e52f47":"code","17e166d6":"code","421fe94a":"code","8d384927":"code","26f6aa09":"markdown","b93bd39b":"markdown","c2cb9759":"markdown","f5482049":"markdown","54bad267":"markdown","49c4392f":"markdown","db1001c4":"markdown","eec18179":"markdown","c0402186":"markdown"},"source":{"9d6ef2eb":"import numpy as np\nimport pandas as pd\nimport datetime\nimport matplotlib.pyplot as plt\n%matplotlib inline","6f593233":"# to use the csvvalidator package, you'll need to \n# install it. Turn on the internet (in the right-hand\n# panel; you'll need to have phone validated your account)\n\nimport sys\n!{sys.executable} -m pip install csvvalidator","8a02a24a":"df = pd.read_csv(\"..\/input\/bus-breakdown-and-delays.csv\")\ndf.head(10)","8cb8f259":"df = df[[\"School_Year\",\"Reason\",\"Number_Of_Students_On_The_Bus\",\"Occurred_On\"]]\ndf.head(7)","2dd662a6":"df.dropna(inplace=True)\ndf.head(12)","d0064cb5":"df['Occurred_On'] = pd.to_datetime(df['Occurred_On'])\ndf.head(15)","2859ff18":"len(df)","7a6de4e2":"### Validating\n\n# import everything from the csvvalidator package\nfrom csvvalidator import *\n\n# Specify which fields (columns) your .csv needs to have\n# You should include all fields you use in your dashboard\nfield_names = (\"School_Year\",\"Reason\",\"Number_Of_Students_On_The_Bus\",\"Occurred_On\")\n\n# create a validator object using these fields\nvalidator = CSVValidator(field_names)\n\n# write some checks to make sure specific fields \n# are the way we expect them to be\nvalidator.add_value_check(\"School_Year\", # the name of the field\n                          str, \n                          'EX1', # code for exception\n                          'School_Year invalid'# message to report if error thrown\n                         )\nvalidator.add_value_check(\"Reason\", \n                          # check for a date with the sepcified format\n                          str, \n                          'EX2',\n                          'Reason'\n                         )\nvalidator.add_value_check('Number_Of_Students_On_The_Bus',\n                          # makes sure the number of units sold is an integer\n                          int,\n                          'EX3',\n                          'Number_Of_Students_On_The_Bus invalid'\n                         )\nvalidator.add_value_check(\"Occurred_On\", \n                          str,\n                          'EX4', \n                          'Occurred_On\" invalid')\n\nresults = validator.validate(df)","bbb84d27":"lines_remove = []\nfor di in results:\n    lines_remove.append(di['row'])\n    \ndf.drop(df.index[lines_remove],inplace=True)\n    ","b8e84e1c":"len(df)","539eb3e1":"newdf = pd.DataFrame(df[\"School_Year\"].value_counts())\nnewdf.rename(index=str, columns={\"School_Year\": \"Bus Breakdowns\"},inplace=True)\nnewdf.index.name = \"Year\"\nnewdf.sort_index(ascending=True,inplace=True)\nnewdf","119d4039":"from matplotlib.pyplot import figure\n\nnewdf.plot.bar(align='center', alpha=0.8,color='blue')\nplt.title(\"Counting the number of bus breakdowns per school year\")\nplt.show()","a86861e1":"import plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n\n# copying df to insert new index and make manipulation easier\nnewdf2 = newdf.copy()\nnewdf2.reset_index(level=0, inplace=True)\n\ndata = [\n    go.Bar(\n        x=newdf2['Year'], # assign x as the dataframe column 'x'\n        y=newdf2['Bus Breakdowns']\n    )\n]\n\n# specify the layout of our figure\nlayout = dict(title = \"Number of Bus Breakdowns per School Year\",\n              xaxis= dict(title= 'Year',ticklen= 5,zeroline= False))\n\n# create and show our figure\nfig = dict(data = data, layout = layout)\niplot(fig)\n","0a5047cb":"df2 = df[[\"School_Year\",\"Reason\"]]\n\n\nfor ano in df2[\"School_Year\"].unique():\n    f, axes = plt.subplots(figsize=(8,8))\n    dados = df2.loc[df[\"School_Year\"] == ano]\n    dados = pd.DataFrame(dados[\"Reason\"].value_counts())\n    \n    total = sum(dados[\"Reason\"])\n    novo = [x\/total for x in dados[\"Reason\"]]\n    dados[\"Fraction\"] = novo\n\n    axes.pie(dados[\"Fraction\"],labels=dados.index, autopct='%.2f')\n    plt.title(\"Year \"+ str(ano))\n    plt.show()\n    plt.close('all')\n    \n    \n    \n","7cbbe80c":"## organizing data\ndf3 = df[[\"School_Year\",\"Reason\"]]\ndf3.reset_index(level=0, inplace=True)\n\n\n\n\nyear = \"2015-2016\"\ndf3.loc[df3[\"School_Year\"]== year]\n\ndados = pd.DataFrame(df3[\"Reason\"].value_counts())\n\ntotal = sum(dados[\"Reason\"])\nnovo = [x\/total for x in dados[\"Reason\"]]\ndados[\"Fraction\"] = novo\ndados.reset_index(level=0, inplace=True)\ndados[\"Reason\"] = dados[\"index\"]\ndados.drop([\"index\"],axis=1,inplace=True)\ndados.head()","738d2aed":"import plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n\n\n\ndata = [\n    go.Pie(\n        labels=dados[\"Reason\"],\n        values=dados[\"Fraction\"]\n    )\n]\n\n# specify the layout of our figure\nlayout = dict(title = \"Reasons of Bus Breakdowns\")\n\n# create and show our figure\nfig = dict(data = data, layout = layout)\niplot(fig)\n\n\n\n","d2aadfb8":"interest = df.loc[df['School_Year'] == '2018-2019']\ninterest.set_index(pd.to_datetime(interest[\"Occurred_On\"]),inplace=True)\ninterest.drop([\"School_Year\",\"Reason\",\"Occurred_On\"],axis = 1, inplace= True)\ninterest.head(10)","f2e52f47":"interest = interest['Number_Of_Students_On_The_Bus'].resample('D').sum()\ninterest.head(10)","17e166d6":"from matplotlib.pyplot import figure\nfigure(num=None, figsize=(10, 6), dpi=80, facecolor='w', edgecolor='k')\nplt.plot(interest)\nplt.gcf().autofmt_xdate()\nplt.title(\"Students affected per day in 2018-2019\")\nplt.show()","421fe94a":"## organizing data\nnewdf = interest.to_frame()\nnewdf.reset_index(level=0, inplace=True)\nnewdf.head(4)","8d384927":"import plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n\ntrace1 = go.Scatter(\n    x = newdf[\"Occurred_On\"],\n    y = newdf[\"Number_Of_Students_On_The_Bus\"],\n    mode = 'lines+markers',\n    name = 'lines+markers'\n)\n\n# specify the layout of our figure\nlayout = dict(title = \"Students Affected by Day\")\n\n# create and show our figure\nfig = dict(data = [trace1], layout = layout)\niplot(fig)","26f6aa09":"## Visualizing with plotly","b93bd39b":"## Visualizing with plotly","c2cb9759":"# Visualizing: Proportion of reasons for bus breakdowns per year\n\n1. Organizing data\n2. Plotting data","f5482049":"# Visualizing: Number of students affected daily\n\n1. Organizing data\n2. Set interval: Days in 2018\n3. Visualize data","54bad267":"# Dashboarding with Jupyter Notebooks\n\nBy [Elloa B. Guedes](http:\/\/www.github.com\/elloa)\n\n* Working with data from [NY Bus Breakdown and Delays](https:\/\/www.kaggle.com\/new-york-city\/ny-bus-breakdown-and-delays)\n","49c4392f":"There is some problem on data:\n\n1. _Missing values_: If any entry is missing, the example is going to be droped\n2. _Convert to time series_: Values of Occured on","db1001c4":"## Visualizing: Number of bus-breakdown per school-year\n\n1. Organizing data\n2. Formating beautiful plot","eec18179":"Considering the data available in this dataset, I've decided to dashboard the following information:\n\n- Number of bus breakdowns per school-year\n- Proportion of reasons for bus breakdowns per year\n- Number of students affected daily\n\nThe following attributes are important in our context:\n\n1. **School_Year**: Indicates the school year the record refers to. The DOE school year starts in September every year.  \n2. **Reason**: Reason for delay as entered by staff employed by reporting bus vendor. User chooses from the following categories:  \n  2.1 Accident  \n  2.2 Delayed by School\n  2.3 Flat Tire  \n  2.4 Heavy Traffic  \n  2.5 Mechanical Problem  \n  2.6 Other   \n  2.7 Problem Run  \n  2.8 Weather Conditions   \n  2.9 Won't Start  \n3. **Number_Of_Students_On_The_Bus**: Number of students on the bus at the time of the incident as estimated by the staff employed\n4. **Occurred_On**: timestamp","c0402186":"## Visualizing pie chart with plotly"}}