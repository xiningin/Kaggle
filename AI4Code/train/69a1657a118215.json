{"cell_type":{"19b2690b":"code","470a5ae5":"code","7793750a":"code","340150d7":"code","437226c0":"code","fd4acd76":"code","37d4647e":"code","e8cfb453":"code","3ae3f48e":"code","ff4ef9a2":"code","7618e511":"code","21a0004c":"code","e9939cc0":"code","780f2976":"code","69251c0e":"code","f3b0afcc":"code","a9242db1":"code","b9e17728":"code","6e9f792c":"code","cf99c55e":"code","29f0f650":"code","568907d4":"code","10474bcc":"code","e9924e4c":"code","9f2a8d16":"code","386d7fe4":"code","4135dc12":"code","00781987":"code","9d793929":"code","2271c3e6":"code","4d39b67f":"code","5128778a":"code","c91a5891":"code","c80dca12":"code","ffbf609a":"code","7edb3979":"code","674a13ee":"code","501665b9":"code","fdbbec2f":"code","e7f56388":"code","8b08c6b1":"code","c53735ce":"code","58440aac":"code","2acc6d5b":"code","3d1d1873":"code","13ab4894":"code","206c9a27":"markdown","fabf48e7":"markdown","95a11c4e":"markdown","44cb47d1":"markdown","9b97dbaa":"markdown","6936418a":"markdown","48817b17":"markdown","27503322":"markdown","4267ec6d":"markdown","f3ca2909":"markdown","daefec05":"markdown","68b0791f":"markdown","709f9e5a":"markdown","135fabc3":"markdown","437bf58b":"markdown","84b12d51":"markdown","7d517c90":"markdown","788f1e45":"markdown","8e09025b":"markdown","6856e7d2":"markdown"},"source":{"19b2690b":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","470a5ae5":"print(os.listdir('..\/input'))","7793750a":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","340150d7":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","437226c0":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","fd4acd76":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# air_traffic_data.csv has 15007 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('..\/input\/air_traffic_data.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'air_traffic_data.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","37d4647e":"df1.head(10)","e8cfb453":"plotPerColumnDistribution(df1, 10, 5)","3ae3f48e":"plotCorrelationMatrix(df1, 8)","ff4ef9a2":"plotScatterMatrix(df1, 12, 10)","7618e511":"df1.dtypes","21a0004c":"numerical = [var for var in df1.columns if df1[var].dtype!='O'] #check numerical columns\ncategorical = [var for var in df1.columns if df1[var].dtype == 'O'] #check object columns\n\nprint('There are {} numerical variables'.format(len(numerical)))\nprint('There are {} categorical variables'.format(len(categorical)))","e9939cc0":"df1.isnull().sum()","780f2976":"#drop the only row which has NaN value\ndf1 = df1.dropna()\n\nprint(df1.shape)","69251c0e":"df1.head()","f3b0afcc":"grouped_by_airline = df1.groupby(\"Operating Airline\").agg\\\n({ \n    \"Operating Airline IATA Code\" : \"count\",\n    \"Passenger Count\" : lambda x : np.mean(x), #mean passengers count by airlines\n    \"Adjusted Passenger Count\" : lambda x : np.mean(x) #mean adjusted passengerscount by airlines\n\n})\n\ngrouped_by_airline.rename(columns = {\"Operating Airline IATA Code\" : \"nb_flights\", \n                                   \"Passenger Count\" : \"mean_passenger_count\", \n                                   \"Adjusted Passenger Count\" : \"mean_adjusted_passenger_count\"}, \n                          inplace = True)\n\ngrouped_by_airline = grouped_by_airline.sort_values(by = \"nb_flights\", ascending = False)\n\ngrouped_by_airline.head(10).round()","a9242db1":"def to_lower(data):\n    \"\"\"\n    All columns in lower strings and underscored\n    \"\"\"    \n    data.columns = map(lambda col: col.lower().replace(\" \", \"_\"), data.columns)\n    \n    return data\n\ndef count_frequency(data, col, colname=\"frequency\"):\n    \"\"\"\n    Create a column from dataframe named frequency   \n    \"\"\"\n    data[colname] = data.groupby(col)[col].transform('count')\n\n    return data\n\n# Dumify the object column\ndef dummify(data):\n    \"\"\"\n    Dummify data columns object\n    \"\"\"\n    dummify = data.loc[:, data.dtypes == object]\n    for col in dummify.columns:\n        df = pd.get_dummies(data[col], drop_first=True, prefix=col)\n        data = pd.concat([data, df], axis=1)\n\n    return data\n\ndef transform_df(data):\n    \"Wrapper of all functions\"\n    data = to_lower(data)\n    data = count_frequency(data, 'operating_airline')\n    data = dummify(data)\n    \n    return data","b9e17728":"df1 = df1.drop(columns=['year', 'month'])\ndf1 = transform_df(df1)\n\nprint(df1.shape)","6e9f792c":"df1.head().T","cf99c55e":"prep_data = df1.copy()\n\nprep_data = prep_data.drop(columns = prep_data.loc[:, prep_data.dtypes == object]) #drop all categorical columns","29f0f650":"## Without a constant\nimport statsmodels.api as sm\n\nX = prep_data.drop(['adjusted_passenger_count', 'passenger_count'], axis=1)\ny = prep_data[\"adjusted_passenger_count\"]\n\n# Note the difference in argument order\nmodel = sm.OLS(y, X).fit()\npredictions = model.predict(X) # make the predictions by the model\n\n# Print out the statistics\nmodel.summary()","568907d4":"df1.adjusted_passenger_count.mean()","10474bcc":"from sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_auc_score, roc_curve, auc, precision_recall_curve\nfrom sklearn.model_selection import train_test_split","e9924e4c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\nprint(\"X train: \", X_train.shape)\nprint(\"X test: \", X_test.shape)\nprint(\"y train: \", y_train.shape)\nprint(\"y test: \", y_test.shape)","9f2a8d16":"# fit scaler\nscaler = StandardScaler() # create an instance\nscaler.fit(X_train) #  fit  the scaler to the train set","386d7fe4":"# feature scaling\nfrom sklearn.preprocessing import StandardScaler\n\n# for tree binarisation\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import cross_val_score\n\n# to build the models\nfrom sklearn.linear_model import LinearRegression, Lasso\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nimport xgboost as xgb\n\n# to evaluate the models\nfrom sklearn.metrics import mean_squared_error\n\npd.pandas.set_option('display.max_columns', None)","4135dc12":"xgb_model = xgb.XGBRegressor()\n\neval_set = [(X_test, y_test)]\nxgb_model.fit(X_train, y_train, eval_set=eval_set, verbose=False)\n\npred = xgb_model.predict(X_train)\nprint('xgb train mse: {}'.format(mean_squared_error(y_train, pred)))\npred = xgb_model.predict(X_test)\nprint('xgb test mse: {}'.format(mean_squared_error(y_test, pred)))","00781987":"importance = pd.Series(xgb_model.feature_importances_)\nimportance.index = X_train.columns\nimportance.sort_values(inplace=True, ascending=False)\nimportance.head(10).plot.barh(figsize=(18,6))","9d793929":"rf_model = RandomForestRegressor()\nrf_model.fit(X_train, y_train)\n\npred = rf_model.predict(X_train)\nprint('rf train mse: {}'.format(mean_squared_error(y_train, pred)))\npred = rf_model.predict(X_test)\nprint('rf test mse: {}'.format(mean_squared_error(y_test, pred)))","2271c3e6":"importance = pd.Series(rf_model.feature_importances_)\nimportance.index = X_train.columns\nimportance.sort_values(inplace=True, ascending=False)\nimportance.head(10).plot.barh(figsize=(18,6))","4d39b67f":"lr = LinearRegression()\nmodel = lr.fit(X_train,y_train)","5128778a":"predictions = lr.predict(X_test)","c91a5891":"lr.score(X_test, y_test)","c80dca12":"lr.intercept_","ffbf609a":"#to see the relationship between the training data values\n#plt.scatter(X_train['activity_period'], y_train, c='red')\n#plt.show()\n\n#to see the relationship between the predicted \n#brain weight values using scattered graph\nplt.plot(X_test, predictions)   \n#plt.scatter(X_test['activity_period'], y_test,c='red')\nplt.xlabel('act')\nplt.ylabel('Passenger count')\n\n#errorin each value\n#for i in range(0,60):\n#    print(\"Error in value number\",i,(y_test[i]-predictions[i]))\n#    time.sleep(1)\n\n#combined rmse value\nrss=((y_test-predictions)**2).sum()\nmse=np.mean((y_test-predictions)**2)\nprint(\"Final rmse value is =\",np.sqrt(np.mean((y_test-predictions)**2)))","7edb3979":"lasso = Lasso(random_state=2909)\nlasso.fit(scaler.transform(X_train), y_train)\n\npred = lasso.predict(scaler.transform(X_train))\nprint('linear train rmse: {}'.format(np.sqrt(mean_squared_error(y_train, pred))))\npred = lasso.predict(scaler.transform(X_test))\nprint('linear test rmse: {}'.format(np.sqrt(mean_squared_error(y_test, pred))))","674a13ee":"importance = pd.Series(np.abs(lasso.coef_.ravel()))\nimportance.index = X_train.columns\nimportance.sort_values(inplace=True, ascending=False)\nimportance.head(10).plot.barh(figsize=(18,6))","501665b9":"from sklearn.metrics import mean_squared_error\n\ndef regressionPlot(lasso,X_test,y_test, title):\n    pred = lasso.predict(scaler.transform(X_test))\n    plt.figure(figsize=(10,6))\n    plt.scatter(pred,y_test,cmap='plasma')\n    plt.title(title)\n    plt.show()\n    print('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, pred)))","fdbbec2f":"regressionPlot(lasso, X_test, y_test, \"Lasso Model\")","e7f56388":"cols = []\n\nimportance = pd.Series(np.abs(lasso.coef_.ravel()))\nimportance.index = X_train.columns\nimportance = importance.sort_values(ascending=False)\nimportance.head(10).plot.barh(figsize=(18,6))","8b08c6b1":"pd.DataFrame(importance, ).head(10)","c53735ce":"df1['airline'] = 'Other'\n\ndf1.loc[df1[\"operating_airline\"] == 'United Airlines - Pre 07\/01\/2013', 'airline'] = 'United Airlines - Pre 07\/01\/2013'\ndf1.loc[df1[\"operating_airline\"] == 'Alaska Airlines', 'airline'] = 'Alaska Airlines'\ndf1.loc[df1[\"operating_airline\"] == 'SkyWest Airlines', 'airline'] = 'SkyWest Airlines'\ndf1.loc[df1[\"operating_airline\"] == 'Northwest Airlines', 'airline'] = 'Northwest Airlines'\ndf1.loc[df1[\"operating_airline\"] == 'Delta Air Lines', 'airline'] = 'Delta Air Lines'\ndf1.loc[df1[\"operating_airline\"] == 'US Airways', 'airline'] = 'US Airways'\ndf1.loc[df1[\"operating_airline\"] == 'ATA Airlines', 'airline'] = 'ATA Airlines'\n\n\ndf1['region'] = 'Other'\n\ndf1.loc[df1['geo_region'] == 'US', 'region'] = 'US'\ndf1.loc[df1['geo_region'] == 'Asia', 'region'] = 'Asia'\ndf1.loc[df1['geo_region'] == 'Europe', 'region'] = 'Europe'\ndf1.loc[df1['geo_region'] == 'Canada', 'region'] = 'Canada'","58440aac":"df1.columns","2acc6d5b":"df1 = df1.drop(columns=['year', 'month', 'operating_airline', 'geo_region', 'adjusted_activity_type_code'])\ndf1 = to_lower(df1)\ndf1 = count_frequency(df1, 'airline')\ndf1 = dummify(df1)\n\n\nprint(df1.shape)","3d1d1873":"prep_data = df1.copy()\nprep_data = prep_data.dropna()\nprep_data = prep_data.drop(columns = prep_data.loc[:, prep_data.dtypes == object]) #drop all categorical columns\n\nX = prep_data.drop(['adjusted_passenger_count', 'passenger_count'], axis=1)\ny = prep_data[\"adjusted_passenger_count\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\nprint(\"X train: \", X_train.shape)\nprint(\"X test: \", X_test.shape)\nprint(\"y train: \", y_train.shape)\nprint(\"y test: \", y_test.shape)","13ab4894":"lasso = Lasso(random_state=2909)\nlasso.fit(scaler.transform(X_train), y_train)\n\npred = lasso.predict(scaler.transform(X_train))\nprint('linear train rmse: {}'.format(np.sqrt(mean_squared_error(y_train, pred))))\npred = lasso.predict(scaler.transform(X_test))\nprint('linear test rmse: {}'.format(np.sqrt(mean_squared_error(y_test, pred))))","206c9a27":"### LINEAR REGRESSION","fabf48e7":"Grouping by Airline","95a11c4e":"### XGB REGRESSOR","44cb47d1":"### Let's check 1st file: ..\/input\/air_traffic_data.csv","9b97dbaa":"Let's take a quick look at what the data looks like:","6936418a":"### RANDOM FOREST REGRESSOR","48817b17":"Now you're ready to read in the data and use the plotting functions to visualize the data.","27503322":"## NEW MODELS","4267ec6d":"Scatter and density plots:","f3ca2909":"Correlation matrix:","daefec05":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Fork Notebook\" button at the top of this kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","68b0791f":"Let's check columns dtypes","709f9e5a":"## Introduction\nGreetings from the Kaggle bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. If you're inspired to dig deeper, click the blue \"Fork Notebook\" button at the top of this kernel to begin editing.","135fabc3":"### LASSO","437bf58b":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","84b12d51":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","7d517c90":"Distribution graphs (histogram\/bar graph) of sampled columns:","788f1e45":"> Check if any missing values","8e09025b":"There is 1 csv file in the current version of the dataset:\n","6856e7d2":" ## FEATURE ENGINEERING"}}