{"cell_type":{"55aee085":"code","43324fe9":"code","7c615d64":"code","84de4be1":"code","16e29465":"code","83f8c1bb":"code","e0692b10":"code","62e47fc8":"code","00bdac28":"code","90c4c76b":"code","fd0c266d":"code","0cabfad4":"code","947944a8":"code","3c9f2db0":"code","119b30b7":"code","7fcd19aa":"code","2877b0be":"code","0a905388":"code","867fb0ff":"code","fb41160c":"code","72f2319d":"code","2484ab73":"code","1aa6c7a1":"code","6a708674":"code","d24f92ed":"code","3a45b657":"code","48ae345f":"code","28b09c14":"code","f46079ed":"markdown","a6f10cf4":"markdown","fafc0b71":"markdown","75e58070":"markdown","1d273c7d":"markdown","eae97c5a":"markdown","8778563b":"markdown","35b13547":"markdown","160d867c":"markdown","379ddee5":"markdown","1c575149":"markdown","26453bdf":"markdown","e80fb5d5":"markdown","6d8d0435":"markdown","61ec6da7":"markdown","24f8bed6":"markdown","d60a6fb6":"markdown","3e8d0d20":"markdown","85136097":"markdown","c0ff11a0":"markdown","9b2e426d":"markdown","c3acacd7":"markdown","2d9ff7c6":"markdown","ed54e875":"markdown","7e40d08e":"markdown","fba7a44b":"markdown","af81f8c4":"markdown","844ef23b":"markdown","f05753d0":"markdown","57b700a0":"markdown","f0dbff5a":"markdown"},"source":{"55aee085":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode, download_plotlyjs, iplot\nimport cufflinks as cf\ninit_notebook_mode(connected=True)\ncf.go_offline()\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nprint()\nprint(\"The files in the dataset are:-\")\nfrom subprocess import check_output\nprint(check_output(['ls','..\/input']).decode('utf'))\n\n# Any results you write to the current directory are saved as output.","43324fe9":"# Importing the dataset.\ndf_train = pd.read_csv(\"..\/input\/credit_train.csv\")\ndf_test = pd.read_csv(\"..\/input\/credit_test.csv\")","7c615d64":"# Let us check the top 5 entries in training dataset.\ndf_train.head()","84de4be1":"# We need to convert the values of years in current job into integer format.\ndf_train['Years in current job'] = df_train['Years in current job'].map({'8 years':8, '10+ years':15,\n                                        '3 years':3, '5 years':5, '< 1 year':0.5, \n                            '2 years':2, '4 years':4, '9 years':9, '7 years':7, '1 year':1, '6 years':6})\n\ndf_test['Years in current job'] = df_test['Years in current job'].map({'8 years':8, '10+ years':15,\n                                        '3 years':3, '5 years':5, '< 1 year':0.5, \n                            '2 years':2, '4 years':4, '9 years':9, '7 years':7, '1 year':1, '6 years':6})\n# Run it one time on the secons time the all values become NaN.\n# To solve this problem, run the code from beginning.","16e29465":"temp_df = df_train.isnull().sum().reset_index()\ntemp_df['Percentage'] = (temp_df[0]\/len(df_train))*100\ntemp_df.columns = ['Column Name', 'Number of null values', 'Null values in percentage']\nprint(f\"The length of dataset is \\t {len(df_train)}\")\ntemp_df","83f8c1bb":"# Let's remove unwanted columns\ntry:\n    df_test.drop(labels=['Loan ID', 'Customer ID'], axis=1, inplace=True)\n    df_train.drop(labels=['Loan ID', 'Customer ID'], axis=1, inplace=True)\n    \n    \nexcept Exception as e:\n    pass","e0692b10":"sns.countplot(data=df_train, x='Term')\nplt.show()","62e47fc8":"df_train['Term'].fillna(value='Short Term', inplace=True)\ndf_test['Term'].fillna(value='Short Term', inplace=True)\n","00bdac28":"sns.countplot(data=df_train, x='Home Ownership')\nplt.show()","90c4c76b":"df_train['Home Ownership'].unique()","fd0c266d":"df_train['Home Ownership'].fillna(value='Home Mortgage', inplace=True)\ndf_test['Home Ownership'].fillna(value='Home Mortgage', inplace=True)","0cabfad4":"sns.countplot(data=df_train, x='Purpose')\nplt.xticks(rotation=90)\nplt.show()","947944a8":"df_train['Purpose'].fillna(value='Debt Consolidation', inplace=True)\ndf_test['Purpose'].fillna(value='Debt Consolidation', inplace=True)","3c9f2db0":"sns.countplot(data=df_train, x='Loan Status')\nplt.xticks(rotation=90)\nplt.show()","119b30b7":" # Let us plot the same graph but inter-active this time with the help of plotly.\n    \ncount = df_train['Loan Status'].value_counts().reset_index()\ncount.iplot(kind='bar', x='index', y='Loan Status', xTitle='Loan Status', yTitle='Frequency',\n           color='deepskyblue', title='Fully Paid VS Charged off')","7fcd19aa":"df_train['Loan Status'].fillna(value='Fully Paid', inplace=True)","2877b0be":"# Let us Import the Important Libraries  to train our Model for Machine Learning \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder # To deal with Categorical Data in Target Vector.\nfrom sklearn.model_selection import train_test_split  # To Split the dataset into training data and testing data.\nfrom sklearn.model_selection import cross_val_score   # To check the accuracy of the model.\nfrom sklearn.preprocessing import Imputer   # To deal with the missing values\nfrom sklearn.preprocessing import StandardScaler   # To appy scaling on the dataset.","0a905388":"# Convert DataFrame into array.\nx_train = df_train.drop(labels='Loan Status', axis=1).values\ny_train = df_train['Loan Status'].values\nx_test = df_test.values","867fb0ff":"imputer = Imputer()\nx_train[:, [0,2,3,4,7,8,9,10,11,12,13,14,15]]  = imputer.fit_transform(x_train[:, [0,2,3,4,7,8,9,10,11,12,13,14,15]])\nx_test[:, [0,2,3,4,7,8,9,10,11,12,13,14,15]]  = imputer.fit_transform(x_test[:, [0,2,3,4,7,8,9,10,11,12,13,14,15]])\n","fb41160c":"labelencoder_x = LabelEncoder()\nx_train[:, 1 ] = labelencoder_x.fit_transform(x_train[:,1 ])\nx_train[:, 5 ] = labelencoder_x.fit_transform(x_train[:,5 ])\nx_train[:, 6 ] = labelencoder_x.fit_transform(x_train[:,6 ])\n\n#this is need to done when we have more than two categorical values.\nonehotencoder_x = OneHotEncoder(categorical_features=[1,5,6]) \nx_train = onehotencoder_x.fit_transform(x_train).toarray()\n\n# Let's apply same concept on test set.\nx_test[:, 1 ] = labelencoder_x.fit_transform(x_test[:,1 ])\nx_test[:, 5 ] = labelencoder_x.fit_transform(x_test[:,5 ])\nx_test[:, 6 ] = labelencoder_x.fit_transform(x_test[:,6 ])\n\nonehotencoder_x = OneHotEncoder(categorical_features=[1,5,6]) \nx_test = onehotencoder_x.fit_transform(x_test).toarray()","72f2319d":"labelencoder_y=LabelEncoder()\ny_train = labelencoder_y.fit_transform(y_train)","2484ab73":"sc_X=StandardScaler()\nx_train=sc_X.fit_transform(x_train)\nx_test = sc_X.fit_transform(x_test)","1aa6c7a1":"from sklearn.decomposition import PCA\npca = PCA(n_components=None)\nx_train = pca.fit_transform(x_train)\nx_test = pca.fit_transform(x_test)\nexplained_variance = pca.explained_variance_ratio_\nexplained_variance","6a708674":"pca = PCA(n_components=25)\nx_train = pca.fit_transform(x_train)\nx_test = pca.fit_transform(x_test)","d24f92ed":" # Apply Logistic regression\n    # First step is to train our model .\n\nclassifier_logi = LogisticRegression()\nclassifier_logi.fit(x_train,y_train)\n\n# Let us check the accuracy of the model with k-cross validation.\naccuracy = cross_val_score(estimator=classifier_logi, X=x_train, y=y_train, cv=10)\nprint(f\"The accuracy of the Logistic Regressor Model is \\t {accuracy.mean()}\")\nprint(f\"The deviation in the accuracy is \\t {accuracy.std()}\")","3a45b657":"# Train Model\n\"\"\"classifier_ran = RandomForestClassifier()\nclassifier_ran.fit(x_train,y_train)\n\n# Check the accuracy and deviation in the accuracy\naccuracy = cross_val_score(estimator=classifier_ran, X=x_train, y=y_train, cv=10)\nprint(f\"The accuracy of the Random Forest Model is \\t {accuracy.mean()}\") \nprint(f\"The deviation in the accuracy is \\t {accuracy.std()}\")\"\"\"\n# Here we are getting the accuracy of 79%. \nprint(\"In Random Forest Model we are getting the accuracy of 79%\")","48ae345f":"print(np.unique(y_train))\nprint(y_train[:10])\nprint(\"Here 1 indicates 'Fully Paid'. And 0 indicates 'Charged Off' \")","28b09c14":"y_pred = classifier_logi.predict(x_test)\n\n# Let us convert 1 and 0 into Fully Paid and Charged off respectively\ny_pred = list(map(lambda x: 'Fully Paid' if x==1 else 'Charged Off' ,y_pred))\ny_pred = np.array(y_pred)\ny_pred[:5]","f46079ed":"### Let us deal with the categorical values in the training and test dataset.","a6f10cf4":"# BASIC ANALYSIS","fafc0b71":"<img src='https:\/\/drive.google.com\/uc?id=1LZz7B6QHtupGwocuejQrx2RFK3ck178F' width=1000 >","75e58070":"* As maximum are from 'Short Term' then we will replace the missing values with the 'Short Term' .","1d273c7d":"#### 2). Apply Random Forest Model","eae97c5a":"### =================================================================\n","8778563b":"* Here Home Mortage and Rent values are at the same number of count.\n* So we willl replace it by Home Mortgage.","35b13547":"# PREDICTION WITH ML MODELS:-","160d867c":"#### 1). With 'Term' column.","379ddee5":"* Here we eill replace missing values with Fully Paid.","1c575149":"# ML FROM SCRATCH WITH LOAN STATUS PREDICTION","26453bdf":"# IF THIS KERNEL IS HELPFUL, THEN PLEASE UPVOTE.\n<img src='https:\/\/drive.google.com\/uc?id=1LBdaJj2pTM0cq9PY6k70RaGfUFDakUzG' width=500 >","e80fb5d5":"* Here we will take n_componemt = 25, ","6d8d0435":"#### Let us check the null values in the dataset.","61ec6da7":"### APPLY LOGISTIC REGRESSION AND RANDOM FOREST MODEL AND CHECK ACCURACY FOR EACH MODEL \n### AND SELECT THE BEST ONE.","24f8bed6":"#### Here we will choose Logistic Regression model.\n* In Logistic Regression we are getting the accuracy of 82% .\n* Here deviation in the accuracy is 2%, means if we predict on new values then our accuracy will lies in range of 80% to 84% . \n* It also indicates that the problem is Linear.\n* By this We can eliminate all other models.","d60a6fb6":"### 3). With 'Purpose' column","3e8d0d20":"### DIMENSIONALITY REDUCTION\n* We are doing this to reduce the number of dimensions\/features in the dataset.\n* The features which have less effect on the prediction , we will remove those features.\n* It also boosts the process.\n* It saves time.\n* Here we will use Principal Component Analysis (PCA) with 'rbf' kernel.","85136097":"### Let us deal with Missing data","c0ff11a0":"### Let us apply scaling on the dataset.","9b2e426d":"### Let us Predict on Test Set.","c3acacd7":"* 50% of data in Months since last delinquest column is fill with null values.\n* We can remove this column but now we are removing this column.\n* We will fill these values later with it's mean values.\n","2d9ff7c6":"### Let us deal with missing values in categorical data.","ed54e875":"### =============================================================","7e40d08e":"### =======================================================================\n### =======================================================================\n### =======================================================================\n### =======================================================================","fba7a44b":"#### 1). Apply Logistic Regression","af81f8c4":"### ==========================================================","844ef23b":"* Here we will replace missing values with 'Debt Consolidation'. ","f05753d0":"#### 2). With 'Home Ownership' coulmn","57b700a0":"### In this Notebook we will Learn:-\n* Basic EDA.\n* Dealing with missing values.\n* Aplly Scaling on Feature matrix.\n* Spliting the Dataset into training set and test set.\n* Dealing with Categorical Dataset.\n* Dimensionality Reduction (PCA) .\n* K-Cross validation to check accuracy.\n* Logistic Regression    \n* Random Forest\n* Prediction on new Values.","f0dbff5a":"#### 4). With 'Loan Status' column."}}