{"cell_type":{"b65a45ab":"code","1090a1ad":"code","5d8c6297":"code","35761734":"code","a983b41e":"code","9b573b2b":"code","3180a3b9":"code","bb889d8a":"code","bf2cb927":"code","bb4a6fb0":"code","5dae6cd8":"code","0a6fbe41":"code","202fed0d":"code","ad18ef48":"code","8a4d1e1e":"code","a11b5591":"code","d38f6af8":"code","8629843b":"code","d9843e57":"code","8801ee61":"code","acb22e9f":"code","d00226a0":"code","59da4284":"code","f2745440":"code","16628d67":"code","856089fa":"code","efe14a7e":"code","d0efa615":"code","c5a46257":"markdown","03710e2e":"markdown","6162481a":"markdown","c8f238ff":"markdown","fb43a307":"markdown","9d1b606b":"markdown","47ab5420":"markdown","3db3a654":"markdown","665ce164":"markdown","406ae69c":"markdown","4ffb1751":"markdown","e4f2855d":"markdown","97ce857c":"markdown","04c12b52":"markdown","2ac28dd0":"markdown","09eafa6d":"markdown","30b19293":"markdown"},"source":{"b65a45ab":"# Importing necessary libraries\nimport numpy as np\nimport os\nimport glob\nimport cv2\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pickle\nfrom keras.utils import to_categorical\nfrom keras.layers import Dense, Input, Conv2D, Flatten, MaxPooling2D, Activation,Dropout,BatchNormalization\nfrom keras.optimizers import Adamax\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom keras.models import Model\nfrom keras.callbacks import ModelCheckpoint\nfrom keras import backend as K\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\nfrom keras.utils import to_categorical\nfrom keras import backend as k\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np","1090a1ad":"#Declaring constants\nFIG_WIDTH=20 # Width of figure\nHEIGHT_PER_ROW=3 # Height of each row when showing a figure which consists of multiple rows\nRESIZE_DIM=32 # The images will be resized to 28x28 pixels","5d8c6297":"data_dir=os.path.join('..','input')\npaths_train_a=glob.glob(os.path.join(data_dir,'training-a','*.png'))\npaths_train_b=glob.glob(os.path.join(data_dir,'training-b','*.png'))\npaths_train_e=glob.glob(os.path.join(data_dir,'training-e','*.png'))\npaths_train_c=glob.glob(os.path.join(data_dir,'training-c','*.png'))\npaths_train_d=glob.glob(os.path.join(data_dir,'training-d','*.png'))\npaths_train_all=paths_train_a+paths_train_b+paths_train_c+paths_train_d+paths_train_e\n\npaths_test_a=glob.glob(os.path.join(data_dir,'testing-a','*.png'))\npaths_test_b=glob.glob(os.path.join(data_dir,'testing-b','*.png'))\npaths_test_e=glob.glob(os.path.join(data_dir,'testing-e','*.png'))\npaths_test_c=glob.glob(os.path.join(data_dir,'testing-c','*.png'))\npaths_test_d=glob.glob(os.path.join(data_dir,'testing-d','*.png'))\npaths_test_f=glob.glob(os.path.join(data_dir,'testing-f','*.png'))+glob.glob(os.path.join(data_dir,'testing-f','*.JPG'))\npaths_test_auga=glob.glob(os.path.join(data_dir,'testing-auga','*.png'))\npaths_test_augc=glob.glob(os.path.join(data_dir,'testing-augc','*.png'))\npaths_test_all=paths_test_a+paths_test_b+paths_test_c+paths_test_d+paths_test_e+paths_test_f+paths_test_auga+paths_test_augc\n\npath_label_train_a=os.path.join(data_dir,'training-a.csv')\npath_label_train_b=os.path.join(data_dir,'training-b.csv')\npath_label_train_e=os.path.join(data_dir,'training-e.csv')\npath_label_train_c=os.path.join(data_dir,'training-c.csv')\npath_label_train_d=os.path.join(data_dir,'training-d.csv')","35761734":"def get_key(path):\n    # seperates the key of an image from the filepath\n    key=path.split(sep=os.sep)[-1]\n    return key\n\ndef get_data(paths_img,path_label=None,resize_dim=None):\n    '''reads images from the filepaths, resizes them (if given), and returns them in a numpy array\n    Args:\n        paths_img: image filepaths\n        path_label: pass image label filepaths while processing training data, defaults to None while processing testing data\n        resize_dim: if given, the image is resized to resize_dim x resize_dim (optional)\n    Returns:\n        X: group of images\n        y: categorical true labels\n    '''\n    X=[] # initialize empty list for resized images\n    for i,path in enumerate(paths_img):\n        img=cv2.imread(path,cv2.IMREAD_GRAYSCALE) # images loaded in color (BGR)\n        #ret,img = cv2.threshold(img, 128, 255, cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)\n        #img = cv2.bilateralFilter(img,9,75,75)\n        #img = cv2.medianBlur(img,5)\n        #img = cv2.fastNlMeansDenoisingColored(img,None,10,10,7,21)\n        #img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) # cnahging colorspace to GRAY\n        if resize_dim is not None:\n            img=cv2.resize(img,(resize_dim,resize_dim),interpolation=cv2.INTER_AREA) # resize image to 28x28\n        #X.append(np.expand_dims(img,axis=2)) # expand image to 28x28x1 and append to the list.\n        gaussian_3 = cv2.GaussianBlur(img, (9,9), 10.0) #unblur\n        img = cv2.addWeighted(img, 1.5, gaussian_3, -0.5, 0, img)\n        kernel = np.array([[-1,-1,-1], [-1,9,-1], [-1,-1,-1]]) #filter\n        img = cv2.filter2D(img, -1, kernel)\n        #thresh = 200\n        #maxValue = 255\n        #th, img = cv2.threshold(img, thresh, maxValue, cv2.THRESH_BINARY);\n        #ret,img = cv2.threshold(img, 128, 255, cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)\n        X.append(img) # expand image to 28x28x1 and append to the list\n        # display progress\n        if i==len(paths_img)-1:\n            end='\\n'\n        else: end='\\r'\n        print('processed {}\/{}'.format(i+1,len(paths_img)),end=end)\n        \n    X=np.array(X) # tranform list to numpy array\n    if  path_label is None:\n        return X\n    else:\n        df = pd.read_csv(path_label) # read labels\n        df=df.set_index('filename') \n        y_label=[df.loc[get_key(path)]['digit'] for path in  paths_img] # get the labels corresponding to the images\n        y=to_categorical(y_label,10) # transfrom integer value to categorical variable\n        return X, y\n        \ndef imshow_group(X,y,y_pred=None,n_per_row=10,phase='processed'):\n    '''helper function to visualize a group of images along with their categorical true labels (y) and prediction probabilities.\n    Args:\n        X: images\n        y: categorical true labels\n        y_pred: predicted class probabilities\n        n_per_row: number of images per row to be plotted\n        phase: If the images are plotted after resizing, pass 'processed' to phase argument. \n            It will plot the image and its true label. If the image is plotted after prediction \n            phase, pass predicted class probabilities to y_pred and 'prediction' to the phase argument. \n            It will plot the image, the true label, and it's top 3 predictions with highest probabilities.\n    '''\n    n_sample=len(X)\n    img_dim=X.shape[1]\n    j=np.ceil(n_sample\/n_per_row)\n    fig=plt.figure(figsize=(FIG_WIDTH,HEIGHT_PER_ROW*j))\n    for i,img in enumerate(X):\n        plt.subplot(j,n_per_row,i+1)\n#         img_sq=np.squeeze(img,axis=2)\n#         plt.imshow(img_sq,cmap='gray')\n        plt.imshow(img)\n        if phase=='processed':\n            plt.title(np.argmax(y[i]))\n        if phase=='prediction':\n            top_n=3 # top 3 predictions with highest probabilities\n            ind_sorted=np.argsort(y_pred[i])[::-1]\n            h=img_dim+4\n            for k in range(top_n):\n                string='pred: {} ({:.0f}%)\\n'.format(ind_sorted[k],y_pred[i,ind_sorted[k]]*100)\n                plt.text(img_dim\/2, h, string, horizontalalignment='center',verticalalignment='center')\n                h+=4\n            if y is not None:\n                plt.text(img_dim\/2, -4, 'true label: {}'.format(np.argmax(y[i])), \n                         horizontalalignment='center',verticalalignment='center')\n        plt.axis('off')\n    plt.show()\n\ndef create_submission(predictions,keys,path):\n    result = pd.DataFrame(\n        predictions,\n        columns=['label'],\n        index=keys\n        )\n    result.index.name='key'\n    result.to_csv(path, index=True)","a983b41e":"X_train_a,y_train_a=get_data(paths_train_a,path_label_train_a,resize_dim=RESIZE_DIM)\nX_train_b,y_train_b=get_data(paths_train_b,path_label_train_b,resize_dim=RESIZE_DIM)\nX_train_c,y_train_c=get_data(paths_train_c,path_label_train_c,resize_dim=RESIZE_DIM)\nX_train_d,y_train_d=get_data(paths_train_d,path_label_train_d,resize_dim=RESIZE_DIM)\nX_train_e,y_train_e=get_data(paths_train_e,path_label_train_e,resize_dim=RESIZE_DIM)","9b573b2b":"X_train_all=np.concatenate((X_train_a,X_train_b,X_train_c,X_train_d,X_train_e),axis=0)\ny_train_all=np.concatenate((y_train_a,y_train_b,y_train_c,y_train_d,y_train_e),axis=0)\nX_train_all.shape, y_train_all.shape","3180a3b9":"X_show_all=X_train_all","bb889d8a":"plt.subplot(221)\nplt.imshow(X_train_all[0], cmap=plt.get_cmap('gray'))\nplt.subplot(222)\nplt.imshow(X_train_all[1], cmap=plt.get_cmap('gray'))\nplt.subplot(223)\nplt.imshow(X_train_all[2], cmap=plt.get_cmap('gray'))\nplt.subplot(224)\nplt.imshow(X_train_all[3], cmap=plt.get_cmap('gray'))\n# show the plot\nplt.show()","bf2cb927":"imgg=X_train_all[1]\nhist = cv2.calcHist([imgg],[0],None,[256],[0,256])\nplt.hist(imgg.ravel(),256,[0,256])\n \n# show the plotting graph of an image\n\nplt.show()","bb4a6fb0":"plt.imshow(X_train_all[1])","5dae6cd8":"X_test_a=get_data(paths_test_a,resize_dim=RESIZE_DIM)\nX_test_b=get_data(paths_test_b,resize_dim=RESIZE_DIM)\nX_test_c=get_data(paths_test_c,resize_dim=RESIZE_DIM)\nX_test_d=get_data(paths_test_d,resize_dim=RESIZE_DIM)\nX_test_e=get_data(paths_test_e,resize_dim=RESIZE_DIM)\nX_test_f=get_data(paths_test_f,resize_dim=RESIZE_DIM)\nX_test_auga=get_data(paths_test_auga,resize_dim=RESIZE_DIM)\nX_test_augc=get_data(paths_test_augc,resize_dim=RESIZE_DIM)","0a6fbe41":"X_test_all=np.concatenate((X_test_a,X_test_b,X_test_c,X_test_d,X_test_e,X_test_f,X_test_auga,X_test_augc))","202fed0d":"X_tshow_all=X_test_all\nX_tshow_all.shape","ad18ef48":"X_train_all = X_train_all.reshape(X_train_all.shape[0],32, 32,1).astype('float32')\nX_test_all = X_test_all.reshape(X_test_all.shape[0],32, 32,1).astype('float32')","8a4d1e1e":"X_train_all.shape","a11b5591":"X_train_all = X_train_all\/255\nX_test_all=X_test_all\/255","d38f6af8":"indices=list(range(len(X_train_all)))\nnp.random.seed(42)\nnp.random.shuffle(indices)\n\nind=int(len(indices)*0.80)\n# train data\nX_train=X_train_all[indices[:ind]] \ny_train=y_train_all[indices[:ind]]\n# validation data\nX_val=X_train_all[indices[-(len(indices)-ind):]] \ny_val=y_train_all[indices[-(len(indices)-ind):]]","8629843b":"def my_model(img_size=32,channels=1):\n    model = Sequential()\n    input_shape = (img_size,img_size,channels)\n    model.add(Conv2D(32, (5, 5), input_shape=input_shape,activation='relu', padding='same'))\n    model.add(Conv2D(32, (5, 5), activation='relu', padding='same'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Conv2D(128, (3, 3),activation='relu',padding='same'))\n    model.add(Conv2D(128, (3, 3),activation='relu',padding='same'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Conv2D(256, (3, 3),activation='relu',padding='same'))\n    model.add(Conv2D(256, (3, 3),activation='relu',padding='same'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Flatten())\n    model.add(Dense(64))\n    model.add(Activation('relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(10))\n    model.add(Activation('softmax'))\n    \n    model.compile(loss='categorical_crossentropy', metrics=['accuracy'],optimizer='adam')\n    # UNCOMMENT THIS TO VIEW THE ARCHITECTURE\n    #model.summary()\n    \n    return model\nmodel=my_model()\nmodel.summary()","d9843e57":"path_model='model_filter.h5' # save model at this location after each epoch\nK.tensorflow_backend.clear_session() # destroys the current graph and builds a new one\nmodel=my_model() # create the model\nK.set_value(model.optimizer.lr,1e-3) # set the learning rate\n# fit the model\nh=model.fit(x=X_train,     \n            y=y_train, \n            batch_size=64, \n            epochs=30, \n            verbose=1, \n            validation_data=(X_val,y_val),\n            shuffle=True,\n            callbacks=[\n                ModelCheckpoint(filepath=path_model),\n            ]\n            )","8801ee61":"predictions_prob=model.predict(X_test_all) # get predictions for all the test data","acb22e9f":"n_sample=200\nnp.random.seed(42)\nind=np.random.randint(0,len(X_test_all), size=n_sample)","d00226a0":"imshow_group(X=X_tshow_all[ind],y=None,y_pred=predictions_prob[ind], phase='prediction')","59da4284":"labels=[np.argmax(pred) for pred in predictions_prob]","f2745440":"keys=[get_key(path) for path in paths_test_all ]","16628d67":"create_submission(predictions=labels,keys=keys,path='cnnsubmission32_final.csv')","856089fa":"prediction = pd.read_csv('cnnsubmission32_final.csv')\nprediction.head(100)","efe14a7e":"#df=pd.read_csv(path_label_train_c,na_filter=False)\n#df.head(100)","d0efa615":"#y=np.array(df.iloc[:,3:4])\n#print(y)\n","c5a46257":"Histogram of digit","03710e2e":"Next, we are going to randomly choose 80% of the training data and use it to train our neural network. The remaining 20% images are going to be our validation data.","6162481a":"## Step 3: Train the model","c8f238ff":"We will now convert image to 1 color channel","fb43a307":"Let's observe the images by our model.","9d1b606b":"## Step 1: Process the data","47ab5420":" After 30 epochs we have a decent training and valiadation accuracy on dataset.","3db3a654":"## Result Analysis","665ce164":"Next we are going to use the `get_data()` function to process all the images from dataset ","406ae69c":"Let's see some samples of the processed data. The digits are more sharp now","4ffb1751":"### Image Processing ","e4f2855d":"# Bangla Handwritten Digit Recognizer ","97ce857c":"Normalize data","04c12b52":"We shall write some helper functions to process and visualize the images. We will convert color to gray scale image. For better understanding we will unblur the image and make image sharp by using laplacian filter.","2ac28dd0":"The details of this code can be found in my conference paper which is presented in International Conference on Bangla Speech and Language Processing (ICBSLP) 2018.  Paper Link : [Click Here](https:\/\/ieeexplore.ieee.org\/document\/8554900) <br>\n\nAcknowledgement : This kernel is forked from the starter kernel but the preprocessing technique and CNN architecture has been updated in my kernel for better result. \n\nIn this tutorial we shall go through a bengali digit recognizer model in details. Our model is going to be based on a convolutional neural network (CNN). The focus is to get familiar with the components of a bengali digit recognizer framework. There are three steps in building this digit recognizer . <br>\n\n**Step 1 : Process the data.<br>\nStep 2 : Design the model.<br>\nStep 3 : Train the model.**","09eafa6d":"Our dataset comes from six different source.","30b19293":"## Step 2: Design the model"}}