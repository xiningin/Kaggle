{"cell_type":{"36032d66":"code","bb2fa1cf":"code","9ac88199":"code","4cd6066d":"code","35ba3838":"code","c1ebd08f":"code","117200ee":"code","90682822":"code","17eaff8f":"code","0149f8c8":"code","dd756ca0":"code","bd79c7e4":"code","618c3a21":"code","e0898c47":"code","9565e153":"code","0a92358b":"code","20b50709":"code","45b7aa68":"code","513edb1e":"code","3b1440fd":"code","9e433d71":"code","7c441d79":"code","20c3c755":"code","c618ccc7":"markdown","12f21c4b":"markdown","ee2c5e2e":"markdown","01614766":"markdown","6eea5514":"markdown","68add8c2":"markdown","51ebe098":"markdown","b0942973":"markdown"},"source":{"36032d66":"# General Libraries\n\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","bb2fa1cf":"df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","9ac88199":"print(\"Sahpe of Training set and Test set\")\nprint(\"-\" * 50)\nprint(f\"Training Set :\\n Number of rows : {df.shape[0]}, Number of Columns : {df.shape[1]}\")\nprint(f\"Test Set :\\n Number of rows : {test_df.shape[0]}, Number of Columns : {test_df.shape[1]}\")","4cd6066d":"n_cols = (df.select_dtypes(exclude=[\"object\"])\n          .drop([\"Id\"], axis=1)\n          .columns\n          .to_list()\n         )\n\nc_cols = (df.select_dtypes(include=[\"object\"])\n          .columns\n          .to_list()\n         )\n\nprint(f\"Total Numerical Cols : {len(n_cols)}\")\nprint(f\"Total Categorical Cols : {len(c_cols)}\")","35ba3838":"# Numerical Cols\nprint(n_cols)","c1ebd08f":"# Categorical Cols\nprint(c_cols)","117200ee":"df[n_cols].describe().T","90682822":"g = df[n_cols].hist(figsize=(20, 20), bins=30)","17eaff8f":"cols = [\"LotFrontage\", \"LotArea\", \"YearBuilt\", \"YearRemodAdd\", \"MasVnrArea\",\n        \"BsmtFinSF1\", \"BsmtUnfSF\", \"TotalBsmtSF\", \"1stFlrSF\", \"GrLivArea\",\n        \"GarageYrBlt\", \"GarageArea\", \"OpenPorchSF\", \"SalePrice\"]","0149f8c8":"for c in cols:\n    print(f\"{c} :\")\n    print(\"------------\")\n    print(f\"Skewness of {c} is : {df[c].skew()}\")\n    print(f\"Kurtosis of {c} is : {df[c].kurtosis()}\")\n    print(\"-\" * 50)","dd756ca0":"df[cols].hist(figsize=(12, 12), bins=30);","bd79c7e4":"# Plot the paiplot see the relationship between the variables\n\nsns.pairplot(df[cols[:6]+[\"SalePrice\"]])","618c3a21":"sns.pairplot(df[cols[6:]])","e0898c47":"print(cols)","9565e153":"def plot_low_cardinality(df, cols):\n    var = \"SalePrice\"\n    \n    fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(16, 12))\n    axes = axes.ravel()\n    \n    for i, j in zip(cols, axes):\n        sns.boxplot(x=df[i], y=df[var], ax=j)\n    plt.tight_layout()","0a92358b":"def plot_high_cardinality(df, cols):\n    var = \"SalePrice\"\n    \n    fig, axes = plt.subplots(nrows=3, ncols=1, figsize=(16, 20))\n    axes = axes.ravel()\n    for i, j in zip(cols, axes):\n        sns.boxplot(x=df[i], y=df[var], ax=j)\n        \n    plt.tight_layout()","20b50709":"def l_h_cardinality(df, cols):\n    l, h = [], []\n    \n    for c in cols:\n        if df[c].nunique() > 10:\n            h.append(c)\n        else:\n            l.append(c)\n    return l, h","45b7aa68":"low_cardinality, high_cardinality = l_h_cardinality(df, c_cols)","513edb1e":"plot_high_cardinality(df, high_cardinality)","3b1440fd":"# For the Neighborhood Feature sort the values according to the SalePrice and Plot (Finding some kind of trends)\ntest = pd.DataFrame()\ntest[\"Neighborhood\"] = df[\"Neighborhood\"]\ntest[\"SalePrice\"] = df[\"SalePrice\"]\ntest = test.sort_values(by=\"SalePrice\")\n\nplt.figure(figsize=(20, 10))\nsns.boxplot(x=\"Neighborhood\", y=\"SalePrice\", data=test)","9e433d71":"# ploting the low cardinality Features\nfor i in range(0, len(low_cardinality)+1, 4):\n    d = i\n    if d != 40:\n        plot_low_cardinality(df, low_cardinality[d:d+4])","7c441d79":"m_data = {k: df[k].isnull().sum() for k in df.columns if df[k].isnull().sum() > 0}\nm_data","20c3c755":"missing_data = pd.DataFrame(index=m_data.keys())\nmissing_data[\"value\"] = m_data.values()\nmissing_data[\"percentage\"] = np.round((missing_data[\"value\"] \/ df.shape[0]) * 100, 3)\nmissing_data","c618ccc7":"In the above paireplot it shows \n1. LotFrontage, YearBuilt, MasVnrArea shows the positive relationship with SalePrice(target)\n2. LotArea and LotFrontage it shows somewhat linear relationship","12f21c4b":"In the above histogram plot the distribution of \n\"LotFrontage\", \"BsmtFinSF1\", \"BsmtUnfSF\", \"TotalBsmtSF\", \"1stFlrSF\", \"GrLivArea\", \"OpenPorchSF\"\nare rightly screwed","ee2c5e2e":"### Check the Skewness of the Particular variables","01614766":"## Statistics for Numerical Columns","6eea5514":"## Distribution of Numerical Columns","68add8c2":"## Split the data into numerical and Categorical","51ebe098":"## Load data","b0942973":"above pairplot shows\n1. TotalBsmtSF, 1stFlrSF, GrLivArea, these feature have strong and positive linear relationship with SalePrice.\n2. BsmtUnfSF, GarageArea, OpenPorchSF these feature have moderate and positive linear relationship with SalePrice.\n3. GrLivArea, 1stFlrSF,TotalBsmtSF show the moderate positive relationship to BsmtUnfSF.\n4. GrLivArea, 1stFlrSF, BsmtUnfSF show the moderate positive relationship to TotalBsmtSF.\n5. GrLivArea, TotalBsmtSF, BsmtUnfSF show the moderate positive relationship to 1stFlrSF.\n6. etc, etc"}}