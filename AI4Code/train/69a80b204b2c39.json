{"cell_type":{"b6c87b8c":"code","ac73492a":"code","e60f99cb":"code","542662aa":"code","92082768":"code","42370c30":"code","8f2fe623":"code","2146ec4b":"code","e643ae56":"code","15a25ccc":"code","03d23748":"code","3ab9daa5":"code","8db529ba":"code","be94b3c6":"code","a638a644":"code","a78b8fbe":"code","71793647":"code","5eda475e":"code","3c1f0cbe":"code","a15a89c0":"code","abe39cfb":"code","b31b215b":"code","1f032b13":"code","81f83837":"code","0fcecde9":"code","a4fd5859":"code","64979dbb":"code","b27b85a2":"code","23b5b2fe":"code","fefc0682":"code","52b5e60e":"code","bcd7a765":"code","f957c437":"code","6926eee2":"code","3ee6dab6":"code","b1aa335e":"code","23dbaddc":"code","d97fbc7c":"code","be6772cc":"code","1f82465a":"code","37b2d0ab":"code","41441220":"code","6a134fa6":"code","421b49b2":"code","6a7b9b18":"code","82ba1256":"code","5d301cec":"code","f5c5a759":"code","b50e6f51":"code","4f56a435":"code","dca5bcf2":"code","bfd54d14":"code","f147bac7":"code","01b3a303":"code","e2133fae":"code","33700a4a":"code","90e1c4af":"code","da306eed":"code","55ec6c94":"code","d3632721":"markdown","205f940d":"markdown","5fb5af48":"markdown","e94a0a39":"markdown","4dfdae58":"markdown","73a007e6":"markdown","83b8c66d":"markdown","002ef385":"markdown","066a5195":"markdown","6c56a930":"markdown","b2b69556":"markdown","4cdfece3":"markdown","5300e02d":"markdown","17362ccb":"markdown","76f6d73c":"markdown"},"source":{"b6c87b8c":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nfrom sklearn.metrics import mean_absolute_error\nfrom datetime import timedelta\nfrom functools import reduce\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport mlb\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px","ac73492a":"BASE_DIR = Path('..\/input\/mlb-player-digital-engagement-forecasting')\nTRAIN_DIR = Path('..\/input\/mlb-pdef-train-dataset')","e60f99cb":"players = pd.read_csv(BASE_DIR \/ 'players.csv')\n\nrosters = pd.read_pickle(TRAIN_DIR \/ 'rosters_train.pkl')\ntargets = pd.read_pickle(TRAIN_DIR \/ 'nextDayPlayerEngagement_train.pkl')\nfollowers = pd.read_pickle(TRAIN_DIR \/ 'playerTwitterFollowers_train.pkl')\nteam_followers = pd.read_pickle(TRAIN_DIR \/ 'teamTwitterFollowers_train.pkl')\nteam_followers = team_followers.rename(columns={'numberOfFollowers': 'teamFollowers'})\nscores = pd.read_pickle(TRAIN_DIR \/ 'playerBoxScores_train.pkl')\nscores = scores.groupby(['playerId', 'date']).sum().reset_index()","542662aa":"rosters.head()","92082768":"rosters.status.unique()","42370c30":"statusCode = rosters.statusCode.value_counts()\n\nfig = px.bar(x=statusCode.index, y=np.log(statusCode.values), text=statusCode.values,\n            labels={'x': 'roster status code', 'y': 'values'},\n            title='Number of players under each roster status(log)', \n            color=statusCode.index)\n\nfig.show()","8f2fe623":"rosters['year'] = pd.to_datetime(rosters['date'], format = '%Y%m%d').dt.year","2146ec4b":"status_change_per_year = pd.DataFrame(rosters.groupby('year')['statusCode'].value_counts())\nstatus_change_per_year.columns = ['count']\nstatus_change_per_year = status_change_per_year.reset_index()\n\nfig = px.bar(x=status_change_per_year['statusCode'], y=np.log(status_change_per_year['count']), \n             text=status_change_per_year['count'],\n             animation_frame=status_change_per_year['year'], animation_group=status_change_per_year['count'],\n             labels={'x': 'roster status code', 'y': 'values'},\n             title='Number of players under each roster status per year(log)', \n             color=status_change_per_year['statusCode'])\n\nfig.show()","e643ae56":"followers.head()","15a25ccc":"followers.shape","03d23748":"followers.playerName.unique().shape","3ab9daa5":"most_famous_player = followers.groupby('playerName')['numberOfFollowers'].max().sort_values(ascending=False)[:20]\n\nfig = px.bar(x=most_famous_player.index, y=most_famous_player.values, text=most_famous_player.values,\n            labels={'x': 'Name', 'y': 'followers'},\n            title='Top 20 the most famous players by tweeter followers', \n            color=most_famous_player.index)\nfig.show()","8db529ba":"followers['date'] = pd.to_datetime(followers['date'], format = '%Y%m%d')","be94b3c6":"followers_growth = followers.groupby(['playerName', 'date']).agg({'numberOfFollowers':'min'}).reset_index()","a638a644":"min_followers = \\\n    pd.DataFrame(followers_growth.groupby('playerName').agg({'numberOfFollowers':'min'})['numberOfFollowers']).reset_index()\nmin_followers.columns = ['name', 'min_f']\n\nmax_followers = \\\n    pd.DataFrame(followers_growth.groupby('playerName').agg({'numberOfFollowers':'max'})['numberOfFollowers']).reset_index()\nmax_followers.columns = ['name', 'max_f']","a78b8fbe":"def get_growth(min_max_dataset):\n    A = min_max_dataset['min_f']\n    B = min_max_dataset['max_f']\n    return (B-A)\/A*100","71793647":"min_max_followers = min_followers.merge(max_followers, on='name', how='left')\nmin_max_followers['growth%'] = get_growth(min_max_followers)\nmin_max_followers['growth_num'] = min_max_followers['max_f']-min_max_followers['min_f']\nmin_max_followers = min_max_followers.sort_values(by=['growth_num', 'growth%'], ascending=False)[:20]","5eda475e":"min_max_followers","3c1f0cbe":"fig = px.bar(x=min_max_followers['name'], y=min_max_followers['growth_num'], \n             text=round(min_max_followers['growth%']),\n             labels={'x': 'name', 'y': 'followers'},\n             title='Top 20 fastest growing players by tweeter followers', \n             color=min_max_followers['name'])\nfig.show()","a15a89c0":"team_followers.head()","abe39cfb":"team_followers.shape","b31b215b":"most_famous_teams = team_followers.groupby('teamName')['teamFollowers'].max().sort_values(ascending=False)\n\nfig = px.bar(x=most_famous_teams.index, y=most_famous_teams.values, text=most_famous_teams.values,\n            labels={'x': 'Team name', 'y': 'followers'},\n            title='The most famous teams by tweeter followers', \n            color=most_famous_teams.index)\nfig.show()","1f032b13":"scores.head()","81f83837":"st = scores.columns[2:45]\nnd = scores.columns[45:]","0fcecde9":"scores[st].describe()","a4fd5859":"scores[nd].describe()","64979dbb":"awards = pd.read_csv(TRAIN_DIR \/ 'awards_train.csv')","b27b85a2":"awards['awardDateMonth'] = pd.to_datetime(awards['awardDate'], format = '%Y-%m-%d').dt.month\nawards['awardDateYear'] = pd.to_datetime(awards['awardDate'], format = '%Y-%m-%d').dt.year","23b5b2fe":"awards.head()","fefc0682":"most_awarded_player_per_year = pd.DataFrame(awards.groupby('awardDateYear')['playerName'].value_counts())\nmost_awarded_player_per_year.columns = ['num_of_awards']\nmost_awarded_player_per_year = most_awarded_player_per_year.reset_index()\nyear2018 = most_awarded_player_per_year[most_awarded_player_per_year['awardDateYear'] == 2018][:20]\nyear2019 = most_awarded_player_per_year[most_awarded_player_per_year['awardDateYear'] == 2019][:20]\nyear2020 = most_awarded_player_per_year[most_awarded_player_per_year['awardDateYear'] == 2020][:20]\nyear2021 = most_awarded_player_per_year[most_awarded_player_per_year['awardDateYear'] == 2021][:20]\nmost_awarded_player_per_year = year2018.append([year2019, year2020, year2021])\n\nfig = px.bar(x=most_awarded_player_per_year['playerName'], y=most_awarded_player_per_year['num_of_awards'], \n             text=most_awarded_player_per_year['num_of_awards'],\n             animation_frame=most_awarded_player_per_year['awardDateYear'],\n             animation_group=most_awarded_player_per_year['num_of_awards'],\n             labels={'y': 'number of awards', 'x': ' '},\n             title='Top the most awarded players per year', \n             color=most_awarded_player_per_year['playerName'])\n\nfig.show()","52b5e60e":"most_frequent_award = awards.awardName.value_counts()[:25]\n\nfig = px.pie(most_frequent_award, values=most_frequent_award.values, names=most_frequent_award.index,\n             title='Most frequent awards')\nfig.show()","bcd7a765":"def plot_awards(playerid=477132):\n    if len(awards[awards.playerId==playerid]['awardDateYear'].value_counts()) > 0:\n        awards[awards.playerId==playerid]['awardDateYear'].value_counts().plot(kind = 'bar')\n        plt.show()","f957c437":"plot_awards(477132)","6926eee2":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style('whitegrid')\nsns.set(font_scale = 1.5)\nfig, axs = plt.subplots(2,2, figsize = (20, 10))\nsns.kdeplot(ax=axs[0,0], data=targets['target1'])\nsns.kdeplot(ax=axs[0,1], data=targets['target2'])\nsns.kdeplot(ax=axs[1,0], data=targets['target3'])\nsns.kdeplot(ax=axs[1,1], data=targets['target4'])\nbbox = axs[0,0].get_position()\nbbox2 = axs[0,1].get_position()\n\ncenter=(bbox2.x1) * 0.4 + (bbox.x1) * 0.25\nplt.suptitle('Distribution of targets', x = center)\n","3ee6dab6":"def draw_kde_plot(col = 'target1'):\n    sns.set_style('whitegrid')\n    sns.set(font_scale = 1.5)\n    fig, axs = plt.subplots(2,2, figsize = (15, 10))\n    g = sns.kdeplot(ax=axs[0,0], data=targets[col])\n    g.set_xlabel('original')\n    g = sns.kdeplot(ax=axs[0,1], data=targets[col]**2)\n    g.set_xlabel('squared')\n    g = sns.kdeplot(ax=axs[1,0], data=targets[col]**4)\n    g.set_xlabel('power 4')\n    g = sns.kdeplot(ax=axs[1,1], data = np.log(targets[col]+1))\n    g.set_xlabel('log')\n\n\n\n    bbox = axs[0,0].get_position()\n    bbox2 = axs[0,1].get_position()\n    center=(bbox2.x1) * 0.4 + (bbox.x1) * 0.25\n    plt.suptitle(f'Transformation of {col}', x = center)\n    plt.tight_layout()\n","b1aa335e":"for col in ['target1', 'target2', 'target3', 'target4']:\n    draw_kde_plot(col)","23dbaddc":"sns.set_style('whitegrid')\nsns.set(font_scale = 1.5)\n\n\nfig, axs = plt.subplots(1,1, figsize = (20,8))\nsns.lineplot(ax=axs, x = np.arange(1,10001),\n             y = targets.sample(10000, random_state=500)['target1'],\n             legend='full', label = 'target1')\nsns.lineplot(ax=axs, x = np.arange(1,10001),\n             y = targets.sample(10000, random_state=500)['target2'],\n             legend='full', label = 'target2')\nsns.lineplot(ax=axs, x = np.arange(1,10001), \n             y = targets.sample(10000, random_state=500)['target3'], \n             legend='full', label = 'target3')\nsns.lineplot(ax=axs,x = np.arange(1,10001), \n             y = targets.sample(10000, random_state=500)['target4'], \n             legend='full', label = 'target4')\n\nbbox = axs.get_position()\ncenter=0.5*(bbox.x1)\nplt.suptitle('Comparision of targets', x = center)\n\n","d97fbc7c":"sns.set_style('ticks')\nsns.set(font_scale = 1.5)\n\n\nfig, axs = plt.subplots(2,2, figsize = (20,8))\nsns.lineplot(ax=axs[0,0], x = np.arange(1,10001),\n             y = targets.sample(10000, random_state=500)['target1'],\n             legend='full', label = 'target1')\nsns.lineplot(ax=axs[0,1], x = np.arange(1,10001),\n             y = targets.sample(10000, random_state=500)['target2'],\n             legend='full', label = 'target2')\nsns.lineplot(ax=axs[1,0], x = np.arange(1,10001), \n             y = targets.sample(10000, random_state=500)['target3'], \n             legend='full', label = 'target3')\nsns.lineplot(ax=axs[1,1], x = np.arange(1,10001), \n             y = targets.sample(10000, random_state=500)['target4'], \n             legend='full', label = 'target4')\n\nplt.title('Comparision of targets, side by side view')\n","be6772cc":"targets['year'] = pd.to_datetime(targets['date'], format = '%Y%m%d').dt.year","1f82465a":"targets['year'].value_counts().plot(kind = 'bar')","37b2d0ab":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(style=\"whitegrid\")\nsns.set(font_scale = 2)\nsns.color_palette(\"Set2\")\n\n\n\nfig, axs = plt.subplots(4,1, figsize = (20,20))\nsns.lineplot(ax=axs[0], \n             x = np.arange(1,10001),\n             data = targets.sample(10000, random_state=100),\n             y = 'target1',\n             hue = 'year',\n             palette='tab10',\n             linewidth=2.5)\n\nsns.lineplot(ax=axs[1], \n             x = np.arange(1,10001),\n             data = targets.sample(10000, random_state=100),\n             y = 'target2',\n             hue = 'year',\n             palette='tab10',\n             linewidth=2.5)\n\nsns.lineplot(ax=axs[2], \n             x = np.arange(1,10001),\n             data = targets.sample(10000, random_state=100),\n             y = 'target3',\n             hue = 'year',\n             palette='tab10',\n             linewidth=2.5)\n\nsns.lineplot(ax=axs[3], \n             x = np.arange(1,10001),\n             data = targets.sample(10000, random_state=100),\n             y = 'target4',\n             hue = 'year',\n             palette='tab10',\n             linewidth=2.5)\n\nbbox = axs[0].get_position()\ncenter=0.5*(bbox.x1)\nplt.suptitle('targets over years', x = center)","41441220":"\ndef plot_target_for_player(col = 'target1', playerid = 683734):\n    \n    sns.set(style=\"whitegrid\")\n    sns.set(font_scale = 2)\n    sns.color_palette(\"Set2\")\n\n    fig, axs = plt.subplots(1,1, figsize = (20,8))\n\n    sns.lineplot(ax=axs, x = np.arange(365),\n                 data = targets[((targets.year==2018) & (targets.playerId==playerid))],\n                 y = col,\n                 label = '2018',\n                 linewidth=2.5)\n\n    sns.lineplot(ax=axs, \n                 x =  np.arange(365),\n                 data = targets[((targets.year==2019) & (targets.playerId==playerid))],\n                 y = col,\n                 label = '2019',\n                 linewidth=2.5)\n\n    sns.lineplot(ax=axs, \n                 x =  np.arange(366),\n                 data = targets[((targets.year==2020) & (targets.playerId==playerid))],\n                 y = col,\n                 label = '2020',\n                 linewidth=2.5)\n\n    sns.lineplot(ax=axs, \n                 x =  np.arange(120),\n                 data = targets[((targets.year==2021) & (targets.playerId==playerid))],\n                 y = col,\n                 label = '2021',\n                 linewidth=2.5)\n    \n    bbox = axs.get_position()\n    center=0.5*(bbox.x1)\n    plt.suptitle(f'player Id {playerid}', x = center)","6a134fa6":"plot_target_for_player()","421b49b2":"plot_target_for_player('target2')","6a7b9b18":"plot_target_for_player('target3')","82ba1256":"plot_target_for_player('target4')","5d301cec":"plot_target_for_player('target1',477132)","f5c5a759":"plot_target_for_player('target2',477132)","b50e6f51":"plot_target_for_player('target3',477132)","4f56a435":"plot_target_for_player('target4',477132)","dca5bcf2":"from scipy.stats import boxcox\nxt, _ = boxcox(targets['target1'].values + 1)\nsns.distplot(xt)","bfd54d14":"xt, _ = boxcox(targets['target4'].values + 1)\nsns.distplot(xt)","f147bac7":"xt, _ = boxcox(targets['target3'].values + 1)\nsns.distplot(xt)","01b3a303":"import seaborn as sns","e2133fae":"player_target_stats = pd.read_csv(\"..\/input\/player-target-stats\/player_target_stats.csv\")\ntargets_agg =targets.groupby('playerId')[['target1', 'target2', 'target3', 'target4']].agg('median').reset_index()\nplayer_target_stats_for_corr = pd.merge(player_target_stats, targets_agg, on = ['playerId'], how = 'left')\nplt.figure(figsize=(20, 20))\nplt.xticks(rotation=25)\ncorr = player_target_stats_for_corr.drop(columns =['playerId']).corr()\n\n\nsns.heatmap(corr,\n            annot = True,\n            vmin=0,\n            vmax=1,\n            center= 0,\n            cmap=\"RdYlGn\"\n       )\nplt.title('targets corr')\nplt.show()","33700a4a":"followers_agg =followers.groupby('playerId')['numberOfFollowers'].agg('median').reset_index()\ntargets_agg =targets.groupby('playerId')[['target1', 'target2', 'target3', 'target4']].agg('median').reset_index()\nfollowers_agg.columns = ['playerId', '#Followers']\nfollowers_agg = pd.merge(followers_agg, targets_agg, on = ['playerId'], how = 'left')\nplt.figure(figsize=(10, 2))\nplt.xticks(rotation=45)\nplt.suptitle(\"Median Target vs Median Twitter Followers\", fontsize =15)\n\ncorr = followers_agg.drop(columns =['playerId']).corr()\n#mask = np.triu(np.ones_like(corr, dtype=bool))\n\nx_axis_labels = ['#Followers', 'target1','target2', 'target3', 'target4'] \nsns.heatmap(np.array(corr['#Followers']).reshape((1,5)),\n            annot = True,\n            xticklabels=x_axis_labels,\n            vmin=0,\n            vmax=1,\n            center= 0,\n            cmap=\"RdYlGn\"\n       )","90e1c4af":"min_max_followers","da306eed":"awards = pd.read_csv(TRAIN_DIR \/ 'awards_train.csv')\n\nawards_agg = awards.groupby('playerId')['awardId'].agg('count').reset_index()\nawards_agg.columns = ['playerId', '#Awards']\ntargets_agg =targets.groupby('playerId')[['target1', 'target2', 'target3', 'target4']].agg('median').reset_index()\nfollowers_agg = pd.merge(awards_agg, targets_agg, on = ['playerId'], how = 'left')\nplt.figure(figsize=(10, 2))\nplt.xticks(rotation=45)\nplt.suptitle(\"Total number of awards vs Median targets\", fontsize =15)\ncorr = followers_agg.drop(columns =['playerId']).corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\nx_axis_labels = ['#Awards', 'target1','target2', 'target3', 'target4'] \nsns.heatmap(np.array(corr['#Awards']).reshape((1,5)),\n            annot = True,\n            xticklabels=x_axis_labels,\n            vmin=0,\n            vmax=1,\n            center= 0,\n            cmap=\"RdYlGn\"\n       )","55ec6c94":"scores_cols = scores.columns.tolist()\n\nscores_cols = [col for col in scores_cols if col not in ['playerId', 'date', 'home', 'gamePk', 'teamId', 'battingOrder']]\nfor col in scores_cols:\n            scores_agg = scores.groupby('playerId')[col].agg('sum').reset_index()\n            scores_agg.columns = ['playerId', \"#\"+col]\n            targets_agg =targets.groupby('playerId')[['target1', 'target2', 'target3', 'target4']].agg('median').reset_index()\n            scores_agg = pd.merge(scores_agg, targets_agg, on = ['playerId'], how = 'left')\n            plt.figure(figsize=(10, 2))\n            plt.suptitle(f\"Total {col} vs Median targets\", fontsize =15)\n            corr = scores_agg.drop(columns =['playerId']).corr()\n            mask = np.triu(np.ones_like(corr, dtype=bool))\n            sns.set(font_scale=1.4)\n            plt.xticks(rotation=45)\n            \n            x_axis_labels = [\"#\"+col, 'target1','target2', 'target3', 'target4'] \n\n            sns.heatmap(np.array(corr[\"#\"+col]).reshape((1,5)),\n            annot = True,\n            xticklabels=x_axis_labels,\n            vmin=0,\n            vmax=1,\n            center= 0,\n            cmap=\"RdYlGn\")           \n            \n            plt.show()\n            plt.close()","d3632721":"# We have less data for year 4, since we need to predict for the future","205f940d":"# Team followers EDA","5fb5af48":"# There seems to be relationship between number of awards and targets, higher awards the player is popular","e94a0a39":"Twitter following data was collected by MLB from Twitter APIs for all 30 Major League teams, on the first of each month, dating back to 1\/1\/2018. <br>\n\n- date - Date of follower count.\n- teamId - Unique identifier for a team.\n- teamName\n- accountName - Name on team twitter account.\n- twitterHandle - Team twitter handle.\n- numberOfFollowers - Number of followers.","4dfdae58":"# **Target2 has highest Skewness**\n","73a007e6":"# Rosters EDA","83b8c66d":"- playerId - Unique identifier for a player.\n- gameDate - dat of the game\n- teamId - teamId that player is on that date.\n- statusCode - Roster status abbreviation.\n- status - Descriptive roster status.","002ef385":"# Conclusion","066a5195":"# Player Box Scores EDA","6c56a930":"# Awards EDA","b2b69556":"# Player twitter followers EDA","4cdfece3":"# There is definitely seasonality for targets, seems like we can remove year 2018 from modelling","5300e02d":"# Target EDA","17362ccb":"Twitter following data was collected by MLB from Twitter APIs for Major League players, on the first of each month, dating back to 1\/1\/2018. This dataset is not exhaustive of all players over all months, as not every player has\/had a Twitter account, players may create\/delete\/reinstate accounts at random, or other scenarios preventing follower data from being collected on a given date. <br>\n\n- date - Date of follower count.\n- playerId - Unique identifier for a player.\n- playerName\n- accountName - Name on player twitter account.\n- twitterHandle - Player twitter handle.\n- numberOfFollowers - Number of followers","76f6d73c":"- home - Binary, 1 if home team, 0 if away.\n- gamePk - unique identifier for game.\n- gameDate\n- gameTimeUTC - First pitch time in UTC.\n- teamId - Unique identifier for team.\n- teamName\n- playerId - Unique identifier for player.\n- playerName\n- jerseyNum\n- positionCode - Number position code, details are here.\n- positionName - Text position display, details are here.\n- positionType - Position group, details are here.\n- battingOrder - Format: \u201c###\u201d, where the first digit indicates the batting order spot, and the second two digits indicate the sequence in which that player occupied that batting order spot. Examples: \u201c300\u201d, which indicates the starter in the third spot in the batting order; \u201c903,\u201d which indicates the fourth player (after 900, 901 and 902) occupy the ninth spot in the batting order. Only populates if appeared in game.\n- gamesPlayedBatting - 1 if player entered the game as a batter, runner or fielder.\n- flyOuts - Game total fly outs.\n- groundOuts - Game total ground outs.\n- runsScored - Game total runs scored.\n- doubles - Game total doubles.\n- triples - Game total triples.\n- homeRuns - Game total home runs.\n- strikeOuts - Game total strike outs.\n- baseOnBalls - Game total walks.\n- intentionalWalks - Game total intentional walks.\n- hits - Game total hits.\n- hitByPitch - Game total hit by pitches.\n- atBats - Game total at-bats.\n- caughtStealing - Game total caught stealing.\n- stolenBases - Game total stolen bases.\n- groundIntoDoublePlay - Game total double plays grounded into.\n- groundIntoTriplePlay - Game total triple plays grounded into.\n- plateAppearances - Game total plate appearances.\n- totalBases - Game total bases.\n- rbi - Game total runs batted in.\n- leftOnBase - Game total runners left on base.\n- sacBunts - Game total sacrifice bunts.\n- sacFlies - Game total sacrifice flies.\n- catchersInterference - Game total catchers interference reached on.\n- pickoffs - Game total number of times picked off base.\n- gamesPlayedPitching- Binary, 1 if player entered the game as a pitcher.\n- gamesStartedPitching- Binary, 1 if player was game\u2019s starting pitcher.\n- completeGamesPitching - Binary, 1 if credited with complete game.\n- shutoutsPitching - Binary, 1 if credited with shutout.\n- winsPitching - Binary, 1 if credited with win.\n- lossesPitching - Binary, 1 if credited with loss.\n- flyOutsPitching - Game total of flyouts allowed.\n- airOutsPitching - Game total of air outs (flyouts + popouts) allowed.\n- groundOutsPitching - Game total ground outs allowed.\n- runsPitching - Game total runs allowed.\n- doublesPitching - Game total doubles allowed.\n- triplesPitching - Game total triples allowed.\n- homeRunsPitching - Game total home runs allowed.\n- strikeOutsPitching - Game total strike outs allowed.\n- baseOnBallsPitching - Game total walks allowed.\n- intentionalWalksPitching - Game total intentional walks allowed.\n- hitsPitching - Game total hits allowed.\n- hitByPitchPitching - Game total hit by pitches allowed.\n- atBatsPitching - Game total at-bats against.\n- caughtStealingPitching - Game total caught stealing against.\n- stolenBasesPitching - Game total stolen bases allowed.\n- inningsPitched - Game total innings pitched.\n- saveOpportunities - Binary, 1 if credited with save opportunity.\n- earnedRuns - Game total earned runs allowed.\n- battersFaced - Game total batters faced.\n- outsPitching - Game total outs recorded.\n- pitchesThrown - Game total number of pitches thrown.\n- balls - Game total balls thrown.\n- strikes - Game total strikes thrown.\n- hitBatsmen - Game total hit batters.\n- balks - Game total balks.\n- wildPitches - Game total number of wild pitches thrown.\n- pickoffsPitching - Game total number of pickoffs.\n- rbiPitching - Game total number of runs batted in allowed.\n- inheritedRunners - Game total of inherited runners assumed.\n- inheritedRunnersScored- Game total of inherited runners that scored.\n- catchersInterferencePitching - Game total of catcher\u2019s interference occurred by battery.\n- sacBuntsPitching - Game total sacrifice bunts allowed.\n- sacFliesPitching - Game total sacrifice flies allowed.\n- saves - Binary, 1 if credited with save.\n- holds - Binary, 1 if credited with hold.\n- blownSaves - Binary, 1 if credited with blown save.\n- assists - Game total number of assists.\n- putOuts - Game total number of putouts.\n- errors - Game total number of errors.\n- chances - Game total fielding chances."}}