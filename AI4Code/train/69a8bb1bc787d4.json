{"cell_type":{"5412e4b0":"code","ef621207":"code","43eac65c":"code","8d54616c":"code","1e517255":"code","5df6b3a0":"code","a91ab123":"code","948c06b5":"code","f1394797":"code","fdec48e7":"code","90a60794":"code","692978d4":"code","2da815f0":"code","8cfdd21d":"code","fb8b4559":"code","07e0dd49":"code","37040c26":"code","d25b9133":"code","7f81b290":"code","7f23bf47":"code","99170a71":"code","0eef6eef":"code","ef9aa688":"code","78bf4635":"code","72218454":"code","4b2d9cb0":"code","5c325e0d":"code","8eab85b7":"code","7fe608d9":"code","8cff172b":"code","02647b8d":"code","fe2fa0b7":"code","d13afea6":"markdown","e8e050b2":"markdown","d3017641":"markdown","478860e0":"markdown","9767c327":"markdown","31af926d":"markdown"},"source":{"5412e4b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ef621207":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nX_test_kaggle = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","43eac65c":"import numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn import linear_model\nfrom sklearn.metrics import accuracy_score","8d54616c":"y = df['Survived']\ndf.drop('Survived', axis=1, inplace=True)","1e517255":"df.isna().sum()","5df6b3a0":"df.head()","a91ab123":"df.head()","948c06b5":"# \u0443\u0434\u0430\u043b\u0438\u043c \u043c\u0435\u0448\u0430\u044e\u0449\u0438\u0435\u0441\u044f PassengerId, Name, Ticket \u0438 Cabin \ndf.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\n\n#\u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 Embarked \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndf['Embarked'].fillna(df['Embarked'].value_counts().idxmax(), inplace=True)\n\nport=df['Embarked'].value_counts().idxmax()\nprint(port)\n\n#One-Hot-Encoding \ncategorical = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked']\ndf = pd.concat([df, pd.get_dummies(df[categorical], columns=categorical, drop_first=True)],axis=1)\n\ndf.drop(categorical, axis=1, inplace=True)","f1394797":" #\u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 Age\nlr_age = sklearn.linear_model.Ridge(alpha=0.5)\nlr_age.fit(df.loc[:, df.columns != 'Age'][~df.Age.isna()], df[\"Age\"][~df.Age.isna()])\ndf.loc[df.Age.isna(),\"Age\"] = lr_age.predict(df.loc[df.Age.isna(),df.columns != 'Age'] )\n","fdec48e7":"df.head()","90a60794":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(df, y, test_size = 0.1, random_state = 13)","692978d4":"import sklearn.tree\nfrom sklearn.ensemble import RandomForestClassifier","2da815f0":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\n\ncv = sklearn.model_selection.StratifiedKFold(n_splits=3, shuffle=True, random_state=1)\n\n\nalg_frst_model = RandomForestClassifier(random_state=1)\nalg_frst_params = [{\n    \"n_estimators\": [350, 400, 450],\n    \"min_samples_split\": [6, 8, 10],\n    \"min_samples_leaf\": [1, 2, 4]\n}]\nalg_frst_grid = GridSearchCV(alg_frst_model, alg_frst_params, cv=cv, refit=True, verbose=1, n_jobs=-1)\n\n\nalg_frst_grid.fit(X_train, y_train)\nalg_frst_best = alg_frst_grid.best_params_\nalg_frst_best\n","8cfdd21d":"clf_tree = RandomForestClassifier(criterion='entropy', random_state=1, \n                                  #min_samples_leaf=4, min_samples_split=6, n_estimators=400 )\n                                  min_samples_leaf=2, min_samples_split=8, n_estimators=450 )\n\n# \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u0434\u0435\u0440\u0435\u0432\u043e\nclf_tree.fit(X_train, y_train)\n\n# \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u0445\ny_pred_test = clf_tree.predict(X_test)\ny_pred_train = clf_tree.predict(X_train)","fb8b4559":"skl_acc_train = accuracy_score(y_train, y_pred_train)\nskl_acc_test = accuracy_score(y_test, y_pred_test)\n\nprint(skl_acc_train, skl_acc_test)","07e0dd49":"X_test_kaggle.isna().sum()","37040c26":"PassengerId=X_test_kaggle['PassengerId']\nX_test_kaggle.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\n\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 Age \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439, \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u043d\u0435\u0435\nX_test_kaggle['Age'].fillna(X_test_kaggle['Age'].median(), inplace=True)\n\n\n#\u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 Embarked \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c, \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u043c \u0440\u0430\u043d\u0435\u0435\nX_test_kaggle['Embarked'].fillna(X_test_kaggle['Embarked'].value_counts().idxmax(), inplace=True)\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a \u0432 Fare \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \nX_test_kaggle['Fare'].fillna(X_test_kaggle['Fare'].median(), inplace=True)","d25b9133":"#One-Hot-Encoding \ncategorical = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked']\nX_test_kaggle = pd.concat([X_test_kaggle, pd.get_dummies(X_test_kaggle[categorical], columns=categorical, drop_first=True)],axis=1)\n\nX_test_kaggle.drop(categorical, axis=1, inplace=True)","7f81b290":"X_test_kaggle.head()","7f23bf47":"X_test_kaggle.drop('Parch_9', axis=1, inplace=True)","99170a71":"y_pred_test = clf_tree.predict(X_test_kaggle)","0eef6eef":"submission = pd.DataFrame({\n    \"PassengerId\": PassengerId,\n    \"Survived\": y_pred_test\n})\n\nsubmission.to_csv(\"titanic-submission.csv\", index=False)","ef9aa688":"from xgboost import XGBClassifier","78bf4635":"ald_xgb_model = XGBClassifier()\nald_xgb_params = [\n    {\"n_estimators\": [100, 220, 230, 250, 270],\n     \"max_depth\": [1, 2, 3, 4, 5],\n     \"learning_rate\": [0.01, 0.02, 0.05]}\n]\nalg_xgb_grid = GridSearchCV(ald_xgb_model, ald_xgb_params, cv=cv, refit=True, verbose=1, n_jobs=1)\nalg_xgb_grid.fit(X_train, y_train)\nalg_frst_best = alg_xgb_grid.best_params_\nalg_frst_best","72218454":"clf_XGB = XGBClassifier(random_state=1, \n                                    #learning_rate=0.05, max_depth=5, n_estimators=220)\n                                  learning_rate=0.05, max_depth=3, n_estimators=250)\n\n# \u043e\u0431\u0443\u0447\u0430\u0435\u043c \nclf_XGB.fit(X_train, y_train)\n\n# \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u0445\ny_pred_test = clf_XGB.predict(X_test)\ny_pred_train = clf_XGB.predict(X_train)","4b2d9cb0":"skl_acc_train = accuracy_score(y_train, y_pred_train)\nskl_acc_test = accuracy_score(y_test, y_pred_test)\n\nprint(skl_acc_train, skl_acc_test)","5c325e0d":"y_pred_test = clf_XGB.predict(X_test_kaggle)","8eab85b7":"submission = pd.DataFrame({\n    \"PassengerId\": PassengerId,\n    \"Survived\": y_pred_test\n})\n\nsubmission.to_csv(\"submission.csv\", index=False)","7fe608d9":"from sklearn.svm import SVC","8cff172b":"clf_svm = SVC()\n\nsvm_params = [\n    {\"kernel\": [\"rbf\",  \"poly\", \"linear\"],\n     \"degree\": [2, 3, 4, 5]}\n]\nalg_svm_grid = GridSearchCV(clf_svm, svm_params, cv=cv, refit=True, verbose=1, n_jobs=-1)\nalg_svm_grid.fit(X_train, y_train)\nalg_frst_best = alg_svm_grid.best_params_\nalg_frst_best","02647b8d":"clf_SVC = SVC(random_state=1, \n                                 kernel='linear', degree=2)\n\n# \u043e\u0431\u0443\u0447\u0430\u0435\u043c\nclf_SVC.fit(X_train, y_train)\n\n# \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u0445\ny_pred_test = clf_SVC.predict(X_test)\ny_pred_train = clf_SVC.predict(X_train)","fe2fa0b7":"skl_acc_train = accuracy_score(y_train, y_pred_train)\nskl_acc_test = accuracy_score(y_test, y_pred_test)\n\nprint(skl_acc_train, skl_acc_test)","d13afea6":"df['family_size']=1+df['SibSp']+df['Parch']\ndf['one']=np.where(df['family_size']==1, 1, 0)\ndf['child']=np.where(df['Age']<=16, 1, 0)\ndf['baby']=np.where(df['Cabin']=='NaN', 1, 0)\ndf['CabinIsNaN']=df['Cabin'].isna().astype(int)","e8e050b2":"# **xgboost**","d3017641":"X_test_kaggle['family_size']=1+X_test_kaggle['SibSp']+X_test_kaggle['Parch']\nX_test_kaggle['one']=np.where(X_test_kaggle['family_size']==1, 1, 0)\nX_test_kaggle['child']=np.where(X_test_kaggle['Age']<=16, 1, 0)\nX_test_kaggle['baby']=np.where(X_test_kaggle['Cabin']=='NaN', 1, 0)\nX_test_kaggle['CabinIsNaN']=X_test_kaggle['Cabin'].isna().astype(int)","478860e0":"submission = pd.DataFrame({\n    \"PassengerId\": PassengerId,\n    \"Survived\": y_pred_test\n})\n\nsubmission.to_csv(\"titanic-submission.csv\", index=False)","9767c327":"y_pred_test = clf_SVC.predict(X_test_kaggle)","31af926d":"# **SVM**"}}