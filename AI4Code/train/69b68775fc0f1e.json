{"cell_type":{"6f33b8d3":"code","5a324932":"code","40249125":"code","0716e73f":"code","7f8de5d2":"code","de397697":"code","a5efe57c":"code","e4aa0c57":"code","ea826e5d":"code","bfc0bdde":"code","0cfd1ed0":"code","d4261bbc":"code","e3bbaa22":"code","1edb2e5d":"code","33899d39":"code","8642a898":"code","30f9e97f":"code","3bb6a4a4":"code","4d3937d3":"code","a5cec961":"code","4e4312d1":"code","f22ad30f":"code","410985bd":"code","3e02615d":"code","5342cd30":"code","a892637c":"code","1dfde7dc":"code","3da40221":"code","726b334a":"code","407f2cee":"code","ad0eaa6a":"code","5974ff30":"code","27a42ede":"code","92933296":"code","1d36c9f1":"code","65770f8a":"code","9c86c665":"code","dcf51d0c":"code","0aed14e5":"code","b37e6c5a":"code","db2ec227":"code","231f08d3":"code","8cdd95b9":"code","a56bf2b3":"code","c76a2f75":"code","030a1bd2":"code","0357ef99":"code","e0c4c426":"code","e1b0e8de":"code","917004a2":"code","6225e5e9":"code","bd29f554":"code","20c1cf50":"code","27a5c7d9":"code","a5e3eab3":"code","c0f0fad1":"code","ed188deb":"code","feb06121":"code","42717cf6":"code","f9219a17":"code","7718f788":"code","1765c012":"code","42775ed0":"code","877722ad":"code","b4816a55":"code","e84b8343":"code","d855e254":"code","07c8998f":"code","d433f911":"code","495fd0e8":"code","9777d9ce":"code","b606dc1e":"code","2e296f84":"code","54180310":"code","f98f556f":"code","39e4a995":"code","20b926ba":"code","0967e8d1":"code","96e8aba9":"code","6b2b7d16":"code","f1e8a01c":"code","1b91ea56":"code","6de4ee36":"code","2dc1a77b":"code","da0877b5":"code","d280e3e5":"code","8c90cc20":"code","563fd5c6":"code","349573df":"code","01e8059f":"code","639411f9":"code","b9193d3c":"code","3f50317a":"code","c9a5cfe7":"code","5304477e":"code","cf1a1ed7":"code","9783c11e":"code","07488e4f":"code","d41c5b75":"code","f444acf0":"code","b705d418":"code","30af4d68":"code","4735b886":"code","4da61035":"markdown","40eb9b24":"markdown","7d44be6d":"markdown","a9299667":"markdown","28eb1197":"markdown","5ab35829":"markdown","69188c8a":"markdown","116aa5d2":"markdown","7a50590d":"markdown","d9b82cce":"markdown","0d4a95d3":"markdown","bd50a97a":"markdown","45228dcd":"markdown","0e5cf031":"markdown","8a2fbc27":"markdown","1d9e7425":"markdown","d5400409":"markdown","2bb48c95":"markdown"},"source":{"6f33b8d3":"import pandas as pd","5a324932":"path=\"..\/input\/aptos2019-blindness-detection\/\"","40249125":"df = pd.read_csv(path+'train.csv')","0716e73f":"df.head()","7f8de5d2":"df['diagnosis'].hist()","de397697":"df['diagnosis'].value_counts()","a5efe57c":"\u00f6rnek = df.sort_values(by=['id_code'])","e4aa0c57":"\u00f6rnek.head()","ea826e5d":"import os","bfc0bdde":"files = os.listdir(path+'train_images')","0cfd1ed0":"files[1:5]","d4261bbc":"len(files)","e3bbaa22":"import cv2","1edb2e5d":"img_list=[]\n\nfor i in files[0:20] :\n    image = cv2.imread(path+'train_images\/'+i)\n    image = cv2.resize(image,(400,400))\n    image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n    img_list.append(image)","33899d39":"len(img_list)","8642a898":"import matplotlib.pyplot as plt\nplt.imshow(img_list[0])","30f9e97f":"plt.imshow(img_list[19])","3bb6a4a4":"kopya = img_list[0].copy()","4d3937d3":"kopya = cv2.cvtColor(kopya,cv2.COLOR_RGB2GRAY)","a5cec961":"plt.imshow(kopya,cmap='gray')","4e4312d1":"kopya.shape","f22ad30f":"blur = cv2.cv2.GaussianBlur(kopya,(5,5),0)","410985bd":"plt.imshow(blur,cmap='gray')","3e02615d":"thresh = cv2.threshold(blur,10,255,cv2.THRESH_BINARY)[1]","5342cd30":"plt.imshow(thresh,cmap='gray')","a892637c":"kontur = cv2.findContours(thresh.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)","1dfde7dc":"kontur","3da40221":"kontur = kontur[0][0]","726b334a":"kontur.shape","407f2cee":"kontur = kontur[:,0,:]\nkontur.shape                ","ad0eaa6a":"kontur","5974ff30":"sol = tuple(kontur[kontur[:,0].argmin()])\nsa\u011f = tuple(kontur[kontur[:,0].argmax()])\n\u00fcst = tuple(kontur[kontur[:,1].argmin()])\nalt = tuple(kontur[kontur[:,1].argmax()])","27a42ede":"sol,sa\u011f,\u00fcst,alt","92933296":"x1 = sol[0]\ny1 = \u00fcst[1]\nx2 = sa\u011f[0]\ny2 = alt[1]","1d36c9f1":"x1,y1,x2,y2","65770f8a":"orjinal = img_list[0].copy()","9c86c665":"plt.imshow(orjinal)","dcf51d0c":"crop = orjinal[y1:y2 , x1:x2]","0aed14e5":"plt.imshow(crop)","b37e6c5a":"crop.shape","db2ec227":"crop = cv2.resize(crop,(400,400))","231f08d3":"plt.imshow(crop)","8cdd95b9":"lab = cv2.cvtColor(crop,cv2.COLOR_RGB2LAB)","a56bf2b3":"lab.shape","c76a2f75":"l,a,b = cv2.split(lab)","030a1bd2":"plt.imshow(l,cmap='gray')","0357ef99":"l.shape","e0c4c426":"d\u00fcz = l.flatten()","e1b0e8de":"d\u00fcz.shape","917004a2":"plt.hist(d\u00fcz,25,[0,255],color='r')\nplt.show()","6225e5e9":"clahe = cv2.createCLAHE(clipLimit=7.0,tileGridSize=((8,8)))\ncl = clahe.apply(l)","bd29f554":"plt.hist(cl.flatten(),25,[0,255],color='r')\nplt.show()","20c1cf50":"plt.subplot(1,2,1)\nplt.imshow(cl,cmap='gray')\n\nplt.subplot(1,2,2)\nplt.imshow(l,cmap='gray')","27a5c7d9":"limg = cv2.merge((cl,a,b))","a5e3eab3":"son = cv2.cvtColor(limg,cv2.COLOR_LAB2RGB)","c0f0fad1":"plt.subplot(1,2,1)\nplt.imshow(son)\n\nplt.subplot(1,2,2)\nplt.imshow(crop)","ed188deb":"med_son = cv2.medianBlur(son,3)","feb06121":"plt.subplot(1,2,1)\nplt.imshow(med_son)\n\nplt.subplot(1,2,2)\nplt.imshow(crop)","42717cf6":"arka_plan = cv2.medianBlur(son,37)","f9219a17":"maske = cv2.addWeighted(med_son,1,arka_plan,-1,255)\nplt.imshow(maske)","7718f788":"son_img = cv2.bitwise_and(maske,med_son)","1765c012":"plt.subplot(1,2,1)\nplt.imshow(med_son)\n\nplt.subplot(1,2,2)\nplt.imshow(son_img)","42775ed0":"i =files[7]\nimage = cv2.imread(path+'train_images\/'+i)\nimage = cv2.resize(image,(400,400))\nimage = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\nplt.imshow(image)","877722ad":"img_list=[]\n\nfrom tqdm.notebook import tqdm # yapt\u0131\u011f\u0131m\u0131z i\u015flemlerdeki ilerlemeyi g\u00f6selle\u015ftirmeye yarayan bir k\u00fct\u00fcphane\n\nfor i in tqdm(files[0:1000]) :\n    image = cv2.imread(path+'train_images\/'+i)\n    image = cv2.resize(image,(400,400))\n    image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n    kopya = image.copy()\n    kopya = cv2.cvtColor(kopya,cv2.COLOR_RGB2GRAY)\n    blur = cv2.GaussianBlur(kopya,(5,5),0)\n    thresh = cv2.threshold(blur,10,255,cv2.THRESH_BINARY)[1]\n    kontur = cv2.findContours(thresh.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n    kontur = kontur[0][0]\n    kontur = kontur[:,0,:]\n    x1 = tuple(kontur[kontur[:,0].argmin()])[0]\n    x2 = tuple(kontur[kontur[:,0].argmax()])[0]\n    y1 = tuple(kontur[kontur[:,1].argmin()])[1]\n    y2 = tuple(kontur[kontur[:,1].argmax()])[1]\n    x = int(x2-x1)*4\/\/50\n    y = int(y2-y1)*5\/\/50\n    kopya2 = image.copy()\n    if x2-x1>100 and y2-y1>100 :\n        kopya2 = kopya2[y1+y:y2-y , x1+x:x2-x]\n        kopya2 = cv2.resize(kopya2,(400,400))\n    lab = cv2.cvtColor(kopya2,cv2.COLOR_RGB2LAB)\n    l,a,b = cv2.split(lab)\n    clahe = cv2.createCLAHE(clipLimit=5.0,tileGridSize=((8,8)))\n    cl = clahe.apply(l)\n    limg = cv2.merge((cl,a,b))\n    son = cv2.cvtColor(limg,cv2.COLOR_LAB2RGB)\n    med_son = cv2.medianBlur(son,3)\n    arka_plan = cv2.medianBlur(son,37)\n    maske = cv2.addWeighted(med_son,1,arka_plan,-1,255)\n    son_img = cv2.bitwise_and(maske,med_son)\n    img_list.append(son_img)","b4816a55":"plt.figure(figsize=(20,12))\nfor i in range(12) :\n    plt.subplot(3,4,i+1)\n    plt.imshow(img_list[i])\n    \nplt.tight_layout()","e84b8343":"df['diagnosis']","d855e254":"y_train = pd.get_dummies(df['diagnosis']).values","07c8998f":"y_train","d433f911":"df['diagnosis'][0]","495fd0e8":"y_train[0]","9777d9ce":"import numpy as np\ny_train_son = np.ones(y_train.shape,dtype='uint8')","b606dc1e":"y_train_son","2e296f84":"y_train_son[:,4]=y_train[:,4]","54180310":"y_train_son","f98f556f":"for i in range(3,-1,-1):\n    y_train_son[:,i] = np.logical_or(y_train[:,i],y_train_son[:,i+1])","39e4a995":"y_train_son=y_train_son[0:1000]","20b926ba":"y_train","0967e8d1":"x_train = np.array(img_list)","96e8aba9":"x_train.shape","6b2b7d16":"y_train_son.shape","f1e8a01c":"from sklearn.model_selection import train_test_split\n\nx_train,x_val,y_train,y_val = train_test_split(x_train,\n                                              y_train_son,\n                                              test_size=0.15,\n                                              random_state=42,\n                                              shuffle=True)","1b91ea56":"x_train.shape,x_val.shape,y_train.shape,y_val.shape","6de4ee36":"from keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(horizontal_flip=True,vertical_flip=True)\ndata_generator = datagen.flow(x_train,y_train,batch_size=5,seed=42)","2dc1a77b":"pip install efficientnet","da0877b5":"from efficientnet.keras import EfficientNetB5","d280e3e5":"\u00f6rnek_model = EfficientNetB5()","8c90cc20":"\u00f6rnek_model.summary()","563fd5c6":"\u00f6rnek_model2 = EfficientNetB5(include_top=False)\n\u00f6rnek_model2.summary()","349573df":"from keras.models import Sequential\nfrom keras import layers\n\nmodel = Sequential()\nmodel.add(EfficientNetB5(weights='imagenet',include_top=False,input_shape=(400,400,3)))\nmodel.add(layers.GlobalAveragePooling2D())\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(5,activation='sigmoid'))","01e8059f":"from keras.optimizers import Adam\nmodel.compile(loss='binary_crossentropy',optimizer=Adam(lr=0.0005),metrics=['accuracy'])","639411f9":"from keras.callbacks import ReduceLROnPlateau\n\nlr = ReduceLROnPlateau(monitor='val_loss',\n                       patience= 3,\n                       verbose = 1,\n                       mode = 'auto',\n                       factor = 0.25,\n                       min_lr= 0.0001)","b9193d3c":"history = model.fit_generator(data_generator,\n                             steps_per_epoch=int(len(x_train)\/10),\n                             epochs=3,\n                             validation_data=(x_val,y_val),\n                             callbacks=[lr])","3f50317a":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.legend(['E\u011fitim','Do\u011frulama'])\nplt.title('Do\u011fruluk(Accuracy)%')\nplt.xlabel('Epoch Say\u0131s\u0131')\nplt.ylabel('Y\u00fczde(%)')","c9a5cfe7":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['E\u011fitim','Do\u011frulama'])\nplt.title('Kay\u0131p Skoru(Loss)%')\nplt.xlabel('Epoch Say\u0131s\u0131')\nplt.ylabel('Y\u00fczde(%)')","5304477e":"x_test = np.asarray(x_val)\nx_test.shape","cf1a1ed7":"y_test = np.asarray(y_val)\ny_test.shape","9783c11e":"y_test","07488e4f":"y_true = y_test\ny_pred = model.predict_classes(x_test)\ny_probas = model.predict(x_test)","d41c5b75":"y_true[0],y_pred[0],y_probas[0]","f444acf0":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns","b705d418":"pred_Y = model.predict(x_test, batch_size = 32, verbose = True)\npred_Y_cat = np.argmax(pred_Y, -1)","30af4d68":"from sklearn.metrics import classification_report, confusion_matrix\n\ncm=(confusion_matrix(np.argmax(y_true,-1), pred_Y_cat))","4735b886":"cm2 = pd.DataFrame(cm,columns=['kolon isimleri'],index=['s\u00fctun isimleri'])\nplt.figure(figsize=(6,5))\nhm = sns.heatmap(cm2,annot=True,fmt ='n')\nhm.tick_params(labeltop=True,labelbottom=False,top=True,bottom=False)\nhm.set_xlabel('Model tahmini')\nhm.xaxis.set_label_position('top')\nhm.set_ylabel('Doktor te\u015fhisi')","4da61035":"![image.png](attachment:image.png)","40eb9b24":"# CLAHE -> Kontrast Limitli Adaptif Histogram E\u015fitleme","7d44be6d":"# Median Blur","a9299667":"# Hata Matrisi","28eb1197":"![image.png](attachment:image.png)","5ab35829":"# Maske","69188c8a":"`pd.get_dummies` ( s\u0131n\u0131fland\u0131rma verisi ) Kategorik de\u011fi\u015fkeni , 0 ve  1'lerden olu\u015fan kukla de\u011fi\u015fkenlere d\u00f6n\u00fc\u015ft\u00fcr\u00fc.( One Hot Encoding )","116aa5d2":"`ReduceLROnPlateau()` izlenen monitor de\u011ferinin geli\u015fmesi durdu\u011funda \u00f6\u011frenme oran\u0131n\u0131 azalt\u0131r.Genelde \u00f6\u011fernme durgunla\u015ft\u0131\u011f\u0131nda, \u00f6\u011frenme oran\u0131 2-10 kat azalt\u0131\u011f\u0131nda model ba\u015far\u0131s\u0131 artar. ","7a50590d":"`datagen.flow()` G\u00f6r\u00fcnt\u00fclerin ve s\u0131n\u0131fland\u0131rma verilerini al\u0131r, girilen `batch_size` b\u00fcy\u00fckl\u00fc\u011f\u00fcne g\u00f6re, modele e\u011fitime girmeye haz\u0131r tensor gruplar\u0131 olu\u015fturur.\nTensor ne kadar b\u00fcy\u00fck olursa , bilgisayar o kadar zorlan\u0131r.","d9b82cce":"# Histogram \u015feklinde verilerin grafi\u011fi","0d4a95d3":"![image.png](attachment:image.png)","bd50a97a":"olu\u015fturdu\u011fumuz maskeyi orjinal g\u00f6r\u00fcnt\u00fc ile birle\u015ftirerek kan damarlar\u0131n\u0131n daha belirgin hale gelmesini sa\u011flad\u0131k","45228dcd":"![image.png](attachment:image.png)","0e5cf031":"![image.png](attachment:image.png)","8a2fbc27":"# Elimizdeki verilerin say\u0131s\u0131n\u0131 inceleme","1d9e7425":"`include_top=False` son katmandaki fully connected katmanlar\u0131n\u0131 \u00e7\u0131kar\u0131yoruz","d5400409":"![image.png](attachment:image.png)","2bb48c95":"![image.png](attachment:image.png)"}}