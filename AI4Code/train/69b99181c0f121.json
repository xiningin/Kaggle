{"cell_type":{"227c6176":"code","e5cfc353":"code","28035f4c":"code","ad6a6e1e":"code","cb454087":"code","2010e971":"code","aaf531d6":"code","48753e35":"code","ef214726":"code","0f627479":"code","d0e39c23":"code","c588262f":"code","dc243fa0":"code","29ecfa42":"code","226a6fd0":"code","c5743172":"code","3dcc7231":"code","0cb92424":"code","21f2e5ba":"code","0bf6ae97":"code","df853d27":"code","47154db9":"code","9093a87b":"code","e694060e":"code","7700c386":"code","d943a735":"code","133f83ed":"code","18a64b21":"code","f0c31084":"code","f5e861fc":"code","e0ef8b17":"code","56213ef1":"code","9fbfb491":"code","27166c6d":"code","401cc651":"code","65cb0a68":"code","f6d63c44":"code","9d939ee4":"code","75b25c20":"markdown","70f5deb2":"markdown"},"source":{"227c6176":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e5cfc353":"\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport pickle\nfrom tqdm import tqdm\nfrom wordcloud import WordCloud\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_auc_score,roc_curve,auc,confusion_matrix,classification_report\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")\nfrom IPython.display import Image,YouTubeVideo,HTML\n\n#KERAS Import\nfrom keras.models import Sequential, Model\nfrom keras.utils import to_categorical,plot_model\nfrom keras.layers import Dense, Activation\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.initializers import he_normal\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing import sequence\nfrom keras.layers import Dropout\nfrom keras.layers import Embedding, LSTM, GRU, Flatten, Input, concatenate, Conv1D, GlobalMaxPool1D, SpatialDropout1D,MaxPooling1D, Bidirectional, GlobalAveragePooling1D, add\nfrom keras.regularizers import l2\nfrom keras.optimizers import Adam\nfrom keras.initializers import Orthogonal\nfrom keras.preprocessing.text import one_hot\nfrom keras.constraints import max_norm\n#from tensorboardcolab import TensorBoardColab, TensorBoardColabCallback\n\n#for attention mechanism\nfrom keras import backend as K\nfrom keras.engine.topology import Layer\nfrom keras import initializers, regularizers, constraints, optimizers, layers","28035f4c":"import re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","ad6a6e1e":"df = pd.read_csv(\"..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/train.csv\")\n","cb454087":"test_df= pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv')","2010e971":"# Combining all the above statemennts \npreprocessed_comments = []\n# tqdm is for printing the status bar\nfor sentence in tqdm(df['comment_text'].values):\n    sent = decontracted(sentence)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() )\n    preprocessed_comments.append(sent.lower().strip())","aaf531d6":"df['comment_text'] = preprocessed_comments","48753e35":"#test_df = pd.read_csv('..\/input\/test-df\/test_df.csv')\npreprocessed_comments_test = []\n# tqdm is for printing the status bar\nfor sentence in tqdm(test_df['comment_text'].values):\n    sent = decontracted(sentence)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split())\n    preprocessed_comments_test.append(sent.lower().strip())\n    ","ef214726":"test_df['comment_text'] = preprocessed_comments_test","0f627479":"identity_columns = ['male', 'female', 'homosexual_gay_or_lesbian', 'christian', 'jewish',\n    'muslim', 'black', 'white', 'psychiatric_or_mental_illness']","d0e39c23":"for column in identity_columns + ['target']:\n    df[column] = np.where(df[column]>= .5, True, False)","c588262f":"y = df['target'].values","dc243fa0":"#df.drop(columns = \"target\",inplace=True)","29ecfa42":"train_df, cv_df, y_train,cv_y = train_test_split(df, y, test_size=0.2, random_state=42)\n","226a6fd0":"y_train","c5743172":"# https:\/\/www.kaggle.com\/c\/jigsaw-unintended-bias-in-toxicity-classification\/discussion\/90986#latest-527331\nSUBGROUP_AUC = 'subgroup_auc'\nBPSN_AUC = 'bpsn_auc'  # stands for background positive, subgroup negative\nBNSP_AUC = 'bnsp_auc'  # stands for background negative, subgroup positive\nTOXICITY_COLUMN = 'target'\n\ndef compute_auc(y_true, y_pred):\n    try:\n        return metrics.roc_auc_score(y_true, y_pred)\n    except ValueError:\n        return np.nan\n\ndef compute_subgroup_auc(df, subgroup, label, model_name):\n    subgroup_examples = df[df[subgroup]]\n    return compute_auc(subgroup_examples[label], subgroup_examples[model_name])\n\ndef compute_bpsn_auc(df, subgroup, label, model_name):\n    \"\"\"Computes the AUC of the within-subgroup negative examples and the background positive examples.\"\"\"\n    subgroup_negative_examples = df[df[subgroup] & ~df[label]]\n    non_subgroup_positive_examples = df[~df[subgroup] & df[label]]\n    examples = subgroup_negative_examples.append(non_subgroup_positive_examples)\n    return compute_auc(examples[label], examples[model_name])\n\ndef compute_bnsp_auc(df, subgroup, label, model_name):\n    \"\"\"Computes the AUC of the within-subgroup positive examples and the background negative examples.\"\"\"\n    subgroup_positive_examples = df[df[subgroup] & df[label]]\n    non_subgroup_negative_examples = df[~df[subgroup] & ~df[label]]\n    examples = subgroup_positive_examples.append(non_subgroup_negative_examples)\n    return compute_auc(examples[label], examples[model_name])\n\ndef compute_bias_metrics_for_model(dataset,\n                                   subgroups,\n                                   model,\n                                   label_col,\n                                   include_asegs=False):\n    \"\"\"Computes per-subgroup metrics for all subgroups and one model.\"\"\"\n    records = []\n    for subgroup in subgroups:\n        record = {\n            'subgroup': subgroup,\n            'subgroup_size': len(dataset[dataset[subgroup]])\n        }\n        record[SUBGROUP_AUC] = compute_subgroup_auc(dataset, subgroup, label_col, model)\n        record[BPSN_AUC] = compute_bpsn_auc(dataset, subgroup, label_col, model)\n        record[BNSP_AUC] = compute_bnsp_auc(dataset, subgroup, label_col, model)\n        records.append(record)\n    return pd.DataFrame(records).sort_values('subgroup_auc', ascending=True)","3dcc7231":"def calculate_overall_auc(df, model_name):\n    true_labels = df[TOXICITY_COLUMN]\n    predicted_labels = df[model_name]\n    return metrics.roc_auc_score(true_labels, predicted_labels)\n\ndef power_mean(series, p):\n    total = sum(np.power(series, p))\n    return np.power(total \/ len(series), 1 \/ p)\n\ndef get_final_metric(bias_df, overall_auc, POWER=-5, OVERALL_MODEL_WEIGHT=0.25):\n    bias_score = np.average([\n        power_mean(bias_df[SUBGROUP_AUC], POWER),\n        power_mean(bias_df[BPSN_AUC], POWER),\n        power_mean(bias_df[BNSP_AUC], POWER)\n    ])\n    return (OVERALL_MODEL_WEIGHT * overall_auc) + ((1 - OVERALL_MODEL_WEIGHT) * bias_score)","0cb92424":"class Attention(Layer):\n    def __init__(self, step_dim,\n                 W_regularizer=None, b_regularizer=None,\n                 W_constraint=None, b_constraint=None,\n                 bias=True, **kwargs):\n        self.supports_masking = True\n        self.init = initializers.get('glorot_uniform')\n\n        self.W_regularizer = regularizers.get(W_regularizer)\n        self.b_regularizer = regularizers.get(b_regularizer)\n\n        self.W_constraint = constraints.get(W_constraint)\n        self.b_constraint = constraints.get(b_constraint)\n\n        self.bias = bias\n        self.step_dim = step_dim\n        self.features_dim = 0\n        super(Attention, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        assert len(input_shape) == 3\n\n        self.W = self.add_weight((input_shape[-1]),\n                                 initializer=self.init,\n                                 name='{}_W'.format(self.name),\n                                 regularizer=self.W_regularizer,\n                                 constraint=self.W_constraint)\n        self.features_dim = input_shape[-1]\n        if self.bias:\n            self.b = self.add_weight((input_shape[1],),\n                                     initializer='zero',\n                                     name='{}_b'.format(self.name),\n                                     regularizer=self.b_regularizer,\n                                     constraint=self.b_constraint)\n        else:\n            self.b = None\n\n        self.built = True\n\n    def compute_mask(self, input, input_mask=None):\n        return None\n\n    def call(self, x, mask=None):\n        features_dim = self.features_dim\n        step_dim = self.step_dim\n\n        eij = K.reshape(K.dot(K.reshape(x, (-1, features_dim)),\n                        K.reshape(self.W, (features_dim, 1))), (-1, step_dim))\n\n        if self.bias:\n            eij += self.b\n\n        eij = K.tanh(eij)\n\n        a = K.exp(eij)\n\n        if mask is not None:\n            a *= K.cast(mask, K.floatx())\n\n        a \/= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n\n        a = K.expand_dims(a)\n        weighted_input = x * a\n        return K.sum(weighted_input, axis=1)\n\n    def compute_output_shape(self, input_shape):\n        return input_shape[0],  self.features_dim","21f2e5ba":"MAX_VOCAB_SIZE = 100000\nTOXICITY_COLUMN = 'target'\nTEXT_COLUMN = 'comment_text'\nMAX_SEQUENCE_LENGTH = 350\n\n# Create a text tokenizer.\ntokenizer = Tokenizer(num_words=MAX_VOCAB_SIZE)\ntokenizer.fit_on_texts(train_df[TEXT_COLUMN])\n\n# All comments must be truncated or padded to be the same length.\ndef padding_text(texts, tokenizer):\n    return sequence.pad_sequences(tokenizer.texts_to_sequences(texts), maxlen=MAX_SEQUENCE_LENGTH)","0bf6ae97":"del df","df853d27":"import gc\ngc.collect()","47154db9":"train_text = padding_text(train_df[TEXT_COLUMN], tokenizer)\ntrain_y = to_categorical(train_df[TOXICITY_COLUMN])\nvalidate_text = padding_text(cv_df[TEXT_COLUMN], tokenizer)\nvalidate_y = to_categorical(cv_df[TOXICITY_COLUMN])","9093a87b":"# for submission purpose\ntest_text = padding_text(test_df1[TEXT_COLUMN], tokenizer)\n","e694060e":"NUM_EPOCHS = 2\nBATCH_SIZE = 700","7700c386":"# https:\/\/fasttext.cc\/docs\/en\/english-vectors.html\n#!wget https:\/\/dl.fbaipublicfiles.com\/fasttext\/vectors-english\/crawl-300d-2M.vec.zip","d943a735":"\n#!unzip crawl*.zip","133f83ed":"embeddings_index = {}\nwith open('..\/input\/fasttext-crawl-300d-2m\/crawl-300d-2M.vec' ,encoding='utf8') as f:\n    for line in f:\n        values = line.split()\n        word = values[0]\n        coefs = np.asarray(values[1:], dtype='float32')\n        embeddings_index[word] = coefs","18a64b21":"embedding_matrix = np.zeros((len(tokenizer.word_index) + 1,300))\nnum_words_in_embedding = 0\nfor word, i in tokenizer.word_index.items():\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None:\n        num_words_in_embedding += 1\n     # words not found in embedding index will be all-zeros.\n        embedding_matrix[i] = embedding_vector\n        \nembedding_matrix.shape","f0c31084":"plot_model(model, show_shapes=True, to_file='model.png')","f5e861fc":"input_text_lstm = Input(shape=(MAX_SEQUENCE_LENGTH,), dtype='float32')\nembedding_layer_lstm = Embedding(len(tokenizer.word_index) + 1,\n                                    300,\n                                    weights=[embedding_matrix],\n                                    input_length=MAX_SEQUENCE_LENGTH,\n                                    trainable=False)\nl = embedding_layer_lstm(input_text_lstm)\nl = SpatialDropout1D(0.2)(l)\nl = LSTM(128,return_sequences=True,dropout=0.5,kernel_regularizer=l2(0.001))(l)\nl = Flatten()(l)\nl = Dropout(0.5)(l)\nl = Dense(128, activation='relu')(l)\nlstm_output = Dense(2, activation='sigmoid')(l)","e0ef8b17":"model = Model(inputs=[input_text_lstm], outputs=[lstm_output])","56213ef1":"\nplot_model(model, show_shapes=True, to_file='singlelstm.png')\nImage(filename=\"singlelstm.png\")","9fbfb491":"model.compile(loss='binary_crossentropy',\n                  optimizer='adam',\n                  metrics=['accuracy'])","27166c6d":"SLSTM_Model = model.fit(train_text,train_y,\n              batch_size=BATCH_SIZE,\n              epochs=NUM_EPOCHS,\n              validation_data=(validate_text, validate_y))","401cc651":"# Prediction on CV data\nMODEL_NAME = 'slstm_model'\ncv_df[MODEL_NAME] = model.predict(validate_text)[:, 1]\npred = model.predict(test_text)[:, 1]\n","65cb0a68":"submission = pd.DataFrame.from_dict({ 'id': test_df.id, 'prediction': pred}) \nsubmission.to_csv('submission.csv', index=False)","f6d63c44":"bias_metrics_df = compute_bias_metrics_for_model(cv_df, identity_columns, MODEL_NAME, TOXICITY_COLUMN)\nbias_metrics_df","9d939ee4":"get_final_metric(bias_metrics_df, calculate_overall_auc(cv_df, MODEL_NAME))","75b25c20":"Using Convolutional Neural Net for classifying toxic comments\u00b6","70f5deb2":"## Recurrent Neural Network ##\nMetrics definition"}}