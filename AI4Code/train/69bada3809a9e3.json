{"cell_type":{"32627dbe":"code","d7c1ae32":"code","20eaf581":"code","aafc4fc4":"code","7ecd0364":"code","ca99e968":"code","8c537554":"code","98ce88ed":"code","ad51f3e3":"code","37a71739":"code","881cd4e5":"code","f03d8fbb":"code","0ec70983":"code","97298c68":"code","b7864c79":"code","5a84a0fd":"code","a4365036":"code","3d690690":"code","9a6b84d2":"code","8726b973":"code","c0d93b80":"markdown","341c5c9e":"markdown","29653432":"markdown"},"source":{"32627dbe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7c1ae32":"!pip install autogluon==0.3.1 --quiet # autogluon==0.2.0","20eaf581":"!pip install scikit-learn -U --quiet","aafc4fc4":"# Importing core libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib as plt\nimport seaborn as sns\n# Importing AutoGluon\nfrom autogluon.tabular import TabularDataset, TabularPredictor\n\n# Scikit Learn\nfrom sklearn.model_selection import train_test_split\n### YOUR FEATURE ENGINEERING GOES HERE\n\nfrom sklearn.decomposition import FactorAnalysis\nfrom sklearn.preprocessing import StandardScaler\nsns.set_style('whitegrid')\nplt.style.use(\"fivethirtyeight\")\n%matplotlib inline","7ecd0364":"train = pd.read_feather('..\/input\/folds-just-added-in-feather-format\/train_folds.ftr').drop('index',axis=1)\ntest = pd.read_feather('..\/input\/folds-just-added-in-feather-format\/test_stratfold.ftr').drop('index',axis=1)\nsubmission = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","ca99e968":"label = 'pressure'","8c537554":"# From paper https:\/\/arxiv.org\/pdf\/2102.06779.pdf \ntrain[\"R\"].value_counts()  # 50,5 and 20\ntrain[\"C\"].value_counts()   # 10,50,20","98ce88ed":"train[train[\"breath_id\"]==1].head(500).plot.line(x='time_step', y=['pressure','u_in'])","ad51f3e3":"# rewritten calculation of lag features from this notebook: https:\/\/www.kaggle.com\/patrick0302\/add-lag-u-in-as-new-feat\n# some of ideas from this notebook: https:\/\/www.kaggle.com\/mst8823\/google-brain-lightgbm-baseline\ntrain['last_value_u_in'] = train.groupby('breath_id')['u_in'].transform('last')\ntrain['u_in_lag1'] = train.groupby('breath_id')['u_in'].shift(1)\ntrain['u_out_lag1'] = train.groupby('breath_id')['u_out'].shift(1)\ntrain['u_in_lag_back1'] = train.groupby('breath_id')['u_in'].shift(-1)\ntrain['u_out_lag_back1'] = train.groupby('breath_id')['u_out'].shift(-1)\ntrain['u_in_lag2'] = train.groupby('breath_id')['u_in'].shift(2)\ntrain['u_out_lag2'] = train.groupby('breath_id')['u_out'].shift(2)\ntrain['u_in_lag_back2'] = train.groupby('breath_id')['u_in'].shift(-2)\ntrain['u_out_lag_back2'] = train.groupby('breath_id')['u_out'].shift(-2)\ntrain = train.fillna(0)\n\ntrain['R__C'] = train[\"R\"].astype(str) + '__' + train[\"C\"].astype(str)\n\n# max value of u_in and u_out for each breath\ntrain['breath_id__u_in__max'] = train.groupby(['breath_id'])['u_in'].transform('max')\ntrain['breath_id__u_out__max'] = train.groupby(['breath_id'])['u_out'].transform('max')\n\n# difference between consequitive values\ntrain['u_in_diff1'] = train['u_in'] - train['u_in_lag1']\ntrain['u_out_diff1'] = train['u_out'] - train['u_out_lag1']\ntrain['u_in_diff2'] = train['u_in'] - train['u_in_lag2']\ntrain['u_out_diff2'] = train['u_out'] - train['u_out_lag2']\n# from here: https:\/\/www.kaggle.com\/yasufuminakama\/ventilator-pressure-lstm-starter\ntrain.loc[train['time_step'] == 0, 'u_in_diff'] = 0\ntrain.loc[train['time_step'] == 0, 'u_out_diff'] = 0\n\n# difference between the current value of u_in and the max value within the breath\ntrain['breath_id__u_in__diffmax'] = train.groupby(['breath_id'])['u_in'].transform('max') - train['u_in']\ntrain['breath_id__u_in__diffmean'] = train.groupby(['breath_id'])['u_in'].transform('mean') - train['u_in']\n\n# https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction\/discussion\/273974\ntrain['u_in_cumsum'] = train.groupby(['breath_id'])['u_in'].cumsum()\ntrain['time_step_cumsum'] = train.groupby(['breath_id'])['time_step'].cumsum()\n# https:\/\/www.kaggle.com\/yasufuminakama\/ventilator-pressure-lstm-starter\ntrain['breath_time'] = train['time_step'] - train.groupby('breath_id')['time_step'].shift(1)","37a71739":"# all the same for the test data\ntest['last_value_u_in'] = test.groupby('breath_id')['u_in'].transform('last')\ntest['u_in_lag1'] = test.groupby('breath_id')['u_in'].shift(1)\ntest['u_out_lag1'] = test.groupby('breath_id')['u_out'].shift(1)\ntest['u_in_lag_back1'] = test.groupby('breath_id')['u_in'].shift(-1)\ntest['u_out_lag_back1'] = test.groupby('breath_id')['u_out'].shift(-1)\ntest['u_in_lag2'] = test.groupby('breath_id')['u_in'].shift(2)\ntest['u_out_lag2'] = test.groupby('breath_id')['u_out'].shift(2)\ntest['u_in_lag_back2'] = test.groupby('breath_id')['u_in'].shift(-2)\ntest['u_out_lag_back2'] = test.groupby('breath_id')['u_out'].shift(-2)\ntest = test.fillna(0)\n\ntest['R__C'] = test[\"R\"].astype(str) + '__' + test[\"C\"].astype(str)\n\ntest['breath_id__u_in__max'] = test.groupby(['breath_id'])['u_in'].transform('max')\ntest['breath_id__u_out__max'] = test.groupby(['breath_id'])['u_out'].transform('max')\n\ntest['u_in_diff1'] = test['u_in'] - test['u_in_lag1']\ntest['u_out_diff1'] = test['u_out'] - test['u_out_lag1']\ntest['u_in_diff2'] = test['u_in'] - test['u_in_lag2']\ntest['u_out_diff2'] = test['u_out'] - test['u_out_lag2']\ntest.loc[test['time_step'] == 0, 'u_in_diff'] = 0\ntest.loc[test['time_step'] == 0, 'u_out_diff'] = 0\n\ntest['breath_id__u_in__diffmax'] = test.groupby(['breath_id'])['u_in'].transform('max') - test['u_in']\ntest['breath_id__u_in__diffmean'] = test.groupby(['breath_id'])['u_in'].transform('mean') - test['u_in']\n\ntest['u_in_cumsum'] = test.groupby(['breath_id'])['u_in'].cumsum()\ntest['time_step_cumsum'] = test.groupby(['breath_id'])['time_step'].cumsum()\n\ntest['breath_time'] = test['time_step'] - test.groupby('breath_id')['time_step'].shift(1)","881cd4e5":"train = train.fillna(0)\ntest = test.fillna(0)","f03d8fbb":"display(train.head())","0ec70983":"!mkdir agModels","97298c68":"train_data = TabularDataset(train.drop(\"breath_id\",axis=1))\nval_data = TabularDataset(train.drop(\"breath_id\",axis=1).iloc[:100_000, :])","b7864c79":"train_data","5a84a0fd":"save_path = 'agModels'  # specifies folder to store trained models\npresets='best_quality'\nmetric = 'mean_absolute_error'\nhours = 4\nhyperparameters = {\n   # 'NN': {'num_epochs': 500},\n   'GBM': { },\n   'CAT': {'iterations': 18000 },\n   'RF': { },\n   'XT': { },\n   #'KNN': {},\n   #'custom': ['GBM'],\n}\npredictor = (TabularPredictor(label=label, eval_metric=metric,\n                              path=save_path,groups='kfold')\n             .fit(train_data,\n                  presets=presets, #ag_args_fit={'num_gpus': 1},\n                  #hyperparameters=hyperparameters,\n                  #num_bag_folds=5, num_bag_sets=1,\n                  time_limit= int(60 * 60 * hours)) )","a4365036":"results = predictor.fit_summary(show_plot=True)","3d690690":"leaderboard = predictor.leaderboard(val_data)","9a6b84d2":"X_test = TabularDataset(test.drop(\"breath_id\",axis=1))\ntest_data = TabularDataset(X_test)\ntest_preds = predictor.predict(test_data)","8726b973":"# Predicting and submission\nsubmission['pressure'] = test_preds\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission.head()","c0d93b80":"## EDA","341c5c9e":"## Trying AutoGluon","29653432":"## Feature Engg"}}