{"cell_type":{"538fc94d":"code","682e42aa":"code","9b60caac":"code","69cd36b7":"code","302a19f6":"code","a9337b2c":"code","6af428ce":"markdown","f4042ac3":"markdown","1ccae1d2":"markdown"},"source":{"538fc94d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport scipy\nimport librosa\nimport librosa.display\nimport matplotlib.pyplot as plt\nfrom librosa.core import stft, istft\nfrom pydub import AudioSegment\nimport soundfile\nimport audioread\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","682e42aa":"#importing all the necessary libraries\n#do not run the code multiple times\n!conda install -c conda-forge librosa -y\n!conda install -c conda-forge pydub -y","9b60caac":"#loading the song in the music library\ny, sr = librosa.load(\"\/kaggle\/input\/2k.wav\", sr=44100)\ny1,sr62=librosa.load('\/kaggle\/input\/2.wav',sr=44100)\n\n#getting the spectogram of the above music files\nview_spec(y,sr)\nview_spec(y1,sr62)\n\n#getting the stft of the given audio wave\ntst=stft(y)\nprint(tst.shape)\ntstk=stft(y1)\nprint(tstk.shape)\n\n#asking for threshold\n#provide threshold if the begining or the is different for the clips\n#requested to refer to the spectogram for this part\n\ntb=input(\"Enter threshold for the begining: ** 0 if not required \")\ntb=int(tb)\nte=input(\"Enter threshold for ending : ** -1 if not required\")\nte=int(te)\nif te == -1:\n    te=tst.shape[1]","69cd36b7":"#equifying the datasets\n\nif tstk.shape[1] != tst.shape[1]:\n    \n    mini=min(tst.shape[1],tstk.shape[1])\n    c=mini%20\n    mini=mini-c\n    sn=int(mini\/20)\n    tst=tst[:,tb:mini]\n    tstk=tstk[:,tb:mini]\n    \n    #sampling the data set for 20 samples in one example\n    tst=np.array(np.hsplit(tst,sn))\n    \n    #print(tst.shape)\n    tstk=np.array(np.hsplit(tstk,sn))\n   \n    #print(tstk.shape)\n    print(tst.shape,tstk.shape)  \n    print(\"Total examples to be sampled: \",mini,\"\\nTotal example lost: \",c,\"\\nTotal number of groups formed: \",sn)\n\n#test out the matrices\n#print(tst[0:5])\n\ntst=tst.reshape(tst.shape[0],20500)\ntstk=tstk.reshape(tstk.shape[0],20500)\nprint(\"final shapes of audioset and karaoke audio set: \",tst.shape,tstk.shape)","302a19f6":"def view_spec(y,sr):\n    # Let's make and display a mel-scaled power (energy-squared) spectrogram\n    S = librosa.feature.melspectrogram(y, sr=sr, n_mels=128)\n\n    # Convert to log scale (dB). We'll use the peak power (max) as reference.\n    log_S = librosa.power_to_db(S, ref=np.max)\n\n    # Make a new figure\n    plt.figure(figsize=(12,4))\n\n    # Display the spectrogram on a mel scale\n    # sample rate and hop length parameters are used to render the time axis\n    librosa.display.specshow(log_S, sr=sr, x_axis='time', y_axis='mel')\n\n    # Put a descriptive title on the plot\n    plt.title('mel power spectrogram')\n\n    # draw a color bar\n    plt.colorbar(format='%+02.0f dB')\n\n    # Make the figure layout compact\n    plt.tight_layout()\n","a9337b2c":"#creating our model\nmodel=Sequential()\nmodel.add(Dense(20500,activation=\"sigmoid\",input_shape=(20500,1)))\nmodel.add(Dense(20500,activation=\"sigmoid\"))\nmodel.add(Dense(20500,activation=\"sigmoid\"))\nmodel.summary()","6af428ce":"## Defining the DNN Model\n\nOur input layer comes out to be 1025 x 20 = 20500\n\n* We will have a DNN of 3 layers. Each layer will have 20500 hidden units.<br\/>\n* The activation function is going to be * biased sigmoid* function.<br\/> \n* It shall have no bias in the output layer.<br\/>\n* NN size= 20500 x 20500 x 20500<br\/>\n* It is implemented in this way to form a digital mask over the frequency spectogram\n","f4042ac3":"## Spectrogram Fuction","1ccae1d2":"# Karaoke Maker\n\nversion 1.0.0.0:001\n\nThe code follows a paper published on researchgate.com by Andrew J.R. Simpson #1, Gerard Roma #2, Mark D. Plumbley #3\n\n## Abstract\n\n> Identification  and  extraction  of  singing  voice  from  within  musical mixtures is a key challenge in source separation and machine audition. Recent-ly, deep neural networks (DNN) have been used to estimate 'ideal' binary masks for carefully controlled cocktail party speech separation problems. However, it is not yet known whether these methods are capable of generalizing to the dis-crimination of voice and non-voice in the context of musical mixtures. Here, we trained a convolutional DNN (of around a billion parameters) to provide proba-bilistic  estimates  of  the  ideal  binary  mask  for  separation  of  vocal  sounds  from real-world musical mixtures. We contrast our DNN results with more traditional linear  methods.  Our  approach  may  be  useful  for  automatic  removal  of  vocal sounds from musical mixtures for 'karaoke' type applications.  \n\nAccess the complete document \n<a href=\"https:\/\/www.researchgate.net\/publication\/275279991_Deep_Karaoke_Extracting_Vocals_from_Musical_Mixtures_Using_a_Convolutional_Deep_Neural_Network\">here<a\/>\n"}}