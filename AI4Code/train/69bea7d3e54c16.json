{"cell_type":{"f510b8a6":"code","2b90f8be":"code","eb545795":"code","a4aaf5c8":"code","2619d41c":"code","ddb57e93":"code","8b627b03":"code","75b92472":"code","e6d74e65":"code","1c0a5c07":"code","d8fae9c8":"code","e0cbe59a":"code","fd08ca24":"code","62003278":"code","a83a2e3f":"code","6730b2a5":"code","1cbe44e6":"code","2fea0d9a":"markdown","534db018":"markdown","798c4908":"markdown","6b5feaf6":"markdown","d4036683":"markdown","a0a648b3":"markdown","991727e8":"markdown","4a0afe16":"markdown","0a9773d9":"markdown","7836d52b":"markdown","70e94574":"markdown"},"source":{"f510b8a6":"# Install helmet-assignment helper code\n%cd \/kaggle\/working\n!pip install \/kaggle\/input\/helmet-assignment-helpers\/helmet-assignment-main\/ > \/dev\/null 2>&1\nfrom helmet_assignment.score import NFLAssignmentScorer, check_submission\nfrom helmet_assignment.features import add_track_features","2b90f8be":"import numpy as np\nimport pandas as pd\nimport itertools\nimport glob\nimport os\nimport cv2\nfrom sklearn.metrics import accuracy_score\nfrom tqdm.auto import tqdm\nfrom multiprocessing import Pool\nfrom matplotlib import pyplot as plt\nfrom sklearn.cluster import KMeans\nimport random","eb545795":"n_test_videos = len(os.listdir('\/kaggle\/input\/nfl-health-and-safety-helmet-assignment\/test\/'))\n# Run in debug mode unless during submission\nif n_test_videos == 6:\n    debug = True\nelse:\n    debug = False\n\n# Configurables\nn_debug_samples = 1\nrandom_state = 114\nCONF_THRE = 0.3\nmax_iter = 1000\nDIG_STEP = 3\nDIG_MAX = DIG_STEP*10\n\n# Read in the data.\n\nBASE_DIR = '\/kaggle\/input\/nfl-health-and-safety-helmet-assignment'\n\nlabels = pd.read_csv(f'{BASE_DIR}\/train_labels.csv')\nif debug:\n    tracking = pd.read_csv(f'{BASE_DIR}\/train_player_tracking.csv')\n    helmets = pd.read_csv(f'{BASE_DIR}\/train_baseline_helmets.csv')\nelse:\n    tracking = pd.read_csv(f'{BASE_DIR}\/test_player_tracking.csv')\n    helmets = pd.read_csv(f'{BASE_DIR}\/test_baseline_helmets.csv')\n    \ntracking = add_track_features(tracking)","a4aaf5c8":"def add_cols(df):\n    df['game_play'] = df['video_frame'].str.split('_').str[:2].str.join('_')\n    if 'video' not in df.columns:\n        df['video'] = df['video_frame'].str.split('_').str[:3].str.join('_') + '.mp4'\n    return df\n\nif debug:\n    helmets = add_cols(helmets)\n    labels = add_cols(labels)\n    # Select `n_debug_samples` worth of videos to debug with\n    sample_videos = labels['video'].drop_duplicates() \\\n        .sample(n_debug_samples, random_state=random_state).tolist()\n    sample_gameplays = ['_'.join(x.split('_')[:2]) for x in sample_videos]\n    tracking = tracking[tracking['game_play'].isin(sample_gameplays)]\n    helmets = helmets[helmets['video'].isin(sample_videos)]\n    labels = labels[labels['video'].isin(sample_videos)]\ntracking.shape, helmets.shape, labels.shape","2619d41c":"def find_nearest(array, value):\n    value = int(value)\n    array = np.asarray(array).astype(int)\n    idx = (np.abs(array - value)).argmin()\n    return array[idx]\n\ndef norm_arr(a):\n    a = a-a.min()\n    a = a\/a.max()\n    return a\n    \ndef dist(a1, a2):\n    return np.linalg.norm(a1-a2)\n\ndef dist_for_different_len(a1, a2):\n    assert len(a1) >= len(a2), f'{len(a1)}, {len(a2)}'\n    len_diff = len(a1) - len(a2)\n    a2 = norm_arr(a2)\n    if len_diff == 0:\n        a1 = norm_arr(a1)\n        return dist(a1,a2), ()\n    else:\n        min_dist = 10000\n        min_detete_idx = None\n        cnt = 0\n        del_list = list(itertools.combinations(range(len(a1)),len_diff))\n        if len(del_list) > max_iter:\n            del_list = random.sample(del_list, max_iter)\n        for detete_idx in del_list:\n            this_a1 = np.delete(a1, detete_idx)\n            this_a1 = norm_arr(this_a1)\n            this_dist = dist(this_a1, a2)\n            #print(len(a1), len(a2), this_dist)\n            if min_dist > this_dist:\n                min_dist = this_dist\n                min_detete_idx = detete_idx\n                \n        return min_dist, min_detete_idx\n        \ndef rotate_arr(u, t, deg=True):\n    if deg == True:\n        t = np.deg2rad(t)\n    R = np.array([[np.cos(t), -np.sin(t)],\n                  [np.sin(t),  np.cos(t)]])\n    return  np.dot(R, u)\n\ndef dist_rot(tracking_df, a2):\n    tracking_df = tracking_df.sort_values('x')\n    x = tracking_df['x']\n    y = tracking_df['y']\n    min_dist = 10000\n    min_idx = None\n    min_x = None\n    for dig in range(-DIG_MAX,DIG_MAX+1,DIG_STEP):\n        arr = rotate_arr(np.array((x,y)), dig)\n        this_dist, this_idx = dist_for_different_len(np.sort(arr[0]), a2)\n        if min_dist > this_dist:\n            min_dist = this_dist\n            min_idx = this_idx\n            min_x = arr[0]\n    tracking_df['x_rot'] = min_x\n    player_arr = tracking_df.sort_values('x_rot')['player'].values\n    players = np.delete(player_arr,min_idx)\n    return min_dist, players\n\n\ndef mapping_df(args):\n    video_frame, df = args\n    gameKey,playID,view,frame = video_frame.split('_')\n    gameKey = int(gameKey)\n    playID = int(playID)\n    frame = int(frame)\n    this_tracking = tracking[(tracking['gameKey']==gameKey) & (tracking['playID']==playID)]\n    est_frame = find_nearest(this_tracking.est_frame.values, frame)\n    this_tracking = this_tracking[this_tracking['est_frame']==est_frame]\n    len_this_tracking = len(this_tracking)\n    df['center_h_p'] = (df['left']+df['width']\/2).astype(int)\n    df['center_h_m'] = (df['left']+df['width']\/2).astype(int)*-1\n    df = df[df['conf']>CONF_THRE].copy()\n    if len(df) > len_this_tracking:\n        df = df.tail(len_this_tracking)\n    df_p = df.sort_values('center_h_p').copy()\n    df_m = df.sort_values('center_h_m').copy()\n    \n    if view == 'Endzone':\n        this_tracking['x'], this_tracking['y'] = this_tracking['y'].copy(), this_tracking['x'].copy()\n    a2_p = df_p['center_h_p'].values\n    a2_m = df_m['center_h_m'].values\n\n    min_dist_p, min_detete_idx_p = dist_rot(this_tracking ,a2_p)\n    min_dist_m, min_detete_idx_m = dist_rot(this_tracking ,a2_m)\n    if min_dist_p < min_dist_m:\n        min_dist = min_dist_p\n        min_detete_idx = min_detete_idx_p\n        tgt_df = df_p\n    else:\n        min_dist = min_dist_m\n        min_detete_idx = min_detete_idx_m\n        tgt_df = df_m\n    #print(video_frame, len(this_tracking), len(df), len(df[df['conf']>CONF_THRE]), this_tracking['x'].mean(), min_dist_p, min_dist_m, min_dist)\n    tgt_df['label'] = min_detete_idx\n    return tgt_df[['video_frame','left','width','top','height','label']]\n\np = Pool(processes=4)\nsubmission_df_list = []\ndf_list = list(helmets.groupby('video_frame'))\nwith tqdm(total=len(df_list)) as pbar:\n    for this_df in p.imap(mapping_df, df_list):\n        submission_df_list.append(this_df)\n        pbar.update(1)\np.close()\n\nsubmission_df = pd.concat(submission_df_list)\n# submission_df.to_csv('submission-baseline.csv', index=False)","ddb57e93":"if debug:\n    scorer = NFLAssignmentScorer(labels)\n    baseline_score = scorer.score(submission_df)\n    print(f\"validation score {baseline_score:0.4f}\")","8b627b03":"%cd \/kaggle\/working\n!cp -r \/kaggle\/input\/yolov5-deepsort-source\/yolov5-deepsort-pytorch\/Yolov5_DeepSort_Pytorch .\/\n!rm -f \/kaggle\/working\/Yolov5_DeepSort_Pytorch\/best.pt\n!cp \/kaggle\/input\/yolov5-deepsort-source\/best_yolov5m6.pt \/kaggle\/working\/Yolov5_DeepSort_Pytorch\/best.pt","75b92472":"import sys\nsys.path.append('\/kaggle\/input\/easydict-master\/easydict-master')\nsys.path.append('\/kaggle\/working\/Yolov5_DeepSort_Pytorch\/yolov5')","e6d74e65":"%cd \/kaggle\/working\/Yolov5_DeepSort_Pytorch","1c0a5c07":"%%writefile deepsort.yaml\n\nDEEPSORT:\n  REID_CKPT: \"deep_sort_pytorch\/deep_sort\/deep\/checkpoint\/ckpt.t7\"\n  MAX_DIST: 0.1\n  MIN_CONFIDENCE: 0.4\n  MAX_IOU_DISTANCE: 0.6\n  MAX_AGE: 15\n  N_INIT: 1\n  NN_BUDGET: 30","d8fae9c8":"\"\"\"\nHelper functions from yolov5 to plot deepsort labels.\n\"\"\"\n\ndef compute_color_for_id(label):\n    \"\"\"\n    Simple function that adds fixed color depending on the id\n    \"\"\"\n    palette = (2 ** 11 - 1, 2 ** 15 - 1, 2 ** 20 - 1)\n\n    color = [int((p * (label ** 2 - label + 1)) % 255) for p in palette]\n    return tuple(color)\n\ndef plot_one_box(x, im, color=None, label=None, line_thickness=3):\n    # Plots one bounding box on image 'im' using OpenCV\n    assert im.data.contiguous, 'Image not contiguous. Apply np.ascontiguousarray(im) to plot_on_box() input image.'\n    tl = line_thickness or round(0.002 * (im.shape[0] + im.shape[1]) \/ 2) + 1  # line\/font thickness\n    color = color or [random.randint(0, 255) for _ in range(3)]\n    c1, c2 = (int(x[0]), int(x[1])), (int(x[2]), int(x[3]))\n    cv2.rectangle(im, c1, c2, color, thickness=tl, lineType=cv2.LINE_AA)\n    if label: \n        tf = max(tl - 1, 1)  # font thickness\n        t_size = cv2.getTextSize(label, 0, fontScale=tl \/ 3, thickness=tf)[0]\n        c2 = c1[0] + t_size[0], c1[1] - t_size[1] - 3\n        cv2.rectangle(im, c1, c2, color, -1, cv2.LINE_AA)  # filled\n        cv2.putText(im, label, (c1[0], c1[1] - 2), 0, tl \/ 3, [225, 255, 255], thickness=tf, lineType=cv2.LINE_AA)\n    return im","e0cbe59a":"!mkdir -p \/root\/.config\/Ultralytics\n!cp \/kaggle\/input\/nfl-arial\/Arial.ttf \/root\/.config\/Ultralytics\/","fd08ca24":"import torch\nfrom yolov5.utils.datasets import LoadImages\nfrom yolov5.models.experimental import attempt_load\nfrom yolov5.utils.torch_utils import select_device\nfrom yolov5.utils.augmentations import letterbox\nfrom yolov5.utils.general import non_max_suppression, scale_coords, check_img_size, xyxy2xywh\n\nfrom deep_sort_pytorch.deep_sort.deep_sort import DeepSort\nfrom deep_sort_pytorch.utils.parser import get_config\n\n# Load model\ndevice = select_device('0')\nyolo_weights = \"best.pt\"\nmodel = attempt_load(yolo_weights, map_location=device)  # load FP32 model\nstride = int(model.stride.max())  # model stride\nimgsz = 1280\nimgsz = check_img_size(imgsz, s=stride)  # check img_size\nhalf = device.type != 'cpu'  # half precision only supported on CUDA\nif half:\n    model.half()  # to FP16\n# Run inference\nif device.type != 'cpu':\n    # run once\n    model(torch.zeros(1, 3, imgsz, imgsz).to(device).type_as(next(model.parameters())))\n\naugment = False\nconf_thres = 0.4\niou_thres = 0.5\nclasses = 0\nagnostic_nms = False\n    \ndef deepsort_helmets(video_name,\n                     video_data,\n                     video_dir,\n                     deepsort_config='deepsort.yaml',\n                     plot=False,\n                     plot_frames=[]):\n    # Setup Deepsort\n    cfg = get_config()\n    cfg.merge_from_file(deepsort_config)\n    deepsort = DeepSort(cfg.DEEPSORT.REID_CKPT,\n                        max_dist=cfg.DEEPSORT.MAX_DIST,\n                        min_confidence=cfg.DEEPSORT.MIN_CONFIDENCE,\n                        max_iou_distance=cfg.DEEPSORT.MAX_IOU_DISTANCE,\n                        max_age=cfg.DEEPSORT.MAX_AGE,\n                        n_init=cfg.DEEPSORT.N_INIT,\n                        nn_budget=cfg.DEEPSORT.NN_BUDGET,\n                        use_cuda=True)\n    source = os.path.join(video_dir, f'{video_name}.mp4')\n    dataset = LoadImages(source, img_size=imgsz, stride=stride)\n\n    df_lst = []\n    for frame, d in tqdm(video_data.groupby(['frame']), total=video_data['frame'].nunique()):\n        df_lst.append(d)\n    \n    ds = []\n    for frame_idx, (path, img, im0, vid_cap) in enumerate(dataset):\n        d = df_lst[frame_idx]\n        img = torch.from_numpy(img).to(device)\n        img = img.half() if half else img.float()  # uint8 to fp16\/32\n        img \/= 255.0  # 0 - 255 to 0.0 - 1.0\n        if img.ndimension() == 3:\n            img = img.unsqueeze(0)\n        pred = model(img, augment=augment)[0]\n        pred = non_max_suppression(pred, conf_thres, iou_thres, classes=classes, agnostic=agnostic_nms)\n        # Process detections\n        for i, det in enumerate(pred):  # detections per image\n            if det is not None and len(det):\n                # Rescale boxes from img_size to im0 size\n                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()\n                xywhs = xyxy2xywh(det[:, 0:4])\n                confs = det[:, 4]\n                clss = det[:, 5]\n                # pass detections to deepsort\n                outputs = deepsort.update(xywhs.cpu(), confs.cpu(), clss.cpu(), im0)\n                preds_df = pd.DataFrame(outputs, columns=['left','top','right','bottom','deepsort_cluster','class'])\n                if len(preds_df) > 0:\n                    d = pd.merge_asof(d.sort_values(['left','top']),\n                                      preds_df[['left','top','deepsort_cluster']] \\\n                                      .sort_values(['left','top']), on='left', suffixes=('','_deepsort'),\n                                      direction='nearest')\n            else:\n                deepsort.increment_ages()\n        ds.append(d)\n\n    dout = pd.concat(ds)\n    return dout\n\ndef add_deepsort_label_col(out):\n    # Find the top occuring label for each deepsort_cluster\n    sortlabel_map = out.groupby('deepsort_cluster')['label'].value_counts() \\\n        .sort_values(ascending=False).to_frame() \\\n        .rename(columns={'label':'label_count'}) \\\n        .reset_index() \\\n        .groupby(['deepsort_cluster']) \\\n        .first()['label'].to_dict()\n    # Find the # of times that label appears for the deepsort_cluster.\n    sortlabelcount_map = out.groupby('deepsort_cluster')['label'].value_counts() \\\n        .sort_values(ascending=False).to_frame() \\\n        .rename(columns={'label':'label_count'}) \\\n        .reset_index() \\\n        .groupby(['deepsort_cluster']) \\\n        .first()['label_count'].to_dict()\n    \n    out['label_deepsort'] = out['deepsort_cluster'].map(sortlabel_map)\n    out['label_count_deepsort'] = out['deepsort_cluster'].map(sortlabelcount_map)\n\n    return out\n\ndef score_vs_deepsort(myvideo, out, labels):\n    # Score the base predictions compared to the deepsort postprocessed predictions.\n    myvideo_mp4 = myvideo + '.mp4'\n    labels_video = labels.query('video == @myvideo_mp4')\n    scorer = NFLAssignmentScorer(labels_video)\n    out_deduped = out.groupby(['video_frame','label']).first().reset_index()\n    base_video_score = scorer.score(out_deduped)\n    \n    out_preds = out.drop('label', axis=1).rename(columns={'label_deepsort':'label'})\n    print(out_preds.shape)\n    out_preds = out_preds.groupby(['video_frame','label']).first().reset_index()\n    print(out_preds.shape)\n    deepsort_video_score = scorer.score(out_preds)\n    print(f'{base_video_score:0.5f} before --> {deepsort_video_score:0.5f} deepsort')","62003278":"# Add video and frame columns to submission.\nsubmission_df['video'] = submission_df['video_frame'].str.split('_').str[:3].str.join('_')\nsubmission_df['frame'] = submission_df['video_frame'].str.split('_').str[-1].astype('int')\n\nif debug:\n    video_dir = '\/kaggle\/input\/nfl-health-and-safety-helmet-assignment\/train\/'\nelse:\n    video_dir = '\/kaggle\/input\/nfl-health-and-safety-helmet-assignment\/test\/'\n\n# Loop through test videos and apply. If in debug mode show the score change.\nout_ds = []\nouts = []\nfor myvideo, video_data in tqdm(submission_df.groupby('video'), total=submission_df['video'].nunique()):\n#     print(f'==== {myvideo} ====')\n    if debug:\n        # Plot deepsort labels when in debug mode.\n        out = deepsort_helmets(myvideo, video_data, video_dir, plot_frames=[10, 150, 250])\n    else:\n        out = deepsort_helmets(myvideo, video_data, video_dir)\n    out_ds.append(out)\n    out = add_deepsort_label_col(out)\n    outs.append(out)\n    if debug:\n        # Score\n        score_vs_deepsort(myvideo, out, labels)\nsubmission_deepsort = pd.concat(outs).copy()","a83a2e3f":"ss = pd.read_csv('\/kaggle\/input\/nfl-health-and-safety-helmet-assignment\/sample_submission.csv')\n# Final Checks\nsubmission_deepsort['label_deepsort'] = submission_deepsort['label_deepsort'] \\\n    .fillna(submission_deepsort['label'])\nsubmission_deepsort = submission_deepsort.drop('label', axis=1) \\\n    .rename(columns={'label_deepsort':'label'})[ss.columns]\n# Drop duplicate labels\nsubmission_deepsort = submission_deepsort.loc[\n    ~submission_deepsort[['video_frame','label']].duplicated()]\ncheck_submission(submission_deepsort)\n\nsubmission_deepsort.to_csv('\/kaggle\/working\/submission.csv', index=False)","6730b2a5":"from helmet_assignment.video import video_with_predictions\nfrom IPython.display import Video, display\n\nif debug:\n    submission_deepsort['video'] = submission_deepsort['video_frame'].str.split('_').str[:3].str.join('_') + '.mp4'\n    debug_videos = submission_deepsort['video'].unique()\n    debug_labels = labels.query('video in @debug_videos')\n    scorer = NFLAssignmentScorer(debug_labels)\n    scorer.score(submission_deepsort)\n    \n    # Create video showing predictions for one of the videos.\n    video_out = video_with_predictions(\n        f'\/kaggle\/input\/nfl-health-and-safety-helmet-assignment\/train\/{debug_videos[0]}',\n        scorer.sub_labels)\n    \n    frac = 0.60 # scaling factor for display\n    display(Video(data=video_out,\n                  embed=True,\n                  height=int(720*frac),\n                  width=int(1280*frac))\n           )","1cbe44e6":"!rm -rf \/kaggle\/working\/yolov5-v60-deepsort-pytorch","2fea0d9a":"## Score the predictions before applying deepsort postprocessing\n\nThe scores are roughly ~0.3, which is similar to the public leaderboard.","534db018":"## Importing Deepsort from dataset\nBecause your submission is not allowed to use internet access, you can reference the deepsort codebase from the attached dataset. Deepsort also has a dependency of `easydict` which I've also added as a dataset.","798c4908":"## Deepsort config\n\nDeepsort uses a config yaml file for some settings. These are just the default configs and could be improved.","6b5feaf6":"# Helmet Mapping + Deepsort\n\n","d4036683":"# Display video showing predictions\n\nLastly, if we want to review our predictions we can create a video to review the predictions using the `video_with_predictions` function from the `helmet_assignment` helper package.","a0a648b3":"# Check Submission & Save\nFinally we will create a submission file and check that it passes the submission requirements.\nThe steps are:\n1. Drop the `label` and replace with `label_deepsort` predictions.\n2. Remove any duplicate labels within a single video\/frame. This is required to meet the submission requirements.\n3. Save the results.","991727e8":"## Settings and loading data\n\nNote I've extracted `max_iter`, `DIG_STEP` and `DIG_MAX` to the top for easy experimentation. I've also modified the code to run in debug mode if running on the public test set.","4a0afe16":"## Functions to apply deepsort to helmet boxes.\n\nBelow are two functions `deepsort_helmets` which runs deepsort across a video. There is a lot of room for improving this function. The merging of deepsort labels onto the original helmet boxes is currently done in a very crude manner.\n\n`add_deepsort_label_col` mapps the most common label to each deepsort cluster.","0a9773d9":"## Apply Deepsort to Baseline Predictions","7836d52b":"# Baseline helmet mapping\nThis section uses the simple helmet mapping approach from the awesome notebook:\n\nhttps:\/\/www.kaggle.com\/its7171\/nfl-baseline-simple-helmet-mapping","70e94574":"# Deepsort Postprocessing\n\nDeepsort is a popular framework for object tracking within video. \n- [This blog post](https:\/\/nanonets.com\/blog\/object-tracking-deepsort\/\n) shows some examples of it being put to use.\n- This notebook shows how to apply deepsort to this helmet dataset: https:\/\/www.kaggle.com\/s903124\/nfl-helmet-with-yolov5-deepsort-starter\n- You can also read the paper for deepsort here: https:\/\/arxiv.org\/pdf\/1703.07402.pdf\n\nThe approach is fairly simple:\n1. Step through each frame in a video and apply the deepsort algorithm. This clusters helmets across frames when it is the same player\/helmet.\n2. Group by each of these deepsort clusters - and pick the most common label for that cluster. Then override all of the predictions for that helmet to the same player."}}