{"cell_type":{"7de1ba12":"code","8bd1c131":"code","0d9ac133":"code","a024f822":"code","932e12ef":"code","fe34f10e":"code","32753c04":"code","62c8e630":"code","982b14ad":"code","4e1ea2b0":"code","85125ce6":"code","05313d85":"code","e79069af":"code","b2d098f1":"code","a1acc4e6":"code","de3c0198":"code","6e478dc7":"code","d784e5a9":"code","2060c797":"code","4792f28b":"code","07f78090":"code","d8020ad3":"code","4fb598f3":"code","60496c2c":"markdown","bb6f4f2a":"markdown","4f7b553a":"markdown","dc0212ff":"markdown","ad5563df":"markdown","b0d0bf9b":"markdown","28eefa50":"markdown","40d0dc30":"markdown","33c11c4e":"markdown","98232fbe":"markdown","dd1f2569":"markdown","1150dfe6":"markdown"},"source":{"7de1ba12":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nimport seaborn as sbs\n\nsbs.set_theme()\n\n# %matplotlib qt\n%matplotlib inline","8bd1c131":"df = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndf.head()","0d9ac133":"df.info()","a024f822":"df.describe()","932e12ef":"df[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']] = df[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']].replace(0, np.NaN)","fe34f10e":"_ = df.hist(bins=50, figsize=(20, 15))","32753c04":"Healthy =  df[ df['Outcome'] == 0 ]\nDiabetic = df[ df['Outcome'] == 1 ]\n\nh_diab = pd.Series({'healthy':Healthy.shape[0],\n            'Diabetic':Diabetic.shape[0]})\nh_diab.plot.bar(alpha=0.7)","62c8e630":"h_diab.plot.pie(startangle=90, \n                explode=[0, 0.1],\n                autopct='%1.1f%%',\n                colors=['C3', 'C4'])\nplt.title('Relative % of females diabetic ')\nplt.ylabel('')\n_ = plt.axis('equal')","982b14ad":"df.isnull().sum()","4e1ea2b0":"df.pivot_table(index=['Outcome'] )","85125ce6":"def replace_null_values(df):\n    for col in df.columns:\n        df.loc[(df['Outcome']==0) & (df[col].isnull()), col] = df[df['Outcome'] == 0][col].median()\n        df.loc[(df['Outcome']==1) & (df[col].isnull()), col] = df[ df['Outcome'] == 1][col].median()\n    print(df.isnull().sum())\n    \nreplace_null_values(df)","05313d85":"def create_new_bmi(df):\n    new_cat = \"NEW_BMI_CAT\"\n    df.loc[(df['BMI'] < 18.5), new_cat] = \"underweight\"\n    df.loc[(df['BMI'] > 18.5) & (df['BMI'] < 25), new_cat] = \"normal\"\n    df.loc[(df['BMI'] > 24) & (df['BMI'] < 30), new_cat] =  \"overweight\"\n    df.loc[(df['BMI'] > 30) & (df['BMI']< 40), new_cat] = \"obese\"\n    df.drop('BMI', axis=1, inplace=True)\n    df[new_cat] = df[new_cat].astype('category')\n\ndef create_new_glucose(df): \n    new_cat = \"NEW_GLUCOSE_CAT\"\n    df.loc[(df['Glucose'] < 70), new_cat] = \"low\"\n    df.loc[(df['Glucose'] > 70) & (df['Glucose'] < 99), new_cat] = \"normal\"\n    df.loc[(df['Glucose'] > 99) & (df['Glucose'] < 126), new_cat] = \"high\"\n    df.loc[(df['Glucose'] > 126) & (df['Glucose'] < 200), new_cat] = \"very_high\"\n    df[new_cat] = df[new_cat].astype('category')\n\n\ndef create_new_skinthickness(df):\n    new_cat = \"NEW_SKIN_THICKNESS\"\n    df.loc[df['SkinThickness'] < 30, new_cat] = \"normal\"\n    df.loc[df['SkinThickness'] >= 70, new_cat] = \"highfat\"\n    df[new_cat] = df[new_cat].astype('category')\n\ndef create_new_pregnancies(df):\n    new_cat = \"NEW_PREGNANCIES\"\n    df.loc[df['Pregnancies'] == 0, new_cat] = \"no_pregnancies\"\n    df.loc[(df['Pregnancies'] > 0) & df['Pregnancies'] <= 4, new_cat] = \"std_pregnancies\"\n    df.loc[(df['Pregnancies'] > 4), new_cat] = \"over_pregnancies\"\n    df[new_cat] = df[new_cat].astype('category')\n\ndef create_circulation_level(df): \n    new_cat = \"NEW_CIRCULATION_LEVEL\"\n    df.loc[(df['SkinThickness'] < 30) & (df['BloodPressure'] < 80), new_cat] = \"normal\"\n    df.loc[(df['SkinThickness'] > 30) & (df['BloodPressure']>= 80), new_cat] = \"high_risk\"\n    df.loc[((df['SkinThickness']< 30) & (df['BloodPressure'] >=80)) | ((df['SkinThickness']> 30) & (df['BloodPressure'] <80)), new_cat] = \"medium_risk\"\n    df[new_cat] = df[new_cat].astype('category')\n    df.drop('SkinThickness', axis=1, inplace=True)\n    \ndef create_other_features(df):\n    df['PRE_AGE_CAT'] = df['Age'] * df['Pregnancies']\n    df['INSULIN_GLUCOSE_CAT'] = df['Insulin'] * df['Glucose']\n    df.drop('Pregnancies', axis=1, inplace=True)\n    df.drop('Glucose', axis=1, inplace=True)\n    \ncreate_new_bmi(df)\ncreate_new_glucose(df)\ncreate_new_pregnancies(df)\ncreate_new_skinthickness(df)\ncreate_circulation_level(df)\ncreate_other_features(df)\ndf","e79069af":"df['NEW_CIRCULATION_LEVEL'].dtype.name == 'category'","b2d098f1":"len(df['NEW_CIRCULATION_LEVEL'].unique())","a1acc4e6":"label_encoder = preprocessing.LabelEncoder()\ndf['Outcome'] = label_encoder.fit_transform(df['Outcome'])","de3c0198":"categ_cols = [col for col in df.columns if df[col].dtype.name == 'category']\nprint(categ_cols)","6e478dc7":"def one_hot_encoder(df, columns):\n    df_dummy = df.copy()\n    df_dummy = pd.get_dummies(df, columns=columns, drop_first=True)\n    return df_dummy\n\nresult = one_hot_encoder(df, categ_cols)\nresult","d784e5a9":"from sklearn.model_selection import train_test_split\n\nX = result.drop('Outcome', axis=1)\ny = df['Outcome']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","2060c797":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import mean_squared_error\n\nrmse  = lambda labels, predictions: np.sqrt(mean_squared_error(labels, predictions))\n\nlg_model = LogisticRegression(max_iter=1000,C=0.01).fit(X_train, y_train)\nlg_predictions = lg_model.predict(X_test)\nrmse(y_test, lg_predictions)","4792f28b":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import plot_roc_curve\nfrom sklearn.metrics import recall_score\n\nprint(accuracy_score(y_test, lg_predictions))\nprint(roc_auc_score(y_test, lg_predictions))","07f78090":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, lg_predictions))","d8020ad3":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = {'n_estimators': [400, 500, 600], \n              'max_leaf_nodes': [14, 15, 16]}\nrandom_forest = RandomForestClassifier(n_jobs=-1)\n\ngrid_search_rf = GridSearchCV(random_forest, \n                              param_grid=param_grid, \n                              cv=3,\n                              scoring='recall',\n                              return_train_score=True)\ngrid_search_rf.fit(X_train, y_train)\ngrid_search_rf.best_params_","4fb598f3":"print(classification_report(y_test, grid_search_rf.predict(X_test)))\nprint(recall_score(y_test, grid_search_rf.predict(X_test)))\nprint(roc_auc_score(y_test, grid_search_rf.predict_proba(X_test)[:, 1]))","60496c2c":"### Random Forest","bb6f4f2a":"# Diabetes Prediction\n# Pre Exploration Questions?\nThis notebook is inspired from [Serhat Yaz\u0131c\u0131o\u011flu Notebook](https:\/\/www.kaggle.com\/serhatyzc\/diabetes-prediction-with-cart).\n- **What is Diabetes?**\n    \n    Diabetes is a metabolic disease that causes high blood sugar. The hormone insulin moves sugar from the blood into your cells to be stored or used for energy. With diabetes, your body either doesn't make enough insulin or can't effectively use the insulin it does make.\n    \n## Where is this data from?\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to dianostically predict whether or not a patient has diabetes, based on certain diagnostic measaurements included in the dataset. Several contraints were places on the selection of these instance from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\n\n## What are the fea****tures\/columns in the datset and what do they mean?\n|Column | Description| Categorised |\n| --- | --- | --- |\n|**Pregnancies**|Number of times a female candidate become pregnant|$\\begin{aligned}\n\\text{normal: 0-4}\\\\\n\\text{overpregnancies: >4}\n\\end{aligned}$|\n|**Glucose**|Plasma Glucose concentration a 2 hrs in an oral glucose tolerance test.|$\\begin{aligned}\n\\text{low: <70}\\\\\n\\text{normal: 70-99}\\\\\n\\text{high: 99-126}\\\\\n\\text{very_high: >126}\\\\\n\\end{aligned}$|\n|**Blood Pressure**|Diastolic Blood Pressure level (mm\/Hg)|$\\begin{aligned}\n\\text{normal: <80}\\\\\n\\text{risky: >80}\n\\end{aligned}$|\n|**SkinThickness**|Triceps skin fold thickness(mm)|$\\begin{aligned}\n\\text{normal: <30}\\\\\n\\text{highfat: >= 70}\\\\\n\\end{aligned}$|\n|**Insulin**|2-hours  serum insulin (muU\/ml)| - | \n|**BMI**|Body mass index (weight in Kg\/$\\text{(height in m)}^2$)|$\\begin{aligned}\n\\text{underweight: <18.5}\\\\\n\\text{normal: 18.5-25}\\\\\n\\text{overweight: 25-30}\\\\\n\\text{obese: >30}\n\\end{aligned}$|\n|**Diabetes Pedigree Function**|a function which scores likelihood of diabetes based on family history||\n|**Age**| Age in years | |\n|**Outcome**| Class variable (0 or 1) 268 of 768 are 1, the others are 0||\n    \n\n# What needs to be done?\nBuild a machine learning model to accurately predict whether or not the patients in the dataset have diabetes or not?\n\n","4f7b553a":"This does seems to be reasonably acceptable Model. With roc_auc of 92% and recall of 81%. ","dc0212ff":"### Feature Engineering","ad5563df":"Let's see how many diabetic and healthy persons we do have.","b0d0bf9b":"# Model Training\nFirst try with Logistic Regression.","28eefa50":"Since the consequences of detection False Negatives are high; the task should be **Recall centric**.","40d0dc30":"We can replace this null values with median values with the appropriate values for the given outcome.\n\n<mark>If the distribution is not symmetrical, it makes sense to use a median instead of the mean. B\/c it represents the series better as it will be less affected by median outliers.<\/mark>","33c11c4e":"### One-Hot Encoding\nWe'll do One-Hot encoding for categorical cols.","98232fbe":"We can see that some values are outright outliers; like the Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin, BMI are just 0. Which doesn't seems a possible value.","dd1f2569":"### Label Encoding\nDoing Label encoding only for `Outcome` column.","1150dfe6":"### Taking a look at null values"}}