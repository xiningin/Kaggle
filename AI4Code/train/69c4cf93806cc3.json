{"cell_type":{"7936c126":"code","ef1da170":"code","b1ec97ed":"code","47969cab":"code","04cef9aa":"code","1b88a6c5":"code","384d40dd":"code","3251820c":"code","2177ac98":"code","fb249e54":"code","e02a847f":"code","162173ab":"markdown","85d17a5b":"markdown","c8883446":"markdown","315789b7":"markdown","bb6eb5b7":"markdown","106920bd":"markdown"},"source":{"7936c126":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","ef1da170":"data = pd.read_csv('..\/input\/ps4-games\/games_data.csv')","b1ec97ed":"data","47969cab":"data.info()","04cef9aa":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop unused columns\n    df = df.drop(['Unnamed: 0', 'game', 'url'], axis=1)\n    \n    # Split df into X and y\n    y = df['rating']\n    X = df.drop('rating', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","1b88a6c5":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","384d40dd":"X_train","3251820c":"y_train","2177ac98":"models = {\n    \"                     Linear Regression\": LinearRegression(),\n    \" Linear Regression (L2 Regularization)\": Ridge(),\n    \" Linear Regression (L1 Regularization)\": Lasso(),\n    \"                   K-Nearest Neighbors\": KNeighborsRegressor(),\n    \"                        Neural Network\": MLPRegressor(),\n    \"                         Decision Tree\": DecisionTreeRegressor(),\n    \"                         Random Forest\": RandomForestRegressor(),\n    \"                     Gradient Boosting\": GradientBoostingRegressor(),\n    \"                               XGBoost\": XGBRegressor(),\n    \"                              LightGBM\": LGBMRegressor(),\n    \"                              CatBoost\": CatBoostRegressor(verbose=0)\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")","fb249e54":"for name, model in models.items():\n    y_pred = model.predict(X_test)\n    rmse = np.sqrt(np.mean((y_test - y_pred)**2))\n    print(name + \" RMSE: {:.4f}\".format(rmse))","e02a847f":"for name, model in models.items():\n    y_pred = model.predict(X_test)\n    r2 = 1 - (np.sum((y_test - y_pred)**2) \/ np.sum((y_test - y_test.mean())**2))\n    print(name + \" R^2: {:.5f}\".format(r2))","162173ab":"# Preprocessing","85d17a5b":"# Training","c8883446":"# Task for Today  \n\n***\n\n## PS4 Game Rating Prediction  \n\nGiven *data about PS4 games*, let's try to predict the **rating** of a given game.\n\nWe will use a variety of regression models to make our predictions.","315789b7":"# Results","bb6eb5b7":"# Getting Started","106920bd":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/2YM_miNKO9o"}}