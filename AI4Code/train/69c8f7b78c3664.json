{"cell_type":{"ee37d7bd":"code","c195a358":"code","792c93a8":"code","664b77f5":"code","5ac14933":"code","0eb0a286":"code","e4d1346d":"code","56037215":"code","0f3d53e3":"code","ca7e3a3c":"code","dea35cd8":"code","ea58c462":"code","b6c8e71c":"code","39adbdd8":"code","f09e70fb":"code","e7e8db29":"code","7e5fe487":"code","b8089abb":"code","16152dfb":"code","91124e7e":"code","ef7f9663":"code","0138dee9":"code","7e15add4":"code","146c3b25":"code","24de544f":"code","84a9da83":"code","0d15b3ed":"code","ef2c461c":"code","67b196d2":"markdown","cb8cf851":"markdown","59e44abe":"markdown","97b17e22":"markdown"},"source":{"ee37d7bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c195a358":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\n\n#for data preprocessing\nfrom sklearn.decomposition import PCA\n\n#for modeling\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.ensemble import IsolationForest\n\n#filter warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\npd.set_option(\"display.max_rows\",None)\npd.set_option(\"display.max_columns\",None)","792c93a8":"df = pd.read_csv(\"..\/input\/healthcare-providers-data\/Healthcare Providers.csv\")\ndf.head()","664b77f5":"df.columns","5ac14933":"DropCols = ['index', 'National Provider Identifier',\n       'Last Name\/Organization Name of the Provider',\n       'First Name of the Provider', 'Middle Initial of the Provider','Street Address 1 of the Provider',\n       'Street Address 2 of the Provider','Zip Code of the Provider',\"HCPCS Code\"]","0eb0a286":"df = df.drop(DropCols, axis = 1)","e4d1346d":"df.info()","56037215":"df.isnull().sum()","0f3d53e3":"df.head()","ca7e3a3c":"df[\"Entity Type of the Provider\"].value_counts()","dea35cd8":"df[\"Average Submitted Charge Amount\"].dtype","ea58c462":"df[\"Average Submitted Charge Amount\"].dtype","b6c8e71c":"#Cleaning\n\ndef RemoveComma(x):\n    return x.replace(\",\",\"\")\n\ndf[\"Average Medicare Allowed Amount\"] = pd.to_numeric(df[\"Average Medicare Allowed Amount\"].apply(lambda x: RemoveComma(x)),\n                                                             errors= \"ignore\")\ndf[\"Average Submitted Charge Amount\"] = pd.to_numeric(df[\"Average Submitted Charge Amount\"].apply(lambda x: RemoveComma(x)),\n                                                       errors = \"ignore\")\ndf[\"Average Medicare Payment Amount\"] = pd.to_numeric(df[\"Average Medicare Payment Amount\"].apply(lambda x: RemoveComma(x)),\n                                                       errors = \"ignore\")\ndf[\"Average Medicare Standardized Amount\"] = pd.to_numeric(df[\"Average Medicare Standardized Amount\"].apply(lambda x: RemoveComma(x)),\n                                                             errors = \"ignore\")\n","39adbdd8":"import category_encoders as ce\nfrom sklearn.preprocessing import StandardScaler\n\ndef RemoveComma(x):\n    return x.replace(\",\",\"\")\n\ndef Preprocessing(data):\n    \n    \n    #1.Imputing Missing Values\n\n    data[\"Credentials of the Provider\"] = data[\"Credentials of the Provider\"].fillna(data[\"Credentials of the Provider\"].mode()[0])\n    data[\"Gender of the Provider\"] = data[\"Gender of the Provider\"].fillna(data[\"Gender of the Provider\"].mode()[0])\n    \n\n   #2.Binary Encoding.\n\n    \n    BEcols = [var for var in data.columns if data[var].dtype == \"O\"]\n    \n    for col in BEcols:\n        encoder = ce.BinaryEncoder(cols = [col])\n        dfbin = encoder.fit_transform(data[col])\n        data = pd.concat([data,dfbin], axis = 1)\n        del data[col]\n\n    #3. One-Hot-Encoding\n\n#     data = pd.get_dummies(data,drop_first = True)\n    \n \n    #4. Standardization\n \n    data_columns = data.columns\n    std = StandardScaler()\n    data = std.fit_transform(data)\n    data = pd.DataFrame(data, columns = data_columns)\n    \n    return data\n\n\ndf = Preprocessing(df)","f09e70fb":"df.head()","e7e8db29":"from sklearn.ensemble import IsolationForest\n\nmodel = IsolationForest(n_estimators=300, max_samples='auto', \n                        contamination='auto', max_features=1.0, bootstrap=False, n_jobs=None, \n                        behaviour='deprecated', verbose=1, warm_start=False, random_state=2020)\nmodel.fit(df)","7e5fe487":"Y = model.predict(df)","b8089abb":"Y[Y == 1] = 0\nY[Y == -1] = 1","16152dfb":"pca = PCA(2)\nx_pca = pca.fit_transform(df)\nx_pca = pd.DataFrame(x_pca)\nx_pca.columns = ['pc1', 'pc2']\n\nplt.figure(figsize=(12,8))\nplt.title('Sample Distribution on First 2 PCAs by Class Color')\nplt.scatter(x_pca['pc1'], x_pca['pc2'], alpha = .6, c=Y)\nplt.show()","91124e7e":"# for interactive visualizations\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\ninit_notebook_mode(connected = True)\nimport plotly.figure_factory as ff","ef7f9663":"pca = PCA(3)\nx_pca = pca.fit_transform(df)\nx_pca = pd.DataFrame(x_pca)\nx_pca.columns = ['pc1', 'pc2', 'pc3']","0138dee9":"x_pca[\"Label\"] = Y","7e15add4":"trace1 = go.Scatter3d(\n    x= x_pca['pc1'],\n    y= x_pca['pc2'],\n    z= x_pca['pc3'],\n    mode='markers',\n     marker=dict(\n        color = x_pca['Label'], \n        size= 10,\n        line=dict(\n            color= x_pca['Label'],\n            width= 12\n        ),\n        opacity=0.8\n     )\n)\ndt = [trace1]\n\nlayout = go.Layout(\n    title = 'Character vs Gender vs Alive or not',\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    ),\n    scene = dict(\n            xaxis = dict(title  = 'PC1'),\n            yaxis = dict(title  = 'PC2'),\n            zaxis = dict(title  = 'PC3')\n        )\n)\n\nfig = go.Figure(data = dt, layout = layout)\npy.iplot(fig)","146c3b25":"pip install pyod","24de544f":"from pyod.models.auto_encoder import AutoEncoder","84a9da83":"clf1 = AutoEncoder(hidden_neurons =[15, 10, 6, 2, 2, 6, 10, 15], epochs = 26, contamination = .002)\nclf1.fit(df)","0d15b3ed":"y_scores = clf1.decision_scores_\ny_scores = clf1.decision_function(df)  #map all points to one a line\ny_scores = pd.Series(y_scores)","ef2c461c":"plt.figure(figsize=(20,7))\nplt.axvline(18, color = 'b', alpha = .9)\nplt.hist(y_scores, bins=1000)  \nplt.title(\"Histogram for Model Clf1 Anomaly Scores\")\nplt.show()","67b196d2":"# Thanks for reading! Kindly share your approach on Anomaly Detection.","cb8cf851":"Points above 18 are considered as anomalies.","59e44abe":"# Auto Encoders","97b17e22":"# Anomaly Detection using Unsupervised Techniques"}}