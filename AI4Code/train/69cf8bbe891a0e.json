{"cell_type":{"c90fe64a":"code","5044010a":"code","58e05039":"code","ed103680":"code","6aad92f0":"code","f73fdd27":"code","4ec16fba":"code","9e6e3da6":"code","57ec39ce":"code","d5a1b9f6":"code","cfadc34d":"code","1a492b1c":"code","4c47119c":"code","e2f9d360":"code","6ec4b427":"code","168a43d5":"code","32308735":"code","cadcc38d":"code","6292c62e":"code","3eea665d":"code","170539a9":"code","9873444d":"code","1a226e3a":"code","9232d9b0":"code","e5fc8606":"code","d4e5a88c":"code","3a887c46":"code","0c7adacb":"code","d34f3937":"code","c115b733":"code","d0b9452f":"code","d0d8dc26":"code","f0dd5f5b":"code","9d9883b4":"code","a147f9bc":"code","30781e2e":"code","f3f95a6c":"code","f0fee90c":"code","d5a3d70b":"code","0190a634":"code","e671e7e8":"code","fa8d6297":"code","b555e12b":"code","3ecb38e4":"code","bc8234cd":"code","48a92447":"code","510ce4a1":"code","e1cdd901":"markdown","3424c7a0":"markdown"},"source":{"c90fe64a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra|\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5044010a":"import matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport missingno as msno\n\nimport copy\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","58e05039":"orig_train = pd.read_csv('..\/input\/train.csv')\norig_test = pd.read_csv('..\/input\/test.csv')","ed103680":"df_train = copy.deepcopy(orig_train)\ndf_test = copy.deepcopy(orig_test)","6aad92f0":"df_train.loc[df_train.Fare.isnull(), 'Fare'] = orig_train['Fare'].mean()\ndf_test.loc[df_test.Fare.isnull(), 'Fare'] = orig_test['Fare'].mean()","f73fdd27":"from sklearn.preprocessing import scale, robust_scale, minmax_scale, maxabs_scale","4ec16fba":"df_train['Fare_scaled'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare_scaled'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","9e6e3da6":"import seaborn as sns\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare_scaled'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare_scaled'].skew()), ax=ax)\ng = g.legend(loc='best')","57ec39ce":"df_train['Initial'] = orig_train.Name.str.extract('([A-Za-z]+)\\.')\ndf_test['Initial'] = orig_test.Name.str.extract('([A-Za-z]+)\\.')","d5a1b9f6":"df_train['Initial'].replace(['Lady', 'Mlle','Mme','Ms','Dr','Major','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss', 'Woman','Woman','Miss','Master','Mr','Woman','Master','Spec','Spec','Spec','Master','Master', 'Woman'],inplace=True)\n\ndf_test['Initial'].replace(['Lady', 'Mlle','Mme','Ms','Dr','Major','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss', 'Woman','Woman','Miss','Master','Mr','Woman','Master','Spec','Spec','Spec','Master','Master', 'Woman'],inplace=True)","cfadc34d":"pd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r')","1a492b1c":"Master_mean = df_train.loc[df_train.Initial == 'Master', 'Age'].mean()\nMiss_mean = df_train.loc[df_train.Initial == 'Miss', 'Age'].mean()\nMr_mean = df_train.loc[df_train.Initial == 'Mr', 'Age'].mean()\nMrs_mean = df_train.loc[df_train.Initial == 'Mrs', 'Age'].mean()\nSpec = df_train.loc[df_train.Initial == 'Spec', 'Age'].mean()\nWoman_mean = df_train.loc[df_train.Initial == 'Woman', 'Age'].mean()\n\n\nfor i in df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'), 'Age'].index:\n    df_train.Age[i] =  round(Master_mean + np.random.rand()*10)\n    \nfor i in df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'), 'Age'].index:\n    df_train.Age[i] =  round(Miss_mean + np.random.rand()*10)\n    \nfor i in df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'), 'Age'].index:\n    df_train.Age[i] =  round(Mr_mean + np.random.rand()*10)\n    \nfor i in df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'), 'Age'].index:\n    df_train.Age[i] =  round(Mrs_mean + np.random.rand()*10)\n\nfor i in df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Spec'), 'Age'].index:\n    df_train.Age[i] =  round(Spec + np.random.rand()*10)\n    \nfor i in df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Woman'), 'Age'].index:\n    df_train.Age[i] =  round(Woman_mean + np.random.rand()*10)","4c47119c":"Master_mean = df_test.loc[df_test.Initial == 'Master', 'Age'].mean()\nMiss_mean = df_test.loc[df_test.Initial == 'Miss', 'Age'].mean()\nMr_mean = df_test.loc[df_test.Initial == 'Mr', 'Age'].mean()\nMrs_mean = df_test.loc[df_test.Initial == 'Mrs', 'Age'].mean()\nSpec = df_test.loc[df_test.Initial == 'Spec', 'Age'].mean()\nWoman_mean = df_test.loc[df_test.Initial == 'Woman', 'Age'].mean()\n\n\nfor i in df_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'), 'Age'].index:\n    df_test.Age[i] =  round(Master_mean + np.random.rand()*10)\n    \nfor i in df_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'), 'Age'].index:\n    df_test.Age[i] =  round(Miss_mean + np.random.rand()*10)\n    \nfor i in df_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'), 'Age'].index:\n    df_test.Age[i] =  round(Mr_mean + np.random.rand()*10)\n    \nfor i in df_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'), 'Age'].index:\n    df_test.Age[i] =  round(Mrs_mean + np.random.rand()*10)\n\nfor i in df_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Spec'), 'Age'].index:\n    df_test.Age[i] =  round(Spec + np.random.rand()*10)\n    \nfor i in df_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Woman'), 'Age'].index:\n    df_test.Age[i] =  round(Woman_mean + np.random.rand()*10)","e2f9d360":"pd.crosstab(df_train['Age'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","6ec4b427":"df_train['Age_scaled'] = minmax_scale((df_train['Age']-df_train['Age'].mean())\/(df_train['Age'].std()))\ndf_test['Age_scaled'] = minmax_scale((df_test['Age']-df_train['Age'].mean())\/(df_train['Age'].std()))","168a43d5":"pd.crosstab(df_train['Age_scaled'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","32308735":"df_train['Initial'] = df_train['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Spec': 4, 'Woman': 5})\ndf_test['Initial'] = df_test['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Spec': 4, 'Woman': 5})","cadcc38d":"df_train['Initial'] = minmax_scale((df_train['Initial']-df_train['Initial'].mean())\/(df_train['Initial'].std()))\ndf_test['Initial'] = minmax_scale((df_test['Initial']-df_train['Initial'].mean())\/(df_train['Initial'].std()))","6292c62e":"df_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})","3eea665d":"df_train.loc[df_train['Embarked'].isnull()] = int(np.random.randn()*10%3)\ndf_test.loc[df_test['Embarked'].isnull()] = int(np.random.randn()*10%3)","170539a9":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","9873444d":"df_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1})\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1})","1a226e3a":"df_train['FamilySize'] = orig_train['SibSp']+orig_train['Parch']+1\ndf_test['FamilySize'] = orig_test['SibSp']+orig_test['Parch']+1","9232d9b0":"df_train['FamilySize'] = minmax_scale((df_train['FamilySize']-df_train['FamilySize'].mean())\/(df_train['FamilySize'].std()))\ndf_test['FamilySize'] = minmax_scale((df_test['FamilySize']-df_train['FamilySize'].mean())\/(df_train['FamilySize'].std()))","e5fc8606":"df_train['Cabin'] = orig_train['Cabin']\ndf_test['Cabin'] = orig_test['Cabin']","d4e5a88c":"df_train['Cabin'] = orig_train.Cabin.str.extract('([A-Za-z]+)\\w')\ndf_test['Cabin'] = orig_test.Cabin.str.extract('([A-Za-z]+)\\w')","3a887c46":"for i in df_train.loc[(df_train.Cabin.isnull())&(df_train.Pclass == 1)].index:\n    df_train.Cabin[i] = int((np.random.randn()*10)%5)\n    \nfor i in df_train.loc[(df_train.Cabin.isnull())&(df_train.Pclass == 2)].index:\n    df_train.Cabin[i] = int((np.random.randn()*10)%4)+3\n    \nfor i in df_train.loc[(df_train.Cabin.isnull())&(df_train.Pclass == 3)].index:\n    df_train.Cabin[i] = int((np.random.randn()*10)%4)+3","0c7adacb":"for i in df_test.loc[(df_test.Cabin.isnull())&(df_test.Pclass == 1)].index:\n    df_test.Cabin[i] = int((np.random.randn()*10)%5)\n    \nfor i in df_test.loc[(df_test.Cabin.isnull())&(df_test.Pclass == 2)].index:\n    df_test.Cabin[i] = int((np.random.randn()*10)%4)+3\n    \nfor i in df_test.loc[(df_test.Cabin.isnull())&(df_test.Pclass == 3)].index:\n    df_test.Cabin[i] = int((np.random.randn()*10)%4)+3","d34f3937":"df_train['Cabin'].replace(['A', 'B','C','D','E','F','G'],\n                        [0, 1, 2, 3, 4, 5, 6],inplace=True)\n\ndf_test['Cabin'].replace(['A', 'B','C','D','E','F','G'],\n                        [0, 1, 2, 3, 4, 5, 6],inplace=True)","c115b733":"df_train = pd.get_dummies(df_train, columns=['Cabin'], prefix='Cabin')\ndf_test = pd.get_dummies(df_test, columns=['Cabin'], prefix='Cabin')","d0b9452f":"df_train = pd.get_dummies(df_train, columns=['Pclass'], prefix='Pclass')\ndf_test = pd.get_dummies(df_test, columns=['Pclass'], prefix='Pclass')","d0d8dc26":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Initial'], color='b', label='Skewness : {:.2f}'.format(df_train['Initial'].skew()), ax=ax)\ng = g.legend(loc='best')","f0dd5f5b":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Age'], axis=1, inplace=True)","9d9883b4":"df_test.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Age'], axis=1, inplace=True)","a147f9bc":"df_test.shape","30781e2e":"train_X = df_train.drop('Survived', axis=1)\ntrain_Y = df_train['Survived'].as_matrix().reshape(len(df_train['Survived']), 1)\n\ntest_X = df_test","f3f95a6c":"test_X.shape","f0fee90c":"train_X.head()","d5a3d70b":"df_test.isnull().sum()","0190a634":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout","e671e7e8":"model = Sequential()\nmodel.add(Dense(8, activation='relu', input_shape=(18,)))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1, activation='sigmoid'))","fa8d6297":"model.summary()","b555e12b":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","3ecb38e4":"model.fit(x=train_X, y=train_Y, batch_size=32, epochs=300, validation_split=0.3)\n#validation_data=(val_x, val_y),","bc8234cd":"predict = model.predict_classes(test_X)","48a92447":"predict.shape\npredict = predict.reshape(418,)","510ce4a1":"my_first_submission = pd.DataFrame({\"PassengerId\": orig_test[\"PassengerId\"], \"Survived\": predict})\nmy_first_submission.to_csv(\"my_first_submission.csv\", index=False)","e1cdd901":"df_train['Fare_scaled']","3424c7a0":"df_train['Fare_scaled'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare_scaled'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)"}}