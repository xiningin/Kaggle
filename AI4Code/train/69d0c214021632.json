{"cell_type":{"9296f81b":"code","cd89e18b":"code","2ffc0d6a":"code","795dd66f":"code","1b41909e":"code","1b3a44d7":"code","ff4a7623":"code","dd31bbba":"code","a349f77a":"code","181deac5":"code","c949e0ff":"code","1a9b095f":"code","b263300e":"code","885f4baa":"code","08ccfa86":"code","9533c7bb":"code","7b886fba":"code","982b33da":"code","1e9c30e8":"code","39cb3f49":"code","dede12c4":"code","784199d9":"code","6d81b6c1":"code","cba66f0e":"code","6900ca24":"code","68fbc047":"code","cfa52097":"markdown","f02a86fe":"markdown","e5bbd26e":"markdown","f25207e1":"markdown","38134ea2":"markdown","61e4157b":"markdown","a57ac3c8":"markdown","73e34d7c":"markdown","d5b2920c":"markdown","caa783d2":"markdown","6e4f8c55":"markdown"},"source":{"9296f81b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd89e18b":"os.getcwd()","2ffc0d6a":"df = pd.read_csv('..\/input\/calcofi\/bottle.csv')","795dd66f":"df.head()","1b41909e":"df = df[['T_degC', 'Salnty']]\ndf.rename(columns ={'T_degC':'Temperature', 'Salnty': 'Salinity'}, inplace = True)\n\ndf.head(20)","1b3a44d7":"df[:5000].plot.scatter(y='Temperature', x='Salinity')","ff4a7623":"df.isnull().values.any()","dd31bbba":"df = df.dropna()[:5000]","a349f77a":"df.shape","181deac5":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","c949e0ff":"scaler = StandardScaler()\nscaled_data = scaler.fit_transform(df)\nscaled_data","1a9b095f":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(scaled_data[:,0], scaled_data[:,1], test_size=0.30)","b263300e":"from sklearn.linear_model import LinearRegression\n\nreg = LinearRegression()\n\nreg.fit(x_train.reshape(-1,1), y_train)\n\ny_hat = reg.predict(x_test.reshape(-1,1))\n\nprint(y_hat[:10])\nprint(y_test[:10])","885f4baa":"plt.scatter(x_test,y_hat)\nplt.scatter(x_test,y_test, alpha=0.6)\nplt.xlabel('Salinity')\nplt.ylabel('Temperature')","08ccfa86":"from sklearn.metrics import mean_squared_error\n\nlin_mse = mean_squared_error(y_test,y_hat)\nlin_rmse = np.sqrt(lin_mse)\n\nprint(lin_rmse)","9533c7bb":"from sklearn.model_selection import cross_val_score\n\nlin_scores = cross_val_score(reg, x_train.reshape(-1,1), y_train, scoring='neg_mean_squared_error', cv=10)\nlin_rmse_scores = np.sqrt(-lin_scores)","7b886fba":"def display_score(score):\n    print(\"Scores:\", score)\n    print(\"Mean:\", score.mean())\n    print(\"Standard deviation:\", score.std())","982b33da":"display_score(lin_rmse_scores)","1e9c30e8":"from sklearn.tree import DecisionTreeRegressor\n\ntree_reg = DecisionTreeRegressor()\n\ntree_reg.fit(x_train.reshape(-1,1), y_train)\n\ny_hat = tree_reg.predict(x_test.reshape(-1,1))\n\nprint(y_hat[:10])\nprint(y_test[:10])","39cb3f49":"tree_mse = mean_squared_error(y_test,y_hat)\ntree_rmse = np.sqrt(tree_mse)\n\nprint(tree_rmse)","dede12c4":"tree_scores = cross_val_score(tree_reg, x_train.reshape(-1,1), y_train, scoring='neg_mean_squared_error', cv=10)\ntree_rmse_scores = np.sqrt(-tree_scores)\n\ndisplay_score(tree_rmse_scores)","784199d9":"plt.scatter(x_test,y_hat)\nplt.scatter(x_test,y_test, alpha=0.6)\nplt.xlabel('Salinity')\nplt.ylabel('Temperature')","6d81b6c1":"from sklearn.ensemble import RandomForestRegressor\n\nforest_reg = RandomForestRegressor()\n\nforest_reg.fit(x_train.reshape(-1,1), y_train)\n\ny_hat = forest_reg.predict(x_test.reshape(-1,1))\n\nprint(y_hat[:10])\nprint(y_test[:10])","cba66f0e":"forest_mse = mean_squared_error(y_test,y_hat)\nforest_rmse = np.sqrt(forest_mse)\n\nprint(forest_rmse)\n","6900ca24":"forest_scores = cross_val_score(forest_reg, x_train.reshape(-1,1), y_train, scoring='neg_mean_squared_error', cv=10)\nforest_rmse_scores = np.sqrt(-forest_scores)\n\ndisplay_score(forest_rmse_scores)","68fbc047":"plt.scatter(x_test,y_hat)\nplt.scatter(x_test,y_test, alpha=0.6)\nplt.xlabel('Salinity')\nplt.ylabel('Temperature')","cfa52097":"**Model - Linear Regression**","f02a86fe":"**MODEL - DECISION TREE**","e5bbd26e":"Seguimos agora para o modelo de \u00e1rvore de decis\u00e3o","f25207e1":"Houve uma melhora em rela\u00e7\u00e3o ao modelo de regress\u00e3o linear. Agora, iremos testar mais um modelo: o Random Forest","38134ea2":"**CALCULANDO O ERRO DO MODELO**","61e4157b":"**CALCULANDO O ERRO DO MODELO**","a57ac3c8":"**CALCULANDO O ERRO DO MODELO**","73e34d7c":"**MODEL - RANDOM FOREST**","d5b2920c":"Pelo gr\u00e1fico acima e o c\u00e1lculo do erro, vemos que o modelo de regress\u00e3o linear n\u00e3o performa bem para esse dataset.\nUsaremos a cross validation.","caa783d2":"Fun\u00e7\u00e3o auxiliar para mostrar os scores","6e4f8c55":"**Preprocessing Data**"}}