{"cell_type":{"30e8544e":"code","53767a01":"code","c0e57ab0":"code","d7c92cc9":"code","d3d368e9":"code","1edbc5af":"code","6322b9f7":"code","14b848d0":"code","61e69ff5":"code","fe1ab4ca":"code","22ddf466":"code","3a7704a8":"code","b3c589bd":"code","8b60fc76":"code","d06721d9":"code","10db0f08":"markdown","7ef6c4c2":"markdown","a9a0b7eb":"markdown","a80fdc8b":"markdown"},"source":{"30e8544e":"#!pip install --upgrade pip\n!pip install fastai==0.7.0 ## Based on Fast.ai ML course\n\n%load_ext autoreload\n%autoreload 2\n%matplotlib inline","53767a01":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom fastai.imports import *\nfrom fastai.structured import *\nimport os\nfrom matplotlib import pyplot as plt\nimport math\n\nimport lime\nimport lime.lime_tabular\n\nimport shap\nimport eli5\nfrom eli5.sklearn import PermutationImportance\n\nprint(os.listdir(\"..\/input\/\"))","c0e57ab0":"train_df = pd.read_csv(\"..\/input\/train.csv\", index_col = 'Id')\ntest_df = pd.read_csv(\"..\/input\/test.csv\", index_col = 'Id')\ntrain_df.head()","d7c92cc9":"train_df.drop(['MSSubClass', 'MSZoning'],axis =1, inplace = True)\ntrain_df.dropna(axis = 1, how ='any',inplace = True)\ntrain_df = train_df.select_dtypes(exclude=['object'])","d3d368e9":"train_X, val_X, train_y, val_y = train_test_split(train_df.drop(['SalePrice'],axis=1), train_df['SalePrice'], test_size=0.30, random_state=42)","1edbc5af":"m = RandomForestRegressor(n_estimators=1, min_samples_leaf=3, n_jobs=-1, max_depth = 3, oob_score=True) ## Use all CPUs available\nm.fit(train_X, train_y)","6322b9f7":"draw_tree(m.estimators_[0], train_X, precision=3)","14b848d0":"model = RandomForestRegressor(n_estimators=20, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True) ## Use all CPUs available\nmodel.fit(train_X, train_y)","61e69ff5":"perm = PermutationImportance(m, random_state=1).fit(val_X, val_y)\neli5.show_weights(perm, feature_names = val_X.columns.tolist())","fe1ab4ca":"feature = np.array(['LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n       'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF',\n       '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath',\n       'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd',\n       'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n       'MoSold', 'YrSold'])","22ddf466":"categorical_features = np.argwhere(np.array([len(set(train_X.values[:,x])) for x in range(train_X.values.shape[1])]) <= 20).flatten()","3a7704a8":"explainer = lime.lime_tabular.LimeTabularExplainer(train_X.values, feature_names=feature, class_names=['SalePrice'], categorical_features=categorical_features, verbose=True, mode='regression')","b3c589bd":"exp = explainer.explain_instance(val_X.values[25], model.predict, num_features=5)\nexp.show_in_notebook(show_table=True)","8b60fc76":"exp = explainer.explain_instance(val_X.values[73], model.predict, num_features=5)\nexp.show_in_notebook(show_table=True)","d06721d9":"exp = explainer.explain_instance(val_X.values[173], model.predict, num_features=5)\nexp.show_in_notebook(show_table=True)","10db0f08":"**Split the data into training and validation sets**","7ef6c4c2":"A single decision tree did not perform so badly. Now, let's bag a collection of trees to create a random forest","a9a0b7eb":"**For the purpose of LIME implemtation remove null cell column and column that contain object**","a80fdc8b":"**LIME implementation on Regression **"}}