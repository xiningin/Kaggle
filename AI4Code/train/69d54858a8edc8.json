{"cell_type":{"d6bcf486":"code","eb94a520":"code","86fa7276":"code","b2bde4e4":"code","d4008cb7":"code","d9ca6c20":"code","857938bb":"code","123c1159":"code","435a91e5":"code","8c2624e8":"code","a4341087":"code","c40e8ed3":"code","30dc272c":"code","517c46ed":"code","49f92c27":"markdown","a75c5068":"markdown","bfe94e8f":"markdown","51dc8a06":"markdown","c64d4411":"markdown"},"source":{"d6bcf486":"import os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm.auto import tqdm, trange\nimport cv2\n\n\ndataDirectoryPath = os.path.join(\"\/kaggle\/input\", \"labeled-chest-xray-images\",\"chest_xray\")","eb94a520":"#configrations\n\nimg_size=120\nnumClasses=2\nverbose=1\nepochs=50\nbatch_size=16\nkFoldSplitNumber=2\n\n\nimg_height=img_width=img_size\ndatasets = [\"test\",\"train\"]\nlabels = ['PNEUMONIA', 'NORMAL']\n\nroot = os.getcwd()\nexperimentdb_name = \"experimentimage_wh\" + str(img_width) + \"_\" + str(img_height) + \".npz\"\nexperimentImages = os.path.join(experimentdb_name)\n","86fa7276":"if os.path.isfile(experimentImages):\n    try:\n        data = np.load(experimentImages)\n        trainX = data['trainX']\n        trainy = data['trainy']\n        testX = data['testX']\n        testy = data['testy']\n        print(\"Experiment Data has been loaded!!!\")\n    except Exception as e:\n        print(e)\nelse:\n    for dataset in datasets:\n        tmpData=[]\n        for label in labels :\n            classNum= labels.index(label)\n            rawImageDirectory = os.path.join(dataDirectoryPath, dataset, label)\n            ids = next(os.walk(os.path.join(rawImageDirectory)))[2]\n            print(\"Number of \" + dataset +\" \"+ label+\" images in this experiment= \", len(ids))\n            for n, id_ in tqdm(enumerate(ids), total=len(ids)):\n                try:\n                    img= cv2.imread(os.path.join(rawImageDirectory , id_),cv2.IMREAD_GRAYSCALE)\n                    resized_img=cv2.resize(img,(img_size,img_size))\n                    tmpData.append([resized_img,classNum])\n                except Exception as e:\n                    print(e)\n            if dataset==\"test\":\n                testData=tmpData\n            if dataset==\"train\":\n                trainData=tmpData\n    trainX=[]\n    trainy=[]\n    testX=[]\n    testy=[]\n    for image, label in trainData:\n        trainX.append(image)\n        trainy.append(label)\n    for image, label in testData:\n        testX.append(image)\n        testy.append(label)\n    trainX=np.array(trainX)\/255.0\n    testX=np.array(testX)\/255.0\n    trainX = trainX.reshape(-1,img_size,img_size,1)\n    testX = testX.reshape(-1,img_size,img_size,1)\n    trainy=np.array(trainy)\n    testy=np.array(testy)\n    np.savez(experimentImages, trainX=trainX, trainy=trainy, testX=testX, testy=testy)\n\nfrom IPython.display import FileLink\nprint(\"Download Saved Dataset\")\nFileLink(experimentImages)\n","b2bde4e4":"\nimport seaborn as sns\nimport matplotlib.pyplot as plt #for plotting things\nplt.figure(figsize=(15,4))\nplt.subplot(1,2,1)\nplt.title(\"Train Data\")\n\ntrainlabel = []\nfor train in trainy:\n    if(train== 0):\n        trainlabel.append(labels[0])\n    else:\n        trainlabel.append(labels[1])\nax=sns.countplot(trainlabel)\nfor p in ax.patches:\n    ax.annotate('{:}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()+5))\n    \nplt.subplot(1,2,2)\nplt.title(\"Test Data\")\ntestlabel = []\nfor test in testy:\n    if(test== 0):\n        testlabel.append(labels[0])\n    else:\n        testlabel.append(labels[1])\nax=sns.countplot(testlabel)\nfor p in ax.patches:\n    ax.annotate('{:}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()+5))\n\nplt.show()","d4008cb7":"print(\"x_train shape:\", trainX.shape)\nprint(trainX.shape[0], \"train samples\")\nprint(testX .shape[0], \"test samples\")","d9ca6c20":"np.random.seed(70010)\nplt.figure(figsize=(20,20))\nfor i in range(20):\n    rand= np.random.randint(0,trainX.shape[0])\n    plt.subplot(5,4,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(trainX[rand][:,:,0], cmap=plt.cm.binary)\n    plt.xlabel(labels[(trainy[rand])])\nplt.show()","857938bb":"from keras.models import Sequential,load_model\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPool2D, Dropout, Activation, BatchNormalization,AveragePooling2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau,EarlyStopping,ModelCheckpoint\nfrom keras.preprocessing import image\nfrom keras.utils import plot_model,to_categorical\nfrom keras.optimizers import SGD,Adam\n\ninput_shape = (img_height, img_width, 1) \n\n#Basic CNN model LeNet Clone\n\n\nmodel = Sequential(name=\"LeNet_Clone\")  \n    \n#  First Block of CNN\nmodel.add(Conv2D(16 ,(3, 3), padding='same',kernel_initializer='he_uniform', input_shape=input_shape, name=\"FirstConvolution\")) \nmodel.add(Activation('relu',name=\"FirstActivation\"))\nmodel.add(AveragePooling2D(pool_size=(2, 2),strides=(2,2),name=\"FirstMaxPool\"))   \n\n#  Second Block of CNN\nmodel.add(Conv2D(32, (3,3), padding='same',kernel_initializer='he_uniform',name=\"SecondConvolution\")) \nmodel.add(Activation('relu',name=\"SecondActivation\"))\nmodel.add(AveragePooling2D(pool_size=(2, 2),strides=(2,2),name=\"SecondMaxPool\"))  \n    \n#  Flatten and Fully Connected Layer\nmodel.add(Flatten())\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))   \nmodel.add(Dense(10))\nmodel.add(Activation('relu')) \n    \n#  Softmax Classifier\nmodel.add(Dense(numClasses))\nmodel.add(Activation('softmax'))  ","123c1159":"opt = SGD(learning_rate=0.01)\nmodel.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])\nmodel.summary()","435a91e5":"plot_model(model) ","8c2624e8":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import classification_report, accuracy_score, f1_score, precision_score, confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\ndef showResults(y_true, pred):\n    target_names = ['PNEUMONIA', 'NORMAL']\n    print(classification_report(y_true, pred, target_names=target_names))\n    accuracy = accuracy_score(y_true, pred)\n    precision=precision_score(y_true, pred, average='weighted')\n    f1Score=f1_score(y_true, pred, average='weighted') \n    print(\"Accuracy  : {}\".format(accuracy))\n    print(\"Precision : {}\".format(precision))\n    print(\"f1Score : {}\".format(f1Score))\n    cm=confusion_matrix(y_true, pred)\n    fig, ax = plot_confusion_matrix(conf_mat=cm ,show_absolute=True,show_normed=True,  figsize=(4, 4),class_names=target_names,cmap=\"binary\")\n    plt.show()\n    ","a4341087":"from tqdm.keras import TqdmCallback\nes = EarlyStopping(monitor='val_accuracy', mode='auto', verbose=0, patience=30)\n\n#======== Cross Validation ===========\n\nskf = StratifiedKFold(n_splits=kFoldSplitNumber, shuffle=True,random_state=4)\nskf.get_n_splits(trainX, trainy)\nfoldNum=0\nfoldHistory=[]\nfoldResults=[]\nfor train_index, val_index in skf.split(trainX, trainy):\n    savename=\"bestof_fold\"+str(foldNum)+\".hdf5\"\n    foldNum+=1\n    print(\"Results for fold\",foldNum)\n    X_train, X_val = trainX[train_index], trainX[val_index]\n    y_train, y_val = trainy[train_index], trainy[val_index]\n    \n    # one hot encode\n    y_train = to_categorical(y_train)\n    y_val = to_categorical(y_val)\n    \n    checkpoint = ModelCheckpoint(savename, monitor='val_accuracy', verbose=0, save_best_only=True, save_weights_only=False, mode='auto', period=1)\n    opt = SGD(learning_rate=0.01)\n    model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])\n    history = model.fit(X_train, y_train, \n                        validation_data = (X_val, y_val), \n                        epochs=epochs, \n                        verbose=0,\n                        batch_size=batch_size,callbacks=[checkpoint,es,TqdmCallback(verbose=0)])  \n    foldHistory.append(history)\n    yPredict = model.predict(X_val)\n\n    #Decode one hot encoded test label to label    \n    pred = np.argmax(yPredict, axis=1)\n    y_true = np.argmax(y_val, axis=1)\n    foldResults.append([y_true,pred])","c40e8ed3":"\nfor i in range(kFoldSplitNumber):\n    history=foldHistory[i]\n    plt.figure(figsize=(15,4))\n    plt.subplot(1,2,1)\n    #  \"Accuracy\"\n    title=\"Model Accuracy for fold \"+str(i)\n    plt.plot(history.history[\"accuracy\"])\n    plt.plot(history.history[\"val_accuracy\"])\n    plt.title(title)\n    plt.ylabel(\"accuracy\")\n    plt.xlabel(\"epoch\")\n    plt.legend([\"train\", \"validation\"], loc=\"lower right\")\n    plt.subplot(1,2,2)\n    # \n    title=\"Model Loss for fold \"+str(i)\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title(title)\n    plt.ylabel('loss')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'test'], loc='upper right')\n    plt.show()","30dc272c":"# Show Predictions for Validation Set \nfor i in range(kFoldSplitNumber):\n    print(\"Results for fold:\",i+1)\n    y_true,pred=foldResults[i]\n    showResults(y_true, pred)","517c46ed":"# Show Predictions for Test Set for ever Fold\nfor i in range(kFoldSplitNumber):\n    print(\"Results for Test fold:\",i+1)\n    loadname=\"bestof_fold\"+str(i)+\".hdf5\"\n    model = load_model(loadname)\n    model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])\n    #============Test Phase============\n    yPred = model.predict(testX)\n    yTest = to_categorical(testy)\n    pred = np.argmax(yPred, axis=1)\n    y_true = np.argmax(yTest, axis=1)\n    showResults(y_true , pred)","49f92c27":"![image.png](attachment:image.png)","a75c5068":"# # **Part 1 Basic CNN Model (LeNet Clone)**","bfe94e8f":"1. # Visualize the train & test data","51dc8a06":"# **Medical Computer Vision 101 - Classification by Convolutional Neural Networks **\n\nThis notebook is for education purposes.\n\n\nIt is a study prepared for education. The issues to be considered for the best model will be explained step by step.\n\n**Your suggestions and questions are always welcome**","c64d4411":"![image.png](attachment:image.png)"}}