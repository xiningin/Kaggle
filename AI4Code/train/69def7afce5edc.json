{"cell_type":{"ae180ee7":"code","c63df01e":"code","1e6a66c1":"code","6bc1ceab":"code","724f669d":"code","8ad7bbe9":"code","e28bdb2b":"code","220281d1":"code","c44fed5e":"code","d2286e18":"code","7684412d":"code","e45aaf77":"code","8b938718":"code","6343f19e":"markdown","8a394554":"markdown","e8d4d236":"markdown","ec89624d":"markdown"},"source":{"ae180ee7":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt","c63df01e":"df = pd.read_csv('..\/input\/shampoo-saled-dataset\/shampoo_sales.csv')\nprint(df.shape)\ndf['ds'] = pd.to_datetime('200'+df.Month+'-01')\ndf['y'] = df.Sales\ndf.head()","1e6a66c1":"df.set_index('ds')['y'].plot()\nplt.show()","6bc1ceab":"train = df.loc[:29, ['ds','y']]\ntest = df.loc[30:, ['ds','y']]","724f669d":"train.ds","8ad7bbe9":"from fbprophet import Prophet\nfrom datetime import timedelta\nprophet_basic = Prophet()\nprophet_basic.fit(train)\nfuture_pd = prophet_basic.make_future_dataframe(periods=6, freq='M', include_history=True)\nfuture_pd['ds'] = future_pd.ds.dt.strftime('%Y-%m-01')\nresults_pd = prophet_basic.predict(future_pd)\n# results_pd","e28bdb2b":"train.set_index('ds')['y'].plot()\ntest.set_index('ds')['y'].plot()\nresults_pd.set_index('ds')['yhat'].plot(lw=2)","220281d1":"p = prophet_basic.plot(results_pd)","c44fed5e":"f = prophet_basic.plot_components(results_pd)","d2286e18":"from fbprophet.plot import add_changepoints_to_plot\nfig = prophet_basic.plot(results_pd)\na = add_changepoints_to_plot(fig.gca(), prophet_basic, results_pd)","7684412d":"from sklearn.metrics import mean_squared_error\nchangepoint_prior_scale = [0.05, 0.1, 0.25, 0.5, 0.75, 1]\nfor i in changepoint_prior_scale:\n    m = Prophet(changepoint_prior_scale=i)\n    forecast = m.fit(train).predict(future_pd)\n    forecast['y'] = forecast.ds.map(df.set_index('ds')['y'])\n    fig = m.plot(forecast, figsize=(10,4))\n    rmse_train = np.sqrt(mean_squared_error(forecast.loc[:29, 'y'], forecast.loc[:29, 'yhat']))\n    rmse_test = np.sqrt(mean_squared_error(forecast.loc[30:, 'y'], forecast.loc[30:, 'yhat']))\n    a = add_changepoints_to_plot(fig.gca(), m, forecast)\n    plt.title(f'changepoint_prior_scale : {i}; Train RMSE: {rmse_train:.2f}; Test RMSE: {rmse_test:.2f}')\n    plt.show()","e45aaf77":"seasonality_prior_scale = [0.05, 0.5, 1, 5, 10, 15, 20]\nfor i in seasonality_prior_scale:\n    m = Prophet(seasonality_prior_scale=i)\n    forecast = m.fit(train).predict(future_pd)\n    forecast['y'] = forecast.ds.map(df.set_index('ds')['y'])\n    fig = m.plot(forecast, figsize=(10,4))\n    rmse_train = np.sqrt(mean_squared_error(forecast.loc[:29, 'y'], forecast.loc[:29, 'yhat']))\n    rmse_test = np.sqrt(mean_squared_error(forecast.loc[30:, 'y'], forecast.loc[30:, 'yhat']))\n    a = add_changepoints_to_plot(fig.gca(), m, forecast)\n    plt.title(f'seasonality_prior_scale : {i}; Train RMSE: {rmse_train:.2f}; Test RMSE: {rmse_test:.2f}')\n    plt.show()","8b938718":"changepoint_prior_scale = [0.05, 0.25, 0.5, 1]\nseasonality_prior_scale = [0.5, 1, 5, 10]\nf, axes = plt.subplots(len(changepoint_prior_scale), len(seasonality_prior_scale), figsize=(30,30))\naxes = axes.ravel()\ni = 0\nfor cps in changepoint_prior_scale:\n    for sps in seasonality_prior_scale:\n        m = Prophet(changepoint_prior_scale=cps, seasonality_prior_scale=sps)\n        forecast = m.fit(train).predict(future_pd)\n        forecast['y'] = forecast.ds.map(df.set_index('ds')['y'])\n        fig = m.plot(forecast, ax=axes[i])\n        a = add_changepoints_to_plot(axes[i], m, forecast)\n        rmse_train = np.sqrt(mean_squared_error(forecast.loc[:29, 'y'], forecast.loc[:29, 'yhat']))\n        rmse_test = np.sqrt(mean_squared_error(forecast.loc[30:, 'y'], forecast.loc[30:, 'yhat']))\n        axes[i].set_title(f'cps :{cps}; sps : {sps}; Train RMSE: {rmse_train:.2f}; Test RMSE: {rmse_test:.2f}')\n        i = i + 1\nplt.show()","6343f19e":"# 1. Loading Libraries and Dataset","8a394554":"# 2. Train Test split","e8d4d236":"## Grid Search between changepoint_prior_scale & seasonality_prior_scale","ec89624d":"## Improving flexibility (improve fitting) using changepoint_prior_scale\nBased on the charts below, we can see that the RMSE for train is consistently decreasing with increasing changepoint_prior_scale. So the model is overfitting, but the effect is not visible on the test RMSE. Using the following values for `changepoint_prior_scale = [0.05, 0.1, 0.25, 0.5, 0.75, 1]`\n"}}