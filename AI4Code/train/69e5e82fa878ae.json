{"cell_type":{"7ade7c72":"code","629cbbd7":"code","fd33aad8":"code","d4382b4d":"code","c9b4b10c":"code","5b313c8d":"code","56ac6740":"code","d72f2d02":"code","c9f236fe":"code","890fd74f":"code","7c28c372":"code","875a3a97":"code","3ac82633":"code","3d67cbb9":"code","92ab2a60":"code","98911a55":"code","bd28a7b4":"code","3da5042b":"code","f8354a78":"code","8fcbd77e":"code","d40f6f87":"code","734e4129":"code","a4921c83":"code","b2941b46":"code","cdb4ade2":"code","20d9fa71":"code","c1b3658a":"code","505469c1":"code","ad1751d8":"code","626d2c6e":"code","c8a3263a":"code","1596b2f4":"code","dad413a4":"code","d33fd558":"code","ccac6c76":"code","929da096":"code","7dc233d3":"markdown","fffea0b7":"markdown","98a5080a":"markdown","44f90abb":"markdown","f96094ee":"markdown","3fa62430":"markdown","2f8952d6":"markdown","a1a9773f":"markdown","eedcb9a2":"markdown","bda69f2a":"markdown","407e4595":"markdown","5345ac11":"markdown","f6af8538":"markdown","d8b16d6a":"markdown","fbc6fdcb":"markdown","911e8939":"markdown","99b09e8e":"markdown","b169444e":"markdown","7a37c039":"markdown","2b6e721e":"markdown","5e3b6285":"markdown"},"source":{"7ade7c72":"#Utility packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix\n\n#Preprocessing related Imports\nfrom sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.preprocessing import StandardScaler, LabelBinarizer, OneHotEncoder\nfrom sklearn.base import BaseEstimator,TransformerMixin\n\n#Regressors\nfrom sklearn.model_selection import cross_val_score, GridSearchCV,StratifiedShuffleSplit,RandomizedSearchCV\nfrom sklearn.linear_model import LinearRegression, ElasticNet\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor, GradientBoostingRegressor,HistGradientBoostingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\n\n#Metrics\nfrom sklearn.metrics import mean_squared_error\n","629cbbd7":"train=pd.read_csv(\"\/kaggle\/input\/house-price-prediction-challenge\/train.csv\").drop(\"ADDRESS\",axis=1)\ntest=pd.read_csv(\"\/kaggle\/input\/house-price-prediction-challenge\/test.csv\").drop(\"ADDRESS\",axis=1)","fd33aad8":"train.head()","d4382b4d":"train.info()","c9b4b10c":"train.describe()","5b313c8d":"train.hist(bins=50,figsize=(15,20))","56ac6740":"train.corr()[\"TARGET(PRICE_IN_LACS)\"]","d72f2d02":"train[\"bhk_cat\"]=np.ceil(train[\"BHK_NO.\"]\/1.5)\ntrain[\"bhk_cat\"].where(train[\"bhk_cat\"]<5,5,inplace=True)\nsplit=StratifiedShuffleSplit(n_splits=1,test_size=.2,random_state=42)\nfor train1,test1 in split.split(train,train['bhk_cat'],train['BHK_OR_RK']):\n    strat_train=train.loc[train1]\n    strat_test=train.loc[test1]","c9f236fe":"print(\"TRAIN RATIOS \\n\",strat_train[\"BHK_OR_RK\"].value_counts()\/len(strat_train[\"BHK_OR_RK\"]))\nprint(\"TEST RATIOS \\n\",strat_test[\"BHK_OR_RK\"].value_counts()\/len(strat_test[\"BHK_OR_RK\"]))","890fd74f":"print(\"TRAIN RATIOS \\n\",strat_train[\"bhk_cat\"].value_counts()\/len(strat_train[\"bhk_cat\"]))\nprint(\"TEST RATIOS \\n\",strat_test[\"bhk_cat\"].value_counts()\/len(strat_test[\"bhk_cat\"]))","7c28c372":"for set in (strat_train,strat_test):\n    set.drop([\"bhk_cat\"],axis=1,inplace=True)","875a3a97":"copied=strat_train.copy()","3ac82633":"copied.plot(kind='scatter',x='LONGITUDE',y='LATITUDE',alpha=0.4,c=\"TARGET(PRICE_IN_LACS)\",cmap=plt.get_cmap(\"jet\"),colorbar=True)","3d67cbb9":"scatter_matrix(copied,figsize=(20,20))","92ab2a60":"copied[copied[\"SQUARE_FT\"]<2000000].plot(kind='scatter',x=\"SQUARE_FT\",y=\"TARGET(PRICE_IN_LACS)\",s=\"BHK_NO.\",label=\"BHK_NO.\",c=\"RESALE\",cmap=plt.get_cmap(\"jet\"),colorbar=True)\nplt.legend()","98911a55":"attribute_data=strat_train.drop(\"TARGET(PRICE_IN_LACS)\",axis=1)\nlabel_data=strat_train[\"TARGET(PRICE_IN_LACS)\"]","bd28a7b4":"num_attribs=['BHK_NO.','SQUARE_FT','LONGITUDE','LATITUDE']\ncat_attribs=[ 'UNDER_CONSTRUCTION', 'RERA','READY_TO_MOVE', 'RESALE']\nstring_cat_attribs=['POSTED_BY','BHK_OR_RK']\nclass DataFrameSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, attribute_names):\n        self.attribute_names = attribute_names\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n        return X[self.attribute_names].values\n\nclass CustomLabelBinarizer(BaseEstimator, TransformerMixin):\n    def __init__(self, sparse_output=False):\n        self.sparse_output = sparse_output\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X, y=None):\n        enc = LabelBinarizer(sparse_output=self.sparse_output)\n        return enc.fit_transform(X)\n\nnum_pipeline=Pipeline([\n    ('selector',DataFrameSelector(num_attribs)),\n    ('std',StandardScaler())\n])\ncat_pipeline=Pipeline([\n    ('selector',DataFrameSelector(cat_attribs)),\n    ('Binarizer',CustomLabelBinarizer(sparse_output=True))\n])\nstring_cat_pipeline=Pipeline([\n    ('selector',DataFrameSelector(string_cat_attribs)),\n    ('Binarizer',OneHotEncoder())\n])\nfinalPipeline=FeatureUnion(transformer_list=[\n    (\"num_pipeline\", num_pipeline),\n    (\"cat_pipeline\", cat_pipeline),\n    (\"string_cat_pipeline\", string_cat_pipeline),\n])","3da5042b":"attribute_data_corrected=finalPipeline.fit_transform(attribute_data)","f8354a78":"def kfoldOut(model,inp,out,k=10):\n    scores=cross_val_score(model,inp,out,scoring=\"neg_mean_squared_error\",cv=k)\n    return np.sqrt(-scores).mean()\n    \n\ndef MSE(model,inp,out):\n    housing_predicted=model.predict(inp)\n    return np.sqrt(mean_squared_error(out,housing_predicted))","8fcbd77e":"param_grid = [\n    { 'alpha': [0.01,0.02],'l1_ratio':[0.5],'max_iter':[100,200,400,500,800,],'tol':[1e-4,1e-5]},\n  ]\nreg=ElasticNet(random_state=42,precompute=True)\ngrid_search = GridSearchCV(reg, param_grid, cv=5,scoring='neg_mean_squared_error',verbose=10,n_jobs=-1)\ngrid_search.fit(attribute_data_corrected,label_data)\nreg=grid_search.best_estimator_","d40f6f87":"param_grid = [\n    { 'max_features': [8],'max_depth':[25,30,35],'min_samples_split':[3,4],'criterion':[\"mae\"],'splitter':[ \"random\"]},\n  ]\nDTR=DecisionTreeRegressor(random_state=42)\n\ngrid_search = GridSearchCV(DTR, param_grid, cv=5,scoring='neg_mean_squared_error',verbose=10,n_jobs=-1)\ngrid_search.fit(attribute_data_corrected,label_data)\nDTR=grid_search.best_estimator_","734e4129":"DTR","a4921c83":"param_grid = [\n    {'n_estimators': [65,60,75], 'max_features': [8],'max_depth':[30],'min_samples_split':[4]},\n  ]\n\nforest_reg = RandomForestRegressor(n_jobs=-1,random_state=42)\n\ngrid_search = GridSearchCV(forest_reg, param_grid, cv=5,scoring='neg_mean_squared_error',verbose=10,n_jobs=-1)\ngrid_search.fit(attribute_data_corrected,label_data)\nforest_reg=grid_search.best_estimator_","b2941b46":"param_grid = [\n    {'n_estimators': [15,16,18,20],'loss':['exponential'],'learning_rate':[0.05],'base_estimator':[DecisionTreeRegressor(max_depth=i,max_features='auto',random_state=42,min_samples_split=j) for i in [10,13] for j in [3,4]]}]\nADA_REG = AdaBoostRegressor(random_state=1)\n\nADA = RandomizedSearchCV(ADA_REG, param_grid, cv=5, verbose=5,n_jobs=-1,scoring='neg_mean_squared_error',random_state=1,n_iter=900)\nADA.fit(attribute_data_corrected,label_data)\nADA_REG=ADA.best_estimator_","cdb4ade2":"param_grid = [{\"loss\":['ls'],\"learning_rate\":[0.2,0.3],'n_iter_no_change':[40,50],'criterion' : ['friedman_mse'],\"n_estimators\":[280,290],\"max_features\":['auto'],\"max_depth\":[2,3,4],'validation_fraction':[0.1], 'min_samples_split':[4],'tol':[0.1]}]\nGradBoosted_REG = GradientBoostingRegressor(random_state=1, presort=True)\nGrad = GridSearchCV(GradBoosted_REG, param_grid, cv=10, verbose=10,n_jobs=-1,scoring='neg_mean_squared_error')\nGrad.fit(attribute_data_corrected,label_data)\nGradBoosted_REG=Grad.best_estimator_","20d9fa71":"param_grid = [\n    {'max_iter': [100],'loss':['least_squares'],'learning_rate':[0.3,0.5,0.7],'early_stopping':['True'],'l2_regularization':[0.8,0.9],'validation_fraction':[0.05],'n_iter_no_change':[200],'tol':[1e-5,1e-6]}]\nHistGradBoost_REG = HistGradientBoostingRegressor(random_state=1,scoring='neg_mean_squared_error')\n\nHGBR = RandomizedSearchCV(HistGradBoost_REG, param_grid, cv=5, verbose=5,n_jobs=-1,\n                           scoring='neg_mean_squared_error',random_state=1,n_iter=900)\nHGBR.fit(attribute_data_corrected.toarray(),label_data)\nHistGradBoost_REG=HGBR.best_estimator_","c1b3658a":"HistGradBoost_REG","505469c1":"param_grid = [{'n_estimators':[270,280,300],'max_depth':[5],'reg_lambda':[0.9,1,1.1],'learning_rate':[0.01,0.05,0.1], 'gamma':[0.9,1,1.1],'reg_alpha':[0.9,1,1.1],'booster':['dart']}]\nXGB_REG = XGBRegressor(random_state=1,objective='reg:squarederror')\n\nXGBR = RandomizedSearchCV(XGB_REG, param_grid, cv=5, verbose=5,\n                           scoring='neg_mean_squared_error',random_state=1,n_iter=900,n_jobs=4)\nXGBR.fit(attribute_data_corrected.toarray(),label_data)\nXGB_REG=XGBR.best_estimator_","ad1751d8":"test_attribute_data=strat_test.drop(\"TARGET(PRICE_IN_LACS)\",axis=1)\ntest_label_data=strat_test[\"TARGET(PRICE_IN_LACS)\"]","626d2c6e":"test_attribute_data_corrected=finalPipeline.transform(test_attribute_data)","c8a3263a":"print(\"Linear Regression MSE: \",MSE(reg,test_attribute_data_corrected,test_label_data))\nprint(\"Decision Tree MSE: \",MSE(DTR,test_attribute_data_corrected,test_label_data))\nprint(\"Random Forest Regressor MSE: \",MSE(forest_reg,test_attribute_data_corrected,test_label_data))\nprint(\"Adaptive Boosted Regressor MSE: \",MSE(ADA_REG,test_attribute_data_corrected,test_label_data))\nprint(\"Gradient Boosted Regressor MSE: \",MSE(GradBoosted_REG,test_attribute_data_corrected,test_label_data))\nprint(\"Histogram Gradient Boosted Regressor MSE: \",MSE(HistGradBoost_REG,test_attribute_data_corrected.toarray(),test_label_data))\nprint(\"Extreme Gradient Boosted Regressor MSE: \",MSE(XGB_REG,test_attribute_data_corrected.toarray(),test_label_data))","1596b2f4":"model_list=[reg,DTR,forest_reg,ADA_REG,GradBoosted_REG,HistGradBoost_REG,XGB_REG]\nmse_list=[\n        MSE(reg,test_attribute_data_corrected,test_label_data),\n        MSE(DTR,test_attribute_data_corrected,test_label_data),\n        MSE(forest_reg,test_attribute_data_corrected,test_label_data),\n        MSE(ADA_REG,test_attribute_data_corrected,test_label_data),\n        MSE(GradBoosted_REG,test_attribute_data_corrected,test_label_data),\n        MSE(HistGradBoost_REG,test_attribute_data_corrected.toarray(),test_label_data),\n        MSE(XGB_REG,test_attribute_data_corrected.toarray(),test_label_data)]\nfinal=model_list[np.argmin(mse_list)]\nprint(\"BEST MODEL IS: \",final)","dad413a4":"FINAL_test=finalPipeline.transform(test)","d33fd558":"pd.DataFrame(final.predict(FINAL_test)).to_csv('submission.csv', index=False)","ccac6c76":"test[\"TARGET(PRICE_IN_LACS)\"]=pd.DataFrame(DTR.predict(FINAL_test))","929da096":"test","7dc233d3":"# Extreme Gradient Boosted Regression with GridSearchCV","fffea0b7":"# Functions for analysing the performance","98a5080a":"# Scatter plot of lattitude and longitude to understand geographical attribute's relationship with the Target Variable","44f90abb":"# Creating Pipelines to preprocess both Numerical and catagorical attributes individually","f96094ee":"# # Pearson Correlation of all independent variables with the dependent variable i.e \"TARGET(PRICE_IN_LACS)\"","3fa62430":"# Finding out the frequency distribution of each Attribute","2f8952d6":"## RANDOM FOREST REGRESSOR with GRIDSEARCH for HYPERPARAMETER OPTIMIZATION ","a1a9773f":"# Histogram Gradient Boosted Regression with GridSearchCV","eedcb9a2":"# Comparing the Performance of each model and Selecting the best performer on the test data set","bda69f2a":"# PREDICTION ON THE FINAL TEST DATA SET WITH RANDOM FOREST REGRESSOR","407e4595":"## LINEAR REGRESSION MODEL","5345ac11":"# Preparing the test dataset","f6af8538":"# Quick View of top 5 rows","d8b16d6a":"# Preparing the data for the ML model","fbc6fdcb":"# Some other scatter plots for deeper analysis","911e8939":"# Deeper analysis of the nature of the data","99b09e8e":"# Adaptive Boosted Regression with GridSearchCV","b169444e":"# Gradiant Boosted Regression with GridSearchCV","7a37c039":"# Train-Test Split using Stratified Sampling technique to remove the sampling bias.","2b6e721e":"# Finding type and missing data","5e3b6285":"## DECESION TREE MODEL with GRIDSEARCH for HYPERPARAMETER OPTIMIZATION"}}