{"cell_type":{"05bcc4af":"code","19fd78c5":"code","1b9a2784":"code","2a7debf2":"code","25b9d34d":"code","5e6be498":"code","65f779c2":"code","a79f67e2":"code","7695189a":"code","3e1fdc54":"code","078ea1af":"code","eaaa85a4":"code","876f488a":"code","4adc19d8":"code","6ba2b44d":"code","30d25227":"code","f17441f8":"code","86c80ed4":"code","69d3fcbb":"code","b9776f4d":"code","9e38751c":"code","ff7c3f0f":"code","f78fb55a":"code","27e6a176":"code","1c440ef3":"markdown","0fd334ae":"markdown","7c2a464a":"markdown","08129e67":"markdown"},"source":{"05bcc4af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","19fd78c5":"from fastai.vision import *","1b9a2784":"tfms = get_transforms(max_rotate=25)","2a7debf2":"len(tfms)","25b9d34d":"def get_ex(): return open_image('..\/input\/cusersmarildownloadsitstimebannerjpg\/itsTime-banner.jpg')","5e6be498":"def plots_f(rows, cols, width, height, **kwargs):\n    [get_ex().apply_tfms(tfms[0], **kwargs).show(ax=ax) for i,ax in enumerate(plt.subplots(\n        rows,cols,figsize=(width,height))[1].flatten())]","65f779c2":"plots_f(2, 4, 12, 6, size=224)","a79f67e2":"tfms = zoom_crop(scale=(0.75,2), do_rand=True)","7695189a":"# random zoom and crop\nplots_f(2, 4, 12, 6, size=224)","3e1fdc54":"# random resize and crop\ntfms = [rand_resize_crop(224)]\nplots_f(2, 4, 12, 6, size=224)","078ea1af":"# passing a probability to a function\ntfm = [rotate(degrees=30, p=0.5)]\nfig, axs = plt.subplots(1,5,figsize=(12,4))\nfor ax in axs:\n    img = get_ex().apply_tfms(tfm)\n    title = 'Done' if tfm[0].do_run else 'Not done'\n    img.show(ax=ax, title=title)","eaaa85a4":"tfm = [rotate(degrees=(-30,30))]\nfig, axs = plt.subplots(1,5,figsize=(12,4))\nfor ax in axs:\n    img = get_ex().apply_tfms(tfm)\n    title = f\"deg={tfm[0].resolved['degrees']:.1f}\"\n    img.show(ax=ax, title=title)","876f488a":"# brightness\nfig, axs = plt.subplots(1,5,figsize=(14,8))\nfor change, ax in zip(np.linspace(0.1,0.9,5), axs):\n    brightness(get_ex(), change).show(ax=ax, title=f'change={change:.1f}')","4adc19d8":"# contrast\nfig, axs = plt.subplots(1,5,figsize=(12,4))\nfor scale, ax in zip(np.exp(np.linspace(log(0.5),log(2),5)), axs):\n    contrast(get_ex(), scale).show(ax=ax, title=f'scale={scale:.2f}')","6ba2b44d":"# dihedral\nfig, axs = plt.subplots(2,2,figsize=(12,8))\nfor k, ax in enumerate(axs.flatten()):\n    dihedral(get_ex(), k).show(ax=ax, title=f'k={k}')\nplt.tight_layout()","30d25227":"fig, axs = plt.subplots(1,2,figsize=(10,8))\nget_ex().show(ax=axs[0], title=f'no flip')\nflip_lr(get_ex()).show(ax=axs[1], title=f'flip')","f17441f8":"# jitter\nfig, axs = plt.subplots(1,5,figsize=(20,8))\nfor magnitude, ax in zip(np.linspace(-0.05,0.05,5), axs):\n    tfm = jitter(magnitude=magnitude)\n    get_ex().jitter(magnitude).show(ax=ax, title=f'magnitude={magnitude:.2f}')","86c80ed4":"# squish\nfig, axs = plt.subplots(1,5,figsize=(12,4))\nfor scale, ax in zip(np.linspace(0.66,1.33,5), axs):\n    get_ex().squish(scale=scale).show(ax=ax, title=f'scale={scale:.2f}')","69d3fcbb":"# tilt\nfig, axs = plt.subplots(2,4,figsize=(12,8))\nfor i in range(4):\n    get_ex().tilt(i, 0.4).show(ax=axs[0,i], title=f'direction={i}, fwd')\n    get_ex().tilt(i, -0.4).show(ax=axs[1,i], title=f'direction={i}, bwd')","b9776f4d":"# symm warp\ntfm = symmetric_warp(magnitude=(-0.2,0.2))\n_, axs = plt.subplots(2,4,figsize=(12,6))\nfor ax in axs.flatten():\n    img = get_ex().apply_tfms(tfm, padding_mode='zeros')\n    img.show(ax=ax)","9e38751c":"ls ..\/input\/hackathon\/task_1-google_search_txt_files_v2\/US\/","ff7c3f0f":"United_States  = '..\/input\/hackathon\/task_1-google_search_txt_files_v2\/US\/United States-en-result-114-original.txt'","f78fb55a":"text = open(United_States, 'r',encoding='utf-8',\n                 errors='ignore').read()","27e6a176":"print(text[:2000])","1c440ef3":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","0fd334ae":"#The Centers for Disease Control and Prevention works 24\/7 \nTo provide the American public with timely and accurate health information, responding to public health emergencies and natural disasters, and monitoring the spread of dangerous and life-threatening diseases.https:\/\/www.cdc.gov\/cdctv\/emergencypreparednessandresponse\/cdc-24-7.html\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcROziTEfY_zdDXoE7KYGtzAPX4cy93v6qwQSA&usqp=CAU)cdc.gov","7c2a464a":"#The End TB Strategy\n\nThe Strategy aims to end the global TB epidemic, with targets to reduce TB deaths by 95% and to cut new cases by 90% between 2015 and 2035, and to ensure that no family is burdened with catastrophic expenses due to TB. It sets interim milestones for 2020, 2025, and 2030. https:\/\/www.who.int\/tb\/post2015_strategy\/en\/#:~:text=The%20strategy%20aims%20to%20end,2020%2C%202025%2C%20and%202030.\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSAlwhvTHnxzGhu54C8LIdIZQT8h7Poe9Tuij1pTvjb&s)https:\/\/www.cdc.gov\/tb\/worldtbday\/default.htm#:~:text=It's%20TIME!,that%20causes%20tuberculosis%20(TB).","08129e67":"#All codes thanks DipamVasani https:\/\/www.kaggle.com\/dipam7\/data-augmentation-in-fastai"}}