{"cell_type":{"56eb5aa5":"code","0b6df081":"code","14f9368b":"code","8a87b858":"code","a2fad497":"code","4a51fb63":"code","66ea3fe7":"code","f312a9fd":"code","c794275c":"code","b605ec24":"code","3b3712cf":"code","9edab344":"code","971146e0":"code","8cec76a9":"code","9d03a08e":"code","b850cfed":"code","645f285d":"code","ad378e48":"code","415d6748":"code","da7dec1c":"code","1db7234c":"code","48a10318":"code","06e54032":"code","27462bac":"code","97b5f610":"code","e37d3c68":"code","421c1328":"code","b3bad25e":"code","6414e745":"code","02a0ff37":"code","052ca776":"code","d525c65c":"code","3d3ad787":"markdown","a5590369":"markdown","06c4a208":"markdown","ae136761":"markdown"},"source":{"56eb5aa5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b6df081":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom numpy import absolute\nimport warnings\nwarnings.filterwarnings('ignore')","14f9368b":"# Training Data\n\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntrain.head()","8a87b858":"# Testing Data\n\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntest.head()","a2fad497":"# Saving ID on a new variable and Dropping ID column\n\ntrain_ID = train['Id']\ntest_ID = test['Id']\ntrain.drop(['Id'], axis=1, inplace=True)\ntest.drop(['Id'], axis=1, inplace=True)","4a51fb63":"# Plotting to find outliers\nfor items in train.columns:\n    if len(train[items].unique()) < 20:\n        sns.catplot(x=train[items], y=train['SalePrice'], data=train)\n        plt.show()\n    else:\n        sns.scatterplot(x=train[items],y=train['SalePrice'])\n        plt.show()","66ea3fe7":"# Removing Outlier\ntrain = train[train.GrLivArea < 4500]\ntrain.reset_index(drop=True, inplace=True)\nprint(train.shape)","f312a9fd":"# Plotting output data for Visualization\ntrain['SalePrice'].hist(bins = 40)","c794275c":"# Adjusting for Skewness\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\ny_train = train['SalePrice'].reset_index(drop=True)\n\ntrain['SalePrice'].hist(bins = 40)","b605ec24":"# Concat Testing part of both Train and Test and split SalePrice from Train data for Training\ntrain_data = train.drop(['SalePrice'], axis=1)\ntotal_data = pd.concat([train_data, test]).reset_index(drop=True)","3b3712cf":"# Total data is full data to be used for EDA\ntotal_data.shape","9edab344":"print('columns containing missing values =',total_data.isnull().any().sum())","971146e0":"# Finding missing values to plot a Graph\nmissing_counts = pd.DataFrame(total_data.isnull().sum().sort_values(ascending=False))\nmissing_columns = missing_counts[missing_counts.iloc[:,0]>0]\n# Plotting Missing Values\nplt.figure(figsize=(20,10))\nmissing_columns = missing_counts[missing_counts.iloc[:,0]>0]\nsns.barplot(x=missing_columns.index,y=missing_columns.iloc[:,0])\nplt.xticks(rotation=90)\nprint(missing_columns)\nplt.show()","8cec76a9":"# Some of the non-numeric predictors are stored as numbers; we convert them into strings \ntotal_data['MSSubClass'] = total_data['MSSubClass'].apply(str)\ntotal_data['YrSold'] = total_data['YrSold'].astype(str)\ntotal_data['MoSold'] = total_data['MoSold'].astype(str)\n\n# Fixing columns : filling Null values with suitable values in columns\ntotal_data['Functional'] = total_data['Functional'].fillna('Typ')\ntotal_data['Electrical'] = total_data['Electrical'].fillna(\"SBrkr\")\ntotal_data['KitchenQual'] = total_data['KitchenQual'].fillna(\"TA\")\ntotal_data['Exterior1st'] = total_data['Exterior1st'].fillna(total_data['Exterior1st'].mode()[0])\ntotal_data['Exterior2nd'] = total_data['Exterior2nd'].fillna(total_data['Exterior2nd'].mode()[0])\ntotal_data['SaleType'] = total_data['SaleType'].fillna(total_data['SaleType'].mode()[0])\ntotal_data[\"PoolQC\"] = total_data[\"PoolQC\"].fillna(\"None\")","9d03a08e":"# Filling columns with Mode and Median values\ntotal_data[\"LotFrontage\"].fillna(total_data[\"LotFrontage\"].median(),inplace=True)\ntotal_data[\"MSZoning\"].fillna(total_data[\"MSZoning\"].mode(),inplace=True)","b850cfed":"# Filling some columns Nan values with 0's\n\nfor item in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    total_data[item] = total_data[item].fillna(0)\n\n# Filling categorial columns Nan Values with 'None'\n\nfor item in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond','BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']:\n    total_data[item] = total_data[item].fillna('None')","645f285d":"# Filling remaining Object type columns Nan values with None\nobjects = []\nfor i in total_data.columns:\n    if total_data[i].dtype == object:\n        objects.append(i)\ntotal_data.update(total_data[objects].fillna('None'))","ad378e48":"# Filling remaining Numerical type columns with 0 values\nnumerical = total_data.select_dtypes(include=np.number).columns.tolist()\nfor i in numerical:\n    total_data.update(total_data[i].fillna(0))","415d6748":"# Dropping unwanted columns\ntotal_data = total_data.drop(['Utilities', 'Street', 'PoolQC',], axis=1)","da7dec1c":"# Engineered new columns \ntotal_data['YrBltAndRemod']=total_data['YearBuilt']+total_data['YearRemodAdd']\ntotal_data['TotalSF']=total_data['TotalBsmtSF'] + total_data['1stFlrSF'] + total_data['2ndFlrSF']\n\ntotal_data['Total_sqr_footage'] = (total_data['BsmtFinSF1'] + total_data['BsmtFinSF2'] +\n                                 total_data['1stFlrSF'] + total_data['2ndFlrSF'])\n\ntotal_data['Total_Bathrooms'] = (total_data['FullBath'] + (0.5 * total_data['HalfBath']) +\n                               total_data['BsmtFullBath'] + (0.5 * total_data['BsmtHalfBath']))\n\ntotal_data['Total_porch_sf'] = (total_data['OpenPorchSF'] + total_data['3SsnPorch'] +\n                              total_data['EnclosedPorch'] + total_data['ScreenPorch'] +\n                              total_data['WoodDeckSF'])","1db7234c":"# Simplifying Features\ntotal_data['haspool'] = total_data['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ntotal_data['has2ndfloor'] = total_data['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ntotal_data['hasgarage'] = total_data['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\ntotal_data['hasbsmt'] = total_data['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\ntotal_data['hasfireplace'] = total_data['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)","48a10318":"# Adding pandas dummy values to encode features\nprint(total_data.shape)\nfinal_data = pd.get_dummies(total_data).reset_index(drop=True)\nprint(final_data.shape)","06e54032":"# Splitting Train and test values now with help of variable 'y' \nx_train = final_data.iloc[:len(y_train), :]\nx_test = final_data.iloc[len(x_train):, :]\n\nprint('x_train', x_train.shape)\nprint('y_train', y_train.shape)\nprint('x_test', x_test.shape)","27462bac":"# Removing Overfitting features\noverfit = []\nfor i in x_train.columns:\n    counts = x_train[i].value_counts()\n    zeros = counts.iloc[0]\n    if zeros \/ len(x_train) * 100 > 99.94:\n        overfit.append(i)\n\noverfit = list(overfit)\n# MSZoning_C have an extra field added in data \noverfit.append('MSZoning_C (all)')\n\nX_train = x_train.drop(overfit, axis=1).copy()\nX_test = x_test.drop(overfit, axis=1).copy()\nY_train = y_train.copy()\n\nprint('X_train', X_train.shape)\nprint('Y_train', Y_train.shape)\nprint('X_test', X_test.shape)","97b5f610":"# Define Model\nmodel = XGBRegressor(learning_rate=0.01, n_estimators=3460,\n                                     max_depth=3, min_child_weight=0,\n                                     gamma=0, subsample=0.7,\n                                     colsample_bytree=0.7,\n                                     objective='reg:linear', nthread=-1,\n                                     scale_pos_weight=1, seed=27,\n                                     reg_alpha=0.00006, random_state=42)","e37d3c68":"# define KFold\nkfolds = KFold(n_splits=10, shuffle = True, random_state=42)","421c1328":"# evaluate model\nscore = np.sqrt(-cross_val_score(model, X_train, Y_train,scoring=\"neg_mean_squared_error\",cv=kfolds))\nprint(\"xgboost: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\ncross_val_score","b3bad25e":"# Training the Model \nxgb = model.fit(X_train, Y_train)","6414e745":"# Predicting Test values\nsubmission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\nsubmission.iloc[:,1] = (np.expm1(model.predict(X_test)))","02a0ff37":"# Fixing output range\nq1 = submission['SalePrice'].quantile(0.0042)\nq2 = submission['SalePrice'].quantile(0.99)\n# Quantiles helping us get some extreme values for extremely low or high values \nsubmission['SalePrice'] = submission['SalePrice'].apply(lambda x: x if x > q1 else x*0.77)\nsubmission['SalePrice'] = submission['SalePrice'].apply(lambda x: x if x < q2 else x*1.1)\n","052ca776":"# Output\nsubmission.head()","d525c65c":"# Submission\nsubmission.to_csv(\"submission.csv\", index=False)","3d3ad787":"Visualizing output data from train set","a5590369":"Data is skewed, we will use log1p to remove the skewness in data","06c4a208":"Implementing Model ","ae136761":"Data Engineering "}}