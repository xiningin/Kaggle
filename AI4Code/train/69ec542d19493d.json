{"cell_type":{"cdd11797":"code","c88f1763":"code","3076100c":"code","53ce1356":"code","308a3220":"code","6ef6e202":"code","4ebf755b":"code","a5c61cad":"code","fc763843":"code","dca0e9fe":"code","aa07c3eb":"code","0c8f3cad":"code","6d9ccc70":"code","95e6bfec":"code","ab519e8d":"code","454211ab":"code","e41eb699":"code","4e98959a":"code","a6807df5":"code","9628fd2f":"code","6dc45a6a":"code","ae85e8b5":"code","6254f63c":"code","261280f3":"code","28af0766":"code","3cdf8a74":"code","0de3b676":"code","01dc4661":"code","6cd722af":"code","eee63dae":"code","de08a569":"code","8ba69314":"code","36031279":"code","7e96dfbf":"code","e59f4b59":"code","48c62862":"code","e8bbee3a":"code","da392e81":"code","205060db":"code","0ba09c5b":"markdown","1418147e":"markdown","5fd5ea33":"markdown","57788184":"markdown","644493bb":"markdown","e4f327b1":"markdown","daf13552":"markdown","cc72081b":"markdown","11a74855":"markdown","b705d1fc":"markdown","a42889eb":"markdown","8f2045ee":"markdown","c8f61b2a":"markdown","f760da4a":"markdown","a927289f":"markdown","418d9968":"markdown","92881b45":"markdown","4357e9f6":"markdown","bad50d86":"markdown","72608ab4":"markdown","4bfae20e":"markdown","0d013fc8":"markdown","596ebed1":"markdown","4f8eba2a":"markdown","34138bed":"markdown","edab51f3":"markdown","4c838bc3":"markdown","4d4cc005":"markdown","907ca79a":"markdown","2233ee22":"markdown","2fd7298e":"markdown"},"source":{"cdd11797":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom scipy.integrate import odeint\n\nfrom plotly.offline import iplot, init_notebook_mode\nimport math\nimport bokeh \nimport matplotlib.pyplot as plt\nimport plotly.express as px\n#from urllib.request import urlopen\nimport json\nfrom dateutil import parser\nfrom bokeh.layouts import gridplot\nfrom bokeh.plotting import figure, show, output_file\nfrom bokeh.layouts import row, column\nfrom bokeh.resources import INLINE\nfrom bokeh.io import output_notebook\nfrom bokeh.models import Span\nimport warnings\nwarnings.filterwarnings(\"ignore\")\noutput_notebook(resources=INLINE)","c88f1763":"country_codes = pd.read_csv('\/kaggle\/input\/countrycodes\/countrycodes.csv')\ncountry_codes = country_codes.drop('GDP (BILLIONS)', 1)\ncountry_codes.rename(columns={'COUNTRY': 'Country', 'CODE': 'Code'}, inplace=True)","3076100c":"virus_data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n\nprev_index = 0\nfirst_time = False\ntmp = 0\n\n\nfor i, row in virus_data.iterrows():\n\n    if(virus_data.loc[i,'SNo'] < 1342 and virus_data.loc[i,'Province\/State']=='Hubei'):\n        if(first_time):\n            tmp = virus_data.loc[i,'Confirmed']\n            prev_index = i\n            virus_data.loc[i,'Confirmed'] = virus_data.loc[i,'Confirmed'] + 593\n            first_time = False\n        else:\n            increment = virus_data.loc[i,'Confirmed'] - tmp\n            tmp = virus_data.loc[i,'Confirmed']\n            virus_data.loc[i,'Confirmed'] = virus_data.loc[prev_index,'Confirmed'] + increment + 593\n            prev_index = i\n    \n\nvirus_data.rename(columns={'Country\/Region': 'Country', 'ObservationDate': 'Date'}, inplace=True)\nvirus_data = virus_data.fillna('unknow')\nvirus_data['Country'] = virus_data['Country'].str.replace('US','United States')\nvirus_data['Country'] = virus_data['Country'].str.replace('UK','United Kingdom') \nvirus_data['Country'] = virus_data['Country'].str.replace('Mainland China','China')\nvirus_data['Country'] = virus_data['Country'].str.replace('South Korea','Korea, South')\nvirus_data['Country'] = virus_data['Country'].str.replace('North Korea','Korea, North')\nvirus_data['Country'] = virus_data['Country'].str.replace('Macau','China')\nvirus_data['Country'] = virus_data['Country'].str.replace('Ivory Coast','Cote d\\'Ivoire')\nvirus_data = pd.merge(virus_data,country_codes,on=['Country'])\nvirus_data.head()\n#print(len(virus_data))","53ce1356":"import plotly.graph_objects as go\n\ntotal_confirmed = virus_data.loc[virus_data['Date'] == virus_data['Date'].iloc[-1]]\na = total_confirmed.groupby(['Code','Country'])['Confirmed'].sum().reset_index()\nfig = go.Figure(data=go.Choropleth(\n    locations = a['Code'],\n    z = a['Confirmed'],\n    text = a['Country'],\n    colorscale = 'Viridis',\n    reversescale=True,\n    marker_line_color='darkgray',\n    marker_line_width=0.5,\n    colorbar_title = 'N\u00b0 cases',\n))\nfig.update_layout(\n    title_text='Total confirmed Coronavirus cases')\n\nfig.show()","308a3220":"formated_gdf = virus_data.groupby(['Date', 'Country'])['Confirmed'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Confirmed'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], animation_frame=\"Date\", \n                     title='Spread over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","6ef6e202":"deaths_inf = virus_data.groupby(['Date'])['Confirmed','Deaths','Recovered'].sum().reset_index()\n\ndeaths_day = []\ndeaths_day.append(deaths_inf['Deaths'][0])\nfor i in range(1,len(deaths_inf)):\n    deaths_day.append(deaths_inf['Deaths'][i] - deaths_inf['Deaths'][i-1])\n    \ndeaths_growth = []\nfor i in range(len(deaths_day)):\n    deaths_growth.append(deaths_day[i] \/ deaths_inf['Deaths'][i])\n\ndatetime = []\na = deaths_inf['Date'].to_frame()\nfor elm in a['Date']:   \n    b = elm[0:10]\n    datetime.append(b)\n    \ndatetime = pd.to_datetime(datetime)\n\np1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", title=\"Change in total Deaths of Novel Coronavirus (2019-nCoV)\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Change in total (%)'\n\np1.line(datetime, deaths_growth, color='#2874A6', \n        legend_label='Growth factor', line_width=1.5)\np1.circle(datetime, deaths_growth, fill_color=\"black\", size=5)\n#p1.line(datetime, active_cases['Co-Recov'], color='#FF4500', \n        #legend_label='Sick people without counting recovered', line_width=1.5)\n#p1.circle(datetime, active_cases['Co-Recov'], fill_color=\"black\", size=5)\n\np1.legend.location = 'top_right'\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","4ebf755b":"dr_countries = virus_data.groupby(['Date'])['Confirmed','Deaths','Recovered'].sum().reset_index()\nperiod = 7\ndeath_rate = []\nfor i in range(1,len(dr_countries)):\n    recover = list(dr_countries['Recovered'])[i] - list(dr_countries['Recovered'])[i-1]\n    death = list(dr_countries['Deaths'])[i] - list(dr_countries['Deaths'])[i-1]\n    if(recover+death==0):\n        death_rate.append(death \/ (recover+death+1))\n    else:\n        death_rate.append(death \/ (recover+death))\n\n\np1 = figure(plot_width=600, plot_height=500, title=\"Death rate of Covid-19 with the novel formula\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Days'\np1.yaxis.axis_label = 'Death Rate (%)'\n\np1.line(np.arange(1,len(death_rate)+1,7), death_rate[::7], color='#2874A6', \n        legend_label='Growth factor', line_width=1.5)\np1.circle(np.arange(1,len(death_rate)+1,7), death_rate[::7], fill_color=\"black\", size=5)\n\np1.legend.location = 'top_right'\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","a5c61cad":"new_cases = []\n\nfor i in range(1,len(deaths_inf)):\n    \n    a = list(deaths_inf['Confirmed'])[i-1]\n    b = list(deaths_inf['Confirmed'])[i]\n             \n    new_cases.append(b - a)\n    \ngrowth_factor = []\n\nfor i in range(1,len(new_cases)):\n    \n    growth_factor.append(new_cases[i] \/ new_cases[i-1])\n             \n\np1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", \n            title=\"Infection growth factor of COVID-19\",\n           y_range=(0, 4))\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Factor'\n\np1.line(datetime, growth_factor, color='#8B4513', \n        legend_label='Growth Factor', line_width=1.5)\np1.circle(datetime, growth_factor, fill_color=\"black\", size=5)\nhline = Span(location=1, dimension='width', line_color='red', line_width=1)\n\n\np1.legend.location = 'top_right'\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n  \np1.renderers.extend([hline])\nshow(p1)","fc763843":"time_confirmed = virus_data.groupby('Date')['Confirmed'].sum().reset_index()\ntime_deaths = virus_data.groupby('Date')['Deaths'].sum().reset_index()\ntime_recovered = virus_data.groupby('Date')['Recovered'].sum().reset_index()\n\ndatetime = []\na = time_confirmed['Date'].to_frame()\nfor elm in a['Date']:   \n    b = elm[0:10]\n    datetime.append(b)\n    \ndatetime = pd.to_datetime(datetime)\n\np1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", title=\"Coronavirus infection\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Number of cases'\n\np1.line(datetime, time_confirmed['Confirmed'], color='#D1BB33', \n        legend_label='Confirmed cases', line_width=1.5)\np1.circle(datetime, time_confirmed['Confirmed'], fill_color=\"white\", size=1.5)\np1.line(datetime, time_deaths['Deaths'], color='#D1472A', legend_label='Deaths',\n       line_width=1.5)\np1.circle(datetime, time_deaths['Deaths'], fill_color=\"white\", size=1.5)\np1.line(datetime, time_recovered['Recovered'], color='#33A02C', legend_label='Recovered',\n       line_width=1.5)\np1.circle(datetime, time_recovered['Recovered'], fill_color=\"white\", size=1.5)\np1.legend.location = \"top_left\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","dca0e9fe":"confirmed_state = virus_data.groupby(['Date','Code'])['Confirmed'].sum().reset_index()\ndeaths_state = virus_data.groupby(['Date','Code'])['Deaths'].sum().reset_index()\nrecovered_state = virus_data.groupby(['Date','Code'])['Recovered'].sum().reset_index()\n\nconfirmed_china = confirmed_state.loc[confirmed_state['Code'] == 'CHN']\ndeaths_china = deaths_state.loc[deaths_state['Code'] == 'CHN']\nrecovered_china = recovered_state.loc[recovered_state['Code'] == 'CHN']\n\ndatetime = []\na = confirmed_china['Date'].to_frame()\nfor elm in a['Date']:   \n    b = elm[0:10]\n    datetime.append(b)\n    \ndatetime = pd.to_datetime(datetime)\n\np1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", title=\"China Coronavirus infection\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Number of cases'\n\np1.line(datetime, confirmed_china['Confirmed'], color='#D1BB33', \n        legend_label='Confirmed cases', line_width=1.5)\np1.circle(datetime, confirmed_china['Confirmed'], fill_color=\"white\", size=1.5)\np1.line(datetime, deaths_china['Deaths'], color='#D1472A', legend_label='Deaths',\n       line_width=1.5)\np1.circle(datetime, deaths_china['Deaths'], fill_color=\"white\", size=1.5)\np1.line(datetime, recovered_china['Recovered'], color='#33A02C', legend_label='Recovered',\n       line_width=1.5)\np1.circle(datetime, recovered_china['Recovered'], fill_color=\"white\", size=1.5)\np1.legend.location = \"top_left\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","aa07c3eb":"confirmed_no_china = confirmed_state.loc[confirmed_state['Code'] != 'CHN']\nconfirmed_no_china = confirmed_no_china.groupby('Date')['Confirmed'].sum().reset_index()\n\np1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", title=\"Coronavirus infection cases\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Number of cases'\n\np1.line(datetime, confirmed_china['Confirmed'], color='#D1BB33', \n        legend_label='China', line_width=1.5)\np1.circle(datetime, confirmed_china['Confirmed'], fill_color=\"white\", size=1.5)\np1.line(datetime, confirmed_no_china['Confirmed'], color='#D1472A', \n        legend_label='Rest of the World',line_width=1.5)\np1.circle(datetime, confirmed_no_china['Confirmed'], fill_color=\"white\", size=1.5)\np1.legend.location = \"top_left\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","0c8f3cad":"regioni_ita = pd.read_csv('https:\/\/raw.githubusercontent.com\/pcm-dpc\/COVID-19\/master\/dati-province\/dpc-covid19-ita-province.csv')\n#regioni_ita = regioni_ita.loc[regioni_ita['denominazione_regione']!='Lombardia']\nlast_regioni_ita = regioni_ita.loc[regioni_ita['data'] == regioni_ita['data'].iloc[-1]]\ntot_regioni_ita = last_regioni_ita.groupby(['denominazione_regione'])['totale_casi'].sum().reset_index()\ntot_regioni_ita = tot_regioni_ita.sort_values('totale_casi', ascending=False)\n\n\nfrom bokeh.io import show, output_file\nfrom bokeh.plotting import figure\n\noutput_file(\"bar_stacked.html\")\n\nregioni = tot_regioni_ita['denominazione_regione']\ninfection = [\"N\u00b0 Confirmed\"]\ncolors = [\"#CD6155\"]\n\ndata = {'countries' : regioni,\n        'N\u00b0 Confirmed'   : tot_regioni_ita['totale_casi']}\n\np = figure(x_range=regioni, plot_height=500, plot_width=700,\n           title=\"COVID-19 infection for Regioni Italiane\",\n           toolbar_location=None, tools=\"hover\", tooltips=\"$name @countries: @$name\")\n\np.vbar_stack(infection, x='countries', width=0.9, color=colors, source=data,\n             legend_label=infection)\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xgrid.grid_line_color = None\np.axis.minor_tick_line_color = None\np.outline_line_color = None\np.legend.location = \"top_right\"\np.legend.orientation = \"horizontal\"\np.xaxis.major_label_orientation = math.pi\/2\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p)","6d9ccc70":"day_regioni_ita = regioni_ita.groupby(['data','denominazione_regione'])['totale_casi'].sum().reset_index()\nday_veneto = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Veneto']\nday_friuli = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Friuli Venezia Giulia']\nday_piemonte = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Piemonte']\nday_lombardia = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Lombardia'] \nday_emilia = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Emilia-Romagna']\nday_liguria = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Liguria']\nday_aosta = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Valle d\\'Aosta']\n\nday_toscana = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Toscana']\nday_abruzzo = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Abruzzo']\nday_marche = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Marche']\nday_lazio = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Lazio']\nday_umbria = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Umbria']\n\nday_basilicata = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Basilicata']\nday_calabria = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Calabria']\nday_molise = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Molise']\nday_puglia = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Puglia']\nday_campania = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Campania']\nday_sicilia = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Sicilia']\nday_sardegna = day_regioni_ita.loc[day_regioni_ita['denominazione_regione']=='Sardegna']\n\nnorth_legend = ['Veneto','Friuli Venezia Giulia','Piemonte','Lombardia','Emilia Romagna',\n               'Liguria','Valle d\\'Aosta']\n\ncenter_legend = ['Toscana','Abruzzo','Marche','Lazio','Umbria']\n\nsouth_legend = ['Basilicata','Calabria','Molise','Puglia','Campania','Sicilia','Sardegna']\n\nplt.figure(figsize=(15,10))\n\ndata = list(day_veneto['data'])\ndays = []\nfor elm in data:\n    days.append(elm[:10])\n    \nsns.set()\n\nplt.plot(days,day_veneto['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_friuli['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_piemonte['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_lombardia['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_emilia['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_liguria['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_aosta['totale_casi'], marker='o',ms=3)\n\nplt.plot(days,day_toscana['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_abruzzo['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_marche['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_lazio['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_umbria['totale_casi'], marker='o',ms=3)\n\nplt.plot(days,day_basilicata['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_calabria['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_molise['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_puglia['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_campania['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_sicilia['totale_casi'], marker='o',ms=3)\nplt.plot(days,day_sardegna['totale_casi'], marker='o',ms=3)\n\nplt.ylabel('Number of cases')\nplt.xlabel('Date')\nplt.xticks(rotation=70)\nplt.legend(north_legend + center_legend + south_legend)\n#plt.grid()\nplt.show()","95e6bfec":"nazionale_ita = pd.read_csv('\/kaggle\/input\/nazionale\/dpc-covid19-ita-andamento-nazionale.csv', error_bad_lines=False)\nnazionale_ita.head()","ab519e8d":"daybyday_cases = []\nfor i in range(1,len(nazionale_ita['totale_casi'])):\n    daybyday_cases.append(list(nazionale_ita['totale_casi'])[i] - list(nazionale_ita['totale_casi'])[i-1])","454211ab":"confirmed_ita = nazionale_ita.groupby(['data'])['totale_casi'].sum().reset_index()\ndeaths_ita = nazionale_ita.groupby(['data'])['deceduti'].sum().reset_index()\nrecovered_ita = nazionale_ita.groupby(['data'])['dimessi_guariti'].sum().reset_index()\n\n\n\ndatetime = []\na = nazionale_ita['data'].to_frame()\nfor elm in a['data']:   \n    b = elm[0:10]\n    datetime.append(b)\n    \ndatetime = pd.to_datetime(datetime)\n\np1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", title=\"Coronavirus infection in Italy\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Number of cases'\n\np1.line(datetime, confirmed_ita['totale_casi'], color='#C0392B', \n        legend_label='Confirmed cases', line_width=1.5)\np1.circle(datetime, confirmed_ita['totale_casi'], fill_color=\"white\", size=2)\np1.line(datetime, deaths_ita['deceduti'], color='#5DADE2', legend_label='Deaths',\n       line_width=1.5)\np1.circle(datetime, deaths_ita['deceduti'], fill_color=\"white\", size=2)\np1.line(datetime, recovered_ita['dimessi_guariti'], color='#E67E22', legend_label='Recovered',\n       line_width=1.5)\np1.circle(datetime, recovered_ita['dimessi_guariti'], fill_color=\"white\", size=2)\np1.legend.location = \"top_left\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","e41eb699":"import scipy.stats\n\n\ndef mean_confidence_interval(data, confidence=0.95):\n    a = 1.0 * np.array(data)\n    n = len(a)\n    m, se = np.mean(a), scipy.stats.sem(a)\n    h = se * scipy.stats.t.ppf((1 + confidence) \/ 2., n-1)\n    return m, m-h, m+h\n\n\nmean_hm_list = []\nmean_hp_list = []\nmean_list = []\n\nstart = 7\ngrowth_factor_s = growth_factor[start:]\n\nfor i in range(len(growth_factor_s)):\n    mean, mean_hm, mean_hp = mean_confidence_interval(growth_factor_s[:i], 0.95)\n    mean_hm_list.append(mean_hm)\n    mean_hp_list.append(mean_hp)\n    mean_list.append(mean)\n    \nmean_hm_list = np.asarray(mean_hm_list)\nmean_hp_list = np.asarray(mean_hp_list)\nmean_list = np.asarray(mean_list)\n\nmean_range = [i for i in range(len(mean_list))]\n\nplt.figure(figsize=(10,8))\nplt.plot(mean_list)\nplt.fill_between(mean_range, mean_hm_list, mean_hp_list, \n                 facecolor='b', alpha=0.4, edgecolor='#8F94CC', \n                 linewidth=2, linestyle='dashed')\n\nplt.title(\"95% - Confidence intervals for the mean R0 in Italy\")\nplt.legend([\"Average R0\",\"CI (95%)\"])\nplt.ylim(0,3)\nplt.show()\n","4e98959a":"hospital_ita = nazionale_ita.groupby(['data'])['ricoverati_con_sintomi'].sum().reset_index()\nintensive_ita = nazionale_ita.groupby(['data'])['terapia_intensiva'].sum().reset_index()\nhome_ita = nazionale_ita.groupby(['data'])['isolamento_domiciliare'].sum().reset_index()\n\n\n\ndatetime = []\na = nazionale_ita['data'].to_frame()\nfor elm in a['data']:   \n    b = elm[0:10]\n    datetime.append(b)\n    \ndatetime = pd.to_datetime(datetime)\n\np1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", title=\"Conditions of the infected\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Number of cases'\n\np1.line(datetime, hospital_ita['ricoverati_con_sintomi'], color='#C0392B', \n        legend_label='Mild conditions', line_width=1.5)\np1.circle(datetime, hospital_ita['ricoverati_con_sintomi'], fill_color=\"white\", size=2)\np1.line(datetime, intensive_ita['terapia_intensiva'], color='#5DADE2', legend_label='Serious or Critical',\n       line_width=1.5)\np1.circle(datetime, intensive_ita['terapia_intensiva'], fill_color=\"white\", size=2)\np1.line(datetime, home_ita['isolamento_domiciliare'], color='#E67E22', legend_label='Home isolation',\n       line_width=1.5)\np1.circle(datetime, home_ita['isolamento_domiciliare'], fill_color=\"white\", size=2)\np1.legend.location = \"top_left\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\n\nshow(p1)","a6807df5":"deaths = nazionale_ita['deceduti']\n\ndeath_rate = []\nfor i in range(1,len(deaths)):\n    death_rate.append((deaths[i] - deaths[i-1]) \/ deaths[i-1])\n\ndata = list(day_veneto['data'])\ndatetime = []\nfor elm in data:\n    datetime.append(elm[:10])\n    \ndatetime = pd.to_datetime(datetime)\n\np1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", title=\"Coronavirus n\u00b0 deaths in Italy\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Number of deaths'\n\np1 = figure(plot_width=600, plot_height=500, title=\"Death growth % day by day\")\np1.line(np.arange(0,len(death_rate),1), death_rate, color='#C0392B', \n        legend_label='Death Rate', line_width=1.5)\np1.circle(np.arange(0,len(death_rate),1), death_rate, fill_color=\"white\", size=5)\np1.xaxis.axis_label = 'Number of days'\np1.yaxis.axis_label = 'Rate'\n\np1.legend.location = \"top_left\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","9628fd2f":"day_swabs = []\n\nfor i in range(1,len(nazionale_ita)):\n    day_swabs.append(list(nazionale_ita['tamponi'])[i]- list(nazionale_ita['tamponi'])[i-1])\n\ndef running_mean(x, N):\n    cumsum = np.cumsum(np.insert(x, 0, 0)) \n    return (cumsum[N:] - cumsum[:-N]) \/ float(N)\n# Shade the area between y1 and line y=0\nplt.figure(figsize=(10,8))\nplt.fill_between(np.arange(0,len(day_swabs)), day_swabs, 0,\n                 facecolor=\"orange\", # The fill color\n                 color='blue',       # The outline color\n                 alpha=0.5)          # Transparency of the fill\nplt.fill_between(np.arange(0,len(daybyday_cases)), daybyday_cases, 0,\n                 facecolor=\"orange\", # The fill color\n                 color='orange',       # The outline color\n                 alpha=0.5)          # Transparency of the fill\nplt.legend(['Swabs','New cases'],loc=2)\nplt.xticks(np.arange(0,len(daybyday_cases),2))\nplt.xlabel('Days')\nplt.ylabel('Number')\n#plt.plot(running_mean(day_swabs,5))\n# Show the plot\nplt.show()","6dc45a6a":"active_cases = virus_data.groupby(['Date'])['Confirmed','Deaths','Recovered'].sum().reset_index()\nactive_cases['Co-Deaths'] = active_cases['Confirmed'] - active_cases['Deaths']\nactive_cases['Co-Recov'] = active_cases['Confirmed'] - active_cases['Recovered']\nactive_cases['Active'] = active_cases['Confirmed'] - active_cases['Deaths'] - active_cases['Recovered']\n\ndatetime = []\na = active_cases['Date'].to_frame()\nfor elm in a['Date']:   \n    b = elm[0:10]\n    datetime.append(b)\n    \ndatetime = pd.to_datetime(datetime)\n\np1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", title=\"Active cases of COVID-19 (Confirmed - Recovered - Deaths)\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Active cases'\n\np1.line(datetime, active_cases['Active'], color='#8B4513', \n        legend_label='Sick people without counting deaths & recovered', line_width=1.5)\np1.circle(datetime, active_cases['Active'], fill_color=\"black\", size=1.5)\n#p1.line(datetime, active_cases['Co-Deaths'], color='#FFA500', \n        #legend_label='Sick people without counting deaths', line_width=1.5)\n#p1.circle(datetime, active_cases['Co-Deaths'], fill_color=\"black\", size=5)\n#p1.line(datetime, active_cases['Co-Recov'], color='#FF4500', \n        #legend_label='Sick people without counting recovered', line_width=1.5)\n#p1.circle(datetime, active_cases['Co-Recov'], fill_color=\"black\", size=5)\n\np1.legend.location = 'bottom_right'\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","ae85e8b5":"mortality_rate = virus_data.groupby(['Date'])['Confirmed','Deaths'].sum().reset_index()\nmortality_rate['Rate'] = mortality_rate['Deaths'] \/ mortality_rate['Confirmed']\nmortality_rate['Infection'] = mortality_rate['Confirmed'] \/ mortality_rate['Confirmed'].max()\n\ndatetime = []\na = mortality_rate['Date'].to_frame()\nfor elm in a['Date']:   \n    b = elm[0:10]\n    datetime.append(b)\n    \ndatetime = pd.to_datetime(datetime)\n\np1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", title=\"Mortality rate of COVID-19\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Mortality (%)'\n\np1.line(datetime, mortality_rate['Rate'], color='#900C3F', \n        legend_label='Mortality Rate', line_width=1.5)\np1.circle(datetime, mortality_rate['Rate'], fill_color=\"black\", size=1.5)\n\np2 = figure(plot_width=600, plot_height=200, title=\"Normalized histogram of infections\")\np2.vbar(x=np.arange(0,len(datetime),1), top=mortality_rate['Infection'], \n        width=0.7, bottom=0, color=\"firebrick\")\np2.xaxis.visible = False\np1.xaxis.axis_label = 'Infections over time'\np1.yaxis.axis_label = 'Deaths (%)'\n\np1.legend.location = 'bottom_right'\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(column(p1,p2))","6254f63c":"healed_rate = virus_data.groupby(['Date'])['Confirmed','Recovered'].sum().reset_index()\nhealed_rate['Rate'] = healed_rate['Recovered'] \/ healed_rate['Confirmed']\nhealed_rate['Infection'] = healed_rate['Confirmed'] \/ healed_rate['Confirmed'].max()\n\ndatetime = []\na = mortality_rate['Date'].to_frame()\nfor elm in a['Date']:   \n    b = elm[0:10]\n    datetime.append(b)\n    \ndatetime = pd.to_datetime(datetime)\n\np1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", \n            title=\"Recovered people rate of COVID-19\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Recovered (%)'\n\np1.line(datetime, healed_rate['Rate'], color='#498748', \n        legend_label='Recovered people Rate', line_width=1.5)\np1.circle(datetime, healed_rate['Rate'], fill_color=\"black\", size=1.5)\n\np2 = figure(plot_width=600, plot_height=200, title=\"Normalized histogram of infections\")\np2.vbar(x=np.arange(0,len(datetime),1), top=healed_rate['Infection'], \n        width=0.7, bottom=0, color=\"firebrick\")\np2.xaxis.visible = False\np1.xaxis.axis_label = 'Infections over time'\np1.yaxis.axis_label = 'Recovered (%)'\n\np1.legend.location = 'top_left'\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(column(p1,p2))","261280f3":"datetime = []\na = mortality_rate['Date'].to_frame()\nfor elm in a['Date']:   \n    b = elm[0:10]\n    datetime.append(b)\n    \ndatetime = pd.to_datetime(datetime)\n\np1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", \n            title=\"Recovered \/ Deaths people rate of COVID-19\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Percentual'\n\np1.line(datetime, mortality_rate['Rate'], color='#900C3F', \n        legend_label='Mortality Rate', line_width=1.5)\np1.circle(datetime, mortality_rate['Rate'], fill_color=\"black\", size=1.5)\n\np1.line(datetime, healed_rate['Rate'], color='#498748', \n        legend_label='Recovered people Rate', line_width=1.5)\np1.circle(datetime, healed_rate['Rate'], fill_color=\"black\", size=1.5)\n\np1.legend.location = 'top_left'\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","28af0766":"from fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot\n\nfb_virus_data = virus_data\nfb_virus_data = fb_virus_data.groupby('Date')['Confirmed'].sum().reset_index()\n# Prophet requires columns ds (Date) and y (value)\nfb_confirmed = fb_virus_data[[\"Date\",\"Confirmed\"]]\nfb_confirmed = fb_confirmed.rename(columns={'Date': 'ds', 'Confirmed': 'y'})\n# Make the prophet model and fit on the data\nchangepoint_prior_scale = [0.05,0.1,0.15,0.2,0.25]\n\nmodel = Prophet(seasonality_mode = 'additive', changepoint_prior_scale=0.15)\nmodel.fit(fb_confirmed)\nfuture = model.make_future_dataframe(periods=7)\nforecast = model.predict(future)\n#figure = model.plot(forecast)\n#axes = figure.get_axes()\n#axes[0].set_xlabel('Date')\n#axes[0].set_ylabel('Confirmed cases forecast')\n\ndates = []\nfor elm in fb_confirmed.ds:\n    a = elm[6:]\n    b = elm[:2]\n    c = elm[3:5]\n    d = a+'-'+b+'-'+c\n    dates.append(d)\n\n\ntrace1 = {\n  \"fill\": None, \n  \"mode\": \"markers\",\n  \"marker_size\": 10,\n  \"name\": \"n\u00b0 of Confirmed\", \n  \"type\": \"scatter\", \n  \"x\": dates, \n  \"y\": fb_confirmed.y\n}\ntrace2 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"#57b8ff\"}, \n  \"mode\": \"lines\", \n  \"name\": \"upper_band\", \n  \"type\": \"scatter\", \n  \"x\": forecast.ds, \n  \"y\": forecast.yhat_upper\n}\ntrace3 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"#57b8ff\"}, \n  \"mode\": \"lines\", \n  \"name\": \"lower_band\", \n  \"type\": \"scatter\", \n  \"x\": forecast.ds, \n  \"y\": forecast.yhat_lower\n}\ntrace4 = {\n  \"line\": {\"color\": \"#eb0e0e\"}, \n  \"mode\": \"lines+markers\",\n  \"marker_size\": 4,\n  \"name\": \"prediction\", \n  \"type\": \"scatter\", \n  \"x\": forecast.ds, \n  \"y\": forecast.yhat\n}\ndata = [trace1, trace2, trace3, trace4]\nlayout = {\n  \"title\": \"Confirmed cases - Time Series Forecast\", \n  \"xaxis\": {\n    \"title\": \"Daily Dates\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n  \"yaxis\": {\n    \"title\": \"Confirmed cases\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n}\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n    \nyhat = list(forecast['yhat'][:-7])\ny = list(fb_virus_data['Confirmed'])\n\ndef mape(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\nprint('Mean absolute percentage error: ', mape(y,yhat))","3cdf8a74":"recovered_rate = []\n\nfor i in range(1,len(recovered_ita)):\n    \n    x = list(recovered_ita['dimessi_guariti'])[i]\n    y = list(recovered_ita['dimessi_guariti'])[i-1]\n    if y==0 and x==0:\n        recovered_rate.append(0)\n    elif(y==0):\n        recovered_rate.append(x\/x)\n    else:\n        z = (x - y) \/ x\n        recovered_rate.append(z)\n \nprint('Recovered rate in Italy: ', np.mean(recovered_rate))","0de3b676":"# Total population, N.\nRo = 2.5\n\nd = 1 \/ np.mean(recovered_rate)\ngamma = 0.1 #np.mean(recovered_rate)\nbeta = Ro * gamma\n\nN = 60000000\n# Initial number of infected and recovered individuals, I0 and R0.\nI0, R0 = 2, 0\n# Everyone else, S0, is susceptible to infection initially.\nS0 = N - I0 - R0\n# Contact rate, beta, and mean recovery rate, gamma, (in 1\/days).\nbeta, gamma = beta, gamma \n# A grid of time points (in days)\nt = np.linspace(0, 180, 180)\n\n# The SIR model differential equations.\ndef sir_model(y, t, N, beta, gamma):\n    S, I, R = y\n    dSdt = -beta * S * I \/ N\n    dIdt = beta * S * I \/N - gamma * I\n    dRdt = gamma * I\n    return dSdt, dIdt, dRdt\n\n\n# Integrate the SIR equations over the time grid, t.\nsolution = odeint(sir_model, [S0, I0, R0], t, args=(N, beta, gamma))\nsoultion = np.array(solution)\n\np1 = figure(plot_width=600, plot_height=500, title=\"SIR Model for Coronavirus (2019-nCoV)\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Days from 27\/01\/20 (Estimate of the first cases in Italy)'\np1.yaxis.axis_label = 'Population'\n\np1.line(t, solution[:,0], color='#D35400', \n        legend_label='Susceptible', line_width=1.5)\np1.circle(t, solution[:,0], fill_color=\"black\", size=1)\n\np1.line(t, solution[:,1], color='#2E4053', \n        legend_label='Infected', line_width=1.5)\np1.circle(t, solution[:,1], fill_color=\"black\", size=1)\n\np1.line(t, solution[:,2], color='#28B463', \n       legend_label='Recovered', line_width=1.5)\np1.circle(t, solution[:,2], fill_color=\"black\", size=1)\n\np1.legend.location = 'top_right'\n\nshow(p1)","01dc4661":"# Total population, N.\nRo = 2.8\n\n#d = 1 \/ np.mean(recovered_rate)\ngamma = 1\/10\nmu = 0.\nalpha = 1\/5\nbeta = Ro*((mu + alpha)*(mu+gamma))\/alpha \nBlambda = 0.\n#print(beta)\n\nN = 60000000\n# Initial number of infected and recovered individuals, I0 and R0.\nI0, R0, E0 = 500, 0, 0\n# Everyone else, S0, is susceptible to infection initially.\nS0 = N - I0 - R0 - E0\n# A grid of time points (in days)\nt = np.linspace(0, 200, 200)\n\n# The SIR model differential equations.\ndef seir_model(y, t, N, beta, gamma, alpha, Blambda, mu):\n    S, E, I, R = y\n    dSdt = Blambda -mu*S -beta*S*I\/N\n    dEdt = beta*S*I\/N - (mu+alpha)*E\n    dIdt = alpha*E - (gamma+mu)*I\n    dRdt = gamma*I - mu*R\n    return dSdt, dEdt, dIdt, dRdt\n\n# Integrate the SIR equations over the time grid, t.\nsolution2 = odeint(seir_model, [S0, E0, I0, R0], t, args=(N, beta, gamma, alpha, Blambda, mu))\nsoultion2 = np.array(solution2)\n\np1 = figure(plot_width=600, plot_height=500, title=\"SEIR Model for Coronavirus (2019-nCoV)\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Days from 27\/01\/20 (Estimate of the first cases in Italy)'\np1.yaxis.axis_label = 'Population'\n\np1.line(t, solution2[:,0], color='#D35400', \n        legend_label='Susceptible', line_width=1.5)\np1.circle(t, solution2[:,0], fill_color=\"black\", size=1)\n\np1.line(t, solution2[:,1], color='#2E4053', \n        legend_label='Exposed', line_width=1.5)\np1.circle(t, solution2[:,1], fill_color=\"black\", size=1)\n\np1.line(t, solution2[:,2], color='#28B463', \n       legend_label='Infected', line_width=1.5)\np1.circle(t, solution2[:,2], fill_color=\"black\", size=1)\n\np1.line(t, solution2[:,3], color='#821063', \n       legend_label='Recovered', line_width=1.5)\np1.circle(t, solution2[:,3], fill_color=\"black\", size=1)\n\np1.legend.location = 'top_right'\n\nshow(p1)","6cd722af":"# Total population, N.\nRo = 2.8\n\n#d = 1 \/ np.mean(recovered_rate)\ngamma = 1\/10\nmu = 0.\nalpha = 1\/5\nbeta = Ro*((mu + alpha)*(mu+gamma))\/alpha \nBlambda = 0.\n#print(beta)\n\nN = 60000000\n# Initial number of infected and recovered individuals, I0 and R0.\nI0, R0, E0 = 500, 0, 0\n# Everyone else, S0, is susceptible to infection initially.\nS0 = N - I0 - R0 - E0\n# A grid of time points (in days)\nt = np.linspace(0, 360, 360)\n\n# The SIR model differential equations.\ndef seir_model_social(y, t, N, ro, beta, gamma, alpha, Blambda, mu):\n    S, E, I, R = y\n    dSdt = Blambda -mu*S -ro*beta*S*I\/N\n    dEdt = ro*beta*S*I\/N - (mu+alpha)*E\n    dIdt = alpha*E - (gamma+mu)*I\n    dRdt = gamma*I - mu*R\n    return dSdt, dEdt, dIdt, dRdt\n\n# Integrate the SIR equations over the time grid, t.\nro1=1\nsolution1 = odeint(seir_model_social, [S0, E0, I0, R0], t, args=(N, ro1, beta, gamma, alpha, Blambda, mu))\nsoultion1 = np.array(solution1)\n\nro2=0.8\nsolution2 = odeint(seir_model_social, [S0, E0, I0, R0], t, args=(N, ro2, beta, gamma, alpha, Blambda, mu))\nsoultion2 = np.array(solution2)\n\nro3=0.6\nsolution3 = odeint(seir_model_social, [S0, E0, I0, R0], t, args=(N, ro3, beta, gamma, alpha, Blambda, mu))\nsoultion3 = np.array(solution3)\n\np1 = figure(plot_width=600, plot_height=500, title=\"SEIR Model for Coronavirus (2019-nCoV) with social distance\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Days from 27\/01\/20 (Estimate of the first cases in Italy)'\np1.yaxis.axis_label = 'Population'\n\np1.line(t, solution1[:,2], color='#D35400', \n        legend_label='Infected \u03c1=1', line_width=1.5)\np1.circle(t, solution1[:,2], fill_color=\"black\", size=1)\np1.line(t, solution1[:,1], color='#D35400', \n        legend_label='Exposed \u03c1=1', line_dash=\"4 4\", line_width=0.5)\np1.circle(t, solution1[:,1], fill_color=\"black\", line_dash=\"4 4\", size=0.02)\n\np1.line(t, solution2[:,2], color='#2E4053', \n        legend_label='Infected \u03c1=0.8', line_width=1.5)\np1.circle(t, solution2[:,2], fill_color=\"black\", size=1)\np1.line(t, solution2[:,1], color='#2E4053', \n        legend_label='Exposed \u03c1=0.8', line_dash=\"4 4\", line_width=0.5)\np1.circle(t, solution2[:,1], fill_color=\"black\", line_dash=\"4 4\", size=0.02)\n\np1.line(t, solution3[:,2], color='#28B463', \n       legend_label='Infected \u03c1=0.6', line_width=1.5)\np1.circle(t, solution3[:,2], fill_color=\"black\", size=1)\np1.line(t, solution3[:,1], color='#28B463', \n       legend_label='Exposed \u03c1=0.6', line_dash=\"4 4\", line_width=0.5)\np1.circle(t, solution3[:,1], fill_color=\"black\", line_dash=\"4 4\", size=0.02)\n\np1.legend.location = 'top_right'\n\nshow(p1)","eee63dae":"# Total population, N.\nRo = 2.78\n\n#d = 1 \/ np.mean(recovered_rate)\ngamma = 1\/10\nalpha = 0.067\neta = alpha\nbeta = 0.373\n#print(beta)\n\nN = 60000000\n# Initial number of infected and recovered individuals, I0 and R0.\nI0, Q0, R0 = 500, 250, 250\n# Everyone else, S0, is susceptible to infection initially.\nS0 = N - I0\n# A grid of time points (in days)\nt = np.linspace(0, 200, 200)\n\n# The SIR model differential equations.\ndef siqr_model(y, t, N, beta, gamma, alpha, eta):\n    S, I, Q, R = y\n    dSdt = -beta*S*I\/N\n    dIdt = beta*S*I\/N - (alpha+eta)*I\n    dQdt = eta*I - gamma*Q\n    dRdt = gamma*Q\n    return dSdt, dIdt, dQdt, dRdt\n\n\n# Integrate the SIR equations over the time grid, t.\nsolution2 = odeint(siqr_model, [S0, I0, Q0, R0], t, args=(N, beta, gamma, alpha, eta))\nsoultion2 = np.array(solution2)\n\np1 = figure(plot_width=600, plot_height=500, title=\"SIQR Model for Coronavirus (2019-nCoV)\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Days from 27\/01\/20 (Estimate of the first cases in Italy)'\np1.yaxis.axis_label = 'Population'\n\np1.line(t, solution2[:,0], color='#D35400', \n        legend_label='Susceptible', line_width=1.5)\np1.circle(t, solution2[:,0], fill_color=\"black\", size=1)\n\np1.line(t, solution2[:,1], color='#2E4053', \n        legend_label='Infected', line_width=1.5)\np1.circle(t, solution2[:,1], fill_color=\"black\", size=1)\n\np1.line(t, solution2[:,2], color='#28B463', \n       legend_label='Quarantined', line_width=1.5)\np1.circle(t, solution2[:,2], fill_color=\"black\", size=1)\n\np1.line(t, solution2[:,3], color='#821063', \n       legend_label='Recovered', line_width=1.5)\np1.circle(t, solution2[:,3], fill_color=\"black\", size=1)\n\np1.legend.location = 'top_right'\n\nshow(p1)","de08a569":"x = np.linspace(0,100,1000)\nL = 18800\nk = 0.137\na = 35\ny =  L \/ ( 1 + np.exp(-k*(x-a)) ) \n\ndaybyday_veneto = []\nfor i in range(1,len(list(day_veneto['totale_casi']))):\n    daybyday_veneto.append(list(day_veneto['totale_casi'])[i] -  list(day_veneto['totale_casi'])[i-1])\n    \n\ngrowth_veneto = []\n\nfor i in range(1,len(daybyday_veneto)):\n    \n    if(daybyday_veneto==0):\n        continue\n    else:\n        growth_veneto.append(daybyday_veneto[i] \/ daybyday_veneto[i-1])\n\nxm = np.argmax(daybyday_veneto) + 5.5\nT = 0.0001\nL1 = 18000\nk = 0.085\ny1 = L1 \/ (1 + T*np.exp(-k*(x-xm)))**(1\/T)\n\n\np1 = figure(plot_width=600, plot_height=500, title=\"Logistic curve of Veneto\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Days from first cases in reported by Protezione Civile)'\np1.yaxis.axis_label = 'Population'\n\np1.line(x, y, color='#D35400', \n        legend_label='Logistic curve', line_width=1.5)\np1.circle(np.arange(0,len(list(day_veneto['totale_casi'])),1),\n          list(day_veneto['totale_casi']), fill_color=\"black\", size=3)\n\np1.line(x, y1, color='#B91422', \n        legend_label='Logistic curve asymmetrical', line_dash=\"4 4\",line_width=0.8)\n\np1.legend.location = 'bottom_right'\nshow(p1)","8ba69314":"import scipy.stats\n\n\ndef mean_confidence_interval(data, confidence=0.95):\n    a = 1.0 * np.array(data)\n    n = len(a)\n    m, se = np.mean(a), scipy.stats.sem(a)\n    h = se * scipy.stats.t.ppf((1 + confidence) \/ 2., n-1)\n    return m, m-h, m+h\n\n\nmean_hm_list = []\nmean_hp_list = []\nmean_list = []\n\nstart = 7\ngrowth_veneto_s = growth_veneto[start:]\n\nfor i in range(len(growth_veneto_s)):\n    mean, mean_hm, mean_hp = mean_confidence_interval(growth_veneto_s[:i], 0.95)\n    mean_hm_list.append(mean_hm)\n    mean_hp_list.append(mean_hp)\n    mean_list.append(mean)\n    \nmean_hm_list = np.asarray(mean_hm_list)\nmean_hp_list = np.asarray(mean_hp_list)\nmean_list = np.asarray(mean_list)\n\nmean_range = [i for i in range(len(mean_list))]\n\nplt.figure(figsize=(10,8))\nplt.plot(mean_list)\nplt.fill_between(mean_range, mean_hm_list, mean_hp_list, \n                 facecolor='b', alpha=0.4, edgecolor='#8F94CC', \n                 linewidth=2, linestyle='dashed')\n\nplt.title(\"95% - Confidence intervals for the mean R0 in Veneto\")\nplt.legend([\"Average R0\",\"CI (95%)\"])\nplt.ylabel('Average R0')\nplt.xlabel('Number of days')\nplt.ylim(0,3)\nplt.show()","36031279":"veneto_det = pd.read_csv('\/kaggle\/input\/regioni\/dpc-covid19-ita-regioni.csv')\nveneto_det = veneto_det.loc[veneto_det['denominazione_regione']=='Veneto']\n\nvariazione_morti = []\n\nfor i in range(1,len(veneto_det)):\n    variazione_morti.append(list(veneto_det['deceduti'])[i] - list(veneto_det['deceduti'])[i-1])\n    \ntamponi_veneto = []\n\nfor i in range(1,len(veneto_det)):\n    tamponi_veneto.append(list(veneto_det['tamponi'])[i] - list(veneto_det['tamponi'])[i-1])\n    \nguariti_veneto = []\n\nfor i in range(1,len(veneto_det)):\n    guariti_veneto.append(list(veneto_det['dimessi_guariti'])[i] - list(veneto_det['dimessi_guariti'])[i-1])","7e96dfbf":"print(\"DATI ELABORATI PER L'ITALIA (RIFERIMENTO PROTEZIONE CIVILE)\")\nprint(\"\\n\")\nprint('Numero totale di contagi in Italia ad oggi: ', list(confirmed_ita['totale_casi'])[-1])\nprint('Variazione percentuale nuovi positivi: ', \n      np.round(((list(confirmed_ita['totale_casi'])[-1] - list(confirmed_ita['totale_casi'])[-2]) \/ list(confirmed_ita['totale_casi'])[-1])*100,2),'%')\nprint('Contagi in tutta Italia oggi: ', list(nazionale_ita['totale_casi'])[-1] - list(nazionale_ita['totale_casi'])[-2])\nprint(\"Variazione nuovi positivi: \", list(nazionale_ita['variazione_totale_positivi'])[-1])\nprint(\"Rapporto tra i contagi di oggi e quelli di ieri (R0): \", np.round(growth_factor[-1],3))\nprint(\"Totale dei morti in tutta Italia: \", list(deaths_ita['deceduti'])[-1])\nprint(\"Morti in tutta Italia oggi: \", list(deaths_ita['deceduti'])[-1] - list(deaths_ita['deceduti'])[-2])\nprint(\"Crescita dei morti rispetto a ieri in tutta Italia: \", np.round(death_rate[-1]*100,2),'%')\nprint(\"Totale dei guariti in tutta Italia ad oggi: \", list(recovered_ita['dimessi_guariti'])[-1])\nprint(\"Guariti in tutta Italia oggi: \", list(recovered_ita['dimessi_guariti'])[-1] - list(recovered_ita['dimessi_guariti'])[-2])\nprint(\"Numero di persone ricoverate con sintomi attualmente: \",\n      list(hospital_ita['ricoverati_con_sintomi'])[-1])\nprint(\"Numero di persone ricoverate in terapia intensiva attualmente: \",\n      list(intensive_ita['terapia_intensiva'])[-1])\nprint(\"Numero di persone in isolamento domiciliare attualmente: \",\n      list(home_ita['isolamento_domiciliare'])[-1])\nprint(\"Numero dei tamponi effettutuati oggi: \",\n      list(day_swabs)[-1])\n\nprint(\"\\n\") \nprint(\"DATI ELABORATI PER IL VENETO (RIFERIMENTO PROTEZIONE CIVILE)\")\nprint(\"\\n\")\nprint('Numero di contagi totali in Veneto: ', list(day_veneto['totale_casi'])[-1])\nprint('Contagi in Veneto oggi: ', list(day_veneto['totale_casi'])[-1] - list(day_veneto['totale_casi'])[-2])\n#print('Variazione nuovi positivi: ', list(veneto_det['variazione_totale_positivi'])[-1])\nprint('Variazione percentuale nuovi positivi: ', \n      np.round(((list(day_veneto['totale_casi'])[-1] - list(day_veneto['totale_casi'])[-2]) \/ list(day_veneto['totale_casi'])[-1])*100,2),'%')\nprint(\"Morti in totale: \", np.sum(variazione_morti))\nprint(\"Morti di oggi: \", variazione_morti[-1])\nprint(\"Numero dei tamponi effettutuati oggi:\", tamponi_veneto[-1])\nprint(\"Guariti in totale: \", np.sum(guariti_veneto))\nprint(\"Guariti di oggi: \", guariti_veneto[-1])\nprint(\"Rapporto tra i contagi di oggi e quelli di ieri (R0): \", np.round(growth_veneto[-1],3))","e59f4b59":"p1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", title=\"Condizioni degli infetti in Veneto\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Number of cases'\n\np1.line(datetime, veneto_det['ricoverati_con_sintomi'], color='#C0392B', \n        legend_label='Ricoverati con sintomi', line_width=1.5)\np1.circle(datetime, veneto_det['ricoverati_con_sintomi'], fill_color=\"white\", size=5)\np1.line(datetime, veneto_det['terapia_intensiva'], color='#5DADE2', legend_label='Terapia intensiva',\n       line_width=1.5)\np1.circle(datetime, veneto_det['terapia_intensiva'], fill_color=\"white\", size=5)\np1.line(datetime, veneto_det['isolamento_domiciliare'], color='#E67E22', legend_label='Isolamento',\n       line_width=1.5)\np1.circle(datetime, veneto_det['isolamento_domiciliare'], fill_color=\"white\", size=5)\np1.legend.location = \"top_left\"\n\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\n\nshow(p1)","48c62862":"p1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", title=\"Condizioni degli infetti in Veneto\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Number of cases'\n\np1.line(datetime, veneto_det['totale_positivi'], color='#4C31C8', \n        legend_label='Attualmente positivi', line_width=1.5)\np1.circle(datetime, veneto_det['totale_positivi'], fill_color=\"white\", size=4)\n\np1.line(datetime, veneto_det['deceduti'], color='#C0392B', \n        legend_label='Deceduti', line_width=1.5)\np1.circle(datetime, veneto_det['deceduti'], fill_color=\"white\", size=4)\n\np1.line(datetime, veneto_det['dimessi_guariti'], color='#2635A5', \n        legend_label='Dimessi\/Guariti', line_width=1.5)\np1.circle(datetime, veneto_det['dimessi_guariti'], fill_color=\"white\", size=4)\n\n\n\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\np1.legend.location = \"top_left\"\nshow(p1)","e8bbee3a":"p1 = figure(plot_width=600, plot_height=500, x_axis_type=\"datetime\", title=\"Variazione positivi in Italia\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Number of cases'\n\np1.line(datetime, nazionale_ita['variazione_totale_positivi'], color='#C0392B', \n        legend_label='Variazione nuovi positivi', line_width=1.5)\np1.circle(datetime, nazionale_ita['variazione_totale_positivi'], fill_color=\"white\", size=5)\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\np1.legend.location = \"top_left\"\nshow(p1)","da392e81":"period = 1\n\nregioni = pd.read_csv('\/kaggle\/input\/regioni\/dpc-covid19-ita-regioni.csv')\n\nveneto = regioni.loc[regioni['denominazione_regione']=='Veneto']\nveneto_positivi = list(veneto['nuovi_positivi'])[::period]\nveneto_casi = list(veneto['totale_casi'])[::period]\n\nveneto_positivi = [0 if x<0 else x for x in veneto_positivi]\n\n\nemilia = regioni.loc[regioni['denominazione_regione']=='Emilia-Romagna']\nemilia_positivi = list(emilia['nuovi_positivi'])[::period]\nemilia_casi = list(emilia['totale_casi'])[::period]\n\nemilia_positivi = [0 if x<0 else x for x in emilia_positivi]\n    \n    \nlomba = regioni.loc[regioni['denominazione_regione']=='Lombardia']\nlomba_positivi = list(lomba['nuovi_positivi'])[::period]\nlomba_casi = list(lomba['totale_casi'])[::period]\n\nlomba_positivi = [0 if x<0 else x for x in lomba_positivi]\n  \n\npiemonte = regioni.loc[regioni['denominazione_regione']=='Piemonte']\npiemonte_positivi = list(piemonte['nuovi_positivi'])[::period]\npiemonte_casi = list(piemonte['totale_casi'])[::period]\n\npiemonte_positivi = [0 if x<0 else x for x in piemonte_positivi]\n\n\ntoscana = regioni.loc[regioni['denominazione_regione']=='Toscana']\ntoscana_positivi = list(toscana['nuovi_positivi'])[::period]\ntoscana_casi = list(toscana['totale_casi'])[::period]\n\ntoscana_positivi = [0 if x<0 else x for x in toscana_positivi]\n\n\nmarche = regioni.loc[regioni['denominazione_regione']=='Marche']\nmarche_positivi = list(marche['nuovi_positivi'])[::period]\nmarche_casi = list(marche['totale_casi'])[::period] \n\nmarche_positivi = [0 if x<0 else x for x in marche_positivi]\n    \n    \nfriuli = regioni.loc[regioni['denominazione_regione']=='Friuli Venezia Giulia']\nfriuli_positivi = list(friuli['nuovi_positivi'])[::period]\nfriuli_casi = list(friuli['totale_casi'])[::period]\n\nfriuli_positivi = [0 if x<0 else x for x in friuli_positivi]\n\n    \nexponential_line_x = []\nexponential_line_y = []\nfor i in range(10):\n    exponential_line_x.append(i)\n    exponential_line_y.append(i)\n\np1 = figure(plot_width=800, plot_height=550, title=\"Trajectory of Covid-19\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Total number of detected cases (Log scale)'\np1.yaxis.axis_label = 'New confirmed cases (Log scale)'\n\np1.line(exponential_line_x, exponential_line_y, line_dash=\"4 4\", line_width=0.5)\np1.line(np.log(friuli_casi), np.log(friuli_positivi), color='#DBAE23', \n        legend_label='Friuli Venezia Giulia', line_width=1)\np1.circle(np.log(friuli_casi), np.log(friuli_positivi), fill_color=\"white\", size=2)\n\np1.line(np.log(emilia_casi), np.log(emilia_positivi), color='#3EC358', \n        legend_label='Emilia Romagna', line_width=1)\np1.circle(np.log(emilia_casi), np.log(emilia_positivi), fill_color=\"white\", size=2)\n\np1.line(np.log(veneto_casi), np.log(veneto_positivi), color='#3E4CC3', \n        legend_label='Veneto', line_width=1)\np1.circle(np.log(veneto_casi), np.log(veneto_positivi), fill_color=\"white\", size=2)\n\np1.line(np.log(piemonte_casi), np.log(piemonte_positivi), color='#F54138', \n        legend_label='Piemonte', line_width=1)\np1.circle(np.log(piemonte_casi), np.log(piemonte_positivi), fill_color=\"white\", size=2)\n\np1.line(np.log(marche_casi), np.log(marche_positivi), color='#23BCDB', \n        legend_label='Marche', line_width=1)\np1.circle(np.log(marche_casi), np.log(marche_positivi), fill_color=\"white\", size=2)\n\np1.line(np.log(toscana_casi), np.log(toscana_positivi), color='#010A0C', \n        legend_label='Toscana', line_width=1)\np1.circle(np.log(toscana_casi), np.log(toscana_positivi), fill_color=\"white\", size=2)\n\np1.line(np.log(lomba_casi), np.log(lomba_positivi), color='#017A0C', \n        legend_label='Lombardia', line_width=1)\np1.circle(np.log(lomba_casi), np.log(lomba_positivi), fill_color=\"white\", size=2)\n\np1.legend.location = \"top_left\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","205060db":"period = 2\n\nregioni = pd.read_csv('\/kaggle\/input\/regioni\/dpc-covid19-ita-regioni.csv')\n\nveneto = regioni.loc[regioni['denominazione_regione']=='Veneto']\nveneto_positivi = list(veneto['nuovi_positivi'])[::period]\nveneto_casi = list(veneto['totale_casi'])[::period]\n\nveneto_positivi = [0 if x<0 else x for x in veneto_positivi]\n\n\nemilia = regioni.loc[regioni['denominazione_regione']=='Emilia-Romagna']\nemilia_positivi = list(emilia['nuovi_positivi'])[::period]\nemilia_casi = list(emilia['totale_casi'])[::period]\n\nemilia_positivi = [0 if x<0 else x for x in emilia_positivi]\n    \n    \nlomba = regioni.loc[regioni['denominazione_regione']=='Lombardia']\nlomba_positivi = list(lomba['nuovi_positivi'])[::period]\nlomba_casi = list(lomba['totale_casi'])[::period]\n\nlomba_positivi = [0 if x<0 else x for x in lomba_positivi]\n  \n\npiemonte = regioni.loc[regioni['denominazione_regione']=='Piemonte']\npiemonte_positivi = list(piemonte['nuovi_positivi'])[::period]\npiemonte_casi = list(piemonte['totale_casi'])[::period]\n\npiemonte_positivi = [0 if x<0 else x for x in piemonte_positivi]\n\n\ntoscana = regioni.loc[regioni['denominazione_regione']=='Toscana']\ntoscana_positivi = list(toscana['nuovi_positivi'])[::period]\ntoscana_casi = list(toscana['totale_casi'])[::period]\n\ntoscana_positivi = [0 if x<0 else x for x in toscana_positivi]\n\n\nmarche = regioni.loc[regioni['denominazione_regione']=='Marche']\nmarche_positivi = list(marche['nuovi_positivi'])[::period]\nmarche_casi = list(marche['totale_casi'])[::period] \n\nmarche_positivi = [0 if x<0 else x for x in marche_positivi]\n    \n    \nfriuli = regioni.loc[regioni['denominazione_regione']=='Friuli Venezia Giulia']\nfriuli_positivi = list(friuli['nuovi_positivi'])[::period]\nfriuli_casi = list(friuli['totale_casi'])[::period]\n\nfriuli_positivi = [0 if x<0 else x for x in friuli_positivi]\n\n    \nexponential_line_x = []\nexponential_line_y = []\nfor i in range(10):\n    exponential_line_x.append(i)\n    exponential_line_y.append(i)\n\np1 = figure(plot_width=800, plot_height=550, title=\"Trajectory of Covid-19\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Total number of detected cases'\np1.yaxis.axis_label = 'New confirmed cases'\n\n#p1.line(exponential_line_x, exponential_line_y, line_dash=\"4 4\", line_width=0.5)\np1.line(friuli_casi, friuli_positivi, color='#DBAE23', \n        legend_label='Friuli Venezia Giulia', line_width=1)\np1.circle(friuli_casi, friuli_positivi, fill_color=\"white\", size=2)\n\np1.line(emilia_casi, emilia_positivi, color='#3EC358', \n        legend_label='Emilia Romagna', line_width=1)\np1.circle(emilia_casi, emilia_positivi, fill_color=\"white\", size=2)\n\np1.line(veneto_casi, veneto_positivi, color='#3E4CC3', \n        legend_label='Veneto', line_width=1)\np1.circle(veneto_casi, veneto_positivi, fill_color=\"white\", size=2)\n\np1.line(piemonte_casi, piemonte_positivi, color='#F54138', \n        legend_label='Piemonte', line_width=1)\np1.circle(piemonte_casi, piemonte_positivi, fill_color=\"white\", size=2)\n\np1.line(marche_casi, marche_positivi, color='#23BCDB', \n        legend_label='Marche', line_width=1)\np1.circle(marche_casi, marche_positivi, fill_color=\"white\", size=2)\n\np1.line(toscana_casi, toscana_positivi, color='#010A0C', \n        legend_label='Toscana', line_width=1)\np1.circle(toscana_casi, toscana_positivi, fill_color=\"white\", size=2)\n\np1.line(lomba_casi, lomba_positivi, color='#017A0C', \n        legend_label='Lombardia', line_width=1)\np1.circle(lomba_casi, lomba_positivi, fill_color=\"white\", size=2)\n\n#p1.legend.location = \"bottom_right\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","0ba09c5b":"The plot below, shows the total number of confirmed cases, recovered and deaths in China and Italy, which is my country.","1418147e":"# Coronavirus COVID-19\n \nAccording with the World Health Organization (https:\/\/www.who.int\/health-topics\/coronavirus) Coronaviruses (CoV) are a large family of viruses that cause illness ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS-CoV) and Severe Acute Respiratory Syndrome (SARS-CoV). A novel coronavirus (nCoV) is a new strain that has not been previously identified in humans.  \n\nCoronaviruses are zoonotic, meaning they are transmitted between animals and people.  Detailed investigations found that SARS-CoV was transmitted from civet cats to humans and MERS-CoV from dromedary camels to humans. Several known coronaviruses are circulating in animals that have not yet infected humans. \n\nCommon signs of infection include respiratory symptoms, fever, cough, shortness of breath and breathing difficulties. In more severe cases, infection can cause pneumonia, severe acute respiratory syndrome, kidney failure and even death. \n\nStandard recommendations to prevent infection spread include regular hand washing, covering mouth and nose when coughing and sneezing, thoroughly cooking meat and eggs. Avoid close contact with anyone showing symptoms of respiratory illness such as coughing and sneezing.","5fd5ea33":"Deaths people rate over the time. The normalized histogram below the plot shows the number of infections, which is useful in order to track the relation between the number of new cases and the number of deaths people.","57788184":"Compared with the SIR model this seems to be more realistic. To do a further step let's see just in principle how the social distaance affects the number of contagions. The social distance is defined with a parameter $\\rho$ which ranges from 0 to 1. Zero means that people are totally locked inside their home in separte rooms, while 1 means that people are totally free to go very they want, this parameter affects $\\beta$ as follows:\n\n* $\\frac{\\delta S}{\\delta t} = \\Lambda - \\mu S - \\frac{\\rho \\beta I S}{N} $\n* $\\frac{\\delta E}{\\delta t} = \\frac{\\rho \\beta I S}{N} - (\\mu + \\alpha)E $\n* $\\frac{\\delta I}{\\delta t} = \\alpha E - (\\lambda+\\mu)I$\n* $\\frac{\\delta R}{\\delta t} = \\lambda I - \\mu R $","644493bb":"## Further analysis for Covid-19 in the world","e4f327b1":"## Suscepible Infected Quarantined Recovered SIQR for Italy (Work on progress)\n\nThis model is another variant for modeling the spread of the virus by taking into account the quarantined people. $Q$ denotes the number of quarantined people, while $R$ models the positive and isolated individuals that recover or die from the disease. Also for the previous models the number of recovered or deceased non-identified patients is not modelled because its impossible. \n\n* $\\frac{\\delta S}{\\delta t} = -\\frac{\\beta I S}{N} $\n* $\\frac{\\delta E}{\\delta t} = \\frac{\\beta I S}{N} - (\\mu + \\eta)E $\n* $\\frac{\\delta I}{\\delta t} = \\eta I - \\gamma Q$\n* $\\frac{\\delta R}{\\delta t} = \\gamma Q $","daf13552":"I just want to provide some simple and informative plots regarding the infection spreading over the word","cc72081b":"## Coronavirus in Italy ","11a74855":"According with scientist, it is very difficult to estimate the death rate of a novel virus during the period of infections. Also counting the death rate as the number of deaths divided by the number of cases it's not precise. The actual deaths are not really actual, they belong rather to the past. For this reason, if we divide the deaths by the cases, we are treating two different groups of patients: those who died (in the past) and those infected (in the present, who do not yet know whether they will recover or die).\n\n\n[This study](https:\/\/academic.oup.com\/aje\/article\/162\/5\/479\/82647) propose a different way to estimate more precisely the death rate. Denoting with $t$ the time and with $D(t)$ and $R(t)$ the deaths and recovered at time $t$ we have that the death rate $DR(t)$ is given as:\n\n$ DR(t) = \\frac{D(t)}{D(t)+R(t)} $,\n\n>  which implicitly assumes that the case fatality ratio for those who remain in the hospital will be similar to that for those whose outcome is known. ","b705d1fc":"Logarithmic scale of the Coronavirus spreading among the top 50 infected countries sorted for confirmed cases in descending order","a42889eb":"The plot below, shows the total number of confirmed cases, recovered and deaths all over the world.","8f2045ee":"## **Susceptible - Exposed Infected - Recovered Model (SEIR) for Italy**\n\nThis is a more precise model for studying the spread of the virus. For many important infections there is a significant incubation period during which the individual has been infected but is not yet infectious themselves. During this period the individual is in compartment E (for exposed).\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/3d\/SEIR.PNG\/798px-SEIR.PNG)\n\nAccording with [this source](https:\/\/www.health.harvard.edu\/diseases-and-conditions\/coronavirus-resource-center) the incubation period of the Covid-19 ranges from 3 to 14 days, in particular it has been estimated an average period of 5.1 days (at least in Italy). Given the death rate as $\\mu$, the birth rate as $\\Lambda$, assuming that the incubation period is a random variable with exponential distribution with parameter $\\alpha$, and also assuming the presence of vital dynamics with birth rate equal to death rate, we have the model:\n\n* $\\frac{\\delta S}{\\delta t} = \\Lambda - \\mu S - \\frac{\\beta I S}{N} $\n* $\\frac{\\delta E}{\\delta t} = \\frac{\\beta I S}{N} - (\\mu + \\alpha)E $\n* $\\frac{\\delta I}{\\delta t} = \\alpha E - (\\lambda+\\mu)I$\n* $\\frac{\\delta R}{\\delta t} = \\lambda I - \\mu R $\n\nFor now let's suppose that the birth and the death rate does not affect the virus spreading.\n$R_0$ this time is equal to $R_0 = \\frac{\\alpha}{\\mu+\\alpha}\\frac{\\beta}{\\mu+\\lambda} $ where we can obtain $\\alpha$, anyway according with the sources online we can find that $\\alpha = \\frac{1}{incubation}$\n","c8f61b2a":"As you can see this is a toy model, as the number of infected people is extremely huge and the previous assumptions are strong and not realistic. ","f760da4a":"The world map below shows the confirmed cases up to now, updated according with the provided dataset","a927289f":"As reported on [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Compartmental_models_in_epidemiology) the dynamics of an epidemic, for example the flu, are often much faster than the dynamics of birth and death, therefore, birth and death are often omitted in simple compartmental models. The SIR system without so-called vital dynamics (birth and death, sometimes called demography) described above can be expressed by the following set of ordinary differential equations\n\n* $\\frac{\\delta S}{\\delta I} = - \\frac{\\beta I S}{N}$\n* $\\frac{\\delta I}{\\delta t} = \\frac{\\beta I S}{N} - vI$\n* $\\frac{\\delta R}{\\delta t} =  vI$\n\nFor now, we suppose that the Covid-19 is arrived in Italy with the start of the new year, which is resoneable if we think that the first confirmed case was detected in the end of February and probably many other undetected cases has been passed unobserved. \n\nWe also suppose a reproducibily rate of 1.7, which is in the range of 1.4-2.5. Gamma has been estimated assuming the virus lives inside the human body for 10 days on average, which is resonable since the estimated period ranges from 2 to 14 days. Beta is obtained thanks to Gamma and the reproducibiliy rate. \n\n\nVery important assumptions about this model is that once a person has recovered, the person received immunity, which has no scientific proves. Age, sex, social status, and race do not affect the probability of being infected. There is no inherited immunity. The member of the population mix homogeneously (have the same interactions with one another to the same degree).\n\nOne other important assumption about SIR is that it does not take into account the containment measures of the infection.\n\nThe results obtained with the SIR model are the followings:","418d9968":"## **Susceptible - Infected - Recovered Model (SIR) for Italy**\n\nSIR model is an epidemiological model that computes the theoretical number of people infected with a contagious illness in a closed population over time. The models assumptions for this notebook are the followings:\n\n* Costant (Closed) population in time\n* Avoid counting bhirds and deaths\n* The population is mixed (However if you consider some cluster, you can simplify the view by a fractal point of view where small subsets of the cluster moves from one cluster to another, even if in reality there are some restricted zones where no one can exit)\n\n\nAccording with [a study from the University of Standford](https:\/\/web.stanford.edu\/~jhj1\/teachingdocs\/Jones-on-R0.pdf), the basic reproduction number, R0, is defined as the expected number of secondary cases\nproduced by a single (typical) infection in a completely susceptible population. It is important\nto note that R0 is a dimensionless number and not a rate, which would have units of time.\nSome authors incorrectly call R0 the \u201cbasic reproductive rate.\u201d R0 is defined as:\n\n$ R_0 = \\tau * \\hat c * d $, \n\nwhere $\\tau$ is the transmissibility (i.e., probability of infection given contact between a susceptible and infected individual), $\\hat c$ is the average rate of contact between susceptible and infected\nindividuals, and d is the duration of infectiousness. d can be obtained as $\\frac{1}{v}$ where $v$ is the recovering rate of a specific population, in our case it is equal to:","92881b45":"Keep in mind that there are many factor which change between each country that affects drastically this rough measure.","4357e9f6":"A comparison between the mortality rate and the rate of recovered people over the time is provided","bad50d86":"The graph below shows how the situation of people with Covid-19 varies over time, in particular we analyze the number of people in intensive care, the number of people hospitalized with symptoms and that of people who have contracted the virus but who are in home isolation. The blue line represents the maximum intensive care places in Italy. But most of the cases in clustered in the North, hence this blu line is not helpful to understand how critical is the situation in some specific hospitals","72608ab4":"The plot in this [link](https:\/\/aatishb.com\/covidtrends\/?location=Australia&location=Canada&location=China&location=France&location=Germany&location=Hong+Kong&location=India&location=Iran&location=Italy&location=Japan&location=South+Korea&location=Spain&location=Turkey&location=US&location=United+Kingdom) shows a comparison between the total number of cases and the number of active cases for some of the main affected countries. This is very useful in order to track is a country is winning against the virus. The dotted line represent the exponential growth which means that countries which follow this line are in not out of emergency. ","4bfae20e":"In general the situation day by day in Italy is the following:","0d013fc8":"It is important to notice that the growth factor does not decrease only becase the number of infected people is saturating, but it can decrease if every person try to avoid contacts with other people, and also on the probability of infecting someone. \nWhen there is a new virus, only the people who have contracted it can infect other peoples, hence it is possible to model the spreading of the virus with a rough and simple model.\n\nGiven the average number of contacts as **x** and the probabilty of infecting someone as **y** it is possible to have a rough measure of the number of confirmed cases after **n** days as:\n\n$ \\Delta N_d = (x * y)^n * N_d  $\n\nIf the growth is exponential, we expect that each new day the number of new cases is multiplied by a constant.","596ebed1":"Let's look at the number of new cases in Italy compared with the number of medical swabs done every day just to see if there are some intersting results:","4f8eba2a":"It is worth of mention that you can think that the death rate of Covid-19 in Italy is very high. However you are blinded about a statistical problem known as the Simpson Paradox. If we look at the trends of the number of deaths for set of populations grouped by age and we compare these sets with the same sets from China, it is possible to notice that Italy has a lower death rate for each set with respect to China, however, if you just look at the trend of the death rate without grouping people by age the trend is reversed. To get precise percentages of each group you need to manually check every day data modifing properly the plots.","34138bed":"Recovered people rate over the time. The normalized histogram below the plot shows the number of infections, which is useful in order to track the relation between the number of new cases and the number of recovered people.","edab51f3":"The effective contact rate $\\beta$ is equal to $\\tau * \\hat c$. Since $\\beta$ is not available, it is difficult to do some analysis, however, scientists have declared that the reproducibily rate of the Covid-19 is in a range from 1.4 to 2.5. Hence it is possible to estimate $\\beta$ as:\n\n$ \\beta = \\frac{R_0}{d} = R_0 * v$ \n","4c838bc3":"## DISCLAIMER\n### This part has not been done following detailed statistical analyzes for now and therefore has no scientific value.\nAnalysis with the prophet library of Facebook for Time-Series data","4d4cc005":"Let's look more in details the situation in Italy by also looking for each Regione from North to South. The histogram below shows the total number of cases for each region","907ca79a":"The plot below shows the change in total (%) of new deaths day by day. The formula used is given by :\n\n$\\frac{(TotalNumberOfDeathsUpTo-(i-th)Day - TotalNumberOfDeathsUpTo-(i-1-th)Day)}{TotalNumberOfDeathsUpTo-(i-th)Day}$","2233ee22":"The growth factor of infections is given by the number of new infections in a day divided by the number of new cases in the previous day. This ratio is useful in order to estimate how the growth of the virus is behaving. In particular since in real words cases, pure exponential curves does not exists, we model the virus with the logistic curve. This is quite intuitive as we have a limited population number \n\n![](https:\/\/cdn.britannica.com\/39\/150639-050-C37A33AA\/environment-populations-rate-growth-curve-competition-resources.jpg)\n\nThe inflection point of the logistic function is the point where the function from growing starts decreasing. This point is intimately related with the growth factor, in particular as long as the growth factor is greater than 1 it means that we have yet to reach the inflection point. When the growth factor is equal to 1 the inflection point has been reached and from now on the number of new cases will start decreasing \n\nIf whe look at the new cases day by day, it is possible to see that there is an outlier on the 12-th February. According with [Worldometers](https:\/\/www.worldometers.info\/coronavirus\/how-to-interpret-feb-12-case-surge\/): \n> China reported 15,152 new cases for February 12, in an apparent 600% surge over the preceding day. However, this spike does not represent a change in the trend. In fact, 13,332 of these new cases are clinically (rather than laboratory) confirmed cases, reported for the first time as an effect of a change in how cases are diagnosed and reported in Hubei province starting on February 12. Previously, these cases were counted as \u201cprobable\u201d or \u201csuspected\u201d cases. Of the 15,152 new cases reported, only 1,820 are new laboratory confirmed cases (1,508 in Hubei province and 312 elsewhere in China).\n\nWhich means that we need to change the data from that day, as the time series of this dataset is wrong. This outlier number is equally splitted among the previous Hubei cases.\nA growth factor which is constantly above 1 implies an exponential growth.","2fd7298e":"And let's plot the Covid-19 spread day by day from North to South"}}