{"cell_type":{"56af8c0f":"code","8f17cc9f":"code","b5a4cc28":"code","ac089562":"code","0d524d30":"code","f9576b14":"code","06a28f83":"code","e0c81377":"code","9c1efff2":"code","ebb12690":"code","37a6e591":"code","a3125c89":"code","9d41337e":"code","d77f3386":"code","530a7216":"code","263c323a":"code","0162f366":"code","1c8a23e9":"code","d8ed0a5c":"code","7ca6837d":"code","040014de":"code","06b635e0":"code","05f4aec1":"code","899df865":"code","538e5174":"code","bf084353":"code","67262a01":"code","b4f977e6":"code","a6b0bda6":"code","74c0967f":"code","9617ab4f":"markdown","264dca44":"markdown","852868e8":"markdown","5c158ec1":"markdown","0e44af08":"markdown","9b723338":"markdown","3cd0d200":"markdown","bb69f9a2":"markdown"},"source":{"56af8c0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nfrom IPython.display import HTML\nfrom keras.datasets import mnist\nfrom keras.utils import to_categorical\n\ndef create_download_link(title = \"Download CSV file\", filename = \"data.csv\"):  \n    html = '<a href={filename}>{title}<\/a>'\n    html = html.format(title=title,filename=filename)\n    return HTML(html)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8f17cc9f":"from keras import layers\nfrom keras import models\n\nmodel=models.Sequential()\nmodel.add(layers.Conv2D(32,(3,3), activation='relu', input_shape=(28,28,1)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64,(3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64,(3,3), activation='relu'))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10, activation='softmax'))\nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n","b5a4cc28":"import pandas as pd\ntrain_file_name=\"\/kaggle\/input\/digit-recognizer\/train.csv\"\ntest_file_name=\"\/kaggle\/input\/digit-recognizer\/test.csv\"\ndf_train=pd.read_csv(train_file_name)\npixel_list=df_train.columns.values[1:]\ntrain_labels=df_train.label.values\ntrain_images=df_train[pixel_list]\ntrain_images=train_images.values.reshape((len(df_train),28,28))\ntrain_images=train_images.reshape((len(df_train),28,28,1))\ntrain_images=train_images.astype('float32')\/255\n\ndf_test=pd.read_csv(test_file_name)\npixel_list=df_test.columns.values\ntest_images=df_test[pixel_list]\ntest_images=test_images.values.reshape((len(df_test),28,28))\ntest_images=test_images.reshape((len(df_test),28,28,1))\ntest_images=test_images.astype('float32')\/255\n\ntrain_labels=to_categorical(train_labels)","ac089562":"model.fit(train_images, train_labels, epochs=5, batch_size=64)","0d524d30":"predicitions=model.predict(test_images)\ndf_predicitions=pd.DataFrame({\"ImageId\":np.arange(1,len(predicitions)+1),\"Label\":predicitions.argmax(axis=1)})\n# create a link to download the dataframe which was saved with .to_csv method\ncreate_download_link(filename='submission.csv')","f9576b14":"from keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=False)\n# fit parameters from data\ndatagen=datagen.flow(train_images, train_labels)","06a28f83":"'''\nsteps_per_epoch: Integer.\n                Total number of steps (batches of samples)\n                to yield from `generator` before declaring one epoch\n                finished and starting the next epoch. It should typically\n                be equal to the number of samples of your dataset\n                divided by the batch size.\n                Optional for `Sequence`: if unspecified, will use\n                the `len(generator)` as a number of steps.\n'''             ","e0c81377":"len(train_images)","9c1efff2":"# fits the model on batches with real-time data augmentation:\nmodel.fit_generator(datagen,\n                    steps_per_epoch=len(train_images) \/ 32, epochs=10)","ebb12690":"predicitions=model.predict(test_images)\ndf_predicitions=pd.DataFrame({\"ImageId\":np.arange(1,len(predicitions)+1),\"Label\":predicitions.argmax(axis=1)})\n\n# create a link to download the dataframe which was saved with .to_csv method\ncreate_download_link(filename='submission.csv')","37a6e591":"for data_batch, labels_batch in datagen:\n    print('data batch shape:', data_batch.shape)\n    print('labels batch shape:', labels_batch.shape)\n    break\n    ","a3125c89":"history=model.fit_generator(datagen,epochs=10)","9d41337e":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\nnp.random.seed(2)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom keras.callbacks import ReduceLROnPlateau\n\nsns.set(style='white', context='notebook', palette='deep')\n","d77f3386":"train_file_name=\"\/kaggle\/input\/digit-recognizer\/train.csv\"\ntest_file_name=\"\/kaggle\/input\/digit-recognizer\/test.csv\"\n\ntrain=pd.read_csv(train_file_name)\ntest=pd.read_csv(test_file_name)\n\nY_train=train['label']\nX_train=train.drop(labels=['label'], axis=1)\n\ndel train\ng=sns.countplot(Y_train)\nY_train.value_counts()","530a7216":"X_train.isnull().any().describe()","263c323a":"test.isnull().any().describe()","0162f366":"X_train=X_train\/255.0\ntest=test\/255.0","1c8a23e9":"X_train=X_train.values.reshape(-1,28,28,1)\ntest=test.values.reshape(-1,28,28,1)\n","d8ed0a5c":"Y_train=to_categorical(Y_train, num_classes=10)","7ca6837d":"random_seed=2","040014de":"X_train, X_val, Y_train, Y_val=train_test_split(X_train, Y_train, test_size=0.1, random_state=random_seed)","06b635e0":"g=plt.imshow(X_train[0][:,:,0])","05f4aec1":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","899df865":"# Define the optimizer\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","538e5174":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","bf084353":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","67262a01":"epochs = 10 # Turn epochs to 30 to get 0.9967 accuracy\nbatch_size = 86","b4f977e6":"# With data augmentation to prevent overfitting (accuracy 0.99286)\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","a6b0bda6":"history = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","74c0967f":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","9617ab4f":"Y_train","264dca44":"## Learning from Yassine Ghouzam","852868e8":"## Making the predictions","5c158ec1":"## Fitting the Model","0e44af08":"## Attempt at augmenting the Data","9b723338":"## Imports","3cd0d200":"## 1. Data Import","bb69f9a2":"## Model Definition"}}