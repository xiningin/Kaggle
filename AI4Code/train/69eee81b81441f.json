{"cell_type":{"8fd14e35":"code","6102cb2f":"code","754362f4":"code","bcc3b812":"code","c88f4db8":"code","fe98b022":"code","f753afb9":"code","43f45c71":"code","89a0290e":"code","40655f3d":"code","63fd3ff8":"code","e7954220":"code","8d731092":"code","b46a75af":"code","3818f749":"code","96f8a77e":"code","bf168389":"code","d2facfac":"code","aa4e121c":"code","d0c67905":"code","fa3a76ec":"code","d762e37e":"code","a47fa035":"code","cb4d9925":"code","88f4e731":"code","961bede8":"code","5ea5314a":"code","7599da70":"code","be2f5b23":"code","7280a4a4":"code","1437b5cd":"markdown","0fef1be3":"markdown","7c47e438":"markdown","ecb9320e":"markdown","33481a0d":"markdown"},"source":{"8fd14e35":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6102cb2f":"import tensorflow as tf \nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras.layers import Dense, Activation\nfrom tensorflow.keras.layers import Input,Dropout,multiply,add,Concatenate,LayerNormalization\nfrom tensorflow.keras.optimizers import Adam\n\nfrom tensorflow.keras.models import Model\nfrom keras.utils import np_utils\n#to use csv\nimport pandas as pd\nimport re\n# to draw graph\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n","754362f4":"df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv', index_col=0)\ndf","bcc3b812":"#Standardization function\ndef Stand(d,df_d):\n    #Stand1\n    dmean=np.nanmean(df_d)\n    \n    #Stand2\n    d0=np.nan_to_num(df_d, nan=dmean)\n    \n    #Stand3\n    dstd=d0.std(axis=0)\n    \n    #Stand4\n    d=np.nan_to_num(d, nan=dmean)\n    \n    #Stand5\n    d= d-dmean\n    d=d\/dstd\n    return d","c88f4db8":"example_data=np.array([1,2,4,2,np.nan,8])\nprint(example_data)","fe98b022":"print(\"Calculating the average by np.mean\")\nprint(np.mean(example_data))","f753afb9":"print(\"Calculating the average by np.nanmean\")\nprint(np.nanmean(example_data))","43f45c71":"mean=np.nanmean(example_data)\nd0ex=np.nan_to_num(example_data, nan=mean)\nprint(d0ex)","89a0290e":"dstdex=d0ex.std(axis=0)\nprint(dstdex)","40655f3d":"input_data_ex=np.array([3,4,1,3,np.nan,4,7])\nprint(input_data_ex)\ndiex=np.nan_to_num(input_data_ex, nan=mean)\nprint(\"result : \"+str(diex))","63fd3ff8":"d= diex-mean\nd=d\/dstdex\nprint(d)","e7954220":"#Use normalization function\n\nGarageYrBlt=Stand(df['GarageYrBlt'].values,df['GarageYrBlt'].values)\nprint(GarageYrBlt)\n\nYearBuilt=Stand(df['YearBuilt'].values,df['YearBuilt'].values)\nprint(YearBuilt)\n\nSalePrice=Stand(df['SalePrice'].values,df['SalePrice'].values)","8d731092":"inptdata=pd.DataFrame({\"GarageYrBlt\":GarageYrBlt,\n                       \"YearBuilt\":YearBuilt,\n                       'SalePrice':SalePrice})\ninptdata","b46a75af":"#check null\ninptdata.isnull().sum()","3818f749":"X_data=np.stack([GarageYrBlt,\n                 YearBuilt], 1)\nX_data.shape","96f8a77e":"Y_data=SalePrice","bf168389":"X_train, X_test, Y_train, Y_test = train_test_split(X_data, Y_data,test_size = 0.1,random_state = 2)","d2facfac":"model = tf.keras.Sequential()\nmodel.add(Dense(1, kernel_initializer='uniform', input_shape=(2,)))\nmodel.add(Activation('relu'))\n\nopt = tf.keras.optimizers.Adam(learning_rate=0.01)\nmodel.compile(loss='mse', metrics=[tf.keras.metrics.mean_squared_error], optimizer=opt)\nmodel.summary()","aa4e121c":"history=model.fit(X_train,Y_train,        #training data\n          validation_data=(X_test,Y_test),#test data\n          epochs=100                    #Number of learning\n          )","d0c67905":"testdf = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv', index_col=0)\ntestdf","fa3a76ec":"testGarageYrBlt=Stand(testdf['GarageYrBlt'].values,df['GarageYrBlt'].values)\nprint(testGarageYrBlt)\n\ntestYearBuilt=Stand(testdf['YearBuilt'].values,df['YearBuilt'].values)\nprint(testYearBuilt)","d762e37e":"testinptdata=pd.DataFrame({\"GarageYrBlt\":testGarageYrBlt,\n                       \"YearBuilt\":testYearBuilt})\ntestinptdata","a47fa035":"#check null\ntestinptdata.isnull().sum()","cb4d9925":"testX_data=np.stack([testGarageYrBlt,\n                     testYearBuilt], 1)\ntestX_data.shape","88f4e731":"#prediction\npred=model.predict(testX_data)","961bede8":"#Output value conversion\nmean=df['SalePrice'].mean(axis=0)\nstd=df['SalePrice'].std(axis=0)\ntest_pred_data=(mean+(pred*std)).reshape(1459,)\n","5ea5314a":"#get submissionID\nsubdf = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nids = subdf['Id']","7599da70":"#create submisson csv\noutput = pd.DataFrame({ 'Id' : ids, 'SalePrice': test_pred_data })\noutput","be2f5b23":"#check null\noutput.isnull().sum()","7280a4a4":"# save csv\noutput.to_csv('submission0728.csv', index=False)","1437b5cd":"# Stand 4\nRemove null values in input data (change null values to average)","0fef1be3":"# About Standardization function\u3000<br>\n## Stand1\nCalculating the average of data (df_d) containing null values<br>","7c47e438":"## Stand3\nCalculation of standard deviation","ecb9320e":"# Stand5\nCalculation of standardization","33481a0d":"## Stand2\nRemove null values (change null values to average) <br>"}}