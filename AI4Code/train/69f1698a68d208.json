{"cell_type":{"0bb3e675":"code","3bfd7501":"code","00a907df":"code","9e56a565":"code","3cd9f235":"code","eb90e3d7":"code","9b2df906":"code","0a3a8836":"code","1b7a371f":"code","42c26a67":"code","09a1bdcc":"code","523c03f7":"code","07ff0963":"code","78cd1c14":"code","1c857807":"code","59f711ee":"code","762cb1bb":"code","364a538b":"code","661a569c":"code","87c41306":"code","e7546301":"code","abcaa2f6":"code","784ee8f0":"code","809d868f":"code","06721823":"code","2fc96cf2":"code","95c396ed":"code","75e429d0":"code","cfbd11ac":"code","e233b1b4":"code","6d6d40ca":"code","da05db37":"code","b8268ca3":"code","cc0d7f23":"code","ecea897a":"code","b35e624d":"code","2fa22487":"code","22c6066b":"code","c92502ec":"code","bd815336":"code","e655fd04":"code","0663574e":"markdown","be480096":"markdown","269b6d71":"markdown","44badd7f":"markdown","7613aaab":"markdown","789504b5":"markdown","8029d7f2":"markdown","c16be77d":"markdown","37ca11b5":"markdown","6209f628":"markdown","9c596f72":"markdown","05cd11c2":"markdown","b408d85b":"markdown","9be08bfa":"markdown","52b7db8c":"markdown"},"source":{"0bb3e675":"import pandas as pd\npd.set_option(\"display.max_columns\", 20)","3bfd7501":"movie = pd.read_csv(\"..\/input\/movielens-20m-dataset\/movie.csv\")\nmovie.shape","00a907df":"rating = pd.read_csv(\"..\/input\/movielens-20m-dataset\/rating.csv\")\nrating.shape","9e56a565":"df = movie.merge(rating, how=\"left\", on=\"movieId\")\ndf.head","3cd9f235":"df.shape","eb90e3d7":"df[\"title\"].nunique()","9b2df906":"df[\"title\"].value_counts().head()","0a3a8836":"comment_counts = pd.DataFrame(df[\"title\"].value_counts())\nrare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index #We impose a limitation because the number of comments is high.\ncomment_movies = df[~df[\"title\"].isin(rare_movies)] #I brought the most","1b7a371f":"comment_movies.shape","42c26a67":"comment_movies[\"title\"].nunique()","09a1bdcc":"user_movie_df = comment_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\nuser_movie_df.shape","523c03f7":"user_movie_df.head","07ff0963":"user_movie_df.columns\nlen(user_movie_df.columns)","78cd1c14":"comment_movies[\"title\"].nunique()","1c857807":"random_user = int(pd.Series(user_movie_df.index).sample(1, random_state=45).values)\nrandom_user_df = user_movie_df[user_movie_df.index == random_user]","59f711ee":"#Let's look at the movies watched by the user we have chosen:\n\nmovies_watched = random_user_df.columns[random_user_df.notna().any()].tolist()\n\n#means movies watched by non-nan users","762cb1bb":"len(movies_watched)","364a538b":"user_movie_df.loc[user_movie_df.index == random_user, user_movie_df.columns ==\"Jurassic Park (1993)\"]","661a569c":"pd.set_option(\"display.max_columns\", 5)\nmovies_watched_df = user_movie_df[movies_watched]","87c41306":"movies_watched_df.head","e7546301":"movies_watched_df.shape","abcaa2f6":"user_movie_count = movies_watched_df.T.notnull().sum()","784ee8f0":"user_movie_count=user_movie_count.reset_index()\nuser_movie_count.columns = [\"userId\", \"movie_count\"]","809d868f":"user_movie_count[user_movie_count[\"movie_count\"]>20].sort_values(\"movie_count\", ascending=False)\nuser_movie_count[user_movie_count[\"movie_count\"] == len(movies_watched)].count()","06721823":"perc = len(movies_watched)*60\/100\nperc","2fc96cf2":"#person ids who watched 60% of the same movie as the user\nusers_same_movies = user_movie_count[user_movie_count[\"movie_count\"] > perc][\"userId\"]\nusers_same_movies.count()","95c396ed":"final_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(users_same_movies.index)],random_user_df[movies_watched]])\nfinal_df.shape","75e429d0":"final_df.T.corr()","cfbd11ac":"corr_df = final_df.T.corr().unstack().sort_values().drop_duplicates()\ncorr_df=pd.DataFrame(corr_df, columns=[\"corr\"])\ncorr_df.index.names=[\"user_id_1\", \"user_id_2\"]\ncorr_df = corr_df.reset_index()\n\n#user 1 user, 2 other users","e233b1b4":"# Let's take a look at those that have a 65% correlation with the user:\ntop_users = corr_df[(corr_df[\"user_id_1\"] == random_user) & (corr_df[\"corr\"] >= 0.65)][[\"user_id_2\", \"corr\"]].reset_index(drop=True)","6d6d40ca":"# Let's take a look at the ones with the least correlation with #user:\ntop_users = top_users.sort_values(by=\"corr\", ascending=False)","da05db37":"top_users.rename(columns={\"user_id_2\":\"userId\"}, inplace=True)","b8268ca3":"rating = pd.read_csv(\"..\/input\/movielens-20m-dataset\/rating.csv\")\ntop_users_ratings = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]], how=\"inner\")","cc0d7f23":"top_users_ratings[\"weighted_rating\"] = top_users_ratings[\"corr\"] * top_users_ratings[\"rating\"]","ecea897a":"top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})#singularization by movies","b35e624d":"recommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\nrecommendation_df = recommendation_df.reset_index()","2fa22487":"movies_to_be_recommend = recommendation_df[recommendation_df[\"weighted_rating\"] > 4].sort_values(\"weighted_rating\", ascending=False)","22c6066b":"movies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]])[\"title\"].head()","c92502ec":"user = 28941\nmovie = pd.read_csv(\"..\/input\/movielens-20m-dataset\/movie.csv\")\nrating = pd.read_csv(\"..\/input\/movielens-20m-dataset\/rating.csv\")","bd815336":"movie_id = rating[(rating[\"userId\"] == user) & (rating[\"rating\"] == 5.0)].sort_values(by=\"timestamp\", ascending = False)[\"movieId\"][0:1].values[0]","e655fd04":"movie_name = movie[movie[\"movieId\"] == movie_id][\"title\"].values[0]\nmovie_name = user_movie_df[movie_name]\nmovies_from_item_based = user_movie_df.corrwith(movie_name).sort_values(ascending=False)\nmovies_from_item_based[1:6].index","0663574e":"# 5 \u00f6neri item-based","be480096":"# Hybrid Recommender System","269b6d71":"# Hellooooo, I \u2764\ufe0f VBO\n\n* I will explain my Hybrid Recommender System project in my weekly assignments in order to turn it into a contribution for you.","44badd7f":"# Variables:\n\n![image.png](attachment:bd5ccb35-73f6-44c0-bdfa-372a887e711c.png)\n","7613aaab":"# TASK 4:\n\nIdentify the users who are most similar to the user to be suggested.","789504b5":"# Business Problem:\n\nEstimate using the item-based and user-based recommender methods for the user whose ID is given.","8029d7f2":"# 5 \u00f6neri user-based:","c16be77d":"# TASK 1:\n\nPerform the Data Preparation operations.","37ca11b5":"# Project Steps","6209f628":"# TASK 6\n\nMake an item-based suggestion based on the name of the movie that the user has watched with the highest score.\n\n> 5 recommendations user-based\n> 5 suggestions item-based\n> Make 10 suggestions.","9c596f72":"# TASK 2:\n\nDetermine the movies watched by the user to be recommended.\n\nLet's proceed with a #random user.","05cd11c2":"# TASK 5\n\nCalculate the Weighted Average Recommendation Score and keep the first 5 movies.","b408d85b":"# TASK 3:\n\nAccess data and Ids of other users watching the same movies.","9be08bfa":"![image.png](attachment:e5019ab6-4cdd-42cc-8ed3-e7f44978ac01.png)!","52b7db8c":"# Dataset Story:\n\nThe dataset was provided by MovieLens, a movie recommendation service.\n\nIt contains the rating scores for these movies along with the movies.\n\nIt contains 2,000,0263 ratings across 27,278 movies.\n\nThis data was provided by 138,493 users from January 09, 1995 to March 31, 2015.\nwas created between This data set was created on October 17, 2016.\n\nUsers are randomly selected. It is known that all selected users voted for at least 20 movies."}}