{"cell_type":{"24f4bb1d":"code","5be558f9":"code","0729190d":"code","4af6930f":"code","2f7c9d3a":"code","5ea508db":"code","2e46767d":"code","46f29d67":"code","c3f14b8f":"code","bd3fe755":"code","51535867":"code","3c457655":"code","0306db40":"code","654e98d0":"code","de5c3a45":"code","646c638f":"code","600c4e76":"code","514e6b50":"code","6b6cf55d":"code","5eabc154":"code","a3de9976":"code","99e4af77":"code","f2100627":"code","c790f99d":"code","25f47503":"code","12166af0":"code","89fceae4":"code","2b83ac66":"code","379b789e":"code","3fd109f2":"code","d45804c0":"code","ed591883":"code","9a206c95":"code","09f8f69f":"code","93e68362":"code","8c70e4b3":"code","d9156f74":"code","92003cdd":"code","3db7b5c1":"code","785892a4":"markdown","2ab604ba":"markdown","2ea37021":"markdown","9b9fd9eb":"markdown"},"source":{"24f4bb1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5be558f9":"pd.options.display.max_rows = 30","0729190d":"test_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")","4af6930f":"print(f\"test shape = {test_df.shape}\")","2f7c9d3a":"print(f\"train shape = {train_df.shape}\")","5ea508db":"train_df.sample()","2e46767d":"test_df.sample()","46f29d67":"train_df.describe()","c3f14b8f":"train_df['Cabin'].value_counts(dropna=False)","bd3fe755":"train_df.loc[train_df['Cabin'] == 'B96 B98']","51535867":"train_df['Pclass'].value_counts()","3c457655":"train_df['sex_input'] = train_df['Sex'].apply(lambda x: 0 if x == 'male' else 1)\ntest_df['sex_input'] = test_df['Sex'].apply(lambda x: 0 if x == 'male' else 1)","0306db40":"train_df['Cabin'].fillna('', inplace=True)\ntest_df['Cabin'].fillna('', inplace=True)","654e98d0":"train_df['Embarked'].fillna('', inplace=True)\ntest_df['Embarked'].fillna('', inplace=True)","de5c3a45":"train_df['Age'].value_counts(dropna=False)","646c638f":"average_age = pd.concat([train_df, test_df], axis=0)['Age'].mean()\ntrain_df['Age'].fillna(average_age, inplace=True)\ntest_df['Age'].fillna(average_age, inplace=True)","600c4e76":"from sklearn.preprocessing import OneHotEncoder","514e6b50":"one_hot_encoder = OneHotEncoder(sparse=False, handle_unknown='ignore')\none_hot_encoder = one_hot_encoder.fit(train_df.loc[:, ['Cabin', 'Embarked']].values)","6b6cf55d":"c_e_x = one_hot_encoder.transform(train_df.loc[:, ['Cabin', 'Embarked']].values)","5eabc154":"sex_x = train_df.loc[:, ['sex_input']].values","a3de9976":"age_x = train_df.loc[:, ['Age']].values","99e4af77":"input_x = np.concatenate((age_x, sex_x, c_e_x), axis=1)\ninput_y = train_df['Survived'].tolist()","f2100627":"train_df.head(2)","c790f99d":"len(input_y)","25f47503":"from sklearn.model_selection import train_test_split","12166af0":"train_x, val_x, train_y, val_y = train_test_split(input_x, input_y, test_size=0.8, stratify=input_y)","89fceae4":"len(train_x) == len(train_y)\ntrain_x","2b83ac66":"## inference on test set\n\ntest_c_e_x = one_hot_encoder.transform(test_df.loc[:, ['Cabin', 'Embarked']].values)\ntest_input = np.concatenate((test_df.loc[:, ['Age']].values, test_df.loc[:, ['sex_input']].values, test_c_e_x), axis=1)\n","379b789e":"# from sklearn.linear_model import LogisticRegression\n\n# model = LogisticRegression(random_state=0).fit(train_x, train_y)\n\n# train_score = model.score(train_x, train_y)\n\n# val_score = model.score(val_x, val_y)\n\n\n# len(test_input[0]) == len(train_x[0])\n\n# test_preds = model.predict(test_input)\n# test_df['Survived'] = test_preds\n# test_df.loc[:, ['PassengerId', 'Survived']].to_csv(\"submission.csv\", index=False)","3fd109f2":"import xgboost as xgb","d45804c0":"train_xgb = xgb.DMatrix(train_x, train_y)\nval_xgb = xgb.DMatrix(val_x, val_y)","ed591883":"param = {'max_depth':4, 'eta':.3, 'objective':'binary:logistic', 'eval_metric': 'logloss'}\nnum_round = 10","9a206c95":"bst = xgb.train(param, train_xgb, 100, early_stopping_rounds=5, evals=[(val_xgb, 'test')], verbose_eval=True)\n# bst = xgb.train(param, train_xgb, num_round)","09f8f69f":"bst.best_ntree_limit ","93e68362":"bst","8c70e4b3":"test_xgb = xgb.DMatrix(test_input)","d9156f74":"test_preds = bst.predict(test_xgb, ntree_limit=bst.best_ntree_limit)","92003cdd":"test_preds = [0 if a < 0.5 else 1 for a in test_preds]","3db7b5c1":"test_df['Survived'] = test_preds\ntest_df.loc[:, ['PassengerId', 'Survived']].to_csv(\"submission.csv\", index=False)","785892a4":"## XGBoost","2ab604ba":"## create input for 'sex', 'age', 'Cabin' and 'Embarked' columns","2ea37021":"## Feature engineering","9b9fd9eb":"## Logistic Regression"}}