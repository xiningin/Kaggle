{"cell_type":{"e45e2097":"code","14be55c7":"code","e8e8029b":"code","dee817ac":"code","a0f11049":"code","e67323c8":"code","c9f667bf":"code","56bdf837":"code","e20952d4":"code","a6ed2777":"code","252b8077":"code","dea2e502":"code","627be85f":"code","4e73ea83":"code","f07d8f96":"code","1c872f61":"code","5441fb22":"code","66a417d5":"code","a5b074bc":"code","3cbfeb79":"code","11579844":"code","6d5b24c3":"code","929711cb":"code","bd2c034b":"code","a74912c3":"code","8d32d45c":"code","4dbf89ed":"code","c88a3afc":"code","e4be680a":"code","3e10eff1":"code","737cfd6d":"code","181dd6fa":"code","b03d6d13":"code","03c12282":"code","bb6de9f8":"code","3b96d6dc":"code","f5a6f79d":"code","93403814":"code","d0814c86":"code","aed9d47f":"code","c3346621":"code","d5828619":"code","15741129":"code","ca550de1":"code","09dbc3de":"code","273c54ac":"code","a614fafd":"code","ee4daba6":"code","8bbf2431":"code","ecef6763":"code","8505c8ba":"code","1b8b23ad":"code","72552da8":"markdown","6ebc74bb":"markdown","d25e910a":"markdown","a467ed61":"markdown","4a2e95e1":"markdown","74f91d98":"markdown","6aba1bd3":"markdown","77ad6a32":"markdown","190fbbfd":"markdown","f2a27577":"markdown","9205ea3b":"markdown","ffb079c9":"markdown","d015b428":"markdown","1bbbcd0a":"markdown","8097f171":"markdown","d8dc9f3e":"markdown","425f4ea6":"markdown","79537240":"markdown"},"source":{"e45e2097":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","14be55c7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","e8e8029b":"test_titanic = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain_titanic = pd.read_csv('..\/input\/titanic\/train.csv')\nsubmission_titanic = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","dee817ac":"test_titanic.head().style.background_gradient(cmap='PuBu')","a0f11049":"train_titanic.head().style.background_gradient(cmap='PuBu')","e67323c8":"train_titanic = pd.get_dummies(train_titanic, columns=['Embarked'])","c9f667bf":"train_titanic.head()","56bdf837":"test_titanic = pd.get_dummies(test_titanic, columns=['Embarked'])","e20952d4":"test_titanic.head()","a6ed2777":"train_titanic.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)","252b8077":"test_titanic.drop(['Name', 'Ticket', 'Cabin'], axis=1)","dea2e502":"train_titanic['family_size'] = train_titanic['SibSp'] + train_titanic['Parch'] + 1","627be85f":"train_titanic.head()","4e73ea83":"train_titanic[['family_size', 'Survived']].groupby(['family_size'], as_index=False).mean().sort_values(by='Survived', ascending=False)","f07d8f96":"test_titanic['family_size'] = test_titanic['SibSp'] + test_titanic['Parch'] + 1","1c872f61":"test_titanic['family_size'] = train_titanic['SibSp'] + train_titanic['Parch'] + 1","5441fb22":"train_titanic.head()","66a417d5":"train_titanic['Sex'].replace(['male', 'female'], [1, 0], inplace=True)\ntest_titanic['Sex'].replace(['male', 'female'], [1, 0], inplace=True)","a5b074bc":"train_titanic.shape","3cbfeb79":"train_titanic.isnull().sum()","11579844":"test_titanic.isnull().sum()","6d5b24c3":"train_titanic['Age'].fillna(round(train_titanic['Age'].mean()), inplace=True)\ntest_titanic['Age'].fillna(round(test_titanic['Age'].mean()), inplace=True)\ntest_titanic['Fare'].fillna(round(test_titanic['Fare'].mean()), inplace=True)\n","929711cb":"train_titanic.isnull().sum()","bd2c034b":"test_titanic.isnull().sum()","a74912c3":"train_titanic['AgeBand'] = pd.cut(train_titanic['Age'], 5)\ntrain_titanic[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","8d32d45c":"train_titanic.loc[train_titanic['Age'] <= 16, 'Age'] = 0\ntrain_titanic.loc[(train_titanic['Age'] > 16) & (train_titanic['Age'] <= 32), 'Age'] = 1\ntrain_titanic.loc[(train_titanic['Age'] > 32) & (train_titanic['Age'] <= 48), 'Age'] = 2\ntrain_titanic.loc[(train_titanic['Age'] > 48) & (train_titanic['Age'] <= 64), 'Age'] = 3\ntrain_titanic.loc[(train_titanic['Age'] > 64) & (train_titanic['Age'] <= 80), 'Age'] = 4","4dbf89ed":"test_titanic.loc[test_titanic['Age'] <= 16, 'Age'] = 0\ntest_titanic.loc[(test_titanic['Age'] > 16) & (test_titanic['Age'] <= 32), 'Age'] = 1\ntest_titanic.loc[(test_titanic['Age'] > 32) & (test_titanic['Age'] <= 48), 'Age'] = 2\ntest_titanic.loc[(train_titanic['Age'] > 48) & (test_titanic['Age'] <= 64), 'Age'] = 3\ntest_titanic.loc[(train_titanic['Age'] > 64) & (test_titanic['Age'] <= 80), 'Age'] = 4","c88a3afc":"train_titanic[['Age', 'Survived']].groupby(['Age'], as_index=False).mean().sort_values(by='Age', ascending=True).style.background_gradient(cmap='PuBu')","e4be680a":"train_titanic.loc[train_titanic['Fare'] <= 10, 'Fare'] = 0\ntrain_titanic.loc[(train_titanic['Fare'] > 10) & (train_titanic['Fare'] <= 75), 'Fare'] = 1\ntrain_titanic.loc[(train_titanic['Fare'] > 75, 'Fare')] = 2","3e10eff1":"test_titanic.loc[test_titanic['Fare'] <= 10, 'Fare'] = 0\ntest_titanic.loc[(test_titanic['Fare'] > 10) & (test_titanic['Fare'] <= 75), 'Fare'] = 1\ntest_titanic.loc[(test_titanic['Fare'] > 75, 'Fare')] = 2","737cfd6d":"train_titanic.head()","181dd6fa":"features_titanic = ['Pclass', 'Sex', 'Age', 'Fare', 'Embarked_C', 'Embarked_Q', 'Embarked_S', 'family_size']\nx = train_titanic[features_titanic]\nx_test = test_titanic[features_titanic]","b03d6d13":"y = train_titanic['Survived']","03c12282":"x.head().style.background_gradient(cmap='PuBu')","bb6de9f8":"x_test.head()","3b96d6dc":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix","f5a6f79d":"titanic_models_accuracy = {}\ncv = KFold(n_splits=15, random_state=13, shuffle=True)","93403814":"model = LogisticRegression(solver='liblinear')\nscores = cross_val_score(model, x, y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(scores)\navg_score = np.round(scores.mean()*100,2)\ntitanic_models_accuracy['Logistic Regression'] = avg_score\nprint(\"Mean of scores = \", avg_score)","d0814c86":"model = SVC(decision_function_shape='ovr')\nscores = cross_val_score(model, x, y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(scores)\navg_score = np.round(scores.mean()*100,2)\ntitanic_models_accuracy['SVM'] = avg_score\nprint(\"Mean of scores = {}\".format(np.round(scores.mean()*100, 2)))","aed9d47f":"model = KNeighborsClassifier(n_neighbors=3)\nscores = cross_val_score(model, x, y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(scores)\navg_score = np.round(scores.mean()*100,2)\ntitanic_models_accuracy['KNN'] = avg_score\nprint(\"Mean of scores = {}\".format(np.round(scores.mean()*100, 2)))","c3346621":"model = DecisionTreeClassifier()\nscores = cross_val_score(model, x, y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(scores)\navg_score = np.round(scores.mean()*100,2)\ntitanic_models_accuracy['Decision Tree Classifier'] = avg_score\nprint(\"Mean of scores = {}\".format(np.round(scores.mean()*100, 2)))","d5828619":"model = GaussianNB()\nscores = cross_val_score(model, x, y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(scores)\navg_score = np.round(scores.mean()*100,2)\ntitanic_models_accuracy['Decision Tree Classifier'] = avg_score\nprint(\"Mean of scores = {}\".format(np.round(scores.mean()*100, 2)))","15741129":"model = RandomForestClassifier(n_estimators=80)\nscores = cross_val_score(model, x, y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(scores)\navg_score = np.round(scores.mean()*100,2)\ntitanic_models_accuracy['Random Forest Classifier'] = avg_score\nprint(\"Mean of scores = {}\".format(np.round(scores.mean()*100, 2)))","ca550de1":"model = AdaBoostClassifier()\nscores = cross_val_score(model, x, y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(scores)\navg_score = np.round(scores.mean()*100,2)\ntitanic_models_accuracy['Ada Boost Classifier'] = avg_score\nprint(\"Mean of scores = {}\".format(np.round(scores.mean()*100, 2)))","09dbc3de":"model = GradientBoostingClassifier(n_estimators=40)\nscores = cross_val_score(model, x, y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(scores)\navg_score = np.round(scores.mean()*100,2)\ntitanic_models_accuracy['Gradient Boost Classifier'] = avg_score\nprint(\"Mean of scores = {}\".format(np.round(scores.mean()*100, 2)))","273c54ac":"titanic_models_accuracy","a614fafd":"main_Model = GradientBoostingClassifier(n_estimators=40)\nmain_Model.fit(x, y)\n\nprediction_titanic = main_Model.predict(x_test)","ee4daba6":"prediction_titanic","8bbf2431":"y_prediction = pd.DataFrame([submission_titanic['PassengerId'] ,prediction_titanic], index=['PassengerId', 'Survived'])","ecef6763":"y_prediction","8505c8ba":"y_prediction = y_prediction.T","1b8b23ad":"y_prediction.to_csv('Submission_titanic.csv', index=False)","72552da8":"# Random Forest Classifier","6ebc74bb":"# Ada Boost Classifier","d25e910a":"# Feature Selection","a467ed61":"# Data Analysis and Feature Engineering","4a2e95e1":"# Decision Tree Classifier","74f91d98":"# Import libraries","6aba1bd3":"# Choosing Gradient Boosting as a Main Model","77ad6a32":"# Logistic Regression","190fbbfd":"# SVM","f2a27577":"# Thank you!!\nI have just started. So, please comment what I can improve and make it more accurate.","9205ea3b":"# Import dataset","ffb079c9":"# Titanic Survival Prediction\nThe Titanic Ship was the largest and the luxurious ship in the world. But unfortunately, it sunk on its maiden voyage. While there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.","d015b428":"# Training Data on different Algorithm & Checking Accuracy","1bbbcd0a":"# Modeling","8097f171":"# KNN","d8dc9f3e":"# Gaussian Naive Bayes","425f4ea6":"We are going to use classification algorithms, as we need to classify whether a passenger survived or not.\n\nUsed algorithms:\n- Logistic Regression\n- Support Vector Machines\n- K-Nearest Neighbours\n- Decision Tree Classifier\n- Random Forest Classifier\n- Gradient Boosting Classifier\n- Gaussian Naive Bayes\n- Ada Boost Classifier","79537240":"# Gradient Boosting Classifier"}}