{"cell_type":{"95e99bd1":"code","6b7f4e85":"code","d752df55":"code","1c64295a":"code","a099b9fd":"code","822ab2ce":"code","452aca35":"code","2d3a74e9":"code","c88f5bad":"code","c2866c54":"code","0a923a98":"code","bbbae014":"code","c63545bd":"code","7c007c56":"markdown","84942da0":"markdown","bfbc981d":"markdown","be64d6c1":"markdown","db3c493a":"markdown","02c7326d":"markdown","49851917":"markdown","26fa5a43":"markdown","6365bac9":"markdown","96899e7d":"markdown","dc1a9fe0":"markdown"},"source":{"95e99bd1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6b7f4e85":"import torch\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ntorch.manual_seed(1)\ndevice = torch.device('cuda')","d752df55":"train = pd.read_csv('\/kaggle\/input\/taxi\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/taxi\/test.csv')","1c64295a":"cab_type = {\"Uber\":0, \"Lyft\":1}\n\ntrain['cab_type']= train['cab_type'].map(cab_type)\ntest['cab_type']= test['cab_type'].map(cab_type)","a099b9fd":"summary_mapping = {\" Clear \":0,\" Drizzle \":1,\" Foggy \":2,\" Light Rain \":3,\" Mostly Cloudy \":4,\" Overcast \":5,\" Partly Cloudy \":6,\" Possible Drizzle \":7,\" Rain \":8}\n\ntrain['short_summary'] = train['short_summary'].map(summary_mapping)\ntest['short_summary'] = test['short_summary'].map(summary_mapping)","822ab2ce":"icon_mapping = {\" clear-day \":0,\" clear-night \":1,\" cloudy \":2,\" fog \":3,\" partly-cloudy-day \":4,\" partly-cloudy-night \":5,\" rain \":6}\n\ntrain['icon'] = train['icon'].map(icon_mapping)\ntest['icon'] = test['icon'].map(icon_mapping)","452aca35":"train.info()","2d3a74e9":"x_data = train.loc[0:,\"cab_type\":\"precipIntensityMax\"]\ny_data = train.loc[0:,\"price\"]\n\nx_data = np.array(x_data)\ny_data = np.array(y_data)\nscaler = MinMaxScaler()\n\nx_data = scaler.fit_transform(x_data)\nx_train = torch.FloatTensor(x_data).to(device)\ny_train = torch.FloatTensor(y_data).to(device).reshape(-1,1)\n\nprint(x_train[:5])\nprint(x_train.shape)\nprint(y_train[:5])\nprint(y_train.shape)","c88f5bad":"x_test = test.loc[0:,\"cab_type\":]\nx_test = np.array(x_test)\nx_test = scaler.transform(x_test)\nx_test = torch.FloatTensor(x_test).to(device)\n\nx_test[:3]","c2866c54":"W = torch.zeros((19,1),requires_grad=True,device = device)\nb = torch.zeros(1,requires_grad=True,device = device)\n\noptimizer = optim.Adam([W, b],lr = 5*1e-3)\n\nnb_epochs = 20000\n\nfor epoch in range(nb_epochs + 1):\n\n  hypo = x_train.matmul(W)+b\n\n  #cost = F.mse_loss(hypo,y_train)\n  cost = torch.mean((hypo-y_train)**2)\n  \n  optimizer.zero_grad()\n  cost.backward()\n  optimizer.step()\n\n\n  if epoch % 2000 == 0:\n    print('epoch {:4d}\/{} Cost : {:.6f}'.format(\n        epoch, nb_epochs, cost.item()\n    ))\n  \nprint(W)\nprint(b)","0a923a98":"predict = x_test.matmul(W)+b\npredict = predict.cpu() \npredict[:3]","bbbae014":"form = pd.read_csv('\/kaggle\/input\/taxi\/submission_form.csv')\nform[:5]","c63545bd":"for i in range(len(x_test)):\n  predict[i] = predict[i]\n  form['price'][i] = predict[i]\n\nform[:5]","7c007c56":"## \ubaa8\ub378\ud559\uc2b5","84942da0":"## \ub370\uc774\ud130 \ub85c\ub4dc","bfbc981d":"- test data","be64d6c1":"### \ubb38\uc790\ub85c \ub418\uc5b4 \uc788\ub294 \ub370\uc774\ud130 \uc22b\uc790\ub85c \ub9e4\ud551","db3c493a":"## \uc81c\ucd9c","02c7326d":"- \uc591\uc2dd\uc5d0 \ub9de\ucdb0\uc11c \uac12 \ub123\uc5b4\uc8fc\uae30","49851917":"\uc815\ud615 \ub370\uc774\ud130\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \uacb0\uacfc \uac12","26fa5a43":"## \uacb0\uacfc\uac12 \uc608\uce21","6365bac9":"## \ub370\uc774\ud130 \ud30c\uc2f1","96899e7d":"## \ubaa8\ub4c8 \uc784\ud3ec\ud2b8","dc1a9fe0":"- train data"}}