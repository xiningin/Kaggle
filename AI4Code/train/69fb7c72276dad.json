{"cell_type":{"e9009cb3":"code","0bcd35b8":"code","17563159":"code","cbf45a82":"code","f945aea4":"code","b6808dc4":"code","b2c4ffab":"code","89d0f9b1":"code","9f7bf27d":"code","a5f7140f":"code","212e459b":"code","475e64ec":"code","825f25d8":"code","794434a9":"code","771a917f":"code","e5178c6e":"code","4bac272a":"code","d7d65e98":"code","3f868c01":"code","27ccd27a":"code","f08b701e":"code","23a24a44":"code","6dfad74d":"code","4668b036":"code","b51dce72":"markdown","fb9c71ac":"markdown","3a282ed4":"markdown","30522359":"markdown","f7293dc9":"markdown","a50a89ec":"markdown","9ed07043":"markdown","d6d6f02c":"markdown","64f06de1":"markdown","cb0458b8":"markdown","82bf6142":"markdown"},"source":{"e9009cb3":"# import library\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport math\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM, SimpleRNN\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.metrics import mean_squared_error\nfrom keras.layers import Dropout, Flatten\nimport os\nprint(os.listdir(\"..\/input\"))","0bcd35b8":"# import data\ndata = pd.read_csv('..\/input\/international-airline-passengers.csv',skipfooter=5, engine='python')\ndata.head()","17563159":"# data plotting\ndataset = data.iloc[:,1].values\nplt.plot(dataset)\nplt.xlabel(\"time\")\nplt.ylabel(\"Number of Passenger\")\nplt.title(\"international airline passenger\")\nplt.show()","cbf45a82":"# data shape (142,), reshape (142,1) \ndataset = dataset.reshape(-1,1,)\ndataset = dataset.astype(\"float32\")\ndataset.shape","f945aea4":"scaler = MinMaxScaler(feature_range=(0, 1))\ndataset = scaler.fit_transform(dataset)","b6808dc4":"train_size = int(len(dataset) * 0.50)\ntest_size = len(dataset) - train_size\ntrain = dataset[0:train_size,:]\ntest = dataset[train_size:len(dataset),:]\nprint(\"train size: {}, test size: {} \".format(len(train), len(test)))","b2c4ffab":"time_stemp = 10\ndataX = []\ndataY = []\nfor i in range(len(train)-time_stemp-1):\n    a = train[i:(i+time_stemp), 0]\n    dataX.append(a)\n    dataY.append(train[i + time_stemp, 0])\ntrainX = np.array(dataX)\ntrainY = np.array(dataY)","89d0f9b1":"dataX = []\ndataY = []\nfor i in range(len(test)-time_stemp-1):\n    a = test[i:(i+time_stemp), 0]\n    dataX.append(a)\n    dataY.append(test[i + time_stemp, 0])\ntestX = np.array(dataX)\ntestY = np.array(dataY)","9f7bf27d":"trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))","a5f7140f":"model_lstm = Sequential()\nmodel_lstm.add(LSTM(100,return_sequences=True,input_shape=(1, time_stemp) ))\nmodel_lstm.add(Dropout(0.2))\nmodel_lstm.add(LSTM(80, return_sequences=True))\nmodel_lstm.add(Dropout(0.2))\nmodel_lstm.add(LSTM(50))\nmodel_lstm.add(Dropout(0.2))\nmodel_lstm.add(Dense(1))\nmodel_lstm.compile(loss='mean_squared_error', optimizer = 'adam')\nmodel_lstm.fit(trainX, trainY, epochs = 250, batch_size = 32)","212e459b":"trainPredict = model_lstm.predict(trainX)\ntestPredict = model_lstm.predict(testX)\n\ntrainPredict = scaler.inverse_transform(trainPredict)\ntrainY = scaler.inverse_transform([trainY])\n\ntestPredict = scaler.inverse_transform(testPredict)\ntestY = scaler.inverse_transform([testY])\n\ntrainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\n\ntestScore = math.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\nprint('Test Score: %.2f RMSE' % (testScore))","475e64ec":"trainPredictPlot = np.empty_like(dataset)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[time_stemp:len(trainPredict)+time_stemp, :] = trainPredict\n\ntestPredictPlot = np.empty_like(dataset)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(trainPredict)+(time_stemp*2)+1:len(dataset)-1, :] = testPredict\n\nplt.plot(scaler.inverse_transform(dataset))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","825f25d8":"data = pd.read_csv('..\/input\/international-airline-passengers.csv',skipfooter=5, engine='python')\ndata.head()","794434a9":"dataset = data.iloc[:,1].values\nplt.plot(dataset)\nplt.xlabel(\"time\")\nplt.ylabel(\"Number of Passenger\")\nplt.title(\"international airline passenger\")\nplt.show()","771a917f":"dataset = dataset.reshape(-1,1)\ndataset = dataset.astype(\"float32\")\nprint(dataset.shape)","e5178c6e":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range = (0, 1))\ndataset_scaled = scaler.fit_transform(dataset)\n#print(dataset_scaled)","4bac272a":"plt.plot(dataset_scaled)\nplt.show()","d7d65e98":"train_size = int(len(dataset_scaled) * 0.60)\ntest_size = len(dataset_scaled) - train_size\ntrain = dataset_scaled[0:train_size,:]\ntest = dataset_scaled[train_size:len(dataset_scaled),:]\nprint(\"train size: {}, test size: {} \".format(len(train), len(test)))","3f868c01":"time_stemp = 10\ndataX = []\ndataY = []\nfor i in range(len(train)-time_stemp-1):\n    a = train[i:(i+time_stemp), 0]\n    dataX.append(a)\n    dataY.append(train[i + time_stemp, 0])\ntrainX = np.array(dataX)\ntrainY = np.array(dataY)  \ntrainX.shape","27ccd27a":"dataX = []\ndataY = []\nfor i in range(len(test)-time_stemp-1):\n    a = test[i:(i+time_stemp), 0]\n    dataX.append(a)\n    dataY.append(test[i + time_stemp, 0])\ntestX = np.array(dataX)\ntestY = np.array(dataY) \ntestX.shape","f08b701e":"trainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1], 1))\ntestX = np.reshape(testX, (testX.shape[0], testX.shape[1], 1))\nprint('shape of trainX: ', trainX.shape)\nprint('shape of testX: ', testX.shape)","23a24a44":"model_rnn = Sequential()\n\nmodel_rnn.add(SimpleRNN(units = 100, activation = 'relu', return_sequences = True, input_shape = (trainX.shape[1], 1)))\nmodel_rnn.add(Dropout(0.25))\n\nmodel_rnn.add(SimpleRNN(units = 70, activation = 'relu', return_sequences = True))\nmodel_rnn.add(Dropout(0.25))\n\nmodel_rnn.add(SimpleRNN(units = 60, activation = 'relu', return_sequences = True))\nmodel_rnn.add(Dropout(0.25))\n\nmodel_rnn.add(SimpleRNN(units = 30, activation = 'relu', return_sequences = True))\nmodel_rnn.add(Dropout(0.25))\n\nmodel_rnn.add(SimpleRNN(units = 20))\nmodel_rnn.add(Dropout(0.25))\nmodel_rnn.add(Dense(units = 1))\n\nmodel_rnn.compile(optimizer = 'adam', loss = 'mean_squared_error')\nmodel_rnn.fit(trainX, trainY, epochs = 250, batch_size = 32)","6dfad74d":"trainPredict = model_rnn.predict(trainX)\ntestPredict = model_rnn.predict(testX)\n# invert predictions\ntrainPredict = scaler.inverse_transform(trainPredict)\ntrainY = scaler.inverse_transform([trainY])\ntestPredict = scaler.inverse_transform(testPredict)\ntestY = scaler.inverse_transform([testY])\n# calculate root mean squared error\n\ntrainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\nprint('Test Score: %.2f RMSE' % (testScore))","4668b036":"trainPredictPlot = np.empty_like(dataset)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[time_stemp:len(trainPredict)+time_stemp, :] = trainPredict\n\ntestPredictPlot = np.empty_like(dataset)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(trainPredict)+(time_stemp*2)+1:len(dataset)-1, :] = testPredict\n\nplt.plot(scaler.inverse_transform(dataset_scaled), color='b')\nplt.plot(trainPredictPlot, color='r')\nplt.plot(testPredictPlot, color='g')\nplt.show()","b51dce72":"* We create training and test data.","fb9c71ac":"# Content\n* Introduction\n* Import Library\n* Load Data\n* Lstm\n* Rnn\n* Conclusion","3a282ed4":"* Reduce the values between o and 1.\n* In this way, we normalize the data and provide ease of operation.","30522359":"* We plot the results.","f7293dc9":"### Introduction\n* I try my first Recurrent Neural Network.\n* This work is a step towards my goal of becoming an artificial intelligence developer.\n* With the data before, I've also trained and tested with the models I created with simple rnn.\n* I wish good readings. See you below to evaluate the results.","a50a89ec":"* Rnn model create","9ed07043":"* Our training and test data are divided into x and y.","d6d6f02c":"* We build our LSTM model.","64f06de1":"* We reshape our data for the Keras library.","cb0458b8":"* We are testing the model with the test data.\n* We return the data back to its actual values.\n* We print the mean squared error rate of our estimates with training and test data.","82bf6142":"### Conclusion\n* My first rnn try.\n* I got better results than simple rnn with lstm.\n* Your comments are very important to me.\n* Thank you for reading my notebook and for comments."}}