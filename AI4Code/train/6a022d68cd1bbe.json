{"cell_type":{"275a65a0":"code","6b9557fd":"code","3124565f":"code","0a45a93a":"code","9e592297":"code","7a9f757d":"code","478ae89e":"code","c8d9684e":"code","7ccdd4d7":"code","aaef5878":"markdown","b0e8fc4c":"markdown","bbae81c1":"markdown"},"source":{"275a65a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6b9557fd":"from bs4 import BeautifulSoup\nimport requests\nimport time\nimport random as ran\nimport sys\nimport requests","3124565f":"url = 'https:\/\/www.durianproperty.com.my\/buy\/search\/?keyword=&city=&propertytype=&minprice=&maxprice=&minbedroom=&maxbedroom=&minbath=&maxbath=&minsize=&maxsize=&mincarpark=&maxcarpark=&dateposted=&funishingtype=&tenure=&onlywithphoto=0&bllat=&bllong=&trlat&trlong=&sortby=&pg=2'\nheaders = {'User-agent': 'Mozilla\/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/87.0.4280.88 Safari\/537.36'}\n\nsource = requests.get(url, headers = headers).text\nrequests.get(url).status_code","0a45a93a":"soup = BeautifulSoup(source, 'html.parser')","9e592297":"data_block = []\ndata_block = soup.findAll('div',{'class' : 'clearfix buy-cla-ad'})\n\nprint(len(data_block))","7a9f757d":"name = data_block[0].find('a').get_text()\n\nname_split = name.split('-')\nhouse_type = name_split[1]\nhouse_address = name_split[0]\n\nhouse_location = house_address.split(',')[0]\nhouse_city = house_address.split(',')[1]\n\nprint('House Type :', house_type)\nprint('House Address :', house_address)\nprint('House Location :', house_location)\nprint('House City :', house_city)\n\ndate = data_block[0].find('span').get_text()\nprint('Date :', date)\n\nprice = data_block[0].find('label',{'class':'price clearfix'}).find_next('a').get_text()\nprint('Price :', price)\n\nsize_price = data_block[0].find('label',{'class':'price clearfix'}).find_next('span').find_next('span').get_text()\nprint('Price Size :', size_price)\n\nbedroom = data_block[0].find('div', {'class':'clearfix bb-det mar-bot-15'}).find_next('label',{'class' : 'pull-left'}).get_text()\nprint('Bedroom :', bedroom)\n\nbathroom = data_block[0].find('div', {'class':'clearfix bb-det mar-bot-15'}).find_next('label',{'class' : 'pull-left'}).find_next('label',{'class' : 'pull-left'}).get_text()\nprint('Bathroom :', bathroom)\n\nparking = data_block[0].find('div', {'class':'clearfix bb-det mar-bot-15'}).find_next('label',{'class' : 'pull-left'}).find_next('label',{'class' : 'pull-left'}).find_next('label',{'class' : 'pull-left'}).get_text()\nprint('Parking :', parking)\n\nsize = data_block[0].find('div',{'class': 'clearfix cla-det'}).find_next('div', {'class' : 'clearfix cla-det-line'}).find_next('p',{'class':'clearfix'}).find_next('label').find_next('label').find_next('label').get_text()\nprint('Size :', size)\n\nfurnish = data_block[0].find('div',{'class': 'clearfix cla-det'}).find_next('div', {'class' : 'clearfix cla-det-line'}).find_next('div', {'class' : 'clearfix cla-det-line'}).find_next('label').find_next('label').find_next('label').get_text()\nprint('Furnish :', furnish)","478ae89e":"# durianproperty.com.my has 960 active pages\n\npageToGet = 960\n\nhouse_types = []\nhouse_addresses = []\nhouse_locations = []\nhouse_cities = []\ndates = []\nprices = []\nsize_prices = []\nbedrooms = []\nbathrooms = []\nparkings = []\nsizes = []\nfurnishes = []\n\n#durian property seems like having an error for its page 1, so had to start with page 2\n\nfor page in range(2,pageToGet):\n    print('Currently scraping page :',page , '| Remaining = ', pageToGet-page)\n    url = 'https:\/\/www.durianproperty.com.my\/buy\/search\/?keyword=&city=&propertytype=&minprice=&maxprice=&minbedroom=&maxbedroom=&minbath=&maxbath=&minsize=&maxsize=&mincarpark=&maxcarpark=&dateposted=&funishingtype=&tenure=&onlywithphoto=0&bllat=&bllong=&trlat&trlong=&sortby=&pg='+str(page)\n    headers = {'User-agent': 'Mozilla\/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/87.0.4280.88 Safari\/537.36'}\n    source = requests.get(url, headers = headers).text\n    \n    time.sleep(1)\n    \n    soup = BeautifulSoup(source, 'html.parser')\n    \n    data_block = []\n    data_block = soup.findAll('div',{'class' : 'clearfix buy-cla-ad'})\n    \n    for i in range(len(data_block)):\n        \n        try:\n            name = data_block[i-1].find('a').get_text()\n\n            name_split = name.split('-')\n        \n            house_type = name_split[1]\n            house_types.append(house_type)\n        \n            house_address = name_split[0]\n            house_addresses.append(house_address)\n\n            house_location = house_address.split(',')[0]\n            house_locations.append(house_location)\n        \n            house_city = house_address.split(',')[1]\n            house_cities.append(house_city)\n        except:\n            pass\n\n        try:\n            date = data_block[i-1].find('span').get_text()\n            dates.append(date)\n        except:\n            pass\n        \n        try:\n            price = data_block[i-1].find('label',{'class':'price clearfix'}).find_next('a').get_text()\n            prices.append(price)\n        except:\n            pass\n        \n        try:\n            size_price = data_block[i-1].find('label',{'class':'price clearfix'}).find_next('span').find_next('span').get_text()\n            size_prices.append(size_price)\n        except:\n            pass\n        \n        try:\n            bedroom = data_block[i-1].find('div', {'class':'clearfix bb-det mar-bot-15'}).find_next('label',{'class' : 'pull-left'}).get_text()\n            bedrooms.append(bedroom)\n        except:\n            pass\n        \n        try:\n            bathroom = data_block[i-1].find('div', {'class':'clearfix bb-det mar-bot-15'}).find_next('label',{'class' : 'pull-left'}).find_next('label',{'class' : 'pull-left'}).get_text()\n            bathrooms.append(bathroom)\n        except:\n            pass\n        \n        try:\n            parking = data_block[i-1].find('div', {'class':'clearfix bb-det mar-bot-15'}).find_next('label',{'class' : 'pull-left'}).find_next('label',{'class' : 'pull-left'}).find_next('label',{'class' : 'pull-left'}).get_text()\n            parkings.append(parking)\n        except:\n            pass\n        \n        try:\n            size = data_block[i-1].find('div',{'class': 'clearfix cla-det'}).find_next('div', {'class' : 'clearfix cla-det-line'}).find_next('p',{'class':'clearfix'}).find_next('label').find_next('label').find_next('label').get_text()\n            sizes.append(size)\n        except:\n            pass\n        \n        try:\n            furnish = data_block[i-1].find('div',{'class': 'clearfix cla-det'}).find_next('div', {'class' : 'clearfix cla-det-line'}).find_next('div', {'class' : 'clearfix cla-det-line'}).find_next('label').find_next('label').find_next('label').get_text()\n            furnishes.append(furnish)\n        except:\n            pass\n        \nprint('Done! Total pages scraped : ', page)\n\ndf = pd.DataFrame([house_types,house_addresses,house_locations,house_cities,dates,prices,size_prices,bedrooms,bathrooms,parkings,sizes,furnishes]).transpose()      \n    ","c8d9684e":"df.tail()","7ccdd4d7":"dfnew = df.rename(columns={0:'Type',1:'Address',2:'Location',3:'City',4:'Date',5:'Price',6:'PSF (RM)',7:'Bedroom',8:'Bathroom',9:'Parking',10:'BuiltUp',11:'Furnish'})\ndfnew.head(22449)","aaef5878":"Try extracting data from the data block","b0e8fc4c":"Since all data can be extract. Lets work on scraping data from the next index in data block, and next page too.","bbae81c1":"Those data seems a bit wrong somewhere. the first data that **return none** in either any of the data, the following data[index] after will return none. this does not make any sense. the code is alright.\n\nIs it because of the loop ? once the line of the code return as pass, the rest of the loop will return as pass too for that particular line ? this is defying the meaning of the loop. since the code itself is inside the loop not outside of the loop.\n\nLets try with seperate function for these scraping\n\nI will do it in another seperate notebook; [Learn Scrape Durianproperty function style](https:\/\/www.kaggle.com\/arifaimanisa\/learn-scrape-durianproperty-function-style) "}}