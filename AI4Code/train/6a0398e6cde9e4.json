{"cell_type":{"a669cb9c":"code","f1ecd6b9":"code","e3de5f62":"code","73a4efed":"code","1a05f5a6":"code","fbd40539":"code","3b12c292":"code","8b52dda1":"code","9923c8ea":"code","dba5e8f8":"code","496f1497":"code","905492ff":"code","b9fa3017":"code","69a60c73":"code","775631fb":"code","66015707":"code","2349eb04":"code","8a564fea":"code","4f1ef61d":"code","19703c3d":"code","96b03214":"code","81a72857":"code","c28d4d37":"code","4b706f78":"code","791b7842":"code","c458b9ea":"code","25d1367b":"code","806babae":"code","ef9e446c":"code","9d6daf7b":"code","c86eaa82":"code","57f9369d":"code","e39d3350":"code","31d620be":"code","9d3778df":"markdown","95dd932b":"markdown","97b9eb65":"markdown","be113595":"markdown","ba585c7f":"markdown","ad879400":"markdown","5a77c95a":"markdown","224c7b98":"markdown","36fb7000":"markdown","95877bad":"markdown","cbe6862c":"markdown"},"source":{"a669cb9c":"import matplotlib.pyplot as plt # Bibilioteca util para criar gr\u00e1ficos\nimport pandas as pd # Bibilioteca para auxiliar a importar e maniular nossos dataframes\nfrom sklearn.tree import DecisionTreeClassifier #respons\u00e1vel pela gera\u00e7\u00e3o do modelo \nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nimport numpy as np # Bibilioteca \u00fatil para realizar opera\u00e7\u00f5es matem\u00e1ticas\nimport seaborn as sns # Bibilioteca utilizada para dar um toque especial nos gr\u00e1ficos\n#import chardet   #Trabalha com leitura de arquivos, acredito que n ser\u00e1 necess\u00e1rio utiliza=l\u00e1\nplt.style.use('ggplot') #Customiza\u00e7\u00e3o de gr\u00e1ficos\nplt.style.use(\"seaborn-white\")\nimport os\nfrom mpl_toolkits.mplot3d import Axes3D\n\nimport random\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f1ecd6b9":"movies = pd.read_csv('..\/input\/movie.csv')\nratings = pd.read_csv('..\/input\/rating.csv')\n\nmovies.sort_values(by='movieId', inplace=True)\nmovies.reset_index(inplace=True, drop=True)\nratings.sort_values(by='movieId', inplace=True)\nratings.reset_index(inplace=True, drop=True)","e3de5f62":"#Dimens\u00e3o  datasets\nprint(\"Dimens\u00e3o  dataset de movies\")\nprint(\"Colunas:\", movies.shape[1],\"\\nLinhas:\", movies.shape[0])\nprint(\"-\")\nprint(\"Dimens\u00e3o  dataset de ratings\")\nprint(\"Colunas:\", ratings.shape[1],\"\\nLinhas:\", ratings.shape[0])","73a4efed":"#Verificando os primeiros registros do conjunto de dados\nmovies.head()","1a05f5a6":"ratings.head()","fbd40539":"ratings.dtypes","3b12c292":"movies.dtypes","8b52dda1":"ratings.info()","9923c8ea":"ratings.skew()","dba5e8f8":"movies.skew()","496f1497":"# Dividindo o t\u00edtulo e o ano de lan\u00e7amento em colunas separadas no dataframe de filmes\n#Convertertendo ano para timestamp.\n\nmovies['year'] = movies.title.str.extract(\"\\((\\d{4})\\)\", expand=True)\nmovies.year = pd.to_datetime(movies.year, format='%Y')\nmovies.year = movies.year.dt.year\nmovies.title = movies.title.str[:-7]","905492ff":"#f,ax = plt.subplots(figsize=(10,8))\n#sns.heatmap(ratings.corr(), annot=True, linewidths=.7, fmt= '.2f',ax=ax)\n#plt.show()","b9fa3017":"#categorizando os g\u00eaneros de filmes corretamente. \n#Trabalhar mais tarde com + 20MM de linhas de strings consome muito recurso\ngenres_unique = pd.DataFrame(movies.genres.str.split('|').tolist()).stack().unique()\ngenres_unique = pd.DataFrame(genres_unique, columns=['genre']) \nmovies = movies.join(movies.genres.str.get_dummies().astype(bool))\nmovies.drop('genres', inplace=True, axis=1)","69a60c73":"genres_unique","775631fb":"movies.head()","66015707":"# Modificando o formato do registro de data e hora da avalia\u00e7\u00e3o\nratings.timestamp = pd.to_datetime(ratings.timestamp, infer_datetime_format=True)\nratings.timestamp = ratings.timestamp.dt.year","2349eb04":"ratings['timestamp'].unique()","8a564fea":"sns.heatmap(movies.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","4f1ef61d":"#Contando valores nulos\nmovies.isnull().sum().sort_values(ascending=False).head(10)","19703c3d":"sns.heatmap(ratings.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","96b03214":"#contando valores nulos\nratings.isnull().sum().sort_values(ascending=False).head(10)","81a72857":"# Removendo valores nulos do datasets movies\nmovies.dropna(inplace=True)","c28d4d37":"movies.isnull().sum().sort_values(ascending=False).head(10)","4b706f78":"#df_mv_year = movies.groupby('movieId')['year']","791b7842":"dftmp = movies[['movieId', 'year']].groupby('year')\n\nfig, ax1 = plt.subplots(figsize=(15,8))\nax1.plot(dftmp.year.first(), dftmp.movieId.nunique(), \"b\")\nax1.grid(False)\n\ndftmp = ratings[['rating', 'timestamp']].groupby('timestamp')\nax2 = ax1.twinx() #Plotando os dados de avalia\u00e7\u00f5es no eixo\nax2.plot(dftmp.timestamp.first(), dftmp.rating.count(), \"r\")\nax2.grid(False)\n\nax1.set_xlabel('Ano')\nax1.set_ylabel('N\u00famero de filmes liberados'); ax2.set_ylabel('N\u00famero de avalia\u00e7\u00f5es')\nplt.title('Filmes por ano')\nplt.show()","c458b9ea":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","25d1367b":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","806babae":"#Distribui\u00e7\u00e3o dos dados de avalia\u00e7\u00e3o e ano\nplotPerColumnDistribution(ratings, 10, 5)","ef9e446c":"ratings.columns","9d6daf7b":"#Quantidade de usu\u00e1rios\nratings['userId'].count()","c86eaa82":"ratings.groupby('timestamp')['userId'].count()","57f9369d":"#Quantidade de usu\u00e1rios registrados por ano\nratings.groupby('timestamp')['userId'].count().plot(figsize=(15,8), color=\"g\")\nplt.ylabel(\"Qtd de usu\u00e1rios\")\nplt.xlabel(\"Ano\")\nplt.title(\"Contagem de usu\u00e1rios por ano\")\nplt.show()","e39d3350":"plt.figure(figsize=(10,5))\ndftmp = movies[['movieId', 'year']].groupby('year')\ndf = pd.DataFrame({'All_movies' : dftmp.movieId.nunique().cumsum()})\n\n#Histograma para cada g\u00eanero individual\nfor genre in genres_unique.genre:\n    dftmp = movies[movies[genre]][['movieId', 'year']].groupby('year')\n    df[genre]=dftmp.movieId.nunique().cumsum()\ndf.fillna(method='ffill', inplace=True)\ndf.loc[:,df.columns!='All_movies'].plot.area(stacked=True, figsize=(15,8))\n\n# Histograma de plotagem para todos os filmes\nplt.plot(df['All_movies'], marker='o', markerfacecolor='black')\nplt.xlabel('Ano')\nplt.ylabel('Acumulativo de filmes por g\u00eanero')\nplt.title('Total de filmes por g\u00eanero') # Many movies have multiple genres, so counthere is higher than number of movies\nplt.legend(loc=(1.05,0), ncol=2)\nplt.show()\n\n#  dispers\u00e3o simples do n\u00famero de filmes marcados com cada g\u00eanero\nplt.figure(figsize=(15,8))\nbarlist = df.iloc[-1].sort_values().plot.bar()\nbarlist.patches[0].set_color('b')\nplt.xticks(rotation='vertical')\nplt.title('Filmes por g\u00eanero')\nplt.xlabel('G\u00eanero')\nplt.ylabel('N\u00famero de filmes')\nplt.show()","31d620be":"dftmp = ratings[['movieId','rating']].groupby('movieId').mean()\n\n# inicializando uma lista vazia para capturar estat\u00edsticas b\u00e1sicas por g\u00eanero\nrating_stats = []\n# Histograma geral do lote de todas as classifica\u00e7\u00f5es\ndftmp.hist(bins=25, grid=False, edgecolor='b', normed=True, label ='All genres', figsize=(15,8))\n\n# Histograma com linhas kde para melhor visibilidade por g\u00eanero\nfor genre in genres_unique.genre:\n    dftmp = movies[movies[genre]==True]\n    dftmp = ratings[ratings.set_index('movieId').index.isin(dftmp.set_index('movieId').index)]\n    dftmp = dftmp[['movieId','rating']].groupby('movieId').mean()\n    dftmp.rating.plot(grid=False, alpha=0.6, kind='kde', label=genre)\n    avg = dftmp.rating.mean()\n    std = dftmp.rating.std()\n    rating_stats.append((genre, avg, std))\nplt.legend(loc=(1.05,0), ncol=2)\nplt.xlim(0,5)\nplt.xlabel('Avalia\u00e7\u00f5es')\nplt.ylabel('Densidade')\nplt.title('Histograma de avalia\u00e7\u00e3o de filmes')\nplt.show()","9d3778df":"# Importando os dados","95dd932b":"# **3. An\u00e1lise explor\u00e1toria**","97b9eb65":"## ** An\u00e1lise explor\u00e1toria dos dados obtidos em ratings de filmes**\n![Iesb](https:\/\/logo.clearbit.com\/iesb.br)\n\n> Stable benchmark dataset. 20 million ratings and 465,000 tag applications applied to 27,000 movies by 138,000 users. Includes tag genome data with 12 million relevance scores across 1,100 tags. Released 4\/2015; updated 10\/2016 to update links.csv and add tag genome data.  [MovieLens 20m Dataset Oficial](https:\/\/grouplens.org\/datasets\/movielens\/20m\/)\n \n \n ## ** Objetivo**\n > Realizar an\u00e1lise descritiva e explor\u00e1toria dos dados \n \n ## **Etapas**\n1. Conhecendo as vari\u00e1veis\n1. An\u00e1lise explorat\u00f3ria\n1. Visualizando e tratando valores nulos (Data Cleaning)\n1. One hot encoding (tratando tipo de dados)\n1. Criando um modelo de machine learning\n1. Conclus\u00e3o","be113595":"# Importando bibiliotecas","ba585c7f":"# N\u00famero acumulado de filmes, no total e por g\u00eanero.\n> Em m\u00e9dia, os filmes s\u00e3o categorizados em 2 g\u00eaneros (ou seja, o n\u00famero de filmes-g\u00eaneros  dobra o n\u00famero de filmes). Com\u00e9dia e Drama  s\u00e3o os principais g\u00eaneros.","ad879400":"## Limpando registros vazios","5a77c95a":"# **1. Conhecendo as vari\u00e1veis**","224c7b98":"## **2. Visualizando e tratando valores nulos (Data Cleaning)**","36fb7000":"## Calculando a simetria dos dados\n> Um valor zero indica uma distribui\u00e7\u00e3o sim\u00e9trica, um valor maior que zero ou menor indica uma distribui\u00e7\u00e3o assim\u00e9trica.","95877bad":"# N\u00famero de filmes e classifica\u00e7\u00f5es por ano\n\n> N\u00famero de filmes lan\u00e7ados por ano aumentou  quase exponencialmente at\u00e9 2009, depois diminuiu significativamente em 2014 (os dados de 2015 est\u00e3o incompletos).  Nenhuma avalia\u00e7\u00e3o antes de 1995, provavelmente relacionada \u00e0 disponibilidade da Internet para o p\u00fablico em geral.","cbe6862c":"# Informa\u00e7\u00f5es a respeito das vari\u00e1veis\n[Content and Use of Files](http:\/\/files.grouplens.org\/datasets\/movielens\/ml-20m-README.html)"}}