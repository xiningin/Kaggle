{"cell_type":{"22fd46ba":"code","c6ea6ab7":"code","2ef6c874":"code","8bb89ef1":"code","dee7dd6f":"code","3f29221b":"code","e5a090a5":"code","6bf1547d":"code","5e0243bf":"code","cff5f441":"code","3cadfe61":"code","56dc4763":"code","1d26e2c0":"code","dc5fc8c4":"code","dffad957":"code","2c79e2f7":"code","bbfe0e76":"code","0760ca8a":"code","55b6b901":"code","f49e16a0":"code","dc0d0cf1":"code","6e625456":"code","e1cc13e0":"code","da15b43f":"code","d2e2b70c":"code","cb4c93ee":"code","2269e0cf":"code","fc08967f":"code","10becb76":"code","0a56303d":"code","5ab8ee7f":"code","162f3685":"code","f793e013":"code","3779f1a6":"code","cdb1b57a":"code","23256a36":"code","6c86819d":"code","f7e724d5":"code","2a994d59":"code","80fb075f":"code","6341ff40":"code","4fe76bb4":"code","416c7253":"code","ce6cb489":"code","2e8a1067":"code","0806a957":"code","179ba5c1":"code","52f266ca":"code","f382ca48":"code","222fd954":"code","bbd13de4":"code","f4b58849":"code","35e3d215":"code","cfbb472a":"code","188e6eaa":"code","2d6b562f":"code","71524230":"code","a790828b":"code","ccd99d96":"code","1f420eea":"code","0c50586e":"code","cc799eb5":"code","29a287cb":"code","1bea2b39":"code","b610acfb":"code","5e5fd8d4":"code","4f8f81b2":"code","247c75fc":"code","70e5fd80":"code","159f0df8":"code","27db0f14":"code","0472aa84":"code","1763cbf7":"code","76c32922":"code","2c23ef8b":"code","c81f17a3":"code","58313727":"code","adc81db8":"code","00393249":"code","92d6dee9":"code","b6b8adb4":"code","24f1d1d8":"code","e5f0a390":"code","35b81555":"markdown","58acbf88":"markdown","0b29b2fd":"markdown"},"source":{"22fd46ba":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c6ea6ab7":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nsample_sub = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","2ef6c874":"train.head(10)","8bb89ef1":"train.columns","dee7dd6f":"test.head(10)","3f29221b":"train.shape","e5a090a5":"train.info()","6bf1547d":"train.isnull().sum()","5e0243bf":"test.info()","cff5f441":"test.isnull().sum()","3cadfe61":"train['MSZoning'].value_counts()","56dc4763":"sns.heatmap(train.isnull(),yticklabels = False, cbar= False)","1d26e2c0":"# Filling missing value\ntrain['LotFrontage'] = train['LotFrontage'].fillna(train['LotFrontage'].mean())","dc5fc8c4":"train.drop(['Alley'], axis=1, inplace=True)","dffad957":"train['BsmtQual'] = train['BsmtQual'].fillna(train['BsmtQual'].mode()[0])\ntrain['BsmtCond'] = train['BsmtCond'].fillna(train['BsmtCond'].mode()[0])","2c79e2f7":"train['FireplaceQu'] = train['FireplaceQu'].fillna(train['FireplaceQu'].mode()[0])\ntrain['GarageType'] = train['GarageType'].fillna(train['GarageType'].mode()[0])","bbfe0e76":"train.drop(['GarageYrBlt'], axis = 1, inplace=True)","0760ca8a":"train['GarageFinish'] = train['GarageFinish'].fillna(train['GarageFinish'].mode()[0])\ntrain['GarageQual'] = train['GarageQual'].fillna(train['GarageQual'].mode()[0])\ntrain['GarageCond'] = train['GarageCond'].fillna(train['GarageCond'].mode()[0])","55b6b901":"train.drop(['PoolQC', 'Fence', 'MiscFeature'], axis=1, inplace= True)","f49e16a0":"train.shape","dc0d0cf1":"test.shape","6e625456":"train.drop(['Id'], axis=1, inplace=True)","e1cc13e0":"train.isnull().sum()","da15b43f":"train['MasVnrType']=train['MasVnrType'].fillna(train['MasVnrType'].mode()[0])\ntrain['MasVnrArea']=train['MasVnrArea'].fillna(train['MasVnrArea'].mode()[0])","d2e2b70c":"sns.heatmap(train.isnull(), yticklabels=False, cbar=False, cmap='coolwarm')","cb4c93ee":"train['BsmtExposure'] = train['BsmtExposure'].fillna(train['BsmtExposure'].mode()[0])","2269e0cf":"sns.heatmap(train.isnull(), yticklabels=False, cbar=False, cmap='YlGnBu')","fc08967f":"train['BsmtFinType2'] = train['BsmtFinType2'].fillna(train['BsmtFinType2'].mode()[0])","10becb76":"train.dropna(inplace=True)","0a56303d":"train.shape","5ab8ee7f":"test.head()","162f3685":"#check null values\ntest.isnull().sum()","f793e013":"## Fill Missing Values\n\ntest['LotFrontage']=test['LotFrontage'].fillna(test['LotFrontage'].mean())\n\ntest['MSZoning']=test['MSZoning'].fillna(test['MSZoning'].mode()[0])","3779f1a6":"test.shape","cdb1b57a":"test.drop(['Alley'],axis=1,inplace=True)","23256a36":"test.shape","6c86819d":"test['BsmtCond']=test['BsmtCond'].fillna(test['BsmtCond'].mode()[0])\ntest['BsmtQual']=test['BsmtQual'].fillna(test['BsmtQual'].mode()[0])\ntest['FireplaceQu']=test['FireplaceQu'].fillna(test['FireplaceQu'].mode()[0])\ntest['GarageType']=test['GarageType'].fillna(test['GarageType'].mode()[0])","f7e724d5":"\ntest.drop(['GarageYrBlt'],axis=1,inplace=True)","2a994d59":"test.shape","80fb075f":"test['GarageFinish']=test['GarageFinish'].fillna(test['GarageFinish'].mode()[0])\ntest['GarageQual']=test['GarageQual'].fillna(test['GarageQual'].mode()[0])\ntest['GarageCond']=test['GarageCond'].fillna(test['GarageCond'].mode()[0])\n\ntest.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)","6341ff40":"test.shape","4fe76bb4":"test.drop(['Id'],axis=1,inplace=True)","416c7253":"test['MasVnrType']=test['MasVnrType'].fillna(test['MasVnrType'].mode()[0])\ntest['MasVnrArea']=test['MasVnrArea'].fillna(test['MasVnrArea'].mode()[0])","ce6cb489":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","2e8a1067":"test['BsmtExposure']=test['BsmtExposure'].fillna(test['BsmtExposure'].mode()[0])","0806a957":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","179ba5c1":"test['BsmtFinType2']=test['BsmtFinType2'].fillna(test['BsmtFinType2'].mode()[0])","52f266ca":"test.loc[:, test.isnull().any()].head()","f382ca48":"test['Utilities']=test['Utilities'].fillna(test['Utilities'].mode()[0])\ntest['Exterior1st']=test['Exterior1st'].fillna(test['Exterior1st'].mode()[0])\ntest['Exterior2nd']=test['Exterior2nd'].fillna(test['Exterior2nd'].mode()[0])\ntest['BsmtFinType1']=test['BsmtFinType1'].fillna(test['BsmtFinType1'].mode()[0])\ntest['BsmtFinSF1']=test['BsmtFinSF1'].fillna(test['BsmtFinSF1'].mean())\ntest['BsmtFinSF2']=test['BsmtFinSF2'].fillna(test['BsmtFinSF2'].mean())\ntest['BsmtUnfSF']=test['BsmtUnfSF'].fillna(test['BsmtUnfSF'].mean())\ntest['TotalBsmtSF']=test['TotalBsmtSF'].fillna(test['TotalBsmtSF'].mean())\ntest['BsmtFullBath']=test['BsmtFullBath'].fillna(test['BsmtFullBath'].mode()[0])\ntest['BsmtHalfBath']=test['BsmtHalfBath'].fillna(test['BsmtHalfBath'].mode()[0])\ntest['KitchenQual']=test['KitchenQual'].fillna(test['KitchenQual'].mode()[0])\ntest['Functional']=test['Functional'].fillna(test['Functional'].mode()[0])\ntest['GarageCars']=test['GarageCars'].fillna(test['GarageCars'].mean())\ntest['GarageArea']=test['GarageArea'].fillna(test['GarageArea'].mean())\ntest['SaleType']=test['SaleType'].fillna(test['SaleType'].mode()[0])","222fd954":"test.shape","bbd13de4":"columns = ['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2','BldgType','HouseStyle', 'SaleType',\n          'SaleCondition', 'ExterCond',\n          'ExterQual', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu','GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive' \n        ]","f4b58849":"len(columns)","35e3d215":"# Csonverting Categorical Features into dummy variables\ndef category_onehot_multcols(multcolumns):\n    train_final = final_train\n    i=0\n    for fields in multcolumns:\n        print(fields)\n        train1 = pd.get_dummies(final_train[fields], drop_first=True)\n        \n        final_train.drop([fields],axis=1, inplace=True)\n        if i==0:\n            train_final = train1.copy()\n        else:\n            \n            train_final = pd.concat([train_final, train1], axis=1)\n        i=i+1 \n        \n    train_final = pd.concat([final_train, train_final], axis = 1)\n    \n    return train_final\n    \n        ","cfbb472a":"main_train = train.copy","188e6eaa":"\ntest.shape","2d6b562f":"test.head()","71524230":"final_train = pd.concat([train,test], axis = 0)","a790828b":"final_train['SalePrice']","ccd99d96":"final_train.shape","1f420eea":"final_train= category_onehot_multcols(columns)","0c50586e":"final_train = final_train.loc[:, ~final_train.columns.duplicated()]","cc799eb5":"final_train.shape\n","29a287cb":"train_df = final_train.iloc[:1422,:]\ntest_df = final_train.iloc[1422:,:]","1bea2b39":"train_df.head()","b610acfb":"test_df.head()","5e5fd8d4":"train_df.shape","4f8f81b2":"test_df.drop(['SalePrice'],axis=1, inplace = True)","247c75fc":"X_train = train_df.drop(['SalePrice'],axis=1)\ny_train = train_df['SalePrice']","70e5fd80":"test_df.head()","159f0df8":"import xgboost\nclassifier=xgboost.XGBRegressor()","27db0f14":"import xgboost\nregressor=xgboost.XGBRegressor()","0472aa84":"booster=['gbtree','gblinear']\nbase_score=[0.25,0.5,0.75,1]","1763cbf7":"# Hyper Parameter Optimization\n\nn_estimators = [100, 500, 900, 1100, 1500]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }","76c32922":"# Set up the random search with 4-fold cross validation\nfrom sklearn.model_selection import RandomizedSearchCV\nrandom_cv = RandomizedSearchCV(estimator=regressor,\n            param_distributions=hyperparameter_grid,\n            cv=5, n_iter=50,\n            scoring = 'neg_mean_absolute_error',n_jobs = 4,\n            verbose = 5, \n            return_train_score = True,\n            random_state=42)","2c23ef8b":"random_cv.fit(X_train, y_train)","c81f17a3":"random_cv.best_estimator_","58313727":"regressor=xgboost.XGBRegressor(base_score=0.25, booster='gbtree', colsample_bylevel=1,\n       colsample_bytree=1, gamma=0, learning_rate=0.1, max_delta_step=0,\n       max_depth=2, min_child_weight=1, missing=None, n_estimators=900,\n       n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n       silent=True, subsample=1)","adc81db8":"regressor.fit(X_train,y_train)","00393249":"import pickle\nfilename = 'finalized_model.pkl'\npickle.dump(classifier, open(filename, 'wb'))","92d6dee9":"y_pred = regressor.predict(test_df)","b6b8adb4":"y_pred","24f1d1d8":"rf_pred = regressor.predict(test_df)","e5f0a390":"# create sample submission file and submit\nprep = pd.DataFrame(y_pred)\nsub_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ndatasets = pd.concat([sub_df['Id'],prep], axis=1)\ndatasets.columns = ['Id', 'SalePrice']\ndatasets.to_csv('sample_submission.csv', index=False)","35b81555":"### Handle Categorical Feature","58acbf88":"## Handle Test Data set","0b29b2fd":"## Algorithm"}}