{"cell_type":{"a6f77a7e":"code","6dabd50e":"code","59774c8a":"code","fb72327a":"code","61698847":"code","c91ddeac":"code","4c470ad1":"code","f78edf6d":"code","e1464291":"code","dfd1c3c8":"code","ecd7a09c":"code","aefda357":"code","28b2e961":"code","9b0f1894":"code","25b72f7e":"markdown"},"source":{"a6f77a7e":"import os\nimport numpy as np\nimport pandas as pd\nfrom shutil import copyfile","6dabd50e":"os.mkdir('.\/images\/')\nalpha = 'a'\nfor i in range(0, 26): \n    os.mkdir('.\/images\/' + alpha)\n    alpha = chr(ord(alpha) + 1)\n\nrootdir = '\/kaggle\/input\/braille-character-dataset\/Braille Dataset\/Braille Dataset\/'\nfor file in os.listdir(rootdir):\n    letter = file[0]\n    copyfile(rootdir+file, '.\/images\/' + letter + '\/' + file)","59774c8a":"from keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(rotation_range=20,\n                             shear_range=10,\n                             validation_split=0.2)\n\ntrain_generator = datagen.flow_from_directory('.\/images\/',\n                                              target_size=(28,28),\n                                              subset='training')\n\nval_generator = datagen.flow_from_directory('.\/images\/',\n                                            target_size=(28,28),\n                                            subset='validation')","fb72327a":"from keras import backend as K\nfrom keras import layers as L\nfrom keras.models import Model,load_model\nfrom keras.regularizers import l2\nfrom keras.callbacks import ModelCheckpoint,ReduceLROnPlateau,EarlyStopping\n\nK.clear_session()\n\nmodel_ckpt = ModelCheckpoint('BrailleNet.h5',save_best_only=True)\nreduce_lr = ReduceLROnPlateau(patience=8,verbose=0)\nearly_stop = EarlyStopping(patience=15,verbose=1)\n\nentry = L.Input(shape=(28,28,3))\nx = L.SeparableConv2D(64,(3,3),activation='relu')(entry)\nx = L.MaxPooling2D((2,2))(x)\nx = L.SeparableConv2D(128,(3,3),activation='relu')(x)\nx = L.MaxPooling2D((2,2))(x)\nx = L.SeparableConv2D(256,(2,2),activation='relu')(x)\nx = L.GlobalMaxPooling2D()(x)\nx = L.Dense(256)(x)\nx = L.LeakyReLU()(x)\nx = L.Dense(64,kernel_regularizer=l2(2e-4))(x)\nx = L.LeakyReLU()(x)\nx = L.Dense(26,activation='softmax')(x)\n\nmodel = Model(entry,x)\nmodel.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n\nhistory = model.fit_generator(train_generator,\n                              validation_data=val_generator,\n                              epochs=666,\n                              callbacks=[model_ckpt,reduce_lr,early_stop],\n                              verbose=1)","61698847":"model.summary()","c91ddeac":"model = load_model('BrailleNet.h5')\nacc = model.evaluate_generator(val_generator)[1]\nprint('model accuracy: {}'.format(round(acc,4)))","4c470ad1":"import matplotlib.pyplot as plt\nplt.plot(history.history['loss'], label='train loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(history.history['accuracy'], label='train acc')\nplt.plot(history.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","f78edf6d":"pred = model.predict(val_generator)\npred","e1464291":"from tensorflow.keras.preprocessing import image\nimg=image.load_img('\/kaggle\/input\/braille-character-dataset\/Braille Dataset\/Braille Dataset\/a1.JPG0dim.jpg')","dfd1c3c8":"plt.imshow(img)","ecd7a09c":"x=image.img_to_array(img)\nx","aefda357":"x.shape","28b2e961":"x=np.expand_dims(x,axis=0)\nmodel.predict(x)","9b0f1894":"a=np.argmax(model.predict(x), axis=1)\na","25b72f7e":"# Braille Classifier"}}