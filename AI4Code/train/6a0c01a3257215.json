{"cell_type":{"58d55a33":"code","da248af5":"code","3fabae98":"code","692a1f5c":"code","89902539":"code","0facc9bb":"code","9da4a367":"code","998ee50a":"code","71180878":"code","c3ab1e84":"code","3392c59e":"code","95e26759":"code","9741073a":"code","fed2a93e":"code","8c5bec87":"code","b84511a5":"code","4e323f43":"code","2b29a274":"code","c7efc7a1":"code","8f0d5e6c":"code","4bf92a5a":"code","3ddda5f6":"code","d3811297":"code","eccc3be0":"code","8629926e":"code","b720cc08":"code","4247b7d4":"code","9cce8865":"code","6bef6310":"code","9229e4bb":"code","04b51114":"code","cfeeac4c":"code","d8b6beb3":"code","93c78187":"code","25246106":"code","f5e1d6bc":"code","eb127647":"code","9c7bfcbf":"code","32432b7a":"code","b399f8ac":"code","54012ba2":"code","b0959c2b":"code","49034d64":"code","920888dc":"code","b53b1ad1":"code","ea529137":"code","efa3d56b":"code","dfdff295":"markdown","c39a1d93":"markdown","9891c353":"markdown","75b9401d":"markdown","371589d6":"markdown","2a1366e5":"markdown","990f7b10":"markdown","e02bc9f8":"markdown","10ef1d9c":"markdown","a9d091e5":"markdown","67239940":"markdown","396d8a67":"markdown","4c3da2c0":"markdown","5a6cfd32":"markdown","fe030d1e":"markdown","665a0729":"markdown","e1d49e15":"markdown","d85e304e":"markdown","71c3eee7":"markdown","839524e6":"markdown","4654e536":"markdown","a53b4ec7":"markdown","ea57181e":"markdown","10f02177":"markdown","e01269b0":"markdown","d9131b15":"markdown","2f3f6ecb":"markdown"},"source":{"58d55a33":"#Number manipulation\nimport numpy as np\n\n#Data Manipulation\nimport pandas as pd\n\n#Plotting Libraries\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","da248af5":"#Some configuration settings\n%matplotlib inline\npd.set_option(\"display.max_columns\", 100)","3fabae98":"df = pd.read_csv(\"..\/input\/diamonds.csv\", index_col=0)","692a1f5c":"df.shape","89902539":"df.head()","0facc9bb":"df.describe()","9da4a367":"df.describe(include=object)","998ee50a":"df.isna().any().any()","71180878":"df.hist(figsize=(20, 20))\nplt.show()","c3ab1e84":"for feature in df.dtypes[df.dtypes == object].index:\n    sns.countplot(y= feature, data= df)\n    plt.show()","3392c59e":"for feature in df.dtypes[df.dtypes != object].index:\n    plt.figure(figsize=(10, 5))\n    plt.subplot(1, 2, 1)\n    sns.violinplot(x= feature, data= df)\n    plt.subplot(1, 2, 2)\n    sns.boxplot(x= feature, data= df)\n    plt.show()","95e26759":"pd.concat([df[df[\"x\"] == 0], df[df[\"y\"] == 0], df[df[\"z\"] == 0]]).drop_duplicates()","9741073a":"len(pd.concat([df[df[\"x\"] == 0], df[df[\"y\"] == 0], df[df[\"z\"] == 0]]).drop_duplicates())","fed2a93e":"df = df[(df[['x','y','z']] != 0).all(axis=1)]","8c5bec87":"df[df[\"z\"] == 0]","b84511a5":"df[\"volume\"] = df[\"x\"] * df[\"y\"] * df[\"z\"]","4e323f43":"df[\"density\"] = df[\"carat\"]*0.2\/df[\"volume\"]","2b29a274":"df.head()","c7efc7a1":"sns.countplot(y=\"clarity\", data= df)","8f0d5e6c":"df.clarity.replace([\"VVS1\", \"VVS2\"], \"VVS\", inplace=True)\ndf.clarity.replace([\"VS1\", \"VS2\"], \"VS\", inplace= True)\ndf.clarity.replace([\"SI1\", \"SI2\"], \"SI\", inplace= True)\ndf.clarity.replace(\"I1\", \"I\", inplace= True)","4bf92a5a":"sns.countplot(y=\"clarity\", data= df)","3ddda5f6":"color_grades = {\n    \"Colorless\": [\"D\", \"E\", \"F\"],\n    \"Near Colorless\": [\"G\", \"H\", \"I\", \"J\"],\n    \"Faint Yellow\": [\"K\", \"L\", \"M\"],\n    \"Very Light Yellow\": [\"N\", \"O\", \"P\", \"Q\", \"R\"],\n    \"Light Yellow\": [\"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n}","d3811297":"c_l = []\nfor color in df.color:\n    for key, item in color_grades.items():\n        if color in item:\n            c_l.append(key)\n            break\ndf[\"ColorGrade\"] = c_l","eccc3be0":"sns.countplot(y=\"color\", data= df)","8629926e":"sns.lmplot(y=\"carat\", x=\"price\", hue=\"clarity\", data= df, fit_reg= False)","b720cc08":"sns.lmplot(y=\"carat\", x=\"price\", hue=\"clarity\", data= df[df.clarity == \"I\"], fit_reg= False)","4247b7d4":"sns.lmplot(y=\"carat\", x=\"price\", hue=\"color\", data= df, fit_reg= False)","9cce8865":"sns.lmplot(y=\"carat\", x=\"price\", hue=\"cut\", data= df, fit_reg= False)","6bef6310":"df.head()","9229e4bb":"new_df = pd.get_dummies(df)","04b51114":"plt.figure(figsize=(20, 20))\ncorr = new_df.corr()\nsns.heatmap(corr*100, cmap=\"YlGn\", annot= True, fmt=\".0f\")","cfeeac4c":"df.to_csv(\"cleaned.csv\", index= False)","d8b6beb3":"df = pd.get_dummies(df)","93c78187":"df.head()","25246106":"X = df.drop([\"price\"], axis= 1).astype(float)","f5e1d6bc":"y = df.price.astype(float)","eb127647":"#Models\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n\n#Building everything\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\n\n#Evaluation\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n#Saving the model\nimport pickle","9c7bfcbf":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.2, random_state= 1234)","32432b7a":"print( len(X_train), len(X_test), len(y_train), len(y_test) )","b399f8ac":"X_train.shape, y_train.shape","54012ba2":"pipelines = {\n    \"rf\": make_pipeline(StandardScaler(), RandomForestRegressor(random_state=123)),\n    \"gb\": make_pipeline(StandardScaler(), GradientBoostingRegressor(random_state=123))\n}","b0959c2b":"rf_hyperparameters = {\n    \"randomforestregressor__n_estimators\": [100, 200],\n    \"randomforestregressor__max_features\": [\"auto\", \"sqrt\", 0.33]\n}\ngb_hyperparameters = {\n    \"gradientboostingregressor__n_estimators\": [100, 200],\n    'gradientboostingregressor__learning_rate': [0.05, 0.1, 0.2],\n    'gradientboostingregressor__max_depth': [1, 3, 5]\n}\nhyperparameters = {\"rf\": rf_hyperparameters,\n                   \"gb\": gb_hyperparameters}","49034d64":"fitted_models = {}\n\nfor name, pipeline in pipelines.items():\n    model = GridSearchCV(pipeline, hyperparameters[name], cv= 10, n_jobs= -1)\n    model.fit(X_train, y_train)\n    fitted_models[name] = model\n    print(name, 'has been fitted.')","920888dc":"for name, model in fitted_models.items():\n    print(name, model.best_score_)","b53b1ad1":"for name, model in fitted_models.items():\n    print(name)\n    print(\"-----------\")\n    pred = model.predict(X_test)\n    print('MAE:', mean_absolute_error(y_test, pred))\n    print(\"MSE:\", \"\\n\", mean_squared_error(y_test, pred))\n    \nprint(np.mean(y_test))","ea529137":"plt.scatter(y, fitted_models[\"rf\"].predict(X))\nplt.xlabel(\"Actual\")\nplt.ylabel(\"Predicted\")\nx_lim = plt.xlim()\ny_lim = plt.ylim()\nplt.plot(x_lim, y_lim, \"k--\")\nplt.show()","efa3d56b":"with open('final_model.pkl', 'wb') as f:\n    pickle.dump(fitted_models['rf'].best_estimator_, f)","dfdff295":"### Saving the best model","c39a1d93":"### Hyper parameter grid for all the models","9891c353":"Considering the size of the dataset, it is just better to drop these values","75b9401d":"**Plotting histograms**","371589d6":"### Splitting the dataset","2a1366e5":"**Countplots for categorical variables**","990f7b10":"#### Each model's best r2 score on the training set","e02bc9f8":"### Fitting the models to the training set","10ef1d9c":"**Creating a feature, density**","a9d091e5":"### Exploring multivariate distributions","67239940":"### Plotting the results","396d8a67":"### Getting the data","4c3da2c0":"## Price Regression","5a6cfd32":"### Creating Model pipelines","fe030d1e":"# Finished!","665a0729":"#### Each model's scores on the test set","e1d49e15":"### Importing tools for regression","d85e304e":"**Checking for any null values**","71c3eee7":"### Correlations Matrix","839524e6":"### Grouping sparse classes","4654e536":"**Creating a feature, volume**","a53b4ec7":"### Exporting the file","ea57181e":"# Diamonds Dataset - Visualizing, Cleaning, Feature Engineering, Regression","10f02177":"### Imports","e01269b0":"The box plots show that x, y, z have values that are 0, which shouldn't be possible.\n\nExploring this","d9131b15":"**Box and Violin Plots for numerical features**","2f3f6ecb":"### Exploring the Data"}}