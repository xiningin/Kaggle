{"cell_type":{"4add5fe6":"code","a722ed4a":"code","16d199c9":"code","8109c88b":"code","22affeb3":"code","d2e90623":"code","95b876d0":"code","acfb4525":"code","7fecb258":"code","10441ea1":"code","2c772e9d":"code","74d1d7da":"code","06588940":"code","8864efd5":"code","d954651d":"code","b2452dd7":"code","7a910f84":"code","8dbc1043":"code","04880de2":"code","96dec01c":"code","09ef2d3d":"code","e8d8c73f":"code","d23a1575":"markdown","774ab2aa":"markdown","8fd9e87b":"markdown","8451f2e7":"markdown","41514043":"markdown","2bd617d2":"markdown","753db6ff":"markdown","9f7d6201":"markdown","52abe981":"markdown","4fda8579":"markdown","44b1759d":"markdown","586a5396":"markdown","5ed3f7e9":"markdown","bd7a0fb5":"markdown","ee26d30d":"markdown","b15aeb08":"markdown","08834717":"markdown"},"source":{"4add5fe6":"! pip install turicreate\nimport turicreate\n\nfrom bokeh.io import output_notebook, show\nfrom bokeh.plotting import figure\nfrom bokeh.models import HoverTool\nfrom bokeh.layouts import column\noutput_notebook()","a722ed4a":"song_data = turicreate.SFrame.read_csv('..\/input\/songs-data-set\/song_data.csv')\n\n# Explore the Dataset\nsong_data.head()","16d199c9":"song = song_data['song'].value_counts()\nsong","8109c88b":"song_data['song'].show()","22affeb3":"import plotly.graph_objects as go\n\nfig = go.Figure(go.Bar(\n            x= list(song['count'][:10]),\n            y= list(song['value'][:10]),\n            orientation='h'))\n\nfig.update_layout(\n    title=\"Most Popular Songs\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=14,\n        color=\"RebeccaPurple\"\n    )\n)\n\nfig.show()","d2e90623":"artist = song_data['artist'].value_counts()\nartist","95b876d0":"song_data['artist'].show()","acfb4525":"fig = go.Figure(go.Bar(\n            x= list(artist['count'][:10]),\n            y= list(artist['value'][:10]),\n            orientation='h'))\n\nfig.update_layout(\n    title=\"Most Popular Artist\",\n    xaxis_title=\"Count\",\n    yaxis_title=\"Artist\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=14,\n        color=\"RebeccaPurple\"\n    )\n)\nfig.show()","7fecb258":"unique_user = song_data['user_id'].unique()\nlen(unique_user)","10441ea1":"popular_artist = song_data.groupby(key_column_names='artist', operations={'total_count': turicreate.aggregate.SUM('listen_count')})\npopular_artist = popular_artist.sort('total_count', ascending= False)\npopular_artist.head(5)","2c772e9d":"# Most popular artist\nprint('Most Popular Artist:  ', popular_artist[0]['artist'])\nprint('\\n')\n\n# Least popular artist\nprint('Least Popular Artist:  ', popular_artist[-1]['artist'])","74d1d7da":"train_data,test_data = song_data.random_split(0.8,seed=0)","06588940":"popularity_model = turicreate.popularity_recommender.create(train_data, user_id= 'user_id', item_id= 'song')","8864efd5":"popularity_model.recommend(users= [unique_user[0]])","d954651d":"popularity_model.recommend(users= [unique_user[1]])","b2452dd7":"personalized_model = turicreate.item_similarity_recommender.create(train_data, user_id= 'user_id', item_id= 'song')","7a910f84":"personalized_model.recommend(users= [unique_user[0]])","8dbc1043":"personalized_model.recommend(users= [unique_user[1]])","04880de2":"# similar songs to 'With or Without You - U2'\npersonalized_model.get_similar_items(['With Or Without You - U2'])","96dec01c":"# similar songs to \"You're The One - Dwight Yoakam\"\npersonalized_model.get_similar_items([\"You're The One - Dwight Yoakam\"])","09ef2d3d":" model_performance = turicreate.recommender.util.compare_models(test_data, [popularity_model,personalized_model], user_sample=0.05) ","e8d8c73f":"p = figure(title= 'Precision-Recall Curve on Model performance', plot_width=600, plot_height=400)\n\np.line(x= model_performance[0]['precision_recall_overall']['recall'], \\\n       y= model_performance[0]['precision_recall_overall']['precision'], line_color=\"blue\", line_width=2 , \\\n       legend_label= \"Popularity Model = Model[0]\")\np.line(x= model_performance[1]['precision_recall_overall']['recall'], \\\n       y= model_performance[1]['precision_recall_overall']['precision'], line_color=\"red\", line_width=2 , \\\n       legend_label= \"Personalized Model = Model[1]\")\n\np.add_tools(HoverTool(tooltips=[(\"Recall\", \"@x\"), (\"Precision\", \"@y\")])) \np.xaxis.axis_label = 'Recall'\np.yaxis.axis_label = 'Precision'\np.legend.location = 'top_right'\nshow(p)","d23a1575":"## Most Popular and Least Popular Artist","774ab2aa":"### Apply model to find similar songs in the data set","8fd9e87b":"I concluded here, that the Recommendation system build on the basis Personalised Model perform better than Recommedation system build on Poopularity model.","8451f2e7":"### Apply personalized model to make song recommendations","41514043":"# Create songs Recommender System\n## Create a very simple Popularity based Recommender System","2bd617d2":"I observed that the popularty_model (i.e. Recommendation system based on Popularty) recommends the similar songs to all the user.\n\n\n## Create Recommender system with personalization","753db6ff":"# Compare the models quantitatively\nI'll now formally compare the popularity and the personalized models using precision-recall curves. ","9f7d6201":"# Exploratory Data Analysis\n\n## Show the most popular songs in the dataset","52abe981":"# Conclusion","4fda8579":"## Show the most popular Artist in the dataset","44b1759d":"In Precision-Recall Curve, AUC (i.e. Aera Under the Curve) for Personalized Model is greater than Popularity Model. Therefore, Personalized Model performed better than popularity Model.\n\n---\n---","586a5396":"### Import Dataset","5ed3f7e9":"## Count the number of unique users in the data","bd7a0fb5":"### Import Libraries","ee26d30d":"### Use popularty model to make some predictions","b15aeb08":"# Building Recommender System\n\nI'm going to build Recommender Model using 'song_data.csv' based on following two approaches:\n1. Recommender System based on Popularity \n2. Recommender System based on Personalization     \n\nAnd at the end, I'll compare both the approaches of building Recommender system.","08834717":"### Train and Test Split"}}