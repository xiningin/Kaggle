{"cell_type":{"993aace5":"code","a04b5585":"code","1399d6ae":"code","520dd538":"code","b311d454":"code","be07c8b9":"code","9405fc2a":"code","fc90dfd0":"code","9ee57095":"code","f0b57ef1":"code","27e03069":"code","d5f375de":"code","58bd8b2e":"code","e30e594f":"code","6f8d4aa1":"code","7d110ebb":"code","69c17338":"code","7c98cb12":"code","328b62e3":"code","9f09c6dd":"code","2b655f6c":"code","09f21097":"code","6180c90d":"code","2379f8e2":"code","4a5076ac":"code","a70c93e1":"markdown","40d2aad2":"markdown","8be825e1":"markdown","e6b7f979":"markdown","0f922dcb":"markdown","6634df15":"markdown","e662c33f":"markdown","d962843c":"markdown","19312b2f":"markdown","fe5c0c21":"markdown","59df7745":"markdown","7381c26f":"markdown","d61b6a34":"markdown","7b539a4c":"markdown","bc2bf011":"markdown","f2035550":"markdown","3aeb83bb":"markdown","064d9c84":"markdown","2e090d1f":"markdown"},"source":{"993aace5":"\nimport numpy as np # linear algebra\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\nimport seaborn as sns\n# color = sns.color_palette()\n\nimport random\n\nfrom textwrap import wrap\n\nimport re\n\n# from IPython.display import display, HTML\n\n# import plotly.plotly as py1\n# import plotly.offline as py\n# import plotly.graph_objs as go\n# import plotly.offline as offline\n# from plotly import tools\n# from plotly.offline import iplot\n\n# py.init_notebook_mode(connected=True)\n# offline.init_notebook_mode()\n\n\n# Print all rows and columns\npd.set_option('display.max_columns', None)\n# pd.set_option('display.max_rows', 50)","a04b5585":"# survey = pd.read_csv(\"..\/input\/survey_results_public.csv\",  warn_bad_lines=False, error_bad_lines=False, low_memory=False)\nschema = pd.read_csv(\"..\/input\/survey_results_schema.csv\", low_memory=False).set_index(\"Column\")\nsurvey = pd.read_csv(\"..\/input\/survey_results_public.csv\", low_memory=False)\n\nsurvey.sample(3)","1399d6ae":"schema.loc[\"OpenSource\"].QuestionText","520dd538":"# countries = survey.Country.unique()\n# for country in countries:\n#     print(country)\nlatin_america = [\"Belize\",\"Costa Rica\", \"El Salvador\", \"Guatemala\", \"Honduras\", \"Mexico\", \"Nicaragua\", \"Panama\", \n                 \"Argentina\", \"Bolivia\", \"Brazil\", \"Chile\", \"Colombia\", \"Ecuador\", \"French Guiana (d\u00e9partement of France)\", \n                 \"Guyana\", \"Paraguay\", \"Peru\", \"Suriname\", \"Uruguay\", \"Venezuela\", \"Cuba\", \"Dominican Republic\", \"Haiti\",\n                 \"Guadeloupe\", \"Martinique\", \"Puerto Rico\", \"Saint-Barth\u00e9lemy\", \"Saint-Martin\" ,\n                 \"Venezuela, Bolivarian Republic of...\"]\n\nlats = survey[survey[\"Country\"].isin(latin_america)].copy()\nlats.Country = lats.Country.replace(to_replace={\"Venezuela, Bolivarian Republic of...\": \"Venezuela\"})\nprint(\"Responses from latin america countries: %i\" %lats.shape[0])\nprint(\"Percentage of latin america countries: %0.2f%%\" %(100*lats.shape[0]\/survey.shape[0]))","b311d454":"demografic_colums = [\"Gender\", \"SexualOrientation\", \"EducationParents\", \"RaceEthnicity\", \"Age\", \"Country\", \"FormalEducation\"]","be07c8b9":"countries = lats.Country.value_counts(ascending=False)#.to_frame()\nf, ax = plt.subplots(1, 1, figsize=(15, 8))\n\nax = sns.barplot(x=countries.values, y=countries.index, alpha=0.7, ax=ax, palette=\"Set2\")\nfor p in ax.patches:\n    width = p.get_width()\n    height = p.get_height()\n    x = p.get_x()\n    y = p.get_y()\n    ax.text(width, y+height\/2,'%0.2f%%' %(100*width\/lats.shape[0]) , ha=\"left\",)\nplt.xlabel(\"Participants\", fontsize=14)\nplt.ylabel(\"Country \", fontsize=14)\nplt.title(\"Top 15 countries contestants\", fontsize=16)\nplt.show()\n","9405fc2a":"#Age \nage = lats.Age.to_frame() #loc[(mcr.Age > 16) & (mcr.Age <= 70),'Age'].astype(int).to_frame()\nf, ax = plt.subplots(1, 1,  figsize=(12, 8))\npal = sns.cubehelix_palette(7, start=3, rot=0, dark=0.25, light=.75, reverse=True)\norder = ['Under 18 years old', '18 - 24 years old', '25 - 34 years old',\n         '35 - 44 years old', '45 - 54 years old',  '55 - 64 years old', '65 years or older']\nax = sns.countplot(x=\"Age\", data=lats,palette= pal, order=order,  ax=ax)\nax.set_xlabel(\"Age\", fontsize=14)\nax.set_ylabel(\"Respondents counts\", fontsize=14)\nax.set_title(\"Age of contestants\", fontsize=16)\nplt.show()","fc90dfd0":"# After seeing gender answers they are a little messy, for example quite a few respond male and female, why  didn't  just\n# answer non-binary, in any case i'm gonna merge some of the answer\nto_replace = {\n    \"Male;Non-binary, genderqueer, or gender non-conforming\": \"Non-binary, genderqueer, or gender non-conforming\",\n    \"Female;Transgender\" : \"Transgender\",\n    \"Female;Male\": \"Non-binary, genderqueer, or gender non-conforming\",\n    \"Female;Non-binary, genderqueer, or gender non-conforming\" : \"Non-binary, genderqueer, or gender non-conforming\",\n    \"Female;Male;Non-binary, genderqueer, or gender non-conforming\": \"Non-binary, genderqueer, or gender non-conforming\",\n    \"Transgender;Non-binary, genderqueer, or gender non-conforming\": \"Non-binary, genderqueer, or gender non-conforming\",\n    \"Female;Male;Transgender;Non-binary, genderqueer, or gender non-conforming\": \"Non-binary, genderqueer, or gender non-conforming\"\n}\nlats.Gender = lats.Gender.replace(to_replace=to_replace)","9ee57095":"# Removing outliers from 3 times lower and higher std()\nlats_salary = lats[np.abs(lats.ConvertedSalary - lats.ConvertedSalary.mean()) <= (3*lats.ConvertedSalary.std())]\n\nf, ax = plt.subplots(1, 2, figsize=(18, 8))\n\nax[0] = sns.boxplot(x=\"Gender\", y=\"ConvertedSalary\", data=lats_salary,  ax=ax[0], palette=\"Set2\")\nax[0].set_xticklabels(['Male', 'Female', 'No-binary\\nGenderqueer\\nGender Non-confirming', \"Transgender\"])\nax[0].set_xlabel(\"Gender\", fontsize=14)\nax[0].set_ylabel(\"Converted Salary\", fontsize=14)\nax[0].set_title(\"Converted Salary by Gender\", fontsize=16)\n\nax[1] = sns.regplot( x=\"Respondent\", y=\"ConvertedSalary\", data=lats_salary, fit_reg=False, ax=ax[1])\nax[1].set_xlabel(\"Respondent\", fontsize=14)\nax[1].set_ylabel(\"Converted Salary\", fontsize=14)\nax[1].set_title(\"Scatter plot Converted Salary\", fontsize=16)\n\nplt.show()","f0b57ef1":"lats_salary_below200k =  lats_salary[lats_salary.ConvertedSalary < 200000]\n\nf, ax = plt.subplots(1, 2, figsize=(18, 8))\n\nax[0] = sns.boxplot(x=\"Gender\", y=\"ConvertedSalary\", data=lats_salary_below200k,  ax=ax[0], palette=\"Set2\")\nax[0].set_xticklabels(['Male', 'Female', 'No-binary\\nGenderqueer\\nGender Non-confirming', \"Transgender\"])\nax[0].set_xlabel(\"Gender\", fontsize=14)\nax[0].set_ylabel(\"Converted Salary\", fontsize=14)\nax[0].set_title(\"Converted Salary by Gender\", fontsize=16)\n# ax[0].axhline(lats_salary_below200k.ConvertedSalary.mean(), linestyle='dashed', color=\"black\")\n\nax[1] = sns.regplot( x=\"Respondent\", y=\"ConvertedSalary\", data=lats_salary_below200k, fit_reg=False, ax=ax[1])\nax[1].set_xlabel(\"Respondent\", fontsize=14)\nax[1].set_ylabel(\"Converted Salary\", fontsize=14)\nax[1].set_title(\"Scatter plot Converted Salary\", fontsize=16)\nax[1].axhline(lats_salary_below200k.ConvertedSalary.mean(), linestyle='dashed', color=\"black\")\n\nplt.show()","27e03069":"# return a list with ncolors length of colors in hex format\ndef palette_random(ncolors=10):\n    col3 = []\n    for x in range(0, ncolors):\n        col3.append(\"#{:06x}\".format(random.randint(0, 0xFFFFFF)))\n    return col3\npal_country = sns.color_palette(palette_random(23))\nsns.palplot(pal_country)\ng = sns.lmplot(x=\"Respondent\", y=\"ConvertedSalary\", data=lats_salary_below200k, fit_reg=False, hue=\"Country\",\n               size=8, aspect=2, palette=pal_country)\n# print(type(g))\nf, ax = plt.subplots(1,1, figsize=(15, 8))\nax = sns.boxplot(y=\"Country\", x=\"ConvertedSalary\", data=lats_salary_below200k,  ax=ax, palette=pal_country)\nax.set_ylabel(\"Country\", fontsize=14)\nax.set_xlabel(\"Converted Salary\", fontsize=14)\nax.set_title(\"Converted Salary by country\", fontsize=16)\nax.axvline(lats_salary_below200k.ConvertedSalary.mean(), linestyle='dashed', linewidth=3,color=\"red\")\n\nplt.show()","d5f375de":"f, ax = plt.subplots(1,2, figsize=(15, 8))\n\nax[0] = sns.countplot(y=\"FormalEducation\", data=lats_salary_below200k, ax=ax[0], palette=\"Set2\")\nylabels = [\"\\n\".join(wrap(l.get_text(), 30)) for l in ax[0].get_yticklabels()]\nax[0].set_yticklabels(ylabels, fontsize=10, rotation=0)\nax[0].set_ylabel(\"Formal Education\", fontsize=14)\nax[0].set_xlabel(\"Count\", fontsize=14)\nax[0].set_title(\"Count of formal education\", fontsize=16)\n\nfor p in ax[0].patches:\n    width = p.get_width()\n    height = p.get_height()\n    x = p.get_x()\n    y = p.get_y()\n    ax[0].text(width, y+height\/2,'%2i' %width , ha=\"left\",)\n\nax[1] = sns.boxplot(y=\"FormalEducation\", x=\"ConvertedSalary\", data=lats_salary_below200k,  ax=ax[1], palette=\"Set2\")\nax[1].set_yticklabels([\"\"], fontsize=10, rotation=0)\nax[1].set_ylabel(\"\", fontsize=14)\nax[1].set_xlabel(\"Converted Salary\", fontsize=14)\nax[1].set_title(\"Salary by formal education\", fontsize=16)\nax[1].axvline(lats_salary_below200k.ConvertedSalary.mean(), linestyle='dashed', color=\"red\")\n\nplt.tight_layout()\nplt.show()","58bd8b2e":"# get a DataFrame and a c column string\n# Returns new dataframe with a one hot enconding from the column\ndef one_hot_encoding(df, c):\n    df_new = pd.DataFrame()\n    temp = df[c].str.split(';', expand=True)\n    new_columns = pd.unique(temp.values.ravel())\n    for new_c in new_columns:\n        if new_c and new_c is not np.nan:\n            # Create new column for each unique column\n            df_new[c] = df[c].copy()\n            idx = df[c].str.contains(new_c, regex=False).fillna(False)\n            df_new.loc[idx, f\"{new_c}\"] = 1\n    df_new.drop(c, axis=1, inplace=True)\n    df_new = pd.get_dummies(df_new)    \n    return df_new","e30e594f":"race = one_hot_encoding(lats_salary_below200k, \"RaceEthnicity\").dropna(axis=0, how=\"all\")\nrace[\"Respondent\"] = lats.Respondent\nrace = race.merge(lats[[\"Respondent\", \"ConvertedSalary\"]], on=\"Respondent\", )\nrace.iloc[list(race.iloc[:, 0]==1), [0, -1]].ConvertedSalary.mean()\ndef sal_row(row):   \n    for e in range(len(row)):\n        if row[e]==1:\n            row[e] = row.ConvertedSalary\n    return row\n\nrace = race.apply(sal_row, axis=1)\nrace.describe()","6f8d4aa1":"# This funtion takes text as str and n_char as int\n# return a new string with a newline \"\\n\" as the n_char specified\ndef wrap_join(text, n_char):\n    string = \"\\n\".join(wrap(text, n_char))\n    return string","7d110ebb":"f, ax = plt.subplots(1,1, figsize=(12, 8))\nax = race.plot(x=\"ConvertedSalary\", y=race.columns[:-2], ax=ax, kind=\"box\", colormap=\"Set1\",)\n#xlabels = [\"\\n\".join(wrap(l.get_text(), 15)) for l in ax.get_xticklabels()]\nxlabels = [wrap_join(l.get_text(), 15) for l in ax.get_xticklabels()]\n\nax.set_xticklabels(xlabels, fontsize=12, rotation=0)\n# ax.axhline(race.iloc[:, 1].mean(), linestyle='dashed', color=\"black\") \nax.set_title(\"Salary by Race Ethnicity\", fontsize=16)\nax.set_ylabel(\"Salary\", fontsize=14)\nax.set_xlabel(\"Race Ethnicity\", fontsize=14)\nax.grid(True)#color='lightpink', linestyle='-', linewidth=0.5, alpha=1)\n\nplt.tight_layout()\nplt.show()","69c17338":"health = [\"WakeTime\", \"HoursComputer\", \"HoursOutside\", \"Exercise\"]\ntitles = [\"Wake up Time\", \"Hours in Computer\", \"Hours Outside\", \"Exercise\"]\nf, ax = plt.subplots(2, 2, figsize=(18, 18))\nk = 0\npal = sns.color_palette(\"Set2\")\nfor axi in ax.flat :\n    axxi = lats[health[k]].value_counts().to_frame().plot(kind=\"pie\", ax=axi, subplots=True, legend=False, startangle=180,\n                                                          radius=0.85, fontsize=11, labeldistance=1.05, rotatelabels=False,\n                                                          autopct=\"%0.0f%%\", shadow=True, colors=pal)\n    axi.set_title(titles[k], fontsize=16)\n    axi.set_ylabel(\"\")\n    k+=1     \nplt.show()","7c98cb12":"## # Search a string that appears in the columns of the dataframe\n# Returns a list with the matches if not returns an empty list\ndef searchinColumns(df, match):\n    match_col = []\n    match = (\"(?i)(.+|)%s(.+|)\" %match)\n    for column in df.columns:\n        if re.match(match, column):\n            match_col.append(column)\n    return match_col\neducation_col = searchinColumns(lats, \"education\")\n# print(education_col)","328b62e3":"formal_education = ['Some college\/university study without earning a degree',\n                    'Bachelor\u2019s degree (BA, BS, B.Eng., etc.)',\n                    'Master\u2019s degree (MA, MS, M.Eng., MBA, etc.)', \n                    'Other doctoral degree (Ph.D, Ed.D., etc.)']\ngroup = lats_salary_below200k.groupby(by=\"FormalEducation\")\ngroup = group.Age.value_counts().to_frame()\n\nf, ax = plt.subplots(2, 2, figsize=(14, 14))\nk = 0\npal = sns.color_palette(\"Set3\")\nfor axi in ax.flat :\n#     group.Age.value_counts().to_frame().loc[formal_education[1]].plot(kind=\"pie\", subplots=True)\n    axxi = group.loc[formal_education[k]].plot(kind=\"pie\", ax=axi, subplots=True, legend=False, startangle=180,\n                                                          radius=0.85, fontsize=11, labeldistance=1.05, rotatelabels=False,\n                                                          autopct=\"%0.0f%%\", shadow=True, colors=pal)\n    axi.set_title(formal_education[k], fontsize=16)\n    axi.set_ylabel(\"\")\n    k+=1     \nplt.show()","9f09c6dd":"#Just a list to remember what columns I'll analyse later\nwork = [\"OpenSource\", \"CompanySize\", \"DevType\", \"YearsCodingProf\", \"CareerSatisfaction\", \"HopeFiveYears\", \"CommunicationTools\", \"SelfTaughtTypes\", \"LanguageWorkedWith\", \"LanguageDesireNextYear\",\n        \"DatabaseWorkedWith\", \"DatabaseDesireNextYear\", \"FrameworkWorkedWith\", \"IDE\",\"OperatingSystem\", \"NumberMonitors\", \"VersionControl\", ]\nworks = lats_salary_below200k.loc[:,work].copy()\nworks[\"ConvertedSalary\"] = lats_salary_below200k.ConvertedSalary.copy()\n# works.describe(include=\"all\")\nf, ax = plt.subplots(1, 3, figsize=(15, 5))\npal = sns.color_palette(\"Set3\")\nax[0] =  sns.countplot(x=\"OpenSource\", data=lats_salary_below200k, palette= pal,  ax=ax[0])   \nax[0].set_ylabel(\"\", fontsize=14)\nax[0].set_xlabel(\"\", fontsize=14)\nax[0].set_title(schema.loc[\"OpenSource\"].QuestionText, fontsize=16)\n\nax[1] = sns.boxplot(x=\"OpenSource\", y=\"ConvertedSalary\", data=lats_salary_below200k,  ax=ax[1], palette=pal)\nax[1].set_ylabel(\"\", fontsize=14)\nax[1].set_xlabel(\"\", fontsize=14)\nax[1].set_xlabel(\"Salary by formal open source contributor\", fontsize=16)\nax[1].axhline(lats_salary_below200k.ConvertedSalary.mean(), linestyle='dashed', color=\"red\")\n\n\nlats_formal = lats_salary_below200k[lats_salary_below200k.FormalEducation.isin(formal_education)]\nax[2] = sns.countplot(x=\"OpenSource\", hue=\"FormalEducation\", data=lats_formal, palette= pal,  ax=ax[2], hue_order=formal_education)\nax[2].set_ylabel(\"\")\nax[2].set_xlabel(\"\")\nax[2].set_title(\"Education and contributors\", fontsize=16)\n\nax[2].legend(bbox_to_anchor=(0.55, 0.98), loc=2, borderaxespad=0.)\nplt.show()\n\n","2b655f6c":"company = ['Fewer than 10 employees', '10 to 19 employees', '20 to 99 employees', '100 to 499 employees',\n           '500 to 999 employees','1,000 to 4,999 employees', '5,000 to 9,999 employees', '10,000 or more employees']\nyticks = [comp.replace(\" employees\", \"\") for comp in company]\nf, ax = plt.subplots(1, 2, figsize=(18, 5))\n\npal = sns.color_palette(\"tab10_r\")\n# pal = palette_random(8)\n\nax[0] =  sns.countplot(y=\"CompanySize\", data=lats_salary_below200k, palette= pal,  ax=ax[0], order=company)   \nax[0].set_ylabel(\"\", fontsize=14)\nax[0].set_xlabel(\"\", fontsize=14)\nax[0].set_yticklabels(yticks)\nax[0].set_title(wrap_join(schema.loc[\"CompanySize\"].QuestionText, 50), fontsize=16)\ntotal = len(lats_salary_below200k.CompanySize.dropna())\naccumulated = 0\nfor p in ax[0].patches:\n    width = p.get_width()\n    height = p.get_height()\n    x = p.get_x()\n    y = p.get_y()\n    accumulated += 100*width\/total\n    ax[0].text(width, y+height\/2, \"%0.2f%% %s\" %(accumulated ,\" accumulated\") , ha=\"left\",)\n\nax[1] = sns.boxplot(y=\"CompanySize\", x=\"ConvertedSalary\", data=lats_salary_below200k,  ax=ax[1], palette=pal, order=company)\nax[1].set_ylabel(\"\", fontsize=14)\nax[1].set_xlabel(\"\", fontsize=14)\nax[1].set_yticklabels(yticks)\nax[1].set_title(\"Salary by company size\", fontsize=16)\nax[1].axvline(lats_salary_below200k.ConvertedSalary.mean(), linestyle='dashed', color=\"red\")\n\ngroup = lats_salary_below200k.groupby(\"CompanySize\").FormalEducation.value_counts().to_frame()\nedcomp = pd.DataFrame(index=formal_education, columns=company)\nfor c in edcomp.columns:\n    edcomp = edcomp.combine_first(group.loc[c].rename({'FormalEducation': c}, axis=1))\nedcomp = edcomp.reindex(formal_education).reindex(company[::-1], axis=1).astype(int)#.transpose()\nf, ax = plt.subplots(2,2, figsize=(11, 10))\nk = 0\nfor axi in ax.flat:\n    axi = edcomp.iloc[k,:].to_frame().plot(kind=\"pie\", ax=axi, subplots=True, legend=False, startangle=0,\n                  radius=0.85, fontsize=11, labeldistance=1.05, rotatelabels=False, labels=[\"\"]*8,\n                  autopct=\"%0.0f%%\", shadow=True, colors=pal)[0]\n    title = wrap_join(edcomp.iloc[k].to_frame().columns[0], 40)\n    axi.set_title(title, fontsize=14)\n    axi.set_ylabel(\"\")\n    axi.set_xlabel(\"\")\n    axi.set_yticklabels(\"\")\n    axi.set_xticklabels(\"\")\n    k+=1\nplt.legend(yticks ,bbox_to_anchor=(0.30, 1.40), loc=0, borderaxespad=0.1, ncol=2)\n\n# group = lats_salary_below200k.groupby(\"CompanySize\").FormalEducation.value_counts().to_frame()\n# edcomp = pd.DataFrame(index=formal_education, columns=company)\n# for c in edcomp.columns:\n#     edcomp = edcomp.combine_first(group.loc[c].rename({'FormalEducation': c}, axis=1))\n# # edcomp = edcomp.reindex(formal_education).reindex(company[::-1], axis=1).astype(int).transpose()\nedcomp = edcomp.transpose()\n\nf, ax = plt.subplots(2,4, figsize=(13, 7))\nk = 0\nfor axi in ax.flat:\n    axi = edcomp.iloc[k,:].to_frame().plot(kind=\"pie\", ax=axi, subplots=True, legend=False, startangle=0,\n                  radius=0.85, fontsize=11, labeldistance=1.05, rotatelabels=False, labels=[\"\"]*8,\n                  autopct=\"%0.0f%%\", shadow=True, colors=pal)[0]\n    axi.set_title(yticks[k], fontsize=14)\n    axi.set_ylabel(\"\")\n    axi.set_xlabel(\"\")\n    axi.set_yticklabels(\"\")\n    axi.set_xticklabels(\"\")\n    k+=1\nplt.legend(formal_education, bbox_to_anchor=(0.70, 1.35), loc=0, borderaxespad=0.1, ncol=2) \n# plt.show()\nplt.show()","09f21097":"devtype = list(lats_salary_below200k.DevType.dropna().str.split(\";\"))\ndevtype = pd.Series([d for dev in devtype for d in dev ], name='Dev Type').value_counts().to_frame()\nf, ax = plt.subplots(1,1, figsize=(10, 7))\nax = devtype.plot(kind='barh', color='y', ax=ax)\nplt.show()","6180c90d":"onehot_devtype = one_hot_encoding(lats_salary_below200k, \"DevType\")\nonehot_devtype[\"Country\"] = lats_salary_below200k.Country\nonehot_devtype[\"FormalEducation\"] = lats_salary_below200k.FormalEducation\ndsml = onehot_devtype[[\"Data scientist or machine learning specialist\", \"Country\", \"FormalEducation\"]].dropna()\ndsml\n\nf, ax = plt.subplots(1, 2, figsize=(20, 7))\npal = sns.color_palette(\"Set3\")\nax[0] =  sns.countplot(y=\"Country\", data=dsml, palette= pal,  ax=ax[0])\n# ax = dsml.plot(kind=\"barh\", stacked=True, ax=ax)\nax[0].set_ylabel(\"\", fontsize=14)\nax[0].set_xlabel(\"\", fontsize=14)\nax[0].set_title(\"Data scientist or machine learning specialist by country\", fontsize=15)\n\nfor p in ax[0].patches:\n    width = p.get_width()\n    height = p.get_height()\n    x = p.get_x()\n    y = p.get_y()\n    ax[0].text(width, y+height\/2, width , ha=\"left\",)\n\nax[1] = sns.countplot(x=\"FormalEducation\", data=dsml[dsml.isin(formal_education)], palette=pal, ax=ax[1], order=formal_education)\nticklabels = [wrap_join(l.get_text(), 15) for l in ax[1].get_xticklabels()]\nax[1].set_xticklabels(ticklabels)\nax[1].set_ylabel(\"\", fontsize=14)\nax[1].set_xlabel(\"\", fontsize=14)\nax[1].set_title(\"Count Data scientist or machine learning specialist by formal education\", fontsize=15)\n\nplt.show()","2379f8e2":"lang = lats_salary_below200k[[\"LanguageWorkedWith\", \"LanguageDesireNextYear\", \"ConvertedSalary\", \"FormalEducation\", \"Country\"]]\nlang_work = one_hot_encoding(lang, \"LanguageWorkedWith\").dropna(how=\"all\", axis=1)\nlang_desire = one_hot_encoding(lang, \"LanguageDesireNextYear\").dropna(how=\"all\", axis=1, )\nwork_count = lang_work.sum(axis=0).sort_index().to_frame().rename({0:\"Count\"}, axis=1).sort_values(by=\"Count\", ascending=False)\ndesire_count = lang_desire.sum(axis=0).sort_index().to_frame().rename({0:\"Count\"}, axis=1).sort_values(by=\"Count\", ascending=False)\n\n\nf, ax1 = plt.subplots(1, 1, figsize=(12, 8), sharex=True)\n\nlabels = np.array(list(work_count.index))\nw = np.array(work_count.Count)*-1\nd = np.array(desire_count.Count)\nax1 = sns.barplot(x=labels, y=d, palette=\"Set2\", ax=ax1)\nax1 = sns.barplot(x=labels, y=w, palette=\"Set2\", ax=ax1)\nax1.axhline(0, linestyle='dashed', linewidth=1,color=\"black\")\nax1.set_xticklabels(labels, fontsize=11, rotation=90)\nax1.set_yticklabels([0, 2000, 1500, 1000, 500, 0, 500, 1000, 1500, 2000])\nax1.grid( linestyle='-', linewidth=1)\n\nax1.text(30, 1200, \"Desired\", fontsize=16)\nax1.text(30, -1200, \"Worked\", fontsize=16)\nax1.set_title(\"Languages worked with and desire to work with next year\", fontsize=16)\nplt.show()\n","4a5076ac":"lang_sum = lang_work.fillna(0) + (lang_desire.fillna(0)+1)\nlang_sum = lang_sum.astype(int).replace({1:\"Worked with\", 3:\"Both\", 2:\"Desire to work\"})\nlang_values = pd.DataFrame(index=[\"Both\", \"Worked with\", \"Desire to work\",])\nfor c in lang_sum.columns:\n    lang_values = lang_values.combine_first(lang_sum[c].value_counts().to_frame())\nlang_values = lang_values.transpose().fillna(0).astype(int).sort_values(by=\"Desire to work\", ascending=False)#.drop(\"Both\", axis=1)\nlang_values = lang_values.reindex([ \"Worked with\", \"Desire to work\",\"Both\"], axis=1)\nf, (ax1, ax2) = plt.subplots(1,2, figsize=(15, 8))\ncolormap = ListedColormap(sns.color_palette(\"Set2\", n_colors=3 ))\nax1 = lang_values[:20].plot(kind='barh', stacked=True, colormap=colormap, ax=ax1, legend=False)\nax2 = lang_values[19:].plot(kind='barh', stacked=True, colormap=colormap, ax=ax2)\nplt.yticks(fontsize=11)\nplt.show()\n","a70c93e1":"**Company size**\n\nSo look at this, half of the respondents works in companies with less than 100 employees, in terms of salary people tend to earn more the larger the company.  So why is that people prefer to work in small companies despited they earn less? Interesting question, perhaps their lower salary is because they don't have higher formal education but that seems unlikely.\n\nThe first pie chart almost confirms that behavior, people that poseses doctoral degrees tend to be in greater percentage in small companies. The other chart i just wanted to be fancy.\n","40d2aad2":"**Langueages**\n\nIn the next plot you can see every language people voted they worked with and in the other hand the languages people voted they desire to work next year\n","8be825e1":"**Health**\n\nAlright, IT industry doesn't have the most active ocupation however that doesn't mean people are so inactive, anyway lets get into it.\n\nEarly birds are mayority people tend to wake up early some does very early, half of the people say that they spend from 9-12 hours in front of the computer, almost half of the day, if you worked for 12 hours it will let you 8 hours to sleep and 4 hours to do your stuff just to give you a perspective, in that time you would have to do your chores, any transportation time, eat, etc. yo get the idea. Perhaps that's why respondents spend so few hours outside(most of them less than 2 hours), however at least more than half of respondents do some kind to exercise.\n\nIn summary: wake up early, many hours in the computer but few outside,  57% of the respondents do some kind of exercise during the week.\n","e6b7f979":"**Open Source**\n\nThere  are fewer persons to contribute to open source projects, and those who write tend to earn a little bit more.","0f922dcb":"**Data scientist in the region**\n\nI wanted to see how many people identify as DS ans ML specialists in the region, results are not that disappointed, there a few profesionals working in that field, Brazil taking the lead but it's probably because it has the most respondents, also people of every formal education degree.\n","6634df15":"**Salary by country**\nIn the first plot we can appreciate Brazil having the strongest presence obviously because it has the bigger number of answers. The following boxplot\nwe can appreciate every country, Costa Rica*(Pura vida!)* has the higher mean of all the countries, followed by Uruguay.\n\nSome things to point out:\n* Brazil has the mean below the  general mean(is marked by a dashed red line)\n* Cuba and Venezuela they alone have the lowest mean compared with the other countries\n\n","e662c33f":"**Salary by formal education**\n\nAccording to this data people with higher education tend to earn more than the others although are 3 lucky fellas that haven't had no education and are earning prety well. \nMost of the people have Bachelor's degree","d962843c":"Still the converted salary numbers are quite odd, the vast majority is below \\$100.000 but I want to see where is the mean of salaries, so I'm drop the values higher than \\$200.000 to see if the plot gets better. Let's see.\n\nNow at least we can see the mean of the converted salary column. We can see the data better with this plot.\n\nAbout the gender graph, there's always a gap between male and female payment, transgender people are taking the lead here.\n","19312b2f":"**Country**\n\nBrazil, Mexico, Argentica, Colombia and Chile the top 5 respondants from Latin America, and Brazil provide almost half to the answers","fe5c0c21":"**Developer Type**\n\nThe majority of the respondents voted for web development technoologies, \nStill there were 187 votes for DS and ML Specialist I'd like to see where are they from.\n\n","59df7745":"In this second plot we can see that the bars in grey are the \"votes\" from which every person marked both *Worked with* and *Desire to work* , in other words they would like keep working with that language.","7381c26f":"**Gender**\n\nFirst of all I'm a little confused by the way they ask this question, for example any of the contestans could answer more than one gender, this would lead to unwanted anwsers for example people selecting every option just because, and tha's not the idea so I'm gonna merge some of that anwsers into 4 mayor genders: *Female, Male, Transgender and  Non-binary, genderqueer, or gender non-conforming*\n","d61b6a34":"**Age**\n\nNo discussion here, most of the respondents have between 25 and 34 y\/o","7b539a4c":"Almost 6% of the total responses, that will be 5415 responses quite a few to make a significant insight , but that's all we got.","bc2bf011":"**Race Ethnicity**\n\nI would think that latinos would have higher wages but people that identifies as white or european decendant surpaces latinos.","f2035550":"**Education**\n\n\n\n","3aeb83bb":"Hello everybody,\n\nThis time I'd like to make an analysis of this survey with a little bias, I'm going to select only responses from latin america countries. I suspect it will be a little portion of the main data but let's see how it goes.","064d9c84":"Well I think this EDA has gotten pretty long, I know there  are many other insight to get from here but I'll leave it to you.\n\nI hope you enjoye reading this as I did making it.","2e090d1f":"Sample of 5 of the total respondants"}}