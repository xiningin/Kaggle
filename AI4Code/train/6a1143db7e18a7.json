{"cell_type":{"3a034b6b":"code","f455d6d9":"code","dd70b226":"code","dd52ea95":"code","464fc210":"code","82a2f375":"code","985870cd":"code","312418db":"code","db0a3768":"code","c6e391d7":"code","7f10dee7":"markdown","2b96bebb":"markdown","a9fb32bf":"markdown","f391bffd":"markdown","4d00142f":"markdown","6e09ef54":"markdown"},"source":{"3a034b6b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f455d6d9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","dd70b226":"df = pd.read_csv(\"\/kaggle\/input\/fifa-20-complete-player-dataset\/players_20.csv\")\n\n# Extract the player's name and some of the continous variables.\ndf = df[['club', 'overall', 'potential', 'value_eur', 'wage_eur', 'international_reputation', 'weak_foot',\n       'skill_moves', 'release_clause_eur', 'pace', 'shooting',\n       'passing', 'dribbling', 'defending', 'physic', 'gk_diving',\n       'gk_handling', 'gk_kicking', 'gk_reflexes', 'gk_speed',\n       'gk_positioning', 'attacking_crossing', 'attacking_finishing',\n       'attacking_heading_accuracy', 'attacking_short_passing',\n       'attacking_volleys', 'skill_dribbling', 'skill_curve',\n       'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control',\n       'movement_acceleration', 'movement_sprint_speed', 'movement_agility',\n       'movement_reactions', 'movement_balance', 'power_shot_power',\n       'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots',\n       'mentality_aggression', 'mentality_interceptions',\n       'mentality_positioning', 'mentality_vision', 'mentality_penalties',\n       'mentality_composure', 'defending_marking', 'defending_standing_tackle',\n       'defending_sliding_tackle', 'goalkeeping_diving',\n       'goalkeeping_handling', 'goalkeeping_kicking',\n       'goalkeeping_positioning', 'goalkeeping_reflexes']]\n\n# Replacing null values with mean\ndf = df.fillna(df.mean())","dd52ea95":"# Selecting the Top 4, Mid 4, and Bottom 4 clubs\n\ndf_clubs = df[(df.club =='FC Barcelona') | (df.club =='Atl\u00e9tico Madrid') | (df.club =='Real Madrid') | (df.club == 'Valencia CF') |\n              (df.club =='Real Sociedad') | (df.club =='Real Betis') | (df.club =='Deportivo Alav\u00e9s') | (df.club == 'SD Eibar') |\n              (df.club == 'RC Celta') |(df.club == 'Girona FC') | (df.club == 'SD Huesca') | (df.club == 'Rayo Vallecano')]\n\n# Categorizing the Top 4, Mid 4, Bottom 4 clubs\n\ndf_clubs.club = df_clubs.club.replace({'FC Barcelona':'top 4', 'Atl\u00e9tico Madrid':'top 4', 'Real Madrid':'top 4', 'Valencia CF':'top 4',\n                                       'Real Sociedad':'mid 4', 'Real Betis':'mid 4', 'Deportivo Alav\u00e9s':'mid 4', 'SD Eibar':'mid 4',\n                                       'RC Celta':'bottom 4', 'Girona FC':'bottom 4', 'SD Huesca':'bottom 4', 'Rayo Vallecano':'bottom 4'})\n\ndf_clubs.club.value_counts()","464fc210":"# X - all features except the club name , y - Club's name\nX = df_clubs.iloc[:, 1:].values\ny = df_clubs.club.values\n\n# 80\/20 train & test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state = 1)\n\n# Standardizing the Data on the training set only\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\n\n# Scaling both the training and the testing set\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","82a2f375":"from sklearn.linear_model import LogisticRegression\n\n# Intializing the Logistic Regression Model\nlr = LogisticRegression(random_state = 1, max_iter = 500)\n\n# Train the Model\nlr.fit(X_train, y_train)\n\n# Getting the prediction\ny_pred = lr.predict(X_test)","985870cd":"from sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.model_selection import cross_val_score\n\nprint(\"-----------Confusion matrix-----------\")\nprint(pd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True))\nprint(\"--------------------------------------\")\n\nprint(\"Test set accuracy: {:.2f}\".format(accuracy_score(y_test, y_pred)))\nprint(\"=======================================\")\n\n# 10 fold CV\nacc = cross_val_score(lr, X_test, y_test, cv=10)\nprint(\"\\n10-fold CV accuracy for each fold\\n {}\".format(acc))\nprint(\"\\n--------------------------------------\")\nprint(\"10-fold CV Average Accuracy: {:.2f}\".format(acc.mean()))","312418db":"df = pd.read_csv(\"\/kaggle\/input\/fifa-20-complete-player-dataset\/players_20.csv\")\n\n# Extracting player's name and few of the continous variables\ndf = df[['club', 'overall', 'potential', 'value_eur', 'wage_eur', 'international_reputation']]\n\n# Replacing null values with the mean\ndf = df.fillna(df.mean())","db0a3768":"# Selecting the Top 4, Mid 4, and Bottom 4 clubs\n\ndf_clubs = df[(df.club =='FC Barcelona') | (df.club =='Atl\u00e9tico Madrid') | (df.club =='Real Madrid') | (df.club == 'Valencia CF') |\n              (df.club =='Real Sociedad') | (df.club =='Real Betis') | (df.club =='Deportivo Alav\u00e9s') | (df.club == 'SD Eibar') |\n              (df.club == 'RC Celta') |(df.club == 'Girona FC') | (df.club == 'SD Huesca') | (df.club == 'Rayo Vallecano')]\n\n# Categorizing the Top 4, Mid 4, Bottom 4 clubs\n\ndf_clubs.club = df_clubs.club.replace({'FC Barcelona':'top 4', 'Atl\u00e9tico Madrid':'top 4', 'Real Madrid':'top 4', 'Valencia CF':'top 4',\n                                       'Real Sociedad':'mid 4', 'Real Betis':'mid 4', 'Deportivo Alav\u00e9s':'mid 4', 'SD Eibar':'mid 4',\n                                       'RC Celta':'bottom 4', 'Girona FC':'bottom 4', 'SD Huesca':'bottom 4', 'Rayo Vallecano':'bottom 4'})\n\ndf_clubs.club.value_counts()","c6e391d7":"# X - All features except the club's name , y - Club's name\nX = df_clubs.iloc[:, 1:].values\ny = df_clubs.club.values\n\n# Training and Testing split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state = 1)\n\n# Standardizing using the training set\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\n\n# Scaling both the training and testing set\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n\nfrom sklearn.linear_model import LogisticRegression\n\n# Intializing the Logisitic Regression Model\nlr = LogisticRegression(random_state = 1, max_iter = 500)\n\n# Training the Model\nlr.fit(X_train, y_train)\n\n# Get Predicition\ny_pred = lr.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.model_selection import cross_val_score\n\nprint(\"-----------Confusion matrix-----------\")\nprint(pd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True))\nprint(\"--------------------------------------\")\n\nprint(\"\\nTest set accuracy: {:.2f}\".format(accuracy_score(y_test, y_pred)))\nprint(\"=======================================\")\n\n# 10 fold CV\nacc = cross_val_score(lr, X_test, y_test, cv=10)\nprint(\"\\n10-fold CV accuracy for each fold\\n {}\".format(acc))\nprint(\"\\n--------------------------------------\")\nprint(\"10-fold CV Average Accuracy: {:.2f}\".format(acc.mean()))","7f10dee7":"## Using Less number of Predictors","2b96bebb":"## Model Evaluation","a9fb32bf":"## Applying the Logistic Regression","f391bffd":"## Train and Test Split","4d00142f":"## Data Cleaning and Pre-Processing","6e09ef54":"\nSelect Top 4, Mid 4, and Bottom 4 Clubs in the La Liga (Spanish League) (bases on 18 - 19 season)\n\n* Top 4: FC Barcelona, Atl\u00e9tico Madrid, Real Madrid, Valencia\n\n* Mid 4: Real Sociedad, Real Betis, Deportivo Alaves, Eibar\n\n* Bottom 4: Celta Vigo, Girona, Huesca, Rayo Vallecano"}}