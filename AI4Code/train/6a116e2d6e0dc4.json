{"cell_type":{"97962f86":"code","9864c502":"code","658ffb80":"code","610f59d0":"code","a7ab1240":"code","9c8af02c":"code","aac42f6d":"code","c2a7bcc7":"code","ee8597a7":"code","64c3c520":"code","b6f2e416":"code","1dc9e2d3":"code","37e00075":"code","d81bb172":"code","047a6a10":"code","9ef9af71":"code","d0c5f83b":"code","07564dc5":"code","5670938b":"code","7eb8b799":"code","73a56a31":"code","e7557e43":"code","9f5b77f8":"code","d3f616bd":"code","390b7229":"code","b2a4667f":"code","8401028a":"code","403fb354":"code","6ccc068d":"code","c84e4776":"code","9d1658e0":"code","18f91ac3":"code","f1f45a50":"code","3a87ef98":"code","00561231":"code","5bbf555c":"code","d2d89990":"code","94aff434":"code","0f64fbf1":"code","c4a4efe4":"code","cd6d0cc7":"code","83b525ac":"code","6f33e1b0":"code","1bd1b334":"code","4ed3fba4":"code","764e2825":"code","530af173":"code","cdf72e00":"code","48f976e3":"code","45dfbbb7":"code","8c0a675e":"code","f5d37719":"code","d1864144":"code","ffb6733a":"code","d9e341f2":"code","7c0d9675":"code","d70d123e":"code","469bb639":"code","ff74eda4":"code","fd3d1c8b":"code","592570b5":"code","1c19895c":"code","df50d4ec":"code","944dd7f8":"code","a3c1c00a":"code","8f52e91e":"code","5fe5c4b2":"code","ef7b2087":"code","77a05680":"code","4b5d82e2":"code","6ed5a69c":"code","066efa9d":"code","0f4bf6ac":"code","246d05de":"code","e332793e":"code","1d52dfad":"markdown","1258a965":"markdown"},"source":{"97962f86":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9864c502":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport seaborn as sns","658ffb80":"data = pd.read_csv('..\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv')\ndata","610f59d0":"data.area_type.value_counts()","a7ab1240":"data = data.drop(['availability','balcony','society','area_type'],axis=1)\ndata","9c8af02c":"data.isnull().sum()","aac42f6d":"data = data.dropna()\ndata.isnull().sum()","c2a7bcc7":"data","ee8597a7":"data.info()","64c3c520":"data['size'].unique()","b6f2e416":"rooms=data['size'].str.split(expand=True)\ndata['bhk']=rooms[0];\ndata","1dc9e2d3":"data.info()","37e00075":"data.bhk = data.bhk.astype(int)\ndata","d81bb172":"data.info()","047a6a10":"data.bhk.unique()","9ef9af71":"data[data.bhk>20]","d0c5f83b":"data.total_sqft.unique()","07564dc5":"def is_float(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True","5670938b":"data[~data.total_sqft.apply(is_float)]","7eb8b799":"def average(x):\n    tokens = x.split('-')\n    if len(tokens) == 2:\n        return (float(tokens[0])+float(tokens[1]))\/2\n    try:\n        return float(x)\n    except:\n        return None","73a56a31":"final_data=data.copy()\nfinal_data.total_sqft=final_data.total_sqft.apply(average)\nfinal_data = final_data[data.total_sqft.notnull()]\nfinal_data","e7557e43":"final_data[final_data.total_sqft.isnull()]","9f5b77f8":"final_data","d3f616bd":"final_data['price_per_sqft']=final_data['price']*100000\/final_data['total_sqft']\nfinal_data","390b7229":"final_data.price_per_sqft.describe()","b2a4667f":"len(final_data.location.unique())","8401028a":"final_data.location = final_data.location.str.strip()\nloc_stats=final_data.location.value_counts()\nloc_stats","403fb354":"len(loc_stats[loc_stats<=10])","6ccc068d":"other = loc_stats[loc_stats<=10]\nfinal_data.location = final_data.location.apply(lambda x: 'other' if x in other else x)\nfinal_data.location.value_counts()","c84e4776":"len(final_data.location.unique())","9d1658e0":"final_data['sqft_per_bhk']=final_data.total_sqft\/final_data.bhk\nfinal_data=final_data[~(final_data.sqft_per_bhk<300)]\nfinal_data","18f91ac3":"final_data.price_per_sqft.describe()","f1f45a50":"mean_l =final_data.groupby('location')['price_per_sqft'].mean()\nmean_l","3a87ef98":"std_l =final_data.groupby('location')['price_per_sqft'].std()\nstd_l","00561231":"diff = mean_l-std_l\ndiff=diff.to_frame()\ndiff.to_csv('diff.csv')","5bbf555c":"diff = pd.read_csv('diff.csv')\ndiff","d2d89990":"final_data","94aff434":"def remove_pps_outliers(df):\n    df_out = pd.DataFrame()\n    for key, subdf in df.groupby('location'):\n        m = np.mean(subdf.price_per_sqft)\n        st = np.std(subdf.price_per_sqft)\n        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]\n        df_out = pd.concat([df_out,reduced_df],ignore_index=True)\n    return df_out","0f64fbf1":"final_data = remove_pps_outliers(final_data)\nfinal_data","c4a4efe4":"final_data.info()","cd6d0cc7":"mean = final_data.groupby('bhk')['sqft_per_bhk'].mean()\nmean","83b525ac":"plt.figure(figsize=(12,12))\nsns.barplot(final_data.bhk,final_data.sqft_per_bhk)","6f33e1b0":"plt.figure(figsize=(12,12))\nsns.histplot(final_data.price_per_sqft)","1bd1b334":"final_data.bath.value_counts()","4ed3fba4":"plt.figure(figsize=(10,6))\nsns.histplot(final_data.bath)","764e2825":"final_data[final_data.bath>10]","530af173":"final_data[final_data.bath>final_data.bhk+2]","cdf72e00":"final_data = final_data[final_data.bath<final_data.bhk+2]\nfinal_data","48f976e3":"data1 = final_data.drop(['size','price_per_sqft'],axis=1)\ndata2 = final_data.drop(['size','price_per_sqft','sqft_per_bhk'],axis=1)","45dfbbb7":"data1","8c0a675e":"data2","f5d37719":"dum1 = pd.get_dummies(data1.location)\ndum2 = pd.get_dummies(data2.location)\ndata1 = pd.concat([data1,dum1],axis=1)\ndata2=pd.concat([data2,dum2],axis=1)","d1864144":"data1.shape,data2.shape","ffb6733a":"data1","d9e341f2":"X=final_data.drop(['location','price','size'],axis=1)\ny=final_data.price","7c0d9675":"from sklearn.ensemble import ExtraTreesRegressor\net = ExtraTreesRegressor()\net.fit(X,y)","d70d123e":"et.feature_importances_","469bb639":"plt.figure(figsize=(12,6))\nsns.barplot(x=X.columns,y=et.feature_importances_)","ff74eda4":"X = data1.drop(['price','location'],axis=1)\ny = data1.price","fd3d1c8b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=10)","592570b5":"X","1c19895c":"from sklearn.linear_model import LinearRegression\nlr_clf = LinearRegression()\nlr_clf.fit(X_train,y_train)\nlr_clf.score(X_test,y_test)","df50d4ec":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits=5,test_size=0.2,random_state=0)\ncross_val_score(LinearRegression(),X,y,cv=cv)","944dd7f8":"from sklearn.model_selection import RandomizedSearchCV\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor","a3c1c00a":"model_params = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        },\n    'random_forest':{\n        'model': RandomForestRegressor(),\n        'params' : {\n         'n_estimators':[int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)],\n         'max_features':['auto','sqrt'],\n         'max_depth':[int(x) for x in np.linspace(5,30, num = 6)],\n        'min_samples_split':[2,5,10,15,100],\n        'min_samples_leaf':[1,2,5,10]\n        }\n    }}","8f52e91e":"scores =[]\n\nfor model_name, mp in model_params.items():\n    clf=RandomizedSearchCV(mp['model'],mp['params'],cv=cv,return_train_score=False)\n    clf.fit(X_train,y_train)\n    scores.append({\n        'model':model_name,\n        'best_score':clf.best_score_,\n        'best_params':clf.best_params_\n    })","5fe5c4b2":"df = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndf","ef7b2087":"df.to_csv(\"params.csv\")","77a05680":"from sklearn import metrics\nmodel = LinearRegression(normalize=False)\nmodel.fit(X_train,y_train)\npred=model.predict(X_test)\nscore = metrics.r2_score(pred,y_test)\nscore","4b5d82e2":"X = data2.drop(['price','location'],axis=1)\ny = data2.price","6ed5a69c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=10)","066efa9d":"from sklearn.linear_model import LinearRegression\nclf = LinearRegression()\nclf.fit(X_train,y_train)\nclf.score(X_test,y_test)","0f4bf6ac":"from xgboost import XGBRegressor\nxgb = XGBRegressor()\nxgb.fit(X_train,y_train)","246d05de":"xgb.score(X_train,y_train)","e332793e":"pred=xgb.predict(X_test)\nscore = metrics.r2_score(pred,y_test)\nscore","1d52dfad":"Feature Engineering","1258a965":"Outlier Removal: \nWe have kept our threshold to be 300 sqft per bhk"}}