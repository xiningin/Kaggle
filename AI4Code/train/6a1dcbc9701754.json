{"cell_type":{"3055b36c":"code","fec2ce46":"code","f238546b":"code","5a34c0a8":"code","be39f93f":"code","f5a2b54f":"code","4580544a":"code","1f874f30":"code","db3aba97":"code","1f11158f":"markdown","f2e370f1":"markdown","b6122093":"markdown","1737dd88":"markdown","c078d8b8":"markdown"},"source":{"3055b36c":"import pandas as pd\nimport numpy as np\nimport os.path\nfrom os import path\n\npd.set_option('display.max_rows', 500)\nif path.exists(\"\/kaggle\/input\/apache-hadoop-ozone-contributions\"):\n   os.chdir(\"\/kaggle\/input\/apache-hadoop-ozone-contributions\")\n","fec2ce46":"participants = pd.read_csv(\"github\/participant.csv\")\n\n\nprs = pd.read_csv(\"github\/prs.csv\")\nprs.createdAt = pd.to_datetime(prs.createdAt)\nprs.updatedAt = pd.to_datetime(prs.updatedAt)\nprs.closedAt = pd.to_datetime(prs.closedAt)\n\ncomments = pd.read_csv(\"github\/comments.csv\")\ncomments.createdAt = pd.to_datetime(comments.createdAt)\n\nroles = comments[[\"author\",\"role\"]].drop_duplicates()\nroles = roles.rename(columns={\"author\":\"login\"})\nroles = roles.set_index(\"login\")\n\nreviews = pd.read_csv(\"github\/reviews.csv\")\nreviews.updated = pd.to_datetime(reviews.updated)\nreviews[\"updated_month\"] = reviews.updated.dt.to_period(\"M\")\n\nallprs = prs\n# reviews.head()\n# comments.head()\n# roles.head()\n# prs.head()\n# participants.head()","f238546b":"# #Enable this section for date filter\n# startDate = \"2020-06-01\"\n# endDate = \"2020-06-30\"\n\n# prs = prs[prs[\"createdAt\"] > startDate]\n# prs = prs[prs[\"createdAt\"] < endDate]\n\n# comments = comments[comments[\"createdAt\"] > startDate]\n# comments = comments[comments[\"createdAt\"] < endDate]\n\n# reviews = reviews[reviews[\"updated\"] > startDate]\n# reviews = reviews[reviews[\"updated\"] > endDate]\n","5a34c0a8":"#Caclculate the combination of commented OR reviewer issue by a specific user\n\ncontribution_comments = comments[[\"number\",\"author\"]].drop_duplicates().rename(columns={\"author\":\"login\"})\ncontribution_comments.insert(2,\"type\",\"comment\")\n\ncontribution_reviews = reviews[[\"number\",\"login\"]].drop_duplicates()\ncontribution_reviews[\"type\"] = \"review\"\n\ncommented_or_reviewed_pr = pd.concat([contribution_comments,contribution_reviews])[[\"number\",\"login\"]].drop_duplicates()\n\ncommented_or_reviewed_pr = commented_or_reviewed_pr.set_index(\"number\").join(allprs[[\"number\",\"author\"]].set_index(\"number\"))\ncommented_or_reviewed_pr = commented_or_reviewed_pr[commented_or_reviewed_pr[\"author\"] != commented_or_reviewed_pr[\"login\"]][[\"login\"]].reset_index()\ncommented_or_reviewed_pr = commented_or_reviewed_pr.groupby(\"login\").count().rename(columns={\"number\":\"commented_or_reviewed_pr\"})\n","be39f93f":"p = prs[[\"number\",\"author\"]].drop_duplicates()\npr_per_login = p.groupby(\"author\").count().sort_values(\"number\", ascending=False)\npr_per_login = pr_per_login.rename(columns={\"author\":\"login\"})\npr_per_login = pr_per_login.reset_index().rename(columns={\"author\":\"login\",\"number\":\"created_pr\"}).set_index(\"login\")\npr_per_login\n\n#Comments only on PRs where the author is different\ncomments_filtered = comments.set_index(\"number\").join(prs[[\"number\",\"author\"]].set_index(\"number\"),rsuffix=\"pr\")\ncomments_filtered = comments_filtered[comments_filtered[\"author\"] != comments_filtered[\"authorpr\"]]\ncommented_pr = comments_filtered.reset_index()[[\"author\",\"number\",\"createdAt\"]].groupby([\"author\",\"number\"]).count().reset_index()[[\"number\",\"author\"]].groupby(\"author\").count()\n\ncommented_prs = comments_filtered.reset_index()[[\"author\",\"number\",\"createdAt\"]] \\\n   .groupby([\"author\",\"number\"]).count() \\\n   .reset_index()[[\"number\",\"author\"]] \\\n   .groupby(\"author\").count() \\\n   .reset_index().rename(columns={\"author\":\"login\",\"number\":\"prs_commented\"}) \\\n   .set_index(\"login\")\n\ncomments_all_per_login = comments[[\"author\",\"createdAt\",\"role\"]].groupby([\"author\",\"role\"]).count().sort_values(\"createdAt\",ascending=False)\ncomments_all_per_login = comments_all_per_login.reset_index().rename(columns={\"author\":\"login\",\"createdAt\":\"comments_all\"}).set_index(\"login\")\n\ncomments_other_per_login = comments_filtered[[\"author\",\"createdAt\"]].groupby([\"author\"]).count().sort_values(\"createdAt\",ascending=False)\ncomments_other_per_login = comments_other_per_login.reset_index().rename(columns={\"author\":\"login\",\"createdAt\":\"comments_for_others\"}).set_index(\"login\")\n\n\np = reviews[[\"number\",\"login\"]].drop_duplicates()\nreview_per_login = p.groupby(\"login\").count()\nreview_per_login = review_per_login.rename(columns={\"author\":\"login\", \"number\":\"reviewed_pr\"})\n\nactivity = comments_all_per_login.rename(columns={\"createdAt\":\"comments\"}).reset_index()\nactivity = activity.rename(columns={\"author\":\"login\"}).set_index(\"login\")\nactivity = activity \\\n  .join(comments_other_per_login) \\\n  .join(review_per_login) \\\n  .join(pr_per_login) \\\n  .join(commented_prs) \\\n  .join(commented_or_reviewed_pr) \\\n  .sort_values(\"created_pr\",ascending=False)\n\nactivity[\"ratio\"] = activity[\"commented_or_reviewed_pr\"] \/ activity[\"created_pr\"]\nactivity.sort_values(\"created_pr\", ascending=False)\n\n","f5a2b54f":"\nt = activity.sort_values(\"created_pr\", ascending=False)[\"created_pr\"].cumsum()\nt[t<prs.shape[0]*0.5]\n\n","4580544a":"a = activity[(activity[\"commented_or_reviewed_pr\"] <= activity[\"created_pr\"]) | activity[\"commented_or_reviewed_pr\"].isnull()].sort_values(\"created_pr\",ascending=False)\na[~a[\"created_pr\"].isnull()]\na.sort_values([\"role\",\"commented_or_reviewed_pr\"])","1f874f30":"pr_author_monthly = prs[[\"number\",\"author\",\"createdAt\"]].groupby([prs.createdAt.dt.to_period(\"M\"),\"author\"]).count().drop([\"createdAt\",\"number\"],axis=1).reset_index().rename(columns={\"createdAt\":\"month\"})\n\ncoment_author_monthly = comments[[\"author\",\"createdAt\"]].groupby([comments.createdAt.dt.to_period(\"M\"),\"author\"]).count().drop([\"createdAt\"],axis=1).reset_index().rename(columns={\"createdAt\":\"month\"})\nreviews_author_monthly = reviews[[\"login\",\"updated\"]].groupby([reviews.updated.dt.to_period(\"M\"),\"login\"]).count().drop([\"updated\"],axis=1).reset_index().rename(columns={\"updated\":\"month\",\"login\":\"author\"})\ncoment_author_monthly\nreviews_author_monthly\npd.concat([pr_author_monthly,coment_author_monthly,reviews_author_monthly]).drop_duplicates().groupby(\"month\").count()","db3aba97":"closed = prs[[\"number\",\"title\",\"closedAt\"]].groupby(prs.closedAt.dt.to_period(\"M\")).count().drop([\"title\",\"closedAt\"],axis=1).reset_index().rename({\"closedAt\":\"month\",\"number\":\"closed\"},axis=1).set_index(\"month\")\ncreated = prs[[\"number\",\"title\",\"createdAt\"]].groupby(prs.createdAt.dt.to_period(\"M\")).count().drop([\"title\",\"createdAt\"],axis=1).reset_index().rename({\"createdAt\":\"month\",\"number\":\"created\"},axis=1).set_index(\"month\")\nmonthly_pr = created.join(closed)\nmonthly_pr[\"increment\"] = monthly_pr[\"created\"] - monthly_pr[\"closed\"]\nmonthly_pr","1f11158f":"## People with created PRs > reviewed\/commented PRS","f2e370f1":"# Github Contributions per user\n\nNote: only events from apache\/hadoop-ozone repository are included. Earlier PRs\/comments are not here.","b6122093":"# Bus factor (number of contributors responsible for the 50% of the prs)","1737dd88":"# Number of PRs closed\/created per month","c078d8b8":"# Number of individual contributors per month\n\nNumber of different Github users who either created PR, commented PR, added review to a PR\n\nNote: only events from apache\/hadoop-ozone repository are included. Earlier PRs\/comments are not here."}}