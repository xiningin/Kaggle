{"cell_type":{"46b405e5":"code","df076200":"code","b4a7944e":"code","15c404bb":"code","a03b7bdb":"code","9d3ff2e9":"code","659ec9e7":"code","eff2ef0a":"code","d1fd1b1a":"code","99ef81eb":"code","91c27dd6":"code","4f260604":"code","cee6ecee":"markdown","896d1a0d":"markdown","5e9b986a":"markdown","611f3e0d":"markdown","8ed944b4":"markdown","41a0f995":"markdown","9f66dee8":"markdown","cf4c7b6e":"markdown"},"source":{"46b405e5":"!\/opt\/conda\/bin\/python3.7 -m pip install --upgrade pip -q\n!pip install \/kaggle\/input\/keras-applications\/ -q\n!pip install \/kaggle\/input\/efficientnet-git\/ -q","df076200":"import json\nimport math, re, os\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport albumentations as A\n\nfrom functools import partial\nfrom kaggle_datasets import KaggleDatasets\n\nimport tensorflow as tf\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.layers import (\n    Concatenate, Dense, BatchNormalization, \n    GlobalAveragePooling2D, Flatten, Input, \n    Activation, Conv2D, Add, Dropout, GlobalMaxPool2D)\nfrom tensorflow.keras.initializers import TruncatedNormal\nfrom tensorflow.keras.regularizers import l1, l2, l1_l2\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau,LearningRateScheduler\nfrom tensorflow.keras.applications import ResNet50, Xception, InceptionV3\n\nfrom efficientnet.keras import *\n\nBASE_DIR = \"\/kaggle\/input\/cassava-leaf-disease-classification\/\"\nTRAIN_DIR = \"\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\/\"\nTEST_DIR = \"\/kaggle\/input\/cassava-leaf-disease-classification\/test_images\/\"\nTRAIN_TF_DIR = \"\/kaggle\/input\/cassava-leaf-disease-classification\/train_tfrecords\/\"\n\nsub = pd.read_csv(f'{BASE_DIR}sample_submission.csv')\ntrain = pd.read_csv(os.path.join(BASE_DIR, \"train.csv\"))","b4a7944e":"def count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\ndef decode_image(image):\n    image = tf.image.decode_jpeg(image, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.reshape(image, [*IMAGE_SIZE, 3])\n    \n    return image\n\ndef read_tfrecord(example, labeled):\n    tfrecord_format = {\n        \"image\": tf.io.FixedLenFeature([], tf.string),\n        \"target\": tf.io.FixedLenFeature([], tf.int64)\n    } if labeled else {\n        \"image\": tf.io.FixedLenFeature([], tf.string),\n        \"image_name\": tf.io.FixedLenFeature([], tf.string)\n    }\n    example = tf.io.parse_single_example(example, tfrecord_format)\n    image = decode_image(example['image'])\n    if labeled:\n        label = tf.cast(example['target'], tf.int32)\n        return image, label\n    idnum = example['image_name']\n    return image, idnum\n\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTOTUNE) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(partial(read_tfrecord, labeled=labeled), num_parallel_calls=AUTOTUNE)\n    return dataset\n\ndef data_augment(image, label):\n    # Thanks to the dataset.prefetch(AUTO) statement in the following function this happens essentially for free on TPU. \n#     Data pipeline code is executed on the \"CPU\" part of the TPU while the TPU itself is computing gradients.\n#     image = transform1(image=image)\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_brightness(image, 0.2)\n    image = tf.image.adjust_contrast(image, 1.5)\n    image = tf.image.random_flip_up_down(image)\n    \n    return image, label\n\ndef get_training_dataset(file_names, augmenatate=False):\n    dataset = load_dataset(file_names, labeled=True)  \n    if augmenatate:\n        dataset = dataset.map(data_augment, num_parallel_calls=AUTOTUNE)  \n        dataset = dataset.repeat()\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTOTUNE)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTOTUNE)\n    return dataset","15c404bb":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n    \n    GCS_PATH = KaggleDatasets().get_gcs_path('cassava-leaf-disease-classification')\n    GCS_PATH_AUG = KaggleDatasets().get_gcs_path('cassavaaug')\n    \n    # Getting the File Names\n    TRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train_tfrecords\/ld_train*.tfrec')\n    TEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test_tfrecords\/ld_test*.tfrec')\n    AUG_FILENAMES = tf.io.gfile.glob(GCS_PATH_AUG + '\/*.tfrec')\nexcept:\n    strategy = tf.distribute.get_strategy()\n    \nprint('Number of replicas:', strategy.num_replicas_in_sync)\n\n\nAUTOTUNE = tf.data.experimental.AUTOTUNE\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nIMAGE_SIZE = [512, 512]\nCLASSES = ['0', '1', '2', '3', '4']\nEPOCHS = 25","a03b7bdb":"with open(os.path.join(BASE_DIR, \"label_num_to_disease_map.json\")) as file:\n    map_classes = json.loads(file.read())\n    map_classes = {int(k) : v for k, v in map_classes.items()}\n    \ntrain[\"class_name\"] = train[\"label\"].map(map_classes)\n\nplt.figure(figsize=(8, 4))\nsns.countplot(y=\"class_name\", data=train);","9d3ff2e9":"def efn():\n    inputs = Input(shape=(*IMAGE_SIZE, 3))\n    model = EfficientNetB0(include_top=False, input_tensor=inputs, weights='imagenet')\n\n    # Freeze the pretrained weights\n    model.trainable = False\n    \n    for layer in model.layers[-15:]:\n        if not isinstance(layer, BatchNormalization):\n            layer.trainable = True\n\n#     Rebuild top\n    x = GlobalAveragePooling2D(name=\"avg_pool\")(model.output)\n    x = BatchNormalization()(x)\n    \n    x = Dropout(0.5)(x)\n    preds = []\n    for i in range(12):\n        x = Dense(2 ** (i\/\/3+6), kernel_initializer=TruncatedNormal(0, 1e-5, 10211))(x)\n        x = BatchNormalization()(x)\n        x = Dropout(0.1)(x)\n        pred = Dense(5, activation=\"sigmoid\", kernel_initializer=TruncatedNormal(0, 5\/(i+1), 231))(x)\n        preds.append(pred)\n        \n    outputs = Concatenate()(preds)\n    \n    outputs = Dense(5, activation=\"softmax\", \n                    name=\"prediction\", \n                    kernel_initializer=TruncatedNormal(0, 1e-2, 121))(outputs)\n\n    # Compile\n    model = tf.keras.Model(inputs, outputs, name=\"EfficientNetB0-v4\")\n    \n    optimizer = Adam(learning_rate=9e-4)\n    \n    \n    model_metrics = [tf.keras.metrics.SparseCategoricalAccuracy(name=\"spa\")]\n    model_loss = tf.keras.losses.SparseCategoricalCrossentropy(name='scc')\n    model.compile(\n        optimizer=optimizer, loss=model_loss, metrics=model_metrics\n    )\n    \n    return model","659ec9e7":"with strategy.scope(): \n    model = efn()\n        \n#     model = tf.keras.models.load_model('\/kaggle\/input\/nncassava\/efnet05-01.h5')\n#     tf.keras.backend.set_value(model.optimizer.learning_rate, 1e-4)  \n#     model.optimizer.learning_rate = 1e-4\n\n# model.summary()","eff2ef0a":"# model.summary()","d1fd1b1a":"hist = model.fit(\n            get_training_dataset(TRAINING_FILENAMES),\n            epochs=800,\n            verbose=1,\n            callbacks = [\n                EarlyStopping(monitor='spa', \n                              patience=100, \n                              restore_best_weights=True, \n                              min_delta=1e-3, \n                              verbose=True,\n                              mode='max'\n                             ),\n                ReduceLROnPlateau(monitor='spa',\n                                  factor=0.95, \n                                  patience=5, \n                                  verbose=0,\n                                  mode='max',\n                                  min_delta=1e-3, \n                                  cooldown=0,\n                                  min_lr=1e-8)\n            ]\n        )","99ef81eb":"pd.DataFrame(hist.history).loc[:, ['spa']].plot(title=\"Accuracy\")","91c27dd6":"model.save('\/kaggle\/working\/efnet01-05.h5')","4f260604":"testing_dataset = get_test_dataset()\n\ndef to_float32(image, label):\n    return tf.cast(image, tf.float32), label\ntest_ds = get_test_dataset(ordered=True) \ntest_ds = test_ds.map(to_float32)\n\n\nprint('Computing predictions...')    \ntest_images_ds = testing_dataset\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)\n\nNUM_TEST_IMAGES = len(TEST_FILENAMES)\nprint('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')\n!head submission.csv","cee6ecee":"# Submission","896d1a0d":"# Traininig","5e9b986a":"# Sanity Check","611f3e0d":"# EDA","8ed944b4":"# Utilities","41a0f995":"# Modeling","9f66dee8":"This is the notebook where the models are trained.","cf4c7b6e":"# Global Setup"}}