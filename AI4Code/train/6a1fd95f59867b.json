{"cell_type":{"5a4c84b1":"code","cf0cb62e":"code","02920e84":"code","cc8f21f1":"code","8058d949":"code","89428c35":"code","73c5f998":"code","cc8bfb39":"code","53a93f34":"code","f3767dac":"code","266694a3":"code","3a4fd735":"code","3466f32c":"code","41c824cf":"code","a92c4b6c":"code","f98e31d5":"code","20f6cf7a":"code","bb110650":"code","baa1786f":"code","c78e226a":"code","eda86ad9":"code","b9e7859d":"code","1ae4b8d3":"code","09c19e94":"code","7aa11a2e":"code","d843c9e8":"code","41c3f8f8":"code","221f06a0":"code","44f67e6a":"code","e68db201":"code","31279721":"code","994d28ee":"code","fc0b8484":"code","d26d231b":"code","3e29755e":"code","bd4eaf65":"code","35634925":"code","e3a5499c":"code","0b0c62f2":"code","aebf10fb":"code","10e59314":"code","89efe4e7":"code","725e503a":"code","f399a840":"code","805e8fba":"code","2eadb037":"code","67d848e4":"code","20147cbd":"code","6229551a":"code","dfd3247d":"code","11960348":"code","7e139191":"markdown","2b1b83d2":"markdown","020bf116":"markdown","87c60dc4":"markdown","b02b779e":"markdown","fd158416":"markdown","ee69ce8d":"markdown","5bf730f4":"markdown","a9dead26":"markdown","daa39ad8":"markdown","fab6e073":"markdown","84115bfc":"markdown","69e6e8d8":"markdown","4a1cf67f":"markdown","8e413639":"markdown","5ab912c6":"markdown","1a39f273":"markdown","bcd30704":"markdown","90182bc9":"markdown","7945870b":"markdown","fa18b32a":"markdown","fd8b09ba":"markdown","05f34887":"markdown","1e055e7f":"markdown","777ae80a":"markdown","2f1bb831":"markdown","170561b2":"markdown","c02a4693":"markdown","e0d2d98c":"markdown","6a6700c9":"markdown","c9426861":"markdown","f0802547":"markdown","3cfbc27d":"markdown","9ea46b66":"markdown","3e613ad1":"markdown","5b66a2d5":"markdown","db45c04b":"markdown","f53e171e":"markdown","e989c7d2":"markdown","8fed0b7e":"markdown","c434cd90":"markdown","121208fd":"markdown","036a08c3":"markdown","4d0cb2d9":"markdown","1fa3b0cf":"markdown","128abb9f":"markdown","7a6211f5":"markdown","e7cc3d21":"markdown","5b451385":"markdown","074a7b6a":"markdown","d9c94038":"markdown","70b0d67e":"markdown","103fd321":"markdown"},"source":{"5a4c84b1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.rcParams['figure.figsize'] = (10,8)\nimport os\nimport glob\nimport pydicom","cf0cb62e":"train = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv')\ntest = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv')\nsub = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv')\n\ntrain_dir = '..\/input\/osic-pulmonary-fibrosis-progression\/train'\ntest_dir = '..\/input\/osic-pulmonary-fibrosis-progression\/test'","02920e84":"#Checking dimensions of all datasets\n\ntrain.shape, test.shape, sub.shape","cc8f21f1":"# Exploring train data\ntrain.head()","8058d949":"# Exploring test data\ntest","89428c35":"# Explore sample submission\nsub.head()","73c5f998":"# Checking the number of records in sample submission for a patient\nsub_patient1 = sub[sub['Patient_Week'].str.contains('ID00419637202311204720264')]\nsub_patient1.info()","cc8bfb39":"# Checking the range of values for week \nsub_patient1.head(1), sub_patient1.tail(1)","53a93f34":"# Checking for null values\ntrain.isnull().sum()","f3767dac":"# Check number of unique patients in train data\ntrain['Patient'].nunique()","266694a3":"#Check types of features available in the dataset\ntrain.dtypes","3a4fd735":"#plt.hist(train['FVC'])\nsns.distplot(train['FVC'],hist=False,color='darkred')\nplt.title('FVC Distribution')","3466f32c":"df = train.groupby('Patient').count()['Weeks'].value_counts()\ndf","41c824cf":"# Lets check number of males\/females in the dataset\nsizes = [len(train[train['Sex']=='Male']), len(train[train['Sex']=='Female'])]\nexplode = (0.1,0) #explde first slice\ncolors = ['blue','pink']\n\nplt.pie(sizes, explode=explode, labels= train['Sex'].unique(), colors= colors, autopct= '%1.1f%%', \n        shadow=True, startangle=140)\nplt.axis('equal')\nplt.title('Pie Chart for Gender Distribution')\nplt.show()","a92c4b6c":"train['SmokingStatus'].value_counts()","f98e31d5":"sizes = [len(train[train['SmokingStatus']=='Ex-smoker']), len(train[train['SmokingStatus']=='Never smoked']), \n        len(train[train['SmokingStatus']=='Currently smokes'])]\nexplode = (0,0,0.1)\ncolors = ['blue','red','green']\nplt.pie(sizes, explode=explode, colors = colors, labels= train['SmokingStatus'].unique(), autopct='%1.1f%%', \n        shadow=True, startangle=140)\n\nplt.axis('equal')\nplt.title('Pie Chart for Smoking Status distribution')\nplt.show()","20f6cf7a":"train['Age'].min(), train['Age'].max()","bb110650":"f, (ax1, ax2) = plt.subplots(1, 2, figsize = (16,6))\n\n#Patient age group\nageGroupLabel = 'Below 60', '60-70', '70-80', 'Above 80'\n\nbelow60 = len(train[train.Age<60])\nsixty_to_seventy = len(train[(train['Age']>=60) & (train['Age']<= 70)])\nseventy_to_eighty = len(train[(train['Age']>70) & (train['Age']<= 80)])\nabove80 = len(train[train.Age>80])\n\npatientNumbers = [below60, sixty_to_seventy, seventy_to_eighty,above80]\nexplode = (0,0,0,0.1)\ncolors = ['green','indigo','blue','red']\n\n#Draw the pie chart\nax1.pie(patientNumbers, explode=explode, colors= colors, labels= ageGroupLabel, autopct = '%1.2f',startangle = 90)\n\n#Aspect ratio\nax1.axis('equal')\n\n# Distribution plot for age\nsns.distplot(train['Age'],hist= False, color='red')\nplt.suptitle('Age Distribution')\nplt.show()\n","baa1786f":"train['Weeks'].min(), train['Weeks'].max()","c78e226a":"# Dividing weeks into bins of 10 to visualize\n\nbelow10 = len(train[train['Weeks']<=10])\neleven_20 = len(train[(train['Weeks']>=11) & (train['Weeks']<= 20)])\ntwentyone_30 = len(train[(train['Weeks']>20) & (train['Weeks']<= 30)])\nthirtyone_40 = len(train[(train['Weeks']>30) & (train['Weeks']<= 40)])\nfortyone_50 = len(train[(train['Weeks']>40) & (train['Weeks']<= 50)])\nfiftyone_60 = len(train[(train['Weeks']>50) & (train['Weeks']<= 60)])\nsixtyone_70 = len(train[(train['Weeks']>60) & (train['Weeks']<= 70)])\nseventyone_80 = len(train[(train['Weeks']>70) & (train['Weeks']<= 80)])\neightyone_90 = len(train[(train['Weeks']>80) & (train['Weeks']<= 90)])\nninetyone_100 = len(train[(train['Weeks']>90) & (train['Weeks']<= 100)])\nhundredone_110 = len(train[(train['Weeks']>100) & (train['Weeks']<= 110)])\nhundredten_120 = len(train[(train['Weeks']>110) & (train['Weeks']<= 120)])\nabove120 = len(train[train.Weeks>120])\n\nsizes = [below10, eleven_20, twentyone_30, thirtyone_40, fortyone_50, fiftyone_60,sixtyone_70,\n         seventyone_80,eightyone_90,ninetyone_100,hundredone_110,hundredten_120,above120]\nlabels =  ['below10','eleven_20', 'twentyone_30', 'thirtyone_40', 'fortyone_50', 'fiftyone_60','sixtyone_70',\n'seventyone_80','eightyone_90',\n'ninetyone_100','hundredone_110','hundredten_120','above120']\n\nfig1, (ax1, ax2)= plt.subplots(1,2,figsize=(15, 10))\ntheme = plt.get_cmap('prism')\nax1.set_prop_cycle(\"color\", [theme(1. * i \/ len(sizes)) for i in range(len(sizes))])\n_, _ = ax1.pie(sizes, startangle=90)\n\nax1.axis('equal')\ntotal = sum(sizes)\nax1.legend(\n    loc='upper left',\n    labels=['%s, %1.1f%%' % (\n        l, (float(s) \/ total) * 100) for l, s in zip(labels, sizes)],\n    prop={'size': 11},\n    bbox_to_anchor=(0.0, 1),\n    bbox_transform=fig1.transFigure\n)\n\n# distribution plot for Weeks\nsns.distplot(train['Weeks'], hist = False, color = \"indigo\")\nplt.suptitle(\"Weeks Distribution\")\n\nplt.show()\n","eda86ad9":"# Heatmap\ncorrMatrix = train.corr()\nmask = np.triu(corrMatrix)\nsns.heatmap(corrMatrix,annot=True,cmap='coolwarm',\n           linewidths=1, cbar=False, fmt='.1f',\n           mask=mask)\nplt.show()","b9e7859d":"# pair plot\nsns.pairplot(train)","1ae4b8d3":"sns.pairplot(train,hue='SmokingStatus')\nplt.show()","09c19e94":"sns.pairplot(train,hue='Sex')\nplt.show()","7aa11a2e":"df_100 = train[train['Patient']==train['Patient'][100]]\nsns.pairplot(df_100)\nplt.show()","d843c9e8":"grp_sex  = train.groupby('Sex')\n\n#draw a plot to display mean of FVC for males and females\nsplot = sns.barplot(x=train['Sex'].unique(),y= grp_sex['FVC'].mean())\n\nplt.xlabel(\"Sex\",fontsize=30)\nplt.ylabel(\"Mean FVC\",fontsize=30)\nplt.title(\"Mean FVC Males vs Mean FVC Femailes\")\nplt.show()","41c3f8f8":"grp_smoking = train.groupby('SmokingStatus')\n\nsplot = sns.barplot(x= train['SmokingStatus'].unique(),y=grp_smoking['FVC'].mean())\n\nplt.xlabel(\"Smoking Status\",fontsize=30)\nplt.ylabel(\"Mean FVC\",fontsize=30)\nplt.title(\"Mean FVC for different Smoking categiries\")\nplt.show()","221f06a0":"plt.figure(figsize=(12,8))\n\n#Creating bins for weeks\ntrain['Weeks_bins'] = pd.cut(train['Weeks'],13, duplicates='drop')\n\n#Group the data by bins\ngrp_weeks = train.groupby('Weeks_bins')\n\n#Drawing barplots\nsplot = sns.barplot(x=train['Weeks_bins'].unique(),y=grp_weeks['FVC'].mean())\n\nplt.xlabel(\"Weeks Bins\",fontsize=30)\nplt.ylabel(\"Mean FVC\",fontsize=30)\nplt.title(\"Mean FVC for different Weeks bins\")\nplt.show()","44f67e6a":"#Creating bins\ntrain['Age_bins'] = pd.cut(train['Age'],4,duplicates='drop')\n\n#Group by Age bins\ngrp_Age = train.groupby('Age_bins')\n\n#Drawing plot\nsplot = sns.barplot(x= train['Age_bins'].unique(),y=grp_Age['FVC'].mean())\n\nplt.xlabel(\"Age Bins\",fontsize=30)\nplt.ylabel(\"Mean FVC\",fontsize=30)\nplt.title(\"Mean FVC for different Age bins\")\nplt.show()","e68db201":"p_id = list(train['Patient'].sample(3))\np_id","31279721":"# Drawing the distribution of FVC over weeks for a randomly selected patient 1\n\nplt.plot(train[train['Patient']==p_id[0]].Weeks, train[train['Patient']==p_id[0]].FVC,\n            color='darkblue')\n    \nplt.xlabel('Weeks',fontsize=30)\nplt.ylabel('FVC',fontsize=30)\nplt.title('FVC for Patient: '+p_id[0])\nplt.show()","994d28ee":"# Drawing the distribution of FVC over weeks for a randomly selected patient 2\n\nplt.plot(train[train['Patient']==p_id[1]].Weeks, train[train['Patient']==p_id[1]].FVC,\n            color='darkgreen')\n    \nplt.xlabel('Weeks',fontsize=30)\nplt.ylabel('FVC',fontsize=30)\nplt.title('FVC for Patient: '+p_id[1])\nplt.show()","fc0b8484":"# Drawing the distribution of FVC over weeks for a randomly selected patient 1\n\nplt.plot(train[train['Patient']==p_id[2]].Weeks, train[train['Patient']==p_id[2]].FVC,\n            color='purple')\n    \nplt.xlabel('Weeks',fontsize=30)\nplt.ylabel('FVC',fontsize=30)\nplt.title('FVC for Patient: '+p_id[2])\nplt.show()","d26d231b":"# Checking the contents of train directory\np_sizes = [] #list of number of dcm files present for each patient\n\nfor dir in os.listdir(train_dir):\n    print('Patient {} has {} scans'.format(dir, len(os.listdir(train_dir+ \"\/\"+ dir))))\n    p_sizes.append(len(os.listdir(train_dir+\"\/\"+dir)))\n    \nprint('----------')\nprint('Total number of patients {}. Total DCM files {}'.format(len(os.listdir(train_dir)),sum(p_sizes)))\n\n","3e29755e":"#Visualizing DICOM count per patient\np = sns.color_palette()\nplt.hist(p_sizes,color=p[2])\nplt.xlabel('Count of DCM files')\nplt.ylabel('Number of patients')\nplt.title('Histogram of DICOM count per patient-Training Data')","bd4eaf65":"# Checking the contents of test directory\np_sizes = [] #list of number of dcm files present for each patient\n\nfor dir in os.listdir(test_dir):\n    print('Patient {} has {} scans'.format(dir, len(os.listdir(test_dir+ \"\/\"+ dir))))\n    p_sizes.append(len(os.listdir(test_dir+\"\/\"+dir)))\n    \nprint('----------')\nprint('Total number of patients {}. Total DCM files {}'.format(len(os.listdir(test_dir)),sum(p_sizes)))","35634925":"#Visualizing DICOM count per patient - Test Data\np = sns.color_palette()\nplt.hist(p_sizes,color=p[4])\nplt.xlabel('Count of DCM files')\nplt.ylabel('Number of patients')\nplt.title('Histogram of DICOM count per patient-Test Data')","e3a5499c":"sizes = [os.path.getsize(dcm)\/1000000 for dcm in glob.glob(train_dir+\"\/*\/*.dcm\")]\n\nprint('DCM File sizes: min {:.3} MB, max {:.3} MB, avg {:.3} MB, std {:.3} MB'.format(\n        np.min(sizes),np.max(sizes),np.mean(sizes),np.std(sizes)))","0b0c62f2":"#read a dcm file for patient ID00368637202296470751086\ndcm = '\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00368637202296470751086\/270.dcm'\nprint('Filename: {}'.format(dcm))\ndcm = pydicom.read_file(dcm)","aebf10fb":"print(dcm)","10e59314":"#display the image read above\nimg = dcm.pixel_array\nimg[img==-2000] = 0\n\nplt.axis('off')\nplt.imshow(img)\nplt.show()\n\nplt.axis('off')\nplt.imshow(-img) #invert colors with - \nplt.show()","89efe4e7":"#Helper function\ndef dicom_to_image(filename):\n    dcm = pydicom.read_file(filename)\n    img = dcm.pixel_array\n    img[img==-2000] == 0\n    return img","725e503a":"#Lets display 20 images at random\nfiles = glob.glob(train_dir+\"\/*\/*.dcm\")\n\nf,plots = plt.subplots(4,5, sharex='col', sharey='row',figsize=(10,8))\n\nfor i in range(20):\n    plots[i\/\/5, i%5].axis('off')\n    plots[i\/\/5, i%5].imshow(dicom_to_image(np.random.choice(files)), cmap=plt.cm.bone)","f399a840":"#function to sort patient dcm images\ndef get_slice_location(dcm):\n    return float(dcm[0x0020, 0x1041].value)\n\n#Return a list of images for given patient in ascending order of slice location\ndef load_patient(patient_id):\n    files = glob.glob(train_dir+'\/'+patient_id+'\/*.dcm')\n    imgs={}\n    for f in files:\n        dcm = pydicom.read_file(f)\n        img = dcm.pixel_array\n        img[img== -2000] =0\n        sl= get_slice_location(dcm)\n        imgs[sl] = img\n        \n    \n    sorted_imgs = [x[1] for x in sorted(imgs.items(), key=lambda x: x[0])]\n    return sorted_imgs","805e8fba":"#display all the images for patient ID00210637202257228694086\npat = load_patient('ID00210637202257228694086')\nf, plots = plt.subplots(31, 10, sharex='col', sharey='row', figsize=(10, 31))\nfor i in range(303):\n    plots[i \/\/ 10, i % 10].axis('off')\n    plots[i \/\/ 10, i % 10].imshow(pat[i], cmap=plt.cm.bone)\n    ","2eadb037":"import matplotlib.animation as animation\nfrom IPython.display import HTML","67d848e4":"#Stack up all 2D slices to make up the 3D Volume\ndef load_scan(patient_name):\n    \n    patient_directory = sorted(os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{patient_name}'), key=(lambda f: int(f.split('.')[0])))\n    volume = np.zeros((len(patient_directory), 512, 512))\n\n    for i, img in enumerate(patient_directory):\n        img_slice = pydicom.dcmread(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{patient_name}\/{img}')\n        volume[i] = img_slice.pixel_array\n            \n    return volume\n","20147cbd":"patient_scan = load_scan('ID00368637202296470751086')","6229551a":"fig = plt.figure(figsize=(8, 8))\n\nimgs = []\nfor ps in patient_scan:\n    img = plt.imshow(ps, animated=True, cmap=plt.cm.bone)\n    plt.axis('off')\n    imgs.append([img])","dfd3247d":"vid = animation.ArtistAnimation(fig, imgs, interval=25, blit=False, repeat_delay=1000)","11960348":"# lets play the video \nHTML(vid.to_html5_video())","7e139191":"It is clear that almost 50% of the patients got their FVC checked between week -5 to 25.","2b1b83d2":"**Lets Plot Some More Random Images**","020bf116":"It is clear that submission file consists of records for each patient from week -12 to 133.","87c60dc4":"# DICOM Files","b02b779e":"We can say that FVC and Percent have a decent positive correlation. It seems FVC is more when the percent value is higher.\nFVC is also correlated with Age inversly.","fd158416":"Most of the patient have got their FVC checked 9 times.","ee69ce8d":"We can retrieve image as a numpy array by calling dcm.pixel_array. We can replace -2000's, which are essentially NAs with Os.","5bf730f4":"Again FVC is evenly distributed for all age groups","a9dead26":"We can say now that our understanding is correct that FVC and Percent have decent correlation.","daa39ad8":"**Mean FVC - Age Wise**","fab6e073":"Test directory has 5 sub-folders, one for each patient. These folders have 1261 files in total.","84115bfc":"More than 70% of the records are of people who are either ex-smokers or currently smoke.","69e6e8d8":"**Checking the Size of DICOM Images**","4a1cf67f":"This is my first notebook for OSIC Fibrosis Progression challenge. Here I have done the EDA for both the tabular and image data.\n\nReferences : https:\/\/www.kaggle.com\/jagdmir\/insightful-eda-on-meta-data-dicom-files","8e413639":"**Categorical Variables : Sex, SmokingStatus**","5ab912c6":"We have read the image in the dcm variable. We can print this variable to see the information related to this image.","1a39f273":"**Mean FVC for Males vs Females**","bcd30704":" **Distribution of FVC**","90182bc9":"We can see images are in range of 0.2 MB to 3.4 MB. Average image size if 0.7 MB.","7945870b":"**Checking pairplot for a random sample**","fa18b32a":"There is no much variation in mean FVC for different weeks","fd8b09ba":"Most of the patients have between 20 to 620 DICOM files under their sub-directories. Very few patients have more than 800 files.","05f34887":"Majority of the patients belong to 60 to 80 age bracket. Very few patients are above 80.","1e055e7f":"**Checking Smoking Status**","777ae80a":"Mean FVC is least for patient who are smokers currently, which makes sense. But mean FVC for ex-smokers is higher than non smokers, which seems misleading.","2f1bb831":"Test directory has around 25 to 400 images per patient.","170561b2":"**Frequency of Patient Visits**","c02a4693":"FVC ranges from 1000 to 5000 mostly. Very few cases go beyond 5000. The peak values occur at around 2500.","e0d2d98c":"Above plots give us better understanding of the relationship between weeks and FVC. Randomly selected patients are showing overall downward trend in FVC as the weeks progress.","6a6700c9":"**FVC vs Weeks Plot for Randomly Selected Patients**","c9426861":"# Load Datasets","f0802547":"# Import Libraries","3cfbc27d":"79% of the patients are male.","9ea46b66":"DICOM stands for **Digital Imaging and Communications**. It is the standard for management of medical images. These files consist of images along with patient information. \n\nDCM files are basically 2-D slices of a single CT scan. Both the train and test directories have sub-directories for patients. Each sub-directory has multiple dicom images for a single patient, which make the CT scan for that patient.","3e613ad1":"Each patient has 146 entries across weeks for which we need to predict the FVC. Total number of patients in 5 and the total number of submissions will be 146*5 = 730.","5b66a2d5":"**Stakcking all Images of a Patient to Create a 3D Volume**","db45c04b":"**Loading a Random DICOM Image**","f53e171e":"Above plots backs the observation that FVC has strong correlation with Percent. None of the other features show\nsignificant correlation with FVC.","e989c7d2":"Excluding Patient column, we have total 5 independent features and 1 target feature, that is FVC.\nOut of 5 independent features, two are categorical (Sex, SmokingStatus) and rest are numeric features (Weeks, Percent,Age).\n\nLets explore all these features in the next section.","8fed0b7e":"**Distribution of Smoking Status**","c434cd90":"**Age-Wise Distribution**","121208fd":"DICOM files can be read and processed using pydicom package. DICOM files allow storing of metadata along with pixel values. ","036a08c3":"**Mean FVC - Week Wise**","4d0cb2d9":"**Pair Plot**","1fa3b0cf":"**Week-wise Distribution**","128abb9f":"Mean FVC is lower for males, but that can be because we do not have enough data for females","7a6211f5":"We have total 176 directories, one directory per patient. Total number is dicom images is 33026","e7cc3d21":"# Data Exploration","5b451385":"As we can see from the format of submission file, we need to predict the FVC mesasurement for each patient for each week, along with the confidence value.","074a7b6a":"**Drawing pairplots with different colors for Sex and Smoking Status**","d9c94038":"**Mean FVC for Diffetent SmokingStatus**","70b0d67e":"We can try to reconstruct the layers of body from which the images were taken, by taking a single patient and sorting the scans by Slice Location.","103fd321":"Number of unqiue patients in train dataset is 176."}}