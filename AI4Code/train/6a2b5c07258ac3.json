{"cell_type":{"7023fd64":"code","441adc71":"code","f78dc2de":"code","a68a53b6":"code","783464f7":"code","f0e70a16":"code","44d1e796":"code","a97e7828":"code","61f63626":"code","7c99a94f":"code","6eeab99f":"code","3a432cf6":"code","da5b8f22":"code","14f6856b":"code","4b53a873":"code","aed92714":"code","71ca14f7":"code","c07b52e0":"code","b010dc90":"code","45b06f54":"code","a744e423":"code","d4893666":"code","64d971c6":"code","de224ef0":"code","e2ce00db":"code","367cc950":"code","7d1d2b74":"code","8ec07a05":"code","c146fdb5":"code","a9576231":"code","94078efb":"code","8997a829":"code","552c7c7a":"code","127ed0da":"code","c584b57f":"code","0d407033":"code","9e6c9ef0":"code","c3ca47c1":"code","388f94dc":"code","82d53bca":"code","aedfcb29":"code","85ff04ad":"code","c03836e1":"code","232439a9":"code","5baff0d3":"code","cae82f60":"code","442fb0bc":"code","abc25e05":"code","9f89a905":"code","77173d54":"code","04564915":"code","9fef4579":"code","b1c5aedb":"code","4a0e46ca":"code","c52e6d89":"code","d429f8e1":"code","488ae3ff":"code","7c19ec6f":"code","7218720f":"code","4b6a3539":"markdown","5a130825":"markdown","dafc9ee9":"markdown","a65b858c":"markdown","56be6926":"markdown","537b05e5":"markdown","ff9a910c":"markdown","14f12f37":"markdown","21c342b3":"markdown","8a12818f":"markdown","ead214af":"markdown","a2f5ab2c":"markdown","543cad7a":"markdown","3801385c":"markdown","94ff4063":"markdown","f6b9e56d":"markdown","0fe14a22":"markdown","baa9014b":"markdown","d32941f3":"markdown","ff226ec7":"markdown","3e776935":"markdown","5f40593a":"markdown","a6f8afd6":"markdown","40eee05d":"markdown","2fe7360e":"markdown","33f26cfe":"markdown","b717b55d":"markdown","d68e8e12":"markdown","f0f47f66":"markdown"},"source":{"7023fd64":"# Supress Warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Import the numpy and pandas package\n\nimport numpy as np\nimport pandas as pd\n\n# Data Visualisation\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns","441adc71":"housing = pd.DataFrame(pd.read_csv(\"..\/input\/Housing.csv\"))","f78dc2de":"# Check the head of the dataset\nhousing.head()","a68a53b6":"housing.shape","783464f7":"housing.info()","f0e70a16":"housing.describe()","44d1e796":"# Checking Null values\nhousing.isnull().sum()*100\/housing.shape[0]\n# There are no NULL values in the dataset, hence it is clean.","a97e7828":"# Outlier Analysis\nfig, axs = plt.subplots(2,3, figsize = (10,5))\nplt1 = sns.boxplot(housing['price'], ax = axs[0,0])\nplt2 = sns.boxplot(housing['area'], ax = axs[0,1])\nplt3 = sns.boxplot(housing['bedrooms'], ax = axs[0,2])\nplt1 = sns.boxplot(housing['bathrooms'], ax = axs[1,0])\nplt2 = sns.boxplot(housing['stories'], ax = axs[1,1])\nplt3 = sns.boxplot(housing['parking'], ax = axs[1,2])\n\nplt.tight_layout()","61f63626":"# Outlier Treatment\n# Price and area have considerable outliers.\n# We can drop the outliers as we have sufficient data.","7c99a94f":"# outlier treatment for price\nplt.boxplot(housing.price)\nQ1 = housing.price.quantile(0.25)\nQ3 = housing.price.quantile(0.75)\nIQR = Q3 - Q1\nhousing = housing[(housing.price >= Q1 - 1.5*IQR) & (housing.price <= Q3 + 1.5*IQR)]","6eeab99f":"# outlier treatment for area\nplt.boxplot(housing.area)\nQ1 = housing.area.quantile(0.25)\nQ3 = housing.area.quantile(0.75)\nIQR = Q3 - Q1\nhousing = housing[(housing.area >= Q1 - 1.5*IQR) & (housing.area <= Q3 + 1.5*IQR)]","3a432cf6":"# Outlier Analysis\nfig, axs = plt.subplots(2,3, figsize = (10,5))\nplt1 = sns.boxplot(housing['price'], ax = axs[0,0])\nplt2 = sns.boxplot(housing['area'], ax = axs[0,1])\nplt3 = sns.boxplot(housing['bedrooms'], ax = axs[0,2])\nplt1 = sns.boxplot(housing['bathrooms'], ax = axs[1,0])\nplt2 = sns.boxplot(housing['stories'], ax = axs[1,1])\nplt3 = sns.boxplot(housing['parking'], ax = axs[1,2])\n\nplt.tight_layout()","da5b8f22":"sns.pairplot(housing)\nplt.show()","14f6856b":"plt.figure(figsize=(20, 12))\nplt.subplot(2,3,1)\nsns.boxplot(x = 'mainroad', y = 'price', data = housing)\nplt.subplot(2,3,2)\nsns.boxplot(x = 'guestroom', y = 'price', data = housing)\nplt.subplot(2,3,3)\nsns.boxplot(x = 'basement', y = 'price', data = housing)\nplt.subplot(2,3,4)\nsns.boxplot(x = 'hotwaterheating', y = 'price', data = housing)\nplt.subplot(2,3,5)\nsns.boxplot(x = 'airconditioning', y = 'price', data = housing)\nplt.subplot(2,3,6)\nsns.boxplot(x = 'furnishingstatus', y = 'price', data = housing)\nplt.show()","4b53a873":"plt.figure(figsize = (10, 5))\nsns.boxplot(x = 'furnishingstatus', y = 'price', hue = 'airconditioning', data = housing)\nplt.show()","aed92714":"# List of variables to map\n\nvarlist =  ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea']\n\n# Defining the map function\ndef binary_map(x):\n    return x.map({'yes': 1, \"no\": 0})\n\n# Applying the function to the housing list\nhousing[varlist] = housing[varlist].apply(binary_map)","71ca14f7":"# Check the housing dataframe now\n\nhousing.head()","c07b52e0":"# Get the dummy variables for the feature 'furnishingstatus' and store it in a new variable - 'status'\nstatus = pd.get_dummies(housing['furnishingstatus'])","b010dc90":"# Check what the dataset 'status' looks like\nstatus.head()","45b06f54":"# Let's drop the first column from status df using 'drop_first = True'\n\nstatus = pd.get_dummies(housing['furnishingstatus'], drop_first = True)","a744e423":"# Add the results to the original housing dataframe\n\nhousing = pd.concat([housing, status], axis = 1)","d4893666":"# Now let's see the head of our dataframe.\n\nhousing.head()","64d971c6":"# Drop 'furnishingstatus' as we have created the dummies for it\n\nhousing.drop(['furnishingstatus'], axis = 1, inplace = True)","de224ef0":"housing.head()","e2ce00db":"from sklearn.model_selection import train_test_split\n\n# We specify this so that the train and test data set always have the same rows, respectively\nnp.random.seed(0)\ndf_train, df_test = train_test_split(housing, train_size = 0.7, test_size = 0.3, random_state = 100)","367cc950":"from sklearn.preprocessing import MinMaxScaler","7d1d2b74":"scaler = MinMaxScaler()","8ec07a05":"# Apply scaler() to all the columns except the 'yes-no' and 'dummy' variables\nnum_vars = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking','price']\n\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])","c146fdb5":"df_train.head()","a9576231":"df_train.describe()","94078efb":"# Let's check the correlation coefficients to see which variables are highly correlated\n\nplt.figure(figsize = (16, 10))\nsns.heatmap(df_train.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","8997a829":"y_train = df_train.pop('price')\nX_train = df_train","552c7c7a":"# Importing RFE and LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression","127ed0da":"# Running RFE with the output number of the variable equal to 10\nlm = LinearRegression()\nlm.fit(X_train, y_train)","c584b57f":"rfe = RFE(lm, 6)             # running RFE\nrfe = rfe.fit(X_train, y_train)","0d407033":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","9e6c9ef0":"col = X_train.columns[rfe.support_]\ncol","c3ca47c1":"X_train.columns[~rfe.support_]","388f94dc":"# Creating X_test dataframe with RFE selected variables\nX_train_rfe = X_train[col]","82d53bca":"# Adding a constant variable \nimport statsmodels.api as sm  \nX_train_rfe = sm.add_constant(X_train_rfe)","aedfcb29":"lm = sm.OLS(y_train,X_train_rfe).fit()   # Running the linear model","85ff04ad":"#Let's see the summary of our linear model\nprint(lm.summary())","c03836e1":"# Calculate the VIFs for the model\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","232439a9":"vif = pd.DataFrame()\nX = X_train_rfe\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","5baff0d3":"y_train_price = lm.predict(X_train_rfe)","cae82f60":"res = (y_train_price - y_train)","442fb0bc":"# Importing the required libraries for plots.\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","abc25e05":"# Plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18)                         # X-label","9f89a905":"plt.scatter(y_train,res)\nplt.show()","77173d54":"# There may be some relation in the error terms.","04564915":"num_vars = ['area','stories', 'bathrooms', 'airconditioning', 'prefarea','parking','price']","9fef4579":"df_test[num_vars] = scaler.fit_transform(df_test[num_vars])","b1c5aedb":"y_test = df_test.pop('price')\nX_test = df_test","4a0e46ca":"# Adding constant variable to test dataframe\nX_test = sm.add_constant(X_test)","c52e6d89":"# Now let's use our model to make predictions.","d429f8e1":"# Creating X_test_new dataframe by dropping variables from X_test\nX_test_rfe = X_test[X_train_rfe.columns]","488ae3ff":"# Making predictions\ny_pred = lm.predict(X_test_rfe)","7c19ec6f":"from sklearn.metrics import r2_score \nr2_score(y_test, y_pred)","7218720f":"# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_pred', fontsize=16)                          # Y-label","4b6a3539":"# Housing Price Prediction Case Study","5a130825":"As you might have noticed, `area` seems to the correlated to `price` the most. Let's see a pairplot for `area` vs `price`.","dafc9ee9":"Recursive feature elimination","a65b858c":"## Model Building","56be6926":"#### Applying the scaling on the test sets","537b05e5":"This time, we will be using the **LinearRegression function from SciKit Learn** for its compatibility with RFE (which is a utility from sklearn)","ff9a910c":"### Dummy Variables","14f12f37":"### Building model using statsmodel, for the detailed statistics","21c342b3":"## Data Inspection","8a12818f":"So, now to check if the error terms are also normally distributed (which is infact, one of the major assumptions of linear regression), let us plot the histogram of the error terms and see what it looks like.","ead214af":"### RFE","a2f5ab2c":"## Model Evaluation","543cad7a":"### Dividing into X and Y sets for the model building","3801385c":"The variable `furnishingstatus` has three levels. We need to convert these levels into integer as well. \n\nFor this, we will use something called `dummy variables`.","94ff4063":"### Splitting the Data into Training and Testing Sets","f6b9e56d":"## Residual Analysis of the train data","0fe14a22":"- You can see that your dataset has many columns with values as 'Yes' or 'No'.\n\n- But in order to fit a regression line, we would need numerical values and not string. Hence, we need to convert them to 1s and 0s, where 1 is a 'Yes' and 0 is a 'No'.","baa9014b":"We can also visualise some of these categorical features parallely by using the `hue` argument. Below is the plot for `furnishingstatus` with `airconditioning` as the hue.","d32941f3":"## Data Cleaning","ff226ec7":"## Exploratory Data Analytics\n\nLet's now spend some time doing what is arguably the most important step - **understanding the data**.\n- If there is some obvious multicollinearity going on, this is the first place to catch it\n- Here's where you'll also identify if some predictors directly have a strong association with the outcome variable","3e776935":"### Rescaling the Features \n\nAs you saw in the demonstration for Simple Linear Regression, scaling doesn't impact your model. Here we can see that except for `area`, all the columns have small integer values. So it is extremely important to rescale the variables so that they have a comparable scale. If we don't have comparable scales, then some of the coefficients as obtained by fitting the regression model might be very large or very small as compared to the other coefficients. This might become very annoying at the time of model evaluation. So it is advised to use standardization or normalization so that the units of the coefficients obtained are all on the same scale. As you know, there are two common ways of rescaling:\n\n1. Min-Max scaling \n2. Standardisation (mean-0, sigma-1) \n\nThis time, we will use MinMax scaling.","5f40593a":"Now, you don't need three columns. You can drop the `furnished` column, as the type of furnishing can be identified with just the last two columns where \u2014 \n- `00` will correspond to `furnished`\n- `01` will correspond to `unfurnished`\n- `10` will correspond to `semi-furnished`","a6f8afd6":"#### Dividing into X_test and y_test","40eee05d":"\nWe can see that the equation of our best fitted line is:\n\n$ price = 0.35  \\times  area + 0.20  \\times  bathrooms + 0.19 \\times stories+ 0.10 \\times airconditioning + 0.10 \\times parking + 0.11 \\times prefarea $\n","2fe7360e":"## Reading and Understanding the Data","33f26cfe":"#### Visualising Categorical Variables\n\nAs you might have noticed, there are a few categorical variables as well. Let's make a boxplot for some of these variables.","b717b55d":"## Multiple Linear Regression\n\n### Problem Statement:\n\nConsider a real estate company that has a dataset containing the prices of properties in the Delhi region. It wishes to use the data to optimise the sale prices of the properties based on important factors such as area, bedrooms, parking, etc.\n\nEssentially, the company wants \u2014\n\n\n- To identify the variables affecting house prices, e.g. area, number of rooms, bathrooms, etc.\n\n- To create a linear model that quantitatively relates house prices with variables such as number of rooms, area, number of bathrooms, etc.\n\n- To know the accuracy of the model, i.e. how well these variables can predict house prices.\n\n### Data\nUse housing dataset.","d68e8e12":"### Visualising Numeric Variables\n\nLet's make a pairplot of all the numeric variables","f0f47f66":"## Data Preparation"}}