{"cell_type":{"7d5bb755":"code","7870301d":"code","e53d7f53":"code","563eaace":"code","354383a4":"code","c71ece01":"code","6f1601bf":"code","956db56b":"code","bf94f15a":"code","ac0926db":"code","9d4f3202":"code","c7b9a7fe":"code","f05647c2":"code","692f268d":"code","5314caa1":"code","23bef5cb":"code","95934691":"code","75860d1b":"code","b689eaac":"code","827971fa":"code","dde86e72":"code","27eb8870":"code","d5dcabe0":"code","b604e37f":"code","b222cdc4":"code","8e89a2e9":"code","3bbd88c0":"code","564faaaf":"code","a415c992":"code","188057a5":"code","bfc802f2":"code","a3592f39":"markdown","987076b3":"markdown","adaf7358":"markdown","1d934942":"markdown","41e4ceec":"markdown","4a927a60":"markdown","5abefbac":"markdown","52f995b5":"markdown","ce8e32f0":"markdown","c69f6401":"markdown"},"source":{"7d5bb755":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport zipfile\nwith zipfile.ZipFile('..\/input\/ghouls-goblins-and-ghosts-boo\/sample_submission.csv.zip', 'r') as zip_obj:\n   # Extract all the contents of zip file in current directory\n   zip_obj.extractall('\/kaggle\/working\/')\nwith zipfile.ZipFile('..\/input\/ghouls-goblins-and-ghosts-boo\/test.csv.zip', 'r') as zip_obj:\n   # Extract all the contents of zip file in current directory\n   zip_obj.extractall('\/kaggle\/working\/')\nwith zipfile.ZipFile('..\/input\/ghouls-goblins-and-ghosts-boo\/train.csv.zip', 'r') as zip_obj:\n   # Extract all the contents of zip file in current directory\n   zip_obj.extractall('\/kaggle\/working\/')\n    \nprint('After zip extraction:')\nprint(os.listdir(\"\/kaggle\/working\/\"))\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7870301d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","e53d7f53":"train = pd.read_csv('.\/train.csv', index_col = 'id')\ntrain","563eaace":"test = pd.read_csv('.\/test.csv', index_col = 'id')\ntest","354383a4":"ds = train.merge(test, how='outer')\nds","c71ece01":"ds.describe()","6f1601bf":"ds.info()","956db56b":"ds['type'] = ds['type'].replace(['Ghoul', 'Goblin', 'Ghost'], [1, 2, 3])\nds['type'] = ds['type'].fillna(0)\nds['color'] = ds['color'].replace(['clear', 'green', 'black', 'white', 'blue', 'blood'], [1, 2, 3, 4, 5, 6])","bf94f15a":"ds.corr()['type'].sort_values()","ac0926db":"plt.plot(ds['has_soul'])","9d4f3202":"plt.hist(ds['has_soul'])","c7b9a7fe":"plt.plot(ds['hair_length'])","f05647c2":"plt.hist(ds['hair_length'])","692f268d":"plt.plot(ds['bone_length'])","5314caa1":"ds['bone_length'] = np.log(ds['bone_length']+1)\nplt.hist(ds['bone_length'])","23bef5cb":"plt.plot(ds['color'])","95934691":"plt.hist(ds['color'])","75860d1b":"ds = pd.get_dummies(ds, columns=['color'])\nds","b689eaac":"plt.plot(ds['rotting_flesh'])","827971fa":"plt.hist(ds['rotting_flesh'])","dde86e72":"ds","27eb8870":"test = ds[ds['type'] == 0]\ntrain = ds[ds['type'] != 0]\nprint(test.shape, train.shape)","d5dcabe0":"y = train['type']\nX = train.drop(['type'], axis = 1)","b604e37f":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=0)","b222cdc4":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\n\nclassifiers = [\n    KNeighborsClassifier(3),\n    SVC(probability=True),\n    DecisionTreeClassifier(),\n    RandomForestClassifier(),\n    AdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis(),\n    LogisticRegression()\n]\n\nlog_cols = [\"Classifier\", \"Accuracy\"]\nlog = pd.DataFrame(columns=log_cols)\n\nacc_dict = {}\n\nfor clf in classifiers:\n    name = clf.__class__.__name__\n    clf.fit(X_train, y_train)\n    train_predictions = clf.predict(X_test)\n    acc = accuracy_score(y_test, train_predictions)\n        \n    if name in acc_dict:\n        acc_dict[name] += acc\n    else:\n        acc_dict[name] = acc\n\nfor clf in acc_dict:\n    acc_dict[clf] = acc_dict[clf]\n    log_entry = pd.DataFrame([[clf, acc_dict[clf]]], columns = log_cols)\n    log = log.append(log_entry)\n\nplt.xlabel('Accuracy')\nplt.title('Classifier Accuracy')\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x = 'Accuracy', y = 'Classifier', data = log, color = \"b\")","8e89a2e9":"acc_dict","3bbd88c0":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nlda = LinearDiscriminantAnalysis()\nlda.fit(X_train, y_train)\n\nprint('score=',lda.score(X_test, y_test))\ny_pred = lda.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, y_pred))","564faaaf":"X_pred = test.drop(['type'], axis = 1)\npred = lda.predict(X_pred)","a415c992":"sample_submission = pd.read_csv('.\/sample_submission.csv', index_col = 'id')\nsample_submission['type'] = pred\nsample_submission.head()","188057a5":"sample_submission['type'] = sample_submission['type'].replace([1.0, 2.0, 3.0],['Ghoul', 'Goblin', 'Ghost'])\nsample_submission.head()","bfc802f2":"sample_submission.to_csv('out.csv') ","a3592f39":"Groups bone_length","987076b3":"Let's check some models","adaf7358":"Groups hair_length","1d934942":"Fin Data Preprocessing","41e4ceec":"Groups has_soul","4a927a60":"Data Preprocessing","5abefbac":"Groups rotting_flesh","52f995b5":"score= 0.72589","ce8e32f0":"Groups color","c69f6401":"Best model LinearDiscriminantAnalysis, take it and use "}}