{"cell_type":{"50fef6c5":"code","5859a140":"code","bc7c2522":"code","ff13de2a":"code","04c2a87e":"code","1bf0e345":"code","0b54d5a0":"code","c33e9200":"code","534b67a9":"code","661d6a78":"code","51d8aaad":"code","c9d6472c":"code","4f41d49a":"code","44d4b773":"code","3ddfdf78":"code","d70cceda":"code","7b0d8a8f":"code","a3e39c46":"code","d939326e":"code","4ba7fd74":"code","e5877bca":"code","767a86ab":"code","ae2c6604":"markdown","2b4cb7a4":"markdown","685b3fb9":"markdown","303f506a":"markdown","c26eb7c1":"markdown","4c6f4c61":"markdown","e40335a1":"markdown","51d4db97":"markdown","45af1fa2":"markdown","86c30d59":"markdown","63deed4a":"markdown","f50e450f":"markdown","8c06fc1f":"markdown","ee1aba5f":"markdown","97e394e6":"markdown","46ff1afd":"markdown","1bfced06":"markdown","3722e8c0":"markdown","482957eb":"markdown","f420600e":"markdown"},"source":{"50fef6c5":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5859a140":"# important python libraries for machine learning\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # visualizing data\nimport seaborn as sns # visualizing data with stunning default theme\nimport sklearn # contain algorithms\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# load dataset from input directory\ndf = pd.read_csv(\"..\/input\/videogamesales\/vgsales.csv\") \ndf.head()","bc7c2522":"df.describe()","ff13de2a":"#dataset total rows without cleaning\nprint(\"Dataset shape before cleaning: \",df.shape)\n#droping rows with at-least single missing value\ndata = df\ndata.dropna(how = \"any\",inplace = True)\nprint(\"Dataset shape after dropping row's with null valu's :\",data.shape)\n# droping duplicate values\ndata = data.drop_duplicates()\nprint(\"Dataset shape :\",data.shape)\n","04c2a87e":"#changing columns name into lower-case \ndata.columns = map(lambda x: x.lower(), data.columns)\n# let's rename some columns \ndata.rename(columns = {\"na_sales\":\"north_usa_sales\",\n                        \"eu_sales\":\"europe_sales\",\n                        \"jp_sales\":\"japan_sales\"},inplace = True)\n\n\nm_perc = pd.DataFrame(data.isnull().sum(),columns = [\"missing percent\"])\nprint(m_perc)\n","1bf0e345":"data.info()","0b54d5a0":"# feature transformation\ndata.Year = data.year.astype(int)","c33e9200":"max_sold = data.global_sales.max()\nhgs_game = data[data.global_sales == max_sold]\nhgs_game[[\"name\",\"global_sales\",\"year\"]]","534b67a9":"min_sold = data.global_sales.min()\nlgs_game = data[data.global_sales == min_sold]\nlgs_game[[\"name\",\"global_sales\",\"year\"]]","661d6a78":"plt.rcParams['figure.figsize'] = (15,10)\nyear_wise_game_sales  = pd.pivot_table(data ,index = \"year\" ,\n                                       values = \"global_sales\",\n                                       aggfunc = np.sum)\nsns.barplot(year_wise_game_sales[\"global_sales\"],year_wise_game_sales.index,orient = \"h\")\nplt.title(\"Year wise global game sales :\")","51d8aaad":"plt.rcParams['figure.figsize'] = (8,6)\nplatform_wise_game_sales  = pd.pivot_table(data ,index = \"platform\",\n                                           values = \"global_sales\",\n                                           aggfunc = np.sum)\n#platform_wise_game_sales.sort_values(\"global_sales\",ascending=False).head()\nplatform_wise_game_sales  = platform_wise_game_sales.sort_values(\n                    by = \"global_sales\",ascending  = False).head(10)\n\nsns.barplot(platform_wise_game_sales[\"global_sales\"],platform_wise_game_sales.index,orient = \"h\")\nplt.title(\"Top 10 Platform wise global game sales :\")","c9d6472c":"plt.rcParams['figure.figsize'] = (8,6)\ngenre_wise_game_sales  = pd.pivot_table(data ,index = \"genre\",\n                                        values = \"global_sales\",\n                                        aggfunc = np.sum)\ngenre_wise_game_sales  = genre_wise_game_sales.sort_values(\n    by = \"global_sales\",ascending  = False).head(10)\nsns.barplot(genre_wise_game_sales[\"global_sales\"],genre_wise_game_sales.index,orient = \"h\",palette = \"husl\")\nplt.title(\"Top 10 Genre wise global game sales :\")","4f41d49a":"plt.rcParams['figure.figsize'] = (8,6)\npublisher_wise_game_sales  = pd.pivot_table(data ,index = \"publisher\" ,values = \"global_sales\",aggfunc = np.sum)\npublisher_wise_game_sales  = publisher_wise_game_sales.sort_values(by = \"global_sales\",ascending  = False).head(10)\nsns.barplot(publisher_wise_game_sales[\"global_sales\"],publisher_wise_game_sales.index,orient = \"h\",palette = \"viridis\")\nplt.title(\"Top 10 Publisher wise global game sales :\") ","44d4b773":"top_five_action_games = data[data.genre == \"Action\"][[\"name\",\"global_sales\"]]\ntop_five_action_games = top_five_action_games.sort_values(by = \"global_sales\",ascending = False )\ntop_five_action_games = top_five_action_games.drop_duplicates([\"name\"]).head(5)\nsns.barplot(top_five_action_games[\"global_sales\"],top_five_action_games[\"name\"])\nplt.title(\"Top Five Action Games And Their Sales World Wide : \")\ntop_five_action_games","3ddfdf78":"north_usa_highest_sold_game = data.north_usa_sales.max()\nprint(\"highest sold Game in North_USA :\")\ndata[data[\"north_usa_sales\"] == north_usa_highest_sold_game][[\"name\",\"north_usa_sales\"]]","d70cceda":"tot_sales_year_wise = pd.pivot_table(data,index = \"year\",values = \"global_sales\",aggfunc= np.sum)\n#print(avg_sales_year_wise) #uncomment this to know Total sale's value's with respect each year.\nplt.plot(tot_sales_year_wise.index,tot_sales_year_wise[\"global_sales\"],color = 'g',marker = \"*\")\nplt.title(\"Total Sale's Year Wise\")\nplt.xlabel(\"Year's\")\nplt.ylabel(\"avg global_sales\")","7b0d8a8f":"# dropping columns\ndata2 = data.copy()","a3e39c46":"def data_encode(x_data):\n    for i in x_data.columns:\n        x_data[i]=x_data[i].factorize()[0]\n        \n    return x_data    \n    \nx_data = data2.drop(\"global_sales\",axis = 1)\ny_data = data2[\"global_sales\"]\nx_data = data_encode(x_data)","d939326e":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score,mean_squared_error","4ba7fd74":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nxtrain,xtest,ytrain,ytest=train_test_split(x_data,y_data,test_size=.3,random_state=1)","e5877bca":"lr_model =LinearRegression()\nlr_model.fit(xtrain,ytrain)\nypred=lr_model.predict(xtest)\nn = len(xtest)\np = xtest.shape[1]\nr2_value = r2_score(ytest,ypred)\nadjusted_r2_score = 1 - (((1-r2_value)*(n-1)) \/(n-p-1))\nprint(\"r2_score for Linear Reg model : \",r2_score(ytest,ypred))\nprint(\"adjusted_r2_score Value       : \",adjusted_r2_score)                         \nprint(\"MSE for Linear Regression     : \",mean_squared_error(ytest,ypred))","767a86ab":"rf_model = RandomForestRegressor(n_estimators=200,min_samples_split=20,random_state=43)\nrf_model.fit(xtrain,ytrain)\nypred = rf_model.predict(xtest)\nn = len(xtest)\np = xtest.shape[1]\nr2_value = r2_score(ytest,ypred)\nadjusted_r2_score = 1 - (((1-r2_value)*(n-1)) \/(n-p-1))\nprint(\"r2_score for Random Forest Reg model : \",r2_score(ytest,ypred))\nprint(\"adjusted_r2_score Value              : \",adjusted_r2_score)\nprint(\"MSE for Random Forest Regression     : \",mean_squared_error(ytest,ypred))","ae2c6604":"### **Exploring Data for different questions**  \n#### **To find game with highest global sales**","2b4cb7a4":"\n### **Linear Regression**","685b3fb9":"### **Let's find Top 5 Best game's from Top Action Genre**","303f506a":"### **Listing publisher wise top global game sales**","c26eb7c1":"### **To visualize global average game sales year-wise**\n","4c6f4c61":"\n### **Model Building**","e40335a1":"### **To find path of dataset**","51d4db97":"### **Which is the highest sold Game in North_USA**","45af1fa2":"### **Removing duplicate and missing-value rows**","86c30d59":"### **Importing required libraries and loading data**","63deed4a":"### The describe() method shows that count for <b>Year<\/b> is different which tells about missing values. The other statistics are also useful like min and max values in each column.","f50e450f":"### **Random Forest Regressor**","8c06fc1f":"### **Total Sale's Year Wise**","ee1aba5f":"#### **To find game with lowest global sales**","97e394e6":"### **Re-prepare data for model**","46ff1afd":"### **listing genre wise top global sale's**","1bfced06":"### **Rename columns and check missing value percentage**\n","3722e8c0":"\n**This dataset contains a list of video games with sales greater than 16.6k copies with 11 columns. It was generated by a scrape of vgchartz.com.**\n\nBreakdown of this notebook: Loading the dataset: Load the data and import the libraries.\n\n**1. Data Cleaning:**\n\n    Dropping Uncessary col's.\n    Dropping duplicates.\n    Checking Missing Value Percent with respect to each column.\n    Dropping row's on having atleast one null value.\n    Reanaming Column's\n    Feature Transfomation\n\n**2. Data Visualization**\n\n    using bar graph\n    using pie chart\n    using histogram\n\n**3. Regression Analysis**  \n   \n    Linear Regression.\n    Random Forest Regression.\n\n","482957eb":"### **Top 10 platform wise global sale's**","f420600e":"### **Feature Transformation**"}}