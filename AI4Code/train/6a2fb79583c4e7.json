{"cell_type":{"74e93439":"code","e5e1fc10":"code","b645d78f":"code","f43838fd":"code","f68593dc":"code","2fdbfa43":"code","70466701":"code","82b72aa6":"code","6684148d":"code","7ba9cb68":"code","c64a42ee":"code","8709250f":"code","4d4bf774":"code","75b74c5d":"code","0c57858c":"code","a6a5c095":"markdown","6545ffd6":"markdown","6123e5ae":"markdown","b81e3613":"markdown","4bdaaea1":"markdown","64e2ed4e":"markdown","a12dc263":"markdown","02c75670":"markdown","b99d9f66":"markdown","8f8278ed":"markdown","97471990":"markdown","05d2ffdd":"markdown","eb5f918f":"markdown","614c11ae":"markdown","4d7d01c4":"markdown","2cdc54a0":"markdown","62c0461c":"markdown","cc8f0ed5":"markdown","3a181bbf":"markdown","a5225b21":"markdown"},"source":{"74e93439":"import torch\nfrom matplotlib import pyplot\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom torch.utils.data.dataset import Dataset\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torchvision.transforms as transforms\nimport torch.nn.functional as F\nimport os\n%matplotlib inline","e5e1fc10":"athlete = pd.read_csv(filepath_or_buffer='..\/input\/athlete_events.csv')\nnoc_regions = pd.read_csv(filepath_or_buffer='..\/input\/noc_regions.csv')\nathlete.head(5)","b645d78f":"#Dropping records with NaN\ndropped_nan_height = athlete[\"Height\"].dropna()\ndropped_nan_weight = athlete[\"Weight\"].dropna()\ndropped_nan_age = athlete[\"Age\"].dropna()\n#Figure\nfig = pyplot.figure()\nax1 = fig.add_subplot(231)\nax2 = fig.add_subplot(232)\nax3 = fig.add_subplot(233)\npyplot.subplots_adjust(left=1, right=3)\n#Plots\nsns.distplot(dropped_nan_height, ax=ax1)\nsns.distplot(dropped_nan_weight, ax=ax2)\nsns.distplot(dropped_nan_age, ax=ax3)","f43838fd":"pyplot.subplot(2, 3, 1)\n\nsns.boxplot(x=\"Sex\", y=\"Height\",data=athlete[athlete[\"Season\"] == 'Summer']).set_title(\"Season = Summer\")\npyplot.subplot(2, 3, 2)\npyplot.title = \"Winter\"\nsns.boxplot(x=\"Sex\", y=\"Height\"\n            , data=athlete[athlete['Season'] == 'Winter']).set_title(\"Season = Winter\")\npyplot.subplots_adjust(left=1, right=3, bottom=1, top=3)","f68593dc":"pyplot.subplot(2, 3, 1)\n\nsns.boxplot(x=\"Sex\", y=\"Weight\",data=athlete[athlete[\"Season\"] == 'Summer']).set_title(\"Season = Summer\")\npyplot.subplot(2, 3, 2)\npyplot.title = \"Winter\"\nsns.boxplot(x=\"Sex\", y=\"Weight\"\n            , data=athlete[athlete['Season'] == 'Winter']).set_title(\"Season = Winter\")\npyplot.subplots_adjust(left=1, right=3, bottom=1, top=3)","2fdbfa43":"pyplot.subplot(2, 3, 1)\n\nsns.boxplot(x=\"Sex\", y=\"Age\",data=athlete[athlete[\"Season\"] == 'Summer']).set_title(\"Season = Summer\")\npyplot.subplot(2, 3, 2)\npyplot.title = \"Winter\"\nsns.boxplot(x=\"Sex\", y=\"Age\"\n            , data=athlete[athlete['Season'] == 'Winter']).set_title(\"Season = Winter\")\npyplot.subplots_adjust(left=1, right=3, bottom=1, top=3)","70466701":"data_with_predict = [\"Season\", \"Weight\", \"Height\", \"Sex\",\"Age\"]\nfeatures = [\"SeasonBinary\", \"Weight\", \"Height\", \"Age\"]\ndata = athlete[data_with_predict].dropna()\ndata[\"BinarySex\"] = (lambda x:  [1 if t==\"M\" else 0 for t in x])(data[\"Sex\"])\ndata[\"SeasonBinary\"] = (lambda x:  [1 if t==\"Summer\" else 0 for t in x])(data[\"Season\"])\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\ntrain, test = train_test_split(data, test_size=0.2)\n\nX_train = train.as_matrix(columns=features)\nY_train = train.as_matrix(columns=[\"BinarySex\"]).flatten()\nX_test = test.as_matrix(columns=features)\nY_test = test.as_matrix(columns=[\"BinarySex\"]).flatten()","82b72aa6":"clf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train, Y_train)","6684148d":"clf.predict(X_test)","7ba9cb68":"acc_percentage = np.array(Y_test == clf.predict(X_test)).astype(np.int).sum()\/len(Y_test) * 100\nprint(\"Accuracy on Test: {:3.4f}%\".format(acc_percentage))","c64a42ee":"train, test = train_test_split(data, test_size=0.2)\nvalid_idx = int(len(train) * 0.1)\nvalid = train[:valid_idx]\n\nclass OlympicsDataSet(Dataset):\n    def __init__(self,train,transforms=None):\n        self.X = train.as_matrix(columns=features)\n        self.Y = train.as_matrix(columns=[\"BinarySex\"]).flatten()\n        self.count = len(self.X)\n        # get iterator\n        self.transforms = transforms\n\n    def __getitem__(self, index):\n        nextItem = Variable(torch.tensor(self.X[index]).type(torch.FloatTensor))\n\n        if self.transforms is not None:\n            nextItem = self.transforms(nextItem[0])\n\n        # return tuple but with no label\n        return (nextItem, self.Y[index])\n\n    def __len__(self):\n        return self.count # of how many examples(images?) you have\nolympicDS = OlympicsDataSet(train)\nvalidDS = OlympicsDataSet(valid)\ntrain_loader = torch.utils.data.DataLoader(olympicDS,\n            batch_size=250, shuffle=False)\nvalid_loader = torch.utils.data.DataLoader(validDS,\n            batch_size=1, shuffle=False)\ntestDS = OlympicsDataSet(test)\ntest_loader = torch.utils.data.DataLoader(testDS,\n            batch_size=1, shuffle=False)","8709250f":"epochs = 10\nclass DNN(nn.Module):\n    def __init__(self, input_size, first_hidden_size, second_hidden_size, num_classes):\n        super(DNN, self).__init__()\n        self.z1 = nn.Linear(input_size, first_hidden_size) # wx + b\n        self.relu = nn.ReLU()\n        self.z2 = nn.Linear(first_hidden_size, second_hidden_size)\n        self.z3 = nn.Linear(second_hidden_size, num_classes)\n        self.log_softmax = nn.LogSoftmax(dim=1)\n\n    def forward(self, x):\n        out = self.z1(x) # input\n        out = self.relu(out)\n\n        out = self.z2(out) # first hidden layer\n        out = self.relu(out)\n\n        out = self.z3(out) # second hidden layer\n\n        out = self.log_softmax(out) # output\n        return out\n\n    def name(self):\n        return \"DNN\"","4d4bf774":"def train_dnn(net, trainL, validL):\n    count = 0\n    accuList = []\n    lossList = []\n    optimizer = torch.optim.Adam(net.parameters(),lr=0.001)\n    for epc in range(1,epochs + 1):\n        print(\"Epoch # {}\".format(epc))\n        vcount = 0\n        total_loss = 0\n        net.train()\n        for data,target in trainL:\n            optimizer.zero_grad()\n            out = net(data)\n            loss = F.nll_loss(out, target, size_average=False)\n            pred = out.data.max(1, keepdim=True)[1] # get the index of the max log-probability\n            count += pred.eq(target.data.view_as(pred)).sum()\n            # Backward and optimize\n            loss.backward()\n            # update parameters\n            optimizer.step()\n        net.eval()\n        for data, target in validL:\n            out = net(data)\n            loss = F.nll_loss(out, target, size_average=False)\n            total_loss += loss.item()\n            pred = out.data.max(1, keepdim=True)[1] # get the index of the max log-probability\n            vcount += pred.eq(target.data.view_as(pred)).sum().item()\n        \n        accuList.append(100. * (vcount \/ len(validL)))\n        lossList.append(total_loss \/ len(validL))\n    \n    return accuList, lossList\n     \nmyNet = DNN(4, 8, 4, 2)\naccuList, lossList = train_dnn(myNet, train_loader, valid_loader)","75b74c5d":"def test(net, loader):\n    net.eval()\n    vcount = 0\n    count = 0\n    total_loss = 0.0\n    for data, target in loader:\n        out = net(data)\n        loss = F.nll_loss(out, target, size_average=False)\n        total_loss += loss.item()\n        pred = out.data.max(1, keepdim=True)[1] # get the index of the max log-probability\n        vcount += pred.eq(target.data.view_as(pred)).sum().item()\n    return 100. * (vcount \/ len(loader)), total_loss \/ len(loader)\ntest_acc, test_loss = test(myNet, test_loader)\nprint(\"The test set accuracy is {:3.4f}% \\n The average loss is : {}\".format(test_acc, test_loss))","0c57858c":"pyplot.figure()\npyplot.plot(range(1, epochs + 1), accuList, \"b--\", marker=\"o\", label='Validation Accuracy')\npyplot.legend()\npyplot.show()\npyplot.figure()\npyplot.plot(range(1, epochs + 1), lossList, \"r\", marker=\".\", label='Validation Loss')\npyplot.legend()\npyplot.show()","a6a5c095":"## Data Import <a name=\"Data-Import\"><\/a>\nThere are 15 columns: \n- ID\n- Name\n- Sex\n- Age\n- Height\n- Weight\n- Team\n- NOC\n- Games\n- Year\n- Season\n- City\n- Sport\n- Event\n- Medal\n","6545ffd6":"\n## Testing <a name=\"nn3\"><\/a>\n","6123e5ae":"## Data Visualization and Overview <a name=\"Data-Visualization-and-Overview\"><\/a>\nIn this section I will plot some of the columns' value distributions.\n\nOur goal in visualizing the data is to see how the values distribute regardless of gender and then spliting the data into male and female, hopefully to see a difference.","b81e3613":"# Now with respect to Season and Gender\nWe can see a few intresting observations :\n\nAge,Weight,Height the distribution of age, weight, and height behaves approximately like a normal distribution, and therefore.\n\nWith respect to season:\n1. Winter\n    1. Male athletes are generally taller than female atheletes\n    2. Male athletes significantlly weigh more than female athletes\n    3. Male and female athletes are around the same ages.\n2. Summer\n    1. Male athletes are generally taller than female athletes but this time not by much (in the winter the difference is  more prominent)\n    2. Male athletes signicantly weigh more than female athletes, in addition the IQR in males weight is bigger than the females.\n    3. Same as in the winter, male and female athletes are around the same ages.","4bdaaea1":"# Summary <a name=\"summary\"><\/a>","64e2ed4e":"## Training <a name=\"decisionTree2\"><\/a>","a12dc263":"# Defining the Model <a name=\"nn1.2\"><\/a>\nLayers sizes:\n- Input Layer = 4\n- FIrst Hidden Layer = 8\n- Second Hidden Layer = 4\n- Output Layer = 2\n\nEach hidden layer uses ReLU function and the output layer uses LogSoftmax function.","02c75670":"\n## Results <a name=\"nn4\"><\/a>\n","b99d9f66":"## Creating Training Set and Test Set for Our Model <a name=\"decisionTree1\"><\/a>\n\nWe need to extract a sub dataframe with the features and the correct label.\n\nNote that I decided that if an athlete is a male then we label his gender as 1 otherwise 0, same for season, summer is labeled as 1 and winter as 0.\n\nThe test set size is 20% of the whole dataset , around 41K records.\n","8f8278ed":"# Thanks for Reading <a name=\"summary2\"><\/a>\n We are new to kaggle , data and machine learning are our passion.\n \nWe would love to hear what you think about our work.\n![Meow](https:\/\/pbs.twimg.com\/media\/CMl684GUkAASKzX.png)\n","97471990":"We have seen that male and female athlete weight and height distributions have significant differences and we therefore created 2 ML models.\n\nFirst model is a decision tree which achived 80~81% accuracy on the test set .\n\nSecond model is a neural network which achived 77~80% accuracy on the test set.\n\nSurprisingly we didn't gain any benefit using neural network over a decision tree.\n","05d2ffdd":"# Model 2 - Neural Network <a name=\"nn\"><\/a>\nI have decided to use PyTorch, since I have only 4 features we chose not to use a big and deep neural network because we obviosuly would like to avoid overfitting.","eb5f918f":"\n##  Python Packages Import <a name=\"Python-Packages-Import\"><\/a>","614c11ae":"## Creating Training Set and Test Set for Our Model <a name=\"nn1\"><\/a>\nThe test set size is 20% of the whole dataset , around 41K records.","4d7d01c4":"\n\n\n## Results <a name=\"decisionTree4\"><\/a>\nAround 80~81% \n","2cdc54a0":"## Testing <a name=\"decisionTree3\"><\/a>","62c0461c":"# Model 1 - Decision Tree <a name=\"decisionTree\"><\/a>\n","cc8f0ed5":"# Machine Learning\nAfter looking at the data, our intuition told me to try a decision tree before rushing to implement a neural network. We felt  this task can be easily done with a decision tree since we see a significent difference between male and female regarding width and height with respect to season.","3a181bbf":"> # **What Is Our Goal ?**\nIn this kernel we will be showing you step by step how to build 2 machine learning models to classify an athelete's gender using the following features:\n- Age\n- Height \n- Weight\n- Season\n\n-----\n\n#  __Table of contents__\n1. [Python Packages Import](#Python-Packages-Import)\n2. [Data Import](#Data-Import)\n3. [ Data Visualization and Overview](#Data-Visualization-and-Overview)\n4. [ Model 1 - Decision Tree](#Data-Visualization-and-Overview)\n    1. [ Creating Training Set and Test Set for Our Model](#decisionTree1)\n    2. [Training](#decisionTree2)\n    3. [Testing](#decisionTree3)\n    4. [Results](#decisionTree4)\n5. [ Model 2 - Neural Network](#nn)\n    1.  [ Creating Training Set and Test Set for Our Model](#nn1)\n    2. [Defining the Model](#nn1.2)\n    3.  [Training](#nn2)\n    4. [Testing](#nn3)\n    5. [Results](#nn4)\n6. [ Summary](#summary)\n7. [Thanks for reading](#summary2)\n\n![Male And Female](https:\/\/imgur.com\/4Astb6F.png)\n\n","a5225b21":"## Training <a name=\"nn2\"><\/a>\nOptimizer : Adam\n\nLoss Function : Negative Log Likelihood\n\nModel Hyper Parameters:\n- 10 Epochs\n- LR = 0.001\n"}}