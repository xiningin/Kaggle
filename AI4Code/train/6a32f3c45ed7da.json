{"cell_type":{"64fe1bde":"code","57b407e9":"code","a675cf3a":"code","a8870112":"code","6add3ad0":"code","1dda9a2e":"code","4995c462":"code","c843ec20":"code","6eebfcce":"code","ba730252":"code","0439e595":"code","f82f1b94":"code","78983f26":"code","98238da6":"code","66fa99d8":"code","a877aad0":"code","0b4da460":"code","6496448a":"code","b6db0e09":"code","eb73a703":"code","4ae34ef7":"code","54ee0ebc":"code","e7e5f9b0":"code","ca84c773":"code","42120020":"code","c91083e5":"code","8c48985b":"code","c02a829a":"code","6d9f463b":"code","69c01ee2":"code","0ac8d50d":"code","9d6be181":"code","f3e7ca14":"code","7b373358":"markdown","7d09cbcf":"markdown"},"source":{"64fe1bde":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","57b407e9":"full_table = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n","a675cf3a":"temp = full_table.groupby('ObservationDate')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntemp = temp[temp['ObservationDate']==max(temp['ObservationDate'])].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","a8870112":"import plotly.express as px\n\ntemp = full_table.groupby(['Country\/Region', 'ObservationDate', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\ntemp = temp[temp['Country\/Region'] == 'France']\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\ntemp['Deaths_per_mln'] = temp['Deaths']\/67000000*1000000\n\ntemp = temp[temp['ObservationDate']>'03\/08\/2020']\n\nfig = px.bar(temp.sort_values('ObservationDate'), \n             x=\"ObservationDate\", y=\"Deaths_per_mln\", color='Country\/Region',title='New Deaths_per_mln France',)\nfig.update_layout(showlegend=False)\nfig.show()\n\n\ntemp = full_table.groupby(['Country\/Region', 'ObservationDate', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\ntemp = temp[temp['Country\/Region'] == 'Sweden']\ntemp['Deaths_per_mln'] = temp['Deaths']\/10230000*1000000\n\ntemp = temp[temp['ObservationDate']>'03\/08\/2020']\n\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp.sort_values('ObservationDate'), \n             x=\"ObservationDate\", y=\"Deaths_per_mln\", color='Country\/Region',title='New Deaths_per_mln Sweden',)\nfig.update_layout(showlegend=False)\nfig.show()\n\n###\ntemp = full_table.groupby(['Country\/Region', 'ObservationDate', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\ntemp = temp[temp['Country\/Region'] == 'US']\ntemp['Deaths_per_mln'] = temp['Deaths']\/322000000*1000000\n\ntemp = temp[temp['ObservationDate']>'03\/08\/2020']\n\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp.sort_values('ObservationDate'), \n             x=\"ObservationDate\", y=\"Deaths_per_mln\", color='Country\/Region',title='New Deaths_per_mln US',)\nfig.update_layout(showlegend=False)\nfig.show()","6add3ad0":"\ntemp = full_table.groupby(['Country\/Region', 'ObservationDate', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\ntemp = temp[temp['Country\/Region'] == 'Ukraine']\ntemp['Deaths_per_mln'] = temp['Deaths']\/37000000*1000000\n\ntemp = temp[temp['ObservationDate']>'03\/08\/2020']\n\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp.sort_values('ObservationDate'), \n             x=\"ObservationDate\", y=\"Deaths_per_mln\", color='Country\/Region',title='New Deaths_per_mln Ukraine',)\nfig.update_layout(showlegend=False)\nfig.show()\n\ntemp = full_table.groupby(['Country\/Region', 'ObservationDate', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\ntemp = temp[temp['Country\/Region'] == 'Czech Republic']\ntemp['Deaths_per_mln'] = temp['Deaths']\/10650000*1000000\n\ntemp = temp[temp['ObservationDate']>'03\/08\/2020']\n\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp.sort_values('ObservationDate'), \n             x=\"ObservationDate\", y=\"Deaths_per_mln\", color='Country\/Region',title='New Deaths_per_mln Czech Republic',)\nfig.update_layout(showlegend=False)\nfig.show()","1dda9a2e":"import plotly.express as px\ntemp = full_table.groupby(['Country\/Region', 'ObservationDate', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp.sort_values('ObservationDate'), \n             x=\"ObservationDate\", y=\"Confirmed\", color='Country\/Region',title='New cases',)\nfig.update_layout(showlegend=False)\nfig.show()\n\n###\ntemp = full_table.groupby(['Country\/Region', 'ObservationDate', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\ntemp = temp[temp['Country\/Region'] != 'US']\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp.sort_values('ObservationDate'), \n             x=\"ObservationDate\", y=\"Confirmed\", color='Country\/Region',title='New cases WO USA',)\nfig.update_layout(showlegend=False)\nfig.show()\n###\n\n###\ntemp = full_table.groupby(['Country\/Region', 'ObservationDate', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\ntemp = temp[temp['Country\/Region'] != 'US']\ntemp = temp[temp['Country\/Region'] != 'France']\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp.sort_values('ObservationDate'), \n             x=\"ObservationDate\", y=\"Confirmed\", color='Country\/Region',title='New cases WO USA and France',)\nfig.update_layout(showlegend=False)\nfig.show()\n###\n","4995c462":"temp = full_table.groupby(['Country\/Region', 'ObservationDate', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\ntemp = temp[temp['Country\/Region'] == 'Ukraine']\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp.sort_values('ObservationDate'), \n             x=\"ObservationDate\", y=\"Confirmed\", color='Country\/Region',title='New cases Ukraine',\n            )\nfig.update_layout(showlegend=False)\nfig.show()\n\n##\ntemp = full_table.groupby(['Country\/Region', 'ObservationDate', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\ntemp = temp[temp['Country\/Region'] == 'Sweden']\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp.sort_values('ObservationDate'), \n             x=\"ObservationDate\", y=\"Confirmed\", color='Country\/Region',title='New cases Sweden',\n            )\nfig.update_layout(showlegend=False)\nfig.show()","c843ec20":"temp = full_table.groupby(['ObservationDate', 'Country\/Region'])['Confirmed'].sum().reset_index().sort_values('Confirmed', ascending=False)\n\nfig = px.line(temp.sort_values('ObservationDate'), x=\"ObservationDate\", y=\"Confirmed\", color='Country\/Region', title='Cases Spread',)\nfig.update_layout(showlegend=False)\nfig.show()\n\ntemp = full_table.groupby(['ObservationDate', 'Country\/Region'])['Confirmed'].sum().reset_index().sort_values('Confirmed', ascending=False)\ntemp = temp[temp['Country\/Region'] == 'Ukraine']\nfig = px.line(temp.sort_values('ObservationDate'), x=\"ObservationDate\", y=\"Confirmed\", color='Country\/Region', title='Cases Spread Ukraine',)\nfig.update_layout(showlegend=False)\nfig.show()","6eebfcce":"gdf = full_table.groupby(['ObservationDate', 'Country\/Region'])['Confirmed', 'Deaths','Recovered'].max()\ngdf = gdf.reset_index()\n\ntemp = gdf[gdf['Country\/Region']=='Mainland China'].reset_index()\ntemp = temp.melt(id_vars='ObservationDate', value_vars=['Confirmed', 'Deaths','Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"ObservationDate\", y=\"Count\", color='Case', facet_col=\"Case\",\n            title='China'#, color_discrete_sequence=[cnf, dth, rec]\n            )\nfig.show()\n\ntemp = gdf[gdf['Country\/Region']!='Mainland China'].groupby('ObservationDate').sum().reset_index()\ntemp = temp.melt(id_vars='ObservationDate', value_vars=['Confirmed', 'Deaths','Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"ObservationDate\", y=\"Count\", color='Case', facet_col=\"Case\",\n             title='ROW'#, color_discrete_sequence=[cnf, dth, rec]\n            )\nfig.show()\n\ntemp = gdf[gdf['Country\/Region']=='Ukraine'].groupby('ObservationDate').sum().reset_index()\ntemp = temp.melt(id_vars='ObservationDate', value_vars=['Confirmed', 'Deaths','Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"ObservationDate\", y=\"Count\", color='Case', facet_col=\"Case\",\n             title='Ukraine'#, color_discrete_sequence=[cnf, dth, rec]\n            )\nfig.show()","ba730252":"gdf[gdf['Country\/Region']=='Sweden']","0439e595":"gdf['Active'] = gdf['Confirmed'] - gdf['Deaths'] - gdf['Recovered']\n\ngdfU = gdf[gdf['Country\/Region']=='Sweden']\ngdfU.loc[:,'Active_new'] = (gdfU.loc[:,'Active'] - gdfU.loc[:,'Active'].shift(1).replace(np.nan,0))\n\nfig = px.bar(gdfU.sort_values('ObservationDate'), \n             x=\"ObservationDate\", y=\"Active_new\", color='Country\/Region',title='New Active Sweden',\n            )\nfig.update_layout(showlegend=False)\nfig.show()","f82f1b94":"gdf[gdf['Country\/Region']=='Ukraine']\ngdf['Active'] = gdf['Confirmed'] - gdf['Deaths'] - gdf['Recovered']\n\ngdfU = gdf[gdf['Country\/Region']=='Ukraine']\ngdfU.loc[:,'Active_new'] = (gdfU.loc[:,'Active'] - gdfU.loc[:,'Active'].shift(1).replace(np.nan,0))\n\nfig = px.bar(gdfU.sort_values('ObservationDate'), \n             x=\"ObservationDate\", y=\"Active_new\", color='Country\/Region',title='New Active Ukraine',\n            )\nfig.update_layout(showlegend=False)\nfig.show()","78983f26":"def add_colomns(table):\n    table.loc[:,'New cases'] = (table.loc[:,'Confirmed'] \n                                - table.loc[:,'Confirmed'].shift(1).replace(np.nan,0))\n    \n    table.loc[:,'avg_back'] = (table.loc[:,'New cases']\n                               + table.loc[:,'New cases'].shift(1)\n                               .replace(np.nan,table.loc[:,'New cases']))\/2\n    \n    table.loc[:,'avg_forward'] = (table.loc[:,'New cases'] \n                                  + table.loc[:,'New cases'].shift(-1)\n                                  .replace(np.nan,table.loc[:,'New cases'])\n                                  )\/2\n                              \n    table.loc[:,'Smooth increase'] = (table.loc[:,'avg_back'] + table.loc[:,'avg_forward'])\/2\n    return table.drop(['avg_back', 'avg_forward'], axis=1)","98238da6":"counries_group = full_table.groupby(['ObservationDate','Country\/Region']\n                                   )['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()","66fa99d8":"counries_group_new_cases = pd.DataFrame()\nfor country in counries_group['Country\/Region'].unique():\n    temp_table = counries_group[counries_group['Country\/Region'] == country]\n    temp_table = add_colomns(temp_table)\n    counries_group_new_cases = pd.concat([counries_group_new_cases, temp_table])","a877aad0":"counries_group_new_cases.head()#['Country\/Region'].unique()","0b4da460":"import matplotlib.pyplot as plt\n\ncontry = counries_group_new_cases.loc[counries_group_new_cases['Country\/Region'] == 'Ukraine']\n\nfig, ax = plt.subplots(figsize =(15, 8))\n\nindex = contry.ObservationDate\nbar_width = 0.2\n\nrects1 = plt.bar(index, contry['Smooth increase'],\nlabel='Smooth increase',\n)\n\nrects2 = plt.bar(index, contry['New cases'], bar_width,\nlabel='New cases')\n\nplt.legend(title='Ukraine')\nplt.xticks(index, fontsize=10, rotation=30)\n\nplt.tight_layout()\nplt.show()","6496448a":"cg = counries_group_new_cases\ncg['Death_rate'] = cg['Deaths'] \/ cg['Confirmed']","b6db0e09":"cg100 = pd.DataFrame()\n\nfor country in cg['Country\/Region'].unique():\n    temp_table = cg[(cg['Country\/Region'] == country) & (cg['Confirmed'] > 1000)]\n    temp_table['day_after100'] = range(0,len(temp_table))\n    cg100 = pd.concat([cg100, temp_table])","eb73a703":"cg100c = cg100.loc[cg100['Country\/Region'] != 'Mainland China']\n\ntemp = cg100c.groupby(['day_after100', 'Country\/Region'])['Death_rate'].sum().reset_index().sort_values('day_after100', ascending=False)\n\nfig = px.line(temp.sort_values('day_after100'), x=\"day_after100\", y='Death_rate', color='Country\/Region', title='Death_rate',)\nfig.update_layout(showlegend=False)\nfig.show()\n","4ae34ef7":"cg100c = cg100.loc[cg100['Country\/Region'] != 'Mainland China']\ncg100c = cg100c.loc[cg100['Country\/Region'] != 'Italy']\ncg100c = cg100c.loc[cg100['Country\/Region'] != 'Spain']\n\ntemp = cg100c.groupby(['day_after100', 'Country\/Region'])['Confirmed'].sum().reset_index().sort_values('Confirmed', ascending=False)\n\nfig = px.line(temp.sort_values('day_after100'), x=\"day_after100\", y=\"Confirmed\", color='Country\/Region', title='Cases Spread after 100 cases',)\nfig.update_layout(showlegend=False)\nfig.show()\n","54ee0ebc":"cg100['Country\/Region'].unique()","e7e5f9b0":"temp","ca84c773":"Ukraine = cg100c.loc[(cg100['Country\/Region'] == 'Ukraine')]\n\nvalues=['Confirmed', 'Deaths', 'Recovered', 'New cases', 'Smooth increase', 'Death_rate']\ntable = pd.pivot_table(Ukraine, values=values, \n                       index=['Country\/Region'],\n                       columns=['day_after100'],\n                       #aggfunc=np.min, \n                       )\ntable.reset_index()\n\n\ntemp = cg100c.groupby(['day_after100'])['Confirmed'].mean().reset_index()#.sort_values('Confirmed', ascending=False)\ntemp['Country\/Region'] = 'Average_world'\nUkraine = Ukraine[['day_after100','Confirmed', 'Country\/Region']]\ntemp = pd.concat([temp, Ukraine])\ntemp= temp.loc[temp.day_after100 < len(Ukraine)+10]\n\nfig = px.line(temp.sort_values('day_after100'), x=\"day_after100\", y=\"Confirmed\", color='Country\/Region', \n              title='Cases Spread after 100. Ukraine vs World_average',)\nfig.update_layout(showlegend=False)\nfig.show()\n\n###\ntemp = cg100c.groupby(['day_after100'])['Death_rate'].mean().reset_index()\ntemp['Country\/Region'] = 'Average_world'\nUkraine = cg100c.loc[(cg100c['Country\/Region'] == 'Czech Republic')]\nUkraine = Ukraine[['day_after100','Death_rate', 'Country\/Region']]\ntemp = pd.concat([temp, Ukraine])\ntemp= temp.loc[temp.day_after100 < len(Ukraine)+10]\n\nfig = px.line(temp.sort_values('day_after100'), x=\"day_after100\", y=\"Death_rate\", color='Country\/Region', \n              title='Death_rate. Ukraine vs World_average WO Italy and Spain',)\nfig.update_layout(showlegend=False)\nfig.show()\n","42120020":"df = pd.read_csv('\/kaggle\/input\/covid19-tests-conducted-by-country\/Tests_conducted_15April2020.csv')\ndf['Tests'] = round(df['Positive'] \/ df['%'] *100)\n\ntemp = df#[['Country or region','Tests','Positive','Tests\u2009\/millionpeople']]\ntemp['Country or region'].unique()\nshort_list = ['Albania', 'Argentina', 'Armenia', 'Australia',\n       'Austria', 'Azerbaijan','Belarus', 'Belgium', 'Brazil', 'Bulgaria',\n       'Canada', 'Croatia', 'Czechia', 'Denmark','Egypt', 'Estonia',\n       'Finland', 'France', 'Germany', 'Greece', 'Grenada', 'Hungary',\n       'Iceland', 'India', 'Indonesia', 'Iran', 'Ireland', 'Israel',\n       'Italy', 'Japan',   'Kazakhstan','Kyrgyzstan', 'Latvia', 'Lithuania',\n       'Mexico', 'Montenegro', 'Nepal',\n       'Netherlands', 'New Zealand', 'North Macedonia', 'Norway',\n       'Pakistan', 'Palestine', 'Panama', 'Peru', 'Philippines', 'Poland',\n       'Portugal', 'Romania', 'Russia',  'Serbia',\n       'Singapore', 'Slovakia', 'Slovenia', 'South Africa', 'South Korea',\n       'Spain', 'Sweden', 'Switzerland', 'Taiwan', 'Thailand',\n        'Turkey', 'Ukraine',  'United Kingdom', 'Scotland', 'United States','Vietnam']\ntemp_short = temp[temp['Country or region'].isin(short_list)]","c91083e5":"temp_short['Country or region'].replace('United States (unofficial)','US', inplace=True)","8c48985b":"temp_short.head()\n","c02a829a":"fig = px.bar(temp_short.sort_values('Tests', ascending=True), \n             x='Country or region', y=\"Tests\", color='Country or region', \n            text='Tests',\n            # log_y=True,\n             title='Number of tests',\n            )\nfig.update_layout(showlegend=False)\nfig.update_yaxes(range=[0, 1000000])\n#fig.update_yaxes(showticklabels=False)\nfig.update_xaxes(tickangle=90, tickfont=dict(size=8))\n\nt_s = temp_short.sort_values('Tests', ascending=True).reset_index()\nfig.add_shape(\n        # unfilled Rectangle\n            type=\"rect\",\n            x0=t_s.loc[t_s['Country or region']=='Ukraine'].index[0]-.4,\n            y0=0,\n            x1=t_s.loc[t_s['Country or region']=='Ukraine'].index[0]+.4,\n            y1=t_s.loc[t_s['Country or region']=='Ukraine']['Tests'].values[0]+.1,\n            line=dict(\n                color=\"RED\"\n                ),\n            line_width=3,\n    \n        )\n\nfig.show()\n","6d9f463b":"fig = px.bar(temp_short.sort_values('Tests\u2009\/millionpeople', ascending=True), \n             x='Country or region', y='Tests\u2009\/millionpeople', color='Country or region', \n            text='Tests\u2009\/millionpeople',\n            # log_y=True,\n             title='Tests\u2009\/millionpeople',\n            )\nfig.update_layout(showlegend=False)\nfig.update_yaxes(range=[0, 10000])\n#fig.update_yaxes(showticklabels=False)\nfig.update_xaxes(tickangle=90, tickfont=dict(size=8))\n\nt_s = temp_short.sort_values('Tests\u2009\/millionpeople', ascending=True).reset_index()\nfig.add_shape(\n        # unfilled Rectangle\n            type=\"rect\",\n            x0=t_s.loc[t_s['Country or region']=='Ukraine'].index[0]-.4,\n            y0=0,\n            x1=t_s.loc[t_s['Country or region']=='Ukraine'].index[0]+.4,\n            y1=t_s.loc[t_s['Country or region']=='Ukraine']['Tests\u2009\/millionpeople'].values[0]+.1,\n            line=dict(\n                color=\"RED\"\n                ),\n            line_width=3,\n    \n        )\n\nfig.show()","69c01ee2":"import matplotlib.patches as patches\n\nfig = px.bar(temp_short.sort_values('%', ascending=True), \n             x='Country or region', y='%', color='Country or region', \n            text='%',\n            # log_y=True,\n             title='%Number of positive cases identified',\n            )\nfig.update_layout(showlegend=False)\n#fig.update_yaxes(range=[0, 40])\n#fig.update_yaxes(showticklabels=False)\nfig.update_xaxes(tickangle=90, tickfont=dict(size=8))\n\nt_s = temp_short.sort_values('%', ascending=True).reset_index()\n\n# Add patches to color the X axis labels\nfig.add_shape(\n        # unfilled Rectangle\n            type=\"rect\",\n            x0=t_s.loc[t_s['Country or region']=='Ukraine'].index[0]-.4,\n            y0=0,\n            x1=t_s.loc[t_s['Country or region']=='Ukraine'].index[0]+.4,\n            y1=t_s.loc[t_s['Country or region']=='Ukraine']['%'].values[0]+.1,\n            line=dict(\n                color=\"RED\"\n            ),line_width=3\n            #fillcolor=\"LightSkyBlue\"\n        )\n\n\nfig.show()","0ac8d50d":"temp_short = temp_short.sort_values('Tests', ascending=False)\ntemp_short['Ukraine'] = \"\"\ntemp_short.loc[temp_short['Country or region'] == 'Ukraine', 'Ukraine'] = 'Ukraine'\n\nfor i in list(temp_short.head(10)['Country or region']):\n    temp_short.loc[temp_short['Country or region'] == i, 'Ukraine'] = i","9d6be181":"temp_short.head()\ntemp_short['Positive_rate'] = temp_short['Positive'] \/ temp_short['Tests']","f3e7ca14":"fig = px.scatter(temp_short.sort_values('Tests', ascending=False).iloc[:, :], \n                 x='Tests', y='Positive', color='Country or region', size='Positive_rate', #height=700,\n                 text='Ukraine', #log_x=True, log_y=True, \n                 title='Tested vs Confirmed (Scale is in log10) ALL')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\n#fig.update_layout(xaxis_rangeslider_visible=True)\n#fig.update_yaxes(range=[0, 400000])\n#fig.update_xaxes(range=[0, 2000000])\nfig.show()\n\n\nfig = px.scatter(temp_short.sort_values('Tests', ascending=True).iloc[:20, :], \n                 x='Tests', y='Positive', color='Country or region', size='Positive_rate', #height=700,\n                 text='Ukraine', #log_x=True, log_y=True, \n                 title='Tested vs Confirmed (Scale is in log10) 20bottom')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\n#fig.update_layout(xaxis_rangeslider_visible=True)\n#fig.update_yaxes(range=[0, 40000])\n#fig.update_xaxes(range=[0, 200000])\nfig.show()\n","7b373358":"Group cases by countries and date","7d09cbcf":"Calculate new cases and smooth distribution of new cases"}}