{"cell_type":{"b85a7613":"code","c0cf0279":"code","04f9b44d":"code","3b116bbe":"code","0ffc8050":"code","04229fb7":"code","f25e85e9":"code","0a2b763f":"code","8be3f6f6":"code","0f2bf937":"code","8077038e":"code","d065428c":"code","6ab2f56c":"code","1b31352a":"code","02168834":"code","3ee816ea":"code","bba5222d":"code","db72d354":"code","8001892e":"code","92c3e371":"code","6fd07d38":"code","6725f584":"code","05304410":"code","32598f52":"markdown","b80a7c03":"markdown","1ff75160":"markdown","b2ff7fc8":"markdown","0dbd23e9":"markdown","87d79836":"markdown","5d1e8a22":"markdown","7c972b4c":"markdown","e2cd39da":"markdown"},"source":{"b85a7613":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport category_encoders as ce\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0cf0279":"# Load Training Set Data\n\ndata = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\", index_col=\"id\")\ndata.dropna(subset=['target'], axis=0, inplace=True)\n\n#Segregated data into target (y) and features (X)\n\nX = data.copy()\ny = X.pop(\"target\")","04f9b44d":"#Identified NA values in training set\n\nX.isna().sum()\n","3b116bbe":"#Seperated independant variables columns into categorical (cat_cols) and continuos variables (num_cols)\n\ncat_cols = [ccols for ccols in X.columns if X[ccols].dtype == \"object\"]\n\nnum_cols = [ncols for ncols in X.columns if X[ncols].dtype in [\"int64\", \"float64\"] ]\n","0ffc8050":"X.describe()","04229fb7":"for i in cat_cols:\n    print(set(X[i]))","f25e85e9":"counting = X['cat0'].value_counts()\n\nprint(counting[1])","0a2b763f":"categories = []\nvalues = []\nfor i, c_name in enumerate(cat_cols):\n    cats = set(X[c_name])\n    cats = list(cats)\n    categories.append(cats)\n    counting = X[c_name].value_counts()\n    vals=[]\n    for i in cats:\n        vals.append(counting[i])\n    values.append(vals)\n        \nfig, axs = plt.subplots(3, 4, figsize=(12,12))\nax = axs.flatten()\nfor i in range(len(cat_cols)):\n    ax[i].bar(categories[i], values[i])\n    ax[i].set_title(cat_cols[i])\n","8be3f6f6":"def modify_df(df):\n    df['cat4'] = df['cat4'].apply(lambda x: x if x == 'B' else 'Z')\n    df['cat5'] = df['cat5'].apply(lambda x: x if x in ['B', 'D'] else 'Z')\n    df['cat6'] = df['cat6'].apply(lambda x: x if x == 'A' else 'Z')\n    df['cat7'] = df['cat7'].apply(lambda x: x if x in ['E', 'D'] else 'Z')\n    df['cat8'] = df['cat8'].apply(lambda x: x if x in ['E', 'C', 'G', 'A'] else 'Z')\n    \n    return df","0f2bf937":"#Feature engineered X\nX = modify_df(X)","8077038e":"#As XGBoost is not able to handle non-numerical categorical variables, label encoding is conducted \nencoder = ce.OrdinalEncoder()\nencoder.fit(X)\n\nX = encoder.transform(X)","d065428c":"#Split data into training set and validating set\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2)","6ab2f56c":"#Base Model: \nmodelA = XGBRegressor(n_estimators=1000, learning_rate=0.01, max_depth=4)\n\nmodelA.fit(X_train,y_train)\n\npredA = modelA.predict(X_valid)\n\nprint(mean_squared_error(y_valid,predA))\n\n#MSE of base model is 0.7228872613844344","1b31352a":"learnrates = [0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.20]\nmse0 = []\nfor rate in learnrates:\n    XG_model = XGBRegressor(n_estimators=1000, learning_rate= rate, max_depth=4)\n    XG_model.fit(X_train,y_train)\n    prediction = XG_model.predict(X_valid)\n    mse0.append(mean_squared_error(y_valid,prediction))\n    print(rate)\n","02168834":"views = dict(zip(learnrates,mse0))\nviews = pd.DataFrame.from_dict(views, orient='index')\n\nviews.sort_values(by=0)","3ee816ea":"num_esti = [100,200,300,400,500,600,700,800,900,1000]\nmse1 = []\n\nfor num in num_esti:\n    XG_model = XGBRegressor(n_estimators=num, learning_rate=0.01, max_depth=4)\n    XG_model.fit(X_train,y_train)\n    prediction = XG_model.predict(X_valid)\n    mse1.append(mean_squared_error(y_valid,prediction))\n    print(num)","bba5222d":"views = dict(zip(num_esti,mse1))\nviews = pd.DataFrame.from_dict(views, orient='index')\n\nviews.sort_values(by=0)","db72d354":"max_dep = [2,3,4,5,6,7,8]\nmse2 = []\n\nfor depth in max_dep:\n    XG_model = XGBRegressor(n_estimators=1000, learning_rate=0.06, max_depth=depth)\n    XG_model.fit(X_train,y_train)\n    prediction = XG_model.predict(X_valid)\n    mse2.append(mean_squared_error(y_valid,prediction))\n    print(depth)","8001892e":"views = dict(zip(max_dep,mse2))\nviews = pd.DataFrame.from_dict(views, orient='index')\n\nviews.sort_values(by=0)","92c3e371":"X_train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\",index_col='id')\n\n\n\nc_col = [ccol for ccol in X_train.columns if X_train[ccol].dtype=='object']\n\nnum_col =[ncol for ncol in X_train.columns if X_train[ncol].dtype in ['int64', 'float64']]\n\ncolumns = c_col + num_col\nX_touse = X_train[columns].copy()\n\nX_touse = modify_df(X_touse)\n\n","6fd07d38":"#Final Model:\nmodel = XGBRegressor(n_estimators=1000, learning_rate=0.06, max_depth=3)","6725f584":"model.fit(X, y)\nprediction = model.predict(X_touse)\nprint('done!')","05304410":"output = pd.DataFrame({'id': X_train.index,\n                       'target': predictionA})\n\noutput.head()\noutput.to_csv('submission.csv', index=False)","32598f52":"# Feature Engineering","b80a7c03":"**Distribution Plot of Categorical Variables**","1ff75160":"As all continuous variables appear to have a mean and std. deviation that fall within a similiar range, scaling the continuous variables does not seem necessary.","b2ff7fc8":"Did not find any missing values in data set. Proceeded to conduct data analysis","0dbd23e9":"We see that certain categorical features appear to be unbalanced. Specifically,cat4, cat5, cat6, cat7 and cat8 are significantly unbalanced unbalanced. Feature engineering may assist in dealing with this unbalance.","87d79836":"# Manual Parameter Tuning","5d1e8a22":"# Make Submission","7c972b4c":"# Model Development","e2cd39da":"# Data Analysis"}}