{"cell_type":{"2d3cad12":"code","fbe370f0":"code","b1071237":"code","3f371783":"code","2c9cd6d8":"code","f95e11d6":"code","dcbef097":"code","bb04d68e":"code","3143b639":"code","4532a8c8":"code","a5f96a53":"code","dbc7f627":"code","2dc2c1c5":"code","2c0918f4":"code","64baa454":"code","6709f4ca":"code","4a6733aa":"code","b906ad54":"code","7ad9d9ae":"code","4f6c2310":"code","f972219e":"code","bea701c9":"code","4d4526f7":"code","1bab3731":"code","0c75dbf8":"code","deab2eff":"code","63bd275b":"code","f29b772e":"code","45b2926c":"code","cf911f57":"code","09308925":"code","f5ec3ac5":"code","0d1f4ee1":"code","68801984":"code","6f187b57":"code","4d3db2d0":"code","5776e5df":"code","105c2584":"code","361ef52c":"code","ccba0242":"code","4a733203":"code","2b39ec58":"code","a465467f":"code","a3fd5619":"code","4a3fc880":"code","91bcbd4b":"code","30d316b5":"code","2c0ac184":"markdown","5847c79a":"markdown","cd4f2ae8":"markdown","ec92794e":"markdown","d55a7154":"markdown","85bd4df7":"markdown","5df59f25":"markdown","a045bc19":"markdown","73211c5f":"markdown","c503c2ce":"markdown","f404078e":"markdown","d892d932":"markdown","7dfaca87":"markdown","3d440628":"markdown","b413edc4":"markdown","b8ee49ee":"markdown","3559b94b":"markdown"},"source":{"2d3cad12":"# importing required packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nplt.rcParams['figure.figsize'] = (9.0,9.0)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fbe370f0":"train_dataset = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_dataset =  pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","b1071237":"# Shape of the datasets\nprint(train_dataset.shape, test_dataset.shape)","3f371783":"test_dataset.head()","2c9cd6d8":"train_dataset.head()","f95e11d6":"train_dataset.SibSp.unique()","dcbef097":"train_dataset.describe()","bb04d68e":"train_dataset.isnull().sum()","3143b639":"sb.heatmap(train_dataset.isnull())","4532a8c8":"# writing a function for imputing the data\ndef imput(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","a5f96a53":"train_dataset['Age'] = train_dataset[['Age','Pclass']].apply(imput, axis=1)","dbc7f627":"train_dataset['Embarked'].unique()","2dc2c1c5":"# a function for missing value imputation\ndef impu(Embarked):\n    if pd.isnull(Embarked):\n        return 'C'\n    else:\n        return Embarked","2c0918f4":"train_dataset['Embarked'] = train_dataset['Embarked'].apply(impu)","64baa454":"sb.heatmap(train_dataset.isnull())","6709f4ca":"train_dataset.info()","4a6733aa":"test_dataset.isnull().sum()","b906ad54":"test_dataset.info()","7ad9d9ae":"test_dataset['Age'] = test_dataset[['Age','Pclass']].apply(imput, axis=1)","4f6c2310":"sb.heatmap(test_dataset.isnull())","f972219e":"train_dataset.groupby(train_dataset.Age\/\/10*10).size().plot.bar(cmap='Set3', width=0.9)\nplt.title('Age Group Size', fontsize = 20)\nplt.show()","bea701c9":"sb.countplot(x='Survived',data = train_dataset, palette = 'Dark2')\nplt.title('Survival Count', fontsize = 20)\nplt.show()","4d4526f7":"sb.countplot(x='Survived',hue = train_dataset['Sex'], data = train_dataset, palette = 'Reds')\nplt.title('Survived vs sex', fontsize = 20)\nplt.show()","1bab3731":"sb.countplot(x='Survived', hue='Pclass',data=train_dataset)\nplt.title('Survived vs Pclass', fontsize = 20)\nplt.show()","0c75dbf8":"sb.boxplot(x='Survived', y='Age',data=train_dataset, palette = 'winter')\nplt.title('Survived vs Age', fontsize = 20)\nplt.show()\n","deab2eff":"train_dataset = train_dataset.set_index('PassengerId')\ntrain_dataset = train_dataset.drop(columns=['Name', 'Ticket', 'Cabin'])\ntrain_dataset = pd.get_dummies(train_dataset, columns=[ 'Pclass','Sex','Embarked'])","63bd275b":"train_dataset.head()","f29b772e":"test_dataset = test_dataset.set_index('PassengerId')\ntest_dataset = test_dataset.drop(columns=['Name', 'Ticket', 'Cabin'])\ntest_dataset = pd.get_dummies(test_dataset, columns=['Pclass','Sex', 'Embarked'])\ntest_dataset.head()","45b2926c":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(train_dataset.drop(['Survived'],axis=1),\n                                                    train_dataset['Survived'], test_size=0.1,  random_state= 101)","cf911f57":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom xgboost.sklearn import XGBClassifier\nmodel = XGBClassifier()\nmodel.fit(x_train, y_train)","09308925":"# parameters you want to test, finding out which gives the best accuracy.\nparams={\n \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n    }","f5ec3ac5":"#finding the best parameter\nrandom_search=RandomizedSearchCV(model,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","0d1f4ee1":"random_search.fit(x_train,y_train)","68801984":"# this gives out the best estimator values\n# you can literally copy this and paste it\nrandom_search.best_estimator_","6f187b57":"# best parameters that we asked for. \nrandom_search.best_params_","4d3db2d0":"# slecting paramters avoiding overfitting or underfitting, being careful with learning_rate and max_depth etc\nxgb = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.7, gamma=0.2,\n              learning_rate=0.1, max_delta_step=0, max_depth=6,\n              min_child_weight=5, missing=None, n_estimators=100, n_jobs=-1,\n              nthread=None, objective='binary:logistic', random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n              silent=None, subsample=1, verbosity=1)\nxgb.fit(x_train,y_train)\n","5776e5df":"pred = xgb.predict(x_test)","105c2584":"print('Score:', xgb.score(x_test,y_test))","361ef52c":"from sklearn.metrics import classification_report, confusion_matrix\nprint(classification_report(y_test,pred))","ccba0242":"model.predict(test_dataset)","4a733203":"from sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score","2b39ec58":"def plot_roc_curve(fpr,tpr):\n    plt.plot(fpr, tpr, color = 'lime', label = 'ROC')\n    plt.plot([0,1], [0, 1], color = 'darkblue', linestyle='--')\n    plt.xlabel('False positive rate')\n    plt.ylabel('true positive rate')\n    plt.title('receiver operating charcteristic (ROC Curve')\n    plt.legend()\n    plt.show()","a465467f":"probs = model.predict_proba(x_test)","a3fd5619":"probs = probs[:,1]\nprobs","4a3fc880":"auc = roc_auc_score(y_test, probs)\nprint(\"auc:%.2f\" %auc)","91bcbd4b":"fpr, tpr, thresholds = roc_curve(y_test, probs)\nplot_roc_curve(fpr,tpr)","30d316b5":"submission_df = pd.DataFrame(columns=['PassengerId', 'Survived'])\nsubmission_df['PassengerId'] = test_dataset.index\nsubmission_df['Survived'] = xgb.predict(test_dataset)\nsubmission_df.to_csv('submissions.csv', header=True, index=False)\nsubmission_df.head(10)","2c0ac184":"Lets try **XGB Classifier** to train and predict the data.\nTo make our model more efficient and accurate lets perform **Hyper Parameter Tuning** using GridsearchCV\/RandomizedSearchCV.**","5847c79a":"## Data Encoding","cd4f2ae8":"Insights from graph:\n1. males survived: 100\n   males died: 400+\n\n2. females survived: 200+\n   females died: 100 ","ec92794e":"## Roc Curve","d55a7154":"## Data Visualization","85bd4df7":"## Model Deployment","5df59f25":"## Dataset\n1. PassengerId: ID of the passenger.\n2. Pclass: Ticket Class.\n3. Name: Name of the passenger.\n4. Sex: gender orientation.\n5. Age: passenger's age.\n6. SibSp: siblings \/ spouses aboard the Titanic.\n7. Parch: parents on the train.\n8. Ticket: ticket number.\n9. Fare: cost of the ticket.\n10. Cabin: cabin number \n11. Embarked: Port of Embarkation.\n12. Survived: survived or not(1,0)","a045bc19":"### Missing Value Imputation","73211c5f":"Graph on passenger survival Pclass wise.\n\nInsights from graph:\n1. Number of passengers survived of every class is almost same.\n2. highest number of passengers died were of Class 3","c503c2ce":"## Train Test data Split","f404078e":"### Reading the dataset","d892d932":"### R2","7dfaca87":"# Titanic data analysis and ML\n","3d440628":"Around 300 passengers survived and more than 500 died.","b413edc4":"### Classification report","b8ee49ee":"Plot of sizes of differnt age groups.\n\ninsights from graph:\n* Number of passengers of age 20 years were 350+.this is highest compared to others.\n* least number of passengers were of age 60 and above.","3559b94b":"A boxplot representing survival age wise."}}