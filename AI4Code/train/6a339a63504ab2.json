{"cell_type":{"9ce63c45":"code","1995c2b6":"code","1c9a00bb":"code","87ed0119":"code","7bbce0e8":"code","2c4fd8eb":"code","31745052":"code","f196a9f7":"code","6f514c8f":"code","0be1ed80":"code","bdd7efa5":"code","32779b72":"code","fde601fb":"code","e7483f3d":"code","c670d59c":"code","154375ce":"code","720ffdc1":"code","5456bafc":"code","1a6bad34":"code","961bd8ae":"code","14b0ecfa":"code","b100e9b8":"code","763900a9":"code","7acecfba":"code","9b21e817":"code","b2b80056":"code","e0845fa2":"code","b8100772":"code","6dd95477":"code","bb5d4806":"code","160b2c25":"code","105afccc":"code","02ac8807":"code","9bb9cc1b":"code","8870b5f3":"code","2ecf09a0":"code","0be5aa9b":"code","09563994":"code","1afa2599":"code","562b7bb1":"code","94d03408":"code","177196eb":"code","22802f8f":"code","9eb84815":"code","fe88f22a":"code","b92ea8fb":"code","644499f8":"code","7a4e98da":"code","f9dce2ba":"code","56e28e5d":"code","8e12045e":"code","83ac8b94":"markdown","328afcd3":"markdown","26d5bdd6":"markdown","5d26d8d1":"markdown","a7946df1":"markdown","74cdb67a":"markdown","79c01364":"markdown","516fcfa5":"markdown","fca99569":"markdown","676b72fe":"markdown","aaf9919f":"markdown","2abe2dbb":"markdown","9624dc8b":"markdown","a4751132":"markdown","fe1b7f83":"markdown","2ec0803e":"markdown","a54e3cdd":"markdown","a1b97cc6":"markdown","da120cd8":"markdown","db32f9e1":"markdown","13707070":"markdown","717ad511":"markdown","64254c52":"markdown","c0e69937":"markdown","ae42c522":"markdown","338f288e":"markdown","20638a3a":"markdown","bc643744":"markdown","e3321cc9":"markdown","25b0f596":"markdown"},"source":{"9ce63c45":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scikitplot as skplt\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier","1995c2b6":"# Carregando datasets\ndf_treino = pd.read_csv('..\/input\/costa-rican-household-poverty-prediction\/train.csv')\ndf_teste = pd.read_csv('..\/input\/costa-rican-household-poverty-prediction\/test.csv')\n\ndf_treino.shape, df_teste.shape","1c9a00bb":"# Visualizando dados de df\ndf_treino.info(max_cols=145)","87ed0119":"# Visualizando dados de test\ndf_teste.info(max_cols=145)","7bbce0e8":"# Verificando os missing values\ndf_treino.isnull().sum()[df_treino.isnull().sum() >= 1] ","2c4fd8eb":"# Excluindo os missing values\nmissing = list(df_treino.isnull().sum()[df_treino.isnull().sum() >= 1].index) \ndf_treino.drop([missing.pop(0) for i in range(3)], axis =1, inplace = True)\ndf_treino.shape","31745052":"# Preenchendo os missing values com a m\u00e9dia\ndf_treino[missing] = df_treino[missing].fillna(np.mean)","f196a9f7":"# Verificando a inexist\u00eancia de missing values ap\u00f3s tratamento\ndf_treino.isnull().sum()[df_treino.isna().sum() >= 1]","6f514c8f":"# Excluindo vari\u00e1veis categ\u00f3ricas da base de treino\nvariaveis = list(df_treino.select_dtypes('int64').columns)\n\nbinarias = []\nfor i in variaveis:\n  u =df_treino[i].unique()\n\n  if u.sum() == 1:\n    binarias.append(i)\n\ndiscretas = [i for i in variaveis if i not in binarias]\n\ndf_treino = df_treino[binarias + discretas]","0be1ed80":"# Sexo dos ocupantes das resid\u00eancias\nvar = 'male','female'\nleg = ['Masculino','Feminino']\n\ny = []\nfor v in var: \n    y.append(df_treino[v].value_counts()[1])\n    \nplt.figure(figsize=(18,5))\nsns.barplot(x=leg, y=y).set_title(\"Sexo\")\nplt.show()","bdd7efa5":"# Idade dos ocupantes das resid\u00eancias\nplt.figure(figsize=(18,5))\nsns.histplot(data=df_treino, x=\"age\").set_title(\"Idade\")\nplt.show()","32779b72":"# Parentesco dos ocupantes das resid\u00eancias\nvar = 'parentesco1','parentesco2','parentesco3','parentesco4','parentesco5','parentesco6','parentesco7','parentesco8','parentesco9','parentesco10','parentesco11','parentesco12'\nleg = ['Chefe de fam\u00edlia','C\u00f4njuge','Filho(a)','Enteado(a)','Genro\/Nora','Neto(a)','Pai\/M\u00e3e','Sogro(a)','Irm\u00e3o\/Irm\u00e3','Cunhado(a)','Outro familiar','Outro n\u00e3o familiar']\n\ny = []\nfor v in var: \n    y.append(df_treino[v].value_counts()[1])\n    \nplt.figure(figsize=(18,5))\nsns.barplot(x=leg, y=y).set_title(\"Parentesco\")\nplt.show()","fde601fb":"# Estado civil dos ocupantes das resid\u00eancias\nvar = 'estadocivil1','estadocivil2','estadocivil3','estadocivil4','estadocivil5','estadocivil6','estadocivil7'\nleg = ['Menores de 10 anos','Uni\u00e3o est\u00e1vel','Casados(as)','Divorciados(as)','Separados(as)','Vi\u00favos(as)','Solteiros(as)']\n\ny = []\nfor v in var: \n    y.append(df_treino[v].value_counts()[1])\n    \nplt.figure(figsize=(18,5))\nsns.barplot(x=leg, y=y).set_title(\"Estado Civil\")\nplt.show()","e7483f3d":"# Grau de instru\u00e7\u00e3o dos ocupantes das resid\u00eancias\nvar = 'instlevel1','instlevel2','instlevel3','instlevel4','instlevel5','instlevel6','instlevel7', 'instlevel8', 'instlevel9'\nleg = ['Nenhum','Prim\u00e1rio incompleto','Prim\u00e1rio completo','Secund\u00e1rio incompleto','Secund\u00e1rio completo','T\u00e9cnico incompleto','T\u00e9cnico completo','Gradua\u00e7\u00e3o','P\u00f3s-Gradua\u00e7\u00e3o ou superior']\n\ny = []\nfor v in var: \n    y.append(df_treino[v].value_counts()[1])\n    \nplt.figure(figsize=(18,5))\nsns.barplot(x=leg, y=y).set_title(\"Grau de Instru\u00e7\u00e3o\")\nplt.show()","c670d59c":"# Tipo de moradia\nvar = 'tipovivi1','tipovivi2','tipovivi3','tipovivi4','tipovivi5'\nleg = ['Pr\u00f3pria','Financiada','Alugada','Prec\u00e1ria','Outras']\n\ny = []\nfor v in var: \n    y.append(df_treino[v].value_counts()[1])\n    \nplt.figure(figsize=(18,5))\nsns.barplot(x=leg, y=y).set_title(\"Tipo de Moradia\")\nplt.show()","154375ce":"# N\u00famero de c\u00f4modos das resid\u00eancias\nplt.figure(figsize=(18,5))\nsns.histplot(data=df_treino, x=\"rooms\").set_title(\"N\u00famero de C\u00f4modos\")\nplt.show()","720ffdc1":"# Im\u00f3vel rural ou urbano\nvar = 'area2','area1'\nleg = ['Rural','Urbano']\n\ny = []\nfor v in var: \n    y.append(df_treino[v].value_counts()[1])\n    \nplt.figure(figsize=(18,5))\nsns.barplot(x=leg, y=y).set_title(\"Im\u00f3vel rural x Im\u00f3vel urbano\")\nplt.show()","5456bafc":"# Superlota\u00e7\u00e3o (por quarto e por c\u00f4modo)\nvar = 'hacdor','hacapo'\nleg = ['Por quarto','Por c\u00f4modo']\n\ny = []\nfor v in var: \n    y.append(df_treino[v].value_counts()[1])\n    \nplt.figure(figsize=(18,5))\nsns.barplot(x=leg, y=y).set_title(\"Superlota\u00e7\u00e3o - Por quarto ou por c\u00f4modo\")\nplt.show()","1a6bad34":"# Verificando a distribui\u00e7\u00e3o das classes na vari\u00e1vel Target\ndf_treino[\"Target\"].value_counts(normalize = True)","961bd8ae":"# Balanceando as classes da vari\u00e1vel target a partir de amostra com Random Over Sampler\nsample = RandomOverSampler(random_state = 42)\nX_over, y_over = sample.fit_resample(df_treino, df_treino[\"Target\"])\ndf_novo = pd.DataFrame(X_over)\ndf_novo[\"Target\"] = y_over","14b0ecfa":"# Verificando a distribui\u00e7\u00e3o das classes na vari\u00e1vel Target ap\u00f3s balanceamento\ndf_novo[\"Target\"].value_counts(normalize = True)","b100e9b8":"# Separando vari\u00e1veis para treinamento\nfeats = [c for c in df_novo.columns if c not in ['Id', 'Target']]","763900a9":"train, test = df_novo, df_teste\nrf = RandomForestClassifier(n_jobs=1, n_estimators=200, random_state=42)\nrf.fit(train[feats], train['Target'])","7acecfba":"# Prever o Target de teste usando o modelo treinado\ntest['Target'] = rf.predict(test[feats]).astype(int)\ntest['Target'].value_counts(normalize=True)","9b21e817":"## Matriz de confus\u00e3o\npd.crosstab(train['Target'],test['Target'])","b2b80056":"# Criando o arquivo para submiss\u00e3o\ntest[['Id', 'Target']].to_csv('submission.csv', index=False)","e0845fa2":"# Verificando o peso de cada coluna na predi\u00e7\u00e3o\nfig = plt.figure(figsize=(15, 20))\npd.Series(rf.feature_importances_, index=feats).sort_values().plot.barh()","b8100772":"# Balanceando as classes da vari\u00e1vel target a partir de amostra com Random Under Sampler\nsample = RandomUnderSampler(random_state = 42)\nX_under, y_under = sample.fit_resample(df_treino, df_treino[\"Target\"])\ndf_novo2 = pd.DataFrame(X_under)\ndf_novo2[\"Target\"] = y_under","6dd95477":"# Verificando a distribui\u00e7\u00e3o das classes na vari\u00e1vel Target ap\u00f3s balanceamento\ndf_novo2[\"Target\"].value_counts(normalize = True)","bb5d4806":"train, test = df_novo2, df_teste\nrf2 = RandomForestClassifier(n_jobs=1, n_estimators=200, random_state=42)\nrf2.fit(train[feats], train['Target'])","160b2c25":"# Prever o Target de teste usando o modelo treinado\ntest['Target'] = rf2.predict(test[feats]).astype(int)\ntest['Target'].value_counts(normalize=True)","105afccc":"test[['Id', 'Target']].to_csv('submission.csv', index=False)","02ac8807":"## Matriz de confus\u00e3o\npd.crosstab(train['Target'],test['Target'])","9bb9cc1b":"# Criando um novo modelo\nrf3 = RandomForestClassifier(n_jobs=2, n_estimators=200, random_state=42)\nrf3.fit(train[feats], train['Target'])","8870b5f3":"# Prever o Target de teste usando o modelo treinado\ntest['Target'] = rf3.predict(test[feats]).astype(int)\ntest['Target'].value_counts(normalize=True)","2ecf09a0":"test[['Id', 'Target']].to_csv('submission.csv', index=False)","0be5aa9b":"# Criando um novo modelo\nrf4 = RandomForestClassifier(n_jobs=1, n_estimators=400, random_state=42)\nrf4.fit(train[feats], train['Target'])","09563994":"# Prever o Target de teste usando o modelo treinado\ntest['Target'] = rf4.predict(test[feats]).astype(int)\ntest['Target'].value_counts(normalize=True)","1afa2599":"test[['Id', 'Target']].to_csv('submission.csv', index=False)","562b7bb1":"# Testando com Gradient Boosting\n\ngbm = GradientBoostingClassifier(n_estimators=200, learning_rate=1.0, max_depth=1, random_state=42)\ngbm.fit(train[feats], train['Target'])","94d03408":"# Prever o Target de teste usando o modelo treinado\ntest['Target'] = gbm.predict(test[feats]).astype(int)\ntest['Target'].value_counts(normalize=True)","177196eb":"test[['Id', 'Target']].to_csv('submission.csv', index=False)","22802f8f":"# Testando com XGBoost\nxgb = XGBClassifier(n_estimators=200, learning_rate=0.09, random_state=42)\nxgb.fit(train[feats], train['Target'])","9eb84815":"# Prever o Target de teste usando o modelo treinado\ntest['Target'] = xgb.predict(test[feats]).astype(int)\ntest['Target'].value_counts(normalize=True)","fe88f22a":"test[['Id', 'Target']].to_csv('submission.csv', index=False)","b92ea8fb":"# Testando com AdaBoost\nabc = AdaBoostClassifier(n_estimators=200, learning_rate=1.0, random_state=42)\nabc.fit(train[feats], train['Target'])","644499f8":"# Prever o Target de teste usando o modelo treinado\ntest['Target'] = abc.predict(test[feats]).astype(int)\ntest['Target'].value_counts(normalize=True)","7a4e98da":"test[['Id', 'Target']].to_csv('submission.csv', index=False)","f9dce2ba":"# Testando com CatBoost\ncbc = CatBoostClassifier(random_state=42)\ncbc.fit(train[feats], train['Target'])","56e28e5d":"# Prever o Target de teste usando o modelo treinado\ntest['Target'] = cbc.predict(test[feats]).astype(int)\ntest['Target'].value_counts(normalize=True)","8e12045e":"test[['Id', 'Target']].to_csv('submission.csv', index=False)","83ac8b94":"Observamos uma maioria de jovens entre os ocupantes.","328afcd3":"<b>Resultado ROS:<\/b> 0.36488, superior \u00e0 obtida antes do balanceamento (0.36353). ","26d5bdd6":"Observamos uma leve predomin\u00e2ncia de mulheres entre os ocupantes.","5d26d8d1":"# Testes com mudan\u00e7as de par\u00e2metros","a7946df1":"# XGBoost","74cdb67a":"<b>Resultado:<\/b> 0.36509, superior \u00e0 obtida antes do balanceamento (0.36353), mas inferior ao resultado de Random Forest. ","79c01364":"Dataset de treino com 9.557 observa\u00e7\u00f5es e 143 vari\u00e1veis.\n<br>Dataset de teste com 23.856 observa\u00e7\u00f5es e 142 vari\u00e1veis.","516fcfa5":"As casas s\u00e3o ocupadas majoritariamente pelo(a) chefe de fam\u00edlia, c\u00f4njuge e filhos. Tamb\u00e9m h\u00e1 um bom n\u00famero de netos entre os ocupantes.","fca99569":"# Carregamento de datasets","676b72fe":"<b>Resultado:<\/b> 0.36509, superior \u00e0 obtida antes do balanceamento (0.36353), mas inferior ao resultado de Random Forest. ","aaf9919f":"# Resultado final\nRandom Forest (RUS): 0.40562\n<br> CatBoost (RUS): 0.39720\n<br> Gradient Boosting (RUS): 0.36961\n<br> AdaBoost (RUS): 0.36509\n<br> XGBoost (RUS): 0.36509\n<br> Random Forest (ROS): 0.36488\n\nResultado refer\u00eancia (Random Forest sem balanceamento): 0.36353","2abe2dbb":"A maior parte das resid\u00eancias \u00e9 urbana.","9624dc8b":"A maior parte das resid\u00eancias possuem entre 4 e 6 c\u00f4modos.","a4751132":"A maioria dos ocupantes t\u00eam baixo grau de instru\u00e7\u00e3o (nenhum, prim\u00e1rio e secund\u00e1rio incompleto). A exce\u00e7\u00e3o fica para os graduandos ou graduados.","fe1b7f83":"# An\u00e1lise Explorat\u00f3ria","2ec0803e":"<b>Resultado:<\/b> 0.39720, superior \u00e0 obtida antes do balanceamento (0.36353), mas inferior ao resultado de Random Forest. ","a54e3cdd":"# Balanceamento de classes (Random Over Sampler) e Random Forest","a1b97cc6":"<b>Resultado:<\/b> 0.40562\n<br><br> Sem altera\u00e7\u00f5es","da120cd8":"# CatBoost","db32f9e1":"# Gradient Boosting","13707070":"<b>Resultado:<\/b> 0.36961, superior \u00e0 obtida antes do balanceamento (0.36353), mas inferior ao resultado de Random Forest. ","717ad511":"# Missing values","64254c52":"O gr\u00e1fico acima mostra como as resid\u00eancias foram definidas como superlotadas, quer tenha sido a avalia\u00e7\u00e3o por quarto ou por c\u00f4modo.","c0e69937":"A maioria das moradias s\u00e3o pr\u00f3prias, ou seja, o morador tem sua propriedade integral, n\u00e3o alienada.","ae42c522":"H\u00e1 uma maioria de solteiros e casados entre os ocupantes.","338f288e":"<b>Resultado RUS:<\/b> 0.40562, superior \u00e0 obtida antes do balanceamento (0.36353). \n<br><br> Determinado o Random Under Sampling como o melhor m\u00e9todo de balanceamento.","20638a3a":"<b>Resultado:<\/b> 0.40562\n<br><br> Sem altera\u00e7\u00f5es","bc643744":"# Balanceamento de classes (Random Under Sampler) e Random Forest","e3321cc9":"# AdaBoost","25b0f596":"# Bibliotecas"}}