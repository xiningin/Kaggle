{"cell_type":{"72bfeccb":"code","a6e48f05":"code","210cdf18":"code","761f4bd0":"code","7401e13a":"code","91af9eb3":"code","2a69b505":"code","690125c2":"code","49747380":"code","e071da01":"code","3168782d":"code","2855761a":"code","4f3297e4":"code","bdbc0bb6":"code","1cef7e85":"code","417a815d":"code","26c5ace9":"code","1006f4d4":"code","a4167f38":"code","94f298e8":"code","25492f3f":"code","357de461":"code","b9a641ce":"code","1e0fd253":"code","dfe92e3c":"code","f76cd092":"code","6642773a":"code","eedee20b":"code","36ed61b4":"code","4b2770a4":"code","7d73595f":"code","34226b5e":"code","d78a5004":"code","979469d5":"code","272b3d2f":"code","dc2b68f9":"code","7a107557":"code","e4c349de":"code","f18973ac":"code","b2336c8d":"markdown","5862580f":"markdown","1f1f67e0":"markdown","5ffc8edc":"markdown","ee7a5421":"markdown","cb63e63d":"markdown"},"source":{"72bfeccb":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a6e48f05":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain.info()","210cdf18":"train.head()","761f4bd0":"sns.heatmap(train.isnull(), yticklabels=False, cbar= False, cmap='viridis')   # we see that we miss some info in 'Age' column and a lot more in 'Cabin' column.","7401e13a":"df_num= train[['Age','SibSp','Parch','Fare']]\ndf_str = train[['Survived','Pclass','Sex','Ticket','Cabin','Embarked']]","91af9eb3":"print(df_num.corr())\nsns.heatmap(df_num.corr())","2a69b505":"# compare survival rate across Age, SibSp, Parch, and Fare \npd.pivot_table(train, index = 'Survived', values = ['Age','SibSp','Parch','Fare'])","690125c2":"sns.set_style('whitegrid')\nprint(pd.pivot_table(train, index = 'Survived', values = 'Ticket' ,aggfunc ='count'))\nsns.countplot(data=train, x='Survived') ","49747380":"# lets check the number of male and female survivors and non survivors respectively \nprint(pd.pivot_table(train, index = 'Survived', columns = 'Sex', values = 'Ticket' ,aggfunc ='count'))\nsns.countplot(data=train, x='Survived',hue = 'Sex')","e071da01":"# lets check the number of survivors and non survivors based on their  Ticket Class \nprint(pd.pivot_table(train, index = 'Survived', columns = 'Pclass', values = 'Ticket' ,aggfunc ='count'))\nsns.countplot(data=train, x='Survived',hue = 'Pclass')","3168782d":"# lets check the number of survivors and non survivors based on their Embarked point \nprint(pd.pivot_table(train, index = 'Survived', columns = 'Embarked', values = 'Ticket' ,aggfunc ='count'))\nsns.countplot(data=train, x='Survived',hue = 'Embarked') ","2855761a":"# lets check the Age of the passengers for whom we have info\nsns.displot(data=train.dropna(), x='Age')","4f3297e4":"# lets check the number of passengers that traveled alone or with other people\nsns.countplot(data=train, x='SibSp')","bdbc0bb6":"print(pd.pivot_table(train, index = 'Survived', columns = 'SibSp', values = 'Ticket' ,aggfunc ='count'))\nsns.countplot(data=train, x='Survived', hue='SibSp')\nplt.legend(loc='upper right')","1cef7e85":"# lets check the number of passengers that traveled alone or with other people\nsns.countplot(data=train, x='Parch')","417a815d":"sns.countplot(data=train, x='Survived', hue='Parch')\nprint(pd.pivot_table(train, index = 'Survived', columns = 'Parch', values = 'Ticket' ,aggfunc ='count'))","26c5ace9":"train['Fare'].plot(kind='hist')","1006f4d4":"sns.jointplot(data=train,x='Age',y='Fare',hue='Survived')","a4167f38":"plt.figure(figsize=(10,7))\nsns.boxplot(x='Pclass', y='Age', data=train)","94f298e8":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 38\n        elif Pclass == 2:\n            return 30\n        else:\n            return 25\n    else:\n        return Age","25492f3f":"train['Age'] = train[['Age','Pclass']].apply(impute_age, axis=1)\nsns.heatmap(train.isnull(), yticklabels=False, cbar= False, cmap='viridis') # filled 'Age' column with reasonable guesses","357de461":"train.drop('Cabin', axis=1, inplace=True)","b9a641ce":"train[\"Salutation\"] = train['Name'].apply(lambda x: x.strip().split('.'))\ntrain[\"Salutation\"] = train[\"Salutation\"].apply(lambda x: x[0].split(','))\ntrain[\"Salutation\"] = train[\"Salutation\"].apply(lambda x: x[1])\nprint(train[\"Salutation\"].value_counts())\ntrain[\"Salutation\"].hist(figsize=(20,7),bins=50)","1e0fd253":"train=train[train[\"Salutation\"].apply(lambda x: x in [' Dr', ' Major',' Master', ' Miss',  ' Mlle',' Mr', ' Mrs', ' Ms', ' Rev'])]","dfe92e3c":"np.unique(train[\"Salutation\"], return_counts=True)","f76cd092":"print(pd.pivot_table(train, index = 'Survived', columns = 'Salutation', values = 'Ticket' ,aggfunc ='count'))\nsns.countplot(data=train, x='Survived', hue='Salutation')","6642773a":"# create dummy variables\nsex=pd.get_dummies(train['Sex'],drop_first=True)\nembark=pd.get_dummies(train['Embarked'],drop_first=True)\nsalutation = pd.get_dummies(train['Salutation'],drop_first=True)","eedee20b":"train = pd.concat([train,sex,embark,embark,salutation], axis=1)\ntrain.head()","36ed61b4":"train.drop(['PassengerId','Name','Fare','Sex','Ticket','Embarked','Salutation'],axis=1,inplace=True)\ntrain.head()","4b2770a4":"test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest.isnull() # check for missing data\nsns.heatmap(test.isnull(), yticklabels=False, cbar= False, cmap='viridis') ","7d73595f":"test['Age'] = test[['Age','Pclass']].apply(impute_age, axis=1)\nsns.heatmap(test.isnull(), yticklabels=False, cbar= False, cmap='viridis') # filled 'Age' column with reasonable guesses","34226b5e":"test.drop('Cabin', axis=1,inplace=True)","d78a5004":"test[\"Salutation\"] = test['Name'].apply(lambda x: x.strip().split('.'))\ntest[\"Salutation\"] = test[\"Salutation\"].apply(lambda x: x[0].split(','))\ntest[\"Salutation\"] = test[\"Salutation\"].apply(lambda x: x[1])\nnp.unique(test[\"Salutation\"], return_counts=True)","979469d5":"# create dummy variables\nsex=pd.get_dummies(test['Sex'],drop_first=True)\nembark=pd.get_dummies(test['Embarked'],drop_first=True)\nsalutation = pd.get_dummies(test['Salutation'],drop_first=True)","272b3d2f":"test = pd.concat([test,sex,embark,embark,salutation], axis=1)\ntest.head()","dc2b68f9":"test.drop(['PassengerId','Name','Fare','Sex','Ticket','Embarked','Salutation'],axis=1,inplace=True)\ntest.head()","7a107557":"from sklearn.linear_model import LogisticRegression\n\nX_train = train.drop('Survived', axis = 1)\ny_train = train['Survived']\n\nX_test = test\n\nlogmodel = LogisticRegression(max_iter=10000)\nlogmodel.fit(X_train,y_train)","e4c349de":"predictions = logmodel.predict(X_test)","f18973ac":"output = pd.DataFrame({'PassengerId': test.index+892, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","b2336c8d":"sns.set_style('whitegrid')\nprint(pd.pivot_table(train, index = 'Survived', values = 'Ticket' ,aggfunc ='count'))\nsns.countplot(data=train, x='Survived') sns.set_style('whitegrid')\nprint(pd.pivot_table(train, index = 'Survived', values = 'Ticket' ,aggfunc ='count'))\nsns.countplot(data=train, x='Survived') ## The Results","5862580f":"## Search For Motifs","1f1f67e0":"**Clean The Data**","5ffc8edc":"## Clean The Test Data","ee7a5421":"## Explore The Data","cb63e63d":"## Training and Predicting"}}