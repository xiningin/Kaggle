{"cell_type":{"18fd15ba":"code","9e96f8c7":"code","915a13f7":"code","faaabf98":"code","b412a8f7":"code","dbddcd8c":"code","35586b8d":"code","974565af":"code","fda3faee":"code","c2cc5ad6":"code","845f8683":"markdown","4387e87c":"markdown","fe65c7d2":"markdown"},"source":{"18fd15ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e96f8c7":"df_all = pd.read_csv('..\/input\/co2-emissions-by-cars-in-canada\/Sample.csv')\ndf_all","915a13f7":"engine_sizes = df_all['ENGINE_SIZE'].values\nengine_sizes","faaabf98":"fuel_consumption_values = df_all['FUEL_CONSUMPTION*'].values\nfuel_consumption_values","b412a8f7":"plt.scatter(engine_sizes,fuel_consumption_values)","dbddcd8c":"engine_sizes_vector = engine_sizes.reshape(-1,1)\nmodel = LinearRegression().fit(engine_sizes_vector,fuel_consumption_values)\npredictions = model.predict(engine_sizes_vector)\nplt.scatter(engine_sizes_vector,fuel_consumption_values)\nplt.plot(engine_sizes,predictions,color='red')\nplt.show()","35586b8d":"size = 3.0\nfuel_consumption_prediction = model.predict([[size]])[0]","974565af":"X = df_all[\"ENGINE_SIZE\"].values\ny = df_all[\"FUEL_CONSUMPTION*\"].values\nX = X.reshape(-1,1)\nx_train, x_test, y_train, y_test = train_test_split(X,y,train_size=0.8,test_size=0.2,random_state=100)\nprint(f'X_train Shape:{x_train.shape}')\nprint(f'y_train Shape:{y_train.shape}')\nprint(f'X_test Shape:{x_test.shape}')\nprint(f'y_test Shape:{y_test.shape}')\n","fda3faee":"plt.scatter(x_test,y_test,color='red')\n# TypeError: 'str' object is not callable??? I'm not sure why this isn't working\n# plt.xlabel('Engine_Size')\n# plt.ylabel('Fuel_Consumption')\n# plt.title('Tests')\nplt.show()","c2cc5ad6":"lm = LinearRegression()\nlm.fit(x_train,y_train)\ny_predict = lm.predict(x_test)\nprint(f'Train accuracy {round(lm.score(x_train,y_train)*100,2)} %')\nprint(f'Test accuracy {round(lm.score(x_test,y_test)+100,2)} %')","845f8683":"## There's A Lot Of Useless Rows Here","4387e87c":"### Training Split","fe65c7d2":"## It Looks Like The First 365 Rows Are Good Though"}}