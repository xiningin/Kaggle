{"cell_type":{"48563fd2":"code","3bd1e150":"code","477b56a3":"code","b98b012e":"code","0073fd67":"code","22f6ed25":"code","300b2062":"code","d5d58f4b":"code","d3040818":"code","5f481642":"code","47622f01":"code","bc6ca486":"code","c3208ca4":"code","ff22634f":"code","abbcbffa":"code","ac378f29":"code","1966c3de":"code","c7433479":"code","f84a2983":"code","5630a79f":"code","a9bf0040":"code","080162ce":"code","f31ddae4":"code","133d49c4":"code","7c0bd751":"code","229fc4f4":"code","fd1aef42":"code","96e4d5d2":"code","425b2ef2":"code","e26b141f":"code","f346df80":"code","6735ee95":"code","9a0a942c":"code","1c7316ec":"code","33ebb48b":"code","396cae68":"code","9a4492a1":"code","71d2aacb":"code","80495d03":"markdown","09f8705b":"markdown","01ef5204":"markdown","e79c556f":"markdown"},"source":{"48563fd2":"# necessary imports \n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport re\n\nimport nltk\nnltk.download('stopwords')\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.corpus import stopwords\n\nplt.style.use('Solarize_Light2')\n%matplotlib inline","3bd1e150":"df = pd.read_csv('..\/input\/traindata\/train.csv') # loading data","477b56a3":"df.head() # looking at first five rows of the data","b98b012e":"df.shape # shape of data","0073fd67":"df.isnull().sum() # checking for null values in data","22f6ed25":"# dropping missing values\n\ndf.dropna(inplace = True)","300b2062":"df.isna().sum()","d5d58f4b":"df.shape","d3040818":"# checking distribution of data to see if there is any imbalancing present in the data.\n\nplt.figure(figsize = (9, 5))\nsns.countplot(df['label'])\n\nplt.show()","5f481642":"df.dtypes # looking at data types of data","47622f01":"df['label'] = df['label'].astype(str)","bc6ca486":"df.dtypes","c3208ca4":"df.head(10)","ff22634f":"df.reset_index(inplace = True) # resetting the index of data ","abbcbffa":"df.head(10)","ac378f29":"df.drop(['index','id'],axis=1,inplace=True) # dropping 'index' and 'id' columns","1966c3de":"df.head()","c7433479":"ps = PorterStemmer() # initializing porter stemmer","f84a2983":"corpus=[]\nsentences=[]\nfor i in range(0,len(df)):\n    review=re.sub('[^a-zA-Z]',' ', df['title'][i])\n    review=review.lower()\n    list=review.split()\n    review=[ps.stem(word) for word in list if word not in set(stopwords.words('english'))]\n    sentences=' '.join(review)\n    corpus.append(sentences)","5630a79f":"corpus[0]","a9bf0040":"corpus[:20]","080162ce":"from sklearn.feature_extraction.text import CountVectorizer\n\ncv = CountVectorizer(max_features = 5000, ngram_range = (1, 3))","f31ddae4":"# splitting dataset into features and label \n\nX = cv.fit_transform(corpus).toarray()\ny = df['label']","133d49c4":"X, y","7c0bd751":"X.shape, y.shape","229fc4f4":"cv.get_feature_names()[0:20]","fd1aef42":"# splitting dataset into train data and test data\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)","96e4d5d2":"from sklearn.naive_bayes import MultinomialNB\n\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)","425b2ef2":"y_pred = classifier.predict(X_test)\ny_pred","e26b141f":"from sklearn import metrics\n\nmetrics.accuracy_score(y_test, y_pred)","f346df80":"# confusion matrix function\n\ndef plot_confusion_matrix(cm):\n    plt.imshow(cm,interpolation='nearest',cmap=plt.cm.Blues)\n    plt.colorbar()\n    plt.title('Confusion Matrix')\n    labels=['positive','negative']\n    tick_marks=np.arange(len(labels))\n    plt.xticks(tick_marks,labels)\n    plt.yticks(tick_marks,labels)","6735ee95":"cm = metrics.confusion_matrix(y_test, y_pred)\nplot_confusion_matrix(cm)","9a0a942c":"from sklearn.linear_model import PassiveAggressiveClassifier\n\nlinear_clf = PassiveAggressiveClassifier()\nlinear_clf.fit(X_train, y_train)","1c7316ec":"y_pred = linear_clf.predict(X_test)","33ebb48b":"metrics.accuracy_score(y_test,y_pred)","396cae68":"cm2 = metrics.confusion_matrix(y_test,y_pred)\nplot_confusion_matrix(cm2)","9a4492a1":"### Most 20 real values\n\nfeature_names = cv.get_feature_names()\nsorted(zip(classifier.coef_[0],feature_names),reverse=True)[0:20]","71d2aacb":"### Most 20 fake values\n\nfeature_names = cv.get_feature_names()\nsorted(zip(classifier.coef_[0],feature_names),reverse=True)[-20:]","80495d03":"## Naive Bayes","09f8705b":"## Passive Aggressive Classifier Algorithm","01ef5204":"### Thanks for reading, Please do Upvote !!","e79c556f":"# Fake News Detection using NLP"}}