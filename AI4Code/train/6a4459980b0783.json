{"cell_type":{"aca99912":"code","963ce8ab":"code","d55a41c3":"code","536e7d55":"code","a47f138d":"code","3404f797":"code","c2137c6c":"code","408d5b68":"code","9c33c3fa":"code","2832d81f":"code","825eaead":"code","0bb5b2cf":"code","2f101577":"code","05bccfc1":"code","22f1dff3":"code","294e3d6d":"code","2403d8dc":"code","71d0bb34":"code","36f1e8fb":"code","0820dad2":"code","fe58685a":"code","f4ed0007":"code","71d753df":"code","16ff76ff":"code","54113b7f":"code","857a2ad1":"code","7f2e6fa0":"code","5529adee":"code","f2fb0fd1":"code","749c1bf7":"code","0f19b722":"code","fedfcb09":"code","74a7a1b1":"code","ebcb6392":"code","a653ba33":"code","b3345e39":"code","6c9777bd":"code","9b932f0b":"code","279bc1a8":"code","816b2102":"code","6472d3c4":"code","cef07a04":"code","6d69160b":"code","4ff4d6ea":"code","e2a81606":"code","cf158faf":"code","27a7064d":"code","d3a567a1":"code","827ab95b":"code","7fb3e6e9":"markdown","7085f252":"markdown","2295065f":"markdown","7bf9d2ce":"markdown","a475df30":"markdown","104479cd":"markdown","62413e82":"markdown","b41b4393":"markdown","d003e3e7":"markdown","d07b52db":"markdown","d4bbd19b":"markdown","8d26e494":"markdown","1b233064":"markdown","c88283f2":"markdown","70192744":"markdown","2de9fd32":"markdown","654ffa54":"markdown","6e394589":"markdown","38fcfcdd":"markdown","a014c6db":"markdown","3c32fe5b":"markdown","2538c7cf":"markdown","75330117":"markdown","b6b019a4":"markdown","933a9b3e":"markdown","7205715f":"markdown","807c0908":"markdown","a2ccb0f3":"markdown","2488dba8":"markdown","7011697c":"markdown","084a1ad8":"markdown","fb610199":"markdown","89690fa1":"markdown","2c8695cc":"markdown","48aea18e":"markdown","534bbb5b":"markdown","575df5b4":"markdown"},"source":{"aca99912":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport scipy.stats as stats\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","963ce8ab":"data = pd.read_csv(\"\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv\")\n#Importing the data","d55a41c3":"data.head() #It is showing us first 5 rows ","536e7d55":"data.tail() #It is showing us last 5 rows","a47f138d":"data.info","3404f797":"\"\"\"\nFirst,I am going to take a look at the features of data\n\"\"\"\ndata.columns\n","c2137c6c":"data.head()\n","408d5b68":"#Cleaning Price Data\n\nprice = [i for i in data[\"Price\"]]\n\ndef currency_cleaner(currency_li):\n    \"\"\"\n    This function cleans price data\n    \"\"\"\n    cleaned_data = []\n    for prc in currency_li:\n        if \"$\" in prc:\n            prc = prc.replace(\"$\",\"\")\n        cleaned_data.append(prc)\n    return cleaned_data\n\n\n     \ndata[\"Price\"] = currency_cleaner(price)\n\n\"\"\" While I clean the data, I see this row. That is interesting.\"\"\"\ndata[data[\"Price\"]==\"Everyone\"]\n","9c33c3fa":"data.drop(index=10472,inplace=True)\ndata.reset_index(inplace=True)\n\ndata[\"Price\"] = data[\"Price\"].astype(float) #Category =>> Float\n\n\n#Cleaning Reviews Data\n\ndata[\"Reviews\"] = data[\"Reviews\"].astype(float) #Category =>> Float\n\n\n#Cleaning Size Data\nsize = [i for i in data[\"Size\"]]\ndef size_cleaner(size_li):\n    \"\"\"\n    This function converts kilobytes to megabytes \n    \"\"\"\n    clean_li = []\n    for sz in size_li:\n        \n        if \"M\" in sz:\n            sz = sz.replace(\"M\",\"\")\n            sz = float(sz)\n        \n        elif \"k\" in sz:\n            sz = sz.replace(\"k\",\"\")\n            sz = float(sz)\n            sz = sz\/1024 #Because one megabyte contains 1024 kilobytes\n        \n        elif \"Varies with device\" in sz:\n            continue                        \n        clean_li.append(sz)\n    return clean_li\n\n\n\nind = data[data[\"Size\"]==\"Varies with device\"].index #I have to drop the rows that have this value \ndata.drop(axis=0,inplace=True,index=ind)             #Because I cant convert them to numerical values\n\nsize = size_cleaner(size)\ndata[\"Size\"] = size\ndata.Size\ndata[\"Size\"] = data[\"Size\"].astype(float)\n\n#Cleaning Install Data\n\n#install_data = [i for i in data[\"Install\"]]\ndef install_cleaner(install_li):\n    clean_list = []\n    for i in install_li:        \n        if \",\" in i:\n            i = i.replace(\",\",\"\")\n        if \"+\" in i:\n            i = i.replace(\"+\",\"\")\n        i = int(i)\n        clean_list.append(i)\n    return clean_list\n\n\ndata[\"Installs\"] = install_cleaner(list(data[\"Installs\"]))\n\n#Cleaning is over!","2832d81f":"data.corr()","825eaead":"fig,ax = plt.subplots(figsize=(10,10))\nsns.heatmap(data.corr(),ax=ax,annot=True)\nplt.title(\"Correlation Between Features \")\nplt.show()","0bb5b2cf":"corr = data.corr()\ncorr","2f101577":"#And I am going to drop index because I will not use this\ncorr.drop(\"index\",axis = 1,inplace=True)\ncorr","05bccfc1":"g = sns.jointplot(\"Installs\",\"Reviews\",data=data,kind=\"scatter\",size=6)\ng.annotate(stats.pearsonr)\nplt.subplots_adjust(top=0.9)\nplt.suptitle(\"Correlation Between Installs and Reviews\\n \\t Joint Plot \\t\", fontsize = 16)\nplt.show()\n\ng2 = sns.lmplot(\"Installs\",\"Reviews\",data=data,size=6)\nplt.subplots_adjust(top=0.9)\nplt.suptitle(\"Correlation Between Installs and Reviews\\n \\t LM Plot \\t \", fontsize = 16)\nplt.show()\n","22f1dff3":"category = data.groupby(data[\"Category\"]).mean()\ncategory.drop(\"index\",axis=1,inplace=True)\ncategory","294e3d6d":"def create_barplot(ftr_names,dataBar):\n   \n    for ftr in ftr_names:      \n        fig,ax = plt.subplots(figsize=(10,10))\n        new_index = dataBar[ftr].sort_values(ascending=False).index.values\n        new_data = dataBar.reindex(new_index)\n        sns.barplot(new_data.index.values,list(new_data[ftr]),ax=ax,order=new_data.index)\n        plt.xlabel(\"Index\")\n        plt.ylabel(ftr)\n        plt.xticks(rotation=90)\n        plt.show()\n","2403d8dc":"create_barplot(category.columns,category)","71d0bb34":"rating = data.groupby(\"Rating\").mean()\nrating.drop(\"index\",axis=1,inplace=True)\nrating.index = rating.index.astype(str)\nrating\n","36f1e8fb":"create_barplot(rating.columns,rating)","0820dad2":"app_size = data.groupby(\"Size\").mean()\napp_size.drop(\"index\",axis=1)\napp_size\n\n","fe58685a":"size_list = data[\"Size\"].value_counts()\nsz = dict(size_list)\nsz = list(sz.keys())\nsz = sz[0:30]\n","f4ed0007":"sizedt = data.groupby(\"Size\").mean()\n\nfor i in sizedt.index:\n    \n    if not i in sz:\n        sizedt.drop(index=i,inplace=True)\n\nsizedt.drop(\"index\",axis=1)","71d753df":"create_barplot(sizedt.columns,sizedt)","16ff76ff":"review_count = data.groupby(\"Reviews\").mean()\nreview_count.drop(\"index\",axis=1,inplace=True)","54113b7f":"review_list = data[\"Reviews\"].value_counts()\nrl = dict(review_list)\nrl = list(rl.keys())\nrl = rl[0:30]\n\nfor i in review_count.index:\n    \n    if not i in sz:\n        review_count.drop(index=i,inplace=True)\n\nreview_count    \n","857a2ad1":"create_barplot(review_count.columns,review_count)","7f2e6fa0":"data[\"Rating\"].fillna(0.0,inplace=True)\ninstall_count = data.groupby(\"Installs\").mean()\ninstall_count.drop(\"index\",axis=1,inplace=True)\ninstall_count","5529adee":"create_barplot(install_count.columns,install_count)","f2fb0fd1":"app_type = data.groupby(\"Type\").mean()\napp_type.drop(\"index\",axis=1,inplace=True)\n\n","749c1bf7":"create_barplot(app_type.columns,app_type)","0f19b722":"category_names = [i for i in data[\"Category\"]]\ndata2 = data.copy()\nind =  data2[\"Installs\"].sort_values(ascending=False).index.values\ndata2 = data2.reindex(ind)\ndata2.head()\n","fedfcb09":"def determine3apps_uniquely(category,data):\n    categorized_apps = data[data[\"Category\"]==category][\"App\"].unique()\n    app_list = list(categorized_apps)[:3]\n    return app_list\n\ndef create_dataframe(appnames):\n    return_dataFrame = pd.DataFrame({\"level_0\":[],\"index\":[],\"App\":[],\"Category\":[],\"Rating\":[],\n                                    \"Reviews\":[],\"Size\":[],\"Installs\":[],\"Type\":[],\"Price\":[],\n                                    \"Content Rating\":[],\"Genres\":[],\"Last Updated\":[],\"Current Ver\":[],\"Android Ver\":[]})\n    for app in appnames:\n        dataApp = data2[data2[\"App\"]==app]\n        dataApp.reset_index(inplace=True)\n        dataApp = dataApp[dataApp.index == 0]\n        return_dataFrame = pd.concat([return_dataFrame,dataApp],axis=0)\n        return_dataFrame.drop(\"level_0\",axis=1,inplace=True)\n        #We know, some apps have copies more than one in data, so I'll take only first row!\n    return return_dataFrame\n\n","74a7a1b1":"game_apps = determine3apps_uniquely(\"GAME\",data2)\ngame_df = create_dataframe(game_apps)\ngame_df","ebcb6392":"def create_pointPlot(df):\n    \"\"\"\n    This function draws point plots!\n    \"\"\"\n    df.drop(\"index\",axis=1,inplace=True)\n    #I'll use describe columns because I am only wanting numerical features\n    features = df.describe().columns \n    \n    for ftr in features:\n        fig,ax  = plt.subplots(figsize=(12,6))\n        sns.pointplot(df[\"App\"],df[ftr])\n        plt.xlabel(\"APP NAMES\")\n        plt.ylabel(ftr.upper())\n        plt.xticks(rotation = 90)\n        plt.title(\"COMPARING APPS IN TERMS OF \"+ftr.upper())\n        plt.show()\n    ","a653ba33":"create_pointPlot(game_df)","b3345e39":"#App Detecting!\ntools_apps = determine3apps_uniquely(\"TOOLS\",data2)\ntools_df = create_dataframe(tools_apps)\n\ntools_df","6c9777bd":"#Comparing and visualizing with using point plot from Seaborn library\n\ncreate_pointPlot(tools_df)","9b932f0b":"unique_android_data = data[\"Android Ver\"].unique()\nunique_android_data","279bc1a8":"#Dropping NaN values\n\ndata.dropna(subset=[\"Android Ver\"],inplace=True)\n","816b2102":"def android_data_cleaner(dataFrame):\n    \n    androidData = list(dataFrame[\"Android Ver\"])\n    cleanData = []\n    for aD in androidData:\n        \n        if \"and up\" in aD:\n            aD = aD.replace(\"and up\",\"\")\n        \n        if \"Varies with device\" in aD:\n            aD = \"0.0\"\n        \n        if \"-\" in aD:\n            list1 = aD.split(\"-\")\n            aD = list1[0]            \n        \n        if \"4.4W\" in aD: \n            aD = \"4.4\"\n        \n        list1 = aD.split(\".\")\n        if len(list1) == 3:\n             aD = list1[0]+\".\"+list1[1]+list1[2]\n        \n        cleanData.append(aD)\n        \n    return cleanData\n\n\nclean_data = android_data_cleaner(data)\ndata[\"Android Ver\"] = clean_data\n\n","6472d3c4":"data[\"Android Ver\"] = data[\"Android Ver\"].astype(float)\ndata.head()","cef07a04":"data.dtypes","6d69160b":"def piechartCreator(dF,feature,figsize=(8,8)):\n    \"\"\"\n    A function that creates pie charts \n    \"\"\"\n    value_counts = dF[feature].value_counts()\n    fig,ax = plt.subplots(figsize=figsize)\n    plt.pie(value_counts, labels=value_counts.index, autopct='%1.1f%%',shadow=True)\n    plt.title(\"Comparing Apps by \"+feature,fontsize=14,color = \"Purple\")\n    plt.show()\n    \n","4ff4d6ea":"piechartCreator(data,\"Type\")                        \n    ","e2a81606":"piechartCreator(data,\"Category\",figsize=(17,17))","cf158faf":"piechartCreator(data,\"Installs\",figsize=(20,20))","27a7064d":"def outlier_dropper(dF):\n    dF = dF.drop(\"index\",axis=1)\n    dF = dF.drop(\"Price\",axis=1)\n    \"\"\"\n    I have to drop Price data because most of the values are 0 and It might create problems in the future\n    \"\"\"\n    ftrSteps = []\n    \n    \n    descrb = dF.describe()\n    \n    ftrQ1 = [i for i in descrb.loc[\"25%\"]]\n    ftrQ3 = [i for i in descrb.loc[\"75%\"]]\n    for ftr in descrb:\n        IQR = descrb[ftr][\"75%\"] - descrb[ftr][\"25%\"]\n        IQR = IQR * 1.5\n        ftrSteps.append(IQR)\n    \n    drop_counter = 0\n    outlier_counter = 0\n    dFcolumns = [\"Rating\",\"Reviews\",\"Size\",\"Installs\",\"Android Ver\"]\n    for r in range(0,len(dF)):\n        \n        row = dF[dF.index == r]\n        for i in range(0,len(dFcolumns)) :\n            if list(row[dFcolumns[i]].values) != []:\n                if float(row[dFcolumns[i]].values) < float(ftrQ1[i]) -  float(ftrSteps[i]) or float(row[dFcolumns[i]].values) > float(ftrQ1[i]) +  float(ftrSteps[i]):\n                    outlier_counter +=1\n                    if outlier_counter == 2:\n                        outlier_counter = 0\n                        drop_counter += 1\n                 \n                        dF.drop(r,inplace=True)\n                        break\n                \n    dF.reset_index(inplace=True)\n    return drop_counter,dF\n                ","d3a567a1":"#First I'll crate a new copy of data\n\nnwData = data.copy()\n\n#Then, I'll drop NaN values\nnwData.dropna(inplace=True)\n\n#And now, We are ready to start our function\ndrop_count,nwData = outlier_dropper(nwData)\n\nprint(f\" {drop_count} rows dropped! \")\n\n","827ab95b":"nwData.head()","7fb3e6e9":"## by Rating\n\nEN: In this section, I am going to examine the relationship between the rating data  and other numerical features.\n\nTUR: Bu k\u0131s\u0131mda De\u011ferlendirme verisi ile di\u011fer say\u0131sal \u00f6zellikler aras\u0131ndaki ili\u015fkiyi inceleyece\u011fim.","7085f252":"# Introduction - Giri\u015f\n\nEN: Hello! Welcome to my kernel. In this kernel I am going to use the data of android's app market Google Play Store. Play Store created by Google Inc. It's first release time is 10\/22\/2008. There are many kind of apps in Google Play Store so you can always find what you need. Now, let's take look at our schedule\n\nTUR: Merhaba. Kernelime ho\u015fgeldiniz. Bu kernelde androidin uygulama marketi olan Google Play Store verilerini inceleyece\u011fim. Google Play Store Google Inc. taraf\u0131ndan olu\u015fturuldu. \u0130lk sunum tarihi 22 Ekim 2008. Google Play Storeda bir\u00e7ok \u00e7e\u015fit uygulama bulunuyor, bu y\u00fczden her zaman neye ihtiyac\u0131n\u0131z varsa bulabilirsiniz. \u015eimdi, haydi program\u0131m\u0131za bir bakal\u0131m\n\n## Schedule\n### EN:\n1. Importing Libraries and The Data\n1. Diagnosing Data\n1. Examination of Features\n1. Correlation Examination and Correlation Visualization\n    * Correlation Visualization with Using Seaborn Heatmap\n    * Correlation Visualization with Using Different Tools\n1. Simple Data Analyses and Visualizations\n    * by Categories\n    * by Rating\n    * by App Size\n    * by Review Count\n    * by Install Count\n    * by App Type (Free or Paid)\n1. Determining 3 Most Installed Apps in Some Categories\n    * Determining Apps in Game Category  \n    * Determining Apps in Tools Category\n1. Cleaning Android Version Data\n1. Visualizations with Using Pie Chart Graph\n    * By App Type\n    * By Categories\n    * By Installs\n1. Outlier Detection\n\n### TUR:\n1. K\u00fct\u00fcphanelerin ve Verinin Projeye Dahil Edilmesi\n1. Verinin Te\u015fhis Edilmesi\n1. \u00d6zelliklerin \u0130ncelenmesi\n1. Ba\u011f\u0131nt\u0131n\u0131n \u0130ncelenmesi ve Ba\u011f\u0131nt\u0131 G\u00f6rselle\u015ftirmesi\n    * Seaborn Heatmap Kullan\u0131larak Korelasyon G\u00f6rselle\u015ftirme\n    * Farkl\u0131 Ara\u00e7lar Kullan\u0131larak Korelasyon G\u00f6rselle\u015ftirme \n1. Temel Veri Analizleri ve G\u00f6rselle\u015ftirmeleri\n    * Kategorilere G\u00f6re\n    * Puanland\u0131rmaya G\u00f6re\n    * Uygulama Boyutuna G\u00f6re\n    * \u0130nceleme Say\u0131s\u0131na G\u00f6re\n    * Y\u00fcklenme Say\u0131s\u0131na G\u00f6re\n    * Uygulama Tipine G\u00f6re (\u00dccretsiz veya \u00dccretli)\n1. Baz\u0131 Kategorilerin En \u00c7ok \u0130ndirilen 3 Oyununun Tespit Edilmesi\n    * Oyun Kategorisindeki Uygulamalar\u0131n Tespit edilmesi\n    * Ara\u00e7lar Kategorisindeki Uygulamalar\u0131n Tespit edilmesi\n1. Android Versiyonu Verisinin Temizlenmesi\n1. Pie Chart Grafi\u011fi ile G\u00f6rselle\u015ftirmeler\n    * Uygulama Tipine G\u00f6re\n    * Kategorilere G\u00f6re\n    * Y\u00fcklenme Say\u0131s\u0131na G\u00f6re\n1. Outlier Tespiti","2295065f":"EN: As you can see, there are a lot of different review count so I have to choose 30 most used review count again. \n\nTUR:G\u00f6rebilece\u011finiz gibi \u00e7ok fazla birbirinden farkl\u0131 inceleme say\u0131s\u0131 var bu y\u00fczden yine en \u00e7ok kullan\u0131lan 30 say\u0131y\u0131 se\u00e7mek zorunday\u0131m.\n\n","7bf9d2ce":"# Simple Data Analyses and Visualizations - Basit Veri Analizleri ve G\u00f6rselle\u015ftirmeleri\n\n## by Categories\nEN: In this section, I am going to examine the relationship between the category and other numerical features.\n\nTUR: Bu k\u0131s\u0131mda kategori ile di\u011fer say\u0131sal \u00f6zellikler aras\u0131ndaki ili\u015fkiyi inceleyece\u011fim.","a475df30":"# Cleaning Android Version Data \n\nEN: In this section I am going to clean android version data because I want to use this data but I can not. This data's type is object and this data includes strings but I want to do some numerical operation.\n\nTUR: Bu k\u0131s\u0131mda android versiyonu verisini temizleyece\u011fim \u00e7\u00fcnk\u00fc ben bu veriyi kullanmak istiyorum ama kullanam\u0131yorum. Bu verinin veri tipi obje ve stringler i\u00e7eriyor ama ben baz\u0131 n\u00fcmerik i\u015flemeler yapmak istiyorum\n\nEN:First, I am going to take look at the data and  write a function that cleans the data\n\nTUR:En ba\u015fta veriye bir bakaca\u011f\u0131m ve veriyi temizleyen bir fonksiyon yazaca\u011f\u0131m.","104479cd":"# Examination of Features \n\nEN: In this section I am going to examine the features\n\nTUR: Bu k\u0131s\u0131mda \u00f6zellikleri inceleyece\u011fim.\n\n","62413e82":"# Determining 3 Most Installed Apps in Some Categories - Baz\u0131 Kategorilerin En \u00c7ok \u0130ndirilen 3 Uygulamas\u0131n\u0131n Tespiti\nEN: In this section I am going to determine and visualize 3 most installed apps in each category\n\nTUR: Bu k\u0131s\u0131mda her kategorinin en \u00e7ok indirilen 3 uygulamas\u0131n\u0131 tespit edece\u011fim ve g\u00f6rselle\u015ftirece\u011fim.","b41b4393":"## Correlation Visualization with Using Different Tools - Farkl\u0131 Ara\u00e7lar ile Ba\u011f\u0131nt\u0131 G\u00f6rselle\u015ftirmesi\n\nEN: In this sub-section I am going to visualize correlation with using different tools.( For instance kdeplot,joint plot). At the beginning I am going to take a look at the describe data again\n\nTUR: Bu alt-k\u0131s\u0131mda korealasyonu farkl\u0131 ara\u00e7lar kullan\u0131rak g\u00f6rselle\u015ftirece\u011fim. (\u00d6rnek olarak kdeplot, joint plot.) Ba\u015flang\u0131\u00e7ta describe datas\u0131na tekrar bakaca\u011f\u0131m.","d003e3e7":"## Determining and Comparing 3 Most Installed Apps in Tools Category - Ara\u00e7lar Kategorisindeki En \u00c7ok \u0130ndirilen 3 Uygulaman\u0131n Tespiti ve Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131\n","d07b52db":"EN: We prepared our data to use different visualization tools. As we can see, there is only one value that would taken be seriously. Install-Reviews. Now time to do visualizations.\n\nTUR: Verimizi farkl\u0131 g\u00f6rselle\u015ftirme ara\u00e7lar\u0131 kullanmaya haz\u0131rlad\u0131k. G\u00f6rebilece\u011fimiz gibi ciddiye al\u0131nacak sadece bir de\u011fer var. Install-Reviews \u015eimdi g\u00f6rselle\u015ftirme yapma zaman\u0131!","d4bbd19b":"## by App Size\n\nEN: In this section, I am going to examine the relationship between the app size data  and other numerical features.\n\nTUR: Bu k\u0131s\u0131mda Uygulama boyutu verisi ile di\u011fer say\u0131sal \u00f6zellikler aras\u0131ndaki ili\u015fkiyi inceleyece\u011fim.","8d26e494":"EN: We created functions. Now we are ready to determine apps! Let's go!\n\nTUR: Fonksiyonlar\u0131m\u0131z\u0131 olu\u015fturduk, art\u0131k uygulamalar\u0131 tespit etmeye haz\u0131r\u0131z. Haydi yapal\u0131m!","1b233064":"# The End - Son\n\nEN: Thank you for your attention. I am waiting for your reviews and upvotes. \n\nTUR: \u0130lginiz i\u00e7in te\u015fekk\u00fcr ederim. \u0130ncelemelerinizi ve oylar\u0131n\u0131z\u0131 bekliyorum\n\n\nPS: This kernel does not completed yet and I am going to update.\n\nDipnot: Bu kernel hen\u00fcz tamamlanmad\u0131 ve g\u00fcncellenecek.","c88283f2":"EN: We created our point plot drawer function, Now time to use it\n\nTUR:Nokta grafi\u011fi \u00e7izici foknksiyonumuzu olu\u015fturduk, \u015fimdi onu kullanma zaman\u0131!","70192744":"## Features\n\n**App:** Name of app\n\n**Category** Category of app, for instance art_and_desine or medical \n\n**Rating** Avarage of the ratings people's gave\n\n**Reviews:** How many people wrote review for app\n\n**Size:** Size of app. \n\n**Installs:** How many people installed this app\n\n**Type:** Free or paid\n\n**Price:** Price of the app (If app is paid)\n\n**Content Rating:** For whom is this app\n\n**Genres:** Genres\n\n**Last Updated:** Last update date\n\n**Current Ver:** Last version of app\n\n**Android Ver:** Which android version can install this app","2de9fd32":"## by App Type\n\nEN: In this section, I am going to examine the relationship between the app type  data (paid or free)  and other numerical features.\n\nTUR: Bu k\u0131s\u0131mda uygulama tipi verisi (\u00fccretli veya \u00fccretsiz) ile di\u011fer say\u0131sal \u00f6zellikler aras\u0131ndaki ili\u015fkiyi inceleyece\u011fim.","654ffa54":"EN: As we can see there are nan values in the data, so I have decided to drop nan values\n\nTUR: G\u00f6rebilece\u011fimiz gibi, veride NaN de\u011ferler var bu y\u00fczden NaN de\u011ferleri \u00e7\u0131karmaya karar verdim","6e394589":"EN: Our function is ready! Time to do some visualizations\n\nTUR: Fonksiyonumuz haz\u0131r! Haydi baz\u0131 g\u00f6rselle\u015ftirmeler yapal\u0131m.","38fcfcdd":"## by Categories \n\nEN: In this sub-section I am going to create a pie chart that includes frequency of categories.\n\nTUR: Bu alt k\u0131s\u0131mda kategorilerin s\u0131kl\u0131\u011f\u0131n\u0131 i\u00e7eren bir pie chart olu\u015fturaca\u011f\u0131m. Bunun i\u00e7in daha \u00f6nce yazd\u0131\u011f\u0131m fonksiyonu kullanaca\u011f\u0131m.","a014c6db":"EN: As you can see, there are a lot of different app size data, so I have to choose 30 most used app size data. I am going to use value_counts for this.\n\nTUR: G\u00f6rebildi\u011finiz gibi \u00e7ok fazla farkl\u0131 uygulama boyutu verisi var, bu y\u00fczden en \u00e7ok kullan\u0131lan 30 uygulama boyutu verisini se\u00e7mek zorunday\u0131m. Bunun i\u00e7in value_counts kullanaca\u011f\u0131m.","3c32fe5b":"EN: We determined games. Now I am going to compare and visualize them. I am going to use point plot for these visualizations.\n\nTUR: Oyunlar\u0131 tespit ettik, \u015eimdi onlar\u0131 kar\u015f\u0131la\u015ft\u0131raca\u011f\u0131m ve g\u00f6rselle\u015ftirece\u011fim. Bu g\u00f6rselle\u015ftirmeler i\u00e7in nokta g\u00f6rselle\u015ftirme arac\u0131n\u0131 kullanaca\u011f\u0131m","2538c7cf":"## Comparing Apps by App Type (Paid or Free)\n\nEN: In this sub-section I am going to compare app by App Type. First I am going to write a function that creates pie charts\n\nTUR: Bu alt k\u0131s\u0131mda uygulamalar\u0131 uygulama tipine g\u00f6re kar\u015f\u0131la\u015ft\u0131raca\u011f\u0131m.\u00d6ncelikle pie chartlar olu\u015fturacak bir fonksiyon yazaca\u011f\u0131m.","75330117":"EN: Sorry for this chart. I would like to do this cart better but I can't.\n\nTUR: Bu grafik i\u00e7in \u00f6z\u00fcr dilerim, Bu grafi\u011fi daha iyi yapmak isterdim ama yapamam","b6b019a4":"# Importing Libraries and The Data\n\nEN: In this section I am going to import libraries and the data\n\nTUR: Bu k\u0131s\u0131mda k\u00fct\u00fcphaneleri ve veriyi projeye dahil edece\u011fim.","933a9b3e":"## by Installs\n\nEN: In this sub-section I am going to create a pie chart that includes frequency of install counts.\n\nTUR: Bu alt k\u0131s\u0131mda indirilme say\u0131lar\u0131n\u0131n s\u0131kl\u0131\u011f\u0131n\u0131 i\u00e7eren bir pie chart olu\u015fturaca\u011f\u0131m. Bunun i\u00e7in daha \u00f6nce yazd\u0131\u011f\u0131m fonksiyonu kullanaca\u011f\u0131m.","7205715f":"## Correlation Visualization With Using Seaborn Heatmap - Seaborn Heatmap ile Ba\u011f\u0131nt\u0131 G\u00f6rselle\u015ftirmesi","807c0908":"EN: I wanted to do one more instance so in this sub-section I am going to use apps of Tools category.\n\nTUR: Bir \u00f6rnek daha yapmak istedim, bu y\u00fczden bu alt k\u0131s\u0131mda Tools kategorisinin uygulamalar\u0131n\u0131 kullanaca\u011f\u0131m!","a2ccb0f3":"## by Install Count\n\nEN: In this section, I am going to examine the relationship between the install count data  and other numerical features.\n\nTUR: Bu k\u0131s\u0131mda indirilme say\u0131s\u0131 verisi ile di\u011fer say\u0131sal \u00f6zellikler aras\u0131ndaki ili\u015fkiyi inceleyece\u011fim.","2488dba8":"## Determining and Comparing 3 Most Installed Apps in Game Category - Oyunlar Kategorisindeki En \u00c7ok \u0130ndirilen 3 Oyuncunun Tespiti ve Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","7011697c":"# Visualizations with Using Pie Chart Graph                                                                         \nEN: In this section I am going to visualize some datas with using pie chart. Generally I am going to use frequency datas.\n\nTUR: Bu k\u0131s\u0131mda baz\u0131 verileri pie chart kullanarak g\u00f6rselle\u015ftirece\u011fim. Genellikle miktar verilerini kullanaca\u011f\u0131m.","084a1ad8":"# Diagnosing Data\n\nEN: In this section I am going to diagnose data because before doing analyses about the data we have to diagnose data.\n\nTUR:Bu k\u0131s\u0131mda veriyi te\u015fhis edece\u011fim \u00e7\u00fcnk\u00fc veri ile ilgili analizler yapmadan \u00f6nce onu incelemek zorunday\u0131z.","fb610199":"EN: And now let's create heatmap with using seaborn\n\nTUR: Ve \u015fimdi haydi seaborn kullanarak \u0131s\u0131 haritas\u0131n\u0131 olu\u015ftural\u0131m","89690fa1":"EN: Now, my function is ready.I am going to take a look at the data\n\nTUR:\u015eimdi,fonksiyonum haz\u0131r. Veriye bir g\u00f6z ataca\u011f\u0131m.","2c8695cc":"EN: As you can see, Some apps have copies more than one. So I have to determine 3 most installed unique apps\n\nTUR:G\u00f6rebilece\u011finiz gibi baz\u0131 uygulamalar\u0131n birden fazla kopyas\u0131 var bu y\u00fczden en \u00e7ok y\u00fcklenen 3 benzersiz uygulamay\u0131 tespit etmek zorunday\u0131m","48aea18e":"## by Review Count\n \nEN: In this section, I am going to examine the relationship between the review count  data  and other numerical features.\n\nTUR: Bu k\u0131s\u0131mda de\u011ferlendirme say\u0131s\u0131 verisi ile di\u011fer say\u0131sal \u00f6zellikler aras\u0131ndaki ili\u015fkiyi inceleyece\u011fim.","534bbb5b":"# Correlation Examination and Correlation Visualization  - Ba\u011f\u0131nt\u0131 \u0130ncelemesi ve G\u00f6rselle\u015ftirmesi\n\nEN: In this section I am going to examine correlation between features but at the first I need to clean data.\n\nTUR: Bu k\u0131s\u0131mda \u00f6zellikler aras\u0131ndaki ba\u011f\u0131nt\u0131lar\u0131 inceleyece\u011fim ama ba\u015flang\u0131\u00e7ta veriyi temizlemem gerekiyor.","575df5b4":"# Outlier Detection\n\nEN: In this section, I am going to detect outlier and visualize that with using box plot.\n\nTUR:Bu k\u0131s\u0131mda art\u0131k tespiti ve kutu plotu ile g\u00f6rselle\u015ftirmesi yapaca\u011f\u0131m.\n"}}