{"cell_type":{"95b61629":"code","82c8065f":"code","91592f70":"code","29ed933b":"code","c9765873":"code","25217abf":"code","6d5be78b":"code","7cb4c183":"code","d9d385e4":"code","84e248cf":"code","f508f78c":"code","63f48529":"code","03ff904b":"code","f92cf5c9":"code","bbd25cac":"code","2943940b":"code","0a6cd3a6":"code","918e45a8":"code","22a8a53f":"code","80e64a46":"code","5f1ad154":"code","796ecf29":"code","a7a35615":"code","3953431f":"code","b1dee735":"code","471c1898":"code","9e1c6720":"code","2a1657bd":"code","ea6b2a2b":"code","18b49581":"code","306ee679":"code","db7510c5":"code","1c22e45c":"code","388e41b7":"code","f696a6e9":"code","83f2589c":"code","1e9944cc":"code","afb6395b":"code","4b41c0ba":"code","7d8c6379":"code","7bef14c0":"code","5b3a89c5":"code","ad5292d7":"code","5ec0df8c":"code","6663561a":"code","5de77678":"code","ea6941ca":"code","60fe37d0":"code","e33cc31a":"code","1144f63f":"code","294ca15d":"code","516c5e49":"code","815400c5":"code","3405e187":"code","f3b46ba0":"code","b383f377":"code","369388ea":"code","087bcb70":"code","676d6498":"code","274e8a51":"code","753c0e6b":"code","c108f4db":"code","acefa715":"code","d45e1d68":"code","6bd919c9":"code","db3e7116":"code","05ecf208":"code","f78f8f86":"code","7c9ce438":"code","90f3fdf9":"code","f1f9a3d0":"code","5666b34d":"code","c023f24e":"code","bd6ae1d8":"code","e0e225d4":"code","a46c6b08":"code","e4e409a5":"code","fa33ae44":"code","53f2996f":"code","73995f85":"code","3f2d24ac":"code","8c6f2e7f":"code","2caedc26":"code","b53d4017":"code","f8649463":"code","c9541ffa":"code","5e639639":"markdown","2500db20":"markdown","bb2774ea":"markdown","c35fab83":"markdown","f55b1635":"markdown","8c30c591":"markdown","e89a2ec9":"markdown","f14f0f56":"markdown","327a8fcf":"markdown","6bd6d204":"markdown","424402b6":"markdown","aed1e438":"markdown","6c3c5552":"markdown","cf849e8d":"markdown","f164779f":"markdown","98bef499":"markdown","891310e7":"markdown","8d6b4e02":"markdown","f1f9659f":"markdown","29bdc07b":"markdown"},"source":{"95b61629":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set()\n\n# Close warnings\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\npd.set_option(\"display.max_columns\",None) \npd.set_option(\"display.max_rows\",None)","82c8065f":"# Read the data \ndata = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2019.csv\")\ndata.head(10)","91592f70":"data.info()  # Attribute the content of the data","29ed933b":"data.rename(columns= {\"GDP per capita\": \"economy\",\"Score\":\"Happiness_Score\",\"Healthy life expectancy\":\"health\", \"Freedom to make life choices\":\"freedom\",\n                     \"Perceptions of corruption\":\"trust\",\"Social support\":\"family\", \"Country or region\":\"country\"},inplace = True)\n","c9765873":"data.shape #Shape give number of rows and columns in a tuple","25217abf":"data.columns","6d5be78b":"data.describe()  # Describing data\n","7cb4c183":"data.head(20)","d9d385e4":"data.tail(20)","84e248cf":"data.dtypes","f508f78c":"# Correlation map\n# Display the negative and postive correlation between variables\ndata.corr\nf,ax = plt.subplots(figsize=(15,10))\nsns.heatmap(data.corr(), annot =True, linewidth =\".5\", fmt =\".2f\")\nplt.show()\n\n\n#figsize - image size\n#data.corr() - Display positive and negative correlation between columns\n#annot=True -shows correlation rates\n#linewidths - determines the thickness of the lines in between\n#cmap - determines the color tones we will use\n#fmt - determines precision(Number of digits after 0)\n#if the correlation between the two columns is close to 1 or 1, the correlation between the two columns has a positive ratio.\n#if the correlation between the two columns is close to -1 or -1, the correlation between the two columns has a negative ratio.\n#If it is close to 0 or 0 there is no relationship between them.","63f48529":"# Cheking missing values\ndata.isnull()","03ff904b":"# Indicates values not defined in our data frame\n\ndata.isnull().sum()\n","f92cf5c9":"# Indicates sum of missing values in our data\n\ndata.isnull().sum().sum()","bbd25cac":"data[[\"Happiness_Score\"]].isnull().head(10)","2943940b":"data.sort_values(\"Happiness_Score\", ascending = False).head(10)","0a6cd3a6":"data.sort_values(\"Happiness_Score\", ascending =True).head(10)","918e45a8":"# matplotlib is a library of python programming language for plotting graphs, there are sevearl types of graphs;\n # Line plot is better when x axis is time.\n # Scatter is better when there is correlation between two variables\n # Histogram is better when we need to see distribution of numerical data.\n # Customization: Colors,labels,thickness of line, title, opacity, grid, figsize, ticks of axis and linestyle","22a8a53f":" # LINE PLOT\n    \n # color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line  \ndata.Happiness_Score.plot(kind=\"line\", color=\"B\", label=\"Happiness_Score\", linewidth=1, alpha=0.5, grid=True, figsize=(12,12))    \ndata.economy.plot(kind=\"line\", color=\"m\", label=\"Economy\", linewidth=1, alpha=0.5, grid=True)  \ndata.health.plot(kind=\"line\", color=\"r\", label=\"Health\", linewidth=1, alpha=0.5, grid=True)\ndata.family.plot(kind=\"line\", color=\"G\", label=\"family\", linewidth=1, alpha=0.5, grid=True)\nplt.legend(loc=\"upper left\")  # legends= Put labels into plot\nplt.xlabel(\"x axis\")          # label = name of label\nplt.ylabel(\"y axis\")\nplt.title(\"Line plot\")        # Title of the plot\nplt.show()\n","80e64a46":"# Subplots\n\ndata.plot(subplots = True, figsize=(12,12))\nplt.show()","5f1ad154":"\nplt.subplot(4,2,1)\ndata.family.plot(kind=\"line\", color=\"orange\", label=\"family\", linewidth=1, alpha=0.5, grid=True, figsize=(10,10))\ndata.Happiness_Score.plot(kind=\"line\", color=\"green\", label=\"family\", linewidth=1, alpha=0.5, grid=True, figsize=(10,10))\nplt.ylabel(\"family\")\nplt.subplot(4,2,2)\ndata.Generosity.plot(kind=\"line\", color=\"blue\", label=\"Generosity\", linewidth=1, alpha=0.5, grid=True, linestyle=\":\")\nplt.ylabel(\"generosity\")\nplt.subplot(4,2,3)\ndata.trust.plot(kind=\"line\", color=\"green\", label=\"trust\", linewidth=1, alpha=0.5, grid=True, linestyle=\"-.\")\nplt.ylabel(\"trust\")\nplt.subplot(4,2,4)\ndata.freedom.plot(kind=\"line\", color=\"red\", label=\"freedom\", linewidth=1, alpha=0.5, grid=True)\nplt.ylabel(\"freedom\")\nplt.show()","796ecf29":"# Scatter Plot \n# x = attack, y = defense\ndata.plot(kind=\"scatter\", x=\"Happiness_Score\", y=\"economy\", alpha=0.5, color=\"green\", grid= False, figsize=(5,5))\nplt.xlabel(\"Happiness_Score\")    # label = name of label\nplt.ylabel(\"economy\")\nplt.title(\"Happiness Score Economy Scatter Plot\") # title = title of plot\nplt.show()","a7a35615":"data.plot(kind=\"scatter\", x=\"economy\", y=\"health\", alpha=0.5, color=\"blue\",grid =False, figsize=(5,5))\nplt.xlabel(\"economy\")    # label = name of label\nplt.ylabel(\"health\")\nplt.title(\"Economy Health Scatter Plot\") # title = title of plot\nplt.show()","3953431f":"# Histogram\n# bins = number of bar in figure\n\ndata.Happiness_Score.plot(kind=\"hist\",color=\"pink\", bins=100, figsize=(10,10))\nplt.show()","b1dee735":"data.Happiness_Score.head(30).plot(kind=\"bar\",color=\"red\")\nplt.show()","471c1898":"dictionary={\"Sweden\":\"Stockholm\", \"France\":\"Paris\"}\nprint(dictionary.keys())\n\nprint(dictionary.values())","9e1c6720":"dictionary[\"Sweden\"]=  \"Stockholm\" # For adding items in dictionnary\nprint(dictionary)\n\ndictionary[\"Denmark\"]= \"Copenhagen\" # Add new entry\nprint(dictionary)\n\ndel dictionary[\"Denmark\"]\nprint(dictionary)\n\nprint(\"Denmark\" in dictionary) # Check include or not\n\ndictionary.clear()  # Remove all entries in dictionary\n\nprint(dictionary)","2a1657bd":"print(type(data))  # pandas.core.frame.DataFrame\nprint(type(data[[\"Generosity\"]]))  # pandas.core.frame.DataFrame\nprint(type(data[\"Generosity\"])) # pandas.core.series.Series\nprint(type(data[\"Generosity\"].values)) # numpy.ndarray","ea6b2a2b":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","18b49581":"# 1 - Filtering pandas data frame\n\nx = data[\"Happiness_Score\"]>4.0\ndata[x]","306ee679":"# 2 - Filtering pandas with logical_and\ndata[np.logical_and(data[\"Happiness_Score\"]>1.3,data[\"economy\"]>1.3)]","db7510c5":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data[\"family\"]>1.3) & (data[\"economy\"]>1.3)]","1c22e45c":"i = 0\nwhile i != 5:\n    \n    print (\"i is:\" ,i)\n    i+=1\n    print(i,\" is equal to 5\")","388e41b7":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\n\nfor i in lis:\n    print(\"i is: \",i)\nprint(\"\") \n\n\n# Enumerate index and value of list\n\n# index : value = 0:1 , 1:2 , 2:3 , 3:4 , 4:5\n\nfor index, value in enumerate (lis):\n    print (index, \":\" , value)\n    print(\"\") \n    \n    \n    # For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part\ndictionary = dictionary= {'France': 'Paris', 'Turkey': 'Ankara'}\nfor key in dictionary :\n    print(key)\n    \nfor key, value in dictionary.items():\n    print(key, \",\", value)","f696a6e9":"x = 4\ndef f():\n    x = 7\n    return x\nprint(x)      # x=4 Global scope\nprint(f())    # x=7 Local scope\n","83f2589c":"x = 3\ndef f():\n    y = 2*x   # There is no local scope x\n    return y \nprint (f())   #It uses global scope x ","1e9944cc":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i==10 else i-5 if i<7 else i+5 for i in num1]\nprint(num2)","afb6395b":"# lets classify happiness_score whether they have high or low. Our threshold is happiness_score.\nthreshold = sum(data.Happiness_Score)\/len(data.Happiness_Score)\ndata[\"Happiness_Score_level\"] = [\"high\" if i>threshold else \"low\" for i in data.Happiness_Score]\ndata.loc[60:90,[\"Happiness_Score_level\",\"Happiness_Score\"]]","4b41c0ba":"#nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())   ","7d8c6379":"# lambda function\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","7bef14c0":"# This step of cleaning the data is very imoprtant for a data scientist, so we need to diagnostic and clean data before exploring:\n# we will use head, tail, columns,shape and info methods to diagnistic data\n\ndata = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2019.csv\")\ndata.head()   # head shows first 5 rows","5b3a89c5":"\ndata.rename(columns={\"Economy (GDP per Capita)\":\"economy\",\"Score\":\"Happiness_Score\",\"Health (Healthy life expectancy)\": \"health\",\n                   \"Trust (Perceptions of corruption)\":\"trust\",\"Freedom to make life choices\":\"freedom\",\"Social support\":\"family\"},inplace=True)\ndata.head(4)","ad5292d7":"# tail shows 5 last rows \ndata.tail()","5ec0df8c":"# columns gives columns name \ndata.columns","6663561a":"# shape gives number of rows and columns in a tuple\n\ndata.shape","5de77678":"data.dtypes","ea6941ca":"data.info()","60fe37d0":"# we can filter the data\n(data[\"Happiness_Score\"]>1).head(20)","e33cc31a":"data[data[\"Happiness_Score\"]> 1]. head(15)","1144f63f":"data.describe()","294ca15d":"# We tidy data with melt(). Describing melt is confusing. Therefore lets make example to understand it.\n\n# Firstly I create new data from 2019 data to explain melt more easily.\ndata_new = data.head(5)    # I only take 5 rows into new data\ndata_new","516c5e49":"data_new.rename (columns= {\"GDP per capita\":\"economy\",\"Healthy life expectancy\":\"health\",\"Perceptions of corruption\":\"trust\"\n                       ,\"Country or region\":\"Country\"}, inplace = True)","815400c5":"data_new.head(5)","3405e187":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new, id_vars = \"Country\",value_vars=[\"economy\",\"health\"])\nmelted","f3b46ba0":"# Reverse of melting.\n\n# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index=\"Country\", columns = \"variable\", values=\"value\")","b383f377":"# We can concatenate two dataframe\n\n# Firstly lets create 2 data frame\ndata1 = data.head()\ndata2 = data.tail()\nv_concat = pd.concat([data1,data2],axis=0,ignore_index=True)# axis = 0 : adds dataframe\nv_concat","369388ea":"data11 = data.freedom.head()\ndata22 = data.Happiness_Score.head()\nh_concat = pd.concat([data1,data2], axis=0, ignore_index=True)\nh_concat","087bcb70":"data.info()","676d6498":"data1 = data.freedom.head(10)\ndata2 = data.Happiness_Score.head(10)\ndata3 = data.Generosity.head(10)\nh_concat = pd.concat([data1,data2,data3], axis=1)\nh_concat","274e8a51":"#There are five basic data types; boleean,object (string), float, categorical,integer\ndata.dtypes","753c0e6b":"# We can build data from csv as we did earlier\n# But we can also build data from dictionaries\n    #zip() method: This function returns a list of tuples, where the i-th tuple contains the \n    # i-th element from each of the argument sequences or iterables.\n\n#Adding new column\n#Broadcasting: Create new column and assign a value to entire column\n\n\n\ncountry =[\"Sweden\",\"Spain\"]\npopulation =[\"1000\",\"2000\"]\nlist_labels = [\"country\", \"population\"]\nlist_col = [country,population]\nprint(list_col)\n\nzipped = list(zip(list_labels,list_col))\nprint(zipped)\n\ndata_dict = dict(zipped)\nprint(data_dict)\n\ndf = pd.DataFrame(data_dict)\ndf","c108f4db":"df[\"Capital\"] = [\"Stokholm\",\"Madrid\"]\ndf","acefa715":"df[\"income\"] = 0\ndf","d45e1d68":"# Indexing data frame\n  #Indexing using square brackets\n   #Using column attribute and row label\n   #Using loc accessor\n   #Selecting only some columns","6bd919c9":"# Read the data \ndata_t = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2019.csv\")\ndata_t.head(10)","db3e7116":"data_t.rename(columns= {\"Country or region\":\"Country\",\"Score\":\"Happiness_Score\",\"Social support\":\"Family\", \"Healthy life expectancy\":\"Health\",\n                        \"Freedom to make life choices\":\"Freedom\"}, inplace = True )","05ecf208":"# Indexing using square brackets \n\ndata_t[\"Happiness_Score\"][1]","f78f8f86":"# Using columns attribute and row label\ndata_t.Happiness_Score[1]","7c9ce438":"# Using loc accessor\n\ndata_t[[\"Family\",\"Freedom\"]]","90f3fdf9":"# Slicing the data \n   # Difference between selecting columns\n      #series and data frames\n    #Slicing and indexing series\n    # Reverse slicing\n    # from something to end","f1f9a3d0":"# Difference between selecting columns: series and dataframes\n\nprint(type(data_t[\"Family\"])) # Series\nprint(type(data_t[[\"Family\"]])) # Data Frames","5666b34d":"# Slicing and indexing series\ndata_t.loc[1:10,\"Health\":\"Generosity\"]","c023f24e":"# Reverse slicing\n\ndata_t.loc[10:1:-1,\"Health\":\"Generosity\"]","bd6ae1d8":"data_t.loc[1:10 ,\"Perceptions of corruption\":]","e0e225d4":"# Filtering data frames\n  # Creating boolean series containing filters filtering columns based others\n    \nboolean = data_t[\"GDP per capita\"]>1.31\ndata_t[boolean]","a46c6b08":"# Combining filters \n\nfirst_filter = data_t.Family>1.31\nsecond_filter = data_t.Freedom>0.20\ndata_t[first_filter&second_filter]","e4e409a5":"# Transforming data\n   #plain python fonction\n    #lambda function: to apply arbitrary python function to every moment\n    #Defining column using others columns","fa33ae44":"\n# Plain python functions\ndef div(n):\n    return n\/2\ndata_t[\"new_Happiness_Score\"]=data_t[\"Happiness_Score\"].apply(div)\ndata_t","53f2996f":"# Lambda Function\ndata_t[\"new_Happiness_Score\"] = data_t[\"Happiness_Score\"].apply(lambda hp : hp\/2)\ndata_t","73995f85":"\n# Defining column using others columns\n\ndata_t[\"new_total_Happiness_score\"] = data_t.Family + data_t.Freedom + data_t.Generosity\ndata_t","3f2d24ac":"# our index name is this:\nprint(data_t.index.name)\n#lets change it\ndata_t.index.name = \"index_name\"\ndata_t","8c6f2e7f":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata_t.head()","2caedc26":"# first copy of our data to data2 then change index\ndata2 = data.copy()","b53d4017":"# We can make one of the column as index\n# It's like this\n# data= data.set_index(\"Happiness_Score\")\n# also you can use \ndata2.index = data2[\"Happiness_Score\"]\ndata2.index = data2[\"freedom\"]\ndata2.index = data2[\"Happiness_Score\"]\ndata2.head()","f8649463":"data_t.info()","c9541ffa":"plt.figure(figsize= (15,10))\nsns.barplot(x= data_t['Country'].head(10), y= data_t['Happiness_Score'].head(10))\nplt.show()","5e639639":"** Building data frames from scratch","2500db20":"** PIVOTING DATA","bb2774ea":"** EXPLORATORY DATA ANALYSIS","c35fab83":"*** SCOPE","f55b1635":"**PANDAS","8c30c591":"** WHILE AND FOR LOOPS","e89a2ec9":"# 4. PANDAS FOUNDATION","f14f0f56":"# 2. PYTHON DATA SCIENCE TOOLBOX","327a8fcf":"** Data types","6bd6d204":"**MATPLOTLIB","424402b6":"# 1.Introduction to Python:","aed1e438":"** CONCATENATING DATA","6c3c5552":"**Dictionnary","cf849e8d":"** INDEX OBJECTS AND LABELED DATA","f164779f":"** TIDY DATA","98bef499":"# MANIPULATING DATA FRAMES WITH PANDAS","891310e7":"** NESTED FUNCTION\n\nfunction inside function.","8d6b4e02":"What are the 10 happiest countries in 2019?","f1f9659f":"# 3. CLEANING DATA\n","29bdc07b":"** Filtering Data"}}