{"cell_type":{"db9f0dfa":"code","bcde3fee":"code","1bc86636":"code","9089dcde":"code","2604361f":"code","78b06be8":"code","e983c0e7":"code","0db59c24":"code","f3cd5c00":"markdown","90019e0d":"markdown","0baf9f23":"markdown"},"source":{"db9f0dfa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bcde3fee":"#Code By Paul Mooney\n\nchinese_file = '..\/input\/text-dataset-for-63-langauges\/Chinese Traditional.txt'\nwith open(chinese_file) as f: # The with keyword automatically closes the file when you are done\n    print (f.read(1000))","1bc86636":"import numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\ndef plotWordFrequency(input):\n    f = open(chinese_file,'r')\n    words = [x for y in [l.split() for l in f.readlines()] for x in y]\n    data = sorted([(w, words.count(w)) for w in set(words)], key = lambda x:x[1], reverse=True)[:40] \n    most_words = [x[0] for x in data]\n    times_used = [int(x[1]) for x in data]\n    plt.figure(figsize=(20,10))\n    plt.bar(x=sorted(most_words), height=times_used, color = 'red', edgecolor = 'black',  width=.5)\n    plt.xticks(rotation=45, fontsize=18)\n    plt.yticks(rotation=0, fontsize=18)\n    plt.xlabel('Most Common Words:', fontsize=18)\n    plt.ylabel('Number of Occurences:', fontsize=18)\n    plt.title('Most Commonly Used Words: %s' % (chinese_file), fontsize=24)\n    plt.show()","9089dcde":"chinese_file = '..\/input\/text-dataset-for-63-langauges\/Chinese Traditional.txt'\nplotWordFrequency(chinese_file)","2604361f":"file = open('\/kaggle\/input\/text-dataset-for-63-langauges\/Portuguese.txt','r')\nstr_master_data = file.readline().strip()\nmaster_data = str_master_data.split(',')\nmaster_data = list(map(int, master_data))\n\ndef run_intcode(noun, verb):\n    global master_data\n    data = [x for x in master_data]\n    data[1], data[2] = noun, verb\n    position = 0 # to track what instruction is being processed\n    step = 4 # to move cursor\n    try:\n        while position < len(data):\n            if data[position] == 1:\n                data[data[position+3]] = data[data[position+1]]+data[data[position+2]]\n            elif data[position] == 2:\n                data[data[position+3]] = data[data[position+1]]*data[data[position+2]]\n            elif data[position] == 99:\n                break\n            else:\n                print(f'Unknown instruction at position -{position}-')\n            position += step\n    except:\n        print(f'Error: verb = {verb}, noun = {noun}')\n    return data[0]\n\nrun_intcode(12, 2)","78b06be8":"desired_output = 19690720\ndef brutforce_output():\n    for i_noun in range(0, 100):\n        for i_verb in range(0, 100):\n            if run_intcode(i_noun, i_verb) == desired_output:\n                return f'{i_noun}{i_verb}'\nbrutforce_output()","e983c0e7":"from collections import Counter\n\n# My approach will be to collect coordinates sequences and to find where sets of coords overlap\nfile = open('\/kaggle\/input\/text-dataset-for-63-langauges\/Portuguese.txt','r')\ndata = [x.strip() for x in file.readlines()] # read 2 lines of input\nwire_a = [(x[0:1], int(x[1:])) for x in data[0].split(',')] # convert each input line into data lists\nwire_b = [(x[0:1], int(x[1:])) for x in data[1].split(',')]\n\ndef parse_wire_coordinates(wire):\n    wire_coords = []\n    pos_x, pos_y = 0, 0 # our cursor to track where we are\n    for command in wire:\n        x_coords = [pos_x+(1+x)*(command[0] in 'RL')*(-1)**(command[0]=='L') for x in range(command[1])]\n        y_coords = [pos_y+(1+y)*(command[0] in 'UD')*(-1)**(command[0]=='D') for y in range(command[1])]\n        temp = list(zip(x_coords, y_coords))\n        wire_coords += temp\n        pos_x += (command[1])*(command[0] in 'RL')*(-1)**(command[0]=='L')\n        pos_y += (command[1])*(command[0] in 'UD')*(-1)**(command[0]=='D')\n    return wire_coords\n\na_coords, b_coords = parse_wire_coordinates(wire_a), parse_wire_coordinates(wire_b)\nwire_crossings = list(set(a_coords).intersection(set(b_coords)))\nmin([abs(cross[0])+abs(cross[1]) for cross in wire_crossings])","0db59c24":"# since my coordinates are ordered - I can get the answer right away\nmin([a_coords.index(cross)+b_coords.index(cross)+2 for cross in wire_crossings])","f3cd5c00":"#After the \"PARA MIM\" (for me) everything went wrong.","90019e0d":"#Codes by Roman Voronov  https:\/\/www.kaggle.com\/rioran\/aoc2019-rioran-public","0baf9f23":"#I tried to make a different thing with Portughese file. And I failed.\n\nAfter the error: \"invalid literal for int Para mim\". All the rest got not Defined: run_intcode' is not defined, 'wire_crossings isn't too ."}}