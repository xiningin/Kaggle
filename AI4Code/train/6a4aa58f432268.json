{"cell_type":{"50de9386":"code","21fd3591":"code","551ca30f":"code","dd30ebaa":"code","ca6b49f4":"code","80ea9d10":"code","743f6a35":"code","8d4cc295":"code","c57475a6":"code","c7442374":"code","51a2c9e4":"code","8e387279":"code","2181027e":"code","dc8558b9":"code","277417c6":"code","591926a1":"code","9def6960":"code","6fbc5517":"code","2d8517da":"code","26ff1684":"code","c3032781":"code","58b6a523":"code","0554464a":"code","0d9db950":"code","175fcd01":"code","437f811b":"code","5470e463":"code","82d94721":"code","30d0d507":"code","04b26396":"markdown","d211c16b":"markdown","dac7a74c":"markdown","6354c80c":"markdown","74ad0806":"markdown","4d1b5603":"markdown","9456b3da":"markdown","7abc0cd2":"markdown"},"source":{"50de9386":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\nimport warnings\nimport os \nwarnings.filterwarnings(\"ignore\")\nimport datetime\n","21fd3591":"data=pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\n","551ca30f":"data.head()      #displaying the head of dataset they gives the 1st to 5 rows of the data","dd30ebaa":"data.describe()      #description of dataset ","ca6b49f4":"data.info()","80ea9d10":"data.shape       #569 rows and 33 columns","743f6a35":"data.columns     #displaying the columns of dataset","8d4cc295":"data.value_counts","c57475a6":"data.dtypes","c7442374":"data.isnull().sum()","51a2c9e4":"data.drop('Unnamed: 32', axis = 1, inplace = True)\n","8e387279":"data","2181027e":"data.corr()","dc8558b9":"plt.figure(figsize=(18,9))\nsns.heatmap(data.corr(),annot = True, cmap =\"Accent_r\")\n\n\n\n","277417c6":"sns.barplot(x=\"id\", y=\"diagnosis\",data=data[160:190])\nplt.title(\"Id vs Diagnosis\",fontsize=15)\nplt.xlabel(\"Id\")\nplt.ylabel(\"Diagonis\")\nplt.show()\nplt.style.use(\"ggplot\")\n","591926a1":"sns.barplot(x=\"radius_mean\", y=\"texture_mean\", data=data[170:180])\nplt.title(\"Radius Mean vs Texture Mean\",fontsize=15)\nplt.xlabel(\"Radius Mean\")\nplt.ylabel(\"Texture Mean\")\nplt.show()\nplt.style.use(\"ggplot\")\n","9def6960":" \nmean_col = ['diagnosis','radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean']\n\nsns.pairplot(data[mean_col],hue = 'diagnosis', palette='Accent')\n","6fbc5517":"sns.violinplot(x=\"smoothness_mean\",y=\"perimeter_mean\",data=data)","2d8517da":"plt.figure(figsize=(14,7))\nsns.lineplot(x = \"concavity_mean\",y = \"concave points_mean\",data = data[0:400], color='green')\nplt.title(\"Concavity Mean vs Concave Mean\")\nplt.xlabel(\"Concavity Mean\")\nplt.ylabel(\"Concave Points\")\nplt.show()\n\n","26ff1684":"worst_col = ['diagnosis','radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']\n\nsns.pairplot(data[worst_col],hue = 'diagnosis', palette=\"CMRmap\")","c3032781":"# Getting Features\n\nx = data.drop(columns = 'diagnosis')\n\n# Getting Predicting Value\ny = data['diagnosis']\n","58b6a523":"\n#train_test_splitting of the dataset\nfrom sklearn.model_selection import train_test_split \nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)\n","0554464a":"print(len(x_train))\n","0d9db950":"print(len(x_test))","175fcd01":"print(len(y_train))","437f811b":"print(len(y_test))","5470e463":"from sklearn.ensemble import AdaBoostClassifier\nadb = AdaBoostClassifier(base_estimator = None)\nadb.fit(x_train,y_train)\n\n\n\n\n\n","82d94721":"y_pred=adb.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,mean_squared_error,r2_score\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Training Score: \",adb.score(x_train,y_train)*100)","30d0d507":"print(accuracy_score(y_test,y_pred)*100)","04b26396":"**So we get a accuracy score of 98.24 % using AdaBoostClassifier**","d211c16b":"# LOADING THE DATASET","dac7a74c":"# IMPORTING THE LIBRARIES","6354c80c":"#  AdaBoostClassifier","74ad0806":"# TRAINING AND TESTING DATA","4d1b5603":"# VISUALIZING THE DATA","9456b3da":"# MODELS","7abc0cd2":"**So we have to drop the Unnamed: 32 coulumn which contains NaN values**"}}