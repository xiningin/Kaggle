{"cell_type":{"5961fd42":"code","49d7bf78":"code","46993cb9":"code","5ab7e04c":"code","57384508":"code","a44098e8":"code","cf37c2bb":"code","752cedf5":"code","3785f47d":"code","b2fcad57":"code","7aebb362":"code","25c3e5ee":"code","69d7126a":"code","e69667ca":"code","f5ca0de2":"code","0d649f84":"code","674dd139":"code","bb3770a6":"code","47827b56":"code","878d8481":"code","6186ba3a":"code","a81a5ca2":"code","bbfd5b1c":"code","3c67dea8":"code","4fd51201":"code","e17a2f70":"code","9b873f36":"code","6c00cd87":"code","bd3c437e":"code","492862d2":"code","00a1dc4c":"code","cf8088d5":"code","70b5fa7a":"code","0040b959":"code","c4da48b9":"code","5141f3b8":"code","9c12df3b":"code","6a111be3":"code","e381f926":"code","da3ed50e":"code","ea7d7ddd":"code","f1b6331b":"code","2762e6e5":"code","e1254fe7":"code","e45fedf5":"code","047f5518":"code","4dcdc507":"code","05daaaf2":"code","2c1600c5":"code","6575ddfb":"code","83bdb377":"code","46d271df":"code","a54e8576":"code","3f0c04be":"code","9f663c3d":"code","268e92dd":"code","8e8cc538":"code","5d80168e":"code","6c7e71aa":"code","0dcff1d0":"code","f51dafb3":"code","4f7e8778":"code","44dbaf2d":"code","61f32962":"code","8db3257a":"code","16fd1afc":"code","e88b0148":"code","215ce13f":"code","bd772a1c":"code","19a0a2fc":"code","5799c31c":"code","bc2ca669":"code","73a43537":"code","af3b894d":"code","546450e6":"code","61763469":"code","51d16279":"code","035f6298":"code","a06c595c":"code","f6606c24":"code","955f7156":"code","9c454d51":"code","ae626fa3":"code","b0142a17":"code","f97d16ed":"code","96653b97":"code","3076a428":"code","e132f83f":"code","56fa4524":"code","664c3901":"code","264a2f76":"code","edd2b44e":"code","7dc9054d":"code","af3a0017":"code","34382001":"code","6b8ee409":"code","59135052":"code","aeffcd85":"code","51071f61":"code","81500ace":"code","3df118e4":"code","3751ac03":"code","24309625":"code","7a1d57f4":"code","20d83f1c":"markdown","877971a6":"markdown","b06c3fb9":"markdown","81e20a5e":"markdown","610626e2":"markdown","ec8b88d2":"markdown","4096cc03":"markdown","267cf301":"markdown","3e55e8d6":"markdown","ed2425fe":"markdown","1af073c7":"markdown","c116c0c5":"markdown","27a6ffb9":"markdown","d2362fa0":"markdown","03fb9638":"markdown","809c31ef":"markdown","b336d3b1":"markdown","958dc845":"markdown","9958618f":"markdown","fe808e91":"markdown","841f1d4c":"markdown","b02a6429":"markdown","4300e648":"markdown","823ca98a":"markdown","41a36c03":"markdown","78007207":"markdown","c0d0edd4":"markdown","7fc4b988":"markdown","c4be470d":"markdown","6423c036":"markdown","d3551c08":"markdown","fd857828":"markdown","a619ebde":"markdown","8805c4a6":"markdown","b641fdf7":"markdown","2daf3427":"markdown","8620be21":"markdown","8de694f6":"markdown","0065a9ee":"markdown","6bdda82e":"markdown","3a0a00c3":"markdown","17df876d":"markdown","923f3a5e":"markdown","074ca665":"markdown","f6ec43cc":"markdown","f76c9adf":"markdown"},"source":{"5961fd42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49d7bf78":"import pandas as pd\n\nimport seaborn as sns\nsns.set_style('whitegrid')\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom datetime import datetime, date, timedelta\n\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","46993cb9":"df_afl = pd.read_csv('\/kaggle\/input\/afl-statscsv\/afl_stats.csv')","5ab7e04c":"df_afl.info()","57384508":"df_afl.head(10)","a44098e8":"df_afl.isnull().sum()","cf37c2bb":"#Renaming the AFL teams with my own abbreviated version\n\nd_team_map = {'Adelaide': 'ADL', \n'Port Adelaide': 'PDL',\n'Carlton' : 'CAR',\n'Collingwood' : 'COL', \n'Richmond': 'RCH',\n'Brisbane Lions' : 'BRS', \n'Western Bulldogs' : 'WBL', \n'Gold Coast' : 'GCS', \n'Melbourne' : 'MLB',\n'Geelong' : 'GEE', \n'Fremantle' : 'FRM', \n'Hawthorn' : 'HTN', \n'Sydney' : 'SYD', \n'St Kilda' : 'STK',\n'Greater Western Sydney' : 'GWS', \n'North Melbourne' : 'NML',\n'Essendon' : 'ESS',\n'West Coast' : 'WCE'}\n\ndf_afl['Team'] = df_afl['Team'].map(d_team_map)\ndf_afl['Opposition'] = df_afl['Opposition'].map(d_team_map)","752cedf5":"df_afl['Team'].unique()","3785f47d":"df_afl['Opposition'].unique()","b2fcad57":"df_afl['WinLoss'].unique()","7aebb362":"win_dmap = {'W':1 , 'L':0, 'D':0}\ndf_afl['WinLoss'] = df_afl['WinLoss'].map(win_dmap)","25c3e5ee":"df_afl['WinLoss'].head()","69d7126a":"df_afl['Date'].head(5)","e69667ca":"#Converting time stamp on Date column\ndf_afl['Date of Game'] = pd.to_datetime(df_afl['Date'])","f5ca0de2":"df_afl['Date of Game'].head()","0d649f84":"df_FRM = df_afl[(df_afl['Team'] == 'FRM')]","674dd139":"#Lets quickly check that we have copied data over for a single team (FRM) only.\ndf_FRM['Team'].nunique()","bb3770a6":"df_FRM.info()","47827b56":"#Lets begin our analysis by investigating the matches won by Fremantle over the period 2012-2020\n\ndf_FRM.groupby('Year')['WinLoss'].sum()","878d8481":"#Obviously FRM did not win 303 games in a single season. \n#It would seem that the sum of 'WinLoss' is counting every single player involved \n#So lets take a look at the number of players that took part in each match\n\ndf_FRM.groupby(['Year', 'Date of Game'])['Player'].nunique()","6186ba3a":"#It appears that there are always 22 players involved. Lets confirm this by checking the number of \n#unique values for the unique players\n\ndf_FRM.groupby(['Year', 'Date of Game'])['Player'].nunique().nunique()","a81a5ca2":"#as there are always 22 players, we can divide by 22 to find the amount of matches won each season\n\ndf_FRM.groupby('Year')['WinLoss'].sum().div(22)","bbfd5b1c":"#We can quickly compare the amount of matches won against the amount of matches played\n\ndf_FRM.groupby('Year').agg({'WinLoss': lambda x: sum(x)\/22, \n                           'Date of Game':'nunique'}).rename(columns={'WinLoss':'Matches Won', \n                                                                     'Date of Game':'Matches Played'})","3c67dea8":"#Lets compare the number of wins each season for Fremantle against their AFL opposition\n#Carry the data over to a separate dataframe\n\ndf_afl_wins = pd.DataFrame(df_afl.groupby(['Team', 'Year'])['WinLoss'].sum().div(22))","4fd51201":"df_afl_wins.head(10)","e17a2f70":"df_afl_wins.reset_index(inplace=True)","9b873f36":"df_afl_wins.set_index('Team')","6c00cd87":"df_afl_wins.rename(columns={'WinLoss':'Matches Won'}, inplace = True)","bd3c437e":"#Plot the data in order to quickly visualise how the amount of wins accumulated each season \n#by Fremantle compares to other teams in the AFL.\n\nplt.figure(figsize = (18,6))\n\nsns.barplot(data = df_afl_wins, x = 'Year', y = 'Matches Won', hue = 'Team', \n                  palette = {'ADL': 'lightgrey', \n                            'PDL' : 'lightgrey', \n                            'CAR' : 'lightgrey', \n                            'COL' : 'lightgrey', \n                            'RCH' : 'lightgrey',\n                            'BRS' : 'lightgrey', \n                            'WBL' : 'lightgrey',\n                            'GCS' : 'lightgrey', \n                            'MLB' : 'lightgrey',\n                            'GEE' : 'lightgrey', \n                            'FRM' : 'purple', \n                            'HTN' : 'lightgrey', \n                            'SYD' : 'lightgrey', \n                            'STK' : 'lightgrey',\n                            'GWS' : 'lightgrey', \n                            'NML' : 'lightgrey', \n                            'ESS' : 'lightgrey',\n                            'WCE' : 'lightgrey' })\n\n\nplt.legend(loc = 'center left', bbox_to_anchor = (1.0, 0.5))\nplt.xlabel('Year', fontsize=14)\nplt.xticks(fontsize=12)\nplt.ylabel('Matches Won', fontsize=14)\nplt.yticks(fontsize=12)\nplt.title('Matches Won Each Season From 2012 To 2020', fontsize=16)\nplt.show()","492862d2":"plt.figure(figsize=(18,6))\n\nmatches_won = df_FRM.groupby('Year')['WinLoss'].sum().div(22)\nmatches_played = df_FRM.groupby('Year')['Date'].nunique()\n\nchart = matches_won.div(matches_played).mul(100).plot(kind='bar',color='purple')\n\nfor p in chart.patches:\n             chart.annotate(\"%.0f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                 ha='center', va='center', fontsize=12, color='black', xytext=(0,5),\n                 textcoords='offset points')\n\nplt.xticks(rotation=0)\nplt.xlabel('Year', fontsize=14)\nplt.xticks(fontsize=12)\nplt.ylabel('Win %', fontsize=14)\nplt.yticks(fontsize=12)\nplt.title('Fremantle Win Percentage', fontsize=16)\nplt.show()","00a1dc4c":"#Fremantle win percentage against each opposition from 2012-2020 inclusive\nplt.figure(figsize=(18,6))\n\nmatches_won = df_FRM.groupby('Opposition')['WinLoss'].sum().div(22)\nmatches_against_opposition = df_FRM.groupby('Opposition')['Date'].nunique()\n\nchart = matches_won.div(matches_against_opposition).mul(100).plot(kind='bar',color='purple')\n\nfor p in chart.patches:\n             chart.annotate(\"%.0f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                 ha='center', va='center', fontsize=12, color='black', xytext=(0,5),\n                 textcoords='offset points')\n\nplt.title('Fremantle Win Percentage Against AFL Opposition', \n         fontsize=16)\nplt.xticks(rotation=0)\nplt.xlabel('Opposition', fontsize=14)\nplt.xticks(fontsize=12)\nplt.ylabel('Win %', fontsize=14)\nplt.yticks(fontsize=12)\n\nplt.show()","cf8088d5":"#Venue column shows where the match was played. We can thus look at performance home and away. \n#Lets create an array where 1 represents a home match and 0 an away match.\n\nHome_or_away = []\n\nfor venue in df_FRM['Venue']:\n    if venue == 'Subiaco':\n        i = 1\n        Home_or_away.append(i)\n    elif venue == 'Perth Stadium':\n        i = 1\n        Home_or_away.append(i)\n    #Between 2012 and 2020, both teams moved to a new stadium so both need to be account for as home grounds\n    else:\n        i = 0\n        Home_or_away.append(i)","70b5fa7a":"Home_or_away_series = pd.Series([Home_or_away])","0040b959":"df_FRM = df_FRM.assign(Home = Home_or_away)","c4da48b9":"df_FRM['Home'].unique()","5141f3b8":"#For each opposition that FRM faced, check whether the match was at home or away \n#How many matches were played and how many of those matches did FRM win?\n\ndf_FRM.groupby(['Opposition', 'Home']).agg({'Date of Game':'nunique', \n                              'WinLoss': lambda x: sum(x)\/22}).rename(columns = {'Date of Game':'Matches Played', \n                                                                                 'WinLoss': 'Matches Won'}).astype(int)","9c12df3b":"#home matches played\nhomegame = df_FRM[df_FRM['Home']==1]\n#away matches played\nawaygame = df_FRM[df_FRM['Home']==0]\n\nvals = [len(homegame)\/22, len(awaygame)\/22]\nlabels = ['Home Match', 'Away Match']\ncols = ['purple', 'lightgrey']\n\nfig = go.Figure(data = [go.Pie(labels=labels, values=vals)])\nfig.update_traces(hoverinfo='none', textfont_size=15, textinfo='label+value', \n                 marker=dict(colors=cols))\nfig.update_layout(title=\"Split of Fremantle's Home and Away Matches\", title_x=0.5,\n                 showlegend=False)\nfig.show()","6a111be3":"#separate home and away matches\nhomegame = df_FRM[df_FRM['Home']==1]\nawaygame = df_FRM[df_FRM['Home']==0]\n#find home wins and home losses\nhome_loss = homegame[df_FRM['WinLoss']==0]\nhome_win = homegame[df_FRM['WinLoss']==1]\n#find away wins and away losses\naway_loss = awaygame[df_FRM['WinLoss']==0]\naway_win = awaygame[df_FRM['WinLoss']==1]\n\n#remember to divide values by the number of players involved i.e. 22\nvals = [len(home_loss)\/22, len(home_win)\/22, \n        len(away_loss)\/22, len(away_win)\/22]\n\nlabels = ['Home Loss', 'Home Win', 'Away Loss', 'Away Win']\n\ncols = ['plum', 'purple', 'lightgrey', 'darkgrey']\n\nfig = go.Figure(data = [go.Pie(labels=labels, values=vals, hole=0.25)]) \n\nfig.update_traces(hoverinfo='none', textfont_size=15, textinfo='label+value', direction='clockwise', \n                  sort=False, marker=dict(colors=cols))\nfig.update_layout(title=\"Fremantle's Wins and Losses - Home and Away\", title_x=0.5, \n                  showlegend=False)\nfig.show()","e381f926":"print('Home Win %','','Home Loss %')\nprint(\"%.1f\"%(((len(home_win)\/22) \/ (len(homegame)\/22))*100),\n      '      ',  \n      \"%.1f\"%(((len(home_loss)\/22) \/ (len(homegame)\/22))*100))\n\nprint('\\n')\n\nprint('Away Win %','','Away Loss %')\nprint(\"%.1f\"%(((len(away_win)\/22) \/ (len(awaygame)\/22))*100),\n      '      ',\n      \"%.1f\"%(((len(away_loss)\/22) \/ (len(awaygame)\/22))*100))","da3ed50e":"FRM_wins = df_FRM.groupby('Date of Game')['WinLoss'].sum().div(22).sum()  \nFRM_matches = df_FRM['Date of Game'].nunique()\nprint('FRM Overall Win Percentage')\nprint(\"%.1f\"%((FRM_wins\/FRM_matches)*100),'%')","ea7d7ddd":"#Start off by checking how many rounds in an AFL season FRM have reached\ndf_FRM['Round'].unique()","f1b6331b":"#Premiership season goes from R1 to R23 and then Finals series begins. \n#Hence, rounds are in order of R1 to R23 followed by QF, EF, SF, PF, GF\n#QF = Qualifying Final, EF = Elimination Final, SF = Semi Final, PF = Preliminary Final, GF = Grand Final \n\n\n#as seen in array above, the rounds are not in order. To sort the values according to how they played in an\n#AFL season, lets create a list so that we can select specific elements within that list.\nroundslst = list(df_FRM['Round'].unique())","2762e6e5":"roundslst","e1254fe7":"#Break up list and put it back together into the correct order\norderedlst= roundslst[:13] + roundslst[22:23]+ roundslst[13:22] + roundslst[-5:-4] + roundslst[-1:] + roundslst[-3:-2] + roundslst[-4:-3] + roundslst[-2:-1]","e45fedf5":"orderedlst","047f5518":"#create new dataframe for the ordered list of rounds\nroundsord = pd.DataFrame({'Round':orderedlst})\n\n#create new dataframe for the amount of matches played and the amount of wins in each round from 2012 to 2020\nFRM_roundwins = df_FRM.groupby('Round').agg({ 'Date of Game':'nunique', \n                                            'WinLoss': lambda x : sum(x)\/22,}).rename(columns={'Date of Game':'Matches Played', \n                                                                                      'WinLoss':'Matches Won'})","4dcdc507":"#combine roundsord with FRM_roundwins to have a dataframe sorted by the order in which the rounds are played\n#can achieve this by merging the two datframes on a column they have in common i.e. Round\n\nFRM_rounds = roundsord.merge(FRM_roundwins, on='Round')","05daaaf2":"FRM_rounds","2c1600c5":"import matplotlib.patches as mpatches\n\nplt.figure(figsize=(18,6))\n\nplayed = sns.barplot(data=FRM_rounds, x='Round', y='Matches Played', color='plum')\nwins = sns.barplot(data=FRM_rounds, x='Round', y='Matches Won', color='purple')\n\nplayed = mpatches.Patch(color='plum', label='Played')\nwins = mpatches.Patch(color='purple', label='Won')\n\nplt.legend(handles=[played, wins])\nplt.ylabel(ylabel='Number of Matches', fontsize=14)\nplt.xlabel(xlabel = 'Round', fontsize=14)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.title('Fremantle Matches Split by Round', fontsize=18)\nplt.show()","6575ddfb":"plt.figure(figsize=(18,6))\n\nchart = sns.barplot(x= FRM_rounds['Round'].unique(), \n                    y=(FRM_rounds['Matches Won']\/FRM_rounds['Matches Played']).mul(100).astype(int), \n                    color = 'purple')\n\nfor p in chart.patches:\n             chart.annotate(\"%.0f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                 ha='center', va='center', fontsize=12, color='black', xytext=(0,5),\n                 textcoords='offset points')\n\nplt.title('Fremantle Win Percentage by Round', fontsize=18)\nplt.xticks(rotation=0)\nplt.xlabel('Round', fontsize=14)\nplt.xticks(fontsize=12)\nplt.ylabel('Win %', fontsize=14)\nplt.yticks(fontsize=12)\nplt.show()","83bdb377":"df_FRM.groupby('Day')['WinLoss'].sum().div(22)","46d271df":"days = list(df_FRM['Day'].unique())","a54e8576":"days","3f0c04be":"days_ord = days[4:5]+days[5:6]+days[3:4]+days[2:3]+days[0:1]+days[1:2]","9f663c3d":"days_ord","268e92dd":"days_ordered = pd.DataFrame({'Day':days_ord})","8e8cc538":"days_wins = df_FRM.groupby('Day').agg({'WinLoss':lambda x:sum(x)\/22, \n                           'Date':'nunique'}).rename(columns={'WinLoss':'Matches Won', \n                                                             'Date': 'Matches Played'})","5d80168e":"FRM_days = days_ordered.merge(days_wins, on='Day')","6c7e71aa":"FRM_days","0dcff1d0":"fig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]], \n                   subplot_titles = ['Matches Played', 'Matches Won'])\n\n\nfig.add_trace(go.Pie(labels=FRM_days['Day'], \n                               values=FRM_days['Matches Played'], \n                               sort=False,\n                               textinfo = 'label+value', \n                               hoverinfo = 'none',\n                               direction = 'counterclockwise',\n                               textfont_size=13,\n                               marker = dict(line=dict(color='black', width=1)), \n                               name = 'Matches Played'\n                              ),1,1 \n                       )\n\nfig.add_trace(go.Pie(labels=FRM_days['Day'], \n                               values=FRM_days['Matches Won'], \n                               sort=False,\n                               textinfo = 'label+value', \n                               hoverinfo = 'none',\n                               direction='counterclockwise',\n                               textfont_size=13,\n                               marker = dict(line=dict(color='black', width=1)), \n                               name = 'Matches Won'\n                              ),1,2 \n                       )\n\nfig.update_traces(hole=0.4, insidetextorientation='auto')\nfig.update_layout(title = 'Fremantle Matches Split by Day', title_x=0.5, \n                  annotations=[dict(text='Played', x=0.225, y=0.475, font_size=18, showarrow=False),\n                  dict(text='Won', x=0.775, y=0.475, font_size=18, showarrow=False)])\nfig.show()","f51dafb3":"#Find the amount of goals scored for each team in each season \ndf_afl_goals=pd.DataFrame(df_afl.groupby(['Team', 'Year'])['Goals'].sum())","4f7e8778":"df_afl_goals.reset_index(inplace=True)","44dbaf2d":"df_afl_goals","61f32962":"df_afl_goals.set_index('Team')","8db3257a":"#Display total goals scored in descending order\ndf_afl_goals.groupby('Team')['Goals'].sum().sort_values(ascending=False)","16fd1afc":"labels = df_afl_goals['Team'].unique()\n\nvals = df_afl_goals.groupby('Team')['Goals'].sum()\n\nfig = go.Figure(data = [go.Pie(labels=labels, \n                              values=vals, \n                              sort=True, \n                              textinfo = 'label+value', \n                              textfont_size = 12, \n                              hoverinfo = 'label+percent', \n                              direction = 'clockwise', \n                              marker = dict(line=dict(color='black', width=1)),\n                              pull=[0, 0, 0, 0, 0, 0.2, \n                                    0, 0, 0, 0, 0, 0, \n                                    0, 0, 0, 0, 0, 0])])\n\n\nfig.update_layout(title='Total Goals Scored From 2012 To 2020', title_x=0.5, showlegend=False)\nfig.show()","e88b0148":"plt.figure(figsize = (18,6))\n\nsns.barplot(data = df_afl_goals, x = 'Year', y = 'Goals', hue = 'Team', \n           palette = {'ADL': 'lightgrey', \n                            'PDL' : 'lightgrey', \n                            'CAR' : 'lightgrey', \n                            'COL' : 'lightgrey', \n                            'RCH' : 'lightgrey',\n                            'BRS' : 'lightgrey', \n                            'WBL' : 'lightgrey',\n                            'GCS' : 'lightgrey', \n                            'MLB' : 'lightgrey',\n                            'GEE' : 'lightgrey', \n                            'FRM' : 'purple', \n                            'HTN' : 'lightgrey', \n                            'SYD' : 'lightgrey', \n                            'STK' : 'lightgrey',\n                            'GWS' : 'lightgrey', \n                            'NML' : 'lightgrey', \n                            'ESS' : 'lightgrey',\n                            'WCE' : 'lightgrey' })\n\n\nplt.legend(loc = 'center left', bbox_to_anchor = (1.0, 0.5))\nplt.xlabel('Year', fontsize=14)\nplt.xticks(fontsize=12)\nplt.ylabel('Goals Scored', fontsize=14)\nplt.yticks(fontsize=12)\nplt.title('Goals Scored Each Season From 2012 To 2020', fontsize=16)\nplt.show()","215ce13f":"plt.figure(figsize=(18,6))\n\nsns.heatmap(data=df_afl.groupby(['Team', 'Year'])['Goals'].sum().astype(int).unstack(), \n            cmap='coolwarm', cbar=False, annot=True, fmt='.3g')\n\nplt.title('Number of Goals Scored by AFL Teams Each Season', fontsize=18)\nplt.ylabel(ylabel='Team', fontsize=14)\nplt.yticks(fontsize=11)\nplt.xlabel(xlabel='Year', fontsize=14)\nplt.xticks(fontsize=11)\nplt.show()","bd772a1c":"plt.figure(figsize=(14,6))\n\ngoals=sns.barplot(x = df_afl_goals['Team'].unique(), \n                  y = df_afl_goals.groupby('Team')['Goals'].sum(), color='khaki')\nbehinds=sns.barplot(x = df_afl_goals['Team'].unique(), \n                    y = df_afl.groupby('Team')['Behinds'].sum(), color='olive')\n\nfor p in goals.patches:\n             goals.annotate(\"%.0f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                 ha='center', va='center', fontsize=12, color='black', xytext=(0,5),\n                 textcoords='offset points')\n\ngoals= mpatches.Patch(color='khaki', label='Goals Scored')\nbehinds = mpatches.Patch(color='olive', label='Behinds Scored')\n\nplt.title('Total Goals and Behinds Scored From 2012 to 2020', fontsize=18)\nplt.legend(handles=[goals, behinds], loc = 'center left', bbox_to_anchor = (1.0, 0.5), fontsize=12)\nplt.xlabel(xlabel='Team', fontsize=14)\nplt.xticks(fontsize=12)\nplt.ylabel(ylabel='Total', fontsize=14)\nplt.yticks(fontsize=12)\n\nplt.show()","19a0a2fc":"FRM_gls = pd.DataFrame(df_FRM.groupby('Opposition')['Goals'].sum())\nFRM_gls.reset_index(inplace=True)","5799c31c":"FRM_bds = pd.DataFrame(df_FRM.groupby('Opposition')['Behinds'].sum())\nFRM_bds.reset_index(inplace=True)","bc2ca669":"FRM_glsbds = FRM_gls.merge(FRM_bds, on='Opposition')","73a43537":"plt.figure(figsize=(14,6))\n\ng=sns.barplot(data=FRM_glsbds, x = 'Opposition', y = 'Goals', color='mediumorchid')\nb=sns.barplot(data=FRM_glsbds, x = 'Opposition', y = 'Behinds', color='mediumpurple')\n\nfor p in g.patches:\n             g.annotate(\"%.0f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                 ha='center', va='center', fontsize=12, color='black', xytext=(0,5),\n                 textcoords='offset points')\n\ng= mpatches.Patch(color='mediumorchid', label='Goals Scored')\nb= mpatches.Patch(color='mediumpurple', label='Behinds Scored')\n\nplt.title('Goals and Behinds Scored Against AFL Opposition by Fremantle From 2012 to 2020', fontsize=18)\nplt.legend(handles=[g, b], loc = 'center left', bbox_to_anchor = (1.0, 0.5), fontsize=12)\nplt.xlabel(xlabel='Opposition', fontsize=14)\nplt.xticks(fontsize=12)\nplt.ylabel(ylabel='Total', fontsize=14)\nplt.yticks(fontsize=12)\n\nplt.show()","af3b894d":"#create loop to calculate total score accumulated against each team\n\n#for each team faced by Fremantle\nfor team in FRM_glsbds['Opposition'].unique():\n    i = 0\n    #start at team indexed 0, go on until index 16 (17 opposition teams)\n    while i < len(FRM_glsbds['Opposition'].unique()):\n        #for each opponent, find total amount of goals and multiply by 6 as goal = 6 points \n        g = (FRM_glsbds[FRM_glsbds['Opposition']==team]['Goals'].sum())*6\n        #for each opponent, find total amount of behinds\n        b = FRM_glsbds[FRM_glsbds['Opposition']==team]['Behinds'].sum()\n        #sum value of goals and behinds\n        total = g + b\n        #move onto next index i.e. team\n        i+=1\n    #return the team and the total score     \n    print(team, total)","546450e6":"#Put data from loop into a dataframe to then join with the original dataframe\n\nscores = {'Opposition': ['ADL', 'BRS', 'CAR', 'COL', 'ESS', 'GCS', \n                         'GEE', 'GWS', 'HTN', 'MLB','NML', 'PDL', \n                         'RCH', 'STK', 'SYD', 'WBL','WCE'], \n          'Total Score':[858, 839, 792, 768, 1005, 781, \n                         922, 901, 754, 1103, 976, 1137, \n                         861, 824, 745, 877, 1215]}\n\ndf_scores = pd.DataFrame(data=scores)","61763469":"df_scores.sort_values('Total Score',ascending=False)","51d16279":"#Gather relevant columns and information to create new dataframe\nFRM_stats = df_FRM.groupby('Opposition').agg({'Date of Game':'nunique', \n                                  'WinLoss':lambda x:sum(x)\/22,\n                                  'Inside 50s':'sum',\n                                 'Goals':'sum', \n                                 'Behinds':'sum'}).rename(columns={'Date of Game':'Matches Played', \n                                                                  'WinLoss':'Matches Won'})","035f6298":"#Merge new datframe with the dataframe showing total score achieved\nFRM_stats = FRM_stats.merge(df_scores, on='Opposition')","a06c595c":"#Find conversion percentage\n((FRM_stats.groupby('Opposition')['Goals'].sum()+FRM_stats.groupby('Opposition')['Behinds'].sum())\/FRM_stats.groupby('Opposition')['Inside 50s'].sum()).round(3)","f6606c24":"#Plot conversion percentage\n\nplt.figure(figsize=(18,6))\n\nconv_perc = sns.barplot(x=FRM_stats['Opposition'].unique(), \n            y=(((FRM_stats.groupby('Opposition')['Goals'].sum()+FRM_stats.groupby('Opposition')['Behinds'].sum())\/FRM_stats.groupby('Opposition')['Inside 50s'].sum()))*100,\n            color='purple')\n\nfor p in conv_perc.patches:\n             conv_perc.annotate(\"%.1f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                 ha='center', va='center', fontsize=12, color='black', xytext=(0,5),\n                 textcoords='offset points')\n        \nplt.title('Fremantle Overall Conversion Percentage Against AFL Opposition', fontsize=18)\n#plt.legend(handles=[g, b], loc = 'center left', bbox_to_anchor = (1.0, 0.5), fontsize=12)\nplt.xlabel(xlabel='Opposition', fontsize=14)\nplt.xticks(fontsize=12)\nplt.ylabel(ylabel='Chances Converted (%)', fontsize=14)\nplt.yticks(fontsize=12)\nplt.show()","955f7156":"FRM_stats = FRM_stats.assign(Conv=[0.363,0.420,0.409,0.438,0.404,0.423,\n                                            0.408,0.448,0.380,0.416,0.424,0.430,\n                                            0.402,0.365,0.343,0.434,0.402])","9c454d51":"FRM_stats.rename(columns={'Conv':'Conversion Percentage'}, inplace=True)","ae626fa3":"FRM_stats.groupby('Opposition').agg({'Goals':'sum', \n                                     'Behinds':'sum', \n                                     'Inside 50s':'sum', \n                                     'Conversion Percentage':'sum'}).sort_values('Inside 50s', ascending=True)","b0142a17":"#Lets start by creating a new dataframe specific for when AFL teams face Fremantle i.e. Opposition = FRM\ndf_FRM_Opps = df_afl[(df_afl['Opposition']=='FRM')]","f97d16ed":"#create loop to calculate total score by each team when facing FRM\n\nfor opp in df_FRM_Opps['Team'].unique():\n    i = 0\n    \n    while i < len(df_FRM_Opps['Team'].unique()):\n        opp_g = (df_FRM_Opps[df_FRM_Opps['Team']==opp]['Goals'].sum())*6\n        opp_b = df_FRM_Opps[df_FRM_Opps['Team']==opp]['Behinds'].sum()\n        opp_tot = opp_g + opp_b\n        \n        i+=1\n\n    print(opp, opp_tot)","96653b97":"opps_scores = {'Team': ['ADL', 'CAR', 'COL', 'BRS', 'WBL', 'GCS', \n                         'MLB', 'GEE', 'HTN', 'SYD','STK', 'GWS', \n                         'NML', 'ESS', 'RCH', 'PDL','WCE'], \n               \n          'Total Score':[1034,622,793,632,788,701,\n                         729,1044,1166,983,873,759,\n                         745,904,1111,1242,1452]}\n\ndf_opps_scores = pd.DataFrame(data=opps_scores)","3076a428":"FRM_Opps_stats = df_FRM_Opps.groupby('Team').agg({'WinLoss':lambda x:sum(x)\/22,\n                                                  'Inside 50s':'sum',\n                                                  'Goals':'sum', \n                                                  'Behinds':'sum'}).rename(columns={'WinLoss':'Matches Won'})","e132f83f":"FRM_Opps_stats = FRM_Opps_stats.merge(df_opps_scores, on='Team')","56fa4524":"((FRM_Opps_stats.groupby('Team')['Goals'].sum()+FRM_Opps_stats.groupby('Team')['Behinds'].sum())\/FRM_Opps_stats.groupby('Team')['Inside 50s'].sum()).round(3)","664c3901":"FRM_Opps_stats = FRM_Opps_stats.assign(Conv=[0.418,0.407,0.395,0.385,0.425,0.364,\n                                             0.413,0.478,0.468,0.388,0.367,0.424,\n                                             0.433,0.426,0.411,0.399,0.456])\n\nFRM_Opps_stats.rename(columns={'Conv':'Conversion Percentage'}, inplace=True)","264a2f76":"FRM_Opps_stats.rename(columns = {'Team':'Opposition', \n                                'Matches Won':'Matches Lost', \n                                'Inside 50s':'Inside 50s Conceded', \n                                'Goals':'Goals Conceded', \n                                'Behinds':'Behinds Conceded', \n                                'Total Score':'Total Score Against', \n                                'Conversion Percentage':'Conversion Percentage Against'}, inplace=True)","edd2b44e":"FRM_Opps_stats","7dc9054d":"FRM_fullstats = FRM_stats.merge(FRM_Opps_stats, on='Opposition')","af3a0017":"FRM_fullstats","34382001":"plt.figure(figsize=(18,6))\n\nconv_perc_ag = sns.barplot(x=FRM_fullstats['Opposition'].unique(), \n                           y=FRM_fullstats.groupby('Opposition')['Conversion Percentage Against'].sum()*100, \n                           palette = {'ADL': '#002b5c', \n                                'PDL' : '#008aab', \n                                'CAR' : '#031a29', \n                                'COL' : '#000000', \n                                'RCH' : '#ffd200',\n                                'BRS' : '#fdbe57', \n                                'WBL' : '#1a529e',\n                                'GCS' : '#ee3728', \n                                'MLB' : '#0f1131',\n                                'GEE' : '#002b5c', \n                                'HTN' : '#4d2004', \n                                'SYD' : '#ed171f', \n                                'STK' : '#ed0f05',\n                                'GWS' : '#f47920', \n                                'NML' : '#1a3b8e', \n                                'ESS' : '#bdbec0',\n                                'WCE' : '#f2a900',})\n\nfor p in conv_perc_ag.patches:\n             conv_perc_ag.annotate(\"%.1f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                 ha='center', va='center', fontsize=12, color='black', xytext=(0,5),\n                 textcoords='offset points')\n        \nplt.title('AFL Opposition Overall Conversion Against Fremantle', fontsize=18)\n#plt.legend(handles=[g, b], loc = 'center left', bbox_to_anchor = (1.0, 0.5), fontsize=12)\nplt.xlabel(xlabel='Opposition', fontsize=14)\nplt.xticks(fontsize=12)\nplt.ylabel(ylabel='Chances Converted (%)', fontsize=14)\nplt.yticks(fontsize=12)\nplt.show()","6b8ee409":"plt.figure(figsize=(18,6))\n\nchart = sns.barplot(data = FRM_fullstats, x = 'Opposition', \n           y = ((FRM_fullstats['Total Score'])-(FRM_fullstats['Total Score Against'])), \n           palette = 'tab20_r')\n\nfor p in chart.patches:\n             chart.annotate(\"%.0f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                 ha='center', va='center', fontsize=12, color='black', xytext=(0,5),\n                 textcoords='offset points')\n\nplt.title('Fremantle Overall Score Margin', fontsize=18)\nplt.ylabel(ylabel='Score Margin', fontsize=14)\nplt.yticks(fontsize=12)\nplt.xlabel(xlabel='Opposition', fontsize=14)\nplt.xticks(fontsize=12)\nplt.show()","59135052":"#Check what type of data 'Date of Game' holds\ndf_FRM['Date of Game'].dtype","aeffcd85":"#Only want month and day value so to stack data when plotting season by season\ndf_FRM[df_FRM['Year']==2014].sort_values('Date of Game')['Date of Game'].dt.strftime('%d-%b').unique()","51071f61":"#Create new dataframe grouping by 'Year' and 'Day and Month of Game' \n#Find sum of margin for each subgroup\nagg_FRM = df_FRM.groupby(['Year','Date of Game'], as_index=False).agg({'Margin':'sum'})","81500ace":"#Divide margin by 22 as each match has 22 FRM players\nagg_FRM['Margin'] = agg_FRM['Margin'].div(22)","3df118e4":"#Replace year with 2000 in order to standardise data\nagg_FRM['Standard-Date'] = agg_FRM['Date of Game'].apply(lambda x: x.replace(2000))","3751ac03":"#Check to see if new column is there and holds the data in the format we want \nagg_FRM","24309625":"#create new column that holds day and month from value of 'Date of Game' as a string\n#For example, if date is '2012-03-31', we want to transform that to 31-Mar \nagg_FRM['date_string'] = agg_FRM['Date of Game'].dt.strftime('%d-%b')","7a1d57f4":"fig = go.Figure()\n\nfor year in agg_FRM['Year'].unique():\n    #plot score margin of each match for every year (2012-2020)\n    fig.add_trace(go.Scatter( \n                 x = agg_FRM[agg_FRM['Year']==year]['Standard-Date'], \n                 y = agg_FRM[agg_FRM['Year']==year]['Margin'], \n                 line=dict(width=2), name = f'{year} Season'))\n\n#Amend xlabel so day and month are shown (i.e. 01-Apr), not month and year\nmonths = []\nfor m in range(min(agg_FRM['Standard-Date']).month,max(agg_FRM['Standard-Date']).month+1):\n    months.append(date(2000,m,1))\n\nmonth_labels = [x.strftime('%d-%b') for x in months]\n    \nfig.update_xaxes(ticktext=month_labels, tickvals=months)\n\nfig.update_traces(mode='lines+markers')\nfig.update_layout(title = 'Fremantle Score Margin For Matches Played From 2012 To 2020', \n                  title_x = 0.5,\n                 xaxis_title = 'Date of Game', \n                 yaxis_title = 'Margin')\n\nfig.show()","20d83f1c":"Here we have the split of total goals and behinds scored by the Dockers against their opposition. From this, we can obtain the total score that Fremantle have reached by giving the amount of goals and behinds their appropriate values. ","877971a6":"Lets take a closer look at Fremantle's score margin. We can do this by taking the data on a match by match basis rather than looking at the final, overall picture. To do so, we can use the 'Margin' column directly provided in the data. However, to make things easier when plotting, we need to manipulate the 'Date of Game' column.","b06c3fb9":"Above we have a dataframe detailing the performance by Fremantle when facing its AFL opponents. The table is divised so that columns with 'conceded' or 'against' in their name indicate that how that AFL team has performed against Fremantle. All others indicate Fremantle's performance against that specific oppenent. \n\nLets take a look at how many of the chances created against Fremantle each team has converted into points. ","81e20a5e":"We have seen how Fremantle performs against its opponents. What about the reserve? How do teams perform against Fremantle? \n","610626e2":"**THANK YOU**","ec8b88d2":"We can transfrom the barplot above into a heatmap to better visualise the amount of goals scored by each team from 2012 to 2020. Doing so will also give us the opportunity to more readily compare Fremantle's total to that achieved by their opponents. ","4096cc03":"We have looked at the number of goals scored by each team. Lets now turn our attention to how many behinds each team has scored and how this compares to the amount of goals scored. ","267cf301":"After 9 seasons, what teams has Fremantle managed to outscore? ","3e55e8d6":"**FREMANTLE SCORE MARGIN**","ed2425fe":"**DAY BY DAY**","1af073c7":"**FREMANTLE PERFORMANCE: GOALS AND BEHINDS**","c116c0c5":"Lets import the relevant packages that we will be using to complete the exploration and read the data. I'll begin by calling the dataframe containing the csv file df_afl. ","27a6ffb9":"From the data exploration performed, we can see that the Fremantle Dockers appear to currently be a side in what may be considered a rebuilding phase. They have enjoyed some success in the past, although not yet managing to win a Premiership, and started facing some trouble in 2016 where they won only 18% of their matches. From then on they have steadily managed to improve their win percentage to 41%. Ranking only 13th overall for goals scored and dead last for behinds scored overall, where overall is related to the time period covered by the data and not all-time, it is crucial they begin to both create and convert more scoring opportunities. ","d2362fa0":"**HOME AND AWAY**","03fb9638":"**SCORING AGAINST FREMANTLE**","809c31ef":"As is shown in the table above, Fremantle have managed to total their largest overall score against their local rivals WCE (West Coast Eagles). This total, however, was achieved by playing a total of 17  matches - 2 more compared to their second most faced and scored against opposition in PDL (Port Adelaide). \n\nFremantle seem to have struggled to affect the scoreboard the most against SYD (Sydney), with the Dockers being kept to a total score of 745 in 12 matches. Despite being a low scoring match on average, Fremantle have won 42% of matches against SYD (5 wins out of 12 games). This is a much more positive outcome compared to the win percentage held against WCE; a mere 37% with 6 wins out of 17 matches played although reaching a total score greater to that against SYD by 470 points. ","b336d3b1":"**FREMANTLE PERFORMANCE: GOALS**","958dc845":"In many sports, playing at home is seen as a great advantage. Lets see if this is true for Fremantle by analyising their winning record at home and away.\n\nIn this case, I refer to 'playing at home' as playing in your home stadium regardless to whether a team is scheduled as the home or away team. As FRM and WCE share a stadium, although FRM may be regarded as the 'away' team due to how the fixture list is designed, given that when these two teams meet FRM is playing in its home stadium, the fixture is counted as being a home match for FRM. ","9958618f":"From the plot produced above, we can see that the Fremantle Dockers have reached the Grand Final only once and, unfortunately, have lost. They appear to have an almost even split in terms of wins and losses in their first 7 rounds, with form fluctuating a lot more from R8. Lets take a closer look and find the percentage of matches won overall in each round. ","fe808e91":"We have seen how many wins and losses FRM have accumulated both at home and away. Lets now check how their performance holds on a round by round basis.","841f1d4c":"As shown above, Fremantle's best win percentage is against MLB (Melbourne). The Dockers boast a win percentage of 75% against the Demons but, in sharp contrast, have manged to overcome HTN (Hawthorn) only 17% of the time. This incredibly low win percentage is more than half of their next lowest score, held against their bitter rivals WCE (West Coast Eagles) at 35%, and shows the Hawks to be a true thorn in the Dockers' side.","b02a6429":"*The 'WinLoss' colum contains data of type object. In order more efficiently analyse it, lets convert it into numerical data. In order to do so, we can apply the map method once again and change how a loss, win and draw - or L, W, and D, as they are respectivley represented in the data - are characterised.*","4300e648":"Clearly the amount of goals and behinds a team makes depends on how good a kicking opportunity they can create. It is very uncommon for a team to score, defined here as converting a goal or a behind, from a distance greater than the 50 meter mark. As a result, can measure how effectively a team has converted their chances. I'll call this the Conversion Percentage. To do so, we can divide the amount of goals and behinds by the amount of Inside 50s - the act of running or passing the ball inside the 50m arc - each team has tallied. As the team in focus is Fremantle, lets begin with seeing what percentage of their inside 50s they have turned into points.\n\nObviously there is a limit to how effective our new variable is. Mearly entering the 50m arc does necessarily mean you are able to have a shot on goal, there is still a long way to go! Players may chose to pass the ball to a teammate that finds themselves in a more favourable position. However, the data only tells us how many times the ball crosses into the 50m arc and how many goals were scored. We cannot analyse the passes themselves as we have no way of knowing which of those were passes that moved the footy closer to the posts, we only have the amount of passes completed. As such, we will assume that a completed pass into the opposition's 50m arc presents them with a scoring opportunity.","823ca98a":"**FOCUSING ON FREMANTLE DOCKERS**","41a36c03":"Fremantle have scored a total of 2292 goals from the start of 2012 to the end of 2020. \nHow is this total distributed over this 9 year peiod and how does it compare to other teams?","78007207":"Now that we have examined the data and made the appropriate changes in order to make it easier for us to perform some analysis, lets create a new dataframe which only considers the Fremantle Dockers (previously abbreviated to FRM). ","c0d0edd4":"We have seen how the wins for Fremantle are split by round. Now lets look at how they are spread throughout the days of the week.","7fc4b988":"In terms of the Premiership Season (Round 1 through to Round 23), Fremantle has won the greatest percentage of games in Round 13 (87%) and, interestingly, has lost the most in the following round, with a win percentage of only 25%. \n\nIn the Finals Series, Fremantle boast a 100% record in the Elimination Final (EF), albeit making only 1 appearance, and have won 2 out of the 3 Qualifying Final (QF) matches they have played. Fremantle made it to the Preliminary Final (PF) on 2 occasions and in this particular round they have an even split between wins and losses. Following their PF win, they faced Hawthorn in the 2013 Grand Final but there would be no celebrations as they fell short of a first premiership title. ","c4be470d":"We can immediately see that although having played 14 more matches at home than away, Fremantle have almost the same percentage split for both matches won at home and lost away from home and matches lost at home and won away from home. It would seem that the Dockers win at home just as much as they lose away and lose at home just as much as they win away. \n\nAs a result,we can infer that Fremnatle have an overall win percentage just over 50%. Lets confirm this.","6423c036":"The scope of this notebook is to explore the data contained within the afl_stats.csv file. As there are 18 teams in the AFL, I have chosen to focus my attention to only 1 of them: the Fremantle Dockers. \n\nAlthough I do not follow the AFL, someone I live with does. Being a Dockers fan himself, a lot of their matches would be on the TV and, more often than not, I would find myself following matches that I never intended to watch in the first place. In an attempt to learn more about the sport and the team itself, I decided to use the data provided to explore the Dockers further and build a better picture of their performace over the years. ","d3551c08":"**MATCH BY MATCH MARGIN**","fd857828":"Over a time period spanning 9 seasons, Fremantle has accumulated a positive score margin against 8 teams. Their best result sees them outscoring MLB by a total of 374 points by the end of the the 2020 seson. After the same timespan, however, Fremantle are left trailing HTN (Hawthorn) by a total of 412 points. Moreover, they end the 2020 season having a negative score margin against a total of 9 teams. \n\nIt is important to note that a negative overall score margin doesn't necessarily mean that Fremantle hold a negative record (more losses than wins) against that specific opposition. A prime example of this is STK. As shown, Fremantle have an overall score margin of -49, indicating that they have conceded more points against STK than they have managed to score. However, using FRM_fullstats, we can see that out of the total matches played between the two teams, Fremantle have accumulated more wins (6 compared to STK's 5). The same is true for the matches played against PDL. Fremantle have an overall score margin of -105 but have won 8 times out of the 15 they have faced PDL. \n\nOf course, the same logic can be applied in the opposite sense. That is to say that a positive score margin does not always indicate a positive (more wins than losses) overall record against a specific opposition. For example, we see that Fremantle have a total score margin of 101 against ESS (Essendon). Nevertheless, when looking at the results of the matches played, we find that Fremantle, although outscoring their opponents from  northern Melbourne overall, have lost 2 more times than they have won; leaving them with a record of 5W-7L.   \n\nThese exeptions are obviously harder to find once the score margin grows too large in either direction. It is very difficult to hold a positive record against a team that has outscored you by a total of 412 points. It would mean losing a few games by quite literally an extraordinary amount of points, probably in the 100s, and winning others by a very small margin. Likewise, it is very unlikely to hold a negative record against a team that has been outscored by 374 points. Such a scenario implies losing by very fine margins most of the time and winning a few games by a considerably large margins. \n\nTaking from Fremantle's overall score margin against HTN and MLB, we see that they have been outscored by HTN by 412 points and hold an overall record of 2W-10L whereas they have outscored MLB by 374 points and hold an overall record of 9W-3L. ","a619ebde":"The heatmap above displays the total number of goals scored by the AFL teams each year. The color scheme used varies between blue and red, with blue indicating lower values and red higher ones. Focusing on Fremantle, we can see that until 2015 they were scoring a high amount of goals, placing them among the highest ranked teams for goals scored. However, from 2016 onwards we can see that they have been scoring considerably less goals with their best total between 2016 and 2020 trailing their pre 2016 total by more than 100 goals. \n\n2020 was a low scoring year for all teams. This is a result of every team playing fewer games compared to previous seasons due to a partial stop in the season that took place in response to the outbreak of Coronavirus around Australia and, of course, the world. ","8805c4a6":"From the simple barplot we can immediately see that Fremantle have scored the fewest amount of behinds and rank 13th for goals scored. Lets see against what teams Fremantle have scored their goals and behinds.","b641fdf7":"Displayed above are the score margins for every match played by Fremantle from the start of the 2012 season on 31st March, all the way to the final match played in the 2020 season on 20th September. Although quite messy, this plot shows what the score margin was at the end of each match and, therefore, whether a match was won, lost or drawn (a single instance of a draw can be found on May 18, 2013). \n\nThe interactive nature of Plotly makes it a lot easier to filter through each season and even compare two or more seasons. This can be achieved by clicking the labels in the legend to select and deselect seasons of interest. ","2daf3427":"Interestingly, the team which has converted entry into the 50m arc into points, whether that be a goal or a behind, most effecitently is GWS (Greater Western Sydney) with almost 50% of Inside 50s resulting into points on the board. \n\nI say this is interesting as, from FRM_fullstats, we can see that Fremantle have conceded only 427 inside 50s against GWS, their second lowest total. This is completely different compared to the case of HTN and WCE as they hold a conversion percentage of 46.8% and 45.6% respectively, having each penetrated Fremantle's 50m arc a total of 601 and 826 times. \n\nIn the case of GWS, it might be that they are more prolific against Fremantle compared to other teams. If we were to analyse the amount of goals and behinds scored given the amount of times they have an entered a different opponent's 50m arc, it is possible we might find a significantly lower conversion percentage. GWS seem to be a team, against Fremantle that is, that does not make many mistakes to improve the scoreboard when given the opportunity. HTN and WCE appear to make it inside Fremantle's 50m arc a lot more often but have been slightly less efficient at making those opportunities count. ","8620be21":"**HOUSEKEEPING**","8de694f6":"**LETS BEGIN OUR ANALYSIS BY FOCUSING ON THE MAIN MEASURE OF SUCCESS: WINS**","0065a9ee":"As we have the total number of matches played and the number of matches won each season, we can also plot Fremantle's win percentage for each season. ","6bdda82e":"We have explored how Fremantle's wins are spread. Lets now look at what bringa a win: scoring points via a goal (worth 6 points) or a behind (worth 1 point).  \n\nWhich of the two is scored is dependent on how the ball gets through the posts and which posts it goes through. For the definitions behind the terminology used you can use the AFL's official page: https:\/\/www.afl.com.au\/news\/144837\/stats-glossary-every-stat-explained\n\nLets start by looking at the amount of goals scored by each AFL team and quickly compare that to Fremantle.","3a0a00c3":"**CONVERTING CHANCES INTO POINTS**","17df876d":"Thank you for taking the time to read the notebook. I hope you have found it interesting and somewhat helpful. Please do leave a comment if you have any questions and upvote it if you have enjoyed it. ","923f3a5e":"What about the percentage of matches won by Fremantle against each AFL opposition? What does that look like?","074ca665":"From our newly created variable, we notice that although totalling their highest score against WCE, Fremantle have converted just 40.2% of the chances created within the 50m arc. This is the same percentage as that against Richmond (RCH), where they have scored 53 goals and 36 behinds less compared to those recorded against WCE and accumulated a total of 861 compared to the 1215 against WCE. As a result, we can see that Fremantle could have accumulated a larger score total over the last 9 seasons against their local rivals.\n\nWhile the conversion percentage against WCE shows a lot of missed opportunities, given that FRM reached such a high total with a considerably low conversion of times they were inside the 50m arc, that against SYD does not paint a prettier picture. Against SYD, Fremantle have only managed to score 110 goals and 85 behinds, thus reaching a total of 745 points, and have been inside SYD's 50m arc 569 times - that is more than 200 times less than the number of times inside WCE's 50m arc. This starc difference exposes SYD to be one of the hardest opposition for Fremantle in terms of both progressing the ball into the 50m arc converting a kick. ","f6ec43cc":"**ROUND BY ROUND**","f76c9adf":"It would appear that the home advantage factor holds true for Fremantle as they have won 31 more matches in their home stadium compared to when playing in their opposition's stadium. Given that Fremantle have not played an equal amount of home and away matches, lets consider how their wins and losses, both home and away, compare when considered as a percentages. "}}