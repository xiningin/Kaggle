{"cell_type":{"0886b6e9":"code","4d5dd673":"code","d95a6882":"code","df66bf6b":"code","5bc637d6":"code","239478d5":"code","a6f9e9bc":"code","8cbcf29e":"code","ec2cb66a":"code","73d4416e":"code","68244e1c":"code","0a6901d7":"code","1f46fc90":"code","63d851b5":"code","fe9deb4c":"code","86cded20":"code","82c484e9":"code","bf2c01d7":"code","5df7fc14":"code","4d56af20":"code","bafe56fe":"code","a83fa623":"code","d0c88f3e":"code","30e2465b":"code","f7b892df":"code","0118f9b2":"code","ee4999c8":"markdown","330212f8":"markdown","e1b87f5a":"markdown","2c134798":"markdown","42dfa0cc":"markdown","d2c8e7ed":"markdown","f3b0b8b3":"markdown","1f037e45":"markdown"},"source":{"0886b6e9":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n#encoding\nfrom category_encoders.ordinal import OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\n\n#model\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import f1_score","4d5dd673":"train = pd.read_csv('..\/input\/kakr-4th-competition\/train.csv')\ntest = pd.read_csv('..\/input\/kakr-4th-competition\/test.csv')\nsample_submission = pd.read_csv('..\/input\/kakr-4th-competition\/sample_submission.csv')","d95a6882":"train","df66bf6b":"target = (train['income'] != '<=50K').astype(int)","5bc637d6":"target","239478d5":"train.drop(['income'], axis = 1, inplace = True)","a6f9e9bc":"train.head()","8cbcf29e":"LE_encoder = OrdinalEncoder(list(train.columns))\ntrain_le = LE_encoder.fit_transform(train, target)\ntest_le = LE_encoder.transform(test)","ec2cb66a":"train_le.head()","73d4416e":"train.head()","68244e1c":"train.drop(['id'], axis = 1, inplace=True)\ntest.drop(['id'], axis = 1, inplace=True)","0a6901d7":"train.drop(['relationship'], axis = 1, inplace=True)\ntest.drop(['relationship'], axis = 1, inplace=True)","1f46fc90":"train","63d851b5":"X_train, X_valid, y_train, y_valid = train_test_split(train_le, target, \n                                                          test_size=0.3,\n                                                          random_state=202,\n                                                          shuffle=True,\n                                                          stratify=target)","fe9deb4c":"X_train","86cded20":"X_valid","82c484e9":"dc_tree = DecisionTreeClassifier()\ndc_tree.fit(X_train, y_train)","bf2c01d7":"sample_submission['prediction'] = dc_tree.predict(test_le).astype(int)\nsample_submission.to_csv('submission.csv', index = False)","5df7fc14":"dc_tree = DecisionTreeClassifier(max_depth = 7)\ndc_tree.fit(X_train, y_train)\ny_pred = dc_tree.predict(X_valid)\nprint(\"Decision Tree accuracy : %.4f\"%np.mean(y_pred==y_valid))","4d56af20":"rf = RandomForestClassifier(max_depth=7)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_valid)\nprint(\"Random Forest accuracy : %.4f\"%np.mean(y_pred==y_valid))","bafe56fe":"svc = SVC()\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_valid)\nprint(\"SVC accuracy : %.4f\"%np.mean(y_pred == y_valid))","a83fa623":"LE_encoder.cols","d0c88f3e":"train.info()","30e2465b":"for col in train.columns:\n    if train[col].dtype == object:\n        values = train[col].unique()\n        print('==', col, len(values), '==')\n        #print(train[i].drop_duplicates())\n        print('\\n'.join(values))\n        #print(train[col].value_counts())\n        print()","f7b892df":"for i in train['education'].drop_duplicates():\n    print(i)","0118f9b2":"for i in train['education_num'].drop_duplicates(), train['education'].drop_duplicates():\n    print(i)","ee4999c8":"train.drop(['race'], axis = 1, inplace=True)\ntest.drop(['race'], axis = 1, inplace=True)","330212f8":"## Support Vector Machine","e1b87f5a":"## other encoding","2c134798":"## Random Forest","42dfa0cc":"# Base Line","d2c8e7ed":"## Decision Tree","f3b0b8b3":"# feature engineering","1f037e45":"[ordinal encoder](https:\/\/www.google.com\/search?sxsrf=ALeKk03xy0_8s9b2nTVCmrIpuHX8sTut2w:1606278488553&q=ordinalencoder&spell=1&sa=X&ved=2ahUKEwiBtOHV7ZztAhUBE4gKHUo5DmgQBSgAegQIBRA0&biw=755&bih=660&dpr=1.25)"}}