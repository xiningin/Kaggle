{"cell_type":{"a2090c39":"code","d8bbe500":"code","cfea6b80":"code","5f27f119":"code","be01726c":"code","229372a3":"code","2901f0a6":"code","39d598e0":"code","04c2bdac":"code","e39e0f6f":"code","f34917f5":"code","20a9babe":"code","4eea6022":"code","fee4f848":"code","a8f2cdc5":"code","fe8c200f":"code","18e6f749":"code","a41bc9f2":"code","5928f3ea":"code","49ae6565":"code","171f1c08":"code","39df672f":"code","b76ba30b":"code","c43089e8":"code","84bfd7cc":"code","02d52a10":"code","65b91f3c":"code","471c5630":"code","ac038cd4":"markdown","b890edcc":"markdown","de52837b":"markdown","fa019052":"markdown","34ca81e1":"markdown","b539d0e5":"markdown","b8834ea7":"markdown","89d49c30":"markdown","cc28359b":"markdown","e0755986":"markdown","adbb5212":"markdown","70866f2a":"markdown","8825d3f9":"markdown","01be21bf":"markdown","cb38ca50":"markdown","0359d85f":"markdown","4910d5de":"markdown","9b158ecd":"markdown","33428448":"markdown"},"source":{"a2090c39":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d8bbe500":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nimport pandas_profiling as pp\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,accuracy_score,roc_curve,classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom mlxtend.classifier import StackingCVClassifier","cfea6b80":"#Reading the dataset\ndf = pd.read_csv('\/kaggle\/input\/heartdisease-dataset\/processed.cleveland.csv')\ndf.info()\ndf.head()","5f27f119":"df.columns = ['Age', 'Gender', 'ChestPain', 'RestingBloodPressure', 'Cholestrol', 'FastingBloodSugar', 'RestingECG', 'MaxHeartRateAchivied',\n       'ExerciseIndusedAngina', 'Oldpeak', 'Slope', 'MajorVessels', 'Thalassemia', 'Target']","be01726c":"df.head()","229372a3":"#Finding the special characters in the data frame\ndf.isin(['?']).sum(axis=0)","2901f0a6":"#Replacing the special character to nan and then drop the columns\ndf['MajorVessels'] = df['MajorVessels'].replace('?',np.nan)\ndf['Thalassemia'] = df['Thalassemia'].replace('?',np.nan)\n#Dropping the NaN rows now \ndf.dropna(how='any',inplace=True)","39d598e0":"bg_color = (0.25, 0.25, 0.25)\nsns.set(rc={\"font.style\":\"normal\",\n            \"axes.facecolor\":bg_color,\n            \"figure.facecolor\":bg_color,\n            \"text.color\":\"white\",\n            \"xtick.color\":\"white\",\n            \"ytick.color\":\"white\",\n            \"axes.labelcolor\":\"white\",\n            \"axes.grid\":False,\n            'axes.labelsize':25,\n            'figure.figsize':(10.0,5.0),\n            'xtick.labelsize':15,\n            'ytick.labelsize':10})","04c2bdac":"plt.figure(figsize=(12,12))\ncorrelation_matrix = df.corr()\n\nax = sns.heatmap(\n    correlation_matrix, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(30, 150, n=500),\n    square=True,\n    annot=True,\n)\n\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n)\nax.set_title(\"Correlation Plot\");","e39e0f6f":"df.nunique()","f34917f5":"y = df[\"Target\"]\nX = df.drop('Target',axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state = 0)","20a9babe":"print(y_test.unique())\nCounter(y_train)\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","4eea6022":"# Logistic Regression\nLR = LogisticRegression()\nLR.fit(X_train, y_train)\ny_pred = LR.predict(X_test)\nscore_LR = LR.score(X_test,y_test)\nlr_conf_matrix = confusion_matrix(y_test, y_pred)\nprint(\"confussion matrix\")\nprint(lr_conf_matrix)\nprint('The accuracy of the Logistic Regression model is', score_LR)\nprint(classification_report(y_test, y_pred))\ncm = confusion_matrix(y_test,y_pred)\nsns.heatmap(cm,annot=True);","fee4f848":"# Support Vector Classifier (SVM\/SVC)\nsvc = SVC(gamma=0.22)\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)\nscore_svc = svc.score(X_test,y_test)\nlr_conf_matrix = confusion_matrix(y_test, y_pred)\nprint(\"confussion matrix\")\nprint(lr_conf_matrix)\nprint('The accuracy of SVC model is', score_svc)\nprint(classification_report(y_test, y_pred))\ncm = confusion_matrix(y_test,y_pred)\nsns.heatmap(cm,annot=True);","a8f2cdc5":"# Random Forest Classifier\nRF = RandomForestClassifier()\nRF.fit(X_train, y_train)\ny_pred = RF.predict(X_test)\nscore_RF = RF.score(X_test,y_test)\nlr_conf_matrix = confusion_matrix(y_test, y_pred)\nprint(\"confussion matrix\")\nprint(lr_conf_matrix)\nprint('The accuracy of the Random Forest Model is', score_RF)\nprint(classification_report(y_test, y_pred))\ncm = confusion_matrix(y_test,y_pred)\nsns.heatmap(cm,annot=True);","fe8c200f":"# Decision Tree\nDT = DecisionTreeClassifier()\nDT.fit(X_train,y_train)\ny_pred = DT.predict(X_test)\nscore_DT = DT.score(X_test,y_test)\nlr_conf_matrix = confusion_matrix(y_test, y_pred)\nprint(\"confussion matrix\")\nprint(lr_conf_matrix)\nprint(\"The accuracy of the Decision tree model is \",score_DT)\nprint(classification_report(y_test, y_pred))\ncm = confusion_matrix(y_test,y_pred)\nsns.heatmap(cm,annot=True);","18e6f749":"# Gaussian Naive Bayes\nGNB = GaussianNB()\nGNB.fit(X_train, y_train)\ny_pred = GNB.predict(X_test)\nscore_GNB = GNB.score(X_test,y_test)\nlr_conf_matrix = confusion_matrix(y_test, y_pred)\nprint(\"confussion matrix\")\nprint(lr_conf_matrix)\nprint('The accuracy of Gaussian Naive Bayes model is', score_GNB)\nprint(classification_report(y_test, y_pred))\ncm = confusion_matrix(y_test,y_pred)\nsns.heatmap(cm,annot=True);","a41bc9f2":"# K-Nearest Neighbors\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nscore_knn = knn.score(X_test,y_test)\nlr_conf_matrix = confusion_matrix(y_test, y_pred)\nprint(\"confussion matrix\")\nprint(lr_conf_matrix)\nprint('The accuracy of the KNN Model is',score_knn)\nprint(classification_report(y_test, y_pred))\ncm = confusion_matrix(y_test,y_pred)\nsns.heatmap(cm,annot=True);","5928f3ea":"model_ev = pd.DataFrame({'Model': ['Logistic Regression','Naive Bayes','Random Forest',\n                    'K-Nearest Neighbour','Decision Tree','Support Vector Machine'], 'Accuracy': [score_LR*100,\n                    score_GNB*100,score_RF*100,score_knn*100,score_DT*100,score_svc*100]})\nmodel_ev","49ae6565":"typical_angina_cp = [k for k in df['ChestPain'] if k ==0]\natypical_angina_cp = [k for k in df['ChestPain'] if k ==1]\nnon_anginal_cp = [k for k in df['ChestPain'] if k ==2]\nnone_cp = [k for k in df['ChestPain'] if k ==3]\n\ntypical_angina_cp_total = len(typical_angina_cp)*100\/len(df)\natypical_angina_cp_total = len(atypical_angina_cp)*100\/len(df)\nnon_anginal_cp_total = len(non_anginal_cp)*100\/len(df)\nnone_cp_total = len(none_cp)*100\/len(df)\n\nlabels=['Typical angina','Atypical angina','Non-anginal','Asymptomatic']\nvalues = [typical_angina_cp_total,atypical_angina_cp_total,non_anginal_cp_total,none_cp_total]\n\nplt.pie(values,labels=labels,autopct='%1.1f%%')\n\nplt.title(\"Chest Pain Type Percentage\")    \nplt.show()","171f1c08":"heart=[]\nfor k in df['Target']:\n    if k == 0:\n        heart.append('Healthy Heart')\n    elif k == 1:\n        heart.append('Heart Disease_1')\n    elif k == 2:\n        heart.append(\"Heart Disease_2\")\n    elif k == 3:\n        heart.append(\"Heart Disease_3\")\n    elif k == 4:\n        heart.append(\"Heart Disease_4\")","39df672f":"ax = sns.countplot(x='Gender',hue=heart,data=df,palette='mako_r')\n\nplt.title(\"Heart-Health Vs Gender\")    \nplt.ylabel(\"\")\nplt.yticks([])\nplt.xlabel(\"\")\n\nfor p in ax.patches:\n    ax.annotate(p.get_height(), (p.get_x()+0.15, p.get_height()+1))\nax.set_xticklabels(['Male','Female']);","b76ba30b":"plt.title(\"Heart-Health Vs Chest Pain Type\")\n    \nax = sns.countplot(x='ChestPain',hue=heart,data=df,palette='Set1')\n\nplt.ylabel(\"\")\nplt.yticks([])\nplt.xlabel(\"\")\nfor p in ax.patches:\n    ax.annotate(p.get_height(), (p.get_x()+0.15, p.get_height()+0.5))","c43089e8":"age_group=[]\nfor k in df['Age']:\n    if (k >=29) & (k<40):\n        age_group.append(0)\n    elif (k >=40)&(k<55):\n        age_group.append(1)\n    else:\n        age_group.append(2)\ndf['Age-Group'] = age_group\nplt.title(\"Heart-Health Vs Age group\")\nax = sns.countplot(x=age_group,hue=heart,palette='bwr')\n\nplt.ylabel(\"\")\nplt.yticks([])\nplt.xlabel(\"\")\nfor p in ax.patches:\n    ax.annotate(p.get_height(), (p.get_x()+0.15, p.get_height()+0.5))\n    \nax.set_xticklabels(['Young (29-40)','Mid-Age(40-55)','Old-Age(>55)']);","84bfd7cc":"ax = sns.countplot(x='FastingBloodSugar',data=df)\nplt.title(\"Fasting Blood Sugar\")\nplt.ylabel(\"\")\nplt.yticks([])\nplt.xlabel(\"\")\n\nfor p in ax.patches:\n    ax.annotate(p.get_height(), (p.get_x()+0.35, p.get_height()+0.5))\nax.set_xticklabels([\"Fasting Blood Sugar < 120 mg\/dl\",\"Fasting Blood Sugar > 120 mg\/dl\"]);","02d52a10":"serum_chol=[]\nfor k in df['Cholestrol']:\n    if k > 200:\n        serum_chol.append(1) #not healthy\n    else:\n        serum_chol.append(0) #healthy\n\nax = sns.countplot(x=serum_chol,palette='bwr')\n\nplt.title(\"Serum Cholestrol\")\nplt.ylabel(\"\")\nplt.yticks([])\nplt.xlabel(\"\")\n\nfor p in ax.patches:\n    ax.annotate(p.get_height(), (p.get_x()+0.35, p.get_height()+0.5))\nax.set_xticklabels([\"Serum Cholestrol > 200 mg\/dL\",\"Serum Cholestrol < 200 mg\/dL\"]);","65b91f3c":"bp=[]\nfor k in df['RestingBloodPressure']:\n    if (k > 130):\n        bp.append(1) #high bp\n    else:\n        bp.append(0) #normal\n\nax = sns.countplot(x=bp,palette='Set3')\n\nplt.title(\"Resting Blood Pressure Count\")\nplt.ylabel(\"\")\nplt.yticks([])\nplt.xlabel(\"\")\n\nfor p in ax.patches:\n    ax.annotate(p.get_height(), (p.get_x()+0.35, p.get_height()+0.5))\n    \nax.set_xticklabels([\"Normal BP\",\"Abnormal BP\"]);","471c5630":"(df[\n     (df['Age'] > 40) & \n     (df['ChestPain'] == 0) &\n     (df['Cholestrol'] >=250) &\n     (df['RestingBloodPressure'] > 120) &\n     (df['Thalassemia']==2) &\n     (df['RestingECG']==1) &\n     (df['ExerciseIndusedAngina']==0) &\n    (df['MaxHeartRateAchivied']>100)]\n    )","ac038cd4":"#Decision Tree","b890edcc":"#Cholestrol","de52837b":"Only 14 attributes used:\n1. age: age in years\n2. sex: sex (1 = male; 0 = female)\n3. cp: chest pain type \u2014 1: typical angina, 2: atypical angina, 3: non-anginal pain, 4: asymptomatic\n4. trestbps: resting blood pressure (in mm Hg on admission to the hospital)\n5. chol: serum cholesterol in mg\/dl\n6. fbs: (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n7. restecg: resting electrocardiographic results \u2014 0: normal, 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV), 2: showing probable or definite left ventricular hypertrophy by Estes\u2019 criteria\n8. thalach: maximum heart rate achieved\n9. exang: exercise-induced angina (1 = yes; 0 = no)\n10. oldpeak = ST depression induced by exercise relative to rest\n11. slope: the slope of the peak exercise ST-segment \u2014 1: upsloping, 2: flat, 3: downsloping\n12. ca: number of major vessels (0\u20133) colored by fluoroscopy\n13. thal: 3 = normal; 6 = fixed defect; 7 = reversible defect\n14. target: diagnosis of heart disease (angiographic disease status) \u2014 0: < 50% diameter narrowing, 1: > 50% diameter narrowing","fa019052":"#Gaussian Naive Bayes","34ca81e1":"#K-Nearest Neighbors","b539d0e5":"#FastingBloodSugar","b8834ea7":"#Model preparation","89d49c30":"#Logistic Regression","cc28359b":"#A supervised learning based model for the following Heart disease data","e0755986":"#Healthy Heart or Heart Disease","adbb5212":"#Correlation Plot of all the data","70866f2a":"#Unique Values in each column","8825d3f9":"#Different types of Chest Pain","01be21bf":"#Random Forest Classifier","cb38ca50":"#RestingBloodPressure","0359d85f":"#Heart-Health Vs Chest Pain Type","4910d5de":"#Heart-Health Vs Age group","9b158ecd":"#Heart Attacks in Male and Female","33428448":"#Support Vector Classifier(SVM)"}}