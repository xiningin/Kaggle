{"cell_type":{"d96903ed":"code","b725055d":"code","d797e4a4":"code","1c18c17b":"code","8550d564":"code","e7f98bc0":"code","be1c538d":"code","30bf88ce":"code","2079d9cc":"code","43a239ac":"code","1ee37534":"code","1c8d7581":"code","433a2c32":"code","bab8a23b":"code","3799d383":"code","414cbd2e":"code","ab0971fb":"code","dfc494bc":"code","c32f1e4e":"code","414e9e95":"code","69319f5b":"code","4ef8ae64":"code","030ce370":"code","142891a7":"code","3ede1fb3":"code","2992fbd9":"code","3ccf6f2a":"code","803c5825":"code","506fd32e":"code","787208de":"code","95799a8e":"code","dc74da56":"code","3e43367d":"code","f4e51914":"markdown","75979db8":"markdown","62035d5b":"markdown","1649a6d7":"markdown","ad85acb8":"markdown","ee18d3bb":"markdown","1029b989":"markdown","5151e2b2":"markdown","b7fbc54f":"markdown","ecc2f858":"markdown"},"source":{"d96903ed":"!pip install imutils\n","b725055d":"import numpy as np \nimport pandas as pd \nfrom plotly.offline import init_notebook_mode, iplot\nimport os\nfrom os import listdir\nimport plotly.graph_objs as go\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport imutils    \nimport itertools\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom tensorflow.keras.models import Model,load_model\nfrom tensorflow.keras.layers import Conv2D,Input,ZeroPadding2D,BatchNormalization,Flatten,Activation,Dense,MaxPooling2D\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle #shuffling the data improves the model\n","d797e4a4":"image_dir=\"..\/input\/brain-mri-images-for-brain-tumor-detection\/\"","1c18c17b":"os.makedirs('..\/output\/kaggle\/working\/augmented-images', exist_ok = True)\nos.makedirs('..\/output\/kaggle\/working\/augmented-images\/yes', exist_ok = True)\nos.makedirs('..\/output\/kaggle\/working\/augmented-images\/no', exist_ok = True)\n\naugmented_data_path ='..\/output\/kaggle\/working\/augmented-images\/'\n\naugmented_yes =augmented_data_path+'yes'\naugmented_no = augmented_data_path+'no'\n\nIMG_SIZE = (224,224)","8550d564":"def augment_data(file_dir, n_generated_samples, save_to_dir):\n    data_gen = ImageDataGenerator(rotation_range=10, \n                                  width_shift_range=0.1, \n                                  height_shift_range=0.1, \n                                  shear_range=0.1, \n                                  brightness_range=(0.3, 1.0),\n                                  horizontal_flip=True, \n                                  vertical_flip=True, \n                                  fill_mode='nearest'\n                                 )\n\n    for filename in listdir(file_dir):\n        image = cv2.imread(file_dir + '\/' + filename)\n        # reshape the image\n        image = image.reshape((1,)+image.shape)\n        save_prefix = 'aug_' + filename[:-4]\n        i=0\n        for batch in data_gen.flow(x=image, batch_size=1, save_to_dir=save_to_dir,save_prefix=save_prefix, save_format='jpg'):\n                i += 1\n                if i > n_generated_samples:\n                    break","e7f98bc0":"\n\ndir = os.listdir('..\/output\/kaggle\/working\/augmented-images\/yes') \n\nif len(dir) == 0: \n\n    # augment data for the examples with label equal to 'yes' representing tumurous examples\n    augment_data(file_dir=image_dir+'yes',n_generated_samples=6, save_to_dir=augmented_data_path+'yes')\n    # augment data for the examples with label equal to 'no' representing non-tumurous examples\n    augment_data(file_dir=image_dir+'no', n_generated_samples=9, save_to_dir=augmented_data_path+'no')\nelse:\n    print(len(dir))","be1c538d":"def load_data(dir_list):\n\n    # load all images in a directory\n    X = []\n    y = []\n#     image_width, image_height = image_size\n    \n    for directory in dir_list:\n        for filename in listdir(directory):\n            image = cv2.imread(directory+'\/'+filename)\n#             image = crop_brain_contour(image, plot=False)\n#             image = cv2.resize(image, dsize=(image_width, image_height), interpolation=cv2.INTER_CUBIC)\n#             # normalize values\n#             image = image \/ 255.\n#             # convert image to numpy array and append it to X\n            X.append(image)\n            # append a value of 1 to the target array if the image\n            # is in the folder named 'yes', otherwise append 0.\n            if directory[-3:] == 'yes':\n                y.append([1])\n            else:\n                y.append([0])\n                \n    X = np.array(X)\n    y = np.array(y)\n    \n    # Shuffle the data\n    X, y = shuffle(X, y)\n    \n    print(f'Number of examples is: {len(X)}')\n    print(f'X shape is: {X.shape}')\n    print(f'y shape is: {y.shape}')\n    \n    return X, y","30bf88ce":"def plot_samples(X, y, labels_dict, n=50):\n    \"\"\"\n    Creates a gridplot for desired number of images (n) from the specified set\n    \"\"\"\n    for index in range(len(labels_dict)):\n        imgs = X[np.argwhere(y == index)][:n]\n        j = 10\n        i = int(n\/j)\n\n        plt.figure(figsize=(15,6))\n        c = 1\n        for img in imgs:\n            plt.subplot(i,j,c)\n            plt.imshow(img[0])\n\n            plt.xticks([])\n            plt.yticks([])\n            c += 1\n        plt.suptitle('Tumor: {}'.format(labels_dict[index]))\n        plt.show()","2079d9cc":"\nX_train, y_train = load_data([augmented_yes, augmented_no])","43a239ac":"plot_samples(X_train, y_train, ['yes','no'], 20)","1ee37534":"def crop_brain_contour(image, plot=False):\n    \n    # Convert the image to grayscale, and blur it slightly\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    gray = cv2.GaussianBlur(gray, (5, 5), 0)\n    \n    thresh = cv2.threshold(gray, 45, 255, cv2.THRESH_BINARY)[1]\n    thresh = cv2.erode(thresh, None, iterations=2)\n    thresh = cv2.dilate(thresh, None, iterations=2)\n\n    # Find contours in thresholded image, then grab the largest one\n    cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    cnts = imutils.grab_contours(cnts)\n    c = max(cnts, key=cv2.contourArea)\n    # extreme points\n    extLeft = tuple(c[c[:, :, 0].argmin()][0])\n    extRight = tuple(c[c[:, :, 0].argmax()][0])\n    extTop = tuple(c[c[:, :, 1].argmin()][0])\n    extBot = tuple(c[c[:, :, 1].argmax()][0])\n    \n    # crop new image out of the original image using the four extreme points (left, right, top, bottom)\n    new_image = image[extTop[1]:extBot[1], extLeft[0]:extRight[0]]            \n\n    if plot:\n        plt.figure()\n        plt.subplot(1, 2, 1)\n        plt.imshow(image)\n        plt.tick_params(axis='both', which='both', top=False, bottom=False, left=False, right=False,labelbottom=False, labeltop=False, labelleft=False, labelright=False)\n        plt.title('Original Image')\n        plt.subplot(1, 2, 2)\n        plt.imshow(new_image)\n        plt.tick_params(axis='both', which='both',top=False, bottom=False, left=False, right=False,labelbottom=False, labeltop=False, labelleft=False, labelright=False)\n        plt.title('Cropped Image')\n        plt.show()\n    \n    return new_image","1c8d7581":"img = cv2.imread('..\/input\/brain-mri-images-for-brain-tumor-detection\/brain_tumor_dataset\/yes\/Y108.jpg')\nimg = cv2.resize(\n            img,\n            dsize=IMG_SIZE,\n            interpolation=cv2.INTER_CUBIC\n        )\ngray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\ngray = cv2.GaussianBlur(gray, (5, 5), 0)\n\n# threshold the image, then perform a series of erosions +\n# dilations to remove any small regions of noise\nthresh = cv2.threshold(gray, 45, 255, cv2.THRESH_BINARY)[1]\nthresh = cv2.erode(thresh, None, iterations=2)\nthresh = cv2.dilate(thresh, None, iterations=2)\n\n# find contours in thresholded image, then grab the largest one\ncnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\ncnts = imutils.grab_contours(cnts)\nc = max(cnts, key=cv2.contourArea)\n\n# find the extreme points\nextLeft = tuple(c[c[:, :, 0].argmin()][0])\nextRight = tuple(c[c[:, :, 0].argmax()][0])\nextTop = tuple(c[c[:, :, 1].argmin()][0])\nextBot = tuple(c[c[:, :, 1].argmax()][0])\n\n# add contour on the image\nimg_cnt = cv2.drawContours(img.copy(), [c], -1, (0, 255, 255), 4)\n\n# add extreme points\nimg_pnt = cv2.circle(img_cnt.copy(), extLeft, 8, (0, 0, 255), -1)\nimg_pnt = cv2.circle(img_pnt, extRight, 8, (0, 255, 0), -1)\nimg_pnt = cv2.circle(img_pnt, extTop, 8, (255, 0, 0), -1)\nimg_pnt = cv2.circle(img_pnt, extBot, 8, (255, 255, 0), -1)\n\n# crop\nADD_PIXELS = 0\nnew_img = img[extTop[1]-ADD_PIXELS:extBot[1]+ADD_PIXELS, extLeft[0]-ADD_PIXELS:extRight[0]+ADD_PIXELS].copy()","433a2c32":"plt.figure(figsize=(15,6))\nplt.subplot(141)\nplt.imshow(img)\nplt.xticks([])\nplt.yticks([])\nplt.title('Step 1. Get the original image')\nplt.subplot(142)\nplt.imshow(img_cnt)\nplt.xticks([])\nplt.yticks([])\nplt.title('Step 2. Find the biggest contour')\nplt.subplot(143)\nplt.imshow(img_pnt)\nplt.xticks([])\nplt.yticks([])\nplt.title('Step 3. Find the extreme points')\nplt.subplot(144)\nplt.imshow(new_img)\nplt.xticks([])\nplt.yticks([])\nplt.title('Step 4. Crop the image')\nplt.show()","bab8a23b":"def Croping_Data(train):\n\n    # load all images in a directory\n    X = []\n    y = []\n    \n    for img in train:\n        image = crop_brain_contour(img, plot=False)\n        X.append(image)\n                \n    X = np.array(X)\n    \n    return X","3799d383":"X = Croping_Data(X_train)","414cbd2e":"plot_samples(X, y_train, ['yes','no'], 20)","ab0971fb":"def Resize_Data(train):\n\n    # load all images in a directory\n    X = []\n    y = []\n    \n    IMG_WIDTH, IMG_HEIGHT = (240, 240)\n    \n    for img in train:\n        image = cv2.resize(img, dsize=(IMG_WIDTH, IMG_HEIGHT), interpolation=cv2.INTER_CUBIC)\n        # normalize values\n        image = image \/ 255.\n        # convert image to numpy array and append it to X\n        X.append(image)\n                \n    X = np.array(X)\n    \n    return X","dfc494bc":"augmented_yes =augmented_data_path+'yes'\naugmented_no = augmented_data_path+'no'\n\nIMG_WIDTH, IMG_HEIGHT = (240, 240)\n\nX = Resize_Data(X)\ny = y_train\n\n","c32f1e4e":"plot_samples(X, y_train, ['yes','no'],10)","414e9e95":"def split_data(X, y, test_size=0.2):\n       \n    X_train, X_test_val, y_train, y_test_val = train_test_split(X, y, test_size=test_size)\n    X_test, X_val, y_test, y_val = train_test_split(X_test_val, y_test_val, test_size=0.5)\n    \n    return X_train, y_train, X_val, y_val, X_test, y_test","69319f5b":"X_train, y_train, X_val, y_val, X_test, y_test = split_data(X, y, test_size=0.3)","4ef8ae64":"print (\"number of training examples = \" + str(X_train.shape[0]))\nprint (\"number of validation examples = \" + str(X_val.shape[0]))\nprint (\"number of test examples = \" + str(X_test.shape[0]))","030ce370":"y = dict()\ny[0] = []\ny[1] = []\nfor set_name in (y_train, y_val, y_test):\n    y[0].append(np.sum(set_name == 0))\n    y[1].append(np.sum(set_name == 1))\n\ntrace0 = go.Bar(\n    x=['Train Set', 'Validation Set', 'Test Set'],\n    y=y[0],\n    name='No',\n    marker=dict(color='#33cc33'),\n    opacity=0.7\n)\ntrace1 = go.Bar(\n    x=['Train Set', 'Validation Set', 'Test Set'],\n    y=y[1],\n    name='Yes',\n    marker=dict(color='#ff3300'),\n    opacity=0.7\n)\ndata = [trace0, trace1]\nlayout = go.Layout(\n    title='Count of classes in each set',\n    xaxis={'title': 'Set'},\n    yaxis={'title': 'Count'}\n)\nfig = go.Figure(data, layout)\niplot(fig)","142891a7":"def build_model(input_shape):\n    X_input = Input(input_shape) \n    X = ZeroPadding2D((2, 2))(X_input) \n    \n    X = Conv2D(32, (7, 7), strides = (1, 1))(X)\n    X = BatchNormalization(axis = 3, name = 'bn0')(X)\n    X = Activation('relu')(X) \n    \n    X = MaxPooling2D((4, 4))(X) \n    X = MaxPooling2D((4, 4))(X) \n    X = Flatten()(X) \n    X = Dense(1, activation='sigmoid')(X) \n    model = Model(inputs = X_input, outputs = X)\n    \n    return model","3ede1fb3":"IMG_SHAPE = (IMG_WIDTH, IMG_HEIGHT, 3)\nmodel=build_model(IMG_SHAPE)\nmodel.summary()","2992fbd9":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit(x=X_train, y=y_train, batch_size=32, epochs=22, validation_data=(X_val, y_val))","3ccf6f2a":"history = model.history.history","803c5825":"def plot_metrics(history):\n    \n    train_loss = history['loss']\n    val_loss = history['val_loss']\n    train_acc = history['accuracy']\n    val_acc = history['val_accuracy']\n    \n    # Loss\n    plt.figure()\n    plt.plot(train_loss, label='Training Loss')\n    plt.plot(val_loss, label='Validation Loss')\n    plt.title('Loss')\n    plt.legend()\n    plt.show()\n    \n    # Accuracy\n    plt.figure()\n    plt.plot(train_acc, label='Training Accuracy')\n    plt.plot(val_acc, label='Validation Accuracy')\n    plt.title('Accuracy')\n    plt.legend()\n    plt.show()","506fd32e":"plot_metrics(history)","787208de":"\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.figure(figsize = (6,6))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90)\n    plt.yticks(tick_marks, classes)\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    cm = np.round(cm,2)\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.show()","95799a8e":"labels = ['yes','no']\n# validate on val set\npredictions = model.predict(X_val)\npredictions = [1 if x>0.5 else 0 for x in predictions]\n\naccuracy = accuracy_score(y_val, predictions)\nprint('Val Accuracy = %.2f' % accuracy)\n\nconfusion_mtx = confusion_matrix(y_val, predictions) \ncm = plot_confusion_matrix(confusion_mtx, classes = labels, normalize=False)","dc74da56":"# validate on val set\npredictions = model.predict(X_test)\npredictions = [1 if x>0.5 else 0 for x in predictions]\n\naccuracy = accuracy_score(y_test, predictions)\nprint('Val Accuracy = %.2f' % accuracy)\n\nconfusion_mtx = confusion_matrix(y_test, predictions) \ncm = plot_confusion_matrix(confusion_mtx, classes = labels, normalize=False)","3e43367d":"for i in range(5):\n    plt.figure()\n    plt.imshow(X_test[i])\n    plt.xticks([])\n    plt.yticks([])\n    plt.title(f'Actual class: {y_test[i]}\\nPredicted class: {predictions[i]}')\n    plt.show()","f4e51914":"### Making directory for augmented images","75979db8":"**A directory is formed using os.makedirs() function for augmented images(yes\/ no). Note- custom directory is obtained in outputs folder.**","62035d5b":"## After applying the cropping function","1649a6d7":"### Loading Images","ad85acb8":"### Helper Functions","ee18d3bb":"## Preprocessing the data\n\nIn order to crop the specific part of the image containing tumour,cropping technique via OpenCv is used, the details can be found here.[How to find extreme points in OpenCv?](https:\/\/www.pyimagesearch.com\/2016\/04\/11\/finding-extreme-points-in-contours-with-opencv\/)","1029b989":"## Visualization of data","5151e2b2":"### Installing dependencies for preprocessing of images ","b7fbc54f":"### Plotting of aaccuracy","ecc2f858":"## Augmentation of images \n**About the data:\nThe dataset contains 2 folders: yes and no which contains 253 Brain MRI Images. The folder yes contains 155 Brain MRI Images that are tumorous andno contains 98 Brain MRI Images that are non-tumorous.**"}}