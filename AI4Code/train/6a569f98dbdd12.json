{"cell_type":{"1536f3c2":"code","1644e8c4":"code","e8d45dbd":"code","f4021e5f":"code","52fc6742":"code","ddb1d39a":"code","53bb0a28":"code","d8046202":"code","4d6f5553":"code","754c2bd7":"code","85b83bc9":"code","d77127bc":"code","a84fab3f":"code","e07c4a67":"code","0a246093":"code","6656d306":"code","b40ed302":"code","bb235d5b":"code","074ced76":"code","f7a9afbc":"code","326bb371":"code","f8d9c6a9":"code","07eaaf31":"code","afdc1ae1":"code","9aba3dcb":"code","8380ab58":"markdown","e3264400":"markdown","92bff579":"markdown","95a9c374":"markdown","5f7f6303":"markdown","a4ff23f9":"markdown","59bb018a":"markdown","59fbd358":"markdown","ef5501b2":"markdown","4c3e1cd2":"markdown","84be90f5":"markdown","cbd31bf6":"markdown","f7b8ac05":"markdown","b696fcd5":"markdown","bdf64582":"markdown","a886f0c6":"markdown","36dbe54d":"markdown","58d64828":"markdown","3e72d436":"markdown","9b941766":"markdown","cbb67311":"markdown","60107f4e":"markdown","1880fb2d":"markdown","0079affb":"markdown"},"source":{"1536f3c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1644e8c4":"!pip install wget\n","e8d45dbd":"import pandas as pd \nimport numpy as np\n\n#visualizaci\u00f3n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\n\nimport wget\nimport os\n\nfrom scipy.optimize import curve_fit","f4021e5f":"# Function that updates the data downloading it forn internet and formats it, Leaving it ready to work\n# We call it like this:\n# covid = get_coronavirus_data ()\ndef get_coronavirus_data ():\n    urls=['https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv',\n          'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv',\n          'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv']\n    ficheros=[\"time_series_covid19_confirmed_global.csv\",\n              \"time_series_covid19_deaths_global.csv\",\n              \"time_series_covid19_recovered_global.csv\"]\n    for i in ficheros:\n        if os.path.exists(i):\n            os.remove(i)\n    for url in urls:\n        file_name=wget.download(url)\n    cf_df=pd.read_csv('time_series_covid19_confirmed_global.csv')\n    de_df=pd.read_csv('time_series_covid19_deaths_global.csv')\n    re_df=pd.read_csv('time_series_covid19_recovered_global.csv')\n    cf_df_trans=cf_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],\n                           value_vars=cf_df.columns[4:], \n                           var_name='Date', \n                           value_name='Confirmed')\n    de_df_trans=de_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],\n                           value_vars=de_df.columns[4:], \n                           var_name='Date', \n                           value_name='Deaths')\n    re_df_trans=re_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],\n                           value_vars=re_df.columns[4:], \n                           var_name='Date', \n                           value_name='Recovered')\n    data_0=pd.merge(cf_df_trans,de_df_trans, how='inner', on=['Province\/State', 'Country\/Region', 'Lat', 'Long','Date'])\n    data=pd.merge(data_0,re_df_trans, how='inner', on=['Province\/State', 'Country\/Region', 'Lat', 'Long','Date'])\n    data[\"Date\"]=data[\"Date\"].apply(pd.to_datetime)\n    data['Active']=data['Confirmed']-data['Deaths']-data['Recovered']\n    data.rename(columns={'Country\/Region':'Pais',\n                         'Province\/State':'Provincia',\n                         'Date':'Fecha'},inplace=True)\n    return data\n\n\n# Function to generate columns with the daily increments of the Confirmed, Deaths ... fields\n# It only does it for DataFrames filtered and only to one country\n# We call you:\n# deltac = generate_delta (covid_spain, 'Confirmed', 'DeltaC')\ndef generar_delta (datos,variable,nombre):\n    j=0\n    x0=0\n    delta=[]\n    for x in datos[variable]:\n        if (j==0):\n            x0=0\n            x1=datos.loc[j,variable]\n        else:\n            x0=datos.loc[(j-1),variable]\n            x1=datos.loc[(j),variable]\n        delta=delta+[x1-x0]\n        j+=1\n    df=pd.DataFrame(delta,columns=[nombre])\n    return df\n\n\n# We add the column Day to be able to adjust with the function, since it does not admit dates, but numbers\n# We add a sequential column for each country with the number of the day\n# We call you:\n# dias_df = genera_dia (covid_pais ['Pais']\ndef genera_dia (dato):\n    j=0\n    dias=[]\n    for x in dato:\n        if (j==0):\n            pais=x\n        if (pais==x):\n            dias=dias+[j]\n            pais=x\n        else:\n            j=0\n            pais=x\n            dias=dias+[j]\n        j+=1\n    df=pd.DataFrame(dias,columns=['Dia'])\n    return df\n\n# Exponential growth \/ decrease function with 3 parameters\n# to adjust\ndef func(x, a, b, c):\n    return  a*np.exp(b*(x - c))\n\n# Function that does exponential regression for a list of given countries and then paints it\n# its returns the adjust parameters.\ndef pintar_predicciones(datos,lista_paises,pintar,pintarbool,ndias):\n    dparam={}\n    dcov={}\n    # we make the fit to the last function\n    for x in lista_paises:\n        popt, pcov = curve_fit(func, \n                           datos[(datos['Pais']==x)]['Dia'], \n                           datos[(datos['Pais']==x)][pintar], maxfev=30000)\n        dparam[x]=popt\n        dcov[x]=pcov\n    # if pintargool is True, then we paint the fit\n    if (pintarbool):\n        dias = pd.DataFrame(np.arange(1,ndias)).rename(columns = {0:'dia'})\n        fig = go.Figure()\n        for x in lista_paises:\n            # Paint the data\n            fig.add_trace(go.Scatter(x=datos[(datos['Pais']==x)]['Dia'], \n                                 y=datos[(datos['Pais']==x)][pintar], \n                                 mode='lines+markers', name=pintar+' '+x))\n            # Paint the fit\n            fig.add_trace(go.Scatter(x=dias['dia'], \n                                 y=func(dias['dia'], *dparam[x]), \n                                 mode='lines', name='Prediccion '+x))\n        fig.show()\n    return dparam,dcov\n","52fc6742":"\ncovid=get_coronavirus_data()","ddb1d39a":"\ncovid_pais=covid.groupby(['Pais','Fecha'])[['Confirmed','Deaths','Recovered','Active']].sum().reset_index()","53bb0a28":"covid_pais.sort_values(by=['Pais','Fecha'], ascending=['False','False'],inplace=True)","d8046202":"\ndias_df=genera_dia(covid_pais['Pais'])","4d6f5553":"\ndias_df.shape,covid_pais.shape","754c2bd7":"\ncovid_pais=pd.concat((covid_pais,dias_df),axis=1)","85b83bc9":"\nlista_paises_pintar=['India','Brazil','Mexico','Chile','Peru','Iran','US']","d77127bc":"\nmparan,mcov=pintar_predicciones(covid_pais,lista_paises_pintar,'Confirmed',True,220)","a84fab3f":"mparan,mcov=pintar_predicciones(covid_pais,lista_paises_pintar,'Deaths',True,220)","e07c4a67":"mparan,mcov=pintar_predicciones(covid_pais,lista_paises_pintar,'Active',True,220)","0a246093":"mparan,mcov=pintar_predicciones(covid_pais,lista_paises_pintar,'Confirmed',True,220)","6656d306":"\nmparan","b40ed302":"\nparametros=pd.DataFrame(mparan)\nparametros=parametros.T.reset_index()\nparametros.drop(columns=[0,2],inplace=True)","bb235d5b":"\nparametros['TiempoTriplicar']=1\/parametros[1]\nparametros['TiempoDuplicar']=2\/(np.e*parametros[1])","074ced76":"parametros.sort_values(by='TiempoDuplicar')","f7a9afbc":"mparan,mcov=pintar_predicciones(covid_pais,\n                                covid_pais.groupby(['Pais']).size().index.to_list(),\n                                'Confirmed',False,220)","326bb371":"parametros=pd.DataFrame(mparan)\nparametros=parametros.T.reset_index()\nparametros.drop(columns=[0,2],inplace=True)","f8d9c6a9":"# Calculamos los tiempos de semicrecimiento (x3) y de duplicacion \nparametros['TiempoTriplicar']=1\/parametros[1]\nparametros['TiempoDuplicar']=2\/(np.e*parametros[1])","07eaaf31":"parametros.sort_values(by='TiempoDuplicar')","afdc1ae1":"mparan,mcov=pintar_predicciones(covid_pais,['Gambia'],'Confirmed',True,220)","9aba3dcb":"mparan,mcov=pintar_predicciones(covid_pais,['Spain'],'Confirmed',True,220)","8380ab58":"We call the function that will make us fit the exponential growth curve\nand we will paint it. First we are going to paynt the confirmed cases:","e3264400":"We calculate the half-growth (x3) and doubling times\n","92bff579":"Or for Spain:","95a9c374":"In this simple kernel we will treat in a simple and easy way the global data of the coronavirus epidemic. We will paint the data and adjust to the exponential growth cruve. We will also calculate the duplication times of the number of infected.","5f7f6303":"# We paint the growth curves","a4ff23f9":"These are the countries that show the most pronounced exponential growth of the pandemic","59bb018a":"We can do it for all countries, only that it takes a while on a normal pc:\nSo we call it with the False parameter so that it only makes the adjustments and does not paint them","59fbd358":"# Active cases:","ef5501b2":"We add the column day to all countries\nThis column goes from 1 to the last day that we have informed","4c3e1cd2":"We call the function that generates the DataFrame ready to use:","84be90f5":"Add the column with the number of the day in the pandemia:","cbd31bf6":"we can paint the curve for Gambia, for example:","f7b8ac05":"# Coronavirus pandemic easy analisys","b696fcd5":"We format a bit the parameters returned by the exponencial adjustment","bdf64582":"We check that we have the same number of rows:","a886f0c6":"We sort it by country and date, ascending both","36dbe54d":"We know from the maths, that the second parameter of the adjustment is the inverse\nof that is called the period of exponential half-growth or half-growth\nWhich in this case is the number of days in which the number of infected is multiplied by e.\nSince e is more or less 3, it is the number of days in which the number of infected triples.","58d64828":"First for confirmed cases:","3e72d436":"# Deaths cases","9b941766":"The function returns the dictionary mparan where we have\nthe value of the three parameters of the adjustment to the exponential growth \/ decrease cross for each country","cbb67311":"# Confirmed cases","60107f4e":"The first for working is to group it by countries:","1880fb2d":"In order not to paint all of them, we selected a list of countries that are still in full exponential growth\nof the pandemic. ","0079affb":"# Now we are going to calculate the duplication time:"}}