{"cell_type":{"5f58f555":"code","13acaa29":"code","5810ba4c":"code","571b3926":"code","940485bb":"code","0afa7eeb":"code","406bf538":"code","7186b1aa":"code","0f990e61":"code","2d44eb3c":"code","315df9ac":"code","078e268c":"code","853ffefa":"code","d5c44c78":"code","b5d7db85":"code","6a05dacc":"code","352dd431":"code","b667f9f6":"code","410ef098":"code","b37e6cb7":"code","77053703":"code","154ea0ca":"code","22da11a0":"code","2331d2a3":"code","eda78232":"code","5ebcbe86":"code","300475a9":"code","ac09fc79":"code","062d7d87":"code","ce9d089c":"code","8784f61c":"code","0e3bcb74":"code","23ac0c18":"code","c36316ce":"code","24e0afec":"code","ebd32954":"code","61e15700":"code","682d75d2":"code","b1d3d909":"code","cad24db7":"code","9edb1d42":"code","89bcb7ea":"code","42757b9e":"code","52f0febb":"code","baf95c0d":"code","5aa30d48":"code","05f12c4f":"code","e86294bb":"code","2e1a3272":"code","e738ec65":"code","45a6bebc":"code","75135fc9":"code","649e0850":"code","53059360":"code","a79a6bf9":"code","3f2340a4":"code","a6fdf3da":"code","5072d58a":"code","dacc0b15":"code","29bb8396":"code","12b4ed36":"code","86d39833":"code","17a54513":"code","ec0b7c6d":"code","e432b06d":"code","4a9cb44e":"code","98094c69":"code","6ee05422":"code","e7e80c25":"code","a6739682":"code","5d34daf7":"code","f650a2e0":"code","c60fc207":"code","d857833e":"code","3a0bdd9f":"code","0928ff7e":"code","37694949":"code","71af64fb":"code","e6cdcd44":"code","400c85e3":"code","83864fd3":"code","bacc82a4":"code","7c14951a":"code","acbb00fe":"code","1a79b482":"code","35a5852d":"code","85badc7a":"code","c863ba8c":"code","2153e606":"code","59cdb151":"code","21200a46":"code","64c3b9f2":"code","1b80a3a5":"code","b6d29ef4":"code","bc77ebf6":"code","352dd673":"code","8887edda":"code","b53d86db":"code","cc67cbce":"code","35d48500":"code","85ee09c5":"code","2d472607":"code","b4757a52":"markdown","e82d2d30":"markdown","dd8993c1":"markdown","c9e071a7":"markdown","56f297c7":"markdown","cec928ab":"markdown","102d9aa6":"markdown","6ca3e066":"markdown","5391b185":"markdown","9bc8929c":"markdown","8cd866e1":"markdown"},"source":{"5f58f555":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom tqdm import tqdm\ntqdm.pandas()\nimport gc\ngc.collect()\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","13acaa29":"df_train = pd.read_csv('..\/input\/train\/train.csv')\ndf_breed = pd.read_csv('..\/input\/breed_labels.csv')\ndf_color = pd.read_csv('..\/input\/color_labels.csv')\ndf_state = pd.read_csv('..\/input\/state_labels.csv')\ndf_test = pd.read_csv('..\/input\/test\/test.csv')","5810ba4c":"df_train.head()\n","571b3926":"df_breed.head()","940485bb":"df_color.head()","0afa7eeb":"df_state.head()","406bf538":"sns.countplot(df_train.AdoptionSpeed)","7186b1aa":"sns.countplot(df_train.Type)","0f990e61":"# Checking Age Distribution\nf, ax = plt.subplots(figsize=(21, 6))\nsns.distplot(df_train.Age, ax=ax)","2d44eb3c":"# Checking Age,Fee and AdoptionnSpeed correlation\nsns.heatmap(df_train[['Age', 'Fee', 'AdoptionSpeed']].corr(), annot=True)","315df9ac":"df_train.Age.describe()","078e268c":"# Since Age is skewed, We can try logarithmic transformation\nsns.distplot(np.log(df_train.Age + 0.5))","853ffefa":"# Checking put distribution of Breed1 and Breed2\nfig, ax = plt.subplots(nrows=2, ncols=1, figsize=(18,10))\nsns.distplot(df_train.Breed1, ax=ax[0])\nsns.distplot(df_train.Breed2, ax=ax[1])","d5c44c78":"df_train.Name = df_train.Name.fillna('')\ndf_test.Name = df_test.Name.fillna('')","b5d7db85":"df_train['Name'] = df_train['Name'].replace('No Name Yet', '')\ndf_test['Name'] = df_test['Name'].replace('No Name Yet', '')","6a05dacc":"df_train['name_len'] = df_train.Name.str.len()\ndf_test['name_len'] = df_test.Name.str.len()","352dd431":"df_train.name_len.head()","b667f9f6":"sns.distplot(df_train.name_len)","410ef098":"sns.heatmap(df_train[['name_len', 'AdoptionSpeed']].corr(), annot=True)","b37e6cb7":"sns.distplot(np.log(df_train.name_len + 1 - df_train.name_len.min()))","77053703":"# Gender distribution\nf, ax = plt.subplots(figsize=(21, 6))\nsns.countplot(df_train.Gender, ax=ax)","154ea0ca":"# Quantity Distribution\nf, ax = plt.subplots(figsize=(21, 6))\nsns.distplot(df_train.Quantity, ax=ax)","22da11a0":"f, ax = plt.subplots(figsize=(21, 6))\nquant_gender1 = df_train[df_train['Gender'] == 1]\nquant_gender2 = df_train[df_train['Gender'] == 2]\nquant_gender3= df_train[df_train['Gender'] == 3]\nsns.distplot(quant_gender1.Quantity, ax=ax , hist=False, rug=True)\nsns.distplot(quant_gender2.Quantity, ax=ax,  hist=False, rug=True)\nsns.distplot(quant_gender3.Quantity, ax=ax,  hist=False, rug=True)\nplt.show()","2331d2a3":"f, ax = plt.subplots(figsize=(21, 6))\nsns.countplot('Quantity',data=df_train,hue='Gender', ax=ax)","eda78232":"# Color distribution\nfig, ax = plt.subplots(nrows=3, ncols=1, figsize=(18,10))\nsns.countplot(df_train.Color1, ax=ax[0])\nsns.countplot(df_train.Color2, ax=ax[1])\nsns.countplot(df_train.Color3, ax=ax[2])","5ebcbe86":"# Maturity Size Distribution\nf, ax = plt.subplots(figsize=(21, 6))\nsns.countplot(df_train.MaturitySize, ax=ax)","300475a9":"# Furlength\nf, ax = plt.subplots(figsize=(21, 6))\nsns.countplot(df_train.FurLength, ax=ax)","ac09fc79":"# Vaccination\nf, ax = plt.subplots(figsize=(21, 6))\nsns.distplot(df_train.Vaccinated, ax=ax)","062d7d87":"fig, ax = plt.subplots(nrows=4, ncols=1, figsize=(18,10))\nsns.distplot(df_train.Sterilized, ax=ax[0])\nsns.distplot(df_train.Health, ax=ax[1])\nsns.distplot(df_train.Dewormed, ax=ax[2])\nsns.distplot(df_train.Fee, ax=ax[3])","ce9d089c":"f, ax = plt.subplots(figsize=(12, 8))\nsns.countplot(df_train.State, ax=ax)","8784f61c":"f, ax = plt.subplots(figsize=(12, 8))\nsns.distplot(df_train.Description.fillna('').str.len(), ax=ax)","0e3bcb74":"fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(18,10))\nsns.distplot(df_train.PhotoAmt, ax=ax[0])\nsns.distplot(df_train.VideoAmt, ax=ax[1])","23ac0c18":"f, ax = plt.subplots(figsize=(24, 18))\nsns.heatmap(df_train.corr(), annot=True, ax=ax)","c36316ce":"import json","24e0afec":"train_sentiment_path = '..\/input\/train_sentiment\/'\ntest_sentiment_path = '..\/input\/test_sentiment\/'\ntrain_meta_path = '..\/input\/train_metadata\/'\ntest_meta_path = '..\/input\/test_metadata\/'","ebd32954":"def get_sentiment(pet_id, json_dir):\n    try:\n        with open(json_dir + pet_id + '.json') as f:\n            data = json.load(f)\n        return pd.Series((data['documentSentiment']['magnitude'], data['documentSentiment']['score']))\n    except FileNotFoundError:\n        return pd.Series((np.nan, np.nan))","61e15700":"df_train[['desc_magnitude', 'desc_score']] = df_train['PetID'].progress_apply(lambda x: get_sentiment(x, train_sentiment_path))\ndf_test[['desc_magnitude', 'desc_score']] = df_test['PetID'].progress_apply(lambda x: get_sentiment(x, test_sentiment_path))","682d75d2":"df_train.head()","b1d3d909":"sns.heatmap(df_train[['desc_magnitude', 'desc_score', 'AdoptionSpeed']].corr(), annot=True)","cad24db7":"fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(18,10))\nsns.distplot(df_train.desc_magnitude.dropna(), ax=ax[0])\nsns.distplot(df_train.desc_score.dropna(), ax=ax[1])","9edb1d42":"df_train.desc_magnitude.count() \/ df_train.shape[0]","89bcb7ea":"sns.distplot(np.log(df_train.desc_magnitude.dropna() + 0.5))","42757b9e":"sns.heatmap(np.corrcoef(df_train.Description.fillna('').str.len(), df_train.AdoptionSpeed), annot=True)","52f0febb":"target = df_train['AdoptionSpeed']\ntrain_id = df_train['PetID']\ntest_id = df_test['PetID']\ndf_train.drop(['AdoptionSpeed', 'PetID'], axis=1, inplace=True)\ndf_test.drop(['PetID'], axis=1, inplace=True)","baf95c0d":"%%time\nvertex_xs = []\nvertex_ys = []\nbounding_confidences = []\nbounding_importance_fracs = []\ndominant_blues = []\ndominant_greens = []\ndominant_reds = []\ndominant_pixel_fracs = []\ndominant_scores = []\nlabel_descriptions = []\nlabel_scores = []\nnf_count = 0\nnl_count = 0\nfor pet in train_id:\n    try:\n        with open('..\/input\/train_metadata\/' + pet + '-1.json', 'r') as f:\n            data = json.load(f)\n        vertex_x = data['cropHintsAnnotation']['cropHints'][0]['boundingPoly']['vertices'][2]['x']\n        vertex_xs.append(vertex_x)\n        vertex_y = data['cropHintsAnnotation']['cropHints'][0]['boundingPoly']['vertices'][2]['y']\n        vertex_ys.append(vertex_y)\n        bounding_confidence = data['cropHintsAnnotation']['cropHints'][0]['confidence']\n        bounding_confidences.append(bounding_confidence)\n        bounding_importance_frac = data['cropHintsAnnotation']['cropHints'][0].get('importanceFraction', -1)\n        bounding_importance_fracs.append(bounding_importance_frac)\n        dominant_blue = data['imagePropertiesAnnotation']['dominantColors']['colors'][0]['color']['blue']\n        dominant_blues.append(dominant_blue)\n        dominant_green = data['imagePropertiesAnnotation']['dominantColors']['colors'][0]['color']['green']\n        dominant_greens.append(dominant_green)\n        dominant_red = data['imagePropertiesAnnotation']['dominantColors']['colors'][0]['color']['red']\n        dominant_reds.append(dominant_red)\n        dominant_pixel_frac = data['imagePropertiesAnnotation']['dominantColors']['colors'][0]['pixelFraction']\n        dominant_pixel_fracs.append(dominant_pixel_frac)\n        dominant_score = data['imagePropertiesAnnotation']['dominantColors']['colors'][0]['score']\n        dominant_scores.append(dominant_score)\n        if data.get('labelAnnotations'):\n            label_description = data['labelAnnotations'][0]['description']\n            label_descriptions.append(label_description)\n            label_score = data['labelAnnotations'][0]['score']\n            label_scores.append(label_score)\n        else:\n            nl_count += 1\n            label_descriptions.append('nothing')\n            label_scores.append(-1)\n    except FileNotFoundError:\n        nf_count += 1\n        vertex_xs.append(-1)\n        vertex_ys.append(-1)\n        bounding_confidences.append(-1)\n        bounding_importance_fracs.append(-1)\n        dominant_blues.append(-1)\n        dominant_greens.append(-1)\n        dominant_reds.append(-1)\n        dominant_pixel_fracs.append(-1)\n        dominant_scores.append(-1)\n        label_descriptions.append('nothing')\n        label_scores.append(-1)\n\nprint(nf_count)\nprint(nl_count)\ndf_train.loc[:, 'vertex_x'] = vertex_xs\ndf_train.loc[:, 'vertex_y'] = vertex_ys\ndf_train.loc[:, 'bounding_confidence'] = bounding_confidences\ndf_train.loc[:, 'bounding_importance'] = bounding_importance_fracs\ndf_train.loc[:, 'dominant_blue'] = dominant_blues\ndf_train.loc[:, 'dominant_green'] = dominant_greens\ndf_train.loc[:, 'dominant_red'] = dominant_reds\ndf_train.loc[:, 'dominant_pixel_frac'] = dominant_pixel_fracs\ndf_train.loc[:, 'dominant_score'] = dominant_scores\ndf_train.loc[:, 'label_description'] = label_descriptions\ndf_train.loc[:, 'label_score'] = label_scores\n\n\nvertex_xs = []\nvertex_ys = []\nbounding_confidences = []\nbounding_importance_fracs = []\ndominant_blues = []\ndominant_greens = []\ndominant_reds = []\ndominant_pixel_fracs = []\ndominant_scores = []\nlabel_descriptions = []\nlabel_scores = []\nnf_count = 0\nnl_count = 0\nfor pet in test_id:\n    try:\n        with open('..\/input\/test_metadata\/' + pet + '-1.json', 'r') as f:\n            data = json.load(f)\n        vertex_x = data['cropHintsAnnotation']['cropHints'][0]['boundingPoly']['vertices'][2]['x']\n        vertex_xs.append(vertex_x)\n        vertex_y = data['cropHintsAnnotation']['cropHints'][0]['boundingPoly']['vertices'][2]['y']\n        vertex_ys.append(vertex_y)\n        bounding_confidence = data['cropHintsAnnotation']['cropHints'][0]['confidence']\n        bounding_confidences.append(bounding_confidence)\n        bounding_importance_frac = data['cropHintsAnnotation']['cropHints'][0].get('importanceFraction', -1)\n        bounding_importance_fracs.append(bounding_importance_frac)\n        dominant_blue = data['imagePropertiesAnnotation']['dominantColors']['colors'][0]['color']['blue']\n        dominant_blues.append(dominant_blue)\n        dominant_green = data['imagePropertiesAnnotation']['dominantColors']['colors'][0]['color']['green']\n        dominant_greens.append(dominant_green)\n        dominant_red = data['imagePropertiesAnnotation']['dominantColors']['colors'][0]['color']['red']\n        dominant_reds.append(dominant_red)\n        dominant_pixel_frac = data['imagePropertiesAnnotation']['dominantColors']['colors'][0]['pixelFraction']\n        dominant_pixel_fracs.append(dominant_pixel_frac)\n        dominant_score = data['imagePropertiesAnnotation']['dominantColors']['colors'][0]['score']\n        dominant_scores.append(dominant_score)\n        if data.get('labelAnnotations'):\n            label_description = data['labelAnnotations'][0]['description']\n            label_descriptions.append(label_description)\n            label_score = data['labelAnnotations'][0]['score']\n            label_scores.append(label_score)\n        else:\n            nl_count += 1\n            label_descriptions.append('nothing')\n            label_scores.append(-1)\n    except FileNotFoundError:\n        nf_count += 1\n        vertex_xs.append(-1)\n        vertex_ys.append(-1)\n        bounding_confidences.append(-1)\n        bounding_importance_fracs.append(-1)\n        dominant_blues.append(-1)\n        dominant_greens.append(-1)\n        dominant_reds.append(-1)\n        dominant_pixel_fracs.append(-1)\n        dominant_scores.append(-1)\n        label_descriptions.append('nothing')\n        label_scores.append(-1)\n\nprint(nf_count)\ndf_test.loc[:, 'vertex_x'] = vertex_xs\ndf_test.loc[:, 'vertex_y'] = vertex_ys\ndf_test.loc[:, 'bounding_confidence'] = bounding_confidences\ndf_test.loc[:, 'bounding_importance'] = bounding_importance_fracs\ndf_test.loc[:, 'dominant_blue'] = dominant_blues\ndf_test.loc[:, 'dominant_green'] = dominant_greens\ndf_test.loc[:, 'dominant_red'] = dominant_reds\ndf_test.loc[:, 'dominant_pixel_frac'] = dominant_pixel_fracs\ndf_test.loc[:, 'dominant_score'] = dominant_scores\ndf_test.loc[:, 'label_description'] = label_descriptions\ndf_test.loc[:, 'label_score'] = label_scores","5aa30d48":"image_meta_col = ['vertex_x', 'vertex_y', 'bounding_confidence', 'bounding_importance', 'dominant_blue', 'dominant_green', 'dominant_red', 'dominant_pixel_frac', 'dominant_score', 'label_score']","05f12c4f":"f, ax = plt.subplots(figsize=(12, 12))\nsns.heatmap(df_train[image_meta_col].corr(), annot=True)","e86294bb":"fig, ax = plt.subplots(nrows=4, ncols=1, figsize=(18,10))\nsns.distplot(df_train.vertex_x, ax=ax[0])\nsns.distplot(df_train.vertex_y, ax=ax[1])\nsns.distplot(np.log(df_train.vertex_x + 1 - df_train.vertex_x.min()), ax=ax[2])\nsns.distplot(np.log(df_train.vertex_y + 1 - df_train.vertex_x.min()), ax=ax[3])","2e1a3272":"fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(18,10))\nsns.distplot(df_train.vertex_x + df_train.vertex_y, ax=ax[0])\nsns.distplot(np.log(df_train.vertex_x + 1 - df_train.vertex_x.min()) +np.log(df_train.vertex_y + 1 - df_train.vertex_x.min()) , ax=ax[1])","e738ec65":"sns.distplot(df_train.bounding_importance)","45a6bebc":"sns.distplot(df_train.bounding_confidence)","75135fc9":"sns.distplot((df_train.bounding_confidence + df_train.bounding_importance) \/ 2)","649e0850":"fig, ax = plt.subplots(figsize=(12,8))\nsns.distplot(df_train.dominant_red, ax=ax, color='red', hist=False)\nsns.distplot(df_train.dominant_green, ax=ax, color='green',  hist=False)\nsns.distplot(df_train.dominant_blue, ax=ax, color='blue', hist=False)","53059360":"fig, ax = plt.subplots(figsize=(12,8))\nsns.distplot(np.log(df_train.dominant_red), ax=ax, color='red', hist=False)\nsns.distplot(np.log(df_train.dominant_green), ax=ax, color='green',  hist=False)\nsns.distplot(np.log(df_train.dominant_blue), ax=ax, color='blue', hist=False)","a79a6bf9":"sns.distplot(np.log((df_train.dominant_blue + df_train.dominant_green + df_train.dominant_red ) \/ 3 + 3))","3f2340a4":"fig, ax = plt.subplots(figsize=(12,8))\nsns.distplot(df_train.dominant_pixel_frac, ax=ax, color='red', hist=False)\nsns.distplot(df_train.dominant_score, ax=ax, color='green',  hist=False)\nsns.distplot(df_train.label_score, ax=ax, color='blue', hist=False)","a6fdf3da":"sns.distplot((df_train.dominant_pixel_frac + df_train.dominant_score + df_train.label_score) \/ 3)","5072d58a":"sns.heatmap(np.corrcoef((df_train.bounding_confidence + df_train.bounding_importance) \/ 2, np.log((df_train.dominant_pixel_frac + df_train.dominant_score + df_train.label_score) \/ 3 + 3)), annot=True)","dacc0b15":"df_train.isna().sum()","29bb8396":"def log_transform(feature, df_train, df_test):\n    min_feature = min(df_train[feature].min(), df_test[feature].min())\n    df_train[feature] = np.log(df_train[feature] + 1 - min_feature)\n    df_test[feature] = np.log(df_test[feature] + 1 - min_feature)\n    return df_train, df_test","12b4ed36":"df_train, df_test = log_transform('vertex_x', df_train, df_test)","86d39833":"df_train, df_test = log_transform('vertex_y', df_train, df_test)","17a54513":"df_train['bounding_agg'] = (df_train.bounding_confidence + df_train.bounding_importance) \/ 2\ndf_test['bounding_agg'] = (df_test.bounding_confidence + df_test.bounding_importance) \/ 2","ec0b7c6d":"df_train['dominant_color'] = (df_train.dominant_blue + df_train.dominant_green + df_train.dominant_red ) \/ 3\ndf_test['dominant_color'] = (df_test.dominant_blue + df_test.dominant_green + df_test.dominant_red ) \/ 3","e432b06d":"df_train, df_test = log_transform('dominant_color', df_train, df_test)","4a9cb44e":"df_train['dominant_frac_agg'] = (df_train.dominant_pixel_frac + df_train.dominant_score + df_train.label_score) \/ 3\ndf_test['dominant_frac_agg'] = (df_test.dominant_pixel_frac + df_test.dominant_score + df_test.label_score) \/ 3","98094c69":"df_train.info()","6ee05422":"df_train.drop(['Name', 'Description', 'RescuerID', 'bounding_confidence', 'bounding_importance', 'dominant_blue', 'dominant_green', 'dominant_red', 'dominant_pixel_frac', 'dominant_score', 'label_score', 'label_description'], axis=1, inplace=True)\ndf_test.drop(['Name', 'Description', 'RescuerID', 'bounding_confidence', 'bounding_importance', 'dominant_blue', 'dominant_green', 'dominant_red', 'dominant_pixel_frac', 'dominant_score', 'label_score', 'label_description'], axis=1, inplace=True)","e7e80c25":"df_train.info()","a6739682":"magnitude_std = df_train.desc_magnitude.std()\nmagnitude_mean = df_train.desc_magnitude.mean()\nscore_std = df_train.desc_score.std()\nscore_mean = df_train.desc_score.mean()\ndf_train['desc_magnitude'].fillna(np.random.normal(magnitude_mean, magnitude_std), inplace=True)\ndf_train['desc_score'].fillna( np.random.normal(score_mean, score_std), inplace=True)\ndf_test['desc_magnitude'].fillna(np.random.normal(magnitude_mean, magnitude_std), inplace=True)\ndf_test['desc_score'].fillna(np.random.normal(score_mean, score_std), inplace=True)","5d34daf7":"category_columns = ['Type', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2', 'Color3', 'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed', 'Sterilized', 'Health', 'State']\nnumerical_columns = ['Age', 'Quantity', 'Fee', 'VideoAmt', 'PhotoAmt', 'name_len', 'desc_magnitude', 'desc_score', 'bounding_agg', 'dominant_color', 'dominant_frac_agg']","f650a2e0":"df_train[category_columns] = df_train[category_columns].astype('category')\ndf_test[category_columns] = df_test[category_columns].astype('category')","c60fc207":"min_age = min(df_train.Age.min(), df_test.Age.min())\ndf_train.Age = np.log(df_train.Age + 1 - min_age)\ndf_test.Age = np.log(df_test.Age + 1 - min_age)","d857833e":"min_magn = min(df_train.desc_magnitude.min(), df_test.desc_magnitude.min())\ndf_train.desc_magnitude = np.log(df_train.desc_magnitude + 1 - min_magn)\ndf_test.desc_magnitude = np.log(df_test.desc_magnitude + 1 - min_magn)","3a0bdd9f":"df_train.name_len = np.log(df_train.name_len + 1)\ndf_test.name_len = np.log(df_test.name_len + 1)","0928ff7e":"df_train.info()","37694949":"from sklearn.model_selection import train_test_split","71af64fb":"X_train, X_val, y_train, y_val = train_test_split(df_train, target, train_size=0.8, random_state=1234)","e6cdcd44":"import lightgbm as lgbm","400c85e3":"params_lgbm = {'num_leaves': 38,\n         'min_data_in_leaf': 146, \n         'objective':'multiclass',\n         'num_class': 5,\n         'max_depth': 4,\n         'learning_rate': 0.01,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9980062052116254,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.844212672233457,\n         \"bagging_seed\": 11,\n         \"metric\": 'multi_logloss',\n         \"lambda_l1\": 0.12757257166471625,\n         \"random_state\": 133,\n         \"verbosity\": -1\n              }","83864fd3":"lgbm_train = lgbm.Dataset(X_train, y_train, categorical_feature=category_columns)\nlgbm_valid = lgbm.Dataset(X_val, y_val, categorical_feature=category_columns)","bacc82a4":"model_lgbm = lgbm.train(params_lgbm, lgbm_train, 10000, valid_sets=[lgbm_valid],  verbose_eval= 500, categorical_feature=category_columns, early_stopping_rounds = 200)","7c14951a":"(np.argmax(model_lgbm.predict(X_val), axis=1) == y_val).sum() \/ y_val.shape[0]","acbb00fe":"f, ax = plt.subplots(figsize=(12, 8))\nfeatures = X_train.columns\nimportances = model_lgbm.feature_importance()\nindices = np.argsort(importances)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()\n","1a79b482":"from sklearn.ensemble import RandomForestClassifier as Rf\nfrom sklearn.ensemble import GradientBoostingClassifier as Gb","35a5852d":"model_rf = Rf()","85badc7a":"model_rf.fit(X_train,y_train)","c863ba8c":"model_rf.score(X_train,y_train)","2153e606":"model_rf.score(X_val,y_val)","59cdb151":"f, ax = plt.subplots(figsize=(12, 8))\nfeatures = X_train.columns\nimportances = model_rf.feature_importances_\nindices = np.argsort(importances)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()\n","21200a46":"model_gb = Gb()","64c3b9f2":"model_gb.fit(X_train,y_train)","1b80a3a5":"model_gb.score(X_train,y_train)","b6d29ef4":"model_gb.score(X_val,y_val)","bc77ebf6":"f, ax = plt.subplots(figsize=(12, 8))\nfeatures = X_train.columns\nimportances = model_gb.feature_importances_\nindices = np.argsort(importances)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()\n","352dd673":"# Checking result of two best models\nval_lgbm = model_lgbm.predict(X_val)\nval_gb = model_gb.predict_log_proba(X_val)","8887edda":"val_mixed = (val_gb + val_lgbm) \/ 2","b53d86db":"(np.argmax(val_mixed, axis=1) == y_val).sum() \/ y_val.shape[0]","cc67cbce":"test_lgbm = np.argmax(model_lgbm.predict(df_test), axis=1)","35d48500":"test_id = pd.DataFrame(test_id)","85ee09c5":"submission = test_id.join(pd.DataFrame(test_lgbm, columns=['AdoptionSpeed']))","2d472607":"submission.to_csv('submission.csv', index=False)","b4757a52":"## EDA - Train Data\n### Data Fields\nPetID - Unique hash ID of pet profile\n\nAdoptionSpeed - Categorical speed of adoption. Lower is faster. This is the value to predict. See below section for more info.\n\nType - Type of animal (1 = Dog, 2 = Cat)\n\nName - Name of pet (Empty if not named)\n\nAge - Age of pet when listed, in months\n\nBreed1 - Primary breed of pet (Refer to BreedLabels dictionary)\n\nBreed2 - Secondary breed of pet, if pet is of mixed breed (Refer to BreedLabels dictionary)\n\nGender - Gender of pet (1 = Male, 2 = Female, 3 = Mixed, if profile represents group of pets)\n\nColor1 - Color 1 of pet (Refer to ColorLabels dictionary)\n\nColor2 - Color 2 of pet (Refer to ColorLabels dictionary)\n\nColor3 - Color 3 of pet (Refer to ColorLabels dictionary)\n\nMaturitySize - Size at maturity (1 = Small, 2 = Medium, 3 = Large, 4 = Extra Large, 0 = Not Specified)\n\nFurLength - Fur length (1 = Short, 2 = Medium, 3 = Long, 0 = Not Specified)\n\nVaccinated - Pet has been vaccinated (1 = Yes, 2 = No, 3 = Not Sure)\n\nDewormed - Pet has been dewormed (1 = Yes, 2 = No, 3 = Not Sure)\n\nSterilized - Pet has been spayed \/ neutered (1 = Yes, 2 = No, 3 = Not Sure)\n\nHealth - Health Condition (1 = Healthy, 2 = Minor Injury, 3 = Serious Injury, 0 = Not Specified)\n\nQuantity - Number of pets represented in profile\n\nFee - Adoption fee (0 = Free)\n\nState - State location in Malaysia (Refer to StateLabels dictionary)\n\nRescuerID - Unique hash ID of rescuer\n\nVideoAmt - Total uploaded videos for this pet\n\nPhotoAmt - Total uploaded photos for this pet\n\nDescription - Profile write-up for this pet. The primary language used is English, with some in Malay or Chinese.\n## AdoptionSpeed\nContestants are required to predict this value. The value is determined by how quickly, if at all, a pet is adopted. The values are determined in the following way: \n\n0 - Pet was adopted on the same day as it was listed. \n\n1 - Pet was adopted between 1 and 7 days (1st week) after being listed. \n\n2 - Pet was adopted between 8 and 30 days (1st month) after being listed. \n\n3 - Pet was adopted between 31 and 90 days (2nd & 3rd month) after being listed. \n\n4 - No adoption after 100 days of being listed. (There are no pets in this dataset that waited between 90 and 100 days).\n\n","e82d2d30":"## Submission Time","dd8993c1":"**Quanity of gender 1 and 3 is much larger than the second one**","c9e071a7":"**Fee has almost zero coorrelation with Age**","56f297c7":"## Checking Out Images meta","cec928ab":"## EDA-Sentiment Analysis","102d9aa6":"## Data cleaning, filling and transformmations","6ca3e066":".**Breed1 and Breed2 also has concentrated distribution**","5391b185":"**Vaccianted, Dewormed and Sterilized are positively correlated**\n\n**Gender and Quantity are positively correlated**\n\n**Breed and age are negatively correlated**\n\n**Adoption speed is not correlated to fee**","9bc8929c":"## Model Training","8cd866e1":"**0 Class is little less(which is obvious) but others are almost on similar level**"}}