{"cell_type":{"675309d6":"code","325ada30":"code","3a39f5e8":"code","7d72bc20":"code","10aba5fd":"code","dd92989d":"code","a5005a6c":"code","be234c67":"code","3d08b0cf":"code","9bc36141":"code","7bd61411":"code","1ff92f1e":"code","eab80b7f":"code","c5d40cb3":"code","51294480":"code","c53197e1":"code","a0d2b1e1":"code","611a6686":"code","dbe2fe6d":"code","3aaf1cb2":"markdown","0c69fcd0":"markdown","aeee7110":"markdown","52b673fa":"markdown","285df576":"markdown","a764462f":"markdown"},"source":{"675309d6":"import numpy as np\nimport pandas as pd","325ada30":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/food41\/images'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3a39f5e8":"import glob\ndofilename = glob.glob(\"\/kaggle\/input\/food41\/images\/donuts\/*.*\")\nptfilename = glob.glob(\"\/kaggle\/input\/food41\/images\/pizza\/*.*\")","7d72bc20":"!mkdir train\n!mkdir train\/donuts\n!mkdir train\/pizza","10aba5fd":"import shutil \nfor i in range(len(dofilename)):\n    if i<=i:\n        shutil.copy(dofilename[i], '.\/train\/donuts')","dd92989d":"import shutil \nfor i in range(len(ptfilename)):\n    if i<=i:\n        shutil.copy(ptfilename[i], '.\/train\/pizza')","a5005a6c":"!mkdir test\n!mkdir test\/donuts\n!mkdir test\/pizza","be234c67":"import glob\nfiledo = glob.glob(\".\/train\/donuts\/*.*\")\nfilepz = glob.glob(\".\/train\/pizza\/*.*\")","3d08b0cf":"rng = np.random.RandomState(9)\nmidx = rng.choice(filedo,100, replace=False)\nfidx = rng.choice(filepz,100, replace=False)","9bc36141":"for item in fidx:\n    shutil.move(item,'.\/test\/donuts\/')\nfor item in midx:\n    shutil.move(item,'.\/test\/pizza\/')","7bd61411":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\ndata_generator = ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False,  \n        featurewise_std_normalization=False, \n        samplewise_std_normalization=False, \n\n        zca_whitening=False,  \n        rotation_range=10,  \n        zoom_range = 0.2,\n        width_shift_range=0.1,  \n        height_shift_range=0.1, \n        horizontal_flip=False, \n        vertical_flip=False,  \n        validation_split=0.2)","1ff92f1e":"train_dir = '.\/train'\nbatch_size = 50\nimg_height = 100 \nimg_width  = 100\ntrain_generator = data_generator.flow_from_directory(\n    train_dir,\n    target_size=(img_height, img_width),\n    batch_size=batch_size,\n    class_mode='binary',\n    subset='training') # set as training data\n\nvalidation_generator = data_generator.flow_from_directory(\n    train_dir, # same directory as training data\n    target_size=(img_height, img_width),\n    batch_size=batch_size,\n    class_mode='binary',\n    subset='validation') # set as validation data","eab80b7f":"train_generator.class_indices","c5d40cb3":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, Activation\n# preparing the layers in the Convolutional Deep Neural Network\ndef create_model():\n    tf.random.set_seed(0)\n    tf.compat.v1.reset_default_graph() # Clear Model\n    model = Sequential()\n    model.add(Conv2D(filters = 32, kernel_size = (3, 3), activation = 'relu', input_shape = train_generator.image_shape))\n    model.add(Conv2D(filters = 16, kernel_size = (3, 3), activation = 'relu'))\n    model.add(Conv2D(filters = 8, kernel_size = (3, 3), activation = 'relu'))\n    model.add(MaxPooling2D(pool_size = (2, 2)))\n    model.add(Flatten())\n    model.add(Dense(units = 32, activation = 'relu'))\n    model.add(Dropout(rate = 0.1))\n    model.add(Dense(units = 16, activation = 'relu'))\n    model.add(Dropout(rate = 0.1))\n    model.add(Dense(units = 8, activation = 'relu'))\n    model.add(Dense(units = 1, activation = 'sigmoid'))\n    model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n    return model","51294480":"model = create_model()\nfitted_model = model.fit_generator(\n    train_generator,\n    steps_per_epoch = train_generator.samples \/\/ batch_size,\n    validation_data = validation_generator, \n    validation_steps = validation_generator.samples \/\/ batch_size,\n    epochs = 28)","c53197e1":"import matplotlib.pyplot as plt\n# plotting accuracy and validation accuracy\naccuracy = fitted_model.history['accuracy']\nval_accuracy = fitted_model.history['val_accuracy']\nplt.plot(range(len(accuracy)), accuracy, 'b-', label = 'accuracy')\nplt.plot(range(len(val_accuracy)), val_accuracy, 'r-', label = 'val_accuracy')\nplt.legend()","a0d2b1e1":"import glob\nfiledo = glob.glob(\".\/test\/donuts\/*.*\")\nfilepz = glob.glob(\".\/test\/pizza\/*.*\")","611a6686":"from tensorflow.keras.preprocessing import image\nplabel = []\nfor filename in filedo:\n    test_image = image.load_img(filename, target_size = (img_height, img_width))\n    test_image = image.img_to_array(test_image)\n    test_image = np.expand_dims(test_image, axis = 0)\n    plabel.append(np.round(model.predict(test_image)[0][0]))\nplabel = np.array(plabel)\nsum(plabel==0)\/len(plabel)*100","dbe2fe6d":"from tensorflow.keras.preprocessing import image\nplabel = []\nfor filename in filepz:\n    test_image = image.load_img(filename, target_size = (img_height, img_width))\n    test_image = image.img_to_array(test_image)\n    test_image = np.expand_dims(test_image, axis = 0)\n    plabel.append(np.round(model.predict(test_image)[0][0]))\nplabel = np.array(plabel)\nsum(plabel==0)\/len(plabel)*100","3aaf1cb2":"| ![image.png](attachment:68c7e366-9d45-47ff-838c-0c1c38dc08cb.png) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;          |        <em><font size=5>Department of Modern Management and <br> Information Technology <\/font><\/em><br>  <font size=3>College of Arts, Media and Technology,<br> Chiang Mai University<br><\/font> Midterm Examination, Academic Year 2021 <br> Business Data Mining 954471\n|:- |-: \n|<strong>October 18th, 2021 8:00 - 23:59 <\/strong>| <strong>(Total 35 Points) <\/strong>\n\n<b>Name Ruangkhaw Sinwaninthaloet      Student ID 612110185<\/b>\n\nInstructions: \n\n-\tThis exam is worth 35% of your final grade.\n-\tThis exam consists of 5 Questions\n-\tFinish this exam, download it as .ipynb file and send it to my FB messenger.\n-\tWrite your student ID as filename. \n-\tAllow anything.\n-\t<b>Please do this exam alone and be honest to yourself. <\/b>\n-\tThe time allowed students to leave the testing room after the exam is open to copy it.\n-\tStudents who cheat in any way will be prosecuted by the CMU regulation BE 2554, which governs student behavior and describes discipline during the exam period. The proctor must report any suspected cheating to the director.\n<br>\n\n### <em>Score Sheet:<\/em>\n|<font size=3> Question|<font size=3> Full Mark|<font size=3> Student\u2019s Mark|\n|:- |:-:|:-:\n<font size=3> Q1 |<font size=3> 5|\n<font size=3> Q2 |<font size=3> 5|\n<font size=3> Q3 |<font size=3> 5|\n<font size=3> Q4 |<font size=3> 10|\n<font size=3> Q5 |<font size=3> 10|\n<font size=3> Total|<font size=3> 35|\n\n\n\n\n\n\n","0c69fcd0":"#### Q2. Create Model to predict the spam mail utilizing feature selection method. (Column 0 = Label)\n<b><font color=red>The difference of Train and Test accuracy must be lower than 10% to get full score.<\/font><\/b>","aeee7110":"#### Q3. Create Deep Learning Model to predict the quality of wine. Our model will focus only on wine with quality of 5, 6, 7 (quality = label)\n<b><font color=red>The difference of Train and Test accuracy must be lower than 10% to get full score.<\/font><\/b>","52b673fa":"#### Q1. Create Model to predict the Telco customer churn (Churn = Label).\n<b><font color=red>The difference of Train and Test accuracy must be lower than 10% to get full score.<\/font><\/b>","285df576":"#### Q4. From this food images (\"..\/input\/food41\/images\"), please create an image classifier to classify 2 types of food choosing by yourself. (Show me the accuracy of each type of food) \n<b><font color=red>Both types of food must be more than 50% to get full score.<\/font><\/b>","a764462f":"#### Q5. Create an object detection model to detect your own face in the picture. (Show me that the model can detect your face in a test image.)\n<b><font color=red>The model must be able to detect your face to get full score.<\/font><\/b>"}}