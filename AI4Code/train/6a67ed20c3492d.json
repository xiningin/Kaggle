{"cell_type":{"0531d26b":"code","f304b676":"code","1e9179de":"code","d3133559":"code","5640e219":"code","d618621f":"code","b4d4a63e":"code","1ee51b1e":"code","543d181c":"code","3e4bf4e0":"code","9c388852":"code","6715b1ec":"code","c4f13177":"code","28b8053a":"code","0f1e63fb":"code","733f0f05":"code","5bbc8625":"code","93b207dd":"code","60ada229":"markdown","0762ba73":"markdown","339198c6":"markdown","65b552d8":"markdown","ef67ae23":"markdown"},"source":{"0531d26b":"! nvidia-smi\n!pip3 install catboost ","f304b676":"# Data Preprocessing\nimport pandas as pd\nimport numpy as np \n\n# Data Visualization\nimport matplotlib.pyplot as plt\n\n\n# ML Models\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score,roc_curve \nfrom catboost import CatBoostClassifier\n\n# Miscellanous\nimport time ","1e9179de":"train = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv') \ntrain_df = train.copy() \ntrain_df = train_df.drop(['id'], axis='columns') \ntrain_df.head()","d3133559":"test = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")\ntest_df = test.copy()\ntest_id = test.copy()\ntest_df = test_df.drop(['id'], axis='columns')\ntest_df.head()","5640e219":"print(train_df.isnull().sum())\nprint(test_df.isnull().sum())","d618621f":"y = train_df['claim']\ntrain_df.drop('claim', axis = 1, inplace  = True)","b4d4a63e":"train_df['missing'] = train_df.isnull().sum(axis=1)\ntrain_df['std'] = train_df.std(axis=1)\ntrain_df['var'] = train_df.var(axis=1)\ntrain_df.head() ","1ee51b1e":"test_df['missing'] = test_df.isnull().sum(axis=1)\ntest_df['std'] = test_df.std(axis=1)\ntest_df['var'] = test_df.var(axis=1)","543d181c":"train_df = train_df.fillna(train_df.mean())\ntest_df = test_df.fillna(test_df.mean())","3e4bf4e0":"scaler = StandardScaler()\nscaled_features = scaler.fit_transform(train_df)\nscaled_features1 = scaler.transform(test_df)","9c388852":"X_train, X_test, y_train, y_test = train_test_split(scaled_features, y, test_size = 0.30)","6715b1ec":"cat_params = {\n    'iterations': 15585, \n    'objective': 'CrossEntropy', \n    'bootstrap_type': 'Bernoulli',\n    'learning_rate': 0.023575206684596582, \n    'reg_lambda': 36.30433203563295, \n    'random_strength': 43.75597655616195, \n    'depth': 8, \n    'min_data_in_leaf': 11, \n    'leaf_estimation_iterations': 1, \n    'subsample': 0.8227911142845009,\n    'task_type' : 'GPU',\n    'eval_metric' : 'AUC',\n    'verbose' : 1000,\n    'early_stopping_rounds' : 500,\n}","c4f13177":"cat = CatBoostClassifier(**cat_params )\ncat.fit(X_train, y_train)\ntest_predict = cat.predict(X_test) ","28b8053a":"start_time = time.time()\n\ny_pred_proba = cat.predict_proba(X_test)[::,1]\nfpr, tpr, _ = roc_curve(y_test,  y_pred_proba)\nauc = roc_auc_score(y_test, y_pred_proba)\nprint(auc)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()\n\nprint(\"Execution time: \" + str((time.time() - start_time)) + ' ms')","0f1e63fb":"y_predi=cat.predict_proba(test_df)[:, 1]","733f0f05":"id = test_id['id']","5bbc8625":"sub = pd.DataFrame(list(zip(id, y_predi)),columns =['id', 'claim'])\nsub.to_csv('submission.csv',index = False)\nsub.head(20)","93b207dd":"sub.to_csv('submission.csv',index = False)","60ada229":"# CatBoost Classifier\n\n","0762ba73":"# Test Data Predictions\n\n","339198c6":"# Replace missing values with the mean value of each column\n","65b552d8":"# Extra features: 'missing', 'st', 'var'","ef67ae23":"# Loading data"}}