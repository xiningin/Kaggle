{"cell_type":{"31d9dd79":"code","d614a042":"code","a8d7416a":"code","d8b61307":"code","c68b9023":"code","147374da":"code","6baf5b2c":"code","07a59f66":"code","8c1c6b0a":"code","593e836e":"code","cce65453":"code","4bcf341b":"code","90170ada":"code","a52cbe95":"code","336f619d":"code","cfa17f35":"code","67fd4c36":"code","f61c29d7":"code","58f1b3af":"code","f39282ea":"code","31c61006":"code","bf661dd7":"markdown","606f7542":"markdown","b557481f":"markdown","433dde03":"markdown","2550c0bc":"markdown","a98e0845":"markdown","4c516ce5":"markdown","867d9b9c":"markdown","33ec6fee":"markdown"},"source":{"31d9dd79":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","d614a042":"dataset = pd.read_csv('..\/input\/master.csv')\nX = dataset.drop(['suicides\/100k pop', 'suicides_no', 'country-year'], axis=1) #delete some \"duplicate\" features\ny = dataset['suicides\/100k pop']","a8d7416a":"X[' gdp_for_year ($) '] = X[' gdp_for_year ($) '].str.replace(',', '').astype(float)","d8b61307":"#X #is gdp for year relevant?","c68b9023":"import seaborn as sns\ncorr = X.corr()\nsns.heatmap(corr, xticklabels=corr.columns.values, yticklabels=corr.columns.values)","147374da":"plt.scatter(X['gdp_per_capita ($)'], X[' gdp_for_year ($) '])\n#I'll keep both these in. Some countries like the Soviet Union had a hight GDP per capita but did not distibute the wealth","6baf5b2c":"plt.scatter(X['population'], X[' gdp_for_year ($) '])","07a59f66":"plt.scatter(X['gdp_per_capita ($)'], X['HDI for year'])","8c1c6b0a":"X.columns.values","593e836e":"plt.scatter(X[' gdp_for_year ($) '], y) #seem to be outliers above suicide rates of 125 and over based on gdp and hdi. let's drop them","cce65453":"X = X[y < 125]\ny = y[y < 125]","4bcf341b":"numeric_features = ['year','HDI for year', ' gdp_for_year ($) ', 'population',\n                   'gdp_per_capita ($)']\ncategorical_features = ['country', 'sex', 'age', 'generation']","90170ada":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import Imputer, OneHotEncoder, StandardScaler #these all appear to come because HDI wasn't available prior to 2\n\nnumeric_transformer = Pipeline(steps=[\n    ('imputer', Imputer(missing_values='NaN', strategy='mean')),\n    ('scaler', StandardScaler())\n])\ncategorical_transformer = Pipeline(steps=[\n    ('onehot', OneHotEncoder())\n])\n\npreprocessor = ColumnTransformer(\n    transformers = [\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)\n    ])\n\nclf = Pipeline(steps=[('preprocessor', preprocessor)])\nX = clf.fit_transform(X)\n\n","a52cbe95":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","336f619d":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression(fit_intercept=False)\nregressor.fit(X_train, y_train)","cfa17f35":"y_pred_test = regressor.predict(X_test)\ny_pred_train = regressor.predict(X_train)","67fd4c36":"from sklearn.metrics import mean_squared_error\nrms_test = np.sqrt(mean_squared_error(y_test, y_pred_test))\nrms_train = np.sqrt(mean_squared_error(y_train, y_pred_train))","f61c29d7":"print('The RMSE of the test set is: ' + rms_test.astype(str))\nprint('The RMSE of the training set is: ' + rms_train.astype(str))","58f1b3af":"X_train.shape\n#X_train = np.append(np.ones((22256, 1)).astype(int), values=X_train, axis=1) #Add constants","f39282ea":"# import statsmodels.formula.api as sm\n# def backwardElimination(x, sl):\n#     numVars = len(x[0])\n#     for i in range(0, numVars):\n#         regressor_OLS = sm.OLS(y, x).fit()\n#         maxVar = max(regressor_OLS.pvalues).astype(float)\n#         if maxVar > sl:\n#             for j in range(0, numVars - i):\n#                 if (regressor_OLS.pvalues[j].astype(float) == maxVar):\n#                     x = np.delete(x, j, 1)\n#     regressor_OLS.summary()\n#     return x\n \n# SL = 0.05\n# X_opt = X_train.todense()\n# X_Modeled = backwardElimination(X_opt, SL)","31c61006":"#X_Mod","bf661dd7":"# Evaluate performance","606f7542":"# Import dataset","b557481f":"# Try linear regression","433dde03":"# Preprocessing","2550c0bc":"# Import libraries","a98e0845":"# Check for outliers","4c516ce5":"# Try backwards elimination","867d9b9c":"# Investigate correlation","33ec6fee":"##### Nothing seems to be linearly correlated so I'll leave all the independent variables in"}}