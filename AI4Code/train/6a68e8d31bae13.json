{"cell_type":{"a327771a":"code","bbf0d41a":"code","7e2f7858":"code","5a005bf6":"code","6f74252b":"code","0763a04d":"code","4b9aedcf":"code","1c8d0cd5":"code","fa61c476":"code","096a9707":"code","1191da60":"code","efb75ca9":"code","63b5d877":"code","a65e3fc3":"code","ecb6a1c4":"code","22a96c4e":"code","b391cf60":"markdown","b6c0743d":"markdown","29be4626":"markdown","88555f36":"markdown","3d1d949a":"markdown","b358fd7e":"markdown"},"source":{"a327771a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bbf0d41a":"# Use pandas to create dataframe for data\ndata = pd.read_csv('\/kaggle\/input\/gold-price-data\/gld_price_data.csv')\n# explore top 5 rows of data set\ndata.head()","7e2f7858":"# check how many data poiints and how mnany columns \ndata.shape","5a005bf6":"# information about types of data columns\ndata.info()","6f74252b":"# describtion of data columns \ndata.describe()","0763a04d":"# check for any missing values\ndata.isnull().sum()","4b9aedcf":"# plot columns ditribution as histogram\nimport matplotlib.pyplot as plt\ndata.hist(figsize=(12,10));","1c8d0cd5":"# change date columns to datetime create year column \n\ndata['Date'] = pd.to_datetime(data['Date'])\ndata['Year'] = pd.DatetimeIndex(data['Date']).year\n\n# plot Max VS Average yearly Gold prices\n\ndata.groupby('Year').max()['GLD'].plot(color = 'green',label = 'Max')\ndata.groupby('Year').mean()['GLD'].plot(color = 'blue',label = 'Average')\nplt.ylabel('Gold Price')\nplt.legend()\nplt.title(\"Max VS Average Yearly Gold prices\")\nplt.grid()\nplt.show();","fa61c476":"# Plot correlation Matrix\n\nimport seaborn as sns\ncorr = data.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap (corr, annot = True,fmt='.2f', cmap = 'Blues');","096a9707":"# Gold Correlation with other features\n\ncorr['GLD'].sort_values(ascending=False)","1191da60":"# Plot Gold distplot\nsns.set_theme(style = 'whitegrid')\nsns.displot(data['GLD'], color ='blue');","efb75ca9":"# import required libraries \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Prepare Features and Target data frame\n\nY = data['GLD'] # target\nX = data.drop(['Date','Year', 'GLD'], axis = 1) #features","63b5d877":"# Split data to training and test \n\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, random_state=99)\nX_train.shape, Y_train.shape, X_test.shape, Y_test.shape ","a65e3fc3":"# create random forrest regressor model\nmodel = RandomForestRegressor(n_estimators=100)\n# fit model on training data \nmodel.fit (X_train, Y_train)\n# get model prediction on test data\nY_preds = model.predict(X_test)","ecb6a1c4":"# evaluate model\nfrom sklearn import metrics\n\nMSE = metrics.mean_squared_error(Y_test, Y_preds)\nMAE = metrics.mean_absolute_error(Y_test, Y_preds)\nr_2 = metrics.r2_score(Y_test, Y_preds)\nprint (f'Mean Squared Error = {MSE}')\nprint (f'Mean Absolute Error = {MAE}')\nprint (f'R-Squared error = {r_2}')","22a96c4e":"# plot prediction VS original data\nY_test = list(Y_test)\nplt.figure(figsize=(12, 8))\nplt.plot(Y_test, color = 'orange', label = 'True Value')\nplt.plot(Y_preds, color = 'blue', label = 'Predicted Value')\nplt.legend()\nplt.xlabel('Values')\nplt.ylabel('Gold price')\nplt.title('True VS Predicted Values')\nplt.grid()\nplt.show();\n","b391cf60":"### Correlation Matrix shows Strong positive correlation between gold and silver ","b6c0743d":"### Create machine learning Model that takes (SLV, SPX, EUR\/UDS, USO) features and predict Gold price","29be4626":"## EDA - Explainatory Data Analysis","88555f36":"### Our Model predictions are matching test data actual values ","3d1d949a":"# Data Dictionary\n\nDate - mm\/dd\/yyyy \n\nSPX - is a free-float weighted measurement stock market index of the 500 largest companies listed on stock exchanges in the United States.\n\nGLD - Gold Price \n\nUSO - United States Oil Fund - **Not Sure of UOM**\n\nSLV - Silver Price \n\nEUR\/USD - currency pair quotation of the Euro against the USD\n","b358fd7e":"### We notice from the graph that gold prices peaked between 2011 to 2013 and from 2015 prices kept increasing gradually "}}