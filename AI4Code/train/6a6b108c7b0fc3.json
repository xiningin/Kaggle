{"cell_type":{"953c24a5":"code","83a8b601":"code","68819cb9":"code","5fdf2a17":"code","87d85eb1":"code","65cabf30":"code","541c255c":"code","7dbc359d":"code","b7f65b77":"code","26d87788":"code","91bf0904":"code","b0c38a7a":"code","61da509e":"code","7aeb111f":"code","d569b280":"code","c8043ee6":"code","07889f53":"code","9bed7c60":"code","13d05d2c":"code","9548a4c8":"code","c2b253c3":"code","ad560d8e":"code","937cd1fd":"code","7e33a06e":"code","effbaae7":"code","b5ebd631":"code","f3c4350c":"code","9ff777eb":"code","fb590540":"code","c131c69a":"markdown","90b2ab5c":"markdown"},"source":{"953c24a5":"import warnings, os\nwarnings.filterwarnings('ignore')","83a8b601":"import numpy as np\nimport pandas as pd\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, Convolution2D\nfrom tensorflow.keras.layers import MaxPooling2D, BatchNormalization\nfrom tensorflow.keras.layers import Activation, GlobalAveragePooling2D\nfrom tensorflow.keras.optimizers import SGD, RMSprop\nfrom keras.utils.vis_utils import model_to_dot\nfrom IPython.display import SVG\nfrom sklearn.model_selection import train_test_split","68819cb9":"faces = np.moveaxis(np.load('..\/input\/face_images.npz')['face_images'], -1, 0)\nfaces.shape","5fdf2a17":"landmarks = pd.read_csv('..\/input\/facial_keypoints.csv')\nlandmarks.shape","87d85eb1":"landmarks.head()","65cabf30":"prediction_fields = list(landmarks)[:4]\nprint('Columns for eye detection:\\n', prediction_fields)","541c255c":"cols_not_null = landmarks['left_eye_center_x'].notna() \nfor i in prediction_fields[1:]:\n    cols_not_null = cols_not_null & landmarks[i].notna()\nis_select = np.nonzero(cols_not_null)[0]\nis_select.shape","7dbc359d":"Y = np.zeros((is_select.shape[0], len(prediction_fields)))\nfor i in range(len(prediction_fields)):\n    Y[:, i] = landmarks[prediction_fields[i]][is_select] \/ faces.shape[1]\nY.shape","b7f65b77":"X = np.zeros((is_select.shape[0], faces.shape[1], faces.shape[1], 1))\nX[:, :, :, 0] = faces[is_select, :, :] \/ 255.0\nX.shape","26d87788":"def get_coordinates(arr, scale = 96):\n    x, y = [], []\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            x.append(arr[i] * scale)\n        else:\n            y.append(arr[i]* scale)\n    return x, y","91bf0904":"fig, axes = plt.subplots(nrows = 4, ncols = 4, figsize = (16, 16))\nplt.setp(axes.flat, xticks = [], yticks = [])\nfor i, ax in enumerate(axes.flat):\n    index = randint(0, 2167)\n    img = X[index].reshape(96, 96)\n    landmark_x, landmark_y = get_coordinates(Y[index])\n    ax.imshow(img, cmap = 'gray')\n    ax.scatter(landmark_x, landmark_y, c = 'r')\n    ax.set_xlabel('Face_' + str(index))\nplt.show()","b0c38a7a":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1)\nX_train.shape, X_test.shape, Y_train.shape, Y_test.shape","61da509e":"model_1 = Sequential([\n    Conv2D(16, (3, 3), padding = 'same', activation = 'tanh', input_shape = (96, 96, 1)),\n    MaxPooling2D(2, 2),\n    Dropout(rate = 0.75),\n    Conv2D(32, (3, 3), padding = 'same', activation = 'tanh', input_shape = (96, 96, 1)),\n    MaxPooling2D(2, 2),\n    Dropout(rate = 0.75),\n    Flatten(),\n    Dense(256, activation = 'tanh'),\n    Dropout(rate = 0.75),\n    Dense(len(prediction_fields), activation = 'sigmoid')\n])\n\nmodel_1.summary()","7aeb111f":"SVG(model_to_dot(model_1, show_shapes = True, show_layer_names = True).create(prog = 'dot', format = 'svg'))","d569b280":"model_1.compile(\n    loss = 'mean_squared_error',\n    optimizer = SGD(\n        lr = 0.1,\n        decay = 1e-6,\n        momentum = 0.9,\n        nesterov = True\n    ),\n    metrics = ['accuracy']\n)","c8043ee6":"history = model_1.fit(X_train, Y_train, batch_size = 128, epochs = 8, validation_data = (X_test, Y_test), verbose = 1)","07889f53":"model_1.evaluate(X_test, Y_test, verbose = 1)","9bed7c60":"fig, axes = plt.subplots(nrows = 4, ncols = 4, figsize = (16, 16))\nplt.setp(axes.flat, xticks = [], yticks = [])\nfor i, ax in enumerate(axes.flat):\n    index = randint(0, 6329)\n    img = X_train[index].reshape(96, 96)\n    landmark_x_original, landmark_y_original = get_coordinates(Y_train[index])\n    landmark_x, landmark_y = get_coordinates(model_1.predict(X_train[index].reshape(1, 96, 96, 1))[0])\n    ax.imshow(img, cmap = 'gray')\n    ax.scatter(landmark_x_original, landmark_y_original, c = 'r')\n    ax.scatter(landmark_x, landmark_y, c = 'b')\n    ax.set_xlabel('Results on Training by Model 1: Face_' + str(index))\nplt.show()","13d05d2c":"fig, axes = plt.subplots(nrows = 4, ncols = 4, figsize = (16, 16))\nplt.setp(axes.flat, xticks = [], yticks = [])\nfor i, ax in enumerate(axes.flat):\n    index = randint(0, 704)\n    img = X_test[index].reshape(96, 96)\n    landmark_x_original, landmark_y_original = get_coordinates(Y_train[index])\n    landmark_x, landmark_y = get_coordinates(model_1.predict(X_test[index].reshape(1, 96, 96, 1))[0])\n    ax.imshow(img, cmap = 'gray')\n    ax.scatter(landmark_x_original, landmark_y_original, c = 'r')\n    ax.scatter(landmark_x, landmark_y, c = 'b')\n    ax.set_xlabel('Results on Test Set by Model 1: Face_' + str(index))\nplt.show()","9548a4c8":"model_1.save('model_1.h5')","c2b253c3":"model_2 = Sequential([\n    BatchNormalization(input_shape = (96, 96, 1)),\n    \n    Conv2D(24, (5, 5), padding = 'same', activation = 'relu', input_shape = (96, 96, 1)),\n    MaxPooling2D(2, 2, padding = 'valid'),\n    Dropout(rate = 0.75),\n    \n    Conv2D(36, (5, 5), activation = 'relu'),\n    MaxPooling2D(2, 2, padding = 'valid'),\n    Dropout(rate = 0.75),\n    \n    Conv2D(48, (5, 5), activation = 'relu'),\n    MaxPooling2D(2, 2, padding = 'valid'),\n    Dropout(rate = 0.75),\n    \n    Conv2D(64, (3, 3), activation = 'relu'),\n    MaxPooling2D(2, 2, padding = 'valid'),\n    Dropout(rate = 0.75),\n    \n    Conv2D(64, (3, 3), activation = 'relu'),\n    GlobalAveragePooling2D(),\n    Dropout(rate = 0.75),\n    \n    Dense(500, activation = 'relu'),\n    Dropout(rate = 0.75),\n    Dense(90, activation = 'relu'),\n    Dropout(rate = 0.75),\n    Dense(4),\n])","ad560d8e":"model_2.summary()","937cd1fd":"SVG(model_to_dot(model_2, show_shapes = True, show_layer_names = True).create(prog = 'dot', format = 'svg'))","7e33a06e":"model_2.compile(optimizer = 'rmsprop', loss = 'mse', metrics = ['accuracy'])","effbaae7":"history_2 = model_2.fit(\n    X_train, Y_train,\n    validation_data = (\n        X_test,\n        Y_test\n    ),\n    batch_size = 20,\n    epochs = 5,\n    shuffle = True,\n    verbose = 1\n)","b5ebd631":"model_2.evaluate(X_test, Y_test, verbose = 1)","f3c4350c":"fig, axes = plt.subplots(nrows = 4, ncols = 4, figsize = (16, 16))\nplt.setp(axes.flat, xticks = [], yticks = [])\nfor i, ax in enumerate(axes.flat):\n    index = randint(0, 6329)\n    img = X_train[index].reshape(96, 96)\n    landmark_x_original, landmark_y_original = get_coordinates(Y_train[index])\n    landmark_x, landmark_y = get_coordinates(model_2.predict(X_train[index].reshape(1, 96, 96, 1))[0])\n    ax.imshow(img, cmap = 'gray')\n    ax.scatter(landmark_x_original, landmark_y_original, c = 'r')\n    ax.scatter(landmark_x, landmark_y, c = 'b')\n    ax.set_xlabel('Results on Training by Model 2: Face_' + str(index))\nplt.show()","9ff777eb":"fig, axes = plt.subplots(nrows = 4, ncols = 4, figsize = (16, 16))\nplt.setp(axes.flat, xticks = [], yticks = [])\nfor i, ax in enumerate(axes.flat):\n    index = randint(0, 704)\n    img = X_test[index].reshape(96, 96)\n    landmark_x_original, landmark_y_original = get_coordinates(Y_train[index])\n    landmark_x, landmark_y = get_coordinates(model_2.predict(X_test[index].reshape(1, 96, 96, 1))[0])\n    ax.imshow(img, cmap = 'gray')\n    ax.scatter(landmark_x_original, landmark_y_original, c = 'r')\n    ax.scatter(landmark_x, landmark_y, c = 'b')\n    ax.set_xlabel('Results on Test Set by Model 2: Face_' + str(index))\nplt.show()","fb590540":"model_2.save('model_2.h5')","c131c69a":"## Model 1","90b2ab5c":"## Model 2"}}