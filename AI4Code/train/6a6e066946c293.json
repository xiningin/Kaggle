{"cell_type":{"3bd490b9":"code","3999b974":"code","466cc5d9":"code","9c0c4dbb":"code","41e0a3c7":"code","95381d90":"code","242e772e":"code","8b8a3d4b":"code","07f1586e":"code","e8f0b43e":"code","74888b0c":"code","8bfb965a":"code","ff286d56":"code","7e77d1cc":"code","2ca7d9c5":"code","42955434":"code","f22bd4c6":"code","42604ac5":"code","3c631731":"code","f07852e7":"code","f016628f":"code","01a2351f":"code","5401be52":"code","201f53a2":"code","2608f2af":"code","20f760cb":"code","bac96cfb":"code","65bc1676":"code","2193c749":"code","c249e7a4":"code","5db6efe3":"code","e8c355fa":"code","79ad7cab":"code","4e3b8bd3":"code","d208511b":"code","989f2d6a":"code","994fbb9a":"code","441ab947":"code","bc03aecb":"code","a260ace5":"code","97fc66c7":"code","3d355d6f":"code","a994cfbf":"code","fd6168fe":"code","7d533ad7":"code","473cb10f":"code","a5e3b129":"code","7d99b0ac":"code","35b88a4d":"code","e4d5de8a":"code","ae389e75":"code","e27af1cd":"code","d71ebe71":"code","8d1ae732":"code","5e17d1b3":"code","d54113da":"code","e6bee067":"code","031f0a0a":"code","22af249b":"code","4ce82336":"code","0e1a16f7":"code","2f5a91ec":"code","b37889bd":"code","11c805e1":"code","6f49679c":"code","86e34fcb":"code","e594b21c":"code","bbc9cfe1":"code","88a329af":"code","ff22e82b":"code","3c2d4417":"code","33722234":"code","2a9b4eef":"code","ae2e2a6f":"code","bfcf2ece":"code","9f1207fe":"code","3027984c":"code","53df9d36":"code","b6315f33":"code","0b9b0bf2":"code","cd521be8":"code","8f54d0bc":"code","798bff6c":"code","fc9cd980":"code","dbcbd13b":"code","9460532f":"code","eb2735d4":"code","efe38378":"code","28a008e1":"code","19659f5a":"code","4aafb69a":"code","092299da":"code","6cf13c7a":"code","60a22a34":"code","cc5b8b2c":"code","5897d0a3":"code","d3ea387d":"code","b4075c3f":"code","2579e9f3":"code","7a4764cd":"code","34e34ce3":"code","37a5bca2":"markdown","771496b1":"markdown","284af496":"markdown","58bfeae8":"markdown","1d658266":"markdown","db8c11d4":"markdown","c6656234":"markdown","12567ef1":"markdown","64796a3d":"markdown","392e77f6":"markdown","75c1bc86":"markdown","dcdfcb0a":"markdown","cfe84273":"markdown","44f69c76":"markdown","3546b6fc":"markdown","d90658a5":"markdown","a1c3b1b9":"markdown","bc4d2248":"markdown","1efb2149":"markdown","dcda08f5":"markdown","670a1873":"markdown","6c9949ac":"markdown","be7baeab":"markdown","56370627":"markdown","8b63e805":"markdown","6a804c23":"markdown","e2005214":"markdown","41371e6e":"markdown","abc409cb":"markdown","82fc037d":"markdown","638ac86c":"markdown","2cd6630b":"markdown","064fcce2":"markdown","980a55c5":"markdown","f2b0cebc":"markdown","4205d448":"markdown","74b100c3":"markdown","dc58ede3":"markdown","d4630754":"markdown","a22002b6":"markdown","9e1c0fe7":"markdown","125d5a55":"markdown","18b5ffd1":"markdown","3f9123d9":"markdown","bc87e82f":"markdown","cea33a26":"markdown","716d9c03":"markdown","f8cac007":"markdown","7ecf6515":"markdown","daff5ab3":"markdown","bbb83b0a":"markdown","38d5cbb9":"markdown","c084fcfa":"markdown","bc0c5a47":"markdown","b5b258ef":"markdown","c8b65202":"markdown","54f25db8":"markdown","360f0708":"markdown","c4963c23":"markdown","5b75363a":"markdown","ab16664c":"markdown","15ac3095":"markdown","b9b37601":"markdown","be055fcc":"markdown","54765ff4":"markdown","b2cbe3ff":"markdown","1efc6686":"markdown","27735285":"markdown","24667f32":"markdown","f5eca09b":"markdown","135e7e68":"markdown","79fca413":"markdown","8939a7d5":"markdown","213f70d1":"markdown","64c436ea":"markdown","a8898dad":"markdown","1b6bc35e":"markdown","dfe779c0":"markdown","15961f2c":"markdown","d4074810":"markdown","93c4152d":"markdown","600d3901":"markdown","fd5c2b8e":"markdown","e926d7ad":"markdown","e4e58be4":"markdown","5267555c":"markdown","3fe9ecf0":"markdown","ca524714":"markdown","18842647":"markdown","8eee765f":"markdown","72a4b401":"markdown","451729a7":"markdown","aec2695e":"markdown","2638b785":"markdown","a3ecbcd9":"markdown","ee7a08df":"markdown","4fa9c04f":"markdown","4348ccb6":"markdown","3e595e6b":"markdown","5092d8b2":"markdown","d97f8d1e":"markdown","cd1d84ed":"markdown","ee2fa54f":"markdown","de2bdd61":"markdown","1342e541":"markdown","9389fbe3":"markdown","14760608":"markdown","b64bbf6d":"markdown","dcbc9a12":"markdown","f01aa465":"markdown","5fab02b8":"markdown","79e2be1c":"markdown","19d5b257":"markdown","59495590":"markdown","02ac609e":"markdown","6583090f":"markdown","9a3ce8e8":"markdown","2c8adff5":"markdown","4433eea3":"markdown","16d15313":"markdown","0ee6df72":"markdown","61a09017":"markdown","f78a0062":"markdown","8a1f01b5":"markdown","a69f8be3":"markdown","f86222c5":"markdown","a29d4890":"markdown","91d579f3":"markdown","88d60375":"markdown","869da75d":"markdown","b6e12f33":"markdown","49ec53cb":"markdown","25dc5011":"markdown","2e4289d0":"markdown"},"source":{"3bd490b9":"# this is just to know how much time will it take to run this entire ipython notebook \nfrom datetime import datetime\n# globalstart = datetime.now()\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nmatplotlib.use('nbagg')\n\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'figure.max_open_warning': 0})\n\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport os\nfrom scipy import sparse\nfrom scipy.sparse import csr_matrix\n\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport random","3999b974":"start = datetime.now()\nif not os.path.isfile('data.csv'):\n    # Create a file 'data.csv' before reading it\n    # Read all the files in netflix and store them in one big file('data.csv')\n    # reading from each of the four files and appending each rating to a global file 'train.csv'\n    data = open('data.csv', mode='w')\n    \n    row = list()\n    files=['data_folder\/combined_data_1.txt','data_folder\/combined_data_2.txt', \n           'data_folder\/combined_data_3.txt', 'data_folder\/combined_data_4.txt']\n    for file in files:\n        print(\"Reading ratings from {}...\".format(file))\n        with open(file) as f:\n            for line in f: \n                del row[:]\n                line = line.strip()\n                if line.endswith(':'):\n                    # All below are ratings for this movie, until another movie appears.\n                    movie_id = line.replace(':', '')\n                else:\n                    row = [x for x in line.split(',')]\n                    row.insert(0, movie_id)\n                    data.write(','.join(row))\n                    data.write('\\n')\n        print(\"Done.\\n\")\n    data.close()\nprint('Time taken :', datetime.now() - start)","466cc5d9":"print(\"creating the dataframe from data.csv file..\")\ndf = pd.read_csv('data.csv', sep=',', \n                       names=['movie', 'user','rating','date'])\ndf.date = pd.to_datetime(df.date)\nprint('Done.\\n')\n\n# arranging the ratings according to time.\nprint('Sorting the dataframe by date..')\ndf.sort_values(by='date', inplace=True)\nprint('Done..')","9c0c4dbb":"df.head()","41e0a3c7":"df.describe()['rating']","95381d90":"# just to make sure that all Nan containing rows are deleted..\nprint(\"No of Nan values in our dataframe : \", sum(df.isnull().any()))","242e772e":"dup_bool = df.duplicated(['movie','user','rating'])\ndups = sum(dup_bool) # by considering all columns..( including timestamp)\nprint(\"There are {} duplicate rating entries in the data..\".format(dups))","8b8a3d4b":"print(\"Total data \")\nprint(\"-\"*50)\nprint(\"\\nTotal no of ratings :\",df.shape[0])\nprint(\"Total No of Users   :\", len(np.unique(df.user)))\nprint(\"Total No of movies  :\", len(np.unique(df.movie)))","07f1586e":"if not os.path.isfile('train.csv'):\n    # create the dataframe and store it in the disk for offline purposes..\n    df.iloc[:int(df.shape[0]*0.80)].to_csv(\"train.csv\", index=False)\n\nif not os.path.isfile('test.csv'):\n    # create the dataframe and store it in the disk for offline purposes..\n    df.iloc[int(df.shape[0]*0.80):].to_csv(\"test.csv\", index=False)\n\ntrain_df = pd.read_csv(\"train.csv\", parse_dates=['date'])\ntest_df = pd.read_csv(\"test.csv\")","e8f0b43e":"# movies = train_df.movie.value_counts()\n# users = train_df.user.value_counts()\nprint(\"Training data \")\nprint(\"-\"*50)\nprint(\"\\nTotal no of ratings :\",train_df.shape[0])\nprint(\"Total No of Users   :\", len(np.unique(train_df.user)))\nprint(\"Total No of movies  :\", len(np.unique(train_df.movie)))","74888b0c":"print(\"Test data \")\nprint(\"-\"*50)\nprint(\"\\nTotal no of ratings :\",test_df.shape[0])\nprint(\"Total No of Users   :\", len(np.unique(test_df.user)))\nprint(\"Total No of movies  :\", len(np.unique(test_df.movie)))","8bfb965a":"# method to make y-axis more readable\ndef human(num, units = 'M'):\n    units = units.lower()\n    num = float(num)\n    if units == 'k':\n        return str(num\/10**3) + \" K\"\n    elif units == 'm':\n        return str(num\/10**6) + \" M\"\n    elif units == 'b':\n        return str(num\/10**9) +  \" B\"","ff286d56":"fig, ax = plt.subplots()\nplt.title('Distribution of ratings over Training dataset', fontsize=15)\nsns.countplot(train_df.rating)\nax.set_yticklabels([human(item, 'M') for item in ax.get_yticks()])\nax.set_ylabel('No. of Ratings(Millions)')\n\nplt.show()","7e77d1cc":"# It is used to skip the warning ''SettingWithCopyWarning''.. \npd.options.mode.chained_assignment = None  # default='warn'\n\ntrain_df['day_of_week'] = train_df.date.dt.weekday_name\n\ntrain_df.tail()","2ca7d9c5":"ax = train_df.resample('m', on='date')['rating'].count().plot()\nax.set_title('No of ratings per month (Training data)')\nplt.xlabel('Month')\nplt.ylabel('No of ratings(per month)')\nax.set_yticklabels([human(item, 'M') for item in ax.get_yticks()])\nplt.show()","42955434":"no_of_rated_movies_per_user = train_df.groupby(by='user')['rating'].count().sort_values(ascending=False)\n\nno_of_rated_movies_per_user.head()","f22bd4c6":"fig = plt.figure(figsize=plt.figaspect(.5))\n\nax1 = plt.subplot(121)\nsns.kdeplot(no_of_rated_movies_per_user, shade=True, ax=ax1)\nplt.xlabel('No of ratings by user')\nplt.title(\"PDF\")\n\nax2 = plt.subplot(122)\nsns.kdeplot(no_of_rated_movies_per_user, shade=True, cumulative=True,ax=ax2)\nplt.xlabel('No of ratings by user')\nplt.title('CDF')\n\nplt.show()","42604ac5":"no_of_rated_movies_per_user.describe()","3c631731":"quantiles = no_of_rated_movies_per_user.quantile(np.arange(0,1.01,0.01), interpolation='higher')","f07852e7":"plt.title(\"Quantiles and their Values\")\nquantiles.plot()\n# quantiles with 0.05 difference\nplt.scatter(x=quantiles.index[::5], y=quantiles.values[::5], c='orange', label=\"quantiles with 0.05 intervals\")\n# quantiles with 0.25 difference\nplt.scatter(x=quantiles.index[::25], y=quantiles.values[::25], c='m', label = \"quantiles with 0.25 intervals\")\nplt.ylabel('No of ratings by user')\nplt.xlabel('Value at the quantile')\nplt.legend(loc='best')\n\n# annotate the 25th, 50th, 75th and 100th percentile values....\nfor x,y in zip(quantiles.index[::25], quantiles[::25]):\n    plt.annotate(s=\"({} , {})\".format(x,y), xy=(x,y), xytext=(x-0.05, y+500)\n                ,fontweight='bold')\n\n\nplt.show()","f016628f":"quantiles[::5]","01a2351f":"print('\\n No of ratings at last 5 percentile : {}\\n'.format(sum(no_of_rated_movies_per_user>= 749)) )","5401be52":"no_of_ratings_per_movie = train_df.groupby(by='movie')['rating'].count().sort_values(ascending=False)\n\nfig = plt.figure(figsize=plt.figaspect(.5))\nax = plt.gca()\nplt.plot(no_of_ratings_per_movie.values)\nplt.title('# RATINGS per Movie')\nplt.xlabel('Movie')\nplt.ylabel('No of Users who rated a movie')\nax.set_xticklabels([])\n\nplt.show()","201f53a2":"fig, ax = plt.subplots()\nsns.countplot(x='day_of_week', data=train_df, ax=ax)\nplt.title('No of ratings on each day...')\nplt.ylabel('Total no of ratings')\nplt.xlabel('')\nax.set_yticklabels([human(item, 'M') for item in ax.get_yticks()])\nplt.show()","2608f2af":"start = datetime.now()\nfig = plt.figure(figsize=plt.figaspect(.45))\nsns.boxplot(y='rating', x='day_of_week', data=train_df)\nplt.show()\nprint(datetime.now() - start)","20f760cb":"avg_week_df = train_df.groupby(by=['day_of_week'])['rating'].mean()\nprint(\" AVerage ratings\")\nprint(\"-\"*30)\nprint(avg_week_df)\nprint(\"\\n\")","bac96cfb":"start = datetime.now()\nif os.path.isfile('train_sparse_matrix.npz'):\n    print(\"It is present in your pwd, getting it from disk....\")\n    # just get it from the disk instead of computing it\n    train_sparse_matrix = sparse.load_npz('train_sparse_matrix.npz')\n    print(\"DONE..\")\nelse: \n    print(\"We are creating sparse_matrix from the dataframe..\")\n    # create sparse_matrix and store it for after usage.\n    # csr_matrix(data_values, (row_index, col_index), shape_of_matrix)\n    # It should be in such a way that, MATRIX[row, col] = data\n    train_sparse_matrix = sparse.csr_matrix((train_df.rating.values, (train_df.user.values,\n                                               train_df.movie.values)),)\n    \n    print('Done. It\\'s shape is : (user, movie) : ',train_sparse_matrix.shape)\n    print('Saving it into disk for furthur usage..')\n    # save it into disk\n    sparse.save_npz(\"train_sparse_matrix.npz\", train_sparse_matrix)\n    print('Done..\\n')\n\nprint(datetime.now() - start)","65bc1676":"us,mv = train_sparse_matrix.shape\nelem = train_sparse_matrix.count_nonzero()\n\nprint(\"Sparsity Of Train matrix : {} % \".format(  (1-(elem\/(us*mv))) * 100) )","2193c749":"start = datetime.now()\nif os.path.isfile('test_sparse_matrix.npz'):\n    print(\"It is present in your pwd, getting it from disk....\")\n    # just get it from the disk instead of computing it\n    test_sparse_matrix = sparse.load_npz('test_sparse_matrix.npz')\n    print(\"DONE..\")\nelse: \n    print(\"We are creating sparse_matrix from the dataframe..\")\n    # create sparse_matrix and store it for after usage.\n    # csr_matrix(data_values, (row_index, col_index), shape_of_matrix)\n    # It should be in such a way that, MATRIX[row, col] = data\n    test_sparse_matrix = sparse.csr_matrix((test_df.rating.values, (test_df.user.values,\n                                               test_df.movie.values)))\n    \n    print('Done. It\\'s shape is : (user, movie) : ',test_sparse_matrix.shape)\n    print('Saving it into disk for furthur usage..')\n    # save it into disk\n    sparse.save_npz(\"test_sparse_matrix.npz\", test_sparse_matrix)\n    print('Done..\\n')\n    \nprint(datetime.now() - start)","c249e7a4":"us,mv = test_sparse_matrix.shape\nelem = test_sparse_matrix.count_nonzero()\n\nprint(\"Sparsity Of Test matrix : {} % \".format(  (1-(elem\/(us*mv))) * 100) )","5db6efe3":"# get the user averages in dictionary (key: user_id\/movie_id, value: avg rating)\n\ndef get_average_ratings(sparse_matrix, of_users):\n    \n    # average ratings of user\/axes\n    ax = 1 if of_users else 0 # 1 - User axes,0 - Movie axes\n\n    # \".A1\" is for converting Column_Matrix to 1-D numpy array \n    sum_of_ratings = sparse_matrix.sum(axis=ax).A1\n    # Boolean matrix of ratings ( whether a user rated that movie or not)\n    is_rated = sparse_matrix!=0\n    # no of ratings that each user OR movie..\n    no_of_ratings = is_rated.sum(axis=ax).A1\n    \n    # max_user  and max_movie ids in sparse matrix \n    u,m = sparse_matrix.shape\n    # creae a dictonary of users and their average ratigns..\n    average_ratings = { i : sum_of_ratings[i]\/no_of_ratings[i]\n                                 for i in range(u if of_users else m) \n                                    if no_of_ratings[i] !=0}\n\n    # return that dictionary of average ratings\n    return average_ratings","e8c355fa":"train_averages = dict()\n# get the global average of ratings in our train set.\ntrain_global_average = train_sparse_matrix.sum()\/train_sparse_matrix.count_nonzero()\ntrain_averages['global'] = train_global_average\ntrain_averages","79ad7cab":"train_averages['user'] = get_average_ratings(train_sparse_matrix, of_users=True)\nprint('\\nAverage rating of user 10 :',train_averages['user'][10])","4e3b8bd3":"train_averages['movie'] =  get_average_ratings(train_sparse_matrix, of_users=False)\nprint('\\n AVerage rating of movie 15 :',train_averages['movie'][15])","d208511b":"start = datetime.now()\n# draw pdfs for average rating per user and average\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=plt.figaspect(.5))\nfig.suptitle('Avg Ratings per User and per Movie', fontsize=15)\n\nax1.set_title('Users-Avg-Ratings')\n# get the list of average user ratings from the averages dictionary..\nuser_averages = [rat for rat in train_averages['user'].values()]\nsns.distplot(user_averages, ax=ax1, hist=False, \n             kde_kws=dict(cumulative=True), label='Cdf')\nsns.distplot(user_averages, ax=ax1, hist=False,label='Pdf')\n\nax2.set_title('Movies-Avg-Rating')\n# get the list of movie_average_ratings from the dictionary..\nmovie_averages = [rat for rat in train_averages['movie'].values()]\nsns.distplot(movie_averages, ax=ax2, hist=False, \n             kde_kws=dict(cumulative=True), label='Cdf')\nsns.distplot(movie_averages, ax=ax2, hist=False, label='Pdf')\n\nplt.show()\nprint(datetime.now() - start)","989f2d6a":"total_users = len(np.unique(df.user))\nusers_train = len(train_averages['user'])\nnew_users = total_users - users_train\n\nprint('\\nTotal number of Users  :', total_users)\nprint('\\nNumber of Users in Train data :', users_train)\nprint(\"\\nNo of Users that didn't appear in train data: {}({} %) \\n \".format(new_users,\n                                                                        np.round((new_users\/total_users)*100, 2)))","994fbb9a":"total_movies = len(np.unique(df.movie))\nmovies_train = len(train_averages['movie'])\nnew_movies = total_movies - movies_train\n\nprint('\\nTotal number of Movies  :', total_movies)\nprint('\\nNumber of Users in Train data :', movies_train)\nprint(\"\\nNo of Movies that didn't appear in train data: {}({} %) \\n \".format(new_movies,\n                                                                        np.round((new_movies\/total_movies)*100, 2)))","441ab947":"from sklearn.metrics.pairwise import cosine_similarity\n\n\ndef compute_user_similarity(sparse_matrix, compute_for_few=False, top = 100, verbose=False, verb_for_n_rows = 20,\n                            draw_time_taken=True):\n    no_of_users, _ = sparse_matrix.shape\n    # get the indices of  non zero rows(users) from our sparse matrix\n    row_ind, col_ind = sparse_matrix.nonzero()\n    row_ind = sorted(set(row_ind)) # we don't have to\n    time_taken = list() #  time taken for finding similar users for an user..\n    \n    # we create rows, cols, and data lists.., which can be used to create sparse matrices\n    rows, cols, data = list(), list(), list()\n    if verbose: print(\"Computing top\",top,\"similarities for each user..\")\n    \n    start = datetime.now()\n    temp = 0\n    \n    for row in row_ind[:top] if compute_for_few else row_ind:\n        temp = temp+1\n        prev = datetime.now()\n        \n        # get the similarity row for this user with all other users\n        sim = cosine_similarity(sparse_matrix.getrow(row), sparse_matrix).ravel()\n        # We will get only the top ''top'' most similar users and ignore rest of them..\n        top_sim_ind = sim.argsort()[-top:]\n        top_sim_val = sim[top_sim_ind]\n        \n        # add them to our rows, cols and data\n        rows.extend([row]*top)\n        cols.extend(top_sim_ind)\n        data.extend(top_sim_val)\n        time_taken.append(datetime.now().timestamp() - prev.timestamp())\n        if verbose:\n            if temp%verb_for_n_rows == 0:\n                print(\"computing done for {} users [  time elapsed : {}  ]\"\n                      .format(temp, datetime.now()-start))\n            \n        \n    # lets create sparse matrix out of these and return it\n    if verbose: print('Creating Sparse matrix from the computed similarities')\n    #return rows, cols, data\n    \n    if draw_time_taken:\n        plt.plot(time_taken, label = 'time taken for each user')\n        plt.plot(np.cumsum(time_taken), label='Total time')\n        plt.legend(loc='best')\n        plt.xlabel('User')\n        plt.ylabel('Time (seconds)')\n        plt.show()\n        \n    return sparse.csr_matrix((data, (rows, cols)), shape=(no_of_users, no_of_users)), time_taken      ","bc03aecb":"start = datetime.now()\nu_u_sim_sparse, _ = compute_user_similarity(train_sparse_matrix, compute_for_few=True, top = 100,\n                                                     verbose=True)\nprint(\"-\"*100)\nprint(\"Time taken :\",datetime.now()-start)","a260ace5":"from datetime import datetime\nfrom sklearn.decomposition import TruncatedSVD\n\nstart = datetime.now()\n\n# initilaize the algorithm with some parameters..\n# All of them are default except n_components. n_itr is for Randomized SVD solver.\nnetflix_svd = TruncatedSVD(n_components=500, algorithm='randomized', random_state=15)\ntrunc_svd = netflix_svd.fit_transform(train_sparse_matrix)\n\nprint(datetime.now()-start)","97fc66c7":"expl_var = np.cumsum(netflix_svd.explained_variance_ratio_)","3d355d6f":"fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=plt.figaspect(.5))\n\nax1.set_ylabel(\"Variance Explained\", fontsize=15)\nax1.set_xlabel(\"# Latent Facors\", fontsize=15)\nax1.plot(expl_var)\n# annote some (latentfactors, expl_var) to make it clear\nind = [1, 2,4,8,20, 60, 100, 200, 300, 400, 500]\nax1.scatter(x = [i-1 for i in ind], y = expl_var[[i-1 for i in ind]], c='#ff3300')\nfor i in ind:\n    ax1.annotate(s =\"({}, {})\".format(i,  np.round(expl_var[i-1], 2)), xy=(i-1, expl_var[i-1]),\n                xytext = ( i+20, expl_var[i-1] - 0.01), fontweight='bold')\n\nchange_in_expl_var = [expl_var[i+1] - expl_var[i] for i in range(len(expl_var)-1)]\nax2.plot(change_in_expl_var)\n\n\n\nax2.set_ylabel(\"Gain in Var_Expl with One Additional LF\", fontsize=10)\nax2.yaxis.set_label_position(\"right\")\nax2.set_xlabel(\"# Latent Facors\", fontsize=20)\n\nplt.show()","a994cfbf":"for i in ind:\n    print(\"({}, {})\".format(i, np.round(expl_var[i-1], 2)))","fd6168fe":"# Let's project our Original U_M matrix into into 500 Dimensional space...\nstart = datetime.now()\ntrunc_matrix = train_sparse_matrix.dot(netflix_svd.components_.T)\nprint(datetime.now()- start)","7d533ad7":"type(trunc_matrix), trunc_matrix.shape","473cb10f":"if not os.path.isfile('trunc_sparse_matrix.npz'):\n    # create that sparse sparse matrix\n    trunc_sparse_matrix = sparse.csr_matrix(trunc_matrix)\n    # Save this truncated sparse matrix for later usage..\n    sparse.save_npz('trunc_sparse_matrix', trunc_sparse_matrix)\nelse:\n    trunc_sparse_matrix = sparse.load_npz('trunc_sparse_matrix.npz')","a5e3b129":"trunc_sparse_matrix.shape","7d99b0ac":"start = datetime.now()\ntrunc_u_u_sim_matrix, _ = compute_user_similarity(trunc_sparse_matrix, compute_for_few=True, top=50, verbose=True, \n                                                 verb_for_n_rows=10)\nprint(\"-\"*50)\nprint(\"time:\",datetime.now()-start)","35b88a4d":"start = datetime.now()\nif not os.path.isfile('m_m_sim_sparse.npz'):\n    print(\"It seems you don't have that file. Computing movie_movie similarity...\")\n    start = datetime.now()\n    m_m_sim_sparse = cosine_similarity(X=train_sparse_matrix.T, dense_output=False)\n    print(\"Done..\")\n    # store this sparse matrix in disk before using it. For future purposes.\n    print(\"Saving it to disk without the need of re-computing it again.. \")\n    sparse.save_npz(\"m_m_sim_sparse.npz\", m_m_sim_sparse)\n    print(\"Done..\")\nelse:\n    print(\"It is there, We will get it.\")\n    m_m_sim_sparse = sparse.load_npz(\"m_m_sim_sparse.npz\")\n    print(\"Done ...\")\n\nprint(\"It's a \",m_m_sim_sparse.shape,\" dimensional matrix\")\n\nprint(datetime.now() - start)","e4d5de8a":"m_m_sim_sparse.shape","ae389e75":"movie_ids = np.unique(m_m_sim_sparse.nonzero()[1])","e27af1cd":"start = datetime.now()\nsimilar_movies = dict()\nfor movie in movie_ids:\n    # get the top similar movies and store them in the dictionary\n    sim_movies = m_m_sim_sparse[movie].toarray().ravel().argsort()[::-1][1:]\n    similar_movies[movie] = sim_movies[:100]\nprint(datetime.now() - start)\n\n# just testing similar movies for movie_15\nsimilar_movies[15]","d71ebe71":"# First Let's load the movie details into soe dataframe..\n# movie details are in 'netflix\/movie_titles.csv'\n\nmovie_titles = pd.read_csv(\"data_folder\/movie_titles.csv\", sep=',', header = None,\n                           names=['movie_id', 'year_of_release', 'title'], verbose=True,\n                      index_col = 'movie_id', encoding = \"ISO-8859-1\")\n\nmovie_titles.head()","8d1ae732":"mv_id = 67\n\nprint(\"\\nMovie ----->\",movie_titles.loc[mv_id].values[1])\n\nprint(\"\\nIt has {} Ratings from users.\".format(train_sparse_matrix[:,mv_id].getnnz()))\n\nprint(\"\\nWe have {} movies which are similarto this  and we will get only top most..\".format(m_m_sim_sparse[:,mv_id].getnnz()))","5e17d1b3":"similarities = m_m_sim_sparse[mv_id].toarray().ravel()\n\nsimilar_indices = similarities.argsort()[::-1][1:]\n\nsimilarities[similar_indices]\n\nsim_indices = similarities.argsort()[::-1][1:] # It will sort and reverse the array and ignore its similarity (ie.,1)\n                                               # and return its indices(movie_ids)","d54113da":"plt.plot(similarities[sim_indices], label='All the ratings')\nplt.plot(similarities[sim_indices[:100]], label='top 100 similar movies')\nplt.title(\"Similar Movies of {}(movie_id)\".format(mv_id), fontsize=20)\nplt.xlabel(\"Movies (Not Movie_Ids)\", fontsize=15)\nplt.ylabel(\"Cosine Similarity\",fontsize=15)\nplt.legend()\nplt.show()","e6bee067":"movie_titles.loc[sim_indices[:10]]","031f0a0a":"def get_sample_sparse_matrix(sparse_matrix, no_users, no_movies, path, verbose = True):\n    \"\"\"\n        It will get it from the ''path'' if it is present  or It will create \n        and store the sampled sparse matrix in the path specified.\n    \"\"\"\n\n    # get (row, col) and (rating) tuple from sparse_matrix...\n    row_ind, col_ind, ratings = sparse.find(sparse_matrix)\n    users = np.unique(row_ind)\n    movies = np.unique(col_ind)\n\n    print(\"Original Matrix : (users, movies) -- ({} {})\".format(len(users), len(movies)))\n    print(\"Original Matrix : Ratings -- {}\\n\".format(len(ratings)))\n\n    # It just to make sure to get same sample everytime we run this program..\n    # and pick without replacement....\n    np.random.seed(15)\n    sample_users = np.random.choice(users, no_users, replace=False)\n    sample_movies = np.random.choice(movies, no_movies, replace=False)\n    # get the boolean mask or these sampled_items in originl row\/col_inds..\n    mask = np.logical_and( np.isin(row_ind, sample_users),\n                      np.isin(col_ind, sample_movies) )\n    \n    sample_sparse_matrix = sparse.csr_matrix((ratings[mask], (row_ind[mask], col_ind[mask])),\n                                             shape=(max(sample_users)+1, max(sample_movies)+1))\n\n    if verbose:\n        print(\"Sampled Matrix : (users, movies) -- ({} {})\".format(len(sample_users), len(sample_movies)))\n        print(\"Sampled Matrix : Ratings --\", format(ratings[mask].shape[0]))\n\n    print('Saving it into disk for furthur usage..')\n    # save it into disk\n    sparse.save_npz(path, sample_sparse_matrix)\n    if verbose:\n            print('Done..\\n')\n    \n    return sample_sparse_matrix","22af249b":"start = datetime.now()\npath = \"sample\/small\/sample_train_sparse_matrix.npz\"\nif os.path.isfile(path):\n    print(\"It is present in your pwd, getting it from disk....\")\n    # just get it from the disk instead of computing it\n    sample_train_sparse_matrix = sparse.load_npz(path)\n    print(\"DONE..\")\nelse: \n    # get 10k users and 1k movies from available data \n    sample_train_sparse_matrix = get_sample_sparse_matrix(train_sparse_matrix, no_users=10000, no_movies=1000,\n                                             path = path)\n\nprint(datetime.now() - start)","4ce82336":"start = datetime.now()\n\npath = \"sample\/small\/sample_test_sparse_matrix.npz\"\nif os.path.isfile(path):\n    print(\"It is present in your pwd, getting it from disk....\")\n    # just get it from the disk instead of computing it\n    sample_test_sparse_matrix = sparse.load_npz(path)\n    print(\"DONE..\")\nelse:\n    # get 5k users and 500 movies from available data \n    sample_test_sparse_matrix = get_sample_sparse_matrix(test_sparse_matrix, no_users=5000, no_movies=500,\n                                                 path = \"sample\/small\/sample_test_sparse_matrix.npz\")\nprint(datetime.now() - start)","0e1a16f7":"sample_train_averages = dict()","2f5a91ec":"# get the global average of ratings in our train set.\nglobal_average = sample_train_sparse_matrix.sum()\/sample_train_sparse_matrix.count_nonzero()\nsample_train_averages['global'] = global_average\nsample_train_averages","b37889bd":"sample_train_averages['user'] = get_average_ratings(sample_train_sparse_matrix, of_users=True)\nprint('\\nAverage rating of user 1515220 :',sample_train_averages['user'][1515220])","11c805e1":"sample_train_averages['movie'] =  get_average_ratings(sample_train_sparse_matrix, of_users=False)\nprint('\\n AVerage rating of movie 15153 :',sample_train_averages['movie'][15153])","6f49679c":"print('\\n No of ratings in Our Sampled train matrix is : {}\\n'.format(sample_train_sparse_matrix.count_nonzero()))\nprint('\\n No of ratings in Our Sampled test  matrix is : {}\\n'.format(sample_test_sparse_matrix.count_nonzero()))","86e34fcb":"# get users, movies and ratings from our samples train sparse matrix\nsample_train_users, sample_train_movies, sample_train_ratings = sparse.find(sample_train_sparse_matrix)","e594b21c":"############################################################\n# It took me almost 10 hours to prepare this train dataset.#\n############################################################\nstart = datetime.now()\nif os.path.isfile('sample\/small\/reg_train.csv'):\n    print(\"File already exists you don't have to prepare again...\" )\nelse:\n    print('preparing {} tuples for the dataset..\\n'.format(len(sample_train_ratings)))\n    with open('sample\/small\/reg_train.csv', mode='w') as reg_data_file:\n        count = 0\n        for (user, movie, rating)  in zip(sample_train_users, sample_train_movies, sample_train_ratings):\n            st = datetime.now()\n        #     print(user, movie)    \n            #--------------------- Ratings of \"movie\" by similar users of \"user\" ---------------------\n            # compute the similar Users of the \"user\"        \n            user_sim = cosine_similarity(sample_train_sparse_matrix[user], sample_train_sparse_matrix).ravel()\n            top_sim_users = user_sim.argsort()[::-1][1:] # we are ignoring 'The User' from its similar users.\n            # get the ratings of most similar users for this movie\n            top_ratings = sample_train_sparse_matrix[top_sim_users, movie].toarray().ravel()\n            # we will make it's length \"5\" by adding movie averages to .\n            top_sim_users_ratings = list(top_ratings[top_ratings != 0][:5])\n            top_sim_users_ratings.extend([sample_train_averages['movie'][movie]]*(5 - len(top_sim_users_ratings)))\n        #     print(top_sim_users_ratings, end=\" \")    \n\n\n            #--------------------- Ratings by \"user\"  to similar movies of \"movie\" ---------------------\n            # compute the similar movies of the \"movie\"        \n            movie_sim = cosine_similarity(sample_train_sparse_matrix[:,movie].T, sample_train_sparse_matrix.T).ravel()\n            top_sim_movies = movie_sim.argsort()[::-1][1:] # we are ignoring 'The User' from its similar users.\n            # get the ratings of most similar movie rated by this user..\n            top_ratings = sample_train_sparse_matrix[user, top_sim_movies].toarray().ravel()\n            # we will make it's length \"5\" by adding user averages to.\n            top_sim_movies_ratings = list(top_ratings[top_ratings != 0][:5])\n            top_sim_movies_ratings.extend([sample_train_averages['user'][user]]*(5-len(top_sim_movies_ratings))) \n        #     print(top_sim_movies_ratings, end=\" : -- \")\n\n            #-----------------prepare the row to be stores in a file-----------------#\n            row = list()\n            row.append(user)\n            row.append(movie)\n            # Now add the other features to this data...\n            row.append(sample_train_averages['global']) # first feature\n            # next 5 features are similar_users \"movie\" ratings\n            row.extend(top_sim_users_ratings)\n            # next 5 features are \"user\" ratings for similar_movies\n            row.extend(top_sim_movies_ratings)\n            # Avg_user rating\n            row.append(sample_train_averages['user'][user])\n            # Avg_movie rating\n            row.append(sample_train_averages['movie'][movie])\n\n            # finalley, The actual Rating of this user-movie pair...\n            row.append(rating)\n            count = count + 1\n\n            # add rows to the file opened..\n            reg_data_file.write(','.join(map(str, row)))\n            reg_data_file.write('\\n')        \n            if (count)%10000 == 0:\n                # print(','.join(map(str, row)))\n                print(\"Done for {} rows----- {}\".format(count, datetime.now() - start))\n\n\nprint(datetime.now() - start)","bbc9cfe1":"reg_train = pd.read_csv('sample\/small\/reg_train.csv', names = ['user', 'movie', 'GAvg', 'sur1', 'sur2', 'sur3', 'sur4', 'sur5','smr1', 'smr2', 'smr3', 'smr4', 'smr5', 'UAvg', 'MAvg', 'rating'], header=None)\nreg_train.head()","88a329af":"# get users, movies and ratings from the Sampled Test \nsample_test_users, sample_test_movies, sample_test_ratings = sparse.find(sample_test_sparse_matrix)","ff22e82b":"sample_train_averages['global']","3c2d4417":"start = datetime.now()\n\nif os.path.isfile('sample\/small\/reg_test.csv'):\n    print(\"It is already created...\")\nelse:\n\n    print('preparing {} tuples for the dataset..\\n'.format(len(sample_test_ratings)))\n    with open('sample\/small\/reg_test.csv', mode='w') as reg_data_file:\n        count = 0 \n        for (user, movie, rating)  in zip(sample_test_users, sample_test_movies, sample_test_ratings):\n            st = datetime.now()\n\n        #--------------------- Ratings of \"movie\" by similar users of \"user\" ---------------------\n            #print(user, movie)\n            try:\n                # compute the similar Users of the \"user\"        \n                user_sim = cosine_similarity(sample_train_sparse_matrix[user], sample_train_sparse_matrix).ravel()\n                top_sim_users = user_sim.argsort()[::-1][1:] # we are ignoring 'The User' from its similar users.\n                # get the ratings of most similar users for this movie\n                top_ratings = sample_train_sparse_matrix[top_sim_users, movie].toarray().ravel()\n                # we will make it's length \"5\" by adding movie averages to .\n                top_sim_users_ratings = list(top_ratings[top_ratings != 0][:5])\n                top_sim_users_ratings.extend([sample_train_averages['movie'][movie]]*(5 - len(top_sim_users_ratings)))\n                # print(top_sim_users_ratings, end=\"--\")\n\n            except (IndexError, KeyError):\n                # It is a new User or new Movie or there are no ratings for given user for top similar movies...\n                ########## Cold STart Problem ##########\n                top_sim_users_ratings.extend([sample_train_averages['global']]*(5 - len(top_sim_users_ratings)))\n                #print(top_sim_users_ratings)\n            except:\n                print(user, movie)\n                # we just want KeyErrors to be resolved. Not every Exception...\n                raise\n\n\n\n            #--------------------- Ratings by \"user\"  to similar movies of \"movie\" ---------------------\n            try:\n                # compute the similar movies of the \"movie\"        \n                movie_sim = cosine_similarity(sample_train_sparse_matrix[:,movie].T, sample_train_sparse_matrix.T).ravel()\n                top_sim_movies = movie_sim.argsort()[::-1][1:] # we are ignoring 'The User' from its similar users.\n                # get the ratings of most similar movie rated by this user..\n                top_ratings = sample_train_sparse_matrix[user, top_sim_movies].toarray().ravel()\n                # we will make it's length \"5\" by adding user averages to.\n                top_sim_movies_ratings = list(top_ratings[top_ratings != 0][:5])\n                top_sim_movies_ratings.extend([sample_train_averages['user'][user]]*(5-len(top_sim_movies_ratings))) \n                #print(top_sim_movies_ratings)\n            except (IndexError, KeyError):\n                #print(top_sim_movies_ratings, end=\" : -- \")\n                top_sim_movies_ratings.extend([sample_train_averages['global']]*(5-len(top_sim_movies_ratings)))\n                #print(top_sim_movies_ratings)\n            except :\n                raise\n\n            #-----------------prepare the row to be stores in a file-----------------#\n            row = list()\n            # add usser and movie name first\n            row.append(user)\n            row.append(movie)\n            row.append(sample_train_averages['global']) # first feature\n            #print(row)\n            # next 5 features are similar_users \"movie\" ratings\n            row.extend(top_sim_users_ratings)\n            #print(row)\n            # next 5 features are \"user\" ratings for similar_movies\n            row.extend(top_sim_movies_ratings)\n            #print(row)\n            # Avg_user rating\n            try:\n                row.append(sample_train_averages['user'][user])\n            except KeyError:\n                row.append(sample_train_averages['global'])\n            except:\n                raise\n            #print(row)\n            # Avg_movie rating\n            try:\n                row.append(sample_train_averages['movie'][movie])\n            except KeyError:\n                row.append(sample_train_averages['global'])\n            except:\n                raise\n            #print(row)\n            # finalley, The actual Rating of this user-movie pair...\n            row.append(rating)\n            #print(row)\n            count = count + 1\n\n            # add rows to the file opened..\n            reg_data_file.write(','.join(map(str, row)))\n            #print(','.join(map(str, row)))\n            reg_data_file.write('\\n')        \n            if (count)%1000 == 0:\n                #print(','.join(map(str, row)))\n                print(\"Done for {} rows----- {}\".format(count, datetime.now() - start))\n    print(\"\",datetime.now() - start)  ","33722234":"reg_test_df = pd.read_csv('sample\/small\/reg_test.csv', names = ['user', 'movie', 'GAvg', 'sur1', 'sur2', 'sur3', 'sur4', 'sur5',\n                                                          'smr1', 'smr2', 'smr3', 'smr4', 'smr5',\n                                                          'UAvg', 'MAvg', 'rating'], header=None)\nreg_test_df.head(4)","2a9b4eef":"from surprise import Reader, Dataset","ae2e2a6f":"# It is to specify how to read the dataframe.\n# for our dataframe, we don't have to specify anything extra..\nreader = Reader(rating_scale=(1,5))\n\n# create the traindata from the dataframe...\ntrain_data = Dataset.load_from_df(reg_train[['user', 'movie', 'rating']], reader)\n\n# build the trainset from traindata.., It is of dataset format from surprise library..\ntrainset = train_data.build_full_trainset() ","bfcf2ece":"testset = list(zip(reg_test_df.user.values, reg_test_df.movie.values, reg_test_df.rating.values))\ntestset[:3]","9f1207fe":"models_evaluation_train = dict()\nmodels_evaluation_test = dict()\n\nmodels_evaluation_train, models_evaluation_test","3027984c":"# to get rmse and mape given actual and predicted ratings..\ndef get_error_metrics(y_true, y_pred):\n    rmse = np.sqrt(np.mean([ (y_true[i] - y_pred[i])**2 for i in range(len(y_pred)) ]))\n    mape = np.mean(np.abs( (y_true - y_pred)\/y_true )) * 100\n    return rmse, mape\n\n###################################################################\n###################################################################\ndef run_xgboost(algo,  x_train, y_train, x_test, y_test, verbose=True):\n    \"\"\"\n    It will return train_results and test_results\n    \"\"\"\n    \n    # dictionaries for storing train and test results\n    train_results = dict()\n    test_results = dict()\n    \n    \n    # fit the model\n    print('Training the model..')\n    start =datetime.now()\n    algo.fit(x_train, y_train, eval_metric = 'rmse')\n    print('Done. Time taken : {}\\n'.format(datetime.now()-start))\n    print('Done \\n')\n\n    # from the trained model, get the predictions....\n    print('Evaluating the model with TRAIN data...')\n    start =datetime.now()\n    y_train_pred = algo.predict(x_train)\n    # get the rmse and mape of train data...\n    rmse_train, mape_train = get_error_metrics(y_train.values, y_train_pred)\n    \n    # store the results in train_results dictionary..\n    train_results = {'rmse': rmse_train,\n                    'mape' : mape_train,\n                    'predictions' : y_train_pred}\n    \n    #######################################\n    # get the test data predictions and compute rmse and mape\n    print('Evaluating Test data')\n    y_test_pred = algo.predict(x_test) \n    rmse_test, mape_test = get_error_metrics(y_true=y_test.values, y_pred=y_test_pred)\n    # store them in our test results dictionary.\n    test_results = {'rmse': rmse_test,\n                    'mape' : mape_test,\n                    'predictions':y_test_pred}\n    if verbose:\n        print('\\nTEST DATA')\n        print('-'*30)\n        print('RMSE : ', rmse_test)\n        print('MAPE : ', mape_test)\n        \n    # return these train and test results...\n    return train_results, test_results\n    ","53df9d36":"# it is just to makesure that all of our algorithms should produce same results\n# everytime they run...\n\nmy_seed = 15\nrandom.seed(my_seed)\nnp.random.seed(my_seed)\n\n##########################################################\n# get  (actual_list , predicted_list) ratings given list \n# of predictions (prediction is a class in Surprise).    \n##########################################################\ndef get_ratings(predictions):\n    actual = np.array([pred.r_ui for pred in predictions])\n    pred = np.array([pred.est for pred in predictions])\n    \n    return actual, pred\n\n################################################################\n# get ''rmse'' and ''mape'' , given list of prediction objecs \n################################################################\ndef get_errors(predictions, print_them=False):\n\n    actual, pred = get_ratings(predictions)\n    rmse = np.sqrt(np.mean((pred - actual)**2))\n    mape = np.mean(np.abs(pred - actual)\/actual)\n\n    return rmse, mape*100\n\n##################################################################################\n# It will return predicted ratings, rmse and mape of both train and test data   #\n##################################################################################\ndef run_surprise(algo, trainset, testset, verbose=True): \n    '''\n        return train_dict, test_dict\n    \n        It returns two dictionaries, one for train and the other is for test\n        Each of them have 3 key-value pairs, which specify ''rmse'', ''mape'', and ''predicted ratings''.\n    '''\n    start = datetime.now()\n    # dictionaries that stores metrics for train and test..\n    train = dict()\n    test = dict()\n    \n    # train the algorithm with the trainset\n    st = datetime.now()\n    print('Training the model...')\n    algo.fit(trainset)\n    print('Done. time taken : {} \\n'.format(datetime.now()-st))\n    \n    # ---------------- Evaluating train data--------------------#\n    st = datetime.now()\n    print('Evaluating the model with train data..')\n    # get the train predictions (list of prediction class inside Surprise)\n    train_preds = algo.test(trainset.build_testset())\n    # get predicted ratings from the train predictions..\n    train_actual_ratings, train_pred_ratings = get_ratings(train_preds)\n    # get ''rmse'' and ''mape'' from the train predictions.\n    train_rmse, train_mape = get_errors(train_preds)\n    print('time taken : {}'.format(datetime.now()-st))\n    \n    if verbose:\n        print('-'*15)\n        print('Train Data')\n        print('-'*15)\n        print(\"RMSE : {}\\n\\nMAPE : {}\\n\".format(train_rmse, train_mape))\n    \n    #store them in the train dictionary\n    if verbose:\n        print('adding train results in the dictionary..')\n    train['rmse'] = train_rmse\n    train['mape'] = train_mape\n    train['predictions'] = train_pred_ratings\n    \n    #------------ Evaluating Test data---------------#\n    st = datetime.now()\n    print('\\nEvaluating for test data...')\n    # get the predictions( list of prediction classes) of test data\n    test_preds = algo.test(testset)\n    # get the predicted ratings from the list of predictions\n    test_actual_ratings, test_pred_ratings = get_ratings(test_preds)\n    # get error metrics from the predicted and actual ratings\n    test_rmse, test_mape = get_errors(test_preds)\n    print('time taken : {}'.format(datetime.now()-st))\n    \n    if verbose:\n        print('-'*15)\n        print('Test Data')\n        print('-'*15)\n        print(\"RMSE : {}\\n\\nMAPE : {}\\n\".format(test_rmse, test_mape))\n    # store them in test dictionary\n    if verbose:\n        print('storing the test results in test dictionary...')\n    test['rmse'] = test_rmse\n    test['mape'] = test_mape\n    test['predictions'] = test_pred_ratings\n    \n    print('\\n'+'-'*45)\n    print('Total time taken to run this algorithm :', datetime.now() - start)\n    \n    # return two dictionaries train and test\n    return train, test","b6315f33":"import xgboost as xgb","0b9b0bf2":"# prepare Train data\nx_train = reg_train.drop(['user','movie','rating'], axis=1)\ny_train = reg_train['rating']\n\n# Prepare Test data\nx_test = reg_test_df.drop(['user','movie','rating'], axis=1)\ny_test = reg_test_df['rating']\n\n# initialize Our first XGBoost model...\nfirst_xgb = xgb.XGBRegressor(silent=False, n_jobs=13, random_state=15, n_estimators=100)\ntrain_results, test_results = run_xgboost(first_xgb, x_train, y_train, x_test, y_test)\n\n# store the results in models_evaluations dictionaries\nmodels_evaluation_train['first_algo'] = train_results\nmodels_evaluation_test['first_algo'] = test_results\n\nxgb.plot_importance(first_xgb)\nplt.show()","cd521be8":"from surprise import BaselineOnly ","8f54d0bc":"\n# options are to specify.., how to compute those user and item biases\nbsl_options = {'method': 'sgd',\n               'learning_rate': .001\n               }\nbsl_algo = BaselineOnly(bsl_options=bsl_options)\n# run this algorithm.., It will return the train and test results..\nbsl_train_results, bsl_test_results = run_surprise(my_bsl_algo, trainset, testset, verbose=True)\n\n\n# Just store these error metrics in our models_evaluation datastructure\nmodels_evaluation_train['bsl_algo'] = bsl_train_results \nmodels_evaluation_test['bsl_algo'] = bsl_test_results","798bff6c":"# add our baseline_predicted value as our feature..\nreg_train['bslpr'] = models_evaluation_train['bsl_algo']['predictions']\nreg_train.head(2) ","fc9cd980":"# add that baseline predicted ratings with Surprise to the test data as well\nreg_test_df['bslpr']  = models_evaluation_test['bsl_algo']['predictions']\n\nreg_test_df.head(2)","dbcbd13b":"# prepare train data\nx_train = reg_train.drop(['user', 'movie','rating'], axis=1)\ny_train = reg_train['rating']\n\n# Prepare Test data\nx_test = reg_test_df.drop(['user','movie','rating'], axis=1)\ny_test = reg_test_df['rating']\n\n# initialize Our first XGBoost model...\nxgb_bsl = xgb.XGBRegressor(silent=False, n_jobs=13, random_state=15, n_estimators=100)\ntrain_results, test_results = run_xgboost(xgb_bsl, x_train, y_train, x_test, y_test)\n\n# store the results in models_evaluations dictionaries\nmodels_evaluation_train['xgb_bsl'] = train_results\nmodels_evaluation_test['xgb_bsl'] = test_results\n\nxgb.plot_importance(xgb_bsl)\nplt.show()\n","9460532f":"from surprise import KNNBaseline","eb2735d4":"# we specify , how to compute similarities and what to consider with sim_options to our algorithm\nsim_options = {'user_based' : True,\n               'name': 'pearson_baseline',\n               'shrinkage': 100,\n               'min_support': 2\n              } \n# we keep other parameters like regularization parameter and learning_rate as default values.\nbsl_options = {'method': 'sgd'} \n\nknn_bsl_u = KNNBaseline(k=40, sim_options = sim_options, bsl_options = bsl_options)\nknn_bsl_u_train_results, knn_bsl_u_test_results = run_surprise(knn_bsl_u, trainset, testset, verbose=True)\n\n# Just store these error metrics in our models_evaluation datastructure\nmodels_evaluation_train['knn_bsl_u'] = knn_bsl_u_train_results \nmodels_evaluation_test['knn_bsl_u'] = knn_bsl_u_test_results\n","efe38378":"# we specify , how to compute similarities and what to consider with sim_options to our algorithm\n\n# 'user_based' : Fals => this considers the similarities of movies instead of users\n\nsim_options = {'user_based' : False,\n               'name': 'pearson_baseline',\n               'shrinkage': 100,\n               'min_support': 2\n              } \n# we keep other parameters like regularization parameter and learning_rate as default values.\nbsl_options = {'method': 'sgd'}\n\n\nknn_bsl_m = KNNBaseline(k=40, sim_options = sim_options, bsl_options = bsl_options)\n\nknn_bsl_m_train_results, knn_bsl_m_test_results = run_surprise(knn_bsl_m, trainset, testset, verbose=True)\n\n# Just store these error metrics in our models_evaluation datastructure\nmodels_evaluation_train['knn_bsl_m'] = knn_bsl_m_train_results \nmodels_evaluation_test['knn_bsl_m'] = knn_bsl_m_test_results\n","28a008e1":"# add the predicted values from both knns to this dataframe\nreg_train['knn_bsl_u'] = models_evaluation_train['knn_bsl_u']['predictions']\nreg_train['knn_bsl_m'] = models_evaluation_train['knn_bsl_m']['predictions']\n\nreg_train.head(2)","19659f5a":"reg_test_df['knn_bsl_u'] = models_evaluation_test['knn_bsl_u']['predictions']\nreg_test_df['knn_bsl_m'] = models_evaluation_test['knn_bsl_m']['predictions']\n\nreg_test_df.head(2)","4aafb69a":"# prepare the train data....\nx_train = reg_train.drop(['user', 'movie', 'rating'], axis=1)\ny_train = reg_train['rating']\n\n# prepare the train data....\nx_test = reg_test_df.drop(['user','movie','rating'], axis=1)\ny_test = reg_test_df['rating']\n\n# declare the model\nxgb_knn_bsl = xgb.XGBRegressor(n_jobs=10, random_state=15)\ntrain_results, test_results = run_xgboost(xgb_knn_bsl, x_train, y_train, x_test, y_test)\n\n# store the results in models_evaluations dictionaries\nmodels_evaluation_train['xgb_knn_bsl'] = train_results\nmodels_evaluation_test['xgb_knn_bsl'] = test_results\n\n\nxgb.plot_importance(xgb_knn_bsl)\nplt.show()","092299da":"from surprise import SVD","6cf13c7a":"# initiallize the model\nsvd = SVD(n_factors=100, biased=True, random_state=15, verbose=True)\nsvd_train_results, svd_test_results = run_surprise(svd, trainset, testset, verbose=True)\n\n# Just store these error metrics in our models_evaluation data structure\nmodels_evaluation_train['svd'] = svd_train_results \nmodels_evaluation_test['svd'] = svd_test_results","60a22a34":"from surprise import SVDpp","cc5b8b2c":"# initiallize the model\nsvdpp = SVDpp(n_factors=50, random_state=15, verbose=True)\nsvdpp_train_results, svdpp_test_results = run_surprise(svdpp, trainset, testset, verbose=True)\n\n# Just store these error metrics in our models_evaluation datastructure\nmodels_evaluation_train['svdpp'] = svdpp_train_results \nmodels_evaluation_test['svdpp'] = svdpp_test_results\n","5897d0a3":"# add the predicted values from both knns to this dataframe\nreg_train['svd'] = models_evaluation_train['svd']['predictions']\nreg_train['svdpp'] = models_evaluation_train['svdpp']['predictions']\n\nreg_train.head(2) ","d3ea387d":"reg_test_df['svd'] = models_evaluation_test['svd']['predictions']\nreg_test_df['svdpp'] = models_evaluation_test['svdpp']['predictions']\n\nreg_test_df.head(2) ","b4075c3f":"# prepare x_train and y_train\nx_train = reg_train.drop(['user', 'movie', 'rating',], axis=1)\ny_train = reg_train['rating']\n\n# prepare test data\nx_test = reg_test_df.drop(['user', 'movie', 'rating'], axis=1)\ny_test = reg_test_df['rating']\n\n\n\nxgb_final = xgb.XGBRegressor(n_jobs=10, random_state=15)\ntrain_results, test_results = run_xgboost(xgb_final, x_train, y_train, x_test, y_test)\n\n# store the results in models_evaluations dictionaries\nmodels_evaluation_train['xgb_final'] = train_results\nmodels_evaluation_test['xgb_final'] = test_results\n\n\nxgb.plot_importance(xgb_final)\nplt.show()","2579e9f3":"# prepare train data\nx_train = reg_train[['knn_bsl_u', 'knn_bsl_m', 'svd', 'svdpp']]\ny_train = reg_train['rating']\n\n# test data\nx_test = reg_test_df[['knn_bsl_u', 'knn_bsl_m', 'svd', 'svdpp']]\ny_test = reg_test_df['rating']\n\n\nxgb_all_models = xgb.XGBRegressor(n_jobs=10, random_state=15)\ntrain_results, test_results = run_xgboost(xgb_all_models, x_train, y_train, x_test, y_test)\n\n# store the results in models_evaluations dictionaries\nmodels_evaluation_train['xgb_all_models'] = train_results\nmodels_evaluation_test['xgb_all_models'] = test_results\n\nxgb.plot_importance(xgb_all_models)\nplt.show()","7a4764cd":"# Saving our TEST_RESULTS into a dataframe so that you don't have to run it again\npd.DataFrame(models_evaluation_test).to_csv('sample\/small\/small_sample_results.csv')\nmodels = pd.read_csv('sample\/small\/small_sample_results.csv', index_col=0)\nmodels.loc['rmse'].sort_values()","34e34ce3":"print(\"-\"*100)\nprint(\"Total time taken to run this entire notebook ( with saved files) is :\",datetime.now()-globalstart)","37a5bca2":" > __Utility functions for running regression models__","771496b1":"- Even though we have similarity measure of each movie, with all other movies, We generally don't care much about least similar movies.\n\n\n- Most of the times, only top_xxx similar items matters. It may be 10 or 100.\n\n\n- We take only those top similar movie ratings and store them  in a saperate dictionary.","284af496":"<h2>4.2 Finding Global Average of all movie ratings, Average rating per User, and Average rating per Movie (from sampled train)<\/h2>","58bfeae8":"http:\/\/surprise.readthedocs.io\/en\/stable\/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVD ","1d658266":"-----------------------\n\n- __GAvg__ : Average rating of all the ratings \n\n\n- __Similar users rating of this movie__:\n    - sur1, sur2, sur3, sur4, sur5 ( top 5 simiular users who rated that movie.. )\n    \n\n\n- __Similar movies rated by this user__:\n    - smr1, smr2, smr3, smr4, smr5 ( top 5 simiular movies rated by this movie.. )\n\n\n- __UAvg__ : User AVerage rating\n\n\n- __MAvg__ : Average rating of this movie\n\n\n- __rating__ : Rating of this movie by this user.\n\n-----------------------","db8c11d4":"<h3> 4.4.1 XGBoost with initial 13 features <\/h3>","c6656234":"- __Optimization problem with user item interactions and regularization (to avoid overfitting)__\n    - \n    - $\\large \\sum_{r_{ui} \\in R_{train}} \\left(r_{ui} - \\hat{r}_{ui} \\right)^2 +\n\\lambda\\left(b_i^2 + b_u^2 + ||q_i||^2 + ||p_u||^2\\right) $","12567ef1":"<h2> 4.3 Featurizing data <\/h2>","64796a3d":"<h3> 4.4.5 XGBoost with initial 13 features + Surprise Baseline predictor + KNNBaseline predictor <\/h3>","392e77f6":"<h3>3.1.3 Removing Duplicates <\/h3>","75c1bc86":"- - - First we will run XGBoost with predictions from both KNN's ( that uses User\\_User and Item\\_Item similarities along with our previous features.\n\n \n- - - Then we will run XGBoost with just predictions form both knn models and preditions from our baseline model. ","dcdfcb0a":"<pre>\nFor a given movie and user we need to predict the rating would be given by him\/her to the movie. \nThe given problem is a Recommendation problem \nIt can also seen as a Regression problem \n<\/pre>","cfe84273":"<h3> 4.4.6 Matrix Factorization Techniques <\/h3>","44f69c76":"-----------------------\n\n- __GAvg__ : Average rating of all the ratings \n\n\n- __Similar users rating of this movie__:\n    - sur1, sur2, sur3, sur4, sur5 ( top 5 similar users who rated that movie.. )\n    \n\n\n- __Similar movies rated by this user__:\n    - smr1, smr2, smr3, smr4, smr5 ( top 5 similar movies rated by this movie.. )\n\n\n- __UAvg__ : User's Average rating\n\n\n- __MAvg__ : Average rating of this movie\n\n\n- __rating__ : Rating of this movie by this user.\n\n-----------------------","3546b6fc":"<h3> 3.3.1 Distribution of ratings <\/h3>","d90658a5":"-An alternative is to compute similar users for a particular user,  whenenver required (**ie., Run time**)\n    - We maintain a binary Vector for users, which tells us whether we already computed or not..\n    - ***If not*** : \n        - Compute top (let's just say, 1000) most similar users for this given user, and add this to our data structure, so that we can just access it(similar users) without recomputing it again.\n        - \n    - ***If It is already Computed***:\n        - Just get it directly from our data structure, which has that information.\n        - In production time, We might have to recompute similarities, if it is computed a long time ago. Because user preferences changes over time. If we could maintain some kind of Timer, which when expires, we have to update it ( recompute it ). \n        - \n    - ***Which data structure to use:***\n        - It is purely implementation dependant. \n        - One simple method is to maintain a **Dictionary Of Dictionaries**.\n            - \n            - **key    :** _userid_ \n            - __value__: _Again a dictionary_\n                - __key__  : _Similar User_\n                - __value__: _Similarity Value_","a1c3b1b9":"<h4> 4.3.1.2 Featurizing test data <\/h4>","bc4d2248":"<p><b>The Sparsity of Train Sparse Matrix<\/b><\/p>","1efb2149":"<h3> 3.3.4 Analysis of ratings of a movie given by a user <\/h3>","dcda08f5":"<h4> 4.4.6.1 SVD Matrix Factorization User Movie intractions <\/h4>","670a1873":" <h3>3.1.4 Basic Statistics (#Ratings, #Users, and #Movies)<\/h3>","6c9949ac":"<h2>1.4 Real world\/Business Objectives and constraints  <\/h2>","be7baeab":"<h4> 4.3.2.2 Transforming test data <\/h4>","56370627":"- from above plot, It took almost __12.18__ for computing simlilar users for __one user__\n    \n    \n- We have __405041 users__ with us in training set.\n\n\n- ${ 405041 \\times 12.18 ==== 4933399.38 \\sec } ====  82223.323 \\min ==== 1370.388716667 \\text{ hours}\n==== 57.099529861 \\text{ days}...$\n\n    - Even we run on 4 cores parallelly (a typical system now a days), It will still take almost __(14 - 15) __ days.\n","8b63e805":"<h3>3.1.2 Checking for NaN values <\/h3>","6a804c23":"<h2> 1.3 Sources <\/h2>","e2005214":"<h3> 2.1.1 Data Overview <\/h3>","41371e6e":"<h4> 3.3.7.2 finding average rating per user<\/h4>","abc409cb":"__Reading from the file to make a test dataframe __","82fc037d":"<h4> 3.3.7.3 finding average rating per movie<\/h4>","638ac86c":"<h1> 3. Exploratory Data Analysis <\/h1>","2cd6630b":"<h3> 3.3.6 Creating sparse matrix from data frame <\/h3>","064fcce2":"> We might have to handle __346 movies__ (small comparatively) in test data","980a55c5":"**: This is taking more time for each user than Original one.**","f2b0cebc":"__Is there any other way to compute user user similarity..??__","4205d448":"<h4> 3.4.1.1 Trying with all dimensions (17k dimensions per user) <\/h4>","74b100c3":"<p> Data files : \n<ul> \n<li> combined_data_1.txt <\/li>\n<li> combined_data_2.txt <\/li>\n<li> combined_data_3.txt <\/li>\n<li> combined_data_4.txt <\/li>\n<li> movie_titles.csv <\/li>\n<\/ul>\n<pre>  \nThe first line of each file [combined_data_1.txt, combined_data_2.txt, combined_data_3.txt, combined_data_4.txt] contains the movie id followed by a colon. Each subsequent line in the file corresponds to a rating from a customer and its date in the following format:\n\nCustomerID,Rating,Date\n\nMovieIDs range from 1 to 17770 sequentially.\nCustomerIDs range from 1 to 2649429, with gaps. There are 480189 users.\nRatings are on a five star (integral) scale from 1 to 5.\nDates have the format YYYY-MM-DD.\n<\/pre>","dc58ede3":"<h2> 4.4 Applying Machine Learning models <\/h2>","d4630754":"<h2>3.2 Spliting data into Train and Test(80:20) <\/h2>","a22002b6":"<p>\nNetflix provided a lot of anonymous rating data, and a prediction accuracy bar that is 10% better than what Cinematch can do on the same training data set. (Accuracy is a measurement of how closely predicted ratings of movies match subsequent actual ratings.) \n<\/p>","9e1c0fe7":" \n> I think 500 dimensions is good enough \n\n---------\n\n-  By just taking __(20 to 30)__ latent factors, explained variance that we could get is __20 %__. \n\n- To take it to __60%__, we have to take  __almost 400 latent factors__. It is not fare.\n\n\n\n- It basically is the __gain of variance explained__, if we ___add one additional latent factor to it.___\n\n\n- By adding one by one latent factore too it, the ___gain in expained variance__ with that addition is decreasing. (Obviously, because they are sorted that way).\n- ___LHS Graph___:\n    - __x__ --- ( No of latent factos ),\n    - __y__ --- ( The variance explained by taking x latent factors)\n\n\n\n- __More decrease in the line (RHS graph) __:\n    - We  are getting more expained variance than before.\n- __Less decrease in that line (RHS graph)__  :\n    - We are not getting benifitted from adding latent factor furthur. This is what is shown in the plots.\n\n\n- ___RHS Graph___:\n    - __x__ --- ( No of latent factors ),\n    - __y__ --- ( Gain n Expl_Var by taking one additional latent factor) ","125d5a55":" > Similarly, we can ___find similar users___ and compare how similar they are. ","18b5ffd1":"<h3> 4.3.2 Transforming data for Surprise models<\/h3>","3f9123d9":"<h3>4.1.2 Build sample test data from the test data<\/h3>","bc87e82f":"<h3> 4.4.8 XgBoost with Surprise Baseline + Surprise KNNbaseline + MF Techniques <\/h3>","cea33a26":"* We have  **405,041 users** in out training set and computing similarities between them..( **17K dimensional vector..**) is time consuming..\n\n\n- From above plot, It took roughly __8.88 sec__ for computing simlilar users for __one user__\n    \n    \n- We have __405,041 users__ with us in training set.\n\n\n- ${ 405041 \\times 8.88 = 3596764.08  \\sec } =  59946.068 \\min = 999.101133333 \\text{ hours}\n= 41.629213889 \\text{ days}...$\n\n    - Even if we run on 4 cores parallelly (a typical system now a days), It will still take almost __10 and 1\/2__ days.\n    \n IDEA:  Instead, we will try to reduce the dimentsions using SVD, so that __it might__ speed up the process...","716d9c03":"- __ Predicted Rating : __\n    - \n    - $ \\large \\hat{r}_{ui} = \\mu + b_u + b_i + q_i^T\\left(p_u +\n    |I_u|^{-\\frac{1}{2}} \\sum_{j \\in I_u}y_j\\right) $ ","f8cac007":"<h3> 3.4.1 Computing User-User Similarity matrix <\/h3>","7ecf6515":"<h3> 3.3.8 Cold Start problem <\/h3>","daff5ab3":"<h3>3.2.2 Basic Statistics in Test data (#Ratings, #Users, and #Movies)<\/h3>","bbb83b0a":"- __Optimization problem with user item interactions and regularization (to avoid overfitting)__\n    - \n    - $ \\large \\sum_{r_{ui} \\in R_{train}} \\left(r_{ui} - \\hat{r}_{ui} \\right)^2 +\n\\lambda\\left(b_i^2 + b_u^2 + ||q_i||^2 + ||p_u||^2 + ||y_j||^2\\right) $ ","38d5cbb9":"- ----->  2.5 Implicit Feedback in http:\/\/courses.ischool.berkeley.edu\/i290-dm\/s11\/SECURE\/a1-koren.pdf","c084fcfa":"__Preparing Test data  __","bc0c5a47":"__Updating Train Data__","b5b258ef":"__Predicted_rating : ( baseline prediction ) __\n\n    -  http:\/\/surprise.readthedocs.io\/en\/stable\/basic_algorithms.html#surprise.prediction_algorithms.baseline_only.BaselineOnly \n >$   \\large {\\hat{r}_{ui} = b_{ui} =\\mu + b_u + b_i} $\n\n\n- $\\pmb \\mu $ : Average of all trainings in training data.\n- $\\pmb b_u$ : User bias\n- $\\pmb b_i$ : Item bias (movie biases) ","c8b65202":"<h3> 3.3.3 Analysis on the Ratings given by user <\/h3>","54f25db8":"  <h4> 4.4.6.2 SVD Matrix Factorization with implicit feedback from user ( user rated movies ) <\/h4>","360f0708":"__Preparing Test data  __","c4963c23":"- SHRINKAGE\n    - _2.2 Neighborhood Models_ in http:\/\/courses.ischool.berkeley.edu\/i290-dm\/s11\/SECURE\/a1-koren.pdf ","5b75363a":"<h4> 3.3.6.1 Creating sparse matrix from train data frame <\/h4>","ab16664c":"<h4> 3.3.8.1 Cold Start problem with Users<\/h4>","15ac3095":"<h2> 4.1 Sampling Data <\/h2>","b9b37601":"<p style='font-size:15px'><b>Similar Movies for 'Vampire Journals'<\/b><\/p>","be055fcc":"<h4> 4.4.4.2 Surprise KNNBaseline with movie movie similarities<\/h4>","54765ff4":"<h3> 3.4.3 Finding most similar movies using similarity matrix <\/h3>","b2cbe3ff":"__Updating Test Data__","1efc6686":"- KNN BASELINE\n    - http:\/\/surprise.readthedocs.io\/en\/stable\/knn_inspired.html#surprise.prediction_algorithms.knns.KNNBaseline ","27735285":"<h4> 3.3.7.1 finding global average of all movie ratings <\/h4>","24667f32":"1. Minimize RMSE.\n2. Try to provide some interpretability.","f5eca09b":"<ul>\n<li> Mean Absolute Percentage Error: https:\/\/en.wikipedia.org\/wiki\/Mean_absolute_percentage_error <\/li>\n<li> Root Mean Square Error: https:\/\/en.wikipedia.org\/wiki\/Root-mean-square_deviation <\/li>\n<\/ul>\n","135e7e68":"<h4> 3.3.6.2 Creating sparse matrix from test data frame <\/h4>","79fca413":"<h3>4.2.3 Finding Average rating per Movie<\/h3>","8939a7d5":"<h4> 3.3.7.4 PDF's & CDF's of Avg.Ratings of Users & Movies (In Train Data)<\/h4>","213f70d1":"<h3> 2.2.2 Performance metric <\/h3>","64c436ea":"> __Utility functions for Surprise modes__","a8898dad":"__Preparing Train data __","1b6bc35e":"<h3> 2.2.3 Machine Learning Objective and Constraints <\/h3>","dfe779c0":"- __ Predicted Rating : __\n    - \n    - $ \\large  \\hat r_{ui} = \\mu + b_u + b_i + q_i^Tp_u $\n    \n        - $\\pmb q_i$ - Representation of item(movie) in latent factor space\n        \n        - $\\pmb p_u$ - Representation of user in new latent factor space\n        \n","15961f2c":"* Let's convert this to actual sparse matrix and store it for future purposes","d4074810":"<h1> 2. Machine Learning Problem <\/h1>","93c4152d":"<h3> 4.4.2 Suprise BaselineModel <\/h3>\n    \n","600d3901":"<h3>4.1.1 Build sample train data from the train data<\/h3>","fd5c2b8e":"<h3> 4.4.4 Surprise KNNBaseline predictor <\/h3>","e926d7ad":"<h3>3.2.1 Basic Statistics in Train data (#Ratings, #Users, and #Movies)<\/h3>","e4e58be4":"> We might have to handle __new users__ ( ___75148___ ) who didn't appear in train data.","5267555c":"<h3>3.3.7 Finding Global average of all movie ratings, Average rating per user, and Average rating per movie<\/h3>","3fe9ecf0":"<h2> 1.2 Problem Statement <\/h2>","ca524714":"<ul>\n<li> https:\/\/www.kaggle.com\/netflix-inc\/netflix-prize-data<\/li>\n\n<\/ul>","18842647":"<h3> 3.3.5 Number of ratings on each day of the week<\/h3>","8eee765f":"__Preparing Train data__","72a4b401":"<p><b>The Sparsity of Test data Matrix<\/b><\/p>","451729a7":"<h4> 4.3.2.1 Transforming train data <\/h4>","aec2695e":" <h2> 3.3 Exploratory Data Analysis on Train data <\/h2>","2638b785":"<h3> 3.4.2 Computing Movie-Movie Similarity matrix <\/h3>","a3ecbcd9":"<p style=\"font-size:13px\"> <b>Add new column (week day) to the data set  for analysis.<\/b><\/p>","ee7a08df":"- A BASIC MATRIX FACTORIZATION MODEL in  https:\/\/datajobs.com\/data-science-repo\/Recommender-Systems-[Netflix].pdf","4fa9c04f":" - $ \\pmb{I_u}$ --- the set of all items rated by user u\n\n- $\\pmb{y_j}$ --- Our new set of item factors that capture implicit ratings.  ","4348ccb6":"> _There,  is something interesting going on with the quantiles.._","3e595e6b":"__Optimization function ( Least Squares Problem ) __\n\n    - http:\/\/surprise.readthedocs.io\/en\/stable\/prediction_algorithms.html#baselines-estimates-configuration \n\n> $ \\large \\sum_{r_{ui} \\in R_{train}} \\left(r_{ui} - (\\mu + b_u + b_i)\\right)^2 +\n\\lambda \\left(b_u^2 + b_i^2 \\right).\\text {        [mimimize } {b_u, b_i]}$ ","5092d8b2":"__ Does Similarity really works as the way we expected...? __ <br>\n_Let's pick some random movie and check for its similar movies...._","d97f8d1e":"1. Calculating User User Similarity_Matrix is __not very easy__(_unless you have huge Computing Power and lots of time_) because of number of. users being here.\n\n    * System could crash or the program stops with **Memory Error**\n","cd1d84ed":"<h2>2.1 Data <\/h2>","ee2fa54f":"__how many ratings at the last 5% of all ratings__??","de2bdd61":"<h4> 3.3.8.2 Cold Start problem with Movies<\/h4>","1342e541":"<h3> 3.3.2 Number of Ratings per a month <\/h3>","9389fbe3":"- Testset is just a list of (user, movie, rating) tuples. (Order in the tuple is impotant) ","14760608":"- __predicted Rating__ : ( ___ based on User-User similarity ___ )\n\n\\begin{align} \\hat{r}_{ui} = b_{ui} + \\frac{ \\sum\\limits_{v \\in N^k_i(u)}\n\\text{sim}(u, v) \\cdot (r_{vi} - b_{vi})} {\\sum\\limits_{v \\in\nN^k_i(u)} \\text{sim}(u, v)} \\end{align}\n\n- $\\pmb{b_{ui}}$ -  _Baseline prediction_ of (user,movie) rating\n\n- $ \\pmb {N_i^k (u)}$ - Set of __K similar__ users (neighbours) of __user (u)__ who rated __movie(i)__  \n\n- _sim (u, v)_ - __Similarity__ between users __u and v__  \n    - Generally, it will be cosine similarity or Pearson correlation coefficient. \n    - But we use __shrunk Pearson-baseline correlation coefficient__, which is based on the pearsonBaseline similarity ( we take base line predictions instead of mean rating of user\/item)\n       ","b64bbf6d":"<h1>1. Business Problem <\/h1>","dcbc9a12":"<h4> 3.4.1.2 Trying with reduced dimensions (Using TruncatedSVD for dimensionality reduction of user vector)<\/h4>","f01aa465":"  <h4> 4.4.4.1 Surprise KNNBaseline with user user similarities<\/h4>","5fab02b8":"<h3>4.2.1 Finding Global Average of all movie ratings<\/h3>","79e2be1c":"<h3> 2.2.1 Type of Machine Learning Problem <\/h3>","19d5b257":"<h2> 4.5 Comparision between all models <\/h2>","59495590":" <h1> 4.  Machine Learning Models <\/h1>","02ac609e":"<h2> 3.1 Preprocessing<\/h2> ","6583090f":"<h3>3.1.1 Converting \/ Merging whole data to required format: u_i, m_j, r_ij<\/h3>","9a3ce8e8":"<h2> 3.4 Computing Similarity matrices <\/h2>","2c8adff5":"- We can't give raw data (movie, user, rating) to train the model in Surprise library.\n\n\n- They have a saperate format for TRAIN and TEST data, which will be useful for training the models like SVD, KNNBaseLineOnly....etc..,in Surprise.\n\n\n- We can form the trainset from a file, or from a Pandas  DataFrame. \nhttp:\/\/surprise.readthedocs.io\/en\/stable\/getting_started.html#load-dom-dataframe-py ","4433eea3":"-  Global dictionary that stores rmse and mape for all the models....\n\n    - It stores the metrics in a dictionary of dictionaries\n\n    > __keys__ : model names(string)\n\n    > __value__: dict(__key__ : metric, __value__ : value ) ","16d15313":"- __It is very skewed.. just like nunmber of ratings given per user.__\n    \n    \n    - There are some movies (which are very popular) which are rated by huge number of users.\n    \n    - But most of the movies(like 90%) got some hundereds of ratings.","0ee6df72":"<h3>4.2.2 Finding Average rating per User<\/h3>","61a09017":"Objectives:\n1. Predict the rating that a user would give to a movie that he ahs not yet rated.\n2. Minimize the difference between predicted and actual rating (RMSE and MAPE)\n<br>\n\nConstraints:\n1. Some form of interpretability.","f78a0062":"Here,\n\n\n- $\\sum \\longleftarrow$ (netflix\\_svd.**singular\\_values\\_** )\n\n\n- $\\bigvee^T \\longleftarrow$ (netflix\\_svd.**components_**)\n\n\n- $\\bigcup$ is not returned. instead **Projection_of_X** onto the new vectorspace is returned. \n\n\n- It uses **randomized svd** internally, which returns **All 3 of them saperately**. Use that instead.. ","8a1f01b5":"<h3> 4.3.1 Featurizing data for regression problem <\/h3>","a69f8be3":"<h3> 4.4.3 XGBoost with initial 13 features + Surprise Baseline predictor <\/h3>","f86222c5":"- __ Predicted rating __ ( based on Item Item similarity ):\n \\begin{align} \\hat{r}_{ui} = b_{ui} + \\frac{ \\sum\\limits_{j \\in N^k_u(i)}\\text{sim}(i, j) \\cdot (r_{uj} - b_{uj})} {\\sum\\limits_{j \\in N^k_u(j)} \\text{sim}(i, j)} \\end{align}\n\n    -  ___Notations follows same as above (user user based predicted rating ) ___","a29d4890":"<h2> 1.1 Problem Description <\/h2>","91d579f3":"__Top 10 similar movies__","88d60375":"<h2>2.2 Mapping the real world problem to a Machine Learning Problem <\/h2>","869da75d":"<h4> 4.3.1.1 Featurizing train data <\/h4>","b6e12f33":"- PEARSON_BASELINE SIMILARITY\n    - http:\/\/surprise.readthedocs.io\/en\/stable\/similarities.html#surprise.similarities.pearson_baseline ","49ec53cb":"__Reading from the file to make a Train_dataframe__","25dc5011":"<p>\nNetflix is all about connecting people to the movies they love. To help customers find those movies, they developed world-class movie recommendation system: CinematchSM. Its job is to predict whether someone will enjoy a movie based on how much they liked or disliked other movies. Netflix use those predictions to make personal movie recommendations based on each customer\u2019s unique tastes. And while <b>Cinematch<\/b> is doing pretty well, it can always be made better.\n<\/p>\n<p>Now there are a lot of interesting alternative approaches to how Cinematch works that netflix haven\u2019t tried. Some are described in the literature, some aren\u2019t. We\u2019re curious whether any of these can beat Cinematch by making better predictions. Because, frankly, if there is a much better approach it could make a big difference to our customers and our business.<\/p>","2e4289d0":"<h3> 4.4.7 XgBoost with 13 features + Surprise Baseline + Surprise KNNbaseline + MF Techniques <\/h3>"}}