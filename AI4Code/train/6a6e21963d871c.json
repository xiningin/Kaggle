{"cell_type":{"d3e361ac":"code","90fa9042":"code","acdf6d47":"code","23c6f677":"code","a6133a1c":"code","eab6d766":"code","34377150":"code","04aaa9b3":"code","f774898f":"code","ada90be5":"code","ebc28174":"code","77de4c5f":"code","171b1443":"code","1ac25003":"code","0cac31d4":"code","a91bc820":"code","42ef0ff2":"code","5cc48768":"code","eaff7ddc":"markdown","67120ef0":"markdown","ca962869":"markdown","a72566ab":"markdown","1d709fb5":"markdown","75185540":"markdown","7c72d752":"markdown","4eb4939d":"markdown","0d7bb29d":"markdown","8d932c4e":"markdown","64dac3b2":"markdown"},"source":{"d3e361ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90fa9042":"import re\nimport emoji\nimport nltk\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom IPython.display import Image\nfrom nltk.corpus import stopwords # prepare the stopwords list\nfrom nltk.stem import PorterStemmer # stem the words\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score","acdf6d47":"reveiw_df = pd.read_csv('\/kaggle\/input\/apple-iphone-se-reviews-ratings\/APPLE_iPhone_SE.csv')\nreveiw_df.head()","23c6f677":"reveiw_df.info()","a6133a1c":"# this data doesn't have null\n# next, we seek the distribution of ratings\nvar = 'Ratings'\nprint(reveiw_df[var].value_counts())\nsns.countplot(x=var, data=reveiw_df)","eab6d766":"Image(\"\/kaggle\/input\/img-nlp\/Splitdata_Image.png\")","34377150":"# prepare the stopwords list\nstopwords_list = stopwords.words('english')\n\n# prepare stem instance\nstemmer = PorterStemmer()","04aaa9b3":"def split_and_replace_text(corpus):\n    \"\"\"\n    split the corpus, delete the stopwords and emoji then join the word again as corpus\n    \n    we replace some word and all the number.\n    this time, words, A13, 11pro ,..., etc, have many numbers but I think those number isn't related the Ratings seriously\n    so that, we replace all the number.\n    \n    parameter\n        corpus: corpus you want to apply\n        \n    return \n        corpus without stopwords and emoji and replaced.\n    \"\"\"\n    \n    # lower\n    corpus = corpus.lower()\n    \n    # split corpus\n    corpus = [word.strip() for word in corpus.split()]\n    # stem words\n    corpus = [stemmer.stem(word) for word in corpus]\n    # delete the stopword and emoji\n    corpus = [word for word in corpus if word not in stopwords_list and word not in emoji.UNICODE_EMOJI]\n    \n    corpus = ' '.join(corpus)\n    \n    # All texts have 'READ MORE' in the end, so we remove this\n    corpus = re.sub('READ MORE', '', corpus)\n    \n    # replace all the number to 0\n    corpus = re.sub('\\d+', '0', corpus)\n    \n    return corpus","f774898f":"index = 20\nsample_corpus = reveiw_df['Reviews'][index]\nprint(sample_corpus)\n\nsample_corpus = split_and_replace_text(sample_corpus)\nsample_corpus","ada90be5":"tfidf = TfidfVectorizer()\ncorpus = reveiw_df['Reviews'].apply(lambda x: split_and_replace_text(x))\n\nX = tfidf.fit_transform(corpus)\nprint(tfidf.get_feature_names()[:50])\nX.shape","ebc28174":"X = reveiw_df['Reviews'].apply(lambda x: split_and_replace_text(x))\ny = reveiw_df['Ratings']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=123)","77de4c5f":"# check the value_counts\npd.DataFrame(y_train).value_counts()","171b1443":"def make_splitted_data(data, split_num=5, prefix='X_train'):\n    \"\"\"\n    make some data which splitted by split_num\n    \n    parameter:\n        split_num: int, you decide the number you want to split\n        data: data you want to split\n        prefix_X: str, you can decide to name the dict keys\n        \n    return \n        splitted_data: dict\n    \"\"\"\n    \n    # extract the 5-ratings data\n    rating5 = data[np.equal(y_train, 5)]\n    # rating 1~4\n    rating14 = data[np.less_equal(y_train, 4)]\n    \n    # make the indices\n    length = len(rating5)\n    index = length\/\/split_num\n    \n    splitted_data = {}\n    for i in range(split_num):\n        rating5_i = rating5[i*index:(i+1)*index]\n        train_i = np.hstack([rating5_i, rating14])\n        \n        splitted_data[prefix+str(i+1)] = train_i\n        \n    return splitted_data","1ac25003":"train_data_X = make_splitted_data(X_train)\ntrain_data_y = make_splitted_data(y_train, prefix='y_train')","0cac31d4":"for x, y in zip(train_data_X.values(), train_data_y.values()):\n    print(len(x), len(y))","a91bc820":"X_trains = list(train_data_X.values())\ny_trains = list(train_data_y.values())\n\ntfidf = TfidfVectorizer(max_features=1000)\ntfidf.fit(X_train)\nclf = MultinomialNB()\n\nfor X_data, y_data in zip(X_trains, y_trains):\n    X_data = tfidf.transform(X_data)\n    clf.fit(X_data, y_data)\n\nX_test_vec = tfidf.transform(X_test)\n# X_test_vec.shape\nprint(accuracy_score(y_true=y_test, y_pred=clf.predict(X_test_vec)))","42ef0ff2":"tfidf = TfidfVectorizer(max_features=1000)\nX_train_tfidf = tfidf.fit_transform(X_train)\nclf = MultinomialNB()\nclf.fit(X_train_tfidf, y_train)\n\nX_test_vec = tfidf.transform(X_test)\n# X_test_vec.shape\ny_pred=clf.predict(X_test_vec)\nprint(accuracy_score(y_true=y_test, y_pred=y_pred))","5cc48768":"from sklearn.feature_extraction.text import CountVectorizer\n\ncountvec = CountVectorizer()\nX_countvec = countvec.fit_transform(X_train)\nnb = MultinomialNB()\nnb.fit(X_countvec, y_train)\n\nX_test_vec = countvec.transform(X_test)\nprint(accuracy_score(y_true=y_test, y_pred=nb.predict(X_test_vec)))","eaff7ddc":"### OK, I understand this preparation of train data is not good approach.\n<hr>\n<div style=\"padding:10px;background-color:lightblue\"><h3> CountVectorizer <\/h3><\/div>","67120ef0":"<hr>\n<div style=\"padding:10px;background-color:lightgreen\"> \n    <h3>Conclusion<\/h3>\n    <h4>This time max acc is 71%.<\/h4>\n    <h4>I think you can definetly figure out better approach and method of this data.<\/h4>\n<\/div>\n<h3 style=\"color:blue\">Finally, Thank you for visiting my notebook. \n    <br>\n    <br>\n    Please feel free to comment, advice, and upvotes if you like mine!\n<\/h3>","ca962869":"### OK, This approach isn't good, haha.\n### so we use whole train data!","a72566ab":"<div style=\"padding:10px;background-color:lightyellow\"> \n     <h3 style=\"color:red\">Prepare the train data<\/h3>\n     <h4>before, We check the counts of ratings and we figure out this data is biased.<\/h4>\n     <h4>we have to care about it and we split the 5-ratings dataset more<\/h4>\n<\/div>","1d709fb5":"#### check the behavier","75185540":"<h2> This datasets' task<\/h2>\n<h3 style=\"color:red\">We predict the ratings to use Reviews (and Comment??) <\/h3>\n\n<hr>\n<div style=\"padding:10px;background-color:lightgreen\"> \n    <h3>First, We try EDA <\/h3>\n<\/div>","7c72d752":"<div>\n    <h3>According to above graph, this data is so biased that we care about splitting data<\/h3>\n    <h4>When we fit the train-data, we split the data which 'Ratings' is 5 then make 5~10 train datasets. \n        This is similar to CV train<\/h4>\n<\/div>","4eb4939d":"<hr>\n<div style=\"padding:10px;background-color:lightgreen\"> \n    <h3>4th, Prediction <\/h3>\n    <h4>we prepared the data. We are ready for prediction.<\/h4>\n    <h4>This time we try two approach.<\/h4>\n    <ul>\n        <li><h4 style=\"color:blue\">Tfidf<\/h4><\/li>\n        <li><h4 style=\"color:blue\">Countvectorizer<\/h4><\/li>\n    <\/ul>\n<\/div>","0d7bb29d":"<div style=\"padding:10px;background-color:lightblue\"><h3> TfIdf <\/h3><\/div>","8d932c4e":"#### I think we are ready for training\n\n<hr>\n<div style=\"padding:10px;background-color:lightgreen\"> \n    <h3>Third, We prepare the train and test data <\/h3>\n<\/div>","64dac3b2":"<hr>\n<div style=\"padding:10px;background-color:lightgreen\"> \n    <h3>Second, We try NLP and change word to vectors and engineering<\/h3>\n<\/div>"}}