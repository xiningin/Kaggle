{"cell_type":{"b9c84a23":"code","c6aa16f6":"code","6f51118e":"code","b5d26fff":"code","695a3980":"code","c918f473":"code","c9a0e5b5":"code","7d4f879c":"code","e1414df5":"code","e8c0efc0":"code","5ae81c87":"code","004946ac":"code","9e9e59fc":"code","7146fd54":"code","99edb0a4":"code","726440fd":"code","ddf19ff0":"code","0fe50278":"code","a1dfb3ca":"code","5bdb4b56":"code","60e1c7ce":"code","e339facf":"code","48256625":"code","396f39ab":"code","ba42be1b":"code","8d79a18a":"code","87264f6c":"code","3d65abab":"code","a86a112c":"code","5db9d15d":"code","4dedbec5":"code","da0c45b3":"code","e574467e":"code","7fcbc4bf":"code","22aaacca":"code","0cd5021f":"code","3342b72c":"code","a14825b4":"code","554fb20e":"code","b73dbe42":"code","cb4e6286":"code","8360055e":"code","0d9ef416":"code","730f5268":"code","39a9d797":"code","a9b921c4":"code","2556ba0d":"code","2eeafd8d":"code","0f9a20e8":"code","eed052e7":"code","b816bbed":"code","a189464c":"markdown","ed521aca":"markdown","0ebfd0a9":"markdown","4f433b71":"markdown"},"source":{"b9c84a23":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline","c6aa16f6":"train_d = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_d = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","6f51118e":"train_d.info()","b5d26fff":"test_d.info()","695a3980":"ax = sns.heatmap(train_d.isnull(),yticklabels=False,cbar=False,fmt='.1f')\nax.set(xlabel='columns', ylabel='rows (white if null)')\nplt.show()","c918f473":"# data imputation on training datframe:\n\n\n\ntrain_d['Alley'].fillna('No', inplace=True)\ntrain_d['BsmtQual'].fillna('No', inplace=True)\ntrain_d['BsmtCond'].fillna('No', inplace=True)\ntrain_d['BsmtExposure'].fillna('No Basement', inplace=True)\ntrain_d['BsmtFinType1'].fillna('No', inplace=True)\ntrain_d['BsmtFinType2'].fillna('No', inplace=True)\ntrain_d['FireplaceQu'].fillna('No', inplace=True)\ntrain_d['GarageType'].fillna('No', inplace=True)\ntrain_d['GarageFinish'].fillna('No', inplace=True)\ntrain_d['GarageQual'].fillna('No', inplace=True)\ntrain_d['GarageCond'].fillna('No', inplace=True)\ntrain_d['PoolQC'].fillna('No', inplace=True)\ntrain_d['Fence'].fillna('No', inplace=True)\ntrain_d['GarageCond'].fillna('No', inplace=True)\n\n\n\n","c9a0e5b5":"# data imputation on testing datframe:\n\ntest_d['Alley'].fillna('No', inplace=True)\ntest_d['BsmtQual'].fillna('No', inplace=True)\ntest_d['BsmtCond'].fillna('No', inplace=True)\ntest_d['BsmtExposure'].fillna('No Basement', inplace=True)\ntest_d['BsmtFinType1'].fillna('No', inplace=True)\ntest_d['BsmtFinType2'].fillna('No', inplace=True)\ntest_d['FireplaceQu'].fillna('No', inplace=True)\ntest_d['GarageType'].fillna('No', inplace=True)\ntest_d['GarageFinish'].fillna('No', inplace=True)\ntest_d['GarageQual'].fillna('No', inplace=True)\ntest_d['GarageCond'].fillna('No', inplace=True)\ntest_d['PoolQC'].fillna('No', inplace=True)\ntest_d['Fence'].fillna('No', inplace=True)\ntest_d['GarageCond'].fillna('No', inplace=True)","7d4f879c":"#check for outliers to proceed with imputation\n\nsns.jointplot('LotFrontage','SalePrice',data = train_d) ","e1414df5":"# remove rows with LotFrontage more than 300\n#train_d = train_d[train_d.LotFrontage < 300].reset_index(drop = True)\n#sns.jointplot('LotFrontage','SalePrice',data = train_d) \ntrain_d = train_d.drop(train_d[(train_d['LotFrontage'] > 300) & (train_d['SalePrice'] <400000)].index)","e8c0efc0":"sns.jointplot('LotFrontage','SalePrice',data = train_d) ","5ae81c87":"sns.jointplot('GrLivArea','SalePrice',data = train_d) ","004946ac":"#there is just one outlier which affects the linear rshp between price and live area\n#train_d = train_d[(train_d.GrLivArea< 4000) & (train_d.SalePrice>500000)].reset_index(drop = True)\ntrain_d = train_d.drop(train_d[(train_d['GrLivArea'] > 4000) & (train_d['SalePrice'] <400000)].index)","9e9e59fc":"train_d.count()","7146fd54":"# imputation on LotFrontage and GarageYearbult\n\ntrain_d['LotFrontage'] = train_d['LotFrontage'].fillna(train_d['LotFrontage'].median())\ntrain_d['GarageYrBlt'] = train_d['GarageYrBlt'].fillna(train_d['GarageYrBlt'].mean())","99edb0a4":"test_d['LotFrontage'] = test_d['LotFrontage'].fillna(test_d['LotFrontage'].median())\ntest_d['GarageYrBlt'] = test_d['GarageYrBlt'].fillna(test_d['GarageYrBlt'].mean())","726440fd":"train_d.isnull().values.any()","ddf19ff0":"# Drop MiscFeature as it has more than 90% missing values and not sure what it basically means, and Id as it is not needed\ntest_IdBackup=test_d\ntrain_d=train_d.drop(['Id','MiscFeature','MasVnrArea'],axis=1)\ntest_d=test_d.drop(['Id','MiscFeature','MasVnrArea'],axis=1)","0fe50278":"correlations_value_list=train_d.corr()['SalePrice'].sort_values()\nprint(correlations_value_list)","a1dfb3ca":"# data transformation for training dataset\n\n\n#one hot vector encoding\n\ncol1 = pd.get_dummies(train_d.MSSubClass, prefix='MSSubClass')\ndel train_d['MSSubClass']\ntrain_d= pd.concat([train_d, col1], axis=1)\n\ncol2 = pd.get_dummies(train_d.MSZoning, prefix='MSZoning')\ndel train_d['MSZoning']\ntrain_d= pd.concat([train_d, col2], axis=1)\n\n\ncol3 = pd.get_dummies(train_d.Street, prefix='Street')\ndel train_d['Street']\ntrain_d= pd.concat([train_d, col3], axis=1)\n\n\ncol4 = pd.get_dummies(train_d.Alley, prefix='Alley')\ndel train_d['Alley']\ntrain_d= pd.concat([train_d, col4], axis=1)\n\n\ncol5 = pd.get_dummies(train_d.LotShape, prefix='LotShape')\ndel train_d['LotShape']\ntrain_d= pd.concat([train_d, col5], axis=1)\n\n\ncol6 = pd.get_dummies(train_d.LandContour, prefix='LandContour')\ndel train_d['LandContour']\ntrain_d= pd.concat([train_d, col6], axis=1)\n\n\ncol7 = pd.get_dummies(train_d.Utilities, prefix='Utilities')\ndel train_d['Utilities']\ntrain_d= pd.concat([train_d, col7], axis=1)\n\n\ncol8 = pd.get_dummies(train_d.LotConfig, prefix='LotConfig')\ndel train_d['LotConfig']\ntrain_d= pd.concat([train_d, col8], axis=1)\n\ncol9 = pd.get_dummies(train_d.LandSlope, prefix='LandSlope')\ndel train_d['LandSlope']\ntrain_d= pd.concat([train_d, col9], axis=1)\n\ncol10 = pd.get_dummies(train_d.Neighborhood, prefix='Neighborhood')\ndel train_d['Neighborhood']\ntrain_d= pd.concat([train_d, col10], axis=1)\n\ncol11 = pd.get_dummies(train_d.Condition1, prefix='Condition1')\ndel train_d['Condition1']\ntrain_d= pd.concat([train_d, col11], axis=1)\n\ncol12 = pd.get_dummies(train_d.Condition2, prefix='Condition2')\ndel train_d['Condition2']\ntrain_d= pd.concat([train_d, col12], axis=1)\n\ncol13 = pd.get_dummies(train_d.BldgType, prefix='BldgType')\ndel train_d['BldgType']\ntrain_d= pd.concat([train_d, col13], axis=1)\n\ncol14 = pd.get_dummies(train_d.HouseStyle, prefix='HouseStyle')\ndel train_d['HouseStyle']\ntrain_d= pd.concat([train_d, col14], axis=1)\n\ncol15 = pd.get_dummies(train_d.RoofStyle, prefix='RoofStyle')\ndel train_d['RoofStyle']\ntrain_d= pd.concat([train_d, col15], axis=1)\n\ncol16 = pd.get_dummies(train_d.RoofMatl, prefix='RoofMatl')\ndel train_d['RoofMatl']\ntrain_d= pd.concat([train_d, col16], axis=1)\n\ncol17 = pd.get_dummies(train_d.Exterior1st, prefix='Exterior1st')\ndel train_d['Exterior1st']\ntrain_d= pd.concat([train_d, col17], axis=1)\n\ncol18 = pd.get_dummies(train_d.Exterior2nd, prefix='Exterior2nd')\ndel train_d['Exterior2nd']\ntrain_d= pd.concat([train_d, col18], axis=1)\n\n\ncol19 = pd.get_dummies(train_d.MasVnrType, prefix='MasVnrType')\ndel train_d['MasVnrType']\ntrain_d= pd.concat([train_d, col19], axis=1)\n\ncol20 = pd.get_dummies(train_d.Foundation, prefix='Foundation')\ndel train_d['Foundation']\ntrain_d= pd.concat([train_d, col20], axis=1)\n\ncol21 = pd.get_dummies(train_d.Heating, prefix='Heating')\ndel train_d['Heating']\ntrain_d= pd.concat([train_d, col21], axis=1)\n\n\n\n\ncol22 = pd.get_dummies(train_d.Functional, prefix='Functional')\ndel train_d['Functional']\ntrain_d= pd.concat([train_d, col22], axis=1)\n\ncol23 = pd.get_dummies(train_d.GarageType, prefix='GarageType')\ndel train_d['GarageType']\ntrain_d= pd.concat([train_d, col23], axis=1)\n\ncol24 = pd.get_dummies(train_d.GarageFinish, prefix='GarageFinish')\ndel train_d['GarageFinish']\ntrain_d= pd.concat([train_d, col24], axis=1)\n\ncol25 = pd.get_dummies(train_d.PavedDrive, prefix='PavedDrive')\ndel train_d['PavedDrive']\ntrain_d= pd.concat([train_d, col25], axis=1)\n\ncol26 = pd.get_dummies(train_d.SaleType, prefix='SaleType')\ndel train_d['SaleType']\ntrain_d= pd.concat([train_d, col26], axis=1)\n\ncol27 = pd.get_dummies(train_d.SaleCondition, prefix='SaleCondition')\ndel train_d['SaleCondition']\ntrain_d= pd.concat([train_d, col27], axis=1)\n\ncol28 = pd.get_dummies(train_d.Electrical, prefix='Electrical')\ndel train_d['Electrical']\ntrain_d= pd.concat([train_d, col28], axis=1)\n\ncol29 = pd.get_dummies(train_d.Fence, prefix='Fence')\ndel train_d['Fence']\ntrain_d= pd.concat([train_d, col29], axis=1)\n\n\n","5bdb4b56":"# data transformation for testing dataset\n\n\n#one hot vector encoding\n\ncol1 = pd.get_dummies(test_d.MSSubClass, prefix='MSSubClass')\ndel test_d['MSSubClass']\ntest_d= pd.concat([test_d, col1], axis=1)\n\ncol2 = pd.get_dummies(test_d.MSZoning, prefix='MSZoning')\ndel test_d['MSZoning']\ntest_d= pd.concat([test_d, col2], axis=1)\n\n\ncol3 = pd.get_dummies(test_d.Street, prefix='Street')\ndel test_d['Street']\ntest_d= pd.concat([test_d, col3], axis=1)\n\n\ncol4 = pd.get_dummies(test_d.Alley, prefix='Alley')\ndel test_d['Alley']\ntest_d= pd.concat([test_d, col4], axis=1)\n\n\ncol5 = pd.get_dummies(test_d.LotShape, prefix='LotShape')\ndel test_d['LotShape']\ntest_d= pd.concat([test_d, col5], axis=1)\n\n\ncol6 = pd.get_dummies(test_d.LandContour, prefix='LandContour')\ndel test_d['LandContour']\ntest_d= pd.concat([test_d, col6], axis=1)\n\n\ncol7 = pd.get_dummies(test_d.Utilities, prefix='Utilities')\ndel test_d['Utilities']\ntest_d= pd.concat([test_d, col7], axis=1)\n\n\ncol8 = pd.get_dummies(test_d.LotConfig, prefix='LotConfig')\ndel test_d['LotConfig']\ntest_d= pd.concat([test_d, col8], axis=1)\n\ncol9 = pd.get_dummies(test_d.LandSlope, prefix='LandSlope')\ndel test_d['LandSlope']\ntest_d= pd.concat([test_d, col9], axis=1)\n\ncol10 = pd.get_dummies(test_d.Neighborhood, prefix='Neighborhood')\ndel test_d['Neighborhood']\ntest_d= pd.concat([test_d, col10], axis=1)\n\ncol11 = pd.get_dummies(test_d.Condition1, prefix='Condition1')\ndel test_d['Condition1']\ntest_d= pd.concat([test_d, col11], axis=1)\n\ncol12 = pd.get_dummies(test_d.Condition2, prefix='Condition2')\ndel test_d['Condition2']\ntest_d= pd.concat([test_d, col12], axis=1)\n\ncol13 = pd.get_dummies(test_d.BldgType, prefix='BldgType')\ndel test_d['BldgType']\ntest_d= pd.concat([test_d, col13], axis=1)\n\ncol14 = pd.get_dummies(test_d.HouseStyle, prefix='HouseStyle')\ndel test_d['HouseStyle']\ntest_d= pd.concat([test_d, col14], axis=1)\n\ncol15 = pd.get_dummies(test_d.RoofStyle, prefix='RoofStyle')\ndel test_d['RoofStyle']\ntest_d= pd.concat([test_d, col15], axis=1)\n\ncol16 = pd.get_dummies(test_d.RoofMatl, prefix='RoofMatl')\ndel test_d['RoofMatl']\ntest_d= pd.concat([test_d, col16], axis=1)\n\ncol17 = pd.get_dummies(test_d.Exterior1st, prefix='Exterior1st')\ndel test_d['Exterior1st']\ntest_d= pd.concat([test_d, col17], axis=1)\n\ncol18 = pd.get_dummies(test_d.Exterior2nd, prefix='Exterior2nd')\ndel test_d['Exterior2nd']\ntest_d= pd.concat([test_d, col18], axis=1)\n\n\ncol19 = pd.get_dummies(test_d.MasVnrType, prefix='MasVnrType')\ndel test_d['MasVnrType']\ntest_d= pd.concat([test_d, col19], axis=1)\n\ncol20 = pd.get_dummies(test_d.Foundation, prefix='Foundation')\ndel test_d['Foundation']\ntest_d= pd.concat([test_d, col20], axis=1)\n\ncol21 = pd.get_dummies(test_d.Heating, prefix='Heating')\ndel test_d['Heating']\ntest_d= pd.concat([test_d, col21], axis=1)\n\n\n\n\ncol22 = pd.get_dummies(test_d.Functional, prefix='Functional')\ndel test_d['Functional']\ntest_d= pd.concat([test_d, col22], axis=1)\n\ncol23 = pd.get_dummies(test_d.GarageType, prefix='GarageType')\ndel test_d['GarageType']\ntest_d= pd.concat([test_d, col23], axis=1)\n\ncol24 = pd.get_dummies(test_d.GarageFinish, prefix='GarageFinish')\ndel test_d['GarageFinish']\ntest_d= pd.concat([test_d, col24], axis=1)\n\ncol25 = pd.get_dummies(test_d.PavedDrive, prefix='PavedDrive')\ndel test_d['PavedDrive']\ntest_d= pd.concat([test_d, col25], axis=1)\n\ncol26 = pd.get_dummies(test_d.SaleType, prefix='SaleType')\ndel test_d['SaleType']\ntest_d= pd.concat([test_d, col26], axis=1)\n\ncol27 = pd.get_dummies(test_d.SaleCondition, prefix='SaleCondition')\ndel test_d['SaleCondition']\ntest_d= pd.concat([test_d, col27], axis=1)\n\ncol28 = pd.get_dummies(test_d.Electrical, prefix='Electrical')\ndel test_d['Electrical']\ntest_d= pd.concat([test_d, col28], axis=1)\n\ncol29 = pd.get_dummies(test_d.Fence, prefix='Fence')\ndel test_d['Fence']\ntest_d= pd.concat([test_d, col29], axis=1)\n\n\n\n","60e1c7ce":"'''xtra_feature=['Condition2_RRNn',\n'HouseStyle_2.5Fin',\n'RoofMatl_Membran',\n'RoofMatl_Roll',\n'Exterior1st_ImStucc',\n'Exterior1st_Stone',\n'Exterior2nd_Other',\n'Heating_OthW',\n'Electrical_Mix']\n\ntrain_d.drop(xtra_feature,axis=1,inplace=True)'''","e339facf":"# ordinal features encoding training dataframe\n\ntrain_d['CentralAir'] = train_d['CentralAir'].map({'Y':1, 'N':0})\ntrain_d['ExterQual'] = train_d['ExterQual'].map({'Ex':4, 'Gd':3,'TA':2,'Fa':1,'Po':0})\ntrain_d['ExterCond'] = train_d['ExterCond'].map({'Ex':4, 'Gd':3,'TA':2,'Fa':1,'Po':0})\ntrain_d['BsmtQual'] = train_d['BsmtQual'].map({'Ex':5, 'Gd':4,'TA':3,'Fa':2,'Po':1,'No':0})\ntrain_d['BsmtCond'] = train_d['BsmtCond'].map({'Ex':5, 'Gd':4,'TA':3,'Fa':2,'Po':1,'No':0})\ntrain_d['BsmtExposure'] = train_d['BsmtExposure'].map({'Gd':4, 'Av':3,'Mn':2,'No':1,'No Basement':0})\ntrain_d['BsmtFinType1'] = train_d['BsmtFinType1'].map({'GLQ':6, 'ALQ':5,'BLQ':4,'Rec':3,'LwQ':2,'Unf':1,'No':0})\n\ntrain_d['BsmtFinType2'] = train_d['BsmtFinType2'].map({'GLQ':6, 'ALQ':5,'BLQ':4,'Rec':3,'LwQ':2,'Unf':1,'No':0})\ntrain_d['HeatingQC'] = train_d['HeatingQC'].map({'Ex':4, 'Gd':3,'TA':2,'Fa':1,'Po':0})\ntrain_d['KitchenQual'] = train_d['KitchenQual'].map({'Ex':4, 'Gd':3,'TA':2,'Fa':1,'Po':0})\ntrain_d['FireplaceQu'] = train_d['FireplaceQu'].map({'Ex':5, 'Gd':4,'TA':3,'Fa':2,'Po':1,'No':0})\ntrain_d['GarageQual'] = train_d['GarageQual'].map({'Ex':5, 'Gd':4,'TA':3,'Fa':2,'Po':1,'No':0})\ntrain_d['GarageCond'] = train_d['GarageCond'].map({'Ex':5, 'Gd':4,'TA':3,'Fa':2,'Po':1,'No':0})\ntrain_d['PoolQC'] = train_d['PoolQC'].map({'Ex':4, 'Gd':3,'TA':2,'Fa':1,'No':0})\n","48256625":"# ordinal features encoding testing dataframe\n\ntest_d['CentralAir'] = test_d['CentralAir'].map({'Y':1, 'N':0})\ntest_d['ExterQual'] = test_d['ExterQual'].map({'Ex':4, 'Gd':3,'TA':2,'Fa':1,'Po':0})\ntest_d['ExterCond'] = test_d['ExterCond'].map({'Ex':4, 'Gd':3,'TA':2,'Fa':1,'Po':0})\ntest_d['BsmtQual'] = test_d['BsmtQual'].map({'Ex':5, 'Gd':4,'TA':3,'Fa':2,'Po':1,'No':0})\ntest_d['BsmtCond'] = test_d['BsmtCond'].map({'Ex':5, 'Gd':4,'TA':3,'Fa':2,'Po':1,'No':0})\ntest_d['BsmtExposure'] = test_d['BsmtExposure'].map({'Gd':4, 'Av':3,'Mn':2,'No':1,'No Basement':0})\ntest_d['BsmtFinType1'] = test_d['BsmtFinType1'].map({'GLQ':6, 'ALQ':5,'BLQ':4,'Rec':3,'LwQ':2,'Unf':1,'No':0})\n\ntest_d['BsmtFinType2'] = test_d['BsmtFinType2'].map({'GLQ':6, 'ALQ':5,'BLQ':4,'Rec':3,'LwQ':2,'Unf':1,'No':0})\ntest_d['HeatingQC'] = test_d['HeatingQC'].map({'Ex':4, 'Gd':3,'TA':2,'Fa':1,'Po':0})\ntest_d['KitchenQual'] = test_d['KitchenQual'].map({'Ex':4, 'Gd':3,'TA':2,'Fa':1,'Po':0})\ntest_d['FireplaceQu'] = test_d['FireplaceQu'].map({'Ex':5, 'Gd':4,'TA':3,'Fa':2,'Po':1,'No':0})\ntest_d['GarageQual'] = test_d['GarageQual'].map({'Ex':5, 'Gd':4,'TA':3,'Fa':2,'Po':1,'No':0})\ntest_d['GarageCond'] = test_d['GarageCond'].map({'Ex':5, 'Gd':4,'TA':3,'Fa':2,'Po':1,'No':0})\ntest_d['PoolQC'] = test_d['PoolQC'].map({'Ex':4, 'Gd':3,'TA':2,'Fa':1,'No':0})","396f39ab":"train_d.count()","ba42be1b":"train_d.isnull().values.any()","8d79a18a":"train_d.count()","87264f6c":"#check columns with null value\ntest_d.loc[:, test_d.isna().any()]","3d65abab":"#Comparison between mean, median and mode to proceed with imputation \n\nprint(test_d[[\"BsmtFinSF1\",\"BsmtFinSF2\",\"BsmtUnfSF\",\"TotalBsmtSF\",\"GarageArea\"]].mean())\nprint(test_d[[\"BsmtFinSF1\",\"BsmtFinSF2\",\"BsmtUnfSF\",\"TotalBsmtSF\",\"GarageArea\"]].median())\nprint(test_d[[\"BsmtFullBath\",\"BsmtHalfBath\",\"KitchenQual\",\"GarageCars\"]].mode())","a86a112c":"#imputation of scalar\/nominal values in test dataset\n\ntest_d['BsmtFinSF1'] = test_d['BsmtFinSF1'].fillna(test_d['BsmtFinSF1'].mean())\ntest_d['BsmtFinSF2'] = test_d['BsmtFinSF2'].fillna(test_d['BsmtFinSF2'].mean())\ntest_d['BsmtUnfSF'] = test_d['BsmtUnfSF'].fillna(test_d['BsmtUnfSF'].mean())\ntest_d['TotalBsmtSF'] = test_d['TotalBsmtSF'].fillna(test_d['TotalBsmtSF'].mean())\ntest_d['GarageArea'] = test_d['GarageArea'].fillna(test_d['GarageArea'].median())\n\n#observed that mode doesn't work with fillna\n\n\ntest_d['BsmtFullBath'] = test_d['BsmtFullBath'].fillna(0.0)\ntest_d['BsmtHalfBath'] = test_d['BsmtHalfBath'].fillna(0.0)\ntest_d['KitchenQual'] = test_d['KitchenQual'].fillna(2.0)\ntest_d['GarageCars'] = test_d['GarageCars'].fillna(2.0)","5db9d15d":"test_d.isnull().values.any()","4dedbec5":"#test_d['BsmtFullBath'].value_counts()\n# concise syntax to check for null values. keep it in code\nnull_columns=test_d.columns[test_d.isnull().any()]\ntest_d[null_columns].isnull().sum()","da0c45b3":"# code taken from Baris Camli's Kernel\nfrom scipy import stats \nfrom scipy.stats import norm\n\nsns.distplot(train_d['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train_d['SalePrice'], plot=plt)","e574467e":"#Here our curve is right skewed so log transformation is one efficient way for scaling of SalePrice\n\ntrain_d[\"SalePrice\"] = np.log(train_d[\"SalePrice\"])","7fcbc4bf":"# check if transformed data reflect properly\n#train_d.to_csv(r'~\/Documents\/MachinelearningRepository\/KaggleHousePriceProject\/TransformedData.csv', index = False)","22aaacca":"y=train_d['SalePrice']\n\nx=train_d.drop(['SalePrice'],axis=1)\n\n\nX=test_d","0cd5021f":"# dropping xtra features from train dataset to implement Lasso on Test:\nfor i in x.columns:   \n    if not i in X:\n        print(i)","3342b72c":"cnt=0\nfor i in x.columns:\n    if  i in X:\n        cnt +=1\nprint(cnt)        ","a14825b4":"xtra_feature=['Utilities_NoSeWa',\n'Condition2_RRAe',\n'Condition2_RRAn',\n'Condition2_RRNn',\n'HouseStyle_2.5Fin',\n'RoofMatl_Membran',\n'RoofMatl_Metal',\n'RoofMatl_Roll',\n'Exterior1st_ImStucc',\n'Exterior1st_Stone',\n'Exterior2nd_Other',\n'Heating_Floor',\n'Heating_OthW',\n'Electrical_Mix']\n\nx.drop(xtra_feature,axis=1,inplace=True)","554fb20e":"for j in X.columns:\n    if  not j in x:\n        print(j)","b73dbe42":"X.drop(columns=['MSSubClass_150'],axis=1,inplace=True)","cb4e6286":"x.count()\n","8360055e":"X.count()","0d9ef416":"# split tainining dataset into train and test\n\n\nfrom sklearn.model_selection import train_test_split\n\nX_train_org, X_test_org, y_train, y_test = train_test_split(x, y, random_state = 0, test_size = 0.25)\n\n#Check the number of records in training and test partitions\nprint(\"X_train unscaled : \" + str(X_train_org.shape))\nprint(\"X_test unscaled: \" + str(X_test_org.shape))\nprint(\"y_train : \" + str(y_train.shape))\nprint(\"y_test : \" + str(y_test.shape))","730f5268":"\nfrom sklearn.linear_model import Lasso\nx_range = [0.01, 0.1, 1, 10, 100]\ntrain_score_list = []\ntest_score_list = []\n\nfor alpha in x_range: \n    lasso = Lasso(alpha)\n    lasso.fit(X_train_org,y_train)\n    train_score_list.append(lasso.score(X_train_org,y_train))\n    test_score_list.append(lasso.score(X_test_org, y_test))","39a9d797":"print(train_score_list)\nprint(test_score_list)","a9b921c4":"plt.plot(x_range, train_score_list, c = 'g', label = 'Train Score')\nplt.plot(x_range, test_score_list, c = 'b', label = 'Test Score')\nplt.xscale('log')\nplt.legend(loc = 3)\nplt.xlabel(r'$\\alpha$')","2556ba0d":"# Grid Search for Algorithm Tuning\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\n\n# prepare a range of alpha values to test\nparam_grid = {\n    'alpha': [100,10,2,1,0.5,0.1,0.01,0.001],\n    'max_iter': [10e5]\n    \n}\n# create and fit a lasso regression model, testing each alpha\nmodel = Lasso()\ngrid = GridSearchCV(model,param_grid)\ngrid.fit(X_train_org, y_train)\nyPredictions3 =grid.predict(X_test_org)\n\n\n# summarize the results of the grid search\nprint (\"Train Score:\",grid.score(X_train_org, y_train))\nprint (\"Test Score :\",grid.score(X_test_org, y_test))\nprint(\"Best_Value_For_Alpha:\",grid.best_params_)","2eeafd8d":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error \nfrom sklearn.metrics import mean_absolute_error\n\nlasso = Lasso(alpha = 1, max_iter = 1000000.0)\n\nlasso.fit(X_train_org, y_train)\ny_pred_lasso=lasso.predict(X_test_org)\n\n# Cross Validation\ncv_scores = cross_val_score(lasso, X_train_org, y_train,cv = 5)\ncv_test_scores = cross_val_score(lasso, X_test_org, y_test,cv = 5)\nprint('Cross-validation training scores (5-fold):', cv_scores)\nprint('Cross-validation testing scores (5-fold):', cv_test_scores)\nprint('Mean cross-validation training score (5-fold): {:.4f}'.format(np.mean(cv_scores)))\nprint('Mean cross-validation testing score (5-fold): {:.4f}'.format(np.mean(cv_test_scores)))\nprint('RMSE: {:.4f}'.format(np.sqrt(mean_squared_error(y_test,y_pred_lasso))))","0f9a20e8":"Y_test_pred=lasso.predict(X)\nprint(Y_test_pred)","eed052e7":"len(Y_test_pred)","b816bbed":"# code taken from Baris Camli to take exponents of our results\nPredicted_prices = np.exp(Y_test_pred) \nPredicted_prices\nresult = pd.DataFrame(data = test_IdBackup[\"Id\"])\nresult[\"SalePrice\"]= Predicted_prices\n","a189464c":"# Normality test of target variable to check any skewness","ed521aca":"# Verify if regularized linear models work properly, try out for lasso","0ebfd0a9":"# Split Dataframe","4f433b71":"# Dropping Extra features from both datasets to match the dimensions"}}