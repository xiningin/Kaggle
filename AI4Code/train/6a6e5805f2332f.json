{"cell_type":{"8bc69dc2":"code","89bdccb7":"code","5a541e28":"code","a03c44bc":"code","7acb5ccd":"code","3e6867a1":"code","13d4fd4a":"code","dacf0b7a":"code","cc7e2afc":"code","93c3284e":"code","900df773":"code","009e4eaa":"code","e0abf5a1":"code","3aedbe9e":"code","f94fed1e":"code","b6179f33":"code","55d7cd35":"code","d52e70ed":"code","3bb71582":"code","bf037a32":"code","0d8d95d4":"code","350f8b85":"code","d5e5fd5e":"code","01acaaf1":"code","5b54fa3b":"code","bc92f920":"code","49dd528f":"code","8a8635de":"markdown","1f2edaa3":"markdown","f0706778":"markdown","0b66ee08":"markdown","17e3757e":"markdown","bd643323":"markdown","317579de":"markdown","6dff017f":"markdown","69cbd71e":"markdown","02aacc1a":"markdown","606ae5d6":"markdown","52aad158":"markdown"},"source":{"8bc69dc2":"#Import Libraries \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab\nimport matplotlib\nplt.style.use('ggplot')\nfrom matplotlib.pyplot import figure\n\n%matplotlib inline\nmatplotlib.rcParams['figure.figsize'] = (12,8)","89bdccb7":"#Read in data\ndf = pd.read_csv('..\/input\/movies\/movies.csv')\n\n#View Data\n#pd.set_option('display.max_rows', None) #Optional if you wish to view ALL rows\ndf.head()","5a541e28":"#Check for missing values\ndf.isna().sum()","a03c44bc":"df.shape","7acb5ccd":"#Drop rows with missing data\ncols = ['rating', 'released', 'score', 'votes', 'writer', 'star', 'country', 'budget', 'gross', 'company', 'runtime']\n\nfor col in cols:\n    df.dropna(subset = [col], inplace=True)\ndf.reset_index()\ndf.head()","3e6867a1":"df.shape","13d4fd4a":"#Check data types for each column\ndf.dtypes","dacf0b7a":"#Convert Budget and Gross columns to intgers\ndf['budget'] = df['budget'].astype('int64')\ndf['gross'] = df['gross'].astype('int64')\ndf['votes'] = df['votes'].astype('int64')","cc7e2afc":"df.dtypes","93c3284e":"#Sort data by gross and view TOP 5 movies with highest gross earnings\ndf_top5 = df.sort_values(by=['gross'], inplace=False, ascending=False)\ndf_top5 = df_top5.head()\ndf_top5","900df773":"#Correlations of numeric features from our dataset\ncorr = df.corr()\nsns.heatmap(corr, annot=True, vmin=-1)\nplt.title('Movie Correlations for Numeric Features', size=20)\nplt.xlabel('Features', size=12)\nplt.ylabel('Features', size=12)\nplt.show()","009e4eaa":"#Scatter Plot illustarting budget vs gross\nsns.regplot(x='budget', y='gross', data=df, scatter_kws={'color':'blue'}, line_kws={'color':'red'})\nplt.title('Budget vs Gross Earnings', size=20)\nplt.xlabel('Film Budget (millions)', size=15)\nplt.ylabel('Gross Earnings (millions)', size=15)\n\nplt.show()","e0abf5a1":"#Convert our categorical features into numerical values\ndf_n = df.copy()\nfor col in df_n.columns:\n    if df_n[col].dtype == 'object':\n        df_n[col] = df_n[col].astype('category').cat.codes\ndf_n.head()","3aedbe9e":"#Create correlation matrix with all features\nfull_corr = df_n.corr()\nsns.heatmap(full_corr, annot=True, vmin=-1)\nplt.title('Movie Correlations', size=20)\nplt.xlabel('Features', size=15)\nplt.ylabel('Features', size=15)\nplt.show()","f94fed1e":"corr_pairs = full_corr.unstack()       #View correlation matrix of a single feature with each feature category\nsorted_corr = corr_pairs.sort_values() #Sort correlation martix by correlation pairs (e.g. gross & company, gross & budget)\nsorted_corr","b6179f33":"high_corr = sorted_corr[sorted_corr>0.5]                 #Check for correlations greater than 0.5\nhigh_corr[0:4].sort_values(ascending=False)              #return values where correlation is not 1.0","55d7cd35":"df_top5.plot(kind='barh', x='name', y=['budget','gross'], color={'budget':'darkred', 'gross':'blue'}, figsize=(12,10))\nplt.title('Budget and Gross Earnings for Highest Grossing Films', size=25)\nplt.xlabel('Amount(millions)', size=15)\nplt.ylabel('Movie Title', size=15)\nplt.show()\n","d52e70ed":"companies = df.groupby(['company'], as_index=False)['budget', 'gross'].sum().sort_values(by='gross', ascending=False)\ntop5_companies = companies.head()\ntop5_companies","3bb71582":"top5_companies.plot(kind='barh', x='company', y=['budget', 'gross'],color={'budget':'darkred', 'gross':'blue'}, figsize=(12,8))\nplt.title('Budget and Gross Earnings for Highest Grossing Companies', size=25)\nplt.xlabel('Amount (100 millions)', size=15)\nplt.ylabel('Company', size=15)\nplt.show()","bf037a32":"genre_gross = df.groupby(['genre'], as_index=False)['gross'].sum().sort_values(by='gross', ascending=False)\ngenre_gross.reset_index()\ngenre_gross","0d8d95d4":"genre_gross.plot(kind='bar', x='genre', y='gross', color='dodgerblue', figsize=(12,8))\nplt.title('Budget and Gross Earnings for Highest Grossing Companies', size=25, y=1.05)\nplt.xlabel('Company', size=15)\nplt.ylabel('Amount(100 millions)', size=15)\nplt.show()","350f8b85":"writers = df.groupby(['writer'], as_index=False)['name'].count().sort_values(by='name', ascending=False)\nwriters.rename(columns={'name':'movies'}, inplace=True)\ntop_writers = writers.head(10)\ntop_writers","d5e5fd5e":"top_writers.plot(kind='bar', x='writer', y='movies', color='dodgerblue', figsize=(12,8))\nplt.title('Writer vs Number of Movies', size=25, y=1.05)\nplt.xlabel('Writer', size=15)\nplt.xticks(rotation=35)\nplt.ylabel('Number of Movies', size=15)\nplt.show()","01acaaf1":"stars = df.groupby(['star'], as_index=False)['name'].count().sort_values(by='name', ascending=False)\nstars.rename(columns={'name':'movies'}, inplace=True)\ntop_stars = stars.head(11)\ntop_stars","5b54fa3b":"top_stars.plot(kind='bar', x='star', y='movies', color='dodgerblue', figsize=(12,8))\nplt.title('Star vs Number of Movies', size=25)\nplt.xlabel('Star', size=15)\nplt.xticks(rotation=35)\nplt.ylabel('Number of Movies', size=15)\nplt.show()","bc92f920":"df_scoring = df.sort_values(by='score', ascending=False)\ntop_rated = df_scoring[df_scoring['score']>8.6]\ntop_rated","49dd528f":"import plotly.express as px\nimport plotly.graph_objects as go\n\nfig = px.bar(top_rated, \n             x='name', \n             y='gross', \n             title='Gross Earnings for Highest Rated Movies', \n             text='score', \n             width=1100, \n             height=800)\nfig.update_layout(xaxis_title='Movie Title', yaxis_title='Gross Earning', title_x = 0.45)\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside', hovertext='score')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_traces(marker_color='lightskyblue', marker_line_color='darkblue')\nfig.show()","8a8635de":"## Genre vs Gross","1f2edaa3":"### Top 5 Movies and Companies","f0706778":"## Top Writers and Stars","0b66ee08":"## Highest Rated Films","17e3757e":"# EDA and Visualizations","bd643323":"#### Mini-note Inception & The Dark Knight Rises are actually my personal favourite!","317579de":"# Import Libraries and Dataset","6dff017f":"From our correlation heatmap we can see that budget and gross are most correlated, therefore, we can take a closer look by creating a scatter plot","69cbd71e":"# Find Correlations","02aacc1a":"# Data Cleaning","606ae5d6":"From our new correlation matrix we can see that despite the inclusion of non-numeric features (e.g. company, genre, etc.) budget and gross earning features are still the MOST correlated. However, we also see that votes and gross show a high correlation as well. This is understandable as movies with high gross earnings would most likley have much more voters then unpopular movies.","52aad158":"From our scatter plot fitted with a regression line we can see that unsuprisnlgy, budget and gross earnings are positively correlated. However, these correlations only account for numeric features,therefore, we can convert categorical features (e.g. genre) into numeric values."}}