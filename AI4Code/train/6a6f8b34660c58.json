{"cell_type":{"a18c64d1":"code","1f93f5a4":"code","d15042f3":"code","84095098":"code","6b58b199":"code","7834bca8":"code","53c057df":"code","1ebe62d5":"code","950a2ab9":"markdown","d2c9b398":"markdown","6eb69bbf":"markdown","6d7bd64c":"markdown","17833ac4":"markdown","fc202ae8":"markdown","5f18a37d":"markdown","9312497e":"markdown","6f24c31f":"markdown","9bd66550":"markdown"},"source":{"a18c64d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f93f5a4":"dataset_path = \"https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/00529\/diabetes_data_upload.csv\"\ndf = pd.read_csv(dataset_path)","d15042f3":"df.head()","84095098":"df.isna().sum()","6b58b199":"from sklearn.preprocessing import LabelEncoder\ncat_cols = ['Gender','Polyuria','Polydipsia','sudden weight loss','weakness','Polyphagia','Genital thrush','visual blurring','Itching','Irritability','delayed healing','partial paresis','muscle stiffness','Alopecia','Obesity']\nencoder = LabelEncoder()\nencoded = df[cat_cols].apply(encoder.fit_transform)\nencoded = encoded.join(df['class'])\nencoded.head()","7834bca8":"train_df = encoded.sample(frac = 0.8, random_state=0)\ntest_df = encoded.drop(train_df.index)","53c057df":"train_labels = train_df.pop('class')\ntest_labels = test_df.pop('class')","1ebe62d5":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nmodel = LogisticRegression()\nmodel.fit(train_df,train_labels)\nprediction = model.predict(test_df)\nprint(model.score(test_df,test_labels))\n","950a2ab9":"Very good ! Let's now split our data into train and test datasets, using 80% of our data as train data:","d2c9b398":"Luckily, there isn't ! :)\nLet's now handle categorical values using label encoder:","6eb69bbf":"**About**\n\nIn this notebook, I'll make a simple Logistic regression model to detect how likely a patient might be diabetic.","6d7bd64c":"We can use the 'class' column as our label, and the other columns as features. let's now check for any missing values:","17833ac4":"Finally, let's apply our model and calulate its score:","fc202ae8":"Import Libraries:","5f18a37d":"93% is pretty good, isn't it?","9312497e":"Now we'll split 'class' as our label for train data and our target for test data:","6f24c31f":"Let's explore our data:","9bd66550":"I used a dataset of previously recorded symptoms to detect diabetic patients. I got it from UCI Machine Learning Repository website : https:\/\/archive.ics.uci.edu\/ml\/datasets.php\n"}}