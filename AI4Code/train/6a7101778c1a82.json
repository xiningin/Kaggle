{"cell_type":{"141d13c4":"code","1165af74":"code","81530876":"code","d92ac21c":"code","0e15938d":"code","dacca082":"code","37f2d671":"code","e0326766":"code","af469e3a":"code","a6d9c0b9":"code","efb024c2":"code","fc3e54d2":"code","ea6b6b5c":"code","a484c497":"code","90177373":"code","35f0e1e5":"code","c958a100":"code","e915fc97":"code","f9eea1b6":"code","502d9f31":"code","7fc4a7f4":"code","0908fa28":"code","5518cec5":"code","3eef7e55":"code","005fa896":"markdown","fc5e79f1":"markdown","80cd8897":"markdown","d904718f":"markdown","28f8d392":"markdown","392ca034":"markdown","1bbd6106":"markdown","75d36259":"markdown","b4623c84":"markdown","c5c0284c":"markdown","091a0b6b":"markdown","f68ed450":"markdown","615bd609":"markdown","b520c4b2":"markdown","63633cfb":"markdown","449a1083":"markdown","35e2968b":"markdown","32cf28cd":"markdown","5fecea40":"markdown","83427b8b":"markdown","5f85de5d":"markdown","84747d57":"markdown","68be8795":"markdown","39b2118a":"markdown","007b9fdf":"markdown","03190394":"markdown"},"source":{"141d13c4":"import datetime as dt\nimport pandas as pd\nimport numpy as np \nimport pandas_profiling as pf\nfrom sklearn import model_selection\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#To suppress scientific notation\npd.set_option('display.float_format', lambda x: '%.3f' % x)\npd.set_option('display.max_columns', 300)","1165af74":"## Path\npath_train = \"..\/input\/dsajunho4vs\/train_df.csv\"\npath_test  = \"..\/input\/dsajunho4vs\/test_df.csv\"\n\n## Read\n\n### Train\ndtype_categ = {'card_id'             : 'category',\n               'feature_1'           : 'category',\n               'feature_2'           : 'category',\n               'feature_3'           : 'category',\n               'first_active_year'   : 'category',\n               'first_active_months' : 'category',\n               'is_na'               : 'category'}\n\ntrain_df = pd.read_csv(path_train, encoding=\"utf-8\", dtype=dtype_categ)\n#train_df = pd.read_csv(path_train, encoding=\"utf-8\", dtype=dtype_categ, nrows = 1000)\n\n### Test\ntest_df = pd.read_csv(path_test, encoding=\"utf-8\", dtype=dtype_categ)\n#test_df = pd.read_csv(path_test, encoding=\"utf-8\", dtype=dtype_categ, nrows = 1000)","81530876":"print(\"Rows and columns - Train: \",train_df.shape)\nprint(\"Rows and columns - Test: \",test_df.shape)","d92ac21c":"train_df.info()\ntrain_df.describe(include='all')","0e15938d":"train_df.head()","dacca082":"train_df.isnull().sum()","37f2d671":"test_df.info()\ntest_df.describe(include='all')","e0326766":"test_df.head()","af469e3a":"test_df.isnull().sum()","a6d9c0b9":"def rmse(y_true, y_pred):\n    return np.sqrt(mean_squared_error(y_true, y_pred))","efb024c2":"# Train\ntrain_df['new_city_id'] = train_df['new_city_id'].fillna(-1)\ntrain_df['aut_city_id'] = train_df['aut_city_id'].fillna(-1)\ncols = train_df.select_dtypes([np.number]).columns\ntrain_df[cols] = train_df[cols].fillna(-999)\ntrain_df[pd.isnull(train_df).any(axis=1)].head()","fc3e54d2":"# Test\ntest_df['new_city_id'] = test_df['new_city_id'].fillna(-1)\ntest_df['aut_city_id'] = test_df['aut_city_id'].fillna(-1)\ncols = test_df.select_dtypes([np.number]).columns\ntest_df[cols] = test_df[cols].fillna(-999)\ntest_df[pd.isnull(test_df).any(axis=1)].head()","ea6b6b5c":"# Train\ntarget = train_df['target']\ndel train_df['target']\n\ntrain_df.head(3)","a484c497":"seed = 12345\nvalidation_size = 0.20\n\ntrain_x, valid_x, train_y, valid_y = train_test_split(train_df, \n                                                      target, \n                                                      test_size=validation_size,\n                                                      random_state=seed)\n\nprint(\"Shape Train X: \", train_x.shape)\nprint(\"Shape Valid X: \", valid_x.shape)","90177373":"iterations = 1000\n\nparams = {'iterations': iterations,\n          'eval_metric': 'RMSE',\n          'verbose': True}","35f0e1e5":"from catboost import CatBoostRegressor\nfrom catboost import cv, Pool\n\nnum_folds = 5\n\ncat_features = ['card_id',\n                'feature_1',\n                'feature_2',\n                'feature_3',\n                'first_active_year',\n                'first_active_months',\n                'is_na',\n                'new_city_id',\n                'aut_city_id']\n\ncv_dataset = Pool(data=train_x,\n                  label=train_y,\n                  cat_features=cat_features)\n\ncv_results = cv(cv_dataset,\n                params,\n                fold_count=num_folds,\n                plot=True,\n                verbose=True)","c958a100":"model = CatBoostRegressor(iterations=iterations,\n                          eval_metric='RMSE',\n                          random_seed = seed)\n\nmodel.fit(train_x, \n          train_y,\n          cat_features=cat_features,\n          verbose=False)","e915fc97":"model.get_best_score()\n","f9eea1b6":"print(model.get_params())","502d9f31":"feature_imp = pd.DataFrame(sorted(zip(model.feature_importances_,valid_x)), columns=['Value','Feature'])\n\nplt.figure(figsize=(10, 50))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False))\nplt.title('CatBoost Features')\nplt.tight_layout()\nplt.show()","7fc4a7f4":"valid_pred = model.predict(valid_x)\nvalid_pred[1:5]","0908fa28":"print(rmse(valid_y, valid_pred))","5518cec5":"model = CatBoostRegressor(iterations=iterations,\n                          eval_metric='RMSE',\n                          random_seed = seed)\n\nmodel.fit(train_df, \n          target,\n          cat_features=cat_features,\n          verbose=False)\n\ntest_pred = model.predict(test_df)\ntest_pred[1:5]","3eef7e55":"sub_df = pd.DataFrame({'card_id': test_df['card_id'].values})\nsub_df['target'] = test_pred\nsub_df.to_csv('submit_catboost_1m_4vs_fm.csv', index=False)","005fa896":"### 2.1 Info and describe","fc5e79f1":"## Fill NA with -999","80cd8897":"## Imports","d904718f":"### 1.1 Info and describe","28f8d392":"## Separate target","392ca034":"## Kaggle Submission","1bbd6106":"## 1. Train","75d36259":"## Number of rows and columns","b4623c84":"### 1.2 First rows","c5c0284c":"### 2.3 Number of NaNs for each column\n","091a0b6b":"## Parameters","f68ed450":"## RMSE function","615bd609":"### 2.2 First rows","b520c4b2":"## 2. Test","63633cfb":"## Split X into training and validation sets","449a1083":"## Cross Validation","35e2968b":"## Fit Model","32cf28cd":"## DSA Competition - June 2019\nDeveloper: Cristina Santana Souza\n\nLinkedin: https:\/\/www.linkedin.com\/in\/cristina-santana-souza\/\n\nFeature Engineering: https:\/\/github.com\/crisansou\/kaggle\/tree\/master\/dsajunho","5fecea40":"## Score RMSE\n","83427b8b":"## Feature Importance","5f85de5d":"## Predict Validation","84747d57":"### Best score","68be8795":"### 1.3 Number of NaNs for each column\n","39b2118a":"## Load datasets","007b9fdf":"## Predict Test","03190394":"### Parameters"}}