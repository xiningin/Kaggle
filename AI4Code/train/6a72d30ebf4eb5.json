{"cell_type":{"b1c00bd8":"code","28ef9831":"code","1661f09e":"code","0a60ef44":"code","cb5282ca":"code","67d43fc2":"code","8ee5752b":"code","6e1c64c3":"code","8cd1d26a":"code","8ac7d329":"code","76823395":"code","37ed7709":"code","27a7a287":"code","0a601f6e":"code","54833c23":"code","9ed4a6f1":"code","63f2c291":"code","cb3d5630":"code","93806ab9":"code","997a9b37":"code","4b8190e3":"code","b514821b":"code","4da51d08":"code","cd499cc7":"code","e86ae0c4":"code","cf328c77":"code","2cd4c8c3":"code","b138432d":"code","d6d3c579":"code","a3fc5481":"code","8ad16f0e":"code","c1f18e35":"code","0deaf267":"code","88c8d0fc":"code","8064a413":"code","c101aea9":"code","bfccf7d4":"code","a901a174":"markdown","08759476":"markdown","99a38efa":"markdown","6ded897c":"markdown","c7134f5b":"markdown","e7bd5855":"markdown","55711742":"markdown","ae961340":"markdown","d8e5c908":"markdown","f545b956":"markdown","e298ec8c":"markdown","c633a322":"markdown","3ea1d91d":"markdown","1a3429fc":"markdown","ca151f4b":"markdown","3ccfb525":"markdown","a271c95b":"markdown","808bf14d":"markdown","c7e531fc":"markdown","3cb8bd73":"markdown","6e490ce8":"markdown","df31fea1":"markdown","09d6710a":"markdown","177df61f":"markdown","5a0045aa":"markdown"},"source":{"b1c00bd8":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom collections import Counter\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nimport xgboost\nimport lightgbm\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","28ef9831":"!pip install openpyxl","1661f09e":"#Load data\ndf_inf = pd.read_csv(\"\/kaggle\/input\/polycystic-ovary-syndrome-pcos\/PCOS_infertility.csv\")\ndf_woinf = pd.read_excel(\"\/kaggle\/input\/polycystic-ovary-syndrome-pcos\/PCOS_data_without_infertility.xlsx\",sheet_name=\"Full_new\")","0a60ef44":"#Look at the data with infertile patients.\ndf_inf.head()","cb5282ca":"#Look at the data with non-infertile patients.\ndf_woinf.head()","67d43fc2":"#Look at the columns of data with non-infertile patients.\ndf_woinf.columns","8ee5752b":"#Merge the files\ndata = pd.merge(df_woinf,df_inf, on='Patient File No.', suffixes={'','_wo'},how='left')\n#Drop repeated features\ndata =data.drop(['Unnamed: 44', 'Sl. No_wo', 'PCOS (Y\/N)_wo', '  I   beta-HCG(mIU\/mL)_wo',\n       'II    beta-HCG(mIU\/mL)_wo', 'AMH(ng\/mL)_wo'], axis=1)\n#Change the title of the properties\ndata = data.rename(columns = {\"PCOS (Y\/N)\":\"Target\"})\n#Look at the merged data.\ndata.head() ","6e1c64c3":"#Drop unnecessary features\ndata = data.drop([\"Sl. No\",\"Patient File No.\"],axis = 1)","8cd1d26a":"data.info()","8ac7d329":"data[\"AMH(ng\/mL)\"].head() ","76823395":"data[\"II    beta-HCG(mIU\/mL)\"].head()","37ed7709":"#Converting\ndata[\"AMH(ng\/mL)\"] = pd.to_numeric(data[\"AMH(ng\/mL)\"], errors='coerce')\ndata[\"II    beta-HCG(mIU\/mL)\"] = pd.to_numeric(data[\"II    beta-HCG(mIU\/mL)\"], errors='coerce')","27a7a287":"colors = ['#670067','#008080']","0a601f6e":"def bar_plot(variable):\n    \"\"\"\n     input: variable example : Target\n     output: bar plot & value count\n     \n    \"\"\"\n    #get feature\n    var = data[variable]\n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index,varValue,color=colors)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Count\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","54833c23":"category = [\"Target\", \"Pregnant(Y\/N)\", \"Weight gain(Y\/N)\", \"hair growth(Y\/N)\", \"Skin darkening (Y\/N)\", \"Hair loss(Y\/N)\", \n            \"Pimples(Y\/N)\", \"Fast food (Y\/N)\", \"Reg.Exercise(Y\/N)\", \"Blood Group\"]\nfor c in category:\n    bar_plot(c)","9ed4a6f1":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(data[variable], bins = 50,color=colors[0])\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","63f2c291":"numericVar = [\" Age (yrs)\", \"Weight (Kg)\",\"Marraige Status (Yrs)\"]\nfor n in numericVar:\n    plot_hist(n)","cb3d5630":"data.columns[data.isnull().any()]","93806ab9":" #Filling missing values with the median value of the features.\n\ndata['Marraige Status (Yrs)'].fillna(data['Marraige Status (Yrs)'].median(),inplace=True)\ndata['II    beta-HCG(mIU\/mL)'].fillna(data['II    beta-HCG(mIU\/mL)'].median(),inplace=True)\ndata['AMH(ng\/mL)'].fillna(data['AMH(ng\/mL)'].median(),inplace=True)\ndata['Fast food (Y\/N)'].fillna(data['Fast food (Y\/N)'].median(),inplace=True)\n","997a9b37":"data.isnull().sum()","4b8190e3":"data.describe()","b514821b":"corr_matrix= data.corr()\nplt.subplots(figsize=(30,10))\nsns.heatmap(corr_matrix,cmap=\"Set3\", annot = True, fmt = \".2f\");\nplt.title(\"Correlation Between Features\")\nplt.show()","4da51d08":"threshold = 0.25 \nfiltre = np.abs(corr_matrix[\"Target\"]) > threshold \ncorr_features = corr_matrix.columns[filtre].tolist()\nplt.subplots(figsize=(10,7))\nsns.heatmap(data[corr_features].corr(),cmap=\"Set3\", annot = True, fmt = \".2f\")\nplt.title(\"Correlation Between Features w Corr Theshold 0.25\")\nplt.show()","cd499cc7":"X= data.drop(labels = [\"Target\"],axis = 1)\ny=data.Target","e86ae0c4":"X_train,X_test, y_train, y_test = train_test_split(X,y, test_size=0.3) ","cf328c77":"print(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))","2cd4c8c3":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","b138432d":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": ['auto', 'sqrt', 'log2'],\n                \"n_estimators\":[300,500],\n                \"criterion\":[\"gini\"],\n                'max_depth' : [4,5,6,7,8,9,10,12],}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\n\n\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","d6d3c579":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(round(clf.best_score_*100,2))\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","a3fc5481":"best_estimators","8ad16f0e":"dt = best_estimators[0]\nsvm = best_estimators[1]\nrf = best_estimators[2]\nlr = best_estimators[3]\nknn = best_estimators[4]","c1f18e35":"# xgbrf classifier\nxgb_clf = xgboost.XGBRFClassifier(max_depth=3, random_state=random_state)\nxgb_clf.fit(X_train,y_train)\nacc_xgb_clf_train = round(xgb_clf.score(X_train, y_train)*100,2) \nacc_xgb_clf_test = round(xgb_clf.score(X_test,y_test)*100,2)\ncv_result.append(acc_xgb_clf_train)\nprint(\"Training Accuracy: % {}\".format(acc_xgb_clf_train))\nprint(\"Testing Accuracy: % {}\".format(acc_xgb_clf_test))","0deaf267":"#CatBoost Classifier\ncat_clf = CatBoostClassifier()\ncat_clf.fit(X_train,y_train)\nacc_cat_clf_train = round(cat_clf.score(X_train, y_train)*100,2) \nacc_cat_clf_test = round(cat_clf.score(X_test,y_test)*100,2)\ncv_result.append(acc_cat_clf_train)\nprint(\"Training Accuracy: % {}\".format(acc_cat_clf_train))\nprint(\"Testing Accuracy: % {}\".format(acc_cat_clf_test))","88c8d0fc":"model_list = ['Decision Tree','SVC','RandomForest','Logistic Regression','KNearestNeighbours','XGBRF','CatBoostClassifier']","8064a413":"import plotly.graph_objects as go\n# create trace1\ntrace1 = go.Bar(\n                x = model_list,\n                y = cv_result,\n                marker = dict(color = 'rgb(0, 128, 128)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(title = 'Accuracy of different Classifier Models' , xaxis = dict(title = 'Classifier Models'), yaxis = dict(title = '% of Accuracy'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","c101aea9":"model = [dt,svm,rf,lr,knn,xgb_clf,cat_clf]\npredictions = []","bfccf7d4":"for i in model:\n    predictions.append(i.predict(X_test))\nfor j in range(7):\n    cm = confusion_matrix(y_test, predictions[j])\n    plot_confusion_matrix(cm, figsize=(12,8), hide_ticks=True, cmap=plt.cm.Set3)\n    plt.title(\" {} Confusion Matrix\".format(model_list[j]))\n    plt.xticks(range(2), [\"Not Pcos\",\"Pcos\"], fontsize=16)\n    plt.yticks(range(2), [\"Not Pcos\",\"Pcos\"], fontsize=16)\n    plt.show()","a901a174":"<a id = \"7\" ><\/a>\n# <span style=\"color:purple;\">Missing Values<\/span>","08759476":"<a id = \"2\" ><\/a>\n# <span style=\"color:purple;\"> Load and Check Data <\/span>","99a38efa":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#008080;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<ul><p style=\"padding: 10px;color:white;\" >Look at the value count <\/p>\n        <li> <p style=\"padding: 10px;color:white;\" > yes --> 1 <\/p> <\/li>\n        <li > <p style=\"padding: 10px;color:white;\" > no  --> 0 <\/p> <\/li>\n<\/ul>\n<\/div>","6ded897c":"<a id = \"13\" ><\/a>\n## <span style=\"color:purple;\">XGBRF and CatBoost Classsifier<\/span>","c7134f5b":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#008080;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">\nLet's look at the model,accuracy score and confusion matrix<\/p>\n<\/div>","e7bd5855":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#008080;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">\nLet's look at the properties that have a relationship greater than 0.25 with the target.<\/p>\n<\/div>","55711742":"<a id = \"10\" ><\/a>\n## <span style=\"color:purple;\">Train - Test Split<\/span>","ae961340":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#008080;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">\n    As you can see some numeric data is saved as strings : AMH(ng\/mL) , II    beta-HCG(mIU\/mL). Let's converting them. <\/p>\n<\/div>","d8e5c908":"<a id = \"11\" ><\/a>\n## <span style=\"color:purple;\">Simple Logistic Regression<\/span>","f545b956":"<a id = \"5\" ><\/a>\n## <span style=\"color:purple;\">Categorical Variable<\/span>","e298ec8c":"<a id = \"1\" ><\/a>\n# <span style=\"color:purple;\"> Import Libraries <\/span>","c633a322":"<a id = \"9\" ><\/a>\n# <span style=\"color:purple;\">Modeling<\/span>","3ea1d91d":"<a id = \"12\" ><\/a>\n## <span style=\"color:purple;\">Hyperparameter Tuning -- Grid Search -- Cross Validation<\/span>","1a3429fc":"<a id = \"3\" ><\/a>\n# <span style=\"color:purple;\">Variable Description<\/span>","ca151f4b":"<a id = \"14\" ><\/a>\n# <span style=\"color:purple;\">Results<\/span>","3ccfb525":"<h1 style=\"text-align:center\">   \n      <font color = purple >\n                Polycystic Ovary Syndrome(PCOS) Classification\n        <\/font>    \n<\/h1>   \n<hr style=\"width:100%;height:5px;border-width:0;background-color:teal\">\n<center><img style = \"height:550px;\" src=\"https:\/\/i.hizliresim.com\/QnIpYV.jpg\"><\/center>\n<br>\n<center><h1>\n    <font color = purple>Introduction<\/font> <\/h1><\/center>\n<br>\n<p>Polycystic ovary syndrome is a disorder involving infrequent, irregular or prolonged menstrual periods, and often excess male hormone (androgen) levels.<\/p>\n\n<h2><font color = purple>Content:<\/font><\/h2>\n<br>\n \n1. [Import Libraries](#1)\n1. [Load and Check Data](#2)\n1. [Variable Description](#3)\n    * [Univariate Variable Analysis ](#4)\n        * [Categorical Variable Analysis ](#5)\n        * [Numerical Variable Analysis ](#6)\n1. [Missing Values](#7)\n1. [Data Analysis](#8)   \n1. [Modeling](#9)\n    * [Train - Test Split](#10)\n    * [Simple Logistic Regression](#11)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#12)\n    * [XGBRF and CatBoost Classsifier](#13)\n1. [Results](#14)","a271c95b":"<a id = \"6\" ><\/a>\n## <span style=\"color:purple;\">Numerical Variable<\/span>","808bf14d":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#008080;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<ul style=\"padding: 10px;color:white;\">\nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n<li>Decision Tree<\/li>\n<li>SVM<\/li>\n<li>Random Forest<\/li>\n<li>KNN<\/li>\n<li>Logistic Regression<\/li><\/ul>\n<\/div>","c7e531fc":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#008080;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">\n    The files were divided into infertility and without-infertility patients. Let's combine them by patient file no ,delete repeated features and change PCOS(Y\/N) to Target.<\/p>\n<\/div>","3cb8bd73":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#008080;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">If you see the Missing optional dependency 'xlrd' error.You just need to install a required package before trying to use pd.read_excel.<\/p>\n<\/div>","6e490ce8":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#008080;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">\nLet's examine the correlation matrix of all features. <\/p>\n<\/div>","df31fea1":"<a id = \"8\" ><\/a>\n# <span style=\"color:purple;\">Data Analysis<\/span>","09d6710a":" <a id = \"4\" ><\/a>\n ## <span style=\"color:purple;\">Univariate Variable Analysis<\/span>\n* Categorical Variable : Target,  Pregnant(Y\/N), Weight gain(Y\/N), hair growth(Y\/N), Skin darkening (Y\/N), Hair loss(Y\/N), Pimples(Y\/N), Fast food (Y\/N), Reg.Exercise(Y\/N), Blood Group\n* Numerical Variable : Age (yrs), Weight (Kg),Marraige Status (Yrs)... ","177df61f":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#008080;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">\n    Let's look at the dtype is an object<\/p>\n<\/div>","5a0045aa":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#008080;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">\n    As you can see there are some missing values:Marraige Status (Yrs),II    beta-HCG(mIU\/mL), AMH(ng\/mL) and Fast food (Y\/N). Let's deal with missing values. <\/p>\n<\/div>"}}