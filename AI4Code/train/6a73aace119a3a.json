{"cell_type":{"b9659aa6":"code","1b6692cd":"code","ea1761c1":"code","ecb0179e":"code","2ec234b5":"code","c1e586ad":"code","207e1b73":"code","cfac49fd":"code","934130e2":"code","82988417":"code","201a6ac0":"code","3279f9df":"code","366092e9":"code","24915696":"code","2fa35929":"code","e7ffd43e":"code","4d91fbdd":"code","69419494":"code","2c753051":"code","b3f57be1":"code","403a0e25":"code","9ba95d3c":"code","d9f37c10":"code","935f7a1c":"code","1800a043":"code","17ac9524":"code","e50d2239":"code","7458b994":"code","f9e961f0":"code","2342589a":"code","d1a5f4c3":"code","576dbfdc":"code","671bdea1":"code","76010f63":"code","cceb355b":"code","163eee6e":"code","87b6f3ac":"code","dc82a662":"code","25bd3cec":"code","fb745f39":"code","fa4a4d94":"code","b73b7870":"code","ff05c889":"code","71af3977":"code","01bb1161":"code","f4277b3f":"code","7e274509":"code","6cd2a97e":"code","80545e54":"code","e7fe8317":"code","338d0e4b":"code","87809d3d":"code","33beb1ac":"markdown","484f230f":"markdown","209fc5e3":"markdown","5f5b152b":"markdown","bc44935a":"markdown","fd3b43ea":"markdown","121a5572":"markdown","a20a1646":"markdown","7bc8ebfc":"markdown","5b6bd5c1":"markdown","f94f6cf7":"markdown","9234f8e4":"markdown","0cba7593":"markdown","6e1174e3":"markdown","09980df2":"markdown","333a9b1f":"markdown","1587c050":"markdown","c519bbc9":"markdown","8f1a563e":"markdown","3ef2d6cb":"markdown","964229ac":"markdown","ab21d120":"markdown","97319577":"markdown","09623ab2":"markdown","eecd0e49":"markdown","7cf480d6":"markdown","45228246":"markdown","5ae2c748":"markdown","5af00fe8":"markdown","4302c53c":"markdown"},"source":{"b9659aa6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1b6692cd":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","ea1761c1":"df=pd.read_csv(\"..\/input\/customer-analytics\/Train.csv\")","ecb0179e":"df.head()","2ec234b5":"print(\"Number of Rows:\",df.shape[0])\nprint(\"Number of Columns:\",df.shape[1])","c1e586ad":"df.info()","207e1b73":"df.rename(columns={\"Reached.on.Time_Y.N\":\"Arrival_Time\"},inplace=True)","cfac49fd":"df.columns","934130e2":"df.isnull().sum()","82988417":"df.drop(columns = 'ID',inplace=True)","201a6ac0":"df.head(2)","3279f9df":"import plotly.express as px\nfrom plotly import graph_objects as go\nimport plotly.figure_factory as ff\nimport plotly.offline as py ","366092e9":"time_count = pd.DataFrame(df[\"Arrival_Time\"].value_counts()).reset_index()\ntime_count.rename(columns={\"index\": \"Arrival Time\",\"Arrival_Time\":\"Count\"},inplace=True)\ntime_count['Percentage']=round((time_count['Count']\/ time_count['Count'].sum()*100),2)","24915696":"time_count","2fa35929":"fig = px.bar(time_count,x=\"Arrival Time\",y='Count',title='Arrival Time Distribution',width=500,height=500,\n             hover_name='Percentage')\nfig.show()","e7ffd43e":"whb_count = pd.DataFrame(df[\"Warehouse_block\"].value_counts()).reset_index()\nwhb_count.rename(columns={\"index\": \"Warehouse_block\",\"Warehouse_block\":\"Count\"},inplace=True)","4d91fbdd":"whb_count","69419494":"fig = px.pie(whb_count, values='Count', names='Warehouse_block',title=\"Items in Each WareHouse Block\")\nfig.show()","2c753051":"fig = px.sunburst(df, path=['Gender','Mode_of_Shipment','Product_importance','Warehouse_block'], \n                   color=df['Cost_of_the_Product'],\n                  color_continuous_scale='RdBu')\nfig.show()","b3f57be1":"flight = df[df[\"Mode_of_Shipment\"]==\"Flight\"]\nship = df[df[\"Mode_of_Shipment\"]==\"Ship\"]\nroad = df[df[\"Mode_of_Shipment\"]==\"Road\"]\n\ntrace = go.Box(y = flight[\"Cost_of_the_Product\"],fillcolor=\"aqua\", name= \"Flight\" )\ntrace1 = go.Box(y = ship[\"Cost_of_the_Product\"], fillcolor=\"pink\", name= \"Ship\" )\ntrace2 = go.Box(y = road[\"Cost_of_the_Product\"], fillcolor=\"teal\", name= \"Road\" )\n\nlayout = go.Layout(title=\"Cost Distribution w.r.t Mode of Shipment\", \n                   yaxis=dict(title=\"Cost of Product\"), \n                   xaxis= dict(title=\"Mode of Shipment\"))\n\ndata=[trace, trace1, trace2]\nfig = go.Figure(data = data, layout=layout)\npy.iplot(fig)","403a0e25":"ontime = df[df[\"Arrival_Time\"]==0]\ndelay = df[df[\"Arrival_Time\"]==1]\n\ntrace = go.Box(y = ontime[\"Cost_of_the_Product\"],fillcolor=\"aqua\", name= \"Ontime\" )\ntrace1 = go.Box(y = delay[\"Cost_of_the_Product\"], fillcolor=\"pink\", name= \"Delayed\" )\n\nlayout = go.Layout(title=\"Cost Distribution w.r.t Arrival TIme\", \n                   yaxis=dict(title=\"Cost of Product\"), \n                   xaxis= dict(title=\"Arrival Time\"))\n\ndata=[trace, trace1]\nfig = go.Figure(data = data, layout=layout)\npy.iplot(fig)","9ba95d3c":"x = df[\"Cost_of_the_Product\"]\n\nhist_data = [x]\ngroup_labels = ['distplot']\n\nfig = ff.create_distplot(hist_data = hist_data,\n                         group_labels = group_labels)\nfig.show()","d9f37c10":"df = pd.get_dummies(df, prefix_sep=\"_\", drop_first=True)","935f7a1c":"df.head(2)","1800a043":"plt.figure(figsize=(20,20))\nsns.heatmap(df.corr(),cmap=\"Blues\",annot=True,annot_kws={\"size\": 10},linewidths=1)","17ac9524":"df.corr()['Arrival_Time'].sort_values().reset_index()","e50d2239":"from sklearn.decomposition import PCA\nfrom sklearn import preprocessing","7458b994":"X=df[['Customer_care_calls', 'Customer_rating', 'Cost_of_the_Product',\n       'Prior_purchases', 'Discount_offered', 'Weight_in_gms']]","f9e961f0":"X.head()","2342589a":"pcs_w = PCA()\npcs_w.fit(X)","d1a5f4c3":"pcs_w_Summary_df = pd.DataFrame({\"Standard deviation\" : np.sqrt(pcs_w.explained_variance_),\n                          \"Proportion of Variance\" : pcs_w.explained_variance_ratio_,\n                          \"Cumulative Proportion\" : np.cumsum(pcs_w.explained_variance_ratio_)})","576dbfdc":"pcs_w_Summary_df = pcs_w_Summary_df.transpose()\npcs_w_Summary_df.columns = ['PC'+str(i) for i in range(1, len(pcs_w_Summary_df.columns)+1)]\npcs_w_Summary_df.round(3)","671bdea1":"#normalising\nshipment_norm = preprocessing.scale(X)","76010f63":"pcs = PCA()\npcs.fit(shipment_norm)","cceb355b":"pcsSummary_df = pd.DataFrame({\"Standard deviation\" : np.sqrt(pcs.explained_variance_),\n                          \"Proportion of Variance\" : pcs.explained_variance_ratio_,\n                          \"Cumulative Proportion\" : np.cumsum(pcs.explained_variance_ratio_)})","163eee6e":"pcsSummary_df = pcsSummary_df.transpose()","87b6f3ac":"pcsSummary_df.columns = ['PC'+str(i) for i in range(1, len(pcsSummary_df.columns)+1)]\npcsSummary_df.round(3)","dc82a662":"pca = PCA(n_components=6)\npca_reduced = pca.fit_transform(shipment_norm)","25bd3cec":"pca_reduced.shape","fb745f39":"y = df['Arrival_Time']","fa4a4d94":"#importing necessary libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.model_selection import cross_val_score","b73b7870":"xtrain, xtest, ytrain, ytest = train_test_split(pca_reduced, y, test_size = 0.33, random_state = 42)","ff05c889":"from sklearn.linear_model import LogisticRegression\nlg=LogisticRegression()\nlg.fit(xtrain,ytrain)\n\npredictions_logg=lg.predict(xtest)","71af3977":"print(confusion_matrix(ytest,predictions_logg))\nprint(classification_report(ytest,predictions_logg))","01bb1161":"#10 Fold Cross Validation\naccuracies = cross_val_score(estimator = lg, X=xtrain, y=ytrain, cv=10)\naccuracies\nprint(\"10 Fold Cross Validation:\",accuracies)\nprint(\"Mean Accuracy:\",np.mean(accuracies))","f4277b3f":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(xtrain, ytrain)\n\nypred = nb.predict(xtest)","7e274509":"print(confusion_matrix(ytest,ypred))\nprint(classification_report(ytest,ypred))\n\n#10 Fold Cross Validation\naccuracies = cross_val_score(estimator = nb, X=xtrain, y=ytrain, cv=10)\naccuracies\nprint(\"10 Fold Cross Validation:\",accuracies)\nprint(\"Mean Accuracy:\",np.mean(accuracies))","6cd2a97e":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(random_state=0)\n# fit the model\nrfc.fit(xtrain, ytrain)\n# Predict the Test set results\ny_predrfc = rfc.predict(xtest)","80545e54":"print(confusion_matrix(ytest,y_predrfc))\nprint(classification_report(ytest,y_predrfc))\n\n#10 Fold Cross Validation\naccuracies = cross_val_score(estimator = rfc, X=xtrain, y=ytrain, cv=10)\naccuracies\nprint(\"10 Fold Cross Validation:\",accuracies)\nprint(\"Mean Accuracy:\",np.mean(accuracies))","e7fe8317":"from sklearn.ensemble  import AdaBoostClassifier\nada_obj = AdaBoostClassifier(random_state=42)\nada_classifier = ada_obj.fit(xtrain, ytrain)\ny_pred_ada = ada_classifier.predict(xtest)","338d0e4b":"print(confusion_matrix(ytest,y_pred_ada))\nprint(classification_report(ytest,y_pred_ada))\n\n#10 Fold Cross Validation\naccuracies = cross_val_score(estimator = ada_classifier, X=xtrain, y=ytrain, cv=10)\naccuracies\nprint(\"10 Fold Cross Validation:\",accuracies)\nprint(\"Mean Accuracy:\",np.mean(accuracies))","87809d3d":"from sklearn.metrics import roc_curve, roc_auc_score, auc\n\nmodels = [\n     {\n        'label': ' Logistic Regression',\n        'model': lg\n    },\n    {\n        'label': 'Naive Bayes Classification',\n        'model': nb\n    },\n    {\n        'label': 'Random Forest Classification',\n        'model': rfc\n    },\n    {\n        'label': 'Adaboost Classification',\n        'model': ada_classifier\n    }\n]\n\nplt.clf()\nplt.figure(figsize=(8,6))\nfor m in models:\n    m['model'].probability = True\n    probas = m['model'].fit(xtrain,ytrain).predict_proba(xtest)\n    fpr, tpr, thresholds = roc_curve(ytest, probas[:, 1])\n    roc_auc  = auc(fpr, tpr)\n    plt.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % (m['label'], roc_auc))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=0, fontsize='small')\nplt.show()","33beb1ac":"4.Plotly Box Plot","484f230f":"# CLASSIFICATION","209fc5e3":"**The dataset used for model building contained 10999 observations of 12 variables. The data contains the following information:**\n\n1. ID: ID Number of Customers.\n2. Warehouse block: The Company have big Warehouse which is divided in to block such as A,B,C,D,E.\n3. Mode of shipment:The Company Ships the products in multiple way such as Ship, Flight and Road.\n4. Customer care calls: The number of calls made from enquiry for enquiry of the shipment.\n5. Customer rating: The company has rated from every customer. 1 is the lowest (Worst), 5 is the highest (Best).\n6. Cost of the product: Cost of the Product in US Dollars.\n7. Prior purchases: The Number of Prior Purchase.\n8. Product importance: The company has categorized the product in the various parameter such as low, medium, high.\n9. Gender: Male and Female.\n10. Discount offered: Discount offered on that specific product.\n11. Weight in gms: It is the weight in grams.\n12. Reached on time: It is the target variable, where 1 Indicates that the product has NOT reached on time and 0 indicates it has reached on time","5f5b152b":"### 1. LOGISTIC REGRESSION","bc44935a":"*Checking for Null Values*","fd3b43ea":"## ROC TESTS","121a5572":"### PCA with Normalization","a20a1646":"#### PCA without normalization","7bc8ebfc":"### 2.NAIVE BAYES CLASSIFICATION","5b6bd5c1":"# Visualisation","f94f6cf7":"### 3.RANDOM FOREST CLASSIFIER","9234f8e4":"33% of the goods are stored in Warehouse F, and others warehouses store only 16.7%.","0cba7593":"# CORRELATION ANALYSIS","6e1174e3":"*Renaming Coulumn*","09980df2":"# DIMENSIONALITY REDUCTION (PCA)","333a9b1f":"1.How Many Shipments Have arrived On Time?","1587c050":"*Removing unwanted Column 'ID'*","c519bbc9":"Only 40% of the the products have reached the destination at time , almost 60% had a delayed delivery time.","8f1a563e":"Observation : There are no null values in the dataset.","3ef2d6cb":"5.Histogram","964229ac":" To explain 90% variance 5 components are required","ab21d120":"Without Normalization only one component is required to explain 99% variance.","97319577":"# Dummy Variables","09623ab2":"****Data Pre Processing****","eecd0e49":"3.Plotly Sunburst","7cf480d6":"### 4.ADABOOST CLASSIFIER","45228246":"2.How many items are there in Each WareHouse?","5ae2c748":"***Plotly Plots***","5af00fe8":"* Weight_in_gms: Negative correlation might be reasonable since it would be harder to handle shipment of heavier products.\n* Cost_of_the_Product: Weak negative correlation.\n* Customer_care_calls: Weak negative correlation. The problems with shipment may require more calls.\n* Prior_purchases: Weak negative correlation. Customer acquisition might be main strategy rather than customer retention. However, magnitude of correlation is too low to make a certain comment on it.\n* Customer_rating: Weak Positive correlation.\n* Discount_offered: Positive correlation. Probably, high discount rates are offered to more important customers whose shipments are priortized to be completed on time.\n* Warehouse_block,Mode_of_Shipment,Product_importance and Gender and very weak correlation on Arrival Time of the sipment. So we can omit those fields for our modelling","4302c53c":"Random Forest Classfier gives the highest accuracy compared to other models."}}