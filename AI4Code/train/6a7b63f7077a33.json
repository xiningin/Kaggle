{"cell_type":{"eaead333":"code","c8384151":"code","1066bd35":"code","4ddad12a":"code","ba7070cf":"code","a1b8a06f":"code","a9b32f8a":"code","375919dc":"code","31cf84ff":"code","b26bbff1":"code","5a0868e9":"code","db20089f":"code","1b8fe432":"code","a72a5617":"code","8ed688e5":"code","89c45f8f":"code","d252273c":"code","874702de":"code","43fc1ba7":"code","00dc4787":"code","42868e11":"code","6538183f":"code","3fe84731":"code","ca7e86fe":"code","dc1459f7":"code","fecdadf0":"code","95363935":"code","fa4818de":"code","e158f6cb":"code","88b38e52":"code","a8cde26d":"code","6b54cb91":"markdown","2cec4c60":"markdown","f8f61fbc":"markdown","e7b654e0":"markdown","80e42890":"markdown","158142df":"markdown","6b1f291e":"markdown","f481309c":"markdown","e42532f9":"markdown","0cbdd607":"markdown","81132bbe":"markdown","a6537ac6":"markdown","158e5f97":"markdown","eee450da":"markdown","7e74873a":"markdown","e04cb58b":"markdown","f9250086":"markdown","b3f26219":"markdown","3c401bea":"markdown","8c22830e":"markdown","9f0c2995":"markdown","27b8625e":"markdown","37d8f350":"markdown","66a4e335":"markdown","d9d71237":"markdown","425841da":"markdown","74fe67dd":"markdown","c4c6131c":"markdown","e2fc4fbb":"markdown","9c4be715":"markdown","0a0e22b5":"markdown","b0036c8d":"markdown","f0bc2250":"markdown","724c235f":"markdown","b9508bf6":"markdown","a583df35":"markdown","d7f4513f":"markdown","69e1e64e":"markdown","3e03ddee":"markdown","7d52fb3d":"markdown","e3160b78":"markdown","5382ed32":"markdown","57e97caf":"markdown","6bf93bd8":"markdown","c29271dc":"markdown","b084e993":"markdown","6ae589e5":"markdown","b2c1d074":"markdown","58fde0bb":"markdown"},"source":{"eaead333":"import numpy as np\nimport pandas as pd\n\n# Import matplotlib.pyplot\nimport matplotlib.pyplot as plt\n\n# Import seaborn library\nimport seaborn as sns\nsns.set()\n\n# Import plotly.plotly, \n# plotly.offline -> download_plotlyjs, init_notebook_mode, plot, iplot, and\n# plotly.graph_objs\nimport chart_studio.plotly as py\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.graph_objs as go\nimport pycountry\n\nimport folium \nfrom folium import plugins\n\n# Enable notebook mode\ninit_notebook_mode(connected = True)\n\n# Graphics in retina format \n%config InlineBackend.figure_format = 'retina' \n\n# Increase the default plot size and set the color scheme\nplt.rcParams['figure.figsize'] = 8, 5\n#plt.rcParams['image.cmap'] = 'viridis'\n\n# To see the plots in the notebook\n%matplotlib inline","c8384151":"raw_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv\")\nraw_data.head()","1066bd35":"# See few data records\nraw_data.head()","4ddad12a":"# Shape of the data\nraw_data.shape","ba7070cf":"# Information about each columns\nraw_data.info()","a1b8a06f":"# Generates descriptive statistics\nraw_data.describe()","a9b32f8a":"# Checking missing values (column-wise)\nraw_data.isnull().sum()","375919dc":"# Checking the percentage of missing values\nround(100*(raw_data.isnull().sum()\/len(raw_data.index)), 2)","31cf84ff":"# Dropping the rows with missing Province\/State.\nraw_data.dropna(inplace=True)","b26bbff1":"# Checking missing values (column-wise)\nraw_data.isnull().sum()","5a0868e9":"raw_data[\"LastUpdated\"] = pd.to_datetime(raw_data['Last Update'])","db20089f":"# Extract different components from the date\n\nraw_data['date'] = pd.DatetimeIndex(raw_data['LastUpdated']).date\n\nraw_data['year'] = pd.DatetimeIndex(raw_data['LastUpdated']).year\n\nraw_data['month'] = pd.DatetimeIndex(raw_data['LastUpdated']).month\n\nraw_data['day'] = pd.DatetimeIndex(raw_data['LastUpdated']).day\n\nraw_data['time'] = pd.DatetimeIndex(raw_data['LastUpdated']).time\n\nraw_data['dayofweek'] = pd.DatetimeIndex(raw_data['LastUpdated']).dayofweek\n\nraw_data['day_name'] = pd.DatetimeIndex(raw_data['LastUpdated']).day_name()\n\nraw_data['month_name'] = pd.DatetimeIndex(raw_data['LastUpdated']).month_name()\nraw_data.head()","1b8fe432":"severity = (raw_data['Deaths'].sum() \/ raw_data['Confirmed'].sum())*100\nseverity","a72a5617":"top_country = raw_data.groupby('Country').sum()\ntop_country['Country'] = top_country.index\ntop_country.sort_values(by='Confirmed', ascending=False).head(10)","8ed688e5":"countries = [country for country, df in raw_data.groupby('Country')]\n\nplt.bar(countries, top_country['Confirmed'])\nplt.xticks(countries, rotation='vertical', size=8)\nplt.xlabel('Country name')\nplt.ylabel('Number of Confirmed cases')\nplt.show()","89c45f8f":"# Make a data frame with dots to show on the map\nworld_data = pd.DataFrame({\n   'name':list(top_country['Country']),\n    'lat':[-25.27,56.13,35.86,51.17,22.32,22.19,35.96,23.7,37.09],\n   'lon':[133.78,-106.35,104.19,10.45,114.17,113.54,90.19,120.96,-95.71],\n   'Confirmed':list(top_country['Confirmed']),\n})\n\n# create map and display it\nworld_map = folium.Map(location=[10, -20], zoom_start=2.3,tiles='OpenStreetMap')\n\nfor lat, lon, value, name in zip(world_data['lat'], world_data['lon'], world_data['Confirmed'], world_data['name']):\n    folium.CircleMarker([lat, lon],\n                        radius=value * 0.001,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases <\/strong>: ' + str(value) + '<br>'),\n                        color='purple',\n                        \n                        fill_color='indigo',\n                        fill_opacity=0.7 ).add_to(world_map)\n\nworld_map","d252273c":"cntry = top_country['Country'].tolist()\n\nconfirmed = top_country['Confirmed'].tolist()\n\ncntryCode = ['AUS','CAN', 'CHN','DEU','HKG','MAC','CHN', 'TWN', 'USA']\n\n# Create a data using dict() method\ndata = dict(type = 'choropleth', # what type of plot you are doing\n           locations = cntryCode, # list of abbreviated codes \n           #locationmode = 'USA-states', # locationmode for above abbreviated codes\n           colorscale = 'Portland', # the colors you wanna plot\n           text = cntry, # texts for the corresponding elements in locations parameter\n           z = confirmed, # The color you want to represent for the corresponding elements in locations parameter\n           colorbar = {'title' : 'Colorbar Title Goes Here'}) # Description about the color bar\n\nlayout = dict(title = 'Confirmed cases of Coronavirus',\n              geo = dict(showframe = True,\n                         showlakes = True, # Shows the actual lakes in the map\n                     lakecolor = 'rgb(85, 173, 240)',\n                         \n                     projection = {'type' : 'equirectangular'}\n                    ))\n\nchoromap = go.Figure(data = [data], layout = layout)\n\niplot(choromap)","874702de":"mainland_china = raw_data.loc[raw_data['Country'] == 'Mainland China']\n\ntop_states = mainland_china.groupby('Province\/State').sum()\ntop_states['Province\/State'] = top_states.index\ntop_states.sort_values(by='Confirmed', ascending=False).head(10)","43fc1ba7":"states = top_states['Province\/State']\n\nplt.bar(states, top_states['Confirmed'])\nplt.xticks(states, rotation='vertical')\nplt.xlabel('State name')\nplt.ylabel('Number of Confirmed cases')\nplt.show()","00dc4787":"f, ax = plt.subplots(figsize=(20, 8))\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Confirmed\", y=\"Province\/State\", data=top_states,\n            label=\"Confirmed\", color=\"b\")\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Recovered\", y=\"Province\/State\", data=top_states,\n            label=\"Recovered\", color=\"g\")\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"upper right\", frameon=True)\nax.set(xlim=(0, 2000), ylabel=\"\",\n       xlabel=\"Stats\")\nsns.despine(left=True, bottom=True)","42868e11":"# Create a pivot table on 'raw_data' dataset\nfp = raw_data.pivot_table(index = 'Province\/State', columns = 'Country', values = 'Confirmed')","6538183f":"# Plot the heatmap for the above pivot table\nsns.heatmap(fp, cmap = 'plasma')","3fe84731":"daily_confirmed = raw_data.groupby('date').sum()\ndaily_confirmed","ca7e86fe":"dates = [date for date, df in raw_data.groupby('date')]\ndates = pd.DatetimeIndex(dates).day\n\nplt.plot(dates, daily_confirmed['Confirmed'])\n\nplt.xticks(dates, rotation='vertical')\nplt.show()","dc1459f7":"top_country['recovered_percent'] = (top_country['Recovered'] \/ top_country['Confirmed'])*100\ntop_country['death_percent'] = (top_country['Deaths'] \/ top_country['Confirmed'])*100\n\ntop_country.sort_values(by='recovered_percent', ascending=False).head(10)","fecdadf0":"# We can define the figure size while creating subplots: multiple subplots\nfig, ax = plt.subplots(nrows = 1, ncols = 2, figsize = (15, 5), dpi = 100)\n\n#ax.plot(dates, daily_confirmed['Confirmed'])\nax[0].plot(dates, daily_confirmed['Recovered'], label = 'Recovered')\nax[0].plot(dates, daily_confirmed['Deaths'], label = 'Deaths')\n\nax[1].plot(dates,daily_confirmed['Confirmed'], label = 'Confirmed')\nax[1].plot(dates,daily_confirmed['Recovered'], label = 'Recovered')\nax[1].plot(dates,daily_confirmed['Deaths'], label = 'Deaths')\n\nplt.xticks(dates, rotation='vertical')\nax[0].legend()\nax[1].legend()\nplt.tight_layout()\nplt.show()","95363935":"countries = top_country['Country']\n\n# We can define the figure size while creating subplots: multiple subplots\nfig, ax = plt.subplots(nrows = 1, ncols = 2, figsize = (15, 5), dpi = 100)\n\n#ax.plot(dates, daily_confirmed['Confirmed'])\nax[0].plot(countries, top_country['Recovered'], label = 'Recovered')\nax[0].plot(countries, top_country['Deaths'], label = 'Deaths')\nax[0].set_xticklabels( countries, rotation=45);\n\nax[1].plot(countries,top_country['Confirmed'], label = 'Confirmed')\nax[1].plot(countries,top_country['Recovered'], label = 'Recovered')\nax[1].plot(countries,top_country['Deaths'], label = 'Deaths')\nax[1].set_xticklabels( countries, rotation=45);\n\nax[0].legend()\nax[1].legend()\n\nplt.tight_layout()\nplt.show()","fa4818de":"plt.figure(figsize=(5,6))\n#plt.subplot(1, 2, 1)\nfig = top_country.boxplot(column='Confirmed')\nfig.set_title('')\nfig.set_ylabel('Confirmed')","e158f6cb":"countries = top_country['Country']\n\nplt.bar(countries, top_country['Confirmed'])\nplt.xticks(countries, rotation=45, size=8)\nplt.xlabel('Country name')\nplt.ylabel('Number of Confirmed cases')\nplt.show()","88b38e52":"plt.figure(figsize=(5,6))\n#plt.subplot(1, 2, 1)\nfig = top_states.boxplot(column='Confirmed')\nfig.set_title('')\nfig.set_ylabel('Confirmed')","a8cde26d":"states = top_states['Province\/State']\n\nplt.bar(states, top_states['Confirmed'])\nplt.xticks(states, rotation='vertical')\nplt.xlabel('State name')\nplt.ylabel('Number of Confirmed cases')\nplt.show()","6b54cb91":"# 3. Understanding\/Inspecting the data","2cec4c60":"So, we have few outliers. To explore more about outlier, lets create bar graph to visualise.","f8f61fbc":"The bubble size indicated the number of Confirmed cases in that particular Country.","e7b654e0":"#### Checking for Missing Values and Fix\/Drop them\n\nFirst find the missing values in each column.","80e42890":"Now we don't have any missing values. So we can proceed with the next step.","158142df":"Group the dataset on the basis of `date`","6b1f291e":"### Question 1 : What is the \"Severity Level\" of the virus?\n\nBasically its an ratio between Confirmed cases and Deaths.","f481309c":"### Question 5 : Trendline of the Spread of the virus? Whether it is increasing or decreasing or wavy?","e42532f9":"See few records of data to get an overview of the dataset using `head()` method.","0cbdd607":"`Last Update` is of type string object. We need to convert it into datetime format to parse the date.\n\nOne way of doing so is using `to_datetime()` method.","81132bbe":"Data contains 434 rows and 7 columns","a6537ac6":"The death percentage among the Confirmed cases is only 2.3%. The severity level of Corona virus is very low.","158e5f97":"We have 19.59% missing data in Province\/State.\n\nNow we can either drop it or fix it. Since it is of String type and we can't replace the null values with any mathematical formula, so it's better to drop the rows with missing Province\/State.","eee450da":"Now, lets plot the Confirmed vs Recovered data to understand the relationship between them.","7e74873a":"Lets create the boxplot for Confirmed cases of coronavirus.","e04cb58b":"#### Using plotly.graph_objs library","f9250086":"Check the descriptive statistics of the dataset using `describe()` method.","b3f26219":"Lets visualise the data in World Map format to understand the impact of the virus and its spread.\n\nTo do so, two of the techniques we use\n1. Using `folium` library\n2. Using `plotly.graph_objs` library","3c401bea":"### Question 3 : Which top 5 states has most number of Confirmed cases in Mainland China?","8c22830e":"Check the datatype of each column in the dataset using `info()` method.","9f0c2995":"Find the percentage of the missing values so that we can take the next action appropriately.","27b8625e":"As shown in the graph, Mainland China has the highest number of Confirmed cases.","37d8f350":"# Novel Coronavirus\n- Day level information on 2019-nCoV affected cases.\n- 2019 Novel Coronavirus (2019-nCoV) is a virus (more specifically, a coronavirus) identified as the cause of an outbreak of respiratory illness first detected in Wuhan, China. Early on, many of the patients in the outbreak in Wuhan, China reportedly had some link to a large seafood and animal market, suggesting animal-to-person spread. However, a growing number of patients reportedly have not had exposure to animal markets, indicating person-to-person spread is occurring. At this time, it\u2019s unclear how easily or sustainably this virus is spreading between people - CDC\n- This dataset has daily level information on the number of affected cases, deaths and recovery from 2019 novel coronavirus.\n\nThe data is available from 22 Jan 2020.\n\n> Dataset link: https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset","66a4e335":"Check for the dimensions of the dataset using `shape` function.","d9d71237":"Lets see the Recovered vs Deaths trends during the whole month.","425841da":"### Question 2 : Which top 5 country has most number of Confirmed cases?\n\nFor this, lets Find the total Confirmed cases countrywise using `groupby()` method applied on column `Country`","74fe67dd":"# 4. Data cleaning and preparation","c4c6131c":"#### Using folium library","e2fc4fbb":"Recovered vs Deaths country wise trend.","9c4be715":"# 2. Reading\/Importing the Data\n\nRead the dataset from the csv file and print few rocords.","0a0e22b5":"`Hubei` has the highest number of Confirmed cases.\n\nLet's visualize this data for more clarity","b0036c8d":"`Mainland China` has the highest number of Confirmed cases.\n\nLet's visualize this data for more clarity.","f0bc2250":"Mainly, The virus is spread across the Mainland China and China.","724c235f":"The outlier here is Hubei.\n\nWe can explore more about the Hubei province to answer below questions:\n\n1. Why Hubei, Mainland China has the highest cases of coronavirus confirmed cases?\n2. What are the possible reasons that the corona virus is widely spread here?\n3. The virus is spreading through animal to human and human to human.\n    - Is the population density high in Hubei which is one of the reason for the spread?\n    - The animal population is high in Hubei which results in the spread?\nand many more ... ","b9508bf6":"### Question 6: Which country is performing better in saving the lives infected by coronavirus?","a583df35":"Australia has the highest recovered percentage compared to other countries.\n\nMainland China has the highest death percentage.","d7f4513f":"As shown in the graph, there is a sudden inclination after 26 Jan 2020 and it is still increasing.","69e1e64e":"### Data Dictionary\u00b6\n1. Sno: Serial number\n2. Province\/State: Province or State of observation\n3. Country: Country of observation\n4. Last Update: Date of observation\n5. Confirmed: Number of confirmed cases\n6. Deaths: Number of deaths\n7. Recovered: Number of recovered cases","3e03ddee":"### Question 4 : Spread of coronavirus across Countries and thier corresponding States?\n\nTo show this, we can use the heatmap.","7d52fb3d":"Again, we have few outliers here also. \n\nYou know what to do now. Yes, you're right!! Lets plot bar graph.","e3160b78":"We found the culprit for the outliers. And the winner is Mainland China.\n\nLets deep dive into the dataset corresponding to Mainland China.","5382ed32":"Extract information from the LastUpdated column of type datetime.","57e97caf":"### Question 7 : Explore the outliers.","6bf93bd8":"We have 3 float, 1 int and 3 object columns.","c29271dc":"First lets calculate the Recovered percentage and Death percentage country wise.","b084e993":"# 1. Import libraries\n\nImport all the neccessary libraries into the notebook which are required to explore the dataset.","6ae589e5":"As shown in the graph, Hubei has the highest number of Confirmed cases.","b2c1d074":"# Questions","58fde0bb":"Again check if there is any missing values present in the dataset."}}