{"cell_type":{"20ba6c7b":"code","e7cb3a3d":"code","f03f1b46":"code","1f2b2b1d":"code","f1ee06a6":"code","90cdf7d5":"code","11244ef2":"code","274672ae":"code","678914f1":"code","75a51f87":"code","ecf7a1fa":"code","5aa3ea11":"code","2df49fd9":"code","260f5797":"code","4eef10f9":"code","7fed3f71":"code","9364b103":"code","ace2a627":"code","d8aa61f0":"code","f2120727":"code","2ab63154":"code","3c566a8b":"code","4fc5af00":"code","3bed8eda":"code","f9c7a8fb":"code","8685f6d1":"code","3ede1469":"code","acbc92c7":"code","22e24b60":"code","c32161f5":"code","e6fb25bf":"code","df30cf08":"code","61041295":"markdown"},"source":{"20ba6c7b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport warnings\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix, roc_auc_score, classification_report\nwarnings.filterwarnings('ignore')","e7cb3a3d":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ngender_submission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\n\ndf = pd.concat([train, test], ignore_index=True)\nprint(train.shape, test.shape, df.shape)\ndf.head()","f03f1b46":"df.drop(columns=['PassengerId'], inplace=True)\ndf['Sex'] = df['Sex'].replace(['female','male'],[0,1])\ndf['Embarked'] = df['Embarked'].replace(['S','C','Q'],[0,1,2])","1f2b2b1d":"df['Title_name'] = df['Name'].str.extract(r' ([A-Za-z]+)\\.')\ndf['Title_name'] = df['Title_name'].astype(\"category\")\ndf['Codes_title_name'] = df['Title_name'].cat.codes\ndf.head()","f1ee06a6":"df.isnull().sum()","90cdf7d5":"df.drop([\"Cabin\"], axis=1, inplace=True)","11244ef2":"df[df['Fare'] <= 0]","274672ae":"df[df['Fare'].isnull()]","678914f1":"range_age = pd.cut(df['Age'], [0,10,20,40,90])\ndf.groupby(['Sex', 'Pclass', range_age]).agg({'Fare':['median', 'count']})","75a51f87":"df['Fare'].fillna(7.85420, inplace=True)","ecf7a1fa":"embarked_not_nan = df[df['Embarked'].notnull()]\nembarked_nan = df[df['Embarked'].isnull()]\nX = embarked_not_nan[['Codes_title_name','Pclass','Sex', 'SibSp', 'Parch']]\ny = embarked_not_nan.iloc[:, -3]\nrfc = RandomForestClassifier()\nparam = {'n_estimators': np.arange(600, 800, 100), 'max_depth': np.arange(35, 40, 1)}\nclf = GridSearchCV(rfc, param, cv=5)\nclf.fit(X, y)","5aa3ea11":"print(clf.best_params_, clf.best_score_)","2df49fd9":"clf.predict(embarked_nan[['Codes_title_name','Pclass','Sex', 'SibSp', 'Parch']])","260f5797":"df['Embarked'].fillna(1.0, inplace=True)\ndf.isnull().sum()","4eef10f9":"df['Age'].hist(bins=50)","7fed3f71":"range_fare = pd.cut(df[df['Age'].notnull()]['Fare'], 3)\nage_class_sex = df[df['Age'].notnull()].groupby(['Pclass', 'Sex']).agg({'Age': ['mean', 'median', 'count']}).reset_index()\nage_class_sex.columns = [\"\".join(pair) for pair in age_class_sex.columns]\nage_class_sex","9364b103":"def get_age(x):\n    m = age_class_sex[(age_class_sex[\"Pclass\"] == x[0]) \n                         & (age_class_sex[\"Sex\"] == x[1])][\"Agemedian\"].iloc[0]\n    return m\n\nage_values = df[df['Age'].isnull()][['Pclass', 'Sex']].apply(get_age, 1)\ndf['Age'].fillna(age_values, inplace=True)","ace2a627":"df[df['Age'].notnull()].groupby(['Pclass', 'Sex']).agg({'Age': ['mean', 'median', 'count']}).reset_index()","d8aa61f0":"df.isnull().sum()","f2120727":"df.drop([\"Name\", \"Ticket\", \"Title_name\"], axis=1, inplace=True)","2ab63154":"df.head()","3c566a8b":"df.head()","4fc5af00":"col = ['Age', 'Fare', 'Codes_title_name']\nscaler = StandardScaler()\ndf_scale = pd.DataFrame(scaler.fit_transform(df[col]), columns=['Age_scaler', 'Fare_scaler', 'Title_name_scaler'])\nready_df = pd.concat([df, df_scale], 1)\n","3bed8eda":"ready_df.drop(['Age', 'Fare', 'Codes_title_name'], axis=1, inplace=True)\nready_df.head()","f9c7a8fb":"X_train = ready_df.iloc[:891, 1:]\nX_test = ready_df.iloc[891:, 1:]\ny_train = ready_df.iloc[:891, 0]","8685f6d1":"lr_model = LogisticRegression()\nparam = {'C': np.linspace(0.1, 2, 15)}\nclf = GridSearchCV(lr_model, param)\nclf.fit(X_train, y_train)\nprint(clf.best_params_, clf.best_score_)","3ede1469":"sub = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\nsub.head(5)","acbc92c7":"sub['predict'] = clf.predict(X_test)","22e24b60":"sub.head()","c32161f5":"confusion_matrix(sub['Survived'], sub['predict'])","e6fb25bf":"print(classification_report(sub['Survived'], sub['predict']))","df30cf08":"final_sub = sub.drop('Survived',axis=1)\nfinal_sub.to_csv('final_sub.csv',index=False)","61041295":"### Let's try to find out Embarced value using RandomForestClassifier"}}