{"cell_type":{"7d9fdadd":"code","e18cfd1e":"code","b477a21f":"code","c8203f1d":"code","8e6ac070":"code","e6ec685a":"code","b02054ad":"code","458e4093":"code","dd9b1f6f":"code","e7bda5ea":"code","45b0ebd4":"code","a14cc0a0":"markdown","d169dca5":"markdown","7d6c8eca":"markdown","652d34f0":"markdown","b058d74a":"markdown","11916d1e":"markdown","17584acb":"markdown","5e471e62":"markdown","6a09d731":"markdown","6d7408a5":"markdown"},"source":{"7d9fdadd":"!pip install -qq -U allennlp transformers tokenizers","e18cfd1e":"import tqdm\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom tokenizers import Tokenizer\nfrom tokenizers.models import WordPiece\nfrom tokenizers.trainers import WordPieceTrainer\nfrom tokenizers.pre_tokenizers import Punctuation\nfrom tokenizers.processors import TemplateProcessing\nfrom tokenizers.decoders import WordPiece as WordPieceDecoder","b477a21f":"samples = pd.read_csv('..\/input\/bms-molecular-translation\/train_labels.csv')\nsamples.head()","c8203f1d":"tokenizer = Tokenizer(WordPiece(unk_token='[UNK]'))\ntokenizer.pre_tokenizer = Punctuation()\n\ntrainer = WordPieceTrainer(\n    vocab_size=256, \n    min_frequency=2,\n    special_tokens=['[UNK]', '[BOS]', '[EOS]', '[PAD]']\n)\ntokenizer.train_from_iterator(samples['InChI'], trainer=trainer)","8e6ac070":"tokenizer.post_processor = TemplateProcessing(\n    single=\"[BOS] $A [EOS]\",\n    special_tokens=[\n        (\"[BOS]\", tokenizer.token_to_id(\"[BOS]\")),\n        (\"[EOS]\", tokenizer.token_to_id(\"[EOS]\")),\n    ],\n)","e6ec685a":"print(' '.join(tokenizer.encode(samples.iloc[80000, 1]).tokens))\nprint(' '.join(tokenizer.encode(samples.iloc[53242, 1]).tokens))\nprint(' '.join(tokenizer.encode(samples.iloc[45212, 1]).tokens))\nprint(' '.join(tokenizer.encode(samples.iloc[782120, 1]).tokens))","b02054ad":"lengths = []\nfor inchi in tqdm.tqdm(samples['InChI']):\n    lengths.append(len(tokenizer.encode(inchi).ids))","458e4093":"print(max(lengths))","dd9b1f6f":"plt.figure(figsize=(10, 5))\nplt.hist(lengths, bins=500)\nplt.show()","e7bda5ea":"tokenizer.decoder = WordPieceDecoder()\ntokenizer.enable_padding(pad_id=tokenizer.token_to_id(\"[PAD]\"), pad_token='[PAD]', pad_to_multiple_of=8)\ntokenizer.enable_truncation(max_length=256)","45b0ebd4":"tokenizer.save('tokenizer.json')","a14cc0a0":"Great! It seems that `256` is the proper `max_seq_len`!\nLet's configure the decoding, padding and truncation settings to the tokenizer.","d169dca5":"# BMS Molecular Translation - Train InChI Tokenizer\n\n## 1. Introduction\n\nRecently, many deep learning NLP models use subword tokenization (e.g. [BPE](https:\/\/arxiv.org\/abs\/1508.07909v5), [WordPiece](https:\/\/arxiv.org\/pdf\/1609.08144v2.pdf)) rather than word-level or character-level tokenizations.\nSubword tokenization can efficiently reduce the vocabulary size to the desired scale, and ensures to learn deeper semantics than the character-level tokenization.\nDue to the reasons, subword tokenization is adopted to various tasks like translation, question-answering, reading comprehension and text generation.\n\nIn [this competition](https:\/\/www.kaggle.com\/c\/bms-molecular-translation\/code), we need to train a model which generates **InChI** text by attending from old chemical image.\nSince generating InChI sequences is identical to the NLP's one, we can consider the subword tokenization to **InChI** strings.\nIn this notebook, we are going to train the subword tokenizer for **InChI** format and check out a distribution of length of the tokenized sequences to determine the proper maximum sequence length.\n\n## 2. Train Tokenizer\n\nFirst, install [`tokenizers`](https:\/\/huggingface.co\/docs\/tokenizers\/python\/latest\/).\n`tokenizers` is a library containing today's most used tokenizers mentioned above.\nIt provides an implementation of those tokenizers and an interface for training, tokenizing, and pipelining the entire encoding procedures.","7d6c8eca":"The belows are some examples of tokenized **InChI** texts.\nAll the tokens are mapped to their indices and passed to the models.","652d34f0":"The below tokens, which do not appear to the target texts, will be added to the vocabulary.\n- `[UNK]`: Unknown token. It is used when the word cannot replaced to subword combination.\n- `[BOS]`: Begin-of-sequence token. It is added to the front of every sequences. You can feed this token to generate sequences without previous contexts.\n- `[EOS]`: End-of-sequence token. It announce that the sequence is ended and the tokens after this are meaningless.\n- `[PAD]`: Padding token. It is added to match the sequence length with each other in same batch.\n\nThe below code will train the tokenizer by constructing vocabulary with 256 subword tokens, including the above special tokens.\nFrequently appeard subword pairs will be merged and added to the vocabulary.\nIt is repeated until the vocabulary is filled.","b058d74a":"Now, let's train our **InChI** tokenizer.\nAs you can see, `train_labels.csv` contains image ids and **InChI** strings.","11916d1e":"## 3. Visualize Sequence Lengths\n\nNow we are wondering the range of sequence length.\nIt is important to restrict the maximum sequence length.\nWhich `max_seq_len` is proper?\n\nTo decide `max_seq_len`, let's visualize the distribution of `seq_len`s.\nFirst of all, configure the encoding template.\nAs I mentioned above, `[BOS]` and `[EOS]` tokens will be added before and after the sequences respectively.\nWe can pipelining this post-processing by using `TemplateProcessing` class.","17584acb":"After installing the library, load the necessary modules.","5e471e62":"That's all! We've train our own **InChI** tokenizer successfully. You can tokenize **InChI** strings to subword tokens through this tokenizer.","6a09d731":"Using the trained tokenizer and encoding template, let's tokenize all **InChI** sequences and plot the histogram of their lengths.","6d7408a5":"## 3. Save Tokenizer\n\nSo, how can we use this tokenizer? The answer is simple.\nWe're going to save this tokenizer to `tokenizer.json`.\nYou can use the trained tokenizer anytime, by simply loading the `tokenizer.json` file."}}