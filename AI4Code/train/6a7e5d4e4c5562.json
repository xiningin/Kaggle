{"cell_type":{"229d3649":"code","dae4723d":"code","b8109009":"code","be934283":"code","20554290":"code","9c463ca5":"code","727bdb9f":"code","291793b6":"code","985678ec":"code","20e157e4":"code","39d4ae32":"code","0e7f19fe":"code","df369483":"code","eccd2f46":"code","081c075a":"code","5214bde6":"code","dac76e6e":"code","6787326f":"code","e0154243":"code","d3d6b47a":"code","6c686153":"code","c11b2183":"code","b3d2c5a0":"code","5388491f":"code","a6214982":"code","8752282c":"code","1b33c605":"code","b948240e":"code","8cca6557":"code","4ba8d0fa":"code","bdce7823":"code","ff31338a":"code","6a43dbc3":"code","b4d3f05d":"code","e09de419":"code","a6730e29":"code","b86ce793":"code","46916ebd":"code","5d92f2f4":"code","e7b6dffa":"code","8391f7d6":"code","1ce2c2ad":"code","e6a66041":"code","b9010dcb":"code","bede71e4":"code","6ddeee8b":"code","79c6f598":"code","0726ee5f":"code","1a9d682e":"code","8d14b84d":"code","dfc0fde7":"code","2c31edb0":"code","eddd6e90":"code","c299a945":"code","d4b79c79":"code","7f48224d":"code","66873bca":"code","a0caaacb":"code","ccd01932":"code","3bfd0f46":"code","9fe3b22b":"code","ff78768d":"code","fd3f9d52":"code","8402b32b":"code","54f11a39":"code","0067460d":"code","40dba0bb":"code","b32e8502":"code","8996b91f":"code","77952448":"markdown","8f79419b":"markdown","54032b1d":"markdown","dde3be6d":"markdown","7ff70e2b":"markdown","422421d1":"markdown","30bf36c5":"markdown","2906208e":"markdown","6b9290f7":"markdown","9e95ce28":"markdown","00ee147f":"markdown","2efcc05d":"markdown","79f92e73":"markdown","6d977b9e":"markdown","51a3c306":"markdown","c0a5c764":"markdown","7d65fd08":"markdown","94b718fd":"markdown","46708083":"markdown","511b5c7f":"markdown","05a0a120":"markdown","00863bc5":"markdown","45451e41":"markdown","43bafc8f":"markdown","fd45e245":"markdown","2499cfca":"markdown","26b2180a":"markdown","29da09aa":"markdown","7b9e7bce":"markdown","ab9b387e":"markdown","ed7c6b4b":"markdown","7d781b70":"markdown","d142d7da":"markdown","e8fba02a":"markdown","cdcb8a20":"markdown","d02960e8":"markdown","3df0d761":"markdown","0b0ce651":"markdown","92d07c95":"markdown","c934d37b":"markdown","3e226af5":"markdown","78e48446":"markdown","858fd99b":"markdown","e1aa5f7e":"markdown","b8e66ac8":"markdown","70edce29":"markdown","5ce03366":"markdown","8d81ad6c":"markdown","0047ec78":"markdown","f3e74037":"markdown","7b4f5d28":"markdown","e5f7e3b2":"markdown","ceda1633":"markdown","2fca7be4":"markdown","b0c5e6a7":"markdown","5b568a53":"markdown"},"source":{"229d3649":"import numpy as np \nimport pandas as pd\nimport os\n\nimport plotly.plotly as py\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=False)\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\n\nprint(os.listdir(\"..\/input\"))","dae4723d":"deliveries = pd.read_csv('..\/input\/deliveries.csv')\nmatches = pd.read_csv('..\/input\/matches.csv')","b8109009":"#Since umpire3 contains all null values we can omit the column\nmatches.drop('umpire3',axis = 1, inplace=True)","be934283":"x=['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions',\n    'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n    'Kolkata Knight Riders', 'Delhi Daredevils', 'Kings XI Punjab',\n    'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n    'Kochi Tuskers Kerala', 'Pune Warriors', 'Rising Pune Supergiants', 'Delhi Capitals']\n\ny = ['SRH','MI','GL','RPS','RCB','KKR','DC','KXIP','CSK','RR','SRH','KTK','PW','RPS','DC']\n\nmatches.replace(x,y,inplace = True)\ndeliveries.replace(x,y,inplace = True)","20554290":"matches['season'].value_counts().head(3)","9c463ca5":"data = [go.Histogram(x=matches['season'], marker=dict(color='#EB89B5'),opacity=0.75)]\nlayout = go.Layout(title='Matches In Every Season ',xaxis=dict(title='Season',tickmode='linear'),\n                    yaxis=dict(title='Count'),bargap=0.2)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","727bdb9f":"matches_played=pd.concat([matches['team1'],matches['team2']])\nmatches_played=matches_played.value_counts().reset_index()\nmatches_played.columns=['Team','Total Matches']\nmatches_played['wins']=matches['winner'].value_counts().reset_index()['winner']\n\nmatches_played.set_index('Team',inplace=True)","291793b6":"matches_played.reset_index().head(8)","985678ec":"win_percentage = round(matches_played['wins']\/matches_played['Total Matches'],3)*100\nwin_percentage.head(3)","20e157e4":"trace1 = go.Bar(x=matches_played.index,y=matches_played['Total Matches'],\n                name='Total Matches',opacity=0.4)\n\ntrace2 = go.Bar(x=matches_played.index,y=matches_played['wins'],\n                name='Matches Won',marker=dict(color='red'),opacity=0.4)\n\ntrace3 = go.Bar(x=matches_played.index,\n               y=(round(matches_played['wins']\/matches_played['Total Matches'],3)*100),\n               name='Win Percentage',opacity=0.6,marker=dict(color='gold'))\n\ndata = [trace1, trace2, trace3]\n\nlayout = go.Layout(title='Match Played, Wins And Win Percentage',xaxis=dict(title='Team'),\n                   yaxis=dict(title='Count'),bargap=0.2,bargroupgap=0.1)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","39d4ae32":"venue_matches=matches.groupby('venue').count()[['id']].sort_values(by='id',ascending=False).head()\nser = pd.Series(venue_matches['id']) \nser","0e7f19fe":"venue_matches=matches.groupby('venue').count()[['id']].reset_index()\n\ndata = [{\"x\": venue_matches['id'],\"y\": venue_matches['venue'], \n          \"marker\": {\"color\": \"lightblue\", \"size\": 12},\n         \"line\": {\"color\": \"red\",\"width\" : 2,\"dash\" : 'dash'},\n          \"mode\": \"markers+lines\", \"name\": \"Women\", \"type\": \"scatter\"}]\n\nlayout = {\"title\": \"Stadiums and Matches\", \n          \"xaxis\": {\"title\": \"Matches Played\", }, \n          \"yaxis\": {\"title\": \"Stadiums\"},\n          \"autosize\":False,\"width\":900,\"height\":1000,\n          \"margin\": go.layout.Margin(l=340, r=0,b=100,t=100,pad=0)}\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","df369483":"ump=pd.concat([matches['umpire1'],matches['umpire2']])\nump=ump.value_counts()\numps=ump.to_frame().reset_index()","eccd2f46":"ump.head()","081c075a":"data = [go.Bar(x=umps['index'],y=umps[0],opacity=0.4)]\n\nlayout = go.Layout(title='Umpires in Matches',\n                   yaxis=dict(title='Matches'),bargap=0.2)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5214bde6":"batsmen = matches[['id','season']].merge(deliveries, left_on = 'id', right_on = 'match_id', how = 'left').drop('id', axis = 1)\nseason=batsmen.groupby(['season'])['total_runs'].sum().reset_index()\n\navgruns_each_season=matches.groupby(['season']).count().id.reset_index()\navgruns_each_season.rename(columns={'id':'matches'},inplace=1)\navgruns_each_season['total_runs']=season['total_runs']\navgruns_each_season['average_runs_per_match']=avgruns_each_season['total_runs']\/avgruns_each_season['matches']","dac76e6e":"fig = {\"data\" : [{\"x\" : season[\"season\"],\"y\" : season[\"total_runs\"],\n                  \"name\" : \"Total Run\",\"marker\" : {\"color\" : \"lightblue\",\"size\": 12},\n                  \"line\": {\"width\" : 3},\"type\" : \"scatter\",\"mode\" : \"lines+markers\" },\n        \n                 {\"x\" : season[\"season\"],\"y\" : avgruns_each_season[\"average_runs_per_match\"],\n                  \"name\" : \"Average Run\",\"marker\" : {\"color\" : \"brown\",\"size\": 12},\n                  \"type\" : \"scatter\",\"line\": {\"width\" : 3},\"mode\" : \"lines+markers\",\n                  \"xaxis\" : \"x2\",\"yaxis\" : \"y2\",}],\n       \n        \"layout\" : {\"title\": \"Total and Average run per Season\",\n                    \"xaxis2\" : {\"domain\" : [0, 1],\"anchor\" : \"y2\",\n                    \"showticklabels\" : False},\"margin\" : {\"b\" : 111},\n                    \"yaxis2\" : {\"domain\" : [.55, 1],\"anchor\" : \"x2\",\"title\": \"Average Run\"},                    \n                    \"xaxis\" : {\"domain\" : [0, 1],\"tickmode\":'linear',\"title\": \"Year\"},\n                    \"yaxis\" : {\"domain\" :[0, .45], \"title\": \"Total Run\"}}}\n\niplot(fig)","6787326f":"avgruns_each_season.sort_values(by='total_runs', ascending=False).head(2)","e0154243":"Season_boundaries=batsmen.groupby(\"season\")[\"batsman_runs\"].agg(lambda x: (x==6).sum()).reset_index()\nfours=batsmen.groupby(\"season\")[\"batsman_runs\"].agg(lambda x: (x==4).sum()).reset_index()\nSeason_boundaries=Season_boundaries.merge(fours,left_on='season',right_on='season',how='left')\nSeason_boundaries=Season_boundaries.rename(columns={'batsman_runs_x':'6\"s','batsman_runs_y':'4\"s'})","d3d6b47a":"Season_boundaries['6\"s'] = Season_boundaries['6\"s']*6\nSeason_boundaries['4\"s'] = Season_boundaries['4\"s']*4\nSeason_boundaries['total_runs'] = season['total_runs']","6c686153":"trace1 = go.Bar(\n    x=Season_boundaries['season'],\n    y=Season_boundaries['total_runs']-(Season_boundaries['6\"s']+Season_boundaries['4\"s']),\n    name='Remaining runs',opacity=0.6)\n\ntrace2 = go.Bar(\n    x=Season_boundaries['season'],\n    y=Season_boundaries['4\"s'],\n    name='Run by 4\"s',opacity=0.7)\n\ntrace3 = go.Bar(\n    x=Season_boundaries['season'],\n    y=Season_boundaries['6\"s'],\n    name='Run by 6\"s',opacity=0.7)\n\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(title=\"Run Distribution per year\",barmode='stack',xaxis = dict(tickmode='linear',title=\"Year\"),\n                                    yaxis = dict(title= \"Run Distribution\"))\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","c11b2183":"high_scores=deliveries.groupby(['match_id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index() \nhigh_scores=high_scores[high_scores['total_runs']>=200]\nhigh_scores.nlargest(10,'total_runs')","b3d2c5a0":"high_scores=high_scores[high_scores.batting_team != 'GL']\nhigh_scores=high_scores[high_scores.bowling_team != 'RPS']\nhigh_scores=high_scores[high_scores.bowling_team != 'GL']\nhigh_scores=high_scores[high_scores.bowling_team != 'PW']","5388491f":"high_scores=high_scores.groupby(['inning','batting_team']).count().reset_index()\nhigh_scores.drop([\"bowling_team\",\"total_runs\"],axis=1,inplace=True)\nhigh_scores.rename(columns={\"match_id\":\"total_times\"},inplace=True)\n\nhigh_scores_1 = high_scores[high_scores['inning']==1]\nhigh_scores_2 = high_scores[high_scores['inning']==2]","a6214982":"high_scores_1.sort_values(by = 'total_times',ascending=False).head(2)","8752282c":"trace1 = go.Bar(x=high_scores_1['batting_team'],y=high_scores_1['total_times'],name='Ist Innings')\ntrace2 = go.Bar(x=high_scores_2['batting_team'],y=high_scores_2['total_times'],name='IInd Innings')\n\nfig = tools.make_subplots(rows=1, cols=2, subplot_titles=('At Ist Innings','At IInd Innings'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\niplot(fig)","1b33c605":"high_scores=deliveries.groupby(['match_id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index()\nhigh_scores1=high_scores[high_scores['inning']==1]\nhigh_scores2=high_scores[high_scores['inning']==2]\nhigh_scores1=high_scores1.merge(high_scores2[['match_id','inning', 'total_runs']], on='match_id')\nhigh_scores1.rename(columns={'inning_x':'inning_1','inning_y':'inning_2','total_runs_x':'inning1_runs','total_runs_y':'inning2_runs'},inplace=True)\nhigh_scores1=high_scores1[high_scores1['inning1_runs']>=200]\nhigh_scores1['is_score_chased']=1\nhigh_scores1['is_score_chased'] = np.where(high_scores1['inning1_runs']<=high_scores1['inning2_runs'], 'yes', 'no')","b948240e":"slices=high_scores1['is_score_chased'].value_counts().reset_index().is_score_chased\nlist(slices)\nlabels=['No','Yes']\nslices","8cca6557":"trace0 = go.Pie(labels=labels, values=slices,\n              hoverinfo='label+value')\n\nlayout=go.Layout(title='200 score chased ?')\nfig = go.Figure(data=[trace0], layout=layout)\niplot(fig)","4ba8d0fa":"agg = matches[['id','season', 'winner', 'toss_winner', 'toss_decision', 'team1']].merge(deliveries, left_on = 'id', right_on = 'match_id', how = 'left').drop('id', axis = 1)\nbatsman_grp = agg.groupby([\"season\",\"match_id\", \"inning\", \"batting_team\", \"batsman\"])\nbatsmen = batsman_grp[\"batsman_runs\"].sum().reset_index()\nruns_scored = batsmen.groupby(['season','batting_team', 'batsman'])['batsman_runs'].agg(['sum','mean']).reset_index()\nruns_scored['mean']=round(runs_scored['mean'])","bdce7823":"agg_battingteam = agg.groupby(['season','match_id', 'inning', 'batting_team', 'bowling_team','winner'])['total_runs'].sum().reset_index()\nwinner = agg_battingteam[agg_battingteam['batting_team'] == agg_battingteam['winner']]#agg_batting = agg_battingteam.groupby(['season', 'inning', 'team1','winner'])['total_runs'].sum().reset_index()\nwinner_batting_first = winner[winner['inning'] == 1]\nwinner_batting_second = winner[winner['inning'] == 2]\n\nwinner_runs_batting_first = winner_batting_first.groupby(['season', 'winner'])['total_runs'].mean().reset_index().round()\nwinner_runs_batting_second = winner_batting_second.groupby(['season', 'winner'])['total_runs'].mean().reset_index().round()\n\nwinner_runs = winner_runs_batting_first.merge(winner_runs_batting_second, on = ['season','winner'])\nwinner_runs.columns = ['season', 'winner', 'batting_first', 'batting_second']","ff31338a":"total_win=matches.groupby(['season','winner']).count()[['id']].reset_index()\nwinner_runs[\"wins\"]= total_win['id']","6a43dbc3":"winner_runs.sort_values(by = ['season'],inplace=True)\n\ncsk= winner_runs[winner_runs['winner'] == 'CSK']\nrr= winner_runs[winner_runs['winner'] == 'RR']\nsrh= winner_runs[winner_runs['winner'] == 'SRH']\nkkr= winner_runs[winner_runs['winner'] == 'KKR']\nmi= winner_runs[winner_runs['winner'] == 'MI']\nrcb= winner_runs[winner_runs['winner'] == 'RCB']\nkxip= winner_runs[winner_runs['winner'] == 'KXIP']\ndd= winner_runs[winner_runs['winner'] == 'DC']","b4d3f05d":"trace1 = go.Scatter(x=csk['season'],y = csk['batting_first'],name='Batting First')\ntrace2 = go.Scatter(x=csk['season'],y = csk['batting_second'],name='Batting Second')\ntrace3 = go.Scatter(x=rr['season'],y = rr['batting_first'],name='Batting First')\ntrace4 = go.Scatter(x=rr['season'],y = rr['batting_second'],name='Batting Second')\ntrace5 = go.Scatter(x=srh['season'],y = srh['batting_first'],name='Batting First')\ntrace6 = go.Scatter(x=srh['season'],y = srh['batting_second'],name='Batting Second')\ntrace7 = go.Scatter(x=kkr['season'],y = kkr['batting_first'],name='Batting First')\ntrace8 = go.Scatter(x=kkr['season'],y = kkr['batting_second'],name='Batting Second')\ntrace9 = go.Scatter(x=rcb['season'],y = rcb['batting_first'],name='Batting First')\ntrace10 = go.Scatter(x=rcb['season'],y = rcb['batting_second'],name='Batting Second')\ntrace11 = go.Scatter(x=kxip['season'],y = kxip['batting_first'],name='Batting First')\ntrace12 = go.Scatter(x=kxip['season'],y = kxip['batting_second'],name='Batting Second')\ntrace13 = go.Scatter(x=mi['season'],y = mi['batting_first'],name='Batting First')\ntrace14 = go.Scatter(x=mi['season'],y = mi['batting_second'],name='Batting Second')\ntrace15 = go.Scatter(x=dd['season'],y = dd['batting_first'],name='Batting First')\ntrace16 = go.Scatter(x=dd['season'],y = dd['batting_second'],name='Batting Second')\n\nfig = tools.make_subplots(rows=4, cols=2, subplot_titles=('CSK', 'RR','SRH', 'KKR','RCB', 'KXIP','MI', 'DC'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 1)\nfig.append_trace(trace3, 1, 2)\nfig.append_trace(trace4, 1, 2)\nfig.append_trace(trace5, 2, 1)\nfig.append_trace(trace6, 2, 1)\nfig.append_trace(trace7, 2, 2)\nfig.append_trace(trace8, 2, 2)\nfig.append_trace(trace9, 3, 1)\nfig.append_trace(trace10, 3, 1)\nfig.append_trace(trace11, 3, 2)\nfig.append_trace(trace12, 3, 2)\nfig.append_trace(trace13, 4, 1)\nfig.append_trace(trace14, 4, 1)\nfig.append_trace(trace15, 4, 2)\nfig.append_trace(trace16, 4, 2)\n\nfig['layout'].update(title='Batting first vs Batting Second of Teams',showlegend=False)\niplot(fig)","e09de419":"runs_per_over = deliveries.pivot_table(index=['over'],columns='batting_team',values='total_runs',aggfunc=sum)\nruns_per_over.reset_index(inplace=True)\nruns_per_over.drop(['KTK','PW','RPS','GL'],axis=1,inplace=True)","a6730e29":"trace1 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['CSK'],name='CSK',marker= dict(color= \"blue\",size=12))\ntrace2 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['DC'],name='DC')\ntrace3 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['KKR'],name='KKR')\ntrace4 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['KXIP'],name='KXIP')\ntrace5 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['MI'],name='MI')\ntrace6 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['RCB'],name='RCB')\ntrace7 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['RR'],name='RR')\ntrace8 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['SRH'],name='SRH')\n\ndata = [trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8]\n\nlayout = go.Layout(title='Average Run in Each Over',xaxis = dict(tickmode='linear',title=\"Over\"),\n                                    yaxis = dict(title= \"Runs\"))\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","b86ce793":"season=matches[['id','season','winner']]\ncomplete_data=deliveries.merge(season,how='inner',left_on='match_id',right_on='id')","46916ebd":"powerplay_data=complete_data[complete_data['over']<=6]\n\ninn1 = powerplay_data[ powerplay_data['inning']==1].groupby('match_id')['total_runs'].agg(['sum']).reset_index()\ninn2 = powerplay_data[ powerplay_data['inning']==2].groupby('match_id')['total_runs'].agg(['sum']).reset_index()","5d92f2f4":"inn1.reset_index(inplace=True)\ninn1.drop([\"match_id\"],axis=1,inplace=True)\n\ninn2.reset_index(inplace=True)\ninn2.drop([\"match_id\"],axis=1,inplace=True)","e7b6dffa":"fig = {\"data\" : [{\"x\" : inn1[\"index\"],\"y\" : inn1[\"sum\"],\"marker\" : {\"color\" : \"blue\",\"size\": 2},\n                  \"line\": {\"width\" : 1.5},\"type\" : \"scatter\",\"mode\" : \"lines\" },\n        \n                 {\"x\" : inn2[\"index\"],\"y\" : inn2[\"sum\"],\"marker\" : {\"color\" : \"brown\",\"size\": 2},\n                  \"type\" : \"scatter\",\"line\": {\"width\" : 1.5},\"mode\" : \"lines\",\n                  \"xaxis\" : \"x2\",\"yaxis\" : \"y2\",}],\n       \n        \"layout\" : {\"title\": \"Inning 1 vs Inning 2 in Powerplay Overs\",\n                    \"xaxis2\" : {\"domain\" : [0, 1],\"anchor\" : \"y2\",\n                    \"showticklabels\" : False},\n                    \"yaxis2\" : {\"domain\" : [.55, 1],\"anchor\" : \"x2\",\"title\": \"Inn2 Powerplay\"},\n                    \"margin\" : {\"b\" : 111},\n                    \"xaxis\" : {\"domain\" : [0, 1],\"title\": \"Matches\"},\n                    \"yaxis\" : {\"domain\" :[0, .45], \"title\": \"Inn1 Poweplay\"}}}\n\niplot(fig)","8391f7d6":"pi1=powerplay_data[ powerplay_data['inning']==1].groupby(['season','match_id'])['total_runs'].agg(['sum'])\npi1=pi1.reset_index().groupby('season')['sum'].mean()\npi1=pi1.to_frame().reset_index()\n\npi2=powerplay_data[ powerplay_data['inning']==2].groupby(['season','match_id'])['total_runs'].agg(['sum'])\npi2=pi2.reset_index().groupby('season')['sum'].mean()\npi2=pi2.to_frame().reset_index()","1ce2c2ad":"trace1 = go.Bar(x=pi1.season,y=pi1[\"sum\"],\n                name='Inning 1',opacity=0.4)\n\ntrace2 = go.Bar(x=pi2.season,y=pi2[\"sum\"],name='Inning 2',\n                marker=dict(color='red'),opacity=0.4)\n\ndata = [trace1, trace2]\nlayout = go.Layout(title='Powerplay Average runs per Year',\n                   xaxis=dict(title='Year',tickmode='linear'),\n                   yaxis=dict(title='Run'),bargap=0.2,bargroupgap=0.1)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e6a66041":"powerplay_dismissals=powerplay_data.dropna(subset=['dismissal_kind']).groupby(['season','match_id','inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].max()\npowerplay_dismissals=powerplay_dismissals.reset_index()\n\npowerplay_dismissals_first=powerplay_data[ powerplay_data['inning']==1].dropna(subset=['dismissal_kind']).groupby(['season','match_id','inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].mean()\npowerplay_dismissals_first=powerplay_dismissals_first.reset_index()\n\npowerplay_dismissals_second=powerplay_data[ powerplay_data['inning']==2].dropna(subset=['dismissal_kind']).groupby(['season','match_id','inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].mean()\npowerplay_dismissals_second=powerplay_dismissals_second.reset_index()","b9010dcb":"trace1 = go.Bar(x=powerplay_dismissals.season,y=powerplay_dismissals[\"count\"],\n                name='Max',opacity=0.4)\n\ntrace2 = go.Bar(x=powerplay_dismissals_first.season,y=powerplay_dismissals_first[\"count\"],name='Inning 1',\n                marker=dict(color='red'),opacity=0.4)\n\ntrace3 = go.Bar(x=powerplay_dismissals_second.season,y=powerplay_dismissals_second[\"count\"],name='Inning 2',\n                marker=dict(color='lime'),opacity=0.4)\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(title='Powerplay Average Dismissals per Year',\n                   xaxis=dict(title='Year',tickmode='linear'),\n                   yaxis=dict(title='Run'),bargap=0.2,bargroupgap=0.1)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","bede71e4":"df_strike_rate = deliveries.groupby(['batsman']).agg({'ball':'count','batsman_runs':'mean'}).sort_values(by='batsman_runs',ascending=False)\ndf_strike_rate.rename(columns ={'batsman_runs' : 'strike rate'}, inplace=True)\ndf_runs_per_match = deliveries.groupby(['batsman','match_id']).agg({'batsman_runs':'sum'})\ndf_total_runs = df_runs_per_match.groupby(['batsman']).agg({'sum' ,'mean','count'})\ndf_total_runs.rename(columns ={'sum' : 'batsman run','count' : 'match count','mean' :'average score'}, inplace=True)\ndf_total_runs.columns = df_total_runs.columns.droplevel()\ndf_sixes = deliveries[['batsman','batsman_runs']][deliveries.batsman_runs==6].groupby(['batsman']).agg({'batsman_runs':'count'})\ndf_four = deliveries[['batsman','batsman_runs']][deliveries.batsman_runs==4].groupby(['batsman']).agg({'batsman_runs':'count'})\ndf_batsman_stat = pd.merge(pd.merge(pd.merge(df_strike_rate,df_total_runs, left_index=True, right_index=True),\n                                    df_sixes, left_index=True, right_index=True),df_four, left_index=True, right_index=True)","6ddeee8b":"df_batsman_stat.rename(columns = {'ball' : 'ball', 'strike rate':'strike_rate','batsman run' : 'batsman_run',\n                                  'match count' : 'match_count','average score' : 'average_score' ,'batsman_runs_x' :'six',\n                                  'batsman_runs_y':'four'},inplace=True)\ndf_batsman_stat['strike_rate'] = df_batsman_stat['strike_rate']*100\ndf_batsman_stat.sort_values(by='batsman_run',ascending=False,inplace=True)\n#df_batsman_stat.sort_values(by='batsman_run',ascending=False)\ndf_batsman_stat.reset_index(inplace=True)","79c6f598":"average_score=df_batsman_stat.sort_values(by='average_score',ascending=False)\naverage_score=average_score[average_score['match_count']>50].head(10)\n\nstrike_rate=df_batsman_stat.sort_values(by='strike_rate',ascending=False)\nstrike_rate=strike_rate[strike_rate['match_count']>50].head(10)","0726ee5f":"trace1 = go.Bar(x=average_score['batsman'],y=average_score['average_score'],\n                name='Average Score',marker=dict(color='gold'),opacity=0.6,showlegend=False)\n\ntrace2 = go.Bar(x=strike_rate['batsman'],y=strike_rate['strike_rate'],\n                name='Strike Rate',marker=dict(color='brown'),opacity=0.6,showlegend=False)\n\nfig = tools.make_subplots(rows=1, cols=2, subplot_titles=('Highest Average Score','Highest Strike Rate'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\nfig['layout']['xaxis1'].update(title='Player')\nfig['layout']['xaxis2'].update(title='Player')\n\niplot(fig)","1a9d682e":"top_df_batsman=df_batsman_stat.head(20)\ntop_df_batsman.head(5)","8d14b84d":"data=[{\"y\": top_df_batsman.match_count,\n        \"x\": top_df_batsman.batsman,\n        \"mode\":\"markers\",\n        \"marker\":{\"color\":top_df_batsman.six,\"size\" :top_df_batsman.average_score,'showscale': True},\n        \"text\":top_df_batsman.batsman }]\n\niplot(data)","dfc0fde7":"toppers=deliveries.groupby(['batsman','batsman_runs'])['total_runs'].count().reset_index()\ntoppers=toppers.pivot('batsman','batsman_runs','total_runs')\ntoppers.reset_index(inplace=True)","2c31edb0":"top_6 = toppers.sort_values(6,ascending=False).head(10)\ntop_4 = toppers.sort_values(4,ascending=False).head(10)\ntop_2 = toppers.sort_values(2,ascending=False).head(10)\ntop_1 = toppers.sort_values(1,ascending=False).head(10)","eddd6e90":"trace1 = go.Scatter(x=top_6.batsman,y =top_6[6],name='6\"s',marker =dict(color= \"blue\",size = 9),line=dict(width=2,dash='dash'))\ntrace2 = go.Scatter(x=top_4.batsman,y = top_4[4],name='4\"s',marker =dict(color= \"orange\",size = 9),line=dict(width=2,dash='longdash'))\ntrace3 = go.Scatter(x=top_2.batsman,y = top_2[2],name='2\"s',marker =dict(color= \"green\",size = 9),line=dict(width=2,dash='dashdot'))\ntrace4 = go.Scatter(x=top_1.batsman,y = top_1[1],name='1\"s',marker =dict(color= \"red\",size = 9),line=dict(width=2,dash='longdashdot'))\n\nfig = tools.make_subplots(rows=4, cols=1, subplot_titles=('Top 6\"s Scorer','Top 4\"s Scorer',\n                                                          'Top 2\"s Scorer','Top 1\"s Scorer'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 3, 1)\nfig.append_trace(trace4, 4, 1)\n\nfig['layout'].update(title='Top Scorer in each Category',showlegend=False)\niplot(fig)","c299a945":"orange=matches[['id','season']]\norange=orange.merge(deliveries,left_on='id',right_on='match_id',how='left')\norange=orange.groupby(['season','batsman'])['batsman_runs'].sum().reset_index()\norange=orange.sort_values('batsman_runs',ascending=0)\norange=orange.drop_duplicates(subset=[\"season\"],keep=\"first\")\n#orange.sort_values(by='season')","d4b79c79":"data = [go.Bar(x=orange['season'].values,y=orange['batsman_runs'].values,\n                name='Total Matches',text=orange['batsman'].values,\n                marker=dict(color='rgb(255,140,0)',\n                            line=dict(color='rgb(8,48,107)',width=1.5,)),opacity=0.7)]\n\nlayout = go.Layout(title='Orange-Cap Holders',xaxis = dict(tickmode='linear',title=\"Year\"),\n                   yaxis=dict(title='Runs'))\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","7f48224d":"bowlers=deliveries.groupby('bowler').sum().reset_index()\nbowl=deliveries['bowler'].value_counts().reset_index()\nbowlers=bowlers.merge(bowl,left_on='bowler',right_on='index',how='left')\nbowlers=bowlers[['bowler_x','total_runs','bowler_y']]\nbowlers.rename({'bowler_x':'bowler','total_runs':'runs_given','bowler_y':'balls'},axis=1,inplace=True)\nbowlers['overs']=(bowlers['balls']\/\/6)","66873bca":"dismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  \nct=deliveries[deliveries[\"dismissal_kind\"].isin(dismissal_kinds)]\nct=ct['bowler'].value_counts().reset_index()\nbowlers=bowlers.merge(ct,left_on='bowler',right_on='index',how='left').dropna()\nbowlers=bowlers[['bowler_x','runs_given','overs','bowler_y']]\nbowlers.rename({'bowler_x':'bowler','bowler_y':'wickets'},axis=1,inplace=True)\nbowlers['economy']=(bowlers['runs_given']\/bowlers['overs'])","a0caaacb":"bowlers_top=bowlers.sort_values(by='runs_given',ascending=False)\nbowlers_top=bowlers_top.head(20)","ccd01932":"trace = go.Scatter(y = bowlers_top['wickets'],x = bowlers_top['bowler'],mode='markers',\n                   marker=dict(size= bowlers_top['wickets'].values,\n                               color = bowlers_top['economy'].values,\n                               colorscale='Viridis',\n                               showscale=True,\n                               colorbar = dict(title = 'Economy')),\n                   text = bowlers['overs'].values)\n\ndata = [(trace)]\n\nlayout= go.Layout(autosize= True,\n                  title= 'Top 20 Wicket Taking Bowlers',\n                  hovermode= 'closest',\n                  xaxis=dict(showgrid=False,zeroline=False,\n                             showline=False),\n                  yaxis=dict(title= 'Wickets Taken',ticklen= 5,\n                             gridwidth= 2,showgrid=False,\n                             zeroline=False,showline=False),\n                  showlegend= False)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","3bfd0f46":"dismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  #since run-out is not creditted to the bowler\npurple=deliveries[deliveries[\"dismissal_kind\"].isin(dismissal_kinds)]\npurple=purple.merge(matches,left_on='match_id',right_on='id',how='outer')\npurple=purple.groupby(['season','bowler'])['dismissal_kind'].count().reset_index()\npurple=purple.sort_values('dismissal_kind',ascending=False)\npurple=purple.drop_duplicates('season',keep='first').sort_values(by='season')\npurple.rename({'dismissal_kind':'count_wickets'},axis=1,inplace=True)","9fe3b22b":"trace1 = go.Bar(x=purple['season'].values,y=purple['count_wickets'].values,\n                name='Total Matches',text=purple['bowler'].values,\n                marker=dict(color='rgb(75,0,130)',\n                            line=dict(color='rgb(108,148,107)',width=1.5,)),\n                opacity=0.7)\n\nlayout = go.Layout(title='Purple-Cap Holders',xaxis = dict(tickmode='linear',title=\"Year\"),\n                   yaxis=dict(title='Wickets'))\n\ndata=[trace1]\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","ff78768d":"season_winner=matches.drop_duplicates(subset=['season'], keep='last')[['season','winner']].reset_index(drop=True)\nseason_winner = season_winner['winner'].value_counts()\n\nseason_winner = season_winner.to_frame()\nseason_winner.reset_index(inplace=True)\nseason_winner.rename(columns={'index':'team'},inplace=True)","fd3f9d52":"season_winner","8402b32b":"trace0 = go.Pie(labels=season_winner['team'], values=season_winner['winner'],\n              hoverinfo='label+value+name',name=\"Winner\")\n\nlayout=go.Layout(title='Winner of IPL season')\nfig = go.Figure(data=[trace0], layout=layout)\niplot(fig)","54f11a39":"finals=matches.drop_duplicates(subset=['season'],keep='last')\nfinals=finals[['id','season','city','team1','team2','toss_winner','toss_decision','winner']]\nmost_finals=pd.concat([finals['team1'],finals['team2']]).value_counts().reset_index()\nmost_finals.rename({'index':'team',0:'count'},axis=1,inplace=True)\nxyz=finals['winner'].value_counts().reset_index()","0067460d":"most_finals=most_finals.merge(xyz,left_on='team',right_on='index',how='outer')\nmost_finals=most_finals.replace(np.NaN,0)\nmost_finals.drop('index',axis=1,inplace=True)\nmost_finals.set_index('team',inplace=True)\nmost_finals.rename({'count':'finals_played','winner':'won_count'},inplace=True,axis=1)\nmost_finals.reset_index(inplace=True)","40dba0bb":"trace1 = go.Bar(x=most_finals.team,y=most_finals.finals_played,\n                name='Total Matches',opacity=0.4)\n\ntrace2 = go.Bar(x=most_finals.team,y=most_finals.won_count,\n                name='Matches Won',marker=dict(color='red'),opacity=0.4)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(title='Match Played vs Wins In Finals',xaxis=dict(title='Team'),\n                   yaxis=dict(title='Count'),bargap=0.2,bargroupgap=0.1)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","b32e8502":"df=finals[finals['toss_winner']==finals['winner']]\nslices=[len(df),(len(finals)-len(df))]\nlabels=['yes','no']","8996b91f":"trace0 = go.Pie(labels=labels, values=slices,\n              hoverinfo='label+value+name',name=\"Winner\")\n\nlayout=go.Layout(title='Winner of IPL season')\nfig = go.Figure(data=[trace0], layout=layout)\niplot(fig)","77952448":"## Loading Libraries","8f79419b":"In December 2018, the team changed its name from the Delhi Daredevils to the Delhi Capitals<br>\nSunrisers Hyderabad replaced the Deccan Chargers in 2012 and debuted in 2013 (But i consider them same in this kernel) ","54032b1d":"So there is increase in runs in powerplay in last few years","dde3be6d":"<ul><li> RCB followed by CSK are at top in creating targets of score greater than 200\n    <li> KXIP and CSK is at top in IInd innings while chasing target","7ff70e2b":"## 5. PowerPlay Analysis\nPowerplay is of starting 6 overs in t20 matches<br>\nDuring the first six overs, a maximum of two fielders can be outside the 30-yard circle.","422421d1":"No doubt **Warner, Gayle and Pant** are best in terms of both strike rate and average run rate","30bf36c5":"### 8.1 Which team win highest no. of seasons","2906208e":"### 6.3 Top 10 Batsman in each run category","6b9290f7":"## Loading Dataset","9e95ce28":"If you like the notebook, Please Upvote as it will keep me motivated in doing great things ahead. Thanks!!<p>\nI have used the only **Plotly** in visualisations<br>\nSo all maps\/charts are **INTERACTIVE**\n    \n#### Please check part 2 : [IPL Analysis Part 2 (Fantasy League Edition)](https:\/\/www.kaggle.com\/dude431\/ipl-analysis-part-2-fantasy-league-edition)","00ee147f":"Voila !! Each 3 among 4 toss winners is match winner in Finals. That's Incredible","2efcc05d":"### 8.3 Is Toss Decision is Final Decision in Finals ?","79f92e73":"<ul><li> Hightest wicket taker is Malinga\n    <li> Piyush Chawla give highest runs among all","6d977b9e":"<ul><li>So Eden Gardens, M Chinnaswamy, Wankhede and Feroz Shah Kotla are statiums with most matches\n    <li>Since Moslty eliminators, qualifiers and final of each season was here","51a3c306":"### 5.2 Powerplay Average Runs ","c0a5c764":"### 2.1 How many times each Team scored > 200","7d65fd08":"Just slight increase in runs by boundaries over years","94b718fd":"<ul><li> We see crest at 2012,2013 years (this is beacuse increase in no. of matches)\n    <li>Average runs per match increase over years","46708083":"<ul><li> MI win 4 seasons of IPL\n    <li> DC, KXIP, RCB don't get any title yet","511b5c7f":"### 1.2 Run Distribution Over Years","05a0a120":"<ul><li> Every team able to create a better than in first innings than second\n    <li> Exception - KXIP ( Showing anamolous behavior :p)","00863bc5":"### 8.2 Match Played vs wins in Final Match of Every Season","45451e41":"### 1.1 Average and Total Runs","43bafc8f":"## 6. Batsman Data","fd45e245":"## 1. Runs per Season","2499cfca":"The year 2013 has most number of matches.<br> \nMay be due to **super over** (super over occurs when there is a tie in the score)\n\n<p> Moreover there are 10 teams in 2011, 9 in 2012 and 2013 ","26b2180a":"## 3. Average Score of  Each Team Per Season  ","29da09aa":"Mumbai indians have most number of wins with most number of matches<br>\nLets analyze Win Ratio of teams","7b9e7bce":"### 6.1 Highest Average and Strike rate for >50 Matches","ab9b387e":"<ul><li>CSK play 8 out of 12 finals of IPL\n    <li>MI win 4 out of 5 finals\n    <li>DC don't play any final yet","ed7c6b4b":"### 7.1 Best Bowler in Each category","7d781b70":"I will keep updating the notebook as and when I get a new question to be analysed.<br>\nThank You For Having A Look At This Notebook <p>\n\nPlease **Upvote** if this was Helpful<br>\n\nAnd Analysis Part 2(Coming Soon) Related to **IPL Fantasy League** ;)\n\n<p> Update : <a href=\"https:\/\/www.kaggle.com\/dude431\/ipl-analysis-part-2-fantasy-league-edition\">Part 2 Analysis<\/a>","d142d7da":"### 6.4 Orange Cap Holders","e8fba02a":"## 7. Bowlers Analysis","cdcb8a20":"### 5.3 Powerplay Average Dismissals","d02960e8":"<ul><li> Maximum fall of wickets in powerplay overs set new recort in 2019\n    <li> Dismissals in 2nd innings decrease significantly in 2019 ","3df0d761":"### 7.2 Purple Cap Holders","0b0ce651":"### 2.2 Is it possible to chase >200 Target","92d07c95":"## 8. Winner Analysis","c934d37b":"<ul><li> Virat kohli owned Orange cap with highesr 973 runs in 2016","3e226af5":"## Matches in Every Season","78e48446":"**ooh! its hard to achieve this target only 17 out 100 target > 200 chased successfully**","858fd99b":"So MI is at top in winning matches<br>\nAnd **KXIP** is at last","e1aa5f7e":"<ul><li> Difference between 6\"s by Gayle(1st) and AB de Villiers(2nd) is of 113\n    <li> Many caribbean players are in top list of 6\"s and 4\"s","b8e66ac8":"### 5.1 Runs in Powerplay of Each Match","70edce29":"## Venue of Most Matches","5ce03366":"## Matches Played vs Wins by Each Team","8d81ad6c":"S ravi and HDPK Dhrmasena are most popular umpires in IPL","0047ec78":"## 2. Target of 200 Runs or More","f3e74037":"### 6.2 Top 20 Batsman","7b4f5d28":"## 4. Runs Per over of Each Team","e5f7e3b2":"<ul><li>Virat Kohli has highest total runs across all seasons. Raina is just few runs behind with the second spot\n    <li>Average Score and 6\"s by Parthiv Patel is lowest among top 20 batsmen\n    <li>Gayle is at top in 6\"s","ceda1633":"## Favorite Umpire","2fca7be4":"<ul><li> Powerplay is upto six overs so there is dip in 7th over\n    <li> MI is best at Death over (Good Finishers\/Tailenders)\n    <li> RR is worst among all in death, middle and powerplay overs","b0c5e6a7":"![](https:\/\/img1.hotstarext.com\/image\/upload\/f_auto,t_hcdl\/sources\/r1\/cms\/prod\/7209\/437209-h)","5b568a53":"<ul><li> DJ Brave owned Purple cap with highest 32 wickets in 2013"}}