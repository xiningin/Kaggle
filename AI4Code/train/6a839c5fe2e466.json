{"cell_type":{"47bb05b0":"code","18e758f9":"code","3c64dec9":"code","ccfc0deb":"code","01b6b257":"code","f3918a8e":"code","278fe14d":"code","14ed112a":"code","a0c418cc":"code","706f3ba6":"code","413e30f6":"code","538c24a4":"code","01dc59be":"code","c0717ddf":"code","3c3422b2":"code","de79b5a8":"code","0cc4acbb":"code","ec2c80f5":"code","b38e046a":"code","02104971":"code","4e11c373":"code","e20e1373":"code","3f1a68e8":"code","10525d93":"code","14b7dfcf":"code","ff382b1d":"code","1283f452":"code","2c5bbd47":"code","713e61a7":"code","6a182347":"code","87b1084e":"code","e72b0cc1":"code","43cfdf84":"code","2d93e947":"code","dfc7f383":"code","2cabf044":"code","ea5cb44c":"code","3987cfdf":"code","079d3962":"code","41c83967":"code","b424634c":"code","68261560":"code","c5b4a406":"code","de490b2c":"code","702b7ea9":"code","3fdc908f":"code","25d5457a":"code","ac0df1b5":"code","efbd96db":"code","c14498e4":"code","5277da10":"code","200be37a":"code","878bfafc":"code","1b5ccd06":"code","5899e6bc":"code","338299df":"code","b581aeee":"code","83b3762c":"code","7fb5e78d":"code","4f6790be":"code","f6c13d10":"code","32aa15eb":"code","b5cc2396":"code","df21f6c8":"code","2cd565cf":"code","c40e397a":"code","4580cc2b":"code","bfb7fda0":"code","7bb214ee":"code","f1f7b325":"code","2825291d":"code","747a7cb6":"code","bd03749e":"code","2bc2d2ce":"code","f20c48fd":"code","9aba30bd":"code","532c0eb4":"code","8749e572":"code","9614e576":"code","e53a497b":"code","9b0c2aa6":"code","cb66e546":"code","351b2321":"code","c718e4ec":"code","671e31f1":"code","d00cb7a6":"code","52b1ae4e":"code","72fbed69":"code","272f58f2":"code","55e546f6":"code","20191fa6":"code","9308e786":"code","6c936d1f":"code","de21b59f":"markdown","ed8a3c37":"markdown","ddb95cc8":"markdown","84539f1f":"markdown","58f743a4":"markdown","8cb93fc8":"markdown","6cd4fbac":"markdown","6405fbae":"markdown","ba51df5f":"markdown"},"source":{"47bb05b0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale=1.5)\n\nimport missingno as msno\n\n# ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","18e758f9":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","3c64dec9":"df_train.head()","ccfc0deb":"df_train.describe()","01b6b257":"df_train.shape","f3918a8e":"df_train.columns","278fe14d":"for col in df_train.columns:\n    msg = 'column: {:>10}\\t percent of NaN value: {:.2f}%'.format(col, 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msg)","14ed112a":"for col in df_test.columns:\n    msg = 'column: {:>10}\\t percent of NaN value: {:.2f}%'.format(col, 100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0]))\n    print(msg)","a0c418cc":"msno.matrix(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))","706f3ba6":"msno.bar(df=df_test.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))","413e30f6":"f, ax = plt.subplots(1, 2, figsize=(10, 4))\n\ndf_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%.2f%%', ax=ax[0], shadow=True)\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived', data=df_train, ax=ax[1])\nax[1].set_title('Count plot - Survived')\nplt.show()","538c24a4":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean()","01dc59be":"df_train[['Pclass', 'Survived']].groupby(['Pclass']).count()","c0717ddf":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True).style.background_gradient(cmap='PuBu')","3c3422b2":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar()","de79b5a8":"y_position = 1.1\nf, ax = plt.subplots(1, 2, figsize=(15,5))\ndf_train['Pclass'].value_counts().plot.bar(ax=ax[0])\nax[0].set_title('Number of passengers By Pclass', y=y_position)\nax[0].set_ylabel('Count')\nsns.countplot('Pclass', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Pclass: Survived vs Dead', y=y_position)\nplt.show()","0cc4acbb":"df_train[['Sex','Survived']].groupby(['Sex'], as_index=True).count()","ec2c80f5":"f, ax = plt.subplots(1, 2, figsize=(10, 4))\ndf_train[['Sex','Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","b38e046a":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='PuBu')","02104971":"sns.factorplot('Pclass','Survived', hue='Sex', data=df_train, size=6, aspect=1.5)","4e11c373":"sns.factorplot(x='Sex', y='Survived', hue='Pclass', data=df_train, saturation=5, size=9, aspect=1)","e20e1373":"print('\uc81c\uc77c \ub098\uc774 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} years'.format(df_train['Age'].max()))\nprint('\uc81c\uc77c \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d : {:.1f} years'.format(df_train['Age'].min()))\nprint('\ud0d1\uc2b9\uac1d \ud3c9\uade0 \ub098\uc774 : {:.1f} years'.format(df_train['Age'].mean()))","3f1a68e8":"df_train['Age']","10525d93":"fig, ax = plt.subplots(1, 1, figsize=(8,5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\nplt.legend(['Survived', 'Dead'])\nplt.show","14b7dfcf":"plt.figure(figsize=(8, 6))\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='kde')\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])","ff382b1d":"fig, ax = plt.subplots(1, 1, figsize=(8,5))\nsns.kdeplot(df_train[(df_train['Survived'] == 1) & (df_train['Pclass'] == 1)]['Age'], ax=ax)\nsns.kdeplot(df_train[(df_train['Survived'] == 0) & (df_train['Pclass'] == 1)]['Age'], ax=ax)\nplt.legend(['Survived', 'Dead'])\nplt.title('1st Class')\nplt.show","1283f452":"fig, ax = plt.subplots(1, 1, figsize=(8,5))\nsns.kdeplot(df_train[(df_train['Survived'] == 1) & (df_train['Pclass'] == 2)]['Age'], ax=ax)\nsns.kdeplot(df_train[(df_train['Survived'] == 0) & (df_train['Pclass'] == 2)]['Age'], ax=ax)\nplt.legend(['Survived', 'Dead'])\nplt.title('2nd Class')\nplt.show","2c5bbd47":"fig, ax = plt.subplots(1, 1, figsize=(8,5))\nsns.kdeplot(df_train[(df_train['Survived'] == 1) & (df_train['Pclass'] == 3)]['Age'], ax=ax)\nsns.kdeplot(df_train[(df_train['Survived'] == 0) & (df_train['Pclass'] == 3)]['Age'], ax=ax)\nplt.legend(['Survived', 'Dead'])\nplt.title('3rd Class')\nplt.show","713e61a7":"change_age_range_survival_ratio = []\n\nfor i in range(1, 80):\n    change_age_range_survival_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived']))\n    \nplt.figure(figsize=(7, 7))\nplt.plot(change_age_range_survival_ratio)\nplt.title('Survival rate change depending on range of Age')\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age (0~x)')\nplt.show","6a182347":"f, ax = plt.subplots(1, 2, figsize=(10,4))\nsns.violinplot('Pclass', 'Age', hue='Survived', data=df_train, scale='count', split=True, ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0, 110, 20))\n\nsns.violinplot('Sex', 'Age', hue='Survived', data=df_train, scale='count', split=True, ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0, 110, 20))\nplt.show()","87b1084e":"f, ax = plt.subplots(1, 1, figsize=(7, 7))\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax)","e72b0cc1":"f, ax = plt.subplots(2, 2, figsize=(15,10))\nsns.countplot('Embarked', data=df_train, ax=ax[0, 0])\nax[0, 0].set_title('(1) No. Of Passengers Boarded')\n\nsns.countplot('Embarked', hue='Sex', data=df_train, ax=ax[0, 1])\nax[0, 1].set_title('(2) Male-Female split for embarked')\n\nsns.countplot('Embarked', hue='Survived', data=df_train, ax=ax[1, 0])\nax[1, 0].set_title('(3) Embarked vs Survived')\n\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax=ax[1, 1])\nax[1, 1].set_title('(4) Embarked vs Pclass')\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","43cfdf84":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] +1","2d93e947":"df_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] +1","dfc7f383":"df_train['FamilySize']","2cabf044":"print('Maximum size of family: ', df_train['FamilySize'].max())\nprint('Minimum size of family: ', df_train['FamilySize'].min())","ea5cb44c":"f, ax = plt.subplots(1, 3, figsize=(30,10))\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('(1) No. Of Passenger Boarded', y=1.02)\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize', y=1.02)\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize', y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","3987cfdf":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\n\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness: {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","079d3962":"df_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i>1 else 1)","41c83967":"df_test['Fare'].mean()","b424634c":"df_test['Fare'].fillna('36', inplace=True)","68261560":"df_test['Fare'].isnull().sum()","c5b4a406":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\n\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness: {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","de490b2c":"df_train['Ticket'].value_counts()","702b7ea9":"df_train['Age'].isnull().sum()","3fdc908f":"df_train['initial'] = df_train['Name'].str.extract('([A-Za-z]+)\\.')\ndf_test['initial'] = df_test['Name'].str.extract('([A-Za-z]+)\\.')","25d5457a":"pd.crosstab(df_train['initial'], df_train['Sex']).T.style.background_gradient(cmap='PuBu')","ac0df1b5":"df_train['initial'].replace(['Capt', 'Col', 'Countess', 'Don', 'Dr', 'Jonkheer', 'Lady', 'Major', 'Mlle', 'Mme', 'Ms', 'Rev', 'Sir'],\n                           ['Mr', 'Other', 'Mrs', 'Mr', 'Mr', 'Other', 'Mrs', 'Mr', 'Miss', 'Miss', 'Miss', 'Other', 'Mr'], inplace=True)\n\ndf_test['initial'].replace(['Capt', 'Col', 'Countess', 'Don', 'Dr', 'Jonkheer', 'Lady', 'Major', 'Mlle', 'Mme', 'Ms', 'Rev', 'Sir'],\n                           ['Mr', 'Other', 'Mrs', 'Mr', 'Mr', 'Other', 'Mrs', 'Mr', 'Miss', 'Miss', 'Miss', 'Other', 'Mr'], inplace=True)","efbd96db":"df_train.groupby('initial').mean()","c14498e4":"df_train.groupby('initial')['Survived'].mean().plot.bar()","5277da10":"df_all = pd.concat([df_train, df_test]).reset_index()","200be37a":"df_all.groupby('initial').mean()","878bfafc":"df_train.loc[(df_train['Age'].isnull()) & (df_train['initial'] == 'Mr'), 'Age'] = 33\ndf_train.loc[(df_train['Age'].isnull()) & (df_train['initial'] == 'Miss'), 'Age'] = 5\ndf_train.loc[(df_train['Age'].isnull()) & (df_train['initial'] == 'Master'), 'Age'] = 22\ndf_train.loc[(df_train['Age'].isnull()) & (df_train['initial'] == 'Mrs'), 'Age'] = 37\ndf_train.loc[(df_train['Age'].isnull()) & (df_train['initial'] == 'Other'), 'Age'] = 45\n\ndf_test.loc[(df_test['Age'].isnull()) & (df_test['initial'] == 'Mr'), 'Age'] = 33\ndf_test.loc[(df_test['Age'].isnull()) & (df_test['initial'] == 'Miss'), 'Age'] = 5\ndf_test.loc[(df_test['Age'].isnull()) & (df_test['initial'] == 'Master'), 'Age'] = 22\ndf_test.loc[(df_test['Age'].isnull()) & (df_test['initial'] == 'Mrs'), 'Age'] = 37\ndf_test.loc[(df_test['Age'].isnull()) & (df_test['initial'] == 'Other'), 'Age'] = 45","1b5ccd06":"df_train['Embarked'].isnull().sum()","5899e6bc":"df_train['Embarked'].fillna('S', inplace=True)\ndf_test['Embarked'].fillna('S', inplace=True)","338299df":"df_train['Age_cat'] = 0\ndf_test['Age_cat'] = 0","b581aeee":"df_train.head()","83b3762c":"def category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7","7fb5e78d":"df_train['Age_cat'] = df_train['Age'].apply(category_age)","4f6790be":"df_test['Age_cat'] = df_test['Age'].apply(category_age)","f6c13d10":"df_train.head()","32aa15eb":"df_train.initial.unique()","b5cc2396":"df_train['initial'] = df_train['initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_test['initial'] = df_test['initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})","df21f6c8":"df_train.Embarked.unique()","2cd565cf":"df_train['Embarked'].value_counts()","c40e397a":"df_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q' : 1, 'S': 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q' : 1, 'S': 2})","4580cc2b":"df_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1})\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1})","bfb7fda0":"heatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Embarked', 'initial', 'FamilySize', 'Age_cat']]","7bb214ee":"colormap = plt.cm.PuBu\nplt.figure(figsize=(10,8))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0,\n           square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={'size': 16}, fmt='.2f')","f1f7b325":"pd.get_dummies(df_train, columns=['initial'], prefix = 'initial')","2825291d":"df_train = pd.get_dummies(df_train, columns=['initial'], prefix = 'initial')\ndf_test = pd.get_dummies(df_test, columns=['initial'], prefix = 'initial')","747a7cb6":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix = 'Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix = 'Embarked')","bd03749e":"df_train.head()","2bc2d2ce":"df_train = df_train.drop(['Age'], axis=1)","f20c48fd":"df_train.head()","9aba30bd":"df_train = df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=False)\ndf_test = df_test.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Age'], axis=1, inplace=False)","532c0eb4":"df_train.head()","8749e572":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","9614e576":"X_train = df_train.drop('Survived', axis=1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values","e53a497b":"X_tr, X_vid, y_tr, y_vid = train_test_split(X_train, target_label, test_size=0.3, random_state=2018)","9b0c2aa6":"model = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)","cb66e546":"prediction = model.predict(X_vid)","351b2321":"print('\ucd1d {}\uba85 \uc911 {:2f}% \uc815\ud655\ub3c4\ub85c \uc0dd\uc874 \ub9de\ucda4'.format(y_vid.shape[0], 100 * metrics.accuracy_score(prediction, y_vid)))","c718e4ec":"model.feature_importances_","671e31f1":"from pandas import Series","d00cb7a6":"df_test.head()","52b1ae4e":"feature_importance = model.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)","72fbed69":"plt.figure(figsize=(8, 8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","272f58f2":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","55e546f6":"submission.head()","20191fa6":"prediction = model.predict(X_test)","9308e786":"submission['Survived'] = prediction","6c936d1f":"submission.to_csv('.\/my_first_submission.csv', index=False)","de21b59f":"## Ticket","ed8a3c37":"- Lady first\n- Money brings Survivals","ddb95cc8":"## 2.1 Pclass","84539f1f":"## Fare","58f743a4":"## Embarked","8cb93fc8":"Age","6cd4fbac":"2.2 Sex","6405fbae":"## Pclass, Sex, Age","ba51df5f":"## Family = SibSp + Parch"}}