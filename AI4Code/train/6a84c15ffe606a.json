{"cell_type":{"c8c2bae0":"code","2f2ac9cb":"code","138f3215":"code","be3ec13f":"code","ec2815a0":"code","5408c4ab":"code","3de0adaa":"code","1a7924e2":"code","238fffc1":"markdown","fb1e6824":"markdown","b8b47759":"markdown"},"source":{"c8c2bae0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport re\nimport nltk\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('wordnet')\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom gensim.models import Word2Vec\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f2ac9cb":"df = pd.read_csv('\/kaggle\/input\/spam-text-message-classification\/SPAM text message 20170820 - Data.csv')\ndf.head()","138f3215":"df['Category'].isnull().any()","be3ec13f":"df = df.loc[df['Message'].notna(),:]","ec2815a0":"text = df['Message']","5408c4ab":"labels = df['Category']\n","3de0adaa":"# tokenize\ntext = text.apply(nltk.word_tokenize)\nprint('tokenized')\n\n# Remove stop words\nstop_words = set(nltk.corpus.stopwords.words('english'))\ntext = text.apply(lambda x : [item for item in x if item not in stop_words])\nprint('stop words removed')\n\n#Remove punctuation\nregex = '[a-z]+'\ntext = text.apply(lambda x: [item for item in x if re.match(regex, item)])\nprint('puncuation,numbers,symbols removed')\n\n# Lemmatization\nlem = nltk.stem.wordnet.WordNetLemmatizer()\ntext = text.apply(lambda x : [lem.lemmatize(item,pos='v') for item in x])\nprint('lemmatized')","1a7924e2":"# Classification using TFIDF vectorizer\ntext=[\" \".join(sen) for sen in text.values]\n# Vectorize training and testing data\ndef Vectorize(vec, X_train, X_test):    \n    \n    X_train_vec = vec.fit_transform(X_train)\n    X_test_vec = vec.transform(X_test)\n    \n    print('Vectorization complete.\\n')\n    \n    return X_train_vec, X_test_vec\n\n# Use multiple classifiers and grid search for prediction\ndef ML_modeling(models, params, X_train, X_test, y_train, y_test):    \n    \n    if not set(models.keys()).issubset(set(params.keys())):\n        raise ValueError('Some estimators are missing parameters')\n\n    for key in models.keys():\n    \n        model = models[key]\n        param = params[key]\n        gs = GridSearchCV(model, param, cv=5, error_score=0, refit=True)\n        gs.fit(X_train, y_train)\n        y_pred = gs.predict(X_test)\n        \n        # Print scores for the classifier\n        print(key, ':', gs.best_params_)\n        print(\"Precision: %1.3f \\tRecall: %1.3f \\t\\tF1: %1.3f\\n\" % (precision_score(y_test, y_pred, average='macro'), recall_score(y_test, y_pred, average='macro'), f1_score(y_test, y_pred, average='macro')))\n    \n    return\n\nmodels = {\n    'Naive Bayes': MultinomialNB(), \n    'Decision Tree': DecisionTreeClassifier(),  \n    'Perceptron': MLPClassifier(),\n    'Gradient Boosting': GradientBoostingClassifier()\n}\n\nparams = {\n    'Naive Bayes': { 'alpha': [0.5, 1], 'fit_prior': [True, False] }, \n    'Decision Tree': { 'min_samples_split': [1, 2, 5] }, \n    'Perceptron': { 'alpha': [0.0001, 0.001], 'activation': ['tanh', 'relu'] },\n    'Gradient Boosting': { 'learning_rate': [0.05, 0.1], 'min_samples_split': [2, 5] }\n}\n\n\n\n# Train-test split and vectorize\nX_train, X_test, y_train, y_test = train_test_split(text, labels, test_size=0.2, shuffle=True)\nX_train_vec, X_test_vec = Vectorize(TfidfVectorizer(), X_train, X_test)\n\nML_modeling(models, params, X_train_vec, X_test_vec, y_train, y_test)","238fffc1":"# Inference Pipeline","fb1e6824":"# Preprocessing","b8b47759":"# Load Data"}}