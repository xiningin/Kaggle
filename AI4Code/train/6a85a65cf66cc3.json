{"cell_type":{"17758c19":"code","5d8de8fc":"code","36ccfa52":"code","e413b59b":"code","6de869a2":"code","83b1fde3":"code","ebb6726a":"code","04c1eeaa":"code","deb79bc9":"code","7214c485":"code","d9aa74e6":"code","02e63ac1":"code","71d0b42e":"code","260639d2":"code","08894527":"code","72243aba":"code","c48ac8f0":"code","ead27d9f":"code","95c56423":"code","0c02b238":"code","2243f834":"code","156d2c35":"code","0675ea26":"code","a01d2dd7":"code","e1cbac96":"code","b9f8d2ce":"code","897e5eac":"code","92c4c091":"markdown","eae6b091":"markdown","4586a72e":"markdown","ffbe2b7d":"markdown","399f37ac":"markdown","eca57d7c":"markdown","e36c5ed2":"markdown","8125bf84":"markdown","fbacdd84":"markdown","7e54b133":"markdown","2d651b43":"markdown","46fd2d57":"markdown","328a9073":"markdown","1531a2b1":"markdown","c7560d9d":"markdown","207c06c3":"markdown","785059eb":"markdown","f19be09f":"markdown","5a26c97b":"markdown"},"source":{"17758c19":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.layers.recurrent import LSTM\nfrom keras.models import Sequential\nimport time \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d8de8fc":"aselsan = pd.read_csv(\"..\/input\/4-turkeys-biggest-companyin-stock-market\/ASELS.IS (1).csv\")\naselsan.head()","36ccfa52":"migros = pd.read_csv(\"..\/input\/4-turkeys-biggest-companyin-stock-market\/MGROS.IS.csv\")\nmigros[\"stock_name\"]=\"migros\"\nmigros_copy = migros.copy()\n#only two row null. I want to fill because of the graph and predictions.\n#simply we take average nearest rows\nprint(\"migros stock null values:\\n\", migros[migros.isnull().any(axis=1)])\n\nthy = pd.read_csv(\"..\/input\/4-turkeys-biggest-companyin-stock-market\/THYAO.IS.csv\")\nthy[\"stock_name\"] = \"thy\"\nthy_copy = thy.copy()\nprint(\"thy stock null values:\\n\", thy[thy.isnull().any(axis=1)])\n\naselsan = pd.read_csv(\"..\/input\/4-turkeys-biggest-companyin-stock-market\/ASELS.IS (1).csv\")\naselsan[\"stock_name\"] = \"aselsan\"\naselsan_copy = aselsan.copy()\nprint(\"aselsan stock null values:\\n\", aselsan[aselsan.isnull().any(axis=1)])\n\ngaran = pd.read_csv(\"..\/input\/4-turkeys-biggest-companyin-stock-market\/GARAN.IS.csv\")\ngaran[\"stock_name\"]= \"garan\"\ngaran_copy = garan.copy()\nprint(\"garan stock null values:\\n\", garan[garan.isnull().any(axis=1)])\n\ndatalist=[migros, thy, aselsan, garan]\nall_data = pd.concat(datalist,axis=1, ignore_index=True)","e413b59b":"def fillmissing_value(stocks,copy):\n    #number of total rows which has null value\n    nullrownumber = stocks.shape[0] - stocks.dropna().shape[0]\n    \n    for i in range(nullrownumber):\n        null_data = stocks[stocks.isnull().any(axis=1)]\n        getindex=null_data.index\n        stocks.drop([\"Date\", \"stock_name\"], axis=1, inplace = True)\n        \n        ortalama1 = stocks.iloc[getindex[0]-1]\n        ortalama2 = stocks.iloc[getindex[0]+1]\n        ortalama = stocks.iloc[getindex[0]]\n        ortalama = (ortalama1+ortalama2)\/2\n        ortalama[:4]=ortalama[:4].astype(\"float16\")\n        stocks.iloc[getindex[0]]=stocks.iloc[getindex[0]].fillna(ortalama)\n        stocks[\"Date\"] = copy[\"Date\"]\n        stocks[\"stock_name\"] = copy[\"stock_name\"]\n        stocks[\"Volume\"]=stocks[\"Volume\"].astype(\"float\")\n        \ndatalist=[migros, thy,garan, aselsan]\ndataliststr=[\"migros\", \"thy\",\"garan\", \"aselsan\"]\ndatalist_copy=[migros_copy, thy_copy,garan_copy, aselsan_copy]\n\nfor i in range(len(datalist)):\n    fillmissing_value(datalist[i],datalist_copy[i])\n    \nfor i in range(len(datalist)):\n    null_data = datalist[i].isnull().any().sum()\n    print(\"{} dataset has: {} null value\".format(dataliststr[i] ,null_data))\n","6de869a2":"print(aselsan.describe())","83b1fde3":"print(aselsan.info())","ebb6726a":"print(\"{} means weekdays in a one year.\".format(aselsan.shape[0]))","04c1eeaa":"plt.style.use(\"seaborn\")\nplt.figure(figsize=(14,8))\nplt.plot(migros[\"Close\"], color=\"purple\", linewidth=3)\nplt.title(\"Migros Stock Price\", fontsize=40)\nmonths=[\"November\",\"December\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\"]\nplt.xticks(np.arange(0,252,21)+13,labels=months,rotation=12)  # Set text labels and properties.\nplt.xlim(left=0, right=252) #252 equals number of rows\nplt.ylim(top=45) \nplt.ylabel(\"Turkish lira\", fontsize=18)\nplt.show()\n","deb79bc9":"plt.style.use(\"seaborn\")\nfig, axs = plt.subplots(2, 2,figsize=(12,12))\n\naxs[0, 0].plot(migros[\"Close\"], color=\"Red\", linewidth=2)\naxs[0, 0].set_title(\"Migros Stock Price\")\naxs[0, 0].set_xticks(np.arange(0,252,21)+13)\naxs[0, 0].set_xticklabels([i for i in months],fontsize=6)\naxs[0, 0].set_xlim(left=0, right=252)\n\naxs[0, 1].plot(thy[\"Close\"], color=\"red\", linewidth=2)\naxs[0, 1].set_title(\"THY Stock Price\")\naxs[0, 1].set_xticks(np.arange(0,252,21)+13)\naxs[0, 1].set_xticklabels([i for i in months],fontsize=6)\naxs[0, 1].set_xlim(left=0, right=252)\n\n\naxs[1, 0].plot(garan[\"Close\"], color=\"red\", linewidth=2)\naxs[1, 0].set_title(\"Garanti Bank Stock Price\")\naxs[1, 0].set_xticks(np.arange(0,252,21)+13)\naxs[1, 0].set_xticklabels([i for i in months],fontsize=6)\naxs[1, 0].set_xlim(left=0, right=252)\n\n\naxs[1, 1].plot(aselsan[\"Close\"], color=\"red\", linewidth=2)\naxs[1, 1].set_title(\"Aselsan Stock Price\")\naxs[1, 1].set_xticks(np.arange(0,252,21)+13)\naxs[1, 1].set_xticklabels([i for i in months],fontsize=6)\naxs[1, 1].set_xlim(left=0, right=252)","7214c485":"datalist=[migros, thy,garan, aselsan]\nfor company in datalist:\n    first_price = round(company[\"Close\"].iloc[0],2)\n    last_price =  round(company[\"Close\"].iloc[-1],2)\n    print(\"*\" * 25)\n    print(\"first Close price: {} and last Close price: {}\".format(first_price,last_price))\n    annual_return = ((last_price-first_price) * 100 ) \/ (first_price)\n    print(\"{} annual return is: %{:.2f}\".format(company[\"stock_name\"][0], annual_return))","d9aa74e6":"migros[\"Volume\"] = migros[\"Volume\"].astype({\"Volume\":\"float\"})\n#(x-Xmin)\/(Xmax- Xmin)\ncolumn = migros[\"Volume\"]\nmax_value = column.max()\nmin_value = column.min()\n\nmigros[\"Volume\"]=((migros[\"Volume\"]-min_value)\/(max_value -min_value))*15\n#I use min-max scaler than I multiple 15 to make the graph clearer","02e63ac1":"plt.figure(figsize=(12,12))\nplt.style.use(\"ggplot\")\nplt.title(\"Migros Stock Price(TRY)\", color =\"red\", fontsize=20)\nplt.bar(migros[\"Date\"], migros[\"Volume\"]*3,  color=\"orange\")\nplt.plot(migros[\"Close\"], color=\"black\", label=\"Close Price\")\nplt.xticks(np.arange(0,252,21)+13,labels=months,rotation=12)\nplt.yticks(np.arange(0,50,5))\nplt.xlim(left=0, right=252) #252 equals number of rows\nplt.ylabel(\"Volume(10 million Turkish lira)\")\nplt.xlabel(\"2019-2020 years\")\n\nx = 101\ny = 5\nplt.scatter(x, y, color='red',linewidths=3, label=\"first corona case in Turkey\")\nplt.legend(prop={'size': 15})\nplt.show()","71d0b42e":"describe = migros_copy[\"Volume\"].describe()\nprint(describe)\nprint(\"*\"*20)\nprint(\"Mean Volume of stock; 3,813,146 million TRY\")","260639d2":"moving_average_day = [10, 20, 50]\ndatalist=[migros, thy,garan, aselsan]\nfor ma in moving_average_day:\n    for company in datalist:\n        column_name = f\"MA for {ma} days\"\n        company[column_name] = company['Adj Close'].rolling(ma).mean()\n\n\nplt.style.use(\"dark_background\")\nplt.figure(figsize=(16,10))\nplt.plot(migros[\"Close\"], color=\"purple\", label=\"Close Price\")\nplt.plot(migros[\"MA for 10 days\"], color=\"green\", label=\"MA 10\")\nplt.plot(migros[\"MA for 20 days\"], color=\"yellow\", label=\"MA 20\")\nplt.plot(migros[\"MA for 50 days\"], color=\"red\", label=\"MA 50\")\nplt.title(\"Migros Stock Price\", fontsize=40)\nmonths=[\"November\",\"December\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\"]\nplt.xticks(np.arange(0,252,21)+13,labels=months,rotation=12)  # Set text labels and properties.\nplt.xlim(left=0, right=252) #252 equals number of rows\nplt.ylim(top=45) \nplt.ylabel(\"Turkish lira\", fontsize=30)\nplt.legend(prop={'size': 20})","08894527":"plt.style.use(\"seaborn\")\nfig, axs = plt.subplots(2, 2,figsize=(12,12))\n\naxs[0, 0].plot(migros[\"Close\"], color=\"black\", linewidth=2, label=\"Close Price\")\naxs[0, 0].plot(migros[\"MA for 10 days\"], color=\"green\", label=\"MA 10\")\naxs[0, 0].plot(migros[\"MA for 20 days\"], color=\"yellow\", label=\"MA 20\")\naxs[0, 0].plot(migros[\"MA for 50 days\"], color=\"red\", label=\"MA 50\")\naxs[0, 0].set_title(\"Migros Stock Price\")\naxs[0, 0].set_xticks(np.arange(0,252,21)+13)\naxs[0, 0].set_xticklabels([i for i in months],fontsize=6)\naxs[0, 0].set_xlim(left=0, right=252)\naxs[0, 0].legend(prop={'size': 10})\n\naxs[0, 1].plot(thy[\"Close\"], color=\"black\", linewidth=2)\naxs[0, 1].plot(thy[\"MA for 10 days\"], color=\"green\", label=\"MA 10\")\naxs[0, 1].plot(thy[\"MA for 20 days\"], color=\"yellow\", label=\"MA 20\")\naxs[0, 1].plot(thy[\"MA for 50 days\"], color=\"red\", label=\"MA 50\")\naxs[0, 1].set_title(\"THY Stock Price\")\naxs[0, 1].set_xticks(np.arange(0,252,21)+13)\naxs[0, 1].set_xticklabels([i for i in months],fontsize=6)\naxs[0, 1].set_xlim(left=0, right=252)\naxs[0, 1].legend(prop={'size': 10})\n\n\naxs[1, 0].plot(garan[\"Close\"], color=\"black\", linewidth=2)\naxs[1, 0].plot(garan[\"MA for 10 days\"], color=\"green\", label=\"MA 10\")\naxs[1, 0].plot(garan[\"MA for 20 days\"], color=\"yellow\", label=\"MA 20\")\naxs[1, 0].plot(garan[\"MA for 50 days\"], color=\"red\", label=\"MA 50\")\naxs[1, 0].set_title(\"Garanti Bank Stock Price\")\naxs[1, 0].set_xticks(np.arange(0,252,21)+13)\naxs[1, 0].set_xticklabels([i for i in months],fontsize=6)\naxs[1, 0].set_xlim(left=0, right=252)\naxs[1, 0].legend(prop={'size': 10})\n\n\naxs[1, 1].plot(aselsan[\"Close\"], color=\"black\", linewidth=2)\naxs[1, 1].plot(aselsan[\"MA for 10 days\"], color=\"green\", label=\"MA 10\")\naxs[1, 1].plot(aselsan[\"MA for 20 days\"], color=\"yellow\", label=\"MA 20\")\naxs[1, 1].plot(aselsan[\"MA for 50 days\"], color=\"red\", label=\"MA 50\")\naxs[1, 1].set_title(\"Aselsan Stock Price\")\naxs[1, 1].set_xticks(np.arange(0,252,21)+13)\naxs[1, 1].set_xticklabels([i for i in months],fontsize=6)\naxs[1, 1].set_xlim(left=0, right=252)\naxs[1, 1].legend(prop={'size': 10})","72243aba":"plt.style.use(\"dark_background\")\nplt.figure(figsize=(14,10))\nplt.plot(migros[\"MA for 20 days\"], color=\"blue\", linewidth=3)\n\n#\u00fcst band\n\u00fcstband = migros['Close'].rolling(20).std()\nplt.plot((migros[\"MA for 20 days\"]+\u00fcstband*2), color=\"red\",linewidth=1.5)\n\n#alt band\naltband = migros['Close'].rolling(20).std()\nplt.plot((migros[\"MA for 20 days\"]-altband*2), color=\"red\",linewidth=1.5)\nplt.title(\"Migros Stock Price \\n with bollinger bands\", fontsize=40)\nmonths=[\"November\",\"December\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\"]\nplt.xticks(np.arange(0,252,21)+13,labels=months,rotation=12)  # Set text labels and properties.\nplt.xlim(left=0, right=252) #252 equals number of rows\nplt.ylim(top=50) \nplt.ylabel(\"Turkish lira\", fontsize=20)","c48ac8f0":"Ema12 = migros[\"Close\"].rolling(12).mean()\nEma26 = migros[\"Close\"].rolling(26).mean()\nMACD = Ema12 - Ema26\nmigros[\"MACD\"] = MACD\nMacdSignal = migros[\"MACD\"].rolling(9).mean()\nmigros[\"MacdSignal\"] = MacdSignal\n\nplt.style.use(\"ggplot\")\nplt.figure(figsize=(18,10))\nplt.plot(migros[\"Close\"], color=\"black\", linewidth=2, label=\"Close Price\")\nplt.plot(migros[\"MACD\"], color=\"c\", linewidth=1.5, label = \"MACD\")\nplt.plot(migros[\"MacdSignal\"], color=\"red\", linewidth=1.5, label = \"MACD Signal\")\nplt.title(\"Migros with MACD\", fontsize=40,color=\"black\")\nmonths=[\"November\",\"December\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\"]\nplt.xticks(np.arange(0,252,21)+13,labels=months,rotation=12)  # Set text labels and properties.\nplt.yticks(np.arange(0,50 ,5))\nplt.xlim(left=0, right=252) #252 equals number of rows\nplt.legend(prop={'size': 20})\nplt.ylabel(\"Migros stock Price (TRY)\", fontsize=25)\nplt.show()","ead27d9f":"garan[\"volalite(kuru\u015f)\"] = garan[\"Close\"]-garan[\"Open\"]\ngaran[\"volalite\"]= 100*garan[\"volalite(kuru\u015f)\"]\/garan[\"Open\"]\ngaran[\"volalite\"].describe()","95c56423":"usdtry = pd.read_csv(\"..\/input\/4-turkeys-biggest-companyin-stock-market\/USDTRYX.csv\")\n\nplt.figure(figsize=(14,10))\nplt.style.use(\"Solarize_Light2\")\nplt.plot(usdtry[\"Close\"], color=\"red\")\nplt.title(\"USD - TRY Rate\", fontsize=20, color=\"red\")\nmonths=[\"November\",\"December\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\"]\nplt.xticks(np.arange(0,252,21)+13,labels=months,rotation=12)  \nplt.xlim(left=0, right=252) #252 equals number of rows\nplt.grid(True)\nplt.ylim(top=8)\n\nx = 101\ny = 6.5\nplt.scatter(x, y, color='black',linewidths=8, label=\"first corona case in Turkey\", alpha=0.8)\nplt.legend(prop={'size': 15}, borderpad=1, shadow=True, facecolor=\"red\")\nplt.show()\n#print(usdtry[\"Close\"])\n","0c02b238":"annualy_difference_usd = usdtry[\"Close\"][252] - usdtry[\"Close\"][0]\nprint(\"annualy difference (USD) {}\".format(annualy_difference_usd))\nannualy_difference_rate = (100 * annualy_difference_usd)\/usdtry[\"Close\"][0] \nprint(\"TRY value  %{:.2f} dropped in a year\".format(annualy_difference_rate))","2243f834":"usdtry.rename(columns={\"Close\":\"usdclose\"}, inplace =True)\ngaran = pd.concat([garan,usdtry[\"usdclose\"]],axis=1)\ngaran[\"usdvalue\"] = garan[\"Close\"]\/garan[\"usdclose\"]\n\n\nplt.style.use(\"ggplot\")\nplt.figure(figsize=(16,10))\n\nplt.plot(garan[\"Close\"], color=\"black\", linewidth=3, label=\"Try value\")\nplt.plot(garan[\"usdvalue\"], color=\"red\", linewidth=1.5, label=\"Usd value\")\nplt.plot(garan[\"usdclose\"], color=\"blue\", linewidth=1.5, label=\"Usd\/Try\")\n\nplt.title(\"Garanti Bank TRY-USD\", fontsize=40,color=\"black\")\nmonths=[\"November\",\"December\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\"]\nplt.xticks(np.arange(0,252,21)+13,labels=months,rotation=12)  # Set text labels and properties.\nplt.yticks(np.arange(0, 14, 1))\nplt.xlim(left=0, right=252) #252 equals number of rows\nplt.legend(prop={'size': 20}, facecolor=\"orange\")\nplt.show()\n","156d2c35":"data = migros.filter(['Close'])\ndata_mig = data.values.astype(\"float32\")\nprint(data_mig.shape)\n\n#scaler for keras model\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0, 1))\ndata_mig_price = scaler.fit_transform(np.array(data_mig).reshape(-1,1))\nprint(data_mig_price.shape)\n\ntrain_size = int(len(data_mig_price) * 0.8)  \ntest_size = int(len(data_mig_price) * 0.2)\n\ntrain_data = data_mig_price[0:train_size,:]\ntest_data =data_mig_price[train_size-20:len(data_mig_price),:]\n\nprint(\"train data len: {}, test data len : {}\".format(len(train_data), len(test_data)))","0675ea26":"def create_dataset(dataset, time_step=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-time_step-1):\n        a = dataset[i:(i+time_step), 0]   \n        dataX.append(a)\n        dataY.append(dataset[i + time_step, 0])\n    return np.array(dataX), np.array(dataY)\n\ntime_step = 20\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, ytest = create_dataset(test_data, time_step)\nprint(\"X_train shape:\",X_train.shape)\nprint(\"y_train shape:\",y_train.shape)\nprint(\"X_test shape:\",X_test.shape)\nprint(\"ytest shape:\",ytest.shape)\n\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)","a01d2dd7":"\nmodel = Sequential()\n\nmodel.add(LSTM(64,input_dim=1,return_sequences=True))\n\n\nmodel.add(LSTM(128,return_sequences=False))\nmodel.add(Dropout(0.3))\n\nmodel.add(Dense(64))\nmodel.add(Dropout(0.3))\n\nmodel.add(Dense(1))\nmodel.add(Activation('linear'))\n\nstart = time.time()\nmodel.compile(loss='mean_squared_error', optimizer='Adam')\nprint ('compilation time : ', time.time() - start)\n\nmodel.fit(\n    X_train,\n    y_train,\n    batch_size=64,\n    epochs=25,\n    validation_split=0.05)\n\nmodel.summary()","e1cbac96":"model.fit(X_train,y_train,validation_data=(X_test,ytest),\n          epochs=100,batch_size=64)\n\ntrain_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)\n\ntrain_predict=scaler.inverse_transform(train_predict)\ntest_predict=scaler.inverse_transform(test_predict)","b9f8d2ce":"\nimport math\nfrom sklearn.metrics import mean_squared_error\n\n#rmse : root mean square error\ntrain_data_rmse = math.sqrt(mean_squared_error(y_train,train_predict))\nprint(\"train data rmse: {}\".format(train_data_rmse))\ntest_data_rmse= math.sqrt(mean_squared_error(ytest,test_predict))\nprint(\"test data rmse: {}\".format(test_data_rmse))","897e5eac":"plt.figure(figsize=(16,8))\nstep_size=20\n\ntrain = np.empty_like(data_mig_price)\ntrain[:, :] = np.nan\ntrain[step_size:len(train_predict)+step_size, :] = train_predict\n\ntest = np.empty_like(data_mig_price)\ntest[:, :] = np.nan\ntest[len(train_predict)+(step_size)+1:len(data_mig_price)-1, :] = test_predict\n\nplt.plot(migros[\"Close\"])\nplt.plot(train, color =\"purple\", linestyle=\"dashed\", linewidth=3)\nplt.plot(test, color=\"black\", linestyle=\"dotted\",linewidth=3)\nplt.title('For Migros Stock price predict')\nplt.xlabel('october 2019----october 2020', fontsize=18)\nplt.ylabel('Close Price(M\u0130GROS) TRY', fontsize=18)\nplt.xticks(np.arange(0,252,21)+13,labels=months,rotation=12)  \nplt.xlim(left=0, right=252) #252 equals number of rows\nplt.legend(['Train\/Migros', 'Validation data', 'Predictions'], prop={'size': 20})\nplt.show()\n","92c4c091":"*  we can say that , pandemic and economic conditions mostly affected banking and aviation sectors\n* on the other hand pandemic conditions affected positively retail sector.(Migros) People did not reduce food spending.\n","eae6b091":"Bollinger Bands consist of 3 calculations:\n\n* 1. The first or middle Bollinger Band is a moving average of the closing price(20 day)\n\n* 2. The second line is the upper Bollinger Band.MOV20+(2*20Standard Deviation of Close)\n\n* 3. The third line is the lower Bollinger Band.MOV20-(2*20Standard Deviation of Close)\n","4586a72e":"# On the graph we observe that, TL's depreciation did not bring investment to the stock !","ffbe2b7d":"<a id=\"visualizations\"><\/a>\n# visualizations:","399f37ac":"# Usd\/Try price\n\nDollar has vital importance for Turkey. There are many reasons about that.\n1. Many Turkish firms has high \u201copen position\u201d in dollars.\n1. Imported products are bought in dollars\n1. Low domestic production","eca57d7c":"Volatility is a statistical measure of the dispersion of returns for a given security or market index. In most cases, the higher the volatility, the riskier the security\n* Daily price volatility;","e36c5ed2":"* One of the primary benefits of MACD is that it incorporates aspects of both momentum and trend in one indicator. As a trend-following indicator, it will not be wrong for very long. The use of moving averages ensures that the indicator will eventually follow the movements of the underlying security\n* The Formula for MACD Is: MACD=12-Period EMA \u2212 26-Period EMA\n* Macd signal line is: 9 period EMA(mof MACD)","8125bf84":"# Content\n1. [Load data and missing value](#Load)\n2. [Visualization](#Visualization)\n3. [Stock Market techniques](#techniques)\n    *       Moving Average\n    *       Bollinger Bands\n    *       MacD\n    *       Volalite\n    *       USD\/ TRY comparison in a stock\n4. [Build LSTM](#LSTM)\n","fbacdd84":"<a id=\"Load\"><\/a>\n# Load data and missing value:","7e54b133":"![rmse.png](attachment:rmse.png)","2d651b43":"\n<h2>Turkish lira is among the top 3 depreciating countries against the dollar in this period.<h2> ","46fd2d57":"lets we analyze annual return on stocks\n14\/October\/2019---14\/October\/2020\n\n","328a9073":"<a id=\"techniques\"><\/a>\n# Stock Market techniques:\n1. Moving Average\n2. Bollinger Bands\n3. MacD\n4. Volatility","1531a2b1":"* The main things of moving averages is firstly that they smooth the data and thus provide a clearer visual picture of the current trend and secondly, that m.a. signals can give a precise answer as to what the trend is.","c7560d9d":"# Introduction.\nWe have stock data of four big company. I try to choose different sectors because of figure out pandemic and turkish economic conditions.And finally compare TRY and USD values.\n\n1. <h2> thy; <\/h2> Turkish Airlines the leader of the aviation industry in Turkey\n1. <h2> garan; <\/h2>  Garanti Bank is the largest bank in Turkey\n1. <h2> migros; <\/h2>  the most valuable company for retail sector\n1. <h2> aselsan; <\/h2>  the company's largest Turkey company in the defense industry. \n\nYou can reach other stock market datasets in Yahoo for your kernels !\n \n# finally If you liked my work, please upvote this kernel since it will keep me motivated for my other studies.Thank you for your suggestions and advice","207c06c3":"Quick not: The first corona vir\u00fcs case was announced on 11 March in turkey. You can observe all of stock market graphs. \n* No wonder markets collapse!","785059eb":"<a id=\"LSTM\"><\/a><br>\n# Build Model:","f19be09f":"After stock volume normalization process, I multiple \"15\" and normalization values because of that plotting more understandable graphs.","5a26c97b":"* okey we plot garanti bank stock with Dollar and Try values in same \n* firstly we have to concat (dollar and Garanti Bank) datasets"}}