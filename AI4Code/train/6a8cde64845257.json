{"cell_type":{"6f047b4e":"code","b3aed6bf":"code","336a8da4":"code","4ecf8312":"code","d1525223":"code","8ee08819":"code","cc8762f2":"code","27520203":"code","6643d6cf":"code","41a499a8":"code","7665adb4":"code","6bd4c036":"code","b750b56b":"code","6a1fc25d":"code","7c218011":"code","1957c62c":"code","5684f534":"code","9149c533":"code","d8a83420":"code","86c0da82":"code","81c7ac5b":"markdown"},"source":{"6f047b4e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom glob import glob # Finds the pathname matching a specific pattern\nimport cv2 # For image manipulation\nimport keras.backend as k\nimport tensorflow as tf\nimport os\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder # For encoding labels into 0 to n classes\nfrom keras.utils import np_utils # To convert encoded labels to binary data","b3aed6bf":"# Reading the images and labels\nimages_path = '..\/input\/train\/*\/*.png'\nimages = glob(images_path)\ntrain_images = []\ntrain_labels = []\n\nfor img in images:\n    train_images.append(cv2.resize(cv2.imread(img), (70, 70)))\n    train_labels.append(img.split('\/')[-2])\ntrain_X = np.asarray(train_images)\ntrain_Y = pd.DataFrame(train_labels)","336a8da4":"# Displaying an image\nplt.title(train_Y[0][100])\n_ = plt.imshow(train_X[100])","4ecf8312":"# Converting labels to numbers\nencoder = LabelEncoder()\nencoder.fit(train_Y[0])\nencoded_labels = encoder.transform(train_Y[0])\ncategorical_labels = np_utils.to_categorical(encoded_labels)","d1525223":"plt.title(str(categorical_labels[100]))\n_ = plt.imshow(train_X[100])","8ee08819":"x_train,x_test,y_train,y_test=train_test_split(train_X,categorical_labels,test_size=0.25,random_state=7)\n#print(x_train.shape,x_test.shape)\n","cc8762f2":"import keras\nfrom keras import layers\nfrom keras.layers import Input, Dense, Activation,ZeroPadding2D, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout, GlobalMaxPooling2D, GlobalAveragePooling2D\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.vgg16 import VGG16","27520203":"base_model = VGG16(include_top=False, weights='imagenet', input_shape=(70, 70, 3))","6643d6cf":"model = Sequential()\nmodel.add(base_model)\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(256, activation='relu'))\nmodel.add(layers.Dense(12, activation='sigmoid'))","41a499a8":"opt = keras.optimizers.adam(lr=0.0001, decay=1e-6)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])","7665adb4":"datagen = ImageDataGenerator(\n    featurewise_center=False,  # set input mean to 0 over the dataset\n    samplewise_center=False,  # set each sample mean to 0\n    featurewise_std_normalization=False,  # divide inputs by std of the dataset\n    samplewise_std_normalization=False,  # divide each input by its std\n    rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)\n    width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n    height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n    horizontal_flip=True,  # randomly flip images\n    vertical_flip=False)","6bd4c036":"datagen.fit(x_train)","b750b56b":"model.fit_generator(datagen.flow(x_train, y_train,\n                                    batch_size=50),\n                    steps_per_epoch=x_train.shape[0],\n                    epochs=1,\n                    validation_data=(x_test, y_test),\n                    verbose=1)     \n","6a1fc25d":"[loss, accuracy] = model.evaluate(x_test, y_test)","7c218011":"print('Test Set Accuracy: '+str(accuracy*100)+\"%\");","1957c62c":"test_images_path = '..\/input\/test\/*.png'\ntest_images = glob(test_images_path)\ntest_images_arr = []\ntest_files = []\n\nfor img in test_images:\n    test_images_arr.append(cv2.resize(cv2.imread(img), (70, 70)))\n    test_files.append(img.split('\/')[-1])\n\ntest_X = np.asarray(test_images_arr)","5684f534":"_ = plt.imshow(test_X[100])","9149c533":"predictions = model.predict(test_X)","d8a83420":"preds = np.argmax(predictions, axis=1)\npred_str = encoder.classes_[preds]","86c0da82":"final_predictions = {'file':test_files, 'species':pred_str}\nfinal_predictions = pd.DataFrame(final_predictions)\nfinal_predictions.to_csv(\"submission.csv\", index=False)","81c7ac5b":"# Plant Seedling Classification"}}