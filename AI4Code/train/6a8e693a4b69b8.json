{"cell_type":{"ef8b051b":"code","5f9a4c24":"code","d8142547":"code","cadc95b7":"code","0f247e04":"code","8a182369":"code","938b55f2":"code","02c0ccbf":"code","267b21b6":"code","d2f7d656":"code","2a81de7c":"code","f3ff6616":"code","b5bd38df":"code","869b9dc2":"code","87585a21":"code","4f9f6fa2":"code","727478d8":"code","21ec7651":"code","ffafa82e":"code","325e4f18":"code","c2e1855f":"code","b27a9196":"code","245a9655":"code","264fd214":"code","be039070":"code","7f7aab57":"code","913e20c2":"code","8a8ce0d3":"code","3ad54568":"code","327d1f8c":"code","0c94ed84":"code","41eb3607":"code","d483900b":"code","0e5a3a20":"code","a22b5c4f":"code","87f7337c":"code","48341c64":"code","9a2b3f90":"code","c587a221":"code","81cfe2ce":"code","981c4a85":"code","4e9815b2":"code","7a1a299e":"code","9bd77018":"code","10c24452":"code","4e77ca71":"code","5c415074":"code","bea0f132":"code","e868a412":"code","e58cf2f4":"code","83bdbe43":"code","932583b5":"code","0b643676":"code","a0d499a7":"markdown","2082ab6e":"markdown","884430b3":"markdown","b8f9f5e0":"markdown","1734120c":"markdown","da5f4c50":"markdown","2eedb153":"markdown","b726099d":"markdown","ab55c51e":"markdown","9e92e859":"markdown","4eae8d71":"markdown","c8664d66":"markdown","a640df87":"markdown","2d620389":"markdown","82435040":"markdown","78df3678":"markdown","0d8ec6d2":"markdown","6a759510":"markdown","f02d7e1f":"markdown","027468e0":"markdown","16e4e2a2":"markdown","4e580071":"markdown","d749b2dc":"markdown","a1fee5a5":"markdown","3b95f09f":"markdown","4a33ea51":"markdown","b0be24b3":"markdown","f4045eb3":"markdown","ff66089d":"markdown","ab44db14":"markdown","60b35cac":"markdown","22b730cc":"markdown","ecfdffa0":"markdown","4edeb02e":"markdown","5b09aaca":"markdown","086128a8":"markdown","205915e6":"markdown","8e9262d3":"markdown","a1e78174":"markdown","2067671b":"markdown","8f008938":"markdown","a1a8b601":"markdown"},"source":{"ef8b051b":"import time\nimport warnings \nwarnings.filterwarnings('ignore')\n\n#Analysis \nimport pandas as pd\npd.options.display.float_format = '{:.3f}'.format\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\n\n#Visulization\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\ncolor = sns.color_palette()\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\n\n# data manipulation\nimport json\nfrom pandas.io.json import json_normalize\n\n# model\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nimport lightgbm as lgb\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5f9a4c24":"# Memory saving function credit to https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    #start_mem = df.memory_usage().sum() \/ 1024**2\n    #print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n\n    for col in df.columns:\n        col_type = df[col].dtype\n\n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    #end_mem = df.memory_usage().sum() \/ 1024**2\n    #print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    #print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n\n    return df","d8142547":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ndf_train = reduce_mem_usage(pd.read_csv('..\/input\/train_V2.csv'))\ndf_test = reduce_mem_usage(pd.read_csv('..\/input\/test_V2.csv'))","cadc95b7":"# \u30c7\u30fc\u30bf\u306e\u5f62\u72b6\u78ba\u8a8d\nprint('train : {}'.format(df_train.shape))\nprint('test : {}'.format(df_test.shape))","0f247e04":"df_train.head()","8a182369":"# \u57fa\u672c\u7d71\u8a08\u91cf\u306e\u8868\u793a\ndf_train.describe()","938b55f2":"total = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum() \/ df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head()","02c0ccbf":"total = df_test.isnull().sum().sort_values(ascending=False)\npercent = (df_test.isnull().sum()\/df_test.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head()","267b21b6":"df_train.dropna(axis=0, inplace=True)\ndf_train.isnull().sum()","d2f7d656":"# \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u8868\u793a\u3057\u3066\u307f\u308b\nk = 10 # \u8868\u793a\u3059\u308b\u7279\u5fb4\u91cf\u306e\u6570\ncorrmat = df_train.corr()\ncols = corrmat.nlargest(k, 'winPlacePerc').index # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u304b\u3089\u9806\u306bk\u500b\u306e\u8981\u7d20\u306e\u6dfb\u5b57(index)\u3092\u53d6\u5f97\n# df_train[cols].head()\ncm = np.corrcoef(df_train[cols].values.T) # \u76f8\u95a2\u95a2\u6570\u884c\u5217\u3092\u6c42\u3081\u308b \u203b\u8ee2\u7f6e\u304c\u5fc5\u8981\nsns.set(font_scale=1.25)\nf, ax = plt.subplots(figsize=(16, 12))\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 8}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","2a81de7c":"# \u5f92\u6b69\u3067\u306e\u79fb\u52d5\u8ddd\u96e2\u3068\u76ee\u7684\u5909\u6570\ndf_train.plot(x='winPlacePerc', y='walkDistance', kind='scatter', figsize=(8,6))","f3ff6616":"# boost\u30a2\u30a4\u30c6\u30e0\u3068\u76ee\u7684\u5909\u6570\nf, ax = plt.subplots(figsize=(14,6))\nfig = sns.boxplot(x='boosts', y='winPlacePerc', data=df_train)\nfig.axis(ymin=0, ymax=1)","b5bd38df":"df_train[df_train['boosts'] >= 24].head()","869b9dc2":"# \u53d6\u5f97\u3057\u305f\u6b66\u5668\u306e\u6570\u3068\u76ee\u7684\u5909\u6570\ndf_train.plot(x='winPlacePerc',y='weaponsAcquired', kind='scatter', figsize = (8,6))","87585a21":"# \u4e0e\u3048\u305f\u30c0\u30e1\u30fc\u30b8\u91cf\u3068\u76ee\u7684\u5909\u6570\ndf_train.plot(x='winPlacePerc', y='damageDealt', kind='scatter', figsize=(8,6))","4f9f6fa2":"# \u56de\u5fa9\u30a2\u30a4\u30c6\u30e0\u3068\u76ee\u7684\u5909\u6570\ndf_train.plot(x='winPlacePerc',y='heals', kind='scatter', figsize = (8,6))","727478d8":"# \u6700\u9577\u5c04\u6bba\u8ddd\u96e2\u3068\u76ee\u7684\u5909\u6570\ndf_train.plot(x='winPlacePerc',y='longestKill', kind='scatter', figsize = (8,6))","21ec7651":"# \u5012\u3057\u305f\u6570\u3068\u76ee\u7684\u5909\u6570\ndf_train.plot(x='winPlacePerc',y='kills', kind='scatter', figsize = (8,6))","ffafa82e":"headshot = df_train[['kills', 'winPlacePerc', 'headshotKills']]\nheadshot['headshotrate'] = headshot['headshotKills'] \/ headshot['kills']\nheadshot.corr() # \u76f8\u95a2\u3092\u78ba\u8a8d","325e4f18":"df_train['headshotrate'] = df_train['headshotKills']\/df_train['kills']\ndf_test['headshotrate'] = df_test['headshotKills']\/df_test['kills']\ndel headshot # \u30e1\u30e2\u30ea\u89e3\u653e","c2e1855f":"killStreak = df_train[['kills','winPlacePerc','killStreaks']]\nkillStreak['killStreakrate'] = killStreak['killStreaks']\/killStreak['kills']\nkillStreak.corr() # \u76f8\u95a2\u3092\u78ba\u8a8d","b27a9196":"df_train['killStreakrate'] = -(df_train['killStreaks'] \/ df_train['kills'])\ndf_test['killStreakrate'] = -(df_test['killStreaks'] \/ df_test['kills'])\ndel killStreak # \u30e1\u30e2\u30ea\u89e3\u653e","245a9655":"# \u30cf\u30c3\u30ab\u30fc\u30dd\u30a4\u30f3\u30c8\u306e\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\ndf_train['hacker_pt'] = 0\ndf_test['hacker_pt'] = 0","264fd214":"# pandas\u306e\u6700\u5927\u8868\u793a\u5217\u6570\u3092\u5e83\u3052\u3066\u304a\u304f\uff08\u3053\u3053\u3067\u306f50\u5217\u3092\u6307\u5b9a\uff09\npd.set_option('display.max_columns', 50)","be039070":"df_train['total_Distance'] = df_train['rideDistance'] +df_train['walkDistance'] + df_train['swimDistance']\ndf_test['total_Distance'] = df_test['rideDistance'] + df_test['walkDistance'] + df_test['swimDistance']\n# \u7dcf\u79fb\u52d5\u8ddd\u96e2\u304c100m\u672a\u6e80\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u8868\u793a\ndf_train[(df_train['winPlacePerc'] == 1) & (df_train['total_Distance'] < 100)].head()","7f7aab57":"df_train['headshotrate'] = df_train['headshotrate'].fillna(0)\ndf_train['killStreakrate'] = df_train['killStreakrate'].fillna(0)\ndf_test['headshotrate'] = df_test['headshotrate'].fillna(0)\ndf_test['killStreakrate'] = df_test['killStreakrate'].fillna(0)\n# df_train.isnull().sum()","913e20c2":"# \u4e0a\u4f4d\u30d7\u30ec\u30a4\u30e4\u30fc\u304b\u3064\u79fb\u52d5\u8ddd\u96e2\u304c\u5c11\u306a\u3044\u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u57fa\u672c\u7d71\u8a08\u91cf\u3092\u8868\u793a\ndf_train[(df_train['winPlacePerc'] == 1) & (df_train['total_Distance'] < 100)].describe()","8a8ce0d3":"df_train['hacker_pt'][(df_train['heals'] + df_train['boosts'] < 1) & (df_train['total_Distance'] < 100) & (df_train['kills'] > 20)] = 1\ndf_test['hacker_pt'][(df_test['heals'] + df_test['boosts'] < 1) & (df_test['total_Distance'] < 100) & (df_test['kills'] > 20)] = 1","3ad54568":"df_train[(df_train['kills'] > 10) &(df_train['weaponsAcquired'] >= 10) & (df_train['total_Distance'] == 0)].describe()","327d1f8c":"df_train['hacker_pt'][(df_train['kills'] > 10) &(df_train['weaponsAcquired'] >= 10) & (df_train['total_Distance'] == 0)] += 1\ndf_test['hacker_pt'][(df_test['kills'] > 10) &(df_test['weaponsAcquired'] >= 10) & (df_test['total_Distance'] == 0)] += 1","0c94ed84":"df_train[df_train['longestKill'] >= 1000].describe()","41eb3607":"df_train['hacker_pt'][df_train['longestKill'] >= 1000] += 1\ndf_test['hacker_pt'][df_train['longestKill'] >= 1000] += 1","d483900b":"kills = df_train[['assists','winPlacePerc','kills']]\nkills['kills_assists'] = (kills['kills'] + kills['assists'])\nkills.corr()","0e5a3a20":"df_train['kills_assists'] = df_train['kills'] + df_train['assists']\ndf_test['kills_assists'] = df_test['kills'] + df_test['assists']\ndel kills","a22b5c4f":"import gc\ndf_train = reduce_mem_usage(df_train)\ndf_test = reduce_mem_usage(df_test)\ngc.collect()","87f7337c":"# \u30e1\u30e2\u30ea\u98df\u3063\u3066\u308b\u5909\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\nimport sys\nprint(\"{}{: >25}{}{: >10}{}\".format('|','Variable Name','|','Memory','|'))\nprint(\" ------------------------------------ \")\nfor var_name in dir():\n    if not var_name.startswith(\"_\") and sys.getsizeof(eval(var_name)) > 1000: #\u3053\u3053\u3060\u3051\u30a2\u30ec\u30f3\u30b8\n        print(\"{}{: >25}{}{: >10}{}\".format('|',var_name,'|',sys.getsizeof(eval(var_name)),'|'))","48341c64":"# \u4e0d\u8981\u306a\u5909\u6570\u306f\u524a\u9664\u3059\u308b\ndel missing_data\ndel percent\ndel total\ngc.collect()","9a2b3f90":"# \u30de\u30c3\u30c1ID, \u30b0\u30eb\u30fc\u30d7ID\u3054\u3068\u306e\u30b5\u30a4\u30ba\u3092\u7b97\u51fa\ndf_train_size = df_train.groupby(['matchId','groupId']).size().reset_index(name='group_size')\ndf_test_size = df_test.groupby(['matchId','groupId']).size().reset_index(name='group_size')","c587a221":"# \u30de\u30c3\u30c1ID, \u30b0\u30eb\u30fc\u30d7ID\u3054\u3068\u306e\u5e73\u5747\u5024\u3092\u7b97\u51fa\ndf_train_mean = df_train.groupby(['matchId','groupId']).mean().reset_index()\ndf_test_mean = df_test.groupby(['matchId','groupId']).mean().reset_index()","81cfe2ce":"# \u30de\u30c3\u30c1ID\u3054\u3068\u306e\u5e73\u5747\u5024\u3092\u7b97\u51fa\ndf_train_match_mean = df_train.groupby(['matchId']).mean().reset_index()\ndf_test_match_mean = df_test.groupby(['matchId']).mean().reset_index()","981c4a85":"# \u30c7\u30fc\u30bf\u306e\u30de\u30fc\u30b8\ndf_train = pd.merge(df_train, df_train_size, how='left', on=['matchId', 'groupId'])\ndf_test = pd.merge(df_test, df_test_size, how='left', on=['matchId', 'groupId'])\ndel df_train_size\ndel df_test_size\n\ndf_train = pd.merge(df_train, df_train_mean, suffixes=[\"\", \"_mean\"], how='left', on=['matchId', 'groupId'])\ndf_test = pd.merge(df_test, df_test_mean, suffixes=[\"\", \"_mean\"], how='left', on=['matchId', 'groupId'])\ndel df_train_mean\ndel df_test_mean\n\ndf_train = pd.merge(df_train, df_train_match_mean, suffixes=[\"\", \"_match_mean\"], how='left', on=['matchId'])\ndf_test = pd.merge(df_test, df_test_match_mean, suffixes=[\"\", \"_match_mean\"], how='left', on=['matchId'])\ndel df_train_match_mean\ndel df_test_match_mean","4e9815b2":"# \u30e1\u30e2\u30ea\u7ba1\u7406\ndf_train = reduce_mem_usage(df_train)\ndf_test = reduce_mem_usage(df_test)\ngc.collect()","7a1a299e":"# \u5b66\u7fd2\u306b\u4f7f\u7528\u3059\u308b\u30ab\u30e9\u30e0\u306e\u9078\u629e\ntrain_columns = list(df_test.columns)\n\ntrain_idx = df_train.Id\ntest_idx = df_test.Id\n\n# \u5b66\u7fd2\u306b\u4f7f\u7528\u3057\u306a\u3044\u30ab\u30e9\u30e0\u306e\u524a\u9664\ntrain_columns.remove(\"Id\")\ntrain_columns.remove(\"matchId\")\ntrain_columns.remove(\"groupId\")","9bd77018":"# \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u5272\nx_train = df_train[train_columns]\nx_test = df_test[train_columns]\ny_train = df_train[\"winPlacePerc\"].astype('float')","10c24452":"# \u78ba\u8a8d\nx_train.head()","4e77ca71":"encoded_train = pd.get_dummies(x_train.matchType, prefix=x_train.matchType.name ,prefix_sep=\"_\")\nencoded_test = pd.get_dummies(x_test.matchType, prefix=x_test.matchType.name ,prefix_sep=\"_\")\nencoded_train.head()","5c415074":"# \u30de\u30fc\u30b8\nx_train = x_train.merge(encoded_train, right_index=True, left_index=True)\nx_test = x_test.merge(encoded_test, right_index=True, left_index=True)","bea0f132":"# \u78ba\u8a8d\nx_train.head()","e868a412":"# \u524a\u9664\ndel x_train['matchType']\ndel x_test['matchType']","e58cf2f4":"# \u30e1\u30e2\u30ea\u7ba1\u7406\ndel df_train\ndel df_test\ngc.collect()","83bdbe43":"# LightGBM\nfolds = KFold(n_splits=3,random_state=6)\noof_preds = np.zeros(x_train.shape[0])\nsub_preds = np.zeros(x_test.shape[0])\n\nstart = time.time()\nvalid_score = 0\nimportances = pd.DataFrame()\n\nfor n_fold, (trn_idx, val_idx) in enumerate(folds.split(x_train, y_train)):\n    trn_x, trn_y = x_train.iloc[trn_idx], y_train[trn_idx]\n    val_x, val_y = x_train.iloc[val_idx], y_train[val_idx]    \n    \n    train_data = lgb.Dataset(data=trn_x, label=trn_y)\n    valid_data = lgb.Dataset(data=val_x, label=val_y)\n    \n    params = {\"objective\" : \"regression\", \n              \"metric\" : \"mae\", \n              'n_estimators':10000, \n              'early_stopping_rounds':100,\n              \"num_leaves\" : 30, \n              \"learning_rate\" : 0.3, \n              \"bagging_fraction\" : 0.9,\n              \"bagging_seed\" : 0}\n    \n    lgb_model = lgb.train(params, train_data, valid_sets=[train_data, valid_data], verbose_eval=1000) \n\n    #imp_df = pd.DataFrame()\n    #imp_df['feature'] = train_columns\n    #imp_df['gain'] = lgb_model.booster_.feature_importance(importance_type='gain')\n    \n    #imp_df['fold'] = fold_ + 1\n    #importances = pd.concat([importances, imp_df], axis=0, sort=False)    \n    \n    oof_preds[val_idx] = lgb_model.predict(val_x, num_iteration=lgb_model.best_iteration)\n    oof_preds[oof_preds>1] = 1\n    oof_preds[oof_preds<0] = 0\n    sub_pred = lgb_model.predict(x_test, num_iteration=lgb_model.best_iteration) \/ folds.n_splits\n    sub_pred[sub_pred>1] = 1 # should be greater or equal to 1\n    sub_pred[sub_pred<0] = 0 \n    sub_preds += sub_pred\n    print('Fold %2d RMSE : %.6f' % (n_fold + 1, mean_absolute_error(val_y, oof_preds[val_idx])))\n    valid_score += mean_absolute_error(val_y, oof_preds[val_idx])","932583b5":"print('Done')","0b643676":"test_pred = pd.DataFrame({\"Id\":test_idx})\ntest_pred[\"winPlacePerc\"] = sub_preds\ntest_pred.columns = [\"Id\", \"winPlacePerc\"]\ntest_pred.to_csv(\"lgb_model_181204.csv\", index=False) # submission","a0d499a7":"## 3.2. \u5b66\u7fd2","2082ab6e":"## \u30e1\u30e2\u30ea\u7ba1\u7406\n\n\u3053\u306e\u8fba\u3067\u30e1\u30e2\u30ea\u306e\u958b\u653e\u3092\u884c\u3046","884430b3":"## 2.3.4. \u30c1\u30fc\u30bf\u30fc\u691c\u7d22\u305d\u306e3\uff081000m\u4ee5\u4e0a\u96e2\u308c\u3066\u3044\u308b\u6575\u3092kill\u3057\u3066\u3044\u308b\uff09\nPUBG\u306f1000\u30e1\u30fc\u30c8\u30eb\u4ee5\u4e0a\u96e2\u308c\u3066\u3044\u308b\u6575\u3092\u6bba\u3059\u3053\u3068\u306f\u4e0d\u53ef\u80fd\u306e\u3088\u3046\u3060\u3002  \n\u307e\u3055\u304b\u305d\u3093\u306a\u30d7\u30ec\u30a4\u30e4\u30fc\u3044\u306a\u3044\u3068\u601d\u3046\u304c\u3001\u78ba\u8a8d\u3057\u3066\u307f\u3088\u3046\u3002  \n\uff08\u305d\u3046\u3044\u3048\u3070\u3001\u6700\u9577\u5c04\u6bba\u8ddd\u96e2\u3068\u76ee\u7684\u5909\u6570\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8868\u793a\u3057\u305f\u3068\u304d\u3001\u3061\u3089\u307b\u3089\u3044\u305f\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u30fb\u30fb\u30fb\uff09  ","b8f9f5e0":"# 3. LightGBM","1734120c":"\u8ca0\u306e\u76f8\u95a2\u3067\u306f\u3042\u308b\u304c\u3001killsteaks\u3088\u308a\u3082\u82e5\u5e72\u5f37\u3044\u76f8\u95a2\u304c\u898b\u3089\u308c\u308b\u3002  \n\u3053\u3061\u3089\u3082\u7279\u5fb4\u91cf\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b\u3002","da5f4c50":"### 2.3.3. \u30c1\u30fc\u30bf\u30fc\u691c\u7d22\u305d\u306e2\uff08\u79fb\u52d5\u3057\u3066\u3044\u306a\u3044\u306e\u306b\u6b66\u5668\u3092\u62fe\u3048\u3066\u3044\u308b\uff09\n\u79fb\u52d5\u3057\u3066\u3044\u306a\u3044\u306e\u306b\u6b66\u5668\u3092\u4e00\u5b9a\u6570\u53d6\u5f97\u3057\u3066\u304a\u308a\u3001\u304b\u3064\u6575\u3082\u5012\u305b\u3066\u3044\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u57fa\u672c\u7d71\u8a08\u91cf\u3092\u8868\u793a\u3057\u3066\u307f\u308b","2eedb153":"\u3053\u308c\u306f\u7d0d\u5f97\u306e\u7d50\u679c\u3060\u3002  ","b726099d":"\u57fa\u672c\u7d71\u8a08\u91cf\u304b\u3089\u3082\u5206\u304b\u308b\u3088\u3046\u306b\u3001\u307b\u3069\u3093\u3069\u79fb\u52d5\u3057\u3066\u3044\u306a\u3044\u30d7\u30ec\u30a4\u30e4\u30fc\u306f\u30d6\u30fc\u30b9\u30c8\u3082\u56de\u5fa9\u30a2\u30a4\u30c6\u30e0\u3082\u307b\u3068\u3093\u3069\u4f7f\u7528\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u5206\u304b\u308b\u3002   \n\u307e\u305f\u3001\u597d\u6226\u7684\u306b\u30d0\u30c8\u30eb\u3057\u3066\u3044\u308c\u3070\u4e0a\u7d1a\u8005\u3067\u3082\u88ab\u5f3e\u306f\u907f\u3051\u3089\u308c\u306a\u3044\u3067\u3042\u308d\u3046\u3002  \n\u3088\u3063\u3066\u3001\u56de\u5fa9\u30a2\u30a4\u30c6\u30e0\u3092\u5c11\u306a\u304f\u3068\u30821\u56de\u306f\u4f7f\u7528\u3059\u308b\u306f\u305a\u3060\u3002  \n\u3057\u305f\u304c\u3063\u3066\u3001\u4e0b\u8a18\u6761\u4ef6\u3092\u5168\u3066\u6e80\u305f\u3059\u30d7\u30ec\u30a4\u30e4\u30fc\u306f\u30c1\u30fc\u30bf\u30fc\u306e\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3057\u3066\u3001\u30cf\u30c3\u30ab\u30fc\u30dd\u30a4\u30f3\u30c8\u3092\u4ed8\u4e0e\u3059\u308b\u3002  \n\n- \u56de\u5fa9\u30a2\u30a4\u30c6\u30e0\u3068boost\u30a2\u30a4\u30c6\u30e0\u306e\u4f7f\u7528\u304c0\n- \u7dcf\u79fb\u52d5\u8ddd\u96e2\u304c100\u672a\u6e80\n- \u5012\u3057\u305f\u6575\u306e\u6570\u304c20\u3088\u308a\u591a\u3044","ab55c51e":"## 1.1. \u6b20\u640d\u5024\u306e\u78ba\u8a8d\n\n\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b","9e92e859":"# \u30e1\u30e2\u30ea\u3092\u52b9\u7387\u7684\u306b\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9","4eae8d71":"\u62fe\u3063\u305f\u6b66\u5668\u306e\u6570\u306b\u95a2\u3057\u3066\u306f\u3001\u9806\u4f4d\u306e\u4f4e\u3044\u30d7\u30ec\u30a4\u30e4\u30fc\u3082\u3042\u308b\u7a0b\u5ea6\u9ad8\u3044\u3053\u3068\u304c\u5206\u304b\u308b\u3002  \n\u305f\u304f\u3055\u3093\u62fe\u3046\u304c\u3001\u5168\u7136\u52dd\u3066\u306a\u3044\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u4e00\u5b9a\u6570\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3060\u3002  \n\u306a\u3093\u3068\u3082\u60b2\u3057\u3044\u3002  ","c8664d66":"## 2.3. \u30c1\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u63a2\u3059","a640df87":"\u30c7\u30fc\u30bf\u3092\u898b\u3066\u307f\u308b\u3068\u3001\u4e00\u4eba\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u306ewinPlacePerc\u306e\u5f71\u97ff\u3067\u3001\u7bb1\u3072\u3052\u56f3\u304c\u4e0a\u8a18\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u3002\uff08Id=d16b329d5ea64f\uff09\n\n\u3053\u3053\u3067\u6ce8\u76ee\u3057\u3066\u307b\u3057\u3044\u306e\u304c\u3001Id=5b7d6f8755297b\u306e\u30c7\u30fc\u30bf\u3067\u3042\u308b\u3002  \nkills\u306e\u5024\u304c0\u306a\u306e\u3067\u3001\u8ab0\u3082\u5012\u3057\u3066\u3044\u306a\u3044\u306e\u306b\u3082\u95a2\u308f\u3089\u305a\u3001winPlacePerc\u304c0.915039\u3068\u306a\u3063\u3066\u3044\u308b\u3002\u602a\u3057\u3044\u3002\n\n\u3053\u308c\u306f\u30c1\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u3044\u308b\u304b\u3001\u3082\u3057\u304f\u306f\u30c7\u30fc\u30bf\u306b\u6b20\u9665\u304c\u3042\u308a\u305d\u3046\u3060\u3002  \n\u3053\u306e\u8fba\u308a\u306e\u306f\u5f8c\u534a\u306e\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3067\u6271\u3063\u3066\u307f\u308b\u305f\u3081\u3001\u4eca\u306f\u653e\u7f6e\u3002","2d620389":"\u4e0a\u8a18\u3088\u308a\u3001assists\u3084kills\u3088\u308a\u76f8\u95a2\u4fc2\u6570\u304c\u9ad8\u3044\u7279\u5fb4\u91cf\u304c\u4f5c\u6210\u3067\u304d\u305f\u305f\u3081\u3001\u65b0\u3057\u304f\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u3059\u308b\u3002","82435040":"### 2.3.1. \u30c1\u30fc\u30bf\u30fc\u3092\u63a2\u3059\u305f\u3081\u306e\u524d\u6e96\u5099\n\n\u7dcf\u79fb\u52d5\u8ddd\u96e2\uff08\u30a6\u30a9\u30fc\u30af\u3001\u30b9\u30a4\u30e0\u3001\u30c9\u30e9\u30a4\u30d6\uff09\u3092\u7b97\u51fa\u3057\u3001\u79fb\u52d5\u8ddd\u96e2\u304c\u77ed\u3044\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u4e0a\u4f4d\u30e9\u30f3\u30af\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u8868\u793a\u3057\u3066\u307f\u308b","78df3678":"## 2.4. kill\u6570\u3068\u30a2\u30b7\u30b9\u30c8\u6570\n\nkill\u6570\u3068\u30a2\u30b7\u30b9\u30c8\u6570\u3092\u5408\u308f\u305b\u305f\u7279\u5fb4\u91cf\u306f\u3069\u3046\u3060\u308d\u3046","0d8ec6d2":"\u307e\u305f\u3001\u4e0a\u7d1a\u30d7\u30ec\u30a4\u30e4\u30fc\u3060\u3068\u3057\u3066\u3082\u3001\u540c\u3058\u8a66\u5408\uff08\u30b2\u30fc\u30e0\uff09\u306b\u3055\u3089\u306b\u4e0a\u7d1a\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u3044\u305f\u5834\u5408\u3001\u76f8\u5bfe\u7684\u306b\u30b9\u30b3\u30a2\u304c\u4e0b\u304c\u3063\u3066\u3057\u307e\u3046\u3068\u601d\u308f\u308c\u308b\u3002  \n\u305d\u308c\u3092\u52a0\u5473\u3057\u3001\u8a66\u5408\uff08\u30de\u30c3\u30c1ID\uff09\u6bce\u306e\u7279\u5fb4\u91cf\u3082\u8ffd\u52a0\u3059\u308b\u3002","6a759510":"\u4e0a\u8a18\u3088\u308a\u3001\u76f8\u95a2\u304c\u6700\u3082\u5f37\u3044\u3082\u306e\u306f**\u5f92\u6b69\u3067\u306e\u79fb\u52d5\u8ddd\u96e2**\u3068\u3044\u3046\u3053\u3068\u304c\u5206\u304b\u308b\n\n\u305f\u304f\u3055\u3093\u6b69\u3044\u3066\u3044\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u307b\u3069\u3001\u9ad8\u3044\u30e9\u30f3\u30af\u306b\u306a\u3063\u3066\u3044\u308b\u50be\u5411\u304c\u3042\u308a\u305d\u3046","f02d7e1f":"## 2.2. \u9023\u7d9aKill\u306e\u78ba\u7387\n\u3053\u3061\u3089\u3082\u4e0a\u8a18\u540c\u69d8\u306e\u7406\u7531\u3067\u3001\u7279\u5fb4\u91cf\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b\u4fa1\u5024\u304c\u3042\u308b\u304b\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002","027468e0":"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u306f\u6b20\u640d\u5024\u306f\u306a\u3055\u305d\u3046\n\n\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306f\uff11\u4ef6\u3060\u3063\u305f\u305f\u3081\u3001\u4eca\u56de\u306f\u5bfe\u8c61\u30c7\u30fc\u30bf\u306f\u524a\u9664\u3059\u308b","16e4e2a2":"\u4e0a\u8a18\u3067\u751f\u6210\u3057\u305fencoded\u3092\u30de\u30fc\u30b8\u3057\u3001\u5143\u3005\u3042\u3063\u305fmatchType\u3092\u524a\u9664\u3059\u308b\u3002","4e580071":"## 3.1. \u524d\u51e6\u7406","d749b2dc":"\u3053\u3061\u3089\u3082\u76f8\u95a2\u306f\u898b\u3089\u308c\u308b\u3082\u306e\u306e\u3001\u305f\u304f\u3055\u3093\u5012\u3057\u305f\u304b\u3089\u3068\u3044\u3063\u3066\u9806\u4f4d\u304c\u3042\u304c\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3082\u306a\u3055\u305d\u3046\u3002","a1fee5a5":"\u3053\u3061\u3089\u3082\u3042\u308b\u7a0b\u5ea6\u76f8\u95a2\u304c\u898b\u3089\u308c\u308b\u3002","3b95f09f":"## 1.3. \u76f8\u95a2\u306e\u5f37\u3044\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u78ba\u8a8d","4a33ea51":"# 2. \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\n\n\u76f8\u95a2\u95a2\u4fc2\u304c\u5f37\u3044\u3068\u601d\u308f\u308c\u308b\u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3002","b0be24b3":"## 2.1. \u30d8\u30c3\u30c9\u30b7\u30e7\u30c3\u30c8\u306e\u78ba\u7387\n\u3053\u306e\u624b\u306e\u30b2\u30fc\u30e0\u306f\u982d\u3092\u653b\u6483\u3067\u304d\u308c\u3070\u57fa\u672c\u7684\u306b1\u767aK.O\u3067\u304d\u308b\u304c\u3001  \n\u982d\u3068\u3044\u3046\u90e8\u4f4d\u306f\u9762\u7a4d\u304c\u5c11\u306a\u3044\u305f\u3081\u3001\u9ad8\u5ea6\u306a\u30d7\u30ec\u30a4\u30e4\u30fc\u30b9\u30ad\u30eb\u304c\u5fc5\u8981\u3068\u3055\u308c\u308b\u3053\u3068\u306f\u9593\u9055\u3044\u306a\u3044\u3002  \n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u30d8\u30c3\u30c9\u30b7\u30e7\u30c3\u30c8\u306e\u78ba\u7387\u3068\u76ee\u7684\u5909\u6570\u3068\u306e\u76f8\u95a2\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002  ","f4045eb3":"`matchType`\u304c\u307e\u3060\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u307e\u307e\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u51e6\u7406\u3059\u308b","ff66089d":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","ab44db14":"winPlacePerc\u306b1\u3064\u3060\u3051\u6b20\u640d\u5024\u304c\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308b\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u95a2\u3057\u3066\u3082\u8868\u793a\u3057\u3066\u307f\u308b","60b35cac":"## 1.2. \u76ee\u7684\u5909\u6570\uff08winPlacePerc\uff09\u306b\u5bfe\u3059\u308b\u76f8\u95a2\u306e\u78ba\u8a8d\u00b6","22b730cc":"# 1. EDA","ecfdffa0":"## 2.5. \u305d\u306e\u4ed6\u306e\u7279\u5fb4\u91cf\u306e\u8ffd\u52a0\n\u30c1\u30fc\u30e0\u6226\u3067\u306f\u3001\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u3067\u306f\u540c\u3058\u5024\u3092\u3068\u308b\u7279\u5fb4\u91cf\u304c\u3042\u308b\u3002  \n\u3057\u305f\u304c\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u7279\u5fb4\u91cf\u3092\u8a08\u7b97\u3057\u3066\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u7cbe\u5ea6\u304c\u4e0a\u304c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002","4edeb02e":"203\u30d7\u30ec\u30a4\u30e4\u30fc\u3082\u3044\u308b\u30fb\u30fb\u30fb\u30fb\u3002  \n\u5168\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u30c1\u30fc\u30bf\u30fc\u3068\u3044\u3046\u8a33\u3067\u306f\u306a\u3044\u3068\u601d\u308f\u308c\u308b\u304c\u3001\u4e0b\u8a18\u6761\u4ef6\u3092\u5168\u3066\u6e80\u305f\u3059\u30d7\u30ec\u30a4\u30e4\u30fc\u306b\u3082\u30cf\u30c3\u30ab\u30fc\u30dd\u30a4\u30f3\u30c8\u3092\u4ed8\u4e0e\u3059\u308b\u3002\n\n- \u7dcf\u79fb\u52d5\u8ddd\u96e2\u304c0\n- \u62fe\u3063\u305f\u6b66\u5668\u306e\u6570\u304c10\u4ee5\u4e0a\n- \u5012\u3057\u305f\u6575\u306e\u6570\u304c10\u3088\u308a\u591a\u3044","5b09aaca":"boost\u30a2\u30a4\u30c6\u30e0\u30928\u500b\u4ee5\u4e0a\u4f7f\u7528\u3057\u3066\u3044\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u306f\u9ad8\u3044\u9806\u4f4d\u306b\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\n\u3053\u3053\u3067\u6ce8\u76ee\u3057\u305f\u3044\u306e\u304c\u3001boost\u30a2\u30a4\u30c6\u30e0\u309224\u500b\u3082\u3068\u3063\u3066\u3044\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u3044\u308b\u3053\u3068\u3060\u3002\n\u3053\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u3069\u306e\u304f\u3089\u3044\u3044\u308b\u306e\u304b\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002","086128a8":"\u3053\u3061\u3089\u3082\u3001\u56de\u5fa9\u30a2\u30a4\u30c6\u30e0\u3092\u591a\u304f\u4f7f\u3063\u3066\u3044\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u65b9\u304c\u9806\u4f4d\u304c\u9ad8\u3044\u50be\u5411\u306b\u3042\u308a\u305d\u3046\u3002","205915e6":"\u30b2\u30fc\u30e0\u306b\u30c1\u30fc\u30c8\u306f\u3064\u304d\u3082\u306e\u3060\u3002  \n\u3057\u304b\u3057\u30c7\u30fc\u30bf\u306e\u6b63\u78ba\u6027\u304c\u4e00\u756a\u5927\u5207\u306a\u6a5f\u68b0\u5b66\u7fd2\u306b\u3001\u30c1\u30fc\u30bf\u30fc\u306e\u5b58\u5728\u3068\u3046\u3082\u306e\u306f\u5510\u63da\u3052\u306b\u3064\u3044\u3066\u3044\u308b\u30d1\u30bb\u30ea\u3088\u308a\u4e0d\u8981\u306a\u3082\u306e\u3067\u3042\u308b\u3002  \n\uff08\u5168\u56fd\u306e\u30d1\u30bb\u30ea\u597d\u304d\u306e\u7686\u3055\u307e\u3001\u30d1\u30bb\u30ea\u8fb2\u5bb6\u306e\u7686\u3055\u307e\u3001\u3054\u3081\u3093\u306a\u3055\u3044\uff09\n\n\u3053\u3053\u3067\u306f\u3001\u30c1\u30fc\u30c8\u3092\u884c\u306a\u3063\u3066\u3044\u308b\u3067\u3042\u308d\u3046\u30d7\u30ec\u30a4\u30e4\u30fc\u306b\u306f\u30cf\u30c3\u30ab\u30fc\u30dd\u30a4\u30f3\u30c8\u3068\u3044\u3046\u7279\u5fb4\u91cf\u3092\u4e0e\u3048\u3066\u3044\u304f\u3053\u3068\u306b\u3059\u308b\u3002","8e9262d3":"24\u4eba\u3082\u3044\u308b\u3067\u306f\u306a\u3044\u304b\u30fb\u30fb\u30fb\u30fb  \n\u30b2\u30fc\u30e0\u306e\u4e0d\u5177\u5408\u306e\u53ef\u80fd\u6027\u3082\u3042\u308b\u304c\u3001\u4e00\u5fdc\u3053\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u9054\u306b\u3082\u30cf\u30c3\u30ab\u30fc\u30dd\u30a4\u30f3\u30c8\u3092\u4ed8\u4e0e\u3057\u3066\u304a\u304f\u3002  \n\n- \u6700\u9577\u5c04\u6bba\u8ddd\u96e2\u304c1000\u4ee5\u4e0a","a1e78174":"### 2.3.2. \u30c1\u30fc\u30bf\u30fc\u691c\u7d22\u305d\u306e1\uff08\u56de\u5fa9&\u30d6\u30fc\u30b9\u30c8\u30a2\u30a4\u30c6\u30e0\u306e\u4f7f\u7528\u304c\u6975\u7aef\u306b\u5c11\u306a\u3044\uff09","2067671b":"\u7279\u5fb4\u91cf\u3068\u3057\u3066\u8ffd\u52a0","8f008938":"\u79fb\u52d5\u8ddd\u96e2\u304c0\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u3082\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\n\u3053\u3053\u3067\u3001\u5148\u307b\u3069\u4f5c\u6210\u3057\u305f\u7279\u5fb4\u91cf\u306b\u6b20\u640d\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u306e\u3067\u30010\u3067\u57cb\u3081\u3066\u304a\u304f\u3002 \uff08headshotrate\u3068killStreakrate\uff09","a1a8b601":"\u30cf\u30c3\u30ab\u30fc\u30dd\u30a4\u30f3\u30c8\u306e\u4ed8\u4e0e\u306f\u3053\u306e\u8fba\u3067\u7d42\u4e86\u3057\u3066\u304a\u304f"}}