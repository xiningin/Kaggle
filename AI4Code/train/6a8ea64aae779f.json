{"cell_type":{"c6d5c9a7":"code","1cee8504":"code","3fd01ad9":"code","0d06b309":"code","35c16e12":"code","fbdfa872":"code","980e151a":"code","e61d4b5a":"code","64c800bb":"code","1e7ffdd7":"code","02da1bbb":"code","ee2dc1c9":"markdown","b272f379":"markdown","e92977a1":"markdown","35cd97f2":"markdown","a3cfddf3":"markdown"},"source":{"c6d5c9a7":"!pip install rapidfuzz","1cee8504":"import numpy as np\nimport pandas as pd\nfrom rapidfuzz import fuzz, process","3fd01ad9":"full_data = pd.read_csv('..\/input\/housing-prices-in-london\/London.csv')\nfull_data.tail()","0d06b309":"# Read postcode database\npostcode_db = pd.read_csv('..\/input\/great-britain-postal-codes\/postal_code_db.csv')\n\n# Read the codebook and convert into dictionary for fast lookup\ncodebook = pd.read_csv('..\/input\/great-britain-postal-codes\/codelist.csv') \\\n    .set_index('code').to_dict()['human_readable_name']\n\n# Replace each GSS code in postcode database with human-readable names\nfor col in postcode_db.columns[1:]:\n    postcode_db[col] = postcode_db[col].apply(lambda x: codebook.get(x, x))\n    \npostcode_db.sample(10)","35c16e12":"postcode_db.shape\n# 1.7 million unique postcodes. Wow.","fbdfa872":"# To optimize the subsequent operations, only include postcodes\n# that start with the same letters as unique starting letters found in the\n# house listing dataset.\n\n# Equivalently, I'm assuming the property listing never mistypes the first letter.\n\nproperty_postcode = full_data['Postal Code']\n\nstarting_letters = property_postcode.apply(lambda x: x[0]).unique()\n\nvalid_os_postcode = postcode_db['Postcode']\nvalid_os_postcode = valid_os_postcode[valid_os_postcode.apply(lambda x: x[0]).isin(starting_letters)]\nvalid_os_postcode\n# Only about 600k size reduction","980e151a":"# Let's see if all postcodes in the provided London property listing dataset\n# is correct (exists in Ordnance Survey database)\n\nproperty_postcode_wrong = ~property_postcode.isin(valid_os_postcode)\nproperty_postcode_wrong.sum()","e61d4b5a":"# 2263 wrong postal codes? HOW?!\nproperty_postcode[property_postcode_wrong]","64c800bb":"%%time\n\n# Anyway, let's go straight into fuzzymatching shall we\nprocess.extractOne('SW19 8NY', postcode_db['Postcode'], score_cutoff = 85,\n                   processor = None, scorer = fuzz.ratio)","1e7ffdd7":"%%time\nfrom tqdm import tqdm\n\ndef get_OS_postcode(p):\n    if p in postcode_db['Postcode']:\n        return p\n    elif p.replace(' ', '') in postcode_db['Postcode']:\n        return p.replace(' ', '')\n    else:\n        closest, score, idx = process.extractOne(p, postcode_db['Postcode'], score_cutoff = 50,\n                                                 processor = None, scorer = fuzz.ratio)\n        return closest\n\npostcode_rectified = pd.Series([get_OS_postcode(p) for p in tqdm(property_postcode)])\npostcode_rectified","02da1bbb":"# It is worth noting that the postcodes written in the Great Britain Postcode database\n# is NOT ALWAYS searchable through Google\/Nominatim because of difference in formatting,\n# i.e. the spacing.\n\n# Honestly I find it annoying, since now my best chance to find location information from\n# the postcode is only what's provided in Postcode database (county, district, ward)\n\n# The ward is useful for election purposes only (I guess? I'm not a Brit.)\n# The county is mostly missing for some reason.\n# Thus, the district is the only reliable location feature I can extract from postcodes.\n\nnew_data = full_data.copy()\n\nnew_data['OS compliant Postcode'] = postcode_rectified\nnew_data = new_data.merge(postcode_db.set_index('Postcode'),\n                          how='left', left_on = 'OS compliant Postcode', right_index = True)\nnew_data.to_csv('london_housing_with_OS_postcode_info.csv', index = False)\nnew_data","ee2dc1c9":"# Introduction\n\nThis notebook demonstrates how to use postcode information in London housing data by fuzzy matching it against the Postcode Database.\n\nEnjoy!","b272f379":"# End of story\n\nI hope this notebook has been useful and you learn something from it. Keep learning, happy data-sciencing!\n\nFeel free to fork and upvote if you find this notebook interesting and\/or you want to try this out yourself.","e92977a1":"# Final format: extract county, district, and ward information","35cd97f2":"# Use postcode database by fuzzy matching each house's postcode against it","a3cfddf3":"# Read postcode database"}}