{"cell_type":{"cb24243b":"code","52b4ce86":"code","7628ceae":"code","18be207f":"code","3bdaba11":"code","d8daa0fa":"code","fc12b045":"code","d7f42400":"code","835b3dc7":"code","4b1f353d":"code","bef778f4":"code","1e44de8a":"code","bddb4752":"code","961c71cf":"code","c872fd2f":"code","bc64a268":"code","22564770":"code","d5c398c2":"code","5d1956a0":"code","8709b018":"code","b0cf4585":"code","2eb0d19d":"code","14911deb":"code","e2ebe0ce":"code","ce089e17":"markdown","8ff2a140":"markdown","9e8cb2c7":"markdown","3085ee3d":"markdown","427153eb":"markdown","2324a2d6":"markdown","7d5e8d30":"markdown","a6194d59":"markdown","7a32457f":"markdown","06ae9fd7":"markdown","1da1fe6e":"markdown","c1019160":"markdown","4dfb13de":"markdown","b2858685":"markdown","bf77d782":"markdown","7737b367":"markdown","2c55a521":"markdown","ddd44b00":"markdown","9c5f761e":"markdown","2d52d284":"markdown","370450cb":"markdown","2f4bbdb1":"markdown","a9c6fa9f":"markdown","a718278d":"markdown","f9d09f46":"markdown","f43c7d93":"markdown","6b0faef4":"markdown"},"source":{"cb24243b":"import pandas as pd\n\nlotr_characters = pd.read_csv('..\/input\/lord-of-the-rings-data\/lotr_characters.csv')\nlotr_scripts = pd.read_csv('..\/input\/lord-of-the-rings-data\/lotr_scripts.csv')","52b4ce86":"lotr_characters.head()","7628ceae":"lotr_scripts.head()","18be207f":"lotr_scripts.dropna(inplace=True)","3bdaba11":"import nltk\nimport re\nfrom nltk.corpus import stopwords\n\nremove_punctuation_words = lambda x: re.sub(r'[^A-Za-z]+', ' ', x)\nremove_excess_whitespace = lambda x: x.strip()\nto_lower = lambda x: x.lower()\nremove_numbers = lambda x: re.sub(r'\\d+', '', x)\n\ndef remove_stop_words(sentence):\n    excluded = ['no','not', 'nor', 'only', 'than', 'any', 'all']\n    our_stop_words =[c for c in stopwords.words('english') if c not in excluded]\n    result = ' '.join([word for word in sentence.split() if word not in (our_stop_words)])   \n    return result\n\nlotr_scripts['dialog'] = lotr_scripts['dialog'].apply(remove_punctuation_words)\nlotr_scripts['dialog'] = lotr_scripts['dialog'].apply(remove_excess_whitespace)\nlotr_scripts['dialog'] = lotr_scripts['dialog'].apply(to_lower)\nlotr_scripts['dialog'] = lotr_scripts['dialog'].apply(remove_stop_words)\nlotr_scripts['dialog'] = lotr_scripts['dialog'].apply(remove_numbers)\n\nlotr_scripts['dialog']","d8daa0fa":"lotr_scripts['char'] = lotr_scripts['char'].replace(to_replace ='voiceover', value = '', regex=True)\nlotr_scripts['char'] = lotr_scripts['char'].replace(to_replace ='voice', value = '', regex=True)\nlotr_scripts['char'] = lotr_scripts['char'].replace(to_replace ='mouth', value = '', regex=True)\nlotr_scripts['char'] = lotr_scripts['char'].replace(to_replace ='eye', value = '', regex=True)\nlotr_scripts['char'] = lotr_scripts['char'].replace(to_replace ='argorn', value = 'aragorn', regex=True)\nlotr_scripts['char'] = lotr_scripts['char'].replace(to_replace ='gan dalf', value = 'gandalf', regex=True)\nlotr_scripts['char'] = lotr_scripts['char'].replace(to_replace ='gatekeeper', value = 'gatekeepr', regex=True)\n\nlotr_scripts['char'] = lotr_scripts['char'].apply(remove_punctuation_words)\nlotr_scripts['char'] = lotr_scripts['char'].apply(remove_excess_whitespace)\nlotr_scripts['char'] = lotr_scripts['char'].apply(to_lower)\nlotr_scripts['char'] = lotr_scripts['char'].apply(remove_stop_words)\nlotr_scripts['char'] = lotr_scripts['char'].apply(remove_numbers)\n\n# Replace synonymous names\nlotr_scripts['char'] = lotr_scripts['char'].replace(to_replace ='smeagol', value = 'gollum', regex=True)\nlotr_scripts['char'] = lotr_scripts['char'].replace(to_replace ='white wizard', value = 'gandalf', regex=True)\n\npd.unique(lotr_scripts['char'])","fc12b045":"lotr_characters.dropna(inplace=True)\n\nlotr_characters","d7f42400":"nrc = pd.read_csv('..\/input\/bing-nrc-afinn-lexicons\/NRC.csv')\nnrc.head()","835b3dc7":"# Helper stuff\ndef flatten(t):\n    return [item for sublist in t for item in sublist]\n\n# List members of the fellowship\nfellowship = ['gandalf', 'aragorn', 'frodo', 'sam', 'pippin', 'merry', 'legolas', 'gimli', 'boromir']\ntext_per_fellow = {}\n\n# Get all script lines for each member\nfor fellow in fellowship:\n    text_per_fellow[fellow] = lotr_scripts[ lotr_scripts['char'] == fellow ] \n\nwords_per_fellow = {}    \n    \n# Perform simple sentiment analysis on the text for each fellow\n# Simply count how many words of each category the hero said out loud\n\n# Get all the words for each fellow\nfor fellow in text_per_fellow:\n    text = text_per_fellow[fellow]['dialog']\n    words = [ word.split() for word in text ]\n    words_per_fellow[fellow] = flatten(words)\n\n# Count occurenes for each NRC category    \n# NOTE!: Single words can belong to multiple categories\n\n# Get all unqiue categories\nsentiment_categories = pd.unique(nrc['sentiment'])\nsentiments_per_fellow = {}\n\n# Count occurenes for each NRC category for each fellow\nfor fellow in fellowship:\n    words = words_per_fellow[fellow]\n    sentiments_per_fellow[fellow] = {}\n    \n    for word in words:\n        sentiments_for_word = nrc[nrc['word'] == word]['sentiment']  \n        if len(sentiments_for_word) > 1:\n              for sentiment in sentiments_for_word:\n                    if sentiment in sentiments_per_fellow[fellow]:\n                         sentiments_per_fellow[fellow][sentiment] += 1\n                    else:\n                         sentiments_per_fellow[fellow][sentiment] = 0\n\n'Sentiment analysis for fellowship is done!'                     ","4b1f353d":"# Get the number of negative words spoken by each person\nwords_per_fellow = []\nfor fellow in sentiments_per_fellow:\n    item = (fellow, sentiments_per_fellow[fellow]['negative'])\n    words_per_fellow.append(item)\n\n# Sort this\nwords_per_fellow.sort(key = lambda item: item[1], reverse=True)\n    \n# Visualisation!\nimport matplotlib.pyplot as plt\n\nvalues = list(map(lambda item: item[1], words_per_fellow))\nnames = list(map(lambda item: item[0], words_per_fellow))\n\nplt.figure(figsize=(27, 9))\n\nplt.plot()\nplt.bar(names, values, color='red')\nplt.suptitle('Negative words per fellow')\nplt.show()\n\nf'Looks that \"{names[0]}\" is the most negative character!!'","bef778f4":"average_negative_fellows = {}\n\nfor fellow in fellowship:\n    sentiment_categories\n    words = sentiments_per_fellow[fellow]\n    \n    # Count all spoken words with emotion\n    _sum = 0\n    for sentiment in sentiment_categories:\n        _sum += words[sentiment]\n    \n    average = words['negative'] \/ _sum\n    \n    average_negative_fellows[fellow] = average","1e44de8a":"average_negative_fellows = list(average_negative_fellows.items())\n\n# Sort this\naverage_negative_fellows.sort(key = lambda item: item[1], reverse=True)\n    \n# Visualisation!\nimport matplotlib.pyplot as plt\n\nvalues = list(map(lambda item: item[1], average_negative_fellows))\nnames = list(map(lambda item: item[0], average_negative_fellows))\n\nplt.figure(figsize=(27, 9))\n\nplt.plot()\nplt.bar(names, values, color='red')\nplt.suptitle('')\nplt.show()\n\nf'Looks that {names[0]} is the most negative fellow!!'","bddb4752":"import numpy as np\nimport matplotlib.pyplot as plt\n\ndef get_words_having_emotion(emotion):\n    assert type(emotion) == str\n    words_per_fellow = {}\n    for fellow in sentiments_per_fellow:\n        words_per_fellow[fellow] = sentiments_per_fellow[fellow][emotion]\n    return words_per_fellow\n                \npositive_words_per_fellow = get_words_having_emotion('positive')\nnegative_words_per_fellow = get_words_having_emotion('negative')\n\n# Data preparation\ndata = []\nfor fellow in fellowship:\n    positive_words = positive_words_per_fellow[fellow]\n    negative_words = negative_words_per_fellow[fellow]\n    \n    item = [negative_words, positive_words]\n    \n    data.append(item)\n    \n# Visualise\nfig = plt.figure(figsize=(27, 9))\nX = np.arange(len(fellowship))\nax = fig.add_axes([0,0,1,1])\nplt.xticks(X, fellowship)    \n\nfor i in range(len(fellowship)):\n    x = i \n    \n    # S\u0142owa o danej czesze\n    neg = data[i][0]\n    pos = data[i][1]\n    \n    ax.bar(x, neg, color = 'r', width = 0.25)\n    ax.bar(x + 0.25, pos, color = 'g', width = 0.25)\n    ax.legend(labels=['Negative', 'Positive'])","961c71cf":"# If race is not mentioned, then we drop the data\ncharacter_races = lotr_characters[['race', 'name']].copy()\n\n# to lower, we add 'char' column to merge with the script\ncharacter_races['race'] = character_races['race'].apply(to_lower)\ncharacter_races['char'] = character_races['name'].apply(to_lower)\n\ncharacter_races['char']\n\ncharater_in_characters = pd.unique(character_races['char'])\ncharacters_in_script = pd.unique(lotr_scripts['char'])\n\ncharacter_of_known_races = set(characters_in_script).intersection(charater_in_characters)\n\ncharacter_of_known_races","c872fd2f":"characters_in_script = pd.unique(lotr_scripts['char'])\ncharacters_in_script\n\ncharacters = [\n'deagol',\n'smeagol',\n'gollum',\n'frodo',\n'merry',\n'gimli',\n'sam',\n'gandalf',\n'aragorn',\n'pippin',\n'hobbit',\n'rosie',\n'bilbo',\n'treebeard',\n'saruman',\n'theoden',\n'galadril',\n'elrond',\n'grima',\n'witch king',\n'eowyn',\n'faramir',\n'orc',\n'soldiers gate',\n'gothmog',\n'general',\n'captain',\n'soldier',\n'sauron',\n'eomer',\n'army',\n'boson',\n'mercenary',\n'eowyn merry',\n'denethor',\n'rohirrim',\n'galadriel',\n'legolas',\n'king dead',\n'grimbold',\n'irolas',\n'orcs',\n'gamling',\n'madril',\n'damrod',\n'soldiers',\n'soldiers minas tirith',\n'woman',\n'haldir',\n'old man',\n'boromir',\n'crowd',\n'arwen',\n'hama',\n'sharku',\n'people',\n'lady',\n'freda',\n'morwen',\n'rohan stableman',\n'gorbag',\n'ugluk',\n'shagrat',\n'uruk hai',\n'snaga',\n'grishnakh',\n'merry pippin',\n'wildman',\n'strider',\n'eothain',\n'rohan horseman',\n'farmer maggot',\n'white wizard',\n'gaffer',\n'noakes',\n'sandyman',\n'figwit',\n'general shout',\n'grishnak',\n'mrs bracegirdle',\n'proudfoot hobbit',\n'gatekeepr',\n'man',\n'children hobbits',\n'barliman',\n'ring',\n'men']\n\nraces = [\n'stoor' ,\n'stoor',\n'stoor',\n'hobbit',\n'hobbit',\n'dwarf',\n'hobbit',\n'maia',\n'human',\n'hobbit',\n'hobbit',\n'hobbit',\n'hobbit',\n'ent',\n'maia',\n'human',\n'elf',\n'elf',\n'human',\n'ringwraith',\n'human',\n'human',\n'orc',\n'human',\n'orc',\n'orc',\n'human',\n'human',\n'maia' ,\n'human',\n'human',\n'boson',\n'human',\n'human',\n'human',\n'human',\n'elf',\n'elf',\n'ringwraith',\n'human',\n'elf',\n'orc',\n'human' ,\n'human',\n'human',\n'human',\n'human',\n'human',\n'elf',\n'human',\n'human',\n'human',\n'elf',\n'human',\n'orc',\n'human',\n'human',\n'human',\n'human',\n'human',\n'orc',\n'orc',\n'orc',\n'orc',\n'orc',\n'orc',\n'hobbit' ,\n'human',\n'human',\n'human',\n'human',\n'human',\n'maia',\n'hobbit',\n'hobbit',\n'hobbit',\n'elf',\n'human',\n'orc',\n'hobbit',\n'hobbit',\n'human',\n'human',\n'hobbit' ,\n'human',\n'ringwraith',\n'human']\n\ndata = {'char': characters, 'race': races}\ncharacter_races = pd.DataFrame(data)\n\ncharacter_races","bc64a268":"lotr_scripts = lotr_scripts.join(character_races.set_index('char'), on='char')\nlotr_scripts","22564770":"# Helper stuff\ndef flatten(t):\n    return [item for sublist in t for item in sublist]\n\ntext_per_race = {}\n\n# We need only unique races \nraces = pd.unique(races)\n\n# Get all script lines for each race\nfor race in races:\n    text_per_race[race] = lotr_scripts[ lotr_scripts['race'] == race ] \n\nwords_per_race = {}    \n    \n# Perform simple sentiment analysis on the text for each race\n# Simply count how many words of each category the hero said out loud\n\n# Get all the words for each fellow\nfor race in text_per_race:\n    text = text_per_race[race]['dialog']\n    words = [ word.split() for word in text ]\n    words_per_race[race] = flatten(words)\n    \n# Count occurenes for each NRC category    \n# NOTE!: Single words can belong to multiple categories\n\n# Get all unqiue categories\nsentiment_categories = pd.unique(nrc['sentiment'])\nsentiments_per_race = {}\n\n# Count occurenes for each NRC category for each fellow\nfor race in races:\n    words = words_per_race[race]\n    sentiments_per_race[race] = {}\n        \n    for word in words:\n        sentiments_for_word = nrc[nrc['word'] == word]['sentiment']  \n        if len(sentiments_for_word) > 1:\n              for sentiment in sentiments_for_word:\n                    if sentiment in sentiments_per_race[race]:\n                         sentiments_per_race[race][sentiment] += 1\n                    else:\n                         sentiments_per_race[race][sentiment] = 0\n\n'Sentiment analysis aggression is done!'\n\nsentiments_per_race","d5c398c2":"# Get the number of angry words spoken by each race\nangry_words_per_race = []\nfor race in sentiments_per_race:\n    item = (race, sentiments_per_race[race]['anger'])\n    angry_words_per_race.append(item)\n\n# Sort this\nangry_words_per_race.sort(key = lambda item: item[1], reverse=True)\n    \n# Visualisation!\nimport matplotlib.pyplot as plt\n\nvalues = list(map(lambda item: item[1], angry_words_per_race))\nnames = list(map(lambda item: item[0], angry_words_per_race))\n\nplt.figure(figsize=(27, 9))\n\nplt.plot()\nplt.bar(names, values, color='red')\nplt.suptitle('Angry words per race')\nplt.show()\n\nf'Looks that \"{names[0]}\" is the most angry race!!'","5d1956a0":"average_angry_words = {}\n\nfor race in races:\n    _sum = sentiments_per_race[race]['anger']\n\n    # count all members of the race\n    members = pd.unique(lotr_scripts[ lotr_scripts['race'] == race ]['char'])\n    \n    member_number = len(members)\n        \n    avrg = _sum \/ member_number\n    average_angry_words[race] = avrg\n        \naverage_angry_words    ","8709b018":"# Get the number of angry words spoken by each race\naverage_angry_words_per_race = []\nfor race in average_angry_words:\n    item = (race, average_angry_words[race])\n    average_angry_words_per_race.append(item)\n\n# Sort this\naverage_angry_words_per_race.sort(key = lambda item: item[1], reverse=True)\n    \n# Visualisation!\nimport matplotlib.pyplot as plt\n\nvalues = list(map(lambda item: item[1], average_angry_words_per_race))\nnames = list(map(lambda item: item[0], average_angry_words_per_race))\n\nplt.figure(figsize=(27, 9))\n\nplt.plot()\nplt.bar(names, values, color='red')\nplt.suptitle('Average angry words')\nplt.show()\n\nf'Looks that \"{names[0]}\" is the most angry race!!'","b0cf4585":"# Get the number of angry words spoken by each race\npositive_words_per_race = []\nfor race in [\"human\", \"hobbit\"]:\n    item = (race, sentiments_per_race[race]['positive'])\n    positive_words_per_race.append(item)\n    \n# Sort this\npositive_words_per_race.sort(key = lambda item: item[1], reverse=True)\n\n# Visualisation!\nimport matplotlib.pyplot as plt\n\nvalues = list(map(lambda item: item[1], positive_words_per_race))\nnames = list(map(lambda item: item[0], positive_words_per_race))\n\nplt.figure(figsize=(27, 9))\n\nplt.plot()\nplt.bar(names, values, color='blue')\nplt.suptitle('Positive words per race')\nplt.show()\n\nf'Looks that \"{names[0]}\" is the most positive race!!'","2eb0d19d":"average_pos_words = {}\n\nfor race in ['human', 'hobbit']:\n    _sum = sentiments_per_race[race]['positive']\n\n    # count all members of the race\n    members = pd.unique(lotr_scripts[ lotr_scripts['race'] == race ]['char'])\n    \n    member_number = len(members)\n        \n    avrg = _sum \/ member_number\n    average_pos_words[race] = avrg\n        \naverage_pos_words    ","14911deb":"arr = []\nfor race in average_pos_words:\n    item = (race, average_pos_words[race])\n    arr.append(item)\n\n# Sort this\narr.sort(key = lambda item: item[1], reverse=True)\n    \n# Visualisation!\nimport matplotlib.pyplot as plt\n\nvalues = list(map(lambda item: item[1], arr))\nnames = list(map(lambda item: item[0], arr))\n\nplt.figure(figsize=(27, 9))\n\nplt.plot()\nplt.bar(names, values, color='blue')\nplt.suptitle('Average positive words')\nplt.show()\n\nf'Looks that \"{names[0]}\" is the most positive!!'","e2ebe0ce":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Explicitely override this\nraces = ['human', 'hobbit']\n\ndef get_words_having_emotion(emotion):\n    assert type(emotion) == str\n    words_per_race = {}\n    for race in races:\n        words_per_race[race] = sentiments_per_race[race][emotion]\n    return words_per_race\n                    \npositive_words_per_race = get_words_having_emotion('positive')\nnegative_words_per_race = get_words_having_emotion('negative')\n\n# Data preparation\ndata = []\nfor race in races:\n    positive_words = positive_words_per_race[race]\n    negative_words = negative_words_per_race[race]\n    \n    item = [negative_words, positive_words]\n    \n    data.append(item)\n    \n# Visualise\nfig = plt.figure(figsize=(27, 9))\nX = np.arange(len(races))\nax = fig.add_axes([0,0,1,1])\nplt.xticks(X, races)    \n\nfor i in range(len(races)):\n    x = i \n    \n    # S\u0142owa o danej czesze\n    neg = data[i][0]\n    pos = data[i][1]\n    \n    ax.bar(x, neg, color = 'r', width = 0.15)\n    ax.bar(x + 0.15, pos, color = 'g', width = 0.15)\n    ax.legend(labels=['Negative', 'Positive'])","ce089e17":"##### Visualisation","8ff2a140":"Using [NRC](http:\/\/) lexicon","9e8cb2c7":"### How many characters race do we know?","3085ee3d":"### Add lacking races to the script\nWe know only races for elrond and galadriel. It sucks a little. We have to add more information to find the most aggresive race. Great that there are tons of this information in the Internet!","427153eb":"Remove NA rows or column\n\n\n#TODO: Analyse how much of this data do we have","2324a2d6":"How do characters data look like?","7d5e8d30":"# Correct - bar plot negative and positive","a6194d59":"### Visualise","7a32457f":"### Sentiment analysis","06ae9fd7":"#### Objective 1: Who is the most negative character in the fellowship of the ring?","1da1fe6e":"#### Pre-process the dialogs","c1019160":"### Add races to script table","4dfb13de":"How do scripts data look like?","b2858685":"# Correct: Positvive and negative words - bar graph","bf77d782":"# Sentiment analysis","7737b367":"# Loading data from scripts","2c55a521":"# Pre-processing of scripts data\nOkay, we have to pre-process the data, before we can do any further analysis.\n\n\nIn this part we:\n- remove all punctuation words\n- remove excess whitespace\n- lower all the words\n- remove stop-words\n- remove numbers","ddd44b00":"### Visualisation","9c5f761e":"# Basic visualisation","2d52d284":"## Objective 2: Which race is the most angry one?","370450cb":"### What is the ratio of positive words to all words said by each hobbits and humans?\n","2f4bbdb1":"### Visualise\n","a9c6fa9f":"#### Pre-process all the character names in the script","a718278d":"### Count average angry words per 'person' in race","f9d09f46":"## Objective 3: Are hobbits more positive or human?\nOkay, we already have grouped by races, so the job would be pretty much the same. Sentiment analysis was already done.","f43c7d93":"### What is the ratio of negative words to all words said by each fellow?\nPor\u00f3wnaj tutaj \u015bredni\u0105. Negatywne do wszystkich.\nZobacz kto by\u0142\u00a0bardziej negatywny w stosunku do pozytywnych.\nWypisz og\u00f3ln\u0105 liczb\u0119 s\u0142\u00f3w maj\u0105cych emocj\u0119 do ka\u017cdej osoby - pomocne w analizie.","6b0faef4":"### Visualisation"}}