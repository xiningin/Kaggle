{"cell_type":{"1aaa586b":"code","20527236":"code","5ce0e898":"code","a2993950":"code","bb8d3eb1":"code","1ede23ff":"code","8a52fa02":"code","b7476ae7":"code","8d9101ad":"code","777747e0":"code","9c7bef07":"code","52e70eb5":"code","7a8f6a0c":"code","45311f66":"markdown","b6e78b51":"markdown","d46c4355":"markdown","74541983":"markdown","e3769ed4":"markdown","f3f69485":"markdown","3ee93022":"markdown","1a5a76a1":"markdown","9027a4fb":"markdown","0dcdca80":"markdown"},"source":{"1aaa586b":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import PolynomialFeatures\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC","20527236":"data=pd.read_csv('..\/input\/fish-market\/Fish.csv')","5ce0e898":"data.head()","a2993950":"data.info()","bb8d3eb1":"data.describe()","1ede23ff":"X=data.drop(['Species'],axis=1)","8a52fa02":"##to make multi calss model so convert fish name to int\ny= data['Species'].map({'Perch': 0, 'Bream': 1,'Roach': 2,'Pike': 3,'Smelt': 4,'Parkki':5,'Whitefish':6})","b7476ae7":"X_std=StandardScaler().fit(X).transform(X)","8d9101ad":"X_train,X_test,y_train,y_test=train_test_split(X_std,y,random_state=0)","777747e0":"LinearSVC_result=[]\ndef get(_X,_y,_X_test,_y_test):\n    for i in {1,10,50,100,1000}:\n        model=LinearSVC(C=i,random_state=0)\n        model.fit(_X,_y)\n        LinearSVC_result.append(model.score(_X_test,_y_test))\n    return LinearSVC_result","9c7bef07":"get(X_train,y_train,X_test,y_test)","52e70eb5":"LogisticRegression_result=[]\ndef get(_X,_y,_X_test,_y_test):\n    for i in {1,10,50,100,1000}:\n        model=LogisticRegression(C=i,random_state=0)\n        model.fit(_X,_y)\n        LogisticRegression_result.append(model.score(_X_test,_y_test))\n    return LogisticRegression_result","7a8f6a0c":"get(X_train,y_train,X_test,y_test)","45311f66":"## I'm new to English and Pyton so if I have anything misunderstanding, please tell me \n\n# This notebook will introduce you the way to make 'good' LinearSCVmodel and LogisticRegressionmodel by using some 'C'","b6e78b51":"Check data","d46c4355":"define the features and target","74541983":"and next,read data","e3769ed4":"next make LogisticRegression","f3f69485":"to avoid bad effection, standarize features","3ee93022":"In my case, best socre is 0.925, and I found that score of LogisticRegression change dinamically by changing 'C'","1a5a76a1":"Thank you for reading my notebook, if you have any questions please ask me. ","9027a4fb":"first, import libraries","0dcdca80":"make LinearSVC model and get the best accuracy by using some C "}}