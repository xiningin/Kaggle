{"cell_type":{"d377a84a":"code","d8d9491c":"code","234e5c44":"code","3413aecc":"code","c2eb7cd9":"code","7c676b02":"code","1cd7f6ed":"code","cd87c00b":"code","3c7e175f":"code","5870cc0b":"code","10f0d1db":"code","6a99a752":"code","7a04b4d4":"code","fc7cc09d":"code","b71a4f0b":"code","d8cf58bc":"code","e6dcccbe":"code","673b878f":"code","70366f1e":"code","6c1f0d4b":"markdown","5885eb2c":"markdown","1b3556ea":"markdown","2b1de0d3":"markdown","ed29a1ed":"markdown","97949d30":"markdown"},"source":{"d377a84a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d8d9491c":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\nimport matplotlib.pyplot as plt \nplt.rc(\"font\", size=14)\n\nimport seaborn as sns\nsns.set(style=\"white\")\nsns.set(style=\"whitegrid\", color_codes=True)","234e5c44":"#import pydotplus\nfrom sklearn.tree import DecisionTreeClassifier\nfrom IPython.display import Image\nfrom sklearn import tree","3413aecc":"# Load dataset\nrecords = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\n\n# View first two rows\nrecords.head(6)","c2eb7cd9":"# Rename DEATH_EVENT\nrecords = records.rename(columns={'DEATH_EVENT': 'death_event'})","7c676b02":"# Conditional probabilities of death given sex\npd.crosstab(\n    records.sex,\n    records.death_event,\n    margins=True,\n    normalize='columns'\n)","1cd7f6ed":"# Visualize \nsns.countplot(x='death_event', data=records, palette='Set1')\nplt.show()","cd87c00b":"%matplotlib inline\npd.crosstab(records.sex, records.death_event).plot(kind='bar')\nplt.title('Number of deaths by sex')\nplt.xlabel('Sex')\nplt.ylabel('Death event')","3c7e175f":"records.age.hist()\nplt.title('Histogram of age')\nplt.xlabel('Age')\nplt.ylabel('Frequency')","5870cc0b":"# Move death_event to first col\ncol_name = 'death_event'\nfirst_col = records.pop(col_name)\nrecords.insert(0, col_name, first_col)\nrecords.head() # check","10f0d1db":"# separate into input and output columns\nfeatures, target = records.drop('death_event', 1), records['death_event']","6a99a752":"# Normalize columns\ncols_to_norm = ['creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium']\n\nfeatures[cols_to_norm] = StandardScaler().fit_transform(features[cols_to_norm])\n\nfeatures.head()","7a04b4d4":"# train test split\nx_train, x_test, y_train, y_test = train_test_split(features, target, random_state = 4)","fc7cc09d":"# Create logistic reg object\nlog_reg = LogisticRegression(solver='liblinear')\n\n# Train model\nlog_reg.fit(x_train, y_train)\n\n# Predict from test set\ny_pred = log_reg.predict(x_test)","b71a4f0b":"# Accuracy of model\naccuracy = metrics.accuracy_score(y_test, y_pred)\naccuracy_perc = round(100*accuracy, 2)\n\nprint(f'The accuracy of the model is {accuracy_perc} %')","d8cf58bc":"# Create decision tree classifier object\nd_tree = DecisionTreeClassifier(random_state=0)","e6dcccbe":"# train model\nd_tree_mod = d_tree.fit(x_train, y_train)","673b878f":"y_pred = d_tree_mod.predict(x_test)","70366f1e":"# Accuracy of model\naccuracy = metrics.accuracy_score(y_test, y_pred)\naccuracy_perc = round(100*accuracy, 2)\n\nprint(f'The accuracy of the model is {accuracy_perc} %')","6c1f0d4b":"## Set-Up","5885eb2c":"Dependent variable, `DEATH_EVENT`, is binary. ","1b3556ea":"## Model","2b1de0d3":"### Logistic Regression","ed29a1ed":"### Decision Tree","97949d30":"## Data Wrangling"}}