{"cell_type":{"98834046":"code","79313e0a":"code","63fc2a97":"code","c1f40d80":"code","9341eac4":"code","5fb2e3b7":"code","8e17542b":"code","2c11a20e":"code","b517de9f":"code","fd75c238":"code","4c1356ea":"code","46ebbfe3":"code","33b66048":"code","240f1a62":"code","6549d1ae":"code","82a600dd":"code","54ddaed0":"code","b68a2b2b":"code","0f2d3006":"code","021d8408":"code","499beb09":"code","b727c2e8":"code","ddbe1ad8":"code","57b1b252":"code","00fea394":"code","77b45292":"code","3c027e88":"code","146b8f37":"code","d4432991":"code","4beebafa":"code","4c78aea4":"code","715e38f0":"code","d70f2ea6":"code","037cf28d":"code","59c0d724":"code","f2b3b77a":"code","f6021d27":"code","ad9c9783":"code","f81e2152":"code","a013b069":"code","c500a21e":"code","3d2f6beb":"code","c118a591":"code","69022836":"code","91d23b11":"code","68f855a2":"code","b7496951":"code","02970f90":"code","5f9b926b":"code","06b4fe55":"code","cfb6108d":"code","db3c5a08":"code","b7e53974":"code","47f4d66e":"code","3e2f3e94":"code","4375a7f7":"code","7d13cc85":"code","7f462775":"code","de4e8528":"code","b6c16cc7":"code","9b2c6a6c":"code","f99133f7":"code","139c8073":"code","1e549d52":"code","702ff0f1":"code","7241a5aa":"code","367e8165":"code","c86aaad0":"code","e05feb7a":"code","793bac1e":"code","337f067c":"code","1da1bedc":"code","a10697e5":"code","31718979":"code","ee6fd22c":"code","6811ae39":"code","f1000096":"code","ef86e529":"code","e7ec3347":"code","7ea25b0c":"code","b377119f":"code","521ac4a8":"code","6b1c52b4":"code","049abcd1":"code","071491fd":"code","8b239a79":"code","dbd9ddbb":"code","6ddc76cb":"code","004534d0":"code","2596ef0a":"code","fd1474d4":"code","07a267bd":"code","aa8614f5":"code","305db738":"code","9d1ceb95":"code","22e396ea":"code","d9e6b798":"code","50c40dcd":"code","815505a5":"code","44d4621d":"code","7e61f30d":"code","ab2a2944":"code","63c1575a":"code","e35ade91":"code","330172c7":"code","c36f5962":"code","c792fcee":"code","7481ffe5":"code","2449028d":"code","36af63fa":"code","7f2c02e9":"code","f7e6b769":"code","7977bcec":"code","cd4e82e6":"code","8e9ffdec":"code","7f6a7543":"code","e1c4ecae":"code","f4837613":"code","e2f6a406":"code","ed3b4b1e":"code","25542f44":"code","23f66d20":"code","0178cba4":"code","1a3cf6a3":"code","fb46e594":"code","08911e0f":"code","74456d82":"code","b1f3fdd7":"code","a1eeb2b3":"code","77eeee3f":"code","cafa029a":"code","51a8bd78":"code","0c80c441":"code","6e944b9f":"code","77dd93fe":"code","79760fb6":"code","fbd05cff":"code","640ad585":"code","024ff1c3":"code","ae4e3b0f":"code","4a3e41b7":"code","49bb8e03":"code","2ed46ea5":"code","d96511ec":"code","c8a57572":"code","7e89157b":"code","00840fc8":"code","e0178577":"code","cf5b5e61":"code","6f68838b":"code","279f6104":"code","51583364":"code","66438cc0":"code","bdeff0b9":"code","c63df22b":"code","c57004eb":"code","9231edf1":"code","f77a18f4":"code","2bcfdc32":"code","5d10149e":"code","814da1ac":"code","8610d93d":"code","85137e32":"code","8d0364ff":"code","eb89ddd7":"code","594fef0a":"code","9879d6cb":"code","555cbf47":"code","d3085835":"code","6a2140ab":"code","405f739b":"code","28538719":"code","2d71fd3f":"code","f9017ed8":"code","a593a544":"code","36a8aaf9":"code","1eb7de33":"code","1a4a7d6e":"code","7a4f2282":"code","63391f26":"code","a2466bd1":"code","9b8c13b6":"code","7a1021d9":"code","b8f3df6a":"code","a7fc63d0":"code","ce2c0cab":"code","60af5f47":"code","b948cce9":"code","4c28e202":"code","1babea65":"code","ed277d5d":"code","81f2f247":"code","75f8a864":"code","a5b58292":"code","698fca2d":"code","e8267ee3":"code","35b26ac4":"code","cac923e5":"code","67a75553":"code","938c7118":"code","cad25d7c":"code","6436bcf8":"code","b26b3982":"code","95d6843a":"code","5c3e9b3f":"code","eb46f751":"code","7dae6221":"code","561955f0":"code","1023e72e":"code","dd5c3468":"code","33343592":"code","283caef9":"code","f4d60bcb":"code","ba4eced6":"markdown","3dee5708":"markdown","8acb4d4d":"markdown","99e11bc0":"markdown","c9007c75":"markdown","ef8ce81b":"markdown","ef1b9513":"markdown","4696231d":"markdown","587d9d43":"markdown","9d575ca6":"markdown","97d6fab4":"markdown","d28bab48":"markdown","40e1c0e6":"markdown","0c4e935b":"markdown","99db8e1c":"markdown","b83d1e41":"markdown","8f61ba88":"markdown","2fdd3a37":"markdown","83ee5bd8":"markdown","ff050611":"markdown","f04447e2":"markdown","2f1c718c":"markdown","54529385":"markdown","18d7b54e":"markdown","84d460bd":"markdown","83b3d408":"markdown","d1f7b055":"markdown","6be33d15":"markdown","a1cdac16":"markdown","9221bb60":"markdown","e0a4b2f1":"markdown","6436b30c":"markdown","ad6f18c1":"markdown","b9b31392":"markdown","21cee117":"markdown","78a458ba":"markdown","50b2754d":"markdown","30869a8e":"markdown","7d7087cd":"markdown","94728a1d":"markdown","0e41937d":"markdown","d1e172e3":"markdown","7825df7f":"markdown","cb4aa275":"markdown"},"source":{"98834046":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","79313e0a":"import os\ntrain = pd.read_csv(\"..\/input\/train\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test\/test.csv\")\ncolor_labels = pd.read_csv(\"..\/input\/color_labels.csv\")\nbreed_labels = pd.read_csv(\"..\/input\/breed_labels.csv\")\nstate_labels = pd.read_csv(\"..\/input\/state_labels.csv\")","63fc2a97":"import warnings\nwarnings.filterwarnings('ignore')","c1f40d80":"train.head()","9341eac4":"train['Breed1'].nunique()","5fb2e3b7":"train['Breed2'].nunique()","8e17542b":"train['Color1'].nunique()","2c11a20e":"test.head()","b517de9f":"color_labels.head()","fd75c238":"state_labels.head()","4c1356ea":"breed_labels.head()","46ebbfe3":"breed_labels.tail()","33b66048":"test['AdoptionSpeed']=-1\ntest=test.reindex(columns=train.columns)\ndf_all=pd.concat([train,test]).copy()\ndf_all.head()","240f1a62":"def print_columns_with_null(df):\n    dfn=df.isnull().sum()\n    return dfn[dfn>0]","6549d1ae":"print_columns_with_null(df_all)","82a600dd":"df_all['Name'].fillna('No Name', inplace=True)\ndf_all['Description'].fillna('*Missing*', inplace=True)","54ddaed0":"print_columns_with_null(df_all)","b68a2b2b":"df_all['AdoptionSpeed']=df_all['AdoptionSpeed'].apply(str)","0f2d3006":"fig,ax = plt.subplots(figsize=(16,4))\nax = sns.distplot(df_all['Age'])","021d8408":"df_all['Breed1'].value_counts().head(10)","499beb09":"df_all['Breed2'].value_counts().head(10)","b727c2e8":"#df_all=df_all.drop(['Name','RescuerID','Description'],axis=1)","ddbe1ad8":"df_all['Name'].value_counts().head(10)","57b1b252":"def simple_name(name) :\n    if (name in ['No Name','Baby','Lucky','Brownie','Mimi','Blackie','Kitty']) :\n        return name\n    else:\n        return 'Other Names'","00fea394":"simple_name('Baby')","77b45292":"simple_name('Aquaman')","3c027e88":"df_all['SimpleName']=df_all['Name'].apply(simple_name)","146b8f37":"df_all['Description'].value_counts().head()","d4432991":"df_all['DescriptionLength']=df_all['Description'].apply(len)","4beebafa":"df_all['DescriptionLength'].describe()","4c78aea4":"df_all['DescriptionLength'].value_counts().head(10)","715e38f0":"sns.distplot(df_all['DescriptionLength'])","d70f2ea6":"def descr_cat(descr) :\n    ldescr = len(descr)\n    if (ldescr<=15) : return '015'\n    if ((ldescr>15)&(ldescr<=50)) : return '050'\n    if ((ldescr>50)&(ldescr<=250)) : return '250'\n    if ((ldescr>250)&(ldescr<=750)) : return '750'\n    if (ldescr>750) : return '750+'","037cf28d":"descr_cat('For Adoption')","59c0d724":"df_all['DescrLengthCat']=df_all['Description'].apply(descr_cat)","f2b3b77a":"df_all['RescuerID'].value_counts().head(10)","f6021d27":"def simple_rid(id) :\n    if (id in ['fa90fa5b1ee11c86938398b60abc32cb','aa66486163b6cbc25ea62a34b11c9b91',\n                 'c00756f2bdd8fa88fc9f07a8309f7d5d','b53c34474d9e24574bcec6a3d3306a0d',\n                 'ee2747ce26468ec44c7194e7d1d9dad9','4475f31553f0170229455e3c5645644f',\n                 '95481e953f8aed9ec3d16fc4509537e8','b770bac0ca797cf1433c48a35d30c4cb']) :\n        return id\n    else:\n        return 'Other Rescuers'","ad9c9783":"simple_rid('c00756f2bdd8fa88fc9f07a8309f7d5d')","f81e2152":"simple_rid('Ocean Master')","a013b069":"df_all['SimpleRescuerID']=df_all['RescuerID'].apply(simple_rid)","c500a21e":"def simple_b2(breed) :\n    if (breed==0) : \n        return '0'\n    else :\n        return '1'","3d2f6beb":"df_all['SimpleBreed2']=df_all['Breed2'].apply(simple_b2)","c118a591":"def simple_b1(breed) :\n    if (breed in [307,266,265,299,264,292,285]) :\n        return str(breed)\n    else:\n        return 'Other Breeds'","69022836":"df_all['SimpleBreed1']=df_all['Breed1'].apply(simple_b1)","91d23b11":"print_columns_with_null(df_all)","68f855a2":"df_all.to_csv('df_all0.csv', index=False)","b7496951":"from pandas.io.json import json_normalize","02970f90":"curr_path= '..\/input\/train_sentiment\/'\ncurr_name=os.listdir('..\/input\/train_sentiment')[3]\ncurr_file = curr_path + curr_name\ncurr_file","5f9b926b":"curr_json=pd.read_json(curr_file, orient='index', typ='series')\ncurr_json","06b4fe55":"json_normalize(curr_json.sentences)","cfb6108d":"json_normalize(curr_json.entities)","db3c5a08":"curr_ds=json_normalize(curr_json.documentSentiment)\ncurr_ds.magnitude[0]","b7e53974":"txt_df = pd.DataFrame(columns=['PetID','magnitude','score','language'])","47f4d66e":"curr_name.split('.')[0]","3e2f3e94":"df_all[df_all['PetID']=='378fcc4fc']","4375a7f7":"curr_row=pd.DataFrame(data=[curr_name.split('.')[0],curr_json.language,curr_ds.magnitude[0],curr_ds.score[0]], index=['PetID','magnitude','score','language']).transpose()\ncurr_row","7d13cc85":"txt_df.append(curr_row)","7f462775":"curr_json.language","de4e8528":"def fill_txt_df(curr_path) :\n    curr_names=os.listdir(curr_path)\n    txt_df = pd.DataFrame(columns=['PetID','magnitude','score','language'])\n    for curr_name in curr_names :\n        curr_file = curr_path + curr_name\n        # print(curr_file)\n        curr_json=pd.read_json(curr_file, orient='index', typ='series')\n        curr_ds=json_normalize(curr_json.documentSentiment)\n        curr_row=pd.DataFrame(data=[curr_name.split('.')[0],curr_ds.magnitude[0],curr_ds.score[0],curr_json.language],\n                 index=['PetID','magnitude','score','language']).transpose()\n        txt_df=txt_df.append(curr_row)\n    return txt_df","b6c16cc7":"txt_df_train = fill_txt_df('..\/input\/train_sentiment\/')\ntxt_df_train.describe()","9b2c6a6c":"txt_df_test = fill_txt_df('..\/input\/test_sentiment\/')\ntxt_df_test.describe()","f99133f7":"txt_data=txt_df_train.append(txt_df_test)\ntxt_data.describe()","139c8073":"txt_data.dtypes","1e549d52":"txt_data.isna().sum()","702ff0f1":"txt_data.dtypes","7241a5aa":"def cols_to_numeric(df, col_names):\n    for k in range(0,len(col_names)) :\n        df[col_names[k]]=pd.to_numeric(df[col_names[k]],errors='coerce')\n    return df","367e8165":"col_names=['magnitude','score']\ntxt_data = cols_to_numeric(txt_data, col_names)\ntxt_data.dtypes","c86aaad0":"txt_data.to_csv('txt_data.csv', index=False)","e05feb7a":"fig,ax = plt.subplots(figsize=(12,4))\nax = sns.distplot(txt_data['magnitude'])","793bac1e":"fig,ax = plt.subplots(figsize=(12,4))\nax = plt.hist(txt_data['score'], bins=15)","337f067c":"curr_path= '..\/input\/train_metadata\/'","1da1bedc":"curr_names=os.listdir('..\/input\/train_metadata')\nlen(curr_names)","a10697e5":"curr_name=os.listdir('..\/input\/train_metadata')[432]\ncurr_file = curr_path + curr_name\ncurr_file","31718979":"curr_json=pd.read_json(curr_file, orient='index', typ='series')\ncurr_json","ee6fd22c":"jla=json_normalize(curr_json.labelAnnotations)\njla","6811ae39":"jla['description'].str.cat(sep=', ')","f1000096":"jla[jla['score']==jla['score'].max()]","ef86e529":"jpa=json_normalize(curr_json.imagePropertiesAnnotation)\njpa.iloc[0]","e7ec3347":"jpa.iloc[0][0]","7ea25b0c":"len(jpa.iloc[0][0])","b377119f":"k=2","521ac4a8":"jpa.iloc[0][0][k]['color']","6b1c52b4":"jpa.iloc[0][0][k]['score']","049abcd1":"jpa.iloc[0][0][k]['pixelFraction']","071491fd":"df_jpa=pd.DataFrame(columns=['color','score','pixelFraction'])\ndf_jpa","8b239a79":"data=[str(jpa.iloc[0][0][k]['color']),jpa.iloc[0][0][k]['score'],jpa.iloc[0][0][k]['pixelFraction']]\npd.DataFrame(data=data,index=['color','score','pixelFraction']).transpose()","dbd9ddbb":"df_jpa=pd.DataFrame(columns=['color','score','pixelFraction'])\nfor k in range(0,len(jpa.iloc[0][0])) :\n    curr_data=[str(jpa.iloc[0][0][k]['color']),jpa.iloc[0][0][k]['score'],jpa.iloc[0][0][k]['pixelFraction']]\n    curr_row=pd.DataFrame(data=curr_data,index=['color','score','pixelFraction']).transpose()\n    df_jpa=df_jpa.append(curr_row)\ndf_jpa['prod']=df_jpa['score']*df_jpa['pixelFraction']\ndf_jpa","6ddc76cb":"len(df_jpa[df_jpa['prod']==df_jpa['prod'].max()])","004534d0":"jcha=json_normalize(curr_json.cropHintsAnnotation)\njcha.iloc[0]","2596ef0a":"jcha.iloc[0][0]","fd1474d4":"jcha.iloc[0][0][0]['boundingPoly']","07a267bd":"jcha.iloc[0][0][0]['confidence']","aa8614f5":"jcha.iloc[0][0][0]['importanceFraction']","305db738":"def not_empty(s) :\n    if len(s)>=1 : \n        return s[0]\n    else :\n        return ''","9d1ceb95":"def extr_jla_info(curr_json) :\n    dfr=pd.DataFrame(columns=['score','description'])\n    try :\n        jlas=json_normalize(curr_json.labelAnnotations)\n        curr_data=[jlas[jlas['score']==jlas['score'].max()]['score'][0],\n                   jlas['description'].str.cat(sep=',')]\n        curr_row=pd.DataFrame(data=curr_data,index=['score','description']).transpose()\n        dfr=dfr.append(curr_row)\n    except:\n        print('Line Skipped in JLA')\n        dfr=pd.DataFrame(data=[0,0], index=['score','description']).transpose()\n    return dfr","22e396ea":"def extr_jpa_info(curr_json) :\n    dfr=pd.DataFrame(columns=['color','score','pixelFraction','prod'])\n    try :\n        jpas=json_normalize(curr_json.imagePropertiesAnnotation)\n        for k in range(0,len(jpas.iloc[0][0])) :\n            curr_data=[str(jpas.iloc[0][0][k]['color']),\n                   jpas.iloc[0][0][k]['score'],\n                   jpas.iloc[0][0][k]['pixelFraction'],\n                   jpas.iloc[0][0][k]['score']*jpas.iloc[0][0][k]['pixelFraction']]\n            curr_row=pd.DataFrame(data=curr_data,index=['color','score','pixelFraction','prod']).transpose()\n            dfr=dfr.append(curr_row)\n        dfr=dfr[dfr['prod']==dfr['prod'].max()]    \n    except :\n        print('Line Skipped in JPA')\n        dfr=pd.DataFrame(data=['',0,0,0], index=['color','score','pixelFraction','prod']).transpose()\n    return dfr","d9e6b798":"def extr_jcha_info(curr_json) :\n    dfr=pd.DataFrame(columns=['boundingPoly','confidence','importanceFraction','prod'])\n    try :\n        jchas=json_normalize(curr_json.cropHintsAnnotation)\n        for k in range(0,len(jchas.iloc[0][0])) :\n            curr_data=[str(jchas.iloc[0][0][k]['boundingPoly']),\n                       jchas.iloc[0][0][k]['confidence'],\n                       jchas.iloc[0][0][k]['importanceFraction'],\n                       jchas.iloc[0][0][k]['confidence']*jchas.iloc[0][0][k]['importanceFraction']]\n            curr_row=pd.DataFrame(data=curr_data,index=['boundingPoly','confidence','importanceFraction','prod']).transpose()\n            dfr=dfr.append(curr_row)\n        dfr=dfr[dfr['prod']==dfr['prod'].max()]\n    except :\n        print('Line Skipped in JCHA')\n        dfr=pd.DataFrame(data=['',0,0,0], index=['boundingPoly','confidence','importanceFraction','prod']).transpose()\n    return dfr","50c40dcd":"import datetime","815505a5":"def fill_img_df(curr_path,k_from, k_to) :\n    curr_names=os.listdir(curr_path)\n    k_to=min(k_to,len( curr_names))\n    curr_names=curr_names[k_from:k_to]\n    col_names=['PetID','ImgID','jla_description','jla_score','jpa_color','jpa_score','jpa_pixel_fract','jcha_bounding','jcha_confidence','jcha_import_fract']\n    img_df = pd.DataFrame(columns=col_names)\n    i=k_from\n    for curr_name in curr_names :\n        i=i+1\n        if (i%1000==0) : print('Current File nr.:{}'.format(i),datetime.datetime.now())\n        curr_file = curr_path + curr_name\n        pet_id=curr_name.split('.')[0].split('-')[0]\n        img_id=curr_name.split('.')[0].split('-')[1]\n        #\n        curr_json=pd.read_json(curr_file, orient='index', typ='series')\n        info_jla=extr_jla_info(curr_json)  # contains description e score\n        info_jpa=extr_jpa_info(curr_json)  # contains RGB as string, score, pixelFraction\n        info_jcha=extr_jcha_info(curr_json) # contains boundingPoly, confidence, importanceFraction\n        #\n        curr_row=pd.DataFrame(data=[pet_id, img_id,\n                                    not_empty(info_jla['description']),\n                                    not_empty(info_jla['score']),\n                                    not_empty(info_jpa['color']),\n                                    not_empty(info_jpa['score']),\n                                    not_empty(info_jpa['pixelFraction']),\n                                    not_empty(info_jcha['boundingPoly']),\n                                    not_empty(info_jcha['confidence']),\n                                    not_empty(info_jcha['importanceFraction'])],\n                 index=col_names).transpose()\n        img_df=img_df.append(curr_row)\n    return img_df","44d4621d":"img_df1=fill_img_df('..\/input\/train_metadata\/',0,20000)\nimg_df1.to_csv('..\/img_df1.csv', index=True)","7e61f30d":"img_df2=fill_img_df('..\/input\/train_metadata\/',20000,40000)\nimg_df2.to_csv('..\/img_df2.csv', index=True)","ab2a2944":"img_df3=fill_img_df('..\/input\/train_metadata\/',40000,60000)\nimg_df3.to_csv('..\/img_df3.csv', index=True)","63c1575a":"img_df=pd.concat([img_df1,img_df2,img_df3], axis=0)","e35ade91":"col_names=['jla_score','jpa_score','jpa_pixel_fract','jcha_confidence','jcha_import_fract']\nimg_df = cols_to_numeric(img_df,col_names)\nimg_df.dtypes","330172c7":"img_df['rating']=img_df['jla_score']*img_df['jpa_score']*img_df['jpa_pixel_fract']*img_df['jcha_confidence']*img_df['jcha_import_fract']","c36f5962":"img_df.drop('jpa_color', axis=1, inplace=True)","c792fcee":"img_df.drop('jcha_bounding', axis=1, inplace=True)","7481ffe5":"img_df.sort_values(['PetID','jla_description'], inplace=True)","2449028d":"img_df.head()","36af63fa":"img_dfd=img_df[['PetID','jla_description']].groupby(['PetID']).min()\nimg_dfd.head()","7f2c02e9":"img_dfm=img_df.groupby(['PetID']).mean()\nimg_dfm.head()","f7e6b769":"img_dfc=img_df[['PetID']].groupby(['PetID']).size()\nimg_dfc.head()","7977bcec":"img_data=img_dfd","cd4e82e6":"col_names = ['jla_score','jpa_score','jpa_pixel_fract','jcha_confidence','jcha_import_fract']\nfor cn in col_names :\n    img_data[cn]=img_dfm[cn]","8e9ffdec":"img_data['cnt']=img_dfc\nimg_data.head()","7f6a7543":"img_data.to_csv('img_data.csv', index=True)","e1c4ecae":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD","f4837613":"tfv = TfidfVectorizer(analyzer='word', stop_words = 'english', token_pattern=u'\\w{4,}')","e2f6a406":"corpus=list(df_all['Description'])\ncorpus[0:5]","ed3b4b1e":"des_trasf=tfv.fit_transform(corpus)","25542f44":"tfv.get_feature_names()[0:5]","23f66d20":"svd = TruncatedSVD(n_components=300)","0178cba4":"svd.fit(des_trasf)","1a3cf6a3":"svd.explained_variance_ratio_.sum()","fb46e594":"des_svd=svd.transform(des_trasf)","08911e0f":"des_svd.shape","74456d82":"des_svd.shape[1]","b1f3fdd7":"des_svd_df0=pd.DataFrame(des_svd)","a1eeb2b3":"def gen_col_names(svd_array,prefix):\n    col_names=[]\n    for i in range(0,svd_array.shape[1]) :\n        col_names.append(prefix+str(i))\n    return col_names","77eeee3f":"col_names=gen_col_names(des_svd_df0,'des_svd')\ncol_names[0:5]","cafa029a":"des_svd_df0.columns=col_names\ndes_svd_df0.iloc[0:5,0:5]","51a8bd78":"dpi=df_all[['PetID','Description']]\ndpi.head()","0c80c441":"des_svd_df=dpi.join(des_svd_df0)\ndes_svd_df=des_svd_df.reset_index(drop=True)\ndes_svd_df","6e944b9f":"img_data.head()","77dd93fe":"tfv = TfidfVectorizer(stop_words = 'english', token_pattern=u'\\w{3,}')","79760fb6":"corpus=list(img_data['jla_description'].apply(str))\ncorpus[0:3]","fbd05cff":"jlad_trasf=tfv.fit_transform(corpus)","640ad585":"tfv.get_feature_names()[0:5]","024ff1c3":"svd = TruncatedSVD(n_components=20)","ae4e3b0f":"svd.fit(jlad_trasf)","4a3e41b7":"svd.explained_variance_ratio_.sum()","49bb8e03":"jlad_svd=svd.transform(jlad_trasf)","2ed46ea5":"jlad_svd.shape","d96511ec":"jlad_svd_df0=pd.DataFrame(jlad_svd)","c8a57572":"col_names=gen_col_names(jlad_svd_df0,'jlad_svd')\ncol_names[0:5]","7e89157b":"jlad_svd_df0.columns=col_names\njlad_svd_df0.head()","00840fc8":"dpi=pd.DataFrame(img_data['jla_description'])\ndpi=dpi.reset_index('PetID')\ndpi.head()","e0178577":"jlad_svd_df=pd.concat([dpi,jlad_svd_df0],axis=1)\njlad_svd_df.head()","cf5b5e61":"des_svd_df.to_csv('des_svd_df.csv',index=False)","6f68838b":"jlad_svd_df.to_csv('jlad_svd_df.csv',index=False)","279f6104":"df_all.head()","51583364":"df_all.drop('Name', axis=1, inplace=True) # created categorical SimpleName\ndf_all.drop('RescuerID', axis=1, inplace=True) # created categorical SimpleRescuerID\ndf_all.drop('Description', axis=1, inplace=True) # created categorical DescrLengthCat\ndf_all.drop('DescriptionLength', axis=1, inplace=True) # created categorical DescrLengthCat","66438cc0":"df_all.drop('Breed2', axis=1, inplace=True)\n#df_all.drop('SimpleBreed2', axis=1, inplace=True)","bdeff0b9":"#df_all.drop('Breed1', axis=1, inplace=True)\ndf_all.drop('SimpleBreed1', axis=1, inplace=True)","c63df22b":"df_all.head()","c57004eb":"df_all.dtypes","9231edf1":"simple_name_dummies=pd.get_dummies(df_all['SimpleName'],drop_first=True)\ndescr_len_dummies=pd.get_dummies(df_all['DescrLengthCat'],drop_first=True)\nsimple_rid_dummies=pd.get_dummies(df_all['SimpleRescuerID'],drop_first=True)\nsimple_b2_dummies=pd.get_dummies(df_all['SimpleBreed2'],drop_first=True)","f77a18f4":"df_all=pd.concat([df_all,simple_name_dummies,descr_len_dummies,\n                  simple_rid_dummies], axis=1)\ndf_all.drop('SimpleName', axis=1, inplace=True)\ndf_all.drop('DescrLengthCat', axis=1, inplace=True)\ndf_all.drop('SimpleRescuerID', axis=1, inplace=True)\ndf_all.drop('SimpleBreed2', axis=1, inplace=True)","2bcfdc32":"df_all.head()","5d10149e":"dftrain=df_all[np.invert(df_all['AdoptionSpeed']=='-1')].copy()\ndftest=df_all[df_all['AdoptionSpeed']=='-1'].copy()","814da1ac":"dftest.head()","8610d93d":"dftest_ids=dftest['PetID']\ndftest_ids.head()","85137e32":"dftrain=dftrain.drop(['PetID'],axis=1)\ndftest=dftest.drop(['PetID'],axis=1)","8d0364ff":"dftrain.head()","eb89ddd7":"dftest=dftest.drop('AdoptionSpeed',axis=1)\ny = dftrain['AdoptionSpeed']\nX = dftrain.drop('AdoptionSpeed',axis=1)","594fef0a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=123)","9879d6cb":"from sklearn.metrics import cohen_kappa_score","555cbf47":"from sklearn.model_selection import GridSearchCV","d3085835":"from sklearn.linear_model import LogisticRegression\nlrm = LogisticRegression(multi_class='auto', solver='lbfgs', max_iter=1000)","6a2140ab":"lrm.fit(X_train,y_train)","405f739b":"y_test_pred=lrm.predict(X_test)","28538719":"y_test.head()","2d71fd3f":"y_test_pred[0:4]","f9017ed8":"cohen_kappa_score(y_test_pred, y_test, weights='quadratic')","a593a544":"lrm.fit(X,y)","36a8aaf9":"y_pred_lrm=lrm.predict(dftest)","1eb7de33":"from sklearn.ensemble import RandomForestClassifier","1a4a7d6e":"rfc = RandomForestClassifier()","7a4f2282":"rfc.fit(X_train,y_train)","63391f26":"y_test_pred = rfc.predict(X_test)","a2466bd1":"dfi=pd.DataFrame(data=[X_test.columns,rfc.feature_importances_], index=['Col','Imp'])\ndfi=dfi.transpose()\ndfi.sort_values(by='Imp',ascending=False).head()","9b8c13b6":"sns.boxplot(x='AdoptionSpeed', y='Age', data=dftrain)","7a1021d9":"sns.boxplot(x='AdoptionSpeed', y='PhotoAmt', data=dftrain)","b8f3df6a":"cohen_kappa_score(y_test_pred, y_test, weights='quadratic')","a7fc63d0":"param_grid = {\n    'bootstrap': [True],\n    'max_depth': [6],\n    'max_features': [24],\n    'min_samples_leaf': [2],\n    'min_samples_split': [3],\n    'n_estimators': [64]\n}","ce2c0cab":"gs = GridSearchCV(estimator = rfc, param_grid = param_grid, cv = 3, n_jobs = 4, verbose=10)","60af5f47":"gs.fit(X_train,y_train)","b948cce9":"gs.best_params_","4c28e202":"rfc=gs.best_estimator_","1babea65":"rfc.fit(X_train,y_train)","ed277d5d":"y_test_pred = rfc.predict(X_test)","81f2f247":"cohen_kappa_score(y_test_pred, y_test, weights='quadratic')","75f8a864":"rfc.fit(X,y)","a5b58292":"y_pred_rf = rfc.predict(dftest)","698fca2d":"import xgboost as xgb\nxgc = xgb.XGBClassifier()","e8267ee3":"xgc.fit(X_train,y_train)","35b26ac4":"y_test_pred = xgc.predict(X_test)","cac923e5":"dfi=pd.DataFrame(data=[X_test.columns,xgc.feature_importances_], index=['Col','Imp'])\ndfi=dfi.transpose()\ndfi.sort_values(by='Imp',ascending=False).head(10)","67a75553":"cohen_kappa_score(y_test_pred, y_test, weights='quadratic')","938c7118":"param_grid = {\n    'max_depth': [12,16],\n    'learning_rate': [0.1],\n    'gamma': [6,12],\n    'n_estimators': [64,96],\n    'subsample': [0.9],\n    'reg_lambda': [0.9],\n    'colsample_bytree': [0.9],\n}","cad25d7c":"gs = GridSearchCV(estimator = xgc, param_grid = param_grid, cv = 3, n_jobs = 4 ,verbose=10)","6436bcf8":"gs.fit(X_train,y_train)","b26b3982":"gs.best_params_","95d6843a":"xgc=gs.best_estimator_","5c3e9b3f":"xgc.fit(X_train,y_train)","eb46f751":"y_test_pred = xgc.predict(X_test)","7dae6221":"cohen_kappa_score(y_test_pred, y_test, weights='quadratic')","561955f0":"xgc.fit(X,y)","1023e72e":"y_pred_xgc = xgc.predict(dftest)","dd5c3468":"y_pred = y_pred_xgc","33343592":"dftest_ids.head()","283caef9":"subm=pd.DataFrame({'PetID': dftest_ids,'AdoptionSpeed': y_pred})\nsubm.tail()","f4d60bcb":"subm.to_csv('submission.csv', index=False)","ba4eced6":"# PetFinder Competition: a starting point","3dee5708":"From data description: The Age is expressed in months (250\/12=20.8 years)","8acb4d4d":"##### Fist Step: Simply drop string columns","99e11bc0":"The process will take a lot of time, let's make up 3 restore points.","c9007c75":"### Import and Data Loading","ef8ce81b":"And the winner is ...","ef1b9513":"Before starting this competition I had only vague ideas about this point. But thanks to Kaggle I found this fantastic Kernel:\n\nhttps:\/\/www.kaggle.com\/fiancheto\/petfinder-simple-lgbm-baseline-lb-0-399\n\nSo let's try to replicate something. I select the Description column, in a second moment is possible to extend the reasoning to the jla_description one.","4696231d":"Is it possible to summarise all these data? Honestly speaking, the following it's only an attempt. I read the documentation on Google API but I don't know if I made the right choices. In other words: any suggestion, especially for this part, will be highly appreciated. Anyway, let's go on. The idea is to create a dataframe to join later with df_all. As there are many images per pet, when we will join all the data we will have to choose one of the image rows, using a function like max() or sum().\n\nFirst of all, some useful secondary functions:\n","587d9d43":"*Final Drops*","9d575ca6":"https:\/\/www.kaggle.com\/dochad\/pet-adoption-starter-kernel-tutorial\n\nhttps:\/\/www.kaggle.com\/aroraaman\/quadratic-kappa-metric-explained-in-5-simple-steps\n\nhttps:\/\/www.kaggle.com\/nicapotato\/text-and-structured-data-lgbm","97d6fab4":"*Images*","d28bab48":"To sum up:  some categorical variables implemented by integers. Some categorical columns with (too?) many unique values. The columns Type (1=Dog, 2=Cat) and Breed1\/Breed2 have to be read together.","40e1c0e6":"Tuning","0c4e935b":"##### Second Step: Transform string columns in something with less unique values","99db8e1c":"This is the % of variance \"captured\" by the selected value of n_components","b83d1e41":"### Random Forest","8f61ba88":"## To sum up\nAt this point we have created these files:\n\n* df_all0, all the basic columns + simplified\/categorised ones\n* txt_data, img_data, information (partially) loaded from json files in dataframes\n* df_svd_df, jlad_svd_df, SVD of df_all.Description and img_data.jla_description (key=PetID)\n\nTo avoid the confusion present in some of previous versions, this kernel has been simplified to use only df_all0. A next kernel will be based on df_all0 + the svds.\n","2fdd3a37":"Just some tests\/short scripts before coding the function ...","83ee5bd8":"Let's write a for-loop function to extract the most important information embedded in the sentiment-json files.","ff050611":"Sorry, but at the moment I dont't know how to use these columns","f04447e2":"param_grid = {\n    'bootstrap': [True],\n    'max_depth': [6],\n    'max_features': [24],\n    'min_samples_leaf': [2],\n    'min_samples_split': [3],\n    'n_estimators': [64]\n}","2f1c718c":"##### Third Step: Taking into the account data from json files","54529385":"Ok, I dropped the world under 4 chars, but I have to understand better token_patter...","18d7b54e":"So there are many json per pet, as we was expecting, due to PhotoAmt>1.","84d460bd":"Finally, resulting from the SVD process, we have two dataframes: des_svd_df and jlad_svd_df.","83b3d408":"Here is the main function:","d1f7b055":"### Modeling","6be33d15":"Welcome everybody, this is my first Kernel and my first competition. This notebook is something like a diary of a journey. My aim was starting with something simple and adding details gradually. These have been the main steps:\n\n* First step: logistic regression, object columns dropped, json files not used.\n* Second step: random forest, object columns simplified and categorised, json files not used.\n* Third sted: data preparation on  json files and move to my next kernel \n\nAs you can see, there's a lot of WIP. I hope it could be useful to someone anyway. Pointings and suggestions are welcome.","a1cdac16":"Let's add a compact rating index","9221bb60":"Here we can do with a few of SVS","e0a4b2f1":"With the others ...","6436b30c":"### Logistic Regression","ad6f18c1":"And now another hard choice: is it more important the best image or having several good images? ","b9b31392":"Use Breeds or SimpleBreeds? Running the models I made this choice","21cee117":"### Credits & Thanks to ...","78a458ba":"param_grid = {\n    'max_depth': [16],\n    'learning_rate': [0.3],\n    'gamma': [6],\n    'n_estimators': [64],\n    'subsample': [0.9],\n    'reg_lambda': [0.9],\n    'colsample_bytree': [0.9],\n}","50b2754d":"First Checkpoint for df_all","30869a8e":"### EDA and Data Preparation","7d7087cd":"*Fourth Step: Processing seriously text columns (with the help of others)*","94728a1d":"### XGB","0e41937d":"*Text*","d1e172e3":"### Submission","7825df7f":"Tuning","cb4aa275":"Let's do it with jla_description, too"}}