{"cell_type":{"a9ea9114":"code","bc9ea4ac":"code","1d0b50a0":"code","93cb8f30":"code","10eff475":"code","45d7466d":"code","8bd97060":"code","61d21ad6":"code","15b14cd8":"code","79a40fe9":"code","ea480a07":"code","e4f493dc":"code","7977edab":"code","25df0696":"code","787b3e60":"code","128ce1c9":"code","a2fe58be":"code","42b2c6cd":"code","9cee183e":"code","666e5b11":"code","5f84633f":"code","3f52fe7f":"code","27010994":"code","0905fae6":"code","a9074538":"markdown","1e7d2564":"markdown","24bce3ee":"markdown"},"source":{"a9ea9114":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc9ea4ac":"from keras import layers, models\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nfrom keras import optimizers\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport random\nimport zipfile\nfrom math import ceil\n\nINPUT_PATH = '\/kaggle\/input\/dogs-vs-cats'\nWORKING_PATH = '\/kaggle\/working'\n\n\n# Extract train and test zip files\nwith zipfile.ZipFile(os.path.join(INPUT_PATH, 'train.zip')) as z:\n    z.extractall('.')\n    \nwith zipfile.ZipFile(os.path.join(INPUT_PATH, 'test1.zip')) as z:\n    z.extractall('.')","1d0b50a0":"IMAGE_SHAPE = (150, 150, 3)\nTRAIN_PATH = os.path.join(WORKING_PATH, 'train')\nTEST_PATH = os.path.join(WORKING_PATH, 'test1')","93cb8f30":"files = os.listdir(TRAIN_PATH)\ncategories = []\n\nfor file in files:\n    category = file.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\ndf = pd.DataFrame({\n    'filename': files, \n    'category': categories\n})\n\nprint(df.size)\ndf.head()","10eff475":"df['category'].value_counts().plot(kind='bar')","45d7466d":"def build_model():\n    model = models.Sequential()\n    \n    model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=IMAGE_SHAPE))\n    model.add(layers.BatchNormalization())\n    model.add(layers.MaxPooling2D(pool_size=(2, 2)))\n    model.add(layers.Dropout(0.20))\n    \n    model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n    model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n    model.add(layers.BatchNormalization())\n    model.add(layers.MaxPooling2D(pool_size=(2, 2)))\n    model.add(layers.Dropout(0.25))\n    \n    model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n    model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n    model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n    model.add(layers.BatchNormalization())\n    model.add(layers.MaxPooling2D(pool_size=(2, 2)))\n    model.add(layers.Dropout(0.30))\n    \n    model.add(layers.Conv2D(256, (3, 3), activation='relu'))\n    model.add(layers.BatchNormalization())\n    model.add(layers.MaxPooling2D(pool_size=(2, 2)))\n    model.add(layers.Dropout(0.4))\n    \n    model.add(layers.Flatten())\n    model.add(layers.Dense(512, activation='relu'))\n    model.add(layers.BatchNormalization())\n    model.add(layers.Dense(2, activation='softmax'))\n    \n    model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n    return model","8bd97060":"model = build_model()\nmodel.summary()","61d21ad6":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nearlystop = EarlyStopping(patience=10)\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy',\n                                           patience=2,\n                                           verbose=1,\n                                           factor=0.5,\n                                           min_lr=0.00001)\nfilepath = \"model.h5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\n\ncallbacks = [earlystop, learning_rate_reduction, checkpoint]","15b14cd8":"df['category'] = df['category'].replace({1:'dog', 0:'cat'})","79a40fe9":"train_df, valid_df = train_test_split(df, test_size=0.2, random_state=28)\ntrain_df = train_df.reset_index(drop=True)\nvalid_df = valid_df.reset_index(drop=True)","ea480a07":"train_df['category'].value_counts().plot.bar()\nplt.title('Data Distribution - Training Dataset')\nplt.show()\nvalid_df['category'].value_counts().plot.bar()\nplt.title('Data Distribution - Validation Dataset')\nplt.show()","e4f493dc":"train_count = len(train_df)\nvalid_count = len(valid_df)\nbatch_size = 25","7977edab":"train_datagen = ImageDataGenerator(rotation_range=20, \n                               rescale=1.\/255, \n                               width_shift_range=0.2, \n                               height_shift_range=0.2, \n                               shear_range=0.2,\n                               horizontal_flip=True,\n                               fill_mode='nearest')\n\ntrain_gen = train_datagen.flow_from_dataframe(\n    train_df,\n    directory = TRAIN_PATH,\n    x_col = 'filename',\n    y_col = 'category',\n    target_size = IMAGE_SHAPE[:2],\n    class_mode = 'categorical',\n    batch_size = batch_size\n)\n\nvalid_gen = train_datagen.flow_from_dataframe(\n    valid_df,\n    directory = TRAIN_PATH,\n    x_col = 'filename',\n    y_col = 'category',\n    target_size = IMAGE_SHAPE[:2],\n    class_mode = 'categorical',\n    batch_size = batch_size\n)","25df0696":"epoch = 30\nhistory = model.fit(\n    train_gen,\n    epochs=epoch,\n    steps_per_epoch = train_count \/\/ batch_size,\n    validation_data = valid_gen,\n    \n    validation_steps = valid_count \/\/ batch_size,\n    callbacks = callbacks\n)","787b3e60":"model.save_weights(\"dog_vs_cat_3.h5\")","128ce1c9":"epoch_count = range(1, len(history.history['accuracy'])+1)\n\nplt.plot(epoch_count, history.history['accuracy'], 'bo', label='Training Accuracy')\nplt.plot(epoch_count, history.history['val_accuracy'], 'b', label='Validation Accuracy')\nplt.title('Accuracy')\nplt.legend()\nplt.show()\n\nplt.figure()\n\nplt.plot(epoch_count, history.history['loss'], 'bo', label='Training Loss')\nplt.plot(epoch_count, history.history['val_loss'], 'r', label='Validation Loss')\nplt.legend()\nplt.show()","a2fe58be":"test_files = os.listdir(TEST_PATH)\n\ntest_df = pd.DataFrame({\n    'filename': test_files\n})\n\ntest_samples = test_df.shape[0]","42b2c6cd":"test_gen = ImageDataGenerator(rescale=(1.\/255))\ntest_generator = test_gen.flow_from_dataframe(\n    test_df,\n    shuffle = False,\n    directory = TEST_PATH,\n    x_col = 'filename',\n    y_col = None,\n    target_size=IMAGE_SHAPE[:2],\n    class_mode = None,\n    batch_size = batch_size\n)","9cee183e":"from math import ceil\npred = model.predict(test_generator, steps=ceil(test_samples\/batch_size))\ntest_df['category'] = np.argmax(pred, axis=-1)","666e5b11":"label_map = dict((v,k) for k,v in train_gen.class_indices.items())\ntest_df['category'] = test_df['category'].replace(label_map)","5f84633f":"test_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })","3f52fe7f":"test_df['category'].value_counts().plot.bar()","27010994":"sample_test = test_df.head(18)\nsample_test.head()\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(os.path.join(TEST_PATH,filename), target_size=IMAGE_SHAPE)\n    plt.subplot(6, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')' )\nplt.tight_layout()\nplt.show()","0905fae6":"submission_df = test_df.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","a9074538":"Data Preparation","1e7d2564":"Building a Model","24bce3ee":"**Data Distribution Visualization:**"}}