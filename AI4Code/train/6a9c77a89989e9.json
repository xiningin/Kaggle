{"cell_type":{"99d237ab":"code","9b507442":"code","2d36cb15":"code","bbf71c63":"code","a5e7a704":"code","fc5d7310":"code","c9a76f51":"code","7e2f9303":"code","51a0648b":"code","28e7e3d3":"code","39901007":"markdown","ae6532b0":"markdown","1d489b3f":"markdown","7ff210a2":"markdown","2d3e168c":"markdown","07c1740a":"markdown","2877a5d8":"markdown","65f7a6e6":"markdown","740f9789":"markdown","5d898118":"markdown","31619280":"markdown","6c49d1f4":"markdown","847e76d0":"markdown","cd53dac6":"markdown","6a2eb28b":"markdown","aa998d14":"markdown","a110fb41":"markdown","395f4865":"markdown"},"source":{"99d237ab":"# Lets 1st import some important libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib import cm\n\n#For generating Random DataSet\nfrom sklearn.datasets.samples_generator import make_blobs\n\n%matplotlib inline","9b507442":"# First lets set random_seed = 0\n# To make the random numbers predictable\nnp.random.seed(0)","2d36cb15":"# Using make_blobs function to generate blob of points with a Gaussian Distribution\nX, y = make_blobs(n_samples=5000,\n                 centers=[[4,4], [-2,-1], [2,-3], [1,1]],\n                 cluster_std=0.9)\n# n_samples: The total number of points equally divided among clusters\n# centers: The number of centers to generate, or the fixed center locations. \n# cluster_std: The standard deviation of the clusters. ","bbf71c63":"print(X),\nprint(y)","a5e7a704":"# For visualising it lets draw scatter plot\nplt.scatter(X[:, 0], X[:, 1], marker='.')\nplt.show()\n# Here X[:, 0] represents the x coordinate\n# And y[:, 0] represents the y coordinate","fc5d7310":"# Initializing KMeans with these parameters\nk_means = KMeans(init='k-means++', n_clusters=4, n_init=12)","c9a76f51":"# Fitting the KMeans Model\nk_means.fit(X)","7e2f9303":"#Now we will return Index of the cluster each sample belongs to.\nk_means_labels = k_means.labels_\nk_means_labels","51a0648b":"# Finding Coordinates each cluster centers.\nk_means_cluster_centers = k_means.cluster_centers_\nk_means_cluster_centers","28e7e3d3":"fig = plt.figure(figsize=(6, 4))\ncolors = plt.cm.Spectral(np.linspace(0, 1, len(set(k_means_labels))))\nax = fig.add_subplot(1, 1, 1)\nfor k, col in zip(range(len([[4,4], [-2, -1], [2, -3], [1, 1]])), colors):\n    my_members = (k_means_labels == k)\n    cluster_center = k_means_cluster_centers[k]\n    ax.plot(X[my_members, 0], X[my_members, 1], 'w', markerfacecolor=col, marker='.')\n    ax.plot(cluster_center[0], cluster_center[1], 'o', markerfacecolor=col,  markeredgecolor='k', markersize=6)\nax.set_title('KMeans') #Title\nax.set_xticks(()) # Remove X-ticks\nax.set_yticks(()) # Remove t-axis ticks\nplt.show()\n","39901007":"### ax = fig.add_subplot(1,1,1)\nCreates a plot","ae6532b0":"Now lets see what the above parameters mean one by one :\n\n### init (Here k-means++)\nInitialization method of the centroids.\nHere we are using k-means++.\nFor understaning k-means++ concept I recommend to watch this video\nhttps:\/\/www.youtube.com\/watch?v=HatwtJSsj5Q .\nI am pasting a screenshot of the algorithm.\n![image.png](attachment:image.png)\nCredits : https:\/\/www.youtube.com\/channel\/UCEfcb2wwo68MBThvK0SgylQ\n\n","1d489b3f":"## This is My 1st Notebook. Will love to hear feedback\n\n**In this notebook we will see how we can use K-Means Clustering on a Random Generated Dataset\nReference : Cognitiveclass.ai**","7ff210a2":"# Visual Plot","2d3e168c":"### n_clusters\nThe number of clusters to form as well as the number of centroids to generate.\n\n### n_init\nNumber of time the k-means algorithm will be run with different centroid seeds. The final results will be the best output of n_init consecutive runs in terms of inertia. ","07c1740a":"# Setting up K-Means","2877a5d8":"### for k, col in zip(range(len([[4,4], [-2, -1], [2, -3], [1, 1]])), colors):\nk will range from 0-3, which will match the possible clusters that each\ndata point is in.","65f7a6e6":"### colors = plt.cm.Spectral(np.linspace(0, 1, len(set(k_means_labels))))\nColors uses a color map, which will produce an array of colors based on\nnumber of labels there are","740f9789":"So X represnts the corodinates of 5000 points\n\ny represnts which coordinate belongs to which cluster.\n\nExample - [-1.82150565  0.07098024] belongs to cluter 1 and so on\n\nAs there are 4 centers hence there will be 4 clusters. We can verify it by using command below\n\nnp.unique(y) ---> array([0, 1, 2, 3]) . Hence 4 clusters\n","5d898118":"### my_members = (k_means_labels == k)\nadd those data points in the list my_members which are present in clutser k\n","31619280":"### ax.plot(cluster_center[0], cluster_center[1], 'o', markerfacecolor=col,  markeredgecolor='k', markersize=6)\nPlots the centroid with similar color darker outline\n\ncluster_center[0] means x coordinate\n\n\ncluster_center[1] means y coordinate","6c49d1f4":"# Thank You\n","847e76d0":"From above figure we can clearly see 4 distinct clusters","cd53dac6":"### ax.plot(X[my_members, 0], X[my_members, 1], 'w', markerfacecolor=col, marker='.')\nPlot the datapoints with color col","6a2eb28b":"![image.png](attachment:image.png)","aa998d14":"### cluster_center = k_means_cluster_centers[k]\nDefine the centroid of cluster k","a110fb41":"![image.png](attachment:image.png) ","395f4865":"# Lets understand what we did above\n\n### fig = plt.fig(figsize=(6,4))\nWe defined the dimenison of our figure 6inches in width, 4inches in height"}}