{"cell_type":{"aecf292f":"code","52fd300d":"code","d87b0527":"code","a443213d":"code","ac3e6318":"code","1cd6cb22":"code","904475fb":"code","6bc26e7f":"code","759d82df":"code","b9753a05":"code","17d37a2e":"code","852e2a84":"code","0913b587":"code","9aa01405":"code","1f2f82e6":"code","1b55c310":"code","fc4ce62c":"code","52085486":"code","0e769583":"code","891eee0f":"code","96c660d7":"code","b894ab25":"code","ef79545f":"code","f183aeec":"code","32412a88":"code","5a9b39df":"code","6cfff93c":"code","082ba9c2":"code","328e2470":"code","b3de25db":"code","7dd1cc04":"code","376a4e89":"code","b2832d01":"code","8bdd509e":"code","4e8a3ff8":"code","e3f71f29":"code","705a32be":"code","dd15d8ee":"code","10a0356b":"code","87977b3d":"code","175c05f2":"code","28171849":"code","631289f2":"code","6e3872af":"code","6d63f25a":"code","706ff75a":"code","3d7a9eda":"code","b95d22db":"code","0e98d6ee":"code","f4f88ec2":"code","4c1a17d7":"code","0cebfa1b":"code","1593790e":"code","a0a6fefd":"code","9e428a48":"code","b15947a0":"code","7df72db1":"code","c5eb87ac":"code","c2414901":"code","b24bcbc4":"code","a91ea998":"markdown","3236dbc6":"markdown","878dcbc1":"markdown","2120f995":"markdown","f14fea7e":"markdown","f5fb8277":"markdown","985e802c":"markdown","a2e5a73b":"markdown","282b6710":"markdown","30a2a8f5":"markdown","2cb0f0b0":"markdown"},"source":{"aecf292f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data visualization\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nplt.style.use('seaborn-darkgrid')\n\n# Any results you write to the current directory are saved as output.","52fd300d":"train = pd.read_csv('\/kaggle\/input\/cat-in-the-dat\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/cat-in-the-dat\/test.csv')","d87b0527":"train.head()","a443213d":"train.drop(columns=['id'], inplace=True)","ac3e6318":"train.info()","1cd6cb22":"for col in train.columns:\n    print(train[col].value_counts())\n    print()","904475fb":"binary_columns = []\nfor i in range(5):\n    binary_columns.append('bin_{}'.format(i))\n\nbinary_columns","6bc26e7f":"bin_3 = {'T': 1, 'F': 0}\nbin_4 = {'Y': 1, 'N': 0}","759d82df":"train['bin_3'] = train['bin_3'].map(bin_3)\ntrain['bin_4'] = train['bin_4'].map(bin_4);","b9753a05":"train[binary_columns]","17d37a2e":"from sklearn.preprocessing import LabelEncoder","852e2a84":"nominal_columns = []\nfor i in range(10):\n    nominal_columns.append('nom_{}'.format(i))\n\nnominal_columns","0913b587":"label_encoders = {}\n\nfor c in nominal_columns:\n    label_encoders[c] = LabelEncoder()\n    label_encoders[c].fit(train[c])\n    train[c] = label_encoders[c].transform(train[c])","9aa01405":"label_encoders['nom_0'].inverse_transform([0, 1, 2])","1f2f82e6":"train[nominal_columns]","1b55c310":"ordinal_columns = []\nfor i in range(6):\n    ordinal_columns.append('ord_{}'.format(i))\n\nordinal_columns","fc4ce62c":"def to_category(column, categories):\n    train[column] = train[column].astype('category')\n    train[column] = train[column].cat.set_categories(categories, ordered=True)\n    train[column] = train[column].cat.codes","52085486":"train['ord_0'].unique()","0e769583":"to_category('ord_0', [1, 2, 3])","891eee0f":"train['ord_1'].unique()","96c660d7":"to_category('ord_1', ['Novice', 'Contributor', 'Expert', 'Master', 'Grandmaster'])","b894ab25":"train['ord_2'].unique()","ef79545f":"to_category('ord_2', ['Freezing', 'Cold', 'Warm', 'Hot', 'Boining Hot', 'Lava Hot'])","f183aeec":"train['ord_3'].unique()","32412a88":"np.sort(train['ord_3'].unique())","5a9b39df":"to_category('ord_3', np.sort(train['ord_3'].unique()))","6cfff93c":"train['ord_4'].unique()","082ba9c2":"to_category('ord_4', np.sort(train['ord_4'].unique()))","328e2470":"train['ord_5'].unique()","b3de25db":"ord(train['ord_5'].unique()[0][0]) + ord(train['ord_5'].unique()[0][1])","7dd1cc04":"train['ord_5'] = train['ord_5'].apply(lambda x: ord(x[0]) + ord(x[1]))","376a4e89":"train[ordinal_columns]","b2832d01":"cyclical_features = ['day', 'month']","8bdd509e":"plt.plot(np.arange(0,7));","4e8a3ff8":"days_sin = np.sin(2 * np.pi * np.arange(0,7)\/7)\ndays_cos = np.cos(2 * np.pi * np.arange(0,7)\/7)","e3f71f29":"plt.plot(days_sin)\nplt.plot(days_cos)\nplt.show()","705a32be":"plt.xlabel('days_sin')\nplt.ylabel('days_cos')\nplt.scatter(days_sin, days_cos)\nplt.show()","dd15d8ee":"train['day_sin'] = np.sin(2 * np.pi * (train['day'] - 1)\/7)\ntrain['day_cos'] = np.cos(2 * np.pi * (train['day'] - 1)\/7)\ntrain.drop(columns=['day'], inplace=True)","10a0356b":"plt.plot(np.arange(0,12));","87977b3d":"months_sin = np.sin(2 * np.pi * np.arange(0,12)\/12)\nmonths_cos = np.cos(2 * np.pi * np.arange(0,12)\/12)","175c05f2":"plt.plot(months_sin)\nplt.plot(months_cos)\nplt.show()","28171849":"plt.xlabel('months_sin')\nplt.ylabel('months_cos')\nplt.scatter(months_sin, months_cos)\nplt.show()","631289f2":"train['month_sin'] = np.sin(2 * np.pi * (train['month'] - 1)\/12)\ntrain['month_cos'] = np.cos(2 * np.pi * (train['month'] - 1)\/12)\ntrain.drop(columns=['month'], inplace=True)","6e3872af":"cyclical_features = ['day_sin', 'day_cos', 'month_sin', 'month_cos']\n\ntrain[cyclical_features]","6d63f25a":"cat_features = binary_columns + ordinal_columns + nominal_columns\ncat_features","706ff75a":"for cat in cat_features:\n    print('The feature {} has {} categories'.format(cat, train[cat].unique().shape[0]))","3d7a9eda":"X = train.drop(columns=['target'])\ny = train['target']","b95d22db":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, stratify=y_train, random_state=42)","0e98d6ee":"verbose = 0 # Define a quantidade de informa\u00e7\u00e3o fornecida a cada itera\u00e7\u00e3o","f4f88ec2":"import lightgbm","4c1a17d7":"lightgbm_no_cat = lightgbm.LGBMClassifier(learning_rate=0.1, n_estimators=500, random_state=42)\nlightgbm_no_cat.fit(X_train, y_train, eval_set=(X_val, y_val), early_stopping_rounds=5, verbose=verbose)\nprint('Accuracy for {} {} categories: {}'.format('LightGBM', 'without', lightgbm_no_cat.score(X_test, y_test)))","0cebfa1b":"lightgbm_with_cat = lightgbm.LGBMClassifier(learning_rate=0.1, n_estimators=500, random_state=42)\nlightgbm_with_cat.fit(X_train, y_train, eval_set=(X_val, y_val), early_stopping_rounds=5, categorical_feature=cat_features, verbose=verbose)\nprint('Accuracy for {} {} categories: {}'.format('LightGBM', 'with', lightgbm_with_cat.score(X_test, y_test)))","1593790e":"import catboost","a0a6fefd":"catboost_no_cat = catboost.CatBoostClassifier(learning_rate=0.1, n_estimators=500, random_state=42)\ncatboost_no_cat.fit(X_train, y_train, eval_set=(X_val, y_val), early_stopping_rounds=5, verbose=verbose)\nprint('Accuracy for {} {} categories: {}'.format('Catboost', 'without', catboost_no_cat.score(X_test, y_test)))","9e428a48":"%%time\ncatboost_with_cat = catboost.CatBoostClassifier(learning_rate=0.1, n_estimators=500, random_state=42)\ncatboost_with_cat.fit(X_train, y_train, eval_set=(X_val, y_val), early_stopping_rounds=5, cat_features=cat_features, verbose=verbose)\nprint('Accuracy for {} {} categories: {}'.format('Catboost', 'with', catboost_with_cat.score(X_test, y_test)))","b15947a0":"catboost_with_cat_gpu = catboost.CatBoostClassifier(learning_rate=0.1, n_estimators=500, random_state=42, task_type='GPU', devices='0:1')","7df72db1":"%%time\ncatboost_with_cat_gpu.fit(X_train, y_train, eval_set=(X_val, y_val), early_stopping_rounds=5, cat_features=cat_features, verbose=verbose)\nprint('Accuracy for {} {} categories: {}'.format('Catboost', 'with', catboost_with_cat_gpu.score(X_test, y_test)))","c5eb87ac":"import xgboost","c2414901":"%%time\nxgb = xgboost.XGBClassifier(learning_rate=0.1, n_estimators=500, random_state=42, tree_method='hist')\nxgb.fit(X_train, y_train, eval_set=[(X_val, y_val)], early_stopping_rounds=30, verbose=verbose)\nprint('Accuracy for {} {} categories: {}'.format('XGBoost', 'without', xgb.score(X_test, y_test)))","b24bcbc4":"%%time\nxgb = xgboost.XGBClassifier(learning_rate=0.1, n_estimators=500, random_state=42, tree_method='gpu_hist')\nxgb.fit(X_train, y_train, eval_set=[(X_val, y_val)], early_stopping_rounds=30, verbose=verbose)\nprint('Accuracy for {} {} categories: {}'.format('XGBoost', 'without', xgb.score(X_test, y_test)))","a91ea998":"# Binary Features","3236dbc6":"# Nominal Features","878dcbc1":"## XGBoost","2120f995":"# GBM","f14fea7e":"## LightGBM","f5fb8277":"[GPU acceleration for lightgbm](https:\/\/www.kaggle.com\/vinhnguyen\/gpu-acceleration-for-lightgbm)","985e802c":"# Ordinal Features","a2e5a73b":"## CatBoost","282b6710":"[Reduzir o uso de mem\u00f3ria do dataframe](https:\/\/gist.github.com\/regispires\/cbfe07b189b262177b830486d0890d7e)\n\n[Definir o tipo de cada coluna ao carregar o dataframe](https:\/\/gist.github.com\/regispires\/afb0c5572d8d2aac92d21dd52072db9d)","30a2a8f5":"# Splitting Data","2cb0f0b0":"# Cyclical Features"}}