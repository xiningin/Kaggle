{"cell_type":{"8b10acf4":"code","ef536d0c":"code","c3129e55":"code","f7cd47c7":"code","5c06557f":"code","f5388045":"code","ca968be2":"code","1f858368":"code","882bfc2b":"code","cde3f8bf":"code","b555a836":"code","d1ed1697":"code","03373ece":"code","c076e53d":"code","a7211f59":"code","a1ac9de5":"code","7a1a2021":"code","0d08d29a":"code","4ff3bf76":"code","b3151e37":"code","1b0b0006":"code","9cc0737c":"code","d58fffcc":"code","1e08ba3e":"code","262c9df7":"code","f6d1c23b":"code","5ef32c88":"code","be3e6ad5":"code","7e6f3b19":"code","67c15ef9":"code","5f766449":"code","cff25f62":"code","3be2b177":"code","889dcf55":"code","1510e66f":"code","8c32399a":"code","ac59bbcd":"code","49829fff":"code","7468b5eb":"code","71797d56":"code","d612f8bf":"code","e91a0da2":"code","bdf8abb8":"code","eb4bdbbd":"code","3bbaaafa":"code","73f48f44":"code","c7b15663":"code","5b4a8fc8":"code","42870894":"code","e6cecf6d":"code","1218f391":"code","861004d4":"code","268e8d87":"code","b77a40ad":"code","b056882b":"code","c8ce3d1f":"code","646d5ab7":"markdown","b8f5d1b2":"markdown","e2b115f9":"markdown","1d9e05d7":"markdown","4e7b61b1":"markdown","b50bf45a":"markdown","6b18ad0b":"markdown","be32d21b":"markdown","8082bbc3":"markdown","18299ed9":"markdown","60c3587c":"markdown","0898742b":"markdown","f5ea4df7":"markdown","a66c0420":"markdown","da2b9344":"markdown","e8ecb103":"markdown","d9ea34c1":"markdown","d4ccf998":"markdown","4c5e6df0":"markdown","0fb03043":"markdown","d2e605d6":"markdown","49e6d24e":"markdown","603754ab":"markdown","3cf2eb5a":"markdown","27230865":"markdown","2e9933f9":"markdown","5e4582be":"markdown","31b60fd2":"markdown","cd49a60e":"markdown","d0adaad7":"markdown","119c8f44":"markdown","734f59bb":"markdown","67503118":"markdown","5ac8d40c":"markdown","6ca00270":"markdown","3122035c":"markdown","48856806":"markdown","97aaf47f":"markdown","3509d470":"markdown","6c25bef2":"markdown","06d3039e":"markdown"},"source":{"8b10acf4":"import os\nimport math\nimport pandas as pd\nimport numpy as np\nfrom random import randint\nimport PIL\nfrom PIL import Image\nimport cv2\nimport seaborn as sns\n\nfrom matplotlib import pyplot","ef536d0c":"df = pd.read_csv('..\/input\/facial-expression-recognitionferchallenge\/fer2013\/fer2013\/fer2013.csv')","c3129e55":"# No. Rows in the Dataset & Columns\nprint('No. of Rows: ',len(df))\nprint('No. of Columns: ',df.shape[1])","f7cd47c7":"df.head()","5c06557f":"df.tail()","f5388045":"df.Usage.value_counts()","ca968be2":"df.emotion.unique()","1f858368":"emotion_label_to_text = {\n    0: 'anger', \n    1: 'disgust', \n    2: 'fear', \n    3: 'happiness', \n    4: 'sadness', \n    5: 'surprise', \n    6: 'neutral'        }","882bfc2b":"df.emotion.value_counts()","cde3f8bf":"sns.countplot(df.emotion)\npyplot.show()","b555a836":"fig = pyplot.figure(1, (14, 14))\n\nk = 0\nfor label in sorted(df.emotion.unique()):\n    for j in range(7):\n        px = df[df.emotion==label].pixels.iloc[k]\n        px = np.array(px.split(' ')).reshape(48, 48).astype('float32')\n\n        k += 1\n        ax = pyplot.subplot(7, 7, k)\n        ax.imshow(px, cmap='gray')\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.set_title(emotion_label_to_text[label])\n        pyplot.tight_layout()","d1ed1697":"height = int(math.sqrt(len(df.pixels[0].split()))) \nwidth = int(height)","03373ece":"height, width","c076e53d":"train_df1 = df[df.Usage == 'Training']\ntrain_df2 = df[df.Usage == 'PublicTest']\n\ntrain_df = train_df1.append(train_df2, ignore_index=True)\ntrain_df.head()","a7211f59":"train_df.Usage.value_counts()","a1ac9de5":"disgust = train_df[train_df.emotion == 1] # Now disgust variable contains all the rows with emotion == disgust","7a1a2021":"disgust.columns","0d08d29a":"disgust_images_pixels = disgust['pixels']","4ff3bf76":"disgust_images_pixels","b3151e37":"len(disgust_images_pixels)","1b0b0006":"access_rights = 0o755\nos.mkdir('disgust', access_rights)\nos.chdir('disgust\/')\nfor pixels in disgust_images_pixels:\n    a = list(map(int, pixels.split(' ')))[:48 * 48]\n    i = np.array(a).reshape((48, 48)).astype('uint8')\n    img_name = str(len(pixels) + randint(100, 9999999)) + \".png\"\n    cv2.imwrite(img_name, i)","9cc0737c":"surprise = train_df[train_df.emotion == 5]","d58fffcc":"surprise_images_pixels = surprise['pixels']","1e08ba3e":"len(surprise_images_pixels)","262c9df7":"access_rights = 0o755\nos.mkdir('surprise', access_rights)\nos.chdir('surprise\/')\nfor pixels in surprise_images_pixels:\n    a = list(map(int, pixels.split(' ')))[:48 * 48]\n    i = np.array(a).reshape((48, 48)).astype('uint8')\n    img_name = str(len(pixels) + randint(100, 99999999)) + \".png\"\n    cv2.imwrite(img_name, i)","f6d1c23b":"anger = train_df[train_df.emotion == 0]","5ef32c88":"anger_images_pixels = anger['pixels']","be3e6ad5":"len(anger_images_pixels)","7e6f3b19":"access_rights = 0o755\nos.mkdir('anger', access_rights)\nos.chdir('anger\/')\nfor pixels in anger_images_pixels:\n    a = list(map(int, pixels.split(' ')))[:48 * 48]\n    i = np.array(a).reshape((48, 48)).astype('uint8')\n    img_name = str(len(pixels) + randint(100, 99999999)) + \".png\"\n    cv2.imwrite(img_name, i)","67c15ef9":"def convert_pixels_to_image(emotion_label):\n    var = train_df[train_df.emotion == emotion_label]\n    var_images_pixels = var['pixels']\n    print('Total No. Images: ',len(var_images_pixels))\n    access_rights = 0o755\n    folder_name = emotion_label_to_text[emotion_label]\n    os.mkdir(folder_name, access_rights)\n    os.chdir(folder_name)\n    for pixels in var_images_pixels:\n        a = list(map(int, pixels.split(' ')))[:48 * 48]\n        i = np.array(a).reshape((48, 48)).astype('uint8')\n        img_name = str(len(pixels) + randint(100, 999999999)) + \".png\"\n        cv2.imwrite(img_name, i)","5f766449":"cd ..","cff25f62":"convert_pixels_to_image(2)","3be2b177":"cd ..","889dcf55":"convert_pixels_to_image(4)","1510e66f":"cd ..","8c32399a":"convert_pixels_to_image(6)","ac59bbcd":"cd ..","49829fff":"convert_pixels_to_image(3)","7468b5eb":"test_df =  df[df.Usage == 'PrivateTest']\ntest_df.head()","71797d56":"test_df.Usage.value_counts()","d612f8bf":"test_df.info()","e91a0da2":"def convert_pixels_to_image(emotion_label):\n    var = test_df[test_df.emotion == emotion_label]\n    var_images_pixels = var['pixels']\n    print('Total No. Images: ',len(var_images_pixels))\n    access_rights = 0o755\n    folder_name = emotion_label_to_text[emotion_label]\n    os.mkdir(folder_name, access_rights)\n    os.chdir(folder_name)\n    for pixels in var_images_pixels:\n        a = list(map(int, pixels.split(' ')))[:48 * 48]\n        i = np.array(a).reshape((48, 48)).astype('uint8')\n        img_name = str(len(pixels) + randint(100, 999999999)) + \".png\"\n        cv2.imwrite(img_name, i)","bdf8abb8":"pwd","eb4bdbbd":"convert_pixels_to_image(0)","3bbaaafa":"cd ..","73f48f44":"convert_pixels_to_image(1)","c7b15663":"cd ..","5b4a8fc8":"convert_pixels_to_image(2)","42870894":"cd ..","e6cecf6d":"convert_pixels_to_image(3)","1218f391":"cd ..","861004d4":"convert_pixels_to_image(4)","268e8d87":"cd ..","b77a40ad":"convert_pixels_to_image(5)","b056882b":"cd ..","c8ce3d1f":"convert_pixels_to_image(6)","646d5ab7":"### Now let us repeat the process for `surprise`","b8f5d1b2":"### test_df\n> Will contain all the classes of images from the private test dataset of the original dataset.","e2b115f9":"# -------Finally we are done with creation of `train` set--------","1d9e05d7":"## Then `fear`\n> 2: 'fear', ","4e7b61b1":"# Now let us repeat the process for `happiness`\n> 3: 'happiness'","b50bf45a":"**Fially** we can now create a directory named `disgust` and store all the pixels after the conversion into images.","6b18ad0b":"# Now let us repeat the process for `neutral`\n> 6: 'neutral'","be32d21b":"## Preparation of the Test Dataset","8082bbc3":"So, Our Dataset contains: <br>`28709`: Training sets,<br> `3589`: Public Test Sets<br> `3589`: Private Test Set","18299ed9":"# Now let us repeat the process for `fear`\n> 2: 'fear'","60c3587c":"We have 7 different classes, so let us represent them in textual format","0898742b":"## Let us start with `anger`\n> 0: 'anger',","f5ea4df7":"## train_df\n> Will contain all the images of all classes from the `Traing` and `PublicTest` of the original dataset.","a66c0420":"Now the **disgust** datframe is containg all the rows of the **training** dataframe with `emotion == 1` row","da2b9344":"Now the `disgust_images_pixels` contains only the pixels.","e8ecb103":"> 0: 'anger',","d9ea34c1":"Let's go serially with this set from `0-6`","d4ccf998":"## Preparing the Dataset","4c5e6df0":"## Preparation of the `train` Dataset","0fb03043":"## Separation of the images to their respective classes","d2e605d6":"# Now let us repeat the process for `sadness`\n> 4: 'sadness'","49e6d24e":"## Then `disgust`\n> 1: 'disgust', ","603754ab":"So lets target the `disgust` emotion first as it contains the less pixels,<br>\n> 1: 'disgust'","3cf2eb5a":"Our first step will be to assign the `emotion` rows containing all the `disgust` emotion to a single variable. ","27230865":"## Then `neutral`\n> 6: 'neutral'   ","2e9933f9":"So now let us seprate the `pixels` coloumn and store it in different dataframe.","5e4582be":"## Then `sadness`\n> 4: 'sadness',","31b60fd2":"### Now let us repeat the process for `anger`","cd49a60e":"Lets try to see if Facial expression recognistion works in this attempt\n\n# THIS IS A WIP MODEL\n\n\n\n\nThe `train` and `test` are the two directories containing only the images of the respective emotions.<br>\nThe `labels.txt` will contain the labels of all the `seven` labels.","d0adaad7":"Let us see how many unique emotions does our dataset has:-","119c8f44":"> 5: 'surprise'","734f59bb":"### I guess our above steps can be done in a single line with help of functions\nLets define a function","67503118":"## Then `happiness`\n> 3: 'happiness',","5ac8d40c":"Therefore, we can see that `3: 'happiness'` has the highest set of images and `6: 'neutral'` has the lowest set.","6ca00270":"We need to make a small chnage in our function to perform all our task with one go..<br>\nwe need to chnage the `train_df` to `test_df` in the second line of the function.","3122035c":"Lets create a two sets of Dataframe `train_df` and `test_df` where `train_df` will contain `Training` and `PublicTest` and the `test_df` will contain `PrivateTest`","48856806":"Let us have a look at the number of images it contains<br>\nAs this will help us in verifying the no. of images in the directory after the creation.","97aaf47f":"## Then `surprise`\n> 5: 'surprise', ","3509d470":"### Now let us define the height and widths of our images","6c25bef2":"# **Imports**","06d3039e":"Since we have defined our function to do all this task, **BUT** we have to keep onething in mind i.e., our present working directory should by the directory in which we are trying to store all our `train` dataset in."}}