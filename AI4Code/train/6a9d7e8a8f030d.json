{"cell_type":{"fec07884":"code","05e694e4":"code","6818b205":"code","c59229f7":"code","88f7c5e0":"code","1fa55b77":"code","3f253639":"code","49713730":"code","ca6cbcc4":"code","47d35f9c":"code","ffe58555":"code","8c0fb2c9":"markdown","4b906f29":"markdown","154597fe":"markdown"},"source":{"fec07884":"# Preparing convNet model\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.utils import normalize\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPool2D\nfrom tensorflow.keras.callbacks import TensorBoard\nimport pickle\nimport time\n","05e694e4":"# set tensorBoard name to realtime tracking \nNAME = \"Cats-vs-dogs-cnn-64x2-{}\".format(int(time.time()))\n\ntensorboard = TensorBoard(log_dir='logs\/{}'.format(NAME)) ","6818b205":"# LOad data\n\nX = pickle.load(open('..\/input\/pickled-cats-vs-dogs\/x.pickle', \"rb\"))\ny = pickle.load(open('..\/input\/pickled-cats-vs-dogs\/y.pickle', \"rb\"))\n\nX = X\/255.0 # normalize x","c59229f7":"y.append(0)\nlen(y)","88f7c5e0":"# deine parameters and thier vairance\ndense_layers = [0]\nlayers_sizes = [32]\nconv_layers = [3]\n","1fa55b77":"\nfor dense_layer in dense_layers:\n    for layers_size in layers_sizes:\n        for conv_layer in conv_layers:\n            NAME = \"{}-Conv-{}-nodes-{}-dense-{}\".format(conv_layer, layers_size, dense_layer, int(time.time()))\n            tensorboard = TensorBoard(log_dir='logs\/{}'.format(NAME)) \n            print(NAME)\n            \n            # define model and layers\n            model = Sequential()\n            \n            model.add(Conv2D(layers_size, (3,3), input_shape= X.shape[1:]))\n            model.add(Activation(\"relu\"))\n            model.add(MaxPool2D(pool_size=(2, 2)))\n\n            for i in range(conv_layer -1):\n                model.add(Conv2D(layers_size, (3,3)))\n                model.add(Activation(\"relu\"))\n                model.add(MaxPool2D(pool_size=(2, 2)))\n\n            model.add(Flatten()) # this is converts our 3D features to 1D vectors\n            \n            for i in range(dense_layer):\n                model.add(Dense(512))\n                model.add(Activation('relu'))\n                model.add(Dropout(0.2))\n\n            model.add(Dense(1))\n            model.add(Activation('sigmoid'))\n\n            model.compile(loss='binary_crossentropy',\n                         optimizer='adam',\n                         metrics=['accuracy'])\n            model.fit(X, y, batch_size=32, epochs =20, validation_split=0.1, callbacks=[tensorboard])","3f253639":"model.save('64x3-CNN.model')","49713730":"import cv2\nimport tensorflow as tf\n\nCATEGORIES = [\"Dog\", \"Cat\"]\n","ca6cbcc4":"# def prepare(filepath):\n#     IMG_SIZE = 50\n#     img_array = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)\n#     new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))\n#     return new_array.reshape(-1, IMG_SIZE, IMG_SIZE,1)","47d35f9c":"# load model\n# model = tf.keras.models.load_model('64x3-CNN.model') ","ffe58555":"# predict\n# prediction = model.predict([prepare('cat1.jpeg')])\n# print(CATEGORIES[int(prediction[0][0])])","8c0fb2c9":"### Optimizing our model and find best fitting parameters","4b906f29":"# We use Preprocessed dataset that have every image in size = 50 *50 ","154597fe":"### you can use saved modelto make prediction after comitting and load saved model again"}}