{"cell_type":{"995de5de":"code","65d746a1":"code","7722eb6d":"code","88afcaa7":"code","464aaf6b":"code","3fa162fd":"code","091fed77":"code","c29ee4cb":"code","8b7d261b":"code","8753be09":"code","26cfb27b":"code","9babee8e":"code","51ca69ea":"code","cc39f342":"code","0f21cb9a":"code","01dca52c":"code","3ac313d5":"code","769f6411":"code","3b474588":"code","d32dbdf8":"code","0364bb43":"code","a99e3880":"code","8453a9d5":"code","fb6202ba":"code","5fa9be4a":"code","fbe069e2":"code","d6ca4b4a":"code","e1190cde":"code","5c35178e":"code","b29e62ac":"markdown"},"source":{"995de5de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65d746a1":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns","7722eb6d":"data = pd.read_csv('\/kaggle\/input\/lending-club-loan-data-analysis\/loan_data.csv')","88afcaa7":"data.head()","464aaf6b":"data.columns = ['Credit Policy', 'Loan Purpose', 'Interest Rate', 'Installment', 'Annual Income Log Report', \n                'Debt to Income Ratio', 'FICO Score', 'Days with Credit Line', 'Revolving balance', 'Revolving utilization rate', \n                'Inquiries in last Six Months', 'Delinquency Frequency', 'Public Derogatory Records', 'Will Default']","3fa162fd":"data.head()","091fed77":"# Checking the missing values. \ndata.info()","c29ee4cb":"plt.figure(figsize=(30,6))\nsns.countplot(data = data, x = data.info(), palette='dark')","8b7d261b":"from sklearn.preprocessing import LabelEncoder\nft = LabelEncoder()\ndata_labels = ft.fit_transform(data['Loan Purpose'])\ndata_mappings = {index: label for index, label in \n                  enumerate(ft.classes_)}\ndata_mappings","8753be09":"data['Loan Purpose'] = data_labels\ndata","26cfb27b":"data.info()","9babee8e":"data['Loan Purpose'].unique()","51ca69ea":"data_policy = data.copy()\ndata_policy['Credit Policy'] = data_policy['Credit Policy'].map({0: 'Non Credit Underwriting Criteria',\n                                                                  1: 'Credit Underwriting Criteria'})\ndata_policy['Will Default'] = data_policy['Will Default'].map({0: 'No', 1: 'Yes'})\nplt.figure(figsize=(14,6), dpi = 100)\nsns.countplot(data = data_policy, x = 'Credit Policy', hue= 'Will Default', palette = 'dark')\nplt.title('Distribution of Credit Policy')\nplt.show()","cc39f342":"data_credit = data.groupby('Credit Policy')","0f21cb9a":"data_corr = data[['Interest Rate', 'Installment', 'Annual Income Log Report', 'Debt to Income Ratio', \n      'FICO Score','Days with Credit Line', 'Revolving balance', 'Revolving utilization rate',\n      'Inquiries in last Six Months', 'Delinquency Frequency']].copy()\nplt.figure(figsize=(14,8), dpi = 100)\nsns.heatmap(data_corr.corr(),annot=True)","01dca52c":"data_scat = data[['Interest Rate', 'Revolving utilization rate', 'Will Default']].copy()\nplt.figure(figsize = (14,6))\nsns.scatterplot(data = data_scat, x = 'Interest Rate', y = 'Revolving utilization rate', hue = 'Will Default')\nplt.show()","3ac313d5":"X = data.drop('Will Default', axis = 1)\ny = data['Will Default'].copy()","769f6411":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.models import load_model\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom pickle import dump, load","3b474588":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.75, test_size=0.25, random_state = 101)","d32dbdf8":"scaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","0364bb43":"model = Sequential()\n","a99e3880":"model.add(Dense(19, activation='relu'))\n\nmodel.add(Dense(10, activation='relu'))\n\nmodel.add(Dense(5, activation='relu'))\n\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy'])\n\nearly_stop = EarlyStopping(monitor='val_loss',mode='min',verbose=1,patience=25)\n\nmodel.fit(X_train,y_train,epochs=300,batch_size=256,validation_data=(X_test, y_test),callbacks=[early_stop])\n","8453a9d5":"model.summary()","fb6202ba":"loss, acc = model.evaluate(X_test, y_test, verbose=0)\nprint('Accuracy: %.3f'  % acc)\nprint('Loss: %.3f' % loss)","5fa9be4a":"y_predict = model.predict(X_test)","fbe069e2":"y_predict[0]","d6ca4b4a":"np.argmax(y_predict[0])","e1190cde":"from sklearn import metrics\ny_pred = []\nfor val in y_predict:\n    y_pred.append(np.argmax(val))\n#print(y_pred)    \n#convert 0 1 to 1 and 1 0 as 0\ncm = metrics.confusion_matrix(y_test,y_pred)\nprint(cm)","5c35178e":"cr=metrics.classification_report(y_test,y_pred)\nprint(cr)","b29e62ac":"From the above graph, we can see that there are no null values and also see that the data is balanced. \nNow, lets do the EDA, so that we can conclude the data and start preparing for the predictive modelling. "}}