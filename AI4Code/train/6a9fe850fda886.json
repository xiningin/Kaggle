{"cell_type":{"57b0c812":"code","535e5a40":"code","04386bc8":"code","a4733ce1":"code","18018d76":"code","5eba165e":"code","287f6e2e":"code","5313767f":"code","e78ab53e":"code","7f79d6b5":"code","0ba5c981":"code","992080ea":"code","0494bf2e":"code","67397d9d":"code","ce27daba":"code","41f89d0e":"code","66a80a02":"code","31c9762f":"code","fe8cebc2":"code","029d3866":"code","0f0ba249":"code","11740e7c":"code","e53c8765":"code","26fc5cbf":"code","e6f902f7":"code","70a32e56":"code","5db9f552":"code","f769683d":"code","19639fbd":"code","1aabfcda":"markdown","ecfe9b1b":"markdown","8e1ef76c":"markdown","b99dfb58":"markdown","3fd87860":"markdown","8e7ae91a":"markdown","818efac1":"markdown","2e9f8729":"markdown","bc5848d9":"markdown","1b0b14d5":"markdown","c06eda65":"markdown","4dd38da7":"markdown","0e149784":"markdown","07412ad0":"markdown"},"source":{"57b0c812":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","535e5a40":"## Importing the Libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nimport plotly.graph_objects as go\n","04386bc8":"## Loading the Dataset:\n\ntrain_x = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\")\ncalendar = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/calendar.csv\")\nprice = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sell_prices.csv\")\n","a4733ce1":"train_x.head(10)","18018d76":"train_x.dtypes","5eba165e":"train_x.isnull().sum()","287f6e2e":"train_x['cat_id'].value_counts()","5313767f":"train_x['dept_id'].value_counts()","e78ab53e":"train_x['store_id'].value_counts()","7f79d6b5":"train_x['state_id'].value_counts()","0ba5c981":"train_x.columns","992080ea":"calendar.head(10)","0494bf2e":"calendar.shape","67397d9d":"calendar.dtypes","ce27daba":"calendar.columns","41f89d0e":"## Event_name_1: is basically an event occuring on that particular day. \ncalendar['event_name_1'].value_counts()","66a80a02":"## Event_name_2 : Only 5 values are present and further there will be NAN values.\n## Not sure whether it is useful or not.\ncalendar['event_name_2'].value_counts()","31c9762f":"train_x.columns","fe8cebc2":"\ntrain_x['Units'] = train_x.sum(axis=1, skipna=True)\ntrain_x.head()","029d3866":"data = pd.concat([train_x,calendar],axis=1)\ndata.head()","0f0ba249":"price.head()","11740e7c":"print(price.isnull().sum())\nprint()\nprint(price.shape)","e53c8765":"# Let's see the price variation.\nsns.boxplot(price['store_id'],price['sell_price']).set_title(\"SELLING PRICE DISTRIBUTION FOR DIFFERENT STORE\")","26fc5cbf":"## Let's see these Outliers:\ntemp=price[price['sell_price']>100]\nprint(temp.shape)\nprint()\nprint(temp)","e6f902f7":"temp = train_x['Units'].head(100)\nsns.boxplot(temp).set_title(\"DISTRIBUTION OF UNITS SOLD\")","70a32e56":"plt.bar(x=train_x['cat_id'],height=train_x['Units'])\nplt.xlabel(\"CATEGORIES\")\nplt.ylabel(\"UNITS SOLD\")\nplt.title(\"UNITS SOLD CATEGORY WISE\")\nplt.show()","5db9f552":"plt.bar(x=train_x['state_id'],height=train_x['Units'])\nplt.xlabel(\"STATES\")\nplt.ylabel(\"UNITS SOLD\")\nplt.title(\"UNITS SOLD STATES WISE\")\nplt.show()","f769683d":"sns.barplot(x='cat_id',y='Units',\n           hue='state_id',\n           data=train_x).set_title(\"UNITS SOLD IN STATES IN DIFFERENT CATEGORIES\")","19639fbd":"a4_dims = (11.7, 8.27)\nfig, ax = plt.subplots(figsize=a4_dims)\nsns.barplot(x='dept_id',y='Units',\n           hue='state_id',\n           data=train_x,ax=ax).set_title(\"UNITS SOLD IN STATES IN DIFFERENT DEPARTMENTS\")\n\n\n\n## ax : matplotlib Axes, optional\n## Axes object to draw the plot onto, otherwise uses the current Axes.\n## PROCESS:\n## Give Dimensions:\n## use plt.subplots and then put ax inside sns.barplot.","1aabfcda":"## 1. Train_x Data Analysis.\n","ecfe9b1b":"***COLUMN UNITS***\n\n- here Units column is displaying the value of good sold over 1913 days.\n\n- For Example: 1st product is sold 600 times and 2nd 493 over this course.\n","8e1ef76c":"## 3. Merging Two Dataframes.","b99dfb58":"- Clearly the dataset is clean.","3fd87860":"- So clearly no NULL Values.","8e7ae91a":"**This Plot clearly shows that most number of good solds is from the Food Category**\n\n- Let's try something for state's now. ","818efac1":"## INSIGHTS:\n\n- Clearly in all three states Category **Food is most Sold**.\n\n- CA(California) has the Most units sold in all three categories.","2e9f8729":"1. ID : Basically contains three specific Categories: \n      \n      1.Hobbies , 2. Household,  3.Food\n      \n(This is same for first 4 columns.)\n\n2. State_ID : This dataset contains 3 states data with 3 stores each in every state.\n\n3. Store_ID : 9 stores, 3 for every state.\n\n4. d1 - d1913 : 1913 days, containing the number of units sold of that particular product on that particular day.\n\n(that means if d5 has the value 5 under it, it means that that particular product is sold 5 times(5 units) that day.)\n\n\n","bc5848d9":"# DATA VISUALIZATION","1b0b14d5":"## 2. Calendar Data Analysis:","c06eda65":"# DATA ANALYSIS","4dd38da7":"## 4. Sell_Prices dataset","0e149784":"- CA stands for California\n\n- WI Stands for Wisconsin\n\n- TX Stands for Texas.\n\n- UNITS SOLD ORDER: [ CA(CALIFORNIA) > TX(TEXAS) > WI(WISCONSIN) ]","07412ad0":"- Clearly Every id is OBJECT and all the day values are integer.( d1 - d1913 )"}}