{"cell_type":{"8a9e5604":"code","c874ba46":"code","c86a56b1":"code","b8b44e30":"code","02a037f2":"code","7f447340":"code","8443eb41":"code","89fb1b8e":"code","25936ccd":"code","1f4bce4a":"code","e4c1000f":"code","dc61991e":"code","a9da5091":"markdown","d1c90914":"markdown","6a86c237":"markdown","7dffe284":"markdown","89942150":"markdown","e5add964":"markdown"},"source":{"8a9e5604":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c874ba46":"import pandas as pd\nimport numpy as np\nfrom catboost import CatBoostRegressor, Pool\nfrom sklearn.metrics import mean_squared_error\nfrom itertools import combinations","c86a56b1":"df = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv', parse_dates=['date'])","b8b44e30":"df.head()","02a037f2":"def weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division(((x['total_revenue']*100)),x['measurable_impressions'])*1000 , axis=1)","7f447340":"drop_cols = set([\n    \"total_revenue\",\n    \"date\",\n    \"CPM\",\n    \"total_impressions\",\n    \"viewable_impressions\",\n    \"revenue_share_percent\",\n    \"measurable_impressions\"\n])\nused_cols = set(df.columns) - drop_cols","8443eb41":"new_cols = set()\nfor col1, col2 in combinations(used_cols, 2):\n    col = f\"{col1}_{col2}\"\n    new_cols.add(col)\n    df[col] = df[col1] * 100000 + df[col2]\nused_cols |= new_cols","89fb1b8e":"len(used_cols)","25936ccd":"df = df.sort_values(\"date\")\ndf_train = df.query(\"(date < '2019-06-17') and (CPM >= 0)\")\ndf_train = df_train[df_train[\"CPM\"] < df_train[\"CPM\"].quantile(0.95)]\n\ndf_val = df.query(\"(date >= '2019-06-17') and (date < '2019-06-22') and (CPM >= 0)\")\ndf_val = df_val[df_val[\"CPM\"] < df_val[\"CPM\"].quantile(0.95)]\n\ndf_test= df.query(\"(date >= '2019-06-22') and (CPM >= 0)\")\ndf_test = df_test[df_test[\"CPM\"] < df_test[\"CPM\"].quantile(0.95)]\n\ndf_train.shape, df_val.shape, df_test.shape","1f4bce4a":"train_set = Pool(\n    df_train[used_cols],\n    df_train[\"CPM\"],\n    cat_features=used_cols\n)\neval_set = Pool(\n    df_val[used_cols],\n    df_val[\"CPM\"],\n    cat_features=used_cols\n)\n\nmodel = CatBoostRegressor(\n    iterations=100,\n    loss_function='RMSE',\n    verbose=False\n)\n\nmodel.fit(\n    train_set,\n    eval_set=eval_set,\n    plot=True\n)","e4c1000f":"y_pred = model.predict(df_test[used_cols])\ny_true = df_test[\"CPM\"].values","dc61991e":"mean_squared_error(y_true, y_pred)","a9da5091":"## features","d1c90914":"## split data","6a86c237":"## read and prepare data","7dffe284":"## score","89942150":"generate interactions","e5add964":"## build model"}}