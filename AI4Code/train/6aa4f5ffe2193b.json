{"cell_type":{"80b172ad":"code","c4dc0687":"code","8f4d1b56":"code","04c2ae41":"code","138eeee1":"code","e21a9a89":"code","c794e0d4":"code","09623e13":"code","289b3dc2":"code","ed683c5c":"code","d51e1b61":"code","9075568c":"code","f097e9be":"code","f1abf2b5":"code","d44e9d87":"code","e292906a":"code","a25fe73f":"code","5a8c4821":"code","62a501e7":"code","77c11e9a":"code","5904dc43":"code","a61dc77a":"code","78c1d0d6":"code","62ba5059":"code","7f44c680":"code","fcd51934":"code","0e0bdc24":"code","5fac77a9":"code","26ef8427":"code","153ac03b":"code","2b053137":"code","cdee1814":"code","1cd522df":"code","133fe56a":"code","782fecfc":"code","5269e8b4":"code","799eab91":"code","a8d85e16":"code","bae9174f":"code","edcb5537":"code","6949cc30":"code","5840da62":"code","1b29eacf":"code","a76d8d2f":"code","6001eea2":"code","fc847ce0":"code","db3a526a":"code","407a36f5":"code","59d518ef":"code","9b5fd686":"code","c5dc4f74":"code","cc80c19f":"code","60efab49":"code","1e173e09":"code","d00c4cc0":"code","ffe7bc5b":"code","8399884d":"code","92df612f":"code","868b015c":"code","8025ae48":"code","951b1742":"code","9f6e1fc7":"code","a335005e":"code","d3c59bd8":"code","737af6d9":"code","639987de":"code","d8e54706":"code","00199855":"code","c1610765":"code","875d30de":"code","fd3c5f9a":"code","5c0ae0f7":"code","e638f085":"code","4e50522a":"code","0bbad8b7":"code","59fa5075":"code","ff9aebe6":"code","a1e15d69":"code","d390289f":"code","a118728f":"code","3f9f78d7":"code","aa3f9aa1":"code","bae593ad":"code","7515aeb7":"code","aa0c789d":"code","bf76eb87":"code","89552880":"code","7de310a7":"code","a7e745cb":"code","6185311c":"code","6608565e":"code","946a42fd":"code","8c07e527":"code","b53013e2":"code","cb6626fc":"code","00c0df9e":"code","d0236af3":"code","fcc5ab9e":"code","d4650285":"code","13b0ab0a":"code","00212347":"code","f82e2517":"code","29f27ad8":"code","50c96d02":"code","6d38ba9a":"code","4d28db35":"code","cd6a635d":"code","3b019ba2":"code","f2fa1812":"code","b9113138":"code","a8af46f6":"code","e619804e":"code","ee3c5c1a":"code","95936beb":"code","7416579b":"code","11c8afba":"code","cf403aa5":"code","21db766d":"code","d0280426":"code","0e987c99":"code","8e7ffcb4":"code","17c9d485":"code","eed9204a":"code","92f116c7":"code","2b4465af":"code","98a7b8e2":"code","550a20c0":"code","0ec9aef7":"code","7e13fe69":"code","5918c176":"code","0d2e2a97":"code","eea760b8":"code","113e868a":"code","7014ea8b":"code","9e30b26c":"code","23aa4e77":"code","3ce78536":"code","3a545ad6":"code","50106bb0":"code","126c9f5b":"code","4c2421b5":"code","e454047e":"code","3b0fa62e":"code","0d35380c":"code","6e7a7288":"code","9f45b161":"code","cf5881d4":"code","bdeeb118":"code","c9abcd86":"code","42bdc2a1":"code","80181604":"code","88aa4bbd":"code","6411ff6c":"code","c5f22b8b":"code","19043a80":"code","1a7cd9e6":"code","652f04f1":"code","613e3c1b":"code","4b60a4c0":"code","dcf7a880":"code","473d6315":"code","9102e7de":"code","114d6f47":"code","c16b60ad":"code","e28018c5":"code","f8fa92e3":"code","bd64f5b5":"code","6c875548":"code","1d7c636b":"code","d6f61907":"code","202e4f93":"code","cebeab7c":"code","e2e604f6":"code","703ada5a":"code","aa791f28":"code","11ecadb9":"code","26790319":"code","afca5f09":"code","6a54ca41":"code","81f6f96c":"code","152937fc":"code","49fa3de8":"code","9f8844a7":"code","8b5313bb":"code","b07f9bac":"code","6956482e":"code","ee67a4cc":"code","e59b33dc":"code","fee4e875":"code","1f84d5ba":"code","528d6cb2":"code","a475f6a5":"code","c42dcdda":"code","900f2aa5":"code","bce11dc0":"code","f0323e43":"code","91335a98":"code","dc24172a":"code","869b70bf":"code","5a7e4547":"code","7b6e212b":"code","b20a0250":"code","80e837ac":"code","719ed7c2":"code","1c8c2b74":"code","81b998e8":"code","9de51b43":"code","af3b1933":"code","bc113843":"code","9f71730f":"code","1363da2b":"code","748c06c6":"code","79dc5b3d":"code","a424cf9d":"code","84c6a798":"code","9c14013f":"code","3ee49ba6":"code","e6270687":"code","bd65f6f1":"code","6906a9ce":"code","aedafaf5":"code","e9e196ad":"code","247e40cc":"code","323c9887":"code","a63316dc":"code","763a2e0d":"code","881413e3":"code","4139063c":"code","c0d617d8":"markdown","ae5d6aa2":"markdown","2f8908a2":"markdown","45227a24":"markdown","04d77de2":"markdown","8cab3b85":"markdown","3ce5d284":"markdown","efb486b6":"markdown","13fc1d03":"markdown","b3c83c24":"markdown","317fa17f":"markdown","6f26b1df":"markdown","8ff83441":"markdown","3d050189":"markdown","461d417f":"markdown","e983e17a":"markdown","f35e49e3":"markdown","97ee34d2":"markdown","3750e02d":"markdown","4add84b9":"markdown","11e71cda":"markdown","a21cba46":"markdown","3971d415":"markdown","1cb6bf0f":"markdown","b84bf894":"markdown","0aa2e8cf":"markdown","d1500636":"markdown","5b62121b":"markdown","5e72ace8":"markdown","a8cec915":"markdown","efa03646":"markdown","f24f946e":"markdown","737689ed":"markdown","a8c7802d":"markdown","97a077fa":"markdown","3e3a3ef7":"markdown","406e50b2":"markdown","75238052":"markdown","8876fb21":"markdown","96ec25d7":"markdown","2c0a578f":"markdown","f8506782":"markdown","6c7e6df2":"markdown","3f7c5d5a":"markdown","210e6de8":"markdown","48c53821":"markdown","b97c43a2":"markdown","b5b327c2":"markdown","e08d6bd1":"markdown","aacc7be2":"markdown","4fa0b025":"markdown","4d6de598":"markdown","0be4ae2f":"markdown","3508e3d6":"markdown","de19fceb":"markdown","507b2fc4":"markdown","93367da4":"markdown","e1c95374":"markdown","8d005b65":"markdown","bcceca52":"markdown","fe31ff6d":"markdown","a68118e8":"markdown","956c6bcd":"markdown","82d943dd":"markdown","ef2f8b39":"markdown","65158002":"markdown","96208aa7":"markdown","30fb1481":"markdown","c4ddfae8":"markdown","876401dc":"markdown","a1a8e3bd":"markdown","cbdd1046":"markdown","fb948880":"markdown","d0691d52":"markdown","bbda2140":"markdown","a8ec3d18":"markdown","b34c1d04":"markdown","862b4b69":"markdown","6e02dca7":"markdown","44488572":"markdown","5558485a":"markdown","4abce02d":"markdown","90d9bb3a":"markdown","8c32d48d":"markdown","2f942ff6":"markdown","c7fd1789":"markdown","d35177ef":"markdown","10c246c5":"markdown","ce88c020":"markdown","536684e1":"markdown","3219a101":"markdown","fdf20f4c":"markdown","8c95eeca":"markdown","d5ef5d00":"markdown","8e1bf51e":"markdown","5b97b6e5":"markdown","b739ba46":"markdown","c26e4c00":"markdown","98703c8d":"markdown","fdf5de8d":"markdown","03fb6852":"markdown","c5623bb9":"markdown","72010177":"markdown","ebbe3882":"markdown","dff21b6f":"markdown","5431441c":"markdown","d0fc953c":"markdown","a97566ea":"markdown","d6e2e5af":"markdown","9e3c7cb3":"markdown","2ee198f7":"markdown","906936c4":"markdown","0d680354":"markdown","ab7e1413":"markdown","6ad07a42":"markdown","4f0deeca":"markdown","8ed864b4":"markdown","8aa53655":"markdown","7b6d26b5":"markdown","c6496146":"markdown","c5fe56fc":"markdown","8e29baa5":"markdown","cbd8eea0":"markdown","a20a18ad":"markdown","ec00edb2":"markdown","95a01044":"markdown","eb4c0aed":"markdown","7fdadd3a":"markdown","feb98726":"markdown","42ab60cf":"markdown","2deadf59":"markdown","05e5180a":"markdown","9e3a70df":"markdown","642490df":"markdown","70e03d33":"markdown","25171413":"markdown","5bd91b93":"markdown","b8aa167b":"markdown","24449b8b":"markdown","2f0ff5e6":"markdown","b91bd657":"markdown","ad51b8c3":"markdown","9704f727":"markdown","307cd35f":"markdown","6cd80f62":"markdown","2c79c50e":"markdown","2c8c2cf0":"markdown","00dd619f":"markdown","e955c269":"markdown","44c245fa":"markdown","f07d9541":"markdown","17160689":"markdown","12682c07":"markdown","ede6cc90":"markdown","729f2d73":"markdown","34d3625a":"markdown","0c0e53ed":"markdown","80f88629":"markdown","a87f05cf":"markdown","b959ed62":"markdown","48f213ca":"markdown","5c496d0f":"markdown","5eb930d9":"markdown","612eaea2":"markdown","8057d2aa":"markdown","cfe95f1d":"markdown","9d9f071c":"markdown","77e7a3b2":"markdown","9eec32f8":"markdown","88dfe7fd":"markdown","ce094d6a":"markdown","3d3a3142":"markdown","c7a1e6b7":"markdown","1b56a5c9":"markdown","40c8c3dc":"markdown","4c2096b9":"markdown","8e54f07c":"markdown","b0f1de7c":"markdown","128dc4b2":"markdown","a6101a16":"markdown"},"source":{"80b172ad":"pip install pyspark","c4dc0687":"pip install chart_studio","8f4d1b56":"import chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)","04c2ae41":"# Set your own project id here\nPROJECT_ID = 'your-google-cloud-project'\nfrom google.cloud import bigquery\nbigquery_client = bigquery.Client(project=PROJECT_ID)","138eeee1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nfrom pyspark.sql import SparkSession\nimport pyspark.sql.functions as F\nfrom pyspark.sql.types import (StructField,StructType,StringType,IntegerType,FloatType,LongType,DateType)\n\nspark = SparkSession.builder.master('local[*]').appName(\"Zomato\").config(\"spark.some.config.option\",\"kf\").enableHiveSupport().config(\"spark.executor.memory\",\"48g\").config(\"spark.driver.memory\", \"48g\").getOrCreate()\n#spark.conf.set('spark.sql.repl.eagerEval.enabled', True)\n#spark.conf.set(\"spark.cores.max\", \"16\")\n#spark.conf.set(\"spark.driver.memory\", \"16g\")\n#spark.conf.set(\"spark.executor.memory\", \"16g\")\nspark.conf.set(\"spark.executor.memory_overhead\", \"32g\")\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport time\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom geopy.geocoders import Nominatim\nimport folium\nfrom folium.plugins import HeatMap\n\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\nimport cufflinks as cf\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'\ncf.go_offline()\n\ninit_notebook_mode(connected=True)\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import r2_score\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e21a9a89":"# Creating Schema for reading file in Pyspark\ndata_schema = [  \n               StructField('address',StringType(),True),\n               StructField('name',StringType(),True),\n               StructField('onlineOrder',StringType(),True),\n               StructField('bookTable',StringType(),True),\n               StructField('ratingsBy5',StringType(),True),  \n               StructField('votes',IntegerType(),True),\n               StructField('phone',StringType(),True),\n               StructField('location',StringType(),True),\n               StructField('restType',StringType(),True),\n               StructField('dishLiked',StringType(),True),\n               StructField('cuisines',StringType(),True),\n               StructField('approx_cost(for two people)',StringType(),True),\n               StructField('reviewsList',StringType(),True),\n               StructField('listedInType',StringType(),True),\n               StructField('listedInCity',StringType(),True),  \n              ]\nfinal_struc = StructType(fields=data_schema)","c794e0d4":"#Pandas \np1 = time.time()\nzomatoDataPandas = pd.read_csv('..\/input\/zomato-bangalore-restaurants\/zomato.csv',sep=',')\np2 = time.time()\n\nprint(\"Time taken by Pandas to read file is: {0} sec\".format(np.round(p2-p1,2)))","09623e13":"#size of the file\nstart_mem_usg = zomatoDataPandas.memory_usage(deep=True,index=False).sum() \/ 1024**2 \nprint(\"Memory usage of properties dataframe is :\",round(start_mem_usg,2),\" MB\")","289b3dc2":"p1 = time.time()\nzomatoDataPandas.info()\np2 = time.time()\n\nprint(\"Time taken by Pandas to read file is: {0} sec\".format(np.round(p2-p1,3)))","ed683c5c":"print(\"dataset contains {} rows and {} columns \".format(zomatoDataPandas.shape[0], zomatoDataPandas.shape[1]))","d51e1b61":"for col in zomatoDataPandas.columns:\n    count = zomatoDataPandas[col].isnull().sum()\n    pct_missing=np.mean(zomatoDataPandas[col].isnull())\n    print('Missing Values: {}  {}, {}%'.format(col,count,round(pct_missing*100,3)))","9075568c":"plt.figure(figsize=(18,6))\nplt.style.use('fivethirtyeight')\nsns.heatmap(zomatoDataPandas.isnull(),yticklabels=False, cbar=False, cmap= 'viridis');","f097e9be":"# droping columns  URL,menu item\nzomatoDataPandas.drop(['url','menu_item'],axis=1,inplace=True)","f1abf2b5":"#fixing phone number column and changing datatype and fixing NULL values using Interpolate\nzomatoDataPandas['phone'] = zomatoDataPandas['phone'].apply(lambda x:str(x).replace('+91','').replace(' ','').strip().split('\\r\\n')[0].strip() if '+91' or '080' in str(x) else str(x))\nzomatoDataPandas['phone'] = zomatoDataPandas['phone'].replace({'nan':'Unknown'})\n\nzomatoDataPandas['phone'] = zomatoDataPandas['phone'].apply(lambda x: '+91 ' + str(x) if (not str(x).startswith('0')) else str(x))","d44e9d87":"zomatoDataPyspark = spark.createDataFrame(zomatoDataPandas,final_struc)","e292906a":"#fixing the datatypes of the columns\nzomatoDataPandas['votes'] = pd.to_numeric(zomatoDataPandas['votes'])\n\nzomatoDataPandas['approx_cost(for two people)'] = zomatoDataPandas['approx_cost(for two people)'].apply(lambda x:str(x).replace(',','') if ',' in str(x) else str(x))\nzomatoDataPandas['approx_cost(for two people)'] = pd.to_numeric(zomatoDataPandas['approx_cost(for two people)'].replace({'nan':np.nan})).interpolate()\nzomatoDataPandas['approx_cost(for two people)'] = zomatoDataPandas['approx_cost(for two people)'].apply(lambda x:np.round(x))","a25fe73f":"#creating ratings column and fixing datatype and fixing NULL values using Interpolate\nzomatoDataPandas['ratingsBy5'] = zomatoDataPandas['rate'].apply(lambda x: str(x).split('\/')[0])\nzomatoDataPandas['ratingsBy5'] = pd.to_numeric(zomatoDataPandas['ratingsBy5'].replace('-',0).replace({'NEW': np.nan}).replace({'nan':np.nan}))\nzomatoDataPandas['ratingsBy5'] = zomatoDataPandas['ratingsBy5'].interpolate()\nzomatoDataPandas['ratingsBy5'] = zomatoDataPandas['ratingsBy5'].apply(lambda x: np.round(x,1))\n\n# droping rate column\nzomatoDataPandas.drop(['rate'],axis=1,inplace=True)\n\n#data['approx_cost(for two people)'] = data['approx_cost(for two people)'].astype(int)","5a8c4821":"zomatoDataPandas.fillna({'location':zomatoDataPandas['location'].mode().values[0]},inplace=True)\n\nzomatoDataPandas.fillna({'cuisines':zomatoDataPandas['cuisines'].mode().values[0]},inplace=True)","62a501e7":"zomatoDataPandas.fillna({'dish_liked':'Unknown'},inplace = True)\n\nzomatoDataPandas.fillna({'rest_type':'Unknown'},inplace=True)","77c11e9a":"plt.figure(figsize=(18,6))\nplt.style.use('fivethirtyeight')\nsns.heatmap(zomatoDataPandas.isnull(),yticklabels=False, cbar=False, cmap= 'viridis');","5904dc43":"# checking if any Null\/Nan still exists\nfrom pyspark.sql.functions import isnan,isnull, when, count, col\n\nzomatoDataPyspark.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in zomatoDataPyspark.columns]).toPandas()","a61dc77a":"zomatoDataPyspark = zomatoDataPyspark.withColumn('votes',zomatoDataPyspark['votes'].cast('integer'))\n\nzomatoDataPyspark = zomatoDataPyspark.withColumn('approx_cost(for two people)',F.regexp_replace('approx_cost(for two people)',',','').cast('integer'))\n\nzomatoDataPyspark = zomatoDataPyspark.withColumn('approx_cost(for two people)', F.round('approx_cost(for two people)'))\n\nzomatoDataPyspark= zomatoDataPyspark.withColumn('ratingsBy5',F.trim(F.split(zomatoDataPyspark['ratingsBy5'],'\/')[0]).cast('float'))","78c1d0d6":"zomatoDataPandas['ratingsBy5'].mean()","62ba5059":"# replacing Null values with Mean\nzomatoDataPyspark = zomatoDataPyspark.fillna({'ratingsBy5':3.65})\nzomatoDataPyspark = zomatoDataPyspark.withColumn('ratingsBy5', F.round('ratingsBy5',1))","7f44c680":"zomatoDataPyspark.select(F.mean(zomatoDataPyspark['approx_cost(for two people)']).alias('meanCost')).show()","fcd51934":"zomatoDataPyspark.select(F.mean(zomatoDataPyspark['votes']).alias('meanVotes')).show()","0e0bdc24":"zomatoDataPyspark = zomatoDataPyspark.fillna({'approx_cost(for two people)':554.4,'votes':283.7,'location':'Unknown',\\\n                                              'restType':'Unknown','cuisines':'Unknown','reviewsList':'Unknown',\\\n                                              'listedInType':'Unknown','listedInCity':'Unknown','dishLiked':'Unknown'})","5fac77a9":"zomatoDataPyspark = zomatoDataPyspark.withColumn('restType',F.regexp_replace('restType','NaN','Unknown'))\nzomatoDataPyspark = zomatoDataPyspark.withColumn('location',F.regexp_replace('location','NaN','Unknown'))\nzomatoDataPyspark = zomatoDataPyspark.withColumn('cuisines',F.regexp_replace('cuisines','NaN','Unknown'))\nzomatoDataPyspark = zomatoDataPyspark.withColumn('dishLiked',F.regexp_replace('dishLiked','NaN','Unknown'))","26ef8427":"zomatoDataPyspark.printSchema()","153ac03b":"# checking if any Null\/Nan still exists\nfrom pyspark.sql.functions import isnan,isnull, when, count, col\nzomatoDataPyspark.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in zomatoDataPyspark.columns]).toPandas().head()","2b053137":"# Droping Duplicate rows\ns1= time.time()\nzomatoDataPandas = zomatoDataPandas.drop_duplicates()\ns2 = time.time()\n\np1 = time.time()\nzomatoDataPyspark = zomatoDataPyspark.drop_duplicates()\np2 = time.time()\n\nprint(\"Time taken by Pandas to drop duplicates is: {0} sec\".format(np.round(p2-p1,3)))\nprint(\"Time taken by PySpark to drop duplicates is: {0} sec\".format(np.round(s2-s1,3)))\n\nzomatoDataPandas.shape","cdee1814":"zomatoDataPandas.columns =['address', 'name', 'onlineOrder', 'bookTable', 'votes', 'phone',\n       'location', 'restType', 'dishLiked', 'cuisines',\n       'approxCost(2 people)', 'reviewsList', 'listedInType',\n       'listedInCity', 'ratingsBy5']\n\n\n# Fixing column order in better way\nzomatoDataPandas = zomatoDataPandas[['name','address','location','phone','onlineOrder', 'bookTable', 'votes',\n       'restType', 'dishLiked', 'cuisines',\n       'approxCost(2 people)', 'reviewsList', 'listedInType',\n       'listedInCity', 'ratingsBy5']]","1cd522df":"zomatoDataPyspark = zomatoDataPyspark.withColumnRenamed('approx_cost(for two people)','approxCost(2 people)')\n\n# Fixing column order in better way\nzomatoDataPyspark = zomatoDataPyspark.select(['name','address','location','phone','onlineOrder', 'bookTable', 'votes',\n       'restType', 'dishLiked', 'cuisines',\n       'approxCost(2 people)', 'reviewsList', 'listedInType',\n       'listedInCity', 'ratingsBy5'])","133fe56a":"zomatoDataPyspark = zomatoDataPyspark.persist()","782fecfc":"zomatoDataPandas.head(5)","5269e8b4":"zomatoDataPandas.describe()\nzomatoDataPyspark.describe(['location','votes','approxCost(2 people)','ratingsBy5','restType','listedInType','cuisines']).show()","799eab91":"zomatoDataPandas_withoutOutliers = zomatoDataPandas.copy()","a8d85e16":"zomatoDataPyspark_withoutOutliers = zomatoDataPyspark","bae9174f":"print(\"Skewness of votes\",zomatoDataPandas_withoutOutliers['votes'].skew())\nprint(\"Skewness of ratings\",zomatoDataPandas_withoutOutliers['ratingsBy5'].skew())\nprint(\"Skeness of cost\",zomatoDataPandas_withoutOutliers['approxCost(2 people)'].skew())","edcb5537":"zomatoDataPyspark_withoutOutliers.agg(F.skewness(zomatoDataPyspark_withoutOutliers['votes']).alias(\"Skewness of Votes\"),\\\n                                      F.skewness(zomatoDataPyspark_withoutOutliers['ratingsBy5']).alias(\"Skewness of Ratings\"),\\\n                                      F.skewness(zomatoDataPyspark_withoutOutliers['approxCost(2 people)']).alias(\"Skewness of Cost\")\\\n                                     ).show()","6949cc30":"fig = plt.figure(figsize=(15,5))\nfig.patch.set_facecolor('olive')\nplt.style.use('grayscale')\nplt.subplot(121)\nsns.distplot(zomatoDataPandas_withoutOutliers['ratingsBy5'],kde_kws={\"shade\": True})\nplt.subplot(122)\nsns.boxplot(y=zomatoDataPandas_withoutOutliers['ratingsBy5']);","5840da62":"IQR = zomatoDataPandas_withoutOutliers['ratingsBy5'].quantile(0.75) - zomatoDataPandas_withoutOutliers['ratingsBy5'].quantile(0.25)\n\nLower_fence = zomatoDataPandas_withoutOutliers['ratingsBy5'].quantile(0.25) - (IQR * 1.5)\nUpper_fence = zomatoDataPandas_withoutOutliers['ratingsBy5'].quantile(0.75) + (IQR * 1.5)\n\nprint(\"Upper Bound:- {0} ,Lower Bound:- {1} , IQR:- {2} \".format(round(Upper_fence,2),round(Lower_fence,2), round(IQR,2)))\n# lets look at the actual number of passengers on the upper Fare ranges\n\nprint('total rating: {}'.format(zomatoDataPandas_withoutOutliers['ratingsBy5'].shape[0]))\n\nprint('ratings more than 5.05: {}'.format(\n    zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['ratingsBy5'] > 5].shape[0]))\n\nprint('ratings less that 2.25: {}'.format(\n    zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['ratingsBy5'] < 2.25].shape[0]))","1b29eacf":"# Let's calculate the boundaries outside which sit the outliers\n# assuming Age follows a Gaussian distribution\n\nUpper_boundary = zomatoDataPandas_withoutOutliers['ratingsBy5'].mean() + 3* zomatoDataPandas_withoutOutliers['ratingsBy5'].std()\nLower_boundary = zomatoDataPandas_withoutOutliers['ratingsBy5'].mean() - 3* zomatoDataPandas_withoutOutliers['ratingsBy5'].std()\n\nUpper_boundary, Lower_boundary\nprint(\"Upper_boundary:- {0} , Lower_boundary:- {1}\".format(round(Upper_boundary,2),round(Lower_boundary,2)))\nprint('total rating: {}'.format(zomatoDataPandas_withoutOutliers['ratingsBy5'].shape[0]))\n\nprint('ratings more than 5.02: {}'.format(\n    zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['ratingsBy5'] > 5].shape[0]))\n\nprint('ratings less that 2.27: {}'.format(\n    zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['ratingsBy5'] < 2.27].shape[0]))","a76d8d2f":"# total rows where outliers are there\nlen(zomatoDataPandas_withoutOutliers.loc[~(zomatoDataPandas_withoutOutliers['ratingsBy5']>Lower_boundary) & (zomatoDataPandas_withoutOutliers['ratingsBy5']<Upper_boundary)])","6001eea2":"# replacing outliers values (values less than lower bound i.e 2.27) with median\nzomatoDataPandas_withoutOutliers['ratingsBy5'] = np.where(zomatoDataPandas_withoutOutliers['ratingsBy5'] < Lower_boundary,zomatoDataPandas_withoutOutliers['ratingsBy5'].median(),zomatoDataPandas_withoutOutliers['ratingsBy5'])","fc847ce0":"fig = plt.figure(figsize=(15,5))\nfig.patch.set_facecolor('olive')\nplt.style.use('grayscale')\n\nplt.subplot(121)\nsns.distplot(zomatoDataPandas_withoutOutliers['ratingsBy5'],kde_kws={\"shade\": True})\nplt.subplot(122)\nsns.boxplot(y=zomatoDataPandas_withoutOutliers['ratingsBy5']);","db3a526a":"fig = plt.figure(figsize=(15,5))\nfig.patch.set_facecolor('salmon')\nplt.style.use('grayscale')\nplt.subplot(121)\nsns.distplot(zomatoDataPandas_withoutOutliers['approxCost(2 people)'],kde_kws={\"shade\": True})\nplt.subplot(122)\nsns.boxplot(y=zomatoDataPandas_withoutOutliers['approxCost(2 people)']);","407a36f5":"IQR = zomatoDataPandas_withoutOutliers['approxCost(2 people)'].quantile(0.75) - zomatoDataPandas_withoutOutliers['approxCost(2 people)'].quantile(0.25)\n\nLower_fence = zomatoDataPandas_withoutOutliers['approxCost(2 people)'].quantile(0.25) - (IQR * 1.5)\nUpper_fence = zomatoDataPandas_withoutOutliers['approxCost(2 people)'].quantile(0.75) + (IQR * 1.5)\n\nprint(\"Upper Bound:- {0} ,Lower Bound:- {1} , IQR:- {2} \".format(round(Upper_fence,2),round(Lower_fence,2), round(IQR,2)))\n# lets look at the actual number of passengers on the upper Fare ranges\n\nprint('total people paying: {}'.format(zomatoDataPandas_withoutOutliers['approxCost(2 people)'].shape[0]))\n\nprint('cost more than {0}: {1}'.format(round(Upper_fence,2),\n    zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['approxCost(2 people)'] > Upper_fence].shape[0]))\n\nprint('cost more that {0}: {1}'.format(round(Lower_fence,2),\n    zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['approxCost(2 people)'] < Lower_fence].shape[0]))","59d518ef":"len(zomatoDataPandas_withoutOutliers.loc[~((zomatoDataPandas_withoutOutliers['approxCost(2 people)']>Lower_fence) & (zomatoDataPandas_withoutOutliers['approxCost(2 people)'] <Upper_fence))])","9b5fd686":"# replacing outliers values (values more than upper bound i.e 1873) with median\nzomatoDataPandas_withoutOutliers['approxCost(2 people)'] = np.where(zomatoDataPandas_withoutOutliers['approxCost(2 people)'] > Upper_fence,zomatoDataPandas_withoutOutliers['approxCost(2 people)'].median(),zomatoDataPandas_withoutOutliers['approxCost(2 people)'])","c5dc4f74":"fig = plt.figure(figsize=(15,5))\nfig.patch.set_facecolor('salmon')\nplt.style.use('grayscale')\nplt.subplot(121)\nsns.distplot(zomatoDataPandas_withoutOutliers['approxCost(2 people)'],kde_kws={\"shade\": True})\nplt.subplot(122)\nsns.boxplot(y=zomatoDataPandas_withoutOutliers['approxCost(2 people)']);","cc80c19f":"fig = plt.figure(figsize=(15,5))\nfig.patch.set_facecolor('orange')\nplt.style.use('grayscale')\nplt.subplot(121)\nsns.distplot(zomatoDataPandas_withoutOutliers['votes'],kde_kws={\"shade\": True})\nplt.subplot(122)\nsns.boxplot(y=zomatoDataPandas_withoutOutliers['votes']);","60efab49":"IQR = zomatoDataPandas_withoutOutliers['votes'].quantile(0.75) - zomatoDataPandas_withoutOutliers['votes'].quantile(0.25)\n\nLower_fence = zomatoDataPandas_withoutOutliers['votes'].quantile(0.25) - (IQR * 3)\nUpper_fence = zomatoDataPandas_withoutOutliers['votes'].quantile(0.75) + (IQR * 3)\n\nprint(\"Upper Bound:- {0} ,Lower Bound:- {1} , IQR:- {2} \".format(round(Upper_fence,2),round(Lower_fence,2), round(IQR,2)))\n# lets look at the actual number of passengers on the upper Fare ranges\n\nprint('total people voted: {}'.format(zomatoDataPandas_withoutOutliers['votes'].shape[0]))\n\nprint('vote count more than {0}: {1}'.format(round(Upper_fence,2),\n    zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['votes'] > Upper_fence].shape[0]))\n\nprint('vote count more that {0}: {1}'.format(round(Lower_fence,2),\n    zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['votes'] < Lower_fence].shape[0]))","1e173e09":"# Let's calculate the boundaries outside which sit the outliers\n# assuming Age follows a Gaussian distribution\n\nUpper_boundary = zomatoDataPandas_withoutOutliers['votes'].mean() + 3* zomatoDataPandas_withoutOutliers['votes'].std()\nLower_boundary = zomatoDataPandas_withoutOutliers['votes'].mean() - 3* zomatoDataPandas_withoutOutliers['votes'].std()\n\nUpper_boundary, Lower_boundary\nprint(\"Upper_boundary:- {0} , Lower_boundary:- {1}\".format(round(Upper_boundary,2),round(Lower_boundary,2)))\nprint('total rating: {}'.format(zomatoDataPandas_withoutOutliers['votes'].shape[0]))\n\n#print('ratings more than 5.02: {}'.format(\n#    zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['votes'] > 5].shape[0]))\n\n#print('ratings less that 2.27: {}'.format(\n#    zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['votes'] < 2.27].shape[0]))","d00c4cc0":"zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['votes'] >936.84].shape[0]","ffe7bc5b":"len(zomatoDataPandas_withoutOutliers.loc[~((zomatoDataPandas_withoutOutliers['votes'] <Upper_fence))])","8399884d":"# replacing outliers values (values more than upper bound i.e 1873) with median\nzomatoDataPandas_withoutOutliers['votes'] = np.where(zomatoDataPandas_withoutOutliers['votes'] > Upper_fence,zomatoDataPandas_withoutOutliers['votes'].median(),zomatoDataPandas_withoutOutliers['votes'])\n#zomatoDataPandas_withoutOutliers.loc[zomatoDataPandas_withoutOutliers['votes'] > 500,'votes'] = Upper_fence","92df612f":"fig = plt.figure(figsize=(15,5))\nfig.patch.set_facecolor('orange')\nplt.style.use('grayscale')\nplt.subplot(121)\nsns.distplot(zomatoDataPandas_withoutOutliers['votes'],kde_kws={\"shade\": True})\nplt.subplot(122)\nsns.boxplot(y=zomatoDataPandas_withoutOutliers['votes']);","868b015c":"print(\"Skewness of votes\",zomatoDataPandas_withoutOutliers['votes'].skew())\nprint(\"Skewness of ratings\",zomatoDataPandas_withoutOutliers['ratingsBy5'].skew())\nprint(\"Skeness of cost\",zomatoDataPandas_withoutOutliers['approxCost(2 people)'].skew())","8025ae48":"zomatoDataPyspark_withoutOutliers = zomatoDataPyspark_withoutOutliers.withColumn('votes',F.sqrt(F.cbrt(zomatoDataPyspark_withoutOutliers['votes'])))\n\nzomatoDataPyspark_withoutOutliers = zomatoDataPyspark_withoutOutliers.withColumn('approxCost(2 people)',F.cbrt(F.cbrt(F.cbrt(F.cbrt(zomatoDataPyspark_withoutOutliers['approxCost(2 people)'])))))","951b1742":"zomatoDataPyspark_withoutOutliers.agg(F.skewness(zomatoDataPyspark_withoutOutliers['votes']).alias(\"Skewness of Votes\"),\\\n                                      F.skewness(zomatoDataPyspark_withoutOutliers['ratingsBy5']).alias(\"Skewness of Ratings\"),\\\n                                      F.skewness(zomatoDataPyspark_withoutOutliers['approxCost(2 people)']).alias(\"Skewness of Cost\")\\\n                                     ).show()","9f6e1fc7":"zomatoDataPyspark_withoutOutliers = zomatoDataPyspark_withoutOutliers.withColumn('approxCost(2 people)', F.round('approxCost(2 people)',2))\nzomatoDataPyspark_withoutOutliers = zomatoDataPyspark_withoutOutliers.withColumn('votes', F.round('votes',1))","a335005e":"zomatoDataPyspark_withoutOutliers = zomatoDataPyspark_withoutOutliers.persist()","d3c59bd8":"# Creating Dataset for ML model\n# Performing 1 hot encoding for onlineOrder and bookTable\nzomatoDataForMLModel = zomatoDataPandas_withoutOutliers.copy()\n\nzomatoDataForMLModel['onlineOrder'] = zomatoDataForMLModel['onlineOrder'].replace({'Yes':1,'No':0})\nzomatoDataForMLModel['bookTable'] = zomatoDataForMLModel['bookTable'].replace({'Yes':1,'No':0})\n","737af6d9":"zomatoDataForMLModel.head(2)","639987de":"#Encode the input Variables\ndef Encode(zomato):\n    for column in zomato.columns[zomato.columns.isin(['listedInType','listedInCity', 'location'])]:\n        zomato[column] = zomato[column].factorize()[0]\n    return zomato\n\nzomatoDataForMLModel = Encode(zomatoDataForMLModel)","d8e54706":"# Standardizing votes and approxCost(2 people) values\nzomatoDataForMLModel['votes'] = np.sqrt(zomatoDataForMLModel['votes']);\nzomatoDataForMLModel['approxCost(2 people)'] =np.sqrt(np.sqrt(np.sqrt(zomatoDataForMLModel['approxCost(2 people)'])))","00199855":"zomatoDataForMLModel.head(1)","c1610765":"def Encode(zomato):\n    for column in zomato.columns[zomato.columns.isin(['name', 'address', 'restType','dishLiked','cuisines','reviewsList'])]:\n        zomato[column] = zomato[column].factorize()[0]\n    return zomato\n\nzomatoDataForMLModel = Encode(zomatoDataForMLModel)","875d30de":"# droping Phone column as it is of no use\nzomatoDataForMLModel = zomatoDataForMLModel.drop('phone',axis=1)","fd3c5f9a":"#formatting the votes and approxCost values\nzomatoDataForMLModel['votes'] = zomatoDataForMLModel['votes'].apply(lambda x: np.round(x,1))\nzomatoDataForMLModel['approxCost(2 people)'] = zomatoDataForMLModel['approxCost(2 people)'].apply(lambda x: np.round(x,1))","5c0ae0f7":"# looking at the dataset after transformation\nzomatoDataForMLModel.head(5)","e638f085":"#zomatoDataForMLModel['name'] = np.sqrt(zomatoDataForMLModel['name'])\n#zomatoDataForMLModel['address'] = np.sqrt(zomatoDataForMLModel['address'])\nzomatoDataForMLModel['location'] = np.sqrt(zomatoDataForMLModel['location'])\n#zomatoDataForMLModel['restType'] = np.sqrt(np.sqrt(zomatoDataForMLModel['restType']))\nzomatoDataForMLModel['dishLiked'] = np.cbrt(np.cbrt(np.sqrt(np.sqrt(zomatoDataForMLModel['dishLiked']))))\n#zomatoDataForMLModel['cuisines'] = np.sqrt(np.cbrt(zomatoDataForMLModel['cuisines']))\n#zomatoDataForMLModel['reviewsList'] = np.sqrt(zomatoDataForMLModel['reviewsList'])","4e50522a":"# looking at the correlation after transformation\nzomatoDataForMLModel.corr()","0bbad8b7":"fig = plt.figure(figsize=(15,8))\nfig.patch.set_facecolor('plum')\n\ncorr = zomatoDataForMLModel.corr(method='kendall')\nplt.figure(figsize=(15,8))\nsns.heatmap(corr, annot=True)\nzomatoDataForMLModel.columns;","59fa5075":"zomatoDataForMLModel.columns.to_flat_index()","ff9aebe6":"#Defining the independent variables and dependent variables\nx = zomatoDataForMLModel.iloc[:,[2,3,4,5,6,8,9]]\ny = zomatoDataForMLModel['ratingsBy5']\n\n#Getting Test and Training Set\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=353)\nx_train.head()","a1e15d69":"#Prepare a Linear Regression Model\nreg=LinearRegression()\nreg.fit(x_train,y_train)\ny_pred=reg.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_pred)","d390289f":"#Prepairng a Decision Tree Regression\nfrom sklearn.tree import DecisionTreeRegressor\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=105)\nDTree=DecisionTreeRegressor(min_samples_leaf=.0001)\nDTree.fit(x_train,y_train)\ny_predict=DTree.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","a118728f":"#Preparing Random Forest REgression\nfrom sklearn.ensemble import RandomForestRegressor\nRForest=RandomForestRegressor(n_estimators=500,random_state=329,min_samples_leaf=.0001)\nRForest.fit(x_train,y_train)\ny_predict=RForest.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","3f9f78d7":"#Preparing Extra Tree Regression\nfrom sklearn.ensemble import  ExtraTreesRegressor\nETree=ExtraTreesRegressor(n_estimators = 100)\nETree.fit(x_train,y_train)\ny_predict=ETree.predict(x_test)\n\n\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","aa3f9aa1":"zomatoDataPyspark_withoutOutliers = zomatoDataPyspark_withoutOutliers.persist()\nspark.conf.set(\"spark.sql.shuffle.partitions\",10)","bae593ad":"# location\ns1= time.time()\n\ntop_10_location = zomatoDataPandas_withoutOutliers['location'].value_counts().reset_index().head(10)\ntop_10_location.index = np.arange(1, len(top_10_location)+1)\ntop_10_location.columns =['location','count']\ntop_10_location\n\ns2 = time.time()\nprint(\"Time taken by Pandas to run Query: {0} sec\".format(np.round(s2-s1,3)))","7515aeb7":"#Creating a temporary table to write Sql Queries on it\nzomatoDataPyspark_withoutOutliers.createOrReplaceTempView(\"zomatoData\")","aa0c789d":"s1= time.time()\nTop10Location = zomatoDataPyspark_withoutOutliers.groupBy('location').count().orderBy('count',ascending=False)\nTop10Location = Top10Location.persist()\n\nTop10Location.show(10)\ns2 = time.time()\n\nprint(\"Time taken by PySpark to to run Query: {0} sec\".format(np.round(s2-s1,3)))","bf76eb87":"fig = plt.figure(figsize=(15,8))\nfig.patch.set_facecolor('mediumpurple')\nplt.style.use('bmh')\n\nax = sns.barplot(data=top_10_location,x='location',y='count', palette='gnuplot')\nsns.pointplot(data=top_10_location,x='location',y='count', palette='gnuplot',alpha=0.8,markers='p',linestyles='dashed')\nsns.set_context(rc = {'patch.linewidth': 0.9})\n\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()),(p.get_x()+p.get_width()\/2,p.get_height()),\n               ha='center',va='center',xytext=(0,10),textcoords='offset points',color='black',fontsize=20);\nplt.title(\"Top 10 Locations in Bangalore\");\nplt.xticks(rotation=60);","89552880":"unique_brands = zomatoDataPandas_withoutOutliers.name.unique()\nprint(f'{len(unique_brands)} brands are in the business.')","7de310a7":"zomatoDataPyspark_withoutOutliers.select(F.countDistinct(zomatoDataPyspark_withoutOutliers['name']).alias(\"Distinct Brands in business\")).show()","a7e745cb":"fig = plt.figure(figsize=(20,8))\nfig.patch.set_facecolor('peru')\nplt.style.use('seaborn-whitegrid')\n# Change color of text\nplt.rcParams['text.color'] = 'black'\n\nplt.subplot(121)\nlabels = zomatoDataPandas_withoutOutliers['onlineOrder'].unique() \nsizes = [len(zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['onlineOrder'] == \"Yes\"]), len(zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['onlineOrder'] == \"No\"])]\nexplode = (0, 0.1)\n\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90, colors=[\"red\",\"olive\"]);\nplt.title(\"Distribution of online Order\",fontweight='bold',fontsize=15);\n\n\nplt.subplot(122)\nlabels = zomatoDataPandas_withoutOutliers['bookTable'].unique() \nsizes = [len(zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['bookTable'] == \"Yes\"]), len(zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['bookTable'] == \"No\"])]\nexplode = (0, 0.2)\n\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90, colors=[\"Lime\",\"grey\"]);\nplt.title(\"Distribution of booked Table\",fontweight='bold',fontsize=15);\n","6185311c":"zomatoDataPandas_withoutOutliers.head(1)","6608565e":"spark.sql(\"select restType,total,concat(round(total \/ (select sum(total) from (select restType,count(*) as total \\\nfrom zomatoData group by restType order by total desc limit 10)) * 100,1),'%') as distribution from \\\n(select restType,count(*) as total from zomatoData group by restType) order by total desc limit 10 \").show()","946a42fd":"import plotly.graph_objs as go\n\nrestTypeData = zomatoDataPandas_withoutOutliers.restType.value_counts().head(10)\ncolors=['#57167E','#9B3192','#EA5F89','#F7B7A3','#FFF1C9','#E6F69D','#AADEA7','#64C2A6','#2D87BB','#3700FF']\nfig=go.Figure(data=[go.Pie(labels=restTypeData.index,values=restTypeData.values,marker=dict(colors=colors))],layout=go.Layout(title='Top 10 Types of Restaurants'))\nfig.show()\nplt.show()","8c07e527":"top6RestTypes =zomatoDataPandas_withoutOutliers.groupby('restType')['name'].count().sort_values(ascending= False).head(6)","b53013e2":"fig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('grey')\nplt.style.use('fivethirtyeight')\n\nplt.subplot(121)\ntop6RestTypes.plot.pie(autopct='%1.f%%',wedgeprops={'linewidth':10,'edgecolor':'white'},shadow=True,fontsize=20)\nplt.xticks(rotation=30)\nplt.title(\"% Wise Distribution of Restaurants\")\n\nplt.subplot(122)\ntop6RestTypes.plot(kind='bar',color='green')\ntop6RestTypes.plot(marker='o',markersize=10,color='red')\nplt.xticks(rotation=30)\nplt.title(\"Distribution of Restaurants\");\n","cb6626fc":"fig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('lightcoral')\n\nsns.set_style('darkgrid')\nsns.distplot(zomatoDataPandas_withoutOutliers['ratingsBy5'], bins = 20,  color= 'red',kde_kws={\"shade\": True});\nplt.axvline(x= zomatoDataPandas_withoutOutliers.ratingsBy5.mean(),ls='--',color='black',linewidth=4,label=\"mean\")\nplt.title(\"Distribution of Ratings\",fontweight='bold',fontsize=15);\nplt.legend([\"mean\"],prop={\"size\":22});","00c0df9e":"print('First Quantile of rate distribution is {} '.format(np.quantile(zomatoDataPandas_withoutOutliers['ratingsBy5'], 0.25)))\nprint('Second Quantile of rate distribution is {} '.format(np.quantile(zomatoDataPandas_withoutOutliers['ratingsBy5'], 0.50)))\nprint('Third Quantile of rate distribution is {} '.format(np.quantile(zomatoDataPandas_withoutOutliers['ratingsBy5'], 0.75)))\nprint('Forth Quantile of rate distribution is {} '.format(np.quantile(zomatoDataPandas_withoutOutliers['ratingsBy5'], 1)))\nprint('Average Rating is {} '.format(np.round(zomatoDataPandas_withoutOutliers['ratingsBy5'].mean(),1)))","d0236af3":"#Cost vs rating\nonlineOrder = zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['onlineOrder']=='Yes']\nnotOnlineOrder = zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['onlineOrder']=='No']\n\nfig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('chocolate')\nplt.style.use('bmh')\n\nplt.subplot(121)\nsns.scatterplot(zomatoDataPandas_withoutOutliers['approxCost(2 people)'],zomatoDataPandas_withoutOutliers.ratingsBy5,hue=zomatoDataPandas_withoutOutliers['onlineOrder']);\nplt.axhline(y= onlineOrder.ratingsBy5.mean(),ls='-',color='blue',linewidth=3)\nplt.axhline(y= notOnlineOrder.ratingsBy5.mean(),ls='-',color='red',linewidth=3)\nplt.text(x=-200,y=3.73,s=\"avgOnlineOrdRating\",color='blue')\nplt.text(x=-200,y=3.63,s=\"avgNonOnlineOrdRating\",color='red')\nplt.ylim(2.3,5);\nplt.xlim(-200,1200)\nplt.legend(loc = 'upper left');\n\nplt.title(\"Rating Vs Approx Cost wrt Online Order\",fontweight='bold',fontsize=10)\n\nplt.subplot(122)\nsns.scatterplot(zomatoDataPandas_withoutOutliers['approxCost(2 people)'],zomatoDataPandas_withoutOutliers.votes,hue=zomatoDataPandas_withoutOutliers['onlineOrder']);\nplt.title(\"Votes Vs Approx Cost wrt Online Order\",fontweight='bold',fontsize=10);\nplt.axvline(x= onlineOrder['approxCost(2 people)'].mean(),ls='-',color='blue',linewidth=3)\nplt.axvline(x= notOnlineOrder['approxCost(2 people)'].mean(),ls='-',color='red',linewidth=3)\nplt.text(x=-190,y=700,s=\"Avg Cost wrt Online order\",color='black',size=10)\nplt.ylim(-10,800);\nplt.xlim(-200,1200);\nplt.legend(loc = 'upper left');","fcc5ab9e":"zomatoDataPyspark_withoutOutliers.agg(F.round(F.corr('votes','approxCost(2 people)'),2).alias(\"corr b\/w votes n Cost\") \\\n                                     ,F.round(F.corr('ratingsBy5','approxCost(2 people)'),2).alias('corr b\/w ratingsBy5 n Cost')\\\n                                     ,F.round(F.corr('votes','ratingsBy5'),2).alias('corr b\/w votes n Cost')\n                                     ).show()","d4650285":"tableBooked = zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['bookTable']=='Yes']\nnotTableBooked = zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['bookTable']=='No']\n\nfig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('peru')\nplt.style.use('bmh')\n\n\nplt.subplot(121)\nsns.scatterplot(zomatoDataPandas_withoutOutliers.ratingsBy5,zomatoDataPandas_withoutOutliers.votes,hue=zomatoDataPandas_withoutOutliers['onlineOrder'],markers= True,style=zomatoDataPandas_withoutOutliers['onlineOrder']);\nplt.title(\"Votes Vs Rating wrt Online Order\",fontweight='bold',fontsize=10)\nplt.axvline(x= onlineOrder.ratingsBy5.mean(),ls='-',color='blue',linewidth=3,label=\"Avg OnlineOrder\")\nplt.axvline(x= notOnlineOrder.ratingsBy5.mean(),ls='-',color='red',linewidth=3,label=\"Avg NotOnlineOrder\")\nplt.xlim(2,5)\nplt.ylim(0,800)\nplt.legend(loc='upper left')\n\nplt.subplot(122)\nsns.scatterplot(zomatoDataPandas_withoutOutliers.ratingsBy5,zomatoDataPandas_withoutOutliers.votes,hue=zomatoDataPandas_withoutOutliers['bookTable']);\nplt.title(\"Rating Vs Approx Cost wrt Table Booking\",fontweight='bold',fontsize=10);\nplt.axvline(x= tableBooked.ratingsBy5.mean(),ls='-',color='blue',linewidth=3,label=\"Avg TableBooked\")\nplt.axvline(x= notTableBooked.ratingsBy5.mean(),ls='-',color='red',linewidth=3,label=\"Avg NotTable Booked\")\nplt.xlim(2,5)\nplt.ylim(0,800)\nplt.legend(loc='upper left');","13b0ab0a":"#Cost vs rating\nfig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('sandybrown')\nplt.style.use('bmh')\n\n\nplt.subplot(121)\nsns.scatterplot(zomatoDataPandas_withoutOutliers['approxCost(2 people)'],zomatoDataPandas_withoutOutliers.ratingsBy5,hue=zomatoDataPandas_withoutOutliers['bookTable'],);\nplt.axvline(x= tableBooked['approxCost(2 people)'].mean(),ls='-',color='blue',linewidth=3)\nplt.axvline(x= notTableBooked['approxCost(2 people)'].mean(),ls='-',color='red',linewidth=3)\nplt.title(\"Rating Vs Approx Cost wrt Table Booking\",fontweight='bold',fontsize=10)\nplt.text(x= 20,y=4.6,s=\"Avg Cost wrt BookTable\",color='Black',size=13)\nplt.ylim(2.3,5)\nplt.xlim(0,1200)\nplt.legend(loc='upper left')\n\nplt.subplot(122)\nsns.scatterplot(zomatoDataPandas_withoutOutliers['approxCost(2 people)'],zomatoDataPandas_withoutOutliers.votes,hue=zomatoDataPandas_withoutOutliers['bookTable']);\nplt.axhline(y= tableBooked.votes.mean(),ls='-',color='blue',linewidth=3)\nplt.axhline(y= notTableBooked.votes.mean(),ls='-',color='red',linewidth=3)\nplt.title(\"Votes Vs Approx Cost wrt Table Booking\",fontweight='bold',fontsize=10);\nplt.text(x= 0,y=202,s=\"Avg votes TableBooked\",color='Blue',size=14);\nplt.text(x= 0,y=85,s=\"Avg votes TableNotBooked\",color='Red',size=14);\nplt.ylim(-10,800)\nplt.xlim(0,1200)\nplt.legend(loc='upper left');","00212347":"#Feature Creation\nbins = [0.0,2.0,3.0,4.0,5.0]\nlabels =[\"Bad\",\"Average\",\"Good\",\"Excellent\"]\nzomatoDataPandas_withoutOutliers['RateLabel'] = pd.cut(zomatoDataPandas_withoutOutliers['ratingsBy5'],bins=bins, labels=labels)","f82e2517":"def label(ratingsBy5):\n  if ratingsBy5 <=2.0:\n    return \"Bad\"\n  elif ratingsBy5 >2 and ratingsBy5 <=3:\n    return \"Average\"\n  elif ratingsBy5 >3 and ratingsBy5 <=4:\n    return \"Good\"\n  else: \n    return \"Excellent\"","29f27ad8":"from pyspark.sql.functions import udf\n\nbucket_udf = udf(label, StringType())\n\nzomatoDataPyspark_withoutOutliers = zomatoDataPyspark_withoutOutliers.withColumn('RateLabel',bucket_udf('ratingsBy5'))","50c96d02":"zomatoDataPyspark_withoutOutliers.crosstab('restType','RateLabel').orderBy(['Excellent','Good','Bad'],ascending=[False,False,True]).show(10)","6d38ba9a":"fig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('forestgreen')\nplt.style.use('bmh')\n\npd.crosstab(zomatoDataPandas_withoutOutliers.ratingsBy5.head(1500),zomatoDataPandas_withoutOutliers.restType.head(1500)).plot(kind='bar',stacked=True,figsize= (17,12));\nplt.title('Rest Type wise Rating',fontsize=15,fontweight='bold')\nplt.ylabel('Frequency',fontsize=10,fontweight='bold')\nplt.xlabel('Rating',fontsize=10,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold');\nplt.legend(loc = 'upper left',prop={\"size\":10});","4d28db35":"fig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('forestgreen')\nplt.style.use('fivethirtyeight')\n\npd.crosstab(zomatoDataPandas_withoutOutliers.ratingsBy5.head(1500),zomatoDataPandas_withoutOutliers.location.head(1500)).plot(kind='bar',stacked=True,figsize= (17,9));\nplt.title('Location wise Rating',fontsize=15,fontweight='bold')\nplt.ylabel('Frequency',fontsize=10,fontweight='bold')\nplt.xlabel('Rating',fontsize=10,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold');\nplt.legend(loc = 'upper left');","cd6a635d":"fig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('forestgreen')\nplt.style.use('seaborn')\npd.crosstab(zomatoDataPandas_withoutOutliers.ratingsBy5,[zomatoDataPandas_withoutOutliers.RateLabel,zomatoDataPandas_withoutOutliers.listedInType]).plot(kind='bar',stacked=True,figsize= (17,10));\nplt.title('Label wise Rating wrt ListedInType',fontsize=15,fontweight='bold')\nplt.ylabel('Frequency',fontsize=10,fontweight='bold')\nplt.xlabel('Rating',fontsize=10,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold');\nplt.legend(loc = 'upper left',prop={\"size\":12});","3b019ba2":"fig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('forestgreen')\nplt.style.use('classic')\n\npd.crosstab(zomatoDataPandas_withoutOutliers.ratingsBy5,[zomatoDataPandas_withoutOutliers.onlineOrder,zomatoDataPandas_withoutOutliers.bookTable]).plot(kind='bar',stacked=True,figsize= (17,9));\nplt.title('Online Order and table booked wise Rating',fontsize=15,fontweight='bold')\nplt.ylabel('Frequency',fontsize=10,fontweight='bold')\nplt.xlabel('Rating',fontsize=10,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold');\nplt.legend(loc = 'upper left');","f2fa1812":"fig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('turquoise')\nplt.style.use('fivethirtyeight')\n\nchains=zomatoDataPandas_withoutOutliers['name'].value_counts()[:20]\nsns.pointplot(x=chains.values,y=chains.index,palette='Set1')\nax = sns.barplot(x=chains.values,y=chains.index,palette='Set1')\n\nplt.title(\"Most famous restaurant chains in Bangaluru\",size=20,pad=20)\nplt.xlabel(\"Number of outlets\",size=15)\nplt.ylabel(\"Restaurant Type\",size=15);","b9113138":"zomatoDataPyspark_withoutOutliers.groupBy('name').count().orderBy('count',ascending=False).show(20)","a8af46f6":"zomatoDataPyspark.crosstab('approxCost(2 people)','bookTable').orderBy(['Yes','No'],ascending=[False,True]).show()","e619804e":"plt.figure(figsize=(17,12))\nplt.style.use('fivethirtyeight')\ny = pd.crosstab(zomatoDataPandas_withoutOutliers['approxCost(2 people)'],[zomatoDataPandas_withoutOutliers.onlineOrder,zomatoDataPandas_withoutOutliers.bookTable]);\ny.div(y.sum(1).astype(float), axis = 0).plot(kind='bar',stacked=True,figsize= (15,5));\nplt.title('Online Order and table booked wise cost',fontsize=15,fontweight='bold')\nplt.ylabel('Frequency',fontsize=10,fontweight='bold')\nplt.xlabel('Cost',fontsize=10,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold');\nplt.legend(loc = 'best',prop={\"size\":10});","ee3c5c1a":"zomatoDataPyspark.crosstab('approxCost(2 people)','onlineOrder').orderBy(['Yes','No'],ascending=[False,True]).show()","95936beb":"#plt.figure(figsize=(17,12))\nplt.style.use('fivethirtyeight')\nfig = plt.figure(figsize=(17,10))\n\ny = pd.crosstab(zomatoDataPandas_withoutOutliers['approxCost(2 people)'],zomatoDataPandas_withoutOutliers.onlineOrder)\ny.div(y.sum(1).astype(float), axis = 0).plot(kind='bar',stacked=True,figsize= (15,5));\nplt.title('Online Order Vs Cost',fontsize=15,fontweight='bold')\nplt.ylabel('Frequency',fontsize=10,fontweight='bold')\nplt.xlabel('Cost',fontsize=10,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold');\nplt.yticks(fontsize=10,fontweight='bold');","7416579b":"fig = plt.figure(figsize=(15,5))\nfig.patch.set_facecolor('mediumorchid')\nplt.style.use('fivethirtyeight')\n\nplt.subplot(121)\nsns.boxenplot(data=zomatoDataPandas_withoutOutliers,x='onlineOrder',y='votes',hue='bookTable');\nplt.title(\"OnlineOrder Vs Votes wrt book Table\",fontweight='bold',fontsize=15);\n\nplt.subplot(122)\nsns.boxenplot(data=zomatoDataPandas,x='onlineOrder',y='approxCost(2 people)',hue='bookTable');\nplt.title(\"OnlineOrder Vs ApproxCost wrt book Table\",fontweight='bold',fontsize=15);","11c8afba":"fig = plt.figure(figsize=(17,6))\nfig.patch.set_facecolor('gold')\nplt.style.use('grayscale')\n\nplt.subplot(121)\n#Which are the most common restaurant type in Banglore?\nzomatoDataPandas_withoutOutliers.groupby('restType')['restType'].count().sort_values(ascending=False).head(10).plot(kind='bar',figsize= (17,6));\nzomatoDataPandas_withoutOutliers.groupby('restType')['restType'].count().sort_values(ascending=False).head(10).plot(kind='line',color='orange',figsize= (17,6),marker='o',markersize=9,linestyle='dashed',linewidth=3);\nplt.title('10 Most common restaurant type in Banglore')\nplt.xticks(rotation=60);\n\nplt.subplot(122)\n#Which are the most common restaurant chain in Banglore?\nzomatoDataPandas_withoutOutliers.name.value_counts().head(10).plot(kind='barh',figsize= (17,6),color='green');\n#zomatoDataPandas_withoutOutliers.name.value_counts().head(10).plot(kind='line',color='red',figsize= (17,6),marker='o',markersize=9,linestyle='dashed',linewidth=3)\nplt.title('10 Most common restaurant chain in Banglore');","cf403aa5":"zomatoDataPyspark_withoutOutliers.crosstab('onlineOrder','ratingsBy5').toPandas().head()","21db766d":"fig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('cornflowerblue')\nplt.style.use('grayscale')\n\nx = pd.crosstab(zomatoDataPandas_withoutOutliers.ratingsBy5,zomatoDataPandas_withoutOutliers.onlineOrder)\nx.div(x.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = True,color=['red','yellow'],figsize=(17,8));\nplt.title('online order vs rating', fontweight = 30, fontsize = 20)\nplt.legend(loc='upper right');","d0280426":"zomatoDataPyspark_withoutOutliers.crosstab('bookTable','ratingsBy5').toPandas().head()","0e987c99":"fig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('gold')\nplt.style.use('grayscale')\n\nx = pd.crosstab(zomatoDataPandas_withoutOutliers.ratingsBy5,zomatoDataPandas_withoutOutliers.bookTable)\nx.div(x.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = True,color=['red','yellow'],figsize=(17,8));\nplt.title('Table booked vs Rate', fontweight = 30, fontsize = 20)\nplt.legend(loc='upper right');","8e7ffcb4":"top_15_cuisines = zomatoDataPandas_withoutOutliers.cuisines.value_counts().head(15)\n\ncolors=['#57167E','#9B3192','#EA5F89','#F7B7A3','#FFF1C9','#E6F69D','#AADEA7','#64C2A6','#2D87BB','#3700FF']\nfig=go.Figure(data=[go.Pie(labels=top_15_cuisines.index,values=top_15_cuisines.values,marker=dict(colors=colors))],layout=go.Layout(title='Top 10 Types of Cuisines'))\nfig.show()\n\n\ntop_15_cuisines = top_15_cuisines.reset_index()\ntop_15_cuisines.index = np.arange(1, len(top_15_cuisines)+1)\ntop_15_cuisines.columns =['cuisines','count']\ntop_15_cuisines['count %'] = np.round(top_15_cuisines['count'] * 100 \/ sum(top_15_cuisines['count']),1).apply(lambda x:str(x) + \"%\")\ntop_15_cuisines\nplt.show()\n","17c9d485":"fig = plt.figure(figsize=(19,10))\nfig.patch.set_facecolor('cornflowerblue')\nplt.style.use('fivethirtyeight')\n\ntop20CuisinesLoc = zomatoDataPandas_withoutOutliers.groupby(['location','cuisines'])['name'].count().sort_values(ascending=False).head(20).reset_index()\ntop20CuisinesLoc.columns=['location','cuisines','count']\nsns.barplot(data=top20CuisinesLoc,x='location',y='count',hue='cuisines')\nplt.xticks(rotation=30)\nplt.legend(loc='upper right')\nplt.title(\" Most common cuisines in each locations\",fontweight='bold')\nplt.xlabel('Locations',fontsize=10,fontweight='bold');","eed9204a":"spark.sql(\"select location,cuisines,totalCuisines,rnk from (select location,cuisines,totalCuisines,rank() \\\nover(partition by location order by totalCuisines desc) AS rnk from (select distinct location,cuisines, \\\ncount(cuisines) as totalCuisines from zomatoData group by location,cuisines)) where rnk <= 5 order by 1,3 desc\").show(25)","92f116c7":"top5CusInTop5Loc = spark.sql(\"select location,cuisines,totalCuisines,rnk from (select location,cuisines,totalCuisines,rank() \\\nover(partition by location order by totalCuisines desc) AS rnk from (select distinct location,cuisines, \\\ncount(cuisines) as totalCuisines from zomatoData group by location,cuisines)) where rnk <= 5 order by 1,3 desc\").toPandas().head(25)\n\n\nfig = plt.figure(figsize=(19,12))\nfig.patch.set_facecolor('tan')\nplt.style.use('grayscale')\n\nsns.barplot(data = top5CusInTop5Loc,y='location',x='totalCuisines',hue='cuisines');\nplt.title('Which are the 5 most common cuisines in top 5 locations ?',fontsize=15,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold')\nplt.ylabel(\"Locations\",fontsize=15)\nplt.xlabel('Frequency',fontsize=15)\nplt.legend(loc='center right');","2b4465af":"locations=pd.DataFrame({\"Name\":zomatoDataPandas_withoutOutliers['location'].unique()})\nlocations['Name']=locations['Name'].apply(lambda x: \"Bangalore \" + str(x))\nlat_lon=[]\ngeolocator=Nominatim(user_agent=\"app\")\nfor location in locations['Name']:\n    location = geolocator.geocode(location, timeout= 20)\n    if location is None:\n        lat_lon.append(np.nan)\n    else:    \n        geo=(location.latitude,location.longitude)\n        lat_lon.append(geo)\n\n\nlocations['geo_loc']=lat_lon","98a7b8e2":"locations[\"Name\"]=locations['Name'].apply(lambda x :  x.replace(\"Bangalore\",\"\")[1:])\nlocations.head()","550a20c0":"rest_count= pd.DataFrame(zomatoDataPandas_withoutOutliers['location'].value_counts().reset_index())\nrest_count.columns= ['Name', 'count']\nrest_count=rest_count.merge(locations, on = \"Name\", how = \"left\" ).dropna()\nrest_count.head()","0ec9aef7":"maps = folium.Map(location= [12.97 , 77.59], zoom_start= 12)\nfolium.Marker(\nlocation= [12.97 , 77.59], popup= 'geographical center of Bangaluru', \n    icon= folium.Icon(color= 'green', icon= 'ok-sign')).add_to(maps)\nlat , lon= zip(*np.array(rest_count['geo_loc']));\nrest_count['lat']= lat\nrest_count['lon']= lon\n\nHeatMap(rest_count[['lat', 'lon', 'count']].values.tolist()).add_to(maps);\nmaps","7e13fe69":"north_data=  pd.DataFrame(zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['cuisines']== 'North Indian'].groupby(['location'], as_index= False)['cuisines'].agg('count'))\nnorth_data.columns= ['Name', 'count']\n#north_data.head()\nnorth_data = north_data.merge(locations, on = 'Name', how = 'left' ).dropna()\n#north_data.head()\nlat , lon= zip(*np.array(north_data['geo_loc']))\nnorth_data['lat'] = lat\nnorth_data['lon'] = lon\nnorth_data.head()","5918c176":"maps= folium.Map(location = [12.97 , 77.59], zoom_start= 12)\nfolium.Marker(\nlocation= [12.97 , 77.59], popup= 'geographical center of Bangaluru', \n    icon= folium.Icon(color= 'green', icon= 'ok-sign')).add_to(maps)\nHeatMap(north_data[['lat', 'lon', 'count']].values.tolist()).add_to(maps)\nmaps","0d2e2a97":"fig = plt.figure()\nfig.patch.set_facecolor('lightcoral')\nsns.jointplot(x = \"approxCost(2 people)\", y = \"ratingsBy5\", data = zomatoDataPandas_withoutOutliers, height=8, ratio=4, color=\"g\");","eea760b8":"#checking whether online_order impacts rating of the restaurant\nfig = plt.figure(figsize=(17,9))\nfig.patch.set_facecolor('darkseagreen')\nplt.style.use('fivethirtyeight')\n\nsns.countplot(hue = zomatoDataPandas_withoutOutliers[\"onlineOrder\"], palette = \"Set1\", x = zomatoDataPandas_withoutOutliers[\"ratingsBy5\"])\nplt.title(\"Distribution of restaurant rating over online order facility\")\nplt.show();","113e868a":"zomatoDataPyspark_withoutOutliers.crosstab('bookTable','listedInType').show()","7014ea8b":"fig = plt.figure(figsize=(17,10))\nplt.style.use('seaborn')\n\nx = pd.crosstab(zomatoDataPandas_withoutOutliers.listedInType,zomatoDataPandas_withoutOutliers.bookTable)\nx.div(x.sum(1).astype(float), axis = 0).plot(kind = 'barh', stacked = True,figsize=(17,8));\nplt.title(\"ListedInType wrt bookTable\",fontsize=15,fontweight='bold')\nplt.xlabel(\"Listed Type\",fontsize=10,fontweight='bold')\nplt.ylabel(\"Count\",fontsize=10,fontweight='bold')\nplt.legend(loc='upper left',prop={'size':20});","9e30b26c":"fig = plt.figure(figsize=(17,9))\nfig.patch.set_facecolor('wheat')\nplt.style.use('fivethirtyeight')\n\nsns.boxenplot(x=\"listedInType\", y=\"ratingsBy5\", data = zomatoDataPandas_withoutOutliers)\nplt.title(\"ListedInType Vs Ratings\",fontsize=15,fontweight='bold')\nplt.xlabel(\"Listed Type\",fontsize=10,fontweight='bold')\nplt.ylabel(\"Ratings\",fontsize=10,fontweight='bold')\nplt.show();","23aa4e77":"zomatoDataPyspark_withoutOutliers.crosstab('onlineOrder','listedInType').show()","3ce78536":"#ratings vs service type\nfig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('yellowgreen')\nplt.style.use('fivethirtyeight')\n\nx = pd.crosstab(zomatoDataPandas_withoutOutliers.listedInType,zomatoDataPandas_withoutOutliers.onlineOrder)\nx.div(x.sum(1).astype(float), axis = 0).plot(kind = 'barh', stacked = True,figsize=(17,8));\nplt.title(\"ListedInType wrt Online Order\",fontsize=15,fontweight='bold')\nplt.xlabel(\"Listed Type\",fontsize=10,fontweight='bold')\nplt.ylabel(\"Count\",fontsize=10,fontweight='bold')\nplt.legend(loc='upper left',prop={'size':20});","3a545ad6":"avgCityWiseRating = zomatoDataPandas_withoutOutliers.groupby('listedInCity').agg({'ratingsBy5':['max','min']}).reset_index()\navgCityWiseRating.columns =['listedInCity','MaxRating','MinRating']\navgCityWiseRating.head(15)","50106bb0":"zomatoDataPyspark_withoutOutliers.groupBy('listedInCity').count().orderBy('count',ascending=False).toPandas().head(20)","126c9f5b":"fig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('violet')\nplt.style.use('fivethirtyeight')\n\nsns.countplot(y='listedInCity', data=zomatoDataPandas_withoutOutliers,order=zomatoDataPandas_withoutOutliers.listedInCity.value_counts().head(20).index);\nplt.title(\"Top 20 ListedInCity\",fontweight='bold')\nplt.xlabel('count',fontsize=10,fontweight='bold')\nplt.ylabel('listedInCity',fontsize=10,fontweight='bold');\n#palette=\"Blues_d\"","4c2421b5":"fig = plt.figure(figsize=(20,8))\nfig.patch.set_facecolor('darkseagreen')\nplt.style.use('bmh')\n\nplt.subplot(121)\nsns.lineplot(y=zomatoDataPandas_withoutOutliers.ratingsBy5 ,x=zomatoDataPandas_withoutOutliers.listedInCity,data=zomatoDataPandas_withoutOutliers,markers=True,marker='o',hue=zomatoDataPandas_withoutOutliers.onlineOrder);\nplt.title(\"ListedInCity VS Avg Rating wrt Online Order\",fontweight='bold',fontsize=15)\nplt.legend(loc= 'upper left')\nplt.xticks(rotation=270);\n\nplt.subplot(122)\nsns.lineplot(y=zomatoDataPandas_withoutOutliers.ratingsBy5 ,x=zomatoDataPandas_withoutOutliers.listedInCity,data=zomatoDataPandas_withoutOutliers,markers=True,marker='o',hue=zomatoDataPandas_withoutOutliers.bookTable);\nplt.title(\"ListedInCity VS Avg Rating wrt Table Book\",fontweight='bold',fontsize=15)\nplt.xticks(rotation=270);\nplt.legend(loc= 'upper left');","e454047e":"fig = plt.figure(figsize=(20,9))\nfig.patch.set_facecolor('wheat')\nplt.style.use('bmh')\nplt.subplot(121)\nsns.lineplot(y=zomatoDataPandas_withoutOutliers.votes ,x=zomatoDataPandas_withoutOutliers.listedInCity,data=zomatoDataPandas_withoutOutliers,markers=True,marker='o',hue=zomatoDataPandas_withoutOutliers.onlineOrder);\nplt.title(\"ListedInCity VS Avg Voting wrt Online Order\",fontweight='bold',fontsize=15)\nplt.xlabel(\"ListedInCity\",fontweight='bold',fontsize=10)\nplt.ylabel(\"Voting\",fontweight='bold',fontsize=10)\nplt.legend(loc= 'upper left')\nplt.xticks(rotation=270);\n\nplt.subplot(122)\nsns.lineplot(y=zomatoDataPandas_withoutOutliers.votes ,x=zomatoDataPandas_withoutOutliers.listedInCity,data=zomatoDataPandas_withoutOutliers,markers=True,marker='o',hue=zomatoDataPandas_withoutOutliers.bookTable);\nplt.title(\"ListedInCity VS Avg Voting wrt Table Book\",fontweight='bold',fontsize=15)\nplt.xlabel(\"ListedInCity\",fontweight='bold',fontsize=10)\nplt.ylabel(\"Voting\",fontweight='bold',fontsize=10)\nplt.xticks(rotation=270);\nplt.legend(loc= 'upper left');","3b0fa62e":"fig = plt.figure(figsize=(20,9))\nfig.patch.set_facecolor('lightcoral')\nplt.style.use('fivethirtyeight')\n\n\nplt.subplot(121)\nsns.lineplot(y=zomatoDataPandas_withoutOutliers['approxCost(2 people)'] ,x=zomatoDataPandas_withoutOutliers.listedInCity,data=zomatoDataPandas_withoutOutliers,markers=True,marker='o',hue=zomatoDataPandas_withoutOutliers.onlineOrder);\nplt.title(\"ListedInCity VS Avg Cost wrt Online Order\",fontweight='bold',fontsize=15)\nplt.xlabel(\"ListedInCity\",fontweight='bold',fontsize=10)\nplt.ylabel(\"Cost\",fontweight='bold',fontsize=10)\nplt.legend(loc= 'upper left')\nplt.xticks(rotation=270);\n\nplt.subplot(122)\nsns.lineplot(y=zomatoDataPandas_withoutOutliers['approxCost(2 people)'] ,x=zomatoDataPandas_withoutOutliers.listedInCity,data=zomatoDataPandas_withoutOutliers,markers=True,marker='o',hue=zomatoDataPandas_withoutOutliers.bookTable);\nplt.title(\"ListedInCity VS Avg Cost wrt Table Book\",fontweight='bold',fontsize=15)\nplt.xlabel(\"ListedInCity\",fontweight='bold',fontsize=10)\nplt.ylabel(\"Cost\",fontweight='bold',fontsize=10)\nplt.xticks(rotation=270);\nplt.legend(loc= 'upper left');","0d35380c":"allCuisines = set()\n\nfor i in zomatoDataPandas_withoutOutliers.cuisines:\n    for j in i.split(', '):\n        allCuisines.add(j)    \n        \nprint(\"There are total {0} Cuisines that are available in bangalore\".format(len(allCuisines)))","6e7a7288":"top5RestCuis = zomatoDataPyspark_withoutOutliers.filter(zomatoDataPyspark_withoutOutliers['ratingsBy5']>=4.5)\ntop5RestCuis.registerTempTable('top5RestCuisTable')","9f45b161":"spark.sql('select listedInType,name,total,rnk from (select listedInType,name,total, dense_rank() \\\nover(partition by listedInType order by total desc ) rnk from (select distinct listedInType,name,count(name) \\\nas total from top5RestCuisTable group by 1,2 order by total desc)) where rnk <3 order by 1,3 desc').show(25)","cf5881d4":"top2RestCus= spark.sql('select listedInType,name,total,rnk from (select listedInType,name,total, dense_rank() \\\nover(partition by listedInType order by total desc ) rnk from (select distinct listedInType,name,count(name) \\\nas total from top5RestCuisTable group by 1,2 order by total desc)) where rnk <3 order by 1,3 desc').toPandas()","bdeeb118":"fig = plt.figure(figsize=(20,9))\nfig.patch.set_facecolor('cadetblue')\nplt.style.use('seaborn')\n\nplt.title('Top 2 Restaurant with Ratings more than 4.5 for each listedInType',fontsize=15,fontweight='bold');\n#sns.catplot(data=top5RestCus,x='name',y='total',col='listedInType',kind='bar',col_wrap=3);\nsns.barplot(data=top2RestCus,x='listedInType',y='total',hue='name',palette='icefire_r');\nplt.ylabel('total',fontsize=10,fontweight='bold')\nplt.xlabel('Listed Type',fontsize=10,fontweight='bold')\nplt.yticks(fontsize=13);\nplt.xticks(fontsize=13);","c9abcd86":"fig = plt.figure(figsize=(19,10))\nfig.patch.set_facecolor('tan')\nplt.style.use('fivethirtyeight')\n\nplt.rcParams['figure.figsize'] = 19,10\nplt.subplot(1,2,1)\nax = zomatoDataPandas_withoutOutliers.name.value_counts().head().plot(kind = \"barh\", color = sns.color_palette(\"hls\", 5))\nplt.xlabel(\"Number of restaurants\",fontweight='bold')\nplt.yticks(fontweight='bold')\nplt.title(\"Biggest Restaurant Chain (Top 5)\",fontweight='bold',fontsize=15);\n\nplt.subplot(1,2,2)\nzomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['ratingsBy5']>=4.5]['name'].value_counts().nlargest(5).plot(kind = \"barh\", color = sns.color_palette(\"Paired\"))\nplt.xlabel(\"Number of restaurants\",fontweight='bold')\nplt.yticks(fontweight='bold')\nplt.title(\"Best Restaurant Chain (Top 5) - Rating More than 4.5\",fontweight='bold',fontsize=15);\nplt.tight_layout();","42bdc2a1":"#Dishes liked by Banagloreans\nc1 = ''.join(str(zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['dishLiked']!= 'Unknown']['dishLiked'].values))\nfrom wordcloud import WordCloud\nplt.figure(figsize=(15,8),facecolor = 'blue');\nwordcloud = WordCloud(max_font_size=None, background_color='black', collocations=True,\n                      width=2500, height=1500).generate(c1)\nplt.imshow(wordcloud)\nplt.axis(\"off\");","80181604":"northIndia_restaurants = zomatoDataPandas_withoutOutliers[(zomatoDataPandas_withoutOutliers['cuisines']== 'North Indian') & (zomatoDataPandas_withoutOutliers['dishLiked'] !='Unknown') ]\n\nc1 = ''.join(str(northIndia_restaurants['dishLiked'].values))\nfrom wordcloud import WordCloud\nplt.figure(figsize=(15,8),facecolor = 'orange')\nwordcloud = WordCloud(max_font_size=None, background_color='black', collocations=True,\n                      width=2500, height=1500).generate(c1)\nplt.imshow(wordcloud)\nplt.axis(\"off\");","88aa4bbd":"# Dishes liked by banglorans in South Indian restaurants\nsouthIndian_restaurants = zomatoDataPandas_withoutOutliers[(zomatoDataPandas_withoutOutliers['cuisines']== 'South Indian') & (zomatoDataPandas_withoutOutliers['dishLiked'] !='Unknown') ]\n\nc1 = ''.join(str(southIndian_restaurants['dishLiked'].values))\nfrom wordcloud import WordCloud\nplt.figure(figsize=(15,8),facecolor = 'green')\nwordcloud = WordCloud(max_font_size=None, background_color='black', collocations=True,\n                      width=2500, height=1500).generate(c1)\nplt.imshow(wordcloud)\nplt.axis(\"off\");","6411ff6c":"fastFood_restaurants = zomatoDataPandas_withoutOutliers[(zomatoDataPandas_withoutOutliers['cuisines']== 'Fast Food') & (zomatoDataPandas_withoutOutliers['dishLiked'] !='Unknown') ]\n\nc1 = ''.join(str(fastFood_restaurants['dishLiked'].values))\nfrom wordcloud import WordCloud\nplt.figure(figsize=(15,8),facecolor = 'red')\nwordcloud = WordCloud(max_font_size=None, background_color='black', collocations=True,\n                      width=2500, height=1500).generate(c1)\nplt.imshow(wordcloud)\nplt.axis(\"off\");","c5f22b8b":"desert_restaurants = zomatoDataPandas_withoutOutliers[((zomatoDataPandas_withoutOutliers['cuisines']== 'Ice Cream, Desserts') | (zomatoDataPandas_withoutOutliers['cuisines']== 'Desserts, Ice Cream')  | (zomatoDataPandas_withoutOutliers['cuisines']== 'Desserts')) & (zomatoDataPandas_withoutOutliers['dishLiked'] !='Unknown') ]\n\nc1 = ''.join(str(desert_restaurants['dishLiked'].values))\nfrom wordcloud import WordCloud\nplt.figure(figsize=(15,8),facecolor = 'lightcoral')\nwordcloud = WordCloud(max_font_size=None, background_color='black', collocations=True,\n                      width=2500, height=1500).generate(c1)\nplt.imshow(wordcloud)\nplt.axis(\"off\");","19043a80":"fig = plt.figure(figsize=(17,8))\nfig.patch.set_facecolor('darkgoldenrod')\nplt.style.use('bmh')\nplt.style.use('grayscale')\n\npopularRestEachCity = zomatoDataPandas_withoutOutliers.groupby(['listedInCity','restType']).agg('count').sort_values(['name'],ascending=False)['name'][:100].reset_index()\npopularRestEachCity.columns=['listedInCity','restType','count']\nsns.lineplot(data=popularRestEachCity, x='listedInCity',y='count', hue='restType',markers=True,marker='o', dashes=True)\nplt.xticks(rotation=90)\nplt.title(\"Most popular restaurant-types in each City\");\nplt.xlabel('City',fontsize=15,fontweight='bold');\nplt.ylabel('Count',fontsize=15,fontweight='bold');","1a7cd9e6":"top5resType = zomatoDataPandas.restType.value_counts().index[:6].tolist()\n\ntop5CityResType = zomatoDataPyspark_withoutOutliers.filter(zomatoDataPyspark_withoutOutliers['restType'].isin(top5resType))\ntop5CityResType.registerTempTable('Top5RestTypeData')","652f04f1":"spark.sql(\"select restType,listedInCity,frequency,rnk from (select restType,listedInCity,frequency,dense_rank() \\\nOVER (PARTITION BY restType ORDER BY frequency desc) rnk from (select distinct restType,listedInCity, \\\ncount(listedInCity) as frequency from Top5RestTypeData group by restType,listedInCity)) where rnk<=5 \\\norder by 1,3 desc\").show(20)","613e3c1b":"top5CityResType = spark.sql(\"select restType,listedInCity,frequency,rnk from (select restType,listedInCity,frequency,dense_rank() \\\nOVER (PARTITION BY restType ORDER BY frequency desc) rnk from (select distinct restType,listedInCity, \\\ncount(listedInCity) as frequency from Top5RestTypeData group by restType,listedInCity)) where rnk<=5 \\\norder by 1,3 desc\").toPandas()","4b60a4c0":"fig = plt.figure(figsize=(17,9))\nfig.patch.set_facecolor('hotpink')\nplt.style.use('fivethirtyeight')\n\nsns.barplot(data=top5CityResType,hue='restType',y='frequency',x='listedInCity');\nplt.xticks(rotation=30);\nplt.legend(loc='upper right')\nplt.title(\"5 Most popular Cities wrt Top 6 Restaurant Types\",fontsize=15,fontweight='bold');\nplt.xlabel('Cities',fontsize=15,fontweight='bold');\nplt.ylabel('Frequency',fontsize=15,fontweight='bold');","dcf7a880":"fig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('cornflowerblue')\nplt.style.use('fivethirtyeight')\n\ntop2RestTypes = zomatoDataPandas_withoutOutliers[(zomatoDataPandas_withoutOutliers['restType'] == 'Quick Bites') | (zomatoDataPandas_withoutOutliers['restType'] == 'Casual Dining')]\n\ntop2RestTypes = top2RestTypes.groupby(['restType','name']).agg('count').sort_values(['address'],ascending=False)['address'][:20].reset_index()\ntop2RestTypes.columns=['restType','name','count']\n\nsns.barplot(data=top2RestTypes,x='name',y='count',hue='restType');\nplt.xticks(rotation=90);\nplt.title(\"Top 20 Resturants wrt Top 2 Restaurant Types\");","473d6315":"# create cost_range column\nbins = [0,200,500,800,1300]\nlabels = ['cheap','moderate','expensive','extra expensive']\nzomatoDataPandas_withoutOutliers['costRange']= pd.cut(zomatoDataPandas_withoutOutliers['approxCost(2 people)'], bins=bins,labels=labels)","9102e7de":"def costRange(cost):\n  if cost <=200:\n    return \"cheap\"\n  elif cost >200 and cost <=500:\n    return \"moderate\"\n  elif cost >500 and cost <=800:\n    return \"expensive\"\n  else: \n    return \"extra expensive\"","114d6f47":"from pyspark.sql.functions import udf\n\nbucket_udf = udf(costRange, StringType())\n\nzomatoDataPyspark = zomatoDataPyspark.withColumn('costRange',bucket_udf('approxCost(2 people)'))\nzomatoDataPyspark_withoutOutliers = zomatoDataPyspark.withColumn('costRange',bucket_udf('approxCost(2 people)'))","c16b60ad":"#Creating a temporary table to write Sql Queries on it\nzomatoDataPyspark_withoutOutliers.createOrReplaceTempView(\"zomatoData\")","e28018c5":"def doughnutchart(labels,values,title):\n    colors=[\"#F7B7A3\",\"#EA5F89\"]\n    data=go.Pie(labels=labels,values=values,hole=0.6,pull=0.04,marker=dict(colors=colors))\n    layout=go.Layout(title=title)\n    fig=go.Figure(data=data,layout=layout)\n    iplot(fig)","f8fa92e3":"spark.sql('select costRange,cnt,concat(round(cnt*100\/(select count(costRange) from zomatoData),2),\"%\") \\\nas percent from (select costRange,count(costRange) as cnt from zomatoData group by costRange) order by cnt desc').show(10)","bd64f5b5":"doughnutchart(zomatoDataPandas_withoutOutliers['costRange'].value_counts().index ,zomatoDataPandas_withoutOutliers['costRange'].value_counts().values,\"Distribution of Cost of Dishes\")","6c875548":"zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers['dishLiked']!= 'Unknown']['dishLiked'].value_counts().head(20)","1d7c636b":"menuList = []\nfor i in zomatoDataPandas_withoutOutliers.dishLiked.tolist():\n    if(len(i)>0):\n        for e in i.split(','):\n            menuList.append(e.strip())\n            \n\n#menuList = list(set(menuList))","d6f61907":"allMenulist = spark.createDataFrame(menuList,StringType())\nallMenulist = allMenulist.withColumnRenamed('value','Dish')\nallMenulist = allMenulist.filter(allMenulist['Dish']!='Unknown')\n\nallMenulist.registerTempTable('MenuData')","202e4f93":"spark.sql(\"select Dish,total,concat(round(total \/ (select sum(total) from (select Dish,count(*) as total \\\nfrom MenuData group by Dish order by total desc limit 15)) * 100,1),'%') as distribution from \\\n(select Dish,count(*) as total from MenuData group by Dish) order by total desc limit 15 \").show()\n#allMenulist.groupBy('Dish').count().orderBy('count',ascending=False).show(10)","cebeab7c":"fig = plt.figure(figsize=(19,8))\nfig.patch.set_facecolor('lightblue')\nplt.style.use('bmh')\n\nmenuData = pd.DataFrame(menuList,columns=['Dish'])\nmenuData = menuData[menuData['Dish']!='Unknown']\nmenuData = menuData['Dish'].value_counts().reset_index().head(15)\n\n\nsns.pointplot(data=menuData,x='index',y='Dish',linestyles='dashdot',alpha=0.8,markers='p')\nplt.title('Top 10 liked dishes in Bangalore',fontweight='bold',fontsize=15)\nplt.xlabel(\"Dishes\",fontweight='bold',fontsize=10)\nplt.ylabel(\"Count\",fontweight='bold',fontsize=10);\nplt.yticks(fontsize=13)\nplt.xticks(fontsize=13,rotation=30);","e2e604f6":"colors = ['grey' for i in range(zomatoDataPandas_withoutOutliers.location.nunique())]\ncolors[0] = 'orange'","703ada5a":"fig = plt.figure(figsize=(17,8))\nfig.patch.set_facecolor('lightgreen')\nplt.style.use('grayscale')\n\nplt.rcParams['figure.figsize'] = 17,8\nplt.subplot(1,2,1)\nzomatoDataPandas_withoutOutliers.ratingsBy5.hist(color='olive')\nplt.axvline(x= zomatoDataPandas_withoutOutliers.ratingsBy5.mean(),ls='--',color='black',linewidth=4,label=\"mean\")\nplt.axvline(x= zomatoDataPandas_withoutOutliers.ratingsBy5.median(),ls='--',color='green',linewidth=4,label=\"median\")\nplt.title('Rate Distribution',weight='bold')\nplt.legend([\"mean\", \"median\"],prop={\"size\":22})\nplt.xlabel('Rate')\nplt.ylabel('Count')\n\nplt.subplot(1,2,2)\nzomatoDataPandas_withoutOutliers.RateLabel.value_counts().plot(kind='bar',color=colors,grid=True)\nplt.title('Rate range Distribution',weight='bold')\nplt.xlabel('Rate range')\nplt.ylabel('Number of restaurants')\nplt.xticks(rotation=0)\nplt.tight_layout();","aa791f28":"from pyspark.sql.functions import udf\n\nbucket_udf = udf(label, StringType())\n\nzomatoDataPyspark_withoutOutliers = zomatoDataPyspark_withoutOutliers.withColumn('RateLabel',bucket_udf('ratingsBy5'))","11ecadb9":"zomatoDataPyspark_withoutOutliers.crosstab('location','Ratelabel').orderBy(['Excellent','Good'],ascending=[False,False]).show()","26790319":"fig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('lightblue')\nplt.style.use('fivethirtyeight')\n\npd.crosstab(zomatoDataPandas_withoutOutliers['location'],zomatoDataPandas_withoutOutliers['RateLabel']).plot(kind='bar',stacked=True,figsize= (17,10))\nplt.title(\"Location wise Rating of Dishes\",fontweight='bold',fontsize=15);","afca5f09":"top6RestType = zomatoDataPandas_withoutOutliers.restType.value_counts().index[:6].tolist()","6a54ca41":"fig = plt.figure(figsize=(19,8))\nfig.patch.set_facecolor('mediumpurple')\nplt.style.use('fivethirtyeight')\ntop12RestType = zomatoDataPandas_withoutOutliers.restType.value_counts().index[:12].tolist()\n\ntop12RestTypeData = zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers.restType.isin(top12RestType)]\n\npd.crosstab(top12RestTypeData.ratingsBy5,top12RestTypeData.restType).plot(kind='line',marker='o',figsize=(19,8));\nplt.title(\"Ratings Vs Top 12 RestType\",fontsize='15',fontweight=15);\nplt.xlabel(\"RatingBy 5\",fontsize='10',fontweight='bold')\nplt.ylabel(\"Frequency\",fontsize='10',fontweight='bold');","81f6f96c":"plt.figure(figsize=(19,8))\nfig.patch.set_facecolor('yellow')\nplt.style.use('fivethirtyeight')\n\npd.crosstab(zomatoDataPandas_withoutOutliers.ratingsBy5,zomatoDataPandas_withoutOutliers.onlineOrder).plot(kind='line',marker='o',figsize=(19,8))\nplt.title(\"Ratings vs Online Order\")\npd.crosstab(zomatoDataPandas_withoutOutliers.ratingsBy5,zomatoDataPandas_withoutOutliers.bookTable).plot(kind='line',marker='o',figsize=(19,8));\nplt.title(\"Ratings vs bookTable\");","152937fc":"def barchart(index,values,name):\n    data=go.Bar(x=index,y=values,orientation='v',text=values,textposition='auto',name=name,marker=dict(color='#2576ba'))\n    layout=go.Layout(title=name,xaxis=dict(tickangle=-25),barmode='group')\n    fig=go.Figure(data=data,layout=layout)\n    iplot(fig)","49fa3de8":"topLocationByVotes = zomatoDataPandas_withoutOutliers.groupby('location')['votes'].sum().sort_values(ascending=False)[:10]\n\nbarchart(topLocationByVotes.index,topLocationByVotes.values,\"Top 10 Voted neighbourhoods\")\nplt.show()","9f8844a7":"avgRating = zomatoDataPandas_withoutOutliers.ratingsBy5.mean()\navgVotes = zomatoDataPandas_withoutOutliers.votes.mean()\n\nbestRestBanglore = zomatoDataPandas_withoutOutliers[(zomatoDataPandas_withoutOutliers.ratingsBy5 >=avgRating) & (zomatoDataPandas_withoutOutliers.votes >=avgVotes)]\nbestRestBanglore = bestRestBanglore.sort_values(['ratingsBy5','votes','approxCost(2 people)'],ascending=[False,False,True]).reset_index().drop('index',axis=1)\n\nbestRestBanglore[['name','ratingsBy5','votes','cuisines','approxCost(2 people)','location']][:60]","8b5313bb":"bestLocation = bestRestBanglore['location'].value_counts()[:10]\nname = \"Where one can find the best restaurants in Bangalore?\"\nbarchart(bestLocation.index,bestLocation.values,name)\nplt.show()","b07f9bac":"cuisinesList = []\nfor i in zomatoDataPandas_withoutOutliers.cuisines.tolist():\n    if(len(i)>0):\n        for e in i.split(','):\n            cuisinesList.append(e.strip())\n            \n\nallCuisines = pd.DataFrame(cuisinesList,columns=['CuisinesList'])","6956482e":"cuisineData = spark.createDataFrame(cuisinesList,StringType())\ncuisineData = cuisineData.withColumnRenamed('value','cuisines')\ncuisineData.registerTempTable('cuisineData')","ee67a4cc":"spark.sql(\"select cuisines,total,concat(round(total*100\/(select sum(ct) from (select cuisines,count(*) as ct \\\nfrom cuisineData group by cuisines order by ct desc limit 10)),1),'%') as distribution from \\\n(select cuisines,count(*) as total from cuisineData group by cuisines) order by total desc limit 10\").show()","e59b33dc":"fig = plt.figure(figsize=(19,10))\nfig.patch.set_facecolor('aquamarine')\nplt.style.use('fivethirtyeight')\n\nplt.subplot(121)\nallCuisines['CuisinesList'].value_counts().head(10).plot.pie(autopct='%1.f%%',\n                                                             wedgeprops={'linewidth':10,'edgecolor':'white'},\n                                                             shadow=True,\n                                                             fontsize=20)\nplt.title(\"Top 10 Distribution of Cuisines in Bangalore\",fontsize=15,fontweight='bold')\nplt.ylabel('')\n\nplt.subplot(122)\nallCuisines['CuisinesList'].value_counts().head(10).plot(color='black',marker='o',markersize='10',linestyle='dashed',linewidth=3)\nallCuisines['CuisinesList'].value_counts().head(10).plot(kind='bar',color='green');\nplt.title(\"Top 10 Cuisines in Bangalore\",fontsize=15,fontweight='bold');\nplt.xticks(rotation=30);","fee4e875":"cuisinesListbestRest = []\nfor i in bestRestBanglore.cuisines.tolist():\n    if(len(i)>0):\n        for e in i.split(','):\n            cuisinesListbestRest.append(e.strip())\n            \n\nbestCuisinesbestRest = pd.DataFrame(cuisinesListbestRest,columns=['CuisinesList'])","1f84d5ba":"#What cuisine?\nfig = plt.figure(figsize=(17,8))\nfig.patch.set_facecolor('olivedrab')\nplt.style.use('fivethirtyeight')\n\nplt.subplot(121)\nallCuisines['CuisinesList'].value_counts().head(10).plot(kind='barh',color =colors);\nplt.title(\"Top 10 Cuisines in Bangalore\",fontsize=15,fontweight='bold');\nplt.ylabel(\"Frequency\",fontsize=15,fontweight='bold');\nplt.xlabel(\"Cuisines\",fontsize=15,fontweight='bold');\nplt.xticks(rotation=30);\nplt.yticks(fontsize=13);\n\nplt.subplot(122)\nbestCuisinesbestRest.CuisinesList.value_counts()[:10].sort_values(ascending=False).plot(kind='barh',color =colors,figsize=(17,8));\nplt.title(\"Top 10 Cuisines across best Restaurant in Bangalore\",fontsize=15,fontweight='bold')\nplt.xlabel(\"Cuisines\",fontsize=15,fontweight='bold');\nplt.xticks(rotation=30);\nplt.yticks(fontsize=12);","528d6cb2":"bestRestBanglore['approxCost(2 people)'].mean()","a475f6a5":"import matplotlib.ticker as mtick\n\nfig = plt.figure(figsize=(19,12))\nfig.patch.set_facecolor('tomato')\nplt.style.use('fivethirtyeight')\n\nzomatoDataPandas_withoutOutliers.groupby(['location','listedInType']).size().groupby(level=0).apply(lambda x: 100 * x \/ x.sum()).\\\nunstack().plot(kind='bar',stacked=True,color=['c','b','w','grey','orange','black','m'],figsize=(19,12));\nplt.gca().yaxis.set_major_formatter(mtick.PercentFormatter());\nplt.legend(loc='best');\n\nplt.title(\"What is the relation between meal_type and location?\");\nplt.xlabel(\"location\",fontsize=15,fontweight='bold');\nplt.ylabel(\"Frequency %\",fontsize=15,fontweight='bold');","c42dcdda":"fig = plt.figure(figsize=(17,8))\nfig.patch.set_facecolor('purple')\nplt.style.use('seaborn')\nmealToRate = pd.crosstab(zomatoDataPandas_withoutOutliers.listedInType, zomatoDataPandas_withoutOutliers.RateLabel)\n# the cheap area will be colored as white for ease of visibility\nplt.rcParams['figure.figsize'] = 9,6\nmealToRate.div(mealToRate.sum(1).astype(float), axis = 0).apply(lambda x: x*100).plot(kind = 'barh', stacked = True)\nplt.gca().xaxis.set_major_formatter(mtick.PercentFormatter());\nplt.legend(loc='best')\nplt.title('Meal type Vs rate category',weight='bold');","900f2aa5":"expensiveRest = zomatoDataPandas[['name','approxCost(2 people)','listedInType','location','cuisines','bookTable','onlineOrder']].groupby(['approxCost(2 people)'],sort = True)\nexpensiveRest = expensiveRest.filter(lambda x:x.mean()>1000)\n\nhighRatedRest = zomatoDataPandas[['name','ratingsBy5']].groupby(['ratingsBy5'],sort=True)\nhighRatedRest = highRatedRest.filter(lambda x:x.mean()>=4.5)\n\nTopExpensivePopularRest = pd.merge(expensiveRest,highRatedRest,how='inner',on=['name']).sort_values(['approxCost(2 people)','ratingsBy5'],ascending=[False,False]).drop_duplicates().reset_index()\\\n.drop('index',axis=1)\n\nTopExpensivePopularRest.head(15)","bce11dc0":"max_rate = zomatoDataPandas_withoutOutliers.ratingsBy5.max()\nmax_vote = zomatoDataPandas_withoutOutliers.votes.max()\n\nmostFamous_Rated_RestBanglore = zomatoDataPandas_withoutOutliers[(zomatoDataPandas_withoutOutliers.ratingsBy5 == max_rate) | (zomatoDataPandas_withoutOutliers.votes == max_vote)][['name','votes','ratingsBy5','approxCost(2 people)','listedInType','location']]\nmostFamous_Rated_RestBanglore = mostFamous_Rated_RestBanglore.sort_values(by=['ratingsBy5','votes','approxCost(2 people)'],ascending=[False,False,False])\nmostFamous_Rated_RestBanglore[:15]","f0323e43":"# reviewText \nzomatoDataPandas_withoutOutliers['reviewText'] = zomatoDataPandas_withoutOutliers.reviewsList.apply(lambda x:x[26:]).replace(\"RATED\\n  \",''). \\\nreplace('?','').replace('\ufffd','').replace('\\n','').replace('.',' ').apply(lambda x:x.strip().lower())","91335a98":"from wordcloud import WordCloud, STOPWORDS \n \ncomment_words = ' '\nstopwords = set(STOPWORDS) \n\nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='black', \n                stopwords = stopwords, \n                min_font_size = 10).generate(str(zomatoDataPandas_withoutOutliers['reviewText']))\n  \n# plot the WordCloud image                        \nplt.figure(figsize = (8,8), facecolor = 'blue') \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) ;","dc24172a":"topRatedRest = zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers.ratingsBy5 >= 4.5]\n\ntopDishes = []\nfor i in topRatedRest[topRatedRest.dishLiked != 'Unknown']['dishLiked']:\n    for j in i.split(', '):\n        topDishes.append(j)","869b70bf":"from wordcloud import WordCloud, STOPWORDS \n \ncomment_words = ' '\nstopwords = set(STOPWORDS) \n\nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='black', \n                stopwords = stopwords, \n                min_font_size = 10).generate(str(topDishes))\n  \n# plot the WordCloud image                        \nplt.figure(figsize = (9,9), facecolor = 'green') \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) ;","5a7e4547":"top10Location = zomatoDataPandas_withoutOutliers.location.value_counts().index[:10].tolist()\n\ntop15RestTypeData = zomatoDataPandas_withoutOutliers[zomatoDataPandas_withoutOutliers.location.isin(top10Location)]\ntop15RestTypeData = top15RestTypeData[top15RestTypeData.dishLiked != 'Unknown']\ntop15RestTypeData = top15RestTypeData.drop_duplicates()\ntop15RestTypeData.groupby(['location','name','dishLiked'])['RateLabel'].max().head(15).reset_index()\n#pd.crosstab(top15RestTypeData.ratingsBy5,top15RestTypeData.restType).plot(kind='line',marker='o');","7b6e212b":"top10LocationData = zomatoDataPyspark_withoutOutliers.filter(zomatoDataPyspark_withoutOutliers['location'].isin(top10Location))\ntop10LocationData = top10LocationData.filter(top10LocationData['ratingsBy5']>=4.6)\ntop10LocationData.registerTempTable('top10LocationData')","b20a0250":"spark.sql(\"select name,dishLiked,cnt,rnk from (select dishLiked,name,cnt,rank() OVER (PARTITION BY name \\\norder by cnt desc)rnk from (select dishLiked,name,count(name) as cnt from top10LocationData group by \\\ndishLiked,name)) where rnk <=3 order by 1,3 desc\").show()","80e837ac":"Top10ExpenRest = zomatoDataPandas_withoutOutliers.groupby('restType')['approxCost(2 people)'].mean().sort_values(ascending=False).head(10)\nTop10CheapRest = zomatoDataPandas_withoutOutliers.groupby('restType')['approxCost(2 people)'].mean().sort_values(ascending=True).head(10)","719ed7c2":"fig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('lightblue')\nplt.style.use('seaborn-muted')\n\nplt.subplot(121)\nTop10ExpenRest.plot(kind='barh',color = sns.color_palette(\"gnuplot\"),figsize=(17,10))\nplt.title(\"Top 10 Expensive Restaurant Types\",fontweight='bold')\nplt.xlabel(\"Average Cost\",fontweight='bold')\nplt.yticks(fontweight='bold')\n\nplt.subplot(122)\nTop10CheapRest.sort_values(ascending=True).plot(kind='barh',color = sns.color_palette(\"gnuplot\"),figsize=(17,10))\nplt.title(\"Top 10 Cheapest Restaurant Types\",fontweight='bold')\nplt.xlabel(\"Average Cost\",fontweight='bold');\nplt.yticks(fontweight='bold')\nplt.ylabel(' ');","1c8c2b74":"Top10HighRatedRest = zomatoDataPandas_withoutOutliers.groupby('restType')['ratingsBy5'].mean().sort_values(ascending=False).head(10)\nTop10LowRatedRest = zomatoDataPandas_withoutOutliers.groupby('restType')['ratingsBy5'].mean().sort_values(ascending=True).head(10)","81b998e8":"fig = plt.figure(figsize=(17,10))\nfig.patch.set_facecolor('palevioletred')\nplt.style.use('seaborn')\n\nplt.subplot(121)\nTop10HighRatedRest.plot(kind='barh',color = sns.color_palette(\"gnuplot\"))\nplt.title(\"Top 10 Highest Rated Restaurant\",fontweight='bold')\nplt.xlabel(\"Average Rating\",fontweight='bold')\nplt.yticks(fontweight='bold')\n\nplt.subplot(122)\nTop10LowRatedRest.sort_values(ascending=True).plot(kind='barh',color = sns.color_palette(\"gnuplot\"))\nplt.title(\"Top 10 Lowest Rated Restaurant\",fontweight='bold')\nplt.xlabel(\"Average Rating\",fontweight='bold');\nplt.yticks(fontweight='bold')\nplt.ylabel(' ');","9de51b43":"allCuisines = []\n\nfor i in zomatoDataPandas_withoutOutliers.cuisines:\n    for j in i.split(', '):\n        allCuisines.append(j.strip())","af3b1933":"from wordcloud import WordCloud, STOPWORDS\n \ncomment_words = ' '\nstopwords = set(STOPWORDS) \n\nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='black', \n                stopwords = stopwords, \n                min_font_size = 10).generate(str(allCuisines))\n  \n# plot the WordCloud image                        \nplt.figure(figsize = (9,9), facecolor = 'green') \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) ;","bc113843":"newdf = zomatoDataPandas[['name','approxCost(2 people)','location','restType','cuisines']].groupby(['approxCost(2 people)'], sort = True) \nnewdf = newdf.filter(lambda x:x.mean()<1500).sort_values(by=['approxCost(2 people)'])","9f71730f":"newdf_expensive= zomatoDataPandas[['name','approxCost(2 people)','location','restType','cuisines']].groupby(['approxCost(2 people)'], sort = True) \nnewdf_expensive=newdf_expensive.filter(lambda x: x.mean() >= 3000).sort_values(by=['approxCost(2 people)'])","1363da2b":"#lets find the highest rated restaurants i.e rating above 4.5\nnewdf_rate = zomatoDataPandas[['name','ratingsBy5']].groupby(['ratingsBy5'], sort = True) \nnewdf_rate = newdf_rate.filter(lambda x: x.mean() >= 4.5) \nnewdf_rate = newdf_rate.sort_values(by=['ratingsBy5'])","748c06c6":"#These are the most reliable, highest rated and economical restaurants:-\n#We obtain this dataframe by simply taking the intersection of all the dataframes obtained above.\n\ns1 = pd.merge(newdf, newdf_rate, how='inner', on=['name']) \ns2= pd.merge(newdf_expensive, newdf_rate, how='inner', on=['name'])\n\nprint(\"Cheap restaurants with low cost,high rating \\n\") \ns1.drop_duplicates().head(20)\nprint(\"************************************************\")\nprint(\"Expensive restaurants with high cost,high rating \\n\")\ns2.drop_duplicates().head(50)","79dc5b3d":"location = 'Banashankari'\n#input(\"Enter the Location: \")\ncuisine = 'Bakery'\n#input(\"Enter the Cuisine Type: \")\n\nisOnline = 'Yes'\npd.DataFrame(zomatoDataPandas_withoutOutliers[['name', 'ratingsBy5', 'approxCost(2 people)']]\n             [(zomatoDataPandas_withoutOutliers['location'].str.contains(location)) \n              & (zomatoDataPandas_withoutOutliers['cuisines'].str.contains(cuisine)) \n              & (zomatoDataPandas_withoutOutliers['onlineOrder'] == isOnline)]).sort_values(['ratingsBy5'], ascending = False).drop_duplicates().reset_index().drop('index',axis=1)","a424cf9d":"\ndef doughnutchart(labels,values,title):\n    colors=[\"#F7B7A3\",\"#EA5F89\"]\n    data=go.Pie(labels=labels,values=values,hole=0.6,pull=0.04,marker=dict(colors=colors))\n    layout=go.Layout(title=title)\n    fig=go.Figure(data=data,layout=layout)\n    iplot(fig)","84c6a798":"top5RestData = zomatoDataPandas_withoutOutliers.restType.value_counts()[:5].index.tolist()\ntop5RestTypeData = zomatoDataPyspark_withoutOutliers.filter(zomatoDataPyspark_withoutOutliers['restType'].isin(top5RestData))\n\ntop5RestTypeData.registerTempTable('top5RestTypeData')","9c14013f":"spark.sql(\"select restType,name,location,costRange,cnt,rnk from (select name,location,costRange,cnt,restType,\\\nRANK() OVER (PARTITION BY restType ORDER BY cnt desc) rnk \\\nfrom (select distinct name,location,costRange,restType,count(name) as cnt from top5RestTypeData \\\ngroup by name,location,costRange,restType)) where rnk<=5 order by 1,5 desc,4\").toPandas().head(20)","3ee49ba6":"top5RestData = spark.sql(\"select restType,name,location,costRange,cnt,rnk from (select name,location,costRange,cnt,restType,\\\nRANK() OVER (PARTITION BY restType ORDER BY cnt desc) rnk \\\nfrom (select distinct name,location,costRange,restType,count(name) as cnt from top5RestTypeData \\\ngroup by name,location,costRange,restType)) where rnk<=5 order by 1,5 desc\").toPandas()","e6270687":"fig = plt.figure(figsize=(19,13))\nfig.patch.set_facecolor('tan')\nplt.style.use('fivethirtyeight')\n\nplt.subplot(121)\nsns.barplot(data=top5RestData,hue='restType',x='cnt',y='name');\nplt.yticks(fontsize=13,fontweight='bold');\nplt.xticks(fontsize=13);\nplt.title(\"Top 5 restaurant name wrt each top 5 restType\",fontsize=15,fontweight='bold')\nplt.legend(loc='center right',prop={\"size\":15})\nplt.subplot(122)\nsns.barplot(data=top5RestData,hue='costRange',x='cnt',y='restType');\nplt.title(\"Top 5 restType wrt cost Range seen in top 5 Restaurants\",fontsize=15,fontweight='bold');\nplt.yticks(fontsize=13,fontweight='bold');\nplt.xticks(fontsize=13);\nplt.legend(loc='center right',prop={\"size\":15});\n#x1.legend().set_visible(False)","bd65f6f1":"top5RestData = zomatoDataPandas_withoutOutliers.restType.value_counts()[:5].index.tolist()\ntop5RestTypeData = zomatoDataPyspark_withoutOutliers.filter(zomatoDataPyspark_withoutOutliers['restType'].isin(top5RestData))\ntop5RestTypeData.registerTempTable('RestTypeData')","6906a9ce":"spark.sql(\"select restType,cuisines,costRange,cnt,rnk from (select cuisines,costRange,restType,cnt,RANK()\\\nOVER(PARTITION BY restType order by cnt desc)rnk from (select distinct cuisines,costRange,restType,\\\ncount(cuisines) as cnt from RestTypeData group by cuisines,costRange,restType)) \\\nwhere rnk<=3 order by 1,4 desc\").toPandas().head(15)","aedafaf5":"top3Cuisines = spark.sql(\"select restType,cuisines,costRange,cnt,rnk from (select cuisines,costRange,restType,cnt,RANK()\\\nOVER(PARTITION BY restType order by cnt desc)rnk from (select distinct cuisines,costRange,restType,\\\ncount(cuisines) as cnt from RestTypeData group by cuisines,costRange,restType)) \\\nwhere rnk<=4 order by 1,4 desc\").toPandas()","e9e196ad":"fig = plt.figure(figsize=(19,8))\nfig.patch.set_facecolor('limegreen')\nplt.style.use('bmh')\n\nsns.barplot(data=top3Cuisines,x='rnk',y='cnt',hue='restType');\nplt.title(\"Comparing Restaurant Ranks wise of Top 5 restType?\",fontsize=15,fontweight='bold')\nplt.legend(prop={\"size\":15});\n","247e40cc":"fig = plt.figure(figsize=(19,10))\nfig.patch.set_facecolor('lightcoral')\nplt.style.use('bmh')\n\nplt.subplot(121)\nsns.barplot(data=top3Cuisines,x='restType',y='cnt',hue='cuisines');\nplt.xticks(fontsize=13,fontweight='bold',rotation=30);\nplt.yticks(fontsize=13);\nplt.xlabel(\"restType\",fontsize=13);\nplt.ylabel(\"count\",fontsize=13);\nplt.title(\"Which are the 4 most common cuisines in top 5 restType?\",fontsize=15,fontweight='bold')\nplt.legend(prop={\"size\":15},loc='upper left')\n\nplt.subplot(122)\nsns.barplot(data=top3Cuisines,x='restType',y='cnt',hue='costRange');\nplt.xticks(fontsize=13,fontweight='bold',rotation=30);\nplt.yticks(fontsize=13);\nplt.xlabel(\"restType\",fontsize=13);\nplt.ylabel(\"count\",fontsize=13);\nplt.title(\"Which are the costRange variation in top 5 restType?\",fontsize=15,fontweight='bold')\nplt.legend(prop={\"size\":15},loc='upper left');","323c9887":"top10Costpaid = zomatoDataPandas_withoutOutliers.groupby('approxCost(2 people)')['name'].count().sort_values(ascending=False).reset_index().head(10)['approxCost(2 people)'].tolist()\ntop10CostData = zomatoDataPyspark_withoutOutliers.filter(zomatoDataPyspark_withoutOutliers['approxCost(2 people)'].isin(top10Costpaid))\ntop10CostData = top10CostData.withColumnRenamed('approxCost(2 people)','avgCost2People')\ntop10CostData.registerTempTable('top10CostData')","a63316dc":"spark.sql(\"select avgCost2People,Cuisines,location,dishLiked,cnt,rnk from (select Cuisines,\\\ndishLiked,location,cnt,avgCost2People,RANK() OVER(PARTITION BY avgCost2People \\\norder by cnt desc)rnk from (select Cuisines,dishLiked,location,CAST(avgCost2People AS string),\\\ncount(Cuisines) as cnt from top10CostData where dishLiked != 'Unknown' group by Cuisines,dishLiked,\\\nlocation,avgCost2People)) where rnk<=3 order by 1,cnt desc,6\").toPandas().head(15)","763a2e0d":"spark.sql(\"select listedInType,RestType,Cuisines,cnt,rnk from (select RestType,Cuisines,listedInType,cnt,RANK() OVER(PARTITION BY listedInType order by cnt desc)rnk from (select RestType,Cuisines,listedInType,count(*) as cnt from zomatoData group by RestType,Cuisines,\\\nlistedInType order by cnt desc)) where rnk<=3 order by 1 desc,4 desc\").toPandas().head(20)","881413e3":"top3RestTypeData = spark.sql(\"select listedInType,RestType,Cuisines,cnt,rnk from (select RestType,Cuisines,\\\nlistedInType,cnt,RANK() OVER(PARTITION BY listedInType order by cnt desc)rnk from (select RestType,Cuisines,\\\nlistedInType,count(*) as cnt from zomatoData group by RestType,Cuisines,listedInType order by cnt desc)) \\\nwhere rnk<=5 order by 1 desc,4 desc\").toPandas()","4139063c":"fig = plt.figure(figsize=(19,10))\nfig.patch.set_facecolor('slategrey')\nplt.style.use('bmh')\n\nplt.subplot(121)\nsns.barplot(data=top3RestTypeData,y='listedInType',x='cnt',hue='RestType');\n\nplt.yticks(fontsize=13,fontweight='bold');\nplt.xticks(fontsize=13);\nplt.ylabel(\"listedInType\",fontsize=13);\nplt.xlabel(\"count\",fontsize=13);\nplt.title(\"Top 3 RestType wrt each listedInType.\",fontsize=15,fontweight='bold')\nplt.legend(prop={\"size\":13})\n\nplt.subplot(122)\nsns.barplot(data=top3RestTypeData,hue='listedInType',y='cnt',x='rnk');\nplt.yticks(fontsize=13);\nplt.xticks(fontsize=13);\nplt.ylabel(\"listedInType\",fontsize=13);\nplt.xlabel(\"count\",fontsize=13);\nplt.title(\"Ranking of each listedInType.\",fontsize=15,fontweight='bold')\nplt.legend(loc='upper right',prop={\"size\":13});","c0d617d8":"#### Creating Pyspark Dataframe","ae5d6aa2":"### 1. Top 10 Popular Location from where the customer often order\/visit for food.","2f8908a2":"#### Replacing Numerical column Null values with mean and Categorical columns with Unknown for PySpark Dataframe.","45227a24":"WE OBSERVE THE FOLLOWING:\n\n----------\n\n1. We see Chocolate Ice Creams,Brownie,Vanilla,Waffle,Chocolate Fudge,Nutella,Cream Roll,Frudge Cake,Sundae and Nachos Chocolate are the Dishes liked by bangaloreans in Desserts, Ice cream Parlors","04d77de2":"### 28) ListedInType Vs Ratings","8cab3b85":"Using Pandas","3ce5d284":"### 3)votes","efb486b6":"WE OBSERVE THE FOLLOWING:\n\n------------\nBest restaurant options under 500 Rupees (average cost):-\n1.  Brahmin's Coffee Bar with average cost=100 and rating=4.8 and votes=2679, CTR with average cost=150 and rating=4.7 and votes=4408, Veena Stores with average cost=150 and rating=4.5 and votes=2407\n2.  O.G. Variar & Sons with average cost=200 and rating=4.8 and votes=1156, Mavalli Tiffin Room (MTR) with average cost=250 and rating=4.5 and votes=2896, Belgian Waffle Factory with average cost=400 and rating=4.9 and votes=1746\n\n3. Also, observe that these cheaper options (cost<500) are all either Quick Bites, Cafe or Dessert Parlour.\n\n4. Casual Dining restaurants start above 600 , 6 out of 10 of the cheapest restaurants serve South Indian Cuisine\n\n5. As for the location, these cheap restaurant option are scattered and not localised to any specific location of the city.\n\n6. We can also explore the expensive options :-\nHere, we are only picking up the restaurants that cost more than 3000(half of most expensive restaurant) and are highest rated , have large votes.\n\n\n7. The Oberoi Hotel, Karavalli and JW Marriott make this high profile list\n\n8. Interestingly, all these restaurants have the same location- Brigade Road and same restaurant type- Fine dining","13fc1d03":"### 44) 5 Most popular Cities wrt Top 5 restaurant-types","b3c83c24":"### 69)Suggest me some restaurants nearby from where I can order food online.","317fa17f":"### 4) Distribution of Top 10 RestType in Bangalore.","6f26b1df":"### 12) Location wrt Ratings","8ff83441":"### 70) Top 5 restaurant name with their location,cost Range wrt each top 5 restType","3d050189":"WE OBSERVE THE FOLLOWING:\n\n-------\n1. Almost more than 50 percent of restaurants has rating between 3 and 4.\n2. Restaurants having rating more than 4.5 are less.\n\n3. We can observer from Scatter Plot 1 that restaurants which got rating between 3 and 4 haven't taken online order that means people went these the restaurants and the cost range is between 0 to 800 mostly.\n\n4. From Scatter Plot 2 we can observe restaurants which are actively providing online orders get relatively more votes than which don't provide online order.\n\n5. Restaurants not providing online orders are heavily gets votes between 0-100. \n\n6. 400 is the cost where both Online orders and and non-online orders votes are distributed 50-50% ","461d417f":"### 57)What is the relation between meal_type and location?","e983e17a":"WE OBSERVE THE FOLLOWING:\n\n------------\n1. We can observe almost all the location have more than 70% ratings as good, with BTM the most popular as it has most ratings.\n2. We can see Koramangala  5th Block has almost 50%-50% rate labels of Excellent and Good, that shows , this location has most most of the good restaurants and serve the best dishes.","f35e49e3":"### 64) Top 3 dishes liked in Most Rated Restaurant in top 10 locations","97ee34d2":"### 20) BookTable Vs RatingsBy5","3750e02d":"WE OBSERVE THE FOLLOWING:\n\n---------\n1. If the cost of food is more than 1000 than  majority of people have booked the table. These restaurants are more expensive also.\n2. If the cost of food is less than 1000 than  majority of people haven't booked the table.","4add84b9":"WE OBSERVE THE FOLLOWING:\n\n--------\n1. Cafee Cofee Day has the most number of outlets in the city of bangalore followed by Onesta, Just Bake and Empire Restaurant.\n2. McDonald's is on the 18th number according to number of outlets.","11e71cda":"### Data Cleaning\n\n#### Droping Unwanted Columns","a21cba46":"### 2) approxCost(2 people)","3971d415":"### 63) Data for most liked dishes for each restaurent was provided in top 10 locations","1cb6bf0f":"WE OBSERVE THE FOLLOWING:\n\n------\n1. We can observe BTM is the city where most of the restaurants are there followed by Koramangala Jayanagar\tand JP Nagar.","b84bf894":"### 56) How much is the Average Price of 2 people for ordering the dish from the most reliable data","0aa2e8cf":"#### Using PySpark","d1500636":"WE OBSERVE THE FOLLOWING:\n\n-------\n1. We can observe most of the ratings are between 3.3 and 3.9 which match with rate label 'good'","5b62121b":"### 40) WordCloud for Dishes liked by bangaloreans in South Indian restaurants.","5e72ace8":"### 10) Top 10 Rated Restaurant Type wrt RateLabels","a8cec915":"#### Fixing Votes, Approx Cost and Rating columns","efa03646":"WE OBSERVE THE FOLLOWING:\n\n-------------\n1. We see Paneer Roll,Sandwiches,Burji paratha,Chicken Roll,Chole,Ginger Tea,French Fries,Chai Samosa,Khichda Butter,Omelette,Salad and Pizza are the Dishes liked by bangaloreans in Fast Food restaurants","f24f946e":"#### Loading the Zomato.csv file","737689ed":"### 51)Top 10 Voted neighbourhoods","a8c7802d":"### 71) Top 3 Cuisines,dishLiked,location,dishLiked wrt top 10 cost paid ?","97a077fa":"### 11) RestType wrt Ratings","3e3a3ef7":"### 2) How many brands are there in the business?","406e50b2":"WE OBSERVE THE FOLLOWING:\n\n-------\n\n1. JW Marriott, The Gateway Hote,The Oberoi,Yauatcha and Melange - Radisson Blu are the most Costly and Famous High Class Restaurants in Bangalore.\n2. All these high class restaurants don't provide Online Orders and most of them provide table booking option.\n3. Italian,Mangalorean,Thai,Chinese,North Indian, Continental and American, BBQ are most famours Cuisines , that means mostly people order non-indian dishes there.\n4. Dine-out,Drinks and Nighlife,Pubs and bars are the most costly listedinType\n5. Lavelle Road,Residency Road,MG Road,Marathahalli,Whitefield,St.Marks Road and Indiranagar are the locations where these restaurants are located.","75238052":"### 32) ListedInCity Vs Avg Rating wrt Online Order and Table Book","8876fb21":"### 72) Top 3 RestType,cuisines wrt each listedInType.","96ec25d7":"#### Size of the File","2c0a578f":"### 61) WordCloud for Top Reviews by Customers","f8506782":"#### Checking Pandas Dataframe After performing complete Data cleaning","6c7e6df2":"### 67)WordCloud for allCuisines","3f7c5d5a":"## Feature Engineering ( For PySpark DataFrame )\n\n### Feature Addition\/Deletion,Feature Transformation,Feature Scaling","210e6de8":"### 38) WordCloud for Dishes liked by Bangalorean","48c53821":"WE OBSERVE THE FOLLOWING:\n\n1. We can see top locations are BTM,Whitefield and HSR which provide top cuisines like North Indian , Chinese and Biryani.","b97c43a2":"WE OBSERVE THE FOLLOWING:\n\n----------\nIf initial investment is not much of a concern for you and you are looking to increase your chances to maximum, then why don't go with one of the best locations loved by zomato customers.\n\nFrom the barchart, we can clearly see Koramangala dominates this scenario. Koramangala is the heart of Bangalore and attracts nearly all foodies. It might take heavy initial investment based upon it's popularity but it seems like a sure shot if you deliver well.","b5b327c2":"### 26) Distribution of restaurant rating over online order facility","e08d6bd1":"### 19) Online Orders Vs RatingsBy5","aacc7be2":"#### We can see from the mean and standard deviation of votes and cost that the variation of both these are very highly distributed away from the mean.\n\n#### possiblity of outliers are there.","4fa0b025":"WE OBSERVE THE FOLLOWING:\n\n-----------\n\n1. We can see Chicken peri peri,Hot Chocolate,Ice Cream,Chicken Pizza,Pasta,Cocktail,Craft Beer,Sear Food and Garlic Bread are the top Dishes that people like in the Higher Rated Restaurents as size tells the count.","4d6de598":"#### Schema of the dataframe","0be4ae2f":"### 42) WordCloud for Dishes liked by bangaloreans in Desserts, Ice cream Parlors","3508e3d6":"WE OBSERVE THE FOLLOWING:\n\n---------\n\n1. We see Briyani,Buffet,Paneer,Chicken,Pasta,Chololate,Papad,Cocktail,Pasta,Lunch,Momoes,Pizza are the Dishes liked by bangaloreans in restaurants.","de19fceb":"* #### **Checking Correlations of numeric columns**","507b2fc4":"WE OBSERVE THE FOLLOWING:\n\n-----------\n1. We see Pub,Cafe,Bar,Microbrewery and Irani Cafe are the restaurants which are the highest rated. Even though Pub,Bar and Cafe are costly they recieve the highest ratings.\n\n2. Dessart parlor,Kiosk,Bakery,Food Court,Casual Dining and Bhojanala are the restaurants which are the lowest rated. Though Dessart parlor,Kiosk,Bakery,Food Court are cheapest they recieve the lowest ratings.","93367da4":"### 71)Which are the 3 most common cuisines,costRange in top 5 restType?","e1c95374":"WE OBSERVE THE FOLLOWING:\n\n----\n### We can see the Correlations are not very stong, but correlation between votes and cost are better than others","8d005b65":"### 14) RestType wrt Ratings","bcceca52":"### 60)Top rated , Top voted Resturants in Bangalore","fe31ff6d":"### 62) Word Cloud for What did people like in the higher rated restaurents","a68118e8":"### 49) Location wise Rating of Dishes","956c6bcd":"WE OBSERVE THE FOLLOWING:\n\n-------\n1.  We see Punjab Grill,Levitate Brewery and Kitchen,Belgian Waffle Factor,Byg Brewski Brewing Company are the restaurants which top rated and voted wit reasonable cost for dishes.","82d943dd":"WE OBSERVE THE FOLLOWING:\n\n--------\n1. We can observe Dine-out and Delivery are the once where most of the people have and haven't booked table.","ef2f8b39":"### 22) Which are the 20 most common cuisines in Bangalore wrt location?","65158002":"WE OBSERVE THE FOLLOWING:\n\n--------\n1. After comparing top Cuisines in bangalore and top Cuisines in best Restaurants we can observe North Indian is still the most popular Cuisines followed by Chinease , Continental ,Cafe and Fast Food.","96208aa7":"WE OBSERVE THE FOLLOWING:\n\n----------\n\n1. We can see North Indian, Chinease,Fast Food,South Indian,Street Food are the top Cuisines as size shows the count","30fb1481":"#### Using Interpolation Method to fill null Numeric Values","c4ddfae8":"WE OBSERVE THE FOLLOWING:\n\n--------\n1. Five Star Chicken, Domino's Pizza,MaDonald's,Empire Restaurant and KFC are the top 5 restaurants which are best for Quick Bites and Casual Dining.","876401dc":"WE OBSERVE THE FOLLOWING:\n\n----------\n1. Online Orders ratings are mostly above average ,Though BTM is the city where most of the restaurants there but ratings for both online and non online orders are less compared to cities like MG Road, Labelle Road and many more.\n\n2. MG Road, Labelle Road,Church Street,Brigade Road and Residency road are the cities which are rated the best among all cities for both Online Orders and non Online Orders.\n\n3. Bannerghatta Road,Brookefield,Electronic City, Marathahalli,Sarajapur Road are the cities which are rated very bad among all cities for both Online Orders and non Online Orders.\n\n4. For Table Booking we can Ratings for non table booking are below average that table bookings and there is simalar pattern observed which was observed in Online Orders. The best cities for online orders gets high ratings for table bookings and vice versa.","a1a8e3bd":"#### Dropping Duplicates in both Dataframes","cbdd1046":"WE OBSERVE THE FOLLOWING:\n\n--------\nWe can see Location with Orange color mark are most popular location thus have highly distributed ratings with lowest to highest.","fb948880":"* Creating 4 bins for dividing Price.","d0691d52":"WE OBSERVE THE FOLLOWING:\n\n--------\n1. We can observe that Online order and Table Bookings gets more Votings than Non Online Order and Non Table Bookings.\n\n2. Banashankari,IndiraNagar,Malleshwaram,Old Airport Road are the cities which got highest votings among all cities for Online Orders.\n3. Bridhe Road,Chrurch Street,Indiranagar,MG Road,Residency Road are the cities which got highest votings among all cities for Non Online Orders.\n\n4. Kalyan Nagar,Kammanahali,Malleshwaram,Rajinangar are the cities which got highest votings among all cities for providing Table Bookings.\n5. Electronic City,Whitefield,Sarjapur Road,Marathahalli are the cities which got lowest votings among all cities for not Table Bookings.","bbda2140":"### 50) Comparing Ratings Vs Top 12 RestType","a8ec3d18":"### 7) Distribution of Cost Vs Rating and Cost Vs Votes wrt Online Orders","b34c1d04":"### 55) Top 10 Cuisines across best Resaurant in Bangalore","862b4b69":"### 24) Find location of all the Restaurants in Map","6e02dca7":"### 16)Table booked wrt Cost","44488572":"## Removing Ouliers","5558485a":"WE OBSERVE THE FOLLOWING:\n\n-----------------\n1. North Indian, South Indian, Chinese are very popular in Banguluru.\n\n2. We can observe that North Indian,chinese,South Indian and Biriyani are most common.\n\n3. Is this imply the fact that Banglore is more influenced by North Indian culture more than South?","4abce02d":"WE OBSERVE THE FOLLOWING:\n\n---------\n1. We can observe Dine-out and Delivery have less avg ratings than others.\n2. Drinks and Pubs,Bars have the highest avg ratings among all ListedType.","90d9bb3a":"### 18)OnlineOrder Vs Votes and OnlineOrder Vs ApproxCost wrt book Table","8c32d48d":"WE OBSERVE THE FOLLOWING:\n\n---------\n1. 50% of the rate distribution lies between 3.4 and 4.0 with an average rating of 3.7. \n\n2. Rating of a restaurant play major role in success. Nearly everyone checks out the rating before even planing to go out. \n\n3. To run a successful restaurant business above avaerage zomato rating is a must.","2f942ff6":"### Feature Creation","c7fd1789":"### 8) Distribution of Votes Vs Ratings wrt Online Order and Table Booked.","d35177ef":"#### Using Pandas","10c246c5":"WE OBSERVE THE FOLLOWING:\n\n-------\n1. We can see if customer hasn't done online order and table booking then their ratings are highly distributed between ratings 3.2- 3.6 then decreases.\n\n2. If customer has Online ordered and have't booked table then their ratings are better than above case and are highly distributed between ratings 3.2- 4.1 then decreases.\n\n3. If customer has Online ordered and booked table enen though their percent is less still they have rated above average between 3.7 and 4.5","ce88c020":"WE OBSERVE THE FOLLOWING:\n\n----------------\n1. More clear here that if your restaturat has not the book table service you still have the opportinity to have a similar rate as other restaurant provide this service. Most of the restaurant has not this service\n\n2. while at rate around 4.2 and above we notice higher number of restaurants at this rate and provide book_table service\n\n3. Restaurants which provide online order facility seem to have better rating than the restaurants which don't","536684e1":"WE OBSERVE THE FOLLOWING:\n\n----------\n1. Online Orders rating are pretty high compared to not Online Orders.\n2. Very high Ratings like 4.5 and above are mostly equal for both Online and Non Online orders.\n3. We can also see poor ratings between 2.1 to 3 are also mostly given by people ordered online.","3219a101":"### 1) ratingsBy5","fdf20f4c":"* **As per the dataset Size, so we can reduce the number of write partition from default 200 to 10 to speed up the processing**","8c95eeca":"### 25) FINDING NORTH INDIAN RESTAURANTS IN BENGALURU","d5ef5d00":"### 48) Rate Distribution and Rate Label Distribution","8e1bf51e":"### **Feature Creation**","5b97b6e5":"We Observe That:\n\n------------\nRestaurants are concentrated towards the center of Bangaluru.\nCentral Bangaluru is the best place for starting new restautrants.","b739ba46":"### 35) Total Cuisines in Bangalore","c26e4c00":"### 43) Most popular restaurant-types in each City","98703c8d":"### We can see there are lot of outliers and ","fdf5de8d":"### Data Cleaning\n\n#### Fixing columns in PySpark Dataframe","03fb6852":"### 51) Comparing Ratings Vs Online Orders","c5623bb9":"WE OBSERVE THE FOLLOWING:\n\n--------------\nAgain here if you go through each color you will get the hint that Each location has dominat types of mealEach meal has tendency to be more in certain locations like:\n1. Kengri has high percentage of its restaurant as Cafe type\n2. Rajarajeshwari Nagar has nothing but Delivery ! same in Central Bangalore\n3. Pennya : 100% as Dineout\n3. Langford Town : you will find the highest mix of drinks& nightlife and pubs beside dineout\n5. Commercial street: around 20% of its restaiurants in the dessert type","72010177":"WE OBSERVE THE FOLLOWING:\n\n--------\n1. Restaurants accepting online orders get more umber of votes.\n2. Median number of votes are different in both categoies.\n3. The cost is significantly less when restaurants accept orders online.","ebbe3882":"### 17)Online Order wrt Cost","dff21b6f":"#### Total Rows and Columns in dataframe.","5431441c":"### 45) Top 20 Resturants wrt Top 2 Restaurant Types","d0fc953c":"### 39) WordCloud for Dishes liked by bangaloreans in North India restaurants","a97566ea":"### 21) MOST FAMOUS CUISINES IN BANGULURU","d6e2e5af":"WE OBSERVE THE FOLLOWING:\n\n----------\n1. From Scatter Plot 1 we can observe that for Online orders ratings are high between 3 and 4.2 and votes are also high between 3.7 and 4.5 ratings and Avg Online Order Ratings is better that  Non Online Order.\n\n2. Even though for for non online orders the the votes are less except between 4.2 and above but the rating are pretty high for 4.3 and above ratings.\n\n3. From Scatter Plot 2 we can observe restaurants which dont provide Table Bookings gets bad ratings even thought they get good amount of votes. That's why there avg ratings is pretty low around 3.6 than the restaurants providing booking with avg rating of around 4.2.\n\n4. Restaurants providing Table Bookings get pretty pretty high ratings and high votes and have better avg ratings.\n","9e3c7cb3":"### 58) What is the relation between meal type and the rating?","2ee198f7":"WE OBSERVE THE FOLLOWING:\n\n---------\n#### We can observe that Casual Dining , Cafe, Quick Bites and Bar are the top Rated Restaurant types with highest Positive Ratings.","906936c4":"#### We can see there are no values greater than Upper Bound but many values are less than Lower Bound","0d680354":"WE OBSERVE THE FOLLOWING:\n\n----------\n1. We can notice cost of food in a city doesn't vary much in online and offline orders,though being online order costlier.\n\n2. Bridade Road,Church Street,MG Road,Indranager,Kalyan Nagar and Lavelle Road are the city are costlier for online orders.\n3. Bridade Road,Church Street,MG Road,Residency Road and Lavelle Road are the city are costlier for offline orders.\n4. We can see cities like Baneshankari,kalyan nagar,Kammanahali,Basavanagudi,and New BEL Road do vary by almost 100 rupees for its online and offline order.\n\n5. Table booking cost for food in a city varies around 200-300 more for booking, with Bannerrghatta Road,Basavanagaudi,JP Nagar,Jayanagar,and Rajajinangar having highest cost for booking.","ab7e1413":"### 46) Distribution of Cost Range of Dishes","6ad07a42":"### 9) Distribution of Ratings Vs Cost and Votes Vs Cost wrt Table Booked.","4f0deeca":"### 68) Finding the best restaurants:- The criteria for best restaurants would be \n1. cheapest\n2. highly rated\n3. reliable(large number of votes) options.","8ed864b4":"WE OBSERVE THE FOLLOWING:\n\n---------\n1. We can see that ListedIntype marked with Purple and Blue color are very highly distributed with positive ratings between ratings 3 - 4.\n2. ListedIntype marked with Dark Blue and Olive color are very highly distributed with positive ratings between ratings 4.1 - 4.9 .","8aa53655":" #### * ***We can see there are issues with data in rows***","7b6d26b5":"#### Renaming Column names for better readability ","c6496146":"#### Fixing Phone Number Column and replacing the null values with Unknown","c5fe56fc":"#### Since, missing values are more dish_liked and rest_type so it can make column biased\n#### Filling NaN values with Unknown making it a seperate category","8e29baa5":"WE OBSERVE THE FOLLOWING:\n\n----\n#### We can observe that there are total of 8792 restaurants that have tie up with Zomato. ","cbd8eea0":"#### Data Cleaning on ReviewText column for better understanding.","a20a18ad":"WE OBSERVE THE FOLLOWING:\n\n-----------\n1. Five Star Chicken, Domino's Pizza,MaDonald's,Empire Restaurant and KFC are the top 5 restaurants which are best for Quick Bites and Casual Dining.","ec00edb2":"### 66) Top 5 Rated Restaurant vs Least 5 rated Restaurant","95a01044":"### 27) BookTable Vs ListedInType","eb4c0aed":"WE OBSERVE THE FOLLOWING:\n\n-----\n1. The pubs and Bars & the Drinks and nightlife gets more of Excellent Rating may be as they are not much located and their quality is also very good.\n2. Buffets get almost 50-50% of Good and Excellent Ratings that shows buffet dishes quality are very good.","7fdadd3a":"### 53) Where one can find the best restaurants in Bangalore?","feb98726":"* #### Using Normalization Method for Pandas Dataframe.","42ab60cf":"### 33)  ListedInCity Vs Avg Voting wrt Online Order and Table Book","2deadf59":"### Feature Scaling\n\n* #### Using Standardization for PySpark DataFrame","05e5180a":"WE OBSERVE THE FOLLOWING:\n\n----------\n1. Pretty Low ratings are given by people that are not booking table.\n2. Ratings upto 4.2 are high for people that have booked tables than who haven't\n3. Very high ratings like 4.3 and above are mostly given by people that have booked the table.","9e3a70df":"### 54) Distribution of Top 10 Cuisines","642490df":"WE OBSERVE THE FOLLOWING:\n\n-----\n1. We can observe BTM,Koramangala, jayanagar,JP Nagar are the most popular citys for the top 6 restaurant Type","70e03d33":"### 23) Which are the 5 most common cuisines in top 5 locations?","25171413":"## Feature Engineering ( For Pandas DataFrame )\n\n### Feature Addition\/Deletion,Feature Transformation,Feature Scaling","5bd91b93":"### 30) Show the Max and Min Ratings wrt each ListedInCity","b8aa167b":"WE OBSERVE THE FOLLOWING:\n\n-------------\n1. We can observe that good,place,beautiful,family,dinner,awesome,service,food,interiors,incomparably ect so this shows majaority of people have given good reviews about that as size shows the count.","24449b8b":"#### Since, missing values for Location,cuisines are less so can replace by mode and it wont make the column biased","2f0ff5e6":"WE OBSERVE THE FOLLOWING:\n\n----\nAs we can see, quick bites and Casual Dining are the most popular restaurant type for each suburb across the City, Let's also explore the most poplular restaurants in quick bites.","b91bd657":"### 5) Distribution of Top 6 Restaurant Types in Bangalore.","ad51b8c3":"The lower boundary is meaningless because there can't be a negative price for food","9704f727":"WE OBSERVE THE FOLLOWING:\n\n-----\n1. If you are trying to open a new foodchain then locations with most number of unique restaurants can be helpful. It looks like people prefer to open new restaurants in these locations before moving to locations like Kormangala.\n\n2. Whitefield tops the chart and it maked sense also. It's a newly established locality filled with working professionals. As it's little bit far away from central bangalore, you might not need to pay hefty amount to start a business.","307cd35f":"#### Expressing Missing Values with Percentages for each column In Pyspark Dataframe","6cd80f62":"The Histogram is nearly right skewed.\nWe can see there are some Outliers in Ratings so, we have to fix that using \n\n### ***Using Normalization Techniques***\n\nUsing Inter Quantile Range Method \/ Standard Devaition method to fix outliers","2c79c50e":"### We can see the distribution is normal now and all outliers are removed.","2c8c2cf0":"WE OBSERVE THE FOLLOWING:\n\n-----------------\n1. We can notice Quick Bites got majority of ratings between 3.3 - 3.7 .\n\n2. Casual Dinings got the 2nd hightest ratings but after 3.5 the ratings get better and gets better ratings than Quick Bites from 4.0 and above. Thus its average rating is more than Quick Bites.\n\n3. The other Resttypes gets almost same ratinga but Cafe which gets 3rd highest ratings increase and gets better than Quick Bites after 4.2.","00dd619f":"WE OBSERVE THE FOLLOWING:\n\n----------\n1. If the cost of food is more than 1000 than majority of people have not ordered Online, thus they might have booked and went to restaurant.\n2. If the cost of food is less than 1000 than majority of people have ordered Online.","e955c269":"* #### Creating 4 bins for dividing Price.","44c245fa":"### 41) WordCloud for Dishes liked by bangaloreans in Fast Food restaurants","f07d9541":"### 36) Top 2 Restaurant with Ratings more than 4.5 for each listedInType","17160689":"WE OBSERVE THE FOLLOWING:\n\n-----\n1. The average price for most appreciated restaurants is around 600 for two persons","12682c07":"#### Printing Final Schema of PySpark Dataframe after data cleaning","ede6cc90":"WE OBSERVE THE FOLLOWING:\n\n---------\n1. We can see Restaurant Type marked with Pink Color are highly distributed for both good and bad reviews.\n\n2. Restaurants Marked with Purple Color are 2nd largest distibuted with ratings 3.6 - 4.2","729f2d73":"#### Expressing Missing Values with Percentages for each column In Pandas Dataframe","34d3625a":"### 31) Top 20 ListedInCity in bangalore","0c0e53ed":"WE OBSERVE THE FOLLOWING:\n\n---------\nWe see Briyani,Chicken,Paneer Tikka,Lassi,Salad,Veg Thali,Paratha,Rice are the Dishes liked by bangaloreans in North India restaurants","80f88629":"Final Conclusion\n\n----------\n\n1. We figured BTM, Koramangala, HSR are good places to start restaurant. WhiteField has most number of unique restaurants and can be cheaper to get started. Koramangala, Indiranagar, BTM are most popular locations among foodies.\n\n2. Large number of votes can ensure better rating and 1K for 2 people is good to go price.\n\n3. Bangalorian love NorthIndia and Fast Food.\n\n4. Providing online ordering can boast your chances.","a87f05cf":"### 59)Expensive,Famous and High Class Resturants in Bangalore","b959ed62":"1. For Continental, North Indian, Chinese, European restaurants located in Koramangala 5th Block,Electronic City,Whitefield are the best like Biergarten,The Big Barbeque,You Mee restaurant.\n\n2. For North Indian Food restaurants located in Whitefield are the best like Punjab Grill restaurant.\n\n3. For South Indian Food restaurants located in Banashankari,Jayanagar are the best like Taaza Thindi,Puliyogare Point,Brahmin Tiffins & Coffee,Taaza Thindi,Sri Laxmi Venkateshwara Coffee Bar restaurant.\n\n4. For Dessert restaurants located in Koramangala 5th Block,Vasanth Nagar,Kalyan Nagar are the best like Belgian Waffle Factory and Kurtoskalacs restaurant.","48f213ca":"WE OBSERVE THE FOLLOWING: (Final result with above 3 plots)\n\n----------\n\n1. Based of above 3 plot insights we can findout which City is best if the customer wants to buy food online or go the restaurants.\n2. We can even know which city is the best if we want to book the table in restaurant or not.","5c496d0f":"WE OBSERVE THE FOLLOWING:\n\n------\n1. Cafe Coffee Day & Onesta has biggest restaurants chains across the city\n2. Truffles and Hammered are the good restaurants - rating more than 4.5","5eb930d9":"### WE OBSERVE THE FOLLOWING:\n\n------------------\n1. We can see Cafe,Lounge,Bar,Pub and Casual Dinings are the most costly Restaurant Types.\n\n2. We can see Dessart parlor,Sweet Shop,Beverage Shop,Bakery and Food Court are the most cheapest Restaurant Types ","612eaea2":"Using Pyspark , Creating UDF","8057d2aa":"### 15) Which are the top restaurant chains in Bangaluru?","cfe95f1d":"### 47) Top 20 Dish liked by bangaloreans","9d9f071c":"### 37)Biggest Restaurant Chain and Best Restaurant Chain","77e7a3b2":"### 34) ListedInCity Vs Avg Cost writ Online Order and Table Book","9eec32f8":"### 6) Distribution of Ratings of restaurants in Bengalore.","88dfe7fd":"WE OBSERVE THE FOLLOWING:\n\n---------\n1. As clearly indicated,almost 60 per cent of restaurants in Banglore accepts online orders.Nearly 40 per cent of the restaurants do not accept online orders.\n\n2. This might be because of the fact that these restaurants cannot afford to pay commission to zomoto for giving them orders online. zomato may want to consider giving them some more benefits if they want to increse the number of restaurants serving their customers online.\n\n3. Almost 90 percent of restaurants in Banglore do not provide table booking facility.In India you cannot find table booking facility in any average restaurants,usually only five star restaurants provides table booking.","ce094d6a":"### 13) Label wise Rating wrt ListedInType","3d3a3142":"#### Checking PySpark Dataframe After performing complete Data cleaning","c7a1e6b7":"WE OBSERVE THE FOLLOWING:\n\n------------\n\n1. We see Masala Dosa,Filter Coffee,Vada,Khali Dosa,Rava Idli,Butter Milk,Kesari bath,Benne are the Dishes liked by bangaloreans in South Indian restaurants.","1b56a5c9":"### 29) Online Order Vs ListedInType","40c8c3dc":"### 65)Top 5 expensive rest type vs least 5 rest type","4c2096b9":"WE OBSERVE THE FOLLOWING:\n\n-------------\n1. Delivery and Cafes have are again highest among both Online order and non online orders.\n2. As expected most of the restaurants which provide online order option also delivers food\n3. Many of the Buffet type restaurants doesn't provide an option of online order\n4. Very few Pubs and bars and Drinks,LifeStyle has option of order online, that makes sense","8e54f07c":"## What are the best restaurants in Bangalore ?\n### To answer this question let's first define the best restaurant: This will be as:\n\n1. #### has the highest possible rate , above average plus,\n2. #### has the highest number of votes as it will more reliable plus\n3. #### has the lowest possible cost","b0f1de7c":"WE OBSERVE THE FOLLOWING:\n\n-----------------------\n1. We can see North-India is most loved Cuisine in Bangalore followed by Chineas,South Indian,Fast Food and Biryani.","128dc4b2":"* ##### *Persisting zomatoDataPyspark Dataframe in memory for performing performance in furture operations*","a6101a16":"### 3) Distribution of Online Order and Table Bookings"}}