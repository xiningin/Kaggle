{"cell_type":{"51c3d7dc":"code","cb8bcdae":"code","cca3d8c2":"code","273c5d66":"code","54cc8a35":"code","b701da57":"code","6c191cd7":"code","5b76e0e1":"code","0d058d37":"code","5cad0233":"code","ce590172":"code","2901a1b0":"code","2b9c6aa7":"code","6dcf25f3":"code","dc838305":"code","40724af2":"code","83f8b76d":"code","53475e71":"code","94b73cee":"code","c07d62cc":"code","f5caa31d":"code","2a9a9043":"code","0327f63d":"markdown","83623385":"markdown","2ded0549":"markdown","caf2baa9":"markdown"},"source":{"51c3d7dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cb8bcdae":"df = pd.read_csv('..\/input\/end-als\/end-als\/clinical-data\/filtered-metadata\/metadata\/aals_released_files.csv', encoding='ISO-8859-2')\npd.set_option('display.max_columns', None)\ndf.head()","cca3d8c2":"df.shape","273c5d66":"df.isnull().sum()","54cc8a35":"df[\"experiment\"].value_counts()","b701da57":"df[\"data_level\"].value_counts()","6c191cd7":"df[\"data_level\"].value_counts().plot.bar(color=['blue', 'red','lime','purple'], title='ALS Released Files Data Level');","5b76e0e1":"df[\"differentiation\"].value_counts()","0d058d37":"corr_matrix = df.corr()\ncorr_matrix['data_level'].sort_values().plot(kind=\"bar\")\nprint(corr_matrix['data_level'].sort_values())\nplt.show()","5cad0233":"sns.clustermap(corr_matrix, annot=True, fmt=\".3f\", figsize=(10,10))\nplt.title(\"Correlation Between Features\")\nplt.show()","ce590172":"# Lets first handle numerical features with nan value\nnumerical_nan = [feature for feature in df.columns if df[feature].isna().sum()>1 and df[feature].dtypes!='O']\nnumerical_nan","2901a1b0":"# categorical features with missing values\ncategorical_nan = [feature for feature in df.columns if df[feature].isna().sum()>0 and df[feature].dtypes=='O']\nprint(categorical_nan)","2b9c6aa7":"# replacing missing values in categorical features\nfor feature in categorical_nan:\n    df[feature] = df[feature].fillna('None')\n    \ndf[categorical_nan].isna().sum()","6dcf25f3":"df = pd.get_dummies(df)","dc838305":"Y = df['data_level'].values\nX = df.drop(labels=['data_level'], axis=1)","40724af2":"from sklearn.model_selection import train_test_split\n\nx_train, x_val, y_train, y_val = train_test_split(X, Y, test_size=0.2, random_state=58)","83f8b76d":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_val.shape)\nprint(y_val.shape)","53475e71":"#Code by Muhammed Halil Akkaynak https:\/\/www.kaggle.com\/halilakkaynak\/tps-apr-eda-and-ann\/notebook\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\ndef create_ann_model():\n    model = Sequential()\n    model.add(Dense(8, activation=\"relu\", input_dim=5278))\n    model.add(Dense(4, activation=\"relu\"))\n    model.add(Dense(2, activation=\"relu\"))\n    model.add(Dense(1, activation=\"sigmoid\"))\n    model.compile(loss=\"binary_crossentropy\", metrics=['accuracy'])\n    return model\n\nmodel = create_ann_model()\nmodel.summary()","94b73cee":"model.fit(x_train, y_train, epochs=5, batch_size=32) # ohe kullan","c07d62cc":"#Code by Muhammed Halil Akkaynak https:\/\/www.kaggle.com\/halilakkaynak\/tps-apr-eda-and-ann\/notebook\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\npred = model.predict(x_val)\npred = (pred > 0.5)\ny_true = np.int64(y_val)\ny_true = y_true.round()\npred = pred.round()\ncm = confusion_matrix(y_true, pred)\nscore = accuracy_score(y_true, pred)\nprint(\"Score: \", score)\nfig, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm, annot=True, linewidths=0.01, cmap=\"Blues\", linecolor=\"green\", fmt=\".2f\", ax=ax)\nplt.xlabel(\"Predict\")\nplt.ylabel(\"True\")\nplt.title(\"Confusion Matrix\")\nplt.show()","f5caa31d":"#Since there is No submission, I save that for next time.\n\n#pred = model.predict(df)\n#submission['data_level'] = (pred[:, 0] > 0.5).astype(int)\n#submission.to_csv('submission.csv', index=False)","2a9a9043":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Thank you Muhammed Halil Akkaynak @halilakkaynak for the code' )","0327f63d":"#input dim is taken from the numbers above 5278 X train shape.","83623385":"**<span style=\"color:#DC143C;\">whole-genome sequencing (WGS)<\/span>**","2ded0549":"Computational performance of the pipeline to process whole-genome sequencing and whole exome sequencing data from fastq file to the generation of the final result report.\n\nAuthors: Alfredo Iacoangeli,Ahmad Al Khleifat,William Sproviero,Aleksey Shatunov,Ashley R. Jones,Sarah Opie-Martin - https:\/\/doi.org\/10.1080\/21678421.2018.1562553\n\n![](https:\/\/www.tandfonline.com\/na101\/home\/literatum\/publisher\/tandf\/journals\/content\/iafd20\/2019\/iafd20.v020.i03-04\/21678421.2018.1562553\/20200214\/images\/medium\/iafd_a_1562553_f0003_c.jpg)https:\/\/www.tandfonline.com\/doi\/full\/10.1080\/21678421.2018.1562553","caf2baa9":"<h1 style=\"background-color:#DC143C; font-family:'Brush Script MT',cursive;color:white;font-size:200%; text-align:center;border-radius: 50% 20% \/ 10% 40%\">ALSgeneScanner: a pipeline for the analysis and interpretation of DNA sequencing data of ALS patients<\/h1>\n\nAuthors: Alfredo Iacoangeli,Ahmad Al Khleifat, William Sproviero, Aleksey Shatunov,Ashley R. Jones, Sarah Opie-Martin - https:\/\/doi.org\/10.1080\/21678421.2018.1562553\nPages 207-215 | Received 12 Sep 2018, Accepted 27 Nov 2018, Published online: 05 Mar 2019\n\n\"Genetic factors are an important cause of ALS, with variants in more than 25 genes having strong evidence, and weaker evidence available for variants in more than 120 genes. With the increasing availability of next-generation sequencing data, non-specialists, including health care professionals and patients, are obtaining their genomic information without a corresponding ability to analyze and interpret it. Furthermore, the relevance of novel or existing variants in ALS genes is not always apparent. Here the authors present ALSgeneScanner, a tool that is easy to install and use, able to provide an automatic, detailed, annotated report, on a list of ALS genes from whole-genome sequencing (WGS) data in a few hours and whole exome sequence data in about 1\u2009h on a readily available mid-range computer. This will be of value to non-specialists and aid in the interpretation of the relevance of novel and existing variants identified in DNA sequencing data.\"\n\nhttps:\/\/www.tandfonline.com\/doi\/full\/10.1080\/21678421.2018.1562553"}}