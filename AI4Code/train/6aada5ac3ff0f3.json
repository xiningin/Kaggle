{"cell_type":{"50bf3f21":"code","e844ea2c":"code","a54f9f26":"code","fd6dc02a":"code","3e7944f2":"code","6ed33501":"code","d8459e20":"code","a5b045f4":"code","c2ae7287":"code","c84cd033":"code","66c484d3":"code","e5b57367":"code","66548b6a":"code","9efe5851":"code","059d9494":"code","3843517c":"code","cb742262":"code","99d3d64f":"code","cd46729d":"code","cd3a9d67":"code","6eb269dc":"code","aaebf523":"code","00d96389":"code","6197c05c":"code","890c390a":"code","78a5840f":"markdown","4360b8d4":"markdown","c00a71f4":"markdown","9ea1e108":"markdown","68796340":"markdown","293a306a":"markdown","b6f4cb7d":"markdown","ddc1b6e1":"markdown","3a7d71ca":"markdown","f1e14854":"markdown","145adcf7":"markdown","f31924dc":"markdown","28c0adf3":"markdown","cfc692dc":"markdown","b5a95b6b":"markdown","272f9d8f":"markdown","ae6b3ac2":"markdown"},"source":{"50bf3f21":"\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\n# from keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n\nsns.set(style='white', context='notebook', palette='deep')\n\nimport warnings\nwarnings.filterwarnings('ignore')","e844ea2c":"# Load the data\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","a54f9f26":"Y_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) \n\n# free some space\ndel train \n\ng = sns.countplot(Y_train)\n\nY_train.value_counts()","fd6dc02a":"# Check the data\nX_train.isnull().any().describe()","3e7944f2":"test.isnull().any().describe()","6ed33501":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","d8459e20":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","a5b045f4":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)","c2ae7287":"# Split the train and the validation set for the fitting\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)","c84cd033":"g = plt.imshow(X_train[1][:,:,0])","66c484d3":"# Set the CNN model \n# my CNN architechture is In -> [[Conv2D->relu]*2 -> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","e5b57367":"import tensorflow as tf\noptimizer = tf.keras.optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","66548b6a":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","9efe5851":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_loss', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","059d9494":"# Without data augmentation i obtained an accuracy of 0.98114\nhistory = model.fit(X_train, Y_train, batch_size = 86, epochs = 10, \n         validation_data = (X_val, Y_val), verbose = 2)","3843517c":"# With data augmentation to prevent overfitting (accuracy 0.99286)\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","cb742262":"# Fit the model --> fit.generator to fit\nfrom keras.callbacks import EarlyStopping\nearlystopper = EarlyStopping(monitor='val_loss', min_delta=0,\n                             patience=1, verbose=1, mode='auto')\n\nhistory = model.fit(datagen.flow(X_train,Y_train, batch_size=86),\n                              epochs = 10, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ 86\n                              , callbacks=[learning_rate_reduction, earlystopper])\n# callbacks=[learning_rate_reduction, earlystopper]","99d3d64f":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","cd46729d":"# # Look at confusion matrix \n\n# def plot_confusion_matrix(cm, classes,\n#                           normalize=False,\n#                           title='Confusion matrix',\n#                           cmap=plt.cm.Blues):\n#     \"\"\"\n#     This function prints and plots the confusion matrix.\n#     Normalization can be applied by setting `normalize=True`.\n#     \"\"\"\n#     plt.imshow(cm, interpolation='nearest', cmap=cmap)\n#     plt.title(title)\n#     plt.colorbar()\n#     tick_marks = np.arange(len(classes))\n#     plt.xticks(tick_marks, classes, rotation=45)\n#     plt.yticks(tick_marks, classes)\n\n#     if normalize:\n#         cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n#     thresh = cm.max() \/ 2.\n#     for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n#         plt.text(j, i, cm[i, j],\n#                  horizontalalignment=\"center\",\n#                  color=\"white\" if cm[i, j] > thresh else \"black\")\n\n#     plt.tight_layout()\n#     plt.ylabel('True label')\n#     plt.xlabel('Predicted label')\n\n# # Predict the values from the validation dataset\n# Y_pred = model.predict(X_val)\n# # Convert predictions classes to one hot vectors \n# Y_pred_classes = np.argmax(Y_pred,axis = 1) \n# # Convert validation observations to one hot vectors\n# Y_true = np.argmax(Y_val,axis = 1) \n# # compute the confusion matrix\n# confusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# # plot the confusion matrix\n# plot_confusion_matrix(confusion_mtx, classes = range(10)) \n","cd3a9d67":"import seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1)\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes)\nsns.heatmap(confusion_mtx, annot=True, fmt='d')","6eb269dc":"# Display some error results \n\n# Errors are difference between predicted labels and true labels\nerrors = (Y_pred_classes - Y_true != 0)\n\nY_pred_classes_errors = Y_pred_classes[errors]\nY_pred_errors = Y_pred[errors]\nY_true_errors = Y_true[errors]\nX_val_errors = X_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)))\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)","aaebf523":"# for a image as input\n# #import libraries\n# from keras.preprocessing import image\n# import cv2\n# import numpy as np\n\n# #load image\n# path = '..\/input\/just-for-trail\/531-5314816_handwritten-1-number-9-hand-written-png-transparent.png'\n# test_image = image.load_img(path, target_size = (28, 28, 1))\n# #convert image to array\n# test_image = image.img_to_array(test_image)\n# #rgb values to grayscale\n# test_image = np.mean(test_image, axis=2)\n# #normalize\n# test_image = test_image\/255.0\n# #reshaping\n# test_image = test_image.reshape(-1, 28,28,1)\n\n# #prediction\n# result = model.predict(test_image)\n# #predict method gives us probablity of all classes and hence use np.argmax\n# result = np.argmax(result,axis=1)\n# print(result[0])","00d96389":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","6197c05c":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"submission.csv\",index=False)","890c390a":"submission.head()","78a5840f":"Train and test images (28px x 28px) has been stock into pandas.Dataframe as 1D vectors of 784 values. We reshape all data to 28x28x1 3D matrices.","4360b8d4":"## 4.2 Confusion matrix","c00a71f4":"Without data augmentation i obtained an accuracy of 99.13%","9ea1e108":"## 2.6 Split training and valdiation set","68796340":"**There is no missing values in the train and test dataset. So we can safely go ahead.**","293a306a":"## 2.5 Label encoding","b6f4cb7d":"## 2.3 Reshape","ddc1b6e1":"# 4. Evaluate the model\n   ## 4.1 Training and validation curves","3a7d71ca":"## 3.4 Data augmentation","f1e14854":"## 3.2 Set the optimizer and annealer","145adcf7":"## 2.2 Check for null and missing values","f31924dc":"## 2.3 Normalization\n**We perform a grayscale normalization to reduce the effect of illumination's differences.**\n\n**Moreover the CNN converg faster on [0..1] data than on [0..255].**","28c0adf3":"# 1. Introduction\n\nIt's a 5 layers Sequential Convolutional Neural Network for digits recognition trained on MNIST dataset. build in with keras API (Tensorflow backend) which is very intuitive. Firstly,prepare the data (handwritten digits images) thenwill focus on the CNN modeling and evaluation","cfc692dc":"## 3.3 Data without augmentation","b5a95b6b":"# 3. CNN","272f9d8f":"choosed to split the train set in two parts : a small fraction (10%) became the validation set which the model is evaluated and the rest (90%) is used to train the model.","ae6b3ac2":"# 2. Data preparation\n   ## 2.1 Load data\u00b6"}}