{"cell_type":{"71ec037e":"code","5d02e447":"code","88e6ed02":"code","367fb2da":"code","43864090":"code","e9fac71d":"code","1baa507c":"code","9c126dec":"code","20f1da65":"code","ac75c547":"code","c353bf35":"code","9ad340e6":"code","cf386cd5":"code","d1b29ad8":"code","fabc1821":"code","c2f0dda0":"code","85b44246":"code","96c2b465":"code","14b7a394":"markdown","1d92e1e9":"markdown","8cde249d":"markdown","3ef87f24":"markdown","2a99e779":"markdown","70a8b908":"markdown","90d52fcd":"markdown","c95f9e5f":"markdown","021e5d9f":"markdown"},"source":{"71ec037e":"import nltk\nimport numpy as np\nimport re\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom pandas import read_csv\nimport collections","5d02e447":"dataset = read_csv('..\/input\/reviews\/Womens Clothing E-Commerce Reviews.csv')\nreviews = dataset['Review Text'].astype('str')\nrecommend = dataset['Recommended IND']\n\nprint(dataset.shape)\nprint(reviews.head())\nprint(recommend.head())","88e6ed02":"REPLACE_BY_SPACE_RE = re.compile('[\/(){}\\[\\]\\|@,;]')\nBAD_SYMBOLS_RE = re.compile('[^0-9a-z #+_]')\nSTOPWORDS = set(stopwords.words('english'))\n\ndef review_prepare(review):\n    review = review.lower()# lowercase text\n    review = re.sub(REPLACE_BY_SPACE_RE,\" \",review)# replace REPLACE_BY_SPACE_RE symbols by space in text\n    review = re.sub(BAD_SYMBOLS_RE,\"\",review)# delete symbols which are in BAD_SYMBOLS_RE from text\n    review = re.sub(' +',' ',review)\n    review = \" \".join([word for word in review.split() if word not in STOPWORDS]) # delete stopwords from text\n    return review\n\nreviews_prepared = [review_prepare(review) for review in reviews]\n\nprint(reviews[3])\nprint(reviews_prepared[3])","367fb2da":"counters_reviews = [collections.Counter(re.findall(r'\\w+', review)) for review in reviews_prepared]\ncounter_all = sum(counters_reviews, collections.Counter())\nmost_common_word = sorted(counter_all.items(), key=lambda x: x[1] ,reverse=True)","43864090":"print(counters_reviews[3])\nprint(most_common_word[:5])","e9fac71d":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(reviews_prepared,recommend,test_size=0.2)","1baa507c":"print('Number of Recommend:',len(y_test[y_test==True]))\nprint('Number of Unrecommend:',len(y_test[y_test==False]))","9c126dec":"DICT_SIZE = 5000\nN = DICT_SIZE\nWORDS_TO_INDEX = dict(most_common_word[:N])\nALL_WORDS = WORDS_TO_INDEX.keys()\n\ndef my_bag_of_words(review, words_to_index, dict_size):    \n    words_list = list(sorted(words_to_index.keys()))\n    result_vector = np.zeros(dict_size)\n    for word in review.split():\n        if word in words_list:\n            result_vector[words_list.index(word)] +=1\n    return result_vector","20f1da65":"from scipy import sparse as sp_sparse\n\nX_train_mybag = sp_sparse.vstack([sp_sparse.csr_matrix(my_bag_of_words(review, WORDS_TO_INDEX, DICT_SIZE)) for review in X_train])\nX_test_mybag = sp_sparse.vstack([sp_sparse.csr_matrix(my_bag_of_words(review, WORDS_TO_INDEX, DICT_SIZE)) for review in X_test])\nprint('X_train shape ', X_train_mybag.shape)\nprint('X_test shape ', X_test_mybag.shape)","ac75c547":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ndef tfidf_features(X_train, X_test):    \n    tfidf_vectorizer = TfidfVectorizer(ngram_range=(1,2), \n                                       max_df = 0.9, min_df=5, token_pattern='(\\S+)')\n    tfidf_vectorizer.fit(X_train)\n    \n    X_train =  tfidf_vectorizer.transform(X_train)\n    X_test =  tfidf_vectorizer.transform(X_test)\n    \n    return X_train, X_test, tfidf_vectorizer.vocabulary_","c353bf35":"X_train_tfidf, X_test_tfidf, tfidf_vocab = tfidf_features(X_train, X_test)","9ad340e6":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import roc_auc_score \nfrom sklearn.metrics import average_precision_score\nfrom sklearn.metrics import recall_score, confusion_matrix, r2_score,classification_report","cf386cd5":"def train_classifier(X_train, y_train):\n    classifier = LogisticRegression()\n    \n    classifier.fit(X_train, y_train)\n    \n    return classifier","d1b29ad8":"classifier_mybag = train_classifier(X_train_mybag, y_train)\nclassifier_tfidf = train_classifier(X_train_tfidf, y_train)","fabc1821":"y_predicted_labels_mybag = classifier_mybag.predict(X_test_mybag)\ny_predicted_scores_mybag = classifier_mybag.decision_function(X_test_mybag)\n\ny_predicted_labels_tfidf = classifier_tfidf.predict(X_test_tfidf)\ny_predicted_scores_tfidf = classifier_tfidf.decision_function(X_test_tfidf)","c2f0dda0":"print('r2 (bow):',r2_score(y_test,y_predicted_labels_mybag))\nprint('r2 (tfidf):',r2_score(y_test,y_predicted_labels_tfidf))","85b44246":"print('confusion_matrix (bow):\\n',confusion_matrix(y_test,y_predicted_labels_mybag))\nprint('confusion_matrix (tfidf):\\n',confusion_matrix(y_test,y_predicted_labels_tfidf))","96c2b465":"print('classification_report (bow):\\n',classification_report(y_test,y_predicted_labels_mybag))\nprint('classification_report (tfidf):\\n',classification_report(y_test,y_predicted_labels_tfidf))","14b7a394":"# 7. Model Evaluation","1d92e1e9":"# 4. Counters of word","8cde249d":"# Conclusion\n**Bag-Of-Word should be prefered to TF-IDF : BOW is more balanced in its metrics where TF-IDF has a very small Recall.**","3ef87f24":"# 6. Features selection\n## 6.1. Bag of words","2a99e779":"**This kernel is a first basic view of some NLP skills.**\n\nAs mentionned in the title, we are using the column 'Review Text' to predict if a reviewer has recommand the product or not.\n\n# 1. Load Libraries","70a8b908":"# 2. Load Dataset","90d52fcd":"# 3. Reviews preprocessing","c95f9e5f":"# 5. Split dataset in train\/test","021e5d9f":"## 6.2. TF-IDF"}}