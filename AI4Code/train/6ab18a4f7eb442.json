{"cell_type":{"fd7780b7":"code","99f503ab":"code","d775c562":"code","107baf2f":"code","63c24e8c":"code","025cc3c0":"code","a390f188":"code","5f6e98c5":"code","6ab65a26":"code","06199a8c":"code","504c7f22":"code","8cf6ccbc":"code","4c91ddde":"code","02e6f8be":"code","4e46f1ac":"code","69d2d8be":"code","28ac14ff":"code","3c2b4cb0":"code","17d4e9d5":"code","52918d16":"code","43491a55":"code","9e12f72b":"code","8c042391":"code","43690d89":"code","4b3d094b":"code","94e15243":"code","b4cdc7f5":"code","e69560b4":"code","a916d635":"code","71276a5d":"code","b02f5749":"code","bc6ec030":"code","d141249c":"code","2f67e8d8":"code","c4f15cc8":"code","3b56696c":"code","897eb733":"code","0eed37dc":"code","f52a69c1":"code","86854c34":"code","c033ec04":"code","6f7fa0ec":"code","61a333ad":"code","037254ed":"code","ff3e5f1e":"code","07105d07":"code","a2d80f2f":"code","e676a95b":"code","aa5d2f53":"code","ee27c998":"code","a726e02a":"code","bebb2333":"code","e5e63d2e":"code","fe8c5df8":"code","4b23290d":"code","dd8aa600":"code","eb23e4b9":"code","b9da0b35":"code","bec904e5":"code","a1bf19ec":"code","5a5f7126":"code","4ebf797f":"code","3cbe1011":"code","a9e1fd55":"code","28875ccc":"code","f6282b74":"markdown","50d22b96":"markdown","fd30b515":"markdown","00dd6d50":"markdown","d3cf3713":"markdown","5bbf5823":"markdown","86ee74d8":"markdown","f1e1e24e":"markdown","ae2e9ccb":"markdown","06ce8eab":"markdown","d2d2259e":"markdown","a4b220a9":"markdown","c3d68422":"markdown","7634abc8":"markdown","6487fcd0":"markdown","3ce1cb9f":"markdown","95926427":"markdown","70d4c0f2":"markdown","6c18bf78":"markdown","a3244819":"markdown","2683527a":"markdown","991dc8e7":"markdown","1e066ff2":"markdown","332beb7b":"markdown","c01fe21c":"markdown","35f31b46":"markdown","0381227f":"markdown","2a3f6685":"markdown","cd157146":"markdown","cb76d280":"markdown","2cddab08":"markdown","394c4214":"markdown","82d4abb4":"markdown","95462028":"markdown","a5d159fc":"markdown","3cfa964b":"markdown"},"source":{"fd7780b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","99f503ab":"from matplotlib import pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d775c562":"!pip install mplfinance\nimport mplfinance as mpf","107baf2f":"sns.set_style(\"whitegrid\")\nsns.set(rc={'figure.figsize':(35,10)})","63c24e8c":"eth = pd.read_csv('..\/input\/ethereum-data\/ETH-USD.csv')\neth.head()","025cc3c0":"eth.shape","a390f188":"eth.info()","5f6e98c5":"eth.describe()","6ab65a26":"eth.Date = pd.to_datetime(eth.Date)\n","06199a8c":"eth.info()","504c7f22":"eth.set_index('Date', inplace=True)","8cf6ccbc":"eth.head()","4c91ddde":"eth[eth.isna().any(axis=1)]","02e6f8be":"eth.loc['2020-10-07' :'2020-10-15', :]","4e46f1ac":"eth.loc['2020-10-09', 'Open':'Volume'] = [350.71, 368.18, 347.82, 365.28, np.nan, 7850000]\neth.loc['2020-10-12', 'Open':'Volume'] = [374.39, 394.58, 366.05, 386.68, np.nan, 10390000]\neth.loc['2020-10-13', 'Open':'Volume'] = [386.64,387.06,374.57,381.32, np.nan, 7920000]\neth.loc['2020-04-17', 'Open':'Volume'] = [172.32,174.52,168.55,180.63, np.nan, 20050000]","69d2d8be":"eth.loc['2020-10-07' :'2020-10-15', :]","28ac14ff":"mpf.plot(eth, type='line', style='yahoo', figratio=(35,10))","3c2b4cb0":"mpf.plot(eth.loc['2017-05-12':'2017-08-12', :], type='candle', style='yahoo', figratio=(35,10))","17d4e9d5":"mpf.plot(eth.loc['2020-12-26':'2021-05-26', :], type='candle', style='yahoo', figratio=(35,10))","52918d16":"# Finding average valume traded each month\navg_vol = eth.groupby([eth.index.year,eth.index.month]).mean()","43491a55":"avg_vol.sort_values('Volume').tail()","9e12f72b":"avg_vol.index.names = ['Year', 'Month']\navg_vol.reset_index(inplace=True)","8c042391":"ax = sns.barplot(x='Month', y='Volume', hue='Year', data=avg_vol, palette=['#086623','#3F704D','#00A86B','#29AB87','#01796F','#4CBB17','#043927'])\nax.patch.set_facecolor('white')\nax.patch.set_alpha(1.0)\n\nax = plt.title('Average Volume Traded Each Month', fontsize=24, loc='center', fontweight='heavy', pad=32)","43690d89":"eth.head()","4b3d094b":"df = pd.pivot_table(eth, values='Volume', index=[eth.index.year, eth.index.month], aggfunc=np.sum)\ndf.index.names = ['Year','Month']\ndf.reset_index(inplace=True)\n\ndf['Date'] = df['Year'].astype(str) + '-' + df['Month'].astype(str)\ndf.drop(columns=['Year', 'Month'], inplace=True)\n\ndf['Date'] = pd.to_datetime(df.Date)\ndf['Date'] = df['Date'].dt.strftime('%Y-%m')\n","94e15243":"ax = sns.barplot(x='Date', y='Volume', data=df, color='#043927')\nax.patch.set_facecolor('white')\nax.patch.set_alpha(1.0)\nax = plt.xticks([])\nax = plt.title('ETH Volumes Traded Daily', fontsize=24, loc='center', fontweight='heavy', pad=32)","b4cdc7f5":"eth['Daily_ROI'] = (eth.Close\/eth.Open*100)-100","e69560b4":"eth.head()","a916d635":"ax = sns.lineplot(x=eth.index, y=eth.Daily_ROI, data=eth, color='#043927')\nax.patch.set_facecolor('white')\nax.patch.set_alpha(1.0)\nax = plt.xticks([])\nax = plt.title('ETH Daily Return of Investment', fontsize=24, loc='center', fontweight='heavy', pad=32)","71276a5d":"eth.Daily_ROI.sort_values(ascending=False).head()","b02f5749":"eth.Daily_ROI.sort_values().head()","bc6ec030":"eth.reset_index(inplace=True)\neth.head()","d141249c":"grouped = eth.groupby([eth.Date.dt.year, eth.Date.dt.month])\nmonthly_roi = grouped.last().Close \/ grouped.first().Open * 100 - 100","2f67e8d8":"monthly_roi.index.names = ['Year', 'Month']","c4f15cc8":"monthly_roi = monthly_roi.to_frame()\nmonthly_roi.reset_index(inplace=True)\nmonthly_roi.head()","3b56696c":"monthly_roi.columns = ['Year', 'Month', 'Monthly_ROI']\nmonthly_roi.head()","897eb733":"ax = sns.barplot(x='Month', y='Monthly_ROI', hue='Year', data=monthly_roi, palette=['#086623','#3F704D','#00A86B','#29AB87','#01796F','#4CBB17','#043927'])\nax.patch.set_facecolor('white')\nax.patch.set_alpha(1.0)\nax = plt.title('ETH Monthly Return of Investment', fontsize=24, loc='center', fontweight='heavy', pad=32)","0eed37dc":"monthly_roi.sort_values('Monthly_ROI', ascending=False).head(5)","f52a69c1":"monthly_roi.sort_values('Monthly_ROI').head(5)","86854c34":"yearly_roi = eth.groupby(eth.Date.dt.year).last().Close \/ eth.groupby(eth.Date.dt.year).first().Open * 100 - 100","c033ec04":"yearly_roi.sort_values(ascending=False).head(3)","6f7fa0ec":"yearly_roi.sort_values().head(3)","61a333ad":"ax = sns.barplot(x=yearly_roi.index, y=yearly_roi.values,palette=['#086623','#3F704D','#00A86B','#29AB87','#01796F','#4CBB17','#043927'])\nax.patch.set_facecolor('white')\nax.patch.set_alpha(1.0)\nax = plt.title('ETH Yearly Return of Investment', fontsize=24, loc='center', fontweight='heavy', pad=32)","037254ed":"excluded_2017 = yearly_roi[yearly_roi.index != 2017]\nax = sns.barplot(x=excluded_2017.index, y=excluded_2017.values, palette=['#086623','#3F704D', '#29AB87','#01796F','#4CBB17','#043927'])\nax.patch.set_facecolor('white')\nax.patch.set_alpha(1.0)\nax = plt.title('ETH Yearly Return of Investment [2017 Excluded]', fontsize=24, loc='center', fontweight='heavy', pad=32)","ff3e5f1e":"eth_corr = eth.loc[:,['Open','High', 'Low', 'Close', 'Volume']].corr()\neth_corr","07105d07":"sns.reset_orig()","a2d80f2f":"ax = sns.heatmap(eth_corr, annot=True, cmap='Greens', fmt=\".2f\")","e676a95b":"eth.drop(columns=['Adj Close', 'Daily_ROI'], inplace=True)\neth.columns","aa5d2f53":"eth_sklearn = eth.loc[:,'Open':]\neth_sklearn","ee27c998":"from sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn.metrics import mean_squared_error, r2_score","a726e02a":"X_1, y_1 = eth_sklearn.drop(columns=['High']), eth_sklearn.High\n\nxtrain, xtest, ytrain, ytest = train_test_split(X_1, y_1, test_size=0.33, random_state=42)\n\nxtrain.shape, xtest.shape, ytrain.shape, ytest.shape","bebb2333":"lr = LinearRegression()\nlr.fit(xtrain, ytrain)\n\npredicted_train = lr.predict(xtrain)\npredicted_test = lr.predict(xtest)\n\nprint(f\"RMSE on train data: {mean_squared_error(ytrain, predicted_train)**(0.5)}, R^2: {r2_score(ytrain, predicted_train)}\")\nprint(f\"RMSE on test data: {mean_squared_error(ytest, predicted_test)**(0.5)}, R^2: {r2_score(ytest, predicted_test)}\")","e5e63d2e":"lr.predict([[2530.94, 2515.26, 2594.81, 853190]]) #Current high price was 2636.21","fe8c5df8":"lr.predict([[2461.08,2421.70,2532.19,507080]]) # Jul 31 high price was 2551.68","4b23290d":"lr.predict([[2380.59,2320.80,2460.95,1003000]]) # Jul 30 high price was 2467.40","dd8aa600":"combined = pd.concat([xtrain,xtest], axis=0)","eb23e4b9":"combined_high = np.concatenate((predicted_train, predicted_test), axis=0)","b9da0b35":"combined['High'] = combined_high\ncombined.sort_index(inplace=True)\ncombined.head()","bec904e5":"combined['Date'] = eth.Date\ncombined.head()","a1bf19ec":"eth.head()","5a5f7126":"sns.set(rc={'figure.figsize':(35,10)})","4ebf797f":"ax = sns.lineplot(x='Date', y='High', data=eth, color='#043927')\nsns.lineplot(x='Date', y='High', data=combined, color='red')\nax.patch.set_facecolor('white')\nax.patch.set_alpha(1.0)\nax = plt.xticks([])\nax = plt.title('ETH Highest Price', fontsize=24, loc='center', fontweight='heavy', pad=32)","3cbe1011":"eth.set_index('Date', inplace=True)\ncombined.set_index('Date', inplace=True)","a9e1fd55":"ax = sns.lineplot(x='Date', y='High', data=eth.loc['2017-05-12':'2017-08-12', :], color='#043927')\nsns.lineplot(x='Date', y='High', data=combined.loc['2017-05-12':'2017-08-12', :], color='red')\nax.patch.set_facecolor('white')\nax.patch.set_alpha(1.0)\nax = plt.xticks([])\nax = plt.title('ETH Highest Price [2017-05-15 -> 2017-08-12]', fontsize=24, loc='center', fontweight='heavy', pad=32)","28875ccc":"ax = sns.lineplot(x='Date', y='High', data=eth.loc['2020-12-26':'2021-05-26', :], color='#043927')\nsns.lineplot(x='Date', y='High', data=combined.loc['2020-12-26':'2021-05-26', :], color='red')\nax.patch.set_facecolor('white')\nax.patch.set_alpha(1.0)\nax = plt.xticks([])\nax = plt.title('ETH Highest Price [2020-12-26 -> 2021-05-26]', fontsize=24, loc='center', fontweight='heavy', pad=32)","f6282b74":"# Volume Traded","50d22b96":"Thanks [Arpit Verma](https:\/\/www.kaggle.com\/varpit94) for this dataset that I could practise.\n\nThe things I could improve:\n- Set a clear goals before starting workign with data\n    - Questions\n    - Assumptions\n- Work more on data processing\n- Hyperparameters tuning\n- Write more about my process and the results that I got.\n\nIf anyone have any comments or suggestions please and thank you. I will read every single one.","fd30b515":"## LinearRegression (Without any optimizations)","00dd6d50":"Because there are 4 rows that contains every single value missing there are few possibilities. First we could drop those 4 rows and move on. Secondly, I could find those values and fill them. I will choose the second option and fill missing values from internet.","d3cf3713":"## Keep in Mind","5bbf5823":"## Daily ROI","86ee74d8":"# Price Changes","f1e1e24e":"### 3 Most Profitable Years to Invest","ae2e9ccb":"### 5 Most Profitable Days to invest","06ce8eab":"## Basic information on dataset","d2d2259e":"# Correlation","a4b220a9":"## Plotting yearly ROI\n\n- keep in mind that it counts if you bought it at the first day in the year and sold on the last day of the year","c3d68422":"## Yearly ROI","7634abc8":"# Model Training","6487fcd0":"## Etheruem Volumes Traded","3ce1cb9f":"# Final toughts","95926427":"### 5 Least Profitable Days to invest","70d4c0f2":"### 3 Least Profitable Years to Invest","6c18bf78":"The year 2017 had a huge bubble in crypro currencies space. We can see from graph above. Lets exclude it from graph to get a bigger picture at other years","a3244819":"## Plotting","2683527a":"# Real values vs Predicted values","991dc8e7":"# Plotting zoomed in on two spikes","1e066ff2":"### 5 Least Profitable Months to Invest","332beb7b":"## Converting Date column to Datatime and setting it as index","c01fe21c":"# Which day\/month\/year was most\/less profitable to invest?","35f31b46":"## Price Changes in 2017","0381227f":"## Monthly ROI","2a3f6685":"### 5 Most Profitable Months to Invest","cd157146":"## Loading in dataset","cb76d280":"data taken from: https:\/\/www.investing.com\/crypto\/ethereum\/historical-data","2cddab08":"## Finding missing values","394c4214":"# Getting first insights on data","82d4abb4":"ROI calculations was based on the assumption that you bought it when market opened and sold right when the market was closing. For monthly and yealy ROI assumptions were made that ETH was bought at the start of the Month\/Year and sold at the end.","95462028":"## Price Changes in 2021","a5d159fc":"## Average Valume Traded Each Month","3cfa964b":"## Plotting monthly ROI"}}