{"cell_type":{"5112564a":"code","3ed3c117":"code","e32cc35f":"code","866c3e1f":"code","4b8206d4":"code","ced8c989":"code","d44dc676":"code","2f208fe7":"code","656679b6":"code","051932e5":"code","96f41efb":"code","4f3cb136":"code","1d3bb18f":"code","f94aaeb2":"code","7bb61d67":"code","6a0e3d31":"code","2ac6fa37":"code","09a84b19":"code","27310585":"code","0ece9553":"code","4ae50014":"code","23d12c70":"code","21fc4813":"code","7e3d0b3d":"code","4774a96a":"code","da6a8c6a":"code","92dce21c":"code","86176d60":"code","b729fde0":"code","126d6d18":"code","6348e17c":"code","8cf1103f":"code","1be6c474":"code","124760fd":"code","38c134f5":"code","ac9138a9":"code","8abc4e32":"code","86ddc7de":"code","bf0ee264":"code","05251e38":"markdown","d6f1ddfd":"markdown","356f5e66":"markdown","f8c5d331":"markdown","da6a4753":"markdown","44454960":"markdown","9fea7d77":"markdown","880af0d8":"markdown","f6d6bfdb":"markdown","1f5cbc5b":"markdown","ed746c5d":"markdown","c02ea779":"markdown","0c232426":"markdown","921715df":"markdown","4772393d":"markdown","2a525dce":"markdown"},"source":{"5112564a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3ed3c117":"#Importing libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn import metrics","e32cc35f":"data = pd.read_csv(\"\/kaggle\/input\/vehicle-dataset-from-cardekho\/car data.csv\")\ndata.head()","866c3e1f":"#Shape of data \nprint(data.shape)\n#dtypes of data \nprint(data.dtypes)","4b8206d4":"# Info of data\ndata.info()","ced8c989":"# value_counts\ndata[\"Owner\"].value_counts()","d44dc676":"# checking the number of missing values\ndata.isnull().sum()","2f208fe7":"# checking the distribution of categorical data\nprint(data.Fuel_Type.value_counts())\nprint(data.Seller_Type.value_counts())\nprint(data.Transmission.value_counts())","656679b6":"# encoding \"Fuel_Type\" Column\ndata.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)\n\n# encoding \"Seller_Type\" Column\ndata.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)\n\n# encoding \"Transmission\" Column\ndata.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)","051932e5":"data.head()","96f41efb":"# number of values for each quality\nsns.catplot(x='Selling_Price', data = data, kind = 'count')","4f3cb136":"# volatile acidity vs Quality\nplot = plt.figure(figsize=(5,5))\nsns.barplot(x='Selling_Price', y = 'Owner', data = data)","1d3bb18f":"# describe data\ndata.describe()","f94aaeb2":"#Checking for outlier \nfig, ax = plt.subplots(figsize = (15, 10))\nsns.boxplot(data = data, width = 0.5, ax = ax, fliersize = 3)\nplt.show()","7bb61d67":"# Removing Outliers \noutlier = data['Kms_Driven'].quantile(0.95)\n# removing the top 5% data from Insulin column\ndata = data[data['Kms_Driven']<outlier]","6a0e3d31":"# Checking again for outliers\nfig, ax = plt.subplots(figsize = (15, 10))\nsns.boxplot(data = data, width = 0.5, ax = ax, fliersize = 3)\nplt.show()","2ac6fa37":"X = data.drop(['Car_Name','Selling_Price'],axis=1)\ny = data['Selling_Price']","09a84b19":"print(X.shape)\nprint(y.shape)","27310585":"print(X)\nprint(y)","0ece9553":"# train_test_spilt\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)\nprint(\"The shape of X_train is\", X_train.shape )\nprint(\"The shape of X_test is\", X_test.shape)\nprint(\"The shape of y_train is\", y_train.shape)\nprint(\"The shape of y_test is\", y_test.shape)","4ae50014":"# loading the linear regression model\nlin_reg_model = LinearRegression()\nlin_reg_model.fit(X_train,y_train)","23d12c70":"# prediction on Training data\ntraining_data_prediction = lin_reg_model.predict(X_train)\n# R squared Error\nerror_score = metrics.r2_score(y_train, training_data_prediction)\nprint(\"R squared Error of train : \", error_score)","21fc4813":"#Visualize the actual prices and Predicted prices of traing set\nplt.scatter(y_train, training_data_prediction)\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\nplt.title(\" Actual Prices vs Predicted Prices\")\nplt.show()","7e3d0b3d":"# Checking Normality of errors\nsns.distplot(y_train-training_data_prediction)\nplt.title(\"Histogram of Residuals\")\nplt.xlabel(\"Residuals\")\nplt.ylabel(\"Frequency\")\nplt.show()","4774a96a":"# prediction on testing data\ntest_data_prediction = lin_reg_model.predict(X_test)\n# R squared Error\nerror_score = metrics.r2_score(y_test, test_data_prediction)\nprint(\"R squared Error Testing Data : \", error_score)","da6a8c6a":"#Visualize the actual prices and Predicted prices of testing set\nplt.scatter(y_test, test_data_prediction)\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\nplt.title(\" Actual Prices vs Predicted Prices\")\nplt.show()","92dce21c":"# Checking Normality of errors\nsns.distplot(y_test-test_data_prediction)\nplt.title(\"Histogram of Residuals\")\nplt.xlabel(\"Residuals\")\nplt.ylabel(\"Frequency\")\nplt.show()","86176d60":"from sklearn.preprocessing import PolynomialFeatures\n\n# fit into Polynomial regression\npoly = PolynomialFeatures(degree = 2)\nx_poly = poly.fit_transform(X_train)\npoly.fit(x_poly,y_train)\n# fit into linear regression\nmodel_polynomial = LinearRegression()\nmodel_polynomial.fit(x_poly,y_train)","b729fde0":"x_traing_poly_data = model_polynomial.predict(poly.fit_transform(X_train))\n# R squared Error\nerror_score_poly_train = metrics.r2_score(y_train, x_traing_poly_data)\nprint(\"R squared Error Traning Data : \", error_score_poly_train)","126d6d18":"# Import Random Forest Regressor\nfrom sklearn.ensemble import RandomForestRegressor\nmodel_reg = RandomForestRegressor()\nmodel_reg.fit(X_train, y_train)","6348e17c":"y_random_forest_pred = model_reg.predict(X_train)\n# Model Evaluation\nprint('R^2:',metrics.r2_score(y_train, y_random_forest_pred))\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(y_train, y_random_forest_pred))*(len(y_train)-1)\/(len(y_train)-X_train.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(y_train, y_random_forest_pred))\nprint('MSE:',metrics.mean_squared_error(y_train, y_random_forest_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_train, y_random_forest_pred)))","8cf1103f":"# Visualizing the differences between actual prices and predicted values\nplt.scatter(y_train, y_random_forest_pred)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"Prices vs Predicted prices\")\nplt.show()","1be6c474":"# Predicting Test data with the model\ny_test_pred = model_reg.predict(X_test)\n# Model Evaluation\nacc_rf = metrics.r2_score(y_test, y_test_pred)\nprint('R^2:', acc_rf)\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(y_test, y_test_pred))*(len(y_test)-1)\/(len(y_test)-X_test.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(y_test, y_test_pred))\nprint('MSE:',metrics.mean_squared_error(y_test, y_test_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test, y_test_pred)))","124760fd":"# Visualizing the differences between actual prices and predicted values\nplt.scatter(y_test, y_test_pred)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"Prices vs Predicted prices\")\nplt.show()","38c134f5":"# loading the linear regression model\nlass_reg_model = Lasso()\nlass_reg_model.fit(X_train,y_train)","ac9138a9":"# prediction on Training data\ntraining_data_prediction = lass_reg_model.predict(X_train)\n# R squared Error\nerror_score = metrics.r2_score(y_train, training_data_prediction)\nprint(\"R squared Error : \", error_score)","8abc4e32":"plt.scatter(y_train, training_data_prediction)\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\nplt.title(\" Actual Prices vs Predicted Prices\")\nplt.show()","86ddc7de":"# prediction on Testing data\ntest_data_prediction = lass_reg_model.predict(X_test)\n# R squared Error\nerror_score = metrics.r2_score(y_test, test_data_prediction)\nprint(\"R squared Error : \", error_score)","bf0ee264":"plt.scatter(y_test, test_data_prediction)\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\nplt.title(\" Actual Prices vs Predicted Prices\")\nplt.show()","05251e38":"# **Exploratory data analysis**","d6f1ddfd":"# **Polynomial Regression**","356f5e66":"### Here the residuals are normally distributed. So normality assumption is satisfied.","f8c5d331":"# **Model Evaluation of Polynomial Regression**\n\n### **Traning Data**","da6a4753":"# **Lasso Regression**","44454960":"# **Linear Regression**","9fea7d77":"# **Getting Started**","880af0d8":"# **Model Evaluation of Linear Regression**\n\n### **Traning Data**","f6d6bfdb":"# **Data Transformation**","1f5cbc5b":"# **Random Forest Regressor**","ed746c5d":"# **Model Evaluation of Random Forest Regression**\n## **Traning Data**","c02ea779":"## **Test Data**","0c232426":"# **Model Training**\n\nWe train different model after the evaluation of model we will select out best model for production.\n\n1.   Linear Regression\n2.   Polynomial Regression\n3.   Random Forest Regressor\n4.   XgBoost\n5.   SVM\n6.   Lasso Regression","921715df":"# **Checking for outliers**","4772393d":"# **Visualization for dataset**","2a525dce":"# **Model Preparation**"}}