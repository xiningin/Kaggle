{"cell_type":{"9b02ab7c":"code","3f7091db":"code","4cf6a274":"code","09fbe9aa":"code","c8758142":"code","0a8a18dd":"code","95e0912a":"code","66f37f6e":"code","1dc29f96":"code","3e9a275d":"code","f7e1ce75":"code","a905e4c5":"code","0fd0f69c":"code","da37e51e":"markdown","657b3bd7":"markdown","ac1a24c8":"markdown","eb7530f7":"markdown","03c38296":"markdown"},"source":{"9b02ab7c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f7091db":"from tensorflow.keras.layers import Input, Dense, BatchNormalization, Dropout, Concatenate, Lambda, GaussianNoise, Activation\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.layers.experimental.preprocessing import Normalization\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import GroupKFold\n\nfrom tqdm import tqdm\nfrom random import choices\nimport random\n\nimport kerastuner as kt\n\nfrom sklearn.ensemble import GradientBoostingClassifier","4cf6a274":"def set_all_seeds(seed):\n    np.random.seed(seed)\n    random.seed(seed)\n    tf.random.set_seed(seed)","09fbe9aa":"import numpy as np\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n# modified code for group gaps; source\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass PurgedGroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Allows for a gap in groups to avoid potentially leaking info from\n    train into test if the model has windowed or lag features.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_group_size : int, default=Inf\n        Maximum group size for a single training set.\n    group_gap : int, default=None\n        Gap between train and test\n    max_test_group_size : int, default=Inf\n        We discard this number of groups from the end of each train split\n    \"\"\"\n\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_group_size=np.inf,\n                 max_test_group_size=np.inf,\n                 group_gap=None,\n                 verbose=False\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_group_size = max_train_group_size\n        self.group_gap = group_gap\n        self.max_test_group_size = max_test_group_size\n        self.verbose = verbose\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        group_gap = self.group_gap\n        max_test_group_size = self.max_test_group_size\n        max_train_group_size = self.max_train_group_size\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n\n        group_test_size = min(n_groups \/\/ n_folds, max_test_group_size)\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n\n            group_st = max(0, group_test_start - group_gap - max_train_group_size)\n            for train_group_idx in unique_groups[group_st:(group_test_start - group_gap)]:\n                train_array_tmp = group_dict[train_group_idx]\n                \n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n\n            train_end = train_array.size\n \n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n\n            test_array  = test_array[group_gap:]\n            \n            \n            if self.verbose > 0:\n                    pass\n                    \n            yield [int(i) for i in train_array], [int(i) for i in test_array]","c8758142":"import gc\n\nTRAINING = False\nFOLDS = 7\nSEED = 42\n\ntrain = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\ntrain = train.query('date > 85').reset_index(drop = True) \ntrain = train.astype({c: np.float32 for c in train.select_dtypes(include='float64').columns}) #limit memory use\ntrain.fillna(train.mean(),inplace=True)\ntrain = train.query('weight > 0').reset_index(drop = True)\n\nfeatures = [c for c in train.columns if 'feature' in c]\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp', 'resp_4']\nEPSILON = {c:0.0 for c in resp_cols}","0a8a18dd":"X = train[features].values\ny = np.stack([(train[c] > EPSILON[c]).astype('int') for c in resp_cols]).T \ny = np.around(np.mean(y,axis=-1)).reshape((-1,1))\n\nf_mean = np.mean(train[features[1:]].values,axis=0)\ndates = train['date'].values","95e0912a":"del train\ngc.collect()","66f37f6e":"u = np.unique(y,return_counts=True)[1]\nth = u[1]\/sum(u)\nth","1dc29f96":"def create_encoder(hp,input_dim,output_dim):\n    i = Input(input_dim)\n    x = BatchNormalization()(i)\n    x = GaussianNoise(hp.Float('noise',0.1,0.5,default=0.1))(x)\n    \n    encoding_units = []\n    encoding_dp = []\n    for j in range(hp.Int('num_encoding_layers',1,3)):\n        u = hp.Int(f'encoding_units_{j}',64,512)\n        encoding_units.append(u)\n        x = Dense(u,activation='relu')(x)\n        x = BatchNormalization()(x)\n        dp = hp.Float(f'encoding_dp_{j}',0.1,0.5)\n        encoding_dp.append(dp)\n        x = Dropout(dp)(x)\n    \n    encoder = Model(inputs=i,outputs=x)\n    \n    for u,dp in zip(encoding_units[::-1],encoding_dp[::-1]):\n        x = Dense(u,activation='relu')(x)\n        x = BatchNormalization()(x)\n        x = Dropout(dp)(x)\n        \n    decoded = Dense(input_dim,activation='linear',name='decoded')(x)\n    \n    for j in range(hp.Int('num_bottleneck_layers',1,3)):\n        x = Dense(hp.Int(f'bottleneck_units_{j}',16,64))(x)\n        x = BatchNormalization()(x)\n        x = Lambda(tf.keras.activations.swish)(x)\n        x = Dropout(hp.Float(f'bottleneck_dp_{j}',0.1,0.5))(x)\n    \n    x = Dense(output_dim,activation='sigmoid',name='label_output')(x)\n    \n    autoencoder = Model(inputs=i,outputs=[decoded,x])\n    \n    autoencoder.compile(optimizer=Adam(0.01),loss={'decoded':'mse','label_output':'binary_crossentropy'})\n    return autoencoder, encoder","3e9a275d":"%%time\nSEEDS = [123]\n\nhp = kt.HyperParameters()\n\ngkf = PurgedGroupTimeSeriesSplit(n_splits = FOLDS, group_gap=20,\n                                         max_train_group_size=100,\n                                         max_test_group_size=10)\nsplits = list(gkf.split(y, groups=dates))\n\nfold_weights = np.asarray(list(map(lambda x: len(x[0]),splits)))\nfold_weights = fold_weights\/fold_weights.sum()\nprint(fold_weights.sum())\n\n\nif TRAINING:\n    for j,SEED in enumerate(SEEDS):\n        set_all_seeds(SEED)\n        \n        oof = np.zeros(y.shape)\n        for fold, (train_indices, test_indices) in enumerate(splits):\n            X_train, X_test = X[train_indices], X[test_indices]\n            y_train, y_test = y[train_indices], y[test_indices]\n            \n            autoencoder,encoder = create_encoder(hp,X.shape[-1],y.shape[-1])\n            autoencoder.fit(X_train,(X_train,y_train),validation_data=(X_test,(X_test,y_test)),epochs=100,batch_size=4096,verbose=2,\n                      callbacks=[EarlyStopping('val_loss',patience=10,restore_best_weights=True),\n                                 ReduceLROnPlateau('val_loss',patience=5)])\n            \n            encoder.save_weights(f'.\/encoder_{fold}.tf')\n            \n            X_train = encoder.predict(X_train)\n            X_test = encoder.predict(X_test)\n            \n            tf.keras.backend.clear_session()\n            \n            clf = GradientBoostingClassifier(n_estimators=100,random_state=SEED,verbose=1)\n            clf.fit(X_train, y_train.ravel())\n            \n            pd.to_pickle(clf,f'.\/gb_{fold}.pkl')\n\nelse:\n    models = []\n    encoders = []\n    for SEED in SEEDS:\n        for fold in range(FOLDS):\n            _,encoder = create_encoder(hp,X.shape[-1],y.shape[-1])\n            encoder.load_weights(f'..\/input\/jsautoencodergb\/encoder_{fold}.tf')\n            encoder.call = tf.function(encoder.call,experimental_relax_shapes=True)\n            encoders.append(encoder)\n            model = pd.read_pickle(f'..\/input\/jsautoencodergb\/gb_{fold}.pkl')\n            models.append(model)","f7e1ce75":"predictions = []","a905e4c5":"if not TRAINING:\n    import janestreet\n    janestreet.competition.make_env.__called__ = False\n    env = janestreet.make_env()\n    for (test_df, pred_df) in tqdm(env.iter_test()):\n        if test_df['weight'].item() > 0:\n            x_tt = test_df.loc[:, features].values\n            if np.isnan(x_tt[:, 1:].sum()):\n                x_tt[:, 1:] = np.nan_to_num(x_tt[:, 1:]) + np.isnan(x_tt[:, 1:]) * f_mean\n                \n            pred = np.sum(fold_weights * np.asarray([models[i].predict_proba(encoders[i](x_tt,training=False).numpy()).ravel()[1] for i in range(len(models))]))\n            pred = np.where(pred > th, 1, 0).astype(int)\n            predictions.append(pred)\n            pred_df.action = pred\n        else:\n            pred_df.action = 0\n        env.predict(pred_df)","0fd0f69c":"np.unique(predictions,return_counts=True)","da37e51e":"### Creating the autoencoder. \nThe autoencoder should aid in denoising the data. Based on [this](https:\/\/www.semanticscholar.org\/paper\/Deep-Bottleneck-Classifiers-in-Supervised-Dimension-Parviainen\/fb86483f7573f6430fe4597432b0cd3e34b16e43) paper. ","657b3bd7":"## Encoder + GBC\nThe idea of using an encoder is the denoise the data. We use the encoded features in a gradient boosting classifier. ","ac1a24c8":"### Loading the training data","eb7530f7":"## PurgedGroupTimeSeriesSplit\nClick the code button to see. ","03c38296":"## Submission"}}