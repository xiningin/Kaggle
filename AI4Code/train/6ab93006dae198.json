{"cell_type":{"fc014f67":"code","173f20ae":"code","39cbce19":"code","1d480c6a":"code","f4f54b3f":"code","6e265728":"code","dd184de4":"code","e4102630":"code","9eef7509":"code","79f30da9":"code","3e79e000":"code","baf42906":"code","7c2af02a":"code","fc2973b1":"code","573a46da":"markdown"},"source":{"fc014f67":"import pandas as pd\npd.options.mode.chained_assignment = None \nimport numpy as np\nimport re\nimport nltk\n\nfrom gensim.models import word2vec\n\nfrom sklearn.manifold import TSNE\nimport matplotlib.pyplot as plt\n%matplotlib inline","173f20ae":"data = pd.read_csv('..\/input\/train.csv').sample(50000, random_state=23)","39cbce19":"data.shape","1d480c6a":"STOP_WORDS = nltk.corpus.stopwords.words()\n\ndef clean_sentence(val):\n    \"remove chars that are not letters or numbers, downcase, then remove stop words\"\n    regex = re.compile('([^\\s\\w]|_)+')\n    sentence = regex.sub('', val).lower()\n    sentence = sentence.split(\" \")\n    \n    for word in list(sentence):\n        if word in STOP_WORDS:\n            sentence.remove(word)  \n            \n    sentence = \" \".join(sentence)\n    return sentence\n\ndef clean_dataframe(data):\n    \"drop nans, then apply 'clean_sentence' function to question1 and 2\"\n    data = data.dropna(how=\"any\")\n    data[\"question_text\"] = data[\"question_text\"].apply(clean_sentence)\n    \n    return data","f4f54b3f":"data = clean_dataframe(data)\ndata.head(5)","6e265728":"def build_corpus(data):\n    \"Creates a list of lists containing words from each sentence\"\n    corpus = []\n    for sentence in data[\"question_text\"].iteritems():\n        word_list = sentence[1].split(\" \")\n        corpus.append(word_list)\n            \n    return corpus","dd184de4":"corpus = build_corpus(data)        \ncorpus[0:2]","e4102630":"def tsne_plot(model):\n    \"Creates and TSNE model and plots it\"\n    labels = []\n    tokens = []\n\n    for word in model.wv.vocab:\n        tokens.append(model[word])\n        labels.append(word)\n    \n    tsne_model = TSNE(perplexity=40, n_components=2, init='pca', n_iter=2500, random_state=23)\n    new_values = tsne_model.fit_transform(tokens)\n\n    x = []\n    y = []\n    for value in new_values:\n        x.append(value[0])\n        y.append(value[1])\n        \n    plt.figure(figsize=(16, 16)) \n    for i in range(len(x)):\n        plt.scatter(x[i],y[i])\n        plt.annotate(labels[i],\n                     xy=(x[i], y[i]),\n                     xytext=(5, 2),\n                     textcoords='offset points',\n                     ha='right',\n                     va='bottom')\n    plt.show()","9eef7509":"model = word2vec.Word2Vec(corpus, size=100, window=20, min_count=200, workers=4)","79f30da9":"tsne_plot(model)","3e79e000":"model = word2vec.Word2Vec(corpus, size=100, window=20, min_count=500, workers=4)\ntsne_plot(model)","baf42906":"model = word2vec.Word2Vec(corpus, size=100, window=20, min_count=100, workers=4)\ntsne_plot(model)","7c2af02a":"model.most_similar('phone')","fc2973b1":"model.most_similar('trump')","573a46da":"## NoteBook Objective\nVisualization to understand data structure\n\nCredit: Some of the code was inspired by \n- https:\/\/www.kaggle.com\/jeffd23\/visualizing-word-vectors-with-t-sne"}}