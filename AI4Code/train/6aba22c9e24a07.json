{"cell_type":{"d5a68913":"code","49650b82":"code","6e5b9c97":"code","9fd60b51":"code","50f3bb5d":"code","1162580e":"code","6fc0131e":"code","221d0e42":"code","9d7833c7":"code","d7bae8e5":"code","b3ff2bab":"code","06b0a9b5":"code","23c70d3c":"code","1ffbacc3":"code","064353cf":"code","635c3075":"code","3f4fbe24":"code","d5eac564":"code","15544b76":"code","a15d91b3":"code","acde14a1":"code","f618b485":"code","f222b366":"code","432945ae":"code","ea42d8d1":"code","b480469b":"code","d2381f90":"code","2a289ff5":"code","1284ce96":"code","416b6cba":"code","3946b297":"code","d15565d8":"code","abad4f95":"code","edb845bd":"code","40f62518":"code","787633be":"code","1dab64d5":"code","68ee2a68":"code","dc890336":"code","cc5d1415":"code","86aa76a8":"code","e21410ed":"code","2508d7d4":"code","da526a91":"code","6c786f05":"code","d639b4df":"code","63465417":"code","82c2f979":"code","b35e97a3":"code","3589a02c":"code","0c8bb54c":"code","6638b6c7":"code","d8a0dd55":"markdown","d940c6bf":"markdown","35eeb97c":"markdown","a0526756":"markdown","f949a520":"markdown","9479721a":"markdown","e1a1122f":"markdown","6d128b0b":"markdown","fdb8470e":"markdown","0cedb478":"markdown","5ae9d094":"markdown","67b04bb5":"markdown","d3818d69":"markdown","4e6a433d":"markdown","f6244fe5":"markdown","785c6fbf":"markdown","b9f8864c":"markdown","3961d37b":"markdown","d4686c8f":"markdown","2fadd4f0":"markdown","a6277a7d":"markdown","55c0e719":"markdown","7d806642":"markdown","53d4c6df":"markdown","cc5f2535":"markdown","f24935b6":"markdown","63aefcf7":"markdown","df1f7f3b":"markdown","b95c7ca1":"markdown","de2eaa91":"markdown","11da9ebf":"markdown","5e3d3c01":"markdown","13d9df70":"markdown","24ea8628":"markdown","d0b66119":"markdown","1e491def":"markdown","702eb9a5":"markdown","b43f146e":"markdown","0bc38e57":"markdown","3493ad1a":"markdown","b3f1f895":"markdown","b4e5519f":"markdown","7705a7df":"markdown","acd03d2b":"markdown","2bc9ad14":"markdown","65107574":"markdown","4995afff":"markdown","13bf8d1a":"markdown","24b493dd":"markdown","d5697446":"markdown","fdb82be7":"markdown","abae804d":"markdown","e6e8def6":"markdown","1bb7d931":"markdown","67b3252a":"markdown","930358d7":"markdown","0fee152e":"markdown","53dc5020":"markdown","391af997":"markdown","ead2cd24":"markdown","1c5e3f3e":"markdown","a98bb80f":"markdown","a91284a1":"markdown","24af2cfc":"markdown","f80a97ae":"markdown"},"source":{"d5a68913":"import numpy as np # linear algebra\nimport pandas as pd # data processing\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.feature_selection import SelectKBest, f_classif, SelectFromModel\nfrom sklearn.linear_model import LogisticRegression,TweedieRegressor\nfrom sklearn.model_selection import train_test_split\nimport sklearn.metrics as metrics\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom scipy.stats import variation\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom mlxtend.preprocessing import minmax_scaling\nimport math\nfrom xgboost import XGBRegressor\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nRandState = 100","49650b82":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv', index_col='Id')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv', index_col='Id')","6e5b9c97":"train.head()","9fd60b51":"test.head()","50f3bb5d":"train['IsTrain']  = 1\ntest['IsTrain']  = 0\n\nDataRaw = pd.concat([train, test])","1162580e":"DataRaw.head()","6fc0131e":"DataRaw.describe()","221d0e42":"print(\"Number of features not counting the target:\" + str(len(DataRaw.columns) - 1 - 1 )) #First \"-1\" is our target; second \"-1\" is \"IsTrain\" binary factor","9d7833c7":"C = (DataRaw.dtypes == 'object')\nCategoricalVariables = list(C[C].index)\n\nprint(CategoricalVariables)\nprint(\"\")\nprint(\"The number of categorical variables:\" + str(len(CategoricalVariables)))","d7bae8e5":"Integer = (DataRaw.dtypes == 'int64') \nFloat   = (DataRaw.dtypes == 'float64') \nNumericVariables = list(Integer[Integer].index) + list(Float[Float].index)\n\nprint(NumericVariables)\nprint(\"\")\nprint(\"The number of numeric variables:\" + str(len(NumericVariables)))","b3ff2bab":"Missing_Percentage = (DataRaw.isnull().sum()).sum()\/np.product(DataRaw.shape)*100\n\nprint(\"The number of missing entries: \" + str(round(Missing_Percentage,2)) + \" %\")","06b0a9b5":"Numeric_NaN = DataRaw[NumericVariables].isnull().sum()\nRowsCount = len(DataRaw.index)\n\nprint(\"The percentage number of missing entries per variable: \", format(round(Numeric_NaN\/RowsCount * 100)) )","23c70d3c":"CleanedNumeric = DataRaw[NumericVariables]\n\nCleanedNumeric['GarageYrBlt']=CleanedNumeric['GarageYrBlt'].fillna(CleanedNumeric['GarageYrBlt'].median())\nCleanedNumeric.GarageYrBlt[CleanedNumeric.GarageYrBlt > 2020]=CleanedNumeric['GarageYrBlt'].median()\nCleanedNumeric['LotFrontage']=CleanedNumeric['LotFrontage'].fillna(CleanedNumeric['LotFrontage'].median())\nCleanedNumeric=CleanedNumeric.fillna(0)\n\nCleanedNumeric.head()\nCleanedNumeric.describe()","1ffbacc3":"CoefVar = pd.DataFrame(variation(CleanedNumeric),index=NumericVariables,columns=['CoefVar']).sort_values(by=['CoefVar'])\n\nCoefVar","064353cf":"sns.distplot(a=CleanedNumeric['YrSold'], kde=False)","635c3075":"def PlotDist(NameOfVar):\n    sns.distplot(a=CleanedNumeric[NameOfVar], kde=False)   \n    \nsns.distplot(a=CleanedNumeric['PoolArea'], kde=False)\nsns.distplot(a=CleanedNumeric['MiscVal'], kde=False)\nsns.distplot(a=CleanedNumeric['LowQualFinSF'], kde=False)\nsns.distplot(a=CleanedNumeric['3SsnPorch'], kde=False)\nsns.distplot(a=CleanedNumeric['BsmtHalfBath'], kde=False)","3f4fbe24":"Categorical_NaN = DataRaw[CategoricalVariables].isnull().sum()\nRowsCount = len(DataRaw.index)\n\nprint(\"The percentage number of missing entries per variable: \", format(round(Categorical_NaN\/RowsCount * 100)) )","d5eac564":"LuxuriousCategoricalVariables = ['Alley','FireplaceQu','PoolQC','Fence','MiscFeature']\n\nCategoricalVariables = [x for x in CategoricalVariables if x not in LuxuriousCategoricalVariables]\n\nprint(CategoricalVariables)\nprint(LuxuriousCategoricalVariables)","15544b76":"CleanedCategorical= DataRaw[CategoricalVariables].fillna('Unknown')","a15d91b3":"LuxuriousCategorical = DataRaw[LuxuriousCategoricalVariables]\n\nLuxuriousCategorical = pd.concat([LuxuriousCategorical, pd.DataFrame(DataRaw[LuxuriousCategoricalVariables].isnull().sum(axis = 1),\n                                                                     columns=['Luxurious_Features'])], axis=1,sort=False)\n\n#The function was calculating the number of NaN, hence we inverted it to make more intuitive\nLuxuriousCategorical['Luxurious_Features']=-LuxuriousCategorical['Luxurious_Features']+6 \n\nLuxuriousCategorical.head()","acde14a1":"CleanedCategorical = pd.merge(CleanedCategorical,\n                 LuxuriousCategorical['Luxurious_Features'],\n                 on='Id')\n\nCleanedCategorical.head()","f618b485":"CleanedCategorical['ExterQual'].unique()\n","f222b366":"Quality_map  = {'NaN':1, 'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5}\n\nCleanedCategorical['ExterQual'] = CleanedCategorical['ExterQual'].map(Quality_map)\nCleanedCategorical['ExterCond'] = CleanedCategorical['ExterCond'].map(Quality_map)\nCleanedCategorical['HeatingQC'] = CleanedCategorical['HeatingQC'].map(Quality_map)\nCleanedCategorical['KitchenQual'] = CleanedCategorical['KitchenQual'].map(Quality_map)","432945ae":"Quality2_map  = {'NaN':1,  'NA':1,'Po':2,'Fa':3,'TA':4,'Gd':5,'Ex':6}\n\nCleanedCategorical['BsmtQual'] = CleanedCategorical['BsmtQual'].map(Quality2_map)\nCleanedCategorical['BsmtCond'] = CleanedCategorical['BsmtCond'].map(Quality2_map)\nCleanedCategorical['GarageQual'] = CleanedCategorical['GarageQual'].map(Quality2_map)\nCleanedCategorical['GarageCond'] = CleanedCategorical['GarageCond'].map(Quality2_map)\n\nQuality3_map  = {'NaN':1, 'NA':1,'No':2,'Mn':3,'Av':4,'Gd':5}\n\nCleanedCategorical['BsmtExposure'] = CleanedCategorical['BsmtExposure'].map(Quality3_map)\n\nQuality4_map  = {'NaN':1, 'NA':1,'Unf':2,'LwQ':3,'Rec':4,'BLQ':5,'ALQ':7,'GLQ':7}\n\nCleanedCategorical['BsmtFinType1'] = CleanedCategorical['BsmtFinType1'].map(Quality4_map)\nCleanedCategorical['BsmtFinType2'] = CleanedCategorical['BsmtFinType2'].map(Quality4_map)\n\nQuality5_map  = {'NaN':1, 'Sal':1,'Sev':2,'Maj2':3,'Maj1':3,'Mod':4,'Min1':5,'Min2':5,'Typ':6}\n\nCleanedCategorical['Functional'] = CleanedCategorical['Functional'].map(Quality5_map)\n\nQuality6_map  = {'NaN':1, 'NA':1,'Unf':2,'RFn':3,'Fin':4}\n\nCleanedCategorical['GarageFinish'] = CleanedCategorical['GarageFinish'].map(Quality6_map)\n\nOrdinalVariables = ['ExterQual','ExterCond','HeatingQC','KitchenQual','BsmtQual','BsmtCond',\n                    'GarageQual','GarageCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n                    'Functional','GarageFinish']\n\nCleanedOrdinal = CleanedCategorical[OrdinalVariables]\n\n#It's also the proper place where we should add our ordered interaction - luxurious interaction\nCleanedOrdinal = pd.merge(CleanedOrdinal,\n                 LuxuriousCategorical['Luxurious_Features'],\n                 on='Id')\nOrdinalVariables = ['ExterQual','ExterCond','HeatingQC','KitchenQual','BsmtQual','BsmtCond',\n                    'GarageQual','GarageCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n                    'Functional','GarageFinish','Luxurious_Features']\n\nCleanedOrdinal= CleanedOrdinal[OrdinalVariables].fillna(1)\n\nCleanedOrdinal.head()","ea42d8d1":"print(CleanedOrdinal['BsmtQual'].loc[[18]])","b480469b":"NominalVariables = [x for x in CategoricalVariables if x not in OrdinalVariables]\n\nAllLevelsPerVar = CleanedCategorical[NominalVariables].nunique()\nAllLevels = CleanedCategorical[NominalVariables].nunique().sum()\n\nprint(AllLevelsPerVar)\nprint(\"Number of all levels coming from nominal variables: \" + str(AllLevels))","d2381f90":"CleanedCategoricalDummy = pd.get_dummies(CleanedCategorical[NominalVariables], columns=NominalVariables)\n\nCleanedCategoricalDummy.head()","2a289ff5":"CleanedTotal = pd.merge(CleanedNumeric,\n                 CleanedOrdinal,\n                 on='Id')\n\nCleanedTotal = pd.merge(CleanedTotal,\n                 CleanedCategoricalDummy,\n                 on='Id')\n\nCleanedTotal.head()","1284ce96":"Target = ['IsTrain','SalePrice']\nAllVariables = list(CleanedTotal.columns) \nNumericVariablesNoTarget = [x for x in NumericVariables if x not in Target]\nAllVariablesNoTarget = [x for x in AllVariables if x not in Target]\n\nScaledCleanedTotal = CleanedTotal\nScaledCleanedTotal[NumericVariablesNoTarget] = minmax_scaling(CleanedTotal, columns=NumericVariablesNoTarget)\n\nScaledCleanedTotal.head()\n#print(len(AllVariablesNoTarget)) = 230 = 232 - 2","416b6cba":"DataTrain=CleanedTotal[ScaledCleanedTotal.IsTrain==1]\nDataTest=CleanedTotal[ScaledCleanedTotal.IsTrain==0]","3946b297":"sns.distplot(DataTrain['SalePrice'])","d15565d8":"TrainTargetMean = DataTrain['SalePrice'].mean()\nTrainTargetVar = DataTrain['SalePrice'].var()\nTrainTargetSkew = DataTrain['SalePrice'].skew()\nTrainTargetKurt = DataTrain['SalePrice'].kurt()\n\nprint(\"Mean: \" + str(round(TrainTargetMean)) + \" with std: \" + str(round(TrainTargetVar**(1\/2))) + \", skewness: \"\n      + str(round(TrainTargetSkew,1))+ \", and kurtosis: \"+ str(round(TrainTargetKurt,1)) +\".\"  )","abad4f95":"plt.figure(figsize=(18, 3))\n\nplt.subplot(131)\nplt.scatter('OverallQual', 'SalePrice',  data=DataTrain)\nplt.subplot(132)\nplt.scatter('GrLivArea', 'SalePrice',  data=DataTrain)\nplt.subplot(133)\nplt.scatter('YrSold', 'SalePrice',  data=DataTrain)\n","edb845bd":"CorrelationMatrix = DataTrain.corr()\nfig, axe = plt.subplots(figsize=(15, 10))\nsns.heatmap(CorrelationMatrix, vmax=.9, square=True);","40f62518":"VarNo = 15\nTopCorrelatedColumns = CorrelationMatrix.nlargest(VarNo, 'SalePrice')['SalePrice'].index\nReduced = np.corrcoef(DataTrain[TopCorrelatedColumns].values.T)\nfig, axe = plt.subplots(figsize=(15, 10))\n\nsns.heatmap(Reduced, vmax=.9, square=True,yticklabels=TopCorrelatedColumns.values, xticklabels=TopCorrelatedColumns.values, annot=True, annot_kws={'size': 10});","787633be":"# Number of features is coming from previous block (correlation matrix)\nselector_F = SelectKBest(f_classif, k=VarNo)\n\n# We do it on train data\nSelected_F = selector_F.fit_transform(DataTrain[AllVariablesNoTarget], DataTrain['SalePrice'])\n\nSelectedOrdered_F = pd.DataFrame(selector_F.inverse_transform(Selected_F), index=DataTrain.index, columns=AllVariablesNoTarget)\n\nSelectedOrdered_F.head()","1dab64d5":"SelectedVariables_F = list(SelectedOrdered_F.columns[SelectedOrdered_F.var() > 0])\n\n# Get the valid dataset with the selected features.\nDataTrain[SelectedVariables_F].head()\n#print(DataTrain[SelectedVariables].shape) # 15 variables, 1460 records, alright","68ee2a68":"L1_par = 0.22 # This parameter is size of penalty (paradoxically, the lower the bigger penalty)\n\n#Define parameters of LASSO\nLogisReg = LogisticRegression(C=L1_par, penalty=\"l1\", solver='liblinear', random_state=RandState).fit(DataTrain[AllVariablesNoTarget], DataTrain['SalePrice'])\n\n#Fir model\nLASSO = SelectFromModel(LogisReg, prefit=True)\n\n#Apply model to the data\nLASSO_transform = LASSO.transform(DataTrain[AllVariablesNoTarget])\n\n#Restrcuture the data\nSelectedOrdered_LASSO = pd.DataFrame(LASSO.inverse_transform(LASSO_transform), index=DataTrain[AllVariablesNoTarget].index,columns=DataTrain[AllVariablesNoTarget].columns)\n\n#Choose relevant columns\nSelectedVariables_LASSO = list(SelectedOrdered_LASSO.columns[SelectedOrdered_LASSO.var() > 0])\n\n#Get the valid dataset with the selected features.\nDataTrain[SelectedVariables_LASSO].head()","dc890336":"SelectedVariables = pd.DataFrame(SelectedVariables_F,columns=['F variables']).sort_values(by=['F variables'])\nSelectedVariables['LASSO variables'] = SelectedVariables_LASSO\n\nSelectedVariables","cc5d1415":"Target= DataTrain['SalePrice']\nDataTrainFinal = DataTrain.drop(['SalePrice','IsTrain'],axis=1)\nDataTestFinal = DataTest.drop(['SalePrice','IsTrain'],axis=1)\n\nx_train,x_test,y_train,y_test = train_test_split(DataTrainFinal,Target,test_size=0.2,random_state=0)\n\nprint(\"Train set contains: \" + str(x_train.shape[1]) + \" variables in \" + str(x_train.shape[0]) + \" rows.\")\nprint(\"Test set contains: \" + str(x_test.shape[1]) + \" variables in \" + str(x_test.shape[0]) + \" rows.\")","86aa76a8":"ModelAverage = y_train.mean()\nprint(str(round(ModelAverage)))","e21410ed":"Predictions = pd.DataFrame(y_test,columns=['SalePrice'])\nPredictions['ModelAverage'] = ModelAverage\n\nScoreAverage = math.sqrt(metrics.mean_squared_error(y_test, Predictions['ModelAverage']))\n\nprint('Average: RMSE = ' + str(ScoreAverage))\nPredictions.head()","2508d7d4":"NormalReg = TweedieRegressor(power=0, alpha=0, link='identity')\nPoissonReg = TweedieRegressor(power=1, alpha=0, link='log')\nGammaReg = TweedieRegressor(power=2, alpha=0, link='log')\n\nNormalReg.fit(x_train[SelectedVariables_LASSO],y_train)\nPoissonReg.fit(x_train[SelectedVariables_LASSO],y_train)\nGammaReg.fit(x_train[SelectedVariables_LASSO],y_train)\n\nPredictNormalReg = NormalReg.predict(x_test[SelectedVariables_LASSO])\nPredictPoissonReg = PoissonReg.predict(x_test[SelectedVariables_LASSO])\nPredictGammaReg = GammaReg.predict(x_test[SelectedVariables_LASSO])","da526a91":"print('Normal Dist: RMSE = ' + str(math.sqrt(metrics.mean_squared_error(y_test, PredictNormalReg))))\nprint('Poisson Dist: RMSE = ' + str(math.sqrt(metrics.mean_squared_error(y_test, PredictPoissonReg))))\nprint('Gamma Dist: RMSE = ' + str(math.sqrt(metrics.mean_squared_error(y_test, PredictGammaReg))))\nprint('Poisson wins')\n\nScoreGLM = math.sqrt(metrics.mean_squared_error(y_test, PredictPoissonReg))\n\nPredictions['GLM Poisson'] = PredictGammaReg\nPredictions.head()","6c786f05":"RandomForest = RandomForestRegressor(random_state=RandState)\nRandomForest.fit(x_train, y_train)\nPredictRandomForest = RandomForest.predict(x_test)\n\nScoreRandomForest = math.sqrt(metrics.mean_squared_error(y_test, PredictRandomForest))\n\nprint('Random Forest: RMSE = ' + str(ScoreRandomForest))","d639b4df":"Predictions['Random Forest'] = PredictRandomForest\nPredictions.head()","63465417":"XBoost_1 =XGBRegressor( booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.5, gamma=0,\n             importance_type='gain', learning_rate=0.008, max_delta_step=0,\n             max_depth=4, min_child_weight=1.5, n_estimators=4000, objective='reg:linear',\n             reg_alpha=0.5, reg_lambda=0.5, scale_pos_weight=1, \n             silent=None, subsample=0.8, verbosity=1)\n\nXBoost_1.fit(x_train, y_train)\n\nPredictXBoost = XBoost_1.predict(x_test)\n\nprint('Extreme boosting for first try: RMSE = ' + str(math.sqrt(metrics.mean_squared_error(y_test, PredictXBoost))))","82c2f979":"XBoost_final =XGBRegressor( booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.5, gamma=0,\n             importance_type='gain', learning_rate=0.0081, max_delta_step=0,\n             max_depth=4, min_child_weight=1.8, n_estimators=4200, objective='reg:linear',\n             reg_alpha=0.6, reg_lambda=0.51, scale_pos_weight=1, \n             silent=None, subsample=0.8, verbosity=1)\n\nXBoost_final.fit(x_train, y_train)\n\nPredictXBoost_final = XBoost_final.predict(x_test)\n\nScoreXBoost = math.sqrt(metrics.mean_squared_error(y_test, PredictXBoost_final))\n\nprint('Final extreme boosting: RMSE = ' + str(ScoreXBoost))","b35e97a3":"Predictions['Extreme boosting'] = PredictXBoost_final\nPredictions.head()","3589a02c":"FinalRMSE = pd.DataFrame([[ScoreAverage],[ScoreGLM],[ScoreRandomForest],[ScoreXBoost]],columns=[\"RMSE\"],index=['Expected value','GLM Poisson','Random Forest','Extreme boosting'])\nFinalRMSE","0c8bb54c":"XBoost_final.fit(DataTrainFinal, Target)\n\nFinalPrediction = XBoost_final.predict(DataTestFinal)","6638b6c7":"Submission = pd.DataFrame({'Id': test.index, 'SalePrice': FinalPrediction})\n\nSubmission.to_csv('Submission.csv', index=False)\nSubmission","d8a0dd55":"What is the big disadvantage of the above method (besides linearity assumption)? F statistic takes into account only one feature at the moment. Definitely, it doesn't find then the globally best features set. For this we have another methods, traditionally called norms or regulraizations. The great example of very useful application of this mathematical concept is LASSO (L1 regularization) which allows for finding 'optimal' (linear) solution for the set of features. Let's investigate it.","d940c6bf":"We improved it just a bit. Let's continue with these results. It is not very surprising that extreme boosting performed better than earlier methods, it is well-known of its great predictive power.","35eeb97c":"Now, we will investigate the quality of the given data. First, let's check how many entries are missing","a0526756":"We will investigate which variables can be useful. Namely, we will investigate their variance, the variables which have whole exposure in just one level can't be very supportive for this analysis. Why? Let's assume that we have a variable \"Apartment Type\" having the data of Tokio center. Almost all the records will go to level 'one-storey flat' and remaining categories like 'detached house', 'mansion' etc. will be empty. ","f949a520":"All the data analysis will be done only with use of train data. First, let's look at sale price distribution","9479721a":"Top 15 strongest linear correlation between our target and features is positive. In other words, all these features growth lead to growth of our target. Does it make sense looking into variables' names? For variables like: 'overall quality', 'garage cars' or 'living area' definitely. Some of them like 'Year Built\" are a bit surprising cause we didn't really see it in our graph. Above matrix will be relevant input for our further analysis.","e1a1122f":"Ok, we see that we have 43 categorica variables and 36 numeric ones. It makes sense since we checked before that not counting ID, we should find 79 of them.","6d128b0b":"The important thing working with any data is scaling topic. This modificacation simply transforms numeric values to have 'scaled' values, in other words, it puts them in frame from 0 to 1. If we plotted it, we could see that shape of distribution is not changed, but only numbers on x axis. ","fdb8470e":"We can see that all dropped variables have entries set to 0. Let's focus only on non-zero ones.","0cedb478":"How we can see: average is very authentic and completely doesn't care, it looks always the same regardless the circumstances.","5ae9d094":"Let's look at missing values per variable, starting from numeric features as they usually play decisive role in modeling","67b04bb5":"Define variables' categories. First we will focus on numeric variables, second on categorical ones. The scope of this stage is checking the quality of data, namely what values are missing, but also what values do not make sense (for example: years of construction > 2020).","d3818d69":"What variables should be scaled? Only numeric ones, cause nomial features are already binary (in their dummy form), and ordinal features have its own scale which is acceptable.","4e6a433d":"Next, let's look at its moments. They will give some information about our target. First moment, mean is raw one and gives information about central tendency so just expected value (EV). Second moment, variance is central one and remains key dispersion measure (how much values differ from EV). Third moment, skewness *informs to what side distribution is skewed* . Fourth one, kurtosis will fullfil skewness bringing some information about tails.","f6244fe5":"Alright, let's fit GLM (Generalised Linear Model). This is really useful model from linear family, which introduces link function to facilitate normality requirement. However, one of disadvantages is that we should suppose what distribution should be used. For this three classic distributions are proposed - first is just Gaussian one.","785c6fbf":"# 3. Data analysis","b9f8864c":"Finally, we will fit the model on all training data we have. At the end, we will make prediction on the whole test set.","3961d37b":"Let's make big cross-over and combine:\n* Numeric variables (38 variables like at the beginning of the project)\n* Ordinal variables (14 variables: 13 as transformation of 13 categorical ones + 1 interaction as a result of 5 features)\n* Nominal variables (180 variables as dummy transfomration of 25 nominal variables)","d4686c8f":"Let's check what random forest can do in this case.","2fadd4f0":"We have cleaned and scaled data with defined linear correlation. This is good time for features selection. Variable: \"VarNo\"","a6277a7d":"It looks pretty.","55c0e719":"Before we start antyhing, we have to split our data into two parts:\n* training set\n* test set\n\nFor this we will use the same structure as it was defined in basic data.","7d806642":"Ok, now this set of categorical variables looks a bit cleaner. Let's do three things now:\n    1. Investigate which variables can be transformed into ordinal ones\n    2. Analyse cardinality of our remaining categorical variables: check simply how many different levels they have. Categorical variables which can't be represented in ordered list will be referred as \"nominal variables\"\n    3. Apply encoding to transform these categorical variables","53d4c6df":"We want to apply 'hot encoding' so we needed to check the number of levels in our data set. Method 'hot encoding' is used to receive so-called dummies, variables which will correspond to just one level of particular variable. For example having variable \"Apartment Type\", our dummy feature will be equal to 1 only if particular record has certain class. This method has a lot of advantages, for instance you do not loose information. However, on other side it may lead to massive increase of your data set.\n\nIn the case of this data set it is not real danger, cause we have very little number of records and no variables which would have really a lot of levels.","cc5f2535":"Ordering is finished.\n\nNow we will check cardinality.","f24935b6":"# **1. Libraries and data**","63aefcf7":"In this part, we focus on the data analysis. In other words, we will check the dependencies between features, their one- and multi-dimensional behaviour. Furthermore, we will check which variables may be most useful and which ones are the least interesting.","df1f7f3b":"With these parameters, we achieve the RMSE = 26,949. This is not bad, but we can still improve it.","b95c7ca1":"Define train and test data sets. For this we import data set, which is already divided into two parts. ","de2eaa91":"Indeed, our guide informs us that:\n1. Ex\tExcellent\n2. Gd\tGood\n3. TA\tAverage\/Typical\n4. Fa\tFair\n5. Po\tPoor\n\nAlright, on the basis of this we will make mappings. Honestly, these levels were not very intuitive, at the moment it should be simpler. For me the higher numbers is, the better is, so till the end of this notebook all positive levels will receive high numbers while bad ones low numbers (as below).","11da9ebf":"It's good idea to investigate first variables which have \"Qual\" in names cause this shortcut refers to \"Quality\", in other words we expect that some levels will indicate lower quality, while other ones higher one, what can enable us to order them. For this we print unique levels as follows","5e3d3c01":"Correct, 180 variables present in the data set. Precisely, 180 dummy variables, in other words 180 binary features.","13d9df70":"First, we will define basic libraries and data source. For this we will use popular data set which contains house prices data. The set is small (<1Mb), but the quality of data seems to be good so it sounds like attractive toy.","24ea8628":"For all categorical variables which don't belong to class 'luxurious', we will apply NA correction by imputing level \"Unknown\"","d0b66119":"First, let's prepare the data set containing predictions of our future models. The average will be the first one as the simplest possible 'model'. We will treat it as a type of benchmark for our prediction.","1e491def":"Thanks for coming to my notebook. I will be very interested in your comments or corrections.\n\nThe notebook is divided into following parts:\n   1. Libraries and data\n   \n      Definition of basic libraries used for this notebook and data downloading. For the data cleaning train and test sets are combined keeping auxiliary variable to differentiate them later.\n      \n   2. Data cleaning\n   \n      The longest stage of the investigation focused on complete cleaning and understanding the data peculiarities. We define numeric and categorical variables, differentiating nominal and ordinal features as subgroups of categorical ones. We add one interaction and correct empty entries. Last we transform nominal variables into dummy ones.\n      \n   3. Data analysis\n   \n      We scale our numeric variables. Then divide the data set into train and test for the next stages. Further, we analyse the target variable moments and resulting distribution. Next, correlation analysis is done and two features' selection methods are used: F statistic and LASSO. At this stage we assumed linearity.\n   \n   4. Estimation\n   \n      Some basic methods are explored: Generalised Linear Model, Random Forest and Extreme Boosting. We figure out which method offers the best prediction at this stage and fine-tune it.","702eb9a5":"About 6% is quite a good score. Definitely we have couple of useful variables then","b43f146e":"We have 80 columns for test and 81 of them for training. First column is just ID, let's keep this one but of course not use for estimation. The difference in columns' numbers is variable \"SalePrice\" so our target one.","0bc38e57":"Let's now add the new interaction to our main categorical data set. In that way, we create ordinal variable which is simply an interaction","3493ad1a":"Ok, not bad, already great improvement. But we will go further, this can be still boosted. Literally, we can apply extreme boosting for this.","b3f1f895":"These were quite simple, let's look further. We notice the variable: \"BsmtQual\" what corresponds to basement quality. And here arises the question: is it better to not have basement or have poor basement. For me it's still better to have any basement, even if it's poor. In other words, in further part of this mapping I will make some arbitrary decisions (btw I see that this basement topic is really a thing in this data)","b4e5519f":"# **2. Data cleaning**","7705a7df":"# House Prices Analysis","acd03d2b":"In the previous part, we used \"DataRaw.describe()\" to figure out the standard deviation of our variables. It is definitely useful information, but standard deviation's disadvantage is that we need to know the proportion between it and the mean. Namely, it is very hard to say whether for example 'std = 1000' is of big size or not not analysing the particular variable. For this we will use another simple measure - coefficient of variation which takes into account also the volume of variable.","2bc9ad14":"Let's define our 'luxurious' interaction. The idea behind is simple, the more features you have from the list of 5 fancy thingies, the higher you are. Namely, something like: you have only fireplace but nothing else, then you receive 1, you have elevator, fireplace and alley in garden, then you receive 3 etc.","65107574":"Let's say that these all works should resolve numeric problems. \n****Now, we will look at categorical variables.**** For this the idea will be very similar, so starting from NaN's","4995afff":"Having some information about the target, we choose 3 interesting numeric variables to analyse whether they are correlated in any way with our target.","13bf8d1a":"First, we look at some global measures of our data set. Among them:\n* count - number of non-empty entries\n* mean - average value\n* std - standard deviation\n* min, max - lowest and highest value ifor the variable\n* 25%,50%,75% - next percentiles","24b493dd":"Even though the graph is huge, this is not really informative. All in all we have 232 variables.","d5697446":"Alright, we cleaned the data. There are no missing values, ordinal changes were applied and dummy transformation was done for nominal variables. This is the end of the cleaning stage.","fdb82be7":"The results have to be prepared with matching order variables (\"Id\").","abae804d":"We observe that our sale price is linearly correalted with overal quality variable, what makes definitely sense. Similarly regarding the liveable area. What's interesting but not shocking, sale price is not really correlated with sold year. Looking in all this, we are sure that we need more global method to assess the correlation between target and data.","e6e8def6":"**Important remark:** This operation will be a bit surprising: we have to split our train data set to differentiate train and test for modeling. The so-called test set from data doesn't contain target so we would be not able to make evaluation on the basis of this. **","1bb7d931":"In this case, let's use most common method, correlation amtrix which presents the linear behaviour strength between factors.","67b3252a":"It's really interesting cause only \"ExterQual\" appears in both variables' sets. That's true, LASSO variables were very limited by big penalty, but still the algorithm produced completely different results than F statistic. LASSO is really powerful and we believe that it is superior to univariate method like F statistic. This list has to be more reliable (even assuming linearity). \n\nLook: LASSO thinks that our luxurious interaction is useful, nice.","930358d7":"Ok, so using F statistic we receive these 15 variables as listed above. Reminder: this statistic assumes linearity so the score might underestimate the relation between a feature and the target if the relationship is nonlinear.","0fee152e":"As we want to apply the same data cleaning and preprocessing, then we will temporarily connect them","53dc5020":"We had some fun with LASSO penalty parameter adjustment. Basically, its level decides how strict the algorithm is regarding features' importance. We decided to put it very low to limit the number of variables. Putting it at level 0.22, we receive only 15 variables (we should mention that the default level is 1, so 0.22 is quite low).\n\nAre LASSO variables the same as for F statistic? Let's see","391af997":"In this case, obviously all dispersion measures are low, cause the difference of 4-6 years in comparison to ~2000 is small. However, of course the variable is useful as we are not interested in last 2000 years, but just 5. We repeat this practive for the next variables.","ead2cd24":"So for all of them the number of missing entries is reasonable. The biggest value we can observe for LotFrontage (17%), what is still acceptable. Anyway, we don't want to leave with these empty entries. For that, we will just apply imputation. It is simple proxy method which automatically fills empty spaces with 'imputed' values, the default value is 'median'. For variable \"GarageYrBlt\" some records have values around 2200, all these futuristic garages which came from future will be placed as median","1c5e3f3e":"The situation is interesting. For some variables multiple entries are lacking. Investigating it a bit, we observe that variables with high number of missing entries correspond only to very luxurious houses. For example: \"Alley\" informs us what type of lane we have in our garden, FireplaceQu determines the fireplace material, MiscFeature informs about another features, according to description these features can be tennis court, elevator (!) etc. All in all, as these variables have significant number of empty entries, we will drop them but use them to create ordinal variable as interaction between them.","a98bb80f":"**Comparing used methods**","a91284a1":"# 4. Estimation","24af2cfc":"Above five variables were listed starting from \"PoolArea\". These ones have huge coefficient of variance, as we can see on the above graph almost all values remain at 0, then the mean is around 0 what leads to tiny huge value for measure of dispersion. These features with coefficient of variation higher than let's say 2 are highly neglectable. It is important information for us for future choices, for this analysis we will keep them in scope.","f80a97ae":"First, we look at variables with the lowest coefficient of variation, then starting with: \"YrSold\""}}