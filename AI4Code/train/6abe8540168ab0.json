{"cell_type":{"0d4ccd17":"code","ef4e6808":"code","49bd10d9":"code","b76b312d":"code","541b7c8a":"code","61a6aad8":"code","e924f646":"code","baed6128":"code","d85fd8e1":"code","29e0324b":"code","c82b70d1":"code","d456d8ee":"code","9b0a9258":"code","9dbfc5aa":"code","70262dc0":"code","bf44751c":"code","e04fcc3d":"code","2c220179":"code","f36d3114":"code","7463bee6":"code","22f322f8":"code","f464a1b7":"code","d08bca28":"code","e03649fb":"code","bd3d7391":"code","1f7257a1":"code","967add2e":"code","c6cc28e1":"code","dda1a30d":"code","5d787103":"code","94d3dcaf":"code","34b13e5c":"code","b3b3f7f3":"code","8e49190b":"code","34071cb4":"code","d5c75924":"code","aacb69cf":"code","c6253a4e":"code","ff91be2a":"code","a42c0454":"code","8b17df00":"code","6fe2dd76":"code","e4f94e92":"code","f704ab28":"code","42fc3f09":"code","631e6940":"code","c23433ac":"code","cbab27a2":"code","1c416b77":"code","0ba75fe6":"code","c84a28f6":"code","8f01e446":"code","aa594287":"code","620353b6":"code","f3bf5c53":"code","ec72cb22":"code","647fc6ce":"code","dc888fd0":"code","514166ee":"code","177868b5":"code","6cbf6e61":"code","23dff692":"code","6ad14839":"code","cc19d0e1":"code","e7506b62":"code","d8ec4305":"code","eee5546b":"code","cde6314b":"code","a6991b53":"code","1e1b4b87":"code","603cb0e1":"code","45198960":"code","721d97f4":"code","ea1bbc08":"code","b2031b5a":"code","cf72f436":"code","a973e78b":"code","da620166":"code","a22166f7":"code","1dbf74cb":"code","ee5f3709":"code","934cb544":"code","1c8be18b":"code","398dc4e1":"code","d2715dd3":"code","52e7443c":"code","2fbea590":"code","03d3871f":"code","b845d5b7":"code","c589c909":"markdown","4a88166e":"markdown","1e15bda0":"markdown","dab90924":"markdown","3c6d0f4d":"markdown","4d28ce33":"markdown","7675a2a6":"markdown","ad4dd701":"markdown","bfcc8ec5":"markdown","16aa089c":"markdown","8e95c6b1":"markdown","d96a275b":"markdown","424223f3":"markdown","a3e34b1e":"markdown","e5ffe9cb":"markdown","96881114":"markdown","917cd173":"markdown","dc856e34":"markdown","d983a25f":"markdown","ff1c3409":"markdown","3bcdebe8":"markdown","ded87b70":"markdown","2240a381":"markdown","0e314d5f":"markdown","41fb814c":"markdown","00ee019e":"markdown","9c139b7e":"markdown","c09c2cd2":"markdown","c958b215":"markdown","103bd01c":"markdown","3ba4e87c":"markdown","51c475db":"markdown","e06c8d18":"markdown","72c51cdb":"markdown","ae0edc56":"markdown","f10684fc":"markdown","4e20ad52":"markdown","d211b664":"markdown","fbc452d7":"markdown","abdcae1b":"markdown","5ca7e5d3":"markdown","6c5c8904":"markdown","c3e2968a":"markdown","114a0d03":"markdown","ae644335":"markdown","4be3092f":"markdown","3386c00e":"markdown","96a48408":"markdown","977d70a5":"markdown"},"source":{"0d4ccd17":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ef4e6808":"import warnings\nwarnings.filterwarnings(\"ignore\")","49bd10d9":"dataset = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")","b76b312d":"dataset.shape","541b7c8a":"dataset.info()","61a6aad8":"dataset.select_dtypes(include = \"object\").columns","e924f646":"# Checking number of categorical variables\nlen(dataset.select_dtypes(include = \"object\").columns)","baed6128":"dataset.select_dtypes(include=[\"int64\",\"float64\"]).columns","d85fd8e1":"# Checking number of numerical variables\nlen(dataset.select_dtypes(include=[\"int64\",\"float64\"]).columns)","29e0324b":"dataset.describe()","c82b70d1":"# Get the list of columns\ndataset.columns","d456d8ee":"dataset.isnull().values.any()","9b0a9258":"dataset.isnull().values.sum()","9dbfc5aa":"dataset.columns[dataset.isnull().any()]","70262dc0":"len(dataset.columns[dataset.isnull().any()])","bf44751c":"dataset['Unnamed: 32'].count()","e04fcc3d":"dataset = dataset.drop(columns = 'Unnamed: 32')","2c220179":"dataset.shape","f36d3114":"dataset.isnull().values.any()","7463bee6":"dataset.select_dtypes(include = \"object\").columns","22f322f8":"dataset[\"diagnosis\"].unique()","f464a1b7":"# Total number of unique values\ndataset[\"diagnosis\"].nunique()","d08bca28":"dataset = pd.get_dummies(data = dataset, drop_first = True)","e03649fb":"dataset.head()","bd3d7391":"sns.countplot(data = dataset, x = \"diagnosis_M\")\nplt.show()","1f7257a1":"# Benign (0) values\n(dataset[\"diagnosis_M\"] == 0).sum()","967add2e":"# Benign (0) values\n(dataset[\"diagnosis_M\"] == 1).sum()","c6cc28e1":"dataset_2 = dataset.drop(columns = \"diagnosis_M\")","dda1a30d":"dataset_2.head()","5d787103":"dataset_2.corrwith(dataset['diagnosis_M']).plot.bar(\nfigsize = (20,10), title = \"Correlation with diagnosis_M\", rot = 45, grid = True)\nplt.show()","94d3dcaf":"corr = dataset_2.corr()","34b13e5c":"corr","b3b3f7f3":"plt.figure(figsize = (20,10))\nsns.heatmap(data = corr, annot = True, cmap = \"RdYlGn\")\nplt.show()","8e49190b":"dataset.head()","34071cb4":"x = dataset.iloc[:, 1:-1].values","d5c75924":"x.shape","aacb69cf":"y = dataset.iloc[:,-1].values","c6253a4e":"y.shape","ff91be2a":"from sklearn.model_selection import train_test_split","a42c0454":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)","8b17df00":"x_train.shape","6fe2dd76":"x_test.shape","e4f94e92":"y_train.shape","f704ab28":"y_test.shape","42fc3f09":"from sklearn.preprocessing import StandardScaler","631e6940":"sc = StandardScaler()","c23433ac":"x_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","cbab27a2":"x_train","1c416b77":"x_test","0ba75fe6":"from sklearn.linear_model import LogisticRegression","c84a28f6":"classifier_lr = LogisticRegression(random_state=0)","8f01e446":"classifier_lr.fit(x_train,y_train)","aa594287":"y_pred = classifier_lr.predict(x_test)","620353b6":"from sklearn.metrics import accuracy_score, confusion_matrix, f1_score, precision_score, recall_score","f3bf5c53":"acc = accuracy_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)","ec72cb22":"results = pd.DataFrame([['Logistic Regression', acc, f1, prec, rec]],\n               columns = ['Model', 'Accuracy', 'F1 Score', 'Precision', 'Recall'])","647fc6ce":"results","dc888fd0":"cm = confusion_matrix(y_test, y_pred)\nprint(cm)","514166ee":"from sklearn.model_selection import cross_val_score","177868b5":"accuracies = cross_val_score(estimator=classifier_lr, X=x_train, y=y_train, cv=10)","6cbf6e61":"print(\"Accuracy is {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation is {:.2f} %\".format(accuracies.std()*100))","23dff692":"from sklearn.ensemble import RandomForestClassifier","6ad14839":"classifier_rm = RandomForestClassifier(random_state=0)\nclassifier_rm.fit(x_train, y_train)","cc19d0e1":"y_pred = classifier_rm.predict(x_test)","e7506b62":"from sklearn.metrics import accuracy_score, confusion_matrix, f1_score, precision_score, recall_score","d8ec4305":"acc = accuracy_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)","eee5546b":"model_results = pd.DataFrame([['Random forest', acc, f1, prec, rec]],\n               columns = ['Model', 'Accuracy', 'F1 Score', 'Precision', 'Recall'])","cde6314b":"results = results.append(model_results, ignore_index=True)","a6991b53":"results","1e1b4b87":"cm = confusion_matrix(y_test, y_pred)\nprint(cm)","603cb0e1":"from sklearn.model_selection import cross_val_score\n\naccuracies = cross_val_score(estimator=classifier_rm, X=x_train, y=y_train, cv=10)\n\nprint(\"Accuracy is {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation is {:.2f} %\".format(accuracies.std()*100))","45198960":"from sklearn.model_selection import RandomizedSearchCV","721d97f4":"parameters = {'penalty':['l1', 'l2', 'elasticnet', 'none'],\n              'C':[0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0],\n              'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']\n              }","ea1bbc08":"parameters","b2031b5a":"random_search = RandomizedSearchCV(estimator=classifier_lr,param_distributions=parameters, n_iter=5, \n                                   scoring='roc_auc', n_jobs = -1, cv=5, verbose=3)","cf72f436":"random_search.fit(x_train, y_train)","a973e78b":"random_search.best_estimator_","da620166":"random_search.best_score_","a22166f7":"random_search.best_params_","1dbf74cb":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(C=0.75, random_state=0, solver='saga',penalty='l2')","ee5f3709":"classifier.fit(x_train, y_train)","934cb544":"acc = accuracy_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\n\nmodel_results = pd.DataFrame([['Final Logistic Regression', acc, f1, prec, rec]],\n               columns = ['Model', 'Accuracy', 'F1 Score', 'Precision', 'Recall'])\n\n\nresults = results.append(model_results, ignore_index = True)\nresults","1c8be18b":"from sklearn.model_selection import cross_val_score\n\naccuracies = cross_val_score(estimator=classifier, X=x_train, y=y_train, cv=10)\n\nprint(\"Accuracy is {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation is {:.2f} %\".format(accuracies.std()*100))","398dc4e1":"dataset.head()","d2715dd3":"out_list = dataset.iloc[0,:1:-1].to_list()","52e7443c":"np_single_observation = np.array(out_list,ndmin=2)","2fbea590":"np_single_observation","03d3871f":"classifier.predict(sc.transform(np_single_observation))","b845d5b7":"# Checking actual data\ndataset.iloc[0,[1,-1]].to_list()","c589c909":"### Cross Validation","4a88166e":"#### Target Variable \/ Dependent Variable","1e15bda0":"### Random Forest","dab90924":"There are 32 numerical variables","3c6d0f4d":"***For this sample observation, the model is predicting that the cancer is `malignant`***","4d28ce33":"## Part-3: Randomized Search to find the best Parameters","7675a2a6":"There are 33 columns and 569 observations in the dataframe","ad4dd701":"Creating a Confusion Matrix","bfcc8ec5":"Dropping `id` and `diagnosis_M` fields from the dataset","16aa089c":"#### Split data using scikit-learn `train_test_split`","8e95c6b1":"##### Checking numerical variables","d96a275b":"Getting the column(s) which have null values","424223f3":"Get Total number of null values in the dataset","a3e34b1e":"##### Get statistical summary for numerical variables","e5ffe9cb":"We are dropping the column 'Unnamed: 32' as it only contains NULL values","96881114":"### Part-5: Predicting a single observation","917cd173":"***For this sample observation, the actual data is also predicting that the cancer is `malignant`***","dc856e34":"Checking total null values in the column `'Unnamed: 32'`","d983a25f":"Creating a HeatMap to view the correlations","ff1c3409":"##### Perform one-hot encoding to convert `diagnosis` to a numerical variable","3bcdebe8":"### Splitting the dataset into train and test set","ded87b70":"**We will be using `Logistic Regression` as that seems to be the best model for our scenario**","2240a381":"Creating correlation b\/w Target Variable `diagnosis_M` and other independent variables","0e314d5f":"### Create a CountPlot to check `diagnosis_M`","41fb814c":"##### Analyzing categorical variables","00ee019e":"#### Matrix of Features \/ Independent Variables","9c139b7e":"There is only one column `diagnosis` which is a categorical variable","c09c2cd2":"Creating a correlation matrix `corr` to view the results better","c958b215":"Getting unique values in `diagnosis` column","103bd01c":"Checking to see if there are any NULL values in the dataset","3ba4e87c":"## Part-4: Final Model (Logistic Regression)","51c475db":"### Cross Validation","e06c8d18":"Check if we have any null values in the dataset","72c51cdb":"**Objective : Predict whether the cancer is benign or malignant**","ae0edc56":"Check the shape of dataset after dropping column","f10684fc":"### Dealing with Categorical Data","4e20ad52":"### Cross Validation","d211b664":"### Logistic Regression","fbc452d7":"### Feature Scaling","abdcae1b":"Dropping Target variable `diagnosis_M`","5ca7e5d3":"- We can observe that 31 columns are numeric, and the target variable `diagnosis` is an object.\n- The column `Unnamed: 32`, has no observations\n- All other columns do not have null values","6c5c8904":"#### Importing dataset","c3e2968a":"### Deal with missing values","114a0d03":"#### Data Exploration","ae644335":"### Correlation Matrix and HeatMap","4be3092f":"## Part-1: Data Pre-Processing\n\n> Dataset link: https:\/\/www.kaggle.com\/uciml\/breast-cancer-wisconsin-data","3386c00e":"## Part-2: Building the model","96a48408":"#### Importing requisite libraries","977d70a5":"#### Ignore warnings"}}