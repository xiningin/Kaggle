{"cell_type":{"49707105":"code","964db530":"code","aefddb01":"code","bd11750c":"code","f5c8e84f":"code","03bbaf80":"code","4ff59c2f":"code","66fcef60":"code","a7064adb":"code","75cc264e":"code","5194b20c":"code","32f73763":"code","36ec91d0":"code","b37f01ce":"code","d73301ed":"code","680d94cc":"code","d0f3a0d9":"code","a819db86":"code","0f7db9ca":"code","64675294":"code","43c8c4fa":"code","3e3060b8":"code","9235a66d":"code","7dd5d0c3":"code","d9c4dd3d":"code","cedb94cd":"code","17053fad":"code","0806f417":"code","7cf76fc9":"markdown","3c0b87bf":"markdown","c980f9d8":"markdown","5ca7c3cc":"markdown","8119191f":"markdown","0fbcec31":"markdown","936dbd64":"markdown","994b84db":"markdown","b21ce360":"markdown","f045f9bc":"markdown"},"source":{"49707105":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","964db530":"advertising_multi = pd.read_csv('..\/input\/advertising.csv')\nadvertising_multi.head(5)","aefddb01":"advertising_multi.info()\n","bd11750c":"advertising_multi.describe()","f5c8e84f":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","03bbaf80":"sns.pairplot(advertising_multi)","4ff59c2f":"sns.pairplot(advertising_multi, x_vars=['TV','Radio','Newspaper'],y_vars='Sales',height=7, aspect=0.9)","66fcef60":"X= advertising_multi[['TV','Radio','Newspaper']]\nX.head()","a7064adb":"y= advertising_multi['Sales']\ny.head()","75cc264e":"advertising_multi.tail() #checking the last five rows","5194b20c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,train_size=0.7,random_state=100 )","32f73763":"# Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","36ec91d0":"from sklearn.linear_model import LinearRegression \nlr = LinearRegression()#Creating a LinearRegression object\nlr.fit(X_train, y_train)","b37f01ce":"print(lr.intercept_)","d73301ed":"coeff_df=pd.DataFrame(lr.coef_,X_test.columns,columns=['Coefficient'])\ncoeff_df ","680d94cc":"y_pred = lr.predict(X_test)","d0f3a0d9":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(y_test, y_pred)\nr_squared = r2_score(y_test, y_pred)","a819db86":"print('Mean_Squared_Error :' ,mse)\nprint('r_square_value :' ,r_squared)","0f7db9ca":"import statsmodels.api as sm\nX_train_sm = X_train \nX_train_sm = sm.add_constant(X_train_sm) #sm.add_constant(X) in order to add a constant.\nlr_1 = sm.OLS(y_train,X_train_sm).fit() #create a fitted model in one line\n\nlr_1.params #print the coefficients","64675294":"print(lr_1.summary())#let's see the summary for p values","43c8c4fa":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","3e3060b8":"plt.figure(figsize=(5,5))\nsns.heatmap(advertising_multi.corr(), annot=True)","9235a66d":"X_train_new = X_train[['TV','Radio']]#Removing Newspaper\nX_test_new = X_test[['TV','Radio']]#Removing Newspaper","7dd5d0c3":"lr.fit(X_train_new,y_train)","d9c4dd3d":"y_pred_new = lr.predict(X_test_new)#predicting","cedb94cd":"c   = [i for i in range(1,61,1)]\nfig = plt.figure()\nplt.plot(c,y_test,color=\"blue\", linewidth=2.5,linestyle=\"-\")\nplt.plot(c,y_pred,color=\"red\", linewidth=2.5,linestyle=\"-\")\nfig.suptitle('Actual versus Predicted', fontsize=25)\nplt.xlabel('Index', fontsize=18)\nplt.ylabel('Sales', fontsize=16)","17053fad":"c   = [i for i in range(1,61,1)]\nfig = plt.figure()\nplt.plot(c,y_test-y_pred,color=\"green\", linewidth=2.5,linestyle=\"-\")\nfig.suptitle('Error', fontsize=25)\nplt.xlabel('Index', fontsize=18)\nplt.ylabel('y_test-y_pred', fontsize=16)","0806f417":"lr.fit(X_train_new, y_train)","7cf76fc9":"P value of Newspaper is higher than 0.05 therefore is insignificant","3c0b87bf":"**Calculating Error**","c980f9d8":"**Predicting with the test values**","5ca7c3cc":"**Importing and Running Linear Regression**","8119191f":"**Splitting Data**","0fbcec31":"**Assigning the x and y values**","936dbd64":"**Visualizing what we have**","994b84db":"*** Fork this Kernel. Do not edit without forking!** \n* **Upload Your own Data**\n* **Do not forget to \"Commit\" in order to save your work**","b21ce360":"#1 unit increase in TV price raises Sales by 0.045 ","f045f9bc":"**Checking for P_value**\ny=B      + B1 X1\n  =B X0+B1X1"}}