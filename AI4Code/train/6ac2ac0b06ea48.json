{"cell_type":{"0ecdf75d":"code","da42abfa":"code","a825c1d7":"code","33a1b739":"code","3d05dc6f":"code","66ae417a":"code","80624673":"code","15972a3c":"code","df716ad6":"code","17ecbe83":"code","a1cfbee3":"code","08c2454b":"code","310f3c14":"code","fa5cf8c6":"code","8a692373":"code","4de3a0aa":"code","37837873":"code","52e131e9":"markdown","582e20dc":"markdown","e8b7c7f6":"markdown","92449862":"markdown","f1768469":"markdown","b8b0d828":"markdown","e4b8102b":"markdown","cfdb6707":"markdown","b30956bc":"markdown","b85d2f53":"markdown","beda22a0":"markdown","7241ed0a":"markdown","acc1be28":"markdown","a275702a":"markdown","9e331e11":"markdown","94fe11ab":"markdown","e85b64fd":"markdown","c67f4b35":"markdown","c18e88d9":"markdown","6ac6dfc8":"markdown","7383b779":"markdown","767e6af6":"markdown","e1f1773a":"markdown","a44eca8c":"markdown","a7b698b0":"markdown"},"source":{"0ecdf75d":"import numpy as np\nimport matplotlib.pyplot as plt ","da42abfa":"fig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nlangs = ['C', 'C++', 'Java', 'Python', 'PHP']\nstudents = [23,17,35,29,12]\nax.set_title('Simple Bar Plot')\nax.bar(langs,students)\nplt.show()","a825c1d7":"data = [[30, 25, 50, 20],\n[40, 23, 51, 17],\n[35, 22, 45, 19]]\nX = np.arange(4)\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nax.set_title('Grouped Bar Plot')\nax.bar(X + 0.00, data[0], color = 'black', width = 0.25)\nax.bar(X + 0.25, data[1], color = 'grey', width = 0.25)\nax.bar(X + 0.50, data[2], color = 'yellow', width = 0.25)","33a1b739":"N = 5\nmenMeans = (20, 35, 30, 35, 27)\nwomenMeans = (25, 32, 34, 20, 25)\nind = np.arange(N) # the x locations for the groups\nwidth = 0.35\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nax.bar(ind, menMeans, width, color='r')\nax.bar(ind, womenMeans, width,bottom=menMeans, color='black')\nax.set_ylabel('Scores')\nax.set_title('Stacked Bar Chart')\nax.set_xticks(ind)\nax.set_yticks(np.arange(0, 81, 10))\nax.legend(labels=['Men', 'Women'])\nplt.show()","3d05dc6f":"fig,ax = plt.subplots(1,1)\na = np.array([22,87,5,43,56,73,55,54,11,20,51,5,79,31,27])\nax.hist(a, bins = [0,25,50,75,100],color = \"blue\")\nax.set_title(\"Histogram\")\nax.set_xticks([0,25,50,75,100])\nax.set_xlabel('marks')\nax.set_ylabel('no. of students')\nplt.show()","66ae417a":"fig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nax.axis('equal')\nlangs = ['C', 'C++', 'Java', 'Python', 'PHP']\nstudents = [23,17,35,29,12]\nax.pie(students, labels = langs,autopct='%1.2f%%')\nax.set_title('Pie Chart')\nplt.show()","80624673":"girls_grades = [89, 90, 70, 89, 100, 80, 90, 100, 80, 34]\nboys_grades = [30, 29, 49, 48, 100, 48, 38, 45, 20, 30]\ngrades_range = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nfig=plt.figure()\nax=fig.add_axes([0,0,1,1])\nax.scatter(grades_range, girls_grades, color='r')\nax.scatter(grades_range, boys_grades, color='b')\nax.set_xlabel('Grades Range')\nax.set_ylabel('Grades Scored')\nax.set_title('Scatter Plot')\nplt.show()","15972a3c":"np.random.seed(10)\ncollectn_1 = np.random.normal(100, 10, 200)\ncollectn_2 = np.random.normal(80, 30, 200)\ncollectn_3 = np.random.normal(90, 20, 200)\ncollectn_4 = np.random.normal(70, 25, 200)\n## combine these different collections into a list\ndata_to_plot = [collectn_1, collectn_2, collectn_3, collectn_4]\nfig = plt.figure()\n# Create an axes instance\nax = fig.add_axes([0,0,1,1])\n# Create the boxplot\nbp = ax.boxplot(data_to_plot)\nax.set_title('Box Plot')\nplt.show()","df716ad6":"np.random.seed(10)\ncollectn_1 = np.random.normal(100, 10, 200)\ncollectn_2 = np.random.normal(80, 30, 200)\ncollectn_3 = np.random.normal(90, 20, 200)\ncollectn_4 = np.random.normal(70, 25, 200)\n\n## combine these different collections into a list\ndata_to_plot = [collectn_1, collectn_2, collectn_3, collectn_4]\n\n# Create a figure instance\nfig = plt.figure(facecolor='grey',edgecolor='black')\n\n# Create an axes instance\nax = fig.add_axes([0,0,1,1])\n\n# Create the boxplot\nbp = ax.violinplot(data_to_plot)\nax.set_title('Violin plot')\nplt.show()","17ecbe83":"days = [1,2,3,4,5]\nsleeping =[7,8,6,11,7]\neating = [2,3,4,3,2]\nworking =[7,8,7,2,2]\nplaying = [8,5,7,8,13]\nplt.plot([],[],color='black', label='Sleeping', linewidth=5)\nplt.plot([],[],color='grey', label='Eating', linewidth=5)\nplt.plot([],[],color='Green', label='Working', linewidth=5)\nplt.plot([],[],color='orange', label='Playing', linewidth=5)\n  \nplt.stackplot(days, sleeping,eating,working,playing, colors=['black','grey','Green','orange'])\n  \nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Area Plot')\nplt.legend()\nplt.show()","a1cfbee3":"from mpl_toolkits import mplot3d\nfig = plt.figure(figsize=(15,30))\nax = plt.axes(projection='3d')\nz = np.linspace(0, 1, 100)\nx = z * np.sin(20 * z)\ny = z * np.cos(20 * z)\nc = x + y\nax.scatter(x, y, z, c=c)\nax.set_title('3d Scatter plot')\nplt.show()","08c2454b":"xlist = np.linspace(-3.0, 3.0, 100)\nylist = np.linspace(-3.0, 3.0, 100)\nX, Y = np.meshgrid(xlist, ylist)\nZ = np.sqrt(X**2 + Y**2)\nfig,ax=plt.subplots(1,1)\ncp = ax.contourf(X, Y, Z)\nfig.colorbar(cp) # Add a colorbar to a plot\nax.set_title('Filled Contours Plot')\nax.set_xlabel('x (cm)')\nax.set_ylabel('y (cm)')\nplt.show()","310f3c14":"def f(x, y):\n   return np.sin(np.sqrt(x ** 2 + y ** 2))\nx = np.linspace(-6, 6, 30)\ny = np.linspace(-6, 6, 30)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = plt.figure(figsize=(15,30))\nax = plt.axes(projection='3d')\nax.contour3D(X, Y, Z, 50, cmap='binary')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_title('3D contour')\nplt.show()","fa5cf8c6":"x,y = np.meshgrid(np.arange(-2, 2, .2), np.arange(-2, 2, .25))\nz = x*np.exp(-x**2 - y**2)\nv, u = np.gradient(z, .2, .2)\nfig, ax = plt.subplots(1,1)\nq = ax.quiver(x,y,u,v)\nplt.show()","8a692373":"def f(x, y):\n   return np.sin(np.sqrt(x ** 2 + y ** 2))\n\nx = np.linspace(-6, 6, 30)\ny = np.linspace(-6, 6, 30)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = plt.figure(figsize=(15,30))\nax = plt.axes(projection='3d')\nax.plot_wireframe(X, Y, Z, color='black')\nax.set_title('wireframe')\nplt.show()","4de3a0aa":"x = np.outer(np.linspace(-2, 2, 30), np.ones(30))\ny = x.copy().T # transpose\nz = np.cos(x ** 2 + y ** 2)\n\nfig = plt.figure(figsize=(15,30))\nax = plt.axes(projection='3d')\n\nax.plot_surface(x, y, z,cmap='viridis', edgecolor='none')\nax.set_title('Surface plot')\nplt.show()","37837873":"def f(t):\n    return np.exp(-t) * np.cos(2*np.pi*t)\nt1 = np.arange(0.0, 5.0, 0.1)\nt2 = np.arange(0.0, 5.0, 0.02)\nfig = plt.figure(figsize=(15,10))\nplt.subplot(221)\nplt.plot(t1, f(t1), 'bo', t2, f(t2))\nplt.subplot(222)\nplt.plot(t2, np.cos(2*np.pi*t2))\nplt.show()","52e131e9":"# 3.Pie Chart.\n\n* A Pie Chart can only display one series of data. Pie charts show the size of items (called wedge) in one data series, proportional to the sum of the items. The data points in a pie chart are shown as a percentage of the whole pie.\n\n* Following code uses the pie() function to display the pie chart of the list of students enrolled for various computer language courses. The proportionate percentage is displayed inside the respective wedge with the help of autopct parameter which is set to %1.2f%.","582e20dc":"# 11.Quiver Plot.\n\n* A quiver plot displays the velocity vectors as arrows with components (u,v) at the points (x,y).\n* The following code draws a simple quiver plot \u2212","e8b7c7f6":"# 10.3D Contour Plot.\n\n* The ax.contour3D() function creates three-dimensional contour plot. \n* It requires all the input data to be in the form of two-dimensional regular grids, with the Z-data evaluated at each point. Here, we will show a three-dimensional contour diagram of a three-dimensional sinusoidal function.","92449862":"# 13.3D Surface Plot\n* Surface plot shows a functional relationship between a designated dependent variable (Y), and two independent variables (X and Z).\n* The plot is a companion plot to the contour plot. \n* A surface plot is like a wireframe plot, but each face of the wireframe is a filled polygon. \n* This can aid perception of the topology of the surface being visualized. \n* The plot_surface() function x,y and z as arguments.","f1768469":"# 6.Violin Plot.\n\n* Violin plots are similar to box plots, except that they also show the probability density of the data at different values. These plots include a marker for the median of the data and a box indicating the interquartile range, as in the standard box plots. Overlaid on this box plot is a kernel density estimation. Like box plots, violin plots are used to represent comparison of a variable distribution (or sample distribution) across different \"categories\".\n\n* A violin plot is more informative than a plain box plot. In fact while a box plot only shows summary statistics such as mean\/median and interquartile ranges, the violin plot shows the full distribution of the data.","b8b0d828":"# 8.Three-dimensional(3D) Plotting.\n\n* Three-dimensional plots are enabled by importing the mplot3d toolkit, included with the Matplotlib package.\n\n* A three-dimensional axes can be created by passing the keyword projection='3d' to any of the normal axes creation routines.","e4b8102b":"Well......that's it for this notebook.\n\nFor a brief understanding, you can also refer to the official website of matplotlib.\n**https:\/\/matplotlib.org\/**","cfdb6707":"* The subplot() command specifies numrow, numcol, fignum which ranges from 1 to numrows*numcols. \n* The commas in this command are optional if numrows*numcols<10. So subplot (221) is identical to subplot (2,2,1). \n* Therefore, subplots helps us to plot multiple graphs in which you can define it by aligning vertically or horizontally. \n* In the above example, I have aligned it horizontally.","b30956bc":"**b)Grouped Bar Graph:-**\n\n* A grouped bar graph is a way to show information about sub-groups of the main categories.\n\n\n* The following script will show three bar charts of four bars. The bars will have a thickness of 0.25 units. Each bar chart will be shifted 0.25 units from the previous one. The data object is a multidict containing number of students passed in three branches of an engineering college over the last four years.","b85d2f53":"# 5.Box Plot.\n* A box plot which is also known as a whisker plot displays a summary of a set of data containing the minimum, first quartile, median, third quartile, and maximum. In a box plot, we draw a box from the first quartile to the third quartile. A vertical line goes through the box at the median. The whiskers go from each quartile to the minimum or maximum.\n\n","beda22a0":"# 14.Working With Multiple Plots.\n\n* Now,If i have to discuss about multiple types of plots in python matplotlib such as bar plot, scatter plot, pie plot, area plot etc.\n* Now, let me show you how to handle multiple plots. \n* For this, I have to import numpy module.Let me implement it practically, consider the below example.","7241ed0a":"* In this Notebook, I will be talking about Matplotlib library.\n\n* A picture is worth a thousand words, and with Python\u2019s matplotlib library, it fortunately takes far less than a thousand words of code to create a production-quality graphic.\n\n* However, matplotlib is also a massive library, and getting a plot to look just right is often achieved through trial and error. Using one-liners to generate basic plots in matplotlib is fairly simple, but skillfully commanding the remaining 98% of the library can be daunting.\n\n* Here,i have focused on the most common charts of matplotlib which you might like to refer.","acc1be28":"# 12.3D Wireframe Plot.\n* Wireframe plot takes a grid of values and projects it onto the specified three-dimensional surface, and can make the resulting three-dimensional forms quite easy to visualize. The plot_wireframe() function is used for the purpose \u2212","a275702a":"# 9.Contour Plot.\n\n* Contour plots (sometimes called Level Plots) are a way to show a three-dimensional surface on a two-dimensional plane. It graphs two predictor variables X Y on the y-axis and a response variable Z as contours. These contours are sometimes called the z-slices or the iso-response values.\n\n* A contour plot is appropriate if you want to see how alue Z changes as a function of two inputs X and Y, such that Z = f(X,Y). A contour line or isoline of a function of two variables is a curve along which the function has a constant value.\n\n* The independent variables x and y are usually restricted to a regular grid called meshgrid. The numpy.meshgrid creates a rectangular grid out of an array of x values and an array of y values.\n\n* Matplotlib API contains contour() and contourf() functions that draw contour lines and filled contours, respectively. Both functions need three parameters x,y and z.\n","9e331e11":"# 7.Area Plot.\n\n* Area plots are pretty much similar to the line plot. They are also known as stack plots. These plots can be used to track changes over time for two or more related groups that make up one whole category. \n* For example, let\u2019s compile the work done during a day into categories, say sleeping, eating, working and playing. Consider the below code: ","94fe11ab":"# ----------------------MATPLOTLIB----------------------\n\n\n\n","e85b64fd":"**Happy learning!**","c67f4b35":"# 4.Scatter Plot.\n\n* Scatter plots are used to plot data points on horizontal and vertical axis in the attempt to show how much one variable is affected by another. Each row in the data table is represented by a marker the position depends on its values in the columns set on the X and Y axes. A third variable can be set to correspond to the color or size of the markers, thus adding yet another dimension to the plot.\n\n* The script below plots a scatter diagram of grades range vs grades of boys and girls in two different colors.","c18e88d9":"Hey Folks,\n\n**Please vote up if you like this notebook. Also, try to refer to all other notebooks avaliable attached to my profile.**\n","6ac6dfc8":"# 2.Histogram.\n\n* A histogram is an accurate representation of the distribution of numerical data. It is an estimate of the probability distribution of a continuous variable. It is a kind of bar graph.\n\n* Following example plots a histogram of marks obtained by students in a class. Four bins, 0-25, 26-50, 51-75, and 76-100 are defined. The Histogram shows number of students falling in this range.","7383b779":"# 1.Bar Plot.\n\nA bar chart or bar graph is a chart or graph that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent. The bars can be plotted vertically or horizontally.\n\nA bar graph shows comparisons among discrete categories. One axis of the chart shows the specific categories being compared, and the other axis represents a measured value.","767e6af6":"**a)Simple bar plot:-**\n\n* A Simple bar graph compares different categories. The bars can be vertical or horizontal. It doesn\u2019t matter which type you use\u2014it\u2019s a matter of choice.\n\n* Following is a simple example of the Matplotlib bar plot. It shows the number of students enrolled for various courses offered at an institute.","e1f1773a":"I am also sharing one of the best place to learn about matplotlib -\n**https:\/\/www.youtube.com\/watch?v=qqwf4Vuj8oM&list=PLeo1K3hjS3uu4Lr8_kro2AqaO6CFYgKOl**","a44eca8c":"**c)Stacked Bar Chart:-**\n\n* A stacked bar chart also shows sub-groups, but the sub-groups are stacked on the same bar.","a7b698b0":"# Types of Plots\n\n1.Bar Plot.\n\n2.Histogram.\n\n3.Pie Chart.\n\n4.Scatter Plot.\n\n5.Box Plot.\n\n6.Violin Plot.\n\n7.Area Plot.\n\n8.Three-dimensional(3D) Plotting.\n\n9.Contour Plot.\n\n10.3D Contour Plot.\n\n11.Quiver Plot.\n\n12.3D Wireframe Plot.\n\n13.3D Surface Plot.\n\n14.Working With Multiple Plots.\n"}}