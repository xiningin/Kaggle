{"cell_type":{"3ceb184c":"code","862ca0de":"code","9087915a":"code","eb8c3a3b":"code","c7f4b31e":"code","7f023b16":"code","f08968f2":"code","43d3765f":"code","22937744":"code","5f9ef60b":"code","5d4c0c0f":"code","21caa2e0":"code","e2caf26c":"code","5de39611":"code","dff10cd7":"code","07c73b92":"code","bd7c1fcb":"code","1fc48ab3":"code","9342c73b":"code","667065da":"markdown","87269af5":"markdown"},"source":{"3ceb184c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","862ca0de":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsubmit = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","9087915a":"train","eb8c3a3b":"test.info()","c7f4b31e":"train.info()","7f023b16":"train.drop(['PassengerId','Name','Ticket','Cabin'], axis = 1, inplace=True)\ntest.drop(['PassengerId','Name','Ticket','Cabin'], axis = 1, inplace=True)","f08968f2":"train.Survived.hist()","43d3765f":"train = pd.concat([train,pd.get_dummies(train.Pclass,prefix_sep='Pclass'),pd.get_dummies(train.Sex),pd.get_dummies(train.Embarked,prefix_sep='Embarked')], axis =1)","22937744":"test = pd.concat([test,pd.get_dummies(test.Pclass,prefix_sep='Pclass'),pd.get_dummies(test.Sex),pd.get_dummies(test.Embarked,prefix_sep='Embarked')], axis =1)","5f9ef60b":"train","5d4c0c0f":"test","21caa2e0":"train.drop(['Pclass','Sex','Embarked'],axis=1,inplace=True)\ntest.drop(['Pclass','Sex','Embarked'],axis=1,inplace=True)","e2caf26c":"train.dropna(inplace=True)\ntest.dropna(inplace=True)","5de39611":"train","dff10cd7":"test","07c73b92":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nX_train, X_val, y_train, y_val = train_test_split(train.drop(['Survived'],axis=1),\n                                               train.Survived, test_size=0.2, shuffle=True ,random_state=1)\nbase_model = RandomForestClassifier().fit(X_train,y_train)\npredict  = base_model.predict(X_val)\nprint(f'Accuracy of RFC baseline model: {accuracy_score(y_val,predict)}')\nprint(confusion_matrix(y_val,predict))","bd7c1fcb":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nX_train, X_val, y_train, y_val = train_test_split(train.drop(['Fare'],axis=1),\n                                               train.Fare, test_size=0.2, shuffle=True ,random_state=1)\nbase_model = LinearRegression().fit(X_train,y_train)\npredict  = base_model.predict(X_val)\nprint(f'RMSE of LR baseline model: {mean_squared_error(y_val, predict, squared=False)}')","1fc48ab3":"print(f'RMSE of mean : {mean_squared_error(y_val, [y_train.mean()]*len(y_val), squared=False)}')","9342c73b":"from sklearn.ensemble import RandomForestRegressor\n\nbase_model = RandomForestRegressor().fit(X_train,y_train)\npredict  = base_model.predict(X_val)\nprint(f'RMSE of RandomForestRegression baseline model: {mean_squared_error(y_val, predict, squared=False)}')","667065da":"# Regression","87269af5":"# Classification"}}