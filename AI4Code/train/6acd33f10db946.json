{"cell_type":{"e28e2734":"code","580ae9ba":"code","8d78cc05":"code","d2f99088":"code","2dea65b0":"code","a25c06d5":"code","d012acef":"code","b703070d":"markdown","ff5b1431":"markdown","3a0bdd8e":"markdown"},"source":{"e28e2734":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/twitter-disaster-scores'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport seaborn as sns","580ae9ba":"## I am not out to call anybody out but I looked at the leaderboard as of 10\/27\/2020 and copy pasted the list in to excel and loaded it. I made sure to delete the usernames.\ndf = pd.read_excel('\/kaggle\/input\/twitter-disaster-scores\/twitter_submission_scores.xlsx')","8d78cc05":"df.head()","d2f99088":"df.columns = ['rank','score','entries','last']\ndf.head()","2dea65b0":"## Ahhh much neater. Ok, now let us take a look at how the scores shake out. The score column is between 0 and 1 with 1 being 100% accurate in it's predictions.\n## As good data scientists I we know that 100% accuracy is not likely. \ndf['score'].hist(bins=50)","a25c06d5":"## Good heavens! Something is wrong! We would expect to see something similiar to a gausssian curve in such a competition. You can see a large spike\n## at the top end of the spectrum. Let us break this down in to quantiles. I think 50 should be sufficient. \n\nnumQuantiles = 50\ncolsQuantiles = ['score']\n\ndef createQuantiles(dfColumn, numQuantiles):\n    return pd.qcut(dfColumn, numQuantiles, labels=False,duplicates='drop')\n\nfor string in colsQuantiles:\n    df[string] = createQuantiles(df[string],numQuantiles)","d012acef":"df.hist('score',bins=50)","b703070d":"# Ahhhh yes we see you 100%'ers. Since you're already standing would you kindly make your way to the door?  Thanks! This is where clipping would fall in to place but I think we are done here. ","ff5b1431":"# And now I ask, those of you who had the correct answers without running a proper algorithm please stand up.","3a0bdd8e":"# I think this disaster dataset requires more dimensions when it comes to it's analysis. Why bother going through the competition when the competition is rigged? Well let me tell you. With proper analysis we can make the guilty parties admit their guilt. Let's get started!"}}