{"cell_type":{"f2e1fd91":"code","e5979a0a":"code","29642e56":"code","ce9b9db6":"code","e70eea90":"code","86a42b70":"code","798b52ec":"code","a6915d3e":"code","8f963972":"code","c0ace446":"code","6c70aaf4":"code","7f83f62b":"code","7c1fd82d":"code","2d278594":"code","837bfa4b":"code","abba5f47":"code","1c53a1a9":"code","38373013":"code","0f7fc695":"code","f8ca3e46":"code","e43f4552":"code","c47baad2":"code","a4a24a6b":"code","155007c5":"code","922dfd50":"code","734dd2cd":"code","0281fd41":"code","059762f5":"markdown","b3ec5de3":"markdown","cad27ad6":"markdown","4607ba73":"markdown","b673e716":"markdown","d2c7d466":"markdown","23b845a7":"markdown","628fd544":"markdown","c216a751":"markdown"},"source":{"f2e1fd91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e5979a0a":"#for modelling\nfrom xgboost import XGBClassifier\n\n#for preprocessing and model selection\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler , LabelEncoder\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom scipy.stats import mode","29642e56":"from matplotlib import ticker\nimport time\nimport warnings\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('float_format', '{:f}'.format)\nwarnings.filterwarnings('ignore')","ce9b9db6":"train = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\")\n\ntrain.drop([\"Id\"],axis=1,inplace = True)\ntest.drop([\"Id\"],axis=1,inplace = True)\nTARGET = \"Cover_Type\"\nFEATURES = [col for col in train.columns if col not in ['Id', TARGET]]\nRANDOM_STATE = 69","e70eea90":"print(f'Number of rows in train data: {train.shape[0]}')\nprint(f'Number of columns in train data: {train.shape[1]}')\nprint(f'No of missing values in train data: {sum(train.isna().sum())}')","86a42b70":"cat_features = [col for col in FEATURES if train[col].nunique()<25]\ncont_features = [col for col in FEATURES if train[col].nunique()>=25]\n\nprint(f'Total Number of Features :{len(FEATURES)}')\nprint(f'Number of Categorical Features :{len(cat_features)}')\nprint(f'Number of Continuos Features :{len(cont_features)}')\n","798b52ec":"train = train.drop(index = int(np.where(train[\"Cover_Type\"] == 5 )[0]))\ntrain = train.drop(labels = [\"Soil_Type7\" , \"Soil_Type15\"] ,axis = 1)\ntest = test.drop(labels = [\"Soil_Type7\" , \"Soil_Type15\"] ,axis = 1)\n","a6915d3e":"FEATURES.remove('Soil_Type7')\nFEATURES.remove('Soil_Type15')","8f963972":"train[\"Aspect\"][train[\"Aspect\"] < 0] += 360\ntrain[\"Aspect\"][train[\"Aspect\"] > 359] -= 360\n\ntest[\"Aspect\"][test[\"Aspect\"] < 0] += 360\ntest[\"Aspect\"][test[\"Aspect\"] > 359] -= 360","c0ace446":"new_names = {\n    \"Horizontal_Distance_To_Hydrology\": \"x_dist_hydrlgy\",\n    \"Vertical_Distance_To_Hydrology\": \"y_dist_hydrlgy\",\n    \"Horizontal_Distance_To_Roadways\": \"x_dist_rdwys\",\n    \"Horizontal_Distance_To_Fire_Points\": \"x_dist_firepts\"\n}\n\ntrain.rename(new_names, axis=1, inplace=True)\ntest.rename(new_names, axis=1, inplace=True)","6c70aaf4":"FEATURES.remove(\"Horizontal_Distance_To_Hydrology\")\nFEATURES.remove(\"Vertical_Distance_To_Hydrology\")\nFEATURES.remove(\"Horizontal_Distance_To_Roadways\")\nFEATURES.remove(\"Horizontal_Distance_To_Fire_Points\")\n\nFEATURES.extend([\"x_dist_hydrlgy\",\"y_dist_hydrlgy\",\"x_dist_rdwys\",\"x_dist_firepts\"])","7f83f62b":"train[\"mnhttn_dist_hydrlgy\"] = np.abs(train[\"x_dist_hydrlgy\"]) + np.abs(train[\"y_dist_hydrlgy\"])\ntest[\"mnhttn_dist_hydrlgy\"] = np.abs(test[\"x_dist_hydrlgy\"]) + np.abs(test[\"y_dist_hydrlgy\"])\n\ntrain[\"ecldn_dist_hydrlgy\"] = (train[\"x_dist_hydrlgy\"]**2 + train[\"y_dist_hydrlgy\"]**2)**0.5\ntest[\"ecldn_dist_hydrlgy\"] = (test[\"x_dist_hydrlgy\"]**2 + test[\"y_dist_hydrlgy\"]**2)**0.5","7c1fd82d":"train.loc[train[\"Hillshade_9am\"] < 0, \"Hillshade_9am\"] = 0\ntest.loc[test[\"Hillshade_9am\"] < 0, \"Hillshade_9am\"] = 0\n\ntrain.loc[train[\"Hillshade_Noon\"] < 0, \"Hillshade_Noon\"] = 0\ntest.loc[test[\"Hillshade_Noon\"] < 0, \"Hillshade_Noon\"] = 0\n\ntrain.loc[train[\"Hillshade_3pm\"] < 0, \"Hillshade_3pm\"] = 0\ntest.loc[test[\"Hillshade_3pm\"] < 0, \"Hillshade_3pm\"] = 0\n\ntrain.loc[train[\"Hillshade_9am\"] > 255, \"Hillshade_9am\"] = 255\ntest.loc[test[\"Hillshade_9am\"] > 255, \"Hillshade_9am\"] = 255\n\ntrain.loc[train[\"Hillshade_Noon\"] > 255, \"Hillshade_Noon\"] = 255\ntest.loc[test[\"Hillshade_Noon\"] > 255, \"Hillshade_Noon\"] = 255\n\ntrain.loc[train[\"Hillshade_3pm\"] > 255, \"Hillshade_3pm\"] = 255\ntest.loc[test[\"Hillshade_3pm\"] > 255, \"Hillshade_3pm\"] = 255","2d278594":"features_Hillshade = ['Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm']\nsoil_features = [x for x in train.columns if x.startswith(\"Soil_Type\")]\nwilderness_features = [x for x in train.columns if x.startswith(\"Wilderness_Area\")]\n\ndef addFeature(X):\n    X[\"Soil_Count\"] = X[soil_features].apply(sum, axis=1)\n    X[\"Wilderness_Area_Count\"] = X[wilderness_features].apply(sum, axis=1)\n    X[\"Hillshade_mean\"] = X[features_Hillshade].mean(axis=1)\n    X['amp_Hillshade'] = X[features_Hillshade].max(axis=1) - X[features_Hillshade].min(axis=1)","837bfa4b":"addFeature(train)\naddFeature(test)","abba5f47":"train[\"mean\"] = train[FEATURES].mean(axis=1)\ntrain[\"std\"] = train[FEATURES].std(axis=1)\ntrain[\"min\"] = train[FEATURES].min(axis=1)\ntrain[\"max\"] = train[FEATURES].max(axis=1)\n\ntest[\"mean\"] = test[FEATURES].mean(axis=1)\ntest[\"std\"] = test[FEATURES].std(axis=1)\ntest[\"min\"] = test[FEATURES].min(axis=1)\ntest[\"max\"] = test[FEATURES].max(axis=1)\n\nFEATURES.extend(['mean', 'std', 'min', 'max'])","1c53a1a9":"from sklearn.pipeline import Pipeline\nX = train.drop([\"Cover_Type\"],axis=1)\ny = train[\"Cover_Type\"]\n\npipe = Pipeline([\n    ('scaler',StandardScaler()),\n   \n])","38373013":"xgb_params = {\n    'objective': 'multi:softmax',\n    'eval_metric': 'merror',\n    'tree_method': 'gpu_hist',\n    'predictor': 'gpu_predictor',\n    'num_estimators' : 1000,\n    'early_stopping' : 200,\n    'max_depth' : 7\n    }\n\n\nxgb_scores = []\nxgb_preds = []\n\nkf = StratifiedKFold(n_splits=10,shuffle=True,random_state=RANDOM_STATE)\nfor fold,(train_idx,val_idx) in enumerate(kf.split(X=X,y=y)):\n    print(10*'-',f'fold: {fold+1}',10*'-')\n    start_time = time.time()\n    x_train = X.iloc[train_idx,:]\n    x_val = X.iloc[val_idx,:]\n    y_train = y.iloc[train_idx]\n    y_val = y.iloc[val_idx]\n    \n    x_train = pipe.fit_transform(x_train)\n    x_val = pipe.transform(x_val)\n    \n    model = XGBClassifier(**xgb_params)\n    model.fit(x_train,y_train,eval_set=[(x_val,y_val)],verbose=0)\n    del x_train\n    del y_train\n    preds_val = model.predict(x_val)\n    acc = accuracy_score(y_val,preds_val)\n    del preds_val\n    del x_val\n    del y_val\n    xgb_scores.append(acc)\n    run_time = time.time()-start_time\n    print(f'Fold: {fold+1} accuracy: {acc} runtime: {run_time}')\n    del acc\n    test_temp = pipe.transform(test)\n    test_preds = model.predict(test_temp)\n    xgb_preds.append(test_preds)\n    del model\n    del test_temp\n    \n\n    \nprint(\"Mean Accuracy:\",np.mean(xgb_scores))\n    ","0f7fc695":"from catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier","f8ca3e46":"from sklearn.pipeline import Pipeline\nlgb_params = {\n    'objective' : 'multiclass',\n    'metric' : 'multi_logloss',\n    'device' : 'gpu',\n    }\npipe = Pipeline([\n    ('scaler',StandardScaler()),\n   \n])\n\nlgb_scores = []\nlgb_preds = []\n\nkf = StratifiedKFold(n_splits=10,shuffle=True,random_state=RANDOM_STATE)\nfor fold,(train_idx,val_idx) in enumerate(kf.split(X=X,y=y)):\n    print(10*'-',f'fold: {fold+1}',10*'-')\n    start_time = time.time()\n    x_train = X.iloc[train_idx,:]\n    x_val = X.iloc[val_idx,:]\n    y_train = y.iloc[train_idx]\n    y_val = y.iloc[val_idx]\n    \n    x_train = pipe.fit_transform(x_train)\n    x_val = pipe.transform(x_val)\n    \n    model = LGBMClassifier(**lgb_params)\n    model.fit(x_train,y_train,early_stopping_rounds=200,eval_set=[(x_val,y_val)],verbose=0)\n    del x_train\n    del y_train\n    preds_val = model.predict(x_val)\n    acc = accuracy_score(y_val,preds_val)\n    del preds_val\n    del x_val\n    del y_val\n    lgb_scores.append(acc)\n    run_time = time.time()-start_time\n    print(f'Fold: {fold+1} accuracy: {acc} runtime: {run_time}')\n    del acc\n    test_temp = pipe.transform(test)\n    test_preds = model.predict(test_temp)\n    lgb_preds.append(test_preds)\n    del model\n    del test_temp\n    \n    \n    \nprint(\"Mean Accuracy:\",np.mean(lgb_scores))\n    ","e43f4552":"catb_params = {\n    \"objective\": \"MultiClass\",\n    \"task_type\": \"GPU\",\n}\n\ncatb_preds = []\ncatb_scores = []\n\nkf = StratifiedKFold(n_splits=10,shuffle=True,random_state=RANDOM_STATE)\nfor fold,(train_idx,val_idx) in enumerate(kf.split(X=X,y=y)):\n    print(10*'-',f'fold: {fold+1}',10*'-')\n    start_time = time.time()\n    x_train = X.iloc[train_idx,:]\n    x_val = X.iloc[val_idx,:]\n    y_train = y.iloc[train_idx]\n    y_val = y.iloc[val_idx]\n    \n    x_train = pipe.fit_transform(x_train)\n    x_val = pipe.transform(x_val)\n    \n    model = CatBoostClassifier(**catb_params)\n    model.fit(x_train,y_train,early_stopping_rounds=200,eval_set=[(x_val,y_val)],verbose=0)\n    del x_train\n    del y_train\n    preds_val = model.predict(x_val)\n    acc = accuracy_score(y_val,preds_val)\n    del preds_val\n    del x_val\n    del y_val\n    catb_scores.append(acc)\n    run_time = time.time()-start_time\n    print(f'Fold: {fold+1} accuracy: {acc} runtime: {run_time}')\n    del acc\n    test_temp = pipe.transform(test)\n    test_preds = model.predict(test_temp)\n    catb_preds.append(test_preds)\n    del model\n    del test_temp\n    \n    \n    \nprint(\"Mean Accuracy:\",np.mean(catb_scores))","c47baad2":"print(\"Mean Accuracy:\",np.mean(catb_scores))","a4a24a6b":"xgb_submission = submission.copy()\nxgb_submission['Cover_Type'] = np.squeeze(mode(np.column_stack(xgb_preds),axis = 1)[0]).astype('int')\nxgb_submission.to_csv(\"xgb-subs.csv\",index=None)\nxgb_submission.head()","155007c5":"xgb_submission.head(20)","922dfd50":"lgb_submission = submission.copy()\nlgb_submission['Cover_Type'] = np.squeeze(mode(np.column_stack(lgb_preds),axis = 1)[0]).astype('int')\nlgb_submission.to_csv(\"lgb-subs.csv\",index=None)\nlgb_submission.head()","734dd2cd":"catb_submission = submission.copy()\ncatb_submission['Cover_Type'] = np.squeeze(mode(np.column_stack(catb_preds),axis = 1)[0]).astype('int')\ncatb_submission.to_csv(\"catb-subs.csv\",index=None)\ncatb_submission.head()","0281fd41":"total_preds = xgb_preds+lgb_preds+catb_preds\ntotal_submission = submission.copy()\ntotal_submission['Cover_Type'] = np.squeeze(mode(np.column_stack(total_preds),axis = 1)[0]).astype('int')\ntotal_submission.to_csv(\"total-subs.csv\",index=None)\ntotal_submission.head()","059762f5":"### Notes\n* There is a leakage in the data\n    - This is fixed. Leakage was in the cross validation part. Fixing that really boosted the performance of the model.\n* Hyperparameter optimization is needed, also n_estimators is too small. \n* Maybe add bayesian search for hyperparameters, especially max_depth.\n* Make the modelling part a function, and use it to make a baseline before all the feature engineering. Then use this baseline to assess each of the newly added features. Also use it to compare different models such as lightgbm, catboost or nn.\n* the fold number is stupid. It was 5, I just made it 10. It may make sense to make it 20, but the ram isn't enough. Maybe ask someone to run the code for you. That increase means we will have around 5% more data, and we will be less prone to overfitting.\n","b3ec5de3":"os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'","cad27ad6":"FOLDS = 20\nEPOCHS = 200\nBATCH_SIZE = 128\n\nnn_scores = []\nnn_preds = []\n\nkf = StratifiedKFold(n_splits=5,shuffle=True,random_state=RANDOM_STATE)\nfor fold,(train_idx,val_idx) in enumerate(kf.split(X=X,y=y)):\n    print(10*'-',f'fold: {fold+1}',10*'-')\n    start_time = time.time()\n    x_train = X.iloc[train_idx,:]\n    x_val = X.iloc[val_idx,:]\n    y_train = y.iloc[train_idx]\n    y_val = y.iloc[val_idx]\n    \n    x_train = pipe.fit_transform(x_train)\n    x_val = pipe.transform(x_val)\n    \n    model = build_model()\n    with tf.device('\/device:GPU:0'):\n        model.fit(\n            x_train,\n            y_train,\n            validation_data=(x_val, y_val),\n            epochs=EPOCHS,\n            batch_size=BATCH_SIZE,\n            callbacks=callbacks,\n            verbose=False\n        )\n    del x_train\n    del y_train\n    preds_val = np.argmaz(model.predict(x_val),axis=1)\n    acc = accuracy_score(y_val,preds_val)\n    del preds_val\n    del x_val\n    del y_val\n    nn_scores.append(acc)\n    run_time = time.time()-start_time\n    print(f'Fold: {fold+1} accuracy: {acc} runtime: {run_time}')\n    del acc\n    test_temp = pipe.transform(test)\n    test_preds = model.predict(test_temp)\n    nn_preds.append(test_preds)\n    del model\n    del test_temp\n    \n\n    \nprint(\"Mean Accuracy:\",np.mean(nn_scores))\n    ","4607ba73":"from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n\n\nreduce_lr = ReduceLROnPlateau(\n    monitor=\"val_loss\",\n    factor=0.5,\n    patience=5\n)\n\nearly_stop = EarlyStopping(\n    monitor=\"val_accuracy\",\n    patience=20,\n    restore_best_weights=True\n)\n\ncallbacks = [reduce_lr, early_stop]","b673e716":"train = reduce_mem_usage(train,True)\ntest = reduce_mem_usage(test,True)","d2c7d466":"train.to_csv(\"train_engineered.csv\",index=None)\ntest.to_csv(\"test_engineered.csv\",index=None)","23b845a7":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, BatchNormalization,Dropout\nfrom tensorflow.keras import layers\nimport tensorflow as tf\n\n\nINPUT_SHAPE = test.shape[1:]\nNUM_CLASSES = train[\"Cover_Type\"].nunique()\n\ndef build_model():\n    with tf.device('\/device:GPU:0'):\n        model = Sequential([\n            Dense(units=128, kernel_initializer=\"lecun_normal\", activation=\"selu\", input_shape=INPUT_SHAPE),\n            BatchNormalization(),\n            Dense(units=64, kernel_initializer=\"lecun_normal\", activation=\"selu\"),\n            BatchNormalization(),\n            Dense(units=64, kernel_initializer=\"lecun_normal\", activation=\"relu\"),\n            BatchNormalization(),\n            Dense(units=64, kernel_initializer=\"lecun_normal\", activation=\"relu\"),\n            BatchNormalization(),\n            Dense(units=NUM_CLASSES, activation=\"softmax\")\n        ])\n\n        model.compile(\n            optimizer=\"adam\",\n            loss=\"sparse_categorical_crossentropy\",\n            metrics=[\"accuracy\"]\n        )\n\n    return model\n","628fd544":"cv score for maxdepth=7, 10 folds, and early_stopping=200: 0.9615592403099757(lb score:0.95491. This is overfitting)\n\ncv score for maxdepth=7, 5 folds, and early_stopping=100: 0.9615987403931131\n","c216a751":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose:\n        print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df"}}