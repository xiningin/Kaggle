{"cell_type":{"c1b0dc1e":"code","e91790e8":"code","56aeec8a":"code","230c4695":"code","99682925":"code","a60c9d06":"code","16e06cb7":"code","e40d2ec0":"code","bf0dcb56":"code","91772c15":"code","316d332d":"code","88cdc068":"code","e801c878":"code","8a7a8544":"code","274666d8":"code","c8047a86":"code","87a6c7ab":"code","e99a55e3":"code","bfc45aa6":"code","aa73018c":"code","f3fdced3":"code","58a15870":"code","fc4804d7":"code","1f235ea7":"code","72b3afac":"code","c2d5577e":"code","a64c6680":"code","9e1345e4":"code","5bdd2e8f":"markdown","7e95a552":"markdown","0854122b":"markdown","53caaa75":"markdown","b950e388":"markdown","e2e9298d":"markdown","58914443":"markdown","0fc2a6ef":"markdown","dcc48c16":"markdown","e7ce9d54":"markdown","8334a2f4":"markdown"},"source":{"c1b0dc1e":"import os\nimport json\nimport numpy as np\nimport urllib.request\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport matplotlib.pyplot as plt","e91790e8":"training_dataset_path = \"..\/input\/dogs-cats-images\/dataset\/training_set\/\"\nvalidation_dataset_path = \"..\/input\/dogs-cats-images\/dataset\/test_set\/\"\n\ntraining_dataset_cat_path = training_dataset_path + \"cats\"\ntraining_dataset_dog_path = training_dataset_path + \"dogs\"\n\nvalidation_dataset_cat_path = validation_dataset_path + \"cats\"\nvalidation_dataset_dog_path = validation_dataset_path + \"dogs\"","56aeec8a":"print(\"Number of training images for dog: \", len(os.listdir(training_dataset_dog_path)))\nprint(\"Number of training images for cat: \", len(os.listdir(training_dataset_cat_path)))","230c4695":"print(\"Number of validation images for dog: \", len(os.listdir(validation_dataset_dog_path)))\nprint(\"Number of validation images for cat: \", len(os.listdir(validation_dataset_cat_path)))","99682925":"training_datagen = keras.preprocessing.image.ImageDataGenerator(rotation_range=90,\n                                                                width_shift_range=0.2,\n                                                                height_shift_range=0.2, \n                                                                shear_range=0.2,\n                                                                zoom_range=0.2,\n                                                                fill_mode=\"nearest\",\n                                                                horizontal_flip=True,\n                                                                rescale=1\/255)","a60c9d06":"training_generator = training_datagen.flow_from_directory(directory=training_dataset_path, \n                                                          target_size=(300, 300),\n                                                          class_mode=\"categorical\",\n                                                          batch_size=32)","16e06cb7":"validation_datagen = keras.preprocessing.image.ImageDataGenerator(rescale=1\/255)","e40d2ec0":"validation_generator = training_datagen.flow_from_directory(directory=validation_dataset_path, \n                                                          target_size=(300, 300),\n                                                          class_mode=\"categorical\",\n                                                          batch_size=32)","bf0dcb56":"# load pre-defined model architecture from keras\npre_trained_model = keras.applications.inception_v3.InceptionV3(include_top=False,\n                                                    weights=None,\n                                                    input_shape=(300, 300, 3))","91772c15":"# download pre-trained weight\npre_trained_weight_name = \"inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\"\nurllib.request.urlretrieve(\"https:\/\/storage.googleapis.com\/mledu-datasets\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\", pre_trained_weight_name)","316d332d":"# load pre-trained weight to model\npre_trained_model.load_weights(pre_trained_weight_name)","88cdc068":"# lock layer in pre-trained model\nfor layer in pre_trained_model.layers:\n    layer.trainable = False","e801c878":"pre_trained_model.summary()","8a7a8544":"# the output of pre-trained model\npre_trained_model_output = pre_trained_model.output\n\n# append customed layer to create new model\nx = keras.layers.Flatten()(pre_trained_model_output)\nx = keras.layers.Dense(units=1024, activation=tf.nn.relu)(x)\n\n# create model without dropout layer\noutputs = keras.layers.Dense(units=2, activation=tf.nn.softmax)(x)\nmodel = keras.models.Model(inputs=pre_trained_model.input, outputs=outputs)\n\n# create model with dropout layer\nx = keras.layers.Dropout(0.3)(x)\noutputs = keras.layers.Dense(units=2, activation=tf.nn.softmax)(x)\nmodel_dropout = keras.models.Model(inputs=pre_trained_model.input, outputs=outputs)","274666d8":"model.summary()","c8047a86":"model_dropout.summary()","87a6c7ab":"model.compile(loss=\"categorical_crossentropy\", optimizer=keras.optimizers.Adam(learning_rate=0.0001), metrics=[\"acc\"])","e99a55e3":"model_dropout.compile(loss=\"categorical_crossentropy\", optimizer=keras.optimizers.Adam(learning_rate=0.0001), metrics=[\"acc\"])","bfc45aa6":"pass","aa73018c":"history = model.fit(x=training_generator,\n                    epochs=100,\n                    validation_data=validation_generator,\n                    steps_per_epoch=32,\n                    validation_steps=32)","f3fdced3":"with open(\"history.json\", \"w\") as file:\n    json.dump(history.history, file)","58a15870":"history_dropout = model_dropout.fit(x=training_generator,\n                                    epochs=100,\n                                    validation_data=validation_generator,\n                                    steps_per_epoch=32,\n                                    validation_steps=32)","fc4804d7":"with open(\"history_dropout.json\", \"w\") as file:\n    json.dump(history_dropout.history, file)","1f235ea7":"with open(\"history.json\", 'r') as file:\n    data = file.read()\n\nhistory = json.loads(data)","72b3afac":"with open(\"history_dropout.json\", 'r') as file:\n    data = file.read()\n\nhistory_dropout = json.loads(data)","c2d5577e":"training_acc = history[\"acc\"]\ntraining_val_acc = history[\"val_acc\"]\ndropout_training_acc = history_dropout[\"acc\"]\ndropout_training_val_acc = history_dropout[\"val_acc\"]\nepochs = list(range(len(training_acc)))","a64c6680":"plt.plot(epochs, training_acc, 'bo', label=\"Training Acc\")\nplt.plot(epochs, training_val_acc, 'b', label=\"Validation Acc\")\nplt.title(\"Training Acc vs Validation Acc without Dropout\")\nplt.legend()\nplt.show()","9e1345e4":"plt.plot(epochs, dropout_training_acc, 'bo', label=\"Training Acc\")\nplt.plot(epochs, dropout_training_val_acc, 'b', label=\"Validation Acc\")\nplt.title(\"Training Acc vs Validation Acc with Dropout\")\nplt.legend()\nplt.show()","5bdd2e8f":"### Create ImageDataGenerator for Validation","7e95a552":"### Architecture","0854122b":"## Train Model","53caaa75":"### Create ImageDataGenerator for Training","b950e388":"### Compilation","e2e9298d":"## Create ImageDataGenerator","58914443":"## Define Model","0fc2a6ef":"## Import Package","dcc48c16":"### Callback","e7ce9d54":"## Compare Training Performace of Two Models","8334a2f4":"## Load Dataset"}}