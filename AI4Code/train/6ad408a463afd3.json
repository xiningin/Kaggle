{"cell_type":{"afdb3e12":"code","8fa9ad6c":"code","ceb7d425":"code","2bfbb9fc":"code","65bf5717":"code","21ef1051":"markdown","f25a1a56":"markdown","fd4c60d7":"markdown","5547b3df":"markdown","f9d9b583":"markdown","ba9d2ad0":"markdown"},"source":{"afdb3e12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8fa9ad6c":"# generate related variables\nfrom numpy import mean\nfrom numpy import std\nfrom numpy.random import randn\nfrom numpy.random import seed\nfrom matplotlib import pyplot\n# seed random number generator\nseed(1)\n# prepare data\ndata1 = 20 * randn(1000) + 100\ndata2 = data1 + (10 * randn(1000) + 50)\n# summarize\nprint('data1: mean=%.3f stdv=%.3f' % (mean(data1), std(data1)))\nprint('data2: mean=%.3f stdv=%.3f' % (mean(data2), std(data2)))\n# plot\n#A scatter plot of the two variables is created. Because we contrived the dataset, \n#we know there is a relationship between the two variables. \n#This is clear when we review the generated scatter plot where we can see an increasing trend.\npyplot.scatter(data1, data2)\npyplot.show()","ceb7d425":"# calculate the covariance between two variables\nfrom numpy.random import randn\nfrom numpy.random import seed\nfrom numpy import cov\n# seed random number generator\nseed(1)\n# prepare data\ndata1 = 20 * randn(1000) + 100\ndata2 = data1 + (10 * randn(1000) + 50)\n# calculate covariance matrix\ncovariance = cov(data1, data2)\nprint(covariance)","2bfbb9fc":"# calculate the Pearson's correlation between two variables\nfrom numpy.random import randn\nfrom numpy.random import seed\nfrom scipy.stats import pearsonr\n# seed random number generator\nseed(1)\n# prepare data\ndata1 = 20 * randn(1000) + 100\ndata2 = data1 + (10 * randn(1000) + 50)\n# calculate Pearson's correlation\ncorr, _ = pearsonr(data1, data2)\nprint('Pearsons correlation: %.3f' % corr)","65bf5717":"# calculate the spearmans's correlation between two variables\nfrom numpy.random import randn\nfrom numpy.random import seed\nfrom scipy.stats import spearmanr\n# seed random number generator\nseed(1)\n# prepare data\ndata1 = 20 * randn(1000) + 100\ndata2 = data1 + (10 * randn(1000) + 50)\n# calculate spearman's correlation\ncorr, _ = spearmanr(data1, data2)\nprint('Spearmans correlation: %.3f' % corr)","21ef1051":"Before we look at calculating some correlation scores, we must first look at an important statistical building block, called covariance.\n\n**Covariance**\n\nVariables can be related by a linear relationship. This is a relationship that is consistently additive across the two data samples.\n\nThis relationship can be summarized between two variables, called the covariance. It is calculated as the average of the product between the values from each sample, where the values haven been centered (had their mean subtracted).\n\nThe calculation of the sample covariance is as follows:\n\ncov(X, Y) = (sum (x - mean(X)) * (y - mean(Y)) ) * 1\/(n-1)\n\n\nThe use of the mean in the calculation suggests the need for each data sample to have a Gaussian or Gaussian-like distribution.\n\nThe sign of the covariance can be interpreted as whether the two variables change in the same direction (positive) or change in different directions (negative). The magnitude of the covariance is not easily interpreted. A covariance value of zero indicates that both variables are completely independent.\n\nThe cov() NumPy function can be used to calculate a covariance matrix between two or more variables.\n\ncovariance = cov(data1, data2)\n\nThe diagonal of the matrix contains the covariance between each variable and itself. The other values in the matrix represent the covariance between the two variables; in this case, the remaining two values are the same given that we are calculating the covariance for only two variables.\n\nWe can calculate the covariance matrix for the two variables in our test problem.\n\nThe covariance and covariance matrix are used widely within statistics and multivariate analysis to characterize the relationships between two or more variables.\n\nRunning the example calculates and prints the covariance matrix.\n\nBecause the dataset was contrived with each variable drawn from a Gaussian distribution and the variables linearly correlated, covariance is a reasonable method for describing the relationship.\n\nThe covariance between the two variables is 389.75. We can see that it is positive, suggesting the variables change in the same direction as we expect.\n\nThe complete example is listed below.","f25a1a56":"There may be complex and unknown relationships between the variables in your dataset.\n\nIt is important to discover and quantify the degree to which variables in your dataset are dependent upon each other. This knowledge can help you better prepare your data to meet the expectations of machine learning algorithms, such as linear regression, whose performance will degrade with the presence of these interdependencies.\n\nIn this tutorial, you will discover that correlation is the statistical summary of the relationship between variables and how to calculate it for different types variables and relationships.\n\nAfter completing this tutorial, you will know:\n\n- How to calculate a covariance matrix to summarize the linear relationship between two or more variables.\n- How to calculate the Pearson\u2019s correlation coefficient to summarize the linear relationship between two variables.\n- How to calculate the Spearman\u2019s correlation coefficient to summarize the monotonic relationship between two variables.","fd4c60d7":"Running the example calculates and prints the Spearman\u2019s correlation coefficient.\n\nWe know that the data is Gaussian and that the relationship between the variables is linear. Nevertheless, the nonparametric rank-based approach shows a strong correlation between the variables of 0.8.\n\n*Spearmans correlation: 0.872*\n\nAs with the Pearson\u2019s correlation coefficient, the coefficient can be calculated pair-wise for each variable in a dataset to give a correlation matrix for review.\n\nFor more help with non-parametric correlation methods in Python, see:\n\nHow to Calculate Nonparametric Rank Correlation in Python\n\n**Extensions**\n\nThis section lists some ideas for extending the tutorial that you may wish to explore.\n\n- Generate your own datasets with positive and negative relationships and calculate both correlation coefficients.\n- Write functions to calculate Pearson or Spearman correlation matrices for a provided dataset.\n- Load a standard machine learning dataset and calculate correlation coefficients between all pairs of real-valued variables.","5547b3df":"Running the example calculates and prints the Pearson\u2019s correlation coefficient.\n\nWe can see that the two variables are positively correlated and that the correlation is 0.8. This suggests a high level of correlation, e.g. a value above 0.5 and close to 1.0.\n\nPearsons correlation: 0.888\n\nThe Pearson\u2019s correlation coefficient can be used to evaluate the relationship between more than two variables.\n\nThis can be done by calculating a matrix of the relationships between each pair of variables in the dataset. The result is a symmetric matrix called a correlation matrix with a value of 1.0 along the diagonal as each column always perfectly correlates with itself.\n\n**Spearman\u2019s Correlation**\n\nTwo variables may be related by a nonlinear relationship, such that the relationship is stronger or weaker across the distribution of the variables.\n\nFurther, the two variables being considered may have a non-Gaussian distribution.\n\nIn this case, the Spearman\u2019s correlation coefficient (named for Charles Spearman) can be used to summarize the strength between the two data samples. This test of relationship can also be used if there is a linear relationship between the variables, but will have slightly less power (e.g. may result in lower coefficient scores).\n\nAs with the Pearson correlation coefficient, the scores are between -1 and 1 for perfectly negatively correlated variables and perfectly positively correlated respectively.\n\nInstead of calculating the coefficient using covariance and standard deviations on the samples themselves, these statistics are calculated from the relative rank of values on each sample. This is a common approach used in non-parametric statistics, e.g. statistical methods where we do not assume a distribution of the data such as Gaussian.\n\n*Spearman's correlation coefficient = covariance(rank(X), rank(Y)) \/ (stdv(rank(X)) * stdv(rank(Y)))*\n\nA linear relationship between the variables is not assumed, although a monotonic relationship is assumed. This is a mathematical name for an increasing or decreasing relationship between the two variables.\n\nIf you are unsure of the distribution and possible relationships between two variables, Spearman correlation coefficient is a good tool to use.\n\nThe spearmanr() SciPy function can be used to calculate the Spearman\u2019s correlation coefficient between two data samples with the same length.\n\nWe can calculate the correlation between the two variables in our test problem.\n\nThe complete example is listed below.","f9d9b583":"A problem with covariance as a statistical tool alone is that it is challenging to interpret. This leads us to the Pearson\u2019s correlation coefficient next.\n\n**Pearson\u2019s Correlation**\n\nThe Pearson correlation coefficient (named for Karl Pearson) can be used to summarize the strength of the linear relationship between two data samples.\n\nThe Pearson\u2019s correlation coefficient is calculated as the covariance of the two variables divided by the product of the standard deviation of each data sample. It is the normalization of the covariance between the two variables to give an interpretable score.\n\n*Pearson's correlation coefficient = covariance(X, Y) \/ (stdv(X) * stdv(Y))*\n\nThe use of mean and standard deviation in the calculation suggests the need for the two data samples to have a Gaussian or Gaussian-like distribution.\n\nThe result of the calculation, the correlation coefficient can be interpreted to understand the relationship.\n\nThe coefficient returns a value between -1 and 1 that represents the limits of correlation from a full negative correlation to a full positive correlation. A value of 0 means no correlation. The value must be interpreted, where often a value below -0.5 or above 0.5 indicates a notable correlation, and values below those values suggests a less notable correlation.\n\nThe pearsonr() SciPy function can be used to calculate the Pearson\u2019s correlation coefficient between two data samples with the same length.\n\nWe can calculate the correlation between the two variables in our test problem.\n\nThe complete example is listed below.","ba9d2ad0":"**What is Correlation?**\n\nVariables within a dataset can be related for lots of reasons.\n\nFor example:\n\n- One variable could cause or depend on the values of another variable.\n- One variable could be lightly associated with another variable.\n- Two variables could depend on a third unknown variable.\n\nIt can be useful in data analysis and modeling to better understand the relationships between variables. The statistical relationship between two variables is referred to as their correlation.\n\nA correlation could be positive, meaning both variables move in the same direction, or negative, meaning that when one variable\u2019s value increases, the other variables\u2019 values decrease. Correlation can also be neural or zero, meaning that the variables are unrelated.\n\n- Positive Correlation: both variables change in the same direction.\n- Neutral Correlation: No relationship in the change of the variables.\n- Negative Correlation: variables change in opposite directions.\n\n    The performance of some algorithms can deteriorate if two or more variables are tightly related, called multicollinearity. An example is linear regression, where one of the offending correlated variables should be removed in order to improve the skill of the model.\n\nWe may also be interested in the correlation between input variables with the output variable in order provide insight into which variables may or may not be relevant as input for developing a model.\n\nThe structure of the relationship may be known, e.g. it may be linear, or we may have no idea whether a relationship exists between two variables or what structure it may take. Depending what is known about the relationship and the distribution of the variables, different correlation scores can be calculated.\n\nIn this tutorial, we will look at one score for variables that have a Gaussian distribution and a linear relationship and another that does not assume a distribution and will report on any monotonic (increasing or decreasing) relationship.\n\n**Test Dataset**\n\nBefore we look at correlation methods, let\u2019s define a dataset we can use to test the methods.\n\nWe will generate 1,000 samples of two two variables with a strong positive correlation. The first variable will be random numbers drawn from a Gaussian distribution with a mean of 100 and a standard deviation of 20. The second variable will be values from the first variable with Gaussian noise added with a mean of a 50 and a standard deviation of 10.\n\nWe will use the randn() function to generate random Gaussian values with a mean of 0 and a standard deviation of 1, then multiply the results by our own standard deviation and add the mean to shift the values into the preferred range.\n\nThe pseudorandom number generator is seeded to ensure that we get the same sample of numbers each time the code is run."}}