{"cell_type":{"58b8ddfe":"code","a7e75cf9":"code","8b3648a8":"code","6da59449":"code","50a4a291":"code","9e232a31":"code","820b01d6":"code","522f3759":"code","0adb0c62":"code","d9530fe9":"code","75c5f4f5":"code","ae317351":"code","f28da843":"code","a0722906":"code","2a365966":"code","66463b25":"code","89b108cb":"code","510e8b55":"code","855f1a69":"code","9f5f2a2a":"code","02c02ce9":"code","b906ce1d":"code","fa2ab9a6":"code","37403e34":"code","0608a92c":"code","e8538fdb":"code","56c56ae3":"code","5fa9400b":"code","bc2b7752":"code","eb539a24":"markdown","23376a63":"markdown","f76271a6":"markdown","98fdbf17":"markdown","d94b2bc7":"markdown","80050261":"markdown","625e1a57":"markdown","84a16999":"markdown","add52751":"markdown","0c0acc6f":"markdown","612e4d5e":"markdown","2c1ab3a1":"markdown","a7ac2791":"markdown","bf467f27":"markdown","95d2608d":"markdown","1e87b2ee":"markdown","8983cfe8":"markdown","2fc6a218":"markdown","bc7026a3":"markdown"},"source":{"58b8ddfe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2 ## Open CV\n\nimport matplotlib\nfrom matplotlib import pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a7e75cf9":"root_dir = \"..\/input\/polandball-characters\/Balls\/Moon\/\"\ncv_root_dir ='..\/input\/polandball-characters\/Balls\/L\u00fcbeck OR Bohemia OR actual Poland\/'\nroot_dir,cv_root_dir","8b3648a8":"#Return BGR to RGB - https:\/\/www.pyimagesearch.com\/2014\/11\/03\/display-matplotlib-rgb-image\/\ndef convert_BGR_to_RGB(image):\n    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\ndef plot_BGR_to_RGB(image,plt):\n    plt.imshow(convert_BGR_to_RGB(image))","6da59449":"image_org = cv2.imread(root_dir + \"2m4b1w_c(318, 105)_r53.png\")\nprint(f\"Height: {image_org.shape[0]}\")\nprint(f\"Width: {image_org.shape[1]}\")\nprint(f\"Channels:  {image_org.shape[2]}\")#RGB Channel\nprint(f\"Image shape:{image_org.shape}\") #it is generally the matrix denoted with #rows * #columns with channel\nplot_BGR_to_RGB(image_org,plt)\nimage = image_org.copy()","50a4a291":"cv2.imwrite(\"2m4b1w_c(318, 105)_r53.png\",image)","9e232a31":"(r,g,b) = image[0,0]\n(r,g,b)","820b01d6":"image[15,15] = (255,0,0) #BGR for Open CV\n(r,g,b)= image[15,15]\n(r,g,b)","522f3759":"plot_BGR_to_RGB(image_org,plt)# you can a red dot in the image","0adb0c62":"fig, ax = plt.subplots(1,2,figsize=(15,5))\nplot_BGR_to_RGB(image_org,ax[0])\nax[0].imshow(image_org)#original\nax[0].set_title(\"original\")\nimage[0:25,0:25] = (255,0,0)#updated the portion of the image with Red color\nax[1].imshow(image)\nplot_BGR_to_RGB(image_org,ax[0])","d9530fe9":"#(0,0,0) denotes black and we are initializing the board with black color thats why its np.zeros\nboard =  np.zeros(\n                  (400,400,3) #shape of the image with 3 channels for RGB\n                  , dtype=\"uint8\" #type of the data\n                 )\n\nplot_BGR_to_RGB(board,plt)\nplt.axis(\"off\")","75c5f4f5":"green=(0,255,0)\nred = (255,0,0)\nblue=(0,0,255)\ncv2.line(board,(0,0),(400,400),green)\ncv2.line(board,(0,400),(400,0),red,5) #first param - image, start and end points, color and thickness (-1 is shape fill)\ncv2.rectangle(board, (10,10), (100,100), green, 5) # Draw Rectange\ncv2.rectangle(board, (200,200), (300,300), blue, -1)\n(centerX,centerY) = (board.shape[1] \/\/ 2, board.shape[0] \/\/ 2) # Define the center point\ncv2.circle(board,(centerX,centerY),50, red, 5 )# Draw Circle\nplot_BGR_to_RGB(board,plt)","ae317351":"#(0,0,0) denotes black and we are initializing the board with black color thats why its np.zeros\nnew_board =  np.zeros(\n                  (400,400,3) #shape of the image with 3 channels for RGB\n                  , dtype=\"uint8\" #type of the data\n                 )\n\n# Some random drawings\nmax_size= 400\nfor i in range(0,50):\n    r = np.random.randint(1,200)\n    color = np.random.randint(0,256,size=3).tolist()\n    pt= np.random.randint(0,max_size,size=2)\n    end_pt= np.random.randint(0,max_size,size=2)\n    #cv2.line(new_board,tuple(pt),tuple(pt),color,3)\n    #color = np.random.randint(0,256,size=3).tolist()\n    #cv2.rectangle(new_board,tuple(pt),tuple(pt),color,-1)\n    #color = np.random.randint(0,256,size=3).tolist()\n    cv2.circle(new_board, tuple(pt) , r, color , -1)\n\n\nplot_BGR_to_RGB(new_board,plt)","f28da843":"new_board =  np.zeros(\n                  (200,200,3) #shape of the image with 3 channels for RGB\n                  , dtype=\"uint8\" #type of the data\n                 ) + 255\nwidth = 5\nval = 0\nfor i in range(0,200,5):\n    for j in range(0,200,5):\n        spt = (i,j) \n        ept = (i + width,j + width)\n        color = (0,0,0) if val % 2 else (0,0,255)\n        cv2.rectangle(new_board,spt,ept,color, -1)\n        val = val + 1\n    val = val + 1\n        \ncenterx,centery = new_board.shape[1] \/\/ 2, new_board.shape[0] \/\/ 2\ncv2.circle(new_board, (centerx,centery), 40, (0,255,0) , -1)\nplot_BGR_to_RGB(new_board,plt)","a0722906":"from PIL import Image\nim6 = Image.open(\"..\/input\/polandball-characters\/Balls\/Alsace\/3dxpjz_c(1155, 410)_r45.png\")\n\nplt.imshow(im6)\ndisplay(plt.show())","2a365966":"(B,G,R) = cv2.split(image)\n\n\n\nfig,ax = plt.subplots(2,2, figsize=(10,10))\n\nax[0,0].imshow(convert_BGR_to_RGB(cv2.merge([B,G,R])))\nax[0,0].set_title(\"Got Original from Merged\")\n\nax[0,1].imshow(convert_BGR_to_RGB(B))\nax[0,1].set_title(\"Blue Channel\")\n\nax[1,0].imshow(convert_BGR_to_RGB(G))\nax[1,0].set_title(\"Green Channel\")\n\nax[1,1].imshow(convert_BGR_to_RGB(R))\nax[1,1].set_title(\"Red Channel\")","66463b25":"zeros = np.zeros(image.shape[:2], dtype=\"uint8\")\nred_channel = convert_BGR_to_RGB(cv2.merge([zeros,zeros, R]))\ngreen_channel = convert_BGR_to_RGB(cv2.merge([zeros,G, zeros]))\nblue_channel = convert_BGR_to_RGB(cv2.merge([B,zeros, zeros]))\n\nfig,ax = plt.subplots(2,2, figsize=(10,10))\n\nax[0,0].imshow(convert_BGR_to_RGB(cv2.merge([B,G,R])))\nax[0,0].set_title(\"Got Original from Merged\")\n\nax[0,1].imshow(blue_channel)\nax[0,1].set_title(\"Blue Channel\")\n\nax[1,0].imshow(green_channel)\nax[1,0].set_title(\"Green Channel\")\n\nax[1,1].imshow(red_channel)\nax[1,1].set_title(\"Red Channel\")","89b108cb":"from PIL import Image\nim = Image.open(\"..\/input\/polandball-characters\/Balls\/Aboriginal\/2w2j9q_c(413, 1993)_r22.png\")\n\nplt.imshow(im)\ndisplay(plt.show())","510e8b55":"gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\nhsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\nlab = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)\n\nfig,ax = plt.subplots(2,2, figsize=(10,10))\n\nax[0,0].imshow(convert_BGR_to_RGB(image))\nax[0,0].set_title(\"Original\")\n\nax[0,1].imshow(convert_BGR_to_RGB(gray))\nax[0,1].set_title(\"Gray\")\n\nax[1,0].imshow(convert_BGR_to_RGB(hsv))\nax[1,0].set_title(\"HSV\")\n\nax[1,1].imshow(convert_BGR_to_RGB(lab))\nax[1,1].set_title(\"L*a*b*\")","855f1a69":"from PIL import Image\nim1 = Image.open(\"..\/input\/polandball-characters\/Balls\/Alaska\/1c88jd_c(139, 3788)_r98.png\")\n\nplt.imshow(im1)\ndisplay(plt.show())","9f5f2a2a":"gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n#arguments\n#images list - pass in the images\n#channels list - specify the channels for which the hist need to be calculated\n#mask - calc hist only for mask region\n#histsize - size or number of bins\n#range - possible pixel value - [0,256] for RGB and different values for HSV\nhist = cv2.calcHist([gray_image],[0],None,[256],[0,256]) \n\nfig,ax = plt.subplots(1,2 , figsize=(15,5))\nax[0].imshow(convert_BGR_to_RGB(image))\nax[0].set_title(\"Gray Scale Image\")\n\nax[1].plot(hist)\nax[1].set_title(\"Histogram\")\nax[1].set_xlabel(\"Bins\")\nax[1].set_ylabel(\"Number of pixels\")\nax[1].set_xlim([0,256])","02c02ce9":"channels = cv2.split(image)\ncolors = (\"b\" , \"g\" ,\"r\")\n\nfig,ax = plt.subplots(1,2 , figsize=(15,5))\nax[0].imshow(convert_BGR_to_RGB(image))\nax[0].set_title(\"Gray Scale Image\")\n\nax[1].set_title(\"Histogram\")\nax[1].set_xlabel(\"Bins\")\nax[1].set_ylabel(\"Number of pixels\")\nax[1].set_xlim([0,256])\nfor (chan, col) in zip(channels, colors):\n    hist = cv2.calcHist([chan],[0], None,[256],[0,256])\n    ax[1].plot(hist,color = col)","b906ce1d":"fig,ax = plt.subplots(1,3, figsize=(20,5))\n\nhist_GB = cv2.calcHist([channels[1], channels[0]],[0,1],None, [32,32],[0,256,0,256])\np = ax[0].imshow(hist_GB)\nax[0].set_title(\"2D Color Histograms of G and B channel\")\nfig.colorbar(p, ax=ax[0])\n\n\nhist_GR = cv2.calcHist([channels[1], channels[2]],[0,1],None, [32,32],[0,256,0,256])\np = ax[1].imshow(hist_GR)\nax[1].set_title(\"2D Color Histograms of G and R channel\")\nfig.colorbar(p, ax=ax[1])\n\nhist_BR = cv2.calcHist([channels[0], channels[2]],[0,1],None, [32,32],[0,256,0,256])\np = ax[2].imshow(hist_BR)\nax[2].set_title(\"2D Color Histograms of B and R channel\")\nfig.colorbar(p, ax=ax[2])","fa2ab9a6":"#Similar to 2D , we can do hist of the 3D however plotting wont work\nhist = cv2.calcHist([image],[0,1,2],None,[8,8,8],[0,256,0,256,0,256])\nprint(\"3D histogram shape: {}, with {} values\".format(hist.shape, hist.flatten().shape[0]))","37403e34":"from PIL import Image\nim2 = Image.open(\"..\/input\/polandball-characters\/Balls\/Brazil\/11lzoj_c(145, 81)_r15.png\")\n\nplt.imshow(im2)\ndisplay(plt.show())","0608a92c":"#Equalization\nimage_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\neqHist =cv2.equalizeHist(image_gray)\n\nfig,ax = plt.subplots(1,2,figsize=(10,5))\n\nax[0].imshow(convert_BGR_to_RGB(image_gray))\nax[0].set_title(\"Gray scale\")\n\nax[1].imshow(convert_BGR_to_RGB(eqHist))\nax[1].set_title(\"Equalized Hist - Gray scale\")","e8538fdb":"from PIL import Image\nim3 = Image.open(\"..\/input\/polandball-characters\/Balls\/Bosnia and Herzegovina\/26pe6x_c(342, 993)_r20.png\")\n\nplt.imshow(im3)\ndisplay(plt.show())","56c56ae3":"from PIL import Image\nim4 = Image.open(\"..\/input\/polandball-characters\/Balls\/Bangladesh (1971)\/353b7w_c(650, 625)_r82.png\")\n\nplt.imshow(im4)\ndisplay(plt.show())","5fa9400b":"from PIL import Image\nim5 = Image.open(\"..\/input\/polandball-characters\/Balls\/Brazilian Empire\/2xw0du_c(934, 559)_r78.png\")\n\nplt.imshow(im5)\ndisplay(plt.show())","bc2b7752":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient, @mpwolke was here playing with Polandballs.' )","eb539a24":"#Polandballs, aka Countryballs\n\nPolandball, also known as countryballs, is an art style occasionally used in online comics, in which countries are typically personified as spherical characters decorated with their country's flag. The characters often interact in broken English, commonly known as Engrish (with the exception of countryballs that speak English natively. The dialog typically uses regional and\/or national variations, depending on the region the character represents (e.g. France's Engrish is interspersed with French words.) The characters poke fun at national stereotypes and international relations, as well as historical conflicts. Countryballs have also been used in videos and comics involving alternate and speculative history. It is an Internet meme which originated on the \/int\/ board of German imageboard Krautchan.net in the latter half of 2009. The comics style may be referred to both as Polandball (by convention, even in cases where there is no Poland among the cartoon characters) and countryball (or, collectively, countryballs).\n\nhttps:\/\/en.wikipedia.org\/wiki\/Polandball","23376a63":"#Reading the image using the open cv and plotting the image to visualize it in notebook.\n\nNote: OpenCV represents RGB images as multi-dimensional NumPy arrays however in reverse order like BGR","f76271a6":"#Split method in open cv provides in BGR format, so we read as B,G,R Tuple","98fdbf17":"#Histogram Equalization\n\nEqualization is the process of improving contrast of an image, by streching its distribution. Assume an image having a peak at its center by applying the equalization would strech the distribution as well as improvide the contrast. Mostly used in enhancing the medical or satellite images.","d94b2bc7":"![](https:\/\/i.pinimg.com\/originals\/94\/5d\/c0\/945dc0f394af2c8adc675042a577a5b4.png)ar.pinterest.com","80050261":"#Reading the pixel values from image by using the matrix notation of the rows and columns which is nothing but the height and width of the image, matrix is indexed from 0.","625e1a57":"#Bangladesh Ball","84a16999":"#2D & 3D histogram","add52751":"#Write the image back to disk","0c0acc6f":"#Gray Scale Histogram","612e4d5e":"#Took the top left corner pixel pf the image and manipulating it with different color values","2c1ab3a1":"#Codes by Lokeshkumar https:\/\/www.kaggle.com\/lokeshkumarn\/open-cv-tutorials","a7ac2791":"#Merge - show the channel the image channel belongs to using the image processing","bf467f27":"#Create our image. We already know how image is being represented by numpy matrix or tensor of numbers\n\n#That part has nothing to do with Polandball Dataset. It's just drawing.","95d2608d":"#Brazilian Polandball","1e87b2ee":"#Color Histogram","8983cfe8":"#Slicing the image using the numpy array slicing, to read the portion of the image and update with different colors","2fc6a218":"#Brazilian Empire? Ball","bc7026a3":"#Bosnia and Herzegovina PolandBall"}}