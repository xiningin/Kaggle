{"cell_type":{"99ea9de7":"code","5e78adf5":"code","45792412":"code","63a9f3b1":"code","28c57dd0":"code","19b7a53f":"code","948a45f8":"code","14c125f6":"code","3a810d97":"code","9a6ddeec":"code","d5483a24":"code","df88ce36":"code","a8ed19df":"code","5c1fd025":"code","edd150f3":"code","d470074b":"code","598f842b":"code","3013c5a9":"code","8ebefece":"code","a39e5d3b":"code","a85ecfb3":"code","36222ca9":"code","87773ea4":"code","55a84e03":"markdown","440067e4":"markdown","ca6b2f2f":"markdown","98220699":"markdown","bfb81273":"markdown"},"source":{"99ea9de7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e78adf5":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%reload_ext autoreload\n%autoreload 2","45792412":"df = pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')","63a9f3b1":"df.head()","28c57dd0":"df.describe()","19b7a53f":"df.shape","948a45f8":"df.info()","14c125f6":"df = df.drop(['Evaporation','Sunshine','Cloud9am','Cloud3pm','Location','Date'],axis = 1)","3a810d97":"df.head()","9a6ddeec":"df = df.dropna(axis = 0)\ndf.shape","d5483a24":"df.columns","df88ce36":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['WindGustDir'] = le.fit_transform(df['WindGustDir'])\ndf['WindDir9am'] = le.fit_transform(df['WindDir9am'])\ndf['WindDir3pm'] = le.fit_transform(df['WindDir3pm'])\ndf['RainToday'] = le.fit_transform(df['RainToday'])\ndf['RainTomorrow'] = le.fit_transform(df['RainTomorrow'])","a8ed19df":"df.head()","5c1fd025":"x = df.drop(['RainTomorrow'],axis = 1)\ny = df[\"RainTomorrow\"]","edd150f3":"x.head()","d470074b":"plt.figure(figsize = (8,6))\nsns.scatterplot(x = 'MaxTemp', y = 'MinTemp', hue ='RainTomorrow',palette = 'Blues',data = df)","598f842b":"plt.figure(figsize = (8,6))\nsns.scatterplot(x ='Humidity9am', y ='Temp9am', hue = 'RainTomorrow',palette = 'inferno',data = df)","3013c5a9":"plt.figure(figsize = (8,6))\nsns.heatmap(df.corr())","8ebefece":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train,y_test = train_test_split(x,y, test_size = 0.2)","a39e5d3b":"from sklearn.metrics import classification_report, confusion_matrix,accuracy_score","a85ecfb3":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\npredictions = dt.predict(x_test)\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))\nprint(accuracy_score(y_test, predictions))","36222ca9":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf.fit(x_train,y_train)\npredictions = rf.predict(x_test)\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))\nprint(accuracy_score(y_test, predictions))","87773ea4":"import xgboost as xgb\nxgb = xgb.XGBClassifier()\nxgb.fit(x_train, y_train)\npred = xgb.predict(x_test)\nprint('acc',accuracy_score(y_test,pred))\nprint('f1',classification_report(y_test,pred))\nprint('matrix',confusion_matrix(y_test,pred))","55a84e03":"It's not Going to rain Tomorrow","440067e4":"**Decision Tree**","ca6b2f2f":"**Random Forest Classifier**","98220699":"**XGBoost Classifier**","bfb81273":"**Final Conclusion**"}}