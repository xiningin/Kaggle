{"cell_type":{"52c9698a":"code","7ed17034":"code","ff2b56fb":"code","1eb53f89":"code","ae9a5bc0":"code","6ac03ac7":"code","71f7cced":"code","178325d4":"code","b530baa4":"code","77e5f711":"code","3d478767":"code","ed3d3667":"code","ce245d60":"code","9a2ca5e5":"code","9fb7ee95":"code","68c7f128":"code","e9f9afb7":"code","fb204c6d":"code","ea15474d":"code","4050b50f":"code","417537d1":"code","2f593ef3":"markdown"},"source":{"52c9698a":"import os\nimport numpy\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\nimport statsmodels.api as sm \nfrom scipy.interpolate import interp1d\nimport datetime as dt\n\npd.set_option('max_columns', 50)\nplt.style.use('bmh')\ncolor_cycle = cycle(plt.rcParams['axes.prop_cycle'].by_key()['color'])","7ed17034":"osj = os.path.join\nINPUT_DIR = '..\/input\/m5-forecasting-accuracy\/'\ntrain = pd.read_csv(osj(INPUT_DIR, 'sales_train_validation.csv'))\nprice = pd.read_csv(osj(INPUT_DIR, 'sell_prices.csv'))\ncalender = pd.read_csv(osj(INPUT_DIR, 'calendar.csv'))\n\nsample_submit = pd.read_csv(osj(INPUT_DIR, 'sample_submission.csv'))","ff2b56fb":"calender['date'] = pd.to_datetime(calender['date'])","1eb53f89":"d_cols = [c for c in train.columns if 'd_' in c] # d_\u3067\u59cb\u307e\u308b\u65e5\u4ed8\u5217\u306e\u30ea\u30b9\u30c8\nlength = len(d_cols) # d_\u3067\u59cb\u307e\u308b\u65e5\u4ed8\u5217\u306e\u9577\u3055\nzero_rate = (train == 0).sum(axis=1)\/length","ae9a5bc0":"# \u30e9\u30f3\u30c0\u30e0\u306b\u62bd\u51fa\uff08\u500b\u6570\u3001random_state\u306f\u4efb\u610f\uff09\nexamples = train.sample(6, random_state=5050)\n# calender\u3068\u30de\u30fc\u30b8\nexamples = examples.set_index('id')[d_cols].T.merge(calender.set_index('d')['date'],left_index=True, right_index=True, validate='1:1').set_index('date')","6ac03ac7":"for item in examples.columns:\n    examples[item].plot(title=item,\n                        figsize=(15, 2),\n                        color=next(color_cycle))\n    plt.show()","71f7cced":"past_sales = train.set_index('id')[d_cols].T.merge(calender.set_index('d')['date'],\n                                                   left_index=True,\n                                                   right_index=True,\n                                                   validate='1:1').set_index('date')","178325d4":"past_sales.sum(axis=1).plot(figsize=(15, 5), alpha=0.8, title='Total Sales')\nplt.show()","b530baa4":"state_list = train['state_id'].unique()\nfor i in state_list:\n    items_col = [c for c in past_sales.columns if i in c]\n    past_sales[items_col] \\\n        .sum(axis=1) \\\n        .rolling(30).mean() \\\n        .plot(figsize=(15, 5),\n              alpha=0.8,\n              title='Rolling 30 Day Average Total Sales by State')\nplt.legend(train['state_id'].unique())\nplt.show()","77e5f711":"train['cat_id'].unique()","3d478767":"for i in train['cat_id'].unique():\n    items_col = [c for c in past_sales.columns if i in c]\n    past_sales[items_col] \\\n        .sum(axis=1) \\\n        .rolling(30).mean() \\\n        .plot(figsize=(15, 5),\n              alpha=0.8,\n              title='Rolling 30 Day Average Total Sales by Category')\nplt.legend(train['cat_id'].unique())\nplt.show()","ed3d3667":"store_list = price['store_id'].unique()\nstore_list_ca = [s for s in store_list if 'CA' in s]\nstore_list_tx = [s for s in store_list if 'TX' in s]\nstore_list_wi = [s for s in store_list if 'WI' in s]","ce245d60":"for s in store_list_ca:\n    store_items = [c for c in past_sales.columns if s in c]\n    past_sales[store_items] \\\n        .sum(axis=1) \\\n        .rolling(30).mean() \\\n        .plot(figsize=(15, 5),\n              ylim=[0,8000],\n              alpha=0.8,\n            color=next(color_cycle),\n              title='Rolling 30 Day Average Total Sales (CA)')\nplt.legend(store_list_ca)\nplt.show()\n\nfor s in store_list_tx:\n    store_items = [c for c in past_sales.columns if s in c]\n    past_sales[store_items] \\\n        .sum(axis=1) \\\n        .rolling(30).mean() \\\n        .plot(figsize=(15, 5),\n              ylim=[0,8000],\n              color=next(color_cycle),\n              alpha=0.8,\n              title='Rolling 30 Day Average Total Sales (TX)')\nplt.legend(store_list_tx)\nplt.show()\n\nfor s in store_list_wi:\n    store_items = [c for c in past_sales.columns if s in c]\n    past_sales[store_items] \\\n        .sum(axis=1) \\\n        .rolling(30).mean() \\\n        .plot(figsize=(15, 5),\n              ylim=[0,8000],\n              color=next(color_cycle),\n              alpha=0.8,\n              title='Rolling 30 Day Average Total Sales (WI)')\nplt.legend(store_list_wi)\nplt.show()","9a2ca5e5":"d_list = train['dept_id'].unique()\nd_list_foods     = [d for d in d_list if 'FOODS' in d]\nd_list_hobbies   = [d for d in d_list if 'HOBBIES' in d]\nd_list_household = [d for d in d_list if 'HOUSEHOLD' in d]\nd_list_h_h = d_list_hobbies + d_list_household","9fb7ee95":"l = d_list_foods\nfor st in state_list:\n    for d in l:\n        store_items = [c for c in past_sales.columns if st in c]\n        store_d_items = [s for s in store_items if d in s]\n        past_sales[store_d_items] \\\n            .sum(axis=1) \\\n            .rolling(30).mean() \\\n            .plot(figsize=(15, 5),\n                  ylim=[0,10000],\n                  alpha=0.8,\n                  title=f'Rolling 30 Day Average FOODS Sales ({st})')\n    plt.legend(l)\n    plt.show()","68c7f128":"l = d_list_h_h\nfor st in state_list:\n    for d in l:\n        store_items = [c for c in past_sales.columns if st in c]\n        store_d_items = [s for s in store_items if d in s]\n        past_sales[store_d_items] \\\n            .sum(axis=1) \\\n            .rolling(30).mean() \\\n            .plot(figsize=(15, 5),\n                  ylim=[0,10000],\n                  alpha=0.8,\n                  title=f'Rolling 30 Day Average HOBBIES & HOUSEHOLD Sales ({st})')\n    plt.legend(l)\n    plt.show()","e9f9afb7":"def make_total_sales_lowess( p ):\n    total_sales = pd.DataFrame(p.sum(axis=1), columns=['total sales'])\n    \n    # \u30af\u30ea\u30b9\u30de\u30b9\u524a\u9664\n    total_sales_noXmas = total_sales.drop(index=[dt.datetime(2011,12,25), \n                                                 dt.datetime(2012,12,25), \n                                                 dt.datetime(2013,12,25), \n                                                 dt.datetime(2014,12,25), \n                                                 dt.datetime(2015,12,25)])\n\n    df = total_sales_noXmas\n    lowess = sm.nonparametric.lowess(df['total sales'], df.index, frac=.3) \n    lowess_x = list(zip(*lowess))[0] \n    lowess_y = list(zip(*lowess))[1] \n    \n    f = interp1d(lowess_x, lowess_y, bounds_error=False)\n    new_lowess_x = df.index\n    new_lowess_y = f(new_lowess_x)\n    \n    total_sales_lowess = total_sales_noXmas\n    total_sales_lowess['lowess'] = new_lowess_y\n    total_sales_lowess['total sales-lowess'] = total_sales_lowess['total sales'] - total_sales_lowess['lowess']\n    \n    return total_sales_lowess","fb204c6d":"total_sales_lowess = make_total_sales_lowess( past_sales )","ea15474d":"total_sales_lowess.plot(figsize=(15, 5), alpha=0.8)","4050b50f":"store_list","417537d1":"y_bt = -5000\ny_up = 10000\nfor store in store_list :\n    total_sales_lowess_tmp = make_total_sales_lowess( past_sales.loc[:, past_sales.columns.str.contains(store)] )\n    total_sales_lowess_tmp.plot(figsize=(15, 5), alpha=0.8, ylim=[y_bt, y_up],title=store)","2f593ef3":"Simple chart viewer by store.\n\nI made this notebook from [\u3010\u65e5\u672c\u8a9e\u3011Back to (predict) the future - M5 EDA](https:\/\/www.kaggle.com\/marutama\/back-to-predict-the-future-m5-eda).\n\n\u30b7\u30f3\u30d7\u30eb\u306astore\u3054\u3068\u306eChart viewer \u3067\u3059\u3002\n\n[\u3010\u65e5\u672c\u8a9e\u3011Back to (predict) the future - M5 EDA](https:\/\/www.kaggle.com\/marutama\/back-to-predict-the-future-m5-eda )\u304b\u3089\u4f5c\u308a\u307e\u3057\u305f\u3002"}}