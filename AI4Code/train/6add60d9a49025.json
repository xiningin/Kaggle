{"cell_type":{"afb04e64":"code","80cf918a":"code","9d026a03":"code","088d1807":"code","681a6a00":"code","9c96836c":"code","30ae4813":"code","4ec843da":"code","88d71fac":"code","037328fb":"code","fbd23526":"code","fb00d52c":"code","0bcd9920":"code","80752e02":"code","656223a6":"code","c63d43ab":"code","123b0be5":"code","b006515f":"code","dcdd3d4d":"code","f053575a":"code","988c1e6e":"code","db3a157d":"code","e5076032":"code","9d170c1b":"code","c71a9785":"code","b6fec5ed":"code","c3fb5409":"code","0e47f489":"code","7510444d":"code","2212cad1":"code","0f3fe739":"code","076082c8":"code","5326622b":"code","20a88181":"code","8e9d53f6":"code","66899e4b":"code","6d1a6085":"code","ec6ade12":"code","7e1aa6a1":"code","871d9976":"code","d4332563":"code","83441c26":"code","e743e357":"code","79dd811b":"code","b8700fcc":"code","3dfa7ee0":"code","5d7e1abc":"code","e1db925d":"code","e523649e":"code","04661445":"code","3b7cd912":"code","c50cd515":"code","6c04bcdf":"code","5880f40c":"code","f49d1e48":"code","88df3272":"code","e84fbc59":"code","a187ad3d":"markdown","ae0e9a07":"markdown","e9a44578":"markdown","097264b6":"markdown","87bb27ac":"markdown","9d686bd7":"markdown","d347972f":"markdown","7b9e6b8d":"markdown","afa23280":"markdown","fe93124b":"markdown"},"source":{"afb04e64":"# Importing basic libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","80cf918a":"# Importing train and test datasets\ntrain_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","9d026a03":"print(train_data.shape)\ntrain_data.head()","088d1807":"print(test_data.shape)\ntest_data.head()","681a6a00":"train_data.isnull().sum()","9c96836c":"test_data.isnull().sum()","30ae4813":"train_data.info()","4ec843da":"female = train_data[train_data['Sex']=='female']['Survived']\nwomen_srate = sum(female)*100\/len(female)\nprint(f'Womens survival rate on titanic was: {women_srate:.2f} %')","88d71fac":"male = train_data.loc[train_data.Sex == 'male']['Survived']\nmen_srate=sum(male)*100\/len(male)\nprint(f'Mens survival rate on Titanic was: {men_srate:.2f} %')","037328fb":"fig, (ax1,ax2) = plt.subplots(1,2, figsize=(15,14))\nax1.pie(male.value_counts(sort=False), labels=['Died', 'Survived'],autopct='%1.2f%%')\nax1.legend()\nax1.set_title('Male')\nax2.pie(female.value_counts(sort=False), labels=['Died', 'Survived'], autopct='%1.2f%%')\nax2.legend()\nax2.set_title('Female')","fbd23526":"p1=train_data[train_data.Pclass==1]['Survived']\np2=train_data[train_data.Pclass==2]['Survived']\np3=train_data[train_data.Pclass==3]['Survived']\nfig, (ax1,ax2,ax3)=plt.subplots(1,3, figsize=(15,14))\nax1.pie(p1.value_counts(sort=False), labels=['Died','Survived'], autopct='%1.2f%%', colors=['r','g'])\nax1.set_title('Class 1')\nax2.pie(p2.value_counts(sort=False), labels=['Died','Survived'], autopct='%1.2f%%', colors=['r','g'])\nax2.set_title('Class 2')\nax3.pie(p3.value_counts(sort=False), labels=['Died','Survived'], autopct='%1.2f%%', colors=['r','g'])\nax3.set_title('Class 3')\nax3.legend()\nplt.show()","fb00d52c":"sns.countplot(x='Sex', data=train_data, hue='Pclass')","0bcd9920":"women_survived=train_data[train_data['Sex']=='female'][train_data['Survived']==1]['Age'].dropna()\nmen_survived=train_data[train_data['Sex']=='male'][train_data['Survived']==1]['Age'].dropna()\nwomen_died=train_data[train_data['Sex']=='female'][train_data['Survived']==0]['Age'].dropna()\nmen_died=train_data[train_data['Sex']=='male'][train_data['Survived']==0]['Age'].dropna()\nfig, axes = plt.subplots(1,2, figsize=(15,8))\nax= sns.histplot(women_survived, color='g', label='Survived', kde= False, ax=axes[0])\nax = sns.histplot(women_died, color='r', label='Died', kde= False, ax=axes[0])\nax.set_title('Women')\nax.legend()\nax = sns.histplot(men_survived, color='g', label='Survived', kde= False, ax=axes[1])\nax = sns.histplot(men_died, color='r', label='Died', kde= False, ax=axes[1])\nax.set_title('Men')\nax.legend()\nplt.show()","80752e02":"sns.countplot(x='SibSp', data=train_data, hue='Survived')","656223a6":"sns.catplot(x='SibSp', y='Survived', data=train_data,hue = 'Sex', kind='point')\nplt.show()","c63d43ab":"sns.countplot(x='Parch', data=train_data, hue='Survived')\nplt.legend(loc=1)\nplt.show()","123b0be5":"sns.catplot(x='Parch', y='Survived', data=train_data,hue = 'Sex', kind='point')\nplt.show()","b006515f":"sns.catplot(x='Pclass',y='Survived', hue='Sex', data=train_data,row='Embarked', kind='point')\nplt.show()","dcdd3d4d":"sns.countplot(x='Embarked', hue='Survived', data=train_data)\nplt.show()","f053575a":"plt.figure(figsize=(7,7))\nplt.pie(train_data['Embarked'].value_counts(sort=False),autopct='%1.2f%%')\nplt.legend(loc=1, labels=['Queenstown', 'Cherbourg','Southampton'])\nplt.title('Passengers Embarked')\nplt.show()","988c1e6e":"datasets=[train_data, test_data] # Treating both train and test dataset\nfor datasets in datasets:\n    mean_age=np.mean(datasets.Age) # Mean Age\n    stdev=np.std(datasets.Age) # Standard deviation on Age\n    rand_age=np.random.randint(mean_age-stdev, high=mean_age+stdev\n                               ,size = datasets['Age'].isnull().sum()).tolist()# Genrating Random numbers\n    datasets.Age[np.isnan(datasets.Age)]=rand_age # Replacing NaN values with random values between mean-stdev and mean+stdev.\n    datasets['Age']=datasets['Age'].astype(int) # Changing Age column to integer from float\n    datasets['Embarked'].fillna('S', inplace=True) # Replacing NaN values in Embarked with Southampton:Mode value.","db3a157d":"datasets=[train_data, test_data]\nfor i in datasets:\n    print(i.isnull().sum())","e5076032":"from sklearn.preprocessing import OneHotEncoder # One hot encoder for categorical var in numerical form","9d170c1b":"train_data.head()","c71a9785":"cat=['Sex', 'Embarked']\nenc_cat = pd.get_dummies(train_data[cat], drop_first=True)\nenc_cat.head()","b6fec5ed":"onehotencoder=OneHotEncoder()","c3fb5409":"features = ['Pclass', 'SibSp', 'Parch'] # categorical variable in numeric form","0e47f489":"enc_df = pd.DataFrame(onehotencoder.fit_transform(train_data[features]).toarray())","7510444d":"enc_df.head()","2212cad1":"train_data[features].nunique()","0f3fe739":"enc_df.drop(columns = [0,3,10], axis=1, inplace=True) # Dropping First columns to avoid dummy variable trap","076082c8":"y = train_data['Survived'] # Dependent Variable\nX = pd.concat([train_data['Age'], enc_df, enc_cat], axis=1) # Independent Variable","5326622b":"# Same process for encoding test data\nenc_cat_test = pd.get_dummies(test_data[cat], drop_first=True)\nenc_df_test = pd.DataFrame(onehotencoder.fit_transform(test_data[features]).toarray())\nenc_df_test.drop(columns = [0,3,10], axis=1, inplace=True)","20a88181":"test = pd.concat([test_data['Age'], enc_df_test, enc_cat_test], axis=1)","8e9d53f6":"print(train_data['Parch'].nunique())\nprint(test_data['Parch'].nunique())","66899e4b":"X[17]=0 #Test data has an additional value in Parch","6d1a6085":"from sklearn.model_selection import train_test_split # importing train_test_split for model accuracy check.","ec6ade12":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=32) # Splitting data into train and test","7e1aa6a1":"from sklearn.ensemble import RandomForestClassifier # Model\nfrom sklearn.model_selection import RandomizedSearchCV # For hyper-parameter tuning","871d9976":"rfc = RandomForestClassifier()","d4332563":"rfc.get_params()","83441c26":"# Setting some parameters for randomized search CV\nn_estimators = [int(x) for x in np.linspace(start=200, stop=2000, num=50)]\nmax_features = ['auto', 'log2']\nmax_depth = [int(x) for x in np.linspace(start = 3, stop = 200)]\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]","e743e357":"random_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}","79dd811b":"#rfc= RandomForestClassifier()\n#random_rfc = RandomizedSearchCV(estimator=rfc, param_distributions=random_grid, n_iter=100, n_jobs=-1,\n #                               verbose=2, random_state=25)\n#random_rfc.fit(X,y)\n#I'm directly putting the best params I got running code on my system","b8700fcc":"#random_rfc.best_params_ # Best parameters we got from Ramdomized Serch","3dfa7ee0":"from sklearn.model_selection import GridSearchCV # Importing GridSearch for more precise Parameter tuning.\nfrom sklearn.metrics import accuracy_score,f1_score,precision_score,recall_score,roc_auc_score, confusion_matrix","5d7e1abc":"#param_grid = {'n_estimators': [1200, 1230, 1260,1290],\n# 'min_samples_split': [10,15,20],\n# 'min_samples_leaf': [3,4,5],\n# 'max_features': [5,6,8],\n# 'max_depth': [6,7,8],\n# 'bootstrap': [False]}","e1db925d":"#rfc=RandomForestClassifier()\n#grid_rfc=GridSearchCV(estimator=rfc, param_grid=param_grid, verbose=2, n_jobs=-1)","e523649e":"#grid_rfc.fit(X,y)","04661445":"#grid_rfc.best_params_","3b7cd912":"rfc = RandomForestClassifier(bootstrap=False,\n max_depth= 6,\n max_features= 6,\n min_samples_leaf= 3,\n min_samples_split= 60,\n n_estimators= 1350)\nrfc.fit(X_train,y_train)\ny_pred = rfc.predict(X_test)","c50cd515":"accuracy = accuracy_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\nroc_auc = roc_auc_score(y_test, y_pred)\nprint('Accuracy is  :' ,accuracy)\nprint('F1 score is :' ,f1)\nprint('Precision is  :',precision)\nprint('Recall is  :',recall)\nprint('Roc Auc is  :',roc_auc)","6c04bcdf":"rfc.fit(X,y)","5880f40c":"prediction = rfc.predict(test)","f49d1e48":"submission = pd.DataFrame({'PassengerID':test_data['PassengerId'], 'Survived':prediction})","88df3272":"submission.head()","e84fbc59":"submission.to_csv('.\/Submission.csv', index = False)","a187ad3d":"# Modelling","ae0e9a07":"# EDA","e9a44578":"# Encoding Categorical data","097264b6":"Women were far more likely to survive than men on Titanic.","87bb27ac":"# Missing value treatment","9d686bd7":"Younger population in the ship have better survival rate for men, for women it is good throughout all ages.","d347972f":"The chances of Survival is better for people travelling with 1 or 2 Siblings\/Spouse, but this rates go\nlower as we increase that number to 3 or more","7b9e6b8d":"# Data Visualisation","afa23280":"Survival rate of Passangers that Embarked from Cherbourg have higher survival rate than those who Embarked from Southampton or Queenstown. 72% of total passengers were embarked from Southampton. ","fe93124b":"It can be seen that survival rate among higher class passengers is higher than the lower class passengers."}}