{"cell_type":{"b9b722bb":"code","2ff43861":"code","ba8d64ed":"code","53ad2634":"code","8527f58d":"code","39a7a78e":"code","4d6f8086":"code","f85b90d2":"code","09af9dd0":"code","241d4b20":"code","c62d89cc":"code","31ce159a":"code","bc744ed5":"code","c8b7ace9":"code","c73d5982":"code","47a667c7":"code","48baf749":"code","783887e1":"code","b7e43aa5":"code","a9ad5d47":"code","a1193f1f":"code","2bb9998f":"code","9ed80e3d":"code","c547df1a":"code","c15e85f7":"code","bc0ac4f6":"code","6417afbd":"code","32fd40b8":"code","af1e68b1":"code","36f7a95a":"code","309e6b74":"code","78b1a692":"code","8e5e9f37":"code","f5cb688d":"code","8b1df4ba":"code","5316639a":"code","980086ed":"code","7d3acb12":"code","eba33332":"code","769caf03":"code","075ddb4f":"code","ee709c28":"code","a8ff5f62":"code","020c138e":"code","4b9203b4":"code","86053a28":"code","881f2231":"code","61a4930d":"code","4c1057e8":"code","d0bd2c57":"code","57cc0b78":"code","b102bb61":"code","1e342a3a":"code","26d05898":"code","8edeb5c1":"code","adf51228":"code","74d15d63":"code","f5768541":"code","4d286bac":"code","0c6f2f54":"code","bb747db6":"code","96427dc5":"code","8ddc9b97":"code","53152e87":"code","e95c0838":"code","d7880fd2":"code","75ebbc71":"code","7eec064a":"code","f1b09f32":"code","5ec4c82d":"code","0ed04e16":"code","f30852c8":"code","a7518e84":"code","4af08b63":"code","59c021b8":"code","0b979ff2":"code","97599e29":"code","f466aa27":"code","61aeca7c":"code","2a833cb2":"code","ac55d605":"code","e4008596":"code","fa5ef19a":"code","c597ce60":"code","3220c079":"code","641864fb":"markdown","2ea51371":"markdown","7af03068":"markdown","4dda1f6e":"markdown","1a1bf7cb":"markdown","8c2c59c9":"markdown","2df38fc1":"markdown","0e04395b":"markdown","7a2021c5":"markdown","bab50b9d":"markdown","f8bf858c":"markdown","760aa7e4":"markdown","6225b5c3":"markdown","b81b075c":"markdown","09ab4d88":"markdown","c3ddfbdd":"markdown","fbd9c348":"markdown","3b2e930d":"markdown","d1c6c226":"markdown","9c87151b":"markdown","9bacbb79":"markdown","af5477f7":"markdown","941397ee":"markdown","9f46e5a6":"markdown","4d119a36":"markdown"},"source":{"b9b722bb":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import roc_auc_score","2ff43861":"pip install xgboost","ba8d64ed":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import GridSearchCV","53ad2634":"from sklearn.metrics import classification_report","8527f58d":"data = pd.read_csv('..\/input\/joints-dataset\/train_data.csv')\ndata_2 = pd.read_csv('..\/input\/joints-dataset\/test_data.csv')","39a7a78e":"data.head()","4d6f8086":"data.info()","f85b90d2":"data.describe()","09af9dd0":"data.describe(include=['object'])","241d4b20":"data.isnull().sum()","c62d89cc":"data_1 = data.dropna()","31ce159a":"data_1.isnull().sum()","bc744ed5":"data_2.isnull().sum()","c8b7ace9":"top_gender = 'Pria'\ndata_2['Gender'].fillna(value=top_gender, inplace = True)","c73d5982":"Umur = data_2['Umur'].mean()\ndata_2['Umur'].fillna(value=Umur, inplace = True)","47a667c7":"Izin_Mengemudi = data_2['Izin_Mengemudi'].mean()\ndata_2['Izin_Mengemudi'].fillna(value=Izin_Mengemudi, inplace = True)","48baf749":"Biaya = data_2['Biaya'].mean()\ndata_2['Biaya'].fillna(value=Biaya, inplace = True)","783887e1":"data_1['Gender'].unique()","b7e43aa5":"#replace data object di gender untuk data train\nobj_gender = {'Pria':0, 'Wanita':1, '>2 Tahun':2}\ndata_1['Gender'] = data_1['Gender'].replace(obj_gender)","a9ad5d47":"#replace data object di gender untuk data test\nobj_gender2 = {'Pria':0, 'Wanita':1, '>2 Tahun':2}\ndata_2['Gender'] = data_2['Gender'].replace(obj_gender2)","a1193f1f":"data_1['Umur'].unique()","2bb9998f":"data_1['Tahun_Kendaraan'].unique()","9ed80e3d":"#replace data tahun untuk data test\nobj_tahun = {'<1 Tahun':0, '1-2 Tahun':1, '>2 Tahun':2}\ndata_1['Tahun_Kendaraan'] = data_1['Tahun_Kendaraan'].replace(obj_tahun)","c547df1a":"#replace data tahun untuk data train\nobj_tahun2 = {'<1 Tahun':0, '1-2 Tahun':1, '>2 Tahun':2}\ndata_2['Tahun_Kendaraan'] = data_2['Tahun_Kendaraan'].replace(obj_tahun2)","c15e85f7":"Tahun_Kendaraan = data_2['Tahun_Kendaraan'].mean()\ndata_2['Tahun_Kendaraan'].fillna(value=Tahun_Kendaraan, inplace = True)","bc0ac4f6":"data_1['Tahun_Kendaraan'].unique()","6417afbd":"data_1['Biaya'].unique()","32fd40b8":"data_1['Kode_Wilayah'].unique()","af1e68b1":"data_1['Sourcing_Channel'].unique()","36f7a95a":"data_1['Tanggal_Asuransi'].unique()","309e6b74":"#replace data tanggal yang kosong jadi data tanggal yang paling sering muncul untuk data test\ntop_tanggal = 7\/29\/2019\n\ndata_2['Tanggal_Asuransi'].fillna(value=top_tanggal, inplace = True)","78b1a692":"# ubah tipe data menjadi integer untuk data train\ndata_1['Tanggal_Asuransi'] = pd.to_datetime(data_1['Tanggal_Asuransi']).astype(int)\/ 10**9","8e5e9f37":"# ubah tipe data menjadi integer untuk data test\ndata_2['Tanggal_Asuransi'] = pd.to_datetime(data_2['Tanggal_Asuransi']).astype(int)\/ 10**9","f5cb688d":"data_1['Tanggal_Asuransi'].unique()","8b1df4ba":"data_1.info()","5316639a":"data_2.info()","980086ed":"plt.figure(figsize=(12, 8))\ncorrMatrix = data_1.corr()\nsns.heatmap(corrMatrix, annot=True)\nplt.show()","7d3acb12":"X = data_1[['id','Umur', 'Izin_Mengemudi', 'Tahun_Kendaraan', 'Tanggal_Asuransi', 'Biaya']]","eba33332":"y = data_1['Target']","769caf03":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25, random_state=1)","075ddb4f":"X_test = data_2[['id','Umur', 'Izin_Mengemudi', 'Tahun_Kendaraan', 'Tanggal_Asuransi', 'Biaya']]","ee709c28":"#deklarasi model dan tuning hyperparameter menggunakan gridsearch\ndt = DecisionTreeClassifier(max_depth = 10)\n\nparam_grid = {\n    'criterion':['gini', 'entropy'],\n    'splitter':['best', 'random']\n}\n\ngscv_dt = GridSearchCV(dt, param_grid=param_grid, scoring='roc_auc', cv=10)","a8ff5f62":"# fitting model ke data\ngscv_dt.fit(X,y)\n\n# mendapaatkan hyperparameter terbaik \ngscv_dt.best_params_","020c138e":"# prediksi menggunakan gscv_dt \ny_val_dt = gscv_dt.predict(X_val)","4b9203b4":"print(classification_report(y_val, y_val_dt, target_names=None))","86053a28":"#deklarasi model\nrf = RandomForestClassifier()","881f2231":"#tuning hyperparameter menggunakan gridsearch\nparam_grid = {\n    'n_estimators':(2,200),\n    'criterion':['gini','entropy']    \n}\ngscv_rf = GridSearchCV(rf, param_grid=param_grid, scoring='roc_auc', cv=10)","61a4930d":"# fitting model ke data\ngscv_rf.fit(X,y)\n\n# mendaptkan hyperparameters terbaik\ngscv_rf.best_params_","4c1057e8":"# prediksi menggunakan gscv_rf \ny_val_rf = gscv_rf.predict(X_val)","d0bd2c57":"print(classification_report(y_val, y_val_rf, target_names=None))","57cc0b78":"#deklarasi model\nknn = KNeighborsClassifier()","b102bb61":"#tuning hyperparameter menggunakan gridsearch\n\nk_range = list(range(1, 31))\nparam_grid = dict(n_neighbors=k_range)\ngscv_knn = GridSearchCV(knn, param_grid, cv=10, scoring='accuracy')","1e342a3a":"# fitting model ke data\ngscv_knn.fit(X,y)\n\n# mendapatkan hyperparameters terbaik\ngscv_knn.best_params_","26d05898":"# prediksi menggunakan gscv_knn\ny_val_knn = gscv_knn.predict(X_val)","8edeb5c1":"print(classification_report(y_val, y_val_knn, target_names=None))","adf51228":"#deklarasi model\nlogreg = LogisticRegression()","74d15d63":"#tuning hyperparameter menggunakan gridsearch\npenalty = ['l1', 'l2']\nC = np.logspace(-4,4,20)\nhyperparameters = dict(penalty=penalty, C=C)\n#CV itu Cross Validation, menggunakan 10-Fold CV\ngscv_lr = GridSearchCV(logreg, hyperparameters, cv=10)","f5768541":"#Fitting ke Model\ngscv_lr.fit(X,y)\n# mendapatkan hyperparameters terbaik\ngscv_lr.best_params_","4d286bac":"# prediksi menggunakan gscv_lr\n\ny_val_lr = gscv_lr.predict(X_val)","0c6f2f54":"print(classification_report(y_val, y_val_lr, target_names=None))","bb747db6":"#deklarasi metode cross validation\ncv_method = RepeatedStratifiedKFold(n_splits=5,  n_repeats=3, random_state=999)","96427dc5":"#deklarasi model\n\nnb = GaussianNB()","8ddc9b97":"#tuning hyperparameter menggunakan gridsearch\n\nparams_NB = {'var_smoothing': np.logspace(0,-9, num=100)}\ngscv_nb = GridSearchCV(estimator=nb, \n                 param_grid=params_NB, \n                 cv=cv_method,   # use any cross validation technique \n                 verbose=1, \n                 scoring='accuracy') ","53152e87":"#Fitting ke Model\ngscv_nb.fit(X,y)\n#mendapatkan hyperparameters terbaik\ngscv_nb.best_params_","e95c0838":"# prediksi menggunakan gscv_nb\n\ny_val_nb = gscv_nb.predict(X_val)","d7880fd2":"print(classification_report(y_val, y_val_nb, target_names=None))","75ebbc71":"#deklarasi model\n\nmodel = XGBClassifier()","7eec064a":"#deklarasi model\nxgb = XGBClassifier(learning_rate=0.02, n_estimators=600, objective='binary:logistic',\n                    silent=True, nthread=1)","f1b09f32":"#tuning hyperparameter menggunakan gridsearch\nparams = {\n        'min_child_weight': [1, 5, 10],\n        'gamma': [0.5, 1, 1.5, 2, 5],\n        'subsample': [0.6, 0.8, 1.0],\n        'colsample_bytree': [0.6, 0.8, 1.0],\n        'max_depth': [3, 4, 5]\n        }","5ec4c82d":"#tuning hyperparameter menggunakan gridsearch\nfolds = 3\nparam_comb = 5\nskf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 1001)\ngscv_xgb = GridSearchCV(estimator=xgb, param_grid=params, scoring='roc_auc', n_jobs=4, cv=skf.split(X,y), verbose=3)","0ed04e16":"gscv_xgb.fit(X, y)\n# getting the best hyperparameters \ngscv_xgb.best_params_","f30852c8":"y_val_xgb = gscv_xgb.predict(X_val)","a7518e84":"print(classification_report(y_val, y_val_xgb, target_names=None))","4af08b63":"# prediksi menggunakan gscv_dt\ny_pred_dt = gscv_dt.predict(X_test)\n\n# simpan prediksi di pred_dt dataframe menggunakan pandas dan menampilkan 100 data teratas\npred_dt = pd.DataFrame({'id': X_test['id'], 'Target': y_pred_dt})\npred_dt = pred_dt.reset_index(drop=True)\npred_dt.head(10)","59c021b8":"# eksport dataframe ke csv\npred_dt.to_csv('dtree.csv', index=False)","0b979ff2":"# prediksi menggunakan gscv_dt\ny_pred_rf = gscv_rf.predict(X_test)\n\n# simpan prediksi di pred_rf dataframe menggunakan pandas dan menampilkan 100 data teratas\npred_rf = pd.DataFrame({'id': X_test['id'], 'Target': y_pred_rf})\npred_rf = pred_rf.reset_index(drop=True)\npred_rf.head(10)","97599e29":"# eksport dataframe ke csv\npred_rf.to_csv('rforestt.csv', index=False)","f466aa27":"# prediksi menggunakan gscv_knn\ny_pred_knn = gscv_knn.predict(X_test)\n\n# simpan prediksi di pred_knn dataframe menggunakan pandas dan menampilkan 100 data teratas\npred_knn = pd.DataFrame({'id': X_test['id'], 'Target': y_pred_knn})\npred_knn = pred_knn.reset_index(drop=True)\npred_knn.head(10)","61aeca7c":"# eksport dataframe ke csv\npred_knn.to_csv('knn.csv', index=False)","2a833cb2":"# prediksi menggunakan gscv_lr\ny_pred_lr = gscv_lr.predict(X_test)\n\n# simpan prediksi di pred_lr dataframe menggunakan pandas dan menampilkan 100 data teratas\npred_lr = pd.DataFrame({'id': X_test['id'], 'Target': y_pred_lr})\npred_lr = pred_lr.reset_index(drop=True)\npred_lr.head(10)","ac55d605":"# eksport dataframe ke csv\npred_lr.to_csv('lr.csv', index=False)","e4008596":"# prediksi menggunakan gscv_nb\ny_pred_nb = gscv_nb.predict(X_test)\n\n# simpan prediksi di pred_nb dataframe menggunakan pandas dan menampilkan 100 data teratas\npred_nb = pd.DataFrame({'id': X_test['id'], 'Target': y_pred_nb})\npred_nb.head(10)","fa5ef19a":"# eksport dataframe ke csv\npred_nb.to_csv('nb.csv', index=False)","c597ce60":"# prediksi menggunakan gscv_xgb\ny_pred_xgb = gscv_xgb.predict(X_test)\n\n# simpan prediksi di pred_xgb dataframe menggunakan pandas dan menampilkan 100 data teratas\npred_xgb = pd.DataFrame({'id': X_test['id'], 'Target': y_pred_xgb})\npred_xgb.head(10)","3220c079":"# eksport dataframe ke csv\npred_xgb.to_csv('xgb2.csv', index=False)","641864fb":"Import library buat processing","2ea51371":"3. KNN","7af03068":"Tuning hyperparameter dan Test akurasi menggunakan data validation","4dda1f6e":"Buat yang data test yang kosong diganti data yang paling banyak muncul atau rata-rata","1a1bf7cb":"Import Library buat tuning model algoritma ML","8c2c59c9":"Predicting data test","2df38fc1":"Import Library buat evaluasi Model algoritma","0e04395b":"XGBoost","7a2021c5":"4. Logistic Regression","bab50b9d":"5. Naive bayes","f8bf858c":"2. Random Forest","760aa7e4":"1. Decision Tree","6225b5c3":"2. Random Forest","b81b075c":"Visusalisasi dan Analisa data","09ab4d88":"4. Logreg","c3ddfbdd":"6. XGBoost","fbd9c348":"Buat data train yang kosong di drop","3b2e930d":"1. Decision Tree","d1c6c226":"5. naive bayes","9c87151b":"3. KNN","9bacbb79":"Deklarasi data train, validation dan test","af5477f7":"Korelasi Matriks dari tiap kolom","941397ee":"cek lagi setiap tipe data nya udah numerik","9f46e5a6":"Import dataset - Baca deskripsi data","4d119a36":"Cek data unik dari setiap kolom dan replace data object"}}