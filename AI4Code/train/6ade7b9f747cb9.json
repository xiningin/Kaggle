{"cell_type":{"41475a2f":"code","77334d7a":"code","7cedc5d2":"code","8c2bb988":"code","82de99d5":"code","c93c3074":"code","f9175306":"code","728168c1":"code","9d9d4663":"code","249eba73":"code","9f4dd520":"code","8952cf79":"code","346aac6c":"code","7ad671cf":"code","24f1d334":"code","a93fb10c":"code","923439a0":"code","22dbf933":"code","b78efff9":"code","f947ef3e":"code","de80a2da":"code","cb12f0a4":"code","e9eab001":"code","70f280f8":"code","5f91f610":"code","3c8a0a94":"code","4ce4f4fc":"code","f9f20ed8":"code","4dc77187":"code","a62064e3":"code","fca3b712":"code","f4adf21d":"code","b1ec55b2":"code","cc4eda84":"code","4f76586f":"code","224c448a":"code","36d84db9":"code","578d745a":"code","106928f5":"code","9999a143":"code","083a0a8a":"markdown","42208285":"markdown","4ae55d16":"markdown","669b65c4":"markdown","d79c7fd4":"markdown","c12a7bfb":"markdown","a83f4832":"markdown","3fcda57a":"markdown","d31ce514":"markdown","25e20b2b":"markdown","a733969a":"markdown","37ac6972":"markdown","3ee303ff":"markdown","b3a29f32":"markdown","34eca467":"markdown","cd405800":"markdown","593ea9b8":"markdown","d339a455":"markdown","5758f958":"markdown","a923931b":"markdown","55b3ce78":"markdown","9ba7fb30":"markdown","f3864565":"markdown","811a2d7f":"markdown","01b72d90":"markdown","6465070e":"markdown","bf93472b":"markdown","1e2ecb0e":"markdown","629a71c1":"markdown","3a6f42db":"markdown","a9f428ed":"markdown","02d18a66":"markdown","5d9cb937":"markdown","260e7f23":"markdown","0825cfdb":"markdown","bec43204":"markdown","b13cf5ad":"markdown","94fc65a5":"markdown","c75d831a":"markdown","2808be58":"markdown","3ae79468":"markdown","c503dbc5":"markdown","e86bddfc":"markdown","98f53b1a":"markdown","902372e2":"markdown","277079ce":"markdown","7efe7c5b":"markdown","fe731ce1":"markdown","fe156f86":"markdown","7cc3dd80":"markdown","661023cd":"markdown","d0fc6f99":"markdown","7157a9af":"markdown","30cef455":"markdown","35b7179b":"markdown","760017c7":"markdown","f5040edb":"markdown","66cc7c12":"markdown","2be04b2b":"markdown","a265944f":"markdown","93a34cde":"markdown","9ceb6c28":"markdown","550e4c35":"markdown","10b7ceeb":"markdown","d1e9b0b0":"markdown","bfaefda8":"markdown","9f8c8cfd":"markdown","2aa0499b":"markdown","8f5be737":"markdown","b5a3dc2f":"markdown","939cf21e":"markdown","02d78da1":"markdown","9b669c47":"markdown","0ec26f1f":"markdown","4da6da47":"markdown"},"source":{"41475a2f":"pip install pyforest","77334d7a":"from pyforest import *","7cedc5d2":"df = pd.read_csv(\"..\/input\/titanic\/train_and_test2.csv\")","8c2bb988":"sns.distplot(df.Age)","82de99d5":"active_imports()","c93c3074":"# the following command will list all magic commands\n\n%lsmagic","f9175306":"%time?","728168c1":"%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.plot([1,1.6,3])","9d9d4663":"%matplotlib notebook\n%matplotlib notebook\n#calling it a second time may prevent some graphics errors\nimport matplotlib.pyplot as plt\nplt.plot([1,1.6,3])","249eba73":"%%time\nimport time\nfor _ in range(1000):\n time.sleep(0.01) # sleep for 0.01 seconds\n","9f4dd520":"import numpy\n\n%timeit numpy.random.normal(size=100)","8952cf79":"import ipywidgets as widgets\nprint(dir(widgets))","346aac6c":"from ipywidgets import interact\nprint(type(interact))","7ad671cf":"def my_function(x):\n    return x\n# create a slider\ninteract(my_function, x=20)","24f1d334":"interact(my_function, x=True)","a93fb10c":"interact(my_function, x='Jupyter Notebook!')","923439a0":"pip install jupyterthemes","22dbf933":"# available themes can be shown with the following command\n!jt -l","b78efff9":"pip install pydataset","f947ef3e":"from pydataset import data\nquakes = data('quakes')\nquakes.head()\nquakes.tail()","de80a2da":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","cb12f0a4":"from pydataset import data\nquakes = data('quakes')\nquakes.head()\nquakes.tail()","e9eab001":"?numpy","70f280f8":"from IPython.display import display","5f91f610":"from IPython.display import display_pretty, display_html, display_jpeg, display_png,\\\n                            display_json, display_latex, display_svg","3c8a0a94":"from IPython.display import Image","4ce4f4fc":"Image(url='http:\/\/python.org\/images\/python-logo.gif')","f9f20ed8":"from IPython.display import HTML","4dc77187":"s = \"\"\"<table>\n<tr>\n<th>Header 1<\/th>\n<th>Header 2<\/th>\n<\/tr>\n<tr>\n<td>row 1, cell 1<\/td>\n<td>row 1, cell 2<\/td>\n<\/tr>\n<tr>\n<td>row 2, cell 1<\/td>\n<td>row 2, cell 2<\/td>\n<\/tr>\n<\/table>\"\"\"","a62064e3":"h = HTML(s); \n\nh","fca3b712":"from IPython.display import HTML\nHTML('<iframe src=https:\/\/en.wikipedia.org\/wiki\/Wikipedia width=700 height=350><\/iframe>')","f4adf21d":"from IPython.display import Math\nMath(r'F(k) = \\int_{-\\infty}^{\\infty} f(x) e^{2\\pi i k} dx')","b1ec55b2":"from IPython.display import Latex\nLatex(r\"\"\"\\begin{eqnarray}\n\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} & = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\\n\\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\\n\\nabla \\cdot \\vec{\\mathbf{B}} & = 0 \n\\end{eqnarray}\"\"\")","cc4eda84":"%%latex\n\\begin{aligned}\n\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} & = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\\n\\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\\n\\nabla \\cdot \\vec{\\mathbf{B}} & = 0\n\\end{aligned}","4f76586f":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 1, 1000)**1.5\nplt.hist(x)","224c448a":"# By adding a semicolon at the end, the output is suppressed\nplt.hist(x);","36d84db9":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","578d745a":"df = pd.read_csv('\/kaggle\/input\/titanic\/train_and_test2.csv')\n","106928f5":"import pandas_profiling as pp\n\npp.ProfileReport(df)","9999a143":"# importing packages \nimport pandas as pd\nimport numpy as np\n  \n# creating some data \na = np.array([\"foo\", \"foo\", \"foo\", \"foo\", \n                 \"bar\", \"bar\", \"bar\", \"bar\", \n                 \"foo\", \"foo\", \"foo\"], \n                dtype=object) \n  \nb = np.array([\"one\", \"one\", \"one\", \"two\", \n                 \"one\", \"one\", \"one\", \"two\", \n                 \"two\", \"two\", \"one\"], \n                dtype=object) \n  \nc = np.array([\"dull\", \"dull\", \"shiny\", \n                 \"dull\", \"dull\", \"shiny\", \n                 \"shiny\", \"dull\", \"shiny\", \n                 \"shiny\", \"shiny\"], \n                dtype=object) \n  \n# form the cross tab \npd.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c']) ","083a0a8a":"- We can see that both the statements have been executed.","42208285":"### **%matplotlib notebook**\n\n\n- **%matplotlib notebook** will lead to interactive plots embedded within the notebook. \n- We can zoom and resize the figure as shown below.","4ae55d16":"- We can see that `Pandas Profiling` is really helpful in generating a detailed exploratory analysis report.","669b65c4":"- A backend should be set before importing pyplot in jupyter. \n- Or in other words, after changing the backend, pyplot needs to be imported again.\n- Therefore call **%matplotlib ...** prior to importing pyplot.","d79c7fd4":"- We can see that only the last statement has been executed. We can change this behaviour of Jupyter notebooks.","c12a7bfb":"## **4.1 Creation of Widgets**<a class=\"anchor\" id=\"4.1\"><\/a>","a83f4832":"- We can play around with this widget as well by just checking and un-checking the checkbox. We will see its state change and the output from the function call will also get printed on-screen.","3fcda57a":"- Pandas makes use of this capability to allow DataFrames to be represented as HTML tables.","d31ce514":"### **4.1.1 Slider Widget**<a class=\"anchor\" id=\"4.1.1\"><\/a>\n\n\n- There are a number of methods for creating widgets in Jupyter Notebook. \n\n- The first and easiest method is by using the interact function from **ipywidgets.interact** which will automatically generate user interface controls (or widgets) that we can then use to explore our code and interact with data.\n\n- We can create a simple slider with the following lines of code.","25e20b2b":"### **2.1.2 Cell Magics**<a class=\"anchor\" id=\"2.1.2\"><\/a>\n\n- They have **%% character** prefix. Unlike line magic functions, they can operate on multiple lines below their call. \n\n- **%% prefix** allows the command to operate over an entire cell.\n\n- They can in fact make arbitrary modifications to the input they receive, which need not even be a valid Python code at all. They receive the whole block as a single string.","a733969a":"Let's check the libraries that are imported.","37ac6972":"# **10. Visualize images with IPython**<a class=\"anchor\" id=\"10\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n- In Python, objects can declare their textual representation using the `__repr__` method. \n- IPython expands on this idea and allows objects to declare other, richer representations including:\n\n  - HTML\n  - JSON\n  - PNG\n  - JPEG\n  - SVG\n  - LaTeX\n  \n- A single object can declare some or all of these representations; all are handled by IPython's display system. \n- In this section, we will discuss how you can use this display system to incorporate a broad range of content into your Notebooks.\n","3ee303ff":"### **Notes on sizes**\n\n- notebook and ipympl create resize-able plots (suposedly, we actually am missing resizing in ipympl).\n\n- When using %matplotlib inline or mpld3 you should adjust figure size using the code below-\n\n- `plt.rcParams['figure.figsize'] = [9.5, 6] `\n\n- The params are in the order width then height\u2026","b3a29f32":"- We can see that crosstab() has created a nice frequency table of the factors.","34eca467":"- Please see the [Jupyter Notebook Cheat Sheet](https:\/\/www.edureka.co\/blog\/wp-content\/uploads\/2018\/10\/Jupyter_Notebook_CheatSheet_Edureka.pdf) for more information.\n\n- You can also see this [Cheatography](https:\/\/cheatography.com\/weidadeyue\/cheat-sheets\/jupyter-notebook\/pdf_bw\/) on the shortcuts.\n\n- For a full list of keyboard shortcuts, click the help button, then the keyboard shortcuts button.","cd405800":"<a class=\"anchor\" id=\"0.1\"><\/a>\n# **Table of Contents**\n\n\n- [1. Import necessary DS libraries using Pyforest ](#1)\n- [2. Jupyter Magic Commands](#2)\n- [3. rpy2: R and Python in the same Jupyter Notebook](#3)\n- [4. Jupyter Widgets](#4)\n- [5. Jupyter Themes](#5)\n- [6. Sharing Jupyter Notebooks](#6)\n- [7. Jupyter Notebook - Keyboard Shortcuts](#7)\n- [8. Pretty Display of Variables](#8)\n- [9. Quick Access to Documentation](#9)\n- [10.Visualize images with IPython](#10)\n- [11.Visualize html files, external sites and LaTex with IPython](#11)\n- [12.Python Debugging with Pdb](#12)\n- [13.Suppress output of a final function](#13)\n- [14.Speed up EDA with Pandas Profiling](#14)\n- [15.Cross tabulation with Pandas Crosstab() function](#15)\n\n    \n   ","593ea9b8":"- With the `Latex` class, we have to include the delimiters ourselves. This allows us to use other LaTeX modes such as eqnarray:","d339a455":"# **6. Sharing Jupyter Notebooks**<a class=\"anchor\" id=\"6\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n- The easiest way to share the notebook is simply using the notebook file (.ipynb). There are other options also available.\n\n- Convert notebooks to html files using the File > Download as > HTML Menu option.\n- Upload your .ipynb file to [Google Colab](https:\/\/colab.research.google.com\/notebooks\/intro.ipynb).\n- Share the notebook file with [gists](https:\/\/gist.github.com\/) or on github, both of which render the notebooks. \n- Store the notebook e.g. in dropbox and put the link to [nbviewer](https:\/\/nbviewer.jupyter.org\/). nbviewer will render the notebook from whichever source you host it.\n- Use the File > Download as > PDF menu to save your notebook as a PDF.","5758f958":"# **14. Speed up EDA with Pandas Profiling**<a class=\"anchor\" id=\"14\"><\/a>\n\n[Table of Contents](#0.1)\n\n- `Pandas profiling` is an open source Python module with which we can quickly do an exploratory data analysis with just a few lines of code. \n-  In short, what pandas profiling does is save us all the work of visualizing and understanding the distribution of each variable.\n- For more information on `pandas profiling`, please see my other kernel - [EDA is fun](https:\/\/www.kaggle.com\/prashant111\/eda-is-fun)","a923931b":"## **11.1 HTML files** <a class=\"anchor\" id=\"11.1\"><\/a>\n\n\n- Python objects can declare HTML representations that will be displayed in the Notebook. If we have some HTML files, we want to display, simply use the HTML class.","55b3ce78":"# **4. Jupyter Widgets**<a class=\"anchor\" id=\"4\"><\/a>\n\n[Table of Contents](#0.1)\n\n- The Jupyter Notebook has a feature known as **widgets**. In the Jupyter Notebook, we can create sliders, buttons, text boxes and much more. So, they are basically the controls that make up the user interface. \n\n- We can see some pre-made widgets by going to the following url:\n\n  http:\/\/jupyter.org\/widgets\n  \n  \n- Formally, a widget can be defined as follows:-\n\n  - *A widget is used to create an interactive graphical user interface for your user. The widgets synchronize stateful and stateless information between Python and Javascript.*\n\n- So, a widget is an `eventful python object` that in the case of Jupyter Notebook, resides in the browser and is a user interface element, such as a slider or textbox. \n\n- Jupyter supports a fairly wide array of widgets including the following:\n  - Numeric\n  - Boolean\n  - Selection\n  - String\n  - Image\n  - Button\n  - Output\n  - Animation\n  - Date picker\n  - Color picker\n  - Controller (i.e. game controller)\n  - Layout\n  \n- For a full list on widgets, we can check out the [Widget List](https:\/\/ipywidgets.readthedocs.io\/en\/stable\/examples\/Widget%20List.html) documentation.\n\n- We can run the following code in our notebook to see the complete list of widgets.","9ba7fb30":"### **2.2.2 %time, %%time and %timeit** <a class=\"anchor\" id=\"2.2.2\"><\/a>\n\n\n- The above magic commands tell us how much time our code needs to run.\n\n- **%%time** is a very useful cell magic command.\n\n- It is a fast way to benchmark our code and to know how much time is required by the code to run.\n\n- **%%time** will give us information about a single run of the code in the cell as follows:-","f3864565":"- First of all, we need to install [jupyterthemes](https:\/\/github.com\/dunovank\/jupyter-themes) with pip:","811a2d7f":"## **The solution is Pyforest**\n\n###### Pyforest offers the following solution as follows\n\n- We can use all our libraries like we usually do. If a library is not imported yet, pyforest will import it first and add the import statement to the first Jupyter cell.\n\n- Only those libraries are imported which are actually required.\n\n- We don't have to waste time on imports.\n\n\n###### But, first of all we have to install pyforest ","01b72d90":"# **15. Cross-tabulation with Pandas crosstab() function**<a class=\"anchor\" id=\"15\"><\/a>\n\n[Table of Contents](#0.1)\n\n- The `Pandas crosstab()` function is used to compute a simple cross tabulation of two (or more) factors. By default, it computes a frequency table of the factors unless an array of values and an aggregation function are passed.\n\n- For more information, see the official documentation [Pandas crosstab](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.crosstab.html)","6465070e":"- When we run this code, we can find that interact generates a textbox with the string we passed in as its value.","bf93472b":"# **8. Pretty Display of Variables**<a class=\"anchor\" id=\"8\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n- By finishing a Jupyter cell with the name of a variable or unassigned output of a statement, Jupyter will display that variable without the need for a print statement. This is especially useful when dealing with Pandas DataFrames, as the output is neatly formatted into a table.","1e2ecb0e":"Hello friends,\n\n\nIn this notebook, I will share simple Data Science hacks that will make your life easier. They will help you to write your code efficiently and save you lots of time. I hope you will enjoy these hacks. I have provided plenty of links to gain more information about these hacks at appropriate places.\n\nSo, let's dive in.","629a71c1":"# **7. Jupyter Notebook - Keyboard Shortcuts**<a class=\"anchor\" id=\"7\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n- Keyboard shortcuts will save us lots of time. \n- Jupyter stores a list of keybord shortcuts under the menu at the top: **Help > Keyboard Shortcuts**, or by pressing **H** in command mode.\n- Another way to access keyboard shortcuts is to use the command palette: `Cmd + Shift + P (or Ctrl + Shift + P on Linux and Windows)`. \n- This dialog box helps us to run any command by name. It is useful if we don\u2019t know the keyboard shortcut for an action or if we want to do does not have a keyboard shortcut. ","3a6f42db":"- Please see the following documentation for more information on jupyter widgets.\n\n  - https:\/\/www.blog.pythonlibrary.org\/2018\/10\/24\/working-with-jupyter-notebook-widgets\/\n  \n  - https:\/\/www.blog.pythonlibrary.org\/2018\/10\/23\/creating-jupyter-notebook-widgets-with-interact\/","a9f428ed":"- This new library **Pyforest** can reduce the set of above codes to one single code. Now, we can import most of the libraries using a single line of code of Pyforest.\n\n- Single line of code to import all python libraries is as follows:-","02d18a66":"## **2.1 Types of Magic Commands**<a class=\"anchor\" id=\"2.1\"><\/a>\n\n\nThere are two types of magic commands \u2212\n\n- 1. Line magics\n- 2. Cell magics","5d9cb937":"## **Using Pyforest**\n\n- Now, we can use our favorite Python Data Science commands without importing the python libraries.\n\n- For example, if you want to read a CSV file with pandas, we can do it as follows:-","260e7f23":"- You can check the documentation for [Built-in magic commands](https:\/\/ipython.readthedocs.io\/en\/stable\/interactive\/magics.html) for complete reference.\n\n- Below, we will discuss several important magic commands. \n\n- But first let's discuss the types of magic commands.","0825cfdb":"- The available themes are given below:-\n\n  - onedork\n  - grade3\n  - oceans16\n  - chesterish\n  - monokai\n  - solarizedl\n  - solarizedd\n  \n - Screens of the available themes are also available in the [Github repository](https:\/\/github.com\/dunovank\/jupyter-themes).","bec43204":"- We can see that, we have used pandas and seaborn without actually importing them. That's how we use **Pyforest.**\n\n- Source : https:\/\/github.com\/8080labs\/pyforest","b13cf5ad":"- For more information on visualize images with IPython, please visit the following links:-\n\n\n- [IPython's Rich Display System](https:\/\/nbviewer.jupyter.org\/github\/ipython\/ipython\/blob\/1.x\/examples\/notebooks\/Part%205%20-%20Rich%20Display%20System.ipynb)\n\n- [IPython API - Module : display](https:\/\/ipython.readthedocs.io\/en\/stable\/api\/generated\/IPython.display.html)\n\n- [How to display objects as images in IPython](https:\/\/www.tjelvarolsson.com\/blog\/how-to-display-objects-as-images-in-ipython\/)","94fc65a5":"## **2.2 Commonly used Magic Commands**<a class=\"anchor\" id=\"2.2\"><\/a>\n\n\n- Now, I will discuss two of the most commonly used magic commands as given below:-","c75d831a":"- Or we can enter latex directly with the %%latex cell magic:","2808be58":"### **Some of the commonly used shortcuts are given below:**\n\n- `Esc` will take us into the command mode where we can navigate around the notebook with arrow keys.\n- While in command mode:\n  - `A` to insert a new cell above the current cell, `B` to insert a new cell below.\n  - `M` to change the current cell to Markdown, `Y` to change it back to code.\n  - `D + D` (press the key twice) to delete the current cell.\n- `Enter` will take you from command mode back into edit mode for the given cell.\n- `Shift + Tab` will show you the Docstring (documentation) for the the object you have just typed in a code cell \u2013 you can keep pressing this short cut to cycle through a few modes of documentation.\n- `Ctrl + Shift + -` will split the current cell into two from where your cursor is.\n- `Esc + F` Find and replace on your code but not the outputs.\n- `Esc + O` Toggle cell output.\n- Select Multiple Cells:\n  - `Shift + J` or `Shift + Down` selects the next sell in a downwards direction. We can also select cells in an upwards direction by using `Shift + K` or `Shift + Up`.\n  - Once cells are selected, we can then delete \/ copy \/ cut \/ paste \/ run them as a batch. This is helpful when you need to move parts of a notebook.\n  - We can also use `Shift + M` to merge multiple cells.","3ae79468":"# **5. Jupyter Themes**<a class=\"anchor\" id=\"5\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n- Jupyter themes are a great way to beautify our notebooks and get a dark mode, which is popular among programmers.\n\n- Themes are the combination of background colour,style, text etc. So, they can be used to change not only background colour but also the style of the text. Besides, we can also customise the text in markdown, pandas\u2019 dataframe font size, cell width and height, cursor colour, visibility of toolbar and more. \n\n- Furthermore, we can set the plotting style with `jtplot.style()` to beautify our visualisations generated with matplotlib. One can also mould figure properties like grid, spines and more.\n\n","c503dbc5":"# **11. Visualize html files, external sites and LaTeX with IPython** <a class=\"anchor\" id=\"11\"><\/a>\n\n[Table of Contents](#0.1)","e86bddfc":"### **2.2.1 %matplotlib inline and %matplotlib notebook** <a class=\"anchor\" id=\"2.2.1\"><\/a>\n\n\n### **%matplotlib inline**\n\n- **%matplotlib inline** magic command is the most popular command. This command allows Jupyter notebook to display matplotlib graphs in notebooks. This command activates matplotlib interactive support for the jupyter notebooks.\n\n- **%matplotlib inline** sets the backend of matplotlib to the `inline` backend. With this backend, the output of plotting commands is displayed inline within frontends like the Jupyter notebook, directly below the code cell that produced it. The resulting plots will then also be stored in the notebook document.\n\n- The **%matplotlib inline** magic command allows us to visualize graph inside jupyter notebook.\n\n- **%matplotlib inline** - only draw static images in the notebook.","98f53b1a":"## **4.2 Closing of Widgets**<a class=\"anchor\" id=\"4.2\"><\/a>\n\n- We can close a widget by calling its `close()` method. If we want to remove the widget, just clear the cell.","902372e2":"# **2. Jupyter Magic Commands**<a class=\"anchor\" id=\"2\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n- I am sure all of us know about **Jupyter Notebooks** and **Jupyter Magic Commands**. This section is just a bit of recap. In case, you have not heard about it, you will find this section very important and it will increase your productivity.\n\n- Jupyter notebook is formerly known as **IPython notebook**. It is a flexible tool, that helps to create powerful machine learning analysis. They are based on IPython kernel and so it has access to all the magics from the IPython kernel.\n\n- We can list all the magic commands as follows:-","277079ce":"- In the above code block, we import the interact class from ipywidgets. Then we create a simple function called my_function that accepts a single argument and then returns it. Finally we instantiate interact by passing it a function along with the value that we want interact to pass to it. Since we passed in an integer (i.e. 20), the interact class will automatically create a slider.\n\n- We can move the slider around with our mouse. We can see that the slider updates interactively and the output from the function is also automatically updated.","7efe7c5b":"- **%timeit** ( or cell version **%%timeit**) uses the Python [timeit module](https:\/\/docs.python.org\/3.5\/library\/timeit.html) which runs a statement 100,000 times (by default) and then provides the mean of the fastest three times.","fe731ce1":"- For more information on Python Debugging with pdb, see the official documentation - [pdb-The Python Debugger](https:\/\/docs.python.org\/3.5\/library\/pdb.html)","fe156f86":"- Please see the [notebook](https:\/\/nbviewer.jupyter.org\/github\/ipython\/ipython\/blob\/1.x\/examples\/notebooks\/Part%205%20-%20Rich%20Display%20System.ipynb) for more information.","7cc3dd80":"- Please see the Matplotliob documentation on backends for more information\n- Source : \n- https:\/\/matplotlib.org\/tutorials\/introductory\/usage.html#backends\n- https:\/\/stackoverflow.com\/questions\/3285193\/how-to-change-backends-in-matplotlib-python\n- https:\/\/stackoverflow.com\/questions\/43545050\/using-matplotlib-notebook-after-matplotlib-inline-in-jupyter-notebook-doesnt","661023cd":"### **4.1.3 Textboxes**<a class=\"anchor\" id=\"4.1.3\"><\/a>\n\n- We can create textboxes with the following lines of code.","d0fc6f99":"# **9. Quick Access to Documentation**<a class=\"anchor\" id=\"9\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n- We can search for the online documentation for common libraries including NumPy, Pandas, SciPy and Matplotlib. That's a time taking task.\n\n- Luckily, we have a shortcut for that. By prepending a library, method or variable with ?, we can access the docstring for help or quick reference on syntax.\n\n- For example, we can access the documentation of numpy as follows:-","7157a9af":"### **2.1.1 Line Magics**<a class=\"anchor\" id=\"2.1.1\"><\/a>\n\n- They are similar to command line calls. They start with the **% character**. \n\n- **% prefix** represents that the command operates over a single line of code. \n\n- Rest of the line is its argument passed without parentheses or quotes. \n\n- Line magics can be used as expression and their return value can be assigned to a variable.","30cef455":"## **10.2 Images**<a class=\"anchor\" id=\"10.2\"><\/a>\n\n\n- To work with images (JPEG, PNG), we can use the Image class as follows:-","35b7179b":"- We can restore the default theme with the following command\n\n   - `jt -r`","760017c7":"- Now, we can set the theme with the following command:\n\n  - `jt -t <theme-name>`\n  \n- I am not running this command, as it will change the theme.","f5040edb":"- Thus, we will come to the end of this notebook. I hope you find this notebook useful and enjoyable.\n\n- If you have more tips and tricks up your sleeve, then please share it with the community.\n\n- Your comments and feedback are most welcome.\n\n- Thank you\n","66cc7c12":"## **11.2 External sites** <a class=\"anchor\" id=\"11.2\"><\/a>\n\n\n- We can even embed an entire page from another site in an iframe.\n\n- For example, this is today's Wikipaedia main page.\n","2be04b2b":"- We can alter or modify the `ast_note_interactivity` kernel option to make Jupyter do this for any variable or statement on its own line. So, we can see the value of multiple statements at once.","a265944f":"<a class=\"anchor\" id=\"0\"><\/a>\n# **15 Data Science hacks to speed up analysis**\n\n\nPrashant Banerjee\n\nNovember 2020","93a34cde":"- Important points:\n\n  - Calling display on an object will send all possible representations to the Notebook.\n  - These representations are stored in the Notebook document.\n  - In general the Notebook will use the richest available representation.\n  \n- If ywe want to display a particular representation, there are specific functions for that:","9ceb6c28":"- We can see that, by adding a semicolon at the end, the output is suppressed.","550e4c35":"# **3. rpy2: R and Python in the same notebook** <a class=\"anchor\" id=\"3\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n- We all know about Python and R. They are the most popular open source programming languages preferred by data scientists all over the world.\n\n- R is primarily used for statistical data analysis while Python is the first choice for first time programmers for easy to use code.\n\n- We can use both of them in a single Jupyter Notebook. \n\n- We just need to install [rpy2](https:\/\/pypi.org\/project\/rpy2\/). It can be easily done with the pip command as follows:-\n  - `pip install rpy2`\n  \n\n- Or, we can use the following command:-\n\n  - `conda install rpy2`\n\n","10b7ceeb":"- To know more about magic functions, the built-in magics and their docstrings, we can use the magic command suffixed by a **?**.\n- Information of a specific magic function is obtained by **%magicfunction?** command. \n- For example, we can obtain information about the magic command **%time** as follows:- ","d1e9b0b0":"# **12. Python Debugging with pdb**<a class=\"anchor\" id=\"12\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n- Python's standard library contains [pdb module](https:\/\/docs.python.org\/3.5\/library\/pdb.html) which is a set of utilities for debugging of Python programs. We can view a [list of accepted commands](https:\/\/docs.python.org\/3.5\/library\/pdb.html#debugger-commands) for pdb [here](https:\/\/docs.python.org\/3.5\/library\/pdb.html#debugger-commands).\n\n- The debugging functionality is defined in a Pdb class. The module internally makes used of bdb and cmd modules.\n\n- The pdb module has a very convenient command line interface. It is imported at the time of execution of Python script by using \u2013m switch","bfaefda8":"## **11.3 LaTeX** <a class=\"anchor\" id=\"11.3\"><\/a>\n\n\n- The display of mathematical expressions typeset in [LaTeX](https:\/\/www.latex-project.org\/about\/) has also been supported. \n- It is possible due to the [MathJax](https:\/\/www.mathjax.org\/) library.","9f8c8cfd":"# **13. Suppress output of a final function**<a class=\"anchor\" id=\"13\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n- Sometimes, we want to suppress the output of the function on a final line.\n- It is useful when plotting.\n- To do this, we just need to add a semicolon at the end.","2aa0499b":"## **10.1 Basic display imports**<a class=\"anchor\" id=\"10.1\"><\/a>\n\n- The `display` function is a general purpose tool for displaying different representations of objects. \n\n- We can think of it as print for these rich representations.","8f5be737":"[Go to Top](#0)","b5a3dc2f":"## **Pyforest Installation.**\n\n\n- Terminal installation of pyforest.","939cf21e":"# **16. References**<a class=\"anchor\" id=\"16\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nThe ideas and concepts in this notebook have been taken from the following website-\n\n- https:\/\/www.dataquest.io\/blog\/jupyter-notebook-tips-tricks-shortcuts\/\n\n- https:\/\/www.analyticsvidhya.com\/blog\/2019\/08\/10-powerful-python-tricks-data-science\/\n\n- https:\/\/courses.analyticsvidhya.com\/courses\/data-science-hacks-tips-and-tricks?utm_source=hacksandtipsbanner&utm_medium=blog\n\n- https:\/\/www.marktechpost.com\/2019\/09\/19\/pyforest-importing-python-data-science-libraries-in-one-line-of-code\/\n\n","02d78da1":"### **4.1.2 Checkboxes**<a class=\"anchor\" id=\"4.1.2\"><\/a>\n\n\n- We can add a new cell in the Jupyter Notebook with the following code:","9b669c47":"### **Other useful magic commands**\n\n- Below is a table of other useful Jupyter notebook magic commands.\n\n- Magic command\t-  Result\n- **%pwd**      -  Print the current working directory\n- **%cd**\t    -  Change the current working directory\n- **%ls**       -  List the contents of the current directory\n- **%history**  -  Show the history of the In [ ]: commands","0ec26f1f":"# **1. Import necessary DS libraries using Pyforest**<a class=\"anchor\" id=\"1\"><\/a>\n\n[Table of Contents](#0.1)\n\n- Generally, the Data Science work will start by importing the required Python libraries (assuming that you write your code in Python). Many different libraries like `pandas`,`numpy`,`matplotlib`,`seaborn` or `sklearn` are required to do the work. To import these libraries, different lines of codes are required as follows:-\n\n#### **import pandas, matplotlib, seaborn and numpy**\n\n-`import pandas as pd`\n\n-`import numpy as np`\n\n-`import matplotlib.pyplot as plt`\n\n-`import seaborn as sns`\n\n\n- Now, everytime before you can start with the actual work, you will have to import your libraries by writing the above lines of code. This is a boring and tedious task as we have to write the same lines of code again and again.\n\n- So, what is the solution ? \n","4da6da47":"- We can then use the two languages together, and even pass variables between them.\n\n- See the [rpy2 documentation](https:\/\/rpy2.github.io\/doc\/latest\/html\/index.html) for more information."}}