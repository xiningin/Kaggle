{"cell_type":{"bf719ea7":"code","29895289":"code","74d62685":"code","75d62474":"code","7a064dd8":"code","3c5ce770":"code","f8af78a6":"code","d2394870":"code","8b1c2c96":"code","526a3a16":"code","b8779526":"code","655ceca3":"code","b37213d3":"code","db9a476b":"code","6fb2b78b":"code","68063209":"code","2cc215e3":"code","6c518f23":"code","5f71fffd":"code","d2380cab":"code","8a2bcda1":"code","3ddb1da2":"code","bb713dc4":"code","b0420517":"code","a2314af6":"markdown","a102f874":"markdown","e2c6714a":"markdown","9db10df4":"markdown","17568687":"markdown","aa76d35a":"markdown","5504b0b5":"markdown","1b8283e8":"markdown","6504b28e":"markdown","85ab5fa9":"markdown","80af6910":"markdown","f6759eae":"markdown","6abf4547":"markdown"},"source":{"bf719ea7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n#recovered = recovered.fillna('unknow')\n#deaths = deaths.fillna('unknow')\nimport numpy as np \nimport pandas as pd \n\n# Visualisation libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nfrom plotly.offline import init_notebook_mode, iplot \nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport pycountry\npy.init_notebook_mode(connected=True)\nimport folium \nfrom folium import plugins","29895289":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","74d62685":"import pandas as pd\nnCoV_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv\")\nCOVID19_line_list_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv\")\nCOVID19_open_line_list = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv\")\ncovid_19_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ntime_series_covid_19_confirmed = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\ntime_series_covid_19_deaths = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")\ntime_series_covid_19_recovered = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")","75d62474":"df=time_series_covid_19_confirmed ","7a064dd8":"# take latitude and longitude to plot maps. \nfeatures=['Lat', 'Long', 'Country\/Region']\ndf=df[features]\ndf = df.rename(columns={'Country\/Region': 'Country'})\ndf.head()","3c5ce770":"# Reading more data\ndata= pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv\")\ndata.head()","f8af78a6":"#Remove nan-values in strings\nConfirmed = data.fillna('unknow')\nRecovered = data.fillna('unknow')\nDeaths = data.fillna('unknow')\ndata['Province\/State'] = data['Province\/State'].fillna('unknow')","d2394870":"data.isnull().sum()","8b1c2c96":"#how many are confirmed\n\n#copy data \ndata1=data.copy()\nNumber_of_countries = len(data1['Country'].value_counts())\n\n#group country and confirmed\ncases = pd.DataFrame(data1.groupby('Country')['Confirmed'].sum())\ncases['Country'] = cases.index\ncases.index=np.arange(1,Number_of_countries+1)\n\n# sort and pint new dataframe\nglobal_cases = cases[['Country','Confirmed']]\nglobal_cases.sort_values(by=['Confirmed'],ascending=False)\nglobal_cases.head()","526a3a16":"# Merging the coordinates with dataframe (data)\nworld_data = pd.merge(df,global_cases,on='Country')\nworld_data.head()","b8779526":"# create map and display how many got coronavirus with folium\nworld_map = folium.Map(location=[10, -20], zoom_start=1,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(world_data['Lat'], world_data['Long'], world_data['Confirmed'], world_data['Country']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(world_map)\n#print map\nworld_map\n\n","655ceca3":"#make a heatmap\n\nimport folium\nfrom folium import Choropleth, Marker\nfrom folium.plugins import HeatMap, MarkerCluster\nm = folium.Map(location=[40, -70], zoom_start=1) \ndef embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='750px')\n\n\n# Add a heatmap to the base map\nHeatMap(data=world_data[['Lat', 'Long']], radius=11).add_to(m)\n\n# Show the map\nembed_map(m, \"q_1.html\")","b37213d3":"# Merging a coordinates dataframe with the original dataframe\nworld_model = pd.merge(df,data,on='Country')\nworld_model.head()","db9a476b":"#print the country column\ndata['Country']","6fb2b78b":"data.columns","68063209":"from sklearn.preprocessing import LabelEncoder\n# creating initial dataframe\nbridge_types = ('Sno', 'Date', 'Province\/State', 'Country', 'Last Update', 'Confirmed',\n       'Deaths', 'Recovered')\ncountries = pd.DataFrame(data, columns=['Country'])\n# creating instance of labelencoder\nlabelencoder = LabelEncoder()\n# Assigning numerical values and storing in another column\ndata['Countries'] = labelencoder.fit_transform(data['Country'])\ndata['Countries'].head()","2cc215e3":"#print the whole dataset with the countries as a new column as label encoded\ndata.head()","6c518f23":"from sklearn.model_selection import train_test_split\n\n# Read the data\nX = data.copy()\n#using the same data as testing is usally a bad idea, but this kernel is \n#just a concept but it whould be better to split them up.\nX_test_full = data.copy()\n\n\n# Remove rows with missing target, separate target from predictors\nX.dropna(axis=0, subset=['Recovered'], inplace=True)\ny = X.Recovered              \nX.drop(['Country'], axis=1, inplace=True)\nX.drop(['Date'], axis=1, inplace=True)\nX.drop(['Sno'], axis=1, inplace=True)\nX.drop(['Province\/State'], axis=1, inplace=True)\nX.drop(['Last Update'], axis=1, inplace=True)  \n    \n    # Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\nlow_cardinality_cols = [cname for cname in X_train_full.columns if X_train_full[cname].nunique() < 10 and \n                        X_train_full[cname].dtype == \"object\"]\n# Low cardinality means that the column contains a lot of \u201crepeats\u201d in its data range.\n# Examples of categorical variables are race, sex, age group, and educational level. \n# While the latter two variables may also be considered in a numerical manner by using exact values for age \n# and highest grade completed\n# nunique() function to find the number of unique values over the column axis. So when it finds over 10 uniqe \n# values and the cname is a \n# dtype 'object' which means Data type objects are useful for creating structured arrays. # A structured array is the one which contains different types of data.\n\n### one line meaning of above####\n## for cname in a dataframes column shall return a value to 'low_cardinality_cols' if there are more then 10 uniqe values\n## and the dtype shall be a object which is a structured array that can have different types of data (lik; int, float string ect.)\n\n\n# Select numeric columns\nnumeric_cols = [cname for cname in X_train_full.columns if X_train_full[cname].dtype in ['int64', 'float64']]\n### for cname (every value, one at the time) in dataframe for columns return a value to 'numeric_cols' if the \n### dtype= int64 or float64. \n\n\nmy_cols = low_cardinality_cols + numeric_cols\n# Keep selected columns onlymy_cols = low_cardinality_cols + numeric_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()\n\n# One-hot encode the data (to shorten the code, we use pandas)\nX_train = pd.get_dummies(X_train)\nX_valid = pd.get_dummies(X_valid)\nX_test = pd.get_dummies(X_test)\nX_train, X_valid = X_train.align(X_valid, join='left', axis=1)\nX_train, X_test = X_train.align(X_test, join='left', axis=1)","5f71fffd":"X_train.head()","d2380cab":"y.head()","8a2bcda1":"# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\n#from xgboost import XGBRegressor\n\n\n\nmodel2 = RandomForestClassifier(n_estimators=150, max_depth=4, random_state=1)\nmodel = GradientBoostingClassifier(random_state=1)\nmodel3 = DecisionTreeClassifier(max_depth=3, random_state=1)\n#model=SGDClassifier(random_state=1)\n#model=ExtraTreesClassifier(random_state=1)\n#model = XGBRegressor()\n# Define the models\nmodel_1 = RandomForestClassifier(n_estimators=50, random_state=0)\nmodel_2 = RandomForestClassifier(n_estimators=100, random_state=0)\nmodel_3 = RandomForestClassifier(n_estimators=200, min_samples_split=20, random_state=0)\nmodel_4 = RandomForestClassifier(n_estimators=300, max_depth=6, random_state=1)\n\n\n\nmodel.fit(X_train, y_train)\ny_predictions = model.predict(X_valid)\n\nprint('model accuracy score',model.score(X_valid,y_valid))","3ddb1da2":"y_test=y_valid\nX_test=X_valid","bb713dc4":"model2.fit(X_train,y_train)\nprint(f'Model test accuracy: {model2.score(X_test, y_test)*100:.3f}%')\nmodel3.fit(X_train,y_train)\nprint(f'Model test accuracy: {model3.score(X_test, y_test)*100:.3f}%')","b0420517":"model_1.fit(X_train,y_train)\nprint(f'Model test accuracy: {model_1.score(X_test, y_test)*100:.3f}%')\nmodel_2.fit(X_train,y_train)\nprint(f'Model test accuracy: {model_2.score(X_test, y_test)*100:.3f}%')\nmodel_3.fit(X_train,y_train)\nprint(f'Model test accuracy: {model_3.score(X_test, y_test)*100:.3f}%')\nmodel_4.fit(X_train,y_train)\nprint(f'Model test accuracy: {model_4.score(X_test, y_test)*100:.3f}%')","a2314af6":"In this kernel we will plot maps to show the spead of coronavirus when the dataset was uploaded and we want to make a mashine learning model that finds what country you are in, with the knowdege about confirmed, deaths, recovered cases there are.","a102f874":"We want to use the countries, so we label encode them.","e2c6714a":"# Import data","9db10df4":"## Label encoding ","17568687":"The highst prediction was 89% but though it whould be more corret model, if there was used data, and the test and training data splittet up, though we use a validation split of 20%. This is way we dont think it is so bad.","aa76d35a":"# Import liberary","5504b0b5":"# Disclaimer! This kernel is only for educational purposes and made for fun therefor the content of the kernel should not be taken to seriously.","1b8283e8":"# Combining data ","6504b28e":"### Making the dataset that will be used in the training of a model","85ab5fa9":"# Model\/predition","80af6910":"# Prep for model","f6759eae":"### we want to find what country you are in with the knowdege about confirmed, deaths, recovered cases there are.","6abf4547":"![image.png](attachment:image.png)"}}