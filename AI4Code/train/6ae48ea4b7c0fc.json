{"cell_type":{"6a9f7fbf":"code","c0dafcf8":"code","fda52127":"code","a42ca277":"code","fc09422c":"code","843dad93":"code","5026b9dd":"code","9781008f":"code","5438bb50":"code","fb706b00":"code","a6c582d3":"code","958eac47":"code","ed849dbb":"code","49a8ad4b":"code","4ae81e32":"code","86146729":"code","8e9dc943":"code","5d58990b":"code","6b7e89eb":"code","abe4cfbf":"code","16f9ac79":"code","2ba93ab1":"code","1c98d97b":"code","efe0a809":"code","be4965ad":"code","be4c4ddc":"code","50685137":"code","205e722e":"code","84b0d926":"code","8cd301ce":"code","f75455c7":"code","e4f5ab30":"code","a5b34390":"code","b7b297fa":"code","3054ac50":"code","ee9e6646":"markdown"},"source":{"6a9f7fbf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\ndef load_data(path):\n    return pd.read_csv(path)\n\ndef transform():\n#     print(ds_train.shape)\n    ds_train.drop(columns = ['Name', 'Ticket'], inplace=True)\n    \n\n\n\n# ROOT CODE\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        if('train' in filename):\n            ds_train = load_data(os.path.join(dirname, filename))\n        elif('test' in filename):\n            ds_test = load_data(os.path.join(dirname, filename))\n            ds_test_bu = load_data(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c0dafcf8":"print('Train : ',ds_train.shape)\nprint('Test : ',ds_test.shape)","fda52127":"ds_train.info()","a42ca277":"# Remove unwanted columns\nds_train.drop(columns = ['PassengerId'], inplace=True)\nds_test.drop(columns = ['PassengerId'], inplace=True)","fc09422c":"# Check shape after column drop\nds_train.shape","843dad93":"ds_test.shape","5026b9dd":"ds_train['Sex'].value_counts()","9781008f":"# Converting sex to numeric values\n# ds_train['Male'] = np.where(ds_train['Sex']=='male', 1, 0)","5438bb50":"# ds_train['NamLen']  = [None if x ==None else len(x) for x in ds_train['Name']] ","fb706b00":"# ds_train['Cabin'].value_counts()","a6c582d3":"# ds_train['Deck'] = [None if x==None else str(str(x)[0]).upper() for x in ds_train['Cabin']]\n# ds_train['Deck'].value_counts()","958eac47":"def prep_data(df):\n    df['Male'] = np.where(df['Sex']=='male', 1, 0)\n    df['NamLen']  = [None if x ==None else len(x) for x in df['Name']] \n    df['Deck'] = [None if x==None else str(str(x)[0]).upper() for x in df['Cabin']]\n    return df","ed849dbb":"ds_train = prep_data(ds_train)","49a8ad4b":"ds_train.shape","4ae81e32":"# Co-relation Matrix\ncorr = ds_train.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","86146729":"ds_train.hist(bins=50, figsize=(20,15))","8e9dc943":"ds_train.round({'Age':0, 'Fare':0, })","5d58990b":"ds_train.info()","6b7e89eb":"y = ds_train[['Survived']]\nX = ds_train.drop('Survived', axis=1)\n\nprint('X shape :', X.shape)\nprint('y shape :', y.shape)","abe4cfbf":"from sklearn.base import BaseEstimator, TransformerMixin\n\nclass TitanicDataCatgorization(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        return\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X, y=None):\n        deck_dummies = pd.get_dummies(X['Deck'] ,prefix='deck', drop_first=True)\n        embarked_dummies = pd.get_dummies(X['Embarked'] ,prefix='embarked', drop_first=True)\n#         clarity_dummies = pd.get_dummies(X['clarity'] ,prefix='clarity', drop_first=True)\n        \n        X = pd.concat([X, deck_dummies, embarked_dummies], axis=1)\n        X.drop(['Deck', 'Embarked'], axis=1, inplace=True)\n        \n        return X","16f9ac79":"from sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\n\ncat_pipeline = Pipeline([\n    ('catrizer', TitanicDataCatgorization())\n])\n\ncat_pipeline_2 = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\nnum_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy=\"median\")),\n    ('std_scaler', StandardScaler())\n])\n\nfrom sklearn.compose import ColumnTransformer\n\nnum_attr = [\"Pclass\", \"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Male\", \"NamLen\"]\ncat_attr = [\"Embarked\", \"Deck\"]\n\nfull_pipeline = ColumnTransformer([\n        (\"num\", num_pipeline, num_attr),\n        (\"cat\", cat_pipeline_2, cat_attr),\n    ])","2ba93ab1":"X_p = full_pipeline.fit_transform(X)","1c98d97b":"X_p.shape","efe0a809":"def display_scores(score):\n    print(\"Scores:\",score)\n    print(\"Mean:\", score.mean())\n    print(\"Standard dviation:\", score.std())\n\nfrom sklearn.model_selection import cross_val_score\n\n# RANDOM FOREST\nfrom sklearn.ensemble import RandomForestClassifier\n\nforest_reg = RandomForestClassifier()\nforest_reg.fit(X_p, y)\n\nforest_reg_score = cross_val_score(forest_reg, X_p, y, scoring=\"neg_mean_squared_error\", cv=4)\nforest_reg_rmse_score = np.sqrt(-forest_reg_score)\n\ndisplay_scores(forest_reg_rmse_score)","be4965ad":"from sklearn.metrics import mean_squared_error\n\npredictions_training = forest_reg.predict(X_p)\n\ntrain_mse = mean_squared_error(y, predictions_training)\ntrain_rmse = np.sqrt(train_mse)\n\nprint(\"Training RMSE :\", train_rmse)","be4c4ddc":"ds_test.hist(bins=50, figsize=(20,15))","50685137":"ds_test.shape","205e722e":"# TEST\n\nX_test = prep_data(ds_test)\nX_test.info()","84b0d926":"X_test.shape","8cd301ce":"X_test_p = full_pipeline.transform(X_test)\nX_test_p.shape","f75455c7":"predictions_test = forest_reg.predict(X_test_p)","e4f5ab30":"predictions_test","a5b34390":"predict_ds = pd.DataFrame({'PassengerId': ds_test_bu['PassengerId'], 'Survived': predictions_test})","b7b297fa":"predict_ds.info()","3054ac50":"file_name='submission.csv'\npredict_ds.to_csv(file_name, encoding='utf-8', index=False)","ee9e6646":"**PIPELINE**"}}