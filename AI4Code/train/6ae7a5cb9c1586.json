{"cell_type":{"eab1d9d7":"code","d9434913":"code","010844f7":"code","577ce399":"code","413e0749":"code","6197c5b0":"code","86af26ba":"code","03b1f6b8":"code","22026ac6":"code","0bbe938f":"code","a17c0eb0":"code","77d56d89":"code","8a977ebf":"code","8c4b9dcb":"code","ed3fd2bd":"code","c72014be":"code","4f404caa":"code","14f0d1e4":"code","fcf4a6ec":"code","4d225697":"code","955e0fe8":"code","eb9c1e12":"code","9308b55b":"code","81b99b90":"code","1980ec8c":"code","5d866ac0":"code","9efd88ec":"code","a8922bbe":"code","1f2a21fc":"code","c36cb391":"code","e957cdd4":"code","b4229f10":"code","6d9d0836":"code","376f2596":"code","7a179bec":"code","266d57ab":"code","d60f630f":"code","8c91ab17":"code","a06e248a":"code","3a5ada8a":"code","5edf4787":"code","383a5b04":"code","b05b74aa":"code","ad7cc4b2":"code","1422cc0e":"code","c393b8a9":"code","f742ef3d":"code","baa72647":"code","bee26da5":"code","001d4072":"code","deb0cf42":"code","91619e8d":"code","1cf287bf":"code","fc204135":"code","0270f6c3":"code","d689bf5b":"code","96624c15":"code","a8b0b353":"code","4e0afe2a":"code","ce21f8a1":"code","ecafcda1":"code","22e29a69":"code","06e8c6a7":"code","000f6312":"code","f355306f":"code","1797654b":"code","87f831eb":"code","89490a60":"markdown","aeee4959":"markdown","2136cda6":"markdown","f8cf4cd2":"markdown","7eedd60c":"markdown","8f1cb5c7":"markdown","511aba72":"markdown","b8cef856":"markdown","065b0a73":"markdown","3a2e7a2d":"markdown","94ecd9e1":"markdown","73a7fee1":"markdown","bcbdac21":"markdown","700c4950":"markdown","eb0e6fb3":"markdown","73fb61f0":"markdown","d1cd5457":"markdown","3c88f41b":"markdown"},"source":{"eab1d9d7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d9434913":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","010844f7":"# Local\n# df = pd.read_csv('concrete.csv')\n\n# Kaggle\ndf = pd.read_csv('\/kaggle\/input\/cement-manufacturing-concrete-dataset\/concrete.csv')\ndf.head()","577ce399":"df","413e0749":"df.info()","6197c5b0":"df.isnull().sum()","86af26ba":"plt.figure(figsize=(20,10))\nplt.title('Histogram of strength')\nsns.histplot(data=df,x='strength', kde=True);","03b1f6b8":"plt.figure(figsize=(20,10))\nplt.title('Boxplot of Dataset')\nsns.boxplot(data=df);","22026ac6":"plt.figure(figsize=(20,10))\nplt.title('Boxplot of slag')\nsns.boxplot(data=df, x='slag');","0bbe938f":"df[df['slag'] > 350]","a17c0eb0":"df = df.drop(df[df['slag'] > 350].index)","77d56d89":"plt.figure(figsize=(20,10))\nplt.title('Boxplot of water')\nsns.boxplot(data=df, x='water');","8a977ebf":"df[(df['water'] < 122) | (df['water'] > 230)] ","8c4b9dcb":"df['water'].describe()","ed3fd2bd":"df = df.drop(df[(df['water'] < 122) | (df['water'] > 230)].index)","c72014be":"plt.figure(figsize=(20,10))\nplt.title('Boxplot of superplastic')\nsns.boxplot(data=df, x='superplastic');","4f404caa":"df['superplastic'].describe()","14f0d1e4":"df[df['superplastic'] > 25]","fcf4a6ec":"df = df.drop(df[df['superplastic'] > 25].index)","4d225697":"plt.figure(figsize=(20,10))\nplt.title('Boxplot of fineagg')\nsns.boxplot(data=df, x='fineagg');","955e0fe8":"df[(df['fineagg'] < 600) | (df['fineagg'] > 950)]","eb9c1e12":"df = df.drop(df[(df['fineagg'] < 600) | (df['fineagg'] > 950)].index)","9308b55b":"df","81b99b90":"plt.figure(figsize=(20,10))\nplt.title('Boxplot of age')\nsns.boxplot(data=df, x='age');","1980ec8c":"df[df['age'] > 150]","5d866ac0":"df = df.drop(df[df['age'] > 150].index)","9efd88ec":"plt.figure(figsize=(20,10))\nplt.title('Boxplot of strength')\nsns.boxplot(data=df, x='strength');","a8922bbe":"df['strength'].describe()","1f2a21fc":"df[df['strength'] > 79]","c36cb391":"df = df.drop(df[df['strength'] > 79].index)","e957cdd4":"df","b4229f10":"plt.figure(figsize=(20,10))\nplt.title('Plot of cement vs strength')\nsns.scatterplot(data=df, x='cement', y= 'strength');","6d9d0836":"plt.figure(figsize=(20,10))\nplt.title('Plot of slag vs strength')\nsns.scatterplot(data=df, x='slag', y= 'strength');","376f2596":"plt.figure(figsize=(20,10))\nplt.title('Plot of ash vs strength')\nsns.scatterplot(data=df, x='ash', y= 'strength');","7a179bec":"plt.figure(figsize=(20,10))\nplt.title('Plot of water vs strength')\nsns.scatterplot(data=df, x='water', y= 'strength');","266d57ab":"plt.figure(figsize=(20,10))\nplt.title('Plot of superplastic vs strength')\nsns.scatterplot(data=df, x='superplastic', y= 'strength');","d60f630f":"plt.figure(figsize=(20,10))\nplt.title('Plot of coarseagg vs strength')\nsns.scatterplot(data=df, x='coarseagg', y= 'strength');","8c91ab17":"plt.figure(figsize=(20,10))\nplt.title('Plot of fineagg vs strength')\nsns.scatterplot(data=df, x='fineagg', y= 'strength');","a06e248a":"plt.figure(figsize=(20,10))\nplt.title('Plot of fineagg vs strength')\nsns.scatterplot(data=df, x='age', y= 'strength');","3a5ada8a":"plt.figure(figsize=(20,20))\nsns.heatmap(data=df.corr(), annot=True);","5edf4787":"df.corr()['strength'].sort_values()[:-1]","383a5b04":"X = df.drop('strength', axis=1)\ny = df['strength']","b05b74aa":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","ad7cc4b2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","1422cc0e":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","c393b8a9":"from sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR, LinearSVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom xgboost import XGBRegressor, XGBRFRegressor\nfrom catboost import CatBoostRegressor","f742ef3d":"from sklearn.metrics import mean_squared_error, r2_score","baa72647":"def fit_and_score(models, X_train, X_test, y_train, y_test):\n    np.random.seed(42)\n    \n    model_scores = {}\n    model_rsme = {}\n    model_r2 = {}\n    \n    for name, model in models.items():\n        model.fit(X_train,y_train)\n        model_scores[name] = model.score(X_test,y_test)\n        y_preds = model.predict(X_test)\n        model_rsme[name] = np.sqrt(mean_squared_error(y_test,y_preds))\n        model_r2[name] = r2_score(y_test,y_preds)\n\n    model_scores = pd.DataFrame(model_scores, index=['Score']).transpose()\n    model_scores = model_scores.sort_values('Score')\n    \n    model_rsme = pd.DataFrame(model_rsme, index=['RSME']).transpose()\n    model_rsme = model_rsme.sort_values('RSME')\n    \n    model_r2 = pd.DataFrame(model_r2, index=['R2']).transpose()\n    model_r2 = model_r2.sort_values('R2')\n        \n    return model_scores,model_rsme, model_r2","bee26da5":"models = {'Ridge' : Ridge(),\n         'Lasso': Lasso(),\n         'ElasticNet': ElasticNet(),\n         'KNeighborsRegressor': KNeighborsRegressor(),\n         'SVR': SVR(),\n         'DecisionTreeRegressor': DecisionTreeRegressor(),\n         'RandomForestRegressor':RandomForestRegressor(),\n         'GradientBoostingRegressor': GradientBoostingRegressor(),\n         'AdaBoostRegressor': AdaBoostRegressor(),\n        'XGBRegressor': XGBRegressor(objective='reg:squarederror'),\n        'XGBRFRegressor': XGBRFRegressor(objective='reg:squarederror'),\n          'CatBoostRegressor': CatBoostRegressor(verbose=0)\n         }","001d4072":"model_scores_baseline, model_rsme_baseline, model_r2_baseline = fit_and_score(models, X_train, X_test, y_train, y_test)","deb0cf42":"model_scores_baseline","91619e8d":"model_rsme_baseline.sort_values('RSME', ascending=False)","1cf287bf":"model_r2_baseline","fc204135":"df['strength'].mean()","0270f6c3":"model = CatBoostRegressor(iterations=10000, verbose=0)\nmodel.fit(X_train,y_train, eval_set=[(X_test,y_test)],early_stopping_rounds=50)","d689bf5b":"y_preds = model.predict(X_test)","96624c15":"from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score","a8b0b353":"mae = mean_absolute_error(y_test, y_preds)\nmse = mean_squared_error(y_test,y_preds)\nrmse = np.sqrt(mse)\nr2 = r2_score(y_test, y_preds)","4e0afe2a":"print(f'mean absolute error: {mae}')\nprint(f'Mean squared error: {mse}')\nprint(f'Root Mean Squared Error: {rmse}')\nprint(f'R2 Score: {r2}')","ce21f8a1":"feat_impt = pd.DataFrame(model.feature_importances_, index=X.columns)","ecafcda1":"feat_impt","22e29a69":"plt.figure(figsize=(20,10))\nplt.title('Feature Importance')\nsns.barplot(data= feat_impt.sort_values(0).T);","06e8c6a7":"from sklearn.model_selection import cross_val_score","000f6312":"def get_cv_score(model, X, y, cv=5):\n    \n    \n    cv_r2 = cross_val_score(model,X,y,cv=cv,\n                         scoring='r2')\n    print(f'Cross Validaion R2 Scores: {cv_r2}')\n    print(f'Cross Validation R2 Mean Score: {cv_r2.mean()}')\n    \n    cv_neg_mean_absolute_error = cross_val_score(model,X,y,cv=cv,\n                         scoring='neg_mean_absolute_error')\n    print(f'Cross Validaion Neg MAE Scores: {cv_neg_mean_absolute_error}')\n    print(f'Cross Validation Neg MAE Mean Score: {cv_neg_mean_absolute_error.mean()}')\n    \n    cv_neg_mean_squared_error = cross_val_score(model,X,y,cv=cv,\n                         scoring='neg_mean_squared_error')\n    print(f'Cross Validaion Neg MSE Scores: {cv_neg_mean_squared_error}')\n    print(f'Cross Validation Neg MSE Mean Score: {cv_neg_mean_squared_error.mean()}')\n    \n    cv_neg_root_mean_squared_error = cross_val_score(model,X,y,cv=cv,\n                         scoring='neg_root_mean_squared_error')\n    print(f'Cross Validaion Neg RMSE Scores: {cv_neg_root_mean_squared_error}')\n    print(f'Cross Validation Neg RMSE Score: {cv_neg_root_mean_squared_error.mean()}')   \n    \n    cv_merics = pd.DataFrame({'R2': cv_r2.mean(),\n                         'neg_mean_absolute_error': cv_neg_mean_absolute_error.mean(),\n                         'neg_mean_squared_error': cv_neg_mean_squared_error.mean(),\n                         'neg_root_mean_squared_error': cv_neg_root_mean_squared_error.mean()},index=[0])\n    \n    return cv_merics","f355306f":"cv_model = CatBoostRegressor(iterations=4524,verbose=0)","1797654b":"cv_merics = get_cv_score(cv_model, X_train, y_train, cv=5)","87f831eb":"cv_merics","89490a60":"## Standard Imports","aeee4959":"# 6. Model Evalution","2136cda6":"# Concrete compressive strength Regression\n\nGoing to take the following approach:\n\n1. Problem definition\n2. Data\n3. Evaluation\n4. Features\n5. Modelling\n6. Model Evaluation\n7. Experimentation \/ Improvements","f8cf4cd2":"# 4. Features\n\n## Inputs \/ Features\n\n\n    Cement : measured in kg in a m3 mixture\n    Blast : measured in kg in a m3 mixture\n    Fly ash : measured in kg in a m3 mixture\n    Water : measured in kg in a m3 mixture\n    Superplasticizer : measured in kg in a m3 mixture\n    Coarse Aggregate : measured in kg in a m3 mixture\n    Fine Aggregate : measured in kg in a m3 mixture\n    Age : day (1~365)\n    \n## Output \/ Label\n    Concrete compressive strength measured in MPa\n","7eedd60c":"# 1. Problem Definition\n\nHow we can use various python based Machine Learning Model and the given parameters to predict the housing price?","8f1cb5c7":"As we can see, there are some outlier in the dataset","511aba72":"## Data Exporation","b8cef856":"# 5. Modelling","065b0a73":"As we can see, the strenght have a strong postive correlation to the following:\n    \n    superplastic\n    cement\n    age  \n    \nand a negitive correaltion to:\n    \n    water","3a2e7a2d":"## Baseline Models and Scores","94ecd9e1":"# 3. Evaluation\n\nAs this is a Regression problem, we will use the Root mean square error for evauluting the model","73a7fee1":"## Feature Importance","bcbdac21":"# 2. Data\n\nData From: https:\/\/www.kaggle.com\/vinayakshanawad\/cement-manufacturing-concrete-dataset\n\n## Data Description\n\nThe actual concrete compressive strength (MPa) for a given mixture under a\nspecific age (days) was determined from laboratory. Data is in raw form (not scaled). The data has 8 quantitative input variables, and 1 quantitative output variable, and 1030 instances (observations).\n\n## Domain\n\nCement manufacturing\n\n## Context\n\nConcrete is the most important material in civil engineering. The concrete compressive strength is a highly nonlinear function of age and ingredients. These ingredients include cement, blast furnace slag, fly ash, water, superplasticizer, coarse aggregate, and fine aggregate.","700c4950":"the histogram show that the strength in the data set has a normal distabution","eb0e6fb3":"## Import Models","73fb61f0":"## Evalution using cross_validation","d1cd5457":"## Reading the dataset","3c88f41b":"## Catboost"}}