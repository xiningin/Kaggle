{"cell_type":{"264ce932":"code","917d137b":"code","aabbe214":"code","01725490":"code","4dac8a12":"code","da901626":"code","510c3e6e":"code","d4b50dab":"code","66578134":"code","e284786d":"code","37955f19":"code","c15763c3":"code","fe2d888a":"code","4650c66c":"code","31576f7d":"code","8326f117":"code","8db129a6":"code","1c193c9b":"code","3fb42830":"code","00b1d271":"code","32b6d909":"code","32203788":"code","b9995910":"code","38976acc":"code","b1163fa8":"code","f6df24d5":"code","92c7aa98":"code","0442863a":"code","f94aca08":"markdown","08abfde5":"markdown","99aa8d1b":"markdown","08ff4060":"markdown","00606eaa":"markdown","7dc9386c":"markdown","e3c370f8":"markdown","10197383":"markdown","49ae3b77":"markdown","db83582b":"markdown"},"source":{"264ce932":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.units as units\nimport matplotlib.ticker as ticker\nimport random\nimport time                   # To time processes\nimport warnings               # To suppress warnings\nimport itertools\nimport datetime\nimport tensorflow as tf\nimport csv\nimport math\nimport calendar\n\nfrom random import shuffle\nfrom pandas import read_csv\nfrom sklearn import metrics\nfrom sklearn import svm\nfrom matplotlib import pyplot\nfrom numpy import array\nfrom numpy import argmax\nfrom scipy import stats\nfrom datetime import datetime\nfrom IPython.display import Image\nfrom prettytable import PrettyTable\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report, confusion_matrix  \nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import precision_recall_curve\n\nfrom sklearn.utils import class_weight\nfrom sklearn.utils.fixes import signature\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.base import TransformerMixin\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.callbacks import Callback\n\nfrom imblearn.over_sampling import SMOTE, ADASYN\nfrom imblearn.over_sampling import RandomOverSampler\n\nfrom matplotlib.pyplot import *\nimport matplotlib.pyplot as plotter\n\n\nwarnings.filterwarnings(\"ignore\")","917d137b":"df=read_csv(\"..\/input\/matches.csv\")","aabbe214":"df['result'].value_counts()","01725490":"temp=df.loc[df['win_by_runs'] != 0]\nprint(\"\\nFor a maximum of \"+ str(temp['winner'].value_counts()[0]) + \" times, \" + temp['winner'].value_counts().index[0] + \" has defended their score\")\n","4dac8a12":"temp1=df.loc[df['win_by_wickets'] != 0]\nprint(\"\\nFor a maximum of \"+ str(temp1['winner'].value_counts()[0]) + \" times, \" + temp1['winner'].value_counts().index[0] + \" has chased the totals successfully\")\n","da901626":"temp=df[df['win_by_runs']==df['win_by_runs'].max()].reset_index(drop=True)\n\nprint(\"\\n\"+temp['team1'][0]+ \" won by \" + str(temp['win_by_runs'][0]) + \" against \" + temp['team2'][0]+ \" in IPL \"+ str(temp[\"season\"][0]))","510c3e6e":"temp=df[df['win_by_wickets']==df['win_by_wickets'].max()]\n\ntemp=temp.sort_values(['season']).reset_index(drop=True)\n\nfor i in range(0,temp.shape[0]):\n    print(temp['team1'][i]+ \" won by \" + str(temp['win_by_wickets'][i]) + \" against \" + temp['team2'][i]+ \" in IPL \"+ str(temp[\"season\"][i]))\n    print(\"\\n\")","d4b50dab":"df1=df.dropna(subset=['winner'])","66578134":"for i in range(0,df1.shape[0]):\n    d=df1.iloc[i]['date']\n    if(d[2]=='\/' and d[5]=='\/'):\n        #print(type(datetime.strptime(d, \"%d\/%m\/%y\").strftime(\"%Y-%m-%d\")))\n        df1.iloc[i, df1.columns.get_loc('date')] = datetime.strptime(d, \"%d\/%m\/%y\").strftime(\"%Y-%m-%d\")\n        #df1.iloc[i]['date']=datetime.strptime(d, \"%d\/%m\/%y\").strftime(\"%Y-%m-%d\")\n        #print(df1.iloc[i]['date'])","e284786d":"df2=df1.sort_values(['season','date']).reset_index(drop=True)","37955f19":"kkr=[]\nrcb=[]\nmi=[]\ncsk=[]\nkxip=[]\ndd=[]\ndc=[]\nsrh=[]\nrr=[]\nrpsg=[]\npwi=[]\ngl=[]\nktk=[]\n\ntot_win_count=[]\ntot_name=[]\ntot_loss_count=[]\nc=0\nnightmares=[]","c15763c3":"for i in range(0,df2.shape[0]):\n    if(df2['team1'][i]==\"Kolkata Knight Riders\" or df2['team2'][i]==\"Kolkata Knight Riders\"):\n        kkr.append(df2['winner'][i])\n        \n    if(df2['team1'][i]==\"Royal Challengers Bangalore\" or df2['team2'][i]==\"Royal Challengers Bangalore\"):\n        rcb.append(df2['winner'][i])\n        \n    if(df2['team1'][i]==\"Mumbai Indians\" or df2['team2'][i]==\"Mumbai Indians\"):\n        mi.append(df2['winner'][i])\n        \n    if(df2['team1'][i]==\"Chennai Super Kings\" or df2['team2'][i]==\"Chennai Super Kings\"):\n        csk.append(df2['winner'][i])\n        \n    if(df2['team1'][i]==\"Kings XI Punjab\" or df2['team2'][i]==\"Kings XI Punjab\"):\n        kxip.append(df2['winner'][i])\n        \n    if(df2['team1'][i]==\"Delhi Daredevils\" or df2['team2'][i]==\"Delhi Daredevils\"):\n        dd.append(df2['winner'][i])\n        \n    if(df2['team1'][i]==\"Deccan Chargers\" or df2['team2'][i]==\"Deccan Chargers\"):\n        dc.append(df2['winner'][i])\n        \n    if(df2['team1'][i]==\"Sunrisers Hyderabad\" or df2['team2'][i]==\"Sunrisers Hyderabad\"):\n        srh.append(df2['winner'][i])\n    \n    if(df2['team1'][i]==\"Rajasthan Royals\" or df2['team2'][i]==\"Rajasthan Royals\"):\n        rr.append(df2['winner'][i])\n        \n    if(df2['team1'][i]==\"Rising Pune Supergiants\" or df2['team2'][i]==\"Rising Pune Supergiants\"):\n        rpsg.append(df2['winner'][i])\n        \n    if(df2['team1'][i]==\"Pune Warriors\" or df2['team2'][i]==\"Pune Warriors\"):\n        pwi.append(df2['winner'][i])\n        \n    if(df2['team1'][i]==\"Gujarat Lions\" or df2['team2'][i]==\"Gujarat Lions\"):\n        gl.append(df2['winner'][i])\n        \n    if(df2['team1'][i]==\"Kochi Tuskers Kerala\" or df2['team2'][i]==\"Kochi Tuskers Kerala\"):\n        ktk.append(df2['winner'][i])\n    \n        ","fe2d888a":"win_count=1\nloss_count=1\nmaxi_win=-1\nmaxi_loss=-1\n\nfor i in range(0,len(kkr)-1):\n    if(kkr[i]==\"Kolkata Knight Riders\" and kkr[i+1]==\"Kolkata Knight Riders\"):\n        win_count+=1\n    else:\n        maxi_win=max(win_count,maxi_win)\n        win_count=1\n    if(kkr[i]!=\"Kolkata Knight Riders\" and kkr[i+1]!=\"Kolkata Knight Riders\"):\n        loss_count+=1\n    else:\n        maxi_loss=max(loss_count, maxi_loss)\n        loss_count=1\n        \ntot_win_count.append(maxi_win)\ntot_loss_count.append(maxi_loss)\ntot_name.append(\"Kolkata Knight Riders\")\n\ns=\"\"\nt1=\"Kolkata Knight Riders\"\nx=pd.Series(kkr)\nt2=x.value_counts().tolist()\nt2.pop(0)\nm=max(t2)\npos=[]\n\nfor i in range(0,len(t2)):\n    if(t2[i]==m):\n        pos.append(i)\n\ns+=t1+\" has lost against \"\nfor i in range(0,len(pos)):\n    s+=x.value_counts().index[pos[i]+1]\n    if(i!=len(pos)-1):\n        s+=\", \"\n\ns+=\" for a maximum of \"+str(m)+\" times.\\n\\n\"\n#print(s)\nnightmares.append(s)","4650c66c":"win_count=1\nloss_count=1\nmaxi_win=-1\nmaxi_loss=-1\n\nfor i in range(0,len(rcb)-1):\n    if(rcb[i]==\"Royal Challengers Bangalore\" and rcb[i+1]==\"Royal Challengers Bangalore\"):\n        win_count+=1\n    else:\n        maxi_win=max(win_count,maxi_win)\n        win_count=1\n    if(rcb[i]!=\"Royal Challengers Bangalore\" and rcb[i+1]!=\"Royal Challengers Bangalore\"):\n        loss_count+=1\n    else:\n        maxi_loss=max(loss_count, maxi_loss)\n        loss_count=1\n        \ntot_win_count.append(maxi_win)\ntot_loss_count.append(maxi_loss)\ntot_name.append(\"Royal Challengers Bangalore\")\n\ns=\"\"\nt1=\"Royal Challengers Bangalore\"\nx=pd.Series(rcb)\nt2=x.value_counts().tolist()\nt2.pop(0)\nm=max(t2)\n\npos=[]\nfor i in range(0,len(t2)):\n    if(t2[i]==m):\n        pos.append(i)\n\ns+=t1+\" has lost against \"\nfor i in range(0,len(pos)):\n    s+=x.value_counts().index[pos[i]+1]\n    if(i!=len(pos)-1):\n        s+=\", \"\n\ns+=\" for a maximum of \"+str(m)+\" times.\\n\\n\"\n#print(s)\nnightmares.append(s)","31576f7d":"win_count=1\nloss_count=1\nmaxi_win=-1\nmaxi_loss=-1\n\nfor i in range(0,len(mi)-1):\n    if(mi[i]==\"Mumbai Indians\" and mi[i+1]==\"Mumbai Indians\"):\n        win_count+=1\n    else:\n        maxi_win=max(win_count,maxi_win)\n        win_count=1\n    if(mi[i]!=\"Mumbai Indians\" and mi[i+1]!=\"Mumbai Indians\"):\n        loss_count+=1\n    else:\n        maxi_loss=max(loss_count, maxi_loss)\n        loss_count=1\n        \ntot_win_count.append(maxi_win)\ntot_loss_count.append(maxi_loss)\ntot_name.append(\"Mumbai Indians\")\n\ns=\"\"\nt1=\"Mumbai Indians\"\nx=pd.Series(mi)\nt2=x.value_counts().tolist()\n\nt2.pop(0)\nm=max(t2)\n\npos=[]\nfor i in range(0,len(t2)):\n    if(t2[i]==m):\n        pos.append(i)\ns+=t1+\" has lost against \"\nfor i in range(0,len(pos)):\n    s+=x.value_counts().index[pos[i]+1]\n    if(i!=len(pos)-1):\n        s+=\", \"\n\ns+=\" for a maximum of \"+str(m)+\" times.\\n\\n\"\n#print(s)\nnightmares.append(s)","8326f117":"win_count=1\nloss_count=1\nmaxi_win=-1\nmaxi_loss=-1\n\nfor i in range(0,len(csk)-1):\n    if(csk[i]==\"Chennai Super Kings\" and csk[i+1]==\"Chennai Super Kings\"):\n        win_count+=1\n    else:\n        maxi_win=max(win_count,maxi_win)\n        win_count=1\n    if(csk[i]!=\"Chennai Super Kings\" and csk[i+1]!=\"Chennai Super Kings\"):\n        loss_count+=1\n    else:\n        maxi_loss=max(loss_count, maxi_loss)\n        loss_count=1\n        \ntot_win_count.append(maxi_win)\ntot_loss_count.append(maxi_loss)\ntot_name.append(\"Chennai Super Kings\")\n\ns=\"\"\nt1=\"Chennai Super Kings\"\nx=pd.Series(csk)\nt2=x.value_counts().tolist()\nt2.pop(0)\nm=max(t2)\n\npos=[]\nfor i in range(0,len(t2)):\n    if(t2[i]==m):\n        pos.append(i)\n        \ns+=t1+\" has lost against \"\nfor i in range(0,len(pos)):\n    s+=x.value_counts().index[pos[i]+1]\n    if(i!=len(pos)-1):\n        s+=\", \"\n\ns+=\" for a maximum of \"+str(m)+\" times.\\n\\n\"\n#print(s)\nnightmares.append(s)","8db129a6":"win_count=1\nloss_count=1\nmaxi_win=-1\nmaxi_loss=-1\n\nfor i in range(0,len(kxip)-1):\n    if(kxip[i]==\"Kings XI Punjab\" and kxip[i+1]==\"Kings XI Punjab\"):\n        win_count+=1\n    else:\n        maxi_win=max(win_count,maxi_win)\n        win_count=1\n    if(kxip[i]!=\"Kings XI Punjab\" and kxip[i+1]!=\"Kings XI Punjab\"):\n        loss_count+=1\n    else:\n        maxi_loss=max(loss_count, maxi_loss)\n        loss_count=1\n        \ntot_win_count.append(maxi_win)\ntot_loss_count.append(maxi_loss)\ntot_name.append(\"Kings XI Punjab\")\n\ns=\"\"\nt1=\"Kings XI Punjab\"\nx=pd.Series(kxip)\nt2=x.value_counts().tolist()\nt2.pop(0)\nm=max(t2)\n\npos=[]\nfor i in range(0,len(t2)):\n    if(t2[i]==m):\n        pos.append(i)\n        \ns+=t1+\" has lost against \"\nfor i in range(0,len(pos)):\n    s+=x.value_counts().index[pos[i]+1]\n    if(i!=len(pos)-1):\n        s+=\", \"\n\ns+=\" for a maximum of \"+str(m)+\" times.\\n\\n\"\n#print(s)\nnightmares.append(s)","1c193c9b":"win_count=1\nloss_count=1\nmaxi_win=-1\nmaxi_loss=-1\n\nfor i in range(0,len(dd)-1):\n    if(dd[i]==\"Delhi Daredevils\" and dd[i+1]==\"Delhi Daredevils\"):\n        win_count+=1\n    else:\n        maxi_win=max(win_count,maxi_win)\n        win_count=1\n    if(dd[i]!=\"Delhi Daredevils\" and dd[i+1]!=\"Delhi Daredevils\"):\n        loss_count+=1\n    else:\n        maxi_loss=max(loss_count, maxi_loss)\n        loss_count=1\n        \ntot_win_count.append(maxi_win)\ntot_loss_count.append(maxi_loss)\ntot_name.append(\"Delhi Daredevils\")\n\ns=\"\"\nt1=\"Delhi Daredevils\"\nx=pd.Series(dd)\nt2=x.value_counts().tolist()\nt2.pop(0)\nm=max(t2)\n\npos=[]\nfor i in range(0,len(t2)):\n    if(t2[i]==m):\n        pos.append(i)\n\ns+=t1+\" has lost against \"\nfor i in range(0,len(pos)):\n    s+=x.value_counts().index[pos[i]+1]\n    if(i!=len(pos)-1):\n        s+=\", \"\n\ns+=\" for a maximum of \"+str(m)+\" times.\\n\\n\"\n#print(s)\nnightmares.append(s)","3fb42830":"win_count=1\nloss_count=1\nmaxi_win=-1\nmaxi_loss=-1\n\nfor i in range(0,len(dc)-1):\n    if(dc[i]==\"Deccan Chargers\" and dc[i+1]==\"Deccan Chargers\"):\n        win_count+=1\n    else:\n        maxi_win=max(win_count,maxi_win)\n        win_count=1\n    if(dc[i]!=\"Deccan Chargers\" and dc[i+1]!=\"Deccan Chargers\"):\n        loss_count+=1\n    else:\n        maxi_loss=max(loss_count, maxi_loss)\n        loss_count=1\n        \ntot_win_count.append(maxi_win)\ntot_loss_count.append(maxi_loss)\ntot_name.append(\"Deccan Chargers\")\n\ns=\"\"\nt1=\"Deccan Chargers\"\nx=pd.Series(dc)\nt2=x.value_counts().tolist()\nt2.pop(0)\nm=max(t2)\n\npos=[]\nfor i in range(0,len(t2)):\n    if(t2[i]==m):\n        pos.append(i)\n\ns+=t1+\" has lost against \"\nfor i in range(0,len(pos)):\n    s+=x.value_counts().index[pos[i]+1]\n    if(i!=len(pos)-1):\n        s+=\", \"\n\ns+=\" for a maximum of \"+str(m)+\" times.\\n\\n\"\n#print(s)\nnightmares.append(s)","00b1d271":"win_count=1\nloss_count=1\nmaxi_win=-1\nmaxi_loss=-1\n\nfor i in range(0,len(srh)-1):\n    if(srh[i]==\"Sunrisers Hyderabad\" and srh[i+1]==\"Sunrisers Hyderabad\"):\n        win_count+=1\n    else:\n        maxi_win=max(win_count,maxi_win)\n        win_count=1\n    if(srh[i]!=\"Sunrisers Hyderabad\" and srh[i+1]!=\"Sunrisers Hyderabad\"):\n        loss_count+=1\n    else:\n        maxi_loss=max(loss_count, maxi_loss)\n        loss_count=1\n        \ntot_win_count.append(maxi_win)\ntot_loss_count.append(maxi_loss)\ntot_name.append(\"Sunrisers Hyderabad\")\n\ns=\"\"\nt1=\"Sunrisers Hyderabad\"\nx=pd.Series(srh)\nt2=x.value_counts().tolist()\nt2.pop(0)\nm=max(t2)\n\npos=[]\nfor i in range(0,len(t2)):\n    if(t2[i]==m):\n        pos.append(i)\n\ns+=t1+\" has lost against \"\nfor i in range(0,len(pos)):\n    s+=x.value_counts().index[pos[i]+1]\n    if(i!=len(pos)-1):\n        s+=\", \"\n\ns+=\" for a maximum of \"+str(m)+\" times.\\n\\n\"\n#print(s)\nnightmares.append(s)","32b6d909":"win_count=1\nloss_count=1\nmaxi_win=-1\nmaxi_loss=-1\n\nfor i in range(0,len(rr)-1):\n    if(rr[i]==\"Rajasthan Royals\" and rr[i+1]==\"Rajasthan Royals\"):\n        win_count+=1\n    else:\n        maxi_win=max(win_count,maxi_win)\n        win_count=1\n    if(rr[i]!=\"Rajasthan Royals\" and rr[i+1]!=\"Rajasthan Royals\"):\n        loss_count+=1\n    else:\n        maxi_loss=max(loss_count, maxi_loss)\n        loss_count=1\n        \ntot_win_count.append(maxi_win)\ntot_loss_count.append(maxi_loss)\ntot_name.append(\"Rajasthan Royals\")\n\ns=\"\"\nt1=\"Rajasthan Royals\"\nx=pd.Series(rr)\nt2=x.value_counts().tolist()\nt2.pop(0)\nm=max(t2)\n\npos=[]\nfor i in range(0,len(t2)):\n    if(t2[i]==m):\n        pos.append(i)\n\ns+=t1+\" has lost against \"\nfor i in range(0,len(pos)):\n    s+=x.value_counts().index[pos[i]+1]\n    if(i!=len(pos)-1):\n        s+=\", \"\n\ns+=\" for a maximum of \"+str(m)+\" times.\\n\\n\"\n#print(s)\nnightmares.append(s)","32203788":"win_count=1\nloss_count=1\nmaxi_win=-1\nmaxi_loss=-1\n\nfor i in range(0,len(rpsg)-1):\n    if(rpsg[i]==\"Rising Pune Supergiants\" and rpsg[i+1]==\"Rising Pune Supergiants\"):\n        win_count+=1\n    else:\n        maxi_win=max(win_count,maxi_win)\n        win_count=1\n    if(rpsg[i]!=\"Rising Pune Supergiants\" and rpsg[i+1]!=\"Rising Pune Supergiants\"):\n        loss_count+=1\n    else:\n        maxi_loss=max(loss_count, maxi_loss)\n        loss_count=1\n        \ntot_win_count.append(maxi_win)\ntot_loss_count.append(maxi_loss)\ntot_name.append(\"Rising Pune Supergiants\")\n\ns=\"\"\nt1=\"Rising Pune Supergiants\"\nx=pd.Series(rpsg)\nt2=x.value_counts().tolist()\nt2.pop(0)\nm=max(t2)\n\npos=[]\nfor i in range(0,len(t2)):\n    if(t2[i]==m):\n        pos.append(i)\n\ns+=t1+\" has lost against \"\nfor i in range(0,len(pos)):\n    s+=x.value_counts().index[pos[i]+1]\n    if(i!=len(pos)-1):\n        s+=\", \"\n\ns+=\" for a maximum of \"+str(m)+\" times.\\n\\n\"\n#print(s)\nnightmares.append(s)","b9995910":"win_count=1\nloss_count=1\nmaxi_win=-1\nmaxi_loss=-1\n\nfor i in range(0,len(pwi)-1):\n    if(pwi[i]==\"Pune Warriors\" and pwi[i+1]==\"Pune Warriors\"):\n        win_count+=1\n    else:\n        maxi_win=max(win_count,maxi_win)\n        win_count=1\n    if(pwi[i]!=\"Pune Warriors\" and pwi[i+1]!=\"Pune Warriors\"):\n        loss_count+=1\n    else:\n        maxi_loss=max(loss_count, maxi_loss)\n        loss_count=1\n        \ntot_win_count.append(maxi_win)\ntot_loss_count.append(maxi_loss)\ntot_name.append(\"Pune Warriors\")\n\ns=\"\"\nt1=\"Pune Warriors\"\nx=pd.Series(pwi)\nt2=x.value_counts().tolist()\nt2.pop(0)\nm=max(t2)\n\npos=[]\nfor i in range(0,len(t2)):\n    if(t2[i]==m):\n        pos.append(i)\n\ns+=t1+\" has lost against \"\nfor i in range(0,len(pos)):\n    s+=x.value_counts().index[pos[i]+1]\n    if(i!=len(pos)-1):\n        s+=\", \"\n\ns+=\" for a maximum of \"+str(m)+\" times.\\n\\n\"\n#print(s)\nnightmares.append(s)","38976acc":"win_count=1\nloss_count=1\nmaxi_win=-1\nmaxi_loss=-1\n\nfor i in range(0,len(gl)-1):\n    if(gl[i]==\"Gujarat Lions\" and gl[i+1]==\"Gujarat Lions\"):\n        win_count+=1\n    else:\n        maxi_win=max(win_count,maxi_win)\n        win_count=1\n    if(gl[i]!=\"Gujarat Lions\" and gl[i+1]!=\"Gujarat Lions\"):\n        loss_count+=1\n    else:\n        maxi_loss=max(loss_count, maxi_loss)\n        loss_count=1\n        \ntot_win_count.append(maxi_win)\ntot_loss_count.append(maxi_loss)\ntot_name.append(\"Gujarat Lions\")\n\ns=\"\"\nt1=\"Gujarat Lions\"\nx=pd.Series(gl)\nt2=x.value_counts().tolist()\nt2.pop(0)\nm=max(t2)\n\npos=[]\nfor i in range(0,len(t2)):\n    if(t2[i]==m):\n        pos.append(i)\n\ns+=t1+\" has lost against \"\nfor i in range(0,len(pos)):\n    s+=x.value_counts().index[pos[i]+1]\n    if(i!=len(pos)-1):\n        s+=\", \"\n\ns+=\" for a maximum of \"+str(m)+\" times.\\n\\n\"\n#print(s)\nnightmares.append(s)","b1163fa8":"win_count=1\nloss_count=1\nmaxi_win=-1\nmaxi_loss=-1\n\nfor i in range(0,len(ktk)-1):\n    if(ktk[i]==\"Kochi Tuskers Kerala\" and ktk[i+1]==\"Kochi Tuskers Kerala\"):\n        win_count+=1\n    else:\n        maxi_win=max(win_count,maxi_win)\n        win_count=1\n    if(ktk[i]!=\"Kochi Tuskers Kerala\" and ktk[i+1]!=\"Kochi Tuskers Kerala\"):\n        loss_count+=1\n    else:\n        maxi_loss=max(loss_count, maxi_loss)\n        loss_count=1\n        \ntot_win_count.append(maxi_win)\ntot_loss_count.append(maxi_loss)\ntot_name.append(\"Kochi Tuskers Kerala\")\n\ns=\"\"\nt1=\"Kochi Tuskers Kerala\"\nx=pd.Series(ktk)\nt2=x.value_counts().tolist()\nt2.pop(0)\nm=max(t2)\n\npos=[]\nfor i in range(0,len(t2)):\n    if(t2[i]==m):\n        pos.append(i)\n\ns+=t1+\" has lost against \"\nfor i in range(0,len(pos)):\n    s+=x.value_counts().index[pos[i]+1]\n    if(i!=len(pos)-1):\n        s+=\", \"\n\ns+=\" for a maximum of \"+str(m)+\" times.\\n\\n\"\n#print(s)\nnightmares.append(s)","f6df24d5":"m=max(tot_win_count)\npos=[]\nfor i in range(0,len(tot_win_count)):\n    if(tot_win_count[i]==m):\n        pos.append(i)\n\nfor i in range(0,len(pos)):\n    print(\"\\n\"+tot_name[pos[i]]+\" - \"+str(m)+\"\\n\")","92c7aa98":"m=max(tot_loss_count)\npos=[]\nfor i in range(0,len(tot_loss_count)):\n    if(tot_loss_count[i]==m):\n        pos.append(i)\n\nfor i in range(0,len(pos)):\n    print(\"\\n\"+tot_name[pos[i]]+\" - \"+str(m)+\"\\n\")","0442863a":"for i in range(0,13):\n    print(nightmares[i])","f94aca08":"<br><h1 align=center><font color=deeppink>Best Chasing Team<br><\/font><\/h1>","08abfde5":"![DD.png](attachment:DD.png)\n![PWI.png](attachment:PWI.png)","99aa8d1b":"<br><h1 align=center><font color=deeppink>Teams that won by most wickets<\/font><\/h1><br>","08ff4060":"<br><h1 align=center><font color=deeppink>Teams with most consecutive losses<\/font><\/h1><br>","00606eaa":"<br><h1 align=center><font color=deeppink>Best Defending Team<br><\/font><\/h1>","7dc9386c":"<br><h1 align=center><font color=deeppink>Team that won by most runs<\/font><\/h1><br>","e3c370f8":"This kernel provides some interesting insights about the unique trends and records held by teams participating in the IPL from 2008 to 2018.\n\nSome of the analysis includes:\n1. **Best Defending Team** -  Team that has batted first and defended their total maximum times to win successfully.\n2. **Best Chasing Team** - Team that has batted second and chased the targets the maximum times to win successfully.\n3. **Team that won by most runs** - Team that has the largest victory margin\n4. **Teams that won by most wickets** - Teams that have won the matches with maximum wickets sparing in their pockets!\n5. **Most consecutive wins** - Team that has won most matches consequtively over all the seasons of IPL.\n6. **Most consecutive loss** - Team that has lost most matches consequtively over all the seasons of IPL.\n7. **Nightmares of each team** - Against which opposition(s), a particular team has lost the maximum teams, remaining their nightmare to get over?\n","10197383":"![KKR.png](attachment:KKR.png)","49ae3b77":"<br><h1 align=center><font color=deeppink>Nightmares for each team<\/font><\/h1><br>","db83582b":"<br><h1 align=center><font color=deeppink>Team with most consecutive wins<\/font><\/h1><br>"}}