{"cell_type":{"5e3be304":"code","da9dbbfb":"code","be210312":"code","51fd0632":"code","802fc1ad":"code","bab0909e":"code","5db82fac":"code","4e56b0f1":"code","50c3c350":"code","d90002e0":"code","6c90f956":"code","8686bd64":"code","c7fd7918":"code","3d206aa9":"code","3ca1727c":"code","7a1152e2":"code","11a48823":"code","b53f9b60":"code","fe065800":"code","53efea8a":"code","dca7ace3":"code","293eb7c3":"code","f15542b8":"code","14beea77":"code","af7467b8":"code","ff3e549f":"code","0e6b9959":"code","e12504b6":"code","1e23f183":"code","08b57fb9":"code","6e0ea5e1":"code","21e08318":"code","d4fe3ea5":"markdown","9df43323":"markdown","263830f6":"markdown","c8d03e56":"markdown","6c1d4ae7":"markdown","35bdd9eb":"markdown","7e798d0c":"markdown","0e2f31ce":"markdown","b14ee5c9":"markdown","da295210":"markdown","95136264":"markdown","c620e007":"markdown","d131f93d":"markdown","854c401d":"markdown","4dee2a6c":"markdown","b3627d9e":"markdown","3119d875":"markdown","7e825f56":"markdown","06704330":"markdown","3f576dd7":"markdown","b591be89":"markdown"},"source":{"5e3be304":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nsns.set(style=\"ticks\")\nnp.random.seed(sum(map(ord, \"axis_grids\")))","da9dbbfb":"# Load the example dataset for Anscombe's quartet\ndf = sns.load_dataset(\"anscombe\")\ndf.head()","be210312":"# 1) Show the results of a linear regression within each dataset\nsns.lmplot(x='x', y='y', hue='dataset',col='dataset',  data=df,\n          col_wrap=2, ci=None, palette='muted', height=4,\n          scatter_kws={'s': 50, 'alpha':1})","51fd0632":"# 2)multiple linear regression\n# load the iris dataset\niris = sns.load_dataset('iris')\n\n# Plot sepal_width with as a function of sepal_length across the species\ng = sns.lmplot(x='sepal_length', y='sepal_width', hue='species',\n               truncate=True, height=5, data=iris)\ng.set_axis_labels('Sepal lenth (mm)', 'Sepal width (mm)')","802fc1ad":"# 3)Faceted logistic regression\ndf = sns.load_dataset('titanic')\n# Make a custom palette with gendered colors\npal = dict(male=\"#6495ED\", female=\"#F08080\")\ng = sns.lmplot(x='age', y='survived', hue='sex', col='sex', data=df,\n              palette=pal, y_jitter=0.2, logistic=True)","bab0909e":"\nsns.set(style=\"dark\")\nrs = np.random.RandomState(50)\n\n# Set up the matplotlib figure\nf, axes = plt.subplots(3, 3, figsize=(9, 9), sharex=True, sharey=True)\n\n# Rotate the starting point around the cubehelix hue circle\nfor ax, s in zip(axes.flat, np.linspace(0, 3, 10)):\n\n    # Create a cubehelix colormap to use with kdeplot\n    cmap = sns.cubehelix_palette(start=s, light=1, as_cmap=True)\n\n    # Generate and plot a random bivariate dataset\n    x, y = rs.randn(2, 50)\n    sns.kdeplot(x, y, cmap=cmap, shade=True, cut=5, ax=ax)\n    ax.set(xlim=(-3, 3), ylim=(-3, 3))\n\nf.tight_layout()","5db82fac":"# Plot the histograms\ntips = sns.load_dataset('tips')\ng = sns.FacetGrid(tips, row='sex', col='time', margin_titles=True)\ng.map(sns.distplot, 'total_bill', color='steelblue')","4e56b0f1":"# set up the matplotlib figure\nf, axes = plt.subplots(2, 2, figsize=(7,7), sharex=False)\nsns.despine(left=True)\n\n# generate a random univariate dataset\nrs = np.random.RandomState(10) #random generator\nd = rs.normal(size=100)\n\n# Plot a simple histogram with binsize determined automatically\nsns.distplot(d, kde=False, color='b', ax=axes[0, 0])\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(d, hist=False, rug=True, color=\"r\", ax=axes[0, 1])\n\n# Plot a filled kernel density estimate\nsns.distplot(d, hist=False, color=\"g\", kde_kws={\"shade\": True}, ax=axes[1, 0])\n\n# Plot a historgram and kernel density estimate\nsns.distplot(d, color=\"m\", ax=axes[1, 1])\n\nplt.tight_layout()","50c3c350":"# load the dataset\nfmri = sns.load_dataset('fmri')\n\n# plot the responses for different events and regions\nsns.lineplot(x='timepoint', y='signal', hue='region', style='event',\n             data=fmri)","d90002e0":"sns.set(style=\"whitegrid\")\n\nrs = np.random.RandomState(365)\nvalues = rs.randn(365, 4).cumsum(axis=0)\ndates = pd.date_range(\"1 1 2016\", periods=365, freq=\"D\")\ndata = pd.DataFrame(values, dates, columns=[\"A\", \"B\", \"C\", \"D\"])\ndata = data.rolling(7).mean()\n\nsns.lineplot(data=data, palette=\"tab10\", linewidth=2.5)","6c90f956":"sns.set(style=\"ticks\", palette=\"pastel\")\n\n# Load the example tips dataset\ntips = sns.load_dataset(\"tips\")\n\n# Draw a nested boxplot to show bills by day and time\nsns.boxplot(x=\"day\", y=\"total_bill\",\n            hue=\"smoker\", palette=[\"m\", \"g\"],\n            data=tips)","8686bd64":"sns.set()\n\n# Create a random dataset across several variables\nrs = np.random.RandomState(0)\nn, p = 40, 8\nd = rs.normal(0, 2, (n, p))\nd += np.log(np.arange(1, p + 1)) * -5 + 10\n\n# Use cubehelix to get a custom sequential palette\npal = sns.cubehelix_palette(p, rot=-.5, dark=.3)\n\n# Show each distribution with both violins and points\nsns.violinplot(data=d, palette=pal, inner='points')","c7fd7918":"# Grouped violinplots with split violins\ntips = sns.load_dataset(\"tips\")\n\nsns.violinplot(x='day', y='total_bill', hue='smoker', split=True, data=tips)","3d206aa9":"# Violinplot from a wide-form dataset\ndf = sns.load_dataset(\"brain_networks\", header=[0, 1, 2], index_col=0)\n\n# Pull out a specific subset of networks\nused_networks = [1, 3, 4, 5, 6, 7, 8, 11, 12, 13, 16, 17]\nused_columns = (df.columns.get_level_values(\"network\")\n                          .astype(int)\n                          .isin(used_networks))\ndf = df.loc[:, used_columns]\n\n# Compute the correlation matrix and average over networks\ncorr_df = df.corr().groupby(level=\"network\").mean()\ncorr_df.index = corr_df.index.astype(int)\ncorr_df = corr_df.sort_index().T\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 6))\n\n# Draw a violinplot with a narrower bandwidth than the default\nsns.violinplot(data=corr_df, palette=\"Set3\", bw=.2, cut=1, linewidth=1)\n\n# Finalize the figure\nax.set(ylim=(-.7, 1.05))\nsns.despine(left=True, bottom=True)","3ca1727c":"# load the dataset\nflights_long = sns.load_dataset('flights')\nflights = flights_long.pivot(\"month\", \"year\", \"passengers\")\n# Draw a heatmap with the numeric values in each cell\nf, ax = plt.subplots(figsize=(9, 6))\nsns.heatmap(flights, annot=True, fmt=\"d\", linewidths=.5, ax=ax)","7a1152e2":"# Plotting a diagonal correlation matrix\nfrom string import ascii_letters\n\nsns.set(style=\"white\")\n\n# Generate a large random dataset\nrs = np.random.RandomState(33)\nd = pd.DataFrame(data=rs.normal(size=(100, 26)),\n                 columns=list(ascii_letters[26:]))\n\n# Compute the correlation matrix\ncorr = d.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","11a48823":"rs = np.random.RandomState(5)\nmean = [0, 0]\ncov = [(1, .5), (.5, 1)]\nx1, x2 = rs.multivariate_normal(mean, cov, 500).T\nx1 = pd.Series(x1, name=\"$X_1$\")\nx2 = pd.Series(x2, name=\"$X_2$\")\ng = sns.jointplot(x1, x2, kind='kde', height=7)","b53f9b60":"# Hexbin plot with marginal distribution\nsns.set(style=\"ticks\")\n\nrs = np.random.RandomState(11)\nx = rs.gamma(2, size=1000)\ny = -.5 * x + rs.normal(size=1000)\n\nsns.jointplot(x, y, kind=\"hex\", color=\"#4CB391\")","fe065800":"# linear regression with marginal distribution\nsns.set(style=\"darkgrid\")\n\ntips = sns.load_dataset(\"tips\")\ng = sns.jointplot(\"total_bill\", \"tip\", data=tips, kind=\"reg\",\n                  xlim=(0, 60), ylim=(0, 12), color=\"m\", height=7)","53efea8a":"sns.set(style=\"whitegrid\")\n\n# Load the example car crash dataset\ncrashes = sns.load_dataset(\"car_crashes\").sort_values(\"total\", ascending=False)\n\n# Initialize the matplotlib figure\nf, ax = plt.subplots(figsize=(6, 15))\n# Plot the total crashes\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"total\", y=\"abbrev\", data=crashes,\n            label=\"Total\", color=\"b\")\n\n# Plot the crashes where alcohol was involved\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"alcohol\", y=\"abbrev\", data=crashes,\n            label=\"Alcohol-involved\", color=\"b\")\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 24), ylabel=\"\",\n       xlabel=\"Automobile collisions per billion miles\")\nsns.despine(left=True, bottom=True)","dca7ace3":"# the grouped barplots\nsns.set(style=\"whitegrid\")\n\n# Load the example Titanic dataset\ntitanic = sns.load_dataset(\"titanic\")\n\n# Draw a nested barplot to show survival for class and sex\ng = sns.catplot(x=\"class\", y=\"survived\", hue=\"sex\", data=titanic,\n                height=6, kind=\"bar\", palette=\"muted\")\ng.despine(left=True)\ng.set_ylabels(\"survival probability\")","293eb7c3":"# Plotting a three-way ANOVA\nsns.set(style=\"whitegrid\")\n\n# Load the example exercise dataset\ndf = sns.load_dataset(\"exercise\")\n\n# Draw a pointplot to show pulse as a function of three categorical factors\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\",\n                capsize=.2, palette=\"YlGnBu_d\", height=6, aspect=.75,\n                kind=\"point\", data=df)\ng.despine(left=True)","f15542b8":"# Conditional means with observations\niris = sns.load_dataset(\"iris\")\n\n# \"Melt\" the dataset to \"long-form\" or \"tidy\" representation\niris = pd.melt(iris, \"species\", var_name=\"measurement\")\n\n# Initialize the figure\nf, ax = plt.subplots()\nsns.despine(bottom=True, left=True)\n\n# Show each observation with a scatterplot\nsns.stripplot(x=\"value\", y=\"measurement\", hue=\"species\",\n              data=iris, dodge=True, jitter=True,\n              alpha=.25, zorder=1)\n\n# Show the conditional means\nsns.pointplot(x=\"value\", y=\"measurement\", hue=\"species\",\n              data=iris, dodge=.532, join=False, palette=\"dark\",\n              markers=\"d\", scale=.75, ci=None)\n\n# Improve the legend \nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles[3:], labels[3:], title=\"species\",\n          handletextpad=0, columnspacing=1,\n          loc=\"lower right\", ncol=3, frameon=True)","14beea77":"#Scatterplot with categorical and numerical semantics\n\nsns.set(style=\"whitegrid\")\n\n# Load the example iris dataset\ndiamonds = sns.load_dataset(\"diamonds\")\n\n# Draw a scatter plot while assigning point colors and sizes to different\n# variables in the dataset\nf, ax = plt.subplots(figsize=(6.5, 6.5))\nsns.despine(f, left=True, bottom=True)\nclarity_ranking = [\"I1\", \"SI2\", \"SI1\", \"VS2\", \"VS1\", \"VVS2\", \"VVS1\", \"IF\"]\nsns.scatterplot(x=\"carat\", y=\"price\",\n                hue=\"clarity\", size=\"depth\",\n                palette=\"ch:r=-.2,d=.3_r\",\n                hue_order=clarity_ranking,\n                sizes=(1, 8), linewidth=0,\n                data=diamonds, ax=ax)","af7467b8":"# Scatterplot with varying point sizes and hues\nsns.set(style=\"white\")\n\n# Load the example mpg dataset\nmpg = sns.load_dataset(\"mpg\")\n\n# Plot miles per gallon against horsepower with other semantics\nsns.relplot(x=\"horsepower\", y=\"mpg\", hue=\"origin\", size=\"weight\",\n            sizes=(40, 400), alpha=.5, palette=\"muted\",\n            height=6, data=mpg)","ff3e549f":"# Plotting large distributions\nsns.set(style=\"whitegrid\")\n\ndiamonds = sns.load_dataset(\"diamonds\")\nclarity_ranking = [\"I1\", \"SI2\", \"SI1\", \"VS2\", \"VS1\", \"VVS2\", \"VVS1\", \"IF\"]\n\nsns.boxenplot(x=\"clarity\", y=\"carat\",\n              color=\"b\", order=clarity_ranking,\n              scale=\"linear\", data=diamonds)","0e6b9959":"# PairGrid\nsns.set(style=\"white\")\n\ndf = sns.load_dataset(\"iris\")\n\ng = sns.PairGrid(df, diag_sharey=False)\ng.map_lower(sns.kdeplot)\ng.map_upper(sns.scatterplot)\ng.map_diag(sns.kdeplot, lw=3)","e12504b6":"# Paired categorical plots\nsns.set(style=\"whitegrid\")\n\n# Load the example Titanic dataset\ntitanic = sns.load_dataset(\"titanic\")\n\n# Set up a grid to plot survival probability against several variables\ng = sns.PairGrid(titanic, y_vars=\"survived\",\n                 x_vars=[\"class\", \"sex\", \"who\", \"alone\"],\n                 height=5, aspect=.5)\n\n# Draw a seaborn pointplot onto each Axes\ng.map(sns.pointplot, scale=1.3, errwidth=4, color=\"xkcd:plum\")\ng.set(ylim=(0, 1))\nsns.despine(fig=g.fig, left=True)","1e23f183":"sns.set(style=\"whitegrid\")\n\n# Make an example dataset with y ~ x\nrs = np.random.RandomState(7)\nx = rs.normal(2, 1, 75)\ny = 2 + 1.5 * x + rs.normal(0, 2, 75)\n\n# Plot the residuals after fitting a linear model\nsns.residplot(x, y, lowess=True, color=\"g\")\n","08b57fb9":"\"\"\"\nScatterplot with categorical variables\n======================================\n\n\"\"\"\n\nsns.set(style=\"whitegrid\", palette=\"muted\")\n\n# Load the example iris dataset\niris = sns.load_dataset(\"iris\")\n\n# \"Melt\" the dataset to \"long-form\" or \"tidy\" representation\niris = pd.melt(iris, \"species\", var_name=\"measurement\")\niris.head()\n# Draw a categorical scatterplot to show each observation\nsns.swarmplot(x=\"measurement\", y=\"value\", hue=\"species\",\n              palette=[\"r\", \"c\", \"y\"], data=iris)","6e0ea5e1":"\"\"\"\nScatterplot Matrix\n==================\n\n\"\"\"\n\nsns.set(style=\"ticks\")\n\ndf = sns.load_dataset(\"iris\")\nsns.pairplot(df, hue=\"species\")\n","21e08318":"\"\"\"\nDiscovering structure in heatmap data\n=====================================\n\n\"\"\"\n\nsns.set()\n\n# Load the brain networks example dataset\ndf = sns.load_dataset(\"brain_networks\", header=[0, 1, 2], index_col=0)\n\n# Select a subset of the networks\nused_networks = [1, 5, 6, 7, 8, 12, 13, 17]\nused_columns = (df.columns.get_level_values(\"network\")\n                          .astype(int)\n                          .isin(used_networks))\ndf = df.loc[:, used_columns]\n\n# Create a categorical palette to identify the networks\nnetwork_pal = sns.husl_palette(8, s=.45)\nnetwork_lut = dict(zip(map(str, used_networks), network_pal))\n\n# Convert the palette to vectors that will be drawn on the side of the matrix\nnetworks = df.columns.get_level_values(\"network\")\nnetwork_colors = pd.Series(networks, index=df.columns).map(network_lut)\n\n# Draw the full plot\nsns.clustermap(df.corr(), center=0, cmap=\"vlag\",\n               row_colors=network_colors, col_colors=network_colors,\n               linewidths=.75, figsize=(13, 13))","d4fe3ea5":"# displot\nThe most convenient way to quickly understand the univariate distribution in seaborn is to use the `distplot ()` function. By default, it will draw a histogram, and you can also draw the kernel density estimate (KDE).","9df43323":"## kdeplot\nKernel density estimation is used to estimate the unknown density function in probability theory and belongs to one of the non-parametric test methods.\nThrough the kernel density estimation chart, the distribution characteristics of the data sample itself can be seen more intuitively.\nThe specific usage is as follows:","263830f6":"# seaborn has 5 categories and 21 types of pictures\n\n* Relational plots \u5173\u7cfb\u7c7b\u56fe\u8868\n    1. relplot() \u5173\u7cfb\u7c7b\u56fe\u8868\u7684\u63a5\u53e3\uff0c\u5176\u5b9e\u662f\u4e0b\u9762\u4e24\u79cd\u56fe\u7684\u96c6\u6210\uff0c\u901a\u8fc7\u6307\u5b9akind\u53c2\u6570\u53ef\u4ee5\u753b\u51fa\u4e0b\u9762\u7684\u4e24\u79cd\u56fe\n    2. scatterplot() \u6563\u70b9\u56fe\n    3. lineplot() \u6298\u7ebf\u56fe\n\n* Categorical plots \u5206\u7c7b\u56fe\u8868\n    1. c****atplot() \u5206\u7c7b\u56fe\u8868\u7684\u63a5\u53e3\uff0c\u5176\u5b9e\u662f\u4e0b\u9762\u516b\u79cd\u56fe\u8868\u7684\u96c6\u6210\uff0c\uff0c\u901a\u8fc7\u6307\u5b9akind\u53c2\u6570\u53ef\u4ee5\u753b\u51fa\u4e0b\u9762\u7684\u516b\u79cd\u56fe\n    2. stripplot() \u5206\u7c7b\u6563\u70b9\u56fe\n    3. swarmplot() \u80fd\u591f\u663e\u793a\u5206\u5e03\u5bc6\u5ea6\u7684\u5206\u7c7b\u6563\u70b9\u56fe\n    4. boxplot() \u7bb1\u56fe\n    5. violinplot() \u5c0f\u63d0\u7434\u56fe\n    6. boxenplot() \u589e\u5f3a\u7bb1\u56fe\n    7. pointplot() \u70b9\u56fe\n    8. barplot() \u6761\u5f62\u56fe\n    9. countplot() \u8ba1\u6570\u56fe\n\n* Distribution plot \u5206\u5e03\u56fe\n    1. jointplot() \u53cc\u53d8\u91cf\u5173\u7cfb\u56fe\n    2. pairplot() \u53d8\u91cf\u5173\u7cfb\u7ec4\u56fe\n    3. distplot() \u76f4\u65b9\u56fe\uff0c\u8d28\u91cf\u4f30\u8ba1\u56fe\n    4. kdeplot() \u6838\u51fd\u6570\u5bc6\u5ea6\u4f30\u8ba1\u56fe\n    5. rugplot() \u5c06\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u70b9\u7ed8\u5236\u4e3a\u8f74\u4e0a\u7684\u6570\u636e\n\n* Regression plots \u56de\u5f52\u56fe\n    1. lmplot() \u56de\u5f52\u6a21\u578b\u56fe\n    2. regplot() \u7ebf\u6027\u56de\u5f52\u56fe\n    3. residplot() \u7ebf\u6027\u56de\u5f52\u6b8b\u5dee\u56fe\n\n* Matrix plots \u77e9\u9635\u56fe\n    1. heatmap() \u70ed\u529b\u56fe\n    2. clustermap() \u805a\u96c6\u56fe","c8d03e56":"# lineplot\nThe data transmitted by the lineplot function in seaborn must be a pandas array\uff0cwhich is different with matplotlib.\n\nx: x_data\n\ny: y_data\n\nci: The size of the confidence interval drawn when aggregating with the estimator\n\ndata: pandas data","6c1d4ae7":"## pointplot\nThe dot plot represents the central trend estimate of the numerical variable of the scatter plot location and uses error bars to provide some indication of the uncertainty of the estimate.Dot plots may be more useful than bar charts for focusing comparisons between different levels of one or more categorical variables.They are particularly good at showing interactions: how the relationship between the levels of one categorical variable changes between the levels of the second categorical variable.The line connecting each dot from the same tone level allows the interaction to be judged by the difference in slope, which is easier than comparing the height of several sets of dots or bars.","35bdd9eb":"## clustermap","7e798d0c":"## pairplot\n- Variable Relation Group Diagram","0e2f31ce":"# joinplot\n- Used for drawing 2 variables","b14ee5c9":"## catplot\n- The interface of the classification chart, by specifying the kind parameter, you can draw the following eight kinds of charts\n\nstripplot() \n\nswarmplot() \n\nboxplot() \n\nviolinplot() \n\nboxenplot() \n\npointplot() \n\nbarplot() \n\ncountplot() ","da295210":"## barplot(\u6761\u5f62\u56fe)\nThe bar graph represents the estimated value of the central tendency of the numerical variable and the height of each rectangle, and uses error bars to provide some indication of the uncertainty around the estimated value.","95136264":"## violinplo\nViolinplot and boxplot play a similar role. It shows the distribution of quantitative data on multiple levels of one (or more) categorical variables. These distributions can be compared.Unlike all plot components in box plots that correspond to actual data points, violin plots are characterized by kernel density estimates of the underlying distribution","c620e007":"# scatterplot","d131f93d":"# FaceGrid\n- we use it to plot multiple charts\n- there are main three steps\uff1a\n\n1\u3001Instantiate object\n\n2\u3001map, mapped to a specific seaborn chart type\n\n3\u3001add legend","854c401d":"## residplot\nLinear regression residual plot","4dee2a6c":"# boxplot\n* IQR is the interquartile range of the statistical concept, the distance between the first \/ interquartile and the third \/ interquartile\n* N = 1.5IQR If a value> Q3 + N or <\uff311-N, it is an outlier","b3627d9e":"### lmplot\nlmplot is used to draw regression graphs, through lmplot we can intuitively overview the internal relationship of the data","3119d875":"## HexBin\nThe bivariate analogue of the histogram is called the \"hexbin\" graph because it shows the number of observations falling within the hexagonal bin.This graph is suitable for larger data sets.","7e825f56":"Reference material form this link https:\/\/github.com\/fengdu78\/Data-Science-Notes","06704330":"# heatmap\n- Using the heat map, you can see the similarity of multiple features in the data table.","3f576dd7":"# boxnplot\n","b591be89":"## swarmplot\nA classification scatter plot capable of displaying distribution density"}}