{"cell_type":{"73fa647e":"code","745167fc":"code","a98c69b3":"code","4e9cb5fa":"code","722f1725":"code","aef47915":"code","e57ed717":"code","fc117c19":"code","b5cfa35a":"code","b113c395":"code","479d786e":"code","8733e5a4":"markdown","9dace9f5":"markdown","655a3992":"markdown","e44610de":"markdown","f3c7685f":"markdown","114b119b":"markdown","eb629231":"markdown","1310b012":"markdown","82de208e":"markdown","83e0e6f9":"markdown","f282ab44":"markdown"},"source":{"73fa647e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","745167fc":"import zipfile\n\nwith zipfile.ZipFile(\"..\/input\/leaf-classification\/images.zip\", 'r') as zipf:\n    zipf.extractall(\".\")\nwith zipfile.ZipFile(\"..\/input\/leaf-classification\/train.csv.zip\", 'r') as zipf:\n    zipf.extractall(\".\")\nwith zipfile.ZipFile(\"..\/input\/leaf-classification\/test.csv.zip\", 'r') as zipf:\n    zipf.extractall(\".\")    ","a98c69b3":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import log_loss\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nimport matplotlib.pyplot as plt\nimport matplotlib.image as image","4e9cb5fa":"train = pd.read_csv(\".\/train.csv\")\ntrain.head(10)\ntest = pd.read_csv(\".\/test.csv\")\ntest.head(10)\n\nprint(train.shape, test.shape)","722f1725":"images = []\nfor im in os.listdir(\".\/images\/\"):\n    images.append(im)\n\nfor im in images[45:50]:\n    img = image.imread(\".\/images\/\"+im)\n    plt.figure()\n    plt.imshow(img, cmap='binary')","aef47915":"X = train.drop(['id', 'species'], axis=1)\ny = train['species']\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.10, shuffle=True, stratify=y)\n\nlabenc = LabelEncoder()\ny_train = labenc.fit_transform(y_train)\ny_val = labenc.transform(y_val)\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_val = scaler.transform(X_val)","e57ed717":"# Working very nice & getting good log_loss score of 0.077 on validation data & 0.111 on unseen test data. \n\nlogreg = LogisticRegression(random_state=0).fit(X_train, y_train)\ny_pred_log = logreg.predict_proba(X_val)\n\nprint('train score : ', logreg.score(X_train, y_train))\nprint('val score : ', logreg.score(X_val, y_val))\nprint('log loss : ', log_loss(y_val, y_pred_log))","fc117c19":"# Not working good on testing data instead of getting good score on validation & training set.\n# Getting log_loss score of 2.313 on validation data & 2.308 on unseen test data.\n\nsvmclf = SVC(probability=True).fit(X_train, y_train)\ny_pred_svm = svmclf.predict_proba(X_val)\n\nprint('train score : ', svmclf.score(X_train, y_train))\nprint('val score : ', svmclf.score(X_val, y_val))\nprint('log loss : ', log_loss(y_val, y_pred_svm))","b5cfa35a":"# It is also not working good enough instead of getting 100% accuracy on training set & 97.98% accuracy \\\n# on validation set. Getting log_loss score of 0.703 on validation set & 0.744 on unseen test set.\n\nrfclf = RandomForestClassifier(random_state=0).fit(X_train, y_train)\ny_pred_rf = rfclf.predict_proba(X_val)\n\nprint(\"train score : \", rfclf.score(X_train, y_train))\nprint(\"val score : \", rfclf.score(X_val, y_val))\nprint(\"log loss : \", log_loss(y_val, y_pred_rf))","b113c395":"X_test = test.drop('id', axis=1)\nX_test = scaler.transform(X_test)\ny_test = logreg.predict_proba(X_test)\n\n#y_test_rf = rfclf.predict_proba(X_test)\n#y_test_svm = svmclf.predict_proba(X_test)","479d786e":"# Total number of species is 99 & are using as column names in the submission file.\ncols = sorted(train.species.unique())\n\nres = pd.DataFrame(data = y_test, columns = cols)\nresult = pd.DataFrame(data = test['id'], columns=['id'])\n        \nresult = pd.concat([result, res], axis=1)\nresult.head()\n\n# Writing\/Converting dataframe into .csv files.\nresult.to_csv(\"leaf_classification.csv\", header=True, index=False)\nresult.head(10)","8733e5a4":"# Reading training & testing .csv files into a dataframe.\n\nNow, we've total of 193 features which has 64 pixels (or 64 features) of margin, shape & texture each and one is target or the kind of species for which we're classifying. And, 990 total of rows. We're classifying for the 99 species of leaves.","9dace9f5":"# Submission of file.","655a3992":"Splitting training data into training & validation set. Also, using the LabelEncoder() method to convert the labels of target variable or categorical variables into numeric ones.\nAfter that, scaling the data for better use of data.","e44610de":"# Unziping given training & testing files for further use.","f3c7685f":"# Importing all the required libraries.","114b119b":"Now, we'll try to visualize the leaf images randomly that what kind of images we've, what kind of images we're trying to classify & it can be shown that we've images of simple\/single leaves so that the classifier can easily learn what type of a particular leaf is & what kind of species a particular leaf is.","eb629231":"Using **Random Forest Classifier**, it is turned out that it is also not a good classifier as it doesn't get better log_loss score.","1310b012":"Firstly, using **Logistic Regression Classifier** to classify the data & it is fouund out that it is getting 100% accuracy on both training set & validation set. It is because it is able to gather the pattern or able to learn that which combination of pixels refer to which species.","82de208e":"# Predicting probabilities using final model.\nNow, predicting the probabilities for each of the given 99 species for the test data.","83e0e6f9":"Using **Support Vector Machine Classifier**, it is turned out that it's not working properly or not learning well enough as compared to the previous classifier.","f282ab44":"# LEAF CLASSIFICATION USING DIFFERENT ALGORITHMS\n\nHere, we're classifying leaves using different algorithms like Logistic Regression, SVM, Random Forest Classifier & finding accuracy. "}}