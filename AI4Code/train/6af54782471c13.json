{"cell_type":{"171b16bb":"code","165e033a":"code","3ff1c7ac":"code","dbabdef7":"code","1623413b":"code","7cd08749":"code","bccd9ada":"code","65cc42cf":"code","b3723f9b":"code","4075a2e1":"code","880290e9":"code","9c927165":"code","1c3f04b6":"code","992ed4dd":"code","4bcc1bc8":"code","ad6c53b4":"code","cba2fd1a":"code","c2130afc":"code","c2e77727":"code","71ac58b4":"code","c8f2a665":"code","b7d8b2fa":"code","e11b54d2":"code","84ae9164":"code","5432e649":"code","a7efa448":"code","4e992f88":"code","25876c81":"code","72049ce5":"code","fcb02b10":"code","6bda9b26":"code","e4b41a9c":"code","c55a85bd":"code","cf3a8dd3":"code","5cb2f1ba":"code","103e9580":"code","a85679cc":"code","8e36f9af":"code","501b61d4":"code","1c7b7221":"markdown","ae320cbb":"markdown","a31aa5aa":"markdown","f06a95a2":"markdown","43c0da18":"markdown","4a27244d":"markdown","5010a707":"markdown","b53fda12":"markdown","e6e025b4":"markdown","66ea08a4":"markdown","070f9a92":"markdown","742be20b":"markdown","26938f62":"markdown","b5b6d058":"markdown","3bb21e64":"markdown","02c8d1f0":"markdown","39b44f2d":"markdown","f6cd32fd":"markdown","94c9ea46":"markdown","97bc42ce":"markdown","2918f879":"markdown","35de989d":"markdown","2d03e8d9":"markdown"},"source":{"171b16bb":"import numpy as np\nimport pandas as pd","165e033a":"df = pd.read_csv(\"..\/input\/ranzcr-clip-catheter-line-classification\/train.csv\")\n\nLABELS = [\n    'ETT - Abnormal', 'ETT - Borderline', 'ETT - Normal',\n    'NGT - Abnormal', 'NGT - Borderline', 'NGT - Incompletely Imaged', 'NGT - Normal', \n    'CVC - Abnormal', 'CVC - Borderline', 'CVC - Normal',\n    'Swan Ganz Catheter Present'\n]","3ff1c7ac":"df = pd.read_csv(\"..\/input\/ranzcr-clip-catheter-line-classification\/train.csv\")\ndf.head()","dbabdef7":"DEBUG = True\nif DEBUG:\n    df = df.sample(frac = 0.01).reset_index(drop = True)\n    print(df.shape)","1623413b":"from sklearn.model_selection import train_test_split\ntrain, valid =train_test_split(df ,test_size =0.1)\ntrain.head()","7cd08749":"print(train.shape,valid.shape)","bccd9ada":"path= train.iloc[0 ,0]\npath","65cc42cf":"path = \"..\/input\/ranzcr-clip-catheter-line-classification\/train\" + \"\/\" + path + \".jpg\"\npath","b3723f9b":"import cv2 \nimage= cv2.imread(path)\nimage.shape","4075a2e1":"import matplotlib.pyplot as plt\nplt.imshow(image)\nplt.show()","880290e9":"image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\nplt.imshow(image)\nplt.show()","9c927165":"path = train.iloc[1, 0]\npath = \"..\/input\/ranzcr-clip-catheter-line-classification\/train\" + \"\/\" + path + \".jpg\"\nimage2 = cv2.imread(path)\nimage2.shape","1c3f04b6":"plt.imshow(image2)\nplt.show()","992ed4dd":"from albumentations import Resize\ndummy = Resize(width = 300, height = 300)(image = image)\ndummy","4bcc1bc8":"image = Resize(width = 300, height = 300)(image = image)[\"image\"]\nimage.shape","ad6c53b4":"from albumentations.pytorch import ToTensorV2\nimage = ToTensorV2()(image = image)[\"image\"]\nimage.shape","cba2fd1a":"\n\nfrom torch.utils.data import Dataset\n\nclass TrainDataset(Dataset):\n    def __init__(self, df):\n        self.df = df\n        self.studyuid = df[\"StudyInstanceUID\"].values\n        self.labels = df[LABELS].values\n        \n    def __len__(self):\n        return self.df.shape[0]\n    \n    def __getitem__(self, idx):\n        path = self.studyuid[idx]\n        path = \"..\/input\/ranzcr-clip-catheter-line-classification\/train\" + \"\/\" + path + \".jpg\"\n        image = cv2.imread(path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        image = Resize(300, 300)(image = image)[\"image\"]\n        image = ToTensorV2()(image = image)[\"image\"]\n        labels = self.labels[idx]\n        return image, labels\n","c2130afc":"train_dataset = TrainDataset(train)\ntrain_dataset[0]","c2e77727":"image, label = train_dataset[0]\nplt.imshow(image.permute(1, 2, 0))\nplt.show()\nprint(label)","71ac58b4":"from torch.utils.data import DataLoader","c8f2a665":"train_loader = DataLoader(train_dataset, batch_size = 8, shuffle = True)","b7d8b2fa":"for batch in train_loader:\n    print(batch[0].shape)\n","e11b54d2":"valid_dataset = TrainDataset(valid)\nvalid_loader = DataLoader(valid_dataset, batch_size = 16, shuffle = False)","84ae9164":"import sys\nsys.path.append('..\/input\/pytorch-image-models\/pytorch-image-models-master')\nimport timm\nfrom pprint import pprint\npprint(timm.list_models(pretrained = True))","5432e649":"import torch.nn as nn\n\nclass Effnet(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.effnet = timm.create_model(model_name = \"tf_efficientnet_b0\", pretrained = False)\n        n_features = self.effnet.classifier.in_features\n        self.effnet.classifier = nn.Linear(n_features, len(LABELS))\n    \n    def forward(self, x):\n        x = self.effnet(x)\n        return x\n","a7efa448":"model = Effnet()\nmodel","4e992f88":"import torch\nDEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\"","25876c81":"model = model.to(DEVICE)\nprint(DEVICE)","72049ce5":"criterion = nn.BCEWithLogitsLoss()","fcb02b10":"optimizer = torch.optim.Adam(model.parameters())","6bda9b26":"model.train()\nfor X, y in train_loader:\n    optimizer.zero_grad()\n    X = X.float().to(DEVICE)\n    y = y.float().to(DEVICE)\n    pred = model(X)\n    loss = criterion(pred, y)\n    loss.backward()\n    optimizer.step()","e4b41a9c":"model.eval()\nvalid_loss = 0\nwith torch.no_grad():\n    for X, y in valid_loader:\n        X = X.float().to(DEVICE)\n        y = y.float().to(DEVICE)\n        pred = model(X)\n        loss = criterion(pred, y)\n        valid_loss += loss.item()\nvalid_loss \/= len(valid_loader)\nprint(\"Loss:\", valid_loss)","c55a85bd":"model = Effnet().to(DEVICE)\n\ncriterion = nn.BCEWithLogitsLoss()\noptimizer = torch.optim.Adam(model.parameters())\n\nbest_loss = np.inf\nfor epoch in range(10):\n    model.train()\n    for X, y in train_loader:\n        optimizer.zero_grad()\n        X = X.float().to(DEVICE)\n        y = y.float().to(DEVICE)\n        pred = model(X)\n        loss = criterion(pred, y)\n        loss.backward()\n        optimizer.step()\n    model.eval()\n    valid_loss = 0\n    with torch.no_grad():\n        for X, y in valid_loader:\n            X = X.float().to(DEVICE)\n            y = y.float().to(DEVICE)\n            pred = model(X)\n            loss = criterion(pred, y)\n            valid_loss += loss.item()\n    valid_loss \/= len(valid_loader)\n    print(f\"EPOCH:{epoch}, Loss:{valid_loss}\")\n    if valid_loss < best_loss:\n        best_loss = valid_loss\n        torch.save(model.state_dict(), \"effnet.pth\")\n        print(\"saved...\")","cf3a8dd3":"class TestDataset(Dataset):\n    def __init__(self, df):\n        self.df = df\n        self.studyuid = df[\"StudyInstanceUID\"].values\n        \n    def __len__(self):\n        return self.df.shape[0]\n\n    def __getitem__(self, idx):\n        path = self.studyuid[idx]\n        path = \"..\/input\/ranzcr-clip-catheter-line-classification\/test\" + \"\/\" + path + \".jpg\"\n        image = cv2.imread(path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        image = Resize(300, 300)(image = image)[\"image\"]\n        image = ToTensorV2()(image = image)[\"image\"]\n        return image","5cb2f1ba":"test = pd.read_csv(\"..\/input\/ranzcr-clip-catheter-line-classification\/sample_submission.csv\")\ntest_dataset = TestDataset(test)\ntest_loader = DataLoader(test_dataset, batch_size = 32, shuffle = False)","103e9580":"model = Effnet().to(DEVICE)\nmodel.load_state_dict(torch.load(\".\/effnet.pth\"))","a85679cc":"submit_preds = []\n\nmodel.eval()\nwith torch.no_grad():\n    for X in test_loader:\n        X = X.float().to(DEVICE)\n        submit_preds.append(model(X).sigmoid().to(\"cpu\"))\n    submit_preds = np.concatenate([p.numpy() for p in submit_preds], axis = 0)\n","8e36f9af":"submit = pd.DataFrame(submit_preds, columns = LABELS)\nsubmit.head()","501b61d4":"submit[\"StudyInstanceUID\"] = test[\"StudyInstanceUID\"]\nsubmit = pd.concat([submit.iloc[:, -1], submit.iloc[:, :-1]], axis = 1)\nsubmit.to_csv(\"submission.csv\", index = False)","1c7b7221":"It is a loss function. After scaling the output result to the range of 0 to 1 (sigmoid function), the error from the prediction is calculated.","ae320cbb":"4. DataLoader\n","a31aa5aa":"The model uses EfficientNet.","f06a95a2":"First, put it in learning mode with .train. I'm not sure what I'm doing.\n\nReset the optimizer once with .zero_grad before predicting.\n\nThe for statement pulls data from train_loader. I took it out as X and y.\n\nWhen learning pytorch, it is necessary to make it a float type, so let's convert it with .float.\n\nIn addition, it is necessary to set CPU or GPU with to (DEVICE) even for the data to be included in the model. This is also easy to forget.\n\nIf you put X in model, it will be output as a prediction label through EfficientNet, so let's pass it to the loss function.","43c0da18":"\nThe dataset is created in the class.\n\ninit: Initialization condition. The argument is a data frame such as train. Since self is essential, let's write it for the time being.\n\nlen: Required to define the data size. It is basically the number of rows of data passed at initialization.\n\ngetitem: Required when retrieving data. index is the argument.\n\nWhen retrieving data, the index becomes an argument, so for example, when 0 is entered, the first path of studyuid will be the target.\n\nAfter that, the same process as before is executed and the image data is output as image and the corresponding label (correct answer) is output as labels.****","4a27244d":"Check the performance with the evaluation data.\n\nFirst change to evaluation mode with .eval. I don't know what this is doing either. .. ..\n\nAt the time of evaluation, I do not want to change the parameters of the model, so lock it with torch.no_grad.\n\nLet's take out Xy and make it a float type and predict it in the same way as when learning.\n\nNext we calculate the loss function, but this time we don't need to backward the error to the model.\n\nLet's average the error in all batches. This is the performance in the first learning.","5010a707":"5. Modeling","b53fda12":"Put the created dataset in the data loader.","e6e025b4":"Create a dataset for test. Almost the same as for learning.\n\nPlease note that the path is the path of test.\n\nAlso, since it does not have a correct label, the output is only image.","66ea08a4":"\nbatch_size: How many sheets to take out at one time. The more it is, the faster it learns, but it uses memory. The smaller it is, the more memory is suppressed, but it takes longer to learn, and it is greatly affected by the characteristics of one sheet.\n\nshuffle: Take out in random order.\n\nThere are other things such as drop_last, so please check them if you want to learn in earnest.","070f9a92":"There are several ways to use EfficientNet.\n\nThis time I used a set of image classification models called timm. Since it is uploaded to the Dataset, let's put it in the input from \"+ Add data\".\n\nThere is also a way to install it with pip install, but in this competition you can not use it because you can not connect to the net at the time of submission.","742be20b":"\nWhen you create a dataset, you pass in a pandas dataframe. This is the init argument.\n\nLet's actually pass 0 and see the first data.\n\nImage data is output first, and label data is output next.","26938f62":"You have defined a dataset and a data loader.\n\nMainly doing the same as valid_loader","b5b6d058":"Load the data from test_loader and pass it to the model.\n\nLet's scale the output value from 0 to 1 with .sigmoid.\n\nIf you do not make the data correspond to cpu, an error will occur later, so add to (\"cpu\").\n\nPut the prediction result of each batch in the list (submit_preds), and finally join it in the row direction (axis = 0) with .concatenate of numpy.\n\nYou now have a forecast for submission.","3bb21e64":"It is an optimization method. There are various things, but I chose Adam, which is a major one.\n\nLet's pass the parameters of the model we made earlier","02c8d1f0":"7. Forecast","39b44f2d":"\nIn this way, we have created a system that retrieves images and labels using only indexes.","f6cd32fd":"Create a class using Module in torch.nn.\n\nSince super and init are fixed phrases, let's write them without worrying about them.\n\nCreate EfficientNet with timing.create_model. Select the model name to specify from the list output earlier.\n\nEfficientNet has B0 to B7, and this time it is B0.\n\nIf pretrained = True, it will be a trained model, but it cannot be used with net OFF because parameters need to be downloaded from the net.\n\nI want to change the final output format, so replace the .classifier part with Linear (fully connected layer).\n\nSince the input size at this time is required, let's get it as n_features. The output size is the number of LABELS you want to predict.\n\nforward is a function for actually learning (predicting). Returns the result of passing through EfficientNet with the input as x.","94c9ea46":"Import the data loader","97bc42ce":"All data can be retrieved with the for statement.\n\nSince batch_size is set to 8, 8 sheets of data are output at once.","2918f879":"I want to recreate the model once, so I summarized what I have done so far.\n\nDefine the minimum error as best_loss. The start is endless.\n\nIf the error in the evaluation data is smaller than the minimum error so far, update it. Then save the model.\n\nBy doing this, the model with the smallest error will be overwritten by the end of all training.\n\nThis is the end of learning. What I introduced this time is at least what is necessary to build a model","35de989d":"Specify whether to use CPU or GPU for calculation.\n\nYou can turn on the GPU from the \"setting\" on the far right. (Currently 43 hours a week free)\n\nIf it is ON, torch.cuda.is_available will be True, so DEVICE will be cuda (GPU type). If False, it remains the CPU.","2d03e8d9":"6. Learning\nThe steps to learn are as follows.\n\n\u30fb Determine the loss function\n\n\u30fb Determine the optimizer\n\n\u30fb Train with train_loader\n\n-Check the performance with valid_loader"}}