{"cell_type":{"dfa207dc":"code","aa01daae":"code","6981198c":"code","b8ed44ab":"code","0843e31e":"code","15f412f3":"code","8ee8c0cf":"code","83803f14":"code","05721c3b":"code","7769c5e6":"code","c8d189b7":"code","f1d4b264":"code","8f1a2e05":"code","0c4003bb":"code","f6cc9527":"code","75124f61":"code","03588bf6":"code","ff31200c":"code","6bbed545":"code","e53a4534":"code","2fe09d19":"code","78df24ec":"code","c5fbbf4a":"code","43e0d7f6":"code","de72a8e4":"code","353db65a":"code","1c8921e0":"code","f703a34f":"code","5818950c":"code","66c88cf8":"code","41a6698a":"markdown","eded3c50":"markdown","babf6cfd":"markdown","c2866fda":"markdown","a6dd4ace":"markdown","b162c5c2":"markdown","52f487b1":"markdown","f0180289":"markdown","098abcef":"markdown","eb7e34b6":"markdown","9afb7d3e":"markdown","7ccaa5fa":"markdown","24aaa263":"markdown","91832eaf":"markdown","5be5f5c5":"markdown","58323c4c":"markdown","5e34e8af":"markdown","8e205801":"markdown","9fea3c4b":"markdown","113ff2de":"markdown","e3e5f074":"markdown","0eaed275":"markdown","ea174c25":"markdown","1d2b13e9":"markdown","0f7d650a":"markdown","439e2ede":"markdown","fee29a22":"markdown"},"source":{"dfa207dc":"import collections\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom datetime import datetime\nfrom datetime import timedelta\nimport matplotlib.pyplot as plt\n\nimport pycountry\nimport plotly\nimport plotly.io as pio\nimport plotly.express as px\n\nfrom ipywidgets import interact","aa01daae":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv')","6981198c":"train.head()","b8ed44ab":"print(f'{train.shape[0]} observations and {train.shape[1]} columns')","0843e31e":"train.info()","15f412f3":"# Convert Date column as datetime\ntrain['Date_plotly'] = train['Date']\ntrain['Date'] = pd.to_datetime(train['Date'])\n\nprint(f\"from {min(train['Date'])} to {max(train['Date'])}\")","8ee8c0cf":"# Rename column names\ntrain = train.rename(columns = {'Province\/State':'Province_State',\n                                'Country\/Region':'Country_Region', \n                                'Lat': 'Latitude', \n                                'Long':'Longitude', \n                                'ConfirmedCases': 'Confirmed_Cases'})","83803f14":"train.isnull().sum()","05721c3b":"# Fill NAs with Country_Region\ntrain['Province_State'] = train['Province_State'].fillna(train['Country_Region'])","7769c5e6":"# Create aggregated dataframe\ntrain_agg = train[['Country_Region', \n                   'Date', \n                   'Confirmed_Cases', \n                   'Fatalities']].groupby(['Country_Region', 'Date'], as_index = False).agg({'Confirmed_Cases':'sum', 'Fatalities':'sum'})","c8d189b7":"fig = plt.figure(figsize=(15,10))\nplt.title('COVID cases evolution in China', fontsize=20)\n\nax1 = fig.add_subplot(111)\nsns.lineplot(x = 'Date', y='Confirmed_Cases', data = train_agg[train_agg['Country_Region'] == 'China'], ax=ax1)\nax1.axvline('2020-02-02', color='red', linestyle='--')\n\nax2 = ax1.twinx()\nsns.lineplot(x = 'Date', y='Fatalities', data = train_agg[train_agg['Country_Region'] == 'China'], color='yellow', ax=ax2)\n\nfig.legend(('Cumulated confirmed cases','Lockdown start date','Cumulated fatalities'),loc=\"upper right\")\nax1.grid()\nplt.show()","f1d4b264":"fig = plt.figure(figsize=(15,10))\nplt.title('COVID cases evolution in South Korea', fontsize=20)\n\nax1 = fig.add_subplot(111)\nsns.lineplot(x = 'Date', y='Confirmed_Cases', data = train_agg[train_agg['Country_Region'] == 'Korea, South'], ax=ax1)\n\nax2 = ax1.twinx()\nsns.lineplot(x = 'Date', y='Fatalities', data = train_agg[train_agg['Country_Region'] == 'Korea, South'], color='yellow', ax=ax2)\n\nfig.legend(('Cumulated confirmed cases','Cumulated fatalities'),loc=\"upper right\")\nax1.grid()\nplt.show()","8f1a2e05":"fig = plt.figure(figsize=(15,10))\nplt.title('COVID cases evolution in Singapore', fontsize=20)\n\nax1 = fig.add_subplot(111)\nsns.lineplot(x = 'Date', y='Confirmed_Cases', data = train_agg[train_agg['Country_Region'] == 'Singapore'], ax=ax1)\nax1.axvline('2020-03-20', color='red', linestyle='--')\n\nax2 = ax1.twinx()\nsns.lineplot(x = 'Date', y='Fatalities', data = train_agg[train_agg['Country_Region'] == 'Singapore'], color='yellow', ax=ax2)\n\nfig.legend(('Cumulated confirmed cases','Lockdown start date','Cumulated fatalities'),loc=\"upper right\")\nax1.grid()\nplt.show()","0c4003bb":"fig = plt.figure(figsize=(15,10))\nplt.title('COVID cases evolution in France', fontsize=20)\n\nax1 = fig.add_subplot(111)\nsns.lineplot(x = 'Date', y='Confirmed_Cases', data = train_agg[train_agg['Country_Region'] == 'France'], ax=ax1)\n\nax2 = ax1.twinx()\nsns.lineplot(x = 'Date', y='Fatalities', data = train_agg[train_agg['Country_Region'] == 'France'], color='yellow', ax=ax2)\n\nfig.legend(('Cumulated confirmed cases','Cumulated fatalities'),loc=\"upper right\")\nax1.grid()\nplt.show()","f6cc9527":"fig = plt.figure(figsize=(15,10))\nplt.title('COVID cases evolution in Italy', fontsize=20)\n\nax1 = fig.add_subplot(111)\nsns.lineplot(x = 'Date', y='Confirmed_Cases', data = train_agg[train_agg['Country_Region'] == 'Italy'], ax=ax1)\nax1.axvline('2020-03-08', color='red', linestyle='--')\n\nax2 = ax1.twinx()\nsns.lineplot(x = 'Date', y='Fatalities', data = train_agg[train_agg['Country_Region'] == 'Italy'], color='yellow', ax=ax2)\n\nfig.legend(('Cumulated confirmed cases','Lockdown start date','Cumulated fatalities'),loc=\"upper right\")\nax1.grid()\nplt.show()","75124f61":"# List of the countries affected by covid during the studied period\ncountries_with_confirmed_cases = np.ravel(train_agg.loc[:, ['Country_Region','Confirmed_Cases']].groupby(['Country_Region']).sum() == 0)\n\n# Find index of list where value is False\ncountries_with_confirmed_cases_list = [i for i, value in enumerate(countries_with_confirmed_cases) if value == False] \n\n# Generate list of countries with at least 1 confirmed case in the study period\nconfirmed_cases_list = train_agg['Country_Region'].unique()[countries_with_confirmed_cases_list]","03588bf6":"@interact\ndef confirmed_cases_over_time(country = confirmed_cases_list):\n    fig = plt.figure(figsize=(15,10))\n    plt.title('COVID cases evolution', fontsize=20)\n    \n    ax1 = fig.add_subplot(111)\n    sns.lineplot(x = 'Date', y='Confirmed_Cases', data = train_agg[train_agg['Country_Region'] == country], ax=ax1)\n\n    ax2 = ax1.twinx()\n    sns.lineplot(x = 'Date', y='Fatalities', data = train_agg[train_agg['Country_Region'] == country], color='yellow', ax=ax2)\n\n    fig.legend(('Cumulated confirmed cases','Cumulated fatalities'),loc=\"upper right\")\n    ax1.grid()\n    plt.show()","ff31200c":"# Date format supported by plotly\ntrain_agg['Date'] = train_agg['Date'].dt.strftime('%Y-%m-%d')","6bbed545":"# Matching function between the ISO code and country names\ndef fuzzy_search(country):\n    try:\n        result = pycountry.countries.search_fuzzy(country)\n    except Exception:\n        return np.nan\n    else:\n        return result[0].alpha_3\n\n# Manually change name of Korea and Taiwan countries and improve matching\ntrain_agg.loc[train_agg['Country_Region'] == 'Korea, South', 'Country_Region'] = 'Korea, Republic of'\ntrain_agg.loc[train_agg['Country_Region'] == 'Taiwan*', 'Country_Region'] = 'Taiwan'\n\n# ISO mapping for countries in train\niso_map = {country: fuzzy_search(country) for country in train_agg['Country_Region'].unique()}\n\n# Mapping to train\ntrain_agg['iso'] = train_agg['Country_Region'].map(iso_map)\n\n# Many thanks to TeYang Lau for that part","e53a4534":"# Map and find countries without any ISO\ntrain_agg['iso'] = train_agg['Country_Region'].map(iso_map)\ntrain_agg[train_agg['iso'].isna()]['Country_Region'].unique()","2fe09d19":"# Use logscale to have better differenciation of colours in the final plot\ntrain_agg['Fatalities_log10']= np.log10(train_agg['Confirmed_Cases']).replace(-np.inf, 0)","78df24ec":"plt.figure(figsize=(15,10))\nfig = px.choropleth(train_agg, locations=\"iso\",\n                    color=\"Fatalities_log10\",\n                    hover_name=\"Country_Region\",\n                    animation_frame='Date',\n                    color_continuous_scale=\"Blues\")\nfig.show()","c5fbbf4a":"# Aggregated dataframe sorted by Date\ntrain_agg = train_agg.sort_values(['Date']).reset_index()","43e0d7f6":"dates = pd.to_datetime(train_agg['Date']).apply(lambda x: x.strftime('%Y-%m-%d')).unique()","de72a8e4":"@interact\ndef top5(infected = ['Fatalities', 'Confirmed_Cases'] ,date = dates):\n    top5_df = train_agg[(train_agg[infected]>0) & (train_agg['Date'] == date)].groupby('Country_Region').max().sort_values([infected], ascending=False)[:5]\n    print(top5_df)","353db65a":"# Define covid death rate\ntrain_agg['Rate'] = np.where(train_agg['Fatalities'] != 0, np.round((train_agg['Fatalities']\/train_agg['Confirmed_Cases']),4),0)","1c8921e0":"def top5_covid_death_rate():\n    top5_df = train_agg.groupby(['Country_Region']).mean().sort_values(['Rate'], ascending=False)[:5]['Rate']\n    print(top5_df)\n    \ntop5_covid_death_rate()","f703a34f":"countries_with_fatalities = np.ravel(train_agg.loc[:, ['Country_Region','Fatalities']].groupby(['Country_Region']).sum() < 1)\ntrain_agg['Country_Region'] = train_agg['Country_Region'].sort_values()\ncountries_with_fatalities_list = [i for i, value in enumerate(countries_with_fatalities) if value == False] \nfatalities_list = np.ravel(sorted(train_agg['Country_Region'].unique()))[countries_with_fatalities_list]","5818950c":"def top5_covid_death_rate_adjusted():\n    dicti = {}\n    for countries in fatalities_list:\n        \n        min_day_fatalities = pd.to_datetime(min(train_agg.loc[(train_agg['Country_Region']==countries) & (train_agg['Fatalities']!=0), 'Date']))\n        max_day_fatalities = pd.to_datetime(max(train_agg.loc[(train_agg['Country_Region']==countries) & (train_agg['Fatalities']!=0), 'Date']))\n        duration = (max_day_fatalities - min_day_fatalities).days\n        \n        if duration != 0:\n            dicti[countries] = sum(train_agg[train_agg['Country_Region']==countries].sort_values(['Rate'], ascending=False)['Rate'])\/duration\n        else:\n            dicti[countries] = 0\n    \n    # top5 highest rate\n    dicti = sorted(dicti.items(), key=lambda elm: elm[1], reverse=True)\n    dicti = dict(collections.OrderedDict(dicti))\n    \n    for i in range(5):\n        print(list(dicti.keys())[i], list(dicti.values())[i])\n\ntop5_covid_death_rate_adjusted()","66c88cf8":"train_agg.groupby(['Country_Region']).std().sort_values(['Rate'], ascending=False)[:5]['Rate']","41a6698a":"## <div id=\"summary\">Table of contents<\/div>\n\n**<font size=\"2\"><a href=\"#chap1\">1. Import libraries<\/a><\/font>**\n**<br><font size=\"2\"><a href=\"#chap2\">2. Overview of the data and small cleaning<\/a><\/font>**\n**<br><font size=\"2\"><a href=\"#chap3\">3. Confirmed cases and Fatalities<\/a><\/font>**\n**<br><font size=\"2\"><a href=\"#chap4\">4. Top 5 confirmed cases and fatalities<\/a><\/font>**\n**<br><font size=\"2\"><a href=\"#chap5\">5. COVID death rate, should we believe it ?<\/a><\/font>**","eded3c50":"<div align='justify'><font size='3'>The following function displays top5 countries which have highest death rate due to COVID","babf6cfd":"## Italy","c2866fda":"<div align='justify'><font size='3'>Why is Italy one of the most affected country in Europe ?\n<br><br>\nIt is essentially in the demographics of Italy that we find an explanation for the fact that it is the second most affected country in the world. Italy has one of the oldest populations in Europe... and even in the world.\n47.3 in Italy vs 42.3 in France. More vulnerable to respiratory pathologies, the elderly are more likely to suffer from the complications of such a syndrome.","a6dd4ace":"# <div id=\"chap3\">Confirmed cases and Fatalities<\/div>","b162c5c2":"<hr>\n<br>\n<div align='justify'><font color=\"#353B47\" size=\"4\">Thank you for taking the time to read this notebook. I hope that I was able to answer your questions or your curiosity and that it was quite understandable. <u>any constructive comments are welcome<\/u>. They help me progress and motivate me to share better quality content. I am above all a passionate person who tries to advance my knowledge but also that of others. If you liked it, feel free to <u>upvote and share my work.<\/u> <\/font><\/div>\n<br>\n<div align='center'><font color=\"#353B47\" size=\"3\">Thank you and may passion guide you.<\/font><\/div>","52f487b1":"<div align='center'><font size=\"5\" color='#353B47'>COVID19<\/font><\/div>\n<div align='center'><font size=\"4\" color=\"#353B47\">Visualizations and interactive chloropleth<\/font><\/div>\n<br>\n\n<hr>\n\n![corona.jpeg](attachment:corona.jpeg)","f0180289":"<div align='justify'><font size='3'>Why rate should not be taken for granted ?\n<br><br>\nThere is selection bias in the data. If a large population of people who, if gotten a test, would have tested negative, decide not to get tests, then their data goes dark. The confirmed cases in datasets released by governments and academic institutions are only from people who voluntarily go to them to be tested. People in the confirmed cases data are more likely to be at risk of death from the coronavirus because the death rate is calculated as the number of people who die from the coronavirus over the number of confirmed cases, the death rate is a lot higher than it actually is because the number of confirmed cases is biased.\n<br><br>\nHowever, In the US, many of the cases are not declared as it costs a lot of money to get tested. the death rate is biased and likely underestimated.","098abcef":"<div align='justify'><font size='3'>Turns out that Sudan have highest death rate","eb7e34b6":"<div align='justify'><font size='3'>Containment of unaffected people is at the heart of the Chinese response. As soon as an infection zone is established, schools, theatres and restaurants are closed. In the Wuhan region, 15 million healthy people have been forced to stay at home.","9afb7d3e":"sources:\n* https:\/\/www.statista.com\/statistics\/275395\/median-age-of-the-population-in-italy\/\n* https:\/\/www.statista.com\/statistics\/275391\/median-age-of-the-population-in-france\/","7ccaa5fa":"# <div id=\"chap1\">Import libraries<\/div>","24aaa263":"## Korea","91832eaf":"# <div id=\"chap2\">Overview of the data and small cleaning<\/div>","5be5f5c5":"## Time series worldmap","58323c4c":"## France","5e34e8af":"<div align='justify'><font size='3'>Quite clumsy though, here I consider the whole period of study. It it nonsense if the virus hasn't spread yet. Let's fix that.","8e205801":"<div align='justify'><font size='3'>Singapore is a top-notch health system, draconian tracing and containment measures, and a small population that\u2019s largely accepting of government\u2019s expansive orders. Singapore was aggressive out of the gate and has continued to be. It was one of the first countries to impose restrictions on anyone with recent travel history to China and parts of South Korea. It has a strict hospital and home quarantine regimen for potentially infected patients and is extensively tracing anyone they may have been in contact with.","9fea3c4b":"<div align='justify'><font size='3'>Let's aggregate the dataframe in order to get the cumulative confirmed cases and fatalities over time per country","113ff2de":"<div align='justify'><font size='3'>Korea is a particular case as it is one of the countries that has been most infected with Covid-19 but also has the lowest mortality rate. The country has contained the epidemic without containment or coercive measures. Another path has been chosen: hygiene, systematic detection of the sick, information and individualized care.","e3e5f074":"## Singapore","0eaed275":"<div align='justify'><font size='3'>Coronavirus disease (COVID-19) is an infectious disease caused by a new virus.\nThe disease causes respiratory illness (like the flu) with symptoms such as a cough, fever, and in more severe cases, difficulty breathing. You can protect yourself by washing your hands frequently, avoiding touching your face, and avoiding close contact with people who are unwell.\n<br><br>\nI will try to show throught this notebook some interesting curves on how the virus spread from its origin location (Wuhan) to the world and explain what can be the limit of characterising the violence of the virus only by its death rate. ","ea174c25":"## China","1d2b13e9":"# <div id=\"chap5\">COVID death rate, should we believe it ?<\/div>","0f7d650a":"## Other countries","439e2ede":"# <div id=\"chap4\">Top 5 confirmed cases and fatalities<\/div>","fee29a22":"<div align='justify'><font size='3'>The following function shows the 5 countries with most confirmed cases and fatalities according to the chosen date"}}