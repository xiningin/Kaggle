{"cell_type":{"2989dbbc":"code","fc33cfff":"code","162bb1e4":"code","911e9aa7":"code","0deb859a":"code","ed78ab9e":"code","ddb0a6c8":"code","2e6a7452":"code","053b6628":"code","86723e80":"markdown"},"source":{"2989dbbc":"import  pandas as pd\nfrom numpy import set_printoptions\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n# load data\npd.set_option('max_columns', None)\ndf_train=pd.read_csv(\"..\/input\/widsdatathon2021\/TrainingWiDS2021.csv\")\ndf_test=pd.read_csv(\"..\/input\/widsdatathon2021\/UnlabeledWiDS2021.csv\")\ndf_train=df_train.drop(labels=['Unnamed: 0'],axis=1)\ndf_test=df_test.drop(labels=['Unnamed: 0'],axis=1)","fc33cfff":"df_train=df_train.fillna(0)\ndf_test=df_test.fillna(0)\ncols = df_train.select_dtypes([np.number]).columns\nstring_columns = [column for column in df_train.columns if column not in cols]","162bb1e4":"for s_col in string_columns:\n    df_train[s_col]=df_train[s_col].astype('category')\n    df_test[s_col]=df_test[s_col].astype('category')\ncat_columns = df_train.select_dtypes(['category']).columns\ndf_train[cat_columns] = df_train[cat_columns].apply(lambda x: x.cat.codes)\ncat_columns = df_test.select_dtypes(['category']).columns\ndf_test[cat_columns] = df_test[cat_columns].apply(lambda x: x.cat.codes)","911e9aa7":"X=df_train.drop(labels=['diabetes_mellitus'],axis=1)\ny=df_train['diabetes_mellitus']\nX_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.30, random_state=1)","0deb859a":"### Finding non constant features\nvar_thres=VarianceThreshold(threshold=0)\nvar_thres.fit(X_train)\nconstant_columns = [column for column in X_train.columns\n                    if column not in X_train.columns[var_thres.get_support()]]\nX_train.drop(constant_columns,axis=1)\ndf_test.drop(constant_columns,axis=1)","ed78ab9e":"import seaborn as sns\nimport matplotlib.pyplot as plt\ncorrmat = X_train.corr()\nfig, ax = plt.subplots()\nfig.set_size_inches(11,11)\nsns.heatmap(corrmat)","ddb0a6c8":"# with the following function we can select highly correlated features\n# it will remove the first feature that is correlated with anything other feature\n\ndef correlation(dataset, threshold):\n    col_corr = set()  # Set of all the names of correlated columns\n    corr_matrix = dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if abs(corr_matrix.iloc[i, j]) > threshold: # we are interested in absolute coeff value\n                colname = corr_matrix.columns[i]  # getting the name of column\n                col_corr.add(colname)\n    return col_corr\ncorr_features = correlation(X_train, 0.9)\nf_X_train=X_train.drop(corr_features,axis=1)\nf_X_validation=X_validation.drop(corr_features,axis=1)\nf_df_test=df_test.drop(corr_features,axis=1)","2e6a7452":"from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n# Spot Check Algorithms\nmodels = []\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\n# evaluate each model in turn\nresults = []\nnames = []\nfor name, model in models:\n\tkfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)\n\tcv_results = cross_val_score(model, f_X_train, Y_train, cv=kfold, scoring='accuracy')\n\tresults.append(cv_results)\n\tnames.append(name)\n\tprint('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))","053b6628":"# Make predictions on validation dataset\nmodel = LinearDiscriminantAnalysis()\nmodel.fit(f_X_train, Y_train)\npredictions = model.predict(f_df_test)\nf_df_test[\"diabetes_mellitus\"]=predictions\nfinal_df=f_df_test[[\"encounter_id\",\"diabetes_mellitus\"]]","86723e80":"# **Work in progress....** "}}