{"cell_type":{"7252d2d8":"code","a27ba9fe":"code","cbc01588":"code","a36424d4":"code","510e29b2":"code","7f201d5e":"code","ea685231":"code","6fd34b44":"code","1b67b0a2":"code","8643e0d2":"code","61e3cc76":"code","dcff0879":"code","777ab1a9":"code","2634f794":"code","5041a466":"code","4e5bee8c":"code","e07412c1":"code","db1098e2":"code","df925db8":"code","48bfe234":"code","2d39906f":"code","803bc267":"code","19c78ffb":"code","ef9078f5":"code","4f537916":"code","5c8b3b2c":"code","fdf5457e":"code","916b8cb5":"code","2baf1103":"code","af133c7a":"code","f8629d98":"code","47e70666":"code","9628ae31":"code","0fe28e94":"code","046c7c17":"code","f6e9c566":"code","c540f37c":"code","c1d7098c":"code","2ace9ac8":"code","157e096e":"code","9e5ee589":"code","c0359061":"code","16ff79d2":"code","5e5dc7d0":"code","2ebdd7c0":"code","ea83833e":"code","0268daff":"code","ff558b85":"code","a45abbd2":"code","b928d67f":"code","78646c98":"code","e085cf85":"code","a85a46c6":"code","e119479e":"code","c259bf9e":"code","4622676f":"code","7b0aca4c":"code","1616b269":"code","3e95082a":"code","84abb3c8":"code","a39d0748":"code","bbdaaefc":"code","8d5e0f2d":"code","f17d43f9":"code","3efb2bd3":"code","9417ce15":"code","906cb0a8":"code","1c69f3fb":"code","2449902a":"code","c6f316b8":"code","cffb3359":"code","a38ee94e":"code","3106d31b":"code","9aed666c":"code","f54ecbc7":"code","3edbb766":"code","4a3cb9e0":"code","805c86d5":"code","0dc7bb49":"code","4d3572e3":"code","2986a11e":"code","732f0246":"code","dc4d066f":"code","e61bd527":"code","ad288540":"code","934327d3":"code","d164c5e7":"code","a3808ddf":"code","6feacb05":"code","4eb648e7":"code","3952256b":"code","951a847d":"code","7fffd773":"code","6d02c345":"code","b4bd7045":"code","f802ee11":"code","b6301238":"code","15d95898":"code","eca17ae9":"code","ac0a501c":"code","1d213793":"code","37ccf854":"code","50fc3967":"code","4339ce50":"code","12c3649f":"code","f7320944":"code","0c078c16":"code","b00ae59c":"code","5493a7fc":"code","cb70c95d":"code","87f354e3":"code","7dddfbeb":"code","bc14de65":"code","c8c6396e":"code","36ed4ab7":"code","d4537a7e":"markdown","4e0eba5b":"markdown","6af1ad84":"markdown","c464441c":"markdown","c6bb52f7":"markdown","552bffe5":"markdown","d0f46691":"markdown","c9b968a1":"markdown","211edf88":"markdown","1b053d14":"markdown","bdce378c":"markdown","49df955d":"markdown","f21d644a":"markdown","09e3f08e":"markdown","c2822740":"markdown","79a607e7":"markdown","590818eb":"markdown","4fe6acd6":"markdown","55936c5a":"markdown","a5631e61":"markdown","7a12c966":"markdown","ea128f8e":"markdown","a62df3e9":"markdown","5d4a8a82":"markdown","071bf063":"markdown","f0f1e9ad":"markdown","65cd76eb":"markdown","bee02ebe":"markdown","48ee54dc":"markdown","0f0cf091":"markdown","615ba14b":"markdown","cc72698b":"markdown","a92057c7":"markdown","8e78621f":"markdown","8634815a":"markdown","27fe47fc":"markdown","345018ad":"markdown","abfa1567":"markdown","bbb7547e":"markdown"},"source":{"7252d2d8":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os","a27ba9fe":"os.listdir()","cbc01588":"con = sqlite3.connect('..\/input\/database.sqlite')","a36424d4":"#filtering only positive and negative reviews i.e. \n# not taking into consideration those reviews with Score=3\n# SELECT * FROM Reviews WHERE Score != 3 LIMIT 500000, will give top 500000 data points\n# you can change the number to any other number based on your computing power\n\n# filtered_data = pd.read_sql_query(\"\"\" SELECT * FROM Reviews WHERE Score != 3 LIMIT 500000\"\"\", con) \n# for tsne assignment you can take 5k data points\n\nfiltered_data = pd.read_sql_query(\"\"\" SELECT * FROM Reviews WHERE Score != 3 LIMIT 5000\"\"\", con) ","510e29b2":"# Give reviews with Score>3 a positive rating, and reviews with a score<3 a negative rating.\ndef partition(x):\n    if x < 3:\n        return 0\n    return 1","7f201d5e":"#changing reviews with score less than 3 to be positive and vice-versa\nactualScore = filtered_data['Score']\npositiveNegative = actualScore.map(partition) \nfiltered_data['Score'] = positiveNegative\nprint(\"Number of data points in our data\", filtered_data.shape)\nfiltered_data.head(3)","ea685231":"display = pd.read_sql_query(\"\"\"\nSELECT UserId, ProductId, ProfileName, Time, Score, Text, COUNT(*)\nFROM Reviews\nGROUP BY UserId\nHAVING COUNT(*)>1\n\"\"\", con)","6fd34b44":"print(display.shape)\ndisplay.head()","1b67b0a2":"display[display['UserId']=='AZY10LLTJ71NX']","8643e0d2":"display['COUNT(*)'].sum()","61e3cc76":"display= pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWHERE Score != 3 AND UserId=\"AR5J8UI46CURR\"\nORDER BY ProductID\n\"\"\", con)\ndisplay.head()","dcff0879":"#Sorting data according to ProductId in ascending order\nsorted_data=filtered_data.sort_values('ProductId', axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')","777ab1a9":"#Deduplication of entries\nfinal=sorted_data.drop_duplicates(subset={\"UserId\",\"ProfileName\",\"Time\",\"Text\"}, keep='first', inplace=False)\nfinal.shape","2634f794":"#Checking to see how much % of data still remains\n(final['Id'].size*1.0)\/(filtered_data['Id'].size*1.0)*100","5041a466":"display= pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWHERE Score != 3 AND Id=44737 OR Id=64422\nORDER BY ProductID\n\"\"\", con)\n\ndisplay.head()","4e5bee8c":"final=final[final.HelpfulnessNumerator<=final.HelpfulnessDenominator]","e07412c1":"#Before starting the next phase of preprocessing lets see the number of entries left\nprint(final.shape)\n\n#How many positive and negative reviews are present in our dataset?\nfinal['Score'].value_counts()","db1098e2":"# Code referred from https:\/\/stackoverflow.com\/questions\/31749448\/how-to-add-percentages-on-top-of-bars-in-seaborn\nax = final['Score'].value_counts().plot(kind='bar', \n                                         fontsize=13);\nax.set_alpha(0.8)\nax.set_title(\"Score class distribution\", fontsize=18)\nax.set_ylabel(\"Count\", fontsize=18);\n#ax.set_yticks([0, 5, 10, 15, 20])\nax.set_xticklabels(['Positive','Negative'], rotation=0, fontsize=11)\n\n# create a list to collect the plt.patches data\ntotals = []\n\n# find the values and append to list\nfor i in ax.patches:\n    totals.append(i.get_height())\n\n# set individual bar lables using above list\ntotal = sum(totals)\n\n# set individual bar lables using above list\nfor i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n    #ax.text(i.get_x()-.03, i.get_height()+.5, \\\n     #       str(round((i.get_height()\/total)*100, 2))+'%', fontsize=15,\n      #          color='dimgrey')\n      # Decreasing the i.get_x()+.12 will shift the text to left side and decreasing the i.get_height()-14 will bring the text down\n    ax.text(i.get_x()+.04, i.get_height()-350, \\\n            str(round((i.get_height()\/total)*100, 2))+'%', fontsize=20,\n                color='white')","df925db8":"# printing some random reviews\nsent_0 = final['Text'].values[0]\nprint(sent_0)\nprint(\"=\"*50)\n\nsent_1000 = final['Text'].values[1000]\nprint(sent_1000)\nprint(\"=\"*50)\n\nsent_1500 = final['Text'].values[1500]\nprint(sent_1500)\nprint(\"=\"*50)\n\nsent_4900 = final['Text'].values[4900]\nprint(sent_4900)\nprint(\"=\"*50)","48bfe234":"# remove urls from text python: https:\/\/stackoverflow.com\/a\/40823105\/4084039\nsent_0 = re.sub(r\"http\\S+\", \"\", sent_0)\nsent_1000 = re.sub(r\"http\\S+\", \"\", sent_1000)\nsent_150 = re.sub(r\"http\\S+\", \"\", sent_1500)\nsent_4900 = re.sub(r\"http\\S+\", \"\", sent_4900)\n\nprint(sent_0)","2d39906f":"# https:\/\/stackoverflow.com\/questions\/16206380\/python-beautifulsoup-how-to-remove-all-tags-from-an-element\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(sent_0, 'lxml')\ntext = soup.get_text()\nprint(text)\nprint(\"=\"*50)\n\nsoup = BeautifulSoup(sent_1000, 'lxml')\ntext = soup.get_text()\nprint(text)\nprint(\"=\"*50)\n\nsoup = BeautifulSoup(sent_1500, 'lxml')\ntext = soup.get_text()\nprint(text)\nprint(\"=\"*50)\n\nsoup = BeautifulSoup(sent_4900, 'lxml')\ntext = soup.get_text()\nprint(text)","803bc267":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","19c78ffb":"sent_1500 = decontracted(sent_1500)\nprint(sent_1500)\nprint(\"=\"*50)","ef9078f5":"#remove words with numbers python: https:\/\/stackoverflow.com\/a\/18082370\/4084039\nsent_0 = re.sub(\"\\S*\\d\\S*\", \"\", sent_0).strip()\nprint(sent_0)","4f537916":"#remove spacial character: https:\/\/stackoverflow.com\/a\/5843547\/4084039\nsent_1500 = re.sub('[^A-Za-z0-9]+', ' ', sent_1500)\nprint(sent_1500)","5c8b3b2c":"# https:\/\/gist.github.com\/sebleier\/554280\n# we are removing the words from the stop words list: 'no', 'nor', 'not'\n# <br \/><br \/> ==> after the above steps, we are getting \"br br\"\n# we are including them into stop words list\n# instead of <br \/> if we have <br\/> these tags would have revmoved in the 1st step\n\nstopwords= set(['br', 'the', 'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"])","fdf5457e":"# Combining all the above stundents \nfrom tqdm import tqdm\npreprocessed_reviews = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(final['Text'].values):\n    sentance = re.sub(r\"http\\S+\", \"\", sentance)\n    sentance = BeautifulSoup(sentance, 'lxml').get_text()\n    sentance = decontracted(sentance)\n    sentance = re.sub(\"\\S*\\d\\S*\", \"\", sentance).strip()\n    sentance = re.sub('[^A-Za-z]+', ' ', sentance)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sentance = ' '.join(e.lower() for e in sentance.split() if e.lower() not in stopwords)\n    preprocessed_reviews.append(sentance.strip())","916b8cb5":"preprocessed_reviews[1500]","2baf1103":"## Similartly you can do preprocessing for review summary also.\n# Combining all the above stundents \nfrom tqdm import tqdm\npreprocessed_summary = []\n# tqdm is for printing the status bar\nfor sentence in tqdm(final['Summary'].values):\n    sentence = re.sub(r\"http\\S+\", \"\", sentence)\n    sentence = BeautifulSoup(sentence, 'lxml').get_text()\n    sentence = decontracted(sentence)\n    sentence = re.sub(\"\\S*\\d\\S*\", \"\", sentence).strip()\n    sentence = re.sub('[^A-Za-z]+', ' ', sentence)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sentence = ' '.join(e.lower() for e in sentence.split() if e.lower() not in stopwords)\n    preprocessed_summary.append(sentence.strip())","af133c7a":"preprocessed_summary[150]","f8629d98":"#BoW\ncount_vect = CountVectorizer() #in scikit-learn\ncount_vect.fit(preprocessed_reviews)\nprint(\"some feature names \", count_vect.get_feature_names()[:10])\nprint('='*50)\n\nfinal_counts = count_vect.transform(preprocessed_reviews)\nprint(\"the type of count vectorizer \",type(final_counts))\nprint(\"the shape of out text BOW vectorizer \",final_counts.get_shape())\nprint(\"the number of unique words \", final_counts.get_shape()[1])","47e70666":"#bi-gram, tri-gram and n-gram\n\n#removing stop words like \"not\" should be avoided before building n-grams\n# count_vect = CountVectorizer(ngram_range=(1,2))\n# please do read the CountVectorizer documentation http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_extraction.text.CountVectorizer.html\n# you can choose these numebrs min_df=10, max_features=5000, of your choice\ncount_vect = CountVectorizer(ngram_range=(1,2), min_df=10, max_features=5000)\nfinal_bigram_counts = count_vect.fit_transform(preprocessed_reviews)\nprint(\"the type of count vectorizer \",type(final_bigram_counts))\nprint(\"the shape of out text BOW vectorizer \",final_bigram_counts.get_shape())\nprint(\"the number of unique words including both unigrams and bigrams \", final_bigram_counts.get_shape()[1])","9628ae31":"tf_idf_vect = TfidfVectorizer(ngram_range=(1,2), min_df=10)\ntf_idf_vect.fit(preprocessed_reviews)\nprint(\"some sample features(unique words in the corpus)\",tf_idf_vect.get_feature_names()[0:10])\nprint('='*50)\n\nfinal_tf_idf = tf_idf_vect.transform(preprocessed_reviews)\nprint(\"the type of count vectorizer \",type(final_tf_idf))\nprint(\"the shape of out text TFIDF vectorizer \",final_tf_idf.get_shape())\nprint(\"the number of unique words including both unigrams and bigrams \", final_tf_idf.get_shape()[1])","0fe28e94":"# Train your own Word2Vec model using your own text corpus\ni=0\nlist_of_sentance=[]\nfor sentance in preprocessed_reviews:\n    list_of_sentance.append(sentance.split())","046c7c17":"# Using Google News Word2Vectors\n\n# in this project we are using a pretrained model by google\n# its 3.3G file, once you load this into your memory \n# it occupies ~9Gb, so please do this step only if you have >12G of ram\n# we will provide a pickle file wich contains a dict , \n# and it contains all our courpus words as keys and  model[word] as values\n# To use this code-snippet, download \"GoogleNews-vectors-negative300.bin\" \n# from https:\/\/drive.google.com\/file\/d\/0B7XkCwpI5KDYNlNUTTlSS21pQmM\/edit\n# it's 1.9GB in size.\n\n\n# http:\/\/kavita-ganesan.com\/gensim-word2vec-tutorial-starter-code\/#.W17SRFAzZPY\n# you can comment this whole cell\n# or change these varible according to your need\n\nis_your_ram_gt_16g= False\nwant_to_use_google_w2v = False\nwant_to_train_w2v = True\n\nif want_to_train_w2v:\n    # min_count = 5 considers only words that occured atleast 5 times\n    w2v_model=Word2Vec(list_of_sentance,min_count=5,size=50, workers=4)\n    print(w2v_model.wv.most_similar('great'))\n    print('='*50)\n    print(w2v_model.wv.most_similar('worst'))\n    \nelif want_to_use_google_w2v and is_your_ram_gt_16g:\n    if os.path.isfile('GoogleNews-vectors-negative300.bin'):\n        w2v_model=KeyedVectors.load_word2vec_format('GoogleNews-vectors-negative300.bin', binary=True)\n        print(w2v_model.wv.most_similar('great'))\n        print(w2v_model.wv.most_similar('worst'))\n    else:\n        print(\"you don't have gogole's word2vec file, keep want_to_train_w2v = True, to train your own w2v \")","f6e9c566":"w2v_words = list(w2v_model.wv.vocab)\nprint(\"number of words that occured minimum 5 times \",len(w2v_words))\nprint(\"sample words \", w2v_words[0:50])","c540f37c":"# average Word2Vec\n# compute average word2vec for each review.\nsent_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sent in tqdm(list_of_sentance): # for each review\/sentence\n    sent_vec = np.zeros(50) # as word vectors are of zero length 50, you might need to change this to 300 if you use google's w2v\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words:\n            vec = w2v_model.wv[word]\n            sent_vec += vec\n            cnt_words += 1\n    if cnt_words != 0:\n        sent_vec \/= cnt_words\n    sent_vectors.append(sent_vec)\nprint(len(sent_vectors))\nprint(len(sent_vectors[0]))","c1d7098c":"print(\"the type of count vectorizer \",type(sent_vectors))\nprint(\"the shape of out text TFIDF vectorizer \",len(sent_vectors))","2ace9ac8":"# S = [\"abc def pqr\", \"def def def abc\", \"pqr pqr def\"]\nmodel = TfidfVectorizer()\nmodel.fit(preprocessed_reviews)\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(model.get_feature_names(), list(model.idf_)))","157e096e":"# TF-IDF weighted Word2Vec\ntfidf_feat = model.get_feature_names() # tfidf words\/col-names\n# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf\n\ntfidf_sent_vectors = []; # the tfidf-w2v for each sentence\/review is stored in this list\nrow=0;\nfor sent in tqdm(list_of_sentance): # for each review\/sentence \n    sent_vec = np.zeros(50) # as word vectors are of zero length\n    weight_sum =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words and word in tfidf_feat:\n            vec = w2v_model.wv[word]\n#             tf_idf = tf_idf_matrix[row, tfidf_feat.index(word)]\n            # to reduce the computation we are \n            # dictionary[word] = idf value of word in whole courpus\n            # sent.count(word) = tf valeus of word in this review\n            tf_idf = dictionary[word]*(sent.count(word)\/len(sent))\n            sent_vec += (vec * tf_idf)\n            weight_sum += tf_idf\n    if weight_sum != 0:\n        sent_vec \/= weight_sum\n    tfidf_sent_vectors.append(sent_vec)\n    row += 1","9e5ee589":"print(\"the type of count vectorizer \",type(tfidf_sent_vectors))\nprint(\"the shape of out text TFIDF vectorizer \",len(tfidf_sent_vectors))","c0359061":"from sklearn.manifold import TSNE\nfrom sklearn.preprocessing import StandardScaler","16ff79d2":"# configuring the parameteres\n# the number of components = 2\n# default perplexity = 30\n# default learning rate = 200\n# default Maximum number of iterations for the optimization = 1000","5e5dc7d0":"# Convert the sparse matrix to a dense matrix\nfinal_counts_dense = final_counts.todense()","2ebdd7c0":"# Standardize the data\nbow_standardized_data = StandardScaler().fit_transform(final_counts_dense)","ea83833e":"# bow model 1, perplexity = 5, n_iter = 250\n# perplexity is the number of points in the neighborhood\n# n_iter is the step size\n\nbow_model_1 = TSNE(n_components=2, perplexity=5, n_iter=250, random_state = 507)","0268daff":"# fit_transform(raw_documents[, y]): Learn the vocabulary dictionary and return term-document matrix. \n# This is equivalent to fit followed by the transform, but more efficiently implemented.\n# reference: https:\/\/stackoverflow.com\/questions\/23838056\/what-is-the-difference-between-transform-and-fit-transform-in-sklearn#answer-53032201\n\nbow_data_1 = bow_model_1.fit_transform(bow_standardized_data)","ff558b85":"bow_data_1.T # taking a look at the values of bow_data_1.T","a45abbd2":"final['Score'][0:5]","b928d67f":"bow_final_data_1 = np.vstack((bow_data_1.T,final['Score'])).T\nbow_final_data_1 = pd.DataFrame(bow_final_data_1,columns=('Dim_1', 'Dim_2', \"Review\"))","78646c98":"bow_final_data_1.head()","e085cf85":"# Plotting the bow model #1\nll = sns.FacetGrid(bow_final_data_1,hue='Review',height=8).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\n# https:\/\/stackoverflow.com\/questions\/45201514\/edit-seaborn-legend#answer-45211976\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n\nplt.title('bow model #1 with perplexity = 5, n_iter = 250')\nplt.show()","a85a46c6":"# bow model 2, perplexity = 60, n_iter = 1000\nbow_model_2 = TSNE(n_components=2, perplexity=60, n_iter=1000, random_state = 507)\nbow_data_2 = bow_model_2.fit_transform(bow_standardized_data)\nbow_final_data_2 = np.vstack((bow_data_2.T,final['Score'])).T\nbow_final_data_2 = pd.DataFrame(bow_final_data_2,columns=('Dim_1', 'Dim_2', \"Review\"))","e119479e":"bow_final_data_2.head()","c259bf9e":"#Plotting the bow model #2\nll = sns.FacetGrid(bow_final_data_2,hue='Review',height=8).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n    \nplt.title('bow model #2 with perplexity = 60, n_iter = 1000')\nplt.show()","4622676f":"# bow model 3, perplexity = 30, n_iter = 5000\nbow_model_3 = TSNE(n_components=2, perplexity=30, n_iter=5000, random_state = 507)\nbow_data_3 = bow_model_3.fit_transform(bow_standardized_data)\nbow_final_data_3 = np.vstack((bow_data_3.T,final['Score'])).T\nbow_final_data_3 = pd.DataFrame(bow_final_data_3,columns=('Dim_1', 'Dim_2', \"Review\"))","7b0aca4c":"bow_final_data_3.head()","1616b269":"# Plotting the bow model #3\nll= sns.FacetGrid(bow_final_data_3,hue='Review',height=8).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n    \nplt.title('bow model #3 with perplexity = 30, n_iter = 5000')\nplt.show()","3e95082a":"# bow model 4, perplexity = 100, n_iter = 5000\nbow_model_4 = TSNE(n_components=2, perplexity=100, n_iter=5000, random_state = 507)\nbow_data_4 = bow_model_4.fit_transform(bow_standardized_data)\nbow_final_data_4 = np.vstack((bow_data_4.T,final['Score'])).T\nbow_final_data_4 = pd.DataFrame(bow_final_data_4,columns=('Dim_1', 'Dim_2', \"Review\"))","84abb3c8":"bow_final_data_4.head()","a39d0748":"# Plotting the bow model #4\nll = sns.FacetGrid(bow_final_data_4,hue='Review',height=8).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n    \nplt.title('bow model #4 with perplexity = 100, n_iter = 5000')\nplt.show()","bbdaaefc":"# Convert the sparse matrix to a dense matrix\nfinal_tfidf_dense = final_tf_idf.todense()","8d5e0f2d":"# Standardize the data\ntfidf_standardized_data = StandardScaler().fit_transform(final_tfidf_dense)","f17d43f9":"# tfidf model #1, perplexity = 5, n_iter = 1000\ntfidf_model_1 = TSNE(n_components=2,perplexity=5,n_iter=1000, random_state = 507)","3efb2bd3":"tfidf_data_1 = tfidf_model_1.fit_transform(tfidf_standardized_data)","9417ce15":"tfidf_data_1.T","906cb0a8":"final['Score'][0:10]","1c69f3fb":"tfidf_final_data_1 = np.vstack((tfidf_data_1.T,final['Score'])).T","2449902a":"tfidf_final_data_1 = pd.DataFrame(tfidf_final_data_1,columns=('Dim_1','Dim_2','Review'))","c6f316b8":"tfidf_final_data_1.head()","cffb3359":"ll = sns.FacetGrid(tfidf_final_data_1,hue = 'Review',size = 6).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n\nplt.title('tfidf model #1 with perplexity = 5, n_iter = 1000')\nplt.show()","a38ee94e":"# tfidf model #2, perplexity = 30, n_iter = 5000\ntfidf_model_2 = TSNE(n_components=2,perplexity=30,n_iter=5000, random_state = 507)\ntfidf_data_2 = tfidf_model_2.fit_transform(tfidf_standardized_data)\ntfidf_final_data_2 = np.vstack((tfidf_data_2.T,final['Score'])).T\ntfidf_final_data_2 = pd.DataFrame(tfidf_final_data_2,columns=('Dim_1','Dim_2','Review'))","3106d31b":"tfidf_final_data_2.head()","9aed666c":"ll = sns.FacetGrid(tfidf_final_data_2,hue = 'Review',size = 6).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n    \nplt.title('tfidf model #2 with perplexity = 30, n_iter = 5000')\nplt.show()","f54ecbc7":"# tfidf model #3, perplexity = 100, n_iter = 5000\ntfidf_model_3 = TSNE(n_components=2,perplexity=100,n_iter=5000, random_state = 507)\ntfidf_data_3 = tfidf_model_1.fit_transform(tfidf_standardized_data)\ntfidf_final_data_3 = np.vstack((tfidf_data_3.T,final['Score'])).T\ntfidf_final_data_3 = pd.DataFrame(tfidf_final_data_3,columns=('Dim_1','Dim_2','Review'))","3edbb766":"tfidf_final_data_3.head()","4a3cb9e0":"ll = sns.FacetGrid(tfidf_final_data_3,hue = 'Review',size = 6).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n    \nplt.title('tfidf model #3 with perplexity = 100, n_iter = 5000')\nplt.show()","805c86d5":"# tfidf model #4, perplexity = 50, n_iter = 1000\ntfidf_model_4 = TSNE(n_components=2,perplexity=50,n_iter=1000, random_state = 507)\ntfidf_data_4 = tfidf_model_4.fit_transform(tfidf_standardized_data)\ntfidf_final_data_4 = np.vstack((tfidf_data_4.T,final['Score'])).T\ntfidf_final_data_4 = pd.DataFrame(tfidf_final_data_4,columns=('Dim_1','Dim_2','Review'))","0dc7bb49":"tfidf_final_data_4.head()","4d3572e3":"ll = sns.FacetGrid(tfidf_final_data_1,hue = 'Review',size = 6).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n    \nplt.title('tfidf model #4 with perplexity = 50, n_iter = 1000')\nplt.show()","2986a11e":"# Convert the sparse matrix to a dense matrix\n# We dont need to convert it to dense matrix as it already is a dense vector","732f0246":"# Standardize the data\nsent_vectors_standardized = StandardScaler().fit_transform(sent_vectors)","dc4d066f":"# average word2vec model #1, perplexity = 5, n_iter = 5000\navgw2v_model_1 = TSNE(n_components=2,perplexity=5,n_iter = 5000)","e61bd527":"avgw2v_data_1 = avgw2v_model_1.fit_transform(sent_vectors_standardized)","ad288540":"avgw2v_data_1.T","934327d3":"final['Score'][0:10]","d164c5e7":"avgw2v_final_data_1 = np.vstack((avgw2v_data_1.T,final['Score'])).T\n\navgw2v_final_data_1 = pd.DataFrame(avgw2v_final_data_1,columns=('Dim_1','Dim_2','Review'))\n\navgw2v_final_data_1.head()","a3808ddf":"ll = sns.FacetGrid(avgw2v_final_data_1,hue = 'Review',size = 8).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n    \nplt.title('Avg word2vec model #1 with Perplexity = 5 and n_iter = 5000')\nplt.show()","6feacb05":"# average word2vec model #2 with perplexity = 30, n_iter = 5000\navgw2v_model_2 = TSNE(n_components=2,perplexity=30,n_iter = 5000)\navgw2v_data_2 = avgw2v_model_2.fit_transform(sent_vectors_standardized)\navgw2v_final_data_2 = np.vstack((avgw2v_data_2.T,final['Score'])).T\navgw2v_final_data_2 = pd.DataFrame(avgw2v_final_data_2,columns=('Dim_1','Dim_2','Review'))","4eb648e7":"avgw2v_final_data_2.head()","3952256b":"ll = sns.FacetGrid(avgw2v_final_data_2,hue = 'Review',size = 8).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n    \nplt.title('Avg word2vec model #2 with Perplexity = 30 and n_iter = 5000')\nplt.show()","951a847d":"# average word2vec model #3 with perplexity = 60, n_iter = 5000\navgw2v_model_3 = TSNE(n_components=2,perplexity=60,n_iter = 5000)\navgw2v_data_3 = avgw2v_model_3.fit_transform(sent_vectors_standardized)\navgw2v_final_data_3 = np.vstack((avgw2v_data_3.T,final['Score'])).T\navgw2v_final_data_3 = pd.DataFrame(avgw2v_final_data_3,columns=('Dim_1','Dim_2','Review'))","7fffd773":"avgw2v_final_data_3.head()","6d02c345":"ll = sns.FacetGrid(avgw2v_final_data_3,hue = 'Review',size = 8).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n    \nplt.title('Avg word2vec model #3 with Perplexity = 60 and n_iter = 5000')\nplt.show()","b4bd7045":"# average word2vec model #4 with perplexity = 100, n_iter = 2500\navgw2v_model_4 = TSNE(n_components=2,perplexity=100,n_iter = 2500)\navgw2v_data_4 = avgw2v_model_4.fit_transform(sent_vectors_standardized)\navgw2v_final_data_4 = np.vstack((avgw2v_data_4.T,final['Score'])).T\navgw2v_final_data_4 = pd.DataFrame(avgw2v_final_data_4,columns=('Dim_1','Dim_2','Review'))","f802ee11":"avgw2v_final_data_4.head()","b6301238":"ll = sns.FacetGrid(avgw2v_final_data_4,hue = 'Review',size = 8).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n    \nplt.title('Avg word2vec model #4 with Perplexity = 100 and n_iter = 2500')\nplt.show()","15d95898":"# Convert the sparse matrix to a dense matrix\n# No need as it is already in its dense form","eca17ae9":"# Standardize the data\ntfidf_sent_vectors_standardized_data  = StandardScaler().fit_transform(tfidf_sent_vectors)","ac0a501c":"# tfidf-ww2v model 1, perplexity = 5, n_iter = 5000\ntfidf_ww2v_model_1 = TSNE(n_components=2,perplexity=5,n_iter = 5000)","1d213793":"tfidf_ww2v_data_1 = tfidf_ww2v_model_1.fit_transform(tfidf_sent_vectors_standardized_data)","37ccf854":"tfidf_ww2v_data_1.T","50fc3967":"final['Score'][0:10]","4339ce50":"tfidf_ww2v_final_data_1 = np.vstack((tfidf_ww2v_data_1.T,final['Score'])).T\n\ntfidf_ww2v_final_data_1 = pd.DataFrame(tfidf_ww2v_final_data_1,columns=('Dim_1','Dim_2','Review'))\n\ntfidf_ww2v_final_data_1.head()","12c3649f":"ll= sns.FacetGrid(tfidf_ww2v_final_data_1,hue = 'Review',size = 8).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n    \nplt.title('tfidf weighted word2vec model #1 with perplexity = 5 and n_iter = 5000')\nplt.show()","f7320944":"# tfidf-ww2v model 2, perplexity = 30, n_iter = 3000\ntfidf_ww2v_model_2 = TSNE(n_components=2,perplexity=30,n_iter = 3000)\ntfidf_ww2v_data_2 = tfidf_ww2v_model_2.fit_transform(tfidf_sent_vectors_standardized_data)\ntfidf_ww2v_final_data_2 = np.vstack((tfidf_ww2v_data_2.T,final['Score'])).T\ntfidf_ww2v_final_data_2 = pd.DataFrame(tfidf_ww2v_final_data_2,columns=('Dim_1','Dim_2','Review'))","0c078c16":"tfidf_ww2v_final_data_2.head()","b00ae59c":"ll = sns.FacetGrid(tfidf_ww2v_final_data_2,hue = 'Review',size = 8).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n    \nplt.title('tfidf weighted word2vec model #2 with perplexity = 30 and n_iter = 3000')\nplt.show()","5493a7fc":"# tfidf-ww2v model 3, perplexity = 60, n_iter = 5000\ntfidf_ww2v_model_3 = TSNE(n_components=2,perplexity=60,n_iter = 5000)\ntfidf_ww2v_data_3 = tfidf_ww2v_model_3.fit_transform(tfidf_sent_vectors_standardized_data)\ntfidf_ww2v_final_data_3 = np.vstack((tfidf_ww2v_data_3.T,final['Score'])).T\ntfidf_ww2v_final_data_3 = pd.DataFrame(tfidf_ww2v_final_data_3,columns=('Dim_1','Dim_2','Review'))","cb70c95d":"tfidf_ww2v_final_data_3.head()","87f354e3":"ll = sns.FacetGrid(tfidf_ww2v_final_data_3,hue = 'Review',size = 8).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n    \nplt.title('tfidf weighted word2vec model #3 with perplexity = 60 and n_iter = 5000')\nplt.show()","7dddfbeb":"# tfidf-ww2v model 4, perplexity = 100, n_iter = 3000\ntfidf_ww2v_model_4 = TSNE(n_components=2,perplexity=100,n_iter = 3000)\ntfidf_ww2v_data_4 = tfidf_ww2v_model_4.fit_transform(tfidf_sent_vectors_standardized_data)\ntfidf_ww2v_final_data_4 = np.vstack((tfidf_ww2v_data_4.T,final['Score'])).T\ntfidf_ww2v_final_data_4 = pd.DataFrame(tfidf_ww2v_final_data_4,columns=('Dim_1','Dim_2','Review'))","bc14de65":"tfidf_ww2v_final_data_4.head()","c8c6396e":"ll = sns.FacetGrid(tfidf_ww2v_final_data_4,hue = 'Review',size = 8).map(plt.scatter,'Dim_1','Dim_2').add_legend()\n\nnew_labels = ['Positive', 'Negative']\nfor t, l in zip(ll._legend.texts, new_labels): t.set_text(l);\n    \nplt.title('tfidf weighted word2vec model #4 with perplexity = 100 and n_iter = 3000')\nplt.show()","36ed4ab7":"# Write few sentance about the results that you got and observation that you did from the analysis","d4537a7e":"## [5.3] Applying TNSE on Text Avg W2V vectors","4e0eba5b":"**NOTE:** From the [paper](http:\/\/www.jmlr.org\/papers\/volume9\/vandermaaten08a\/vandermaaten08a.pdf) :\n\n> The perplexity can be interpreted as a smooth measure of the effective number of neighbors. The\nperformance of SNE is fairly robust to changes in the perplexity, and typical values are between 5\nand 50.\n\nTakling reference from https:\/\/distill.pub\/2016\/misread-tsne\/ and the paper, I will use use perplexity values : 5, 30, 50, 100","6af1ad84":"<b>Observation:-<\/b> It was also seen that in two rows given below the value of HelpfulnessNumerator is greater than HelpfulnessDenominator which is not practically possible hence these two rows too are removed from calcualtions","c464441c":"**Note:** The final_counts is a sparse matrix and we will need to convert it to a dense matrix before applying t-sne.","c6bb52f7":"# [3].  Text Preprocessing.\n\nNow that we have finished deduplication our data requires some preprocessing before we go on further with analysis and making the prediction model.\n\nHence in the Preprocessing phase we do the following in the order below:-\n\n1. Begin by removing the html tags\n2. Remove any punctuations or limited set of special characters like , or . or # etc.\n3. Check if the word is made up of english letters and is not alpha-numeric\n4. Check to see if the length of the word is greater than 2 (as it was researched that there is no adjective in 2-letters)\n5. Convert the word to lowercase\n6. Remove Stopwords\n7. Finally Snowball Stemming the word (it was obsereved to be better than Porter Stemming)<br>\n\nAfter which we collect the words used to describe positive and negative reviews","552bffe5":"## [4.4] Word2Vec","d0f46691":"# [1]. Reading Data","c9b968a1":"#### [4.4.1.2] TFIDF weighted W2v","211edf88":"As can be seen above the same user has multiple reviews of the with the same values for HelpfulnessNumerator, HelpfulnessDenominator, Score, Time, Summary and Text  and on doing analysis it was found that <br>\n<br> \nProductId=B000HDOPZG was Loacker Quadratini Vanilla Wafer Cookies, 8.82-Ounce Packages (Pack of 8)<br>\n<br> \nProductId=B000HDL1RQ was Loacker Quadratini Lemon Wafer Cookies, 8.82-Ounce Packages (Pack of 8) and so on<br>\n\nIt was inferred after analysis that reviews with same parameters other than ProductId belonged to the same product just having different flavour or quantity. Hence in order to reduce redundancy it was decided to eliminate the rows having same parameters.<br>\n\nThe method used for the same was that we first sort the data according to ProductId and then just keep the first similar product review and delelte the others. for eg. in the above just the review for ProductId=B000HDL1RQ remains. This method ensures that there is only one representative for each product and deduplication without sorting would lead to possibility of different representatives still existing for the same product.","1b053d14":"## [4.1] BAG OF WORDS","bdce378c":"**Observation:** Most of the points are clustered around the top right handside of the plot and is not stable.","49df955d":"# [4] Featurization","f21d644a":"**Note:** The tfidf_sent_vectors is a dense list and doesn't require conversion to a dense array.","09e3f08e":"## [4.3] TF-IDF","c2822740":"**Note:** The sent_vectors is a dense list and doesn't require conversion to a dense array.","79a607e7":"**Observation:** In this model, we have increased the perplexity as well as the n_iter and it can be seen that the points are more grouped as compared to the earlier model where the points were scattered.","590818eb":"**Observations:** It is evident that the data points that we have selected contains 84% of positive score and 16% of negative score.","4fe6acd6":"## Loading the data\n\nThe dataset is available in two forms\n1. .csv file\n2. SQLite Database\n\nIn order to load the data, We have used the SQLITE dataset as it easier to query the data and visualise the data efficiently.\n<br> \n\nHere as we only want to get the global sentiment of the recommendations (positive or negative), we will purposefully ignore all Scores equal to 3. If the score id above 3, then the recommendation wil be set to \"positive\". Otherwise, it will be set to \"negative\".","55936c5a":"#### [4.4.1.1] Avg W2v","a5631e61":"## [5.4] Applying TNSE on Text TFIDF weighted W2V vectors","7a12c966":"1. There's no such value which we can call correct and it satifies all the different models. We have to **experiment with the values** of perplexity and n_iter until the t-sne plot becomes stable.\n2. The **more the number of iternations the better.** As we saw in one of the bow model, if we used n_iter = 250, the visualization on the review type was not well sorted. The plotting of the model  may be stable for a value less than 5000 but it is always better to keep the value of n_iter = 5000, as keeping it low may not yield expected results.\n3. The positive and the negative **reviews seem to be overlap** each other. This means there are **certain words which occur in both the reviews and as a result positve and negative review classes are not easily separable.**\n4. The **class imbalance** also played a role, as most of the review text was largely positive. We need to address this imbalance class of Review text so that our analysis can fetch better results.","ea128f8e":"**Observation:** The plot looks stable at the provided parameters. Due to class imbalance, we see only a few negative (blue) points. ","a62df3e9":"**Observation:** We have increased the perplexity and reduced the iterations but we cannot confidently say that the plot is stable.","5d4a8a82":"## [5.1] Applying TNSE on Text BOW vectors","071bf063":"## [5.2] Applying TNSE on Text TFIDF vectors","f0f1e9ad":"## [4.2] Bi-Grams and n-Grams.","65cd76eb":"#  Exploratory Data Analysis\n\n## [2] Data Cleaning: Deduplication\n\nIt is observed (as shown in the table below) that the reviews data had many duplicate entries. Hence it was necessary to remove duplicates in order to get unbiased results for the analysis of the data.  Following is an example:","bee02ebe":"**Note:** The final_tf_idf is a sparse matrix and we will need to convert it to a dense matrix before applying t-sne.","48ee54dc":"<ol> \n    <li> you need to plot 4 tsne plots with each of these feature set\n        <ol>\n            <li>Review text, preprocessed one converted into vectors using (BOW)<\/li>\n            <li>Review text, preprocessed one converted into vectors using (TFIDF)<\/li>\n            <li>Review text, preprocessed one converted into vectors using (AVG W2v)<\/li>\n            <li>Review text, preprocessed one converted into vectors using (TFIDF W2v)<\/li>\n        <\/ol>\n    <\/li>\n    <li> <font color='blue'>Note 1: The TSNE accepts only dense matrices<\/font><\/li>\n    <li> <font color='blue'>Note 2: Consider only 5k to 6k data points <\/font><\/li>\n<\/ol>","0f0cf091":"**Note:** The final_bigram_counts is a sparse matrix and we will need to convert it to a dense matrix before applying t-sne.","615ba14b":"<h2><font color='red'>[3.2] Preprocess Summary<\/font><\/h2>","cc72698b":"# Amazon Fine Food Reviews Analysis\n\n\nData Source: https:\/\/www.kaggle.com\/snap\/amazon-fine-food-reviews <br>\n\nEDA: https:\/\/nycdatascience.com\/blog\/student-works\/amazon-fine-foods-visualization\/\n\n\nThe Amazon Fine Food Reviews dataset consists of reviews of fine foods from Amazon.<br>\n\nNumber of reviews: 568,454<br>\nNumber of users: 256,059<br>\nNumber of products: 74,258<br>\nTimespan: Oct 1999 - Oct 2012<br>\nNumber of Attributes\/Columns in data: 10 \n\nAttribute Information:\n\n1. Id\n2. ProductId - unique identifier for the product\n3. UserId - unqiue identifier for the user\n4. ProfileName\n5. HelpfulnessNumerator - number of users who found the review helpful\n6. HelpfulnessDenominator - number of users who indicated whether they found the review helpful or not\n7. Score - rating between 1 and 5\n8. Time - timestamp for the review\n9. Summary - brief summary of the review\n10. Text - text of the review\n\n\n#### Objective:\nGiven a review, determine whether the review is positive (Rating of 4 or 5) or negative (rating of 1 or 2).\n\n<br>\n[Q] How to determine if a review is positive or negative?<br>\n<br> \n[Ans] We could use the Score\/Rating. A rating of 4 or 5 could be cosnidered a positive review. A review of 1 or 2 could be considered negative. A review of 3 is nuetral and ignored. This is an approximate and proxy way of determining the polarity (positivity\/negativity) of a review.\n\n\n","a92057c7":"**Observation:** The plot is not stable yet and is dispersed.","8e78621f":"# [6] Conclusions","8634815a":"**Observation:** Increasing the n_iter to 1000 has increased the stability of the plot.","27fe47fc":"**Observation:** Not much difference can be observed with new values of perplexity and n_iter. The plot has already become stable with values from the last model.","345018ad":"# [5] Applying TSNE","abfa1567":"## [4.4.1] Converting text into vectors using wAvg W2V, TFIDF-W2V","bbb7547e":"**Observation:** If we take the minimum value of n_iter = 250, we dont get a well differentiated plot. The positive comment is covered by the negative ones and henceforth, we will consider values greater than 250."}}