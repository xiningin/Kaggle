{"cell_type":{"ab7729c7":"code","795332d6":"code","e59f32dc":"code","218209e2":"code","053d4e0c":"code","516ad68d":"code","4dc25c84":"code","5fb264b2":"code","c8b73c3a":"code","f7cda7c8":"code","899a3ff2":"code","9977deb4":"code","a7c2f8bf":"code","cc58782b":"code","657b3d60":"code","06465c3f":"code","d7ec1959":"code","bf4f2e04":"code","dd34a46c":"code","2679b01d":"code","96b374bb":"code","fc2211ca":"code","c5a04cf6":"code","41a34b62":"code","1458a48d":"code","a3bce86d":"code","26fd9c5e":"code","f3389285":"code","4ffc972e":"code","827df092":"code","7ff0fdd1":"code","2efa5c78":"code","a6374629":"code","cbe8a759":"code","3907261a":"code","64ab7726":"code","f1a57626":"markdown","e703aa7c":"markdown","e9fccf59":"markdown","a06b7894":"markdown","8e143fb8":"markdown","d69ff6db":"markdown","5bddeb58":"markdown","8918913b":"markdown","cfee6db0":"markdown","7e1c0e8b":"markdown","5df73326":"markdown","c095e358":"markdown","db5d2b3c":"markdown","67216d79":"markdown","6bdc74f6":"markdown","52459a89":"markdown","12aff096":"markdown","f5afd366":"markdown","1ad5771c":"markdown","37944b31":"markdown","84ad7212":"markdown","52695de0":"markdown","8134e753":"markdown","acfceabc":"markdown","52ef94d7":"markdown","5c7a4ed2":"markdown","e7e4b360":"markdown","eab757fb":"markdown","b3f221e2":"markdown"},"source":{"ab7729c7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","795332d6":"# Some mandatory Libraries\nimport string \nimport warnings\nimport numpy as np\nimport pandas as pd\n\n# plotting\nimport seaborn as sns;\nimport matplotlib.pyplot as plt\n\n# features selection\nfrom sklearn.feature_selection import chi2\nfrom sklearn.feature_selection import SelectKBest\n\n# scaling\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\n# model building\nfrom sklearn.svm import SVC\nfrom sklearn.svm import NuSVC\nfrom sklearn.svm import LinearSVC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\n\n# sccuracy\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report, confusion_matrix, plot_roc_curve, plot_precision_recall_curve\n\n# others\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")","e59f32dc":"df = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","218209e2":"df.head()","053d4e0c":"print('Shape of our Data:',df.shape)","516ad68d":"# check datatypes\n\nprint(df.dtypes)","4dc25c84":"# check min, max and other details\n\ndf.describe()","5fb264b2":"# check the missing or null values.\n\nprint(df.isnull().sum())","c8b73c3a":"print('DEATH_EVENT:')\nprint(df['DEATH_EVENT'].value_counts())","f7cda7c8":"print('Distribution of DEATH_EVENT:')\nprint(df['DEATH_EVENT'].value_counts()\/len(df))","899a3ff2":"ax = sns.countplot(x='DEATH_EVENT', data=df, facecolor=(0, 0, 0, 0), linewidth=5, edgecolor=sns.color_palette(\"dark\", 3))","9977deb4":"# define correlation matrice\ncorr = df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\nwith sns.axes_style(\"white\"):\n    # Set up the matplotlib figure\n    f, ax = plt.subplots(figsize=(10, 8))\n    ax = sns.heatmap(corr, cmap=cmap, mask=mask, vmax=.3, square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True)","a7c2f8bf":"#apply SelectKBest class to extract best features\nX_train = df.drop(['DEATH_EVENT'], axis=1)\nY_test = df['DEATH_EVENT']\nbestfeatures = SelectKBest(score_func=chi2, k=10)\nfit = bestfeatures.fit(X_train, Y_test)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X_train.columns)\n\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Featue','Score']\nfeature_imp = featureScores.nlargest(X_train.shape[1],'Score')","cc58782b":"# plot top 5 features\n\nprint(feature_imp.head())","657b3d60":"# plot each feature with it's importance\n\nax = sns.barplot(x='Score', y='Featue', data=feature_imp)","06465c3f":"sns.pairplot(df, hue=\"DEATH_EVENT\", palette=\"husl\",diag_kind=\"kde\")\nplt.show()","d7ec1959":"for column in df.columns[:12]:\n    sns.barplot(x='DEATH_EVENT',y=column, data=df, palette='Blues_d')\n    plt.title('Death Event Vs. {}'.format(string.capwords(column.replace(\"_\", \" \"))))\n    plt.show()","bf4f2e04":"# define two new dataframe for Survived & Non Servived\n\nsurvived = df[df['DEATH_EVENT'] == 0]\nnot_survived = df[df['DEATH_EVENT'] == 1]","dd34a46c":"counts, bin_edges = np.histogram(survived['time'], bins=10, density = True)\npdf = counts\/(sum(counts))\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:],pdf);\nplt.plot(bin_edges[1:], cdf)\n\ncounts, bin_edges = np.histogram(not_survived['time'], bins=10, density = True)\npdf = counts\/(sum(counts))\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:],pdf);\nplt.plot(bin_edges[1:], cdf)\n\nplt.xlabel('Time')\nplt.title('PDF & CDF (Time)')\nplt.legend(['PDF of Survived','CDF of Survived','PDF of Non-Survived','CDF of Non-Survived'])\nplt.show()","2679b01d":"counts, bin_edges = np.histogram(survived['serum_creatinine'], bins=10, density = True)\npdf = counts\/(sum(counts))\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:],pdf);\nplt.plot(bin_edges[1:], cdf)\n\ncounts, bin_edges = np.histogram(not_survived['serum_creatinine'], bins=10, density = True)\npdf = counts\/(sum(counts))\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:],pdf);\nplt.plot(bin_edges[1:], cdf)\n\nplt.xlabel('Serum Creatinine')\nplt.title('PDF & CDF (Serum Creatinine)')\nplt.legend(['PDF of Survived','CDF of Survived','PDF of Non-Survived','CDF of Non-Survived'])\nplt.show()","96b374bb":"for column in df.columns[:12]:\n    sns.boxplot(x='DEATH_EVENT',y=column, data=df, palette='Set3')\n    plt.title('Death Event Vs. {}'.format(string.capwords(column.replace(\"_\", \" \"))))\n    plt.show()","fc2211ca":"# define features need to be scale\n# select all numeric features except categorial\ncols = ['age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_sodium', 'time']\n\n# define object\nscaler = MinMaxScaler()\n\n# perform Min Max Scaling\nfor col in cols:\n    scaler.fit(df[col].values.reshape(-1, 1))\n    df['nrm_' + col] = scaler.transform(df[col].values.reshape(-1, 1))\n\n# drop old columns\ndf.drop(['age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_sodium', 'time'], axis = 1, inplace=True)","c5a04cf6":"X_train, X_test, y_train, y_test = train_test_split(df.drop(['DEATH_EVENT'], axis=1), df['DEATH_EVENT'], test_size=0.3, random_state=11)","41a34b62":"# Define classifiers with default parameters.\n\nclassifiers = {\n    'SVC': SVC(),\n    'LinearSVC': LinearSVC(),\n    'NuSVC': NuSVC(),\n    'DecisionTree':DecisionTreeClassifier()\n}","1458a48d":"for name, classifier in classifiers.items():\n    classifier.fit(X_train, y_train)\n    training_score = cross_val_score(classifier, X_train, y_train, cv=5)\n    print('Classifiers: ',name, 'has training score of', round(training_score.mean(),2) * 100)","a3bce86d":"# SVC\n\nparams = {\n    'C':[10**-3, 10**-2, 10**-1, 1, 10, 10**2, 10**3], \n    'kernel':['linear', 'poly', 'rbf', 'sigmoid'],\n    'gamma': ['scale', 'auto']\n}\n\ngs = GridSearchCV(SVC(), params, cv = 5, n_jobs=-1, scoring='accuracy')\ngs_results = gs.fit(X_train, y_train)\n\nSVC_best_estimator = gs.best_estimator_ # store best estimators for future analysis\n\nprint('Best Accuracy: ', gs_results.best_score_)\nprint('Best Parametrs: ', gs_results.best_params_)","26fd9c5e":"# LinearSVC\n\nparams = {\n    'C':[10**-3, 10**-2, 10**-1, 1, 10, 10**2, 10**3], \n    'penalty':['l1', 'l2'],\n    'loss': ['hinge', 'squared_hinge']\n}\n\ngs = GridSearchCV(LinearSVC(), params, cv = 5, n_jobs=-1, scoring='accuracy')\ngs_results = gs.fit(X_train, y_train)\n\nLinearSVC_best_estimator = gs.best_estimator_ # store best estimators for future analysis\n\nprint('Best Accuracy: ', gs_results.best_score_)\nprint('Best Parametrs: ', gs_results.best_params_)","f3389285":"# DecisionTree\n\nparams = {\n    'criterion': ['gini', 'entropy'],\n    'max_depth': [2,4,6,8,10,12]\n}\n\ngs = GridSearchCV(DecisionTreeClassifier(), params, cv = 5, n_jobs=-1, scoring='accuracy')\ngs_results = gs.fit(X_train, y_train)\n\nDecisionTree_best_estimator = gs.best_estimator_ # store best estimators for future analysis\n\nprint('Best Accuracy: ', gs_results.best_score_)\nprint('Best Parametrs: ', gs_results.best_params_)","4ffc972e":"# plot top 5 best features\n\npd.Series(DecisionTree_best_estimator.feature_importances_, index=X_train.columns).nlargest(5).plot(kind='barh')","827df092":"train_pred = SVC_best_estimator.predict(X_train)\nprint(classification_report(y_train,train_pred))","7ff0fdd1":"train_pred = LinearSVC_best_estimator.predict(X_train)\nprint(classification_report(y_train,train_pred))","2efa5c78":"train_pred = DecisionTree_best_estimator.predict(X_train)\nprint(classification_report(y_train,train_pred))","a6374629":"print('Final Test Accuracy for')\nprint('     SVC:',SVC_best_estimator.score(X_test,y_test))\nprint('     Linear SVC:',LinearSVC_best_estimator.score(X_test,y_test))\nprint('     Decision Tree:',DecisionTree_best_estimator.score(X_test,y_test))","cbe8a759":"plot_roc_curve(DecisionTree_best_estimator, X_test, y_test)\nplt.show()","3907261a":"plot_precision_recall_curve(DecisionTree_best_estimator, X_test, y_test)\nplt.show()","64ab7726":"pred = DecisionTree_best_estimator.predict(X_test)\nsns.heatmap(confusion_matrix(y_test,pred),annot=True)\nplt.ylabel(\"Actual\")\nplt.xlabel(\"Prediction\")\nplt.show()","f1a57626":"Here we can have some extream outliers such as **'creatinine_phosphokinase'** and **'serum_sodium'**\n\n### Observation on EDA\n\nFrom the above analysis we can't conclude anything as we have major overlap between data. But we can point out some of the details as,\n\n* Most of my patentece are between 40-80 age group. \n* Most of the Nonsurvived patentece are between 45 to 65 age group.\n* Ejection Fraction bellow 40 is a good singh. More than 50% patentece survived who fad Ejection Fraction less than 40.\n* Geder is also overlapped alot. But we can say 60% males and 40% females are srvived. \n* From **Time in Days** we can say more non survived patentece are found as my observation period increase.\n\nOn a nutshell we can say Univariate analysis is not that good as we have lot of overlapper between datas. Let's try other techniques to be more accurate analysis.","e703aa7c":"**Onservations on Time:**\n\nTime can be key feature to analyse our target. If follow up days is morethan **100** then maximum (Near about 20%) chances that patent is well. On the other hand if the patenet has lessthan **50** days follow up days then 30% chances that patenet has heart failure.\n\n__Analyse Serum Creatinine based on PDF & CDF:__","e9fccf59":"Here __\"DEATH_EVENT\"__ is the target column.","a06b7894":"Here we can see our data is immbalanced. So we need to perform some preprocessing on this dataset.","8e143fb8":"**Onservations on Serum Creatinine:**\n\nIt is also an key feature to anayse. If patent's Serum Creatinine is more that 6 it is higer chances that patent has heart failuire.\n\n__Analyse the outlieres:__","d69ff6db":"## [7.1] Accuracy on Test:","5bddeb58":"## Problem Statement","8918913b":"__Plot classification report:__","cfee6db0":"## [4.1] Train Test Split","7e1c0e8b":"<center><img src='https:\/\/i.ytimg.com\/vi\/pB7SWDcgPic\/maxresdefault.jpg'><\/center>","5df73326":"## [1.1] Load Data\n\nLoading the data into the pandas data frame is certainly one of the most important steps, as we can see that the value from the data set is comma-separated. So all we have to do is to just read the CSV into a data frame and pandas data frame does the job for us.","c095e358":"## [5.1] Modeling","db5d2b3c":"Here we can see some featutes has quite good impact in our terget such as **'serum_creatinine'** and **'time'**. Let's analyse these two featues a little bit more.","67216d79":"__Let's try to visualise the same using plots.__","6bdc74f6":"#### [2.1.3] Pairplot:","52459a89":"Here we can see __'diabetes', 'sex' and 'smoking'__ has very less impact in our target value.","12aff096":"__Analyse Time based on PDF & CDF:__","f5afd366":"#### [2.1.1] Plot Correlation Metrice:","1ad5771c":"#### [2.1.2] Best Featues:","37944b31":"## [6.1] Hyper Parameter Tuning","84ad7212":"__Confusion Matrix with Decision Tree__","52695de0":"__Remove Outliers__","8134e753":"__Polt AUC Curve with DecisionTree:__","acfceabc":"## [2.1] Lets Explore the Data\n\nExploratory Data Analysis or (EDA) is understanding the data sets by summarizing their main characteristics often plotting them visually. This step is very important especially when we arrive at modeling the data in order to apply Machine learning.\n\n1. Checking the types of data.\n2. Dropping irrelevant columns.\n3. Renaming the columns.\n4. Dropping the duplicate rows.\n5. Dropping the missing or null values.\n6. Detecting Outliers\n7. Plotting","52ef94d7":"## [3.1] Data Preprocessing","5c7a4ed2":"#### [2.1.3] Univariate Analysis:","e7e4b360":"__Apply MinMaxScaler__","eab757fb":"## Import Libraries","b3f221e2":"There are some factors that affects death of an patenet. This dataset contains person's information like age ,sex , blood pressure, smoke, diabetes,ejection fraction, creatinine phosphokinase, serum_creatinine, serum_sodium, time and we have to predict their DEATH EVENT.\n\n1. age\n2. anaemia - Decrease of red blood cells or hemoglobin (boolean)\n3. creatinine_phosphokinase - Level of the CPK enzyme in the blood (mcg\/L)\n4. diabetes - If the patient has diabetes (boolean)\n5. ejection_fraction - Percentage of blood leaving the heart at each contraction (percentage)\n6. high_blood_pressure - If the patient has hypertension (boolean)\n7. platelets - Platelets in the blood (kiloplatelets\/mL)\n8. serum_creatinine - Level of serum creatinine in the blood (mg\/dL)\n9. serum_sodium - Level of serum sodium in the blood (mEq\/L)\n10. sex - Woman or man (binary)\n11. smoking - If the patient smokes or not (boolean)\n12. time - Follow-up period (days)\n13. DEATH_EVENT - If the patient deceased during the follow-up period (boolean)"}}