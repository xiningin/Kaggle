{"cell_type":{"b76cc854":"code","fdffed00":"code","02e3c4ef":"code","07c9534e":"code","a2b569e8":"code","685915f3":"code","7e0416b3":"code","f603e289":"code","6c8382cc":"code","3bec5333":"code","1c7d1994":"code","ef7cf064":"code","2dcd7c8b":"code","c4819cbb":"code","1de6383e":"code","d8f349b6":"code","adeace94":"code","cb87592e":"code","0b03b4d5":"code","f7fd8e0f":"code","f73d7a0f":"code","8b726fee":"code","afd5b212":"code","6aac9fcf":"code","035994f0":"code","dcf6eb05":"code","03881634":"code","c8ebfe9f":"code","5695ee40":"markdown","b4e0739d":"markdown","f6c9dffe":"markdown","80cd7944":"markdown","f7e095b8":"markdown","a9b31b56":"markdown","a07fe211":"markdown","1fd64e00":"markdown","713c9fed":"markdown","92c945a6":"markdown","1dd6ec76":"markdown","924eac32":"markdown","22e63a9b":"markdown","9c166e36":"markdown","c24064f7":"markdown","cec06d6f":"markdown","b53aaec7":"markdown","5ef4f92b":"markdown","8eb3d92a":"markdown"},"source":{"b76cc854":"# Importing libraries\nimport numpy as np \nimport pandas as pd \nimport os\nimport re\nfrom sklearn.ensemble import RandomForestClassifier\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fdffed00":"#Loads the datasets\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","02e3c4ef":"#Shows the 5 first rows in the dataset\ntrain_data.head()","07c9534e":"#Shows a summary of all the columns, the datatypes present and the number of non-null values in each column\ntrain_data.info()","a2b569e8":"#Shows an overview of missing values\ntrain_data.isnull().sum()","685915f3":"#Removes the 'PassengerId' column from the dataset. \ntrain_data = train_data.drop(['PassengerId'], axis=1)","7e0416b3":"#Removes the 'Ticket' column from the datasets\ntrain_data = train_data.drop(['Ticket'], axis=1)\ntest_data = test_data.drop(['Ticket'], axis=1)","f603e289":"#Changes cabins to numerical values\nimport re\ndeck = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"U\": 8}\ndata = [train_data, test_data]","6c8382cc":"#Convert the missing values to zero and creates new column\nfor dataset in data:\n    dataset['Cabin'] = dataset['Cabin'].fillna(\"U0\")\n    dataset['Deck'] = dataset['Cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group())\n    dataset['Deck'] = dataset['Deck'].map(deck)\n    dataset['Deck'] = dataset['Deck'].fillna(0)\n    dataset['Deck'] = dataset['Deck'].astype(int)","3bec5333":"#Removes the original 'Cabin' column from the original datasets\ntrain_data = train_data.drop(['Cabin'], axis=1)\ntest_data = test_data.drop(['Cabin'], axis=1)","1c7d1994":"data = [train_data, test_data]\n\n#Calculates the median age of passengers\nfor dataset in data:\n    mean = train_data[\"Age\"].mean()\n    std = test_data[\"Age\"].std()\n    is_null = dataset[\"Age\"].isnull().sum()\n    \n#Generates random numbers from the median age to the missing values\n    rand_age = np.random.randint(mean - std, mean + std, size = is_null)\n    \n#Replaces the missing values with the random numbers\n    age_slice = dataset[\"Age\"].copy()\n    age_slice[np.isnan(age_slice)] = rand_age\n    dataset[\"Age\"] = age_slice\n    dataset[\"Age\"] = train_data[\"Age\"].astype(int)\ntrain_data[\"Age\"].isnull().sum()","ef7cf064":"#Replaces missing values in the 'Embarked' column with the most common value in the column\ncommon_value = 'S' \ndata = [train_data, test_data]\n\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].fillna(common_value)","2dcd7c8b":"#Converts the 'Fare' column\ndata = [train_data, test_data]\n\nfor dataset in data:\n    dataset['Fare'] = dataset['Fare'].fillna(0)\n    dataset['Fare'] = dataset['Fare'].astype(int)","c4819cbb":"#Converts the 'Sex' column\ngenders = {\"male\": 0, \"female\": 1}\ndata = [train_data, test_data]\n\nfor dataset in data:\n    dataset['Sex'] = dataset['Sex'].map(genders)","1de6383e":"#Converts the 'Embarked' column\nports = {\"S\": 0, \"C\": 1, \"Q\": 2}\ndata = [train_data, test_data]\n\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].map(ports)","d8f349b6":"#I will convert the common titles into numerical values\n#Assigns the numeric values to the 'titles' column\ndata = [train_data, test_data]\ntitles = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n\nfor dataset in data:\n#Extracts and replaces the uncommon titles with common titles\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr',\\\n                                            'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n#Converts the titles to a numerical value\n    dataset['Title'] = dataset['Title'].map(titles)\n#Replaces the missing values with 0\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain_data = train_data.drop(['Name'], axis=1)\ntest_data = test_data.drop(['Name'], axis=1)","adeace94":"#Creates a new column that shows 6 age groups\ndata = [train_data, test_data]\nfor dataset in data:\n    dataset['Age'] = dataset['Age'].astype(int)\n    dataset.loc[ dataset['Age'] <= 11, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 11) & (dataset['Age'] <= 18), 'Age'] = 1 #Group 1\n    dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 22), 'Age'] = 2 #Group 2\n    dataset.loc[(dataset['Age'] > 22) & (dataset['Age'] <= 27), 'Age'] = 3 #Group 3\n    dataset.loc[(dataset['Age'] > 27) & (dataset['Age'] <= 33), 'Age'] = 4 #Group 4\n    dataset.loc[(dataset['Age'] > 33) & (dataset['Age'] <= 40), 'Age'] = 5 #Group 5\n    dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 66), 'Age'] = 6 #Group 6\n    dataset.loc[ dataset['Age'] > 66, 'Age'] = 6","cb87592e":"# Shows passengers age distribution across age groups\ntrain_data['Age'].value_counts()","0b03b4d5":"##Creates a new column that shows 4 groups\ndata = [train_data, test_data]\n\nfor dataset in data:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1 #Group 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2 #Group 2\n    dataset.loc[(dataset['Fare'] > 31) & (dataset['Fare'] <= 99), 'Fare']   = 3 #Group 3\n    dataset.loc[(dataset['Fare'] > 99) & (dataset['Fare'] <= 250), 'Fare']   = 4 #Group 4\n    dataset.loc[ dataset['Fare'] > 250, 'Fare'] = 5 #Group 5\n    dataset['Fare'] = dataset['Fare'].astype(int)","f7fd8e0f":"#Creates a new feature that shows if a passenger was travelling alone or with others\ndata = [train_data, test_data]\nfor dataset in data:\n    dataset['Relatives'] = dataset['SibSp'] + dataset['Parch']\n    dataset.loc[dataset['Relatives'] > 0, 'Not_alone'] = 0 #Zero = travelling alone\n    dataset.loc[dataset['Relatives'] == 0, 'Not_alone'] = 1#One = travelling with others\n    dataset['Not_alone'] = dataset['Not_alone'].astype(int)\ntrain_data['Not_alone'].value_counts()","f73d7a0f":"#Creates the Fare per person column\nfor dataset in data:\n    dataset['Fare_Per_Person'] = dataset['Fare']\/(dataset['Relatives']+1)\n    dataset['Fare_Per_Person'] = dataset['Fare_Per_Person'].astype(int)","8b726fee":"#Creates the Age class column\ndata = [train_data, test_data]\nfor dataset in data:\n    dataset['Age_Class']= dataset['Age']* dataset['Pclass']","afd5b212":"# The new cleaned and customized data\ntrain_data.head(10)","6aac9fcf":"#Removes undesired columns as mentioned above\nX_train = train_data.drop(\"Survived\", axis=1)\nY_train = train_data[\"Survived\"]\nX_test  = test_data.drop(\"PassengerId\", axis=1).copy()","035994f0":"#Loads and trains the RandomForest model.\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\n\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)","dcf6eb05":"#Shows the accuracy of my RandomForest model\nacc_random_forest","03881634":"#Cross-validation\nfrom sklearn.model_selection import cross_val_score\nrf = RandomForestClassifier(n_estimators=100)\nscores = cross_val_score(rf, X_train, Y_train, cv=10, scoring = \"accuracy\")\nprint(\"Scores:\", scores)\nprint(\"Mean:\", scores.mean())\nprint(\"Standard Deviation:\", scores.std())","c8ebfe9f":"# Saves my submission\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': Y_prediction})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","5695ee40":"The average accuracy of my model is a whooping **92.8%** which I believe is probably too good to be true. In order to be sure of my findings I need to to a **cross-validation** and humble my self.","b4e0739d":"Now its time to tackle the **'Name'** column. It is not ideal to simply change the values in that column to numerical values as I have done before. That is because titles tells us something about the social status of the individuals. Instead I will create a new column","f6c9dffe":"After doing the cross-validation it seems my model is actually only capable of a mean prediction accuracy of **82.3%** which i am satisfied with based on the data i fed it.\n\nBased on variables such as **Social Class**, **Age**, **Gender**  i have created a model that can predict the survival rate of passengers with a mean accuracy of **82.3%**.\n\nThis concludes my assignment","80cd7944":"### **5**\n\nIt is now finally time to begin training the RandomForest model and hopefully get some answers about the survival rate of the different type of passengers on the RMS Titanic.","f7e095b8":"### **6**\nI will now cross validate my results and conclude this assignment based on my findings","a9b31b56":"It is now time to create a new column called 'Relatives' by combining the 'Parch' and 'SibSp' columns. This will help me determine if travelling solo or with a group had an impact on passenger survival rate.","a07fe211":"**Kaggle Titanic Competition Submission by Adam Chahid**\n\nThis submission takes inspiration from the kaggle tutorial which uses the Random Forest Algorithm in order to predict the Passengers of the RMS Titanics' odds of survival.\n\nI will strive to build upon the foundations of the tutorial by adding new variables not present in the original Kaggle Titanic train dataset.\n\nThis submission will be divided into 6 parts:\n\n**1.** Getting an overview of the information in the Dataset\n**2.** Processing the data\n**3.** Converting datatypes\n**4.** Creating new columns\n**5.** Training the Random Forest Model\n**6.** Cross validation and conclusion","1fd64e00":"It is now time to process the data with the above information in mind. The goal is figure out which data variables I will use in my RandomForest algorithm and if needed, fix the missing values in the relevant columns.","713c9fed":"The last thing I need to do before I can start training the RandomForest model is to remove some more columns from the datasets.\n\nI will remove the following columns:\n\n**'Survived'** because else it is too easy\\\n**'PassengerId'** because i dont want it to count as a variable\n","92c945a6":"First of all i will import the libaries that i deem necessary:","1dd6ec76":"- The **'Embarked'** column has **2** missing values,\n- The **'Cabin'** column has **687** missing values,\n- The **'Age'** column has **177** missing values\n\nAs I mentioned before; missing values will have a negative impact on our RandomForest model and we will therefore need to find a solution to some of the missing values as we progress through this assignment.","924eac32":"I will treat the **'Fare'** column the same way i did the **'Age'** column, although with 4 and not 6 groups.","22e63a9b":"### **4**\nNow that we have cleaned the dataset and changed the relevant values in columns into numerical values, it is time to create new categories from the before edited columns\n\nI will create new columns based on the columns **'Age'**, **'Fare'**, **'Parch'** and **'SibSp'**","9c166e36":"The data consist of 3 different datatypes outlined below\n1: **int data type variables**: Survived, Pclass, SibSp, Parch, and PassengerId.\n2: **float data type variables**: Fare and Age.\n3: **object (numbers + strings) data type variables**: Name, Sex, Ticket, Cabin, and Embarked.","c24064f7":"I have now created the following columns:\n\n**Age groups**\n**Fare Groups**\n**Relatives**\n\nI will create two new columns to feed my RandomForest algorithm:\n\n**'Fare per person'** and **'Age class'**","cec06d6f":"### **3**\n\nI will now focus on converting datatypes from **floats** and **objects** into **integers**.","b53aaec7":"### **2**","5ef4f92b":"### **1**\n\nIn order to calculate the RMS Titanic passengers' surival rate we need to process and clean the provided data\n\nThe purpose of this is to identify the different types of data present and get an overview of the missing values. This is very important, in order to get the most precise output from the RandomForest algorithm which is driven by numerics and the precision suffers greatly from missing values.","8eb3d92a":"I have chosen to exclude the **'Passenger Id\"** and **'Ticket'** column as i will not be using them to calculate the passengers' odds of survival.\n\nThe **'Cabin'** column is something I have chosen to keep, as it could prove interesting to include passenger cabin location when calculating the survival rate.\n\nThe **'Age'** Column has a **177** missing values. Those I will fill out by calculating the mean age and adding them to the missing values. I chose to to go about it this way, because i dont believe that the 177 mean age values i add will skew the results too much.\n\nIn the **'Embarked'** column there are **2** missing values which i will change to most common point of embarkment."}}