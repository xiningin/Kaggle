{"cell_type":{"01ff9202":"code","a3aedc80":"code","296121c0":"code","474796ff":"code","6267c488":"code","f3f4ccbf":"code","3311ac4e":"code","3dbdbd6b":"code","14bed0c2":"code","1c2111b8":"code","003c4545":"code","cf04d11a":"code","cbbd75ae":"code","1d751cd0":"code","57354d5d":"code","7a0487c1":"code","022a61e5":"markdown"},"source":{"01ff9202":"import datetime\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.svm import SVR","a3aedc80":"allowed_countries = ['China', 'Italy', 'US', 'Spain', 'France', 'Germany', 'Ukraine', 'Canada']","296121c0":"UNNORMAL_STATISTIC_DIFF_COEF = 2","474796ff":"confirmed_df = pd.read_csv(\n    'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv(\n    'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecoveries_df = pd.read_csv(\n    'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')","6267c488":"confirmed_df.head()","f3f4ccbf":"deaths_df.head()","3311ac4e":"recoveries_df.head()","3dbdbd6b":"def get_cases_and_dates_for_plot(df: pd.DataFrame) -> (dict, list):\n    cols = df.keys()\n    data = df.loc[:, cols[4]:cols[-1]]\n    dates = data.keys()\n\n    cases = {country: [] for country in df['Country\/Region'].unique() if country in allowed_countries}\n    world_cases = []\n    for i in dates:\n        cases_sum = data[i].sum()\n\n        world_cases.append(cases_sum)\n\n        for country in cases.keys():\n            cases[country].append(df[df['Country\/Region'] == country][i].sum())\n\n    cases['World'] = world_cases\n\n    adjusted_dates = np.array([i for i in range(len(dates))]).reshape(-1, 1)\n\n    return cases, adjusted_dates","14bed0c2":"def get_unnormal_from_avg_cases_and_avg_increase(cases: list) -> (list, float):\n    daily_increases = [(b * 100 \/ a) - 100 for a, b in zip(cases, cases[1:])]\n    avg_daily_increases = round(np.mean(daily_increases), 2)\n    return [None] + [cases[i] if el > avg_daily_increases * UNNORMAL_STATISTIC_DIFF_COEF else None for i, el in\n                     enumerate(daily_increases)], avg_daily_increases","1c2111b8":"def show_cases_plot(cases: dict, dates: list, title: str) -> None:\n    plt.figure(figsize=(16, 9))\n    for value in cases.values():\n        plt.plot(dates, value)\n    unnormal_from_avg_cases, avg_daily_increase = get_unnormal_from_avg_cases_and_avg_increase(cases['World'])\n    plt.plot(dates, unnormal_from_avg_cases, linestyle='dashed', color='black')\n    plt.figtext(.15, .4, f\"AVG daily increase = {avg_daily_increase}%\")\n    plt.figtext(.15, .35, f\"Cases where increase more than AVG in {UNNORMAL_STATISTIC_DIFF_COEF} times marked dotted\")\n\n    plt.title(title, size=20)\n    plt.xlabel(f'Days Since {dates[0]}', size=20)\n    plt.ylabel('# of Cases', size=30)\n    plt.legend(cases.keys(), prop={'size': 20})\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()","003c4545":"confirmed_cases, dates = get_cases_and_dates_for_plot(confirmed_df)\nworld_cases = np.array(confirmed_cases['World']).reshape(-1, 1)\nshow_cases_plot(confirmed_cases, dates, 'Number of Coronavirus cases')","cf04d11a":"show_cases_plot(*get_cases_and_dates_for_plot(deaths_df), 'Number of Coronavirus deaths')","cbbd75ae":"show_cases_plot(*get_cases_and_dates_for_plot(recoveries_df), 'Number of Coronavirus recoveries')","1d751cd0":"days_in_future = 10\nfuture_forcast = np.array([i for i in range(len(dates) + days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-days_in_future]\ndays_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nstart = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","57354d5d":"X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22,\n                                                                                            world_cases, test_size=0.05,\n                                                                                            shuffle=False)\nsvm_confirmed = SVR(shrinking=True, kernel='poly', gamma=0.01, epsilon=1, degree=8, C=0.1)\nsvm_confirmed.fit(X_train_confirmed, y_train_confirmed)\nsvm_pred = svm_confirmed.predict(future_forcast)","7a0487c1":"plt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, svm_pred, linestyle='dashed', color='purple')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'SVM predictions'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","022a61e5":"This notebook is just a visualization actuall statistics of Coronavirus in the world and selected countries and practice for me as a student to work with SVR models. \n\nThanks for the links to data sources and explaining SVM prediction model this [kernel](https:\/\/www.kaggle.com\/therealcyberlord\/coronavirus-covid-19-visualization-prediction)"}}