{"cell_type":{"76c03b1e":"code","8a18135a":"code","dc37770c":"code","ae1af0cc":"code","b7b02c1a":"code","c33afd3e":"code","b5f738a0":"code","83d304ff":"code","0346b9f6":"code","d6f7b936":"code","f288e131":"code","cdb3a357":"code","0da03467":"code","0c48c1a8":"code","725726d8":"code","b87ec917":"code","6039847f":"code","f11f58dc":"code","88eac280":"code","9bcc899f":"code","62aaa613":"code","71f6d5a6":"code","5cc1f298":"code","063ca67f":"code","871b5d55":"code","d90f533f":"code","6a18b8c7":"code","2554d2a6":"code","e77f7c02":"code","5f3d6265":"markdown","533629ff":"markdown","42953fc6":"markdown","0696306b":"markdown","bdd1a854":"markdown","30126855":"markdown","97a7a982":"markdown","daf97e5b":"markdown","ee645923":"markdown","73a05ba7":"markdown","11c6a5e6":"markdown","d604ff9a":"markdown","f3c5aca9":"markdown","f9508689":"markdown","bebf71a1":"markdown","cca3c753":"markdown","379fb69c":"markdown","39bb819c":"markdown","ad7bf06a":"markdown","9cf26145":"markdown","44066ea6":"markdown","a8bb6dc4":"markdown","b7d5a11f":"markdown"},"source":{"76c03b1e":"!pip install yfinance","8a18135a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n\nimport matplotlib.pyplot as plt # plot data\nimport yfinance as yf # get the data for the stocks\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np # linear algebra\nfrom sklearn import preprocessing # Sklearn tools for data processing\nfrom tensorflow.keras.utils import plot_model # Drowing Keras's models\nfrom keras.models import Model, Sequential # Keras's models\nfrom keras.layers import Input, Conv1D, MaxPooling1D, Bidirectional, LSTM, Dense # Keras's layers","dc37770c":"# Ticker and indicators:\nNAME_SHARE = 'LSRG.ME'\nINDICATORS = ['Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']\nFEATURE = 'Adj Close'\n\n# Time convertion and feature engineering:\nDATE_FORMAT = '%Y.%m.%d' # Date format for API Yahoo finance\n\n# Dataset split:\nTRAIN_SIZE = 0.7\n\n# Windowing:\nWINDOW_SIZE = 5\nPREDICTION_DAYS = 60\n\n# Model LSTM settings:\nMAX_EPOCHS = 50\nBATCH_SIZE = 64","ae1af0cc":"# Get data for the stock:\nraw_data = yf.download(NAME_SHARE)\nraw_data","b7b02c1a":"# Plot data:\nfig, axs = plt.subplots(len(INDICATORS), figsize=(23, 23))\nfig.suptitle(NAME_SHARE, fontsize=20)\nfor i in range(len(INDICATORS)):\n    axs[i].title.set_text(INDICATORS[i])\n    axs[i].title.set_size(12)\n    axs[i].plot(raw_data[INDICATORS[i]])","c33afd3e":"raw_data.describe().transpose()","b5f738a0":"train_data = raw_data[FEATURE][:int(TRAIN_SIZE * raw_data.shape[0])].values\ntest_data = raw_data[FEATURE][int(TRAIN_SIZE * raw_data.shape[0]):].values","83d304ff":"scaler = preprocessing.StandardScaler()\ntrain_data = scaler.fit_transform(train_data.reshape(-1, 1))\ntest_data = scaler.transform(test_data.reshape(-1, 1))","0346b9f6":"# Function for windowing data:\ndef windowing(dataset: np.ndarray, win_len: int) -> np.ndarray:\n    X, y = list(), list()\n    for i in range(win_len, dataset.shape[0]):\n        X.append(dataset[i - win_len:i, :])\n        y.append(dataset[i, :])\n    X = np.array(X)\n    y = np.array(y)\n\n    return X, y","d6f7b936":"X_train, y_train = windowing(dataset=train_data, win_len=WINDOW_SIZE)\nX_test, y_test = windowing(dataset=test_data, win_len=WINDOW_SIZE)","f288e131":"from keras import backend as K\nfrom tensorflow import keras\n\ndef root_mean_squared_error(y_true, y_pred):\n    return K.sqrt(K.mean(K.square(y_pred - y_true)))\n\ndef coeff_determination(y_true, y_pred):\n    from keras import backend as K\n    SS_res =  K.sum(K.square( y_true-y_pred ))\n    SS_tot = K.sum(K.square( y_true - K.mean(y_true) ) )\n    return ( 1 - SS_res\/(SS_tot + K.epsilon()) )","cdb3a357":"model = Sequential()\nmodel.add(Conv1D(32, 1, activation='sigmoid', padding='same', input_shape=(X_train.shape[1], X_train.shape[2])))\nmodel.add(MaxPooling1D(1, padding='same'))\nmodel.add(Bidirectional(LSTM(64, activation='tanh', return_sequences=False)))\nmodel.add(Dense(1))\n\noptimizer = keras.optimizers.Adam(lr=0.01)\nmodel.compile(optimizer=optimizer, loss='mean_absolute_error', metrics=['mean_absolute_error', root_mean_squared_error, coeff_determination])\nK.set_value(model.optimizer.learning_rate, 0.001)","0da03467":"plot_model(model, 'model.png', show_shapes=True)","0c48c1a8":"model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=MAX_EPOCHS, batch_size=BATCH_SIZE)","725726d8":"y_pred_train = model.predict(X_train)\ny_pred_test = model.predict(X_test)\ny_pred_train = scaler.inverse_transform(y_pred_train)\ny_pred_test = scaler.inverse_transform(y_pred_test)\n\ntimeline_train = raw_data.index[WINDOW_SIZE:int(TRAIN_SIZE * raw_data.shape[0])]\ntimeline_test = raw_data.index[int(TRAIN_SIZE * raw_data.shape[0]) + WINDOW_SIZE:]","b87ec917":"plt.figure(figsize=(23, 12))\nplt.title(NAME_SHARE + ': ' + FEATURE)\nplt.plot(raw_data[FEATURE])\nplt.plot(timeline_train, y_pred_train)\nplt.plot(timeline_test, y_pred_test)\nplt.legend(['Real', 'Train', 'Test'])","6039847f":"def makePredictionInFuture(X_last: np.ndarray, win_len: int) -> np.ndarray:\n    X_forecast = X_last\n    y_pred_future = np.zeros(win_len)\n    for i in range(win_len):\n        X_forecast = X_forecast.reshape((1, X_forecast.shape[0], X_forecast.shape[1]))\n        y_forecast = model.predict(X_forecast)\n        X_forecast = X_forecast.reshape((X_forecast.shape[1], X_forecast.shape[2]))\n        X_forecast = np.roll(X_forecast, shift=-1)\n        X_forecast[-1] = y_forecast\n        y_pred_future[i] = y_forecast\n    y_pred_future = scaler.inverse_transform(y_pred_future.reshape(-1, 1))\n    \n    return y_pred_future","f11f58dc":"y_pred_future = makePredictionInFuture(X_last=X_test[-1], win_len=PREDICTION_DAYS)","88eac280":"def generateNewTime(time_start, time_delta):\n    timeline_future = list()\n    for i in range(PREDICTION_DAYS):\n        time_start = time_start + time_delta\n        timeline_future.append(time_start)\n    \n    timeline_future = np.array(timeline_future)\n    timeline_future = pd.DatetimeIndex(timeline_future, name='Date')\n    \n    return timeline_future","9bcc899f":"time_delta = raw_data.index[1] - raw_data.index[0]\ntime_point = raw_data.index[-1]\ntimeline_future = generateNewTime(time_start=time_point, time_delta=time_delta)","62aaa613":"plt.figure(figsize=(23, 12))\nplt.title(NAME_SHARE + ': ' + FEATURE)\nplt.plot(timeline_test, y_pred_test)\nplt.plot(timeline_future, y_pred_future)\nplt.legend(['Real', 'Prediction'])","71f6d5a6":"value_stock = {FEATURE: y_pred_future.reshape(y_pred_future.shape[0])}\nfuture_value = pd.DataFrame(value_stock, index=timeline_future)","5cc1f298":"future_value","063ca67f":"data = scaler.fit_transform(raw_data[FEATURE].values.reshape(-1, 1))\nX, y = windowing(dataset=data, win_len=WINDOW_SIZE)","871b5d55":"model.fit(X, y, epochs=MAX_EPOCHS, batch_size=BATCH_SIZE)","d90f533f":"value_forecated = makePredictionInFuture(X_last=X[-1], win_len=PREDICTION_DAYS)","6a18b8c7":"timeline_value_forecasted = generateNewTime(time_start=time_point, time_delta=time_delta)","2554d2a6":"plt.figure(figsize=(23, 12))\nplt.title(NAME_SHARE + ': ' + FEATURE)\nplt.plot(raw_data[FEATURE][-y_pred_test.shape[0]:])\nplt.plot(timeline_value_forecasted, value_forecated)\nplt.legend(['Real', 'Prediction'])","e77f7c02":"value_future_stock = {FEATURE: value_forecated.reshape(value_forecated.shape[0])}\nfinal_future_value = pd.DataFrame(value_forecated, index=timeline_future)\nfinal_future_value","5f3d6265":"# Settings and params","533629ff":"Load data of shares from Yahoo Finance.","42953fc6":"## Make prediction","0696306b":"# Libraries","bdd1a854":"## Observation data","30126855":"Check stats of the dataset.","97a7a982":"## Fit model","daf97e5b":"## Scale data","ee645923":"# Fit the model on the full dataset","73a05ba7":"## Make prediction in the future","11c6a5e6":"# CNN-BiLSTM model","d604ff9a":"## Split train test dataset","f3c5aca9":"# Preprocessing data","f9508689":"## Plot graphics","bebf71a1":"# Load data and data exploration","cca3c753":"Model made based on the article \"A Stock Closing Price Prediction Model Based on CNN-BiLSTM\".\n\nI have edited model structure for prediction in the future on the unseen data. It is indicator Adj Close.\n\nIn this notebook you can find prediction result of the model on set number of the days in the future.\n\nYou can find all the details regarding the model in the article.\n\nYou can see link on the article below.\n\nhttps:\/\/www.researchgate.net\/publication\/354773136_A_Stock_Closing_Price_Prediction_Model_Based_on_CNN-BiSLSTM","379fb69c":"# Build and fit the model","39bb819c":"## Load data","ad7bf06a":"## Windowing data","9cf26145":"## Create new inputs for the model","44066ea6":"## Fit model","a8bb6dc4":"## Make prediction","b7d5a11f":"## Build model"}}