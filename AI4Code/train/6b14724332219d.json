{"cell_type":{"0a316716":"code","7ad53d14":"code","c06f9d2c":"code","0916d952":"code","c991962a":"code","cde20927":"code","a3613136":"code","f59e3186":"code","8778a401":"code","8a5b9aa2":"code","5464655f":"code","4b1d83a4":"code","5c393648":"code","cf4a9c71":"code","29c625d9":"code","742fc473":"code","f511d2ee":"code","d91cfa3e":"code","bb7cf76c":"code","a2045fca":"code","0ef86f5f":"code","7d7ce59c":"code","82698b6b":"code","56f86c86":"code","0071059b":"code","74f3d820":"code","d7b7b3b8":"code","77af9bc1":"code","1eac9f86":"code","e8552eb0":"code","e9183bd0":"code","e1a59144":"code","31bffffd":"code","74352456":"code","1694cdc6":"code","1c42ec3a":"code","d599485f":"code","cf5bb4e9":"code","ea1d5fad":"code","330c6e11":"code","a7551158":"code","25ef736e":"code","640cdd29":"code","d5cb2c31":"code","772c61f6":"code","7d2ab45f":"code","bc8e40d3":"code","04a39c0e":"code","2f45d5e7":"code","907e0125":"code","c8d4f1fd":"code","d6ed1a6d":"code","d714600f":"code","0273e620":"code","ec55d375":"code","4c506740":"code","4e029a95":"code","351dbb9a":"code","446451f5":"code","50faad87":"code","7289f602":"code","90a89c06":"code","0f422d48":"code","ce5c6627":"code","430d7e6f":"code","6288b2e2":"code","05ced98f":"code","dd10af43":"code","6c00cff3":"code","a7911756":"code","5ea86ea9":"code","175189de":"code","03355af7":"code","96e44d41":"code","5d759c28":"code","ccb78c0b":"code","887bc78d":"markdown","38d4bb18":"markdown","b1b27446":"markdown","da989169":"markdown","c9fad017":"markdown","35076524":"markdown","0f844a5f":"markdown","73dad312":"markdown","fdf96e68":"markdown","daa0a98d":"markdown","41e869ee":"markdown","fde02e1e":"markdown","622a9cc1":"markdown","bf9f760b":"markdown","17f6a03a":"markdown","d8c1a789":"markdown","4a77b9a5":"markdown","75d886da":"markdown","079cf602":"markdown","a61db281":"markdown","d4dfb83a":"markdown","0f7d5a07":"markdown","a9fbcd82":"markdown","09882ac2":"markdown","6779a82f":"markdown","9fdacada":"markdown","4ebaec74":"markdown","5aea68c1":"markdown"},"source":{"0a316716":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ad53d14":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","c06f9d2c":"print('train size: {}, test size: {}'.format(train.shape, test.shape))","0916d952":"train.head()","c991962a":"train.info()","cde20927":"train['SalePrice'].value_counts()","a3613136":"train['SalePrice'].describe()","f59e3186":"train['SalePrice'].hist()","8778a401":"import seaborn as sns\nsns.distplot(train['SalePrice']);","8a5b9aa2":"#skewness and kurtosis\nprint(\"Skewness: %f\" % train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % train['SalePrice'].kurt())","5464655f":"train.dtypes","4b1d83a4":"test.dtypes","5c393648":"test['SalePrice'] = -1\ntest['set'] = 'TEST'\ntrain['set'] = 'TRAIN'","cf4a9c71":"print('train shape: {} and test shape: {}'.format(train.shape, test.shape))","29c625d9":"DATA = train.append(test)\nDATA","742fc473":"DATA_numerical = DATA.drop(['SalePrice'], axis=1).select_dtypes(exclude=['object'])\nDATA_numerical.head()","f511d2ee":"no_Nan = DATA_numerical.isnull().sum().sort_values(ascending= False)\npercentage = (DATA_numerical.isnull().sum()\/DATA_numerical.isnull().count()).sort_values(ascending= False)\nmissing_data = pd.concat([no_Nan, percentage], axis= 1, keys= ['no_Nan', 'Percentage'])\nmissing_data.head(15)","d91cfa3e":"try:\n    from sklearn.impute import SimpleImputer\nexcept ImportError:\n    from sklearn.preprocessing import Imputer as SimpleImputer\n\nimputer = SimpleImputer(strategy=\"median\")","bb7cf76c":"DATA_imp = imputer.fit_transform(DATA_numerical)\nDATA_imp","a2045fca":"DATA_numerical = pd.DataFrame(DATA_imp, columns= DATA_numerical.columns,\n                                              index= DATA_numerical.index)\nDATA_numerical.head()","0ef86f5f":"DATA_numerical.isnull().sum()","7d7ce59c":"DATA_objects = DATA.drop(['SalePrice', 'set'], axis=1).select_dtypes(exclude=['int64', 'float64'])\nDATA_objects.head()","82698b6b":"DATA_objects.shape","56f86c86":"no_Nan = DATA_objects.isnull().sum().sort_values(ascending= False)\npercentage = (DATA_objects.isnull().sum()\/DATA_objects.isnull().count()).sort_values(ascending= False)\nmissing_data = pd.concat([no_Nan, percentage], axis= 1, keys= ['no_Nan', 'Percentage'])\nmissing_data.head(25)","0071059b":"print('Before drop: ', DATA_objects.shape)\nDATA_objects = DATA_objects.drop((missing_data[missing_data['no_Nan'] > 160]).index, 1)\nprint('After drop: ', DATA_objects.shape)","74f3d820":"DATA_objects.head(3)","d7b7b3b8":"no_Nan = DATA_objects.isnull().sum().sort_values(ascending= False)\npercentage = (DATA_objects.isnull().sum()\/DATA_objects.isnull().count()).sort_values(ascending= False)\nmissing_data = pd.concat([no_Nan, percentage], axis= 1, keys= ['no_Nan', 'Percentage'])\nmissing_data.head(20)","77af9bc1":"Garage_incomplete = DATA_objects[['GarageCond', 'GarageQual', 'GarageFinish', 'GarageType']]\n# Garage_incomplete[Garage_incomplete.isnull().any(axis=1)]\nGarage_incomplete.head(5)","1eac9f86":"DATA_objects['GarageCond'].value_counts()","e8552eb0":"DATA_objects['GarageCond'].fillna('Nv', inplace= True)\nDATA_objects['GarageCond'].value_counts()","e9183bd0":"DATA_objects['GarageQual'].value_counts()","e1a59144":"DATA_objects['GarageQual'].fillna('Nv', inplace= True)\nDATA_objects['GarageQual'].value_counts()","31bffffd":"DATA_objects['GarageType'].value_counts()","74352456":"DATA_objects['GarageType'].fillna('Attchd', inplace= True)\nDATA_objects['GarageType'].value_counts()","1694cdc6":"DATA_objects['GarageFinish'].value_counts()","1c42ec3a":"DATA_objects['GarageFinish'].fillna('Unf', inplace= True)\nDATA_objects['GarageFinish'].value_counts()","d599485f":"no_Nan = DATA_objects.isnull().sum().sort_values(ascending= False)\npercentage = (DATA_objects.isnull().sum()\/DATA_objects.isnull().count()).sort_values(ascending= False)\nmissing_data = pd.concat([no_Nan, percentage], axis= 1, keys= ['no_Nan', 'Percentage'])\nmissing_data.head(15)","cf5bb4e9":"BSMT = pd.DataFrame(DATA[['BsmtCond', 'BsmtQual', 'BsmtFinType1', 'BsmtExposure', 'BsmtFinType2']])\nBSMT","ea1d5fad":"DATA_objects['BsmtExposure'].value_counts()","330c6e11":"DATA_objects['BsmtExposure'].fillna('No', inplace= True)\nDATA_objects['BsmtExposure'].value_counts()","a7551158":"DATA_objects['BsmtFinType2'].value_counts()","25ef736e":"DATA_objects['BsmtFinType2'].fillna('Unf', inplace= True)\nDATA_objects['BsmtFinType2'].value_counts()","640cdd29":"DATA_objects['BsmtCond'].value_counts()","d5cb2c31":"DATA_objects['BsmtCond'].fillna('Nv', inplace= True)\nDATA_objects['BsmtCond'].value_counts()","772c61f6":"DATA_objects['BsmtFinType1'].value_counts()","7d2ab45f":"DATA_objects['BsmtFinType1'].fillna('Unf', inplace= True)\nDATA_objects['BsmtFinType1'].value_counts()","bc8e40d3":"DATA_objects['BsmtQual'].value_counts()","04a39c0e":"DATA_objects['BsmtQual'].fillna('Nv', inplace= True)\nDATA_objects['BsmtQual'].value_counts()","2f45d5e7":"DATA_objects['MasVnrType'].value_counts()","907e0125":"DATA_objects['MasVnrType'].fillna('None', inplace= True)\nDATA_objects['MasVnrType'].value_counts()","c8d4f1fd":"DATA_objects['Electrical'].value_counts()","d6ed1a6d":"DATA_objects['Electrical'].fillna('SBrkr', inplace= True)\nDATA_objects['Electrical'].value_counts()","d714600f":"no_Nan = DATA_objects.isnull().sum().sort_values(ascending= False)\npercentage = (DATA_objects.isnull().sum()\/DATA_objects.isnull().count()).sort_values(ascending= False)\nmissing_data = pd.concat([no_Nan, percentage], axis= 1, keys= ['no_Nan', 'Percentage'])\nmissing_data.head(8)","0273e620":"DATA_objects['MSZoning'].value_counts()","ec55d375":"DATA_objects['MSZoning'].fillna('RL', inplace= True)\nDATA_objects['MSZoning'].value_counts()","4c506740":"DATA_objects['Functional'].value_counts()","4e029a95":"DATA_objects['Functional'].fillna('Typ', inplace= True)\nDATA_objects['Functional'].value_counts()","351dbb9a":"DATA_objects['Utilities'].value_counts()","446451f5":"DATA_objects['Utilities'].fillna('AllPub', inplace= True)\nDATA_objects['Utilities'].value_counts()","50faad87":"DATA_objects['Exterior2nd'].value_counts()","7289f602":"DATA_objects['Exterior2nd'].fillna('VinylSd', inplace= True)\nDATA_objects['Exterior2nd'].value_counts()","90a89c06":"DATA_objects['Exterior1st'].value_counts()","0f422d48":"DATA_objects['Exterior1st'].fillna('VinylSd', inplace= True)\nDATA_objects['Exterior1st'].value_counts()","ce5c6627":"DATA_objects['KitchenQual'].value_counts()","430d7e6f":"DATA_objects['KitchenQual'].fillna('Nv', inplace= True)\nDATA_objects['KitchenQual'].value_counts()","6288b2e2":"DATA_objects['SaleType'].value_counts()","05ced98f":"DATA_objects['SaleType'].fillna('WD', inplace= True)\nDATA_objects['SaleType'].value_counts()","dd10af43":"from sklearn.preprocessing import OneHotEncoder\n\nohe = OneHotEncoder()\nStretching_Data_Objects = ohe.fit_transform(DATA_objects)\n\nStretching_Data_Objects = pd.DataFrame(Stretching_Data_Objects.toarray())\nStretching_Data_Objects","6c00cff3":"DATA_numerical.head(4)","a7911756":"numeric_data_Standard = np.array(DATA_numerical)\nnumeric_data_Equilibration = np.array(DATA_numerical)","5ea86ea9":"from sklearn.preprocessing import StandardScaler\ndef StandardScaling():\n    data = numeric_data_Standard\n    SC = StandardScaler()\n    data = SC.fit_transform(data)\n    \n    input = pd.DataFrame(data)\n    return input","175189de":"def Equilibration_Scaling():\n    data = numeric_data_Equilibration\n    A = data\n    \n    N = np.shape(A)[0]  \n    D = np.shape(A)[1]\n     \n    r = np.zeros((1, N))\n    s = np.zeros((1, D))\n    \n    row_max = np.zeros((1, N))\n    col_max = np.zeros((1, D))\n    \n    for i in range(0, N):       # 0 >> 1 >> 2\n        max = 0\n        for j in range(0, D):   # 0 >> 1 >> 2 >> 3\n            if(np.abs(data[i][j]) > max):\n                max = np.abs(data[i][j])\n                row_max[0][i] = max\n        if(row_max[0][i] != 0):\n           r[0][i] = (1\/row_max[0][i])\n           data[i, :] = data[i, :] * r[0][i] \n       \n    for i in range(0, D):       # 0 >> 1 >> 2 << 3\n        max = 0\n        for j in range(0, N):   # 0 >> 1 >> 2\n            if(np.abs(data[j][i]) > max):\n                max = np.abs(data[j][i])\n                col_max[0][i] = max\n        if(col_max[0][i] != 0):\n           s[0][i] = (1\/col_max[0][i])\n           data[:, i] = data[:, i] * s[0][i]\n           \n    input = pd.DataFrame(data)\n    return input","03355af7":"X_Standard_Scal = np.array(StandardScaling())\nX_Equilibration_Scal = np.array(Equilibration_Scaling())\n\n##### Concat together #####\n\nX_Standard_Scal = pd.DataFrame(np.c_[X_Standard_Scal, Stretching_Data_Objects])\nX_Equilibration_Scal = pd.DataFrame(np.c_[X_Equilibration_Scal, Stretching_Data_Objects])\n\ny = DATA['SalePrice']","96e44d41":"def display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())","5d759c28":"from sklearn.ensemble import RandomForestRegressor\n\nforest_reg = RandomForestRegressor(n_estimators=10, random_state=42)\nforest_reg.fit(X_Standard_Scal, y)","ccb78c0b":"from sklearn.metrics import mean_squared_error\n\nhousing_predictions = forest_reg.predict(X_Standard_Scal)\nforest_mse = mean_squared_error(y, housing_predictions)\nforest_rmse = np.sqrt(forest_mse)\nforest_rmse","887bc78d":"### Functional","38d4bb18":"### GarageCond","b1b27446":"# Data Exploration","da989169":"* There are three types of Kurtosis: Mesokurtic, Leptokurtic, and Platykurtic.\n* Mesokurtic is similar to the normal curve with the standard value of 3.","c9fad017":"### BsmtFinType2","35076524":"### GarageQual","0f844a5f":"#### Using Imputer Function to fill NAN values","73dad312":"### KitchenQual","fdf96e68":"### MasVnrType","daa0a98d":"### Exterior1st","41e869ee":"### BsmtCond","fde02e1e":"# Data Preparation\n## Handling Numerical DATA Attributes","622a9cc1":"### MSZoning","bf9f760b":"### GarageFinish","17f6a03a":"### Utilities","d8c1a789":"### Stretching Data_Objects","4a77b9a5":"### SaleType","75d886da":"### BsmtFinType1","079cf602":"### Then we can concatnet together","a61db281":"### BsmtQual","d4dfb83a":"### Electrical","0f7d5a07":"## Handling Text and Categorical Attributes","a9fbcd82":"# Feature Scaling\n### We do Scaling with Standard Scaling, I can addition Log Transform and Equilibration Techniques","09882ac2":"### BsmtExposure","6779a82f":"### GarageType","9fdacada":"### Distribution of SalePrice","4ebaec74":"### Exterior2nd","5aea68c1":"### Fill the Nan Value of the best Counts of Attribute"}}