{"cell_type":{"b5f1bc2e":"code","6c4f7276":"code","ca5c1d28":"code","51bd18e4":"code","84b604bf":"code","54e53f19":"code","e641439b":"code","adb437bc":"code","20ea5b11":"code","b5ad6b03":"code","9900ff9e":"code","3375e888":"code","e49db25a":"code","70118581":"code","daa1dd73":"code","79f48490":"code","2d49ae6f":"code","6f571ebf":"code","75cd7731":"code","f21bd653":"code","af289c90":"code","be00a268":"code","53b9dd75":"code","9ef16e66":"code","e2b7426b":"code","a4a4f165":"code","60d563f0":"code","8b49291d":"code","6437a57b":"code","5c7b4183":"code","389daf52":"code","f83b43a3":"markdown","42c2b851":"markdown","deee25ca":"markdown","b1fdf60c":"markdown","696e9a7a":"markdown","31e9143e":"markdown","1230642e":"markdown","bc56be3f":"markdown","661e54af":"markdown","f52b3ffc":"markdown","a3de2a63":"markdown","ffa14283":"markdown","fa5bae4b":"markdown","97c1b2a9":"markdown","9fdcb0ff":"markdown"},"source":{"b5f1bc2e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom IPython.core.display import HTML\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score,mean_absolute_error\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nimport missingno\nfrom xgboost import XGBClassifier\nfrom sklearn import svm\nfrom sklearn.model_selection import GridSearchCV","6c4f7276":"train = pd.read_csv(\"\/kaggle\/input\/iba-ml2-mid-project\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/iba-ml2-mid-project\/test.csv\")","ca5c1d28":"train.head()","51bd18e4":"train.shape","84b604bf":"train.columns","54e53f19":"test.describe()","e641439b":"train.dtypes","adb437bc":"train.credit_line_utilization = train.credit_line_utilization.apply(lambda x: str(x).strip().replace(\",\",\".\")).astype(float)\ntest.credit_line_utilization = test.credit_line_utilization.apply(lambda x: str(x).strip().replace(\",\",\".\")).astype(float)\ntrain.dtypes","20ea5b11":"train.isnull().sum()","b5ad6b03":"missingno.matrix(train)","9900ff9e":"test.isnull().sum()","3375e888":"fig, ax = plt.subplots()\ncorrelation = train.corr()\nsns.heatmap(data = correlation, annot = False)\nplt.show()\n# As it seems, there are not strong correlations betwween the features except of number_of_credit_lines and reapl_estate_loans","e49db25a":"fig, ax = plt.subplots(figsize = (15,10))\nsns.countplot(x = train.age, ax = ax)\ntrain.age = train.age.apply(lambda x: float(x))\nages = [int(i) for i in train.age.value_counts().index.tolist()]\nax.set_xticklabels(sorted(ages), rotation = 80)\nplt.show()","70118581":"train.describe()","daa1dd73":"fig, ax = plt.subplots()\nsns.boxplot(x = train.number_dependent_family_members, ax = ax)\nplt.show()\n#Since there are some outliers in this feauture, i am going to treat them with replacing median value","79f48490":"train.loc[train.number_dependent_family_members > 4, \"number_dependent_family_members\"] = train.number_dependent_family_members.median()","2d49ae6f":"fig, ax = plt.subplots()\nsns.violinplot(x = train.monthly_income, ax = ax)\nplt.show()","6f571ebf":"#removing the incomes higher than 1000000 which is not convincing from datasets.\ntrain.drop(train.loc[train.monthly_income > 1000000].index.tolist(), axis = 0, inplace = True)\n","75cd7731":"# In this column, 3rd quartile is about 0.4. But we have some values which are quite bigger than this number. we are gonna drop them.\ntrain.drop(train.loc[train.ratio_debt_payment_to_income > 120].index.tolist(), axis = 0, inplace = True)","f21bd653":"#changing value for outliers\ntrain.loc[train.credit_line_utilization > 2, \"credit_line_utilization\"] = train.credit_line_utilization.median()","af289c90":"train.drop(train.loc[train.number_of_previous_late_payments_up_to_59_days > 20].index.tolist(), axis = 0, inplace = True)\n","be00a268":"train.drop(train.loc[train.number_of_previous_late_payments_up_to_89_days > 20].index.tolist(), axis = 0, inplace = True)","53b9dd75":"train.drop(train.loc[train.number_of_previous_late_payments_90_days_or_more > 20].index.tolist(), axis = 0, inplace = True)","9ef16e66":"# Imputing only age with median value\nfrom sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy = \"median\")\ntrain[\"age\"] = imp.fit_transform(train[\"age\"].values.reshape(-1,1))\ntest[\"age\"] = imp.fit_transform(test[\"age\"].values.reshape(-1,1))\ntrain.head()","e2b7426b":"# imputing whole dataframe with mean values\nimp2 = SimpleImputer(missing_values=np.nan, strategy = \"mean\")\ncolumn_names = train.columns\ntrain = pd.DataFrame(imp2.fit_transform(train))\ntrain.columns = column_names\ncolumn_names_test = test.columns\ntest = pd.DataFrame(imp2.fit_transform(test))\ntest.columns = column_names_test\n","a4a4f165":"#seperating dependent and indepenedent variables\nX = train.iloc[:,:-1]\ny = train.iloc[:,-1]","60d563f0":"X.isnull().sum()\n","8b49291d":"from imblearn.under_sampling import RandomUnderSampler\nfrom collections import Counter\nunder = RandomUnderSampler()\nX, y = under.fit_resample(X, y)\nprint(Counter(y))","6437a57b":"from sklearn.model_selection import GridSearchCV\nxgb = GridSearchCV(XGBClassifier(), {\n    'n_estimators': [1,10,20],\n    'max_depth': [1,10,20]\n}, cv=3, return_train_score=False)\nxgb.fit(X, y)\nprint(xgb.best_params_)","5c7b4183":"from xgboost import XGBClassifier\nclsfr = XGBClassifier(max_depth = 1, n_estimators = 10)\nclsfr.fit(X,y)#fitting\npredictions = pd.DataFrame({\"Id\":np.arange(1, test.shape[0]+1),\"Predicted\":clsfr.predict_proba(test)[:,1]})#creating dataframe","389daf52":"submission = predictions.to_csv(\"C:\\\\Users\\\\99455\\\\Downloads\\\\submission.csv\", index = False)","f83b43a3":"**Insights into Correlation between features**","42c2b851":" ****Changing the data types of column called credit_line_utilization to float after some corrections**** ","deee25ca":"**Better description of missing values**","b1fdf60c":"# Visualizations for better understanding and interpretation","696e9a7a":"**Recognizing the data**","31e9143e":"**Checking missing values**","1230642e":"**Reading csv files**","bc56be3f":"# Outlier treatment","661e54af":"### Dropping outliers from columns shown below","f52b3ffc":"*I won't treat the outliers for number_dependent_family_member column in test data, because I do not think it is typo or error. If I think for others as typo, I will.*","a3de2a63":"# Imputation","ffa14283":"## Building a model with best parameters","fa5bae4b":"## Solving Imbalancing problem with Undersampling","97c1b2a9":"**Importing necessary libraries**","9fdcb0ff":"## Creating csv file"}}