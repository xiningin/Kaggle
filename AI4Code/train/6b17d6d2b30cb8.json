{"cell_type":{"c0ae7d99":"code","287f2108":"code","24bb992e":"code","372a9860":"code","32a91724":"code","056a7a37":"code","595f7041":"code","330cd737":"code","5ab294d2":"code","e60f0213":"code","492e217d":"code","fb3724e3":"markdown","8c00ca38":"markdown","7fd6f496":"markdown"},"source":{"c0ae7d99":"import numpy as np\nimport pandas as pd","287f2108":"df = pd.read_csv('..\/input\/resale-flat-prices-in-singapore\/flat-prices.csv')\ndf","24bb992e":"df.isnull().sum()","372a9860":"from geopy import geocoders\nfrom geopy.extra.rate_limiter import RateLimiter\n\n# Rate-limit our requests since we're going to geocode\n# many rows at once. Don't want to overwhelm the server-side!\nagent = geocoders.Nominatim(user_agent = 'kaggle-ds-singapore-flat')\n_geocode = RateLimiter(agent.geocode, min_delay_seconds = 0.1)\n\n# Prepare a fallback query that is more reliable\/general than the initial query.\n# country_codes limits our geocoding operation within Singapore (sg).\ndef geocode(query, fallback_query):\n    result = _geocode(query, country_codes = ['sg'])\n    if result is None:\n        result = _geocode(fallback_query, country_codes = ['sg'])\n    \n    return result","32a91724":"# Collect all unique queries into a dictionary. This is done so that\n# when there's two properties situated on the same address, we don't\n# geocode for that address twice.\nunique_locations = df[['town', 'street_name']].drop_duplicates().reset_index(drop = True)\n\ngeocoding_queries = {}\n\nfor i in range(len(unique_locations)):\n    street_name = unique_locations.loc[i, 'street_name']\n    town = unique_locations.loc[i, 'town']\n\n    geocoding_queries[street_name] = town","056a7a37":"from tqdm import tqdm\n\ngeocoding_results = {}\n\nfor street_name, town in tqdm(geocoding_queries.items()):\n    geocoding_results[street_name] = geocode(street_name, town)","595f7041":"# Check for results\nfor street_name, result in geocoding_results.items():\n    if result is None:\n        print(street_name, \"|\", geocoding_queries[street_name])","330cd737":"# \"Central Area\" is indeed a bad word to geocode, especially as a fallback.\n# Add \"Singapore\" and leave the fallback query as None to see\n# if it returns a value or raises an error.\ngeocode('CENTRAL AREA, SINGAPORE', None)","5ab294d2":"# Manually patch the geocoding results\ngeocoding_results['UPP CROSS ST'] = geocode('CENTRAL AREA, SINGAPORE', None)\ngeocoding_results['TG PAGAR PLAZA'] = geocode('CENTRAL AREA, SINGAPORE', None)","e60f0213":"# Fill the dataset with latitude and longitude information from the\n# geocoding results\ndf['latitude'] = df['street_name'].apply(lambda x: geocoding_results[x].latitude)\ndf['longitude'] = df['street_name'].apply(lambda x: geocoding_results[x].longitude)\n\n# Make sure that the geocoding results are not grossly wrong\nprint(min(df['latitude']), \"|\", min(df['longitude']))\nprint(max(df['latitude']), \"|\", max(df['longitude']))","492e217d":"df.to_csv('flat-prices-geocode-added.csv', index = False)","fb3724e3":"# Closing\n\nFeel free to upvote to support my work. It gives me confidence and motivation to write things like these.\n\nKeep learning and happy data-sciencing!","8c00ca38":"# Introduction\n\n**What\/why this notebook?**\n\nThis notebook contains the process of acquiring coordinate information (latitude and longitude). In this dataset, there's enough address location information that can be used to get the coordinate information quite accurately.\n\nThe operation of getting latitude-longitude from an address is called \"geocoding\".\n\n**How\/where can coordinate info be obtained?**\n\nCoordinate info can be obtained from many different map services online. This notebook is using Python library **geopy** and an open source map database API **Nominatim**. Enjoy!","7fd6f496":"# Geocode\n\nAdd latitude and longitude information into the dataset.\n\nBefore we get to the codes, let me be clear: Nominatim is the service that provides coordinate info, not geopy. geopy only provides convenient ways to invoke the Nominatim API and work with the geo information results.\n\nThat being said, not all geocoding services online are free -- in fact, most of them are paid services (ahem, e.g. Google Maps API). Nominatim is one of the free options that I know of and have used satisfactorily in the past. Nominatim is provided by OpenStreetMap, an open-source geographical database."}}