{"cell_type":{"14a7df5d":"code","9b1c6aa5":"code","6132c534":"code","baa6c040":"markdown"},"source":{"14a7df5d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b1c6aa5":"#1_importing request to send http request and get response and json to handle json data \nimport requests\nimport json\n\napi_key = False\n# If you have a Google Places API key, enter it here\n# api_key = 'AIzaSy___IDByT70'\n# https:\/\/developers.google.com\/maps\/documentation\/geocoding\/intro\n\nif api_key is False:\n    api_key = 42\n    serviceurl = 'http:\/\/py4e-data.dr-chuck.net\/json'\nelse :\n    serviceurl = 'https:\/\/maps.googleapis.com\/maps\/api\/geocode\/json'\n\n","6132c534":"while True:\n    address = input('Enter location: ')\n    if len(address) < 1: break\n\n    payload = dict()\n    payload['address'] = address\n    if api_key is not False: payload['key'] = api_key\n\n    r = requests.get(serviceurl, params=payload)\n#     print('Retrieved', r.url)\n    data = r.text\n#     print('Retrieved', len(data), 'characters')\n\n    try:\n        js = json.loads(data)\n    except:\n        js = None\n\n    if not js or 'status' not in js or js['status'] != 'OK':\n        print('==== Failure To Retrieve ====') #data not retrievable\n        print(data)\n        continue\n\n#     print(json.dumps(js, indent=4))\n    \n    lat = js['results'][0]['geometry']['location']['lat']\n    lng = js['results'][0]['geometry']['location']['lng']\n    if 20.86382 < lat < 26.33338 and 88.15638 < lng < 92.30153: #Limiting coordinates for Bangladesh\n        print('lat', lat, 'lng', lng)\n    else:\n        print(address + 'WRONG DATA') #for data discrepancy\n#     location = js['results'][0]['formatted_address']\n#     print(location)\n\n\n","baa6c040":"*Printing the output, if the data is not retrievable from the API's database, then it will be featured as **'==== Failure To Retrieve ===='**. And if it is ant data that falls outside the latitude and longitude limit of Bangladesh, then, this will be featured as **\"Wrong Data\"**, as the input file is only dedicated to Bangladesh addresses.*"}}