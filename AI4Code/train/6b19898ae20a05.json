{"cell_type":{"12ff6a48":"code","c2e12792":"code","aff4e623":"code","de5b14f5":"code","a0dc5781":"code","73c54f06":"code","534d8393":"code","dcb6499c":"code","f02d7541":"code","6974a8f2":"code","5adc3f05":"code","c6a95a03":"code","f17bd302":"code","b5c191b7":"code","9b5e7862":"code","eaa395d1":"code","8d512906":"code","206d521d":"code","c37593dc":"code","e71ef7cd":"code","4eb1998a":"code","256c768a":"code","91702936":"code","26293367":"code","005962f5":"code","fb733395":"code","d46992d2":"code","661b9ba9":"code","af98fe81":"code","3bce1559":"code","5f7cc89a":"code","c4615c6b":"code","588ae160":"code","dabc97c5":"code","a287d230":"code","81e0d267":"code","11f80e3b":"code","02d4470c":"code","14305340":"code","38efd810":"code","4143b5bb":"code","5260f883":"code","89ac4f05":"code","16fb6906":"code","8a006563":"code","e6c938cd":"code","9b526122":"markdown","eab20c01":"markdown","f8d135fd":"markdown","fd2fd5e9":"markdown","66ac59cb":"markdown","07a48741":"markdown","925e3fa2":"markdown","6781db4b":"markdown"},"source":{"12ff6a48":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport os\nimport math\nimport cmath\nimport shutil","c2e12792":"!pip install -q nnAudio","aff4e623":"import glob\nimport pathlib\nfrom pathlib import Path\nfrom numba import njit, jit, cuda, guvectorize\nfrom scipy.signal import butter, filtfilt, sosfiltfilt\nfrom nnAudio.Spectrogram import *\nimport torch\nimport gc\n\nimport joblib\nfrom tqdm.auto import tqdm","de5b14f5":"# head = pathlib.Path(\"..\/input\/g2net-gravitational-wave-detection\")\ntrain_files = [Path(path) for path in sorted(glob.glob(\"..\/input\/g2net-gravitational-wave-detection\/train\/*\/*\/*\/*.npy\"))]","a0dc5781":"wave = np.load(train_files[0])","73c54f06":"@njit(nogil=True)\ndef min_max_scaler(wave):\n    for i in range(len(wave)):\n        wave[i] = (wave[i] - min(wave[i])) \/ (max(wave[i]) - min(wave[i]))\n#         wave[i] = 2 * wave[i] - 1\n        \n    return wave","534d8393":"# Taken from https:\/\/www.kaggle.com\/anjum48\/continuous-wavelet-transform-cwt-in-pytorch#Test-on-GW-data\ndef butter_bandpass_filter(data, low, high, fs, order):\n    sos = butter(order, [low, high], btype=\"bandpass\", output=\"sos\", fs=fs)\n    normalization = np.sqrt((high - low) \/ (fs \/ 2))\n    return sosfiltfilt(sos, data) # \/ normalization","dcb6499c":"T = 2\nfs = 2048.0\ncutoff = 2.5\nnyq = 0.5 * fs\norder = 4\nn = int(T * fs)\nnormal_cutoff = cutoff \/ nyq","f02d7541":"plt.figure(dpi=120)\nplt.plot(range(len(wave[0])), wave[0])","6974a8f2":"# B = bandwidth = wavelet width (Hz)\n# C = center frequency (Hz)\ndef shannon_wavelets(wave, B=1, C=1):\n    exp_term = np.exp(1j * 2 * np.pi * C * wave)\n    frac_term = (np.sin(np.pi * B * wave) \/ (np.pi * B * wave))\n    return np.sqrt(B) * frac_term * exp_term","5adc3f05":"wave = np.load(train_files[0])","c6a95a03":"plt.figure(dpi=120)\nplt.plot(range(len(wave[0])), np.abs(shannon_wavelets(min_max_scaler(wave)[0])))","f17bd302":"wave = np.load(train_files[0])\nplt.figure(dpi=120)\nplt.plot(range(len(wave[0])), np.abs(shannon_wavelets(\n    min_max_scaler(wave)[0], B=3)))","b5c191b7":"def complex_morlet(wave, B=1, C=1):\n    first_exp = np.exp(-(wave**2 \/ B))\n    second_exp = np.exp(1j * 2 * np.pi * C * wave)\n    return np.abs((1 \/ np.sqrt(np.pi * B)) * first_exp * second_exp)","9b5e7862":"wave = np.load(train_files[0])\nplt.figure(dpi=120)\nplt.plot(range(len(wave[0])), np.abs(complex_morlet(min_max_scaler(wave)[0])))","eaa395d1":"wave = np.load(train_files[0])\nplt.figure(dpi=120)\nplt.plot(range(len(wave[0])), complex_morlet(min_max_scaler(wave)[0], B=20))","8d512906":"def cgauss_deriv(wave, C=1):\n    const = C * np.exp(-(wave**2))\n    real = np.cos(-wave) * const\n    imag = np.sin(-wave) * const\n    return np.sqrt(real**2 + imag**2)","206d521d":"wave = np.load(train_files[0])\nplt.figure(dpi=120)\nplt.plot(range(len(wave[0])), cgauss_deriv(min_max_scaler(wave)[0], C=1))","c37593dc":"def mexican_hat(wave):\n    const = 2 \/ (math.sqrt(3) * (np.pi**0.25))\n    other_term = (1 - wave**2) * np.exp(-(wave**2 \/ 2))\n    return const * other_term","e71ef7cd":"wave = np.load(train_files[0])\nplt.figure(dpi=120)\nplt.plot(range(len(wave[0])), mexican_hat(min_max_scaler(wave)[0]))","4eb1998a":"def b_spline_opt(wave, M=2, B=1, C=1):\n    frac_term = ((np.sin(np.pi * B * wave \/ M) \/ (np.pi * B * wave \/ M)) ** M) * np.sqrt(B)\n    real = np.cos(2 * np.pi * C * wave) * frac_term\n    imag = np.sin(2 * np.pi * C * wave) * frac_term\n    return np.sqrt(real**2 + imag**2)","256c768a":"def shannon_wavelets_opt(wave, B=1, C=1):\n    frac_term = (np.sin(np.pi * B * wave) \/ (np.pi * B * wave)) * np.sqrt(B)\n    real = np.cos(2 * np.pi * C * wave) * frac_term\n    imag = np.sin(2 * np.pi * C * wave) * frac_term\n    return np.sqrt(real**2 + imag**2)","91702936":"def complex_morlet_opt(wave, B=1, C=1):\n    first_exp = np.exp(-(wave**2 \/ B)) \/ np.sqrt(np.pi * B)\n    real = first_exp * np.cos(2 * np.pi * C * wave)\n    imag = first_exp * np.sin(2 * np.pi * C * wave)\n    return np.sqrt(real**2 + imag**2)","26293367":"%timeit complex_morlet(wave[0], B=20)","005962f5":"%timeit complex_morlet_opt(wave[0], B=20)","fb733395":"plt.figure(dpi=120)\nplt.plot(range(len(wave[0])), complex_morlet_opt(min_max_scaler(wave)[0], B=20))","d46992d2":"%timeit _ = np.ascontiguousarray(wave)","661b9ba9":"fmin = 21.83\nfmax = 350\ndef apply_qtransform(waves, \n                     transform=CQT2010v2(sr=2048, fmin=fmin, fmax=fmax, n_bins=32, hop_length=64), \n                     cuda=False, order=4):\n    waves = butter_bandpass_filter(waves, fmin, fmax, fs, order)\n    waves = min_max_scaler(waves)\n#     waves = complex_morlet_opt(waves, B=21)\n    waves = b_spline_opt(waves, M=order, B=35)\n    waves = np.hstack(waves)\n#     waves = np.ascontiguousarray(waves)\n    waves = torch.from_numpy(waves).float()\n    if cuda: waves = waves.cuda()\n    image = transform(waves)\n    image[torch.isnan(image)] = 0\n    return image","af98fe81":"img = apply_qtransform(np.load(train_files[0]))\nimg.shape","3bce1559":"img","5f7cc89a":"plt.figure(dpi=80)\nplt.imshow(img.squeeze())","c4615c6b":"for i in range(1, 11):\n    img = apply_qtransform(np.load(train_files[0]), order=i)\n    plt.figure(dpi=80)\n    plt.imshow(img.squeeze())","588ae160":"for i in range(1, 11):\n    img = apply_qtransform(np.load(train_files[i]))\n    plt.figure(dpi=80)\n    plt.imshow(img.squeeze())","dabc97c5":"gc.collect()","a287d230":"train_files[0].name[:-4]","81e0d267":"plt.imsave(\"test.jpg\", img.squeeze())","11f80e3b":"def save_images(file_path, out_dir):\n    file_name = file_path.name[:-4]\n    waves = np.load(file_path).astype(np.float32)  # (3, 4096)\n    image = apply_qtransform(waves)\n    plt.imsave(out_dir + file_name + \".jpg\", image.squeeze())","02d4470c":"labels = pd.read_csv(\"..\/input\/g2net-gravitational-wave-detection\/training_labels.csv\")\nlabels[\"file_path\"] = train_files\npd.set_option(\"display.max_colwidth\", None)\nlabels.head()","14305340":"# ones_train = labels[labels[\"target\"] == 1][\"file_path\"].to_numpy()\n# ones_train[0]\n\n# folder_name = \"train\/ones\/\"\n# os.makedirs(folder_name, exist_ok=True)\n\n# _ = joblib.Parallel(n_jobs=8, prefer=\"threads\")(\n#     joblib.delayed(save_images)(file_path, out_dir=folder_name) for file_path in tqdm(ones_train)\n# )","38efd810":"# folder_name = \"train\/zero\/\"\n# zeroes_train = labels[labels[\"target\"] == 0][\"file_path\"].to_numpy()\n\n# os.makedirs(folder_name, exist_ok=True)\n\n# _ = joblib.Parallel(n_jobs=8, prefer=\"threads\")(\n#     joblib.delayed(save_images)(file_path, out_dir=folder_name) for file_path in tqdm(zeroes_train)\n# )","4143b5bb":"# def move_to_destination(origin, destination, percentage_split):\n#     num_images = int(len(os.listdir(origin))*percentage_split)\n#     for image_name, image_number in zip(sorted(os.listdir(origin)), range(num_images)):\n#         shutil.move(os.path.join(origin, image_name), destination)","5260f883":"# os.makedirs(\".\/valid\/ones\")\n# os.makedirs(\".\/valid\/zero\")\n# move_to_destination(\".\/train\/ones\", \".\/valid\/ones\", 0.2)\n# move_to_destination(\".\/train\/zero\", \".\/valid\/zero\", 0.2)","89ac4f05":"OUT_DIR = \"train\/\"\nos.mkdir(\"train\/\")\n\n_ = joblib.Parallel(n_jobs=8, prefer=\"threads\")(\n    joblib.delayed(save_images)(file_path, out_dir=OUT_DIR) for file_path in tqdm(train_files)\n)","16fb6906":"%%time\nshutil.make_archive(\"train\/\", 'zip', \"train\/\")\nshutil.rmtree(\"train\/\")\n\n# shutil.make_archive(\"valid\/\", \"zip\", \"valid\/\")\n# shutil.rmtree(\"valid\/\")","8a006563":"OUT_DIR = \"test\/\"\nos.mkdir(\"test\/\")\ntest_files = [Path(path) for path in sorted(glob.glob(\"..\/input\/g2net-gravitational-wave-detection\/test\/*\/*\/*\/*.npy\"))]\n\n_ = joblib.Parallel(n_jobs=8, prefer=\"threads\")(\n    joblib.delayed(save_images)(file_path, out_dir=OUT_DIR) for file_path in tqdm(test_files)\n)","e6c938cd":"%%time\nshutil.make_archive(\"test\/\", 'zip', \"test\/\")\nshutil.rmtree(\"test\/\")","9b526122":"Okay let's continue building a function. ","eab20c01":"And let's try the original complex morlet. ","f8d135fd":"Try Complex Gaussian Derivative Wavelets","fd2fd5e9":"Try Mexican hat Wavelet","66ac59cb":"Assert that it is the same. We would not use real assert function but plot and see that it is \"about the same\" since value will slightly differ most likely. ","07a48741":"Looks like complex morlet does the reinforcement for us, so we'll stick to that for now. We will rewrite the function. Particularly, split the complex exponentials up into cosine and sine will speed up calculations. ","925e3fa2":"Let's look at frequency B-Spline Wavelets","6781db4b":"Note from this point on, all wavelet transforms equation are taken from https:\/\/pywavelets.readthedocs.io\/en\/latest\/ref\/cwt.html\n\nLet's do the Shannon Wavelets transform. We will first do it in numpy and see what it results in after the transformation. Note this is the most unoptimized way of performing calculations. "}}