{"cell_type":{"4bf32119":"code","834bd6c6":"code","437b6153":"code","4da08515":"code","65dbce95":"code","d07c93bb":"code","4294fbf5":"code","35322bf9":"code","6dbde87d":"code","783264bf":"code","f109fa47":"code","ce27a6c0":"code","7b3a46d9":"code","7cc62ab1":"code","994407c6":"code","7524f676":"code","8ed3522e":"code","f926077f":"code","ad9d8da6":"code","fb3bcbb4":"code","501e698d":"code","052c90c8":"code","24d9caa2":"code","a3768fd6":"code","f80e6fd0":"code","2192899f":"code","10b44b6b":"code","7af0c0c4":"code","642645b2":"code","1e0ac035":"code","77fd3c79":"code","cfdc177e":"code","31a6d67c":"code","9d881c68":"code","37c9a78b":"code","913a8283":"code","08148c0f":"code","223d1e7c":"code","af583bf2":"code","3bec479b":"code","26f3dfae":"code","f7a78007":"code","1a79484e":"code","edf1090b":"code","e741fc0e":"markdown","25f6da40":"markdown","dcb9d54b":"markdown","f564d2dd":"markdown","09aff1af":"markdown","bf62e908":"markdown","2a575415":"markdown","f108bf3b":"markdown","bcdf1587":"markdown","121819a8":"markdown","11636a73":"markdown","bf33ba6f":"markdown","53de58fc":"markdown","f58ee827":"markdown","25c610f8":"markdown","d548012e":"markdown","f7bc05c8":"markdown","3c6de43e":"markdown"},"source":{"4bf32119":"# importing Libraries\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nimport matplotlib.pylab as plt\nfrom sklearn.model_selection import train_test_split\nfrom pylab import plot, show, subplot, specgram, imshow, savefig\nfrom sklearn import preprocessing\nfrom sklearn import cross_validation, metrics\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.cross_validation import cross_val_score\nfrom sklearn.preprocessing import Imputer\n\nimport matplotlib.pyplot as plote\n\n%matplotlib inline\n\nplt.style.use('ggplot')\n\n","834bd6c6":"train = pd.read_csv(\"..\/input\/bank.csv\")\n","437b6153":"train.head()","4da08515":"train.info()","65dbce95":"train.describe()","d07c93bb":"train.columns","4294fbf5":"list(set(train.dtypes.tolist()))","35322bf9":"# To check how many columns have missing values - this can be repeated to see the progress made\ndef show_missing():\n    missing = train.columns[train.isnull().any()].tolist()\n    return missing","6dbde87d":"train[show_missing()].isnull().sum()","783264bf":"\ncorr=train.corr()[\"y\"]\ncorr[np.argsort(corr, axis=0)[::-1]]","f109fa47":"#plotting correlations\nnum_feat=train.columns[train.dtypes!=object]\nnum_feat=num_feat[1:-1] \nlabels = []\nvalues = []\nfor col in num_feat:\n    labels.append(col)\n    values.append(np.corrcoef(train[col].values, train.y.values)[0,1])\n\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(12,8))\nrects = ax.barh(ind, np.array(values), color='red')\nax.set_yticks(ind+((width)\/2.))\nax.set_yticklabels(labels, rotation='horizontal')\nax.set_xlabel(\"Correlation coefficient\")\nax.set_title(\"Correlation Coefficients w.r.t y\");","ce27a6c0":"corrMatrix=train[num_feat].corr()\nsns.set(font_scale=1.10)\nplt.figure(figsize=(10, 10))\nsns.heatmap(corrMatrix, vmax=.8, linewidths=0.01,\n            square=True,annot=True,cmap='viridis',linecolor=\"white\")\nplt.title('Correlation between features');","7b3a46d9":"#sns.pairplot(train)","7cc62ab1":"plt.hist(train.age,bins=10)\nplt.show()","994407c6":"plt.hist((train.duration),bins=152)\nplt.show()","7524f676":"# Let's see how the numeric data is distributed.\n\ntrain.hist(bins=10, figsize=(20,15), color='#E14906')\nplt.show()","8ed3522e":"ax = train.groupby('y').duration.mean().plot(kind='bar')\nax.set_xlabel(\"y(outcome)\")\nax.set_ylabel(\"mean durations\")","f926077f":"ax = train.groupby('y').age.mean().plot(kind='bar')\nax.set_xlabel(\"y(outcome)\")\nax.set_ylabel(\"mean ages\")","ad9d8da6":"ax = train.groupby('y').previous.mean().plot(kind='bar')\nax.set_xlabel(\"y(outcome)\")\nax.set_ylabel(\"mean previous\")","fb3bcbb4":"# This is to create each of the categories.\nlst = [train]\nfor column in lst:\n    column.loc[column[\"age\"] < 30,  \"age_category\"] = 20\n    column.loc[(column[\"age\"] >= 30) & (column[\"age\"] <= 39), \"age_category\"] = 30\n    column.loc[(column[\"age\"] >= 40) & (column[\"age\"] <= 49), \"age_category\"] = 40\n    column.loc[(column[\"age\"] >= 50) & (column[\"age\"] <= 59), \"age_category\"] = 50\n    column.loc[column[\"age\"] >= 60, \"age_category\"] = 60\n \ntrain['age_category'] = train['age_category'].astype(np.int64)\ntrain.dtypes","501e698d":"import seaborn as sns\nsns.set(style=\"white\")\nfig, ax = plt.subplots(figsize=(12,8))\nsns.countplot(x=\"age_category\", data=train, palette=\"Set2\")\nax.set_title(\"Different Age Categories\", fontsize=20)\nax.set_xlabel(\"Age Categories\")\nplt.show()","052c90c8":"# There was a positive ratio of Suscribing Term Deposits  of people in their 20s (or younger) and 60s (or older)\nsns.set(style=\"white\")\nfig, ax = plt.subplots(figsize=(15, 4))\ncolors = [\"#F08080\", \"#00FA9A\"]\nlabels = ['No Deposit', 'Deposit']\nsns.countplot(y=\"age_category\", hue='y', data=train, palette=colors).set_title('Employee Salary Turnover Distribution')\nax.set_ylabel(\"Age Category\")\nlegend_name = plt.legend()\nlegend_name.get_texts()[0].set_text('Refused a T.D Suscription')\nlegend_name.get_texts()[1].set_text('Accepted a T.D Suscription')","24d9caa2":"sns.set(style=\"white\")\nfig, ax = plt.subplots(figsize=(14,8))\nsns.countplot(x=\"job\", data=train, palette=\"Set1\")\nax.set_title(\"Occupations of Potential Clients\", fontsize=20)\nax.set_xlabel(\"Types of Jobs\")\nplt.show()","a3768fd6":"sns.factorplot('marital','age',hue='y',data=train )","f80e6fd0":"sns.factorplot('marital','duration',hue='y',data=train )","2192899f":"sns.factorplot('marital','previous',hue='y',data=train )","10b44b6b":"sns.factorplot('housing','age',hue='y',data=train )","7af0c0c4":"sns.factorplot('housing','cons_conf_idx',hue='y',data=train )","642645b2":"sns.factorplot('housing','emp_var_rate',hue='y',data=train )","1e0ac035":"train.groupby('job').y.mean().plot(kind='bar')","77fd3c79":"train.groupby('day_of_week').y.mean().plot(kind='bar')","cfdc177e":"train.groupby('month').y.mean().plot(kind='bar')","31a6d67c":"train.groupby('education').y.mean().plot(kind='bar')","9d881c68":"encoding_list = ['job', 'marital', 'education', 'default', 'housing', 'loan',\n       'contact', 'month', 'day_of_week','poutcome']\ntrain[encoding_list] = train[encoding_list].apply(LabelEncoder().fit_transform)","37c9a78b":"Y = train['y']\nX = train.drop('y', axis=1)","913a8283":"X_train, X_test, y_train, y_test = train_test_split(X,Y ,test_size=0.3, random_state=2)\nprint (X_train.shape)\nprint (X_test.shape)\nprint (y_train.shape)\nprint (y_test.shape)","08148c0f":"\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import tree\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\n","223d1e7c":"# Logistic Regression\nlog_reg = LogisticRegression()\nlog_scores = cross_val_score(log_reg, X_train, y_train, cv=3)\nlog_reg_mean = log_scores.mean()\nprint(log_reg_mean)","af583bf2":"# KNearestNeighbors\nknn_clf = KNeighborsClassifier()\nknn_scores = cross_val_score(knn_clf, X_train, y_train, cv=3)\nknn_mean = knn_scores.mean()\nprint(knn_mean)","3bec479b":"# Decision Tree\ntree_clf = tree.DecisionTreeClassifier()\ntree_scores = cross_val_score(tree_clf, X_train, y_train, cv=3)\ntree_mean = tree_scores.mean()\nprint(tree_mean)","26f3dfae":"# Gradient Boosting Classifier\ngrad_clf = GradientBoostingClassifier()\ngrad_scores = cross_val_score(grad_clf, X_train, y_train, cv=3)\ngrad_mean = grad_scores.mean()\nprint(grad_mean)","f7a78007":"# Random Forest Classifier\nrand_clf = RandomForestClassifier(n_estimators=18)\nrand_scores = cross_val_score(rand_clf, X_train, y_train, cv=3)\nrand_mean = rand_scores.mean()\nprint(rand_mean)","1a79484e":"# NeuralNet Classifier\nneural_clf = MLPClassifier(alpha=1)\nneural_scores = cross_val_score(neural_clf, X_train, y_train, cv=3)\nneural_mean = neural_scores.mean()\nprint(neural_mean)","edf1090b":"# Naives Bayes\nnav_clf = GaussianNB()\nnav_scores = cross_val_score(nav_clf, X_train, y_train, cv=3)\nnav_mean = neural_scores.mean()\nprint(nav_mean)","e741fc0e":"### Heat map","25f6da40":"### Above plot shows that the students and retired man are most likely to subscribe","dcb9d54b":"                                                                           this shows that average duration for not subscribing is less than subscribing","f564d2dd":"## function for inding missing values in dataset","09aff1af":"# Different Classification Models:","bf62e908":"this shows that the coustomer between 25 to 40 is more likely to subscribe the bank","2a575415":"# Correlation in Data","f108bf3b":"### this plot shows relation between y and age","bcdf1587":"## Clearly We can see that Gradient Boosting gives the best score","121819a8":"finging age distribution","11636a73":"### this shows that the illiterate person is more likely to subscribe","bf33ba6f":"### Splitting data set to train and test in 7:3 ratio ","53de58fc":"# VISUALIZATION","f58ee827":"## above shows the correlation of data wrt y ie how much these columns affecting the y","25c610f8":"### this plot shows relation between y and durations","d548012e":"### this shows that there is no any missing data","f7bc05c8":"#  prediction through different algorithms","3c6de43e":"the above correlation plot shows that cons_conf_idx,previous,duration causing y=1 and the others causing y =0"}}