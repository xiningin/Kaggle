{"cell_type":{"f0bccc6d":"code","135e20a6":"code","7e8bae43":"code","9eef48f9":"code","2a570048":"code","c6ea5516":"code","8e34d41b":"code","af456823":"code","1bfcd25b":"code","233bb9ba":"code","5c9fb4d4":"code","3a611031":"markdown","717cb26d":"markdown","7202f5f5":"markdown","ca04fcc1":"markdown"},"source":{"f0bccc6d":"import numpy as np\nimport json\nimport re\nimport tensorflow as tf\nimport random\nimport spacy\nnlp = spacy.load('en_core_web_sm')","135e20a6":"with open('\/kaggle\/input\/chatbots-intent-recognition-dataset\/Intent.json') as f:\n    intents = json.load(f)","7e8bae43":"def preprocessing(line):\n    line = re.sub(r'[^a-zA-z.?!\\']', ' ', line)\n    line = re.sub(r'[ ]+', ' ', line)\n    return line","9eef48f9":"# get text and intent title from json data\ninputs, targets = [], []\nclasses = []\nintent_doc = {}\n\nfor intent in intents['intents']:\n    if intent['intent'] not in classes:\n        classes.append(intent['intent'])\n    if intent['intent'] not in intent_doc:\n        intent_doc[intent['intent']] = []\n        \n    for text in intent['text']:\n        inputs.append(preprocessing(text))\n        targets.append(intent['intent'])\n        \n    for response in intent['responses']:\n        intent_doc[intent['intent']].append(response)","2a570048":"def tokenize_data(input_list):\n    tokenizer = tf.keras.preprocessing.text.Tokenizer(filters='', oov_token='<unk>')\n    \n    tokenizer.fit_on_texts(input_list)\n    \n    input_seq = tokenizer.texts_to_sequences(input_list)\n\n    input_seq = tf.keras.preprocessing.sequence.pad_sequences(input_seq, padding='pre')\n    \n    return tokenizer, input_seq\n\n# preprocess input data\ntokenizer, input_tensor = tokenize_data(inputs)","c6ea5516":"def create_categorical_target(targets):\n    word={}\n    categorical_target=[]\n    counter=0\n    for trg in targets:\n        if trg not in word:\n            word[trg]=counter\n            counter+=1\n        categorical_target.append(word[trg])\n    \n    categorical_tensor = tf.keras.utils.to_categorical(categorical_target, num_classes=len(word), dtype='int32')\n    return categorical_tensor, dict((v,k) for k, v in word.items())\n\n# preprocess output data\ntarget_tensor, trg_index_word = create_categorical_target(targets)","8e34d41b":"print('input shape: {} and output shape: {}'.format(input_tensor.shape, target_tensor.shape))","af456823":"# hyperparameters\nepochs=50\nvocab_size=len(tokenizer.word_index) + 1\nembed_dim=512\nunits=128\ntarget_length=target_tensor.shape[1]","1bfcd25b":"# build RNN Model with tensorflow\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embed_dim),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(units, dropout=0.2)),\n    tf.keras.layers.Dense(units, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(target_length, activation='softmax')\n])\n\noptimizer = tf.keras.optimizers.Adam(lr=1e-2)\nmodel.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","233bb9ba":"early_stop = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=4)\n\n# train the model\nmodel.fit(input_tensor, target_tensor, epochs=epochs, callbacks=[early_stop])","5c9fb4d4":"def response(sentence):\n    sent_seq = []\n    doc = nlp(repr(sentence))\n    \n    # split the input sentences into words\n    for token in doc:\n        if token.text in tokenizer.word_index:\n            sent_seq.append(tokenizer.word_index[token.text])\n\n        # handle the unknown words error\n        else:\n            sent_seq.append(tokenizer.word_index['<unk>'])\n\n    sent_seq = tf.expand_dims(sent_seq, 0)\n    # predict the category of input sentences\n    pred = model(sent_seq)\n\n    pred_class = np.argmax(pred.numpy(), axis=1)\n    \n    # choice a random response for predicted sentence\n    return random.choice(intent_doc[trg_index_word[pred_class[0]]]), trg_index_word[pred_class[0]]\n\n# chat with bot\nprint(\"Note: Enter 'quit' to break the loop.\")\nwhile True:\n    input_ = input('You: ')\n    if input_.lower() == 'quit':\n        break\n    res, typ = response(input_)\n    print('Bot: {} -- TYPE: {}'.format(res, typ))\n    print()","3a611031":"### Import json file","717cb26d":"### Build the model","7202f5f5":"### Import libraries","ca04fcc1":"### Preprocessing data\nIn this part we gonna clean data, split them into inputs and targets tensor, build a tokenizer dictionary and turn sentences into sequences.\nThe target tensor has a bunch of list with a length of unique title list."}}