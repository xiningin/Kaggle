{"cell_type":{"4fc51e7f":"code","a01e99d1":"code","d9ff3cda":"code","c88ae514":"code","49205b0f":"code","cfed376b":"code","8dcb40e8":"code","38c1370c":"code","dc373869":"code","2e5d39e2":"code","96114433":"code","c6540c9c":"code","6d4c4deb":"code","8a89b39b":"code","09a4d26d":"code","45c69d2e":"code","bce32ba9":"code","d35215a4":"code","6458b012":"code","05fa4875":"code","b088d2c1":"code","278b424b":"code","fb42c86f":"code","f953b93f":"code","dba151f9":"code","fa17db14":"code","a7fe50d3":"code","7b25858c":"code","c5963db1":"code","c768c7df":"code","5ca10151":"code","58955437":"code","a2dfdb93":"code","26e2d27b":"code","49dfb503":"markdown","3fc02bb4":"markdown","1cdebf01":"markdown","515290df":"markdown","b6e36186":"markdown","14b05460":"markdown","80740668":"markdown","fdf34af1":"markdown","e77f99c4":"markdown","4607c412":"markdown","d77d3eca":"markdown","99726bd8":"markdown"},"source":{"4fc51e7f":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler\nfrom sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.model_selection import train_test_split , cross_val_score\nfrom sklearn.linear_model import LinearRegression , SGDRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom sklearn.metrics import make_scorer\nfrom math import radians, cos, sin, atan2, sqrt\nimport lime\nimport lime.lime_tabular\nimport folium\nimport tensorflow as tf\nimport xgboost as xgb\nimport geopy.distance\n\n#ignore warning messages \nimport warnings\nwarnings.filterwarnings('ignore') \n\nsns.set()","a01e99d1":"%%time\n# Reading File\ntrain_path  = '..\/input\/train.csv'\n\n# Set columns to most suitable type to optimize for memory usage\ntraintypes = {'fare_amount': 'float32',\n              'pickup_datetime': 'str', \n              'pickup_longitude': 'float32',\n              'pickup_latitude': 'float32',\n              'dropoff_longitude': 'float32',\n              'dropoff_latitude': 'float32',\n              'passenger_count': 'uint8'}\n\ncols = list(traintypes.keys())\n\ndf_train = pd.read_csv(train_path, usecols=cols, dtype=traintypes,nrows=1000000)\ndf_test = pd.read_csv('..\/input\/test.csv')","d9ff3cda":"df_train.head()","c88ae514":"print(\"Data count:\",len(df_train))\n\nprint(\"fare_amount less them zero:\",(df_train.fare_amount <= 0).sum())\nprint(\"fare amount can't be less then zero so we will remove it\\n\")\ndf_train = df_train[df_train.fare_amount > 0]\n\nprint(\"passenger_count esqual zero:\", (df_train.passenger_count <= 0).sum())\nprint(\"passenger_count bigger then 8:\", (df_train.passenger_count > 8).sum())\nprint(\"passenger count can't be zero so we will remove it\\n\")\ndf_train = df_train.query(\"passenger_count > 0 & passenger_count <= 8\")\n\nprint(\"Latitudes less them -90 or bigger then 90:\",(df_train.pickup_latitude < -90).sum(),\",\",\n                                                  (df_train.dropoff_latitude < -90).sum(),\",\",\n                                                  (df_train.pickup_latitude > 90).sum(),\",\",\n                                                  (df_train.dropoff_latitude > 90).sum())\n\nprint(\"Longitudes less them -180 or bigger then 180:\",(df_train.pickup_longitude < -180).sum(),\",\",\n                                                  (df_train.dropoff_longitude < -180).sum(),\",\",\n                                                  (df_train.pickup_longitude > 180).sum(),\",\",\n                                                  (df_train.dropoff_longitude > 180).sum())\nprint(\"\\nby Google maps: \\nLatitudes range from -90 to 90\\nLongitudes range from -180 to 180\\n we will remove them\")\ndf_train['pickup_latitude'] = df_train['pickup_latitude'].astype(float)\ndf_train['pickup_longitude'] = df_train['pickup_longitude'].astype(float)\ndf_train['dropoff_latitude'] = df_train['dropoff_latitude'].astype(float)\ndf_train['dropoff_longitude'] = df_train['dropoff_longitude'].astype(float)\ndf_train = df_train.query(\"pickup_latitude <= 90 & pickup_latitude >= -90\")\ndf_train = df_train.query(\"dropoff_latitude <= 90 & dropoff_latitude >= -90\")\ndf_train = df_train.query(\"pickup_longitude <= 180 & pickup_longitude >= -180\")\ndf_train = df_train.query(\"dropoff_longitude <= 180 & dropoff_longitude >= -180\")\n\nzero_lan_log_df = df_train.loc[((df_train['pickup_latitude']==0) & (df_train['pickup_longitude']==0)) & ((df_train['dropoff_latitude']==0) & (df_train['dropoff_longitude']==0))]\nprint(\"\\nLongitudes and Latitudes esqual zero:\",len(zero_lan_log_df))\nprint(\"Longitudes and Latitudes is zero - This is in the middle of the sea - probably default number - remove them\")\ndf_train = df_train.query(\"pickup_latitude != 0 | pickup_longitude != 0 | dropoff_latitude != 0 | dropoff_longitude != 0\")\n\nprint(\"\\ndropoff and pickup in the same location:\",((df_train['dropoff_longitude'] == df_train['pickup_longitude']) & (df_train['dropoff_latitude'] == df_train['pickup_latitude'])).sum(),\" remove them\")\ndf_train = df_train.query(\"dropoff_longitude != pickup_longitude | dropoff_latitude != pickup_latitude\")\n\nprint(\"Data count:\",len(df_train))","49205b0f":"# extricate day, hour, month, year from pickup_datetime\ndf_train['pickup_day'] = pd.DatetimeIndex(df_train['pickup_datetime']).day\ndf_train['pickup_hour'] = pd.DatetimeIndex(df_train['pickup_datetime']).hour\ndf_train['pickup_week'] = pd.DatetimeIndex(df_train['pickup_datetime']).week\ndf_train['pickup_month'] = pd.DatetimeIndex(df_train['pickup_datetime']).month\ndf_train['pickup_year'] = pd.DatetimeIndex(df_train['pickup_datetime']).year\n\n# convert day, hour and month to X and Y on the Unit Circle \ndf_train['x_pickup_month']=np.sin(2.*np.pi*df_train.pickup_month\/12.)\ndf_train['y_pickup_month']=np.cos(2.*np.pi*df_train.pickup_month\/12.)\n\ndayfloat = df_train.pickup_day+df_train.pickup_hour\/24.0\ndf_train['x_pickup_day']=np.sin(2.*np.pi*dayfloat\/31.)\ndf_train['y_pickup_day']=np.cos(2.*np.pi*dayfloat\/31.)\n\ndf_train['x_pickup_week']=np.sin(2.*np.pi*df_train.pickup_week\/52.)\ndf_train['y_pickup_week']=np.cos(2.*np.pi*df_train.pickup_week\/52.)","cfed376b":"fig, axes = plt.subplots(nrows=1, ncols=4, figsize=(20,5))\n\nax = sns.scatterplot(x=\"x_pickup_month\", y=\"y_pickup_month\", hue=\"fare_amount\",alpha = 0.2,palette = 'coolwarm',ax = axes[0], data=df_train)\nax.set_title(\"Pickup Month\")\n\nax = sns.scatterplot(x=\"x_pickup_week\", y=\"y_pickup_week\", hue=\"fare_amount\",alpha = 0.2,palette = 'coolwarm',ax = axes[1], data=df_train)\nax.set_title(\"Pickup Week\")\n\nax = sns.scatterplot(x=\"x_pickup_day\", y=\"y_pickup_day\", hue=\"fare_amount\",alpha = 0.2,palette = 'coolwarm',ax = axes[2], data=df_train)\nax.set_title(\"Pickup Day + Hour\")\n\ndf_train.groupby('pickup_year').sum()['fare_amount'].plot.bar(title= \"Pickup Year count\",ax = axes[3])\nplt.show()","8dcb40e8":"df_train.groupby('passenger_count').mean()['fare_amount'].plot.bar()\n\nprint(\"Max passenger:\",df_train['passenger_count'].max())\nprint(\"Min passenger:\",df_train['passenger_count'].min())","38c1370c":"plt.figure(figsize=(10,10))\nax = sns.scatterplot(x=\"pickup_longitude\", y=\"pickup_latitude\", hue=\"fare_amount\" ,size=\"fare_amount\",data=df_train)\nax = sns.scatterplot(x=\"dropoff_longitude\", y=\"dropoff_latitude\",hue=\"fare_amount\", size=\"fare_amount\",data=df_train)\nax.set_title(\"Full pickup and dropoff map\")\nplt.xticks(np.arange(min(df_train['pickup_longitude']), max(df_train['dropoff_longitude'])+1, 20.0))\nplt.yticks(np.arange(min(df_train['dropoff_latitude']), max(df_train['dropoff_latitude'])+1, 20.0))\nplt.show()","dc373869":"k_mean_X = df_train[[\"dropoff_longitude\",\"dropoff_latitude\"]].copy()\nk_mean_y = df_train['fare_amount'].copy()\n\nSum_of_squared_distances = []\nK = range(1,15)\nfor k in K:\n    km = KMeans(n_clusters=k)\n    km = km.fit(k_mean_X)\n    Sum_of_squared_distances.append(km.inertia_)\n    \nplt.plot(K, Sum_of_squared_distances, 'bx-')\nplt.xlabel('k')\nplt.ylabel('Sum_of_squared_distances')\nplt.title('Elbow Method For Optimal k')\nplt.show()\n\ncls_k_means = KMeans(n_clusters=3)\ncls_k_means.fit(k_mean_X)\nwith np.printoptions(suppress=True):\n    print(cls_k_means.cluster_centers_)","2e5d39e2":"plt.figure(figsize=(10,10))\nax = sns.scatterplot(x=\"pickup_longitude\", y=\"pickup_latitude\", hue=\"fare_amount\" ,size=\"fare_amount\",data=df_train)\nax = sns.scatterplot(x=\"dropoff_longitude\", y=\"dropoff_latitude\",hue=\"fare_amount\", size=\"fare_amount\",data=df_train)\nax.set_title(\"Full pickup and dropoff map\")\nfor k_mean_point in np.array(cls_k_means.cluster_centers_):\n    circle = plt.Circle((k_mean_point[0], k_mean_point[1]), 30, color='r', fill=False) \n    ax.add_artist(circle)\nplt.xticks(np.arange(min(df_train['pickup_longitude']), max(df_train['dropoff_longitude'])+1, 80.0))\nplt.yticks(np.arange(min(df_train['dropoff_latitude']), max(df_train['dropoff_latitude'])+1, 50.0))\nplt.show()\n\n\nprint(\"For sanity check, we can check the location in real map:\")\nprint(cls_k_means.cluster_centers_)\nprint(\"-73.97442053 40.75045692 - Midtown Manhattan\")\nprint(\"40.75262546 -73.97302945 - Antarctica\")\nprint(\"-1.60641994  15.84336939 - Republic of the Congo\")","96114433":"print(\"less zoom in to the center locations\")\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(30,10))\nax = sns.scatterplot(x=\"pickup_longitude\", y=\"pickup_latitude\", hue=\"fare_amount\" ,size=\"fare_amount\",ax = axes[0],data=df_train)\nax = sns.scatterplot(x=\"dropoff_longitude\", y=\"dropoff_latitude\",hue=\"fare_amount\", size=\"fare_amount\",ax = axes[0],data=df_train)\nax.set_title(\"Manhattan\")\nax.set_xlim(-74.5,-73)\nax.set_ylim(41.5,40)\n\nax = sns.scatterplot(x=\"pickup_longitude\", y=\"pickup_latitude\", hue=\"fare_amount\" ,size=\"fare_amount\",ax = axes[1],data=df_train)\nax = sns.scatterplot(x=\"dropoff_longitude\", y=\"dropoff_latitude\",hue=\"fare_amount\", size=\"fare_amount\",ax = axes[1],data=df_train)\nax.set_xlim(40.5,41)\nax.set_ylim(-73.5,-73.9)\nax.set_title(\"Antarctica\")\n\nax = sns.scatterplot(x=\"pickup_longitude\", y=\"pickup_latitude\", hue=\"fare_amount\" ,size=\"fare_amount\",ax = axes[2],data=df_train)\nax = sns.scatterplot(x=\"dropoff_longitude\", y=\"dropoff_latitude\",hue=\"fare_amount\", size=\"fare_amount\",ax = axes[2],data=df_train)\nax.set_xlim(-16.16)\nax.set_ylim(26,-24)\nax.set_title(\"Sea\")\nplt.show()","c6540c9c":"# less drop any location out of new york\ndf_train = df_train[(-70 >= df_train['pickup_longitude']) & (df_train['pickup_longitude'] >= -80)]\ndf_train = df_train[(-70 >= df_train['dropoff_longitude']) & (df_train['dropoff_longitude'] >= -80)]\ndf_train = df_train[(35 <= df_train['pickup_latitude']) & (df_train['pickup_latitude'] <= 45)]\ndf_train = df_train[(35 <= df_train['dropoff_latitude']) & (df_train['dropoff_latitude'] <= 45)]","6d4c4deb":"map = folium.Map(location = [40.730610,-73.935242],zoom_start = 11.5,)\n\nfor index, row in df_train[['pickup_latitude','pickup_longitude','dropoff_longitude','dropoff_latitude']].sample(1500).iterrows():\n    folium.CircleMarker([row['pickup_latitude'], row['pickup_longitude']],\n                        radius=3,\n                        color=\"#00f000\", \n                        fill_opacity=0.9\n                       ).add_to(map)\n\n    \n# city center \nfolium.CircleMarker([40.7641244, -73.9706142],\n                        radius=3,\n                        color=\"#f00000\", \n                        fill_opacity=0.9\n                       ).add_to(map)\n# jfk location\nfolium.CircleMarker([40.639722, -73.778889],\n                        radius=3,\n                        color=\"#f00000\", \n                        fill_opacity=0.9\n                       ).add_to(map)\n# ewr location\nfolium.CircleMarker([40.6925, -74.168611],\n                        radius=3,\n                        color=\"#f00000\", \n                        fill_opacity=0.9\n                       ).add_to(map)\n# lga location\nfolium.CircleMarker([40.77725, -73.872611],\n                        radius=3,\n                        color=\"#f00000\", \n                        fill_opacity=0.9\n                       ).add_to(map)\n\n# statue of liberty\nfolium.CircleMarker([40.6892, -74.0445],\n                        radius=3,\n                        color=\"#f00000\", \n                        fill_opacity=0.9\n                       ).add_to(map)\n\n\nmap","8a89b39b":"\ndef haversine(lon1, lon2, lat1, lat2):\n    # Convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = radians(lon1), radians(lat1), radians(lon2), radians(lat2)\n\n    # approximate radius of earth in km\n    R = 6373.0\n    \n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat \/ 2)**2 + cos(lat1) * cos(lat2) * sin(dlon \/ 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = R * c\n    return distance\n\ndef minkowski_distance(x1, x2, y1, y2, p):\n    return ((abs(x2 - x1) ** p) + (abs(y2 - y1)) ** p) ** (1 \/ p)","09a4d26d":"# distance from main loctions\n\n#NY center\ncenter_location_lon = -74.0063889\ncenter_location_lat = 40.7641244\n\ndf_train['distance_from_pickup_to_center'] = df_train.apply(lambda row: haversine(row.pickup_longitude, center_location_lon, \n                                                row.pickup_latitude, center_location_lat), axis=1)\n\ndf_train['distance_from_dropoff_to_center'] = df_train.apply(lambda row: haversine(row.dropoff_longitude, center_location_lon, \n                                                row.dropoff_latitude, center_location_lat), axis=1)\n\ndf_train['distance_from_pickup_to_dropoff'] = df_train.apply(lambda row: haversine(row.dropoff_longitude, row.pickup_longitude, \n                                                row.dropoff_latitude, row.pickup_latitude), axis=1)\n\ndf_train['distance_from_center'] = df_train['distance_from_dropoff_to_center'] + df_train['distance_from_pickup_to_center'] \n\n\n\nax = sns.jointplot(x=\"distance_from_pickup_to_center\", y=\"fare_amount\", kind=\"reg\",data=df_train)\nplt.title(\"distance_from_pickup_to_center Vs fare_amount\")\nplt.show()\n\nax = sns.jointplot(x=\"distance_from_dropoff_to_center\", y=\"fare_amount\", kind=\"reg\",data=df_train)\nplt.title(\"distance_from_dropoff_to_center Vs fare_amount\")\nplt.show()","45c69d2e":"ax = sns.jointplot(x=\"distance_from_pickup_to_dropoff\", y=\"fare_amount\", kind=\"reg\",data=df_train)\nplt.title(\"distance_from_pickup_to_dropoff Vs fare_amount\")\nplt.show()\n\nax = sns.jointplot(x=\"distance_from_center\", y=\"fare_amount\", kind=\"reg\",data=df_train)\nplt.title(\"distance_from_center Vs fare_amount\")\nplt.show()","bce32ba9":"# We know the airport taxi costs more than a regular taxi, so we will add the distand to the closest airport\n#     JFK: John F. Kennedy International Airport\n#     EWR: Newark Liberty International Airport\n#     LGA: LaGuardia Airport\n\njfk_coord = (40.639722, -73.778889)\newr_coord = (40.6925, -74.168611)\nlga_coord = (40.77725, -73.872611)\nsol_coord = (40.6892,-74.0445)\n\ndf_train['jfk_distance_pickup'] = df_train.apply(lambda row: haversine(row.pickup_longitude, jfk_coord[1], \n                                                row.pickup_latitude, ewr_coord[0]), axis=1)\ndf_train['jfk_distance_dropoff'] = df_train.apply(lambda row: haversine(row.dropoff_longitude, jfk_coord[1], \n                                                row.dropoff_latitude, ewr_coord[0]), axis=1)\ndf_train['jfk_distance'] = df_train[['jfk_distance_pickup','jfk_distance_dropoff']].min(axis=1)\n\n\ndf_train['ewr_distance_pickup'] = df_train.apply(lambda row: haversine(row.pickup_longitude, ewr_coord[1], \n                                                row.pickup_latitude, ewr_coord[0]), axis=1)\ndf_train['ewr_distance_dropoff'] = df_train.apply(lambda row: haversine(row.dropoff_longitude, ewr_coord[1], \n                                                row.dropoff_latitude, ewr_coord[0]), axis=1)\ndf_train['ewr_distance'] = df_train[['ewr_distance_pickup','ewr_distance_dropoff']].min(axis=1)\n\n\ndf_train['lga_distance_pickup'] = df_train.apply(lambda row: haversine(row.pickup_longitude, lga_coord[1], \n                                                row.pickup_latitude, lga_coord[0]), axis=1)\ndf_train['lga_distance_dropoff'] = df_train.apply(lambda row: haversine(row.dropoff_longitude, lga_coord[1], \n                                                row.dropoff_latitude, lga_coord[0]), axis=1)\ndf_train['lga_distance'] = df_train[['lga_distance_pickup','lga_distance_dropoff']].min(axis=1)\n\n\ndf_train['sol_distance_pickup'] = df_train.apply(lambda row: haversine(row.pickup_longitude, sol_coord[1], \n                                                row.pickup_latitude, sol_coord[0]), axis=1)\ndf_train['sol_distance_dropoff'] = df_train.apply(lambda row: haversine(row.dropoff_longitude, sol_coord[1], \n                                                row.dropoff_latitude, sol_coord[0]), axis=1)\ndf_train['sol_distance'] = df_train[['sol_distance_pickup','sol_distance_dropoff']].min(axis=1)\n\n\nax = sns.jointplot(x=\"jfk_distance\", y=\"fare_amount\", kind=\"reg\",data=df_train)\nplt.title(\"jfk_distance Vs fare_amount\")\nplt.show()\nax = sns.jointplot(x=\"ewr_distance\", y=\"fare_amount\", kind=\"reg\",data=df_train)\nplt.title(\"ewr_distance Vs fare_amount\")\nplt.show()","d35215a4":"ax = sns.jointplot(x=\"lga_distance\", y=\"fare_amount\", kind=\"reg\",data=df_train)\nplt.title(\"lga_distance Vs fare_amount\")\nplt.show()\n\nax = sns.jointplot(x=\"sol_distance\", y=\"fare_amount\", kind=\"reg\",data=df_train)\nplt.title(\"sol_distance Vs fare_amount\")\nplt.show()","6458b012":"# If we have more power full GPU , we can try to take all the zipcode from google\n\n# for exmple: \nfrom geopy.geocoders import Nominatim\nlan_lot_str = (df_train.pickup_latitude.astype(str)+\",\"+df_train.pickup_longitude.astype(str))\ngeolocator = Nominatim(user_agent=\"Texi Fare Predictin\")\n\nzipcode = []\nfor number in lan_lot_str.sample(20):\n    location = geolocator.reverse(number)\n    if 'postcode' in location.raw['address'].keys():\n        zipcode.append(location.raw['address']['postcode'])    \n    else:\n        zipcode.append(None)\n    \nprint(zipcode)","05fa4875":"colormap = plt.cm.RdBu\nplt.figure(figsize=(20,20))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(df_train.corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)\nplt.show()","b088d2c1":"# transformers:\n\nclass ItemSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, key):\n        self.key = key\n\n    def fit(self, x, y=None):\n        return self\n\n    def transform(self, data_dict):\n        return data_dict[self.key]\n\n# convert lat and lon to radians\nclass ToRadian(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        return\n    \n    def fit(self, x, y=None):\n        return self\n\n    def transform(self, data_dict):\n        data_dict['pickup_longitude'] = np.radians(data_dict['pickup_longitude'])\n        data_dict['pickup_latitude'] = np.radians(data_dict['pickup_latitude'])\n        data_dict['dropoff_longitude'] = np.radians(data_dict['dropoff_longitude'])\n        data_dict['dropoff_latitude'] = np.radians(data_dict['dropoff_latitude'])\n        return data_dict\n    \n# Change pickup_datetime to day, week, month and year\nclass PickupTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        return\n\n    def fit(self, x, y=None):\n        return self\n\n    def transform(self, data_dict):\n        timedata = data_dict['pickup_datetime']\n        \n        day = pd.DatetimeIndex(timedata).day\n        hour = pd.DatetimeIndex(timedata).hour\n        week = pd.DatetimeIndex(timedata).week\n        month = pd.DatetimeIndex(timedata).month\n        year = pd.DatetimeIndex(timedata).year\n        # convert day, hour and month to X and Y on the Unit Circle \n        data_dict['x_pickup_month']=np.sin(2.*np.pi*month\/12.)\n        data_dict['y_pickup_month']=np.cos(2.*np.pi*month\/12.)\n\n        dayfloat = day+hour\/24.0\n        data_dict['x_pickup_day']=np.sin(2.*np.pi*dayfloat\/31.)\n        data_dict['y_pickup_day']=np.cos(2.*np.pi*dayfloat\/31.)\n\n        data_dict['x_pickup_week']=np.sin(2.*np.pi*week\/52.)\n        data_dict['y_pickup_week']=np.cos(2.*np.pi*week\/52.)\n        \n        data_dict['pickup_year'] = year\n        return data_dict\n\n# Get distance to center location \nclass CenterLocationTransformer:\n    def __init__(self):\n        return\n\n    def fit(self, x, y=None):\n        return self\n\n    def transform(self, data_dict):\n        center_location_x = -73.9706142\n        center_location_y = 40.7641244\n\n        pickup_x = data_dict['pickup_longitude']\n        pickup_y = data_dict['pickup_latitude']\n        dropoff_x = data_dict['dropoff_longitude']\n        dropoff_y = data_dict['dropoff_latitude']\n        \n        data_dict['distance_from_pickup_to_center'] = data_dict.apply(lambda row: haversine(row.pickup_longitude, center_location_x, \n                                                row.pickup_latitude, center_location_y), axis=1)\n\n        data_dict['distance_from_dropoff_to_center'] = data_dict.apply(lambda row: haversine(row.dropoff_longitude, center_location_x, \n                                                row.dropoff_latitude, center_location_y), axis=1)\n\n        data_dict['distance_from_pickup_to_dropoff'] = data_dict.apply(lambda row: haversine(row.dropoff_longitude, row.pickup_longitude, \n                                                row.dropoff_latitude, row.pickup_latitude), axis=1)\n        \n        data_dict['distance_from_pickup_to_center'].fillna(0,inplace = True)\n        data_dict['distance_from_dropoff_to_center'].fillna(0,inplace = True)\n        data_dict['distance_from_pickup_to_dropoff'].fillna(0,inplace = True)\n        data_dict['distance_from_center'] = data_dict['distance_from_dropoff_to_center'] + data_dict['distance_from_pickup_to_center'] \n        return data_dict\n    \n# Get distance to airports\nclass AirportLocationTransformer:       \n\n    def __init__(self):\n        return\n\n    def fit(self, x, y=None):\n        return self\n\n    def transform(self, data_dict):\n        jfk_coord = (40.639722, -73.778889)\n        ewr_coord = (40.6925, -74.168611)\n        lga_coord = (40.77725, -73.872611)\n        \n        data_dict['jfk_distance_pickup'] = data_dict.apply(lambda row: haversine(row.pickup_longitude, jfk_coord[1], \n                                                row.pickup_latitude, ewr_coord[0]), axis=1)\n        data_dict['jfk_distance_dropoff'] = data_dict.apply(lambda row: haversine(row.dropoff_longitude, jfk_coord[1], \n                                                row.dropoff_latitude, ewr_coord[0]), axis=1)\n        data_dict['jfk_distance'] = data_dict[['jfk_distance_pickup','jfk_distance_dropoff']].min(axis=1)\n\n\n        data_dict['ewr_distance_pickup'] = data_dict.apply(lambda row: haversine(row.pickup_longitude, ewr_coord[1], \n                                                row.pickup_latitude, ewr_coord[0]), axis=1)\n        data_dict['ewr_distance_dropoff'] = data_dict.apply(lambda row: haversine(row.dropoff_longitude, ewr_coord[1], \n                                                row.dropoff_latitude, ewr_coord[0]), axis=1)\n        data_dict['ewr_distance'] = data_dict[['ewr_distance_pickup','ewr_distance_dropoff']].min(axis=1)\n\n\n        data_dict['lga_distance_pickup'] = data_dict.apply(lambda row: haversine(row.pickup_longitude, lga_coord[1], \n                                                row.pickup_latitude, lga_coord[0]), axis=1)\n        data_dict['lga_distance_dropoff'] = data_dict.apply(lambda row: haversine(row.dropoff_longitude, lga_coord[1], \n                                                row.dropoff_latitude, lga_coord[0]), axis=1)\n        data_dict['lga_distance'] = data_dict[['lga_distance_pickup','lga_distance_dropoff']].min(axis=1)\n\n        \n        data_dict['sol_distance_pickup'] = data_dict.apply(lambda row: haversine(row.pickup_longitude, sol_coord[1], \n                                                row.pickup_latitude, sol_coord[0]), axis=1)\n        data_dict['sol_distance_dropoff'] = data_dict.apply(lambda row: haversine(row.dropoff_longitude, sol_coord[1], \n                                                row.dropoff_latitude, sol_coord[0]), axis=1)\n        data_dict['sol_distance'] = data_dict[['lga_distance_pickup','lga_distance_dropoff']].min(axis=1)\n\n        return data_dict","278b424b":"X = df_train.drop('fare_amount',axis = 1)\ny = df_train['fare_amount']\n\n# select features\nprdict_feature = ['passenger_count','pickup_datetime','dropoff_latitude',\n                  'dropoff_longitude','pickup_latitude','pickup_longitude']\nX = X[prdict_feature]\n\n# split\nX_train_base, X_test_base, y_train, y_test = train_test_split(X, y)\n\n# preper data\npreper_data_pipeline = Pipeline([('time_transformer',PickupTransformer()),\n                                ('center_location_transformer',CenterLocationTransformer()),\n                                ('airport_location_transormer',AirportLocationTransformer())])\n\n# dummeys\none_hot = OneHotEncoder(handle_unknown='ignore',sparse=True)\none_hot_pipeline = Pipeline([('hot_columns', ItemSelector(key = ['pickup_year'])),\n                             ('oneHowEncoder', one_hot)])\n\n# min max scaler\nmin_max = MinMaxScaler()\nmin_max_pipeline = Pipeline([('min_max_columns', ItemSelector(key = ['distance_from_dropoff_to_center','distance_from_pickup_to_center','y_pickup_week','x_pickup_week',\n                                                                     'y_pickup_day','x_pickup_day','y_pickup_month','x_pickup_month', 'passenger_count',\n                                                                     'dropoff_latitude','jfk_distance','ewr_distance','lga_distance',\n                                                                     'dropoff_longitude','pickup_latitude','pickup_longitude','distance_from_pickup_to_dropoff'])),\n                             ('minMaxScaler', min_max)])\n\none_hot_min_max_feature_union = FeatureUnion([('one_hot',one_hot_pipeline),\n                                 ('min_max',min_max_pipeline)])\n\n# full feature pipline\nfeature_pipeline = Pipeline([('preper_data',preper_data_pipeline),\n                            ('one_hot_min_max_feature_union',one_hot_min_max_feature_union)])\n\nfeature_pipeline.fit(X_train_base)\n\nX_train = feature_pipeline.transform(X_train_base)\nX_test = feature_pipeline.transform(X_test_base)","fb42c86f":"reg_LR = LinearRegression()\nreg_LR.fit(X_train,y_train)\n\nLR_Score_train = np.sqrt(mean_squared_error(y_train, reg_LR.predict(X_train)))\nLR_Score_test = np.sqrt(mean_squared_error(y_test, reg_LR.predict(X_test)))\nLR_Cross_train = np.sqrt(cross_val_score(reg_LR,X_train, y_train, cv=5,scoring=make_scorer(mean_squared_error)).mean())\n\nprint(\"LinearRegression Cross train:\",LR_Cross_train)\nprint(\"LinearRegression test:\",LR_Score_test)","f953b93f":"reg_SGD = SGDRegressor(max_iter=100, tol=0.01)\nreg_SGD.fit(X_train,y_train)\n\nSGD_Score_train = np.sqrt(mean_squared_error(y_train, reg_SGD.predict(X_train)))\nSGD_Cross_train = np.sqrt(cross_val_score(reg_SGD,X_train, y_train, cv=5,scoring=make_scorer(mean_squared_error)).mean())\nSGD_Score_test = np.sqrt(mean_squared_error(y_test, reg_SGD.predict(X_test)))\n\nprint(\"SGDRegressor Cross train:\",SGD_Cross_train)\nprint(\"SGDRegressor test:\",SGD_Score_test)","dba151f9":"params = {\n    'max_depth': 8, \n    'eta':.03,\n    'subsample': 1, \n    'colsample_bytree': 0.8, \n    'objective':'reg:linear',\n    'eval_metric':'rmse',\n    'silent': 1\n}\n\nmatrix_train = xgb.DMatrix(X_train,label=y_train)\nmatrix_test = xgb.DMatrix(X_test,label=y_test)\nreg_xgb=xgb.train(params=params,\n                    dtrain=matrix_train,num_boost_round=5000, \n                    early_stopping_rounds=50,verbose_eval=50,\n                    evals=[(matrix_test,'test')])","fa17db14":"result = xgb.cv(params=params, dtrain=matrix_train, num_boost_round=5000, early_stopping_rounds=50)\nXGB_Cross_train = result['train-rmse-mean'].mean()\nXGB_Score_test = np.sqrt(mean_squared_error(y_test, reg_xgb.predict(xgb.DMatrix(X_test), ntree_limit = reg_xgb.best_ntree_limit)))\n\nprint(\"xgb train:\",XGB_Cross_train)\nprint(\"xgb test:\",XGB_Score_test)","a7fe50d3":"reg_DNN = Sequential([\n    Dense(256, input_dim=X_train.shape[1], kernel_initializer='normal', activation='relu'),\n    Dense(128, kernel_initializer='normal', activation='relu'),\n    Dense(64, kernel_initializer='normal', activation='relu'),\n    Dense(32, kernel_initializer='normal', activation='relu'),\n    Dense(1, kernel_initializer='normal')\n])\noptimizer = tf.train.ProximalAdagradOptimizer(learning_rate=0.1, l1_regularization_strength=0.001, l2_regularization_strength=0.001)\nreg_DNN.compile(loss='mean_squared_error', optimizer= optimizer)\nreg_DNN.fit(X_train.toarray(), y_train, steps_per_epoch = 512,epochs=50, validation_data = (X_test.toarray(), y_test), validation_steps = 500)","7b25858c":"DNN_Score_train = np.sqrt(mean_squared_error(y_train, reg_DNN.predict(X_train)))\nDNN_Score_test = np.sqrt(mean_squared_error(y_test, reg_DNN.predict(X_test)))\n\nprint(\"DNN train:\",DNN_Score_train)\nprint(\"DNN test:\",DNN_Score_test)","c5963db1":"score_table = pd.DataFrame([], index = [\"LinearRegression\",\"SGDRegressor\", \"xgboost\",\"DNN\"])\nscore_table[\"Train_Score\"] = [LR_Cross_train,SGD_Cross_train,XGB_Cross_train,DNN_Score_train]\nscore_table[\"Test_Score\"] = [LR_Score_test,SGD_Score_test,XGB_Score_test,DNN_Score_test]\n\nscore_table.plot.bar()\nplt.show()","c768c7df":"X_base_columns = preper_data_pipeline.fit_transform(X_train_base)\nunuse_params = ['distance_from_center','sol_distance','jfk_distance_pickup','jfk_distance_dropoff','ewr_distance_pickup',\n               'ewr_distance_dropoff','lga_distance_pickup','lga_distance_dropoff','sol_distance_pickup','sol_distance_dropoff','pickup_year','pickup_datetime']\nbase_columns = X_base_columns.columns.drop(unuse_params).values\nyear_columns = one_hot.categories_[0]\ntraining_labels = np.concatenate([year_columns,base_columns])\n\nexplainer = lime.lime_tabular.LimeTabularExplainer(X_train.toarray(), feature_names=training_labels ,categorical_features = training_labels, \n                                                    verbose=True, mode='regression')\n\ndef xgb_prediction(X_array_in):\n    return reg_xgb.predict(xgb.DMatrix(X_array_in), ntree_limit = reg_xgb.best_ntree_limit)\n\n\ngoodPrdicts = []\nbadPrdict = []\n\nfor i in range(1,500):\n    prdict_RMSE = np.sqrt(mean_squared_error([y_test.values[i]], xgb_prediction(X_test[i])))\n    if prdict_RMSE < 0.1:\n        goodPrdicts.append(X_test.toarray()[i])\n    elif prdict_RMSE > 10:\n        badPrdict.append(X_test.toarray()[i])","5ca10151":"exp = explainer.explain_instance(goodPrdicts[1], xgb_prediction, num_features=10)\nexp.show_in_notebook(show_table=True)\nexp.as_list(label=10)","58955437":"exp = explainer.explain_instance(badPrdict[2], xgb_prediction, num_features=10)\nexp.show_in_notebook(show_table=True)\nexp.as_list(label=10)","a2dfdb93":"test = feature_pipeline.transform(df_test)\npredit_test = reg_xgb.predict(xgb.DMatrix(test), ntree_limit = reg_xgb.best_ntree_limit)\npredit_test","26e2d27b":"#Create submission file\nsubmission = pd.DataFrame({\"key\": df_test.key})\nsubmission[\"fare_amount\"] = predit_test.round(2)\nsubmission\n\nsubmission.to_csv('taxi_fare_submission.csv',index=False)\nsubmission.head()\n","49dfb503":"# Check selected model","3fc02bb4":"Good predictions","1cdebf01":"### We will can use K-means to find the centers location for the taxis","515290df":"# Prepare Data","b6e36186":"# The data","14b05460":"Bad predictions","80740668":"![](https:\/\/images.unsplash.com\/photo-1490650404312-a2175773bbf5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80)","fdf34af1":"# Pickup data time","e77f99c4":"Distance by lat and lon\n![](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/6c6913fe71d3ae1920334521f899e9b8e5615eb7)\n\nmore info: https:\/\/en.wikipedia.org\/wiki\/Haversine_formula","4607c412":"# Passenger Count","d77d3eca":"# Pickup and dropoff latitude and longitude","99726bd8":"## Handle Outlier"}}