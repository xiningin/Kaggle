{"cell_type":{"99e35eed":"code","b6d046b5":"code","c3bcfeeb":"code","2c3e198d":"code","4c4af12e":"code","b0c33021":"code","55910573":"markdown","020e20ed":"markdown","278e2aa3":"markdown"},"source":{"99e35eed":"%matplotlib inline\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print('*** ',dirname)\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n        print(filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6d046b5":"data_root = '\/kaggle\/input\/eeg-data-for-mental-attention-state-detection\/eeg data\/EEG Data\/'\nfiles = os.listdir(data_root)\nlen(files)","c3bcfeeb":"from scipy.signal import butter, filtfilt\nfrom scipy.stats import zscore\nimport scipy.io\n\ndef bp_filter(data, f_lo, f_hi, fs):\n    \"\"\" Digital band pass filter (6-th order Butterworth)\n    Args:\n        data: numpy.array, time along axis 0\n        (f_lo, f_hi): frequency band to extract [Hz]\n        fs: sampling frequency [Hz]\n    Returns:\n        data_filt: band-pass filtered data, same shape as data \"\"\"\n    data_filt = np.zeros_like(data)\n    f_ny = fs \/ 2.  # Nyquist frequency\n    b_lo = f_lo \/ f_ny  # normalized frequency [0..1]\n    b_hi = f_hi \/ f_ny  # normalized frequency [0..1]\n    # band-pass filter parameters\n    p_lp = {\"N\":6, \"Wn\":b_hi, \"btype\":\"lowpass\", \"analog\":False, \"output\":\"ba\"}\n    p_hp = {\"N\":6, \"Wn\":b_lo, \"btype\":\"highpass\", \"analog\":False, \"output\":\"ba\"}\n    bp_b1, bp_a1 = butter(**p_lp)\n    bp_b2, bp_a2 = butter(**p_hp)\n    data_filt = filtfilt(bp_b1, bp_a1, data, axis=0)\n    data_filt = filtfilt(bp_b2, bp_a2, data_filt, axis=0)\n    return data_filt\n\n\n#  Function to read in the EEG data and extract the valid lead data, low and high pass filter and z-transform the data.\n#  Returns a dataframe.\ndef get_EEG_data(data_root, filename):\n    # Extract the data from one of these files.\n    hz = 128\n    #filename = 'eeg_record30.mat'\n    mat = scipy.io.loadmat(data_root + filename)\n    data = pd.DataFrame.from_dict(mat[\"o\"][\"data\"][0,0])\n\n    # Limit the data to the 7 valid EEG leads.\n    dat = data.filter(list(range(3, 17)))\n    dat.columns = list(range(1, 15))\n    dat = dat.filter([2, 3, 6, 7, 8, 9, 14], axis=1)\n    labels = ['F7', 'F3', 'T5', 'O1', 'O2', 'T6', 'FP2']  # FP2 should really be AF4\n    dat.columns = labels\n\n    # Filter the data, high pass 2 Hz, low pass 40 Hz.\n    lo, hi = 2, 40\n    # Do the filtering.\n    datf = bp_filter(dat.to_numpy(), lo, hi, hz)\n\n    # Convert back to a dataframe.\n    dat = pd.DataFrame({c: datf[:, i] for i,c in enumerate(labels)})\n\n    # Z-transform each column\n    dat = dat.apply(zscore)\n    \n    return dat\n\n\ndef plotleads(dat, leads, start, seconds, hz):\n    for i, lead in enumerate(leads):   \n        #print('Lead ' + lead)\n        plt.plot(dat.loc[start: start + seconds * hz, lead])   \n        plt.title('Lead ' + lead)\n        plt.show()","2c3e198d":"EEG_file_number = 30    # can be 1..34\nfilename = 'eeg_record' + str(EEG_file_number) + '.mat'\n#dat = get_EEG_data(data_root, filename)\ndat = get_EEG_data(data_root, files[EEG_file_number])","4c4af12e":"labels = ['F7', 'F3', 'T5', 'O1', 'O2', 'T6', 'FP2']\nstart = 4200\nseconds = 2\nhz = 128\nplotleads(dat, labels, start, seconds, hz)","b0c33021":"# For each file, print # minutes of data\nfor filename in files:\n    dat = get_EEG_data(data_root, filename)\n    # Compute microstates for this data\n    eegdat = dat.to_numpy()\n    print(filename, ' --->', np.round(len(eegdat)\/128\/60, 3))","55910573":"Read in the EEG data from one EEG file.","020e20ed":"### Print out the total minutes for each EEG file","278e2aa3":"Next we plot a 2 second segment of the EEG file we just read in, from each channel."}}