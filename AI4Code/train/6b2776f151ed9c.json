{"cell_type":{"0a61910c":"code","fbcf4e8d":"code","67ba1064":"code","3c84035b":"code","9b97bad0":"code","7dd7e18e":"code","acf80572":"code","f9f0bef5":"code","56fe3727":"code","9d09b2f1":"code","97574411":"code","848bba91":"code","e91346a7":"code","26e2247b":"code","aef848f3":"code","ed811bc0":"code","c9c459d5":"code","46a3816a":"markdown","74d06f0b":"markdown","ca2fb02e":"markdown","6581d80e":"markdown","9f269b15":"markdown","7904b319":"markdown","061360f9":"markdown"},"source":{"0a61910c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fbcf4e8d":"from pandas.plotting import scatter_matrix\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\n\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.ensemble import AdaBoostRegressor","67ba1064":"df=pd.read_csv(\"\/kaggle\/input\/california-housing-prices-data-extra-features\/California_Houses.csv\")","3c84035b":"df.head()","9b97bad0":"df['bedrooms_per_household']=df.Tot_Bedrooms\/df.Households\ndf['rooms_per_household']=df.Tot_Rooms\/df.Households\ndf['persons_per_household']=df.Population\/df.Households","7dd7e18e":"df.info()","acf80572":"abs(df.corr()).Median_House_Value.sort_values(ascending=False)","f9f0bef5":"train,val=train_test_split(df)\nX,y=train.drop('Median_House_Value',axis=1),train.Median_House_Value\ntrain.shape,val.shape,X.shape,y.shape","56fe3727":"kfold = KFold(n_splits=10, random_state=7, shuffle=True)\nmodel = KNeighborsRegressor()\nscoring = 'neg_mean_absolute_error'\nresults = cross_val_score(model, X, y, cv=kfold, scoring=scoring)\nprint(\"MAE: %.3f (%.3f)\" % (results.mean(), results.std()))","9d09b2f1":"scalers=[('MinMaxScaler',MinMaxScaler()),\n         ('StandardScaler',StandardScaler()),\n         ('Normalizer',Normalizer())]\n\nkfold = KFold(n_splits=10, random_state=7, shuffle=True)\nmodel = KNeighborsRegressor()\nscoring = 'neg_mean_absolute_error'\n\nfor name,scaler in scalers:\n    pipe=Pipeline([('scaler',scaler),('model',model)])\n    results = cross_val_score(pipe, X, y, cv=kfold, scoring=scoring)\n    print(name, results.mean())","97574411":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\nskb = SelectKBest(score_func=f_classif, k='all')\nskb.fit(X,y)","848bba91":"pd.DataFrame(data=skb.scores_,index=X.columns,columns=['scores']).sort_values(by='scores').plot(kind='barh')","e91346a7":"kfold = KFold(n_splits=10, random_state=7, shuffle=True)\nmodel = KNeighborsRegressor()\nscoring = 'neg_mean_absolute_error'\n\nfor n in range(1,17,1):\n    skb = SelectKBest(score_func=f_classif, k=n)\n    pipe=Pipeline([('skb',skb),('model',model)])\n    results = cross_val_score(pipe, X, y, cv=kfold, scoring=scoring)\n    print(n, results.mean())","26e2247b":"from sklearn.preprocessing import QuantileTransformer\n\nkfold = KFold(n_splits=10, random_state=7, shuffle=True)\nmodel = KNeighborsRegressor()\nqt=QuantileTransformer()\nscoring = 'neg_mean_absolute_error'\n\nskb = SelectKBest(score_func=f_classif, k=n)\npipe=Pipeline([('qt',qt),('model',model)])\nresults = cross_val_score(pipe, X, y, cv=kfold, scoring=scoring)\nprint(results.mean())","aef848f3":"from sklearn.decomposition import PCA\n\nkfold = KFold(n_splits=10, random_state=7, shuffle=True)\nmodel = KNeighborsRegressor()\nscoring = 'neg_mean_absolute_error'\n\nfor n in range(1,17,1):\n    pca = PCA(n_components=n)\n    pipe=Pipeline([('pca',pca),('model',model)])\n    results = cross_val_score(pipe, X, y, cv=kfold, scoring=scoring)\n    print(n, results.mean())","ed811bc0":"kfold = KFold(n_splits=10, random_state=7, shuffle=True)\nscoring = 'neg_mean_absolute_error'\n\nfor k in range(1,21,1):\n    model = KNeighborsRegressor(n_neighbors=k)\n    results = cross_val_score(model, X, y, cv=kfold, scoring=scoring)\n    print(k, results.mean())","c9c459d5":"ensembles = []\nensembles.append(('AB', AdaBoostRegressor()))\nensembles.append(('GBM', GradientBoostingRegressor()))\nensembles.append(('RF', RandomForestRegressor(n_estimators=10)))\nensembles.append(('ET', ExtraTreesRegressor(n_estimators=10)))\n\nresults = []\nnames = []\nfor name, model in ensembles:\n    kfold = KFold(n_splits=10, random_state=0, shuffle=True)\n    cv_results = cross_val_score(model, X, y, cv=kfold, scoring='neg_mean_absolute_error')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","46a3816a":"# Values of k ","74d06f0b":"# PCA","ca2fb02e":"# Baseline","6581d80e":"# QuantileTransformer","9f269b15":"# MinMaxScaler - StandardScaler - Normalizer","7904b319":"# Ensemble","061360f9":"# SelectKBest"}}