{"cell_type":{"83c6e008":"code","0b383208":"code","aedd21bc":"code","ccd313c4":"code","98d05380":"code","6f75bba6":"code","0566f62d":"code","045c6478":"code","6126ee3b":"code","6e0e2b6d":"code","6313c501":"code","84406a15":"code","ab68aafa":"code","9d780a42":"code","8fc78b0f":"code","9cd297f3":"code","8bd6a571":"code","812e140c":"code","dd147e86":"code","5d99dab8":"code","ec254166":"code","f6330a01":"code","12e1e8d3":"code","f37a9b7b":"code","26c096d4":"code","e9f1e637":"code","14728982":"code","52c21508":"code","72a75b2b":"code","c374d955":"code","5edc6cd7":"code","4505c3f6":"code","73bc4c56":"code","78604b48":"code","f7312bd0":"code","a545d080":"code","29da10e1":"code","35b8bc6c":"code","e316bb61":"code","9f4ede93":"code","a387c8f4":"code","7c1969fa":"code","3c0beae4":"code","43af5e1d":"code","1f8ba429":"markdown","8b9e5848":"markdown","af66a1d0":"markdown","27ce4e2e":"markdown","61bc8c17":"markdown","085bd2dc":"markdown","5de58bfe":"markdown","c662270f":"markdown","d6a9899c":"markdown","16544958":"markdown","d21a75cd":"markdown","64635517":"markdown","997968cc":"markdown","c3fd58f3":"markdown","c7d00492":"markdown","cc8924e0":"markdown","d7bb4c4f":"markdown","07612312":"markdown","8c7a4df7":"markdown","cb563b19":"markdown","7c6a47d8":"markdown","6186ed95":"markdown","438370d1":"markdown","2813a984":"markdown","43a9787b":"markdown","17744fac":"markdown","9a560a98":"markdown","9304d6b5":"markdown","dd05aee8":"markdown","2432046b":"markdown","50d5fc26":"markdown","4ec6b312":"markdown","6d732ccb":"markdown","d21b163b":"markdown","a645a2dd":"markdown","3a7722c6":"markdown"},"source":{"83c6e008":"!pip install pywaffle","0b383208":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nsns.set(font_scale = 2.5) # Setting up font size as default\nfrom collections import OrderedDict # Set up color dictionary in order\n\nimport squarify           # Treemap\nplt.style.use('fivethirtyeight')\nfrom pywaffle import Waffle\n\n# ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# plotly\nimport plotly.offline as py\nimport plotly.express as px\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\n%matplotlib inline","aedd21bc":"response = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv', encoding = 'utf-8')\nresponse.head()","ccd313c4":"# Save Questions as a list and fill missing values into ''\nquestion_list = response.iloc[0,].values\nresponse = response.iloc[1:,:].reset_index(drop = True)\nresponse.fillna('', inplace = True)\nresponse.head()","98d05380":"def total_answer(df, column):\n    \"\"\"\n    A function to combine all relevant features coming from a multiple-choice question\n    column : column name\n    \"\"\" \n    # Extract all relevant columns corresponding to 'column'\n    col = df.columns[df.columns.str.contains(column)]\n    tmp = df[col]\n    # Fill missing values with empty space ''\n    tmp = tmp.fillna('')\n    \n    # Add comma(,) between answers\n    total = tmp.apply(','.join, axis=1)\n\n    # Remove unnecessary comma(,)\n    import re\n    ls = []\n    for i in total:\n        ls.append(re.sub(',{2,}', ',', i).strip(',')) ## Replace double commas into one\n\n    # Delete the rest of columns that are already used\n    df.drop(col, axis=1, inplace=True)\n\n    # Store the combined answers into a column\n    df[column] = ls\n","6f75bba6":"# Apply total_answer() to only multiple-type questions\n\nq_list_supplementary = [27,29,30,31,32,34,36,37,38] # supplementary question list\n\nfor i in range(7, 43):\n    if i in q_list_supplementary:\n        num_A = 'Q' + str(i) + '_A'\n        num_B = 'Q' + str(i) + '_B'\n        total_answer(response ,num_A)\n        total_answer(response ,num_B)\n    \n    else:\n        num = 'Q'+str(i)\n        total_answer(response ,num)\nresponse.head()","0566f62d":"response['RegroupJobTitle'] = response['Q5'].copy()\nresponse['RegroupJobTitle'] = response['RegroupJobTitle'].replace(['Business Analyst', 'Data Analyst', 'Product Manager', 'Program\/Project Manager', 'Statistician'],'DA')\nresponse['RegroupJobTitle'] = response['RegroupJobTitle'].replace(['Data Engineer', 'DBA\/Database Engineer', 'Machine Learning Engineer', 'Software Engineer', 'Developer Relations\/Advocacy'], 'DE')\nresponse['RegroupJobTitle'] = response['RegroupJobTitle'].replace(['Data Scientist', 'Research Scientist'], 'DS')\nresponse['RegroupJobTitle'] = response['RegroupJobTitle'].replace(['Student', 'Currently not employed', 'Other'], 'OTHER')","045c6478":"response['RegroupJobTitle'].value_counts(normalize = True)","6126ee3b":"cond = ((response['Q27_B'] != '') | (response['Q29_B'] != '') | (response['Q30_B'] != '') | \n        (response['Q31_B'] != '') | (response['Q32_B'] != '') | (response['Q34_B'] != '') | \n        (response['Q36_B'] != '') | (response['Q37_B'] != '') | (response['Q38_B'] != ''))\n\nresponse['professional'] = 'Professional'\nresponse.loc[cond, 'professional'] = 'Non-professional'","6e0e2b6d":"response['professional'].value_counts(normalize = True)","6313c501":"# Rename columns\nquestion_name_dict = {'Q1':'Age', 'Q2': 'Gender', 'Q3':'Country', 'Q4':'FormalEducation',\n                      'Q5':'JobTitle','Q6':'YearsToCode', 'Q7':'Language_regular', 'Q8': 'Language_first',\n                      'Q9':'IDE', 'Q10':'Notebook', 'Q11':'Computer', 'Q12':'Hardware', 'Q13':'Duration_TPU',\n                      'Q14':'Vis_library', 'Q15':'Years_ML_Method','Q16':'ML_framework', 'Q17':'ML_algorithm',\n                      'Q18':'Method_CV', 'Q19':'Method_NLP', 'Q20':'JobIndustry', 'Q21':'CompanySize',\n                      'Q22':'Num_Workloads', 'Q23':'ML_Applied', 'Q24':'Activities_role', 'Q25':'Year_Compensation',\n                      'Q26':'Spent_amount_ML', 'Q27_A':'Cloud_platform_A', 'Q27_B':'Cloud_platform_B', \n                      'Q28':'Best_Cloud_platform','Q29_A':'Use_Cloud_platform_A','Q29_B':'Use_Cloud_platform_B',\n                      'Q30_A':'Use_Data_Storage_A','Q30_B':'Use_Data_Storage_B', 'Q31_A':'Use_ML_product_A',\n                      'Q31_B':'Use_ML_product_B','Q32_A':'BigData_product_A','Q32_B':'BigData_product_B',\n                      'Q33':'Best_BigData_product','Q34_A':'BI_Tool_A','Q34_B':'BI_Tool_B','Q35':'Best_BI_Tool',\n                      'Q36_A':'AutoML_Tool_A','Q36_B':'AutoML_Tool_B','Q37_A':'Which_AutoML_Tool_A',\n                      'Q37_B':'Which_AutoML_Tool_B','Q38_A':'ManageML_A','Q38_B':'ManageML_B',\n                      'Q39':'PublicToDeploy',\n                      'Q40':'PlatformToLear_DS','Q41':'PrimaryTool','Q42':'MediaSourceToLearn'\n                     }\n\nresponse = response.rename(columns = question_name_dict)\nresponse.head()","84406a15":"response['FormalEducation'].value_counts()","ab68aafa":"regroup_education = {'Some college\/university study without earning a bachelor\u2019s degree' :'Before Bachelor',\n                     'No formal education past high school' :'Before Bachelor',\n                     'I prefer not to answer': 'Before Bachelor',\n                     'Doctoral degree': 'Doctoral degree or Higher', \n                     'Bachelor\u2019s degree': 'Bachelor',\n                     'Master\u2019s degree' : 'Master',\n                     'Professional doctorate': 'Doctoral degree or Higher'}\n\nresponse['FormalEducation'] = response['FormalEducation'].map(regroup_education)","9d780a42":"response['FormalEducation'].value_counts(normalize = True)","8fc78b0f":"regroup_education2 = {'Before Bachelor' : 'Undergraduate or less',\n                     'Bachelor' : 'Undergraduate or less',\n                     'Master': 'Graduate',\n                     'Doctoral degree or Higher': 'Graduate'}\n\nresponse['FormalEducation2'] = response['FormalEducation'].map(regroup_education2)\nresponse['FormalEducation2'].value_counts(normalize = True)","9cd297f3":"# Customize colors by index\ndef setting_colors(col_color, index_name, color):\n    '''\n    col_color = dictionary that you want to update\n    index_name = the index that you want to color (str)\n    color = a color type (str)\n    '''\n    if len(col_color) == 0:\n        col_color = {}\n    else:\n        col_color = col_color\n    col_color.update({index_name: color})\n    return col_color","8bd6a571":"age = 100 * pd.crosstab(response['Age'], response['professional'])\/len(response) # Convert count into percentage\n\n# barplot\nax_1 = age.plot.bar(stacked = True, color = {'#FFD662', '#00539C'}, figsize = (15,10),\n                   linewidth = 2, edgecolor = 'k')\n\nfor rec in ax_1.patches:\n    height = rec.get_height()\n    ax_1.text(rec.get_x() + rec.get_width() \/ 2, \n              rec.get_y() + height \/ 2,\n              \"{:.2f}%\".format(height),\n              ha='center', \n              va='bottom',\n             fontsize = 15,\n             color = 'w') \n\n        \nplt.xlabel('Age', fontsize = 20, weight = 'bold')\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.title('Professional VS Non-professional by Age', fontsize =20, weight = 'bold')\nplt.legend(fontsize = 20)\nplt.show()","812e140c":"# Professional vs Non-professional \ncond_pro = (response['professional'] == 'Professional')\npro = response[cond_pro]\nnonpro = response[-cond_pro]","dd147e86":"import itertools\nplt.subplots(figsize = (22,10))\nage_pro = pd.crosstab(pro['Age'], pro['RegroupJobTitle'])\n# age_nonpro = pd.crosstab(nonpro['Age'], nonpro['RegroupJobTitle'])\ncategory = ['DS','DA','DE','OTHER']\nlength = len(category)\n\nsns.set_theme(style=\"darkgrid\") # '#0A174E', '#F5D042'\n\nfor i, j in itertools.zip_longest(category, range(length)):\n    plt.subplot( (length\/2), 2, j+1) # nrows, ncols, index\n    plt.subplots_adjust(wspace = 0.2, hspace = 0.5)\n\n    age_pro[i].plot.bar(color = '#00539C', linewidth = 2, edgecolor = 'k')\n#     age_nonpro[i].plot.bar(color = '#D4C8BE')\n    plt.title(i, size = 20, weight = 'bold')\n    plt.xlabel('')\nplt.show()","5d99dab8":"# Group other three gender types as 'others'\nother_gender = ['Nonbinary', 'Prefer not to say', 'Prefer to self-describe']\nresponse['Gender'] = response['Gender'].map(lambda x:'Others' if x in other_gender else x)\nresponse['Gender'].value_counts()\n\n# Professional vs Non-professional \ncond_pro = (response['professional'] == 'Professional')\npro = response[cond_pro]\nnonpro = response[-cond_pro]","ec254166":"gender = response['Gender'].value_counts()\nfig = plt.figure(\n    FigureClass=Waffle, \n    rows=8,\n    columns=20,\n    values=gender,\n    colors=(\"royalblue\", \"lightcoral\", 'gray'),\n    title={'label': \"2021 Respondents' Gender\", \n           'loc': 'center',\n          'fontdict': {\n            'fontsize': 24\n            }\n          },\n    legend={'labels': [\"{}({:.2%})\".format(a, b) for a, b in zip(gender.index, gender\/len(response)) ],\n            'loc': 'upper left',\n            'bbox_to_anchor': (0, 0),\n            'ncol': len(gender),\n            'framealpha': 0.1,\n            'fontsize': 20},\n\n    font_size=25, \n    icons = 'child',\n    icon_style = 'solid',\n    figsize=(12, 5),  \n    icon_legend=True\n)","f6330a01":"fig, ax = plt.subplots(1, 2, figsize=(22, 10))\nexplode = [0.01, 0, 0.01]\nwedgeprops={'width': 0.7, 'edgecolor': 'w', 'linewidth': 5}\n\n# crosstab\ngender = pd.crosstab(response['Gender'], response['professional'])\n\n# Non-professional\ngender['Non-professional'].plot.pie(autopct='%.0f%%', colors=[\"royalblue\", 'gray',\"lightcoral\"], \n                                    explode=explode, wedgeprops=wedgeprops, \n                                    textprops={'fontsize': 15}, ax=ax[0], shadow = True)\n# Professional\ngender['Professional'].plot.pie(autopct='%.0f%%', colors=[\"royalblue\", 'gray',\"lightcoral\"], \n                                explode=explode, wedgeprops=wedgeprops, \n                                textprops={'fontsize': 14}, ax=ax[1], shadow = True)\nax[0].set_title('Gender of Nonprofessional', size=20, weight = 'bold')\nax[1].set_title('Gender of Professional', size=20, weight = 'bold')\nplt.show()","12e1e8d3":"# Barplot\nfig, ax = plt.subplots(ncols=2, figsize=(20, 10))\ngender = pd.crosstab(pro['Gender'], pro['RegroupJobTitle']).T.sort_values(by='Man', ascending=False)\ngender.plot.bar(stacked=True, color=[\"royalblue\", 'gray',\"lightcoral\"], ax=ax[0], linewidth = 2, edgecolor = 'k')\n\ngender_spe = pd.crosstab(pro['Gender'], pro['JobTitle']).T.sort_values(by='Man', ascending=False)\ngender_spe.plot.bar(stacked=True, color=[\"royalblue\", 'gray',\"lightcoral\"], ax=ax[1], linewidth = 2, edgecolor = 'k')\n\nax[0].set_title('Gender Of Professional', size=20, weight = 'bold', fontname = 'monospace')\nax[1].set_title('Gender By Occupation', size=20, weight = 'bold', fontname = 'monospace')\n\nax[0].set_xlabel('')\nax[1].set_xlabel('')\n\nax[0].legend(fontsize = 15)\nax[1].legend(fontsize = 15)\n\nax[0].tick_params(axis = 'both', which = 'major')\nax[1].tick_params(axis = 'both', which = 'major')\n\nplt.show()","f37a9b7b":"!pip install scikit-image","26c096d4":"from io import BytesIO\nimport requests\nfrom skimage.io import imread\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\n\ndef set_country_palette(series):\n    \n    country_dict = {'Bangladesh': '#990000', 'Brazil': '#009900', 'China': '#FF0000', 'Egypt': '#CC6600',\n                    'France': '#3333FF', 'Germany': '#FFFF00', 'India': '#FFFF33', 'Indonesia': '#FF6666',\n                    'Japan': '#CC0000', 'Nigeria': '#006600', 'Other': '#E0E0E0', 'Pakistan': '#00CC66',\n                    'Russia': '#000099', 'Spain': '#FF8000', 'Turkey': '#660000',\n                    'United Kingdom of Great Britain and Northern Ireland': '#B266FF',\n                    'United States of America': '#660033'}\n    pal = []\n    \n    for item in series:\n            pal.append(country_dict[item])\n    return pal\n\ndef offset_image(x, y, label, bar_is_too_short, ax):\n    \n    country_dict = {'Bangladesh': 'bd', 'Brazil': 'br', 'China': 'cn', 'Egypt': 'eg',\n                    'France': 'fr', 'Germany': 'de', 'India': 'in', 'Indonesia': 'id',\n                    'Japan': 'jp', 'Nigeria': 'ng', 'Pakistan': 'pk',\n                    'Russia': 'ru', 'Spain': 'es', 'Turkey': 'tr',\n                    'United Kingdom of Great Britain and Northern Ireland': 'gb',\n                    'United States of America': 'us'}\n    response = requests.get(f'https:\/\/flagcdn.com\/w40\/{country_dict[label]}.png') \n    img = imread(BytesIO(response.content))\n    im = OffsetImage(img, zoom=0.65)\n    im.image.axes = ax\n    x_offset = 10 # \uadf8\ub9bc \uc704\uce58 \uc870\uc815 0: \uadf8\ub798\ud504\uc758 \ub05d, -: \uadf8\ub798\ud504 \ub0b4\ubd80, +: \uadf8\ub798\ud504 \uc678\ubd80\ubc29\ud5a5\uc73c\ub85c \uc870\uc808\n    # if bar_is_too_short:\n        # x = 0\n    ab = AnnotationBbox(im, (x, y), xybox=(x_offset, 0), frameon=False,\n                        xycoords='data', boxcoords=\"offset points\", pad=0)\n    ax.add_artist(ab)\n","e9f1e637":"non_country = response[response['professional'] == 'Non-professional']['Country'].value_counts()[:15]\npro_country = response[response['professional'] == 'Professional']['Country'].value_counts()[:15]\n\n\nfig, ax = plt.subplots(ncols=2, figsize=(18, 15))\nsns.barplot(non_country, non_country.index, palette= set_country_palette(non_country.index), ax=ax[0], linewidth = 2, edgecolor = 'k')\nsns.barplot(pro_country, pro_country.index, palette= set_country_palette(pro_country.index), ax=ax[1], linewidth = 2, edgecolor = 'k')\n\nplt.subplots_adjust(wspace=0.6, hspace=0.5)\nax[0].set_title('Country of Nonprofessional', size=20, weight = 'bold')\nax[1].set_title('Country of Professional', size=20, weight = 'bold')\nax[0].set_yticklabels(non_country.index, fontsize=15)\nax[1].set_yticklabels(pro_country.index, fontsize=15)\nax[0].set_xlabel('')\nax[1].set_xlabel('')\n\nmax_value = non_country.max()\nfor i, (label, value) in enumerate(zip(non_country.index, non_country)):\n    if label == 'Other': # Other has no flag\n        continue\n    offset_image(value * 1.01, i, label, bar_is_too_short=value < max_value \/ 10, ax=ax[0])\n\nmax_value = pro_country.max()\nfor i, (label, value) in enumerate(zip(pro_country.index, pro_country)):\n    if label == 'Other':\n        continue\n    offset_image(value* 1.01, i, label, bar_is_too_short=value < max_value , ax=ax[1])\nplt.suptitle('')\nplt.show()","14728982":"country_spe = pd.crosstab(pro['Country'], pro['RegroupJobTitle'])\ncountry_spe['total'] = country_spe['DA'] + country_spe['DE'] + country_spe['DS'] + country_spe['OTHER']\ncountry_spe = country_spe.sort_values('total', ascending=False)[:15].sort_values('total').drop('total', axis=1)\n\ncountry_spe.plot.barh(stacked=True, color=sns.color_palette('PuBuGn_r'), figsize=(10, 8), linewidth = 2, edgecolor = 'k')\nplt.legend(loc = 'center right', fontsize = 15)\nplt.title('', fontsize = 30, fontname = 'monospace', weight = 'bold')\nplt.show()","52c21508":"# Group Countries by continent\nasia = ['India', 'Japan', 'China', 'Pakistan', 'Indonesia', 'South Korea', 'Taiwan', 'Bangladesh',\n        'Viet Nam', 'Australia', 'Iran, Islamic Republic of...', 'Singapore', 'Malaysia', 'Israel',\n        'Thailand', 'United Arab Emirates', 'Philippines', 'Sri Lanka', 'Saudi Arabia', 'Hong Kong (S.A.R.)',\n        'Nepal', 'Kazakhstan', 'Iraq']\namerica = ['United States of America', 'Brazil', 'Canada', 'Mexico', 'Colombia', 'Argentina', 'Chile',\n           'Ecuador', 'Peru']\nafrica = ['Nigeria', 'Egypt', 'Kenya', 'Morocco', 'Tunisia', 'Ghana', 'Uganda', 'Algeria', 'Ethiopia',\n          'South Africa']\neurope = ['Russia', 'United Kingdom of Great Britain and Northern Ireland', 'Germany', 'Spain',\n          'Turkey', 'France', 'Italy', 'Poland', 'Netherlands', 'Portugal', 'Greece', 'Ireland',\n          'Sweden', 'Switzerland', 'Belgium', 'Romania', 'Austria', 'Belarus', 'Denmark', 'Norway',\n          'Ukraine', 'Czech Republic']\nothers = ['Other', 'I do not wish to disclose my location']\n\n# Create a 'Continent' column\nresponse['Continent'] = response['Country'].copy()\nresponse['Continent'] = response['Continent'].replace(asia, 'Asia')\nresponse['Continent'] = response['Continent'].replace(america, 'America')\nresponse['Continent'] = response['Continent'].replace(africa, 'Africa')\nresponse['Continent'] = response['Continent'].replace(europe, 'Europe')\nresponse['Continent'] = response['Continent'].replace(others, 'Others')\nresponse['Continent'].value_counts()\n\n# Take the rest countries with small portion of respondants across each continent as 'ETC'\nasia_etc = list(response[response['Continent'] =='Asia']['Country'].value_counts().index[10:])\neu_etc = list(response[response['Continent'] =='Europe']['Country'].value_counts().index[10:])\n\nresponse['Country'] = response['Country'].replace(asia_etc, 'ETC')\nresponse['Country'] = response['Country'].replace(eu_etc, 'ETC')","72a75b2b":"## plot\nplt.subplots(figsize=(20,15))\ncontinental = ['Asia', 'America', 'Africa', 'Europe']\nlength = len(continental)\n\nfor i, j in itertools.zip_longest(continental, range(length)):\n    plt.subplot((length\/2), 2, j+1)\n    response[response['Continent'] ==i]['Country'].value_counts().plot.pie(autopct='%.1f%%',\n                                                                           textprops={'fontsize': 12})\n    plt.title(i, size=20, fontname = 'monospace')\n    plt.xlabel('')\n    plt.ylabel('')\nplt.show()","c374d955":"df = response.groupby(['RegroupJobTitle', 'JobIndustry'])['Age'].count().reset_index()\ndf = df[df['RegroupJobTitle'] != 'OTHER']\nfig = px.treemap(df, path=[px.Constant(\"Job Title\"), 'RegroupJobTitle', 'JobIndustry'], values='Age',\n                  color='JobIndustry', title = 'Industry by Job Title'\n                )\nfig.update_traces(textinfo = 'label+percent parent')\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()","5edc6cd7":"response['FormalEducation'].value_counts()","4505c3f6":"# Data Wrangling: Professional vs Non-professional by Education\ntotal = response['FormalEducation'].value_counts().sum()\n\n## Formal Education by professional as percentage over the entire respondants\n### Non-professoinal\nnonpro_edu = response[response['professional'] == 'Non-professional']['FormalEducation'].value_counts().to_frame()\nnonpro_edu['FormalEducation'] = nonpro_edu['FormalEducation']*(-1) \/ total\n### Professoinal\npro_edu =  response[response['professional'] == 'Professional']['FormalEducation'].value_counts() \/ total\n\n\n# Plotting\norder = np.array(['Before Bachelor', 'Bachelor', 'Master', 'Doctoral degree or Higher']).astype('object')\nplt.figure(figsize=(10, 5))\n\n## Non-professional\nbar_plot = sns.barplot(y=nonpro_edu.index, x=nonpro_edu['FormalEducation'], order=order, color='#FFD662', \n                       label = 'Non-professional', linewidth = 2, edgecolor = 'k')\n    \n## Professional\nbar_plot = sns.barplot(y=pro_edu.index, x=pro_edu.values, order=order, color='#00539C', \n                       label = 'Professional',linewidth = 2, edgecolor = 'k')\n\n## Annotation\nfor rec in bar_plot.patches:\n    height = rec.get_width()\n    if height < 0:\n        height_text = \"{:.2%}\".format( (-1) * height)\n        x_loc = rec.get_x() - .005 + rec.get_width() \/ 2\n        bar_plot.text(x_loc, \n              rec.get_y() + 0.5 + rec.get_x() \/ 2,\n              height_text,\n              ha='center', \n              va='bottom',\n              color = '#00539C') \n    else:\n        height_text = \"{:.2%}\".format(height)\n        x_loc = rec.get_x() + .005 + rec.get_width() \/ 2\n        bar_plot.text(x_loc, \n              rec.get_y() + 0.5 + rec.get_x() \/ 2,\n              height_text,\n              ha='center', \n              va='bottom',\n              color = '#FFD662') \n\n## Remove x-axis label\nplt.xlabel('')\nplt.tick_params(\n    axis='x',          # changes apply to the x-axis\n    which='both',      # both major and minor ticks are affected\n    bottom=False,      # ticks along the bottom edge are off\n    top=False,         # ticks along the top edge are off\n    labelbottom=False) # labels along the bottom edge are off\nplt.legend(loc = 'lower right')\nplt.title('Formal Education By Professional Status', fontsize = 20, weight = 'bold')\nplt.show()","73bc4c56":"# Data Wrangling\n## Professionals\ncond_prof = (response['professional'] == 'Professional')\n\n## Regroup Formal Education by 4 categorical standards: Before Bachelor vs Bachelor vs Master vs Doctoral or Higher\nedu_level1 = response[cond_prof].groupby(['RegroupJobTitle','FormalEducation'])['Age'].count().reset_index().rename(columns = {'Age':'Count'})\n\n## Regroup Formal Education by 2 categorical standards: Undergraduate or less vs Graduate\nedu_level2 = response[cond_prof].groupby(['RegroupJobTitle','FormalEducation2'])['Age'].count().reset_index().rename(columns = {'Age':'Count'})\n","78604b48":"### Plotting\nfig, ax = plt.subplots(4,2, figsize = (20,30))\n\n# Orders\norder=['DS', 'DA', 'DE', 'OTHER']\nhue_order = ['Before Bachelor', 'Bachelor', 'Master', 'Doctoral degree or Higher']\n\n\ni = 0 # Setting up the first axis\nfor job in order:   \n    # 4 Education Levels\n    ## Filter edu_level1 by RegroupJobTitle\n    cond1 = (edu_level1['RegroupJobTitle'] == job)\n    data1 = edu_level1[cond1]\n        \n    # Graduate vs Undergraduate\n    ## Filter edu_level2 by RegroupJobTitle \n    cond2 = (edu_level2['RegroupJobTitle'] == job)\n    data2 = edu_level2[cond2]\n    \n    # ------------ Bar Plot ------------- #\n    ## Barplot\n    sns.barplot(x = 'FormalEducation', y = 'Count', \n                data = data1,\n                palette=['#D79922', '#EFE2BA', '#F13C20','#4056A1'], order = hue_order,\n                linewidth = 2, edgecolor = 'k', ax = ax[i,0])\n    \n    ## Customize axis and labels\n    ax[i,0].tick_params(axis='x', which='both', labelsize=15)\n    ax[i,0].set_ylabel('Count', weight='semibold', fontname = 'monospace')\n    ax[i,0].set_xlabel('')\n    ax[i,0].set_title(f'Formal Education: {job}', \n                      fontsize = 20, weight = 'bold', \n                      fontname = 'monospace')\n\n    # ------------ Pie Chart ------------- #\n    ## Pie Chart: Graduate vs Undergraduate\n    _, _, autotexts = ax[i,1].pie(data2.Count, labels = data2.FormalEducation2, \n                                    colors = np.array(['#FFD662', '#00539C']), \n                                    autopct='%1.1f%%',\n                                    textprops={'fontsize': 18},\n                                    explode = [0.02, 0.02])\n    ## Customize Text Colors in Pie Chart\n    text_colors = ['#00539C', '#FFD662']\n    for text, color in zip(autotexts, text_colors):\n        text.set_color(color)\n    \n    ## Pie Chart Title\n    ax[i,1].set_title(f'Graduate VS Undergraduate or less: {job}', \n                      fontsize = 20, weight = 'bold', \n                      fontname = 'monospace')\n    # Move to the next Job\n    i += 1 \n    \nplt.suptitle('Professionals: Is Graduate Degree Needed To Get A Job?', fontsize =30, weight = 'bold', fontname = 'monospace')\n\nplt.show()\n\n\n# Just in Case: \n# plt.get_cmap('flare_r')(np.linspace(0.2, 0.7, 4))","f7312bd0":"plt.subplots(figsize=(20,10))\njob = ['DA', 'DS', 'DE']\nlength = len(job)\ncol_color = {'< 1 years':'#FFD662',\n             'I have never written code':'#00539C',\n             '1-3 years':'#00539C',\n             '3-5 years':'#00539C',\n             '5-10 years':'#00539C',\n             '10-20 years':'#00539C',\n             '20+ years':'#00539C'}\n\nfor i, j in itertools.zip_longest(job, range(length)):\n    plt.subplot(1, 3, j+1)\n    data = response[(response['RegroupJobTitle'] == i) & (response['professional'] == 'Professional')]['YearsToCode'].value_counts(ascending=True)\n    data.plot(kind='barh', color=pd.DataFrame(data).reset_index()['index'].replace(col_color),\n             linewidth = 2, edgecolor = 'k' )\n    plt.title(i, size=20, weight = 'bold')\nplt.suptitle('Professionals: How Long Have You Been Coded Or Used Programming Languages?', fontsize = 30, weight = 'bold', fontname = 'monospace')\nplt.show()","a545d080":"primary_tools = ['Basic statistical software (Microsoft Excel, Google Sheets, etc.)',\n        'Advanced statistical software (SPSS, SAS, etc.)',\n        'Business intelligence software (Salesforce, Tableau, Spotfire, etc.)',\n        'Local development environments (RStudio, JupyterLab, etc.)',\n        'Cloud-based data software & APIs (AWS, GCP, Azure, etc.)',\n        'Other']\n\n# List of unique regrouped job titles\njob = response['RegroupJobTitle'].unique()\nlength = len(job)\n\n# Filter all the unexperienced respondants out from the data\ncond_unexp = (response['JobTitle'] == 'Student') | (response['JobTitle'] == 'Currently not employed')\nresponse_exp = response.copy()\nresponse_exp = response_exp[-cond_unexp]\n\n# Data Wrangling\nexp_tool = response_exp.groupby(['RegroupJobTitle', 'PrimaryTool'])['Age'].count().reset_index().rename(columns = {'Age': 'Count'})\n\n# Delete the empty from the data\nexp_tool = exp_tool[exp_tool['PrimaryTool'] != '']\n\n\nplt.subplots(figsize = (15,30))\n# Plotting\nfor i, j in itertools.zip_longest(job, range(length)):\n    plt.subplot(length,1, j+1)\n    data = exp_tool[exp_tool['RegroupJobTitle'] == i].sort_values(by = ['Count'], ascending = False).reset_index(drop = True)  \n    \n    # Customize colors by index\n    ## List colors where you want to allocate\n    colors = ['#D79922', '#EFE2BA', '#F13C20','#4056A1','#C5CBE3','#273c75']\n    \n    ## Setting up colors by replacing index into allocated color\n    col_color = {}\n    for index, color in itertools.zip_longest(primary_tools, colors):    \n        col_color = setting_colors(col_color, index, color)\n    color = pd.DataFrame(data)['PrimaryTool'].replace(col_color)\n    \n    # barplot\n    sns.barplot(y='PrimaryTool', x='Count',data = data, palette = color, linewidth = 2, edgecolor = 'k')\n    plt.title(i, size=20, weight = 'bold', fontname = 'monospace')\n    \n    ## Setting up axis, labels, figure size\n    plt.yticks(fontname = 'monospace', size = 10)\n    plt.xticks(fontname = 'monospace', size = 10)\n   \n    plt.xlabel('')\n    plt.ylabel('')\n    \nplt.subplots_adjust(wspace = 0.1, hspace =0.2)\nplt.suptitle('Professionals: Which Tools Would The Experienced Suggest?', fontsize = 30, weight = 'bold', fontname = 'monospace')\nplt.show()","29da10e1":"# Customize colors by index\ndef setting_colors(col_color, index_name, color):\n    '''\n    col_color = dictionary that you want to update\n    index_name = the index that you want to color (str)\n    color = a color type (str)\n    '''\n    if len(col_color) == 0:\n        col_color = {}\n    else:\n        col_color = col_color\n    col_color.update({index_name: color})\n    return col_color","35b8bc6c":"response['Language_regular'] = response['Language_regular'].str.replace('C\\++', '\\++').str.replace('Javascript', 'JS')\nlang = ['Python', 'R', 'SQL', 'C', '\\++', 'Java', 'JS', 'Julia', 'Swift', 'Bash', 'MATLAB']","e316bb61":"plt.subplots(figsize=(20,17))\njob = response['RegroupJobTitle'].unique()\nlength = len(job)\n\nfor i, j in itertools.zip_longest(job, range(length)):\n    plt.subplot((length\/2), 2, j+1)\n    data = response[(response['RegroupJobTitle'] == i) & (response['professional'] == 'Professional')]  \n\n    lan = []\n    cnt = []\n    for k in lang:\n        lan.append(k)\n        cnt.append(len(data[data['Language_regular'].str.contains(k)]))\n\n    df = pd.DataFrame(columns=[\"language\", 'cnt'])\n    df['language'] = lan\n    df['cnt'] = cnt\n    df = df.sort_values(by='cnt', ascending=False)\n    # Customize colors by index\n    ## List colors where you want to allocate\n    colors = ['#D79922', '#EFE2BA', '#F13C20','#4056A1','#C5CBE3','#EAE7DC',\n              '#D8C3A5','#8E8D8A','#E98074','#E85A4F','#F8E9A1']\n    \n    ## Setting up colors by replacing index into allocated color\n    col_color = {}\n    for index, color in itertools.zip_longest(lang, colors):    \n        col_color = setting_colors(col_color, index, color)\n    color = pd.DataFrame(df)['language'].replace(col_color)\n    \n    # barplot\n    sns.barplot(y='language', x='cnt',data = df, palette = color, linewidth = 2, edgecolor = 'k')\n    plt.title(i, size=20, weight = 'bold', fontname = 'monospace')\n    \n    ## Setting up axis, labels, figure size\n    plt.yticks(fontname = 'monospace', size = 10)\n    plt.xticks(fontname = 'monospace', size = 10)\n    \n    plt.xlabel('')\n    plt.ylabel('')\n    \nplt.subplots_adjust(wspace = 0.3, hspace =0.2)\nplt.suptitle('Prefered Programming For The Professionals', \n             fontsize = 30, weight = 'bold',fontname = 'monospace')\nplt.show()    ","9f4ede93":"idle = ['JupyterLab', 'RStudio', 'Visual Studio', 'VSCode', 'PyCharm', 'Spyder', 'Notepad',\n        'Sublime Text', 'MATLAB', 'Jupyter Notebook']\n\nplt.subplots(figsize=(20,17))\njob = response['RegroupJobTitle'].unique()\nlength = len(job)\n\nfor i, j in itertools.zip_longest(job, range(length)):\n    plt.subplot((length\/2), 2, j+1)\n    data = response[(response['RegroupJobTitle'] == i) & (response['professional'] == 'Professional')]  \n\n    ide = []\n    cnt = []\n    for k in idle:\n        ide.append(k)\n        cnt.append(len(data[data['IDE'].str.contains(k)]))\n\n    df = pd.DataFrame(columns=[\"ide\", 'cnt'])\n    df['ide'] = ide\n    df['cnt'] = cnt\n    df = df.sort_values(by='cnt', ascending=False)\n    # Customize colors by index\n    ## List colors where you want to allocate\n    colors = ['#D79922', '#EFE2BA', '#F13C20','#4056A1','#C5CBE3','#EAE7DC',\n              '#D8C3A5','#8E8D8A','#E98074','#E85A4F','#F8E9A1']\n    ## Setting up colors by replacing index into allocated color\n    col_color = {}\n    for index, color in itertools.zip_longest(idle, colors):    \n        col_color = setting_colors(col_color, index, color)\n    color = pd.DataFrame(df)['ide'].replace(col_color)\n    \n    # barplot\n    sns.barplot(y='ide', x='cnt',data = df, palette = color, linewidth = 2, edgecolor = 'k')\n    plt.title(i, size=20, weight = 'bold', fontname = 'monospace')\n    \n    ## Setting up axis, labels, figure size\n    plt.yticks(fontname = 'monospace', size = 10)\n    plt.xticks(fontname = 'monospace', size = 10)\n    plt.xlabel('')\n    plt.ylabel('')\n  \n\nplt.subplots_adjust(wspace = 0.3, hspace =0.2)  \nplt.suptitle('Prefered IDE For The Professionals By Job Title', fontsize = 30, weight = 'bold',fontname = 'monospace')\nplt.show()","a387c8f4":"data_prof = response[response['professional'] == 'Professional'].copy()\nmedia_full = [\"Twitter (data science influencers)\", \"Email newsletters (Data Elixir, O'Reilly Data & AI, etc)\",\n             \"Reddit (r\/machinelearning, etc)\",\"Kaggle (notebooks, forums, etc)\",\n             \"Course Forums (forums.fast.ai, Coursera forums, etc)\", \n             \"YouTube (Kaggle YouTube, Cloud AI Adventures, etc)\",\n             \"Podcasts (Chai Time Data Science, O\u2019Reilly Data Show, etc)\",\n             \"Blogs (Towards Data Science, Analytics Vidhya, etc)\",\n             \"Journal Publications (peer-reviewed journals, conference proceedings, etc)\",\n             \"Slack Communities (ods.ai, kagglenoobs, etc)\",\"None\",\"Other\"\n             ]\n\nmedia = ['Twitter', 'Email newsletters', 'Reddit', 'Kaggle', 'Course Forums',\n        'YouTube','Podcasts','Blogs','Journal Publications', 'Slack', 'Other']\n\nplt.subplots(figsize=(20,17))\n\njob = response['RegroupJobTitle'].unique()\nlength = len(job)\n\nfor i, j in itertools.zip_longest(job, range(length)):\n    plt.subplot((length\/2), 2, j+1)\n    data = response[(response['RegroupJobTitle'] == i) & (response['professional'] == 'Professional')]  \n\n    med = []\n    cnt = []\n    for k in media:\n        med.append(k)\n        cnt.append(len(data[data['MediaSourceToLearn'].str.contains(k)]))\n\n    df = pd.DataFrame(columns=[\"Media\", 'cnt', 'pct'])\n    df['Media'] = med\n    df['cnt'] = cnt\n    df['pct'] = 100 * df['cnt'] \/ len(data)\n    \n    df = df.sort_values(by='pct', ascending=False)\n    # Customize colors by index\n    ## List colors where you want to allocate\n    colors = ['#D79922', '#EFE2BA', '#F13C20','#4056A1','#C5CBE3','#EAE7DC',\n              '#D8C3A5','#8E8D8A','#E98074','#E85A4F','#F8E9A1']\n    ## Setting up colors by replacing index into allocated color\n    col_color = {}\n    for index, color in itertools.zip_longest(media, colors):    \n        col_color = setting_colors(col_color, index, color)\n    color = pd.DataFrame(df)['Media'].replace(col_color)\n    \n    \n    \n    # barplot\n    sns.barplot(y='Media', x='pct',data = df, palette = color, linewidth = 2, edgecolor = 'k')\n    plt.title(i, size=20, weight = 'bold', fontname = 'monospace')\n    \n    ## Setting up axis, labels, figure size\n    plt.yticks(fontname = 'monospace', size = 12)\n    plt.xticks(np.arange(0, 70, step=10),fontname = 'monospace', size = 12)\n    plt.xlabel('Percentage', fontname = 'monospace', size = 15,  weight = 'bold')\n    plt.ylabel('')\n  \n\nplt.subplots_adjust(wspace = 0.3, hspace =0.2)  \nplt.suptitle('Media Source To Learn For The Professionals By Job Title', fontsize = 30, weight = 'bold',fontname = 'monospace')\nplt.show()","7c1969fa":"# grouping\nresponse.loc[response['Year_Compensation'] == '', 'compensation'] = '0'\nresponse.loc[response['Year_Compensation'] == '$0-999', 'compensation'] = '0-1k'\nresponse.loc[response['Year_Compensation'].isin(['1,000-1,999', '2,000-2,999', '3,000-3,999', '4,000-4,999', '5,000-7,499', '7,500-9,999']), 'compensation'] = '1k-10k'\nresponse.loc[response['Year_Compensation'].isin(['10,000-14,999', '15,000-19,999', '20,000-24,999', '25,000-29,999', '30,000-39,999',\n                                                 '40,000-49,999', '50,000-59,999', '60,000-69,999', '70,000-79,999', '80,000-89,999', '90,000-99,999']), 'compensation'] = '10k-100k'\nresponse.fillna('More than 100k', inplace=True)","3c0beae4":"fig, ax = plt.subplots(1, 2, figsize=(20, 10))\nindex = ['0', '0-1k', '1k-10k', '10k-100k', 'More than 100k']\n# Compensation by FormalEducation\ncompensation = pd.crosstab(response['FormalEducation'], response['compensation'])\ncompensation = compensation.T[['Before Bachelor', 'Bachelor', 'Master', 'Doctoral degree or Higher']].T\ncompensation = compensation[index]\ncompensation.plot.bar(stacked=True, figsize=(25,10), color=sns.color_palette('Blues'), linewidth = 2, edgecolor = 'k', ax=ax[0])\nax[0].set_title('Compensation by Formal Education', size=20, weight = 'bold', fontname = 'monospace')\n\n# Compensation by Graduate Degree\ncompensation = pd.crosstab(response['compensation'], response['FormalEducation2'])\ncompensation = compensation.T[index].T\ngroup_sizes = [sum(compensation['Graduate']), sum(compensation['Undergraduate or less'])]\ngroup_names = compensation.columns\na, b= [plt.cm.Blues, plt.cm.YlOrRd]\nsubgroup_names = ['0', '0-1k', '1k-10k', '10k-100k', 'More than 100k', '0', '0-1k', '1k-10k', '10k-100k', 'More than 100k']\nsubgroup_sizes = list(compensation['Graduate'].values)+list(compensation['Undergraduate or less'].values)\n\n# Compensation by FormalEducation\n## Outside Ring\nax[1].axis('equal')\npie_outside, _ = ax[1].pie(group_sizes, \n                        radius=1.3,  textprops={'fontsize': 18, 'color':'black'},\n                        labels=group_names, \n                        labeldistance=0.9,\n                        colors=[a(0.6), b(0.2)])\nplt.setp(pie_outside, width=0.3, edgecolor='white')\n## Inside Ring\npie_inside, plt_labels, junk =  ax[1].pie(subgroup_sizes, radius=(1.3 - 0.3),  labels=subgroup_names,\n                                       labeldistance=0.75, autopct='%1.1f%%', colors=[a(0.1), a(0.2), a(0.3), a(0.4), a(0.5),\n                                                                                      b(0.1), b(0.2), b(0.3), b(0.4), b(0.5)])\nplt.setp(pie_inside, width=0.3, edgecolor='black')\nplt.show()","43af5e1d":"# Compensation by Job Title\n\nfig, ax = plt.subplots(1, 4, figsize=(25, 15))\nexplode = [0.1, 0.1, 0, 0]\nwedgeprops={'width': 0.7, 'edgecolor': 'w', 'linewidth': 2}\nindex = ['0-1k', '1k-10k', '10k-100k', 'More than 100k']\n\ncompensation = pd.crosstab(response['RegroupJobTitle'], response['compensation'])\ncompensation = compensation[index] ## \uc21c\uc11c \uc815\ub82c\n\nfor i, j in enumerate(compensation.columns):\n    compensation[j].sort_values(ascending = False).plot.pie(autopct='%.0f%%', \n                                                              colors=['#FFD662','#00539C',\"gray\",'gray'], \n                                                              explode=explode, wedgeprops=wedgeprops, \n                                                              textprops={'fontsize': 15}, ax=ax[i], shadow = True)\n    ax[i].set_title(f'Compensation {j}', size=20, weight = 'bold', fontname = 'monospace')\nplt.show()","1f8ba429":"Unsurprisingly, **Data Engineer(DE)** are requiring **'Local Development Enviroments'** tool rather than 'Basic Statistical Software while **Data Analyst(DA) & Others** are exactly the opposite. The intersting part, though, is the fact that **those who want to be Data Scientist(DS) need to consider both 'Local Development Enviroments' and 'Basic Statistical Software'** having the same amount of responses.\n\nIn addition to the top two tools across job titles, **Data Analyst(DA)** needs to be familiar with **BI tools** as the third most requirements while **'Cloud-based data sofrware & APIs'** is followed for **Data Engineer (DE) & Data Scientist (DS)**.\n\nLet's get into the following question: **which IDE and programming language would be required by job titles?** ","8b9e5848":"- In general, **Data Scientist** tends to make more money than the others. \n\n- There are few compensation gabs between **Data Engineer** and **Data Analyst** when compensation level goes up.\n","af66a1d0":"## 3.8 Compensation","27ce4e2e":"## 3.7 Which Tools Would The Experienced Suggest?\n\nAs we are all job seeker, the team also would like to know what tools need to be familiar to get a job. Let's see what the experienced would suggest.","61bc8c17":"In general, **79.31% of respondants are men** while only **18.83% are women**. However, the proportion of women who has an interest in data-related job tends to get increased by 4% than the past.\n\n","085bd2dc":"# Reference\n- https:\/\/medium.com\/swlh\/how-to-create-a-seaborn-palette-that-highlights-maximum-value-f614aecd706b\n- https:\/\/stackoverflow.com\/questions\/61971090\/how-can-i-add-images-to-bars-in-axes-matplotlib","5de58bfe":"Obviously, most respondants are from either India or US. \n\nIndonesia and Bangladesh are listed in top 15 by Non-professional respondants where they are not listed in top 15 of professional respondants' country.\n\nAs the team members are all Korean, it is unfortunate not to see South Korea in top 15","c662270f":"# Libraries","d6a9899c":"### 3.3.1 Professional vs Non-professional By Country","16544958":"### 3.3.3 The Proportion of Respondants Across Continent","d21a75cd":"# What Makes Difference Between A Job Title - DA \/ DS \/ DE\n\n![kaggle_survey_image.png](attachment:kaggle_survey_image.png)\n\n# 0. Introduction \n### Coding and Data Analysis\n\nThese are the most trending words around the world and it has taken over the country. \n \nMany education-tech companies in Korea has started launching data-related courses and programs. Our team is also one of them who have a different background and are actively seeking a data-related job. However, it is pretty hard to decide which job title or role would fit due to unsettled definitions or roles among Data Scientist (DS), Data Anaylst(DA), and Data Engineer(DE) across industries.\n\nAs a job seeker, the team would like to at least grasp the approximate role or necessary skills to be one of them (DS, DA, DE, etc.).\n\nThis notebook will focus on questions that job seekers or beginners like us would be curious about data-related industry and we hope to gain much clearer comprehensive veiw of state of data-related jobs to be prepared.\n\n\nLet's dive into the survey!","64635517":"- Excluding 'OTHER', **DA** does not heavily require a programming language comparing to others.\n\n- If you are interested in either **DE** or **DS** job, they would like to expect you to be familiar with programming languages and tend to conduct coding test before job interview.","997968cc":"## 2.4 Rename Columns","c3fd58f3":"## 2.2 Regrouping Job Title: \n### DA (Data Analysist) vs DE (Data Engineering) vs DS (Data Scientist) vs Other\n\nAmong 15 different jop titles in survey, the team regroup them into four typical jobs DA, DE, DS and others to help out those who are interested in data-related job but have no idea which one would fit for themseleves\n\nHere is how we regroup:\n\n|Group | List of Job Title|\n|:--|:--|\n|DA (Data Analysist) | 'Business Analyst', 'Data Analyst', 'Product Manager', 'Program\/Project Manager', 'Statistician'\n| DE (Data Engineering) | 'Data Engineer', 'DBA\/Database Engineer', 'Machine Learning Engineer', 'Software Engineer', 'Developer Relations\/Advocacy'\n|DS (Data Scientist) | 'Data Scientist', 'Research Scientist'\n|Other |'Student', 'Currently not employed', 'Other'","c7d00492":"## 2.5 Regroup Education Level\n\n### 2.5.1 By 4 Standards: Before Bachelor vs Bachelor vs Master vs Doctoral or Higher\nHere is how we regroup *FormalEducation* column\n\n| Regroup Formal-Education Level | List of Formal Education Levels \n|:--|:--|\n|Before Bachelor | Some college\/university study without earning a bachelor\u2019s degree, No formal education past high school, I prefer not to answer\n|Bachelor|Bachelor\u2019s degree\n|Master |Master\u2019s degree \n|Doctoral degree or Higher | Doctoral degree, Professional doctorate\n","cc8924e0":"# 1. Import Dataset","d7bb4c4f":"## 3.4 Which Industry Across Job Title Would You Fit?","07612312":"## 3.6 Years to Code or Use Programming","8c7a4df7":"## 3.2 Gender","cb563b19":"# 3. Questions to answer\n\n## 3.1 Age","7c6a47d8":"- The top 2 Countries are taking the majority respondants, India and United States of America\n- Most of top 15 countries except for France seem to invest data industry so much that the number of students or people who are studying data and seeking relevant jobs gets increasing constantly.\n\nLet's see how DS, DA, DE, and Other are distributed across countries.","6186ed95":"- The most actively popular industries across job titles are **Computers\/Technoloy, Academics\/Education and Accounting\/Finance** \n\n- Unlike Data Analysis and Data Engineering, **Data Science** seems to focus more on **Academics\/Education** than the others\n\n- If you are interested in **Data Science** job, then it would require at least Master's degree since it has something to do with research. This will be covered later\n","438370d1":"#### Asia\n- The majority are from India(56.5%) followed by Japan(7.0%) and China(6.2%).\n- Korea is 6th rank when it come to the response amount\n\n#### America\n- USA takes 56.5% followed by Brazil(16%) and Canada(7.1%)\n\n#### Africa\n- Nigeria(34.1%) and Egypt(23.4%) takes more than half of repondants in Africa\n\n#### Europe\n- Unlike the other continents, Europe has well-balanced proportion","2813a984":"- **Python and SQL** are the most popular programming language across all job title\n\n- **R** is preferable to both **Data Science and Data Analysis** where statistics is one of necessary skills\n\n- Those who want to be a **Data Engineer** should be familiar with **Java Script, Java and C based language**\n\n## 3.7.1 Which IDE Would You Need By Job Title?","43a9787b":"It is obvious that the most professional respondants are distributed in both 25-29 and 30-34 age group while non-professionals are much younger. \n\nLet's see how different ages would be distributed by sub-category. (DS,DA, DE, Other)","17744fac":"### 2.5.2 By 2 Standard: Graduate vs Undergraduate or less\n\nNow the team regroup formal education level by the larger standards, **Graduate vs Undergraduate or less**\n\n| RegroupFormalEducation2 | List of Formal Education Levels \n|:--|:--|\n|Undergraduate or less | Before Bachelor, Bachelor\n|Graduate |Master,Doctoral degree or Higher \n\n","9a560a98":"This information would give a helpful insight for those who consider to get a bigdata-related job but have no idea if graduate-level degree is needed. \n\nAs the above represents, the answer for that question may vary by job title. \n\n- **Data Scientist (DS)**: The majority of respondants who work as DS has graudate-level degree\n- **Data Analyst (DA)**: About 58.2% of respondants who work as DA has graudate-level degree, well-balanced\n- **Data Engineer (DE)**: Degree does not matter for DE\n- **Other** : The number of respondants with undergraduate-level is a bit higher than peaple with higher-level degree\n\n\nTo sum up, data science industry tends to require graduate-level degree while the others does not seem to care. Most of people would think that the higher formal education level is, the better in this industry. However, it does not necessary to spend tremendous amount of your resources to acquire higher-level degree depedning on what you are pursuing. \n\nIf you are interested in either **DE** or **DS** job, they would like to expect you to be familiar with programming languages and tend to conduct coding test before job interview.\n\n**Thus, before making a decision whether to go to graudate school, please choose your path.**\n","9304d6b5":"- As **about 29% of respondants are Non-profession with either Bachelor's degree or before Bachelor's degree** followed by Master's degree, **majority of Non-professional respondants** tend to acquire at least Bachelor's degree. \n\n- Unlike Non-professional respondants, **about 28% of respondants are professionals with higher than bachelor's degree**.\n\n### 3.5.2 Is Graduate Degree Needed To Get A Job?\n\n","dd05aee8":"## 2.3 Professionals Vs Non-professionals\n\nBy definition of \"Non-professionals\" in '2021 Kaggle DS & ML Survey Final List of Questions' file,\n\n*Non-professionals* were defined as students, unemployed, and respondents that have\nnever spent any money in the cloud.\n\nAll supplement questions for non-professionals asked **what tools they hope to become familiar with in the next 2 years** instead of asking what tools they use on a regular basis.","2432046b":"# 4. Conclusion\n\n## 4.1 Demographics\n\n- The most professional respondants are distributed in both 25-29 and 30-34 age group \n- While most of people in ML\/DL industry are men, the proportion of women gets slowly increasing.\n- Most of respondants are from either India or US. \n- Indonesia and Bangladesh are listed in top 15 by Non-professional respondants where they are not listed in top 15 of professional respondants' country.\n\n#### Asia\n- The majority are from India(56.5%) followed by Japan(7.0%) and China(6.2%).\n- Korea is 6th rank when it come to the response amount\n\n#### America\n- USA takes 56.5% followed by Brazil(16%) and Canada(7.1%)\n\n#### Africa\n- Nigeria(34.1%) and Egypt(23.4%) takes more than half of repondants in Africa\n\n#### Europe\n- Unlike the other continents, Europe has well-balanced proportion\n\n## 4.2 DS vs DA vs DE\n\n**Data Scientist (DS)**... \n- would require **higher formal education level at least Master's degree**\n- is the most popular job\n- is more distributed in **Academics\/Education** industry than DA and DE\n- needs to be failiar with **Python, SQL, R**\n- tends to obtain knoweldges from **Journal Publication**\n- require **'Local Development Enviroments'**, **'Basic Statistical Software'** and **'Cloud-based data sofrware & APIs'**\n\n**Data Analyst (DA)**:\n- would not necessarily require higher education level but , 50\/50 ratio\n- is widely distributed in **Computers\/Technoloy, Academics\/Education and Accounting\/Finance** \n- does not heavily require a programming language comparing the others\n- needs to be failiar with **Python, SQL, R**\n- tends to obtain knoweldges from **Twitter or Email newsletter**\n- require **'Basic Statistical Software'** and **BI tools**\n\n**Data Engineer (DE)**: \n- Degree does not matter. Most of people working as Data Engineer has undergraduate level.\n- is widely distributed in **Computers\/Technoloy, Academics\/Education and Accounting\/Finance** \n- needs to be failiar with **Python, SQL, Java\/Java Script**\n- tends to obtain knoweldges from **Twitter or Email newsletter**\n- require **'Local Development Enviroments'** and **'Cloud-based data sofrware & APIs'**\n\n\n**Common Things**\n- IDE Tool: Jupyter Notebook and Visual Studio\n- Programming Language: Python and SQL\n- Media to Learn: Kaggle, YouTube, Blogs\n","50d5fc26":"# 2. Feature Engineering and Data Wrangling","4ec6b312":"The above graph simply shows preferrable or popular jobs by each job title categories. \n\nIt turns out that **data scientists** dominates over the others followed by both **software engineer and data analyst**. \n\n\n## 3.3 Country","6d732ccb":"## <center> We hope this analysis would help you guide what to start for your new journey. <br>\n\n## <center> If you like our work or have any questions, <br><br> please leave a comment and give it a like \n\n## <center> Thanks for your attention","d21b163b":"## 2.1 Combining all relevant features\n   \nAt the first glance, the team recognizes that some features come from a single multiple-choice question. Thus, we decide to combine all relavent features into one feature.\n","a645a2dd":"## 3.5 Education\n\n### 3.5.1 How Much Different Would Education Background Be Across  Professional Status?\n\n","3a7722c6":"## 3.7.1 Programming Language To Use In Regular Basis\n\nThe team also explore how different languages to be prefered by job title. \n\n### List of Programming Language\n- Python\n- R\n- SQL\n- C\n- C++\n- Java\n- Javascript\n- Julia\n- Swift\n- Bash\n- MATLAB\n- None\n- Other"}}