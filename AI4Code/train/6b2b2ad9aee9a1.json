{"cell_type":{"de960f95":"code","e13e186e":"code","74b91227":"code","d5adb561":"code","7559a8ea":"code","a6817f9b":"code","1e39cbb4":"code","6a0be83e":"code","0f691ffd":"code","edb0ca0f":"code","9d99ac5f":"code","61d22e61":"code","d2d616e9":"code","dcabb655":"code","b5d3d52c":"code","e44feccc":"code","b15b397e":"code","44769384":"code","47612b4f":"code","2d7c2990":"code","fddced5c":"code","6d0563c8":"code","0575fc0e":"code","6442fac4":"code","eceade2d":"code","8e456f2e":"code","3cb9bdc1":"code","a063cf74":"code","b6c3ee91":"code","fcf860da":"markdown","c78b6cfc":"markdown","f5009dfc":"markdown","bbb20e07":"markdown","7f2b243c":"markdown","7cff05ce":"markdown","a50fd068":"markdown","00770fea":"markdown"},"source":{"de960f95":"#M\u00f3dulos\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\n#Estilo seaborn\nsns.set_style(style=\"darkgrid\")\n\n","e13e186e":"arquivo_test = \"\/kaggle\/input\/hackerearth\/Test.csv\"\narquivo_train = \"\/kaggle\/input\/hackerearth\/Train.csv\"\narquivo = \"\/kaggle\/input\/hackerearth\/sample_submission.csv\"\n\ndf = pd.read_csv(arquivo_train)\ndf.head()","74b91227":"df.shape","d5adb561":"df.info()","7559a8ea":"df.isnull().sum()","a6817f9b":"correlacao = df.corr()\nmask = np.zeros_like(correlacao)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    \n    f, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(correlacao,center=0,cmap=\"coolwarm\",mask=mask)","1e39cbb4":"ax = plt.subplots(figsize=(10, 8))\nfig = sns.boxplot(x=\"Education_Level\", y=\"Age\", hue=\"Gender\",\n                 data=df, linewidth=2.5)\n","6a0be83e":"def insert_age(cols):\n    Idade = cols[0]\n    Education = cols[1]\n    Sexo = cols[2]\n    if (pd.isnull(Idade)&(Sexo == \"F\")):\n        if (Education == 1):\n            return (df[(df.Education_Level == 1)&(df.Gender == \"F\")][\"Age\"].median())\n        elif Education == 2:\n            return (df[(df.Education_Level == 2)&(df.Gender == \"F\")][\"Age\"].median())\n        elif Education == 3:\n            return (df[(df.Education_Level == 3)&(df.Gender == \"F\")][\"Age\"].median())\n        elif Education == 4:\n            return (df[(df.Education_Level == 4)&(df.Gender == \"F\")][\"Age\"].median())\n        elif Education == 5:\n            return (df[(df.Education_Level == 5)&(df.Gender == \"F\")][\"Age\"].median())\n    elif (pd.isnull(Idade)&(Sexo == \"M\")):\n        if (Education == 1):\n            return (df[(df.Education_Level == 1)&(df.Gender == \"M\")][\"Age\"].median())\n        elif Education == 2:\n            return (df[(df.Education_Level == 2)&(df.Gender == \"M\")][\"Age\"].median())\n        elif Education == 3:\n            return (df[(df.Education_Level == 3)&(df.Gender == \"M\")][\"Age\"].median())\n        elif Education == 4:\n            return (df[(df.Education_Level == 4)&(df.Gender == \"M\")][\"Age\"].median())\n        elif Education == 5:\n            return (df[(df.Education_Level == 5)&(df.Gender == \"M\")][\"Age\"].median())\n    else:\n        return Idade\n            \ncolunas = [\"Age\",\"Education_Level\",\"Gender\"]\ndf[\"Idade\"] = df[colunas].apply(insert_age, axis = 1)\ndf.drop([\"Age\"],axis=1,inplace=True)","0f691ffd":"df.isnull().sum()","edb0ca0f":"print(df.Time_since_promotion.unique())","9d99ac5f":"def insert_time_service(cols):\n    Time = cols[0]\n    Promocao = cols[1]\n    Sexo = cols[2]\n    if (pd.isnull(Time)&(Sexo == \"F\")):\n        if (Promocao == 0):\n            return (df[(df.Time_since_promotion == 0)&(df.Gender == \"F\")][\"Time_of_service\"].median())\n        elif Promocao == 1:\n            return (df[(df.Time_since_promotion == 1)&(df.Gender == \"F\")][\"Time_of_service\"].median())\n        elif Promocao == 2:\n            return (df[(df.Time_since_promotion == 2)&(df.Gender == \"F\")][\"Time_of_service\"].median())\n        elif Promocao == 3:\n            return (df[(df.Time_since_promotion == 3)&(df.Gender == \"F\")][\"Time_of_service\"].median())\n        elif Promocao == 4:\n            return (df[(df.Time_since_promotion == 4)&(df.Gender == \"F\")][\"Time_of_service\"].median())\n    elif (pd.isnull(Time)&(Sexo == \"M\")):\n        if (Promocao == 0):\n            return (df[(df.Time_since_promotion == 0)&(df.Gender == \"M\")][\"Time_of_service\"].median())\n        elif Promocao == 1:\n            return (df[(df.Time_since_promotion == 1)&(df.Gender == \"M\")][\"Time_of_service\"].median())\n        elif Promocao == 2:\n            return (df[(df.Time_since_promotion == 2)&(df.Gender == \"M\")][\"Time_of_service\"].median())\n        elif Promocao == 3:\n            return (df[(df.Time_since_promotion == 3)&(df.Gender == \"M\")][\"Time_of_service\"].median())\n        elif Promocao == 4:\n            return (df[(df.Time_since_promotion == 4)&(df.Gender == \"M\")][\"Time_of_service\"].median())\n    else:\n        return Time\n            \ncolunas = [\"Time_of_service\",\"Time_since_promotion\",\"Gender\"]\ndf[\"Tempo_servico\"] = df[colunas].apply(insert_time_service, axis = 1)\ndf.drop([\"Time_of_service\"],axis=1,inplace=True)","61d22e61":"df.isnull().sum()","d2d616e9":"ax = plt.figure(figsize=(12,8))\nplt.subplot(1,2,1)\nsns.countplot(df.VAR2)\nplt.subplot(1,2,2)\nsns.countplot(df.VAR4)\nplt.suptitle('Antes de aplicar a Mediana sobre os NaN', fontsize=20)\n\n","dcabb655":"df[\"VAR2\"]=df[\"VAR2\"].fillna(df['VAR2'].median())\ndf[\"VAR4\"]=df[\"VAR4\"].fillna(df['VAR4'].median())","b5d3d52c":"ax = plt.figure(figsize=(12,8))\nplt.subplot(1,2,1)\nsns.countplot(df.VAR2)\nplt.subplot(1,2,2)\nsns.countplot(df.VAR4)\nplt.suptitle('Depois de aplicar a Mediana sobre os NaN', fontsize=20)","e44feccc":"df[\"Work_Life_balance\"]=df[\"Work_Life_balance\"].fillna(df[\"Work_Life_balance\"].median())\ndf[\"Pay_Scale\"]=df[\"Pay_Scale\"].fillna(df[\"Pay_Scale\"].median())","b15b397e":"df.isnull().sum()","44769384":"#Transforma\u00e7\u00e3o em numeros as classifica\u00e7oes em Strings\n\nGender_new = pd.get_dummies(df.Gender,drop_first = True)\nRelationship_Status_new = pd.get_dummies(df.Relationship_Status, drop_first = True)\nHometown_new = pd.get_dummies(df.Hometown, drop_first = True)\nUnit_new = pd.get_dummies(df.Unit, drop_first = True)\nDecision_skill_possess_new = pd.get_dummies(df.Decision_skill_possess, drop_first = True)\nCompensation_and_Benefits_new = pd.get_dummies(df.Compensation_and_Benefits, drop_first = True)\n\n#Remover do df as colunas antigas do tipo object\ncolunas = [\"Gender\",\"Relationship_Status\",\"Hometown\",\"Unit\",\"Decision_skill_possess\",\"Compensation_and_Benefits\"]\n\ndf.drop(colunas,axis=1,inplace=True)\n","47612b4f":"df.drop(\"Employee_ID\",axis=1,inplace=True)","2d7c2990":"colunas_new = [df,Gender_new,Relationship_Status_new,Hometown_new,Unit_new,Decision_skill_possess_new,Compensation_and_Benefits_new]\ndf_new = pd.concat(colunas_new, axis=1)\ndf_new.head()","fddced5c":"df_new.info()","6d0563c8":"\ncorrelacao_new = df_new.corr()\nmask_new= np.zeros_like(correlacao_new)\nmask_new[np.triu_indices_from(mask_new)] = True\nwith sns.axes_style(\"white\"):\n    \n    f, ax = plt.subplots(figsize=(12, 10))\n    sns.heatmap(correlacao_new,center=0,cmap=\"coolwarm\",mask=mask_new)\n    plt.suptitle('Mapa de correla\u00e7\u00e3o entre as vari\u00e1veis', fontsize=20)","0575fc0e":"df_X = df_new.drop(\"Attrition_rate\",axis =1)\ndf_Y = df_new[\"Attrition_rate\"]\n\n#Transformando em array os valores X e Y\nX = df_X.values\nY = df_Y.values","6442fac4":"#modelo = ExtraTreesClassifier()\n#modelo.fit(X,Y)","eceade2d":"ax = plt.figure(figsize=(12,8))\nsns.distplot(df_Y)\nplt.suptitle('Distribui\u00e7\u00e3o de dados da vari\u00e1vel \"Attrition_rate\"', fontsize=20)","8e456f2e":"#Divis\u00e3o dos dados de treino, para testar a acur\u00e1cia\n\nSEED = 1111 #Valor para manter a reprodutibilidade\n\nX_train,X_test ,y_train,y_test = train_test_split(X,Y,test_size=0.20,random_state=SEED)\n\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))","3cb9bdc1":"from sklearn.linear_model import PoissonRegressor\n\nmodelo = PoissonRegressor()\nmodelo.fit(X_train,y_train)\n","a063cf74":"y_pred = modelo.predict(X_test)\n\n\ndef rmse(y_test,y_pred):\n      return np.sqrt(mean_squared_error(y_test,y_pred))\n    \nprint(\"Pontua\u00e7\u00e3o da Regressao de Poisson nos dados de test: \", rmse(y_test, y_pred))\n","b6c3ee91":"Score = 100 * max(0 , 1 - rmse(y_test, y_pred))\nprint(\"Acur\u00e1cia do modelo %.2f %%\" % Score)","fcf860da":"# Resultado RMSE","c78b6cfc":"Remover a coluna Employee_ID, pois a mesma n\u00e3o serve para realizar nenhuma predi\u00e7\u00e3o sobre os dados.","f5009dfc":"Agora que n\u00e3o existe nenhum dado NaN, ser\u00e1 alterado os dados do tipo objeto para tipo inteiro, para melhorar a acur\u00e1cia do modelo futuramente.","bbb20e07":"Essa curva se aproxima bem de uma distribui\u00e7\u00e3o de Poisson, com lambda pr\u00f3ximo do valor oito","7f2b243c":"Unir o df antigo com os novos dados convertidos.","7cff05ce":"## Este modelo obteve uma acur\u00e1cia de 82.44%.\n## Sera realizado nas pr\u00f3ximas vers\u00f5es a utiliza\u00e7\u00e3o do Cross-Validation, XGboost e Normaliza\u00e7\u00e3o sobre a escala de valores; Todos esses  atrib\u00fatos citados interferem sobre o resultado final de forma positiva. ","a50fd068":"# Prepara\u00e7\u00e3o dos dados","00770fea":"# Modelo de Machine Learning"}}