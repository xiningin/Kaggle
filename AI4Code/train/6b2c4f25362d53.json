{"cell_type":{"1cb64e13":"code","1f8e94d1":"code","e6cf42f7":"code","e3ea9d80":"code","2bccd996":"code","9166a745":"code","c854a6d1":"code","a78a4b43":"code","2fd9682b":"code","c7ebb257":"code","299d3280":"code","78565cf8":"code","fa1c0e95":"code","cfef5940":"code","0abb768a":"code","b39ce81d":"code","06a6cb13":"code","c7e68c7b":"code","47276153":"code","eb60ccb2":"code","c319d907":"code","d7ab7894":"code","cc9527d7":"code","da599e6b":"code","a286c75b":"code","58154179":"code","d2485ba0":"code","0c3c266c":"code","01daa660":"code","78defaaa":"code","f04a4c34":"code","7a678219":"code","1d331291":"code","0435c678":"code","636d9c69":"code","f266cec5":"code","9a5019aa":"code","eea38832":"code","36434c28":"code","b891739d":"code","c00e8818":"code","1afbb6c4":"code","571c0589":"code","024070f3":"code","9760915f":"code","3dacbf83":"code","8854b12b":"code","17c48528":"code","0c1e9319":"code","314dc289":"code","3a60a88a":"code","00664eb8":"code","7a089e02":"code","90eda800":"code","cbb237d5":"code","4931af11":"code","dc63965a":"code","3f0b6e9c":"code","7b4c93e9":"code","8753005e":"code","0f073c85":"code","e417fe59":"code","9ec2d743":"code","093a7e10":"code","e8c51465":"code","39aff2cf":"code","3ea0ff88":"code","f571e444":"code","2783776d":"code","77c967d1":"code","902de1da":"code","95a27650":"code","22c66acd":"code","2e8dfcb7":"code","e7188a88":"code","3dc66983":"code","2a9756aa":"code","f7f863de":"code","1acc5b1f":"code","e322003e":"code","e0c7a697":"code","2f6e1263":"code","bcfb4937":"code","9b365796":"code","be5962eb":"code","149400bc":"code","c1cc38a9":"markdown","d79e97f2":"markdown","fd0c1955":"markdown","8c05c020":"markdown","98d45135":"markdown","107e604b":"markdown","57f1c4db":"markdown","984d2dc4":"markdown","9accd372":"markdown","0023469b":"markdown","909b47df":"markdown","d3a8eb5d":"markdown","8387c904":"markdown","9543464b":"markdown","e52abb94":"markdown","abb320cd":"markdown","e13b0ed8":"markdown","c008918e":"markdown","b14d979c":"markdown","e41c40ff":"markdown","72a7bf82":"markdown","314a1a35":"markdown","caf6c3ef":"markdown","3e9a43a4":"markdown","aba6ff66":"markdown","021edba6":"markdown","660c6f2c":"markdown","ab74be22":"markdown","ea6aa6d9":"markdown","f2ae5e79":"markdown","a01cfae0":"markdown","d6aa1827":"markdown","06e2157d":"markdown","293ad035":"markdown","deee4215":"markdown","d6f70933":"markdown","a6452718":"markdown","e87dbf21":"markdown","9788672e":"markdown","d857cf27":"markdown","74923fa3":"markdown","aa267066":"markdown","1b988c6b":"markdown","7dbcbe11":"markdown","a920e97d":"markdown","59764d7c":"markdown","9e561b87":"markdown"},"source":{"1cb64e13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f8e94d1":"train_df =pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\ntest_PassengersId =test_df[\"PassengerId\"]","e6cf42f7":"train_df.columns","e3ea9d80":"train_df.head()","2bccd996":"train_df.describe()","9166a745":"train_df.info()","c854a6d1":"def bar_plot(variable):\n    \"\"\"\n        input : variable ex: \"sex\"\n        output bar plot & value count\n\"\"\"\n    # get feature\n    var =train_df[variable]\n    #count number of categorical variable\n    varValue =var.value_counts()\n    \n    #visualize\n    plt.figure(figsize =(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index , varValue.index.values)\n    plt.ylabel(\"Frequancy\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n{}\".format(variable,varValue))\n    ","a78a4b43":"category1=[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","2fd9682b":"category2 =[\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{}\\n\".format(train_df[c].value_counts()))","c7ebb257":"def hist_plot(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable],bins=60)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","299d3280":"numerical_Var=[\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numerical_Var:\n    hist_plot(n)","78565cf8":"# Pclass - Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","fa1c0e95":"#Sex - Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","cfef5940":"# SibSp - Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","0abb768a":"# Parch - Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","b39ce81d":"\ndef detect_outliers(df,features):\n    outlier_indices = []\n    for c in features:\n        # 1st quartile\n        Q1= np.percentile(df[c],25)\n        # 3rd quartile\n        Q3= np.percentile(df[c],75)\n        # IQR \n        IQR = Q3 - Q1\n        # Outlier Step\n        outlier_step = IQR * 1.5\n        # detect outlier and therin indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    \n    multiple_outliers = list(i for i, v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers","06a6cb13":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","c7e68c7b":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","47276153":"train_df_len=len(train_df)\ntrain_df =pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","eb60ccb2":"train_df.head()","c319d907":"train_df.columns[train_df.isnull().any()]","d7ab7894":"train_df.isnull().sum()","cc9527d7":"train_df[train_df[\"Embarked\"].isnull()]","da599e6b":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","a286c75b":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","58154179":"train_df[train_df[\"Fare\"].isnull()]","d2485ba0":"np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]) ","0c3c266c":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]) )\ntrain_df[train_df[\"Fare\"].isnull()]","01daa660":"list1 = [\"SibSp\",\"Parch\" ,\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot =True,fmt =\".2f\")\nplt.show()","78defaaa":"g = sns.factorplot(x =\"SibSp\",y =\"Survived\",data =train_df, kind = \"bar\", size =5)\ng.set_ylabels(\"Survived probability\")\ng.set_xlabels(\"SibSp\")\n\nplt.show()","f04a4c34":"g = sns.factorplot(x =\"Parch\",y =\"Survived\",data =train_df, kind = \"bar\", size =5)\ng.set_ylabels(\"Survived probability\")\ng.set_xlabels(\"Parch\")\n\nplt.show()","7a678219":"g = sns.factorplot(x =\"Pclass\",y =\"Survived\",data =train_df, kind = \"bar\", size =5)\ng.set_ylabels(\"Survived probability\")\ng.set_xlabels(\"Pclass\")\n\nplt.show()","1d331291":"g = sns.FacetGrid(train_df,col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins =25)\nplt.show()\n","0435c678":"g = sns.FacetGrid(train_df,col=\"Survived\",row=\"Pclass\",size=3)\ng.map(plt.hist,\"Age\",bins =25)\ng.add_legend()\nplt.show()\n","636d9c69":"g = sns.FacetGrid(train_df,row=\"Embarked\",size=3)\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\",bins =25)\ng.add_legend()\nplt.show()","f266cec5":"g = sns.FacetGrid(train_df,col=\"Survived\",row=\"Embarked\",size=3)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","9a5019aa":"train_df[train_df[\"Age\"].isnull()]","eea38832":"sns.factorplot(x=\"Sex\",y=\"Age\",data=train_df , kind =\"box\")\nplt.show()","36434c28":"sns.factorplot(x=\"Sex\",y=\"Age\",hue=\"Pclass\",data=train_df , kind =\"box\")\nplt.show()","b891739d":"sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df , kind =\"box\")\n\nsns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df , kind =\"box\")\nplt.show()","c00e8818":"train_df[\"Sex\"] =[1 if i ==\"male\" else 0 for i in train_df[\"Sex\"]]","1afbb6c4":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"Parch\",\"SibSp\",\"Pclass\"]].corr() , annot=True)\nplt.show()","571c0589":"index_nan_age =list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred =train_df[\"Age\"][((train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]) & (train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n\n    else :\n        train_df[\"Age\"].iloc[i] = age_med\n    ","024070f3":"train_df[train_df[\"Age\"].isnull()]","9760915f":"train_df[\"Name\"].head(10)","3dacbf83":"name =train_df.Name\ntrain_df[\"Title\"]=[i.split(\".\")[0].split(\",\")[-1].strip() for i in name]\ntrain_df.Title.head(10)","8854b12b":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation = 60)\nplt.show()","17c48528":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","0c1e9319":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks()\nplt.show()","314dc289":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","3a60a88a":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)\ntrain_df.head()","00664eb8":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","7a089e02":"train_df.head()","90eda800":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"]+1","cbb237d5":"train_df.head()","4931af11":"g =sns.factorplot(x=\"Fsize\" , y =\"Survived\", data=train_df , kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","dc63965a":"train_df[\"Family_Size\"] = [1 if i<5 else 0 for i in train_df.Fsize]","3f0b6e9c":"train_df.head()","7b4c93e9":"g = sns.countplot(x = \"Family_Size\" ,data = train_df)\nplt.show()","8753005e":"g =sns.factorplot(x=\"Family_Size\" , y =\"Survived\", data=train_df , kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","0f073c85":"train_df = pd.get_dummies(train_df, columns= [\"Family_Size\"])\ntrain_df.head()","e417fe59":"train_df[\"Embarked\"].head()","9ec2d743":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","093a7e10":"train_df = pd.get_dummies(train_df, columns= [\"Embarked\"])\ntrain_df.head()","e8c51465":"train_df[\"Ticket\"].head(20)","39aff2cf":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","3ea0ff88":"train_df[\"Ticket\"].head(20)","f571e444":"train_df.head()","2783776d":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","77c967d1":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","902de1da":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","95a27650":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","22c66acd":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)\ntrain_df.columns\n","2e8dfcb7":"train_df","e7188a88":"from sklearn.model_selection import train_test_split , StratifiedKFold , GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier , VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\n","3dc66983":"train_df_len","2a9756aa":"test =train_df[train_df_len :]\ntest.drop(labels=[\"Survived\"],axis=1,inplace= True)","f7f863de":"test.head()","1acc5b1f":"train =train_df[:train_df_len]\nx_train =train.drop(labels=\"Survived\",axis=1)\ny_train =train[\"Survived\"]\nx_train, x_test, y_train,y_test =train_test_split(x_train,y_train,test_size=0.30,random_state=42)\nprint(\"x_train : \",len(x_train))\nprint(\"x_test\",len(x_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","e322003e":"\nlog_Reg =LogisticRegression(solver='liblinear')\nlog_Reg.fit(x_train,y_train)\nacc_log_train =log_Reg.score(x_train, y_train)\nacc_log_test =log_Reg.score(x_test, y_test)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","e0c7a697":"random_state=42\nclassifier=[DecisionTreeClassifier(random_state=random_state),\n           SVC(random_state=random_state),\n           RandomForestClassifier(random_state=random_state),\n           LogisticRegression(random_state=random_state),\n           KNeighborsClassifier()]\n\ndt_param_grid ={\"min_samples_split\":range(10,500,20),\n               \"max_depth\":range(1,20,2)}\nsvc_param_grid={\"kernel\":[\"rbf\"],\n               \"gamma\":[0.001,0.01,0.1,1],\n               \"C\":[1,10,50,100,200,300,1000]}\nrf_param_grid={\"max_features\":[1,3,10],\n              \"min_samples_split\":[2,3,10],\n              \"min_samples_leaf\":[1,3,10],\n              \"bootstrap\":[False],\n              \"n_estimators\":[100,300],\n              \"criterion\":[\"gini\"]}\nlogreg_param_grid={\"C\":np.logspace(-3,3,7),\n                  \"penalty\":[\"l1\",\"l2\"]}\nknn_param_grid={\"n_neighbors\":np.linspace(1,19,10,dtype=int).tolist(),\n               \"weights\":[\"uniform\",\"distance\"],\n               \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param=[dt_param_grid,\n                  svc_param_grid,\n                  rf_param_grid,\n                  logreg_param_grid,\n                  knn_param_grid]\n","2f6e1263":"cv_result=[]\nbest_estimators=[]\nfor i in range(len(classifier)):\n    clf =GridSearchCV(classifier[i],param_grid=[classifier_param[i]],\n                     cv=StratifiedKFold(n_splits=10),scoring=\"accuracy\",\n                      n_jobs=-1,verbose=1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","bcfb4937":"cv_results=pd.DataFrame({\"Cross Validation Means\":cv_result,\"ML Models\": [\"DecisionTreeClassifier\",\n           \"SVC\",\n           \"RandomForestClassifier\",\n           \"LogisticRegression\",\n           \"KNeighborsClassifier\"]})\ng=sns.barplot(\"Cross Validation Means\",\"ML Models\",data =cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","9b365796":"votingC=VotingClassifier(estimators=[(\"dt\",best_estimators[0]),(\"rfc\",best_estimators[2]),\n                                      (\"lr\",best_estimators[3])],voting=\"soft\",n_jobs=-1)","be5962eb":"votingC =votingC.fit(x_train,y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","149400bc":"test_survived =pd.Series(votingC.predict(test),name =\"Survived\").astype(int)\nresults =pd.concat([test_PassengersId,test_survived],axis=1)\nresults.to_csv(\"titanic.csv\",index=False)","c1cc38a9":"<a id =\"19\"> <\/a><br>\n\n## Embarked --Sex --Fare --  Survived","d79e97f2":"<a id = \"33\"><\/a><br>\n## Ensemble Modelling","fd0c1955":"* Female Passengers have much better survival rate than Male passengers\n* males have better survival rate in pclass 3 in C\n* Embarked and sex will be used in training","8c05c020":"<a id =\"1\"> <\/a><br>\n# Load and Check Data\n","98d45135":"<a id =\"24\"> <\/a><br>\n## Embarked","107e604b":"* Pclass is important feature for model training","57f1c4db":"* Passengers who pay higher fare have better survival.Fare can be used as categorical for training ","984d2dc4":"* small families have big change to survive than large families","9accd372":"<a id=\"12\"><\/a><br>\n## Colleration Between Sibsp -- Parch -- Age -- Fare -- Survived","0023469b":"* Age is not correlated with sex but it is correlated with parch,sibsp and pclass","909b47df":"<a id =\"14\"> <\/a><br>\n#  Parch --  Survived","d3a8eb5d":"<a id = \"7\"><\/a><br>\n# Outlier Detection","8387c904":"# Introduction\n\nThe sinking of Titanic is one of the most notorious shipwrecks in the history.In 1912 during her voyage , the titanic sank after colliding with an iceberg . Killing 1502 out of 2224 passengers and crew \n\n<font color =\"green\">\nContent : \n\n1. [Load and Check Data](#1)   \n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Colleration Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [Sibsp --  Survived](#13)\n    * [Parch --  Survived](#14)\n    * [Pclass --  Survived](#15)\n    * [Age --  Survived](#16)\n    * [Pclass --Age --  Survived](#17)\n    * [Embarked --Pclass --Sex --  Survived](#18)\n    * [Embarked --Sex --Fare --  Survived](#19)\n    * [Fill missing Age Feature](#20)\n7. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [PassengerId and Cabin](#28)\n8. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32) \n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","9543464b":"<a id =\"16\"> <\/a><br>\n# Age -- Survived","e52abb94":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n\nWe will ccompare 5 ml classifier and evaluate mean accuracy of each of them by Stratified cross validation\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","abb320cd":"* Sibsp and parch can be used for new feature extraction with th = 3\n* small families have more change to survive\n* there is a std in survival of passenger with parch = 3","e13b0ed8":"<a id =\"15\"> <\/a><br>\n#  Pclass --  Survived","c008918e":"<a id =\"18\"> <\/a><br>\n## Embarked --Pclass --Sex --  Survived\n\n","b14d979c":"<a id=\"5\"> <a\/><br>\n## Numerical Variable","e41c40ff":"Fare feature seems to have colleration with survived feature (0.26)","72a7bf82":"<a id = \"30\"><\/a><br>\n## Simple Logistic Regression","314a1a35":"<a id =\"21\"> <\/a><br>\n\n# Feature Engineering","caf6c3ef":"<a id =\"9\"><\/a><br>\n## Find Missing Value","3e9a43a4":"<a id =\"20\"> <\/a><br>\n\n# Fill missing Age Feature","aba6ff66":"* float64(2): Fare and age\n* int64(5) : Pclass , sibsp , parch , passengerId and survived\n* object(5) : Name ,cabin , embarked , ticked and sex","021edba6":"<a id = \"34\"><\/a><br>\n## Prediction And Submission","660c6f2c":"<a id =\"17\"> <\/a><br>\n## Pclass --Age --  Survived\n    ","ab74be22":"<a id=\"2\"> <\/a><br>\n# Variable Description\n1. PassengerId : Unique id number to each passenger\n1. Survived : passenger survive(1) or died(0)\n1. Pclass : passenger class\n1. Name : name\n1. Sex : gender of passenger\n1. Age : age of passenger\n1. SibSp : number of siblings\/spouses\n1. Parch : number of parents\/children\n1. Ticket : ticket number\n1. Fare : amount of many spent on ticket\n1. Cabin : cabin category\n1. Embarked : port where passenger embarked (C = Cherbourg , Q = Queenstown , S = Southampton)\n","ea6aa6d9":"<a id = \"29\"><\/a><br>\n# Modeling","f2ae5e79":"<a id = \"27\"><\/a><br>\n## Sex","a01cfae0":"* 1st class passengers are older than 2nd and 2nd class passengers older than 3rd class passengers","d6aa1827":"<a id =\"25\"> <\/a><br>\n## Ticket","06e2157d":"<a id =\"22\"> <\/a><br>\n## Name -- Title","293ad035":"<a id = \"26\"><\/a><br>\n## Pclass","deee4215":"<a id=\"11\"><\/a><br>\n# Visualization","d6f70933":"<a id=\"4\"> <a\/><br>\n## Categorical Variable ","a6452718":"<a id = \"28\"><\/a><br>\n## Drop Passenger ID and Cabin ","e87dbf21":" * Having a lot of SibSp have less change to survive\n * if sibsp == 0 or 1 or 1  , passengers has more chance to survive\n * we can consider a new feature describing these categories","9788672e":"<a id =\"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has 1 missing value","d857cf27":"<a id =\"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value\n","74923fa3":"<a id =\"23\"> <\/a><br>\n## Family Size","aa267066":"<a id=\"3\"> <a\/><br>\n# Univariate Variable Analysis\n* Categorical Variable : Survived , Sex, Pclass, Embarked, Cabin, Name, Ticked, Sibsp and Parch\n* Numerical Variable : Fare, age and passengerId","1b988c6b":"* age <=10  has a high survival rate \n* oldest passengers  (80)  survived\n* large number of 20 years old did not survive\n* most passengers are in 15-35 age range\n* use age feature in training \n* use age distribution for missing value of age ","7dbcbe11":"<a id =\"13\"> <\/a><br>\n#  SibSp --  Survived","a920e97d":"* Sex is not informative for age prediction , age distribution seems to be same","59764d7c":"<a id=\"6\"> <\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","9e561b87":"<a id = \"30\"><\/a><br>\n## Train - Test - Split"}}