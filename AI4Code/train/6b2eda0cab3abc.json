{"cell_type":{"71ab3fe5":"code","dd83b2f9":"code","add6c53e":"code","d13bba96":"code","55cddc22":"code","2f9146bf":"code","e1d4fd0c":"code","80e2f40c":"code","a49e9e2f":"code","be6cdc79":"code","4de95959":"code","ec34dc58":"markdown","9b964d4e":"markdown","8813563e":"markdown"},"source":{"71ab3fe5":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, Lambda, AveragePooling2D\nfrom keras.layers import Dense, Dropout, Flatten \nfrom keras.layers.normalization import BatchNormalization\n\nimport os\nprint(os.listdir('..\/input\/digit-recognizer'))","dd83b2f9":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\n\nprint(train.shape, test.shape)","add6c53e":"X_train = train.drop(columns=['label']).values\ny_train = train.label.values\n\nX_test = test.values","d13bba96":"X_train = X_train \/ 255.0\nX_test = X_test \/ 255.0","55cddc22":"X_train = X_train.reshape(-1,28,28,1)\nX_test = X_test.reshape(-1,28,28,1)","2f9146bf":"model = Sequential()\n\nmodel.add(Conv2D(filters =64, kernel_size = (3,3), activation = 'relu', input_shape=(28,28,1)))\nmodel.add(AveragePooling2D(pool_size = (2,2)))\n\nmodel.add(Conv2D(filters =128, kernel_size = (3,3), activation = 'relu', input_shape=(28,28,1)))\nmodel.add(AveragePooling2D(pool_size = (2,2)))\n\nmodel.add(Conv2D(filters =128, kernel_size = (3,3), activation = 'relu', input_shape=(28,28,1)))\nmodel.add(AveragePooling2D(pool_size = (2,2)))\n\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(512,activation=\"relu\"))\nmodel.add(Dense(10,activation=\"softmax\"))\n\nprint(model.summary())\n\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","e1d4fd0c":"batch_size = 128\nepochs =50","80e2f40c":"model.fit(X_train,y_train, batch_size = batch_size, validation_split = 0.2, epochs = epochs)","a49e9e2f":"submission = pd.DataFrame({\n    'ImageId': np.arange(1, X_test.shape[0] + 1),\n    'Label': model.predict_classes(X_test, verbose = 1)\n})\nsubmission.head()","be6cdc79":"submission.to_csv('submission.csv', index=False)","4de95959":"#!kaggle competitions submit -c digit-recognizer -f submission.csv -m \"MLDA, Karaev A.T., minmax-normalization and 3conv+3averpooling layers\"","ec34dc58":"## \u0413\u043e\u0442\u043e\u0432\u0438\u043c submission \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0432 Kaggle","9b964d4e":"\u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435 \u0441\u0430\u0431\u043c\u0438\u0442\u044b \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0443: `MLDA, <\u0424\u0418\u041e>, <\u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438>`.\n\n\u0423 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u0441\u0430\u0431\u043c\u0438\u0442\u0430 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u043b\u043e\u0432\u043e `\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439` \u0432 \u043a\u043e\u043d\u0446\u0435.","8813563e":"# \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u043f\u043e \u043a\u0443\u0440\u0441\u0443 \"\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445-1\"\n\n__\u0417\u0430\u0434\u0430\u0447\u0430:__ \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0443\u043a\u043e\u043f\u0438\u0441\u043d\u044b\u0445 \u0446\u0438\u0444\u0440 \u043d\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 MNIST."}}