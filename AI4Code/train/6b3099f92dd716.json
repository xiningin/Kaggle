{"cell_type":{"505624fc":"code","9631ecf6":"code","d7a18456":"code","aab2bd46":"code","0fc7752a":"code","d439f211":"code","ad682114":"code","f2055c61":"code","231b50c5":"code","b5098508":"code","f93c8aac":"code","4fa750a1":"code","0677e92f":"code","a5618b8e":"code","b3cc0e4d":"code","40ca4bd3":"code","67368e2b":"code","e7f63b4a":"code","fd42b660":"code","cb331dad":"code","75f10cf3":"markdown","d7e555ed":"markdown","c22b1524":"markdown","917963d3":"markdown","76c0818f":"markdown","f32414f8":"markdown","6158065d":"markdown","55dbb277":"markdown","887ceb3b":"markdown","66f168b2":"markdown","e173b1a0":"markdown","7ecc3f03":"markdown","bda9458f":"markdown","372d1722":"markdown","3cef0179":"markdown"},"source":{"505624fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.linear_model import LinearRegression\nfrom xgboost import XGBRegressor\nfrom statsmodels.tsa.deterministic import DeterministicProcess\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set Matplotlib defaults\nplt.style.use(\"seaborn-whitegrid\")\nplt.rc(\"figure\", autolayout=True, figsize=(13, 5))\nplt.rc(\n    \"axes\",\n    labelweight=\"bold\",\n    labelsize=\"large\",\n    titleweight=\"bold\",\n    titlesize=16,\n    titlepad=10,\n)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9631ecf6":"TRAIN_CSV = '\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv'\nTEST_CSV = '\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv'\nSAMPLE_CSV = '\/kaggle\/input\/tabular-playground-series-jan-2022\/sample_submission.csv'\n\n# Use the date column as the index\ntrain_df = pd.read_csv(TRAIN_CSV, parse_dates=['date'])\ntrain_df = train_df.set_index('date').to_period('D')","d7a18456":"def extract_subset(data_set, country, store, product):\n    \"\"\"\n    Extract a subset of sales data for one country, store, and product.\n    \"\"\"\n    df = data_set.loc[(data_set['country'] == country) &\n                      (data_set['store'] == store) &\n                      (data_set['product'] == product)].copy()\n    return df\n\nsubset_df = extract_subset(train_df, 'Finland', 'KaggleMart', 'Kaggle Mug')\nsubset_df","aab2bd46":"class BoostedHybrid:\n    def __init__(self, model_1, model_2):\n        self.model_1 = model_1\n        self.model_2 = model_2\n        self.y_columns = None  # store column names from fit method\n        \n    def fit(self, X_1, X_2, y):\n        # fit self.model_1\n        self.model_1.fit(X_1, y)\n\n        y_fit = pd.DataFrame(\n            # make predictions with self.model_1\n            self.model_1.predict(X_1),\n            index=X_1.index, columns=y.columns,\n        )\n\n        # compute residuals\n        y_resid = y - y_fit\n        y_resid = y_resid.stack().squeeze() # wide to long\n\n        # fit self.model_2 on residuals\n        self.model_2.fit(X_2, y_resid)\n\n        # Save column names for predict method\n        self.y_columns = y.columns\n        self.y_fit = y_fit\n        self.y_resid = y_resid\n        \n    def predict(self, X_1, X_2):\n        y_pred = pd.DataFrame(\n            # predict with self.model_1\n            self.model_1.predict(X_1),\n            index=X_1.index, columns=self.y_columns,\n        )\n        y_pred = y_pred.stack().squeeze()  # wide to long\n\n        # add self.model_2 predictions to y_pred\n        y_pred += self.model_2.predict(X_2)\n\n        return y_pred.unstack()  # long to wide","0fc7752a":"y = subset_df[['num_sold']]\n\n# X_1: Features for Linear Regression\ndp = DeterministicProcess(index=y.index, order=1)\nX_1 = dp.in_sample()\n\nX_2 = X_1.copy()\n\nX_2[\"day_of_week\"] = X_2.index.dayofweek\nX_2[\"day_of_month\"] = X_2.index.day\nX_2[\"day_of_year\"] = X_2.index.dayofyear\nX_2 = X_2.drop('trend', axis='columns')","d439f211":"# train on (2015, 2016, 2017) data, test on 2018\nX_1_pre_2018 = X_1.loc[X_1.index < '2018-01-01']\nX_1_2018 = X_1.loc[X_1.index > '2017-12-31']\n\nX_2_pre_2018 = X_2.loc[X_2.index < '2018-01-01']\nX_2_2018 = X_2.loc[X_1.index > '2017-12-31']\n\ny_pre_2018 = y.loc[y.index < '2018-01-01']\ny_2018 = y.loc[y.index > '2017-12-31']","ad682114":"# Create LinearRegression + XGBRegressor hybrid with BoostedHybrid\nmodel = BoostedHybrid(\n    model_1=LinearRegression(),\n    model_2=XGBRegressor(),\n)\n\n# Fit and predict\nmodel.fit(X_1_pre_2018, X_2_pre_2018, y_pre_2018)\ny_pred = model.predict(X_1_2018, X_2_2018)\n\ny_pred = y_pred.clip(0.0)\n# y_pred.plot()\n# y_2018.plot()\n\naxs = y_2018.plot(subplots=True, sharex=True, figsize=(13, 5), color='gray', alpha=0.5, legend=False,\n                  title='Finland KaggleMart Mug Sales')\ny_pred.plot(subplots=True, color='C0', ax=axs, legend=False);","f2055c61":"subset_df = extract_subset(train_df, 'Finland', 'KaggleMart', 'Kaggle Hat')\n\ny = subset_df[['num_sold']]\n\n# X_1: Features for Linear Regression\ndp = DeterministicProcess(index=y.index, order=1)\nX_1 = dp.in_sample()\n\nX_2 = X_1.copy()\n\nX_2[\"day_of_week\"] = X_2.index.dayofweek\nX_2[\"day_of_month\"] = X_2.index.day\nX_2[\"day_of_year\"] = X_2.index.dayofyear\nX_2 = X_2.drop('trend', axis='columns')\n\n# train on (2015, 2016, 2017) data, test on 2018\nX_1_pre_2018 = X_1.loc[X_1.index < '2018-01-01']\nX_1_2018 = X_1.loc[X_1.index > '2017-12-31']\n\nX_2_pre_2018 = X_2.loc[X_2.index < '2018-01-01']\nX_2_2018 = X_2.loc[X_1.index > '2017-12-31']\nX_2_2018\n\ny_pre_2018 = y.loc[y.index < '2018-01-01']\ny_2018 = y.loc[y.index > '2017-12-31']\n\n# Create LinearRegression + XGBRegressor hybrid with BoostedHybrid\nmodel = BoostedHybrid(\n    model_1=LinearRegression(),\n    model_2=XGBRegressor(),\n)\n\n# Fit and predict\nmodel.fit(X_1_pre_2018, X_2_pre_2018, y_pre_2018)\ny_pred = model.predict(X_1_2018, X_2_2018)\n\ny_pred = y_pred.clip(0.0)\n# y_pred.plot()\n# y_2018.plot()\n\naxs = y_2018.plot(subplots=True, sharex=True, figsize=(13, 5), color='gray', alpha=0.5, legend=False,\n                  title='Finland KaggleMart Hat Sales')\ny_pred.plot(subplots=True, color='C0', ax=axs, legend=False);","231b50c5":"subset_df = extract_subset(train_df, 'Finland', 'KaggleMart', 'Kaggle Sticker')\n\ny = subset_df[['num_sold']]\n\n# X_1: Features for Linear Regression\ndp = DeterministicProcess(index=y.index, order=1)\nX_1 = dp.in_sample()\n\nX_2 = X_1.copy()\n\nX_2[\"day_of_week\"] = X_2.index.dayofweek\nX_2[\"day_of_month\"] = X_2.index.day\nX_2[\"day_of_year\"] = X_2.index.dayofyear\nX_2 = X_2.drop('trend', axis='columns')\n\n# train on (2015, 2016, 2017) data, test on 2018\nX_1_pre_2018 = X_1.loc[X_1.index < '2018-01-01']\nX_1_2018 = X_1.loc[X_1.index > '2017-12-31']\n\nX_2_pre_2018 = X_2.loc[X_2.index < '2018-01-01']\nX_2_2018 = X_2.loc[X_1.index > '2017-12-31']\nX_2_2018\n\ny_pre_2018 = y.loc[y.index < '2018-01-01']\ny_2018 = y.loc[y.index > '2017-12-31']\n\n# Create LinearRegression + XGBRegressor hybrid with BoostedHybrid\nmodel = BoostedHybrid(\n    model_1=LinearRegression(),\n    model_2=XGBRegressor(),\n)\n\n# Fit and predict\nmodel.fit(X_1_pre_2018, X_2_pre_2018, y_pre_2018)\ny_pred = model.predict(X_1_2018, X_2_2018)\n\ny_pred = y_pred.clip(0.0)\n# y_pred.plot()\n# y_2018.plot()\n\naxs = y_2018.plot(subplots=True, sharex=True, figsize=(13, 5), color='gray', alpha=0.5, legend=False,\n                  title='Finland KaggleMart Sticker Sales')\ny_pred.plot(subplots=True, color='C0', ax=axs, legend=False);","b5098508":"# https:\/\/www.kaggle.com\/c\/web-traffic-time-series-forecasting\/discussion\/36414\n\ndef SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.round(np.mean(diff),5)","f93c8aac":"# train on (2015, 2016, 2017) data, test on 2018\ndf_pre_2018 = train_df.loc[train_df.index < '2018-01-01']\ndf_2018 = train_df.loc[train_df.index > '2017-12-31']","4fa750a1":"df_2018","0677e92f":"countries = ['Finland', 'Norway', 'Sweden']\nproducts = ['Kaggle Hat', 'Kaggle Mug', 'Kaggle Sticker']\nstores = ['KaggleMart', 'KaggleRama']\n\ndef train_and_predict(train_df, test_df):\n    pred_dfs = list()\n\n    for country in countries:\n        for product in products:\n            for store in stores:\n                subset_df = extract_subset(train_df, country, store, product)\n                test_sample = extract_subset(test_df, country, store, product)\n                \n                y = subset_df[['num_sold']]\n\n                # X_1: Features for Linear Regression\n                dp = DeterministicProcess(index=y.index, order=1)\n                X_1 = dp.in_sample()\n\n                X_2 = X_1.copy()\n                X_2[\"day_of_week\"] = X_2.index.dayofweek\n                X_2[\"day_of_month\"] = X_2.index.day\n                X_2[\"day_of_year\"] = X_2.index.dayofyear\n                X_2 = X_2.drop('trend', axis='columns')\n                \n\n                # Create features for a forecast.\n                X_1_fore = dp.out_of_sample(steps=len(test_sample))\n                \n                X_2_fore = X_1_fore.copy()\n                X_2_fore[\"day_of_week\"] = X_2_fore.index.dayofweek\n                X_2_fore[\"day_of_month\"] = X_2_fore.index.day\n                X_2_fore[\"day_of_year\"] = X_2_fore.index.dayofyear\n                X_2_fore = X_2_fore.drop('trend', axis='columns')\n\n                # Create LinearRegression + XGBRegressor hybrid with BoostedHybrid\n                model = BoostedHybrid(\n                    model_1=LinearRegression(),\n                    model_2=XGBRegressor(),\n                )\n\n                # Fit and predict\n                model.fit(X_1, X_2, y)\n                y_pred = model.predict(X_1_fore, X_2_fore)\n                y_fore = y_pred.clip(0.0)\n                \n                pred_df = pd.DataFrame({'row_id': test_sample['row_id'],\n                                        'y_pred': y_fore['num_sold']}).reset_index(drop=True)\n                pred_dfs.append(pred_df)\n\n    predictions_df = pd.concat(pred_dfs)\n    return predictions_df\n\npreds_2018_df = train_and_predict(df_pre_2018, df_2018)\npreds_2018_df","a5618b8e":"val_pred_df = df_2018.merge(preds_2018_df, how='left', on='row_id')\nval_pred_df","b3cc0e4d":"actual = np.array(val_pred_df['num_sold'])\nforecast = np.array(val_pred_df['y_pred'])\nSMAPE(actual, forecast)","40ca4bd3":"# Keep the row_id for the sample submission\ntest_df = pd.read_csv(TEST_CSV, parse_dates=['date'])\ntest_df = test_df.set_index('date').to_period('D')\ntest_df","67368e2b":"preds_2019_df = train_and_predict(train_df, test_df)\npreds_2019_df","e7f63b4a":"test_pred_df = test_df.merge(preds_2019_df, how='left', on='row_id')\ntest_pred_df","fd42b660":"for country in countries:\n    for product in products:\n        for store in stores:\n            df = extract_subset(train_df, country, store, product)\n            pred_df = extract_subset(test_pred_df, country, store, product)\n            pred_df = pred_df.rename(columns = {'y_pred': 'num_sold'})\n            pred_df.index = pd.date_range(start='1\/1\/2019', end='12\/31\/2019')\n            \n            title = '{} - {} - {}'.format(country, product, store)\n            sales_and_pred = pd.concat([df[['num_sold']], pred_df[['num_sold']]])\n            \n            sales_and_pred.plot(title=title, legend=False)","cb331dad":"submission_df = test_pred_df[['row_id', 'y_pred']]\nsubmission_df.columns = ['row_id', 'num_sold']\nsubmission_df.to_csv('.\/submission.csv', index=False)","75f10cf3":"### Train boosted hybrid\n\nCreate the hybrid model by initializing a `BoostedHybrid` class with `LinearRegression()` and `XGBRegressor()` instances.","d7e555ed":"Some of the peaks aren't quite as high as expected, but this looks like a really good set of predictions for such a simple model. Let's look at how the same model does for Hat and Sticker sales.","c22b1524":"There's definitely room for improvement, but this looks much better than my previous notebooks. Let's put this all together and see how it does on the entire data set.","917963d3":"That's a big improvement over previous notebooks, but the estimated SMAPE score isn't always close to what I've seen on the leaderboard when making forecasts with new data. Let's load the test data and make a submission.","76c0818f":"### Motivation\n\nThis notebook is based on my learnings from the fifth lesson in Kaggle's [Time Series](https:\/\/www.kaggle.com\/learn\/time-series) course, Hybrid Models, applied to the January 2022 Tabular Playground Series challenge. In my previous notebooks I applied linear models and a seasonal model to this challenge with mixed results. Hopefully a hybrid model is what's needed to improve further and advance a bit on the learderboard.","f32414f8":"### Build the models and make predictions","6158065d":"Let's combine the predictions with the original data to see how the forecasts look.","55dbb277":"### Load the training data set","887ceb3b":"### Create the submission file","66f168b2":"### Re-train models and make predictions using all training data","e173b1a0":"We'll create a `BoostedHybrid` model for each of our 18 sales categories. We could pass different models for each category, but we'll start out keeping it simple and use the same models for all. Let's see what shape the data should take for each model.","7ecc3f03":"These plots all look like reasonable forecasts. The models we used are extremely simple two-model hybrids without any hyperparameter tuning. There's still a lot of room for improvement by selecting different models for different products, tuning those models, and adding additional models to the `BoostedHybrid` class.","bda9458f":"### The BoostedHybrid class\n\nThe tutorial shows us how to define a `BoostedHybrid` class that will apply two different models to a data set and combine the results. This is a powerful idea that could be expanded to include any number of models, but I'd expect diminishing returns.","372d1722":"### Load the test data set","3cef0179":"Now we'll split each of those data sets in two for training and validation."}}