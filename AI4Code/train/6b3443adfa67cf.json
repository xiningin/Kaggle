{"cell_type":{"8d645713":"code","5eb50106":"code","969b991a":"code","9374f688":"code","83e7d2ce":"code","97c09d14":"code","e1cc7656":"code","4019e391":"code","eceb5921":"code","955c4646":"code","dc15f943":"code","e187419c":"code","8ad4d9f3":"code","f70a6bf8":"code","4f6c1848":"code","928ebe18":"code","fb575c06":"code","2fad2d3f":"code","98ffc299":"code","49212209":"code","e0defa7a":"code","33c9fd2d":"code","75109d84":"code","ea86f3df":"markdown","32c8366c":"markdown","0e599e15":"markdown","6fba3502":"markdown","cfbf9935":"markdown","ffd43fb3":"markdown","6e1c52b3":"markdown","65cd9fdd":"markdown","35a5e64e":"markdown","420e114b":"markdown","ac66f951":"markdown","695de906":"markdown","115e460f":"markdown","d09cc6ec":"markdown","37507fda":"markdown","15cf869b":"markdown","5cf271df":"markdown","4128abca":"markdown","32910485":"markdown","21701b77":"markdown","5728fadd":"markdown","5359ff42":"markdown","36cdda4b":"markdown"},"source":{"8d645713":"# \ub370\uc774\ud130 \ubd84\uc11d \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport numpy as np\nimport pandas as pd\n\n# \uc2dc\uac01\ud654 \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# \ubaa8\ub378\ub9c1 \ub77c\uc774\ube0c\ub7ec\ub9ac\nfrom category_encoders.ordinal import OrdinalEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\nfrom lightgbm import LGBMClassifier\n\n# \uae30\ud0c0 \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport random\nimport gc\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nsns.set_style(\"whitegrid\")","5eb50106":"train = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/sample_submission.csv')","969b991a":"train.shape, test.shape, sample_submission.shape","9374f688":"train.head()","83e7d2ce":"test.head()","97c09d14":"train.info()","e1cc7656":"train.describe()","4019e391":"train.describe(include='O')","eceb5921":"print(f'income count: {train[\"income\"].count()}')\nprint(f'income not null count(pct): {np.round(train[\"income\"].count()\/len(train)*100, 2)}%')","955c4646":"num_of_null = train.isnull().sum()\npercent = (train.isnull().sum() \/ train.isnull().count() * 100)\npd.concat([num_of_null, percent], axis=1, keys=['# of null', 'Percent']).sort_values(by='Percent', ascending=False)","dc15f943":"num_of_null = test.isnull().sum()\npercent = (test.isnull().sum() \/ test.isnull().count() * 100)\npd.concat([num_of_null, percent], axis=1, keys=['# of null', 'Percent']).sort_values(by='Percent', ascending=False)","e187419c":"education_map = {\n    'Preschool': 'level_0', # Preschool\uc740 \ubaa8\ub450 \uc18c\ub4dd\uc218\uc900\uc774 \ub0ae\uc74c, \ucd94\ud6c4 \ubaa8\ub378\ub9c1\uc2dc \ucc38\uace0\n    '1st-4th': 'level_1', \n    '5th-6th': 'level_1', \n    '7th-8th': 'level_1', \n    '9th': 'level_2', \n    '10th': 'level_2', \n    '11th': 'level_2', \n    '12th': 'level_2', \n    'HS-grad': 'level_3', \n    'Some-college': 'level_3', \n    'Assoc-acdm': 'level_4', \n    'Assoc-voc': 'level_4', \n    'Bachelors': 'level_5', \n    'Masters': 'level_6', \n    'Prof-school': 'level_7', \n    'Doctorate': 'level_7',\n}\n\n\n\ntrain['education'] = train['education'].map(education_map)\ntest['education'] = test['education'].map(education_map)","8ad4d9f3":"income_01 = ['Jamaica',\n 'Haiti',\n 'Puerto-Rico',\n 'Laos',\n 'Thailand',\n 'Ecuador',]\n\nincome_02 = ['Outlying-US(Guam-USVI-etc)',\n 'Honduras',\n 'Columbia',\n 'Dominican-Republic',\n 'Mexico',\n 'Guatemala',\n 'Portugal',\n 'Trinadad&Tobago',\n 'Nicaragua',\n 'Peru',\n 'Vietnam',\n 'El-Salvador',]\n\nincome_03 = ['Poland',\n 'Ireland',\n 'South',\n 'China',]\n\nincome_04 = [\n    'United-States',\n]\nincome_05 = [\n 'Greece',\n 'Scotland',\n 'Cuba',\n 'Hungary',\n 'Hong',\n 'Holand-Netherlands',\n]\nincome_06 = [\n 'Philippines',\n 'Canada',\n]\nincome_07 = [\n 'England',\n 'Germany',\n]\n\nincome_08 = [\n 'Italy',\n 'India',\n 'Japan',\n 'France',\n 'Yugoslavia',\n 'Cambodia',\n]\n\nincome_09 = [\n 'Taiwan',\n 'Iran',\n]\n\nincome_other=['?', ]\n\ndef convert_country(x):\n    if x in income_01:\n        return 'income_01'\n    elif x in income_02:\n        return 'income_02'\n    elif x in income_03:\n        return 'income_03'\n    elif x in income_04:\n        return 'income_04'\n    elif x in income_05:\n        return 'income_05'\n    elif x in income_06:\n        return 'income_06'\n    elif x in income_07:\n        return 'income_07'\n    elif x in income_08:\n        return 'income_08'\n    elif x in income_09:\n        return 'income_09'\n    else:\n        return 'income_other'\n    \ntrain['country_bin'] = train['native_country'].apply(convert_country)\ntest['country_bin'] = test['native_country'].apply(convert_country)","f70a6bf8":"train.loc[train['workclass'] == 'Without-pay', 'workclass'] = 'other'\ntrain.loc[train['workclass'] == 'Never-worked', 'workclass'] = 'other'\ntest.loc[test['workclass'] == 'Without-pay', 'workclass'] = 'other'\ntest.loc[test['workclass'] == 'Never-worked', 'workclass'] = 'other'","4f6c1848":"# \ud544\uc694\uc5c6\ub294 feature drop\ntrain.drop(['id'], axis=1, inplace=True)\ntest.drop(['id'], axis=1, inplace=True)\n\n# eudcation\uc73c\ub85c \ubcc0\uacbd\ub418\uc5c8\uc73c\ubbc0\ub85c education_num\uc740 \uc0ad\uc81c\ntrain.drop(['education_num'], axis=1, inplace=True)\ntest.drop(['education_num'], axis=1, inplace=True)\n\n# country_bin\uc73c\ub85c \ubcc0\uacbd\ub418\uc5c8\uc73c\ubbc0\ub85c native_country\ub294 \uc0ad\uc81c\ntrain.drop(['native_country'], axis=1, inplace=True)\ntest.drop(['native_country'], axis=1, inplace=True)\n\n# \ud544\uc694\uc5c6\ub294 feature drop\ntrain.drop(['fnlwgt'], axis=1, inplace=True)\ntest.drop(['fnlwgt'], axis=1, inplace=True)","928ebe18":"y = train['income'] != '<=50K'\nX = train.drop(['income'], axis=1)","fb575c06":"# \ubc94\uc8fc\ud615 \ub370\uc774\ud130\ub97c \uac16\ub294 \uce7c\ub7fc \uac00\uc838\uc624\uae30\nLE_columns = []\n\nfor col in X.columns:\n    if X[col].dtype.name == 'object':\n        LE_columns.append(col)\n        \nLE_columns       ","2fad2d3f":"# \ub77c\ubca8 \uc778\ucf54\ub354 \uc0dd\uc131\nLE_encoder = OrdinalEncoder(LE_columns)\n\n# train, test \ub370\uc774\ud130\uc5d0 \uc778\ucf54\ub529 \uc801\uc6a9\nX = LE_encoder.fit_transform(X, y)\ntest = LE_encoder.transform(test)","98ffc299":"NFOLDS = 7\nfolds = KFold(n_splits=NFOLDS)\n\ncolumns = X.columns\nsplits = folds.split(X, y)\ny_preds = np.zeros(test.shape[0])\n\nfeature_importances = pd.DataFrame()\nfeature_importances['feature'] = columns","49212209":"model = LGBMClassifier(objective='binary', n_estimators=1000, learning_rate=0.01, # \uae30\ubcf8 \ud29c\ub2dd (learning_rate\uc740 \uc791\uac8c\ud558\uba70 n_estimators\ub97c \ud0a4\uc6b0\ub294 \uac83\uc774 \uae30\ubcf8 \uc6d0\uce59!)\n                       num_leaves=42, min_child_samples=30, max_depth=30, # \uacfc\uc801\ud569 \ubc29\uc9c0\n                       reg_alpha=0.3, reg_lambda=0.7, # regularization\uc744 \ud1b5\ud55c \uacfc\uc801\ud569 \ubc29\uc9c0\n                       colsample_bytree=0.8, subsample=0.8, # \uacfc\uc801\ud569 \ubc29\uc9c0II\n                       random_state=91)\n\n\nfor fold_n, (train_index, valid_index) in enumerate(splits):\n    print('Fold: ', fold_n+1)\n    X_train, X_valid = X.iloc[train_index], X.iloc[valid_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n\n    evals = [(X_train, y_train), (X_valid, y_valid)]\n    model.fit(X_train, y_train, eval_metric='f1', eval_set=evals, verbose=True)\n    \n    feature_importances[f'fold_{fold_n + 1}'] = model.feature_importances_\n        \n    y_preds += model.predict(test).astype(int) \/ NFOLDS\n    \n    del X_train, X_valid, y_train, y_valid\n    gc.collect()","e0defa7a":"feature_importances","33c9fd2d":"sample_submission['prediction'] = y_preds\n\nfor ix, row in sample_submission.iterrows():\n    if row['prediction'] > 0.5:\n        sample_submission.loc[ix, 'prediction'] = 1\n    else:\n        sample_submission.loc[ix, 'prediction'] = 0\n\nsample_submission = sample_submission.astype({\"prediction\": int})\nsample_submission.to_csv('submission.csv', index=False)","75109d84":"sample_submission.head(10)","ea86f3df":"- \uc6b0\uc120 \ub370\uc774\ud130\ub97c \uc804\ubc18\uc801\uc73c\ub85c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","32c8366c":"# \ubaa8\ub378\ub9c1 (Modeling)","0e599e15":"## Feature\ubcc4 Null \uac12 \ud655\uc778","6fba3502":"- test \ub370\uc774\ud130\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c null\uac12\uc774 \ud558\ub098\ub3c4 \uc5c6\uc2b5\ub2c8\ub2e4.","cfbf9935":"- \ubc94\uc8fc\ud615 \ub370\uc774\ud130\ub97c \uc778\ucf54\ub529\ud569\ub2c8\ub2e4.\n- `LabelEncoder`\uc640 `OrdinalEncoder`\ub294 \ub3d9\uc77c\ud55c \uae30\ub2a5\uc744 \uac16\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc `OrdinalEncoder`\ub294 \uc8fc\ub85c (n_samples, n_features) \ud615\ud0dc\ub97c \uac16\ub294 Feature\uc5d0 \uc0ac\uc6a9\ub418\uba70, `LabelEncoder`\ub294 \uc8fc\ub85c (n_samples,) \ud615\ud0dc\ub97c \uac16\ub294 Target\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.   \n(\ucd9c\ucc98:  https:\/\/datascience.stackexchange.com\/questions\/39317\/difference-between-ordinalencoder-and-labelencoder\/64177)","ffd43fb3":"\uce74\ud14c\uace0\ub9ac feature\ub85c \ubcc0\uacbd\ud55c \ub450 \ud53c\ucc98 `education_num`\uacfc `native_country`\ub294 drop\ud588\uace0, feature\uc640 \ubb34\uad00\ud55c `id`\ub3c4 \uc0ad\uc81c\ud588\uc2b5\ub2c8\ub2e4. `fnlwgt`\ub294 \ubd84\ud3ec\ub3c4\ub97c \uc0b4\ud3b4\ubd24\uc744 \ub54c \uc18c\ub4dd \uc218\uc900\uc744 \uad6c\ubd84\ud558\ub294 \ub370 \ub3c4\uc6c0\uc774 \ub418\uc9c0 \uc54a\ub294\ub2e4\uace0 \ud310\ub2e8\ud574 \uc0ad\uc81c\ud588\uc2b5\ub2c8\ub2e4.  \n\n**`fnlwgt` \ubd84\ud3ec\ub3c4\uac00 \uad81\uae08\ud558\uc2e0 \ubd84\uc740 [EDA notebook](https:\/\/www.kaggle.com\/werooring\/basic-eda-lgbm-modeling-public-score-0-87714#%EC%88%98%EC%B9%98%ED%98%95-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D)\uc758 \uc218\uce58\ud615 \ub370\uc774\ud130 \ubd84\uc11d - \ub2e4\ubcc0\ub7c9(mulvariate) \ub370\uc774\ud130 \uc2dc\uac01\ud654 - 2) Final weight \ub530\ub978 \uc18c\ub4dd \uc218\uc900 (fnlwgt vs income) \uadf8\ub798\ud504 \ucc38\uace0!**","6e1c52b3":"- feature_importance\ub97c \ud65c\uc6a9\ud558\uc5ec \uac01 \ud3f4\ub4dc(fold)\ubcc4\ub85c \ud53c\uccd0 \uc911\uc694\ub3c4\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \n- \ub2e8, feature_importance\ub294 \ud53c\uccd0 \uc911\uc694\ub3c4\ub97c \ud30c\uc545\ud558\uae30 \uc704\ud55c \uc808\ub300\uc801\uc778 \ubc29\ubc95\uc774 \uc544\ub2d9\ub2c8\ub2e4. \uadf8\ub0e5 \ucc38\uace0\ub9cc \ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. SHAP\ub3c4 \uc0ac\uc6a9\ud574\ubd24\ub294\ub370 feature_importance\uc640 \uacb0\uacfc\uac00 \uc0c1\ub2f9\ud788 \ub2ec\ub790\uc2b5\ub2c8\ub2e4. SHAP\ub97c \uc870\uae08 \ub354 \uc2e0\ub8b0\ud558\uae30 \ub54c\ubb38\uc5d0 feature_importance\ub294 \uac70\uc758 \ubb34\uc2dc\ud588\uc2b5\ub2c8\ub2e4.","65cd9fdd":"education\uc744 \ucd1d 8\uac1c\uc758 \uce74\ud14c\uace0\ub9ac\ub85c \ub098\ub204\uc5c8\uc2b5\ub2c8\ub2e4. \ubd84\ud3ec\ub3c4\ub97c \uc0b4\ud3b4\ubd24\uc744 \ub54c \uc544\ub798\uc640 \uac19\uc774 \ub098\ub204\uc5c8\uc744 \ub54c \uc131\ub2a5\uc774 \uac00\uc7a5 \uc88b\uc744 \uac83\uc73c\ub85c \uc608\uc0c1\ud588\uc2b5\ub2c8\ub2e4.\n\n\n**\ubd84\ud3ec\ub3c4\uac00 \uad81\uae08\ud558\uc2e0 \ubd84\uc740 [EDA notebook](https:\/\/www.kaggle.com\/werooring\/basic-eda-lgbm-modeling-public-score-0-87714#%EC%88%98%EC%B9%98%ED%98%95-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D)\uc758 \uc218\uce58\ud615 \ub370\uc774\ud130 \ubd84\uc11d - \ub2e4\ubcc0\ub7c9(mulvariate) \ub370\uc774\ud130 \uc2dc\uac01\ud654 - 3) \uad50\uc721\uc5d0 \ub530\ub978 \uc18c\ub4dd \uc218\uc900 (education_num vs income) \uadf8\ub798\ud504 \ucc38\uace0!**","35a5e64e":"- null\uac12\uc774 \ud558\ub098\ub3c4 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","420e114b":"Feature Engineering\uc740 [Teddy Lee\ub2d8\uc758 notebook](https:\/\/www.kaggle.com\/teddylee777\/eda-lightgbm-pycaret)\uc744 \ucc38\uace0\ud588\uc2b5\ub2c8\ub2e4.","ac66f951":"# \ub370\uc774\ud130 \uac04\ub2e8\ud788 \ub458\ub7ec\ubcf4\uae30","695de906":"\uc5ec\ub7ec \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\uc744 \uc2dc\ub3c4\ud574\ubd24\uc73c\ub098 \ud070 \uc131\ub2a5 \ud5a5\uc0c1\uc744 \uae30\ub300\ud558\uc9c0 \ubabb\ud588\uc2b5\ub2c8\ub2e4. \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\uc740 \uac70\uc758 \uc548\ud55c\ub9cc\ud07c \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc5d0 \uc870\uae08 \ub354 \uc2e0\uacbd\uc37c\uc2b5\ub2c8\ub2e4. \uc800\ub294 \uc2dc\uac04\uc774 \ub9ce\uc9c0\uace0 \uc54a\uc558\uace0 \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\uc5d0 \ub300\ud55c \uc544\uc774\ub514\uc5b4\uac00 \ub354 \uc774\uc0c1 \ub5a0\uc624\ub974\uc9c0 \uc54a\uc544 \uc5b4\uca54 \uc218 \uc5c6\uc774 \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc5d0 \uc2dc\uac04\uc744 \uc880 \ud22c\uc790\ud588\uc2b5\ub2c8\ub2e4. \uc2e4\uc81c \uc131\ub2a5\ud5a5\uc0c1\uc5d0\ub294 \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\uc5d0 \uacf5\uc744 \ub4e4\uc774\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.\n\n\nn_estimator, learing_rate, num_leaves, min_child_samples, max_depth, reg_alpha, reg_lambda, colsample_bytree, subsample\uc5d0 \ub300\ud574 \ud29c\ub2dd\ud588\uc2b5\ub2c8\ub2e4. \uc6b0\uc120 \ud070 \ubc94\uc6b0\ub85c GridSearch\ub97c \ud588\uace0 \uc810\ucc28 \uc131\ub2a5 \uc88b\uc740 \ubc94\uc704\ub85c \uc881\ud600\uac00\uba70 \uc9c4\ud589\ud588\uc2b5\ub2c8\ub2e4. cv\uc640 LB\ub97c \uc885\ud569\uc801\uc73c\ub85c \uace0\ub824\ud588\uc744 \ub54c \uac00\uc7a5 \uc88b\uc740 \uc131\ub2a5\uc774 \ub098\uc624\ub294 \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130\ub97c \ucc3e\uc544\ub0b4\uc5b4 \uc544\ub798\uc640 \uac19\uc774 \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4.","115e460f":"Kfold = 7\ub85c \uc7a1\uc558\uc2b5\ub2c8\ub2e4. 4, 5, 6, 7 \uc911 \ud14c\uc2a4\ud2b8\ud574\ubd24\uc744 \ub54c cv \ubc0f LB \uc131\ub2a5\uc774 \uc885\ud569\uc801\uc73c\ub85c \ub192\uc740 \uac74 7\uc774\uc5c8\uc2b5\ub2c8\ub2e4.  \n\ub610\ud55c \uc77c\ubc18\uc801\uc73c\ub85c \ud0c0\uac9f\uac12\uc774 \ubd88\uade0\ud615\uc77c \ub54c\ub294 KFold\ubcf4\ub2e4 stratifiedKfold\ub97c \uc4f0\uc9c0\ub9cc cv\uc640 LB\ub97c \uc885\ud569\uc801\uc73c\ub85c \uace0\ub824\ud588\uc744 \ub54c KFold\uc758 \uc131\ub2a5\uc774 \ub354 \ub192\uac8c \ub098\uc654\uc2b5\ub2c8\ub2e4. \uc774\uc720\ub294 \uba85\ud655\ud788 \ubaa8\ub974\uaca0\uc73c\ub098 \uadf9\uc2ec\ud55c \ubd88\uade0\ud615\uc774 \uc544\ub2c8\ub77c \uadf8\ub7f0 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","d09cc6ec":"- id\ub97c \uc81c\uc678\ud558\uace0 feature\uc758 \ud0c0\uc785(type)\uc740 int 6\uac1c, object 9\uac1c\uc785\ub2c8\ub2e4. \n- object \ud0c0\uc785\uc740 string \ud0c0\uc785\uc774\ub77c\uace0 \ubcf4\uc2dc\uba74 \ub429\ub2c8\ub2e4.","37507fda":"- \ub9c8\uc9c0\ub9c9\uc73c\ub85c submission\uc758 \uacb0\uacfc\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","15cf869b":"# \uc81c\ucd9c","5cf271df":"- train feature\uc640 target value\ub97c \ubd84\ub9ac\ud569\ub2c8\ub2e4.","4128abca":"id\ub97c \uc81c\uc678\ud558\uace0 \ucd1d 15\uac1c\uc758 feature\uac00 \uc788\uc73c\uba70 \uac01 feature\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc758\ubbf8\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. (data description\uc5d0\uc11c \uc81c\uacf5)\n\n- `age` : \ub098\uc774\n- `workclass` : \uace0\uc6a9 \ud615\ud0dc\n- `fnlwgt` : \uc0ac\ub78c \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58 (final weight\uc758 \uc57d\uc790)\n- `education` : \uad50\uc721 \uc218\uc900 (\ucd5c\uc885 \ud559\ub825)\n- `education_num` : \uad50\uc721 \uc218\uc900 \uc218\uce58\n- `marital_status`: \uacb0\ud63c \uc0c1\ud0dc\n- `occupation` : \uc5c5\uc885\n- `relationship` : \uac00\uc871 \uad00\uacc4\n- `race` : \uc778\uc885\n- `sex` : \uc131\ubcc4\n- `capital_gain` : \uc591\ub3c4 \uc18c\ub4dd\n- `capital_loss` : \uc591\ub3c4 \uc190\uc2e4\n- `hours_per_week` : \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n- `native_country` : \uad6d\uc801\n- `income` : **\uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12, target variable)**","32910485":"## Feature Drop","21701b77":"- train \ub370\uc774\ud130\uc5d0\ub294 26,049\uac1c\uc758 \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud558\uace0, test \ub370\uc774\ud130\uc5d0\ub294 6,512\uac1c\uc758 \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud569\ub2c8\ub2e4.\n- train \ub370\uc774\ud130\uc5d0\ub294 target variable\ub3c4 \ud3ec\ud568\ud558\ubbc0\ub85c test \ub370\uc774\ud130\ubcf4\ub2e4 feature \uac1c\uc218\uac00 1\uac1c \ub354 \ub9ce\uc2b5\ub2c8\ub2e4.","5728fadd":"# \ub77c\uc774\ube0c\ub7ec\ub9ac \ud638\ucd9c \ubc0f I\/O","5359ff42":"\uc774 \ucf54\ub4dc\ub294 Public score 33\uc704\uc5d0\uc11c Private score 4\uc704\ub85c \uc624\ub978 \ucf54\ub4dc\uc785\ub2c8\ub2e4. \uc81c\uac00 \uc5b4\ub5bb\uac8c \ucf54\ub4dc\ub97c \uc9f0\uace0 \uc65c \uadf8\ub807\uac8c \uc9f0\ub294\uc9c0\ub97c \uc774 \ub178\ud2b8\ubd81\uc5d0 \uc124\uba85\ud574\ub1a8\uc2b5\ub2c8\ub2e4. LB\uc5d0\ub9cc \uc9d1\uc911\ud558\uae30\ubcf4\ub2e4 cv\uc5d0\ub3c4 \uc9d1\uc911\uc744 \ud55c \uac8c \uc88b\uc740 \uc131\uc801\uc744 \ub0b8 \uc774\uc720\uac00 \uc544\ub2d0\uae4c \uc2f6\uc2b5\ub2c8\ub2e4.  \n\n\uc774 \ub178\ud2b8\ubd81\uc5d0\ub294 cv\ub97c \ub2e4\ub8e8\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. cv\ub294 \ub2e4\ub978 \ub178\ud2b8\ubd81\uc73c\ub85c \ud14c\uc2a4\ud2b8\ub97c \ud588\uace0 \uc5ec\uae30\uc11c\ub294 \ucd5c\uc885 \ubaa8\ub378\uc5d0 \ub300\ud55c \ucf54\ub4dc\ub9cc \ub2f4\uc558\uc2b5\ub2c8\ub2e4.","36cdda4b":"# Feature Engineering"}}