{"cell_type":{"54e27e7c":"code","e2ba4d5e":"code","96c00741":"code","0278b62d":"code","25870f0f":"code","2e1e4647":"code","bd70f545":"code","d6bee6a7":"code","512504ce":"code","a4c43380":"code","528c92a0":"code","25c261f4":"code","673fc405":"code","31c3e86d":"code","24aced1a":"code","b7f9fae7":"code","401928e9":"code","f0a99d65":"code","442491e1":"code","44ea65ae":"code","01e26a19":"markdown","4fe1458d":"markdown","3981322e":"markdown","83b5425c":"markdown","95b522dc":"markdown","5fc2c55a":"markdown","8524bee7":"markdown","16b9a4d3":"markdown","0927eb4a":"markdown","28ce2949":"markdown","a8c797fa":"markdown","c1d4cd36":"markdown","1deebd8d":"markdown","b8896369":"markdown"},"source":{"54e27e7c":"import catboost\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom catboost import Pool\nfrom datetime import timedelta\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\nfrom sklearn.impute import KNNImputer\nfrom sklearn.model_selection import KFold\nfrom bayes_opt import BayesianOptimization\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_absolute_error\nfrom catboost import CatBoost, CatBoostRegressor","e2ba4d5e":"#\u6700\u5927\u8868\u793a\u884c\u6570\u306e\u6307\u5b9a\uff08\u3053\u3053\u3067\u306f200\u5217\u3092\u6307\u5b9a\uff09\npd.set_option('display.max_rows', 200)\n#\u6700\u5927\u8868\u793a\u5217\u6570\u306e\u6307\u5b9a\uff08\u3053\u3053\u3067\u306f50\u5217\u3092\u6307\u5b9a\uff09\npd.set_option('display.max_columns', 50)","96c00741":"def cat_hyp(depth, bagging_temperature):\n  params = {\"iterations\": 100,\n            \"learning_rate\": 0.05,\n            \"eval_metric\": \"MAE\",\n            \"loss_function\": \"MAE\",\n            \"verbose\": False} # Default Parameters\n  params[ \"depth\"] = int(round(depth)) \n  params[\"bagging_temperature\"] = bagging_temperature\n  \n  cat_feat = ['host_is_superhost','host_neighbourhood',\n'host_has_profile_pic','host_identity_verified','neighbourhood_cleansed',\n'property_type','room_type','bathrooms_text','instant_bookable',\n'private_bath','shared_bath'] # Categorical features list\n  cv_dataset = catboost.Pool(data=x_train_df,\n                  label=y_train_df,\n                  cat_features=cat_feat)\n\n  scores = catboost.cv(cv_dataset,\n              params,\n              fold_count=5,\n              plot=\"True\")\n\n  #print(scores)\n\n  return np.min(scores['test-MAE-mean'])*(-1)  # \u6700\u5c0f\u5316\u3057\u305f\u3044\u306e\u3067-1\u639b\u3051\u3066test-MAE-mean\u3092\u8fd4\u3059\n","0278b62d":"def label_encoding(df, cols):\n    for c in cols:\n        if df[c].dtype == 'object':\n            lbl = LabelEncoder()\n            df[c] = lbl.fit_transform(df[c].fillna('NA').astype(str))\n    return df","25870f0f":"# \u914d\u5e03\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\ntrain_data = pd.read_csv(\"..\/input\/the-datascience-cup-beta\/train.csv\", index_col=0)\ntest_data = pd.read_csv(\"..\/input\/the-datascience-cup-beta\/test.csv\", index_col=0)\n# \u524d\u51e6\u7406\u306e\u305f\u3081\u3001\u7d50\u5408\ntotal_data = pd.concat([train_data, test_data], sort=False)\ntotal_data.head()","2e1e4647":"#\u524d\u51e6\u7406\u958b\u59cb\n#\u90aa\u9b54\u306a%\u3092\u524a\u9664\ntotal_data['host_response_rate'] = total_data['host_response_rate'].replace('%', '', regex=True).astype('int', errors='ignore')\ntotal_data['host_acceptance_rate'] = total_data['host_acceptance_rate'].replace('%', '', regex=True).astype('int', errors='ignore')","bd70f545":"#\u65e5\u6642\u7cfb\u51e6\u7406\ncols_dttm = ['host_since', 'first_review', 'last_review']\nfor c in cols_dttm:\n    total_data[c] = pd.to_datetime(total_data[c])\n    \n# first_review \u304b\u3089 last_review\u307e\u3067\u306e\u65e5\u6570\u306a\u3069\n#  \/ timedelta(days=1) \u306f\u65e5\u6570\u3092\u6570\u5024\u578b\u306b\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\ntotal_data['first_review'] = (total_data['first_review'] - total_data['host_since']) \/ timedelta(days=1)\ntotal_data['last_review'] = (total_data['last_review'] - total_data['host_since']) \/ timedelta(days=1)\ntotal_data['host_since'] = (total_data['host_since'] - total_data['host_since'].min()) \/ timedelta(days=1)\ntotal_data['num_days_from_first_to_last_review'] = (total_data['last_review'] - total_data['first_review'])","d6bee6a7":"total_data['host_response_time'] = total_data['host_response_time'].str.replace('within an hour', '1')\ntotal_data['host_response_time'] = total_data['host_response_time'].str.replace('within a few hours', '3')\ntotal_data['host_response_time'] = total_data['host_response_time'].str.replace('within a day', '24')\ntotal_data['host_response_time'] = total_data['host_response_time'].str.replace('a few days or more', '96')","512504ce":"# \u6d74\u5ba4\/\u6d17\u9762\u6240\u306e\u6570\u3001private\u304b\u5426\u304b\ntotal_data['num_baths'] = total_data['bathrooms_text'].str.extract(r'([0-9]+\\.?[0-9]*)').astype('float', errors='ignore')\ntotal_data['private_bath'] = total_data['bathrooms_text'].str.contains(r'private|Private') * 1\ntotal_data['shared_bath'] = total_data['bathrooms_text'].str.contains(r'shared|Shared') * 1\n\n# \u4e00\u4eba\u3042\u305f\u308a\u306e\u6d74\u5ba4\/\u6d17\u9762\u6240\u306e\u6570\u3001\u30d9\u30c3\u30c9\u306e\u6570 (\u6700\u5927\u4eba\u6570\u6642)\ntotal_data['beds_per_person'] = total_data['beds'].values \/ total_data['accommodates'].values\ntotal_data['bedrooms_per_person'] = total_data['bedrooms'].values \/ total_data['accommodates'].values\ntotal_data['baths_per_person'] = total_data['num_baths'].values \/ total_data['accommodates'].values\n\ncols = ['host_is_superhost', 'host_neighbourhood',\n        'host_has_profile_pic', 'host_identity_verified', 'neighbourhood_cleansed',\n        'property_type', 'room_type', 'bathrooms_text','instant_bookable', 'private_bath', 'shared_bath']","a4c43380":"total_data = label_encoding(total_data, cols) #\u554f\u984c\u306f\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067NA\u3082\u30e9\u30d9\u30eb\u5316","528c92a0":"#nan\u306e\u88dc\u5b8c\ntotal_imputer = pd.DataFrame(KNNImputer(n_neighbors=5).fit_transform(total_data))\ntotal_imputer.columns = total_data.columns","25c261f4":"#\u88dc\u5b8c\u5f8c\u3001float\u5909\u6570\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092int\u5316\ncategorical_features = ['host_is_superhost','host_neighbourhood',\n'host_has_profile_pic','host_identity_verified','neighbourhood_cleansed',\n'property_type','room_type','bathrooms_text','instant_bookable',\n'private_bath','shared_bath']\n\nfor c in categorical_features:\n    #type(x_train_df['host_neighbourhood'].values[0])\n    total_imputer[c] = total_imputer[c].astype(int)","673fc405":"#\u524d\u51e6\u7406\u7d42\u4e86\u3067\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u4f5c\u6210\ntarget = [\"price\"]\nx_train_df = total_imputer[:len(train_data)].copy()\nx_test_df = total_imputer[len(train_data):].copy()\n\ny_train_df = x_train_df[target].values\ny_test_df = x_test_df[target].values\n\n#\u5b66\u7fd2\u30c7\u30fc\u30bf\u304b\u3089\u76ee\u7684\u5909\u6570price\u3092\u524a\u9664\nx_train_df.drop(target, axis=1, inplace=True)\nx_test_df.drop(target, axis=1, inplace=True)","31c3e86d":"c_train = Pool(x_train_df, label=y_train_df,cat_features=categorical_features)  \n\n# Search space\npds = {'depth': (4, 10),\n        'bagging_temperature': (3,10)\n          }\n\n# Surrogate model\noptimizer = BayesianOptimization(cat_hyp, pds, random_state=2100)\n                                  \n# Optimize\nbest_result = optimizer.maximize(init_points=10, n_iter=10)\n\n# \u6700\u3082\u8a55\u4fa1\u304c\u9ad8\u304b\u3063\u305f\u7d50\u679c(\u306eno.)\u3092\u62bd\u51fa\nbest_no = np.argmax(pd.DataFrame(optimizer.res)['target'])","24aced1a":"model = CatBoostRegressor(\n          loss_function='MAE',\n          nan_mode='Min',\n          bagging_temperature=optimizer.res[best_no]['params']['bagging_temperature']\n        )\n\ngrid = {'learning_rate': [0.01, 0.1],\n        'depth': [4, 6, 10],\n        'l2_leaf_reg': [1, 2, 3, 4, 5]}\n\n#3\u30d1\u30e9\u30e1\u30fc\u30bf\u3092CV(\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3)\u3057\u306a\u304c\u3089\u63a2\u7d22\nrandomized_search_result = model.randomized_search(grid,\n                                                   X=x_train_df,\n                                                   y=y_train_df,\n                                                   cv=5,\n                                                   n_iter=15,\n                                                   plot=False,\n                                                   verbose=2)","b7f9fae7":"# \u5165\u308c\u7269\ny_preds = [] # \u4e88\u6e2c\u7d50\u679c\u5165\u308c\u5834\nmodels = []  # \u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u5165\u308c\u5834\nscores = []  # \u4e88\u6e2c\u7d50\u679c\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u8a55\u4fa1\u7f6e\u304d\u5834\n\n# CrossValidation\u306e\u305f\u3081\u3001\u30c7\u30fc\u30bf\u5206\u5272\u306e\u6e96\u5099\nFolds = 5\ncv = KFold(n_splits=Folds, random_state=71, shuffle=True)\n\nmodel = CatBoostRegressor(\n          loss_function='MAE',\n          iterations=5000,\n          random_strength=0.3,\n          nan_mode='Min', #\u6b20\u640d\u5024\u3042\u308a\u306e\u5834\u5408\u306f\u7279\u5fb4\u91cf\u5185\u306e\u6700\u5c0f\u5024\u306b\u7f6e\u304d\u63db\u3048\u3002\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306f\u672a\u5bfe\u5fdc\n          l2_leaf_reg=randomized_search_result['params']['l2_leaf_reg'],\n          bagging_temperature=optimizer.res[best_no]['params']['bagging_temperature'],\n          depth=randomized_search_result['params']['depth'],\n          learning_rate=randomized_search_result['params']['learning_rate'],\n          early_stopping_rounds=100,\n          random_seed=77\n        )\n#depth(int) 4\uff5e10\u304c\u6700\u9069\u306b\u306a\u308b\u3053\u3068\u304c\u591a\u3044\u3002\u304a\u3059\u3059\u3081\u306f6\uff5e10\n#l2_leaf_reg(int) \u6b63\u5247\u5316\u4fc2\u6570\u3002\u6b63\u306e\u5024\u306e\u307f\u3002\u3053\u308c\u3092\u4f7f\u7528\u3059\u308b\u3068learning_rate\u304c\u81ea\u52d5\u8a2d\u5b9a\u3067\u306f\u306a\u304f\u306a\u308b\u3002\n#bagging_temperature(float)\n#has_time(bool) \u6642\u7cfb\u5217\u306a\u3069\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u9806\u5e8f\u304c\u3042\u308b\u5834\u5408\u306b\u4f7f\u7528","401928e9":"for i, (train_ix, val_ix) in tqdm(enumerate(cv.split(x_train_df, y_train_df))):\n    # \u30c7\u30fc\u30bf\u3092\u5206\u5272\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u308b\n    X_train_, y_train_ = x_train_df.iloc[train_ix], y_train_df[train_ix]\n    X_val, y_val = x_train_df.iloc[val_ix], y_train_df[val_ix]    \n    c_train = Pool(X_train_, label=y_train_,cat_features=categorical_features)  \n    c_valid = Pool(X_val,label=y_val, cat_features=categorical_features)\n    # \u5b66\u7fd2\uff01\n    model.fit(c_train,\n    eval_set=c_valid,\n    early_stopping_rounds=100,\n    use_best_model=True,\n    verbose=0,\n    plot=False)\n\n    print(model.tree_count_)\n    print(f\"========================{i+1}\/{Folds} done!========================\")\n\n    # \u6027\u80fd\u8a55\u4fa1\u306e\u305f\u3081\u4e88\u6e2c\n    c_test = Pool(X_val, cat_features=categorical_features)\n    y_pred = model.predict(c_test)\n    # \u4e88\u6e2c\u7d50\u679c\u3092\u3082\u3068\u306b\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\n    score = mean_absolute_error(y_val, y_pred)\n    # \u7d50\u679c\u3092\u5165\u308c\u7269\u306b\u8ffd\u52a0\n    y_preds.append(y_pred)\n    scores.append(score)\n    models.append(model)\nprint(\"===========================\u5b66\u7fd2\u5b8c\u4e86!===============================\")\nprint(f'**********************CV Score is {np.array(scores).mean()}**********************')","f0a99d65":"feature_importances = model.get_feature_importance(c_train)\nfeature_names = x_train_df.columns\nfor score, name in sorted(zip(feature_importances, feature_names), reverse=True):\n    print('{}: {}'.format(name, score))\n    \ndf_importance = pd.DataFrame(zip(feature_importances, feature_names), columns=['Value','Feature'])\ndf_importance.sort_values(by=\"Value\", ascending=False, inplace=True)\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=df_importance)\nplt.title('Feature importance')\nplt.tight_layout()\nplt.show()","442491e1":"c_test = Pool(x_test_df,cat_features=categorical_features)\n\ny_preds=[]\nfor model in models:\n    y_pred = model.predict(c_test)#\u4e88\u6e2c\n    y_preds.append(y_pred)\ny_sub = np.mean(y_preds, axis=0)\ny_sub","44ea65ae":"sub_df=pd.DataFrame({\"index\":test_data.index,\"price\":y_sub})\nsub_df.to_csv(\"submission.csv\",index=False)\nsub_df","01e26a19":"KNN\u30d9\u30fc\u30b9\u3067\u3042\u308bKNNImputer\u306b\u3088\u308anan\u3092\u985e\u4f3c\u30c7\u30fc\u30bf\u3092\u57fa\u306b\u88dc\u5b8c\u3059\u308b","4fe1458d":"CV\u3092\u3057\u306a\u304c\u3089\u5b66\u7fd2\u3002\u5b66\u7fd2\u306e\u3084\u308a\u65b9\u306fstarter #2\u3068\u307b\u307c\u4e00\u7dd2\u3002","3981322e":"\u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\u3082starter 2\u3068\u4e00\u7dd2","83b5425c":"# **\u5b66\u7fd2\u7d50\u679c\u306e\u8868\u793a(\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6)**","95b522dc":"# **\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u2460(\u30d9\u30a4\u30ba\u6700\u9069\u5316)**\ncat_hyp\u306b\u3088\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u3002\u7279\u306bbagging_temerature\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u3002","5fc2c55a":"# **import\u5185\u5bb9**\nstarter 2\u3092\u30d9\u30fc\u30b9\u3068\u3059\u308b\u304c\u3001catboost\u306e\u307f\u306a\u3089\u305a\u3001\u30cf\u30a4\u30d1\u30e9\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306b\u7528\u3044\u308bBayesianOptimization\u3084\u6b20\u640d\u5024\u88dc\u5b8c\u3059\u308bKNNImputer\u306a\u3069\u3092import","8524bee7":"labal_encoding\u306fstarter 2\u3068\u4e00\u7dd2","16b9a4d3":"# **\u30e2\u30c7\u30eb\u3092\u7528\u3044\u305f\u4e88\u6e2c**\nCV\u3067\u51fa\u6765\u305f5\u30e2\u30c7\u30eb\u306e\u7d50\u679c\u3092mean\u3067\u30de\u30fc\u30b8","0927eb4a":"# **Catboost\u306b\u3088\u308b\u5bbf\u6cca\u4fa1\u683c\u4e88\u6e2c**\n\u672c\u30b3\u30f3\u30da\u306b\u304a\u3044\u3066\u306f\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3082\u591a\u304f\u5b58\u5728\u3059\u308b\u3002\u305d\u3053\u3067\u3001\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u304c\u591a\u3044\u554f\u984c\u306b\u5f37\u3044Catboost\u306b\u3088\u308b\u89e3\u6790\u4e8b\u4f8b\u3092\u5171\u6709\u3059\u308b\u3002\u307e\u305f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306a\u3069\u306e\u30ce\u30a6\u30cf\u30a6\u306b\u3064\u3044\u3066\u3082\u5171\u6709\u3059\u308b\u3002\n<br><br>\n\u305f\u3060\u3057\u3001\u30b7\u30c3\u30ab\u30ea\u66f8\u3044\u3066\u3044\u306a\u3044\u3068\u3053\u308d\u3082\u591a\u3044\u70ba\u3001\u7533\u3057\u8a33\u306a\u3044\u3067\u3059\u304c\u8aad\u307f\u89e3\u3044\u3066\u3082\u3089\u3046\u5f62\u304b\u3001<br>\n\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u8cea\u554f\u306a\u3069\u9802\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002<br>\n\u307e\u305f\u3001\u30b4\u30ad\u30b2\u30f3\u306b\u66f8\u304b\u308c\u305f\u30b3\u30fc\u30c9\u3067\u3001\u7d30\u304b\u3044\u6574\u5408\u6027\u3092\u3042\u307e\u308a\u8003\u3048\u3066\u3044\u306a\u3044\u3068\u3053\u308d\u3082\u6ce8\u610f\u3002\n<br><br>\n\u306a\u304a\u3001\u3053\u3061\u3089\u3067\u51fa\u3057\u305fscore\u3092\u63d0\u51fa\u3057\u3066\u3082\u9ad8\u3044\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u60aa\u3057\u304b\u3089\u305a\u3002","28ce2949":"# **\u7d50\u679c\u306e\u63d0\u51fa**","a8c797fa":"# **\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u7528\u95a2\u6570 cat_hyp**\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066\u306f\u307b\u307c\u304a\u307e\u3058\u306a\u3044\u3060\u3068\u601d\u3063\u3066\u9802\u3051\u308c\u3070\u826f\u3044\u304c\u3001bagging_temperature\u3092\u4e2d\u5fc3\u306b\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u95a2\u6570\u3002prams\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3002MAE\u3092\u6700\u5c0f\u5316\u3059\u308b\u305f\u3081\u306bloss\u95a2\u6570\u7b49\u306fMAE\u3092\u6d3b\u7528\u3002cat_feat\u3067\u30ab\u30c6\u30b4\u30ea\u95a2\u6570\u306e\u6307\u5b9a\n\n<\u5f15\u6570><br>\ndepth\uff1a\u6728\u306e\u6df1\u3055<br>\nbagging_temperature\uff1a\u6728\u69cb\u9020\u3092\u3069\u306e\u3088\u3046\u306b\u5206\u5c90\u3057\u305f\u3089loss\u304c\u6539\u5584\u3059\u308b\u304b\u8a08\u7b97\u306e\u969b\u306b\u52a0\u3048\u308b\u904e\u5b66\u7fd2\u9632\u6b62\u306e\u4e57\u6570\n\n\n<\u8fd4\u308a\u5024><br>\ntest-MAE-mean\u304c\u6700\u5c0f\u6642\u306e\u30d1\u30e9\u30e1\u30fc\u30bf","c1d4cd36":"# **\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u2461(\u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1)**\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u2460\u3067\u5b9f\u65bd\u3057\u305fbagging_temerature\u3092\u7528\u3044\u3066\u2460\u3067\u306f\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u304c\u51fa\u6765\u306a\u3044(\u3068\u3044\u3046\u304b\u3001\u51fa\u6765\u306a\u304b\u3063\u305f)learning_rate\u3001depth\u3001l2_leaf_reg\u3092\u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\u3067\u63a2\u7d22\u3059\u308b \u203bdepth\u3082\u6700\u9069\u5024\u304c\u5909\u308f\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u5ff5\u306e\u305f\u3081\u63a2\u7d22","1deebd8d":"# **\u524d\u51e6\u7406**\nstarter2\u3084\u516c\u958b\u6e08\u307f\u30b3\u30fc\u30c9\u3068\u307b\u307c\u4e00\u7dd2\u3002catboost\u7528\u306bnan\u3092\u88dc\u5b8c\u3059\u308b\u51e6\u7406\u7b49\u3092\u4e00\u90e8\u8ffd\u52a0","b8896369":"# **Catboost\u30e2\u30c7\u30eb\u5b66\u7fd2**\nCatboostRegressor\u3092\u30cf\u30a4\u30d1\u30e9\u63a2\u7d22\u3067\u898b\u3064\u3051\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3044\u306a\u304c\u3089\u5b66\u7fd2\u3002\u30e1\u30c1\u30e3\u30af\u30c1\u30e3\u9577\u3044\u30ed\u30b0\u304c\u51fa\u3066\u304f\u308b\u306e\u3067\u6ce8\u610f(\u7573\u3093\u3067\u304f\u3060\u3055\u3044)"}}