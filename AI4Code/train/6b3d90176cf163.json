{"cell_type":{"65bb4c0f":"code","1f3c86a9":"code","5bc12a3a":"code","7e4dc01d":"code","e314bcee":"code","284440c4":"code","bc4cd3d6":"code","e8b5f77a":"code","ba1f45c3":"code","73257363":"markdown","3b29feb0":"markdown","6ff9a774":"markdown","bd1b698b":"markdown","e036dea2":"markdown"},"source":{"65bb4c0f":"import pandas as pd\nfrom pandas.io.json import json_normalize\n\ndef get_covid_data(country_list=None):\n        \"\"\"\n        Takes a list of countries and returns most recent COVID data from Bing API:\n        https:\/\/bing.com\/covid\/data\n        \n        If country list is blank it returns all countries data\n        \"\"\"\n        \n        #Get all COVID data by reading the json from the bing COVID api\n        all_covid_data = pd.DataFrame(list(pd.read_json(\"https:\/\/bing.com\/covid\/data\").areas))\n\n        #Get data based on county ids; Can comment out to use all countires\n        if country_list:\n            selected_covid_data = all_covid_data[all_covid_data[\"id\"].isin(country_list)]\n        else:\n            selected_covid_data = all_covid_data.copy()\n\n        #Normalize json to pull out lower level geo features(i.e state-> county)\n        #If there are no lower levels then return the series\n        def json_norm_levels(series, record_path):\n            normed_df = json_normalize(list(series), record_path)\n            #If nothing to normalize return DF\n            if normed_df.empty:\n                return pd.DataFrame(series)\n            else:\n                return normed_df\n        \n        country_cases = pd.concat(list(selected_covid_data.areas.apply(json_norm_levels, record_path=\"areas\"))\n                                  ,sort=False)\n        \n        #Seperate id levels to get geolocaiton fedelity\n        def list_rev(list_to_rev):\n            list_to_rev.reverse()\n            return list_to_rev\n        \n        breakdown = country_cases.id.str.split(\"_\").apply(list_rev).apply(pd.Series)\n        \n        # If the countries returned do not have county or municipal data make new col\n        # Fill with state\/providence data\n        if len(breakdown.columns) == 2:\n            breakdown[\"county_municipal\"] = None\n            \n        #Rename columns and fill in missing\n        breakdown.columns = [\"country\", \"state_province\", \"county_municipal\"]\n        \n        #Fill missing county data with state and state data with country with indicator\n        breakdown[\"state_province\"].fillna(breakdown[\"country\"] + \"*\", inplace=True)\n        breakdown[\"county_municipal\"].fillna(breakdown[\"state_province\"] + \"*\", inplace=True)\n        \n        #Fill in missing stats data with 0\n        covid_stats_cols = [\"totalConfirmed\",\"totalDeaths\",\"totalRecovered\",\n                            \"totalRecoveredDelta\",\"totalDeathsDelta\",\"totalConfirmedDelta\"]\n        country_cases[covid_stats_cols] = country_cases[covid_stats_cols].astype(\"float\")\n        country_cases[covid_stats_cols] = country_cases[covid_stats_cols].fillna(0)\n        \n        #Add additional stats\n        #Lethality rate\n        country_cases[\"lethality_rate\"] = country_cases[\"totalDeaths\"]\/country_cases[\"totalConfirmed\"]\n        \n        #Recovery rate\n        country_cases[\"recovery_rate\"] = country_cases[\"totalRecovered\"]\/country_cases[\"totalConfirmed\"]\n        \n        #Return combined df\n        return pd.concat([country_cases, breakdown], axis=1)\n\n#Leave blank to get all countires\nall_counrty_cases = get_covid_data()\nall_counrty_cases.sort_values(by=\"recovery_rate\")","1f3c86a9":"#Can also specify certain countires with a list\nspecific_country_cases = get_covid_data([\"spain\", \"germany\", \"russia\"])\nspecific_country_cases.sample(10)","5bc12a3a":"covid_stats_cols = [\"totalConfirmed\",\"totalDeaths\",\"totalRecovered\",\"totalRecoveredDelta\",\n                    \"totalDeathsDelta\",\"totalConfirmedDelta\", \"lethality_rate\", \"recovery_rate\"]\ncountry_sums = all_counrty_cases.groupby(\"country\")[covid_stats_cols].sum()\ncountry_sums.sample(10)","7e4dc01d":"country_sums.describe()","e314bcee":"state_sums = all_counrty_cases.groupby(\"state_province\")[covid_stats_cols].sum()\nstate_sums.sample(10)","284440c4":"state_sums.describe()","bc4cd3d6":"county_sums = all_counrty_cases.groupby(\"county_municipal\")[covid_stats_cols].sum()\ncounty_sums.sample(10)","e8b5f77a":"#Removing the counties\/municipalities that were filled by states and therefore end with *\ncounty_sums_na_removed = county_sums[~county_sums.index.str.endswith(\"*\")]\ncounty_sums_na_removed.sample(10)","ba1f45c3":"county_sums_na_removed.describe()","73257363":"# Sample Statistics","3b29feb0":"# Starter script to simply get most recent COVID stats by detailed locaiton\n\n\n## Motivaiton\nThis is a very simple pyhton script that can be imported\/forked as a strating point for anlysis country based statistics for COVID. There are many APIs and various ways to access the data but this allows for very easy integration into any existing workflow.\n\n## Data\nThe data that feeds this method comes from the [BING API ](https:\/\/bing.com\/covid). It is updated on an hourly basis and pulls from many resources to have the most up to date stats of any references available.\n\n### COVID Stats fields: \n1. \"totalConfirmed\"\n2. \"totalDeaths\"\n3. \"totalRecovered\"\n4. \"totalRecoveredDelta\"\n5. \"totalDeathsDelta\"\n6. \"totalConfirmedDelta\"\n7. \"lethality_rate\"\n8. \"recovery_rate\"\n\nDeltas are updated on a 24 hour rolling window from Zulu\/GMT.\n\n#### If there are more fields anyone thinks are useful let me know in a comment!\n\n\n## Geography\nThe data is broken down by Country --> State\/Province --> County\/Municipality. All of the entries have their Lat\/Long available for mapping or other reference. If lower level data is not avaiable the preceding, less specific, information is filled in with a prefix of * to indicate it is from other column. (i.e Country->State->State* if the County is missing)\n\n## Script","6ff9a774":"## Country Summary","bd1b698b":"## State\/Province Summary","e036dea2":"## County\/Municipality Summary"}}