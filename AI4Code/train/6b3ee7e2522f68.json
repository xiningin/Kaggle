{"cell_type":{"a8b516c0":"code","844957ca":"code","950ef8c6":"code","352751b8":"code","ce0b3b1f":"code","2082a5ad":"code","60892c40":"code","4fe7df50":"code","3cea8229":"code","3250ac78":"code","bc4500b6":"code","a83180c2":"code","76efdca9":"code","2f0231f5":"code","c121296a":"code","7ce96a9f":"code","51ba7fa1":"code","0cb7cb14":"code","8a47e265":"code","a8bad771":"code","d103645e":"code","9d38e99e":"code","88682068":"code","84609e01":"code","c2129401":"code","5cc2c802":"code","33427e6b":"code","6666aba6":"markdown","e70f8bad":"markdown","1ff6641c":"markdown","b08b7069":"markdown","f204ec57":"markdown","99d8dddb":"markdown","8223677a":"markdown","0a313276":"markdown","a5e13263":"markdown","3b9b2cb0":"markdown","a38cbe50":"markdown","516b161c":"markdown","09686108":"markdown","fa23a20e":"markdown","5aa85903":"markdown","d0bd71b8":"markdown","2c25f263":"markdown","e774639c":"markdown","b35fd439":"markdown","e748fda8":"markdown","f4d59292":"markdown"},"source":{"a8b516c0":"from datetime import datetime\nimport numpy as np             #for numerical computations like log,exp,sqrt etc\nimport pandas as pd            #for reading & storing data, pre-processing\nimport matplotlib.pylab as plt #for visualization\n#for making sure matplotlib plots are generated in Jupyter notebook itself\n%matplotlib inline             \nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 10, 6","844957ca":"path = \"\/media\/gargi\/Data\/DataSets\/CocaCola_Sales_Rawdata.xlsx\" #For Kaggle\ndataset = pd.read_excel(path)\ndataset['Quarter'] = pd.to_datetime(dataset['Quarter'],infer_datetime_format=True) #convert from string to datetime\nindexedDataset = dataset.set_index(['Quarter'])\nindexedDataset.head(5)","950ef8c6":"## plot graph\nplt.xlabel('Date')\nplt.ylabel('Number of air passengers')\nplt.plot(indexedDataset)","352751b8":"#Determine rolling statistics\nrolmean = indexedDataset.rolling(window=12).mean() #window size 12 denotes 12 months, giving rolling mean at yearly level\nrolstd = indexedDataset.rolling(window=12).std()\nprint(rolmean,rolstd)","ce0b3b1f":"#Plot rolling statistics\norig = plt.plot(indexedDataset, color='blue', label='Original')\nmean = plt.plot(rolmean, color='red', label='Rolling Mean')\nstd = plt.plot(rolstd, color='black', label='Rolling Std')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation')\nplt.show(block=False)","2082a5ad":"#Perform Augmented Dickey\u2013Fuller test:\nprint('Results of Dickey Fuller Test:')\ndftest = adfuller(indexedDataset['Sales'], autolag='AIC')\n\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\n    \nprint(dfoutput)\n","60892c40":"#Estimating trend\nindexedDataset_logScale = np.log(indexedDataset)\nplt.plot(indexedDataset_logScale)","4fe7df50":"#The below transformation is required to make series stationary\nmovingAverage = indexedDataset_logScale.rolling(window=12).mean()\nmovingSTD = indexedDataset_logScale.rolling(window=12).std()\nplt.plot(indexedDataset_logScale)\nplt.plot(movingAverage, color='red')","3cea8229":"datasetLogScaleMinusMovingAverage = indexedDataset_logScale - movingAverage\ndatasetLogScaleMinusMovingAverage.head(12)\n\n#Remove NAN values\ndatasetLogScaleMinusMovingAverage.dropna(inplace=True)\ndatasetLogScaleMinusMovingAverage.head(10)","3250ac78":"def test_stationarity(timeseries):\n    \n    #Determine rolling statistics\n    movingAverage = timeseries.rolling(window=12).mean()\n    movingSTD = timeseries.rolling(window=12).std()\n    \n    #Plot rolling statistics\n    orig = plt.plot(timeseries, color='blue', label='Original')\n    mean = plt.plot(movingAverage, color='red', label='Rolling Mean')\n    std = plt.plot(movingSTD, color='black', label='Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n    \n    #Perform Dickey\u2013Fuller test:\n    print('Results of Dickey Fuller Test:')\n    dftest = adfuller(dataset['Sales'], autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print(dfoutput)\n    ","bc4500b6":"test_stationarity(datasetLogScaleMinusMovingAverage)","a83180c2":"exponentialDecayWeightedAverage = indexedDataset_logScale.ewm(halflife=12, min_periods=0, adjust=True).mean()\nplt.plot(indexedDataset_logScale)\nplt.plot(exponentialDecayWeightedAverage, color='red')","76efdca9":"datasetLogScaleMinusExponentialMovingAverage = indexedDataset_logScale - exponentialDecayWeightedAverage\ntest_stationarity(datasetLogScaleMinusExponentialMovingAverage)","2f0231f5":"datasetLogDiffShifting = indexedDataset_logScale - indexedDataset_logScale.shift()\nplt.plot(datasetLogDiffShifting)","c121296a":"datasetLogDiffShifting.dropna(inplace=True)\ntest_stationarity(datasetLogDiffShifting)","7ce96a9f":"decomposition = seasonal_decompose(indexedDataset_logScale) \n\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\nplt.subplot(411)\nplt.plot(indexedDataset_logScale, label='Original')\nplt.legend(loc='best')\n\nplt.subplot(412)\nplt.plot(trend, label='Trend')\nplt.legend(loc='best')\n\nplt.subplot(411)\nplt.plot(seasonal, label='Seasonality')\nplt.legend(loc='best')\n\nplt.subplot(411)\nplt.plot(residual, label='Residuals')\nplt.legend(loc='best')\n\nplt.tight_layout()\n\n#there can be cases where an observation simply consisted of trend & seasonality. In that case, there won't be \n#any residual component & that would be a null or NaN. Hence, we also remove such cases.\ndecomposedLogData = residual\ndecomposedLogData.dropna(inplace=True)\ntest_stationarity(decomposedLogData)","51ba7fa1":"decomposedLogData = residual\ndecomposedLogData.dropna(inplace=True)\ntest_stationarity(decomposedLogData)","0cb7cb14":"#ACF & PACF plots\n\nlag_acf = acf(datasetLogDiffShifting, nlags=15)\nlag_pacf = pacf(datasetLogDiffShifting, nlags=15, method='ols')\n\n#Plot ACF:\nplt.subplot(121)\nplt.plot(lag_acf)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(datasetLogDiffShifting)), linestyle='--', color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(datasetLogDiffShifting)), linestyle='--', color='gray')\nplt.title('Autocorrelation Function')            \n\n#Plot PACF\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(datasetLogDiffShifting)), linestyle='--', color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(datasetLogDiffShifting)), linestyle='--', color='gray')\nplt.title('Partial Autocorrelation Function')\n            \nplt.tight_layout()            ","8a47e265":"#AR Model\n#making order=(2,1,0) gives RSS=1.5023\nmodel = ARIMA(indexedDataset_logScale, order=(2,1,0))\nresults_AR = model.fit(disp=-1)\nplt.plot(datasetLogDiffShifting)\nplt.plot(results_AR.fittedvalues, color='red')\nplt.title('RSS: %.4f'%sum((results_AR.fittedvalues - datasetLogDiffShifting['Sales'])**2))\nprint('Plotting AR model')","a8bad771":"#MA Model\nmodel = ARIMA(indexedDataset_logScale, order=(0,1,2))\nresults_MA = model.fit(disp=-1)\nplt.plot(datasetLogDiffShifting)\nplt.plot(results_MA.fittedvalues, color='red')\nplt.title('RSS: %.4f'%sum((results_MA.fittedvalues - datasetLogDiffShifting['Sales'])**2))\nprint('Plotting MA model')","d103645e":"# AR+I+MA = ARIMA model\nmodel = ARIMA(indexedDataset_logScale, order=(2,1,2))\nresults_ARIMA = model.fit(disp=-1)\nplt.plot(datasetLogDiffShifting)\nplt.plot(results_ARIMA.fittedvalues, color='red')\nplt.title('RSS: %.4f'%sum((results_ARIMA.fittedvalues - datasetLogDiffShifting['Sales'])**2))\nprint('Plotting ARIMA model')","9d38e99e":"predictions_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy=True)\nprint(predictions_ARIMA_diff.head())","88682068":"#Convert to cumulative sum\npredictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()\nprint(predictions_ARIMA_diff_cumsum)","84609e01":"predictions_ARIMA_log = pd.Series(indexedDataset_logScale['Sales'].iloc[0], index=indexedDataset_logScale.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum, fill_value=0)\npredictions_ARIMA_log.head()","c2129401":"# Inverse of log is exp.\npredictions_ARIMA = np.exp(predictions_ARIMA_log)\nplt.plot(indexedDataset)\nplt.plot(predictions_ARIMA)","5cc2c802":"indexedDataset_logScale","33427e6b":"results_ARIMA.plot_predict(1,264) \n","6666aba6":"From above graph, we see that even though rolling mean is not stationary, it is still better than the previous case, where no transfromation were applied to series. So we can atleast say that we are heading in the right direction.\n\nWe know from above graph that both the Time series with log scale as well as its moving average have a trend component. Thus we can apply a elementary intuition: subtraction one from the other should remove the trend component of both. Its like:\n\n\ud835\udc59\ud835\udc5c\ud835\udc54\ud835\udc60\ud835\udc50\ud835\udc4e\ud835\udc59\ud835\udc52\ud835\udc3f=\ud835\udc60\ud835\udc61\ud835\udc4e\ud835\udc61\ud835\udc56\ud835\udc5c\ud835\udc5b\ud835\udc4e\ud835\udc5f\ud835\udc66\ud835\udc5d\ud835\udc4e\ud835\udc5f\ud835\udc61(\ud835\udc3f1)+\ud835\udc61\ud835\udc5f\ud835\udc52\ud835\udc5b\ud835\udc51(\ud835\udc3f\ud835\udc47) \n\ud835\udc5a\ud835\udc5c\ud835\udc63\ud835\udc56\ud835\udc5b\ud835\udc54\ud835\udc4e\ud835\udc63\ud835\udc54\ud835\udc5c\ud835\udc53\ud835\udc59\ud835\udc5c\ud835\udc54\ud835\udc60\ud835\udc50\ud835\udc4e\ud835\udc59\ud835\udc52\ud835\udc34=\ud835\udc60\ud835\udc61\ud835\udc4e\ud835\udc61\ud835\udc56\ud835\udc5c\ud835\udc5b\ud835\udc4e\ud835\udc5f\ud835\udc66\ud835\udc5d\ud835\udc4e\ud835\udc5f\ud835\udc61(\ud835\udc341)+\ud835\udc61\ud835\udc5f\ud835\udc52\ud835\udc5b\ud835\udc51(\ud835\udc34\ud835\udc47) \n\ud835\udc5f\ud835\udc52\ud835\udc60\ud835\udc62\ud835\udc59\ud835\udc61\ud835\udc60\ud835\udc52\ud835\udc5f\ud835\udc56\ud835\udc52\ud835\udc60\ud835\udc45=\ud835\udc3f\u2212\ud835\udc34=(\ud835\udc3f1+\ud835\udc3f\ud835\udc47)\u2212(\ud835\udc341+\ud835\udc34\ud835\udc47)=(\ud835\udc3f1\u2212\ud835\udc341)+(\ud835\udc3f\ud835\udc47\u2212\ud835\udc34\ud835\udc47) \nSince, L & A are series & it moving avg, their trend will be more or less same, Hence\nLT-AT nearly equals to 0\n\nThus trend component will be almost removed. And we have,\n\n\ud835\udc45=\ud835\udc3f1\u2212\ud835\udc341 , our final non-trend curve","e70f8bad":"From above 2 graphs, we can see that, visually this is the best result as our series along with rolling statistic values of moving avg & moving std. dev. is very much flat & stationary. But, the ADCF test shows us that:\n\n1.p-value of 0.02 is not as good as 0.006 of Log scale transformation.\n2.Test Statistic value not as close to the critical values as that for Log scale transformation .\nWe have thus tried out 3 different transformation: log, exp decay & time shift. For simplicity, we will go with the log scale. The reason for doing this is that we can revert back to the original scale during forecasting.\n\nLet us now break down the 3 components of the log scale series using a system libary function. Once, we separate our the components, we can simply ignore trend & seasonality and check on the nature of the residual part.","1ff6641c":"# Time Shift Transformation ","b08b7069":"# Import Libraries ","f204ec57":"There are a couple of ways to achieve stationarity through data transformation like taking  \ud835\udc59\ud835\udc5c\ud835\udc5410 , \ud835\udc59\ud835\udc5c\ud835\udc54\ud835\udc52 , square, square root, cube, cube root, exponential decay, time shift and so on ...\n\nIn our notebook, lets start of with log transformations. Our objective is to remove the trend component. Hence, flatter curves( ie: paralle to x-axis) for time series and rolling mean after taking log would say that our data transformation did a good job.","99d8dddb":"# Log Scale Transformation ","8223677a":"From above graph, we observe that our intuition that *\"subtracting two related series having similar trend components will make the result stationary\"* is true. We find that:\n\np-value has reduced from 0.99 to 0.006.\nThe critical values at 1%,5%,10% confidence intervals are pretty close to the Test Statistic. Thus, from above 2 points, we can say that our given series is stationary.\nBut, in the spirit of getting higher accuracy, let us explore & try to find a better scale than our current log.\n\nLet us try out Exponential decay.\n","0a313276":"We observe that the Time Series is stationary & also the series for moving avg & std. dev. is almost parallel to x-axis thus they also have no trend.\nAlso,\n\n1.p-value has increased from 0.006 to 0.388.\n2.Test Statistic value is not very much closer to the Critical values.\nBoth the points say that our current transformation is not better than the previous logarithmic transformation. Even though, we couldn't observe any differences by visually looking at the graphs, the tests confirmed logarithmic to be  much better.\nBut lets try one more time & find if an even better solution exists. We will try out the simple time shift technique, which is simply:\n\nGiven a set of observation on the time series:\n\ud835\udc650,\ud835\udc651,\ud835\udc652,\ud835\udc653,....\ud835\udc65\ud835\udc5b \n\nThe shifted values will be:\n\ud835\udc5b\ud835\udc62\ud835\udc59\ud835\udc59,\ud835\udc650,\ud835\udc651,\ud835\udc652,....\ud835\udc65\ud835\udc5b  <---- basically all xi's shifted by 1 pos to right\n\nThus, the time series with time shifted values are:\n\ud835\udc5b\ud835\udc62\ud835\udc59\ud835\udc59,(\ud835\udc651\u2212\ud835\udc650),(\ud835\udc652\u2212\ud835\udc651),(\ud835\udc653\u2212\ud835\udc652),(\ud835\udc654\u2212\ud835\udc653),....(\ud835\udc65\ud835\udc5b\u2212\ud835\udc65\ud835\udc5b\u22121)","a5e13263":"By combining AR & MA into ARIMA, we see that RSS value has decreased from either case , indicating ARIMA to be better than its individual component models.\n\nWith the ARIMA model built, we will now generate predictions. But, before we do any plots for predictions ,we need to reconvert the predictions back to original form. This is because, our model was built on log transformed data.","3b9b2cb0":"For a Time series to be stationary, its ADCF test should have:\n\np-value to be low (according to the null hypothesis)\nThe critical values at 1%,5%,10% confidence intervals should be as close as possible to the Test Statistics\nFrom the above ADCF test result, we see that p-value(at max can be 1.0) is very large. Also critical values are no where close to the Test Statistics. Hence, we can safely say that our Time Series at the moment is not stationary","a38cbe50":"# Prediction & Reverse transformations","516b161c":"From above graph, it seems that exponential decay is not holding any advantage over log scale as both the corresponding curves are similar. But, in statistics, inferences cannot be drawn simply by looking at the curves. Hence, we perform the ADCF test again on the decay series below.","09686108":"# Read Data \nTime series deals with 2 columns, one is temporal ie: quarter in this case & another is the value to be forecasted ie: cococola sales. To make plotting graphs easier, we set the index of pandas dataframe to the quarter. During plots, the index will act by default as the x-axis & since it has only 1 more column, that will be automatically taken as the y-axis","fa23a20e":"# Building Models","5aa85903":"# Data Transformation to achieve Stationarity","d0bd71b8":"From the ACF graph, we see that curve touches y=0.0 line at x=1. Thus, from theory, Q = 1 From the PACF graph, we see that curve touches y=0.0 line at x=1. Thus, from theory, 1 = 2\n\nARIMA is AR + I + MA. Before, we see an ARIMA model, let us check the results of the individual AR & MA model. Note that, these models will give a value of RSS. Lower RSS values indicate a better model.","2c25f263":"# Plotting ACF & PACF ","e774639c":"From the above graph, we see that rolling mean itself has a trend component even though rolling standard deviation is fairly constant with time. For our time series to be stationary, we need to ensure that both the rolling statistics ie: mean & std. dev. remain time invariant or constant with time. Thus the curves for both of them have to be parallel to the x-axis, which in our case is not so.\n\nTo further augment our hypothesis that the time series is not stationary, let us perform the ADCF test.\n\n","b35fd439":"# Exponential Decay Transformation ","e748fda8":"From the plot below, we can see that there is a Trend compoenent in th series. Hence, we now check for stationarity of the data","f4d59292":"We see that our predicted forecasts are close to the real time series values indicating a fairly accurate model."}}