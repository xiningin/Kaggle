{"cell_type":{"dc62931f":"code","e4bc7568":"code","5bcd1df8":"code","c8410d2c":"code","a55e11c8":"code","37df3a54":"code","05ebcffa":"code","3f8ba689":"code","387ce16d":"code","a4ff7c7e":"code","f3da01e4":"code","6f2e97db":"code","d97919f6":"code","da2a33c0":"code","e0ec814c":"code","b22a9e1c":"code","eaa8a62b":"code","d49891e8":"code","eaa37d30":"code","72f7de65":"code","0da4fadf":"code","c2740ab9":"code","653a5808":"code","b60e5499":"code","5e72abd3":"code","917fd762":"code","a10c7fa4":"code","6bdb3b1b":"code","b2cb4a92":"code","b7a0f415":"code","0882baa1":"code","5d637665":"code","a046b119":"code","2b6a7f63":"code","00d6c895":"code","9f5fab9c":"code","09aff17c":"code","4e15dda6":"code","024b07bb":"code","3756c62d":"code","80e075c2":"code","3555f67a":"code","885c68e9":"code","d4f18716":"code","654d3574":"code","74ab26fb":"code","2ae54869":"code","30e0a9fb":"code","c189e47f":"code","3ef50cea":"code","1696308f":"code","89f6433e":"code","fc535296":"code","602e1ff2":"code","45214c2c":"code","72de2cf1":"code","05b8d4ed":"code","00de5a43":"code","6e0fdba7":"code","76bafdb3":"code","2e6d69b8":"code","17ef4357":"code","0ab55d48":"code","75d3d730":"code","520cd233":"code","c9c0b505":"code","c3fb3e29":"code","63cfdb92":"code","f51be453":"code","1b171828":"code","501bc852":"code","119e3072":"code","ee4991df":"code","e103080d":"code","261a0a20":"code","451a1fa9":"code","78ac96ea":"code","ac685ac4":"code","6876b7aa":"code","c58df884":"code","92568527":"code","52f3c60b":"code","2de9c5cc":"code","02ab9e3f":"code","939f9ed0":"code","a4482cb2":"code","5a1c0a7e":"code","32fbe3be":"markdown","2ffa9207":"markdown","c297753b":"markdown","965c963e":"markdown","f15f5997":"markdown","bef555b7":"markdown","8d936d43":"markdown","2523becc":"markdown","8a184c09":"markdown","0adb4e67":"markdown","db553311":"markdown","9543b21e":"markdown","d353261d":"markdown","6be8533c":"markdown","f9a5b2a3":"markdown","a9edbc71":"markdown","66a9c7d0":"markdown","ec86d65f":"markdown","e4542c26":"markdown","a5c1d909":"markdown","e594babe":"markdown","4330f9cf":"markdown","399d326e":"markdown","8754ca83":"markdown","a0c4957f":"markdown","269ef868":"markdown","ff7748b1":"markdown","e3af7b50":"markdown","be452c39":"markdown","357f23b5":"markdown","c740397e":"markdown","0d940dab":"markdown","102e34e2":"markdown","aab6f3a2":"markdown","3198fe2b":"markdown","0b6120d7":"markdown","6fdf3598":"markdown","108eafdf":"markdown","0d4ac9f2":"markdown","133ad8be":"markdown","117e3b85":"markdown","ae8dde56":"markdown","26d409f4":"markdown","8701458a":"markdown","d6ea2aa8":"markdown","3bdcd949":"markdown","ee6207b2":"markdown","93935d6f":"markdown","6959313a":"markdown","85087890":"markdown","769dd55e":"markdown","657fa935":"markdown","00845911":"markdown","0dd0bdec":"markdown","84340cbd":"markdown","a7fc568e":"markdown","4c861ee2":"markdown","92c8207f":"markdown","e787bf92":"markdown","515ce28e":"markdown","6da30569":"markdown","3f8f38a6":"markdown","ebd9fc50":"markdown","3d016920":"markdown","36a19552":"markdown","9ff76860":"markdown","a47dab6e":"markdown","f23fc752":"markdown","677c833f":"markdown","7514d254":"markdown","7ff72e8d":"markdown","20c9bda4":"markdown","6cc7c4ea":"markdown","b71a5f5c":"markdown","a8d0db8d":"markdown","32768b4f":"markdown","09d2bbd5":"markdown"},"source":{"dc62931f":"!pip install joypy\nimport joypy","e4bc7568":"!pip install pywaffle\nfrom pywaffle import Waffle","5bcd1df8":"!pip install calmap\nimport calmap","c8410d2c":"import os\nimport numpy as np\n\nimport pandas as pd\nfrom pandas.plotting import andrews_curves\nfrom pandas.plotting import parallel_coordinates\n\nfrom sklearn.cluster import AgglomerativeClustering\n\nimport seaborn as sns\n\n#matplotlib and related imports\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.path import Path\nfrom matplotlib.patches import PathPatch\nfrom matplotlib.patches import Patch\nimport matplotlib.patches as patches\n\nfrom scipy.spatial import ConvexHull\nfrom scipy.signal import find_peaks\nfrom scipy.stats import sem\nimport scipy.cluster.hierarchy as shc\n\nimport squarify\n\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport statsmodels.tsa.stattools as stattools\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\nfrom dateutil.parser import parse\n\nfrom IPython.display import Image\n\nimport geopandas\nimport folium\nfrom folium.plugins import TimeSliderChoropleth\nfrom branca.element import Template, MacroElement\n\ndef print_files():\n    for dirname, _, filenames in os.walk('\/kaggle\/input'):\n        for filename in filenames:\n            print(os.path.join(dirname, filename))","a55e11c8":"# ----------------------------------------------------------------------------------------------------\n# get the data\nX = np.linspace(-np.pi, np.pi, 256, endpoint=True)\nC, S = np.cos(X), np.sin(X)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (15, 5))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nax.plot(X,S, color = \"red\", alpha = 0.5, lw = 3, label = \"Sine\")\nax.plot(X,C, color = \"green\", alpha = 0.5, lw = 3, label = \"Cosine\")\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# change the x and y limit\nplt.xlim(X.min()*1.5, X.max()*1.5)\nplt.ylim(C.min()*1.5, C.max()*1.5)\n\n# change the ticks\n# ticks are just a way to 'change the values' represented on the x and y axis\nplt.xticks(\n    [-np.pi, -np.pi\/2, 0, np.pi\/2, np.pi],\n    [r'$-\\pi$', r'$-\\pi\/2$', r'$0$', r'$+\\pi\/2$', r'$+\\pi$'] # r before each string means raw string\n)\n\nplt.yticks(\n    [-1, 0, +1],\n    [r'$-1$', r'$0$', r'$+1$']\n)\n\n# removes the right and top spines\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\n# changes the position of the other spines\nax.xaxis.set_ticks_position('bottom')\nax.spines['bottom'].set_position(('data',0))\nax.spines['bottom'].set_color('black') # this helps change the color\nax.spines['bottom'].set_alpha(.3) # and adds some transparency to the spines\n\nax.yaxis.set_ticks_position('left')\nax.spines['left'].set_position(('data',0))\nax.spines['left'].set_color('black')\nax.spines['left'].set_alpha(.3)\n\n# annotate different values\nt = 2*np.pi\/3\n# plot a straight line to connect different points\nplt.plot([t, t], [0, np.sin(t)], color ='red', linewidth = 1.5, linestyle = \"--\", alpha = 0.5)\nplt.scatter(t, np.sin(t), 50, color ='red', alpha = 0.5)\nplt.annotate(r'$\\sin(\\frac{2\\pi}{3})=\\frac{\\sqrt{3}}{2}$' + \"\\nNotice that the arrows are optional\",\n             xy = (t, np.sin(t)), \n             xycoords = 'data',\n             fontsize = 16)\n\n# do the same for cosine\nplt.plot([t, t], [0, np.cos(t)], color = 'green', linewidth = 1.5, linestyle = \"--\", alpha = 0.5)\nplt.scatter(t, np.cos(t), 50, color = 'green', alpha = 0.5)\nplt.annotate(r'$\\cos(\\frac{2\\pi}{3})=-\\frac{1}{2}$',\n             xy = (t, np.cos(t)), \n             xycoords = 'data',\n             xytext = (t\/2, -1), \n             fontsize = 16,\n             arrowprops = dict(arrowstyle = \"->\", connectionstyle = \"arc3,rad=.2\"))\n\n# adjust the x and y ticks\nfor label in ax.get_xticklabels() + ax.get_yticklabels():\n    label.set_fontsize(16)\n    label.set_bbox(dict(facecolor = 'white', edgecolor = 'None', alpha = 0.65 ))\n    \n# add the title adn a legend\nplt.title(\"Sine and Cosine functions (Original by N. Rougier)\")\nplt.legend(loc = \"upper left\", fontsize = 12);","37df3a54":"# create the figure\nfig = plt.figure()\n\n# add a subplot to the figure (the explicit way)\n# Passing the numbers is optional and you can pass 111 but I will stick with this way. \n# That's why I call it explicit way.\n# 1, 1, 1 means: 1 axes in a 1 row 1 column grid. More on this later.\nax1 = fig.add_subplot(1, 1, 1)\n\n# some data\nx = [1, 2, 3, 4, 5]\ny = [3, 2, 1, 4, 5]\n\n# plot basic things\nax1.plot(x, y);","05ebcffa":"# the same plot can be achieved doing this way\nfig = plt.figure()\nax1 = fig.subplots()\nax1.plot(x, y);","3f8ba689":"# you can even simplify it more by just doing this\nplt.plot(x, y);","387ce16d":"# we can also achieve the same using plt.axes\nax1 = plt.axes()\nax1.plot(x, y);","a4ff7c7e":"# and also using plt.subplot\nax1 = plt.subplot()\nax1.plot(x, y);","f3da01e4":"# now let's to the same but using add_axes()\n\n# create the figure\nfig = plt.figure()\n# add axes\nfig.add_axes()\n# gca is get current axes, since matplotlib always plots on the current axes.\nax1 = plt.gca()\n# plot\nax1.plot(x, y);","6f2e97db":"# or doing the same just using axes\nax1 = plt.axes()\nax1.plot(x, y);","d97919f6":"fig = plt.figure()\n# create a 4 plots and use tuple unpacking to name everyplot\n(ax1, ax2), (ax3, ax4) = fig.subplots(2,2)\nax1.plot([1,2,3], color = \"red\")\nax2.plot([3,2,1], color = \"blue\")\nax3.plot([4,4,4], color = \"orange\")\nax4.plot([5,4,5], color = \"black\")\nplt.tight_layout()","da2a33c0":"# you can do the same using a for loop\nnrows = 2\nncolumns = 2\nfig, axes = plt.subplots(nrows, ncolumns)\n\n# axes is just a tuple as we saw before\n# since se specified \nfor row in range(nrows):\n    for column in range(ncolumns):\n        ax = axes[row, column]\n        ax.plot(np.arange(10))","e0ec814c":"# Look at all the crazy stuff matplotlib allows you to do.\n\nfig = plt.figure(figsize = (20, 10))\n# create a 4 plots and use tuple unpacking to name everyplot\n(ax1, ax2), (ax3, ax4) = fig.subplots(2,2)\nax1.plot([1,2,3], color = \"red\")\n\nax2.plot([3,2,1], color = \"blue\")\n\nax3.plot([4,4,4], color = \"orange\")\nax3_bis = fig.add_axes([0.15, 0.15, 0.15, 0.15])\nax3_bis.plot([1,2,1], color = \"pink\") # you add it to the figure!\nax3_bis.annotate(\"Small annotation inside a small added axes\",\n                xy = (0.5, 0.5),\n                xycoords = \"axes fraction\",\n                va = \"center\",\n                ha = \"center\")\n\nax4.plot([5,4,5], color = \"black\")\n_ = ax4.annotate(\"Just to demonstrate the power of matplotlib\", \n             xy = (0.5, 0.5), # fraction of the ax4. In the center.\n             xycoords = \"axes fraction\", # you can also specify data and pass the values of the x and y axis.\n             va = \"center\",\n             ha = \"center\")\n\nplt.tight_layout()","b22a9e1c":"fig = plt.figure()\ngs = fig.add_gridspec(2, 2)\nax1 = fig.add_subplot(gs[0,0])\nax1.plot([1,2,3,])\nax2 = fig.add_subplot(gs[0,1])\nax2.plot([1,3,1,])\nax3 = fig.add_subplot(gs[1,0])\nax3.plot([3,2,1,])\nax4 = fig.add_subplot(gs[1,1])\nax4.plot([3,1,3,])\nplt.tight_layout()","eaa8a62b":"fig = plt.figure(figsize = (10, 5))\ngs = fig.add_gridspec(3, 3)\nax1 = fig.add_subplot(gs[0, :])\nax1.plot([1,2,1,2])\nax1.set_title(\"Random text\")\nax2 = fig.add_subplot(gs[1,0])\nax2.plot(1,3,1)\nax3 = fig.add_subplot(gs[1,1])\nax3.plot(3,1,3)\nax4 = fig.add_subplot(gs[2,:-1])\nax4.scatter([1,2,3], [1,2,3])\nax5 = fig.add_subplot(gs[1:, -1])\nax5.bar([1,2,3], [1,2,3])\nax5_bis = fig.add_axes([0.75, 0.5, 0.1, 0.1])\nax5_bis.plot([3,1,2])\nplt.tight_layout()","d49891e8":"# Remmember, use this function to see all the data available for this challenge.\nprint_files()","eaa37d30":"# Useful for:\n# Visualize the relationship between data.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Scatter_plot\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/midwest_filter.csv' \ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (12, 6))\nax = fig.add_subplot(1,1,1,)\n\n# ----------------------------------------------------------------------------------------------------\n# iterate over each category and plot the data. This way, every group has it's own color. Otherwise everything would be blue\nfor cat in sorted(list(df[\"category\"].unique())):\n    # filter x and the y for each category\n    ar = df[df[\"category\"] == cat][\"area\"]\n    pop = df[df[\"category\"] == cat][\"poptotal\"]\n    \n    # plot the data\n    ax.scatter(ar, pop, label = cat, s = 10)\n    \n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# eliminate 2\/4 spines (lines that make the box\/axes) to make it more pleasant\nax.spines[\"top\"].set_color(\"None\") \nax.spines[\"right\"].set_color(\"None\")\n\n# set a specific label for each axis\nax.set_xlabel(\"Area\") \nax.set_ylabel(\"Population\")\n\n# change the lower limit of the plot, this will allow us to see the legend on the left\nax.set_xlim(-0.01) \nax.set_title(\"Scatter plot of population vs area.\")\nax.legend(loc = \"upper left\", fontsize = 10);","72f7de65":"# Useful for:\n# Visualize the relationship between data but also helps us encircle a specific group we might want to draw the attention to.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Scatter_plot\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/midwest_filter.csv' \ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (12, 6))\nax = fig.add_subplot(1,1,1,)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\nsize_total = df[\"poptotal\"].sum()\n# we want every group to have a different marker\nmarkers = [\".\", \",\", \"o\", \"v\", \"^\", \"<\", \">\", \"1\", \"2\", \"3\", \"4\", \"8\", \"s\", \"p\", \"P\", \"*\", \"h\", \"H\", \"+\", \"x\", \"X\", \"D\", \"d\"] \n\n# ----------------------------------------------------------------------------------------------------\n# iterate over each category and plot the data. This way, every group has it's own color and marker.\nfor cat, marker in zip(sorted(list(df[\"category\"].unique())), markers):\n    # filter x and the y for each category\n    ar = df[df[\"category\"] == cat][\"area\"]\n    pop = df[df[\"category\"] == cat][\"poptotal\"]\n    \n    # this will allow us to set a specific size for each group.\n    size = pop\/size_total\n    \n    # plot the data\n    ax.scatter(ar, pop, label = cat, s = size*10000, marker = marker)\n\n# ----------------------------------------------------------------------------------------------------\n# create an encircle\n# based on this solution\n# https:\/\/stackoverflow.com\/questions\/44575681\/how-do-i-encircle-different-data-sets-in-scatter-plot\n\n# steps to take:\n\n# filter a specific group\nencircle_data = df[df[\"state\"] == \"IN\"]\n\n# separete x and y\nencircle_x = encircle_data[\"area\"]\nencircle_y = encircle_data[\"poptotal\"]\n\n# np.c_ concatenates over the second axis\np = np.c_[encircle_x,encircle_y]\n\n# uing ConvexHull (we imported it before) to calculate the limits of the polygon\nhull = ConvexHull(p)\n\n# create the polygon with a specific color based on the vertices of our data\/hull\npoly = plt.Polygon(p[hull.vertices,:], ec = \"orange\", fc = \"none\")\n\n# add the patch to the axes\/plot)\nax.add_patch(poly)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# eliminate 2\/4 spines (lines that make the box\/axes) to make it more pleasant\nax.spines[\"top\"].set_color(\"None\")\nax.spines[\"right\"].set_color(\"None\")\n\n# set a specific label for each axis\nax.set_xlabel(\"Area\")\nax.set_ylabel(\"Population\")\n\n# change the lower limit of the plot, this will allow us to see the legend on the left\nax.set_xlim(-0.01) \nax.set_title(\"Bubble plot with encircling\")\nax.legend(loc = \"upper left\", fontsize = 10);","0da4fadf":"# Useful for:\n# Visualize the relationship between data but also helps us encircle a specific group we might want to draw the attention to.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Scatter_plot\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/midwest_filter.csv' \ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (12, 6))\nax = fig.add_subplot(1,1,1,)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\nsize_total = df[\"poptotal\"].sum()\n# we want every group to have a different marker\nmarkers = [\".\", \",\", \"o\", \"v\", \"^\", \"<\", \">\", \"1\", \"2\", \"3\", \"4\", \"8\", \"s\", \"p\", \"P\", \"*\", \"h\", \"H\", \"+\", \"x\", \"X\", \"D\", \"d\"] \n\n# ----------------------------------------------------------------------------------------------------\n# create an encircle\n# based on this solution\n# https:\/\/stackoverflow.com\/questions\/44575681\/how-do-i-encircle-different-data-sets-in-scatter-plot\ndef encircle(x,y, ax = None, **kw):\n    '''\n    Takes an axes and the x and y and draws a polygon on the axes.\n    This code separates the differents clusters\n    '''\n    # get the axis if not passed\n    if not ax: ax=plt.gca()\n    \n    # concatenate the x and y arrays\n    p = np.c_[x,y]\n    \n    # to calculate the limits of the polygon\n    hull = ConvexHull(p)\n    \n    # create a polygon from the hull vertices\n    poly = plt.Polygon(p[hull.vertices,:], **kw)\n    \n    # add the patch to the axes\n    ax.add_patch(poly)\n\n# ----------------------------------------------------------------------------------------------------\n# iterate over each category and plot the data. This way, every group has it's own color and marker.\n# on the iteration we will calculate our hull\/polygon for each group and connect specific groups\nfor cat, marker in zip(sorted(list(df[\"category\"].unique())), markers):\n    # filter x and the y for each category\n    ar = df[df[\"category\"] == cat][\"area\"]\n    pop = df[df[\"category\"] == cat][\"poptotal\"]\n    \n    # this will allow us to set a specific size for each group.\n    size = pop\/size_total\n    \n    # plot the data\n    ax.scatter(ar, pop, label = cat, s = size*10000, marker = marker)\n    \n    try:\n        # try to add a patch\n        encircle(ar, pop, ec = \"k\", alpha=0.1)\n    except:\n        # if we don't have enough poins to encircle just pass\n        pass\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# eliminate 2\/4 spines (lines that make the box\/axes) to make it more pleasant\nax.spines[\"top\"].set_color(\"None\")\nax.spines[\"right\"].set_color(\"None\")\n\n# set a specific label for each axis\nax.set_xlabel(\"Area\")\nax.set_ylabel(\"Population\")\n\n# change the lower limit of the plot, this will allow us to see the legend on the left\nax.set_xlim(-0.01) \nax.set_title(\"Bubble plot with encircling\")\nax.legend(loc = \"upper left\", fontsize = 10);","c2740ab9":"# Useful for:\n# This is a normal scatter plot but we also plot a simple regression line to see the correlation between the x and the y variables.\n\n# More info: \n# https:\/\/visual.ly\/m\/scatter-plots-regression-lines\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv'\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# filter only 2 clases to separate it more easily on the plot\ndf = df[df[\"cyl\"].isin([4,8])]\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using seaborn\nsns.lmplot(\"displ\", \"hwy\", df, hue = \"cyl\")\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# since we are using seaborn and this library uses matplotlib behind the scenes\n# you can call plt.gca (get current axes) and use all the familiar matplotlib commands\nax = plt.gca()\n\n# change the upper limit of the plot to make it more pleasant\nax.set_xlim(0, 10)\nax.set_ylim(0, 50)\n\n# set title\nax.set_title(\"Scatter plot with regression\");","653a5808":"# Useful for:\n# This is a normal scatter plot but we also plot a simple regression line to see the correlation between the x and the y variables.\n# This plot is similar to the previous one but plots each data on separate axes\n\n# More info: \n# https:\/\/visual.ly\/m\/scatter-plots-regression-lines\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv'\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# filter only 2 clases to separate it more easily on the plot\ndf = df[df[\"cyl\"].isin([4,8])]\n\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using seaborn\naxes = sns.lmplot(\"displ\", \n                  \"hwy\", \n                  df, \n                  hue = \"cyl\", \n                  col = \"cyl\" # by specifying the col, seaborn creates several axes for each group\n                 )\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# change the upper limit of the plot to make it more pleasant\naxes.set( xlim = (0.5, 7.5), ylim = (0, 50))\n\n# set title for all axes using plt\nplt.suptitle(\"Scatter plot with regression lines on different axes\", fontsize = 10);","b60e5499":"# Useful for:\n# Draw a scatterplot where one variable is categorical. \n# This is useful to see the distribution of the points of each category.\n\n# More info: \n# https:\/\/seaborn.pydata.org\/generated\/seaborn.stripplot.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv'\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# separate x and y variables\nx = df[\"cty\"]\ny = df[\"hwy\"]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nplt.figure(figsize = (10, 7))\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using seaborn\nax = sns.stripplot(x, y)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# set title\nax.set_title(\"Jitter plot\");","5e72abd3":"# Useful for:\n# Draw a scatterplot where one variable is categorical. \n# In this plot we calculate the size of overlapping points in each category and for each y.\n# This way, the bigger the bubble the more concentration we have in that region.\n\n# More info: \n# https:\/\/seaborn.pydata.org\/generated\/seaborn.stripplot.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv'\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n\n# we need to make a groupby by variables of interest\ngb_df = df.groupby([\"cty\", \"hwy\"]).size().reset_index(name = \"counts\")\n\n# sort the values\ngb_df.sort_values([\"cty\", \"hwy\", \"counts\"], ascending = True, inplace = True)\n\n# create a color for each group. \n# there are several way os doing, you can also use this line: \n# colors = [plt.cm.gist_earth(i\/float(len(gb_df[\"cty\"].unique()))) for i in range(len(gb_df[\"cty\"].unique()))]\ncolors = {i:np.random.random(3,) for i in sorted(list(gb_df[\"cty\"].unique()))}\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 5))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# iterate over each category and plot the data. This way, every group has it's own color and sizwe.\nfor x in sorted(list(gb_df[\"cty\"].unique())):\n    \n    # get x and y values for each group\n    x_values = gb_df[gb_df[\"cty\"] == x][\"cty\"]\n    y_values = gb_df[gb_df[\"cty\"] == x][\"hwy\"]\n    \n    # extract the size of each group to plot\n    size = gb_df[gb_df[\"cty\"] == x][\"counts\"]\n    \n    # extract the color for each group and covert it from rgb to hex\n    color = matplotlib.colors.rgb2hex(colors[x])\n    \n    # plot the data\n    ax.scatter(x_values, y_values, s = size*10, c = color)\n    \n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# set title\nax.set_title(\"Count plot\");","917fd762":"# Useful for:\n# This plot is a combination of 2 plots.\n# On one side we have a normal scatter plot that is helpful to see the relationship between data (x and y axis)\n# But we also add a histogram that is useful to see the concentration\/bins and the distribution of a series.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Histogram\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv'\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# separate x and y\nx = df[\"displ\"]\ny = df[\"hwy\"]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 5))\n# in this case we use gridspec.\n# check the basics section of this kernel if you need help.\ngs = fig.add_gridspec(5, 5)\nax1 = fig.add_subplot(gs[:4, :-1])\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n\n# main axis: scatter plot\n# this line is very nice c = df.manufacturer.astype('category').cat.codes\n# since it basically generate a color for each category\nax1.scatter(x, y, c = df.manufacturer.astype('category').cat.codes) \n\n# set the labels for x and y\nax1.set_xlabel(\"Dist\")\nax1.set_ylabel(\"Hwy\")\n\n# set the title for the main plot\nax1.set_title(\"Scatter plot with marginal histograms\")\n\n# prettify the plot\n# get rid of some of the spines to make the plot nicer\nax1.spines[\"right\"].set_color(\"None\")\nax1.spines[\"top\"].set_color(\"None\")\n\n# using familiar slicing, get the bottom axes and plot\nax2 = fig.add_subplot(gs[4:, :-1])\nax2.hist(x, 40, orientation = 'vertical', color = \"pink\")\n\n# invert the axis (it looks up side down)\nax2.invert_yaxis()\n\n# prettify the plot\n# set the ticks to null\nax2.set_xticks([])\nax2.set_yticks([])\n# no axis to make plot nicer\nax2.axison = False\n\n# using familiar slicing, get the left axes and plot\nax3 = fig.add_subplot(gs[:4, -1])\nax3.hist(y, 40, orientation = \"horizontal\", color = \"pink\")\n\n# prettify the plot\n# set the ticks to null\nax3.set_xticks([])\nax3.set_yticks([])\n# no axis to make plot nicer\nax3.axison = False\n\n# make all the figures look nicier\nfig.tight_layout()","a10c7fa4":"# Useful for:\n# A box plot or boxplot is a method for graphically depicting groups of numerical data through their quartiles.\n# It helps to see the dispersion of a series, thanks to the whiskers\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Box_plot\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv'\ndf = pd.read_csv(PATH)\n\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\nx = df[\"displ\"]\ny = df[\"hwy\"]\n\n# in this plot we create the colors separatly\ncolors = df[\"manufacturer\"].astype(\"category\").cat.codes\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 5))\n# in this case we use gridspec.\n# check the basics section of this kernel if you need help.\ngs = fig.add_gridspec(6, 6)\nax1 = fig.add_subplot(gs[:4, :-1])\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n\n# main axis: scatter plot\n# this line is very nice c = df.manufacturer.astype('category').cat.codes\n# since it basically generate a color for each category\nax1.scatter(x, y, c = df.manufacturer.astype('category').cat.codes) \n\n# set the labels for x and y\nax1.set_xlabel(\"Dist\")\nax1.set_ylabel(\"Hwy\")\n\n# set the title for the main plot\nax1.set_title(\"Scatter plot with marginal histograms\")\n\n# prettify the plot\n# get rid of some of the spines to make the plot nicer\nax1.spines[\"right\"].set_color(\"None\")\nax1.spines[\"top\"].set_color(\"None\")\n\n# using familiar slicing, get the left axes and plot\nax2 = fig.add_subplot(gs[4:, :-1])\nax2.boxplot(x, \n            vert = False,  \n            whis = 0.75 # make the boxplot lines shorter\n           )\n# prettify the plot\n# set the ticks to null\nax2.set_xticks([])\nax2.set_yticks([])\n\n# left plot\nax3 = fig.add_subplot(gs[:4, -1])\nax3.boxplot(y,  \n            whis = 0.75 # make the boxplot lines shorter\n           )\n# prettify the plot\n# set the ticks to null\nax3.set_xticks([])\nax3.set_yticks([])\n\n# make all the figures look nicier\nfig.tight_layout()","6bdb3b1b":"# Useful for:\n# The correlation plot helps us to comparte how correlated are 2 variables between them\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Covariance_matrix#Correlation_matrix\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/mtcars.csv'\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 5))\nax = fig.add_subplot()\n\n# plot using matplotlib\nax.imshow(df.corr(), cmap = 'viridis', interpolation = 'nearest')\n# set the title for the figure\nax.set_title(\"Heatmap using matplotlib\");","b2cb4a92":"# Useful for:\n# The correlation plot helps us to comparte how correlated are 2 variables between them\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Covariance_matrix#Correlation_matrix\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/mtcars.csv'\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# calculate the correlation between all variables\ncorr = df.corr()\n# create a mask to pass it to seaborn and only show half of the cells \n# because corr between x and y is the same as the y and x\n# it's only for estetic reasons\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 5))\n\n# plot the data using seaborn\nax = sns.heatmap(corr, \n                 mask = mask, \n                 vmax = 0.3, \n                 square = True,  \n                 cmap = \"viridis\")\n# set the title for the figure\nax.set_title(\"Heatmap using seaborn\");","b7a0f415":"# Useful for:\n# Plot pairwise relationships in a dataset. \n# Helps you to see in a glance of an eye all distribution and correlation of variables.\n\n# More info: \n# https:\/\/seaborn.pydata.org\/generated\/seaborn.pairplot.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\ndf = sns.load_dataset('iris')\n\n# plot the data using seaborn\nsns.pairplot(df, \n             hue = \"species\" # helps to separate the values by specios\n            );","0882baa1":"# Useful for:\n# Plot pairwise relationships in a dataset. \n# Helps you to see in a glance of an eye all distribution and correlation of variables.\n# This plot also plots a regression line to fit each of the data\n\n# More info: \n# https:\/\/seaborn.pydata.org\/generated\/seaborn.pairplot.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\ndf = sns.load_dataset('iris')\n\n# plot the data using seaborn\nsns.pairplot(df, \n             kind = \"reg\", # make a regression line for eac hue and each variables\n             hue = \"species\"\n            );","5d637665":"# Useful for:\n# Based on a metric to compare, this plot helps you to see the divergence of the a value \n# to that metric (it could be mean, median or others).\n\n# More info: \n# https:\/\/blog.datawrapper.de\/divergingbars\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mtcars.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# here we standarize the data\n# More info:\n# https:\/\/statisticsbyjim.com\/glossary\/standardization\/\ndf[\"x_plot\"] = (df[\"mpg\"] - df[\"mpg\"].mean())\/df[\"mpg\"].std()\n\n# sort value and reset the index\ndf.sort_values(\"x_plot\", inplace = True)\ndf.reset_index(inplace = True)\n\n# create a color list, where if value is above > 0 it's green otherwise red\ncolors = [\"red\" if x < 0 else \"green\" for x in df[\"x_plot\"]]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 8))\nax = fig.add_subplot()\n# plot using horizontal lines and make it look like a column by changing the linewidth\nax.hlines(y = df.index, xmin = 0 , xmax = df[\"x_plot\"],  color = colors, linewidth = 5)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# set x and y axis\nax.set_xlabel(\"Mileage\")\nax.set_ylabel(\"Car Name\")\n\n# set a title\nax.set_title(\"Diverging plot in matplotlib\")\n\n# make a grid to help separate the lines\nax.grid(linestyle='--', alpha=0.5)\n\n# change the y ticks\n# first you set the yticks\nax.set_yticks(df.index)\n\n# then you change them using the car names\n# same can be achived using plt.yticks(df.index, df.cars)\nax.set_yticklabels(df.cars);","a046b119":"# Useful for:\n# This plot is really useful to show the different performance of deviation of data.\n# We use text to annotate the value and make more easy the comparison.\n\n# More info: \n# https:\/\/blog.datawrapper.de\/divergingbars\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mtcars.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# here we standarize the data\n# More info:\n# https:\/\/statisticsbyjim.com\/glossary\/standardization\/\ndf[\"x_plot\"] = (df[\"mpg\"] - df[\"mpg\"].mean())\/df[\"mpg\"].std()\n\n# sort value and reset the index\ndf.sort_values(\"x_plot\", inplace = True)\ndf.reset_index(inplace=True)\n\n# create a color list, where if value is above > 0 it's green otherwise red\ncolors = [\"red\" if x < 0 else \"green\" for x in df[\"x_plot\"]]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 8))\nax = fig.add_subplot()\n\n# plot horizontal lines that go from zero to the value\n# here we make the linewidht very thin.\nax.hlines(y = df.index, xmin = 0 , color = colors,  xmax = df[\"x_plot\"], linewidth = 1)\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# iterate over x and y and annotate text and plot the data\nfor x, y in zip(df[\"x_plot\"], df.index):\n    # annotate text\n    ax.text(x - 0.1 if x < 0 else x + 0.1, \n             y, \n             round(x, 2), \n             color = \"red\" if x < 0 else \"green\",  \n             horizontalalignment='right' if x < 0 else 'left', \n             size = 10)\n    # plot the points\n    ax.scatter(x, \n                y, \n                color = \"red\" if x < 0 else \"green\", \n                alpha = 0.5)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# set title\nax.set_title(\"Diverging plot in matplotlib\")\n# change x lim\nax.set_xlim(-3, 3)\n\n# set labels\nax.set_xlabel(\"Mileage\")\nax.set_ylabel(\"Car Name\")\n\n# make a grid\nax.grid(linestyle='--', alpha=0.5)\n\n# instead of y = 1, 2, 3...\n# put the car makers on the y axis\nax.set_yticks(df.index)\nax.set_yticklabels(df.cars)\n\n# change the spines to make it nicer\nax.spines[\"top\"].set_color(\"None\")\nax.spines[\"left\"].set_color(\"None\")\n\n# with this line, we change the right spine to be in the middle\n# as a vertical line from the origin\nax.spines['right'].set_position(('data',0))\nax.spines['right'].set_color('black')","2b6a7f63":"# Useful for:\n# This plot is really useful to show the different performance of deviation of data.\n# We use text to annotate the value and make more easy the comparison.\n# This plot is very similar to the previous 2\n# But here we don't draw any lines and just play with the size of each point and make it a little bigger\n\n# More info: \n# https:\/\/blog.datawrapper.de\/divergingbars\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mtcars.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# here we standarize the data\n# More info:\n# https:\/\/statisticsbyjim.com\/glossary\/standardization\/\ndf[\"x_plot\"] = (df[\"mpg\"] - df[\"mpg\"].mean())\/df[\"mpg\"].std()\n\n# sort value and reset the index\ndf.sort_values(\"x_plot\", inplace = True)\ndf.reset_index(inplace=True)\n\n# create a color list, where if value is above > 0 it's green otherwise red\ncolors = [\"red\" if x < 0 else \"green\" for x in df[\"x_plot\"]]\n\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 8))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# iterate over x and y and annotate text and plot the data\nfor x, y in zip(df[\"x_plot\"], df.index):\n    \n    # make a horizontal line from the y till the x value\n    # this doesn't appear in the original 50 plot challenge\n    ax.hlines(y = y, \n               xmin = -3,  \n               xmax = x, \n               linewidth = 0.5,\n               alpha = 0.3,\n               color = \"red\" if x < 0 else \"green\")\n    \n    # annotate text\n    ax.text(x, \n             y, \n             round(x, 2), \n             color = \"black\",\n             horizontalalignment='center', \n             verticalalignment='center',\n             size = 8)\n    \n    # plot the points\n    ax.scatter(x, \n                y, \n                color = \"red\" if x < 0 else \"green\", \n                s = 300,\n                alpha = 0.5)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# set title\nax.set_title(\"Diverging plot in matplotlib\")\n\n# change x lim\nax.set_xlim(-3, 3)\n\n# set labels\nax.set_xlabel(\"Mileage\")\nax.set_ylabel(\"Car Name\")\n\n# instead of y = 1, 2, 3...\n# put the car makers on the y axis\nax.set_yticks(df.index)\nax.set_yticklabels(df.cars)\n\n# change the spines to make it nicer\nax.spines[\"top\"].set_color(\"None\")\nax.spines[\"left\"].set_color(\"None\")\n\n# with this line, we change the right spine to be in the middle\n# as a vertical line from the origin\nax.spines['right'].set_position(('data',0))\nax.spines['right'].set_color('grey')","00d6c895":"# Useful for:\n# This plot is really useful to show the different performance of deviation of data.\n# In this plot we use rectagles and matplotlib patches to draw the attention to specific points\n\n# More info: \n# https:\/\/blog.datawrapper.de\/divergingbars\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mtcars.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# here we standarize the data\n# More info:\n# https:\/\/statisticsbyjim.com\/glossary\/standardization\/\ndf[\"x_plot\"] = (df[\"mpg\"] - df[\"mpg\"].mean())\/df[\"mpg\"].std()\n\n# sort value and reset the index\ndf.sort_values(\"x_plot\", inplace = True)\ndf.reset_index(inplace = True)\n\n# we plot everything with a black color except a specific Fiat model\n# this way we visually communicate something to the user\ndf[\"color\"] = df[\"cars\"].apply(lambda car_name: \"orange\" if car_name == \"Fiat X1-9\" else \"black\")\n\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (8, 12))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# plot horizontal lines from the origin to each data point\nax.hlines(y = df.index, \n          xmin = 0,\n          xmax = df[\"x_plot\"],\n          color = df[\"color\"],\n          alpha = 0.6)\n\n# plot the dots\nax.scatter(x = df[\"x_plot\"],\n          y = df.index,\n          s = 100,\n          color = df[\"color\"],\n          alpha = 0.6)\n\n# add patches\n# with this piece of code, we can draw pretty much any patch or shape\n# since we are interested in a rectangle, we must submit a list with the \n# coordinates\ndef add_patch(verts, ax, color):\n    '''\n    Takes the vertices and the axes as argument and adds the patch to our plot.\n    '''\n    codes = [\n        Path.MOVETO,\n        Path.LINETO,\n        Path.LINETO,\n        Path.LINETO,\n        Path.CLOSEPOLY,\n    ]\n\n    path = Path(verts, codes)\n    pathpatch = PathPatch(path, facecolor = color, lw = 2, alpha = 0.3)\n    ax.add_patch(pathpatch)\n\n# coordinates for the bottom shape\nverts_bottom = [\n   (-2.5, -0.5),  # left, bottom\n   (-2.5, 2),  # left, top\n   (-1.5, 2),  # right, top\n   (-1.5, -0.5),  # right, bottom\n   (0., 0.),  # ignored\n]\n\n# coordinates for the upper shape\nverts_upper = [\n   (1.5, 27),  # left, bottom\n   (1.5, 33),  # left, top\n   (2.5, 33),  # right, top\n   (2.5, 27),  # right, bottom\n   (0., 0.),  # ignored\n]\n\n# use the function to add them to the existing plot\nadd_patch(verts_bottom, ax, color = \"red\")\nadd_patch(verts_upper, ax, color = \"green\")\n\n# annotate text\nax.annotate('Mercedes Models', \n            xy = (0.0, 11.0), \n            xytext = (1.5, 11), \n            xycoords = 'data', \n            fontsize = 10, \n            ha = 'center', \n            va = 'center',\n            bbox = dict(boxstyle = 'square', fc = 'blue', alpha = 0.1),\n            arrowprops = dict(arrowstyle = '-[, widthB=2.0, lengthB=1.5', lw = 2.0, color = 'grey'), color = 'black')\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# set title\nax.set_title(\"Diverging Lollipop of Car Mileage\")\n\n# autoscale\nax.autoscale_view()\n\n# change x lim\nax.set_xlim(-3, 3)\n\n# set labels\nax.set_xlabel(\"Mileage\")\nax.set_ylabel(\"Car Name\")\n\n# instead of y = 1, 2, 3...\n# put the car makers on the y axis\nax.set_yticks(df.index)\nax.set_yticklabels(df.cars)\n\n# change the spines to make it nicer\nax.spines[\"right\"].set_color(\"None\")\nax.spines[\"top\"].set_color(\"None\")\n\n# add a grid\nax.grid(linestyle='--', alpha=0.5);","9f5fab9c":"# Useful for:\n# This plot is really useful to show the different performance of deviation of data.\n# In this plot we use rectagles and matplotlib patches to draw the attention to specific points\n# This example shows how to add patches more easily\n\n# More info: \n# https:\/\/blog.datawrapper.de\/divergingbars\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mtcars.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# here we standarize the data\n# More info:\n# https:\/\/statisticsbyjim.com\/glossary\/standardization\/\ndf[\"x_plot\"] = (df[\"mpg\"] - df[\"mpg\"].mean())\/df[\"mpg\"].std()\n\n# sort value and reset the index\ndf.sort_values(\"x_plot\", inplace = True)\ndf.reset_index(inplace = True)\n\n# we plot everything with a black color except a specific Fiat model\n# this way we visually communicate something to the user\ndf[\"color\"] = df[\"cars\"].apply(lambda car_name: \"orange\" if car_name == \"Fiat X1-9\" else \"black\")\n\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (8, 12))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# plot horizontal lines from the origin to each data point\nax.hlines(y = df.index, \n          xmin = 0,\n          xmax = df[\"x_plot\"],\n          color = df[\"color\"],\n          alpha = 0.6)\n\n# plot the dots\nax.scatter(x = df[\"x_plot\"],\n          y = df.index,\n          s = 100,\n          color = df[\"color\"],\n          alpha = 0.6)\n\n# add patches more easily\n# It's easier to draw shapes like rectangles or squares, since this way\n# we only must specify 2 points, and matplotlib does all the job\np1 = patches.Rectangle((-2.0, -1), width = .3, height = 3, alpha = .2, facecolor = 'red')\np2 = patches.Rectangle((1.5, 27), width = .8, height = 5, alpha = .2, facecolor = 'green')\nax.add_patch(p1)\nax.add_patch(p2)\n\n# annotate text\nax.annotate('Mercedes Models', \n            xy = (0.0, 11.0), \n            xytext = (1.5, 11), \n            xycoords = 'data', \n            fontsize = 10, \n            ha = 'center', \n            va = 'center',\n            bbox = dict(boxstyle = 'square', fc = 'blue', alpha = 0.1),\n            arrowprops = dict(arrowstyle = '-[, widthB=2.0, lengthB=1.5', lw = 2.0, color = 'grey'), color = 'black')\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# set title\nax.set_title(\"Diverging Lollipop of Car Mileage\")\n\n# autoscale\nax.autoscale_view()\n\n# change x lim\nax.set_xlim(-3, 3)\n\n# set labels\nax.set_xlabel(\"Mileage\")\nax.set_ylabel(\"Car Name\")\n\n# instead of y = 1, 2, 3...\n# put the car makers on the y axis\nax.set_yticks(df.index)\nax.set_yticklabels(df.cars)\n\n# change the spines to make it nicer\nax.spines[\"right\"].set_color(\"None\")\nax.spines[\"top\"].set_color(\"None\")\n\n# add a grid\nax.grid(linestyle='--', alpha=0.5);","09aff17c":"# (omit pandas warning: \"Using an implicitly registered datetime converter for a matplotlib plotting method. ...\")\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\n# Useful for:\n# Area chart is really useful when you want to drawn the attention about when a series is below a certain point.\n# The area between axis and line are commonly emphasized with colors, textures and hatchings. \n# Commonly one compares two or more quantities with an area chart.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Area_chart\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\n\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/economics.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# create the variation between 2 consecutive rows\ndf[\"pce_monthly_change\"] = (df[\"psavert\"] - df[\"psavert\"].shift(1))\/df[\"psavert\"].shift(1)\n\n# convert todatetime\ndf[\"date_converted\"] = pd.to_datetime(df[\"date\"])\n\n# filter our df for a specific date\ndf = df[df[\"date_converted\"] < np.datetime64(\"1975-01-01\")]\n\n# separate x and y \nx = df[\"date_converted\"]\ny = df[\"pce_monthly_change\"]\n\n# calculate the max values to annotate on the plot\ny_max = y.max()\n\n# find the index of the max value\nx_ind = np.where(y == y_max)\n\n# find the x based on the index of max\nx_max = x.iloc[x_ind]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (15, 10))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nax.plot(x, y, color = \"black\")\nax.scatter(x_max, y_max, s = 300, color = \"green\", alpha = 0.3)\n\n# annotate the text of the Max value\nax.annotate(r'Max value',\n             xy = (x_max, y_max), \n             xytext = (-90, -50), \n             textcoords = 'offset points', \n             fontsize = 16,\n             arrowprops = dict(arrowstyle = \"->\", connectionstyle = \"arc3,rad=.2\")\n           )\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# fill the area with a specific color\nax.fill_between(x, 0, y, where = 0 > y, facecolor='red', interpolate = True, alpha = 0.3)\nax.fill_between(x, 0, y, where = 0 <= y, facecolor='green', interpolate = True, alpha = 0.3)\n\n# change the ylim to make it more pleasant for the viewer\nax.set_ylim(y.min() * 1.1, y.max() * 1.1)\n\n# change the values of the x axis\n# extract the first 3 letters of the month\nxtickvals = [str(m)[:3].upper() + \"-\" + str(y) for y,m in zip(df.date_converted.dt.year, df.date_converted.dt.month_name())]\n\n# this way we can set the ticks to be every 6 months.\nax.set_xticks(x[::6])\n\n# change the current ticks to be our string month value\n# basically pass from this: 1967-07-01\n# to this: JUL-1967\nax.set_xticklabels(xtickvals[::6], rotation=90, fontdict={'horizontalalignment': 'center', 'verticalalignment': 'center_baseline'})\n\n# add a grid\nax.grid(alpha = 0.3)\n\n# set the title\nax.set_title(\"Monthly variation return %\");","4e15dda6":"# Useful for:\n# This is a normal bar chart but ordered in a specific way.\n# From the lowest to the highest values\n# It's useful to show comparisons among discrete categories.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Bar_chart\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# groupby and create the target x and y\ngb_df = df.groupby([\"manufacturer\"])[\"cyl\", \"displ\", \"cty\"].mean()\ngb_df.sort_values(\"cty\", inplace = True)\n# fitler x and y\nx = gb_df.index\ny = gb_df[\"cty\"]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 8))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nfor x_, y_ in zip(x, y):\n    # this is very cool, since we can pass a function to matplotlib\n    # and it will plot the color based on the result of the evaluation\n    ax.bar(x_, y_, color = \"red\" if y_ < y.mean() else \"green\", alpha = 0.3)\n    \n     # add some text\n    ax.text(x_, y_ + 0.3, round(y_, 1), horizontalalignment = 'center')\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# Add a patch below the x axis line to enphasize that they are below the mean\n# I had to copy and paste this code, since I didn't manage to figure it out.\n# red one\np2 = patches.Rectangle((.124, -0.005), width = .360, height = .13, alpha = .1, facecolor = 'red', transform = fig.transFigure)\nfig.add_artist(p2)\n\n# green one\np1 = patches.Rectangle((.124 + .360, -0.005), width = .42, height = .13, alpha = .1, facecolor = 'green', transform = fig.transFigure)\nfig.add_artist(p1)\n\n# rotate the x ticks 90 degrees\nax.set_xticklabels(x, rotation=90)\n\n# add an y label\nax.set_ylabel(\"Average Miles per Gallon by Manufacturer\")\n\n# set a title\nax.set_title(\"Bar Chart for Highway Mileage\");","024b07bb":"# Useful for:\n# The purpose of this kind of chart is the same as a normal bar chart.\n# The lollipop chart is often claimed to be useful compared to a normal bar chart, \n# if you are dealing with a large number of values and when the values are all high, such as in the 80-90% range (out of 100%). \n# Then a large set of tall columns can be visually aggressive.\n\n# More info: \n# https:\/\/datavizproject.com\/data-type\/lollipop-chart\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# groupby and create the target x and y\ngb_df = df.groupby([\"manufacturer\"])[\"cyl\", \"displ\", \"cty\"].mean()\ngb_df.sort_values(\"cty\", inplace = True)\n# fitler x and y\nx = gb_df.index\ny = gb_df[\"cty\"]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 8))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nfor x_, y_ in zip(x, y):\n    # make a scatter plot\n    ax.scatter(x_, y_, color = \"red\" if y_ < y.mean() else \"green\", alpha = 0.3, s = 100)\n    \n    # add vertical lines to connect them to the data point (head of the lollipop)\n    ax.vlines(x_, ymin = 0, ymax = y_, color = \"red\" if y_ < y.mean() else \"green\", alpha = 0.3)\n    \n    # add text with the data\n    ax.text(x_, y_ + 0.5, round(y_, 1), horizontalalignment='center')\n    \n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# change the ylim\nax.set_ylim(0, 30)\n\n# rotate the x ticks 90 degrees\nax.set_xticklabels(x, rotation = 90)\n\n# add an y label\nax.set_ylabel(\"Average Miles per Gallon by Manufacturer\")\n\n# set a title\nax.set_title(\"Lollipop Chart for Highway Mileage\");","3756c62d":"# Useful for:\n# This plot is the same as the diverging dot plot but here we don't add the line.\n# # This plot is really useful to show the different performance of deviation of data.\n\n# More info: \n# https:\/\/www.mathsisfun.com\/data\/dot-plots.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# groupby and create the target x and y\ngb_df = df.groupby([\"manufacturer\"])[\"cyl\", \"displ\", \"cty\"].mean()\ngb_df.sort_values(\"cty\", inplace = True)\n# fitler x and y\nx = gb_df.index\ny = gb_df[\"cty\"]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 8))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nfor x_, y_ in zip(x, y):\n    ax.scatter(y_, x_, color = \"red\" if y_ < y.mean() else \"green\", alpha = 0.3, s = 100)\n    \n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# change the xlim\nax.set_xlim(8, 27)\n\n# add an y label\nax.set_xlabel(\"Average Miles per Gallon by Manufacturer\")\n\n# set the title\nax.set_title(\"Dot Plot for Highway Mileage\")\n\n# create the grid only for the y axis\nax.grid(which = 'major', axis = 'y', linestyle = '--');","80e075c2":"# Useful for:\n# This chart is very useful to show the variation of some kind of data\n# between two points in time (you can expand it for more points though).\n\n# More info: \n# https:\/\/datavizproject.com\/data-type\/slope-chart\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH  = '\/kaggle\/input\/the-50-plot-challenge\/gdppercap.csv'\ndf = pd.read_csv(PATH)\n\n# create a column with the colors, since we will be iterating and changing the value based on their performance\n# if the value at the starting point is bigger than the ending, green color\n# otherwise, red color\ndf[\"color\"] = df.apply(lambda row: \"green\" if row[\"1957\"] >= row[\"1952\"] else \"red\", axis = 1)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (8, 12))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nfor cont in df[\"continent\"]:\n    \n    # prepare the data for plotting\n    # extract each point and the color\n    x_start = df.columns[1]\n    x_finish = df.columns[2]\n    y_start = df[df[\"continent\"] == cont][\"1952\"]\n    y_finish = df[df[\"continent\"] == cont][\"1957\"]\n    color = df[df[\"continent\"] == cont][\"color\"]\n    \n    # plot eac point\n    ax.scatter(x_start, y_start, color = color, s = 200)\n    ax.scatter(x_finish, y_finish, color = color, s = 200*(y_finish\/y_start))\n    \n    # connect the starting point and the ending point with a line\n    # check the bouns section for more\n    ax.plot([x_start, x_finish], [float(y_start), float(y_finish)], linestyle = \"-\", color = color.values[0])\n    \n    # annotate the value for each continent\n    ax.text(ax.get_xlim()[0] - 0.05, y_start, r'{}:{}k'.format(cont, int(y_start)\/1000), horizontalalignment = 'right', verticalalignment = 'center', fontdict = {'size':8})\n    ax.text(ax.get_xlim()[1] + 0.05, y_finish, r'{}:{}k'.format(cont, int(y_finish)\/1000), horizontalalignment = 'left', verticalalignment = 'center', fontdict = {'size':8})\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# get the x and y limits\nx_lims = ax.get_xlim()\ny_lims = ax.get_ylim()\n\n# change the x and y limits programmaticaly\nax.set_xlim(x_lims[0] - 1, x_lims[1] + 1);\n\n# add 2 vertical lines\nax.vlines(x_start, 0, y_lims[1], color = \"grey\", alpha = 0.3, lw = 0.5)\nax.vlines(x_finish, 0, y_lims[1], color = \"grey\", alpha = 0.3, lw = 0.5)\n\n# for each vertical line, add text: BEFORE and AFTER to help understand the plot\nax.text(x_lims[0], y_lims[1], \"BEFORE\", horizontalalignment = 'right', verticalalignment = 'center')\nax.text(x_lims[1], y_lims[1], \"AFTER\", horizontalalignment = 'left', verticalalignment = 'center')\n\n# set and x and y label\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Mean GPD per Capita\")\n\n# add a title\nax.set_title(\"Slopechart: Comparing GDP per Capita between 1952 and 1957\")\n\n# remove all the spines of the axes\nax.spines[\"left\"].set_color(\"None\")\nax.spines[\"right\"].set_color(\"None\")\nax.spines[\"top\"].set_color(\"None\")\nax.spines[\"bottom\"].set_color(\"None\")","3555f67a":"# Useful for:\n# It's scope if very similar as a slope chart\n# Dumbbell plot (also known as Dumbbell chart, Connected dot plot) is great for displaying changes between two points in time, two conditions or differences between two groups.\n\n# More info: \n# https:\/\/www.amcharts.com\/demos\/dumbbell-plot\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/health.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (8, 8))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nfor i, area in zip(df.index, df[\"Area\"]):\n    \n    # extract the data for each area\n    start_data = df[df[\"Area\"] == area][\"pct_2013\"].values[0]\n    finish_data = df[df[\"Area\"] == area][\"pct_2014\"].values[0]\n    \n    # plot the starting and ending plots\n    ax.scatter(start_data, i, c = \"blue\", alpha = .8)\n    ax.scatter(finish_data, i, c = \"blue\", alpha = .2)\n    \n    # connect them with an horizontal line\n    ax.hlines(i, start_data, finish_data, color = \"blue\", alpha = .2)\n    \n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# set x and y label\nax.set_xlabel(\"Pct change\")\nax.set_ylabel(\"Mean GDP per Capita\")\n\n# set the title\nax.set_title(\"Dumbell Chart: Pct Change - 2013 vs 2014\")\n\n# add grid lines for the x axis to better separate the data\nax.grid(axis = \"x\")\n\n# change the x limit programatically\nx_lim = ax.get_xlim()\nax.set_xlim(x_lim[0]*.5, x_lim[1]*1.1)\n\n# change the x ticks to be rounded pct %\nx_ticks = ax.get_xticks()\nax.set_xticklabels([\"{:.0f}%\".format(round(tick*100, 0)) for tick in x_ticks]);","885c68e9":"# Useful for:\n# This is one of the most fundamental plots to master\n# It's shows the approximate distributin of numerical or categorical data.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Histogram\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\ngb_df = df[[\"class\", \"displ\"]].groupby(\"class\")\nlx = []\nln = []\n\n# handpicked colors\ncolors = [\"#543005\", \"#8c510a\", \"#bf812d\", \"#80cdc1\", \"#35978f\", \"#01665e\", \"#003c30\"]\n\n# iterate over very groupby group and \n# append their values as a list\n# THIS IS A CRUCIAL STEP\nfor _, df_ in gb_df:\n    lx.append(df_[\"displ\"].values.tolist())\n    ln.append(list(set(df_[\"class\"].values.tolist()))[0])\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (8, 8))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n\n# hist returns a tuple of 3 values\n# let's unpack it\nn, bins, patches = ax.hist(lx, bins = 30, stacked = True, density = False, color = colors)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# change x lim\nax.set_ylim(0, 25)\n# set the xticks to reflect every third value\nax.set_xticks(bins[::3])\n\n# set a title\nax.set_title(\"Stacked Histogram of displ colored by class\")\n\n# add a custom legend wit class and color\n# you have to pass a dict\nax.legend({class_:color for class_, color in zip(ln, colors)})\n\n# set the y label\nax.set_ylabel(\"Frequency\");","d4f18716":"# Useful for:\n# This is one of the most fundamental plots to master\n# It's shows the approximate distributin of numerical or categorical data.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Histogram\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\ngb_df = df[[\"class\", \"manufacturer\"]].groupby(\"class\")\nlx = []\nln = []\n\n# handpicked colors\ncolors = [\"#543005\", \"#8c510a\", \"#bf812d\", \"#80cdc1\", \"#35978f\", \"#01665e\", \"#003c30\"]\n\n# iterate over very groupby group and \n# append their values as a list\n# THIS IS A CRUCIAL STEP\nfor _, df_ in gb_df:\n    lx.append(df_[\"manufacturer\"].values.tolist())\n    ln.append(list(set(df_[\"class\"].values.tolist()))[0])\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (8, 8))\nax = fig.add_subplot()\n\n# hist returns a tuple of 3 values\n# let's unpack it\nn, bins, patches = ax.hist(lx, bins = 30, stacked = True, density = False, color = colors)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# rotate the x axis label\nax.tick_params(axis = 'x', labelrotation = 90)\n\n# add a custom legend wit class and color\n# you have to pass a dict\nax.legend({class_:color for class_, color in zip(ln, colors)})\n\n# add a title\nax.set_title(\"Stacked histogram of manufacturer colored by class\")\n\n# set an y label\nax.set_ylabel(\"Frequency\");","654d3574":"# Useful for:\n# A density plot is a representation of the distribution of a numeric variable. \n# It uses a kernel density estimate to show the probability density function of the variable\n\n# More info: \n# https:\/\/www.data-to-viz.com\/graph\/density.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 8))\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# the idea is to iterate over each class\n# extract their data ad plot a sepate density plot\nfor cyl_ in df[\"cyl\"].unique():\n    # extract the data\n    x = df[df[\"cyl\"] == cyl_][\"cty\"]\n    # plot the data using seaborn\n    sns.kdeplot(x, shade=True, label = \"{} cyl\".format(cyl_))\n\n# set the title of the plot\nplt.title(\"Density Plot of City Mileage by n_cilinders\");","74ab26fb":"# Useful for:\n# A density plot is a representation of the distribution of a numeric variable. \n# It uses a kernel density estimate to show the probability density function of the variable\n# This variation plots the histogram aswel\n\n# More info: \n# https:\/\/www.data-to-viz.com\/graph\/density.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 8))\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# the idea is to iterate over each class\n# extract their data ad plot a sepate density plot\n# with their histogram\nfor class_ in [\"compact\", \"suv\", \"minivan\"]:\n    # extract the data\n    x = df[df[\"class\"] == class_][\"cty\"]\n    # plot the data using seaborn\n    sns.distplot(x, kde = True, label = \"{} class\".format(class_))\n    \n# set the title of the plot\nplt.title(\"Density Plot of City Mileage by vehicle type\");","2ae54869":"# Useful for:\n# Joyplot are one of the favorites. \n# Joyplots are essentially just a number of stacked overlapping density plots, that look like a mountain ridge, if done right.\n\n# More info: \n# https:\/\/sbebo.github.io\/posts\/2017\/08\/01\/joypy\/\n# http:\/\/sigmaquality.pl\/data-plots\/perfect-plots-joyplot-plot\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nplt.figure(figsize = (16,10), dpi = 80)\n# plot the data using joypy\nfig, axes = joypy.joyplot(df, \n                          column = ['hwy', 'cty'], # colums to be plotted.\n                          by = \"class\", # separate the data by this value. Creates a separate distribution for each one.\n                          ylim = 'own', \n                          figsize = (14,10)\n                         )\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# add a title\nplt.title('Joy Plot of City and Highway Mileage by Class', fontsize = 22);","30e0a9fb":"# Useful for:\n# Joyplot are one of the favorites. \n# Joyplots are essentially just a number of stacked overlapping density plots, that look like a mountain ridge, if done right.\n# This is another example for the Titanic dataset\n\n# More info: \n# https:\/\/sbebo.github.io\/posts\/2017\/08\/01\/joypy\/\n# http:\/\/sigmaquality.pl\/data-plots\/perfect-plots-joyplot-plot\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/titanic\/train.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# create 2 columns with the age of a person if their are male (MALE_AGE) or female (FEMALE_AGE)\ndf[\"MALE_AGE\"] = df.apply(lambda row: row[\"Age\"] if row[\"Sex\"] == \"male\" else np.nan, axis = 1)\ndf[\"FEMALE_AGE\"] = df.apply(lambda row: row[\"Age\"] if row[\"Sex\"] == \"female\" else np.nan, axis = 1)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nplt.figure(dpi = 380)\n# plot the data using joypy\nfig, axes = joypy.joyplot(df, \n                          column=['FEMALE_AGE', 'MALE_AGE'], # colums to be plotted.\n                          by = \"Pclass\", # separate the data by this value. Creates a separate distribution for each one.\n                          ylim = 'own', \n                          figsize = (12,8), \n                          legend = True, \n                          color = ['#f4cccc', '#0c343d'], \n                          alpha = 0.4\n                         )\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# add a title with a specific color and fontisze\nplt.title('Titanic disaster: age distribution of casualties by the class', fontsize = 26, color = 'darkred', alpha = .5)\n\n# change the font of the text on the plot\nplt.rc(\"font\", size = 20)\n\n# set and x label with a specific color and size\nplt.xlabel('Age of passengers by PClass',  fontsize = 16, color = 'darkred', alpha = 1);","c189e47f":"# Useful for:\n# This plot is very cool if you want to show the distribution of some categorical values\n# and mark some interesting value, like median, mean of max values with a specific color\n\n# More info: \n# https:\/\/www.statisticshowto.com\/what-is-a-dot-plot\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n# sort the values\ndf.sort_values([\"manufacturer\", \"cty\"], inplace = True)\nlc = []\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (12, 6))\nax = fig.add_subplot()\n\n# iterate over each car manufacturer\nfor i, car in enumerate(df[\"manufacturer\"].unique()):\n    # prepare the data for plotting\n    # get x and y\n    x = df[df[\"manufacturer\"] == car][\"cty\"]\n    y = [car for i_ in range(len(x))]\n    \n    # calculate the median value\n    x_median = np.median(x)\n    \n    # plot the data\n    ax.scatter(x, y, c = \"white\", edgecolor = \"black\", s = 30)\n    ax.scatter(x_median, i, c = \"red\",  edgecolor = \"black\", s = 80)\n    \n    # add some horizontal line so we can easily track each manufacturer with their distribution\n    ax.hlines(i, 0, 40, linewidth = .1)\n    \n    # append the car name \n    # we need this to change the y labels\n    lc.append(car)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# change x and y label\nax.set_xlim(5, 40)\nax.set_ylim(-2, 16)\n\n# change the ylabel fontsize\nax.tick_params(axis = \"y\", labelsize = 12)\n\n# set a title\nax.set_title(\"Distribution of City Mileage by maker\", fontsize = 12)\n\n# annotate some text that will be placed below the legend\nax.text(35, 5.5, \"$red \\; dots \\; are \\; the \\: median$\", fontdict={'size':8}, color='firebrick')\n\n# create a custom legend\n# a red circe for the median\nred_patch = plt.plot([],[], marker = \"o\", ms = 10, ls = \"\", mec = None, color = 'firebrick', label = \"Median\")\n\n# add the patch and render the legend\nplt.legend(handles = red_patch, loc = 7, fontsize = 12)\n\n# remove 3 spines to make a prettier plot\nax.spines[\"right\"].set_color(\"None\")\nax.spines[\"left\"].set_color(\"None\")\nax.spines[\"top\"].set_color(\"None\");","3ef50cea":"# Useful for:\n# Boxplot is a fundamenta chart in statistics.\n# It helps to show the distribution of categorical data through quartiles.\n# It helps also to see the dispersion of a series, thanks to the whiskers\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Box_plot\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nplt.figure(figsize = (10, 10), dpi = 80)\n# plot the data using seaborn\nax = sns.boxplot(x = \"class\", y = \"hwy\", data = df)\n\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# change the font of the x and y ticks (numbers on the axis)\nax.tick_params(axis = 'x', labelrotation = 90, labelsize = 12)\nax.tick_params(axis = 'y', labelsize = 12)\n\n# set and x and y label\nax.set_xlabel(\"Class\", fontsize = 14)\nax.set_ylabel(\"HWY\", fontsize = 14)\n\n# set a title\nax.set_title(\"Boxplot\", fontsize = 14);","1696308f":"# Useful for:\n# Boxplot is a fundamenta chart in statistics.\n# It helps to show the distribution of categorical data through quartiles.\n# It helps also to see the dispersion of a series, thanks to the whiskers.\n# This plot adds annotation for each box to add additional information to the plot.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Box_plot\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n\n# vectors to plot\nvects = [df[df[\"class\"] == car][\"hwy\"] for car in df[\"class\"].unique()]\n\n# labels for the x axis\nlabels = [class_ for class_ in df[\"class\"].unique()]\n\n# handpicked colors\ncolors = [\"#543005\", \"#8c510a\", \"#bf812d\", \"#80cdc1\", \"#35978f\", \"#01665e\", \"#003c30\"]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (16, 8))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using matplotlib\nplot1 = ax.boxplot(vects,\n    notch = False, \n    vert = True,\n    meanline = True,\n    showmeans = True,\n    patch_artist=True\n)\n\n# iterate over every box and add some annotations\nfor box, color, vect, label, tick in zip(plot1[\"boxes\"], # using this line, you can iterate over every box\n                                         colors, \n                                         vects, \n                                         labels, \n                                         ax.get_xticks()):\n    # change the color of the box\n    box.set(facecolor = color)\n    # add text\n    ax.annotate(\"{} obs\".format(len(vect)), \n                xy = (tick, np.median(vect)),\n               xytext = (15, 50),\n               textcoords = \"offset points\",\n               arrowprops = dict(arrowstyle = \"->\", connectionstyle = \"arc3,rad=.2\"),\n               fontsize = 12)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# change the x labels\nax.set_xticklabels(labels = labels)\n\n# change the rotation and the size of the x ticks (numbers of x axis)\nax.tick_params(axis = 'x', labelrotation = 90, labelsize = 12)\n\n# set the title for the plot\nax.set_title(\"Box plor of Highway Mileage by Vehicle Class\", fontsize = 16);","89f6433e":"# Useful for:\n# This plot is very cool, since it allows you to have on the same plot\n# a box plot and a dot plot. \n# This way it allows you to have more information to analyze.\n# Using seaborn we can also pass the hue to differentiate between classes.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Box_plot\n# https:\/\/en.wikipedia.org\/wiki\/Dot_plot_(statistics)\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nplt.figure(figsize = (10, 10), dpi= 80)\n# plot the data using seaborn\n# since we don't create a specific separete plot\n# everything will be rendered on the same axes\nsns.boxplot(x = \"class\", y = \"hwy\", data = df, hue = \"cyl\")\nsns.stripplot(x = 'class', y = 'hwy', data = df, color = 'black', size = 3, jitter = 1)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# get the current figure\nax = plt.gca()\n# get the xticks to iterate over\nxticks = ax.get_xticks()\n\n# iterate over every xtick and add a vertical line\n# to separate different classes\nfor tick in xticks:\n    ax.vlines(tick + 0.5, 0, np.max(df[\"hwy\"]), color = \"grey\", alpha = .1)\n\n# rotate the x and y ticks\nax.tick_params(axis = 'x', labelrotation = 90, labelsize = 12)\nax.tick_params(axis = 'y', labelsize = 12)\n\n# add x and y label\nax.set_xlabel(\"Class\", fontsize = 14)\nax.set_ylabel(\"HWY\", fontsize = 14)\n\n# add a title and put the legend on a specific location\nax.set_title(\"Boxplot and stripplot on the same figure\", fontsize = 14)\nax.legend(loc = \"lower left\", fontsize = 14);","fc535296":"# Useful for:\n# Violin plot is another fundamental plot in statistics\n# It helps you see the probability density of the data at different values.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Violin_plot\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nplt.figure(figsize = (10, 10), dpi= 80)\nsns.violinplot(x = \"class\", \n               y = \"hwy\", \n               data = df, \n               scale = 'width', \n               inner = 'quartile'\n              )\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# get the current figure\nax = plt.gca()\n# get the xticks to iterate over\nxticks = ax.get_xticks()\n\n# iterate over every xtick and add a vertical line\n# to separate different classes\nfor tick in xticks:\n    ax.vlines(tick + 0.5, 0, np.max(df[\"hwy\"]), color = \"grey\", alpha = .1)\n    \n# rotate the x and y ticks\nax.tick_params(axis = 'x', labelrotation = 90, labelsize = 12)\nax.tick_params(axis = 'y', labelsize = 12)\n\n# add x and y label\nax.set_xlabel(\"Class\", fontsize = 14)\nax.set_ylabel(\"HWY\", fontsize = 14)\n\n# set title\nax.set_title(\"Violinplot\", fontsize = 14);","602e1ff2":"# Useful for:\n# Violin plot is another fundamental plot in statistics\n# It helps you see the probability density of the data at different values.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Violin_plot\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\ntips = sns.load_dataset(\"tips\")\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nplt.figure(figsize = (10, 10), dpi= 80)\n\n# plot the data using seaborn\n# the cool thing is that we put split = True and have 4 violin plots instead of 8\nax = sns.violinplot(x = \"day\", y = \"total_bill\", hue = \"sex\", split = True, data = tips)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# set a title and change the legend location\nax.set_title('Distribution of total bill amount per day', fontsize = 16)\nax.legend(loc = \"upper left\", fontsize = 10);","45214c2c":"# Useful for:\n# The population chart is a type of funnel chart.\n# It really helps out to see the gain\/loss of certain amount at every stage in a process.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Population_pyramid\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/email_campaign_funnel.csv'\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\ngb_df = df.groupby([\"Stage\", \"Gender\"])[\"Users\"].sum().to_frame().reset_index()\ngb_df.set_index(\"Stage\", inplace = True)\n\n# separate the different groups to be plotted\nx_male = gb_df[gb_df[\"Gender\"] == \"Male\"][\"Users\"]\nx_female = gb_df[gb_df[\"Gender\"] == \"Female\"][\"Users\"]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 10))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nax.barh(x_male.index, x_male, color = \"red\", alpha = 0.3, label = \"Male pyramid\")\nax.barh(x_female.index, x_female, color = \"green\", alpha = 0.3, label = \"Female pyramid\")\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# add the legend to a specific location\nax.legend(loc = \"upper left\", fontsize = 12)\n# set xlabel\nax.set_xlabel(\"Users\", fontsize = 12)\n# set the title for the plot\nax.set_title(\"Population Pyramid\", fontsize = 14)\n# change the x and y ticks to a smaller size\nax.tick_params(axis = 'y', labelsize = 12)\nax.tick_params(axis = 'x', labelsize = 12)","72de2cf1":"# Useful for:\n# This is a normal barplot (we show count of each classes)\n# But seabron makes it really easy to plot this effortlessly\n\n# More info: \n# https:\/\/seaborn.pydata.org\/tutorial\/categorical.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/titanic\/train.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\n# plot the data using seaborn\nfig = plt.figure(figsize = (12, 6))\nax = sns.catplot(\"Survived\", \n                 col = \"Pclass\", \n                 data = df, \n                 kind = \"count\",  \n                 palette = 'tab20',  \n                 aspect = .8\n                 )","05b8d4ed":"# Useful for:\n# This is a normal barplot (we show count of each classes)\n# But seabron makes it really easy to plot this effortlessly\n# In this plot we add an additional filter to separate even more the data\n\n# More info: \n# https:\/\/seaborn.pydata.org\/tutorial\/categorical.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/titanic\/train.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\n# plot the data using seaborn\nfig = plt.figure(figsize = (12, 6))\nax = sns.catplot(x = \"Age\",\n                 y = \"Embarked\",\n                 col = \"Pclass\",\n                 hue = \"Sex\",\n                 data = df, \n                 kind = \"violin\",  \n                 palette = 'tab20',  \n                 aspect = .8\n                 )","00de5a43":"# Useful for:\n# Waffle charts are very useful to show the composition of a certain column\n# of different categories\n\n# More info: \n# https:\/\/datavizproject.com\/data-type\/percentage-grid\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# create a dictionary of each class and their totals\nvalues = {k:v for k,v in zip(df[\"class\"].value_counts().index, df[\"class\"].value_counts().values)}\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using pywaffle\nplt.figure(\n    FigureClass = Waffle,\n    rows = 7,\n    columns = 34,\n    values = values,\n    legend = {'loc': 'upper left', 'bbox_to_anchor': (1, 1), \"fontsize\": \"12\"},\n    figsize = (20, 7)\n)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# set a title\nplt.title(\"Waffle chart using pywaffle\", fontsize = 12); # actually the semicolon helps here to avoid Out","6e0fdba7":"# Useful for:\n# Waffle charts are very useful to show the composition of a certain column\n# of different categories\n# This plot tries to replicate a waffle chart using only matplotlib\n\n# More info: \n# https:\/\/datavizproject.com\/data-type\/percentage-grid\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# we need this when we will create the axes\n# and the colors for each column\nrows = 10\ncolumns = 7\n\nncats = len(df[\"class\"].value_counts().index)\ncolors = [plt.cm.inferno_r(i\/float(columns)) for i in range(columns)]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 5))\n# create 70 smaller axes to change their color in the next loop\naxes = fig.subplots(nrows = rows,\n                    ncols = columns)\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# iterate over all rows and columns\n# check the basic part of this kernel if you need help\nfor col in range(columns):\n    for row in range(rows):\n        # get every axes we created\n        ax = axes[row, col]\n        # get the corresponding color\n        color = colors[col]\n        # change the background color of each axes\n        ax.set_facecolor(color)\n        # get rid of the x and y ticks (no numbers on x and y axis)\n        ax.set_xticks([])\n        ax.set_yticks([])\n\n# add a title to the FIGURE\n# Note: that matplotlib always plots on the last axes\n# if we do it by ax.set_title, we will add a title to the 70'th axes\n# and we don't want that\nfig.suptitle(\"Waffle chart using raw matplotlib\", fontsize = 14)\n\n# create a legend for each category\nlegend_elements = [Patch(facecolor = color, \n                         edgecolor = 'white', \n                         label = str(i)) for i, color in enumerate(colors)]\n\n# add the lgend and the patch to the figure\nfig.legend(handles = legend_elements, loc = 'lower left', bbox_to_anchor = (0.0, 1.01), ncol = 2, borderaxespad = 0, frameon = False);","76bafdb3":"# Useful for:\n# A pie chart (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate numerical proportion\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Pie_chart\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# create a dictionary of classes and their totals\nd = df[\"class\"].value_counts().to_dict()\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (18, 6))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using matplotlib\nax.pie(d.values(), # pass the values from our dictionary\n       labels = d.keys(), # pass the labels from our dictonary\n       autopct = '%1.1f%%', # specify the format to be plotted\n       textprops = {'fontsize': 10, 'color' : \"white\"} # change the font size and the color of the numbers inside the pie\n      )\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# set the title\nax.set_title(\"Pie chart\")\n\n# set the legend and add a title to the legend\nax.legend(loc = \"upper left\", bbox_to_anchor = (1, 0, 0.5, 1), fontsize = 10, title = \"Vehicle Class\");","2e6d69b8":"# Useful for:\n# A pie chart (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate numerical proportion\n# Nested pie chart goes one step further and separate every outer level of the pie chart\n# with the composition on a lower level\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Pie_chart\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nsize = 0.3\nvals = np.array([[60., 32.], [37., 40.], [29., 10.]])\n\n# create the outer and inner colors\ncmap = plt.get_cmap(\"tab20c\")\nouter_colors = cmap(np.arange(3)*4)\ninner_colors = cmap(np.array([1, 2, 5, 6, 9, 10]))\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig, ax = plt.subplots()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# outer level\nax.pie(vals.sum(axis = 1), # plot the total [60., 32.] = 92\n       radius = 1, \n       colors = outer_colors,\n       wedgeprops = dict(width = size, edgecolor = 'w'))\n\n# inner level\nax.pie(vals.flatten(), # using flatten we plot 60, 32 separetly\n       radius = 1 - size, \n       colors = inner_colors,\n       wedgeprops = dict(width = size, edgecolor = 'w'))\n\n# set the title for the plot\nax.set(aspect = \"equal\", title = 'Nested pie chart');","17ef4357":"# Useful for:\n# Treemap is very cool and can be used mane different contexts\n# usually we want to show the composition of some totals by groups\n# very often, smaller groups tend to be very small squares\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Treemapping\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\n\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# get the values\nlabel_value = df[\"class\"].value_counts().to_dict()\n\n# create the labels using a list comprehesion\nlabels = [\"{} has {} obs\".format(class_, obs) for class_, obs in label_value.items()]\n\n# create n colors based on the number of labels we have\ncolors = [plt.cm.Spectral(i\/float(len(labels))) for i in range(len(labels))]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nplt.figure(figsize = (20, 10))\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using squarify\nsquarify.plot(sizes = label_value.values(), label = labels,  color = colors, alpha = 0.8)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# add a title to the plot\nplt.title(\"Treemap using external libraries\");","0ab55d48":"# Useful for:\n# A bar chart or bar graph is a chart or graph that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Bar_chart\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# get a dictionary with x and y from a dictionary\nd = df[\"manufacturer\"].value_counts().to_dict()\n\n# create n colors based on the number of labels we have\ncolors = [plt.cm.Spectral(i\/float(len(d.keys()))) for i in range(len(d.keys()))]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (12, 8))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using matplotlib\nax.bar(d.keys(), d.values(), color = colors)\n\n# iterate over every x and y and annotate the value on the top of the barchart\nfor i, (k, v) in enumerate(d.items()):\n    ax.text(k, # where to put the text on the x coordinates\n            v + 1, # where to put the text on the y coordinates\n            v, # value to text\n            color = colors[i], # color corresponding to the bar\n            fontsize = 10, # fontsize\n            horizontalalignment = 'center', # center the text to be more pleasant\n            verticalalignment = 'center'\n           )\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# change the size of the x and y ticks\nax.tick_params(axis = 'x', labelrotation = 90, labelsize = 12)\nax.tick_params(axis = 'y', labelsize = 12)\n\n# change the ylim\nax.set_ylim(0, 45)\n\n# set a title for the plot\nax.set_title(\"Number of Vehicles per Manufacturer\", fontsize = 14);","75d3d730":"# Useful for:\n# Timeseries is a special type of plots where the time component is present.\n\n# More info: \n# https:\/\/study.com\/academy\/lesson\/time-series-plots-definition-features.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/AirPassengers.csv'\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# helper function to transform and work with the time column\ndef create_date_tick(df):\n    '''\n    Converts dates from this format: Timestamp('1949-01-01 00:00:00')\n    To this format: 'Jan-1949'\n    '''\n    df[\"date\"] = pd.to_datetime(df[\"date\"]) # convert to datetime\n    df[\"month_name\"] = df[\"date\"].dt.month_name() # extracts month_name\n    df[\"month_name\"] = df[\"month_name\"].apply(lambda x: x[:3]) # passes from January to Jan\n    df[\"year\"] = df[\"date\"].dt.year # extracts year\n    df[\"new_date\"] = df[\"month_name\"].astype(str) + \"-\" + df[\"year\"].astype(str) # Concatenaes Jan and year --> Jan-1949\n\n# create the time column and the xtickslabels column\ncreate_date_tick(df)\n\n# get the y values (the x is the index of the series)\ny = df[\"value\"]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (12, 8))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using matplotlib\nax.plot(y, color = \"red\", alpha = .5, label = \"Air traffic\")\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# set the gridlines\nax.grid(alpha = .3)\n\n# change the ylim\nax.set_ylim(0, 700)\n\n# get the xticks and the xticks labels\nxtick_location = df.index.tolist()[::6]\nxtick_labels = df[\"new_date\"].tolist()[::6]\n\n# set the xticks to be every 6'th entry\n# every 6 months\nax.set_xticks(xtick_location)\n\n# chage the label from '1949-01-01 00:00:00' to this 'Jan-1949'\nax.set_xticklabels(xtick_labels, rotation=90, fontdict={'horizontalalignment': 'center', 'verticalalignment': 'center_baseline'})\n\n# change the size of the font of the x and y axis\nax.tick_params(axis = 'x', labelrotation = 90, labelsize = 12)\nax.tick_params(axis = 'y', labelsize = 12)\n\n# set the title and the legend of the plot\nax.set_title(\"Air Passsengers Traffic (1949 - 1969)\", fontsize = 12)\nax.legend(loc = \"upper left\", fontsize = 10);","520cd233":"# Useful for:\n# Timeseries is a special type of plots where the time component is present.\n# This plot is a continuation of the previous one.\n# Here we use scatter markers and text to annotate relevant events.\n# In our case, the local maxima and minima\n\n# More info: \n# https:\/\/study.com\/academy\/lesson\/time-series-plots-definition-features.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/AirPassengers.csv'\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# helper function to transform and work with the time column\ndef create_date_tick(df):\n    '''\n    Converts dates from this format: Timestamp('1949-01-01 00:00:00')\n    To this format: 'Jan-1949'\n    '''\n    df[\"date\"] = pd.to_datetime(df[\"date\"]) # convert to datetime\n    df[\"month_name\"] = df[\"date\"].dt.month_name() # extracts month_name\n    df[\"month_name\"] = df[\"month_name\"].apply(lambda x: x[:3]) # passes from January to Jan\n    df[\"year\"] = df[\"date\"].dt.year # extracts year\n    df[\"new_date\"] = df[\"month_name\"].astype(str) + \"-\" + df[\"year\"].astype(str) # Concatenaes Jan and year --> Jan-1949\n\n# create the time column and the xtickslabels column\ncreate_date_tick(df)\n\n# get the y values (the x is the index of the series)\ny = df[\"value\"]\n\n# find local maximum INDEX using scipy library\nmax_peaks_index, _ = find_peaks(y, height=0) \n\n# find local minimum INDEX using numpy library\ndoublediff2 = np.diff(np.sign(np.diff(-1*y))) \nmin_peaks_index = np.where(doublediff2 == -2)[0] + 1\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (12, 8))\nax = fig.add_subplot()\n\n# plot the data using matplotlib\nax.plot(y, color = \"blue\", alpha = .5, label = \"Air traffic\")\n\n# we have the index of max and min, so we must index the values in order to plot them\nax.scatter(x = y[max_peaks_index].index, y = y[max_peaks_index].values, marker = \"^\", s = 90, color = \"green\", alpha = .5, label = \"Peaks\")\nax.scatter(x = y[min_peaks_index].index, y = y[min_peaks_index].values, marker = \"v\", s = 90, color = \"red\", alpha = .5, label = \"Troughs\")\n\n# iterate over some max and min in order to annotate the values\nfor max_annot, min_annot in zip(max_peaks_index[::3], min_peaks_index[1::5]):\n    \n    # extract the date to be plotted for max and min\n    max_text = df.iloc[max_annot][\"new_date\"]\n    min_text = df.iloc[min_annot][\"new_date\"]\n    \n    # add the text\n    ax.text(df.index[max_annot], y[max_annot] + 50, s = max_text, fontsize = 8, horizontalalignment = 'center', verticalalignment = 'center')\n    ax.text(df.index[min_annot], y[min_annot] - 50, s = min_text, fontsize = 8, horizontalalignment = 'center', verticalalignment = 'center')\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# change the ylim\nax.set_ylim(0, 700)\n\n# get the xticks and the xticks labels\nxtick_location = df.index.tolist()[::6]\nxtick_labels = df[\"new_date\"].tolist()[::6]\n\n# set the xticks to be every 6'th entry\n# every 6 months\nax.set_xticks(xtick_location)\n\n# chage the label from '1949-01-01 00:00:00' to this 'Jan-1949'\nax.set_xticklabels(xtick_labels, rotation=90, fontdict={'horizontalalignment': 'center', 'verticalalignment': 'center_baseline'})\n\n# change the size of the font of the x and y axis\nax.tick_params(axis = 'x', labelrotation = 90, labelsize = 12)\nax.tick_params(axis = 'y', labelsize = 12)\n\n# set the title and the legend of the plot\nax.set_title(\"Air Passsengers Traffic (1949 - 1969)\", fontsize = 12)\nax.legend(loc = \"upper left\", fontsize = 10);","c9c0b505":"# Useful for:\n# This plot are fundamental in timeseries analysis.\n# Basically here we compare the a series again itself but with some lags.\n# These are plots that graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.\n\n# More info: \n# https:\/\/machinelearningmastery.com\/gentle-introduction-autocorrelation-partial-autocorrelation\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/AirPassengers.csv'\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig, (ax1, ax2) = plt.subplots(1, 2,figsize = (16,6), dpi = 80)\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using the built in plots from the stats module\nplot_acf(df[\"value\"], ax = ax1, lags = 50)\nplot_pacf(df[\"value\"], ax = ax2, lags = 15);","c3fb3e29":"# Useful for:\n# The cross correlation plot compares two series to see if there have a correlation.\n# Remmember correlation not casuality\n\n# More info: \n# https:\/\/towardsdatascience.com\/four-ways-to-quantify-synchrony-between-time-series-data-b99136c4a9c9?gi=abf39ccba21b\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mortality.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# using this solution to calculate the cross correlation of 2 series\n# https:\/\/stackoverflow.com\/questions\/33171413\/cross-correlation-time-lag-correlation-with-pandas\ndef crosscorr(datax, datay, lag=0):\n    \"\"\" \n    Lag-N cross correlation. \n    Parameters\n    ----------\n    lag : int, default 0\n    datax, datay : pandas.Series objects of equal length\n\n    Returns\n    ----------\n    crosscorr : float\n    \"\"\"\n    return datax.corr(datay.shift(lag))\n\n# get the cross correlation\nxcov_monthly = [crosscorr(df[\"mdeaths\"], df[\"fdeaths\"], lag = i) for i in range(70)]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (8, 6))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using matplotlib\n# notice that this is a regular barchart but the width is really small\nax.bar(x = np.arange(len(xcov_monthly)), height = xcov_monthly, width = .3)\n\n# add some vertical lines that represent the significance level\n# you have to calculate them apart\nax.hlines(0.25, 0, len(xcov_monthly), alpha = .3)\nax.hlines(0, 0, len(xcov_monthly), alpha = .3)\nax.hlines(-0.25, 0, len(xcov_monthly), alpha = .3)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# set the title\nax.set_title(\"Cross Correlation Plot. mdeaths vs fdeasths\", fontsize = 14)\n\n# change the x and y ticks size\nax.tick_params(axis = 'x', labelsize = 10)\nax.tick_params(axis = 'y', labelsize = 10);","63cfdb92":"# Useful for:\n# The cross correlation plot compares two series to see if there have a correlation.\n# Remmember correlation not casuality.\n# This solution shows how to calculate the significance level\n\n# More info: \n# https:\/\/towardsdatascience.com\/four-ways-to-quantify-synchrony-between-time-series-data-b99136c4a9c9?gi=abf39ccba21b\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mortality.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n\n# separte x and y\nx = df['mdeaths']\ny = df['fdeaths']\n\n# Compute Cross Correlations\nccs = stattools.ccf(x, y)[:100]\nnlags = len(ccs)\n\n# Compute the Significance level\n# ref: https:\/\/stats.stackexchange.com\/questions\/3115\/cross-correlation-significance-in-r\/3128#3128\nconf_level = 2 \/ np.sqrt(nlags)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (8,6), dpi = 80)\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using matplotlib\n# notice that this is a regular barchart but the width is really small\nax.bar(x = np.arange(len(ccs)), height = ccs, width = .3)\n\n# add some vertical lines that represent the significance level\n# you have to calculate them apart\n# we calculated it before\nax.hlines(0, xmin = 0, xmax = 100, color = 'gray')  # 0 axis\nax.hlines(conf_level, xmin = 0, xmax = 100, color='gray')\nax.hlines(-conf_level, xmin = 0, xmax = 100, color='gray')\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# set the title\nax.set_title('$Cross\\; Correlation\\; Plot:\\; mdeaths\\; vs\\; fdeaths$', fontsize = 14)\n\n# change the xlim of the plot\nax.set_xlim(0,len(ccs))\n\n# change the x and y ticks size\nax.tick_params(axis = 'x', labelsize = 10)\nax.tick_params(axis = 'y', labelsize = 10);","f51be453":"# Useful for:\n# The theory behind timeseries, says that a series can be decomposed into 3 parts\n# The trend\n# The seasonal part\n# And the residual\n# This plots shows how to do this\n\n# More info: \n# https:\/\/machinelearningmastery.com\/decompose-time-series-data-trend-seasonality\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = '\/kaggle\/input\/the-50-plot-challenge\/AirPassengers.csv'\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# helper function to transform and work with the time column\ndef create_date_tick(df):\n    '''\n    Converts dates from this format: Timestamp('1949-01-01 00:00:00')\n    To this format: 'Jan-1949'\n    '''\n    df[\"date\"] = pd.to_datetime(df[\"date\"]) # convert to datetime\n    df.set_index(\"date\", inplace = True)\n    df[\"date\"] = df.index\n    df[\"month_name\"] = df[\"date\"].dt.month_name() # extracts month_name\n    df[\"month_name\"] = df[\"month_name\"].apply(lambda x: x[:3]) # passes from January to Jan\n    df[\"year\"] = df[\"date\"].dt.year # extracts year\n    df[\"new_date\"] = df[\"month_name\"].astype(str) + \"-\" +df[\"year\"].astype(str) # Concatenaes Jan and year --> Jan-1949\n\n# create the time column and the xtickslabels column    \ncreate_date_tick(df)\n\n# decompose the series using stats module\n# results in this case is a special class \n# whose attributes we can acess\nresult = seasonal_decompose(df[\"value\"])\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\n# make the subplots share teh x axis\nfig, axes = plt.subplots(ncols = 1, nrows = 4, sharex = True, figsize = (12,10))\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# using this cool thread:\n# https:\/\/stackoverflow.com\/questions\/45184055\/how-to-plot-multiple-seasonal-decompose-plots-in-one-figure\n# This allows us to have more control over the plots\n\n# plot the original data\nresult.observed.plot(ax = axes[0], legend = False)\naxes[0].set_ylabel('Observed')\naxes[0].set_title(\"Decomposition of a series\")\n\n# plot the trend\nresult.trend.plot(ax = axes[1], legend = False)\naxes[1].set_ylabel('Trend')\n\n# plot the seasonal part\nresult.seasonal.plot(ax = axes[2], legend = False)\naxes[2].set_ylabel('Seasonal')\n\n# plot the residual\nresult.resid.plot(ax = axes[3], legend = False)\naxes[3].set_ylabel('Residual')\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# get the xticks and the xticks labels\nxtick_location = df.index.tolist()[::6]\nxtick_labels = df[\"new_date\"].tolist()[::6]\n\n# set the xticks to be every 6'th entry\n# every 6 months\nax.set_xticks(xtick_location)\n\n# chage the label from '1949-01-01 00:00:00' to this 'Jan-1949'\nax.set_xticklabels(xtick_labels, rotation=90, fontdict={'horizontalalignment': 'center', 'verticalalignment': 'center_baseline'});","1b171828":"# Useful for:\n# Multiple timeseries is a special case when we plot 2 series and see their performance over time\n\n# More info: \n# https:\/\/study.com\/academy\/lesson\/time-series-plots-definition-features.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mortality.csv\"\ndf = pd.read_csv(PATH)\n\n# set the date column to be the index\ndf.set_index(\"date\", inplace = True)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 5))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using matplotlib\nax.plot(df[\"mdeaths\"], color = \"red\", alpha = .5, label = \"mdeaths\")\nax.plot(df[\"fdeaths\"], color = \"blue\", alpha = .5, label = \"fdeaths\")\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# get the xticks and the xticks labels\nxtick_location = df.index.tolist()[::6]\nxtick_labels = df.index.tolist()[::6]\n\n# set the xticks to be every 6'th entry\n# every 6 months\nax.set_xticks(xtick_location)\nax.set_xticklabels(xtick_labels, rotation=90, fontdict={'horizontalalignment': 'center', 'verticalalignment': 'center_baseline'});\n\n# change the x and y ticks to be smaller\nax.tick_params(axis = 'x', labelrotation = 90, labelsize = 12)\nax.tick_params(axis = 'y', labelsize = 12)\n\n# add legend, a title and grid to make it look nicer\nax.legend(loc = \"upper left\", fontsize = 10)\nax.set_title(\"Mdeaths and fdeaths over time\", fontsize = 14)\nax.grid(axis = \"y\", alpha = .3)","501bc852":"# Useful for:\n# Multiple timeseries is a special case when we plot 2 series and see their performance over time\n# However, here since the data is on a different scale, we will add a secondary y axis\n\n# More info: \n# https:\/\/study.com\/academy\/lesson\/time-series-plots-definition-features.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/economics.csv\"\ndf = pd.read_csv(PATH)\n\n# set the date column to be the index\ndf.set_index(\"date\", inplace = True)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# get the x and y values\nx_1 = df[\"psavert\"]\nx_2 = df[\"unemploy\"]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (14, 8))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using matplotlib\n# here is the main axis\nax.plot(x_1, color = \"red\", alpha = .3, label = \"Personal savings rate\")\n\n# suing twinx we can create a secondary axis\nax2 = ax.twinx()\n# plot the data on the secondary axis\nax2.plot(x_2, color = \"blue\", alpha = .3, label = \"Unemployment rate\")\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# get the xticks and the xticks labels (every 12 entry)\nxtick_location = df.index.tolist()[::12]\nxtick_labels = df.index.tolist()[::12]\n\n# set the xticks to be every 12'th entry\n# every 12 months\nax.set_xticks(xtick_location)\nax.set_xticklabels(xtick_labels, rotation = 90, fontdict={'horizontalalignment': 'center', 'verticalalignment': 'center_baseline'});\n\n# change the x and y ticks to be smaller for the main axis and for the secondary axis\nax.tick_params(axis = 'x', labelrotation = 90, labelsize = 12)\nax.tick_params(axis = 'y', labelsize = 12)\nax2.tick_params(axis = 'y', labelsize = 12)\n\n# set a title and a grid\nax.set_title(\"Personal savings rate vs Unemployed rate: 2 axis\", fontsize = 16)\nax.grid(axis = \"y\", alpha = .3)","119e3072":"# Useful for:\n# This is a regular timeseries plot, but we add some confidence level\/bands to the main series\n# We can add +- 5% values or we can compute the errors and add error bands\n\n# More info: \n# https:\/\/study.com\/academy\/lesson\/time-series-plots-definition-features.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/user_orders_hourofday.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# create a groupby df calculating the mean for each group\ngb_df = df.groupby([\"order_hour_of_day\"])[\"quantity\"].mean().to_frame()\n\n# separete x and calculate the upper and lower bands\nx = gb_df[\"quantity\"]\nx_lower = x*0.95\nx_upper = x*1.05\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (12, 8))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using matplotlib\nax.plot(x, color = \"white\", lw = 3)\nax.plot(x_lower, color = \"#bcbddc\")\nax.plot(x_upper, color = \"#bcbddc\")\n\n# fill the area between the 3 lines\nax.fill_between(x.index, x, x_lower, where = x > x_lower, facecolor='#bcbddc', interpolate = True)\nax.fill_between(x.index, x, x_upper, where = x_upper > x, facecolor='#bcbddc', interpolate = True)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# change the ylim\nax.set_ylim(0, 25)\n\n# set the x and y labels\nax.set_xlabel(\"Hour of day\")\nax.set_ylabel(\"# Orders\")\n\n# get the xticks and the xticks labels\nxtick_location = gb_df.index.tolist()[::2]\nxtick_labels = gb_df.index.tolist()[::2]\n\n# set the xticks to be every 2'th entry\n# every 2 months\nax.set_xticks(xtick_location)\nax.set_xticklabels(xtick_labels, fontdict={'horizontalalignment': 'center', 'verticalalignment': 'center_baseline', \"fontsize\":\"12\"})\n\n# change the x and y tick size\nax.tick_params(axis = 'x', labelsize = 12)\nax.tick_params(axis = 'y', labelsize = 12)\n\n# add a title and a gridline\nax.set_title(\"Mean orders +- 5% interval \", fontsize = 16)\nax.grid(axis = \"y\", alpha = .3)","ee4991df":"# Useful for:\n# This is a regular timeseries plot, but we add some confidence level\/bands to the main series\n# We can add +- 5% values or we can compute the errors and add error bands\n# This is a similar plot but for future sales competition dataset\n\n# More info: \n# https:\/\/study.com\/academy\/lesson\/time-series-plots-definition-features.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\"\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# a helper function that manipulates the df and returns weekly sales\n# for shop 31\ndef create_df_future_sales(PATH):\n    '''\n    Creates the df from the future sales competition.\n    Only for shop 31 and for educational purpose\n    '''\n    df = pd.read_csv(PATH)\n    df = df[df[\"shop_id\"] == 31][[\"item_cnt_day\", \"date\"]]\n    df[\"date\"] = pd.to_datetime(df[\"date\"])\n    df.set_index(\"date\", inplace = True)\n    df = df.resample(\"W\")[\"item_cnt_day\"].sum().to_frame()\n    \n    return df\n\n# get the needed df\ndf = create_df_future_sales(PATH)\n\n# separete x and calculate the upper and lower bands\nx = df[\"item_cnt_day\"]\nx_lower = x*0.95\nx_upper = x*1.05\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\n\nfig = plt.figure(figsize = (12, 8))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using matplotlib\nax.plot(x, color = \"black\", lw = 3)\nax.plot(x_lower, color = \"#bcbddc\")\nax.plot(x_upper, color = \"#bcbddc\")\n\n# fill the area between the 3 lines\nax.fill_between(x.index, x, x_lower, where = x > x_lower, facecolor='#bcbddc', interpolate = True)\nax.fill_between(x.index, x, x_upper, where = x_upper > x, facecolor='#bcbddc', interpolate = True)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# get the xticks and the xticks labels\nxtick_location = df.index.tolist()[::4]\nxtick_labels = df.index.tolist()[::4]\n\n# set the xticks to be every 4'th entry\n# every 4 week\nax.set_xticks(xtick_location)\nax.set_xticklabels(xtick_labels, fontdict={'horizontalalignment': 'center', 'verticalalignment': 'center_baseline', \"fontsize\":\"12\"})\n\n# change the size of the x and y ticks\nax.tick_params(axis = 'x', labelsize = 12, rotation = 90)\nax.tick_params(axis = 'y', labelsize = 12)\n\n# set the x and y label\nax.set_xlabel(\"Week of the year\")\nax.set_ylabel(\"Mean sales\")\n\n# set the title and add a grid\nax.set_title(\"Mean sales +- 5% interval for shop 31\", fontsize = 16)\nax.grid(axis = \"y\", alpha = .3)","e103080d":"# Useful for:\n# This is a regular timeseries plot, but we add some confidence level\/bands to the main series\n# We can add +- 5% values or we can compute the errors and add error bands\n# In this plot we will calculate the error bands using stats module\n\n# More info: \n# https:\/\/study.com\/academy\/lesson\/time-series-plots-definition-features.html\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/orders_45d.csv\"\ndf_raw = pd.read_csv(PATH, parse_dates = ['purchase_time', 'purchase_date'])\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# Prepare Data: Daily Mean and SE Bands\ndf_mean = df_raw.groupby('purchase_date').quantity.mean()\ndf_se = df_raw.groupby('purchase_date').quantity.apply(sem).mul(1.96)\n\n# prepare the xticks in a specific format\nx = [d.date().strftime('%Y-%m-%d') for d in df_mean.index]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (12,6), dpi = 80)\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nax.plot(x, df_mean, color = \"white\", lw = 2)\nax.fill_between(x, df_mean - df_se, df_mean + df_se, color = \"#3F5D7D\") \n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# change the spines to make it look cleaner\nax.spines[\"top\"].set_alpha(0)\nax.spines[\"bottom\"].set_alpha(1)\nax.spines[\"right\"].set_alpha(0)\nax.spines[\"left\"].set_alpha(1)\n\n# get the xticks and the xticks labels\nxtick_location = x[::6]\nxtick_labels = [str(d) for d in x[::6]]\n\n# set the xticks to be every 4'th entry\n# every 4 week\nax.set_xticks(xtick_location)\nax.set_xticklabels(xtick_labels, fontdict = {'horizontalalignment': 'center', 'verticalalignment': 'center_baseline', \"fontsize\":\"12\"})\n\n# add a title\nax.set_title(\"Daily Order Quantity of Brazilian Retail with Error Bands (95% confidence)\", fontsize = 14)\n\n# change the x and y limit\ns, e = ax.get_xlim()\nax.set_xlim(s, e-2)\nax.set_ylim(4, 10)\n\n# set the y label for the plot\nax.set_ylabel(\"# Daily Orders\", fontsize = 12) \n\n# change the size of the x and y ticks\nax.tick_params(axis = 'x', labelsize = 12, rotation = 90)\nax.tick_params(axis = 'y', labelsize = 12)\n\n# add some horizontal lines to make the plot look nicer\nfor y in range(5, 10, 1):    \n    ax.hlines(y, xmin = s, xmax = e, colors = 'black', alpha = 0.5, linestyles = \"--\", lw = 0.5)","261a0a20":"# Useful for:\n# A stacked area chart is the extension of a basic area chart to display the evolution of the value of several groups on the same graphic. \n# The values of each group are displayed on top of each other. It allows to check on the same figure the evolution of both the total of a numeric variable, and the importance of each group. \n# If only the relative importance of each group interests you, you should probably draw a percent stacked area chart. \n# Note that this chart becomes hard to read if too many groups are displayed and if the patterns are really different between groups. In this case, think about using faceting instead.\n\n# More info: \n# https:\/\/python-graph-gallery.com\/stacked-area-plot\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/nightvisitors.csv\"\ndf = pd.read_csv(PATH)\n# set the data as index of the df\ndf.set_index(\"yearmon\", inplace = True)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n\n# get the x and y \nx = df.index\ny = [df[col].values for col in df.columns]\n\n# get the name of each group for the labels\nlabels = df.columns\n\n# prepare some colors for each group to be ploted\ncolors = [plt.cm.Spectral(i\/float(len(labels))) for i in range(len(labels))]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (14, 10))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nax.stackplot(x,y, labels = labels, colors = colors)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# get the xticks and the xticks labels\nxtick_location = df.index.tolist()[::3]\nxtick_labels = df.index.tolist()[::3]\n\n# set the xticks to be every 3'th entry\n# every 3 entry\nax.set_xticks(xtick_location)\nax.set_xticklabels(xtick_labels, fontdict={'horizontalalignment': 'center', 'verticalalignment': 'center_baseline', \"fontsize\":\"12\"})\n\n# change the x and y ticks to smaller size\nax.tick_params(axis = 'x', labelsize = 10, rotation = 90)\nax.tick_params(axis = 'y', labelsize = 10)\n\n# set the x and y label\nax.set_xlabel(\"Date\", fontsize = 12)\nax.set_ylabel(\"Visitors\", fontsize = 12)\n\n# change the ylim\nax.set_ylim(0, 90000)\n\n# set a title and a legend\nax.set_title(\"Night visitors in Australian Regions\", fontsize = 16)\nax.legend(fontsize = 8);","451a1fa9":"# Useful for:\n# An area chart is really similar to a line chart, except that the area between the x axis and the line is filled in with color or shading.\n# This draws the attention to the specific area.\n\n# More info: \n# http:\/\/python-graph-gallery.com\/area-plot\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/economics.csv\"\ndf = pd.read_csv(PATH)\n\n# set the date as the index of the df\ndf.set_index(\"date\", inplace = True)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n\n# get x and y\nx = df[\"psavert\"]\ny = df[\"uempmed\"]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (14, 8))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nax.plot(x, color = \"blue\", alpha = .3, label = \"Personal savings rate\")\nax.plot(y, color = \"red\", alpha = .3, label = \"Unemployment rate\")\n\n# fill the areas between the plots and the x axis\n# this can create overlapping areas between lines\nax.fill_between(x.index, 0, x, color = \"blue\", alpha = .2)\nax.fill_between(x.index, 0, y, color = \"red\", alpha = .2)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# set the title\nax.set_title(\"Personal savings rate vs Unemployed rate\", fontsize = 16)\n\n# get the xticks and the xticks labels\nxtick_location = df.index.tolist()[::12]\nxtick_labels = df.index.tolist()[::12]\n\n# set the xticks to be every 3'th entry\n# every 3 entry\nax.set_xticks(xtick_location)\nax.set_xticklabels(xtick_labels, rotation = 90, fontdict = {'horizontalalignment': 'center', 'verticalalignment': 'center_baseline'})\n\n# change the x and y ticks to smaller size\nax.tick_params(axis = 'x', labelrotation = 90, labelsize = 12)\nax.tick_params(axis = 'y', labelsize = 12)\n\n# more the spines of the axes\nax.spines[\"right\"].set_color(\"None\")\nax.spines[\"top\"].set_color(\"None\")\n\n# set a legend and the y grid for the plot\nax.legend(fontsize = 10)\nax.grid(axis = \"y\", alpha = .3);","78ac96ea":"# Useful for:\n# This is a very common plot you see everytime you connect to GitHub or Kaggle.\n# Display the activity of a person for a certain period of time (usually a year)\n# With a calendarmap\n\n# More info: \n# https:\/\/pythonhosted.org\/calmap\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/yahoo.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\ndf[\"date\"] = pd.to_datetime(df[\"date\"])\n# the data must be a series with a datetime index\ndf.set_index(\"date\", inplace = True)\nx = df[df[\"year\"] == 2014][\"VIX.Close\"]\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using calmap\ncalmap.calendarplot(x, fig_kws={'figsize': (16,10)}, yearlabel_kws={'color':'black', 'fontsize':14}, subplot_kws={'title':'Yahoo Stock Prices'});","ac685ac4":"# Useful for:\n# Seasonal plots are a regular lineplot but where we represent a lot of data\/seasons.\n# If the data is increasing year after year, we can see the evolution of the variable very nicely\n# in a smaller plot\n\n# More info: \n# https:\/\/python-graph-gallery.com\/line-chart\/\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/AirPassengers.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n\n# first of all. \n# We have the following format of our df\n#         date\tvalue\n# 0\t1949-01-01\t  112\n# 1\t1949-02-01\t  118\n# 2\t1949-03-01\t  132\n# 3\t1949-04-01\t  129\n# 4\t1949-05-01\t  121\n\n# Basically a lot of rows with each year month data\n# In order to plot the data into a seasonal chart, we need the data in this format\n# where each column is the year\n# index_ 1949\t1950\t1951\t1952\t1953\t1954\t1955\t1956\t1957\t1958\t1959\t1960\n# 1\t      112\t 115\t 145\t 171\t 196\t 204\t 242\t 284\t 315\t 340\t 360\t 417\n# 2\t      118\t 126\t 150\t 180\t 196\t 188\t 233\t 277\t 301\t 318\t 342\t 391\n\n# To do so, we must create a repeating index (12  months) for each year\n\n# create a repeating index of [1, 2, 3, .. 12] months x 12 times (12 years)\nindex_ = [i for i in range(1, 13)]*12\n\n# set the index into the dataframe\ndf[\"index_\"] = index_\n\n# create a dictionary with the months name (we will use this later to change the x axis)\nmonths_ = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\nd = {k:v for k,v in zip(index_[:12], months_)}\n\n# convert to datetime the date column\ndf[\"date\"] = pd.to_datetime(df[\"date\"])\n\n# extract the year using pandas datatime (dt)\ndf[\"year\"] = df[\"date\"].dt.year\n\n# drop the date\ndf.drop(\"date\", inplace = True, axis = 1)\n\n# create a pivot table\n# traspose the rows into columns, where the columns name are the year to plot\ndf = df.pivot(values = \"value\", columns = \"year\", index = \"index_\")\n\n# create n colors for each season\ncolors = [plt.cm.gist_earth(i\/float(len(df.columns))) for i in range(len(df.columns))]\n\n# get the x to plot\n# since we are extracting it from our new df\n# it has 12 values, one for each month\nx = df.index\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (12, 6))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# iterate over every column in the dataframe and plot the data\nfor col, color in zip(df.columns, colors):\n    # get the y to plot\n    y = df[col]\n    \n    # plot the data using seaborn\n    ax.plot(x, y, label = col, c = color)\n    \n    # get the x and y to annotate\n    x_annotate = x[-1]\n    y_annotate = df.iloc[11][col]\n    \n    # annotate at the end of each line some values\n    ax.text(x_annotate + 0.3, y_annotate, col, fontsize = 8, c = color)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# set the x and y label\nax.set_xlabel(\"Months\", fontsize = 13)\nax.set_ylabel(\"Air traffic\", fontsize = 13)\n\n# extract the x ticks location\nxtick_location = df.index.tolist()\n\n# using our dictionary, create a list of new xlabels\n# basically instead of numbers, strings of months\nmonths = [d[tick] for tick in xtick_location]\n\n# change the x ticks with our new x ticks labels\nax.set_xticks(xtick_location)\nax.set_xticklabels(months, rotation = 90, fontdict = {'horizontalalignment': 'center', 'verticalalignment': 'center_baseline', \"fontsize\":\"12\"})\n\n# change the y ticks font size\nax.tick_params(axis = 'y', labelsize = 12)\n\n# change the y limit to make the plot a little bigger\nax.set_ylim(0, 700)\n\n# get rid of spines from our plot\nax.spines[\"right\"].set_color(\"None\")\nax.spines[\"top\"].set_color(\"None\")\n\n# add a grid to the plot\nax.grid(axis = \"y\", alpha = .3)\n\n# set the title for the plot\nax.set_title(\"Monthly seasonal plot of air traffic (1949 - 1969)\", fontsize = 15);","6876b7aa":"# Useful for:\n# A dendrogram is a diagram representing a tree.\n# It's very useful to represent hierarchy in a dataset\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Dendrogram\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/USArrests.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (10, 7))\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using the scipy package\ndend = shc.dendrogram(shc.linkage(df[['Murder', 'Assault', 'UrbanPop', 'Rape']], method = 'ward'), \n                      labels = df[\"State\"].values, \n                      color_threshold = 100)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# using plt.gca() we get the current figure\nax = plt.gca()\n\n# set x and y label\nax.set_xlabel(\"County level\")\nax.set_ylabel(\"# of incidents\")\n\n# change the x and y ticks size\nax.tick_params(\"x\", labelsize = 10)\nax.tick_params(\"y\", labelsize = 10)\n\n# set a title\nax.set_title(\"US Arrests dendograms\");","c58df884":"# Useful for:\n# A cluster plots, help encircle data from a specific cluster, to help separte it more easily\n# Before drawing the plot, you must first cluster the data into similar groups.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Cluster_analysis\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/USArrests.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n\n# get the x and y to plot\nx = df[\"Murder\"]\ny = df[\"Assault\"]\n\n# first, create out cluster using the AgglomerativeClustering from sklearn\ncluster = AgglomerativeClustering(n_clusters = 5, # notice that we specify the number of \"optimal\" clusters\n                                  affinity = 'euclidean', # use the euclidean distance to compute similarity. The closer the better.\n                                  linkage = 'ward'\n                                 )  \n\n# fit and predict the clusters based on this data\ncluster.fit_predict(df[['Murder', 'Assault', 'UrbanPop', 'Rape']])  \n\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (12, 10))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\nax.scatter(x, y)\n\n# Encircle\ndef encircle(x,y, ax = None, **kw):\n    '''\n    Takes an axes and the x and y and draws a polygon on the axes.\n    This code separates the differents clusters\n    '''\n    # get the axis if not passed\n    if not ax: ax=plt.gca()\n    \n    # concatenate the x and y arrays\n    p = np.c_[x,y]\n    \n    # to calculate the limits of the polygon\n    hull = ConvexHull(p)\n    \n    # create a polygon from the hull vertices\n    poly = plt.Polygon(p[hull.vertices,:], **kw)\n    \n    # add the patch to the axes\n    ax.add_patch(poly)\n\n# use our cluster fitted before to draw the clusters borders like we did at the beginning of the kernel\n# basically go over each cluster and add a patch to the axes\nencircle(df.loc[cluster.labels_ == 0, 'Murder'], df.loc[cluster.labels_ == 0, 'Assault'], ec = \"k\", fc = \"gold\", alpha = 0.2, linewidth = 0)\nencircle(df.loc[cluster.labels_ == 1, 'Murder'], df.loc[cluster.labels_ == 1, 'Assault'], ec = \"k\", fc = \"tab:blue\", alpha = 0.2, linewidth = 0)\nencircle(df.loc[cluster.labels_ == 2, 'Murder'], df.loc[cluster.labels_ == 2, 'Assault'], ec = \"k\", fc = \"tab:red\", alpha = 0.2, linewidth = 0)\nencircle(df.loc[cluster.labels_ == 3, 'Murder'], df.loc[cluster.labels_ == 3, 'Assault'], ec = \"k\", fc = \"tab:green\", alpha = 0.2, linewidth = 0)\nencircle(df.loc[cluster.labels_ == 4, 'Murder'], df.loc[cluster.labels_ == 4, 'Assault'], ec = \"k\", fc = \"tab:orange\", alpha = 0.2, linewidth = 0)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# change the size of x and y ticks\nax.tick_params(\"x\", labelsize = 10)\nax.tick_params(\"y\", labelsize = 10)\n\n# set an x and y label\nax.set_xlabel(\"Murder\", fontsize = 12)\nax.set_ylabel(\"Assault\", fontsize = 12)\n\n# set a title for the plot\nax.set_title(\"Agglomerative clustering of US arrests (5 Groups)\", fontsize = 14);","92568527":"# Useful for:\n# Andrews curves allow one to plot multivariate data as a large number of curves that are created using the attributes of samples as coefficients for Fourier series.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Andrews_plot\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/mtcars.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# prepare the data for plotting\n# get the first 2 columns from our dataframe\nX = df[list(df.columns)[:-2]]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure \nfig = plt.figure(figsize = (12, 6))\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using pandas capabilities\nax = andrews_curves(X, 'cyl', colormap = 'Set1')\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# change the x and y font size\nax.tick_params(\"x\", labelsize = 10)\nax.tick_params(\"y\", labelsize = 10)\n\n# no gridlines\nax.grid(False)\n\n# set legend and title to the plot\nax.legend(loc = \"upper left\", fontsize = 10,  title = \"cyl\")\nax.set_title(\"Andrews curves\", fontsize = 14);","52f3c60b":"# Useful for:\n# Parallel coordinates allows one to see clusters in data and to estimate other statistics visually. \n# Using parallel coordinates points are represented as connected line segments. Each vertical line represents one attribute. \n# One set of connected line segments represents one data point. Points that tend to cluster will appear closer together.\n\n# More info: \n# https:\/\/en.wikipedia.org\/wiki\/Parallel_coordinates\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nPATH = \"\/kaggle\/input\/the-50-plot-challenge\/diamonds_filter.csv\"\ndf = pd.read_csv(PATH)\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\nfig = plt.figure(figsize = (12, 6))\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using pandas capabilities\nax = parallel_coordinates(df, 'cut', colormap = \"Dark2\")\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# change the x and y font size\nax.tick_params(\"x\", labelsize = 10)\nax.tick_params(\"y\", labelsize = 10)\n\n# no gridlines\nax.grid(False)\n\n# set legend and title to the plot\nax.legend(loc = \"upper left\", fontsize = 10,  title = \"Diamond type\")\nax.set_title(\"Parallel coordinates\", fontsize = 14);","2de9c5cc":"# If you have followed the kernel, you probably noticed that we pretty much have used the same tecniques.\n# Let's wrap them all in this section\n\n# HERE ARE THE MOST COMMON THINGS WE HAVE USED SO FAR\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\n\n# you create a basic figre like this\nfig = plt.figure(figsize = (10, 10))\n# ax = fig.add_subplot()\n\n# if you need more plots you can use \naxes = fig.subplots(1,2)\n\n# you can also use gridspec, which basically creates a matrix that you can index\n# using familiar numpy slicing\n# it more powerful but less common\n# gs = fig.add_gridspec(5, 5)\n\n# you need to add a new axes using add_subplot and specifiyng gridspec\n# ax1 = fig.add_subplot(gs[:4, :-1])\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n\n# create some fake data\nX = np.linspace(0,2,10)\nY = np.random.uniform(-.75,.5, 10)\n\n# access the plots and draw some data\nax1 = axes[0]\nax1.plot(X, Y, color = \"green\")\n\n# add a figre inside a figure\nax1_bis = fig.add_axes([0.25, 0.6, 0.2, 0.2])\nax1_bis.plot([1,2,1], color = \"pink\")\n\n# get rid of x and y ticks\nax1_bis.set_xticks([])\nax1_bis.set_yticks([])\n\n# get rid of spines\nax1_bis.spines[\"right\"].set_color(\"None\")\nax1_bis.spines[\"top\"].set_color(\"None\")\n\n# change the spine position\nax1_bis.spines['left'].set_position(('data',1))\n\nax2 = axes[1]\nax2.plot(X, Y*-2, color = \"red\")\n\n# create a secondary axis\nax2_bis = ax2.twinx()\nax2_bis.plot(X, Y)\n\n# add a vertical line\nax2.vlines(1, min(Y*-2), max(Y*-2))\n\n# add a horizontal line\nax1.hlines(-0.4, min(X), max(X))\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n\n# change the ticks size\nax1.tick_params(\"x\", labelsize = 10)\nax1.tick_params(\"y\", labelsize = 10)\n\nax2.tick_params(\"x\", labelsize = 10)\nax2.tick_params(\"y\", labelsize = 10)\n\n# get the xticks and the xticks labels\n# you can use the X specified\n# xtick_location = X[::3]\n\n# or you can get the current x\nxtick_location = ax2.get_xticks()[::3]\n\n# using specified X\n# xtick_labels = [\"New Label {}\".format(i) for i in range(len(X))][::3]\n\n# using current x\nxtick_labels = [\"New Label {}\".format(i) for i in range(len(ax2.get_xticks()))][::3]\n\n# set the xticks to be every 3'th entry\n# every 3 entry\nax2.set_xticks(xtick_location)\nax2.set_xticklabels(xtick_labels, rotation = 90, fontdict = {'horizontalalignment': 'center', 'verticalalignment': 'center_baseline'})\n\n# set x and y labels\nax1.set_xlabel(\"X label\", fontsize = 12)\nax1.set_ylabel(\"Y label\", fontsize = 12)\n\n# set a title for plots\nax1.set_title(\"Title for plot1\", fontsize = 12, color = 'black', ha = \"center\", va = \"center\")\nax2.set_title(\"Title for plot2\", fontsize = 12, color = 'green', ha = \"center\", va = \"center\")\n\n# annotate on plot\nax1.text(1, -0.6, \"Text\")\n\n# annotate on plot\nax2.annotate('Annotate', \n             xy = (0, 0), \n             xytext = (0.5, 0.5), \n             xycoords = 'data', \n             fontsize = 8, \n             ha = 'center', \n             va = 'center',\n             arrowprops = dict(arrowstyle = \"-\", connectionstyle = \"angle,angleA=0,angleB=90,rad=0\"), color = 'black'\n            )\n\n# add a custom legend\nax1.legend({class_:color for class_, color in zip([1, 2], [\"black\", \"red\"])}, loc = \"upper left\", title = \"Custom Legend\")\n\n# set a title for figure and tight_layout()\nfig.suptitle('Title for fig', fontsize = 20, color = 'darkred', alpha = .8, ha = \"center\", va = \"center\")\nfig.tight_layout();","02ab9e3f":"# this is a cheatsheet to plot lines in matplotlib\nplt.plot([1, 1], [1, 2], linestyle=\"--\", color = \"black\", label = \"black\")\nplt.plot([0, 1], [2, 2], linestyle=\"-\", color = \"blue\", label = \"blue\")\nplt.plot([1, 1], [3, 2], linestyle=\"-.\", color = \"red\", label = \"red\")\nplt.plot([1, 2], [2, 2], linestyle=\":\", color = \"magenta\", label = \"magenta\")\nplt.plot([1,2,3])\nplt.plot([3, 2, 1])\nplt.legend(loc = \"upper left\");","939f9ed0":"## this next line in markdown allows you to specify text in other colors\n# ### <span style=\"color:green\">* In matplotlib a basic plot starts with a figure and an axes.<\/span>\n\n## this next lines allows you to put hyperlinks inside a notebook for fast reference.\n## create a table of contents\n# <a id = \"table_of_contents\"><\/a>\n# Table of contents\n\n# [Importing libraries and setting some helper functions](#Imports)\n\n## code you have to put before a cell of code\n# <a id = \"Plot7\"><\/a>\n# # Plot 7: Marginal Boxplot\n# [Go back to the Table of Contents](#table_of_contents)","a4482cb2":"# In this code we will reproduce using our knowledge the following figure from N. Rougier GitHub.\n# It has to deal with the rule number 1, know you audience\n# https:\/\/github.com\/rougier\/ten-rules\/blob\/master\/figure-1.py\n\n# ----------------------------------------------------------------------------------------------------\n# get the data\ndiseases   = [\"Kidney Cancer\", \"Bladder Cancer\", \"Esophageal Cancer\", \"Ovarian Cancer\", \"Liver Cancer\", \"Non-Hodgkin's\\nlymphoma\",\n              \"Leukemia\", \"Prostate Cancer\", \"Pancreatic Cancer\", \"Breast Cancer\", \"Colorectal Cancer\", \"Lung Cancer\"]\n\nmen_deaths = [10000, 12000, 13000, 0, 14000, 12000, 16000, 25000, 20000, 500, 25000, 80000]\n\nmen_cases = [30000, 50000, 13000, 0, 16000, 30000, 25000, 220000, 22000, 600, 55000, 115000]\n\nwomen_deaths = [6000, 5500, 5000, 20000, 9000, 12000, 13000, 0, 19000, 40000, 30000, 70000]\n\nwomen_cases = [20000, 18000, 5000, 25000, 9000, 29000, 24000, 0, 21000, 160000, 55000, 97000]\n\n# generate a df from the data\ndf = pd.DataFrame([diseases, men_deaths, men_cases, women_deaths, women_cases], [\"diseases\", \"men_deaths\", \"men_cases\", \"women_deaths\", \"women_cases\"]).T\ndf.sort_values(\"women_deaths\", ascending = True, inplace = True)\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (20, 10))\naxes = fig.subplots(1, 2)\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n\n# for women cases, left plot\n# access the plot\nax1 = axes[0]\n\n# change the x and y limit\nax1.set_ylim(-.5, len(diseases))\n\n# create a secondary axis\nax1_bis = ax1.twiny()\nax1_bis.invert_xaxis()  # labels read top-to-bottom\n\n# plot a bar chart with the greater values\nax1_bis.barh(y = df[\"diseases\"], \n         width = df[\"women_cases\"],\n         color = \"red\", \n         alpha = .1)\n\n# plot a bar chart with the smaller values\n# make the height a little smaller to fit inside the bigger one\nax1_bis.barh(y = df[\"diseases\"], \n         width = df[\"women_deaths\"],\n         height = 0.6,\n         color = \"red\", \n         alpha = 0.6)\n\n# manipulate the spines of the plot to make it a little nicer\nax1.spines[\"top\"].set_color(\"None\")\nax1.spines[\"bottom\"].set_color(\"None\")\nax1.spines[\"left\"].set_color(\"None\")\nax1.spines[\"right\"].set_color(\"None\")\n\n# manipulate the spines of the plot to make it a little nicer\nax1_bis.spines[\"top\"].set_color(\"None\")\nax1_bis.spines[\"bottom\"].set_color(\"None\")\nax1_bis.spines[\"left\"].set_color(\"None\")\nax1_bis.spines[\"right\"].set_color(\"black\")\n\n# add vertical lines\nax1_bis.vlines(50_000, 0, len(diseases), color = \"white\", linestyle = \"dotted\")\nax1_bis.vlines(100_000, 0, len(diseases), color = \"white\", linestyle = \"dotted\")\nax1_bis.vlines(150_000, 0, len(diseases), color = \"white\", linestyle = \"dotted\")\n\n# set for the main plot the x and y labels to none\nax1.set_yticks([])\nax1.set_xticks([])\n\n# change the x ticks labels for the twinx acess\nx_ticks = ax1_bis.get_xticks()\nx_ticks[::2]\nx_ticks_labels = [\"WOMEN\", \"50,000\", \"100,000\", \"150,000\"]\n\n# change the x ticks with our new x ticks labels\nax1_bis.set_xticks(x_ticks[::2])\nax1_bis.set_xticklabels(x_ticks_labels, fontdict = {'horizontalalignment': 'center', 'verticalalignment': 'center_baseline', \"fontsize\":\"12\"})\n\n# add text to the left plot\nax1_bis.text(150_000, 7, \"Leading Causes\\nOf Cancer Deaths\", horizontalalignment = 'left', verticalalignment = 'baseline', fontdict = {'size':20})\nax1_bis.text(150_000, 6, \"In 2007, there were more\\nthan 1.4 million new cases\\nof cancer in the Unite States.\", horizontalalignment = 'left', verticalalignment = 'baseline', fontdict = {'size':12})\n\n# annotate text\nax1_bis.annotate('NEW CASES', \n                 xy = (85000, 11), \n                 xytext = (135000, 11),\n                 xycoords = 'data', \n                 fontsize = 12, \n                 ha = 'center', \n                 va = 'center',\n                 arrowprops = dict(arrowstyle = \"-\", connectionstyle = \"angle,angleA=0,angleB=90,rad=0\"), color = 'black')\n\n# annotate text\nax1_bis.annotate('DEATHS', \n                 xy = (60000, 11), \n                 xytext = (100000, 10.5), \n                 xycoords = 'data', \n                 fontsize = 12, \n                 ha = 'center', \n                 va = 'center',\n                 arrowprops = dict(arrowstyle = \"-\", connectionstyle = \"angle,angleA=0,angleB=90,rad=0\"), color = 'black')\n\n# ----------------------------------------------------------------------------------------------------\n# ----------------------------------------------------------------------------------------------------\n# ----------------------------------------------------------------------------------------------------\n# ----------------------------------------------------------------------------------------------------\n# ----------------------------------------------------------------------------------------------------\n\n# for man cases, right plot\n# access the plot\nax2 = axes[1]\n\n# change the x and y limit\nax2.set_ylim(-.5, len(diseases))\n\n# create a secondary axis\nax2_bis = ax2.twiny()\n\n# plot a bar chart with the greater values\nax2_bis.barh(y = df[\"diseases\"], \n         width = df[\"men_cases\"],\n         color = \"blue\", \n         alpha = .1)\n\n# plot a bar chart with the smaller values\n# make the height a little smaller to fit inside the bigger one\nax2_bis.barh(y = df[\"diseases\"], \n         width = df[\"men_deaths\"],\n         height = 0.6,\n         color = \"blue\", \n         alpha = 0.6)\n\n# manipulate the spines of the plot to make it a little nicer\nax2.spines[\"top\"].set_color(\"None\")\nax2.spines[\"bottom\"].set_color(\"None\")\nax2.spines[\"left\"].set_color(\"None\")\nax2.spines[\"right\"].set_color(\"None\")\n\n# manipulate the spines of the plot to make it a little nicer\nax2_bis.spines[\"top\"].set_color(\"None\")\nax2_bis.spines[\"bottom\"].set_color(\"None\")\nax2_bis.spines[\"left\"].set_color(\"black\")\nax2_bis.spines[\"right\"].set_color(\"None\")\n\n# add vertical lines\nax2_bis.vlines(50_000, 0, len(diseases), color = \"white\", linestyle = \"dotted\")\nax2_bis.vlines(100_000, 0, len(diseases), color = \"white\", linestyle = \"dotted\")\nax2_bis.vlines(150_000, 0, len(diseases), color = \"white\", linestyle = \"dotted\")\nax2_bis.vlines(200_000, 0, len(diseases), color = \"white\", linestyle = \"dotted\")\n\n# annotate text\nax2_bis.annotate('NEW CASES', \n                 xy = (100000, 11), \n                 xytext = (150000, 11),\n                 xycoords = 'data', \n                 fontsize = 12, \n                 ha = 'center', \n                 va = 'center',\n                 arrowprops = dict(arrowstyle = \"-\", connectionstyle = \"angle,angleA=0,angleB=90,rad=0\"), color = 'black')\n\n# annotate text\nax2_bis.annotate('DEATHS', \n                 xy = (60000, 11), \n                 xytext = (130000, 10.5), \n                 xycoords = 'data', \n                 fontsize = 12, \n                 ha = 'center', \n                 va = 'center',\n                 arrowprops = dict(arrowstyle = \"-\", connectionstyle = \"angle,angleA=0,angleB=90,rad=0\"), color = 'black')\n\n# change the x ticks labels for the twinx acess\nx_ticks = ax2_bis.get_xticks()\nx_ticks_labels = [\"MEN\", \"50,000\", \"100,000\", \"150,000\", \"200,000\"]\n\n# change the x ticks with our new x ticks labels\nax2_bis.set_xticks(x_ticks)\nax2_bis.set_xticklabels(x_ticks_labels, fontdict = {'horizontalalignment': 'center', 'verticalalignment': 'center', \"fontsize\":\"12\"})\n\n# put the disease in the middle of the 2 y axis.\n# on the github you have another solution\n# I had to make this workaround since, my approach was a little different\nfor y_, disease in zip([0.095, 0.17, 0.245, 0.31, 0.385, 0.45, 0.525, 0.6, 0.667, 0.742, 0.81, 0.875], df[\"diseases\"].values):\n    plt.text(0.5, y_, disease, transform=fig.transFigure, fontsize=14,horizontalalignment='center', verticalalignment='center')\n\n# change the x and y lables\nax2.set_xticks([])\nax2.set_yticks([])\nplt.tight_layout();","5a1c0a7e":"# In this code we will reproduce using our knowledge the following figure from N. Rougier GitHub.\n# It has to deal with the rule number 8, about chart junks.\n# https:\/\/github.com\/rougier\/ten-rules\/blob\/master\/figure-7.py\n    \n# ----------------------------------------------------------------------------------------------------\n# get the data\np, n = 7, 32\nX = np.linspace(0,2,n)\nY = np.random.uniform(-.75,.5,(p,n))\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\n\n# plot the chart junk\nfig = plt.figure(figsize = (20, 10))\ngs = fig.add_gridspec(p, 2)\nax_main = fig.add_subplot(gs[:, :1])\n\n# plot everything into the same plot\nfor i, y in enumerate(Y):\n    ax_main.plot(X, y, label = \"Series {}\".format(i + 1))\n    \n# ----------------------------------------------------------------------------------------------------\n# plot a better solution for this chart\n# for every row we created in gridspec\nfor i in range(p):\n    # add a new figure\n    ax_ = fig.add_subplot(gs[i, 1])\n    for y in Y:\n        # plot all the series but with a grey color and a medium alpha\n        # this way the bars are like in the background\n        ax_.plot(X, y, color = \"grey\", alpha = .5)\n        # plot a new line, of the current line with a back color to stand out\n        ax_.plot(X, Y[i], color = \"black\")\n\n        # eliminate all the y ticks\n        ax_.set_yticks([])        \n        \n        # for all the plots except the last one, eliminame the xticks\n        if i < 6:\n            ax_.set_xticks([])\n        \n        # manipulate the spines to make the plots look nicer\n        ax_.spines[\"top\"].set_color(\"None\")\n        ax_.spines[\"bottom\"].set_color(\"None\")\n        ax_.spines[\"right\"].set_color(\"None\")\n        ax_.spines[\"left\"].set_color(\"Black\")\n        \n        # set a specific y label, with the series name\n        ax_.set_ylabel(\"Series {}\".format(i + 1), horizontalalignment = \"right\", verticalalignment = \"center\", fontsize = 10, rotation = \"horizontal\")\n                \n        # for every plot, add a grey background\n        ax_.patch.set_facecolor('grey')\n        ax_.patch.set_alpha(0.1)\n        \n        # change the x and y limits\n        ax_.set_xlim(0, 2)\n        ax_.set_ylim(-1, 1)\n        \n        # add 3 vertical lines to separate better the plot\n        ax_.vlines(0.5, -1, 1, lw = 1, alpha = .5)\n        ax_.vlines(1, -1, 1, lw = 1, alpha = .5)\n        ax_.vlines(1.5, -1, 1, lw = 1, alpha = .5)\n        \n# get the xticks of the last axes\nx_ticks = ax_.get_xticks()\n\n# change them to plot every 2 entrance\nax_.set_xticks(x_ticks[::2])\nax_.set_xticklabels(x_ticks[::2])\n\n# change the x tick font size\nax_.tick_params(\"x\", labelsize = 10)\n        \n# manipulate the main axes (left plot)\n# change the x and y tick font size\nax_main.tick_params(\"x\", labelsize = 10)\nax_main.tick_params(\"y\", labelsize = 10)\n\n# change the x and y limits\nax_main.set_xlim(0, 2)\nax_main.set_ylim(-1, 1)\n\n# add a grid and a yellow facecolor\nax_main.grid(\"--\")\nax_main.set_facecolor(\"yellow\")\n\n# add a legend for the main axes\nax_main.legend(loc = \"upper left\", fontsize = 10)\n\n# add a title for the all figure\nfig.suptitle('Junk chart on the left and a better approach on the right (rule #8)', fontsize = 26, color = 'darkred', alpha = .5);","32fbe3be":"# That's all, thank you very much!\n# I hope you learned a lot of matplotlib and plotting.","2ffa9207":"<a id = \"Plot31\"><\/a>\n# Plot 31: Waffle chart\n[Go back to the Table of Contents](#table_of_contents)","c297753b":"<a id = \"Bonus5\"><\/a>\n# Bonus5: 10 simple rules for better plotting\n[Go back to the Table of Contents](#table_of_contents)","965c963e":"<a id = \"Plot42\"><\/a>\n# Plot 42: Timeseries with bands\n[Go back to the Table of Contents](#table_of_contents)","f15f5997":"<a id = \"Plot46\"><\/a>\n# Plot 46: Seasonal plot\n[Go back to the Table of Contents](#table_of_contents)","bef555b7":"<a id = \"Plot50\"><\/a>\n# Plot 50: Parallel Coordinates\n[Go back to the Table of Contents](#table_of_contents)","8d936d43":"<a id = \"Plot6\"><\/a>\n# Plot 6: Marginal Histogram\n[Go back to the Table of Contents](#table_of_contents)","2523becc":"<a id = \"Plot23\"><\/a>\n# Plot 23: Density curves with histograms\n[Go back to the Table of Contents](#table_of_contents)","8a184c09":"<a id = \"Plot35\"><\/a>\n# Plot 35: Timeseries\n[Go back to the Table of Contents](#table_of_contents)","0adb4e67":"As you can see, depending on the style you use, you are using one layer or another and this impacts the way of doing things.\n\n### <span style=\"color:green\">All these methods can be used and will produce the same result when you want to do a single plot. <\/span>\n\nBut, if you wan multiple plots, that's where the things atart to differ.\n\nFor example, if you want 4 plots in 2 x 2 format, you can do it like this.","db553311":"<a id = \"table_of_contents\"><\/a>\n# Table of contents\n\n[Importing libraries and setting some helper functions](#Imports)\n\n[Plot to get motivated: Sine and Cosine Plot](#PlotMotivation)\n\n[Understanding the basics of matplotlib](#Basics)\n\n# [The 50 Plot challenge](#50PlotChallenge)\n\n## <span style=\"color:black\">Correlation plots: 1 - 9<\/span>\n\n[Plot 1: Scatter plot](#Plot1)\n\n[Plot 2: Bubble plot with encircling](#Plot2)\n\n[Plot 3: Scatter plot with linear regression line of best fit](#Plot3)\n\n[Plot 4: Jittering with stripplot](#Plot4)\n\n[Plot 5: Counts Plot](#Plot5)\n\n[Plot 6: Marginal Histogram](#Plot6)\n\n[Plot 7: Marginal Boxplot](#Plot7)\n\n[Plot 8: Correllogram (correlation plot)](#Plot8)\n\n[Plot 9: Pairplot](#Plot9)\n\n## <span style=\"color:black\">Deviation plots: 10 - 14<\/span>\n\n[Plot 10: Diverging bars](#Plot10)\n\n[Plot 11: Diverging lines with text](#Plot11)\n\n[Plot 12: Diverging dot plot](#Plot12)\n\n[Plot 13: Diverging Lollipop Chart with Markers](#Plot13)\n\n[Plot 14: Area chart](#Plot14)\n\n## <span style=\"color:black\">Ranking plots: 15 - 19<\/span>\n\n[Plot 15: Ordered Bar Chart](#Plot15)\n\n[Plot 16: Lollipop Chart](#Plot16)\n\n[Plot 17: Dot plot](#Plot17)\n\n[Plot 18: Slope chart](#Plot18)\n\n[Plot 19: Dumbbell plot](#Plot19)\n\n## <span style=\"color:black\">Distribution plots: 20 - 30<\/span>\n\n[Plot 20: Histogram for continuous variable](#Plot20)\n\n[Plot 21: Histogram for categorical variable](#Plot21)\n\n[Plot 22: Density plot](#Plot22)\n\n[Plot 23: Density curves with histograms](#Plot23)\n\n[Plot 24: Joyplot](#Plot24)\n\n[Plot 25: Distributed dot plot](#Plot25)\n\n[Plot 26: Box plot](#Plot26)\n\n[Plot 27: Dot + box plot](#Plot27)\n\n[Plot 28: Violin plot](#Plot28)\n\n[Plot 29: Population pyramid](#Plot29)\n\n[Plot 30: Categorical plot](#Plot30)\n\n## <span style=\"color:black\">Composition\/group plots: 31 - 34<\/span>\n\n[Plot 31: Waffle chart](#Plot31)\n\n[Plot 32: Pie chart](#Plot32)\n\n[Plot 33: Tree map](#Plot33)\n\n[Plot 34: Bar chart](#Plot34)\n\n## <span style=\"color:black\">Variation\/change plots: 35 - 46<\/span>\n\n[Plot 35: Timeseries](#Plot35)\n\n[Plot 36: Timeseries with peaks and troughs annotated](#Plot36)\n\n[Plot 37: Autocorrelation (ACF) and partial autocorrelation (PACF) plot](#Plot37)\n\n[Plot 38: Cross correlation plot](#Plot38)\n\n[Plot 39: Timeseries decomposition plot](#Plot39)\n\n[Plot 40: Multiple timeseries](#Plot40)\n\n[Plot 41: Plotting with different scales using secondary Y axi](#Plot41)\n\n[Plot 42: Timeseries with bands](#Plot42)\n\n[Plot 43: Stacked area chart](#Plot43)\n\n[Plot 44: Area chart Unstacked](#Plot44)\n\n[Plot 45: Calendar heat map](#Plot45)\n\n[Plot 46: Seasonal plot](#Plot46)\n\n## <span style=\"color:black\">Cluster plots: 47 - 50<\/span>\n\n[Plot 47: Dendogram](#Plot47)\n\n[Plot 48: Cluster plot](#Plot48)\n\n[Plot 49: Andrews curves](#Plot49)\n\n[Plot 50: Parallel Coordinates](#Plot50)\n\n\n## <span style=\"color:black\">Wrap up section<\/span>\n\n[Wrap up section](#Wrap_up)\n\n## <span style=\"color:black\">Bonus section<\/span>\n\n[Bonus1: how to make simple lines to connect points in matplotlib](#Bonus1)\n\n[Bonus2: how to make create hyperlinks inside a document and change the color of a text](#Bonus2)\n\n[Bonus3: how to make Choropleth maps in Python](#Bonus3)\n\n[Bonus4: create TimeSlider Choropleth maps in Python](#Bonus4)\n\n[Bonus5: 10 simple rules for better plotting](#Bonus5)\n\n## <span style=\"color:black\">Reference<\/span>\n\n[Reference](#Reference_link)","9543b21e":"But if you want to make not a regular n x n column but something more sophisticated, you can only do it using grid.\n\nI will use a very similar example that you will find the the official documentation.","d353261d":"<a id = \"Plot47\"><\/a>\n# Plot 47: Dendogram\n[Go back to the Table of Contents](#table_of_contents)","6be8533c":"<a id = \"Plot21\"><\/a>\n# Plot 21: Histogram for categorical variable\n[Go back to the Table of Contents](#table_of_contents)","f9a5b2a3":"## Understanding the figure, subplots and axes in matplotlib.\n\nMatplotlib can be very confusing for newcomers. There are a lot of ways to do things and a lot of terminology.\n\nLet's understand the basic things, ***figure, subplots and axes***.\n\nIf you look closer to the next figure, you will see that a figure is basically the canvas or a box where we can store all our plots\/charts. It's the highest hierarchy.\n\nThe next in the row is Axes. Axes basically means the composition where our plot will live (a box (axes) with a chart inside other box (figure)).\n\n## <span style=\"color:green\">In matplotlib a basic plot starts with a figure and an axes.<\/span>\n\nA side note: axes is not the same as axis. Actually every axes contains x axis and y axis. And the plural side of axes doesn't mean that much.\n\n![Matplotlib Figure](https:\/\/matplotlib.org\/_images\/fig_map.png)\n\nThese and other important terms are summarized in the following image:\n\n![](https:\/\/matplotlib.org\/_images\/anatomy1.png)\n\n(both images from matplotlib.org)","a9edbc71":"This is based on the article I found by these authors: Nicolas P. Rougier, Michael Droettboom, Philip E. Bourne\n\nhttps:\/\/journals.plos.org\/ploscompbiol\/article?id=10.1371\/journal.pcbi.1003833\n\nI thought it would be cool the share what professional thing about good plotting and how to improve it.\n\n* Rule 1: Know Your Audience.\n> You plot has to be designed with your audience in mind. It's not the same to communicate with professional scientist, upper managment or with general public.\n> Remmember that when you are thinking about the plot.\n* Rule 2: Identify Your Message\n> Your figure must containg a message in order to be succeful. Take your time to think about the message you want to send, and once it's clear for you\n> starts developing the figure.\n* Rule 3: Adapt the Figure to the Support Medium\n> This is a more practical rule. Know where your figures will be presented and adapt the figure accordingly.\n> It's not the same if the figure will be in a powerpoing, journal or an email.\n> If it's part of a bigger presentatio, make the lines bolder, the plot simpler so that the viewer can instantly\n> understand it.\n* Rule 4: Captions Are Not Optional\n> Provide additional information or data for facilitate the comprehension of the plot.\n> In a bar chart, if it's relevant, add the numbers to facilitate the comparison.\n> If needed, add an example about how to read the plot.\n* Rule 5: Do Not Trust the Defaults\n> The defaults of any plotting library are good enough for any plot but they are best for none.\n> Adjust the color palletes, the fontsize, title, spines, axies and so on for the figure.\n> To make it more readable and more nicer to look at.\n* Rule 6: Use Color Effectively\n> We have associated feelings with specific colors so use them accordingly. There are 3 colorsmaps, use the most relevant for your data:\n> 1. Sequential: one variation of a unique color, used for quantitative data varying from low to high.\n> 2. Diverging: variation from one color to another, used to highlight deviation from a median value.\n> 2. Qualitative: rapid variation of colors, used mainly for discrete or categorical data.\n* Rule 7: Do Not Mislead the Reader\n> Try to show the data as objectively as possible. Some tools are very bad by nature: like pie charts or 3D charts when comparing quantities.\n> As a rule of thumb, make sure to always use the simplest type of plots that can convey your message and make sure to use labels, ticks, title, and the full range of values when relevant.\n* Rule 8: Avoid \u201cChartjunk\u201d\n> Chartjunk refers to all the unnecessary or confusing visual elements found in a figure that do not improve the message (in the best case) or add confusion (in the worst case). \n> For example, chartjunk may include the use of too many colors, too many labels, gratuitously colored backgrounds, useless grid lines, etc.\n* Rule 9: Message Trumps Beauty\n> In science, message and readability of the figure is the most important aspect while beauty is only an option.\n* Rule 10: Get the Right Tool\n> There are a lot of libraries that you can use to make plots and figures. You have plenty of libraries in Python, R, Javascript, Matlab, Excel, Tableau and others.\n> Use the right tool for each plot.\n> For example: in our Choropleth map, we could have used the Matplotlib version, however using Folium is a better choice because it makes it more easy.","66a9c7d0":"I hope that know you understand the main difference between the different commands and in what scenario to call them.\n\n***Remmember, most of the time, you can go wit plt.plot() but as you will get more experienced and want more control you will eventually move into the OOP plotting aproach.***\n\nI will from now one use this method:\n\nfig = plt.figure()\nax1 = fig.add_subplot()\nor\ngs = fig.add_gridspec(2, 2).\n\nGridspec is much more powerful but is not common to see.","ec86d65f":"<a id = \"Plot38\"><\/a>\n# Plot 38: Cross correlation plot\n[Go back to the Table of Contents](#table_of_contents)","e4542c26":"<a id = \"Plot29\"><\/a>\n# Plot 29: Population pyramid\n[Go back to the Table of Contents](#table_of_contents)","a5c1d909":"# <span style=\"color:green\">This plot is an example of the power of matplotlib. By the end of this kernel you will learn to do this and more advanced plots.<\/span>","e594babe":"<a id = \"Bonus1\"><\/a>\n# Bonus1: how to make simple lines to connect points in matplotlib\n[Go back to the Table of Contents](#table_of_contents)","4330f9cf":"<a id = \"Plot15\"><\/a>\n# Plot 15: Ordered Bar Chart\n[Go back to the Table of Contents](#table_of_contents)","399d326e":"<a id = \"Plot17\"><\/a>\n# Plot 17: Dot plot\n[Go back to the Table of Contents](#table_of_contents)","8754ca83":"<a id = \"Plot33\"><\/a>\n# Plot 33: Tree map\n[Go back to the Table of Contents](#table_of_contents)","a0c4957f":"In matplotlib you can do different plots with different methodology. Doing the same exact plot can be achieved in multiple ways.\n\nI strongly recommed to pick one and stick with it. Basically it will avoid the have a complete mess in the future.\n\nI have taken a lot of tutorials and use matplotlib almost on a daily basis but I still struggle from time to time.\n\nThis tutorial has served me to finally choose one way of plotting that gives the best control over plots and also is very explicit in the code, thus is much more readable and understandable.\n\nI recommed using the ***OOP aproach of plotting in matplotlib*** and I will be covering this way of doing things in the tutorial.","269ef868":"<a id = \"Reference_link\"><\/a>\n# Reference\n[Go back to the Table of Contents](#table_of_contents)\n\n\n## This kernel would have been imposible to make without this amazing tutorials:\n\nMost basic matplotlib: https:\/\/towardsdatascience.com\/plt-xxx-or-ax-xxx-that-is-the-question-in-matplotlib-8580acf42f44\n\nUnderstand the difference between all the methods (add_subplot, add_subplots, add_axes ...): https:\/\/towardsdatascience.com\/the-many-ways-to-call-axes-in-matplotlib-2667a7b06e06\n\nMatplotlib grid documentation: https:\/\/matplotlib.org\/tutorials\/intermediate\/gridspec.html\n\nGreat tutorial fore beginners: https:\/\/github.com\/rougier\/matplotlib-tutorial\n\n10 simple rules for better plots: https:\/\/journals.plos.org\/ploscompbiol\/article?id=10.1371\/journal.pcbi.1003833#pcbi.1003833-Fung1\n\nCode for 10 simple rules for better plots: https:\/\/github.com\/rougier\/ten-rules\n\n50 beautiful plots using matplotlib: https:\/\/www.machinelearningplus.com\/plots\/top-50-matplotlib-visualizations-the-master-plots-python\/\n\nPandas plotting capabilities: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/visualization.html\n\nMore in details choropleths: https:\/\/www.kaggle.com\/python10pm\/covid-19-in-spain-by-regions-daily-update#-Please-Upvote-if-you-liked-it.\n\nMore examples using Folium: https:\/\/nbviewer.jupyter.org\/github\/python-visualization\/folium\/tree\/master\/examples\/","ff7748b1":"<a id = \"Plot18\"><\/a>\n# Plot 18: Slope chart\n[Go back to the Table of Contents](#table_of_contents)","e3af7b50":"<a id = \"Plot19\"><\/a>\n# Plot 19: Dumbbell plot\n[Go back to the Table of Contents](#table_of_contents)","be452c39":"<a id = \"Plot7\"><\/a>\n# Plot 7: Marginal Boxplot\n[Go back to the Table of Contents](#table_of_contents)","357f23b5":"<a id = \"Plot45\"><\/a>\n# Plot 45: Calendar heat map\n[Go back to the Table of Contents](#table_of_contents)","c740397e":"<a id = \"Plot28\"><\/a>\n# Plot 28: Violin plot\n[Go back to the Table of Contents](#table_of_contents)","0d940dab":"<a id = \"Plot14\"><\/a>\n# Plot 14: Area chart\n[Go back to the Table of Contents](#table_of_contents)","102e34e2":"<a id = \"Plot2\"><\/a>\n# Plot 2: Bubble plot with encircling\n[Go back to the Table of Contents](#table_of_contents)","aab6f3a2":"<a id = \"Plot36\"><\/a>\n# Plot 36: Timeseries with peaks and troughs annotated\n[Go back to the Table of Contents](#table_of_contents)","3198fe2b":"<a id = \"Plot11\"><\/a>\n# Plot 11: Diverging lines with text\n[Go back to the Table of Contents](#table_of_contents)","0b6120d7":"<a id = \"Plot27\"><\/a>\n# Plot 27: Dot + box plot\n[Go back to the Table of Contents](#table_of_contents)","6fdf3598":"<a id = \"Plot41\"><\/a>\n# Plot 41: Plotting with different scales using secondary Y axis\n[Go back to the Table of Contents](#table_of_contents)","108eafdf":"<a id = \"Imports\"><\/a>\n# Importing libraries and setting some helper functions\n[Go back to the Table of Contents](#table_of_contents)","0d4ac9f2":"<a id = \"Plot49\"><\/a>\n# Plot 49: Andrews curves\n[Go back to the Table of Contents](#table_of_contents)","133ad8be":"<a id = \"Plot48\"><\/a>\n# Plot 48: Cluster plot\n[Go back to the Table of Contents](#table_of_contents)","117e3b85":"<a id = \"Plot22\"><\/a>\n# Plot 22: Density plot\n[Go back to the Table of Contents](#table_of_contents)","ae8dde56":"### ***If you are wondering why are there so many ways of doing things. The answer is in the matplotlib architecture.***\n\n### ***Let's overview it really quickly.***\n\n![](https:\/\/image.slidesharecdn.com\/introtoplottinginpython1-160107141741\/95\/introduction-to-plotting-in-python-8-638.jpg?cb=1452176427)","26d409f4":"<a id = \"Wrap_up\"><\/a>\n# Wrap up section\n[Go back to the Table of Contents](#table_of_contents)","8701458a":"<a id = \"Plot10\"><\/a>\n# Plot 10: Diverging bars\n[Go back to the Table of Contents](#table_of_contents)","d6ea2aa8":"<a id = \"Plot26\"><\/a>\n# Plot 26: Box plot\n[Go back to the Table of Contents](#table_of_contents)","3bdcd949":"# Bonus section","ee6207b2":"<a id = \"Plot43\"><\/a>\n# Plot 43: Stacked area chart\n[Go back to the Table of Contents](#table_of_contents)","93935d6f":"<a id = \"Plot32\"><\/a>\n# Plot 32: Pie chart\n[Go back to the Table of Contents](#table_of_contents)","6959313a":"<a id = \"Plot13\"><\/a>\n# Plot 13: Diverging Lollipop Chart with Markers\n[Go back to the Table of Contents](#table_of_contents)","85087890":"This is a very nice challenge I decided to take.\n\nI have found this 50 amazingly beautiful plots:\n\nhttps:\/\/www.machinelearningplus.com\/plots\/top-50-matplotlib-visualizations-the-master-plots-python\/\n\nI have decided to reacreate them using mainly matplotlib.\n\n## <span style=\"color:green\">Go ahead and try to replicate them aswel. I assure you will learn a lot.<\/span>","769dd55e":"<a id = \"Plot39\"><\/a>\n# Plot 39: Timeseries decomposition plot\n[Go back to the Table of Contents](#table_of_contents)","657fa935":"<a id = \"Plot9\"><\/a>\n# Plot 9: Pairplot\n[Go back to the Table of Contents](#table_of_contents)","00845911":"<a id = \"Plot20\"><\/a>\n# Plot 20: Histogram for continuous variable\n[Go back to the Table of Contents](#table_of_contents)","0dd0bdec":"<a id = \"Plot3\"><\/a>\n# Plot 3: Scatter plot with linear regression line of best fit\n[Go back to the Table of Contents](#table_of_contents)","84340cbd":"<a id = \"Plot40\"><\/a>\n# Plot 40: Multiple timeseries\n[Go back to the Table of Contents](#table_of_contents)","a7fc568e":"<a id = \"Plot12\"><\/a>\n# Plot 12: Diverging dot plot\n[Go back to the Table of Contents](#table_of_contents)","4c861ee2":"There is one more way to create this types of plots and it is using the gridspec.","92c8207f":"<a id = \"Plot4\"><\/a>\n# Plot 4: Jittering with stripplot\n[Go back to the Table of Contents](#table_of_contents)","e787bf92":"<a id = \"Plot5\"><\/a>\n# Plot 5: Counts Plot\n[Go back to the Table of Contents](#table_of_contents)","515ce28e":"<a id = \"Plot30\"><\/a>\n# Plot 30: Categorical plot\n[Go back to the Table of Contents](#table_of_contents)","6da30569":"<a id = \"PlotMotivation\"><\/a>\n# Plot to get motivated: Sine and Cosine Plot\n[Go back to the Table of Contents](#table_of_contents)","3f8f38a6":"<a id = \"Bonus2\"><\/a>\n# Bonus2: how to make create hyperlinks inside a document and change the color of a text\n[Go back to the Table of Contents](#table_of_contents)","ebd9fc50":"<a id = \"Plot1\"><\/a>\n# Plot 1: Scatter plot\n[Go back to the Table of Contents](#table_of_contents)","3d016920":"# Welcome to this kernel\n\nI started this kernel just for fun. I wanted to take the 50 Plot Challenge using mainly Matplotlib, but somehow it has grown into much more.\n\nHere you can find a basic tutorial of Matplotlib.\n\nMore than 80 plots (because for some plots we use different libraries or do some interesting changes, so they add up).\n\nA wrap up section with the most interesting things and the most used techniques.\n\nA simple guide with 10 rules for better plotting.\n\nA bonus section with some tricks.\n\nChoropleths and TimeSliderChoropleths maps using Folium.\n\nPlots like Sankeys (Plotly) and Chord plots (Bokeh) and some basic animation with Matplotlib.\n\nIf you miss something and think it might be interesting to add to the kernel, please leave a comment.\n\n# <span style=\"color:green\">Don't forget to upvote if you like it! It's free! :)<\/span>\n# Thanks and be safe!","36a19552":"<a id = \"Basics\"><\/a>\n# Understanding the basics of matplotlib\n[Go back to the Table of Contents](#table_of_contents)","9ff76860":"<a id = \"50PlotChallenge\"><\/a>\n# The 50 Plot challenge\n[Go back to the Table of Contents](#table_of_contents)","a47dab6e":"<a id = \"Plot34\"><\/a>\n# Plot 34: Bar chart\n[Go back to the Table of Contents](#table_of_contents)","f23fc752":"<a id = \"Plot16\"><\/a>\n# Plot 16: Lollipop Chart\n[Go back to the Table of Contents](#table_of_contents)","677c833f":"(Note: Bonus 3 & 4 were not working due to missing data.)","7514d254":"<a id = \"Plot37\"><\/a>\n# Plot 37: Autocorrelation (ACF) and partial autocorrelation (PACF) plot\n[Go back to the Table of Contents](#table_of_contents)","7ff72e8d":"<a id = \"Plot25\"><\/a>\n# Plot 25: Distributed dot plot\n[Go back to the Table of Contents](#table_of_contents)","20c9bda4":"### <span style=\"color:green\">When you create a gridspec, like 3 x 3, to post a plot into this grid you must use index slicing.<\/span>\n### <span style=\"color:green\">Hopefully, if you know numpy this is very familiar.<\/span>","6cc7c4ea":"### <span style=\"color:red\">It might see like a waste of time writing 3 lines instead of 1 to achieve the same result.<\/span>\n### <span style=\"color:red\">Most of the time, you can go away with just plt.plot(x, y) when doing simple plots.<\/span>\n### <span style=\"color:red\">However, I really suggest to use the explicit one. It will help you reuse code more frequently and also gives more control over the plots.<\/span>\n\nWe actually didn't explore all the posibilities. Here are some more examples of doing the same plot.","b71a5f5c":"<a id = \"Plot44\"><\/a>\n# Plot 44: Area chart Unstacked\n[Go back to the Table of Contents](#table_of_contents)","a8d0db8d":"<a id = \"Plot8\"><\/a>\n# Plot 8: Correllogram (correlation plot)\n[Go back to the Table of Contents](#table_of_contents)","32768b4f":"As you can see, there are 3 layers.\n\n1. The most low level: the back end layer. For example, when you write youre %matplotlib inline, it tells the backend to render everything without the need to call plt.show(). You can also use this layer to choose different engines to plot. For example: hvplot, jshtml and other to do dynamic plotting. ***But it's very likely it's the only case you will ever interact with this layer***\n\n2. Layer number two is the Artist Layer. This layer gives you the posibility to change the spines, axis, colors and much more. We acess this layer when we call ax1.plot() for example ***When doing plots using this methodology, your are using OOP aproach. I will stick with this one for the rest of the kernel***\n\n3. The last layer is very handy for fast plots. You use it when you do: plt.plot() for example. It's still powerful but not as powerful as the 2 layer.\n\nSo, in order to clarify the concepts and hopefully understand everything, I have prepared this small table:\n\n|Scripting Layer|Under the hood|Artist Layer|Details|\n|---|---|---|---|---|\n|plt.subplot()|You are actually calling ->|fig = plt.figure()<br>fig.add_subplot()|subplot automatically calls figure and adds 1 subplot|\n|plt.subplots()|You are actually calling ->|fig = plt.figure()<br>fig.subplots()|using subplots retruns a tuple so you must unpack it like: <br>fig, ax1 = plt.subplots()|\n|plt.axes()|You are actually calling ->|fig = plt.figure()<br>fig.add_axes()|plt.axes() returns one axes using fig.add_subplot(1, 1, 1). <br>The figure as in plt.subplot() is created automatically.|","09d2bbd5":"<a id = \"Plot24\"><\/a>\n# Plot 24: Joyplot\n[Go back to the Table of Contents](#table_of_contents)"}}