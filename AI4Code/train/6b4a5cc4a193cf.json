{"cell_type":{"c7ffd8b6":"code","57ad3328":"code","87e84cd5":"code","7e20c32f":"code","a5147be5":"code","349790c7":"code","beac7729":"code","a46fcd4f":"code","b77ebe35":"code","0439d7f5":"code","20b58acb":"code","c7563f60":"code","f38e6176":"code","be3190e5":"code","6b269c79":"code","7d198d9e":"code","ffebc7a8":"code","23c2e23f":"code","c1e28458":"code","dec861b7":"code","0a8608f1":"code","02577170":"code","0f73fdbf":"code","7c6bf931":"code","7a3c4748":"code","4ebd7a9f":"code","7cb358f9":"code","33321931":"code","63642392":"code","b99597a0":"code","d31ed3f1":"code","bd8cc48f":"code","3ba547bf":"code","5007f165":"code","43644583":"code","e32d5fef":"code","e30bc429":"code","4ef6ef20":"code","aeed11e8":"code","1adc2717":"code","2bdcb9a4":"code","6ddbf37a":"code","2d3c7003":"code","dbde7a6f":"code","eb37d461":"code","9c07beb4":"code","381d8fd5":"code","d1bb9fae":"code","dbd711f1":"code","b3b8a3f6":"code","b3776aa4":"code","d49774e1":"code","3a13c2d0":"code","1b21cc36":"code","efdefdeb":"code","681ef533":"markdown","0c4e8488":"markdown","3a79656c":"markdown","36e48d34":"markdown","e83f1a44":"markdown","19b788dc":"markdown","ebea6753":"markdown","1711195c":"markdown","534f553c":"markdown","37b5c940":"markdown","4245d7a6":"markdown","113a7b47":"markdown","d6b4bf2f":"markdown","0049a641":"markdown","60879556":"markdown","43421d3e":"markdown","6203b76f":"markdown","7c64523f":"markdown","151a0dce":"markdown","491800fd":"markdown","bf733d38":"markdown","30a1c289":"markdown","2e051f80":"markdown","0c0a2a97":"markdown","eaf60e20":"markdown"},"source":{"c7ffd8b6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV,train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,AdaBoostRegressor\nfrom sklearn.metrics import classification_report,mean_squared_error,mean_squared_log_error","57ad3328":"train=pd.read_csv('..\/input\/train.csv')\ntest=pd.read_csv('..\/input\/test.csv')","87e84cd5":"train","7e20c32f":"test","a5147be5":"Y=train['SalePrice']","349790c7":"data=pd.concat((train.drop('SalePrice',axis=1),test))\ndata=data.reset_index()\ndata=data.drop('index',axis=1)","beac7729":"data","a46fcd4f":"data.info()","b77ebe35":"print(open('..\/input\/data_description.txt').read())","0439d7f5":"corr_matrix=train.iloc[:,1:].corr()\nmask=np.zeros_like(corr_matrix,dtype=np.bool)\nmask[np.triu_indices_from(mask)]=True","20b58acb":"plt.figure(figsize=(40,40))\nsns.heatmap(corr_matrix,annot=True,mask=mask)","c7563f60":"plt.figure(figsize=(40,20))\nsns.heatmap(data.isna(),cmap='viridis',yticklabels=False)","f38e6176":"for i in data[data['MSZoning'].isnull()]['MSSubClass'].values:\n    mask=(data['MSSubClass']==i) & (data['MSZoning'].isnull()==False)\n    mask2=(data['MSSubClass']==i) & (data['MSZoning'].isnull()==True)    \n    idx=data[data[mask2].isnull()].index\n    data.loc[idx,'MSZoning']=data[mask]['MSZoning'].mode().item()","be3190e5":"plt.scatter(x=data['LotFrontage'],y=data['1stFlrSF'],s=2)","6b269c79":"#Filling out missing values of \"LotFrontage\" using Linear Regression.\n\nlin_reg=LinearRegression()\nlin_reg.fit(np.array(data[data['LotFrontage'].isna()==False]['1stFlrSF']).reshape(-1,1),\n            data[data['LotFrontage'].isna()==False]['LotFrontage'])\n\ndef LotFrontage_FIX(arr):\n    if pd.isnull(arr[0]):\n        return np.around(lin_reg.predict(np.array(arr[1]).reshape(-1,1)))[0]\n    else:\n        return arr[0]\n    \ndata['LotFrontage']=data[['LotFrontage','1stFlrSF']].apply(LotFrontage_FIX,axis=1)","7d198d9e":"#Filling \"NA\" for No Alley access.\n\ndata['Alley'].fillna('NA',inplace=True)","ffebc7a8":"#Filling out missing values of \"Utilities\" with most frequent value in \"Utilities\".\n\ndata['Utilities'].fillna(data['Utilities'].mode().item(),inplace=True)","23c2e23f":"#Filling missing value in 'Exterior1st' & 'Exterior2nd' with mode.\n\ndata['Exterior1st'].fillna(data['Exterior1st'].mode().item(),inplace=True)\n\ndata['Exterior2nd'].fillna(data['Exterior2nd'].mode().item(),inplace=True)","c1e28458":"#Filling out missing values of \"MasVnrArea\" with 0.\n\ndata['MasVnrArea'].fillna(0,inplace=True)","dec861b7":"#Filling out missing values of \"MasVnrType\" using Random Forest Classification.\n\nrf_obj=RandomForestClassifier(max_depth=5,n_estimators=50)\nrf_obj.fit(np.array(data[data['MasVnrType'].isna()==False]['MasVnrArea']).reshape(-1,1),\n           data[data['MasVnrType'].isna()==False]['MasVnrType'])\n\ndef MasVnrType_FIX(arr):\n    if pd.isnull(arr[0]):\n        return rf_obj.predict(np.array(arr[1]).reshape(-1,1))[0]\n    else:\n        return arr[0]\ndata['MasVnrType']=data[['MasVnrType','MasVnrArea']].apply(MasVnrType_FIX,axis=1)","0a8608f1":"#Filling \"NA\" for No Basement.\n\nmask=(data['BsmtQual'].isna() & \n      data['BsmtCond'].isna() & \n      data['BsmtExposure'].isna() & \n      data['BsmtFinType1'].isna() & \n      data['BsmtFinType2'].isna())\n\ndata.loc[data[mask].index,['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2']]=\"NA\"","02577170":"#Filling Missing values of Basement ('BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2').\n\ncols=['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2']\n\ndef Bsmt_FIX(df,colno):\n    idx=df[df.iloc[:,colno].isnull()].index\n\n    for i in idx:\n        value = df.loc[i,np.append(cols[:colno],cols[colno+1:])].values\n        mask=(df[np.append(cols[:colno],cols[colno+1:])]==value)\n        df.loc[i,cols[colno]] = (df[mask.all(axis=1)].iloc[:,colno].mode().values[0])\n\n    return df.iloc[:,colno]\n\n\nfor i in range(5):\n    data.loc[:,cols[i]]=Bsmt_FIX(data.loc[:,cols],i)","0f73fdbf":"#Filling Missing values of Basement ('BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath').\n\ncols_=['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath']\nmask=(data[data[cols_].isnull().any(axis=1)][cols]=='NA').all(axis=1)\ndata.loc[mask.index,cols_]=0.0","7c6bf931":"#Filling missing value in 'Electrical' with mode.\n\ndata['Electrical'].fillna(data['Electrical'].mode().item(),inplace=True)","7a3c4748":"#There is only 1 missing value in \"KitchenQual\".\n\nprint('Kitchen rating with missing value is',data[data['KitchenQual'].isna()]['KitchenAbvGr'].item())\nprint('Kitchen Quality with Rating=1 is',data[data['KitchenAbvGr']==1]['KitchenQual'].mode().item())","4ebd7a9f":"#Filling out missing values of \"KitchenQual\" with \"TA\".\n\ndata['KitchenQual'].fillna('TA',inplace=True)","7cb358f9":"#Filling missing value in 'Functional' with mode.\n\ndata['Functional'].fillna(data['Functional'].mode()[0],inplace=True)","33321931":"#Filling \"NA\" for No Fireplace.\n\ndef FireplaceQu_FIX(arr):\n    if arr[0]==0:\n        return \"NA\"\n    else:\n        return arr[1]\n\ndata['FireplaceQu']=data[['Fireplaces','FireplaceQu']].apply(FireplaceQu_FIX,axis=1)","63642392":"#Filling \"NA\" for No Garage.\nmask=(data['GarageType'].isna() & \n      data['GarageYrBlt'].isna() & \n      data['GarageFinish'].isna() & \n      data['GarageQual'].isna() & \n      data['GarageCond'].isna())\n\ndata.loc[data[mask].index,['GarageType','GarageYrBlt','GarageFinish','GarageQual','GarageCond']]=\"NA\"","b99597a0":"rf_obj=RandomForestClassifier(n_estimators=7,max_depth=5)\nrf_obj.fit((np.array(data[(data['GarageArea'].isnull()==False) & \n            (data['GarageCars'].isnull()==False)]['GarageArea'])).reshape(-1,1),\n           \n           np.array(data[(data['GarageArea'].isnull()==False) & \n            (data['GarageCars'].isnull()==False)]['GarageCars']))\n\ndata['GarageArea'].fillna(data['GarageArea'].mean(),inplace=True)\n\ndef GarageCars_FIX(arr):\n    if pd.isnull(arr[1]):\n        return rf_obj.predict(np.array(arr[0]).reshape(-1,1))[0]\n    else:\n        return arr[1]\n    \ndata['GarageCars']=data[['GarageArea','GarageCars']].apply(GarageCars_FIX,axis=1)","d31ed3f1":"data['GarageFinish'].fillna(data[data['GarageFinish']!='NA']['GarageFinish'].mode().item(),inplace=True)\ndata['GarageYrBlt'].fillna(data[data['GarageYrBlt']!='NA']['GarageYrBlt'].mode().item(),inplace=True)\ndata['GarageQual'].fillna(data[data['GarageQual']!='NA']['GarageQual'].mode().item(),inplace=True)\ndata['GarageCond'].fillna(data[data['GarageCond']!='NA']['GarageCond'].mode().item(),inplace=True)","bd8cc48f":"data['GarageYrBlt']=data['GarageYrBlt'].astype(str)","3ba547bf":"#Filling \"NA\" for No Pools.\n\ndef PoolQC_FIX(arr):\n    if arr[0]==0:\n        return \"NA\"\n    else:\n        return arr[1]\n\ndata['PoolQC']=data[['PoolArea','PoolQC']].apply(PoolQC_FIX,axis=1)","5007f165":"data['PoolQC'].fillna('Gd',inplace=True)","43644583":"#Filling out missing values of \"Fence\" with \"NA\".\n\ndata['Fence'].fillna('NA',inplace=True)","e32d5fef":"#Filling \"NA\" for '0' MiscVal.\n\ndef MiscFeature_FIX(arr):\n    if arr[0]==0:\n        return \"NA\"\n    else:\n        return arr[1]\n\ndata['MiscFeature']=data[['MiscVal','MiscFeature']].apply(MiscFeature_FIX,axis=1)","e30bc429":"rf_obj=RandomForestClassifier()\nrf_obj.fit(np.array(data[data['MiscFeature'].isnull()==False]['MiscVal']).reshape(-1,1),\n           np.array(data[data['MiscFeature'].isnull()==False]['MiscFeature']))\n\ndef MiscFeature_FIX_2(arr):\n    if pd.isnull(arr[0]):\n        return rf_obj.predict(np.array(arr[1]).reshape(-1,1))[0]\n    else:\n        return arr[0]\n    \ndata['MiscFeature']=data[['MiscFeature','MiscVal']].apply(MiscFeature_FIX_2,axis=1)","4ef6ef20":"data['SaleType'].fillna(data['SaleType'].mode()[0],inplace=True)","aeed11e8":"plt.figure(figsize=(40,20))\nsns.heatmap(data.isna(),cmap='viridis',yticklabels=False)","1adc2717":"data.info()","2bdcb9a4":"X=data.values","6ddbf37a":"y=Y.values","2d3c7003":"cat_idx=[2,5,6,7,8,9,10,11,12,13,14,15,16,21,22,23,24,25,27,28,29,30,31,32,33,35,39,40,41,42,53,55,57,58,59,60,63,64,65,72,73,74,78,79]","dbde7a6f":"for i in cat_idx:\n    label_encode=LabelEncoder()\n    X[:,i]=label_encode.fit_transform(X[:,i])","eb37d461":"def Score(y_true,y_pred):\n    return mean_squared_error(np.log10(y_true),np.log10(y_pred))","9c07beb4":"X_train,X_val,y_train,y_val=train_test_split(X[:1460,1:],y,test_size=0.33,random_state=42)","381d8fd5":"from lightgbm import LGBMRegressor","d1bb9fae":"lgb=LGBMRegressor(boosting_type='dart',learning_rate=0.1,max_depth=5,n_estimators=1000)\nlgb.fit(X_train,y_train)","dbd711f1":"lgb.score(X_train,y_train)","b3b8a3f6":"lgb.score(X_val,y_val)","b3776aa4":"Score(y_train,lgb.predict(X_train))","d49774e1":"Score(y_val,lgb.predict(X_val))","3a13c2d0":"lgb.fit(X[:1460,1:],y)","1b21cc36":"df=pd.DataFrame(np.concatenate((X[1460:,0].reshape(-1,1),lgb.predict(X[1460:,1:]).reshape(-1,1)),axis=1),columns=['Id','SalePrice'])","efdefdeb":"df.to_csv('Submission.csv',index=False)","681ef533":"#### No NULL value is remaining.","0c4e8488":"### Fixing Pools:","3a79656c":"### Fixing Garage:","36e48d34":"### Fixing Utilities:","e83f1a44":"## Creating output files:","19b788dc":"## Label Encoding categorical features:","ebea6753":"### Checking out NULL values:","1711195c":"## Training model on training set:","534f553c":"### Fixing Kitchen:","37b5c940":"### Fixing Fireplace:","4245d7a6":"## Getting accuracy from the model:","113a7b47":"### Fixing SaleType:","d6b4bf2f":"### Fixing Exterior1st & Exterior2nd:","0049a641":"## Data Cleaning:","60879556":"### Fixing Basement:","43421d3e":"### Fixing Functional:","6203b76f":"### Fixing Miscellaneous :","7c64523f":"## Getting the Data:","151a0dce":"### Fixing Alley:","491800fd":"### Fixing MS values:","bf733d38":"### Fixing LotFrontage:","30a1c289":"### Fixing Masonry:","2e051f80":"### Fixing Fence:","0c0a2a97":"## Data Information:","eaf60e20":"### Fixing Electrical:"}}