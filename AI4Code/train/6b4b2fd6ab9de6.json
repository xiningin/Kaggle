{"cell_type":{"86cd5393":"code","b33472fa":"code","eac9cc71":"code","d30dec50":"code","4dd44107":"code","2f62277e":"code","84cb47a0":"code","d6b95652":"code","372cc734":"code","58d4c2a2":"code","671366e4":"code","3d2023a6":"code","a696c8e6":"code","c6a89431":"code","a12a8d64":"code","448c607a":"code","20c5ecf6":"markdown"},"source":{"86cd5393":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n        pass\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b33472fa":"import torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom PIL import Image\nimport gc\nimport torchvision.transforms as transforms\nimport os\nfrom tqdm import tqdm\nimport torch.optim as optim\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport torchvision\nimport torch.nn.functional as F\n#from torchvision.io import Image","eac9cc71":"class EncoderBlock(nn.Module):\n\n    def __init__(self, in_channels, out_channels,dropout = 0, pool = True) -> None:\n        super(EncoderBlock, self).__init__()\n\n        self.conv1 = nn.Conv2d(in_channels, out_channels,kernel_size=(3,3), padding = 1)\n        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=(3,3), padding = 1)\n        self.relu = nn.ReLU()\n        if pool:\n            self.pool = nn.MaxPool2d(kernel_size=2)\n        else:\n            self.pool = None\n\n        if dropout>0:\n            self.drop = nn.Dropout()\n        else:\n            self.drop = None\n    \n    def forward(self, x):\n\n        skip = self.relu(self.conv2(self.relu(self.conv1(x))))\n        out = skip\n        if self.pool:\n\n            out = self.pool(out)\n\n        if self.drop:\n\n            out = self.drop(out)\n\n        return [out, skip]    ","d30dec50":"class DecoderBlock(nn.Module):\n\n    def __init__(self, in_channels, out_channels) -> None:\n        super(DecoderBlock, self).__init__()\n        self.trans_conv = nn.ConvTranspose2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, stride=2,padding=1,output_padding=1)#, padding='same')\n        self.conv1 = nn.Conv2d(out_channels*2, out_channels, padding=1, kernel_size=3)\n        self.conv2 = nn.Conv2d(out_channels, out_channels, padding=1, kernel_size=3)\n        self.relu = nn.ReLU()\n        #self.skip =skip\n\n    def forward(self, x, skip):\n\n        x = self.trans_conv(x)\n        x = torch.cat((skip,x), dim=1)\n        x = self.relu(self.conv2(self.relu(self.conv1(x))))\n        return x","4dd44107":"class Unet(nn.Module):\n\n    def __init__(self, in_channels, classes, n_filters=32) -> None:\n        super(Unet, self).__init__()\n\n        self.in_channels = in_channels\n        self.n_filters = n_filters\n        self.classes = classes\n        self.e1 = EncoderBlock(in_channels=self.in_channels, out_channels=self.n_filters, dropout=0.2)\n        self.e2 = EncoderBlock(in_channels=self.n_filters, out_channels=self.n_filters*2, dropout=0.2)\n        self.e3 = EncoderBlock(in_channels=self.n_filters*2, out_channels=self.n_filters*4, dropout=0.2)\n        self.e4 = EncoderBlock(in_channels=self.n_filters*4, out_channels=self.n_filters*8, dropout=0.2)\n        self.e5 = EncoderBlock(in_channels=self.n_filters*8, out_channels=self.n_filters*16, dropout=0.2, pool=False)\n        self.d6 = DecoderBlock(in_channels=self.n_filters*16, out_channels=self.n_filters*8)\n        self.d7 = DecoderBlock(in_channels=self.n_filters*8, out_channels=self.n_filters*4)\n        self.d8 = DecoderBlock(in_channels=self.n_filters*4, out_channels=self.n_filters*2)\n        self.d9 = DecoderBlock(in_channels=self.n_filters*2, out_channels=self.n_filters)\n        self.conv1 = nn.Conv2d(in_channels=self.n_filters, out_channels=self.n_filters, kernel_size=3, padding=1)\n        self.conv2 = nn.Conv2d(in_channels=self.n_filters, out_channels=classes, kernel_size=1)\n        self.relu = nn.ReLU()\n        self.softmax = nn.Softmax(dim = 1)\n\n\n    def forward(self, x):\n\n        x1 = self.e1(x)\n        #print(x1[1].shape)\n        x2 = self.e2(x1[0])\n        #print(x2[1].shape)\n        x3 = self.e3(x2[0])\n        #print(x3[1].shape)\n        x4 = self.e4(x3[0])\n        #print(x4[1].shape)\n        x5 = self.e5(x4[0])\n        #print(x5[0].shape)\n        x6 = self.d6(x5[0], x4[1])\n        #print(x6.shape)\n        x7 = self.d7(x6, x3[1])\n        x8 = self.d8(x7, x2[1])\n        x9 = self.d9(x8, x1[1])\n        x10 = self.relu(self.conv1(x9))\n        x11 = self.conv2(x10)\n\n        return x11","2f62277e":"class UnetDataset(Dataset):\n\n    def __init__(self, img_path, mask_path, transform = None) -> None:\n        super(UnetDataset, self).__init__()\n\n        self.img_path = img_path\n        self.mask_path = mask_path\n        self.transform = transform\n        \n    def __len__(self):\n\n        return len(os.listdir(self.img_path))\n\n    def __getitem__(self, index):\n\n        img = Image.open(self.img_path+\"\/\"+os.listdir(self.img_path)[index])\n        mask = Image.open(self.mask_path+\"\/\"+os.listdir(self.mask_path)[index])\n        #img = torchvision.io.read_image(self.img_path+\"\/\"+os.listdir(self.img_path)[index])\n        #image = torchvision.io.decode_png(image)\n        \n        #mask = torchvision.io.read_image(self.mask_path+\"\/\"+os.listdir(self.mask_path)[index])\n        #mask = torchvision.io.decode_png(mask)\n        \n        if self.transform:\n            img = self.transform(img)\n            mask = self.transform(mask)\n\n        mask = torch.max(mask, dim = 0, keepdim = True)\n        mask = mask[1].type(torch.LongTensor)\n\n        return img, mask","84cb47a0":"myTrans = transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Resize((512,512))\n])","d6b95652":"batch = 8\nunet = Unet(3, 13)\nseg = UnetDataset('..\/input\/lyft-udacity-challenge\/dataA\/dataA\/CameraRGB','..\/input\/lyft-udacity-challenge\/dataA\/dataA\/CameraSeg',transform =myTrans)\nloader = DataLoader(seg, batch_size = batch, pin_memory = True)","372cc734":"class DiceLoss(nn.Module):\n    def __init__(self, weight=None, size_average=True):\n        super(DiceLoss, self).__init__()\n\n    def forward(self, inputs, targets, smooth=1):\n        \n        #comment out if your model contains a sigmoid or equivalent activation layer\n        inputs = F.sigmoid(inputs)       \n        \n        #flatten label and prediction tensors\n        #inputs = inputs.view(-1)\n        #targets = targets.view(-1)\n        \n        intersection = (inputs * targets).sum()                            \n        dice = (2.*intersection + smooth)\/(inputs.sum() + targets.sum() + smooth)  \n        \n        return 1 - dice","58d4c2a2":"#batch = 8\nlr = 0.01\nn_epochs = 1\nlossfn = DiceLoss()\noptimizer = optim.Adam(unet.parameters(), lr = lr)","671366e4":"def train():\n    loop = tqdm(loader)\n    running_loss = 0\n\n    for b_id, (x, y) in enumerate(loop):\n\n        pred = unet(x)\n        loss = lossfn(pred, y)\n        \n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        loss_val = loss.item()\n        running_loss += loss_val\n\n        loop.set_postfix_str(f'loss: {loss_val}')\n\n    print(f\"Epoch loss : {running_loss\/len(loader)}\")\n    ","3d2023a6":"'''for epoch in range(n_epochs):\n\n    train()'''","a696c8e6":"#0.9999999403953552\nimg = Image.open('..\/input\/lyft-udacity-challenge\/dataA\/dataA\/CameraRGB\/02_00_080.png').resize((512,512))\nimg = torch.tensor(np.asarray(img).reshape(1,3,512,512))","c6a89431":"out = unet(img.float())","a12a8d64":"img = Image.open('..\/input\/lyft-udacity-challenge\/dataA\/dataA\/CameraSeg\/02_00_080.png').resize((512,512))\n\nplt.imshow(np.array(img)[...,0])#[0].permute(1,2,0))","448c607a":"plt.imshow(torch.argmax(out.detach().permute(0,2,3,1), dim = -1).numpy()[0])#, cmap='gray')","20c5ecf6":"**THIS F...ING LOSS THING DOES NOT WORK**"}}