{"cell_type":{"50cc8ec7":"code","c2e34bae":"code","1f1cf433":"code","355104b3":"code","326775c7":"code","57e320c3":"code","6cd55c93":"code","8ced09a8":"code","65c1299e":"code","18e131bd":"code","2eeaabc1":"code","ea90bb93":"code","77dabb59":"code","89fcb144":"code","a289d231":"code","f053968a":"code","89fcfe3e":"code","75ba47e4":"code","6db27b30":"code","614e6792":"code","ea6defd3":"code","3e7bfb6c":"code","aab22212":"code","1e351d27":"code","7ea0aa04":"code","4a2ff15e":"code","e7f367e8":"code","8c912dd2":"code","7a107a45":"code","ced9d31f":"code","f2eb9d89":"code","df980f3b":"code","32e3bdb3":"code","b4b57a0a":"code","35ddd0f8":"code","9019a71e":"code","4a0bc507":"code","74e63677":"code","362c8d5a":"code","5d90d901":"code","173f43da":"code","91440e3a":"code","f629fa25":"code","ce0c550f":"code","ef4e6c65":"code","26888b11":"code","933073e6":"code","514ca352":"code","10d3b95e":"code","988d0f8a":"code","28de4f45":"code","bf8a3965":"code","7473ec01":"code","bb51f45c":"code","4bdfe204":"code","9228af2c":"code","a021484d":"code","617de14a":"markdown","e5251a62":"markdown","0c3dd5db":"markdown","01c3381b":"markdown","85deaef4":"markdown","488f0aee":"markdown","09737ec7":"markdown","c0c48fa3":"markdown","1af567d7":"markdown","4fb50e60":"markdown","5489ba3c":"markdown","37807877":"markdown","32b00827":"markdown","df4b272c":"markdown","fe773679":"markdown","f6f49b77":"markdown","6f0926ae":"markdown","bc7b9cbb":"markdown","1e07d3f2":"markdown","ada9a543":"markdown","825502f9":"markdown","992e0166":"markdown","9cf03269":"markdown","d84ea67f":"markdown","7f930349":"markdown","785c6ae7":"markdown","0563f91c":"markdown","8c6ad3e1":"markdown","3b5084f0":"markdown","3a27067c":"markdown","4a905d52":"markdown","505e244b":"markdown","643e34f3":"markdown","b739f813":"markdown"},"source":{"50cc8ec7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2e34bae":"import matplotlib.pyplot as plt\nimport seaborn as sns","1f1cf433":"import warnings\nwarnings.simplefilter(\"ignore\")","355104b3":"df=pd.read_csv('..\/input\/customer-personality-analysis\/marketing_campaign.csv',sep='\\t')","326775c7":"df.shape","57e320c3":"df.head()","6cd55c93":"df.duplicated().sum()","8ced09a8":"# Removing the duplicated data\ndf.drop_duplicates(keep='first', inplace=True)","65c1299e":"display(df['Dt_Customer'].min())\ndisplay(df['Dt_Customer'].max())","18e131bd":"hist=df.hist(figsize=(17,15), color='crimson', bins=15)","2eeaabc1":"plt.figure(figsize=(16,6))\nax=sns.displot(data=df,x='Marital_Status',hue='Marital_Status')\nplt.xticks(rotation =90)","ea90bb93":"print('Largest density of Marital_Status in our dataset: ',df['Marital_Status'].mode()[0],'People')","77dabb59":"plt.figure(figsize=(16,6))\nsns.displot(data=df,x='Education',hue='Education')","89fcb144":"print('Largest density of Educational Category in our dataset: ',df['Education'].mode()[0],'People')","a289d231":"#https:\/\/stackoverflow.com\/questions\/31749448\/how-to-add-percentages-on-top-of-bars-in-seaborn\ndef with_hue(plot, feature, Number_of_categories, hue_categories):\n    a = [p.get_height() for p in plot.patches]\n    patch = [p for p in plot.patches]\n    for i in range(Number_of_categories):\n        total = feature.value_counts().values[i]\n        for j in range(hue_categories):\n            percentage = '{:.1f}%'.format(100 * a[(j*Number_of_categories + i)]\/total)\n#             percentage = '{:}'.format(a[(j*Number_of_categories + i)])\n            x = patch[(j*Number_of_categories + i)].get_x() + patch[(j*Number_of_categories + i)].get_width() \/ 2 - 0.15\n            y = patch[(j*Number_of_categories + i)].get_y() + patch[(j*Number_of_categories + i)].get_height() \n            ax.annotate(percentage, (x, y), size = 12)\n    plt.show()","f053968a":"no_of_categories=df['Education'].value_counts().count()\nhue_categories=df['Marital_Status'].value_counts().count()","89fcfe3e":"plt.figure(figsize=(16,8))\nax=sns.countplot(data=df,x='Education',hue='Marital_Status',dodge=True)\nwith_hue(plot=ax,feature=df['Education'],Number_of_categories=no_of_categories,hue_categories=hue_categories)\n# sns.countplot(x=\"class\", hue=\"who\", data=titanic)","75ba47e4":"from sklearn.preprocessing import OrdinalEncoder","6db27b30":"ord_enc = OrdinalEncoder()\ndf[\"Education_code\"] = ord_enc.fit_transform(df[[\"Education\"]])","614e6792":"df[[\"Education\", \"Education_code\"]].head()","ea6defd3":"# limit to categorical data using df.select_dtypes()\nX = df.select_dtypes(include=[object])\nX=X.drop('Dt_Customer', axis=1)\nX.head(3)","3e7bfb6c":"display(X.shape)\ndisplay(X.columns)","aab22212":"# import preprocessing from sklearn\nfrom sklearn import preprocessing","1e351d27":"# TODO: create a LabelEncoder object and fit it to each feature in X\n\n# 1. INSTANTIATE\n# encode labels with value between 0 and n_classes-1.\nle = preprocessing.LabelEncoder()\n\n# 2\/3. FIT AND TRANSFORM\n# use df.apply() to apply le.fit_transform to all columns\nX_2 = X.apply(le.fit_transform)\nX_2.head()","7ea0aa04":"X_2.corr()","4a2ff15e":"from sklearn.preprocessing import OneHotEncoder","e7f367e8":"# limit to categorical data using df.select_dtypes()\nX = df.select_dtypes(include=[object])\nX=X.drop('Dt_Customer', axis=1)\nX.head(3)","8c912dd2":"# TODO: create a OneHotEncoder object, and fit it to all of X\n\n# 1. INSTANTIATE\nenc =OneHotEncoder()\n\n# 2. FIT\nenc.fit(X)\n\n# 3. Transform\nonehotlabels = enc.transform(X).toarray()\nonehotlabels.shape\n\n# as you can see, you've the same number of rows \n# but now you've so many more columns due to how we changed all the categorical data into numerical data","7a107a45":"type(onehotlabels)","ced9d31f":"display(onehotlabels)\ndisplay(onehotlabels[0])","f2eb9d89":"size=len(enc.categories_)\ndisplay(size)\ndisplay(enc.categories_)\ndisplay(enc.categories_[0])","df980f3b":"#Creating single List contain all categories\ncol_list=[inner for outer in enc.categories_ for inner in outer]\ndisplay(col_list)","32e3bdb3":"df1 = pd.DataFrame(onehotlabels, columns =col_list)\ndf1.head()","b4b57a0a":"df_all =df.join(df1)\ndf_all.head()","35ddd0f8":"df_all=df_all.drop(['Education','Marital_Status'],axis=1)","9019a71e":"display(df_all.shape)\ndisplay(df_all.columns)","4a0bc507":"df_all.head()","74e63677":"products=df[['MntWines', 'MntFruits', 'MntMeatProducts','MntFishProducts', 'MntSweetProducts', 'MntGoldProds']]\ndisplay(products)","362c8d5a":"products['MntMeatProducts'].describe()","5d90d901":"plt.figure(figsize=(16,6))\nsns.displot(data=products,x='MntMeatProducts',bins=5)\nplt.xlabel('Meat Product')\nprint('From Diagram we get that atmost  for MeatProducts  is near 1000')","173f43da":"products['MntFishProducts'].describe()","91440e3a":"plt.figure(figsize=(16,6))\nsns.displot(data=products,x='MntFishProducts',kind='kde',fill=True)\nplt.xlabel('Fish Product ')\nprint('From Diagram we get that atmost amount for MntFishProducts  is near 150 \\nWhich is very less compare to MeatProduct')","f629fa25":"products.corr()","ce0c550f":"plt.figure(figsize=(16,6))\nsns.heatmap(data=products.corr(),linewidths=8,annot=True,fmt='f',cmap='rainbow',cbar=True,vmin=-1,vmax=1)","ef4e6c65":"plt.figure(figsize=(16,6))\nsns.heatmap(data=products.corr(),linewidths=8,annot=True,fmt='f',cmap='Set2',cbar=True,vmin=0.3,vmax=0.75,linecolor='black')\nprint('Diagram Shows that Products are postively Correlated to each other and \\nAlso FishProduct and Fruits are strongly correlated among all')","26888b11":"df1=df[['MntFruits','MntFishProducts']]\ndf1.head(3)","933073e6":"plt.figure(figsize=(16,6))\nplt.title(\"MntFruits and MntFishProducts - Scatter Plot \", fontsize=20, y=1.08)\nplt.xlabel('MntFruits')\nplt.ylabel('MntFishProducts')\nplt.yticks(fontsize=30)\nplt.scatter(data=df1,x='MntFruits',y='MntFishProducts',color='Tomato',marker='+')","514ca352":"from sklearn import linear_model","10d3b95e":"reg=linear_model.LinearRegression()\nreg.fit(df1[['MntFruits']],df1['MntFishProducts'])","988d0f8a":"plt.figure(figsize=(16,6))\nplt.title(\"MntFruits and MntFishProducts - Scatter Plot \", fontsize=30, y=1.10)\nplt.xlabel('MntFruits')\nplt.ylabel('MntFishProducts')\nplt.xticks(fontsize=30)\nplt.scatter(data=df1,x='MntFruits',y='MntFishProducts',color='LawnGreen',marker='+')\nplt.plot(df['MntFruits'],reg.predict(df[['MntFruits']]),color='DarkBlue')","28de4f45":"m=reg.coef_\nb=reg.intercept_\nprint('Slope : ',m,' Y-intercept : ',b)","bf8a3965":"x=np.array(df['MntFruits'])\ny=np.array(df['MntFishProducts'])\ndisplay(x)\ndisplay(y)","7473ec01":"def gradient_descent(x,y):\n    m_current=b_current=0  #intialize m and b \n    iteration=30\n    learning_rate =0.0004 # step's \n    n=len(x)\n    for i in range(iteration):\n        y_predict = (m_current*x)+b_current #y=mx+b\n        cost = (1\/n) * sum( [val**2  for val in ( y-y_predict )]) #mean squared error\n        m_next = -(2\/n)*sum(x*(y-y_predict)) #(\u2202\/\u2202m) refer above pic\n        b_next = -(2\/n)*sum(y-y_predict) #(\u2202\/\u2202b)\n        m_current = m_current - (learning_rate *m_next)\n        b_current = b_current - (learning_rate *b_next)\n        print(\"m  {}  ,b  {}  ,cost  {}  ,iteration  {} \".format(m_current,b_current,cost,i)) ","bb51f45c":"gradient_descent(x,y) #Slope :  [0.81696514]  Y-intercept :  16.03743979103044","4bdfe204":"purchases=df[['NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases','NumStorePurchases', 'NumWebVisitsMonth']]\ndisplay(purchases)","9228af2c":"plt.figure(figsize=(16,6))\nsns.heatmap(data=purchases.corr(),linewidths=8,annot=True,fmt='f',cmap='rainbow',cbar=True,vmin=-1,vmax=1)","a021484d":"plt.figure(figsize=(16,6))\nsns.heatmap(data=purchases.corr(),linewidths=8,annot=True,fmt='f',cmap='rainbow',cbar=True,vmin=0,vmax=1)","617de14a":"# Full Data Feature Analysis - hist","e5251a62":"# Analysis of Education and Marital Status - sns.displot","0c3dd5db":"mean_squared_error\n\nhttps:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.mean_squared_error.html","01c3381b":"# sklearn.preprocessing - OneHotEncoder\n\n**OneHotEncoder**\n\nEncode categorical integer features using a one-hot aka one-of-K scheme.\n\nThe input to this transformer should be a matrix of integers, denoting the values taken on by categorical (discrete) features.\n\nThe output will be a sparse matrix where each column corresponds to one possible value of one feature.\n\nIt is assumed that input features take on values in the range [0, n_values]\n\nThis encoding is needed for feeding categorical data to many scikit-learn estimators, notably linear models and SVMs with the standard kernels.","85deaef4":"![Screenshot (202).png](attachment:fa432c45-c91c-40d5-94f5-b8545211bfa6.png)","488f0aee":"# MntFruits\tand MntFishProducts - Scatter Plot ","09737ec7":"# Product Correlation","c0c48fa3":"# sklearn.preprocessing  - OrdinalEncoder()","1af567d7":"![Screenshot (203).png](attachment:9c542335-f609-4335-a861-49babc665bb1.png)","4fb50e60":"# MntFruits\tand MntFishProducts -Linear Regression (y=mx+b)","5489ba3c":"# Scikit-Learn\n\nhttps:\/\/pbpython.com\/categorical-encoding.html","37807877":"# Creating new dataFrame after OneHotEncoder","32b00827":"# Fish Product","df4b272c":"# MntFruits\tand MntFishProducts - Gradient Descent 2","fe773679":"# Products column in Dataset","f6f49b77":"# Getting Categories from OneHotEncoder","6f0926ae":"# Import ","bc7b9cbb":"![Screenshot (201).png](attachment:c51634d0-aa22-4aad-ab20-98a0649ac474.png)","1e07d3f2":"# how-to-add-percentages-on-top-of-bars-in-seaborn - sns.countplot","ada9a543":"# MntFruits\tand MntFishProducts - Gradient Descent","825502f9":"# Drop Column's with are Encoded","992e0166":"# categorical data for OneHotEncoder","9cf03269":"# How to ignore deprecation warnings in Python\n\nhttps:\/\/stackoverflow.com\/questions\/879173\/how-to-ignore-deprecation-warnings-in-python","d84ea67f":"# View ","7f930349":"# Join new dataframe with Original DataFrame","785c6ae7":"**Two common ways to encode categorical features:**\n\n- OneHotEncoder for unordered (nominal) data\n\n- OrdinalEncoder for ordered (ordinal) data\n","0563f91c":"# One-Hot Encoding in Scikit-learn","8c6ad3e1":" # from sklearn import preprocessing  LabelEncoder()\n\n**Intuition**\n\n* You will prepare your categorical data using LabelEncoder()\n\n* You will apply OneHotEncoder() on your new DataFrame in step 1\n\nhttps:\/\/www.ritchieng.com\/machinelearning-one-hot-encoding\/","3b5084f0":"# Number Of Purchases","3a27067c":"# Report of Purchase in year 2013","4a905d52":"# Load","505e244b":"# Meat Product","643e34f3":"# Removing Duplicate in df","b739f813":"# View All_DataFrame after join"}}