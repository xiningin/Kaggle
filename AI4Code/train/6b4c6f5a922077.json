{"cell_type":{"c0fcb6c4":"code","c75ff5b7":"code","a580d436":"code","b24229ba":"code","720d60b1":"code","2249a6bc":"code","73112877":"code","94508ae2":"code","0d617746":"code","898d2c0b":"code","82035c10":"code","62eba7ee":"code","440d4a18":"code","54f547b3":"code","9ca02a83":"code","f9ba0b93":"code","5a4f8105":"code","31ad2abe":"code","7f43e27b":"code","8770d034":"code","f3d6f230":"code","a2d8d025":"code","f58b69ca":"code","8183d95f":"code","7f56de3f":"code","031746cc":"code","5a9cc166":"code","401f6b3e":"code","b3271e7b":"code","7f644a20":"code","1ef20c1e":"code","5977b4d2":"code","64b6a50f":"code","9efd4489":"code","2fe37437":"code","17868e00":"code","45af56af":"code","13f67f0c":"code","2755536b":"code","1b67892b":"code","aa4747d1":"markdown","43a79404":"markdown","b69f0831":"markdown","569bf39f":"markdown","6b09901c":"markdown","e0581800":"markdown"},"source":{"c0fcb6c4":"import numpy as np\nimport pandas as pd","c75ff5b7":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import ExtraTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB","a580d436":"from lightgbm import LGBMClassifier\n#import xgboost as xgb","b24229ba":"from sklearn.cross_validation import train_test_split","720d60b1":"from sklearn.metrics import f1_score","2249a6bc":"# DecisionTreeClassifier\n\ndef function_DecisionTreeClassifier(X_train, Y_train, X_test, Y_test):\n    \n    # fit\n    dec_tree = DecisionTreeClassifier()\n    dec_tree = dec_tree.fit(X_train, Y_train)\n\n    # predict\n    dec_tree_pred = dec_tree.predict(X_test)\n    \n    # score\n    dec_tree_score = f1_score(Y_test, dec_tree_pred, average=None)\n    dec_tree_score_micro = f1_score(Y_test, dec_tree_pred, average='micro')\n    \n    return dec_tree_score, dec_tree_score_micro","73112877":"# ExtraTreeClassifier\n\ndef function_ExtraTreeClassifier(X_train, Y_train, X_test, Y_test):\n    \n    # fit\n    ext_tree = ExtraTreeClassifier()\n    ext_tree = ext_tree.fit(X_train, Y_train)\n\n    # predict\n    ext_tree_pred = ext_tree.predict(X_test)\n    \n    # score\n    ext_tree_score = f1_score(Y_test, ext_tree_pred, average=None)\n    ext_tree_score_micro = f1_score(Y_test, ext_tree_pred, average='micro')\n    \n    return ext_tree_score, ext_tree_score_micro","94508ae2":"# RandomForestClassifier\n\ndef function_RandomForestClassifier(X_train, Y_train, X_test, Y_test):\n    \n    # fit\n    ran_for = RandomForestClassifier()\n    ran_for = ran_for.fit(X_train, Y_train)\n\n    # predict\n    ran_for_pred = ran_for.predict(X_test)\n    \n    # score\n    ran_for_score = f1_score(Y_test, ran_for_pred, average=None)\n    ran_for_score_micro = f1_score(Y_test, ran_for_pred, average='micro')\n    \n    return ran_for_score, ran_for_score_micro","0d617746":"# LGBMClassifier\n\ndef function_LGBMClassifier(X_train, Y_train, X_test, Y_test):\n    \n    # fit\n    lgbm = LGBMClassifier()\n    lgbm = lgbm.fit(X_train, Y_train)\n\n    # predict\n    lgbm_pred = lgbm.predict(X_test)\n    \n    # score\n    lgbm_score = f1_score(Y_test, lgbm_pred, average=None)\n    lgbm_score_micro = f1_score(Y_test, lgbm_pred, average='micro')\n    \n    return lgbm_score, lgbm_score_micro\n","898d2c0b":"# BernoulliNB\n\ndef function_BernoulliNB(X_train, Y_train, X_test, Y_test):\n    \n    # fit\n    bernoulli = BernoulliNB()\n    bernoulli = bernoulli.fit(X_train, Y_train)\n\n    # predict\n    bernoulli_pred = bernoulli.predict(X_test)\n    \n    # score\n    bernoulli_score = f1_score(Y_test, bernoulli_pred, average=None)\n    bernoulli_score_micro = f1_score(Y_test, bernoulli_pred, average='micro')\n    \n    return bernoulli_score, bernoulli_score_micro","82035c10":"# KNeighborsClassifier\n\ndef function_KNeighborsClassifier(X_train, Y_train, X_test, Y_test):\n    \n    # fit\n    kn = KNeighborsClassifier()\n    kn = kn.fit(X_train, Y_train)\n\n    # predict\n    kn_pred = kn.predict(X_test)\n    \n    # score\n    kn_score = f1_score(Y_test, kn_pred, average=None)\n    kn_score_micro = f1_score(Y_test, kn_pred, average='micro')\n    \n    return kn_score, kn_score_micro","62eba7ee":"# GaussianNB\n\ndef function_GaussianNB(X_train, Y_train, X_test, Y_test):\n    \n    # fit\n    gaus = GaussianNB()\n    gaus = gaus.fit(X_train, Y_train)\n\n    # predict\n    gaus_pred = gaus.predict(X_test)\n    \n    # score\n    gaus_score = f1_score(Y_test, gaus_pred, average=None)\n    gaus_score_micro = f1_score(Y_test, gaus_pred, average='micro')\n    \n    return gaus_score, gaus_score_micro","440d4a18":"df = pd.read_csv('..\/input\/data.csv')","54f547b3":"df = df.drop('Unnamed: 0',1)\ndf = df.drop('Unnamed: 0.1',1)\ndf = df.drop('Unnamed: 0.1.1',1)","9ca02a83":"df.columns","f9ba0b93":"df = df[[\n    'DAY_OF_WEEK', \n    'DISTRICT', \n    'HOUR', \n    'Lat', \n    'Long', \n    'MONTH',\n    'REPORTING_AREA', \n    'Day', \n    'Night', \n    'ToNight', \n    'ToDay', \n    'temperatureMin', \n    'temperatureMax', \n    'precipitation', \n    'snow',\n    'temperatureDifference', \n    'clust_50', \n    'clust_100', \n    'clust_200',\n    'Universities_colleges_distance_25',\n    'Universities_colleges_distance_min',\n    'Universities_colleges_number_near', \n    'Public_schools_distance_25',\n    'Public_schools_distance_min', \n    'Public_schools_number_near',\n    'Non-Public_schools_distance_25', \n    'Non-Public_schools_distance_min',\n    'Non-Public_schools_number_near',\n    'OFFENSE_CODE_GROUP'\n]]","5a4f8105":"df.isnull().sum()","31ad2abe":"df['OFFENSE_CODE_GROUP'].value_counts().head(11)","7f43e27b":"list_offense_code_group = (\n    'Motor Vehicle Accident Response',\n    'Larceny',\n    'Medical Assistance',\n    'Simple Assault',\n    'Violations',\n    'Investigate Person',\n    'Vandalism',\n    'Drug Violation',\n    'Larceny From Motor Vehicle',\n    'Towed'\n)","8770d034":"df_model = pd.DataFrame()","f3d6f230":"i = 0\n\nwhile i < len(list_offense_code_group):\n\n    df_model= df_model.append(df.loc[df['OFFENSE_CODE_GROUP'] == list_offense_code_group[i]])\n    \n    i+=1","a2d8d025":"df.shape","f58b69ca":"df_model.shape","8183d95f":"df_model.columns","7f56de3f":"# DAY_OF_WEEK\n\ndf_model['DAY_OF_WEEK'] = df_model['DAY_OF_WEEK'].map({\n    'Tuesday':2, \n    'Saturday':6, \n    'Monday':1, \n    'Sunday':7, \n    'Thursday':4, \n    'Wednesday':3,\n    'Friday':5\n})\n\ndf_model['DAY_OF_WEEK'].unique()","031746cc":"df_model.fillna(0, inplace = True)","5a9cc166":"df_model.isnull().sum()","401f6b3e":"y = df_model['OFFENSE_CODE_GROUP']","b3271e7b":"y.unique()","7f644a20":"y = y.map({\n    'Motor Vehicle Accident Response':1, \n    'Larceny':2, \n    'Medical Assistance':3,\n    'Simple Assault':4, \n    'Violations':5, \n    'Investigate Person':6, \n    'Vandalism':7,\n    'Drug Violation':8, \n    'Larceny From Motor Vehicle':9, \n    'Towed':10\n})","1ef20c1e":"x = df_model.drop('OFFENSE_CODE_GROUP', 1)","5977b4d2":"x.columns","64b6a50f":"# Split dataframe into random train and test subsets\n\nX_train, X_test, Y_train, Y_test = train_test_split(\n    x,\n    y, \n    test_size = 0.1,\n    random_state=42\n)\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape, Y_test.shape)","9efd4489":"function_DecisionTreeClassifier(X_train, Y_train, X_test, Y_test)","2fe37437":"function_ExtraTreeClassifier(X_train, Y_train, X_test, Y_test)","17868e00":"function_RandomForestClassifier(X_train, Y_train, X_test, Y_test)","45af56af":"function_LGBMClassifier(X_train, Y_train, X_test, Y_test)","13f67f0c":"function_BernoulliNB(X_train, Y_train, X_test, Y_test)","2755536b":"function_KNeighborsClassifier(X_train, Y_train, X_test, Y_test)","1b67892b":"function_GaussianNB(X_train, Y_train, X_test, Y_test)","aa4747d1":"# Split data","43a79404":"# Modeling","b69f0831":"# Import","569bf39f":"# Data","6b09901c":"# Functions","e0581800":"### More information. My [GitHub](https:\/\/github.com\/OleksandrKosovan\/predicting-boston-offense)"}}