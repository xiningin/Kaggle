{"cell_type":{"36ee8f1f":"code","fdea3626":"code","a7a84c38":"code","b15b6557":"code","f511541d":"code","6a527844":"code","a2f9a38c":"code","fe189d63":"code","6442cbb7":"code","71d8c8ae":"code","9d0e475b":"code","637c003c":"code","b7d32bcc":"code","025e5d95":"code","b012acf9":"code","cf6bf7dd":"code","b41f83a5":"code","5d2749fa":"code","97e0929f":"code","d534a54d":"code","a2f6e254":"code","8a501430":"code","6b57daad":"code","416f259d":"code","357d82af":"code","4a598bd8":"code","2875d775":"code","534e90d7":"code","0c705486":"code","b7f8b884":"code","d539767d":"code","dc56ae6f":"code","b465f2f4":"code","b8e1b1fc":"code","480189a6":"code","a448823b":"code","2544b8b5":"code","c4f96def":"code","85a4964d":"code","c6e6b024":"code","3f7a0b21":"code","0984ce80":"code","00c1673b":"code","5ba7870f":"code","368c08b8":"code","c7fd8ee8":"code","abd0b180":"code","17337b88":"code","71569ef0":"code","435760af":"code","a85a0cdf":"code","afcf38c2":"code","cbcdeef2":"code","96cf302d":"code","a1f156c4":"code","809b8608":"code","26ef1c7f":"code","4324cebe":"code","b65c2388":"code","7753a5b0":"code","005cd506":"code","9eaaf428":"code","d9ebbe91":"code","07d9cde5":"code","416e1bc0":"code","aa04ae63":"code","b70f02a7":"code","25a6ac14":"code","9e758691":"code","7d6493b6":"code","c35ea385":"code","9b33af52":"code","991f57fe":"code","572ec7c0":"code","a337b92e":"code","ba3f2432":"code","a0f05b6a":"code","934c5e38":"code","0d35dd30":"code","9df6c58e":"code","ce636210":"code","4f738407":"code","a5ba7850":"code","f30cd1c9":"code","3841aeae":"code","8962aff6":"code","6b4d5517":"code","f7dd82eb":"code","03335015":"code","c7f0e32c":"code","4f9aa9fe":"code","6ea22151":"code","b478d293":"code","0c9e968c":"code","5823b779":"code","6039a24a":"code","9a08cec9":"code","c401aa97":"code","f994cbea":"code","60d4bd59":"code","59d17b1c":"code","d9ec0aa7":"code","344c7b5e":"code","0ef8650e":"code","9eb2edd0":"code","6f442819":"code","5b6d2bfa":"code","b37daa38":"code","ba47b76d":"code","2a382103":"code","56fa0fb7":"code","ec7fde39":"code","dd84d81c":"code","f3b723a7":"code","7931d727":"code","40fa75aa":"code","1112e507":"code","6b3c1610":"code","73d31879":"code","b55b86a5":"code","8e739dc4":"code","6ca652ac":"code","423cb1c3":"code","d0275a3c":"code","40b0aecf":"code","25ab8df5":"code","5fe09d80":"code","8a1caff8":"code","47577b88":"code","ccf4bae2":"code","7285525e":"code","7143525b":"code","332a8d62":"code","1f8a20f9":"code","0b3802d9":"code","0f694c68":"code","cb6fcdd9":"code","ccc2fb9b":"code","0f6d6fde":"code","9ab52173":"code","885baf2f":"code","3fdc2d16":"code","c618d0af":"markdown","b5e2c20a":"markdown","fc8eaa82":"markdown","9d88b0c1":"markdown","83479bcf":"markdown","f2332fa1":"markdown","8b2568d6":"markdown","54ff4d13":"markdown","7e933161":"markdown","6fd1465f":"markdown","edc3731d":"markdown","d03d7b31":"markdown","293e9b56":"markdown","ae91a1a4":"markdown","410b418f":"markdown","d3b9b33d":"markdown","ecaf7c97":"markdown","547131b7":"markdown","b8e7d82c":"markdown","842110ea":"markdown","ed7e3df0":"markdown","b2e82680":"markdown","e2b3a739":"markdown","856ff408":"markdown","ef653079":"markdown","01a6b47b":"markdown","27ef2be6":"markdown","5e7b7340":"markdown","61018200":"markdown","5ee027ca":"markdown","59f63496":"markdown","2001b586":"markdown","77ead3b5":"markdown","922c1234":"markdown","538af662":"markdown","6da547ab":"markdown","5913ecb9":"markdown","404e0895":"markdown","53d9f8c3":"markdown"},"source":{"36ee8f1f":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","fdea3626":"url_dados = 'https:\/\/github.com\/alura-cursos\/imersaodados3\/blob\/main\/dados\/dados_experimentos.zip?raw=true'\n\ndf = pd.read_csv(url_dados, compression = 'zip')\n\ndf.head()","a7a84c38":"df.shape","b15b6557":"df['tratamento'].unique()","f511541d":"df['tratamento'].value_counts()","6a527844":"df['tratamento'].value_counts(normalize = True)","a2f9a38c":"df['tempo'].unique()","fe189d63":"df['tempo'].value_counts()","6442cbb7":"df['tempo'].value_counts(normalize = True)","71d8c8ae":"df['dose'].unique()","9d0e475b":"df['dose'].value_counts()","637c003c":"df['dose'].value_counts(normalize = True)","b7d32bcc":"df['droga'].unique()","025e5d95":"df['g-0'].unique()","b012acf9":"df['tratamento'].value_counts().plot.pie()","cf6bf7dd":"df['tempo'].value_counts().plot.pie()","b41f83a5":"df['tempo'].value_counts().plot.bar()","5d2749fa":"dados_filtrados = df[df['g-0'] > 0]\ndados_filtrados.head()","97e0929f":"print(f'Total de linhas: {df.shape[0]}\\nTotal de colunas: {df.shape[1]}')","d534a54d":"df['tratamento'].value_counts()","a2f6e254":"y = df['tratamento']\nsns.countplot(y = y)","8a501430":"df.tail()","6b57daad":"df['tratamento'].value_counts(normalize = True)","416f259d":"len(df['droga'].unique())","357d82af":"colunas_hifen = df.columns\ncolunas_sem_hifen = []\nfor c in colunas_hifen:\n    c = c.replace('-', '')\n    colunas_sem_hifen.append(c)\ndf.columns = colunas_sem_hifen\ndf.head(0)","4a598bd8":"valore_tempo = df['tempo'].value_counts(ascending=True)\nvalore_tempo.sort_index()","2875d775":"plt.figure()\nvalore_tempo = df['tempo'].value_counts(ascending=True)\nax = valore_tempo.sort_index().plot.bar()\nax.set_title('Janelas de tempo', fontsize=20)\nax.set_xlabel('Tempo', fontsize=18)\nax.set_ylabel('Quantidade', fontsize=18)\nplt.xticks(rotation = 0, fontsize=16)\nplt.yticks(fontsize=16)\nplt.show()","534e90d7":"import seaborn as sns\nsns.set()","0c705486":"mapa = {'droga': 'composto'}\ndf.rename(columns=mapa, inplace=True)","b7f8b884":"df.head()","d539767d":"df['composto'].index","dc56ae6f":"cod_compostos = df['composto'].value_counts().index[:5]","b465f2f4":"cod_compostos","b8e1b1fc":"df.query('composto in @cod_compostos')","480189a6":"plt.figure(figsize=(8, 6))\nax = sns.countplot(x = 'composto', data = df.query('composto in @cod_compostos'))\nax.set_title('Top 5 Compostos')\nplt.show()","a448823b":"len(df['g0'].unique())","2544b8b5":"df['g0'].describe()","c4f96def":"df['g0'].hist(bins = 100)","85a4964d":"df['g19'].hist(bins = 100)","c6e6b024":"df.describe()","3f7a0b21":"df[['g0', 'g1']]","0984ce80":"df.loc[:, 'g0':'g771'].describe().T","00c1673b":"df.loc[:, 'g0':'g771'].describe().T['min'].hist(bins = 30)","5ba7870f":"df.loc[:, 'g0':'g771'].describe().T['max'].hist(bins = 30)","368c08b8":"df.loc[:, 'g0':'g771'].describe().T['mean'].hist(bins = 30)","c7fd8ee8":"sns.boxplot(x='g0' , data=df)","abd0b180":"plt.figure(figsize=(10,8))\nsns.boxplot(y='g0', x='tratamento' , data=df)","17337b88":"plt.figure(figsize=(8, 6))\nax = sns.countplot(x = 'composto', data = df.query('composto in @cod_compostos'), order = cod_compostos)\nax.set_title('Top 5 Compostos')\nplt.show()","71569ef0":"plt.rc('axes', titlesize = 15, labelsize = 14)\nplt.rc(['xtick', 'ytick'], labelsize = 10)\nplt.figure(figsize=(8, 6))\nax = sns.countplot(x = 'composto', data=df.query('composto in @cod_compostos'), order = cod_compostos)\nax.set_title('Top 5 compostos')\nax.set_ylabel('Contagem')\nax.set_xlabel('Composto')\nplt.show()","435760af":"sns.histplot(data = df['g0'], bins = 100)","a85a0cdf":"sns.histplot(data = df['g19'], bins = 100)","afcf38c2":"sns.histplot(data = df.loc[:,'g0':'g771'].describe().T['min'], bins = 30)","cbcdeef2":"sns.histplot(data = df.loc[:,'g0':'g771'].describe().T['max'], bins = 30)","96cf302d":"sns.histplot(data = df.loc[:,'g0':'g771'].describe().T['mean'], bins = 30)","a1f156c4":"plt.figure(figsize=(10,8))\nsns.boxplot(y = 'g0', x = 'dose' , data = df)","809b8608":"plt.figure(figsize=(10,8))\nsns.boxplot(y = 'c0', x = 'dose' , data=df)","26ef1c7f":"plt.figure(figsize=(10,8))\nsns.boxplot(y='c15', x='tempo' , data=df)","4324cebe":"plt.figure(figsize=(10,8))\nsns.histplot(data = df, x = 'g0', bins = 100, hue = 'tratamento')","b65c2388":"df.head()","7753a5b0":"pd.crosstab(df['dose'], df['tempo'])","005cd506":"pd.crosstab([df['dose'], df['tempo']], df['tratamento'], normalize = True)","9eaaf428":"pd.crosstab([df['dose'], df['tempo']], df['tratamento'], normalize = 'index')","d9ebbe91":"pd.crosstab([df['dose'], df['tempo']], df['tratamento'], values = df['g0'], aggfunc = 'mean')","07d9cde5":"sns.scatterplot(x = 'g0', y = 'g3', data = df)","416e1bc0":"df[['g0', 'g3']]","aa04ae63":"sns.lmplot(x = 'g0', y = 'g8', data = df, line_kws = {'color': 'red'})","b70f02a7":"sns.lmplot(x = 'g0', y = 'g8', data = df, line_kws = {'color': 'red'}, col = 'tratamento', row = 'tempo')","25a6ac14":"df.loc[:, 'g0':'g771'].corr()","9e758691":"corr = df.loc[:, 'g0':'g50'].corr()","7d6493b6":"import numpy as np\n\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","c35ea385":"corr_celular = df.loc[:,'c0':'c50'].corr()","9b33af52":"# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr_celular, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_celular, mask=mask, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","991f57fe":"com_droga = df[df['tratamento']=='com_droga'].groupby(['dose','tempo']).count()['tratamento']\ncom_droga","572ec7c0":"com_controle = df[df['tratamento']=='com_controle'].groupby(['dose','tempo']).count()['tratamento']\ncom_controle","a337b92e":"concatenado = pd.concat([com_controle, com_droga], axis=1)\nconcatenado","ba3f2432":"concatenado.columns = ['com_controle', 'com_droga'] \nconcatenado","a0f05b6a":"concatenado.div(concatenado.sum(axis=1),axis=0)","934c5e38":"pd.crosstab([df['dose'], df['tempo']], df['tratamento'], normalize = 'columns')","0d35dd30":"pd.crosstab([df['dose'], df['tempo']], df['tratamento'], values = df['g0'], aggfunc = 'min')","9df6c58e":"pd.crosstab([df['dose'], df['tempo']], df['tratamento'], values = df['g0'], aggfunc = 'max')","ce636210":"pd.crosstab([df['dose'], df['tempo']], df['tratamento'], values = df['g0'], aggfunc = 'median')","4f738407":"pd.melt(df, id_vars = ['dose'], value_vars = ['g0'])","a5ba7850":"corr = df.loc[:, 'g0':'c99'].corr()","f30cd1c9":"corr_celular_genes = corr.loc['g0':'g25','c0':'c25']","3841aeae":"# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_celular_genes, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","8962aff6":"df_resultados = pd.read_csv('https:\/\/github.com\/alura-cursos\/imersaodados3\/blob\/main\/dados\/dados_resultados.csv?raw=true')\ndf_resultados.head()","6b4d5517":"df_resultados['acetylcholine_receptor_agonist'].unique()","f7dd82eb":"df_resultados.info()","03335015":"contagem_moa = df_resultados.drop('id', axis = 1).sum().sort_values(ascending = False)\ncontagem_moa","c7f0e32c":"df_resultados.drop('id', axis = 1).sum(axis = 1)","4f9aa9fe":"df_resultados.head()","6ea22151":"df.head()","b478d293":"df_resultados['n_moa'] = df_resultados.drop('id', axis=1).sum(axis=1)","0c9e968c":"df_resultados['n_moa'] != 0","5823b779":"df_resultados['ativo_moa'] = (df_resultados['n_moa'] != 0)\ndf_resultados.head()","6039a24a":"df_combinados = pd.merge(df, df_resultados[['id','n_moa', 'ativo_moa']], on='id')\ndf_combinados.head()","9a08cec9":"df_combinados.query('tratamento == \"com_controle\"' )['ativo_moa'].value_counts()","c401aa97":"df_combinados.query('tratamento == \"com_droga\"' )['ativo_moa'].value_counts()","f994cbea":"composto_principal = df_combinados['composto'].value_counts().index[:5]\nplt.figure(figsize=(12,8))\nsns.boxplot(data = df_combinados.query('composto in @composto_principal'), y= 'g0', x='composto', hue='ativo_moa')","60d4bd59":"contagem_moa.filter(like='inhibitor')[:10]","59d17b1c":"contagem_moa.filter(like='antagonist')[:10]","d9ec0aa7":"contagem_moa.filter(like='_agonist')[:10]","344c7b5e":"df_resultados['eh_controle'] = (df['tratamento'] == 'com_controle')\ndf_resultados.head()","0ef8650e":"df_combinados = pd.merge(df, df_resultados[['id','n_moa', 'ativo_moa','eh_controle']], on='id')\ndf_combinados.head()","9eb2edd0":"df_resultados['24'] = (df['tempo'] == 24)\ndf_resultados['48'] = (df['tempo'] == 48)\ndf_resultados['72'] = (df['tempo'] == 72)\ndf_resultados.head()","6f442819":"df_combinados = pd.merge(df, df_resultados[['id','n_moa', 'ativo_moa','eh_controle','24','48','72']], on='id')\ndf_combinados.head()","5b6d2bfa":"composto_principal = df_combinados['composto'].value_counts().index[0:2]\ncomposto_principal","b37daa38":"fig, (ax1, ax2, ax3) = plt.subplots(1,3,figsize=(15,5))\n\nsns.boxplot(data = df_combinados.query('composto in @composto_principal & tempo == 24'), y= 'g0', x='composto',\n            hue='ativo_moa', order=composto_principal, ax=ax1)\n\nsns.boxplot(data = df_combinados.query('composto in @composto_principal & tempo == 48'), y= 'g0', x='composto',\n            hue='ativo_moa', order=composto_principal, ax=ax2)\n\nsns.boxplot(data = df_combinados.query('composto in @composto_principal & tempo == 48'), y= 'g0', x='composto',\n            hue='ativo_moa', order=composto_principal, ax=ax3)\n\nplt.show()","ba47b76d":"fig, (ax1, ax2) = plt.subplots(1,2,figsize=(12,8))\n\nsns.boxplot(data = df_combinados.query('composto in @composto_principal & dose == \"D1\"'), y= 'g0', x='composto',\n            hue='ativo_moa', order=composto_principal, ax=ax1)\n\nsns.boxplot(data = df_combinados.query('composto in @composto_principal & dose == \"D2\"'), y= 'g0', x='composto',\n            hue='ativo_moa', order=composto_principal, ax=ax2)\n\nplt.show()","2a382103":"df_combinados.groupby('composto').ativo_moa.mean().value_counts()","56fa0fb7":"df_combinados.head()","ec7fde39":"df_resultados.head()","dd84d81c":"from sklearn.model_selection import train_test_split\n\nX = df_combinados.select_dtypes('float64')\ny = df_combinados['ativo_moa']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y, random_state = 376)","f3b723a7":"from sklearn.linear_model import LogisticRegression\n\nModel_LR = LogisticRegression(max_iter=1000)\nModel_LR.fit(X_train, y_train)\nModel_LR.score(X_test, y_test)","7931d727":"from sklearn.dummy import DummyClassifier\nfrom sklearn.metrics import accuracy_score\n\nModel_dummy = DummyClassifier('most_frequent')\nModel_dummy.fit(X_train, y_train)\nPredict_dummy = Model_dummy.predict(X_test)\naccuracy_score(y_test, Predict_dummy)","40fa75aa":"df_combinados['ativo_moa'].value_counts(normalize=True)","1112e507":"from sklearn.tree import DecisionTreeClassifier\n\nDTC = DecisionTreeClassifier(max_depth = 3)\nDTC.fit(X_train, y_train)\nDTC.score(X_test, y_test)","6b3c1610":"from sklearn import tree\n\nfig, ax = plt.subplots(figsize=(15, 10), facecolor='k')\ntree.plot_tree(DTC,\n               ax=ax,\n               fontsize=10,\n               rounded=True,\n               filled=True,\n               feature_names=X_train.columns,\n               class_names=['N\u00e3o Ativado', 'Ativado'])\n\nplt.show()","73d31879":"treino = []\nteste = []\nfor i in range(1, 15):\n    DTC = DecisionTreeClassifier(max_depth = i)\n    DTC.fit(X_train, y_train)\n    treino.append(DTC.score(X_train, y_train))\n    teste.append(DTC.score(X_test, y_test))","b55b86a5":"treino","8e739dc4":"teste","6ca652ac":"sns.lineplot(x = range(1, 15), y = teste, label = 'Teste')\nsns.lineplot(x = range(1, 15), y = treino, label = 'Treino')","423cb1c3":"pd.get_dummies(df_combinados['tratamento'])","d0275a3c":"pd.get_dummies(df_combinados, columns = ['tratamento', 'dose', 'tempo'])","40b0aecf":"df_combinados.drop(['id', 'n_moa', 'ativo_moa', 'composto'], axis = 1)","25ab8df5":"from sklearn.ensemble import RandomForestClassifier\n\nX = df_combinados.drop(['id', 'n_moa', 'ativo_moa', 'composto'], axis = 1)\nX = pd.get_dummies(X, columns = ['tratamento', 'dose', 'tempo'])\ny = df_combinados['ativo_moa'] \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y, random_state = 376)\n\nRFC = RandomForestClassifier()\nRFC.fit(X_train, y_train)\nRFC.score(X_test, y_test)","5fe09d80":"from sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier","8a1caff8":"X = df_combinados.select_dtypes('float64')\ny = df_combinados['ativo_moa']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y, random_state = 376)","47577b88":"XG = XGBClassifier()\nXG.fit(X_train, y_train)\nXG.score(X_test, y_test)","ccf4bae2":"df_combinados.head(0)","7285525e":"df_combinados['dose'].value_counts()","7143525b":"X = df_combinados.loc[:, 'g0':'c99']\ny = df_combinados['dose'].map({'D1':0,'D2':1})","332a8d62":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y, random_state = 376)","1f8a20f9":"LR2 = LogisticRegression(solver='newton-cg')\nLR2.fit(X_train, y_train)\nLR2.score(X_test, y_test)","0b3802d9":"df_combinados['composto'].value_counts()","0f694c68":"X = df_combinados.loc[:, 'g0':'g10']\ny = df_combinados['composto'].map({'cacb2b860': 0, '87d714366': 1})","cb6fcdd9":"# dados desbalanceados\nsns.countplot(y = y)","ccc2fb9b":"dt_query = df_combinados.query('composto in [\"8b87a7a83\", \"5628cb3ee\"]')\nX = dt_query.loc[:, 'g0':'g10']\n# Alterando o y\ny = dt_query['composto'].map({'8b87a7a83':0, '5628cb3ee':1})","0f6d6fde":"dt_query['composto'].value_counts()","9ab52173":"# Melhor :D\nsns.countplot(y = y)","885baf2f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y, random_state = 376)","3fdc2d16":"MLR2 = LogisticRegression()\nMLR2.fit(X_train, y_train)\nMLR2.score(X_test, y_test)","c618d0af":"###### Desafio 07: Deixar os gr\u00e1ficos bonit\u00f5es. (Matplotlib.pyplot)","b5e2c20a":"###### Desafio 02: Estude a documenta\u00e7\u00e3o do Sklearn.","fc8eaa82":"###### Desafio 02: Melhorar a visualiza\u00e7\u00e3o alterando tamanho da fonte...","9d88b0c1":"###### Desafio 04: Estudar sobre as estat\u00edticas retornadas no .describe()\nhttps:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.describe.html","83479bcf":"###### Desafio 03: Plotar os histogramas com seaborn","f2332fa1":"###### Desafio 04: Quantas tipos de drogas foram investigados.","8b2568d6":"###### Desafio 03: Pesquisar o fluxograma 'Escolhendo o melhor modelo' choosing the right estimator","54ff4d13":"###### Desafio 04: Explorar o melt.\nhttps:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.melt.html","7e933161":"###### Desafio 02: Criar a coluna eh_controle para quando na linha tratamento == com_controle","6fd1465f":"###### Desafio 03: Criar tr\u00eas colunas para indicar o tempo 24, 48, 72","edc3731d":"## Mechanisms of Action (MoA)\n\nBase de dados: https:\/\/www.kaggle.com\/c\/lish-moa\/overview\/description\n\n![image.png](attachment:image.png)","d03d7b31":"###### Desafio 05: Fazer an\u00e1lise mais detalhada considerando tempo e dose, para comparar as distribui\u00e7\u00f5es (Escolher uma droga e comparar com controle)","293e9b56":"## Correla\u00e7\u00f5es e causalidade","ae91a1a4":"###### Desafio 01: Ordenar o gr\u00e1fico countplot","410b418f":"## Merge e An\u00e1lise de Resultados","d3b9b33d":"###### Desafio 05: Procurar na documenta\u00e7\u00e3o o m\u00e9todo query(pandas).\nhttps:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.query.html","ecaf7c97":"https:\/\/scikit-learn.org\/stable\/tutorial\/machine_learning_map\/index.html","547131b7":"###### Desafio 06: Descobrir se tem algum composto que dependendo da configura\u00e7\u00e3o do experimento, ativa ou n\u00e3o ativa algum MOA","b8e7d82c":"###### Desafio 01: Tente outros modelos ou mude os par\u00e2metros dos modelos que testamos em aula.","842110ea":"## Merge e An\u00e1lise de Resultados","ed7e3df0":"###### Desafio 06: Estudar o c\u00f3digo que plota a matriz de correla\u00e7\u00e3o (heatmap)","b2e82680":"###### Desafio 05: Escolha a droga mais utilizada e tente criar um modelo para prever est\u00e1 label.","e2b3a739":"###### Desafio 06: Fazer outras an\u00e1lises com o boxplot e at\u00e9 com o histograma.","856ff408":"###### Desafio 01: Encontrar o top 10, das a\u00e7\u00f5es do MOA (inibidor, agonista...)","ef653079":"https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html","01a6b47b":"https:\/\/scikit-learn.org\/stable\/index.html","27ef2be6":"###### Desafio 01: Investigar por que a classe tratamento \u00e9 t\u00e3o desbalanceada?","5e7b7340":"###### Desafio 05: Calcular e analisar a correla\u00e7\u00e3o entre G e C. Refletir sobre os efeitos biol\u00f3gicos.","61018200":"###### Desafio 02: Plotar as 5 \u00faltimas linhas da tabela","5ee027ca":"## Python, Pandas e Pharmacia","59f63496":"###### Desafio 03: Explorar outros agregadores.","2001b586":"###### Desafio 06: Renomear as colunas tirando o h\u00edfen.","77ead3b5":"###### Desafio 04: Teste outras problemas (perguntas). 0, 1 ou +.","922c1234":"###### Desafio 01: Criar tabelas de frequ\u00eancia com pandas.groupby()","538af662":"###### Desafio 04: Estudar sobre combina\u00e7\u00f5es de DF \nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/merging.html","6da547ab":"## Estat\u00edsticas, dados e distribui\u00e7\u00f5es","5913ecb9":"###### Desafio 02: Normalizar o crosstab pela coluna.","404e0895":"###### Desafio 05: Refletir sobre a manipula\u00e7\u00e3o do tamanho das visualiza\u00e7\u00f5es.\nhttps:\/\/www.alura.com.br\/artigos\/visualizando-informacoes-com-um-grafico","53d9f8c3":"###### Desafio 03: Propor\u00e7\u00e3o das classes tratamento."}}