{"cell_type":{"8985860e":"code","af4de7fe":"code","ae086213":"code","58639a54":"code","d8b53026":"code","5055ff46":"code","44c8ca9e":"code","344b494b":"code","5b5adb48":"code","025fa319":"code","666ddaba":"code","b49bccaa":"code","2dc24e72":"code","3a9f3403":"code","cc28eccf":"code","113e2df4":"code","c8794771":"code","ec6e9c47":"code","2eb9fd98":"code","a67c284b":"code","8e1d5e6a":"code","658be9ff":"markdown","b1866670":"markdown","11b7cda7":"markdown","a5eea234":"markdown","78072f43":"markdown","5bab46cb":"markdown","9f380ab7":"markdown","62fcb38f":"markdown","50a3ca6b":"markdown"},"source":{"8985860e":"# Set up\nimport numpy as np\nimport pandas as pd\n\n# Visualizations\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import plot_confusion_matrix\n\n# ML\nfrom keras.datasets import mnist\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nimport tensorflow as tf","af4de7fe":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","ae086213":"print(f'Shape of training dataset is: {train.shape}')\nprint(f'Shape of testing dataset is: {test.shape}')","58639a54":"display(train.head())","d8b53026":"(X_train, y_train), (X_test, y_test) = mnist.load_data()","5055ff46":"train = pd.DataFrame(data = np.reshape(X_train, (60000, 28*28)),\n                     index = [i for i in range(X_train.shape[0])],\n                     columns = ['pixel' + str(i) for i in range(X_train.shape[1]*X_train.shape[2])])\n\ntrain['label'] = y_train\n\ntrain.head()","44c8ca9e":"plt.figure(figsize = (10, 8))\nsns.countplot(x = 'label',data = train)\n\nplt.xlabel(\"Digit's Classes\")\nplt.ylabel('Frequency')\nplt.title('Frequency of Digits')\nplt.show()","344b494b":"for i in range(4):\n    plt.subplot(2, 2, i+1)\n    img = X_train[i]\n    plt.imshow(img, cmap = 'gray')\n    plt.axis('off')\n    \nplt.show()","5b5adb48":"# Normalization\nX_train = X_train \/ 255.0\nX_test = X_test \/ 255.0 \ntest = test.values \/ 255.0\nprint(f'Shape of X_train : {X_train.shape}')\nprint(f'Shape of X_test : {X_test.shape}')\nprint(f'Shape of test set (submission): {test.shape}')","025fa319":"# Reshaping \nX_train = X_train.reshape(-1, 28, 28, 1)\nX_test = X_test.reshape(-1, 28, 28, 1)\ntest = test.reshape(-1, 28, 28, 1)\nprint(f'Shape of X_train : {X_train.shape}')\nprint(f'Shape of X_test : {X_test.shape}')\nprint(f'Shape of test set (submission): {test.shape}')","666ddaba":"# Encoding \ny_train = tf.keras.utils.to_categorical(y_train, num_classes = 10)","b49bccaa":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Activation, Dropout","2dc24e72":"model = Sequential()\nmodel.add(Conv2D(128, 5, padding=\"Same\", activation=\"relu\", input_shape=(28,28,1)))\nmodel.add(Conv2D(128, 5, padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPooling2D())\nmodel.add(Dropout(0.50))\n\nmodel.add(Conv2D(64, 3, padding=\"Same\", activation=\"relu\"))\nmodel.add(Conv2D(64, 3, padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPooling2D())\nmodel.add(Dropout(0.50))\n\nmodel.add(Conv2D(32, 3, padding=\"Same\", activation=\"relu\"))\nmodel.add(Conv2D(16, 3, padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPooling2D())\nmodel.add(Dropout(0.50))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(1000, activation=\"relu\"))\nmodel.add(Dense(500, activation=\"relu\"))\nmodel.add(Dense(100, activation=\"relu\"))\nmodel.add(Dense(10, activation=\"softmax\"))\n\nmodel.summary()","3a9f3403":"from keras.utils import plot_model \nplot_model(model, to_file = 'model.png', show_shapes = True, show_layer_names = True)\n\nfrom IPython.display import Image\nImage('model.png')","cc28eccf":"model.compile(optimizer = \"SGD\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","113e2df4":"hist = model.fit(X_train, y_train, batch_size = 32, epochs = 50)","c8794771":"plt.figure(figsize = (15, 3))\n\nplt.subplot(1, 2, 1)\nplt.plot(hist.history[\"accuracy\"])\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Training Accuracy\")\n\nplt.subplot(1, 2, 2)\nplt.plot(hist.history[\"loss\"])\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.title(\"Training Loss\")\n\nplt.show()","ec6e9c47":"y_pred = np.argmax(model.predict(X_test), axis=-1)\naccuracy = accuracy_score(y_pred, y_test)\n\nprint(f'The accuracy of the trained CNN is: {accuracy}')","2eb9fd98":"conf_mat_cnn = confusion_matrix(y_pred, y_test)\n\nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(conf_mat_cnn, annot=True, linewidths=0.01,cmap=\"cubehelix\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.tight_layout()\n\nplt.show()","a67c284b":"results = model.predict(test)\n\nresults = np.argmax(results, axis = 1)\n\nresults = pd.Series(results, name = 'Label')","8e1d5e6a":"submission = pd.concat([pd.Series(range(1, 28001), name = \"ImageId\"), results], axis = 1)\nsubmission.to_csv('cnn_mnist_submission.csv', index = False)","658be9ff":"<div id='4'><\/div>\n\n<br>\n\n### **4. Model Training**","b1866670":"<div id='5'><\/div>\n\n<br>\n\n### **5. Conclusion**\nWe trained a Convolutional Neural Network, and achieved 99.44% accuracy on the test set.","11b7cda7":"## Table of Contents\n1. [Importing modules and the dataset](#1)\n2. [Some Exploratory Data Analysis](#2)\n3. [Normalization](#3)\n4. [Model training](#4)\n5. [Conclusion](#5)","a5eea234":"<br>\n\nReshaping the data first and creating the data first, in order to perform some EDA.","78072f43":"We will be using the complete MNIST Dataset to improve our model.","5bab46cb":"# The MNIST Dataset of Handwritten Digits\nWe will be training a Convolutional Neural Network (CNN) to predict the class of digits (i.e 0 - 9) using Keras library in Python.","9f380ab7":"<div id='2'><\/div>\n\n<br>\n\n### **2. Some Exploratory Data Analysis**","62fcb38f":"The data seems to be balanced.\n\n<br>\n\nPlotting some samples,","50a3ca6b":"<div id'3'><\/div>\n\n<br>\n\n### **3. Normalization**\n- Colors take value from 0 - 255 (in RGB), but to apply CNN its much better to make them 0 - 1. That is, making them grayscale.\n- We need to include an extra dimension in the imageset i.e. 28x28x1. As Keras requires an extra dimension in the end to correspond the channels.\n- Finally, encoding our labels."}}