{"cell_type":{"cd0eae91":"code","17a7a59a":"code","3631b188":"code","45242be4":"code","75ca4276":"code","5d5c97c7":"code","20a43381":"code","227e5167":"code","5ea18c33":"code","7c34df91":"code","d07f856e":"code","1df3f100":"code","37123e4e":"code","f596b5ef":"code","56c6d184":"code","87acaa39":"code","fbe5c0c6":"code","38fbb96d":"code","7e8fd890":"code","35ea9290":"code","c6cdfcb9":"code","53bb4ecf":"code","81c77262":"code","65c1472c":"code","e381b9cd":"code","98714bfd":"code","c12b337c":"code","0ab5ab71":"code","56981eb5":"code","6d145eb7":"code","3d41a9e2":"code","1d86f4c3":"code","91107d06":"code","e93bdc2c":"code","a09f3db3":"code","05fb4591":"code","d93c32a0":"code","1eab7aaf":"code","3e5f066c":"code","55a22394":"code","67b517bc":"code","93508209":"code","aca0ae12":"code","12a31688":"code","bf792558":"code","7e2393f1":"code","0cee72b9":"code","79dbc939":"code","c41b66f0":"code","2b7c2c45":"code","25ca4dee":"code","0a67f024":"code","bf88c12b":"code","dc1da763":"code","56e8728c":"code","2c29a369":"code","64b0f95e":"code","fb93956d":"code","bca90842":"code","6e122462":"code","173c3bd4":"code","89d57379":"markdown","24363358":"markdown","601c411d":"markdown","d11d9ff6":"markdown","08e1b361":"markdown","62eddea6":"markdown","e0a36757":"markdown","7002344b":"markdown","72a4f5d0":"markdown","40491d50":"markdown","3789345b":"markdown","ec5cb598":"markdown","121b9ef7":"markdown","effc99b9":"markdown","99d68df9":"markdown","98d172f2":"markdown","c3ab27d3":"markdown","b6bf17b1":"markdown","70879d19":"markdown","14d34cdb":"markdown","9a76f168":"markdown","6f5a8866":"markdown","d86501ad":"markdown","a26cf7d1":"markdown","b6e4f888":"markdown","60b20b6e":"markdown","3073c9c6":"markdown","9b2b52ed":"markdown","f49d413a":"markdown","52e53795":"markdown","0abb3688":"markdown"},"source":{"cd0eae91":"import numpy as np\nimport pandas as pd\nimport gc\nfrom tqdm.notebook import tqdm\n\n# \u6a5f\u68b0\u5b66\u7fd2\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import f1_score\nimport lightgbm as lgb\n\n\n# \u53ef\u8996\u5316\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# \u8b66\u544a\u3092\u975e\u8868\u793a\u306b\u8a2d\u5b9a\u3059\u308b\nimport warnings\nwarnings.filterwarnings('ignore')","17a7a59a":"train = pd.read_csv(\"\/kaggle\/input\/marketing-dsg\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/marketing-dsg\/test.csv\")\ntrain_prior_order = pd.read_csv(\"\/kaggle\/input\/marketing-dsg\/train_prior_order.csv\")\ntest_prior_order = pd.read_csv(\"\/kaggle\/input\/marketing-dsg\/test_prior_order.csv\")\nproducts = pd.read_csv(\"\/kaggle\/input\/marketing-dsg\/products.csv\")\ndepartments = pd.read_csv(\"\/kaggle\/input\/marketing-dsg\/departments.csv\")\nsample_submission = pd.read_csv(\"\/kaggle\/input\/marketing-dsg\/sample_submission.csv\")","3631b188":"print(\"\u3010train\u3011\", train.shape)\ndisplay(train.head())\nprint(\"\u3010test\u3011\", test.shape)\ndisplay(test.head())\nprint(\"\u3010train_prior_order\u3011\", train_prior_order.shape)\ndisplay(train_prior_order.head())\nprint(\"\u3010test_prior_order\u3011\", test_prior_order.shape)\ndisplay(test_prior_order.head())\nprint(\"\u3010products\u3011\", products.shape)\ndisplay(products.head())\nprint(\"\u3010departments\u3011\", departments.shape)\ndisplay(departments.head())","45242be4":"# \u307e\u3068\u3081\u3066\u60c5\u5831\u3092\u78ba\u8a8d\u3059\u308b\ntrain.info()","75ca4276":"train.isnull().sum()","5d5c97c7":"test.isnull().sum()","20a43381":"# \u5bfe\u8c61\u5217\u306e\u4e2d\u3067\u8cfc\u5165\u3092\u884c\u3063\u305f\u6570\ntrain['target'].value_counts()","227e5167":"# \u8cfc\u5165\u3092\u884c\u3046\u5272\u5408\ntrain['target'].value_counts() \/ train['target'].count()","5ea18c33":"# \u5b66\u7fd2\u7528\u306e\u30c7\u30fc\u30bf\u306e\u30e6\u30fc\u30b6\u6570\u3092\u78ba\u8a8d\u3059\u308b\ntrain['user_id'].nunique()","7c34df91":"# \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306e\u6ce8\u6587\u6570\u3092\u78ba\u8a8d\u3059\u308b\ntrain['order_id'].nunique()","d07f856e":"# test\u7528\u306e\u30c7\u30fc\u30bf\u306e\u30e6\u30fc\u30b6\u6570\u3092\u78ba\u8a8d\u3059\u308b\ntest['user_id'].nunique()","1df3f100":"# test\u30c7\u30fc\u30bf\u306e\u6ce8\u6587\u6570\u3092\u78ba\u8a8d\u3059\u308b\ntest['order_id'].nunique()","37123e4e":"train['order_number'].hist()","f596b5ef":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30e6\u30fc\u30b6\u304c\u4f55\u56de\u76ee\u306e\u6ce8\u6587\u304b\u3092\u78ba\u8a8d\u3059\u308b\ntrain['order_number'].describe()","56c6d184":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u904e\u53bb\u306e\u8cfc\u8cb7\u5c65\u6b74\u60c5\u5831\u3092\u4f5c\u6210\u3059\u308b\nprior_order = train_prior_order.append(test_prior_order)","87acaa39":"# \u5546\u54c1\u540d\u3068\u30ab\u30c6\u30b4\u30ea\u60c5\u5831\u306e\u4ed8\u4e0e\nprior_order = pd.merge(prior_order, products, on='product_id', how='left')\nprior_order = pd.merge(prior_order, departments, on='department_id', how='left')","fbe5c0c6":"prior_order.head()","38fbb96d":"# \u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\u3057\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u4f5c\u6210\ntrain_feature_df = train.copy()\ntest_feature_df = test.copy()","7e8fd890":"# \u5546\u54c1\u3054\u3068\u306e\u8cfc\u5165\u56de\u6570\nproduct_count = prior_order.groupby('product_id').count()[['order_id']].reset_index().rename(\n    columns={'order_id':'product_count'})","35ea9290":"product_count.head()","c6cdfcb9":"# \u5546\u54c1\u3054\u3068\u306e\u7279\u5fb4\u306e\u7d50\u5408\ntrain_feature_df = pd.merge(train_feature_df, product_count, on='product_id', how='left')\ntest_feature_df = pd.merge(test_feature_df, product_count, on='product_id', how='left')","53bb4ecf":"# \u30e6\u30fc\u30b6\u3054\u3068\u306e\u5546\u54c1\u306e\u518d\u8cfc\u5165\u7387\nuser_reorder_rate = prior_order.groupby(['user_id']).mean()[['reordered']].reset_index()","81c77262":"user_reorder_rate.head()","65c1472c":"# \u30e6\u30fc\u30b6\u3054\u3068\u306e\u7279\u5fb4\u306e\u7d50\u5408\ntrain_feature_df = pd.merge(train_feature_df, user_reorder_rate, on='user_id', how='left')\ntest_feature_df = pd.merge(test_feature_df, user_reorder_rate, on='user_id', how='left')","e381b9cd":"user_order_mean = prior_order.groupby(['user_id', 'order_id']).count()[['order_number']].reset_index().groupby('user_id').mean()[['order_number']].reset_index().rename(\n                    columns={'order_number':'mean_order_num'})","98714bfd":"# \u30e6\u30fc\u30b6\u3054\u3068\u306e\u7279\u5fb4\u306e\u7d50\u5408\ntrain_feature_df = pd.merge(train_feature_df, user_order_mean, on='user_id', how='left')\ntest_feature_df = pd.merge(test_feature_df, user_order_mean, on='user_id', how='left')","c12b337c":"# \u904e\u53bb\u306e\u8cfc\u5165\u5c65\u6b74\u5185\u3067\u306e\u51fa\u73fe\u56de\u6570\nuser_product_count = prior_order.groupby(['user_id','product_id']).count()[['order_id']].reset_index().rename(\n    columns={'order_id':'user_product_count'})","0ab5ab71":"user_product_count.head()","56981eb5":"# \u30e6\u30fc\u30b6\u30fb\u5546\u54c1\u3054\u3068\u306e\u7279\u5fb4\u306e\u7d50\u5408\ntrain_feature_df = pd.merge(train_feature_df, user_product_count, on=['user_id', 'product_id'], how='left')\ntest_feature_df = pd.merge(test_feature_df, user_product_count, on=['user_id', 'product_id'], how='left')","6d145eb7":"train_feature_df = pd.merge(train_feature_df, \n                            products[['product_id', 'aisle_id', 'department_id']],\n                            on=['product_id'], how='left')\ntest_feature_df = pd.merge(test_feature_df, \n                            products[['product_id', 'aisle_id', 'department_id']],\n                            on=['product_id'], how='left')","3d41a9e2":"# \u904e\u53bb\u306eorder\u306e\u4e2d\u3067\u306e\u6700\u5f8c\u306e\u6ce8\u6587\u756a\u53f7\nlast_order_df = prior_order.groupby('user_id')[['order_number']].max().reset_index().rename(\n    columns={'order_number':'last_order_number'})","1d86f4c3":"# \u6700\u5f8c\u306e\u6ce8\u6587\u756a\u53f7\u3092\u30de\u30fc\u30b8\u3059\u308b\nprior_order = pd.merge(prior_order, last_order_df, on='user_id', how='left')","91107d06":"# \u76f4\u8fd1i\u56de\u306euser,product\u306e\u51fa\u73fe\u56de\u6570\u7279\u5fb4\nprior_order_last = {}\nprior_order_last_count = {}\n\n# \u904e\u53bbk\u56de\u307e\u3067\u306e\u7279\u5fb4\u4f5c\u6210\ni_list = [0, 1, 2 ,3 ,4, 5, 10, 15, 20]\nfor i in i_list:\n    # \u76f4\u8fd1i*3\u56de\u306eorder\u306edf\u3092\u4f5c\u6210\n    prior_order_last[i] = prior_order.query('last_order_number - order_number <= @i')\n    \n    # \u76f4\u8fd1i\u56de\u306e\u51fa\u73fe\u56de\u6570\n    prior_order_last_count[i] = \\\n        prior_order_last[i].groupby(['user_id', 'product_id']).count()[['order_number']].reset_index().rename(\n        columns={'order_number':'last_order_'+str(i)})\n    \n    # train, test\u306e\u7d50\u5408\n    train_feature_df = pd.merge(train_feature_df, prior_order_last_count[i], \n                                on=['user_id', 'product_id'], how='left')\n    test_feature_df = pd.merge(test_feature_df, prior_order_last_count[i], \n                               on=['user_id', 'product_id'], how='left')\n    \n# \u4f7f\u3044\u7d42\u308f\u3063\u305fdf\u306e\u524a\u9664\ndel prior_order_last, prior_order_last_count\ngc.collect()","e93bdc2c":"# \u30aa\u30fc\u30c0\u30fc\u3067\u30e6\u30cb\u30fc\u30af\u306a\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\nprior_order_days = prior_order.drop_duplicates(subset=['order_id'], keep='last')\n\n# \u6b20\u640d\u306f0\u3067\u57cb\u3081\u308b\nprior_order_days.fillna(0, inplace=True)","a09f3db3":"# \u8cfc\u8cb7\u306e\u7d2f\u7a4d\u7d4c\u904e\u65e5\u6570\u5217\u3092\u4f5c\u6210\u3059\u308b\nprior_order_day = pd.DataFrame()\nfor data in tqdm(prior_order_days[['user_id', 'order_id', 'days_since_prior_order']].groupby('user_id')):\n    data[1]['order_day'] = data[1]['days_since_prior_order'].cumsum()\n    prior_order_day = prior_order_day.append(data[1])\n\n# \u7d2f\u7a4d\u7d4c\u904e\u65e5\u6570\u5217\u3092\u30de\u30fc\u30b8\nprior_order = pd.merge(prior_order, prior_order_day[['order_id', 'order_day']], on='order_id', how='left')","05fb4591":"# \u305d\u306e\u5546\u54c1\u3092\u524d\u56de\u8cfc\u5165\u3057\u305f\u65e5\u6570\u3068\u305d\u306e\u5dee\u5206\u5217\u3092\u4f5c\u6210\nprior_order['before_order_day'] = prior_order.groupby(['user_id', 'product_id'])['order_day'].shift(1)\nprior_order['diff_order_day'] = prior_order['order_day'] - prior_order['before_order_day']\n\n# \u305d\u306e\u5546\u54c1\u306e\u5e73\u5747\u8cfc\u8cb7\u65e5\u6570\u9593\u9694\u3092\u4f5c\u6210\ndiff_order_day_mean = prior_order.groupby(['user_id', \n                                           'product_id']).mean()[['diff_order_day']].reset_index().rename(\n    columns={'diff_order_day':'diff_order_day_mean'})","d93c32a0":"# \u7d2f\u7a4d\u7d4c\u904e\u65e5\u6570\u5217\u3092\u30de\u30fc\u30b8\ntrain_feature_df = pd.merge(train_feature_df,\n                            diff_order_day_mean[['user_id', 'product_id', 'diff_order_day_mean']], \n                            on=['user_id', 'product_id'],\n                            how='left')\n\ntest_feature_df = pd.merge(test_feature_df,\n                           diff_order_day_mean[['user_id', 'product_id', 'diff_order_day_mean']], \n                           on=['user_id', 'product_id'],\n                           how='left')","1eab7aaf":"# \u305d\u306e\u30e6\u30fc\u30b6\u304c\u305d\u306e\u5546\u54c1\u3092\u904e\u53bb\u306b\u6700\u5f8c\u306b\u6ce8\u6587\u3057\u305f\u65e5\nlast_product_order_day =prior_order.groupby(['user_id',\n                                             'product_id']).max()['order_day'].reset_index().rename(\n    columns={'order_day':'last_product_order_day'})\n\n# \u305d\u306e\u30e6\u30fc\u30b6\u304c\u904e\u53bb\u306b\u6700\u5f8c\u306b\u6ce8\u6587\u3057\u305f\u65e5\nlast_order_day =prior_order.groupby(['user_id']).max()['order_day'].reset_index().rename(\n    columns={'order_day':'last_order_day'})","3e5f066c":"# \u305d\u306e\u30e6\u30fc\u30b6\u304c\u305d\u306e\u5546\u54c1\u3092\u904e\u53bb\u306e\u6700\u5f8c\u306b\u6ce8\u6587\u3057\u305f\u65e5\u3092\u30de\u30fc\u30b8\ntrain_feature_df = pd.merge(train_feature_df,\n                            last_product_order_day[['user_id', 'product_id', 'last_product_order_day']], \n                            on=['user_id', 'product_id'],\n                            how='left')\n\ntest_feature_df = pd.merge(test_feature_df,\n                           last_product_order_day[['user_id', 'product_id', 'last_product_order_day']], \n                           on=['user_id', 'product_id'],\n                           how='left')\n\n# \u305d\u306e\u30e6\u30fc\u30b6\u304c\u904e\u53bb\u306b\u6700\u5f8c\u306b\u6ce8\u6587\u3057\u305f\u65e5\u3092\u30de\u30fc\u30b8\ntrain_feature_df = pd.merge(train_feature_df,\n                            last_order_day[['user_id', 'last_order_day']], \n                            on=['user_id'],\n                            how='left')\n\ntest_feature_df = pd.merge(test_feature_df,\n                           last_order_day[['user_id', 'last_order_day']], \n                           on=['user_id'],\n                           how='left')","55a22394":"# \u6700\u5f8c\u306e\u8cfc\u8cb7\u65e5 + \u305d\u3053\u304b\u3089\u306e\u7d4c\u904e\u65e5\u6570\ntrain_feature_df['now_order_day'] = \\\n    train_feature_df['last_order_day'] + train_feature_df['days_since_prior_order']\n\ntest_feature_df['now_order_day'] = \\\n    test_feature_df['last_order_day'] + test_feature_df['days_since_prior_order']","67b517bc":"# \u6700\u5f8c\u306b\u540c\u3058\u5546\u54c1\u3092\u6ce8\u6587\u3057\u3066\u304b\u3089\u306e\u65e5\u6570\ntrain_feature_df['diff_last_product_order'] = \\\n    train_feature_df['now_order_day'] - train_feature_df['last_product_order_day']\n\ntest_feature_df['diff_last_product_order'] = \\\n    test_feature_df['now_order_day'] - test_feature_df['last_product_order_day']","93508209":"# \u904e\u53bb\u306e\u5e73\u5747\u8cfc\u8cb7\u9593\u9694\u3068\u6700\u5f8c\u306b\u305d\u306e\u5546\u54c1\u3092\u8cb7\u3063\u305f\u6642\u304b\u3089\u306e\u7d4c\u904e\u65e5\u6570\u3092\u6bd4\u8f03\ntrain_feature_df['diff_product_order'] = \\\n    train_feature_df['diff_last_product_order'] - train_feature_df['diff_order_day_mean']\n\ntest_feature_df['diff_product_order'] = \\\n    test_feature_df['diff_last_product_order'] - test_feature_df['diff_order_day_mean']","aca0ae12":"train_feature_df['user_product_order_rate'] = train_feature_df['user_product_count'] \/ (train_feature_df['order_number'] - 1)\n\ntest_feature_df['user_product_order_rate'] = test_feature_df['user_product_count'] \/ (test_feature_df['order_number'] - 1)","12a31688":"aisle_order_rate = prior_order.groupby('aisle_id').mean()[['reordered']].reset_index().rename(columns={'reordered':'aisle_order_rate'})\ndepartment_order_rate = prior_order.groupby('department_id').mean()[['reordered']].reset_index().rename(columns={'reordered':'department_order_rate'})","bf792558":"# \u901a\u8def\u60c5\u5831\u306e\u7d50\u5408\ntrain_feature_df = pd.merge(train_feature_df, aisle_order_rate, on='aisle_id', how='left')\ntest_feature_df = pd.merge(test_feature_df, aisle_order_rate, on='aisle_id', how='left')\n\n# \u30ab\u30c6\u30b4\u30ea\u60c5\u5831\u306e\u7d50\u5408\ntrain_feature_df = pd.merge(train_feature_df, department_order_rate, on='department_id', how='left')\ntest_feature_df = pd.merge(test_feature_df, department_order_rate, on='department_id', how='left')","7e2393f1":"user_dow_count = prior_order_days.groupby(['user_id','order_dow']).count()[['order_id']].reset_index().rename(\n    columns={'order_id':'user_dow_count'})","0cee72b9":"train_feature_df = pd.merge(train_feature_df, user_dow_count, on=['user_id','order_dow'], how='left')\ntest_feature_df = pd.merge(test_feature_df, user_dow_count, on=['user_id','order_dow'], how='left')","79dbc939":"user_hour_count = prior_order_days.groupby(['user_id','order_hour_of_day']).count()[['order_id']].reset_index().rename(\n    columns={'order_id':'user_hour_count'})","c41b66f0":"train_feature_df = pd.merge(train_feature_df, user_hour_count, on=['user_id','order_hour_of_day'], how='left')\ntest_feature_df = pd.merge(test_feature_df, user_hour_count, on=['user_id','order_hour_of_day'], how='left')","2b7c2c45":"user_product_dow_count = prior_order.groupby(['user_id','product_id','order_dow']).count()[['order_id']].reset_index().rename(\n    columns={'order_id':'user_product_dow_count'})","25ca4dee":"train_feature_df = pd.merge(train_feature_df, user_product_dow_count, on=['user_id','product_id','order_dow'], how='left')\ntest_feature_df = pd.merge(test_feature_df, user_product_dow_count, on=['user_id','product_id','order_dow'], how='left')","0a67f024":"train_feature_df.fillna(0, inplace=True)\ntest_feature_df.fillna(0, inplace=True)","bf88c12b":"train_feature_df.head()","dc1da763":"# \u5b66\u7fd2\u7528\u306eConfig\u30d5\u30a1\u30a4\u30eb\nCFG = {\n    \"seed\":0, # \u4e71\u6570\u30b7\u30fc\u30c9\n    \"fold_num\":5, # \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306eFold\u6570\n    \n    # LGBM\u30d1\u30e9\u30e1\u30fc\u30bf\n    \"num_leaves\": 63, # \u8449\u306e\u6570\n    \"max_depth\":-1, # \u6700\u5927\u306e\u6df1\u3055\n    \"learning_rate\":0.01, # \u5b66\u7fd2\u7387\n    \"n_estimators\":1000, # \u6728\u3092\u4f5c\u308b\u6570\n    \"subsample\":0.7, # \u5b66\u7fd2\u306b\u7528\u3044\u308b\u30c7\u30fc\u30bf\u306e\u5272\u5408\n    \"subsample_freq\":1, # \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u884c\u3046\u983b\u5ea6\n    \"colsample_bytree\":0.8, # \u5b66\u7fd2\u306b\u7528\u3044\u308b\u5217\u306e\u5272\u5408\n    \"objective\":'binary', # 2\u5024\u5206\u985e\n    \"eval_metric\":'logloss', # logloss\u3092\u8a55\u4fa1\u6307\u6a19\u3068\u3057\u3066\n    \"early_stopping_rounds\":50, # \u6307\u5b9a\u56de\u6570\u4ee5\u4e0avalid\u306e\u5024\u304c\u66f4\u65b0\u3057\u306a\u3044\u5834\u5408\u306f\u5b66\u7fd2\u3092\u6b62\u3081\u308b\n    \"verbose\":100, # \u9014\u4e2d\u7d4c\u904e\u8868\u793a\u983b\u5ea6\n}","56e8728c":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u304b\u3089\u4e0d\u8981\u306a\u60c5\u5831\u3092\u524a\u9664\u3057\u305f\u7279\u5fb4\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\nfull_data_x = train_feature_df.drop([\"index\", \n                                     \"order_id\", \n                                     \"target\"],axis=1)\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u3057\u305f\u3044\u5024\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\nfull_data_y = train_feature_df[[\"target\"]]\n    \n# test\u7528\u306e\u30c7\u30fc\u30bf\u304b\u3089\u4e0d\u8981\u306a\u60c5\u5831\u3092\u524a\u9664\u3057\u305f\u7279\u5fb4\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\ntest_x = test_feature_df.drop([\"index\", \n                               \"order_id\", \n                               \"user_id\"],axis=1)","2c29a369":"full_data_x.head()","64b0f95e":"# \u4e88\u6e2c\u7d50\u679c\u3092\u7ba1\u7406\u3059\u308b\u914d\u5217\nanswer = np.array([])\n# \u5404Fold\u306e\u691c\u8a3c\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\u914d\u5217\nAUC_list = []\n\n# GroupKFold\u306e\u5206\u5272\n# \u5b66\u7fd2-\u691c\u8a3c\u7528\u306e\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b\u969b\u306b\u540c\u3058\u30e6\u30fc\u30b6\u304c\u5b66\u7fd2\u3068\u691c\u8a3c\u306e\u4e21\u65b9\u306b\u542b\u307e\u308c\u308b\u3068\u691c\u8a3c\u7528\u306e\u30b9\u30b3\u30a2\u304c\u9ad8\u304f\u306a\u308b\u30ea\u30fc\u30af\u304c\u767a\u751f\u3059\u308b\u305f\u3081\u3001\n# user_id\u3092\u7528\u3044\u3066\u30c7\u30fc\u30bf\u306e\u5206\u5272\u3092\u884c\u3046\ngroups = full_data_x['user_id'].values\ngroup_kfold = GroupKFold(n_splits=CFG['fold_num'])\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u30fb\u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u5206\u5272\u30925\u30d1\u30bf\u30fc\u30f3\u7e70\u308a\u8fd4\u3059\nfor i, (train_index, valid_index) in enumerate(group_kfold.split(full_data_x, full_data_y, groups)):\n    \n    print(\"----------------------------------------- Fold \", i, \"-----------------------------------------\")\n    # \u5b66\u7fd2\u30c7\u30fc\u30bf\u30fb\u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u5206\u5272\u30c7\u30fc\u30bf\u6570\n    print(\"TRAIN:\", len(train_index), \"VALID:\", len(valid_index))\n        \n    # \u5b66\u7fd2\u3068\u691c\u8a3c\u7528\u306b\u30c7\u30fc\u30bf\u5206\u5272(user_id\u306f\u3082\u3046\u4e0d\u8981\u306a\u306e\u3067\u524a\u9664\u3059\u308b)\n    train_x = full_data_x.iloc[train_index].drop([\"user_id\"],axis=1)\n    valid_x = full_data_x.iloc[valid_index].drop([\"user_id\"],axis=1)\n    \n    train_y = full_data_y.iloc[train_index]\n    valid_y = full_data_y.iloc[valid_index]\n    \n    # \u56de\u5e30\u4e88\u6e2c\u7528\u306elightgbm\u30e2\u30c7\u30eb\u3092\u8a2d\u5b9a\n    gbm_model = lgb.LGBMClassifier(\n        boosting_type='gbdt', # \u6728\u3092\u4f5c\u308b\u3068\u304d\u306e\u30eb\u30fc\u30eb\n        num_leaves=CFG['num_leaves'], # \u8449\u306e\u6570\n        max_depth=CFG['max_depth'], # \u6700\u5927\u306e\u6df1\u3055\n        learning_rate=CFG['learning_rate'], # \u5b66\u7fd2\u7387\n        n_estimators=CFG['n_estimators'], # \u6728\u3092\u4f5c\u308b\u6570\n        subsample=CFG['subsample'], # \u5b66\u7fd2\u306b\u7528\u3044\u308b\u30c7\u30fc\u30bf\u306e\u5272\u5408\n        subsample_freq=CFG['subsample_freq'], # \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u884c\u3046\u983b\u5ea6\n        colsample_bytree=CFG['colsample_bytree'], # \u5b66\u7fd2\u306b\u7528\u3044\u308b\u5217\u306e\u5272\u5408\n        objective=CFG['objective'], # \u5bfe\u8c61\u3068\u3059\u308b\u306e\u306f\u56de\u5e30\u554f\u984c\n        random_state=CFG['seed'], # \u4e71\u6570\u30b7\u30fc\u30c9\n        silent=False, # \u5b66\u7fd2\u5185\u5bb9\u306e\u8868\u793a\n        importance_type='gain' # \u5909\u6570\u306e\u91cd\u8981\u5ea6\u306e\u8a08\u7b97\u65b9\u6cd5\n    )\n    \n    # \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\n    gbm_model.fit(train_x, \n                  train_y,\n                  eval_set=[(valid_x, valid_y)], # early_stopping\u306b\u4f7f\u7528\u3059\u308b\u691c\u8a3c\u30c7\u30fc\u30bf\n                  eval_metric=CFG[\"eval_metric\"],  # early_stopping\u306b\u4f7f\u7528\u3059\u308b\u8a55\u4fa1\u6307\u6a19\n                  early_stopping_rounds=CFG['early_stopping_rounds'], # \u4f55\u56de\u8a55\u4fa1\u30b9\u30b3\u30a2\u306e\u6539\u5584\u304c\u898b\u3089\u308c\u306a\u3051\u308c\u3070\u5b66\u7fd2\u3092\u505c\u6b62\u3059\u308b\u304b\n                  verbose=CFG['verbose'])\n    \n    # \u691c\u8a3c\u30c7\u30fc\u30bf\u3078\u306e\u4e88\u6e2c(\u78ba\u7387\u5024\u3092\u4e88\u6e2c\u3059\u308b)\n    gbm_pred = gbm_model.predict_proba(valid_x)\n    \n    # \u30b9\u30b3\u30a2\u306e\u8a08\u7b97\n    # \u691c\u8a3c\u30c7\u30fc\u30bf\u306b\u95a2\u3059\u308bAUC\u30b9\u30b3\u30a2\u306e\u8a08\u7b97\n    AUC = roc_auc_score(valid_y[['target']], gbm_pred[:,1])\n    print(\"AUC : \", AUC)\n    # \u3053\u306eFold\u3067\u306eAUC\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3057\u3066\u304a\u304f\n    AUC_list += [AUC]\n    \n    # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3078\u306e\u4e88\u6e2c\n    temp_pred = gbm_model.predict_proba(test_x)\n    \n    # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3078\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u8a18\u9332\n    if i == 0:\n        answer = temp_pred[:, 1]\n    else:\n        answer += temp_pred[:, 1]\n    \n    # \u6700\u7d42\u30eb\u30fc\u30d7\u306e\u307f\u7279\u5fb4\u91cf\u91cd\u8981\u5ea6\u3092\u53ef\u8996\u5316\n    if i == CFG['fold_num']-1:\n\n        # \u8aac\u660e\u5909\u6570\u306e\u91cd\u8981\u5ea6\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u6210\n        feature_importances = pd.DataFrame()\n        feature_importances['feature'] = train_x.columns\n        feature_importances['importance'] = gbm_model.feature_importances_\n\n        # \u91cd\u8981\u5ea6\u304c\u5927\u304d\u3044\u9806\u306b\u53ef\u8996\u5316\n        plt.figure(figsize=(16, 16))\n        sns.barplot(data=feature_importances.sort_values('importance', ascending=False).head(50),\n                    x='importance',\n                    y='feature');\n        plt.title('50 TOP feature importance')\n        plt.show()\n        \n    # \u4f7f\u3063\u305fDF\u306e\u524a\u9664\u3092\u3057\u3001\u30e1\u30e2\u30ea\u3092\u89e3\u653e\u3059\u308b\n    del train_x, valid_x, train_y, valid_y\n    gc.collect()\n\n# 5fold\u5e73\u5747AUC\nprint(\"AUC\")\nprint(AUC_list)\nprint(\"5Fold\u5e73\u5747AUC:\", np.mean(AUC_list))\n\n# \u63d0\u51fa\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\nsubmission = test_feature_df.copy()\n# \u4e88\u6e2c\u7d50\u679c\u306f\u5404Fold\u306e\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u7d50\u679c\u306e\u5e73\u5747\u3092\u7528\u3044\u308b\npred_test = answer \/ CFG['fold_num']\n\n# \u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\nsubmission['target'] = pred_test","fb93956d":"# \u63d0\u51fa\u306b\u5fc5\u8981\u306a\u5217\u306e\u307f\u3092\u6b8b\u3059\nsubmission = submission[['index', 'target']]","bca90842":"submission.shape","6e122462":"submission.head()","173c3bd4":"# \u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u51fa\u3059\nsubmission.to_csv(\"submission.csv\", header=True, index=False)","89d57379":"\u6700\u4f4e\u3067\u30824\u56de\u3001\u6700\u9ad8100\u56de\u6ce8\u6587\u3057\u305f\u3053\u3068\u306e\u3042\u308b\u30e6\u30fc\u30b6\u306e\u30c7\u30fc\u30bf\u3068\u306a\u3063\u3066\u3044\u308b","24363358":"## \u30ab\u30c6\u30b4\u30ea\u30fb\u901a\u8def\u756a\u53f7\u3054\u3068\u306e\u518d\u6ce8\u6587\u7387","601c411d":"## \u30e6\u30fc\u30b6\u304c\u524d\u56de\u306e\u540c\u4e00\u5546\u54c1\u8cfc\u5165\u304b\u3089\u306e\u7d4c\u904e\u65e5\u6570\n\u540c\u3058\u5546\u54c1\u3092\u6ce8\u6587\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u65e5\u6570\u3068\u7279\u5fb4\u3068\u3057\u3066\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u30e6\u30fc\u30b6\u3054\u3068\u306e\u521d\u56de\u6ce8\u6587\u304b\u3089\u306e\u7d4c\u904e\u65e5\u6570\u3068\u540c\u4e00\u5546\u54c1\u3054\u3068\u306e\u8cfc\u8cb7\u9593\u9694\u3092\u96c6\u8a08\u3059\u308b","d11d9ff6":"## \u30e6\u30fc\u30b6\u3054\u3068\u306e\u6ce8\u6587\u66dc\u65e5\u5b9f\u7e3e","08e1b361":"# \u4e0d\u8981\u306a\u30c7\u30fc\u30bf\u306e\u524a\u9664","62eddea6":"## \u30e6\u30fc\u30b6\u30fb\u5546\u54c1\u3054\u3068\u306e\u6ce8\u6587\u66dc\u65e5\u5b9f\u7e3e","e0a36757":"# \u6b20\u640d\u306e\u78ba\u8a8d","7002344b":"\u5b66\u7fd2\u30fb\u30c6\u30b9\u30c8\u3068\u3082\u306b10000\u540d\u305a\u3064\u306e\u30e6\u30fc\u30b6\u306e1\u3064\u306e\u6ce8\u6587\u30c7\u30fc\u30bf\u306b\u306a\u3063\u3066\u3044\u308b","72a4f5d0":"## \u76f4\u8fd1i\u56de\u6ce8\u6587\u306b\u304a\u3051\u308b\u306euser\u3068product\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u51fa\u73fe\u56de\u6570\n\u904e\u53bb1,2,3,4,5,6,11,16,21\u56de\u307e\u3067\u306e\u6ce8\u6587\u306e\u4e2d\u3067\u4f55\u56de\u305d\u306euser\u3068product\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u51fa\u73fe\u3059\u308b\u304b\u3092\u30ab\u30a6\u30f3\u30c8","40491d50":"## \u5546\u54c1\u306e\u901a\u8def\u756a\u53f7\u3068\u30ab\u30c6\u30b4\u30ea\u756a\u53f7\nproduct_id\u3092\u30ad\u30fc\u306b\u901a\u8def\u3068\u30ab\u30c6\u30b4\u30ea\u306e\u60c5\u5831\u3092\u8ffd\u52a0\u3059\u308b","3789345b":"# \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d","ec5cb598":"# \u89e3\u7b54\u4f8bNotebook\n\u3053\u306eNotebook\u306f\u5b66\u7fd2\u7528\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u6539\u5584\u30b3\u30fc\u30c9\u3067\u3059\u3002  \n\u4e3b\u306b\u7279\u5fb4\u91cf\u306e\u8ffd\u52a0\u306b\u3088\u3063\u3066\u30b9\u30b3\u30a2\u3092\u6539\u5584\u3055\u305b\u3066\u3044\u307e\u3059\u3002","121b9ef7":"# \u53ef\u8996\u5316\u30fb\u7d71\u8a08\u91cf\u306e\u78ba\u8a8d","effc99b9":"\u5b66\u7fd2\u30c7\u30fc\u30bf\u30925\u5206\u5272\u3059\u308b\u3002\n4\u3064\u3092\u5b66\u7fd2\u7528\u30011\u3064\u3092\u691c\u8a3c\u7528\u3068\u3057\u3066\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u30925\u56de\u7e70\u308a\u8fd4\u3057\u3066\u3001\u305d\u308c\u3089\u306e\u5e73\u5747\u7d50\u679c\u3092\u691c\u8a3c\u30b9\u30b3\u30a2\u3068\u3057\u3066\u7cbe\u5ea6\u304c\u5411\u4e0a\u3057\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3002  \n\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u306f\u3001\u4f5c\u6210\u3055\u308c\u305f5\u3064\u306e\u30e2\u30c7\u30eb\u306e\u7d50\u679c\u305d\u308c\u305e\u308c\u3067\u4e88\u6e2c\u3092\u884c\u3044\u3001\u305d\u308c\u3089\u306e\u5e73\u5747\u3092\u6700\u7d42\u4e88\u6e2c\u7d50\u679c\u3068\u3059\u308b\u3002","99d68df9":"# \u30d1\u30c3\u30b1\u30fc\u30b8\u8aad\u307f\u8fbc\u307f","98d172f2":"# \u7279\u5fb4\u91cf\u306e\u4f5c\u6210","c3ab27d3":"# \u4f5c\u6210\u3057\u305f\u7279\u5fb4\u91cf\u306e\u78ba\u8a8d","b6bf17b1":"## \u5546\u54c1\u3054\u3068\u306e\u8cfc\u5165\u56de\u6570\u7279\u5fb4\n\u904e\u53bb\u8ca9\u58f2\u5c65\u6b74\u306e\u5546\u54c1\u3054\u3068\u306e\u8cfc\u5165\u56de\u6570\u3092\u7279\u5fb4\u91cf\u5316\u3059\u308b\u3053\u3068\u3067\u8cfc\u5165\u3055\u308c\u3084\u3059\u3044\u5546\u54c1\u306e\u7279\u5fb4\u3092\u4f5c\u6210\u3059\u308b","70879d19":"# \u6a5f\u68b0\u5b66\u7fd2\u4e88\u6e2c","14d34cdb":"## \u30e6\u30fc\u30b6\u30fb\u5546\u54c1\u3054\u3068\u306e\u51fa\u73fe\u56de\u6570\n\u305d\u306e\u30e6\u30fc\u30b6\u3068\u5546\u54c1\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u904e\u53bb\u306b\u4f55\u56de\u51fa\u73fe\u3057\u305f\u3053\u3068\u304c\u3042\u308b\u304b\u306e\u7279\u5fb4","9a76f168":"# \u5404\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u306e\u78ba\u8a8d","6f5a8866":"\u7d0410%\u306e\u78ba\u7387\u3067\u518d\u8cfc\u5165\u304c\u884c\u308f\u308c\u3066\u3044\u308b","d86501ad":"## \u305d\u306e\u30e6\u30fc\u30b6\u306e\u305d\u306e\u5546\u54c1\u306e\u8cfc\u5165\u78ba\u7387","a26cf7d1":"# \u5b66\u7fd2\u30fb\u63a8\u8ad6","b6e4f888":"# \u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210","60b20b6e":"# target\u306e\u78ba\u8a8d","3073c9c6":"## \u30e6\u30fc\u30b6\u3054\u3068\u306e\u6ce8\u6587\u6642\u9593\u5b9f\u7e3e","9b2b52ed":"### \u30e6\u30fc\u30b6\u306e1\u56de\u3042\u305f\u308a\u306e\u5e73\u5747\u6ce8\u6587\u6570","f49d413a":"## \u30e6\u30fc\u30b6\u3054\u3068\u306b\u518d\u8cfc\u5165\u3059\u308b\u78ba\u7387\n\u30e6\u30fc\u30b6\u306b\u3088\u3063\u3066\u518d\u8cfc\u5165\u3057\u3084\u3059\u3044\u4eba\u3068\u305d\u3046\u3067\u306a\u3044\u4eba\u304c\u3044\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u8868\u73fe\u3059\u308b","52e53795":"## \u6b20\u640d\u30920\u3067\u57cb\u3081\u308b","0abb3688":"# \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f"}}