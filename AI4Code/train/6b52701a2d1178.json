{"cell_type":{"d91da728":"code","672f657f":"code","01944e4c":"code","37a6eb85":"code","0398acb7":"code","b9d2e2ac":"code","27a7b049":"code","f20e95fb":"code","132f0e35":"code","71ff4115":"code","f1188bd2":"code","dcd7fcb2":"code","4119f228":"code","e2a0cfde":"code","3a5a225d":"code","8ca1a785":"markdown","016d7372":"markdown","1016bfbd":"markdown","8b31de3e":"markdown","048b5901":"markdown","b75e2473":"markdown","83266ca1":"markdown","25fe7464":"markdown","61426bc9":"markdown","67c1d55e":"markdown"},"source":{"d91da728":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","672f657f":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","01944e4c":"df = pd.read_csv('..\/input\/streeteasy-dataset\/manhattan.csv')\ndf.head()","37a6eb85":"df.isnull().sum()","0398acb7":"# summarize the data\ndf.describe()","b9d2e2ac":"x = df[['bedrooms', 'bathrooms', 'size_sqft', 'min_to_subway', 'floor', 'building_age_yrs', 'no_fee', 'has_roofdeck', 'has_washer_dryer', 'has_doorman', 'has_elevator', 'has_dishwasher', 'has_patio', 'has_gym']]\ny = df[['rent']]","27a7b049":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, train_size= 0.8, random_state=42)","f20e95fb":"print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)","132f0e35":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()","71ff4115":"# find the coefficient and the intercept\nmodel.fit(x_train, y_train)\n\n# predict y-values from x_test\ny_predict = model.predict(x_test)","f1188bd2":"john_appartment = [[1, 1, 620, 16, 1, 98, 1, 0, 1, 0, 0, 1, 1, 0]]\nyy = model.predict(john_appartment)\nprint(yy)","dcd7fcb2":"plt.scatter(y_test,y_predict,alpha=0.4)\nplt.xlabel('t_test')\nplt.ylabel('Y_predict')\nplt.title('Graph')\nplt.show()","4119f228":"print('Train score:')\nprint(model.score(x_train, y_train))\nprint('Test score:')\nprint(model.score(x_test, y_test))","e2a0cfde":"residuals = y_predict - y_test\n \nplt.scatter(y_predict, residuals, alpha=0.4)\nplt.title('Residual Analysis')\n \nplt.show()","3a5a225d":"plt.scatter(y_test, y_predict)\nplt.plot(range(20000), range(20000))\n\nplt.xlabel(\"Prices: $Y_i$\")\nplt.ylabel(\"Predicted prices: $\\hat{Y}_i$\")\nplt.title(\"Actual Rent vs Predicted Rent\")\n\nplt.show()","8ca1a785":"### Visualizing Results with Matplotlib\n\nCreate a 2D scatter plot using `y_test` and `y_predict`.","016d7372":"### Let\u2019s take a look at the first few rows","1016bfbd":"### Let's test it","8b31de3e":"### Multiple Linear Regression: Scikit-Learn\n\nNow we have the training set and the test set, let\u2019s use scikit-learn to build the linear regression model.","048b5901":"### Graph a scatter plot of residuals vs. predicted_y values:\nwe can use **Residual Analysis**  to evaluate the accuracy of our multiple linear regression model.","b75e2473":"**In the end** We can Remove some of the features that don\u2019t have strong correlations and see if our scores improved!","83266ca1":"### Split dataset into training set and test sets\n\nUse scikit-learn\u2019s train_test_split() method to split x into 80% training set and 20%.","25fe7464":"### Let\u2019s take a look at the shapes of `x_train`, `x_test`, `y_train`, and `y_test`","61426bc9":"### Check missing values","67c1d55e":"### Evaluating the Model's Accuracy"}}