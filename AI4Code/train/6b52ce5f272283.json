{"cell_type":{"321a305b":"code","df636d4d":"code","de1eb833":"code","f008a993":"code","81013c82":"code","9a48ffda":"code","9432cd79":"code","2bf2bae8":"code","6b52c0cd":"code","e4662e7b":"code","1c80c4b6":"code","40ed011e":"code","6034efdd":"code","5d4de69f":"code","b3c81b17":"code","b6be3ee8":"markdown","f70ac3f7":"markdown","e7f8adbc":"markdown","4d48e74c":"markdown","9f6b06e7":"markdown","fe31742f":"markdown","436cf32a":"markdown","aca449c4":"markdown","0156e232":"markdown","9aaa9f5f":"markdown","24be9691":"markdown","4be50362":"markdown","dbb67ccf":"markdown","0c30ecdc":"markdown"},"source":{"321a305b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","df636d4d":"def Multiplication_Table(num):\n    n=(int(input(\"Enter the range for the multiplication table \")))\n    print(\"Multiplication Table for {}\".format(num))\n    for i in range(1,n+1):\n        print(\"{} * {} =\".format(num,i),num*i)\nMultiplication_Table(3)","de1eb833":"def isprime(n):\n    flag=0\n    # Check for prime number\n    for i in range(2,n):\n        if(n%i==0):\n            flag=1\n            break\n    if flag==1:\n        return False\n    else:\n        return True\n    \n# To print Prime Numbers\n#Appending the prime numbers in list\nprime_numbers=[]\nprint(\"Prime Numbers are:\")\nn=(int(input(\"enter the range to print prime numbers\")))\nfor i in range(2,n):\n    if isprime(i):\n        prime_numbers.append(i)\nprint(prime_numbers)\n#To print Twin prime Numbers\nprint(\"\\n\\n Twin prime between range 1 to {}\".format(n))\nfor i in range(len(prime_numbers)-1):\n    if (prime_numbers[i+1]-prime_numbers[i]==2):\n        print(prime_numbers[i],prime_numbers[i+1])\n            \n    ","f008a993":"def prime_factor(n):\n    pf=[]\n    while n%2==0:\n        pf.append(2)\n        n=n\/2\n    for i in range(3,int(n),2):\n        while n%i==0:\n            pf.append(i)\n            n=n\/i\n    if(n>2):\n        pf.append(int(n))\n    print(pf)\n\nn=(int(input(\"Enter the number to print prime factor\\n\")))\nprime_factor(n)","81013c82":"def factorial(z):\n    fact=1\n    for i in range(1,z+1):\n        fact *=i\n    return fact\n# Number of permutations of n objects taken r at a time: p(n, r) = n! \/ (n-r)!. \ndef permutation(n,r):\n    per=factorial(n)\/factorial(n-r)\n    return per\n# Number of combinations of n objects taken r at a time is: c(n, r) = n! \/ (r!*(n-r)!) = p(n,r) \/ r!\ndef combination(n,r):\n    com=permutation(n,r)\/factorial(r)\n    return com\nprint(\"Permutaion and Combination\\n\")\nn=(int(input(\"enter the value of n\\n\")))\nr=(int(input(\"enter the value of r\\n\")))\nprint(\"The Permutaion of {} and {} is\".format(n,r))\nprint(permutation(n,r))\nprint(\"The Combination of {} and {} is\".format(n,r))\nprint(combination(n,r))","9a48ffda":"def convert_dec_to_Binary(n):\n    b=[]\n    while(n>=1):\n        r=n%2\n        n=n\/2\n        b.append(int(r))\n    n=-1\n    b.reverse()\n    print(\"After Conversion from Decimal to Binary\")\n    for i in b:\n        print(i,end='')\n    \n        \nn=(int(input(\"Enter the number\\n\")))\nconvert_dec_to_Binary(n)","9432cd79":"import math\ndef cubesum(temp):\n    s=0\n    while temp!=0:\n        rem=temp%10\n        s +=int(math.pow(rem,3))\n        temp=int(temp\/10)\n        \n    return s\n\n\ndef isArmstrong():\n    flag=0\n    num=(int(input(\"Enter the Number to find Armstrong number\\n\")))\n    if(num==cubesum(num)):\n        flag=1 \n    else:\n        flag=0\n    return flag\n\ndef PrintArmstrong():\n    if(isArmstrong()==1):\n        print(\"It is an Armstrong Number\")\n    else:\n        print(\"It is not an Armstrong Number\")\n        \nPrintArmstrong()\n    ","2bf2bae8":"def prodDigits(temp):\n    s=1\n    if temp==0:\n        return 0\n    while temp>1:\n        rem=temp%10\n        s *=rem\n        temp=int(temp\/10)\n        \n    return s\n\nnum=int(input(\"Enter the Number \\n\"))\nprint(\"The product of digits of {} is\".format(num),prodDigits(num))","6b52c0cd":"def prodDigits(temp):\n    s=1\n    if temp==0:\n        return 0\n    while temp>1:\n        rem=temp%10\n        s *=rem\n        temp=int(temp\/10)\n        \n    return s\n\ndef MDR():\n    num=int(input(\"Enter the Number to find Multiplication Digit Root\\n\"))\n    temp1=num\n    mdr=1\n    while temp1!=0:\n        mdr=prodDigits(temp1)\n        if mdr<10:\n            print(\"Multiplication Digit Root of {} is\".format(num),mdr)\n            break\n        \n        temp1=mdr\n    \ndef MPersistence():\n    num=int(input(\"Enter the Number to find Multiplicative Persistance\\n\"))\n    temp1=[]\n    while num not in temp1:\n        temp1.append(num)\n        num=prodDigits(num)\n    print(\"Multiplicative Persistence of {} is\".format(temp1[0]),len(temp1)-1)\n        \nMDR()\nprint(\"\")\nMPersistence()","e4662e7b":"def sumPdivisors(num):\n    s=0\n    for i in range(1,num):\n        if num%i==0:\n            s+=i\n    return s\n    \n    \nnum=int(input(\"Enter The Number \\n\"))\n\nprint(\"The proper Divisors of {} is\".format(num),sumPdivisors(num))\n        ","1c80c4b6":"def perfectNum():\n    n=int(input(\"Enter The Range to find perfect Numbers \\n\"))\n    print(\"The perfect numbers between 1 to {} is\".format(n))\n    for i in range(1,n+1):\n        if(i ==sumPdivisors(i)):\n            print(i)\n\nperfectNum()\n    ","40ed011e":"def Amicable():\n    n=int(input(\"Enter The Range to find Amicable Numbers.The first Amicable number pair is (220,284).So plese enter the range starting from 300 \\n\"))\n    print(\"The Amicable Numbers between 1 to {} is\".format(n))\n    for i in range(1,n+1):\n        for j in range(i+1,n+1):\n            if(sumPdivisors(i)==j and sumPdivisors(j)==i):\n                print(i,j)             \nAmicable()       ","6034efdd":"def find_odd_number(num):\n    if num%2!=0:\n        return num\n    \nlst=[]\nn=(int(input(\"Enter the range of list\\n\")))\nfor i in range(1,n+1):\n    lst.append(i)\nprint(\"The elements in list are\\n\",lst)\nodd_num=list(filter(find_odd_number,lst))\nprint(\"The odd Number in List are\\n\",odd_num)","5d4de69f":"#Given List\nlst=[]\nn=(int(input(\"Enter the range of list\\n\")))\nfor i in range(1,n+1):\n    lst.append(i)\nprint(\"The elements in list are\\n\",lst)\n\ndef Cube_of_Ele(num):\n    return num**3\n\nCube = list(map(Cube_of_Ele,lst))\nprint('The cube of elements in a list are\\n',Cube)\n","b3c81b17":"#Given List\nlst=[]\nn=(int(input(\"Enter the range of list\\n\")))\nfor i in range(1,n+1):\n    lst.append(i)\nprint(\"The elements in list are\\n\",lst)\n\ndef even_num(num):\n    if num%2==0:\n        return num\n\ndef cube(num):\n    return num**3\n\neven_number=list(filter(even_num,lst))\ncube_of_even_number=list(map(cube,even_number))\nprint(\"The cube of even number in a list are\\n\",cube_of_even_number)\n\n\n","b6be3ee8":"# function that converts a decimal number to binary number","f70ac3f7":"# Write a function cubesum() that accepts an integer and returns the sum of the cubes of\n# individual digits of that number. Use this function to make functions PrintArmstrong() and\n# isArmstrong() to print Armstrong numbers and to find whether is an Armstrong number.","e7f8adbc":"# A number is called perfect if the sum of proper divisors of that number is equal to the number. \n# For example 28 is perfect number, since 1+2+4+7+14=28. \n# Write a program to print all the perfect numbers in a given range","4d48e74c":"# function sumPdivisors() that finds the sum of proper divisors of a number. Proper\n# divisors of a number are those numbers by which the number is divisible, except the number itself. \n# For example proper divisors of 36 are 1, 2, 3, 4, 6, 9,12,18","9f6b06e7":"# Write a program which can map() and filter() to make a list whose elements are cube of even number in a given list","fe31742f":"# Permutation and Combination of two numbers","436cf32a":"# Program to print twin prime number \n# If two consecutive odd numbers are both prime then they are known as twin primes","aca449c4":"# Input a number and print multiplication of the number","0156e232":"# Using the function prodDigits() of previous exercise write functions MDR() and\n# MPersistence() that input a number and return its multiplicative digital root and\n# Multiplicative persistence respectively","9aaa9f5f":"# Print the prime factor of a number","24be9691":"# Two different numbers are called amicable numbers if the sum of the proper divisors of each is equal to the other number.\n# For example 220 and 284 are amicable numbers\n# Sum of proper divisors of 220 = 1+2+4+5+10+11+20+22+44+55+110 = 284\n# Sum of proper divisors of 284 = 1+2+4+71+142 = 220\n# Write a function to print pairs of amicable numbers in a range","4be50362":"# Write a program which can map() to make a list whose elements are cube of elements in a given list","dbb67ccf":"# Write a program which can filter odd numbers in a list by using filter function","0c30ecdc":"# function prodDigits() that inputs a number and returns the product of digits of that number."}}