{"cell_type":{"ce33fc4d":"code","532f7efd":"code","9e50d433":"code","f592c035":"code","0c646504":"code","4fbd3e6f":"code","2a4216a1":"code","eb679c8d":"code","78835dfc":"code","aa71d04a":"code","e50f7e0b":"code","64e4f9e5":"code","eb4b7d44":"code","7ecbbf1c":"code","52d40e86":"code","970c6199":"code","f3879e0e":"code","8240b612":"code","d31fd7e7":"code","de9b1d03":"code","3f6ee761":"code","d08f05ff":"code","39afa366":"code","6377d88c":"code","531f10f1":"markdown","ef96c421":"markdown","10a90741":"markdown","64271521":"markdown","8aebea4f":"markdown","a3f1543c":"markdown","7926625d":"markdown","9e89384c":"markdown","7fbeb30b":"markdown","3ad797d4":"markdown","dd710387":"markdown","3b6d4914":"markdown","d1c591c4":"markdown","af21a368":"markdown","aa82fa03":"markdown"},"source":{"ce33fc4d":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport os\nimport glob\nimport cv2","532f7efd":"print(os.listdir(\"..\/input\"))","9e50d433":"train_file_path = '..\/input\/landmark-retrieval-2020\/train.csv'","f592c035":"df_train = pd.read_csv(train_file_path)","0c646504":"print(\"Training data size:\", df_train.shape)\nprint(\"Training data columns:\",df_train.columns)\nprint(df_train.info())","4fbd3e6f":"df_train.head(3)\n","2a4216a1":"df_train.sample(3).sort_index()","eb679c8d":"df_train.tail(3)","78835dfc":"select = [4444, 10000, 14005]\ndf_train.iloc[select,:]","aa71d04a":"print('data is None.')\nmissing = df_train.isnull().sum()\npercent = missing\/df_train.count()\nmissing_train_data = pd.concat([missing,percent],\n                              axis=1, keys=['Missing','Percent'])\nmissing_train_data.head()","e50f7e0b":"df_train['landmark_id'].describe()","64e4f9e5":"sns.set()\nprint(df_train.nunique())\ndf_train['landmark_id'].value_counts().hist()","eb4b7d44":"sns.set()\nplt.title('Landmark_id Distribution')\nsns.distplot(df_train['landmark_id'])","7ecbbf1c":"sns.set()\nplt.title('Training set: number of images per class(line plot)')\nsns.set_color_codes(\"pastel\")\nlandmarks_fold = pd.DataFrame(df_train['landmark_id'].value_counts())\nlandmarks_fold.reset_index(inplace=True)\nlandmarks_fold.columns = ['landmark_id','count']\nax = landmarks_fold['count'].plot(logy=True, grid=True)\nlocs,labels = plt.xticks()\nplt.setp(labels,rotation=30)\nax.set(xlabel=\"Landmarks\",ylabel=\"Number of images\")","52d40e86":"sns.set()\nlandmarks_fold_sorted = pd.DataFrame(df_train['landmark_id'].value_counts())\nlandmarks_fold_sorted.reset_index(inplace=True)\nlandmarks_fold_sorted.columns = ['landmark_id','count']\nlandmarks_fold_sorted = landmarks_fold_sorted.sort_values('landmark_id')\nax = landmarks_fold_sorted.plot.scatter(\\\n     x='landmark_id',y='count',\n     title='Training set: number of images per class(statter plot)')\nlocs, labels = plt.xticks()\nplt.setp(labels, rotation=30)\nax.set(xlabel=\"Landmarks\", ylabel=\"Number of images\")","970c6199":"sns.set()\nax = landmarks_fold_sorted.boxplot(column='count')\nax.set_yscale('log')","f3879e0e":"sns.set()\nres = stats.probplot(df_train['landmark_id'], plot=plt)","8240b612":"threshold = [2, 3, 5, 10, 20, 50, 100]\nfor num in threshold:    \n    print(\"Number of classes under {}: {}\/{} \"\n          .format(num, (df_train['landmark_id'].value_counts() < num).sum(), \n                  len(df_train['landmark_id'].unique()))\n          )","d31fd7e7":"temp = pd.DataFrame(df_train.landmark_id.value_counts().head(10))\ntemp.reset_index(inplace=True)\ntemp.columns = ['landmark_id', 'count']\ntemp","de9b1d03":"sns.set()\nplt.title('Most frequent landmarks')\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"landmark_id\", y=\"count\", data=temp,\n           label=\"count\")\nlocs, labels = plt.xticks()\nplt.setp(labels, rotation=45)\nplt.show()","3f6ee761":"temp = pd.DataFrame(df_train.landmark_id.value_counts().tail(10))\ntemp.reset_index(inplace=True)\ntemp.columns = ['landmark_id', 'count']\ntemp","d08f05ff":"sns.set()\n# plt.figure(figsize=(9, 8))\nplt.title('Least frequent landmarks')\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"landmark_id\", y=\"count\", data=temp,\n            label=\"Count\")\nlocs, labels = plt.xticks()\nplt.setp(labels, rotation=45)\nplt.show()","39afa366":"test_list = glob.glob('..\/input\/landmark-retrieval-2020\/test\/*\/*\/*\/*')\nindex_list = glob.glob('..\/input\/landmark-retrieval-2020\/index\/*\/*\/*\/*')","6377d88c":"plt.rcParams[\"axes.grid\"] = False\nf, axarr = plt.subplots(4, 3, figsize=(24, 22))\n\ncurr_row = 0\nfor i in range(12):\n    example = cv2.imread(test_list[i])\n    example = example[:,:,::-1]\n    \n    col = i%4\n    axarr[col, curr_row].imshow(example)\n    if col == 3:\n        curr_row += 1\n","531f10f1":"Training set: number of images per class(scatter plot)","ef96c421":"Most frequent landmark_ids","10a90741":"Explore the specific element","64271521":"Least frequent landmark_ids","8aebea4f":"Display examples\n","a3f1543c":"Visualize outliers, min\/max or quantiles of the landmarks count\n","7926625d":"Data tail","9e89384c":"Data Sample","7fbeb30b":"Overall Basic Information","3ad797d4":"Check if the data is None","dd710387":"**Test and index data**\n\n\nThe query images are listed in the test\/ folder, while the \"index\" images from which you are retrieving are listed in index\/.\n\nEach image has a unique id. Since there are a large number of images, each image is placed within three subfolders according to the first three characters of the image id (i.e. image abcdef.jpg is placed in a\/b\/c\/abcdef.jpg).\n\n0-f in 0-f in 0-f","3b6d4914":"Basic EDA for  Google Landmark Retrieval 2020. \nHelp taken from kernels\n\nhttps:\/\/www.kaggle.com\/huangxiaoquan\/google-landmarks-v2-exploratory-data-analysis-eda\nhttps:\/\/www.kaggle.com\/seriousran\/google-landmark-retrieval-2020-eda\n\nPlease upvote if you like","d1c591c4":"Landmark_id distribuition","af21a368":"Object containing counts of unique values","aa82fa03":"Specific Basic Information"}}