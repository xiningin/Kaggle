{"cell_type":{"d0420bd6":"code","3d17ac6d":"code","23a76ac4":"code","1a3099ca":"code","338c5ed9":"code","7a0bcfce":"code","aa23b32e":"code","fa75475c":"code","15335f30":"code","12a05f62":"code","dec2d0a7":"code","f5003555":"code","47160bd2":"code","d9b9cf28":"code","ed9cb357":"code","a1bc3e3e":"code","5c9711a2":"code","0c1cf129":"code","dcc0edbe":"code","2b7309a1":"code","8dfc4813":"code","6a4d5ea0":"code","4631e359":"code","fb4323a7":"code","1ed32b95":"code","dad2f1c8":"code","160f01d4":"code","3ebee672":"code","e58dc815":"code","331f35f1":"code","3ce195db":"code","1a349465":"code","0eb631db":"markdown","be2a7e73":"markdown","b504ad4c":"markdown","e463ef5c":"markdown","2ebcb75d":"markdown","2f7ec5a8":"markdown","3442139a":"markdown","689c5c4d":"markdown","3b8952b4":"markdown","ea3de546":"markdown","61ced9ee":"markdown","4fd0feae":"markdown","c91584f7":"markdown","992ff4df":"markdown","0c9c3947":"markdown","d591f114":"markdown","c4f98a8f":"markdown","10ca983f":"markdown","2af589b6":"markdown","0cc99e30":"markdown","c53aa1a0":"markdown","e0f35ae0":"markdown"},"source":{"d0420bd6":"from fastai.tabular.all import * \nfrom fastai.test_utils import show_install\n\nshow_install()","3d17ac6d":"np.random.seed(41)\ntorch.manual_seed(41)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","23a76ac4":"path = Path('..\/input\/tabular-playground-series-jan-2022')\nnordic_path = Path('..\/input\/festivities-in-finland-norway-sweden-tsp-0122')\nPath.BASE_PATH = path\npath.ls(), nordic_path.ls()","1a3099ca":"train_df = pd.read_csv(os.path.join(path, 'train.csv'))\ntest_df = pd.read_csv(os.path.join(path, 'test.csv'))\nsample_submission = pd.read_csv(os.path.join(path, 'sample_submission.csv'))\nnordic_holidays = pd.read_csv(os.path.join(nordic_path, 'nordic_holidays.csv'),\n                              index_col=0,\n                              header=0,\n                              names=['holiday_date', 'holiday', 'holiday_country'])\n        \ntrain_df.isna().sum().sum(), test_df.isna().sum().sum(), train_df.isnull().sum().sum(), test_df.isnull().sum().sum()","338c5ed9":"train_df.head()","7a0bcfce":"dep_var = ['num_sold']\ntrain_df[dep_var] = np.log(train_df[dep_var])\nmax_dep_value = np.max(train_df[dep_var].max()) * 1.05\nmin_dep_value = np.min(train_df[dep_var].min()) * 0.95\ndep_value_range = torch.tensor([min_dep_value, max_dep_value], device=device)\ndep_value_range, dep_var","aa23b32e":"np.unique(train_df['country'], return_counts=True), np.unique(train_df['store'], return_counts=True), np.unique(train_df['product'], return_counts=True)","fa75475c":"np.unique(test_df['country'], return_counts=True), np.unique(test_df['store'], return_counts=True), np.unique(test_df['product'], return_counts=True)","15335f30":"train_df['date'].min(), train_df['date'].max(), test_df['date'].min(), test_df['date'].max(), len(test_df), len(train_df)- len(test_df)","12a05f62":"cut = train_df['date'][(train_df['date'] == train_df['date'][len(test_df)])].index.max()\ntrain_idx = range(len(train_df)-cut-1)\nvalid_idx = range(len(train_df)-cut, len(train_df)-1)\nsplits = (list(train_idx),list(valid_idx))\ntrain_idx, valid_idx","dec2d0a7":"add_nordic_holidays=True","f5003555":"nordic_holidays.head()","47160bd2":"def get_elapsed(df, fld, pre):\n    day1 = np.timedelta64(1, 'D')\n    last_date = np.datetime64()\n    res = []\n\n    for c,c_h,h_d,d in zip(df.country.values, df.holiday_country.values, df[fld].values, df.date.values):\n        if c == c_h :\n            last_date = h_d\n        res.append(((d-last_date).astype('timedelta64[D]') \/ day1))\n    \n    df[pre+fld] = res\n    return df","d9b9cf28":"def get_distance_to_holiday_date(df, field='holiday_date'):\n    \n    \n    columns = ['row_id', 'date', 'country','holiday', 'store', 'holiday_date', 'holiday_country']\n    \n    dist_df = df[columns].copy()\n    dist_df = dist_df.sort_values(['store', 'date'])\n    dist_df = get_elapsed(dist_df, field, 'After_')\n    \n    dist_df = dist_df.sort_values(['store', 'date'], ascending=[True, False])\n    dist_df = get_elapsed(dist_df, field, 'Before_')\n    \n    dist_df['After_holiday_date'] = dist_df['After_holiday_date'].fillna(0).astype(int)\n    dist_df['Before_holiday_date'] = dist_df['Before_holiday_date'].fillna(0).astype(int)\n    \n    dist_df.drop(['country', 'holiday_date', 'holiday', 'holiday_country'],  axis=1,  inplace=True)\n    return dist_df","ed9cb357":"def add_nordic_holidays(df):\n    df = pd.merge(df, nordic_holidays, left_on=['date', 'country'], right_on=['holiday_date', 'holiday_country'], how='left')\n    \n    # calculate the distance before and after the holidays\n  #  dist_df = get_distance_to_holiday_date(df)\n   # df = pd.merge(df, dist_df, left_on=['row_id', 'date', 'store'], right_on=['row_id', 'date', 'store'], how='left')\n    \n    df['holiday'] = df['holiday'].astype('category')\n    \n    # the values of 'holiday_date' aren't needed anymore, let's drop the column\n    df.drop(['holiday_date', 'holiday_country'], axis=1, inplace=True)\n    return df","a1bc3e3e":"if add_nordic_holidays:\n    print(\"We will add info about the nordic holidays to the data frames\")\n    \n    train_df = add_nordic_holidays(train_df)\n    test_df = add_nordic_holidays(test_df)\n    \n    print(\"Done.\")\nelse:\n    print(\"No holiday infos added\")\n    \n# set the index \ntrain_df.set_index('row_id', inplace=True)\ntest_df.set_index('row_id', inplace=True)","5c9711a2":"train_df = add_datepart(train_df, 'date', drop=True)\ntest_df = add_datepart(test_df, 'date', drop=True)","0c1cf129":"train_df.head()","dcc0edbe":"cont_vars, cat_vars = cont_cat_split(train_df, dep_var= dep_var,  max_card=12)\ncat_vars, cont_vars","2b7309a1":"len(cat_vars), len(cont_vars)","8dfc4813":"procs=[Categorify, FillMissing, Normalize]\nto_train = TabularPandas(train_df, \n                         procs=procs, \n                         cat_names=cat_vars, \n                         cont_names=cont_vars, \n                         splits=splits, \n                         device=device,\n                         y_names=dep_var,\n                         y_block=RegressionBlock())","6a4d5ea0":"dls = to_train.dataloaders(bs=128)\nlen(dls.train),len(dls.valid), type(dls.train), dls.train.device","4631e359":"def smape(y_pred, target):\n    return torch.mean(2*torch.abs(y_pred - target)\/(torch.abs(target) + torch.abs(y_pred)))","fb4323a7":"class MyLoss(nn.Module):\n    def __init__(self, diff_weight=0.5):\n        super().__init__()\n        self.diff_weight = diff_weight\n        \n    def forward(self,y_pred, target):\n        num_loss =  (1-self.diff_weight) * smape(y_pred[:,0], target[:,0])\n        diff_loss = self.diff_weight * smape(y_pred[:,1], target[:,1])\n        return num_loss + diff_loss    ","1ed32b95":"my_config = tabular_config(ps=.15, embed_p=0.15, use_bn=True, y_range=dep_value_range)\n\nlearn = tabular_learner(dls, \n                        n_out = dls.c,\n                        config = my_config,\n                        layers = [64,256,1024,1024,256,64,16],\n                        metrics = [smape, exp_rmspe]) \n                       \nlearn.summary()","dad2f1c8":"learn.lr_find()","160f01d4":"learn.fit_one_cycle(300, 3e-3, cbs=SaveModelCallback(fname='kaggle_tps_jan_2022', with_opt=True))","3ebee672":"learn.show_results(shuffle=False)","e58dc815":"learn.load('kaggle_tps_jan_2022')","331f35f1":"dlt = learn.dls.test_dl(test_df, bs=64) \nnn_preds, _ = learn.get_preds(dl=dlt) \nnn_preds.min(), nn_preds.max()","3ce195db":"sample_submission[\"num_sold\"] = np.exp(nn_preds)\nsample_submission.to_csv(\"submission.csv\", index=False)\nsample_submission.head()","1a349465":"!ls -la","0eb631db":"Info about the nordic holidays are published in this dataset: https:\/\/www.kaggle.com\/lucamassaron\/festivities-in-finland-norway-sweden-tsp-0122\nThanks to the author!","be2a7e73":"Let's find out how the data in the object columns 'country', 'store' and 'product' are distributed. The good news is that they are all equal distributed!","b504ad4c":"That's it for the begining..","e463ef5c":"Let's try add more features about the nordic holidays to the data frame. Can we improve the overall score with these additional datas? I will define a flag to control this feature. ","2ebcb75d":"The provided data contain a date value and i will see, whether the dates in the training and in the test data are overlapping. They don't!","2f7ec5a8":"The following function calculates for each row in df the time distance between the current date and the last occurred holiday date and adds these values to the passed dataframe. The new column name is created by field and prefix name.","3442139a":"Let's display our data.","689c5c4d":"At least i create a learner pasing the dataloader into it. The default settings are two hidden layers with 200 and 100 elements. But i use more hidden layers to increase the number of trainable parameters, as you can see in the reported summary. Increasing the number of parameters in the neural network will improve the accuarcy and score, hopefully.","3b8952b4":"The data set is located in the following directory","ea3de546":"The next step is to create a data loader. The Fastai library offers a powerful helper called 'TabularPandas'. It needs the data frame, list of the category and continous variables, the depened variable and a splitter. The splitter divides the data set into two parts: one for the training and one for the validation and for internal optimization step in each epoch. The batch size is set to 64.\n","61ced9ee":"We must define the SMAPE function based on Wikipedia. The function isn't part of pytorch or fastai currently.","4fd0feae":"This notebook is a quick demonstration, who to use the Fastai v2 library for a Kaggle tabular competition. Fastai v2 is based on pytorch and allows you, to build a decent machine learning application. For more information please visit the Fastai documentation: https:\/\/docs.fast.ai\/. I will link to \"Chapter 9, Tabular Modelling Deep Dive\" and the notebook \"09_tabular.ipynb\"","c91584f7":"# The January 2022 competition with Fastai v2","992ff4df":"Let's see the modified dataframe and the new added values.","0c9c3947":"The column 'num_sold' is our depended variable. For numerical reasons the logarithmic value is usefull. The value range of the depended variables is needed to build the tabular learner later on. Setting the range will add a sigmoid function at the last output. ","d591f114":"To process time series as in this competion, it's a clever way to extract more metadata from a date value like number of week, number of day in current month or year and so forth. The fastai library offers the function 'add_datepart' to execute this extraction. You specify the column, you want to extract. The parameter drop specifies, whether this column is droped or not, which is the default. I will do so","c4f98a8f":"Create a new data frame with the time difference before and after the last occurred holiday.","10ca983f":"\/home\/egbert\/tmp\/submission_best.csvI will use a maximum learning rate of 3e-3. Starting the learning process is quite easy, i will run for 250 epochs, we have small data set and we can process this data in a few seconds per epoch. I will save the model with the best, with the lowest validation lost value. The Fastai library offers the SaveModelCallback callback. You must specify the file name only. The option with_opt=True stores the values of the optimizer also. You will find the new file under models\/kaggle_tps_jan_2022.pth","2af589b6":"For the training process of the used neural network, i must split the values in the data frame train_df into a training \nand a validation part. But how should i select them? The task of this competion is to predict values, \nwhich are located in future. I will use the same amount of validation data as the amount of test data i have.\nTherefore i will use values with the row index (0-19727) for the training data and rows (19728, 26297) for the \nvalidation data. ","0cc99e30":"To calculate the predictions for this competition, i will load the best model from the training process. Best model means the model where the validation loss has the lowest value.","c53aa1a0":"I use Pandas to import them and to verify, where null values are there or some values are missing. The result shows, that the data set is complete, so that no additional data completion is needed. That's a goog result!","e0f35ae0":"I need a list of the column names, which are candidates for category variables and which are no candidates, also called continous variables. The Fastai library offers the function 'cont_cat_split' to do this for us. "}}