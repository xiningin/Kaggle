{"cell_type":{"d1ca047f":"code","68c56952":"code","0fa33049":"code","af74d8c0":"code","7b557b32":"code","01ac5776":"code","5bf2d463":"markdown"},"source":{"d1ca047f":"# . . .\n# . . .\n# . . .\n# CREATE GRID\ngrid = [\n    [ \".\", \".\", \".\", ],\n    [ \".\", \".\", \".\", ],\n    [ \".\", \".\", \".\", ],    \n]\n\n# INIT TOKENS\nrow_index = 1\ncolumn_index = 1\n\ngrid[row_index][column_index] = \"X\"\n\n# DISPLAY GRID\nfor row in grid:\n    for column in row:\n        print(column, end=\" \")\n    print(\"\")","68c56952":"def get_grid():\n    return [\n        [ \".\", \".\", \".\", ],\n        [ \".\", \".\", \".\", ],\n        [ \".\", \".\", \".\", ],    \n    ]\n\ndef place_token_on_grid(grid, row_index, column_index, token):\n    grid[row_index][column_index] = token\n\ndef display_grid(grid):\n    # DISPLAY GRID\n    for row in grid:\n        for column in row:\n            print(column, end=\" \")\n        print(\"\")\n            \ndef initialize_game():\n    # INIT TOKENS\n    grid = get_grid()\n    place_token(grid, 1,1, \"X\")\n    display_grid(grid)\n\ninitialize()","0fa33049":"class Grid:\n    \n    def __init__(self):\n        self.make_grid()\n        \n    def make_grid(self):\n        self.board = [\n            [ \".\", \".\", \".\", ],\n            [ \".\", \".\", \".\", ],\n            [ \".\", \".\", \".\", ],    \n        ]\n\n    def place(self, row_index, column_index, token):\n        self.board[row_index][column_index] = token\n\n    def display(self):\n        for row in self.board:\n            for column in row:\n                print(column, end=\" \")\n            print(\"\")\n            \n# INIT TOKENS\ngrid = Grid()\ngrid.place(1,1, \"X\")\ngrid.display()\n","af74d8c0":"class Player:\n    def __init__(self, symbol, name = \"\"):\n        self.token = symbol\n        self.name = name","7b557b32":"class TicTacToe:\n    \n    def __init__(self):\n        self.winner = None\n        self.grid = Grid()\n        self.players = [\n            Player(\"X\"),\n            Player(\"O\")\n        ]\n        self.turn_index = 0\n    \n    def play(self):\n        while(\n#                 self.grid.hasSpaces() \n#                 and \n                self.winner == None\n            ):\n            self.grid.display()\n            symbol = self.players[self.turn_index].token\n            print(f\"PLayer {symbol} its your turn.\")\n            print(\"Row? (0, 1, or 2)\")\n            row = int(input())\n            print(\"Column? (0, 1, or 2)\")\n            column = int(input())\n            self.grid.place(row, column,symbol)\n            \n            # check to see if player has won\n            \n            #move to next players turn\n            next_turn_index = self.turn_index + 1\n            if next_turn_index >= len(self.players):\n                next_turn_index = 0\n            self.turn_index = next_turn_index\n            \n\ngame = TicTacToe()\ngame.play()","01ac5776":"# #  Class\/Objects,           Attibutes\/Property, Functions\/Methods\n# #  NOUNS(Person,Place,Thing)   ADJECTIVES          VERB\/ACTION\n\n# Pharmacy\n#     Perscriptions\n#     Fill\n    \n# Deli\n#     Make(Sandwich)\n    \n\n# Kitchen\n#     Refrigerator\n#         COlor = Beige\n#         MakeIce\n#         setTemp(t)\n\n# Bike\n#     Color=Red\n#     ChangeGear(n)\n#     Peddle()\n    \n# Dog\n#     kind=\"Poodle\"\n#     Walk()\n#     Nap()\n\n# Road\n#     signs\n#     lanes=2\n#     Accident()\n#     CountCar()\n\n# FootBall\n#     color=blue\n#     Toss()\n\n# AirPlane\n#     Heading\n#     Altitude\n#     AirSpeed\n#     lift\n#     weight\n#     drag\n    \n#     Fly()\n#     Accel()\n#     Decel()\n#     Warn()\n    \n# Fan\n#     speed\n#     change_speed(n)\n    \n# Farm\n#     products\n#     fields\n#     livestock\n#     water()\n#     sell()\n\n# Laptop\n#         weight = 3lbs\n#         compute()\n#         display()\n    \n","5bf2d463":" TIC TAC TOE\n \n A **grid** and X and O **token**\n \n win with three in a Row\n \n Two **Players**\n \n Take **Turns**\n \n X goes first\n \n **grid** size 3 x 3\n"}}