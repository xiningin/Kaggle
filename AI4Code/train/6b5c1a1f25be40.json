{"cell_type":{"246243ae":"code","57ba8463":"code","2bbe7ccd":"code","e834e5a3":"code","3233e945":"code","f56ffffe":"code","b967d66a":"code","f899b8fd":"code","a7f6ae4d":"code","99b92e6c":"markdown","c58e7fa6":"markdown","cd8bfd10":"markdown","a3961792":"markdown","eecacbf0":"markdown","6f31ef75":"markdown","673171e8":"markdown","78324d58":"markdown","d961add4":"markdown"},"source":{"246243ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","57ba8463":"#This will help us keep track of the submissions\nsub_name_list = ['dummy', 'shortlikeafox']\nscore_list = [] #We can keep the scores here\n\n#Put the submissions in dataframe form and add to a list.\nsub_list = []\ntemp_df = pd.read_csv(\"\/kaggle\/input\/dummykattarvsigesubmission\/task-dummy.csv\")\nsub_list.append(temp_df)\ntemp_df = pd.read_csv(\"\/kaggle\/input\/actual-fight-night-kattar-vs-ige-submission\/fight-night-kattar-ige-submission.csv\")\nsub_list.append(temp_df)\n","2bbe7ccd":"results_df = pd.read_csv(\"\/kaggle\/input\/ultimate-ufc-dataset\/most-recent-event.csv\")\n\n#We only need the fighter names, odds, and winner\n\nresults_df = results_df[['R_fighter', 'B_fighter', 'R_ev', 'B_ev', 'Winner']]\ndisplay(results_df)","e834e5a3":"#Returns a specific bet EV based on winning_ev and probability.\ndef get_bet_ev(ev, prob):\n    \n    return(ev*prob - (1-prob)*100)","3233e945":"#Used to determine the bet of each fight.  We will use probabilities and the ev to \n#determine profitable bets\ndef get_bet(R_prob, B_prob, R_ev, B_ev):\n    red_ev = get_bet_ev(R_ev, R_prob)\n    blue_ev = get_bet_ev(B_ev, B_prob)\n    if red_ev > 0:\n        return('Red')\n    if blue_ev > 0:\n        return('Blue')\n    \n    return 'None'","f56ffffe":"def get_profit(winner, bet, R_ev, B_ev):\n    if bet == 'None':\n        return 0\n    if (bet == 'Blue' and winner == 'Blue'):\n        return B_ev\n    if (bet == 'Red' and winner == 'Red'):\n        return R_ev\n    else:\n        return (-100)","b967d66a":"#Let's make a helper function to make this easier\n\ndef get_score(sub, results):\n#    display(sub)\n#    display(results)\n    #Let's merge the two dataframes\n    merge_df = pd.merge(sub, results)\n    #display(merge_df)\n    #We can get the proper bet by using a lambda function\n    merge_df['Bet'] = merge_df.apply(lambda x: get_bet(x['R_prob'],x['B_prob'],x['R_ev'],x['B_ev']), axis=1)\n    merge_df['Profit'] = merge_df.apply(lambda x: get_profit(x['Winner'], x['Bet'], x['R_ev'], x['B_ev']), axis=1)\n    display(merge_df)\n    return(sum(merge_df['Profit']))","f899b8fd":"z = 0\nscore_list.append(get_score(sub_list[z], results_df))\nprint(f\"{sub_name_list[z]}'s bets saw a total profit of {score_list[z]}\")","a7f6ae4d":"z = 1\nscore_list.append(get_score(sub_list[z], results_df))\nprint(f\"{sub_name_list[z]}'s bets saw a total profit of {score_list[z]}\")","99b92e6c":"# Open All Submissions and add to a list","c58e7fa6":"# 1. Submission #1: Dummy Submission\n\nThese are the results of the dummy submission.","cd8bfd10":"# Submission #2: shortlikeafox's Submission","a3961792":"# Iterate the submissions and see how everyone did!","eecacbf0":"# Final Results\n\n* dummy: -75 units\n* shortlikeafox: -261.72 units\n\nThe winner for this event is nobody!  Better luck next time.","6f31ef75":"# Purpose\n\nI am going to go through the task submissions for [UFC Fight Night: Kattar vs Ige](https:\/\/www.kaggle.com\/mdabbert\/ultimate-ufc-dataset\/tasks?taskId=1343) and see what set of predictions was the most profitable (if any!)","673171e8":"# Submissions\n\nThere are 2 submissions.\n\n1. The dummy file (gives each fighter a .5 probability of winning. Therefore will bet every underdog with greater than +100 odds.)\n\n2. shortlikeafox's (my!) submission. A GaussianNB model with 18 features chosen through a systematic process of feature set testing.  It appears to be overfitting fights where the blue fighter has a draw on their record.  The two fighters with draws both have the probability of victory of 1","78324d58":"Dummy is only ever going to bet fighters who have odds greater than +100.  Here he won 3 fighter and lost 6 for a total loss of 75 units.","d961add4":"shortlikeafox's submission started strong winning 4 of his first 5 bets, but then things went downhill losing 5 of the last 6 for a total loss of 261 units.\n\nInterestingly in the 2 fights that were overfit (Ramos\/Murphy and Rivera\/Stamann) the model saw a small profit of 30 units."}}