{"cell_type":{"a33eaf68":"code","887b3345":"code","6ceeb368":"code","c82623fa":"code","fdbf3e0f":"code","4fbfe294":"code","0460d62d":"code","f99dad74":"code","02cba3e9":"code","75e98918":"code","da0445ac":"code","ea794dea":"code","7571d4e1":"code","e028de56":"code","556ae6db":"code","d6dccdce":"code","c4f71129":"code","089aedea":"code","065f857d":"code","48728609":"code","61d260eb":"code","46d4b3c6":"code","f1d79933":"code","e9990df0":"code","375fc132":"code","4c6c1b32":"code","97aabebe":"code","e6a2bcad":"code","ec5e0c6d":"code","6307e640":"code","c975a143":"code","729c2073":"code","b9ba30e3":"code","ae97639f":"code","b98cb83f":"code","13cd8bac":"markdown","1e7f0b14":"markdown","897e7e2b":"markdown","5432c5de":"markdown","88233ebb":"markdown","1a890968":"markdown","3cb2d820":"markdown","d5d1db2e":"markdown","64ec7601":"markdown","fe553f12":"markdown","ea2c8806":"markdown","b5da991e":"markdown","f5e4f99d":"markdown","eca71168":"markdown","31cf5457":"markdown","ab6cf5dc":"markdown","6f36b5b2":"markdown","66ee4fe6":"markdown"},"source":{"a33eaf68":"import numpy as np\nimport pandas as pd\npd.set_option('max_column', None)\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nsns.set_style('darkgrid')\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport random\n\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.impute import KNNImputer\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier","887b3345":"def outlier_viz(col):\n    color = random.choice(['r', 'g', 'b'])\n    fig, ax = plt.subplots(1,2,figsize=(18,5))\n    sns.distplot(col, ax=ax[0], color=color)\n    sns.boxplot(col, ax=ax[1], color=color)\n    plt.suptitle('Distribution & Boxplot for Outlier Detection')\n    fig.show()\n    return None\n\ndef iterative_imputer(df, imputer='iterative'):\n    if imputer == 'knn':\n        imputer = KNNImputer(n_neighbors=1)\n    elif imputer == 'iterative':\n        imputer = IterativeImputer(max_iter=100)\n    data = imputer.fit_transform(df)\n    df = pd.DataFrame(data, columns=list(df.columns))\n    return df\n\ndef transformation(df, col, apply='log'):\n    fig, ax = plt.subplots(1,2,figsize=(18,5))\n    sns.distplot(df[col], ax=ax[0], color='r')\n    if apply == 'log':\n        df[col] = np.log(df[col])\n    elif apply == 'sqrt':\n        df[col] = np.sqrt(df[col])\n    sns.distplot(df[col], ax=ax[1], color='b')\n    plt.suptitle('Distribution Before & After Transformation')\n    return None\n\ndef bins(df, col, bins=10):\n    df[col+'_cat'] = pd.cut(df[col], bins=bins, labels=list(range(0,10)))\n    return df[col+'_cat']\n\ndef scaling(df):\n    scale = StandardScaler()\n    col = df.columns\n    df = pd.DataFrame(scale.fit_transform(df))\n    df.columns = col\n    return df","6ceeb368":"df = pd.read_csv('\/kaggle\/input\/song-popularity-prediction\/train.csv')\ndf.head()","c82623fa":"df.describe()","fdbf3e0f":"plt.figure(figsize=(12,5))\nsns.heatmap(df.isnull(), cmap='cool')\nplt.title('Null Values in each feature of Dataset')\nplt.show()","4fbfe294":"plt.figure(figsize=(12,7))\nsns.heatmap(df.corr(), cmap='cool_r', linewidths=0.2, linecolor='w')\nplt.title('Correlation between features of Dataset')\nplt.show()","0460d62d":"df.isnull().sum()","f99dad74":"px.pie(data_frame=df, values=df['song_popularity'].value_counts(),\n       names=['Unpopular', 'Popular'], hole=0.9, width=500, height=400,\n       title='Counting of Unique Values of Target Variable')","02cba3e9":"cat = []\nfor i in df.columns:\n    if len(df[i].unique()) < 20:\n        cat.append(i)\ncat","75e98918":"px.bar(df['audio_mode'].value_counts(), width=700, height=300, orientation='h')","da0445ac":"px.pie(data_frame=df, values=df['key'].value_counts(),\n       names=df['key'].value_counts().index, hole=0.55,\n       width=600, height=500, title='Unique Values of key')","ea794dea":"px.bar(df['time_signature'].value_counts(), width=700, height=300, orientation='h')","7571d4e1":"num = ['song_duration_ms', 'acousticness', 'danceability', 'energy',\n       'instrumentalness', 'liveness', 'loudness','speechiness', 'tempo', 'audio_valence']\n\nfor i in num:\n    outlier_viz(df[i])","e028de56":"print(f'Null Values - {df.isnull().sum().sum()}\\n')\nprint('Applying Iterative Imputer...')\n\ndf = iterative_imputer(df)\n\nprint('Iterative Imputer Applied !!!\\n')\nprint(f'Null Values Left - {df.isnull().sum().sum()}')","556ae6db":"df.dtypes","d6dccdce":"for i in cat:\n    df[i] = df[i].astype('int32')","c4f71129":"df.head()","089aedea":"df['song_duration_s'] =(df['song_duration_ms'] \/ 1000).astype('int32')\ndf['acoust']          = df['acousticness'].apply(lambda x:1 if x > 0.5 else 0)\ndf['dance']           = df['danceability'].apply(lambda x:1 if x > 0.5 else 0)\ndf['energetic']       = df['energy'].apply(lambda x:1 if x>0.5 else 0)\ndf['instrumental']    = df['instrumentalness'].apply(lambda x:1 if x>0.1 else 0)\ndf['live']            = df['liveness'].apply(lambda x:1 if x>0.2 else 0)\ndf['loud']            = df['loudness'].apply(lambda x:1 if x > -13 else 0)\ndf['speech']          = df['speechiness'].apply(lambda x:1 if x>0.25 else 0)\ndf['loud_energy']     = df['loudness'] \/ df['energy']\ndf['loud_energy']     = df['loud_energy'].apply(lambda x:int(abs(x)))\ndf['tempo_dance']     = df['tempo'] \/ df['danceability']\ndf['tempo_dance']     = df['tempo_dance'].astype('int32')\ndf['energy_acoust']   = df['energy'] \/ df['acousticness']\ndf['loud_acoust']     = df['loudness'] \/ df['acousticness']\ndf['dance_audval']    = df['danceability'] \/ df['audio_valence']","065f857d":"for i in num:\n    bins(df, i)","48728609":"df['loudness'] = abs(df['loudness'])\ntransformation(df, 'liveness', 'log')\ntransformation(df, 'acousticness', 'sqrt')\ntransformation(df, 'loudness', 'log')\ntransformation(df, 'speechiness', 'log')\ntransformation(df, 'tempo', 'log')\n\ndf.drop('instrumentalness', axis=1, inplace=True)","61d260eb":"df.columns","46d4b3c6":"print(df.isnull().sum().sum())\ndf = iterative_imputer(df)","f1d79933":"X = df.drop(['id', 'song_popularity'], axis=1)\ny = df['song_popularity']","e9990df0":"X = scaling(X)","375fc132":"df_test = pd.read_csv('\/kaggle\/input\/song-popularity-prediction\/test.csv')\nX_test  = df_test.drop('id', axis=1)\nX_test.head()","4c6c1b32":"X_test.isnull().sum()","97aabebe":"print(f'Null Values - {X_test.isnull().sum().sum()}\\n')\nprint('Applying Iterative Imputer...')\n\nX_test = iterative_imputer(X_test)\n\nprint('Iterative Imputer Applied !!!\\n')\nprint(f'Null Values Left - {X_test.isnull().sum().sum()}')","e6a2bcad":"X_test['song_duration_s'] = (X_test['song_duration_ms'] \/ 1000).astype('int32')\nX_test['acoust']          =  X_test['acousticness'].apply(lambda x:1 if x > 0.5 else 0)\nX_test['dance']           =  X_test['danceability'].apply(lambda x:1 if x > 0.5 else 0)\nX_test['energetic']       =  X_test['energy'].apply(lambda x:1 if x>0.5 else 0)\nX_test['instrumental']    =  X_test['instrumentalness'].apply(lambda x:1 if x>0.09 else 0)\nX_test['live']            =  X_test['liveness'].apply(lambda x:1 if x>0.2 else 0)\nX_test['loud']            =  X_test['loudness'].apply(lambda x:1 if x > -13 else 0)\nX_test['speech']          =  X_test['speechiness'].apply(lambda x:1 if x>0.25 else 0)\nX_test['loud_energy']     =  X_test['loudness'] \/ X_test['energy']\nX_test['loud_energy']     =  X_test['loud_energy'].apply(lambda x:int(abs(x)))\nX_test['tempo_dance']     =  X_test['tempo'] \/ X_test['danceability']\nX_test['tempo_dance']     =  X_test['tempo_dance'].astype('int32')\nX_test['energy_acoust']   = X_test['energy'] \/ X_test['acousticness']\nX_test['loud_acoust']     = X_test['loudness'] \/ X_test['acousticness']\nX_test['dance_audval']    = X_test['danceability'] \/ X_test['audio_valence']\n\nfor i in num:\n    bins(X_test, i)\n\nX_test['liveness']     = np.log(X_test['liveness'])\nX_test['acousticness'] = np.sqrt(X_test['acousticness'])\nX_test['loudness']     = np.log(abs(X_test['loudness']))\nX_test['speechiness']  = np.log(X_test['speechiness'])\nX_test['tempo']        = np.log(X_test['tempo'])\n\nX_test.drop('instrumentalness', axis=1, inplace=True)","ec5e0c6d":"X_test.head()","6307e640":"X_test.isnull().sum().sum()","c975a143":"X_test = iterative_imputer(X_test)","729c2073":"X_test = scaling(X_test)","b9ba30e3":"%%time\n\nxgb_params= {\n    'n_estimators' : 7000,\n    'learning_rate' : 0.02859668002863679,\n    'reg_lambda' : 0.00012042589601632438,\n    'reg_alpha' : 16.683659682374774,\n    'subsample' : 0.4464941229852304,\n    'colsample_bytree' :0.5235019404878758,\n    'max_depth' : 4\n}\n\n\nmodel = XGBClassifier(**xgb_params)\n\nmodel.fit(X, y)","ae97639f":"model.score(X, y)","b98cb83f":"pred = model.predict(X_test)\n\ndf_test['song_popularity'] = pred\nsubmission = df_test[['id', 'song_popularity']]\nsubmission.to_csv('submission.csv', index=False)","13cd8bac":"## Loading Data","1e7f0b14":"## Prediction | Submission","897e7e2b":"#### Looking into Categorical Features","5432c5de":"## Feature Engineering","88233ebb":"## Model Training","1a890968":"## Exploratory Data Analysis","3cb2d820":"#### Removing Null Values","d5d1db2e":"![](http:\/\/getwallpapers.com\/wallpaper\/full\/c\/9\/b\/1066599-download-abstract-music-wallpaper-1920x1080-free-download.jpg)","64ec7601":"## Data Cleaning","fe553f12":"## Scaling Data","ea2c8806":"### Thanks You So Much for Reading \ud83d\ude0a, hope you learned something new.\n### If yes, please left an Upvote\ud83d\udd3c.\ud83d\ude0a","b5da991e":"## Working with Test Data","f5e4f99d":"#### Changing Datatypes","eca71168":"### Correlations Between :-\n* energy & accousticness\n* loudness & accousticness\n* loudness & energy","31cf5457":"#### The data is slightly imbalance.","ab6cf5dc":"## Importing Required Libraries","6f36b5b2":"#### Let's look into numerical features","66ee4fe6":"## Splitting Dependent and Independent Data"}}