{"cell_type":{"6fc979a6":"code","90d829aa":"code","750bffec":"code","b81051aa":"code","552003d4":"code","6a6dacf3":"code","c1ebe20b":"code","b103fd05":"code","1e471347":"code","ae5f1166":"code","a7573357":"code","8669d6c2":"code","000b685f":"code","f25f05a2":"code","029a2850":"code","39369ac5":"code","fea90c47":"code","4ae83a3a":"code","2f6609f2":"code","a7b7c5b5":"code","0c41301c":"code","747ee06b":"code","14af9c52":"code","853b0cc5":"code","02adccd1":"code","2f6c0aca":"code","8bc6c313":"code","fe09a2f0":"markdown","ebab9da0":"markdown","b424cc42":"markdown","679b7147":"markdown","7b0de90f":"markdown","3f1ba331":"markdown","fbaeff37":"markdown","11991ae8":"markdown","70851708":"markdown","b179e82d":"markdown","e3742ccf":"markdown","09382cb7":"markdown","e5ee3c46":"markdown","0c81e1ef":"markdown"},"source":{"6fc979a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")# \u0131 will use this type but if you want ,you can write as\n#plt.style.available #you can choose types of plot via using this code\nimport seaborn as sns # to make visualization\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\") # to close the warnings to prevent not to suppose our codes are mistakes but actually it are not supported.\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90d829aa":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId=test_df[\"PassengerId\"]#We will work on test_df datas so we dont want lose initiate situation.  \n","750bffec":"train_df.columns # we can use columns to see our datas' heads","b81051aa":"train_df.head() # we can check the top five rows via using head()","552003d4":"train_df.describe()# we can learn some statistical values thanks to using describe()","6a6dacf3":"train_df.info()#\u0131t gives general information about our datas and their types and also gives how much we have each types","c1ebe20b":"def bar_plot(variable):\n    \"\"\"\n       input:variable ex:\"Sex\"\n       output:bar plot & value count\n    \"\"\"\n    var=train_df[variable] # we get the feature\n    varValue=var.value_counts()# value_count count how much we have male or female inside our data.  \n    plt.figure(figsize=(9,3))#we set the our figure size\n    plt.bar(varValue.index,varValue) #type of  plot and x=varValue.index , y=varValue\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n    \n    ","b103fd05":"category1=[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","1e471347":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))\n    ","ae5f1166":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable])\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()\n    ","a7573357":"numericVar=[\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","8669d6c2":"#Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)#Our aim is to make a group using groupby()  between Survived  and Pclass then take a mean with mean() then at last part we sort our values from bigger than smaller.","000b685f":"#Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)#Our aim is to make a group using groupby()  between Survived  and Sex then take a mean with mean() then at last part we sort our values from bigger than smaller.","f25f05a2":"#SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)#Our aim is to make a group using groupby()  between Survived  and SibSp then take a mean with mean() then at last part we sort our values from bigger than smaller.","029a2850":"def detect_outliers(df,features):\n    outlier_indicate=[]\n    \n    for c in features:\n        #we will find 1st quatile\n        Q1=np.percentile(df[c],25)\n        #3rd quartile\n        Q3=np.percentile(df[c],75)\n        #IQR\n        IQR=Q3-Q1\n        #Outlier step\n        outlier_step=IQR * 1.5\n        #Detect outlier and their indeces\n        outlier_list_col=df[(df[c] < Q1-outlier_step) | (df[c] > Q3 + outlier_step) ].index\n        #store indeces\n        outlier_indicate.extend(outlier_list_col)\n        \n    outlier_indicate=Counter(outlier_indicate) #counter gives how much we have datas which are private data\n    multiple_outliers=list(i for i, v in outlier_indicate.items() if v > 2)\n    return multiple_outliers  ","39369ac5":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","fea90c47":"#drop outliers\ntrain_df=train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","4ae83a3a":"train_df_len=len(train_df)\ntrain_df=pd.concat([train_df,test_df],axis=0).reset_index(drop=True)#our aim is to concanate the test and train datas to check the missing values.","2f6609f2":"train_df.head()","a7b7c5b5":"train_df.columns[train_df.isnull().any()]# we can control which variable are missing.","0c41301c":"train_df.isnull().sum()# here we can calculate how much value we have.","747ee06b":"train_df[train_df[\"Embarked\"].isnull()]#we check which values are missing where.","14af9c52":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","853b0cc5":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","02adccd1":"train_df[train_df[\"Fare\"].isnull()]#we are looking which Fare value missing.","2f6c0aca":"train_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))#we filled the mean value","8bc6c313":"train_df[train_df[\"Fare\"].isnull()]","fe09a2f0":"<a id=\"7\"><\/a><br>\n# Outlier Detection\n* Outlier detection is so important to analyse our data as statistical.And we can eliminate the data which break down our datas values like mean value.We can find these values via using some known methods such as median,1st,3rd and IQR.","ebab9da0":"<a id=\"4\"><\/a><br>\n## Categorical Variable","b424cc42":"<a id=\"8\"><\/a><br>\n# Missing Value\n    *  Find Missing Value \n    *  Fill Missing Value","679b7147":"# 1.[Load and Check Data](#1)\n# 2.[Variable Description](#2)\n   * [Univariate Variable Analysis](#3)\n      * [Categorical Variable](#4)\n      *  [Numerical Variable](#5) \n      \n      \n# 3.[Basic Data Analysis](#6)\n\n# 4.[Outlier Detection](#7)\n# 5.[Missing Value](#8)\n   * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)   \n","7b0de90f":"<a id=\"1\"><\/a><br>\n# Load and Check Data\n* To deal with Titanic Project we need to load our data and check it.","3f1ba331":"<a id=\"9\"><\/a><br>\n## Find Missing Value","fbaeff37":"Missing Value\nFind Missing Value\nFill Missing Value","11991ae8":"# Introduction\n* The sinking of Titanic is one of the most notorious event in 1912.During this voyage,the Titanic sank after colliding with an iceberg.There are so many deaths which are passengers and crews because of this situtions.\n<font color = \"black\">\n\n   \n\n    \n\n    \n    \n    \n    \n","70851708":"<a id=\"2\"><\/a><br>\n# Variable Description\n1. PassengerId>>> Unique ID\n2. Survived >>>0=died 1=alive\n3. Pclass >>> Passenger Class\n4. Name >>> Passenger Name\n5. Sex >>> Gender male or female\n6. Age >>> Passenger Ages\n7. SibSp >>> Sib=siblings Sp=spouses\n8. Parch >>>Par = Parents ch=children\n9. Ticket >>> Ticket numbers\n10. Fare >>> Ticket fare\n11. Cabin >>> Cabin number(Category)\n12. Embarked >>> Port Locations (C=Cherbourg, Q=Queenstown, S=Southampton)","b179e82d":"<a id=\"6\"><\/a><br>\n# Basic Data Analysis\n> We will investigate between below features.\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n","e3742ccf":"<a id=\"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","09382cb7":"* float64(2):Fare and Age\n* int64(5):Pclass,SibSp,Parch,PassengerId,and Survived\n*  object(5):Cabin,Embarked,Ticket, Name and Sex","e5ee3c46":"<a id=\"5\"><\/a><br>\n## Numerical Variable","0c81e1ef":"<a id=\"3\"><\/a><br>\n# Univariate Variable\n* Categorical Variable: \u0131t has more than one feature category.For instance Survived,Sex,Pclass,Embarked,Cabin,Name,Ticket,SibSp and Parch\n* Numerical Variable:\u0131t has numeric values.Fare, Age, PassengerId"}}