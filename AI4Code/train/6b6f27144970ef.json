{"cell_type":{"980781e1":"code","09a17135":"code","bbe55578":"code","2a94822b":"code","80480860":"code","37a02b4e":"code","5396382b":"code","ff82994f":"code","b48e491f":"code","b728e0ce":"code","7cfdac29":"code","59592a18":"code","2db97e1f":"code","fbc206c6":"code","c6ada513":"code","f63b29b5":"code","47c7c47e":"code","1c316147":"code","f2603381":"code","a92dd666":"code","bd35de35":"code","9a455eca":"code","3a788ebf":"code","31e433da":"code","275d4655":"code","ba350947":"markdown","b3203f35":"markdown","8922c143":"markdown","deb8598e":"markdown","c73d4499":"markdown"},"source":{"980781e1":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","09a17135":"import pandas as pd","bbe55578":"X_train.shape, X_test.shape","2a94822b":"pd.set_option(\"display.max_columns\", 100)\ndisplay(X_train.head(3))\ndisplay(X_test.head(3))","80480860":"y_train['SalePrice'].hist()","37a02b4e":"y_test['SalePrice'].hist()","5396382b":"X_train.isnull().sum().sort_values(ascending=False)[:20]","ff82994f":"X_test.isnull().sum().sort_values(ascending=False)[:20]","b48e491f":"X_train.info()","b728e0ce":"X_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']","7cfdac29":"X_train.head(3)","59592a18":"from sklearn.impute import SimpleImputer\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)","2db97e1f":"X_train","fbc206c6":"from sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=2022)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","c6ada513":"from sklearn.metrics import mean_squared_error\n\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","f63b29b5":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBRegressor\nfrom sklearn.svm import SVC","47c7c47e":"model = SVC(random_state=1234)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","1c316147":"model = XGBRegressor()\nmodel.fit(X_tr, y_tr, verbose=False)\npred = model.predict(X_val)\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","f2603381":"model = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","a92dd666":"y = y_train['SalePrice']","bd35de35":"final_model = XGBRegressor()\nfinal_model.fit(X_train, y)\n\nprediction = final_model.predict(X_test)","9a455eca":"submission = pd.DataFrame(data={\n    'Id': y_test.Id,\n    'income' : prediction\n})","3a788ebf":"submission.head()","31e433da":"submission.to_csv(\"12345.csv\", index=False)","275d4655":"pred = model.predict(X_test)\nprint(\"RMSLE : \" + str(rmsle(y_test['SalePrice'], prediction)))","ba350947":"# Model","b3203f35":"# \uacb0\uacfc \uccb4\uc810","8922c143":"# Preprocessing","deb8598e":"# Data Load & Simple EDA","c73d4499":"## Prediction & to CSV"}}