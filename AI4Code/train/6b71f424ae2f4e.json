{"cell_type":{"a4175219":"code","5fd2c9e6":"code","34781e81":"code","7e077819":"code","c348fc7a":"code","6d860eaa":"code","7ae9367d":"code","d2078da3":"code","73060cbf":"code","15c6194a":"code","b878edaa":"code","09aafd01":"code","7036f3f4":"code","adbb5414":"code","46954c20":"code","4c90f229":"code","faeb7e28":"code","b1e99248":"code","244646a2":"code","81738902":"code","8a5c00d3":"code","246b82c8":"code","e4094727":"code","15947c30":"code","4b549a4b":"code","d8fab634":"code","e74f1b6e":"code","e6b5159b":"code","c45c068a":"code","203c49ec":"code","c0d79a16":"code","5aedf4a1":"code","04a063dc":"code","9677c726":"code","979b9158":"code","061bd996":"code","d743361f":"code","c78703cf":"code","a2dbf940":"code","68a8aa63":"code","c40bdfcc":"code","1eec3094":"code","73c1b2d5":"code","b14f1204":"code","f1afbf65":"code","d6544269":"code","b43a1a7d":"code","c129d572":"markdown","74d7a2d1":"markdown","bd552444":"markdown"},"source":{"a4175219":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5fd2c9e6":"import pandas as pd\n\ntitanic_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntitanic_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender_submission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","34781e81":"titanic_train.head()","7e077819":"titanic_train.describe()","c348fc7a":"titanic_train.isnull().sum()","6d860eaa":"titanic_train.Name.value_counts()","7ae9367d":"titanic_train.Ticket.value_counts()","d2078da3":"titanic_train.Cabin.value_counts()","73060cbf":"new_train = titanic_train.drop(['Name','Ticket','Cabin'],axis=1)\nnew_train","15c6194a":"new_train['Age']=new_train['Age'].fillna(new_train['Age'].mean())\nnew_train.isnull().sum()","b878edaa":"new_train['family_size'] = new_train['SibSp']+new_train['Parch']\nnew_train.family_size.value_counts()","09aafd01":"new_train['FareBin'] = pd.qcut(new_train['Fare'], 4)\nnew_train['AgeBin'] = pd.qcut(new_train['Age'], 4)","7036f3f4":"new_train = new_train.drop(['Fare','Age'],axis=1)\nnew_train = new_train.dropna(subset=['Embarked'])\nnew_train","adbb5414":"categorical_features = new_train.drop(['PassengerId','Survived','SibSp','Parch','family_size'],axis=1)","46954c20":"categorical_features","4c90f229":"a = categorical_features.columns.tolist()\nencoded_features = pd.get_dummies(categorical_features, columns=a)\nencoded_features","faeb7e28":"esc_dummy_trap = encoded_features.drop(['Pclass_3','Sex_male','Embarked_S','FareBin_(31.0, 512.329]','AgeBin_(35.0, 80.0]'],axis=1)\nesc_dummy_trap","b1e99248":"X = new_train.drop(['Pclass','Sex','Embarked','FareBin','AgeBin'],axis=1)\nX= pd.concat([X,esc_dummy_trap],axis=1)\nX","244646a2":"X_train = X.drop(['Survived','PassengerId'],axis=1)\nX_train","81738902":"Y_train = X['Survived']\nY_train.dtype","8a5c00d3":"X_train.isnull().sum()","246b82c8":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, Y_train)","e4094727":"Y_train_pred = classifier.predict(X_train)","15947c30":"from sklearn.model_selection import cross_val_score\ncross_val_score(classifier, X_train, Y_train, cv=3, scoring=\"accuracy\")","4b549a4b":"corr_matrix = X.corr()\ncorr_matrix['Survived'].sort_values(ascending=False)","d8fab634":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\ncm = confusion_matrix(Y_train,Y_train_pred)\ncm","e74f1b6e":"acc_scr = accuracy_score(Y_train,Y_train_pred)\nacc_scr","e6b5159b":"report = classification_report(Y_train, Y_train_pred)\nprint(report)","c45c068a":"titanic_test","203c49ec":"for i in titanic_test['Parch']:\n    titanic_test['Parch'] = titanic_test['Parch'].replace(9, 6)","c0d79a16":"new_test = titanic_test.drop(['Name','Ticket','Cabin'],axis=1)","5aedf4a1":"new_test['Age']=new_test['Age'].fillna(new_test['Age'].mean())\nnew_test.isnull().sum()","04a063dc":"new_test['Fare']=new_test['Fare'].fillna(new_test['Fare'].mean())\nnew_test.isnull().sum()","9677c726":"new_test['family_size'] = new_test['SibSp']+new_test['Parch']\nnew_test.family_size.value_counts()","979b9158":"new_test['FareBin'] = pd.qcut(new_test['Fare'], 4)\nnew_test['AgeBin'] = pd.qcut(new_test['Age'], 4)\nnew_test = new_test.drop(['Age','Fare'],axis=1)","061bd996":"titanic_test.Parch.value_counts()","d743361f":"categorical_features_test = new_test.drop(['PassengerId','SibSp','Parch','family_size'],axis=1)\ncategorical_features_test","c78703cf":"a_test = categorical_features_test.columns.tolist()\nencoded_features_test = pd.get_dummies(categorical_features_test, columns=a_test)\nencoded_features_test","a2dbf940":"esc_dummy_trap_test = encoded_features_test.drop(['Pclass_3','Sex_male','Embarked_S','FareBin_(31.5, 512.329]','AgeBin_(35.75, 76.0]'],axis=1)","68a8aa63":"new_test","c40bdfcc":"X_test = new_test.drop(['Pclass','Sex','Embarked','FareBin','AgeBin'],axis=1)\nX_test = pd.concat([X_test,esc_dummy_trap_test],axis=1)","1eec3094":"X_test = X_test.drop(['PassengerId'],axis=1)","73c1b2d5":"X_test","b14f1204":"X_train","f1afbf65":"titanic_test.Parch.value_counts()","d6544269":"test_pred = classifier.predict(X_test)","b43a1a7d":"output = pd.DataFrame({'PassengerId': titanic_test.PassengerId, 'Survived': test_pred})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","c129d572":"# Importing Data","74d7a2d1":"# **test set**","bd552444":"**Submitting Output**"}}