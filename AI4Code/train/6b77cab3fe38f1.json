{"cell_type":{"67acafb6":"code","53c4fd9a":"code","58d94e56":"code","8bcba421":"code","7203cc52":"code","10603c3f":"code","b2105567":"code","1f34efbf":"code","4965dfc3":"code","ae26ab82":"code","0f0ab3b2":"code","121d298f":"code","58b7d552":"code","f42665ac":"code","18767239":"code","cc338736":"code","97b784c6":"code","1192fa6a":"code","ddb26d3e":"code","2be86d3d":"code","6c5736f3":"code","dd8b535a":"code","26372546":"code","bca80560":"code","27dfd838":"code","a9f45578":"code","55fa7edb":"code","ab5f88ef":"code","c291130a":"code","f170b0ae":"code","e811eb9e":"code","432e3628":"code","fce9d4fb":"code","0b4fd1f8":"code","64569ed0":"code","5ff54c26":"code","80a6729c":"code","77a209a7":"code","c7f76252":"code","8c70e1b1":"code","69f19534":"code","0e0a9412":"code","2eef8511":"code","22134e50":"code","4936d700":"code","7d410a1e":"code","25aed477":"code","cf415067":"code","ba2121db":"code","a4cf631f":"code","0e4e027d":"code","14aa2757":"code","6ad35332":"code","88c8fe4b":"code","5f533a11":"code","76056c10":"code","197744ff":"code","d180e300":"code","3002bc97":"code","66a58798":"code","0d074b55":"code","a1ed3784":"code","b024fd59":"code","49588bae":"code","68c38743":"code","c0ecdd20":"code","4e324d98":"code","e7c8b4b7":"code","aebe620d":"code","766f02a3":"code","ac5dd580":"code","4314589b":"code","451f29c7":"code","d0273fc7":"code","8e8d62f8":"code","bbec78d6":"code","67c657ea":"code","bd095666":"code","7fd801e2":"code","9a7ac347":"code","da964bb0":"code","f4c856ff":"code","e886a225":"code","39601bdb":"code","b71e0b5b":"code","f664f094":"code","57b917a0":"code","89ae886c":"code","e942d773":"code","f934e6e0":"code","5faceb26":"code","8ff5e173":"code","91bf7557":"code","37e430cd":"code","4068d4f0":"code","cedf6174":"code","81408541":"code","bd8185f3":"code","c6f04bcc":"code","ec641673":"code","93957c54":"code","ee65b1dc":"code","83c0779d":"code","4c53bbe6":"code","51afd83c":"code","4e459b6d":"code","60adf811":"code","a3ee3611":"code","850f41b5":"code","33052b91":"code","0adeaeee":"code","01ea8e35":"code","400d4ed3":"markdown","95af4a93":"markdown","fbd794ef":"markdown","f4a3bc92":"markdown","d5b6de15":"markdown","c40f0199":"markdown","d69c229b":"markdown","5b42ffd7":"markdown","fb94bdc8":"markdown","b5223fe5":"markdown","b42b847b":"markdown","c2dbf728":"markdown","93283bce":"markdown","cf1841e4":"markdown"},"source":{"67acafb6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport gc\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom sklearn.model_selection import train_test_split\nfrom numpy import cov\nfrom numpy.linalg import eig\nimport xgboost as xgb\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_curve\nimport scikitplot as skplt\n\npd.set_option('display.max_columns', 500)\nprint(os.listdir('\/kaggle\/input\/ieee-fraud-detection'))\n\n# Any results you write to the current directory are saved as output.","53c4fd9a":"PATH = '\/kaggle\/input\/ieee-fraud-detection'","58d94e56":"df_train_tran = pd.read_csv(PATH + '\/train_transaction.csv')\ndf_train_tran.head()","8bcba421":"df_train_tran.describe()","7203cc52":"print(df_train_tran['isFraud'].value_counts())\n# 1 is 3.6% of 0","10603c3f":"plt.figure(figsize=(5,5))\nax = sns.countplot(df_train_tran['isFraud'])\ndel ax\ngc.collect()","b2105567":"# Bubble plot\n'''plt.figure(figsize=(10,10))\nplt.scatter(x=df_train_tran['isFraud'], y=df_train_tran['isFraud'].value_counts(), s=z*1000, alpha=0.5)\nplt.show()'''","1f34efbf":"# yet to code","4965dfc3":"# yet to code","ae26ab82":"plt.figure(figsize=(5,5))\nax = sns.scatterplot(x='isFraud', y='TransactionAmt', data=df_train_tran)\ndel ax\ngc.collect()","0f0ab3b2":"#df_train_tran.fillna('0', inplace=True)","121d298f":"plt.figure(figsize=(5,5))\nax = sns.boxplot(x='isFraud', y='ProductCD', data=df_train_tran)\ndel ax\ngc.collect()","58b7d552":"plt.figure(figsize=(5,5))\nax = sns.boxplot(x='isFraud', y='card1', data=df_train_tran)\ndel ax\ngc.collect()","f42665ac":"plt.figure(figsize=(5,5))\nax = sns.boxplot(x='isFraud', y='card2', data=df_train_tran)\ndel ax\ngc.collect()","18767239":"plt.figure(figsize=(5,5))\nax = sns.boxplot(x='isFraud', y='card3', data=df_train_tran)\ndel ax\ngc.collect()","cc338736":"plt.figure(figsize=(5,5))\nax = sns.boxplot(x='isFraud', y='card4', data=df_train_tran)\ndel ax\ngc.collect()","97b784c6":"plt.figure(figsize=(5,5))\nax = sns.boxplot(x='isFraud', y='card5', data=df_train_tran)\ndel ax\ngc.collect()","1192fa6a":"plt.figure(figsize=(5,5))\nax = sns.boxplot(x='isFraud', y='card6', data=df_train_tran)\ndel ax\ngc.collect()","ddb26d3e":"plt.figure(figsize=(5,5))\nax = sns.boxplot(x='isFraud', y='addr1', data=df_train_tran)\ndel ax\ngc.collect()","2be86d3d":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_tran['addr1'])\nplt.xticks(rotation=45)\ndel ax\ngc.collect()","6c5736f3":"plt.figure(figsize=(20,5))\nax=sns.barplot(x=df_train_tran['addr2'], y=df_train_tran['isFraud'])\nplt.xticks(rotation= 45)\nplt.xlabel('addr2')\nplt.ylabel('isFraud')\nplt.title('isFraud Given addr2')\ndel ax\ngc.collect()","dd8b535a":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_tran['addr2'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","26372546":"plt.figure(figsize=(20,5))\nax=sns.barplot(x=df_train_tran['P_emaildomain'], y=df_train_tran['isFraud'])\nplt.xticks(rotation= 45)\nplt.xlabel('P_emaildomain')\nplt.ylabel('isFraud')\nplt.title('isFraud Given P_emaildomain')\ndel ax\ngc.collect()","bca80560":"plt.figure(figsize=(25,8))\nax=sns.countplot(df_train_tran['P_emaildomain'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","27dfd838":"plt.figure(figsize=(20,5))\nax=sns.barplot(x=df_train_tran['R_emaildomain'], y=df_train_tran['isFraud'])\nplt.xticks(rotation= 45)\nplt.xlabel('R_emaildomain')\nplt.ylabel('isFraud')\nplt.title('isFraud Given R_emaildomain')\ndel ax\ngc.collect()","a9f45578":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_tran['R_emaildomain'])\nplt.xticks(rotation=45)\ndel ax\ngc.collect()","55fa7edb":"plt.figure(figsize=(5,5))\nax=sns.barplot(x=df_train_tran['M1'], y=df_train_tran['isFraud'])\nplt.xticks(rotation= 45)\nplt.xlabel('M1')\nplt.ylabel('isFraud')\nplt.title('isFraud Given M1')\ndel ax\ngc.collect()","ab5f88ef":"df_train_tran.groupby('M1').mean()","c291130a":"plt.figure(figsize=(5,5))\nax=sns.barplot(x=df_train_tran['M2'], y=df_train_tran['isFraud'])\nplt.xticks(rotation= 45)\nplt.xlabel('M2')\nplt.ylabel('isFraud')\nplt.title('isFraud Given M2')\ndel ax\ngc.collect()","f170b0ae":"plt.figure(figsize=(5,5))\nax=sns.barplot(x=df_train_tran['M3'], y=df_train_tran['isFraud'])\nplt.xticks(rotation= 45)\nplt.xlabel('M3')\nplt.ylabel('isFraud')\nplt.title('isFraud Given M3')\ndel ax\ngc.collect()","e811eb9e":"plt.figure(figsize=(5,5))\nax=sns.barplot(x=df_train_tran['M4'], y=df_train_tran['isFraud'])\nplt.xticks(rotation= 45)\nplt.xlabel('M4')\nplt.ylabel('isFraud')\nplt.title('isFraud Given M4')\ndel ax\ngc.collect()","432e3628":"plt.figure(figsize=(5,5))\nax=sns.barplot(x=df_train_tran['M5'], y=df_train_tran['isFraud'])\nplt.xticks(rotation= 45)\nplt.xlabel('M5')\nplt.ylabel('isFraud')\nplt.title('isFraud Given M5')\ndel ax\ngc.collect()","fce9d4fb":"plt.figure(figsize=(5,5))\nax=sns.barplot(x=df_train_tran['M6'], y=df_train_tran['isFraud'])\nplt.xticks(rotation= 45)\nplt.xlabel('M6')\nplt.ylabel('isFraud')\nplt.title('isFraud Given M6')\ndel ax\ngc.collect()","0b4fd1f8":"plt.figure(figsize=(5,5))\nax=sns.barplot(x=df_train_tran['M7'], y=df_train_tran['isFraud'])\nplt.xticks(rotation= 45)\nplt.xlabel('M7')\nplt.ylabel('isFraud')\nplt.title('isFraud Given M7')\ndel ax\ngc.collect()","64569ed0":"plt.figure(figsize=(5,5))\nax=sns.barplot(x=df_train_tran['M8'], y=df_train_tran['isFraud'])\nplt.xticks(rotation= 45)\nplt.xlabel('M8')\nplt.ylabel('isFraud')\nplt.title('isFraud Given M8')\ndel ax\ngc.collect()","5ff54c26":"plt.figure(figsize=(5,5))\nax=sns.barplot(x=df_train_tran['M9'], y=df_train_tran['isFraud'])\nplt.xticks(rotation= 45)\nplt.xlabel('M9')\nplt.ylabel('isFraud')\nplt.title('isFraud Given M9')\ndel ax\ngc.collect()","80a6729c":"# C1 to C14\nC_cols = ['C1', 'C2' ] #, 'C3' ,'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14']\ngc.collect()\nsns.pairplot(df_train_tran[C_cols])\nplt.show()","77a209a7":"C_cols = ['C2', 'C3' ]\nsns.pairplot(df_train_tran[C_cols])\nplt.show()","c7f76252":"X = df_train_tran.drop('isFraud', axis=1)\nY = df_train_tran[['isFraud']]","8c70e1b1":"print(X.shape, Y.shape)","69f19534":"C_cols12 = []\nfor i in range(1,16):\n    C_cols1.append('V'+str(i))\ndf = pd.DataFrame(data = df_train_tran, columns = C_cols1)\n\nplt.figure(figsize=(25,8))\nax=sns.boxplot(x=\"variable\", y=\"value\", data=pd.melt(df))\nplt.xticks(rotation=45)\nplt.show()\n\ndel ax\ngc.collect()","0e0a9412":"C_cols2 = []\nfor i in range(16,51):\n    C_cols2.append('V'+str(i))\n    \ndf = pd.DataFrame(data = df_train_tran, columns = C_cols2)\n\nplt.figure(figsize=(30,8))\nax=sns.boxplot(x=\"variable\", y=\"value\", data=pd.melt(df))\nplt.xticks(rotation=45)\nplt.show()\n\ndel ax\ngc.collect()","2eef8511":"C_cols2 = []\nfor i in range(51,101):\n    C_cols2.append('V'+str(i))\ndf = pd.DataFrame(data = df_train_tran, columns = C_cols2)\n\nplt.figure(figsize=(35,10))\nax=sns.boxplot(x=\"variable\", y=\"value\", data=pd.melt(df))\nplt.xticks(rotation=45)\nplt.show()\n\ndel ax\ngc.collect()","22134e50":"C_cols2 = []\nfor i in range(101,151):\n    C_cols2.append('V'+str(i))\n    \ndf = pd.DataFrame(data = df_train_tran, columns = C_cols2)\n\nplt.figure(figsize=(30,10))\nax=sns.boxplot(x=\"variable\", y=\"value\", data=pd.melt(df))\nplt.xticks(rotation=45)\nplt.show()\n\ndel ax\ngc.collect()","4936d700":"C_cols2 = []\nfor i in range(151,201):\n    C_cols2.append('V'+str(i))\n    \ndf = pd.DataFrame(data = df_train_tran, columns = C_cols2)\n\nplt.figure(figsize=(30,10))\nax=sns.boxplot(x=\"variable\", y=\"value\", data=pd.melt(df))\nplt.xticks(rotation=45)\nplt.show()\n\ndel ax\ngc.collect()","7d410a1e":"C_cols2 = []\nfor i in range(201,251):\n    C_cols2.append('V'+str(i))\n    \ndf = pd.DataFrame(data = df_train_tran, columns = C_cols2)\n\nplt.figure(figsize=(30,10))\nax=sns.boxplot(x=\"variable\", y=\"value\", data=pd.melt(df))\nplt.xticks(rotation=45)\nplt.show()\n\ndel ax\ngc.collect()","25aed477":"C_cols2 = []\nfor i in range(251,301):\n    C_cols2.append('V'+str(i))\n    \ndf = pd.DataFrame(data = df_train_tran, columns = C_cols2)\n\nplt.figure(figsize=(30,10))\nax=sns.boxplot(x=\"variable\", y=\"value\", data=pd.melt(df))\nplt.xticks(rotation=45)\nplt.show()\n\ndel ax\ngc.collect()","cf415067":"C_cols2 = []\nfor i in range(301,340):\n    C_cols2.append('V'+str(i))\n    \ndf = pd.DataFrame(data = df_train_tran, columns = C_cols2)\n\nplt.figure(figsize=(30,10))\nax=sns.boxplot(x=\"variable\", y=\"value\", data=pd.melt(df))\nplt.xticks(rotation=45)\nplt.show()\n\ndel ax\ngc.collect()","ba2121db":"del df\ngc.collect()","a4cf631f":"df_train_id = pd.read_csv(PATH + '\/train_identity.csv')","0e4e027d":"plt.figure(figsize=(5,5))\nax=sns.countplot(df_train_id['DeviceType'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","14aa2757":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_id['DeviceInfo'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","6ad35332":"plt.figure(figsize=(5,5))\nax=sns.countplot(df_train_id['id_12'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","88c8fe4b":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_id['id_13'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","5f533a11":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_id['id_14'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","76056c10":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_id['id_14'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","197744ff":"plt.figure(figsize=(5,5))\nax=sns.countplot(df_train_id['id_15'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","d180e300":"plt.figure(figsize=(5,5))\nax=sns.countplot(df_train_id['id_16'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","3002bc97":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_id['id_17'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","66a58798":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_id['id_18'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","0d074b55":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_id['id_19'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","a1ed3784":"plt.figure(figsize=(30,5))\nax=sns.countplot(df_train_id['id_20'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","b024fd59":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_id['id_21'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","49588bae":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_id['id_22'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","68c38743":"plt.figure(figsize=(5,5))\nax=sns.countplot(df_train_id['id_23'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","c0ecdd20":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_id['id_24'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","4e324d98":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_id['id_25'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","e7c8b4b7":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_id['id_26'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","aebe620d":"plt.figure(figsize=(5,5))\nax=sns.countplot(df_train_id['id_27'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","766f02a3":"plt.figure(figsize=(5,5))\nax=sns.countplot(df_train_id['id_28'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","ac5dd580":"plt.figure(figsize=(5,5))\nax=sns.countplot(df_train_id['id_29'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","4314589b":"plt.figure(figsize=(30,5))\nax=sns.countplot(df_train_id['id_30'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","451f29c7":"plt.figure(figsize=(30,5))\nax=sns.countplot(df_train_id['id_31'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","d0273fc7":"plt.figure(figsize=(5,5))\nax=sns.countplot(df_train_id['id_32'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","8e8d62f8":"plt.figure(figsize=(25,5))\nax=sns.countplot(df_train_id['id_33'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","bbec78d6":"plt.figure(figsize=(5,5))\nax=sns.countplot(df_train_id['id_34'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","67c657ea":"plt.figure(figsize=(5,5))\nax=sns.countplot(df_train_id['id_35'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","bd095666":"plt.figure(figsize=(5,5))\nax=sns.countplot(df_train_id['id_36'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","7fd801e2":"plt.figure(figsize=(5,5))\nax=sns.countplot(df_train_id['id_37'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","9a7ac347":"plt.figure(figsize=(5,5))\nax=sns.countplot(df_train_id['id_38'])\nplt.xticks(rotation= 45)\ndel ax\ngc.collect()","da964bb0":"C_cols2 = []\nlbl = ''\nfor i in range(1,12):\n    if i < 10:\n        lbl = 'id_0'+str(i)\n    else:\n        lbl = 'id_'+str(i)\n    C_cols2.append(lbl)\n    \ndf = pd.DataFrame(data = df_train_id, columns = C_cols2)\n\nplt.figure(figsize=(30,10))\nax=sns.boxplot(x=\"variable\", y=\"value\", data=pd.melt(df))\nplt.xticks(rotation=45)\nplt.show()\n\ndel ax\ngc.collect()","f4c856ff":"'''df_train = pd.merge(df_train_tran, df_train_id, on='TransactionID')\ndel df_train_tran\ndel df_train_id\ngc.collect()'''","e886a225":"df_train_tran.describe()","39601bdb":"#df_train_tran.interpolate(method ='linear', limit_direction ='forward') ","b71e0b5b":"df_train_tran.head()","f664f094":"gc.collect()","57b917a0":"cat_cols = ['ProductCD', 'card1', 'card2', 'card3', 'card4', 'card5', 'card6', 'addr1', 'addr2', 'P_emaildomain', 'R_emaildomain', 'M1', 'M2', 'M3', 'M4', 'M5', 'M6', 'M7', 'M8', 'M9']\nn_cat = len(cat_cols)\nprint(n_cat)","89ae886c":"all_cols = set(df_train_tran.columns).difference(set(['TransactionID','isFraud']))\ntype(all_cols)\nlen(all_cols)","e942d773":"non_cat_cols = list(all_cols.difference(set(cat_cols)))\nlen(non_cat_cols)","f934e6e0":"df_train_tran.head(5)","5faceb26":"for col in cat_cols:\n    #print(col)\n    imp = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\n    imp.fit(df_train_tran[[col]])\n    df_train_tran[[col]]= imp.transform(df_train_tran[[col]])\n    df_train_tran[[col]] = LabelEncoder().fit_transform(df_train_tran[[col]])","8ff5e173":"print(len(non_cat_cols))\nfor col in non_cat_cols:\n    #print(col)\n    imp = SimpleImputer(missing_values=np.nan, strategy='mean')\n    imp.fit(df_train_tran[[col]])\n    df_train_tran[[col]]= imp.transform(df_train_tran[[col]])\n    #df_train_tran[[col]] = LabelEncoder().fit_transform(df_train_tran[[col]])","91bf7557":"df_train_tran.head(10)","37e430cd":"df_train_tran = df_train_tran.values","4068d4f0":"print(type(df_train_tran))\nprint(df_train_tran)","cedf6174":"train_tran_x = df_train_tran[:,2:]\ntrain_tran_y = df_train_tran[:,1]\ndel df_train_tran\ngc.collect()\nprint(np.shape(train_tran_x))\nprint(np.shape(train_tran_y))","81408541":"for i in range(0,np.shape(train_tran_x)[1]):\n    min1 = np.min(train_tran_x[:,i])\n    max1 = np.max(train_tran_x[:,i])\n    mean = np.mean(train_tran_x[:,i])\n    train_tran_x[:,i] = (train_tran_x[:,i] - min1)\/(max1-min1)\n    #train_tran_x = MinMaxScaler().fit_transform(train_tran_x)","bd8185f3":"print(np.shape(train_tran_x))","c6f04bcc":"rs = RandomUnderSampler(random_state=42)\nX, y = rs.fit_resample(train_tran_x, train_tran_y)\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.3) # 70% training and 30% test\nm_train = np.shape(y_train)[0]\nm_valid = np.shape(y_valid)[0]\n\ny_train = y_train.reshape(m_train, 1)\ny_valid = y_valid.reshape(m_valid, 1)\n\nprint(np.shape(X_train))\nprint(np.shape(y_train))\nprint(np.shape(X_valid))\nprint(np.shape(y_valid))","ec641673":"reduced_features_no = 200","93957c54":"# calculate the mean of each column\nM = np.mean(X_train, axis=1) \n#print(M)\nM = M.reshape(np.shape(M)[0],1)\n# center columns by subtracting column means\nC = X_train - M\n# calculate covariance matrix of centered matrix\nV = cov(C.T)\n#print(V)\n# eigendecomposition of covariance matrix\nvalues, vectors = eig(V)\n\n# Sorting eigenvectors based on eigen values\nsort_index = np.argsort(values)[::-1]\nvalues = values[sort_index]\nvectors = vectors[:, sort_index]\nprint(sort_index)\n\n#print(\"eigen vectors shape: \", np.shape(vectors))\n#print(\"eigen values: \",values)\n\n# project data\nP = vectors.T.dot(C.T)\nP = P.T\nprint(\"transformed data size: \", np.shape(P))\n\n# take top 3 for visualizing if we can do outlier detection \ntran_x_viz = P[:,:reduced_features_no]\nprint(np.shape(tran_x_viz))","ee65b1dc":"# calculate the mean of each column\nM = np.mean(X_valid, axis=1) \n#print(M)\nM = M.reshape(np.shape(M)[0],1)\n# center columns by subtracting column means\nC = X_valid - M\n# calculate covariance matrix of centered matrix\nV = cov(C.T)\n#print(V)\n# eigendecomposition of covariance matrix\nvalues, vectors = eig(V)\n\n# Sorting eigenvectors based on eigen values\nsort_index = np.argsort(values)[::-1]\nvalues = values[sort_index]\nvectors = vectors[:, sort_index]\n\nprint(sort_index)\n#print(\"eigen vectors shape: \", np.shape(vectors))\n#print(\"eigen values: \",values)\n\n# project data\nP = vectors.T.dot(C.T)\nP = P.T\nprint(np.shape(P))\n\n# take top 3 for visualizing if we can do outlier detection \nvalid_x_viz = P[:,:reduced_features_no]\nprint(np.shape(valid_x_viz))","83c0779d":"idx_1 = (y_train.T==1)\nidx_0 = (y_train.T==0)\nprint(idx_0[0])\nprint(idx_1[0])\nnp.shape(tran_x_viz[idx_1[0]])\n\npos_tran_x = tran_x_viz[idx_1[0]]\nneg_tran_x = tran_x_viz[idx_0[0]]\nprint(np.shape(pos_tran_x))\nprint(np.shape(neg_tran_x))","4c53bbe6":"print(np.max(np.max(pos_tran_x)))\nprint(np.max(np.max(neg_tran_x)))","51afd83c":"print(np.shape(tran_x_viz[0]))\nprint(tran_x_viz[0])","4e459b6d":"import seaborn as sns\nfrom mpl_toolkits.mplot3d import axes3d\nsns.set()\n\nfig=plt.figure(figsize=(20,20))\nax = fig.gca(projection='3d')\n\nprint(np.shape(tran_x_viz))\nprint(np.shape(y_train))\nfor data, y in zip(tran_x_viz, y_train):\n    c = 'b'\n    #print(data)\n    y = int(y)\n    if y == 1:\n        c = 'r' \n    x = data[0]\n    y = data[1]\n    z = data[2]\n    ax.scatter(x, y, z, alpha=0.8, c=c, s=30)\n\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\nplt.show()","60adf811":"# 2D plot\n\nfig=plt.figure(figsize=(20,20))\nax = fig.gca()\n\nprint(np.shape(tran_x_viz))\nprint(np.shape(y_train))\nfor data, y in zip(tran_x_viz, y_train):\n    c = 'b'\n    #print(data)\n    y = int(y)\n    if y == 1:\n        c = 'r' \n    x = data[0]\n    y = data[1]\n    ax.scatter(x, y, alpha=0.8, c=c, s=30)\n\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\n\nplt.show()\n","a3ee3611":"print(np.shape(tran_x_viz))\nprint(np.shape(y_train))\nprint(np.shape(valid_x_viz))\nprint(np.shape(y_valid))","850f41b5":"params ={\n        'booster':'gbtree', \n        'objective':'binary:logistic', \n        'n_estimators':2000,\n        'rate_drop': 0.2 \n        }","33052b91":"gbm = xgb.XGBClassifier(**params)\nmodel = gbm.fit(tran_x_viz, y_train)\n                                                                                \ny_pred = model.predict(valid_x_viz)\ny_pred_proba = model.predict_proba(valid_x_viz)","0adeaeee":"tran_x_viz","01ea8e35":"# metrics\nprint(confusion_matrix(y_valid,y_pred))\nprint(classification_report(y_valid,y_pred))\nprint(accuracy_score(y_valid, y_pred))\nskplt.metrics.plot_roc_curve(y_valid, y_pred_proba)\nplt.show()","400d4ed3":"** So the positive examples are only 3.4% of the total number of examples. So we can treat this as outlier detection problem..**","95af4a93":"# Normalizing the Non-categorical coulmns in train_transaction.csv","fbd794ef":"# Visualizing the values of different features in train_transaction.csv IEEE Fraud Detection Data\nI am a new kaggler.\nReferences where I learnt seaborn from in kaggle is:\nhttps:\/\/www.kaggle.com\/kanncaa1\/seaborn-tutorial-for-beginners","f4a3bc92":"# Visualizung Categorical Variables in train_transaction.csv\n\nProductCD,\ncard1 - card6,\naddr1, addr2,\nP_emaildomain,\nR_emaildomain,\nM1 - M9\n","d5b6de15":"# Non-categorical columns in train_identity.csv","c40f0199":"# Merge the 2 dataframes df_train_tran and df_train_id","d69c229b":"# Cleaning df_train_tran","5b42ffd7":"# Normalizing the Categorical Columns in train_transaction.csv","fb94bdc8":"Null value imputation for the non-categorical columns in df_train_tran dataframe","b5223fe5":"# Visualizing the values of different features in train_identity.csv IEEE Fraud Detection Data","b42b847b":"Null value imputation for the categorical columns in df_train_tran dataframe","c2dbf728":"# Scaling the data in df_train_tran","93283bce":"# Visualizing Non-categorical variables in train_transaction.csv","cf1841e4":"# Categorical columns in train_identity.csv"}}