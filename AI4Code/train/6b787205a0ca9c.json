{"cell_type":{"28753fc9":"code","fb4866eb":"code","3c171b29":"code","36155ff5":"code","7bb24862":"code","b5d0609a":"code","0743cf76":"code","41424c47":"code","a81fc2c4":"code","2a6134ac":"code","aece40b8":"code","d865cc50":"code","9af5ae29":"code","23d82ba8":"code","2a203d89":"code","e0520dde":"code","075bc03e":"code","06f5c72b":"code","fee502c0":"code","b16d0cb5":"markdown","88b9cbf0":"markdown","368add50":"markdown","6f557123":"markdown","ddf6e414":"markdown","778d5e99":"markdown","4354f9e3":"markdown","074ec0b1":"markdown","11038d20":"markdown","df266f83":"markdown","5bda6efa":"markdown","df4b02c5":"markdown"},"source":{"28753fc9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb4866eb":"# Basic library\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.metrics import accuracy_score\nfrom scipy import stats\n\n# Scaler\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\n# Neural Network\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers, callbacks\n\n# Cross-Validation\nfrom sklearn.model_selection import StratifiedKFold\n\n","3c171b29":"df_train = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/train.csv')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/test.csv')\n\n\n## from: https:\/\/www.kaggle.com\/bextuychiev\/how-to-work-w-million-row-datasets-like-a-pro\ndef reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df\n\ndf_train = reduce_memory_usage(df_train, verbose=True)\ndf_test = reduce_memory_usage(df_test, verbose=True)\nprint('Memory reduced')","36155ff5":"df_train.info()","7bb24862":"#df_train.hist(bins=25, figsize = (20,20))","b5d0609a":"df_train.iloc[:,6:20].describe()","0743cf76":"df_train['Cover_Type'].value_counts()","41424c47":"#df_train = df_train[df_train['Cover_Type'] != 5]","a81fc2c4":"# Get train data without the target and ids\nX = df_train.iloc[:, 1:-1].copy()\nX.drop(columns=['Soil_Type7', 'Soil_Type15'], inplace=True)\n\n# Get the target\nle = LabelEncoder()\ny = le.fit_transform(df_train['Cover_Type'])\n\n# Create test X, drop ids.\ntest_X = df_test.iloc[:, 1:].copy()\ntest_X.drop(columns=['Soil_Type7', 'Soil_Type15'], inplace=True)","2a6134ac":"del df_train, df_test","aece40b8":"# https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/callbacks\/EarlyStopping\nearly_stopping = callbacks.EarlyStopping(\n    monitor=\"val_acc\", \n    min_delta=0.001,           # Minimium amount of change to count as an improvement\n    patience=20,               # How many epochs to wait before stopping\n    restore_best_weights=True)","d865cc50":"# https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/callbacks\/ReduceLROnPlateau\nreduce_lr = callbacks.ReduceLROnPlateau(\n    monitor='val_loss', \n# Factor by which the learning rate will be reduced        \n#    factor=0.1,                \n    factor=0.2,                # Factor by which the learning rate will be reduced\n    patience=20,                # Number of epochs with no improvement\n    min_lr=0.001)              # Lower bound on the learning rate","9af5ae29":"# CALLBACKS = [early_stopping]","23d82ba8":"# Play with those configurations...\nEPOCHS = 200\nBATCH_SIZE = 4096\nN_SPLITS = 20","2a203d89":"# model.add(tf.keras.layers.Dense(64, kernel_initializer='lecun_normal', activation='selu'))\nmodel = keras.Sequential([\n    layers.Dense(600,  activation='selu', kernel_initializer='lecun_normal', input_shape=[X.shape[1]]),\n    layers.BatchNormalization(),\n    layers.Dense(300,  activation='selu', kernel_initializer='lecun_normal'),   \n    layers.BatchNormalization(),\n    layers.Dense(150,  activation='selu', kernel_initializer='lecun_normal'),    \n    layers.BatchNormalization(),\n    layers.Dense(75,  activation='selu', kernel_initializer='lecun_normal'),    \n    layers.BatchNormalization(),    \n    # For a binary classification function use sigmoid\n    layers.Dense(7, activation='softmax')])","e0520dde":"model.compile(optimizer=\"adam\", loss='sparse_categorical_crossentropy', metrics=['acc'])","075bc03e":"# fold = 0\n#test_predictions = np.zeros(test_X.shape[0])\nskf = StratifiedKFold(n_splits=N_SPLITS, random_state=48, shuffle=True)\n#scores = {fold:None for fold in range(skf.n_splits)}\nmodel_list = []\naccuracy_list  = []\nfold_list  = []\ntest_predictions = []\nfor fold,(train_idx, test_idx) in enumerate(skf.split(X, y)):\n# for train_idx, test_idx in skf.split(X, y):\n    train_X, val_X = X.iloc[train_idx], X.iloc[test_idx]\n    train_y, val_y = y[train_idx], y[test_idx]\n\n    # Train\n    preproc = StandardScaler() # I tried QuantileTransformer, but StandardScaler seems to be better by 0.005\n    train_X = preproc.fit_transform(train_X)\n    val_X = preproc.transform(val_X)\n    \n    # Test\n    pred_X = preproc.transform(test_X)\n\n    history = model.fit(\n        train_X, train_y,\n        validation_data=(val_X, val_y), \n        batch_size=BATCH_SIZE,\n        epochs=EPOCHS,\n        callbacks=[reduce_lr, early_stopping],        # Put your callbacks in a list\n        verbose=0)                  # Turn off training log\n\n    val_y_pred = model.predict(val_X, batch_size=BATCH_SIZE)\n    val_y_pred = np.argmax(val_y_pred, axis=1)\n\n    # Evaluation\n    accuracy = accuracy_score(val_y, val_y_pred)\n    \n    accuracy_list.append(accuracy)\n    model_list.append(history)\n    fold_list.append(fold)\n    \n    print('Kfold = {}, Acc = {:0.5f}'.format(fold, accuracy))\n    \n    \n    \n    pred_y = model.predict(pred_X, batch_size=BATCH_SIZE)\n    pred_y = np.argmax(pred_y, axis=1)\n    test_predictions.append(pred_y)\n    \n    \n#overall_auc = [np.max(scores[fold]['val_acc']) for fold in range(skf.n_splits)]\nprint('Overall Mean AUC: ', np.mean(accuracy_list))","06f5c72b":"pred_class = le.inverse_transform(stats.mode(test_predictions)[0][0])","fee502c0":"df_submission = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')\n                            \noutput = pd.concat([df_submission['Id'], pd.DataFrame(pred_class)], axis = 1)\noutput.columns = ['Id', 'Cover_Type']\noutput.to_csv('submission.csv', index=False)\n\nprint('Done. Ready for submission')","b16d0cb5":"<div style=\"color:#D81F26;\n           display:fill;\n           border-style: solid;\n           border-color:#C1C1C1;\n           font-size:14px;\n           font-family:Calibri;\n           background-color:#373737;\">\n<h2 style=\"text-align: center;\n           padding: 10px;\n           color:#FFFFFF;\">\n======= Playground Dec 2021 =======\n<\/h2>\n<\/div>","88b9cbf0":"This notebook is for submission to the Playground of Dec 2021. A simple Keras sequential neural network has been usedk. Different configuration of kernel initizlizers and activation functions have been experimented for performance comparison. No. of neurons and layers will be experimented later. \n\nSome codes are referred and copied from other notebooks.\n\u200b\n## Summary\n* Read the training and testing data sets with memory optimization  \n* Perform EDA to examine the data and decide which features can be dropped\n* Initialize  a 3-layer Keras sequential neural network with following model configuration\n    * Kernel initializer of \"lecun_normal\" and \"he_normal\"\n    * Activation function of \"selu\", \"relu\", \"elu\" and \"swish\"\n* Get the optimal models for cross-validation and data submission\n\u200b\n\n## Reference\n* \"TPS - Oct 2021 Model with Memory reduced\" by S T MOHAMMED @stmohd (URL: https:\/\/www.kaggle.com\/stmohd\/tps-oct-2021-model-with-memory-reduced)\n* \"TPS - Nov 2021 - NN\" by \u015eAFAK T\u00dcRKELI @sfktrkl (URL: [https:\/\/www.kaggle.com\/sfktrkl\/tps-nov-2021-nn](https:\/\/www.kaggle.com\/sfktrkl\/tps-nov-2021-nn))","368add50":"### From the value_counts() function above, there is only 1 instance for class 5.  Thus, treat it as outlier and remove it from the dataset","6f557123":"# Memory optimization","ddf6e414":"# Model -  Kears NN","778d5e99":"# Submission data","4354f9e3":"# Distribution of Target","074ec0b1":"## Training History\n\nThe following configuration had been tried.\n\n    # layers.Dense(64, activation='selu')      \n    # layers.Dense(64, kernel_initializer='lecun_normal', activation='selu')    \n    # layers.Dense(64, kernel_initializer='he_normal', activation='relu')      \n    # layers.Dense(64, kernel_initializer='he_normal', activation='elu')\n    # layers.Dense(64, activation='swish')\n\n```\nConfiguration 1: \n    callbacks: EarlyStopping min_delta=0.001, patience=20\n    EPOCHS: 50, BATCH_SIZE: 512, N_SPLITS: 5\n    150 neurons, activation='selu', BatchNormalization\n    70 neurons, activation='selu', BatchNormalization\n    40 neurons, activation='selu', BatchNormalization\n    7 neurons, activation='softmax'\n    \n    Overall Mean AUC:  0.9608532499999999\n```\n```\nConfiguration 2: \n    callbacks: EarlyStopping min_delta=0.001, patience=20\n    EPOCHS: 50, BATCH_SIZE: 512, N_SPLITS: 5\n    150 neurons, activation='selu', kernel_initializer='lecun_normal', BatchNormalization\n    70 neurons, activation='selu', kernel_initializer='lecun_normal', BatchNormalization\n    40 neurons, activation='selu', kernel_initializer='lecun_normal', BatchNormalization\n    7 neurons, activation='softmax'\n    \n    Overall Mean AUC:  0.96171275\n```\n```\nConfiguration 3: \n    callbacks: EarlyStopping min_delta=0.001, patience=20\n    EPOCHS: 50, BATCH_SIZE: 512, N_SPLITS: 5\n    150 neurons, activation='relu', kernel_initializer='he_normal', BatchNormalization\n    70 neurons, activation='relu', kernel_initializer='he_normal', BatchNormalization\n    40 neurons, activation='relu', kernel_initializer='he_normal', BatchNormalization\n    7 neurons, activation='softmax'\n    \n    Overall Mean AUC: 0.9615895\n```\n```\nConfiguration 4: \n    callbacks: EarlyStopping min_delta=0.001, patience=20\n    EPOCHS: 50, BATCH_SIZE: 512, N_SPLITS: 5\n    150 neurons, activation='swish', BatchNormalization\n    70 neurons, activation='swish', BatchNormalization\n    40 neurons, activation='swish', BatchNormalization\n    7 neurons, activation='softmax'\n    \n    Overall Mean AUC: 0.9612097500000001\n```    \n```\nConfiguration 5: \n    callbacks: EarlyStopping min_delta=0.001, patience=20\n    EPOCHS: 50, BATCH_SIZE: 512, N_SPLITS: 5\n    150 neurons, activation='elu', kernel_initializer='he_normal', BatchNormalization\n    70 neurons, activation='elu', kernel_initializer='he_normal', BatchNormalization\n    40 neurons, activation='elu', kernel_initializer='he_normal', BatchNormalization\n    7 neurons, activation='softmax'\n    \n    Overall Mean AUC: 0.96141325\n```\n\n---\n\n","11038d20":"# About this notebook","df266f83":"# Preparation of model data","5bda6efa":"# Statistics of each variable","df4b02c5":"#### From the describe() functions above, the variable Soil_Type7 and Soil_Type15 can be removed due to same value for all instances"}}