{"cell_type":{"c874e1f9":"code","e3d4eea0":"code","f12b3198":"code","b7866adc":"code","ae36d6f6":"code","b479b785":"code","fc625843":"code","1de46a80":"code","dc86654e":"code","f1c6df93":"code","f5f72699":"code","3349acd2":"code","9f20c866":"code","19f3386f":"code","8f2cfbe5":"code","5e9f01fc":"code","d47fd140":"code","6ac0048e":"code","cd28501a":"code","dfab989a":"code","b1ecd3b3":"code","bdd05dfc":"code","09ffa321":"code","d5cd6d72":"code","2c97e332":"code","19cd910a":"code","7949016f":"code","550c70fa":"code","0ce02cdc":"code","140ac292":"code","60211abb":"code","bbb1795f":"code","13d64bf7":"code","bf7b42f4":"code","cb7f967c":"code","56f859b0":"code","b30f1eff":"code","966e8074":"code","bd399732":"code","f034b7bc":"code","4ce75539":"code","b35c6bac":"code","061657e6":"code","fcb53d3f":"code","ed4fd39e":"code","fd6b81f4":"code","87d751ac":"code","4a7c9876":"code","f17e84ed":"code","719fdfea":"code","184b59db":"code","5f388438":"code","88ef15d2":"code","570a159a":"code","cdec6a36":"code","3efb2c4b":"code","c8281ea6":"code","f9c3b858":"code","1790522f":"code","7010d827":"code","d18eab6a":"code","474b21f9":"code","615dcb57":"code","69265114":"code","eb250203":"code","e96bbc3c":"code","d40ba2e3":"code","cf6fbf2b":"markdown","0fcac67a":"markdown","c4a68eb6":"markdown","d38f3659":"markdown","9bcc3c7e":"markdown","4eb90605":"markdown","f10eb553":"markdown","584a5899":"markdown","e5956550":"markdown","92247a68":"markdown","476b8c4a":"markdown","11e074da":"markdown","78df3735":"markdown","960f616b":"markdown","a37ba356":"markdown","da102b83":"markdown","378f3aa8":"markdown","9ee62a68":"markdown","557097df":"markdown","aaa7d8e0":"markdown","25d29318":"markdown","0dbfd712":"markdown","86275c18":"markdown","a181c733":"markdown","208a7d70":"markdown","d6647e79":"markdown","cb9c0219":"markdown","bb6e3ae2":"markdown","b4cb900c":"markdown","6f21d833":"markdown","e34602a8":"markdown","5a22bc37":"markdown","28fdeb73":"markdown","8187ad3c":"markdown","a87a8d43":"markdown","67a5ca92":"markdown","2ce33f2e":"markdown","3c0b0391":"markdown","638793d1":"markdown","d7ac23dc":"markdown","0bc20618":"markdown","bee37862":"markdown","c150ae67":"markdown","d72c7265":"markdown","edde1683":"markdown","3f7b955d":"markdown","16e88d5b":"markdown","6abd1f6a":"markdown","795ef6d7":"markdown","55383931":"markdown","2111eace":"markdown","44d5ac7e":"markdown","6c6ad6b3":"markdown","6377e04e":"markdown","874b3476":"markdown","974e440c":"markdown","c1070e3d":"markdown","44ab2014":"markdown","71d9935a":"markdown","39f313c7":"markdown","32e61561":"markdown"},"source":{"c874e1f9":"%matplotlib inline\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom tqdm import tqdm, tqdm_notebook\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_colwidth', None)\n#pd.set_option('display.max_rows', None)\n\nfrom glob import glob\n\nimport re\nimport gc\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.metrics import roc_auc_score, recall_score, confusion_matrix, precision_score, roc_curve\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display\n\nimport plotly.express as px #Plotly Express\n\nfrom plotly.offline import iplot\n\n#pd.options.plotting.backend = \"plotly\"\n#to link plotly to pandas\nimport cufflinks as cf\ncf.go_offline()\ncf.set_config_file(offline = False, world_readable = True)\n\nplt.rcParams[\"figure.figsize\"] = (12, 8)\nplt.rcParams['axes.titlesize'] = 16\nplt.style.use('seaborn-whitegrid')\nsns.set_palette('Set3_r')\n\nimport os\nprint(os.listdir('..\/input\/'))\n\nimport warnings\nwarnings.simplefilter('ignore')\n\nfrom time import time, strftime, gmtime\nstart = time()\nimport datetime\nprint(str(datetime.datetime.now()))","e3d4eea0":"df = pd.read_csv('\/kaggle\/input\/telecom-users-dataset\/telecom_users.csv')\nprint(df.shape)\ndf.head()","f12b3198":"df.describe().T","b7866adc":"df.info()","ae36d6f6":"df.drop('Unnamed: 0', axis = 1, inplace = True)","b479b785":"print(f\"Number of Unique Customers: {df['customerID'].nunique()}\")","fc625843":"for v in df['TotalCharges']:\n    try:\n        np.float(v)\n    except Exception as e:\n        print(e, v)","1de46a80":"def convert_float(x):\n    try:\n        return np.float(x)\n    except:\n        return np.nan\ndf['TotalCharges'] = df['TotalCharges'].apply(convert_float)","dc86654e":"missing = df.isna().sum().reset_index()\nmissing.columns = ['features', 'total_missing']\nmissing['percent'] = (missing['total_missing'] \/ len(df)) * 100\nmissing.index = missing['features']\ndel missing['features']\n\nmissing['total_missing'].iplot(kind = 'bar', \n                               title = 'Missing Values Count in Dataset',\n                               xTitle = 'Features',\n                               yTitle = 'Count',\n                               colors = 'Red')\nmissing.T","f1c6df93":"df['TotalCharges'] = df['TotalCharges'].fillna(df['TotalCharges'].mean())\ndf['TotalCharges'].isna().sum()","f5f72699":"ax = sns.countplot(data = df, x = 'Churn')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","3349acd2":"fig, ax = plt.subplots(1, 4, figsize = (16, 6))\nax = ax.flatten()\nfor i, c in enumerate(['SeniorCitizen', 'tenure', 'MonthlyCharges', 'TotalCharges']):\n    sns.boxplot(data = df, x = c, ax = ax[i])\nfig.tight_layout()","9f20c866":"fig, ax = plt.subplots(1, 4, figsize = (16, 6))\nax = ax.flatten()\nfor i, c in enumerate(['SeniorCitizen', 'tenure', 'MonthlyCharges', 'TotalCharges']):\n    sns.violinplot(data = df, x = c, ax = ax[i])\nfig.tight_layout()","19f3386f":"sns.kdeplot(data = df, x = 'MonthlyCharges', shade = True, color = 'Grey')\nplt.figtext(0.5, 0.03, 'Figure 1', ha = 'center', color = 'Green');","8f2cfbe5":"sns.kdeplot(data = df[df['Churn'] == 'Yes'], x = 'MonthlyCharges', shade = True, label = 'Churn', color = 'Blue')\nsns.kdeplot(data = df[df['Churn'] == 'No'], x = 'MonthlyCharges', shade = True, label = 'No Churn', color = 'Green')\nplt.figtext(0.5, 0.03, 'Figure 2', ha = 'center', color = 'Green');\nplt.legend();","5e9f01fc":"sns.kdeplot(data = df, x = 'TotalCharges', shade = True, color = 'Purple')\nplt.figtext(0.5, 0.03, 'Figure 1', ha = 'center', color = 'Green');","d47fd140":"sns.kdeplot(data = df[df['Churn'] == 'Yes'], x = 'TotalCharges', shade = True, label = 'Churn', color = 'Blue')\nsns.kdeplot(data = df[df['Churn'] == 'No'], x = 'TotalCharges', shade = True, label = 'No Churn', color = 'Green')\nplt.figtext(0.5, 0.03, 'Figure 2', ha = 'center', color = 'Green');\nplt.legend();","6ac0048e":"print(f\"Max. TotalCharges: {df['TotalCharges'].max()}\")\nprint(f\"Min. TotalCharges: {df['TotalCharges'].min()}\")\nprint(f\"Avg. TotalCharges: {round(df['TotalCharges'].mean(), 2)}\")","cd28501a":"sns.kdeplot(data = df, x = 'tenure', shade = True, color = 'Gold')\nplt.figtext(0.5, 0.03, 'Figure 1', ha = 'center', color = 'Green');","dfab989a":"sns.kdeplot(data = df[df['Churn'] == 'Yes'], x = 'tenure', shade = True, label = 'Churn', color = 'Blue')\nsns.kdeplot(data = df[df['Churn'] == 'No'], x = 'tenure', shade = True, label = 'No Churn', color = 'Green')\nplt.figtext(0.5, 0.03, 'Figure 2', ha = 'center', color = 'Green');\nplt.legend();","b1ecd3b3":"print(f\"Max Tenure: {df['tenure'].max()}\")\nprint(f\"Min Tenure: {df['tenure'].min()}\")\nprint(f\"Avg. Tenure: {round(df['tenure'].mean(), 2)}\")","bdd05dfc":"plt.figure(figsize = (20, 10))\nplt.subplot(1, 3, 1)\nsns.kdeplot(data = df[df['Churn'] == 'Yes'], x = 'tenure', shade = True, label = 'Churn - Tenure', \n            color = 'Gold')\nplt.legend()\nplt.figtext(0.2, 0.05, 'Figure 1', ha = 'center', color = 'Green');\nplt.subplot(1, 3, 2)\nsns.kdeplot(data = df[df['Churn'] == 'Yes'], x = 'TotalCharges', shade = True, label = 'Churn - TotalCharges', \n            color = 'Green')\nplt.legend()\nplt.figtext(0.5, 0.05, 'Figure 2', ha = 'center', color = 'Green');\nplt.subplot(1, 3, 3)\nsns.kdeplot(data = df[df['Churn'] == 'Yes'], x = 'MonthlyCharges', shade = True, label = 'Churn - MonthlyCharges', \n            color = 'Blue')\nfig.tight_layout()\nplt.figtext(0.8, 0.05, 'Figure 3', ha = 'center', color = 'Green');\nplt.legend();","09ffa321":"features = ['MonthlyCharges', 'TotalCharges', 'tenure', 'Churn']\ntemp = df[features].copy()\ntemp['Churn'] = temp['Churn'].map({'Yes': 1, 'No': 0})\ncorr1 = temp[features].corr(method = 'pearson')\n\nfig = plt.figure(figsize = (10, 8))\nmask = np.triu(np.ones_like(corr1, dtype = bool))\nsns.heatmap(corr1, mask = mask, annot = True, cmap = 'PiYG', vmin = -1, vmax = +1)\nplt.title('Pearson Correlation')\nplt.xticks(rotation = 0)\nplt.show()","d5cd6d72":"def plot_dual(df, feature):\n    plt.figure(figsize = (16, 10))\n    plt.subplot(1, 2, 1)\n    pct = df[feature].value_counts().values \/ np.sum(df[feature].value_counts()) * 100\n    df[feature].value_counts().plot.pie(shadow = True, explode = (pct == min(pct)) * 0.1, title = feature, \n                                      autopct = '%1.2f%%')\n    plt.figtext(0.3, 0.05, 'Figure 1', ha = 'center', color = 'Green');\n\n    plt.subplot(1, 2, 2)\n    ax = sns.countplot(data = df, x = feature, hue = 'Churn', palette = 'PuBuGn_r')\n    total = len(df)\n    for p in ax.patches:\n        percentage = f\"{100 * p.get_height() \/ total:.1f}%\\n\"\n        ax.annotate(percentage, (p.get_x() + p.get_width() \/ 2, p.get_height()), ha = 'center', va = 'center')\n    plt.figtext(0.8, 0.05, 'Figure 2', ha = 'center', color = 'Green')\n    plt.show()","2c97e332":"#Percentage of churn and no churn among sub categories\ndef calc_percentage(feature):\n    temp = df.groupby([feature, 'Churn']).agg({'Churn': 'count'}).rename({'Churn': 'Count'})\n    temp['Percent'] = [(temp.loc[i, j].values[0] \/ int(temp.loc[i].sum())) * 100 for i in temp.index.levels[0] \n                       for j in temp.index.levels[1]]\n    temp['Percent'] = temp['Percent'].round(2)\n    return temp","19cd910a":"plot_dual(df, 'SeniorCitizen')\ncalc_percentage('SeniorCitizen')","7949016f":"plot_dual(df, 'gender')\ncalc_percentage('gender')","550c70fa":"plot_dual(df, 'Partner')\ncalc_percentage('Partner')","0ce02cdc":"plot_dual(df, 'Dependents')\ncalc_percentage('Dependents')","140ac292":"plot_dual(df, 'PaperlessBilling')\ncalc_percentage('PaperlessBilling')","60211abb":"plot_dual(df, 'PhoneService')\ncalc_percentage('PhoneService')","bbb1795f":"def plot_dual2(df, feature):\n    sns.set_palette('Pastel2_r')\n    plt.figure(figsize = (16, 10))\n    plt.subplot(1, 2, 1)\n    pct = df[feature].value_counts().values \/ np.sum(df[feature].value_counts()) * 100\n    df[feature].value_counts().plot.pie(shadow = True, explode = (pct == min(pct)) * 0.1, title = feature, \n                                      autopct = '%1.2f%%')\n    plt.figtext(0.3, 0.05, 'Figure 1', ha = 'center', color = 'Green');\n\n    plt.subplot(1, 2, 2)\n    ax = sns.countplot(data = df, x = feature, hue = 'Churn', palette = 'Set2_r')\n    total = len(df)\n    for p in ax.patches:\n        percentage = f\"{100 * p.get_height() \/ total:.1f}%\\n\"\n        ax.annotate(percentage, (p.get_x() + p.get_width() \/ 2, p.get_height()), ha = 'center', va = 'center')\n    plt.figtext(0.8, 0.05, 'Figure 2', ha = 'center', color = 'Green')\n    plt.show()","13d64bf7":"plot_dual2(df, 'MultipleLines')\ncalc_percentage('MultipleLines')","bf7b42f4":"plot_dual2(df, 'InternetService')\ncalc_percentage('InternetService')","cb7f967c":"plot_dual2(df, 'OnlineSecurity')\ncalc_percentage('OnlineSecurity')","56f859b0":"plot_dual2(df, 'OnlineBackup')\ncalc_percentage('OnlineBackup')","b30f1eff":"plot_dual2(df, 'DeviceProtection')\ncalc_percentage('DeviceProtection')","966e8074":"plot_dual2(df, 'TechSupport')\ncalc_percentage('TechSupport')","bd399732":"plot_dual2(df, 'StreamingTV')\ncalc_percentage('StreamingTV')","f034b7bc":"plot_dual2(df, 'StreamingMovies')\ncalc_percentage('StreamingMovies')","4ce75539":"plot_dual2(df, 'Contract')\ncalc_percentage('Contract')","b35c6bac":"plot_dual2(df, 'PaymentMethod')\ncalc_percentage('PaymentMethod')","061657e6":"df['Auto_Payment'] = df['PaymentMethod'].apply(lambda x: 'Automatic' if 'automatic' in str(x).rsplit(' ', 2)[-1] else 'Manual')","fcb53d3f":"plot_dual2(df, 'Auto_Payment')\ncalc_percentage('Auto_Payment')","ed4fd39e":"df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})","fd6b81f4":"temp = pd.pivot_table(data = df, index = 'Contract', columns = ['gender', 'SeniorCitizen'], \n                      values = ['Churn', 'MonthlyCharges'], aggfunc = 'mean', fill_value = 0)\ntemp.columns = temp.columns.ravel()\n#Drop columns with all 0\n#temp = temp.loc[:, temp.sum(axis = 0) != 0].T\ntemp = temp.T\ntemp.style.background_gradient(sns.light_palette('#2ecc71', as_cmap = True))","87d751ac":"sns.set_palette('Set1')\nfig, ax = plt.subplots(1, 2, figsize = (20, 8))\n\nt = 'Avg. Churn for Group: Gender-SeniorCitizen wrt Contract'\ntemp.loc[temp.index[:4]].plot(kind = 'line', title = t, ax = ax[0])\n\nt = 'Avg. MonthlyCharges for Group: Gender-SeniorCitizen wrt Contract'\ntemp.loc[temp.index[4:8]].plot(kind = 'line', title = t, ax = ax[1], rot = 30);","4a7c9876":"temp = pd.pivot_table(data = df, index = 'InternetService', columns = ['gender', 'SeniorCitizen', 'Partner', 'Dependents'], \n                      values = ['Churn'], aggfunc = 'mean', fill_value = 0)\ntemp.columns = temp.columns.ravel()\n#Drop columns with all 0\n#temp = temp.loc[:, temp.sum(axis = 0) != 0].T\ntemp = temp.T\ntemp.style.background_gradient(sns.light_palette('#2ecc71', as_cmap = True))","f17e84ed":"t = 'Avg. Churn for Group: Gender-SeniorCitizen-Partner-Dependents wrt InternetService'\ntemp.loc[temp.index].plot(kind = 'line', title = t, figsize = (20, 10), rot = 30);","719fdfea":"temp = pd.pivot_table(data = df[df['SeniorCitizen'] == 0], index = 'InternetService', columns = ['gender', 'Partner', 'Dependents'], \n                      values = ['Churn'], aggfunc = 'mean', fill_value = 0)\ntemp.columns = temp.columns.ravel()\n#Drop columns with all 0\n#temp = temp.loc[:, temp.sum(axis = 0) != 0].T\ntemp = temp.T\ntemp.style.background_gradient(sns.light_palette('#2ecc71', as_cmap = True))","184b59db":"t = 'Avg. Churn for Group: Gender-Partner-Dependents wrt InternetService (Not SeniorCitizen)'\ntemp.loc[temp.index].plot(kind = 'line', title = t, figsize = (20, 10), rot = 30);","5f388438":"temp = pd.pivot_table(data = df[(df['SeniorCitizen'] == 0) & (df['Churn'] == 1)], index = 'InternetService', columns = ['gender', 'Partner', 'Dependents'], \n                      values = ['MonthlyCharges'], aggfunc = 'mean', fill_value = 0)\ntemp.columns = temp.columns.ravel()\n#Drop columns with all 0\n#temp = temp.loc[:, temp.sum(axis = 0) != 0].T\ntemp = temp.T\n#temp.style.background_gradient(sns.light_palette('#2ecc71', as_cmap = True))\nt = 'Avg. MonthlyCharges for Group: Gender-Partner-Dependents wrt InternetService (No SeniorCitizen & Churned)'\ntemp.loc[temp.index].plot(kind = 'line', title = t, figsize = (20, 10), rot = 30);","88ef15d2":"categorical_features = [c for c in df.columns if (df[c].dtype == 'object')]\nnumerical_features = [c for c in df.columns if (c not in categorical_features) & (c != 'Churn')]\ncategorical_features.remove('customerID')\ncategorical_features, numerical_features","570a159a":"lbl = LabelEncoder()\n\nfor c in df[categorical_features]:\n    print(f\"Label Encoding Categorical Feature - {c.upper()}\")\n    df[c] = lbl.fit_transform(df[c])\n    print(dict(zip(lbl.classes_, lbl.transform(lbl.classes_))))\nprint('Label Encoding done...')\ndf[categorical_features].head(2)","cdec6a36":"std = StandardScaler()\n\ndf[numerical_features] = std.fit_transform(df[numerical_features])\nprint('Standardizing Numerical Features done...')\ndf[numerical_features].head(2)","3efb2c4b":"X = df.drop(['Churn', 'customerID'], axis = 1)\ny = df['Churn'].copy()","c8281ea6":"def plot_confusion(mat):\n    plt.figure(figsize = (8, 4))\n    sns.heatmap(pd.DataFrame(mat), annot = True, annot_kws = {\"size\": 25}, cmap = 'Blues', fmt = 'g')\n    plt.title('Confusion matrix', y = 1.1, fontsize = 22)\n    plt.ylabel('Actual', fontsize = 18)\n    plt.xlabel('Predicted', fontsize = 18)\n    plt.show()","f9c3b858":"def plot_roc_curve(ytrue, ypred):\n    plt.figure(figsize = (8, 8))\n    fpr, tpr, thresholds = roc_curve(ytrue, ypred)\n    g = np.sqrt(tpr * (1 - fpr))\n    idx = np.argmax(g)\n    print(f\"Best Threshold: {thresholds[idx]}, G-Mean: {g[idx]}\")\n    plt.plot([0,1], [0,1], linestyle = '--')\n    plt.plot(fpr, tpr, marker = '.', label = 'LGBM')\n    plt.scatter(fpr[idx], tpr[idx], marker = 'o', color = 'r', label = 'Best')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC Curve')\n    plt.legend()\n    plt.show()\n    return thresholds[idx]","1790522f":"from xgboost import XGBClassifier\n\nnum_pos_samples = y.value_counts().values[1]\nnum_neg_samples = y.value_counts().values[0]\nnum_neg_samples \/ num_pos_samples\n\nxgb_params = {\n         'objective': 'binary:logistic',\n         'lambda': 0.0030282073258141168, \n         'alpha': 0.01563845128469084,\n         'colsample_bytree': 0.55,\n         'subsample': 0.7,\n         'learning_rate': 0.01,\n         'max_depth': 9,\n         'random_state': 2020, \n         'min_child_weight': 257,\n         'eval_metric': 'auc',\n         'seed': 2021,\n         'scale_pos_weight': num_neg_samples \/ num_pos_samples\n         }","7010d827":"n_folds = 5\npreds_xg = []\nmean_roc = []\nmean_recall = []\nmean_precision = []\ncv_preds = np.zeros(len(y), dtype = 'float32')\n\nskf = StratifiedKFold(n_splits = n_folds)\n\nfor i, (trn_idx, val_idx) in enumerate(skf.split(X, y)):\n    print(f\"Fold: {i + 1}\")\n    Xtrain, ytrain = X.iloc[trn_idx], y[trn_idx]\n    Xvalid, yvalid = X.iloc[val_idx], y[val_idx]\n    print(Xtrain.shape, ytrain.shape, Xvalid.shape, yvalid.shape)\n    \n    clf = XGBClassifier(**xgb_params)\n    clf.fit(Xtrain, ytrain)\n    valid_preds = clf.predict_proba(Xvalid)[:, 1]\n    cv_preds[val_idx] = valid_preds\n    \n    thr = plot_roc_curve(yvalid, valid_preds)\n    \n    conf_mat = confusion_matrix(yvalid, valid_preds > thr)\n    plot_confusion(conf_mat)\n    \n    print('XGBOOST ROC_AUC_SCORE: ', roc_auc_score(yvalid, valid_preds))\n    print('XGBOOST RECALL SCORE: ', recall_score(yvalid, valid_preds > thr))\n    print('XGBOOST PRECISION SCORE: ', precision_score(yvalid, valid_preds > thr))\n    mean_roc.append(roc_auc_score(yvalid, valid_preds))\n    mean_recall.append(recall_score(yvalid, valid_preds > thr))\n    mean_precision.append(precision_score(yvalid, valid_preds > thr))\n    \n    preds_xg.append(valid_preds)\n    print()\nprint(f\"Mean ROC_AUC: {round(np.mean(mean_roc), 2)}\")\nprint(f\"Mean Recall: {round(np.mean(mean_recall), 2)}\")\nprint(f\"Mean Precision: {round(np.mean(mean_precision), 2)}\")\n\nprint(f\"CV ROC_AUC: {roc_auc_score(y, cv_preds):.4f}\")","d18eab6a":"import xgboost as xgb\n\nxgb.plot_importance(clf);","474b21f9":"import shap\nshap.initjs()","615dcb57":"explainer = shap.TreeExplainer(clf)\nshap_values = explainer.shap_values(Xtrain)","69265114":"shap.summary_plot(shap_values, Xtrain)","eb250203":"#Force plot for target '1'\nshap.force_plot(explainer.expected_value, shap_values[1], Xtrain.iloc[0, :])","e96bbc3c":"for name in ['tenure', 'MonthlyCharges', 'Contract', 'OnlineSecurity']:\n    shap.dependence_plot(name, shap_values, Xtrain)","d40ba2e3":"finish = time()\nprint(strftime(\"%H:%M:%S\", gmtime(finish - start)))","cf6fbf2b":"__StreamingTV__","0fcac67a":"<span style=\"color:green\">\n    \n- The percentage in Figure 2 is overall - with respect to the full dataset\n- The percentage in the pandas table above is wrt the sub category (senior or not) which gives more insight into the effect of the particular category on the target variable\n\n- The probability of Churn is more among seniors groups than non-seniors\n- Later we will look into interactions among multiple variable with respect to the target variable","c4a68eb6":"<center><h2 style=\"background-color: #B0E0E6;\">Dual Plots<\/h2>","d38f3659":"__DeviceProtection__","9bcc3c7e":"__Let's have a classification model to predict target and check the features that influence the decision__","4eb90605":"__- TotalCharges has a dtype 'object', let's examine the values and convert it to float__","f10eb553":"__PaymentMethod__","584a5899":"<span style=\"color:green\">\n\n- The probability of churn among customers who have Partner is lower compared to customers who do not have Partner","e5956550":"<center><h2 style=\"background-color: #B0E0E6;\">Distribution Charts<\/h2>","92247a68":"__StreamingMovies__","476b8c4a":"__MonthlyCharges__","11e074da":"__Partner__","78df3735":"__TechSupport__","960f616b":"<span style=\"color:green\">\n\n- Like Partner category, the probability of churn among customers with Dependents is lower compared to customers without","a37ba356":"<span style=\"color:green\">\n\n- Most of the customer who leave the telecom firm left early - within 20 months\n- Let's check the Churn customers' TotalCharges and Tenure","da102b83":"__Standardize Numerical Features__","378f3aa8":"__InternetService__","9ee62a68":"<span style=\"color:green\">\n\n- The churn is almost equal for customers who avail PhoneService and who don't\n- The reason could be something do with the service providers QoS","557097df":"<span style=\"color:green\">\n    \n- Compared to Figure 1, Figure 2 gives us more insight about the customers' behaviour\n- Customers who are charged higher MonthlyCharges tend to churn more often than customers who are charges lesser\n-  As the MonthlyCharges goes up, churn does too","aaa7d8e0":"__Contract__","25d29318":"__Gender__","0dbfd712":"<font color='black'>\n\n- Most of the customers with longer contract period stick with the service provider\n- Usually serivce providers levy a penalty if customers break the contract within the period\n- The churn is more with customers who don't have a contract (month to month billing)\n- It would be interesting to check which group of customers have month to month contract","86275c18":"- According to the feature importance of XGBoost Contract, MonthlyCharges, Tenure are the top 3 important fetures that decides the target variable\n- Let's check the same with Shap values","a181c733":"__Impute the NaN in TotalCharges with its mean value__","208a7d70":"<font color='black'>\n\n- Clearly the churn is high for the customers who have FiberOptic service\n- Although the churn is higher for male\/female with no Partner\/Dependents\n- The churn is high for the group who are male\/female with Dependents as well","d6647e79":"# Task\n\nBuilding a model to predict Churn based on tested hypotheses and identified relationships","cb9c0219":"__OnlineBackup__","bb6e3ae2":"__PhoneService__","b4cb900c":"<center><h2 style=\"background-color: #B0E0E6;\">Target Distribution<\/h2>","6f21d833":"__Let's check the groups who are not SeniorCitizens__","e34602a8":"<span style=\"color:green\">\n\nCustomers' Gender doesn't seem to play a role in Churn or no Churn","5a22bc37":"<span style=\"color:green\">\n\n- The churn is almost in the same range for all categories of MultipleLines customers, but slightly higher for those who have them","28fdeb73":"__Label Encode Categorical Features__","8187ad3c":"__Tenure__","a87a8d43":"__MultipleLines__","67a5ca92":"__Let's look at how the above 3 features are correlated with the target__","2ce33f2e":"- Dependence Plot tells whether the relationship between the target and the variable is linear, monotonic, or more complex\n- The feature for which we plotted dependence plot interacts with the feature name on the right side of the plot\n- Each dot represents a row of the data. The horizontal location is the actual value from the dataset, and the vertical location shows what having that value did to the prediction\n- If the slope of plot trends upward it indicates that higher values of that particular feature increases the model's prediction to be 1","3c0b0391":"<span style=\"color:green\">\n\n- Customers who don't have OnlineBackup service are the ones who churn alot","638793d1":"__SeniorCitizen__","d7ac23dc":"<span style=\"color:green\">\n    \n- Spliting the data into Churn and No Churn and plotting them reveals more insight\n- Customers tend to churn more when the TotalCharges is lesser than 2000","0bc20618":"<span style=\"color:green\">\n\n- Looks like the Customers who have no OnlineSecurity are the same customers who have no FiberOptic service","bee37862":"__OnlineSecurity__","c150ae67":"- Features in red color influence positively, i.e. drag the prediction value closer to 1, features in blue color does the opposite\n- 'Contract' is the most influential feature for the output to be 1\n- 'OnlineSecurity' is next most influential feature\n- 'MonthlyCharges' is the 3rd influential feature thats decides the target variable\n- Higher values of 'tenure' pushes the prediction towards '0'\n- Each arrow\u2019s size represents the magnitude of the corresponding feature\u2019s effect\n- The 'base value' marks the model\u2019s average prediction over the training set","d72c7265":"- Contract: {'Month-to-month': 0, 'One year': 1, 'Two year': 2}\n- Lower values of Contract pushes the target to '1'\n- Higher values of 'tenure', pushes the prediction to '0' - blue ","edde1683":"<center><h2 style=\"background-color: #B0E0E6;\">Missing values Check<\/h2>","3f7b955d":"<font color='black'>\n- Customers who do payment by Electronic check method are the ones who churn alot, it's quite high in that group\n","16e88d5b":"<code>__XGBOOST Classifier__<\/code>","6abd1f6a":"<span style=\"color:green\">\n    \n- Churn Customers in Tenure and TotalCharges follow the same trend - they leaving the firm within 20 months\/2000 TotalCharges\n- So on an average when the monthly charges is around 100 (2000\/20) which can be seen in Figure 3 around 80 - 100","795ef6d7":"# Exploratory Data Analysis","55383931":"<font color='black'>\n    \n- From the graphs above, we can see churn is more for the group Female\/Male who is a SeniorCitizen\n- Although their Monthly charges is lower than others, they churn\n","2111eace":"<font color='black'>\n\n- Clearly the churn is high for the customers who have FiberOptic service\n- Although the churn is higher for male\/female with no Partner\/Dependents\n- The churn is high for the group who are male\/female with Dependents as well\n","44d5ac7e":"<center><h2 style=\"background-color: #B0E0E6;\">Outlier Check using BoxPlots<\/h2>","6c6ad6b3":"<span style=\"color:green\">\n\n- Churn is very low among customers who do not have InternetService\n- On the other hand it is high in customers who availed Fiber Optic service from the service provider","6377e04e":"<span style=\"color:green\">\n\n- Usually paper-less billing is preferred by younger generations and they are the ones more likely to switch service providers depending on the discounts\/offers offered by the service providers and influence from peers\n- This trend is evident in the table above, churn is more with customers who prefer paper-less billing","874b3476":"__PaperlessBilling__","974e440c":"__Auto_Payment__","c1070e3d":"<span style=\"color:green\">\n\n- Almost of the customers who have subscribed to StreamingMovies service have also taken StreamingTv and their churn is also mosre or less equal","44ab2014":"<font color='black'>\n- Churn is more in the manual payment mode\n","71d9935a":"__TotalCharges__","39f313c7":"<code>__Map targets to binary__<\/code>","32e61561":"<span style=\"color:green\">\n\n- The customer profile for DeviceProtection is almost same as the OnlineBackup category"}}