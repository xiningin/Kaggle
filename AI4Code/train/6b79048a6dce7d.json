{"cell_type":{"34c31a43":"code","c6e2e4ff":"code","f79670da":"code","435de477":"code","412979a0":"code","eeb5e24d":"code","d863cfb0":"code","06da5a68":"code","8a9b035b":"code","dd34e88b":"code","f04a4d79":"code","e48cfa95":"code","e8ecd7b1":"code","d4aebff1":"code","e21c3ab8":"code","1c637107":"code","17c82214":"code","b1ce0d32":"code","d3ec13fd":"code","92a4395d":"code","1cd1dc19":"code","8fa5baf0":"code","8507dde9":"code","f871c992":"code","2f3a9cce":"code","c5890fb4":"code","29977c91":"code","7f43fa8d":"code","2e80531b":"code","0e0b8d34":"code","818c6ea4":"code","65be0831":"code","40ead071":"code","78fdd5b1":"code","88008bf0":"code","e7d68abe":"code","98fdce93":"code","030ce580":"code","5a38d2fa":"code","cf51c5f8":"code","f16a07d9":"code","47d55dd9":"code","e058da44":"code","72dd6369":"markdown","c6c7ef49":"markdown"},"source":{"34c31a43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport keras as k\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c6e2e4ff":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport datetime as dt\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nfrom os import listdir, makedirs\nfrom os.path import join, exists, expanduser\nfrom tqdm import tqdm\nfrom sklearn.metrics import log_loss, accuracy_score\nfrom keras.preprocessing import image\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.applications import xception\nfrom keras.applications import inception_v3\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom sklearn.linear_model import LogisticRegression","f79670da":"#%%       Load and Test ResNet50\n#----------------------------------------------\nRESNET50_WEIGHTS = '..\/input\/resnet50_weights_tf_dim_ordering_tf_kernels.h5'\nRESNET50_NOTOP_WEIGHTS = '..\/input\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'","435de477":"# Load Keras' ResNet50 model that was pre-trained against the ImageNet database\nmodel = k.applications.resnet50.ResNet50(weights=RESNET50_WEIGHTS)\n\n# Load the image file, resizing it to 224x224 pixels (required by this model)\nimg = k.preprocessing.image.load_img(\"..\/input\/Kuszma.JPG\", target_size=(224, 224))\n\n# Convert the image to a numpy array\nx = k.preprocessing.image.img_to_array(img)\n\n# Add a forth dimension since Keras expects a list of images\nx = np.expand_dims(x, axis=0)","412979a0":"#%%               Processing\n#----------------------------------------------\n\n# Scale the input image to the range used in the trained network\nx = k.applications.resnet50.preprocess_input(x)","eeb5e24d":"#%%               Prediction\n#----------------------------------------------\n# Run the image through the deep neural network to make a prediction\npredictions = model.predict(x)\n\n# Look up the names of the predicted classes. Index zero is the results for the first image.\npredicted_classes = k.applications.resnet50.decode_predictions(predictions, top=9)\n\nprint(\"This is an image of:\")\n\nfor imagenet_id, name, likelihood in predicted_classes[0]:\n    print(\" - {}: {:2f} likelihood\".format(name, likelihood))\n","d863cfb0":"# Load CIFAR10 data\n(X_train, y_train), (_, _) = k.datasets.cifar10.load_data()","06da5a68":"X_train.shape","8a9b035b":"np.unique(y_train)","dd34e88b":"fig, axes = plt.subplots(3,5, figsize=(16,10))\n\nfor i in range(3):\n    for j in range(5):\n        axes[i, j].imshow(X_train[np.random.randint(50000, size=1)[0]][:,:,:])","f04a4d79":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.2)","e48cfa95":"X_train.shape","e8ecd7b1":"# X_train = X_train.reshape(X_train.shape[0], 30, 30, 3).astype('float32')\n# X_test = X_test.reshape(X_test.shape[0], 3, 224, 224).astype('float32')","d4aebff1":"num_class = 10\n# Convert class vectors to binary class matrices.\ny_train = k.utils.to_categorical(y_train, num_class)\n#y_test = k.utils.to_categorical(y_test, num_class)","e21c3ab8":"pretrained_model = k.applications.resnet50.ResNet50(weights=RESNET50_WEIGHTS)","1c637107":"print('Output_layer_type= {}'.format(pretrained_model.layers[-1]))\nprint('Output_layer_shape= {}'.format(pretrained_model.layers[-1].output_shape))","17c82214":"pretrained_model.layers.pop()","b1ce0d32":"print('Output_layer_type= {}'.format(pretrained_model.layers[-1]))\nprint('Output_layer_shape= {}'.format(pretrained_model.layers[-1].output_shape))","d3ec13fd":"pretrained_model.layers","92a4395d":"len(pretrained_model.layers)","1cd1dc19":"for layer in pretrained_model.layers[0:-21]:\n    layer.trainable = False","8fa5baf0":"from keras.layers import ZeroPadding2D\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D","8507dde9":"model = k.models.Sequential()\nmodel.add(ZeroPadding2D((96, 96), input_shape=(32, 32,  3)))\nmodel.add(pretrained_model)\n#model.add(k.layers.Flatten())\n#model.add(k.layers.GlobalAveragePooling2D())\n#model.add(k.layers.Dense(1024, activation='relu'))\nmodel.add(k.layers.Dense(num_class, activation='softmax'))","f871c992":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","2f3a9cce":"model.summary()","c5890fb4":"print('Input Shape = {}'.format(model.layers[0].input_shape))\nprint('output Shape = {}'.format(model.layers[-1].output_shape))","29977c91":"from keras.preprocessing.image import ImageDataGenerator","7f43fa8d":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)","2e80531b":"test_datagen = ImageDataGenerator(rescale = 1.\/255)","0e0b8d34":"training_set = train_datagen.flow(X_train, y_train, batch_size = 32)","818c6ea4":"test_set = test_datagen.flow(X_test, y_test, batch_size = 32)","65be0831":"import keras\nkeras.__version__","40ead071":"len_tr = len(training_set)\nlen_te = len(test_set)\nprint(len_tr)\nprint(len_te)","78fdd5b1":"# model.fit_generator(training_set,\n#                          samples_per_epoch = len_tr,\n#                          nb_epoch = 25,\n#                          validation_data = test_set,\n#                          nb_val_samples = len_te)","88008bf0":"model.fit_generator(training_set,\n                         samples_per_epoch = len_tr,\n                         nb_epoch = 300)","e7d68abe":"predicto = model.predict_classes(X_test)","98fdce93":"predicto.shape","030ce580":"y_test.shape","5a38d2fa":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, predicto)","cf51c5f8":"predicto","f16a07d9":"y_test","47d55dd9":"name = {0:\"airplane\", 1:\"automobile\", 2:\"bird\", 3:\"cat\", 4:\"deer\", 5:\"dog\", 6:\"frog\", 7:\"horse\", 8:\"ship\", 9:\"truck\"}","e058da44":"fig, axes = plt.subplots(3,5, figsize=(16,10))\n\nfor i in range(3):\n    for j in range(5):\n        r = np.random.randint(10000, size=1)[0]\n        axes[i, j].imshow(X_test[r][:,:,:])\n        #axes[i, j].title('dddd')\n        print('this is a', name[y_test[r][0]], '-------- prediction is:', name[predicto[r]])","72dd6369":"# Transfer Learning","c6c7ef49":"# Predicting from ImageNet ResNet"}}