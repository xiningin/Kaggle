{"cell_type":{"162056b4":"code","9e29cced":"code","0e299c2b":"code","fc907eeb":"code","85df4901":"code","7a0ed6d1":"code","728d98b3":"code","68428912":"code","75b961f6":"code","fd583dfa":"code","b0f9054c":"markdown","e2234be8":"markdown","6ea1f1ec":"markdown","3bdd066c":"markdown","b365a0ab":"markdown","c8fa8644":"markdown"},"source":{"162056b4":"import pandas as pd\nimport numpy as np\nfrom IPython.display import display\nimport gc\nimport ujson as js","9e29cced":"with open(\"..\/input\/tokyo-2021-olympics-complete-grouped-by-type\/tokyo-olympics-all-by-type-2021-08-11.json\", \"r\") as file:\n    data = js.load(file)\n    \nprint(\"Objects in Olympics data: \\n{}\".format(list(data.keys())))","0e299c2b":"def filter_objs(data, objs):\n    ''' Remove objects not in objs '''\n    new_data = {}\n    for obj in objs:\n        new_data[obj] = data[obj]\n    return new_data","fc907eeb":"data = filter_objs(data, objs=[\"Discipline\", \"Medal\", \"Organisation\"])\nprint(\"Filtered objects: \\n{}\".format(list(data.keys())))","85df4901":"# functions for conversion to Pandas dataframe\n\ndef get_df(data, attributes=[], relationships=[]):\n    \n    '''\n    Build dataframe from json data\n    '''\n    \n    def get_value(data, key, subkeys=[]):\n        \n        '''\n        Handle missing values\n        '''\n        \n        try:\n            x = data[key]\n            for i in subkeys:\n                x = x[i]\n        except Exception:\n            x = np.nan\n        return x\n\n    if len(attributes) + len(relationships) == 0:\n        raise ValueError(\"there must be at least one attribute or relationship\")\n    \n    df = pd.DataFrame(\n        [\n            [itemId, *(get_value(item[\"attributes\"], A) for A in attributes), *(get_value(item[\"relationships\"], R, [\"data\", \"id\"]) for R in relationships)]\n            for itemId, item in data.items()\n        ],\n        columns = [\"id\", *attributes, *relationships]\n    )\n    \n    return df.set_index(\"id\")\n\n\ndef insert_names(df_dict):\n    \n    '''\n    Replace items id with their names\n    '''\n    \n    for key in df_dict.keys():\n        for col in df_dict.keys():\n            if not col in df_dict[key].columns:\n                continue\n            df_dict[key].loc[:,col] = df_dict[key].loc[:,col].apply(lambda x: df_dict[col].loc[x,\"name\"] if x in df_dict[col].index else x)\n    \n    return df_dict","7a0ed6d1":"df = {\n    \"discipline\":     get_df(data[\"Discipline\"], attributes=[\"name\", \"description\"]),\n    \"medal\":          get_df(data[\"Medal\"], attributes=[\"medalType\"], relationships=[\"discipline\", \"organisation\"]).rename(columns={\"medalType\": \"type\"}),\n    \"organisation\":   get_df(data[\"Organisation\"], attributes=[\"name\", \"description\"]),\n}\ndf = insert_names(df)\n\nfor item in df.values():\n    display(item.head())","728d98b3":"# missing values\n\nfor name, item in df.items():\n    print(name.capitalize())\n    display(item.isnull().sum())\n    print()","68428912":"df[\"organisation\"].loc[df[\"organisation\"].isnull().any(axis=1)]","75b961f6":"board = pd.DataFrame(df[\"medal\"].groupby([\"discipline\", \"organisation\"]).type.value_counts()).unstack().fillna(value=0).astype(int)\nboard.columns = [\"BRONZE\", \"SILVER\", \"GOLD\"]\nboard[\"score\"] = board.BRONZE + 2*board.SILVER + 3*board.GOLD\nboard.head(10)","fd583dfa":"top = 5 # print top 5 countries\ndiscipline = board.index.get_level_values(0).unique()\n\nprint()\nfor D in discipline:\n    \n    discipline_board = board.loc[D,:].sort_values(\"score\", ascending=False).iloc[:top,:].reset_index()\n    discipline_board.index = [i for i in range(1,discipline_board.shape[0]+1)]\n    \n    print(\"===== {} \".format(D))\n    display(discipline_board)\n    print(\"\\n\")","b0f9054c":"Pandas dataframes are better for working with data, becuase of this each object is used to build a dataframe.","e2234be8":"Not all objects are relevant, because of this only some are kept.","6ea1f1ec":"To assess a score based on earned medals, medal type is transformed to an integer considering `BRONZE = 1`, `SILVER = 2` and `GOLD = 3`.\nThe sum of this scores determines the top countries in each discipline.","3bdd066c":"# Top 5 countries in each discipline","b365a0ab":"Dataframes contain some missing values: there is $1$ organisation without a description;","c8fa8644":"# Dataset"}}