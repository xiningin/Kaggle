{"cell_type":{"7f7cfde4":"code","758864a1":"code","62518059":"code","7d78cc48":"code","e4d31a0e":"code","56d32851":"code","0a37e193":"code","9a08f19d":"code","cf7d50e6":"code","34f56dee":"code","6ac4a65f":"code","220e2015":"code","65b92f69":"code","7d332603":"code","a132c66c":"code","690895bc":"code","87e8176c":"code","915b6e6a":"code","021c32f8":"code","48f20258":"code","68aacf7e":"code","4c54b32b":"code","bb1a715b":"code","3d1f640a":"markdown","925e615e":"markdown","2c1e4ec7":"markdown","df5f02e4":"markdown","278c352f":"markdown","e8d30237":"markdown","9c96c3b2":"markdown","8fd9653d":"markdown","144c7bd2":"markdown","047bb7ce":"markdown","c5ce2982":"markdown","6d9c3260":"markdown","e1e9ee91":"markdown","639f8dd6":"markdown","3d3697fa":"markdown","b5567d8f":"markdown","f477ff22":"markdown","8f01aeea":"markdown","514065d2":"markdown","7ffa091b":"markdown","4eb118c9":"markdown","25564c1c":"markdown","2de7fbb8":"markdown","4d585c6f":"markdown","ecab83e7":"markdown"},"source":{"7f7cfde4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","758864a1":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import chi2_contingency, kruskal, f_oneway\nfrom sklearn.model_selection import train_test_split","62518059":"audi = pd.read_csv(\"\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/audi.csv\")\nmerc = pd.read_csv(\"\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/merc.csv\")\ntoyota = pd.read_csv(\"\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/skoda.csv\")\nprint(audi.columns)\nprint(merc.columns)\nprint(toyota.columns)\naudi[\"Company\"] = \"Audi\"\nmerc[\"Company\"] = \"Mercedes\"\ntoyota[\"Company\"] = \"Toyota\"","7d78cc48":"cars = pd.concat([audi,merc,toyota])\ncars.head()","e4d31a0e":"cars.dtypes","56d32851":"cars.isnull().sum()","0a37e193":"cars.shape","9a08f19d":"fig, axs = plt.subplots(ncols = 3, nrows = 2, figsize=(15,8))\nfor axi,col_name in zip(axs.flat,[\"price\",\"mileage\",\"tax\",\"mpg\",\"engineSize\"]):\n    sns.boxplot(x=\"Company\",y=col_name,data=cars,ax=axi)\nfig.delaxes(ax = axs[1,2])\nfig.tight_layout()\nfig.show()","cf7d50e6":"cars_sample1,cars_sample2 = train_test_split(cars,test_size=0.95,stratify=cars[\"Company\"],random_state=1234)\nfig, axs = plt.subplots(ncols = 3, nrows = 2, figsize=(15,8),sharex=True)\nfor axi,col_name in zip(axs.flat,[\"price\",\"mileage\",\"tax\",\"mpg\",\"engineSize\"]):\n    sns.stripplot(x=\"Company\",y=col_name,data=cars_sample1,ax=axi)\nfig.delaxes(ax = axs[1,2])\nfig.tight_layout()\nfig.show()","34f56dee":"cars_sample1,cars_sample2 = train_test_split(cars,test_size=0.995,stratify=cars[\"Company\"],random_state=1234)\nfig, axs = plt.subplots(ncols = 3, nrows = 2, figsize=(15,8),sharex=True)\nfor axi,col_name in zip(axs.flat,[\"price\",\"mileage\",\"tax\",\"mpg\",\"engineSize\"]):\n    sns.swarmplot(x=\"Company\",y=col_name,data=cars_sample1,ax=axi,size=2)\nfig.delaxes(ax = axs[1,2])\nfig.tight_layout()\nfig.show()","6ac4a65f":"fig, axs = plt.subplots(ncols = 3, nrows = 2, figsize=(15,8),sharex=True)\nfor axi,col_name in zip(axs.flat,[\"price\",\"mileage\",\"tax\",\"mpg\",\"engineSize\"]):\n    sns.violinplot(x=\"Company\",y=col_name,data=cars,ax=axi)\nfig.delaxes(ax = axs[1,2])\nfig.tight_layout()\nfig.show()","220e2015":"fig, axs = plt.subplots(ncols = 3, nrows = 2, figsize=(15,8))\nfor axi,col_name in zip(axs.flat,[\"price\",\"mileage\",\"tax\",\"mpg\",\"engineSize\"]):\n    sns.pointplot(x=\"Company\",y=col_name,data=cars,ax=axi)\nfig.delaxes(ax = axs[1,2])\nfig.tight_layout()\nfig.show()","65b92f69":"sns.pairplot(data=cars,hue=\"Company\")\nplt.show()","7d332603":"fig, axs = plt.subplots(ncols = 2, nrows = 1, figsize=(15,8))\nfor axi,col_name in zip(axs.flat,[\"transmission\",\"fuelType\"]):\n    sns.countplot(data=cars,x=\"Company\",hue=col_name,ax=axi)\nplt.show()","a132c66c":"fig,(ax1,ax2) = plt.subplots(1,2,figsize=(15,8))\ncars.groupby(['Company', 'fuelType'])[\"model\"].count().reset_index().pivot(columns='fuelType', index='Company', values='model').plot(kind=\"bar\",stacked=True,ax=ax1)\ncars.groupby(['Company', 'transmission'])[\"model\"].count().reset_index().pivot(columns='transmission', index='Company', values='model').plot(kind=\"bar\",stacked=True,ax=ax2)\nfig.show()","690895bc":"fig, axs = plt.subplots(ncols = 3, nrows = 2, figsize=(15,8))\nfor axi,col_name in zip(axs.flat,[\"price\",\"mileage\",\"tax\",\"mpg\",\"engineSize\"]):\n    sns.distplot(cars[col_name], kde=True, hist=True,ax=axi)\nfig.delaxes(ax = axs[1,2])\nfig.tight_layout()\nfig.show()","87e8176c":"from statsmodels.graphics.gofplots import qqplot\nfor axi,col_name in zip(axs.flat,[\"price\",\"mileage\",\"tax\",\"mpg\",\"engineSize\"]):\n    qqplot(cars[col_name], line='s')","915b6e6a":"from scipy.stats import shapiro\n\nfor col_name in [\"price\",\"mileage\",\"tax\",\"mpg\",\"engineSize\"]:\n    print(f\"Test results of {col_name} variable is\")\n    stat, p = shapiro(cars[col_name])\n    print('Statistics=%.3f, p=%.3f' % (stat, p))","021c32f8":"from scipy.stats import normaltest\n\nfor col_name in [\"price\",\"mileage\",\"tax\",\"mpg\",\"engineSize\"]:\n    print(f\"Test results of {col_name} variable is\")\n    stat, p = normaltest(cars[col_name])\n    print('Statistics=%.3f, p=%.3f' % (stat, p))","48f20258":"for var_name in [\"price\",\"mileage\",\"tax\",\"mpg\",\"engineSize\"]:\n    kw = kruskal(list(cars[var_name][cars.Company==\"Audi\"]),list(cars[var_name][cars.Company==\"Mercedes\"]),list(cars[var_name][cars.Company==\"Toyota\"]))[1]\n    print(f\"p-value of Kruskal Wallis test for {var_name} is {kw}\")","68aacf7e":"print(pd.crosstab(cars.Company,cars.transmission))\nprint(pd.crosstab(cars.Company,cars.fuelType))","4c54b32b":"chi2_contingency(pd.crosstab(cars.Company,cars.transmission))","bb1a715b":"chi2_contingency(pd.crosstab(cars.Company,cars.fuelType))","3d1f640a":"From the above plots, the mean of different variables for the three companies are clearly visible\n\n### Overlapping Histograms\n\nHistograms are approximate representations of numerical distributions and most commonly used univariate analyses for quantitative variables. In this case, we can show three histograms for three companies overlapping. **pairplot()** is used as it gives all the five overlapping histograms with minimal amount of code. (Look at only plots on the diagonal)","925e615e":"Similar inferences as we got from box plots and violin plots are visible here.\n\n* **Tax**, **engineSize** and **mileage** distributions are looking same for all the three companies\n* **mpg** and **price** distributions have minute differences","2c1e4ec7":"We can infer from the above plots that Audi makes all the cars, Mercedes makes Semi-automatic cars and Toyota makes Manual cars the most. Similar trend can be observed with fuelType too.","df5f02e4":"### Reading the used cars dataset\n\nThe three companies Audi, Mercedes and Toyota are taken and appended by row-axis.","278c352f":"![Flow Chart.PNG](attachment:4c16a285-50d9-4e9e-81ff-bd18d8e78dec.PNG)","e8d30237":"From the contingency tables, it is unclear about the relation between both the categorical variables. Using Chi-square test we can confidently tell whether the relation is statistical or not","9c96c3b2":"From the above box plots, we can make the following inferences\n\n* There are good amount of outliers in the all the quantitative variables but Toyota have the least outliers\n* The median price of used cars from different companies follow the trend Mercedes, Audi and then Toyota\n* The Toyota cars' engineSize have a large variability compared to other two companies\n* The median miles per gallon of Toyota car is greater than that of Audi cars which is reverse of what we observed in price\n* Tax seems to be the same across all the companies","8fd9653d":"All the p-values are less than 0.05 which suggests that there is a statisitcally significant relation between all the five numeric variables and the 'Company' multi-categorical variable. Atleast two of the companies have different median values in all these variables.","144c7bd2":"## Statistical Bivariate Analysis with Categorical Variable\n\nWe have seen different statistical tests between a multi-categorical variable and quantitative variable. In this section, we will check the relation between two multi-categorical variables. The most popular test is Chi-Square test of independence.\n\n**Chi-Square Test of Independence**\n\nChi-square test of independence tests the relation between 2 categorical variables. It is the equivalent of t-test or ANOVA test (for numeric variables). The null hypothesis of the test is that there is **no** relation between both the categorical variables. We give a contingency table as a input to this test. A contingency table is just the cross frequency of different categories in both the variables. Below are the contingency table for the two categoric variable present","047bb7ce":"### Swarm Plot\n\nSwarm plot is just like Strip plots but arranged neatly. Again, they don't work when the number of samples are high in number","c5ce2982":"As we can see above, after sampling only 0.5% of the data and reducing point size, we are able to see swarmplots properly. Hence, violon plots became popular recently.\n\n### Violin Plot\n\nWhen the number of samples is large and we want to know the distribution of numerical variable with respenct to quantitative variable, violin plots are the best.","6d9c3260":"### Clustered bar plot","e1e9ee91":"### Box Plot\n\nBox plots displays the five number summary of a set of data - Min, Q1, Median, Q3 and Max. Generally these plots are used to detect outliers.\n\nIn this case, we can plot for different categories and see whether there is any significant difference in the distributions. Seaborn **boxplot()** function provides many options to customize thebox plot","639f8dd6":"If the p-value is less than 0.05, we can reject the null hypothesis the data is normal. Since all variables have p-value <0.05, not even one variable have normal distribution. So, we can only conduct non-parametric tests\n\n**D\u2019Agostino and Pearson\u2019s Test**\n\nThe null hypothesis is same as Shapiro-Wilk test. This test uses skewness and kurtosos in its alternative hypothesis to check normality.","3d3697fa":"Since the p-values for both the variables turned out be 0, we can reject the null hypothesis that there is a significant relation between Company and transmission and Company and fuelType. An overview of all the tests covered is present in the below flow chart","b5567d8f":"From the histograms and QQ plots we can see that mpg is the only variable that seems to have normal distribution. All the other variables are skewed right or left.\n\n### Normality Check - Statistical\n\nThere are multiple statistical tests to check the normalty. In this exercise, Shapiro-Wilk test and D\u2019Agostino and Pearson\u2019s test is used.\n\n**Shapiro-Wilk Test**\n\nNull hypothesis is that a sample is drawn from a normal distribution.","f477ff22":"## Statistical Bivariate Analysis with Quantitative Variable\n\nThere are lot of statistical tests that can be done to prive the relation between multilable variable and another numeric variable. All the possible tests are explored in this article.\n\nBefore testing for the interactions, we need to check the normality of the data to decide between parametric and non-parametric tests. We can do this visually or statistically\n\n### Normality check - Visualization\n\nHistograms and QQ plots are the most popular ways to check the normality of numeric variables.","8f01aeea":"This test also gave the same results as Shapiro-Wilk test. Since it is tested that all the variables are not normal, we can only conduct non-parametric tests to check the relation between a multi-label variable and numeric variable. The most popular non-parametric test is Kruskal-Wallis Test. The parametric test equivalent is One-Way ANOVA test.\n\n**Kruskal Wallis Test**\n\nThis test checks whether the population median of all the groups are equal or not. The null hypothesis is medians are equal between all the groups.","514065d2":"### Stacked Bar Plot","7ffa091b":"## Visual Bivariate Analysis with Quantitative Variable\n\nAs explained in the introduction, we want to explore the differences between different features of a used car between the three companies. In this section, we are only going to see the interactions between multi-label variable **Company** and other **quantitative** variables. In this case, the quantitative variables are \n\n* price\n* mileage\n* tax\n* mpg\n* enginesize","4eb118c9":"From the above plots, we can make even better inferences about some variables compared to that of box plots. For example, we can see that many Audi and Mercedes cars have ~2 engineSize whereas many Toyota cars have ~1 engineSize. Also we got to knwo the approximate median tax from box plots. Using violin plots we can also infer that some cars have very less tax.\n\n### Point Plot\n\nPoint plots are used if ther is a need of comparing the aggregated measures of all the three categories. It represents an estimate of central tendency for a numeric variable by the position of scatter plot points and provides some indication of the uncertainty around that estimate using error bars.","25564c1c":"# Bivariate Analysis - Introduction\n\nDiagnosing and exploring data before perfoming model development is a mandatory task. The most common statistical or visual diagnoses that are used in the industry are univariate and bivariate analysis with the dependent variable. \n\nIn this notebook, a multi-label categorical variable is taken and different visual and statistical analyses that can be done using this variable would be explored.\n\nThe data used in this case is used cars dataset and we want to know whether there are any significant differences between used cars of different companies in terms of variuos features available. Audi, Mercedes and Toyota are considered.","2de7fbb8":"## Basic Data Pre-Processing\n\nBefore jumping into full-fledged analysis, we need to read the data and do some basic processing.\n\n### Importing libraries","4d585c6f":"### Strip plot\n\nIf we want to look at all the observations in a dataset, strip plot can be drawn. In this case, it is not preferred becasue there are 30000 observations and the graph may look cluttered. **train_test_split()** in sklearn module is used to randomly split the data.","ecab83e7":"## Visual Bivariate Analysis with Categorical variable\n\nUnlike analysis with quantitative variales, bivariate categorical analysis is limited. Only count plots to measure the count in differernt categories can be drawn. The three plots that can be used are clustered bar plot, stacked bar plot and segmented bar plot. "}}