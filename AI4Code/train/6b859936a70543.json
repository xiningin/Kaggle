{"cell_type":{"70e43dda":"code","9e00a7ed":"code","5a69a3df":"code","2b6449c9":"code","c605716e":"code","2c79fffb":"code","b6242455":"code","154605f2":"code","c05c6097":"code","4d556cf8":"code","4b3e3264":"code","4e0fa541":"code","c77e4163":"code","c13ab29a":"code","b08f2a7d":"markdown","a4a16aef":"markdown","9dfc96a4":"markdown","75410168":"markdown","2339d644":"markdown","80b573d0":"markdown","bccf2c41":"markdown","fb75c3d4":"markdown","7fc909cf":"markdown","91fce0b1":"markdown","94df409d":"markdown"},"source":{"70e43dda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e00a7ed":"import pandas as pd\ndf= pd.read_csv('https:\/\/raw.githubusercontent.com\/Datamanim\/datarepo\/main\/bicycle\/seoul_bi.csv', encoding='utf-8')\n\ndf.head()","5a69a3df":"result = df['\ub300\uc5ec\uc77c\uc790'].value_counts().sort_index().to_frame()\nanswer = result[result.\ub300\uc5ec\uc77c\uc790  == result.\ub300\uc5ec\uc77c\uc790.max()].index[0]\n\nprint(result)\nprint(answer)\n","2b6449c9":"df['\ub300\uc5ec\uc77c\uc790'] = pd.to_datetime(df['\ub300\uc5ec\uc77c\uc790'])\ndf['day_Mname']  = df['\ub300\uc5ec\uc77c\uc790'].dt.day_name()\n\n#result =  df.day_name.value_counts().to_frame()\n#result = df.dy_name.value_counts().to_frame()\nprint(result)\n","c605716e":"df['\ub300\uc5ec\uc77c\uc790'] = pd.to_datetime(df['\ub300\uc5ec\uc77c\uc790'])\ndf['day_name']  = df['\ub300\uc5ec\uc77c\uc790'].dt.day_name()\n\nresult =  df.day_name.value_counts()\n##.val0ue_counts().to_frame()\nprint(result)\n","2c79fffb":"#print (pd.DataFrame(df.sum()['day_Mname']) )  # DataFrame \n#df2 = df.groupby(['city','f2']).sum()\n\n#df2 = df.loc[:,['day_Mname','\ub300\uc5ec\uc2dc\uac04']]\n#print(df2)\n#df2 = df2.groupby(['day_Mname','\ub300\uc5ec\uc2dc\uac04']).sum()\n#print(df2)\n#result = df2.dy_name.value_counts().to_frame()\n \n","b6242455":"result = df.groupby(['day_name','\ub300\uc5ec\uc18c\ubc88\ud638']).size().to_frame('size').sort_values(['day_name','size'],ascending=False).reset_index()\nanswer  = result.drop_duplicates('day_name',keep='first').reset_index(drop=True)\nprint(answer)\n","154605f2":"daily = df[df.\ub300\uc5ec\uad6c\ubd84\ucf54\ub4dc.isin(['\uc77c\uc77c\uad8c','\uc77c\uc77c\uad8c(\ube44\ud68c\uc6d0)'])].\uc5f0\ub839\ub300\ucf54\ub4dc.value_counts().sort_index()\ntotal = df.\uc5f0\ub839\ub300\ucf54\ub4dc.value_counts().sort_index()\n\nratio = (daily \/total).sort_values(ascending=False)\nprint(ratio)\nprint('max ratio age ',ratio.index[0])\n","c05c6097":"result = df[['\uc5f0\ub839\ub300\ucf54\ub4dc','\uc774\ub3d9\uac70\ub9ac']].groupby(['\uc5f0\ub839\ub300\ucf54\ub4dc']).mean()\nprint(result)\n","4d556cf8":"tw = df[df.\uc5f0\ub839\ub300\ucf54\ub4dc =='20\ub300'].reset_index(drop=True)\ntw_mean = tw[tw.\uc774\ub3d9\uac70\ub9ac >= tw.\uc774\ub3d9\uac70\ub9ac.mean()].reset_index(drop=True)\ntw_mean['\ud0c4\uc18c\ub7c9'] =tw_mean['\ud0c4\uc18c\ub7c9'].astype('float')\ntarget =tw_mean.sort_values(['\ub300\uc5ec\uc77c\uc790','\ub300\uc5ec\uc18c\ubc88\ud638'], ascending=False).reset_index(drop=True).iloc[:200].\ud0c4\uc18c\ub7c9\nresult = round(target.sum()\/len(target),3)\nresult \n\n","4b3e3264":"df['\ub300\uc5ec\uc77c\uc790']  =pd.to_datetime(df['\ub300\uc5ec\uc77c\uc790'])\nresult = df[(df.\uc5f0\ub839\ub300\ucf54\ub4dc =='~10\ub300') & (df.\ub300\uc5ec\uc77c\uc790 ==pd.to_datetime('2021-06-07'))].\uc774\uc6a9\uac74\uc218.median()\nprint(result)\n\n","4e0fa541":"target = df[(df.day_name.isin(['Tuesday', 'Wednesday', 'Thursday', 'Friday','Monday'])) & (df.\ub300\uc5ec\uc2dc\uac04.isin([6,7,8]))]\nresult = target.groupby(['\ub300\uc5ec\uc2dc\uac04','\ub300\uc5ec\uc18c\ubc88\ud638']).size().to_frame('\uc774\uc6a9 \ud69f\uc218')\n\nanswer = result.sort_values(['\ub300\uc5ec\uc2dc\uac04','\uc774\uc6a9 \ud69f\uc218'],ascending=False).groupby('\ub300\uc5ec\uc2dc\uac04').head(3)\nprint(answer)\n","c77e4163":"result  = df[df.\uc774\ub3d9\uac70\ub9ac >= df.\uc774\ub3d9\uac70\ub9ac.mean()].reset_index(drop=True).\uc774\ub3d9\uac70\ub9ac.std()\nprint(result)\n","c13ab29a":"df['sex'] = df['\uc131\ubcc4'].map(lambda x: '\ub0a8' if x in ['M','m'] else '\uc5ec')\ndf[['sex','\uc774\ub3d9\uac70\ub9ac']].groupby('sex').mean()\n","b08f2a7d":"Q6. \uc5f0\ub839\ub300 \ucf54\ub4dc\uac00 20\ub300\uc778 \ub370\uc774\ud130\ub97c \ucd94\ucd9c\ud558\uace0, \n\n\uc774\ub3d9\uac70\ub9ac\uac12\uc774 \ucd94\ucd9c\ud55c \ub370\uc774\ud130\uc758 \uc774\ub3d9\uac70\ub9ac\uac12\uc758 \ud3c9\uade0 \uc774\uc0c1\uc778 \ub370\uc774\ud130\ub97c \ucd94\ucd9c\ud55c\ub2e4\n\n\ucd5c\uc885 \ucd94\ucd9c\ub41c \ub370\uc774\ud130\ub97c \ub300\uc5ec\uc77c\uc790, \ub300\uc5ec\uc18c \ubc88\ud638 \uc21c\uc11c\ub85c \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c \ud6c4 \n\n1\ud589\ubd80\ud130 200\ud589\uae4c\uc9c0\uc758 \ud0c4\uc18c\ub7c9\uc758 \ud3c9\uade0\uc744 \uc18c\uc22b\uc810 3\uc9f8 \uc790\ub9ac\uae4c\uc9c0 \uad6c\ud558\uc5ec\ub77c\n[\ucd9c\ucc98] 13\uc8fc\ucc28 \uc608\uc0c1\ubb38\uc81c (\uc2e4\uae301\uc720\ud615 10\ubb38\uc81c) (\uc774\uae30\uc801 \uc2a4\ud130\ub514 \uce74\ud398 \/ \ucef4\ud65c,\uc815\ubcf4\ucc98\ub9ac,\ube45\ubd84\uae30) | \uc791\uc131\uc790 \ube45\ubd84\uae30 \uc2e4\uae30\uc870\uad50","a4a16aef":"Q8. \ud3c9\uc77c (\uc6d4~\uae08) \ucd9c\uadfc \uc2dc\uac04\ub300(\uc624\uc804 6,7,8\uc2dc)\uc758 \ub300\uc5ec\uc18c\ubcc4 \n\n\uc774\uc6a9 \ud69f\uc218\ub97c \uad6c\ud574\uc11c \ub370\uc774\ud130 \ud504\ub808\uc784 \ud615\ud0dc\ub85c \ud45c\ud604\ud55c \ud6c4\n\n\uac01 \ub300\uc5ec\uc2dc\uac04\ubcc4 \uc774\uc6a9 \ud69f\uc218\uc758 \uc0c1\uc704 3\uac1c \ub300\uc5ec\uc18c\uc640 \uc774\uc6a9\ud69f\uc218\ub97c \ucd9c\ub825\ud558\ub77c\n","9dfc96a4":"\ub370\uc774\ud130 \ucd9c\ucc98 :https:\/\/www.data.go.kr\/data\/15051872\/fileData.do(\ucc38\uace0, \ub370\uc774\ud130 \uc218\uc815)\n\n\ub370\uc774\ud130 \uc124\uba85 : \uc11c\uc6b8\ud2b9\ubcc4\uc2dc_\uacf5\uacf5\uc790\uc804\uac70 \uc2dc\uac04\ub300\ubcc4 \uc774\uc6a9\uc815\ubcf4\n\n\u200b\n\ndata url = https:\/\/raw.githubusercontent.com\/Datamanim\/datarepo\/main\/bicycle\/seoul_bi.csv\n\n\u200b\n\n\ub370\uc774\ud130 \uc0c1\uc704 5\uac1c \uceec\ub7fc\n\nbaseline \ucf54\ub4dc\n\n[\ucd9c\ucc98] 13\uc8fc\ucc28 \uc608\uc0c1\ubb38\uc81c (\uc2e4\uae301\uc720\ud615 10\ubb38\uc81c) (\uc774\uae30\uc801 \uc2a4\ud130\ub514 \uce74\ud398 \/ \ucef4\ud65c,\uc815\ubcf4\ucc98\ub9ac,\ube45\ubd84\uae30) | \uc791\uc131\uc790 \ube45\ubd84\uae30 \uc2e4\uae30\uc870\uad50","75410168":"Q1.  \ub300\uc5ec\uc77c\uc790\ubcc4 \ub370\uc774\ud130\uc758 \uc218\ub97c \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ucd9c\ub825\ud558\uace0, \n\n\uac00\uc7a5 \ub9ce\uc740 \ub370\uc774\ud130\uac00 \uc788\ub294 \ub0a0\uc9dc\ub97c \ucd9c\ub825\ud558\ub77c\n","2339d644":"Q7 6\uc6d4 7\uc77c ~10\ub300\uc758 \"\uc774\uc6a9\uac74\uc218\"\uc758 \uc911\uc559\uac12\uc740?\n","80b573d0":"Q4. \ub098\uc774\ub300\ubcc4 \ub300\uc5ec\uad6c\ubd84 \ucf54\ub4dc\uc758 (\uc77c\uc77c\uad8c\/\uc804\uccb4\ud69f\uc218) \ube44\uc728\uc744 \uad6c\ud55c \ud6c4 \n\n\uac00\uc7a5 \ub192\uc740 \ube44\uc728\uc744 \uac00\uc9c0\ub294 \ub098\uc774\ub300\ub97c \ud655\uc778\ud558\ub77c. \uc77c\uc77c\uad8c\uc758 \uacbd\uc6b0 \uc77c\uc77c\uad8c \uacfc \uc77c\uc77c\uad8c(\ube44\ud68c\uc6d0)\uc744 \ubaa8\ub450 \ud3ec\ud568\ud558\ub77c\n","bccf2c41":"Q5. \uc5f0\ub839\ub300\ubcc4 \ud3c9\uade0 \uc774\ub3d9\uac70\ub9ac\ub97c \uad6c\ud558\uc5ec\ub77c\n\n","fb75c3d4":"Q2. \uac01 \uc77c\uc790\uc758 \uc694\uc77c\uc744 \ud45c\uae30\ud558\uace0 ('Monday' ~'Sunday') 'day_name'\uceec\ub7fc\uc744 \ucd94\uac00\ud558\uace0\n\n\uc774\ub97c \uc774\uc6a9\ud558\uc5ec \uac01 \uc694\uc77c\ubcc4 \uc774\uc6a9 \ud69f\uc218\uc758 \ucd1d\ud569\uc744 \ub370\uc774\ud130 \ud504\ub808\uc784\uc73c\ub85c \ucd9c\ub825\ud558\ub77c\n","7fc909cf":"Q9. \uc774\ub3d9\uac70\ub9ac\uc758 \ud3c9\uade0 \uc774\uc0c1\uc758 \uc774\ub3d9\uac70\ub9ac \uac12\uc744 \uac00\uc9c0\ub294 \ub370\uc774\ud130\ub97c \ucd94\ucd9c\ud558\uc5ec \n\n\ucd94\ucd9c\ub370\uc774\ud130\uc758 \uc774\ub3d9\uac70\ub9ac\uc758 \ud45c\ubcf8\ud45c\uc900\ud3b8\ucc28 \uac12\uc744 \uad6c\ud558\uc5ec\ub77c\n","91fce0b1":"Q10. \ub0a8\uc131('M' or 'm')\uacfc \uc5ec\uc131('F' or 'f')\uc758 \uc774\ub3d9\uac70\ub9ac\uac12\uc758 \ud3c9\uade0\uac12\uc744 \uad6c\ud558\uc5ec\ub77c\n\n\n","94df409d":"Q3. \uac01 \uc694\uc77c\ubcc4 \ub300\uc5ec\uc18c \uc774\uc6a9 \ud69f\uc218\ub97c \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ucd9c\ub825\ud558\ub77c\n\n\n"}}