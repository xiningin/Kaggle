{"cell_type":{"05acdc45":"code","863f0dc7":"code","36e89628":"code","c17ca60a":"code","b8b3fab3":"code","a567d01a":"code","4f6e7b74":"code","e134b1c0":"code","fc5c05a8":"code","56dbb659":"code","68e782fe":"code","97abe016":"code","ed3ec869":"code","e6687144":"code","2424d556":"code","68fa39a5":"code","7cb4403a":"code","ed82e7a5":"code","f068334c":"code","a76a46a1":"code","e22b7a25":"code","d1737d49":"code","f98663d0":"code","ac1d49d2":"code","78de3082":"code","b14c13c9":"code","dd086596":"code","93b420eb":"code","6d75a0ad":"code","c833a363":"code","f20ac56b":"code","f514453e":"code","99505059":"code","768ff3ba":"code","99362a84":"code","2e6f3724":"code","1720c547":"code","4f033b2e":"code","6b267ef3":"code","5d3cb046":"code","5d6421ad":"code","b861db7e":"code","6d9404ad":"code","cda6564b":"code","9a225745":"code","d70003d4":"code","d258fc46":"code","50ce058c":"code","22366089":"code","dd29bcbe":"code","1a44a154":"code","a66abaac":"code","b77deba8":"code","b9fceb82":"code","7055dfe2":"code","3f83fcc4":"code","74fb689f":"code","255ca531":"code","e30ecf8a":"code","7a801332":"code","3dd5bef6":"code","63aca325":"code","c3ff68dd":"code","8e5c6d2d":"markdown","162ad9b0":"markdown","b568b336":"markdown","4199dc33":"markdown","90f9c97f":"markdown","60f76a80":"markdown","602c6ec7":"markdown","8bfbeef3":"markdown","a0983a0d":"markdown","3d357c72":"markdown","81638c5b":"markdown","5e408f21":"markdown","1cf2f190":"markdown","f6ac2082":"markdown","8e7fe3b5":"markdown","25cf78df":"markdown","32fd8eaf":"markdown","4ed7a891":"markdown","af4bd17c":"markdown"},"source":{"05acdc45":"import os\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nfrom scipy import stats\nimport pandas_profiling as pp\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nfrom sklearn.metrics import r2_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures","863f0dc7":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","36e89628":"df=pd.read_csv(\"\/kaggle\/input\/automobile-dataset\/Automobile_data.csv\")\ndf.head()","c17ca60a":"# numbers of columns and rows in dataset.\ndf.shape","b8b3fab3":"# Name of the columns of the dataset.\ndf.columns","a567d01a":"# Datatypes of every column for the dataset.\ndf.dtypes","4f6e7b74":"# Information(no of rows and columns, datatypes for the columns , null values in dataframe memory usage) about the dataset.\ndf.info()","e134b1c0":"#replace ? with the nan\ndf.replace(\"?\",np.nan,inplace =True)\ndf.head()","fc5c05a8":"df.info()","56dbb659":"# sum of null values in every columns.\ndf.isnull().sum()","68e782fe":"# no of duplicated rows in data frames\ndf.duplicated().value_counts()","97abe016":"#Count the unique values in num-of-doors\nCounter(df[\"num-of-doors\"])","ed3ec869":"miss_col= [\"normalized-losses\",\"bore\",\"stroke\",\"horsepower\",\"peak-rpm\",\"price\"]\nfor col in miss_col:\n    df[col].replace(np.nan,df[col].astype(\"float\").mean(axis=0),inplace=True)\n    \ndf[\"num-of-doors\"].replace(np.nan,df[\"num-of-doors\"].value_counts().idxmax(),inplace=True)\ndf.head().T\n    ","e6687144":"print(\"Data Types of Variables \\n\",df.dtypes)","2424d556":"# correct the data format.\ndf[[\"normalized-losses\",\"bore\",\"stroke\",\"horsepower\",\"peak-rpm\",\"price\"]]=df[[\"normalized-losses\",\"bore\",\"stroke\",\"horsepower\",\"peak-rpm\",\"price\"]].astype(\"float\")\ndf.dtypes","68fa39a5":"pp.ProfileReport(df)","7cb4403a":"#Statistical discription of the data for numerical features.\ndf.describe()","ed82e7a5":"#Statistical discription of the data for categorical features.\ndf.describe(include='object')","f068334c":"df[\"city-L\/100km\"]=235\/df[\"city-mpg\"]\ndf[\"highway-L\/100km\"]=235\/df[\"highway-mpg\"]","a76a46a1":"df.drop([\"city-mpg\",\"highway-mpg\"],axis=1)","e22b7a25":"for col in [\"length\",\"width\",\"height\"]:\n    df[col]=df[col]\/df[col].max()\n    \ndf[[\"length\",\"width\",\"height\"]].head()","d1737d49":"\ndf[[\"horsepower\"]].hist()\nplt.show()","f98663d0":"df[\"horsepower_binned\"]=pd.cut(df[\"horsepower\"],bins=np.linspace(min(df[\"horsepower\"]),max(df[\"horsepower\"]),4),\n                               labels=[\"low\",\"medium\",\"high\"],include_lowest=True)\ndf[[\"horsepower\",\"horsepower_binned\"]].head()","ac1d49d2":"plt.bar([\"low\",\"medium\",\"high\"],df[\"horsepower_binned\"].value_counts())\nplt.xlabel(\"horsepower\",fontsize=15)\nplt.ylabel(\"count\",fontsize=15)\nplt.title(\"Horsepower Bins\",fontsize=15)\nplt.show()","78de3082":"df.hist(bins=3,figsize=(15,12))\nplt.tight_layout()","b14c13c9":"df.columns","dd086596":"dummy_var=pd.get_dummies(df[[\"fuel-type\",\"aspiration\"]])\ndummy_var","93b420eb":"# rename the dummy variable column names\ndummy_var.rename(columns = {'fuel-type_gas':'gas','fuel-type_diesel':'diesel','aspiration_std':'std','aspiration_turbo':'turbo'},\n                 inplace = True)\ndummy_var","6d75a0ad":"df=pd.concat([df,dummy_var],axis=1)\n\ndf.head()","c833a363":"#drop the unwanted columns as we create the dummy variables for them. \ndata=df.drop(df[[\"fuel-type\",\"aspiration\"]],axis=1)\ndata.head()","f20ac56b":"dt=data.corr()\n# correlation matrix where correlation of price with other variables is greater than 0.5\ndt[dt[\"price\"]>0.5]","f514453e":"dt[dt[\"price\"]<-0.5].T","99505059":"data.describe()","768ff3ba":"data.describe(include='object')","99362a84":"data[\"drive-wheels\"].value_counts().to_frame().rename(columns={\"drive-wheels\":\"value_counts\"})","2e6f3724":"group_data=df[[\"drive-wheels\",\"body-style\",\"price\"]].groupby(by=[\"drive-wheels\",\"body-style\"],as_index=False).mean()\ngroup_data","1720c547":"group_data.pivot(index=\"drive-wheels\",columns=\"body-style\")","4f033b2e":"\ncols=[\"wheel-base\",\"bore\",\"horsepower\",\"length\",\"width\",\"height\",\"curb-weight\",\"engine-size\",\"city-mpg\",\"highway-mpg\"]\nfor i in cols:\n    pearson_coef,p_value=stats.pearsonr(df[i],df[\"price\"])\n    print(\"For {} :  pearson coefficient= {} and p value={} \".format(i,pearson_coef,p_value))","6b267ef3":"df_gptest = data[['drive-wheels','body-style','price']]\ngrouped_test=df_gptest[['drive-wheels', 'price']].groupby(['drive-wheels'])\ngrouped_test.head()\n","5d3cb046":"grouped_test.get_group('4wd')['price']","5d6421ad":"f_val,p_val=stats.f_oneway(grouped_test.get_group('4wd')['price'],grouped_test.get_group('rwd')['price'],grouped_test.get_group('fwd')['price'])\nprint(\"F-value is = \",f_val,\" P-Values is = \",p_val)","b861db7e":"f_val,p_val=stats.f_oneway(grouped_test.get_group('4wd')['price'],grouped_test.get_group('rwd')['price'])\nprint(\"F-value is = \",f_val,\" P-Values is = \",p_val)","6d9404ad":"f_val,p_val=stats.f_oneway(grouped_test.get_group('4wd')['price'],grouped_test.get_group('fwd')['price'])\nprint(\"F-value is = \",f_val,\" P-Values is = \",p_val)","cda6564b":"f_val,p_val=stats.f_oneway(grouped_test.get_group('fwd')['price'],grouped_test.get_group('rwd')['price'])\nprint(\"F-value is = \",f_val,\" P-Values is = \",p_val)","9a225745":"lm=LinearRegression()\nX=df[['highway-mpg']]\nY=df['price']\nlm.fit(X,Y)\ny_pred=lm.predict(X)\ny_pred[0:5]","d70003d4":"print(\"intercept:\",lm.intercept_)\nprint(\"coefficient:\",lm.coef_)","d258fc46":"plt.scatter(Y,y_pred)\nplt.title(\"Predicted price by Linear Regression with one variable (Highway-mpg)\",fontsize=15)\nplt.xlabel(\"Actual Value\")\nplt.ylabel(\"Predicted Value\")\nplt.show()","50ce058c":"#regression plot\nplt.figure(figsize=(8,8))\nsns.regplot(x='highway-mpg',y='price',data=df)\nplt.title(\"Regression Plot\",fontsize=20)\n#plt.ylim(0)\nplt.show()\n\n# Residual plot\nplt.figure(figsize=(8,8))\nsns.residplot(x='highway-mpg',y='price',data=df)\nplt.title(\"Residual Plot\",fontsize=20)\nplt.show()","22366089":"plt.scatter(Y,y_pred)\nplt.title(\"Relation between Actual and Predicted values\",fontsize=15)\nplt.xlabel(\"Actual Value\")\nplt.ylabel(\"Predicted Value\")\nplt.show()","dd29bcbe":"r2_score(Y,y_pred)","1a44a154":"x = df[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']]\ny= df[\"price\"]\nmlr=LinearRegression()\nmlr.fit(x,y)\npred_mlr=mlr.predict(x)\npred_mlr[0:5]","a66abaac":"print(\"intercept:\",mlr.intercept_)\nprint(\"coefficient:\",mlr.coef_)","b77deba8":"plt.scatter(y,pred_mlr)\nplt.title(\"Predicted price by Multiple Linear Regression with more than one variables\",fontsize=15)\nplt.xlabel(\"Actual Value\")\nplt.ylabel(\"Predicted Value\")\nplt.show()","b9fceb82":"# function to plot the data.\ndef PollyPlot(model,x,y,name):\n    x_new=np.linspace(15,55,100)\n    y_new=model(x_new)\n    plt.plot(x,y,'.',x_new,y_new,'-')\n    plt.xlabel(name)\n    plt.ylabel('price of cars')\n    plt.show()","7055dfe2":"x=df[\"highway-mpg\"]\ny=df['price']\nf=np.polyfit(x,y,3)\np=np.poly1d(f)\nprint(p)","3f83fcc4":"PollyPlot(p,x,y,'highway-mpg')","74fb689f":"z=df[['horsepower','curb-weight','engine-size','highway-mpg']]\npf=PolynomialFeatures(degree=2)\npf\n","255ca531":"z.shape","e30ecf8a":"z_pf=pf.fit_transform(z)\nz_pf","7a801332":"plr=LinearRegression()\nplr.fit(z_pf,y)\npred_plr=plr.predict(z_pf)","3dd5bef6":"plt.scatter(y,pred_plr)\nplt.title(\"Predicted price by Polynomial Linear Regression with more than one variables\",fontsize=15)\nplt.xlabel(\"Actual Value\")\nplt.ylabel(\"Predicted Value\")\nplt.show()","63aca325":"plt.scatter(Y,y_pred)\nplt.title(\"Predicted price by Linear Regression with one variable (Highway-mpg)\",fontsize=15)\nplt.xlabel(\"Actual_price\")\nplt.ylabel(\"Predicted Price\")\nplt.show()\nplt.scatter(y,pred_mlr)\nplt.title(\"Predicted price by Multiple Linear Regression with more than one variables\",fontsize=15)\nplt.xlabel(\"Actual_price\")\nplt.ylabel(\"Predicted Price\")\nplt.show()\nplt.scatter(y,pred_plr)\nplt.title(\"Predicted price by Polynomial Linear Regression with more than one variables\",fontsize=15)\nplt.xlabel(\"Actual_price\")\nplt.ylabel(\"Predicted Price\")\nplt.show()\n","c3ff68dd":"# comparison of  r2 score  for MLR and PLR for same data .\nprint(\"Multiple Linear Regression R2 Score:\\n\",r2_score(y,pred_mlr))\nprint(\"Polynomial Regression R2 Score:\\n\",r2_score(y,pred_plr))","8e5c6d2d":"\"num-of-doors\",\"normalized-losses\",\"bore\",\"stroke\",\"horsepower\",\"peak-rpm\",\"price\" these features have the missing values.\n\nwe replace the missing values by mean value  for all variable except \"num-of-doors\". This variable missing values will be replace by most frequency value.\n","162ad9b0":"**Normalization**","b568b336":"## Exploratory Data Analysis and Regression Notebook","4199dc33":"**Standardisation**","90f9c97f":"**Binning**","60f76a80":"**Data cleaning**\n\n There are lots of '?' sign in the dataset. These are the missing data. We have to handle the missing data . So first of all we will replace \"?\" by nan because pandas does not consider \"?\" as missing value . We can see in `df.info()` method all variables showing that there are not any missing values. After replcing pandas can count the missing values.","602c6ec7":"### Polynomial Linear Regression\n\nWe can perform a polynomial transform on multiple features. ","8bfbeef3":"### Multiple Linear Regression","a0983a0d":"**Groupby Function**","3d357c72":" ## Machine Learning\n\n****MODEL DEVELOPMENT****","81638c5b":"### Linear Regression","5e408f21":"### Correlation and p value","1cf2f190":"### Anova","f6ac2082":"**Dummy Variable**\n \n is a numerical variable used to label categories.","8e7fe3b5":"Replace null values with the mean of the feature for the numeric variables and for categorical variables replace null value with the maximum count.","25cf78df":"change the appropriate data type.","32fd8eaf":"**Statistical Data discription**","4ed7a891":"Import the necessary libraries.","af4bd17c":"**Pivot Table**"}}