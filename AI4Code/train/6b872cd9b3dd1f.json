{"cell_type":{"7a6ad70b":"code","341b6e58":"code","cd1ece28":"code","9916d3c6":"code","a7da641b":"code","a32e07f4":"code","28621b03":"code","62a2dac2":"code","22535b54":"code","c8d5dd12":"code","7202b555":"code","67718516":"code","11c49137":"code","5f8c150b":"code","1ab38b47":"code","d4652a8d":"code","c65c0fd7":"code","cf6558f5":"code","41b9104a":"code","c12854f1":"code","07800e8c":"code","e60c8b1e":"code","ca08fcc0":"code","f3d8fe74":"code","479d7805":"code","7bbcabc8":"code","2335ba25":"code","138178d8":"code","afb55c32":"code","ba86ea57":"code","ab7502e2":"code","f2232cf1":"code","3b8227ed":"code","a6aadb45":"code","789961af":"code","0b1cc801":"code","8448fd8a":"code","37ca53fc":"code","f3de0583":"code","d20fe983":"code","b2ddce5c":"code","ad3c2410":"markdown","b31722dd":"markdown","c61c0067":"markdown","9c4dc48e":"markdown","e449493d":"markdown","66061984":"markdown","914140a8":"markdown","dd7514bc":"markdown","953e9896":"markdown","ec91becd":"markdown","f8f9c6ba":"markdown","32909833":"markdown","8383b91d":"markdown","f9f9b30e":"markdown","54e740b2":"markdown","a7665a3c":"markdown","4974ab73":"markdown","26001cd3":"markdown","c230fa47":"markdown","ba162b4a":"markdown"},"source":{"7a6ad70b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","341b6e58":"# Downloading Necessary libraries\n!pip install tensor-dash","cd1ece28":"# Importing Necessary Libraries\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tensordash.tensordash import Tensordash\nfrom kaggle_secrets import UserSecretsClient\nimport plotly.express as px\nimport json\nimport skimage.io as io\nuser_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"email\")\nsecret_value_1 = user_secrets.get_secret(\"pin\")","9916d3c6":"# Reading the Training Data\ndataset = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/train.csv')","a7da641b":"dataset","a32e07f4":"# Checking if there are any null values in the dataset\ndataset.isnull().any()","28621b03":"# Checking the column data type\ndataset.dtypes","62a2dac2":"# Adding .jpg extension to every image_id\ndataset['image_id'] = dataset['image_id']+'.jpg'","22535b54":"dataset","c8d5dd12":"dataset.healthy.hist()\nplt.title('Healthy Classes')","7202b555":"dataset.multiple_diseases.hist()\nplt.title('Multiple Diseases Classes')","67718516":"dataset.rust.hist()\nplt.title('Rust Classes')","11c49137":"dataset.scab.hist()\nplt.title('Scab Classes')","5f8c150b":"w=10\nh=10\nfig=plt.figure(figsize=(20, 14))\ncolumns = 4\nrows = 4\nplt.title('Image Class')\nplt.axis('off')\nfor i in range(1, columns*rows +1):\n    img = plt.imread(f'\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Train_{i}.jpg')\n    fig.add_subplot(rows, columns, i)\n    \n    if dataset.healthy[i] == 1:\n        plt.title('Healthy')\n    elif dataset.multiple_diseases[i] == 1:\n        plt.title('Multiple Disease')\n    elif dataset.rust[i] == 1:\n        plt.title('Rust')\n    else:\n        plt.title('Scab')\n    plt.imshow(img)\n    plt.axis('off')\nplt.show()","1ab38b47":"w=10\nh=10\nfig=plt.figure(figsize=(20, 14))\ncolumns = 4\nrows = 4\nplt.axis('off')\nfor i in range(1, columns*rows +1):\n    img = plt.imread(f'\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Train_{i}.jpg')\n    fig.add_subplot(rows, columns, i)\n    plt.hist(img.ravel(), bins=32, range=[0, 256])\nplt.show()","d4652a8d":"img.shape","c65c0fd7":"datagen = keras.preprocessing.image.ImageDataGenerator(\n        rescale=1.\/255,\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=180,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.15, # Randomly zoom image \n        width_shift_range=0.15,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.15,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=True)  # randomly flip images","cf6558f5":"X_train, X_valid = train_test_split(dataset, test_size=0.05, shuffle=False)","41b9104a":"BATCH_SIZE = 8\n\ntrain_generator = datagen.flow_from_dataframe(dataset, \n                    directory='\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/',\n                    x_col='image_id',\n                    y_col=['healthy', 'multiple_diseases', 'rust', 'scab'] , \n                    target_size=(512, 512), \n                    class_mode='raw',\n                    batch_size=BATCH_SIZE, shuffle=False)\n\nvalid_generator = datagen.flow_from_dataframe(X_valid, \n                    directory='\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/',\n                    x_col='image_id',\n                    y_col=['healthy', 'multiple_diseases', 'rust', 'scab'] , \n                    target_size=(512, 512), \n                    class_mode='raw',\n                    batch_size=BATCH_SIZE, shuffle=False) ","c12854f1":"w=10\nh=10\nfig=plt.figure(figsize=(20, 14))\ncolumns = 2\nrows = 4\nplt.title('Image Class')\nplt.axis('off')\nfor i in range(1, columns*rows):\n    \n    img_batch, label_batch = train_generator.next()\n    fig.add_subplot(rows, columns, i)\n    \n    if label_batch[i][0] == 1:\n        plt.title('Healthy')\n    elif label_batch[i][1] == 1:\n        plt.title('Multiple Disease')\n    elif label_batch[i][2] == 1:\n        plt.title('Rust')\n    else:\n        plt.title('Scab')\n        \n    plt.imshow(img_batch[i])\n    plt.axis('off')\nplt.show()","07800e8c":"\nxception_model = tf.keras.models.Sequential([\n  tf.keras.applications.xception.Xception(include_top=False, weights='imagenet', input_shape=(512, 512, 3)),\n   tf.keras.layers.GlobalAveragePooling2D(),\n   tf.keras.layers.Dense(4,activation='softmax')\n])\nxception_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nxception_model.summary()","e60c8b1e":"tf.keras.utils.plot_model(xception_model, to_file='xception_model.png')","ca08fcc0":"\ndensenet_model = tf.keras.models.Sequential([\n    tf.keras.applications.densenet.DenseNet121(include_top=False, weights='imagenet',input_shape=(512, 512, 3)),\n   tf.keras.layers.GlobalAveragePooling2D(),\n   tf.keras.layers.Dense(4,activation='softmax')\n])\ndensenet_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\ndensenet_model.summary()","f3d8fe74":"tf.keras.utils.plot_model(densenet_model, to_file='densenet_model.png')","479d7805":"inputs = tf.keras.Input(shape=(512, 512, 3))\n\nxception_output = xception_model(inputs)\ndensenet_output = densenet_model(inputs)\n\noutputs = tf.keras.layers.average([densenet_output, xception_output])\n\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","7bbcabc8":"tf.keras.utils.plot_model(model, to_file='model.png')","2335ba25":"LR_START = 0.00001\nLR_MAX = 0.0001 \nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 15\nLR_SUSTAIN_EPOCHS = 3\nLR_EXP_DECAY = .8\nEPOCHS = 100\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","138178d8":"model_checkpoint = tf.keras.callbacks.ModelCheckpoint('model.h5', monitor='val_accuracy', verbose=2, save_best_only=True)\n\n# Tensordash is used for getting live model training status, like accuracy or loss, in your phone, sure to checkout here: https:\/\/github.com\/CleanPegasus\/TensorDash\nhistories = Tensordash(\n    email = secret_value_0, \n    password = secret_value_1, \n    ModelName = \"Plant Disease Model\")","afb55c32":"# Model training \nmodel_history = model.fit_generator(train_generator, epochs=EPOCHS, validation_data=valid_generator, callbacks=[model_checkpoint,lr_callback, histories])","ba86ea57":"# Saving model history\npd.DataFrame(model_history.history).to_csv('ModelHistory.csv')","ab7502e2":"plt.plot(pd.DataFrame(model_history.history)['accuracy'])\nplt.title(\"accuracy Plot\")","f2232cf1":"plt.plot(pd.DataFrame(model_history.history)['loss'])\nplt.title(\"Loss Plot\")","3b8227ed":"plt.plot(pd.DataFrame(model_history.history)['val_accuracy'])\nplt.title(\"Validation Accuracy Plot\")","a6aadb45":"plt.plot(pd.DataFrame(model_history.history)['val_loss'])\nplt.title(\"Validation Accuracy Plot\")","789961af":"# Reading testing and submission data\ntest_dataset = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/sample_submission.csv')\ntest_dataset","0b1cc801":"# Adding .jpg extension to image_id\ntest_dataset['image_id'] = test_dataset['image_id']+'.jpg'","8448fd8a":"test_gen = datagen.flow_from_dataframe(test_dataset, \n                    directory='\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/',\n                    x_col='image_id',\n                    target_size=(512, 512), \n                    class_mode=None,\n                    shuffle=False,\n                    batch_size=8)","37ca53fc":"# Predicting class \npredictions = model.predict_generator(test_gen)","f3de0583":"submission['healthy'] = predictions[:, 0]\nsubmission['multiple_diseases'] = predictions[:, 1]\nsubmission['rust'] = predictions[:, 2]\nsubmission['scab'] = predictions[:, 3]","d20fe983":"submission","b2ddce5c":"submission.to_csv('submission.csv', index=False)","ad3c2410":"# Predicting Classes","b31722dd":"## Making a Tensorflow Dataset","c61c0067":"# Making Training Data","9c4dc48e":"## Data Exploration","e449493d":"## DenseNet121","66061984":"### Model History Visualisation","914140a8":"# Image Segmentation","dd7514bc":"### Saving History","953e9896":"## Xception Model","ec91becd":"## Reading data from Keras Generators","f8f9c6ba":"Multiple Histogram for different pixles intensity values","32909833":"# Data Exploration and Visualisation","8383b91d":"# Making The Models","f9f9b30e":"## Classes Distribution","54e740b2":"# Ensembling the Models","a7665a3c":"## Generator Images Visualisations","4974ab73":"## Setting the hyperparameters & Callbacks","26001cd3":"# Training the Model","c230fa47":"## Data Visualisation","ba162b4a":"## Class Image Visualisation"}}