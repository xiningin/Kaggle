{"cell_type":{"89821f00":"code","012ec840":"code","9929cf63":"code","9af7e6dd":"code","3afe3f2f":"code","f124ef90":"code","1f07e4f0":"code","550b1045":"code","d6636788":"code","0bf882ad":"code","37604f6b":"code","7437ed50":"code","ab657b4b":"code","c21c5bc1":"code","5f7a8006":"code","00e32a1c":"code","200e9261":"code","23506f21":"code","0f99e75d":"code","75f285b2":"code","c12b135d":"code","ca5200f7":"markdown","c6f5d9c2":"markdown","87a8b880":"markdown","80d6b31a":"markdown","90307c7c":"markdown","ae27eb9b":"markdown","e65f23ee":"markdown","abc30f7f":"markdown","0f85eac9":"markdown","679fe8a0":"markdown","f321e617":"markdown","e83658c2":"markdown","7e52729f":"markdown","d90ace0b":"markdown"},"source":{"89821f00":"import pandas as pd\nimport numpy as np\nimport torch \nimport torch.nn as nn\nimport torch.nn.functional as F\nimport os\nfrom PIL import Image\nfrom torch.utils.data import DataLoader\nfrom torch.autograd import Variable\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport copy\nimport warnings\nwarnings.filterwarnings(\"ignore\")","012ec840":"# Ok let's start small and make a pandas dataframe but first let's look if all the images have same size\nim = Image.open('..\/input\/cat-and-dog\/training_set\/training_set\/cats\/cat.1.jpg')\nprint(im.size)\nim","9929cf63":"# Ok let's start small and make a pandas dataframe but first let's look if all the images have same size\nim2 = Image.open('..\/input\/cat-and-dog\/training_set\/training_set\/cats\/cat.4.jpg')\nprint(im2.size)\nim2","9af7e6dd":"# Well they are not of the same shape at all so we might need to make some changes here to make them into the same shape but how huh!!\n# Let's select an universal size . Let's say length as 150 and width as 150 . Great?? . Let's start \ndef make_array(parent_directory,length,width):\n    name=os.listdir(parent_directory)\n    name.remove('_DS_Store')\n    arr=[]\n    for i in name:\n        im=Image.open(parent_directory+'\/'+i)\n        im=im.resize((length,width),resample=0)\n        im = im.convert('1')\n        arr.append(np.array(im))\n    return arr\n        \n","3afe3f2f":"arry_dog=make_array('..\/input\/cat-and-dog\/training_set\/training_set\/dogs',100,100)\nlabels=[1]*len(arry_dog)\narry_cat=make_array('..\/input\/cat-and-dog\/training_set\/training_set\/cats',100,100)\nlabels_cats=[0]*len(arry_cat)\narry_dog.extend(arry_cat)\nX=arry_dog.copy()\nprint(X[0])\nX=np.array(X).astype(np.float)\nlabels.extend(labels_cats)\ny=labels.copy()\ny=np.array(y).astype(np.float)","f124ef90":"X.shape","1f07e4f0":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=42,shuffle=True)","550b1045":"X_train=torch.from_numpy(X_train)\ny_train=torch.from_numpy(y_train).type(torch.LongTensor)\nX_test=torch.from_numpy(X_val)\ny_test=torch.from_numpy(y_val).type(torch.LongTensor)","d6636788":"train=torch.utils.data.TensorDataset(X_train,y_train)\ntest=torch.utils.data.TensorDataset(X_test,y_test)","0bf882ad":"train_loader=DataLoader(dataset=train,batch_size=1,shuffle=False)\ntest_loader=DataLoader(dataset=test,batch_size=1,shuffle=False)","37604f6b":"# Creating the CNN neural network\nclass CNN(nn.Module):\n    def __init__(self):\n        super(CNN,self).__init__()\n        self.conv1=nn.Conv2d(1,6,3)\n        self.conv2=nn.Conv2d(6,16,3)\n        self.f1=nn.Linear(16*23*23,2)     \n\n    def forward(self,x):\n        x=torch.tensor(x,dtype=self.conv1.weight.dtype)\n        x=F.max_pool2d(self.conv1(x),(2,2))\n        x=F.max_pool2d(self.conv2(x),2)\n        x=x.view(-1,self.get_size(x))\n        x=self.f1(x)\n        return x\n    def get_size(self,x):\n        nn=1\n        ps=x.size()[1:]\n        for i in ps:\n            nn*=i\n        return nn","7437ed50":"cnn=CNN()","ab657b4b":"# Cross Entropy Loss  \nerror = nn.CrossEntropyLoss()\n\n# SGD Optimizer \nlearning_rate = 0.001\noptimizer = torch.optim.SGD(cnn.parameters(), lr=learning_rate)","c21c5bc1":"batch_size=1\nn_iters = 10000\nnum_epochs = n_iters \/ (len(X_train) \/ batch_size)\nnum_epochs = int(num_epochs)","5f7a8006":"# Traning the Model\ncount = 0\nloss_list = []\niteration_list = []\naccuracy_list=[]\nfor epoch in range(num_epochs):\n    for i, (images, labels) in enumerate(train_loader):\n        \n        # Define variables\n        train = Variable(images.view(1, 1,100,100))\n        labels = Variable(labels)\n        \n        # Clear gradients\n        optimizer.zero_grad()\n        \n        # Forward propagation\n        outputs = cnn(train)\n        # Calculate softmax and cross entropy loss\n        loss = error(outputs, labels)\n        \n        # Calculate gradients\n        loss.backward()\n        \n        # Update parameters\n        optimizer.step()\n        \n        count += 1\n        \n        # Prediction\n        if count % 50 == 0:\n            # Calculate Accuracy         \n            correct = 0\n            total = 0\n            # Predict test dataset\n            for images, labels in test_loader: \n                test = Variable(images.view(1,1,100,100))\n                \n                # Forward propagation\n                outputs = cnn(test)\n                \n                # Get predictions from the maximum value\n                predicted = torch.max(outputs.data, 1)[1]\n                \n                # Total number of labels\n                total += len(labels)\n                \n                # Total correct predictions\n                correct += (predicted == labels).sum()\n            \n            accuracy = 100 * correct \/ float(total)\n            \n            # store loss and iteration\n            loss_list.append(loss.data)\n            iteration_list.append(count)\n            accuracy_list.append(accuracy)\n        if count % 500 == 0:\n            # Print Loss\n            print('Iteration: {}  Loss: {}  Accuracy: {}%'.format(count, loss.data, accuracy))","00e32a1c":"plt.plot(iteration_list,loss_list)\nplt.plot(iteration_list,np.array(accuracy_list)\/100)","200e9261":"torch.save(cnn.state_dict(),'Catvdogmodel.pt')","23506f21":"catty=Image.open('..\/input\/cat-and-dog\/test_set\/test_set\/cats\/cat.4006.jpg')\nplt.imshow(Image.open('..\/input\/cat-and-dog\/test_set\/test_set\/cats\/cat.4008.jpg'))\ncatty=catty.resize((100,100),resample=0)\ncatty = catty.convert('1')\nval=np.array(catty).astype(float)\nval=torch.from_numpy(val)\nif torch.max(cnn(val.view(1,1,100,100)).data, 1)[1]==1 :\n    print(\"It's a cat\")\nelse:\n    print(\"It's a dog\")","0f99e75d":"catty=Image.open('..\/input\/cat-and-dog\/test_set\/test_set\/dogs\/dog.4004.jpg')\nplt.imshow(Image.open('..\/input\/cat-and-dog\/test_set\/test_set\/dogs\/dog.4004.jpg'))\ncatty=catty.resize((100,100),resample=0)\ncatty = catty.convert('1')\nval=np.array(catty).astype(float)\nval=torch.from_numpy(val)\nif torch.max(cnn(val.view(1,1,100,100)).data, 1)[1]==1 :\n    print(\"It's a cat\")\nelse:\n    print(\"It's a dog\")","75f285b2":"# Well everything works good :)","c12b135d":"catty=Image.open('..\/input\/cat-and-dog\/test_set\/test_set\/dogs\/dog.4016.jpg')\nplt.imshow(Image.open('..\/input\/cat-and-dog\/test_set\/test_set\/dogs\/dog.4016.jpg'))\ncatty=catty.resize((100,100),resample=0)\ncatty = catty.convert('1')\nval=np.array(catty).astype(float)\nval=torch.from_numpy(val)\nif torch.max(cnn(val.view(1,1,100,100)).data, 1)[1]==1 :\n    print(\"It's a cat\")\nelse:\n    print(\"It's a dog\")","ca5200f7":"![](https:\/\/i.pinimg.com\/originals\/8c\/40\/05\/8c4005377742272315e792545a9c93df.gif)","c6f5d9c2":"# Saving the model","87a8b880":"# Doing some predictions","80d6b31a":"# Hope you liked it :)\n","90307c7c":"# Creating The Neural Net","ae27eb9b":"# Showing some pictures :)","e65f23ee":"# Making the Val - Train Data","abc30f7f":"# Using the Functions To Make The Data","0f85eac9":"Well Torchvision is a great tool to use but i tried to make it using simple methods first for clear understanding of how it would work . Got overall accuracy of 60% but still works great at the test data .\n## Give an upvote it you liked the file :)","679fe8a0":"# Plotting Loss and Accuracy","f321e617":"# Training The Model","e83658c2":"# Image Classification Using Pytorch Without Torchvision","7e52729f":"# Importing Packages","d90ace0b":"# Function to convert the images into array of desired size :)"}}