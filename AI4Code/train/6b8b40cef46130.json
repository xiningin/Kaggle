{"cell_type":{"b8dc7af7":"code","6e83104f":"code","ead837a6":"code","cc72894c":"code","c40794f0":"code","91af2085":"code","86cef820":"code","c40e461d":"code","a5e4e122":"code","7f2cac87":"code","5d77e492":"code","1a4ad808":"code","14e69320":"code","497819ae":"code","010c3c44":"code","055d63b7":"code","56123510":"code","a3b66e26":"code","f8abb2a1":"code","8528e25e":"code","c9e1d08a":"code","6fbeba1b":"code","39254c92":"code","4158e61b":"code","ced581bc":"code","6ccc5e0a":"code","ba2d6c7e":"code","7388f9cd":"code","f02fcee8":"code","e16069e0":"code","444175c5":"code","65005f7f":"code","4f39404d":"code","27e5fe96":"code","3a71815b":"code","ffc3e36d":"code","b7154dfd":"code","9023bf0f":"code","60a12d0b":"code","be3e8b06":"code","cb0fa07a":"code","461cfe6f":"code","a46facbb":"code","51d4dc11":"code","4c10d06f":"code","6f9521ec":"code","d97fbf9b":"code","c7a1c20b":"code","c11ea8c0":"code","ead3e223":"markdown","2408cdbf":"markdown","0d53911a":"markdown","291e164e":"markdown","15bd3c77":"markdown","25a04360":"markdown","b10764a1":"markdown","969b1a54":"markdown","14100395":"markdown","19bbde88":"markdown","bc9691c1":"markdown","314e856c":"markdown","c98a9522":"markdown","3c7ac6f5":"markdown","b3f49257":"markdown","19a75bb1":"markdown","a2e73df6":"markdown","3d6ae1c8":"markdown","831c7d64":"markdown","9ea89e75":"markdown","f93cc151":"markdown","acaac611":"markdown","847378e3":"markdown","98ca5c8e":"markdown"},"source":{"b8dc7af7":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 100)\n\nfrom itertools import product\nfrom sklearn.preprocessing import LabelEncoder\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\n\ndef plot_features(booster, figsize):    \n    fig, ax = plt.subplots(1,1,figsize=figsize)\n    return plot_importance(booster=booster, ax=ax)\n\nimport time\nimport sys\nimport gc\nimport pickle\nsys.version_info","6e83104f":"#\uc724\uc2dd\ub2d8 \uacbd\ub85c \nitems = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nshops = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ncats = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\ntrain = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\n# set index to ID to avoid droping it later\ntest  = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv').set_index('ID')","ead837a6":"plt.figure(figsize=(10,4))\nplt.xlim(-100, 3000) #x\ucd95 \ubc94\uc704 \uc124\uc815\nsns.boxplot(x=train.item_cnt_day)\n\nplt.figure(figsize=(10,4))\nplt.xlim(train.item_price.min(), train.item_price.max()*1.1)\nsns.boxplot(x=train.item_price)","cc72894c":"items.head()","c40794f0":"shops.head()","91af2085":"train.item_price.describe()","86cef820":"#\uac00\uaca9 75000 \/ \ud310\ub9e41001\uc778 \uc774\uc0c1\uce58\ub4e4\uc740 \uc81c\uac70\n\ntrain = train[train.item_price<75000]\ntrain = train[train.item_cnt_day<1001]","c40e461d":"median = train[(train.shop_id==32)&(train.item_id==2973)&(train.date_block_num==4)&(train.item_price>0)].item_price.median()\ntrain.loc[train.item_price<0, 'item_price'] = median","a5e4e122":"# \u042f\u043a\u0443\u0442\u0441\u043a \u041e\u0440\u0434\u0436\u043e\u043d\u0438\u043a\u0438\u0434\u0437\u0435, 56\ntrain.loc[train.shop_id == 0, 'shop_id'] = 57\ntest.loc[test.shop_id == 0, 'shop_id'] = 57\n# \u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426 \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\"\ntrain.loc[train.shop_id == 1, 'shop_id'] = 58\ntest.loc[test.shop_id == 1, 'shop_id'] = 58\n# \u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0443\u043b. \u0427\u043a\u0430\u043b\u043e\u0432\u0430 39\u043c\u00b2\ntrain.loc[train.shop_id == 10, 'shop_id'] = 11\ntest.loc[test.shop_id == 10, 'shop_id'] = 11","7f2cac87":"shops.loc[shops.shop_name == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\nshops['city'] = shops['shop_name'].str.split(' ').map(lambda x: x[0])\nshops.loc[shops.city == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\nshops['city_code'] = LabelEncoder().fit_transform(shops['city'])\nshops = shops[['shop_id','city_code']]\n\ncats['split'] = cats['item_category_name'].str.split('-')\ncats['type'] = cats['split'].map(lambda x: x[0].strip())\ncats['type_code'] = LabelEncoder().fit_transform(cats['type'])\n# if subtype is nan then type\ncats['subtype'] = cats['split'].map(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\ncats['subtype_code'] = LabelEncoder().fit_transform(cats['subtype'])\ncats = cats[['item_category_id','type_code', 'subtype_code']]\n\nitems.drop(['item_name'], axis=1, inplace=True)","5d77e492":"len(list(set(test.item_id) - set(test.item_id).intersection(set(train.item_id)))), len(list(set(test.item_id))), len(test)","1a4ad808":"ts = time.time()\nmatrix = []\ncols = ['date_block_num','shop_id','item_id']\nfor i in range(34):\n    sales = train[train.date_block_num==i]\n    matrix.append(np.array(list(product([i], sales.shop_id.unique(), sales.item_id.unique())), dtype='int16'))\n    \nmatrix = pd.DataFrame(np.vstack(matrix), columns=cols)\nmatrix['date_block_num'] = matrix['date_block_num'].astype(np.int8)\nmatrix['shop_id'] = matrix['shop_id'].astype(np.int8)\nmatrix['item_id'] = matrix['item_id'].astype(np.int16)\nmatrix.sort_values(cols,inplace=True)\ntime.time() - ts","14e69320":"train['revenue'] = train['item_price'] *  train['item_cnt_day']","497819ae":"ts = time.time()\ngroup = train.groupby(['date_block_num','shop_id','item_id']).agg({'item_cnt_day': ['sum']})\ngroup.columns = ['item_cnt_month']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=cols, how='left')\nmatrix['item_cnt_month'] = (matrix['item_cnt_month']\n                                .fillna(0)\n                                .clip(0,20) # NB clip target here\n                                .astype(np.float16))\ntime.time() - ts","010c3c44":"test['date_block_num'] = 34\ntest['date_block_num'] = test['date_block_num'].astype(np.int8)\ntest['shop_id'] = test['shop_id'].astype(np.int8)\ntest['item_id'] = test['item_id'].astype(np.int16)","055d63b7":"ts = time.time()\n#matrix\uc640 test\ub97c \ucd94\uac00\ud55c\ub2e4.\nmatrix = pd.concat([matrix, test], ignore_index=True, sort=False, keys=cols)\nmatrix.fillna(0, inplace=True) # 34 month\ntime.time() - ts","56123510":"ts = time.time()\n#matrix\uc5d0 \ub370\uc774\ud130 \ud569\uce58\uae30\n# matrix = shop \/ item \/ cats\nmatrix = pd.merge(matrix, shops, on=['shop_id'], how='left')\nmatrix = pd.merge(matrix, items, on=['item_id'], how='left')\nmatrix = pd.merge(matrix, cats, on=['item_category_id'], how='left')\n\n#\ub370\uc774\ud130\uc758 \ud615\ud0dc\ub97c \uc9c0\uc815\ud574\uc900\ub2e4.\nmatrix['city_code'] = matrix['city_code'].astype(np.int8)\nmatrix['item_category_id'] = matrix['item_category_id'].astype(np.int8)\nmatrix['type_code'] = matrix['type_code'].astype(np.int8)\nmatrix['subtype_code'] = matrix['subtype_code'].astype(np.int8)\ntime.time() - ts","a3b66e26":"#\ud568\uc218 \uc124\uc815\n\ndef lag_feature(df, lags, col):\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n    #tmp\ub97c \ub370\uc774\ud130 \ud504\ub808\uc784\uc73c\ub85c \uc815\uc758\n    #tmp\ub97c 3\uac00\uc9c0 \ud56d\ubaa9\uc73c\ub85c \uc124\uc815\n    for i in lags:\n        shifted = tmp.copy()        #tmp\ub97c \ubcf5\uc0ac\n        # \uce7c\ub7fc\uba85(\ud544\ub4dc)\ubaa9\ub85d \ucd9c\ub825\n        shifted.columns = ['date_block_num','shop_id','item_id', col+'_lag_'+str(i)]\n        shifted['date_block_num'] += i\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n    return df","f8abb2a1":"ts = time.time()\n#\ud568\uc218 \uc801\uc6a9\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'item_cnt_month')\ntime.time() - ts","8528e25e":"ts = time.time()\n#.groupby \uc9d1\uacc4\ud568\uc218\n#date_block_num\ub85c \ub098\ub204\uace0 \/ item_cnt_month\uc5d0 \ub300\ud574 \ud3c9\uade0\uc744 \ub0b8\ub2e4\ngroup = matrix.groupby(['date_block_num']).agg({'item_cnt_month': ['mean']})\n#\uadf8\ub8f8\uc5d0 \uc0c8\ub85c\uc6b4 \uceec\ub7fc \ud3c9\uade0\uc744 \ucd94\uac00\ngroup.columns = [ 'date_avg_item_cnt' ]\n#reset_index : \uae30\uc874\uc758 \ud589 \uc778\ub371\uc2a4\ub97c \uc81c\uac70\ud558\uace0 \uc778\ub371\uc2a4\ub97c \ub370\uc774\ud130 \uc5f4\ub85c \ucd94\uac00\ngroup.reset_index(inplace=True)\n\n#.merge \ub370\uc774\ud130 \ud569\uce58\uae30\n# matrix \/ group \uc744 date_block_num\nmatrix = pd.merge(matrix, group, on=['date_block_num'], how='left')\nmatrix['date_avg_item_cnt'] = matrix['date_avg_item_cnt'].astype(np.float16)\n#date_avg_item_cnt_lag_1 \uc124\uc815 \nmatrix = lag_feature(matrix, [1], 'date_avg_item_cnt')\n#\ud574\ub2f9 \ud589\uc5d0\uc11c axis\uac00 1 \uc774\uba74 \uc0ad\uc81c\nmatrix.drop(['date_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","c9e1d08a":"# 'date_item_avg_item_cnt'\uc5d0 \uad00\ud55c \uc815\ub9ac\n\nts = time.time()\n#\ubcc0\uc218\uc124\uc815 -> groupby\ud558\uace0 item_cnt_month\uc5d0\ub300\ud574 \ud3c9\uade0\uc744 \ub0b8\ub2e4\ngroup = matrix.groupby(['date_block_num', 'item_id']).agg({'item_cnt_month': ['mean']})\n#\uceec\ub7fc\ucd94\uac00\ngroup.columns = [ 'date_item_avg_item_cnt' ]\n#reset_index : \uae30\uc874\uc758 \ud589 \uc778\ub371\uc2a4\ub97c \uc81c\uac70\ud558\uace0 \uc778\ub371\uc2a4\ub97c \ub370\uc774\ud130 \uc5f4\ub85c \ucd94\uac00\ngroup.reset_index(inplace=True)\n\n#matrix\uc5d0 \ucd94\uac00\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_id'], how='left')\n#\ud615\ud0dc\uc9c0\uc815\nmatrix['date_item_avg_item_cnt'] = matrix['date_item_avg_item_cnt'].astype(np.float16)\n#\ud568\uc218\ub85c date_item_avg_item_cnt \uc0dd\uc131\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'date_item_avg_item_cnt')\n#\ud574\ub2f9 \ud589\uc5d0\uc11c axis\uac00 1 \uc774\uba74 \uc0ad\uc81c\nmatrix.drop(['date_item_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","6fbeba1b":"# 'date_shop_avg_item_cnt'\uc5d0 \uad00\ud55c \uc815\ub9ac\n\nts = time.time()\ngroup = matrix.groupby(['date_block_num', 'shop_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_shop_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','shop_id'], how='left')\nmatrix['date_shop_avg_item_cnt'] = matrix['date_shop_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'date_shop_avg_item_cnt')\nmatrix.drop(['date_shop_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","39254c92":"# 'date_cat_avg_item_cnt'\uc5d0 \uad00\ud55c \uc815\ub9ac\n\nts = time.time()\ngroup = matrix.groupby(['date_block_num', 'item_category_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_cat_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_category_id'], how='left')\nmatrix['date_cat_avg_item_cnt'] = matrix['date_cat_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_cat_avg_item_cnt')\nmatrix.drop(['date_cat_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","4158e61b":"# 'date_shop_cat_avg_item_cnt'\uc5d0 \uad00\ud55c \uc815\ub9ac\n\nts = time.time()\ngroup = matrix.groupby(['date_block_num', 'shop_id', 'item_category_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_cat_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'item_category_id'], how='left')\nmatrix['date_shop_cat_avg_item_cnt'] = matrix['date_shop_cat_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_shop_cat_avg_item_cnt')\nmatrix.drop(['date_shop_cat_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","ced581bc":"# 'date_shop_type_avg_item_cnt'\uc5d0 \uad00\ud55c \uc815\ub9ac\n\nts = time.time()\ngroup = matrix.groupby(['date_block_num', 'shop_id', 'type_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_type_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'type_code'], how='left')\nmatrix['date_shop_type_avg_item_cnt'] = matrix['date_shop_type_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_shop_type_avg_item_cnt')\nmatrix.drop(['date_shop_type_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","6ccc5e0a":"# 'date_shop_subtype_avg_item_cnt'\uc5d0 \uad00\ud55c \uc815\ub9ac\n\nts = time.time()\ngroup = matrix.groupby(['date_block_num', 'shop_id', 'subtype_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_subtype_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'subtype_code'], how='left')\nmatrix['date_shop_subtype_avg_item_cnt'] = matrix['date_shop_subtype_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_shop_subtype_avg_item_cnt')\nmatrix.drop(['date_shop_subtype_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","ba2d6c7e":"# 'date_city_avg_item_cnt'\uc5d0 \uad00\ud55c \uc815\ub9ac\n\nts = time.time()\ngroup = matrix.groupby(['date_block_num', 'city_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_city_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'city_code'], how='left')\nmatrix['date_city_avg_item_cnt'] = matrix['date_city_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_city_avg_item_cnt')\nmatrix.drop(['date_city_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","7388f9cd":"# 'date_item_city_avg_item_cnt'\uc5d0 \uad00\ud55c \uc815\ub9ac\n\nts = time.time()\ngroup = matrix.groupby(['date_block_num', 'item_id', 'city_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_item_city_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'item_id', 'city_code'], how='left')\nmatrix['date_item_city_avg_item_cnt'] = matrix['date_item_city_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_item_city_avg_item_cnt')\nmatrix.drop(['date_item_city_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","f02fcee8":"# 'date_type_avg_item_cnt'\uc5d0 \uad00\ud55c \uc815\ub9ac\n\nts = time.time()\ngroup = matrix.groupby(['date_block_num', 'type_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_type_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'type_code'], how='left')\nmatrix['date_type_avg_item_cnt'] = matrix['date_type_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_type_avg_item_cnt')\nmatrix.drop(['date_type_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","e16069e0":"# 'date_subtype_avg_item_cnt'\uc5d0 \uad00\ud55c \uc815\ub9ac\n\nts = time.time()\ngroup = matrix.groupby(['date_block_num', 'subtype_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_subtype_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'subtype_code'], how='left')\nmatrix['date_subtype_avg_item_cnt'] = matrix['date_subtype_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_subtype_avg_item_cnt')\nmatrix.drop(['date_subtype_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","444175c5":"ts = time.time()\n#\uc804\uccb4 item\uc73c\ub85c \uac00\uaca9\ud3c9\uade0\n\ngroup = train.groupby(['item_id']).agg({'item_price': ['mean']})\ngroup.columns = ['item_avg_item_price']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['item_id'], how='left')\nmatrix['item_avg_item_price'] = matrix['item_avg_item_price'].astype(np.float16)\n\n#-----------------------------------\n# \ub0a0\uc9dc\ubcc4 item \uac00\uaca9\ud3c9\uade0\ngroup = train.groupby(['date_block_num','item_id']).agg({'item_price': ['mean']})\ngroup.columns = ['date_item_avg_item_price']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_id'], how='left')\nmatrix['date_item_avg_item_price'] = matrix['date_item_avg_item_price'].astype(np.float16)\n#----------------------------------\n\n\nlags = [1,2,3,4,5,6]\nmatrix = lag_feature(matrix, lags, 'date_item_avg_item_price')\n\nfor i in lags:\n    matrix['delta_price_lag_'+str(i)] = \\\n        (matrix['date_item_avg_item_price_lag_'+str(i)] - matrix['item_avg_item_price']) \/ matrix['item_avg_item_price']\n\ndef select_trend(row):\n    for i in lags:\n        if row['delta_price_lag_'+str(i)]:\n            return row['delta_price_lag_'+str(i)]\n    return 0\n    \nmatrix['delta_price_lag'] = matrix.apply(select_trend, axis=1)\nmatrix['delta_price_lag'] = matrix['delta_price_lag'].astype(np.float16)\nmatrix['delta_price_lag'].fillna(0, inplace=True)\n\n# https:\/\/stackoverflow.com\/questions\/31828240\/first-non-null-value-per-row-from-a-list-of-pandas-columns\/31828559\n# matrix['price_trend'] = matrix[['delta_price_lag_1','delta_price_lag_2','delta_price_lag_3']].bfill(axis=1).iloc[:, 0]\n# Invalid dtype for backfill_2d [float16]\n\nfetures_to_drop = ['item_avg_item_price', 'date_item_avg_item_price']\nfor i in lags:\n    fetures_to_drop += ['date_item_avg_item_price_lag_'+str(i)]\n    fetures_to_drop += ['delta_price_lag_'+str(i)]\n\nmatrix.drop(fetures_to_drop, axis=1, inplace=True)\n\ntime.time() - ts","65005f7f":"ts = time.time()\n#sum\uc73c\ub85c \ud569\uacc4 \uacc4\uc0b0\n#\ub0a0\uc9dc\ubcc4 shop \ud569\uacc4\ngroup = train.groupby(['date_block_num','shop_id']).agg({'revenue': ['sum']})\ngroup.columns = ['date_shop_revenue']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','shop_id'], how='left')\nmatrix['date_shop_revenue'] = matrix['date_shop_revenue'].astype(np.float32)\n\n#----------------------------------------------------\n#\uc885\ud569 shop \ud569\uacc4\ngroup = group.groupby(['shop_id']).agg({'date_shop_revenue': ['mean']})\ngroup.columns = ['shop_avg_revenue']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['shop_id'], how='left')\nmatrix['shop_avg_revenue'] = matrix['shop_avg_revenue'].astype(np.float32)\n\nmatrix['delta_revenue'] = (matrix['date_shop_revenue'] - matrix['shop_avg_revenue']) \/ matrix['shop_avg_revenue']\nmatrix['delta_revenue'] = matrix['delta_revenue'].astype(np.float16)\n\n#-----------------------------------------------------\n#\ub370\uc774\ud130 \uc804\ucc98\ub9ac\nmatrix = lag_feature(matrix, [1], 'delta_revenue')\n\nmatrix.drop(['date_shop_revenue','shop_avg_revenue','delta_revenue'], axis=1, inplace=True)\ntime.time() - ts","4f39404d":"matrix['month'] = matrix['date_block_num'] % 12","27e5fe96":"days = pd.Series([31,28,31,30,31,30,31,31,30,31,30,31])\nmatrix['days'] = matrix['month'].map(days).astype(np.int8)","3a71815b":"ts = time.time()\n# item \/ shop \ubcc4 \ub9c8\uc9c0\ub9c9 \ud310\ub9e4\ncache = {}\nmatrix['item_shop_last_sale'] = -1\nmatrix['item_shop_last_sale'] = matrix['item_shop_last_sale'].astype(np.int8)\nfor idx, row in matrix.iterrows():    \n    key = str(row.item_id)+' '+str(row.shop_id)\n    if key not in cache:\n        if row.item_cnt_month!=0:\n            cache[key] = row.date_block_num\n    else:\n        last_date_block_num = cache[key]\n        matrix.at[idx, 'item_shop_last_sale'] = row.date_block_num - last_date_block_num\n        cache[key] = row.date_block_num         \ntime.time() - ts","ffc3e36d":"ts = time.time()\n\n# item\ubcc4 \ub9c8\uc9c0\ub9c9 \ud310\ub9e4\ncache = {}\nmatrix['item_last_sale'] = -1\nmatrix['item_last_sale'] = matrix['item_last_sale'].astype(np.int8)\nfor idx, row in matrix.iterrows():    \n    key = row.item_id\n    if key not in cache:\n        if row.item_cnt_month!=0:\n            cache[key] = row.date_block_num\n    else:\n        last_date_block_num = cache[key]\n        if row.date_block_num>last_date_block_num:\n            matrix.at[idx, 'item_last_sale'] = row.date_block_num - last_date_block_num\n            cache[key] = row.date_block_num         \ntime.time() - ts","b7154dfd":"ts = time.time()\nmatrix['item_shop_first_sale'] = matrix['date_block_num'] - matrix.groupby(['item_id','shop_id'])['date_block_num'].transform('min')\nmatrix['item_first_sale'] = matrix['date_block_num'] - matrix.groupby('item_id')['date_block_num'].transform('min')\ntime.time() - ts","9023bf0f":"ts = time.time()\n#date_block_num \uc774 12\uc774\uc0c1\uc778 \uac83\ub9cc \ub0a8\uae34\ub2e4.\nmatrix = matrix[matrix.date_block_num > 11]\ntime.time() - ts","60a12d0b":"#\uc798\ubaa8\ub974\uaca0\uc5b4\uc694?\n\nts = time.time()\ndef fill_na(df):\n    for col in df.columns:\n        if ('_lag_' in col) & (df[col].isnull().any()):\n            if ('item_cnt' in col):\n                df[col].fillna(0, inplace=True)         \n    return df\n\nmatrix = fill_na(matrix)\ntime.time() - ts","be3e8b06":"#\uc81c\uc791\ud55c \uceec\ub7fc\ub4e4\uc744 \ub2e4\uc2dc\ud55c\ubc88 \ud655\uc778\ud55c\ub2e4.\nmatrix.columns","cb0fa07a":"matrix.info()","461cfe6f":"#\uc0dd\uc131\ud55c \uac12\ub4e4\uc744 \uc9c0\uc6cc\uc900\ub2e4.\ndata = matrix\n\ndel cache\ndel group\ndel items\ndel shops\ndel cats\ndel train\n","a46facbb":"#\ub370\uc774\ud130 \uc124\uc815\ndata = data[[\n    'date_block_num',\n    'shop_id',\n    'item_id',\n    'item_cnt_month',\n    'city_code',\n    'item_category_id',\n    'type_code',\n    'subtype_code',\n    'item_cnt_month_lag_1',\n    'item_cnt_month_lag_2',\n    'item_cnt_month_lag_3',\n    'item_cnt_month_lag_6',\n    'item_cnt_month_lag_12',\n    'date_avg_item_cnt_lag_1',\n    'date_item_avg_item_cnt_lag_1',\n    'date_item_avg_item_cnt_lag_2',\n    'date_item_avg_item_cnt_lag_3',\n    'date_item_avg_item_cnt_lag_6',\n    'date_item_avg_item_cnt_lag_12',\n    'date_shop_avg_item_cnt_lag_1',\n    'date_shop_avg_item_cnt_lag_2',\n    'date_shop_avg_item_cnt_lag_3',\n    'date_shop_avg_item_cnt_lag_6',\n    'date_shop_avg_item_cnt_lag_12',\n    'date_cat_avg_item_cnt_lag_1',\n    'date_shop_cat_avg_item_cnt_lag_1',\n    #'date_shop_type_avg_item_cnt_lag_1',\n    #'date_shop_subtype_avg_item_cnt_lag_1',\n    'date_city_avg_item_cnt_lag_1',\n    'date_item_city_avg_item_cnt_lag_1',\n    #'date_type_avg_item_cnt_lag_1',\n    #'date_subtype_avg_item_cnt_lag_1',\n    'delta_price_lag',\n    'month',\n    'days',\n    'item_shop_last_sale',\n    'item_last_sale',\n    'item_shop_first_sale',\n    'item_first_sale',\n]]","51d4dc11":"#train \uc138\ud2b8\nX_train = data[data.date_block_num < 33].drop(['item_cnt_month'], axis=1)\nY_train = data[data.date_block_num < 33]['item_cnt_month']\n\n#\uac80\uc99d \uc138\ud2b8\nX_valid = data[data.date_block_num == 33].drop(['item_cnt_month'], axis=1)\nY_valid = data[data.date_block_num == 33]['item_cnt_month']\n\n#\uc2dc\ud5d8\uc138\ud2b8\nX_test = data[data.date_block_num == 34].drop(['item_cnt_month'], axis=1)","4c10d06f":"#\uc81c\uac70\ndel data\ngc.collect();","6f9521ec":"ts = time.time()\n\nmodel = XGBRegressor(\n    max_depth=10,\n    n_estimators=1000,\n    min_child_weight=0.5, \n    colsample_bytree=0.9, \n    subsample=0.8, \n    eta=0.1,    \n    seed=1)\n\nmodel.fit(\n    X_train, \n    Y_train, \n    eval_metric=\"rmse\", \n    eval_set=[(X_train, Y_train), (X_valid, Y_valid)], \n    verbose=True, \n    early_stopping_rounds = 10)\ntime.time() - ts","d97fbf9b":"Y_test = model.predict(X_test).clip(0, 20)##clip0-20\u4e4b\u95f4\ntest  = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv').set_index('ID')\nsubmission = pd.DataFrame({\n    \"ID\": test.index, \n    \"item_cnt_month\": Y_test\n})\nsubmission.to_csv('xgb_submission1.csv', index=False)","c7a1c20b":"submission.to_csv('xgb_submission.csv', index=False)\n","c11ea8c0":"plot_features(model, (10,14))","ead3e223":"# 2) xgboost\n","2408cdbf":"### Test set\nTo use time tricks append test pairs to the matrix.\n\n","0d53911a":"#### \ud14c\uc2a4\ud2b8 \uc138\ud2b8\ub294 \uc77c\ubd80 \uc0c1\uc810\uacfc 34 \uac1c\uc6d4 \uc774\ub0b4\uc5d0\uc788\ub294 \uc77c\ubd80 \uc81c\ud488\uc785\ub2c8\ub2e4.\n #### 5100 \ud488\ubaa9 * 42 \uc0c1\uc810 = 214200 \uc30d\uc774 \uc788\uc2b5\ub2c8\ub2e4. \n #### train\uacfc \ube44\uad50\ud558\uc5ec 363 \uac1c\uc758 \ud488\ubaa9\uc774 \uc2e0\ud488\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud14c\uc2a4\ud2b8 \uc138\ud2b8 \ub300\uc0c1 \uac12\uc758 \ub300\ubd80\ubd84\uc758 \ud56d\ubaa9\uc5d0 \ub300\ud574 0\uc774\ub418\uc5b4\uc57c\ud569\ub2c8\ub2e4. \n #### \ubc18\uba74 train \uc138\ud2b8\uc5d0\ub294 \uacfc\uac70\uc5d0 \ud310\ub9e4\ub418\uac70\ub098 \ubc18\ud658 \ub41c \ud398\uc5b4 \ub9cc \ud3ec\ud568\ub429\ub2c8\ub2e4. \uc8fc\uc694 \uc544\uc774\ub514\uc5b4\ub294 \uc6d4\ubcc4 \ud310\ub9e4\ub7c9\uc744 \uacc4\uc0b0\ud558\uace0 \ud574\ub2f9 \uc6d4\uc758 \uace0\uc720 \ud55c \uc30d\ub9c8\ub2e4 \ub9e4\ucd9c\uc744 0\uc73c\ub85c \ub298\ub9ac\ub294 \uac83\uc785\ub2c8\ub2e4. \n #### \uc774 \ubc29\ubc95\uc73c\ub85c \ud559\uc2b5 \ub370\uc774\ud130\ub294 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc640 \uc720\uc0ac\ud569\ub2c8\ub2e4.","291e164e":"#### Item\uc758 \uac00\uaca9\uc774 0\uc778 \uacb0\uce21\uc9c0 \uc911\uc559\uac12\uc73c\ub85c \ub300\uccb4\n\n","15bd3c77":"### Trend features\nPrice trend for the last six months.\n#### \ucd5c\uadfc 6\uac1c\uc6d4 \ub3d9\uc548\uc758 \uac00\uaca9 \ub3d9\ud5a5","25a04360":"### Shops\/Cats\/Items \ucc98\ub9ac\n","b10764a1":"### Special features","969b1a54":"Select perfect features\n\n","14100395":"#### \uc774\ub984\uc774 \ube44\uc2b7\ud55c shops \ucc98\ub9ac \n","19bbde88":"#### \uac01\uac01 shop\/item \uc30d \ubc0f \ub2e8\uc77c item\uc5d0 \ub300\ud55c \ub9c8\uc9c0\ub9c9 \ud310\ub9e4 \uc774\ud6c4 \uba87 \uac1c\uc6d4\n#### \ud0a4\uac00 {shop_id, item_id}\uc774\uace0 \uac12\uc774 date_block_num\uc778 \ud574\uc2dc \ud14c\uc774\ube14\uc744 \uc0dd\uc131\ud558\uc2ed\uc2dc\uc624. \uc704\uc5d0\uc11c \ub370\uc774\ud130\ub97c \ubc18\ubcf5\ud55c\ub2e4. {row}\uc778 \uacbd\uc6b0 \ud589\uc744 \ud3ec\uc5b4\uce6d\ud558\uc2ed\uc2dc\uc624.shop_id,row.item_id}\uc774(\uac00) \ud14c\uc774\ube14\uc5d0 \uc5c6\ub294 \uacbd\uc6b0 \ud14c\uc774\ube14\uc5d0 \ucd94\uac00\ud558\uace0 \ud574\ub2f9 \uac12\uc744 \ud589.date_block_num\uc73c\ub85c \uc124\uc815\ud558\uc2ed\uc2dc\uc624.HashTable\uc5d0 \ud0a4\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\uba74 \uce90\uc2dc\ub41c \uac12\uacfc \ud589.date_block_num \uc0ac\uc774\uc758 \ucc28\uc774\ub97c \uacc4\uc0b0\ud558\uc2ed\uc2dc\uc624.","bc9691c1":"### \uc774\uc0c1\uce58 \uc81c\uac70 ","314e856c":"Months since the first sale for each shop\/item pair and for item only.\n#### \uac01 shop\/item \uc30d \ubc0f item\uc5d0 \ub300\ud55c \uccab \ud310\ub9e4 \uc774\ud6c4 \uba87 \uac1c\uc6d4.\n","c98a9522":"12\ub97c \ucc98\uc74c 12\uac1c\uc6d4 \ub3d9\uc548 \uc9c0\uc5f0 \uac12\uc73c\ub85c \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0. \ub610\ud55c \uc774 \ub2ec\uc758 \uacc4\uc0b0\ub41c \uac12(\ud14c\uc2a4\ud2b8 \uc138\ud2b8\uc5d0 \ub300\ud574 \uacc4\uc0b0\ud560 \uc218 \uc5c6\ub294 \ub2e4\ub978 \ub2e8\uc5b4)\uc73c\ub85c \ubaa8\ub4e0 \uc5f4\uc744 \uc0ad\uc81c\ud558\uc2ed\uc2dc\uc624","3c7ac6f5":"# 1) \uc804\ucc98\ub9ac \uc791\uc5c5 \n","b3f49257":"Validation strategy is 34 month for the test set, 33 month for the validation set and 13-33 months for the train.\n\n","19a75bb1":"Mean encoded features\n\ud2b9\uc9d5\uc758 \ud3c9\uade0\ud45c\ud604","a2e73df6":"Last month shop revenue trend\n\uc9c0\ub09c\ub2ec shop \ud569\uacc4\n\n","3d6ae1c8":"Traget lags\n","831c7d64":"#### \uc0c1\uc810 \/ \ud56d\ubaa9 \uc30d\uc73c\ub85c \uc124\uc815\ub41c \uc9d1\uacc4 \uae30\ucc28\ub294 \ubaa9\ud45c \uc9d1\uacc4\ub97c \uacc4\uc0b0 \ud55c \ub2e4\uc74c \ubaa9\ud45c \uac12\uc744 \ud074\ub9bd (0,20)\ud569\ub2c8\ub2e4. \uc774 \ubc29\ubc95\uc73c\ub85c train \ubaa9\ud45c\ub294 \ud14c\uc2a4\ud2b8 \uc608\uce21\uacfc \uc720\uc0ac\ud569\ub2c8\ub2e4.\n#### \ub098\uc911\uc5d0 \ud14c\uc2a4\ud2b8 \uc138\ud2b8\uc640 \uc5f0\uacb0 \ud55c \ud6c4 \ub2e4\uc6b4 \uce90\uc2a4\ud2b8\ub418\uc9c0 \uc54a\ub3c4\ub85d item_cnt_month\uc5d0 \uc815\uc218 \ub300\uc2e0 float\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. int16\uc774\uba74 NaN \uac12\uc73c\ub85c \uc5f0\uacb0\ub41c \ud6c4\uc5d0\ub294 int64\uac00\ub418\uc9c0\ub9cc foat16\uc740 NaN\uc5d0\uc11c\ub3c4 float16\uc774\ub429\ub2c8\ub2e4.","9ea89e75":"Producing lags brings a lot of nulls.\n\n","f93cc151":"Number of days in a month. There are no leap years.\n#### \uc724\ub144\uc5c6\uc774 \ub2ec\ub9c8\ub2e4 \uc77c\uc758 \uc218\n\n","acaac611":"Shops\/Items\/Cats features\n","847378e3":"### Final preparations\nBecause of the using 12 as lag value drop first 12 months. Also drop all the columns with this month calculated values (other words which can not be calcucated for the test set).","98ca5c8e":"\ud14c\uc2a4\ud2b8 \uc138\ud2b8\ub294 34\uac1c\uc6d4\uc5d0 \ub300\ud574\uc11c,  \uac80\uc99d\ud560 \ub300\uc0c1\uc740 33\uac1c\uc6d4\uc5d0 \ub300\ud574\uc11c, train\uc138\ud2b8\ub294 13~33\uac1c\uc758 \ub2ec\uc5d0 \ub300\ud55c \ub370\uc774\ud130\ub85c \uac80\uc99d\ud55c\ub2e4."}}