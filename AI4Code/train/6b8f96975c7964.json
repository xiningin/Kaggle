{"cell_type":{"2e1aaf52":"code","15cedafe":"code","d00eb30e":"code","6a21378a":"code","b557ea2a":"code","9d79c7ac":"code","5444c7f5":"code","b9022a5b":"code","32938a3a":"code","ae179805":"code","074144ac":"code","bacf1d49":"code","811527a4":"code","bb28ae7b":"code","2f7eaa3b":"code","cac9a60c":"code","3544f3f2":"code","979d788f":"code","12049d09":"code","e5c4ce50":"code","4780b89f":"code","bbe4a391":"code","0203a2f2":"code","6e172102":"code","911f59a0":"code","b73ae1e7":"code","6b935cdd":"code","c2c480fb":"code","4a9349f5":"code","fe33bb77":"code","eb7096a0":"code","386bdf89":"code","9bc517ef":"code","d3968def":"code","3dafbf4b":"code","2d5c0bbe":"code","2ecdb029":"code","d9246971":"code","c00d7dd9":"code","da3c7910":"code","7ce9183b":"code","91be832c":"code","b74518cd":"code","4e8c2737":"code","4778cdd7":"code","9f26db5f":"code","4b963240":"code","796b25f3":"code","d6e05330":"code","5fe5cfc2":"code","20766f45":"code","e4a31d5a":"code","f3e0b3f3":"code","323e1a44":"code","72873641":"code","acd828d5":"code","4a692fcd":"code","9c695b4e":"code","dc67db22":"code","3beb8485":"code","8feee906":"code","be6a2fcb":"code","9ba68a0b":"code","5df9d5ae":"code","d36e7b86":"code","cf73eb98":"code","16181484":"code","3ed56ba9":"code","d4eba244":"code","ccea93c5":"code","8df9c3bf":"code","45abe471":"code","16e52cbd":"code","74554b31":"code","3c7ac85c":"code","18da4ee9":"code","5a942599":"markdown","f198bfa4":"markdown","3520d174":"markdown","2d63d58f":"markdown","71de050c":"markdown","4b518f5a":"markdown","a7fb09f0":"markdown","93158b90":"markdown","9563b709":"markdown","21f8722c":"markdown","11b076c1":"markdown","d49b6458":"markdown","0f2329e1":"markdown","bc10d681":"markdown","bb376d6c":"markdown","ca3a522a":"markdown","dda6b7e5":"markdown","51892499":"markdown","7073a2b7":"markdown","40936a1f":"markdown","6e025bc6":"markdown","0aa0c47c":"markdown","592cd8e3":"markdown","1463eb68":"markdown","beded027":"markdown","4742c7d6":"markdown","4d57aab6":"markdown","814123c6":"markdown","6252f214":"markdown","71dd5e18":"markdown","15509cac":"markdown","dac234f9":"markdown","e979f8e5":"markdown","df56cb48":"markdown","11d69795":"markdown","14f142a2":"markdown","48230f9f":"markdown","4c7ab44d":"markdown","5572435f":"markdown","05b3db0b":"markdown","998c0079":"markdown","6a0a7dfd":"markdown","2f428603":"markdown","c83d111f":"markdown"},"source":{"2e1aaf52":"import numpy as np \nimport pandas as pd \npd.options.mode.chained_assignment = None\nimport matplotlib.pyplot as plt\nfrom  matplotlib.ticker import FuncFormatter\nimport seaborn as sns","15cedafe":"df = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","d00eb30e":"df.head(10)","6a21378a":"df.shape","b557ea2a":"df.dtypes","9d79c7ac":"df.isnull().sum()","5444c7f5":"df.rating[df['rating']=='UR'].value_counts()","b9022a5b":"df['rating'] = df['rating'].fillna('UR')","32938a3a":"movies_df = df[df['type'] == 'Movie']\ntv_df = df[df['type'] == 'TV Show']","ae179805":"movies_df.shape","074144ac":"movies_df.isna().sum()","bacf1d49":"movies_df['country'] = movies_df['country'].fillna('Undefined')","811527a4":"movies_df['date_added'] = movies_df['date_added'].fillna('January 1, 2020')","bb28ae7b":"movies_df['month_added'] = pd.to_datetime(movies_df['date_added']).dt.month_name()\nmovies_df['year_added'] = pd.to_datetime(movies_df['date_added']).dt.year","2f7eaa3b":"movies_df.head(10)","cac9a60c":"movies_df['country'] = movies_df.country.str.replace(\", | ,\", \",\")\nmovies_df['listed_in'] = movies_df.listed_in.str.replace(\", | ,\", \",\")\n","3544f3f2":"movies_country_df = pd.DataFrame(movies_df.country.str.split(',').tolist(), index=movies_df.show_id).stack()\nmovies_country_df = movies_country_df.reset_index([0, 'show_id'])\nmovies_country_df.columns = ['show_id', 'country']","979d788f":"plt.figure(figsize=(20,10))\nsns.set(style=\"white\")\n\n#for count plot\nax = sns.countplot(x=\"country\", data=movies_country_df, palette='Blues_d', order = movies_country_df.country.value_counts().iloc[:20].index)\n\n#aesthetics of the plot\nax.grid(False)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90, fontsize = 13)\nax.set_yticklabels(ax.get_yticks(), size = 10)\nsns.despine(bottom = True, left = True)\nplt.title('Countries with most movies available', fontsize = 20.5, fontweight = 'bold')\nplt.xlabel('Countries', fontsize = 17.5)\nplt.ylabel('')\nplt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))\n\n\n#setting count values on each bar\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()),(p.get_x()+0.2, p.get_height()+5), fontsize = 12.5)\n","12049d09":"movies_genre_df = pd.DataFrame(movies_df.listed_in.str.split(',').tolist(), index=movies_df.show_id).stack()\nmovies_genre_df = movies_genre_df.reset_index([0, 'show_id'])\nmovies_genre_df.columns = ['show_id', 'genre']","e5c4ce50":"plt.figure(figsize=(20,10))\nsns.set(style=\"white\")\n\n#for count plot\nax = sns.countplot(x=\"genre\", data=movies_genre_df, palette=\"PuBu_d\", order = movies_genre_df.genre.value_counts().iloc[:20].index)\n\n#aesthetics of the plot\nax.grid(False)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90, fontsize = 13)\nax.set_yticklabels(ax.get_yticks(), size = 10)\nsns.despine(bottom = True, left = True)\nplt.title('Most frequent movie genres', fontsize = 20.5, fontweight = 'bold')\nplt.xlabel('Genres', fontsize = 17.5)\nplt.ylabel('')\nplt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))\n\n\n#setting count values on each bar\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()),(p.get_x()+0.2, p.get_height()+5), fontsize = 12.5)\n","4780b89f":"#count of content added every year\n\n\nplt.figure(figsize=(20,10))\nsns.set(style=\"white\")\n\n#for count plot\nax = sns.countplot(x=\"year_added\", data=movies_df, palette='PuBu_d', order = movies_df.year_added.value_counts().index)\n\n#aesthetics of the plot\nax.grid(False)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90, fontsize = 13)\nax.set_yticklabels(ax.get_yticks(), size = 10)\nsns.despine(bottom = True, left = True)\nplt.title('Which year saw the most movies being added?', fontsize = 20.5, fontweight = 'bold')\nplt.xlabel('Year', fontsize = 17.5)\nplt.ylabel('')\nplt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))\n\n\n#setting count values on each bar\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()),(p.get_x()+0.2, p.get_height()+5), fontsize = 12.5)\n","bbe4a391":"#count of content added every month\n\n\nplt.figure(figsize=(20,10))\nsns.set(style=\"white\")\n\n#for count plot\nax = sns.countplot(x=\"month_added\", data=movies_df, palette='PuBu_d', order = movies_df.month_added.value_counts().index)\n\n#aesthetics of the plot\nax.grid(False)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90, fontsize = 13)\nax.set_yticklabels(ax.get_yticks(), size = 10)\nsns.despine(bottom = True, left = True)\nplt.title('Which months saw the most movies being added?', fontsize = 20.5, fontweight = 'bold')\nplt.xlabel('Month', fontsize = 17.5)\nplt.ylabel('')\nplt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))\n\n\n#setting count values on each bar\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()),(p.get_x()+0.2, p.get_height()+5), fontsize = 12.5)\n","0203a2f2":"plt.figure(figsize=(20,10))\n\nmovies_heatmap_df = movies_df.groupby(['year_added', 'month_added']).size().reset_index(name='count')\n\nmonth_ordered = [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August','September','October','November','December']\n\nmovies_heatmap_df['month_added'] = movies_heatmap_df['month_added'].astype(pd.api.types.CategoricalDtype(month_ordered))\n\nplt.figure(figsize=(40,14))\nsns.set(font_scale=2.25)\n\nax = pd.pivot_table(movies_heatmap_df, values= 'count', index=['month_added'], columns='year_added')\nsns.heatmap(ax, cmap=\"PuBu\", annot = True, fmt = \".1f\", annot_kws={'size':22})","6e172102":"movies_genrewise_df = movies_df[['show_id', 'year_added']]\nmovies_genrewise_df = pd.merge(movies_genre_df, movies_genrewise_df, on='show_id')","911f59a0":"movies_genrewise_df = movies_genrewise_df.groupby(['year_added', 'genre']).size().reset_index(name='count')","b73ae1e7":"genre_list = ['International Movies','Dramas','Comedies','Documentaries','Action & Adventure', 'Independent Movies', 'Thrillers','Children & Family Movies', 'Romantic Movies', 'Stand-Up Comedy' ]\nmovies_genrewise_df = movies_genrewise_df[movies_genrewise_df['genre'].isin(genre_list)]","6b935cdd":"g = sns.FacetGrid(movies_genrewise_df, col= 'genre', hue='genre', col_wrap=5, height = 4.5, aspect = 1.0, sharex=False, sharey = False)\ng = g.map(plt.plot, 'year_added', 'count')\ng = g.map(plt.fill_between, 'year_added', 'count', alpha=0.2)\ng = g.set_titles(\"{col_name}\")\ng = g.set(yticks = np.arange(0,800,100))\n\n\nplt.subplots_adjust(top=0.85)\ng.fig.suptitle('Yearly addition of most popular Movie genres on Netflix', fontsize = 20.5) \n","c2c480fb":"movies_df['duration'] = movies_df['year_added'] - movies_df['release_year']","4a9349f5":"duration_df = pd.Series(pd.cut(movies_df['duration'], np.arange(0,80,5)).value_counts()).reset_index()","fe33bb77":"duration_df = duration_df.rename(columns= {'index': 'bins', 'duration':'counts'})","eb7096a0":"plt.figure(figsize=(20,10))\nsns.set(style=\"white\")\n\nax = sns.barplot(x = duration_df['bins'], y = duration_df['counts'] ,data=duration_df, palette='PuBu_d')\n\nax.grid(False)\nax.set_xticklabels(ax.get_xticklabels(),fontsize = 13)\nax.set_yticklabels(ax.get_yticks(), size = 10)\nsns.despine(bottom = True, left = True)\nplt.title(\"Duration (in years) between a movie's release and its addition on Netflix\", fontsize = 20.5, fontweight = 'bold')\nplt.xlabel('Years', fontsize = 17.5)\nplt.ylabel('')\nplt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))\n\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()),(p.get_x()+0.2, p.get_height()+5), fontsize = 12.5)\n","386bdf89":"movies_df[movies_df.release_year.isin(movies_df['release_year'].nsmallest(13))]","9bc517ef":"movies_director_df = movies_df[['show_id', 'director']]\nmovies_director_df = movies_director_df.dropna()","d3968def":"movies_director_df['director'] = movies_director_df.director.str.replace(\", | ,\", \",\")","3dafbf4b":"movies_director_df = pd.DataFrame(movies_director_df.director.str.split(',').tolist(), index=movies_director_df.show_id).stack()\nmovies_director_df = movies_director_df.reset_index([0, 'show_id'])\nmovies_director_df.columns = ['show_id', 'director']\n","2d5c0bbe":"plt.figure(figsize=(20,10))\nsns.set(style=\"white\")\n\nax = sns.countplot(x=\"director\", data=movies_director_df, palette='PuBu_d', order = movies_director_df.director.value_counts().iloc[:20].index)\n\nax.grid(False)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90, fontsize = 13)\nax.set_yticklabels(ax.get_yticks(), size = 10)\nsns.despine(bottom = True, left = True)\nplt.title('Which directors have the most movies on Netflix?', fontsize = 20.5, fontweight = 'bold')\nplt.xlabel('Directors', fontsize = 17.5)\nplt.ylabel('')\nplt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))\n\nfor p in ax.patches:\n    ax.annotate('{:}'.format(p.get_height()),(p.get_x()+0.2, p.get_height()+0.5), fontsize = 12.5)\n","2ecdb029":"movies_director_df = pd.merge(movies_country_df, movies_director_df, on='show_id', how = 'inner')\nmovies_director_df = movies_director_df.groupby(['director','country']).size().reset_index(name='count')","d9246971":"country_list = ['United States', 'India', 'United Kingdom', 'France', 'Canada', 'Spain' ]\nmovies_director_df = movies_director_df[movies_director_df['country'].isin(country_list)]","c00d7dd9":"movies_director_df = movies_director_df.groupby(['country']).apply(lambda x: x.sort_values(['count'],ascending = False)).reset_index(drop = True)\nmovies_director_df = movies_director_df.groupby(['country']).head(10)","da3c7910":"f, axes = plt.subplots(2, 3, figsize=(25, 12), sharex=False)\n\nax1 = sns.barplot(x = 'count', y = 'director', data = movies_director_df[movies_director_df['country'] == 'United States'], palette=\"PuBu_d\", ax=axes[0, 0]).set_title(\"United States\")\n\nax2 = sns.barplot(x = 'count', y = 'director', data = movies_director_df[movies_director_df['country'] == 'India'], palette=\"PuBu_d\", ax=axes[0, 1]).set_title(\"India\")\n\nax3 = sns.barplot(x = 'count', y = 'director', data = movies_director_df[movies_director_df['country'] == 'United Kingdom'], palette=\"PuBu_d\", ax=axes[0, 2]).set_title(\"United Kingdom\")\n\nax4 = sns.barplot(x = 'count', y = 'director', data = movies_director_df[movies_director_df['country'] == 'France'], palette=\"PuBu_d\", ax=axes[1, 0]).set_title(\"France\")\n\nax5 = sns.barplot(x = 'count', y = 'director', data = movies_director_df[movies_director_df['country'] == 'Canada'], palette=\"PuBu_d\", ax=axes[1, 1]).set_title(\"Canada\")\n\nax6 = sns.barplot(x = 'count', y = 'director', data = movies_director_df[movies_director_df['country'] == 'Spain'], palette=\"PuBu_d\", ax=axes[1, 2]).set_title(\"Spain\")\n\n\nplt.setp(axes, xticks=np.arange(0,16,2))\nplt.tight_layout()","7ce9183b":"movies_cast_df = movies_df[['show_id', 'cast']]\nmovies_cast_df = movies_cast_df.dropna()","91be832c":"movies_cast_df['cast'] = movies_cast_df.cast.str.replace(\", | ,\", \",\")","b74518cd":"movies_cast_df = pd.DataFrame(movies_cast_df.cast.str.split(',').tolist(), index=movies_cast_df.show_id).stack()\nmovies_cast_df = movies_cast_df.reset_index([0, 'show_id'])\nmovies_cast_df.columns = ['show_id', 'cast']\n","4e8c2737":"plt.figure(figsize=(20,10))\nsns.set(style=\"white\")\n\n#for count plot\nax = sns.countplot(x=\"cast\", data=movies_cast_df, palette='PuBu_d', order = movies_cast_df.cast.value_counts().iloc[:20].index)\n\n#aesthetics of the plot\nax.grid(False)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90, fontsize = 13)\nax.set_yticklabels(ax.get_yticks(), size = 10)\nsns.despine(bottom = True, left = True)\nplt.title('Which artists have the most movies on Netflix?', fontsize = 20.5, fontweight = 'bold')\nplt.xlabel('Actors', fontsize = 17.5)\nplt.ylabel('')\nplt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))\n\n\n#setting count values on each bar\nfor p in ax.patches:\n    ax.annotate('{:}'.format(p.get_height()),(p.get_x()+0.2, p.get_height()+0.5), fontsize = 12.5)\n","4778cdd7":"movies_cast_df = pd.merge(movies_country_df, movies_cast_df, on='show_id', how = 'inner')\nmovies_cast_df = movies_cast_df.groupby(['cast','country']).size().reset_index(name='count')","9f26db5f":"country_list = ['United States', 'India', 'United Kingdom', 'France', 'Canada', 'Spain']\nmovies_cast_df = movies_cast_df[movies_cast_df['country'].isin(country_list)]","4b963240":"movies_cast_df = movies_cast_df.groupby(['country']).apply(lambda x: x.sort_values(['count'],ascending = False)).reset_index(drop = True)\nmovies_cast_df = movies_cast_df.groupby(['country']).head(10)","796b25f3":"f, ax = plt.subplots(2, 3, figsize=(25, 12), sharex=False)\n\nax1 = sns.barplot(x = 'count', y = 'cast', data = movies_cast_df[movies_cast_df['country'] == 'United States'], palette=\"PuBu_d\", ax=ax[0, 0]).set_title(\"United States\")\n\nax2 = sns.barplot(x = 'count', y = 'cast', data = movies_cast_df[movies_cast_df['country'] == 'India'], palette=\"PuBu_d\", ax=ax[0, 1]).set_title(\"India\")\n\nax3 = sns.barplot(x = 'count', y = 'cast', data = movies_cast_df[movies_cast_df['country'] == 'United Kingdom'], palette=\"PuBu_d\", ax=ax[0, 2]).set_title(\"United Kingdom\")\n\nax4 = sns.barplot(x = 'count', y = 'cast', data = movies_cast_df[movies_cast_df['country'] == 'France'], palette=\"PuBu_d\", ax=ax[1, 0]).set_title(\"France\")\n\nax5 = sns.barplot(x = 'count', y = 'cast', data = movies_cast_df[movies_cast_df['country'] == 'Canada'], palette=\"PuBu_d\", ax=ax[1, 1]).set_title(\"Canada\")\n\nax6 = sns.barplot(x = 'count', y = 'cast', data = movies_cast_df[movies_cast_df['country'] == 'Spain'], palette=\"PuBu_d\", ax=ax[1, 2]).set_title(\"Spain\")\n\n\nplt.setp(ax, xticks=np.arange(0,32,2))\nplt.tight_layout()\n","d6e05330":"plt.figure(figsize=(20,10))\nsns.set(style=\"white\")\n\nax = sns.countplot(x=\"rating\", data=movies_df, palette='PuBu_d', order = movies_df.rating.value_counts().index)\n\nax.grid(False)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90, fontsize = 13)\nax.set_yticklabels(ax.get_yticks(), size = 10)\nsns.despine(bottom = True, left = True)\nplt.title('How the TV Shows are divided based on their audience ratings', fontsize = 20.5, fontweight = 'bold')\nplt.xlabel('Year', fontsize = 17.5)\nplt.ylabel('')\nplt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))\n\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()),(p.get_x()+0.2, p.get_height()+5), fontsize = 12.5)\n","5fe5cfc2":"tv_df.head(10)","20766f45":"tv_df.shape","e4a31d5a":"tv_df.isna().sum()","f3e0b3f3":"tv_df['date_added'] = tv_df['date_added'].fillna('January 1, 2020')","323e1a44":"tv_df['country'] = tv_df['country'].fillna('Undefined')","72873641":"tv_df['month_added'] = pd.to_datetime(tv_df['date_added']).dt.month_name()\ntv_df['year_added'] = pd.to_datetime(tv_df['date_added']).dt.year","acd828d5":"tv_df['listed_in'] = tv_df.listed_in.str.replace(\", | ,\", \",\")\ntv_df['country'] = tv_df.country.str.replace(\", | ,\", \",\")","4a692fcd":"tv_country_df = pd.DataFrame(tv_df.country.str.split(',').tolist(), index=tv_df.show_id).stack()\ntv_country_df = tv_country_df.reset_index([0, 'show_id'])\ntv_country_df.columns = ['show_id', 'country']","9c695b4e":"plt.figure(figsize=(20,10))\nsns.set(style=\"white\")\n\nax = sns.countplot(x=\"country\", data=tv_country_df, palette='YlGn_d', order = tv_country_df.country.value_counts().iloc[:20].index)\n\nax.grid(False)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90, fontsize = 13)\nax.set_yticklabels(ax.get_yticks(), size = 10)\nsns.despine(bottom = True, left = True)\nplt.title('Countries with most TV shows available', fontsize = 20.5, fontweight = 'bold')\nplt.xlabel('Countries', fontsize = 17.5)\nplt.ylabel('')\nplt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))\n\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()),(p.get_x()+0.2, p.get_height()+5), fontsize = 12.5)\n","dc67db22":"tv_genre_df = pd.DataFrame(tv_df.listed_in.str.split(',').tolist(), index=tv_df.show_id).stack()\ntv_genre_df = tv_genre_df.reset_index([0, 'show_id'])\ntv_genre_df.columns = ['show_id', 'genre']","3beb8485":"plt.figure(figsize=(20,10))\nsns.set(style=\"white\")\n\nax = sns.countplot(x=\"genre\", data=tv_genre_df, palette=\"YlGn_d\", order = tv_genre_df.genre.value_counts().iloc[:20].index)\n\nax.grid(False)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90, fontsize = 13)\nax.set_yticklabels(ax.get_yticks(), size = 10)\nsns.despine(bottom = True, left = True)\nplt.title('Most frequent TV show genres', fontsize = 20.5, fontweight = 'bold')\nplt.xlabel('Genres', fontsize = 17.5)\nplt.ylabel('')\nplt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))\n\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()),(p.get_x()+0.2, p.get_height()+5), fontsize = 12.5)\n","8feee906":"plt.figure(figsize=(20,10))\nsns.set(style=\"white\")\n\nax = sns.countplot(x=\"year_added\", data=tv_df, palette='YlGn_d', order = tv_df.year_added.value_counts().index)\n\nax.grid(False)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90, fontsize = 13)\nax.set_yticklabels(ax.get_yticks(), size = 10)\nsns.despine(bottom = True, left = True)\nplt.title('Which year saw the most TV shows being added?', fontsize = 20.5, fontweight = 'bold')\nplt.xlabel('Year', fontsize = 17.5)\nplt.ylabel('')\nplt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))\n\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()),(p.get_x()+0.2, p.get_height()+5), fontsize = 12.5)\n","be6a2fcb":"plt.figure(figsize=(20,10))\nsns.set(style=\"white\")\n\nax = sns.countplot(x=\"month_added\", data=tv_df, palette='YlGn_d', order = tv_df.month_added.value_counts().index)\n\nax.grid(False)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90, fontsize = 13)\nax.set_yticklabels(ax.get_yticks(), size = 10)\nsns.despine(bottom = True, left = True)\nplt.title('Which months saw the most TV shows being added?', fontsize = 20.5, fontweight = 'bold')\nplt.xlabel('Month', fontsize = 17.5)\nplt.ylabel('')\n\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()),(p.get_x()+0.2, p.get_height()+5), fontsize = 12.5)\n","9ba68a0b":"plt.figure(figsize=(20,10))\n\ntv_heatmap_df = tv_df.groupby(['year_added', 'month_added']).size().reset_index(name='count')\n\nmonth_ordered = [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August','September','October','November','December']\n\ntv_heatmap_df['month_added'] = tv_heatmap_df['month_added'].astype(pd.api.types.CategoricalDtype(month_ordered))\n\nplt.figure(figsize=(40,14))\nsns.set(font_scale=2.25)\n\nax = pd.pivot_table(tv_heatmap_df, values= 'count', index=['month_added'], columns='year_added')\nsns.heatmap(ax, cmap=\"YlGn\", annot = True, annot_kws = {'size':22})","5df9d5ae":"tv_genrewise_df = tv_df[['show_id', 'year_added']]\ntv_genrewise_df = pd.merge(tv_genre_df, tv_genrewise_df, on='show_id')","d36e7b86":"tv_genrewise_df = tv_genrewise_df.groupby(['year_added', 'genre']).size().reset_index(name='count')","cf73eb98":"genre_list = ['International TV Shows','TV Dramas','TV Comedies','Crime TV Shows','Docuseries', 'Romantic TV Shows','British TV Shows',\"Kids' TV\", 'Reality TV', 'Korean TV Shows' ]\ntv_genrewise_df = tv_genrewise_df[tv_genrewise_df['genre'].isin(genre_list)]","16181484":"\ng = sns.FacetGrid(tv_genrewise_df, col= 'genre', hue='genre', col_wrap=5, height = 4.5, aspect = 1.0, sharex = False, sharey = False)\ng = g.map(plt.plot, 'year_added', 'count')\ng = g.map(plt.fill_between, 'year_added', 'count', alpha=0.2).set_titles(\"{col_name} country\")\ng = g.set_titles(\"{col_name}\")\ng = g.set(xticks=np.arange(2012, 2021, 1), yticks = np.arange(0,450,50))\nplt.subplots_adjust(top=0.85)\ng.fig.suptitle('Yearly addition of most popular TV Show genres on Netflix', fontsize = 20.5) ","3ed56ba9":"tv_cast_df = tv_df[['show_id', 'cast']]\ntv_cast_df = tv_cast_df.dropna()","d4eba244":"tv_cast_df['cast'] = tv_cast_df.cast.str.replace(\", | ,\", \",\")","ccea93c5":"tv_cast_df = pd.DataFrame(tv_cast_df.cast.str.split(',').tolist(), index=tv_cast_df.show_id).stack()\ntv_cast_df = tv_cast_df.reset_index([0, 'show_id'])\ntv_cast_df.columns = ['show_id', 'cast']\n","8df9c3bf":"plt.figure(figsize=(20,10))\nsns.set(style=\"white\")\n\n#for count plot\nax = sns.countplot(x=\"cast\", data=tv_cast_df, palette='YlGn_d', order = tv_cast_df.cast.value_counts().iloc[:20].index)\n\n#aesthetics of the plot\nax.grid(False)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90, fontsize = 13)\nax.set_yticklabels(ax.get_yticks(), size = 10)\nsns.despine(bottom = True, left = True)\nplt.title('Which artists have the most TV Shows on Netflix??', fontsize = 20.5, fontweight = 'bold')\nplt.xlabel('Cast', fontsize = 17.5)\nplt.ylabel('')\nplt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))\n\n\n#setting count values on each bar\nfor p in ax.patches:\n    ax.annotate('{:}'.format(p.get_height()),(p.get_x()+0.2, p.get_height()+0.5), fontsize = 12.5)\n","45abe471":"tv_cast_df = pd.merge(tv_country_df, tv_cast_df, on='show_id', how = 'inner')\ntv_cast_df = tv_cast_df.groupby(['cast','country']).size().reset_index(name='count')","16e52cbd":"country_list = ['United States', 'United Kingdom', 'Japan', 'South Korea', 'Canada', 'Taiwan']\ntv_cast_df = tv_cast_df[tv_cast_df['country'].isin(country_list)]","74554b31":"tv_cast_df = tv_cast_df.groupby(['country']).apply(lambda x: x.sort_values(['count'],ascending = False)).reset_index(drop = True)\ntv_cast_df = tv_cast_df.groupby(['country']).head(10)","3c7ac85c":"f, axes = plt.subplots(2, 3, figsize=(25, 12), sharex=False)\n\nax1 = sns.barplot(x = 'count', y = 'cast', data = tv_cast_df[tv_cast_df['country'] == 'United States'], palette=\"YlGn_d\", ax=axes[0, 0]).set_title(\"United States\")\n\nax2 = sns.barplot(x = 'count', y = 'cast', data = tv_cast_df[tv_cast_df['country'] == 'United Kingdom'], palette=\"YlGn_d\", ax=axes[0, 1]).set_title(\"United Kingdom\")\n\nax3 = sns.barplot(x = 'count', y = 'cast', data = tv_cast_df[tv_cast_df['country'] == 'Japan'], palette=\"YlGn_d\", ax=axes[0, 2]).set_title(\"Japan\")\n\nax4 = sns.barplot(x = 'count', y = 'cast', data = tv_cast_df[tv_cast_df['country'] == 'South Korea'], palette=\"YlGn_d\", ax=axes[1, 0]).set_title(\"South Korea\")\n\nax5 = sns.barplot(x = 'count', y = 'cast', data = tv_cast_df[tv_cast_df['country'] == 'Canada'], palette=\"YlGn_d\", ax=axes[1, 1]).set_title(\"Canada\")\n\nax6 = sns.barplot(x = 'count', y = 'cast', data = tv_cast_df[tv_cast_df['country'] == 'Taiwan'], palette=\"YlGn_d\", ax=axes[1, 2]).set_title(\"Taiwan\")\n\n\n\n\nplt.setp(axes, xticks=np.arange(0,20,2))\nplt.tight_layout()","18da4ee9":"plt.figure(figsize=(20,10))\nsns.set(style=\"white\")\n\nax = sns.countplot(x=\"rating\", data=tv_df, palette='YlGn_d', order = tv_df.rating.value_counts().index)\n\nax.grid(False)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90, fontsize = 13)\nax.set_yticklabels(ax.get_yticks(), size = 10)\nsns.despine(bottom = True, left = True)\nplt.title('How the TV Shows are divided based on their audience ratings', fontsize = 20.5, fontweight = 'bold')\nplt.xlabel('Ratings', fontsize = 17.5)\nplt.ylabel('')\nplt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: int(x)))\n\nfor p in ax.patches:\n        ax.annotate('{:}'.format(p.get_height()),(p.get_x()+0.2, p.get_height()+5), fontsize = 12.5)\n","5a942599":"# Which movie genres are the most frequent on Netflix?","f198bfa4":"# A look at the artists in the countries with highest amount of TV Shows","3520d174":"# Heatmap to drill down into the month-year relationship","2d63d58f":"Now once we have the column in an uniform format, we split the column and create a new dataframe containg the show_id and the country names where a movie was released","71de050c":"We again observe that United States has the most number of TV Shows available. A concern we have here is that there are many instances where the countries in which the content is available are missing and that category is second highest in terms of its occurrence.","4b518f5a":"We have 10 instances where the rating of a show or movie is missing. We will include these instances as 'Unrated' (UR). \n\nThis will take the total of UR rating to 17.","a7fb09f0":"# A genrewise look at how the movies got added over the years  ","93158b90":"# A look at the artists in the countries with highest amount of movies","9563b709":"Checking for the NA values\n","21f8722c":"Adding two more columns to the tv show subset: one containing the month the content was added and other containing the year it was added in","11b076c1":"# Which year saw the most number of TV Shows getting added on Netflix?","d49b6458":"Checking for the NA values\n","0f2329e1":"In order to visualize the country and genres of the movies, we first need to clean the columns and bring them in an uniform format.\n\nBy taking a closer look at the dataset we see that the comma spacing in some instances is different than others.","bc10d681":"# Which year saw the most number of movies getting added on Netflix?","bb376d6c":"Let's take a look at the datatype of each column","ca3a522a":"We will now divide the dataset into two groups: one containing movies on Netflix and the other containing only the TV shows.\n\nWe will then clean the subsets one by one.","dda6b7e5":"# Which months saw the most number of movies getting added on Netflix? (All years inclusive)","51892499":"# Oldest movies on Netflix","7073a2b7":"# Which are the countries where most number of movies are available?","40936a1f":"We see that the content on this platform has increased every year. We also see a steep increase in the number of movies getting added in 2017 as compared to 2016. The number of movies saw a 477% increase from 2016 to 2019.","6e025bc6":"We will fill the NA values in the 'country' column with 'Undefined'.\n\nWe will also fill the empty instances in 'date_added' column with the year as 2020.","0aa0c47c":"We observe an interesting fact about 13 movies being 70 to 75 years old when they were added on Netflix. \n\nLet's take a look at those 13 movies","592cd8e3":"# A look at the directors in the countries with highest amount of movies","1463eb68":"Adding two more columns to the movies subset: one containing the month the content was added and other containing the year it was added in","beded027":"We will fill the NA values in the 'country' column with 'Undefined'.\n\nWe will also fill the empty instances in 'date_added' column with the year as 2020.","4742c7d6":"# Which months saw the most number of TV Shows getting added on Netflix? (All years inclusive)","4d57aab6":"Now once we have the column in an uniform format, we split the column and create a new dataframe containg the show_id and the country names where the tv show was released","814123c6":"# Getting started","6252f214":"Check for NA's in each column","71dd5e18":"# How the movies are divided based on their audience ratings","15509cac":"# Working with the TV Shows subset","dac234f9":"# Working with the Movies subset","e979f8e5":"# Which are the countries where most number of TV Shows are available?","df56cb48":"# Who are the directors with most movies on Netflix (Worldwide)?","11d69795":"In order to visualize the country and genres of the tv shows, we first need to clean the columns and bring them in an uniform format.\n\nBy taking a closer look at the dataset we see that the comma spacing in some instances is different than others.","14f142a2":"# Artists with most content on Netflix (Worldwide)","48230f9f":"We can see that United States has the most number of movies available on Netflix. India comes a distant second with less than half the movies available than in the US.","4c7ab44d":"# A genrewise look at how the TV Shows got added over the years  ","5572435f":"We see that all the categories have seen a rise in their numbers in 2019. We see that the 'International Movies' genre saw its highest numbers in 2018 rather than in 2019 like the other genres. \n\n\n'Dramas', 'Independent Movies' and 'Thrillers' have their been on Netflix since 2008 while genres like 'Romantics Movies', 'Stand-Up Comedy' and 'Action & Adventure' appear to be fairly new additions on Netflix.","05b3db0b":"# Duration between a movie's release and its addition on Netflix","998c0079":"# How the TV Shows are divided based on their audience ratings","6a0a7dfd":"# Which TV Show genres are the most frequent on Netflix?","2f428603":"# Heatmap to drill down into the month-year relationship","c83d111f":"# Artists with the most TV content on Netflix (Worldwide)"}}