{"cell_type":{"3288d46e":"code","c94e0448":"code","760cf375":"code","18aa51ee":"code","50c86a1f":"code","9e26d196":"code","10b94351":"code","bf644542":"code","daf06cdb":"code","446935ca":"code","5169f583":"code","ba939cad":"code","fcf11d15":"code","a155f2b2":"code","b13fb2c5":"code","38da7b9d":"code","a2f53deb":"code","21a5f2b7":"code","5bbce84d":"code","b004849d":"code","76403582":"code","e6306548":"code","8705c311":"code","8d41deab":"code","b292feb6":"code","ac50d056":"code","d1b1c050":"code","03fba7d6":"code","8055fd00":"code","bb1e8d89":"code","76ecc36c":"code","fc821987":"code","9d766b43":"code","ad3154cc":"code","580d79d6":"code","76cdde6a":"code","1be6dd3f":"code","f4a1de2e":"code","08eca7bd":"code","eeace06c":"code","fe5812cd":"code","54d5a036":"code","121890bb":"code","3674a5a1":"code","d67a85dc":"code","28fad66d":"code","f6d4c366":"code","390730b9":"code","e5c03e79":"code","b7093504":"code","d465b476":"code","d31e7113":"code","dc9041eb":"code","4ee5d831":"code","0838f10c":"code","f36ad987":"code","281b5e14":"code","a709b3ba":"code","d1f13c33":"code","6813889c":"code","96de20ee":"code","800a0927":"code","fbc2f8d4":"code","1f362859":"code","3842c373":"code","7205db59":"code","6ce9d60a":"code","449549c2":"code","d28809dc":"code","48cc5822":"code","3e8cfd3e":"markdown","5eef6b78":"markdown","5164fd76":"markdown","1199ae1e":"markdown","60bfc7d8":"markdown","b831ff05":"markdown","f6a9add4":"markdown","31e9a90b":"markdown","c4b4408f":"markdown","126322b4":"markdown","5d8d87f6":"markdown","967c0f0d":"markdown","2be5ec9d":"markdown","c4a76a71":"markdown","b0b350f2":"markdown","88d2148a":"markdown","98e2db0d":"markdown","54f2bff2":"markdown","57e855bb":"markdown","ca9c1d3d":"markdown","1944a3ed":"markdown","79ffb5ea":"markdown","3382da0d":"markdown","279d4a06":"markdown","ac6a1efe":"markdown"},"source":{"3288d46e":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport matplotlib \nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)","c94e0448":"df1 = pd.read_csv(\"..\/input\/bangalore\/banglore.csv\")\ndf1.head()","760cf375":"df1['area_type'].unique()                          # unique() = to find the unique values ","18aa51ee":"df1['area_type'].value_counts()                    #  value_counts() = this function is used to count the number of values in the each columns","50c86a1f":"df2 = df1.drop(['area_type','society','balcony','availability'],axis='columns')\ndf2.shape","9e26d196":"df2.isnull().sum()                # isnull() = it is used to find the null values, sum() = is used to calculate the total number of null values in each column here","10b94351":"df2.shape","bf644542":"df3 = df2.dropna()                                      # dropna()= drop all the null values\n","daf06cdb":"df3.isnull().sum()","446935ca":"df3.shape","5169f583":"df3['bhk'] = df3['size'].apply(lambda x: int(x.split(' ')[0]))\ndf3.bhk.unique()","ba939cad":"def is_float(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True","fcf11d15":"df3[~df3['total_sqft'].apply(is_float)].head(10)           # symbol(~) means not means except this condition\n","a155f2b2":"df3.info()","b13fb2c5":"j=0\nl=[]\nfor i in df3[\"total_sqft\"]:\n    if '-' in i:\n      l.append(j)\n    j=j+1\n     ","38da7b9d":"l","a2f53deb":"df3.iloc[l,:]","21a5f2b7":"\ndef convert_sqft_to_num(x):\n    tokens = x.split('-')\n    if len(tokens) == 2:\n        return (float(tokens[0])+float(tokens[1]))\/2\n    try:\n        return float(x)\n    except:\n        return None","5bbce84d":"\ndf4 = df3.copy()\ndf4.total_sqft = df4.total_sqft.apply(convert_sqft_to_num)\ndf4 = df4[df4.total_sqft.notnull()]\ndf4.head(5)","b004849d":"\ndf4.loc[30]","76403582":"(2100+2850)\/2","e6306548":"df5 = df4.copy()\ndf5['price_per_sqft'] = df5['price']*100000\/df5['total_sqft']\ndf5.head()\n","8705c311":"df5.iloc[410]","8d41deab":"df5_stats = df5['price_per_sqft'].describe()\ndf5_stats","b292feb6":"df5.location = df5.location.apply(lambda x: x.strip())\nlocation_stats = df5['location'].value_counts(ascending=False)\nlocation_stats","ac50d056":"location_stats.values.sum()\n","d1b1c050":"len(location_stats[location_stats>10])\n","03fba7d6":"len(location_stats)\n","8055fd00":"len(location_stats[location_stats<=10])\n","bb1e8d89":"location_stats_less_than_10 = location_stats[location_stats<=10]\nlocation_stats_less_than_10","76ecc36c":"len(df5.location.unique())\n","fc821987":"df5.location = df5.location.apply(lambda x: 'other' if x in location_stats_less_than_10 else x)\nlen(df5.location.unique())","9d766b43":"df5.head(10)","ad3154cc":"df5[df5.total_sqft\/df5.bhk<300].head()\n","580d79d6":"df5.shape\n","76cdde6a":"\ndf6 = df5[~(df5.total_sqft\/df5.bhk<300)]\ndf6.shape","1be6dd3f":"df6.price_per_sqft.describe()","f4a1de2e":"df6.groupby('location')","08eca7bd":"def remove_pps_outliers(df):\n    df_out = pd.DataFrame()\n    for key, subdf in df.groupby('location'):\n        m = np.mean(subdf.price_per_sqft)\n        st = np.std(subdf.price_per_sqft)\n        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]\n        df_out = pd.concat([df_out,reduced_df],ignore_index=True)\n        #print(key)\n    print(subdf)\n    print(df_out)\n    return df_out\n    \ndf7 = remove_pps_outliers(df6)\ndf7.shape","eeace06c":"def plot_scatter_chart(df,location):\n    bhk2 = df[(df.location==location) & (df.bhk==2)]\n    bhk3 = df[(df.location==location) & (df.bhk==3)]\n    matplotlib.rcParams['figure.figsize'] = (15,10)\n    plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK', s=50)\n    plt.scatter(bhk3.total_sqft,bhk3.price,marker='+', color='green',label='3 BHK', s=50)\n    plt.xlabel(\"Total Square Feet Area\")\n    plt.ylabel(\"Price (Lakh Indian Rupees)\")\n    plt.title(location)\n    plt.legend()\n    \nplot_scatter_chart(df7,\"Rajaji Nagar\")","fe5812cd":"plot_scatter_chart(df7,\"Hebbal\")\n","54d5a036":"\ndef remove_bhk_outliers(df):\n    exclude_indices = np.array([])\n    for location, location_df in df.groupby('location'):\n        bhk_stats = {}\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            bhk_stats[bhk] = {\n                'mean': np.mean(bhk_df.price_per_sqft),\n                'std': np.std(bhk_df.price_per_sqft),\n                'count': bhk_df.shape[0]\n            }\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            stats = bhk_stats.get(bhk-1)\n            if stats and stats['count']>5:\n                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\n    return df.drop(exclude_indices,axis='index')\ndf8 = remove_bhk_outliers(df7)\n# df8 = df7.copy()\ndf8.shape","121890bb":"plot_scatter_chart(df8,\"Rajaji Nagar\")\n","3674a5a1":"plot_scatter_chart(df8,\"Hebbal\")\n","d67a85dc":"import matplotlib\nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)\nplt.hist(df8.price_per_sqft,rwidth=0.8)\nplt.xlabel(\"Price Per Square Feet\")\nplt.ylabel(\"Count\")","28fad66d":"df8.bath.unique()\n","f6d4c366":"plt.hist(df8.bath,rwidth=0.8)\nplt.xlabel(\"Number of bathrooms\")\nplt.ylabel(\"Count\")","390730b9":"df8[df8.bath>10]\n","e5c03e79":"df8[df8.bath>df8.bhk+2]\n","b7093504":"df9 = df8[df8.bath<df8.bhk+2]\ndf9.shape","d465b476":"df9.head(2)\n","d31e7113":"df10 = df9.drop(['size','price_per_sqft'],axis='columns')\ndf10.head(3)","dc9041eb":"\ndummies = pd.get_dummies(df10.location)\ndummies.head(3)","4ee5d831":"df11 = pd.concat([df10,dummies.drop('other',axis='columns')],axis='columns')\ndf11.head()","0838f10c":"df12 = df11.drop('location',axis='columns')\ndf12.head(2)","f36ad987":"df12.shape\n","281b5e14":"\nX = df12.drop(['price'],axis='columns')\nX.head(3)","a709b3ba":"X.shape\n","d1f13c33":"\ny = df12.price\ny.head(3)","6813889c":"len(y)","96de20ee":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=10)","800a0927":"from sklearn.linear_model import LinearRegression\nlr_clf = LinearRegression()\nlr_clf.fit(X_train,y_train)\nlr_clf.score(X_test,y_test)","fbc2f8d4":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n\ncross_val_score(LinearRegression(), X, y, cv=cv)","1f362859":"\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef find_best_model_using_gridsearchcv(X,y):\n    algos = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n    for algo_name, config in algos.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n        gs.fit(X,y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n\nfind_best_model_using_gridsearchcv(X,y)","3842c373":"def predict_price(location,sqft,bath,bhk):    \n    loc_index = np.where(X.columns==location)[0][0]\n\n    x = np.zeros(len(X.columns))\n    x[0] = sqft\n    x[1] = bath\n    x[2] = bhk\n    if loc_index >= 0:\n        x[loc_index] = 1\n\n    return lr_clf.predict([x])[0]","7205db59":"predict_price('1st Phase JP Nagar',1000, 2, 2)\n","6ce9d60a":"predict_price('1st Phase JP Nagar',1000, 3, 3)\n","449549c2":"predict_price('Indira Nagar',1000, 2, 2)\n","d28809dc":"import pickle\nwith open('banglore_home_prices_model.pickle','wb') as f:\n    pickle.dump(lr_clf,f)","48cc5822":"import json\ncolumns = {\n    'data_columns' : [col.lower() for col in X.columns]\n}\nwith open(\"columns.json\",\"w\") as f:\n    f.write(json.dumps(columns))","3e8cfd3e":"240 cities has the count more than 10\n","5eef6b78":"\nOutlier Removal Using Bathrooms Feature","5164fd76":"# **Export location and column information to a file that will be useful later on in our prediction application**","1199ae1e":"Through this is_float() function we determine which column has rangle values.","60bfc7d8":"This is the main fuction to convert range values to numerical.\n\nTo explain this function we take an example\n\nlet\n\n2-4 this is the range value in the column\n\nthen,\n\n    (2+4)\/2\n    =3\n    \nthen this 3 value store in the column in place of the range","b831ff05":"Remove Unnecessary Data","f6a9add4":"In this notebook we work on Bangalore House Price Prediction.\n\nInthis notebook we learn lot of things like K-Fold cross validation, Grid Search CV, One-Hot Encoding and many more.\n\nNow, Let's go\n\nFirst import all the necessary Libraries","31e9a90b":"# **Export the tested model to a pickle file**","c4b4408f":"# **Find best model using GridSearchCV**","126322b4":"now to reduce the number of cities, we convert the city that occurs less than 10 in the whole data we named it as \"others\"\n\nIn below cell we find the count of each location","5d8d87f6":"Now we handle the column \"total_sqft\" because it has a rangle values ","967c0f0d":"## ***remove outliers***","2be5ec9d":"# **Test the model for few properties**","c4a76a71":"# **Use K Fold cross validation to measure accuracy of our LinearRegression model**","b0b350f2":"Perform Linear Regression Algorithm on the train dataset","88d2148a":"Load the dataset using pandas library","98e2db0d":"NOW WE REMOVE THE OUTLIERS IN THE DATASET\n\nwe know that the total square feet for 1BHK should be greater than 300.\n\nIn the below cells we remove the cells which have less than 300 square feet for 1BHK","54f2bff2":"Now, start Data Analysis","57e855bb":"Through below cell we store the index of range values in list (l).","ca9c1d3d":"here we convert all the location that has count less than or equal to 10 to \"other\" category","1944a3ed":"Perform Train test split on the dataset","79ffb5ea":"1047 cities has the count less than or equal to 10","3382da0d":"\n# ***Use One Hot Encoding For Location***","279d4a06":"In \"size\" column there is string value with numerical value. we only want numerical value i.e. we slpit each value of \"size\" column and store numerical value in another column calles \"bhk\".","ac6a1efe":"Now we find the  price per square feet by deviding price by tatal square feet.\n\nPrice is given in lakhs form,so, we have to convert it in rupees by multiply 100000 to price  "}}