{"cell_type":{"2ee80f9c":"code","b6495b33":"code","a00948ff":"code","7295eb8d":"code","94ec77a3":"code","3200df7a":"code","9fe0762f":"code","630db2d2":"code","da78b32e":"code","2e6c8836":"code","35ef14ea":"code","9c5f4ba5":"code","0ed21dec":"code","0356f593":"code","3bc61c62":"code","c07cdc7e":"code","dacba5cb":"code","bc0242e0":"code","835f350c":"code","640e09ca":"code","93f16b3b":"code","b7ae5a08":"code","7c8fcc7e":"code","bb0f566e":"code","5bc408b4":"code","f5c31324":"code","ac1318c7":"code","5c3bd471":"code","e7816aae":"code","6e6812b7":"code","6d602cf2":"code","b960f8a7":"code","9d51ece1":"code","a563fdee":"code","db956d37":"code","f95b366e":"code","819df15b":"code","b0e206f0":"code","9238d573":"code","2ab154b8":"code","8cad0b93":"code","f3b7b4d2":"code","d2186a4d":"markdown","3f05aafd":"markdown","e4e7e5d2":"markdown","484ad4e2":"markdown","74bb066b":"markdown","9c02099b":"markdown","408a8e5e":"markdown","5c08f20b":"markdown","d66e0ab7":"markdown","2be61e71":"markdown","4836233b":"markdown","6f22f6f3":"markdown","214d0599":"markdown","d540bc89":"markdown","4b6cbc98":"markdown","b8766e51":"markdown","a86da2c8":"markdown","30b4328d":"markdown","cb82d6c5":"markdown"},"source":{"2ee80f9c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6495b33":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n%matplotlib inline","a00948ff":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","7295eb8d":"train.head()","94ec77a3":"test.head()","3200df7a":"train.isnull().sum()","9fe0762f":"sns.heatmap(train.isnull(),yticklabels=False,cmap=\"viridis\")","630db2d2":"sns.set_style(\"whitegrid\")\nsns.countplot(x=\"Survived\",data=train)","da78b32e":"sns.set_style(\"whitegrid\")\nsns.countplot(x=\"Survived\",hue=\"Sex\",data=train)","2e6c8836":"sns.set_style(\"whitegrid\")\nsns.countplot(x=\"Survived\",hue=\"Pclass\",data=train)","35ef14ea":"sns.distplot(train['Age'].dropna(),kde=False,bins=40,color=\"darkred\")","9c5f4ba5":"sns.countplot(x=\"SibSp\",data=train)","0ed21dec":"sns.distplot(train['Fare'],kde=False)","0356f593":"sns.boxplot(x=\"Pclass\",y=\"Age\",data=train)","3bc61c62":"def compute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        if Pclass == 2:\n            return 29\n        if Pclass == 3:\n            return 24\n    else:\n        return Age","c07cdc7e":"train['Age']=train[['Age','Pclass']].apply(compute_age,axis=1)","dacba5cb":"test.isnull().sum()","bc0242e0":"test['Age']=test[['Age','Pclass']].apply(compute_age,axis=1)","835f350c":"sns.heatmap(train.isnull(),yticklabels=False,cmap=\"viridis\")","640e09ca":"train.drop('Cabin',axis=1,inplace=True)","93f16b3b":"test.drop('Cabin',axis=1,inplace=True)","b7ae5a08":"train['Embarked'].fillna(\"C\",inplace=True)","7c8fcc7e":"test['Fare'].fillna(test['Fare'].mean(),inplace=True)","bb0f566e":"train=train.drop(['Name','Sex','Ticket','Embarked'],axis=1)","5bc408b4":"test=test.drop(['Name','Sex','Ticket','Embarked'],axis=1)","f5c31324":"train.head()","ac1318c7":"test.head()","5c3bd471":"train.drop('Survived',axis=1).head()","e7816aae":"logmodel=LogisticRegression()","6e6812b7":"X_train = train.drop(['Survived'], axis=1)\ny_train = train['Survived']","6d602cf2":"X_train","b960f8a7":"y_train","9d51ece1":"logmodel.fit(X_train,y_train)","a563fdee":"predictions=logmodel.predict(test)","db956d37":"predictions","f95b366e":"temp=pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","819df15b":"temp=temp.drop(['PassengerId'], axis=1)","b0e206f0":"accuracy=accuracy_score(temp,predictions)\naccuracy*100","9238d573":"from sklearn.metrics import classification_report\nprint(classification_report(temp,predictions))","2ab154b8":"PassengerId=test['PassengerId'].tolist()","8cad0b93":"data={'PassengerId':PassengerId,'Survived':predictions}\nresult= pd.DataFrame(data, columns = ['PassengerId', 'Survived']) \nresult","f3b7b4d2":"result.to_csv('submit.csv', index=False)","d2186a4d":"Filling the NaN values in Embarked column with 'C' ","3f05aafd":"Plotting the Graph for Null Values\n","e4e7e5d2":"Distribution of Age ","484ad4e2":"Loading the Data ","74bb066b":"Dropping the column with Null Values (Cabin Column)","9c02099b":"Importing the Libraries\n","408a8e5e":"Dropping the Y Column","5c08f20b":"Distribution of Fare ","d66e0ab7":"Graph of people who have survived based on PClass","2be61e71":"Submitting the Results","4836233b":"Getting the predictions","6f22f6f3":"Checking for Null Values\n","214d0599":"Buiding the Logistic Regrsssion Model","d540bc89":"Replacing the Null Values in the Age Column with Mean Value based on the PClass","4b6cbc98":"Plotting a count plot of people who have survived","b8766e51":"Getting the classification Report","a86da2c8":"Filling the NaN values in **Fare** column with the mean value\n","30b4328d":"Plotting a graph of PClass and Age to get their distribution\n","cb82d6c5":"Grpah of people who have survuived based on Sex"}}