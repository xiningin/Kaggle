{"cell_type":{"309c2a87":"code","3b2741e0":"code","7ed4f5f1":"code","2bb9247e":"code","a44b7ad3":"code","60e6fc21":"code","46509561":"code","fd28e295":"code","d015421b":"code","9b179594":"code","8afcf616":"code","ae748007":"code","cd93b454":"code","b9194513":"code","21b69130":"code","b3ac6503":"code","2f6bc46e":"code","f7ffbb7d":"code","5efe4c81":"code","963cad87":"code","67370cfb":"code","d49455a5":"code","0de819e8":"code","25b138d9":"markdown","d2e5cefe":"markdown","710d2cfa":"markdown","0d5d4ae1":"markdown","4f18ed3b":"markdown","7c7b3cb7":"markdown","235ae4d9":"markdown","2afc8e31":"markdown","82190d37":"markdown","46475b5c":"markdown","8cf1607f":"markdown","76003615":"markdown","33c9a948":"markdown","bb4a50a5":"markdown","5a5759fb":"markdown","905a8ff2":"markdown","5d469a88":"markdown","5dbac121":"markdown","be914ac9":"markdown","e9b1f5d9":"markdown","f401174e":"markdown","416e3bc6":"markdown","93b0bbc1":"markdown"},"source":{"309c2a87":"import pandas as pd\nfrom matplotlib import pyplot\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_absolute_error\nfrom fbprophet.plot import plot_plotly, plot_components_plotly","3b2741e0":"path = 'https:\/\/raw.githubusercontent.com\/jbrownlee\/Datasets\/master\/monthly-car-sales.csv'\ndf = pd.read_csv(path, header=0)\nprint(df.shape)\nprint(df.head())\nprint(df.tail())","7ed4f5f1":"df.info()","2bb9247e":"df.plot()\npyplot.show()","a44b7ad3":"df.columns = ['ds', 'y']","60e6fc21":"df.info()","46509561":"df['ds']= pd.to_datetime(df['ds'])","fd28e295":"model = Prophet()\n\nmodel.fit(df)","d015421b":"# train set \ub9c8\uc9c0\ub9c9 1\ub144 \ub0a0\uc9dc \uc0dd\uc131\nlast_1year = list()\nfor i in range(1, 13):\n    last_1year.append(['1968-%02d' % i])\nlast_1year = pd.DataFrame(last_1year, columns = ['ds'])\nlast_1year['ds']= pd.to_datetime(last_1year['ds'])","9b179594":"forecast = model.predict(last_1year)","8afcf616":"forecast.columns","ae748007":"\nprint(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head())","cd93b454":"model.plot(forecast)\npyplot.show()","b9194513":"last_1year = list()\nfor i in range(1, 13):\n    last_1year.append(['1969-%02d' % i])\nlast_1year = pd.DataFrame(last_1year, columns = ['ds'])\nlast_1year['ds']= pd.to_datetime(last_1year['ds'])","21b69130":"forecast = model.predict(last_1year)","b3ac6503":"model.plot(forecast)\npyplot.show()","2f6bc46e":"train = df.drop(df.index[-12:])\ny_true = df['y'][-12:].values\n\nmodel = Prophet()\nmodel.fit(train)","f7ffbb7d":"last_1year = list()\nfor i in range(1, 13):\n    last_1year.append(['1968-%02d' % i])\nlast_1year = pd.DataFrame(last_1year, columns = ['ds'])\nlast_1year['ds']= pd.to_datetime(last_1year['ds'])","5efe4c81":"forecast = model.predict(last_1year)","963cad87":"y_pred = forecast['yhat'].values\nmae = mean_absolute_error(y_true, y_pred)\nprint('MAE: %.3f' % mae)","67370cfb":"pyplot.plot(y_true, label='Actual')\npyplot.plot(y_pred, label='Predicted')\npyplot.legend()\npyplot.show()","d49455a5":"model.plot_components(forecast)","0de819e8":"plot_plotly(model, forecast)","25b138d9":"# 1-2. make test data and predict it(1969)","d2e5cefe":"# 0-0 import libraries","710d2cfa":"Prophet follows the sklearn model API. \n\nWe create an instance of the Prophet class and then call its fit and predict methods.","0d5d4ae1":"## 1-2-2.predict test data (1969)","4f18ed3b":"## 2.2 make test data (1968)","7c7b3cb7":"# 1.make Prophet model","235ae4d9":"## 1-2-1.make test data (1969)","2afc8e31":"# 0-4.change data type (object -> datetime)","82190d37":"# 1-1.make test data and predict it(1968)","46475b5c":"## 1-1-3.predict result","8cf1607f":"## 1-2-3.plot test result","76003615":"## 2.1 delete 1968 data and make model","33c9a948":"## 1-1-2.predict test data","bb4a50a5":"# 0-3.change column name","5a5759fb":"## 1-1-4.plot test result","905a8ff2":"## 1-1-1.make test data (1968)","5d469a88":"# 2.make test data \n\n\n\n\n","5dbac121":"## 2.5 plot test result","be914ac9":"## 2.4 evaluate test data","e9b1f5d9":"# 0-2 draw timeseries data","f401174e":"The input to Prophet is always a dataframe with two columns: \n\n## ds and y.\n\n**The ds (datestamp) column should be of a format expected by Pandas,**\n\nideally YYYY-MM-DD for a date or YYYY-MM-DD HH:MM:SS for a timestamp. \n\n**The y column must be numeric**, and represents the measurement we wish to forecast.","416e3bc6":"## 2.3 predict test data","93b0bbc1":"# 0-1 load Timeseries data"}}