{"cell_type":{"c6a59c4c":"code","8f815cda":"code","b8f6eba3":"code","ea68caa1":"code","58a43816":"code","5ed4d95f":"code","4c064bd4":"code","26e1e0e4":"code","95eadd37":"code","70bdc7af":"code","2dce735d":"code","cdbc4817":"code","c0c708b5":"code","7e13bf8f":"code","9587efdd":"code","ab682213":"code","0bdecc50":"code","5d9dd684":"code","2d9d76d5":"code","1ddb81c9":"code","9dd1b2a2":"code","5356eebf":"code","dd87b987":"code","683b8475":"markdown","0c3147b1":"markdown","27e9deab":"markdown","1f8c0044":"markdown","601b4cce":"markdown","0f6c0a23":"markdown","7f38cf47":"markdown","c360a8eb":"markdown","17876d6c":"markdown","6ec21717":"markdown","93986fbb":"markdown","9a2cec46":"markdown","2bcf76ec":"markdown","8e4d5245":"markdown","be748a5b":"markdown","4b2c96ba":"markdown","162f877f":"markdown"},"source":{"c6a59c4c":"# Importing Pandas and Reading the Data:\nimport pandas as pd\ndata = pd.read_csv(\"..\/input\/building-permit-applications-data\/Building_Permits.csv\")\ndata = data.iloc[0:10000,:]\ndata.head(5)","8f815cda":"# Lets take a look at the null values in the data:\nnull = pd.DataFrame(pd.isnull(data).sum())\nnull","b8f6eba3":"# Instead of coursing throught the 43 columns, lets make a list of the features which have more than 10K null values:\ndroplist = []\nfor i in null.index:\n    if int(null.loc[i].values) > 2000:\n        droplist.append(i)","ea68caa1":"# Here is how it looks:\ndroplist.append('Description')\ndroplist","58a43816":"# Finally dropping the useless columns:\nnewdata = data.drop(droplist, axis = 1)","5ed4d95f":"# Defining the Cateogircal Columns:\nc = (newdata.dtypes == 'object')\ncatcol = list(c[c].index)\ncatcol","4c064bd4":"# Defining the Numerical Columns:\nn = (newdata.dtypes != 'object')\nnumcol = list(n[n].index)\nnumcol","26e1e0e4":"# Now we must deal with the features who have null values but less than 10K in count:\nfrom sklearn.impute import SimpleImputer\nCatSimp = SimpleImputer(strategy = 'most_frequent')\n\nCatSimp.fit(newdata[catcol])\nnewdata[catcol] = CatSimp.transform(newdata[catcol])","95eadd37":"# Its time to fill in the missing values in the Numerical Columns:\nNumSimp = SimpleImputer(strategy = 'median')\n\nNumSimp.fit(newdata[numcol])\nnewdata[numcol] = NumSimp.transform(newdata[numcol])","70bdc7af":"# Finding longitudes and latitudes:\nlatlong = newdata['Location'].str.strip('()').str.split(', ', expand = True)\nnewdata['Latitude'] = latlong[[0]]\nnewdata['Longitude'] = latlong[[1]]\n\nnewdata.drop(['Location'], axis = 1, inplace =True)","2dce735d":"# Defining a function which produces day, month and year columns from a single date column:\n\nfrom datetime import date\n\ndef getdate(x, c):\n    d = []\n    m = []\n    y = []\n    x[c] = pd.to_datetime(x[c])\n    for n in range(0,10000):\n        d.append(x[c].iloc[n].day)\n        m.append(x[c].iloc[n].month)\n        y.append(x[c].iloc[n].year)\n        \n        \n    x[c + \" \" + \"Day\"] = d\n    x[c + \" \" + \"Month\"] = m\n    x[c + \" \" + \"Year\"] = y\n    x.drop([c], axis = 1, inplace = True)\n    return ","cdbc4817":"# Defining dates as the collection all the features with dates:\ndates = ['Permit Creation Date', 'First Construction Document Date', 'Filed Date', 'Current Status Date', 'Issued Date']\n\n# Lets produce some day, month and year columns:\nfor d in dates:\n    getdate(newdata, d)","c0c708b5":"# Since the Values of Longitude and Latitudes were in the \"object\" dtype, lets convert it to float:\nnewdata['Longitude'] = newdata['Longitude'].astype('float64')\nnewdata['Latitude'] = newdata['Latitude'].astype('float64')","7e13bf8f":"# I dont't want to mess up the newdata dataset since converting its categorical values into numerical values will affect data visualization,\n# lets copy it to another dataset:\nencdata = pd.DataFrame(newdata, columns = newdata.columns)\nPermitNumber = encdata['Permit Number']\nencdata.drop(['Permit Number'], axis = 1, inplace = True)","9587efdd":"# Defining a function that converts a dataset's categorical values to Numerical Values\ndef convertcat(data, target):\n\n# Defining the Categorical Columns:\n    c = (data.dtypes == 'object')\n    datacatcol = list(c[c].index)\n\n\n# Importing the bad boy needed to convert Categorical Values to Numerical Values:\n    from category_encoders import CatBoostEncoder\n    cbe = CatBoostEncoder()\n\n# CatBoostEncoder demands a target value becuase it changes the cate\n    for i in datacatcol:\n        cbe.fit(data[i], data[target])\n        data[i] = cbe.transform(data[i], data[target])\n\n    return","ab682213":"# Convertin encdat:\nconvertcat(encdata, 'Estimated Cost')","0bdecc50":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize  = (17, 20))\nsns.set_context(\"paper\", font_scale = 1)\nsns.heatmap(encdata.corr())","5d9dd684":"# Visualizing the permits on a map with their Current Status:\n\nimport plotly.express as px\n\nfig = px.scatter_mapbox(newdata, lat = \"Latitude\", lon=\"Longitude\",\n                        zoom = 10, height = 300, \n                        color = \"Current Status\")\nfig.update_layout(mapbox_style = \"carto-positron\")\nfig.update_layout(margin = {\"r\":0, \"t\":0, \"l\":0, \"b\":0})\nfig.show()","2d9d76d5":"# Visualizing this again but on a map to have a better idea:\n\nimport plotly.express as px\n\nfig = px.scatter_mapbox(newdata, lat = \"Latitude\", lon=\"Longitude\",\n                        zoom = 10, height = 300, \n                        color = \"Plansets\")\nfig.update_layout(mapbox_style = \"carto-positron\")\nfig.update_layout(margin = {\"r\":0, \"t\":0, \"l\":0, \"b\":0})\nfig.show()","1ddb81c9":"# Plotting a countplot for the Current Status' of permits:\n\nplt.figure(figsize = (20, 6))\nsns.set_context(\"poster\", font_scale = 0.9)\nsns.countplot(newdata['Current Status'])","9dd1b2a2":"# Plotting the Countplot for Filed Date Month:\n\nplt.figure(figsize=(12,6))\nsns.set_context(\"poster\")\nsns.countplot(newdata['Filed Date Month'])","5356eebf":"# Plotting the Countplot for Issued Date Month:\n\nplt.figure(figsize=(12,6))\nsns.set_context(\"poster\")\nsns.countplot(newdata['Issued Date Month'])","dd87b987":"# Countplot for the days on which permits are issued:\n\nplt.figure(figsize=(20,5))\nsns.countplot(newdata['Issued Date Day'])","683b8475":"## Dealing with Special Columns:","0c3147b1":"I would like to thank you for going through this notebook :D\nCheck out my other notebooks if you feel like!\n","27e9deab":"It is plausible to conclude by just looking at the two countplots above that most **filings** and **issues** occur during the **first four months** of a year.","1f8c0044":"# Reading the Data:","601b4cce":"## Removing Unnecessary Columns:","0f6c0a23":"There a decent correlation between the months of Issues Date and Filed Date features so gotta look into those. Out of all these, I will be completely ignoring the features such as Street Names and Prefix along with record ID among others. This is because they don't provide enough insights or provide insights that are already too obvious. For example there is significant correlation between the Latitude \/ Lomgitude and Zipcode features which is quite obvious. We expect that.","7f38cf47":"## Filling in Missing Values:","c360a8eb":"## HeatMap\nHere's a correlation heatmap which will help us get insights on the data:","17876d6c":"The Fourth of every months seems to be the favourite date of the authorities for issuing permits.","6ec21717":"## Countplots:","93986fbb":"Before converting my categorical columns to numerical to process it for insights, I'll copy the dataset first so that I don't make changes to the newdata dataset.","9a2cec46":"# Data Visualization and Analysis:","2bcf76ec":"# Preprocessing","8e4d5245":"What I can conclude from above is that the north west regions have more plansets, clustered around the San Francisco-Oakland bridge.","be748a5b":"## Converting Categorical Values:","4b2c96ba":"I think the first step to starting to work on something which as a lot of columns is by removing the columns which are unnecessary given that they provide no value to the data but rather make it messy:","162f877f":"## Scatter Maps:"}}