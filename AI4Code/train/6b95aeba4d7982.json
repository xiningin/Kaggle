{"cell_type":{"128f5dd5":"code","82a43e23":"code","eca28533":"code","ac777cbc":"code","e70fa815":"code","98754aef":"code","8175cd06":"code","a2bf2ab4":"markdown","901162b4":"markdown","7d1a93b9":"markdown","fca1ab4e":"markdown","5e50254d":"markdown","321af5cd":"markdown"},"source":{"128f5dd5":"# 1. Enable Internet in the Kernel (Settings side pane)\n\n# 2. Curl cache may need purged if v0.1.6 cannot be found (uncomment if needed). \n# !curl -X PURGE https:\/\/pypi.org\/simple\/kaggle-environments\n\n# ConnectX environment was defined in v0.1.6\n!pip install 'kaggle-environments==0.1.6'","82a43e23":"from kaggle_environments import evaluate, make, utils\n\nenv = make(\"connectx\", debug=True)\nenv.render()","eca28533":"def my_agent(observation, configuration):\n    import time\n    start = time.time()\n    import numpy as np\n    from random import choice\n    limit = configuration.timeout - 0.7\n    rewards = np.zeros(configuration.columns)\n\n    # OPENING BOOK\n    # Play in the middle of the board on our first move\n    if sum(observation.board) <= 3:\n        return int(configuration.columns\/2)\n\n    # CHECK INSTANT WIN\/LOSS\n    # WIN: use is_win on a copy of this subgame by playing obs.mark in each column\n    def check_instant_win(observation, configuration):\n        # our turn\n        mark = observation.mark\n        win = -1\n        # for all columns with an open space\n        for i in [c for c in range(configuration.columns) if observation.board[c] == 0]:\n            # make copy of board\n            temp_copy = observation.board.copy()\n            play(temp_copy, i, mark, configuration)\n            # if that play yields a win for us\n            if is_win(temp_copy, i, mark, configuration, has_played=True):\n                win = i\n        return win\n\n\n    # LOSS: use is_win on a copy of this subgame by playing other mark in each column\n    def check_instant_loss(observation, configuration):\n        # figure out whose turn it is\n        mark = observation.mark\n        # change mark to the other player\n        mark = (mark%2)+1\n\n        loss = -1\n        # for all columns with an open space\n        for i in [c for c in range(configuration.columns) if observation.board[c] == 0]:\n            # make a temporary copy of the board that got passed in\n            temp_copy = observation.board.copy()\n            play(temp_copy, i, mark, configuration)\n            # if that yields a win for the other player\n            if is_win(temp_copy, i, mark, configuration, has_played=True):\n                loss = i\n        return loss\n\n    # Checks if placing a piece in the column wins the game\n    def is_winning_move(column, board, config, mark):\n        columns = config.columns\n        rows = config.rows\n        row = max([r for r in range(rows) if board[column + (r * columns)] == 0])\n        board[column + (row * columns)] = mark\n        if is_win(board, column, mark, config):\n            board[column + (row * columns)] = 0\n            return True\n        board[column + (row * columns)] = 0\n        return False\n\n    # Checks if the opponent placing a piece in the column would win them the game\n    def blocks_opponent_win(column, board, config, mark):\n        reverse_mark = (mark % 2) + 1\n        return is_winning_move(column, board, config, reverse_mark)\n\n    # Always plays a winning move, always plays a force move--otherwise random\n    def intelligent_rando(board, config, mark):\n\n        options = [c for c in range(config.columns) if board[c] == 0]\n        for c in options:\n            if is_winning_move(c, board, config, mark):\n                return c\n\n        for c in options:\n            if blocks_opponent_win(c, board, config, mark):\n                return c\n\n        if len(options)>0:\n            return choice(options)\n        else:\n            return -1\n\n    # So this function will make a copy of the game board it receives for every playable column (in iteration).  Then, for column i (where i is a playable column in obs.board), our agent plays in column i on board_copy.  Switch the mark to the other player, and then for every column j (where j is a playable column in board_copy), make a copy of the board_copy and play in column j on the copy of the copy.  If that play j yields a win for the opponent, we add i (the move we made) to a list of bad moves.  Return that list\n    # check that a move we plan to make won't give the opponent an easy win\n    def prevent_easy_win(obs, config):\n        bad_moves = []\n        \n        # for each open column i\n        for i in [c for c in range(config.columns) if obs.board[c] == 0]:\n            mark = obs.mark\n            board_copy = obs.board.copy()\n            # 'play' in column i\n            play(board_copy, i, mark, config)\n            # change mark to opposing player\n            mark = (mark%2)+1\n            \n            # see if the opponent can win easily b\/c of our move\n            for j in [c for c in range(config.columns) if board_copy[c] == 0]:\n                # make another copy of board\n                board_copy2 = board_copy.copy()\n                # play for the opponent in each column\n                play(board_copy2, j, mark, config)\n\n                # if yes, add i to an array of nonplayables\n                if is_win(board_copy2, j, mark, config, has_played=True):\n                    bad_moves.append(i)\n                    break\n        return bad_moves\n\n\n    # credit this to kaggle env\n    def play(board, column, mark, config):\n        columns = config.columns\n        rows = config.rows\n        row = max([r for r in range(rows) if board[column + (r * columns)] == 0])\n        board[column + (row * columns)] = mark\n\n    def is_win(board, column, mark, config, has_played=True):\n        columns = config.columns\n        rows = config.rows\n        inarow = config.inarow - 1\n        row = (\n             min([r for r in range(rows) if board[column + (r * columns)] == mark])\n             if has_played\n             else max([r for r in range(rows) if board[column + (r * columns)] == EMPTY])\n             )\n\n        def count(offset_row, offset_column):\n            for i in range(1, inarow + 1):\n                r = row + offset_row * i\n                c = column + offset_column * i\n                if (\n                    r < 0\n                   or r >= rows\n                    or c < 0\n                    or c >= columns\n                    or board[c + (r * columns)] != mark\n                ):\n                    return i - 1\n            return inarow\n\n        return (\n            count(1, 0) >= inarow  # vertical.\n            or (count(0, 1) + count(0, -1)) >= inarow  # horizontal.\n            or (count(-1, -1) + count(1, 1)) >= inarow  # top left diagonal.\n            or (count(-1, 1) + count(1, -1)) >= inarow  # top right diagonal.\n        )\n     # end credit\n\n\n\n\n    # check for instant win and play it if there is one\n    win = int(check_instant_win(observation, configuration))\n    if win != -1:\n        return win\n\n    # check for instant loss and play it if there is one\n    loss = int(check_instant_loss(observation, configuration))\n    if loss != -1:\n        return loss\n\n    bad_moves = prevent_easy_win(observation, configuration)\n\n    \n    now = time.time()\n    while now-start < limit:\n        # for each column\n        for i in [c for c in range(configuration.columns) if observation.board[c] == 0 and c not in bad_moves]:\n            \n            # copy the current board\n            board_copy = observation.board.copy()\n\n            # track whose turn it is to play\n            to_move = observation.mark\n\n            # play the first new move on this board state in ith column\n            play(board_copy, i, to_move, configuration)\n\n            # change to_move to the other player\n            to_move = (to_move%2) + 1\n\n            playing = True\n            winner = 0\n            # now we enter the randoms' game\n            while playing==True:\n                #print(board_copy)\n                # get a move from random player\n                move = intelligent_rando(board_copy, configuration, to_move)\n                # check that we havent come up with an error from randotron\n                if move==-1:\n                    winner = -1\n                    playing = False\n                    continue\n\n\n                # play that move on the board copy\n                play(board_copy, move, to_move, configuration)\n                # see if that move has yielded a winner\n                if is_win(board_copy, move, to_move, configuration, has_played=True):\n                    # set winner to the mark of player who just went\n                    winner = to_move\n                    playing = False\n                    continue\n                # make it the other random player's move\n                to_move = (to_move%2) + 1\n\n            # if the random continuing for our mc player won, increase reward by 1.0\n            if winner == observation.mark:\n                rewards[i] = rewards[i] + 1.0\n            # if nobody won, increase reward by 0.5\n            elif winner == -1:\n                rewards[i] = rewards[i] + 0.5\n            # if the other random won, increase reward by 0.0\n            else:\n                rewards[i] = rewards[i] + 0.0\n        now = time.time()\n    best = int(np.argmax(rewards))\n    if best != -1 and observation.board[best]==0:\n        return best\n    else:\n        return int(choice([i for i in range(configuration.columns) if observation.board[i] == 0]))","ac777cbc":"env = make(\"connectx\", debug=True)","e70fa815":"observation = env.state[0].observation\nprint(my_agent(observation, env.configuration))","98754aef":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(my_agent, \"submission.py\")","8175cd06":"# Note: Stdout replacement is a temporary workaround.\nimport sys\nout = sys.stdout\nsubmission = utils.read_file(\"\/kaggle\/working\/submission.py\")\nagent = utils.get_last_callable(submission)\nsys.stdout = out\n\nenv = make(\"connectx\", debug=True)\nenv.run([agent, agent])\nprint(\"Success!\" if env.state[0].status == env.state[1].status == \"DONE\" else \"Failed...\")","a2bf2ab4":"# Validate Submission\nPlay your submission against itself.  This is the first episode the competition will run to weed out erroneous agents.\n\nWhy validate? This roughly verifies that your submission is fully encapsulated and can be run remotely.","901162b4":"# Install kaggle-environments","7d1a93b9":"# Create an Agent\n\nTo create the submission, an agent function should be fully encapsulated (no external dependencies).  \n\nWhen your agent is being evaluated against others, it will not have access to the Kaggle docker image.  Only the following can be imported: Python Standard Library Modules, gym, numpy, scipy, pytorch (1.3.1, cpu only), and more may be added later.\n\n","fca1ab4e":"# Submit to Competition\n\n1. Commit this kernel.\n2. View the commited version.\n3. Go to \"Data\" section and find submission.py file.\n4. Click \"Submit to Competition\"\n5. Go to [My Submissions](https:\/\/kaggle.com\/c\/connectx\/submissions) to view your score and episodes being played.","5e50254d":"# Write Submission File\n\n","321af5cd":"# Create ConnectX Environment"}}