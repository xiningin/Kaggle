{"cell_type":{"0897da30":"code","6132e301":"code","266d05b1":"code","57a90450":"code","5f3f0c16":"code","77693adb":"code","b01c8edb":"code","65e1992d":"code","f719e664":"code","3e62fe15":"code","7cc2d28b":"code","3fa165ac":"code","50648d06":"code","3e8c65db":"code","2bd87aec":"code","59a8d0ea":"code","da46e999":"code","cd690e04":"code","ca2b6f78":"code","4b6b78a8":"code","c0bd2c38":"code","2ce46978":"code","294f440c":"code","728ee353":"code","e59d3c7a":"code","83e2f446":"code","34bbf4be":"code","e61387be":"code","d04cfff7":"code","462d66f4":"code","4cb558b0":"code","476f3cc3":"markdown","f6a8c17c":"markdown","ba51b8d2":"markdown","5f3fb187":"markdown","0a127e27":"markdown","74ac9308":"markdown","b61c3883":"markdown","f4f8c3b5":"markdown","efd13b56":"markdown","27aad0f9":"markdown","44b67bfb":"markdown","bea7880d":"markdown","526a1295":"markdown","cff6c1c5":"markdown","d8f27d92":"markdown","a0b38d05":"markdown","9e5a4b6e":"markdown","a46eee4f":"markdown","8f729948":"markdown","8b88040e":"markdown","8afc360e":"markdown","d6285bcc":"markdown","14ff6956":"markdown","24a3aad1":"markdown","dc3457d7":"markdown","e711c568":"markdown","71cac458":"markdown","60814825":"markdown","8ad85c5d":"markdown","4a623726":"markdown","0d8351e9":"markdown","e1904a7c":"markdown","68365567":"markdown","66431ad6":"markdown","4ff2388a":"markdown","532946a3":"markdown","a888aa3c":"markdown","c1e2f5e4":"markdown","d8361748":"markdown","95391138":"markdown","eae49fd0":"markdown","37c746c1":"markdown"},"source":{"0897da30":"q = \"\"\"\n<script>\n  function code_toggle() {\n    if (code_shown){\n      $('div.input').hide('500');\n      $('#toggleButton').val('Show Code')\n    } else {\n      $('div.input').show('500');\n      $('#toggleButton').val('Hide Code')\n    }\n    code_shown = !code_shown\n  }\n\n  $( document ).ready(function(){\n    code_shown=false;\n    $('div.input').hide()\n  });\n<\/script>\n<form action=\"javascript:code_toggle()\"><input type=\"submit\" id=\"toggleButton\" value=\"Show Code\"><\/form>\n\"\"\"             \nfrom IPython.core.display import display, HTML\ndisplay(HTML(q))\n\ndisplay(HTML(\"<style>.container { width:100% !important; }<\/style>\"))\n\nq2 = \"\"\"<style>\ndiv.prompt {display:none}\n<\/style>\"\"\"\ndisplay(HTML(q2))","6132e301":"import pandas as pd\nimport os\nimport random\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","266d05b1":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom scipy.integrate import odeint\n\nfrom plotly.offline import iplot, init_notebook_mode\nimport math\nimport bokeh \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom urllib.request import urlopen\nimport json\nfrom dateutil import parser\nfrom bokeh.layouts import gridplot\nfrom bokeh.plotting import figure, show, output_file\nfrom bokeh.layouts import row, column, gridplot\nfrom bokeh.resources import INLINE\nfrom bokeh.io import output_notebook\nfrom bokeh.models import Span\nimport warnings\nwarnings.filterwarnings(\"ignore\")\noutput_notebook(resources=INLINE)","57a90450":"covid_19_globally=pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n\n# Engineering global data\nprev_index = 0\nfirst_time = False\ntmp = 0\n\n# Adding historic counts of china\nfor i, row in covid_19_globally.iterrows():\n\n    if(covid_19_globally.loc[i,'SNo'] < 1342 and covid_19_globally.loc[i,'Province\/State']=='Hubei'):\n        if(first_time):\n            tmp = covid_19_globally.loc[i,'Confirmed']\n            prev_index = i\n            covid_19_globally.loc[i,'Confirmed'] = covid_19_globally.loc[i,'Confirmed'] + 593\n            first_time = False\n        else:\n            increment = covid_19_globally.loc[i,'Confirmed'] - tmp\n            tmp = covid_19_globally.loc[i,'Confirmed']\n            covid_19_globally.loc[i,'Confirmed'] = covid_19_globally.loc[prev_index,'Confirmed'] + increment + 593\n            prev_index = i\n    \n\ncovid_19_globally.rename(columns={'Country\/Region': 'Country', 'ObservationDate': 'Date'}, inplace=True)\ncovid_19_globally = covid_19_globally.fillna('unknow')\n\n# Renaming data to join country code\ncovid_19_globally['Country'] = covid_19_globally['Country'].str.replace('US','United States')\ncovid_19_globally['Country'] = covid_19_globally['Country'].str.replace('UK','United Kingdom') \ncovid_19_globally['Country'] = covid_19_globally['Country'].str.replace('Mainland China','China')\ncovid_19_globally['Country'] = covid_19_globally['Country'].str.replace('South Korea','Korea, South')\ncovid_19_globally['Country'] = covid_19_globally['Country'].str.replace('North Korea','Korea, North')\ncovid_19_globally['Country'] = covid_19_globally['Country'].str.replace('Macau','China')\ncovid_19_globally['Country'] = covid_19_globally['Country'].str.replace('Ivory Coast','Cote d\\'Ivoire')\n\n# Adding country code\ncountry_codes = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_world_gdp_with_codes.csv')\ncountry_codes = country_codes.drop('GDP (BILLIONS)', 1)\ncountry_codes.rename(columns={'COUNTRY': 'Country', 'CODE': 'Code'}, inplace=True)\n\ncovid_19_globally = pd.merge(covid_19_globally,country_codes,on=['Country'])","5f3f0c16":"covid_19_timeFrame=covid_19_globally.groupby(['Date','Country','Code']).agg({'Confirmed':'sum'}).reset_index()\n\nchoro_map=px.choropleth(covid_19_timeFrame, \n                    locations=\"Country\", \n                    locationmode = \"country names\",\n                    color=\"Confirmed\", \n                    hover_name=\"Country\", \n                    animation_frame=\"Date\",\n                    color_continuous_scale=px.colors.sequential.Reds\n                   )\n\nchoro_map.update_layout(\n    title_text = 'Spread of COVID-19 over time',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nchoro_map.show()","77693adb":"# Top 5 countries\n\ntop_countries = covid_19_timeFrame.groupby(['Code','Country'])['Confirmed'].sum().reset_index()\ntop_countries = top_countries.sort_values('Confirmed', ascending=False)\ntop_countries = top_countries[:5]\ntop_countries_codes = list(top_countries['Country'])\n\ncountries_data = covid_19_globally[covid_19_globally['Country'].isin(top_countries_codes)]\ncountries_day_data = countries_data.groupby(['Date','Code','Country'])['Confirmed','Deaths','Recovered'].sum().reset_index()\n\ncountries_data_ind = covid_19_globally[covid_19_globally['Country']=='India']\ncountries_day_data_ind = countries_data.groupby(['Date','Code','Country'])['Confirmed','Deaths','Recovered'].sum().reset_index()\n\ndef get_country_trend(country_code):\n    tmp = countries_day_data.loc[countries_day_data['Country']==country_code]\n\n    trend = []\n    trend.append( list(tmp['Confirmed'])[0] - list(tmp['Deaths'])[0] - list(tmp['Recovered'])[0])\n\n    for i in range(1,len(tmp)):\n        trend.append( list(tmp['Confirmed'])[i] - list(tmp['Deaths'])[i] - list(tmp['Recovered'])[i])\n        \n    return tmp,trend\n\ntrends = dict()\ncountry_data = dict()\nfor code in top_countries_codes:\n    country_data[code],trends[code] = get_country_trend(code)\n    \n# India\ntrend_ind = []\ntrend_ind.append( list(countries_data_ind['Confirmed'])[0] - list(countries_data_ind['Deaths'])[0] \n                 - list(countries_data_ind['Recovered'])[0])\n\nfor i in range(1,len(countries_data_ind)):\n    trend_ind.append( list(countries_data_ind['Confirmed'])[i] - list(countries_data_ind['Deaths'])[i] \n                     - list(countries_data_ind['Recovered'])[i])","b01c8edb":"exponential_line_x = []\nexponential_line_y = []\nfor i in range(16):\n    exponential_line_x.append(i)\n    exponential_line_y.append(i)\n\np1 = figure(plot_width=700, plot_height=350, title=\"Trends of Top 5 covid-19 affected countries\")\np1.xaxis.axis_label = 'Total number of detected cases (Log scale)'\np1.yaxis.axis_label = 'New confirmed cases (Log scale)'\nline_colors = ['#003f5c','#58508d','#bc5090','#ff6361','#ffa600']\n\n# Top 5 countries\np1.line(exponential_line_x, exponential_line_y, line_dash=\"4 4\", line_width=1)\nfor c,color in zip(top_countries_codes,line_colors):\n    p1.line(np.log(list(country_data[c]['Confirmed'])),np.log(trends[c]), color=color, \n            legend_label=c, line_width=3)\n    p1.circle(np.log(list(country_data[c]['Confirmed'])[-1]), np.log(trends[c][-1]), fill_color=\"white\", size=5)\np1.legend.location = \"bottom_right\"\n\n# India\np2 = figure(plot_width=700, plot_height=350, title=\"Trends of India\")\np2.xaxis.axis_label = 'Total number of detected cases (Log scale)'\np2.yaxis.axis_label = 'New confirmed cases (Log scale)'\n\n# Top 5 countries\np2.line(exponential_line_x, exponential_line_y, line_dash=\"4 4\", line_width=1)\n\np2.line(np.log(list(countries_data_ind['Confirmed'])),np.log(trend_ind), color='#114f5d', \n        legend_label='India', line_width=3)\np2.circle(np.log(list(countries_data_ind['Confirmed'])[-1]), np.log(trend_ind[-1]), fill_color=\"white\", size=5)\np2.legend.location = \"bottom_right\"\n\n# output_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\n# display both\ngp = gridplot(children=[[p1], [p2]])\nshow(gp)","65e1992d":"# india data\nindia_covid_19 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nage_details = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\nhospital_beds = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nindividual_details = pd.read_csv('..\/input\/covid19-in-india\/IndividualDetails.csv')\nICMR_details = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingDetails.csv')\nICMR_labs = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingLabs.csv')\nstate_testing = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\n\nconfirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecovered_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-04-2020.csv')","f719e664":"dates = list(confirmed_df.columns[4:])\ndates = list(pd.to_datetime(dates))\ndates_india = dates[8:]\n\ntotal = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndeths = deaths_df.groupby('Country\/Region').sum().reset_index()\nrecovered = recovered_df.groupby('Country\/Region').sum().reset_index()\n\nk = total[total['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_confirmed = k.values.tolist()[0] \n\nk = deths[deths['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_deaths = k.values.tolist()[0] \n\nk = recovered[recovered['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_recovered = k.values.tolist()[0] \n\nplt.figure(figsize= (12,6))\nplt.yticks(fontsize = 10)\nplt.ylabel(\"Total cases\", fontsize = 12)\nplt.title(\"Spread Trend\", fontsize = 15)\nplt.gca().yaxis.tick_right()\nplt.gca().yaxis.set_label_position(\"right\")\nplt.gca().spines['left'].set_visible(False)\nplt.gca().spines['top'].set_visible(False)\n\nax1 = plt.plot_date(y= india_confirmed,x= dates_india,label = 'Confirmed',linestyle ='-',color = '#386fa4')\nax2 = plt.plot_date(y= india_recovered,x= dates_india,label = 'Recovered',linestyle ='-',color = '#2e856e')\nax3 = plt.plot_date(y= india_deaths,x= dates_india,label = 'Death',linestyle ='-',color = '#b30000')\nplt.legend();","3e62fe15":"india_covid_19['Date'] = pd.to_datetime(india_covid_19['Date'])\nstate_testing['Date'] = pd.to_datetime(state_testing['Date'])\n\nstate_details = pd.pivot_table(india_covid_19, values=['Confirmed','Deaths','Cured'], index='State\/UnionTerritory', aggfunc='max')\nstate_details['% total cases'] = round(state_details['Confirmed'] *100 \/ (state_details['Confirmed'].sum()),2)\nstate_details = state_details[['% total cases','Confirmed','Deaths','Cured']]\nstate_details['Recovery Rate'] = round(state_details['Cured'] \/ state_details['Confirmed'],2)\nstate_details['Death Rate'] = round(state_details['Deaths'] \/state_details['Confirmed'], 2)\nstate_details = state_details.sort_values(by='Confirmed', ascending= False)\nstate_details[:-1].style.background_gradient(cmap='Reds')","7cc2d28b":"def color_zone(val):\n    if val == 'Red Zone':\n        color = 'background-color:red' \n    elif val == 'Green Zone':\n        color = 'background-color:green'\n    elif val == 'Orange Zone':\n        color = 'background-color:orange'\n    else:\n        color = ''\n    return color","3fa165ac":"zone=pd.read_csv('\/kaggle\/input\/covid-19-india-zone-classification\/lockdownindiawarningzones.csv')\nzone = zone.drop('S.no',axis=1)\nzone = zone.sort_values('State')\nzone.style.applymap(color_zone)","50648d06":"\nimport IPython\nIPython.display.HTML('<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1977187\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1977187\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>')","3e8c65db":"india_covid_19.rename(columns={'State\/UnionTerritory': 'State', 'Cured': 'Recovered', 'Confirmed': 'Confirmed'}, inplace=True)\nstatewise_cases = pd.DataFrame(india_covid_19.groupby(['State'])['Confirmed', 'Deaths', 'Recovered'].max().reset_index())\nstatewise_cases[\"Country\"] = \"India\" # in order to have a single root node\nfig = px.treemap(statewise_cases, path=['Country','State'], values='Confirmed',\n                  color='Confirmed', hover_data=['State'],\n                  color_continuous_scale='Rainbow')\nfig.show()","2bd87aec":"# plot\nfig = plt.figure(figsize=(16, 8))\nsplot=sns.barplot( y='TotalCases', x='AgeGroup', data= age_details, palette='hls')\nfor p in splot.patches:\n    plt.annotate('{}'.format(int(p.get_height())), \n                (p.get_x()+p.get_width()\/2,\n                p.get_height()+0.1),\n                ha='center')\nplt.title('Age distribution of confirm cases')\nplt.box(on=None)\nplt.show()\n\n","59a8d0ea":"labels = ['Missing', 'Male', 'Female']\nsizes = []\nsizes.append(individual_details['gender'].isnull().sum())\nsizes.append(list(individual_details['gender'].value_counts())[0])\nsizes.append(list(individual_details['gender'].value_counts())[1])\n\nexplode = (0.1, 0.1, 0.1)\nouter_colors = ['#c2cf6f','#ff9999','#c2c2f0']\n\nlabels1 = ['Male', 'Female']\nsizes1 = []\nsizes1.append(list(individual_details['gender'].value_counts())[0])\nsizes1.append(list(individual_details['gender'].value_counts())[1])\n\nexplode1 = (0.1, 0.1)\nouter_colors1 = ['#ff9999','#c2c2f0']\n\nplt.subplot(1,2,1)\nplt.pie(sizes,labels=labels, autopct='%1.1f%%', startangle=90, frame=True, \n                radius=3, colors=outer_colors, explode=explode, textprops={'fontsize':15})\nfig1 = plt.gcf()\nfig1.set_size_inches(14,8)\nplt.title(\"Gender distribution\",fontsize=16)\nplt.axis('equal')\nplt.axis('off')\nplt.tight_layout()\n\n\nplt.subplot(1,2,2)\nplt.pie(sizes1,labels=labels1, autopct='%1.1f%%', startangle=90, frame=True, \n                radius=2.8, colors=outer_colors1, explode=explode1, textprops={'fontsize':15})\nfig1 = plt.gcf()\nfig1.set_size_inches(14,8)\nplt.title(\"Gender distribution\",fontsize=16)\nplt.axis('equal')\nplt.axis('off')\nplt.tight_layout()\n\n\nfig = plt.gcf()\n","da46e999":"plt.figure(figsize=(15,30))\nplt.subplot(2,1,1)\nhospital_beds=hospital_beds.sort_values('NumUrbanHospitals_NHP18', ascending= False)[1:]\nsns.barplot(data=hospital_beds,y='State\/UT',x='NumUrbanHospitals_NHP18',color=sns.color_palette('hls')[3])\nplt.title('Urban Hospitals per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospital_beds.shape[0]):\n    count = hospital_beds.iloc[i]['NumUrbanHospitals_NHP18']\n    plt.text(count+10,i,count,ha='center',va='center')\n\nplt.subplot(2,1,2)\nhospital_beds=hospital_beds.sort_values('NumRuralHospitals_NHP18', ascending= False)\nsns.barplot(data=hospital_beds,y='State\/UT',x='NumRuralHospitals_NHP18',color=sns.color_palette('RdBu')[0])\nplt.title('Rural Hospitals per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospital_beds.shape[0]):\n    count = hospital_beds.iloc[i]['NumRuralHospitals_NHP18']\n    plt.text(count+100,i,count,ha='center',va='center')\n","cd690e04":"labs = pd.read_csv(\"..\/input\/covid19-in-india\/ICMRTestingLabs.csv\")\nfig = px.treemap(labs, path=['state','city'],\n                  color='city', hover_data=['lab','address'],\n                  color_continuous_scale='reds')\nfig.show()","ca2b6f78":"testing=state_testing.groupby('State').sum().sort_values('TotalSamples').reset_index()\nfig = px.bar(testing, \n             x=\"TotalSamples\",\n             y=\"State\", \n             orientation='h',\n             height=800,\n             title='Statewise test sample collected')\nfig.show()","4b6b78a8":"plt.figure(figsize=(15,30))\nplt.subplot(2,1,1)\nhospitalBeds=hospital_beds.sort_values('NumUrbanBeds_NHP18', ascending= False)\nsns.barplot(data=hospitalBeds,y='State\/UT',x='NumUrbanBeds_NHP18',color=sns.color_palette('hls')[5])\nplt.title('Rural Beds per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospitalBeds.shape[0]):\n    count = hospitalBeds.iloc[i]['NumUrbanBeds_NHP18']\n    plt.text(count+1500,i,count,ha='center',va='center')\n\nplt.subplot(2,1,2)\nhospitalBeds=hospitalBeds.sort_values('NumRuralBeds_NHP18', ascending= False)\nsns.barplot(data=hospitalBeds,y='State\/UT',x='NumRuralBeds_NHP18',color=sns.color_palette('RdBu')[2])\nplt.title('Rural Beds per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospitalBeds.shape[0]):\n    count = hospitalBeds.iloc[i]['NumRuralBeds_NHP18']\n    plt.text(count+1500,i,count,ha='center',va='center')\n\nplt.tight_layout()\nplt.show()","c0bd2c38":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport os\nfrom tqdm.notebook import tqdm\nfrom scipy.integrate import solve_ivp\nimport numpy\nimport datetime\nfrom datetime import timedelta","2ce46978":"# Susceptible equation\ndef dS_dt(S, I, R_t, T_inf):\n    return -(R_t \/ T_inf) * I * S\n\n# Exposed equation\ndef dE_dt(S, E, I, R_t, T_inf, T_inc):\n    return (R_t \/ T_inf) * I * S - (T_inc**-1) * E\n\n# Infected equation\ndef dI_dt(I, E, T_inc, T_inf):\n    return (T_inc**-1) * E - (T_inf**-1) * I\n\n# Recovered\/Remove\/deceased equation\ndef dR_dt(I, T_inf):\n    return (T_inf**-1) * I\n\ndef SEIR_model(t, y, R_t, T_inf, T_inc):\n    \n    if callable(R_t):\n        reproduction = R_t(t)\n    else:\n        reproduction = R_t\n        \n    S, E, I, R = y\n    \n    S_out = dS_dt(S, I, reproduction, T_inf)\n    E_out = dE_dt(S, E, I, reproduction, T_inf, T_inc)\n    I_out = dI_dt(I, E, T_inc, T_inf)\n    R_out = dR_dt(I, T_inf)\n    \n    return [S_out, E_out, I_out, R_out]","294f440c":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/train.csv')\ntest = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/test.csv')\ntrain['Date_datetime'] = train['Date'].apply(lambda x: (datetime.datetime.strptime(x, '%Y-%m-%d')))","728ee353":"pop_info = pd.read_csv('\/kaggle\/input\/covid19-population-data\/population_data.csv')\ncountry_pop = pop_info.query('Type == \"Country\/Region\"')\nprovince_pop = pop_info.query('Type == \"Province\/State\"')\ncountry_lookup = dict(zip(country_pop['Name'], country_pop['Population']))\nprovince_lookup = dict(zip(province_pop['Name'], province_pop['Population']))","e59d3c7a":"def plot_model_and_predict(data, pop, solution, title='SEIR model'):\n    sus, exp, inf, rec = solution.y\n    \n    f = plt.figure(figsize=(16,5))\n    ax = f.add_subplot(1,2,1)\n    #ax.plot(sus, 'b', label='Susceptible');\n    ax.plot(exp, 'y', label='Exposed');\n    ax.plot(inf, 'r', label='Infected');\n    ax.plot(rec, 'c', label='Recovered\/deceased');\n    plt.title(title)\n    plt.xlabel(\"Days\", fontsize=10);\n    plt.ylabel(\"Fraction of population\", fontsize=10);\n    plt.legend(loc='best');\n    \n    ax2 = f.add_subplot(1,2,2)\n    preds = np.clip((inf + rec) * pop ,0,np.inf)\n    ax2.plot(range(len(data)),preds[:len(data)],label = 'Predict ConfirmedCases')\n    ax2.plot(range(len(data)),data['ConfirmedCases'])\n    plt.title('Model predict and data')\n    plt.ylabel(\"Population\", fontsize=10);\n    plt.xlabel(\"Days\", fontsize=10);\n    plt.legend(loc='best');","83e2f446":"Country = 'India'\nN = pop_info[pop_info['Name']==Country]['Population'].tolist()[0] # India Population \n\n# Load dataset of Hubei\ntrain_loc = train[train['Country_Region']==Country].query('ConfirmedCases > 0')\nif len(train_loc)==0:\n    train_loc = train[train['Province_State']==Country].query('ConfirmedCases > 0')\n\nn_infected = train_loc['ConfirmedCases'].iloc[0] # start from first comfirmedcase on dataset first date\nmax_days = len(train_loc)# how many days want to predict\n\n# Initial stat for SEIR model\ns = (N - n_infected)\/ N\ne = 0.\ni = n_infected \/ N\nr = 0.\n\n# Define all variable of SEIR model \nT_inc = 5.2  # average incubation period\nT_inf = 2.9 # average infectious period\nR_0 = 3.954 # reproduction number\n\n## Solve the SEIR model \nsol = solve_ivp(SEIR_model, [0, max_days], [s, e, i, r], args=(R_0, T_inf, T_inc), \n                t_eval=np.arange(max_days))\n\n## Plot result\n# plot_model_and_predict(train_loc, N, sol, title = 'SEIR Model (without intervention)')\n","34bbf4be":"def cumsum_signal(vec):\n    temp_val = 0\n    vec_new = []\n    for i in vec:\n        if i > temp_val:\n            vec_new.append(i)\n            temp_val = i\n        else:\n            vec_new.append(temp_val)\n    return vec_new\n","e61387be":"# Use a constant reproduction number\ndef eval_model_const(params, data, population, return_solution=False, forecast_days=0):\n    R_0, cfr = params # Paramaters, R0 and cfr \n    N = population # Population of each country\n    n_infected = data['ConfirmedCases'].iloc[0] # start from first comfirmedcase on dataset first date\n    max_days = len(data) + forecast_days # How many days want to predict\n    s, e, i, r = (N - n_infected)\/ N, 0, n_infected \/ N, 0 #Initial stat for SEIR model\n    \n    # R0 become half after intervention days\n    def time_varying_reproduction(t):\n        if t > 80: # we set intervention days = 80\n            return R_0 * 0.5\n        else:\n            return R_0\n    \n    # Solve the SEIR differential equation.\n    sol = solve_ivp(SEIR_model, [0, max_days], [s, e, i, r], args=(time_varying_reproduction, T_inf, T_inc),\n                    t_eval=np.arange(0, max_days))\n    \n    sus, exp, inf, rec = sol.y\n    # Predict confirmedcase\n    y_pred_cases = np.clip((inf + rec) * N ,0,np.inf)\n    y_true_cases = data['ConfirmedCases'].values\n    \n    # Predict Fatalities by remove * fatality rate(cfr)\n    y_pred_fat = np.clip(rec*N* cfr, 0, np.inf)\n    y_true_fat = data['Fatalities'].values\n    \n    optim_days = min(20, len(data))  # Days to optimise for\n    weights = 1 \/ np.arange(1, optim_days+1)[::-1]  # Recent data is more heavily weighted\n    \n    # using mean squre log error to evaluate\n    msle_cases = mean_squared_log_error(y_true_cases[-optim_days:], y_pred_cases[-optim_days:], weights)\n    msle_fat = mean_squared_log_error(y_true_fat[-optim_days:], y_pred_fat[-optim_days:], weights)\n    msle_final = np.mean([msle_cases, msle_fat])\n    \n    if return_solution:\n        return msle_final, sol\n    else:\n        return msle_final\n","d04cfff7":"# Use a Hill decayed reproduction number\ndef eval_model_decay(params, data, population, return_solution=False, forecast_days=0):\n    R_0, cfr, k, L = params # Paramaters, R0 and cfr \n    N = population # Population of each country\n    n_infected = data['ConfirmedCases'].iloc[0] # start from first comfirmedcase on dataset first date\n    max_days = len(data) + forecast_days # How many days want to predict\n    s, e, i, r = (N - n_infected)\/ N, 0, n_infected \/ N, 0 #Initial stat for SEIR model\n    \n    # https:\/\/github.com\/SwissTPH\/openmalaria\/wiki\/ModelDecayFunctions   \n    # Hill decay. Initial values: R_0=2.2, k=2, L=50\n    def time_varying_reproduction(t): \n        return R_0 \/ (1 + (t\/L)**k)\n    \n    # Solve the SEIR differential equation.\n    sol = solve_ivp(SEIR_model, [0, max_days], [s, e, i, r], args=(time_varying_reproduction, T_inf, T_inc),\n                    t_eval=np.arange(0, max_days))\n    \n    sus, exp, inf, rec = sol.y\n    # Predict confirmedcase\n    y_pred_cases = np.clip((inf + rec) * N ,0,np.inf)\n    y_true_cases = data['ConfirmedCases'].values\n    \n    # Predict Fatalities by remove * fatality rate(cfr)\n    y_pred_fat = np.clip(rec*N* cfr, 0, np.inf)\n    y_true_fat = data['Fatalities'].values\n    \n    optim_days = min(20, len(data))  # Days to optimise for\n    weights = 1 \/ np.arange(1, optim_days+1)[::-1]  # Recent data is more heavily weighted\n    \n    # using mean squre log error to evaluate\n    msle_cases = mean_squared_log_error(y_true_cases[-optim_days:], y_pred_cases[-optim_days:], weights)\n    msle_fat = mean_squared_log_error(y_true_fat[-optim_days:], y_pred_fat[-optim_days:], weights)\n    msle_final = np.mean([msle_cases, msle_fat])\n    \n    if return_solution:\n        return msle_final, sol\n    else:\n        return msle_final\n\n","462d66f4":"import plotly.express as px\nfrom matplotlib import dates\nimport plotly.graph_objects as go\n\ndef fit_model_new(data, area_name, initial_guess=[2.2, 0.02, 2, 50], \n              bounds=((1, 20), (0, 0.15), (1, 3), (1, 100)), make_plot=True, decay_mode = None):\n    \n    if area_name in ['France']:# France last data looks weird, remove it\n        train = data.query('ConfirmedCases > 0').copy()[:-1]\n    #elif area_name in ['Virgin Islands']:\n    #    train = data[:-3].query('ConfirmedCases > 0').copy()\n    else:\n        train = data.query('ConfirmedCases > 0').copy()\n    \n    ####### Split Train & Valid #######\n    #valid_data = train[-1:]\n    train_data = train\n    \n    ####### If this country have no ConfirmedCase, return 0 #######\n    if len(train_data) == 0:\n        result_zero = np.zeros((43))\n        return pd.DataFrame({'ConfirmedCases':result_zero,'Fatalities':result_zero}), 0 \n    \n    ####### Load the population of area #######\n    try:\n        #population = province_lookup[area_name]\n        population = pop_info[pop_info['Name']==area_name]['Population'].tolist()[0]\n    except IndexError:\n        print ('country not in population set, '+str(area_name))\n        population = 1000000 \n    \n    \n    if area_name == 'US':\n        population = 327200000\n    if area_name == 'Global':\n        population = 7744240900\n        \n    cases_per_million = train_data['ConfirmedCases'].max() * 10**6 \/ population\n    n_infected = train_data['ConfirmedCases'].iloc[0]\n    \n    ####### Total case\/popuplation below 1, reduce country population #######\n    if cases_per_million < 1:\n        #print ('reduce pop divide by 100')\n        population = population\/100\n        \n    ####### Fit the real data by minimize the MSLE #######\n    res_const = minimize(eval_model_const, [2.2, 0.02], bounds=((1, 20), (0, 0.15)),\n                         args=(train_data, population, False),\n                         method='L-BFGS-B')\n\n    res_decay = minimize(eval_model_decay, initial_guess, bounds=bounds,\n                         args=(train_data, population, False),\n                         method='L-BFGS-B')\n    \n    ####### Align the date information #######\n    test_end = datetime.datetime.strptime('2020-05-15','%Y-%m-%d')\n    test_start = datetime.datetime.strptime('2020-03-26','%Y-%m-%d')\n    train_test = data[data.Date_datetime>=test_start]\n    test_period = (test_end - test_start).days\n    train_max = train_data.Date_datetime.max()\n    train_min = train_data.Date_datetime.min()\n    add_date = 0\n    delta_days =(test_end - train_max).days\n    train_add_time=[]\n\n    if train_min > test_start:\n        add_date = (train_min-test_start).days\n        last = train_min-timedelta(add_date)\n        train_add_time = np.arange(last, train_min, dtype='datetime64[D]').tolist()\n        train_add_time = pd.to_datetime(train_add_time)\n        dates_all = train_add_time.append(pd.to_datetime(np.arange(train_min, test_end+timedelta(1), dtype='datetime64[D]')))\n    else:\n        dates_all = pd.to_datetime(np.arange(train_min, test_end+timedelta(1), dtype='datetime64[D]'))\n\n\n    ####### Auto find the best decay function ####### \n    if decay_mode is None:\n        if res_const.fun < res_decay.fun :\n            msle, sol = eval_model_const(res_const.x, train_data, population, True, delta_days+add_date)\n            res = res_const\n\n        else:\n            msle, sol = eval_model_decay(res_decay.x, train_data, population, True, delta_days+add_date)\n            res = res_decay\n            R_0, cfr, k, L = res.x\n    else:\n        if decay_mode =='day_decay':\n            msle, sol = eval_model_const(res_const.x, train_data, population, True, delta_days+add_date)\n            res = res_const\n        else:\n            msle, sol = eval_model_decay(res_decay.x, train_data, population, True, delta_days+add_date)\n            res = res_decay\n            R_0, cfr, k, L = res.x\n\n    ####### Predict the result by using best fit paramater of SEIR model ####### \n    sus, exp, inf, rec = sol.y\n    \n    y_pred = pd.DataFrame({\n        'ConfirmedCases': cumsum_signal(np.diff((inf + rec) * population, prepend=n_infected).cumsum()),\n       # 'ConfirmedCases': [inf[0]*population for i in range(add_date)]+(np.clip((inf + rec) * population,0,np.inf)).tolist(),\n       # 'Fatalities': [rec[0]*population for i in range(add_date)]+(np.clip(rec, 0, np.inf) * population * res.x[1]).tolist()\n        'Fatalities': cumsum_signal((np.clip(rec * population * res.x[1], 0, np.inf)).tolist())\n    })\n\n    #y_pred_valid = y_pred.iloc[len(train_data):len(train_data)+len(valid_data)]\n    y_pred_valid = y_pred.iloc[:len(train_data)]\n    y_pred_test = pd.concat([train_test[['ConfirmedCases', 'Fatalities']],y_pred.iloc[-(delta_days):]], ignore_index=True)\n    y_true_valid = train_data[['ConfirmedCases', 'Fatalities']]\n    #y_true_valid = valid_data[['ConfirmedCases', 'Fatalities']]\n    #print (len(y_pred),train_min)\n    \n    ####### Calculate MSLE ####### \n    valid_msle_cases = mean_squared_log_error(y_true_valid['ConfirmedCases'], y_pred_valid['ConfirmedCases'])\n    valid_msle_fat = mean_squared_log_error(y_true_valid['Fatalities'], y_pred_valid['Fatalities'])\n    valid_msle = np.mean([valid_msle_cases, valid_msle_fat])\n    \n    ####### Plot the fit result of train data and forecast after 300 days ####### \n    if make_plot:\n        if len(res.x)<=2:\n            print(f'Validation MSLE: {valid_msle:0.5f}, using intervention days decay, Reproduction number(R0) : {res.x[0]:0.5f}, Fatal rate : {res.x[1]:0.5f}')\n        else:\n            print(f'Validation MSLE: {valid_msle:0.5f}, using Hill decay, Reproduction number(R0) : {res.x[0]:0.5f}, Fatal rate : {res.x[1]:0.5f}, K : {res.x[2]:0.5f}, L: {res.x[3]:0.5f}')\n        \n        ####### Plot the fit result of train data dna SEIR model trends #######\n\n        f = plt.figure(figsize=(16,5))\n        ax = f.add_subplot(1,2,1)\n        ax.plot(exp, 'y', label='Exposed');\n        ax.plot(inf, 'r', label='Infected');\n        ax.plot(rec, 'c', label='Recovered\/deceased');\n        plt.title('SEIR Model Trends')\n        plt.xlabel(\"Days\", fontsize=10);\n        plt.ylabel(\"Fraction of population\", fontsize=10);\n        plt.legend(loc='best');\n        #train_date_remove_year = train_data['Date_datetime'].apply(lambda date:'{:%m-%d}'.format(date))\n        ax2 = f.add_subplot(1,2,2)\n        xaxis = train_data['Date_datetime'].tolist()\n        xaxis = dates.date2num(xaxis)\n        hfmt = dates.DateFormatter('%m\\n%d')\n        ax2.xaxis.set_major_formatter(hfmt)\n        ax2.plot(np.array(train_data['Date_datetime'], dtype='datetime64[D]'),train_data['ConfirmedCases'],label='Confirmed Cases (train)', c='g')\n        ax2.plot(np.array(train_data['Date_datetime'], dtype='datetime64[D]'), y_pred['ConfirmedCases'][:len(train_data)],label='Cumulative modeled infections', c='r')\n        #ax2.plot(np.array(valid_data['Date_datetime'], dtype='datetime64[D]'), y_true_valid['ConfirmedCases'],label='Confirmed Cases (valid)', c='b')\n        #ax2.plot(np.array(valid_data['Date_datetime'], dtype='datetime64[D]'),y_pred_valid['ConfirmedCases'],label='Cumulative modeled infections (valid)', c='y')\n        plt.title('Real ConfirmedCase and Predict ConfirmedCase')\n        plt.legend(loc='best');\n        plt.show()\n            \n        ####### Forecast 300 days after by using the best paramater of train data #######\n        if len(res.x)>2:\n            msle, sol = eval_model_decay(res.x, train_data, population, True, 300)\n        else:\n            msle, sol = eval_model_const(res.x, train_data, population, True, 300)\n        \n        sus, exp, inf, rec = sol.y\n        \n        y_pred = pd.DataFrame({\n            'ConfirmedCases': cumsum_signal(np.diff((inf + rec) * population, prepend=n_infected).cumsum()),\n            'Fatalities': cumsum_signal(np.clip(rec, 0, np.inf) * population * res.x[1])\n        })\n        \n        ####### Plot 300 days after of each country #######\n        start = train_min\n        end = start + timedelta(len(y_pred))\n        time_array = np.arange(start, end, dtype='datetime64[D]')\n\n        max_day = numpy.where(inf == numpy.amax(inf))[0][0]\n        where_time = time_array[max_day]\n        pred_max_day = y_pred['ConfirmedCases'][max_day]\n        xy_show_max_estimation = (where_time, max_day)\n        \n        con = y_pred['ConfirmedCases']\n        fat = y_pred['Fatalities']\n        max_day_con = numpy.where(con == numpy.amax(con))[0][0] # Find the max confimed case of each country\n        max_day_fat = numpy.where(fat == numpy.amax(fat))[0][0]\n        max_con = numpy.amax(con)\n        max_fat = numpy.amax(fat)\n        where_time_con = time_array[len(time_array)-50]\n        xy_show_max_estimation_confirmed = (where_time_con, max_con)\n        \n        fig = go.Figure()\n        fig.add_trace(go.Scatter(x=time_array, y=y_pred['ConfirmedCases'].astype(int),\n                            mode='lines',\n                            line = dict(color='#b30000'),\n                            name='Estimation Confirmed Case Start from '+ str(start.date())+ ' to ' +str(end.date())))\n        fig.add_trace(go.Scatter(x=time_array, y=y_pred['Fatalities'].astype(int),\n                            mode='lines',\n                            line = dict(color='#FFE338'),\n                            name='Estimation Fatalities Start from '+ str(start.date())+ ' to ' +str(end.date())))\n        fig.add_trace(go.Scatter(x=time_array[:len(train)], y=train['ConfirmedCases'],\n                            mode='lines',\n                            name='Confirmed case until '+ str(train_max.date()),line = dict(color='#2e856e', width=4)))\n        fig.add_trace(go.Scatter(x=time_array[:len(train)], y=train['Fatalities'],\n                            mode='lines',\n                            name='Fatalities case until '+ str(train_max.date()),line = dict(color='#386fa4', width=4)))\n        fig.add_annotation(\n            x=where_time_con,\n            y=max_con-(max_con\/30),\n            showarrow=False,\n            text=\"Estimate Max Case around:\" +str(int(max_con)),\n            font=dict(\n                color=\"Blue\",\n                size=15\n            ))\n        fig.add_annotation(\n            x=where_time_con,\n            y=max_fat-(max_fat\/30),\n            showarrow=False,\n            text=\"Estimate Max death around:\" +str(int(max_fat)),\n            font=dict(\n                color=\"Blue\",\n                size=15\n            ))\n        fig.add_annotation(\n            x=time_array[len(train)-1],\n            y=train['ConfirmedCases'].tolist()[-1],\n            showarrow=True,\n            text=f\"Real ConfirmedCase: \" +str(int(train['ConfirmedCases'].tolist()[-1]))) \n        \n        fig.add_annotation(\n            x=time_array[len(train)-1],\n            y=train['Fatalities'].tolist()[-1],\n            showarrow=True,\n            text=f\"Real Fatalities: \" +str(int(train['Fatalities'].tolist()[-1]))) \n        \n        fig.add_annotation(\n            x=where_time,\n            y=pred_max_day,\n            text='Infect start decrease from: ' + str(where_time))   \n        \n        fig.update_layout(title='Estimate Confirmed Case ,'+area_name+' Total population ='+ str(int(population)), legend_orientation=\"h\",\n                         yaxis = dict(showgrid = False), xaxis = dict(showgrid = False), plot_bgcolor='white')\n        fig.show()\n\n    return y_pred_test, valid_msle","4cb558b0":"from scipy.optimize import minimize\nfrom sklearn.metrics import mean_squared_log_error, mean_squared_error\n\ncountry = 'India'\nif country not in train['Country_Region'].unique():\n    country_pd_train = train[train['Province_State']==country]\nelse:\n    country_pd_train = train[train['Country_Region']==country]\n\na,b = fit_model_new(country_pd_train,country,make_plot=True)","476f3cc3":"### 1. Basic SEIR model\n\n![](https:\/\/www.idmod.org\/docs\/hiv\/_images\/SEIR-SEIRS.png)\n\nThe SEIR models the flows of people between four states: \nsusceptible (S), \nexposed (E), \ninfected (I), and \nresistant (R). \n\nEach of those variables represents the number of people in those groups. The parameters alpha and beta partially control how fast people move from being susceptible to exposed (beta), from exposed to infected (sigma), and from infected to resistant (gamma). This model has two additional parameters; one is the background mortality (mu) which is unaffected by disease-state, while the other is vaccination (nu). The vaccination moves people from the susceptible to resistant directly, without becoming exposed or infected.\n\nThe SEIR differs from the SIR model in the addition of a latency period. Individuals who are exposed (E) have had contact with an infected person, but are not themselves infectious.\n\n![](http:\/\/www.public.asu.edu\/~hnesse\/classes\/seireqn.png)\n\n**Terminology:**\n\n* Beta\tThe parameter controlling how often a susceptible-infected contact results in a new exposure.\n* Gamma\tThe rate an infected recovers and moves into the resistant phase.\n* Sigma\tThe rate at which an exposed person becomes infective.\n* Mu\tThe natural mortality rate (this is unrelated to disease). This models a population of a constant size,\n* Initial susceptible\tThe number of susceptible individuals at the beginning of the model run.\n* Initial exposed\tThe number of exposed individuals at the beginning of the model run.\n* Initial infected\tThe number of infected individuals at the beginning of the model run.\n* Initial recovered\tThe number of recovered individuals at the beginning of the model run.\n* Days\tControls how long the model will run.\n\n\nCompartments are boxes (the \u201cstates\u201d), like Susceptible, Exposed, etc.\nTransitions from one compartment to another are represented by arrows and it is transist as\n\n![](https:\/\/miro.medium.com\/max\/920\/1*5caEXgP-6ZG7HkrPECKAEA.png)\n\nAs an example, let\u2019s look at the transition from Susceptibles to Infected in our SIR equations, with beta=2, a total population of 100, 10 infected and 90 susceptible. The rate is 1, as the infections happen immediately; the population the transition applies to is 2 * 10 = 20 individuals, as the 10 infected each infect 2 people; the probability is 90%, as 90\/100 people can still be infected. It corresponds to this intuitive notation:\n\n![](https:\/\/miro.medium.com\/max\/1222\/1*We4K9njCiEMowVuran4mWA.png)\n\nAnd more generally,\n\n![](https:\/\/miro.medium.com\/max\/1400\/1*NNO-CdlCZORoPYtllW343A.png)\n","f6a8c17c":"<a id='3'> <\/a>\n# III. Forecasting Spread in India","ba51b8d2":"#### Trends of Top 5 covid-19 affected countries and India","5f3fb187":"## Demographic Analysis\n\nCOVID-19 is causing serious health, social and economic challenges, several of which are directly related to demographic factors. Given that older persons have a weaker immune system and are likely to have underlying chronic illness, they are particularly vulnerable to viruses like SARS-CoV-2.\n\nDemography can help us understand how this pandemic has spread and has had a disproportionate effect on certain age groups, as well as why its spread affects everyone. ","0a127e27":"#### Counts over the time\n","74ac9308":"\nMain article: [COVID-19 drug repurposing research](https:\/\/en.wikipedia.org\/wiki\/COVID-19_drug_repurposing_research)\nAt least 29 phase II\u2013IV efficacy trials in COVID\u201119 were concluded in March 2020 or scheduled to provide results in April from hospitals in China. There are more than 300 active clinical trials underway as of April 2020. Seven trials were evaluating already approved treatments, including four studies on hydroxychloroquine or chloroquine. Repurposed antiviral drugs make up most of the Chinese research, with nine phase III trials on remdesivir across several countries due to report by the end of April. Other candidates in trials include vasodilators, corticosteroids, immune therapies, lipoic acid, bevacizumab, and recombinant angiotensin-converting enzyme 2.","b61c3883":"#### Prevention\n\nTo prevent infection and to slow transmission of COVID-19, do the following:\n\nWash your hands regularly with soap and water, or clean them with alcohol-based hand rub.\nMaintain at least 1 metre distance between you and people coughing or sneezing.\nAvoid touching your face.\nCover your mouth and nose when coughing or sneezing.\nStay home if you feel unwell.\nRefrain from smoking and other activities that weaken the lungs.\nPractice physical distancing by avoiding unnecessary travel and staying away from large groups of people.","f4f8c3b5":"Coronavirus disease (COVID-19) is an infectious disease caused by a newly discovered coronavirus.\n\nMost people infected with the COVID-19 virus will experience mild to moderate respiratory illness and recover without requiring special treatment.  Older people, and those with underlying medical problems like cardiovascular disease, diabetes, chronic respiratory disease, and cancer are more likely to develop serious illness.\n\nThe best way to prevent and slow down transmission is be well informed about the COVID-19 virus, the disease it causes and how it spreads. Protect yourself and others from infection by washing your hands or using an alcohol based rub frequently and not touching your face. \n\nThe COVID-19 virus spreads primarily through droplets of saliva or discharge from the nose when an infected person coughs or sneezes, so it\u2019s important that you also practice respiratory etiquette (for example, by coughing into a flexed elbow).\n\nAt this time, there are no specific vaccines or treatments for COVID-19. However, there are many ongoing clinical trials evaluating potential treatments. WHO will continue to provide updated information as soon as clinical findings become available.\n\n(source : [Coronaviras disease 2019 - World Health Organization](https:\/\/www.who.int\/health-topics\/coronavirus#tab=tab_1))","efd13b56":"The state of Maharashtra conducted the most number of tests to detect the coronavirus (COVID-19); also confirming the highest number of positive cases. On April 24, India\u2019s test positivity rate stood at 4.76%, a low value by international standards (because the median test positivity rate was around 5.73%). ","27aad0f9":"## Machine Learning Forecasting\n\nComing soon .....","44b67bfb":"### Hospitals in Urben and Rural Areas","bea7880d":"## Availabel Heath care resources","526a1295":"Let's look into the spread of this COVID-19 disease over the period of time.","cff6c1c5":"### Testing across States\n\nIndia is constantly upgrading its testing capabilities to keep a check on the spread of coronavirus infections in the country. The number of tests conducted has grown almost four times since April 1.","d8f27d92":"The novel coronavirus has impacted China, Italy, the US, and Spain the most, India too is seeing rise in COVID-19 continuasly. China, Germany and Spin showing decrease in cases but in the US and India it growing heavily.","a0b38d05":"<a id='2'> <\/a>\n# II. India Story\n\nThe spread of novel coronavirus in India has quickened in the past few days with new cases of coronavirus and COVID-19 deaths being reported every day. After the first confirmed positive case was reported on January 30 in Kerala, the epidemic has expanded its footprints in the country, affecting more than 40,000 people.\n\nAs we see ealier in trend graphs, while the novel coronavirus has impacted China, Italy, the US, and Spain the most, India too is seeing rise in COVID-19 cases continuasly. After making its presence in Kerala first, the novel coronavirus spread to other cities\/regions, including Bengaluru,Pune, Delhi, Jaipur, Agra, Hyderabad, Jammu and Kashmir.\n","9e5a4b6e":"### Personal Protective Equipment (PPE)\ncoming soon....","a46eee4f":"### Worst hit states in tree plot\n\nMaharashtra remains to be leading state in the number of Covid-19 cases reported till April 4. Also, Gujarat and Delhi have shown significant rise in the cases from past few days. ","8f729948":"As the world races for coronavirus vaccine, plasma therapy is being tried as a temporary treatment to help patients recover. India too has started plasma therapy trials with hospitals in Maharashtra, Uttar Pradesh and Madhya Pradesh taking the lead. Other states and UTs are either awaiting approval from the ICMR r have got approval but have not yet started administering plsama yet. \n\n\n![](https:\/\/static.toiimg.com\/photo\/imgsize-436303,msid-75463201\/75463201.jpg)","8b88040e":"### Hospital beds for covid patients across state \n","8afc360e":"<a id='5'> <\/a>\n# How we can contribute to this fight ? \n\nPreventive measures to reduce the chances of infection include staying at home, avoiding crowded places, keeping distance from others, washing hands with soap and water often and for at least 20 seconds, practising good respiratory hygiene, and avoiding touching the eyes, nose, or mouth with unwashed hands.\n\n# Stay Home !\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/4\/45\/Covid-19-Transmission-graphic-01.gif\/334px-Covid-19-Transmission-graphic-01.gif)\n\n# Wash Hands Frequently !\n\n![](https:\/\/www.paramounthealthcare.com\/assets\/images\/news\/covid-19_prevention.png)\n\nHope you find this notebook useful and interesting.\nIf you like this notebook, please upvote.***\ud83d\udc4d","d6285bcc":"### Passive antibodies","14ff6956":"Main article: [COVID-19 vaccine](https:\/\/en.wikipedia.org\/wiki\/COVID-19_vaccine)\n\nThere is no available vaccine, but various agencies are actively developing vaccine candidates. Previous work on SARS-CoV is being used because both SARS-CoV and SARS-CoV-2 use the ACE2 receptor to enter human cells. Three vaccination strategies are being investigated. First, researchers aim to build a whole virus vaccine. The use of such a virus, be it inactive or dead, aims to elicit a prompt immune response of the human body to a new infection with COVID\u201119. A second strategy, subunit vaccines, aims to create a vaccine that sensitises the immune system to certain subunits of the virus. In the case of SARS-CoV-2, such research focuses on the S-spike protein that helps the virus intrude the ACE2 enzyme receptor. A third strategy is that of the nucleic acid vaccines (DNA or RNA vaccines, a novel technique for creating a vaccination). Experimental vaccines from any of these strategies would have to be tested for safety and efficacy.\n\nOn 16 March 2020, the first clinical trial of a vaccine started with four volunteers in Seattle, United States. The vaccine contains a harmless genetic code copied from the virus that causes the disease.\n\nAntibody-dependent enhancement has been suggested as a potential challenge for vaccine development for SARS-COV-2, but this is controversial.","24a3aad1":"### Age group distribution of covid-19 affected population","dc3457d7":"# Index\n\n1. [Covid-19 Global Situation](#1)\n2. [India Story (Exploratory Data Analysis)](#2)\n3. [Forecasting Spread in India](#3)\n4. [Research for cure](#4)\n5. [How we can contribute to this fight?](#5)","e711c568":"# Coronavirus disease (COVID-19) Pandemic","71cac458":"## Statewise cases","60814825":"### Vaccine","8ad85c5d":"![](https:\/\/2hfybu1lrdue3x9wnu1dvw7s-wpengine.netdna-ssl.com\/wp-content\/uploads\/2020\/03\/covid-19-image.png)","4a623726":"### Gender distribution of covid-19 affected population","0d8351e9":"### Medications\n\n","e1904a7c":"Transferring purified and concentrated antibodies produced by the immune systems of those who have recovered from COVID\u201119 to people who need them is being investigated as a non-vaccine method of passive immunisation. This strategy was tried for SARS with inconclusive results. Viral neutralisation is the anticipated mechanism of action by which passive antibody therapy can mediate defence against SARS-CoV-2. Other mechanisms, however, such as antibody-dependent cellular cytotoxicity and\/or phagocytosis, may be possible. Other forms of passive antibody therapy, for example, using manufactured monoclonal antibodies, are in development. Production of convalescent serum, which consists of the liquid portion of the blood from recovered patients and contains antibodies specific to this virus, could be increased for quicker deployment.","68365567":"### Mathematical modelling of infectious diseases","66431ad6":"#### ICMR Testing centers","4ff2388a":"The impact of the pandemic and its mortality rate are different for men and women.Infection and mortality is higher in men. The higher mortality risk for men appears in their 50s, and begins to taper off only at 90. Men with age of 20s highly pron to asymptomatic carrier. Sex-based immunological differences, a lower prevalence of smoking in women, and men developing co-morbid conditions such as hypertension at a younger age than women could have contributed to the higher mortality in men. In India of those infected with COVID\u201119, more then 65% are men. ","532946a3":"No medication or vaccine is approved to treat the disease. International research on vaccines and medicines in COVID\u201119 is underway by government organisations, academic groups, and industry researchers. In March, the World Health Organisation initiated the \"SOLIDARITY Trial\" to assess the treatment effects of four existing antiviral compounds with the most promise of efficacy.\n\nThere has been a great deal of COVID-19 research, involving accelerated research processes and publishing shortcuts to meet the global demand. To minimise the impact of misinformation, medical professionals and the public are advised to expect rapid changes to available information, and to be attentive to retractions and other updates.","a888aa3c":"#### Symptoms\n\nCOVID-19 affects different people in different ways. Most infected people will develop mild to moderate illness and recover without hospitalization.\n\n**Most common symptoms:**\n\n* fever.\n* dry cough.\n* tiredness.\n\n**Serious symptoms:**\n\n* difficulty breathing or shortness of breath.\n* chest pain or pressure.\n* loss of speech or movement.\n* Seek immediate medical attention if you have serious symptoms.  Always call before visiting your doctor or health facility. \n* \nPeople with mild symptoms who are otherwise healthy should manage their symptoms at home. \n\nOn average it takes 5\u20136 days from when someone is infected with the virus for symptoms to show, however it can take up to 14 days. ","c1e2f5e4":"<a id='1'> <\/a>\n          \n# I. Covid-19 Global Situation\n\nThe coronavirus COVID-19 is affecting 212+ countries and territories around the world and 2 international conveyances. The virus is thought to be natural and has an animal origin,through spillover infection. Although, there are several theories about where the very first case (the so-called patient zero) may have originated. The first known case may trace back to 1 December 2019 in Wuhan, Hubei, China. Within a month, the number of coronavirus cases in Hubei gradually increased. By December 2019, the spread of infection was almost entirely driven by human-to-human transmission. On January 30, the World Health Organization declared the coronavirus outbreak a Global Public Health Emergency. It's spreading heavily all around the world.","d8361748":"### Containment Zones","95391138":"<a id='4'> <\/a>\n# IV. Research for cure","eae49fd0":"### 2. SEIR with deth and time compartment \n\nComing soon .....","37c746c1":"#### In India"}}