{"cell_type":{"9c003273":"code","7fa88332":"code","1c0a7693":"code","2fb60a5f":"code","2c2bff55":"code","8e5ba3d5":"code","c593e8bb":"code","f8d9110d":"code","ddfcc678":"code","c3151050":"code","47d4af21":"code","32956780":"code","d93234dc":"code","95f7d985":"code","0a552b99":"code","87238f4d":"code","1dbf6342":"code","952de68a":"code","7490b9d2":"code","77f9e9ef":"code","bb1d0e29":"code","5789565a":"code","72219b58":"code","c06b6522":"code","63c1e08f":"code","645b951c":"code","326dd64d":"code","4477d282":"code","755dd753":"code","73151a9d":"code","df514192":"code","bad12c5f":"code","981d8224":"markdown","63f60ba9":"markdown","648c5113":"markdown","22b73043":"markdown","cae6ff39":"markdown","2908d474":"markdown","9b38c3fe":"markdown","8be1ebc1":"markdown","1590f76d":"markdown"},"source":{"9c003273":"#import necessary libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nnp.random.seed(2)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPool2D, Dropout\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import EarlyStopping\n","7fa88332":"from PIL import Image, ImageChops, ImageEnhance\nimport os\nimport itertools","1c0a7693":"def convert_to_ela_image(path, quality):\n    temp_filename = 'temp_file_name.jpg'\n    ela_filename = 'temp_ela.png'\n    \n    image = Image.open(path).convert('RGB')\n    image.save(temp_filename, 'JPEG', quality = quality)\n    temp_image = Image.open(temp_filename)\n    \n    ela_image = ImageChops.difference(image, temp_image)\n    \n    extrema = ela_image.getextrema()\n    max_diff = max([ex[1] for ex in extrema])\n    if max_diff == 0:\n        max_diff = 1\n    scale = 255.0 \/ max_diff\n    \n    ela_image = ImageEnhance.Brightness(ela_image).enhance(scale)\n    \n    return ela_image","2fb60a5f":"real_image_path = '\/kaggle\/input\/casia-dataset\/casia\/CASIA2\/Au\/Au_ani_00001.jpg'\nImage.open(real_image_path)","2c2bff55":"convert_to_ela_image(real_image_path, 90)","8e5ba3d5":"fake_image_path = '\/kaggle\/input\/casia-dataset\/casia\/CASIA2\/Tp\/Tp_D_NRN_S_N_ani10171_ani00001_12458.jpg'\nImage.open(fake_image_path)","c593e8bb":"convert_to_ela_image(fake_image_path, 90)","f8d9110d":"image_size = (128, 128)","ddfcc678":"def prepare_image(image_path):\n    return np.array(convert_to_ela_image(image_path, 90).resize(image_size)).flatten() \/ 255.0","c3151050":"X = [] # ELA converted images\nY = [] # 0 for fake, 1 for real","47d4af21":"import random\npath = '\/kaggle\/input\/casia-dataset\/CASIA2\/Au\/'\nfor dirname, _, filenames in os.walk(path):\n    for filename in filenames:\n        if filename.endswith('jpg') or filename.endswith('png'):\n            full_path = os.path.join(dirname, filename)\n            X.append(prepare_image(full_path))\n            Y.append(1)\n            if len(Y) % 500 == 0:\n                print(f'Processing {len(Y)} images')\n\nrandom.shuffle(X)\nX = X[:2100]\nY = Y[:2100]\nprint(len(X), len(Y))","32956780":"path = '\/kaggle\/input\/casia-dataset\/CASIA2\/Tp\/'\nfor dirname, _, filenames in os.walk(path):\n    for filename in filenames:\n        if filename.endswith('jpg') or filename.endswith('png'):\n            full_path = os.path.join(dirname, filename)\n            X.append(prepare_image(full_path))\n            Y.append(0)\n            if len(Y) % 500 == 0:\n                print(f'Processing {len(Y)} images')\n\nprint(len(X), len(Y))","d93234dc":"X = np.array(X)\nY = to_categorical(Y, 2)\nX = X.reshape(-1, 128, 128, 3)","95f7d985":"X_train, X_val, Y_train, Y_val = train_test_split(X, Y, test_size = 0.2, random_state=5)\nX = X.reshape(-1,1,1,1)\nprint(len(X_train), len(Y_train))\nprint(len(X_val), len(Y_val))","0a552b99":"def build_model():\n    model = Sequential()\n    model.add(Conv2D(filters = 32, kernel_size = (5, 5), padding = 'valid', activation = 'relu', input_shape = (128, 128, 3)))\n    model.add(Conv2D(filters = 32, kernel_size = (5, 5), padding = 'valid', activation = 'relu', input_shape = (128, 128, 3)))\n    model.add(MaxPool2D(pool_size = (2, 2)))\n    model.add(Dropout(0.25))\n    model.add(Flatten())\n    model.add(Dense(256, activation = 'relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(2, activation = 'softmax'))\n    return model","87238f4d":"model = build_model()\nmodel.summary()","1dbf6342":"epochs = 30\nbatch_size = 32\n","952de68a":"init_lr = 1e-4\noptimizer = Adam(lr = init_lr, decay = init_lr\/epochs)","7490b9d2":"model.compile(optimizer = optimizer, loss = 'binary_crossentropy', metrics = ['accuracy'])","77f9e9ef":"early_stopping = EarlyStopping(monitor = 'val_acc',\n                              min_delta = 0,\n                              patience = 2,\n                              verbose = 0,\n                              mode = 'auto')","bb1d0e29":"hist = model.fit(X_train,\n                 Y_train,\n                 batch_size = batch_size,\n                 epochs = epochs,\n                validation_data = (X_val, Y_val),\n                callbacks = [early_stopping])","5789565a":"model.save('model_casia_run1.h5')","72219b58":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(hist.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(hist.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(hist.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(hist.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","c06b6522":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    \n    \n","63c1e08f":"# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(2))","645b951c":"class_names = ['fake', 'real']","326dd64d":"real_image_path = '\/kaggle\/input\/casia-dataset\/casia\/CASIA2\/Au\/Au_ani_00001.jpg'\nimage = prepare_image(real_image_path)\nimage = image.reshape(-1, 128, 128, 3)\ny_pred = model.predict(image)\ny_pred_class = np.argmax(y_pred, axis = 1)[0]\nprint(f'Class: {class_names[y_pred_class]} Confidence: {np.amax(y_pred) * 100:0.2f}')","4477d282":"fake_image_path = '\/kaggle\/input\/casia-dataset\/casia\/CASIA2\/Tp\/Tp_D_NRN_S_N_ani10171_ani00001_12458.jpg'\nimage = prepare_image(fake_image_path)\nimage = image.reshape(-1, 128, 128, 3)\ny_pred = model.predict(image)\ny_pred_class = np.argmax(y_pred, axis = 1)[0]\nprint(f'Class: {class_names[y_pred_class]} Confidence: {np.amax(y_pred) * 100:0.2f}')","755dd753":"fake_image = os.listdir('\/kaggle\/input\/casia-dataset\/casia\/CASIA2\/Tp\/')\ncorrect = 0\ntotal = 0\nfor file_name in fake_image:\n    if file_name.endswith('jpg') or filename.endswith('png'):\n        fake_image_path = os.path.join('\/kaggle\/input\/casia-dataset\/casia\/CASIA2\/Tp\/', file_name)\n        image = prepare_image(fake_image_path)\n        image = image.reshape(-1, 128, 128, 3)\n        y_pred = model.predict(image)\n        y_pred_class = np.argmax(y_pred, axis = 1)[0]\n        total += 1\n        if y_pred_class == 0:\n            correct += 1\n#             print(f'Class: {class_names[y_pred_class]} Confidence: {np.amax(y_pred) * 100:0.2f}')","73151a9d":"print(f'Total: {total}, Correct: {correct}, Acc: {correct \/ total * 100.0}')","df514192":"real_image = os.listdir('\/kaggle\/input\/casia-dataset\/casia\/CASIA2\/Au\/')\ncorrect_r = 0\ntotal_r = 0\nfor file_name in real_image:\n    if file_name.endswith('jpg') or filename.endswith('png'):\n        real_image_path = os.path.join('\/kaggle\/input\/casia-dataset\/casia\/CASIA2\/Au\/', file_name)\n        image = prepare_image(real_image_path)\n        image = image.reshape(-1, 128, 128, 3)\n        y_pred = model.predict(image)\n        y_pred_class = np.argmax(y_pred, axis = 1)[0]\n        total_r += 1\n        if y_pred_class == 1:\n            correct_r += 1\n#             print(f'Class: {class_names[y_pred_class]} Confidence: {np.amax(y_pred) * 100:0.2f}')","bad12c5f":"correct += correct_r\ntotal += total_r\nprint(f'Total: {total_r}, Correct: {correct_r}, Acc: {correct_r \/ total_r * 100.0}')\nprint(f'Total: {total}, Correct: {correct}, Acc: {correct \/ total * 100.0}')","981d8224":"After converting to ELA image","63f60ba9":"CNN Model","648c5113":"Au => Total Images 7354, Take 2100 random images from the list\nTp => Total Images 2064","22b73043":"Dataset Preparation","cae6ff39":"Open a fake image","2908d474":"**Real vs Fake Images Detection with ELA(Error Level Analysis) and CNN**\n\nFor more information, checkout this repo [https:\/\/github.com\/agusgun\/FakeImageDetector](http:\/\/) ","9b38c3fe":"Open a real image","8be1ebc1":"Prediction","1590f76d":"Train Test split with 80:20 ratio"}}