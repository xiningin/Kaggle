{"cell_type":{"8a4ab3b4":"code","3e9ea83a":"code","fb7efcef":"code","fbb5d807":"code","d7118470":"code","e4923db0":"code","fd4d890c":"code","6090fa3e":"code","afd72269":"code","05d68831":"code","7bea8dae":"code","ac14af44":"code","4152abf4":"code","4f2f945d":"code","a1e50ec2":"code","9ffa92f0":"code","0dda5e5c":"code","a45baacb":"code","fcb347cd":"code","d560cd91":"code","a12de522":"code","0387c5d6":"code","44ee5135":"code","bea10c40":"markdown","f11c4f48":"markdown","3fa08f70":"markdown","c4fcff1a":"markdown","f1120fa1":"markdown","6964f718":"markdown","34b295c8":"markdown","40705399":"markdown","21bfe864":"markdown","90619729":"markdown","3ed57aa8":"markdown"},"source":{"8a4ab3b4":"import numpy as np\nimport pandas as pd\nfrom catboost import CatBoostClassifier\nfrom sklearn.model_selection import train_test_split\nimport os\nimport math\nimport seaborn as sns\nimport matplotlib.pyplot as plt","3e9ea83a":"class Config:\n    is_kaggle_platform = os.path.exists(\"\/kaggle\/input\")\n    dataset_name = \"forest-cover-type-prediction\"\n    data_path = \"\/kaggle\/input\/%s\/\"%(dataset_name) if is_kaggle_platform else \"\"\n    submit_filename = \"submission.csv\"\n    label_name = \"Cover_Type\"\n    id_field = \"Id\"\nconfig = Config()","fb7efcef":"if not config.is_kaggle_platform:\n  try:\n    import kaggle\n  except:\n    !pip install kaggle\n  if not os.path.exists(\"\/root\/.kaggle\/kaggle.json\"):\n    !echo \"{\"username\":\"{your username}\",\"key\":\"{your apikey}\"}\" >> \/root\/.kaggle\/kaggle.json\n    !chmod 600 \/root\/.kaggle\/kaggle.json\n  !kaggle competitions download -c $config.dataset_name\n  !unzip test.csv.zip\n  !unzip train.csv.zip\n  !unzip sample_submission.csv.zip","fbb5d807":"train = pd.read_csv(config.data_path + \"train.csv\")\ntest = pd.read_csv(config.data_path + \"test.csv\")\nsample_submission = pd.read_csv(config.data_path + \"sampleSubmission.csv\")","d7118470":"train.head()","e4923db0":"train.info()","fd4d890c":"train.describe()","6090fa3e":"corr = train.corr()\ncorr","afd72269":"corr.sort_values(ascending=False, inplace=True, by=config.label_name, key= lambda x: abs(x))\ncorr[config.label_name]","05d68831":"correlated_columns = corr[config.label_name][corr[config.label_name].abs() > 0.05].index\ncorrelated_columns, len(correlated_columns)","7bea8dae":"correlation_score = train.corr()\ncorrelated_features = correlation_score[config.label_name].sort_values(ascending=False).dropna()\ncorrelated_columns = list(correlated_features[correlated_features.abs() > 0.05].index)\ncorrelated_columns.remove(config.label_name)\nprint(correlated_columns)","ac14af44":"corr2 = train[correlated_columns].corr()\ncorr2","4152abf4":"plt.figure(figsize=(20, 20))\nsns.heatmap(corr2, annot=True)","4f2f945d":"sns.countplot(x=config.label_name, data=train)","a1e50ec2":"train[config.label_name].value_counts()","9ffa92f0":"#train = train.drop(index = int(np.where(train[config.label_name] == 5)[0]))","0dda5e5c":"train.pop(config.id_field)\n_ = test.pop(config.id_field)","a45baacb":"train.pop(\"Soil_Type7\")\ntrain.pop(\"Soil_Type15\")\ntest.pop(\"Soil_Type7\")\n_ = test.pop(\"Soil_Type15\")","fcb347cd":"null_counts = train.isnull().sum()\nprint(null_counts[null_counts > 0])\nnull_counts = test.isnull().sum()\nprint(null_counts[null_counts > 0])","d560cd91":"cols = list(train.columns)\ncols.remove(config.label_name)\nfor data in [train, test]:\n    data['binned_elevation'] = [math.floor(v\/50.0) for v in data['Elevation']]\n    data['Horizontal_Distance_To_Roadways_Log'] = [math.log(v+1) for v in data['Horizontal_Distance_To_Roadways']]\n    data['Soil_Type12_32'] = data['Soil_Type32'] + data['Soil_Type12']\n    data['Soil_Type23_22_32_33'] = data['Soil_Type23'] + data['Soil_Type22'] + data['Soil_Type32'] + data['Soil_Type33']\n    data[\"mean\"] = data[cols].mean(axis=1)\n    data[\"min\"] = data[cols].min(axis=1)\n    data[\"max\"] = data[cols].max(axis=1)\n    data[\"std\"] = data[cols].std(axis=1)","a12de522":"train_features, val_features = train_test_split(train, test_size=0.15, random_state=42)\ntrain_targets = train_features.pop(config.label_name)\nval_targets = val_features.pop(config.label_name)\ntrain_features.head()","0387c5d6":"cat_params = {\n    'iterations': 5000,\n    'learning_rate': 0.03,\n    'od_wait': 1000,\n    'depth': 7,\n    'task_type' : 'GPU',\n    'l2_leaf_reg': 3,\n    'eval_metric': 'Accuracy',\n    'devices' : '0',\n    'verbose' : 1000\n}\ncat = CatBoostClassifier(**cat_params)\ncat.fit(train_features, train_targets, eval_set=(val_features, val_targets))\n","44ee5135":"y_pred = cat.predict(test)\nsample_submission[config.label_name] = y_pred.reshape(-1)\nsample_submission.to_csv(config.submit_filename, index=False)\nif not config.is_kaggle_platform:\n  !kaggle competitions submit $config.dataset_name -m \"Submission\" -f $config.submit_filename","bea10c40":"<a id=\"3.4\"><\/a>\n### 3.4 Drop ununsed columns\nID is not needed. So remove this column. So are Soid_Type7 and Soil_Type15.","f11c4f48":"<a id=\"3.\"><\/a>\n## 3. EDA & Preprocessing","3fa08f70":"<a id=\"4.\"><\/a>\n## 4. Model Development","c4fcff1a":"<a id=\"5.\"><\/a>\n## 5. Submission","f1120fa1":"<a id=\"3.6\"><\/a>\n### 3.6 Train Validation Split","6964f718":"<a id=\"3.5\"><\/a>\n### 3.5 Data Wrangling\nLuckily There isn't any missing value, we don't need to worry about Data Wrangling.","34b295c8":"\n#  Forest Cover Rype Prediction with Catboost\n## Table of Contents\n* [1. Overview](#1.)\n* [2. Setup](#2.)\n* [3. EDA & Preprocessing](#3.)\n\t* [3.1 Statistic Info](#3.1)\n\t* [3.2 Correlation Score](#3.2)\n\t* [3.3 Distribution of Label](#3.3)\n\t* [3.4 Drop ID column](#3.4)\n    * [3.5 Data Wrangling](#3.5)\n\t* [3.6 Train Validation Split](#3.6)\n    * [3.7 Add new features](#3.7)\n* [4. Model Development](#4.)\n* [5. Submission](#5.)\n\n<a id=\"1.\"><\/a>\n## 1. Overview\nIn this Notebook, I will build a Forest Cover Type Prediction Model using Catboost. This Notebook is based on my notebook https:\/\/www.kaggle.com\/lonnieqin\/tps-12-21-dnn about [Tabular Playground Series - Dec 2021 Competition](https:\/\/www.kaggle.com\/c\/tabular-playground-series-dec-2021).\n<a id=\"2.\"><\/a>\n## 2. Setup","40705399":"<a id=\"3.3\"><\/a>\n### 3.3 Distribution of Label\nThis dataset is very balanced.","21bfe864":"<a id=\"3.2\"><\/a>\n### 3.2 Correlation Score","90619729":"**If you found my notebook useful, give me an upvote.**\n\nIf you are interested, You may have a look at some of my TPS notebooks before.\n\n- [Tabular Playground Series Prediction(Aug 2021)](https:\/\/www.kaggle.com\/lonnieqin\/tabular-playground-series-prediction)\n- [Tabular Playground Prediction(Sep 2021) with CatBoost](https:\/\/www.kaggle.com\/lonnieqin\/catboost-tabular-playground-prediction-sep-2021)\n- [Tabular Prediction(Oct 2021) with CatBoost](https:\/\/www.kaggle.com\/lonnieqin\/catboost-tabular-prediction-oct-2021)\n- [TPS Prediction with DNN and KerasTuner (Oct 2021)](https:\/\/www.kaggle.com\/lonnieqin\/tps-prediction-with-dnn-and-kerastuner-oct-2021)\n- [TPS-10-21: DNN](https:\/\/www.kaggle.com\/lonnieqin\/tps-10-21-dnn)\n","3ed57aa8":"<a id=\"3.1\"><\/a>\n### 3.1 Statistic Info"}}