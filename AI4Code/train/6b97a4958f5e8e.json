{"cell_type":{"ddf016f7":"code","8bfe6baa":"code","61704c53":"code","6df65a2d":"code","f81bd5d7":"code","e10ea5d2":"code","2b8c2d4f":"code","84b89040":"code","51b93a84":"code","4f5d6f91":"code","6282a0de":"code","66f9c592":"code","eccd086e":"code","14157fd9":"code","469024cb":"code","43592cea":"code","46d88218":"code","d880ef0e":"code","05c0974b":"code","5d3f9722":"code","dfb1659b":"code","f5f206bd":"code","07668244":"code","d092fce0":"code","efdfd1ab":"code","3e8eb8fd":"code","0862f9cf":"code","5a9fdd1f":"code","35369bb0":"code","0d9509d4":"code","380eafdb":"code","b5060ada":"code","0e99a958":"code","3b0d2668":"code","dbb455b6":"code","1f5116d8":"code","b058781c":"code","2cab2ea2":"code","ff970e75":"code","778a10e2":"code","5775565b":"code","ed498ef3":"code","393570b9":"code","0385cdec":"code","08c62ad3":"code","b0704d01":"code","309afe6e":"code","0cad0bb6":"code","e45a3bfb":"code","cc5e58bb":"code","56df6ae3":"code","e7864bcb":"code","44e2055c":"code","72b77ee3":"code","48bb6c38":"code","257d9f6d":"code","0dc1d715":"code","e9e0fbe8":"code","9507c1cb":"code","3f655e04":"code","0fece936":"code","4e57b4d3":"code","e1c0f8ec":"code","74644f34":"code","613b554f":"code","629e0428":"code","53af9b80":"code","1a3b6e4c":"markdown","50c94dd9":"markdown","7455297b":"markdown","c8cc3780":"markdown","2c766cf9":"markdown","b96dd72c":"markdown","fedc124b":"markdown","0ab3792c":"markdown","df55fb75":"markdown","16e0fd8f":"markdown","658ccdf5":"markdown","7c08e110":"markdown","5d8f61bb":"markdown","3da71a1d":"markdown","ed6f9412":"markdown","82098ad0":"markdown","a09f2972":"markdown","c13b2f7c":"markdown","874ecbff":"markdown","67726c47":"markdown","87a2d4ef":"markdown","4a0dfe4e":"markdown","05930a0c":"markdown","e487ad36":"markdown","0fee514e":"markdown","d9a10ff8":"markdown","03257d4a":"markdown","0cf02f0f":"markdown","523d8091":"markdown","d8fbb7f3":"markdown","3c90425b":"markdown","35397055":"markdown","be819109":"markdown","a9d99135":"markdown","95ee4499":"markdown","58c52e7b":"markdown","5376e632":"markdown","680245a2":"markdown","bb8715cb":"markdown","b3c9ab0e":"markdown","5cc2949a":"markdown","e96b7233":"markdown","f1f3fb83":"markdown"},"source":{"ddf016f7":"pip install surprise","8bfe6baa":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\n# used to supress display of warnings\nimport warnings\n\nimport missingno as mno\n\nfrom sklearn.model_selection import train_test_split\nfrom scipy.sparse.linalg import svds\n\nfrom surprise import Dataset,Reader\nfrom surprise import SVD, KNNWithMeans\nfrom surprise import accuracy","61704c53":"# suppress display of warnings\nwarnings.filterwarnings('ignore')\n\n# display all dataframe columns\npd.options.display.max_columns = None\n\n# to set the limit to 3 decimals\npd.options.display.float_format = '{:.7f}'.format\n\n# display all dataframe rows\npd.options.display.max_rows = None","6df65a2d":"# Reading Amazon electronics ratings data\nele_ratings_df = pd.read_csv(\"..\/input\/amazon-electronic-product-recommendation\/ratings_Electronics (1).csv\")","f81bd5d7":"# Get the top 5 rows\nele_ratings_df.head()","e10ea5d2":"# Get the shape of electronics ratings data\nele_ratings_df.shape","2b8c2d4f":"print(\"Number of rows = {0} and Number of Columns = {1} in Data frame\".format(ele_ratings_df.shape[0],ele_ratings_df.shape[1]))","84b89040":"# Taking 10% of the dataset\nele_ratings_df = ele_ratings_df.iloc[:782448,0:]","51b93a84":"# Check datatypes\nele_ratings_df.dtypes","4f5d6f91":"ele_ratings_df.rename(columns = {'AKM1MP6P0OYPR':'userId', '0132793040':'productId', '5.0':'ratings', \n                                 '1365811200':'timestamp',}, inplace = True)","6282a0de":"# Remove timestamp column\nele_ratings_df.drop(['timestamp'], axis = 1, inplace = True)","66f9c592":"# Check electronics ratings info\nele_ratings_df.info()","eccd086e":"# Get the top 5 rows\nele_ratings_df.head()","14157fd9":"# Check Duplicates\nele_ratings_df.duplicated().sum()","469024cb":"# Check the presence of missing values\nele_ratings_df.isnull().sum()","43592cea":"# Visualize missing values\nmno.matrix(ele_ratings_df, figsize = (10, 5));","46d88218":"# Check outliers \nnp.where(ele_ratings_df['ratings'] < 1)","d880ef0e":"# Check outliers\nele_ratings_df['ratings'].unique()","05c0974b":"# Summary statistics of 'rating' variable\nele_ratings_df.describe()","5d3f9722":"# Check the distribution of ratings \nwith sns.axes_style('white'):\n    g = sns.factorplot(\"ratings\", data=ele_ratings_df, aspect=2.0, kind='count');\n    g.set_ylabels(\"Total number of ratings\") ","dfb1659b":"# Count users based on ratings\nfor i in range(1,6):\n  print('Number of users who rated {0} ratings = {1}'.format(i, ele_ratings_df[ele_ratings_df['ratings'] == i].shape[0]))","f5f206bd":"# Number of unique user id and product id in the data\nprint('Number of unique USERS in Raw data = ', ele_ratings_df['userId'].nunique())\nprint('Number of unique PRODUCTS in Raw data = ', ele_ratings_df['productId'].nunique())","07668244":"# Top 10 users based on rating\nmost_rated_users = ele_ratings_df.groupby('userId').size().sort_values(ascending=False)[:10]\nmost_rated_users","d092fce0":"# Top 10 products based on rating\nmost_rated_products = ele_ratings_df.groupby('productId').size().sort_values(ascending=False)[:10]\nmost_rated_products","efdfd1ab":"users_count = ele_ratings_df.userId.value_counts()\nele_ratings_df_sample = ele_ratings_df[ele_ratings_df.userId.isin(users_count[users_count >= 50].index)]\nprint('Number of users who has given 50 or more number of ratings =', len(ele_ratings_df_sample))","3e8eb8fd":"# Number of unique user id and product id in the sample dataset\nprint('Number of unique USERS in sample dataset = ', ele_ratings_df_sample['userId'].nunique())\nprint('Number of unique PRODUCTS in sample dataset = ', ele_ratings_df_sample['productId'].nunique())","0862f9cf":"final_ratings_matrix = ele_ratings_df_sample.pivot(index = 'userId', columns ='productId', values = 'ratings')\nfinal_ratings_matrix.head()","5a9fdd1f":"#final_ratings_matrix = final_ratings_matrix.fillna(final_ratings_matrix.mean(axis=0))\nfinal_ratings_matrix = final_ratings_matrix.fillna(0)\nprint('Shape of final_ratings_matrix: ', final_ratings_matrix.shape)\n\ngiven_num_of_ratings = np.count_nonzero(final_ratings_matrix)\nprint('given_num_of_ratings = ', given_num_of_ratings)\n\npossible_num_of_ratings = final_ratings_matrix.shape[0] * final_ratings_matrix.shape[1]\nprint('possible_num_of_ratings = ', possible_num_of_ratings)\n\ndensity = (given_num_of_ratings\/possible_num_of_ratings)\ndensity *= 100\nprint ('density: {:4.2f}%'.format(density))","35369bb0":"# Matrix with one row per 'User' and one column per 'ProductId' for User-based CF\nfinal_ratings_matrix.head()","0d9509d4":"# Matrix with one row per 'Product' and one column per 'User' for Item-based CF\nfinal_ratings_matrix_T = final_ratings_matrix.transpose()\nfinal_ratings_matrix_T.head()","380eafdb":"# Split the data randomnly into train and test datasets into 70:30 ratio\ntrain_data, test_data = train_test_split(ele_ratings_df_sample, test_size = 0.3, random_state=123)\ntrain_data.head()","b5060ada":"print('Shape of training data: ',train_data.shape)\nprint('Shape of testing data: ',test_data.shape)","0e99a958":"# Count of userId for each unique product as recommendation score \ntrain_data_grouped = train_data.groupby('productId').agg({'userId': 'count'}).reset_index()\ntrain_data_grouped.rename(columns = {'userId': 'score'}, inplace=True)\ntrain_data_grouped.head(10)","3b0d2668":"# Sort the products on recommendation score \ntrain_data_sort = train_data_grouped.sort_values(['score', 'productId'], ascending = [0,1]) \n      \n# Generate a recommendation rank based upon score \ntrain_data_sort['rank'] = train_data_sort['score'].rank(ascending=0, method='first') \n          \n# Get the top 5 recommendations \npopularity_recommendations = train_data_sort.head() \npopularity_recommendations ","dbb455b6":"# Use popularity based recommender model to make predictions\ndef recommend(user_id):     \n    user_recommendations = popularity_recommendations \n          \n    #Add user_id column for which the recommendations are being generated \n    user_recommendations['userId'] = user_id \n      \n    #Bring user_id column to the front \n    cols = user_recommendations.columns.tolist() \n    cols = cols[-1:] + cols[:-1] \n    user_recommendations = user_recommendations[cols] \n          \n    return user_recommendations ","1f5116d8":"find_recom = [10,100,150]   # This list is user choice.\nfor i in find_recom:\n    print(\"The list of recommendations for the userId: %d\\n\" %(i))\n    print(recommend(i))    \n    print(\"\\n\") ","b058781c":"# Matrix with one row per 'User' and one column per 'ProductId' for User-based CF\nfinal_ratings_matrix.head()","2cab2ea2":"# Define user index from 0 to 10\nfinal_ratings_matrix['user_index'] = np.arange(0, final_ratings_matrix.shape[0], 1)\nfinal_ratings_matrix.head()","ff970e75":"final_ratings_matrix.set_index(['user_index'], inplace=True)\n\n# Actual ratings given by users\nfinal_ratings_matrix.head()","778a10e2":"# Singular Value Decomposition\nU, sigma, Vt = svds(final_ratings_matrix, k = 10)","5775565b":"print('Left singular vector matrix: \\n',U)","ed498ef3":"print('Sigma: \\n',sigma)","393570b9":"# Construct a diagonal matrix in SVD\nsigma = np.diag(sigma)\nprint('Diagonal matrix: \\n',sigma)","0385cdec":"print('Right singular vector matrix: \\n',Vt)","08c62ad3":"all_users_predicted_ratings = np.dot(np.dot(U, sigma), Vt) \n\n# Predicted ratings\nele_preds_ratings_df = pd.DataFrame(all_users_predicted_ratings, columns = final_ratings_matrix.columns)\nele_preds_ratings_df.head()","b0704d01":"# Recommend the items with the highest predicted ratings\ndef recommend_items(userId, final_ratings_matrix, ele_preds_ratings_df, num_recommendations):\n\n    # Index starts at 0\n    user_idx = userId-1\n    \n    # Get and sort the user's ratings\n    sorted_user_ratings = final_ratings_matrix.iloc[user_idx].sort_values(ascending=False)\n\n    # Sorted_user_ratings\n    sorted_user_predictions = ele_preds_ratings_df.iloc[user_idx].sort_values(ascending=False)\n\n    # Sorted_user_predictions\n    temp = pd.concat([sorted_user_ratings, sorted_user_predictions], axis=1)\n    temp.index.name = 'Recommended Items'\n    temp.columns = ['user_ratings', 'user_predictions']\n    temp = temp.loc[temp.user_ratings == 0]\n    temp = temp.sort_values('user_predictions', ascending=False)\n    \n    print('\\nBelow are the recommended items for user(user_id = {}):\\n'.format(userId))\n    print(temp.head(num_recommendations))","309afe6e":"# Enter the 'userId' and 'num_recommendations' for the user 5\nuserId = 5\nnum_recommendations = 5\nrecommend_items(userId, final_ratings_matrix, ele_preds_ratings_df, num_recommendations)","0cad0bb6":"# Enter the 'userId' and 'num_recommendations' for the user 20\nuserId = 20\nnum_recommendations = 5\nrecommend_items(userId, final_ratings_matrix, ele_preds_ratings_df, num_recommendations)","e45a3bfb":"# Enter the 'userId' and 'num_recommendations' for the user 25\nuserId = 25\nnum_recommendations = 5\nrecommend_items(userId, final_ratings_matrix, ele_preds_ratings_df, num_recommendations)","cc5e58bb":"# Actual ratings given by the users\nfinal_ratings_matrix.head()","56df6ae3":"# Average ACTUAL rating for each item\nfinal_ratings_matrix.mean().head()","e7864bcb":"# Predicted ratings \nele_preds_ratings_df.head()","44e2055c":"# Average PREDICTED rating for each item\nele_preds_ratings_df.mean().head()","72b77ee3":"rmse_df = pd.concat([final_ratings_matrix.mean(), ele_preds_ratings_df.mean()], axis=1)\nrmse_df.columns = ['Avg_actual_ratings', 'Avg_predicted_ratings']\nprint(rmse_df.shape)\nrmse_df['item_index'] = np.arange(0, rmse_df.shape[0], 1)\nrmse_df.head()","48bb6c38":"RMSE = round((((rmse_df.Avg_actual_ratings - rmse_df.Avg_predicted_ratings) ** 2).mean() ** 0.5), 10)\nprint('\\nRMSE of SVD Model = {} \\n'.format(RMSE))","257d9f6d":"# Enter the 'userId' and 'num_recommendations' for the user 5\nuserId = 5\nnum_recommendations = 5\nrecommend_items(userId, final_ratings_matrix, ele_preds_ratings_df, num_recommendations)","0dc1d715":"# Enter the 'userId' and 'num_recommendations' for the user 20\nuserId = 20\nnum_recommendations = 5\nrecommend_items(userId, final_ratings_matrix, ele_preds_ratings_df, num_recommendations)","e9e0fbe8":"# Enter the 'userId' and 'num_recommendations' for the user 25\nuserId = 25\nnum_recommendations = 5\nrecommend_items(userId, final_ratings_matrix, ele_preds_ratings_df, num_recommendations)","9507c1cb":"reader = Reader(rating_scale=(1, 5))\ndata = Dataset.load_from_df(ele_ratings_df_sample[['userId', 'productId', 'ratings']], reader)","3f655e04":"# Split data into train and test\nfrom surprise.model_selection import train_test_split\ntrainset, testset = train_test_split(data, test_size=.30, random_state=123)","0fece936":"# Fit the model on Training set\nsvd_model = SVD(n_factors=10, biased=False)\nsvd_model.fit(trainset)","4e57b4d3":"# Evaluation of the model or Validate Training model on Test set\n\n# Predict on Test set\nsvd_test_pred = svd_model.test(testset)","e1c0f8ec":"# Compute RMSE\naccuracy.rmse(svd_test_pred)","74644f34":"# Fit the model on Training set\nknn_model = KNNWithMeans(k=10, sim_options={'user_based': True})\nknn_model.fit(trainset)","613b554f":"# Evaluation of the model or Validate Training model on Test set\n\n# Predict on Test set\nknn_test_pred = knn_model.test(testset)\n\n# Compute RMSE\naccuracy.rmse(knn_test_pred)","629e0428":"uid = \"A11D1KHM7DVOQK\"  # raw user id (as in the ratings file). They are **strings**!\niid = \"B000001OMN\"  # raw item id (as in the ratings file). They are **strings**!\n\n# get a prediction for specific users and items.\npred = knn_model.predict(uid, iid, r_ui=0.0, verbose=True)","53af9b80":"pred = pd.DataFrame(knn_test_pred)\npred[pred['uid'] == \"A11D1KHM7DVOQK\"][['iid', 'r_ui','est']].sort_values(by = 'r_ui', ascending = False).head(10)","1a3b6e4c":"<p style = \"font-size:20px; color: #007580 \"><strong> Data type of each attribute <\/strong><\/p>","50c94dd9":"<a id = '1.0'><\/a>\n<h2 style = \"font-size:35px; font-family:Garamond ; font-weight : normal; background-color: #007580; color :#fed049   ; text-align: center; border-radius: 5px 5px; padding: 5px\"> 1. Overview <\/h2>","7455297b":"* Since, it is a Collaborative recommender model, so all the three users are given different recommendations based on users past behaviour.","c8cc3780":"**As this is a sparse matrix, SVD is best to apply on large sparse matrix.**","2c766cf9":"<a id = '6.4'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 6.4 SVD Based Recommendation System using scipy library <\/strong><\/p> ","b96dd72c":"<a id = '4.1'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 4.1 Check Duplicates <\/strong><\/p>","fedc124b":"<a id = '5.0'><\/a>\n<h2 style = \"font-size:35px; font-family:Garamond ; font-weight : normal; background-color: #007580; color :#fed049   ; text-align: center; border-radius: 5px 5px; padding: 5px\"> 5. EDA (Data Analysis and Preparation) <\/h2>","0ab3792c":"<a id = '6.9'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 6.9 Generating top n recommendations <\/strong><\/p> ","df55fb75":"<a id = '4.4'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 4.4 Data Cleaning Summary <\/strong><\/p>","16e0fd8f":"<a id = '5.1'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 5.1 Check the distribution of ratings - Ratings are on scale of 1-5 <\/strong><\/p>","658ccdf5":"<p style = \"font-size:30px; color: #007580 ;background-color:  ; text-align: left; border-radius: 5px 5px; padding: 5px\" ><strong> Here are my other notebooks, please have a look and definitely you will find it useful. Happy reading \ud83d\ude42<\/strong><\/p>\n<ol>\n<li><a href =\"https:\/\/www.kaggle.com\/vinayakshanawad\/industrial-safety-complete-solution\">Industrial Safety - Complete Solution<\/a><\/li>\n<li><a href =\"https:\/\/www.kaggle.com\/vinayakshanawad\/eda-statistical-analysis-hypothesis-testing\">EDA - Statistical Analysis - Hypothesis Testing<\/a><\/li>\n<li><a href =\"https:\/\/www.kaggle.com\/vinayakshanawad\/random-forest-with-bootstrap-sampling-for-beginner\">Random Forest with Bootstrap Sampling for beginner<\/a><\/li>\n<\/ol>","7c08e110":"<a id = '7.0'><\/a>\n<h2 style = \"font-size:35px; font-family:Garamond ; font-weight : normal; background-color: #007580; color :#fed049   ; text-align: center; border-radius: 5px 5px; padding: 5px\"> 7. Conclusion <\/h2> \n\n1. The Popularity-based recommender system is a non-personalised recommender system and these are based on frequecy counts, which may be not suitable to the user. We can see the difference above for the user id 5, 10 & 15, The Popularity based model has recommended the same set of 5 products to both but Collaborative Filtering based model has recommended entire different list based on the user past purchase history.\n\n2. Model-based Collaborative Filtering is a personalised recommender system, the recommendations are based on the past behavior of the user and it is not dependent on any additional information.\n\n3. RMSE value of SVD Based Recommendation System using scipy library is 0.0812179913 and it is overfit Recommender model. Hence I tried with below options.\n\n4. RMSE value of SVD Based Recommendation System using Surprise library is 1.7348 which proves that SVD model using scipy library is overfit model.\n\n5. RMSE value of Recommendation System using KNNWithMeans is 1.1776 which is better than SVD models hence I could have tried cross validation and improve the accuracy.\n\n<p style = \"font-size:30px; color: #007580 \"><strong> Thanks for reading \ud83d\ude42<\/strong><\/p>","5d8f61bb":"<a id = '6.5'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 6.5 Evaluate the Collaborative recommender model <\/strong><\/p> \n\n(Once the model is trained on the training data, it\ncan be used to compute the error (like RMSE) on predictions made on the test\ndata.) You can also use a different method to evaluate the models.","3da71a1d":"**As mentioned in data description, frst three columns are userId, productId, and ratings and the fourth column is timestamp. We can discard the timestamp column as in this case you may not need to use it.**","ed6f9412":"<a id = '0'><\/a>\n<h2 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #007580; color : #fed049; border-radius: 5px 5px; text-align:center; font-weight: bold\" >Table of Contents<\/h2> \n\n1. [Overview](#1.0)\n2. [Import the necessary libraries](#2.0)\n3. [Data Collection](#3.0)\n4. [Data Cleaning](#4.0)\n\t- [4.1 Check Duplicates](#4.1)\n\t- [4.2 Check Missing Values](#4.2)\n\t- [4.3 Check Outliers](#4.3)\n\t- [4.4 Data Cleaning Summary](#4.4)\n5. [EDA (Data Analysis and Preparation)](#5.0)\n\t- [5.1 Check the distribution of ratings - Ratings are on scale of 1-5](#5.1)\n\t- [5.2 Take a subset of the dataset to make it less sparse\/ denser](#5.2)\n\t- [5.3 Calculate the density of the rating matrix](#5.3)\n6. [Model Building and Validation](#6.0)\n\t- [6.1 Sampling Techniques - Create Training and Test Set](#6.1)\n\t- [6.2 Build Popularity Recommender model](#6.2)\n\t- [6.3 Build User Based Collaborative Filtering model](#6.3)\n\t- [6.4 SVD Based Recommendation System using scipy library](#6.4)\n    - [6.5 Evaluate the Collaborative recommender model](#6.5)\n    - [6.6 Getting top - K ( K = 5) recommendations](#6.6)\n    - [6.7 SVD Based Recommendation System using Surprise library](#6.7)\n    - [6.8 KNNWithMeans](#6.8)\n    - [6.9 Generating top n recommendations](#6.9)\n7. [Conclusion](#7.0)","82098ad0":"<p style = \"font-size:20px; color: #007580 \"><strong> Shape of the data <\/strong><\/p> ","a09f2972":"<p style = \"font-size:20px; color: #007580 \"><strong> Remove timestamp column as in this case it is not required for analysis <\/strong><\/p>","c13b2f7c":"* Since the data is very big. Consider ele_ratings_df named dataframe with  first 10% of data which contains 782448 rows and all columns from 0 of dataset.","874ecbff":"**Since, it is a Popularity recommender model, so all the three users are given the same recommendations. Here, we predict the products based on the popularity. It is not personalized to particular user. It is a non-personalized recommender system.**","67726c47":"<a id = '6.8'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 6.8 KNNWithMeans <\/strong><\/p> ","87a2d4ef":"<p style = \"font-size:20px; color: #007580 \"><strong> Rename the columns <\/strong><\/p>","4a0dfe4e":"<a id = '6.6'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 6.6 Getting top - K ( K = 5) recommendations <\/strong><\/p> ","05930a0c":"<a id = '4.3'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 4.3 Check Outliers <\/strong><\/p>\n\nAs we know, cold start problems can be outliers in recommender systems which means neither there is a new user who has not purchased any of the products or not rated any products nor there is a new product which is not purchased by any user or not received any ratings.","e487ad36":"<a id = '4.0'><\/a>\n<h2 style = \"font-size:35px; font-family:Garamond ; font-weight : normal; background-color: #007580; color :#fed049   ; text-align: center; border-radius: 5px 5px; padding: 5px\"> 4. Data Cleaning <\/h2>","0fee514e":"1. No duplicates in this dataset.\n2. No outliers (cold start problems) in this dataset.\n3. No missing values in this dataset.\n4. Dropped timestamp column as this is not required for analysis.","d9a10ff8":"<a id = '3.0'><\/a>\n<h2 style = \"font-size:35px; font-family:Garamond ; font-weight : normal; background-color: #007580; color :#fed049   ; text-align: center; border-radius: 5px 5px; padding: 5px\"> 3. Data Collection <\/h2>","03257d4a":"#### Setting Options","0cf02f0f":"### Objective:\n\n**To make a recommendation system that recommends at least five(5) new products based on the user's habits.**","523d8091":"<a id = '6.1'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 6.1 Sampling Techniques - Create Training and Test Set <\/strong><\/p> ","d8fbb7f3":"**As sigma is not a diagonal matrix we have to convert it into diagonal matrix.**","3c90425b":"<a id = '5.3'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 5.3 Calculate the density of the rating matrix <\/strong><\/p>","35397055":"<a id = '6.3'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 6.3 Build User Based Collaborative Filtering model <\/strong><\/p> ","be819109":"### Data Description:\n\nData columns- First three columns are userId, productId, and ratings and the fourth\ncolumn is timestamp. You can discard the timestamp column as in this case you may\nnot need to use it.","a9d99135":"### Source:\n\nAmazon Reviews data (http:\/\/jmcauley.ucsd.edu\/data\/amazon\/) The\nrepository has several datasets. For this case study, we are using the Electronics\ndataset.","95ee4499":"<a id = '6.7'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 6.7 SVD Based Recommendation System using Surprise library <\/strong><\/p> ","58c52e7b":"<a id = '6.0'><\/a>\n<h2 style = \"font-size:35px; font-family:Garamond ; font-weight : normal; background-color: #007580; color :#fed049   ; text-align: center; border-radius: 5px 5px; padding: 5px\"> 6. Model Building and Validation <\/h2> ","5376e632":"<br>\n<h2 style = \"font-size:40px; font-family:Garamond ; font-weight : normal; background-color: #007580; color :#fed049   ; text-align: center; border-radius: 5px 5px; padding: 5px\"> Amazon Electronics - Recommender System<\/h2> \n<br>","680245a2":"<a id = '2.0'><\/a>\n<h2 style = \"font-size:35px; font-family:Garamond ; font-weight : normal; background-color: #007580; color :#fed049   ; text-align: center; border-radius: 5px 5px; padding: 5px\"> 2. Import the necessary libraries <\/h2> ","bb8715cb":"<a id = '4.2'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 4.2 Check Missing Values <\/strong><\/p>","b3c9ab0e":"* **KNNWithMeans gave better results compared to SVD models**\n\n* We can try Cross validation and improve accuracy","5cc2949a":"<a id = '6.2'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 6.2 Build Popularity Recommender model <\/strong><\/p> ","e96b7233":"<a id = '5.2'><\/a>\n<p style = \"font-size:20px; color: #007580 \"><strong> 5.2 Take a subset of the dataset to make it less sparse\/ denser <\/strong><\/p>\n<p style = \"font-size:20px; color: #007580 \"><strong> For example, keep the users only who has given 50 or more number of ratings <\/strong><\/p>","f1f3fb83":"### Domain: E-commerce\n\n### Context:\n\nEveryday a million products are being recommended to users based on\npopularity and other metrics on e-commerce websites. The most popular e-commerce\nwebsite boosts average order value by 50%, increases revenues by 300%, and\nimproves conversion. In addition to being a powerful tool for increasing revenues,\nproduct recommendations are so essential that customers now expect to see similar\nfeatures on all other eCommerce sites."}}