{"cell_type":{"99c45d5e":"code","cb0c0395":"code","063e0e5f":"code","e8d2436d":"code","7bcd95ba":"code","00925019":"code","4011deba":"code","95e339df":"code","c0660456":"code","e325af59":"code","8e3d0b40":"code","285e2a43":"code","4159f1bc":"code","928c01a2":"code","4c72a977":"code","6703c0c3":"code","162f11f9":"code","c4abaa37":"code","85db648d":"code","8a0b84b7":"code","805249e4":"code","ba0275e5":"code","dc70ac78":"markdown","adecb5c1":"markdown","19f42370":"markdown","a4999b32":"markdown","d9e71c95":"markdown","6761c31f":"markdown","366ee6c4":"markdown"},"source":{"99c45d5e":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport scipy.stats as stats\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn import metrics\nimport os\n\ndf = pd.read_csv('\/kaggle\/input\/ramen-ratings\/ramen-ratings.csv')\ndf.head()\n\n","cb0c0395":"df.shape #","063e0e5f":"df.describe()","e8d2436d":"df = df.drop('Top Ten',axis=1) #\u0414\u0440\u043e\u043f\u0430\u0435\u043c \u0442\u043e\u043f-10 \u0442.\u043a. \u0442\u0430\u043c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","7bcd95ba":"df.isnull().sum() # \u041d\u0430\u0439\u0434\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","00925019":"df[df['Style'].isnull()]","4011deba":"# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u043e\u043b\u0435 Style\ndf.loc[2442,'Style'] = 'Bowl'  \ndf.loc[2152,'Style'] = 'Pack'  ","95e339df":"df['Variety'].value_counts().head(10).plot(kind='bar')","c0660456":"df['Stars'].value_counts()","e325af59":"# \u0415\u0441\u0442\u044c 3 Unrated \u043f\u043e\u0437\u0438\u0446\u0438\u0438. \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e \u0437\u0430\u043c\u0435\u043d\u0435\u0435 Unrated \u043d\u0430 0\ndef unrated_to_zero(df):\n    df.loc[df['Stars'] == 'Unrated'] = 0 \n    return df\n\nunrated_to_zero(df)\ndf['Stars'].value_counts()","8e3d0b40":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e Style \u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n\ndf = df.drop([32,122,993], axis = 0)\ndf['Style'].value_counts()\n","285e2a43":"from sklearn import preprocessing\ndata = df.apply(preprocessing.LabelEncoder().fit_transform)\ndata.head()","4159f1bc":"data['Style'].value_counts()","928c01a2":"data['Category'] = [0 if x == 5 else 1 for x in data['Style']] \n  \n# Print the DataFrame \nprint(data.head()) ","4c72a977":"from sklearn.model_selection import train_test_split\ndf=data.drop('Style',axis= 1)\nX=df.drop('Category',axis=1)\ny=df['Category']\n\ndfx=X\ndfy=y\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=425)","6703c0c3":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train,y_train)","162f11f9":"y_pred_lr = classifier.predict(X_test)\ncm = confusion_matrix(y_true=y_test,y_pred=y_pred_lr)","c4abaa37":"# \u0424\u0443\u043d\u0446\u043a\u0438\u044f \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u043d\u0430 \u043f\u0435\u0447\u0430\u0442\u044c \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043c\u043e\u0434\u0435\u043b\u0438\ndef LR_report():\n    print('\\033[1m' +'Logistic Regression report')\n    print('\\033[0m')\n    print('Confusion Matrix for LR\\n',cm)\n    print('')\n    print('Accuracy score:', accuracy_score(y_test,y_pred_lr))\n    print('')\n    print('Classification report:')\n    print(classification_report(y_test,y_pred_lr))\n    print('')\n    print('')\nLR_report()\n","85db648d":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors= 12)\nclassifier.fit(X_train,y_train)\n\ny_pred_k = classifier.predict(X_test)\ncm_kn = confusion_matrix(y_true=y_test,y_pred=y_pred_k)\nacc_sc_kn = accuracy_score(y_test,y_pred_k)\npr_sc_kn = metrics.precision_score(y_test,y_pred_k,average='macro')\nrecall_kn = metrics.recall_score(y_test,y_pred_k,average='macro')","8a0b84b7":"def k_neigh_report():\n    print('\\033[1m' + 'K Neighbors Classifier report')\n    print('\\033[0m')\n    print('Confusion Matrix \\n',cm_kn)\n    print('')\n    print('Accuracy score:', acc_sc_kn)\n    print('')\n    print('Precision score:', pr_sc_kn)\n    print('')\n    print('Recall score:', recall_kn)\n    print('')\n    print('')\n    \nk_neigh_report()","805249e4":"from sklearn.naive_bayes import GaussianNB\nmodel = GaussianNB()\nmodel.fit(X_train,y_train)\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\ncm_nb = confusion_matrix(y_true=y_test,y_pred=y_pred)\n\n\ndef naive_bayes_report():\n    print('\\033[1m' +'Naive Bayes report')\n    print ('\\033[0m')\n    print('Confusion Matrix \\n',cm_nb)\n    print('')\n    print('Accuracy score:', accuracy_score(y_test,y_pred))\n    print('')\n    print('Precision score:', metrics.precision_score(y_test,y_pred,average='macro'))\n    print('')\n    print('Recall score:', metrics.recall_score(y_test,y_pred,average='macro'))\n    print('')\n    print('')\nnaive_bayes_report()\n","ba0275e5":"def reports():\n    LR_report()\n    k_neigh_report()\n    naive_bayes_report()\n    \nreports()","dc70ac78":"# \u041d\u0430\u0438\u0432\u043d\u044b\u0439 \u0431\u0430\u0439\u0435\u0441\u043e\u0432\u0441\u043a\u0438\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440","adecb5c1":"# \u041f\u0435\u0440\u0435\u0448\u0438\u0442\u043e\u0432 \u041a\u0438\u0440\u0438\u043b\u043b \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447","19f42370":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0444\u043e\u043c\u0430\u043d\u0441\u0430 \u0432\u0441\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","a4999b32":"# \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f","d9e71c95":"# \u041c\u0435\u0442\u043e\u0434 k-\u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439","6761c31f":"# EDA","366ee6c4":"\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443"}}