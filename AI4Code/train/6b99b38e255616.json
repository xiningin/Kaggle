{"cell_type":{"c79f24e5":"code","62f50ef9":"code","b07c9792":"code","b06a5e23":"code","7d537b16":"code","4ee3036c":"code","39510f76":"code","02942aa8":"code","a8f6b182":"code","f0cabd08":"code","a5e40fba":"code","a0ddd364":"code","b3d81176":"code","3bde599e":"code","213ea61c":"code","64780fe2":"code","60e94f2c":"code","5a88c5a0":"code","448b0e44":"code","9192c584":"code","5cf58e2a":"code","b40e5783":"markdown","f43b7976":"markdown","59128b25":"markdown","7dda05de":"markdown","3e32aca8":"markdown","32e2942a":"markdown","748aef47":"markdown","99dfa9f3":"markdown"},"source":{"c79f24e5":"#load all need labraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport pandas as pd\n%matplotlib inline","62f50ef9":"#load dataset\ndata = pd.read_csv('..\/input\/diabetes.csv')","b07c9792":"#shape of data\ndata.shape","b06a5e23":"#let's some data\ndata.head()","7d537b16":"#see the type of all attributes\ndata.info()","4ee3036c":"#describe\ndata.describe()","39510f76":"#check the group by values\ndata['Outcome'].value_counts()","02942aa8":"#plot the outcome values\nsb.countplot(x='Outcome', data=data)\nplt.show()","a8f6b182":"#Histogram\ndata.hist(figsize=(12, 8))\nplt.show()","f0cabd08":"#corralation between each column\ncorr = data.corr()\nplt.figure(figsize=(12, 7))\nsb.heatmap(corr, annot=True)","a5e40fba":"#Boxplot of each column\ndata.plot(kind='box', figsize=(12, 8), subplots=True, layout=(3, 3))\nplt.show()","a0ddd364":"cols = data.columns[:8]\nfor item in cols:\n    plt.figure(figsize=(10, 8))\n    plt.title(str(item) + ' With' + ' Outcome')\n    sb.violinplot(x=data.Outcome, y=data[item], data=data)\n    plt.show()","b3d81176":"#pair plot of each attributes\nsb.pairplot(data, size=3, hue='Outcome', palette='husl',)\nplt.show()","3bde599e":"#let's seprate the data \nX = data.iloc[:, :8].values\ny = data.iloc[:, 8].values #target variable","213ea61c":"#standarize the data of X\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaler = scaler.fit_transform(X)","64780fe2":"#Split the into train and test\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nX_train, X_test, y_train, y_test = train_test_split(X_scaler, y, test_size=0.2, random_state=10)","60e94f2c":"from sklearn import linear_model\n\n#apply algorithm\nmodel = linear_model.LogisticRegression()\n\n#fiting the model\nmodel.fit(X_train, y_train)\n\n#prediction\ny_pred = model.predict(X_test)\n\n#accuracy\nprint(\"Accuracy -- >\", model.score(X_test, y_test)*100)\n\n#plot the confusion matrix\nsb.set(font_scale=1.5)\ncm = confusion_matrix(y_pred, y_test)\nsb.heatmap(cm, annot=True, fmt='g')\nplt.show()","5a88c5a0":"from sklearn.ensemble import RandomForestClassifier\n\n#apply algorithm\nmodel = RandomForestClassifier(n_estimators=1000)\n\n#fiting the model\nmodel.fit(X_train, y_train)\n\n#prediction\ny_pred = model.predict(X_test)\n\n#accuracy\nprint(\"Accuracy -- >\", model.score(X_test, y_test)*100)\n\n#plot the confusion matrix\nsb.set(font_scale=1.5)\ncm = confusion_matrix(y_pred, y_test)\nsb.heatmap(cm, annot=True, fmt='g')\nplt.show()","448b0e44":"from sklearn.svm import SVC\n\n#applying algorithm\nmodel = SVC(gamma=0.01)\n\n#fiting the model\nmodel.fit(X_train, y_train)\n\n#prediction\ny_pred = model.predict(X_test)\n\n#accuracy\nprint(\"Accuracy -- >\", model.score(X_test, y_test)*100)\n\n#plot the confusion matrix\nsb.set(font_scale=1.5)\ncm = confusion_matrix(y_pred, y_test)\nsb.heatmap(cm, annot=True, fmt='g')\nplt.show()","9192c584":"from sklearn.neighbors import KNeighborsClassifier\n\n#applying algorithm\nmodel = KNeighborsClassifier(n_neighbors=20)\n\n#fiting the model\nmodel.fit(X_train, y_train)\n\n#prediction\ny_pred = model.predict(X_test)\n\n#accuracy\nprint(\"Accuracy -- >\", model.score(X_test, y_test)*100)\n\n#plot the confusion matrix\nsb.set(font_scale=1.5)\ncm = confusion_matrix(y_pred, y_test)\nsb.heatmap(cm, annot=True, fmt='g')\nplt.show()","5cf58e2a":"from sklearn.ensemble import GradientBoostingClassifier\n\n#apply algorithm\nmodel = GradientBoostingClassifier()\n\n#fiting the model\nmodel.fit(X_train, y_train)\n\n#prediction\ny_pred = model.predict(X_test)\n\n#accuracy\nprint(\"Accuracy -- >\", model.score(X_test, y_test)*100)\n\n#plot the confusion matrix\nsb.set(font_scale=1.5)\ncm = confusion_matrix(y_pred, y_test)\nsb.heatmap(cm, annot=True, fmt='g')\nplt.show()","b40e5783":"#### Here, target variable is Outcome column.","f43b7976":"## Apply the algorithm for prediction","59128b25":"#### K Nearest Neighbors","7dda05de":"#### Support Vectore Machine","3e32aca8":"## Let's some visualization of this dataset","32e2942a":"#### Random Forest","748aef47":"#### Gradient Boosting Classifier","99dfa9f3":"#### Logistic Regression"}}