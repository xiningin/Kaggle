{"cell_type":{"ec7ee747":"code","0a57f087":"code","b200b016":"code","03ff3b97":"code","adc7bda3":"code","56548cde":"code","98383c46":"code","e3d7b970":"code","e4d7dec1":"code","bf6bfd5b":"code","9a0ff278":"code","df183fb6":"code","ae6f035f":"code","1000c12f":"code","d495c783":"code","ae1c2938":"code","20c43732":"code","5b9d36e5":"code","afc0eb3b":"code","756e208a":"code","27b84b90":"code","4e00f52f":"code","392ec550":"code","97708139":"code","33362537":"code","6bcbf456":"code","ffdaebb1":"code","030c1a3b":"code","b30d71f2":"code","5478f56b":"code","7f6114dc":"code","492f6e3a":"code","1215b551":"code","49a50fda":"code","7b012d06":"code","352cba97":"code","6b8966ab":"code","7c824eef":"code","9db13384":"code","b29108d0":"code","29f39d3b":"code","3ab88027":"code","3172ba0f":"code","217e3f97":"code","ed74e67b":"code","cb265b33":"code","acdc3e29":"code","d21db9a2":"code","a539dea2":"code","1e548dd2":"code","8d62f98a":"code","230d1995":"code","1fd673e6":"code","6b96b966":"code","7d449803":"code","95cee4cf":"code","06eeee66":"code","814fd66c":"markdown","b1b53e64":"markdown","a374d7da":"markdown","ceaf2c82":"markdown","ce09fcef":"markdown","b961ba3f":"markdown","4f5d8ead":"markdown","8f98bf2a":"markdown","4dd9fd4c":"markdown","4d89ed20":"markdown","bc1749b9":"markdown","634ed5ed":"markdown","8ce1732c":"markdown","0153983d":"markdown","5c171940":"markdown","d5eddc1f":"markdown","ef1a4a84":"markdown","f2b0e042":"markdown","5d93f993":"markdown","fe2fba65":"markdown","e4f96021":"markdown","65923f7a":"markdown","bf5651fa":"markdown"},"source":{"ec7ee747":"class car(): # Classes can be defined with class keyword, you can give spesific names to it.\n    pass","0a57f087":"type(car)","b200b016":"car","03ff3b97":"car()","adc7bda3":"class Car: # Car class with brand and age properties\n    def __init__(self, brand, age):\n        self.brand = brand\n        self.age = age","56548cde":"class Car: \n    # Class attribute\n    number_of_door = 4 #This class is spesific for 4-door cars\n    \n    def __init__(self, brand, age):\n        self.brand = brand\n        self.age = age","98383c46":"Car.number_of_door","e3d7b970":"class Car: \n    pass","e4d7dec1":"Car() # This code is a memory address that indicates where the Car object is stored in your computer\u2019s memory. ","bf6bfd5b":"car1 = Car() # We can assign car object","9a0ff278":"car1","df183fb6":"class Car: \n    # Class attribute\n    number_of_door = 4 #This class is spesific for 4-door cars\n    \n    def __init__(self, brand, age):\n        self.brand = brand\n        self.age = age","ae6f035f":"car1 = Car(\"Audi\",9)","1000c12f":"car1","d495c783":"car1.age # Reaching property of an object","ae1c2938":"car1.brand","20c43732":"car1.number_of_door # You can access class attributes the same way","5b9d36e5":"car2 = Car(\"Volvo\",3)","afc0eb3b":"car2","756e208a":"car2.brand","27b84b90":"car2.age = 6 # Values of objects can be changed","4e00f52f":"car2.age","392ec550":"car3 = Car(\"Renault\",7)","97708139":"car3.age","33362537":"car3.number_of_door= 2","6bcbf456":"car3.number_of_door","ffdaebb1":"class Car: \n    # Class attribute\n    number_of_door = 4 #This class is spesific for 4-door cars\n    \n    def __init__(self, brand, age,model,color): # init is a dunder method because of __ at beginning and end\n        self.brand = brand\n        self.age = age\n        self.model = model \n        self.color = color\n    \n    # Instance(Object) method\n    def change_color(self,new_color):\n        self.color = new_color","030c1a3b":"dir(Car) # We can see the method here","b30d71f2":"car1 = Car(\"Dacia\",4,\"Duster\",\"Blue\")","5478f56b":"car1","7f6114dc":"car1.age","492f6e3a":"car1.color","1215b551":"car1.change_color(\"Red\")","49a50fda":"car1.color","7b012d06":"class Car: \n    # Class attribute\n    number_of_door = 4 #This class is spesific for 4-door cars\n    \n    def __init__(self, brand, age,model,color): # init is a dunder method because of __ at beginning and end\n        self.brand = brand\n        self.age = age\n        self.model = model \n        self.color = color\n    \n    # Instance(Object) method\n    def change_color(self,new_color):\n        self.color = new_color","352cba97":"car1= Car(\"Lotus\",3,\"AA\",\"Purple\") #This is Racecar in normal\ncar2= Car(\"Rover\",7,\"Stepway\",\"Red\") #This is SUV in normal\ncar3= Car(\"Fiat\",6,\"A5\",\"Green\") #This is compact in normal","6b8966ab":"class RaceCar(Car): \n    pass\nclass SUV(Car):\n    pass\nclass Compact(Car):\n    pass","7c824eef":"lotus = RaceCar(\"Lotus\",3,\"AA\",\"Purple\")\njeep = SUV(\"Jeep\",7,\"A4GG\",\"Red\")\nfiat= Compact(\"Fiat\",6,\"A5\",\"Green\") ","9db13384":"type(lotus)","b29108d0":"lotus.number_of_door","29f39d3b":"lotus.color","3ab88027":"isinstance(lotus,Car)","3172ba0f":"isinstance(jeep,Car)","217e3f97":"isinstance(lotus,SUV)","ed74e67b":"class Car: \n    # Class attribute\n    number_of_door = 4 #This class is spesific for 4-door cars\n    \n    def __init__(self, brand, age,model,color): # init is a dunder method because of __ at beginning and end\n        self.brand = brand\n        self.age = age\n        self.model = model \n        self.color = color\n    \n    # Instance(Object) method\n    def change_color(self,new_color):\n        self.color = new_color","cb265b33":"class RaceCar(Car): \n    def change_color(self,new_color=\"Red\"):\n        self.color = new_color","acdc3e29":"lotus = RaceCar(\"Lotus\",3,\"AA\",\"Purple\")","d21db9a2":"lotus.change_color()","a539dea2":"lotus.color # Color changed","1e548dd2":"lotus.change_color(\"White\")","8d62f98a":"lotus.color","230d1995":"class Car: \n    # Class attribute\n    number_of_door = 4 #This class is spesific for 4-door cars\n    \n    def __init__(self, brand,color): # init is a dunder method because of __ at beginning and end\n        self.brand = brand\n        self.color = color\n    \n    # Instance(Object) method\n    def change_color(self,new_color):\n        self.color = new_color","1fd673e6":"class RaceCar(Car): \n    \n    def __init__(self, brand, color,size):\n        super().__init__(brand, color)\n        self.size=size\n    \n    def change_color(self,new_color):\n        self.color = new_color","6b96b966":"lotus = RaceCar(\"Lotus\",\"Purple\",312)","7d449803":"lotus.size","95cee4cf":"lotus.change_color(\"Blue\")","06eeee66":"lotus.color","814fd66c":"## Overriding - Extending the Functionality of a Parent Class\n\nSince different car types have slightly different colors, you want to provide a default value for the color argument of their respective .change_color() methods. To do this, you need to override .change_color() in the class definition for each car type. It is **overriding.**","b1b53e64":"## Inheritance\n\n Inheritance is the process by which one class takes on the attributes and methods of another. Newly formed classes are called child classes, and the classes that child classes are derived from are called parent classes.\n \n  Child classes can override or extend the attributes and methods of parent classes. In other words, child classes inherit all of the parent\u2019s attributes and methods but can also specify attributes and methods that are unique to themselves.","a374d7da":"Let\u2019s create a child class for each of the three car type mentioned above: Racecar, SUV and Compact\n\n In order to create a child class, you create new class with its own name and then put the name of the parent class in parentheses. ","ceaf2c82":"## Instance(Object) Methods\n\nInstance(Object) methods are functions that are defined inside a class and can only be called from an instance of that class. Just like .__init__(), an instance method\u2019s first parameter is always self.","ce09fcef":"**Created by Berkay Alan**\n\n**Object Oriented Programming**\n\n**20 of November, 2020**\n\n**For more Tutorial: https:\/\/github.com\/berkayalan**","b961ba3f":"**Note:** Notice that the .__init__() method\u2019s signature is indented four spaces. The body of the method is indented by eight spaces. This indentation is vitally important. It tells Python that the .__init__() method belongs to the Car class.\n\n Attributes created in .__init__() are called instance attributes. An instance attribute\u2019s value is specific to a particular instance of the class. All Car objects have a brand and an age, but the values for the brand and age attributes will vary depending on the car instance.","4f5d8ead":"## Content\n\n- What is object oriented programming?\n- Defining Classes\n- Instantiation - Creating objects\n- Class and Instance Attributes\n- Instance(Object) Methods\n- Inheritance\n- Overriding - Extending the Functionality of a Parent Class\n- super() keyword","8f98bf2a":"## Instantiation - Creating objects","4dd9fd4c":"In order to override a method defined on the parent class, you define a method with the same name on the child class.","4d89ed20":"## What is Object oriented programming?\n\nObject-oriented programming is a programming paradigm that provides a means of structuring programs so that properties and behaviors are bundled into individual objects.\n\nFor instance, an object could represent a person with properties like a name, age, and address and behaviors such as walking, talking, breathing, and running. Or it could represent an email with properties like a recipient list, subject, and body and behaviors like adding attachments and sending.\n\nResource: https:\/\/realpython.com\/python3-object-oriented-programming\/","bc1749b9":"## Defining Classes\n\nClasses are used to create user-defined data structures. Classes define functions called methods, which identify the behaviors and actions that an object created from the class can perform with its data.","634ed5ed":"**Note:** To instantiate objects of this Car class, you need to provide values for the brand and age. If you don\u2019t, then Python raises a TypeError","8ce1732c":"## Class and Instance Attributes","0153983d":"The key takeaway here is that custom objects are mutable by default. An object is mutable if it can be altered dynamically. For example, lists and dictionaries are mutable, but strings and tuples are immutable.","5c171940":"## super() keyword\n\nThe super() function is used to give access to methods and properties of a parent or sibling class. This function returns an object that represents the parent class.","d5eddc1f":"**Note:** If you want to determine if lotus is also an instance of the Car class, you can do this with the built-in isinstance().","ef1a4a84":" On the other hand, class attributes are attributes that have the same value for all class instances. You can define a class attribute by assigning a value to a variable name outside of .__init__().","f2b0e042":" Creating a new object from a class is called **instantiating** an object. You can instantiate a new Car object by typing the name of the class, followed by opening and closing parentheses.","5d93f993":"![image.png](attachment:image.png)","fe2fba65":"![image.png](attachment:image.png)","e4f96021":" Car class is not very useful right now, it doesn't contain spesific properties of cars such as brand, model , age, price, color and so on. \n \n The properties that all Car objects must have are defined in a method called .__init__(). Every time a new Car object is created, .__init__() sets the initial state of the object by assigning the values of the object\u2019s properties. That is, .__init__() initializes each new instance of the class.\n\n You can give .__init__() any number of parameters, but the first parameter will always be a variable called self. When a new class instance is created, the instance is automatically passed to the self parameter in .__init__() so that new attributes can be defined on the object.","65923f7a":" A class is a blueprint for how something should be defined. It doesn\u2019t actually contain any data. The Car class specifies that a brand and an age are necessary for defining a car, but it doesn\u2019t contain the brand or age of any specific dog.\n\n While the class is the blueprint, an **instance** is an object that is built from a class and contains real data. An instance of the car class is not a blueprint anymore. It\u2019s an actual car with a brand, like Audi, what\u2019s seven years old.\n\nCar >> Class\n\n7 years old Audi >> An object(instance) of Car class","bf5651fa":"Class attributes are defined directly beneath the first line of the class name and are indented by four spaces. They must always be assigned an initial value. When an instance of the class is created, class attributes are automatically created and assigned to their initial values.\n\n Class attributes are used to define same properties for every object of a class. In this example, every car has automatically 4 door."}}