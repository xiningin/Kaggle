{"cell_type":{"196448d5":"code","93ec5f3b":"code","50afaa00":"code","a0d27e6a":"code","064e8f77":"code","4600a103":"code","42b8ca53":"code","5d24dfd2":"code","ac01bb34":"code","9492973f":"code","577f4be2":"code","e94ad3d2":"code","795da2eb":"markdown","5d0e9e86":"markdown","32600a3a":"markdown","4664b1b4":"markdown","a1a91667":"markdown","80723de7":"markdown","e45eaab1":"markdown","71a59cb1":"markdown","af2344a6":"markdown"},"source":{"196448d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","93ec5f3b":"import pandas as pd","50afaa00":"data=pd.read_csv('..\/input\/melbourne-housing-snapshot\/melb_data.csv')\ndata.dropna(axis=0)","a0d27e6a":"data.head()","064e8f77":"data.describe()","4600a103":"data.columns","42b8ca53":"from sklearn.model_selection import train_test_split\ntrain_data,test_data=train_test_split(data,random_state=0,train_size=0.8,test_size=0.2)","5d24dfd2":"features=['Rooms', 'Bathroom', 'Landsize', 'Lattitude', 'Longtitude']\ntrain_y=train_data['Price']\ntrain_data[features].describe()","ac01bb34":"from sklearn.tree import DecisionTreeRegressor\n# defining my model\nmy_model=DecisionTreeRegressor()\n#fitting my model\nmy_model.fit(train_data[features],train_y)\n","9492973f":"#making predictions on my model\ntest_y=pd.Series(my_model.predict(test_data[features]))\ntype(test_y)","577f4be2":"print(train_data[features].head())\nprint(\"predicted values are\")\nprint(my_model.predict(train_data[features].head()))","e94ad3d2":"from sklearn.metrics import mean_absolute_error\nprint(mean_absolute_error(test_data['Price'],test_y))","795da2eb":"lets compare first 5 values of the test_data","5d0e9e86":"As said above, we use dataframe for our data. So, we store our data in the dataframe by using \n\npd.read_csv('filepath')  if our input file is in csv form\n\npd.read_excel('filepath')  if our input is in the form of excel sheet\n\nwe can also use\n\npd.read_html('filepath')  ,  pd.read_json('filepath') ","32600a3a":"I will split my data into training data and test data using train_test_split","4664b1b4":"1. To know about the data use the \".describe()\" function.It gives the mean,median,max,min values of the data.","a1a91667":"Lets evaluate our model","80723de7":"First we need to import pandas library. Pandas is the primar tool for manipulating and exploring data. \nPandas contain \n\n1.DataFrame-holds the data which is kind of like table\n\n2.Series-it is more like a single column of data or one dimensional array with index","e45eaab1":"242339.2881688758\nThis is the error we got for our model when we tested it on our test_data","71a59cb1":"I am going to select Price as my target value and the features on which I am going to predict my target value are:\n\nRooms,Bathroom,BuildingArea,Landsize,Bedroom2","af2344a6":"data.head() gives the first 10 rows of our dataframe while data.tail() gives the last 10 rows of our dataset"}}