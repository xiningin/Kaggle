{"cell_type":{"28acc978":"code","5273ab6a":"code","96ef30e8":"code","7dd38871":"code","65ab80e1":"code","9a4d9fc7":"code","1acda31f":"code","c6bf183c":"code","1cd170d8":"code","df747914":"code","e9ceac83":"code","503cfb72":"code","38bb7093":"code","47e63da9":"code","e70915db":"code","b4d6e982":"code","1fa2f9ed":"code","56c3727d":"code","bdbc42da":"code","1f99441a":"code","885bdee2":"code","1259b453":"code","da1e2695":"code","79ebcb17":"code","562bd3ca":"code","62f09073":"code","cd44df5f":"code","6c7046e7":"code","258369da":"code","49d7d4c1":"code","eed84b0c":"code","8ce06e17":"code","e2ecdfe5":"code","b5f76dbe":"code","1184b562":"code","13056dec":"code","fd7f516f":"code","2c96648d":"code","a4b93f37":"code","a4c0ba7a":"code","4c5e19c2":"code","e683da55":"code","2f9e5588":"code","fc6447bb":"code","7256936e":"code","dbf5ad88":"code","76837e6f":"code","f7a7327c":"code","150f07b3":"code","e046b6e5":"code","a16b3430":"code","14fb10ba":"code","dfb00f66":"code","f6ea067a":"code","82f7aabe":"code","271f1123":"code","cc9fa524":"code","a0b4c9f8":"code","ba373b97":"code","11498862":"code","41952732":"code","ea1b8a33":"code","3325d365":"code","fe74a65f":"code","f91cdc0d":"code","981fb280":"code","19f0a826":"code","680e72eb":"code","6aaed615":"code","19a0e527":"code","dbb1e48d":"code","6a276fe8":"code","84046f59":"code","b0d71620":"code","25e85a14":"code","dfa8e057":"code","1f479582":"code","d56cdc3d":"code","e6f71634":"code","aabe2b6a":"code","3d030d64":"code","e63c1a9a":"code","d8db262a":"code","e5fc1839":"code","d42ab762":"code","86d215bc":"code","2e13ff5b":"code","2fe0103a":"code","abed4f2c":"code","ebadd79f":"code","1156983f":"code","e36fd830":"code","a754a742":"code","272bc789":"code","d1d17458":"code","1d9ea03b":"code","7df3f063":"code","7ea5f5f8":"code","d4b43ca5":"code","daa6b162":"code","2f45333a":"code","9313ddea":"code","7d45f181":"code","afb09093":"code","7254a350":"code","4aa28a73":"code","028be3f9":"code","7b1f5ca2":"code","6ef8108e":"code","2fdabdbb":"code","68b62ee9":"code","614632f6":"code","9216af38":"code","92d3a419":"markdown","bc2a0b2b":"markdown","a9829b91":"markdown","02e4301c":"markdown","56ed80fb":"markdown","a6b697fd":"markdown","9285599e":"markdown","142d64ce":"markdown","a6fac285":"markdown","9cc00873":"markdown","dabc62bb":"markdown","903eaab0":"markdown","1c01bc5b":"markdown","92f15a9d":"markdown","dc03d604":"markdown","bf666d96":"markdown","e221f516":"markdown"},"source":{"28acc978":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","5273ab6a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96ef30e8":"kidney=pd.read_csv('\/kaggle\/input\/ckdisease\/kidney_disease.csv')","7dd38871":"kidney.shape","65ab80e1":"kidney.head()","9a4d9fc7":"kidney.info()","1acda31f":"kidney.describe()","c6bf183c":"kidney.head()","1cd170d8":"kidney.head()","df747914":"kidney.describe()","e9ceac83":"def convert_dtype(kidney,feature):\n    kidney[feature]=pd.to_numeric(kidney[feature],errors='coerce')    #whereever we have Nan values , this errors parameter will handle that ","503cfb72":"features=['pcv','wc','rbc']\nfor i in features:\n    convert_dtype(kidney,i)","38bb7093":"kidney.dtypes","47e63da9":"kidney.drop('id',inplace=True,axis=1)","e70915db":"def extract_cat_num(kidney):\n    cat_col=[col for col in kidney.columns if kidney[col].dtype=='O']\n    num_col=[col for col in kidney.columns if kidney[col].dtype!='O']\n    return cat_col,num_col","b4d6e982":"cat_col,num_col=extract_cat_num(kidney)","1fa2f9ed":"cat_col","56c3727d":"num_col","bdbc42da":"# dirtiness in categorical data\nfor col in cat_col:\n    print('{} has {} values'.format(col,kidney[col].unique()))\n    print(\"\\n\")","1f99441a":"kidney['dm'].replace(to_replace={'\\tno':'no','\\tyes':'yes'},inplace=True)\nkidney['cad'].replace(to_replace={'\\tno':'no'},inplace=True)\nkidney['classification'].replace(to_replace={'ckd\\t':'ckd'},inplace=True)","885bdee2":"# no dirtiness\nfor col in cat_col:\n    print('{} has {} values'.format(col,kidney[col].unique()))\n    print(\"\\n\")","1259b453":"len(num_col)","da1e2695":"plt.figure(figsize=(30,30))\nfor i,feature in enumerate(num_col):\n    plt.subplot(5,3,i+1)   # 5 rows and 3 columns        \n    kidney[feature].hist()\n    plt.title(feature)","79ebcb17":"len(cat_col)","562bd3ca":"plt.figure(figsize=(20,20))\n\nfor i,feature in enumerate(cat_col):\n    plt.subplot(4,3,i+1)\n    sns.countplot(kidney[feature])","62f09073":"plt.figure(figsize=(20,20))\n\nfor i,feature in enumerate(cat_col):\n    plt.subplot(4,3,i+1)\n    sns.countplot(kidney[feature],hue=kidney['classification'])","cd44df5f":"sns.countplot(kidney['classification'])","6c7046e7":"kidney.corr()","258369da":"plt.figure(figsize=(12,12))\nsns.heatmap(kidney.corr(method='pearson'),cbar=True,cmap='RdYlGn',annot=True)","49d7d4c1":"plt.figure(figsize=(10,10))\nplt.scatter(x=kidney.hemo,y=kidney['pcv'])\nplt.xlabel('Haemoglobin')\nplt.ylabel('packed cell volume')\nplt.title('Relationship between haemoglobin and packed cell volume')\n","eed84b0c":"grid=sns.FacetGrid(kidney,hue='classification',aspect=2)\ngrid.map(sns.kdeplot,'hemo')\ngrid.add_legend()","8ce06e17":"plt.figure(figsize=(12,10))\nsns.scatterplot(x=kidney['rc'],y=kidney['pcv'],hue=kidney['classification'])\nplt.xlabel('red blood cell count')\nplt.ylabel('packed cell volume')\nplt.title('Relationship between red blood cell count and packed cell volume')\n","e2ecdfe5":"plt.figure(figsize=(12,10))\nsns.scatterplot(x=kidney['rc'],y=kidney['hemo'],hue=kidney['classification'])\nplt.xlabel('red blood cell count')\nplt.ylabel('haemoglobin')\nplt.title('Relationship between haemoglobin and red blood cell count')","b5f76dbe":"kidney.isnull().sum()","1184b562":"kidney.isnull().sum().sort_values(ascending=False)","13056dec":"plt.subplot(1,2,1)\nsns.boxplot(x=kidney['classification'],y=kidney['age'])","fd7f516f":"list(enumerate(cat_col))","2c96648d":"plt.figure(figsize=(15,15))\nfor i in enumerate(num_col):\n    plt.subplot(4,4,i[0]+1)\n    sns.boxplot(x=kidney['classification'],y=i[1],data=kidney.reset_index())","a4b93f37":"np.mean(kidney)","a4c0ba7a":"kidney.isnull().sum()","4c5e19c2":"for i in num_col:\n    kidney[i].fillna(kidney[i].median(),inplace=True)","e683da55":"kidney.isnull().sum()","2f9e5588":"kidney.describe()","fc6447bb":"kidney['rc'].isnull().sum()","7256936e":"random_sample=kidney['rc'].dropna().sample(152)","dbf5ad88":"random_sample","76837e6f":"kidney[kidney['rc'].isnull()].index","f7a7327c":"random_sample.index","150f07b3":"random_sample.index","e046b6e5":"kidney.loc[kidney['rc'].isnull(),'rc']=random_sample","a16b3430":"kidney.head()","14fb10ba":"kidney['rc'].isnull().sum()","dfb00f66":"sns.countplot(kidney['rc'])       # checking that ratio didnt change after filling missing values","f6ea067a":"#filling random values in all categorical columns\ndef Random_value_Imputation(feature):\n    random_sample=kidney[feature].dropna().sample(kidney[feature].isnull().sum())\n    random_sample.index=kidney[kidney[feature].isnull()].index\n    kidney.loc[kidney[feature].isnull(),feature]=random_sample","82f7aabe":"Random_value_Imputation('pc')     #only this column because it has higher no. of missing value","271f1123":"kidney.isnull().sum()","cc9fa524":"def impute_mode(feature):\n    mode=kidney[feature].mode()[0]\n    kidney[feature]=kidney[feature].fillna(mode)","a0b4c9f8":"for col in cat_col:\n    impute_mode(col)","ba373b97":"kidney[cat_col].isnull().sum()","11498862":"kidney.drop(['rbc'],axis=1,inplace=True)","41952732":"kidney.isnull().sum()","ea1b8a33":"for col in cat_col:\n    print('{} has {} categories'.format(col,kidney[col].nunique()))","3325d365":"from sklearn.preprocessing import LabelEncoder","fe74a65f":"le=LabelEncoder()","f91cdc0d":"for col in cat_col:\n    kidney[col]=le.fit_transform(kidney[col])","981fb280":"kidney.head()","19f0a826":"from sklearn.feature_selection import SelectKBest","680e72eb":"from sklearn.feature_selection import chi2","6aaed615":"ind_col=[col for col in kidney.columns if col!='classification']\ndep_col='classification'","19a0e527":"X=kidney[ind_col]\ny=kidney[dep_col]","dbb1e48d":"X.head()","6a276fe8":"imp_features=SelectKBest(score_func=chi2,k=20)","84046f59":"imp_features=imp_features.fit(X,y)","b0d71620":"imp_features","25e85a14":"imp_features.scores_","dfa8e057":"datascore=pd.DataFrame(imp_features.scores_,columns=['Score'])","1f479582":"datascore","d56cdc3d":"X.columns","e6f71634":"dfcols=pd.DataFrame(X.columns)","aabe2b6a":"dfcols","3d030d64":"features_rank=pd.concat([dfcols,datascore],axis=1)\nfeatures_rank","e63c1a9a":"features_rank.columns=['features','score']","d8db262a":"features_rank\n","e5fc1839":"features_rank.nlargest(10,'score')","d42ab762":"selected=features_rank.nlargest(10,'score')['features'].values","86d215bc":"selected","2e13ff5b":"X_new=kidney[selected]","2fe0103a":"X_new.head()","abed4f2c":"len(X_new)","ebadd79f":"X_new.shape","1156983f":"from sklearn.model_selection import train_test_split","e36fd830":"X_train,X_test,y_train,y_test=train_test_split(X_new,y,random_state=0,test_size=0.3)","a754a742":"X_train.shape","272bc789":"y_train.value_counts()    #Checking for imbalancing","d1d17458":"from xgboost import XGBClassifier","1d9ea03b":"params={'learning_rate':[0,0.5,0.20,0.25],\n        'max_depth':[5,8,10],\n       'min_child_weight':[1,3,5,7],\n       'gamma':[0.0,0.1,0.2,0.4],\n       'colsample_bytree':[0.3,0.4,0.7]}","7df3f063":"from sklearn.model_selection import RandomizedSearchCV","7ea5f5f8":"classifier=XGBClassifier()","d4b43ca5":"random_search=RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","daa6b162":"random_search.fit(X_train,y_train)","2f45333a":"random_search.best_estimator_    #Checking for best model","9313ddea":"random_search.best_params_","7d45f181":"classifier=XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.3, gamma=0.2, gpu_id=-1,\n              importance_type='gain', interaction_constraints='', learning_rate=0.300000012, max_delta_step=0,\n              max_depth=5, min_child_weight=1,\n              monotone_constraints='()', n_estimators=100, n_jobs=8,\n              num_parallel_tree=1, random_state=0, reg_alpha=0, reg_lambda=1,\n              scale_pos_weight=1, subsample=1, tree_method='exact',\n              validate_parameters=1, verbosity=None)","afb09093":"classifier.fit(X_train,y_train)","7254a350":"y_pred=classifier.predict(X_test)","4aa28a73":"uy=np.array(y_test)\nlen(uy)","028be3f9":"X_test.head()","7b1f5ca2":"y_pred","6ef8108e":"from sklearn.metrics import confusion_matrix,accuracy_score","2fdabdbb":"confusion_matrix(y_test,y_pred)","68b62ee9":"accuracy_score(y_test,y_pred)","614632f6":"from sklearn import metrics","9216af38":"print(\"MAE:\",metrics.mean_absolute_error(y_test,y_pred))\nprint(\"MSE:\",metrics.mean_squared_error(y_test,y_pred))\nprint(\"RMSE:\",np.sqrt(metrics.mean_squared_error(y_test,y_pred)))","92d3a419":"Analyse distribution of red blood cell count chronic as well as non chronic","bc2a0b2b":"Those categorical variables who have less no. of missing values then we can replace it with mode","a9829b91":"1.Rbc count is positively correlated with specific gravity,haemoglobin,packed cell volume\n\n2.Rbc count is negatively correlated with albumin, blood urea\n\n3.Packed cell volume and haemoglobin are highly positive correlated\n\n4.Packed cell volume is negatively correlated with albumin and blood urea\n\n5.Haemoglobin and albumin are negatively correlated","02e4301c":"We can observe that when a person is not diseased its rbc count is 134, mean is also high whereas when he is diseased count drop downs to 25-40 and mean is low.","56ed80fb":"# Data Cleaning","a6b697fd":"# Performing Exploitory Data Analysis ( EDA )","9285599e":"Model Accuracy","142d64ce":" ### Correaltion","a6fac285":" Converting categorical values into numerical values","9cc00873":"### Handling Null Values","dabc62bb":"Selecting important features\n\nSelectKBest: Feature selection is a technique where we choose those features in our data that contribute most to the target variable. In other words we choose the best predictors for the target variable. The classes in the sklearn.\n\nchi2: A chi-square (\u03c72) statistic is a test that measures how a model compares to actual observed data. ... The chi-square statistic compares the size any discrepancies between the expected results and the actual results, given the size of the sample and the number of variables in the relationship.\n\n","903eaab0":"\n\n## Missing Values Handling","1c01bc5b":"from above visuals we can say that person with lower rbc count have high chances of having chronic disease","92f15a9d":"### Distribution v\/s columns","dc03d604":"Relationship between haemoglobin and packed cell volume","bf666d96":"there are outliers in dataset so filling missing values with mean is not feasible , i will use median to fill missing values","e221f516":"1.We can see that there is some kind of linearity in all the relationships\n\n2.Whenever haemoglobin is below 13-14 he is positive for chronic disease , Whenever haemoglobin is near 18 he is negative"}}