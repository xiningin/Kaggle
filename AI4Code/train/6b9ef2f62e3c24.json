{"cell_type":{"99129f81":"code","896b587f":"code","ff524cee":"code","b439ce8d":"code","66f68065":"code","0aa7c941":"code","746c8120":"code","165fa376":"code","1c9eec4b":"code","97e72b9e":"code","eb1d1dc7":"code","69cd0843":"code","cade6223":"code","19d5deec":"code","1d4a7de0":"code","93c95d03":"code","30608756":"code","4901f358":"code","0389e6da":"code","e4b53fd1":"code","a76c542e":"code","eef4452f":"code","821cb345":"code","9b12979e":"code","a7296588":"code","b9ff2f63":"code","f73272d8":"code","62e4dc59":"code","fbd41b1d":"code","6e868d45":"code","6ccd1931":"code","58e808ce":"code","bebd3b00":"code","36c92d75":"code","48289745":"code","b713eaa4":"code","7533b1b9":"code","874c24f4":"code","ecc013df":"code","42800918":"code","387a4265":"code","289ca5de":"code","1fdfd38a":"code","d0d0d364":"code","85038386":"code","bb2d9b26":"code","7e031fd7":"code","0e7d7e50":"code","1d4c36eb":"code","384de90b":"code","923b5513":"code","4d2329a5":"code","9d32f7e7":"code","d5c3ec9f":"code","b32628eb":"code","76990df7":"code","a2325275":"code","d2c58ace":"code","1abbaada":"code","3752e54a":"code","16031a5a":"code","015c4bbd":"code","b870e572":"code","8b76b091":"code","a8ac1a80":"code","a9dbbc06":"code","ddb2bdfa":"code","c1bf4544":"code","d008321f":"code","045d3093":"code","4095b192":"code","1b3b5805":"code","4af0b03a":"code","32a3147f":"code","f585150e":"code","c0ecdb88":"code","04bb9bf1":"code","188a1646":"code","1b1b49d7":"code","029a8e76":"code","6c3aae1e":"code","021f6d4c":"code","9fd449a0":"code","73cac379":"code","3c784887":"code","fe0c4504":"code","8944e92f":"code","dfc49bf2":"code","c552efeb":"code","3d2a77c2":"code","d76f3282":"code","ea03d6e9":"code","42a4f7a6":"code","15471c3a":"code","eccb7819":"code","ac03c6b0":"code","12b0513f":"code","76f5cba1":"code","89bd988c":"code","e61b7e84":"code","208aaa2d":"code","b7f82bd1":"code","24275814":"code","7fae0ab9":"code","a6aaed5e":"code","15169f2f":"code","f9353757":"code","35cc5682":"markdown","309967b4":"markdown","a83fb95a":"markdown","1e28a9d1":"markdown","fb51875c":"markdown","483b3526":"markdown","a86f81c2":"markdown","e0e3863c":"markdown","a81f3ada":"markdown","45c3e5eb":"markdown","67e5ba13":"markdown","6d2cce66":"markdown","8d5404e4":"markdown","2ee263e8":"markdown","e5e7d517":"markdown","82f7b43b":"markdown","50080bbe":"markdown","d1035455":"markdown","4ac92458":"markdown","07aff09f":"markdown","4075665c":"markdown","e7c117b1":"markdown","54dde784":"markdown","f69caa8a":"markdown","803e227a":"markdown","66653299":"markdown","9e205b7f":"markdown","d8f1fdfc":"markdown","cee20b87":"markdown","54aea55d":"markdown","9093bf29":"markdown","dbb7ba77":"markdown","8556293a":"markdown","14c07200":"markdown","c34716d5":"markdown","af2d14a0":"markdown","9dd7f81c":"markdown","973673a5":"markdown","d2d8616e":"markdown","97e01319":"markdown","c1b897a1":"markdown","e002c281":"markdown","05e9fc5d":"markdown","09f01bf8":"markdown","955c80e8":"markdown","30aef009":"markdown","006da6c5":"markdown","995f279b":"markdown","8823d2a2":"markdown","2c1333cc":"markdown","4f2ad0a8":"markdown","6dbd3f32":"markdown","2b1bda7d":"markdown","d9c2a53a":"markdown","7a256bb8":"markdown","5858e0b0":"markdown","88dcfb50":"markdown","11a70a80":"markdown","4229187f":"markdown"},"source":{"99129f81":"import random\nimport re\nfrom datetime import datetime\n\n# Data manipulation\nimport pandas as pd\nimport numpy as np\n\n# Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Model\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import confusion_matrix, classification_report\n\n# Suppress warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.options.display.max_rows = 100\n\nfrom IPython.display import display\n\n%matplotlib inline","896b587f":"# Set a few plotting defaults\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = (12, 8)\nplt.rcParams['font.size'] = 14\nplt.rcParams['patch.edgecolor'] = 'k'","ff524cee":"train_raw = pd.read_csv('..\/input\/train.csv')\ntest_raw = pd.read_csv('..\/input\/test.csv')\ntrain_raw.shape, test_raw.shape","b439ce8d":"train_raw.info()","66f68065":"test_raw.info()","0aa7c941":"def plot_distribution_by_target(df, field):\n    df = df[df[field].notnull()]\n\n    fig = plt.figure(figsize = (14, 12))\n    ax1 = plt.subplot(221)\n    \n    sns.kdeplot(df[field], label='Total', alpha=0.7, ax=ax1)\n    sns.kdeplot(df[df.train == 1][field], label='Train', alpha=0.7, ax=ax1)\n    sns.kdeplot(df[df.train == 0][field], label='Test', alpha=0.7, ax=ax1)\n\n    plt.xlabel(field.upper())\n    plt.ylabel('Density')\n    \n    ax2 = plt.subplot(222)\n\n    sns.boxplot(x='train', y=field, data=df, ax=ax2)\n    plt.xticks((0,1), ('Test','Train'))\n    \n    df = df[df.train == 1]\n    \n    ax3 = plt.subplot(223)\n\n    sns.kdeplot(df[df.Survived == 1][field], label='Survived', alpha=0.7, ax=ax3)\n    sns.kdeplot(df[df.Survived == 0][field], label='Not Survived', alpha=0.7, ax=ax3)\n\n    plt.xlabel(field.upper())\n    plt.ylabel('Density')\n\n    ax4 = plt.subplot(224)\n\n    sns.boxplot(x='Survived', y=field, data=df, ax=ax4)\n    plt.xticks((0,1), ('Not Survived','Survived'))\n    \n    fig.suptitle(f'{field.upper()} Distribution', fontsize=20)\n    \n    plt.show()","746c8120":"RANDOM_SEED = 42\nnp.random.seed(RANDOM_SEED)","165fa376":"base_features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\n\nX_train = train_raw[base_features]\nX_test = test_raw[base_features]\ny_train = train_raw.Survived\n\nX_train.Embarked = X_train.Embarked.fillna(X_train.Embarked.mode()[0])\nX_test.Embarked = X_test.Embarked.fillna(X_train.Embarked.mode()[0])\n\nle = LabelEncoder()\nX_train.Sex = le.fit_transform(X_train[['Sex']])\nX_test.Sex = le.transform(X_test[['Sex']])\n\nX_train.Embarked = le.fit_transform(X_train[['Embarked']])\nX_test.Embarked = le.transform(X_test[['Embarked']])\n\nmedian_imputer = SimpleImputer(strategy='median')\nX_train.Age = median_imputer.fit_transform(X_train[['Age']])\nX_test.Age = median_imputer.transform(X_test[['Age']])\n\nX_train.Fare = median_imputer.fit_transform(X_train[['Fare']])\nX_test.Fare = median_imputer.transform(X_test[['Fare']])\n\nprint(f'X_train shape : {X_train[base_features].shape}, X_test shape : {X_test[base_features].shape}')","1c9eec4b":"def cv_model(train, train_labels, model, name, model_results=None, cv=10, scoring='accuracy'):\n    \"\"\"Perform k fold cross validation of a model\"\"\"\n    \n    cv_scores = cross_val_score(model, train, train_labels, cv=cv, scoring=scoring, n_jobs=-1)\n    print(f'{cv} Fold CV {scoring} for {name}: {round(cv_scores.mean(), 5)} with std: {round(cv_scores.std(), 5)}')\n    \n    model.fit(train, train_labels)\n    \n    if model_results is None:\n        model_results = pd.DataFrame({\n            'model': name,\n            'cv_mean': cv_scores.mean(),\n            'cv_std': cv_scores.std(),\n            #'test_score': test_score\n        }, index = [0])\n    else:\n        model_results = model_results.append(pd.DataFrame({\n            'model': name,\n            'cv_mean': cv_scores.mean(),\n            'cv_std': cv_scores.std(),\n            #'test_score': test_score\n        }, index = [0]), ignore_index = True)\n\n    return model_results, model\n\ndef show_model_results(model_results):\n    display(model_results)\n    df = model_results.copy().set_index('model')\n    df.sort_values(by='cv_mean', inplace=True)\n    df['cv_mean'].plot.bar(color = 'orange', figsize = (10, 8),\n                                      yerr = list(df['cv_std']),\n                                      edgecolor = 'k', linewidth = 2)\n    plt.title('Model Train CV Accuracy Score Results');\n    plt.ylabel('Mean CV Accuracy Score (with error bar)');\n    plt.show()\n\ndef plot_feature_importances(estimator, x_cols, n=20, threshold = 0.95):\n    try:\n        df = pd.DataFrame({'feature': x_cols, 'importance': estimator.feature_importances_})\n    except AttributeError:\n        print('model does not provide feature importances')\n        return\n    \n    # Sort features with most important at the head\n    df = df.sort_values('importance', ascending = False).reset_index(drop = True)\n    \n    # Normalize the feature importances to add up to one and calculate cumulative importance\n    df['importance_normalized'] = df['importance'] \/ df['importance'].sum()\n    df['cumulative_importance'] = np.cumsum(df['importance_normalized'])\n    \n    plt.rcParams['font.size'] = 12\n    \n    # Bar plot of n most important features\n    df.loc[:n, :].plot.barh(y = 'importance_normalized', \n                            x = 'feature', color = 'darkgreen', \n                            edgecolor = 'k', figsize = (12, 8),\n                            legend = False, linewidth = 2)\n\n    plt.xlabel('Normalized Importance', size = 18); plt.ylabel(''); \n    plt.title(f'{min(n, len(df))} Most Important Features', size = 18)\n    plt.gca().invert_yaxis()\n    \n    if threshold:\n        # Cumulative importance plot\n        plt.figure(figsize = (8, 6))\n        plt.plot(list(range(1, len(df)+1)), df['cumulative_importance'], 'b-')\n        plt.xlabel('Number of Features', size = 16); plt.ylabel('Cumulative Importance', size = 16); \n        plt.title('Cumulative Feature Importance', size = 18);\n        \n        # Number of features needed for threshold cumulative importance\n        # This is the index (will need to add 1 for the actual number)\n        importance_index = np.min(np.where(df['cumulative_importance'] > threshold))\n        \n        # Add vertical line to plot\n        plt.vlines(importance_index + 1, ymin = 0, ymax = 1.05, linestyles = '--', colors = 'red')\n        plt.show();\n        \n        print('{} features required for {:.0f}% of cumulative importance.'.format(importance_index + 1, \n                                                                                  100 * threshold))\n    \n    print(f'zero importance feature count : {len(df[df.importance == 0])}')\n    \n    return df\n\n# Dataframe to hold results\nmodel_results = pd.DataFrame(columns = ['model', 'cv_mean', 'cv_std'])\n\nmodel_results, xgb_base = cv_model(X_train[base_features], y_train, xgb.XGBClassifier(random_state=RANDOM_SEED),\n                            'XGB_Base', model_results)\n\nplot_feature_importances(xgb_base, base_features)","97e72b9e":"train_raw = pd.read_csv('..\/input\/train.csv')\ntest_raw = pd.read_csv('..\/input\/test.csv')\n\ntrain_raw.Embarked = train_raw.Embarked.fillna(train_raw.Embarked.mode()[0])\ntest_raw.Embarked = test_raw.Embarked.fillna(test_raw.Embarked.mode()[0])\n\nle = LabelEncoder()\ntrain_raw.Sex = le.fit_transform(train_raw[['Sex']])\ntest_raw.Sex = le.transform(test_raw[['Sex']])\n\ntrain_raw.Embarked = le.fit_transform(train_raw[['Embarked']])\ntest_raw.Embarked = le.transform(test_raw[['Embarked']])\n\ntrain_raw['train'] = 1\ntest_raw['train'] = 0\ndata_all = pd.concat([train_raw, test_raw], axis=0).reset_index(drop=True)","eb1d1dc7":"data_all.info()","69cd0843":"data_all['family_size'] = data_all.SibSp + data_all.Parch + 1","cade6223":"def plot_by_target(df, field, col_wrap=4):\n    df = df[df.train == 1]\n    g = sns.catplot('Survived', col=field, data=df, kind='count', col_wrap=col_wrap)\n    plt.show()","19d5deec":"plot_by_target(data_all, 'family_size', col_wrap=3)","1d4a7de0":"def calc_family_size_bin(family_size):\n    if family_size == 1:\n        return 0\n    elif family_size <= 4: \n        return 1\n    else:\n        return 2\n        \ndata_all['family_size_bin'] = data_all.family_size.map(calc_family_size_bin)","93c95d03":"plot_by_target(data_all, 'family_size_bin')","30608756":"data_all['name_title'] = data_all.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)","4901f358":"data_all.name_title.value_counts().plot.bar()\nplt.title('Name Title Count')\nplt.show()","0389e6da":"pd.crosstab(data_all.Sex, data_all.name_title)","e4b53fd1":"data_all.groupby('name_title').Age.median()","a76c542e":"data_all[data_all.train == 1].groupby('name_title').Survived.mean()","eef4452f":"name_title_dict = {\n    'Capt': 'Mr',\n    'Col': 'Mr',\n    'Don': 'Mr',\n    'Dona': 'Mrs',    \n    'Dr': 'Dr',\n    'Jonkheer': 'Mr',\n    'Lady': 'Mrs',\n    'Major': 'Mr',\n    'Master': 'Master',\n    'Miss': 'Miss',\n    'Mlle': 'Miss',\n    'Mme': 'Miss',\n    'Mr': 'Mr',\n    'Mrs': 'Mrs',\n    'Ms': 'Mrs',\n    'Rev': 'Mr',\n    'Sir': 'Mr',\n    'Countess': 'Mrs'\n}\n\ndata_all['name_title_cat'] = data_all.name_title.map(name_title_dict)","821cb345":"plot_by_target(data_all, 'name_title_cat', col_wrap=3)","9b12979e":"data_all['last_name'] = data_all.Name.str.extract('([A-Za-z]+),', expand=False)\ndata_all['last_name_family_size'] = data_all.apply(lambda row: row.last_name + '_' + str(row.family_size), axis=1)\ndata_all['last_name_ticket'] = data_all.apply(lambda row: row.last_name + '_' + row.Ticket, axis=1)","a7296588":"ticket_df = data_all.groupby('Ticket', as_index=False)['PassengerId'].count()\nticket_df.columns = ['Ticket','ticket_count']\nticket_df.head()","b9ff2f63":"data_all = pd.merge(data_all, ticket_df, on=['Ticket'])\ndata_all = data_all.sort_values('PassengerId').reset_index(drop=True)","f73272d8":"last_name_family_size_check = data_all[data_all.family_size > 1].groupby('last_name_family_size').agg({'Survived': lambda x: x.isnull().sum()}).reset_index()\nlast_name_family_size_check.columns = ['last_name_family_size','last_name_family_size_feature']\nlast_name_family_size_check.head()","62e4dc59":"last_name_ticket_check = data_all[data_all.ticket_count > 1].groupby('last_name_ticket').agg({'Survived': lambda x: x.isnull().sum()}).reset_index()\nlast_name_ticket_check.columns = ['last_name_ticket','last_name_ticket_feature']\nlast_name_ticket_check.head()","fbd41b1d":"data_all = pd.merge(data_all, last_name_family_size_check, on='last_name_family_size', how='left')\ndata_all = data_all.sort_values('PassengerId').reset_index(drop=True)\ndata_all.last_name_family_size_feature = data_all.last_name_family_size_feature.fillna(0)\ndata_all.head()","6e868d45":"data_all = pd.merge(data_all, last_name_ticket_check, on='last_name_ticket', how='left')\ndata_all = data_all.sort_values('PassengerId').reset_index(drop=True)\ndata_all.last_name_ticket_feature = data_all.last_name_ticket_feature.fillna(0)\ndata_all.head()","6ccd1931":"data_all.loc[data_all.last_name_family_size_feature == 0, 'last_name_family_size'] = 'X'\ndata_all.loc[data_all.last_name_ticket_feature == 0, 'last_name_ticket'] = 'X'","58e808ce":"data_all[['last_name_family_size','Sex','Age','last_name','family_size','Name','Ticket',\n          'Survived']][data_all.last_name_family_size == 'X'].sort_values(['last_name','family_size']).head()","bebd3b00":"data_all[['last_name_ticket','Sex','Age','last_name','ticket_count','Name','Ticket',\n          'Survived']][data_all.last_name_ticket == 'X'].sort_values(['last_name','Ticket']).head()","36c92d75":"data_all[['last_name_family_size','Sex','Age','last_name','family_size','Name','Ticket',\n          'last_name_family_size_feature',\n          'Survived']][data_all.last_name_family_size != 'X'].sort_values(['last_name','family_size']).head(9)","48289745":"data_all[['last_name_ticket','Sex','Age','last_name','ticket_count','Name','Ticket',\n          'last_name_ticket_feature',\n          'Survived']][data_all.last_name_ticket != 'X'].sort_values(['last_name','Ticket']).head()","b713eaa4":"family_survival = data_all.groupby(['last_name_family_size','family_size']).Survived.sum().reset_index()\nfamily_survival.columns = ['last_name_family_size','family_size','family_survival_sum']\nfamily_survival.head()","7533b1b9":"family_ticket_count = data_all.groupby(['last_name','Ticket']).PassengerId.count().reset_index()\nfamily_ticket_count.columns = ['last_name','Ticket','family_ticket_count']\n\nfamily_ticket_survival = data_all.groupby(['last_name','Ticket']).Survived.sum().reset_index()\nfamily_ticket_survival.columns = ['last_name','Ticket','family_ticket_survival_sum']\n\nfamily_ticket_survival = pd.merge(family_ticket_count, family_ticket_survival, on=['last_name','Ticket'])\nfamily_ticket_survival.head()","874c24f4":"def calc_family_survival(row):\n    family_survival = 0.5\n    if row['family_size'] > 1 and row['family_survival_sum'] > 0:\n        family_survival = 1\n    elif row['family_size'] > 1 and row['family_survival_sum'] == 0:\n        family_survival = 0\n        \n    return family_survival\n\nfamily_survival['family_survival'] = family_survival.apply(calc_family_survival, axis=1)\nfamily_survival[family_survival['family_size'] > 1].head()","ecc013df":"def calc_family_ticket_survival(row):\n    family_ticket_survival = 0.5\n    if row['family_ticket_count'] > 1 and row['family_ticket_survival_sum'] > 0:\n        family_ticket_survival = 1\n    elif row['family_ticket_count'] > 1 and row['family_ticket_survival_sum'] == 0:\n        family_ticket_survival = 0\n        \n    return family_ticket_survival\n\nfamily_ticket_survival['family_ticket_survival'] = family_ticket_survival.apply(calc_family_ticket_survival,\n                                                                                axis=1)\nfamily_ticket_survival[family_ticket_survival['family_ticket_count'] > 1].head()","42800918":"data_all = pd.merge(data_all, family_survival, on=['last_name_family_size','family_size'], how='left')\ndata_all = data_all.sort_values('PassengerId').reset_index(drop=True)","387a4265":"data_all = pd.merge(data_all, family_ticket_survival, on=['last_name','Ticket'], how='left')\ndata_all = data_all.sort_values('PassengerId').reset_index(drop=True)","289ca5de":"plot_by_target(data_all, 'family_survival')","1fdfd38a":"plot_by_target(data_all, 'family_ticket_survival')","d0d0d364":"plot_by_target(data_all[data_all.family_ticket_count <= 2], 'family_ticket_count', col_wrap=4)","85038386":"plot_by_target(data_all[data_all.family_ticket_count > 2], 'family_ticket_count')","bb2d9b26":"def calc_family_ticket_count_bin(family_ticket_count):\n    if family_ticket_count == 1:\n        return 0\n    elif family_ticket_count <= 4: \n        return 1\n    else:\n        return 2\n        \ndata_all['family_ticket_count_bin'] = data_all.family_ticket_count.map(calc_family_ticket_count_bin)","7e031fd7":"plot_by_target(data_all, 'family_ticket_count_bin')","0e7d7e50":"data_all.info()","1d4c36eb":"fe_1_features = [\n    'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', \n    'family_size', 'family_size_bin', 'name_title_cat', \n    'last_name_family_size', 'last_name_ticket',\n    'family_survival', 'family_ticket_survival',\n    'family_ticket_count', 'family_ticket_count_bin'\n]\n\n# label encoding\nle = LabelEncoder()\n\ndata_all.name_title_cat = le.fit_transform(data_all[['name_title_cat']])\ndata_all.last_name_family_size = le.fit_transform(data_all[['last_name_family_size']])\ndata_all.last_name_ticket = le.fit_transform(data_all[['last_name_ticket']])\n\nX_train = data_all[data_all.train == 1][fe_1_features]\nX_test = data_all[data_all.train == 0][fe_1_features]\n\nprint(f'X_train shape : {X_train.shape}, X_test shape : {X_test.shape}')","384de90b":"def make_prediction(train, target, test, features, model_name, model_results=None,\n                    model=xgb.XGBClassifier(random_state=RANDOM_SEED)):\n    model_results, model = cv_model(train, target, model, \n                                         model_name, model_results)\n\n    show_model_results(model_results)\n    fi = plot_feature_importances(model, features)\n    display(fi)\n    \n    model.fit(train, target)\n    pred = model.predict(test)\n\n    output = f'{model_name}_submission_{datetime.now().strftime(\"%Y%m%d%H%M%S\")}.csv'\n    submit_df = pd.DataFrame()\n    submit_df['PassengerId'] = test_raw.PassengerId\n    submit_df['Survived'] = pred\n    \n    submit_df[['PassengerId','Survived']].to_csv(output, index=False)\n    print(f'submission file {output} is generated.')\n    \n    return model_results","923b5513":"model_results = make_prediction(X_train, y_train, X_test, fe_1_features, 'XGB_FE_1', model_results)","4d2329a5":"data_all['fare_fixed'] = data_all.Fare\/data_all.ticket_count","9d32f7e7":"data_all[['Ticket','Fare','fare_fixed','ticket_count','Pclass']][data_all.ticket_count > 1].sort_values('Ticket').head(6)","d5c3ec9f":"fare_median = data_all.fare_fixed.median()\ndata_all['fare_fixed'] = data_all.fare_fixed.fillna(fare_median)","b32628eb":"plot_distribution_by_target(data_all, 'fare_fixed')","76990df7":"data_all['fare_fixed_log'] = np.log1p(data_all.fare_fixed)","a2325275":"plot_distribution_by_target(data_all, 'fare_fixed_log')","d2c58ace":"age_median_by_sex_title = data_all.groupby(['Sex', 'name_title'], as_index=False).Age.median()\nage_median_by_sex_title","1abbaada":"data_all = pd.merge(data_all, age_median_by_sex_title, on=['Sex', 'name_title'])\ndata_all['Age'] = data_all.apply(lambda row: row.Age_x if not np.isnan(row.Age_x) else row.Age_y, axis=1)\ndata_all = data_all.drop(['Age_x','Age_y'], axis=1).sort_values('PassengerId').reset_index(drop=True)\ndata_all.info()","3752e54a":"plot_distribution_by_target(data_all, 'Age')","16031a5a":"def calc_age_bin(age):\n    if age <= 15:\n        return 0\n    elif age <= 30:\n        return 1\n    elif age <= 60:\n        return 2\n    else:\n        return 3\n        \ndata_all['age_bin'] = data_all.Age.map(calc_age_bin)","015c4bbd":"fe_2_features = [\n    'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', \n    'family_size', 'family_size_bin', 'name_title_cat', \n    'last_name_family_size', 'last_name_ticket',\n    'family_survival', 'family_ticket_survival',\n    'family_ticket_count', 'family_ticket_count_bin',\n    'fare_fixed_log', 'age_bin',\n]\n\n\nX_train = data_all[data_all.train == 1][fe_2_features]\nX_test = data_all[data_all.train == 0][fe_2_features]\n\nprint(f'X_train shape : {X_train.shape}, X_test shape : {X_test.shape}')","b870e572":"model_results = make_prediction(X_train, y_train, X_test, fe_2_features, 'XGB_FE_2', model_results)","8b76b091":"def parse_ticket_str(ticket):\n    arr = ticket.split()\n    if not arr[0].isdigit():\n        txt = arr[0].replace('.', '')\n        txt = txt.split('\/')[0]\n        return re.findall('[a-zA-Z]+', txt)[0]\n    else:\n        return None\n        \ndata_all['ticket_str'] = data_all.Ticket.map(parse_ticket_str)","a8ac1a80":"plot_by_target(data_all, 'ticket_str')","a9dbbc06":"g = sns.catplot(x=\"Pclass\", y=\"fare_fixed_log\", col=\"ticket_str\", hue='Survived',\n                col_wrap=4, data=data_all, kind=\"strip\")\nplt.show()","ddb2bdfa":"def parse_ticket_number(ticket):\n    arr = ticket.split()\n    if len(arr) == 1 and arr[0].isdigit():\n        return int(arr[0])\n    elif len(arr) == 2 and arr[1].isdigit():\n        return int(arr[1])\n    else:\n        if arr[-1].isdigit():\n            return int(arr[-1])\n        else:\n            return np.nan\n    \ndata_all['ticket_number'] = data_all.Ticket.map(parse_ticket_number)","c1bf4544":"def parse_ticket_num_len(ticket):\n    arr = ticket.split()\n    if len(arr) == 1 and arr[0].isdigit():\n        return len(arr[0])\n    elif len(arr) == 2 and arr[1].isdigit():\n        return len(arr[1])\n    else:\n        if arr[-1].isdigit():\n            return len(arr[-1])\n        else:\n            return -1\n    \ndata_all['ticket_num_len'] = data_all.Ticket.map(parse_ticket_num_len)","d008321f":"plot_by_target(data_all, 'ticket_num_len')","045d3093":"g = sns.catplot(x=\"Pclass\", y=\"fare_fixed_log\", col=\"ticket_num_len\", hue='Survived',\n                col_wrap=4, data=data_all, kind=\"strip\")\nplt.show()","4095b192":"data_all['ticket_num_len_4_prefix'] = data_all[data_all.ticket_num_len == 4].ticket_number.map(lambda x: int(str(x)[0]))","1b3b5805":"plot_by_target(data_all, 'ticket_num_len_4_prefix', col_wrap=3)","4af0b03a":"g = sns.catplot(x=\"Pclass\", y=\"fare_fixed_log\", col=\"ticket_num_len_4_prefix\", hue='Survived',\n                col_wrap=3, data=data_all, kind=\"strip\")\nplt.show()","32a3147f":"data_all['ticket_num_len_4_prefix_2'] = data_all[data_all.ticket_num_len == 4].ticket_number.map(lambda x: int(str(x)[:2]))","f585150e":"plot_by_target(data_all, 'ticket_num_len_4_prefix_2')","c0ecdb88":"g = sns.catplot(x=\"Pclass\", y=\"fare_fixed_log\", col=\"ticket_num_len_4_prefix_2\", hue='Survived',\n                col_wrap=4, data=data_all, kind=\"strip\")\nplt.show()","04bb9bf1":"data_all['ticket_num_len_5_prefix'] = data_all[data_all.ticket_num_len == 5].ticket_number.map(lambda x: int(str(x)[0]))","188a1646":"plot_by_target(data_all, 'ticket_num_len_5_prefix', col_wrap=3)","1b1b49d7":"g = sns.catplot(x=\"Pclass\", y=\"fare_fixed_log\", col=\"ticket_num_len_5_prefix\", hue='Survived',\n                col_wrap=3, data=data_all, kind=\"strip\")\nplt.show()","029a8e76":"data_all['ticket_num_len_5_prefix_2'] = data_all[data_all.ticket_num_len == 5].ticket_number.map(lambda x: int(str(x)[:2]))","6c3aae1e":"plot_by_target(data_all, 'ticket_num_len_5_prefix_2')","021f6d4c":"g = sns.catplot(x=\"Pclass\", y=\"fare_fixed_log\", col=\"ticket_num_len_5_prefix_2\", hue='Survived',\n                col_wrap=4, data=data_all, kind=\"strip\")\nplt.show()","9fd449a0":"data_all['ticket_num_len_6_prefix'] = data_all[data_all.ticket_num_len == 6].ticket_number.map(lambda x: int(str(x)[0]))","73cac379":"plot_by_target(data_all, 'ticket_num_len_6_prefix', col_wrap=3)","3c784887":"g = sns.catplot(x=\"Pclass\", y=\"fare_fixed_log\", col=\"ticket_num_len_6_prefix\", hue='Survived',\n                col_wrap=3, data=data_all, kind=\"strip\")\nplt.show()","fe0c4504":"data_all['ticket_num_len_6_prefix_2'] = data_all[data_all.ticket_num_len == 6].ticket_number.map(lambda x: int(str(x)[:2]))","8944e92f":"plot_by_target(data_all, 'ticket_num_len_6_prefix_2')","dfc49bf2":"g = sns.catplot(x=\"Pclass\", y=\"fare_fixed_log\", col=\"ticket_num_len_6_prefix_2\", hue='Survived',\n                col_wrap=4, data=data_all, kind=\"strip\")\nplt.show()","c552efeb":"data_all['ticket_num_len_6_prefix_3'] = data_all[data_all.ticket_num_len == 6].ticket_number.map(lambda x: int(str(x)[:3]))","3d2a77c2":"plot_by_target(data_all, 'ticket_num_len_6_prefix_3', col_wrap=5)","d76f3282":"g = sns.catplot(x=\"Pclass\", y=\"fare_fixed_log\", col=\"ticket_num_len_6_prefix_3\", hue='Survived',\n                col_wrap=4, data=data_all, kind=\"strip\")\nplt.show()","ea03d6e9":"data_all[data_all.ticket_num_len_6_prefix == 1].groupby(['ticket_num_len_6_prefix_3','train'])[['PassengerId','Survived']].agg(['mean','count'])","42a4f7a6":"data_all[data_all.ticket_num_len_6_prefix == 3].groupby(['ticket_num_len_6_prefix_3','train'])[['PassengerId','Survived']].agg(['mean','count'])","15471c3a":"data_all.info()","eccb7819":"fe_3_features = [\n    'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', \n    'family_size', 'family_size_bin', 'name_title_cat', \n    'last_name_family_size', 'last_name_ticket',\n    'family_survival', 'family_ticket_survival',\n    'family_ticket_count', 'family_ticket_count_bin',\n    'fare_fixed_log', 'age_bin',\n    'ticket_str', 'ticket_num_len',\n    'ticket_num_len_4_prefix', 'ticket_num_len_4_prefix_2',\n    'ticket_num_len_5_prefix', 'ticket_num_len_5_prefix_2',\n    'ticket_num_len_6_prefix', 'ticket_num_len_6_prefix_2', 'ticket_num_len_6_prefix_3',\n]\n\n# fill missing values\ndata_all.ticket_str = data_all.ticket_str.fillna('X')\n\ndata_all.ticket_num_len_4_prefix = data_all.ticket_num_len_4_prefix.fillna(-1)\ndata_all.ticket_num_len_4_prefix_2 = data_all.ticket_num_len_4_prefix_2.fillna(-1)\ndata_all.ticket_num_len_5_prefix = data_all.ticket_num_len_5_prefix.fillna(-1)\ndata_all.ticket_num_len_5_prefix_2 = data_all.ticket_num_len_5_prefix_2.fillna(-1)\ndata_all.ticket_num_len_6_prefix = data_all.ticket_num_len_6_prefix.fillna(-1)\ndata_all.ticket_num_len_6_prefix_2 = data_all.ticket_num_len_6_prefix_2.fillna(-1)\ndata_all.ticket_num_len_6_prefix_3 = data_all.ticket_num_len_6_prefix_3.fillna(-1)\n\ndata_all.ticket_num_len_4_prefix = data_all.ticket_num_len_4_prefix.astype(int)\ndata_all.ticket_num_len_4_prefix_2 = data_all.ticket_num_len_4_prefix_2.astype(int)\ndata_all.ticket_num_len_5_prefix = data_all.ticket_num_len_5_prefix.astype(int)\ndata_all.ticket_num_len_5_prefix_2 = data_all.ticket_num_len_5_prefix_2.astype(int)\ndata_all.ticket_num_len_6_prefix = data_all.ticket_num_len_6_prefix.astype(int)\ndata_all.ticket_num_len_6_prefix_2 = data_all.ticket_num_len_6_prefix_2.astype(int)\ndata_all.ticket_num_len_6_prefix_3 = data_all.ticket_num_len_6_prefix_3.astype(int)\n\n# label encoding\nle = LabelEncoder()\n\ndata_all.ticket_str = le.fit_transform(data_all[['ticket_str']])\n\nX_train = data_all[data_all.train == 1][fe_3_features]\nX_test = data_all[data_all.train == 0][fe_3_features]\n\nprint(f'X_train shape : {X_train.shape}, X_test shape : {X_test.shape}')","ac03c6b0":"model_results = make_prediction(X_train, y_train, X_test, fe_3_features, 'XGB_FE_3', model_results)","12b0513f":"data_all.Cabin.sort_values().unique()","76f5cba1":"data_all['cabin_cat'] = data_all.Cabin.fillna('X').str[0]","89bd988c":"plot_by_target(data_all[~data_all.cabin_cat.isin(['X'])], 'cabin_cat')","e61b7e84":"def calc_cabin_len(cabin):\n    if type(cabin) == float:\n        return 0\n    else:\n        return len(cabin.split())\n\ndata_all['cabin_len'] = data_all.Cabin.map(calc_cabin_len)","208aaa2d":"plot_by_target(data_all[data_all.cabin_len > 0], 'cabin_len')","b7f82bd1":"fe_4_features = [\n    'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', \n    'family_size', 'family_size_bin', 'name_title_cat', \n    'last_name_family_size', 'last_name_ticket',\n    'family_survival', 'family_ticket_survival',\n    'family_ticket_count', 'family_ticket_count_bin',\n    'fare_fixed_log', 'age_bin',\n    'ticket_str', 'ticket_num_len',\n    'ticket_num_len_4_prefix', 'ticket_num_len_4_prefix_2',\n    'ticket_num_len_5_prefix', 'ticket_num_len_5_prefix_2',\n    'ticket_num_len_6_prefix', 'ticket_num_len_6_prefix_2', 'ticket_num_len_6_prefix_3',\n    'cabin_cat', 'cabin_len',\n]\n\n# label encoding\nle = LabelEncoder()\n\ndata_all.cabin_cat = le.fit_transform(data_all[['cabin_cat']])\n\nX_train = data_all[data_all.train == 1][fe_4_features]\nX_test = data_all[data_all.train == 0][fe_4_features]\n\nprint(f'X_train shape : {X_train.shape}, X_test shape : {X_test.shape}')","24275814":"model_results = make_prediction(X_train, y_train, X_test, fe_4_features, 'XGB_FE_4', model_results)","7fae0ab9":"def plot_correlation_heatmap(df, variables):\n    # Calculate the correlations\n    corr_mat = df[variables].corr().round(2)\n\n    # Draw a correlation heatmap\n    plt.figure(figsize = (18, 16))\n    sns.heatmap(corr_mat, vmin=-0.6, vmax=0.6, center=0, cmap='viridis', annot=True)\n    plt.title('Feature Correlation Heatmap\\n')\n    plt.show()","a6aaed5e":"plot_correlation_heatmap(data_all[data_all.train == 1], ['Survived'] + list(fe_4_features))","15169f2f":"fe_4_sel_features = [\n    'Pclass', 'Sex', 'Age', \n    'family_size_bin',\n    'name_title_cat', \n    'last_name_family_size',\n    'last_name_ticket',\n    'family_ticket_survival',\n    'fare_fixed_log',\n    'ticket_str',\n    'ticket_num_len_4_prefix_2',\n    'ticket_num_len_5_prefix_2',\n    'ticket_num_len_6_prefix_3',\n]\n\nplot_correlation_heatmap(data_all, ['Survived'] + list(fe_4_sel_features))","f9353757":"X_train = data_all[data_all.train == 1][fe_4_sel_features]\nX_test = data_all[data_all.train == 0][fe_4_sel_features]\n\nprint(f'X_train shape : {X_train.shape}, X_test shape : {X_test.shape}')\n\nmodel_results = make_prediction(X_train, y_train, X_test, fe_4_sel_features, 'XGB_FE_4_SEL', \n                                model_results=model_results)","35cc5682":" \uac00\uc871 \uad00\uacc4\uac00 \uc788\uace0, Train, Test \uc591\ucabd\uc5d0 \ub2e4 \uac00\uc871\uc774 \uc788\ub294 \ub370\uc774\ud130\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","309967b4":"\uc774\ub807\uac8c \uc0c8\ub85c \ub9cc\ub4e0 name_title_cat feature\uc758 Survived \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. ","a83fb95a":"\ub370\uc774\ud130 \uc911\uc5d0 Age\uac00 \uc911\uc694\ud55c feature\uc778\ub370 200\uac1c\uac00 \ub118\ub294 \uacb0\uce21\uce58\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uacb0\uce21\uce58\ub97c \uba54\uafb8\uae30 \uc704\ud574 \ub2e8\uc21c\ud788 \uc804\uccb4 Median\uc73c\ub85c \ucc44\uc6b0\ub294 \uac83\uc774 \uc544\ub2cc \uc131\ubcc4\uacfc Title\ubcc4 Median \uac12\uc744 \uad6c\ud574 \ud574\ub2f9 \uac12\uc73c\ub85c \ucc44\uc6b0\uaca0\uc2b5\ub2c8\ub2e4.","1e28a9d1":"\uc774\ub807\uac8c \ub9cc\ub4e0 feature\uc640 Survived\uc758 \uad00\uacc4\ub97c \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.\n\uadf8\ub798\ud504\ub97c \ubcf4\uba74 \uac12\uc774 1\uc77c \ub54c family_ticket_survival\uc774 \uc0b4\uc544\ub0a8\uc740 \uc0ac\ub78c\uc758 \ube44\uc728\uc774 \ub354 \ub192\uc740 \uac78 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","fb51875c":"Title\uacfc \uc131\ubcc4 \ub370\uc774\ud130\ub97c \ubcf4\uba74 Dr\ub97c \uc81c\uc678\ud55c \ub098\uba38\uc9c0 Title\uc740 \uc131\ubcc4\uc774 \uad6c\ubd84\ub418\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","483b3526":"Feature Engineering\uc744 \ud1b5\ud574 Feature\ub97c \ucd94\uac00\ud574\uac00\uba74\uc11c \uc131\ub2a5 \ubcc0\ud654\ub97c \ubcf4\uae30 \uc804\uc5d0 \uae30\ubcf8 Feature\uc758 Baseline \ubaa8\ub378 \uc131\ub2a5\uacfc Feature Importance \ud655\uc778\ud569\ub2c8\ub2e4.","a86f81c2":"family_size\uc5d0 \ub530\ub978 Survived\uc758 \ubd84\ud3ec\ub97c \ud655\uc778\ud574\ubcf4\uba74 2-4\uba85\uc77c \ub54c \uc0b4\uc544\ub0a8\uc740 \uc2b9\uac1d\uc758 \ube44\uc728\uc774 \ub354 \ud070 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","e0e3863c":"\ub450 \ubc88\uc9f8 Feature Engineering\uc744 \ud1b5\ud574 \ub9cc\ub4e0 feature\ub97c \ucd94\uac00\ud574\uc11c Train, Test \ub370\uc774\ud130\ub97c \ub9cc\ub4ed\ub2c8\ub2e4. ","a81f3ada":"\uc9c0\uae08\uae4c\uc9c0 \ub9cc\ub4e0 feature\ub4e4\uacfc target feature\uc778 Survived feature \uac04\uc758 correlation\uacfc feature\ub4e4 \uac04\uc758 correlation\uc744 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.\nfeature\uc758 \uc911\uc694\uc131\uc744 \uc54c \uc218 \uc788\uace0, feature\ub4e4 \uac04\uc758 correlation\uc774 \uc9c0\ub098\uce58\uac8c \ub192\uc740 feature\ub4e4\uc740 \uc911\ubcf5\ub41c feature\ub77c \uc0ad\uc81c\ud574\uc57c \ud560 feature\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","45c3e5eb":"Survived\uc5d0 \ub530\ub978 Age\uc758 \ubd84\ud3ec\ub97c \ud655\uc778\ud558\uace0, binning \ucc98\ub9ac\ub97c \ud574\uc11c feature\ub97c \ub9cc\ub4ed\ub2c8\ub2e4. ","67e5ba13":"fare_fixed\uc758 \uacb0\uce21\uce58\uc5d0 \ub300\ud574 Median \uac12\uc73c\ub85c \ucc44\uc6c1\ub2c8\ub2e4.","6d2cce66":"Survived\uc5d0 \ub530\ub978 fare_fixed\uc758 \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","8d5404e4":"\uc138 \ubc88\uc9f8 Feature Engineering\uc744 \ud1b5\ud574 \ub9cc\ub4e0 feature\ub97c \ucd94\uac00\ud574\uc11c Train, Test \ub370\uc774\ud130\ub97c \ub9cc\ub4ed\ub2c8\ub2e4. ","2ee263e8":"\ub124 \ubc88\uc9f8 Feature Engineering\uc744 \ud1b5\ud574 \ub9cc\ub4e0 feature\ub97c \ucd94\uac00\ud574\uc11c Train, Test \ub370\uc774\ud130\ub97c \ub9cc\ub4ed\ub2c8\ub2e4. ","e5e7d517":"Train \ub370\uc774\ud130\uc758 Feature, Data Type, \uacb0\uce21\uce58\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.","82f7b43b":"\uc704\uc758 \ub370\uc774\ud130\ub97c \ubcf4\uba74 \uc22b\uc790 6\uc790\ub9ac Ticket\uc740 \uc55e\uc790\ub9ac\uac00 1\uc740 1\ub4f1\uc11d, 2\ub294 2\ub4f1\uc11d, 3\uc740 3\ub4f1\uc11d\uc784\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n1\ub4f1\uc11d \uc2b9\uac1d\uc774 \uac00\uc7a5 \ub9ce\uc774 \uc0b4\uc544\ub0a8\uace0, 3\ub4f1\uc11d \uc2b9\uac1d\uc774 \uac00\uc7a5 \ub9ce\uc774 \uc8fd\uc740 \uac83\uc744 \uc54c\uace0 \uc788\ub294\ub370\uc694.\n\uc704\uc758 \ub370\uc774\ud130\uc5d0\uc11c \uc22b\uc790 6\uc790\ub9ac Ticket \uc55e\uc790\ub9ac 3\uac1c\ub97c \ubcf4\uba74 1\ub4f1\uc11d\uc784\uc5d0\ub3c4 \uc2b9\uac1d\uc774 \ub9ce\uc774 \uc8fd\uc740 \uc790\ub9ac\uc218\uac00 \uc788\uace0 3\ub4f1\uc11d\uc784\uc5d0\ub3c4 \uc2b9\uac1d\uc774 \ub9ce\uc774 \uc0b4\uc544\ub0a8\uc740 \uc790\ub9ac\uc218\uac00 \uc788\uc5b4\uc11c \uc758\ubbf8\uc788\ub294 feature\uac00 \ub418\uc9c0 \uc54a\uc744\uae4c \uc608\uc0c1\ub429\ub2c8\ub2e4.","50080bbe":"Correlation\uc774 \ub192\uc544 \uc911\ubcf5\ub41c feature\ub97c \uc815\ub9ac\ud55c \ud6c4 \ucd5c\uc885 \uc0ac\uc6a9\ud560 feature\ub4e4\uc758 correlation\uc744 \ub2e4\uc2dc \ubd05\ub2c8\ub2e4.","d1035455":"\ub370\uc774\ud130\ub97c \uc77d\uc5b4\uc635\ub2c8\ub2e4.","4ac92458":"family_ticket_count_bin feature\uc640 Survived\uc640\uc758 \ubd84\ud3ec\ub97c \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.","07aff09f":"Title\uc5d0 \ub530\ub978 Survived \ube44\uc728\uc744 \ubcf4\uba74 \uc5ed\uc2dc \uc5ec\uc131\uc744 \uc9c0\uce6d\ud558\ub294 Title\uc758 \uc0dd\uc874\uc728\uc774 \ub192\uc740 \uac83\uacfc \ub0a8\uc790\uc774\uc9c0\ub9cc \ub098\uc774\uac00 \uc5b4\ub9b0 Master\uc758 \uc0dd\uc874\uc728\uc774 \ub192\uc740 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","4075665c":"\uc815\uaddc \ubd84\ud3ec \uace1\uc120\uc744 \ub530\ub974\ub3c4\ub85d fare_fixed\uc5d0 \ub85c\uadf8\ub97c \ucde8\ud558\uace0 \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","e7c117b1":"XGBoost\ub97c \uae30\ubcf8 \uba38\uc2e0 \ub7ec\ub2dd \ubaa8\ub378\ub85c \ud574\uc11c Cross Validation \uacb0\uacfc\uc640 Feature Engineering\uc744 \ud1b5\ud55c \ubaa8\ub378 \uc131\ub2a5 \ubc0f Feature Importance \ud655\uc778, Test \ub370\uc774\ud130\ub97c \uc608\uce21\ud574\uc11c Submit\ud560 \uacb0\uacfc \ud30c\uc77c\uae4c\uc9c0 \uc0dd\uc131\ud558\ub294 function\uc744 \uc815\uc758\ud569\ub2c8\ub2e4.","54dde784":"\uc774\ub807\uac8c \ub9cc\ub4e0 \uac00\uc871 \uad00\uacc4\uc758 feature\ub97c \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub824\uba74 \uc77c\ub2e8 \uac00\uc871\uc774 \uc5c6\ub294 \uc0ac\ub78c(family_size = 1)\uc740 \uc81c\uc678\ud574\uc57c \ud569\ub2c8\ub2e4.\n\ub610, \uc0dd\uac01\ud574\ubcf4\uba74.. \uac00\uc871\uc774 Train, Test \ub370\uc774\ud130 \uc591\ucabd\uc5d0 \ub2e4 \uc788\uc5b4\uc57c \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378\uc5d0\uc11c Training\ud558\ub294 \uc758\ubbf8\uac00 \uc788\uc744\ud150\ub370, \uac00\uc871 \uc804\uccb4\uac00 Train \ub370\uc774\ud130\uc5d0\ub9cc \uc788\ub2e4\uba74 \uc774\ub7f0 \ub370\uc774\ud130\ub294 \uad6c\ubd84\ud574\ubd10\uc57c \uc758\ubbf8\uac00 \uc5c6\uc744\uac70\ub77c\ub294 \uac00\uc815\uc744 \uac00\uc9c0\uace0 Train, Test \uc591\ucabd\uc5d0 \ub2e4 \uac00\uc871\uc774 \uc788\ub294 \ub370\uc774\ud130\ub9cc \ubf51\uc544\uc11c Labeling \ud560 \uc218 \uc788\ub3c4\ub85d \ucc98\ub9ac\ud588\uc2b5\ub2c8\ub2e4.","f69caa8a":"\ub2e4\uc74c\uacfc \uac19\uc774 feature\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n* \uac00\uc871\uc774 \uc788\uace0, \uac00\uc871 \uc911\uc5d0 \ud55c \uc0ac\ub78c\uc774\ub77c\ub3c4 \uc0b4\uc544\ub0a8\uc740 \uc0ac\ub78c\uc774 \uc788\ub2e4\uba74 1\n* \uac00\uc871\uc774 \uc804\ubd80 \uc8fd\uc5c8\ub2e4\uba74 0\n* \uc704 \ucf00\uc774\uc2a4\uc5d0 \ud574\ub2f9\ud558\uc9c0 \uc54a\ub294 default \uac12\uc740 0.5","803e227a":"\ub370\uc774\ud130\ub97c \ubcf4\uba74 Ticket\uc774 \ub3d9\uc77c\ud55c \uc0ac\ub78c\uc758 Fare\uac00 \uac19\uc740 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. Ticket\uc744 \uac19\uc774 \uad6c\ub9e4\ud55c \uc0ac\ub78c\uc758 Fare\ub97c \ub3d9\uc77c\ud558\uac8c \uae30\ub85d\ud55c \uac78\ub85c \uc608\uc0c1\ub418\ub2c8, \uac1c\uc778\ubcc4 Fare\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574 Fare\ub97c Ticket Count\ub85c \ub098\ub220\uc11c \uc0c8\ub85c\uc6b4 feature\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.","66653299":"\uc774\ub807\uac8c \uad6c\ubd84\ud55c feature\uc5d0\uc11c \uac00\uc871 \uad00\uacc4\uac00 \uc5c6\uc774 \ud640\ub85c \ud0c4 \uc0ac\ub78c\uc774\ub098 \uac00\uc871 \uad00\uacc4\uac00 \uc788\uc9c0\ub9cc Train \ub370\uc774\ud130\uc5d0\ub9cc \uac00\uc871 \uad00\uacc4\uac00 \uc788\ub294 \ub370\uc774\ud130\ub294 X\ub85c \ud45c\uc2dc\ud569\ub2c8\ub2e4.","9e205b7f":"\uacb0\uce21\uce58\ub97c \uc81c\uc678\ud55c \ub370\uc774\ud130\uc758 Survived\uc5d0 \ub530\ub978 \ubd84\ud3ec\ub97c \ubd05\ub2c8\ub2e4. \ub300\ubd80\ubd84 \uc0dd\uc874\uc790 \ube44\uc728\uc774 \ub354 \ub192\uc740 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","d8f1fdfc":"\ubaa8\ub378\uc758 CV \uc131\ub2a5\uacfc Feature Importance\ub97c \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.","cee20b87":"\ucd5c\uc885 \uc120\ud0dd\ub41c feature\ub4e4\ub85c Train, Test \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uace0, \ubaa8\ub378\uc758 CV \uc131\ub2a5\uacfc Feature Importance\ub97c \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.","54aea55d":"Feature Engineering \uc791\uc5c5\ud558\uae30 \ud3b8\ud558\ub3c4\ub85d Train, Test \ub370\uc774\ud130\ub97c \ud569\uce69\ub2c8\ub2e4.","9093bf29":"\ubaa8\ub378\uc758 CV \uc131\ub2a5\uacfc Feature Importance\ub97c \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.","dbb7ba77":"\ub370\uc774\ud130\ub97c \uc880 \ub354 \uc790\uc138\ud788 \ubcf4\uae30\uc704\ud574 ticket_str, Survived\ubcc4\ub85c Pclass, fare_fixed_log\uc758 \uad00\uacc4\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. ","8556293a":"Ticket\uc758 \uc22b\uc790 \uc790\ub9ac\uc218\uc5d0 \ub530\ub77c \uc0dd\uc874\uc728\uc774 \ub2e4\ub974\uc9c0 \uc54a\uc744\uae4c \ud558\ub294 \uac00\uc815\uc744 \ud574\uc11c \uc790\ub9ac\uc218\ub3c4 feature\ub85c \ub9cc\ub4ed\ub2c8\ub2e4.","14c07200":"\ud569\uce5c \ub370\uc774\ud130\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.","c34716d5":"\uc800\ub294 \uc774\ubc88\uc5d0 \ud0c0\uc774\ud0c0\ub2c9 \ubbf8\ub2c8 \uce90\uae00\uc744 \uc9c4\ud589\ud558\uba74\uc11c Ticket\uacfc Name \ub450 \uac00\uc9c0 feature\ub97c \uc790\uc138\ud788 \ubd24\ub294\ub370\uc694.\n\uac19\uc740 \uac00\uc871\uc774\uba74 \uc0dd\uc874\uc728\uc774 \uc11c\ub85c \uc5f0\uad00\uc131\uc774 \uc788\uc9c0 \uc54a\uc744\uae4c \ud558\ub294 \uac00\uc815\ud558\uc5d0 Name\uc5d0\uc11c Last Name\uc744 \ubf51\uc544\ub0b4\uc11c \uac00\uc871 \uad00\uacc4\ub97c \uc5f0\uacb0\ud574\uc92c\uc2b5\ub2c8\ub2e4.\n\uadf8\ub7f0\ub370 Last Name\uc774 \ub3d9\uc77c\ud55c \ub2e4\ub978 \uac00\uc871\uc774 \uc788\uc744 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 Family Size\uae4c\uc9c0 \ub354\ud574\uc11c feature\ub97c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.\n\ub610, Ticket \ub370\uc774\ud130\ub3c4 \uc790\uc138\ud788 \ubcf4\uba74 \uac19\uc740 \uac00\uc871\uc774 \ub3d9\uc77c\ud55c Ticket\uc778 \ub370\uc774\ud130\uac00 \ub9ce\uc740 \uac83\uc744 \uc54c \uc218 \uc788\uc5b4\uc11c \ub9c8\ucc2c\uac00\uc9c0\ub85c Last Nam\uacfc Ticket\uc744 \uc5f0\uacb0\ud574\uc11c feature\ub97c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.","af2d14a0":"\uac00\uc871 \uad00\uacc4\uac00 \uc5c6\uc774 \ud640\ub85c \ud0c4 \uc0ac\ub78c\uc774\ub098 \uac00\uc871 \uad00\uacc4\uac00 \uc788\uc9c0\ub9cc Train \ub370\uc774\ud130\uc5d0\ub9cc \uac00\uc871 \uad00\uacc4\uac00 \uc788\ub294 \ub370\uc774\ud130\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","9dd7f81c":"Ticket \ub370\uc774\ud130\ub97c \ubcf4\uba74 \ub300\ubd80\ubd84 \uc22b\uc790\ub85c \ub418\uc5b4 \uc788\uc9c0\ub9cc \ubb38\uc790\uc640 \uc22b\uc790\uc758 \uc870\ud569\uc73c\ub85c \ub41c Ticket\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Ticket \ubb38\uc790\uc5f4\uc744 Feature\ub85c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ud30c\uc2f1\ud569\ub2c8\ub2e4.","973673a5":"\uccab \ubc88\uc9f8 Feature Engineering\uc744 \ud1b5\ud574 \ub9cc\ub4e0 feature\ub97c \ucd94\uac00\ud574\uc11c Train, Test \ub370\uc774\ud130\ub97c \ub9cc\ub4ed\ub2c8\ub2e4. ","d2d8616e":"ticket_str feature\uc640 Survived\uac04\uc758 \ubd84\ud3ec\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.","97e01319":"Family Size\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c Family Ticket Count\ub3c4 binning \ucc98\ub9ac\ub97c \ud574\uc11c feature\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.","c1b897a1":"\uc774\ub807\uac8c \ub9cc\ub4e0 \ub370\uc774\ud130\ub97c data_all\uacfc \ud569\uce69\ub2c8\ub2e4.","e002c281":"Title\uc5d0 \ub530\ub978 \ub098\uc774\uc758 Median \uac12\uc744 \ubcf4\uba74, Master\ub294 \ub0a8\uc790\uc544\uc774\uc5d0\uac8c \ubd99\uc774\ub294 Titlem\ub85c \ubcf4\uc785\ub2c8\ub2e4.","05e9fc5d":"Cabin \ubb38\uc790\uc5f4\uc5d0\uc11c \uccab \uae00\uc790\ub97c \ubf51\uc544\ub0b4\uc11c feature\ub85c \uc4f8 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uacb0\uce21\uce58\ub294 X\ub85c \ucc44\uc6b0\uace0 \uccab \uae00\uc790\ub97c feature\ub85c \ub9cc\ub4ed\ub2c8\ub2e4.","09f01bf8":"Title\uc758 \ubd84\ud3ec\ub97c \ubcf4\uba74 Mr, Miss, Mrs, Master\uac00 \uac00\uc7a5 \ub9ce\uace0 \ub098\uba38\uc9c0 \ub370\uc774\ud130\ub294 \ub9e4\uc6b0 \uc801\uc740 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","955c80e8":"Test \ub370\uc774\ud130\uc758 Feature, Data Type, \uacb0\uce21\uce58\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.","30aef009":"Ticket \uc22b\uc790 \uc55e\uc790\ub9ac\uc218\uc5d0 \ub530\ub77c \uc2b9\uac1d\uc758 \uc790\ub9ac\uac00 \uacb0\uc815\ub418\uc9c0 \uc54a\uc744\uae4c \ud558\ub294 \uac00\uc815\uc5d0 \uc790\ub9ac\uc218\ub3c4 feature\ub85c \ub9cc\ub4e4\uc5b4\ubd05\ub2c8\ub2e4.\n\ub370\uc774\ud130\uac00 \uac00\uc7a5 \ub9ce\uc740 4, 5, 6 \uae38\uc774\uc758 Ticket\uc758 \uc55e\uc790\ub9ac\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n4, 5 \uae38\uc774\ub294 \ub450 \ubc88\uc9f8 \uc55e\uc790\ub9ac\uae4c\uc9c0, 6 \uc790\ub9ac \uae38\uc774\ub294 \uc138 \ubc88\uc9f8 \uc55e\uc790\ub9ac\uae4c\uc9c0 feature\ub85c \ub9cc\ub4ed\ub2c8\ub2e4.","006da6c5":"Ticket \uc22b\uc790 \uc790\ub9ac\uc218\uc5d0 \ub530\ub978 Survived\uc758 \ubd84\ud3ec\ub97c \ubcf4\uba74 \ub2e4\uc12f\uc790\ub9ac \uc22b\uc790\uc758 Ticket\uc774 \uc0dd\uc874\uc728\uc774 \ub192\uc740 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","995f279b":"\ub610, Cabin \ub370\uc774\ud130\ub97c \ubcf4\uba74 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \ubb38\uc790\uc5f4\uc774 \uc788\ub294 \uac78\ub85c \ubd10\uc11c Cabin\uc744 \ub450 \uac1c \uc774\uc0c1 \uc0ac\uc6a9\ud55c \uc2b9\uac1d\ub3c4 \uc788\ub294 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4. \uc774\uac83\ub3c4 feature\ub85c \ub9cc\ub4ed\ub2c8\ub2e4.","8823d2a2":"Ticket \uc22b\uc790 \uc790\ub9ac\uc218\uc640 fare_fixed_log, Pclass\uc758 \uad00\uacc4\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","2c1333cc":"\uc774\ub7ec\ud55c \uc815\ubcf4\ub97c \ubc14\ud0d5\uc73c\ub85c \uc0dd\uc874\uc728\uc774 \ub192\uc740 \ub0a8\uc790 \uc544\uc774\uc778 Master\ub97c \uc81c\uc678\ud55c \ub098\uba38\uc9c0 \ub0a8\uc790\ub97c \uc9c0\uce6d\ud558\ub294 Title\uc740 Mr\ub85c \ud569\uce58\uace0, \uc5ec\uc790\ub97c \uc9c0\uce6d\ud558\ub294 Title\uc740 \ub098\uc774\uc5d0 \ub530\ub77c Mrs, Miss\ub85c \ud569\uce69\ub2c8\ub2e4.","4f2ad0a8":"\ubaa8\ub378\uc758 CV \uc131\ub2a5\uacfc Feature Importance\ub97c \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.","6dbd3f32":"\ub9c8\uc9c0\ub9c9\uc73c\ub85c Cabin \ub370\uc774\ud130\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","2b1bda7d":"Ticket\uc758 \ubb38\uc790\uc5f4\uc744 \ucc98\ub9ac\ud588\uc73c\ub2c8 \uc774\uc81c Ticket\uc758 \uc22b\uc790 \ubd80\ubd84\uc744 \ubf51\uc544\uc11c feature\ub85c \ub9cc\ub4ed\ub2c8\ub2e4.","d9c2a53a":"SibSp + Parch + 1(\uc790\uae30\uc790\uc2e0)\uc744 \uacc4\uc0b0\ud574\uc11c family_size feature\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.","7a256bb8":"\uc2b9\uac1d\uc758 \uc774\ub984\uc744 \ubcf4\uba74 Mr, Mrs \ub4f1\uc758 Title\uc744 Feature\ub85c \ubf51\uc544\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","5858e0b0":"Baseline \ubaa8\ub378\uc5d0 \ube44\ud574 CV \uc131\ub2a5\uc774 \uc62c\ub77c\uac00\uace0 \uc0c8\ub86d\uac8c \ub9cc\ub4e0 feature\ub4e4\uc774 \uc911\uc694\ud55c \uc5ed\ud560\uc744 \ud55c \uac78 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","88dcfb50":"\uc704 \ubd84\ud3ec\uc5d0 \ub530\ub77c \uc0b4\uc544\ub0a8\uc740 \uc2b9\uac1d\uc744 \uc798 \uad6c\ubd84\ud560 \uc218 \uc788\ub294 2-4\uba85\uc744 \uad6c\ubd84\ud574\uc11c binning\ud558\ub294 family_size_bin feature\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.","11a70a80":"\uc5ec\uae30\uc11c \ud55c \ubc88 \ub354 \uc0dd\uac01\ud574\ubcf4\uba74, \uac00\uc871 \uad00\uacc4\uc5d0 \uc788\ub294 \uc0ac\ub78c \uc911\uc5d0 \uc0b4\uc544\ub0a8\uc740 \uc0ac\ub78c\uc774 \uc788\ub2e4\uba74, Test \ub370\uc774\ud130\uc758 \uac19\uc740 \uac00\uc871\uc778 \uc0ac\ub78c\ub3c4 \uc0b4\uc544\ub0a8\uc744 \ud655\ub960\uc774 \ub192\uc9c0 \uc54a\uc744\uae4c\ub77c\ub294 \uac00\uc815\uc744 \ud588\uc2b5\ub2c8\ub2e4.\n\uadf8\ub7ec\ud55c \uad00\uacc4\ub97c \uc5f0\uacb0\ud574\uc8fc\ub294 feature\ub97c Last Name, Family Size\uc640 Last Name, Ticket\uc5d0 \ub300\ud574 \uac01\uac01 \ub9cc\ub4ed\ub2c8\ub2e4.","4229187f":"family_size_bin feature\uc5d0 \ub530\ub978 Survived\uc758 \ubd84\ud3ec\ub97c \ud655\uc778\ud569\ub2c8\ub2e4."}}