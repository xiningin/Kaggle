{"cell_type":{"d3485544":"code","1e658269":"code","7f8b5a5f":"code","ff53f899":"code","40737c7c":"code","1cf474e4":"code","382e8f8e":"code","b7156fe5":"code","2e9a0af7":"code","ebd92821":"code","5ec6d712":"code","d9ce9958":"code","958531e2":"code","ad809f5d":"code","cc91c7a7":"code","9d7a1db4":"code","6c4f1bcf":"code","fd433112":"code","117aa7d5":"code","8aa9296f":"code","8e16b5bd":"code","b0848e1b":"code","74ca0a82":"code","3c237e30":"code","2513fde7":"code","d5acced4":"code","f91ca9ad":"code","9e0546f5":"code","28808cee":"code","06360505":"code","912c11de":"code","5697e41a":"code","9b294a1b":"code","fc8bdad7":"code","1e660877":"code","5bd02ab2":"code","f8891fbf":"code","67e6246d":"code","b49f59e9":"code","59d66623":"code","ffe852ba":"code","99fb468d":"code","2c52ad1a":"code","a59cd916":"code","b4436afd":"code","50a0d576":"code","51a01149":"code","ad8179b7":"code","ffa2c5c7":"code","ef6868b1":"code","d56faf43":"code","4aade3b1":"code","d3117005":"code","5b6e5eb8":"code","7832215c":"code","a8081060":"code","8ddff9f5":"code","d12a57a9":"code","24a6220a":"code","8dd0a16e":"code","84eb6e09":"code","d11e2412":"code","c7ace7ca":"code","4421bffc":"code","bb66450e":"code","79306792":"code","9a39a1d9":"code","f353b83f":"code","08678bbf":"code","cc327d69":"code","dd817555":"code","f6a976aa":"code","72f808f4":"markdown","6410a27b":"markdown","2c57daf2":"markdown","fd6d471d":"markdown","26980cd1":"markdown","0e9393aa":"markdown","857a9863":"markdown","a36d4a38":"markdown","cc9b7117":"markdown","4743210b":"markdown","4fc686ad":"markdown","3ec25d5f":"markdown","5337f926":"markdown","0c7339bf":"markdown","57d519db":"markdown","8d254c17":"markdown","0a35af1d":"markdown","09016fe6":"markdown","87f1502d":"markdown","45fd5504":"markdown","b9fb352f":"markdown","605c0799":"markdown","3dcc6e6d":"markdown","302fb93e":"markdown","d56a725f":"markdown","9411b090":"markdown","41bfdb0a":"markdown","ba8b5a5e":"markdown","cc160df8":"markdown","cab57b9a":"markdown"},"source":{"d3485544":"import pandas as pd\nimport numpy as np\nimport plotly.offline as py\nfrom plotly import graph_objs as go\nimport plotly.figure_factory as ff\npy.init_notebook_mode(connected=True)\nimport plotly.tools as tls","1e658269":"teach=pd.read_csv('..\/input\/teachings.csv')\nprint(teach.shape)\nteach.head()\n","7f8b5a5f":"print(len(teach.instructor_id.unique()))\nprint(len(teach.section_uuid.unique()))","ff53f899":"sub=pd.read_csv('..\/input\/subjects.csv')\nprint(sub.shape)\nsub.head()","40737c7c":"len(sub.code.unique())","1cf474e4":"course=pd.read_csv('..\/input\/courses.csv')\nprint(course.shape)\ncourse.head()","382e8f8e":"offer=pd.read_csv('..\/input\/course_offerings.csv')\nprint(offer.shape)\noffer.head()","b7156fe5":"print(len(offer.term_code.unique()))\nprint(len(offer.course_uuid.unique()))\nprint(len(offer.uuid.unique()))","2e9a0af7":"sub_mem=pd.read_csv('..\/input\/subject_memberships.csv')\nprint(sub_mem.shape)\nsub_mem.head()","ebd92821":"inst=pd.read_csv('..\/input\/instructors.csv')\nprint(inst.shape)\ninst.head()","5ec6d712":"section=pd.read_csv('..\/input\/sections.csv')\nprint(section.shape)\nsection.head()","d9ce9958":"print(len(section.uuid.unique()))\nprint(len(section.course_offering_uuid.unique()))\nprint(section.section_type.unique())","958531e2":"schedule=pd.read_csv('..\/input\/schedules.csv')\nprint(schedule.shape)\nschedule.head()","ad809f5d":"schedule['num_days']=schedule.select_dtypes(include=['bool']).sum(axis=1)\nschedule['duration']=schedule['end_time']-schedule['start_time']","cc91c7a7":"schedule.head()","9d7a1db4":"room=pd.read_csv('..\/input\/rooms.csv')\nprint(room.shape)\nroom.head()","6c4f1bcf":"print(len(room.facility_code.unique()))","fd433112":"grade=pd.read_csv('..\/input\/grade_distributions.csv')\nprint(grade.shape)\ngrade.head()","117aa7d5":"print(len(grade.course_offering_uuid.unique()))","8aa9296f":"grade['avg_gpa']=(((grade['a_count']*4)+(grade['ab_count']*3.5)+(grade['b_count']*3)+(grade['bc_count']*2.5)+\n(grade['c_count']*2)+(grade['d_count']*1))\/(grade['a_count']+grade['ab_count']+grade['b_count']+grade['bc_count']+\ngrade['c_count']+grade['d_count']))","8e16b5bd":"grade.head()","b0848e1b":"teach_v1=teach.merge(inst,left_on='instructor_id',right_on='id')\nprint(teach_v1.head())\nteach_v1.shape","74ca0a82":"temp_series=teach_v1.name.value_counts()[0:10]\nteachers=np.array(temp_series.index)\nnum_class=np.array(temp_series)\nnum_class","3c237e30":"trace = go.Bar(\n    y=num_class,\n    x=teachers,\n    orientation = 'v'\n)\n\nlayout = dict(\n    title='Number of Classes Taught by Instructors 2006-2017',\n    yaxis= dict(title='Number of Classes'),\n    xaxis= dict(title='Name of Instructor')\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Superheroes\")","2513fde7":"teach_v1.groupby('instructor_id').name.count().mean()","d5acced4":"grade_v1=grade.merge(offer,left_on='course_offering_uuid',right_on='uuid')[['uuid','course_uuid','term_code','name','avg_gpa']]\ngrade_v1.head()\n","f91ca9ad":"print((sorted(list(grade_v1.term_code.unique()))))\nsem={1072:'Fall 2006',1074:'Spring 2007',1082:'Fall 2007',1084:'Spring 2008',1092:'Fall 2008',\n    1094:'Spring 2009',1102:'Fall 2009',1104:'Spring 2010',1112:'Fall 2010',1114:'Spring 2011',\n    1122:'Fall 2011',1132:'Fall 2012',1134:'Spring 2013',1142:'Fall 2013',\n    1144:'Spring 2014',1152:'Fall 2014',1154:'Spring 2015',1162:'Fall 2015',1164:'Spring 2016',\n    1172:'Fall 2016',1174:'Spring 2017',1182:'Fall 2017'}\ns=[sem[i] for i  in grade_v1['term_code']]\ngrade_v1['sem']=pd.Series(s)\n","9e0546f5":"grade_v1.head()","28808cee":"section_v1=section.merge(schedule,left_on='schedule_uuid',right_on='uuid')\nsection_v1=section_v1[['uuid_x','course_offering_uuid','section_type','number','room_uuid','schedule_uuid','num_days','duration']]\nprint(section_v1.shape)\nsection_v1.head()","06360505":"section_v1.num_days.value_counts()","912c11de":"temp_series=section_v1.section_type.value_counts()","5697e41a":"labels = (np.array(temp_series.index))\nsizes = np.array(temp_series)\n\ntrace = go.Pie(labels=labels, values=sizes)\nlayout = go.Layout(\n    title='Section-Type Distribution',\n    width=900,\n    height=900,\n)\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Comic\") ","9b294a1b":"temp=section_v1.groupby('section_type').num_days.mean().sort_values(ascending=False)\ntemp","fc8bdad7":"trace = go.Bar(\n    y=temp,\n    x=temp.index,\n    orientation = 'v',\n    marker=dict(color=['purple','blue','crimson','green','brown','orange'])\n)\n\nlayout = dict(\n    title='Number of Classes Taught by Instructors 2006-2017',\n    yaxis= dict(title='Number of Classes'),\n    xaxis= dict(title='Name of Instructor')\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Superheroes\")","1e660877":"section_v1[section_v1['num_days']==7].head()","5bd02ab2":"temp=section_v1.duration.value_counts()\ntemp.index.sort_values()\nsection_v1['hours']=section_v1['duration']\/\/60\nsection_v1.head()","f8891fbf":"section_v2=section_v1.merge(teach_v1,left_on='uuid_x',right_on='section_uuid')\nsection_v2=section_v2[['course_offering_uuid', 'section_type', 'number', 'room_uuid',\n       'schedule_uuid', 'num_days', 'duration', 'hours', 'instructor_id',\n       'section_uuid', 'name']]\nsection_v2.head()","67e6246d":"grade_v2=grade_v1.merge(sub_mem,right_on='course_offering_uuid',left_on='uuid')\ngrade_v2=grade_v2[['course_offering_uuid','course_uuid','name','avg_gpa','sem','subject_code']]\ngrade_v2.head()","b49f59e9":"\nsub=sub[sub['code'].apply(lambda x: str(x).isdigit())]\nsub['code']=sub['code'].astype(int)","59d66623":"grade_v3=grade_v2.merge(sub,left_on='subject_code',right_on='code')\ngrade_v3.head()","ffe852ba":"print(grade_v3.shape)\nprint(section_v2.shape)","99fb468d":"print(len(section_v2.section_uuid.unique()))\nprint(len(grade_v3.course_offering_uuid.unique()))","2c52ad1a":"grade_v4=grade_v3.merge(section_v2,on='course_offering_uuid')\ngrade_v4.drop_duplicates(inplace=True)\ngrade_v4.shape","a59cd916":"grade_v4.columns","b4436afd":"x=grade_v4.groupby(['abbreviation','name','sem'],as_index=False).avg_gpa.mean()\nx.groupby(['abbreviation','sem']).avg_gpa.mean()","50a0d576":"grade_v4['year']=[int(i[-4:]) for i in grade_v4['sem']]","51a01149":"y=grade_v4.groupby('instructor_id')\nyears=dict((y.year.max()-y.year.min()+1).sort_values())\n\nprint(len(years))\nprint(len(grade_v4.instructor_id.unique()))\nprint(len(grade_v4.name.unique()))\n\ngrade_v4['years_teacher']=[years[i] for i in grade_v4['instructor_id']]","ad8179b7":"grade_v4['taught']=pd.cut(grade_v4['years_teacher'], 4,labels=['0-3 years','3-6 years','6-9 years','9-12 years'],retbins=False)\n","ffa2c5c7":"temp=grade_v4.groupby('taught').avg_gpa.mean()\ntemp.index","ef6868b1":"trace = go.Bar(\n    x=temp,\n    y=temp.index,\n    orientation = 'h',\n    \n)\n\nlayout = dict(\n    title='Experience of Teacher vs Class Performance',\n    yaxis= dict(title='Years Taught',tickangle=45,tickfont=dict(color='crimson')),\n    xaxis= dict(title='Average GPA'),\n    width=1000,\n    height=400\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\n#fig.update_yaxes(tickangle=45, tickfont=dict(family='Rockwell', color='crimson', size=14))\npy.iplot(fig, filename=\"Superheroes\")","d56faf43":"temp=grade_v4.groupby('hours').avg_gpa.mean()","4aade3b1":"trace = go.Bar(\n    y=temp,\n    x=temp.index,\n    orientation = 'v',\n\n    \n)\n\nlayout = dict(\n    title='Class Hours vs Class Performance',\n    xaxis= dict(title='Class Hours',tickangle=45,tickfont=dict(color='crimson')),\n    yaxis= dict(title='Average GPA'),\n    width=1000,\n    height=400\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\n#fig.update_yaxes(tickangle=45, tickfont=dict(family='Rockwell', color='crimson', size=14))\npy.iplot(fig, filename=\"Superheroes\")","d3117005":"grade_v4.groupby('section_type').avg_gpa.mean().sort_values()","5b6e5eb8":"grade_v5=grade_v4.merge(room,left_on='room_uuid',right_on='uuid')","7832215c":"grade_v5[grade_v5['facility_code'] == 'ONLINE'].avg_gpa.mean()","a8081060":"grade_v5[grade_v5['facility_code'] != 'ONLINE'].avg_gpa.mean()","8ddff9f5":"trace = go.Bar(\n    y=[3.641070033853206,3.3717104926401062],\n    x=['Online Courses','In Class Courses'],\n    orientation = 'v',\n    marker=dict(color=['Green','Blue'])\n    \n)\n\nlayout = dict(\n    title='Online Courses vs In-Class Courses',\n    yaxis= dict(title='Average GPA',tickangle=45,tickfont=dict(color='crimson')),\n    xaxis= dict(title='Course-Type'),\n    width=1000,\n    height=400\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\n#fig.update_yaxes(tickangle=45, tickfont=dict(family='Rockwell', color='crimson', size=14))\npy.iplot(fig, filename=\"Superheroes\")","d12a57a9":"grade_v5[grade_v5['facility_code'] != 'ONLINE'].years_teacher.value_counts().sort_values()","24a6220a":"lowest=grade_v5.groupby('abbreviation').avg_gpa.mean().sort_values()[0:11]","8dd0a16e":"trace = go.Bar(\n    y=lowest,\n    x=lowest.index,\n    orientation = 'v'\n    \n)\n\nlayout = dict(\n    title='Top 10 Worst Performing Courses',\n    yaxis= dict(title='Average GPA',tickangle=45,tickfont=dict(color='crimson')),\n    xaxis= dict(title='Course-Type'),\n    width=1000,\n    height=400\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\n#fig.update_yaxes(tickangle=45, tickfont=dict(family='Rockwell', color='crimson', size=14))\npy.iplot(fig, filename=\"Superheroes\")","84eb6e09":"highest=grade_v5.groupby('abbreviation').avg_gpa.mean().sort_values(ascending=False)[0:11]","d11e2412":"trace = go.Bar(\n    y=highest,\n    x=highest.index,\n    orientation = 'v'\n    \n)\n\nlayout = dict(\n    title='Top 10 Highest Scoring Courses',\n    yaxis= dict(title='Average GPA',tickangle=45,tickfont=dict(color='crimson')),\n    xaxis= dict(title='Course-Type'),\n    width=1000,\n    height=400\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\n#fig.update_yaxes(tickangle=45, tickfont=dict(family='Rockwell', color='crimson', size=14))\npy.iplot(fig, filename=\"Superheroes\")","c7ace7ca":"h=grade_v5[grade_v5['abbreviation'].isin(highest.index)]\nl=grade_v5[grade_v5['abbreviation'].isin(lowest.index)]","4421bffc":"h.section_type.value_counts().sort_values() ","bb66450e":"l.section_type.value_counts().sort_values()","79306792":"t_top=grade_v5.groupby('instructor_id').avg_gpa.mean().sort_values(ascending=False)[0:16]\nt_low=grade_v5.groupby('instructor_id').avg_gpa.mean().sort_values()[0:16]","9a39a1d9":"tt=grade_v5[grade_v5['instructor_id'].isin(t_top.index)]\ntl=grade_v5[grade_v5['instructor_id'].isin(t_low.index)]","f353b83f":"tt1=tt.groupby(['name','year'],as_index=False).num_days.count()\nprint(tt1.num_days.mean())\ntt1.groupby('name').num_days.mean()","08678bbf":"tl1=tl.groupby(['name','year'],as_index=False).num_days.count()\nprint(tl1.num_days.mean())\ntl1.groupby('name').num_days.mean()\n","cc327d69":"trace = go.Bar(\n    y=[2.0833333333333335,4.764705882352941],\n    x=['Best Performing Teachers','Worst Performing Teachers'],\n    orientation = 'v',\n    marker=dict(color=['Green','Red'])\n    \n)\n\nlayout = dict(\n    title='Impact of Tight Scedule on Teachers',\n    yaxis= dict(title='Number of Classes Per Sem',tickangle=45,tickfont=dict(color='crimson')),\n    xaxis= dict(title='Teacher'),\n    width=1000,\n    height=400\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\n#fig.update_yaxes(tickangle=45, tickfont=dict(family='Rockwell', color='crimson', size=14))\npy.iplot(fig, filename=\"Superheroes\")","dd817555":"tl.name_y.value_counts().sort_values()","f6a976aa":"tt.name_y.value_counts().sort_values()","72f808f4":"## Rooms","6410a27b":"- Let's add a column which will tell us how many days of classes there are in a week in a particular schedule\n- Let's also add another column which will calculate the duration of a class by subtracting the 'end_time' and 'start_time' columns for every row","2c57daf2":"# Conclusion\n\nI'd like to conclude my analysis by condensing my insights into a few bullet points\n\n- The average number of sections taught by a professor is 16 whereas the the top professors have taught exponentially more number of classes(over 500). This means **there has been an increase in the number of new hires in the Faculty department which explains why there is such a difference in the maximum and mean number of classes taught.**\n\n- **[Tidbit]** Around 37 courses which were held daily (Mon-Sun). They were mostly Field Types\n\n- *Discussion(21.2%)* , *Lecture(28.3%)* and *IND(26.1%)* made up the majority of the classes. Even though *IND* made up a 1\/4 of the courses, they weren't scheduled regularly\n\n- **Teacher's performance improved steadily as they became more experienced in the teaching field**. Average GPA increased from *3.3* to *3.5*\n\n- **Classes which involved lower number of hours per week resulted in lower performance** but as the number of hours increased, the Average GPA rose from *3.37* to *3.96*\n\n- **[Tidbit]** The Performance peaked at 10 Hours but then took a sudden hit again, dropping to 3.4 before coming back up again \n\n- **Online Courses(3.6) were easier to score in** when compared to In - Class Courses(3.3).\n\n- Most of the **Worst Performing Courses (Maths,Accounting,Physics,Economics) involved higher degree of number crunching** where as the **Top Performing Courses (Radiology,Molecule Biology,Neurology) were more medical centric courses in addition to extra-curriculars such as Arts,Music etc.**\n\n- Courses involving Lab or Discussion seem to be the most least scoring whereas as Courses involving Field seem to be the most scoring courses\n\n- **Lowest Performing Teachers were burdened with more classes per sem, almost twice** in comparison to the Highest Performing Teachers\n","fd6d471d":"## Courses","26980cd1":" - There are 315211 sections (all are unique)\n - But there are a total of 18737 teachers responsible for teaching all of these sections","0e9393aa":"- We can see how Teacher's Performance improves steadily as his\/her teaching experience increases","857a9863":"- the term_code refers the the unique code to identify the [semester] - [year] currently ongoing in the college. We will have to figure out what each code stands for\n- all the courses seem to be listed in the course offerings at one point or another\n","a36d4a38":"- Surprisingly medical courses are among the courses taught bt the best performing teachers in addition to extra-curicculars like Music \n- Where as the Botany and Zoology are the courses taught by some of the worst performing teachers","cc9b7117":"## Subject Membership","4743210b":" - Courses involving Lab or Discussion seem to be the most least scoring whereas as Courses involving Field seem to be the most scoring courses","4fc686ad":"- this dataset will be helpful later on when merging datasets to gain insights","3ec25d5f":" - We can get the samntic meanings of the facility code by the accessing the link provided on [kaggle] \n [kaggle]: http:\/\/www.map.wisc.edu\/buildings\/","5337f926":"## Sections","0c7339bf":"# Analysis of UW Madison Courses and Grades 2006-2017\n### Courses, grades, instructors, and subjects at UW Madison since 2006.\n","57d519db":"## Making a SuperSet\n### And also gaining a few insights on the way","8d254c17":"- Even though 26.1% (82,396) of all classes are under IND class, they don't require a single day of formal classes. They might just be digital courses","0a35af1d":"- There are overall 200 subjects available for the students to choose from","09016fe6":"- Almost all courses which have classes daily are of Field type and are a total of 720 minutes","87f1502d":"## Grades","45fd5504":"## Subjects","b9fb352f":"- Lowest Performing Teachers were usually burdened with more classes, almost twice in comparison to the Highest Performing Teachers","605c0799":"- The average number of sections taught by a professor is 16 whereas the the top 10 professors we saw above have significantly higher number of sections under their belt. This indicates that there have been a number of new hires in the teaching staff","3dcc6e6d":"- This dataset gives us the names of the teachers corresponding to their ids","302fb93e":"## Teaching ","d56a725f":"- It's surprising to find out that there are 37 courses which have classes daily\n- Now Let's try to look at the schedule base on the type of section the course requires (Lecture, Discussion, Field, etc)","9411b090":"## Instructors","41bfdb0a":"## Course Offerings Every Semester","ba8b5a5e":"- We used https:\/\/registrar.wisc.edu\/grade-reports\/ to decode the term_code columns. 'Spring 2012' Seems to be missing from our dataset","cc160df8":"## Schedules","cab57b9a":"- The number column perhaps signifies that the courses belong in the same category\n"}}