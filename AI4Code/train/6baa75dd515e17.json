{"cell_type":{"e136694d":"code","549b230a":"code","a669d160":"code","32da631d":"code","e51a7164":"code","2a7fd92d":"code","f49c3567":"code","3e670b46":"code","4c572e1e":"code","50227fe8":"code","cf25766b":"code","f5a5892a":"code","305334af":"code","112d2cba":"code","2b81b8fc":"code","dd7ac586":"code","7482158e":"code","54937938":"code","392b3d44":"code","c3451a6c":"code","6147883d":"code","b3abd304":"code","8ffffed4":"code","393b83a8":"code","addae451":"code","dc9c4b09":"code","f85f858b":"code","9f3874e4":"code","c2fd54a9":"code","e841ac19":"code","5152ebc9":"code","1795b1db":"code","0b09000c":"code","70821262":"code","201be5df":"code","691d9e6e":"code","92cb5559":"code","f2e9891e":"code","82e539fa":"code","bfc07c14":"code","2ed86060":"code","adbc22af":"code","f6c536bd":"code","0caeb02c":"code","cfd02954":"code","3b725ac1":"code","234fdadc":"code","2ca00e50":"code","8e7e3b17":"code","e37a89f2":"markdown","61f44900":"markdown","8bf146d5":"markdown","f640e0e9":"markdown","59507b2b":"markdown","070eaed2":"markdown","0b8fd879":"markdown","68ec3dc2":"markdown","a185944b":"markdown","3664939a":"markdown","f78ec06b":"markdown","82eaf979":"markdown","417459c7":"markdown","ac56c27c":"markdown","7676a2b0":"markdown","5c24e5a5":"markdown","5b59cfc4":"markdown","b0a6570b":"markdown","3c9c9c1c":"markdown","034babf7":"markdown","ff485734":"markdown","b462e164":"markdown","0615a3dd":"markdown","85905a16":"markdown","79f2ed87":"markdown","51cad67d":"markdown","f7afad0a":"markdown","f1d2d609":"markdown","3c3cddf8":"markdown","18c756a6":"markdown","bb3c6f56":"markdown","ccdbce8f":"markdown","f46d021a":"markdown","34934dad":"markdown","7ce044e0":"markdown","444ba93e":"markdown","f8dcdb7a":"markdown","c4fee0cb":"markdown","f222c76c":"markdown","480c212f":"markdown","74f1c86d":"markdown","5e0d5be6":"markdown"},"source":{"e136694d":"import numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import r2_score","549b230a":"zomato_orgnl=pd.read_csv(\"..\/input\/zomato.csv\")","a669d160":"zomato_orgnl.head()","32da631d":"zomato_orgnl.isnull().sum()","e51a7164":"zomato_orgnl.info()","2a7fd92d":"zomato=zomato_orgnl.drop(['url','dish_liked','phone'],axis=1)\nzomato.columns","f49c3567":"zomato.rename({'approx_cost(for two people)': 'approx_cost_for_2_people',\n               'listed_in(type)':'listed_in_type',\n               'listed_in(city)':'listed_in_city'\n              }, axis=1, inplace=True)\nzomato.columns","3e670b46":"remove_comma = lambda x: int(x.replace(',', '')) if type(x) == np.str and x != np.nan else x \nzomato.votes = zomato.votes.astype('int')\nzomato['approx_cost_for_2_people'] = zomato['approx_cost_for_2_people'].apply(remove_comma)","4c572e1e":"zomato.info()","50227fe8":"zomato['rate'].unique()","cf25766b":"zomato = zomato.loc[zomato.rate !='NEW']\nzomato = zomato.loc[zomato.rate !='-'].reset_index(drop=True)","f5a5892a":"remove_slash = lambda x: x.replace('\/5', '') if type(x) == np.str else x\nzomato.rate = zomato.rate.apply(remove_slash).str.strip().astype('float')","305334af":"zomato['rate'].head()","112d2cba":"zomato.info()","2b81b8fc":"def Encode(zomato):\n    for column in zomato.columns[~zomato.columns.isin(['rate', 'approx_cost_for_2_people', 'votes'])]:\n        zomato[column] = zomato[column].factorize()[0]\n    return zomato\n\nzomato_en = Encode(zomato.copy())","dd7ac586":"zomato_en['rate'] = zomato_en['rate'].fillna(zomato_en['rate'].mean())\nzomato_en['approx_cost_for_2_people'] = zomato_en['approx_cost_for_2_people'].fillna(zomato_en['approx_cost_for_2_people'].mean())","7482158e":"zomato_en.isna().sum()","54937938":"corr = zomato_en.corr(method='kendall')","392b3d44":"plt.figure(figsize=(15,8))\nsns.heatmap(corr, annot=True)","c3451a6c":"zomato_en.columns","6147883d":"x = zomato_en.iloc[:,[2,3,5,6,7,8,9,11]]\ny = zomato_en['rate']","b3abd304":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=353)","8ffffed4":"x_train.head()","393b83a8":"y_train.head()","addae451":"reg=LinearRegression()\nreg.fit(x_train,y_train)","dc9c4b09":"y_pred=reg.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_pred)","f85f858b":"'''reg_score=[]\nimport numpy as np\nfor j in range(1000):\n    x_train,x_test,y_train,y_test =train_test_split(x,y,random_state=j,test_size=0.1)\n    lr=LinearRegression().fit(x_train,y_train)\n    reg_score.append(lr.score(x_test,y_test))\nK=reg_score.index(np.max(reg_score))\n#Random state = K=353'''","9f3874e4":"from sklearn.tree import DecisionTreeRegressor","c2fd54a9":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=105)","e841ac19":"DTree=DecisionTreeRegressor(min_samples_leaf=.0001)","5152ebc9":"DTree.fit(x_train,y_train)\ny_predict=DTree.predict(x_test)","1795b1db":"from sklearn.metrics import r2_score","0b09000c":"r2_score(y_test,y_predict)","70821262":"'''from sklearn.tree import DecisionTreeRegressor\nts_score=[]\nfor j in range(1000):\n    x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=j)\n    dc=DecisionTreeRegressor().fit(x_train,y_train)\n    ts_score.append(dc.score(x_test,y_test))\nJ= ts_score.index(np.max(ts_score))\n\nJ\n#J=105'''","201be5df":"from sklearn.ensemble import RandomForestRegressor\nRForest=RandomForestRegressor(n_estimators=5,random_state=329,min_samples_leaf=.0001)","691d9e6e":"RForest.fit(x_train,y_train)\ny_predict=RForest.predict(x_test)","92cb5559":"from sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","f2e9891e":"'''rf_score=[]\nfor k in range(500):\n    x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.01,random_state=k)\n    dtc=RandomForestRegressor().fit(x_train,y_train)\n    rf_score.append(dtc.score(x_test,y_test))\nK= rf_score.index(np.max(rf_score))\nK=329'''","82e539fa":"fig = plt.figure(figsize=(20,7))\nloc = sns.countplot(x=\"location\",data=zomato_orgnl, palette = \"Set1\")\nloc.set_xticklabels(loc.get_xticklabels(), rotation=90, ha=\"right\")\nplt.ylabel(\"Frequency\",size=15)\nplt.xlabel(\"Location\",size=18)\nloc\nplt.title('NO. of restaurants in a Location',size = 20,pad=20)","bfc07c14":"fig = plt.figure(figsize=(17,5))\nrest = sns.countplot(x=\"rest_type\",data=zomato_orgnl, palette = \"Set1\")\nrest.set_xticklabels(rest.get_xticklabels(), rotation=90, ha=\"right\")\nplt.ylabel(\"Frequency\",size=15)\nplt.xlabel(\"Restaurant type\",size=15)\nrest \nplt.title('Restaurant types',fontsize = 20 ,pad=20)","2ed86060":"plt.figure(figsize=(15,7))\nchains=zomato_orgnl['name'].value_counts()[:20]\nsns.barplot(x=chains,y=chains.index,palette='Set1')\nplt.title(\"Most famous restaurant chains in Bangaluru\",size=20,pad=20)\nplt.xlabel(\"Number of outlets\",size=15)","adbc22af":"plt.figure(figsize=(15,7))\nzomato_orgnl['online_order'].value_counts().plot.bar()\nplt.title('Online orders', fontsize = 20)\nplt.ylabel('Frequency',size = 15)","f6c536bd":"plt.figure(figsize=(15,7))\nzomato_orgnl['book_table'].value_counts().plot.bar()\nplt.title('Booking Table', fontsize = 20,pad=15)\nplt.ylabel('Frequency', fontsize = 15)","0caeb02c":"plt.figure(figsize=(10,10))\nrestaurantTypeCount=zomato_orgnl['rest_type'].value_counts().sort_values(ascending=True)\nslices=[restaurantTypeCount[0],\n        restaurantTypeCount[1],\n        restaurantTypeCount[2],\n        restaurantTypeCount[3],\n        restaurantTypeCount[4],\n        restaurantTypeCount[5],\n        restaurantTypeCount[6],\n        restaurantTypeCount[7],\n        restaurantTypeCount[8]]\nlabels=['Pubs and bars','Buffet','Drinks & nightlife','Cafes','Desserts','Dine-out','Delivery ','Quick Bites','Bakery']\ncolors = ['#3333cc','#ffff1a','#ff3333','#c2c2d6','#6699ff','#c4ff4d','#339933','black','orange']\nplt.pie(slices,colors=colors, labels=labels, autopct='%1.0f%%', pctdistance=.5, labeldistance=1.2,shadow=True)\nfig = plt.gcf()\nplt.title(\"Percentage of Restaurants according to their type\", bbox={'facecolor':'2', 'pad':2})","cfd02954":"fig, ax = plt.subplots(figsize=[15,7])\nsns.distplot(zomato_en['approx_cost_for_2_people'],color=\"magenta\")\nax.set_title('Approx cost for two people distribution',size=20,pad=15)\nplt.xlabel('Approx cost for two people',size = 15)\nplt.ylabel('Percentage of restaurants',size = 15)","3b725ac1":"plt.figure(figsize=(12,7))\npreds_rf = RForest.predict(x_test)\nplt.scatter(y_test,x_test.iloc[:,2],color=\"red\")\nplt.title(\"True rate vs Predicted rate\",size=20,pad=15)\nplt.xlabel('Rating',size = 15)\nplt.ylabel('Frequency',size = 15)\nplt.scatter(preds_rf,x_test.iloc[:,2],color=\"green\")","234fdadc":"plt.figure(figsize=(15,8))\nrating = zomato['rate']\nplt.hist(rating,bins=20,color=\"red\")\nplt.title('Restaurant rating distribution', size = 20, pad = 15)\nplt.xlabel('Rating',size = 15)\nplt.ylabel('No. of restaurants',size = 15)","2ca00e50":"plt.figure(figsize=(15,8))\nsns.violinplot(zomato.approx_cost_for_2_people)\nplt.title('Approx cost for 2 people distribution', size = 20, pad = 15)\nplt.xlabel('Approx cost for 2 people',size = 15)\nplt.ylabel('Density',size = 15)","8e7e3b17":"plt.figure(figsize=(15,8))\ncuisines=zomato['cuisines'].value_counts()[:15]\nsns.barplot(cuisines,cuisines.index)\nplt.title('Most popular cuisines of Bangalore', size = 20, pad = 15)\nplt.xlabel('No. of restaurants',size = 15)","e37a89f2":"## xi) Most popular cuisines of Bangalore","61f44900":"# 1.Loading Packages","8bf146d5":"__Now we see that 'rate' column has converted to float datatype__","f640e0e9":"## i) No. of restaurants in a particular location","59507b2b":"# 5.DATA VISUALIZATION","070eaed2":"**The approx cost for 2 people is around 300-400 INR**","0b8fd879":"__Now we will convert \"rate\" into float__","68ec3dc2":"__Counting missing values for different columns__","a185944b":"__Checking unique values of \"rate\"__","3664939a":"__Now we will Label Encode the input variable columns into 0,1,2...__","f78ec06b":"__Confirming the data-types of \"votes\" and \"approx_cost_for_2_people\"__","82eaf979":"## viii) Showing True rate vs Predicted rate","417459c7":" __From above, it is found that the column \"dish_liked\" has more than 50% values missing__","ac56c27c":"**Showing 5 restaurant datas using head() function**","7676a2b0":"__We remove the restaurent datas which has rate='NEW'__","5c24e5a5":"## Applying RANDOM FOREST REGRESSION ","5b59cfc4":"__\"votes\" and  \"approx_cost_for_2_people\" have values like 1,000. \nSo we will change them into pure numeric values.\n<br>For this, we will use the lambda function__","b0a6570b":"# 3.Data pre-processing","3c9c9c1c":"__Checking for correlation among all the x(inputs)__","034babf7":"__Renaming \"approx_cost(for two people)\" ,listed_in(type) and listed_in(city) as they have multiple data-types__","ff485734":"__Information on original zomato dataset__","b462e164":"## vii) Distribution of  restaurants according to approx cost for two people ","0615a3dd":"## Applying LINEAR REGRESSION","85905a16":"## vi) Percentage of  restaurants according to their types","79f2ed87":"## ix) Restaurant rating distribution","51cad67d":"__Converting \"votes\" and  \"approx_cost_for_2_people\" into numeric(int)__","f7afad0a":"# 4.STARTING REGRESSION PART<br>(PREDICTION)","f1d2d609":"**The following loop will find the best random state which will give the best accuracy in the range. Uncomment and run to see the random state.\nP.S.- Random state might change as train_test_split splits the dataset randomly[](http:\/\/)**","3c3cddf8":"## x) Approx cost for 2 people distribution","18c756a6":" ## v) Frequency of  restaurants allowing booking table or not","bb3c6f56":"   ## Please upvote this kernel if you liked it.   <br\/>Thank You!<br\/>:D","ccdbce8f":"## ii) Frequency of different types of restaurants","f46d021a":"## iii) Most famous restaurant chains in Bengaluru","34934dad":"__With RANDOM FOREST REGRESSION, we are getting an  accuracy of  84 % which is better than all three__","7ce044e0":"__With DECISION TREE REGRESSION, we are getting an  accuracy of  83 %__","444ba93e":"## iv) Number of restaurants taking online order or not","f8dcdb7a":"__The highest correlation is between name and address which is 0.63 which is not of very much concern__ \n<br> __Splitting dataset into train & test__ ","c4fee0cb":"## Applying DECISION TREE REGRESSION","f222c76c":"__Dropping the column \"dish_liked\", \"phone\", \"url\"  and saving the new dataset as \"zomato\"__","480c212f":"__With LINEAR REGRESSION, we are getting an  accuracy of  30 %__","74f1c86d":"# 2.Reading dataset","5e0d5be6":"__Now we will remove '\/5'__"}}