{"cell_type":{"8dfc04b7":"code","da8abee7":"code","67a8372c":"code","44904453":"code","9abe98f5":"code","656fcaf4":"code","79254d68":"code","c84e080c":"code","ce517ccb":"code","b9f213f3":"code","f9e7206d":"code","dcb62525":"code","00ff8ceb":"code","e73bc602":"code","5c094783":"code","21e26888":"code","439e4417":"code","9affacaf":"code","8e558470":"code","e527c585":"code","157c79f3":"code","27f975a2":"code","8958c8e8":"code","37497223":"code","f74917bb":"code","06ffc6fc":"code","482802cc":"code","d87beac2":"code","98bbef8e":"code","6d53aad2":"code","978af65a":"code","60ffdb73":"code","9a534731":"code","e872675c":"code","bb6237a4":"code","f033ccca":"code","dcde7827":"code","da925f8c":"code","405b4acd":"code","eba2f9d1":"code","01421141":"code","1797cfa9":"code","a39f2d99":"code","6190cc05":"code","23d96114":"code","78abb141":"code","863d5507":"code","bae8ab15":"code","b903e38d":"code","283a5b99":"code","fa1f0396":"code","045135eb":"code","dfa53358":"code","edaace10":"code","a99197e7":"code","2203e8ea":"code","e6deb893":"code","bcfeb8c8":"code","f90cde5a":"code","3f84a2e0":"markdown","1390dda8":"markdown","918a559d":"markdown","4def8b4c":"markdown"},"source":{"8dfc04b7":"import numpy as np\nimport pandas as pd\n\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns  \n\n%matplotlib inline","da8abee7":"data = pd.read_csv('..\/input\/healthcare\/health care diabetes.csv')","67a8372c":"data.head()","44904453":"data.isnull().any()","9abe98f5":"data.info()","656fcaf4":"Positive = data[data['Outcome']==1]\nPositive.head(5)","79254d68":"data['Glucose'].value_counts().head(7)","c84e080c":"plt.hist(data['Glucose'])","ce517ccb":"data['BloodPressure'].value_counts().head(7)","b9f213f3":"plt.hist(data['BloodPressure'])","f9e7206d":"data['SkinThickness'].value_counts().head(7)","dcb62525":"plt.hist(data['SkinThickness'])","00ff8ceb":"data['Insulin'].value_counts().head(7)","e73bc602":"plt.hist(data['Insulin'])","5c094783":"data['BMI'].value_counts().head(7)","21e26888":"plt.hist(data['BMI'])","439e4417":"data.describe().transpose()","9affacaf":"plt.hist(Positive['BMI'],histtype='stepfilled',bins=20)","8e558470":"Positive['BMI'].value_counts().head(7)","e527c585":"plt.hist(Positive['Glucose'],histtype='stepfilled',bins=20)","157c79f3":"Positive['Glucose'].value_counts().head(7)","27f975a2":"plt.hist(Positive['BloodPressure'],histtype='stepfilled',bins=20)","8958c8e8":"Positive['BloodPressure'].value_counts().head(7)","37497223":"plt.hist(Positive['SkinThickness'],histtype='stepfilled',bins=20)","f74917bb":"Positive['SkinThickness'].value_counts().head(7)","06ffc6fc":"plt.hist(Positive['Insulin'],histtype='stepfilled',bins=20)","482802cc":"Positive['Insulin'].value_counts().head(7)","d87beac2":"BloodPressure = Positive['BloodPressure']\nGlucose = Positive['Glucose']\nSkinThickness = Positive['SkinThickness']\nInsulin = Positive['Insulin']\nBMI = Positive['BMI']","98bbef8e":"plt.scatter(BloodPressure, Glucose, color=['b'])\nplt.xlabel('BloodPressure')\nplt.ylabel('Glucose')\nplt.title('BloodPressure & Glucose')\nplt.show()","6d53aad2":"g =sns.scatterplot(x= \"Glucose\" ,y= \"BloodPressure\",\n              hue=\"Outcome\",\n              data=data);","978af65a":"B =sns.scatterplot(x= \"BMI\" ,y= \"Insulin\",\n              hue=\"Outcome\",\n              data=data);","60ffdb73":"S =sns.scatterplot(x= \"SkinThickness\" ,y= \"Insulin\",\n              hue=\"Outcome\",\n              data=data);","9a534731":"### correlation matrix\ndata.corr()","e872675c":"### create correlation heat map\nsns.heatmap(data.corr())","bb6237a4":"plt.subplots(figsize=(8,8))\nsns.heatmap(data.corr(),annot=True,cmap='viridis')  ### gives correlation value","f033ccca":"plt.subplots(figsize=(8,8))\nsns.heatmap(data.corr(),annot=True)  ### gives correlation value","dcde7827":"data.head(5)","da925f8c":"features = data.iloc[:,[0,1,2,3,4,5,6,7]].values\nlabel = data.iloc[:,8].values","405b4acd":"#Train test split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(features,\n                                                label,\n                                                test_size=0.2,\n                                                random_state =10)","eba2f9d1":"#Create model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train) ","01421141":"print(model.score(X_train,y_train))\nprint(model.score(X_test,y_test))","1797cfa9":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(label,model.predict(features))\ncm","a39f2d99":"from sklearn.metrics import classification_report\nprint(classification_report(label,model.predict(features)))","6190cc05":"#Preparing ROC Curve (Receiver Operating Characteristics Curve)\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n\n# predict probabilities\nprobs = model.predict_proba(features)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# calculate AUC\nauc = roc_auc_score(label, probs)\nprint('AUC: %.3f' % auc)\n# calculate roc curve\nfpr, tpr, thresholds = roc_curve(label, probs)\n# plot no skill\nplt.plot([0, 1], [0, 1], linestyle='--')\n# plot the roc curve for the model\nplt.plot(fpr, tpr, marker='.')\n\n","23d96114":"#Applying Decission Tree Classifier\nfrom sklearn.tree import DecisionTreeClassifier\nmodel3 = DecisionTreeClassifier(max_depth=5)\nmodel3.fit(X_train,y_train)","78abb141":"model3.score(X_train,y_train)","863d5507":"model3.score(X_test,y_test)","bae8ab15":"#Applying Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nmodel4 = RandomForestClassifier(n_estimators=11)\nmodel4.fit(X_train,y_train)","b903e38d":"model4.score(X_train,y_train)","283a5b99":"model4.score(X_test,y_test)","fa1f0396":"#Support Vector Classifier\n\nfrom sklearn.svm import SVC \nmodel5 = SVC(kernel='rbf',\n           gamma='auto')\nmodel5.fit(X_train,y_train)","045135eb":"#model5.score(X_test,y_test).score(X_train,y_train)","dfa53358":"model5.score(X_test,y_test)","edaace10":"#Applying K-NN\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel2 = KNeighborsClassifier(n_neighbors=7,\n                             metric='minkowski',\n                             p = 2)\nmodel2.fit(X_train,y_train)","a99197e7":"#Preparing ROC Curve (Receiver Operating Characteristics Curve)\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n\n# predict probabilities\nprobs = model2.predict_proba(features)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# calculate AUC\nauc = roc_auc_score(label, probs)\nprint('AUC: %.3f' % auc)\n# calculate roc curve\nfpr, tpr, thresholds = roc_curve(label, probs)\nprint(\"True Positive Rate - {}, False Positive Rate - {} Thresholds - {}\".format(tpr,fpr,thresholds))\n# plot no skill\nplt.plot([0, 1], [0, 1], linestyle='--')\n# plot the roc curve for the model\nplt.plot(fpr, tpr, marker='.')\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\n","2203e8ea":"#Precision Recall Curve for Logistic Regression\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import average_precision_score\n# predict probabilities\nprobs = model.predict_proba(features)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# predict class values\nyhat = model.predict(features)\n# calculate precision-recall curve\nprecision, recall, thresholds = precision_recall_curve(label, probs)\n# calculate F1 score\nf1 = f1_score(label, yhat)\n# calculate precision-recall AUC\nauc = auc(recall, precision)\n# calculate average precision score\nap = average_precision_score(label, probs)\nprint('f1=%.3f auc=%.3f ap=%.3f' % (f1, auc, ap))\n# plot no skill\nplt.plot([0, 1], [0.5, 0.5], linestyle='--')\n# plot the precision-recall curve for the model\nplt.plot(recall, precision, marker='.')","e6deb893":"#Precision Recall Curve for KNN\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import average_precision_score\n# predict probabilities\nprobs = model2.predict_proba(features)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# predict class values\nyhat = model2.predict(features)\n# calculate precision-recall curve\nprecision, recall, thresholds = precision_recall_curve(label, probs)\n# calculate F1 score\nf1 = f1_score(label, yhat)\n# calculate precision-recall AUC\nauc = auc(recall, precision)\n# calculate average precision score\nap = average_precision_score(label, probs)\nprint('f1=%.3f auc=%.3f ap=%.3f' % (f1, auc, ap))\n# plot no skill\nplt.plot([0, 1], [0.5, 0.5], linestyle='--')\n# plot the precision-recall curve for the model\nplt.plot(recall, precision, marker='.')","bcfeb8c8":"#Precision Recall Curve for Decission Tree Classifier\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import average_precision_score\n# predict probabilities\nprobs = model3.predict_proba(features)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# predict class values\nyhat = model3.predict(features)\n# calculate precision-recall curve\nprecision, recall, thresholds = precision_recall_curve(label, probs)\n# calculate F1 score\nf1 = f1_score(label, yhat)\n# calculate precision-recall AUC\nauc = auc(recall, precision)\n# calculate average precision score\nap = average_precision_score(label, probs)\nprint('f1=%.3f auc=%.3f ap=%.3f' % (f1, auc, ap))\n# plot no skill\nplt.plot([0, 1], [0.5, 0.5], linestyle='--')\n# plot the precision-recall curve for the model\nplt.plot(recall, precision, marker='.')","f90cde5a":"#Precision Recall Curve for Random Forest\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import average_precision_score\n# predict probabilities\nprobs = model4.predict_proba(features)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# predict class values\nyhat = model4.predict(features)\n# calculate precision-recall curve\nprecision, recall, thresholds = precision_recall_curve(label, probs)\n# calculate F1 score\nf1 = f1_score(label, yhat)\n# calculate precision-recall AUC\nauc = auc(recall, precision)\n# calculate average precision score\nap = average_precision_score(label, probs)\nprint('f1=%.3f auc=%.3f ap=%.3f' % (f1, auc, ap))\n# plot no skill\nplt.plot([0, 1], [0.5, 0.5], linestyle='--')\n# plot the precision-recall curve for the model\nplt.plot(recall, precision, marker='.')","3f84a2e0":"**Approach :**\n\n*Following pointers will be helpful to structure your findings.   \n\n1.\tTry and explore the data to check for missing values\/erroneous entries and also comment on redundant features and add additional ones, if needed.\n\n2.\tIt is immediately apparent that some of the column names have typos, so let us clear them up before continuing further, so that we don't have to use alternate spellings every time we need a variable. \n\n3.\tFor convenience, convert the AppointmentRegistration and Appointment columns into datetime64 format and the AwaitingTime column into absolute values.\n\n4.\tCreate a new feature called HourOfTheDay, which will indicate the hour of the day at which the appointment was booked. \n\n5.\tIdentify and remove outliers from Age. Explain using an appropriate plot.\n\n6.\tAnalyse the probability of showing up with respect to different features. Create scatter plot and trend lines to analyse the relation between probability of showing up with respect to age\/Houroftheday\/awaitingtime. Describe your finding.\n\n7.\tCreate a bar graph to depict probability of showing up for diabetes, alcoholism, hypertension, TB, smokes, scholarship.\n\n8.\tCreate separate bar graphs to show the probability of showing up for male and female, day of the week and sms reminder. Describe your interpretation. \n\n9.\tPredict the Show-Up\/No-Show status based on the features which show the most variation in probability of showing up. They are:\n\n\uf0d8\tAge\n \uf0d8\tDiabetes\n \uf0d8\tAlchoholism\n \uf0d8\tHypertension\n \uf0d8\tSmokes\n \uf0d8\tScholarship\n \uf0d8\tTuberculosis\n\n10.\tCreate a dashboard in tableau by choosing appropriate chart types and metrics useful for the business.\n\n","1390dda8":"![Data Science Capstone Simplilearn](https:\/\/s3.ap-southeast-1.amazonaws.com\/images.deccanchronicle.com\/dc-Cover-57fl9b38nksv4hgrnj2v83lf43-20201214213727.Medi.jpeg)","918a559d":"# Week 2","4def8b4c":"**Problem Statement**\n* NIDDK (National Institute of Diabetes and Digestive and Kidney Diseases) research creates knowledge about and treatments for the most chronic, costly, and consequential diseases.\n\n* The dataset used in this project is originally from NIDDK. The objective is to predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset.\n\n* Build a model to accurately predict whether the patients in the dataset have diabetes or not."}}