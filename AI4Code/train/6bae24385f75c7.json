{"cell_type":{"88158861":"code","43c2cd19":"code","4640035b":"markdown","63a3defc":"markdown","d30e7aa7":"markdown"},"source":{"88158861":"import numpy as np\n\ndef quantile_spl(train_y, valid_y, quantile_preds, quantile):\n    train_y = train_y.astype(np.float32)\n    valid_y = valid_y.astype(np.float32)\n    quantile_preds = quantile_preds.astype(np.float32)\n    \n    loss = (\n        (\n            (valid_y-quantile_preds)*(valid_y>=quantile_preds)*quantile\n        )\n        +\n        (\n            (quantile_preds-valid_y)*(quantile_preds>valid_y)*(1-quantile)\n        )\n    ).sum(axis=1)\/quantile_preds.shape[1]\n    scale = np.abs(np.diff(train_y)).mean(axis=1)\n\n    spl = loss\/scale\n    # replace inf with nan so that all subsequent computations work\n    spl[np.isinf(spl)] = np.nan\n    return spl","43c2cd19":"train_demand = np.array(\n    [\n        [10, 11, 10, 13, 9, 12, 10, 12, 13, 8, 14, 12],\n        [11, 12, 11, 14, 10, 13, 11, 13, 14, 9, 15, 13],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\n    ]\n)\n\ntest_demand = np.array(\n    [\n        [10 , 11, 10, 13, 9, 12, 10, 12, 13, 8, 14, 12],\n        [11 , 12, 11, 14, 10, 13, 11, 13, 14, 9, 15, 13],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    ]\n)\np1_forecast = np.array(\n    [\n        [1, 2, 2, 3, 2, 1, 3, 4, 2, 1, 1, 3],\n        [2, 3, 3, 2, 1, 2, 4, 5, 3, 2, 2, 4],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    ]\n)\n\np5_forecast  = np.array(\n    [\n        [11, 10, 12, 12, 12, 14, 11, 10, 10, 13, 12, 10 ],\n        [12, 11, 13, 13, 13, 15, 12, 11, 11, 14, 13, 11 ],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    ]\n)\n\np9_forecast = np.array(\n    [\n        [21, 22, 22, 23, 22, 21, 23, 24, 22, 21, 21, 23],\n        [22, 23, 24, 24, 23, 22, 24, 25, 23, 22, 22, 24],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    ]\n)\n\np1_spl = quantile_spl(train_demand, test_demand, p1_forecast, 0.1)\np5_spl = quantile_spl(train_demand, test_demand, p5_forecast, 0.5)\np9_spl = quantile_spl(train_demand, test_demand, p9_forecast, 0.9)\n\nitem_spls = np.nanmean(\n    np.array(\n        [\n            p1_spl, p5_spl, p9_spl\n        ]\n    ),\n    axis=0\n)\nprint(item_spls)    \n\n# This assumes equal weighting for each item\naggregated_spl = np.nanmean(\n    item_spls\n)\nprint(aggregated_spl)","4640035b":"**Scaled pinball loss**\n![image.png](attachment:image.png)","63a3defc":"**Pinball loss**\n![image.png](attachment:image.png)","d30e7aa7":"**Aggregated scaled pinball loss**\n![image.png](attachment:image.png)"}}