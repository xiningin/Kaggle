{"cell_type":{"973736ae":"code","6f5a0d1d":"code","1611cf1b":"code","f84300ec":"code","7754d9c9":"code","b0b3e080":"code","bd8a908d":"code","847586a8":"code","fe666ae7":"code","7dde5beb":"code","9ca8cc88":"code","e456d5ad":"code","0284abf4":"code","c9972055":"code","e2544998":"code","eaec4cfe":"code","8f89d2ac":"code","dec26ca9":"code","ca5ade96":"code","a17fb9a9":"code","12172d13":"code","173bfe7d":"code","a3f34848":"code","1d10a45f":"code","ccd4ce2c":"markdown","d48e6571":"markdown","f14fa17c":"markdown","890432ab":"markdown","7379cab5":"markdown","dcfcb1af":"markdown","daf766c5":"markdown","24f4f601":"markdown","c5cdcf2c":"markdown","8a03f1df":"markdown"},"source":{"973736ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6f5a0d1d":"# The Iris Setosa\nfrom IPython.display import Image\nurl = 'http:\/\/upload.wikimedia.org\/wikipedia\/commons\/5\/56\/Kosaciec_szczecinkowaty_Iris_setosa.jpg'\nImage(url,width=300, height=300)","1611cf1b":"# The Iris Versicolor\nfrom IPython.display import Image\nurl = 'http:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/41\/Iris_versicolor_3.jpg'\nImage(url,width=300, height=300)","f84300ec":"# The Iris Virginica\nfrom IPython.display import Image\nurl = 'http:\/\/upload.wikimedia.org\/wikipedia\/commons\/9\/9f\/Iris_virginica.jpg'\nImage(url,width=300, height=300)","7754d9c9":"import seaborn as sns\niris = sns.load_dataset('iris')","b0b3e080":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","bd8a908d":"iris.columns","847586a8":"set(iris['species'])","fe666ae7":"iris.info()","7dde5beb":"iris.head()","9ca8cc88":"# Setosa is the most separable. \nsns.pairplot(iris,hue='species',palette='Dark2')","e456d5ad":"setosa = iris[iris['species']=='setosa']\nsns.kdeplot( setosa['sepal_width'], setosa['sepal_length'],\n                 cmap=\"plasma\", shade=True, shade_lowest=False)","0284abf4":"from sklearn.model_selection import train_test_split","c9972055":"X = iris.drop('species',axis=1)\ny = iris['species']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)","e2544998":"from sklearn.svm import SVC","eaec4cfe":"svc_model = SVC()\nsvc_model.fit(X_train,y_train)","8f89d2ac":"predictions = svc_model.predict(X_test)\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_test,predictions))","dec26ca9":"print(classification_report(y_test,predictions))","ca5ade96":"from sklearn.model_selection import GridSearchCV","a17fb9a9":"param_grid = {'C': [0.1,1, 10, 100], 'gamma': [1,0.1,0.01,0.001]} ","12172d13":"grid = GridSearchCV(SVC(),param_grid,refit=True,verbose=2)\ngrid.fit(X_train,y_train)","173bfe7d":"grid_predictions = grid.predict(X_test)","a3f34848":"print(confusion_matrix(y_test,grid_predictions))","1d10a45f":"print(classification_report(y_test,grid_predictions))","ccd4ce2c":"# Gridsearch Practice\n** Import GridsearchCV from SciKit Learn.**","d48e6571":"# Train a Model\nNow its time to train a Support Vector Machine Classifier.\n\nCall the SVC() model from sklearn and fit the model to the training data.","f14fa17c":"# Exploratory Data Analysis","890432ab":"# Get the data\n\n**Use seaborn to get the iris data by using: iris = sns.load_dataset('iris') **","7379cab5":"There is basically just one point that is too noisey to grab, which makes sense, we don't want to have an overfit model that would be able to grab that.\n\nFor more information see:\nhttps:\/\/www.udemy.com\/course\/python-for-data-science-and-machine-learning-bootcamp\/","dcfcb1af":"# Train Test Split\n\n** Split your data into a training set and a testing set.**","daf766c5":"# Hello kagglers :),\n\nWelcome to the Support Vector Machine Project with iris dataset! Just follow along with the notebook and instructions below. We will be analyzing the famous iris data set!\n\nThe data set consists of 50 samples from each of three species of Iris (Iris setosa, Iris virginica and Iris versicolor), so 150 total samples. Four features were measured from each sample: the length and the width of the sepals and petals, in centimeters.\n\nThe iris dataset contains measurements for 150 iris flowers from three different species.\n\nThe three classes in the Iris dataset:\n\n    Iris-setosa (n=50)\n    Iris-versicolor (n=50)\n    Iris-virginica (n=50)\n\nThe four features of the Iris dataset:\n\n    sepal length in cm\n    sepal width in cm\n    petal length in cm\n    petal width in cm","24f4f601":"Create a kde plot of sepal_length versus sepal width for setosa species of flower.","c5cdcf2c":"Wow! You should have noticed that the model was pretty good! Let's see if we can tune the parameters to try to get even better (unlikely, and you probably would be satisfied with these results in real like because the data set is quite small, but I just want you to practice using GridSearch.","8a03f1df":"# Model Evaluation\nNow get predictions from the model and create a confusion matrix and a classification report."}}