{"cell_type":{"14762c15":"code","f0baa35c":"code","07b7788c":"code","c682960b":"code","31bdd6ed":"code","3901719d":"code","7bbcfef0":"code","3cc2a4d0":"code","add15991":"code","cfcfd431":"code","87b0ca38":"code","a27c66cf":"code","2b03e67c":"code","2dda0b75":"code","a895a2f4":"code","8176053d":"code","91838d77":"code","3828e21a":"code","b29e7ed4":"code","fa824822":"code","8308e7e6":"code","cebf04fc":"code","a09de279":"code","0cc4a325":"code","31d13dda":"code","5b4db23c":"code","aa5f2f1f":"code","33b5097d":"code","ad2bc749":"code","4ad816a5":"code","6a3a4bda":"code","b1073198":"code","637e1062":"code","5aa64a02":"code","7014a55d":"code","0ecb04ea":"markdown","edcd3316":"markdown","1786bc77":"markdown","fbb7362e":"markdown","8d4901c2":"markdown","ee88e798":"markdown","b52e1434":"markdown","f64beec6":"markdown","d769fcf3":"markdown","a0191ad1":"markdown","f10bd40e":"markdown","768bb11f":"markdown","1637395e":"markdown","4baa1beb":"markdown","2fb220e5":"markdown","164dd3ac":"markdown"},"source":{"14762c15":"#!pip install --upgrade tensorflow-gpu","f0baa35c":"%%time\nfrom __future__ import print_function, absolute_import, division, unicode_literals\n\n%matplotlib inline\n%config InlineBackend.figure_format = \"retina\"\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\n\nimport tensorflow as tf","07b7788c":"print(f\"TensorFlow version: {tf.__version__}\")\nprint(f\"Keras version: {tf.keras.__version__}\")\nprint(f\"TensorFlow is executing eagerly: {tf.executing_eagerly()}\")\nprint(\"GPU is\",\"available.\" if tf.test.is_gpu_available() else \"unavailable.\")\nprint(f\"Initializing radom seeds..{tf.random.set_seed(1)}\")\nprint(f\"Enabling TensorFlow Device Debugger..\")\ntf.config.set_soft_device_placement(True)\ntf.debugging.set_log_device_placement(True)\nprint(\"No of physical devices available: {}\".format(len(tf.config.experimental.list_physical_devices())))\n%reload_ext tensorboard.notebook\n\nimport warnings; warnings.simplefilter(\"ignore\")\nprint(\"Done.!\")","c682960b":"os.listdir('..\/input\/Kannada-MNIST\/')","31bdd6ed":"train_df = pd.read_csv('..\/input\/Kannada-MNIST\/train.csv')\ntest_df = pd.read_csv('..\/input\/Kannada-MNIST\/test.csv')","3901719d":"from IPython.display import display, clear_output\nwith pd.option_context(\"display.max_rows\",10,\"display.max_columns\",1000):\n    display(train_df.head(5))\n    clear_output()\n    display(test_df.head(5))","7bbcfef0":"train_labels = train_df.iloc[:,0].values\ntrain_features = train_df.iloc[:,1:].values.reshape(-1,28,28,1)\ntest_features = test_df.iloc[:,1:].values.reshape(-1,28,28,1)","3cc2a4d0":"print(train_features.shape)\nprint(train_labels.shape)\nprint(test_features.shape)","add15991":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(train_features, train_labels,test_size=0.1)","cfcfd431":"strategy = tf.distribute.MirroredStrategy(cross_device_ops=tf.distribute.HierarchicalCopyAllReduce())","87b0ca38":"print(f\"Number of devices in parallel: {strategy.num_replicas_in_sync}\")","a27c66cf":"BUFFER_SIZE = 10000\nBATCH_SIZE_PER_REPLICA = 64\nBATCH_SIZE = BATCH_SIZE_PER_REPLICA * strategy.num_replicas_in_sync","2b03e67c":"def scale(image, label):\n    image = tf.cast(image, tf.float32)\n    image \/= 255\n    return image, label","2dda0b75":"train_dataset = tf.data.Dataset.from_tensor_slices((X_train, y_train)) \\\n                .map(scale, num_parallel_calls=tf.data.experimental.AUTOTUNE) \\\n                .cache() \\\n                .shuffle(BUFFER_SIZE) \\\n                .batch(BATCH_SIZE) \\\n                .repeat() \\\n                .prefetch(tf.data.experimental.AUTOTUNE)\n\nval_dataset = tf.data.Dataset.from_tensor_slices((X_val, y_val)) \\\n                .map(scale, num_parallel_calls=tf.data.experimental.AUTOTUNE) \\\n                .batch(BATCH_SIZE)","a895a2f4":"print(train_dataset.element_spec)\nprint(val_dataset.element_spec)","8176053d":"for images, labels in train_dataset.take(1):\n    pass\n\ntrain_features = images.numpy()\ntrain_labels = labels.numpy()","91838d77":"sns.set_style(\"whitegrid\")\n\nplt.figure(figsize=(20,18))\nfor idx in range(36):\n    plt.subplot(6,6,idx+1)\n    plt.imshow(np.squeeze(train_features[idx]),cmap=plt.cm.binary,interpolation='nearest')\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(True)\n    plt.title(train_labels[idx])\n    plt.colorbar()\nplt.suptitle(\"Kannada MNIST Examples\")\nplt.show()","3828e21a":"activation = 'relu'\npadding = 'same'\ngamma_initializer = 'uniform'\ninput_shape=(28,28,1)\n\nwith strategy.scope():\n    input_layer = tf.keras.layers.Input(shape=input_shape)\n    hidden=tf.keras.layers.Conv2D(16, (3,3), strides=1, padding=padding, activation = activation, name=\"conv1\")(input_layer)\n    hidden=tf.keras.layers.BatchNormalization(axis =1, momentum=0.1, epsilon=1e-5, gamma_initializer=gamma_initializer, name=\"batch1\")(hidden)\n    hidden=tf.keras.layers.Dropout(0.1)(hidden)\n\n    hidden=tf.keras.layers.Conv2D(32, (3,3), strides=1, padding=padding,activation = activation, name=\"conv2\")(hidden)\n    hidden=tf.keras.layers.BatchNormalization(axis =1,momentum=0.15, epsilon=1e-5, gamma_initializer=gamma_initializer, name=\"batch2\")(hidden)\n    hidden=tf.keras.layers.Dropout(0.15)(hidden)\n    hidden=tf.keras.layers.MaxPool2D(pool_size=2, strides=2, padding=padding, name=\"max2\")(hidden)\n\n    hidden=tf.keras.layers.Conv2D(64, (3,3), strides=1, padding =padding, activation = activation,  name=\"conv3\")(hidden)\n    hidden=tf.keras.layers.BatchNormalization(axis =1,momentum=0.17, epsilon=1e-5, gamma_initializer=gamma_initializer, name=\"batch3\")(hidden)\n    hidden=tf.keras.layers.MaxPool2D(pool_size=2, strides=2, padding=\"same\", name=\"max3\")(hidden)\n\n    hidden=tf.keras.layers.Conv2D(128, (3,3), strides=1, padding=padding, activation = activation, name=\"conv4\")(hidden)\n    hidden=tf.keras.layers.BatchNormalization(axis =1,momentum=0.15, epsilon=1e-5, gamma_initializer=gamma_initializer, name=\"batch4\")(hidden)\n    hidden=tf.keras.layers.Dropout(0.15)(hidden)\n    \n    hidden=tf.keras.layers.Conv2D(256, (3,3), strides=1, padding =padding, activation = activation,  name=\"conv5\")(hidden)\n    hidden=tf.keras.layers.BatchNormalization(axis =1,momentum=0.17, epsilon=1e-5, gamma_initializer=gamma_initializer, name=\"batch5\")(hidden)\n    hidden=tf.keras.layers.MaxPool2D(pool_size=2, strides=2, padding=\"same\", name=\"max4\")(hidden)\n\n    hidden=tf.keras.layers.Flatten()(hidden)\n    hidden=tf.keras.layers.Dense(1024,activation = activation, name=\"Dense1\")(hidden)\n    hidden=tf.keras.layers.Dropout(0.05)(hidden)\n    hidden=tf.keras.layers.Dense(512,activation = activation, name=\"Dense2\")(hidden)\n    hidden=tf.keras.layers.Dropout(0.05)(hidden)\n    hidden=tf.keras.layers.Dense(256, activation = activation, name=\"Dense3\")(hidden)\n    hidden=tf.keras.layers.Dropout(0.03)(hidden)\n    output = tf.keras.layers.Dense(10, activation = \"softmax\")(hidden)\n\n    model = tf.keras.Model(inputs=input_layer, outputs=output)\n\n    model.compile(loss='sparse_categorical_crossentropy',\n                optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n                metrics=[\"accuracy\"])","b29e7ed4":"model.summary()","fa824822":"tf.keras.utils.plot_model(model)","8308e7e6":"from IPython.display import clear_output\nclass PlotLearning(tf.keras.callbacks.Callback):\n    def on_train_begin(self, logs={}):\n        self.i = 0\n        self.x = []\n        self.loss = []\n        self.val_loss = []\n        self.acc = []\n        self.val_acc=[]\n        self.fig = plt.figure()\n        self.logs = []\n\n    def on_epoch_end(self, epoch, logs={}):      \n        self.logs.append(logs)\n        self.x.append(self.i)\n        self.loss.append(logs.get('loss'))\n        self.val_loss.append(logs.get('val_loss'))\n        self.acc.append(logs.get('accuracy'))\n        self.val_acc.append(logs.get('val_accuracy'))\n\n        self.i += 1\n        f, ax = plt.subplots(1, 2, figsize=(12,4), sharex=True)\n        ax = ax.flatten()\n        clear_output(wait=True)\n\n        ax[0].plot(self.x, self.loss, label=\"loss\", lw=2)\n        ax[0].plot(self.x, self.val_loss, label=\"val loss\")\n        ax[0].legend()\n        ax[0].grid(True)\n\n        ax[1].plot(self.x, self.acc, label=\"accuracy\", lw=2)\n        ax[1].plot(self.x, self.val_acc, label=\"val accuracy\")\n        ax[1].legend()\n        ax[1].grid(True)\n\n    plt.show();","cebf04fc":"checkpoint_dir = '.\/training_checkpoints'\ncheckpoint_prefix = os.path.join(checkpoint_dir, \"ckpt_{epoch}\")","a09de279":"def decay(epoch):\n    if epoch < 5:\n        return 1e-3\n    elif epoch >= 5 and epoch < 10:\n        return 1e-4\n    else:\n        return 1e-5","0cc4a325":"callbacks = [\n    tf.keras.callbacks.TensorBoard(log_dir='logs'),\n    tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_prefix,\n                                       save_weights_only=True,verbose=1),\n    tf.keras.callbacks.LearningRateScheduler(decay,verbose=1),\n    PlotLearning(),\n    tf.keras.callbacks.EarlyStopping(monitor='val_loss',verbose=1,patience=6)\n]","31d13dda":"history = model.fit(train_dataset, \n                    validation_data=val_dataset, \n                    steps_per_epoch=512, \n                    epochs=15, \n                    callbacks=callbacks, \n                    verbose=1)","5b4db23c":"!ls {checkpoint_dir}","aa5f2f1f":"model.load_weights(tf.train.latest_checkpoint(checkpoint_dir))\neval_loss, eval_acc = model.evaluate(val_dataset,verbose=1,steps=10)\nprint('Eval loss: {:.2}, Eval Accuracy: {:.2}'.format(eval_loss, eval_acc))","33b5097d":"# %tensorboard --logdir=logs","ad2bc749":"path = 'saved_model\/'\nmodel.save(path, save_format='tf')","4ad816a5":"test_data = tf.data.Dataset.from_tensors(tf.cast(test_features,tf.float32))","6a3a4bda":"predictions = np.argmax(model.predict(test_data),axis=1)","b1073198":"submission = pd.read_csv('..\/input\/Kannada-MNIST\/sample_submission.csv')\nsubmission.head()","637e1062":"submission['label'] = predictions","5aa64a02":"submission.to_csv(\"submission.csv\",index=False)","7014a55d":"plt.figure(figsize=(8,6))\nsubmission[\"label\"].hist(bins=20)","0ecb04ea":"### Evaluate the model","edcd3316":"### Train and Validation","1786bc77":"### Define distribution strategy","fbb7362e":"### Define the callbacks","8d4901c2":"### Export to SavedModel","ee88e798":"### Create the model","b52e1434":"### Submit to Competition","f64beec6":"### Make Predictions","d769fcf3":"### Vizualize in TensorBoard","a0191ad1":"### Installing TensorFlow 2.0","f10bd40e":"### Reading the data","768bb11f":"### Train the model ","1637395e":"#### Vizualize","4baa1beb":"### Setup input pipeline","2fb220e5":"### TensorFlow setup","164dd3ac":"### Importing the dependencies"}}