{"cell_type":{"812e8ede":"code","6a52af63":"code","f001fcb7":"code","7373b1c3":"code","86cf2e82":"code","461d6923":"code","91a96cd9":"code","54eaa79f":"code","b9d7cc53":"code","610303c9":"code","3a292467":"code","20c729c2":"code","75f1d0e3":"code","f34df922":"code","4425773b":"code","202ef0ac":"code","7f5b4a6a":"code","f946f4b3":"code","8828fa8f":"code","002c423c":"code","b9990f16":"code","538287c6":"code","3be0ba9a":"code","33484504":"code","c3eade77":"code","02d710cd":"code","f231efc6":"code","95d1aa0f":"code","3644b456":"code","5d3a37a7":"code","03432680":"code","26c369b3":"code","3e935878":"code","937e72e5":"code","fd3201b0":"code","9419f6d9":"code","9d6abab3":"code","1989e014":"code","6f598c09":"code","0c3c7ef1":"code","eca66661":"markdown","706455f2":"markdown","e548274f":"markdown"},"source":{"812e8ede":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a52af63":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, Dropout, BatchNormalization, Flatten, Dense, MaxPooling2D\nfrom tensorflow.keras.utils import to_categorical\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn.metrics import mean_absolute_error, confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\n\n","f001fcb7":"df = pd.read_csv('..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv')","7373b1c3":"df.head()","86cf2e82":"df.describe().T","461d6923":"plt.figure(figsize=(12,8))\nsns.distplot(df['age']);","91a96cd9":"sns.countplot(df['ethnicity']);\n","54eaa79f":"sns.countplot(df['gender']);\n","b9d7cc53":"df['pixels'] = df['pixels'].map(lambda x: np.array(x.split(' '), dtype=np.float32).reshape(48, 48))","610303c9":"# Plot some pictures\nfig, axes = plt.subplots(1, 5, figsize=(20, 10))\n\nfor i in range(5):\n    random_face = np.random.choice(len(df))\n    \n    age = df['age'][random_face]\n    ethnicity = df['ethnicity'][random_face]\n    gender = df['gender'][random_face]\n    \n    axes[i].set_title('Age: {0}, Ethnicity: {1}, Sex: {2}'.format(age, ethnicity, gender))\n    axes[i].imshow(df['pixels'][random_face])\n    axes[i].axis('off')","3a292467":"X = np.array(df['pixels'].to_list())\nX_reshaped = X.reshape(X.shape[0], 48, 48, 1)","20c729c2":"if np.max(X_reshaped) > 1: X_reshaped = X_reshaped \/ 255\n","75f1d0e3":"input_shape = X_reshaped.shape[1:] ","f34df922":"y = df['age'].values\n","4425773b":"# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X_reshaped, y, test_size=0.2, random_state=42)","202ef0ac":"age_model = Sequential()\n\nage_model.add(Conv2D(64, kernel_size=(3,3), input_shape=input_shape, activation='relu'))\nage_model.add(MaxPooling2D(pool_size=(2,2)))\nage_model.add(BatchNormalization())\n\nage_model.add(Conv2D(128, kernel_size=(3,3), activation='relu', padding='same'))\nage_model.add(Conv2D(128, kernel_size=(3,3), activation='relu'))\nage_model.add(MaxPooling2D(pool_size=(2,2)))\nage_model.add(Dropout(0.3))\nage_model.add(BatchNormalization())\n\nage_model.add(Conv2D(256, kernel_size=(3,3), activation='relu', padding='same'))\nage_model.add(Conv2D(256, kernel_size=(3,3), activation='relu'))\nage_model.add(MaxPooling2D(pool_size=(2,2)))\nage_model.add(Dropout(0.3))\nage_model.add(BatchNormalization())\n\nage_model.add(Conv2D(512, kernel_size=(3,3), activation='relu', padding='same'))\nage_model.add(MaxPooling2D(pool_size=(2,2)))\nage_model.add(Dropout(0.5))\nage_model.add(BatchNormalization())\n\nage_model.add(Flatten())\nage_model.add(Dense(128, activation='relu'))\nage_model.add(Dropout(0.4))\nage_model.add(Dense(1))\n\nage_model.compile(optimizer='adam', loss='mse')\n\nage_model.summary()","7f5b4a6a":"n_epochs = 50\nbatch_size = 64","f946f4b3":"# Callbacks for age model\ncallbacks = [EarlyStopping(patience=4, monitor='val_loss', mode='min'), \n             ReduceLROnPlateau(patience=2, verbose=1)]             ","8828fa8f":"history = age_model.fit(X_train, y_train, \n                        epochs=n_epochs,\n                        batch_size=batch_size,\n                        callbacks=callbacks,\n                        validation_data=(X_test, y_test))","002c423c":"pd.DataFrame(history.history).plot();","b9990f16":"valid_score = age_model.evaluate(X_test, y_test, verbose=1)","538287c6":"y_pred = age_model.predict(X_test)","3be0ba9a":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","33484504":"print(\"MAE: {}\".format(mean_absolute_error(y_test, y_pred)))","c3eade77":"y = df['gender'].values\nX_train, X_test, y_train, y_test = train_test_split(X_reshaped, y, test_size=0.2, random_state=42)","02d710cd":"gender_model = Sequential()\n\ngender_model.add(Conv2D(64, kernel_size=(3,3), input_shape=input_shape, activation='relu'))\ngender_model.add(MaxPooling2D(pool_size=(2,2)))\ngender_model.add(BatchNormalization())\n\ngender_model.add(Conv2D(128, kernel_size=(3,3), activation='relu'))\n#gender_model.add(Conv2D(128, kernel_size=(3,3), activation='relu'))\ngender_model.add(MaxPooling2D(pool_size=(2,2)))\ngender_model.add(Dropout(0.4))\ngender_model.add(BatchNormalization())\n\ngender_model.add(Conv2D(256, kernel_size=(3,3), activation='relu'))\ngender_model.add(Conv2D(256, kernel_size=(3,3), activation='relu'))\ngender_model.add(MaxPooling2D(pool_size=(2,2)))\ngender_model.add(Dropout(0.5))\ngender_model.add(BatchNormalization())\n\ngender_model.add(Flatten())\n\ngender_model.add(Dense(64, activation='relu'))\ngender_model.add(Dropout(0.4))\n\ngender_model.add(Dense(1, activation='sigmoid')) #For binary classification activation function is sigmoid \n\ngender_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) #...and loss function is binary_crossentropy\n\ngender_model.summary()","f231efc6":"# Callbacks for gender model\ncallbacks = [EarlyStopping(patience=4, monitor='val_accuracy', mode='max'), \n              ReduceLROnPlateau(patience=2, verbose=1)]","95d1aa0f":"history = gender_model.fit(X_train, y_train, \n                           epochs=n_epochs,\n                           batch_size=batch_size,\n                           callbacks=callbacks,\n                           validation_data=(X_test, y_test))","3644b456":"valid_score = gender_model.evaluate(X_test, y_test, verbose=1)\nprint('Accuracy for test set: {0}'.format(valid_score[1]))","5d3a37a7":"y_pred = gender_model.predict(X_test)\ny_pred = np.round(y_pred).astype(int)","03432680":"print(classification_report(y_test, y_pred))\n","26c369b3":"cm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm, cmap='Greens', cbar=False, annot=True, fmt='d');","3e935878":"y_pred = y_pred.reshape(y_pred.shape[0])\n","937e72e5":"y = df['ethnicity'].values\n\ny = to_categorical(y, 5)\ny","fd3201b0":"X_train, X_test, y_train, y_test = train_test_split(X_reshaped, y, test_size=0.2, random_state=38)","9419f6d9":"eth_model = Sequential()\n\neth_model.add(Conv2D(64, kernel_size=(3,3), input_shape=input_shape, activation='relu'))\neth_model.add(MaxPooling2D(pool_size=(2,2)))\neth_model.add(BatchNormalization())\n\neth_model.add(Conv2D(128, kernel_size=(3,3), activation='relu'))\neth_model.add(MaxPooling2D(pool_size=(2,2)))\neth_model.add(BatchNormalization())\n\neth_model.add(Conv2D(256, kernel_size=(3,3), activation='relu'))\neth_model.add(MaxPooling2D(pool_size=(2,2)))\neth_model.add(Dropout(0.5))\neth_model.add(BatchNormalization())\n\neth_model.add(Flatten())\neth_model.add(Dense(128, activation='relu'))\neth_model.add(Dropout(0.5))\neth_model.add(Dense(5, activation='softmax')) \n\neth_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) \n\neth_model.summary","9d6abab3":"callbacks = [EarlyStopping(patience=4, monitor='val_accuracy', mode='max'), \n             ReduceLROnPlateau(patience=2, verbose=1)]","1989e014":"history = eth_model.fit(X_train, y_train, \n                         epochs=n_epochs,\n                         batch_size=batch_size,\n                         callbacks=callbacks,\n                         validation_data=(X_test, y_test))","6f598c09":"valid_score = eth_model.evaluate(X_test, y_test, verbose=1)","0c3c7ef1":"predictions = (eth_model.predict(X_test) > 0.5).astype(\"int32\")\n","eca66661":"\n# Gender prediction\u00b6\n","706455f2":"# Age prediction\u00b6\n","e548274f":"# Ethnicity prediction\n"}}