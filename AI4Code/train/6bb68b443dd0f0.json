{"cell_type":{"69f4a9e6":"code","2dc1dc8b":"code","e8ce16d1":"code","9839f61f":"code","2bf9ac55":"code","ad91682d":"code","a38556ae":"code","1dd1abcb":"code","ff6da309":"code","260c1652":"code","b9a286bf":"code","d067daf7":"code","e303abcc":"code","7f82f0a2":"code","64e42a3a":"code","c16eacf8":"code","a107dc45":"code","587bd152":"code","a60792de":"code","79393b34":"code","daa6908f":"code","79099eff":"code","3c00defd":"code","4eac34ba":"code","e6d10dcc":"code","5431754c":"code","26f55fc7":"code","69e52336":"code","1854f4e7":"code","b693ff3b":"code","ef626cc7":"code","50e82973":"code","8c575aef":"code","7af3caa0":"code","444e167c":"code","eac52498":"code","0baf10d3":"code","ed1181bb":"code","67dad7bf":"code","156b3d2e":"code","9e8c64a6":"code","946ae87e":"code","0a88a3f0":"markdown","40b37f75":"markdown","7a011814":"markdown","5e93602c":"markdown","c880f0e0":"markdown","7b177b3f":"markdown","22b10032":"markdown","21e13ea9":"markdown","c0733e6f":"markdown","0411c906":"markdown","84a3501d":"markdown","51c93bc6":"markdown","50a389f0":"markdown","7860201f":"markdown","9e1d4c76":"markdown","c4ae2963":"markdown","70df59b8":"markdown","726313df":"markdown","526f06a3":"markdown","19715505":"markdown","18cfbb77":"markdown","0a41655b":"markdown"},"source":{"69f4a9e6":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2dc1dc8b":"import csv\nimport itertools\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","e8ce16d1":"testing = pd.read_csv(\"\/kaggle\/input\/ibm-watson-marketing-customer-value-data\/WA_Fn-UseC_-Marketing-Customer-Value-Analysis.csv\")","9839f61f":"testing.head()","2bf9ac55":"date_col = 'Effective To Date'\ntesting.loc[:, date_col] = pd.to_datetime(testing.loc[:, date_col], format='%m\/%d\/%y')","ad91682d":"testing.info()","a38556ae":"testing.describe()","1dd1abcb":"testing.describe(include='object')","ff6da309":"# https:\/\/www.pewresearch.org\/fact-tank\/2018\/09\/06\/the-american-middle-class-is-stable-in-size-but-losing-ground-financially-to-upper-income-families\/\nconds = [\n    testing.loc[:, 'Income'] < 41_000,\n    testing.loc[:, 'Income'] > 120_400,\n]\nchoices = [\n    'Low income',\n    'Upper income',\n]\ntesting['Income level'] = np.select(conds, choices, default='Middle income')","260c1652":"offer_data = []\noffers = list(testing.loc[:, 'Renew Offer Type'].unique())\nfor offer in offers:\n    cond_offer = testing.loc[:, 'Renew Offer Type'] == offer\n    offer_data.append(testing.loc[cond_offer])","b9a286bf":"def pie_chart(data: pd.DataFrame, title: str, fontsz: str = 14, figsize:tuple =(8,8), boxtitle = None):\n    \"\"\"Simple pie chart\n    \n    Args:\n        data: data information for graph\n        title: Title of graph\n        fontsz: fontsize in chart\n        boxtitle: title for categories\n        \n    Returns:\n        Show a graph (notebook)\n    \"\"\"\n    if not boxtitle:\n        boxtitle = data.index.name\n    fig, ax = plt.subplots(figsize=figsize, subplot_kw=dict(aspect=\"equal\"))\n\n    def func(pct, allvals):\n        absolute = int(round(pct\/100.*np.sum(allvals)))\n        return \"{:.1f}%\\n{:d}\".format(pct, absolute)\n\n\n    wedges, texts, autotexts = ax.pie(data.iloc[0:,0], autopct=lambda pct: func(pct, data),\n                                      textprops=dict(color=\"w\"))\n    ax.legend(wedges, data.index,\n              title=boxtitle,\n              loc=\"center left\",\n              bbox_to_anchor=(1, 0, 0.5, 1))\n    plt.setp(autotexts, size=fontsz)# , weight=\"bold\")\n    ax.set_title(title)\n    plt.show()\n\n\ndef bar_by_values(data: pd.DataFrame, show_by: str, cols: list):\n    \"\"\"Show data grouping by offer.\n    \n    Args:\n        data: pd.DataFrame\n        show_by: name of col to split\n        cols: cols to grouping\n    \"\"\"\n    dataframes = []\n    values = list(data.loc[:, show_by].unique())\n    for value in values:\n        cond_value = data.loc[:, show_by] == value\n        dataframes.append(data.loc[cond_value])\n    a = int(np.sqrt(len(values)))\n    b = int(len(values) \/ a)\n    a, b = max(a, b), min(a, b)\n    fig, axes = plt.subplots(a,b , figsize=(12, 12))\n\n    for dataframe, ax, value in zip(dataframes, fig.axes, values):\n        data.groupby(cols).count()['Customer'].unstack().plot(kind='bar', ax=ax, ylabel='Customers');\n        ax.set_title(f'{value}')\n    fig.tight_layout()","d067daf7":"bar_by_values(testing, 'Renew Offer Type', ['Response', 'Gender', 'Marital Status'])","e303abcc":"bar_by_values(testing, 'Renew Offer Type', ['Response', 'Education'])","7f82f0a2":"bar_by_values(testing, 'Renew Offer Type', ['Response', 'Gender', 'Income level'])","64e42a3a":"print(f'Number of customers: {testing.Customer.nunique()}')","c16eacf8":"cond_affirmative_response = testing.loc[:, 'Response'] == 'Yes'\ncustomer_with_response = testing.loc[cond_affirmative_response, 'Customer'].nunique()\nprint(f'Customer with response: {customer_with_response} ({customer_with_response \/ testing.Customer.nunique() * 100:.2f} %)')","a107dc45":"fig, ax = plt.subplots(figsize=(12,6))\nresponse_group_data = testing.groupby(['Response']).agg({'Customer': 'count'})\nresponse_group_data.plot(kind='bar', ax=ax, title='User response', ylabel='Users');","587bd152":"response_group_data['Percentage [%]'] = response_group_data['Customer'] \/ response_group_data['Customer'].sum() * 100\nresponse_group_data","a60792de":"pie_chart(data=testing.groupby('Renew Offer Type').agg({'Customer': 'count'}), title='Offers')","79393b34":"totals = testing.groupby(['Renew Offer Type']).agg({'Customer': 'count'})['Customer']","daa6908f":"totals = 2 * list(totals)","79099eff":"response_offer_group = testing.groupby(['Renew Offer Type', 'Response']).agg({'Customer': 'count'})\nresponse_offer_group['Percentage [%]'] = response_offer_group['Customer'] \/ totals[:7] * 100\nresponse_offer_group","3c00defd":"engaged_users_by_offer = []\noffers = list(testing.loc[:, 'Renew Offer Type'].unique())\nfor offer in offers:\n    cond_offer = testing.loc[:, 'Renew Offer Type'] == offer\n    offer_data.append(testing.loc[cond_offer & cond_affirmative_response])","4eac34ba":"engaged_users = testing.loc[cond_affirmative_response]","e6d10dcc":"engaged_users.groupby('Renew Offer Type').count()['Customer'].plot.bar();","5431754c":"pie_chart(data=engaged_users.groupby('Renew Offer Type').agg({'Customer': 'count'}), title='Offers')","26f55fc7":"vehicule_size_offer_group = engaged_users.groupby(['Renew Offer Type', 'Vehicle Class']).agg({'Customer': 'count'})\nvehicule_size_offer_group['Percentage [%]'] = vehicule_size_offer_group['Customer'] \/ vehicule_size_offer_group['Customer'].sum() * 100\nvehicule_size_offer_group","69e52336":"vehicule_size_offer_group = engaged_users.groupby(['Renew Offer Type', 'Vehicle Size']).agg({'Customer': 'count'})\nvehicule_size_offer_group['Percentage [%]'] = vehicule_size_offer_group['Customer'] \/ vehicule_size_offer_group['Customer'].sum() * 100\nvehicule_size_offer_group","1854f4e7":"engaged_users.groupby(['Renew Offer Type', 'Vehicle Size']).count()['Customer'].unstack().plot(kind='bar', title='Vehicle Size per Offer', ylabel='Customers');","b693ff3b":"categorical_cols = [\n    'State', 'Coverage', 'Education', 'EmploymentStatus', \n    'Gender', 'Marital Status', 'Number of Policies', 'Policy Type',\n    'Policy', 'Renew Offer Type', 'Sales Channel', 'Vehicle Class',\n    'Vehicle Size',\n]\nfig, axes = plt.subplots(5, 3, figsize=(15, 18))\n\nfor ax, col in zip(fig.axes, categorical_cols):\n    engaged_users.groupby(col)['Customer'].count().plot(\n        kind='bar', ax=ax)\n    ax.set_ylabel('Customers')\n\nfig.tight_layout()","ef626cc7":"bar_by_values(engaged_users, 'Renew Offer Type', ['Vehicle Size', 'Gender'])","50e82973":"bar_by_values(engaged_users, 'Vehicle Size', ['Vehicle Class', 'Income level'])","8c575aef":"inner_groups_cols = [\n    'State', 'Coverage', 'Education', 'EmploymentStatus', \n    'Gender', 'Marital Status', 'Policy Type',\n    'Policy', 'Renew Offer Type', 'Sales Channel',\n    'Vehicle Class', 'Vehicle Size',\n]\ntables = []\nnames = []\nfor cols in list(itertools.combinations(inner_groups_cols, r=2)):\n    table = testing.pivot_table(values='Customer', index=cols[1], columns=cols[0], aggfunc='count').fillna(0)\n    tables.append(table)\n    names.append(' vs '.join(cols))\n    display(table)","7af3caa0":"fig, axes = plt.subplots(22, 3, figsize=(18, 120))\n\nfor ax, table, name in zip(fig.axes, tables, names):\n    table.plot(kind='bar', title=name, ax=ax);\n\nfig.tight_layout();","444e167c":"testing.groupby(['Sales Channel']).count()['Vehicle Size'].plot.bar();","eac52498":"sales_chanel_vs_vehicle_size = tables[-2]\nfor col in tables[-2].columns.values:\n    sales_chanel_vs_vehicle_size[col + ' [%]'] = sales_chanel_vs_vehicle_size[col].values \/ sales_chanel_vs_vehicle_size[col].values.sum() * 100\nsales_chanel_vs_vehicle_size","0baf10d3":"fig, ax = plt.subplots(figsize=(12,6))\nresponse_pivot_data = testing.pivot_table(values='Customer', index=['Vehicle Size', 'Response'], columns='Sales Channel', aggfunc='count').fillna(0)\nresponse_pivot_data.plot(kind='bar', ax=ax, title='User response by Sales Channel and Vehicle Size', ylabel='Customers');","ed1181bb":"response_pivot_data","67dad7bf":"bar_by_values(testing, 'Sales Channel', ['Vehicle Size', 'Response'])","156b3d2e":"graph = sns.pairplot(testing[['Months Since Policy Inception', 'Customer Lifetime Value']], diag_kind=\"kde\")\ngraph.map_lower(sns.kdeplot, levels=4, color=\".2\")\n\ngraph.fig.set_figwidth(9)\ngraph.fig.set_figheight(9)","9e8c64a6":"plt.figure(figsize = (8, 6))\nplt.scatter(engaged_users['Months Since Policy Inception'], engaged_users['Customer Lifetime Value'])\nplt.ylabel('Customer Lifetime Value')\nplt.xlabel('Months Since Policy Inception')\nplt.show()","946ae87e":"graph = sns.pairplot(testing, diag_kind=\"kde\")\ngraph.map_lower(sns.kdeplot, levels=4, color=\".2\")","0a88a3f0":"```python\ndata = pd.read_excel('TESTING_BD.xlsx')\ndata.to_csv('testing.csv', encoding='utf-8', index=False, quoting=csv.QUOTE_NONE, escapechar='\\\\')\ntesting = pd.read_csv('testing.csv', sep='\\\\\\,', encoding='utf-8', engine='python')\n```","40b37f75":"### Pivot the data and extract and transform the inner-level groups to columns","7a011814":"### Gender segmentation","5e93602c":"### Customers engaged","c880f0e0":"### Percentage engaged customers grouped by renewal offer type","7b177b3f":"## Transform data","22b10032":"## Analyze it to understand how different customers behave and react to different marketing strategies\nSplit marketing strategies","21e13ea9":"Change date column.","c0733e6f":"## Exploratory Analisys","0411c906":"#### Visualize this data in bar plot","84a3501d":"### Offers by Vehicle class","51c93bc6":"### Response by Income level and coverage.","50a389f0":"### Correlation matrix: numeric columns","7860201f":"## Customers who have responded","9e1d4c76":"### Libraries","c4ae2963":"# Oscar Bola\u00f1os\n\n### Physics Engineer.\n\n\n[LinkeIn](https:\/\/www.linkedin.com\/in\/oscar-physics-engineer\/)","70df59b8":"### Offers by Vehicle size","726313df":"### Response by Education level.","526f06a3":"### Categorical data","19715505":"### Engagement rates differ by different sales channels.","18cfbb77":"### Income level of customers by Vehicle size and class","0a41655b":"### Response by gender and marital status."}}