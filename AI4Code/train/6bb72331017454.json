{"cell_type":{"5911ca5d":"code","f349c8a0":"code","ca718386":"code","bcb34e0f":"code","36c1a9b7":"code","ecfe5c76":"code","b5587cd3":"code","18625839":"code","f3222b45":"code","c8cc984b":"code","4dc4a5c7":"code","1fdee4ea":"code","b359bac2":"code","dfa20988":"code","d7a98852":"code","b1b9826c":"code","a8dd5ebc":"code","3d7e1930":"code","993d6b85":"code","3e485212":"code","20665951":"code","3dec9c20":"code","7a643cb3":"code","cf596471":"code","aca018d4":"code","e2fe7abb":"code","ae5a0870":"markdown","9ceea462":"markdown","5f6a23a3":"markdown","737c3dc5":"markdown","c86013a9":"markdown"},"source":{"5911ca5d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f349c8a0":"import matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')","ca718386":"plt.style.available","bcb34e0f":"df = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')   # DOSYAYI OKUR \ndf.head()    # \u0130LK 5 SATIRI GET\u0130R\u0130R","36c1a9b7":"from matplotlib.pyplot import figure \nplt.rcParams['figure.figsize']= (6,4)\ndf[[ 'age','trestbps', 'chol', 'thalach', 'oldpeak']].hist();","ecfe5c76":"from sklearn.preprocessing import StandardScaler, MinMaxScaler, Normalizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix, plot_roc_curve, classification_report, roc_curve","b5587cd3":"pip install mglearn","18625839":"import mglearn","f3222b45":"mglearn.plot_scaling.plot_scaling()","c8cc984b":"scaler = StandardScaler()\nscaler.fit(df.drop('target', axis=1))   # MODEL\u0130 KURUYO","4dc4a5c7":"X = scaler.transform(df.drop('target', axis=1))  # TARGET S\u00dcTUNUNU YAN\u0130 SONUCU \u00c7IKARDIK \ny = df.target   # SADECE SONUCU ALDIK\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=200)  ","1fdee4ea":"X_train[0]  # 13 DE\u011e\u0130\u015eKEN\u0130 TUTUYORUZ","b359bac2":"y_train[0]   # SADECE 1 S\u00dcTUN OLDU\u011eU \u0130\u00c7\u0130N 1 DE\u011eER GELD\u0130. ","dfa20988":"import seaborn as sns","d7a98852":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier","b1b9826c":"lr = LogisticRegression()    # MODEL\u0130 KURDUK    \nmodel = lr.fit(X_train, y_train)    # E\u011e\u0130TT\u0130K\n\nlr_predict = lr.predict(X_test)    # TEST ETT\u0130K\nlr_acc_score = accuracy_score(y_test, lr_predict)\nprint(\"Acc:\",accuracy_score(y_test, lr_predict))   #accuracy(do\u011fruluk)\nprint()  \n\nplot_confusion_matrix(model, X_test, y_test)\nplt.grid(False)\nplt.show()\n\nplot_roc_curve(model, X_test, y_test)\nplt.plot([0,1],[0,1],'k--')\nplt.show()\n\ntarget_names = ['class 0', 'class 1']\nprint(\"Detailed classification report:\")\nprint()  \nprint(classification_report(y_test, lr_predict, target_names=target_names))    #precision(kesinlik)\nprint()\n\n\n","a8dd5ebc":"svm = SVC()\nsvm.C = 0.1\nmodel = svm.fit(X_train, y_train)\n\nsvm_predict = svm.predict(X_test)\n\nsvm_accuracy_score = accuracy_score(y_test, svm_predict)\nprint(\"Acc:\",accuracy_score(y_test, svm_predict))\n\nplot_confusion_matrix(model, X_test, y_test, cmap='YlGnBu')\nplt.grid(False)\nplt.show()\n\nplot_roc_curve(model, X_test, y_test)\nplt.plot([0,1],[0,1],'k--')\nplt.show()\n\ntarget_names = ['class 0', 'class 1']\nprint(\"Detailed classification report:\")\nprint()  \nprint(classification_report(y_test, svm_predict, target_names=target_names))    #precision(kesinlik)\nprint()","3d7e1930":"ann = MLPClassifier()\nann.hidden_layer_size = (32,64,32)\nann.activation = 'tanh'\nann.solver = 'adam'\nann.max_iter = 1500\nann.alpha = 0.0001\n\nmodel = ann.fit(X_train, y_train)\n\nann_predict = ann.predict(X_test)\nann_accuracy_score = accuracy_score(y_test, ann_predict)\n\nprint(\"Acc:\",accuracy_score(y_test, ann_predict))\n\nplot_confusion_matrix(model, X_test, y_test, cmap='PuBu')\nplt.grid(False)\nplt.show()\n\nplot_roc_curve(model, X_test, y_test)\nplt.plot([0,1],[0,1],'k--')\nplt.show()\n\ntarget_names = ['class 0', 'class 1']\nprint(\"Detailed classification report:\")\nprint()  \nprint(classification_report(y_test, ann_predict, target_names=target_names))    #precision(kesinlik)\nprint()","993d6b85":"knn = KNeighborsClassifier()\nmodel = knn.fit(X_train, y_train)\n\nknn_predict = knn.predict(X_test)\nsns.set_style('whitegrid')\n\n\nprint(\"Acc:\",accuracy_score(y_test, knn_predict))\n\nplot_confusion_matrix(model, X_test, y_test, cmap='OrRd')\nplt.grid(False)\nplt.show()\n\nplot_roc_curve(knn, X_test, y_test)\nplt.plot([0,1],[0,1],'k--')\nplt.grid(False)\nplt.show()\n\ntarget_names = ['class 0', 'class 1']\nprint(\"Detailed classification report:\")\nprint()  \nprint(classification_report(y_test, knn_predict, target_names=target_names))    #precision(kesinlik)\nprint()","3e485212":"from sklearn.metrics import roc_auc_score,roc_curve","20665951":"lr_false_positive_rate,lr_true_positive_rate,lr_threshold = roc_curve(y_test,lr_predict)                                                            \nann_false_positive_rate,ann_true_positive_rate,ann_threshold = roc_curve(y_test,ann_predict)\nknn_false_positive_rate,knn_true_positive_rate,knn_threshold = roc_curve(y_test,knn_predict)\nsvm_false_positive_rate,svm_true_positive_rate,svm_threshold = roc_curve(y_test,svm_predict)\n\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(10,5))\nplt.title('Receiver Operating Characteristic Curve')\nplt.plot(lr_false_positive_rate,lr_true_positive_rate,label='Logistic Regression')\nplt.plot(ann_false_positive_rate,ann_true_positive_rate,label='Artificial Neural Network')\nplt.plot(knn_false_positive_rate,knn_true_positive_rate,label='K-Nearest Neighbor')\nplt.plot(svm_false_positive_rate,svm_true_positive_rate,label='Support Vector Machine')\nplt.plot([0,1],ls='--')\nplt.plot([0,0],[1,0],c='.5')\nplt.plot([1,1],c='.5')\nplt.ylabel('True positive rate')\nplt.xlabel('False positive rate')\nplt.legend()\nplt.show()","3dec9c20":"from scipy.stats import linregress #FOR SIGNIFICANCE (P-VALUE)\n\nlinregress(df['age'],df['target'])","7a643cb3":"linregress(df['chol'],df['target'])","cf596471":"linregress(df['thalach'],df['target'])","aca018d4":"linregress(df['oldpeak'],df['target'])","e2fe7abb":"linregress(df['trestbps'],df['target'])","ae5a0870":"**Recall** \u2014 What percent of the positive cases did you catch?\n\nRecall is the ability of a classifier to find all positive instances. For each class it is defined as the ratio of true positives to the sum of true positives and false negatives.\n\nRecall:- Fraction of positives that were correctly identified.\n\nRecall = TP\/(TP+FN)","9ceea462":"**F1 score** \u2014 What percent of positive predictions were correct?\n\nThe F1 score is a weighted harmonic mean of precision and recall such that the best score is 1.0 and the worst is 0.0. F1 scores are lower than accuracy measures as they embed precision and recall into their computation. \n\nAs a rule of thumb, the weighted average of F1 should be used to compare classifier models, not global accuracy.\n\nF1 Score = 2*(Recall * Precision) \/ (Recall + Precision)","5f6a23a3":"**There are four ways to check if the predictions are right or wrong:**\n\nTN \/ True Negative: the case was negative and predicted negative\n\nTP \/ True Positive: the case was positive and predicted positive\n\nFN \/ False Negative: the case was positive but predicted negative\n\nFP \/ False Positive: the case was negative but predicted positive","737c3dc5":"**Support**\n\nSupport is the number of actual occurrences of the class in the specified dataset. Imbalanced support in the training data may indicate structural weaknesses in the reported scores of the classifier and could indicate the need for stratified sampling or rebalancing. Support doesn\u2019t change between models but instead diagnoses the evaluation process.\n","c86013a9":"**Precision** \u2014 What percent of your predictions were correct?\n\nPrecision is the ability of a classifier not to label an instance positive that is actually negative. For each class, it is defined as the ratio of true positives to the sum of a true positive and false positive.\n\nPrecision:- Accuracy of positive predictions.\n\nPrecision = TP\/(TP + FP)"}}