{"cell_type":{"ddb5f111":"code","c64542fc":"code","2e096740":"code","284c4ac7":"code","2b42c152":"code","814fc9a4":"code","da49263c":"code","45400985":"code","df9241fc":"code","0fa3c159":"code","8e8aeccc":"code","9330826c":"code","a979eb9c":"code","8f82498e":"code","7b56442d":"code","063c82fc":"code","19086940":"code","05e3d27a":"markdown","6de52442":"markdown","7d18d7fb":"markdown","54389798":"markdown","4ebcb731":"markdown","10668010":"markdown","00275b76":"markdown","f180411c":"markdown","3a79fdae":"markdown","a32e447f":"markdown","1aa73464":"markdown","546bf6d5":"markdown","3d385fa7":"markdown","97c28753":"markdown","39bcacb3":"markdown","b31604a4":"markdown","0784a835":"markdown","09c6641c":"markdown","b5a56645":"markdown","43c474c9":"markdown"},"source":{"ddb5f111":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras \nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import Dense, Flatten, Dropout,MaxPool2D\n# loading data\nfrom keras.datasets import fashion_mnist\n#for visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\n# print version of tensorflow\nprint(tf.__version__)","c64542fc":"(train_images, train_labels),(test_images, test_labels) = fashion_mnist.load_data()","2e096740":"print(\"Train Images Shape: \", train_images.shape)\nprint(\"Train Labels Shape: \", train_labels.shape)\nprint(\"Test Images Shape: \", test_images.shape)\nprint(\"Test Labels Shape: \", test_labels.shape)\nprint('_' * 50)\nlabels = ['T-shirt','Trouser','Pullover','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle boot']\nprint(labels)","284c4ac7":"val_images = test_images[:9000]\nval_labels = test_labels[:9000]\ntest_images = test_images[9000:]\ntest_labels = test_labels[9000:]","2b42c152":"sns.countplot(train_labels)\nplt.show()  ","814fc9a4":"plt.figure(figsize = (10,10))\nfor i in range(25):\n  plt.subplot(5,5,i+1)\n  plt.title(str(labels[train_labels[i]]),fontsize = 16, color = 'black', pad = 2)\n  plt.imshow(train_images[i] )\n  plt.xticks([])\n  plt.yticks([])\n\nplt.show()  ","da49263c":"#reshaping train_images\ntrain_images = train_images.reshape(train_images.shape[0], train_images.shape[1], train_images.shape[2],1)\n#normalizing \ntrain_images = train_images \/ 255.0\n# reshaping test_images\ntest_images = test_images.reshape(test_images.shape[0], test_images.shape[1], test_images.shape[2],1)\n# normalizing\ntest_images = test_images \/ 255.0\n#reshaping validation images\nval_images = val_images.reshape(val_images.shape[0], val_images.shape[1], val_images.shape[2],1)\n# normalizing \nval_images = val_images \/ 255.0","45400985":"val_labels = tf.one_hot(val_labels.astype(np.int32), depth = 10)\ntrain_labels = tf.one_hot(train_labels.astype(np.int32), depth = 10 )\ntest_labels = tf.one_hot(test_labels.astype(np.int32), depth = 10)","df9241fc":"\nmodel = Sequential()\nmodel.add(Conv2D(32, (2, 2), input_shape=(28, 28, 1), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Conv2D(64, (2, 2), input_shape=(28, 28, 1), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.1))\nmodel.add(Flatten())\nmodel.add(Dense(units = 16, activation = 'relu'))\nmodel.add(Dense(units = 8, activation = 'relu'))\n# 10 units in the last Dense layer as there are 10 classes to be classified into\nmodel.add(Dense(units = 10, activation = 'softmax'))\n\n# printing the summary of the model \nprint(model.summary())","0fa3c159":"model.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['acc'])","8e8aeccc":"class myCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs = {}):\n    if(logs.get('val_acc')>0.900):\n      print(\"Accuracy has reached over 90% .. Stopping training !!!!\")\n      self.model.stop_training = True\n\ncallba = myCallback()      ","9330826c":"EPOCHS = 30\nBATCH_SIZE = 64\nhistory = model.fit(train_images, train_labels, batch_size = BATCH_SIZE, \n                    epochs = EPOCHS, verbose = 2, validation_data = (val_images, val_labels),\n                    callbacks = myCallback())","a979eb9c":"plt.subplot(2,1,1)\nplt.plot( history.history['loss'], label = 'loss')\nplt.plot( history.history['val_loss'], label = 'val_loss')\nplt.legend(loc = 'best')\nplt.subplot(2,1,2)\nplt.plot( history.history['acc'], label = 'accuracy')\nplt.plot( history.history['val_acc'], label = 'val_accuracy')\nplt.legend(loc = 'best')\nplt.show()","8f82498e":"print(\"Final Accuracy:\",np.round(model.evaluate(test_images, test_labels)[1] * 100,2))","7b56442d":"predict = model.predict(test_images)\nplt.figure(figsize = (10,7))\nfor i in range(25):\n  plt.subplot(5,5,i+1)\n  plt.tight_layout(pad = 1)\n  plt.imshow(test_images.reshape( test_images.shape[0],28,28)[i], cmap = plt.cm.binary)\n  if labels[np.argmax(predict[i])] != labels[np.argmax(test_labels[i])]:\n      plt.title(str(labels[np.argmax(predict[i])]), fontsize = 15, color = 'red',pad = 5)\n  else:\n    plt.title(str(labels[np.argmax(predict[i])]), fontsize = 15, color = 'lime',pad = 5)    \n  plt.xticks([])\n  plt.yticks([])","063c82fc":"from sklearn.metrics import confusion_matrix\n#predicted values\ny_pred = np.argmax(predict,axis = 1) \n# true values\ny_true = np.argmax(test_labels,axis = 1)\n# compute the confusion matrix\nmatrix = confusion_matrix(y_true, y_pred) \n\nplt.figure(figsize = (15,10) )\nsns.heatmap(matrix, annot = True, fmt = 'g')\nplt.xticks(ticks = range(10) ,labels = labels)\nplt.yticks(ticks = range(10) ,labels = labels)\nplt.show()","19086940":"from sklearn.metrics import classification_report\nprint(classification_report(y_true, y_pred))","05e3d27a":"\n### Feel free to comment and upvote.\n### Thanks For your visit .... ","6de52442":"### Classification Report","7d18d7fb":"## Load Data\nFirst step of any machine learning project is to load the data and divide it into a training and testing dataset. The MNIST dataset can be downloaded directly from tensorflow datasets.\n\nHere, our training and testing images are 28 X 28 grayscale image of clothes. Our aim is to train the model to predict the image of the clothes.\nLabels for the images in our fashion_mnist dataset are     'Tshirt','Trouser','Pullover','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle boot'","54389798":"# Import Necessary Libraries","4ebcb731":"### Confusion Matrix","10668010":"# Model Evaluation\n\n\n #### Loss and Accuracy Curves\n\n\n","00275b76":"## Split data for validation and testing\nHere, we will divide testing data into validation data and testing data so that we can use validation data to avoid overfitting and can use testing data to test the performance of our CNN model.\nHere we have used 90% of our test data for validation and remaining 10% for testing","f180411c":"# Building CNN Model\nHere, we will build our model using Sequential API","3a79fdae":"### Image Plot\nHere, we will plot our testing images.\nImage with green title refers to the correct predction while images with red title refers to incorrect prediction","a32e447f":"# Visualizing Data","1aa73464":"### Understanding Data\nFashion MNIST data is already preprocessed so we do not have to preprocess it. \nSo, let's surfacely look data","546bf6d5":"<img src = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxQTEhUTExMWFhUXGR0aGBgYGB8fHxsgISIdIB4iHh4iHSggIBolIB4bIzEiJSorLi4uGh8zODMtNygtLisBCgoKBQUFDgUFDisZExkrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrK\/\/AABEIAOEA4QMBIgACEQEDEQH\/xAAcAAACAwEBAQEAAAAAAAAAAAAGBwAFCAQDAgH\/xABPEAACAQIDBQYDAwUOBQALAAABAgMAEQQSIQUGBzFBEyJRYXGBMpGhFLHBI0JSYpIIFSUzNFNyc4KissLR8CRDY9LhFhc1REV0g7O04vH\/xAAUAQEAAAAAAAAAAAAAAAAAAAAA\/8QAFBEBAAAAAAAAAAAAAAAAAAAAAP\/aAAwDAQACEQMRAD8AXG5OzhJc5VLlgEzDQar8vi5+VGUex8RmYfk17oYkjmCFJ72TW2ZQR50L7jGy3Gh\/Ka+BAUg\/SrfEbSnJuZpDa9u9yva\/zyr8hQCG9WEVWR1UKHXUDlfQ\/cRX3sncvG4lFkhgLRtybMoGhsebXru3kwTyth40GZ3YKo8SwQCnXuxs5YMMkCqyiItHdhYuVNme3gzXI8rUChxnDHFBT2SSs6nUOqKG80PanTr3gpsfahXbOw58KwTERmNmFwCQbi9uhPWtMKhBYkqRfugLYgeZubnzsKVXGdAZsMdMw0tpcgm\/jcgEHmBa459ArsNAmHVQqqDlBJIBJ6G9\/Mcq9MfabuyoNQct0C\/s2A09NKYW5eEjbCq7RKWLOM+mawY2F7HQV570ZewkspsAxF7GxJHI2uKBE7O2TLPIY4lzMPxIUa8gSSBrRRBw1xB+OSNdOhzfPkKseGmKWGfFFrgdpEhI6BndflnKX8r0xGitp4UCyh4bkEl5Sy6WEYUMddfibLoOWuvlVfu5ud9o2g2GzEwxG8j2sco6W1s5PdtfTXwpsRp3gPE2pT7S3rmw+0cVNhZbK8jG3NWF+oP0oHbs3d\/C4ePLHAiKvevlzFrA\/ETcsCOYpfcRtxYPs5xmDjyZRndACAV0uQp1UjnbwvTTh7yLfW6i\/ncC9LHjBt+fD9nhoX7OKSM5goAOhIsCOSkW0HhQJ+rfYO7WJxmc4ePNkFzra\/kCdC3W1XuxeHeInSOQaoy5+4Lm3gNQMx+WvOnduzu9FhYwkaEAfeRY353PQm+th4CgzdtLYWJw+s0EkY5XZTb0zcr147Jw4knijPJ3VT7kCn3xewbPs6U5W7hRuXQHU\/I86X3BGNTjJS6qwENxmAOuZeVxoaAUxSmXDvKbExzBAQABlYMRy6XXT1qlrTO\/OxIRs3F5YYwRGX0RRqoJB0HMa\/OszUDJ4ObOjZsRLIqm2SOMstxmYkm2nOw+tX+\/eyIpMLOFSNZIkEwyoA1g2VuQFx4+1D3CTaAaRcNk+EyTF78zkCKLW0tc6+dE3ELan2VYpMhcOJYXW5F1dRfXxzKp9jQJKv0CuzZeESRrSSiIeJUn7uXvaj3d1NmYXvPKsh5ZlDO\/W9rLZL35jXzoF7NgpFcI0bq5tZSpBN+Vha5vXjIhUlSCCDYg8wRzv506tp784BCksMAxEyXyM0ZQp1+N7nqdFB9qUO25xJiJZAmQO5fLe9sxuRew60GjuH2y8N+92HVVgkPZqZCqoxzkZiGI1zC9vGlnx5wkKYqFohGGKMJQmW+YH84DUNYjnR1wLw4GzAwGryuT52sB9BSs4zYfJtac\/phH+agfhQBFSpUoCLZO1hBh7qVMmYjKeoNr\/So29JP\/ACl\/aNDtSgINs7UEkMDK9pVNzluCpHK3hbS1euyt+cfAgihnOXMSAURiSxudWUkkmqGXCOqLIyMEe+RiNGtzsetqP9xsFGuHSUxqZGZu8wuQBpp4e1Bx7U3y2zBbt5Hjzcs0MYv4\/mUMbU25NiZlmxD53UAXsBoDe1gAOppz7VxonADojXAzXF7nlyOg5Dl1pO73YFYcXIiDKtwVA6XH3XvQMTYu\/PZquHgj7W1zcKTcsS3PMByr82lvqWJgniMQcEZipAFxca5iLV58Ndjo+EDvzaQ5fMC1z9w96sd\/thIMBKU+NbOdPzQfH25edAq4dsSQzySwPlLFgdAQyk3sQdCNAfajLZG+G1cSSIMPHJ5iL8SbXpeQx5mCjmSB86fOMwoihjVLBSgGUdLaHTztf3oADbW+W0oDknijiYj+bANiOhvzoEXnr701tuwCTCYgtYhEuB1vqQR8qU9Bp\/C7ZjKJZZiCotaCQ30H6vK1KPjJtaGeeERElo1ZXDKVIJII0IHSmfsTa6iGJeV07tv1Y8xv7CkfxAlDY+ZgAL5b28cq3oOHZG8OKw2kE8iA\/mg939k3F\/O1EE+29sZDK0kwQAEtZQLHlrbzqt3TwCStZwTdraGxIAJIB6Hl8qNoN2EYdk8ZVQRmDY06eYj5X8r0AFjt68bKhilxMjIdCpPPyNEnBnHxR4xllbL2iZV0JLHMpsLDmaEtuRIsjdn8GY5db93pz1qw4ezBNpYUnkZAvu11H1IoH7vttqJdn4rMWAMToCyMBdlIUXt1JArMFP7ihjF\/eyfQXzrEf6QKk0gaBj8F51jmxEjRyvaNT+TjLgAMC17a30FgOetXvEvGR4rAHsUmfspLs\/ZOFBu97lgNLNz5aVQcDNsNFtEQ65J1KkeBUFlP0I96YvHPbLwYARodZ3yMfBQCxt66D0vQZ2Br6Ep8T86+KlB99ofE\/Ovg0SRbkYxou1WFicwGQDWxBOb00sfC49qLG4R4naORSrqbMp5g0Dp4R76YLDYAQTzrHIsjmzA6g2tra1LvijtmPF7RllhYNHZFVh1sov8AW\/yqm3d2ScVOsIcISCbnyF7AXFz5VeYzh9iI0MjPEEu2pYi2XnfSw0150AhUrt+xL\/Px\/wB7\/tr9oLDZCYEB\/tDzFtcnZoLcut2B5+HhXnsWTBxyZ5xJMoF1QKFBbpnOa+TxA5+NUtSgvt4NoLiGaR8QztayKIsqKOiqM3dUeQo13XK\/YYbfFdr\/AFv+FKyiTZm9HYQxIqZmQyXzfDZrWtY3voaBjQr3lvyDLf0uL\/Sl5xFK\/bGy8so\/GumXf6UqQIYxcEX73UW8apN5dpJiJzIgYLlAs1r6DyoGfwt2ss0ZjWPJ2IA+K983sCPh+tXHEPa4wuEJZO0EjKls1ujHwOlri3mKBeD00pmmihjV2KB+8+UAKbc7HXvDTyNXvGJMQMJF2sSKplFismbXK2hGUf7FArNki88X9Yv3inhLOJEJFu7I8f7AUa+5PypHbJxQimjkYZgjBiB1tV6d951eTssoR5HcBlBIzG\/OgN9pvaOeP9PDuf2SP++lBRXht8nZmOIFwYnjXIoBu2XU68u7QpQOfZmbs9n6fxiP\/wDitSx3xFsbOD0e3yAFG+zd9YETZwdZF+zBg9wO9eJoxl1vzN+9lFqBt65+0xc0wVlWRyy5rcj5glT7E0H5umpOMwyg2vKg+ov9K0NPEpmZ+0cG98omjA53y2tex8DrSC3L2ZPNiUaBCzREOSCBltyJLEDnbSmZiMJtpnF+wJ55+5Yeugb6H3oFBtc\/l5rCw7R9PDvGvXdwf8Xh9bflo9fDvCurevYuJw8xOJjymQlgQQQ2utiNOvLzqogkysrDoQflQNfi4rDDPcix2hLoD4IOfvSkov333sTGBljVwpxEs3fAGjqgA0J1uGv6ihCgaH7n3DK2PkcjVIWK+VyoP0piccMGJNlyNa7RvG4J6a5T9DSm4RbyrgcVIzQyzdpHkCxAFuYY2UkX0B0FHHEniGj4OXDfY8XE0y2DToqDQqbgBmJHL5igSuBjQt372\/VIv9dKYe6kezVKsVmDKdSyAn5hm+gpZ1KDRmG3wwioF7R9B\/Mvc+ptrSi31w32rHSS4dXKPYlipsCF10FzyH1oQr6SQjkSPQ0BDsbA9nIrGCeQg3uAUy+a35sOetqYO39oYhsNKridrRSoZCgyPfUOCgAHLLqBz9TSfMzHmx+Zr8ErWtmNvC+lB8VKlSgv8Ns6LIFILSgB3N9FBHdUD5EnzA8aZ2wtgQNs0SGNdIpLk+Wb68vnQTu5sQ4sPLhyGbKolRjlKN0IJ0ZWsetxytVrtPAYzCwmN2ZYXOqrIpUnTmAb9D5UAwdlRHDzPlIZEQqRfmXC2tfqD9K693NwcVNKvaQOsdsxLHLmHQA68zb2vVdtPGMgQq1iGvbppqLg6HXWmvudvtg49nQDEYpUdQVZbMzXzG3dVSbW9qAL2rw7xPYM4giWRGvlikJzpbkFN++D4HUHyoHx+zpYSFljZCRcBhan+eImy7aYrX+rkH3x2pJ727dbE4iYhrxNKWQWtoAEU6i4uoGlAwOACAfbpSNESPXy\/KMR\/dFW3G3GLLsvCyr8MsqOvo0bMPvFD\/AzFBjjsJrmmgJS2mqhgRfx74+Rr24mzH95NkKRY5QD6pGq0Cmrt2Ns18RNHDGLs7Aeg6k9LAXPtV1uNsrCTyOMXIyAAZQvXxvbWw8h1px7q7L2XhBdJY9eZOYsfUkXt5DSgrdr8I8LNDH9nYxOBbOO\/wBp0BYZve4tzpf7q7AUDEuydo0MnZhxaynvAsFYEE6Ai\/KnpLvZhct1kcjoVjY397AUqN35R9vxMSXEZaeTKemYxFSdT+afHS9ANvuiJGLfabE6\/lEY3\/tLe59QK78JsiKCJ0kzzIeYayqP1kFiyt53F+oPKj44ABb5QCeoHOh3euDLA5HRWP0NB88FnjiGJnKyFc6KAEZgBe4zMBlHMc7U2AZM9rn4ve2bx8KTHDbGxjCNhy69pLi4AEzd4rmjLG3OwCmnGGIN6BVcbZUlSGSNjYSOpGVwL68mICk90iwpThSfamxxGxEYwXZGRXeHGSHsy3esWcgWve2Vh7VU7O30wMWHlgXBELNfODZiLgAhWJzKNB70HJNwxxSQxzyy4aKN1zZ5JgFW\/wAIuAbsRrpeqDb+x44AvZYlcRe4do0YIp0sA7DvX15eFFsXEWNI1ijilWNBZVDCwF78zmP106VTbzb3jFQ9kFcag3Zr8vKwFA0+GG6MRwGBxLLaVJHlVhYEhsygE8yoABt4iiXerdOPGSRyPq6RyRAEC35RTZhf85CL+\/lXTuHBl2bgQSdIF+tj\/v3q77G7ob2ytf1BVgfv+lBjdhbQ869ZsK6AFkZQeVwRerzas0UO0MV2kPaBcRJYZitrOeVvxq52nvrhp4TFJhXsQouJBcZeRByaHmPO5oBCTZcoNgjNcBgVBIIPI6D\/AHY1zTRMpKsCrDmCLEe1F0m9WGeJIXw8ypHYJ2eItpbXMMtiSe9fzPSuHDbLhxMpdH7GG2plkDuDb9FbMQfIUFHhEQtaRiq+IXNb2uKt9p7FEKAL+VaRh2bL+iRcXT4gzX5Hwro2psbDxSlu2BgABAXR3NtQqnUC4+I8getNLhdj8GcLLPJ9lilaQhQzDOFUC12Y5j11oEb9lf8AQb9k1KK7R\/z0X7Y\/1qUArhcZJHcxyOl+eViL\/I0bwbkY\/FRo8mJUqwDKHkkYi4vyCm2hoCUX0HOtD4AZIlW\/woF+QAoFHvRw\/wAZgou2n7MpcC6vc68tCAa+eHm60e0MQ0Mk4ishKgfE58FB0sBcn\/dnDxcwpfZs+eyhCjL6g2PzBsKUnCXDs+1cPkNshZz6BTce\/KgId5+FUWDwks743vLbIGSwY\/o6EkselqV1aD464Zm2cGBGWOZGbzBDKPqwrPlAxOF+ynieLaHaiMZ3jS6lhcKAxcAg5e90169Ksd\/tnyzYPKssckeCu10iZARI4By3du6pPXpXbuniEGz8FDG4JtiJZVBBykuipmHQ2va\/nVm0gy4qF2VI5sFMt2Nu+pUqBc2uQzfKgRVev2l\/02+Zryq43f2MZmDNpGDqT1\/8eJoKoSEC1zbwvV9uLjZkxkSQAM8p7MKx071hfyt42NMSDcnBWjkkSzaGyOQp1uNCL38qHuGWyyNvxxkC0UkrN4AKrWPzK0B3t\/Y22BJaEYd0Cg3yMNfK3PXwF\/KhLibhcfg4UE7wyRzgjMiFSrCxK\/F4dfXlTu3XxjzYWOWSxZwxuBa4zNlP7NqXPF4vPs7FdoBmwuNCppYiNkQr\/j50CV2BtU4XER4hVVjGbgNyOhH43p67h7Wxm0oWmUYeJVcpY5ySQFPTS2vjWeq0TwHwjJs0swsJJndfMAKt\/mrfKgXfGDdR8NMMVJKjtiWPcRSAuUDqSb9KXVaC497FabBx4hBfsH7w\/Vewv7MF+dJbZG7c07AZSinmzA\/Qcyf93FBTVKZ0m4kDIqKWU\/zgsWJPUi4DL+qLH16i2+O7a4MQgMWL5rki3K1tLm170DF4c76Y2SBVbsBDCFiUmNr6DmSGAAAK6m1EO8e+GMhgeSEYdnjGY9x7EdbDN0HtS54TbTmLth+cKqZDYC4OnWxuDr3etXvEXaUsOGDR2IkJjcsoYqCL2BKi1jfxFzagVG1toPiJpJ5LZ5GLNlFhc+A8KudgboS4lM65u9cIqozk2NiWt8KDx6nkDQ3T5\/c+gnCTlmJAlCqp5ABcxt6ljQKHePdyTCFS2Yq1x3kKMCLXDKdQdQR0INUlNz90MGE+F7xymNtOlw1r+tiKU0UTMQqqWJ5AC5PtQfFWOC2JPLDLOiExRfG3h6eNhqat4Nn43AWl+zqe0AUFkWTKTyFtcrnwI1pjYvZjYjZ+Hw2Ik7KQkviFjjXMx\/MU2sq2Fieug0uKBI1KvPsGH\/6v7S\/9tSgut39yZhNG8wyqpDZRqTbUDwpqRDTX1oX4Z7tYmSBZ5sZPHExOSJG+IDS5LXABPKw6Uaf+iaMTmxOMItoBOFt48kHtQCvE7Fu+BmZzckp6DvjkKEuCB\/hRf6qT7q9+KexcThAgOKmmw0hsBIdVYagN0OmoPkfCvvhlsErkxnayI1yFVDluORu3Ox15UDI40H+CZv6Uf+NazdWgt8sEcZD2JmxAQm5uQQSNQCOoFud70hcfhDFK8R1KMV062NtPWgN+F0ek7eORflmP+lWfEWAthLj8x1Y+huv4iuXdzY0uDPfkbndoRmVb26sNflapvHHNiA4ilZFb\/knUGwGgY943IvregC9jYuBMwniZ83JlIuvoCLUW7O3qwMAFknlA5KQi2687kW8rUv2FtK\/KBs4PiVg3YvPhmUg92xzaaWJ1UA+QFeHDzaCTbZxc8dwjQYh1vzAsLX1NqVzKRoa69lTyrIBA7I8n5Puki4bS2nQ0GidicSdkwYaGIYqwjiRLdnJpZQP0KHN9tt4bGYDakuEfOh+yFjlZe+GKnRgD8Kpr6VeYPhFs1YkSSJ2kAGZ+1YEmwvoDltfypZ8Vd3f3tlEeGZ0wuJQMULkgsh1B8QLqRe\/M0HrunwjxOKRJpZEihcA6d9yPQd0EjxPtTsxmPwuzMIpkYRQxKERebNYaBR+cx\/8AJtWbt0RiWciHESwqmrFGYc+gAIFzRltDZUWIjviJJpZQuVXd3Yg6ai7ZR\/RtbSgY29O3u32FNjIgyZ4gyg2JH5RQL9L9aR8O+0w1IXN1YIv4ivPeBsVh4lw\/2mV8MwsEzELob2K3tzsaLuG3DzD4rC\/asTnYOzKiq2UALoSTa5N7\/LrQC7b8SkWOY+jZPoqiqfa22mnFiD4ksxZj4anp5CnQOFmzrEZJrnqZdR6WQD53pOb37F+x4uXDgkqh7pPMqQCL\/OgPOCuEBjxbmwByoDy6MSL9OfOiLiVhw2CnDNdh3hYjo3Ly9Bz+dCXBHDPPiZIO3lijEbORGwBLXVeZU9PuFF\/FzZXY7NMseLnkBdUbO6sGBJBGiA\/Evj0oENT7\/c8fySYf9f8AyLSEpocFsLJOMVCJ5olUI6mNgLMTa5BU30UfKguP3RVv+C1\/nvvShThvjsPGQWVBiFLBWLFWII6E3U9Ra166ONMDxYiCJp5ZQIs15WBOYk3OgHOw+VLqgfW1d4kgw8jCMIBqzXBZjfugG3O5sD06WoT3E2rJP9okkNzdbAclFm0A6CgPZuyzMpPbwRhTa0smU+y2JI9BVoNgr2MzYfFiaSIB5EjV1GTkxDNbNYkdOV6Co+0GpXBUoHRwa3hmmjlgmcFIFTsyQAVBuCCeo0HOjDESSYh+zjJSEfHJ1byHl5fPwpY8EI8+IxCEmxiBNutmH+tO1YbCwFgOQFAjeL+1JFnGCVrQIqOF5ksRe7MdTz9PKijdQMuBwSdHDsfZSR9XWgvjKP4Tf+rj+6jPdbGRmDBpmXMsF8uYXsXjB0v+pyoLWYlCh1NpEGh6GQK30JpWbw4LLtjJbRpo\/qVv9b00drYgRxdoxAyZzcnwIYfOl7t2ZTtyM5gV7WPUG45i2o86BpbxYJSwOXUpGfp8ugoew2DUSDxIP3URPixM8wzX7KXsrX+EKqfiSfeqDamOGGaJmOhlRDbqGuG9rXNAp02DPPiJYoIXkZXYHKLganmeQ96ae4PCwRK2IxsQmkUEphlKsDp+dmshfmAM2Xzpb7y4uXDY7ECKV4znucjEakA9Drzrnn3vxzjK+LnI8O0YfcRQPnbHDLBz4lcbMrpcAyQkgIxC2FyD3baXymxt5mkJvfAsWPxCRWVUlYJktYAHS1q45trSuLO7OPB2ZvvJriZrm9BqThmsn72YVpXLu6lyzEkkMxK3J\/Vyj2pE8VjKNp4mOR2Kq5KKWJCqwDAAHkNa0duthQmDwyLyWGMD9kUhOOkAXarEfnRRsfW2X\/KKCq3L2zFEDC8bZpCQrKR8RACZh+iDRhItr+tLTdxQcVDc2GcHXy1poSJz9B91AEb3bYRgcOEOZG1YkcxzsPAinluBhey2dgowpGaMswsOZ72vu1Z23nW2Kl\/pfgKfPDrewY9DljMYw8aR2LA3J6jQaWQfOgMIbBgfMUh+OeDybQV\/04l+a3X7gKezVnnihvUMbiLdlkMN4yc175Swvy0vQWHAacrtVR0aNwfkD+FEfFjHZtjYUKbq+JkuR1s0un1+lCPBXFCPa0OY2zq6D1Km33V275YoDYmBizAscTiHsPAMw\/zUC4pw\/uel1xp6WhH\/ANz\/AEpPU7OAQVMNipGZVvKi6kD4VJ\/zUFT+6DhticM36UJHyc\/6ilTTe\/dASq\/2JlZWFpRoQeqUudh7JSVkaSaJEzWYNKqNbqRm0oKej3h7iEwLPPilNpUyRxj43DHU5TyQj842B6Xrn2lsvBYaYzieCaMAGOCNy5L9Axt\/Fg94knUaAVRYWZp5HeWVQzOrMXa19Ty06eA5C1B6Z4P5o\/MVK5s6\/pj51KDhw+JdDdHZCdLqSPup+DdyPDbKOKeSbtRhVZiXbm3ePdzWzHMEzdBWfq1Vv8g\/enFBz\/7vqQOoAt9bUGWZ5mclmJJPUkk\/M0XcNkh7SUzQpKoC2zJmsST08xeg2jHh8bDEf2P89AxtuYHCvhcYkeGiVhCzi0eo0zLZiL6UiQafkik4fFZSbtARz\/6dIKgud1sI2IxcSZjq+ZiTzy94+pIFXvEvZPYvE62CkFQFGUAgk3AHiGHuK+eFWCz4sv8AzcZPue79xNX3FvD3gif9GQr+0t\/8tAs4kaR1W92dgLk9Sbamnxu\/uLhsELGMTSEWZpAD+yvIC\/v50ld1oc+Mwy+M0f8AiFaexwufb79aBUcRtwohBLjcOpjK2Z4x8BBIDEfokXvblpyFKStQ7zxB8Bio\/wA7sZbD1VrH5ikhuVg9myLfFTPFMpNsyhoz4d3Kb28Dz9KAah2viEAVZ5VUcgJGAHsDXNNMzks7FmPMsST8zTW2tBsh4yrzxs+mV4cMYz55gO4fYLQhNsfZ+uXFTeRMa29+9QVG7mz1nmCNfKAWIHW3T600NlxI0S4cwKc7FQSTmt63uCD1vQRw9hHbyMdQqH5f7FHmxrh4+neQel6Bcb+7DXB4xoVJK5VYXN+Y11663q44V4T8rJOWsqLlA11Y8ibEaAX+Yro40Rk4uKXo8VvdWa\/+IV2cM8NfDOSbd52J9OzA+8\/OgI8RjIikiE37Tu3sb5TdcwOtiOfr6UlcdhmikeN\/iUkGnA+DDS2JHgNPU28gTp70sd7\/AOWSnxIPzUUH5svDhVSU3JvpY2tY+I61ZbalGKYExrGQth2ei9TfLyuep6nXTlUwbj7Gi9e1v7BTr82t7eddmzEHaspF+49vYZvnpQBNekc7KLBmAPMAkV1YLZc07ssMTyEXJyrewvzPgKL9zeHzTToMWezTn2YILva2ndvkB8TrobCgov8A0P2g6o4wk7rIoZWClhlPIki9vHW3jVTtPZ8mHlaGVcsiWDLcGxsDbTS+tavkdUUqLCy2CqPLkB5cqztxThEe1sQbAhmR7X8VUkHw60DM2XuzEsEURjjORFzXUfGVBJ5db0AcWNkrFLDKgW0isGK8syNlPuOR9KaO6GL7fDfaCgUzt2hUG4WwEYAJ8kHzpY8WMaBKML2dsrtMHzc+1sWGW2nfBPPrQL+pUqUErQu9O9+Gn2G9plaSSBVKgNfPZcwOmmt+elZ8jjLGygk+AF6vDh5ftKIFbKMsdrG2U2BHhY3JoKGjPcKaKNJGldUzMFu17aAnna3XxoQxEJRirAgjoRamXsHDBsArQlbqmYg9SC3aA6WvyPoRQE2G21hcrJ9phJdGWytmOqleSgm9IthY2pkYPC5CJIo0AcFWK6WZs1hzvb1oH3hljbESGJQqXsLcjbQn3Nzp40BHwo2jHFjCJWCrJGVuf0gQR9x+dX\/GDa0LRRQRSo7doXcK17WUBb9BzNLyAFcO7rpmcRk+ViSPf8KjPnw+upjcAH9VgdPQFT86D93cxSxYqCRjZUkViedgCL1oPBb34SQO\/aOFaR8jNFIFYaWKtly2AHjWa6fu4k38H4YakZeYJ6MeY8AaD43k34wqNImeQZsLIFJicK7NbLbMATpfW1qQtMTjI5MuH5DuNoPUUH7sbMGJxcGHJIEkiqSOdidfpeg5sPs2aRHkSGR40+N1Riq9e8wFhprrXJWqdl7u4fDQNhooVET3DqbnPcWOYnU3GlJXi7upDgZoTh1KpMrEqSSAQRyJ11vyoKbczHxRdr2jhS+RRe\/LN3joOgvR\/FjcPlDDFYcWyHWUDUEk9L0OcGt14cbiJWnTOkKAhD8JYm2vjYA6U8pdmQdn2fYRFMuXJkW2Xla1uVAiOJ+3IMUIDDKHZGkDAA8iRY3IFx3frXvw73ihSI4aVuzPeIdmUKQShtc\/naelhXNxf3ciweLQQJkSSPNlF7BrkG1+nLSqrdLZiOkkrqGydG5DunW3XW1Aw8ZtaCMNIZkIAzKBIl3trZddSdPmKU23toCeZpFBANgL89BbXpemDi2EqiOQK6rmCqQNNARbrzbT0oA2xs4x4l4UBPeyoOZN9BQdeFnURRXZb3e4J5fBa\/hfX5GupcYglU510LdR+iwpmYfhZs8RxtL24YopYCQc7C\/5h63rmk3D2QOuK9mv\/koFTsnbuIwsjPh5WjJOtuTWOlwdCPWiuHittBU0WC3LP2AH3WF\/auTiPu5h8J9nbDdplkD3EhubqV15afF9K8tg7dSHDorYNZbM15DobEjTzt58r0HovEvaYJczXDWsGjQqLfojLYe1DW2trS4qZp5iDI1rkADkABoNOQq13n2tFOoy4donzA5izG4sbixJA1tXDuxhRJiUU8hqfb\/zQOrh3i4zgIEV1LIlnUHVSSSL+FLHitMr49ijBgEVTboRe49RRHDhJQzhJXjdWyMFLA27xY6EaAAm3ka4NvbNvDOCwcIbBxexa2bQnrob0C6qVKlAabjbPIR5iCM3cS4Oo\/OIPXXTTwNGam757dQbelqGNwtoGRewWCeaQdIwtgoFhcsRb30o1xGysULlMHIwHIdpHc+mtADcRsLdI5eoYqf7VyPYWPzr34ZGQRTBe8HYKF8DaxNvDvKCfIVw757fDxthnglilVwSHsLWvzHPka\/d1t6cPh4UjdZLoS5t+ccwNhY+AFr6aa0BfjEOQ3XKrNlJtYd4GxSw1tlIuOhpOSLYkeBtTGl32w5jQXlzCQNquoAR1I521LUvsdKHkdlvZmJF+dib0GhOHuwcMuBiXsI2kMSSOXS92kBZSSQdALjTlVrtfdOCfDPG2GgzlGt2a5e8AcuU2B69aodn8WdmpFEl5Vyoq2EfKwA8a6Dxc2aQe\/JqCLGM60Gd5YypKsLEEgjwI51oDcyDLgMKPGMH9rX8aQEzAsxHIk2p27B30wYw8K5nUIqR6ra5CgWHjyoBrjLAb4d+nfX7jVHwkW+18J\/Sc\/JHIq14l7y4fExJFGX7SOS5DIVtpY8+t7UO8PdrR4TaEGImJEaFsxAuRdGUaddSKDUEp7x9T99Kv90Eg+z4Nv1mH0H+lc3\/AK60Fx9kZv1u0GvnbJpeh3iNvvDtHCYcKCkqSOWQ6hVN8vesASefvQCu6e0J4sTD2EjqWkQFVYgNdgLG3MG9ta1Q41rJmw8WIcTBK18scqObc7KwJt56U\/pOKmCsrZZhm1UFVBPpduXnQIbePFyyYiXtXZiJHAzMTbvHQXOg8hRZuWMmEkYC5JBPs3Ln4IfnQZtibPPK+UrmkZrNzFySL+etXO7u2iOyw+QsSxUAEa5gwUa6fE\/U0BUJWTvLe63I59FQ+PlXFDhFO2Sx1SJTMdPiCJm+tde0opoo5pGw0qiIEMzBVFyqqLE\/EL9VvQTPvBJ264iP8m6qFuDe9hY30sQR0oNH4Zu0w8B0uYkLdBcqDppYDXlVb9nU6Z00NiLhvTQCgLcjb218RGxwvYZIyFOYFQdNBYGxsLemlWu294duYeA4iWPChFsWCqSRc21F\/GgH+M0OQYRb3sJeluqdK+91WmiwKfwbJMlixkGW7AtcWXVmGnOgbeLeCfHSiSdgzAZVCiwAvewA8SfWmxu3BiGwaINn4pWVFVSHVSbEElc7KVBsb6detAF77YmKWJmGDmgYSd1miKhgSbjwvqDrQMptqOdNbiJicQIHWTBYhAw77mXMi6gi+W4Nj42pUUDR3U2r2cCh17RWUNYn88E2JPUePXwoY37xju6l2uWLMwGgJ0F7eNgBXZu\/jVeJUW5ZFGboBz8a8d9MA5AlC2RedyL62A09aAPqVKlA8uAWEX7HiZbd4yhSfJVBH1Y0xwutAPB58my0tzlxRB9ANfotMBNSPOgSfH7BhMbC4Grwi\/8AZZh91Ce7G5GMxwLQRfkxf8o5ypcdAx5nyF6M+NcokTZszXOaEhuhuMt+njeq7ZPFaXDwxwx4eLIihRcG5t1NiBc9TbWgE5t1sWs0kAw8jvG5RuzQsL8uYFrHxrx2zu\/iMLl+0RGPPfKCRfTnoCSPejjGcY8VJG8ZjRA6lcyEhlv1UnkfOgcPhnfvmZAbln7rm\/oSvub0FfFEWIVQST0FXEW7MjD+Nw4ta950FvXXn6Xq1xcmzeyRI8RiFIFnywqO0PifymnzIrkw\/wC9YIzfbCPSMD6G9B+7K3Zb7T2ThXAh7bum4ZWAy5T6sPlV9h9hRhcssJ7NWzKC5vfqLi9wbCrnc3a+HmxMiQo2VMKiKz2zWRrm9r3HwjpRJitkO2i2C9bigXGM2Es6zOqAObvn1tobnrpppQRLGVJVhYjQinrt\/BdhgcQ4tcRmxpe7t7twY5XmlxkUL3AERcKbAAAkt426XoKrcTd843GRw2OS+aQ+CDn7nQDzIpnbzcLMDDhJ50MwaON3HfBBKgkXuvKrncrA4XZwa02ERWAuxnVnYjxOgt4AACrvau0oJMNI32iFo3jYDvoAwII8b0CA3K3fbFO9gLItwXByXv8AnW52GuXr6Xrs2huHje0uSkmY2zZwPfWxtRZwugCoot\/yWkk8D2kgRL+YWJiP6dHUmzFJ0Ptf\/dqBMbx7qyYbCrJM6M+YBcpJsLHusbch09xVVuYgOPwoYXHbJp7i31pj8V8PbCejr9b0v+H632jhR\/1RQOjfxAdm4rML\/k7+9xY+xrO1aQ35j\/g7F\/1TfgazfQO\/gzHl2fI3jOx+SoPwq\/3+jvgMYOdo2Pysap+D8mTZhc8lkkY+gCk\/dX5s\/FmfYLuTc\/ZpFYnqVJvegVG4kAfaOEVuXbIT7G\/4Vp2PEiTMVv3XZDfxXQ+1Zr4ZD+FMJ\/Wfgaf+6MheGYnX\/i8V8hKwH0FB47xToY8Rh2Fy2Flk8so7uvncisv1pjbhtjUU\/wDNwWJT9lkf8azQBQFW4eHZnci9tAdbeJ50Tb1YMvhXVedsw1vfLqfpeqvc2HLGE5MxLN6dL+1FzdmY5QDmdCUI\/ROXNqep1Gg5G9\/CgSlSpUoDDd3f+bCYeKCONT2UzS3YmzAoy5SBbS7Zr35gVfjjTidP+Gw\/9\/8A764d2NxYMThklMsgdgbhcthqdNRfWvaHh3H27Rs0uUAMrDLchtAOVib3HtQDO8+9UmNiw0brYwK4zXvmLtmva2ltBbXlVJgsMZJEjX4nYKL+JNh99M3enhphsJg5JzNL2oXMqErrqOgW+nU0BbpYZpMbhkXmZk+jAn6Cg9dsbqYrCxmXERGNe07MZubNYnTxXTnyqkp78dIHbBBh8KTgkeRVgD8z9aRIoCLYu63bAdpOkOZbqWUkX6BrfCD469K6NobmZBaPExyvY3CqwXyAY8z7CujZm0u1S6rlK2Da3BOvLwFq7MTtDsUMjAsAeQNud7eOl6AY3V262CxKzqgcqGUoSQCGBBB+fKnDuvvbJj4nfs8PhgrZQz9o+Y2JNguW1vHN7Ujk\/KSi+md9bdLnpT0yqiqqgBABZRoBbyFABb8b5Yo9tgpEiUXALoG7y6EEZjyIt060H7C2U+KxEeHjtnkbKCeQ6knyAufamNxHhD4PtLao628QDpb0P4ULcKs3764XKL95r+mRgT7CgKl4JzdcXH7Rk\/iKqd7eFsuCwz4nt1kVLZhlKnUgXGpB1IrQaLQ\/xHjvsvGX\/mifkVNAjdxt68RhyIIYO3d27gBbN6C35vM2tbUmmz2e1zhu37DCiXn9nIbtDY2+LPlzW1tS+4DKBj5ZG+GPDOT5ar+F6fulr+V6DN2+m+GLmV8LicOkJDDMuVgwtqOZ5db0N7u7SOGxMM6oHaNwQpNr+V6POPcanGYeZPhlwykHxsz2PyK\/KqPdDc3GSvFiVw7NDq6sCtmKglRa99WAX3oCHebiPLLhp4fs8dmBhdgzdxj4X5jQ66cqVtHGxdzce64mN8LKC8ecFha7q2gvyue9\/wDw0Mbb2JPhHEeIiMblcwBtqDcX0J8DQHPDzeGWTDPsyGBSzrKe1aUqFDCxNshvbwvr5VbY6PE7K2VJh5I4ZUbMpkWYgr2mnwFNQD4GrThxgRDgImFg0l3Ygam97XPkNKJnAkBR9Q4KkHqD40Ged2NsfZMVDicmfsmzZb2voRzsbc\/CiCPfnaGGF45MkUzPKqlFIGZiWsSLnWhLHYfs5HjPNGZfkSKPdmpCMJCkkRmuhkKKQXJsQCBcWyqD118KDkwnELEmaPFYm04iDxhBaPSRbE3APgOnShXZmOSMktFn1BHfKkeWnSizfSUnCIASihhaEhQUABABA66E+pNzQJQNvd9RJhxJCqwO4Yi+aSwX87QLc89Cbaa0NwbxjBLJhZIO2bOzdr2rJmzDqoB++rbcjaGWLDHWxbs2A6gvYj3DUB7wyZsQ59PuFBx9oP0R8z\/rUryqUDD2Fvng8PFGgTEMyLYsAgDak8sx01qzXixGvw4d2Zb5GYqCAfEa3I11vSpqUB1tzfxZ4pU7Jy8osXZwfw5DoBVHuJPk2jhG\/wCsg+Zt+NUNeuExDRukiGzIwZT4EG4+ooH\/AMa2y7NcfpSxj6k\/hWe6J96N\/MXj41inZMgYNZVtcgEAn5mhigJd3NIz5sa79tLeGQeV\/lrVpwt3Lnxo7RmEeFViCbDM5Frqvh5seXnV7xQ3FkgiM+E70Cp+VRjd18WB6rbn4UCi2f8Axsf9NfvFPZxpbzP30g43III5g3FO\/hlsxto4eTEYmWW5kKoI2ygAAFtLeJoKffsf8BL\/AE4\/vr94A4IGTFTEC6qiKT0zElrethVfxegOElGGjkZopUV2Dm7BlZhz8D4eRoS3a3txWBzDDuFDkFgVBvblzFBqpV00sT6\/jVDxAH8GYy+n5F+t\/wAKRON4o7SktbEdnb+bULf10NVO0t8sdiI2imxUro3xKToeutqAl4Qg32hbmcHIB6nQVoYw\/mf2fwrLm5mCnk7YRTGJCmWUj85T+bR2cMex\/luO7TLl\/lTZL\/pW+K\/6t7UFJxcv2ezQxu64XI39lsv4Gmhwks2ycP6OPk7UkN8sHPH2PazGaMKViJ5qL3I+t79dat+H+\/WKhbD4JXUQtIF+AFhnboTpbMb6+dBoWGDKdLfL76Q3Hp77RQeECfe5pn7e2hPBDNOMSbIjNYxp0HLlrc2HvWe949vTY2YzzkFyAugsLDlpQPDdawwmHi6iFG9uX31cxsFZS2guB7nQfWlpuhisSsUWIkmsnZdmqBR3o0c6szX1vfkOVq79r7YfEKEixGWzK\/JHuVYMtwACBcD\/AHpQLbfCHJjsSv8A1XPzN\/xokaaXDwYZVKCV0R2OS4WM\/Bn1Jznve3heg3akzvNI8pvIXYsfO+vtTW4b7DmxMP2qaT8nlCJHGiB37M2FyRbx06+XUB3ejDSNBOXJZUZChYEG4OVrZgGy2Ycsw5UA0y+LOycRhm7QSh8PL3BpZltdgreN9Tfrl8qWlAx928JbZ+GlHM4xE\/vpQpvtgxDjp4l5K1h8hRfuUZp9nrBEyKY8UsmZxcaFWPy0Pna3WhfiHLm2hOT8RIzW5E5Re3gPKgHKlSpQWWz9jSSZifyaqAWZweRNhYAEsT0AFEO727kEsiwyR4tjIwXtVjyKmvPvX09R8qGI9qzqLLNIAOgdv9a85MdK3xSOfVifxoLra2y4UiYpBjUcHnKq5LX6kICNPrVPhcJmGZmCJ+kevoBqTX2+1p2ADTSMAQbM5IuNRoTaugbxYjQZl05fko9PTuUHrh9nQSg9nMyFFzOZUNiARcjJmI58re5rh2lh4kIEU3a6XZshUA+AvqfWwruj3sxikFcQ65TcAWA91Ayn0Irz2zvJicUFXESlwpuBZRY8ugFBoXhWqx7LwaWs8iyOBbnZiST7FfmKItroskUsB1aWGQKPGwAP+Jar9zolXC4RLd6PCRX8swF\/qlXUiqHiZhqGIU\/0lN\/YgfdQY5dSCQeY0NOzc\/HfZdgRurWebEZFt+vKqn3yI1J\/baZcRMvhK4+TGmJudN2+xJorXbC4qGVbc7M6gn0AzUHLx6kvtMeUKj+85oE2bsqadssMbOethy9TyFGXHCS+1pR+ikY\/ug\/jQ9u\/vZicGCIGUAm5ugPj\/qaDm25sCfCFBOuUyLmXW\/Ugg+YI5enjRgNg4NcDHNiMO0DzACL8uWdySAXCFQFXW9jzHhVDtvfvGYu3btG+X4bwobel1r42jvjNOpEsWHZioXtOxUOLCwsw5H0oCThsxihxJPiVPrlsP7zCieVpOXe+X\/ihLcqf\/g2uf4zFxqxJtpdGYnpyWjaRkP5y\/t\/\/ALUAbxGxBkwsD2sA2Xl1AZT9RQVu8hOKw4HMzRgeuYUcb7Sq2AIX\/l4p1Njpqc4+j0P8M8N2m08MLXAcsdP0VLfeBQN\/iPf978Vl\/Rv7Zhes8Vp3efAmTCYlLE3hltp1Ckj6gVmKgceBwGbZcRP\/AC8oU2vYuqNyOh1vVbgdnFp0F8zd4L3VU8r2uLaeVWGyscDgYoiwF8kouQOSon4GvOCdEmjYOtw3dsw5kFR7XNAsNuKBiJQOWc+9aA4b3GCw8WUWECSX65neXT5ID71n7bJHbyW6G3y0rQHCraXb4FCseTswIRrfNkGrctNWbSgruM2FzbPkJH8TNGVPqCpv8z9KQdP\/AI17SMWBMeS4ndVJJ+ErZr2tqTY+lICgbvDvAZMGnMGVi59Cci\/4Sfel5vfhimKcm\/5Szi\/63P63+VPPd3ZVliiXkiQgEDQ2AuRbpmJNKvipgezlhNjqrqT45XP01oAapUqUEqVKlBKlSpQSpUqUDS4P\/wAu\/wDpCr7jD8MP9b+BqVKBJS\/EfU0U7m\/yfG\/1cf8AiqVKCv32\/ls39n\/CtUdSpQSpUqUF1B\/IJP65f8NU1flSgJI\/\/ZTf\/M\/5Vqq2J\/Gj0NSpQN3eP+TH+kf8JpJ1KlBebf8A4jB\/1R++uLYX8ph\/rF+8V+VKDy2l\/HSf02+80wuEvwS\/0h91ftSg4uK\/8Ynp\/rQBUqUDU3e\/+H\/0U+8VQcWf5c\/v99SpQBVSpUoP\/9k='>","3d385fa7":"Here, we can see that our model is bit confuse between (T-shirt and Shirt) and (Shirt and Pullover)","97c28753":"# Introduction\nFashion-MNIST is a dataset of  images consisting of a training set of 60,000 examples and a test set of 10,000 examples. Each example is a 28x28 pixel grayscale image, associated with a label from 10 classes. It is split in 10,000 as test and 50,000 as train datasets.\nIt consists images of T-shirt,Trouser, Pullover, Dress, Coat, Sandal, Shirt, Sneaker, Bag, Ankle boot","39bcacb3":"### Callback\nHere, we will use Callback so that training of our model stops when we reach certain validation accuracy\n","b31604a4":"### Fitting model","0784a835":"Let's visualize image in our dataset","09c6641c":"## Label Encoding\nIn this technique, each label is assigned a unique integer based on alphabetical ordering.\nFor example Ankle Boot becomes [0,0,0,0,0,0,0,0,0,1]","b5a56645":"# Normalization and Reshaping\n\n\nHere, pixel value for our training and testing images are in range between 0 to 255. In order to reduce data inconsistency we have to normalize the data\n\nThe dimension of tensor convolution layer except doesn't match with the dimension we have , so we have to reshape our data\n\nHere, train images have maximum value of 255. and minimum value of 0. So, for normalizing we simply can divide data by 255\n\n\nx = (x - x.min()) \/ (x.max() - x.min())\n","43c474c9":"### Compile model"}}