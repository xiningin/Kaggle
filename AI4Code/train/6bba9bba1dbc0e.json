{"cell_type":{"86b9c459":"code","5586ec68":"code","bfde905b":"code","f95bb1bb":"code","87a723aa":"code","4fbdcbce":"code","78eaeaff":"code","b72f2fb0":"code","3ce66a29":"code","d5beedab":"code","432a91b3":"code","f6282306":"code","6bc34fdd":"code","32bf3db6":"code","3ca16414":"code","56699619":"code","c5ec40f1":"code","6b9e763a":"code","eea38622":"code","fd0d9f1c":"code","58348b87":"code","84905f0d":"code","62c2d9b0":"code","971a0668":"code","4bacfa59":"code","77859633":"code","ad59c793":"code","83a6f1bf":"code","5ad3fb1e":"code","e0fc68bd":"code","63594a85":"code","02c54c32":"code","67285a50":"code","08c1a5de":"code","3bc60a39":"code","d8ffc1e9":"code","295bd548":"code","d1c22516":"code","665ecfa0":"code","fd6ce030":"code","eb239868":"code","2f1dbbca":"code","40ab4eaf":"code","5a367148":"code","7832507b":"code","c8396c10":"code","845dccd9":"code","695e01b4":"code","4028ee87":"code","67004a50":"code","64ce2d1c":"code","0f2e953c":"code","962799f1":"code","baaf0a37":"code","0e80cc5c":"code","e2ca066d":"code","6f74b4a8":"code","7399651a":"code","117839d3":"code","567d6669":"code","39726636":"code","75161140":"code","606bef2f":"code","2e39fea9":"code","33a925c8":"code","43f0d79d":"code","556432ca":"code","3f21e4e1":"code","d622eb76":"code","c2b4eb70":"code","7d5a9141":"code","34a16283":"code","4a659f94":"code","07220e28":"code","862562af":"code","d636b411":"code","dad3a8f2":"code","4daad751":"code","daad7288":"code","f051df65":"code","66f9f781":"code","d87af932":"code","b83a5cef":"code","ff0a0a73":"code","6d6202c0":"code","8b533a67":"code","57379559":"code","e0ac0543":"code","e051e5f6":"code","e48a61fa":"code","f0c6761d":"code","b2085193":"code","ba49c944":"code","0fc09207":"code","337b39f9":"code","8d3f4ad8":"code","3bd65e0c":"code","87a19349":"code","0a03a714":"code","4bb09555":"code","6169d7c7":"code","e8b700ac":"code","be0ec862":"code","a434b447":"code","00f62992":"code","c8dec65d":"code","cba16687":"code","451a9b03":"code","abadae4b":"code","69a3696b":"code","31e7c074":"code","c05fdb97":"code","011bf05e":"code","706ae37f":"code","d58633d4":"code","3f497575":"code","4256434d":"code","d051eb12":"code","2d654e75":"code","ea5dfcbe":"code","c1723ee1":"code","2a4e89b4":"code","3ae3a3d9":"code","35770990":"code","6ed5c9bb":"code","dfe74a97":"code","16acf3ad":"code","5e0fa115":"code","ef385068":"code","865a6b0d":"code","bc585ad6":"code","c38e8ba1":"code","a7af4d1b":"code","400569cb":"code","8419d8e2":"code","49d9e9fc":"code","b5bb784f":"code","a75bbcbe":"code","14da2c23":"code","86c5a79c":"code","821df8a7":"code","f3ed479f":"code","6a5b5130":"code","6e0f48c1":"code","e2e0712d":"code","f4e3aa65":"code","6e00ee11":"code","9b3b7806":"code","3850888f":"code","c42ef39f":"code","a727cacc":"code","60a198e7":"code","28fae08c":"code","16cea2bd":"code","e9768c4c":"code","06306eb0":"code","ed8ad633":"code","2eed29ac":"code","f93d898c":"code","2622da22":"code","51706f78":"code","e70856cc":"code","8a5f355a":"code","9b249c79":"code","d76b5434":"code","d97157a5":"code","dfca6ebf":"code","faadce24":"code","fa62efc9":"code","0d474f50":"code","33163169":"code","34d63b86":"code","28a2a109":"code","0393422e":"code","fdec4066":"code","6d5959ef":"code","968610ed":"code","f59dc29e":"code","eb0c4c36":"code","85ff73e8":"code","51aa5fb3":"code","c365a281":"code","5d174c8c":"markdown","34400e96":"markdown","d947178f":"markdown","8f7b70ac":"markdown","6c6878af":"markdown","5366391a":"markdown","6899011a":"markdown","3579d81e":"markdown","abfba2aa":"markdown","8fc65171":"markdown","d076ff39":"markdown","afbdb92b":"markdown","bc2d6396":"markdown","24ed3bed":"markdown","bc890a02":"markdown","fe661646":"markdown","c763b19a":"markdown","cf80e9fb":"markdown","f373c381":"markdown","fd842891":"markdown","f3805860":"markdown","860365d4":"markdown","70fa4373":"markdown","fbe7b606":"markdown","bb833732":"markdown","3d5718e6":"markdown","39b3a555":"markdown","1785e7e6":"markdown","d5d8954d":"markdown","52c317c3":"markdown","cbb4c032":"markdown","cb3258cd":"markdown","97d595b5":"markdown","0bd3616e":"markdown","39981275":"markdown","73e21051":"markdown","11ce2d36":"markdown","d9344893":"markdown","2aafb185":"markdown","7d8284c0":"markdown","ca31d146":"markdown","a16ae9b2":"markdown","8100b554":"markdown","c236741e":"markdown","ff5d3d59":"markdown","170b18de":"markdown","b4e84800":"markdown","39364eb5":"markdown","70dc62f8":"markdown","d513c916":"markdown","a063b7ab":"markdown","6554f7e8":"markdown","4886f992":"markdown"},"source":{"86b9c459":"#importing all the necessary libraries\n\n\nimport pandas as pd\nimport numpy as np\n\n# For Visualisation\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# To ignore warnings:\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#import pandas_profiling package for a quick overview of the dataset (Please install this package)\nimport pandas_profiling as pp\n\n# To Scale our data\nfrom sklearn.preprocessing import scale\n\n\n# To display all the rows and columns:\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","5586ec68":"#importing the data\n\nlead_df=pd.read_csv('..\/input\/leads-dataset\/Leads.csv')","bfde905b":"lead_df.head()","f95bb1bb":"lead_df.describe()","87a723aa":"lead_df.info()","4fbdcbce":"lead_df.shape\n","78eaeaff":"#A detailed report of the leads dataset:\n\n#pp.ProfileReport(lead_df)","b72f2fb0":"# dropping Asymmetrique Activity Index(45.6%)\n\nlead_df.drop(['Asymmetrique Activity Index'],axis=1,inplace=True)","3ce66a29":"# dropping Asymmetrique Activity Score(45.6%)\n\nlead_df.drop(['Asymmetrique Activity Score'],axis=1,inplace=True)","d5beedab":"# dropping Asymmetrique Profile Index(45.6%)\n\nlead_df.drop(['Asymmetrique Profile Index'],axis=1,inplace=True)","432a91b3":"# dropping Asymmetrique Profile Score(45.6%)\n\nlead_df.drop(['Asymmetrique Profile Score'],axis=1,inplace=True)","f6282306":"#checking % of missing values again after dropping :\n\nround(100*(lead_df.isnull().sum()\/len(lead_df.index)), 2)","6bc34fdd":"# 1.To see how to impute values in the 'Lead Quality' column:\n\nlead_df['Lead Quality'].describe()","32bf3db6":"sns.countplot(lead_df['Lead Quality'])","3ca16414":"lead_df['Lead Quality'] = lead_df['Lead Quality'].replace(np.nan, 'Not Sure')","56699619":"# 2.To see how to impute values in the 'Tags' column:\n\nlead_df['Tags'].describe()","c5ec40f1":"plt.figure(num=None, figsize=(40, 40))\nsns.countplot(lead_df['Tags'])","6b9e763a":"# Replacing missing values with 'Will revert after reading the email':\n\nlead_df['Tags'] = lead_df['Tags'].replace(np.nan, 'Will revert after reading the email')","eea38622":"# 3.To see how to impute values in the 'Lead Profile' column:\n\nlead_df['Lead Profile'].describe()","fd0d9f1c":"sns.countplot(lead_df['Lead Profile'])","58348b87":"#Replacing all Select values with Null values:\n\nlead_df['Lead Profile'] = lead_df['Lead Profile'].replace('Select',np.nan)","84905f0d":"#checking % of missing values in the column Lead Profile:\n\nround(100*(lead_df['Lead Profile'].isnull().sum()\/len(lead_df['Lead Profile'].index)), 2)","62c2d9b0":"#Dropping the Lead Profile column:\n\nlead_df.drop(['Lead Profile'],axis=1,inplace=True)","971a0668":"# 4.To see how to impute values in the 'What matters most to you in choosing a course' column:\n\nlead_df['What matters most to you in choosing a course'].describe()","4bacfa59":"sns.countplot(lead_df['What matters most to you in choosing a course'])","77859633":"lead_df['What matters most to you in choosing a course'] = lead_df['What matters most to you in choosing a course'].replace(np.nan,'Better Career Prospects')","ad59c793":"# 5.To see how to impute values in the 'What is your current occupation' column:\n\nlead_df['What is your current occupation'].describe()","83a6f1bf":"sns.countplot(lead_df['What is your current occupation'])","5ad3fb1e":"lead_df['What is your current occupation'] = lead_df['What is your current occupation'].replace(np.nan,'Unemployed')","e0fc68bd":"#checking % of missing values again:\n\nround(100*(lead_df.isnull().sum()\/len(lead_df.index)), 2)","63594a85":"# 6.To see how to impute values in the 'Country' column:\n\nlead_df['Country'].describe()","02c54c32":"plt.figure(num=None, figsize=(40, 40))\nsns.countplot(lead_df['Country'])","67285a50":"lead_df['Country'] = lead_df['Country'].replace(np.nan,'India')","08c1a5de":"# 7.To see how to impute values in the 'How did you hear about X Education' column:\n\nlead_df['How did you hear about X Education'].describe()","3bc60a39":"sns.countplot(lead_df['How did you hear about X Education'])","d8ffc1e9":"#Replacing Select with NaN:\n\nlead_df['How did you hear about X Education'] = lead_df['How did you hear about X Education'].replace('Select',np.nan)","295bd548":"#Finding the % of missing values now:\n\nround(100*(lead_df['How did you hear about X Education'].isnull().sum()\/len(lead_df['How did you hear about X Education'].index)), 2)","d1c22516":"# Dropping the How did you hear about X Education column.\n\nlead_df.drop(['How did you hear about X Education'],axis=1,inplace=True)","665ecfa0":"# 8.To see how to impute values in the 'Specialization' column:\n\nlead_df['Specialization'].describe()","fd6ce030":"# Replacing Select with NaN:\n\nlead_df['Specialization'] = lead_df['Specialization'].replace('Select',np.nan)","eb239868":"#Finding the % of missing values now:\n\nround(100*(lead_df['Specialization'].isnull().sum()\/len(lead_df['Specialization'].index)), 2)","2f1dbbca":"plt.figure(figsize=(40, 40))\nsns.countplot(lead_df['Specialization'])","40ab4eaf":"lead_df['Specialization'] = lead_df['Specialization'].replace(np.nan, 'Others')","5a367148":"# 9.To see how to impute values in the 'City' column:\n\nlead_df['Specialization'].describe()","7832507b":"plt.figure(figsize=(30, 30))\nsns.countplot(lead_df['City'])","c8396c10":"#Replacing Select with NaN:\n\nlead_df['City'] = lead_df['City'].replace('Select',np.nan)","845dccd9":"#Finding the % of missing values now:\n\nround(100*(lead_df['City'].isnull().sum()\/len(lead_df['City'].index)), 2)","695e01b4":"lead_df['City'] = lead_df['City'].replace(np.nan,'Mumbai')","4028ee87":"# 10.To see how to impute values in the 'Page Views Per Visit' column:\n\nlead_df['Page Views Per Visit'].describe()","67004a50":"#Replacing the missing values with the mean of the column\nlead_df['Page Views Per Visit'] = lead_df['Page Views Per Visit'].replace(np.nan,np.mean)","64ce2d1c":"# 11.To see how to impute values in the 'TotalVisits' column:\n\nlead_df['TotalVisits'].describe()","0f2e953c":"#Replacing the missing values with the mean of the column\nlead_df['TotalVisits'] = lead_df['TotalVisits'].replace(np.nan,np.mean)","962799f1":"# 12.To see how to impute values in the 'Last Activity' column:\n\nlead_df['Last Activity'].describe()","baaf0a37":"plt.figure(figsize=(30, 30))\nsns.countplot(lead_df['Last Activity'])","0e80cc5c":"#Replacing the missing values\nlead_df['Last Activity'] = lead_df['Last Activity'].replace(np.nan,'Email Marked Spam')","e2ca066d":"# 13.To see how to impute values in the 'Lead Source' column:\n\nlead_df['Lead Source'].describe()","6f74b4a8":"plt.figure(figsize=(30, 30))\nsns.countplot(lead_df['Lead Source'])","7399651a":"#Replacing the missing values\nlead_df['Lead Source'] = lead_df['Lead Source'].replace(np.nan,'Google')","117839d3":"#To check how many columns are present now:\n\nlen(lead_df.columns)","567d6669":"#checking % of missing values again:\n\nround(100*(lead_df.isnull().sum()\/len(lead_df.index)), 2)\n","39726636":"lead_df.columns.values","75161140":"lead_df","606bef2f":"# Checking the Converted Rate :\n\nconv_rate= (sum(lead_df['Converted'])\/len(lead_df['Converted'].index))*100\nconv_rate","2e39fea9":"#1.Column- 'Lead Origin'\n\nsns.countplot(x = \"Lead Origin\", hue = \"Converted\", data = lead_df)","33a925c8":"#2.Column- 'Do Not Email'\n\nsns.countplot(x = \"Do Not Email\", hue = \"Converted\", data = lead_df)","43f0d79d":"#3.Column- 'Do Not Call'\n\nsns.countplot(x = \"Do Not Call\", hue = \"Converted\", data = lead_df)","556432ca":"#4.Column- 'Total Time Spent on Website'. Plotting a boxplot because it is a numerical variable.\n\n#Checking outliers first:\n\nsns.boxplot(lead_df['Total Time Spent on Website'])","3f21e4e1":"#Plotting the boxplot:\n\nsns.boxplot(y = \"Total Time Spent on Website\", x = \"Converted\", data = lead_df)","d622eb76":"#5.Column- 'Country'\n\nplt.figure(figsize=(30, 30))\nsns.countplot(x = \"Country\", hue = \"Converted\", data = lead_df)\n","c2b4eb70":"#6.Column- 'Specialization'\n\nplt.figure(figsize=(60,20))\nsns.countplot(x = \"Specialization\", hue = \"Converted\", data = lead_df)","7d5a9141":"#7. Column- 'What is your current occupation'\n\nsns.countplot(x= 'What is your current occupation', hue='Converted',data=lead_df)","34a16283":"#8. Column-'What matters most to you in choosing a course'\n\nsns.countplot(x='What matters most to you in choosing a course',hue='Converted',data=lead_df)","4a659f94":"#9 column: 'Search'\n#10 column: 'Magazine'\n#11 column: 'Newspaper Article'\n#12 column: 'X Education Forums'\n#13 column: 'Newspaper'\n#14 column: 'Digital Advertising'\n\nplt.figure(figsize = (20,15))\n\nplt.subplot(3, 3, 1)\nplt1=sns.countplot(x='Search',hue='Converted',data=lead_df)\n\nplt.subplot(3,3,2)\nplt2=sns.countplot(x='Magazine',hue='Converted',data=lead_df)\n\nplt.subplot(3,3,3)\nplt3=sns.countplot(x='Newspaper Article',hue='Converted',data=lead_df)\n\nplt.subplot(3,3,4)\nplt4=sns.countplot(x='X Education Forums',hue='Converted',data=lead_df)\n\nplt.subplot(3,3,5)\nplt5=sns.countplot(x='Newspaper',hue='Converted',data=lead_df)\n\nplt.subplot(3,3,6)\nplt6=sns.countplot(x='Digital Advertisement',hue='Converted',data=lead_df)\n\nplt.show()","07220e28":"#15 column: 'Through Recommendations'\n\nsns.countplot(x='Through Recommendations', hue='Converted', data=lead_df)","862562af":"#16 column: 'Receive More Updates About Our Courses'\n\nsns.countplot(x='Receive More Updates About Our Courses',hue='Converted',data=lead_df)","d636b411":"\n\n#17 column: 'Tags'\n\n\nsns.countplot(x='Tags',hue='Converted',data=lead_df)","dad3a8f2":"#18 column: 'Lead Quality'\n\nsns.countplot(x='Lead Quality',hue='Converted',data=lead_df)","4daad751":"#19 column: 'Update me on Supply Chain Content'\n\nsns.countplot(x='Update me on Supply Chain Content',hue='Converted',data=lead_df)","daad7288":"#20 column:'Get updates on DM Content\n\nsns.countplot(x='Get updates on DM Content',hue='Converted',data=lead_df)","f051df65":"#21 column:'City'\n\nsns.countplot(x='City',hue='Converted',data=lead_df)","66f9f781":"#22 column:'I agree to pay the amount through cheque'\n\nsns.countplot(x='I agree to pay the amount through cheque',hue='Converted',data=lead_df)","d87af932":"#23 column:'A free copy of Mastering The Interview'\n\nsns.countplot(x='A free copy of Mastering The Interview',hue='Converted',data=lead_df)","b83a5cef":"#24 column:'Last Notable Activity'\n\nplt.figure(figsize=(60,20))\nsns.countplot(x='Last Notable Activity',hue='Converted',data=lead_df)","ff0a0a73":"#25 column:'Lead Source'\n\nplt.figure(figsize=(60,20))\nsns.countplot(x='Lead Source',hue='Converted',data=lead_df)","6d6202c0":"lead_df = lead_df.drop(['What matters most to you in choosing a course','Search','Magazine','Newspaper Article','X Education Forums','Newspaper',\n           'Digital Advertisement','Through Recommendations','Page Views Per Visit','TotalVisits','Last Activity','Receive More Updates About Our Courses','Update me on Supply Chain Content',\n           'Get updates on DM Content','I agree to pay the amount through cheque','Lead Number','A free copy of Mastering The Interview','Country'],1)","8b533a67":"lead_df.columns.values","57379559":"dummy1 = pd.get_dummies(lead_df[['Lead Origin','Specialization','What is your current occupation',\n                              'Tags','Lead Quality','City','Lead Source','Last Notable Activity']], drop_first=True)\ndummy1.head()","e0ac0543":"# Adding the results back to the master dataframe\nlead_df = pd.concat([lead_df, dummy1], axis=1)\nlead_df.head()","e051e5f6":"# We have created dummies for the above categorical variables, so now we can drop them:\n\nlead_df=lead_df.drop(['Lead Origin','Specialization','What is your current occupation','Tags','Lead Quality','City','Lead Source','Last Notable Activity'], axis = 1)\n","e48a61fa":"lead_df.head()","f0c6761d":"# List of variables to map\n\nvarlist =  ['Do Not Email', 'Do Not Call']\n\n# Defining the map function\ndef binary_map(x):\n    return x.map({'Yes': 1, \"No\": 0})\n\n# Applying the function:\nlead_df[varlist] = lead_df[varlist].apply(binary_map)","b2085193":"lead_df.head()","ba49c944":"from sklearn.model_selection import train_test_split\n\n# Putting feature variable to X\nX = lead_df.drop(['Prospect ID','Converted'], axis=1)\nX.head()","0fc09207":"# Putting response variable to y\ny = lead_df['Converted']\n\ny.head()","337b39f9":"# Splitting the data into train and test:\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size=0.3, random_state=100)","8d3f4ad8":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX_train[['Total Time Spent on Website']] = scaler.fit_transform(X_train[['Total Time Spent on Website']])\n\nX_train.head()","3bd65e0c":"# Plotting the the correlation matrix \nplt.figure(figsize = (40,40))        # Size of the figure\nsns.heatmap(lead_df.corr(),annot = True)\nplt.show()","87a19349":"import statsmodels.api as sm","0a03a714":"# Logistic regression model\nlogm1 = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\nlogm1.fit().summary()","4bb09555":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\n\n#Using RFE to select optimum variables:\n\nfrom sklearn.feature_selection import RFE\nrfe = RFE(logreg, 15)             # running RFE with 15 variables as output\nrfe = rfe.fit(X_train, y_train)","6169d7c7":"rfe.support_","e8b700ac":"list(zip(X_train.columns, rfe.support_, rfe.ranking_))","be0ec862":"col = X_train.columns[rfe.support_]","a434b447":"X_train.columns[~rfe.support_]","00f62992":"X_train_sm = sm.add_constant(X_train[col])\nlogm2 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm2.fit()\nres.summary()","c8dec65d":"col1 = col.drop('Tags_Lateral student',1)","cba16687":"col1","451a9b03":"X_train_sm = sm.add_constant(X_train[col1])\nlogm2 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm2.fit()\nres.summary()","abadae4b":"col2 = col1.drop('Tags_number not provided',1)","69a3696b":"col2","31e7c074":"X_train_sm = sm.add_constant(X_train[col2])\nlogm2 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm2.fit()\nres.summary()","c05fdb97":"col3=col2.drop('Tags_invalid number',1)","011bf05e":"X_train_sm = sm.add_constant(X_train[col3])\nlogm2 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm2.fit()\nres.summary()","706ae37f":"# Getting the predicted values on the train set\ny_train_pred = res.predict(X_train_sm)\ny_train_pred[:10]","d58633d4":"y_train_pred = y_train_pred.values.reshape(-1)\ny_train_pred[:10]","3f497575":"y_train_pred_final = pd.DataFrame({'Converted':y_train.values, 'Conv_Prob':y_train_pred})\ny_train_pred_final['ProspectID'] = y_train.index\ny_train_pred_final.head()","4256434d":"y_train_pred_final['predicted'] = y_train_pred_final.Conv_Prob.map(lambda x: 1 if x > 0.5 else 0)\n\n# Let's see the head\ny_train_pred_final.head()","d051eb12":"from sklearn import metrics","2d654e75":"# Confusion matrix \nconfusion = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final.predicted )\nprint(confusion)","ea5dfcbe":"# Predicted     not_converted    converted\n# Actual\n# not_converted        3843            159\n# converted           367           2099 ","c1723ee1":"# Let's check the overall accuracy.\nprint(metrics.accuracy_score(y_train_pred_final.Converted, y_train_pred_final.predicted))","2a4e89b4":"from statsmodels.stats.outliers_influence import variance_inflation_factor","3ae3a3d9":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train[col3].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col3].values, i) for i in range(X_train[col3].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","35770990":"TP = confusion[1,1] # true positive \nTN = confusion[0,0] # true negatives\nFP = confusion[0,1] # false positives\nFN = confusion[1,0] # false negatives","6ed5c9bb":"# Sensitivity\nTP \/ float(TP+FN)","dfe74a97":"#Specificity\nTN \/ float(TN+FP)","16acf3ad":"# Calculate false postive rate - predicting converted when customer did not convert\nprint(FP\/ float(TN+FP))","5e0fa115":"# Positive predictive value \nprint (TP \/ float(TP+FP))","ef385068":"# Negative predictive value\nprint (TN \/ float(TN+ FN))","865a6b0d":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None","bc585ad6":"fpr, tpr, thresholds = metrics.roc_curve( y_train_pred_final.Converted, y_train_pred_final.Conv_Prob, drop_intermediate = False )","c38e8ba1":"draw_roc(y_train_pred_final.Converted, y_train_pred_final.Conv_Prob)","a7af4d1b":"# Let's create columns with different probability cutoffs \nnumbers = [float(x)\/10 for x in range(10)]\nfor i in numbers:\n    y_train_pred_final[i]= y_train_pred_final.Conv_Prob.map(lambda x: 1 if x > i else 0)\ny_train_pred_final.head()","400569cb":"#Calculating accuracy,sensitivity and specificity for various probability cutoffs.\ncutoff_df = pd.DataFrame( columns = ['prob','accuracy','sensi','speci'])\nfrom sklearn.metrics import confusion_matrix\n\n# TP = confusion[1,1] # true positive \n# TN = confusion[0,0] # true negatives\n# FP = confusion[0,1] # false positives\n# FN = confusion[1,0] # false negatives\n\nnum = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\nfor i in num:\n    cm1 = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final[i] )\n    total1=sum(sum(cm1))\n    accuracy = (cm1[0,0]+cm1[1,1])\/total1\n    \n    speci = cm1[0,0]\/(cm1[0,0]+cm1[0,1])\n    sensi = cm1[1,1]\/(cm1[1,0]+cm1[1,1])\n    cutoff_df.loc[i] =[ i ,accuracy,sensi,speci]\nprint(cutoff_df)","8419d8e2":"# Let's plot accuracy sensitivity and specificity for various probabilities.\ncutoff_df.plot.line(x='prob', y=['accuracy','sensi','speci'])\nplt.show()","49d9e9fc":"#### From the curve above, 0.18 is the optimum point to take it as a cutoff probability.\n\ny_train_pred_final['final_predicted'] = y_train_pred_final.Conv_Prob.map( lambda x: 1 if x > 0.18 else 0)\n\ny_train_pred_final.head()","b5bb784f":"y_train_pred_final['Lead_Score'] = y_train_pred_final.Conv_Prob.map( lambda x: round(x*100))\n\ny_train_pred_final.head()","a75bbcbe":"# Accuracy-\nmetrics.accuracy_score(y_train_pred_final.Converted, y_train_pred_final.final_predicted)","14da2c23":"confusion2 = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final.final_predicted )\nconfusion2","86c5a79c":"TP = confusion2[1,1] # true positive \nTN = confusion2[0,0] # true negatives\nFP = confusion2[0,1] # false positives\nFN = confusion2[1,0] # false negative","821df8a7":"# Sensitivity \nTP \/ float(TP+FN)","f3ed479f":"#Specificity\nTN \/ float(TN+FP)","6a5b5130":"#False postive rate\nprint(FP\/ float(TN+FP))","6e0f48c1":"#Positive predictive value \nprint (TP \/ float(TP+FP))\n","e2e0712d":"# Negative predictive value\nprint (TN \/ float(TN+ FN))\n","f4e3aa65":"#Confusion matrix:\n\nconfusion = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final.predicted )\nconfusion","6e00ee11":"#Precision:\nconfusion[1,1]\/(confusion[0,1]+confusion[1,1])","9b3b7806":"#Recall:\nconfusion[1,1]\/(confusion[1,0]+confusion[1,1])","3850888f":"from sklearn.metrics import precision_recall_curve","c42ef39f":"y_train_pred_final.Converted, y_train_pred_final.predicted","a727cacc":"p, r, thresholds = precision_recall_curve(y_train_pred_final.Converted, y_train_pred_final.Conv_Prob)","60a198e7":"plt.plot(thresholds, p[:-1], \"g-\")\nplt.plot(thresholds, r[:-1], \"r-\")\nplt.show()","28fae08c":"X_test[['Total Time Spent on Website']] = scaler.transform(X_test[['Total Time Spent on Website']])","16cea2bd":"X_test = X_test[col3]\nX_test.head()","e9768c4c":"X_test_sm = sm.add_constant(X_test)","06306eb0":"y_test_pred = res.predict(X_test_sm)","ed8ad633":"y_test_pred[:10]","2eed29ac":"# Converting y_pred to a dataframe which is an array\ny_pred_1 = pd.DataFrame(y_test_pred)","f93d898c":"y_pred_1.head()","2622da22":"y_test_df = pd.DataFrame(y_test)","51706f78":"# Putting ProspectID to index\ny_test_df['ProspectID'] = y_test_df.index","e70856cc":"# Removing index for both dataframes to append them side by side \ny_pred_1.reset_index(drop=True, inplace=True)\ny_test_df.reset_index(drop=True, inplace=True)","8a5f355a":"# Appending y_test_df and y_pred_1\ny_pred_final = pd.concat([y_test_df, y_pred_1],axis=1)","9b249c79":"y_pred_final.head()","d76b5434":"# Renaming the column :\ny_pred_final= y_pred_final.rename(columns={ 0 : 'Conv_Prob'})","d97157a5":"# Rearranging the columns:\n#y_pred_final = y_pred_final.reindex_axis(['ProspectID','Converted','Conv_Prob'], axis=1)","dfca6ebf":"#Head of y_pred_final\ny_pred_final.head()","faadce24":"y_pred_final['final_predicted'] = y_pred_final.Conv_Prob.map(lambda x: 1 if x > 0.18 else 0)","fa62efc9":"y_pred_final.head()","0d474f50":"#Overall accuracy.\nmetrics.accuracy_score(y_pred_final.Converted, y_pred_final.final_predicted)","33163169":"#Adding a 'Lead Score' column :\n\ny_pred_final['Lead_Score'] = y_pred_final.Conv_Prob.map( lambda x: round(x*100))","34d63b86":"confusion2 = metrics.confusion_matrix(y_pred_final.Converted, y_pred_final.final_predicted )\nconfusion2","28a2a109":"TP = confusion2[1,1] # True positive.\nTN = confusion2[0,0] # True negative.\nFP = confusion2[0,1] # False positive.\nFN = confusion2[1,0] # Talse negative.","0393422e":"#Sensitivity:\nTP \/ float(TP+FN)","fdec4066":"# Specificity:\nTN \/ float(TN+FP)","6d5959ef":"# False postive rate - predicting converted when customer did not convert:\nprint(FP\/ float(TN+FP))","968610ed":"# Positive predictive value \nprint (TP \/ float(TP+FP))","f59dc29e":"# Negative predictive value\nprint (TN \/ float(TN+ FN))","eb0c4c36":"#Precision\nPrecision = confusion2[1,1]\/(confusion2[0,1]+confusion2[1,1])\nPrecision","85ff73e8":"#Recall\n\nRecall = confusion2[1,1]\/(confusion2[1,0]+confusion2[1,1])\nRecall","51aa5fb3":"y_pred_final.head()","c365a281":"y_pred_final","5d174c8c":"# Precision and Recall Trade-off:","34400e96":"Total Time Spent on Website is the total time spent by the customer on the website. From the plot shown above it appears that customers spending more time on the website are likely to take up the course.","d947178f":"# Model Building\n","8f7b70ac":"### Imputing values in columns:","6c6878af":"Almost all the people are opting the course for better career prospects.But the conversion rate is low. So more efforts should be put in designing the structure of the course.","5366391a":"Most of the customers are from INDIA. ","6899011a":"### Converting some binary variables (Yes\/No) to 0\/1","3579d81e":"### Making predictions on the test set","abfba2aa":"Lead origin indicates the origin identifier with which the customer was identified to be a lead.<br>\nThe conversion rate of Lead Add form is the highest amongst others but the count is low. Whereas the conversion rate for API and Landing Page Sumbission is low but the count is high. So the conversion rate for API and Landing Page Sumbission have to be improved because of the high count.","8fc65171":"Replacing all NaN values with 'Better Career Prospects' as this value as the highest count in this column.\n\n","d076ff39":"According to the problem statement the Select values have to be treated as null values.","afbdb92b":"# Data Cleaning\/Preparation:\n\nDropping all columns that have more than 45% missing values except for lead quality because it can tell us more about a lead. <br>\n","bc2d6396":"Problem Statement:\nAn education company named X Education sells online courses to industry professionals. On any given day, many professionals who are interested in the courses land on their website and browse for courses. \n\n \n\nThe company markets its courses on several websites and search engines like Google. Once these people land on the website, they might browse the courses or fill up a form for the course or watch some videos. When these people fill up a form providing their email address or phone number, they are classified to be a lead. Moreover, the company also gets leads through past referrals. Once these leads are acquired, employees from the sales team start making calls, writing emails, etc. Through this process, some of the leads get converted while most do not. The typical lead conversion rate at X education is around 30%. \n\nX Education has appointed you to help them select the most promising leads, i.e. the leads that are most likely to convert into paying customers. The company requires you to build a model wherein you need to assign a lead score to each of the leads such that the customers with higher lead score have a higher conversion chance and the customers with lower lead score have a lower conversion chance. The CEO, in particular, has given a ballpark of the target lead conversion rate to be around 80%.\n\nBuild a logistic regression model to assign a lead score between 0 and 100 to each of the leads which can be used by the company to target potential leads. A higher score would mean that the lead is hot, i.e. is most likely to convert whereas a lower score would mean that the lead is cold and will mostly not get converted.","24ed3bed":"# Precision and Recall:","bc890a02":"Conversion rates are high for 'Low in Relevance','Might Be' and 'High in Relevance'.","fe661646":"The percentage of missing value for the column 'City' is 39.71%.Replacing all missing values with Mumbai as it has the highest count.","c763b19a":"Replacing all NaN values with 'India' as this value as the highest count in this column.\n","cf80e9fb":"Do not email is an sn indicator variable selected by the customer wherein they select whether or not they want to be emailed about the course or not.<br>\nThe conversion rate is low in both 'yes' and 'no' cases.","f373c381":"Now the Column Lead Profile has 74.19% missing values. So it can be dropped.","fd842891":"Nothing can be inferred from this as all the leads have opted 'No'. This column can be dropped.","f3805860":"# Test-Train Split\n","860365d4":"From the above graph it is seen that there is a value 'Not Sure' which is as good as a Null value. So all NaN values can be replaced by 'Not Sure'. ","70fa4373":"### Creating new column 'predicted' with 1 if Conv_Prob > 0.5 else 0","fbe7b606":"# Data Analysis:","bb833732":"The conversion rate is very high for working professionals but count is less. So this course should be advertised more to working professionals to increase the count.","3d5718e6":"The Tag column indicates the current status of the lead.So the missing values might mean that the lead  will revert after reading the email.","39b3a555":"# From the report displayed above :\n1.Number of variables-37 <br>\n2.Number of observations-9240 <br>\n3.Total Missing (%)-12.0% <br>\n\n# Details about the variables that have missing values:\n\n1.Asymmetrique Activity Index has 4218 \/ 45.6% missing values <br>\n2.Asymmetrique Activity Score has 4218 \/ 45.6% missing values <br>\n3.Asymmetrique Profile Index has 4218 \/ 45.6% missing values <br>\n4.Asymmetrique Profile Score has 4218 \/ 45.6% missing values <br>\n5.City has 1420 \/ 15.4% missing values <br>\n6.Country has 2461 \/ 26.6% missing values <br>\n7.How did you hear about X Education has 2207 \/ 23.9% missing values <br>\n8.Last Activity has 103 \/ 1.1% missing values <br>\n9.Lead Profile has 2709 \/ 29.3% missing values <br>\n10.Lead Quality has 4767 \/ 51.6% missing values <br>\n11.Page Views Per Visit has 137 \/ 1.5% missing values<br>\n12.Specialization has 1438 \/ 15.6% missing values <br>\n13.Tags has 3353 \/ 36.3% missing values <br> \n14.TotalVisits has 137 \/ 1.5% missing values <br>\n15.What is your current occupation has 2690 \/ 29.1% missing values<br> \n16.What matters most to you in choosing a course has 2709 \/ 29.3% missing values<br> \n","1785e7e6":"# Feature Scaling","d5d8954d":"The percentage of missing value for the column 'How did you hear about X Education' is 78.46%. So this column can be dropped.","52c317c3":"'Reference' and 'Welingak Website' have high conversion rates but count is low. So more effort should be put in to improve the count of these two.","cbb4c032":"### Finding Optimal Cutoff Point","cb3258cd":"The missing values in this column can be put under one label('Others') because the lead might have a different specialization which is not available in the given options. ","97d595b5":"The graph above indicates whether the customer came in through recommendations.<br> All the customers did not come in through recommendations.","0bd3616e":"## Metrics beyond simply accuracy","39981275":"Missing values can be replaced by 'Google' as it has the highest count.","73e21051":"All the above graphs indicating whether the customer had seen the through any of the above columns.(How did the lead get to know about the course).<br>\nAll the leads found out about the course on their own and not through any of the above columns\/items.","11ce2d36":"# Checking VIF\n","d9344893":"# ROC Curve","2aafb185":"The conversion rates is low for all the specializations but a little better for 'Marketing Management' and 'Banking,Investment And Insurance' so the focus should be on this two. The count for 'Others' is high. So more specializations have to be included.","7d8284c0":"### Creating dummy variables for categorical variables:","ca31d146":"Nothing can be inferred from this as all the leads have opted 'No'. This column can be dropped.","a16ae9b2":"# Looking at correlations\n","8100b554":"All the features have VIF below 5 so we can proceed.\n","c236741e":"### Based on the analysis above some columns are providing very less information so dropping them would be ideal.","ff5d3d59":"Do not column is an indicator variable selected by the customer wherein they select whether of not they want to be called about the course or not.\nThe conversion rate is low.","170b18de":"Around 38% of the leads are converted.(They bought the course)\n\nComparing the columns with the Converted column: <br>\n(Prospect ID and Lead Number columns have unique values.So not taking these columns into consideration). ","b4e84800":"Replacing all NaN values with 'Unemployed' as this value as the highest count in this column.\n","39364eb5":"Nothing can be inferred from this as all the leads have opted 'No'. This column can be dropped.","70dc62f8":"Nothing can be inferred from this as all the leads have opted 'No'. This column can be dropped.","d513c916":"The conversion rate is high for 'SMS Sent'.","a063b7ab":"The conversion rates is low for all the cities but 'Mumbai' has the highest count. So more focus should be put in this city to improve the conversion rate.","6554f7e8":"### Using the probability threshold value of 0.18 on the test dataset to predict if a lead will convert.\u00b6","4886f992":"Last activity is the last action performed by the customer.The missing values in this column can be put under ('Email Marked Spam')."}}