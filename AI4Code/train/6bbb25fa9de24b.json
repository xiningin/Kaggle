{"cell_type":{"5d8f1353":"code","747d45d0":"code","71e743a1":"code","76bb3ef9":"code","31eaee70":"code","ef6f4a94":"code","3c9e22c9":"code","5ae4f742":"code","21661f3a":"code","111b5150":"code","6bafc906":"code","c0a22a72":"code","e6f98f96":"code","06f9e54d":"code","da2cce74":"code","3b7ff695":"code","98a9f42c":"code","ec438f09":"code","cbe3c864":"code","17e8131d":"code","6d6e53d4":"code","b503486a":"code","899c7337":"markdown"},"source":{"5d8f1353":"import numpy as np\nimport pandas as pd\n","747d45d0":"#create array using numpy \narr=np.array([1,2,3,4,5]) # one dimensional array \narr1=np.array([[1,2,3],[4,5,6,],[7,8,9]]) # two dimensional array \nprint(arr)\nprint(arr1)","71e743a1":"arrzero=np.zeros([5,5]) # 5*5 Matrix\narrone=np.ones([5,5])\narrempty=np.empty([5,5])\nprint(arrzero) \nprint(arrone)\nprint(arrempty)","76bb3ef9":"# slice operations\n\nprint(arr1) # if we want to retrive specific item we can use slice concept \n\nprint(arr1[:]) # to retrive all elements from matrix \nprint(arr1[1:2]) # Row1 and column 2 \nprint(arr1[:,:1]) # all rows butonly first columns\nprint(arr1[:2,:]) ## only row rows all columns","31eaee70":"# Now just creating vector \nvector1=[1,2,3,4]\nprint(vector1)","ef6f4a94":"# To calculate vector lenght we can do 3 ways \n# 1. Euclidean distance (or) first normal form\n# 2. Manhatten distance (or) second normal form\n# 3. Max normal form \n","3c9e22c9":"from scipy.linalg import norm\nfrom math import inf","5ae4f742":"print(norm(vector1,1)) # Manhatten distance","21661f3a":"print(norm(vector1,inf)) # Max normal form ","111b5150":"print(norm(vector1,2)) # Euclidean distance","6bafc906":"# Type of matrix \n# 1. Square matrix \n# 2. Triangular matrix (Lower triangular and upper triangular )\n# 3. Identity matrix \n# 4. symmetric matrix \n# 5. orthogonal matrix\n# 6. diagonal matrix ","c0a22a72":"sqarematrix =np.array([[1,2,3],[42,55,63],[7,8,9]])\nprint(sqarematrix)\nsqarematrix.shape # matrix size rows and columns ","e6f98f96":"print(np.identity(3)) # create Identity matrix ","06f9e54d":"np.diag(sqarematrix) # using diag method we can retrive main diagonal values ","da2cce74":"np.tril(sqarematrix) # lower triangular matrix ","3b7ff695":"np.triu(sqarematrix) # upper triangular matrix ","98a9f42c":"# matrix operations \n# 1. Inverse \n# 2. Transpose\n# 3. rank \n# 4. determents \n# 5. sudo inverse for rectangular matrix","ec438f09":"from numpy.linalg import inv,pinv,matrix_rank,det","cbe3c864":"print(inv(sqarematrix))","17e8131d":"#print(pinv(sqarematrix))","6d6e53d4":"print(matrix_rank(sqarematrix))","b503486a":"print(det(sqarematrix))","899c7337":"### Basic operations using numpy and pandas \n### using numpy we can do matrix and vector releated operations\n### using pandas we can do data manipulations like load data , analyze data , clean data "}}