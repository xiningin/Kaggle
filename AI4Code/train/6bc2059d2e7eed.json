{"cell_type":{"a4e9ff13":"code","9d02675a":"code","6c502672":"code","74850269":"code","0ab45222":"code","37b994f6":"code","8a23fd3f":"code","49c0b5e9":"code","061fc873":"code","9bea95af":"code","105c781d":"code","debe7262":"code","a0bc8409":"code","f907b0b9":"code","910b3bd7":"code","176a88fc":"code","2a95d28f":"code","1199ee77":"code","b29b29b0":"code","0702e427":"code","415b4e27":"code","ea4db0ce":"code","53a2c705":"code","f7c98d98":"code","8b0faac6":"code","92176a09":"code","cc790826":"code","45de5920":"code","ce1c8574":"code","9c2fc9b0":"code","645c3c57":"code","b1c93fc1":"code","c0d80591":"code","9a5d6a9f":"code","4ec2ef50":"code","f1ff3042":"code","54dd2956":"code","78ab227b":"code","bd760d02":"code","f2df6909":"code","fcfc9bcf":"code","b0683417":"code","046be5a1":"code","bdae3633":"code","204de8bb":"code","6b5b868e":"code","4e2ba95e":"code","d4784cca":"code","bbfde10f":"code","6ee34c0f":"code","451e4316":"code","aa6a719e":"code","dae4ead9":"code","e0c17d85":"code","b16dcd84":"code","b974b10d":"code","bc03240b":"code","757b1ec7":"code","27046e9e":"code","9d3c1066":"code","2fc0009b":"code","a14fb018":"code","e578d736":"code","5d0c1c7b":"code","c404a999":"code","fe55a84a":"code","fec9b6c8":"code","50f17718":"code","5106e900":"code","ec413fb9":"code","b27df093":"code","5ca703fc":"code","faaa9934":"code","30277031":"code","7b897564":"code","53f83a4c":"code","59809eb4":"code","3a24f3cc":"code","deb8515e":"code","2cdef51e":"code","8175da78":"code","2aaac51a":"code","92a41538":"code","b0841a68":"code","c6d8cc27":"code","14dbdf39":"code","19ea5e30":"code","118c6a8d":"code","b1253a62":"code","7e23cb8a":"code","ecf0d424":"code","e257e7a4":"code","dc41e04a":"code","9d26c5c1":"code","b5dd94f2":"code","dbed2e6d":"code","f135b7d7":"code","e666ebc6":"code","f179b938":"code","489a734a":"code","b287c4c7":"code","221efed8":"code","6e32bf74":"code","afe2c16b":"code","2c359486":"code","f69a1ab8":"code","57362ae0":"code","268ee56f":"code","1b2e6e08":"code","24118b12":"code","138bc44d":"code","b5663c58":"code","3068e66c":"code","4c81547d":"code","afab46c2":"code","05fd3dd1":"code","d4697c5f":"code","f6faddab":"code","cfc6bac2":"code","71ab136f":"code","5afb86e9":"code","8498878a":"code","ee3473a4":"code","7d04705c":"code","1eb6d82b":"code","e3f54cd3":"code","c4296e2d":"code","36ceb733":"code","014b82b6":"code","074139bc":"code","af3e7704":"code","b162f423":"code","cfc8eaf0":"code","89e348ee":"code","46a64879":"code","50fb9d3c":"code","ca1babc7":"code","161b3f63":"markdown","a16a6915":"markdown","0fbd076b":"markdown","1c31b3ff":"markdown","73b81603":"markdown","25521275":"markdown","1348e4c2":"markdown","bc448435":"markdown","c4209631":"markdown","e4e84275":"markdown","29e3f28a":"markdown","502cd40d":"markdown","27189ab8":"markdown","360e507e":"markdown","5bcbe45b":"markdown","6d477879":"markdown","f9988dd2":"markdown","7d8a005f":"markdown","c1d287dc":"markdown","ee1dc084":"markdown","7d080336":"markdown","74d73706":"markdown","714ad58b":"markdown","46dbbe1c":"markdown","de8459e8":"markdown","d3b222e4":"markdown","46a66933":"markdown","9f71b63f":"markdown","8368148d":"markdown","fd3e9ba4":"markdown","a3c77692":"markdown","1d927d2b":"markdown","f681a810":"markdown","7dea9ceb":"markdown","e336b204":"markdown","33dda07c":"markdown","97c6dcdb":"markdown","7cba2747":"markdown","e8d3235f":"markdown","03d44dbf":"markdown","f9a85cea":"markdown","19661f54":"markdown","5113c6a2":"markdown","6ee96a3c":"markdown","c43dbd09":"markdown","7a151ea4":"markdown","6d4d29fc":"markdown","3075d6ad":"markdown","33214088":"markdown","2b10766b":"markdown","ed6982fc":"markdown","3dcf8ca6":"markdown","2fbfb8b7":"markdown"},"source":{"a4e9ff13":"data ='..\/input\/lending-club-20072020q1\/Loan_status_2007-2020Q3.gzip'\n# Files in dataset\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9d02675a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('ggplot')\nimport zipfile\n\n# Pandas display options\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', 500)\npd.set_option('display.max_info_columns', 500)\npd.set_option('display.max_info_rows', 2000)\npd.set_option('display.expand_frame_repr', True)\npd.set_option('display.width', 2000)\npd.set_option('display.max_rows', 500)\n\nimport warnings\nwarnings.filterwarnings('ignore')","6c502672":"!pip install xlrd","74850269":"!pip install openpyxl","0ab45222":"data_info = pd.read_excel('\/kaggle\/input\/lending-club-20072020q1\/LCDataDictionary.xlsx',\n                          usecols=['LoanStatNew','Description'],index_col=0)\ndata_info.head()","37b994f6":"data_info.loc['revol_util']['Description']","8a23fd3f":"def feat_info(col_name):\n    print(data_info.loc[col_name]['Description'])","49c0b5e9":"feat_info('annual_inc')","061fc873":"feat_info('funded_amnt')","9bea95af":"df_scan = pd.read_csv('\/kaggle\/input\/lending-club-20072020q1\/Loan_status_2007-2020Q3.gzip', nrows=10000, low_memory=False)\ndf_scan.head()","105c781d":"df_scan.shape","debe7262":"df_scan.issue_d.value_counts()","a0bc8409":"df_scan.info()","f907b0b9":"df_scan.loan_status.value_counts()","910b3bd7":"df_scan['Charged_Off'] = df_scan.loan_status.map({'Fully Paid':0,'Charged Off':1})","176a88fc":"df_scan.head()","2a95d28f":"df_scan.corr()['Charged_Off'].sort_values(ascending=False)","1199ee77":"selected_feat=['loan_amnt','term','int_rate','installment','grade','sub_grade','emp_title','emp_length','home_ownership',\n                   'annual_inc','verification_status','issue_d','purpose','title','dti','earliest_cr_line','inq_last_6mths',\n                   'open_acc','pub_rec','revol_bal','revol_util','total_acc','initial_list_status','application_type','mort_acc',\n                   'last_pymnt_amnt',\n                    'pub_rec_bankruptcies','addr_state','fico_range_low','fico_range_high','loan_status']","b29b29b0":"len(selected_feat)","0702e427":"selected_feat=sorted(selected_feat)","415b4e27":"data_info.loc[selected_feat]","ea4db0ce":"df = pd.read_csv('\/kaggle\/input\/lending-club-20072020q1\/Loan_status_2007-2020Q3.gzip', usecols=selected_feat)\ndf.head()","53a2c705":"df.shape","f7c98d98":"df[df.issue_d=='Aug-2007'].shape","8b0faac6":"df.groupby('issue_d')['loan_status'].value_counts().head(100)","92176a09":"df.info()","cc790826":"df.columns","45de5920":"round(df.isnull().sum()\/len(df)*100,2).sort_values(ascending=False)","ce1c8574":"feat_info('loan_status')","9c2fc9b0":"feat_info('addr_state')","645c3c57":"df.describe().T","b1c93fc1":"df.loan_status.value_counts()","c0d80591":"df.loan_status.value_counts().plot.bar()\nplt.title('Loan Status Value Distribution')","9a5d6a9f":"df = df.loc[df['loan_status'].isin(['Fully Paid', 'Charged Off'])]","4ec2ef50":"df.shape","f1ff3042":"print(df.loan_status.value_counts(),'\\n')\nprint(df.loan_status.value_counts(normalize=True))","54dd2956":"ax=sns.countplot(x='loan_status',data=df)\ntotal = len(df)\nfor p in ax.patches:\n    percentage = f'{100 * p.get_height() \/ total:.1f}%\\n'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height()\n    ax.annotate(percentage, (x, y), ha='center', va='center')\n\nplt.title('Loan Status Distribution')\nplt.show()","78ab227b":"df['Charged_Off'] = df['loan_status'].map({'Fully Paid':0,'Charged Off':1})\ndf.drop('loan_status', axis=1, inplace=True)","bd760d02":"plt.figure(figsize=(12,4))\nsns.distplot(df['loan_amnt'],kde=False,bins=40)\nplt.xlim(0,45000)\nplt.title('Loan Amount Distribution')","f2df6909":"plt.figure(figsize=(16,7))\nsns.heatmap(df.corr(),annot=True,cmap='viridis')\nplt.title('Correlation Check of Features');","fcfc9bcf":"sns.scatterplot(x='installment',y='loan_amnt',data=df)\nplt.title('Installment vs Loan Amount Correlation');","b0683417":"df.drop(['installment',\n         'total_acc',\n         'pub_rec',\n         ],axis=1, inplace=True)","046be5a1":"sns.boxplot(x='Charged_Off',y='loan_amnt',data=df)","bdae3633":"df['grade'].unique()","204de8bb":"sns.countplot(x='grade',data=df,hue='Charged_Off')\nplt.title('Grade Distribution by Loan Status');","6b5b868e":"plt.figure(figsize=(12,4))\nsubgrade_order = sorted(df['sub_grade'].unique())\nsns.countplot(x='sub_grade',data=df,order = subgrade_order,palette='coolwarm')\nplt.title('Subgrade Distribution');","4e2ba95e":"plt.figure(figsize=(12,4))\nsubgrade_order = sorted(df['sub_grade'].unique())\nsns.countplot(x='sub_grade',data=df,order = subgrade_order,palette='coolwarm', hue='Charged_Off' )\nplt.title('Subgrade Distribution by Charged_Off');","d4784cca":"df.drop('grade',axis=1, inplace=True)","bbfde10f":"df.isnull().sum()\/len(df)*100","6ee34c0f":"df.shape","451e4316":"df.emp_title.value_counts()","aa6a719e":"df.drop('emp_title',axis=1, inplace=True)","dae4ead9":"sorted(df['emp_length'].dropna().unique())","e0c17d85":"emp_length_order = ['< 1 year','1 year',\n  '2 years',\n '3 years',\n '4 years',\n '5 years',\n '6 years',\n '7 years',\n '8 years',\n '9 years','10+ years']","b16dcd84":"plt.figure(figsize=(12,4))\nsns.countplot(x='emp_length',data=df,order=emp_length_order)","b974b10d":"plt.figure(figsize=(12,4))\nsns.countplot(x='emp_length',data=df,order=emp_length_order,hue='Charged_Off')\nplt.title('Employment Lenght by Loan Status');","bc03240b":"emp_co = df[df['Charged_Off']==1].groupby(\"emp_length\").count()['Charged_Off']\nemp_fp = df[df['Charged_Off']==0].groupby(\"emp_length\").count()['Charged_Off']","757b1ec7":"emp_co","27046e9e":"emp_fp","9d3c1066":"(emp_co\/emp_fp).plot(kind='bar')\nplt.title('Emp.Length Fully Paid\/Charged Off Ratio');","2fc0009b":"df = df.drop('emp_length',axis=1)","a14fb018":"round(df.isnull().sum()\/len(df),2)","e578d736":"df.dropna(inplace=True)","5d0c1c7b":"df.isnull().sum().sum()","c404a999":"feat_info('title')","fe55a84a":"df['title'].value_counts()","fec9b6c8":"df['purpose'].value_counts()","50f17718":"plt.figure(figsize=(16,8))\nsns.countplot(x='purpose', data=df, hue='Charged_Off')\nplt.xticks(rotation=45)\nplt.legend(loc=5)\nplt.title('Loan Purpose by Loan Status');","5106e900":"df.drop('title',axis=1, inplace=True)","ec413fb9":"df.info()","b27df093":"df.shape","5ca703fc":"df.select_dtypes(['object']).columns","faaa9934":"df['term'].value_counts()","30277031":"df['term'] = df['term'].apply(lambda term: int(term[:3]))","7b897564":"df.head()","53f83a4c":"df['earliest_cr_year'] = df['earliest_cr_line'].apply(lambda date:int(date[-4:]))\ndf.drop('earliest_cr_line',axis=1,inplace=True)","59809eb4":"df.earliest_cr_year.dtype","3a24f3cc":"df['issue_d'] = df['issue_d'].apply(lambda date:int(date[-4:]))","deb8515e":"plt.figure(figsize=(8,6))\nsns.barplot(x='issue_d', y='loan_amnt', data=df)\nplt.title('Issuance of Loans', fontsize=16)\nplt.xlabel('Year', fontsize=14)\nplt.ylabel('Average loan amount issued', fontsize=14)","2cdef51e":"df.head()","8175da78":"df['int_rate'] = df['int_rate'].apply(lambda x: float(x[:-1]))\ndf['revol_util'] = df['revol_util'].apply(lambda x: float(x[:-1]))","2aaac51a":"df.application_type.value_counts()","92a41538":"df.addr_state.value_counts()","b0841a68":"plt.figure(figsize=(16,8))\nsns.countplot(x='addr_state', data=df, hue='Charged_Off')\nplt.title('States by Charged Off');","c6d8cc27":"state_co = df[df['Charged_Off']==1].groupby(\"addr_state\").count()['Charged_Off']\nstate_fp = df[df['Charged_Off']==0].groupby(\"addr_state\").count()['Charged_Off']\nplt.figure(figsize=(16,8))\n(state_fp\/state_co).plot(kind='bar')\nplt.title('States by Fully Paid \/ Charged Off');","14dbdf39":"df[df.addr_state=='IA']['Charged_Off'].value_counts()","19ea5e30":"df.drop('addr_state', axis=1, inplace=True)","118c6a8d":"feat_info('initial_list_status')","b1253a62":"df.initial_list_status.value_counts()","7e23cb8a":"sns.countplot(x='initial_list_status', data=df, hue='Charged_Off');","ecf0d424":"df['home_ownership'].value_counts()","e257e7a4":"df['home_ownership'].replace(['NONE', 'ANY','OTHER'], 'RENT', inplace=True)","dc41e04a":"sns.countplot(x='home_ownership', data=df, hue='Charged_Off')\nplt.title('Home Ownership by Loan Status');","9d26c5c1":"df.verification_status.value_counts()","b5dd94f2":"sns.countplot(x='verification_status', data=df, hue='Charged_Off')\nplt.title('Verification Status by Loan Status');","dbed2e6d":"df.head()","f135b7d7":"df.info()","e666ebc6":"df['fico_range'] = (df.fico_range_high+df.fico_range_low)\/2\ndf.drop(['fico_range_low','fico_range_high'], axis=1, inplace=True)","f179b938":"df.select_dtypes(['object']).columns","489a734a":"df=pd.get_dummies(df, drop_first=True)","b287c4c7":"df.shape","221efed8":"plt.figure(figsize=(10,15))\ndf.corr().Charged_Off.sort_values()[:-1].plot.barh()\nplt.title('Correlation of Fully Paid with Features');","6e32bf74":"df.sample(10)","afe2c16b":"df.shape","2c359486":"df.issue_d.value_counts().plot.bar()\nplt.title('Loans by Years');","f69a1ab8":"df.loc[df.issue_d.isin([2020, 2019, 2018])]","57362ae0":"df_sample=df.loc[df.issue_d.isin([2020, 2019])]\n# df_sample=pd.concat([df_sample[df_sample.Fully_Paid==1].sample(50000),df_sample[df_sample.Fully_Paid==0].sample(50000)], ignore_index=True)","268ee56f":"df_sample.shape","1b2e6e08":"list(df_sample.columns)","24118b12":"print(df_sample.Charged_Off.value_counts(),'\\n')\nprint(df_sample.Charged_Off.value_counts(normalize=True))","138bc44d":"X = df_sample.drop('Charged_Off',axis=1)\ny = df_sample['Charged_Off']\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, stratify=y,random_state=42)","b5663c58":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","3068e66c":"from sklearn.ensemble import RandomForestClassifier\n\nrf_clf = RandomForestClassifier().fit(X_train, y_train)\nrf_pred = rf_clf.predict(X_test)\n\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nprint(confusion_matrix(y_test, rf_pred))\nprint(classification_report(y_test, rf_pred))","4c81547d":"rf_clf.feature_importances_","afab46c2":"(pd.Series(rf_clf.feature_importances_, index=X.columns).nlargest(25).plot(kind='barh')) \nplt.title('Random Forest Feature Importance')","05fd3dd1":"# from sklearn.model_selection import train_test_split, cross_val_score, TimeSeriesSplit, GridSearchCV, RandomizedSearchCV\n\n# rf_params = {\"n_estimators\":[100,300,500],\n#              \"max_depth\":[7,10,15],\n#              \"max_features\": [8,10,15],\n#              \"min_samples_split\": [4,6,8]}\n\n\n# rf_grid= RandomizedSearchCV(rf_clf, rf_params, cv = 5,\n#                              n_iter=10,\n#                             n_jobs = -1, verbose = 2,scoring='f1').fit(X_train, y_train)\n\n# rf_grid.best_params_","d4697c5f":"rf_tuned = RandomForestClassifier(max_depth = 15,             \n                                  max_features = 10, \n                                  min_samples_split = 8, \n                                  n_estimators = 100).fit(X_train, y_train)\n\n\nrf_tuned_pred = rf_tuned.predict(X_test)\nprint(confusion_matrix(y_test, rf_tuned_pred))\nprint(classification_report(y_test, rf_tuned_pred))","f6faddab":"import xgboost as xgb\nxgb_clf = xgb.XGBClassifier().fit(X_train, y_train)\nxgb_clf.score(X_test, y_test)\nxgb_pred = xgb_clf.predict(X_test)\nprint(confusion_matrix(y_test, xgb_pred))\nprint(classification_report(y_test, xgb_pred))","cfc6bac2":"# from sklearn.model_selection import train_test_split, cross_val_score, TimeSeriesSplit, GridSearchCV, RandomizedSearchCV\n# xgb_params = {\"n_estimators\": [50, 100, 300],\n#              \"subsample\":[0.5,0.8,1],\n#              \"max_depth\":[3,5,7],\n#              \"learning_rate\":[0.1,0.01,0.3]}\n# xgb_cv_model = RandomizedSearchCV(xgb_clf, xgb_params, cv = 5,\n#                             n_jobs = -1, verbose = 2).fit(X_train, y_train)\n# xgb_cv_model.best_params_","71ab136f":"xgb_tuned = xgb.XGBClassifier(learning_rate= 0.01,\n                                max_depth= 7,\n                                n_estimators= 50,\n                                subsample= 0.8).fit(X_train, y_train)\nxgb_pred = xgb_tuned.predict(X_test)\nprint(confusion_matrix(y_test, xgb_pred))\nprint(classification_report(y_test, xgb_pred))","5afb86e9":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","8498878a":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation,Dropout\nfrom tensorflow.keras.constraints import max_norm\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping","ee3473a4":"early_stop = EarlyStopping(monitor=\"val_loss\", verbose =2, mode=\"min\", patience = 25, restore_best_weights=True)\nmodel = Sequential()\n\n# input layer\nmodel.add(Dense(117,  activation='relu'))\nmodel.add(Dropout(0.2))\n\n# hidden layer\nmodel.add(Dense(58, activation='relu'))\nmodel.add(Dropout(0.2))\n\n# hidden layer\nmodel.add(Dense(29, activation='relu'))\nmodel.add(Dropout(0.2))\n\n# output layer\nmodel.add(Dense(1,activation='sigmoid'))\nopt = Adam(lr = 0.01)\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","7d04705c":"model.fit(x=X_train, \n          y=y_train, \n          epochs=250,\n          batch_size=256,\n          validation_data=(X_test, y_test), verbose=1, callbacks=[early_stop] \n          )","1eb6d82b":"losses = pd.DataFrame(model.history.history)\nlosses.plot()","e3f54cd3":"from sklearn.metrics import classification_report, confusion_matrix\npredictions = model.predict_classes(X_test)\n#predictions = np.argmax(model.predict(X_test), axis=-1)\nconfusion_matrix(y_test,predictions)\nprint(classification_report(y_test,predictions))","c4296e2d":"from lightgbm import LGBMClassifier\nclf = LGBMClassifier()\nclf.fit(X_train, y_train, eval_set=[(X_train, y_train), (X_test, y_test)], \n            eval_metric= 'auc', verbose= 1000, early_stopping_rounds= 200)\nclf_pred = clf.predict(X_test)\nprint(confusion_matrix(y_test, clf_pred))\nprint(classification_report(y_test, clf_pred))","36ceb733":"from lightgbm import LGBMClassifier\nclf = LGBMClassifier(\n            nthread=4,\n            n_estimators=10000,\n            learning_rate=0.02,\n            num_leaves=32,\n            colsample_bytree=0.9497036,\n            subsample=0.8715623,\n            max_depth=8,\n            reg_alpha=0.04,\n            reg_lambda=0.073,\n            min_split_gain=0.0222415,\n            min_child_weight=40,\n            silent=-1,\n            verbose=-1,\n            )\nclf.fit(X_train, y_train, eval_set=[(X_train, y_train), (X_test, y_test)], \n            eval_metric= 'auc', verbose= 1000, early_stopping_rounds= 200)\nclf_pred = clf.predict(X_test)\nprint(confusion_matrix(y_test, clf_pred))\nprint(classification_report(y_test, clf_pred))","014b82b6":"df.shape","074139bc":"print(df.Charged_Off.value_counts(),'\\n')\nprint(df.Charged_Off.value_counts(normalize=True))","af3e7704":"df_sorted= df.sort_values('issue_d', ignore_index=True)\nX = df_sorted.drop('Charged_Off',axis=1)\ny = df_sorted['Charged_Off']\n\ntrain_pct_index = int(0.8 * len(X))\nX_train, X_test = X[:train_pct_index], X[train_pct_index:]\ny_train, y_test = y[:train_pct_index], y[train_pct_index:]\n\n#print(df_sorted.head(),'\\n')\n#print(df_sorted.tail(),'\\n')\n\nfrom collections import Counter\n\nprint('df shape     :{}'.format(df_sorted.shape))\nprint('X_train shape:{}'.format(X_train.shape))\nprint('y_train shape:{}'.format(y_train.shape))\nprint('X_test shape :{}'.format(X_test.shape))\nprint('y_test shape :{}\\n'.format(y_test.shape))\nprint('Target Value Counts:\\n{}\\n'.format(Counter(y_train)))\nprint('Charged Off\/Fully Paid ratio:{:.2f}\\n'.format(Counter(y_train)[1]\/Counter(y_train)[0]))\n\n\n\nimport xgboost as xgb\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nxgb_clf = xgb.XGBClassifier().fit(X_train, y_train)\nxgb_clf.score(X_test, y_test)\nxgb_pred = xgb_clf.predict(X_test)\nprint(confusion_matrix(y_test, xgb_pred))\nprint(classification_report(y_test, xgb_pred))","b162f423":"df_sorted= df.sort_values('issue_d', ignore_index=True)\nX = df_sorted.drop('Charged_Off',axis=1)\ny = df_sorted['Charged_Off']\n\ntrain_pct_index = int(0.8 * len(X))\nX_train, X_test = X[:train_pct_index], X[train_pct_index:]\ny_train, y_test = y[:train_pct_index], y[train_pct_index:]\n\n# print(df_sorted.head(),'\\n')\n# print(df_sorted.tail(),'\\n')\n \nfrom imblearn.over_sampling import SMOTE \nfrom collections import Counter\n\nsmt = SMOTE(sampling_strategy=0.4)\nX_train_SMOTE, y_train_SMOTE = smt.fit_resample(X_train, y_train)\n\nprint('df shape                  :{}'.format(df_sorted.shape))\nprint('X_train shape before SMOTE:{}'.format(X_train.shape))\nprint('y_train shape before SMOTE:{}'.format(y_train.shape))\nprint('X_test shape before SMOTE :{}'.format(X_test.shape))\nprint('y_test shape before SMOTE :{}\\n'.format(y_test.shape))\nprint('Target Value Counts before SMOTE:\\n{}\\n'.format(Counter(y_train)))\nprint('Charged Off\/Fully Paid ratio before SMOTE:{:.2f}\\n'.format(Counter(y_train)[1]\/Counter(y_train)[0]))\nprint('X_train shape after SMOTE:{}'.format(X_train_SMOTE.shape))\nprint('y_train shape after SMOTE:{}\\n'.format(y_train_SMOTE.shape))\nprint('Target Value Counts after SMOTE:\\n{}\\n'.format(Counter(y_train_SMOTE)))\nprint('Charged Off\/Fully Paid ratio after SMOTE:{:.2f}\\n'.format(Counter(y_train_SMOTE)[1]\/Counter(y_train_SMOTE)[0]))\n\nimport xgboost as xgb\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nxgb_clf = xgb.XGBClassifier().fit(X_train_SMOTE, y_train_SMOTE)\nxgb_clf.score(X_test, y_test)\nxgb_pred = xgb_clf.predict(X_test)\nprint('Confusion Matrix\\n')\nprint(confusion_matrix(y_test, xgb_pred),'\\n')\nprint('Classification Report\\n')\nprint(classification_report(y_test, xgb_pred))","cfc8eaf0":"df_sorted= df.sort_values('issue_d', ignore_index=True)\nX = df_sorted.drop('Charged_Off',axis=1)\ny = df_sorted['Charged_Off']\n\ntrain_pct_index = int(0.8 * len(X))\nX_train, X_test = X[:train_pct_index], X[train_pct_index:]\ny_train, y_test = y[:train_pct_index], y[train_pct_index:]\n\n# print(df_sorted.head(),'\\n')\n# print(df_sorted.tail(),'\\n')\n\nfrom imblearn.over_sampling import SMOTE \nfrom collections import Counter\n\nsmt = SMOTE()#sampling_strategy=0.4)\nX_train_SMOTE, y_train_SMOTE = smt.fit_resample(X_train, y_train)\n\nprint('df shape                  :{}'.format(df_sorted.shape))\nprint('X_train shape before SMOTE:{}'.format(X_train.shape))\nprint('y_train shape before SMOTE:{}'.format(y_train.shape))\nprint('X_test shape before SMOTE :{}'.format(X_test.shape))\nprint('y_test shape before SMOTE :{}\\n'.format(y_test.shape))\nprint('Target Value Counts before SMOTE:\\n{}\\n'.format(Counter(y_train)))\nprint('Charged Off\/Fully Paid ratio before SMOTE:{:.2f}\\n'.format(Counter(y_train)[1]\/Counter(y_train)[0]))\nprint('X_train shape after SMOTE:{}'.format(X_train_SMOTE.shape))\nprint('y_train shape after SMOTE:{}\\n'.format(y_train_SMOTE.shape))\nprint('Target Value Counts after SMOTE:\\n{}\\n'.format(Counter(y_train_SMOTE)))\nprint('Charged Off\/Fully Paid ratio after SMOTE:{:.2f}\\n'.format(Counter(y_train_SMOTE)[1]\/Counter(y_train_SMOTE)[0]))\n\nimport xgboost as xgb\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nxgb_clf = xgb.XGBClassifier().fit(X_train_SMOTE, y_train_SMOTE)\nxgb_clf.score(X_test, y_test)\nxgb_pred = xgb_clf.predict(X_test)\nprint('Confusion Matrix\\n')\nprint(confusion_matrix(y_test, xgb_pred),'\\n')\nprint('Classification Report\\n')\nprint(classification_report(y_test, xgb_pred))","89e348ee":"df_sample=pd.concat([df[df.Charged_Off==1].sample(349716),df[df.Charged_Off==0].sample(349716)], ignore_index=True)\ndf_sorted= df_sample.sort_values('issue_d', ignore_index=True)\nX = df_sorted.drop('Charged_Off',axis=1)\ny = df_sorted['Charged_Off']\n\ntrain_pct_index = int(0.8 * len(X))\nX_train, X_test = X[:train_pct_index], X[train_pct_index:]\ny_train, y_test = y[:train_pct_index], y[train_pct_index:]\n\n# print(df_sorted.head(),'\\n')\n# print(df_sorted.tail(),'\\n')\n\nprint('df shape     :{}'.format(df_sorted.shape))\nprint('X_train shape:{}'.format(X_train.shape))\nprint('y_train shape:{}'.format(y_train.shape))\nprint('X_test shape :{}'.format(X_test.shape))\nprint('y_test shape :{}\\n'.format(y_test.shape))\nprint('Target Value Counts:\\n{}\\n'.format(Counter(y_train)))\nprint('Charged Off\/Fully Paid ratio:{:.2f}\\n'.format(Counter(y_train)[1]\/Counter(y_train)[0]))\n\n\nimport xgboost as xgb\nfrom sklearn.metrics import classification_report, confusion_matrix\nxgb_clf = xgb.XGBClassifier().fit(X_train, y_train)\nxgb_clf.score(X_test, y_test)\nxgb_pred = xgb_clf.predict(X_test)\nprint('Confusion Matrix\\n')\nprint(confusion_matrix(y_test, xgb_pred))\nprint('Classification Report\\n')\nprint(classification_report(y_test, xgb_pred))","46a64879":"df_sample=pd.concat([df[df.Charged_Off==1].sample(349716),df[df.Charged_Off==0].sample(349716)], ignore_index=True)\ndf_sorted= df_sample.sort_values('issue_d', ignore_index=True)\nX = df_sorted.drop('Charged_Off',axis=1)\ny = df_sorted['Charged_Off']\n\ntrain_pct_index = int(0.8 * len(X))\nX_train, X_test = X[:train_pct_index], X[train_pct_index:]\ny_train, y_test = y[:train_pct_index], y[train_pct_index:]\n\n# print(df_sorted.head(),'\\n')\n# print(df_sorted.tail(),'\\n')\n\nprint('df shape     :{}'.format(df_sorted.shape))\nprint('X_train shape:{}'.format(X_train.shape))\nprint('y_train shape:{}'.format(y_train.shape))\nprint('X_test shape :{}'.format(X_test.shape))\nprint('y_test shape :{}\\n'.format(y_test.shape))\nprint('Target Value Counts:\\n{}\\n'.format(Counter(y_train)))\nprint('Charged Off\/Fully Paid ratio:{:.2f}\\n'.format(Counter(y_train)[1]\/Counter(y_train)[0]))\n\n\nfrom lightgbm import LGBMClassifier\nclf = LGBMClassifier(\n            nthread=4,\n            n_estimators=10000,\n            learning_rate=0.02,\n            num_leaves=32,\n            colsample_bytree=0.9497036,\n            subsample=0.8715623,\n            max_depth=8,\n            reg_alpha=0.04,\n            reg_lambda=0.073,\n            min_split_gain=0.0222415,\n            min_child_weight=40,\n            silent=-1,\n            verbose=-1,\n            )\nclf.fit(X_train, y_train, eval_set=[(X_train, y_train), (X_test, y_test)], \n            eval_metric= 'auc', verbose= 1000, early_stopping_rounds= 200)\nclf_pred = clf.predict(X_test)\nprint('Confusion Matrix\\n')\nprint(confusion_matrix(y_test, clf_pred))\nprint('Classification Report\\n')\nprint(classification_report(y_test, clf_pred))","50fb9d3c":"from yellowbrick.classifier import ClassificationReport\n\n\n\n# Specify the target classes\nclasses = [0,1]\n\n# Instantiate the classification model and visualizer\nmodel = LGBMClassifier(\n            nthread=4,\n            n_estimators=10000,\n            learning_rate=0.02,\n            num_leaves=32,\n            colsample_bytree=0.9497036,\n            subsample=0.8715623,\n            max_depth=8,\n            reg_alpha=0.04,\n            reg_lambda=0.073,\n            min_split_gain=0.0222415,\n            min_child_weight=40,\n            silent=-1,\n            verbose=-1,\n            )\nvisualizer = ClassificationReport(model, classes=classes, support=True)\n\nvisualizer.fit(X_train, y_train)        # Fit the visualizer and the model\nvisualizer.score(X_test, y_test);        # Evaluate the model on the test data\n# visualizer.show()                       # Finalize and show the figure","ca1babc7":"cf_matrix = confusion_matrix(y_test, clf_pred)\nsns.heatmap(cf_matrix, linewidths=1, annot=True, fmt='g')\nplt.title('Confusion Matrix');","161b3f63":"# Lending Club Credit Risk Analysis","a16a6915":"### Selecting Most Recent Data for Validation Set, Whole Dataset","0fbd076b":"#### XGBOOST SMOTE Oversampling, Charged Off\/Fully Paid 1\/1 ratio","1c31b3ff":"### Neural Networks","73b81603":"### Working with Whole Dataset","25521275":"### Random Forest Tuning","1348e4c2":"Combining none, any and other categories with rent","bc448435":"### XGBOOST Classifier","c4209631":"#### XGBOOST Undersampling","e4e84275":"### LightGBM Classifier","29e3f28a":"**Sully  \n28th April, 2021**","502cd40d":"Feature Engineering, Creating Fico Range, using Fico range high and low","27189ab8":"**Creating a new column as target, labeling as 0 and 1 as Charged Off**","360e507e":"#### XGBOOST SMOTE Oversampling, Charged Off\/Fully Paid 40% ratio","5bcbe45b":"**Down Sampling for model testing, Selecting most recent 3 years**","6d477879":"### Scaling","f9988dd2":"**Describe Numerical Features**","7d8a005f":"Very low percentage missing values, so we can drop some of them","c1d287dc":"**Creating a function for Data Description**","ee1dc084":"### Exploratory Data Analysis","7d080336":"Feature Engineering","74d73706":"Creating a Scanning DF for examining dataset, before working on it, reading first 10 K rows","714ad58b":"Data Pre-Processing","46dbbe1c":"#### Dropping loan status column, labeling Charged Off as 1 and Fully Paid as 0","de8459e8":"Employment Title various, not a significant factor, needs time for data cleaning","d3b222e4":"### Feature Selection","46a66933":"Selecting Fully Paid and Charged Off Rows  \nMore than 1 million Current loans, we can't use them, we don't know yet the output","9f71b63f":"**One Hot Encoding, changing categorical values into numeric**","8368148d":"Dropping Missing Values","fd3e9ba4":"### Data Cleaning","a3c77692":"Anomaly in Iowa, let's focus on it","1d927d2b":"There are only two cases, that's why portion is high. Other States are more or less similar. We can drop that feature","f681a810":"loan_amount and installment are highly correlated. Since \nloan_amount has higher correlation, it will be kept, installment will be dropped\n\nSimilarly between Total acc and open acc, total acc will be dropped\n\nBetween pub rec and pub rec bankruptcies, pub rec will be dropped\n\nFico Range High and Low fully correlated, will create a new feature instead of both","7dea9ceb":"#### XGBOOST Imbalanced Whole Dataset, Without Sampling","e336b204":"Taking only year of Issue Date Column","33dda07c":"### LightGBM Tuning","97c6dcdb":"**Target Column Value Distribution**","7cba2747":"### Reading Whole Dataset with Selected Features","e8d3235f":"### Importing Libraries, Reading Data","03d44dbf":"Below features selected according to;  \n-Domain search,   \n-Correlation Check,  \n-Relation with target value..  ","f9a85cea":"Removing Percentage symbol from related columns","19661f54":"Taking only numerical part of term feature","5113c6a2":"**Checking for Missing Values**","6ee96a3c":"Title and purpose similar features, dropping title","c43dbd09":"### XGBOOST Tuning","7a151ea4":"Data Description File","6d4d29fc":"#### LightGBM Tuned Undersampling","3075d6ad":"### Model Building, Testing Different Models","33214088":"**Subgrade includes necessary info, dropping grade**","2b10766b":"### Random Forest Classifier","ed6982fc":"No significant change in years for target ","3dcf8ca6":"Taking only year of Earliest Credit Year Column","2fbfb8b7":"**Correlation Check**"}}