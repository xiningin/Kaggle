{"cell_type":{"b977f737":"code","fbd49506":"code","4e99fb56":"code","eaf47e86":"code","501d5495":"code","0be8c8bf":"code","cae9ce2d":"code","4f1374a0":"code","5e324f0a":"code","0e3e751d":"code","9edb8082":"code","f0cba24d":"code","3b9a1ff8":"code","55d8e202":"code","29890feb":"code","ec9df26b":"code","01066ca2":"code","e19ab288":"code","575363e0":"code","4fe96e69":"code","dd5d9f68":"code","cb8961ec":"code","2ee6c681":"code","fa3e0682":"code","d34e2989":"code","9be49a17":"code","b3046acd":"code","ff8bd384":"code","3cedc464":"code","4123a24b":"code","9e958e28":"code","5871a600":"markdown","1283c949":"markdown","a39c7f1c":"markdown","ed99af35":"markdown","a1407efb":"markdown","31d7e549":"markdown","736509c1":"markdown","a4ea064c":"markdown","590f337f":"markdown","1b991004":"markdown","221fd88f":"markdown","0c8a6aa4":"markdown","f7b75ee7":"markdown","98b6b46b":"markdown","1e119367":"markdown","01960bec":"markdown","e25d3826":"markdown","146cbb48":"markdown","03841eaf":"markdown","d4be5ad1":"markdown","54b5f330":"markdown","0d90dec3":"markdown"},"source":{"b977f737":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected = True)\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\nfrom datetime import datetime","fbd49506":"code_df = pd.read_csv('..\/input\/country-code\/country_code.csv',  usecols=['Country_name', 'code_3digit'])\ncode_df.head()","4e99fb56":"games = pd.read_csv('..\/input\/international-football-results-from-1872-to-2017\/results.csv')\n#Drop some NA games, still to be played!\ngames.dropna(inplace = True)\nprint(\"Number of Null values : {}\".format(games.isnull().sum().sum()))\n#Nice","eaf47e86":"games['Winner'] = np.where((games['home_score'] > games['away_score']), games['home_team'], np.where((games['home_score'] < games['away_score']), games['away_team'], 'Draw'))\ngames['Loser'] = np.where((games['home_score'] > games['away_score']), games['away_team'], np.where((games['home_score'] < games['away_score']), games['home_team'], 'Draw'))\n\ngames['Year'] = games['date'].apply(lambda date : int(date.split('-')[0]))\ngames['Month'] = games['date'].apply(lambda date : int(date.split('-')[1]))\ngames['Day'] = games['date'].apply(lambda date : int(date.split('-')[2]))\ngames['Date'] = games['date'].apply(lambda date : pd.to_datetime(date))","501d5495":"games.tail()","0be8c8bf":"fifa_ranking = pd.read_csv('..\/input\/fifaworldranking\/fifa_ranking-2021-05-27.csv')\nfifa_ranking = fifa_ranking[fifa_ranking['rank_date'] >= '1999-12-22']","cae9ce2d":"ranking_df = pd.pivot_table(data = fifa_ranking, \n                            values = 'total_points',\n                            index = 'country_full',\n                            columns = 'rank_date').fillna(0.0)\nranking_df.head()","4f1374a0":"best_ranks = ranking_df.loc[ranking_df['2021-05-27'].sort_values(ascending = False)[:10].index]\nfig = go.Figure()\n\nfor i in range(len(best_ranks.values)):\n    fig.add_trace(go.Scatter(x = best_ranks.columns, \n                             y = best_ranks.iloc[i],\n                             name = best_ranks.index[i]))\n    \nfig.update_layout(\n    title=\"Evolution of the FIFA Ranking for today\\'s 10 best teams\",\n    yaxis_title=\"Points\"\n)\nfig.show()","5e324f0a":"real_world_champion = games.iloc[1]['Winner'] # Game 0 is a draw\nday_one = games.iloc[1]['Date'] # Game 0 is a draw\nchampions = [real_world_champion]\ndates = [day_one]\nchampions_time = {}\n\nfor i in range(len(games)):\n    if games.iloc[i].Loser == real_world_champion:\n        if real_world_champion in champions_time:\n            champions_time[real_world_champion] += (games.loc[i, 'Date'] - dates[-1]).days\n        else:\n            champions_time[real_world_champion] = (games.loc[i, 'Date'] - dates[-1]).days\n        real_world_champion = games.loc[i, 'Winner']\n        champions.append(real_world_champion)\n        dates.append(games.loc[i, 'Date'])\nchampions_time[real_world_champion] += (datetime.now() - dates[-1]).days\ncountries_df = pd.DataFrame.from_dict(champions_time, orient = 'index', columns=['Days champion'])\n\nprint(\" First unofficial world champion : {} \\n Current unofficial world champion : {}\".format(champions[0], real_world_champion))","0e3e751d":"def return_country_code(con):\n    if con in code_df['Country_name'].values:\n        return code_df[code_df['Country_name'] == con]['code_3digit'].values[0]\n    elif con == 'United States':\n        return code_df[code_df['Country_name'] == 'United States of America']['code_3digit'].values[0]\n    elif con == 'Russia': \n        return code_df[code_df['Country_name'] == 'Russian Federation']['code_3digit'].values[0]\n    elif con == 'South Korea': \n        return code_df[code_df['Country_name'] == 'Korea (South)']['code_3digit'].values[0]\n    elif con == 'Republic of Ireland': \n        return code_df[code_df['Country_name'] == 'Ireland']['code_3digit'].values[0]\n    elif con == 'North Korea': \n        return code_df[code_df['Country_name'] == 'Korea (North)']['code_3digit'].values[0]\n    elif con == 'Venezuela': \n        return code_df[code_df['Country_name'] == 'Venezuela (Bolivarian Republic)']['code_3digit'].values[0]\n    elif con == 'China PR': \n        return code_df[code_df['Country_name'] == 'China']['code_3digit'].values[0]\n\ncountries_df['Country'] = countries_df.index\ncountries_df['Code'] = countries_df['Country'].apply(return_country_code)\nuk_df = pd.DataFrame([[(countries_df.loc['England']['Days champion'] +  countries_df.loc['Scotland']['Days champion'] + countries_df.loc['Northern Ireland']['Days champion'] + countries_df.loc['Wales']['Days champion']) \/ 4,\n                          'United Kingdom',\n                           code_df[code_df['Country_name'] == 'United Kingdom']['code_3digit'].values[0]\n                         ]], \n                         index = ['United Kingdom'], \n                         columns = ['Days champion', \"Country\", 'Code'])\nfinal_uc_df = countries_df.append(uk_df).dropna().sort_values('Days champion', ascending = False)\nfinal_uc_df.head()","9edb8082":"data=dict(\n    type = 'choropleth',\n    locations = final_uc_df['Code'],\n    z = final_uc_df['Days champion'],\n    text = final_uc_df['Country'],\n    colorscale = 'YlOrRd',\n    marker_line_color='darkgray',\n    marker_line_width=0.5,\n    colorbar_title = 'Number of days being unofficial Champions',\n)\n\nlayout = dict(title_text='The Longest Unofficial World Champions',\n    geo=dict(\n        showframe=False,\n        showcoastlines=True,\n        projection_type='equirectangular'\n    ))\n\nfig = go.Figure(data = [data], layout = layout)\niplot(fig)","f0cba24d":"top_uc_df = countries_df.sort_values('Days champion', ascending = False)[:15]\nplt.figure(figsize = (14,4))\nplt.title('The Longest Unofficial World Champions')\nsns.barplot(x=top_uc_df['Country'], y=top_uc_df['Days champion'], palette=\"vlag\")","3b9a1ff8":"df_timeline = []\nfor i in range(len(champions) - 1):\n    df_timeline.append(dict(Task = champions[i], Start=dates[i], Finish=dates[i + 1]))\ndf_timeline.append(dict(Task = champions[-1], Start=dates[-1], Finish=datetime.now()))\nfig = ff.create_gantt(df_timeline, group_tasks=True, title='Timeline of the Unofficial World Champions')\nfig.show()","55d8e202":"games[(games['Winner'] == 'Belarus') & (games['date'] >= '1967-06-04') & (games['date'] <= '1979-07-25')]","29890feb":"def make_stats_df(df):\n    my_columns =  ['Wins', 'Draws', 'Loses', 'Total games', 'Goals scored', 'Goals taken', \n                   'Goals difference', 'World Cup games', 'World Cup wins']\n    data_df = pd.DataFrame(0, index = df['home_team'].append(df['away_team']).unique(), columns = my_columns)\n    \n    for i in range(len(df)):\n        if df.iloc[i]['Winner'] == 'Draw':\n            data_df.loc[df.iloc[i]['home_team']]['Draws'] += 1\n            data_df.loc[df.iloc[i]['away_team']]['Draws'] += 1\n        else:\n            data_df.loc[df.iloc[i]['Winner']]['Wins'] += 1\n            data_df.loc[df.iloc[i]['Loser']]['Loses'] += 1\n        if df.iloc[i]['tournament'] == 'FIFA World Cup':\n            data_df.loc[df.iloc[i]['home_team']]['World Cup games'] += 1\n            data_df.loc[df.iloc[i]['away_team']]['World Cup games'] += 1\n            if df.iloc[i]['Winner'] != 'Draw':\n                data_df.loc[df.iloc[i]['Winner']]['World Cup wins'] += 1\n        data_df.loc[df.iloc[i]['home_team']]['Goals scored'] += df.iloc[i]['home_score']\n        data_df.loc[df.iloc[i]['home_team']]['Goals taken'] += df.iloc[i]['away_score']\n        data_df.loc[df.iloc[i]['away_team']]['Goals scored'] += df.iloc[i]['away_score']\n        data_df.loc[df.iloc[i]['away_team']]['Goals taken'] += df.iloc[i]['home_score']\n\n    data_df['Total games'] = data_df['Wins'] + data_df['Draws'] + data_df['Loses']\n    data_df['Goals difference'] = data_df['Goals scored'] - data_df['Goals taken']\n    data_df['Winning rate'] = data_df['Wins'] \/ data_df['Total games']\n    data_df['Goals per game'] = data_df['Goals scored'] \/ data_df['Total games']\n    data_df['Average difference'] = data_df['Goals difference'] \/ data_df['Total games']\n    data_df['WC Winning rate'] = data_df['World Cup wins'] \/ data_df['World Cup games']\n    return data_df","ec9df26b":"data_df = make_stats_df(games)\n\nplt.figure(figsize = (12,8))\nplt.subplot(311)\nplt.title('International Teams by Winning Rate')\nsns.barplot(x = data_df[data_df['Total games'] >= 100].sort_values('Winning rate', ascending = False).head(10).index, y = data_df[data_df['Total games'] >= 50].sort_values('Winning rate', ascending = False).head(10)['Winning rate'], palette=\"vlag\")\nplt.subplot(312)\nplt.title('International Teams by Total Average Difference')\nsns.barplot(x = data_df[data_df['Total games'] >= 100].sort_values('Average difference', ascending = False).head(10).index, y = data_df[data_df['Total games'] >= 50].sort_values('Average difference', ascending = False).head(10)['Average difference'], palette=\"vlag\")\nplt.subplot(313)\nplt.title('International Teams by Winning Rate at the FIFA World Cup')\nsns.barplot(x = data_df[data_df['World Cup games'] >= 10].sort_values('WC Winning rate', ascending = False).head(10).index, y = data_df[data_df['World Cup games'] >= 10].sort_values('WC Winning rate', ascending = False).head(10)['WC Winning rate'], palette=\"vlag\")\nplt.tight_layout()","01066ca2":"modern_data = make_stats_df(games[(games['Date'] >= pd.to_datetime('07-07-1957')) & (games['tournament'] != 'Friendly')])\n\nplt.figure(figsize = (12,8))\nplt.subplot(211)\nplt.title('International Teams by Winning Rate since 1957')\nsns.barplot(x = modern_data[modern_data['Total games'] >= 100].sort_values('Winning rate', ascending = False).head(10).index, y = modern_data[modern_data['Total games'] >= 50].sort_values('Winning rate', ascending = False).head(10)['Winning rate'], palette=\"vlag\")\nplt.subplot(212)\nplt.title('International Teams by Goal Average since 1957')\nsns.barplot(x = modern_data[modern_data['Total games'] >= 100].sort_values('Average difference', ascending = False).head(10).index, y = modern_data[modern_data['Total games'] >= 50].sort_values('Average difference', ascending = False).head(10)['Average difference'], palette=\"vlag\")","e19ab288":"all_teams = games['home_team'].append(games['away_team']).unique()\nelo_df = pd.DataFrame(0, index = all_teams, columns= range(1870,2020))\n\nmajor_comp = ['UEFA Euro', 'African Cup of Nations', 'Copa Am\u00e9rica', 'AFC Asian Cup', 'UEFA Nations League',\n              'Confederations Cup', 'African Nations Championship', 'CONCACAF Championship', 'Gold Cup',\n             'Pan American Championship', 'Pacific Games', 'Oceania Nations Cup']\nqualif = ['Copa Am\u00e9rica qualification', 'AFC Asian Cup qualification', 'UEFA Euro qualification', \n          'African Cup of Nations qualification', 'FIFA World Cup qualification', 'CONCACAF Championship qualification',\n          'Gold Cup qualification', 'Oceania Nations Cup qualification']\n\ndef def_k(comp):\n    if comp == 'FIFA World Cup':\n        return 60\n    elif comp in major_comp:\n        return 50\n    elif comp in qualif:\n        return 40\n    elif comp == 'Friendly':\n        return 20\n    else:\n        return 30\n\ndef def_g(team_goals, enemy_goals):\n    if team_goals - enemy_goals <= 1:\n        return 1\n    elif team_goals - enemy_goals == 2:\n        return 3\/2\n    elif team_goals - enemy_goals == 3:\n        return 7\/4\n    else:\n        return 7\/4 + (team_goals - enemy_goals - 3)\/8\n\ndef def_w(team, winner):\n    if team == winner:\n        return 1\n    elif winner == 'Draw':\n        return 1\/2\n    else:\n        return 0\n    \ndef def_dr(team_elo, enemy_elo, neutral):\n    if neutral:\n        return team_elo - enemy_elo\n    else: \n        return team_elo - enemy_elo + 100\n\nfor year in range(1871, 2020):\n    elo_df[year] = elo_df[year - 1]\n    for game in games[games['Year'] == year].values:\n        game_series = pd.Series(game, index = games.columns)\n        elo_df.loc[game_series['home_team'], year] += def_k(game_series['tournament']) * def_g(game_series['home_score'], game_series['away_score']) * (def_w(game_series['home_team'], game_series['Winner']) - 1\/(10 **(- def_dr(elo_df.loc[game_series['home_team']][year], elo_df.loc[game_series['away_team']][year], game_series['neutral']) \/ 400) + 1))\n        elo_df.loc[game_series['away_team'], year] += def_k(game_series['tournament']) * def_g(game_series['away_score'], game_series['home_score']) * (def_w(game_series['away_team'], game_series['Winner']) - 1\/(10 **(- def_dr(elo_df.loc[game_series['away_team']][year], elo_df.loc[game_series['home_team']][year], True) \/ 400) + 1))","575363e0":"plt.figure(figsize=(12,4))\nplt.title('Years being #1 ELO team')\nplt.bar(x = elo_df.idxmax().value_counts().index, height = elo_df.idxmax().value_counts().values)\nplt.tight_layout()","4fe96e69":"best_elos = elo_df.loc[elo_df.idxmax().unique()]\nfig = go.Figure(layout = dict(title='ELO Ranking of the best international teams'))\n\nfor i in range(len(best_elos.values)):\n    fig.add_trace(go.Scatter(x = best_elos.columns, \n                             y = best_elos.iloc[i],\n                             name = best_elos.index[i]))\nfig.show()","dd5d9f68":"data_df[data_df['Total games'] >= 150].sort_values('Winning rate').head(10)","cb8961ec":"# The only win of San Marino, out of 167 games !\ngames[games['Winner'] == 'San Marino']","2ee6c681":"# The game with the highest number of goals\ngames[(games['home_score'] + games['away_score']) == (games['home_score'] + games['away_score']).max()]","fa3e0682":"all_teams = games['Loser'].unique() #Only teams which have lost a game\nenemys_df = pd.DataFrame('', index = all_teams[1:], columns = ['Worst enemy'])\nfor country in all_teams[1:]: #We don't take 'Draw'\n    enemys_df.loc[country]['Worst enemy'] = games[games['Loser'] == country]['Winner'].value_counts().index[0]\nenemys_df['Worst enemy'].value_counts().head(10)","d34e2989":"enemys_df.loc[best_elos.index]","9be49a17":"#We exclude teams that haven't win a single game\nwin_streaks = pd.DataFrame('', index = games['Winner'].unique()[1:], columns = ['Longest streak', 'Start of the streak', 'End of the streak', 'End of streak opponent'])\nfor team in games['Winner'].unique()[1:]:\n    team_games = games[(games['home_team'] == team) | (games['away_team'] == team)]\n    team_games['won'] = (team_games['Winner'] == team).apply(int)\n    team_games['series'] = (team_games['won'] != team_games['won'].shift()).cumsum()\n    team_games['streak'] = team_games.groupby(['won', 'series']).cumcount() + 1\n    team_games.loc[team_games['won'] == 0, 'streak'] = 0\n    #Find longest streak\n    win_streaks.loc[team, 'Longest streak'] = team_games['streak'].max()\n    last_win = team_games.loc[team_games['streak'].idxmax()]\n    win_streaks.loc[team, 'Start of the streak'] = str(team_games.loc[(team_games['series'] == last_win['series']) & (team_games['streak'] == 1),'Date'].values[0])[:10]\n    if team_games.loc[(team_games['series'] == last_win['series'] + 1) & (team_games['streak'] == 0),'Date'].values.size == 0:\n        win_streaks.loc[team, 'End of the streak'] = 'Currently on streak'\n        win_streaks.loc[team, 'End of streak opponent'] = 'NA'\n    else:\n        win_streaks.loc[team, 'End of the streak'] = str(team_games.loc[(team_games['series'] == last_win['series'] + 1) & (team_games['streak'] == 0),'Date'].values[0])[:10]\n        win_streaks.loc[team, 'End of streak opponent'] = team_games.loc[(team_games['series'] == last_win['series'] + 1) & (team_games['streak'] == 0),'Winner'].values[0]","b3046acd":"win_streaks.sort_values(by= 'Longest streak', ascending = False).head(10)","ff8bd384":"invincibility_streaks = pd.DataFrame('', index = games['Winner'].unique()[1:], columns = ['Longest streak', 'Start of the streak', 'End of the streak', 'End of streak opponent'])\nfor team in games['Winner'].unique()[1:]:\n    team_games = games[(games['home_team'] == team) | (games['away_team'] == team)]\n    #Only the following condition changes\n    team_games['won'] = (team_games['Loser'] != team).apply(int)\n    team_games['series'] = (team_games['won'] != team_games['won'].shift()).cumsum()\n    team_games['streak'] = team_games.groupby(['won', 'series']).cumcount() + 1\n    team_games.loc[team_games['won'] == 0, 'streak'] = 0\n    #Find longest streak\n    invincibility_streaks.loc[team, 'Longest streak'] = team_games['streak'].max()\n    last_win = team_games.loc[team_games['streak'].idxmax()]\n    invincibility_streaks.loc[team, 'Start of the streak'] = str(team_games.loc[(team_games['series'] == last_win['series']) & (team_games['streak'] == 1),'Date'].values[0])[:10]\n    if team_games.loc[(team_games['series'] == last_win['series'] + 1) & (team_games['streak'] == 0),'Date'].values.size == 0:\n        invincibility_streaks.loc[team, 'End of the streak'] = 'Currently on streak'\n        invincibility_streaks.loc[team, 'End of streak opponent'] = 'NA'\n    else:\n        invincibility_streaks.loc[team, 'End of the streak'] = str(team_games.loc[(team_games['series'] == last_win['series'] + 1) & (team_games['streak'] == 0),'Date'].values[0])[:10]\n        invincibility_streaks.loc[team, 'End of streak opponent'] = team_games.loc[(team_games['series'] == last_win['series'] + 1) & (team_games['streak'] == 0),'Winner'].values[0]","3cedc464":"invincibility_streaks.sort_values(by= 'Longest streak', ascending = False).head(10)","4123a24b":"invincibility_streaks['Country'] = invincibility_streaks.index\ninvincibility_streaks['Code'] = invincibility_streaks['Country'].apply(return_country_code)\ninvincibility_streaks.head()","9e958e28":"invincibility_streaks['text'] = invincibility_streaks['Start of the streak'] + ' - ' + invincibility_streaks['End of the streak']\ndata=dict(\n    type = 'choropleth',\n    locations = invincibility_streaks['Code'],\n    z = invincibility_streaks['Longest streak'],\n    text = invincibility_streaks['text'],\n    colorscale = 'YlOrRd',\n    marker_line_color='darkgray',\n    marker_line_width=0.5,\n    colorbar_title = '#games during longest streak',\n)\n\nlayout = dict(title_text='The Longest Streaks of Invincibility per country',\n    geo=dict(\n        showframe=False,\n        showcoastlines=True,\n        projection_type='equirectangular'\n    ))\n\nfig = go.Figure(data = [data], layout = layout)\niplot(fig)","5871a600":"For the next DataFrame, I was wondering which country were \"worst enemies\", ie. the country that has most beaten another one.","1283c949":"This ranking represents with a higher accuracy the domination periods of the worldwide, or regional football. We see how Spain has dominated football in the late 2000's (let's note that a European Championship took place during this streak!), and Brazil in the mid 90's (winning a World Cup during this streak). We can eventually note that the streak killer team is rarely a top team, but rather an intermediate one. \n\n**Italy might break the record if it doesn't lose its 3 next games (which include the Euro final!)**\n\nWe can show these streaks on a map:","a39c7f1c":"Here, I have plotted every team which had once the best ELO score. More than with other rankings, we see how England\/Scotland dominated the first half of football history, and Brazil the second one.\n\nAs a conclusion for those rankings,  the ELO one is the most adapted to determine the real level of a team. The statistics-based ranking gives us some good indicators, but it should be interpreted with caution, and the Unofficial World Champion one is more fun than accurate.\n\nIn the modern era (1957-Today), it is clear that Brazil has dominated the football world, from this analysis it is the best international football team. Some other teams can also be cited because of their high rankings, such as Germany, Spain or France.","ed99af35":"The peaks in 2006 and 2018 are not a mistake in the data, and may be due to the rankings evaluation method, or may be due to the World Cups that happened at the same time ... Let's note how Belgium became more and more strong years after years.\n\nNow, let's code and compare this ranking to some home-made ones !","a1407efb":"We see the domination of **United Kingdom** - and particularly **Scotland**, which is historically the *longest Unofficial Champion* - with its four teams being in the top 5 of the longest champions!\n\nPortugal has only 398 days of domination, France 1093 and Brazil 1466.\n\nHere, I had difficulties to plot a timeline representing the order of the Unofficial World Champions. In the following Gantt chart, we can however see the variety of teams which were unofficial champions, and how quick the title can be given from one team to another : indeed, this title is given as soon as the unofficial world champion is defeated!","31d7e549":"## Ranking 0 - Official FIFA Ranking\n<a id = '#ranking-0'><\/a>\n\nThis ranking is regularly criticized as biased and less accurate than ELO ratings (see ranking III), but gives us already an idea of the strength of each team.\n\nUnfortunately, I can't find data on Kaggle for FIFA Rankings after 2018, but as of May 2021, the top 5 teams are **Belgium** (1783 points), **France** (1757 points), **Brazil** (1743 points), **England** (1687 points) and **Portugal** (1666 points).\n[Source](https:\/\/www.fifa.com\/fifa-world-ranking\/ranking-table\/men\/)","736509c1":"Let's visualize the evolution of the rankings for the first 10 Teams in the 21st Century:","a4ea064c":"We can see that some \"hate\" between teams is here highlighted, such as the one between France and Belgium, or between Brazil and Argentina!\n\nTo conclude this study, let's look at the longest winning streaks for each team in the dataset, starting with strict winning streaks (ie no draws):","590f337f":"## Ranking II - *Joga Bonito* Champion\n<a id='ranking-2'><\/a>\nFor this ranking, I will see which teams have better stats, only taking into account the scores of each game.","1b991004":"# Which is the Best International Football team ?\nHi !\nFrom this question, I have decided to explore some datasets and try to find some interesting statistics\/rankings for the best (and worst) international teams: \n* [**International football results from 1872 to 2019**](https:\/\/www.kaggle.com\/martj42\/international-football-results-from-1872-to-2017), by *Mart J\u00fcrisoo*\n* [**FIFA World Ranking 1992-2021**](https:\/\/www.kaggle.com\/cashncarry\/fifaworldranking), by *Alex*\n* [**Country Code**](https:\/\/www.kaggle.com\/koki25ando\/country-code), by *Koki Ando*\n\nAs a reminder, the current FIFA World Champion is **France**, and the country which has most won this trophy is **Brazil**.\n\nI'm a football fan but I will try to give observations and comments as impartial as possible. \n\nThis notebook is updated as of July, 9th 2021 (waiting for the Euro and Copa america winner !)\n\nFeel free to leave a comment or upvote if you liked this kernel ! :)\n\n### Table of Contents\n1. [Data Preprocessing](#data-preprocessing)\n2. [Ranking 0 - Official FIFA Ranking](#ranking-0)\n3. [Ranking I - Unofficial World Champion](#ranking-1)\n4. [Ranking II - *Joga Bonito* Champion](#ranking-2)\n5. [Ranking III - ELO Ranking](#ranking-3)\n6. [Some interesting facts](#facts)","221fd88f":"We observe some teams that we aren't used to see in international top rankings (New Caledonia, Iran, Fiji). We could deduce that the regional games have a huge impact on that ranking, but not taking them into account would eliminate some teams which don't play international tournaments. Thus, this ranking should be interpreted with caution. We can however see some clear indicators of the dominance of some teams, such as Germany, Spain or Brazil.","0c8a6aa4":"Oh ...\n\nThey have only played 3 games during this period ! Obviously, this is the main disadvantage of such a ranking, not mentioning its \"simplicity\" ...","f7b75ee7":"## Ranking I - Unofficial World Champion\n<a id = '#ranking-1'><\/a>\nThe First [Unofficial World Champion](https:\/\/en.wikipedia.org\/wiki\/Unofficial_Football_World_Championships) was England, who won a football game for the first time on the 08th of August, 1873. The team which beat it first was then Unofficial World Champion, and so on ...","98b6b46b":"If we exclude Padania (North of Italy), which doesn't correspond to a country, South Korea team is the worst enemy of 8 other countries ! Let's see which is the worst enemy of the teams that once were #1 in the ELO ranking:","1e119367":"## Data Preprocessing\n<a id = '#data-preprocessing'><\/a>","01960bec":"That's it for this notebook, I plan to add new graphs and stats as soon as I have more ideas !!","e25d3826":"# Some interesting facts\n<a id = 'facts'><\/a>\nHere are some additional fun facts that I've extracted from the international games dataset.\n\nLet's start with the teams having the lowest winning rate:","146cbb48":"See how the United Kingdom teams have dominated the first 60 years of this sport? Also, congratulations to **Belarus** with the longest domination, **4434** days, or more than 12 years!","03841eaf":"Congrats to **Italy** which is, as of July 2021, the Unofficial World Champion ! \n\nLet's see what we can learn from this ranking. Here I decided to create the '*United Kingdom*' team which is the mean of the 4 national teams (England, Northern Ireland, Scotland and Wales) results, in order to plot it on the Plotly map. I have also made a few tweaks in the countries names to make them all plottable","d4be5ad1":"Congratulations to Mauritius, with 17 wins in a row from 1947 to 1955. Let's also note the impressive series of Spain, France and Brazil, at a time when each of this teams dominated the worldwide football. At a local level, Padania (North of Italy) also had a very long streak from 2008 to 2014.\n\nHowever, this table doesn't seem to show which were the best teams, having local teams (Padania, Guyana) and teams winning a lot of game at a regional scale (Mauritius, Australia, ...). Let's now look at the invincibility streaks, to see if we can get some interesting insights:","54b5f330":"## Ranking III - ELO Ranking\n<a id='ranking-3'><\/a>\n[ELO Ranking](https:\/\/en.wikipedia.org\/wiki\/World_Football_Elo_Ratings) is based on the ELO Rating system and could lead to more accurate rankings. \n\nTo compute it, I've separated international games by competitions, distinguishing the major ones and their qualification tournaments from the other games. I'm not sure of the calculations, and I think some data is missing in the dataset (particularly the Olympic Games, which is a major competition), thus leading to some differences with the Wikipedia ranking, but the rankings I have obtained look reliable.","0d90dec3":"The last ranking seems to be the more accurate one, but the fact that it only relies on World Cup Games is a potential bias, some teams are excluded, others have only played a small number of games ...\n\nHere are two other rankings, only taking into account games of *modern football*. I chose the 7th July, 1957 to be the first day of this era, which corresponds to the first international game of Pel\u00e9 with Brazil. I also excluded friendly games, as teams could sometimes make less effort or try original strategies there."}}