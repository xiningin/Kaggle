{"cell_type":{"7ba9b119":"code","a9e989c5":"markdown"},"source":{"7ba9b119":"%%writefile 'agent_tree.py'\n\nimport random\nimport pandas as pd\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.tree import DecisionTreeClassifier # faster than random forest\n\n# globals\nconf_lookback = 20\nconf_min_train = 10\nlist_agent = [] # agent hand\nlist_opp = [] # opponent hand\ndf_lookback = pd.DataFrame() # re-init the no of cols later (easier to debug)\nmodel = DecisionTreeClassifier()\n\n# calc score (this probably can be done in a neat 1 liner)\ndef _get_score(a, o):\n    if a == o: return 0 # draw\n    elif ((a + 1) % 3) == o: return -1 # lose\n    else: return 1 # win\n\n# agent\ndef agent_tree(obs, config):\n    \n    global dict_results\n    global conf_lookback\n    global conf_min_train\n    global list_agent\n    global list_opp\n    global df_lookback\n    \n    # default hand\n    hand = random.randint(0,2)\n    \n    # check past first round\n    if obs['step'] >= 1:\n        \n        # populate last opponent result\n        list_opp.append(obs['lastOpponentAction'])\n        \n        # check if past lookback point (otherwise some data will be missing on early records)\n        if obs['step'] > (conf_lookback):\n            \n            # get lookback \/ reverse\n            opp_lookback = list_opp[-(conf_lookback + 1):-1][::-1]\n            agent_lookback = list_agent[-(conf_lookback + 1):-1][::-1]\n\n            # get dummies \/ flatten\n            list_dummies = [[0,0], [0,1], [1,0]]\n            opp_lookback_dummies = [a for b in opp_lookback for a in (list_dummies[b][0], list_dummies[b][1])]\n            agent_lookback_dummies = [a for b in agent_lookback for a in (list_dummies[b][0], list_dummies[b][1])]\n            \n            # get form\n            form = [_get_score(a, o) for a, o in zip(agent_lookback, opp_lookback)]\n            \n            # count wdl\n            wdl = [Counter(form)[1], Counter(form)[0], Counter(form)[-1]] # based on scores (1=win, 0=draw, -1=lose)\n            \n            # construct lookback fields (as code was getting messy)\n            train_data = opp_lookback_dummies + agent_lookback_dummies + form + wdl\n            \n            # init lookback cols\n            if df_lookback.shape[1] == 0:\n                df_lookback = pd.DataFrame(columns=range(0,len(train_data)))\n            \n            # append lookback to df \/ get classifiers\n            df_lookback.loc[len(df_lookback)] = train_data\n        \n        # check if obtained enough data to make a prediction\n        if obs['step'] >= (conf_lookback + conf_min_train): # note first x records wont have full lookback\n            \n            # prediction lookback\n            opp_pred = list_opp[-conf_lookback:][::-1]\n            agent_pred = list_agent[-conf_lookback:][::-1]\n            \n            # prediction dummies\n            opp_pred_dummies = [a for b in opp_pred for a in (list_dummies[b][0], list_dummies[b][1])]\n            agent_pred_dummies = [a for b in agent_pred for a in (list_dummies[b][0], list_dummies[b][1])]\n            \n            # prediction form\n            form_pred = [_get_score(a, o) for a, o in zip(agent_pred, opp_pred)]\n            \n            # count wdl for predictions\n            wdl_pred = [Counter(form_pred)[1], Counter(form_pred)[0], Counter(form_pred)[-1]]\n            \n            # construct prediction data\n            pred_data = opp_pred_dummies + agent_pred_dummies + form_pred + wdl_pred\n            \n            # classifiers \/ fit \/ predict \/ offset hand\n            list_x = list_opp[-len(df_lookback):]\n            \n            # fit \/ predict\n            model.fit(df_lookback, np.array(list_x))\n            pred_hand = model.predict(np.array(pred_data).reshape(1, -1))\n            \n            # offset predictions to win\n            hand = (int(pred_hand[0]) + 1) % 3\n            \n            # counter predict\n            if Counter(form_pred[:3])[0] == 3: hand = (hand + 1) % 3 # 3 draws\n            elif Counter(form_pred[:3])[-1] == 3: hand = (hand + 2) % 3 # 3 losses\n            elif sum(form[:int(round(len(form) * 0.5,0))]) < 0: hand = random.randint(0,2) # getting battered > go random\n            \n    # append my hand\n    list_agent.append(hand)\n        \n    return hand","a9e989c5":"The crooks is to provide the model with:\n* A rolling history of player \/ opponent hands.\n* A running form (win \/ draw \/ loss).\n* A total count of form (wins \/ draws \/ losses).\n\nThen a basic counter that:\n* Uses form to asses if the opponent is predicting my moves.\n* If im getting battered... go random."}}