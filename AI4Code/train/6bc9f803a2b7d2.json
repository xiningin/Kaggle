{"cell_type":{"f92e53dc":"code","723eb33d":"code","5ceb6c2d":"code","500d0138":"code","682d7ce1":"code","5c8c98aa":"code","f606d90e":"code","310dde35":"code","7818e847":"code","dbf03b48":"code","28fd008f":"code","ec24cdbd":"code","83bd41ec":"code","87c6faf8":"code","67d1f4ce":"code","88858f09":"code","246b99a6":"code","7f7f665a":"code","45eacd83":"code","36f8e629":"code","354ca919":"code","94449fcd":"code","eb5ca98e":"code","a03a8288":"markdown","2543d6f2":"markdown"},"source":{"f92e53dc":"#language = \"ita\"\nlanguage = \"eng\"\n\ndisable_debug_logs = True","723eb33d":"#\"\"\" fix the environment path, sometimes needed to load the correct dependencies \"\"\"\n#!bash export PATH=~\/anaconda3\/bin:$PATH","5ceb6c2d":"if language == \"eng\":\n    texts_dic = {\n        #initial choices\n        \"new_session\" : \"NEW WITNESS SESSION\",\n        \"instructions1\" : 'Create a new session or use an existing session ID if the same perpetrator has already been described by other witnesses. <br>'+\n                        'Insert an ID for the witness and select its type. <br>'+\n                        'Insert basic information about the perpetrator aspect, indipendently of the real gender and age. <br>'+\n                        'It is good practice to write accurate notes about all the memories of the suspect, for later evaluation of the result. <br>'+\n                        '<ul><li><b>Active<\/b>: main witness involved in the scene.<\/li>' +\n                        '<li><b>Passive<\/b>: witness who has seen the scene.<\/li>' +\n                        '<li><b>Inactive<\/b>: witness who has seen the perpetrator before the crime happened.<\/li><\/ul>',\n        \"session\" : \"SESSION\",\n        \"type_session\" : \"Type session id\",\n        \"witness\" : \"WITNESS\",\n        \"type_witness\" : \"Type witness name\",\n        \"session_name\" : \"Default session\",\n        \"witness_name\" : \"Witness 01\",\n        \"perpetrator_note\" : \"Any note about the perpetrator\",\n        \"witness_type\" : \"WITNESS TYPE\",\n        \"active\" : \"ACTIVE\",\n        \"passive\" : \"PASSIVE\",\n        \"inactive\" : \"INACTIVE\",\n        \"suspect_info\" : \"SUSPECT PRELIMINARY INFORMATION\",\n        \"male\" : \"MALE\",\n        \"female\" : \"FEMALE\",\n        \"not_sure_gender\": \"NOT SURE\",\n        \"young\" : \"YOUNG (<40)\",\n        \"old\" : \"OLD (>40)\",\n        \"not_sure_age\" : \"NOT SURE\",\n        \"continue\" : \"CONTINUE\",\n        \"merge_sessions\" : \"MERGE EXISTING SESSIONS\",\n        \"instructions2\" : 'Import a session by using its existing session ID. All the witnesses\\' creations will be used to generate an animated representation of the perpetrator. <br>'+\n            'Check the \"Weighted\" option to assign different importance to active, inactive and passive witnesses.',\n        \"import_sessions\" : \"IMPORT SESSIONS\",\n        \"weighted\" : \"WEIGHTED\",\n        \"import_session\" : \"IMPORT SESSION\",\n        \"instructions3\" : \"Import a string representing a list of latent vectors. Useful if the user could not save the h5 and GIF files, to load a backup, or to re-edit a composite\",\n        \"import_string\" : \"IMPORT TO EDIT\",\n        \"import_string_placeholder\" : \"Paste string saved by the user\",\n        \"import\" : \"IMPORT TO EXPORT\",\n\n        #main gui\n        \"instructions4\" : \"Select the face(s) most similar to the target and evolve\",\n        \"restart\" : \"RESTART\",\n        \"random_all\" : \"RANDOMIZE ALL\",\n        \"finish\" : \"FINISH\",\n        \"instructions5\" : '<b>Instructions:<\/b> Select the amount of changes based on the similarity of the chosen face(s) to the target suspect. <br>'+\n                'The amount automatically decreases as you proceed, but you can always set it manually.<br>'+\n                'Choose one of the available mutation types:<br>'+\n                '<ul><li><b>Random changes<\/b> randomly mutates faces. This method is NOT feature-based, so it does NOT minimize changes on the locked features;<br>'+\n                    'Use it when you want to generically change the selected faces, if you are not sure which traits were different.<br><\/li>'+\n                '<li><b>One unlocked feature<\/b> randomly mutates one feature chosen among the unlocked ones, minimizing changes on the locked ones;<br><\/li>'+\n                '<li><b>Every unlocked feature<\/b> randomly mutates every unlocked feature, minimizing changes on the locked ones.<br><\/li><\/ul>'+\n                '<b>SELECT<\/b> one or more faces to keep and use as basis for the evolution, and <b>EVOLVE<\/b> to re-generate others based on the choice. <br>'+\n                '<b>KEEP<\/b> <i class=\"fa fa-lock\" aria-hidden=\"true\"><\/i> faces by locking them, so that they will neither be changed, nor used as basis for the evolution. <br>'+\n                '<b>EDIT<\/b> <i class=\"fa fa-wrench\" aria-hidden=\"true\"><\/i> opens an advanced panel for manual feature-based editing of a single picture. <br>'+\n                '<br>'+\n                'Press feature names to <b>LOCK<\/b> them. Press <b>SMART LOCK<\/b> <i class=\"fa fa-user-lock\" aria-hidden=\"true\"><\/i> to also lock correlated features.<br>'+\n                'Smart lock only takes mathematical correlation into account, so double check what has been locked\/unlocked and manually adjust after using it.<br>'+\n                'Locked features minimize changes of those traits of the faces when they are mutated using \"Single feature\" and \"All features\"<br>'+\n                'Press <b>FINISH<\/b> to visualize the resulting animation.',\n        \"change_amount\" : \"CHANGES AMOUNT:\",\n        \"mutation\" : \"MUTATION:\",\n        \"select_mutation\" : \"Select mutation type\",\n        \"random_noise\" : \"Random changes\",\n        \"single_feature\" : \"One unlocked feature\",\n        \"all_features\" : \"Every unlocked fature\",\n        \"undo\" : \"UNDO\",\n        \"backup\" : \"BACKUP ALL\",\n        \"backup_selection\" : \"BACKUP SELECTED\",\n        \"backup_preset\" : \"BACKUP CURRENT\",\n        \"evolve\" : \"EVOLVE\",\n        \"select\" : \"SELECT\",\n        \"random\" : \"RANDOM\",\n        \"edit\" : \"EDIT\",\n        \"all\" : \"ALL\",\n        \"lock_features\" : \"LOCK FEATURES:\",\n        \"category0\" : \"General\",\n        \"category1\" : \"Shapes\",\n        \"category2\" : \"Beard & Moustache\",\n        \"category3\" : \"Hair & Eyebrows\",\n        \"category4\" : \"Accessories\",\n\n        #ADV gui\n        \"instructions6\" : \"Advanced edit. Modify single features on the face.\",\n        \"instructions7\" : '<b>Instruction for advanced edit:<\/b>You can modify single features on the chosen face.<br>' +\n                        'Press <b>+<\/b>\/<b>-<\/b> to adjust features. Press the feature name to LOCK it. In this way you will avoid correlated changes.<br>'+\n                        'For example, increase \"Beard\" while \"Goatee\" is locked won\\'t add the goatee.<br>'+\n                        'The button <b>SMART LOCK<\/b> <i class=\"fa fa-user-lock\" aria-hidden=\"true\"><\/i> locks and unlocks correlated features. For example, if \"Male\" is locked, then also \"Makeup\" will be locked.<br>'+\n                        '<b>SAVE PRESET<\/b> saves the current face and it is possible to reset it afterwards by clicking on <b>LOAD PRESET<\/b>. <b>SAVE<\/b> and <b>CANCEL<\/b> allow to go back to the previous window.',\n        \"random_generate\" : \"RANDOM GENERATE\",\n        \"save\" : \"SAVE\",\n        \"cancel\" : \"CANCEL\",\n        \"before\" : \"ORIGINAL:\",\n        \"after\" : \"CURRENT CHANGES:\",\n        \"save_preset\" : \"SAVE PRESET\",\n        \"load_preset\" : \"LOAD PRESET \",\n        \"default_presets\" : \"No saved presets.\",\n        \"restore_original\" : \"RESTORE ORIGINAL\",\n        \n        #final gui\n        \"export_gif\" : \"EXPORT GIF\",\n        \"export_frame\" : \"EXPORT IMAGE\",\n        \"go_back\" : \"GO BACK\",\n\n        #tooltips\n        #TODO toggle buttons #add import and modify and Lock buttons\n        \"continue_button\": \"Continue to the next step.\",\n        \"import_session_button\" : \"Use the id of a previously exported session to merge its resulting sketches into an animation.\",\n        \"weighted_button\" : \"Check this option to assign different weight to different witness types (active>inactive>passive).\",\n        \"import_button\" : \"Click to import the session\/string and go to the animation.\",\n        \"import_and_modify_button\": \"Click to import the session\/string and go to the evolution window.\",\n        \"restart_button\" : \"Go back to the previous step.\",\n        \"random_button\": \"Randomly recreates all the images, except the locked\/selected ones.\",\n        \"backup_button\": \"Export a backup of the current images.\",\n        \"backup_selection_button\": \"Export a backup of the currently selected images.\",\n        \"backup_preset_button\": \"Export a backup of the currently showed images.\",\n        \"finish_button\" : \"Go to final step where a GIF is created.\",\n        \"undo_button\": \"Undo the last action.\",\n        \"evolve_button\" : \"Evolves the selected images and replaces the other ones (if not locked) with their evolution, according to changes amount and mutation type.\",\n        \"select_button\": \"Selects images for evolution.\",\n        \"lock_image_button\": \"Do not overwrite the image when evolving.\",\n        \"edit_button\" : \"Go to advance editing.\",\n        \"lock_image_button\": \"Lock the image to not change it during evolution.\",\n        \"lock_features_button\" : \"Lock all the features.\",\n        \"unlock_features_button\": \"Unlock all the features.\",\n        \"random_generate_button\" : \"Generate a random picture.\",\n        \"save_button\": \"Go back and save changes.\",\n        \"cancel_button\" : \"Go back without saving changes.\",\n        \"save_preset_button\" : \"Save a new preset.\",\n        \"restore_original_button\" : \"Restore original image.\",\n        \"restore_preset_button\" : \"Restore selected preset.\",\n        \"lock_unlock_feature_button\" : 'Lock\/Unlock \"{}\" feature.',\n        \"minus_button\" : \"Decrease feature by the selected amount.\",\n        \"plus_button\" : \"Increase feature by the selected amount.\",\n        \"magic_button\" : 'Smart lock\/unlock: automatically locks\/unlocks this feature ({}) and all the correlated ones.',\n        \"export_gif_button\" : \"Export GIF and get related string.\",\n        \"export_image_button\" : \"Export image and get related string.\",\n        \"go_back_button\" : \"Go back to previous step.\",\n        \n        #console messages\n        \n        #popups\n        \"error_no_images_selected\" : \"Select at least one image to evolve.\",\n        \"info_save_vectors_to_share\": \"Save latent vectors to share.\",\n        \"modifying_lock_feature\": \"Unlock the feature to modify it.\",\n        \"cannot_undo\" : \"Cannot undo.\",\n        \"select_images\" : \"Select at least one image.\",\n        \"popup_info_mutation0\" : \"Note that RANDOM CHANGES mutation is NOT feature dependent. This means it does NOT involve feature-based changes, and it does NOT keep locked features unchanged.\",\n        \"popup_info_mutation1\" : \"Note that ONE UNLOCKED FEATURE mutation is feature dependant. Every resulting image will be computed by increasing or decreasing only ONE feature, randomly selected among all the unlocked features.\"+\n                                \"This does NOT imply that the other features remain unchanged, since they may be correlated. \"+\n                                \"It is suggested to LOCK every feature that matches the target, to MINIMIZE changes on them.\",\n        \"popup_info_mutation2\" : \"Note that EVERY UNLOCKED FEATURE mutation is feature dependant. Every resulting image will be computed by increasing or decreasing EVERY UNLOCKED feature\"+\n                                \"It is suggested to LOCK every feature that matches the target, to MINIMIZE changes on them.\",\n        \"error_no_mutation_selected\" : \"Select the mutation type you intend to apply. (Dropdown below the EVOLVE button)\",\n        \"popup_all_features_locked\" : \"All features are locked. Cannot apply feature-based mutation. Unlock at least one feature or choose RANDOM CHANGES mutation.\",\n    }\n\nelif language == \"ita\":\n    texts_dic = {\n        #initial choices\n        \"new_session\" : \"NUOVO TESTIMONE\",\n        \"instructions1\" : 'Crea una nuova sessione o usa l\\'ID di una esistente per descrivere un sospettato che \u00e8 gi\u00e0 stato descritto da altri testimoni. <br>'+\n                        'Inserisci un ID per il testimone (NomeCognome) e seleziona il tipo di testimone. <br>'+\n                        'Inserisci le informazioni di base riguardo il sospettato. Basati solo sull\\'aspetto senza considerare l\\'eventuale et\u00e0 e genere reali. <br>'+\n                        'E\\' buona norma prendere nota di tutti i particolari che si ricordano prima di iniziare, in modo da non dimenticarli durante la sessione e valutare il risultato.'+\n                        '<ul><li><b>Active<\/b>: testimone principale convolto nella scena.<\/li>' +\n                        '<li><b>Passive<\/b>: testimone che ha assistito alla scena.<\/li>' +\n                        '<li><b>Inactive<\/b>: testimone che ha visto il colpevole prima che commettesse il crimine.<\/li><\/ul>',\n        \"session\" : 'SESSIONE',\n        \"type_session\" : 'Scrivi l\\'ID della sessione',\n        \"witness\" : 'VITTIMA',\n        \"type_witness\" : 'Scrivi l\\'ID della vittima',\n        \"session_name\" : \"Default session\",\n        \"witness_name\" : \"Witness 01\",\n        \"perpetrator_note\" : \"Note sul sospettato\",\n        \"witness_type\" : \"TIPO DI VITTIMA\",\n        \"active\" : \"ACTIVE\",\n        \"passive\" : \"PASSIVE\",\n        \"inactive\" : \"INACTIVE\",\n        \"suspect_info\" : \"INFORMAZIONI PRELIMINARI SUL SOSPETTATO\",\n        \"male\" : \"UOMO\",\n        \"female\" : \"DONNA\",\n        \"not_sure_gender\": \"NON SAPREI\",\n        \"young\" : \"GIOVANE (<40)\",\n        \"old\" : \"VECCHIO (>40)\",\n        \"not_sure_age\" : \"NON SAPREI\",\n        \"continue\" : \"CONTINUA\",\n        \"merge_sessions\" : \"UNISCI SESSIONI ESISTENTI\",\n        \"instructions2\" : 'Importa i risultati di una sessione usando il suo ID. Le facce generate da tutte le vittime verranno combinate per generare un\\'animazione rappresentante il sospettato. <br>'+\n                        'Seleziona l\\'impostazione \"MEDIA PESATA\" per assegnare una importanza diversa a vittime attive, passive ed inattive.',\n        \"import_sessions\" : \"IMPORTA SESSIONI\",\n        \"weighted\" : \"MEDIA PESATA\",\n        \"import_session\" : \"IMPORTA SESSIONE\",\n        \"instructions3\" : \"Importa una stringa contenente una lista di latent vectors. Usata per debugging e per esportare files da sessioni incomplete.\",\n        \"import_string\" : \"IMPORTA PER MODIFICARE\",\n        \"import_string_placeholder\": \"Incolla la stringa salvata da un'utente\",\n        \"import\" : \"IMPORTA PER ESPORTARE\",\n\n        #main gui\n        \"instructions4\" : 'Selezionare le facce pi\u00f9 simili a quella che si vuole ottenere. Quindi premere \"EVOLVI\".',\n        \"restart\" : 'RIAVVIA',\n        \"random_all\" : 'GENERAZIONE CASUALE',\n        \"finish\" : 'FINE',\n        \"instructions5\" : '<b>Istruzioni evoluzione:<\/b> Seleziona la quantit\u00e0 di cambiamento necessario in base a quanto le facce selezionate sono simili al sospettato.<br>'+\n                        'Il valore scende automaticamente man mano che procedi, ma puoi sistemarlo usando lo slider.<br>'+\n                        'Quindi scegli uno tra i tipi di mutazione disponibili:<br>'+\n                        '<ul><li><b>Cambiamenti casuali<\/b> muta le facce in modo casuale, indipendentemente dalle caratteristiche che le compongono. Per questo motivo NON tiene conto delle<br>'+\n                        'caratteristiche bloccate. E\\' utile se non sai quali caratteristiche possano apportare miglioramenti e vuoi cambiare le facce selezionate in modo generico.<\/li>'+\n                        '<li><b>Una caratteristica non bloccata<\/b> muta una sola caratteristica, scelta casualmente tra quelle non bloccate. I cambiamenti su quelle bloccate saranno minimi;<\/li>'+\n                        '<li><b>Ogni caratteristica non bloccata<\/b> muta ogni caratteristica non bloccata, minimizzando i cambiamenti su quelle bloccate;<\/li><\/ul>'+\n                        '<b>SELEZIONA<\/b> una o pi\u00f9 facce da mantenere ed usare come base per la generazione delle altre. Premi <b>EVOLVI<\/b> per avviare la generazione.<br>' +\n                        'Puoi <b>TENERE<\/b> <i class=\\\"fa fa-lock\\\" aria-hidden=\\\"true\\\"><\/i> delle facce anche senza usarle come base per l\\'evoluzione, per assicurarti di non perderle. <br>'+\n                        'Puoi modificare manualmente un\\'immagine premendo <b>MODIFICA<\/b> <i class=\"fa fa-wrench\" aria-hidden=\"true\"><\/i>. Si aprir\u00e0 una interfaccia per la modifica avanzata di ogni singola feature.<br>' +\n                        '<br>'+\n                        'Premi i nomi delle caratteristiche per <b>BLOCCARLE<\/b>. Premi <b>BLOCCO SMART<\/b> <i class=\"fa fa-user-lock\" aria-hidden=\"true\"><\/i> per bloccare anche quelle correlate.<br>'+\n                        'BLOCCO SMART considera solo la correlazione matematica tra caratteristiche, quindi controlla e sistema le caratteristiche bloccate ogni volta che lo utilizzi.<br>'+\n                        'Le caratteristiche bloccate minimizzano i cambiamenti di quei tratti durante le mutazioni \"Single feature\" e \"All features\"'+\n                        'Premi FINE per visionare ed esportare il risultato',                                              \n        \"change_amount\" : \"QUANTIT\u00c0 DI CAMBIAMENTI:\",\n        \"mutation\" : \"MUTAZIONE:\",\n        \"select_mutation\" : \"Seleziona tipo di mutazione\",\n        \"random_noise\" : \"Cambiamenti casuali\",\n        \"single_feature\" : \"Una caratteristica non bloccata\",\n        \"all_features\" : \"Ogni caratteristica non bloccata\",\n        \"undo\" : \"ANNULLA\",\n        \"backup\" : \"BACKUP TUTTE\",\n        \"backup_selection\" : \"BACKUP SELEZIONATE\",\n        \"backup_preset\" : \"BACKUP MODIFICHE\",\n        \"evolve\" : \"EVOLVI\",\n        \"select\" : \"SELEZIONA\",\n        \"random\" : \"CASUALE\",\n        \"edit\" : \"MODIFICA\",\n        \"all\" : \"TUTTE\",\n        \"lock_features\" : \"BLOCCA CARATTERISTICHE:\",\n        \"category0\" : \"Generali\",\n        \"category1\" : \"Forme\",\n        \"category2\" : \"Barba e baffi\",\n        \"category3\" : \"Capelli e sopracciglia\",\n        \"category4\" : \"Accessori\",\n    \n        #ADV gui\n        \"instructions6\" : 'Modifica avanzata. Agisci manualmente sulle singole caratteristiche.',\n        \"instructions7\" : '<b>Istruzioni modifica avanzata:<\/b>Puoi agire singolarmente sulle caratteristiche del viso. <br>' +\n                        'Premi <b>+<\/b>\/<b>-<\/b> per aumentare o diminuire una caratteristica. <br>' +\n                        'Premi sul nome della caratteristica per BLOCCARLA. In questo modo la modifica di altre features non ricadr\u00e0 su di essa.<br>'+\n                        'Per esempio aumentando \"barba\" mentre \"pizzetto\" \u00e8 bloccato non aggiunger\u00e0 il pizzetto.<br>'+\n                        'Il bottone BLOCCO INTELLIGENTE <i class=\"fa fa-user-lock\" aria-hidden=\"true\"><\/i> blocca e sblocca le caratteristiche correlate. Per esempio bloccare il valore di \"UOMO\" bloccher\u00e0 anche \"TRUCCO\"<br>'+\n                        '<b>SALVA PRESET<\/b> salva la faccia corrente e ripristinarla in seguito tramite <b>CARICA PRESET<\/b>. SALVA e ANNULLA rimandano alla schermata principale.',\n        \"random_generate\" : \"GENRAZIONE CASUALE\",\n        \"save\" : \"SALVA\",\n        \"cancel\" : \"ANNULLA\",\n        \"before\" : \"ORIGINALE:\",\n        \"after\" : \"MODIFICHE CORRENTI:\",\n        \"save_preset\" : \"SALVA PRESET\",\n        \"load_preset\" : \"CARICA PRESET \",\n        \"default_presets\" : \"Non sono presenti preset.\",\n        \"restore_original\" : \"CARICA ORIGINALE\",\n\n        #final gui\n        \"export_gif\" : \"ESPORTA GIF\",\n        \"export_frame\" : \"ESPORTA IMMAGINE\",\n        \"go_back\" : \"INDIETRO\",\n\n        #tooltips\n        #TODO toggle buttons #add import and modify and Lock buttons\n        \"continue_button\": \"Vai al prossimo step.\",\n        \"import_session_button\" : \"Usa l\\'ID di una sessione esportata in precedenza per unire i composite sketch risultanti in un\\'unica animazione.\",\n        \"weighted_button\" : \"Seleziona questa opzione per dare diversa importanza ai diversi tipi di witness (active>inactive>passive).\",\n        \"import_button\" : \"Clicca per importare la sessione\/stringa e procedere con l\\'animazione.\",\n        \"import_and_modify_button\": \"Clicca per importare la sessione\/stringa e continuare l\\'evoluzione.\",\n        \"restart_button\" : \"Ritorna allo step precedente.\",\n        \"random_button\": \"Ricrea casualmente tutte le immagini, eccetto quelle bloccate e\/o selezionate.\",\n        \"backup_button\": \"Esporta un backup di tutte le immagini correnti.\",\n        \"backup_selection_button\": \"Esporta un backup delle immagini correnti (solo selezionate).\",\n        \"backup_preset_button\": \"Esporta un backup dell'immagine mostrata, con le attuali modifiche.\",\n        \"finish_button\" : \"Vai allo step finale in cui verr\u00e0 creata una GIF.\",\n        \"undo_button\": \"Annulla l\\'ultima azione'.\",\n        \"evolve_button\" : 'Evolve le immagini selezionate e sostituisce le altre (se non bloccate) con le loro evoluzioni, in base a \"cambiamenti necessari\" e \"tipo di mutazione\".',\n        \"select_button\": \"Seleziona l\\'immagine come base per l\\'evoluzione.\",\n        \"lock_image_button\": \"Non sovrascrivere l\\'immagine nell\\'evoluzione.\",\n        \"edit_button\" : \"Vai alla modifica avanzata.\",\n        \"lock_image_button\": \"Blocca l\\'immagine per non farla sostituire durante l\\'evoluzione.\",\n        \"lock_features_button\" : \"Blocca tutte le caratteristiche.\",\n        \"unlock_features_button\": \"Sblocca tutte le caratteristiche.\",\n        \"random_generate_button\" : \"Genera un\\'immagine casuale'.\",\n        \"save_button\": \"Torna alla schermata precedente e salva i cambiamenti.\",\n        \"cancel_button\" : \"Torna alla schermata precedente senza salvare i cambiamenti.\",\n        \"save_preset_button\" : \"Salva un nuovo preset.\",\n        \"restore_original_button\" : \"Carica immagine iniziale.\",\n        \"restore_preset_button\" : \"Carica il preset selezionato.\",\n        \"lock_unlock_feature_button\" : 'Blocca\/sblocca caratteristica \"{}\".',\n        \"minus_button\" : \"Diminuisci caratteristica della quantit\u00e0 selezionata.\",\n        \"plus_button\" : \"Aumenta caratteristica della quantit\u00e0 selezionata.\",\n        \"magic_button\" : 'Blocco\/sblocca intelligente: blocca\/sblocca automaticamente la caratteristica ({}) e tutte quelle correlate.',\n        \"export_gif_button\" : \"Esporta GIF e restituisce la relativa stringa.\",\n        \"export_image_button\" : \"Esporta immagine e restituisce la relativa stringa.\",\n        \"go_back_button\" : \"Ritorna allo step precedente.\",\n        \n        #console messages\n        \n        #popups\n        \"error_no_images_selected\" : \"Seleziona almeno una immagine da evolvere.\",\n        \"info_save_vectors_to_share\": \"Salva la stringa per generare questa animazione.\",\n        \"modifying_lock_feature\": \"La feature e bloccata, quindi non pu\u00f3 essere modificata. Sbloccala per modificarla.\",\n        \"cannot_undo\": \"Nessuna azione da annullare.\",\n        \"select_images\" : \"Selezionare almeno una immagine.\",\n        \"popup_info_mutation0\" : \"Notare che CAMBIAMENTI CASUALI non si basa sulle caratteristiche, ma muta le immagini in modo casuale. I cambiamenti quindi NON mantengono invariate le caratteristiche BLOCCATE.  La modifica sar\u00e1 proporzionale al valore selezionato nello slider QUANTIT\u00c0 DI CAMBIAMENTO.\",\n        \"popup_info_mutation1\" : \"Notare che UNA CARATTERISTICA NON BLOCCATA si basa sulle caratteristiche. Ogni immagine viene creata aumentando o diminuendo UNA sola caratteristica, selezionata casualmente tra quelle NON BLOCCATE. \"+\n                                 \"Questo NON significa che le altre caratteristiche rimarranno invariate, dato che potrebbero essere correlate. \u00c8 consigliabile BLOCCARE ogni caratteristica che NON si vuole modificare. In questo modo i cambiamenti su di esse sar\u00e1 minimo (ma non sempre nullo). \"+\n                                 \"La modifica sar\u00e1 proporzionale al valore selezionato nello slider QUANTIT\u00c0 DI CAMBIAMENTO.\",\n        \"popup_info_mutation2\" : \"Notare che OGNI CARATTERISTICA NON BLOCCATA si basa sulle caratteristiche. Ogni immagine verr\u00e1 creata aumentando o diminuendo OGNI caratteristica NON BLOCCATA. La modifica sar\u00e1 proporzionale al valore selezionato nello slider QUANTIT\u00c0 DI CAMBIAMENTO.\"+\n                                 \"\u00c8 consigliabile BLOCCARE ogni caratteristica che NON si vuole modificare. In questo modo i cambiamenti su di esse sar\u00e1 minimo (ma non sempre nullo).\",\n        \"error_no_mutation_selected\" : \"Seleziona il tipo di mutazione che intendi applicare. (Selezione multipla sotto il tasto evolvi)\",\n        \"popup_all_features_locked\" : \"Non pu\u00f3 essere applicata una mutazione basata sulle caratteristiche, perch\u00e9 tutte le caratteristiche sono bloccate. Sbloccane almeno una o cambia la mutazione in CAMBIAMENTI CASUALI.\",\n    }","500d0138":"%%html\n<style>\n.fix-flexbox {display: flex !important}\n.jupyter-button.widget-toggle-button.mod-success {background-color: #EEEEEE !important; color: black }\n.jupyter-button.widget-toggle-button.mod-success.mod-active {background-color: #00BCD4 !important; color: white }\n.jupyter-button.widget-toggle-button.mod-info {background-color: #EEEEEE !important; color: black }\n.jupyter-button.widget-toggle-button.mod-info.mod-active {background-color: #00BCD4 !important; color: white }\n.widget-label {text-align: left !important}\n.jupyter-button{border-radius: 12px; box-shadow: none !important;}\ntextarea{border-radius: 12px;}\n<\/style>","682d7ce1":"\"\"\" change working directory \"\"\"\nimport os\n#!ls {'..\/input'}\n\nkaggle = False\nif '\/kaggle' in os.getcwd():\n    kaggle = True\n    \nif kaggle is True:\n    \"\"\" !!! for kaggle !!! \"\"\"\n    #    os.chdir('..\/input\/niza-luzu-iegan\/niza-luzu-IEGAN')         #    os.chdir('..\/input\/iegan\/niza-luzu-iegan\/niza-luzu-iegan')\n    if (os.getcwd() != '\/kaggle\/input\/interactive-evolution-gan\/niza_luzu_iegan\/niza_luzu_iegan'):\n       # !ls\n        os.chdir('..\/input\/interactive-evolution-gan\/niza_luzu_iegan\/niza_luzu_iegan')\n        #print('current working directory is {}'.format(os.getcwd()))\n        \nelse:\n    \"\"\" !!! for local !!! \"\"\"\n    while os.path.basename(os.getcwd()) in ('notebooks', 'src'):\n        os.chdir('..')\n    assert ('README.md' in os.listdir('.\/')), 'Can not find project root, please cd to project root before running the following code'\n    \nprint('current working directory is {}'.format(os.getcwd()))","5c8c98aa":"\"\"\" imports \"\"\"\n\nimport os\nimport glob\nimport sys\nimport random\nimport numpy as np\nimport pickle\nimport tensorflow as tf\nimport PIL\nimport ipywidgets as widgets\nfrom ipywidgets import Text, Textarea, Accordion, Image, Button, Layout, FloatSlider, IntSlider, VBox, HBox, Box, ToggleButton, ToggleButtons, RadioButtons, Dropdown, HTML, Play\nimport io\nfrom IPython.display import clear_output\n\n\"\"\" make sure this notebook is running from root directory \"\"\"\nwhile os.path.basename(os.getcwd()) in ('notebooks', 'src'):\n    os.chdir('..')\nassert ('README.md' in os.listdir('.\/')), 'Can not find project root, please cd to project root before running the following code'\n\nimport src.ie_gan.generate_image as generate_image\nimport src.ie_gan.relate_features_to_latentSpace.feature_axis as feature_axis\nimport src.ie_gan.feature_celeba_organize as feature_celeba_organize\nimport src.ie_gan.notebook_utility_functions as utility_functions","f606d90e":"\"\"\" load feature directions \"\"\"\n\npath_feature_direction = '.\/asset_results\/pg_gan_celeba_feature_direction_40_iegan'\npathfile_feature_direction = glob.glob(os.path.join(path_feature_direction, 'feature_direction_*.pkl'))[-1]\n\nwith open(pathfile_feature_direction, 'rb') as f:\n    feature_direction_name = pickle.load(f)\nfeature_direction = feature_direction_name['direction']\n\n#import importlib\n#importlib.reload(feature_celeba_organize)\nif language == \"eng\":\n    feature_name = feature_celeba_organize.feature_name_celeba_rename\n    feature_name_all = feature_celeba_organize.all_feature_name_celeba_rename\nelif language == \"ita\":\n    feature_name = feature_celeba_organize.feature_name_celeba_rename_ita\n    feature_name_all = feature_celeba_organize.all_feature_name_celeba_rename_ita\n\nnum_feature_all = len(feature_name_all)\nnum_feature = len(feature_name)\nif num_feature_all != feature_direction.shape[1]:\n    print(\"WARNING! Something is wrong with the features organization\")\nfeature_direction = feature_direction_name['direction']* feature_celeba_organize.feature_reverse[None, :]\n\nfeatures_category_dic = feature_celeba_organize.feature_categories","310dde35":"\"\"\" load CNN model for feature prediction \"\"\"\n\nimport keras\nimport keras.applications\nimport keras.layers as layers\nfrom keras.models import load_model\n\nclasificator_cnn_model_filename = '.\/asset_model\/cnn_face_attr_celeba\/model_MobileNet_adam_mean_squared_error_dropout0.6_gen2_20190312_143109.h5'\n# original cnn from tl_gan in '.\/asset_model\/cnn_face_attr_celeba\/model_20180927_032934.h5'\n\ntry:\n    model\nexcept NameError:\n    model = load_model(clasificator_cnn_model_filename)\n    model.load_weights(clasificator_cnn_model_filename)\n\ndef predict_labels(image):\n    image_crop = image[121-128\/\/2:121+128\/\/2,89-128\/\/2:89+128\/\/2]\n    modified_image_np = PIL.Image.fromarray(modified_image)\n    #print (type(modified_image_np))\n    list_img_batch = []\n    list_img_batch.append(image_crop)\n    x = keras.applications.mobilenet.preprocess_input(np.stack(list_img_batch, axis=0))\n    y = model.predict(x, batch_size=1)\n    #print(y)\n    return y","7818e847":"\"\"\" create tf session \"\"\"\n\nyn_CPU_only = False # use GPU. IMPORTANT: if running on kaggle, need to enable GPU on the settigns panel\nif yn_CPU_only:\n    config = tf.ConfigProto(device_count = {'GPU': 0}, allow_soft_placement=True)\n    # allow_soft_placement=True -> TensorFlow to automatically choose an existing and supported device\nelse:\n    config = tf.ConfigProto(allow_soft_placement=True)\n    config.gpu_options.allow_growth = True\n\ntry:\n    sess\nexcept NameError:\n    sess = tf.InteractiveSession(config=config)\n    \ndef close_interactive_session():\n    \"\"\"\n    function to close tensorflow InteractiveSession\n    \"\"\"\n    print(\"Closing tensorflow InteractiveSession \", end=\"\")\n    sess.close()\n    print(\"DONE\")","dbf03b48":"\"\"\" load GAN model \"\"\"\n\npath_pg_gan_code = '.\/src\/model\/pggan'\npath_model = '.\/asset_model\/karras2018iclr-celebahq-1024x1024.pkl'\nsys.path.append(path_pg_gan_code)\n\n# try to open the trained model file\ntry:\n    Gs\nexcept NameError:\n    try:\n        with open(path_model, 'rb') as file:\n            G, D, Gs = pickle.load(file)\n            # Each PKL file contains 3 instances of tfutil.Network\n            # G = Instantaneous snapshot of the generator, mainly useful for resuming a previous training run.\n            # D = Instantaneous snapshot of the discriminator, mainly useful for resuming a previous training run.\n            # Gs = Long-term average of the generator, yielding higher-quality results than the instantaneous snapshot.\n    except FileNotFoundError:\n        print('FileNotFoundError: please download pre-trained model to project_root\/asset_model\/')\n        raise\n\ndef fp32(*values):\n    if len(values) == 1 and isinstance(values[0], tuple):\n        values = values[0]\n    values = tuple(tf.cast(v, tf.float32) for v in values)\n    return values if len(values) >= 2 else values[0]\n\nlen_z = Gs.input_shapes[0][1] # 512, len of the latent vector\nz_sample = np.random.randn(len_z) # normally-distribuited noise (latent vector)\ntry:\n    x_sample = generate_image.gen_single_img(z_sample, Gs=Gs)\nexcept:\n    print('Error: if you are running on Kaggle, make sure you enabled GPU on current kernel. If you are running locally, make sure you have a CUDA-compatible GPU and CUDA is correctly installed')\n    raise","28fd008f":"\"\"\" global variables \"\"\"\n\nimg_count = 9\ninitial_features_selection_count = 2\nDEFAULT_LATENT_VARIATION_FACTOR = 50\nWITNESS_TYPE_0 = texts_dic[\"active\"]\nWITNESS_TYPE_1 = texts_dic[\"passive\"]\nWITNESS_TYPE_2 = texts_dic[\"inactive\"]\nMUTATION_TYPES = [texts_dic[\"select_mutation\"], texts_dic[\"random_noise\"],texts_dic[\"single_feature\"], texts_dic[\"all_features\"]]\n\nsession_name = texts_dic[\"session_name\"]\nwitness_name = texts_dic[\"witness_name\"]\nwitness_type = 0\nwitness_notes = \"\"\n\nmain_panel = None\naccordion = None\nmutation_slider = None\nlist_buttons = []\nselected_images = np.zeros(img_count).astype('bool')\nkeep_images = np.zeros(img_count).astype('bool')\ninitial_selected_features = np.zeros(initial_features_selection_count).astype('bool')\nnot_sure_initial_selected_features = np.zeros(initial_features_selection_count).astype('bool')\nlatent_variation_factor = DEFAULT_LATENT_VARIATION_FACTOR\nmutation_type = MUTATION_TYPES[0]\n\npopulation = np.empty(img_count, dtype=object) #latent vectors of images\nimages = np.empty(img_count, dtype=object)\nfigures = np.empty(img_count, dtype=object)\nfigures_buttons = np.empty(img_count, dtype=object)\n\nadv_panel = None\nadv_already_open = False\nh_img = None\nuser_selection = None\nmodified_latent = None\nmodified_image = None\nstep_size = 0.4\nshown_step_size = step_size * 100\npresets_list = [HTML(texts_dic[\"default_presets\"])]\npresets_vector_list = []\npresets_images_list = []\n\nfeature_lock_status = np.zeros(num_feature_all).astype('bool')\nfeature_direction_disentangled = feature_axis.disentangle_feature_axis_by_idx(feature_direction, idx_base=np.flatnonzero(feature_lock_status))\noriginal_feature_correlation = feature_axis.plot_feature_cos_sim(feature_direction, plot = False)\n\nanimation_frames_img = []\nanimation_frames_z = []\nanimation_frames_bytes = []\n\nimported_data = None\nimported_witness_types = []\nweighted_animation = True\n\nshown_population = 0\nold_populations = []\n\nimages_indexes = []\nanim_placeholder = None\nslider_index = 0\n\nfirst_run = 0\ncrossover_button = None\nrandom_all_button = None\n\n#GUI reused among different windows\nfeatures_to_lock = None\n\ndef initialize():\n    global session_name, witness_name, witness_type, main_panel, accordion, mutation_slider, selected_images, keep_images, initial_selected_features, not_sure_initial_selected_features\n    global latent_variation_factor, mutation_type, population, images, figures, figures_buttons, adv_panel, adv_already_open, h_img\n    global user_selection, modified_latent, modified_image, step_size, shown_step_size, shown_step_size, feature_lock_status, feature_direction_disentangled\n    global original_feature_correlation, animation_frames_img, animation_frames_z, imported_data, shown_population, old_populations, images_indexes, anim_placeholder, presets_list\n\n    session_name = texts_dic[\"session_name\"]\n    witness_name = texts_dic[\"witness_name\"]\n    witness_type = 0\n    witness_notes = \"\"\n    \n    main_panel = None\n    accordion = None\n    mutation_slider = None\n    list_buttons = []\n    selected_images = np.zeros(img_count).astype('bool')\n    keep_images = np.zeros(img_count).astype('bool')\n    initial_selected_features = np.zeros(initial_features_selection_count).astype('bool')\n    not_sure_initial_selected_features = np.zeros(initial_features_selection_count).astype('bool')\n    latent_variation_factor = DEFAULT_LATENT_VARIATION_FACTOR\n    mutation_type = MUTATION_TYPES[0]\n\n    population = np.empty(img_count, dtype=object) #latent vectors of images\n    images = np.empty(img_count, dtype=object)\n    figures = np.empty(img_count, dtype=object)\n    figures_buttons = np.empty(img_count, dtype=object)\n\n    adv_panel = None\n    adv_already_open = False\n    h_img = None\n    user_selection = None\n    modified_latent = None\n    modified_image = None\n    step_size = 0.4\n    shown_step_size = step_size * 100\n    presets_list = [HTML(texts_dic[\"default_presets\"])]\n    presets_vector_list = []\n    presets_images_list = []\n\n    feature_lock_status = np.zeros(num_feature_all).astype('bool')\n    feature_direction_disentangled = feature_axis.disentangle_feature_axis_by_idx(feature_direction, idx_base=np.flatnonzero(feature_lock_status))\n    original_feature_correlation = feature_axis.plot_feature_cos_sim(feature_direction, plot = False)\n    \n    animation_frames_img = []\n    animation_frames_z = []\n    animation_frames_bytes = []\n\n    imported_data = None\n    imported_witness_types = []\n    weighted_animation = True\n\n    shown_population = 0\n    old_populations = []\n\n    images_indexes = []\n    anim_placeholder = None\n    slider_index = 0\n    \n    first_run = 0\n    crossover_button = None\n    random_all_button = None\n    \n    #GUI reused among different windows\n    features_to_lock = None\n    \n\n    \n#initialize strings according to language\n","ec24cdbd":"\"\"\" evolutionary algorithm functionalities \"\"\"\n\ndef generate_random_vector(amount = 1):\n    \"\"\"\n    function to create a random latent vector using normal gaussian distribution\n    :return random latent vector\n    \"\"\"\n    return np.random.randn(len_z) * amount\n\ndef add_remove_feature(z_original, feature_id, feature_amount):\n    \"\"\"\n    function to randomly increase\/decrease a random number of features of a latent vector\n    :return modified latent vector\n    \"\"\"\n    # feature_direction_disentangled is a matrix containing the weights to modify specific features.\n    # it is [512, 40] so each of the 40 features has a weight for each of the 512 components of the latent vector\n    return z_original + feature_direction_disentangled[:, feature_id] * feature_amount\n\ndef evaluate_feature(z, feature_id):\n    \"\"\"\n    function to evaluate how much a feature is present in a latent vector\n    :return scalar representing how much a feature is present\n    \"\"\"\n    feature_val = sum(z\/feature_direction_disentangled[:, feature_id])\n    return feature_val\n\ndef mutation_random_noise(z_original, noise_amount):\n    \"\"\"\n    function to add random gaussian noise to a latent vector\n    :return modified latent vector\n    \"\"\"\n    noise = generate_random_vector(noise_amount)\n    return np.add(z_original, noise)\n\ndef mutation_random_features_all(z_original, desired_amount):\n    \"\"\"\n    function to randomly increase\/decrease a random number of features of a latent vector\n    :return modified latent vector\n    \"\"\"\n    feature_id = 0\n    z_output = z_original\n    \n    mean = desired_amount * 2\n    variation = mean \/ 3\n    \n    while feature_id < len(feature_name_all):\n        if feature_lock_status[feature_id] == False:\n            feature_amount = random.choice([-1,1]) * (np.random.normal(mean, np.abs(variation), 1)) \n            z_output = add_remove_feature(z_output, feature_id, feature_amount)\n        feature_id += 1\n    return z_output\n\ndef mutation_random_features_all_gaussian(z_original, desired_amount):\n    \"\"\"\n    function to randomly increase\/decrease a random number of features of a latent vector\n    :return modified latent vector\n    \"\"\"\n    feature_id = 0\n    z_output = z_original\n    \n    count_features_unlocked = np.count_nonzero(feature_lock_status == False)\n    if count_features_unlocked <= (len(feature_name_all) - len(feature_name)):\n        if not disable_debug_logs:\n            print(\"All features are locked. Cannot apply feature-based mutation\")\n        return z_output\n    \n    multiple_feat_factor = min( max(1, (0.8 * count_features_unlocked )), 8)\n    mean = desired_amount * 10 * 2 \/ multiple_feat_factor\n    variation = mean \/ 3\n    \n    while feature_id < len(feature_name_all):\n        if feature_lock_status[feature_id] == False and feature_name_all[feature_id] in feature_name:\n            feature_amount = random.choice([-1,1]) * (np.random.normal(mean, np.abs(variation), 1))\n            if not disable_debug_logs:\n                print(\"Feature \" + str(feature_id) + \": \" + feature_name_all[feature_id] + \" mutated by \" + str(feature_amount) + \", based on selected amount: \" + str(desired_amount))\n            z_output = add_remove_feature(z_output, feature_id, feature_amount)\n        feature_id += 1\n    return z_output\n\ndef mutation_random_features_single(z_original, desired_amount):\n    \"\"\"\n    function to randomly increase\/decrease a single feature of a latent vector\n    :return modified latent vector\n    \"\"\"\n    z_output = z_original\n    \n    mean = desired_amount * 10 * 2\n    variation = mean \/ 3\n    \n    unselected_features = []\n    for index in range (0, len(feature_name_all)):\n        if feature_lock_status[index] == False and feature_name_all[index] in feature_name:\n            unselected_features.append(index)\n    if(len(unselected_features) == 0):\n        if not disable_debug_logs:\n            print(\"All features are locked. Cannot apply feature-based mutation\")\n        return z_output\n    rand = np.random.randint(0,len(unselected_features))\n    feature_id = unselected_features[rand]\n    feature_amount = random.choice([-1,1]) * np.random.normal(mean, np.abs(variation), 1)\n    if not disable_debug_logs:\n        print(\"Randomly chosen feature \" + str(feature_id) + \": \" + feature_name_all[feature_id] + \" to mutate by \" + str(feature_amount) + \", based on selected amount: \" + str(desired_amount))\n    z_output = add_remove_feature(z_output, feature_id, feature_amount)\n    return z_output\n\ndef mutate(z, amount):\n    \"\"\"\n    wrapper function for mutation, applying the chosen type to a latent vector\n    :return the mutated latent vector\n    \"\"\"\n    mutated_z = None\n    if mutation_type == MUTATION_TYPES[1]:\n        mutated_z = mutation_random_noise(z, amount)\n    #elif mutation_type == 'features_all':\n    #    mutated_z = mutation_random_features_all(z, amount)\n    elif mutation_type == MUTATION_TYPES[3]:\n        mutated_z = mutation_random_features_all_gaussian(z, amount)\n    elif mutation_type == MUTATION_TYPES[2]:\n        mutated_z = mutation_random_features_single(z, amount)\n    else:\n        print(\"ERROR selecting mutation (\" + str(mutation_type) + \" not in \" + str(MUTATION_TYPES) + \")\")\n        mutated_z = z\n    return mutated_z\n            \ndef crossover(parents):\n    \"\"\"\n    function to calculate an average among latent vectors\n    :return an offspring latent vector\n    \"\"\"\n    offspring = generate_random_vector()\n    for gene in range(0,len_z):\n        gene_value = 0\n        for parent in parents:\n            gene_value += parent[gene]\n        offspring[gene] = gene_value \/ len(parents)\n    return offspring","83bd41ec":"\"\"\" support functions to use images in jupyter widgets \"\"\"\n\ndef img_to_bytes(x_sample):\n    \"\"\"\n    function to convert an image array to bytes, to show it in a figure\n    :return image converted to bytes\n    \"\"\"\n    imgObj = PIL.Image.fromarray(x_sample)\n    imgByteArr = io.BytesIO()\n    imgObj.save(imgByteArr, format='PNG')\n    imgBytes = imgByteArr.getvalue()\n    return imgBytes\n\ndef update_img(x_sample, target_figure):\n    \"\"\"\n    function to update a target figure's content with a given image\n    \"\"\"\n    x_byte = img_to_bytes(x_sample)\n    target_figure.value = x_byte","87c6faf8":"\"\"\"functions used in the advanced editing panel\"\"\"\n\ndef adv_random_gen():\n    \"\"\"\n    function to randomly generate an image in the advanced editing panel\n    \"\"\"\n    #clear_output()\n    #print(\"randomly generating an image for the advanced editing panel\")\n    global modified_latent, modified_image\n    \n    modified_latent = np.random.randn(len_z)\n    modified_image = generate_image.gen_single_img(modified_latent, Gs=Gs)\n    update_img(modified_image, h_img)\n    \n    #predict_labels(modified_image)\n\ndef adv_save():\n    \"\"\"\n    function to save edited image and close advanced editing panel\n    \"\"\"\n    #clear_output()\n    global population, images\n    \n    if modified_image is None :\n        print(\"No modifications found.\")\n        adv_cancel()\n    else:\n        print(\"Saving.. \", end = \"\")\n        population[user_selection] = modified_latent\n        save_pop_for_undo(population)\n        images[user_selection] = modified_image\n        #update_img(images[user_selection], figures[user_selection])\n        print(\"Vector Saved\")\n        adv_cancel()\n        \ndef adv_cancel():\n    \"\"\"\n    function to close advanced editing panel without saving\n    \"\"\"\n    clear_output()\n    print(\"Closing advanced editing panel..\")\n    global modified_latent, modified_image, user_selection, h_img, selected_images, keep_images, population\n    global images, adv_panel, adv_already_open, presets_list, presets_images_list, presets_vector_list\n    \n    user_selection = None\n    h_img = None\n    adv_already_open = False\n    try:\n        adv_panel.close()\n    except:\n        pass\n\n    adv_panel = None\n    presets_list = [HTML(texts_dic[\"default_presets\"])]\n    presets_vector_list = []\n    presets_images_list = []\n    modified_image = None\n    modified_latent = None\n    #selected_images = np.zeros(img_count).astype('bool')\n    #keep_images = np.zeros(img_count).astype('bool')\n    \n    print(\"DONE\")\n    create_main_gui()\n    \ndef adv_load_preset(name):\n    global modified_latent, modified_image, population, images\n    if name == \"original\":\n        modified_latent = presets_vector_list[0]\n        modified_image = generate_image.gen_single_img(modified_latent, Gs=Gs)\n        update_img(presets_images_list[0], h_img)\n        population[user_selection] = modified_latent\n        images[user_selection] = modified_image\n    else:\n        num = [int(s) for s in name.split() if s.isdigit()]\n        modified_latent = presets_vector_list[num[0]]\n        modified_image = generate_image.gen_single_img(modified_latent, Gs=Gs)\n        update_img(presets_images_list[num[0]], h_img)\n        population[user_selection] = modified_latent\n        images[user_selection] = modified_image\n    \ndef adv_save_preset(all_buttons, before_img, b_save_preset, w_step_size):\n    global presets_list, modified_latent, user_selection, adv_panel, adv_already_open, h_img, presets_images_list, presets_vector_list\n    \n    for button in presets_list:\n        if str(button) == \"HTML(value='No saved presets.')\" or str(button) == \"HTML(value='Non sono presenti preset.')\":\n            presets_list = []\n            \n    name = texts_dic[\"load_preset\"] + str(len(presets_list)) \n    b_preset = Button(description=name, layout=Layout(height='40px', width='256px', margin='1px 1px 5px 1px', tooltip=texts_dic[\"restore_preset_button\"]))\n    b_preset.on_click(lambda event: adv_load_preset(b_preset.description))\n    presets_list.append(b_preset)\n    image = generate_image.gen_single_img(modified_latent, Gs=Gs)\n    presets_images_list.append(image)\n    presets_vector_list.append(modified_latent)\n    \n    temp_list = VBox(presets_list)\n    \n    adv_panel = VBox([\n            HTML(texts_dic[\"instructions7\"]),\n            Box([\n                VBox([\n                    all_buttons,\n                    Box([ \n                        VBox([HTML('<b>'+texts_dic[\"before\"]+'<\/b>'), before_img, HTML('<b>'+\"PRESETS:\"+'<\/b>'), b_save_preset, temp_list]), \n                        VBox([HTML('<b>'+texts_dic[\"after\"]+'<\/b>'), h_img]),\n                        VBox([HTML('<b>'+texts_dic[\"change_amount\"]+'<\/b>'), w_step_size, features_to_lock]),\n                        #VBox([HTML('<b>'+\"PRESETS:\"+'<\/b>'), b_save_preset, temp_list])#accordion_presets]),\n                        ])\n                ])\n            ])\n        ], layout = Layout(width='1400px', height='1000px'))#height='1300}px'\n    \n    clear_output()\n    display(adv_panel)\n    \n    #display(adv_panel)\n    #open_advanced_panel(user_selection)\n\ndef modify_along_feature(idx_feature, step_direction=0.05):\n    \"\"\"\n    function to modify a specific feature given a weight to add or subtract for that feature\n    \"\"\"\n    global modified_latent\n    global modified_image\n    \n    if feature_lock_status[idx_feature]:\n        popup(\"Info\",texts_dic[\"modifying_lock_feature\"])\n    else:\n        modified_latent = add_remove_feature(modified_latent, idx_feature, step_size * step_direction)\n        modified_image = generate_image.gen_single_img(modified_latent, Gs=Gs)\n        update_img(modified_image, h_img)\n    \n    #print(evaluate_feature(modified_latent, idx_feature))\n    \n    # Save image in order to show results\n    # plt.savefig(os.path.join(path_gan_explore_interactive,\n    #                         '{}_{}_{}.png'.format(gen_time_str(), feature_name[idx_feature], ('pos' if step_size>0 else 'neg'))))\n\ndef set_feature_lock(idx_feature, caller = None):\n    \"\"\"\n    function to lock\/unlock a feature (from its id) so that the others don't change it\n    \"\"\"\n    \n    global feature_lock_status, feature_direction_disentangled\n    \n    if not caller is None:\n        if caller.value != feature_lock_status[idx_feature]:\n            should_lock = not feature_lock_status[idx_feature]\n\n            feature_lock_status[idx_feature] = should_lock\n            feature_direction_disentangled = feature_axis.disentangle_feature_axis_by_idx(\n                feature_direction, idx_base=np.flatnonzero(feature_lock_status))\n            if should_lock:\n                caller.icon='lock'\n            else:\n                caller.icon='unlock'\n    \n          \ndef lock_unlock_all_features(shouldLock = False, list_names = None, list_ids = None):\n    if list_names is None:\n        if list_ids is None:\n            list_names = feature_name\n        else:\n            list_names = [feature_name_all[x] for x in list_ids]\n    for button in list_buttons:\n        for child in button.children:\n            for gchild in child.children:\n                try:\n                    gchild.children\n                    for ggchild in gchild.children:\n                        try:\n                            ggchild.description\n                            if ggchild.description in list_names:\n                                ggchild.value = shouldLock\n                        except:\n                            pass\n                except:\n                    try:\n                        gchild.description\n                        if gchild.description in list_names:\n                            gchild.value = shouldLock\n                    except:\n                            pass\n                    \n    #print(feature_lock_status)\n\ndef magic_lock(idx_feature):\n    should_lock = not feature_lock_status[idx_feature]\n    correlated_names_list = []\n    for idx in range (0, len(original_feature_correlation[idx_feature])):\n        if abs(original_feature_correlation[idx_feature][idx]) > 0.5:\n            correlated_names_list.append(feature_name_all[idx])\n    lock_unlock_all_features(shouldLock = should_lock, list_names = correlated_names_list)\n\ndef get_loc_control(idx_feature, nrows=8, ncols=5, xywh_range=(0.51, 0.05, 0.48, 0.8)):\n    r = idx_feature \/\/ ncols\n    c = idx_feature % ncols\n    x, y, w, h = xywh_range\n    xywh = x+c*w\/ncols, y+(nrows-r-1)*h\/nrows, w\/ncols, h\/nrows\n    return xywh\n\ndef set_step_size(x):\n    \"\"\"\n    function to change the +\/- buttons impact\n    \"\"\"\n    global step_size\n    global shown_step_size\n    if isinstance(x.new, float):\n        step_size = x.new\/100 \n        shown_step_size = x.new\n\ndef backup_current():\n    selected_vectors_str = str('[[' + (', '.join(str(y) for y in modified_latent) + ']]'))\n    popup(str(texts_dic[\"info_save_vectors_to_share\"]), str(selected_vectors_str))","67d1f4ce":"\"\"\" advanced settings panel GUI creation \"\"\"\n\ndef open_advanced_panel(selection):\n    \"\"\"\n    function to open the advanced settings panel, to manually modify an image\n    \"\"\"\n    global adv_already_open, population, h_img, user_selection, modified_latent, images, adv_panel, main_panel\n    global accordion, presets_list, modified_latent, presets_vector_list, features_to_lock \n    \n    if adv_already_open is True:\n        return\n    \n    clear_output()\n    \n    try:\n        main_panel.close()\n    except:\n        pass\n    \n    print(\"Opening advanced settings..\")\n\n    adv_already_open = True\n    user_selection = selection\n    modified_latent = population[selection]\n    \n    before_img = None\n    before_img = Image(value=img_to_bytes(images[selection]), fromat='png', width=256, height=256)\n    \n    h_img = None\n    h_img = Image(value=img_to_bytes(images[selection]), fromat='png', width=512, height=512)\n    \n    b_randgen = Button(icon=\"sync\", description=texts_dic[\"random_generate\"], button_style='danger', layout=Layout(height='40px', width='200px', margin='1px 1px 5px 1px', tooltip=texts_dic[\"random_generate_button\"]))\n    backup_preset_button = Button(icon=\"save\", description = texts_dic[\"backup_preset\"], button_style= 'success', layout = Layout(height='40px', width='200px', margin='1px 1px 5px 1px', tooltip=texts_dic[\"backup_preset_button\"]))\n    b_save = Button(icon=\"save\", description=texts_dic[\"save\"], button_style='success', layout=Layout(height='40px', width='100px', margin='1px 1px 5px 1px', tooltip=texts_dic[\"save_button\"]))\n    b_cancel = Button(icon=\"trash\", description=texts_dic[\"cancel\"], button_style='danger', layout=Layout(height='40px', width='100px',margin='1px 1px 5px 1px', tooltip=texts_dic[\"cancel_button\"]))\n    \n    b_randgen.on_click(lambda event: adv_random_gen())\n    backup_preset_button.on_click(lambda event: backup_current())\n    b_save.on_click(lambda event: adv_save())\n    b_cancel.on_click(lambda event: adv_cancel())\n\n    w_step_size = FloatSlider( \n        value=shown_step_size, min=0, max=100, step=1, description=\"\", readout=True, readout_format='d',\n        style={'description_width': 'initial'}, layout = Layout(width='400px')\n    )\n    w_step_size.add_class(\"fix-flexbox\")\n    w_step_size.observe(set_step_size)\n\n    for button in presets_list:\n        if str(button) == \"HTML(value='No saved presets.')\" or str(button) == \"HTML(value='Non sono presenti preset.')\":\n            presets_list = []\n            b_preset = Button(description=texts_dic[\"restore_original\"], layout=Layout(height='40px', width='256px', margin='1px 1px 5px 1px', tooltip=texts_dic[\"restore_original_button\"]))\n            b_preset.on_click(lambda event: adv_load_preset(\"original\"))\n            presets_list.append(b_preset)\n            image = generate_image.gen_single_img(modified_latent, Gs=Gs)\n            presets_vector_list.append(modified_latent)\n            presets_images_list.append(image)\n    temp_list = VBox(presets_list)\n    #accordion_presets = None\n    #accordion_presets = Accordion(children=presets_list)\n    #accordion_presets.set_title(0, 'PRESETS')\n    \n    all_buttons = VBox([\n                    Box([backup_preset_button, b_cancel, b_save]),\n                    #b_randgen,\n                    #w_step_size,\n                    ##arrange_buttons(list_buttons, yn_button_select=True)\n                    #arrange_buttons(list_buttons, yn_button_select=False, ncol=10)\n                ])\n    \n    b_save_preset = Button(description=texts_dic[\"save_preset\"], button_style='success', layout=Layout(height='40px', width='256px', margin='1px 1px 5px 1px', tooltip=texts_dic[\"save_preset_button\"]))\n    b_save_preset.on_click(lambda event: adv_save_preset(all_buttons, before_img, b_save_preset, w_step_size))\n    \n    features_to_lock = create_features_to_lock(\"adv\")\n    \n    adv_panel = VBox([\n            HTML(texts_dic[\"instructions7\"]),\n            Box([\n                VBox([\n                    all_buttons,\n                    Box([ \n                        VBox([HTML('<b>'+texts_dic[\"before\"]+'<\/b>'), before_img, HTML('<b>'+\"PRESETS:\"+'<\/b>'), b_save_preset, temp_list]), \n                        VBox([HTML('<b>'+texts_dic[\"after\"]+'<\/b>'), h_img]),\n                        VBox([HTML('<b>'+texts_dic[\"change_amount\"]+'<\/b>'), w_step_size, features_to_lock]),\n                        #VBox([HTML('<b>'+\"PRESETS:\"+'<\/b>'), b_save_preset, temp_list])#accordion_presets]),\n                        ])\n                ])\n            ])\n        ], layout = Layout(width='1400px', height='1000px'))#height='1300}px'\n    \n    clear_output()\n    display(adv_panel)","88858f09":"\"\"\" functions used in the main GUI \"\"\"\n\ndef print_progress(current, total):\n    print(\"Progress: \" + str(int(current\/total*100)) + \"%. (\" + str(current) + \"\/\" + str(total) + \")\", end='\\r')\n    if current == total:\n        print(\"Progress: 100%. (\" + str(current) + \"\/\" + str(total) + \")\")\n    \ndef save_pop_for_undo(pop):\n    global shown_population, old_populations\n    \n    pop_to_save = pop[:]\n    old_populations.append(pop_to_save)\n    shown_population = len(old_populations)-1\n    #print(\"current population: \" + str(shown_population))\n    \ndef undo_action():\n    global population, shown_population, images\n    \n    if(len(old_populations) > 1 and shown_population > 0):\n        old_index = shown_population\n        population = old_populations[old_index-1][:]\n        save_pop_for_undo(population)\n        shown_population = old_index-1\n        for i in range(0, img_count):\n            images[i] = generate_image.gen_single_img(population[i], Gs=Gs)\n            update_img(images[i], figures[i])\n            print_progress(i+1, img_count)\n    else:\n        popup(\"info\", texts_dic[\"cannot_undo\"])\n\n    \ndef randomize_latent():\n    \"\"\"\n    function to generate a new random basis for all 9 images\n    \"\"\"\n    global selected_images, keep_images, population, images, random_all_button\n    \n    random_all_button.disabled = True\n    \n    change_mutation_amount_over_actions(DEFAULT_LATENT_VARIATION_FACTOR)\n    \n    #reset_all_select_keep_buttons()\n\n    #print(\"reset default latent variation factor\")\n    #print(\"removed saved choices\")\n    #print(\"randomizing latent vectors\")\n    \n    if not_sure_initial_selected_features[0] or not_sure_initial_selected_features[1]:\n        for i in range(0,9):\n            rand_age = np.random.randint(0, 99)\n            rand_gender = np.random.randint(0, 99)\n\n            if rand_gender <= 49:\n                gender_male = True\n            else:\n                gender_male = False\n\n            if rand_age <= 49:\n                age_young = True\n            else:\n                age_young = False\n\n            if not_sure_initial_selected_features[0] and not_sure_initial_selected_features[1]:\n                population[i] = utility_functions.load_samples_for_category(male = gender_male, young = age_young, num_samples = 1)[0]\n            elif not_sure_initial_selected_features[0]:\n                population[i] = utility_functions.load_samples_for_category(male = gender_male, young = initial_selected_features[1], num_samples = 1)[0]\n            elif not_sure_initial_selected_features[1]:\n                population[i] = utility_functions.load_samples_for_category(male = initial_selected_features[0], young = age_young, num_samples = 1)[0]\n    else:\n        loaded_population = utility_functions.load_samples_for_category(male = initial_selected_features[0], young = initial_selected_features[1], num_samples = 9)\n        for i in range (0, len(population)):\n            population[i] = population[i] if (keep_images[i] == True or selected_images[i] == True) else loaded_population[i]\n    \n    save_pop_for_undo(population)\n    \n    for i in range(0, img_count):\n        if keep_images[i] or selected_images[i]:\n                continue\n        images[i] = generate_image.gen_single_img(population[i], Gs=Gs)\n        update_img(images[i], figures[i])\n        #print_progress(i+1, img_count)\n\n    #clear_output()\n    random_all_button.disabled = False\n\ndef recalc_image(i):\n    \"\"\"\n    function to generate a new random single image and redraw it\n    \"\"\"\n    #print(\"recalculating image\")\n    latents = np.random.randn(len_z)\n    \n    latents_variation = np.random.randn(len_z) * latent_variation_factor \/ 100\n    population[i] = np.add(latents, latents_variation)\n    save_pop_for_undo(population)\n    images[i] = generate_image.gen_single_img(population[i], Gs=Gs)\n    update_img(images[i], figures[i])\n    #print(\"DONE\")\n\ndef change_mutation_amount(x):\n    \"\"\"\n    function to change the variation from the base latent vector\n    \"\"\"\n    global latent_variation_factor\n    if isinstance(x.new, float):\n        latent_variation_factor = x.new\n\ndef change_mutation_amount_over_actions(x):\n    \"\"\"\n    function to change the variation from the base latent vector\n    \"\"\"\n    global latent_variation_factor, mutation_slider\n    latent_variation_factor = x\n    mutation_slider.value = latent_variation_factor       \n\ndef set_mutation_type(x):\n    global mutation_type\n    if x.name == 'value':\n        mutation_type = x.new\n        if x.owner.index == 1:\n            popup(\"Info\", texts_dic[\"popup_info_mutation0\"])\n        elif x.owner.index == 2:\n            popup(\"Info\", texts_dic[\"popup_info_mutation1\"])\n        elif x.owner.index == 3:\n            popup(\"Info\", texts_dic[\"popup_info_mutation2\"])\n        \ndef reset_all_select_keep_buttons():\n    for index in range (0, len(selected_images)):\n        if selected_images[index] == True:\n            figures_buttons[index].children[0].value = False\n    for index in range (0, len(keep_images)):\n        if keep_images[index] == True:\n            figures_buttons[index].children[1].value = False\n        \ndef select(index):\n    \"\"\"\n    function to select\/unselect images\n    \"\"\"\n    global selected_images, keep_images\n    selected_images[index] = np.logical_not(selected_images[index])\n\n    #print(figures_buttons[index].children[1])\n    if keep_images[index] != selected_images[index]:\n        figures_buttons[index].children[1].value = bool(selected_images[index])\n    #figures_buttons[index].children[1].disabled = bool(selected_images[index])\n\n    \ndef keep(index):\n    \"\"\"\n    function to keep\/release images\n    \"\"\"\n    global keep_images\n    keep_images[index] = np.logical_not(keep_images[index])\n    \ndef reproduce():\n    \"\"\"\n    function to reproduce (9-n) offsprings based on (n) selected images\n    \"\"\"\n    global crossover_button, mutation_type\n    \n    selected_indexes = []\n    selected_parents = []\n    images_to_keep_unchanged = []\n\n    for index in range(0, len(selected_images)):\n        if selected_images[index] == True:\n            selected_indexes.append(index)\n            selected_parents.append(population[index])\n        if keep_images[index] == True:\n            images_to_keep_unchanged.append(index)\n            \n    if len(selected_indexes) == 0:\n        popup(\"INFO\",str(texts_dic[\"error_no_images_selected\"]))\n        return\n    elif mutation_type == texts_dic[\"select_mutation\"]:\n        popup(\"INFO\",str(texts_dic[\"error_no_mutation_selected\"]))\n        return\n    \n    if mutation_type == MUTATION_TYPES[2] or mutation_type == MUTATION_TYPES[3]:\n        count_features_unlocked = np.count_nonzero(feature_lock_status == False)\n        if count_features_unlocked <= (len(feature_name_all) - len(feature_name)):\n            popup(\"Info\",texts_dic[\"popup_all_features_locked\"])\n            return\n        \n    crossover_button.disabled = True\n    \n    if len(selected_indexes) == 1:\n        one_should_stay_unmutated = False\n        mean_crossover = selected_parents[0]\n    else:\n        if not disable_debug_logs:\n            print(\"creating offsprings by crossover. Parents: \" + str(selected_indexes))\n        one_should_stay_unmutated = True\n        mean_crossover = crossover(selected_parents)\n    for i in range(0, img_count):\n        if((i not in selected_indexes) and ( i not in images_to_keep_unchanged)):\n            if(one_should_stay_unmutated):\n                population[i] = mean_crossover\n                one_should_stay_unmutated = False\n            else:\n                population[i] = mutate(mean_crossover, latent_variation_factor\/100)\n            images[i] = generate_image.gen_single_img(population[i], Gs=Gs)\n            update_img(images[i], figures[i])\n        if not disable_debug_logs:\n            print_progress(i+1, img_count)\n    save_pop_for_undo(population)\n    if not disable_debug_logs:\n        print(\"DONE\")\n    \n    change_mutation_amount_over_actions(latent_variation_factor - 1)\n    crossover_button.disabled = False","246b99a6":"\"\"\" main GUI creation \"\"\"\n\ndef create_image_buttons(fig_num, height, width):\n    \"\"\"\n    function to arrange buttons in main GUI\n    \"\"\"\n    \n    is_selected = bool(selected_images[fig_num])\n    is_locked = bool(keep_images[fig_num])\n    \n    select_button = ToggleButton(icon=\"check\", value=is_selected, description=texts_dic[\"select\"], button_style= 'success',tooltip=texts_dic[\"select_button\"],\n                            layout=Layout(height='{:.0f}px'.format(height), width='{:.0f}px'.format(width[0]), margin='5px 2px 5px 2px'))\n    #random_button = Button(description=texts_dic[\"random\"], button_style= 'warning', layout = select_button.layout)\n    keep_button = ToggleButton(icon=\"lock\", value=is_locked, button_style= 'success', tooltip=texts_dic[\"lock_image_button\"],\n                            layout=Layout(height='{:.0f}px'.format(height), width='{:.0f}px'.format(width[1]), margin='5px 2px 5px 2px'))\n    adv_button = Button(icon=\"wrench\", description=texts_dic[\"edit\"], button_style= 'success', tooltip=texts_dic[\"edit_button\"],\n                            layout=Layout(height='{:.0f}px'.format(height), width='{:.0f}px'.format(width[2]), margin='5px 2px 5px 2px'))\n    \n    #random_button.on_click(lambda event: recalc_image(fig_num))\n    adv_button.on_click(lambda event: open_advanced_panel(fig_num))\n    keep_button.observe(lambda event: keep(fig_num))\n    select_button.observe(lambda event: select(fig_num))\n\n    #figure_buttons = Box([select_button, random_button, adv_button])\n    figure_buttons = Box([select_button, keep_button, adv_button])\n    return figure_buttons\n\ndef delete_animation_data_and_user_selections():\n    global animation_frames_z, animation_frames_img, animation_frames_bytes, selected_images, keep_images\n    \n    animation_frames_z = []\n    animation_frames_img = []\n    animation_frames_bytes = []\n    selected_images = np.zeros(img_count).astype('bool')\n    keep_images = np.zeros(img_count).astype('bool')\n    \ndef go_back(current_panel, string):\n    \n    try:\n        current_panel.close()\n    except:\n        pass\n\n    current_panel = None\n    \n    if string == \"main_gui\": #back to main_gui\n        delete_animation_data_and_user_selections()\n        create_main_gui()\n    elif string == \"start\": #back to start from import\n        global imported_data\n        imported_data = None\n        initialize()\n        create_initial_choices()\n    elif string == \"start_from_main_gui\": #back to start from main gui\n        clear_output()\n        initialize()\n        create_initial_choices()\n        \ndef get_feature_id_from_name(name_feature):\n    for idx_feature in range(0, len(feature_name_all)):\n        if name_feature == feature_name_all[idx_feature]:\n            return idx_feature\n        \ndef create_lock_button(name_feature, lock_type, width=96, height=40):\n    \"\"\" function to built button groups for one feature \"\"\"\n    \n    idx_feature = get_feature_id_from_name(name_feature)\n    is_locked = bool(feature_lock_status[idx_feature])\n        \n    w_name_toggle = ToggleButton(\n        button_style= 'info', value= is_locked, description=name_feature, icon='lock',\n        tooltip = texts_dic[\"lock_unlock_feature_button\"].format(name_feature), \n        layout = Layout(height='25px', width='350px', margin='2px 2px 2px 2px'))\n    if lock_type == \"adv\":\n        w_name_toggle.layout = Layout(height='25px', width='250px', margin='2px 2px 2px 2px')\n    if not is_locked:\n        w_name_toggle.icon='unlock'\n    w_neg = Button(icon='minus', button_style= 'info', tooltip=texts_dic[\"minus_button\"], layout = Layout(height='25px', width='40px', margin='2px 2px 2px 2px'))\n    w_pos = Button(icon='plus', button_style= 'info', tooltip=texts_dic[\"plus_button\"], layout = Layout(height='25px', width='40px', margin='2px 2px 2px 2px'))\n    magic_button = Button(icon='user-lock', button_style= 'info', \n                          tooltip=texts_dic[\"magic_button\"].format(name_feature), \n                          layout = Layout(height='25px', width='40px', margin='2px 2px 2px 2px'))\n    \n    w_name_toggle.observe(lambda event: set_feature_lock(idx_feature, caller = w_name_toggle))\n    w_neg.on_click(lambda event: modify_along_feature(idx_feature, step_direction=-1))\n    w_pos.on_click(lambda event: modify_along_feature(idx_feature, step_direction=+1))\n    magic_button.on_click(lambda event: magic_lock(idx_feature))\n\n    if lock_type == \"adv\":\n        return Box([Box([w_name_toggle, Box([w_neg, w_pos])]), magic_button])\n    elif lock_type == \"normal\":\n        return Box([w_name_toggle, magic_button])\n\ndef create_features_to_lock(lock_type):\n    global features_to_lock, list_buttons\n    \n    lock_all_button = Button(description=texts_dic[\"all\"], button_style= 'info', layout = Layout(width='50%'), icon='lock', tooltip=texts_dic[\"lock_features_button\"])\n    unlock_all_button = Button(description=texts_dic[\"all\"], button_style= 'info', layout = Layout(width='50%'), icon='unlock', tooltip=texts_dic[\"unlock_features_button\"])\n    \n    lock_all_button.on_click(lambda event: lock_unlock_all_features(True))\n    unlock_all_button.on_click(lambda event: lock_unlock_all_features(False))\n    \n    list_buttons = []\n    # create all the buttons in the GUI\n    for category in features_category_dic:\n        temp_list = []\n        for id_feature in features_category_dic[category]:\n            name_feature = feature_name_all[id_feature]\n            temp_list.append(create_lock_button(name_feature, lock_type))\n        list_buttons.append(VBox(temp_list))\n    \n    features_accordion = None\n    features_accordion = Accordion(children=list_buttons)\n    index = 0\n    for category in features_category_dic:\n        features_accordion.set_title(index, texts_dic[\"category\"+category])\n        index+=1\n    \n    features_to_lock = VBox([\n                            HTML('<b>'+texts_dic[\"lock_features\"]+'<\/b>'),\n                            Box([lock_all_button, unlock_all_button]),\n                            features_accordion\n                        ], layout = Layout(width='400px', margin='2px 2px 2px 2px'))\n    return features_to_lock\n\ndef create_main_gui():\n    \"\"\"\n    function to create main GUI\n    \"\"\"\n    global main_panel, latent_variation_factor, mutation_slider, list_buttons, features_to_lock, figures_buttons, crossover_button, random_all_button, first_run\n    \n    # set image content in figures and create related buttons\n    print(\"Creating figures..\")\n    figures_buttons = np.empty(img_count, dtype=object)\n    for i in range(0, img_count):\n        figures[i] = Image(value=img_to_bytes(images[i]), format='png', width=246, height=246, margin='5px 0px 5px 0px')\n        figures_buttons[i] = create_image_buttons(i, 25, [100,40,100])\n        print_progress(i+1, img_count)\n    \n    goback_button = Button(description = texts_dic[\"restart\"], button_style= 'danger', layout = Layout(width='20%', tooltip=texts_dic[\"restart_button\"]))\n    random_all_button = Button(icon=\"random\", description= texts_dic[\"random_all\"], button_style= 'danger', disabled = False, layout = Layout(width='20%'), tooltip=texts_dic[\"random_button\"])\n    backup_button = Button(icon=\"save\", description = texts_dic[\"backup\"], button_style= 'success', layout = Layout(width='20%'), tooltip=texts_dic[\"backup_button\"])\n    backup_selection_button = Button(icon=\"save\", description = texts_dic[\"backup_selection\"], button_style= 'success', layout = Layout(width='20%'), tooltip=texts_dic[\"backup_selection_button\"])\n    finish_button = Button(description=texts_dic[\"finish\"], button_style= 'success', layout = Layout(width='20%'), tooltip=texts_dic[\"finish_button\"])\n    undo_button = Button(icon=\"undo-alt\", description = texts_dic[\"undo\"], button_style= 'danger', layout = Layout(width='100px', height='40px'), tooltip=texts_dic[\"undo_button\"])\n    crossover_button = Button(description = texts_dic[\"evolve\"], button_style= 'success', disabled = False, layout = Layout(width='calc( 100% - 100px )', height='40px'), tooltip=texts_dic[\"evolve_button\"])\n    \n    goback_button.on_click(lambda event: go_back(main_panel, \"start_from_main_gui\"))\n    random_all_button.on_click(lambda event: randomize_latent())\n    backup_button.on_click(lambda event: export_backup())\n    backup_selection_button.on_click(lambda event: export_backup_selection())\n    finish_button.on_click(lambda event: open_final_gui())\n    undo_button.on_click(lambda event: undo_action())\n    crossover_button.on_click(lambda event: reproduce())\n    \n    mutation_selector = Dropdown(\n        options = MUTATION_TYPES,\n        value = mutation_type, description=texts_dic[\"mutation\"], disabled=False, layout = Layout(width='40%')\n\n    )\n    mutation_selector.add_class(\"fix-flexbox\")\n    mutation_selector.observe(set_mutation_type)\n    \n    # amount selection\n    mutation_slider = FloatSlider( value=latent_variation_factor, min=0, max=100, step=1, description=texts_dic[\"change_amount\"], readout=True, \n                                  readout_format='d', layout = Layout(width='60%'), style={'description_width': 'initial'} )\n    mutation_slider.add_class(\"fix-flexbox\")\n    mutation_slider.observe(change_mutation_amount)\n\n    witness_notes_text = Textarea(value = witness_notes, disabled=True, layout=Layout(height= '200px', width='400px', resize= 'none' ))\n    \n    features_to_lock = create_features_to_lock(\"normal\")\n    \n    if first_run < 1:\n        first_run+=1\n        if not not_sure_initial_selected_features[1]:\n            lock_unlock_all_features(shouldLock = True, list_names = None, list_ids = feature_celeba_organize.default_locked_features_age)  \n        if not_sure_initial_selected_features[0]:\n            lock_unlock_all_features(shouldLock = True, list_names = None, list_ids = feature_celeba_organize.default_locked_features_noGender)\n        else:\n            if initial_selected_features[0] is True:\n                lock_unlock_all_features(shouldLock = True, list_names = None, list_ids = feature_celeba_organize.default_locked_features_female)\n            else:\n                lock_unlock_all_features(shouldLock = True, list_names = None, list_ids = feature_celeba_organize.default_locked_features_male)\n\n    \n    #print(\"Creating main_panel..\")\n    main_panel = Box([\n                    VBox([\n                        Box([HTML('<h3>'+texts_dic[\"instructions4\"]+'<\/h3>')]),\n                        Box([HTML('<b>'+texts_dic[\"session\"]+':<\/b> '+session_name+' - <b>'+texts_dic[\"witness\"]+':<\/b> '+witness_name+'')]),\n                        Box([HTML(texts_dic[\"instructions5\"])]),\n                        Box([goback_button, random_all_button, backup_button, backup_selection_button, finish_button], style = {'flex-flow': 'column nowrap'}),\n                        Box([\n                            VBox([\n                                VBox([\n                                    Box([undo_button, crossover_button], style = {'flex-flow': 'column nowrap'}),\n                                    Box([mutation_slider, mutation_selector], style = {'flex-flow': 'column nowrap'}),\n                                ]),\n                                Box([VBox([figures[0], figures_buttons[0]]), VBox([figures[1], figures_buttons[1]]), VBox([figures[2], figures_buttons[2]])]),\n                                Box([VBox([figures[3], figures_buttons[3]]), VBox([figures[4], figures_buttons[4]]), VBox([figures[5], figures_buttons[5]])]),\n                                Box([VBox([figures[6], figures_buttons[6]]), VBox([figures[7], figures_buttons[7]]), VBox([figures[8], figures_buttons[8]])])\n                            ]),\n                            VBox([witness_notes_text, features_to_lock])\n                        ]),\n                    ]),\n        ],\n        layout = Layout(height='1300}px', width='1300px', margin='10px 10px 10px 10px'), \n    )\n\n    clear_output()\n    \n    display(main_panel)  \n    ","7f7f665a":"    example_import_string = \"\"\"[[0.68, -1.23, -1.0, -0.6, 0.03, 1.24, -0.2, 0.91, 1.27, -0.86, 1.2, -0.69, 0.0, 2.14, -0.18, -0.06, -0.18, 0.06, -1.02, 1.84, -0.84, -1.46, -0.11, -0.66, -0.12, 0.43, -1.32, 1.89, 0.14, 0.57, -1.46, 0.14, 0.52, 2.29, 1.18, 1.15, 0.55, -0.34, -0.63, -0.22, 0.37, 0.99, -1.5, -0.36, 1.11, 1.21, -1.2, -0.12, -0.9, -0.59, -1.87, 0.27, 0.4, -1.69, -0.61, 0.36, -0.87, 0.06, -2.12, -0.93, 1.53, -0.52, 0.38, -0.52, 0.11, 0.48, -0.39, 0.21, -1.86, -0.44, 0.85, 0.9, 2.32, 1.06, 0.72, -0.51, 0.88, 1.02, -0.13, 0.64, 0.95, 1.43, -0.27, 0.08, 2.26, 1.29, 0.16, -1.39, 1.21, -1.03, -0.79, 1.48, 1.0, 1.08, -1.19, -0.37, -0.78, 1.57, 0.58, 1.6, 1.5, 1.84, 0.01, -0.55, -1.08, -0.94, -0.37, -0.09, 1.01, 0.06, -0.07, -0.77, -1.43, -0.11, 0.15, -2.05, -0.17, -0.72, -1.45, 0.33, 0.47, -0.78, -0.37, 0.02, 0.57, -0.19, -0.15, -0.71, -0.46, -1.32, 0.13, -0.78, 0.11, 0.59, -0.15, -1.58, -2.12, -0.66, -0.8, 0.53, 1.88, -0.1, -0.73, -1.66, -0.91, 0.75, -0.71, 1.16, 0.45, -1.96, 1.99, -1.6, 0.0, -0.77, -1.14, -0.34, 0.56, 0.59, 0.94, 0.6, 0.46, -0.15, 0.75, -1.2, 1.48, 0.81, 0.05, 0.53, -1.42, -1.43, -1.35, -0.4, -0.21, 1.57, -0.95, 1.58, 0.64, 0.18, -0.1, 0.58, 0.52, 0.41, 1.61, 0.13, 0.39, -1.63, 0.36, 0.35, -0.26, 0.39, -0.86, 0.18, 0.57, 0.09, 0.0, 1.75, 1.29, -0.13, 1.16, -0.3, 0.26, -1.2, 0.06, 2.15, -1.56, 0.03, -0.11, -0.4, 0.74, 0.07, -1.25, 0.83, -1.08, -1.54, -0.32, 0.58, -1.06, -0.45, 0.83, 0.21, -1.36, -1.2, -1.34, 1.11, -1.93, -0.94, 2.28, 1.11, 0.74, 0.31, -1.42, -0.37, -0.85, -0.07, 0.23, 1.03, 0.35, -1.35, -0.05, 0.78, -1.09, -1.59, 0.64, -2.22, -1.56, -0.16, 0.16, -1.51, 0.65, 1.7, 0.57, -0.37, 1.87, 0.28, -0.23, -1.2, -0.08, 2.14, 0.76, 0.51, -1.62, -0.05, -1.63, -1.16, 0.24, 2.08, -1.55, -0.13, 1.29, -0.25, 2.37, -0.3, 0.21, 1.78, 0.08, -0.78, -0.41, -0.56, -1.35, -0.91, 0.42, 0.21, 0.07, 0.3, 0.53, 1.49, -1.52, 0.96, -0.05, 0.92, -0.08, -1.41, -1.86, -0.45, 0.37, -0.84, -3.09, -0.27, -0.69, -1.67, 0.52, 1.02, -1.92, -0.15, -0.39, 0.33, -0.35, -0.65, -1.74, 1.93, 0.92, -0.32, -1.56, 1.17, 0.31, 0.74, 0.47, 0.13, 0.41, 1.32, -1.03, 0.55, 1.34, -0.22, -1.77, -0.5, -0.85, 2.09, -1.6, -1.2, -0.42, 0.26, -0.23, 1.23, 0.89, 1.34, -2.01, 1.08, 0.38, 0.83, -0.27, 0.4, -0.56, -1.93, -0.35, 0.26, -0.04, -1.19, 0.71, 0.3, 0.56, 0.1, 0.81, 0.5, 0.1, -0.46, 0.52, -1.83, 3.04, 1.04, 0.33, -0.15, -0.33, -1.31, -0.78, 0.86, 0.69, -0.88, 0.64, -0.69, -0.36, -0.68, -0.42, -0.13, 0.06, -0.65, -0.56, 2.11, 0.81, 0.3, 0.25, 0.41, 0.56, -1.08, 0.81, 0.27, -0.14, -0.47, -0.47, 1.72, -0.88, 0.28, 0.65, 0.26, -0.68, -0.32, 0.12, 0.05, -1.68, -0.69, 1.31, 1.47, -0.94, -0.55, -0.95, -0.35, 0.0, -0.17, -1.02, -0.81, 0.04, 1.44, -1.15, 1.57, -1.65, 0.25, -0.19, -0.97, -1.43, 0.16, 1.31, 0.44, -0.97, 0.11, 0.14, 0.44, 0.27, -1.4, 1.49, 0.89, 1.3, 0.34, -0.55, 0.19, 1.59, 0.01, -0.52, -0.17, 0.38, 1.29, 1.2, 1.37, -0.5, -0.58, -0.76, 1.08, 0.45, -0.97, -0.68, -2.27, 2.12, 0.19, -0.84, 1.24, 0.63, -0.03, -1.76, -0.16, -0.87, -0.67, -1.05, 0.27, 0.2, -0.68, -0.95, -1.23, 0.44, 0.67, -0.07, 0.35, 0.55, -0.5, -2.41, -0.45, 0.33, -0.08, -0.48, 1.38, -2.11, 0.63, 0.66, -0.09, 0.03, 0.32, 0.4, 0.37, -0.17, 1.14, 0.2, -0.23, 0.05, 0.53, 1.96, 0.22, -0.75, 0.13, 0.74, 0.72, 0.27, -0.97, -0.85, -1.37, 0.06, 0.27, 0.39, 1.36, 0.24, -0.01, 1.76, 1.03, 0.7, -0.79], [-1.24, -0.03, -0.47, -0.69, -0.75, 1.97, 0.96, 1.01, 0.46, -0.48, 0.02, -0.35, 0.54, 1.17, -0.43, 0.94, -0.08, -0.63, 0.1, 0.7, 0.44, 1.71, -0.74, -0.98, -0.91, -0.16, -0.41, -0.4, -0.55, 0.81, -0.02, 0.06, 0.27, 0.92, -0.92, 1.0, -0.14, 0.18, 1.71, -0.01, -0.67, -0.81, -0.31, 1.48, -0.97, -0.78, 2.21, -0.32, -0.63, -1.21, -1.87, 1.32, 0.69, 1.08, -0.35, 0.5, -0.57, 1.56, -0.67, -0.32, -0.52, 0.9, -0.61, 0.41, -0.82, -0.31, 0.16, -1.87, -1.25, -0.99, -1.02, -1.39, -0.35, -0.36, 0.43, -1.37, 0.07, -0.76, 1.47, 1.7, 0.04, 0.84, -0.77, -0.1, 0.57, 0.42, 0.47, 1.01, 1.23, 1.74, 0.87, -1.56, -1.4, -0.62, 0.37, 0.01, -0.81, 1.36, -1.03, -0.04, -0.1, -0.21, -0.06, 1.09, -0.17, 0.92, 0.74, 1.01, 1.19, 0.39, -0.73, -0.27, 0.95, 0.54, -0.3, 0.58, -0.85, -0.38, -1.1, -0.48, -0.65, 0.24, -2.01, -1.08, 0.24, 0.83, -0.6, -0.22, 0.14, -0.64, -0.57, 0.42, 2.15, 0.29, 0.54, 1.0, 2.99, -0.89, -0.7, 0.43, 1.07, -0.8, 1.39, -1.44, 0.99, 0.95, 1.96, -0.19, 0.29, 0.06, -0.48, 0.87, -0.0, -0.39, -0.3, 0.0, 1.13, -0.73, -1.05, 0.57, -0.66, 0.76, -0.12, 0.33, 0.22, -0.34, 0.21, 0.44, -1.7, -0.6, 0.8, 0.72, -0.03, -0.27, -0.43, -0.73, -1.08, 0.05, 0.19, -0.88, 0.38, 0.97, -0.8, -0.98, -1.03, -0.74, 0.67, 1.05, 0.23, -0.7, 1.94, 0.26, -0.37, 0.01, -0.37, 1.26, -0.08, 1.66, -0.52, 0.01, 2.81, 0.36, 0.77, -1.1, 0.46, -0.78, 1.7, 1.48, 1.38, -1.6, -0.82, 0.9, 3.09, 0.15, -0.59, -1.21, -0.41, -0.3, 0.85, -0.72, 0.41, 0.31, -2.01, -0.23, -0.81, -0.37, -0.14, 0.49, -1.43, -3.06, 1.76, 0.91, -0.25, 1.42, -0.64, 1.28, 0.08, 0.38, -1.35, -1.27, -1.52, -1.31, 1.52, 0.41, 1.69, 1.13, 0.95, 0.11, 0.53, 1.6, 1.06, -0.23, -0.82, 0.31, 0.59, -1.22, 0.03, 0.24, 1.53, 0.16, 1.31, -0.66, -1.38, 0.26, 1.6, -0.84, 0.37, 0.61, -0.14, 0.42, 1.92, -0.3, 1.12, -2.39, -0.82, -1.65, -0.65, -0.83, -0.93, 0.56, -0.36, 0.26, 1.01, -0.25, 0.38, 1.19, -0.1, -0.37, -0.4, 0.39, -1.17, 0.14, -0.78, 0.03, -1.67, -2.68, -0.63, -0.48, -0.15, -0.81, 0.65, 0.89, -0.33, -0.06, 1.06, 0.35, 0.57, -0.02, -0.46, 0.66, -0.74, 0.66, 1.99, -0.53, 0.44, -1.29, -0.72, 0.22, 0.64, -0.16, -0.86, -0.77, -0.11, 0.62, -1.67, 1.21, -0.21, -0.1, 0.19, -0.4, -1.28, -0.06, 0.9, -0.09, 0.39, 0.31, -0.53, 0.71, 0.02, 0.75, 1.1, 0.83, 1.56, 2.35, 0.65, 0.87, 0.1, 1.69, -0.84, -1.7, -1.36, -0.32, -0.88, -0.39, 2.08, -0.87, 1.4, -0.9, 2.35, -1.69, 1.84, 0.82, -0.56, 1.52, 1.08, 1.17, -1.14, 2.23, -1.09, 0.88, -0.64, 0.09, -1.15, 0.25, 0.44, 0.34, 0.71, 0.28, 0.12, -1.46, -0.71, 0.2, 0.42, 0.49, 0.51, 0.08, 0.03, -0.75, 0.88, 1.05, -1.61, 2.4, -1.59, -0.17, 0.37, -1.41, -0.71, -0.58, -2.56, -1.77, -1.43, 1.19, 0.12, 0.75, -0.98, 0.15, -0.4, -0.61, 0.26, -1.2, 0.16, -0.36, 0.77, 0.22, -1.33, 0.05, -0.32, 0.75, -1.02, -0.66, -0.42, 0.56, 1.26, 1.1, -1.69, 0.35, 0.01, -0.35, -0.82, 0.34, -1.67, -2.26, 1.13, -0.64, -0.73, 0.55, 0.21, -2.74, 0.93, 1.12, 0.51, 1.32, -0.04, 0.01, -0.67, -0.78, -0.09, 0.55, 0.94, -1.69, -0.46, -0.52, -0.6, -1.1, 0.34, 1.74, 0.61, -0.71, -0.23, 0.41, 1.02, -2.37, -0.63, 0.85, 1.22, -0.66, -0.42, 0.89, -0.61, -0.91, -0.24, 0.09, 0.8, -0.14, -0.66, -0.01, 0.1, -0.86, -0.33, -0.6, 1.07, -0.63, -1.31, -1.05, -0.79, 1.43, -0.21, 0.63, 1.91, -0.09, 0.0, -0.24, -0.58, -0.73, 1.91, -0.87, -1.64, 0.62, 0.96, -0.18, 0.74, 0.49, 2.31, 0.73, -0.08, -0.2, -0.55, 0.17, -0.31, -1.16, 0.22, -0.42]]\"\"\"","45eacd83":"\"\"\" functions to generate main gui from the preliminary feature selection\"\"\"\n\ndef continue_to_main_gui(text_notes):\n    global samples_list, population, accordion, witness_notes\n    \n    witness_notes = text_notes\n    # create initial population\n    if not_sure_initial_selected_features[0] or not_sure_initial_selected_features[1]:\n        for i in range(0,9):\n            rand_age = np.random.randint(0, 99)\n            rand_gender = np.random.randint(0, 99)\n\n            if rand_gender <= 49:\n                gender_male = True\n            else:\n                gender_male = False\n\n            if rand_age <= 49:\n                age_young = True\n            else:\n                age_young = False\n\n            if not_sure_initial_selected_features[0] and not_sure_initial_selected_features[1]:\n                #print(\"CHANGING BOTH \"+ str(gender_male)+ \"   \" + str(age_young))\n                population[i] = utility_functions.load_samples_for_category(male = gender_male, young = age_young, num_samples = 1)[0]\n            elif not_sure_initial_selected_features[0]:\n                #print(\"CHANGING GENDER \"+str(gender_male))\n                population[i] = utility_functions.load_samples_for_category(male = gender_male, young = initial_selected_features[1], num_samples = 1)[0]\n            elif not_sure_initial_selected_features[1]:\n                #print(\"CHANGING AGE \"+str(age_young))\n                population[i] = utility_functions.load_samples_for_category(male = initial_selected_features[0], young = age_young, num_samples = 1)[0]\n    else:\n        population = utility_functions.load_samples_for_category(male = initial_selected_features[0], young = initial_selected_features[1], num_samples = 9)\n    save_pop_for_undo(population)\n    print(\"Generating initial images..\")\n    for i in range(0,img_count):\n        images[i] = generate_image.gen_single_img(population[i], Gs=Gs)\n        print_progress(i+1, img_count)\n    try:\n        accordion.close()\n    except:\n        pass\n\n    accordion = None\n    create_main_gui()\n\ndef setSessionName(x):\n    global session_name\n    if x.name == 'value' and session_name != x.new:\n        session_name = x.new\n    \ndef setWitnessName(x):\n    global witness_name\n    if x.name == 'value' and witness_name != x.new:\n        witness_name = x.new\n        \ndef setInitialPopulationBool(index, value):\n    \"\"\"\n    function to choose initial features\n    \"\"\"\n    global initial_selected_features, not_sure_initial_selected_features\n    if value == texts_dic[\"not_sure_gender\"] or value == texts_dic[\"not_sure_age\"]:\n        not_sure_initial_selected_features[index] = np.logical_not(not_sure_initial_selected_features[index])\n    else:\n        initial_selected_features[index] = np.logical_not(initial_selected_features[index])\n    \ndef setWeightedAverage(x):\n    global weighted_animation\n    if x.name == 'value':\n        weighted_animation = not weighted_animation\n        \ndef setNotes(x):\n    global witness_notes\n    witness_notes = x\n         \ndef change_witness_type(x):\n    global witness_type\n    if x.name == 'value':\n        selection = x.new\n        if(selection == WITNESS_TYPE_0):\n            witness_type = 0\n        elif(selection == WITNESS_TYPE_1):\n            witness_type = 1\n        else:\n            witness_type = 2\n            \ndef import_sessions():\n    global imported_data, witness_name, imported_witness_types\n    \n    imported_data, imported_witness_types = utility_functions.import_data_of_all_witnesses('.\/asset_results\/sessions_data\/' + str(session_name))\n    witness_name = \"all_witnesses_animation\"\n    open_final_gui()\n    \ndef import_single_user_string(text, gui):\n    global imported_data, imported_witness_types, population, images\n    try:\n        cleaned_text = text.replace('array', '').replace('(', '').replace(')', '').replace('\\r','').replace('\\n','').replace(' ','')\n        if cleaned_text.index('[[') > 0 and cleaned_text.index(']]') > 0:\n            cleaned_text = cleaned_text[cleaned_text.index('[['):cleaned_text.index(']]')]\n        cleaned_text = cleaned_text.replace('[[', '').replace(']]', '')\n        imported_data = [[float(y) for y in x.split(',')] for x in cleaned_text.split('],[')]\n        imported_witness_types = [witness_type for x in imported_data]\n        if gui == \"final_gui\":\n            open_final_gui()\n        elif gui == \"main_gui\":\n            population = np.empty(img_count, dtype=object)\n            images = np.empty(img_count, dtype=object)\n            for i in range(0, img_count):\n                if i < len(imported_data):\n                    population[i] = np.asarray(imported_data[i])\n                else:\n                    population[i] = np.asarray(imported_data[0])\n                images[i] = generate_image.gen_single_img(population[i], Gs=Gs)\n                print_progress(i+1, img_count)\n            imported_data = None\n            save_pop_for_undo(population)\n            create_main_gui()\n    except:\n        print(\"An error occured. Check string and retry\")\n    \ndef create_initial_choices():\n    \"\"\"\n    function to arrange buttons in first selection GUI\n    \"\"\"\n    global accordion, first_run\n    first_run = 0\n    \n    text_session = Text(value='', placeholder=texts_dic[\"type_session\"], description=texts_dic[\"session\"])\n    text_witness = Text(value='', placeholder=texts_dic[\"type_witness\"], description=texts_dic[\"witness\"])\n    text_session_to_import = Text(value='', placeholder='Type session id', description=texts_dic[\"session\"])\n    import_sessions_button = Button(description=texts_dic[\"import_sessions\"], button_style= 'success', layout = Layout(height='{:.0f}px'.format(40), width='{:.0f}px'.format(160), margin='10px 4px 10px 4px'), tooltip=texts_dic[\"import_session_button\"])\n    import_sessions_weighted = ToggleButton(description=texts_dic[\"weighted\"], value=weighted_animation, button_style='success', layout = Layout(height='{:.0f}px'.format(30), width='{:.0f}px'.format(160), margin='2px 0 2px 10px'),\n                                    #icon = 'check' if(weighted_animation is True) else '',\n                                    tooltip=texts_dic[\"weighted_button\"])\n    witness_type_button = ToggleButtons( options=[WITNESS_TYPE_0, WITNESS_TYPE_1, WITNESS_TYPE_2], button_style='info')\n    suspect_gender_button = ToggleButtons( options=[texts_dic[\"male\"], texts_dic[\"female\"], texts_dic[\"not_sure_gender\"]], button_style='info')\n    suspect_age_button = ToggleButtons( options=[texts_dic[\"young\"], texts_dic[\"old\"], texts_dic[\"not_sure_age\"]], button_style='info')\n    continue_button = Button(description=texts_dic[\"continue\"], button_style= 'success', layout = Layout(height='{:.0f}px'.format(40), width='{:.0f}px'.format(120), margin='10px 4px 10px 4px'), tooltip=texts_dic[\"continue_button\"])\n    text_notes = Textarea(placeholder=texts_dic[\"perpetrator_note\"], layout={'height': '100%'})\n\n    text_session.observe(setSessionName)\n    text_witness.observe(setWitnessName)\n    text_session_to_import.observe(setSessionName)\n    import_sessions_button.on_click(lambda event: import_sessions())\n    import_sessions_weighted.observe(setWeightedAverage)\n    witness_type_button.observe(change_witness_type)\n    suspect_gender_button.observe(lambda event: setInitialPopulationBool(int(0), suspect_gender_button.value))\n    suspect_age_button.observe(lambda event: setInitialPopulationBool(int(1), suspect_age_button.value))\n    continue_button.on_click(lambda event: continue_to_main_gui(text_notes.value))\n\n    initial_choices_panel = VBox([ \n            HTML(texts_dic[\"instructions1\"]),\n            Box([ \n                VBox([ \n                    VBox([ Box([text_session]), Box([text_witness]) ]),  \n                    Box([VBox([HTML('<h3>'+texts_dic[\"witness_type\"]+'<\/h3>'), witness_type_button])]),\n                    Box([VBox([HTML('<h3>'+texts_dic[\"suspect_info\"]+'<\/h3>'), suspect_gender_button, suspect_age_button])]),\n                    Box([continue_button]) \n                ], layout = Layout(width='700px')),\n                VBox([text_notes])\n            ],layout = Layout(margin='15px 0px 0px 0px'))\n        ], \n        layout = Layout(height='1350}px', width='1000px', margin='20px 20px 20px 20px'), \n    )\n\n    initial_choices_import_panel = VBox([\n        HTML(texts_dic[\"instructions2\"]),\n        VBox([ \n            Box([\n                text_session_to_import, \n                import_sessions_weighted\n            ]),\n            import_sessions_button\n            ],layout = Layout(margin='15px 0px 0px 0px'))\n        ],\n        layout = Layout(height='1300}px', width='1000px', margin='20px 20px 20px 20px'), \n    )\n    \n    text_import_single_user_string = Textarea(value=example_import_string, placeholder=texts_dic[\"import_string_placeholder\"], layout = Layout(width='900px'))\n    import_string_button = Button(description=texts_dic[\"import\"], button_style= 'success', layout = Layout(height='40px', width='250px', margin='10px 4px 10px 4px'), tooltip=texts_dic[\"import_button\"])\n    import_string_button2 = Button(description=texts_dic[\"import_string\"], button_style= 'success', layout = Layout(height='40px', width='250px', margin='10px 4px 10px 4px'), tooltip=texts_dic[\"import_string_placeholder\"])\n    import_string_button.on_click(lambda event: import_single_user_string(text_import_single_user_string.value, \"final_gui\"))\n    import_string_button2.on_click(lambda event: import_single_user_string(text_import_single_user_string.value, \"main_gui\"))\n    \n    initial_choices_import_single_string_panel = VBox([\n        HTML(texts_dic[\"instructions3\"]),\n        VBox([ \n            VBox([ Box([text_session]), Box([text_witness]) ]),  \n            Box([VBox([HTML('<h3>'+texts_dic[\"witness_type\"]+'<\/h3>'), witness_type_button])]),\n            Box([VBox([HTML('<h3>'+texts_dic[\"import_string\"]+'<\/h3>'), text_import_single_user_string])]),\n            Box([import_string_button, import_string_button2])\n            ],layout = Layout(margin='15px 0px 0px 0px'))\n        ],\n        layout = Layout(height='1300}px', width='1000px', margin='20px 20px 20px 20px'), \n    )\n\n    accordion = None\n    accordion = Accordion(children=[initial_choices_panel, initial_choices_import_panel, initial_choices_import_single_string_panel])\n    accordion.set_title(0, texts_dic[\"new_session\"])\n    accordion.set_title(1, texts_dic[\"merge_sessions\"])\n    accordion.set_title(2, texts_dic[\"import_session\"])\n    display(accordion)\n    #display(initial_choices_panel) ","36f8e629":"\"\"\" final GUI with animation \"\"\"\n\ndef get_animation_frames():\n    \"\"\"\n    given a list of latent vectors create an animation of images\n    :return list of images for each frame\n    \"\"\"\n    global animation_frames_z, animation_frames_img, animation_frames_bytes, imported_data, imported_witness_types\n    \n    if animation_frames_z == [] or animation_frames_img == []:\n        print(\"Creating animation frames..\")\n        if imported_data is None:\n            selected_vectors = get_user_selected_vectors()\n        else:\n            inputs_per_witness = []\n            witness_types = []\n            for i in range(0, len(imported_witness_types)):\n                inputs_per_witness.append(len(imported_data[i]))\n                for j in range (0, len(imported_data[i])):\n                    witness_types.append(imported_witness_types[i])\n            selected_vectors = np.vstack(imported_data)\n            witness_type0 = 0\n            witness_type1 = 0\n            witness_type2 = 0\n            for i in range(0, len(imported_witness_types)):\n                if imported_witness_types[i] == 0:\n                    witness_type0+=1\n                elif imported_witness_types[i] == 1:\n                    witness_type1+=1\n                elif imported_witness_types[i] == 2:\n                    witness_type2+=1\n            print(\"Retrieved data from \" + str(witness_type0) + \" active witness(es), \" + str(witness_type1)\n                  + \" passive witness(es), \" + str(witness_type2) + \" inactive witness(es).\")\n        if len(selected_vectors) == 0:\n            return [],[],[]                                 \n        if len(selected_vectors) == 1:\n            tot_frames = 1\n        elif len(selected_vectors) == 2:\n            tot_frames = 25\n        else:\n            tot_frames = int(50\/(1.2*len(selected_vectors)))\n        \n        animation_frames_z = []\n        if (weighted_animation is False) or (imported_data is None):\n            animation_frames_z = utility_functions.create_animation_adv(selected_vectors, tot_frames = tot_frames, method = 1, witness_types = None)\n        else:\n            animation_frames_z = utility_functions.create_animation_adv(selected_vectors, tot_frames = tot_frames, method = 1, witness_types = witness_types)\n        #print(\"Creating animation images for each frame\")\n        animation_frames_img = []\n        animation_frames_bytes = []\n        for i in range(0,len(animation_frames_z)):\n            animation_frames_img.append(generate_image.gen_single_img(animation_frames_z[i], Gs=Gs))\n            animation_frames_bytes.append(img_to_bytes(animation_frames_img[i]))\n            print_progress(i+1, len(animation_frames_z))\n    print(\"DONE\")\n    return animation_frames_img, animation_frames_z, animation_frames_bytes\n\ndef get_user_selected_vectors():\n    selected_vectors = []\n    for i in range (0, len(selected_images)):\n        if selected_images[i] == True:\n            selected_vectors.append(population[i])\n    return selected_vectors\n\ndef animate_slider (figure_to_update, anim_step_size = -1): #list of images to iterate among and the image placeholder that has to be updated\n    if animation_frames_bytes == []:\n        anim_images, anim_vectors, anim_bytes = get_animation_frames()\n    else:\n        anim_bytes = animation_frames_bytes\n    \n    if anim_step_size == -1:\n        for i in range(0, len(anim_images)):\n            figure_to_update.value = anim_bytes[i]\n    else:\n        figure_to_update.value = anim_bytes[anim_step_size]\n\ndef on_value_change(x):\n    global population, images_indexes, anim_placeholder, slider_index\n    if x.name == 'value':\n        selection = int(x.new)\n        slider_index = 0\n        animate_slider(anim_placeholder, selection)\n        \ndef export_backup():\n    vectors_str = '[[' + ('], ['.join(', '.join(str(y) for y in x) for x in population)) + ']]'\n    popup(str(texts_dic[\"info_save_vectors_to_share\"]), str(vectors_str))\n\ndef export_backup_selection():\n    selected_vectors_str = str(get_user_selected_vectors()).replace('array', '').replace('(', '').replace(')', '')\n    popup(str(texts_dic[\"info_save_vectors_to_share\"]), str(selected_vectors_str))\n        \ndef export_animation(isOnlyCurrentImage):\n    global export_animation\n    if imported_data is None:\n        selected_vectors_str = str(get_user_selected_vectors()).replace('array', '').replace('(', '').replace(')', '')\n        vectors_to_export = get_user_selected_vectors()\n    else:\n        selected_vectors_temp = np.vstack(imported_data)\n        selected_vectors_str = '[[' + ('], ['.join(', '.join(str(y) for y in x) for x in selected_vectors_temp)) + ']]'\n        vectors_to_export = selected_vectors_temp\n    \n    anim_images, anim_vectors, anim_bytes = get_animation_frames()\n    if isOnlyCurrentImage:\n        single_frame_str = \"[[\"+str(', '.join(str(y) for y in anim_vectors[slider_index])).replace('array', '').replace('(', '').replace(')', '')+\"]]\"\n        popup(str(texts_dic[\"info_save_vectors_to_share\"]), str(single_frame_str))\n    else:\n        popup(str(texts_dic[\"info_save_vectors_to_share\"]), str(selected_vectors_str))\n    \n    if kaggle is False:\n        path = '.\/asset_results\/sessions_data\/'\n        if(imported_data):\n            path += 'multiple_witness_merge\/'\n        if isOnlyCurrentImage:\n            utility_functions.export_gif(anim_images[slider_index], path + str(session_name), str(witness_name) + '.gif', fps = 30, witness_type = witness_type)\n        else:\n            utility_functions.export_gif(anim_images, path + str(session_name), str(witness_name) + '.gif', fps = 30, witness_type = witness_type)\n        utility_functions.export_session_data(vectors_to_export, path + str(session_name), str(witness_name) + '.h5', witness_type = witness_type)\n        utility_functions.export_session_data_txt(str(selected_vectors_str), path + str(session_name), str(witness_name) + '.txt', witness_type = witness_type)\n        utility_functions.export_session_png(anim_images[0], path + str(session_name), str(witness_name) + '.png', witness_type = witness_type)\n    else:\n        print(\"exporting files is only allowed locally, not on Kaggle. Printing the latent vectors instead.\")\n        #anim_images, anim_vectors = get_animation_frames()\n        #path = '\/kaggle\/working\/asset_results\/sessions_data\/'\n        #utility_functions.export_gif(anim_images, path + str(session_name), str(witness_name) + '.gif', fps = 30)\n        #utility_functions.export_session_data(get_user_selected_vectors(), '\/kaggle\/output\/asset_results\/sessions_data\/' + str(session_name), str(witness_name) + '.h5')\n        #create_download_gif(anim_images)\n        #show_downloads()\n    \n#def create_download_gif(images, title = \"Download GIF\", filename = \"gif.gif\", path = \"\/kaggle\/working\/\"): \n#    import IPython\n#    with open('\/kaggle\/output\/asset_results\/sessions_data\/abc\/ab.gif','rb') as image:\n#        image_reader = image.read()\n#        image_encode = base64.b64encode(image_reader)\n#    payload = base64.b64decode(image_encode)\n#    html = '<a download=\"{filename}\" href=\"data:image\/gif;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n#    html = html.format(payload=payload,title=title,filename=filename)\n#    display(IPython.display.HTML(html))\n    \n#def show_downloads():\n#    from IPython.display import FileLinks\n#    display(FileLinks('\/kaggle\/working\/asset_results')) # input argument is specified folder\n        \ndef open_final_gui():\n    global images, main_panel, population, images_indexes, anim_placeholder, imported_data, accordion, slider_index  \n    \n    anim_images, anim_vectors, anim_bytes = get_animation_frames()\n    count = len(anim_images)\n    if count == 0:\n        popup(\"warning\", texts_dic[\"select_images\"])\n    else:\n        clear_output()\n        slider_index = 0\n        if imported_data is None :\n            try:\n                accordion.close()\n            except:\n                pass\n        else:\n            try:\n                accordion.close()\n            except:\n                pass\n            accordion = None\n            \n        buttonLayout = Layout(height='{:.0f}px'.format(40), width='{:.0f}px'.format(200), margin='10px 4px 10px 4px')\n        \n        anim_placeholder = Image(value=img_to_bytes(anim_images[0]), format='png', width=460, height=460, margin='5px 0px 5px 0px')\n        export_gif_button = Button(icon=\"save\", description = texts_dic[\"export_gif\"], button_style= 'success', layout = buttonLayout, tooltip=texts_dic[\"export_gif_button\"])\n        export_current_frame_button = Button(icon=\"save\", description = texts_dic[\"export_frame\"], button_style= 'success', layout = buttonLayout, tooltip=texts_dic[\"export_image_button\"])\n        goback_button = Button(icon=\"arrow-left\", description = texts_dic[\"go_back\"], button_style= 'success', layout = buttonLayout, tooltip=texts_dic[\"go_back_button\"])\n\n        export_gif_button.on_click(lambda event: export_animation(False))\n        \n        if imported_data is None:\n            goback_button.on_click(lambda event: go_back(final_panel, \"main_gui\"))\n        else:\n            goback_button.on_click(lambda event: go_back(final_panel, \"start\"))\n\n        if count == 1:\n            export_current_frame_button.on_click(lambda event: export_animation(True))\n            final_panel = VBox([ \n                HBox([HTML('<b>SESSION:<\/b> '+session_name+' - <b>WITNESS:<\/b> '+witness_name+'')]),\n                HBox ([goback_button, export_gif_button]), anim_placeholder], #, enable_slider]),\n                layout = Layout(height='1300}px', width='1000px', margin='20px 20px 20px 20px'), \n            )\n\n        elif count >= 2:\n            play = Play( value=0, min=0, max=len(anim_vectors)-1, step=1, description=\"Press play\", disabled=False, interval = 300, show_repeat=True )\n            anim_slider = IntSlider(value=0, min=0, max=len(anim_vectors)-1, step=1, readout=True, readout_format='d', disabled=False )#description='Changes amount:',\n            anim_slider.observe(on_value_change)\n            widgets.jslink((play, 'value'), (anim_slider, 'value'))\n            export_current_frame_button.on_click(lambda event: export_animation(True))\n                                                 \n            final_panel = VBox([ \n                HBox([HTML('<b>SESSION:<\/b> '+session_name+' - <b>WITNESS:<\/b> '+witness_name+'')]),\n                HBox([goback_button, export_gif_button, export_current_frame_button]), \n                anim_placeholder, \n                Box([play, anim_slider])],\n                layout = Layout(height='1300}px', width='1000px', margin='20px 20px 20px 20px'), \n            )\n        display(final_panel)","354ca919":"def popup(title, string):\n    from IPython.display import display, Javascript\n    display(Javascript(\"\"\"\n    requirejs(\n        [\"base\/js\/dialog\"], \n        function(dialog) {\n            dialog.modal({\n                title: '\"\"\" + str(title) + \"\"\"',\n                body: '\"\"\" + str(string.replace('\\r','').replace('\\n','')) + \"\"\"',\n                buttons: {\n                    'close': {}\n                }\n            });\n        })\n    \"\"\"))","94449fcd":"def run():\n    global imported_data\n    imported_data = None\n    initialize()\n    create_initial_choices()","eb5ca98e":"run()","a03a8288":"# IE-GAN (InteractiveEvolution-GAN)\nThis is the preview of the thesis project ie-GAN, by **Luisa Zurlo** (luzu@itu.dk) and **Nicola Zaltron** (niza@itu.dk).<br>**The project is based on TL-GAN (https:\/\/github.com\/SummitKwan\/transparent_latent_gan) and PG-GAN (https:\/\/github.com\/tkarras\/progressive_growing_of_gans).**\n\nThe software is used to partially automatize composite sketching sessions by combining AI techniques<br>(i.e. Generative Adversarial Networks, Interactive Evolutionary Computation, Convolutional Neural Networks, etc.).\n\n### To use the software follow these steps:\n1. Fork the Kaggle kernel (top-left blue **FORK** button) - or **EDIT** if you already forked one.\n2. You can switch language (english-italian) in the first cell of the notebook.\n3. On the forked kernel, select **Run** -> **Run All**.\n4. Navigate to the bottom of the page and interact with the GUI.\n5. Specific instructions are given within the UI, to guide the user through the composite creation process.\n6. Tip1: close the right bar so you have extra working space (top-right corner, arrow button).\n7. Tip2: use a mouse. Kaggle is not so kind when you unexpectedly do a \"go back\" gesture on touchpad, and everything will be lost.\n8. Tip3: use the **BACKUP** button in the GUI.","2543d6f2":"**Language selection** (en-it suported):\n\nComment (by typing \"#\" at the beginning of the line) the laguage that you are NOT interested in<br>\nCommenta (inserendo \"#\" all'inizio della riga) la lingua NON desiderata"}}