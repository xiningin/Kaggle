{"cell_type":{"384c5b1d":"code","283ceeda":"code","c3b4abc4":"code","027e6c19":"code","a386df4a":"code","bd3dd53a":"code","9224acd3":"code","f239e225":"code","1ec6e71b":"code","46c5a652":"code","f64f2f41":"code","af041ff1":"code","2837f88f":"code","6c578ed3":"code","489016d0":"code","2eeabcdc":"code","a9b6a395":"code","e3d7d021":"code","565c6f9d":"code","4caf91d1":"markdown","7d0e1902":"markdown","efce6ed5":"markdown","43635947":"markdown","95f6a44c":"markdown","3ca2f7a9":"markdown","6781b18e":"markdown","f53511d7":"markdown","70ae682b":"markdown","f26db804":"markdown","bc0e2df8":"markdown","05565595":"markdown","027bcba7":"markdown","2a97e7dd":"markdown","1ccc2c01":"markdown"},"source":{"384c5b1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","283ceeda":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\n","c3b4abc4":"data= pd.read_csv('\/kaggle\/input\/navalplantmaintenance\/navalplantmaintenance.csv',delim_whitespace=True, header=None)\nprint(data.shape)\ndata.head()","027e6c19":"## Naming column and drop nan values, conduct complete data frame\ndata.columns = ['lever_position', 'ship_speed', 'gt_shaft', 'gt_rate', 'gg_rate', 'sp_torque', 'pp_torque',\n                     'hpt_temp', 'gt_c_i_temp', 'gt_c_o_temp', 'hpt_pressure', 'gt_c_i_pressure', 'gt_c_o_pressure',\n                     'gt_exhaust_pressure', 'turbine_inj_control', 'fuel_flow', 'gt_c_decay',  'gt_t_decay']\ndata = data.dropna()\ndata.head()","a386df4a":"data.describe()","bd3dd53a":"data.isna().sum()\/len(data)","9224acd3":"## Correlation matrix\nnp.round(data.corr(),4)","f239e225":"data=data.drop('gt_c_i_temp', axis=1)\ndata=data.drop('gt_c_i_pressure',axis=1)\ndata.head()","1ec6e71b":"X=data[['lever_position', 'ship_speed', 'gt_shaft', 'gt_rate', 'gg_rate', 'sp_torque',\n        'pp_torque', 'hpt_temp', 'gt_c_o_temp', 'hpt_pressure', 'gt_c_o_pressure','gt_exhaust_pressure',\n        'turbine_inj_control', 'fuel_flow']]\nY1=data['gt_c_decay']\nY2=data['gt_t_decay']\nY=pd.DataFrame([Y1,Y2]).transpose()\nprint(Y.shape)\nY.head()","46c5a652":"print(X.shape)\nX.head()\n","f64f2f41":"plt.figure(figsize =(15,8))\n\nax1 = plt.subplot(1,2,1)\nsns.lineplot(data=Y, x=Y.index, y='gt_c_decay')\nax1.set_xlabel('Time')\nax1.set_ylabel('kMc')\nax1.set_title('kMc over time')\n\nax2 = plt.subplot(1,2,2,sharey=ax1)\nsns.lineplot(data=Y, x=Y.index, y='gt_t_decay')\nax2.set_xlabel('Time')\nax2.set_ylabel('kMt')\nax2.set_title('kMt over time')","af041ff1":"plt.figure(figsize=(20,20))\nsns.heatmap(data.corr(), cmap = 'viridis', linewidth =1, annot=True, annot_kws = {'size':9})\nplt.title('Correlation of features')","2837f88f":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,Y)\nX_train_c,X_test_c,y_train_c,y_test_c=train_test_split(X,Y1)\nX_train_t,X_test_t,y_train_t,y_test_t=train_test_split(X,Y2)\nprint(X_train.shape)\nprint(y_train.shape)\nX_train.head()","6c578ed3":"from sklearn.preprocessing import StandardScaler\nX_train_s = StandardScaler().fit_transform(X_train.values)\nX_train_s  = pd.DataFrame(X_train_s, index = X_train.index,columns = X_train.columns )\nX_test_s = StandardScaler().fit_transform(X_test.values)\nX_test_s  = pd.DataFrame(X_test_s, index = X_test.index,columns = X_test.columns )","489016d0":"#import library\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import explained_variance_score\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor","2eeabcdc":"models = [('LinearRegression', LinearRegression()),\n          ('RandomForestRegressor', RandomForestRegressor()),\n          ('KNeighborsRegressor', KNeighborsRegressor()),\n          ('DecisionTreeRegressor',DecisionTreeRegressor()),\n          ('BaggingRegressor' , BaggingRegressor()),\n          ('XGBRegressor', XGBRegressor())]\n\n\nfor name , model in models:\n    model.fit(X_train_c, y_train_c)\n    r2_score =model.score(X_test_c, y_test_c)\n    print(\"Score of model: \" + str(name)+ 'is: '+ str(r2_score))\n ","a9b6a395":"models = [('LinearRegression', LinearRegression()),\n          ('RandomForestRegressor', RandomForestRegressor()),\n          ('KNeighborsRegressor', KNeighborsRegressor()),\n          ('DecisionTreeRegressor',DecisionTreeRegressor()),\n          ('BaggingRegressor' , BaggingRegressor()),\n          ('XGBRegressor', XGBRegressor())]\n\n\nfor name , model in models:\n    model.fit(X_train_t, y_train_t)\n    r2_score =model.score(X_test_t, y_test_t)\n    print(\"Score of model: \" + str(name)+ 'is: '+ str(r2_score))\n ","e3d7d021":"from sklearn.decomposition import PCA\nselect_components = PCA(random_state=72)\nselect_components.fit(X_train)\nvariation = np.cumsum(select_components.explained_variance_ratio_)\ncomponents = np.arange(1,15)\nplt.figure(figsize =(15,8))\nsns.lineplot(x=components, y=variation)","565c6f9d":"## Choose 3 best principal components\npca_comp = PCA(n_components = 3, random_state =72)\n# PCA on Compressor\nXGB=XGBRegressor()\nX_train_c_pca = pca_comp.fit_transform(X_train_c)\nX_test_c_pca = pca_comp.fit_transform(X_test_c)\nXGB.fit(X_train_c_pca, y_train_c)\nscore1 = XGB.score(X_test_c_pca, y_test_c)\nprint('R_square for PCA regression of Compressor: '+str(score1))\n# PCA on Turbine\nBagg = BaggingRegressor()\nX_train_t_pca = pca_comp.fit_transform(X_train_t)\nX_test_t_pca = pca_comp.fit_transform(X_test_t)\nBagg.fit(X_train_t_pca, y_train_t)\nscore2 = Bagg.score(X_test_t_pca, y_test_t)\nprint('R_square for PCA regression of Compressor: '+str(score2))","4caf91d1":"## Check missing values\n**There is no missing value**","7d0e1902":"**XBGRegressor** is the best model for compressor","efce6ed5":"**Bagging Regressor** is the best model for turbine","43635947":"## Import Data","95f6a44c":"**Data Set Information:**\n\nThe experiments have been carried out by means of a numerical simulator of a naval vessel (Frigate) characterized by a Gas Turbine (GT) propulsion plant. The different blocks forming the complete simulator (Propeller, Hull, GT, Gear Box and Controller) have been developed and fine tuned over the year on several similar real propulsion plants. In view of these observations the available data are in agreement with a possible real vessel.\nIn this release of the simulator it is also possible to take into account the performance decay over time of the GT components such as GT compressor and turbines.\nThe propulsion system behaviour has been described with this parameters:\n- Ship speed (linear function of the lever position lp).\n- Compressor degradation coefficient kMc.\n- Turbine degradation coefficient kMt.\nso that each possible degradation state can be described by a combination of this triple (lp,kMt,kMc).\nThe range of decay of compressor and turbine has been sampled with an uniform grid of precision 0.001 so to have a good granularity of representation.\nIn particular for the compressor decay state discretization the kMc coefficient has been investigated in the domain [1; 0.95], and the turbine coefficient in the domain [1; 0.975].\nShip speed has been investigated sampling the range of feasible speed from 3 knots to 27 knots with a granularity of representation equal to tree knots.\nA series of measures (16 features) which indirectly represents of the state of the system subject to performance decay has been acquired and stored in the dataset over the parameter's space.\nCheck the README.txt file for further details about this dataset.\n\n- A 16-feature vector containing the GT measures at steady state of the physical asset:\nLever position (lp) [ ]\nShip speed (v) [knots]\nGas Turbine (GT) shaft torque (GTT) [kN m]\nGT rate of revolutions (GTn) [rpm]\nGas Generator rate of revolutions (GGn) [rpm]\nStarboard Propeller Torque (Ts) [kN]\nPort Propeller Torque (Tp) [kN]\nHight Pressure (HP) Turbine exit temperature (T48) [C]\nGT Compressor inlet air temperature (T1) [C]\nGT Compressor outlet air temperature (T2) [C]\nHP Turbine exit pressure (P48) [bar]\nGT Compressor inlet air pressure (P1) [bar]\nGT Compressor outlet air pressure (P2) [bar]\nGT exhaust gas pressure (Pexh) [bar]\nTurbine Injecton Control (TIC) [%]\nFuel flow (mf) [kg\/s]\n- GT Compressor decay state coefficient\n- GT Turbine decay state coefficient\n\n\n\n","3ca2f7a9":"## Splitting data for Training and Testing\nsince","6781b18e":"## Model Selection","f53511d7":"## Compressor (kMc)","70ae682b":"**Notice** Even there are strong linear correlation between variables but the correlation score between variables and Kmc, Kmt are very low, to select attributes for fitting model, I used PCA","f26db804":"## Optimize model by reducing feature using PCA","bc0e2df8":"## The target values is the coefficient of compressor (kMc) and turbine (kMc) over the decay state\n\n**Let Y1 is kMc and Y2 is kMt**","05565595":"**Notice** Choosing the first 3 principal components since they are account for the most variations","027bcba7":"## Normalized data","2a97e7dd":"**Drop column**\nThe attributes gt_c_i_temp and gt_c_i_pressure have no correlations, we can notice that that standard dev of the gt_c_i_temp in the data describe is 0, showing that this is a constant, not a variable because it does not change over time","1ccc2c01":"**Notice**\nThe coeeficient of Compressor(kMc) in increase over time from 0.95 to 1 and the coefficient of Turbine fluctuated in the range 0.975 to 1"}}