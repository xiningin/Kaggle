{"cell_type":{"a074c522":"code","b52bd37b":"code","d96c239e":"code","b27b6336":"code","6029a12f":"code","9dd7acde":"code","c206c46a":"code","2db8d1ae":"code","8e6d8252":"code","94f4781f":"code","7adc6c46":"code","46b8317a":"markdown","be7a24f7":"markdown","db48e383":"markdown","04c93ecd":"markdown","a7f19b37":"markdown","8889a2bd":"markdown","7c673cd9":"markdown","9020c51f":"markdown","d6c05447":"markdown","b16e07b6":"markdown","5f1ed61a":"markdown","432fa82a":"markdown"},"source":{"a074c522":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.model_selection import RandomizedSearchCV\nsns.set()\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b52bd37b":"def processDataFrame(file_name):\n    df = pd.read_csv(file_name)\n    print(df.info())\n    print(df.describe())\n    \n    return df\n    \ndef dataCleaning(df):\n    cut_map = {'Fair':1, 'Good':2, 'Very Good':3, 'Premium':4, 'Ideal':5}\n    color_map = {'D':7, 'E':6, 'F':5, 'G':4, 'H':3, 'I':2, 'J':1}\n    clarity_map = {'I1':1, 'SI1':2, 'SI2':3, 'VS1':4, 'VS2':5, 'VVS1':6, 'VVS2':7, 'IF':8}\n        \n    df.cut = df.cut.replace(cut_map)\n    df.color = df.color.replace(color_map)\n    df.clarity = df.clarity.replace(clarity_map)\n    \n    df.x[df.x == 0.0] = df.x.mean()\n    df.y[df.y == 0.0] = df.y.mean()\n    df.z[df.z == 0.0] = df.z.mean()\n    \n    df.dropna()\n    df.reset_index(drop = True)\n    \n    return df\n\ndef countplotConstructor(df):\n    fig, axes = plt.subplots(nrows = 3, figsize = (15, 15))\n    sns.countplot(x = 'cut', data = df, ax = axes[0], order = ['Fair', 'Good', 'Very Good', 'Premium', 'Ideal'])\n    sns.countplot(x = 'color', data = df, ax = axes[1], order = ['J', 'I', 'H', 'G', 'F', 'E', 'D'])\n    sns.countplot(x = 'clarity', data = df, ax = axes[2], order = ['I1', 'SI2', 'SI1', 'VS2', 'VS1', 'VVS2', 'VVS1', 'IF'])\n    \n    plt.tight_layout()\n    \ndef histogramConstructor(df):\n    columns = ['carat', 'depth', 'table', 'price', 'x', 'y', 'z']\n    fig, axes = plt.subplots(nrows = len(columns), figsize = (18, 18))\n    for i in range(len(columns)):\n        sns.distplot(df[columns[i]], kde = True, ax = axes[i])\n        axes[i].set(xlabel = columns[i], ylabel = 'frequency', title = columns[i])\n    \n    plt.tight_layout()    \n\ndef boxplotConstructor(df):\n    columns = ['carat', 'depth', 'table', 'price', 'x', 'y', 'z']\n    fig, axes = plt.subplots(nrows = len(columns), figsize = (18, 18))\n    for i in range(len(columns)):\n        sns.boxplot(df[columns[i]], ax = axes[i])\n    \n    plt.tight_layout()    \n\ndef scatterplotConstructor(df, ylabel, a, c):\n    fig, axes = plt.subplots(nrows = 2, ncols = 3, figsize = (18, 18))\n    axes[0, 0].scatter(df.carat, df.price, alpha = a, color = c)\n    axes[0, 1].scatter(df.depth, df.price, alpha = a, color = c)\n    axes[0, 2].scatter(df.table, df.price, alpha = a, color = c)\n    axes[1, 0].scatter(df.x, df.price, alpha = a, color = c)\n    axes[1, 1].scatter(df.y, df.price, alpha = a, color = c)\n    axes[1, 2].scatter(df.z, df.price, alpha = a, color = c)\n\n    axes[0, 0].set(xlabel = 'carat', ylabel = ylabel, title = 'price vs carat')\n    axes[0, 1].set(xlabel = 'depth', ylabel = ylabel, title = 'price vs depth')\n    axes[0, 2].set(xlabel = 'table', ylabel = ylabel, title = 'price vs table')\n    axes[1, 0].set(xlabel = 'x-dimension', ylabel = ylabel, title = 'price vs x-dimension')\n    axes[1, 1].set(xlabel = 'y-dimension', ylabel = ylabel, title = 'price vs y-dimension')\n    axes[1, 2].set(xlabel = 'z-dimension', ylabel = ylabel, title = 'price vs z-dimension')\n\n    plt.tight_layout()\n\ndef printMetrics(y_test, predictions):\n    mae = metrics.mean_absolute_error(y_test, predictions)\n    mse = metrics.mean_squared_error(y_test, predictions)\n    mape = np.mean(np.abs(y_test - predictions) \/ np.abs(y_test))\n    \n    print('Mean Absolute Error: ', mae)\n    print('Mean Squared Error: ', mse)\n    print('Root Mean Squared Error: ', np.sqrt(mse))\n    print('Mean Absolute Percentage Error: ', round(mape * 100, 2), '%')\n    print('Accuracy: ', round(100 * (1 - mape), 2), '%')\n    \ndef residualPlotConstructor(y_test, predictions, a, c1, c2):\n    fig, ax = plt.subplots()\n    ax.set(xlabel = 'Predicted Price', ylabel = 'Actual Price - Predicted Price', title = 'Residual Plot')\n    ax.scatter(predictions, y_test - predictions, alpha = a, color = c1)\n    ax.axhline(y = 0, color = c2)","d96c239e":"file_name = '\/kaggle\/input\/diamonds\/diamonds.csv'\ndf = processDataFrame(file_name)\ndf[df == 0.0].count(axis = 0)","b27b6336":"print(df.cut.unique())\nprint(df.color.unique())\nprint(df.clarity.unique())\ncountplotConstructor(df)","6029a12f":"df.corr()","9dd7acde":"df = dataCleaning(df)\ny = df.price\nX = df.drop(columns = ['Unnamed: 0', 'depth', 'price'])","c206c46a":"histogramConstructor(df)","2db8d1ae":"boxplotConstructor(df)","8e6d8252":"scatterplotConstructor(df, 'price', a = 0.2, c = 'tan')","94f4781f":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 42)\nregressor = RandomForestRegressor()\nregressor.fit(X_train, y_train)\npredictions = regressor.predict(X_test)","7adc6c46":"printMetrics(y_test, predictions)\nresidualPlotConstructor(y_test, predictions, 0.15, 'firebrick', 'maroon')","46b8317a":"# THE MODEL","be7a24f7":"## Function Definitions\n* ***processDataFrame(file_name)***: takes a file name, loads data in CSV format, and outputs a data frame\n* ***dataCleaning(df)***: takes a data frame, encodes categorical variables, imputes missing values, and outputs the updated data frame\n* ***countplotConstructor(df)***: takes a data frame and constructs countplots for the categorical variables\n* ***histogramConstructor(df)***: takes a data frame, constructs histograms for the quantitative variables, and fits a kernel density estimate to the histogram\n* ***scatterplotConstructor(df, a, c)***: takes a data frame, transparency parameter, and a color parameter; it creates six scatter plots, one per predictor variable\n* ***printMetrics(y_test, predictions)***: takes the actual and the predicted diamond prices and calculates some relevant performance metrics\n* ***residualPlotConstructor(y_test, predictions, a, c1, c2)***: takes the actual and predicted diamond prices, a transparency parameter, and two color parameters; it constructs a residual plot","db48e383":"For low predicted prices, the residuals are closely centered around y = 0. As predicted price increases, the residuals start diverging from y = 0, but still mostly concentrate around the horizontal line.","04c93ecd":"# THE DATA","a7f19b37":"## Import Libraries and Packages","8889a2bd":"The majority of the variables \u2014 except for ***depth*** \u2014 are highly correlated with ***price***. ","7c673cd9":"### The boxplots make more explicit what the histograms and kde's suggest. Each variable has a considerable number of outliers, either on one or both ends of the distribution. There is nothing about the data to suggest that the outliers are typos or incorrect in some other way. Removing them might lead to a better model fit, but doing so would also remove some of the nuance and variation of the data. Regular multivariate regression and other techniques can be sensitive to extreme values. To avoid this problem, I retained the outliers but used a random forest regressor, which is more robust to outliers.","9020c51f":"# INTRODUCTION","d6c05447":"## Performance Metrics & Residual Plot","b16e07b6":"## Data Exploration\nThe data frame has a 53940x10 shape. There are no obvious missing values. However, a brief inspection of the statistical summary shows that there are some hidden missing values. The minimum values for the variables ***x***, ***y***, ***z*** are ***0.0***. Since the three variables represent physical dimensions, a measure of ***0.0*** does not make sense. The ***0.0*** is likely a placeholder for missing values. Compared to the overall size of the data set, the number of missing values is negligible; however, I still imputed the missing values by replacing the ***0.0***'s in each column with the average of the corresponding variable.","5f1ed61a":"I retained all predictors except for ***Unnamed: 0*** (the index column) and ***depth***.","432fa82a":"### The variables ***carat,*** ***price,*** and ***x*** are skewed to the right. The distributions of the variables ***table,*** ***y,*** and ***z*** are jagged. The variable ***depth*** is fairly symmetric, but even that distribution has long tails on each side, suggesting potential extreme values."}}