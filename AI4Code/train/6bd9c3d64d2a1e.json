{"cell_type":{"c884a414":"code","d13f4d17":"code","a6c3df52":"code","fe094ebc":"code","d92e7b07":"code","be579cf1":"code","dc69d4f7":"code","824d9f4b":"code","c21c5130":"code","67f3c60b":"code","a56153f3":"code","2ad84ae0":"code","00a71578":"code","f016b84d":"code","7ed5cd90":"code","a94042a8":"code","b1d62d26":"code","6116fdc3":"markdown","a2ca411d":"markdown","d59b7b09":"markdown","09b06893":"markdown","a3d90f8d":"markdown","2b7cf98f":"markdown","1fa09a80":"markdown","42d6f0f0":"markdown","bd1fcf64":"markdown","0d00eeb1":"markdown","cc0c56df":"markdown","fe69d223":"markdown","626f0d83":"markdown","f7f27cb3":"markdown","03403644":"markdown","2be1df04":"markdown","7ece0503":"markdown","4a223f48":"markdown","1709e4be":"markdown","70ea7218":"markdown","a2238a75":"markdown","b25b1900":"markdown","c9c19cd2":"markdown","f7b14101":"markdown","7b1bc782":"markdown"},"source":{"c884a414":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d13f4d17":"df1 = pd.read_csv(\"\/kaggle\/input\/titled-chess-players-india-july-2020\/indian_titled_players_july_2020.csv\")\ndf1.head()","a6c3df52":"df2 = df1.drop(columns=\"Fide id\")\ndf2.head()","fe094ebc":"df3 = df2.copy()\n\ndf3['Year_of_birth'] = df3['Year_of_birth'].apply(lambda x:2020-x)\ndf3.head()","d92e7b07":"df4 = df3.drop(columns=\"Federation\")\ndf4.head()","be579cf1":"df5 = df4.copy()\ndf5 = df5.rename({\"Year_of_birth\": \"Age\"}, axis=1)\ndf5.tail()","dc69d4f7":"df5.isnull().sum()","824d9f4b":"#Function to find the number of zeroes\ndef zero(series):\n    count = 0\n    for x in range(len(df5)):\n        if (df5[series][x] == 0):\n            count += 1\n    return count\n\nb = zero('Blitz_rating')\nr = zero('Rapid_rating')\n\nprint(\"The no of zero values in Rapid Rating are: %d\"%(r))\nprint(\"The no of zero values in Blitz Rating are: %d\"%(b))","c21c5130":"df5[\"Standard_Rating\"].mean()","67f3c60b":"plt.style.use('ggplot')\n\n#Print indexes in a list\nx = [i for i in range(1,425)]\n\n#Print Standard and Blitz values\nStandard = df5.iloc[:,4].values\nBlitz = df5.iloc[:,6].values\n\nfig1, ax1 = plt.subplots()\nfig2, ax2 = plt.subplots()\nfig3, ax3 = plt.subplots()\n\n#Function for Rating Values with no zeroes\ndef zeroes(series):\n    L = []\n    count = 0\n    for value in df5[series]:\n        if(value != 0):\n            L.append(value)\n    return L\n\n#Function for Rating count with no zeroes\ndef count(series):\n    x=0\n    count = []\n    for value in df5[series]:\n        if(value != 0):\n            x=x+1;\n            count.append(x)\n    return count\n\nrapid = zeroes('Rapid_rating')\nrapid_count = count('Rapid_rating')\n\nblitz = zeroes(\"Blitz_rating\")\nblitz_count = count(\"Blitz_rating\")\n\nax1.scatter(x, Standard, label='Standard Rating')\nax2.scatter(rapid_count, rapid, label='Rapid Rating', color=\"green\")\nax3.scatter(blitz_count, blitz, label='Blitz Rating', color=\"Blue\")\n\nax1.set_ylabel(\"Standard\")\nax2.set_ylabel(\"Rapid\")\nax3.set_ylabel(\"Blitz\")\n\nax1.legend()\nax2.legend()\nax3.legend()\n\nplt.xlabel(\"Player No\")\n\nplt.show()\n\nprint(\"The mean of Standard Rating is: \", round(df5[\"Standard_Rating\"].mean()),0)\nprint(\"The mean of Rapid Rating (Excluding 0) is: \",round(sum(rapid)\/rapid_count[-1]),0)\nprint(\"The mean of Blitz Rating (Excluding 0) is: \",round(sum(blitz)\/blitz_count[-1]),0)","a56153f3":"def average(series, gender):\n    count = 0\n    sum = 0\n    avglist = []\n    for x in range(len(df5)):\n        if (df5[series][x] != 0):\n            if(df5['Gender'][x]==gender):\n                avglist.append(df5[series][x])\n    mean = np.mean(avglist)\n    return mean","2ad84ae0":"filt1 = df5['Gender'] == 'M'\nfilt2 = df5['Gender'] == 'F'\n\n#Since Standard Rating has no 0 values, we can directly use the mean method\nmeanMS = df5['Standard_Rating'].loc[filt1].mean()\nmeanFS = df5['Standard_Rating'].loc[filt2].mean()\n\n#We use the function for both rapid and blitz rating to remove 0 values and accurately calculate mean.\nmeanMR = average(\"Rapid_rating\",\"M\")\nmeanFR = average(\"Rapid_rating\",\"F\")\n\nmeanMB = average(\"Blitz_rating\",\"M\")\nmeanFB = average(\"Blitz_rating\",\"F\")\n\nN = 2\nind = np.arange(N)    \nwidth = 0.15     \n\n#We add and subtract 0.15 to make the bars side by side\np1 = plt.bar(ind-0.15, [meanMS,meanFS], width=0.15, label=\"Standard\")\np2 = plt.bar(ind, [meanMR,meanFR], width=0.15, label=\"Rapid\")\np3 = plt.bar(ind+0.15, [meanMB,meanFB], width=0.15, label=\"Blitz\")\n\nplt.ylabel('Rating')\nplt.title(\"Mean of all Ratings\")\nplt.xticks(ind, ('Male',\"Female\"))\nplt.yticks(np.arange(0, 2500, 200))\nplt.legend(loc=\"upper center\")\n\nplt.tight_layout()\n\nplt.show()\n\nprint(\"For Males, the Average Standard Rating is %d, Rapid Rating is %d, and Blitz Rating is %d\" %(meanMS, meanMR, meanMB))\nprint(\"For Females, the Average Standard Rating is %d, Rapid Rating is %d, and Blitz Rating is %d\" %(meanFS, meanFR, meanFB))","00a71578":"filt1 = df5['Gender'] == 'M'\nfilt2 = df5['Gender'] == 'F'\n\n#Since Standard Rating has no 0 values, we can directly use the mean method\nmeanMS = df5['Standard_Rating'].loc[filt1].mean()\nmeanFS = df5['Standard_Rating'].loc[filt2].mean()\n\n#We use the function for both rapid and blitz rating to remove 0 values and accurately calculate mean.\nmeanMR = average(\"Rapid_rating\",\"M\")\nmeanFR = average(\"Rapid_rating\",\"F\")\n\nmeanMB = average(\"Blitz_rating\",\"M\")\nmeanFB = average(\"Blitz_rating\",\"F\")\n\n#Subplots\nfig1, (ax1,ax2,ax3) = plt.subplots(nrows=1, ncols=3, sharex=True, sharey=True)\n\nax1.bar(['M','F'],[meanMS,meanFS], width=0.35, label=\"Standard Rating\")\nax2.bar(['M','F'],[meanMR,meanFR], width=0.35, label=\"Rapid Rating\", color=\"#233342\")\nax3.bar(['M','F'],[meanMB,meanFB], width=0.35, label=\"Blitz Rating\", color=\"#234223\")\n\nax1.set_ylabel(\"Standard\")\nax2.set_ylabel(\"Rapid\")\nax3.set_ylabel(\"Blitz\")\n\nax2.set_xlabel(\"Gender\")\n\nplt.tight_layout()\n\nplt.show()","f016b84d":"#To check for any 0 values\nprint(\"The number of 0 values in Age column are: \",zero(\"Age\"))\n\n#No zero values, so we can move forward","7ed5cd90":"df5[\"Age\"].nlargest(10)\n\n#85 is an outlier, hence let us not consider it. Since it is only one value, it wont affect our analysis much if we delete it\n\ndf6 = df5.drop(173)\ndf6.reset_index(drop=True)\ndf6[\"Age\"].nlargest(10)  \n\n\n#Now we will use the df6 dataframe for the age analysis","a94042a8":"# Function to insert row in the dataframe, as we need consistent indexes. I renamed the record to XXXX and made his age the mean age\ndef Insert_row(row_number, df, row_value): \n    start_upper = 0\n   \n    end_upper = row_number \n \n    start_lower = row_number \n\n    end_lower = df.shape[0] \n\n    upper_half = [*range(start_upper, end_upper, 1)] \n\n    lower_half = [*range(start_lower, end_lower, 1)] \n\n    lower_half = [x.__add__(1) for x in lower_half] \n\n    index_ = upper_half + lower_half \n\n    df.index = index_ \n\n    df.loc[row_number] = row_value \n \n    df = df.sort_index() \n\n    return df \n   \n# Let's create a row which we want to insert \nrow_number = 173\nrow_value = ['XXXX', 30, \"M\",'IM',2315,0,0] \n  \nif row_number > df6.index.max()+1: \n    print(\"Invalid row number\") \nelse: \n      \n    # Let's call the function and insert the row \n    # at the 173rd position \n    df6 = Insert_row(row_number, df6, row_value) \n   \n     \ndf6.loc[170:180]","b1d62d26":"plt.style.use('fivethirtyeight')\n\n#To generate subplots\nfig1, ax1 = plt.subplots(sharey=True)\nfig2, ax2 = plt.subplots(sharey=True)\nfig3, ax3 = plt.subplots(sharey=True)\n\ndef GenderValues(series,gender):\n    g_values = []\n    for x in range(len(df6)):\n        if(df6['Gender'][x] == gender):\n            k = df6[series][x]\n            g_values.append(k)\n    return g_values\n\nbins = []\nx = 0\nwhile x<90:\n    bins.append(x)\n    x = x + 5\n\n#We convert the values to a List, for easy graphing\nages_no_gender = df6[\"Age\"].values\nages_male = GenderValues(\"Age\",\"M\")\nages_female = GenderValues(\"Age\",\"F\")\n\n#The main graphing code\nax1.hist(ages_no_gender, bins=bins,histtype='bar', label=\"Ages of all Genders\", edgecolor=\"black\")\nax2.hist(ages_male, bins=bins, histtype=\"bar\", label=\"Ages of Males\", edgecolor=\"Black\")\nax3.hist(ages_female, bins=bins, histtype=\"bar\", label=\"Ages of Females\", edgecolor=\"Black\")\n\n#We calculate the mean of the ages, respective of Gender\nmean_age = df6[\"Age\"].mean()\nmean_age_male = average(\"Age\",\"M\")\nmean_age_female = average(\"Age\",\"F\")\n\n#We plot a line to show where the mean is\nax1.axvline(mean_age, color=\"#c70e24\", label='Age Mean of all Genders', linewidth=2)\nax2.axvline(mean_age_male, color=\"#c70e24\", label='Age Mean of Males', linewidth=2)\nax3.axvline(mean_age_female, color=\"#c70e24\", label='Age Mean of all Females', linewidth=2)\n\n#Titles\nax1.set_title('Ages of all Grand-Masters')\nax2.set_title('Ages of all Male Grand-Masters')\nax3.set_title(\"Ages of all Female Grandmasters\")\n\n#Labels for X-Axis\nax1.set_xlabel('Ages')\nax2.set_xlabel('Ages')\nax3.set_xlabel('Ages')\n\n#Labels for Y-Axis\nax1.set_ylabel('Occurence')\nax2.set_ylabel('Occurence')\nax3.set_ylabel('Occurence')\n\n#The Limits for the Y graph\naxes = plt.gca()\nax1.set_ylim([0,80])\nax2.set_ylim([0,60])\nax3.set_ylim([0,60])\n\n#Legends\nax1.legend()\nax2.legend()\nax3.legend()\n\nplt.tight_layout()\n\nplt.show()\n\n#For user reference, how much the mean really is\nprint(\"The Age Mean for all the grandmasters is: \",round(mean_age,1))\nprint(\"The Age Mean for the male grandmasters is: \",round(mean_age_male,0))\nprint(\"The Age Mean for the female grandmasters is: \",round(mean_age_female,0))","6116fdc3":"Removed the Zero Values from the graph (Blitz and Rapid rating had zero values), to make the graph look cleaner, and because they were outliers.","a2ca411d":"Since the \"Fide ID\" is repeated randomly, we can drop it","d59b7b09":"#### Let us look at demographics based on age","09b06893":"First, we realize that Rapid Rating and Blitz Rating have 93 and 86 zero values respectively. This decreases the accuracy of the data, hence when calculating parameters, we will not include these records. Hence, I wrote a function to calculate the mean excluding the 0s","a3d90f8d":"No of zeroes per Rating","2b7cf98f":"### Graph of mean of all Ratings, divided by gender","1fa09a80":"Since everyone is a GrandMaster (checked with df.Federation.unique()), we can drop that column","42d6f0f0":"Average age value (Total, Respective Gender)","bd1fcf64":"Time to check if there are any null values","0d00eeb1":"A slight change, but accurate column names are nice. Year_of_birth ----> Age ","cc0c56df":"This is my first ever project, so I really would appreciate some feedback, be it negative. I chose a relatively simple dataset as I am a beginner. I learnt all this ~1 month, and would therefore appreciate if I could be provided with some helpful tips. If you found my analysis helpful, be sure to upvote. \n### THANK YOU!!!","fe69d223":"First, we read our file \"Titled Chess Players\"","626f0d83":"There are no null values, so that's great as our workload is considerably reduced","f7f27cb3":"### 3 Separate Graphs for Mean Ratings","03403644":"I used a stackplot to simultaneously show all the means at once, however there are people who prefer three different graphs, hence I will display that option too","2be1df04":"### We now visualize the player ratings, based on different criteria","7ece0503":"### Visualization based on Gender","4a223f48":"Except for the Standard Rating data, the visualization is kind of hard to read. Hence we will group the data on different criteria and analyze them ","1709e4be":"I personally find the age of a person to be more desciptive than the Year of Birth. Granted this is not completely accurate \nas they may have birthdays after August, it will give us a general idea\n","70ea7218":"This is the end of my analysis. I have arrived at the following conclusions:\n\n* The means of Standard Ratings, Rapid Ratings and Blitz Ratings are 2232, 2062 and 2113 \n\n* For Males, the Average Standard Rating is 2313, Rapid Rating is 2156, and Blitz Rating is 2215\n* For Females, the Average Standard Rating is 2035, Rapid Rating is 1822, and Blitz Rating is 1846\n\n* The Age Mean for all the grandmasters is:  30.0\n* The Age Mean for the male grandmasters is:  32.0\n* The Age Mean for the female grandmasters is:  26.0","a2238a75":"############################################################################################","b25b1900":"Standard Player Visualization (No Criteria)","c9c19cd2":"#### Here is the graph of the Ratings","f7b14101":"### Graph to visualize Mean Ages","7b1bc782":"The Function:"}}