{"cell_type":{"34efe64c":"code","ea573e29":"code","f904e488":"code","fdfeaba9":"code","5bddd020":"code","0c4f4585":"code","e6fd1d25":"code","c0870f97":"code","c76ae03d":"code","785ce895":"code","1de77ddb":"code","fe202a93":"code","9339a610":"code","025f0c78":"code","789d9392":"code","7b62767e":"code","c8e3e7a6":"code","2d7945f8":"code","5c582021":"code","d01e8e9e":"code","58836187":"code","9621b4a4":"code","7248df87":"code","5426cf11":"code","a88636c1":"code","f0a64754":"code","58f3b994":"markdown","fc54b899":"markdown","e559820b":"markdown","b6b81b63":"markdown","b34e8e78":"markdown","4fbd8528":"markdown","3d5b3d97":"markdown","75dcdb3a":"markdown","9524fc49":"markdown","1d976b78":"markdown","963a8e5d":"markdown","dbc8b5e9":"markdown","0794a00c":"markdown","a6fabae3":"markdown","8df642a6":"markdown","ca97c2fb":"markdown","8b89a5bf":"markdown","b7e4c039":"markdown","1eaae51f":"markdown"},"source":{"34efe64c":"\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","ea573e29":"data = pd.read_csv(\"\/kaggle\/input\/pokemon\/Pokemon.csv\")\ndata = data.drop(\"#\",axis=1)\ndata.head()","f904e488":"desc = data.drop([\"Name\",\"Type 1\",\"Type 2\",\"Generation\",\"Legendary\"],axis=1)\ndesc.describe()","fdfeaba9":"def autolabel(rects,h):\n    for rect in rects:\n        height = rect.get_height()\n        if(height >h):\n            rect.set_color(\"blue\")\n        ax.text(rect.get_x() + rect.get_width()\/2., 1.01*height,'%d' % int(height),ha='center', va='bottom')\n\nplt.figure(figsize=(5,5))\nbars = plt.bar(data[\"Generation\"].unique(), data.groupby(\"Generation\").count()[\"Name\"],color=\"lightgrey\",alpha=0.8)\nax = plt.gca()\nax.axes.get_yaxis().set_visible(False)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.title('number of pokemons across generations')\nautolabel(bars,150)\nplt.show()","5bddd020":"plt.figure(figsize=(20,5))\nbars = plt.bar(data[\"Type 1\"].unique(), data.groupby(\"Type 1\").count()[\"Name\"],color=\"lightgrey\",alpha=0.8)\nax = plt.gca()\nax.axes.get_yaxis().set_visible(False)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.title('Number of pokemons across type 1')\nautolabel(bars,90)\nplt.show()","0c4f4585":"fig,((ax1,ax2,ax3), (ax4,ax5,ax6)) = plt.subplots(2, 3,figsize=(20, 10), sharex=False, sharey=True)\naxs = [ax1,ax2,ax3,ax4,ax5,ax6]\ni=1\nfor ax in axs:\n    bars = ax.bar(data.groupby([\"Generation\",\"Type 1\"]).count().loc[i].index, data.groupby([\"Generation\",\"Type 1\"]).count().loc[i][\"Name\"],color=\"lightgrey\",alpha=0.8)\n    ax.axes.get_yaxis().set_visible(False)\n    ax.set_title(\"Generation \"+str(i), y = 0.7)\n    autolabel(bars,17)\n    for spine in ax.spines.values():\n        spine.set_visible(False)\n    x = ax.xaxis\n    i = i+1\n    for item in x.get_ticklabels():\n        item.set_rotation(90)\nplt.show()","e6fd1d25":"legendary = data[data[\"Legendary\"]==True]\nfig,(ax1,ax2) = plt.subplots(1, 2,figsize=(20, 10), sharex=False, sharey=True)\nax=ax1\nax.set_title(\"Legendary and Genaration\",y = 1)\nba1 = ax.bar(legendary[\"Generation\"].unique(), legendary.groupby(\"Generation\").count()[\"Name\"],color=\"lightgrey\",alpha=0.8)\nautolabel(ba1,17)\nax=ax2\nax.set_title(\"Legendary and Type 1\",y = 1)\nba2 = ax.bar(legendary[\"Type 1\"].unique(), legendary.groupby(\"Type 1\").count()[\"Name\"],color=\"lightgrey\",alpha=0.8)\nx = ax.xaxis\nfor item in x.get_ticklabels():\n    item.set_rotation(45)\nautolabel(ba2,12)\nax1.axes.get_yaxis().set_visible(False)\nax2.axes.get_yaxis().set_visible(False)\nfor spine in ax1.spines.values():\n    spine.set_visible(False)\nfor spine in ax2.spines.values():\n    spine.set_visible(False)\nplt.show()","c0870f97":"legendary = data[data[\"Legendary\"]==True]\nnotlegendary = data[data[\"Legendary\"]==False]\nplt.figure(figsize=(15,10))\n\nplt.plot(notlegendary.groupby(\"Type 1\").mean().index,notlegendary.groupby(\"Type 1\").mean()[\"Defense\"],label=\"Nonlegendary Defence\",alpha=0.6)\nplt.plot(notlegendary.groupby(\"Type 1\").mean().index,notlegendary.groupby(\"Type 1\").mean()[\"Attack\"],label=\"Nonlegendary Attack\",alpha=0.6)\n\nplt.scatter(legendary.groupby(\"Type 1\").mean().index,legendary.groupby(\"Type 1\").mean()[\"Attack\"],alpha=1,color='red',label=\"Legendary attack\")\nplt.scatter(legendary.groupby(\"Type 1\").mean().index,legendary.groupby(\"Type 1\").mean()[\"Defense\"],alpha=1,color='blue',label='Legendary defense')\n\nax = plt.gca()\nax.xaxis.grid(True,alpha=0.4)\nax.yaxis.grid(True,alpha=0.4)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.gca().fill_between(notlegendary.groupby(\"Type 1\").mean().index, \n                       notlegendary.groupby(\"Type 1\").mean()[\"Attack\"], notlegendary.groupby(\"Type 1\").mean()[\"Defense\"], \n                       facecolor='grey', \n                       alpha=0.2)\nplt.title(\"Pokemon mean attack and defense,legendary and nonlegendary\")\nplt.legend()\nplt.show()","c76ae03d":"fig, ((ax1,ax2,ax3), (ax4,ax5,ax6))  = plt.subplots(2, 3,figsize=(20,15) ,sharex=True,sharey=True)\naxs = [ax1,ax2,ax3,ax4,ax5,ax6]\nnames = [\"HP\",\"Attack\",\"Defense\",\"Sp. Atk\",\"Sp. Def\",\"Speed\"]\ni=0\nfor ax in axs:\n    ax.hist(data[names[i]])\n    ax.yaxis.grid(True,alpha=0.4)\n    ax.set_title(names[i])\n    for spine in ax.spines.values():\n        spine.set_visible(False)\n    i = i+1\nplt.show()","785ce895":"plt.figure()\nplt.hist(data[\"Total\"])\nax = plt.gca()\nax.yaxis.grid(True,alpha=0.4)\nax.set_title(\"Total\")\nfor spine in ax.spines.values():\n    spine.set_visible(False)\nplt.show()","1de77ddb":"\nfig, (ax1,ax2)  = plt.subplots(1, 2,figsize=(14,8) ,sharex=True,sharey=True)\nax1.scatter(data[\"Total\"],data[\"Attack\"])\nax1.set_title(\"Total(x) and Attack(y)\")\nax2.scatter(data[\"Total\"],data[\"Defense\"])\nax2.set_title(\"Total(x) adn Defense(y)\")\nplt.show()","fe202a93":"fig, (ax1,ax2)  = plt.subplots(1, 2,figsize=(15,6) ,sharex=False,sharey=False)\nh = ax1.hist2d(data['Attack'], data['Defense'],bins=25 )\nax1.set_title(\"Attack(x) and Defense(y)\")\nplt.colorbar(h[3], ax=ax1)\nh = ax2.hist2d(data['HP'], data['Total'],bins=25 )\nax2.set_title(\"HP(x) and Total(y)\")\nplt.colorbar(h[3], ax=ax2)\nplt.show()","9339a610":"plt.figure(figsize=(10,5))\nbox = plt.boxplot([data['HP'], data['Attack'],data[\"Defense\"],data[\"Sp. Atk\"],data[\"Sp. Def\"],data[\"Speed\"] ] , patch_artist=True)\nax = plt.gca()\nax.set_xticklabels(('HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def','Speed'))\nfor spine in ax.spines.values():\n    spine.set_visible(False)\nax.yaxis.grid(True,alpha=0.4)\nplt.setp(box[\"boxes\"], facecolor=\"lightgrey\")\nplt.show()","025f0c78":"plt.figure(figsize=(5,4))\nbox = plt.boxplot(data['Total'] ,patch_artist=True)\nplt.setp(box[\"boxes\"], facecolor=\"lightgrey\")\nax = plt.gca()\nax.set_xticklabels(('Total',''))\nax.yaxis.grid(True,alpha=0.4)\nfor spine in ax.spines.values():\n    spine.set_visible(False)\nplt.show()","789d9392":"ax=desc.plot.kde(figsize=(15,10))\nfor spine in ax.spines.values():\n    spine.set_visible(False)\nax.yaxis.grid(True,alpha=0.4)","7b62767e":"data2 = data.drop([\"Name\",\"Type 2\",\"Type 1\",\"Legendary\",\"Generation\"],axis=1)\nsns.jointplot(data2[\"Total\"], data2[\"HP\"], kind='hex');\nsns.jointplot(data2[\"Total\"], data2[\"HP\"], kind='kde');","c8e3e7a6":"plt.figure(figsize=(20,10))\nplt.subplot(231)\nsns.violinplot('Generation', 'Total', data=data);\nplt.subplot(232)\nsns.violinplot('Generation', 'HP', data=data);\nplt.subplot(233)\nsns.violinplot('Generation', 'Attack', data=data);\nplt.subplot(234)\nsns.violinplot('Generation', 'Defense', data=data);\nplt.subplot(235)\nsns.violinplot('Generation', 'Sp. Atk', data=data);\nplt.subplot(236)\nsns.violinplot('Generation', 'Sp. Def', data=data);","2d7945f8":"datax = data.drop([\"Name\",\"Type 1\",\"Type 2\",\"Generation\"],axis=1)\n_=sns.pairplot(datax, hue='Legendary', diag_kind='kde', height=2)\n_=10","5c582021":"df = pd.DataFrame(data,columns=['Total','HP','Attack','Defense','Sp. Atk','Sp. Def','Speed'])\ncorrMatrix = df.corr()\nf, ax = plt.subplots(figsize=(8, 6))\nax = sns.heatmap(corrMatrix, annot=True)\nplt.show()","d01e8e9e":"regresX = data.loc[:,\"Sp. Atk\":]\nregresy = pd.DataFrame(data.loc[:,\"Total\"])","58836187":"X_train, X_test, y_train, y_test = train_test_split(pd.DataFrame(regresX.loc[:,\"Sp. Atk\"]), regresy,\n                                                   random_state = 0)\nlinreg = LinearRegression().fit(X_train, y_train)","9621b4a4":"x = np.array(regresX[\"Sp. Atk\"])\nplt.figure(figsize=(10,8))\nplt.scatter(regresX.loc[:,\"Sp. Atk\"], regresy, marker= 'o', s=50, alpha=0.8)\nplt.plot(regresX.loc[:,\"Sp. Atk\"], linreg.coef_ * x.reshape(-1,1) + linreg.intercept_, 'r-')\nplt.title('Least-squares linear regression,R-squared score (test): {:.3f}'.format(linreg.score(X_test, y_test)))\nplt.xlabel('Sp. Atk')\nplt.ylabel('Total')\nax = plt.gca()\nax.xaxis.grid(True,alpha=0.4)\nax.yaxis.grid(True,alpha=0.4)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.show()","7248df87":"sns.set_style('whitegrid') \n_=sns.lmplot(x ='Sp. Atk', y ='Total', data = data,height=6,hue ='Legendary', markers =['o', 'v'],row ='Generation')","5426cf11":"regresX2 = data.loc[data[\"Legendary\"]==False,\"Sp. Atk\"]\nregresy2 = data.loc[data[\"Legendary\"]==False,\"Total\"]","a88636c1":"X_train, X_test, y_train, y_test = train_test_split(pd.DataFrame(regresX2), pd.DataFrame(regresy2),\n                                                   random_state = 0)\nlinreg = LinearRegression().fit(X_train, y_train)","f0a64754":"x = np.array(regresX2)\nplt.figure(figsize=(10,8))\nplt.scatter(regresX2, regresy2, marker= 'o', s=50, alpha=0.8)\nplt.plot(regresX2, linreg.coef_ * x.reshape(-1,1) + linreg.intercept_, 'r-')\nplt.title('Least-squares linear regression,R-squared score (test): {:.3f}'.format(linreg.score(X_test, y_test)))\nplt.xlabel('Sp. Atk')\nplt.ylabel('Total')\nax = plt.gca()\nax.xaxis.grid(True,alpha=0.4)\nax.yaxis.grid(True,alpha=0.4)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.show()","58f3b994":"### I hope next graph is easy to understand. It is comparing mean of ordinary and legendary pokemon.","fc54b899":"#### Now we look on the legenadry","e559820b":"### Violinplots are for now my most beloved boxplots.","b6b81b63":"### Now basic histograms","b34e8e78":"#### What our data looks like","4fbd8528":"### Now some 2d histograms. We clearly see most popular combination of those stats.","3d5b3d97":"### Jointplots are easy to do but I do not know a way to show them in one row.","75dcdb3a":"## Hello there, thank you for looking at my first notebook.\n##### This is my first published notebook ever. Since I am beginner it would be awesome if you could write in the comments what can I change for it to be better. Or maybe some new visualizations that are good and I should implement them. Any feedback would be appreciated.\n\n\n##### I am manly using matplotlib for now. At the end there is also a little bit of seaborn charts.","9524fc49":"#### Linear regresion with one feature is easy to plot so I will start with it. Sp. Atk = feature , Total = target","1d976b78":"#### I would think that getting read of legendary pokemnos and doing regression only on ordinary pokemons will get me better score, but apparently this is not the case.","963a8e5d":"### Now some basic scatterplots. Maybe it is not so pretty but it does its job.","dbc8b5e9":"### I also started learning about Regresion , I would like to try predict Total ","0794a00c":"#### Now various bar plots of all pokemons","a6fabae3":"### And some boxplots. At first they were hard to understand, but they are useful.","8df642a6":"#### Descibe method on data","ca97c2fb":"#### At the end I wanted to see how much legendary pokemons are different that normal ones ","8b89a5bf":"#### First thing correlations between feature. We see that Sp. Atk has the most corr. with Total.","b7e4c039":"#### I am interested how much different it is for generations and if pokemons are legendary or not.\n#### There is a big variance with legendary pokemons.","1eaae51f":"### And density function. Without it I would have not know that Total one has two peaks. I guess some pokemons are better than others."}}