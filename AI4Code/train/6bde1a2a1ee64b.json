{"cell_type":{"7df22f6a":"code","02dbc807":"code","a1cb42a8":"code","b14c7a25":"code","037a36fa":"code","cf330276":"code","573b4ea8":"code","d16d932a":"markdown","7a00dbbd":"markdown"},"source":{"7df22f6a":"import pandas as pd\nimport numpy as np\nimport os\nimport json\nimport datetime\nimport collections\nimport time","02dbc807":"## You should configure these to your needs. Choose one of ...\n# 'hungry-geese', 'rock-paper-scissors', santa-2020', 'halite', 'google-football'\nCOMP = 'lux-ai-2021'","a1cb42a8":"ROOT =\".\"\nMETA = \"..\/input\/meta-kaggle\/\"\nCOMPETITIONS = {\n    'lux-ai-2021': 30067,\n    'hungry-geese': 25401,\n    'rock-paper-scissors': 22838,\n    'santa-2020': 24539,\n    'halite': 18011,\n    'google-football': 21723\n}","b14c7a25":"# Load Episodes\nst = time.time()\nepisodes_df = pd.read_csv(META + \"Episodes.csv\", usecols=['CompetitionId','Id'])\nprint(time.time()-st)\nprint(f'Episodes.csv: {len(episodes_df)} rows before filtering.')\nepisodes_df = episodes_df[episodes_df.CompetitionId == COMPETITIONS[COMP]] \nprint(f'Episodes.csv: {len(episodes_df)} rows after filtering for {COMP}.')","037a36fa":"# Load EpisodeAgents\nst = time.time()\nepagents_df = pd.read_csv(META + \"EpisodeAgents.csv\", usecols=['EpisodeId','Reward','SubmissionId','UpdatedScore'])\nprint(time.time()-st)\nprint(f'EpisodeAgents.csv: {len(epagents_df)} rows before filtering.')\nepagents_df = epagents_df[epagents_df.EpisodeId.isin(episodes_df.Id)]\nprint(f'EpisodeAgents.csv: {len(epagents_df)} rows after filtering for {COMP}.')","cf330276":"score_diffs = \\\n    epagents_df[1::2]['Reward'].values - epagents_df[0::2]['Reward'].values","573b4ea8":"# the data pack!\ndata = dict(\n    num_of_episodes_run = len(episodes_df),\n    num_teams = 1186, # pulled from website\n    num_competitors = 1464, # pulled from website\n    num_valid_submissions = 22508, # pulled from website\n    num_submissions = len(epagents_df['SubmissionId'].unique()),\n    num_public_notebooks = 126, # pulled from website\n    peak_episodes_hour = 6000, # internal data\n    discord_messages = 15666, # discord data\n    kaggle_forum_posts = 220, # pulled from website\n    \n    # uses the way reward is computed for determining win\/tie\/loss. Reward is 10000 * city_count + unit_count\n    most_cities_in_one_episode = int(epagents_df['Reward'].max() \/ 10000),\n    most_units_in_one_episode = int((epagents_df['Reward'] % 10000).max()),\n    \n    # num matches the winner won by virtue of one more unit\n    num_close_wins = (np.abs(score_diffs) == 1).sum(),\n    \n    # based on npm downloads https:\/\/npm-stat.com\/charts.html?package=lux-viewer-2021&from=2021-07-20&to=2022-01-19\n    # the way kaggle replays are served on the kaggle website, most of the time it triggers a \"download\" increment by npm\n    # this is heavily underestimated since it doesn't track every single click, just the number of times visualizer code has been fetched\n    num_times_kaggle_replay_watched = 269730, \n    \n    # number of times the organizers have hopelessly talked about carts, approximately aggregated across discord, twitch, and kaggle forums\n    num_times_organizers_hopelessly_mentioned_carts = 86\n)\nfor k, v in data.items():\n    print(f\"{k} = {v}\")","d16d932a":"Load and filter only our competition.","7a00dbbd":"Data pack with various statistics regarding the Lux AI Challenge Season 1"}}