{"cell_type":{"58cddd22":"code","bc3c23f9":"code","223dea5f":"code","c77e20a4":"code","f84d394c":"code","b9ef15f2":"code","d4ac43e5":"code","befd216d":"code","5989c6b4":"code","d2d8cf84":"code","6169228a":"code","36e0d017":"code","60a247dc":"code","ed89c554":"code","8d0bfcef":"code","4a48edc8":"code","9c3a2ff2":"code","4f0adad5":"code","09112737":"markdown"},"source":{"58cddd22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc3c23f9":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns","223dea5f":"# load the csv\ndf = pd.read_csv('..\/input\/suicide-rates-overview-1985-to-2016\/master.csv')","c77e20a4":"# lets get the glimpse of the data by fetching first 5 records\ndf.head()","f84d394c":"# lets see the the range of suicide data by years available to us using box plot\nsns.set(style='whitegrid')\nplt.figure(figsize=(15,5))\nax = sns.boxplot(df.year, palette='YlGnBu',)\nax.set(xlim=[1990, 2020])\nplt.show()","b9ef15f2":"# lets change the age range years to age group for better understanding\ndf.age.unique()","d4ac43e5":"age_groups = ['child', 'youth', 'young adult', 'early adult', 'adult', 'senior']\nage_ranges = ['5-14 years', '15-24 years', '25-34 years', '35-54 years', '55-74 years', '75+ years']\n\n\n # range will be 6 as we have 6 groups\nfor i in range(6): \n    df[\"age\"]=df[\"age\"].apply(lambda x: str(x).replace(age_ranges[i],age_groups[i]) if age_ranges[i] in str(x) else str(x))","befd216d":"df.head()","5989c6b4":"df.shape # this will tell us how may rows and column we have in total (rows, columns)","d2d8cf84":"df.isnull().any() # this will show True if any column has null values","6169228a":"df.isnull().sum() # as HDI for year shows true lets sum up the null values and see how many in total null values do we have","36e0d017":"# As we can see 70% of the values are null in *HDI for year* column so we better drop it from our dataframe \n# along wih *country-year* as this column just has Country name The year concatenated \ndf=df.drop(['HDI for year','country-year'],axis=1) ","60a247dc":"###Let's check for country\nsns.set_style(\"whitegrid\")\nalpha = 1\nplt.figure(figsize=(12,30))\nsns.countplot(y='country', data=df, alpha=alpha, linewidth=2, palette=\"YlGnBu\")\nplt.title('Suicide counts by country')\nplt.show()","ed89c554":"# to see the gender distribution\nplt.figure(figsize=(12,7))\nsex = sns.countplot(x='sex',data = df, palette=\"YlGnBu\")","8d0bfcef":"# as we can see above gender is evenly distributed so lets see how gender is distributed by age group \nplt.figure(figsize=(12,7))\nsex = sns.countplot(y='sex', hue=\"age\", data = df, palette=\"YlGnBu\")","4a48edc8":"# to see the Correlation between each feature\ncorr = df.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\nplt.figure(figsize=(12,7))\ncor = sns.heatmap(df.corr(),mask=mask, annot = True, cmap='YlGnBu')","9c3a2ff2":"# lets see suicides commited by age group and gender\nplt.figure(figsize=(16,7))\nsns.barplot(x = 'sex', y = 'suicides_no', hue = 'age',data = df, palette=\"YlGnBu\")","4f0adad5":"# Lets see the suicide numbers for people of different age groups for every year\n\nage_groups = ['child', 'youth', 'young adult', 'early adult', 'adult', 'senior']\nplt.figure(figsize=(16,7))\nfor age in age_groups:\n    data = df.loc[df.age==age,:]\n    sns.lineplot(x='year', y='suicides_no', data=data)\n\nplt.legend(age_groups)","09112737":"# If you find this basic data visualization useful please **upvote** \u2191 and **follow me**\n*Opinion & Suggesions are welcome*"}}