{"cell_type":{"4abbb093":"code","11255468":"code","903f4a93":"code","178ee69b":"code","214e98fa":"code","fad100dc":"code","acd9b6cc":"code","be0d3f7a":"code","a7c771d3":"code","761c4f85":"code","f1778dec":"code","ba8a1f6d":"code","e84b5797":"code","d87859ed":"code","3b1fceb5":"code","4f55da46":"code","97ca15ef":"code","e7beaaf0":"code","978da0c5":"code","3f30ab3a":"code","561eab0f":"code","7407bcf7":"code","edacce27":"code","bfa632f2":"code","daf2a94d":"code","bb3c9b38":"code","f9c9e92d":"code","bc0d85b4":"code","8efb611a":"code","5e1f08da":"code","d6da19e0":"code","8ca89047":"code","6b935196":"code","40dc055b":"code","ec4a6715":"code","74e6b4dc":"code","99626603":"markdown","beab5517":"markdown","67b7bed5":"markdown","812da804":"markdown","df445f26":"markdown","e8488ef6":"markdown","99770c27":"markdown","8456c313":"markdown","2bd5b9fd":"markdown","23d6fded":"markdown","44acdf4e":"markdown","dd073dec":"markdown","5cb6c769":"markdown","aebcdb9b":"markdown","8ced1fbc":"markdown","ba72ef90":"markdown","e8a67747":"markdown","600b7e32":"markdown","b903b420":"markdown","8dac7837":"markdown","fd9fee86":"markdown","bd417c55":"markdown","6fbd1454":"markdown","34ceb1bf":"markdown","2556508d":"markdown","9e300cdf":"markdown","f625c1a8":"markdown","5120170f":"markdown","4592b711":"markdown","60b717c2":"markdown","cc2595d7":"markdown"},"source":{"4abbb093":"import os\nimport torch\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom torch import nn, optim\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nimport torch.nn.functional as func\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report","11255468":"%matplotlib inline","903f4a93":"sns.set(style='darkgrid')\nsns.set_palette('deep')","178ee69b":"# load the dataset\ndf = pd.read_csv('\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv')","214e98fa":"# show first few records\ndf.head()","fad100dc":"# show dataset dimensions\ndf.shape","acd9b6cc":"# show dataset summary\ndf.info()","be0d3f7a":"# show the frequency distribution of RainTomorrow\ndf['RainTomorrow'].value_counts()","a7c771d3":"# show percentage\ndf['RainTomorrow'].value_counts()\/len(df)","761c4f85":"df.isnull().sum()","f1778dec":"numerical = ['Temp9am', 'MinTemp', 'MaxTemp', 'Rainfall', 'Humidity9am', 'WindSpeed9am']\ndf[numerical].hist()","ba8a1f6d":"df[numerical].describe()","e84b5797":"# fill missing values of normally-distributed columns with mean and skewed distribution with median\ndf['Temp9am'] = df['Temp9am'].fillna(value = df['Temp9am'].mean())\ndf['MinTemp'] = df['MinTemp'].fillna(value = df['MinTemp'].mean())\ndf['MaxTemp'] = df['MaxTemp'].fillna(value = df['MaxTemp'].mean())\ndf['Rainfall'] = df['Rainfall'].fillna(value = df['Rainfall'].mean())\ndf['Humidity9am'] = df['Humidity9am'].fillna(value = df['Humidity9am'].median())\ndf['WindSpeed9am'] = df['WindSpeed9am'].fillna(value = df['WindSpeed9am'].median())","d87859ed":"df['RainToday'] = df['RainToday'].fillna(value = df['RainToday'].mode()[0])","3b1fceb5":"# convert data variable into dattime type\ndf['Date'] = df['Date'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d'))","4f55da46":"# extract year from the date\ndf['Year'] = df['Date'].dt.year","97ca15ef":"# extract month from the date\ndf['Month'] = df['Date'].dt.month","e7beaaf0":"# extract day from the date\ndf['Day'] = df['Date'].dt.day","978da0c5":"# encode location\nle = preprocessing.LabelEncoder()\ndf['Location'] = le.fit_transform(df['Location'])","3f30ab3a":"# encode RainToday & RainTomorrow\ndf['RainToday'].replace({'No': 0, 'Yes': 1}, inplace = True)\ndf['RainTomorrow'].replace({'No': 0, 'Yes': 1}, inplace = True)","561eab0f":"X = df[['Temp9am', 'MinTemp', 'MaxTemp', 'Rainfall', 'Humidity9am', 'WindSpeed9am', 'RainToday', 'Location', 'Year', 'Month', 'Day']]\ny = df[['RainTomorrow']]","7407bcf7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","edacce27":"X_train = torch.from_numpy(X_train.to_numpy()).float()\ny_train = torch.squeeze(torch.from_numpy(y_train.to_numpy()).float())","bfa632f2":"X_test = torch.from_numpy(X_test.to_numpy()).float()\ny_test = torch.squeeze(torch.from_numpy(y_test.to_numpy()).float())","daf2a94d":"print(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","bb3c9b38":"# create the model\nclass Model(nn.Module):\n  def __init__(self, n_features):\n    super(Model, self).__init__()\n    self.fc1 = nn.Linear(n_features, 11)\n    self.fc2 = nn.Linear(11, 8)\n    self.fc3 = nn.Linear(8, 5)\n    self.fc4 = nn.Linear(5, 3)\n    self.fc5 = nn.Linear(3, 1)\n  def forward(self, x):\n    x = func.relu(self.fc1(x))\n    x = func.relu(self.fc2(x))\n    x = func.relu(self.fc3(x))\n    x = func.relu(self.fc4(x))\n    return torch.sigmoid(self.fc5(x))","f9c9e92d":"model = Model(X_train.shape[1])","bc0d85b4":"criterion = nn.BCELoss()","8efb611a":"optimiser = optim.Adam(model.parameters(), lr = 0.001)","5e1f08da":"device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\nX_train = X_train.to(device)\ny_train = y_train.to(device)\n\nX_test = X_test.to(device)\ny_test = y_test.to(device)\n\nmodel = model.to(device)","d6da19e0":"# define the loss function to compare the output with the target\ncriterion = criterion.to(device)","8ca89047":"def calculate_accuracy(y_true, y_pred):\n  predicted = y_pred.ge(.5).view(-1)\n  return (y_true == predicted).sum().float() \/ len(y_true)","6b935196":"def round_tensor(t, decimal_places = 3):\n  return round(t.item(), decimal_places)","40dc055b":"# run the model\nfor epoch in range(1000):\n    y_pred = model(X_train)\n    y_pred = torch.squeeze(y_pred)\n    train_loss = criterion(y_pred, y_train)\n    if epoch % 100 == 0:\n      train_acc = calculate_accuracy(y_train, y_pred)\n      y_test_pred = model(X_test)\n      y_test_pred = torch.squeeze(y_test_pred)\n      test_loss = criterion(y_test_pred, y_test)\n      test_acc = calculate_accuracy(y_test, y_test_pred)\n      print (str('epoch ') + str(epoch) + str(' Train set: loss: ') + str(round_tensor(train_loss)) + str(', accuracy: ') + str(round_tensor(train_acc)) + str(' Test  set: loss: ') + str(round_tensor(test_loss)) + str(', accuracy: ') + str(round_tensor(test_acc)))\n    optimiser.zero_grad()\n    train_loss.backward()\n    optimiser.step()","ec4a6715":"classes = ['No rain', 'Raining']\n\ny_pred = model(X_test)\ny_pred = y_pred.ge(.5).view(-1).cpu()\ny_test = y_test.cpu()\nprint(classification_report(y_test, y_pred, target_names=classes))","74e6b4dc":"conf_mat = confusion_matrix(y_test, y_pred)\ndf_conf_mat = pd.DataFrame(conf_mat, index = classes, columns = classes)\nheat_map = sns.heatmap(df_conf_mat, annot = True, fmt = 'd')\nheat_map.yaxis.set_ticklabels(heat_map.yaxis.get_ticklabels(), ha = 'right')\nheat_map.xaxis.set_ticklabels(heat_map.xaxis.get_ticklabels(), ha = 'right')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","99626603":"We have lots of missing data","beab5517":"We gonna create an input layer from our 11 columns: 'Temp9am', 'MinTemp', 'MaxTemp', 'Rainfall', 'Humidity9am', 'WindSpeed9am', 'RainToday', 'Location', 'Year', 'Month' and 'Day'. Then the output will be a number between 0 and 1, representing how likely the model thinks it is gonna rain tomorrow. The prediction will be given out by the final layer of the network. We will add 4 hidden layers between the input and output layers. The parameters of those layer will decide the final output. All layers will be fully-connected. One easy way to build the neural network is to create a class that inherits from torch.nn.Module.","67b7bed5":"# Rain Forecasting","812da804":"# Data Preprocessing","df445f26":"We convert every value below 0.5 to 0. Otherwise, we set it to 1. Finally, we calculate the percentage of correct values. With all the pieces of the puzzle in place, we can start training our model:","e8488ef6":"Show the statistical properties of numerical variables to check for skewed variables.","99770c27":"Now we have only 9 columns out of 24 after removing variable with many missing data to predict whether or not is gonna rain tomorrow?","8456c313":"# Training","2bd5b9fd":"You can see that our model is doing good when it comes to the No rain class. We have so many examples. Unfortunately, we can't really trust predictions of the Raining class. One of the best things about binary classification is that we can have a good look at a simple confusion matrix:","23d6fded":"It is well known that categorical data doesn't work with machine learning and deep learning algorithms, so we gonna encode 'Date', 'Location', 'RainToday' and 'RainTomorrow' columns so we can predict whether or not is going to rain tomorrow?","44acdf4e":"This notebook builds a model to predict whether or not it will rain tomorrow in Australia using real-world weather data using Recurrent Neural Network with PyTorch. It starts by preprocessing then converting the data to tensors, then building the neural network model with pytorch, then using a loss function and an optimiser to train the model and finally evaluating the model. The dataset contains daily weather observations from numerous Australian weather stations.","dd073dec":"# Check for GPU","5cb6c769":"The BCELoss is a loss function that measures the difference between two binary vectors. In our case, the predictions of our model and the real values. It expects the values to be outputed by the sigmoid function. The closer this value gets to 0, the better the model performs.\n\nBut how do we find parameters that minimize the loss function?","aebcdb9b":"Having a loss function is great, but tracking the accuracy of our model is something easier to understand, for us mere mortals. Here is the definition for our accuracy:","8ced1fbc":"On closer inspection, we can see that the Temp9am, MinTemp, MaxTemp and Rainfall columns seem to have a relatively normal distribution, whilst Humidity9am and WindSpeed9am columns have outliers.","ba72ef90":"The final step is to split the data into train and test sets.","e8a67747":"# Recurrent Neural Network Model for Rain Forecasting","600b7e32":"Next step is to impute missing categorical variables with most frequent value or mode.","b903b420":"With the model in place, we need to find parameters that predict will it rain tomorrow. First, we need something to tell us how good we are currently doing:","8dac7837":"Then convert all of it to Tensors (so we can use it with PyTorch).","fd9fee86":"First step is to import the necessary libraries.","bd417c55":"During the training, we show our model the data for 1,000 times. Each time we measure the loss, propagate the errors trough our model and asking the optimiser to find better parameters.\n\nThe zero_grad() method clears up the accumulated gradients, which the optimiser uses to find better parameters.\n\nWell, using just accuracy wouldn't be a good way to do it. Recall that our data contains mostly no rain examples! Another way to delve a bit deeper into our model performance is to assess the precision and recall for each class.","6fbd1454":"# Evaluation","34ceb1bf":"# Optimisation","2556508d":"There are two ways to deal with missing values, either by deleting incomplete variables if there are too many data missing or by replacing these missing values with estimated value based on the other information available. So as a rule, any column with more than 2,000 missing value will be excluded as they having more missing values that rest of the variables in the dataset. Then before replaceing missing values of other columns with mean, it's wise to first check for outliers as the mean is greatly affected by outliers and works better if the data is normally-distributed while median imputation is preferable for skewed distribution.","9e300cdf":"Doing massively parallel computations on GPUs is one of the enablers for modern deep learning. We will need nVIDIA GPU to transfer all the computation to it. First we will check whether or not a CUDA is available. Then we gonna transfer all training and test sets to whether GPU or CPU. Finally, we move our model and loss function.","f625c1a8":"Optimisers are used to change the attributes of the neural network such as weights and learning rate in order to reduce the losses. We gonna use Adam optimiser.","5120170f":"# Building the Neural Network","4592b711":"We start by creating the layers of our model in the constructor. The forward() method is where the magic happens. It accepts the input x and allows it to flow through each layer. There is a corresponding backward pass (defined by pytorch) that allows the model to learn from the errors that is currently making.","60b717c2":"Naturally, the optimiser requires the parameters. The second argument lr is learning rate. It is a tradeoff between how good parameters we gonna find and how fast we will get there. Finding good values for this can be black magic.","cc2595d7":"We can see that out of the total number of RainTomorrow values, No RainTomorrow appears 77.58% times and RainTomorrow appears only 22.42% times. Now let's check for missing data."}}