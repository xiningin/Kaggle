{"cell_type":{"a0a7f99d":"code","2e03382b":"code","d825e704":"code","1a828969":"code","f0643c23":"code","6a9020a6":"code","70ebd150":"code","9d449fcd":"code","c9fc1b64":"code","6e260c93":"code","a6b5df0e":"code","3996eeec":"code","a37a4c76":"code","c8eb4f9b":"code","c7377b95":"code","9c46891e":"code","ca7e66c7":"code","2a250f1f":"code","5b872f64":"code","50ea1147":"code","986fb603":"code","f0ab83a0":"code","a3152ffd":"code","ba7d194a":"code","ef90c781":"code","79e60ba8":"code","8af40b2d":"code","89ec5fc0":"code","882f2bd1":"code","ac1cb861":"code","23c1a83b":"code","11cb1285":"code","4f18a729":"code","c7d3bb43":"code","c0a0bc96":"code","99a47eb8":"code","ebfb0bd8":"code","3b8cb29e":"code","43c2eed1":"code","116f97c1":"code","b5ad81dd":"code","95ddfdf9":"code","e7fef5e2":"code","93ff9d0a":"code","5df8582c":"code","2c110726":"code","55af4eac":"code","e9cc6dd4":"code","ea4a89af":"code","69f5ede7":"code","c7531a16":"code","985d3e4d":"code","8da8f68b":"code","7417f31b":"code","092e316e":"code","863b2120":"code","05a32d5b":"code","1b641204":"code","8a26c8c4":"code","358e4f14":"code","a02094b5":"code","41fa4d18":"code","845d7a0f":"code","919046e1":"code","724717a4":"code","931236d0":"code","44f47f0f":"code","b3dc0f23":"code","1d67f32f":"code","1bd16e80":"code","3796cc49":"code","629a4fbb":"code","6f6d40aa":"code","5065e098":"code","62b9d605":"code","012dc164":"code","98b86fff":"code","f3084670":"code","dadb0d28":"code","4f57fa64":"code","1c4ecaac":"code","cf2e5aeb":"markdown","364ab377":"markdown","aefa00f7":"markdown","d06f63d3":"markdown","d9405c2b":"markdown","1b879967":"markdown","d9ddb9a3":"markdown","067c18be":"markdown","b5bc506f":"markdown","0f984ffa":"markdown","40c04a28":"markdown","72a8b87b":"markdown","6077de1b":"markdown","209177f4":"markdown","c9180bbd":"markdown","7f711916":"markdown","c75dfdca":"markdown","e129075d":"markdown","c7737e24":"markdown","9c357c7a":"markdown","8a9214f0":"markdown","14b1d3fa":"markdown","47a04c88":"markdown","4e6a29d9":"markdown","9eeb9dca":"markdown","b0802b9d":"markdown","144df5f5":"markdown","ae7c8a09":"markdown","ffc318cc":"markdown","b5722f61":"markdown","52d000aa":"markdown","83e46d44":"markdown","265e7687":"markdown","7297dfe9":"markdown","512d6161":"markdown","69a9fb67":"markdown","fab951f9":"markdown","f8fec9da":"markdown","e993490c":"markdown","872a15fa":"markdown","22eaaff8":"markdown","a1ec37b5":"markdown","bf9f3d4b":"markdown","8b990222":"markdown","fcb9e562":"markdown","01ccc97c":"markdown","56dffda3":"markdown","9731f927":"markdown","ec4d0027":"markdown","dc6e7e6c":"markdown","377a6f2a":"markdown","0c8eb9f0":"markdown","ae97c868":"markdown","05f870f6":"markdown","bf366bce":"markdown","e1ad2e4f":"markdown","b942bd5b":"markdown","ab78925b":"markdown","9e392cfc":"markdown","6f246b4b":"markdown","b3ab2dbd":"markdown","549a69df":"markdown","87c64b95":"markdown","fdfd39a1":"markdown","cf75d4e2":"markdown","f49e721e":"markdown","826b097f":"markdown","81fd744d":"markdown","8745e316":"markdown","89ca8f32":"markdown"},"source":{"a0a7f99d":"# data analysis and wrangling \nimport pandas as pd\nimport numpy as np \n\n# visualisation \nimport seaborn as sns\nimport matplotlib.pyplot as plt \n%matplotlib inline\n\n# machine learning \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, mean_squared_error","2e03382b":"train_data = pd.read_csv('..\/input\/train.csv', index_col = 'PassengerId')\ntest_data = pd.read_csv('..\/input\/test.csv')\ncombine = [train_data, test_data]\nprint(train_data.shape, test_data.shape)\n","d825e704":"train_data.head()","1a828969":"test_data.head()\n","f0643c23":"train_data.describe(include = 'all')","6a9020a6":"print(train_data.columns)","70ebd150":"print(train_data.dtypes)","9d449fcd":"print(train_data.isnull().any())\nprint('\\n\\n')\nprint(test_data.isnull().any())","c9fc1b64":"print(train_data.info())\nprint('-' * 40)\nprint(test_data.info())","6e260c93":"train_data.describe(percentiles = [.61, .62]) \n# look at how the value changes at 62 percentile  but nott at 61 percentile which means 38% people survived ","a6b5df0e":"train_data.describe(percentiles = [.75, .8])","3996eeec":"survived_data = train_data[train_data['Survived'] == 1]\nsurvived = survived_data.count().values[1]\nsurvival_percent = (survived\/891) * 100\nprint('The percentage of survived people in training data are {}'.format(survival_percent))","a37a4c76":"train_data.describe(include = ['O'])","c8eb4f9b":"# Test for PClass using group by\ntrain_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean().sort_values('Survived', ascending = False)","c7377b95":"plt.figure(figsize = (15, 6))\n#plt.axis([1,3,0,1])\n\nsns.violinplot(data = train_data, x = 'Pclass', y = 'Survived')\n","9c46891e":"# Relation between Sex and survival rate\n\ntrain_data[['Sex', 'Survived']].groupby(['Sex'], as_index = False).mean()","ca7e66c7":"plt.figure(figsize = (15, 6))\nsns.scatterplot(data = train_data, x = 'Pclass', y = 'Sex', hue = 'Survived')","2a250f1f":"plt.figure(figsize = (15,6))\nsns.pointplot(data = train_data, x = 'Pclass', y = 'Survived', hue = 'Sex')","5b872f64":"train_data[['Survived', 'Sex', 'Pclass']].groupby(['Pclass', 'Sex']).mean()","50ea1147":"print(train_data.groupby(['Sex']).count())\ntrain_data[['Pclass', 'Sex', 'Survived']].groupby(['Pclass', 'Sex']).count()","986fb603":"# Relation between SibSp and Parch\nprint(train_data[['SibSp', 'Survived']].groupby(['SibSp']).mean())\nprint('\\n\\n')\nprint(train_data[['Parch', 'Survived']].groupby(['Parch']).mean())","f0ab83a0":"plt.figure(figsize = (15,6))\ng = sns.FacetGrid(train_data, col = 'Survived')\ng.map(plt.hist, 'Age', bins = 20)","a3152ffd":"sns.violinplot(x = 'Embarked', y = 'Pclass', data = train_data, hue = 'Sex')","ba7d194a":"grid = sns.FacetGrid(train_data, row = 'Embarked', size = 3, aspect = 2.5)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette = 'deep')\ngrid.add_legend()","ef90c781":"# Relation between fare and different Pclass\nplt.axis([1, 3, 0, 300])\nsns.swarmplot(x = 'Pclass', y = 'Fare', data = train_data)","79e60ba8":"grid = sns.FacetGrid(train_data, row = 'Embarked', col = 'Survived')\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha = 0.5, ci = None)\ngrid.add_legend()","8af40b2d":"before_rows = train_data.shape[1]\nprint(before_rows)\ntrain_data.drop(['Ticket','Cabin'], axis = 1, inplace = True)\ntest_data.drop(['Ticket', 'Cabin'], inplace = True, axis = 1)\nafter_rows = train_data.shape[1]\nprint(after_rows)\ncombine = [train_data, test_data]","89ec5fc0":"for dataset in combine: \n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand = False)\npd.crosstab(train_data['Title'], train_data['Sex'])\n","882f2bd1":"train_data[['Title', 'Survived', 'Sex']].groupby(['Title'], as_index = False).mean().sort_values(by = 'Survived', ascending = False )","ac1cb861":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer'], 'Male_rare')\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess', 'Dona'], 'Female_rare')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\ntrain_data[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","23c1a83b":"title_class = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Female_rare\": 5, \"Male_rare\" : 6}\nfor dataset in combine: \n    dataset['Title_class'] = dataset['Title'].map(title_class)\n    dataset['Title_class'].fillna(0, inplace = True)\ntrain_data.head()","11cb1285":"test_data.drop('Name', axis = 1, inplace = True)\ntrain_data.drop('Name', axis = 1, inplace = True)","4f18a729":"for dataset in combine: \n    dataset['Sex'] = dataset['Sex'].map( {'female' : 1, 'male' : 0} ).astype(int)\ntrain_data.head()    ","c7d3bb43":"train_data.isnull().sum()","c0a0bc96":"import random as rnd","99a47eb8":"guess_ages = np.zeros((2,3))\nguess_age_f = np.zeros((3,4))\nguess_age_m = np.zeros((3,4))","ebfb0bd8":"for dataset in combine:\n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & (dataset['Pclass'] == j+1)]['Age'].dropna()\n\n            # age_mean = guess_df.mean()\n            # age_std = guess_df.std()\n            # age_guess = rnd.uniform(age_mean - age_std, age_mean + age_std)\n\n            age_guess = guess_df.median()\n\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            \n    for i in range(0, 2):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                    'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain_data.head()","3b8cb29e":"train_data['AgeBand'] = pd.cut(train_data['Age'], 5)\ntrain_data[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index = False).mean()","43c2eed1":"for dataset in combine:    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4\ntrain_data.head()","116f97c1":"train_data = train_data.drop(['AgeBand'], axis = 1)\ncombine = [train_data, test_data]\ntrain_data.head()","b5ad81dd":"for dataset in combine: \n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\ntrain_data[['FamilySize', 'Survived']].groupby(['FamilySize']).mean().sort_values(['Survived'], ascending = False)","95ddfdf9":"for dataset in combine: \n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\ntrain_data[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index = False).mean()","e7fef5e2":"train_data.drop(['Parch', 'SibSp'], inplace = True, axis = 1)\ntest_data.drop(['Parch', 'SibSp'], inplace = True, axis = 1)\ncombine = [train_data, test_data]","93ff9d0a":"freq_port = train_data.Embarked.dropna().mode()[0]\nfreq_port","5df8582c":"for dataset in combine: \n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain_data[['Embarked', 'Survived']].groupby('Embarked', as_index = False).mean()","2c110726":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain_data.head()","55af4eac":"test_data['Fare'].fillna(test_data['Fare'].dropna().median(), inplace=True)\ntest_data.head()","e9cc6dd4":"train_data['FareBand'] = pd.qcut(train_data['Fare'], 5)\ntrain_data[['FareBand', 'Survived']].groupby(['FareBand'], as_index = False).mean()\n                                ","ea4a89af":"for dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.854, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.8540) & (dataset['Fare'] <= 10.500), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 10.500) & (dataset['Fare'] <= 21.679), 'Fare'] = 2\n    dataset.loc[(dataset['Fare'] > 21.679) & (dataset['Fare'] <= 39.688), 'Fare'] = 3\n    dataset.loc[ dataset['Fare'] > 39.688, 'Fare'] = 4\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_data = train_data.drop(['FareBand'], axis=1)\ncombine = [train_data, test_data]","69f5ede7":"train_data.head()","c7531a16":"pred_values = {}","985d3e4d":"X_test.head()","8da8f68b":"X_train = train_data.drop(['Survived'], axis = 1)\ny_train = train_data['Survived']\nX_test = test_data.drop('PassengerId', axis = 1).copy()\nprint(X_train.shape, y_train.shape, X_test.shape)","7417f31b":"X_train.head()","092e316e":"X_train.drop('Title', axis = 1, inplace = True)\nX_test.drop('Title', axis = 1, inplace = True)","863b2120":"# Logistic Regression \n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, y_train) * 100, 2)\nacc_log","05a32d5b":"X_train.columns","1b641204":"coeff_data = pd.DataFrame(train_data.columns.delete(0))\ncoeff_data.columns = ['Feature']\ncoeff_data['Correlation'] = pd.Series(logreg.coef_[0])\ncoeff_data.sort_values(by = 'Correlation', ascending = False)","8a26c8c4":"# Support Vector Machines\n\nsvc = SVC()\nsvc.fit(X_train, y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, y_train) * 100, 2)\nacc_svc","358e4f14":"values = {}\nfor val in range(1, 51):\n    knn = KNeighborsClassifier(n_neighbors = val)\n    knn.fit(X_train, y_train)\n    Y_pred = knn.predict(X_test)\n    acc = round(knn.score(X_train, y_train) * 100, 2)\n    values[val] = acc\n","a02094b5":"x_values, y_values = [], []\nfor val in values: \n    x_values.append(val)\n    y_values.append(values[val])\nfrom matplotlib import style\nstyle.use('ggplot')\nplt.figure(figsize = (15,8))\nplt.title('Accuracy Score vs Neighbours')\nplt.xlabel('Number of Neighbours')\nplt.ylabel('Accuracy Score')\nplt.legend()\nsns.barplot(x = x_values, y = y_values)","41fa4d18":"acc_knn = 0\nfor val in values:\n    if values[val] > acc_knn: \n        acc_knn = values[val]\nacc_knn","845d7a0f":"# Gaussian Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, y_train) * 100, 2)\nacc_gaussian","919046e1":"# Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(X_train, y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, y_train) * 100, 2)\nacc_perceptron","724717a4":"# Linear SVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, y_train) * 100, 2)\nacc_linear_svc","931236d0":"# Stochastic Gradient Descent\n\nsgd = SGDClassifier()\nsgd.fit(X_train, y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, y_train) * 100, 2)\nacc_sgd","44f47f0f":"# Decision Tree\n\ndecision_tree = DecisionTreeClassifier(max_depth = 7)\ndecision_tree.fit(X_train, y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, y_train) * 100, 2)\nacc_decision_tree","b3dc0f23":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators = 10)\nrandom_forest.fit(X_train, y_train)\ny_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, y_train)\nacc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)\nacc_random_forest","1d67f32f":"pred_values = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_linear_svc, acc_decision_tree]})\npred_values.sort_values(by='Score', ascending=False)","1bd16e80":"# Machine Learning Tools\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# Deep Learning Libraries\nimport tensorflow as tf\nimport keras \nimport theano\n\n# Model Building Tools from Keras Library\nfrom keras.models import Sequential \nfrom keras.layers import Dense","3796cc49":"X = X_train.values\ny = y_train.values\n","629a4fbb":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.2, random_state = 0)","6f6d40aa":"from keras.models import Sequential \nfrom keras.layers import Dense","5065e098":"classifier = Sequential()\nclassifier.add(layer = Dense(units = 4, kernel_initializer = 'uniform', activation = 'relu', input_dim = 8 ))\nclassifier.add(layer = Dense(units = 4, kernel_initializer = 'uniform', activation = 'relu'))\nclassifier.add(layer = Dense(units = 1, kernel_initializer = 'uniform' , activation = 'sigmoid'))\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n","62b9d605":"classifier.fit(X_train, y_train, batch_size = 10, nb_epoch = 100)","012dc164":"y_pred = classifier.predict(X_val)\nsns.distplot(y_pred, kde = False)\ny_pred","98b86fff":"y_pred = (y_pred > 0.5)\ny_pred","f3084670":"cm = confusion_matrix(y_val, y_pred)\ncm","dadb0d28":"accuracy = (cm[0, 0] + cm[1, 1]) \/ (cm[0, 0] + cm [0, 1] + cm[1, 1] + cm[1, 0])\naccuracy","4f57fa64":"test = X_test.values()\ny_pred = classifier.predict(test)\ny_pred = ","1c4ecaac":"submission = pd.DataFrame({\n        \"PassengerId\": test_data[\"PassengerId\"],\n        \"Survived\": y_pred\n    })\nsubmission.to_csv('submission.csv', index=False)","cf2e5aeb":"### Gaussian Naive Bayes","364ab377":"63% of the first class people survived while 24% of the lower class survived ","aefa00f7":"## Data Wrangling \nLet's look for discrepancies and null values ","d06f63d3":"* **Pclass** We observe significant correlation (>0.5) among Pclass=1 and Survived (classifying #3). We decide to include this feature in our model.\n* ** Sex** We confirm the observation during problem definition that Sex=female had very high survival rate at 74% (classifying #1).\n* **SibSp and Parch** These features have zero correlation for certain values. It may be best to derive a feature or a set of features from these individual features (creating #1).","d9405c2b":"We can convert the categorical titles to ordinal","1b879967":"We can also look at the survival rates.","d9ddb9a3":"# Titanic Survival Prediction \n","067c18be":"### Support Vector Machines","b5bc506f":"Let's collect our splits. ","0f984ffa":"## Further Data Wrangling","40c04a28":"The highest value is achieved for Random Forests and Decision Tree","72a8b87b":"Correlations with each feature ","6077de1b":"## Completing a numerical continous feature","209177f4":"## Read data into Pandas Dataframe","c9180bbd":"**Completing**\n1. We may want to complete Age feature as it is definitely correlated to survival.\n2. We may want to complete the Embarked feature as it may also correlate with survival or another important feature.\n\n**Correcting**\n\n1. Ticket feature may be dropped from our analysis as it contains high ratio of duplicates (22%) and there may not be a correlation between Ticket and survival.\n2. Cabin feature may be dropped as it is highly incomplete or contains many null values both in training and test dataset.\n3. PassengerId may be dropped from training dataset as it does not contribute to survival.\n4. Name feature is relatively non-standard, may not contribute directly to survival, so maybe dropped.","7f711916":"**Observation** \n* Higher fare paying passengers had better survival. Confirms our assumption for creating (#4) fare ranges.\n* Port of embarkation correlates with survival rates. Confirms correlating (#1) and completing (#2).\n\n**Decision**\n* Consider banding the fare feature  ","c75dfdca":"**What is the distribution of categorical features?**\n\n* Names are unique across the dataset (count=unique=891)\n* Sex variable as two possible values with 65% male (top=male, freq=577\/count=891).\n* Cabin values have several dupicates across samples. Alternatively several passengers shared a cabin.\n* Embarked takes three possible values. S port used by most passengers (top=S)\n* Ticket feature has high ratio (22%) of duplicate values (unique=681).","e129075d":"Let's replace by ordinal values ","c7737e24":"### Random Forests\nThe next model Random Forests is one of the most popular. Random forests or random decision forests are an ensemble learning method for classification, regression and other tasks, that operate by constructing a multitude of decision trees (n_estimators=100) at training time and outputting the class that is the mode of the classes (classification) or mean prediction (regression) of the individual trees.","9c357c7a":"We need to find data to replace teh empty values of Age and Embarked","8a9214f0":"Let's look at the relation between Age and Survival","14b1d3fa":"## Describing Data","47a04c88":"Even though this is a very simple plot but we find out that women from Class 1 and class 2 will have a higher survival rate and men from third class have a very low survival rate. ","4e6a29d9":"## Data Visualisation","9eeb9dca":"There are null values in the age, cabin and embarked section in the training data and in the fare as well in the testing data","b0802b9d":"**Create new feature combining existing features** <br> \n\nWe can create a new feature for FamilySize which combines Parch and SibSp. This will enable us to drop Parch and SibSp from our datasets.","144df5f5":"Let's make some manual changes in our predictions basedon the inferences from our data. ","ae7c8a09":"The perceptron is an algorithm for supervised learning of binary classifiers (functions that can decide whether an input, represented by a vector of numbers, belongs to some specific class or not). It is a type of linear classifier, i.e. a classification algorithm that makes its predictions based on a linear predictor function combining a set of weights with the feature vector. The algorithm allows for online learning, in that it processes elements in the training set one at a time.","ffc318cc":"We can find similar statistics for parents\/children  and siblings on board ","b5722f61":"**Inference**\n\n* Female passengers had much better survival rate than males. Confirms classifying (#1).\n* Exception in Embarked=C where males had higher survival rate. This could be a correlation between Pclass and Embarked and in turn Pclass and Survived, not necessarily direct correlation between Embarked and Survived.\n* Males had better survival rate in Pclass=3 when compared with Pclass=2 for C and Q ports. Completing (#2).\n* Ports of embarkation have varying survival rates for Pclass=3 and among male passengers. Correlating (#1).","52d000aa":"Let's start by dropping unwanted features. ","83e46d44":"Let's do this for all the other classes as well using iteration","265e7687":"### K - Nearest Neighbours","7297dfe9":"Binning data into different categories. ","512d6161":"We can use Logistic Regression to validate our assumptions and decisions for feature creating and completing goals. This can be done by calculating the coefficient of the features in the decision function.\n\nPositive coefficients increase the log-odds of the response (and thus increase the probability), and negative coefficients decrease the log-odds of the response (and thus decrease the probability).\n\n* Sex is highest positivie coefficient, implying as the Sex value increases (male: 0 to female: 1), the probability of Survived=1 increases the most.\n* Inversely as Pclass increases, probability of Survived=1 decreases the most.\n* So is Title as second highest positive correlation.","69a9fb67":"**Creating**\n1. We may want to create a new feature called Family based on Parch and SibSp to get total count of family members on board.\n2. We may want to engineer the Name feature to extract Title as a new feature.\n3. We may want to create new feature for Age bands. This turns a continous numerical feature into an ordinal categorical feature.\n4. We may also want to create a Fare range feature if it helps our analysis.\n\n**Classifying.**\n\nWe may also add to our assumptions based on the problem description noted earlier.\n\n1. Women (Sex=female) were more likely to have survived.\n2. Children (Age<?) were more likely to have survived.\n3. The upper-class passengers (Pclass=1) were more likely to have survived.","fab951f9":"What about people with no family? We need to create a new feature for people who are alone. ","f8fec9da":"Now we are ready to train a model and predict the required solution. There are 60+ predictive modelling algorithms to choose from. We must understand the type of problem and solution requirement to narrow down to a select few models which we can evaluate. Our problem is a classification and regression problem. We want to identify relationship between output (Survived or not) with other variables or features (Gender, Age, Port...). We are also perfoming a category of machine learning which is called supervised learning as we are training our model with a given dataset. With these two criteria - Supervised Learning plus Classification and Regression, we can narrow down our choice of models to a few. ","e993490c":"Let's look at all the columns in the data","872a15fa":"## Inference","22eaaff8":"**Completing a categorical feature** <br> \nEmbarked feature takes S, Q, C values based on port of embarkation. Our training dataset has two missing values. We simply fill these with the most common occurance.","a1ec37b5":"### The survival percentage ","bf9f3d4b":"**What is the distribution of numerical feature values across the samples?**\n\nThis helps us determine, among other early insights, how representative is the training dataset of the actual problem domain.\n\n* Total samples are 891 or 40% of the actual number of passengers on board the Titanic (2,224).\n* Survived is a categorical feature with 0 or 1 values.\n* Around 38% samples survived representative of the actual survival rate at 32%.\n* Most passengers (> 75%) did not travel with parents or children.\n* Nearly 30% of the passengers had siblings and\/or spouse aboard.\n* Fares varied significantly with few passengers (<1%) paying as high as $512.\nFew elderly passengers (<1%) within age range 65-80.","8b990222":"## Deep Learning Approach","fcb9e562":"**Convert a categorical variable to numerical**","01ccc97c":"### Model evaluation\nWe can now rank our evaluation of all the models to choose the best one for our problem. While both Decision Tree and Random Forest score the same, we choose to use Random Forest as they correct for decision trees' habit of overfitting to their training set.","56dffda3":"## Model, Predict and Solve","9731f927":"Convert females = 1 and males = 0\n","ec4d0027":"We do not require names after this either so let's drop that data","dc6e7e6c":"Importing necessary libraries","377a6f2a":"We can visualize this data as being concentrated in different regions","0c8eb9f0":"Let's generate classes for different titles and divide them into different title classes. The most common ones are Mr. , Mrs. , Master, Miss. The fifth category can be Rare. ","ae97c868":"Let's drop Parch, SibSp ","05f870f6":"We can see that women had a much higher rate of survival. ","bf366bce":"### Analyze by pivoting features\nTo confirm some of our observations and assumptions, we can quickly analyze our feature correlations by pivoting features against each other. We can only do so at this stage for features which do not have any empty values. It also makes sense doing so only for features which are categorical (Sex), ordinal (Pclass) or discrete (SibSp, Parch) type.\n\n","e1ad2e4f":"Let's find the relationship of survival between different Source stations","b942bd5b":"## Problem Statement","ab78925b":"### Logistic Regression\nLogistic Regression is a useful model to run early in the workflow. Logistic regression measures the relationship between the categorical dependent variable (feature) and one or more independent variables (features) by estimating probabilities using a logistic function, which is the cumulative logistic distribution. Reference","9e392cfc":"\n> Knowing from a training set of samples listing passengers who survived or did not survive the Titanic disaster, can our model determine based on a given test dataset not containing the survival information, if these passengers in the test dataset survived or not.\n\nHere are the highlights to note.\n\n* On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. Translated 32% survival rate.\n* One of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew.\n* Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.","6f246b4b":"Let's try to create a fare band\n","b3ab2dbd":"**Decisions Taken**\n\n* Add Sex feature to model training.\n* Complete and add Embarked feature to model training.","549a69df":"Let's also look at the port people embarked from ","87c64b95":"We need to replace age with a logical guess. We can look at Pclass and age and find the correlation between age and Pclass. For not rare classes, we can also use title classes as a means of finding the estimate age. ","fdfd39a1":"### Perception","cf75d4e2":"### Distribution of categorical variables","f49e721e":"## Data Analysis","826b097f":"Let's plot the values according to the number fo neighbours","81fd744d":"### Decision Tree Classifiers\n\nThis model uses a decision tree as a predictive model which maps features (tree branches) to conclusions about the target value (tree leaves). Tree models where the target variable can take a finite set of values are called classification trees; in these tree structures, leaves represent class labels and branches represent conjunctions of features that lead to those class labels. Decision trees where the target variable can take continuous values (typically real numbers) are called regression trees.","8745e316":"We can also store the values of each prediction model in a dictionary","89ca8f32":"## Feature engineering \n**Creating new features extracting from existing data** <br> \nWe want to analyze if Name feature can be engineered to extract titles and test correlation between titles and survival, before dropping Name and PassengerId features.\n\nIn the following code we extract Title feature using regular expressions. The RegEx pattern (\\w+\\.) matches the first word which ends with a dot character within Name feature. The expand=False flag returns a DataFrame."}}