{"cell_type":{"4a341f5d":"code","972fd3a6":"code","ecc92458":"code","562fac88":"code","d76f8b50":"code","27f94eda":"code","1c73ec6b":"code","57a8975a":"code","0398ab46":"code","51a60566":"code","d502be24":"markdown","ea8da1f4":"markdown","0ca62f77":"markdown","8c429d7f":"markdown","f3d55449":"markdown","028ba676":"markdown","7e1c31b1":"markdown","e01b4b37":"markdown","09955707":"markdown"},"source":{"4a341f5d":"import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport mplleaflet\nimport pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")","972fd3a6":"df = pd.read_csv('..\/input\/BinSize_d400.csv')\nhashid = 'fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89'\nstation_locations_by_hash = df[df['hash'] == hashid]\n\nlons = station_locations_by_hash['LONGITUDE'].tolist()\nlats = station_locations_by_hash['LATITUDE'].tolist()\n\nplt.figure(figsize=(8,8))\n\nplt.scatter(lons, lats, c='r', alpha=0.7, s=200)\n\nmplleaflet.display()","ecc92458":"df = pd.read_csv('..\/input\/fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89.csv', parse_dates=['Date'])\n# Drop the data on 29th Februaries\ndf = df[(df['Date'].dt.month!=2) & (df['Date'].dt.day!=29)]\n# Separate the days in a new column and sort in descending order by dates\ndf['dayofyear'] = df.Date.dt.dayofyear\ndf = df.sort_values('Date', ascending=False)\n# Convert tenths of degrees celcius to degree celcius\ndf['Data_Value'] = df['Data_Value']\/10\n# See the changes\ndf.head()","562fac88":"# Heres a problem - The Series.dt.dayofyear API assigns 61 to 1st March of leap years but 60 to 1st March of non-leap years\n# Quick Check\nprint('For leap year 2008\\n\\n', df.loc[(df.Date=='2008-03-01')].head(1), '\\n\\n')\nprint('For non leap year 2007\\n\\n', df.loc[(df.Date=='2007-03-01')].head(1))","d76f8b50":"# To resolve the issue 1 is subtracted from leap year day values starting from March\ndf.loc[((df['Date'].dt.is_leap_year==True) & (df['Date'].dt.month>2)), 'dayofyear'] = df['dayofyear']-1\ndf.loc[df.Date.dt.year == 2008, 'dayofyear']\n# Quick check\nprint('For leap year 2008\\n\\n', df.loc[(df.Date=='2008-03-01')].head(1), '\\n\\n')\nprint('For non leap year 2007\\n\\n', df.loc[(df.Date=='2007-03-01')].head(1))","27f94eda":"# Separate the observations before 2015 and in 2015\ndf1 = df[df['Date']<'2015-1-1']\ndf2 = df[df['Date']>='2015-1-1']\n# Get the maximum or minimum temparature values per day from the past data of 15 years\nmin_df = df1[df1['Element']=='TMIN'].groupby('dayofyear')['Data_Value'].min()\nmax_df = df1[df1['Element']=='TMAX'].groupby('dayofyear')['Data_Value'].max()\ntemp1 = pd.concat([max_df, min_df], axis=1)\ntemp1.reset_index(inplace=True)\ntemp1.columns=['Day', 'Max Temp(Past)', 'Min Temp(Past)']\ntemp1.head()","1c73ec6b":"# Similarly Get the maximum or minimum temparature values per day from 2015\nmin_df = df2[df2['Element']=='TMIN'].groupby('dayofyear')['Data_Value'].min()\nmax_df = df2[df2['Element']=='TMAX'].groupby('dayofyear')['Data_Value'].max()\ntemp2 = pd.concat([max_df, min_df], axis=1)\ntemp2.reset_index(inplace=True)\ntemp2.columns=['Day', 'Max Temp(2015)', 'Min Temp(2015)']\n# join them\ntemp = pd.merge(temp1, temp2, how='outer', on='Day')\n# Check the table\ntemp.head()","57a8975a":"# Only the temperature in 2015 which broke past records is to be kept-\ntemp['Max Temp(2015)'].where((temp['Max Temp(2015)']>temp['Max Temp(Past)']), inplace=True)\ntemp['Min Temp(2015)'].where((temp['Min Temp(2015)']<temp['Min Temp(Past)']), inplace=True)\n# Quick Check\ntemp.tail(10)","0398ab46":"plt.clf()\nplt.figure(figsize=(16,8))\nplt.plot('Day', 'Max Temp(Past)', data=temp, markersize=2, linewidth=1, c='#E12B38', alpha=1, label='Highest Temperatures in Past')\nplt.plot('Day', 'Min Temp(Past)', data=temp, markersize=2, linewidth=1, c='#3EB650', alpha=1, label='Lowest Temperatures in Past')\nplt.fill_between(temp['Day'], temp['Max Temp(Past)'], temp['Min Temp(Past)'], interpolate=True, alpha=0.09)\nplt.scatter('Day', 'Max Temp(2015)', data=temp, c='b', s=70, label='Record Temperatures in 2015', alpha=0.8)\nplt.scatter('Day', 'Min Temp(2015)', data=temp, c='b', s=70, label=None, alpha=0.8)\nplt.title('Record Temperature Rise and Fall in 2015', fontsize=30)\nplt.ylabel('Temperature ($^\\circ$C)', fontsize=15)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.xticks(np.linspace(15,380,13)[:-1], ('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\n                                         'September', 'October', 'November', 'December'))\nplt.gcf().autofmt_xdate()\nplt.tight_layout()\nplt.legend(loc=8, fontsize=12)\n# In case it is required to save, capture the figure object\nfig1 = plt.gcf()\nplt.show()","51a60566":"fig1.savefig('weather_pattern2015.png', dpi=300)","d502be24":"### Read data, parse dates, drop leap days, add day of year values and convert to degrees celcius","ea8da1f4":"### Only Keep the Highs and Lows accross all stations per Day of Year","0ca62f77":"### Only Keep the Record Breaking Temperature Values in 2015","8c429d7f":"### Plotting Source Stations on Map","f3d55449":"### Import Necessary Modules","028ba676":"### Dealing with mismatched day of year values","7e1c31b1":"### Save Figure","e01b4b37":"### Time Series Plot of Weather Patterns","09955707":"# Dataset Summary & A Few Anecdotes \n\n\nAn NOAA dataset has been stored in the file `data\/fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89.csv`. This is the dataset used in here. Note: The data for this notebook comes from a subset of The National Centers for Environmental Information (NCEI) [Daily Global Historical Climatology Network](https:\/\/www1.ncdc.noaa.gov\/pub\/data\/ghcn\/daily\/readme.txt) (GHCN-Daily). The GHCN-Daily is comprised of daily climate records from thousands of land surface stations across the globe.\n\nEach row in the datafile corresponds to a single observation.\n\nThe following variables provided:\n\n* **id** : station identification code\n* **date** : date in YYYY-MM-DD format (e.g. 2012-01-24 = January 24, 2012)\n* **element** : indicator of element type\n    * TMAX : Maximum temperature (tenths of degrees C)\n    * TMIN : Minimum temperature (tenths of degrees C)\n* **value** : data value for element (tenths of degrees C)\n\nTasks:\n\n1. Familiarize with the dataset, write some python code which returns a line graph of the record high and record low temperatures by day of the year over the period 2005-2014. The area between the record high and record low temperatures for each day will be shaded.\n2. To overlay a scatter of the 2015 data for any points (highs and lows) for which the ten year record (2005-2014) record high or record low was broken in 2015.\n\nThe data used here is near **Ann Arbor, Michigan, United States**"}}