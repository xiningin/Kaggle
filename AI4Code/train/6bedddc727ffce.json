{"cell_type":{"0a387a62":"code","1136243a":"code","feb24d68":"code","761abc70":"code","847425b5":"code","38341c70":"code","330a14cb":"code","7785705a":"code","10047e99":"code","dc3a9bd1":"code","1eac2188":"code","c363cecc":"code","1733a8b0":"code","f344309c":"code","154729ea":"code","4ad1606d":"code","c81a3e84":"code","508c98c8":"code","7f77660f":"code","3ccbee45":"code","511e032d":"code","0ade3aa6":"code","ca513ba8":"code","12ab36c8":"code","bf11e0a6":"code","b7ca9c1c":"code","31b6a742":"code","a1722a7c":"code","4539dd6f":"code","ec4de1ba":"code","2dac26dd":"markdown","062a220b":"markdown","1f609bcd":"markdown","da274aa9":"markdown","6668902b":"markdown","6c82ec20":"markdown","0803fd5e":"markdown","d6d77c1e":"markdown","157133e5":"markdown","cbf1302e":"markdown","d516ec63":"markdown","4e8555cf":"markdown","2f57794e":"markdown","61acd29e":"markdown","e0934c15":"markdown","f988c163":"markdown","b26dd975":"markdown","6cd44dec":"markdown","5848132e":"markdown","d7d6ae70":"markdown"},"source":{"0a387a62":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1136243a":"import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nimport math \nimport seaborn as sns","feb24d68":"# import dataset\ndataset = pd.read_csv('..\/input\/car-data\/CarPrice_Assignment.csv') ","761abc70":"# data analysis\n# Melihat 5 baris teratas dari data.\ndataset.head()","847425b5":"dataset.shape","38341c70":"dataset.info()","330a14cb":"dataset.describe()","7785705a":"dataset.isnull().sum()","10047e99":"def pp(x,y,z):\n    sns.pairplot(dataset, x_vars=[x,y,z], y_vars='price',size=4, aspect=1, kind='scatter')\n    plt.show()\n\npp('enginesize', 'boreratio', 'stroke')\npp('compressionratio', 'horsepower', 'peakrpm')\npp('wheelbase', 'citympg', 'highwaympg')","dc3a9bd1":"plt.scatter(dataset['enginesize'], dataset['price'])\nplt.xlabel('enginesize')\nplt.ylabel('Price')\nplt.title('Scatter Plot enginesize vs Price')\nplt.show()","1eac2188":"dataset.corr()","c363cecc":"# Prepare data\n# Pertama, buat variabel x dan y.\nx = dataset['enginesize'].values.reshape(-1,1)\ny = dataset['price'].values.reshape(-1,1)","1733a8b0":"x_mean = np.mean(x)\ny_mean = np.mean(y)\nprint(x_mean,y_mean)","f344309c":"atas = sum((x - x_mean)*(y - y_mean))\nbawah = math.sqrt((sum((x - x_mean)**2)) * (sum((y - y_mean)**2)))\ncorrelation = atas\/bawah\nprint(correlation)","154729ea":"# slope\n# Slope adalah tingkat kemiringan garis, intercept \n# adalah jarak titik y pada garis dari titik 0\nvariance = sum((x - x_mean)**2)\ncovariance = sum((x - x_mean) * (y - y_mean))\ntheta_1 = covariance\/variance\nprint(theta_1)","4ad1606d":"# intercept\ntheta_0 = y_mean - (theta_1 * x_mean)\nprint(theta_0)","c81a3e84":"# prediction manual\ny_pred = theta_0 + (theta_1 * 130)\n\nprint(y_pred)","508c98c8":"y_pred = theta_0 + (theta_1 * x)\n\nplt.scatter(x, y)\nplt.plot(x, y_pred, c='r')\nplt.xlabel('enginesize')\nplt.ylabel('Price')\nplt.title('Plot enginesize vs Price')","7f77660f":"x_train, x_test, y_train, y_test = train_test_split(x, y, train_size = 0.8, test_size = 0.2, random_state = 100)","3ccbee45":"regressor = LinearRegression()","511e032d":"regressor.fit(x_train, y_train)","0ade3aa6":"print(regressor.coef_)\nprint(regressor.intercept_)","ca513ba8":"regressor.score(x_test, y_test)","12ab36c8":"print('Correlation: ', math.sqrt(regressor.score(x_test,y_test)))","bf11e0a6":"y_prediksi = regressor.predict(x_test)\n\nplt.scatter(x_test, y_test)\nplt.plot(x_test, y_prediksi, c='r')\nplt.xlabel('enginesize')\nplt.ylabel('Price')\nplt.title('Plot enginesize vs Price')","b7ca9c1c":"#Prediksi harga mobil dengan enginesize 130.\n\nregressor.predict([[130]])","31b6a742":"np_table = np.concatenate((x_test,y_test,y_prediksi), axis=1)\nnew_dataframe = pd.DataFrame(data=np_table, columns=['x_test','y_test','y_predict'])","a1722a7c":"new_dataframe","4539dd6f":"from sklearn import metrics  \nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_prediksi))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_prediksi))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_prediksi)))    ","ec4de1ba":"plt.title('Comparison of Y values in test and the Predicted values')\nplt.ylabel('Test Set')\nplt.xlabel('Predicted values')\nplt.plot(y_prediksi, '.', y_test, 'x')\nplt.show()","2dac26dd":"Formula Regresi Linear\n![gambar.png](attachment:gambar.png)\n\n\n\"Jika kita melihat formula regresi linear di atas, kita pasti ingat rumus persamaan garis yang pernah dipelajari di bangku sekolah, yaitu y = mx + c, dimana m merupakan gradien atau kemiringan garis dan c merupakan konstanta.\"","062a220b":"# Visualising numerical data","1f609bcd":"Ternyata data kita tidak ada missing values.","da274aa9":"Model kita mendapatkan accuracy score sebesar 80.68%","6668902b":"Maka persamaan garis : \n\n#     **y = 167.69x - 8005.44**\n\nJadi persamaan garis diatas dapat digunakan untuk melakukan prediksi apabila kita memiliki data enginesize yang baru, price dapat diperkirakan dengan rumus tersebut, masukkan nilai hoursepower baru ke x, maka perkiraan nilai y (price) akan didapat.","6c82ec20":"Scatter plot menunjukkan dengan jelas hubungan antarvariabel serta sebarannya di dataset. Selain itu, dengan scatter plot juga kita dapat mengindikasikan bahwa variabel enginesize dan price memiliki hubungan linear.","0803fd5e":"    Catatan : korelasi 0.808 adalah nilai yang cukup tinggi, artinya nilai price benar-benar sangat dipengaruhi oleh nilai hourspower, karena korelasi tinggi maka algoritma Regresi Linier ini cocok digunakan untuk data tersebut.","d6d77c1e":"Nilai parameter theta\n![gambar.png](attachment:gambar.png)","157133e5":"# MENGGUNAKAN SKLEARN","cbf1302e":"Data kita mempunya 26 kolom dengan 205 baris.","d516ec63":"# Melihat beberapa informasi general dari dataset kita agar kita lebih familiar dengan data yang kita punya.","4e8555cf":"Simple linear regression atau regresi linear sederhana merupakan jenis regresi yang paling sederhana karena hanya melibatkan satu variabel bebas atau variabel independen X.","2f57794e":"    theta_1 = ((111-104.11) * (13495-13276.71)) + ... + ((114-104.11) * (22625-13276.71)) \/ ((111-104.11)^2 + ... + (114-104.11)^2)","61acd29e":"    Module LinearRegression digunakan untuk memanggil algoritma Linear Regression.\n    Module train_test_split digunakan untuk membagi data kita menjadi training dan testing set.","e0934c15":"Semakin tinggi nilai error, semakin besar errornya","f988c163":"    Memuat dataset yang akan digunakan menggunakan library pandas dengan function read_csv","b26dd975":"Digunakan untuk Prediksi dengan mencari pola garis terbaik antara variable independent dan dependen\n\nPros:\n\n    Mudah diimplementasikan\n    Digunakan untuk memprediksi nilai numerik\/ continous \/data jenis interval dan ratio\n\nCons :\n\n    Cenderung mudah Overfitting\n    Tidak dapat digunakan bila relasi antara variabel independen dan dependen tidak linier atau korelasi variabel rendah","6cd44dec":"![gambar.png](attachment:gambar.png)","5848132e":"* from scratch\n* y = ax + b atau y = w1x + w0 atau y = mx + c\n* x = input\n* y = output\n* b atau w0 = intercept \/ bias\n* a atau w1 = slope \/ gradient \/ coefficient","d7d6ae70":"tampaknya enginesize, boreratio, horsepower, wheelbase memiliki korelasi yang signifikan dengan harga.\n\nmaka dari itu kami mengambil variabel enginesize untuk di training\n* Independent variabel(x) adalah enginesize.\n* Dependent variabel(y) adalah price."}}