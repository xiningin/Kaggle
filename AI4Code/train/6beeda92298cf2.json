{"cell_type":{"cbb9cb2d":"code","905a8c8c":"code","a467ae66":"code","ac427726":"code","6c251147":"code","9f73b6b3":"code","8aac579b":"code","05dd4241":"code","e9d61304":"code","0ebd3b83":"code","dc41e7f2":"code","0ecfd990":"code","4e6cc42f":"code","168f5a7c":"code","974abee2":"code","75290e74":"code","aed2e6fb":"code","7287c254":"code","4983b04a":"code","70dc7ef8":"code","6111d6f3":"code","75b1c428":"code","835cab82":"code","f7554fdf":"code","4cd24f72":"code","14999b84":"code","38932a49":"code","9b0d94cc":"markdown","bdeda936":"markdown","ec6b1555":"markdown","bde8fd6d":"markdown","e0ae5503":"markdown","453ee3d1":"markdown","adf23904":"markdown","ea85d0fb":"markdown","08522f13":"markdown","84ce8164":"markdown","8c60b9b0":"markdown"},"source":{"cbb9cb2d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","905a8c8c":"import pandas as pd\nimport numpy as np\n\ndata=pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndata.head()","a467ae66":"data.shape","ac427726":"data.drop(['customerID','Churn'],axis=1,inplace=True)\ndata.head()","6c251147":"print(data.isnull().sum())","9f73b6b3":"data['gender'].unique()","8aac579b":"data['PaymentMethod'].unique()","05dd4241":"from sklearn.preprocessing import LabelEncoder\n\nle=LabelEncoder()\ndata['gender']=le.fit_transform(data['gender'])\ndata.head()","e9d61304":"cols=data.columns\ncols","0ebd3b83":"cat_cols=data.select_dtypes(exclude=['int','float']).columns\ncat_cols","dc41e7f2":"data.dtypes","0ecfd990":"enc_data=list(cat_cols)\nenc_data=enc_data[:-1]\nenc_data","4e6cc42f":"data[enc_data]=data[enc_data].apply(lambda col:le.fit_transform(col))\ndata[enc_data].head()","168f5a7c":"data.head()","974abee2":"data.shape","75290e74":"data.dtypes","aed2e6fb":"try:\n    data['TotalCharges']=pd.to_numeric(data['TotalCharges'])\nexcept Exception as e:\n    print(e)","7287c254":"data['TotalCharges'].empty","4983b04a":"data.drop(['TotalCharges'],axis=1,inplace=True)","70dc7ef8":"from scipy.spatial.distance import cdist\nfrom sklearn.cluster import KMeans\ndistortions = []\nmapping1 = {} \nk=range(1,15)\nfor i in k:\n    kmeanModel = KMeans(n_clusters=i) \n    kmeanModel.fit(data)\n    distortions.append(sum(np.min(cdist(data, kmeanModel.cluster_centers_,'euclidean'),axis=1)) \/ data.shape[0])\n    mapping1[i] = sum(np.min(cdist(data, kmeanModel.cluster_centers_,'euclidean'),axis=1)) \/ data.shape[0]\nfor key,val in mapping1.items(): \n    print(str(key)+' : '+str(val))","6111d6f3":"import matplotlib.pyplot as plt\nplt.plot(k, distortions, 'bx-') \nplt.xlabel('Values of K') \nplt.ylabel('Distortion') \nplt.title('The Elbow Method using Distortion') \nplt.show() ","75b1c428":"import matplotlib.pyplot as plt\nSum_of_squared_distances = []\nmapp={}\nK = range(1,15)\nfor k in K:\n    km = KMeans(n_clusters=k)\n    km = km.fit(data)\n    Sum_of_squared_distances.append(km.inertia_)\n    mapp[k]=km.inertia_\nfor key,val in mapp.items(): \n    print(str(key)+' : '+str(val)) ","835cab82":"plt.plot(K, Sum_of_squared_distances, 'bx-')\nplt.xlabel('k')\nplt.ylabel('Sum_of_squared_distances')\nplt.title('Elbow Method For Optimal k')\nplt.show()","f7554fdf":"from sklearn.metrics import silhouette_score\ntry:\n    for n_clusters in K:\n        clusterer = KMeans (n_clusters=n_clusters).fit(data)\n        preds = clusterer.predict(data)\n        centers = clusterer.cluster_centers_\n\n        score = silhouette_score (data, preds, metric='euclidean')\n        print (\"For n_clusters = {}, silhouette score is {})\".format(n_clusters, score))\nexcept Exception as e:\n    print(e)","4cd24f72":"score_list=[]\nfor n_clusters in range(2,15):\n        clusterer = KMeans (n_clusters=n_clusters).fit(data)\n        preds = clusterer.predict(data)\n        centers = clusterer.cluster_centers_\n\n        score = silhouette_score (data, preds, metric='euclidean')\n        score_list.append(score)\n        print (\"For n_clusters = {}, silhouette score is {})\".format(n_clusters, score))","14999b84":"plt.bar(range(2,15),score_list)\nplt.show()","38932a49":"model=KMeans(n_clusters=4)\nmodel.fit(data)\nprint(model.labels_)","9b0d94cc":"To check how many unique variables exist in the gender column","bdeda936":"The TotalCharges column was giving a weird error which was not able to solve. Hence i decided to drop the column for time being.","ec6b1555":"The elbow method is a technique to find the optimum number of clusters to fit for the data.\nHere i will mention this amazing [blog post](http:\/\/https:\/\/www.geeksforgeeks.org\/elbow-method-for-optimal-value-of-k-in-kmeans\/) by GeeksforGeeks which clearly explains Elbow method in detail along with code.","bde8fd6d":"7043 rows denoting the number of customers this data was surveyed upon and 21 columns including the target variable which means 20 features contribute to the churn result.","e0ae5503":"Checking if there exists any NULL in the data, so it doesn't throw any errors afterwards while fitting the model to the data.","453ee3d1":"Customer ID and the target variable column are not to be included in the data which is used to predict the churn result.","adf23904":"We fit the KMeans clustering algorithm to the data inorder to verify the exact number of different types of customers we have in the dataset.","ea85d0fb":"These are th encoded labels corresponding to the  types of customers falling into the data. Using this information we can send out different business strategies or ads targeting them.","08522f13":"This indicates 4 to be the best way to cluster.\nSince at k=4 it shows the maximum silhouette score.","84ce8164":"Here, i have directly chosen to encode the variables in numeric form.","8c60b9b0":"**Importing Dependencies and Reading Data**"}}