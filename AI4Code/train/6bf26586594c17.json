{"cell_type":{"ba75fd84":"code","e012f1bb":"code","c7b097ab":"code","6087cee6":"code","b0def1c7":"code","e47ebdf0":"code","9d8723b5":"code","955ae839":"code","fbf7aa90":"code","8b469e5d":"code","bee9c0ea":"code","d05f83cd":"code","c3fe6367":"code","10929d9a":"code","8029b7de":"code","0a1fd19b":"code","f32c62c6":"code","0103ef5c":"code","3b7a1e00":"code","41b12054":"code","80ef0a6e":"code","6602638f":"code","070cf72d":"markdown","dc635243":"markdown","3f95e60d":"markdown","fc8b257c":"markdown","96be5806":"markdown","ea99de2d":"markdown","2e160553":"markdown","d3c2d806":"markdown","18b5bc67":"markdown","2c8dfeff":"markdown","1c9ff6ef":"markdown","97238f5e":"markdown","724f5071":"markdown","c5a43d77":"markdown"},"source":{"ba75fd84":"# system libraries\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# data manipulation libraries\nimport pandas as pd\nimport numpy as np\n\n# graphical libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# modelisation libraries\nfrom datetime import datetime\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.api import ExponentialSmoothing\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\n# metric evaluation\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error","e012f1bb":"def group_trading_timeseries(df, time_step_size):\n    #Copied from https:\/\/www.kaggle.com\/alexisalvarez\/eda-resampling-the-power-of-technical-analysis\n    df = df.sort_index()\n    df = df.resample('{}'.format(time_step_size)).agg({\n            'Count': lambda df: df.sum(),\n            'Open': lambda s: s.iloc[0] ,\n            'High': lambda df: df.max(), \n            'Low': lambda df: df.min(),\n            'Close': lambda df: df.iloc[-1], \n            'Volume': lambda df: df.sum(),\n            'VWAP' : lambda df: df.mean(),\n            'Target' : lambda df: df.mean()\n            }) \n    return df\n\ndef check_stationarity(series, asset_id):\n    # Copied and edited from https:\/\/machinelearningmastery.com\/time-series-data-stationary-python\/\n\n    result = adfuller(series.values)\n    if (result[1] <= 0.05) & (result[4]['5%'] > result[0]):\n        print(f\"{asset[asset.Asset_ID == asset_id].Asset_Name.values[0]}: \\u001b[32mStationary\\u001b[0m\")\n    else:\n        print(f\"{asset[asset.Asset_ID == asset_id].Asset_Name.values[0]}: \\x1b[31mNon-stationary\\x1b[0m\")\n       \n    print('ADF Statistic: %f' % result[0])\n    print('p-value: %f' % result[1])\n    print('Critical Values:')\n    for key, value in result[4].items():\n        print('\\t%s: %.3f' % (key, value))\n    print('\\n')\n\ndef metric_evaluation(y_true, y_pred):\n    mae = mean_absolute_error(y_true, y_pred)\n    mse = mean_squared_error(y_true, y_pred)\n    rmse = np.sqrt(mse)\n    mape = np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n    print('MAE = ', mae)\n    print('MSE = ', mse)\n    print('RMSE = ', rmse)\n    print('MAPE = ', mape)","c7b097ab":"data = pd.read_csv(\"..\/input\/g-research-crypto-forecasting\/train.csv\", encoding=\"utf-8\")\nasset = pd.read_csv(\"..\/input\/g-research-crypto-forecasting\/asset_details.csv\", encoding=\"utf-8\")\n\ndata[\"timestamp\"] = data[\"timestamp\"].apply(lambda x: datetime.fromtimestamp(x))\ndata[\"date\"] = data[\"timestamp\"].astype('datetime64[s]')\ndata.head()","6087cee6":"data = pd.merge(data, asset, on=\"Asset_ID\")\ndata.set_index(\"date\", inplace=True)\ndata = data[[\"Asset_Name\", \"Weight\", \"Count\",\n             \"Open\", \"High\", \"Low\",\n             \"Close\", \"Volume\", \"VWAP\",\n             \"Target\"]]\ndata.head()","b0def1c7":"data.isnull().mean() * 100","e47ebdf0":"data[data.duplicated()]","9d8723b5":"data.drop_duplicates(inplace=True)","955ae839":"data.dropna(inplace=True)","fbf7aa90":"data.head()","8b469e5d":"df_btc = data.loc[data[\"Asset_Name\"] == \"Bitcoin\"]\ndf_btc = group_trading_timeseries(df_btc, time_step_size=\"1d\")\ndf_btc.head()","bee9c0ea":"fig = go.Figure(data=[go.Candlestick(x=df_btc.index,\n                                     open=df_btc['Open'],\n                                     high=df_btc['High'],\n                                     low=df_btc['Low'],\n                                     close=df_btc['Close'])])\nfig.update_layout(xaxis_rangeslider_visible=False)\nfig.update_layout(\n    title='Bitcoin from Janv. 2018 to Sep. 2021',\n    yaxis_title='USD',\n    shapes = [dict(\n        x0='2020-03-11', x1='2020-03-11', y0=0, y1=1, xref='x', yref='paper',\n        line_width=2)],\n    annotations=[dict(\n        x='2020-03-11', y=0.05, xref='x', yref='paper',\n        showarrow=False, xanchor='left', text='Covid Sanitary Crisis Begin')]\n)\nfig.show()","d05f83cd":"for i in df_btc.columns:\n    print('\\033[1m'+i+'\\033[0m')\n    print(\"Mean: \", round(df_btc[i].mean(), 3))\n    print(\"Median: \", round(df_btc[i].median(), 3))\n    print(\"Standard Deviation: \", round(df_btc[i].std(), 3))\n    print(\"Variance: \", round(df_btc[i].var(), 3))\n    print(\"-------------------\")","c3fe6367":"for i in df_btc.columns:\n    sns.displot(x=i,\n                data=df_btc,\n                kde=True)\n    plt.title(\"Distribution of the variable: \" +  i)\n    plt.show()","10929d9a":"for i in df_btc.columns:\n    print(i)\n    check_stationarity(df_btc[i], 0)","8029b7de":"non_stat = [\"Count\", \"Open\", \"High\",\n            \"Low\", \"Close\", \"VWAP\"]\n\nfor i in non_stat:\n    df_btc[i] = df_btc[i].apply(lambda x: np.log(x))\n    df_btc[i] = df_btc[i].diff(1)\ndf_btc.dropna(inplace=True)","0a1fd19b":"df_btc.head()","f32c62c6":"for i in df_btc.columns:\n    print(i)\n    check_stationarity(df_btc[i], 0)","0103ef5c":"fig = go.Figure(data=[go.Candlestick(x=df_btc.index,\n                                     open=df_btc['Open'],\n                                     high=df_btc['High'],\n                                     low=df_btc['Low'],\n                                     close=df_btc['Close'])])\nfig.update_layout(xaxis_rangeslider_visible=False)\nfig.update_layout(\n    title='Bitcoin from Janv. 2018 to Sep. 2021',\n    yaxis_title='USD',\n    shapes = [dict(\n        x0='2020-03-11', x1='2020-03-11', y0=0, y1=1, xref='x', yref='paper',\n        line_width=2)],\n    annotations=[dict(\n        x='2020-03-11', y=0.05, xref='x', yref='paper',\n        showarrow=False, xanchor='left', text='Covid Sanitary Crisis Begin')]\n)\nfig.show()","3b7a1e00":"print(\"\\033[1mSeasonal decomposition of each variables\\033[0m\")\nfor i in df_btc.columns:\n    decomp_x = seasonal_decompose(df_btc[i],  model='add')\n    decomp_x.plot()\n    plt.show()\n    print(\"\\033[1m---------------------------------------------------------\\033[0m\")","41b12054":"window_size = 362\n\nfor i in df_btc.columns:\n    windows = df_btc[i].rolling(window_size)\n    moving_averages = windows.mean()\n    \n    moving_averages_list = moving_averages.tolist()\n    without_nans = moving_averages_list[window_size - 1:]\n    \n    plt.figure(figsize=(15,5))\n    plt.plot(df_btc[i], label=i)\n    plt.plot(moving_averages, label='Moving Average')\n    plt.title(i+\" in function of time\")\n    plt.xlabel('Time')\n    plt.legend(loc='best')\n    plt.show()\n    print(\"\\033[1m---------------------------------------------------------\\033[0m\")","80ef0a6e":"for i in df_btc.columns:\n    hw = ExponentialSmoothing(np.asarray(df_btc[i]),\n                                         trend=\"add\",\n                                         seasonal=\"add\",\n                                         seasonal_periods=7).fit()\n    hw_pred = hw.forecast(365)\n    \n    plt.figure(figsize=(14,6))\n    plt.plot(df_btc[i], label=i, color='green')\n    plt.plot(pd.date_range(df_btc.index[len(df_btc)-1], periods=365, freq='D'),\n             hw_pred, label='Prediction', color='red')\n    plt.title(i + \" and its prediction for the next year\")\n    plt.xlabel('Time')\n    plt.legend(loc='best')\n    plt.show()\n    print(\"\\033[1m--------------------------------------------------------------------------------------------------------------------\\033[0m\")","6602638f":"df_2 = df_btc.drop(df_btc.index[-365:])\n\nprint(\"\\033[1mEvaluation of Exponential Smoothing prediction\\033[0m\")\n\nfor i in df_btc.columns:\n    hw = ExponentialSmoothing(np.asarray(df_2[i]), seasonal_periods=7,\n                              trend='add', seasonal='add').fit()\n    hw_pred = hw.forecast(365)\n\n    plt.figure(figsize=(14,6))\n    plt.plot(df_btc[i], label=i, color='gray')\n    plt.plot(pd.date_range(df_2.index[len(df_2)-1], periods=365, freq='D'), hw_pred, \n             label='Prediction', color='green')\n    plt.xlabel('Time')\n    plt.legend(loc='best')\n    plt.show()\n    print(\"*****************************\\n\")\n    y_pred = hw_pred\n    y_true = np.asarray(df_2[i].iloc[-365:])\n    \n    metric_evaluation(y_true, y_pred)\n    print(\"-----------------------------\")","070cf72d":"In this trial, we only use Bitcoin. ","dc635243":"## Ressources","3f95e60d":"- https:\/\/www.kaggle.com\/iamleonie\/to-the-moon-g-research-crypto-forecasting-eda","fc8b257c":"## Data Preprocessing","96be5806":"### Seasonal decomposition","ea99de2d":"## Predictions with ML models","2e160553":"## Descriptive Analysis","d3c2d806":"# EDA and Holt-Winters methods on Bitcoin prediction during 365 days","18b5bc67":"# Exploratory Analysis","2c8dfeff":"## Stationarity","1c9ff6ef":"### Exponential Smoothing","97238f5e":"### Moving averages ","724f5071":"Columns of the dataset :\n* timestamp - A timestamp for the minute covered by the row.\n* Asset_ID - An ID code for the cryptoasset.\n* Count - The number of trades that took place this minute.\n* Open - The USD price at the beginning of the minute.\n* High - The highest USD price during the minute.\n* Low - The lowest USD price during the minute.\n* Close - The USD price at the end of the minute.\n* Volume - The number of cryptoasset units traded during the minute.\n* VWAP - The volume weighted average price for the minute.\n* Target - 15 minute residualized returns.","c5a43d77":"- Utils"}}