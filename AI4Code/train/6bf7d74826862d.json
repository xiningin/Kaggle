{"cell_type":{"26b50951":"code","9c04b88c":"code","d2062cff":"code","00fc889a":"code","35a18528":"code","c1d95936":"code","540c92c9":"code","1a682c23":"code","f6b4ccf2":"code","84d89116":"code","b96821d0":"code","43e06218":"code","d3dee61e":"code","0d77e41c":"code","488cdf68":"code","2bbda805":"code","b41cc469":"code","e4e1a7ba":"code","f9782d28":"markdown"},"source":{"26b50951":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport os\nimport time\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold,StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV","9c04b88c":"print(os.listdir(\"..\/input\"))","d2062cff":"train_df = pd.read_csv('..\/input\/train.csv')\nprint('Rows: ',train_df.shape[0],'Columns: ',train_df.shape[1])\ntrain_df.info()","00fc889a":"train_df.head()","35a18528":"train_df['target'].value_counts()","c1d95936":"sns.countplot(train_df['target'])\nsns.set_style('whitegrid')","540c92c9":"test_df = pd.read_csv('..\/input\/test.csv')","1a682c23":"X_test = test_df.drop('ID_code',axis=1)","f6b4ccf2":"X = train_df.drop(['ID_code','target'],axis=1)\ny = train_df['target']","84d89116":"n_fold = 5\nfolds = StratifiedKFold(n_splits=n_fold, shuffle=True, random_state=42)","b96821d0":"params = {'num_leaves': 8,\n         'min_data_in_leaf': 42,\n         'objective': 'binary',\n         'max_depth': 16,\n         'learning_rate': 0.0123,\n         'boosting': 'gbdt',\n         'bagging_freq': 5,\n         'bagging_fraction': 0.8,\n         'feature_fraction': 0.8201,\n         'bagging_seed': 11,\n         'reg_alpha': 1.728910519108444,\n         'reg_lambda': 4.9847051755586085,\n         'random_state': 42,\n         'metric': 'auc',\n         'verbosity': -1,\n         'subsample': 0.81,\n         'min_gain_to_split': 0.01077313523861969,\n         'min_child_weight': 19.428902804238373,\n         'num_threads': 4}","43e06218":"prediction = np.zeros(len(X_test))\nfor fold_n, (train_index, valid_index) in enumerate(folds.split(X,y)):\n    print('Fold', fold_n, 'started at', time.ctime())\n    X_train, X_valid = X.iloc[train_index], X.iloc[valid_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n    \n    train_data = lgb.Dataset(X_train, label=y_train)\n    valid_data = lgb.Dataset(X_valid, label=y_valid)\n        \n    model = lgb.train(params,train_data,num_boost_round=20000,\n                    valid_sets = [train_data, valid_data],verbose_eval=300,early_stopping_rounds = 200)\n            \n    #y_pred_valid = model.predict(X_valid)\n    prediction += model.predict(X_test, num_iteration=model.best_iteration)\/5","d3dee61e":"from catboost import CatBoostClassifier,Pool\ntrain_pool = Pool(X,y)\nm = CatBoostClassifier(iterations=300,eval_metric=\"AUC\", boosting_type = 'Ordered')\nm.fit(X,y,silent=True)\ny_pred1 = m.predict(X_test)\nm.best_score_","0d77e41c":"prediction","488cdf68":"y_pred1","2bbda805":"sub = pd.DataFrame({\"ID_code\": test_df.ID_code.values})\nsub[\"target\"] = prediction\nsub.to_csv(\"submission.csv\", index=False)","b41cc469":"sub1 = pd.DataFrame({\"ID_code\": test_df.ID_code.values})\nsub1[\"target\"] = y_pred1\nsub1.to_csv(\"submission1.csv\", index=False)","e4e1a7ba":"sub2 = pd.DataFrame({\"ID_code\": test_df.ID_code.values})\nsub2[\"target\"] = (prediction + y_pred1)\/2\nsub2.to_csv(\"submission2.csv\", index=False)","f9782d28":"## Reference\n1. https:\/\/www.kaggle.com\/gpreda\/santander-eda-and-prediction\n2. https:\/\/www.kaggle.com\/deepak525\/sctp-lightgbm-lb-0-899"}}