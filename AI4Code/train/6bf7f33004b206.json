{"cell_type":{"86835629":"code","f98fcbb9":"code","1ceb66e0":"code","622882f9":"code","ec385bf6":"code","2fa6a509":"code","e31c1c51":"code","d3758225":"code","b79e4f04":"code","8c81a447":"code","02702773":"code","30e61bc1":"markdown","de8c1078":"markdown","ee2a3b73":"markdown","ca964f12":"markdown","b3107c8d":"markdown","eeff87c7":"markdown","b47bc7ce":"markdown"},"source":{"86835629":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data visualization\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nimport warnings\nwarnings.filterwarnings(action='ignore')\nwarnings.filterwarnings(action='ignore', category=DeprecationWarning)\nwarnings.filterwarnings(action='ignore', category=FutureWarning)\n\n# Library for Learning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout, GRU, Bidirectional\nfrom keras.optimizers import SGD\nimport math\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","f98fcbb9":"# Any results you write to the current directory are saved as output.\nfor i in os.listdir(\"..\/input\"):\n    print(i)\n\ncoinbase = pd.read_csv(\"..\/input\/coinbaseUSD_1-min_data_2014-12-01_to_2018-11-11.csv\")\ncb_index = coinbase.index.ravel()\n\nprint(list(coinbase.columns), \"\\nSHAPE ::\", coinbase.shape)\nfor i in coinbase.columns:\n    print(i, \"::\", coinbase[i].dtype)\n\n# Declaring number for random state for reproducibility\nrstate=123\n    \ncoinbase.describe()","1ceb66e0":"a = coinbase[\"Close\"][1200000:].fillna(method=\"backfill\")","622882f9":"close_price = np.array(a).reshape(-1,1)\nplt.figure(figsize=(14,6))\nplt.title(\"Bitcoin Closing Price\")\nplt.grid()\nplt.plot(close_price)\n\nsc = MinMaxScaler()\nclose_priceSC = sc.fit_transform(close_price)\nplt.figure(figsize=(14,6))\nplt.title(\"Scaled\")\nplt.grid()\nplt.plot(close_priceSC)","ec385bf6":"X = []\ny = []\nfor i in range(60, len(close_priceSC)):\n    X.append(close_priceSC[i-60:i, 0])\n    y.append(close_priceSC[i,0])\nX, y = np.array(X), np.array(y)\nprint(X.shape, y.shape)","2fa6a509":"X_train = X[:700000,:]\nX_test = X[700000:,:]\n\ny_train = y[:700000]\ny_test = y[700000:]","e31c1c51":"plt.figure(figsize=(14,4))\nplt.plot(range(700000),y_train)\nplt.plot(range(700000, len(y)), y_test)\nplt.legend([\"Training\", \"Test\"])\nplt.grid()","d3758225":"X_train = X_train.reshape(-1,60,1)\nX_test = X_test.reshape(-1,60,1)","b79e4f04":"%%time\n# The LSTM architecture\nregressor = Sequential()\n# First LSTM layer with Dropout regularisation\nregressor.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)))\nregressor.add(Dropout(0.2))\n# Second LSTM layer\nregressor.add(LSTM(units=50, return_sequences=True))\nregressor.add(Dropout(0.2))\n# Third LSTM layer\nregressor.add(LSTM(units=50, return_sequences=True))\nregressor.add(Dropout(0.5))\n# Fourth LSTM layer\nregressor.add(LSTM(units=50))\nregressor.add(Dropout(0.5))\n# The output layer\nregressor.add(Dense(units=1))\n\n# Compiling the RNN\nregressor.compile(optimizer='adam', loss='mean_absolute_error')\n# Fitting to the training set\nregressor.fit(X_train, y_train, epochs=1, batch_size=500)","8c81a447":"y_pred = regressor.predict(X_test)\nMSE = mean_absolute_error(y_test, y_pred)","02702773":"plt.figure(figsize=(14,6))\nplt.plot(sc.inverse_transform(y_test.reshape(-1,1)))\nplt.plot(sc.inverse_transform(y_pred.reshape(-1,1)))\nplt.title(\"Comparison with MAE {0:0.10f}\".format(MSE))\nplt.legend([\"Y\", \"Prediction\"])\nplt.xlabel(\"Timeframe\")\nplt.ylabel(\"Price\")","30e61bc1":"We choose Bitcoin price after 1.200.000 because this is the time where people starts to recongnize Bitcoin.  We map the `Close` and its changes in percentage.","de8c1078":"This is clearly overfitting","ee2a3b73":"Plotting train and test data","ca964f12":"Transforming time series data to trainable data","b3107c8d":"Preparing X for LSTM","eeff87c7":"Train using LSTM ","b47bc7ce":"Splitting train and test"}}