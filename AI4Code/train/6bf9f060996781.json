{"cell_type":{"ce57335e":"code","0c6909c7":"code","b2b2b61e":"code","965072f1":"code","85a2359b":"code","cfe7cd8c":"code","9ee83d56":"code","3dffaf03":"code","2018bde9":"code","7884b8ba":"code","283a04a1":"code","344e65e5":"code","f1bb2c5c":"code","855d7e91":"code","9067dcd6":"code","d3a3386f":"code","32f459bc":"code","5f66edcd":"code","7900361b":"code","b0b4b76d":"code","d77a58c5":"code","99f3c16d":"code","bb1bdbbc":"markdown","016ddd19":"markdown","237ffc10":"markdown"},"source":{"ce57335e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c6909c7":"df = pd.read_csv('..\/input\/supermarket-sales\/supermarket_sales - Sheet1.csv', parse_dates={'dt': ['Date','Time']}).set_index('dt')\ndf","b2b2b61e":"df.info()","965072f1":"from scipy.stats import iqr\nimport math\nfig, ax = plt.subplots(len(df.select_dtypes('number').columns))\n\nfor i,col in enumerate(df.select_dtypes('number').columns):\n    if col == 'gross margin percentage':\n        continue\n    b = 2 * iqr(df[col]) \/ len(df[col])**(1\/3)\n    ax[i].hist(df[col], label=col, bins=math.ceil(b), histtype='stepfilled')\n    ax[i].legend()\nfig.set_size_inches([20,35])\nplt.show()","85a2359b":"branch = df.groupby('Branch')\nbranch_mean = branch['Total'].mean()\nfig, ax = plt.subplots()\nax.bar(branch_mean.index, branch_mean, yerr=branch['Total'].std())\n\nplt.show()","cfe7cd8c":"branch = df.groupby('Branch')\nbranch_mean = branch['Total'].mean()\nfig, ax = plt.subplots()\nax.bar(branch_mean.index, branch_mean, yerr=branch['Total'].std())\n\nplt.show()","9ee83d56":"branch['Product line'].agg(lambda x:x.value_counts().index[0])","3dffaf03":"import seaborn as sns\nproduct_a = df.loc[df.Branch == 'A', 'Product line']\nax = sns.countplot(product_a, order = product_a.value_counts().index)\nax.set_title('Product Line Sold in Branch A')\nplt.xticks(rotation=45)\nplt.show()","2018bde9":"product_a = df.loc[df.Branch == 'B', 'Product line']\nax = sns.countplot(product_a, order = product_a.value_counts().index)\nax.set_title('Product Line Sold in Branch B')\nplt.xticks(rotation=45)\nplt.show()","7884b8ba":"product_a = df.loc[df.Branch == 'C', 'Product line']\nax = sns.countplot(product_a, order = product_a.value_counts().index)\nax.set_title('Product Line Sold in Branch C')\nplt.xticks(rotation=45)\nplt.show()","283a04a1":"df[df.Branch == 'A'].sort_index()","344e65e5":"branchA = df[df.Branch == 'A'].sort_index()\nbranchB = df[df.Branch == 'B'].sort_index()\nbranchC = df[df.Branch == 'C'].sort_index()","f1bb2c5c":"df.index.min(), df.index.max()","855d7e91":"fig, ax = plt.subplots(figsize=(8,6))\nperiod = 'M'\nax.plot(branchA.resample(period)['Total'].mean(), label='A')\nax.plot(branchB.resample(period)['Total'].mean(), label='B')\nax.plot(branchC.resample(period)['Total'].mean(), label='C')\nax.legend()\nax.set_title('The Last 3 Months Sales')\nplt.xticks(rotation=45)\nplt.show()","9067dcd6":"fig, ax = plt.subplots()\ntotal = df[['Customer type', 'Branch']].groupby('Branch')['Customer type'].count()\nnormal = df[df['Customer type'] == 'Normal'].groupby('Branch')['Customer type'].count() \/ total\nmember = df[df['Customer type'] == 'Member'].groupby('Branch')['Customer type'].count() \/ total\nax.bar(['A', 'B', 'C'], normal, label='Normal')\nax.bar(['A', 'B', 'C'], member, bottom=normal, label='Member')\nax.legend()\nax.set_title('Percentage of Customer Type for Each Branch')\nplt.show()","d3a3386f":"ax = sns.scatterplot(data=df, x='Total', y='Rating', hue='Branch')\nax.legend(bbox_to_anchor=(1.05, 1))\nplt.show()","32f459bc":"fig, ax = plt.subplots(1,3, figsize=(10,10))\n\nfor i, n in enumerate(['A','B','C']):\n    payment = df[df.Branch == n].groupby('Payment')['Branch'].count()\n    ax[i].pie(payment, autopct='%1.1f%%', labels=payment.index)\n    ax[i].set_xlabel('Branch ' + n)\nplt.show()","5f66edcd":"hourA = branchA.groupby(branchA.index.hour)['Branch'].count()\nhourB = branchB.groupby(branchB.index.hour)['Branch'].count()\nhourC = branchC.groupby(branchC.index.hour)['Branch'].count()\n\nfig, ax = plt.subplots(figsize=(8,6))\nax.plot(hourA, label='A')\nax.fill_between(hourA.index, hourA)\nax.plot(hourB, label='B')\nax.fill_between(hourB.index, hourB)\nax.plot(hourC, label='C')\nax.fill_between(hourC.index, hourC)\n\nax.legend()\nax.set_xlabel('Hour')\nax.set_ylabel('Count')\nax.set_title('Count of Sales in Hour')\nplt.show()","7900361b":"hourA = branchA.groupby(branchA.index.dayofweek)['Branch'].count()\nhourB = branchB.groupby(branchB.index.dayofweek)['Branch'].count()\nhourC = branchC.groupby(branchC.index.dayofweek)['Branch'].count()\n\nfig, ax = plt.subplots(figsize=(8,6))\nax.bar(hourA.index, hourA, label='A')\nax.bar(hourA.index, hourB,bottom=hourA, label='B')\nax.bar(['Monday', 'Tuesday', 'Wednesday','Thursday','Friday','Saturday','Sunday'], hourC,bottom=hourA + hourB, label='C')\n\nax.legend()\nax.set_xlabel('Day')\nax.set_ylabel('Count')\nax.set_title('Count of Sales in Week of Day')\nplt.show()","b0b4b76d":"fig, ax = plt.subplots(figsize=(8,6))\nperiod = 'M'\nax.plot(branchA.resample(period)['Rating'].median(), label='A')\nax.plot(branchB.resample(period)['Rating'].median(), label='B')\nax.plot(branchC.resample(period)['Rating'].median(), label='C')\nax.legend()\nax.set_title('The Last 3 Months Branch\\'s Rating')\nplt.xticks(rotation=45)\nplt.show()","d77a58c5":"from scipy.stats import chi2_contingency\ndata = pd.crosstab(df.Branch, df['Payment'])\nstat, p, dof, expected = chi2_contingency(data)\nalpha = 0.05\nprint(\"p value is \" + str(p)) \nif p <= alpha: \n    print('Dependent (reject H0)') \nelse: \n    print('Independent (H0 holds true)') ","99f3c16d":"from statsmodels.graphics.mosaicplot import mosaic\nfeatures = ['Branch', 'Payment'] \nmosaic(df[features],features, title='Branch - Product line')\nplt.show()","bb1bdbbc":"secara umum rata - rata penjualan tertinggi ada pada cabang C yang berada di Nayptitaw, diikuti cabang B dan A yang terakhir. Berdasarkan kota tempat cabang tersebut tentunya wajar bahwa C memiliki rata - rata penjualan tertinggi karena kota Naypyitaw adalah capital city dari Myanmar.","016ddd19":"# Data Cleaning","237ffc10":"# Deskripsi Profil General dari 3 Cabang"}}