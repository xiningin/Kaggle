{"cell_type":{"dcf35811":"code","9d24a284":"code","c3fdfeb6":"code","fa500869":"code","24a2100c":"code","2d2eac93":"code","74a33864":"code","02a199f5":"code","a37249e7":"code","93026cb6":"code","9645bc25":"code","e610e062":"code","15a3bf63":"code","83e15592":"code","ea6775a4":"code","9e2b52c3":"code","38cf9f0b":"code","a2567e5f":"code","ef4964c7":"code","fc95708d":"code","304d8c8a":"code","07b0c7c9":"code","2746f9e6":"code","2178a02a":"markdown","5e87e96c":"markdown","5643661a":"markdown","3b176649":"markdown","47616802":"markdown","474d05d4":"markdown","4193026e":"markdown","6dcf5511":"markdown","ee1a0e8c":"markdown","608e0888":"markdown","665c38d1":"markdown","22528c9b":"markdown","c354b904":"markdown","47fedbe3":"markdown","5c0d3220":"markdown","e064572c":"markdown","2626fa51":"markdown"},"source":{"dcf35811":"import os, cv2\nimport numpy as np\nimport pandas as pd\nimport random, tqdm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import DataLoader\nimport albumentations as album","9d24a284":"!pip install -q -U segmentation-models-pytorch albumentations > \/dev\/null\nimport segmentation_models_pytorch as smp","c3fdfeb6":"DATA_DIR = '..\/input\/deepglobe-road-extraction-dataset'\n\nmetadata_df = pd.read_csv(os.path.join(DATA_DIR, 'metadata.csv'))\nmetadata_df = metadata_df[metadata_df['split']=='train']\nmetadata_df = metadata_df[['image_id', 'sat_image_path', 'mask_path']]\nmetadata_df['sat_image_path'] = metadata_df['sat_image_path'].apply(lambda img_pth: os.path.join(DATA_DIR, img_pth))\nmetadata_df['mask_path'] = metadata_df['mask_path'].apply(lambda img_pth: os.path.join(DATA_DIR, img_pth))\n# Shuffle DataFrame\nmetadata_df = metadata_df.sample(frac=1).reset_index(drop=True)\n\n# Perform 90\/10 split for train \/ val\nvalid_df = metadata_df.sample(frac=0.1, random_state=42)\ntrain_df = metadata_df.drop(valid_df.index)\nlen(train_df), len(valid_df)","fa500869":"class_dict = pd.read_csv(os.path.join(DATA_DIR, 'class_dict.csv'))\n# Get class names\nclass_names = class_dict['name'].tolist()\n# Get class RGB values\nclass_rgb_values = class_dict[['r','g','b']].values.tolist()\n\nprint('All dataset classes and their corresponding RGB values in labels:')\nprint('Class Names: ', class_names)\nprint('Class RGB values: ', class_rgb_values)","24a2100c":"# Useful to shortlist specific classes in datasets with large number of classes\nselect_classes = ['background', 'road']\n\n# Get RGB values of required classes\nselect_class_indices = [class_names.index(cls.lower()) for cls in select_classes]\nselect_class_rgb_values =  np.array(class_rgb_values)[select_class_indices]\n\nprint('Selected classes and their corresponding RGB values in labels:')\nprint('Class Names: ', class_names)\nprint('Class RGB values: ', class_rgb_values)","2d2eac93":"# helper function for data visualization\ndef visualize(**images):\n    \"\"\"\n    Plot images in one row\n    \"\"\"\n    n_images = len(images)\n    plt.figure(figsize=(20,8))\n    for idx, (name, image) in enumerate(images.items()):\n        plt.subplot(1, n_images, idx + 1)\n        plt.xticks([]); \n        plt.yticks([])\n        # get title from the parameter names\n        plt.title(name.replace('_',' ').title(), fontsize=20)\n        plt.imshow(image)\n    plt.show()\n\n# Perform one hot encoding on label\ndef one_hot_encode(label, label_values):\n    \"\"\"\n    Convert a segmentation image label array to one-hot format\n    by replacing each pixel value with a vector of length num_classes\n    # Arguments\n        label: The 2D array segmentation image label\n        label_values\n        \n    # Returns\n        A 2D array with the same width and hieght as the input, but\n        with a depth size of num_classes\n    \"\"\"\n    semantic_map = []\n    for colour in label_values:\n        equality = np.equal(label, colour)\n        class_map = np.all(equality, axis = -1)\n        semantic_map.append(class_map)\n    semantic_map = np.stack(semantic_map, axis=-1)\n\n    return semantic_map\n    \n# Perform reverse one-hot-encoding on labels \/ preds\ndef reverse_one_hot(image):\n    \"\"\"\n    Transform a 2D array in one-hot format (depth is num_classes),\n    to a 2D array with only 1 channel, where each pixel value is\n    the classified class key.\n    # Arguments\n        image: The one-hot format image \n        \n    # Returns\n        A 2D array with the same width and hieght as the input, but\n        with a depth size of 1, where each pixel value is the classified \n        class key.\n    \"\"\"\n    x = np.argmax(image, axis = -1)\n    return x\n\n# Perform colour coding on the reverse-one-hot outputs\ndef colour_code_segmentation(image, label_values):\n    \"\"\"\n    Given a 1-channel array of class keys, colour code the segmentation results.\n    # Arguments\n        image: single channel array where each value represents the class key.\n        label_values\n\n    # Returns\n        Colour coded image for segmentation visualization\n    \"\"\"\n    colour_codes = np.array(label_values)\n    x = colour_codes[image.astype(int)]\n\n    return x","74a33864":"class RoadsDataset(torch.utils.data.Dataset):\n\n    \"\"\"DeepGlobe Road Extraction Challenge Dataset. Read images, apply augmentation and preprocessing transformations.\n    \n    Args:\n        df (str): DataFrame containing images \/ labels paths\n        class_rgb_values (list): RGB values of select classes to extract from segmentation mask\n        augmentation (albumentations.Compose): data transfromation pipeline \n            (e.g. flip, scale, etc.)\n        preprocessing (albumentations.Compose): data preprocessing \n            (e.g. noralization, shape manipulation, etc.)\n    \n    \"\"\"\n    def __init__(\n            self, \n            df,\n            class_rgb_values=None, \n            augmentation=None, \n            preprocessing=None,\n    ):\n        self.image_paths = df['sat_image_path'].tolist()\n        self.mask_paths = df['mask_path'].tolist()\n        \n        self.class_rgb_values = class_rgb_values\n        self.augmentation = augmentation\n        self.preprocessing = preprocessing\n    \n    def __getitem__(self, i):\n        \n        # read images and masks\n        image = cv2.cvtColor(cv2.imread(self.image_paths[i]), cv2.COLOR_BGR2RGB)\n        mask = cv2.cvtColor(cv2.imread(self.mask_paths[i]), cv2.COLOR_BGR2RGB)\n        \n        # one-hot-encode the mask\n        mask = one_hot_encode(mask, self.class_rgb_values).astype('float')\n        \n        # apply augmentations\n        if self.augmentation:\n            sample = self.augmentation(image=image, mask=mask)\n            image, mask = sample['image'], sample['mask']\n        \n        # apply preprocessing\n        if self.preprocessing:\n            sample = self.preprocessing(image=image, mask=mask)\n            image, mask = sample['image'], sample['mask']\n            \n        return image, mask\n        \n    def __len__(self):\n        # return length of \n        return len(self.image_paths)","02a199f5":"dataset = RoadsDataset(train_df, class_rgb_values=select_class_rgb_values)\nrandom_idx = random.randint(0, len(dataset)-1)\nimage, mask = dataset[2]\n\nvisualize(\n    original_image = image,\n    ground_truth_mask = colour_code_segmentation(reverse_one_hot(mask), select_class_rgb_values),\n    one_hot_encoded_mask = reverse_one_hot(mask)\n)","a37249e7":"def get_training_augmentation():\n    train_transform = [\n        album.HorizontalFlip(p=0.5),\n        album.VerticalFlip(p=0.5),\n    ]\n    return album.Compose(train_transform)\n\n\ndef to_tensor(x, **kwargs):\n    return x.transpose(2, 0, 1).astype('float32')\n\n\ndef get_preprocessing(preprocessing_fn=None):\n    \"\"\"Construct preprocessing transform    \n    Args:\n        preprocessing_fn (callable): data normalization function \n            (can be specific for each pretrained neural network)\n    Return:\n        transform: albumentations.Compose\n    \"\"\"\n    _transform = []\n    if preprocessing_fn:\n        _transform.append(album.Lambda(image=preprocessing_fn))\n    _transform.append(album.Lambda(image=to_tensor, mask=to_tensor))\n        \n    return album.Compose(_transform)","93026cb6":"augmented_dataset = RoadsDataset(\n    train_df, \n    augmentation=get_training_augmentation(),\n    class_rgb_values=select_class_rgb_values,\n)\n\nrandom_idx = random.randint(0, len(augmented_dataset)-1)\n\n# Different augmentations on image\/mask pairs\nfor idx in range(3):\n    image, mask = augmented_dataset[idx]\n    visualize(\n        original_image = image,\n        ground_truth_mask = colour_code_segmentation(reverse_one_hot(mask), select_class_rgb_values),\n        one_hot_encoded_mask = reverse_one_hot(mask)\n    )","9645bc25":"ENCODER = 'resnet50'\nENCODER_WEIGHTS = 'imagenet'\nCLASSES = select_classes\nACTIVATION = 'sigmoid' # could be None for logits or 'softmax2d' for multiclass segmentation\n\n# create segmentation model with pretrained encoder\nmodel = smp.DeepLabV3Plus(\n    encoder_name=ENCODER, \n    encoder_weights=ENCODER_WEIGHTS, \n    classes=len(CLASSES), \n    activation=ACTIVATION,\n)\n\npreprocessing_fn = smp.encoders.get_preprocessing_fn(ENCODER, ENCODER_WEIGHTS)","e610e062":"# Get train and val dataset instances\ntrain_dataset = RoadsDataset(\n    train_df, \n    augmentation=get_training_augmentation(),\n    preprocessing=get_preprocessing(preprocessing_fn),\n    class_rgb_values=select_class_rgb_values,\n)\n\nvalid_dataset = RoadsDataset(\n    valid_df, \n    preprocessing=get_preprocessing(preprocessing_fn),\n    class_rgb_values=select_class_rgb_values,\n)\n\n# Get train and val data loaders\ntrain_loader = DataLoader(train_dataset, batch_size=4, shuffle=True, num_workers=4)\nvalid_loader = DataLoader(valid_dataset, batch_size=4, shuffle=False, num_workers=4)","15a3bf63":"# Set flag to train the model or not. If set to 'False', only prediction is performed (using an older model checkpoint)\nTRAINING = True\n\n# Set num of epochs\nEPOCHS = 3\n\n# Set device: `cuda` or `cpu`\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n# define loss function\nloss = smp.utils.losses.DiceLoss()\n\n# define metrics\nmetrics = [\n    smp.utils.metrics.IoU(threshold=0.5),\n]\n\n# define optimizer\noptimizer = torch.optim.Adam([ \n    dict(params=model.parameters(), lr=0.00008),\n])\n\n# define learning rate scheduler (not used in this NB)\nlr_scheduler = torch.optim.lr_scheduler.CosineAnnealingWarmRestarts(\n    optimizer, T_0=1, T_mult=2, eta_min=5e-5,\n)\n\n# load best saved model checkpoint from previous commit (if present)\nif os.path.exists('..\/input\/road-extraction-from-satellite-images-deeplabv3\/best_model.pth'):\n    model = torch.load('..\/input\/road-extraction-from-satellite-images-deeplabv3\/best_model.pth', map_location=DEVICE)\n    print('Loaded pre-trained DeepLabV3+ model!')","83e15592":"train_epoch = smp.utils.train.TrainEpoch(\n    model, \n    loss=loss, \n    metrics=metrics, \n    optimizer=optimizer,\n    device=DEVICE,\n    verbose=True,\n)\n\nvalid_epoch = smp.utils.train.ValidEpoch(\n    model, \n    loss=loss, \n    metrics=metrics, \n    device=DEVICE,\n    verbose=True,\n)","ea6775a4":"%%time\n\nif TRAINING:\n\n    best_iou_score = 0.0\n    train_logs_list, valid_logs_list = [], []\n\n    for i in range(0, EPOCHS):\n\n        # Perform training & validation\n        print('\\nEpoch: {}'.format(i))\n        train_logs = train_epoch.run(train_loader)\n        valid_logs = valid_epoch.run(valid_loader)\n        train_logs_list.append(train_logs)\n        valid_logs_list.append(valid_logs)\n\n        # Save model if a better val IoU score is obtained\n        if best_iou_score < valid_logs['iou_score']:\n            best_iou_score = valid_logs['iou_score']\n            torch.save(model, '.\/best_model.pth')\n            print('Model saved!')","9e2b52c3":"# load best saved model checkpoint from the current run\nif os.path.exists('.\/best_model.pth'):\n    best_model = torch.load('.\/best_model.pth', map_location=DEVICE)\n    print('Loaded DeepLabV3+ model from this run.')\n\n# load best saved model checkpoint from previous commit (if present)\nelif os.path.exists('..\/input\/road-extraction-from-satellite-images-deeplabv3\/best_model.pth'):\n    best_model = torch.load('..\/input\/road-extraction-from-satellite-images-deeplabv3\/best_model.pth', map_location=DEVICE)\n    print('Loaded DeepLabV3+ model from a previous commit.')","38cf9f0b":"# create test dataloader to be used with DeepLabV3+ model (with preprocessing operation: to_tensor(...))\ntest_dataset = RoadsDataset(\n    valid_df, \n    preprocessing=get_preprocessing(preprocessing_fn),\n    class_rgb_values=select_class_rgb_values,\n)\n\ntest_dataloader = DataLoader(test_dataset)\n\n# test dataset for visualization (without preprocessing augmentations & transformations)\ntest_dataset_vis = RoadsDataset(\n    valid_df,\n    class_rgb_values=select_class_rgb_values,\n)\n\n# get a random test image\/mask index\nrandom_idx = random.randint(0, len(test_dataset_vis)-1)\nimage, mask = test_dataset_vis[random_idx]\n\nvisualize(\n    original_image = image,\n    ground_truth_mask = colour_code_segmentation(reverse_one_hot(mask), select_class_rgb_values),\n    one_hot_encoded_mask = reverse_one_hot(mask)\n)\n","a2567e5f":"sample_preds_folder = 'sample_predictions\/'\nif not os.path.exists(sample_preds_folder):\n    os.makedirs(sample_preds_folder)","ef4964c7":"for idx in range(len(test_dataset)):\n\n    image, gt_mask = test_dataset[idx]\n    image_vis = test_dataset_vis[idx][0].astype('uint8')\n    x_tensor = torch.from_numpy(image).to(DEVICE).unsqueeze(0)\n    # Predict test image\n    pred_mask = best_model(x_tensor)\n    pred_mask = pred_mask.detach().squeeze().cpu().numpy()\n    # Convert pred_mask from `CHW` format to `HWC` format\n    pred_mask = np.transpose(pred_mask,(1,2,0))\n    # Get prediction channel corresponding to foreground\n    pred_road_heatmap = pred_mask[:,:,select_classes.index('road')]\n    pred_mask = colour_code_segmentation(reverse_one_hot(pred_mask), select_class_rgb_values)\n    # Convert gt_mask from `CHW` format to `HWC` format\n    gt_mask = np.transpose(gt_mask,(1,2,0))\n    gt_mask = colour_code_segmentation(reverse_one_hot(gt_mask), select_class_rgb_values)\n    cv2.imwrite(os.path.join(sample_preds_folder, f\"sample_pred_{idx}.png\"), np.hstack([image_vis, gt_mask, pred_mask])[:,:,::-1])\n    \n    visualize(\n        original_image = image_vis,\n        ground_truth_mask = gt_mask,\n        predicted_mask = pred_mask,\n        pred_road_heatmap = pred_road_heatmap\n    )","fc95708d":"test_epoch = smp.utils.train.ValidEpoch(\n    model,\n    loss=loss, \n    metrics=metrics, \n    device=DEVICE,\n    verbose=True,\n)\n\nvalid_logs = test_epoch.run(test_dataloader)\nprint(\"Evaluation on Test Data: \")\nprint(f\"Mean IoU Score: {valid_logs['iou_score']:.4f}\")\nprint(f\"Mean Dice Loss: {valid_logs['dice_loss']:.4f}\")","304d8c8a":"train_logs_df = pd.DataFrame(train_logs_list)\nvalid_logs_df = pd.DataFrame(valid_logs_list)\ntrain_logs_df.T","07b0c7c9":"plt.figure(figsize=(20,8))\nplt.plot(train_logs_df.index.tolist(), train_logs_df.iou_score.tolist(), lw=3, label = 'Train')\nplt.plot(valid_logs_df.index.tolist(), valid_logs_df.iou_score.tolist(), lw=3, label = 'Valid')\nplt.xlabel('Epochs', fontsize=20)\nplt.ylabel('IoU Score', fontsize=20)\nplt.title('IoU Score Plot', fontsize=20)\nplt.legend(loc='best', fontsize=16)\nplt.grid()\nplt.savefig('iou_score_plot.png')\nplt.show()","2746f9e6":"plt.figure(figsize=(20,8))\nplt.plot(train_logs_df.index.tolist(), train_logs_df.dice_loss.tolist(), lw=3, label = 'Train')\nplt.plot(valid_logs_df.index.tolist(), valid_logs_df.dice_loss.tolist(), lw=3, label = 'Valid')\nplt.xlabel('Epochs', fontsize=20)\nplt.ylabel('Dice Loss', fontsize=20)\nplt.title('Dice Loss Plot', fontsize=20)\nplt.legend(loc='best', fontsize=16)\nplt.grid()\nplt.savefig('dice_loss_plot.png')\nplt.show()","2178a02a":"#### Visualize Augmented Images & Masks","5e87e96c":"## Introduction\n\n### In this notebook we use [DeepLabV3+](https:\/\/arxiv.org\/abs\/1802.02611) for Road Extraction from Satellite Imagery using [DeepGlobe Road Extraction Dataset](https:\/\/www.kaggle.com\/balraj98\/deepglobe-road-extraction-dataset).","5643661a":"### Model Definition","3b176649":"### Training DeepLabV3+","47616802":"## Training DeepLabV3+","474d05d4":"### Read Data & Create train \/ valid splits \ud83d\udcc1","4193026e":"#### Visualize Sample Image and Mask \ud83d\udcc8","6dcf5511":"### Plot Dice Loss & IoU Metric for Train vs. Val","ee1a0e8c":"<h3><center>DeepLabV3+ Model Architecture<\/center><\/h3>\n<img src=\"https:\/\/miro.medium.com\/max\/1000\/1*2mYfKnsX1IqCCSItxpXSGA.png\" width=\"750\" height=\"750\"\/>\n<h4><\/h4>\n<h4><center><a href=\"https:\/\/arxiv.org\/abs\/1802.02611\">Image Source: DeepLabV3+ [Liang-Chieh Chen et al.]<\/a><\/center><\/h4>","608e0888":"#### Shortlist specific classes to segment","665c38d1":"#### Get Train \/ Val DataLoaders","22528c9b":"### Defining Augmentations \ud83d\ude43","c354b904":"#### Set Hyperparams","47fedbe3":"### Model Evaluation on Test Dataset","5c0d3220":"### Libraries \ud83d\udcda\u2b07","e064572c":"### Helper functions for viz. & one-hot encoding\/decoding","2626fa51":"### Prediction on Test Data"}}