{"cell_type":{"d6c952a3":"code","dbb856a6":"code","d9801324":"code","f5fb0cf4":"code","e7ded9f8":"code","fc55e0dc":"code","7826571c":"code","3ac8c8db":"code","c604a0bd":"code","df487392":"code","ceafbe85":"code","dbefa1f4":"code","d8fc8ec4":"code","49eeb01d":"code","db0fdc5a":"code","b6f9e3be":"code","46ca4ffb":"code","c3d7e63c":"code","352581ee":"code","0db46309":"code","cd5f3370":"code","33c3c5ef":"code","1361cf59":"code","d5feb69a":"code","b23c8c6d":"code","ddd90243":"code","792cc32e":"code","bcd48829":"code","e44d18e5":"code","c11f04a4":"code","ea1997a0":"code","b858c5e4":"code","ec8b91db":"code","d19715f9":"markdown","3cbe6d05":"markdown","d773b98d":"markdown"},"source":{"d6c952a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dbb856a6":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error \nimport seaborn as sns\n%matplotlib inline\nimport warnings\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_colwidth', -1)","d9801324":"data = pd.read_csv('..\/input\/electric-production\/Electric_Production.csv', index_col='DATE', parse_dates=True)\ndata.index.freq = 'MS'\ndata.head()\n","f5fb0cf4":"type(data)","e7ded9f8":"data.size","fc55e0dc":"data.describe()","7826571c":"data_ma=data.rolling(window=12).mean()","3ac8c8db":"data.plot(figsize=(20, 4))","c604a0bd":"fig = plt.subplots(figsize=(20, 4))\nax = sns.boxplot(x=data['Value'],whis=1.5)","df487392":"plt.figure(figsize=(20,4))\nsns.distplot(data['Value'])\nplt.show()","ceafbe85":"fig = data.Value.hist(figsize = (20,4))","dbefa1f4":"data_ma=data.rolling(window=12).mean()","d8fc8ec4":"data_ma.plot(figsize=(20, 4))","49eeb01d":"data.head()","db0fdc5a":"ndata=data.shift(1)\nndata.head()\n","b6f9e3be":"data_base=pd.concat([data,ndata],axis=1)\ndata_base [:10]","46ca4ffb":"data_base.columns=['Actual_Value','Forcaste_Value']","c3d7e63c":"data_base.head()","352581ee":"data_base.iloc[:,:2]","0db46309":"data_base.dropna(inplace=True)\ndata_base.head()","cd5f3370":"plot_acf(data)","33c3c5ef":"plot_pacf(data)","1361cf59":"from statsmodels.tsa.arima_model import ARIMA","d5feb69a":"data_train=data [1:298]\ndata_test = data[298:397]","b23c8c6d":"data_model=ARIMA(data_train,order=(2,0,3))","ddd90243":"data_model_fit = data_model.fit()","792cc32e":"data_model_fit.aic","bcd48829":"data_forecaste=data_model_fit.forecast(steps=99)[0]\ndata_forecaste [:10]","e44d18e5":"np.sqrt(mean_squared_error(data_test,data_forecaste))\n","c11f04a4":"MAEValue = mean_absolute_error(data_base.Actual_Value ,data_base.Forcaste_Value)\nMAEValue","ea1997a0":"p_values=range(0,5)\nd_values=range(0,3)\nq_values=range(0,5)","b858c5e4":"import warnings\nwarnings.filterwarnings(\"ignore\")","ec8b91db":"for p in p_values:\n    for d in d_values:\n        for q in q_values:\n            order=(p,d,q)\n            train,test=data [1:298],data [298:397]\n            predictions=list()\n            for i in range(len(test)):\n                try:\n                    model=ARIMA(train,order)\n                    model_fit=model.fit(disp=0)\n                    y_pred=model_fit.forecast()[0]\n                    predictions.append(y_pred)\n                    error=mean_squared_error(test,predictions)\n                    print(\"ARIMA%s RMSE =%.2f\"%(order,error))\n                except:   \n                    continue\n                    ","d19715f9":"To choose the best parameters (p,d,q),we use for loop to find the best one","3cbe6d05":"\nChoose initial parameters(p,d,q) randomly","d773b98d":"We have 397 row,we will split them into train and test ,by ratio 75% fot train set and 25% for test set"}}