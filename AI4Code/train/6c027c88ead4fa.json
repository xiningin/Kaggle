{"cell_type":{"da5c885b":"code","ed2281f4":"code","b403c89c":"code","d75375a7":"code","bf572ab8":"code","49d81102":"code","f44a769b":"code","58082fb9":"code","c45f1dc5":"code","28813713":"code","881a9a83":"code","8dd0d6e7":"code","a8fd615b":"code","6c21f27f":"markdown"},"source":{"da5c885b":"import pandas as pd\nimport numpy as np\nimport os\nimport cv2\nfrom PIL import Image, ImageDraw\nfrom ast import literal_eval\nimport matplotlib.pyplot as plt\nimport urllib\nfrom tqdm.notebook import tqdm","ed2281f4":"%cd \/kaggle\/input\/kerasretinanet\n!pip install keras-resnet-0.1.0\/keras-resnet-0.1.0\/\n!pip install python_utils-2.4.0-py2.py3-none-any.whl\n!pip install progressbar2-3.51.3-py2.py3-none-any.whl","b403c89c":"!ls \/kaggle\/input\/kerasretinanet\/keras-retinanet-master\n!cp -r \/kaggle\/input\/kerasretinanet\/keras-retinanet-master \/kaggle\/working\/retinanet\n%cd \/kaggle\/working\/retinanet\/keras-retinanet-master\n\n!pip install .\n!python setup.py build_ext --inplace","d75375a7":"import tensorflow as tf\nfrom keras_retinanet import models\nfrom keras_retinanet.utils.image import read_image_bgr, preprocess_image, resize_image\nfrom keras_retinanet.utils.visualization import draw_box, draw_caption\nfrom keras_retinanet.utils.colors import label_color","bf572ab8":"model_path = '\/kaggle\/input\/kerasretinawheatcheckpoint5\/resnet50_wheat_05.h5'\n\nmodel = models.load_model(model_path, backbone_name='resnet50')\nmodel = models.convert_model(model)","49d81102":"root = \"\/kaggle\/input\/global-wheat-detection\/\"\ntest_img = root + \"test\"\nsample_submission = root + \"sample_submission.csv\"","f44a769b":"def predict(image):\n    image = preprocess_image(image.copy())\n    image, scale = resize_image(image)\n\n    boxes, scores, labels = model.predict_on_batch(\n    np.expand_dims(image, axis=0)\n  )\n\n    boxes \/= scale\n\n    return boxes, scores, labels","58082fb9":"THRES_SCORE = 0.5\n\ndef draw_detections(image, boxes, scores, labels):\n    for box, score, label in zip(boxes[0], scores[0], labels[0]):\n        if score < THRES_SCORE:\n            break\n\n        color = label_color(label)\n\n        b = box.astype(int)\n        draw_box(image, b, color=color)\n\n        caption = \"{:.3f}\".format(score)\n        draw_caption(image, b, caption)","c45f1dc5":"def show_detected_objects(image_name, boxes, scores, labels):\n    img_path = test_img+'\/'+image_name\n  \n    image = read_image_bgr(img_path)\n    draw = image.copy()\n    draw = cv2.cvtColor(draw, cv2.COLOR_BGR2RGB)\n\n    draw_detections(draw, boxes, scores, labels)\n    plt.figure(figsize=(15,10))\n    plt.axis('off')\n    plt.imshow(draw)\n    plt.show()","28813713":"samsub=pd.read_csv(\"\/kaggle\/input\/global-wheat-detection\/sample_submission.csv\")\nimgs = samsub['image_id'].values","881a9a83":"pred_string=[]\nfor img in imgs:\n    preds=''\n    img_name=img+'.jpg'\n    img_path = test_img+'\/'+img_name\n    image = read_image_bgr(img_path)\n    boxes, scores, labels = predict(image)\n    show_detected_objects(img_name, boxes, scores, labels)\n    boxes=boxes[0]\n    scores=scores[0]\n    for idx in range(boxes.shape[0]):\n        if scores[idx]>THRES_SCORE:\n            box,score=boxes[idx],scores[idx]\n            preds+=\"{:0.2f} {} {} {} {} \".format(\n                score, int(box[0]), int(box[1]), int(box[2]-box[0]) + 5, int(box[3]-box[1]) + 5)\n    pred_string.append(preds)\n","8dd0d6e7":"sub={\"image_id\":imgs, \"PredictionString\":pred_string}\nsub=pd.DataFrame(sub)\nsub.head()","a8fd615b":"sub.to_csv('\/kaggle\/working\/submission.csv',index=False)","6c21f27f":"## Prediction"}}