{"cell_type":{"c4645346":"code","47355522":"code","33f1fe0a":"code","6e26a999":"code","c0a015db":"code","b7011eb3":"code","b11cfc94":"code","8e5b304d":"code","3b61942a":"code","7d931d0c":"code","0bea7236":"code","57fbde71":"code","2fe5836a":"code","4a53563d":"code","321ff476":"code","0ab8e76d":"code","a8ead468":"code","16976143":"code","5ec6a394":"markdown","3008c5e6":"markdown","62b85117":"markdown","987feda2":"markdown","5d9451fd":"markdown","240c6462":"markdown","1bfbc0e8":"markdown","d089ca4b":"markdown","219837aa":"markdown","7059158c":"markdown","570dd713":"markdown","26d6bda3":"markdown","b1560f6a":"markdown","b2137d7c":"markdown","c5e69d10":"markdown","fcfa1a6d":"markdown","2419d22f":"markdown","3f9c07c4":"markdown"},"source":{"c4645346":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","47355522":"import pandas as pd\nimport numpy as np\nimport math\nimport scipy\nfrom sklearn.linear_model import LinearRegression\n","33f1fe0a":"price=pd.read_csv('\/kaggle\/input\/real-estate-price-prediction\/Real estate.csv')\nprice.head()","6e26a999":"price.drop('No',axis=1,inplace=True)\nprice.head()","c0a015db":"col_names=price.columns\ncol_names=col_names.str.replace(\" \",\"_\")\nprice.columns=col_names\n\n\nprice.columns\n## column names got changed to the names we wanted","b7011eb3":"price.isnull().sum()\n\n## no null values in the data\n## thats a good sign\n## will make the code writing somewhat easier","b11cfc94":"price.describe()\n\n## in column starting with names X3 and X4\n## the mean value of the column and its maximum value are having a huge difference between them\n## so it means some outliers are there \n## lets deal with those outliers are the last\n## hopefully it will boost our algorithms accuracy","8e5b304d":"price.info()\n\n## all columns have data type of int or float type","3b61942a":"## lets visualize all the numeric columns\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(6,10))\nsns.pairplot(price)\nplt.show()","7d931d0c":"import matplotlib.pyplot as plt\nimport seaborn as sns\ncorr=price.corr()\nplt.figure(figsize=(10,6))\nsns.heatmap(corr,annot=True)\n","0bea7236":"## Lets say the boundary line for alpha will be 0.05\n\n## if p-value > alpha :  so that coumn is not contributing to the model\n\n\nfrom statsmodels.formula.api import ols\n\nmodel=ols(formula = 'Y_house_price_of_unit_area ~X1_transaction_date',data=price).fit()\nmodel.summary()\n","57fbde71":"price.drop('X1_transaction_date',axis=1,inplace=True)\n\nprice['X5_latitude']=price['X5_latitude'] * price['X6_longitude']\n\nprice.drop(['X6_longitude'],axis=1,inplace=True)\n\n\n\n## lets see now how the corelation heatmap looks like\n\n\ncorr=price.corr()\nplt.figure(figsize=(10,6))\nsns.heatmap(corr,annot=True)\n","2fe5836a":"from sklearn.model_selection import train_test_split\n\nx = price.iloc[:,:-1]\ny = price.iloc[:,-1]\n\nxtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=42)\n\n","4a53563d":"linear_reg=LinearRegression()\nmodel=linear_reg.fit(xtrain,ytrain)\ny_predict=model.predict(xtest)\n","321ff476":"## lets check the mean square error \n\nfrom sklearn.metrics import mean_squared_error\n\nmean_squared_error(ytest,y_predict)\n\n## low value of mean squared error\n## thats a good sign","0ab8e76d":"from sklearn.metrics import r2_score\n\nr2_score(ytest,y_predict,)\n\n## 67 % accuracy ","a8ead468":"df = pd.DataFrame({'Actual':ytest,'Predictions':y_predict})\ndf['Predictions']= round(df['Predictions'])\ndf.tail()","16976143":"sns.regplot('Actual','Predictions',data=df)\n\n## relatively good graph\n## less deviation from main data line","5ec6a394":"#  lets see are there any null values in the dataset ?","3008c5e6":"#  Data Visualization","62b85117":"## column with name starting with X6 is not contributing the model\nmodel=ols(formula = 'Y_house_price_of_unit_area ~X2_house_age+X3_distance_to_the_nearest_MRT_station+X4_number_of_convenience_stores+X5_latitude',data=price).fit()\nmodel.summary()","987feda2":"# **Column names are not written in proper way.\n# There are spaces in between the column name.\n# So lets fill the spaces by underscore(_) for smooth operation*********","5d9451fd":"#  Data splitting into training and testing model","240c6462":"# **Lets import the libraries**","1bfbc0e8":"# ** clearly No column will not be at all useful, as it is just showing the index number, \n# so drop the No column**","d089ca4b":"# since accuracy score doesnt go hand in hand with linear regression\n#  so we will use r2_score function","219837aa":"***Since P>|t| for the first column X1 is greater than alpha=0.05.\nSo lets discard that column.\nSince it will not be contributing to the model***","7059158c":"**Lets try some feature engineering ideas here.\nLets multiply longitude and latitude column\n\n****\nyou can try addition or any other operation which will boost the accuracy.\n\n**\nAs of now, lets go with multiplication idea.****","570dd713":"# **> Lets see the co-relation between the columns and the target column -> Price of house**","26d6bda3":"**Lets see the data type of each column\nif any data-type is of object(categorical) type, we need to change it to numerical type.**","b1560f6a":"**Lets go on adding the other column to see their contribution in the model**","b2137d7c":"# Data modelling and evaluation","c5e69d10":"# ## lets see the actual plot between ytest and y_predicted values","fcfa1a6d":"# **So lets use the traditional way to see which column will contribute towards the linear regression model and which are not contributing, we will discard that column**","2419d22f":"**so lets do the following to the dataset :\n\nX1_transaction_date -> column\n\n**replace latitude column** as -> X5_latitude * X6_longitude\n\nX5_latitude and X6_longitude -> column*******","3f9c07c4":"# Ther's so much relation between the columns starting their name with X4, X5, X6 and also with the target column -> price of house column.\n"}}