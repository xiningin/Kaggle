{"cell_type":{"064ac7ea":"code","ba9a44ec":"code","6d234f00":"code","97821319":"code","4a05fd4a":"code","22fb2c27":"code","9ccf7cd6":"markdown","28e20dc0":"markdown","f7c7d8dd":"markdown","f2771d63":"markdown"},"source":{"064ac7ea":"# importing the libraries.\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom math import sqrt\nimport itertools\n\nimport warnings\nwarnings.filterwarnings('ignore')","ba9a44ec":"!pip install pmdarima","6d234f00":"# common function\ndef evaluate_arima_model(train, test, order, maxlags=8, ic='aic'):\n    # prepare training dataset\n    history = [x for x in train]\n    # make predictions\n    predictions = list()\n    # rolling forecasts\n    for t in range(len(test)):\n        # predict\n        model = ARIMA(history, order=order)\n        model_fit = model.fit(maxlags=maxlags, ic=ic, disp=0)\n        yhat = model_fit.forecast()[0]\n        # invert transformed prediction\n        predictions.append(yhat)\n        # observation\n        history.append(test[t])\n    # calculate mse\n    mse = mean_squared_error(test, predictions)\n    return predictions, mse\n\ndef evaluate_arima_models(train, test, p_values, d_values, q_values):\n    best_score, best_cfg = float(\"inf\"), None\n    pdq = list(itertools.product(p_values, d_values, q_values))\n    for order in pdq:\n        try:\n            predictions, mse = evaluate_arima_model(train, test, order)\n            if mse < best_score:\n                best_score, best_cfg = mse, order\n            print('Model(%s) mse=%.3f' % (order,mse))\n        except:\n            continue\n    print('Best Model(%s) mse=%.3f' % (best_cfg, best_score)) \n    return best_cfg\n\ndef get_data_from_EIA_local():\n    df = pd.read_csv(\"..\/input\/cushing-ok-wti-spot-price-fob\/Cushing_OK_WTI_Spot_Price_FOB_20200626.csv\", header=4, parse_dates = [0])\n    df.columns=[\"Date\", \"Price\"]\n    df.set_index('Date', inplace=True)\n    df.sort_index(inplace=True)\n    return df","97821319":"# prepare dataset\ndf_org=get_data_from_EIA_local()\ndata=df_org['2019-01-01':].copy()\ndata.Price[\"2020-04-20\"]=(data.Price[\"2020-04-17\"] + data.Price[\"2020-04-21\"]) \/ 2\nsplit = int(0.80*len(data))\ntrain_data, test_data = data[0:split], data[split:]","4a05fd4a":"# evaluate by auto_arima\nimport pmdarima\nimport time\n\nstart = time.time()\nbest_model = pmdarima.auto_arima(train_data['Price'],                                    \n                                 seasonal=False, stationary=False, \n                                 m=7, information_criterion='aic', \n                                 max_order=20,                                     \n                                 max_p=10, max_d=2, max_q=10,                                     \n                                 max_P=10, max_D=2, max_Q=10,                                   \n                                 error_action='ignore')\nprint(\"best model --> (p, d, q):\", best_model.order)\nelapsed_time = time.time() - start\nprint (\"elapsed_time:{0}\".format(elapsed_time) + \"[sec]\")","22fb2c27":"# evaluate parameters\np_values = range(1, 10)\nd_values = range(1, 2)\nq_values = range(1, 10)\nstart = time.time()\nevaluate_arima_models(train_data['Price'], test_data['Price'], p_values, d_values, q_values)\nelapsed_time = time.time() - start\nprint (\"elapsed_time:{0}\".format(elapsed_time) + \"[sec]\")","9ccf7cd6":"# Calculating by auto_arima() method\nauto_arima() calculates the best parameter of ARIMA model automatically.","28e20dc0":"Thank you for reading!","f7c7d8dd":"# Calculating by Traditional method","f2771d63":"# Get the best parameter for ARIMA\nThis notebook gives us the usage of auto_arima() to get the best ARIMA model.<br>\nThe hard part of modeling Arima is to find the right parameters combination.<br>\nLuckily there is a package that does that job for us: pmdarima.<br>"}}