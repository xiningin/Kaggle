{"cell_type":{"f17ff0b8":"code","08ec73d2":"code","0eea1a57":"code","51dcf029":"code","63bb8949":"code","545c25d3":"code","a85fcbb0":"code","65c2365a":"code","917eb581":"code","574e4b1c":"code","cf46cecc":"code","40e14fad":"code","7b01ff3b":"code","d3d0a94a":"code","9ea92dee":"code","6749d418":"code","79c3f6b2":"code","a1c17696":"code","197b0134":"code","4ef9cc8a":"code","2ff253a5":"code","6779e8b9":"code","665fc8dc":"code","a7d59531":"code","5e12db9f":"code","64b87a22":"code","5c7aaca6":"code","cb7e3383":"code","1b401637":"code","a69b2fb8":"code","be16c7a2":"code","620c886e":"code","232fddae":"code","8b680b52":"code","637048b1":"code","918a4ec1":"code","ffda5201":"code","baa42603":"code","f2d36e23":"code","3a803c77":"code","edc55483":"code","1be74dcf":"code","5eb2aed3":"code","7579d114":"code","58c41d7a":"code","09ee4bd5":"code","3d33c5b3":"code","e6dee16c":"code","6edd0fcd":"code","cb401d15":"code","951c26e9":"markdown","cad1db58":"markdown","944aeeab":"markdown","bc613780":"markdown","c75571cb":"markdown","33b534f1":"markdown","754ccd68":"markdown","e05c66bc":"markdown","84488117":"markdown","b20d7b3d":"markdown","4db0aff6":"markdown","15dcfddd":"markdown","ff77888c":"markdown","ac8a0556":"markdown","4a7af073":"markdown","d6c3e5d7":"markdown","25c2eca7":"markdown","89d05d05":"markdown","84819a8c":"markdown","5b841849":"markdown","b735f919":"markdown","830dc22c":"markdown","c4be810e":"markdown","3fda08b2":"markdown","d76b85b2":"markdown","5c0d864a":"markdown","d516ae25":"markdown","8c29394b":"markdown","7491be8a":"markdown","14e3c31d":"markdown","028d2421":"markdown"},"source":{"f17ff0b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble.gradient_boosting import GradientBoostingClassifier\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nimport glob\nimport os\nimport sys\nfrom IPython.core.display import HTML\n\nHTML(\"\"\"\n<style>\n.output_png {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n<\/style>\n\"\"\");\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\npd.options.display.max_columns = 100\nrandom_state=42","08ec73d2":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0eea1a57":"train_df=pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df=pd.read_csv('..\/input\/titanic\/test.csv')\ngender_df=pd.read_csv('..\/input\/titanic\/gender_submission.csv')","51dcf029":"os.chdir('\/kaggle\/working\/')","63bb8949":"for i in train_df.columns:\n    print(f\"column name - {i} and their type is {type(train_df[i][0])}\")","545c25d3":"# check sample dataset what it looks like.\ntrain_df.head(2)","a85fcbb0":"train_df.tail(2)","65c2365a":"# Info of all the Features of Dataset -their Types, Count, Null r Not Null.\ntrain_df.info()","917eb581":"train_df.describe(include=['O'])","574e4b1c":"train_df.describe(exclude=['O'])","cf46cecc":"train_df[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived',ascending=False)","40e14fad":"train_df[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived',ascending=False)","7b01ff3b":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","d3d0a94a":"train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","9ea92dee":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=30)","6749d418":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', bins=30)\ngrid.add_legend();","79c3f6b2":"grid = sns.FacetGrid(train_df, row='Embarked', size=2.2, aspect=1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()","a1c17696":"grid = sns.FacetGrid(train_df, row='Embarked', col='Survived', size=2.2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare', ci=None)\ngrid.add_legend()","197b0134":"grid = sns.FacetGrid(train_df, row='Pclass', col='Sex', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', bins=20)\ngrid.add_legend()","4ef9cc8a":"# train_df['Age']=train_df['Age'].fillna(train_df['Age'].median())\n# train_df['Died']=1-train_df['Survived']","2ff253a5":"train_df.corr()","6779e8b9":"complete_df=pd.concat([train_df,test_df])\n\nassert complete_df.shape[0]==train_df.shape[0]+test_df.shape[0]\n\ncomplete_df.dtypes","665fc8dc":"complete_df.drop(['Survived'],1,inplace=True)\n\ncomplete_df.reset_index(inplace=True)\n\ncomplete_df.drop(['index','PassengerId'],1,inplace=True)\n\ncomplete_df.shape","a7d59531":"Title_Dictionary = {\n    \"Capt\": \"Officer\",\n    \"Col\": \"Officer\",\n    \"Major\": \"Officer\",\n    \"Jonkheer\": \"Royalty\",\n    \"Don\": \"Royalty\",\n    \"Sir\" : \"Royalty\",\n    \"Dr\": \"Officer\",\n    \"Rev\": \"Officer\",\n    \"the Countess\":\"Royalty\",\n    \"Mme\": \"Mrs\",\n    \"Mlle\": \"Miss\",\n    \"Ms\": \"Mrs\",\n    \"Mr\" : \"Mr\",\n    \"Mrs\" : \"Mrs\",\n    \"Miss\" : \"Miss\",\n    \"Master\" : \"Master\",\n    \"Lady\" : \"Royalty\"\n}","5e12db9f":"complete_df['Title'] = complete_df['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())\n\ncomplete_df['Title']=complete_df.Title.map(Title_Dictionary)\n\ncomplete_df","64b87a22":"print(complete_df.iloc[:891].Age.isnull().sum(),complete_df.iloc[891:].Age.isnull().sum())\n\nmedian_group_age=complete_df.iloc[:891].groupby(['Sex','Pclass','Title']).median().reset_index()[['Sex', 'Pclass', 'Title', 'Age']]\n\nmedian_group_age.head(5)","5c7aaca6":"def fill_age(row):\n    return median_group_age[(median_group_age['Sex']==row['Sex']) & \n                            (median_group_age['Title']==row['Title']) & \n                            (median_group_age['Pclass']==row['Pclass'])]['Age'].values[0]","cb7e3383":"complete_df['Age'] = complete_df.apply(lambda row: fill_age(row) if np.isnan(row['Age']) else row['Age'], axis=1)\n\nprint(complete_df['Age'].isnull().sum())\n\n# complete_df","1b401637":"complete_df.drop('Name',axis=1,inplace=True)\ntitle_dummies=pd.get_dummies(complete_df['Title'],prefix='Title')\ncomplete_df = pd.concat([complete_df, title_dummies], axis=1)\ncomplete_df.drop(['Title'],axis=1,inplace=True)\ncomplete_df.shape","a69b2fb8":"complete_df.Fare.fillna(complete_df.iloc[:891].Fare.mean(), inplace=True)\ncomplete_df.Embarked.fillna('S', inplace=True)\nembarked_dummies = pd.get_dummies(complete_df['Embarked'], prefix='Embarked')\ncomplete_df=pd.concat([complete_df,embarked_dummies],axis=1)\ncomplete_df.drop(['Embarked'],axis=1,inplace=True)","be16c7a2":"train_cabin, test_cabin = set(), set()\nfor c in complete_df.iloc[:891]['Cabin']:\n    try:\n        train_cabin.add(c[0])\n    except:\n        train_cabin.add('U')\nfor c in complete_df.iloc[891:]['Cabin']:\n    try:\n        test_cabin.add(c[0])\n    except:\n        test_cabin.add('U')\n# print(train_cabin)\n# print(test_cabin)\n# print(complete_df['Cabin'].value_counts())\ncomplete_df.Cabin.fillna('U', inplace=True)\ncomplete_df['Cabin'] = complete_df['Cabin'].map(lambda c: c[0])\ncomplete_df['Cabin'].value_counts()","620c886e":"cabin_dummies = pd.get_dummies(complete_df['Cabin'], prefix='Cabin') \ncomplete_df=pd.concat([complete_df,cabin_dummies],axis=1)\ncomplete_df.drop('Cabin', axis=1, inplace=True)\ncomplete_df['Sex']=complete_df.Sex.map({'male':1,'female':0})\npclass_dummies = pd.get_dummies(complete_df['Pclass'], prefix=\"Pclass\")\ncomplete_df=pd.concat([complete_df,pclass_dummies],axis=1)\ncomplete_df.drop('Pclass',axis=1,inplace=True)","232fddae":"def cleanTicket(ticket):\n    ticket=str(ticket)\n    ticket = ticket.replace('.', '')\n    ticket = ticket.replace('\/', '')\n    ticket = ticket.split()\n    ticket = map(lambda t : t.strip(), ticket)\n    ticket = list(filter(lambda t : not t.isdigit(), ticket))\n    if len(ticket) > 0:\n        return ticket[0]\n    else: \n        return 'XXX'","8b680b52":"complete_df['Ticket'] = complete_df['Ticket'].map(cleanTicket)\ntickets_dummies = pd.get_dummies(complete_df['Ticket'], prefix='Ticket')\ncomplete_df = pd.concat([complete_df, tickets_dummies], axis=1)\ncomplete_df.drop('Ticket', inplace=True, axis=1)","637048b1":"complete_df","918a4ec1":"complete_df['FamilySize'] = complete_df['Parch'] + complete_df['SibSp'] + 1\ncomplete_df['Singleton'] = complete_df['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ncomplete_df['SmallFamily'] = complete_df['FamilySize'].map(lambda s: 1 if 2 <= s <= 4 else 0)\ncomplete_df['LargeFamily'] = complete_df['FamilySize'].map(lambda s: 1 if 5 <= s else 0)\n# complete_df.drop(columns=['Died'],axis=1,inplace=True)\ncomplete_df.shape\n\ncomplete_df.to_csv('\/kaggle\/working\/complete_titanic_data_20200525.csv')","ffda5201":"complete_df.head(10)","baa42603":"def compute_score(clf, X, y, scoring='accuracy'):\n    xval = cross_val_score(clf, X, y, cv = 5, scoring=scoring)\n    return np.mean(xval)\n\ny_train=train_df['Survived']\nX_train=complete_df.iloc[:891]\nX_test=complete_df.iloc[891:]\n\nplt.figure(figsize=(30,30))\nsns.heatmap(X_train.corr(), cmap= 'coolwarm')\nplt.show()\n\nclf = RandomForestClassifier(n_estimators=500, max_features='sqrt')\nclf = clf.fit(X_train, y_train)\n\nfeatures = pd.DataFrame()\nfeatures['feature'] = X_train.columns\nfeatures['importance'] = clf.feature_importances_\nfeatures.sort_values(by=['importance'], ascending=True, inplace=True)\nfeatures.set_index('feature', inplace=True)\n\nfeatures.plot(kind='barh', figsize=(25, 25))","f2d36e23":"y_train=train_df['Survived']\nX_train=complete_df.iloc[:891]\nX_test=complete_df.iloc[891:]","3a803c77":"plt.figure(figsize=(30,30))\nsns.heatmap(X_train.corr(), cmap= 'coolwarm')\nplt.show()","edc55483":"clf = RandomForestClassifier(n_estimators=500, max_features='sqrt')\nclf = clf.fit(X_train, y_train)","1be74dcf":"features = pd.DataFrame()\nfeatures['feature'] = X_train.columns\nfeatures['importance'] = clf.feature_importances_\nfeatures.sort_values(by=['importance'], ascending=True, inplace=True)\nfeatures.set_index('feature', inplace=True)\n\nfeatures.plot(kind='barh', figsize=(25, 25))","5eb2aed3":"features.sort_values(by=['importance'], ascending=False, inplace=True)\n\nfeatures","7579d114":"model = SelectFromModel(clf, prefit=True)\ntrain_reduced = model.transform(X_train)\nprint(train_reduced.shape)\n# (891L, 14L)\ntest_reduced = model.transform(X_test)\nprint(test_reduced.shape)","58c41d7a":"logreg = LogisticRegression()\nrf = RandomForestClassifier()\ngboost = GradientBoostingClassifier()\ndt=DecisionTreeClassifier()\nxgb=XGBClassifier()\nmodels = [logreg,rf, gboost,dt,xgb]\n\nfor model in models:\n    print('Cross-validation of : {0}'.format(model.__class__))\n    score = compute_score(clf=model, X=train_reduced, y=y_train, scoring='accuracy')\n    print('CV score = {0}'.format(score))\n    print('****')","09ee4bd5":"from sklearn.model_selection import RandomizedSearchCV\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 50, stop = 100, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 100, num = 10)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nprint(random_grid)","3d33c5b3":"rf = RandomForestClassifier()\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 50, cv = 5, \n                               verbose=2, random_state=42, n_jobs = -1)\nrf_random.fit(train_reduced, y_train)","e6dee16c":"\"\"\"{'n_estimators': 2000,\n 'min_samples_split': 2,\n 'min_samples_leaf': 2,\n 'max_features': 'auto',\n 'max_depth': 90,\n 'bootstrap': True}\"\"\"\nrf_random.best_params_","6edd0fcd":"parameters = {'bootstrap': True, 'min_samples_leaf': 3, 'n_estimators': 50, \n                  'min_samples_split': 10, 'max_features': 'sqrt', 'max_depth': 90}\n# paraeters ={'n_estimators': 2000,\n#  'min_samples_split': 2,\n#  'min_samples_leaf': 2,\n#  'max_features': 'auto',\n#  'max_depth': 90,\n#  'bootstrap': True}\nmodel = RandomForestClassifier(**parameters)\nmodel = model.fit(train_reduced,y_train)\noutput = model.predict(test_reduced).astype(int)","cb401d15":"df_output = pd.DataFrame()\naux=pd.read_csv(\"..\/input\/titanic\/test.csv\")\ndf_output['PassengerId'] = aux['PassengerId']\ndf_output['Survived'] = output\ndf_output[['PassengerId','Survived']].to_csv('\/kaggle\/working\/RandomFor_pred.csv', index=False)","951c26e9":"# Data Available for the Project","cad1db58":"### Description of all the Columns is available in Titanic Problem Overview Kaggle.","944aeeab":"**It shows that - we have no such correlation between families and survival. We can guess that higher the family memeber lower is the chance of survival.**","bc613780":"# Modelling","c75571cb":"Higher fare paying passengers had better survival rate. and Embarked ports also shows correlation.","33b534f1":"<p>It shows we have 5 Integer type features, 4 string features, 3 float type faetures.<\/p>","754ccd68":"> Change your current directory to current working directory - \/kaggle\/working\/","e05c66bc":"### Looking for duplicacy in Non integer datasets.","84488117":"Embarked =C , where males has higher survival rate than females.Males survivl rate has higher than females in Port C & Q.","b20d7b3d":"> Let's see the relaitonship between Age and Survival\/Deaths.","4db0aff6":"# **Exploratory Data Analysis (Understand relationship in the dataset)**","15dcfddd":"It's so far clear that, Females has survived more than Males. And, it matches with the fact that - women were allowed to get off the ship earlier than other genders.","ff77888c":"> Let's see if we have a relationship between Passenger Class and The people Survived.","ac8a0556":"## Understanding-  What are the columns and datatypes you have for Titanic dataset?","4a7af073":"<h1 align=\"center\"> Titanic Problem Notebook <\/h1>","d6c3e5d7":"> Reference used- https:\/\/www.ahmedbesbes.com\/blog\/kaggle-titanic-competition","25c2eca7":"# > Disclaimer: \n1. This is my first Kaggle notebook. Please comment your valuable thoughts.\n2. I gave references at the bottom of notebook from where i understood lot of concepts and applied same in this notebook to improve it further.","89d05d05":"## Feature Selection from Sklearn Select From model module of Sklearn","84819a8c":"<img src =\"https:\/\/miro.medium.com\/max\/4376\/1*AUnW4zEpbfnqH1-1KmSpNw.png\">","5b841849":"<img src =\"https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/3136\/logos\/front_page.png\">","b735f919":"> Let's see if we have a relationship between Gender and Survival.","830dc22c":"# **Feature Engineering**","c4be810e":"> Let's see if we have a relationship between Families and Survival.","3fda08b2":"We can use Pclass and Sex for filling missing Age records.","d76b85b2":"# Libraries Imported","5c0d864a":"Pclass 1 has most survivors, Pclass 3 has least survivors in the age 15-35.","d516ae25":"# Load Data","8c29394b":"It is visible to us that the oldest person has survived and the infants also are survived mostly. But the age between 20 to 45, has high death rate.","7491be8a":"And yes, we do have a relationship. Which shows 1st class are more likely to survive. May be they are rich and upper class of society and hence they are authorized to get off the ship faster than other people. ","14e3c31d":"### Looking for duplicacy in integer datasets.","028d2421":"<p> It shows we are short in age,Cabin and Embarked with the order as Cabin > Age > Embarked <\/p>"}}