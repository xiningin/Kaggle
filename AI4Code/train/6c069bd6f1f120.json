{"cell_type":{"010749dc":"code","8d3ba4e9":"code","8c78f4d6":"code","c3a6d0f6":"code","3900bdf8":"code","f457c36e":"code","0262cc6a":"code","0408bc4a":"code","67202de9":"code","c2030d6f":"code","8fa064fc":"code","85c9e8e0":"code","ad57761e":"code","d9570357":"code","f692f6b1":"code","67fa8696":"code","2117cde9":"code","ea50b88b":"code","de2c6ebc":"code","d39bf4fc":"code","7c1cc8da":"code","d51942bb":"code","fc59a989":"code","894cd5a8":"code","84f1c803":"code","542bf23d":"code","b88221ad":"code","dc86a847":"code","028dd537":"code","127c3fdf":"code","e7571743":"code","0865aec0":"code","29eb556b":"code","7e105d79":"code","bffc3ffc":"code","54171da3":"code","08bbb2e0":"code","57b43b9c":"code","25ef52d3":"code","74262ad7":"code","3a1b76fd":"code","cf84c447":"code","10502f6b":"code","3b4079e2":"code","c3e6bfc2":"code","f8e3ad79":"code","1fc712f2":"code","41e6e73b":"code","3cb17df5":"code","8392d316":"code","27f3c903":"code","0d57262d":"code","8ba3847f":"code","0d052b1f":"code","af1c9805":"code","a510a2bc":"code","62a7fdb0":"code","ba576a9f":"code","4427066c":"code","697d64a3":"code","6143a423":"code","15234e33":"code","98707691":"code","eac037a7":"code","245a7667":"code","44d7d26d":"markdown","8d058ba5":"markdown","a26ff453":"markdown","63ee0b2f":"markdown","1559b46b":"markdown","bc36c03b":"markdown","8c9ced61":"markdown","e1c688a0":"markdown","2b09d17f":"markdown","3cb3ff44":"markdown","6e6c1bf4":"markdown","e93c7299":"markdown","1c9ff2f6":"markdown","468bce53":"markdown","eefb3216":"markdown","6fd554a7":"markdown","f635b708":"markdown","9742c86c":"markdown","3fdf6de7":"markdown","8dccd962":"markdown","0ea4684e":"markdown","c9ab90f0":"markdown","e7245534":"markdown","e70455a4":"markdown","4fa5f928":"markdown","b397e093":"markdown","43355efa":"markdown"},"source":{"010749dc":"import numpy as np\nimport pandas as pd\nimport pycountry\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.offline as pyo\nimport os\nimport warnings\nimport sys\n\nwarnings.filterwarnings('ignore')\nplt.style.use('ggplot')\npyo.init_notebook_mode()\n%matplotlib inline","8d3ba4e9":"\"\"\" Load in the ISO-Alpha3 codes of every countries in the world (used for choropleth plotting purposes using Plotly)\"\"\"\ncountries = dict()\nfor country in pycountry.countries:\n    countries[country.name] = country.alpha_3","8c78f4d6":"def plot_map(df, **kwargs):\n    \"\"\"\n    Function to plot choropleth map\n    \n    Parameters:\n    -----------\n    df : pandas.DataFrame\n        Represents the dataframe with which you are dealing.\n        \n    Returns:\n    -------\n    fig : plotly.Figure\n        Represents the map\n    \"\"\"\n    \n    fig = px.choropleth(df, \n                        locations=kwargs.get('locations', None), \n                        color=kwargs.get('color', None),\n                       hover_name=kwargs.get('hover_name', None),\n                       color_continuous_scale=kwargs.get('ccs', None),\n                       scope=kwargs.get('scope', None),\n                       template=kwargs.get('template', 'plotly'),\n                       title=kwargs.get('title', None))\n    \n    fig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":20})\n    return fig","c3a6d0f6":"df_africa = pd.read_csv('..\/input\/covid19-dataset-world-and-continent-wise\/Covid Data - Africa.csv')\ndf_africa.head()","3900bdf8":"print(f'Number of records : {df_africa.shape[0]}')\nprint(f'Number of metrics : {df_africa.shape[1]}')","f457c36e":"pd.DataFrame(df_africa.isna().sum() \/ df_africa.isna().count() * 100, columns=['% missing']).sort_values(by=['% missing'], ascending=False)","0262cc6a":"df_africa['iso_alpha'] = df_africa['Country, Other'].apply(lambda x: countries.get(x, 'UNK'))","0408bc4a":"df_africa.query('iso_alpha == \"UNK\"')","67202de9":"df_africa['iso_alpha'].loc[df_africa['Country, Other'] == 'Ivory Coast'] = 'CIV'\ndf_africa['iso_alpha'].loc[df_africa['Country, Other'] == 'DRC'] = 'COD'\ndf_africa['iso_alpha'].loc[df_africa['Country, Other'] == 'CAR'] = 'CAF'\ndf_africa['iso_alpha'].loc[df_africa['Country, Other'] == 'Tanzania'] = 'TZA'\ndf_africa['iso_alpha'].loc[df_africa['Country, Other'] == 'Saint Helena'] = 'SHN'\n\n\ndf_africa['Country, Other'].loc[df_africa['Country, Other'] == 'DRC'] = 'Democratic Republic of Congo'\ndf_africa['Country, Other'].loc[df_africa['Country, Other'] == 'DRC'] = 'Central African Republic'\n\n\ndf_africa = df_africa.iloc[:-1]\ndf_africa['Total Cases'] = df_africa['Total Cases'].apply(lambda x: int(x.replace(',','')))","c2030d6f":"tc_africa = plot_map(df_africa, locations='iso_alpha', color='Total Cases', hover_name='Country, Other', scope='africa', ccs='amp', template='ggplot2', \n                     title='Total Cases in Africa')\ntc_africa.show()","8fa064fc":"df_africa['Active Cases'] = df_africa['Active Cases'].apply(lambda x: int(x.replace(',', '')))\nac_africa = plot_map(df_africa, locations='iso_alpha', color='Active Cases', hover_name='Country, Other', ccs='orrd', scope='africa', template='ggplot2',\n                    title='Active Cases in Africa')\nac_africa.show()","85c9e8e0":"\"\"\" Let's look at the correlation between Active Cases and Total Cases\"\"\"\nplt.figure(figsize=(12, 8))\nsns.heatmap(df_africa[['Active Cases', 'Total Cases']].corr(), vmin=-1, vmax=1, annot=True, linewidths=2.0).set_title('Cross-Correlation between Total Cases and Active Cases (Africa Data)')\nplt.show()","ad57761e":"df_africa['isTestsEmpty'] = df_africa['Total Tests'].apply(lambda x: 1 if pd.isna(x) else 0)\ndf_africa.query('isTestsEmpty == 1')","d9570357":"df_africa['Total Tests'] = df_africa['Total Tests'].apply(lambda x: int(x.replace(',','')) if not pd.isna(x) else x)","f692f6b1":"test_africa = plot_map(df_africa, locations='iso_alpha', color='Total Tests', hover_name='Country, Other', scope='africa', ccs='dense' ,template='ggplot2',\n                      title='Total Tests performed in Africa')\ntest_africa.show()","67fa8696":"df_africa['Total Deaths'] = df_africa['Total Deaths'].apply(lambda x: int(x.replace(',', '')) if not pd.isna(x) else x)","2117cde9":"deaths_africa = plot_map(df_africa, locations='iso_alpha', color='Total Deaths', hover_name='Country, Other', scope='africa', ccs='ylorbr', template='ggplot2',\n                        title='Total Deaths in Africa')\ndeaths_africa.show()","ea50b88b":"df_africa['Total Recovered'] = df_africa['Total Recovered'].apply(lambda x: int(x.replace(',', '')))","de2c6ebc":"total_recovery = plot_map(df_africa, locations='iso_alpha', color='Total Recovered', hover_name='Country, Other', scope='africa', ccs='ylgn', template='ggplot2',\n                         title='Total Recovery cases in Africa')\ntotal_recovery.show()","d39bf4fc":"df_asia = pd.read_csv('..\/input\/covid19-dataset-world-and-continent-wise\/Covid Data - Asia.csv')\ndf_asia.head()","7c1cc8da":"pd.DataFrame((df_asia.isna().sum() \/ df_asia.isna().count()) * 100, columns=['% missing']).sort_values(by='% missing', ascending=False)","d51942bb":"df_asia['iso_alpha'] = df_asia['Country, Other'].apply(lambda x: countries.get(x, 'UNK'))","fc59a989":"df_asia.query('iso_alpha == \"UNK\"')","894cd5a8":"df_asia['iso_alpha'].loc[df_asia['Country, Other'] == 'Iran'] = 'IRN'\ndf_asia['iso_alpha'].loc[df_asia['Country, Other'] == 'UAE'] = 'ARE'\ndf_asia['iso_alpha'].loc[df_asia['Country, Other'] == 'Vietnam'] = 'VNM'\ndf_asia['iso_alpha'].loc[df_asia['Country, Other'] == 'Palestine'] = 'PSE'\ndf_asia['iso_alpha'].loc[df_asia['Country, Other'] == 'S. Korea'] = 'KOR'\ndf_asia['iso_alpha'].loc[df_asia['Country, Other'] == 'Syria'] = 'SYR'\ndf_asia['iso_alpha'].loc[df_asia['Country, Other'] == 'Laos'] = 'LAO'\ndf_asia['iso_alpha'].loc[df_asia['Country, Other'] == 'Taiwan'] = 'TWN'\ndf_asia['iso_alpha'].loc[df_asia['Country, Other'] == 'Brunei'] = 'BRN'\n\ndf_asia['Country, Other'].loc[df_asia['Country, Other'] == 'UAE'] = 'United Arab Emirates'\ndf_asia['Country, Other'].loc[df_asia['Country, Other'] == 'S. Korea'] = 'South Korea'\n\n\ndf_asia = df_asia.iloc[:-1]","84f1c803":"df_asia['Total Cases'] = df_asia['Total Cases'].apply(lambda x: int(x.replace(',', '')))","542bf23d":"tc_asia = plot_map(df_asia, locations='iso_alpha', color='Total Cases', hover_name='Country, Other', scope='asia', ccs='amp', \n                   title='Total Cases in Asia', template='ggplot2')\ntc_asia.show()","b88221ad":"df_asia['Active Cases'] = df_asia['Active Cases'].apply(lambda x: int(x.replace(',', '')))","dc86a847":"ac_asia = plot_map(df_asia, locations='iso_alpha', color='Active Cases', hover_name='Country, Other', scope='asia', ccs='orrd', \n                   title='Active Cases in Asia', template='ggplot2')\nac_asia.show()","028dd537":"df_asia['isTestsEmpty'] = df_asia['Total Tests'].apply(lambda x: 1 if pd.isna(x) else 0)\ndf_asia.query('isTestsEmpty == 1')","127c3fdf":"df_asia['Total Tests'] = df_asia['Total Tests'].apply(lambda x: int(x.replace(',', '')) if not pd.isna(x) else x)","e7571743":"tests_asia = plot_map(df_asia, locations='iso_alpha', color='Total Tests', hover_name='Country, Other', scope='asia', ccs='dense', \n                   title='Total Tests in Asia', template='ggplot2')\ntests_asia.show()","0865aec0":"df_asia['isDeathsEmpty'] = df_asia['Total Deaths'].apply(lambda x: 1 if pd.isna(x) else 0)\ndf_asia.query('isDeathsEmpty == 1')","29eb556b":"df_asia['Total Deaths'] = df_asia['Total Deaths'].apply(lambda x: int(x.replace(\",\", '')) if not pd.isna(x) else x)","7e105d79":"deaths_asia = plot_map(df_asia, locations='iso_alpha', color='Total Deaths', hover_name='Country, Other', scope='asia', ccs='ylorbr', \n                   title='Total Deaths in Asia', template='ggplot2')\ndeaths_asia.show()\n\n","bffc3ffc":"df_asia['Total Recovered'] = df_asia['Total Recovered'].apply(lambda x: int(x.replace(',', '')))","54171da3":"recovery_asia = plot_map(df_asia, locations='iso_alpha', color='Total Recovered', hover_name='Country, Other', scope='asia', ccs='ylgn', \n                   title='Total Recovery Cases in Asia', template='ggplot2')\nrecovery_asia.show()","08bbb2e0":"df_europe = pd.read_csv('..\/input\/covid19-dataset-world-and-continent-wise\/Covid Data - Europe.csv')\ndf_europe.head()","57b43b9c":"pd.DataFrame((df_europe.isna().sum() \/ df_europe.isna().count()) * 100, columns=['% missing']).sort_values(by='% missing', ascending=False)","25ef52d3":"df_europe['iso_alpha'] = df_europe['Country, Other'].apply(lambda x: countries.get(x, 'UNK'))","74262ad7":"df_europe.query('iso_alpha == \"UNK\"')","3a1b76fd":"df_europe['iso_alpha'].loc[df_europe['Country, Other'] == 'UK'] = 'GBR'\ndf_europe['iso_alpha'].loc[df_europe['Country, Other'] == 'Russia'] = 'RUS'\ndf_europe['iso_alpha'].loc[df_europe['Country, Other'] == 'Moldova'] = 'MDA'\ndf_europe['iso_alpha'].loc[df_europe['Country, Other'] == 'Channel Islands'] = 'GB'\ndf_europe['iso_alpha'].loc[df_europe['Country, Other'] == 'Faeroe Islands'] = 'FRO'\ndf_europe['iso_alpha'].loc[df_europe['Country, Other'] == 'Vatican City'] = 'VAT'\n\ndf_europe = df_europe.iloc[:-1]\n","cf84c447":"df_europe['Total Cases'] = df_europe['Total Cases'].apply(lambda x: int(x.replace(',', '')))","10502f6b":"tc_europe = plot_map(df_europe, locations='iso_alpha', color='Total Cases', hover_name='Country, Other', scope='europe', ccs='amp', \n                   title='Total Cases in Europe', template='ggplot2')\ntc_europe.show()","3b4079e2":"df_europe['Active Cases'] = df_europe['Active Cases'].apply(lambda x: int(x.replace(',', '')))","c3e6bfc2":"ac_europe = plot_map(df_europe, locations='iso_alpha', color='Active Cases', hover_name='Country, Other', scope='europe', ccs='orrd', \n                   title='Active Cases in Europe', template='ggplot2')\nac_europe.show()","f8e3ad79":"df_europe['Total Tests'] = df_europe['Total Tests'].apply(lambda x: int(x.replace(',', '')) if not pd.isna(x) else x) ","1fc712f2":"tests_europe = plot_map(df_europe, locations='iso_alpha', color='Total Tests', hover_name='Country, Other', scope='europe', ccs='dense', \n                   title='Total Tests performed in Europe', template='ggplot2')\ntests_europe.show()","41e6e73b":"df_europe['Total Deaths'] = df_europe['Total Deaths'].apply(lambda x: int(x.replace(\",\", '')) if not pd.isna(x) else x)","3cb17df5":"deaths_europe = plot_map(df_europe, locations='iso_alpha', color='Total Deaths', hover_name='Country, Other', scope='europe', ccs='ylorbr', \n                   title='Total Deaths in Europe', template='ggplot2')\ndeaths_europe.show()","8392d316":"df_europe['Total Recovered'] = df_europe['Total Recovered'].apply(lambda x: int(x.replace(',', '')) if not pd.isna(x) else x)","27f3c903":"recovery_europe = plot_map(df_europe, locations='iso_alpha', color='Total Recovered', hover_name='Country, Other', scope='europe', ccs='ylgn', \n                   title='Total Recovery in Europe', template='ggplot2')\nrecovery_europe.show()","0d57262d":"df_na = pd.read_csv('..\/input\/covid19-dataset-world-and-continent-wise\/Covid Data - North America.csv')\ndf_na.head()","8ba3847f":"df_na['iso_alpha'] = df_na['Country, Other'].apply(lambda x: countries.get(x, 'UNK'))\ndf_na.query('iso_alpha == \"UNK\"')","0d052b1f":"df_na['iso_alpha'].loc[df_na['Country, Other'] == 'USA'] = \"USA\"\ndf_na['iso_alpha'].loc[df_na['Country, Other'] == 'Sint Maarten'] = \"SXM\"\ndf_na['iso_alpha'].loc[df_na['Country, Other'] == 'Saint Martin'] = \"MAF\"\ndf_na['iso_alpha'].loc[df_na['Country, Other'] == 'Turks and Caicos'] = \"TCA\"\ndf_na['iso_alpha'].loc[df_na['Country, Other'] == 'British Virgin Islands'] = \"VGB\"\ndf_na['iso_alpha'].loc[df_na['Country, Other'] == 'St. Vincent Grenadines'] = \"VCT\"\ndf_na['iso_alpha'].loc[df_na['Country, Other'] == 'Caribbean Netherlands'] = \"BES\"\ndf_na['iso_alpha'].loc[df_na['Country, Other'] == 'St. Barth'] = \"BLM\"\ndf_na['iso_alpha'].loc[df_na['Country, Other'] == 'Saint Pierre Miquelon'] = \"SPM\"\n\ndf_na = df_na.iloc[:-1]","af1c9805":"pd.DataFrame((df_na.isna().sum() \/ df_na.isna().count()) * 100, columns=['% missing']).sort_values(by=['% missing'], ascending=False)","a510a2bc":"df_na['Total Cases'] = df_na['Total Cases'].apply(lambda x: int(x.replace(',', '')) if not pd.isna(x) else x)","62a7fdb0":"tc_na = plot_map(df_na, locations='iso_alpha', color='Total Cases', hover_name='Country, Other', scope='north america', ccs='amp', \n                   title='Total Cases in North America', template='ggplot2')\ntc_na.show()","ba576a9f":"df_na['Active Cases'] = df_na['Active Cases'].apply(lambda x: int(x.replace(',', '')))","4427066c":"ac_na = plot_map(df_na, locations='iso_alpha', color='Active Cases', hover_name='Country, Other', scope='north america', ccs='orrd', \n                   title='Active Cases in North America', template='ggplot2')\nac_na.show()","697d64a3":"df_na['Total Tests'] = df_na['Total Tests'].apply(lambda x: int(x.replace(',', '')) if not pd.isna(x) else x)","6143a423":"tests_na = plot_map(df_na, locations='iso_alpha', color='Total Tests', hover_name='Country, Other', scope='north america', ccs='dense', \n                   title='Total Tests performed in North America', template='ggplot2')\ntests_na.show()","15234e33":"df_na['Total Deaths'] = df_na['Total Deaths'].apply(lambda x: int(x.replace(\",\", '')) if not pd.isna(x) else x)","98707691":"deaths_na = plot_map(df_na, locations='iso_alpha', color='Total Deaths', hover_name='Country, Other', scope='north america', ccs='ylorbr', \n                   title='Total Deaths in North America', template='ggplot2')\ndeaths_na.show()","eac037a7":"df_na['Total Recovered'] = df_na['Total Recovered'].apply(lambda x: int(x.replace(',', '')) if not pd.isna(x) else x)","245a7667":"recovery_na = plot_map(df_na, locations='iso_alpha', color='Total Recovered', hover_name='Country, Other', scope='north america', ccs='ylgn', \n                   title='Total Recovery in North America', template='ggplot2')\nrecovery_na.show()","44d7d26d":"## - Active Cases","8d058ba5":"## - Total Deaths","a26ff453":"## - Total Cases","63ee0b2f":"## - Total Recovery Cases","1559b46b":"## - Total Deaths","bc36c03b":"## - Total Recovery","8c9ced61":"## - Total Tests","e1c688a0":"## - Total Cases","2b09d17f":"# Europe Status","3cb3ff44":"## - Total Deaths","6e6c1bf4":"## - Total Tests","e93c7299":"## - Countries in Asia having no records of Total Test","1c9ff2f6":"# Asia Status","468bce53":"## - Total Cases","eefb3216":"## - Total Recovered Cases","6fd554a7":"## - Countries having no records of Total Deaths","f635b708":"# Africa Status","9742c86c":"# North America Status","3fdf6de7":"## - Countries having no records of Tests (in Africa)","8dccd962":"## - Active Cases","0ea4684e":"## - Total Cases","c9ab90f0":"## - Total Deaths","e7245534":"## -  Total Tests","e70455a4":"## - Total Recovered","4fa5f928":"## - Active Cases","b397e093":"## - Active Cases","43355efa":"## - Total Tests"}}