{"cell_type":{"97d4c073":"code","8ffbc1c7":"code","0a357db2":"code","40fd9a41":"code","1ca5e186":"code","aedb9e2e":"code","99eb65d8":"code","dc469681":"code","900f28df":"code","09068621":"code","5ff35f9c":"code","3796923e":"code","4fe89e4d":"code","274cdbf4":"code","8f006fdb":"code","72a166c9":"code","395f44da":"code","55577a5f":"code","db502eec":"code","7814af0a":"code","7cefcb61":"code","22485a62":"code","26b38842":"code","ff1888ee":"code","a50088b0":"code","c4a48269":"markdown","42012638":"markdown","77258f8e":"markdown","2baac27f":"markdown","3a0882bb":"markdown"},"source":{"97d4c073":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8ffbc1c7":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","0a357db2":"import tensorflow as tf\nprint(tf.__version__)","40fd9a41":"test= pd.read_csv(\"..\/input\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/train.csv\")","1ca5e186":"test.columns, train.columns","aedb9e2e":"y_train = train.iloc[:,0].values.astype('int32') \nX_train = (train.iloc[:,1:].values).astype('float32') \n\nX_test = test.values.astype('float32')","99eb65d8":"X_train.shape","dc469681":"X_train = X_train.reshape(X_train.shape[0], 28, 28)\nX_test = X_test.reshape(X_test.shape[0], 28, 28)","900f28df":"X_train.shape","09068621":"f, axarr = plt.subplots(5, sharex=True)\nfor i in range(5):\n    print(y_train[i])\n    axarr[i].imshow(X_train[i])\n#     Use Below line for black and white images\n#     axarr[i].imshow(X_train[i], cmap=plt.cm.binary)","5ff35f9c":"X_train[0]","3796923e":"X_train = tf.keras.utils.normalize(X_train, axis=1)\nX_test = tf.keras.utils.normalize(X_test, axis=1)","4fe89e4d":"f, axarr = plt.subplots(5, sharex=True)\nfor i in range(5):\n    print(y_train[i])\n    axarr[i].imshow(X_train[i])\n#     Use Below line for black and white images\n#     axarr[i].imshow(X_train[i], cmap=plt.cm.binary)","274cdbf4":"import keras","8f006fdb":"from keras.models import Sequential\nfrom keras.layers import Flatten, Dense, Conv2D","72a166c9":"model = Sequential()\nmodel.add(Flatten()) # Since we want a flat input\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))","395f44da":"model.compile(optimizer='adam',\n             metrics=['accuracy'],\n             loss='sparse_categorical_crossentropy')","55577a5f":"model.fit(X_train, y_train, epochs=10)","db502eec":"predictions = model.predict(X_test)","7814af0a":"val_loss, val_acc = model.evaluate(X_train, y_train)  # evaluate the out of sample data with model\nprint(val_loss)  # model's loss (error)\nprint(val_acc)","7cefcb61":"predictions","22485a62":"print(np.argmax(predictions[0]))","26b38842":"plt.imshow(X_test[0],cmap=plt.cm.binary)\nplt.show()","ff1888ee":"predictions = model.predict_classes(X_test, verbose=0)\n\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)), \"Label\": predictions})\nsubmissions.to_csv(\"sub.csv\", index=False, header=True)","a50088b0":"submissions.head()","c4a48269":"### Preparing model architechture","42012638":"### Now we observe that the values of pixels are in range (0 - 255).\n### We need to ```normalize``` them in order to bring them in range (0 - 1)","77258f8e":"### Checking images after normalization","2baac27f":"#### Unpacking the dataset","3a0882bb":"#### Now let us build a ```feed forward network```"}}