{"cell_type":{"4f94ed25":"code","2db3c8f9":"code","8df24dbe":"code","3a2dbb7d":"code","7e084c9c":"code","6d55e6a3":"code","cff109c3":"code","ce668565":"code","43290e58":"code","e7dcd11f":"code","41185bee":"code","7841e51d":"code","473c3436":"code","5a184828":"code","072d33eb":"code","12bcaec3":"code","e528e941":"code","c33d9a47":"code","8d03f95f":"markdown","d5b7ccf2":"markdown"},"source":{"4f94ed25":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score,f1_score, precision_score,roc_curve, recall_score, precision_recall_curve\n# import sklearn \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2db3c8f9":"input = pd.read_csv(\"\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")\ninput.head()","8df24dbe":"input.info()","3a2dbb7d":"input.describe()","7e084c9c":"input.quality.value_counts()","6d55e6a3":"corr = input.corr()\nplt.figure(figsize=(9,8))\nsns.heatmap(corr, cmap=\"YlGnBu\", annot = True)\nplt.show()","cff109c3":"\nsns.countplot(input.quality)","ce668565":"# plt.figure(figsize=(9,8))\ninput.hist(figsize=(20,10), bins=20)","43290e58":"x = input.iloc[: , :-1]\ny = input['quality']\nprint(x.shape)\nprint(y.shape)","e7dcd11f":"xcopy = x.copy()","41185bee":"scaler = StandardScaler()\ncolumns = x.columns\ndf_scaled = scaler.fit_transform(x)\nscaled_df = pd.DataFrame(df_scaled, columns = columns)\nscaled_df.head()\n","7841e51d":"scaled_df","473c3436":"xtrain, xtest, ytrain, ytest = train_test_split(xcopy, y, test_size=0.3, random_state = 2021)","5a184828":"rf = RandomForestClassifier()\nrf.fit(xtrain, ytrain)\npred = rf.predict(xtest)\n# accuracy_score(ytest, pred)","072d33eb":"print(\"\\n Accuracy of the model is: {} \".format(accuracy_score(ytest,pred)))\nprint(\"\\n Precision of the model is: {} \".format(precision_score(ytest,pred, average='weighted')))\nprint(\"\\n Recall of the model is: {} \".format(recall_score(ytest,pred, average='weighted')))\nprint(\"f1 of the model is: {}\".format(f1_score(ytest, pred, average='weighted')))\n# precision_recall_curve(ytest,pred)","12bcaec3":"xtrain, xtest, ytrain, ytest = train_test_split(scaled_df, y, test_size=0.3, random_state = 2021)","e528e941":"rf2 = RandomForestClassifier()\nrf2.fit(xtrain, ytrain)\ny_pred = rf2.predict(xtest)\n","c33d9a47":"print(\"Accuracy of the model is: {}\".format(accuracy_score(ytest, y_pred)))\nprint(\"Precision of the model is: {}\".format(precision_score(ytest, y_pred, average='micro')))\nprint(\"Recall of the model is: {}\".format(recall_score(ytest, y_pred, average='micro')))\nprint(\"f1 of the model is: {}\".format(f1_score(ytest, y_pred, average='weighted')))","8d03f95f":"# with scaling","d5b7ccf2":"# without scaling"}}