{"cell_type":{"6040b41a":"code","d06b7a43":"code","c4e64875":"code","ea28fd32":"code","bead3abb":"code","df2721d3":"code","45ae9cae":"code","cd73cb66":"code","d1fa9ff6":"code","661f2e14":"code","3b6f69bd":"code","1c35b807":"code","b03ca8ab":"code","0417aeea":"code","be6f35c2":"code","3651207a":"code","b93deffe":"code","4b6dee94":"code","d3961f1f":"code","df0eef0a":"code","e7cc6ef8":"code","d3f79d39":"code","a96e7c64":"code","e1f7d3b6":"code","5eb44266":"code","beee7367":"code","9b894b18":"code","699fb18c":"code","7bb3bf16":"code","b0a746db":"code","dc773933":"code","64f18af5":"code","4afd88bc":"code","05b17c50":"code","dae0016e":"code","8205d7e0":"code","0fa4f4d4":"code","9add6e2c":"code","9a8a3cec":"code","d9428ca7":"code","78b4b332":"code","3b02865f":"code","7e13d43c":"code","0b65c690":"code","8326f360":"code","ff922af7":"code","8e45848f":"code","cc38eaa7":"code","6f190872":"code","c39b1200":"code","da5ffcfe":"code","1c6fa4f5":"markdown","863dd4d9":"markdown","75a09272":"markdown"},"source":{"6040b41a":"import os\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC, NuSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, KBinsDiscretizer, FunctionTransformer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import confusion_matrix, precision_recall_fscore_support, accuracy_score\nfrom sklearn.model_selection import cross_val_score\n\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier","d06b7a43":"def get_last_name(df):\n    df.loc[:, 'Name'] = df.Name.str.split(',', expand=True)[0]\n    return df","c4e64875":"def get_X_y(df, indicator):\n    X = df.drop(INDICATOR, axis=1)\n    y = df.loc[:, INDICATOR]\n    return (X, y)","ea28fd32":"INDICATOR = 'Survived'","bead3abb":"%matplotlib inline","df2721d3":"test = pd.read_csv('..\/input\/titanic\/test.csv')","45ae9cae":"train = pd.read_csv('..\/input\/titanic\/train.csv')","cd73cb66":"gender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","d1fa9ff6":"train.head()","661f2e14":"train.shape","3b6f69bd":"train.PassengerId.unique().shape","1c35b807":"train.Survived.value_counts(dropna=False)","b03ca8ab":"train.Pclass.value_counts(dropna=False)","0417aeea":"train.Sex.value_counts(dropna=False)","be6f35c2":"train.Age.describe()","3651207a":"train.Age.value_counts(dropna=False)","b93deffe":"train.SibSp.value_counts(dropna=False)","4b6dee94":"train.Parch.value_counts(dropna=False)","d3961f1f":"train.Fare.value_counts(dropna=False)","df0eef0a":"train.Fare.describe()","e7cc6ef8":"train.Cabin.value_counts(dropna=False)","d3f79d39":"train.Ticket.value_counts(dropna=False)","a96e7c64":"train.Name.isna().sum()","e1f7d3b6":"train.Embarked.value_counts(dropna=False)","5eb44266":"X, y = get_X_y(train, INDICATOR)","beee7367":"\nnumeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])\n\nname_transformer = Pipeline(steps=[\n    ('get_last', FunctionTransformer(get_last_name, validate=False)),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\nbinning_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('binner', KBinsDiscretizer(n_bins=8, encode='ordinal'))\n])\n\ncat_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])","9b894b18":"numeric_features = ['Fare']\nbinning_features = ['Age']\nname_features = ['Name']\ncategorical_features = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Cabin', 'Embarked']","699fb18c":"preprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('name', name_transformer, name_features),\n        ('bin', binning_transformer, binning_features),\n        ('cat', cat_transformer, categorical_features)]\n)","7bb3bf16":"rf = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('random_forest', RandomForestClassifier(100))\n])\n\n\ncross_val_score(rf, X, y, cv=5).mean()","b0a746db":"rf.fit(X, y)","dc773933":"y_pred = rf.predict(X)","64f18af5":"precision_recall_fscore_support(y, y_pred, average='binary')","4afd88bc":"accuracy_score(y, y_pred)","05b17c50":" tn, fp, fn, tp = confusion_matrix(y, y_pred).ravel()","dae0016e":"(tn, fp, fn, tp)","8205d7e0":"train_copy = train.copy()","0fa4f4d4":"train_copy.loc[:, 'y_pred'] = y_pred","9add6e2c":"fps = train_copy[(train_copy.Survived == 0) & (train_copy.y_pred == 1)]\nfns = train[(train_copy.Survived == 1) & (train_copy.y_pred == 0)]","9a8a3cec":"fns","d9428ca7":"fps","78b4b332":"classifiers = [\n    KNeighborsClassifier(),\n    SVC(), \n    LinearSVC(), \n    NuSVC(),\n    DecisionTreeClassifier(),\n    RandomForestClassifier(100), \n    AdaBoostClassifier(), \n    GradientBoostingClassifier(),\n    LGBMClassifier(),\n    XGBClassifier(),\n    LogisticRegression(),\n    SGDClassifier()\n]","3b02865f":"overall = []\nfor i in range(5):\n    best = None\n    for classifier in classifiers:\n        clf = Pipeline(steps=[\n            ('preprocessor', preprocessor),\n            ('classifier', classifier)\n        ])\n        print('++++++++++++++++++++++++++++++++++++++++++++++++')\n        print(classifier)\n        print(\"Mean Accuracy for K=5: \")\n        score = cross_val_score(rf, X, y, cv=5).mean()\n        print(score)\n        if not best or score > best[1]:\n            best = (classifier, score)\n    overall.append(best)","7e13d43c":"overall","0b65c690":"from sklearn.model_selection import GridSearchCV\nlgbmc = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('lgbmc', LGBMClassifier())\n])\n\nparams = {\n    'lgbmc__max_bin': [260, 300, 350, 400],\n    'lgbmc__learning_rate': [0.1, 0.01, 0.001, 0.0001],\n    'lgbmc__num_iterations': [150, 200, 300, 400, 500],\n    'lgbmc__boosting': ['gbdt', 'dart']\n}\n\ngrid = GridSearchCV(lgbmc, cv=5, n_jobs=-1, param_grid=params, verbose=1)\n                    \ngrid.fit(X, y)","8326f360":"X, y = get_X_y(train, INDICATOR)","ff922af7":"lgbmc = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('lgbmc', LGBMClassifier())\n])\n\nlgbmc.fit(X, y)","8e45848f":"y_pred_test = lgbmc.predict(test)","cc38eaa7":"submission = test.copy()","6f190872":"submission.loc[:, 'Survived'] = y_pred_test","c39b1200":"submission = submission.loc[:, ['PassengerId', 'Survived']]","da5ffcfe":"submission.to_csv('submission.csv', index=False)","1c6fa4f5":"## LightGBM HPO","863dd4d9":"## Model Selection","75a09272":"## Create Submission"}}