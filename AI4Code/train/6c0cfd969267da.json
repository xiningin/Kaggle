{"cell_type":{"58e4f899":"code","067a0a05":"code","2746af2c":"code","24e4f445":"code","81a4e45e":"code","ce7d858e":"code","7cdfdc4e":"code","ae440419":"code","ff5aaa54":"code","5846b6a6":"code","a3b099ad":"code","2ad5f5f1":"markdown","705b8388":"markdown","7a89aebe":"markdown","4d42d4b5":"markdown"},"source":{"58e4f899":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns # just for download example dataset","067a0a05":"# dataset\ndf = sns.load_dataset('tips')\ndf.head()","2746af2c":"#bar chart\ntips_for_day = df.groupby('day').tip.sum()\n\nplt.bar(df['day'].unique(), \n        tips_for_day,\n       alpha=0.8,\n       width=0.5)\nplt.title('total of Tips in each Day')\nplt.xlabel('Day')\nplt.ylabel('Sum of Tips')\nplt.show()","24e4f445":"# stacked bar chart\ntips_for_day_f = df[df['sex']=='Female'].groupby('day').tip.sum()\ntips_for_day_m = df[df['sex']=='Male'].groupby('day').tip.sum()\n\np1 = plt.bar(df['day'].unique(), tips_for_day_f, color='r',)\np2 = plt.bar(df['day'].unique(),tips_for_day_m, color='b',\n             bottom=tips_for_day_f) # stacked bar chart\n\nplt.title('Stacked Bar Chart of Sum of Tips by Day & Sex')\nplt.ylabel('Sum of Tips')\nplt.xlabel('Day')\nplt.legend((p1[0], p2[0]), ('Female', 'Male'))\nplt.show()","81a4e45e":"# dot chart\n\nplt.plot(df[df['sex']=='Female']['total_bill'],df[df['sex']=='Female']['tip'],'r^')\nplt.plot(df[df['sex']=='Male']['total_bill'],df[df['sex']=='Male']['tip'],'bs')\nplt.title('Dot Chart of total price of Tips by Sex')\nplt.ylabel('total price')\nplt.xlabel('tip')\nplt.show()","ce7d858e":"# pie chart\n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = df['day'].unique()\nsizes = df.groupby('day').day.count()  # only \"explode\" the 2nd slice (i.e. 'Hogs')\nexplode = (0.2, 0, 0, 0) \n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, \n        explode=explode, \n        labels=labels, \n        autopct='%1.1f%%', # label numerical value\n        shadow=True, \n        startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title('percentage of day that people give tips')\nplt.show()","7cdfdc4e":"#donut chart\nlabels = df['day'].unique()\nsizes = df.groupby('day').day.count()\n\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, \n        labels=labels, \n        autopct='%1.1f%%',\n        startangle=90,\n        wedgeprops={'width':0.5},\n        pctdistance=0.7 # set the location of labels\n       )\nax1.axis('equal') \nplt.title('percentage of day that people give tips')\nplt.show()","ae440419":"# tree map\n# we can't make the tree map only using matplotlib, so we have to import squarify and get help!\nimport squarify\n\nplt.style.use('default')\n\nsizes = df.groupby('day').day.count()\nlabels = df['day'].unique()\ncolors = ['lightgreen', 'cornflowerblue', 'mediumpurple', 'lightcoral']\n\nsquarify.plot(sizes, label=labels, color=colors,\n              bar_kwargs=dict(linewidth=3, edgecolor=\"#eee\"))\nplt.show()","ff5aaa54":"#scatter plot\nx = df['total_bill']\ny = df['tip']\n\na, b = np.polyfit(x, y, 1) # fit a linear curve an estimate its y-values and their error.\ny_est = a * x + b\ny_err = x.std() * np.sqrt(1\/len(x) +\n                          (x - x.mean())**2 \/ np.sum((x - x.mean())**2))\n\nfig, ax = plt.subplots()\nplt.title('relationship between total bill and tip')\nplt.xlabel('total price')\nplt.ylabel('tip')\nax.plot(x, y_est, '-')\nax.fill_between(x, y_est - y_err, y_est + y_err, alpha=0.3)\nax.plot(x, y, 'o')","5846b6a6":"#bubble chart\nx = df['size']\ny = df['total_bill']\nvolume = df['tip']\nfig, ax = plt.subplots()\nax.scatter(x,y,volume*50,c=\"g\", alpha=0.5, label=\"tip\",marker=r'$\\clubsuit$')\nax.grid(True)\nfig.tight_layout()\n\nplt.xlabel(\"size\")\nplt.ylabel(\"total_bill\")\nplt.legend(loc='upper left')\nplt.show()","a3b099ad":"#histogram\nlabels = df['day'].unique()\nmen_count = df[df['sex']=='Male'].groupby('day').day.count()\nwomen_count = df[df['sex']=='Female'].groupby('day').day.count()\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, men_count, width, label='Men')\nrects2 = ax.bar(x + width\/2, women_count, width, label='Women')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('the number of giving tip')\nax.set_title('the number of giving tip grouped by gender')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\n\nfig.tight_layout()\nplt.show()","2ad5f5f1":"**2. distribution visualization**\n\nThe distribution data seperated into maximum, minimum, overall distribution.\nIn this dataset, we have to focus on distribution.\nSum of distribution data is 1 or 100%\nwe have to show the part of relationship on overall perspective.\n\nFor visualization, we can use pie chart, donut chart, tree map, stacked continuous chart.","705b8388":"**1. Time visualization**\n\nThe data related with time express the change and it is called time series data.\nTime series data is used for tracking trend that change over the time.\nWe can divide time series data into continueous and discrete.\n\nFor visuallization, we can use bar graph, stacked bar chart, dot graph.\n","7a89aebe":"# Data Visuallization\n\nIt is important to select appropriate data visualization method to efficiently deliver the result of data analysis. \nThere are the number of graph for each visualization method. Let examine each type of graph and visualization. ","4d42d4b5":"**3. relationship visualization**\n\nIf we know the correlation between two variable, we can predict the change of one variable according to the change of another variable. Using relationship visualization we can know the correlation between two variable.\n\nFor visualization, we can use scatter plot, bubble chart, histogram"}}