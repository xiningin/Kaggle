{"cell_type":{"87e7e54f":"code","809ce70f":"code","e3ea18cf":"code","5a5ba923":"code","656b4139":"code","d8681958":"code","18697c46":"code","b9f6a979":"code","2c39d369":"code","bcc227a2":"code","6a47ac94":"code","2b9ba42c":"code","6ca3e96d":"code","43e4125a":"code","685342b0":"code","1c286bf4":"code","c26af8c1":"code","b2380520":"code","1da0a463":"code","75ca5e1a":"code","fbaab522":"code","e8e1b8de":"code","e43869a1":"code","3854abd7":"code","380a9a73":"code","36141a71":"code","c1ff2e65":"code","f0ac9d9e":"code","fc07b9bf":"code","27f9f01c":"code","0bea7d3b":"code","3b376883":"code","e5304a04":"code","6e8b4fb9":"code","d7b62792":"code","e03ab796":"code","2fd345d3":"code","9f551105":"code","0152d1ad":"code","1465c676":"code","dabf93a4":"code","df82788d":"markdown","667b2443":"markdown","201ff880":"markdown","4f9e1168":"markdown","a68c43d8":"markdown","f7705cd7":"markdown","7ee6136d":"markdown","e9c42457":"markdown","2be60592":"markdown","1333e20e":"markdown","51976bb5":"markdown","aecaf52c":"markdown","11ee7630":"markdown","0944b92b":"markdown","8a7f6931":"markdown","46d0d25c":"markdown","43b64180":"markdown","b0af6fa0":"markdown","67d7e705":"markdown","f5383cad":"markdown","8e61e385":"markdown","d0e23832":"markdown","bb4ffba6":"markdown"},"source":{"87e7e54f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","809ce70f":"train_data = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-3\/test.csv\")","e3ea18cf":"import matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly.express as px\n%matplotlib inline\n","5a5ba923":"train_data.head()\n","656b4139":"test_data.head()","d8681958":"train_data.shape","18697c46":"test_data.shape","b9f6a979":"train =train_data.drop([\"Province_State\"] , axis = 1)\ntest =test_data.drop([\"Province_State\"] , axis = 1)\n","2c39d369":"train.head()","bcc227a2":"train = train[train[\"ConfirmedCases\"] != 0]","6a47ac94":"df = train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum() \\\n                          .groupby(['Country_Region']).max().sort_values() \\\n                          .groupby(['Country_Region']).sum().sort_values(ascending = False)\n\ntop10 = pd.DataFrame(df).head(10).reset_index()\ntop10","2b9ba42c":"deaths = train.fillna('NA').groupby(['Country_Region','Date'])['Fatalities'].sum() \\\n                          .groupby(['Country_Region']).max().sort_values() \\\n                          .groupby(['Country_Region']).sum().sort_values(ascending = False)\n\ndeaths10 = pd.DataFrame(deaths).head(10).reset_index()\ndeaths10","6ca3e96d":"px.bar(top10 , x=\"Country_Region\" , y=\"ConfirmedCases\" , color = \"ConfirmedCases\")","43e4125a":"px.bar(deaths10 , x = \"Country_Region\" , y = \"Fatalities\" , color = \"Fatalities\")","685342b0":"data_by_date = pd.DataFrame(train.groupby([\"Country_Region\" , \"Date\"])[\"ConfirmedCases\"].sum())\ndata_by_date = data_by_date.sort_values(\"ConfirmedCases\" , axis=0 , ascending = True).reset_index()","1c286bf4":"data_by_date.head()","c26af8c1":"death_by_date = pd.DataFrame(train.groupby([\"Country_Region\" , \"Date\"])[\"Fatalities\"].sum())\ndeath_by_date = death_by_date.sort_values(\"Fatalities\" , axis=0 , ascending = False).reset_index()","b2380520":"death_by_date.head(10)","1da0a463":"df = data_by_date.loc[(data_by_date['Country_Region'] == 'US') &(data_by_date.Date >= '2020-03-01')]\ndf = df.sort_values('ConfirmedCases',ascending = True)","75ca5e1a":"px.bar(df , x = 'Date' ,  y =\"ConfirmedCases\" , color = \"ConfirmedCases\")","fbaab522":"death_US = death_by_date.loc[(death_by_date['Country_Region'] == 'US') &(death_by_date.Date >= '2020-03-01')]\ndeath_US = death_US.sort_values('Fatalities',ascending = True)","e8e1b8de":"fig3 = px.bar(death_US , x = \"Date\" , y = \"Fatalities\" , color = \"Fatalities\")\nfig3.update_layout(title_text = \"daywise deaths in US\")\nfig3.show()","e43869a1":"data_china = data_by_date.loc[(data_by_date[\"Country_Region\"] == \"China\") & (data_by_date[\"Date\"] >= \"2020-01-01\")]","3854abd7":"data_china.sort_values(\"ConfirmedCases\" , ascending = True)\nplot_china = px.bar(data_china , x = \"Date\" , y = \"ConfirmedCases\" )\nplot_china.show()","380a9a73":"death_china = death_by_date.loc[(death_by_date[\"Country_Region\"] == \"China\") & (death_by_date[\"Date\"] >= \"2020-01-01\")]\ndeath_china.sort_values(\"Fatalities\" , ascending = True)","36141a71":"fig4 = px.bar(death_china , x = \"Date\" , y = \"Fatalities\" )\nfig4.update_layout(title_text = \"deaths in China\")\nfig4.show()","c1ff2e65":"data_italy = data_by_date.loc[(data_by_date[\"Country_Region\"] == \"Italy\" ) & (data_by_date[\"Date\"] >= \"2020-02-21\")]\ndata_italy = data_italy.sort_values(\"ConfirmedCases\" , ascending = False)\nplot_italy = px.bar(data_italy , x = \"Date\" , y = \"ConfirmedCases\" , color = \"ConfirmedCases\" , color_continuous_scale=px.colors.sequential.Brwnyl)\nplot_italy.update_layout(title_text = \"cases in ITALY\")\nplot_italy.show()","f0ac9d9e":"death_italy = death_by_date.loc[(death_by_date[\"Country_Region\"] == \"Italy\" ) & (death_by_date[\"Date\"] >= \"2020-02-21\")]\ndeath_italy = death_italy.sort_values(\"Fatalities\" , ascending = False)\nfig5 = px.bar(death_italy , x = \"Date\" , y = \"Fatalities\" , color = \"Fatalities\" , color_continuous_scale=px.colors.sequential.Brwnyl)\nfig5.update_layout(title_text = \"deaths in ITALY\")\nfig5.show()","fc07b9bf":"data_india = data_by_date.loc[(data_by_date[\"Country_Region\"]==\"India\") & (data_by_date[\"Date\"]>= \"2020-03-03\")]\ndata_india = data_india.sort_values(\"ConfirmedCases\" , ascending = True)\nplot_india = px.bar(data_india , x = \"Date\" , y = \"ConfirmedCases\" , color = \"ConfirmedCases\")\nplot_india.show()","27f9f01c":"death_india = death_by_date.loc[(death_by_date[\"Country_Region\"]==\"India\") & (death_by_date[\"Date\"]>= \"2020-03-03\")]\ndeath_india = death_india.sort_values(\"Fatalities\" , ascending = True)\nfig_india = px.bar(death_india , x = \"Date\" , y = \"Fatalities\" , color = \"Fatalities\")\nfig_india.show()","0bea7d3b":" # Load Data\nx_train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/train.csv')\nx_test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/test.csv')\nx_submission = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/submission.csv')","3b376883":"x_train.rename(columns={'Country_Region':'country'}, inplace=True)\nx_test.rename(columns={'Country_Region':'country'}, inplace=True)\n\nx_train.rename(columns={'Province_State':'state'}, inplace=True)\nx_test.rename(columns={'Province_State':'state'}, inplace=True)\n\nx_train['date'] = pd.to_datetime(x_train['Date'], infer_datetime_format=True)\nx_test['date'] = pd.to_datetime(x_test['Date'], infer_datetime_format=True)\n\n\n\nEMPTY_VAL = \"EMPTY_VAL\"\n\ndef fillState(state, country):\n    if state == EMPTY_VAL: return country\n    return state","e5304a04":"\n\nx_train['state'].fillna(EMPTY_VAL, inplace=True)\nx_train['state'] = x_train.loc[:, ['state', 'country']].apply(lambda x : fillState(x['state'], x['country']), axis=1)\n\nx_train.loc[:, 'date'] = x_train.date.dt.strftime(\"%m%d\")\nx_train[\"date\"]  = x_train[\"date\"].astype(int)\n\n\nx_test['state'].fillna(EMPTY_VAL, inplace=True)\nx_test['state'] = x_test.loc[:, ['state', 'country']].apply(lambda x : fillState(x['state'], x['country']), axis=1)\n\nx_test.loc[:, 'date'] = x_test.date.dt.strftime(\"%m%d\")\nx_test[\"date\"]  = x_test[\"date\"].astype(int)\n\n","6e8b4fb9":"from sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\n\nx_train.country = le.fit_transform(x_train.country)\nx_train['state'] = le.fit_transform(x_train['state'])\n\n\nx_test.country = le.fit_transform(x_test.country)\nx_test['state'] = le.fit_transform(x_test['state'])\n","d7b62792":"from warnings import filterwarnings\nfilterwarnings('ignore')","e03ab796":"# Predict data and Create submission file from test data\nxout = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})","2fd345d3":"from xgboost.sklearn import XGBRegressor","9f551105":"countries = x_train.country.unique()","0152d1ad":"for i in countries:\n    states = x_train.loc[x_train.country == i, :].state.unique()\n    #print(country, states)\n    # check whether string is nan or not\n    for j in states:\n        x_train_m = x_train.loc[(x_train.country == i) & (x_train.state == j), ['state', 'country', 'date', 'ConfirmedCases', 'Fatalities']]\n        \n        y_train_cases = x_train_m.loc[:, 'ConfirmedCases']\n        y_train_fata = x_train_m.loc[:, 'Fatalities']\n        \n        x_train_all = x_train_m.loc[:, ['state', 'country', 'date']]\n        \n        x_train_all.country = le.fit_transform(x_train_all.country)\n        x_train_all['state'] = le.fit_transform(x_train_all['state'])\n        \n        X_xTest_CS = x_test.loc[(x_test.country == i) & (x_test.state == j), ['state', 'country', 'date', 'ForecastId']]\n        \n        X_xTest_CS_Id = X_xTest_CS.loc[:, 'ForecastId']\n        X_xTest_CS = X_xTest_CS.loc[:, ['state', 'country', 'date']]\n        \n        X_xTest_CS.country = le.fit_transform(X_xTest_CS.country)\n        X_xTest_CS['state'] = le.fit_transform(X_xTest_CS['state'])\n        \n        xmodel1 = XGBRegressor(n_estimators=1000)\n        xmodel1.fit(x_train_all,y_train_cases )\n        y1_xpred = xmodel1.predict(X_xTest_CS)\n        \n        xmodel2 = XGBRegressor(n_estimators=1000)\n        xmodel2.fit(x_train_all, y_train_fata)\n        y2_xpred = xmodel2.predict(X_xTest_CS)\n        \n        xdata = pd.DataFrame({'ForecastId': X_xTest_CS_Id, 'ConfirmedCases': y1_xpred, 'Fatalities': y2_xpred})\n        xout = pd.concat([xout, xdata], axis=0)","1465c676":"xout.head(10)","dabf93a4":"xout.ForecastId = xout.ForecastId.astype('int')\nxout.tail()\nxout.to_csv('submission.csv', index=False)","df82788d":"# Province_State column has lots of NAN values , just we'll drop this column ","667b2443":"# renaming columns.","201ff880":"# **looking at the head of training dataset **","4f9e1168":"# Filling the null values in training and testing set. state column by country column ","a68c43d8":"# Loading the datasets ","f7705cd7":"# As we can see the number of cases and the death rate increased in CHINA suddenly but now the situation is in control. slope of the graph in decreasing now.","7ee6136d":"**As we can see that USA has highest number of confirmed cases.**","e9c42457":"# #Prediction process","2be60592":"# Filling null values and grouping the dataset and considering only top 10 countries","1333e20e":"# **shapes of training and testing datasets**\n# we have a large dataset containing 23562 training examples","51976bb5":"**using labelEncoder for country and state column **","aecaf52c":"# > **Importing important libraries**","11ee7630":"# **Loading the datasets**","0944b92b":"# USA has the highest number of confirmed cases but ITALY has highest death rate","8a7f6931":"# x_out file for the submission \n","46d0d25c":"# Death rate in ITALY is highest.","43b64180":"![image.png](attachment:image.png)","b0af6fa0":"# #preprocessing part","67d7e705":"# **head of the test dataset**","f5383cad":"# looking at the dataset of USA only.","8e61e385":"**In confirmed_cases column we have lot of zero values , filtering the dataframe and considering only nonzero values **","d0e23832":"# As we can see that the cases and the deathrate in USA in increasing rapidly.","bb4ffba6":"# using XGBRegressor"}}