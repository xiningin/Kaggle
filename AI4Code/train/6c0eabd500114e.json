{"cell_type":{"3e6afbf3":"code","387ee29e":"code","bc63fbd8":"code","d917a640":"code","5d5d4a90":"code","eed148f2":"code","4bc25fe8":"code","585e3bc2":"code","91c30070":"code","071d50d8":"code","acb639d9":"code","b1a96b3a":"code","381baea8":"code","d91fc812":"code","5f8d2027":"code","dab21eea":"code","f8d88098":"code","eb4376d8":"code","230c2c79":"code","59551040":"code","3ae886fc":"code","002b5336":"code","f86faf75":"code","c32dff9d":"code","d8397034":"code","87cb613d":"code","f6bf3e36":"code","0a0cbd55":"code","225fe255":"code","d8b73eed":"code","c800eed1":"code","8992b7f2":"code","04ad5d16":"code","53ec8d40":"code","1e900a94":"code","90492e2e":"code","408a4953":"code","fe1432b5":"code","e9881df5":"code","9dd9d352":"code","0a093a4d":"code","0dc5e4f9":"code","33ad4c90":"code","ab53aad4":"code","dd92ba05":"code","7649aaa8":"code","e4f597a8":"code","9e7b5f22":"markdown","108dc79c":"markdown","1fdfaaed":"markdown","d57c9616":"markdown","22d3d4e2":"markdown","2cd70c53":"markdown","51df9b6b":"markdown","d5d5fc49":"markdown","ad976610":"markdown"},"source":{"3e6afbf3":"from sklearn.datasets import load_digits\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd","387ee29e":"data=pd.read_csv('..\/input\/covid19-symptoms-checker\/Cleaned-Data.csv')","bc63fbd8":"data.dropna(inplace=True)","d917a640":"data.drop_duplicates(inplace=True)\ndata","5d5d4a90":"import seaborn as sns","eed148f2":"data1=data.drop(['Severity_Mild','Severity_Moderate','Severity_None','Severity_Severe' ],axis=1) \ndata1.head()","4bc25fe8":"data1=data1.drop(['Country'],axis=1)","585e3bc2":"from sklearn.preprocessing import StandardScaler\nscaler= StandardScaler()\ntrain_df_scaled=scaler.fit_transform(data1)","91c30070":"sns.countplot(x=data['Severity_None'])","071d50d8":"indicators =[]\nindicators2 =[]\ntarget_column=[]\nseverity= []\n\nindicators = ['Fever', 'Tiredness', 'Dry-Cough',  'Difficulty-in-Breathing', 'Sore-Throat', 'Pains', 'Nasal-Congestion',\n              'Runny-Nose', 'Diarrhea', 'Age_0-9', 'Age_10-19', 'Age_20-24', 'Age_25-59', 'Age_60+', 'Gender_Male',\n              'Gender_Female', 'Gender_Transgender']\ntarget_columns = ['Severity_None']\nindicators2 = ['Fever', 'Tiredness', 'Dry-Cough',  'Difficulty-in-Breathing', 'Sore-Throat', 'Pains', 'Nasal-Congestion',\n              'Runny-Nose', 'Diarrhea', 'Age_0-9', 'Age_10-19', 'Age_20-24', 'Age_25-59', 'Age_60+', 'Gender_Male',\n              'Gender_Female', 'Gender_Transgender', 'Severity_None']\nseverity=['Severity_Mild','Severity_Moderate','Severity_None','Severity_Severe']\nrisk=data[severity]\nfeatures = data[indicators]\ntargets = data[target_columns]\ndisplay(features.head(), targets.head())","acb639d9":"plt.figure(figsize = (10 ,10))\ntemp = []\nfor i in indicators:\n    temp.append(sum(features[i].values))\ntemp_df = pd.DataFrame({\"Indicator\":indicators, \"Occurence_Count\":temp})\nsns.barplot(data = temp_df, y=\"Indicator\", x=\"Occurence_Count\")","b1a96b3a":"plt.figure(figsize = (10 ,10))\nplt.pie(data=temp_df, x=\"Occurence_Count\", labels=temp_df[\"Indicator\"])\nplt.show()","381baea8":"def get_symptom_count(the_list):\n    return sum(the_list.values)\nfeatures['Total_Symptom'] = features[indicators].apply(get_symptom_count, axis=1)\nfeats = data[indicators2]\nfeats['Total_Symptom'] = feats[indicators].apply(get_symptom_count, axis=1)","d91fc812":"plt.figure(figsize = (10 ,10))\nsns.countplot(data=feats, x='Total_Symptom', hue='Severity_None')\nplt.xlabel(\"Total symptom occurence on someone\")\nplt.show()","5f8d2027":"pca = PCA(2)\npca\n","dab21eea":"df = pca.fit_transform(train_df_scaled)\ndf = pd.DataFrame(df)\ndf.columns = ['P1', 'P2']\nprint(df.head())","f8d88098":"inertias = []\n\nfor i in range(1,15):\n    km=KMeans(n_clusters=i, random_state=2)\n    km.fit(train_df_scaled)\n    inertias.append(km.inertia_)","eb4376d8":"plt.figure(figsize=(10,6))\nplt.plot(range(1,15), inertias, color='blue', marker='o', markerfacecolor='red', markersize=10)\nplt.title('Inertias vs. number of clusters')\nplt.xlabel('Number of clusters')\nplt.ylabel('Inertia')\nplt.show()\n","230c2c79":"from sklearn.metrics import davies_bouldin_score","59551040":"bouldin_score=[]\n\nfor i in range(4,15):\n    km=KMeans(n_clusters=i, random_state=2)\n    labels=km.fit_predict(train_df_scaled)\n    bouldin_score.append(davies_bouldin_score(train_df_scaled, labels))","3ae886fc":"\nplt.figure(figsize=(10,6))\nplt.plot(range(4,15), bouldin_score, color='blue', marker='o', markerfacecolor='red', markersize=10)\nplt.title('Davies Bouldin Score vs. number of clusters')\nplt.xlabel('Number of clusters')\nplt.ylabel('Davies Bouldin Score')\nplt.show()","002b5336":"from sklearn.cluster import KMeans\n\nkmeans = KMeans(n_clusters= 7)\nlabel = kmeans.fit_predict(df)\nprint(label)","f86faf75":"import matplotlib.pyplot as plt\n \nfiltered_label0 = df[label == 0]\nplt.scatter(filtered_label0['P1'] , filtered_label0['P2'])\nplt.show()","c32dff9d":"u_labels = np.unique(label)\n \n#plotting the results:\nfiltered_label0 = df[label == 0]\nfiltered_label1 = df[label == 1]\nfiltered_label2 = df[label == 2]\nfiltered_label3 = df[label == 3]\nfiltered_label4 = df[label == 4]\nfiltered_label5 = df[label == 5]\nfiltered_label6 = df[label == 6]\n\n\nplt.scatter(filtered_label0['P1'] , filtered_label0['P2'])\nplt.scatter(filtered_label1['P1'] , filtered_label1['P2'])\nplt.scatter(filtered_label2['P1'] , filtered_label2['P2'])\nplt.scatter(filtered_label3['P1'] , filtered_label3['P2'])\nplt.scatter(filtered_label4['P1'] , filtered_label4['P2'])\nplt.scatter(filtered_label5['P1'] , filtered_label5['P2'])\nplt.scatter(filtered_label6['P1'] , filtered_label6['P2'])\n\n\nplt.legend()\nplt.show()","d8397034":"#Getting the Centroids\ncentroids = kmeans.cluster_centers_\nu_labels = np.unique(label)\n \n#plotting the results:\n\nfiltered_label0 = df[label == 0]\nfiltered_label1 = df[label == 1]\nfiltered_label2 = df[label == 2]\nfiltered_label3 = df[label == 3]\nfiltered_label4 = df[label == 4]\nfiltered_label5 = df[label == 5]\nfiltered_label6 = df[label == 6]\n\n\nplt.scatter(filtered_label0['P1'] , filtered_label0['P2'])\nplt.scatter(filtered_label1['P1'] , filtered_label1['P2'])\nplt.scatter(filtered_label2['P1'] , filtered_label2['P2'])\nplt.scatter(filtered_label3['P1'] , filtered_label3['P2'])\nplt.scatter(filtered_label4['P1'] , filtered_label4['P2'])\nplt.scatter(filtered_label5['P1'] , filtered_label5['P2'])\nplt.scatter(filtered_label6['P1'] , filtered_label6['P2'])\n\nplt.scatter(centroids[:,0] , centroids[:,1] , s = 50, color = 'k')\nplt.legend()\nplt.show()","87cb613d":"resultDfk = pd.DataFrame(label)\nresultDfk.iloc[:,0].value_counts().plot.bar()","f6bf3e36":"datas=data.sample(n=25000)\ndatas=datas.drop(['Country'],axis=1)","0a0cbd55":"code = []\n\nfor i in range(datas.shape[0]):\n    if (datas.iloc[i]['Severity_Mild']==1):\n      \n        code.append(1)\n    elif (datas.iloc[i]['Severity_Moderate']==1):\n \n        code.append(2)\n    elif (datas.iloc[i]['Severity_Severe']==1):\n   \n        code.append(3)\n    elif (datas.iloc[i]['Severity_None']==1):\n   \n        code.append(4)\n    else:\n        poke_type.append('NaN')\n        code.append('NaN')","225fe255":"datas['code'] = code","d8b73eed":"sns.countplot(x=datas['code'])","c800eed1":"datas['code'].value_counts().plot.bar()","8992b7f2":"datas1=datas.drop(['Severity_Mild','Severity_Moderate','Severity_None','Severity_Severe' ],axis=1) \ndatas1.head()","04ad5d16":"from sklearn.cluster import Birch\nimport numpy as np\nimport matplotlib.pyplot as plt","53ec8d40":"pca_birch = PCA(1)\npca_birch","1e900a94":"df_birch = pca_birch.fit_transform(datas1)\n \ndf_birch.shape","90492e2e":"x_range = range(len(df_birch))\nx = np.array(list(zip(x_range, df_birch))).reshape(len(x_range), 2)\n\nplt.scatter(x[:,0], x[:,1])\nplt.show()","408a4953":"bclust=Birch(branching_factor=100,n_clusters = 4,threshold=.5).fit(x)\nprint(bclust)\n\nlabels = bclust.predict(x)\n\nplt.scatter(x[:,0], x[:,1], c=labels)\nplt.show()","fe1432b5":"resultDfb = pd.DataFrame(labels)\nresultDfb.iloc[:,0].value_counts().plot.bar()","e9881df5":"fig, ax = plt.subplots(1, 2, figsize=(15, 5))\nax=plt.subplot(1,2,1)\ndatas['code'].value_counts().plot.bar(title=\"Original Severity\",color=(0.6, 0.2, 0.6, 0.6),  edgecolor='purple')\nax=plt.subplot(1,2,2)\nresultDfb.iloc[:,0].value_counts().plot.bar(title=\"BIRCH clustering\",color=(1, 0, 0, 0.6),  edgecolor='red')","9dd9d352":"from sklearn.cluster import DBSCAN\nfrom sklearn import metrics","0a093a4d":"pca_db = PCA(2)\npca_db\n","0dc5e4f9":"df_db = pca_db.fit_transform(datas1)\ndf_db.shape","33ad4c90":"db = DBSCAN(eps=0.3, min_samples=5).fit(df_db)\ncore_samples_mask = np.zeros_like(db.labels_, dtype=bool)\ncore_samples_mask[db.core_sample_indices_] = True\nlabels = db.labels_","ab53aad4":"# Number of clusters in labels, ignoring noise if present.\nn_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)\nn_noise_ = list(labels).count(-1)\n\nprint(\"Estimated number of clusters: %d\" % n_clusters_)\nprint(\"Estimated number of noise points: %d\" % n_noise_)\n","dd92ba05":"resultDfd = pd.DataFrame(db.labels_)\nresultDfd.iloc[:,0].value_counts()","7649aaa8":"fig, ax = plt.subplots(1, 2, figsize=(15, 5))\nax=plt.subplot(1,2,1)\ndatas['code'].value_counts().plot.bar(title=\"Original Severity\",color=(0.6, 0.2, 0.6, 0.6),  edgecolor='purple')\nax=plt.subplot(1,2,2)\nresultDfd.iloc[:,0].value_counts().plot.bar(title=\"DBSCAN clustering\",color=(0.1, 0.2, 1, 0.5),  edgecolor='blue')","e4f597a8":"fig, ax = plt.subplots(2, 2, figsize=(15, 15))\nax=plt.subplot(2,2,1)\ndatas['code'].value_counts().plot.bar(title=\"Original Severity\",color=(0.6, 0.2, 0.6, 0.6),  edgecolor='purple')\nax=plt.subplot(2,2,2)\nresultDfk.iloc[:,0].value_counts().plot.bar(title=\"K means clustering\",color=(0.2, 1, 0.2, 0.5),  edgecolor='lime')\nax=plt.subplot(2,2,3)\nresultDfb.iloc[:,0].value_counts().plot.bar(title=\"BIRCH clustering\",color=(1, 0.1, 0, 0.6),  edgecolor='red')\nax=plt.subplot(2,2,4)\nresultDfd.iloc[:,0].value_counts().plot.bar(title=\"DBSCAN clustering\",color=(0.1, 0.2, 1, 0.5),  edgecolor='blue')","9e7b5f22":"## Elbow Method","108dc79c":"# PCA","1fdfaaed":"\n# K-Means","d57c9616":"## Result of all Clusters","22d3d4e2":"# DBSCAN","2cd70c53":"# Determine Value of K for K means","51df9b6b":"# Import","d5d5fc49":"# Data Visualization","ad976610":"# BIRCH Clustering"}}