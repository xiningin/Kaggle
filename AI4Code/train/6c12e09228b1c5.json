{"cell_type":{"9d2bf5a7":"code","96811042":"code","53abd1fb":"code","0df77689":"code","3ae056a3":"code","1b3b37d8":"code","17030aa4":"code","caa0b24a":"code","b4dafddf":"code","660b4dfb":"markdown","fc6f779b":"markdown","958b18a2":"markdown"},"source":{"9d2bf5a7":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport os","96811042":"dataFrame = pd.read_csv('\/kaggle\/input\/spacex-all-satellites-database\/SpaceX Satellite Dataset.csv')\ndataFrame[0:10]","53abd1fb":"def CalculateEllipseParam(eccentricity, Apogee):\n    semiMajor = Apogee\/(1 + eccentricity)\n    semiMinor = semiMajor*pow(1 - eccentricity**2, 0.5)\n    return semiMajor, semiMinor","0df77689":"a, b = CalculateEllipseParam(0.000144, 561.000000)\n\ndef trajcalculator(semiMajor, semiMinor):\n    xarr = np.linspace(-1*semiMajor, semiMajor, num = 100 )\n    # for simpilicity just assuming earth as the centre of ellipse\n    \n    yarr = (((semiMajor**2) * (semiMinor**2)) - ((semiMinor**2) * (xarr**2))) \/ (semiMajor**2)\n    yarr = yarr**0.5\n    \n    return xarr, yarr\n    \n    ","3ae056a3":"trajX, trajY = trajcalculator(a,b)\nplt.figure(figsize=(7, 5))\nplt.plot(trajX, trajY, color = 'green', label = 'Satellite Trajectory')\nplt.scatter([0],[0], color = 'blue', label = 'Earth')\nplt.grid(True)\nplt.legend()\nplt.show()","1b3b37d8":"def TrajectoryPlotter(dataFrame):\n    plt.figure(figsize = (20, 15))\n    plt.scatter([0],[0], label = 'Earth', color = 'green')\n    \n    df = dataFrame[['Current Official Name of Satellite', 'Eccentricity', 'Apogee (km)']].values\n    for mem in df:\n        name = mem[0]\n        eccentricity = mem[1]\n        apogee = mem[2]\n        \n        a, b = CalculateEllipseParam(eccentricity, apogee)\n        xarr, yarr = trajcalculator(a, b)\n\n        plt.plot(xarr, yarr, label = name)\n    \n    plt.grid(True)\n    plt.legend()\n    plt.show()\n    ","17030aa4":"TrajectoryPlotter(dataFrame)","caa0b24a":"# Coding an interactive Plotly function for the same\nimport plotly\nfrom plotly.offline import plot, iplot, download_plotlyjs, init_notebook_mode\ninit_notebook_mode(connected=True)\n\nimport plotly.graph_objs as go\n\ndef TrajectoryPlotter2(dataFrame):\n\n    traceArr = []\n    df = dataFrame[['Current Official Name of Satellite', 'Eccentricity', 'Apogee (km)']].values\n    for mem in df:\n        name = mem[0]\n        eccentricity = mem[1]\n        apogee = mem[2]\n        \n        a, b = CalculateEllipseParam(eccentricity, apogee)\n        xarr, yarr = trajcalculator(a, b)\n\n        traceArr.append(go.Scatter(\n            x = xarr,\n            y = yarr,\n            mode = 'lines+markers',\n            name = name\n        ))\n    \n    iplot(traceArr)\n\n","b4dafddf":"TrajectoryPlotter2(dataFrame)","660b4dfb":"#  Introduction\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMSEhUTEhIVFRUVFRUVFxUVFRUVFRUVFhUWFhUVFxUYHSggGBolHRUVITEhJSkrLi4uFx8zODMsNygtLisBCgoKDg0OGhAQGi0fHx0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKy0tLS0rLS0tLS0tLS0tLS0tLS0tLf\/AABEIALcBEwMBIgACEQEDEQH\/xAAbAAACAgMBAAAAAAAAAAAAAAADBAECAAUGB\/\/EAEUQAAEDAgMDCAUJBwIHAAAAAAEAAhEDIQQSMQVBURMiYXGBkaGxBjKSwdEUQkNSYnKi4fAjJFNzgrLxFcIHFjM0o7Pi\/8QAGQEAAwEBAQAAAAAAAAAAAAAAAAECAwQF\/8QAIxEBAQACAgEFAAMBAAAAAAAAAAECERIhMQMTQVFhcYHBQv\/aAAwDAQACEQMRAD8A9JlS08FhCgBdjnSRKE5qJKmEAu8IZYm3MlAfaycoCFNWDFfIsIRsBOahliYA4qjimC5YqlqPCoWpkG0J2iwgIdKki1am5Tbs4Xq6oZCKqOCYDhTlSm09osoMzv6gBEk8BKvs3Gsr021KZlrh2g7weBCYHLUNyK4oTyggHoD0dyBUVQqA8oQKI4IYVkuaaE5iu56hxQGMMKXVJVSFEFATlVS1XB4rMs2SADoQn2TD6M9QQ3NCZBNBKJyEIrIVsyWwXyfqFiISsQHcqygrJWC0gKYWFp4KAUjTCE6nKOFLmo2ZYiFSUzlQajU5SDchwrwsAVEwtUGmrEqxNkjRSahOF0ZCebpQKEJHaOPZRy5pJe7K1rRLid5A4DUom1NosoUzUebCwG9x3NHSuM2FiH4rGOrVNKdNz4GjBIa0D2u26vXWy33pr\/TXaJqVsmgZIA6d6r6D7Z5F7qbiSx1+MHiAFqdsVZqOP2ifNL7OPPaem\/VvVaG3r2CxbKzA9hlp7CCNQRuIVnhee7K2u\/CV3AyWF3PbvM3zj7V+246vQaNVr2h7CC1wkEbwizRbUc1BqBMOCE9iIKSqBBlM1aaA5iuJDlXp3Q4T+HpABF6EDp0CU7Swlr2U03cAiPdGpWdtXIVxFIJaoeCYqOlBMIlBRwOqCU1UeguVypoYKjMphVcmSpKxRKxAejciZgC6ao4GLuITgAF4Q3vXFc7W8xkWdl0KCzKDYKs3RQ1SbJS1dgRzUiUpWrglVjKVDaFWoE3TBMRZLVNbqpeysLuaoyo2VRlV7ToItWAIhCo4IAb3KsK+RVeOF+hMPNvTfGl+JLAebTAaBuzG7j4gf0rb+h+CLMJiahiXhgHENl1iZ6j2hRS9DHPLn16sOcS4imJuTM5nDp4LeswxbgnyRDiGtAaWgMpjkwNT9Q+CvOyyYxOM815NtGlzj1oWApyeqLrY7SoiHOm4Ii+68+5K4RkNLt0geS0sTsTa4Jcx94LQHQLyCY8wF1HoHjSHPouJgjO0HcRZwHXIPYVpsJR5R7WSAKhDCSM2UOeyCBIuCAexdHR9FquHrMq0nioGuEg8x+U2d0GxO8JTUllO73t05CG9qYfCG5qiGUexDNNOFiIKdtE+Whprm0YRqYRajYUNRvY0KXBoslKtRWchuYlIewnOQXGUd0BBJVEo4IL3BUr1iClzVBVzFNpmVRxCVfVjelqmKTmKeTYwpWn+WHisVcKXJ7oSgFWc9UcYXmSOtZrVYhCbWVnVAjVAVYJYUZTTlHJyql0Wk0YAhLYthF00KUINVpdYInkXwRlWFRMNwh32U4prQLK+UTovIKwtQpRA9PRMIVC1GZdWeyEtnoi5iXxv\/YN+9U8XlbAgJPaFOcA0dLz3lVvx\/JfbyTajea77w96phmzhyY0efEN+Cb2qJpknXOBuAgNPDrS+GH7s\/wDmAfhC6L\/rODbHf+1pfzKf\/tavTyLrynZjoqs+8z+9p9y9YEypz6PENyxrUctVHLPatMiFR7lMoLilo9qPVHuVnIVRyuJUL0B9UlZUqjilKmJjermKbR3MKXxNfKICE\/F9KTr15VzBNyBxFYnVAZVUPeqZltpntDyhPVnPQnuJT0W1ZWKqlPQe6GorcqEoHrCV5fF2ch3FTTkmEAPV2uulYJTradlJCGKvQpa5Z9rFhVAAUuQHPSNZ5SeLbwTDqiC4q8ek0mGlWyIywK9p0uwACyHUdKsFhapMFjboePgYJgPApymLhL7VqN+SsjQzHiU99wa6ePbbaMkXHPM8CdOPR4rX4BrWUHsaDZzDxEQR32W224w5CYPr6yN7eE9a1uHP7N3NOovPXuXTjJe2V66VwroqN62\/3BevF915Ax3OHZ5r1N7lWc2nGm31gAl3YhLuJQKpUTCKuRvlZUxKTpG+q2NJtkWaEuwHha+vUTuKetRiHK8JtOV0DWf0pcyVciVR1t63kZbUqwlajkWpJQCqkTaG5DKMQoyBMFyFQhGc1UITASxWhYgPZIUgJrA0ZMkWHcmKmUAiNV5dz1dOyYb7IK7KkIrWN6etCdSIElLco1YJy6gYpLSpBT4QcqLVxJS7qxKKXA6rOXAtHbvRJr4H9lnViqmuUV1UbhdLuVyfibR24gb0RpB0SDlUOI0RwHJtGuRWuWtpYqNUwMQNxUXCqmUOuC1+OgYGmeH56dkp2nUzaai6XxR\/dKY6\/IrPwt5PtkjJHO9cagj5tlraJHJOF5zNO\/RP7aefHh0ALX0fVPWuzHwwy8gg37PevU4sOpeWxdeqYe7W\/db5J5UoltFVq0xCvUdGiFTde6jtQbKCbYYaqOv1KXBK3ZwjiitbWW3xthC1TqV7rXCs8yjzKEaa2FWGiwSJWsrKwF4QXNTsITmqpS0Tc1UITLghOCrZAOCoQjEKpagAQpRMixBvcmOAEShOE70nUqlTTcZleRw+XdyGkAwq4l82CllEuJJsOKJSytnWeJT6g7pQUXfVPcsdRdwKJicQZsUIl0SqmVqbjAysZSLtAmKFEb022BbRFz14EwAq4RobYXjWd61xonge5bc9SqWdinHOxVwlIYXByTnBEbuKBi8PlNltSIGqUrkOlVjndlcJpqyE3hMDmgkiNfyVm4EmLgdHBbDDgNbHBVn6nXSccO+2U2tptO4XJJ4C\/cksS\/8AdKR4CfwyqekWKyYeoeIy+1Y+BKrUdODpmJs7hwKy\/Wn48o2odZI9bq3oGG0iR6yc2pMnTUJbBtJHaBquyeHPfIVZmVxtoJ8JXo+z6majTdxY0+Alec4xoGaBFjp1ALuvRyrNEt+o9wvwdzx\/cR2JW7hyNg4oYV3qkJAywWWZVNFp3oj3KLVkNotMStS58da2OMdJlIOprbDwyz8lnknW6oWpksVSxa7Roq5UKZc1DLU9louWIbqab5JRyCOQ0SNMKOSlOmiFUgBLkfEsMOpRS4LFO8j1HpIfJkpnDwd5lAo0pTAptaJuuHKzw6ZDFRxAWvqPM2Q6uLG5VbtCBpfipmNO1FSm7WCr03uNiFUYwnoTFKoq7Lo3hmwFNWpCVNe9kUgOFyosvmqlDdipMb\/Egf5CIyva642vgBidoVKvKFowjKdJoABBe9pqVQZ1GV1DtC6NtUhoEzAAPTZGgMcz9FWozL0qlCrBVatTimSalWNLqtHEdKXrVUuJVydFsj6cbSAp02b3vcbRbI03\/Et7k\/cmTOjz4ngvOdvYjlcSby1vMbHAB0ntMnqhehYarOB6n1h\/5Hwj1MeOMGN3a8w2s3nGx1\/W9BwbRBt84cEztkgON5QcHcakXnzW\/wDyy+QMW31tdDqepdN6KYkirUpHUNBmZzRe1t2dc3ixZ15MdHHoRsPWdTxPKDcAddbAEdoR+H+vQoRabUCnVDgHC4IBB6Doj01NOIq4gNMEgTEcSSTaO5Ue9a4Pz4hzt1NuQcJc4ZnfhgdR4p8qYdK1WylnMIWxLUJzAtJki4kCqOCdcxDNNVyLiTLVUhNGkjYbZ5cRIhu8p3OQcaTw1HOSJiBKWqSCehbethg18ttdL45zYiLqJn2rh01LnqWUpBJKK5kKAFdy+kTEoaZ4KFsQ3oWI9w+DtW7Vp7nNjrVKu1GHm8oB0Lli9x0GUfi793Z3oRqAWFz0aDrP6K4nQ6d+MogSXj3d6ihjqMSHi+lj8FzTKc3cZi+8NH64lED\/AKvtH\/aDr1nxVbLTp27QpTBe1WdjqeucADp0C5kZWiSde0k+8qubNqQBubPieJ\/XSp5DTqKe0KUeuPH4Kf8AVqQs6oIid+nHRcxUrBthGbpNm9J+C1fpBUy4asWu57mlgM3Ln80eaN7PRz0V2wcpc5rYxNSpiC4zIZVd+z6gKYp9y7Uljmh7CC1wDmuBsQRII7F5ttWKdCo1pEMwzWgjQxRaAR0LZ\/8ADHa\/KYXkHGXUDlH8t3OZ3c5v9IR8n8OudWA3JWtXlNEN4IRYw7lUSTa6dyBtbEclQc8mHHmt6zv7BJ7Atq2G6BcX6ZbTz1uSBEUxB++YLvcOwqsbupvhow4ZgbdnU5el4N37lA\/iVp6+UcvLqdX9q0Tx0+65ei7Nefkb\/wCfWH4yj1rsenNOH24+7ieMIGBdI7UXa555GXefNAwZtoPz4K8b0mztTHGxUVag5QTaWtudN\/ShY1xgyP1IV3u54j6rD\/enjexZ0670WxgLDTJBLLj7pOnYfMLdYjE5Wl3AErhNlY7kqzH7gecIPqmx+PYF1u18W0AAQS42i\/D3wjPyMU7NHMn6x8recprlI1SzbADgIUhhO5So20yJGiqWpjDQGQdVDqwFuHcp5HosGE6IFUncEevUvY\/BTiaw0Hhoq5ForRY+ZaESvXeBwQzicu9Aq4qUeQE97ipHO9bXeUFz1R1Qqki13iIGiAHoeZFwrJdfcn4g8szFYiPc0GJWKdhocPiXuN3GBr8EYuC11KtAAG+5Vjio3LONKdr4yW5bgb+n8kOjjSN09Z\/Ja51QK4qDeYWez0cr41zzJ3CAOARKWOc3Ra3lm8VblhxCNjR1tYzJuSZJJ3rW+leOdyWQW+ef6SAO2SO5HFccQtJtipyjso0Lmt7Br4v\/AAqbl0qR1m3Blw9UfVptZ7LWtHkFoPQnaJoYxhnm1IpO\/qjKexwHeVuvSisDQrQQZcOn6QLjMK+Hh0EZXtdP3XSCO5PK6onh7k7EKvKpc7WoQ45tPVGYSbwCbdqBV27QFRjQ6xBc5wIgRaNOkb1ttnofG4pzGPeBJa1zgOMAn3Lzl+KJcS4kkm5g3J1PWu\/2jtKi6lWaHfR1A2+vMI4cVwsM6Z7U4S2Fqy4cSRqDpD13eyKk4SoQdK1XzK87ZUArNuYi\/Zm+JXWbM2jlwlbKdalXLwuABeI3yoy76VOml2kecZd5fBK4R4A1Q8VUc1oaZ6JmY3ImEqDR0kb8ovfhKuddIoOMfrB\/UorXXbH1GcPt8UniObLdwmOMTbtiE7gaD6jmhjSYpBx3Q0anxVbkos2PncRqe5q22y2ueWSbNEX4NJjzHctJy7fteK2eytqUmA5i6fuuNk8soWMrpqYKO10AhaD\/AJgo\/WPsu+Cg+kVHi72XfBZ1cbzlY3qlXEStIfSCjxPsuVHbcpcT7JR0O25dW6EE11qP9dpbye4oTtuUjo7wVbhdtuXyqtSmGrPqDNTpvcAYlrHETAMW61GIbVa1zuRqiATJY6LCb9CfRHnOAE70ryvUhMpVHNDhTeQQCDkcRfphQ\/C1Lfs33+w74Imh2tUqSZUZ9\/khVcNVH0b\/AGHj3LNpYSph2B9YBjSYkOzCYmObdPlPstUQuB4qVoH7eoAwazQeBzA+SlLlPs9X6ailXBEgtI6IPvVxzt4EdH64rTN2wxrcoJi+69yeKF\/qzft+A9\/UuX3PxvMXSMwwN82vR+aq4MBjPfqHVGuq0LfSCIAabdXYqVNuEg2Im0zuRyn0NNycYwOcMwtGpF91uOikbQaJJe0AAWkTJv7tFy1Ss07j39FkFzx0wlyGnYt2jTIs9u+L7wJhampigSC0w5txxzTmnvPgtI2oAdP1uRmYtoNqY9opU46Lam13VG5CSJguBgy7s3fBIPxIbFib\/BIv2hP0feSUI4z7De7ijs+npOG2sx9NtRxyh082+7W+pVau16WgdHNgWO88I6F57RxrogU23ufWvGm\/9SqCq+8MN5GjlXOp09EO1mFp582IJiNWkzp0JAY1h0dJvoW7jB7lyNHFVQ2BTO7c7d\/lYMVWNhT\/AAu36799u5P3KOEdVy1M1AXzlGt2gkZSYkGN\/FMYTbtNtLk2h3ruMQTYgACN+niuOOIrn5h9k+aszFYlswzrs4i\/Ub6pXP5HF0WLxIPrMcDlBgtIlpOt90+Sap7Rc2iDyLi0E84uaGCT9XXxXMNxeJ\/hduR53k8etVdVxLp\/ZG\/BronqJhK59nxbp9ao9ziWQIabGwHWNZhdB6D067jUqAsyNp8nNi4EvpktjpaHdS4ZlHF\/wyI+yPetjs7FbSoAspOyNJu2KRBPEgidyXufwODcByqXrn8uN\/XJqho4z6472fBX7uKeFdCaipymq0Yw2M\/iN72\/BY\/CYo\/Ss6ec0W7Ai+tifCt2ainlFpfkWK\/iN9ofBR8jxW+q0f1DyAS97EcK27vViSY3m570NlIggzotW3C4m\/7Qd\/8A8otChXBnlWniDB7EvdxHCttUxrmWa9wAGYhriBqBNusKW42ofpKhH3nEHxWqqcpJzMY4EZSOUDSRIPG2gRsM0Wa+ico+rVuO7VK+r9Dh9txSxdTkyQ58BwaSH2AEE2N\/nMuEOntB5+e82zesdNRv3wUGl8ncCajKgJJuLjWRbN7kxRo4a0F8wBcEDSNS8WT5jiE\/aFQH\/qv11zusJ116wui9IPSEYrCjD0w\/lm5ACQMjntaWC+YmCRPq8FztHZgNOo0esXS02NiADMExv8EWjskGoSea2BFjFgyxA\/q7upLkdkcnW2bWLiXZZm8vIM9U2Urcj0ZqH6Rg680+AUqd37GmtbsmnwPaUdmyWfUJ7QsWLC51cgjdm0xqxo37ypZgae5rewGewrFiJbQo3DUQbsnp1PeTKucPQizPDwWLE5sL8hSFwyI1sPOVgoU3SJPSFKxBiU8PTbpPWb36pV2NYfnH2WkeKxYloCUqbZiZPUQUZrANXRxgf5UrEaNZobqbjpt5LHtZ0H2lixZjbGuG4D8XepfUvAcAN1j0LFiWxyqrp3Od3keCwU3f5MqFiXIt1T5MT86O3XwVfk7t3n+vcsWJ86Np+SvmNeokK5wgjgeBJv5qViXOmF8ivMAW0zH4GFenhw0EF0yZ+cSCbdClYnM6QXJt1BaR0tPC\/qkK1RzTJDOA9Y68dfCFCxXzpbL8iJlvVcA+cKtQRbmnpiPz3KFiN0fCKTSLAC\/Fzj4KXgk7h1D9eSxYrCr2RMxA0gH4qrTa0HdofisWJQLZ41HmP9ymlWducdSsWIpD\/Kqv1ne0sWLEbD\/\/2Q==)\n\n\n\nHi everyone The intention of this notebook is plot spaceX satellite trajectory from the given data.\n\n\n**Prerequiste: Knowledge of Ellipse**\n\n\nWill be adding write up soon....","fc6f779b":"The Calculate trajectory function cals trajectory...","958b18a2":"The Calculate Ellipse  Param functions calculate the Semi - Major and SemiMinor axis form Apogee and Eccentricity."}}