{"cell_type":{"e2634be6":"code","08734e98":"code","0980363c":"code","5a51e51d":"code","9c088cb0":"code","edea0225":"code","3ac80ac6":"code","847bd953":"code","ead2b04e":"code","273d738a":"code","fe9d989c":"code","fd9e393b":"code","2c345e8f":"code","76543aae":"code","74be83ec":"code","e6d16b8b":"code","9c49bdf3":"code","c2086015":"code","0192175c":"code","4a1c53e4":"markdown","2dfb36dc":"markdown","477bf0d2":"markdown","e97b06e2":"markdown","6c4c1903":"markdown","d4c0da36":"markdown","f88df576":"markdown","1b10ef53":"markdown"},"source":{"e2634be6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","08734e98":"df=pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","0980363c":"df.head()","5a51e51d":"df['Outcome'].value_counts() #has only zero and one","9c088cb0":"df.isnull().sum() #has no null value","edea0225":"X=df.iloc[:,0:8].values\ny=df.iloc[:,-1].values","3ac80ac6":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()","847bd953":"X=scaler.fit_transform(X)","ead2b04e":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2)","273d738a":"from sklearn.tree import DecisionTreeClassifier\nclf=DecisionTreeClassifier()","fe9d989c":"clf.fit(X_train,y_train)","fd9e393b":"y_pred=clf.predict(X_test)","2c345e8f":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)","76543aae":"param_dist={\n    \"criterion\":[\"gini\",\"entropy\"],\n    \"max_depth\":[1,2,3,4,5,6,7,8,None]\n}","74be83ec":"from sklearn.model_selection import GridSearchCV\ngrid=GridSearchCV(clf,param_grid=param_dist, cv=10, n_jobs=-1) #n_jobes is telling the algo to use all the cores of the processor to do the job","e6d16b8b":"grid.fit(X_train,y_train)","9c49bdf3":"grid.best_estimator_","c2086015":"grid.best_score_","0192175c":"grid.best_params_","4a1c53e4":"# Using GridSearchCV package to pass multiple parameter ","2dfb36dc":"# Checking accuracy","477bf0d2":"# Finding out the optimal hyper-parameter values for the given data:","e97b06e2":"# Data preprocessing:","6c4c1903":"# If confused about which hyper-parameter should be use... follow the notebook :- ","d4c0da36":"# Training the model :","f88df576":"# Importing the data","1b10ef53":"**Checking for null values in the data**"}}