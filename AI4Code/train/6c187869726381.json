{"cell_type":{"f4ac70f3":"code","af127423":"code","a133bc77":"code","ebd4c887":"code","842f7730":"code","cab68fdb":"code","bb51f946":"code","320cab75":"code","418207c5":"code","4921ffc1":"code","46a140ce":"code","d753c13e":"code","da6faf9a":"code","dfe6d4c3":"code","1ed5245a":"code","1bb0bdee":"code","bbe15775":"code","950ac04b":"code","651b51a3":"code","1dbe9eca":"code","c29bb011":"code","487b87cb":"code","907f473a":"code","67f66f32":"code","490ad836":"code","3a0b88fb":"code","d37f7d80":"code","cd49d099":"code","886ca1fd":"code","de43eb64":"code","0607a0e9":"code","9c07b79c":"code","8e4e472d":"code","d5c7ed2b":"code","4818e7f9":"code","cd7a0673":"code","6eb73f81":"code","ea5343c5":"code","1db85578":"code","3a9a99a4":"code","834614b7":"code","d6f81ed4":"code","c9cb4df3":"code","03bf8aee":"code","ca1d09cf":"markdown","b1562a9e":"markdown","b8997a32":"markdown","b438f04f":"markdown","37af486f":"markdown","3dc9d13c":"markdown","5c9e3720":"markdown","9d4ac6f9":"markdown","dfdf13c5":"markdown","a6c34a69":"markdown","f83a2880":"markdown","c091b453":"markdown","03906d86":"markdown","7b93fe78":"markdown","d85f8836":"markdown","992d020e":"markdown","7f8365cd":"markdown","98f35992":"markdown","f8514921":"markdown","0c7cf618":"markdown","dd69d379":"markdown","4f0f2bee":"markdown"},"source":{"f4ac70f3":"import pandas as pd\nimport numpy as np","af127423":"# pd.read function - \n\ndf = pd.read_csv(r\"..\/input\/test-file\/tested.csv\")","a133bc77":"df.head()","ebd4c887":"df.tail()","842f7730":"df.head(2) # shows 2 lines","cab68fdb":"# shape shows rows and columns of the dataset, here we have 891 row ( we call it observations)\n# and 12 columns ( we call it features\/variables in data science )\n\ndf.shape","bb51f946":"# dtypes - return data type of columns,\n# info() - we can get more information using info() than dtypes\n\nprint(df.dtypes)\nprint('\\n')\nprint(df.info())","320cab75":"# columns - checking column names \n# index - to check index of datasets\n\nprint(df.columns)\nprint('\\n')\nprint(df.index)","418207c5":"# describe() - information about the numerical columns\n\nprint(df.describe())","4921ffc1":"# Single columns - there are two methods to access the columns by . and by ['']\n\n# note if columns has space then . method won't work. And it confuses us if its column or method\n# hence we will be using [\" \"] methods throughout the file. Once you get confirtable with it you can use . method as you wish. \n\n# by . method - lets call it dot method\nprint(df.Survived)\n\n# by [\"\"] method lets call it name method\nprint(df['Survived'])","46a140ce":"# Aceesing multiple columns - by passing list of desired columns in the square brackets\n# Sequence of columns will be as you passed them in list of columns\n\ndf[['Survived','PassengerId']]","d753c13e":"# using loc method to get all rows and specific columns\n\nprint('1. all rows and col - survived ')\nprint(r\"Code :- df.loc[ : , 'Survived']\") \n\nprint(df.loc[ : , 'Survived']) # focus here\n\nprint('\\n2. all rows and column from Sex to Ticket ')\nprint(r\"Code :- df.loc[ : , 'Sex': 'Ticket']\")\n\nprint(df.loc[ : , 'Sex': 'Ticket'])  # focus here\n\nprint('\\n3. all rows and specific columns pass as list Pclass, Fare and Name')\nprint(r\"Code :- df.loc[ : , ['Pclass','Fare','Name']]\")\n\nprint(df.loc[ : , ['Pclass','Fare','Name']])  # focus here\n\n# as our dataset have the index in number from 0 to 890 we can use number in loc otherwise we need to provide the index name\n\nprint('\\n4. all rows till index named 100 ( 100th  included ) and col - survived ')\nprint(r\"Code :- df.loc[:100 , 'Survived']\") \n\nprint(df.loc[:100 , 'Survived'])   # focus here\n\nprint('\\n5. all rows from 10 to 100 and column from Sex to Ticket')\nprint(r\"Code :- df.loc[10 : 100, 'Sex': 'Ticket']\")\n\nprint(df.loc[10 : 100, 'Sex': 'Ticket'])  # focus here\n\nprint('\\n6. rows 12,100,890 and specific columns pass as list Pclass, Fare and Name')\nprint(r\"Code :- df.loc[[12,100,890] , ['Pclass','Fare','Name']]\")\n\nprint(df.loc[[12,100,890] ,columns = ['Pclass','Fare','Name']])  # focus here","da6faf9a":"# using loc method to get all rows and specific columns\n# note that iloc method excludes the last index passed\n\nprint('\\n1. all rows till index till 100 ( 100th  excluded ) and col - indexed at 1')\nprint(r\"Code :- df.iloc[:100 , 1]\") \n\nprint(df.iloc[:100 , 1])   # focus here\n\nprint('\\n2. all rows from 10 to 100 and column from index 4 to 10 excluded 10')\nprint(r\"Code :- df.iloc[10 : 100, 4 : 10 ]\")\n\nprint(df.iloc[10 : 100, 4 : 10 ])  # focus here\n\nprint('\\n3. rows 12,100,890 and specific columns pass as list of index for Pclass, Fare and Name')\nprint(r\"Code :- df.iloc[ [12,100,890] , [2,9,3] ]\")\n\nprint(df.iloc[[12,100,800],[2,9,3]])  # focus here","dfe6d4c3":"# getting all the rows of dataset with Sex as female \n\ndf[df['Sex'] == 'female'].head(10)","1ed5245a":"# getting specific columns with condition Sex == female \n\ndf[df['Sex'] == 'female'][[\"Fare\",'Age','Name']]","1bb0bdee":"# getting all the columns with age < 18  and sex as male to check get all info about the male kids onboard\n\ndf[(df['Age'] < 18) & (df['Sex'] =='male')].head()","bbe15775":"# we can access the elements in the columns by adding one more square bracket next to it.\n\n# we can eighter pass index in the next square bracket or\nprint(df['Age'][10:20])\n\n# we can pass condition. the condition can be related to other columns in df as well. \nprint(df['Age'][df['Sex'] =='male'])\n\n# other way is to use loc method\n# here after df.loc we used the condition and then pass the column name we want values from.\nprint(df.loc[df['Age'] > 18 , 'Fare']) ","950ac04b":"# quickly checking features we have  in data set with \ndf.columns ","651b51a3":"# adding the same value to all the rows of new columns \n# we have added the new column 'Adult' with 0 to all rows.\n\ndf['Adult'] = 0\n\ndf.head()","1dbe9eca":"# now we will correct the elements in Adult columns. \n# if the age of person is above 18 he is adult mean true and True in python is 1\n# using condition to filter the elements in columns with age \n\ndf.loc[df['Age'] > 18, 'Adult'] = 1\n\ndf.head()","c29bb011":"# rename() function - as argument use columns = {} dictionary as key old names and values new names\n\ndf.rename(columns = {'SibSp' : 'Siblings'})","487b87cb":"# unique - applied on columns to check unique elements in the column\ndf['Embarked'].unique()","907f473a":"# nunique - number of unique elements in the column\ndf['Sex'].nunique()","67f66f32":"# value_counts() - return count of each unique element in colums\ndf['Pclass'].value_counts()","490ad836":"# set_index(\"colname\") - set the column we want as index of dataset\n# inplace = True - to make changes to original dataset\ndf.set_index('PassengerId', inplace = True)\ndf.head()","3a0b88fb":"# reset_index() - reset the index to original form 0 - 890\ndf.reset_index(inplace = True)\ndf.head()","d37f7d80":"# sort_values(by = 'colname') - sort the dataset based on column\ndf.sort_values(by = 'Fare', ascending = True).head()","cd49d099":"# isnull() return True or False value of dataset , we use isnull().sum() to get sum of all nan values columns wise\ndf.isnull().sum()  ","886ca1fd":"# similarly we also have notnull()\ndf.notnull().sum()","de43eb64":"# dropna() - drop all the na values columns wise or row wise depending on aixs\n# here axis 0 is row and 1 is column, default axis is row\ndf.dropna()          # to drop all rows with even one nan value \ndf.dropna(axis = 1)  # to drop all columns with even only one nan values \ndf.dropna(how = 'all') # only drop the row if all the element in row are nan\ndf.dropna(how = 'any') # drop the row if any element is nan ( its default)","0607a0e9":"# fillna() - filling na values with specific value it  can be anything.\n\ndf['Embarked'].fillna(value = \"S\", inplace = True)\ndf.isna().sum() # checking if empbarked has null values anymore","9c07b79c":"# fillna() filling na values with some meaningful value. like mean , median , mode etc. \n\ndf['Age'].fillna(value = df['Age'].mean(), inplace = True)\ndf.isna().sum()  # checking if age column has nan value now","8e4e472d":"# grouping the dataset based on features and performing operations on them.\n\ngender = df.groupby('Sex') # created a group based on Gender\n\nprint(gender.sum()) # performating operation on group object\nprint('\\n')\nprint(gender.mean())","d5c7ed2b":"# another example of groupby with multilevel groups, with gender and adult or not. \n\ngroup_gender_adult = df.groupby(['Sex','Adult'])\n\ngroup_gender_adult.sum()\n","4818e7f9":"# map() - apply the function element wise\n\ndf['Age'].map(lambda x : x\/2)","cd7a0673":"# apply() - apply the function columns wise \n\ndf['Fare'].apply(lambda x : x+x*0.12)","6eb73f81":"# check if columns are numerical or not using applymap()\n\ndf.applymap(np.isreal).sum()","ea5343c5":"# making pivot table using pandas\n\npd.pivot_table(df,values = 'Age', index = 'Sex', columns = 'Survived', aggfunc= 'count')","1db85578":"df.columns","3a9a99a4":"# idxmax() - return the index of the maximum value in the column\nind = df['Fare'].idxmax()\nprint(ind)\nprint(df.loc[ind,'Fare'])","834614b7":"# idxmin() - return the index of the minimum value in the column\nind2 = df['Age'].idxmin()\nprint(ind2)\nprint(df.loc[ind2,'Age'])","d6f81ed4":"# nlargest() - return largest numbers\ndf['Age'].nlargest() # default return top 5 \ndf['Age'].nlargest(3) # with argument number of output","c9cb4df3":"# nsmallest() - return smallest numbers\ndf['Fare'].nsmallest() ","03bf8aee":"# To csv file\ndf.to_csv('Titanic_output.csv', index = False)\n\n# to excel file\ndf.to_excel('Titanic_output.xlsx', sheet_name = 'new')","ca1d09cf":"### Groupby function","b1562a9e":"<b>iloc method<\/b><br>\n\niloc method is similar to the loc method but instead of using name of index or columns it uses the index of it <br>\nPlease note our dataset already have the index as 0 to 890 hence the row index might be look similar to loc but <br>\nits different as in loc we used it as name not index here we are using it as index <br>","b8997a32":"### Quickly Checking columns and index","b438f04f":"### accessing the elements in the columns\n\nBased on conditions and index","37af486f":"### Accessing columns","3dc9d13c":"### Next we want to look at the shape of data, how many rows and columns we have in dataset","5c9e3720":"# Some of the Series function applied on the Dataframe columns  ","9d4ac6f9":"# Exporting the files in pandas\n\nProvide the full path to store at specific location otherwise it will be stored at the Current directory","dfdf13c5":"# Exploring some methods of dataframes","a6c34a69":"### To get information like mean min max standard deviation and percentiles. Use following function","f83a2880":"As a data scientist we will not be creating the datasets, instead we will be reading data from the different types of files. Hence we will practice the pandas library on actual dataset.","c091b453":"### There are two more ways to access the columns and are oftern used to get the chunk of dataset<br>\n\n<b>loc method<\/b>\n\niloc[] - index location, index based location<br>\nloc[] - location , name based location <br>\nLOC uses row and index sequence to access the cut of original dataframe<br>\nboth rows or columns can be range, single or list<br>","03906d86":"We won't be learning adding rows , as we will most probably adding the columns ( new features ) not rows ( observations). ","7b93fe78":"## Importig the numpy and pandas","d85f8836":"### renaming the column names ","992d020e":"# Conditional Slicing","7f8365cd":"# Adding columns to dataset","98f35992":"### We also want to know the data type of the columns right","f8514921":"# Accessing rows or columns of the dataset","0c7cf618":"# Pandas ","dd69d379":"Reading data from csv file . \n\n1. pd.read_csv(r\"filepath\")\n2. pandas can read many types of data including excel, sql, clipboard, table , text etc. \n3. use r\" \" to avoid the error or use double \/\/ as escape character ","4f0f2bee":"### head(*) and tail(*)<br>\n\nHead shows first five rows of dataset and tail last five rows<br>\nwe can use integer value as argument to show specific number of lines <br>\nWhy we use head and tail methods, to check the data columns and values and to get idea about dataset"}}