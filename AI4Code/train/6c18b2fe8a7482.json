{"cell_type":{"0553ec3a":"code","72afdb2a":"code","7af1ede3":"code","51e93318":"code","ff6a2606":"code","64bd1309":"code","e65bef61":"code","e511710e":"code","585ce690":"code","4462ca5c":"code","437e16ab":"code","8ec5bb42":"code","aff06a22":"code","7ef75fd9":"code","cf63e050":"code","29df0060":"code","f8524fdc":"code","e73cdbf8":"markdown","27ac5b69":"markdown","3d82d6a2":"markdown"},"source":{"0553ec3a":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport keras \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib as mpl","72afdb2a":"df = pd.read_csv('..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv')\ndf['date'] = pd.to_datetime(df['Timestamp'],unit='s').dt.date\n\ndf.head()","7af1ede3":"df.isnull().sum()","51e93318":"df.dropna()","ff6a2606":"# vamos a agrupar los datos por dia\ngrupo = df.groupby('date')\nprecio = grupo['Weighted_Price'].mean()\n\nprint(precio.shape,\"\\n\")\nprint(precio[:5])","64bd1309":"# deplegamos el precio.\nplt.plot(precio)","e65bef61":"# partimos los datos\ndias = 20\ndf_train= precio[:len(precio)-dias]\ndf_test= precio[len(precio)-dias:]\n\n# se crea el train set\ntrain = df_train.values\ntrain = np.reshape(train, (len(train), 1))\n\nX_train = train[0:len(train)-1]\ny_train = train[1:len(train)]\n\n# se crea el test set\ntest = df_test.values\ntest = np.reshape(test, (len(test), 1))\nX_test = train[0:len(test)-1]\ny_test = train[1:len(test)]\n\nX_train.shape","e511710e":"# convertir en tensor 3D\nX_train = np.reshape(X_train, (len(X_train), 1, 1))\n\n# convertir en tensor 3D\nX_test = np.reshape(X_test, (len(X_test), 1, 1))\n\nX_train.shape","585ce690":"def generate_time_series(batch_size, n_steps):\n    freq1, freq2, offsets1, offsets2 = np.random.rand(4, batch_size,1)\n    time = np.linspace(0, 1, n_steps)\n    series = 0.5 * np.sin((time - offsets1) * (freq1 * 10 + 10))\n    series += 0.2 * np.sin((time - offsets2) * (freq2 * 20 + 20))\n    series += 0.1 * (np.random.rand(batch_size, n_steps) - 0.5)\n    return series[...,np.newaxis].astype(np.float32)","4462ca5c":"n_steps = 30\nseries = generate_time_series(10000, n_steps + 30)\nX_train, y_train = series[:7000, :n_steps], series[:7000, -10:, 0]\nX_valid, y_valid = series[7000:9000, :n_steps], series[7000:9000, -10:, 0]\nX_test, y_test = series[9000:, :n_steps], series[9000:, -10:, 0]\n\n\nX_train.shape, y_train.shape","437e16ab":"def plot_series(series, y=None, y_pred=None, x_label=\"$t$\", y_label=\"$x(t)$\"):\n    plt.plot(series, \".-\")\n    if y is not None:\n        plt.plot(n_steps, y, \"bx\", markersize=10)\n    if y_pred is not None:\n        plt.plot(n_steps, y_pred, \"ro\")\n    plt.grid(True)\n    if x_label:\n        plt.xlabel(x_label, fontsize=16)\n    if y_label:\n        plt.ylabel(y_label, fontsize=16, rotation=0)\n    plt.hlines(0, 0, 100, linewidth=1)\n    plt.axis([0, n_steps + 1, -1, 1])\n\nfig, axes = plt.subplots(nrows=1, ncols=3, sharey=True, figsize=(12, 4))\n\nfor col in range(3):\n    plt.sca(axes[col])\n    plot_series(X_valid[col, :, 0], y_valid[col, 0], y_label=(\"$x(t)$\" if col==0 else None))\n\nplt.show()","8ec5bb42":"def plot_learning_curves(loss, val_loss):\n    plt.plot(np.arange(len(loss)) + 0.5, loss, \"b.-\", label=\"Training loss\")\n    plt.plot(np.arange(len(val_loss)) + 1, val_loss, \"r.-\", label=\"Validation loss\")\n    plt.gca().xaxis.set_major_locator(mpl.ticker.MaxNLocator(integer=True))\n    plt.axis([1, 20, 0, 0.05])\n    plt.legend(fontsize=14)\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Loss\")\n    plt.grid(True)","aff06a22":"model = keras.models.Sequential([\n    keras.layers.SimpleRNN(20, return_sequences = True, input_shape=[None,1]),\n    keras.layers.SimpleRNN(20, return_sequences = True),\n    keras.layers.SimpleRNN(1),\n    keras.layers.Dense(1)\n])\n\nmodel.compile(loss='mse', optimizer=\"adam\", metrics=['mae', 'mse'])\nhistory = model.fit(X_train, y_train, epochs=20, verbose=1,  validation_data=(X_valid, y_valid))","7ef75fd9":"plot_learning_curves(history.history[\"loss\"], history.history[\"val_loss\"])\n\nplt.show()","cf63e050":"y_pred = model.predict(X_valid)\nplot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])\nplt.show()","29df0060":"np.random.seed(43)\n\nseries = generate_time_series(1, n_steps + 30)\nX_new, Y_new = series[:, :n_steps], series[:, n_steps:]\nX = X_new\nfor step_ahead in range(10):\n    y_pred_one = model.predict(X[:, step_ahead:])[:, np.newaxis, :]\n    X = np.concatenate([X, y_pred_one], axis=1)\n\nY_pred = X[:, n_steps:]","f8524fdc":"y_pred = model.predict(X_valid)\nplot_series(X_valid[0, :, 0], y_valid[0, 0], y_pred[0, 0])\nplt.show()","e73cdbf8":"# # # ## (4) Realizar prediccion 30 dias despues del test set","27ac5b69":"# # # Modelo RNN","3d82d6a2":"# # # ## (3) Realizar prediccion del test set."}}