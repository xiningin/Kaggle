{"cell_type":{"a885d12e":"code","66763a79":"code","f096d701":"code","59ffe5e8":"code","e08885ab":"code","1b382d42":"code","0a6402c4":"code","9458c354":"code","8d860e51":"code","dca837f1":"code","47b15660":"code","83635fef":"code","b7e594f3":"code","09177b97":"code","fbd51ad9":"code","9a533636":"code","3e758ec7":"code","0df1aea7":"code","505aee16":"code","8af45ec0":"code","bf675397":"code","476340ee":"code","6e507da7":"code","7498d9b1":"code","6e9359a7":"code","4e1d8cd4":"code","c92128fc":"code","81c2ed95":"code","e0c6f905":"code","317644d7":"code","3d9eff6d":"code","996c6021":"code","eabb06ad":"code","761ac1b0":"code","b2adf966":"code","b0020e52":"code","7cf90a64":"code","2f6b3a8d":"code","f78d6d0b":"code","d1cb6619":"markdown","8e798ee2":"markdown","db4a6664":"markdown","76317369":"markdown","8c22e7cf":"markdown","6d8089a8":"markdown","3675814e":"markdown","c58ae333":"markdown","7ec6cbbc":"markdown","7d3a7f98":"markdown","3625ea99":"markdown","2bd5b1a6":"markdown","4fadadec":"markdown","6c938cd3":"markdown","e1288bde":"markdown","607c0eb4":"markdown","e500a0e1":"markdown"},"source":{"a885d12e":"import numpy as np \nimport pandas as pd \nimport folium\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.cluster import SpectralClustering, DBSCAN, KMeans\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.metrics.pairwise import euclidean_distances\n\nimport networkx as nx\nfrom community import best_partition\n\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\npy.init_notebook_mode(connected=True)","66763a79":"df = pd.read_csv('..\/input\/meretz_party.csv',  encoding='latin-1')\ndf.drop('Hebrew Location', axis=1, inplace=True)\ndf = df.head(130)","f096d701":"df.drop(['Location', 'Lat', 'Lng', 'voters', 'votes'], axis=1).sum().sort_values(ascending=False)","59ffe5e8":"df.drop(['Lat', 'Lng'], axis=1).groupby('Location').sum()['voters'].sort_values(ascending=False)","e08885ab":"locations = df['Location']\nlat = df.Lat\nlng = df.Lng\nsizes = df.sum(axis=1)\nnormalized_df = df.drop(['Location', 'Lat', 'Lng', 'voters', 'votes'], axis=1)\nnormalized_df = normalized_df[normalized_df.sum().sort_values(ascending=False).index]\nnormalized_df = normalized_df.truediv(normalized_df.sum(axis=1), axis=0)","1b382d42":"plt.figure(figsize=(7, 7))\npca_df = pd.DataFrame(PCA(n_components=2).fit_transform(normalized_df))\npca_df['locations'] = locations\npca_df['sizes'] = sizes\n\nplt.scatter(pca_df[0], pca_df[1], s=50, alpha=0.6)\nplt.xlabel('PC 1')\nplt.ylabel('PC 2')","0a6402c4":"for i in np.arange(1,12):\n    kmeans = KMeans(n_clusters=4).fit(normalized_df)\n    print(i, silhouette_score(normalized_df, kmeans.predict(normalized_df)))","9458c354":"kmeans = KMeans(n_clusters=4, random_state=42).fit(normalized_df)\n\npca_df = pd.DataFrame(PCA(n_components=2).fit_transform(normalized_df))\npca_df['label'] = kmeans.predict(normalized_df)\npca_df['locations'] = locations\npca_df['sizes'] = sizes","8d860e51":"trace1 = go.Bar(\n        x=normalized_df.columns,\n        y=kmeans.cluster_centers_[0],\n        name='Cluster 1'\n        )\n\ntrace2 = go.Bar(\n        x=normalized_df.columns,\n        y=kmeans.cluster_centers_[1],\n        name='Cluster 2'\n        )\n\ntrace3 = go.Bar(\n        x=normalized_df.columns,\n        y=kmeans.cluster_centers_[2],\n        name='Cluster 3'\n        )\n\ntrace4 = go.Bar(\n        x=normalized_df.columns,\n        y=kmeans.cluster_centers_[3],\n        name='Cluster 4'\n        )\n\nlayout = go.Layout(\n     title='<b>Cluster Centers<\/b>',\n     titlefont=dict(size = 30, color='#7f7f7f'),\n     hovermode='closest'\n)\n\nfig = go.Figure(data=[trace1, trace2, trace3, trace4], layout=layout)\npy.iplot(fig)","dca837f1":"clusters_dict ={\n    pca_df[pca_df.locations == 'Haifa'].label.values[0]: 'Urban',\n    pca_df[pca_df.locations == 'Gan Shmuel'].label.values[0]: 'Rural',\n    pca_df[pca_df.locations == 'Beit Jan'].label.values[0]: 'Druze',\n    pca_df[pca_df.locations == 'Furadis'].label.values[0]: 'Arab',\n}","47b15660":"traces = []\n\nfor label in sorted(pca_df.label.unique()):\n    traces.append(go.Scatter(\n            x=pca_df[pca_df.label == label][0],\n            y=pca_df[pca_df.label == label][1],\n            text=pca_df[pca_df.label == label]['locations'],\n            mode='markers',\n            hoverinfo='text',\n            name = clusters_dict[label],\n            marker=dict(\n                size=[np.sqrt(a) for a in (pca_df[pca_df.label == label]['sizes'])],\n                opacity=0.3,\n          )\n           )\n                     )\n    \nlayout = go.Layout(\n        title= 'Meretz voting clusters',\n        hovermode='closest',\n        xaxis=dict(\n            autorange=True,\n            showgrid=False,\n            zeroline=False,\n            showline=False,\n            ticks='',\n            showticklabels=False\n        ),\n        yaxis=dict(\n            autorange=True,\n            showgrid=False,\n            zeroline=False,\n            showline=False,\n            ticks='',\n            showticklabels=False\n        ))\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig)","83635fef":"pca_df['lat'] = lat\npca_df['lng'] = lng","b7e594f3":"df.head()","09177b97":"pca_df.head()","fbd51ad9":"ans = []\nfor i in range(len(df)):    \n    ans.append(list(df.loc[i, df.columns[3:-2]].transpose().sort_values().index[-5:]))\n    \npca_df['winners'] = ans\npca_df['winners'] = pca_df.winners.apply(lambda x: x[::-1])\n\npca_df['first'] = pca_df.winners.apply(lambda x: x[0])\npca_df['second'] = pca_df.winners.apply(lambda x: x[1])\npca_df['third'] = pca_df.winners.apply(lambda x: x[2])\npca_df['forth'] = pca_df.winners.apply(lambda x: x[3])","9a533636":"m = folium.Map(location=[32.13,34.8],zoom_start=9, tiles=\"CartoDB dark_matter\" )\n\ncolors = ['blue', 'crimson', 'green', 'orange']\nfor row in pca_df.iterrows():\n    folium.Circle(\n              location= (row[1].lat, row[1].lng),    \n              radius=0.7*row[1].sizes,\n              popup= '<b>' + row[1].locations + '<\/b><br>' + row[1]['first'] + '<br>' + row[1]['second'],\n              color=colors[row[1].label],\n              fill=True,\n              fill_color=colors[row[1].label]\n        ).add_to(m)","3e758ec7":"m","0df1aea7":"m.save('plot_data.html')\n","505aee16":"pca_df['cluster_name'] = pca_df.label.apply(lambda x: clusters_dict[x])\ndistances = pd.DataFrame(euclidean_distances(normalized_df, kmeans.cluster_centers_))\npca_df.loc[distances.idxmin()][['label', 'cluster_name', 'locations']]","8af45ec0":"df['label'] = pca_df['label']\ndf['cluster_name'] = pca_df['cluster_name']","bf675397":"df.sort_values(by='voters', ascending=False)[['Location', 'voters', 'cluster_name']].head(20)","476340ee":"df.groupby('cluster_name').sum()[['voters']].sort_values(by='voters', ascending=False)","6e507da7":"candidates = df.drop(['Location', 'Lat', 'Lng', 'votes', 'voters', 'label', 'cluster_name'], axis=1)\nsizes = candidates.sum(axis=0).values","7498d9b1":"sorted_df = candidates[candidates.corr()['Ilan Gilon'].sort_values().index.tolist()]","6e9359a7":"trace = go.Heatmap(z=sorted_df.corr(),\n                  x=sorted_df.columns,\n                  y=sorted_df.columns)\npy.iplot([trace])","4e1d8cd4":"candidates = candidates.transpose() \ncandidates = candidates.truediv(candidates.sum(axis=1), axis=0)","c92128fc":"kmeans = KMeans(n_clusters=3).fit(candidates)\n\npca_df = pd.DataFrame(PCA(n_components=2).fit_transform(candidates))\npca_df['label'] = kmeans.predict(candidates)\npca_df['name'] = candidates.index\npca_df['size'] = sizes","81c2ed95":"traces = []\n\nfor label in sorted(pca_df.label.unique()):\n    traces.append(go.Scatter(\n            x=pca_df[pca_df.label == label][0],\n            y=pca_df[pca_df.label == label][1],\n            text=pca_df[pca_df.label == label]['name'],\n            mode='markers',\n            hoverinfo='text',\n            marker=dict(\n                size=[np.sqrt(a) for a in (pca_df[pca_df.label == label]['size'])],\n                opacity=0.3,\n          )\n           )\n                     )\n    \nlayout = go.Layout(\n        title= 'Meretz candidates clusters',\n        hovermode='closest',\n        xaxis=dict(\n            autorange=True,\n            showgrid=False,\n            zeroline=False,\n            showline=False,\n            ticks='',\n            showticklabels=False\n        ),\n        yaxis=dict(\n            autorange=True,\n            showgrid=False,\n            zeroline=False,\n            showline=False,\n            ticks='',\n            showticklabels=False\n        ))\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig)","e0c6f905":"C=np.corrcoef(candidates.transpose(),rowvar=0)\nA=1*(C>0.8)\nG=nx.Graph(A)\nG=nx.relabel_nodes(G,dict(zip(G.nodes(),candidates.transpose().columns.values)))\ncommunities=best_partition(G)","317644d7":"community_colors={0:0,1:0.1,2:0.2,3:0.3,4:0.4,5:0.5, 6:0.6, 7:0.7, 8:0.8, 9:0.9}\nnode_coloring=[community_colors[communities[node]] for node in G.nodes()]\n\nnx.pos=nx.fruchterman_reingold_layout(G, dim=2, k=None, pos=None, fixed=None, iterations=5000, weight='weight', scale=1, center=None)\n\nnx.draw_networkx(G, cmap=plt.get_cmap('jet'), with_labels=True, node_color=node_coloring,font_size=10)\nfig = plt.gcf()\nfig.set_size_inches(18.5, 10.5)","3d9eff6d":"nx.draw_networkx(G, cmap=plt.get_cmap('jet'), with_labels=True, node_color=node_coloring,font_size=10)\nfig = plt.gcf()\nfig.set_size_inches(18.5, 10.5)\nplt.xlim([-0.4, 0.4])\nplt.ylim([-0.4, 0.4])","996c6021":"list(G.edges)","eabb06ad":"sorted_df.corr()['Halil Elakovi']['Isay Farij']","761ac1b0":"for edge in list(G.edges):\n    print('{ target: \"' +edge[0] + '\" ,source: \"' + edge[1] + '\", strength:  ' + str(sorted_df.corr()[edge[0]][edge[1]]) + '},')","b2adf966":"communities","b0020e52":"color=nx.get_node_attributes(G, 'labels')","7cf90a64":"color","2f6b3a8d":"dict(zip(G.nodes(),candidates.transpose().columns.values))","f78d6d0b":"C=np.corrcoef(candidates.transpose(),rowvar=0)\nA=1*(C>0.8)\nG=nx.Graph(A)\npos=nx.spring_layout(G)#, dim=2, k=None, pos=None, fixed=None, iterations=5000, weight='weight', scale=1, center=None)\nlabels = candidates.transpose().columns.values\nN = len(G.nodes)\nE = G.edges\nXv=[pos[k][0] for k in range(N)]\nYv=[pos[k][1] for k in range(N)]\nXed=[]\nYed=[]\nfor edge in E:\n    Xed+=[pos[edge[0]][0],pos[edge[1]][0], None]\n    Yed+=[pos[edge[0]][1],pos[edge[1]][1], None] \n    \ntrace3=go.Scatter(x=Xed,\n               y=Yed,\n               mode='lines',\n               line=dict(color='rgb(210,210,210)', width=1),\n               hoverinfo='none'\n               )\ntrace4=go.Scatter(x=Xv,\n               y=Yv,\n               mode='markers',\n               name='net',\n               marker=dict(symbol='circle-dot',\n                             size=[0.8*np.sqrt(x) for x in sizes], \n                             color= node_coloring,\n                            colorscale='Viridis',\n                             line=dict(color='rgb(50,50,50)', width=0.5)\n                             ),\n               text=labels,\n               hoverinfo='text'\n               )\n\n\nlayout = go.Layout(\n    title= 'Zoom in for a better view!',\n        hovermode='closest',\n        xaxis=dict(\n            autorange=True,\n            showgrid=False,\n            zeroline=False,\n            showline=False,\n            ticks='',\n            showticklabels=False\n        ),\n        yaxis=dict(\n            autorange=True,\n            showgrid=False,\n            zeroline=False,\n            showline=False,\n            ticks='',\n            showticklabels=False\n    )\n)\ndata1=[trace3, trace4]\nfig1=go.Figure(data=data1, layout=layout)\n# fig1['layout']['annotations'][0]['text']=annot\npy.iplot(fig1,)","d1cb6619":"# Not let's reverse the prroblem and cluster the candidates together","8e798ee2":"# Correlation Matrix between candidates","db4a6664":"# Let's zoom in\n","76317369":" Silhouette score and common sense both agree that 4 clusters is a reasonable number. This is especially useful since I've already decided to use 4 clusters as it fits my internal model regarding the demography of the voters, and I needed some justification. \n \n Now let's use the goold old K-Means clustering and see the different cluster-centers","8c22e7cf":"* It looks like 2-4 clusters would do. Let's see if there's a number of clusters that is significantly better than the others:","6d8089a8":"# Preprocessing\n\nWe will save the general columns for later and for now only keep those with the candidates data. Also, normalize each booth to account for different booth sizes (in terms of voters.","3675814e":"Since this data is geograhpical, let's plot it on the map:","c58ae333":"When we zoom in we can see the 3 groups:\n1. Ilan Gilon, Ali Salhalha and Maharta Baruch. These are the candidates that dominated the rural and druze areas. This is the socialist wing of the party.\n2. Avi Buskila, Mossi Raz and Gabi Lasky, as well as several other candidates,, the candidates who dominated the rural areas with their human rights messaging \n1.5. Avi Dabush is the connecting link between these 2 clusters. This makes sense since Dabush can be seen as some kind of a mix between the two groups, being vocal both on human rights issues as well as working a lot with more rural communities.\n3. The next cluster belong to the arab candidates, led by Isay Farij. It's interesting to see Nir Avishai-Cohen in this cluster as well\n2.5 Michal rozin, who came up 2nd in the primaries, is the connecting link between the urban camp and Farij's cluster. Both Farij and Rozen are generally popular and therefore less correlated with specific candiates and are not in the centers of the clusters","7ec6cbbc":"Let's plot each settlement in a 2-D plain where every settlement is represented by the 2 first principals of the number of votes each candidate got:","7d3a7f98":"# Meretz Party\nMeretz is a left-wing, social-democratic and green political party in Israel. It is also one of the 3 parties in Israel where the candidates are elected in open primaries, and the only party to publish the raw data.\n\nWhile Meretz is not expected to gain a large number of seats in the upcoming elections, the story of the primaries is still interesting.\n\nA few camps were competing against each other, with the most prominent being Ilan Gilon's socialist camp, and a camp led by several other Meretz members which, while being left-leaning economically in general, puts more emphasis on pregressive matters such as human rights, LGBTQ, the peace process with the Palestinians, etc. While representatives of both camps were elected, it was generally accepted that Gilon's camp won.\n\nIn this script I would explore the results and tell the story of Gilon's victory.","3625ea99":"# Load The Data","2bd5b1a6":"First, let's look at the final results:","4fadadec":"# Let's explore the clusters\n1. Cluster 1: Isay Farij is by far the most dominant figure in this cluster, as well as Michal Rozin, Halil Elakovi and Nir Avishai-Cohen, This cluster has mostly Arab villages\n2. Cluster 2: This seems like a mixture of cluster 3 and 4, where Ilan gilon is the most dominant figure, tofether with Maharth Baruch, Yaniv Sagi and Ali Salhalha. but this cluster has some representation of the competing camp, especially Michal Rozin. This is the urban cluster which is the 2nd largets cluster.\n3. Cluster 4 has the largerst number of votes, and pretty much has all the leading candidates. This cluster is the Urban cluster, where the human\\civil rights camp, led by candidates such as Mossi Raz and Gaby Lasky had a strong grip.\n4. Cluster number 4 Led by Ilan Gilon, Ali Salhalha, Mahart Baruch and Yaniv Sagi. as we would see, most of the settlements that are assigned to this cluster are Druze villages. This makes sense since Ali Salhalha is Druze. In the primaries, every voter chooses 4 candidates, so this voting pattern definitely relflects a decision made by a group of people to vote for the same candidates\n\nIlan Gilon's success was based on his dominance in the rural, druze and arab cluster together with his medium popularity in the urban cluster which was enough in order to keep the first place. It also seems that other candidates that were associated with Gilon were succesfull in voting booths where he was, even though their popularity in the urban cluster was much lower.","6c938cd3":"Let's find the most typical settlements with respect to each cluster (The one that is the closest to cluster center)","e1288bde":"# Candidates Graph\n\nThe next section is pretty much copy-paste from Itamar Mushkin's great [kernel](http:\/\/www.kaggle.com\/itamarmushkin\/partitioning-the-parties])\n\nWe will use the great networkx library, as well as graph clustering based on the[ Louvain Modularity](http:\/en.wikipedia.org\/wiki\/Louvain_Modularity\/) which is a great tool for network analysis.\n\nEvery node in the graph is a candidate, and there is an edge between two candidates if the correlation between them is bigger than a certain threshold (I chose 0.8). We then partition the nodes into communities based on the Louvain Modularity and plot the results","607c0eb4":"\"Maybe we can prettify the graph a little bit and use interactive plotting with Plotly to make thinks clearer","e500a0e1":"# Cluster The Voting Booths \n\nFirst; Let's project the data onto a 2-dimensional space for visualizaions sake:\n"}}