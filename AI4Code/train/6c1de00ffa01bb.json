{"cell_type":{"a4b9fecb":"code","b4245a1d":"code","411a7251":"code","ac20dc94":"code","483d0beb":"code","2366656a":"code","ae586b84":"code","aac32f4f":"code","96eed99c":"code","2a059a56":"code","19f82518":"code","427bd65d":"code","1cd799d2":"code","6d1869ab":"code","ef683035":"code","86ebefe8":"code","0fce13b3":"code","44a793dd":"code","0446484a":"code","9ce83134":"code","b2f69708":"code","32f7ec67":"code","321379e6":"code","ca1e2f77":"code","2baedc6a":"code","1a9872f7":"code","e79c5aaa":"code","ca95457d":"code","3dea69b9":"code","dbd0a9cd":"code","0817e185":"code","1012065e":"code","d90b8a73":"code","bbb7cc86":"code","2f77f213":"code","cde69e64":"code","a2b6e57e":"code","787fb83b":"code","9cbc7a4b":"code","9a7c896b":"code","7618d49a":"code","cda04e7f":"code","b80b2ee6":"code","cd4c5138":"code","1d8391e2":"code","4981633c":"code","b53e6814":"code","48b05d32":"code","73240686":"code","35c95bc4":"code","eaaf08ee":"code","4f041349":"code","f6bcd60d":"code","e2567561":"code","232ae50f":"code","1df93e12":"code","656e8a66":"code","78c3841c":"code","350e59bc":"code","5338810d":"code","a1620beb":"code","ee43f383":"code","5226323d":"code","cc3ec356":"code","8248f463":"code","03f1218f":"code","1a5bc3e9":"code","e3824a1a":"code","aa9086f9":"markdown","2adc1570":"markdown","87bb79c7":"markdown","5437be20":"markdown","fc9af3e3":"markdown","fc6505ea":"markdown","2fb7a619":"markdown","6d1d474b":"markdown","0ad5c9e5":"markdown","b02f6f0a":"markdown","d3f7c3ef":"markdown","67d352ee":"markdown","d81727c9":"markdown","276ca463":"markdown","40dc0b2a":"markdown","584d709d":"markdown","b20fea31":"markdown","f05202aa":"markdown","b1e00617":"markdown","bdaee1b2":"markdown","59bbbb01":"markdown","ad1988da":"markdown","3c8df882":"markdown","36a522b5":"markdown","215c9114":"markdown","4f89ab78":"markdown","45185e6f":"markdown","1bba48d7":"markdown","fda369b5":"markdown","fda9b382":"markdown","c1bc50fe":"markdown","b7a7ed13":"markdown","daeb9846":"markdown","4eaee65d":"markdown","46622874":"markdown","08987d02":"markdown","9b2ff99b":"markdown","9193ad82":"markdown","4c2b5378":"markdown","20f74500":"markdown","59276ea8":"markdown","39717252":"markdown","7041bbd0":"markdown","cc028562":"markdown"},"source":{"a4b9fecb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b4245a1d":"train = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/train.csv')\nstore = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\ntest = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/test.csv')","411a7251":"print(train.shape)\nprint(test.shape)\nprint(store.shape)","ac20dc94":"train.head()","483d0beb":"store.head()","2366656a":"test.head()","ae586b84":"train.dtypes","aac32f4f":"store.dtypes","96eed99c":"train.describe(include='object')","2a059a56":"train.describe()[['Sales','Customers']]","19f82518":"train.Store.nunique()","427bd65d":"train.DayOfWeek.value_counts().sort_values()","1cd799d2":"print(train.Open.value_counts() , '\\n',train.Promo.value_counts())","6d1869ab":"print(train.isna().sum())\nprint('-'*20)\nprint(store.isna().sum())\nprint('-'*20)\nprint(test.isna().sum())","ef683035":"store1 = train[train['Store']==1]\nstore1.head()","86ebefe8":"print(store1.shape)","0fce13b3":"store1['Date'] = pd.to_datetime(store1['Date'])\nprint(min(store1['Date']))\nprint(max(store1['Date']))\nstore1['Year'] = store1['Date'].dt.year\nstore1['Month'] = store1['Date'].dt.month","44a793dd":"store1.resample('1D',on='Date')['Sales'].sum().plot.line(figsize=(14,4))\nplt.show()","0446484a":"import seaborn as sns\nsns.distplot(store1.Sales , bins=10)\nplt.show()","9ce83134":"sns.distplot(train.Sales)\nplt.show()","b2f69708":"store.isna().sum()","32f7ec67":"store[store['Store']==1].T","321379e6":"store[~(store['Promo2']==0)].iloc[0]","ca1e2f77":"store['Promo2SinceWeek'] = store['Promo2SinceWeek'].fillna(0)\nstore['Promo2SinceYear'] = store['Promo2SinceYear'].fillna(store['Promo2SinceYear'].mode().iloc[0])\nstore['PromoInterval'] = store['PromoInterval'].fillna(store['PromoInterval'].mode().iloc[0])\n\nstore['CompetitionDistance'] = store['CompetitionDistance'].fillna(store['CompetitionDistance'].max())\nstore['CompetitionOpenSinceMonth'] = store['CompetitionOpenSinceMonth'].fillna(store['CompetitionOpenSinceMonth'].mode().iloc[0])\nstore['CompetitionOpenSinceYear'] = store['CompetitionOpenSinceYear'].fillna(store['CompetitionOpenSinceYear'].mode().iloc[0])","2baedc6a":"store.isna().sum()","1a9872f7":"df = train.merge(store , on='Store' , how='left')\nprint(train.shape)\nprint(store.shape)\nprint(df.shape)","e79c5aaa":"df.head(3)","ca95457d":"df.isna().sum()","3dea69b9":"df['Date'] = pd.to_datetime(df['Date'])","dbd0a9cd":"df['Day'] = df['Date'].dt.day\ndf['Month'] = df['Date'].dt.month\ndf['Year'] = df['Date'].dt.year\n\n# df['DayOfWeek'] = df['Date'].dt.strftime(%a)","0817e185":"df.dtypes","1012065e":"cat_cols = df.select_dtypes(include=['object']).columns\n\nfor i in cat_cols:\n    print(i)\n    print(df[i].value_counts())\n    print('-'*20)","d90b8a73":"df['StateHoliday'] = df['StateHoliday'].map({'0':0 , 0:0 , 'a':1 , 'b':2 , 'c':3})\ndf['StateHoliday'] = df['StateHoliday'].astype(int)","bbb7cc86":"df['StoreType'] = df['StoreType'].map({'a':1 , 'b':2 , 'c':3 , 'd':4})\ndf['StoreType'] = df['StoreType'].astype(int)","2f77f213":"df['Assortment'] = df['Assortment'].map({'a':1 , 'b':2 , 'c':3})\ndf['Assortment'] = df['Assortment'].astype(int)","cde69e64":"df['PromoInterval'] = df['PromoInterval'].map({'Jan,Apr,Jul,Oct':1 , 'Feb,May,Aug,Nov':2 , 'Mar,Jun,Sept,Dec':3})\ndf['PromoInterval'] = df['PromoInterval'].astype(int)","a2b6e57e":" df.dtypes","787fb83b":"X = df.drop(['Sales','Date','Customers'],1)\n#Transform Target Variable\ny = np.log(df['Sales']+1)\n\nfrom sklearn.model_selection import train_test_split\nX_train , X_val , y_train , y_val = train_test_split(X , y , test_size=0.30 , random_state = 1 )\n\nX_train.shape , X_val.shape , y_train.shape , y_val.shape","9cbc7a4b":"from sklearn.tree import DecisionTreeRegressor\n\ndt = DecisionTreeRegressor(max_depth=11)\ndt.fit(X_train , y_train)\ny_pred_dt = dt.predict(X_val)","9a7c896b":"y_pred_dt = np.exp(y_pred_dt)-1\ny_val = np.exp(y_val)-1","7618d49a":"from sklearn.metrics import r2_score , mean_squared_error\n\nprint(r2_score(y_val , y_pred_dt))\nprint(np.sqrt(mean_squared_error(y_val , y_pred_dt)))","cda04e7f":"def ToWeight(y):\n    w = np.zeros(y.shape, dtype=float)\n    ind = y != 0\n    w[ind] = 1.\/(y[ind]**2)\n    return w\n\ndef rmspe(y, yhat):\n    w = ToWeight(y)\n    rmspe = np.sqrt(np.mean( w * (y - yhat)**2 ))\n    return rmspe","b80b2ee6":"rmspe(y_val,y_pred_dt)","cd4c5138":"def get_rmspe_score(model, input_values, y_actual):\n    y_predicted=model.predict(input_values)\n    y_actual=np.exp(y_actual)-1\n    y_predicted=np.exp(y_predicted)-1\n    score=rmspe(y_actual, y_predicted)\n    return score\n","1d8391e2":"from sklearn.model_selection import RandomizedSearchCV\n\nparams = {\n    'max_depth' : list(range(5,25))\n}\n\nbase  = DecisionTreeRegressor()\n\nmodel_tuned = RandomizedSearchCV(base , params , return_train_score=True).fit(X_train , y_train)","4981633c":"model_cv_results = pd.DataFrame(model_tuned.cv_results_).sort_values(by='mean_test_score' , ascending=False)\nmodel_cv_results","b53e6814":"model_cv_results.set_index('param_max_depth')['mean_test_score'].plot(color='g',legend=True)\nmodel_cv_results.set_index('param_max_depth')['mean_train_score'].plot(color='r' , legend=True)\nplt.grid(True)\nplt.show()","48b05d32":"import xgboost as xgb","73240686":"dtrain = xgb.DMatrix(X_train,y_train)\ndvalidate = xgb.DMatrix(X_val[X_train.columns],y_val)\n\nparams = {\n    'eta' : 1,\n    'max_depth' : 5,\n    'objecive' : 'reg:linear'\n}\n\nmodel_xg = xgb.train(params, dtrain , 5)\n\ny_pred_xg = model_xg.predict(dvalidate)\n\ny_pred_xg = np.exp(y_pred_xg)-1\n\n\nrmspe(y_val , y_pred_xg)","35c95bc4":"plt.barh(X_train.columns , dt.feature_importances_)\nplt.show()","eaaf08ee":"test.shape","4f041349":"test.head()","f6bcd60d":"test_cust = train.groupby(['Store'])[['Customers']].mean().reset_index().astype(int)","e2567561":"test_1 = test.merge(test_cust , on='Store' , how='left')\ntest_1.head()","232ae50f":"test_m = test_1.merge(store , on='Store' , how='left')","1df93e12":"test_m.shape","656e8a66":"test_m['Open'].fillna(1,inplace=True)\n\ntest_m['Date'] = pd.to_datetime(test_m['Date'])\n\ntest_m['Day'] = test_m['Date'].dt.day\ntest_m['Month'] = test_m['Date'].dt.month\ntest_m['Year'] = test_m['Date'].dt.year\n\ntest_m.drop('Date',1,inplace=True)","78c3841c":"cat_cols = test_m.select_dtypes(include=['object']).columns\n\nfor i in cat_cols:\n    print(i)\n    print(test_m[i].value_counts())\n    print('-'*20)","350e59bc":"test_m['StateHoliday'] = test_m['StateHoliday'].map({'0':0 , 'a':1})\ntest_m['StateHoliday'] = test_m['StateHoliday'].astype(int)\n\ntest_m['StoreType'] = test_m['StoreType'].map({'a':1 , 'b':2 , 'c':3 , 'd':4})\ntest_m['StoreType'] = test_m['StoreType'].astype(int)\n\ntest_m['Assortment'] = test_m['Assortment'].map({'a':1 , 'b':2 , 'c':3})\ntest_m['Assortment'] = test_m['Assortment'].astype(int)\n\ntest_m['PromoInterval'] = test_m['PromoInterval'].map({'Jan,Apr,Jul,Oct':1 , 'Feb,May,Aug,Nov':2 , 'Mar,Jun,Sept,Dec':3})\ntest_m['PromoInterval'] = test_m['PromoInterval'].astype(int)","5338810d":"test_m.dtypes","a1620beb":"X_train.dtypes","ee43f383":"test_m.isna().sum()","5226323d":"test_pred = dt.predict(test_m[X_train.columns])\ntest_pred_inv = np.exp(test_pred)-1","cc3ec356":"test_pred_inv","8248f463":"submission = pd.DataFrame({'Id' : test_m['Id'] , 'Sales' : test_pred_inv})\nsubmission['Sales'] = submission['Sales'].astype(int)\nsubmission['Id']= submission.index\nsubmission['Id'] = submission['Id']+1\nsubmission.head()","03f1218f":"submission.shape","1a5bc3e9":"submission","e3824a1a":"submission.to_csv('sumbission.csv',index=False)","aa9086f9":"### Treating Missing Values","2adc1570":"Missing Values","87bb79c7":"Import Data","5437be20":"---","fc9af3e3":"### Process Test Data","fc6505ea":"---","2fb7a619":"![](http:\/\/)Reverse the Transformation","6d1d474b":"---","0ad5c9e5":"---","b02f6f0a":"### Train & Validate Split","d3f7c3ef":"---","67d352ee":"### Hyperparameter Tuning","d81727c9":"The sales are 0 for many records , which might be because the stores are closed","276ca463":"---","40dc0b2a":"---","584d709d":"\nFeature Importance","b20fea31":"### XGBOOST","f05202aa":"Average number of customers across all the stores every day is 633 <br>\nAverage sales across all the stores everyday is about 57738 units","b1e00617":"We can see that the model Underfits with the max_depth is <10 an=d Overfits when the max_depth is >12<br>\nSo we can choose max_depth as 11","bdaee1b2":"---","59bbbb01":"### Decision Tree","ad1988da":"---","3c8df882":"### Encoding","36a522b5":"### Prediction","215c9114":"Exploring a particular Store","4f89ab78":"### Submission","45185e6f":"### Categorical Cols","1bba48d7":"### Merging Data","fda369b5":"---","fda9b382":"Fill Promo2SinceWeek with 0  & <br>\nPromo2SinceYear & PromoInterval with mode <br>\nFill CompetitionDistance with max value to keep them far from the stores since we dont know about them<br>\nCompetitionOpenSinceMonth & CompetitionOpenSinceYear with mode","c1bc50fe":"ROOT MEAN SQUARE PERCENTAGE ERROR","b7a7ed13":"The Date column is of the object type , we need to convert it to DateTime ","daeb9846":"#### Store 1 Analysis","4eaee65d":"ROOT MEAN SQUARE PERCENTAGE ERROR","46622874":"Number of rows and columns","08987d02":"---","9b2ff99b":"We have a total of 1115 Stores all across","9193ad82":"RMSPE - Root Mean Square Percentage Error","4c2b5378":"The gaps in the above plot show that there are missing records for those dates","20f74500":"Import Libraries","59276ea8":"Applying Log Transformation of the Target Variable","39717252":"#### Customized Metric ","7041bbd0":"---","cc028562":"The data for Store 1 is available from 2013-01-01 to 2015-07-31"}}