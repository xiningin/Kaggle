{"cell_type":{"70d5d195":"code","13ed16d9":"code","350ad3e1":"code","eea7bedb":"code","39a665d8":"code","93909a3d":"code","009a4ae7":"code","da2a667c":"code","408d2b87":"code","bdbbd312":"code","ab42d142":"code","f9c81262":"markdown","6cc3f754":"markdown","8294436c":"markdown","35d5d2ab":"markdown","1509db83":"markdown","392b011d":"markdown"},"source":{"70d5d195":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","13ed16d9":"data = pd.read_csv('..\/input\/customer-analytics\/Train.csv')","350ad3e1":"data","eea7bedb":"data.info()","39a665d8":"def onehot_encode(df, column):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=column)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","93909a3d":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop ID column\n    df = df.drop('ID', axis=1)\n    \n    # Binary encoding\n    df['Gender'] = df['Gender'].replace({'F': 0, 'M': 1})\n    \n    # One-hot encoding\n    for column in ['Warehouse_block', 'Mode_of_Shipment', 'Product_importance']:\n        df = onehot_encode(df, column=column)\n    \n    # Split df into X and y\n    y = df['Reached.on.Time_Y.N']\n    X = df.drop('Reached.on.Time_Y.N', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","009a4ae7":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","da2a667c":"X_train","408d2b87":"y_train","bdbbd312":"models = {\n    \"                   Logistic Regression\": LogisticRegression(),\n    \"                   K-Nearest Neighbors\": KNeighborsClassifier(),\n    \"                         Decision Tree\": DecisionTreeClassifier(),\n    \"Support Vector Machine (Linear Kernel)\": LinearSVC(),\n    \"   Support Vector Machine (RBF Kernel)\": SVC(),\n    \"                        Neural Network\": MLPClassifier(),\n    \"                         Random Forest\": RandomForestClassifier(),\n    \"                     Gradient Boosting\": GradientBoostingClassifier(),\n    \"                               XGBoost\": XGBClassifier(eval_metric='mlogloss'),\n    \"                              LightGBM\": LGBMClassifier(),\n    \"                              CatBoost\": CatBoostClassifier(verbose=0)\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")","ab42d142":"for name, model in models.items():\n    print(name + \": {:.2f}%\".format(model.score(X_test, y_test) * 100))","f9c81262":"# Training","6cc3f754":"# Preprocessing","8294436c":"# Getting Started","35d5d2ab":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/pGMlafN2_m8","1509db83":"# Results","392b011d":"# Task for Today  \n\n***\n\n## Shipment Arrival Prediction  \n\nGiven *data about online shipments*, let's try to predict whether a given shipment will **arrive on time**.\n\nWe will use a variety of classification models to make our predictions."}}