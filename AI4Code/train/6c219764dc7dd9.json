{"cell_type":{"c9839923":"code","872de123":"code","1538b877":"code","a006eb1d":"code","b7d86aaf":"code","b26227c0":"code","14704add":"code","45a98cc4":"code","651da053":"code","0f1a5e1a":"code","bd67c562":"code","9c57259d":"code","cc237bb0":"code","2bc5f403":"code","284c29e2":"code","5725be8b":"code","7c0fc4c2":"code","ff51d2d5":"code","ea52ec22":"code","a8824e98":"code","ff268485":"code","3a8a86fe":"code","68fe5de7":"code","e64a951a":"code","22877d0d":"code","d05f84d6":"code","40d1d1d9":"code","415dce25":"code","f6c29362":"code","46b6f777":"code","adb8e6a3":"code","df31c333":"code","3fb5a0af":"code","9edf3904":"code","d6a9a698":"code","43b29a12":"code","0ae0b0aa":"code","ba504e9f":"code","06a2863e":"code","46624d00":"code","e36e5537":"code","30664811":"code","5587144a":"code","c7375d10":"code","e2d39858":"code","72f627fa":"code","4f40c6f5":"code","65d0f927":"code","9642b286":"code","cd5c0913":"code","d0b06c52":"code","47771c5e":"code","c5426046":"code","74cd1941":"code","e153919f":"code","edc32fd4":"code","e3a72cfc":"code","65c5aa0c":"code","246d43f3":"code","79c8d24c":"code","ded0a1cc":"code","d64e5850":"markdown","b774425e":"markdown","c8b39733":"markdown","41ddef5c":"markdown","b518a79f":"markdown","7c4a2e3a":"markdown","0c76f425":"markdown","5f2463b4":"markdown","6479967f":"markdown"},"source":{"c9839923":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","872de123":"train_df=pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest_df=pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')","1538b877":"train_df1=train_df.copy()\ntest_df1=test_df.copy()","a006eb1d":"train_df.shape","b7d86aaf":"test_df.shape","b26227c0":"train_df","14704add":"test_df","45a98cc4":"train_df.isnull().sum()","651da053":"(train_df.isnull().sum()\/train_df.shape[0])*100","0f1a5e1a":"test_df.isnull().sum()","bd67c562":"(test_df.isnull().sum()\/test_df.shape[0])*100","9c57259d":"train_df.fillna(value=train_df.mean(),inplace=True)\ntest_df.fillna(value=test_df.mean(),inplace=True)","cc237bb0":"train_df.isnull().sum()","2bc5f403":"test_df.isnull().sum()","284c29e2":"train_df.drop('id',axis=1,inplace=True)\ntrain_df","5725be8b":"test_df.drop('id',axis=1,inplace=True)\ntest_df","7c0fc4c2":"from sklearn.feature_selection import SelectKBest","ff51d2d5":"X=train_df.drop('claim',axis=1)\nY=train_df['claim']","ea52ec22":"imp_features=SelectKBest()\nimp_features.fit(X,Y)","a8824e98":"imp_features.scores_.shape","ff268485":"features=pd.DataFrame(imp_features.scores_,X.columns)\nfeatures.columns=['feature_score']\nfeatures","3a8a86fe":"features=features.sort_values(by=['feature_score'], ascending=False)\nfeatures","68fe5de7":"top_features=features[features['feature_score']>15]\ntop_features","e64a951a":"len(top_features)","22877d0d":"list_features=top_features.index\nprint(list_features)","d05f84d6":"len(list_features)","40d1d1d9":"train_df=train_df[list_features]\ntrain_df=pd.concat([train_df,train_df1['claim']],axis=1)\ntrain_df","415dce25":"train_df.shape","f6c29362":"test_df=test_df[list_features]\ntest_df","46b6f777":"test_df.shape","adb8e6a3":"test1_df=test_df.copy()","df31c333":"train1_df=train_df.copy()","3fb5a0af":"from sklearn.preprocessing import StandardScaler\nss=StandardScaler()","9edf3904":"scaled_train=ss.fit_transform(train_df.drop('claim',axis=1))\nscaled_train","d6a9a698":"train_df_s=pd.DataFrame(scaled_train,columns=test_df.columns)\ntrain_df_s","43b29a12":"train_df=pd.concat([train_df_s,train_df1['claim']],axis=1)\ntrain_df","0ae0b0aa":"scaled_test=ss.transform(test_df)\nscaled_test","ba504e9f":"test_df=pd.DataFrame(scaled_test,columns=test_df.columns)\ntest_df","06a2863e":"X=train_df.drop('claim',axis=1)\nY=train_df['claim']","46624d00":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=.2,random_state=42)","e36e5537":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,f1_score,roc_auc_score\nlr=LogisticRegression()\nlr.fit(X_train,Y_train)","30664811":"y_pred_lr=lr.predict(X_test)","5587144a":"print('accuracy_score:{}'.format(accuracy_score(Y_test,y_pred_lr)))\nprint('-'*75)\nprint('f1_score:{}'.format(f1_score(Y_test,y_pred_lr)))\nprint('-'*75)\nprint('roc_auc_score:{}'.format(roc_auc_score(Y_test,y_pred_lr)))","c7375d10":"x=train1_df.drop('claim',axis=1)\ny=train1_df['claim']","e2d39858":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.2,random_state=1)","72f627fa":"from sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier()\ndt.fit(x_train,y_train)","4f40c6f5":"y_pred_dt=dt.predict(x_test)","65d0f927":"print('accuracy_score:{}'.format(accuracy_score(y_test,y_pred_dt)))\nprint('-'*75)\nprint('f1_score:{}'.format(f1_score(y_test,y_pred_dt)))\nprint('-'*75)\nprint('roc_auc_score:{}'.format(roc_auc_score(y_test,y_pred_dt)))","9642b286":"from sklearn.model_selection import RandomizedSearchCV\n\nmax_features=['auto', 'sqrt','log2']\n\nmax_depth = [int(x) for x in np.linspace(10, 1000,10)]\n\nmin_samples_split = [2, 5, 10,14]\n\nmin_samples_leaf = [1, 2, 4,6,8]\n\nrandom_grid={'max_features':max_features,\n            'max_depth':max_depth,\n            'min_samples_split':min_samples_split,\n            'min_samples_leaf':min_samples_leaf,\n            'criterion':['gini','entropy']}","cd5c0913":"print(random_grid)","d0b06c52":"dt_randomized=RandomizedSearchCV(estimator=dt,param_distributions=random_grid,n_iter=100,cv=3,verbose=2,\n                               random_state=100,n_jobs=-1)","47771c5e":"dt_randomized.fit(x_train,y_train)","c5426046":"dt_randomized.best_params_","74cd1941":"dt_final=dt_randomized.best_estimator_","e153919f":"y_pred_dt_tuned=dt_final.predict(x_test)","edc32fd4":"print('accuracy_score:{}'.format(accuracy_score(y_test,y_pred_dt_tuned)))\nprint('-'*75)\nprint('f1_score:{}'.format(f1_score(y_test,y_pred_dt_tuned)))\nprint('-'*75)\nprint('roc_auc_score:{}'.format(roc_auc_score(y_test,y_pred_dt_tuned)))","e3a72cfc":"from sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier()\nrf.fit(x_train,y_train)","65c5aa0c":"y_pred_rf=rf.predict(x_test)\n","246d43f3":"print('accuracy_score:{}'.format(accuracy_score(y_test,y_pred_rf)))\nprint('-'*75)\nprint('f1_score:{}'.format(f1_score(y_test,y_pred_rf)))\nprint('-'*75)\nprint('roc_auc_score:{}'.format(roc_auc_score(y_test,y_pred_rf)))","79c8d24c":"predictions=rf.predict(test_df)","ded0a1cc":"output = pd.DataFrame({'id': test_df1.id,'claim':predictions})\noutput.to_csv('submission_tabular_sept.csv', index=False)\nprint(\"Your submission was successfully saved!\")","d64e5850":"## Hyperparameter Tuning","b774425e":"# Model Building","c8b39733":"# Importing Data","41ddef5c":"### Logistic Regression","b518a79f":"# Standardization","7c4a2e3a":"# Feature Selection.","0c76f425":"### Random Forest Classifier","5f2463b4":"### Checking for null values","6479967f":"### Decision Tree Classifier"}}