{"cell_type":{"9a4a2d85":"code","f5f16d4e":"code","2aceea29":"code","22f5026c":"code","f1a734a6":"markdown","1d9b1867":"markdown","e32fe03b":"markdown","5b411f69":"markdown"},"source":{"9a4a2d85":"import numpy as np \nfrom glob import glob\nimport plotly.express as px\nimport pydicom\n\ndef read_dicom_files(cohort, case, mpMRI):\n    PATH = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification'\n    files_glob = f'{PATH}\/{cohort}\/{case}\/{mpMRI}\/*.dcm'\n    sorted_files = sorted(glob(files_glob),key=lambda f: int(f.split('Image-')[1].split('.')[0]))\n    return [pydicom.read_file(f) for f in sorted_files]","f5f16d4e":"def cropped_images(images):\n    min=np.array(np.nonzero(images)).min(axis=1)\n    max=np.array(np.nonzero(images)).max(axis=1)+1 # --> Thank you @lai321!\n    return images[min[0]:max[0],min[1]:max[1],min[2]:max[2]]","2aceea29":"cuore = np.array(1).reshape(1,1,1)\npadded_array = np.pad(cuore,1)\nassert cropped_images(padded_array) == cuore","22f5026c":"cohort = 'train'\ncase = '00000'\nmpMRI = 'FLAIR'\ndicom_files = read_dicom_files(cohort, case, mpMRI)\n\nimages = np.array([s.pixel_array for s in dicom_files])\nimages = cropped_images(images)\n\nfig = px.imshow(images, animation_frame=0, binary_string=True, labels=dict(animation_frame=\"scan\"), height=600)\nfig.show()","f1a734a6":"The scans has too many empty spaces, so ```cropped_images``` is simple function to crop all superfluous area (pixels with 0 value near the edge) in 3D images","1d9b1867":"# BTRC: A simple tool to crop 3D images","e32fe03b":"### Example","5b411f69":"### Test"}}