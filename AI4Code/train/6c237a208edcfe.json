{"cell_type":{"7de93fc3":"code","e2b8a7c1":"code","48594144":"code","d112a519":"code","723faea3":"code","1850a19b":"code","baf8ca76":"code","389520ea":"code","af20cc37":"code","0214952a":"code","cfe911d2":"code","dacf1c7c":"code","df2bdec4":"code","116e7cf6":"code","a3eab37d":"code","1d1e60c0":"code","a47d2cc0":"code","25f7255b":"code","23bfcec5":"code","46db149c":"code","2e6517df":"code","db65d195":"code","3897fe8d":"code","d4fd4c5f":"code","43e44be4":"code","402572a0":"code","c334b94c":"code","2eca8284":"code","8da18361":"code","8d86df44":"code","c147e9b7":"code","f7d61e00":"code","f424da92":"code","c6a56aea":"code","f5a5afe2":"code","a74f5109":"code","b923099b":"code","ed088b4f":"code","c8f53e5c":"code","056e4f30":"markdown","0c2a8d69":"markdown","d3b3bc52":"markdown","7412f553":"markdown","785cd587":"markdown","19e3d68d":"markdown","48868895":"markdown","430199b2":"markdown","7bd0c00a":"markdown","7332f86d":"markdown","9ef31426":"markdown","43667711":"markdown","59b0400e":"markdown","1d04d27f":"markdown","cb9e1350":"markdown","4f87c34e":"markdown","aafc2277":"markdown","ae86f12f":"markdown","5b772d6f":"markdown"},"source":{"7de93fc3":"!pip install dython","e2b8a7c1":"import pandas as pd\nimport numpy as np\nfrom zipfile import ZipFile\nimport os\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom dython import nominal\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor","48594144":"audi = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/audi.csv')\nbmw = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/bmw.csv')\nford = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/ford.csv')\nhyundi = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/hyundi.csv')\nmercedes = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/merc.csv')\nskoda = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/skoda.csv')\ntoyota = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/toyota.csv')\nvw = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/vw.csv')\n\ncars = {\n    'Audi':audi,\n    'BMW':bmw,\n    'Ford':ford,\n    'Hyundi':hyundi,\n    'Mercedes':mercedes,\n    'Skoda':skoda,\n    'Toyota':toyota,\n    'VW':vw\n}","d112a519":"for k, v in cars.items():\n  print('\\n', k, '\\n\\n')\n  display(v)","723faea3":"for k, v in cars.items():\n  print('\\n', k, '\\n\\n')\n  display(v.describe())","1850a19b":"for k, v in cars.items():\n  print('\\n', k, '\\n\\n')\n  display(v.isnull().sum())","baf8ca76":"for k, v in cars.items():\n  print('\\n', k, '\\n\\n')\n  display(v.dtypes)","389520ea":"for k, v in cars.items():\n    print('\\n', k)\n    display(v.nunique())","af20cc37":"def difference (list1, list2):\n   list_dif = [i for i in list1 + list2 if i not in list1 or i not in list2]\n   return list_dif","0214952a":"# Check columns names\ncolumns=set([])\ndif_cols=set([])\n\nfor k, v in cars.items():\n    print('\\n', k)\n    ref_columns = set(v.columns)\n    if not columns:\n      columns = ref_columns.copy()\n    else:\n      columns = set(set(columns).intersection(ref_columns))\n      dif_cols = dif_cols.union(difference(list(columns), list(ref_columns)))\n    display(v.columns)\n\nprint('\\nSame column names', columns)\nprint('\\nSame column names', dif_cols)","cfe911d2":"cars['Hyundi'] = cars['Hyundi'].rename(columns={'tax(\u00a3)': 'tax'})","dacf1c7c":"cars['Hyundi'] ","df2bdec4":"for k, v in cars.items():\n  v.insert(loc=0, column='Brand', value=str(k))","116e7cf6":"train = pd.concat(frame for frame in [*cars.values()]).reset_index(drop=True)","a3eab37d":"train","1d1e60c0":"sns.set_theme(style=\"darkgrid\")","a47d2cc0":"g = sns.displot(\n    train, \n    x='price', \n    row='transmission',\n    height=3,\n    aspect=6,\n    stat='density'\n)\n\ng.fig.suptitle('Price per transmission', fontsize=20)\nplt.xlabel(\"Price\")\n\ng.fig.subplots_adjust(top=0.92)\n\nplt.show()","25f7255b":"g = sns.displot(\n    train, \n    x='price', \n    row='fuelType',\n    height=3,\n    aspect=6,\n    stat='density'\n)\n\ng.fig.suptitle('Price per Fuel Type', fontsize=20)\nplt.xlabel(\"Price\")\n\ng.fig.subplots_adjust(top=0.92)\n\nplt.show()\n\n","23bfcec5":"g = sns.displot(\n    train, \n    x='price', \n    row='Brand',\n    height=3,\n    aspect=6,\n    stat=\"density\"\n)\n\ng.fig.suptitle('Price per Brand', fontsize=20)\nplt.xlabel(\"Price\")\n\ng.fig.subplots_adjust(top=0.92)\n\nplt.show()","46db149c":"g = sns.displot(\n    train, \n    x='price', \n    row='engineSize',\n    height=3,\n    aspect=6,\n    stat=\"density\"\n)\n\ng.fig.suptitle('Price per engine', fontsize=20)\nplt.xlabel(\"Price\")\n\ng.fig.subplots_adjust(top=0.97)\n\nplt.show()","2e6517df":"fig, ax = plt.subplots(2, 2, figsize=(20, 20))\n\nyear_g = sns.regplot(\n    data=train,\n    x=\"year\", \n    y=\"price\",\n    order=2, \n    line_kws={\"color\": \"red\"},\n    ax=ax[0,0])\n\ntax_g = sns.regplot(\n    data=train,\n    x=\"tax\", \n    y=\"price\",\n    order=1, \n    line_kws={\"color\": \"red\"},\n    ax=ax[0,1])\n\nmpg_g = sns.regplot(\n    data=train,\n    x=\"mpg\", \n    y=\"price\",\n    order=4, \n    line_kws={\"color\": \"red\"},\n    ax=ax[1,0])\n\nmileage_g = sns.regplot(\n    data=train,\n    x=\"mileage\", \n    y=\"price\",\n    order=3, \n    line_kws={\"color\": \"red\"},\n    ax=ax[1,1])\n\nax[0,0].set_xlim(1990, 2021)\nax[0,0].set_ylim(-1000, 200000)\n\nax[0,1].set_xlim(-10, 300)\nax[0,1].set_ylim(-1000, 200000)\n\nax[1,0].set_xlim(-10, 300)\nax[1,0].set_ylim(-1000, 200000)\n\nax[1,1].set_xlim(-100, 400000)\nax[1,1].set_ylim(-1000, 200000)\n\nplt.show()","db65d195":"nominal.associations(train, nominal_columns=['Brand', 'model', 'transmission', 'fuelType', 'engineSize'], figsize=(20,20))","3897fe8d":"train[\"Brand_model\"] = train[\"Brand\"] + '_' + train[\"model\"]\ntrain = train.drop(['Brand', 'model'], axis=1)\ntrain","d4fd4c5f":"X = train.drop(['price'], axis=1)\ny = train['price']\nX","43e44be4":"X = pd.get_dummies(X, columns=['Brand_model', 'transmission', 'fuelType'])\nX","402572a0":"sc = StandardScaler()\nX.iloc[:, 0:5] = sc.fit_transform(X.iloc[:, 0:5])\nX","c334b94c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","2eca8284":"X_train","8da18361":"regressor = LinearRegression()\nregressor.fit(X_train, y_train)","8d86df44":"y_pred = regressor.predict(X_test)","c147e9b7":"print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.values.reshape(len(y_test), 1)), 1)[:100])","f7d61e00":"rmsd = (np.sqrt(np.square(y_pred - y_test.values))).mean(axis=0)\nprint('Root mean square deviation:', rmsd)","f424da92":"rs = np.sqrt(np.square(y_pred - y_test.values))\nprint(rs[rs.argsort()[-3:][::-1]])","c6a56aea":"y_pred[rs.argsort()[-1:]] = y_pred.mean()","f5a5afe2":"rmsd = (np.sqrt(np.square(y_pred - y_test.values))).mean(axis=0)\nprint('Root mean square deviation:', rmsd)","a74f5109":"rfr = RandomForestRegressor(n_estimators=100, random_state=0)\nrfr.fit(X_train, y_train)","b923099b":"y_pred_rfr = rfr.predict(X_test)","ed088b4f":"print(np.concatenate((y_pred_rfr.reshape(len(y_pred_rfr), 1), y_test.values.reshape(len(y_test), 1)), 1)[:100])","c8f53e5c":"rmsd_random_forest = (np.sqrt(np.square(y_pred_rfr - y_test.values))).mean(axis=0)\nprint('Root mean square deviation:', rmsd_random_forest)","056e4f30":"Let's try random forest regression","0c2a8d69":"## Dataset visualization","d3b3bc52":"### Regression plots. Price vs continous variables.","7412f553":"### Price vs Categorical (Distributions)","785cd587":"## Datasets information","19e3d68d":"Around 10k... that's too much","48868895":"Joining dataframes with a new column named brand","430199b2":"### Correlation","7bd0c00a":"## Predictions...","7332f86d":"We can substitute this prediction with mean ","9ef31426":"### Imports...","43667711":"We got problems with one prediction","59b0400e":"## Datasets processing","1d04d27f":"### Some preprocessing:\n- Brand and model together\n- Dummy variables\n- Standarization","cb9e1350":"### Splitting train set and training the model","4f87c34e":"Much better! :)","aafc2277":"Renaming Hyundi tax(\u00a3) column to tax","ae86f12f":"<a href=\"https:\/\/colab.research.google.com\/github\/GZabalaG\/Datasets_analysis\/blob\/main\/Car_price_prediction.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","5b772d6f":"# Cars"}}