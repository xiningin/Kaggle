{"cell_type":{"8cbfcc5f":"code","caeea92d":"code","fcf2c388":"code","82ecfb31":"code","edb3877e":"code","3d1a8a04":"code","dd87e096":"code","55cd558b":"code","2ce2b9d6":"code","c8a58fdc":"code","bd4ab1a5":"code","a11201ed":"code","372c2b3b":"code","9b9a9e28":"code","2f35ad5e":"code","d91b3dfc":"code","b896b654":"code","5b13640b":"code","588bf8fb":"code","3946a0d1":"markdown","485a9967":"markdown"},"source":{"8cbfcc5f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","caeea92d":"# ==================\n# Library\n# ==================\nimport warnings\nwarnings.simplefilter('ignore')\nimport math\nimport pandas as pd\nimport numpy as np\nimport lightgbm as lgb\nimport time\nimport datetime\nimport gc\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import StratifiedKFold, KFold,GroupKFold\nfrom contextlib import contextmanager\nimport logging\nfrom tqdm import tqdm_notebook as tqdm\nfrom sklearn.metrics import  mean_squared_error\nimport sys\nimport time\nimport feather\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nimport pickle\nfrom functools import partial\nimport scipy as sp\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras import initializers, regularizers, constraints\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.preprocessing.text import text_to_word_sequence\nfrom tensorflow.keras.callbacks import *\nfrom tensorflow.keras.layers import Dense, Input,Embedding, Dropout,Flatten,PReLU, BatchNormalization\nfrom tensorflow.keras import regularizers\nimport tensorflow as tf\nimport random\nimport os\n%matplotlib inline\nfrom sklearn.metrics import average_precision_score","fcf2c388":"# ==================\n# Constant\n# ==================\nTRAIN_PATH = \"\/kaggle\/input\/machine-learning-challenge-osaka-2020\/train.csv\"\nTEST_PATH = \"\/kaggle\/input\/machine-learning-challenge-osaka-2020\/test.csv\"\nREVIEW_TRAIN_PATH = \"\/kaggle\/input\/machine-learning-challenge-osaka-2020\/review_train.csv\"\nREVIEW_TEST_PATH = \"\/kaggle\/input\/machine-learning-challenge-osaka-2020\/review_test.csv\"","82ecfb31":"# ===============\n# Settings\n# ===============\n\nSEED = 0\nN_SPLITS = 5\nSHUFFLE = True\n\nload_feature = [\n               \"\/kaggle\/input\/review-data-fasttext\/review_fasttext.feather\",\n               \"\/kaggle\/input\/review-data-tfidf\/review_tfidf.feather\",]","edb3877e":"# ====================\n# Function\n# ====================\ndef gini(actual, pred, cmpcol = 0, sortcol = 1):\n    assert( len(actual) == len(pred) )\n    all = np.asarray(np.c_[ actual, pred, np.arange(len(actual)) ], dtype=np.float)\n    all = all[ np.lexsort((all[:,2], -1*all[:,1])) ]\n    totalLosses = all[:,0].sum()\n    giniSum = all[:,0].cumsum().sum() \/ totalLosses\n    \n    giniSum -= (len(actual) + 1) \/ 2.\n    return giniSum \/ len(actual)\n \ndef calc_loss(a, p):\n    return gini(a, p) \/ gini(a, a)\n\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    session_conf = tf.compat.v1.ConfigProto(\n        intra_op_parallelism_threads=1,\n        inter_op_parallelism_threads=1\n    )\n    sess = tf.compat.v1.Session(graph=tf.compat.v1.get_default_graph(), config=session_conf)\n    tf.compat.v1.keras.backend.set_session(sess)\n    \ndef get_model(numerical, dout=0.1):\n    inp_numerical = Input(shape=(len(numerical),), name=\"numerical\")\n    nums = Dense(512, activation=\"linear\")(inp_numerical)\n    nums = BatchNormalization()(nums)\n    nums = PReLU()(nums)\n    nums = Dropout(dout)(nums)\n    nums = Dense(256, activation=\"linear\")(nums)\n    nums = BatchNormalization()(nums)\n    nums = PReLU()(nums)\n    nums = Dropout(dout)(nums)\n    nums = Dense(128)(nums)\n    nums = BatchNormalization()(nums)\n    nums =  PReLU()(nums )\n    nums  = Dropout(dout)(nums )\n    \n    out = Dense(1)(nums)\n    optimizer = tf.keras.optimizers.Adam(lr=0.0005)\n    model = Model(inputs=inp_numerical,\n                      outputs=out)\n    model.compile(loss='mean_squared_error', optimizer=optimizer)\n    return model\n\ndef get_keras_data(df, numerical):\n    X = {\n        \"numerical\": df[numerical].values.reshape(-1,len(numerical))\n    }\n    return X","3d1a8a04":"# ====================\n# Main\n# ====================\ntrain_raw = pd.read_csv(REVIEW_TRAIN_PATH)","dd87e096":"y = train_raw[\"rating\"]\n\ndf = None\nfor i in load_feature:\n    if df is not None:\n        _df = pd.read_feather(i)\n        df  = pd.concat([df, _df], axis=1)\n    else:\n        df = pd.read_feather(i)\ntrain = df.iloc[:len(train_raw)]\ntest = df.iloc[len(train_raw):].reset_index(drop=True)","55cd558b":"# \u524d\u51e6\u7406\ncategorical_features = []\nlen_tr = len(train)\nfeatures = train.columns\ndf_train_nn = train[features]\ndf_test_nn = test[features]\ndf_train_nn = pd.concat([df_train_nn,df_test_nn]).reset_index(drop=True)\nprint(len(df_train_nn))\nnumerical = [i for i in features if i not in categorical_features]\n\ndic = {}\nfor i, c in enumerate(numerical):\n    dic[c] = \"feature\"+str(i)\ndf_train_nn = df_train_nn.rename(columns=dic)\nnumerical = [dic[c] for c in numerical]\n\nprint(df_train_nn.shape)\ndf_train_nn.replace(np.inf, np.nan, inplace=True)\ndf_train_nn.replace(-np.inf, np.nan, inplace=True)\ndf_train_nn[numerical] = StandardScaler().fit_transform(\n    df_train_nn[numerical])\ndf_train_nn.fillna(0, inplace=True)\nprint(df_train_nn.shape)\ndf_test_nn = df_train_nn.iloc[len_tr:].reset_index(drop=True)\ndf_train_nn = df_train_nn.iloc[:len_tr]","2ce2b9d6":"#leak\u3092\u9632\u3050\u76ee\u7684\u3067IOS_App_Id\u3067gorupkfold\u3067fold\u3092\u5207\u308a\u307e\u3059\nkf = GroupKFold(n_splits=N_SPLITS)\ny_oof = np.empty([len(train),])\ny_test = []\nseed_everything(SEED)\ngroup = train_raw[\"IOS_App_Id\"]\nfor fold, (train_idx, valid_idx) in enumerate(kf.split(train,y,group)):\n    print('Fold {}'.format(fold + 1))\n    x_train, y_train = df_train_nn.iloc[train_idx], y[train_idx]\n    x_val, y_val =df_train_nn.iloc[valid_idx], y[valid_idx]\n    print(\"train:\",len(x_train))\n    x_train = get_keras_data(x_train, numerical)\n    x_val = get_keras_data(x_val, numerical)\n    model = get_model(numerical)\n    es = EarlyStopping(patience=5, mode='min', verbose=1) \n    checkpoint = ModelCheckpoint(filepath='model.hdf5', save_best_only=True,mode='auto') \n    reduce_lr_loss = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=3, verbose=1, epsilon=1e-4, mode='min')\n    history = model.fit(x_train, y_train, batch_size=256,\n                            validation_data=(x_val, y_val),\n                            epochs=100, callbacks=[es, checkpoint, reduce_lr_loss], verbose=2)\n    model.load_weights('model.hdf5')\n\n    y_pred_valid = model.predict(x_val, batch_size=1000)\n    test_nn = get_keras_data(df_test_nn,numerical)\n    y_pred_test = model.predict(test_nn, batch_size=1000)\n    y_oof[valid_idx] = y_pred_valid.reshape(-1)\n    score = calc_loss(y.iloc[valid_idx],y_oof[valid_idx])\n    y_test.append(y_pred_test)\n\nscore = calc_loss(y, y_oof)","c8a58fdc":"print(score)","bd4ab1a5":"y_test_sub =  np.mean(y_test,axis=0)","a11201ed":"train_review = pd.read_csv(REVIEW_TRAIN_PATH)\ntest_review = pd.read_csv(REVIEW_TEST_PATH)","372c2b3b":"train_review[\"reating_pred\"] = y_oof\ntest_review[\"reating_pred\"] = y_test_sub","9b9a9e28":"cols = [\"IOS_App_Id\",\"reating_pred\"]\nreview_all = pd.concat([train_review[cols],test_review[cols]]).reset_index(drop=True)","2f35ad5e":"train = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)\ntrain = pd.concat([train[[\"IOS_App_Id\"]],test[[\"IOS_App_Id\"]]]).reset_index(drop=True)","d91b3dfc":"review_reating_mean = review_all.groupby(by=\"IOS_App_Id\")[\"reating_pred\"].mean().to_dict()\nreview_reating_min = review_all.groupby(by=\"IOS_App_Id\")[\"reating_pred\"].min().to_dict()\nreview_reating_max = review_all.groupby(by=\"IOS_App_Id\")[\"reating_pred\"].max().to_dict()\nreview_reating_std = review_all.groupby(by=\"IOS_App_Id\")[\"reating_pred\"].std().to_dict()","b896b654":"train[\"mlp_reating_pred_mean\"] = train[\"IOS_App_Id\"].map(review_reating_mean)\ntrain[\"mlp_reating_pred_min\"] = train[\"IOS_App_Id\"].map(review_reating_min)\ntrain[\"mlp_reating_pred_max\"] = train[\"IOS_App_Id\"].map(review_reating_max)\ntrain[\"mlp_reating_pred_std\"] = train[\"IOS_App_Id\"].map(review_reating_std)","5b13640b":"train.iloc[:,1:].to_feather(\"mlp_reating_pred.feather\")","588bf8fb":"train","3946a0d1":"## reating\u306e\u4e88\u6e2c\u5024\u3092\u4f7f\u3063\u305f\u7279\u5fb4\u91cf\u3092\u751f\u6210\u3057\u307e\u3059","485a9967":"## title\u3068review\u304b\u3089rating\u3092\u4e88\u6e2c\u3059\u308bmodel\uff08NN\uff09\u3092\u4f5c\u6210\u3057\u3001rating\u3092\u4e88\u6e2c\u3057\u307e\u3059\u3002\u305d\u306e\u4e88\u6e2c\u5024\u306e\u7d71\u8a08\u91cf\uff08\u6700\u5927\u3001\u6700\u5c0f\u3001\u5e73\u5747\u3001\u5206\u6563\uff09\u3092\u7279\u5fb4\u91cf\u306b\u3057\u307e\u3059"}}