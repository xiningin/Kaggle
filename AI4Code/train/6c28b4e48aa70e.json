{"cell_type":{"2bc0fd25":"code","2cd6d296":"code","6b5d2d55":"code","15d2508a":"code","3f0b06b0":"code","97b9205c":"code","2ce17fc8":"code","812b232b":"code","0b3ff279":"code","89908a89":"code","a4cb20ab":"code","617a89cb":"code","bd1d49cd":"code","e4c878fd":"code","575d1f7a":"code","10bfa708":"code","17532d85":"code","303b77e3":"code","4cdb4db8":"code","a077a4ee":"code","a131b7da":"code","005bc1ba":"code","919e61f2":"code","876f3bc6":"code","18d0cf8c":"code","0728f03a":"code","4f3628e9":"code","051348c0":"code","25c325dd":"code","0e7397e8":"code","fc27fbdc":"code","37ea7b9e":"code","dbbd023a":"code","d1992d96":"code","96211c8b":"code","06b658c1":"code","e9a981f0":"code","a2967b24":"code","fd09676b":"code","40fdb104":"code","a9ae9914":"code","25539b0b":"code","ed90a463":"code","c69ce3a5":"code","8c1aafaf":"code","d619e29e":"code","b02e6901":"code","a485d092":"code","06bb460f":"code","7bc931dc":"code","11060dcc":"code","5f7903b5":"code","2d531bf4":"code","2d1373c1":"code","b5743ef7":"code","2abc448d":"code","c830aef6":"code","c7db6813":"code","7a3f8878":"code","68eeab14":"code","425b98db":"code","eddf2ffa":"code","2655b2eb":"code","ad370a76":"code","818fc321":"code","8c151a46":"code","ea8c828c":"code","8b8c7b00":"code","d343966e":"code","5f8f26bd":"code","543e68cc":"code","6ed72733":"markdown","95f15334":"markdown","c256509f":"markdown","1b1e644e":"markdown","9edc1be4":"markdown","a6eca507":"markdown"},"source":{"2bc0fd25":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style('whitegrid')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2cd6d296":"aug_train=pd.read_csv('..\/input\/aug-train\/aug_train.csv')\naug_train.head()","6b5d2d55":"aug_train.info()","15d2508a":"aug_train.isnull().sum().sort_values(ascending = False)","3f0b06b0":"aug_train.isna().mean().round(4) * 100","97b9205c":"sum(aug_train.duplicated())","2ce17fc8":"aug_train['gender'].fillna(method ='ffill', inplace = True)\n\naug_train['enrolled_university'].fillna(method ='ffill', inplace = True)\n\naug_train['education_level'].fillna(method ='ffill', inplace = True)\n\naug_train['major_discipline'].fillna(method ='ffill', inplace = True)\n\naug_train['experience'].fillna(method ='ffill', inplace = True)\n\naug_train['company_size'].fillna(method ='ffill', inplace = True)\n\naug_train['company_type'].fillna(method ='ffill', inplace = True)\n\naug_train['last_new_job'].fillna(method ='ffill', inplace = True)","812b232b":"aug_train.info()","0b3ff279":"aug_train['company_size'] = aug_train['company_size'].fillna(aug_train['company_size'].mode())\naug_train['company_type'] = aug_train['company_type'].fillna(aug_train['company_type'].mode())","89908a89":"aug_train.describe().T","a4cb20ab":"gen_count=aug_train['gender'].value_counts()\nfig, ax = plt.subplots(figsize=(10, 10))\ndef make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}%\\n({v:d})'.format(p=pct,v=val)\n    return my_autopct\ngen_color=['turquoise', 'lightsalmon','greenyellow']\n\ncenter_circle = plt.Circle((0, 0), 0.7, color='white')\nplt.pie(x=gen_count.values, labels=gen_count.index, autopct=make_autopct(gen_count.values), \n          startangle=90, textprops={'size': 10}, pctdistance=0.5, colors=gen_color)\nax.add_artist(center_circle)\n\nplt.suptitle('Distribution of Gender for all Dataset', fontsize=20)\nplt.show()","617a89cb":"exp_count=aug_train['relevent_experience'].value_counts()\nfig, ax = plt.subplots(figsize=(8, 8))\ndef make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}%\\n({v:d})'.format(p=pct,v=val)\n    return my_autopct\nexp_color=['gold', 'olive']\n\ncenter_circle = plt.Circle((0, 0), 0.7, color='white')\nplt.pie(x=exp_count.values, labels=exp_count.index, autopct=make_autopct(exp_count.values), \n          startangle=90, textprops={'size': 10}, pctdistance=0.5, colors=exp_color)\nax.add_artist(center_circle)\n\nplt.suptitle('Distribution of Relevent Experience for all Dataset', fontsize=20)\nplt.show()","bd1d49cd":"enr_count=aug_train['enrolled_university'].value_counts()\nfig, ax = plt.subplots(figsize=(8, 8))\ndef make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}%\\n({v:d})'.format(p=pct,v=val)\n    return my_autopct\nenr_color=['darkslategrey', 'limegreen', 'coral']\n\ncenter_circle = plt.Circle((0, 0), 0.7, color='white')\nplt.pie(x=enr_count.values, labels=enr_count.index, autopct=make_autopct(enr_count.values), \n          startangle=90, textprops={'size': 10}, pctdistance=0.5, colors=enr_color)\nax.add_artist(center_circle)\n\nplt.suptitle('Distribution of Enrolled University for all Dataset', fontsize=20)\nplt.show()","e4c878fd":"plt.figure(figsize=(8,4))\n\nax = sns.countplot(x=\"education_level\", data=aug_train, palette='gist_rainbow') \nax.set_xlabel('Education Level',fontsize=16)\nax.set_ylabel('Count', fontsize=16)\nax.set_title('Distribution of Education Level',fontsize=20, weight='bold')\n\n\ntotal = len(aug_train['education_level'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_height()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width-0.6\n        y=p.get_y()+height\n        ax.annotate(percentage,(x,y))\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","575d1f7a":"plt.figure(figsize=(10,5))\n\nax = sns.countplot(x=\"major_discipline\", data=aug_train, palette='Set1') \nax.set_xlabel('Major Discipline',fontsize=16)\nax.set_ylabel('Count', fontsize=16)\nax.set_title('Distribution of Major Discipline',fontsize=20, weight='bold')\n\n\ntotal = len(aug_train['major_discipline'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_height()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width-0.6\n        y=p.get_y()+height\n        ax.annotate(percentage,(x,y))\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","10bfa708":"exp_count = aug_train['experience'].value_counts(ascending=False).index\nplt.figure(figsize=(13,8))\n\nax = sns.countplot(y=\"experience\", data=aug_train, order=exp_count, palette='Paired') \nax.set_xlabel('Experience',fontsize=20)\nax.set_ylabel('Count', fontsize=20)\nax.set_title('Distribution of Experience',fontsize=20, weight='bold')\n\n\ntotal = len(aug_train['experience'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_width()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width+1\n        y=p.get_y()+height-0.2\n        ax.annotate(percentage,(x,y))\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","17532d85":"com_count = aug_train['company_size'].value_counts(ascending=False).index\nplt.figure(figsize=(13,4))\n\nax = sns.countplot(y=\"company_size\", data=aug_train, order=com_count, palette='Set2') \nax.set_xlabel('Company Size',fontsize=20)\nax.set_ylabel('Count', fontsize=20)\nax.set_title('Distribution of Company Size',fontsize=20, weight='bold')\n\n\ntotal = len(aug_train['company_size'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_width()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width+1\n        y=p.get_y()+height-0.25\n        ax.annotate(percentage,(x,y))\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","303b77e3":"type_count = aug_train['company_type'].value_counts(ascending=False).index\nplt.figure(figsize=(13,4))\n\nax = sns.countplot(y=\"company_type\", data=aug_train, order=type_count, palette='seismic') \nax.set_xlabel('Company Type',fontsize=20)\nax.set_ylabel('Count', fontsize=20)\nax.set_title('Distribution of Company Type',fontsize=20, weight='bold')\n\n\ntotal = len(aug_train['company_type'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_width()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width+1\n        y=p.get_y()+height-0.3\n        ax.annotate(percentage,(x,y))\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","4cdb4db8":"job_count = aug_train['last_new_job'].value_counts(ascending=False).index\nplt.figure(figsize=(13,4))\n\nax = sns.countplot(y=\"last_new_job\", data=aug_train, order=job_count, palette='plasma') \nax.set_xlabel('Last New Job',fontsize=20)\nax.set_ylabel('Count', fontsize=20)\nax.set_title('Distribution of Last New Job',fontsize=20, weight='bold')\n\n\ntotal = len(aug_train['last_new_job'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_width()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width+1\n        y=p.get_y()+height-0.3\n        ax.annotate(percentage,(x,y))\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","a077a4ee":"train_count = aug_train['training_hours'].value_counts(ascending=False).head(10).index\nplt.figure(figsize=(13,4))\n\nax = sns.countplot(y=\"training_hours\", data=aug_train, order=train_count, palette='Wistia_r') \nax.set_xlabel('Training Hours',fontsize=20)\nax.set_ylabel('Count', fontsize=20)\nax.set_title('Distribution of Training Hours',fontsize=20, weight='bold')\n\n\ntotal = len(aug_train['training_hours'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_width()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width+1\n        y=p.get_y()+height-0.3\n        ax.annotate(percentage,(x,y))\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","a131b7da":"plt.figure(figsize=(6,4))\n\nax = sns.countplot(x=\"target\", data=aug_train, palette='icefire_r') \nax.set_xlabel('Target',fontsize=16)\nax.set_ylabel('Count', fontsize=16)\nax.set_title('Distribution of Target',fontsize=20, weight='bold')\n\n\ntotal = len(aug_train['target'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_height()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width-0.5\n        y=p.get_y()+height\n        ax.annotate(percentage,(x,y))\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","005bc1ba":"city_count = aug_train['city'].value_counts(ascending=False).head(10).index\nplt.figure(figsize=(14,6))\n\nax = sns.countplot(y=\"city\", data=aug_train, order=city_count, palette='Blues_r') \nax.set_xlabel('City',fontsize=20)\nax.set_ylabel('Count', fontsize=20)\nax.set_title('Distribution of Cities',fontsize=20, weight='bold')\n\n\ntotal = len(aug_train['city'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_width()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width+3\n        y=p.get_y()+height-0.25\n        ax.annotate(percentage,(x,y))\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","919e61f2":"corrmat = aug_train.corr()\n  \nf, ax = plt.subplots(figsize =(10, 8)) \nsns.heatmap(corrmat, ax = ax,  linewidths = 0.1, annot=True)","876f3bc6":"aug_train.describe(include=['O'])","18d0cf8c":"aug_train[['city_development_index', 'target']].groupby(['city_development_index'], \n     as_index=False).mean().sort_values(by='target', ascending=False).head(10)","0728f03a":"aug_train[['training_hours', 'target']].groupby(['training_hours'], \nas_index=False).mean().sort_values(by='target', ascending=False).head(10)","4f3628e9":"aug_train[['gender', 'target']].groupby(['gender'], as_index=False).mean().sort_values(by='target', \n     ascending=False)","051348c0":"aug_train[['relevent_experience', 'target']].groupby(['relevent_experience'], \n     as_index=False).mean().sort_values(by='target', ascending=False)","25c325dd":"aug_train[['enrolled_university', 'target']].groupby(['enrolled_university'], \n     as_index=False).mean().sort_values(by='target', ascending=False)","0e7397e8":"aug_train[['education_level', 'target']].groupby(['education_level'], \n     as_index=False).mean().sort_values(by='target', ascending=False)","fc27fbdc":"aug_train[['major_discipline', 'target']].groupby(['major_discipline'], \n      as_index=False).mean().sort_values(by='target', ascending=False)","37ea7b9e":"aug_train[['experience', 'target']].groupby(['experience'], \n     as_index=False).mean().sort_values(by='target', ascending=False).head(10)","dbbd023a":"aug_train[['company_size', 'target']].groupby(['company_size'], \n     as_index=False).mean().sort_values(by='target', ascending=False).head(10)","d1992d96":"aug_train[['company_type', 'target']].groupby(['company_type'], \n     as_index=False).mean().sort_values(by='target', ascending=False)","96211c8b":"aug_train[['last_new_job', 'target']].groupby(['last_new_job'], as_index=False).mean().sort_values(\n     by='target', ascending=False)","06b658c1":"g=sns.set_theme(style=\"whitegrid\")\n\ng=sns.catplot(x=\"relevent_experience\",y=\"training_hours\", hue=\"gender\", data=aug_train, kind=\"bar\", \n            dodge=True, alpha=.8, height=6)\ng.set_titles(\"{col_name}\")\ng.set_axis_labels(x_var=\"relevent_experience\", y_var=\"Training Hours\")","e9a981f0":"g=sns.set_theme(style=\"whitegrid\")\n\ng=sns.catplot(x=\"enrolled_university\",y=\"training_hours\", hue=\"gender\", data=aug_train, kind=\"bar\", \n            dodge=True, alpha=.8, height=6)\ng.set_titles(\"{col_name}\")\ng.set_axis_labels(x_var=\"Enrolled University\", y_var=\"Training Hours\")","a2967b24":"g=sns.set_theme(style=\"whitegrid\")\n\ng=sns.catplot(x=\"education_level\",y=\"training_hours\", hue=\"gender\", data=aug_train, kind=\"bar\", \n            dodge=True, alpha=.8, height=6)\ng.set_titles(\"{col_name}\")\ng.set_axis_labels(x_var=\"Education Level\", y_var=\"Training Hours\")","fd09676b":"g=sns.set_theme(style=\"whitegrid\")\n\ng=sns.catplot(x=\"training_hours\", y=\"major_discipline\", hue=\"gender\", data=aug_train, kind=\"bar\", \n            dodge=True, alpha=.8, height=6)\ng.set_titles(\"{col_name}\")\ng.set_axis_labels(y_var=\"Training Hours\", x_var=\"Major Discipline\")","40fdb104":"g=sns.set_theme(style=\"whitegrid\")\n\ng=sns.catplot(x=\"training_hours\", y=\"company_size\", hue=\"gender\", data=aug_train, kind=\"bar\", \n            dodge=True, alpha=.8, height=6)\ng.set_titles(\"{col_name}\")\ng.set_axis_labels(x_var=\"Training Hours\", y_var=\"Company Size\")","a9ae9914":"g=sns.set_theme(style=\"whitegrid\")\n\ng=sns.catplot(x=\"training_hours\",y=\"company_type\", hue=\"gender\", data=aug_train, kind=\"bar\", \n            dodge=True, alpha=.8, height=6)\ng.set_titles(\"{col_name}\")\ng.set_axis_labels(y_var=\"Company Type\", x_var=\"Training Hours\")","25539b0b":"g=sns.set_theme(style=\"whitegrid\")\n\ng=sns.catplot(x=\"training_hours\",y=\"last_new_job\", hue=\"gender\", data=aug_train, kind=\"bar\", \n            dodge=True, alpha=.8, height=5)\ng.set_titles(\"{col_name}\")\ng.set_axis_labels(y_var=\"Last New Job\", x_var=\"Training Hours\")","ed90a463":"best_m_comp_size = aug_train.groupby(['company_size', 'gender']).agg({'city': 'count'}).unstack()['city', 'Male'].sort_values(ascending=False)\nbest_f_comp_size = aug_train.groupby(['company_size', 'gender']).agg({'city': 'count'}).unstack()['city', 'Female'].sort_values(ascending=False)\nbest_o_comp_size = aug_train.groupby(['company_size', 'gender']).agg({'city': 'count'}).unstack()['city', 'Other'].sort_values(ascending=False)","c69ce3a5":"with plt.style.context('seaborn-bright'):\n    fig, ax = plt.subplots(1, 3, figsize=(16,16))\n    best_m_comp_size.sort_values(ascending = True, inplace = True)    \n    ax[0].barh(y=best_m_comp_size.index, width=best_m_comp_size.values, color='deepskyblue')\n    ax[0].set_title('Male', fontdict={'fontsize': 20, 'fontweight': 'medium'})\n    ax[0].set_xlabel('Count', color = 'black', fontsize = '13')\n    ax[0].set_ylabel('Company Size', color = 'black', fontsize = '13')\n    ax[0].figure.set_size_inches(14, 8)\n    \n    best_f_comp_size.sort_values(ascending = True, inplace = True)    \n    ax[1].barh(y=best_f_comp_size.index, width=best_f_comp_size.values, color='tomato')\n    ax[1].set_title('Female', fontdict={'fontsize': 20, 'fontweight': 'medium'})\n    ax[1].set_xlabel('Count', color = 'black', fontsize = '13')\n    ax[1].set_ylabel('Company Size', color = 'black', fontsize = '13')\n    ax[1].figure.set_size_inches(14, 8)\n    \n    best_o_comp_size.sort_values(ascending = True, inplace = True)    \n    ax[2].barh(y=best_o_comp_size.index, width=best_o_comp_size.values, color='goldenrod')\n    ax[2].set_title('Other', fontdict={'fontsize': 20, 'fontweight': 'medium'})\n    ax[2].set_xlabel('Count', color = 'black', fontsize = '13')\n    ax[2].set_ylabel('Company Size', color = 'black', fontsize = '13')\n    ax[2].figure.set_size_inches(14, 8)    \n\nfig.tight_layout()\nplt.show()","8c1aafaf":"best_m_comp_type = aug_train.groupby(['company_type', 'gender']).agg({'city': 'count'}).unstack()['city', 'Male'].sort_values(ascending=False)\nbest_f_comp_type = aug_train.groupby(['company_type', 'gender']).agg({'city': 'count'}).unstack()['city', 'Female'].sort_values(ascending=False)\nbest_o_comp_type = aug_train.groupby(['company_type', 'gender']).agg({'city': 'count'}).unstack()['city', 'Other'].sort_values(ascending=False)\n\nwith plt.style.context('seaborn-bright'):\n    fig, ax = plt.subplots(1, 3, figsize=(16,16))\n    best_m_comp_type.sort_values(ascending = True, inplace = True)    \n    ax[0].barh(y=best_m_comp_type.index, width=best_m_comp_type.values, color='deepskyblue')\n    ax[0].set_title('Male', fontdict={'fontsize': 20, 'fontweight': 'medium'})\n    ax[0].set_xlabel('Count', color = 'black', fontsize = '13')\n    ax[0].set_ylabel('Company Type', color = 'black', fontsize = '13')\n    ax[0].figure.set_size_inches(14, 8)\n    \n    best_f_comp_type.sort_values(ascending = True, inplace = True)    \n    ax[1].barh(y=best_f_comp_type.index, width=best_f_comp_type.values, color='tomato')\n    ax[1].set_title('Female', fontdict={'fontsize': 20, 'fontweight': 'medium'})\n    ax[1].set_xlabel('Count', color = 'black', fontsize = '13')\n    ax[1].set_ylabel('Company Type', color = 'black', fontsize = '13')\n    ax[1].figure.set_size_inches(14, 8)\n    \n    best_o_comp_type.sort_values(ascending = True, inplace = True)    \n    ax[2].barh(y=best_o_comp_type.index, width=best_o_comp_type.values, color='goldenrod')\n    ax[2].set_title('Other', fontdict={'fontsize': 20, 'fontweight': 'medium'})\n    ax[2].set_xlabel('Count', color = 'black', fontsize = '13')\n    ax[2].set_ylabel('Company Size', color = 'black', fontsize = '13')\n    ax[2].figure.set_size_inches(14, 8)    \n\nfig.tight_layout()\nplt.show()","d619e29e":"# Plot the points in descending order top to bottom as we have data in same format.\n\nbest_m_comp_size.sort_values(ascending = True, inplace = True)\nplot = best_m_comp_size.plot.barh(color = 'deepskyblue', fontsize = 13)\nplot.set_title('Male  In Company Size', fontdict={'fontsize': 20, 'fontweight': 'medium'})\nplot.set_xlabel('Count', color = 'black', fontsize = '13')\nplot.set_ylabel('Company Size', color = 'black', fontsize = '13')\nplot.figure.set_size_inches(6, 6)\nplt.show()\nbest_f_comp_size.sort_values(ascending = True, inplace = True)\nplot = best_f_comp_size.plot.barh(color = 'tomato', fontsize = 13)\nplot.set_title('Female  In Company Size', fontdict={'fontsize': 20, 'fontweight': 'medium'})\nplot.set_xlabel('Count', color = 'black', fontsize = '13')\nplot.set_ylabel('Company Size', color = 'black', fontsize = '13')\nplot.figure.set_size_inches(6, 6)\nplt.show()","b02e6901":"aug_train[aug_train['target'] == ' 1.0']['gender'].value_counts().head(3)\npd.crosstab(aug_train['gender'], aug_train['target']).plot(kind='barh', stacked=True, figsize=(10, 5))","a485d092":"aug_train[aug_train['target'] == ' 1.0']['relevent_experience'].value_counts().head(3)\npd.crosstab(aug_train['relevent_experience'], aug_train['target']).plot(kind='barh', stacked=True, \n                                                                        figsize=(10, 5))","06bb460f":"aug_train[aug_train['target'] == ' 1.0']['enrolled_university'].value_counts().head(3)\npd.crosstab(aug_train['enrolled_university'], aug_train['target']).plot(kind='barh', stacked=True, \n                                                                        figsize=(10, 5))","7bc931dc":"aug_train[aug_train['target'] == ' 1.0']['education_level'].value_counts().head(3)\npd.crosstab(aug_train['education_level'], aug_train['target']).plot(kind='barh', stacked=True, \n                                                                    figsize=(10, 5))","11060dcc":"aug_train[aug_train['target'] == ' 1.0']['major_discipline'].value_counts().head(3)\npd.crosstab(aug_train['major_discipline'], aug_train['target']).plot(kind='barh', stacked=True, \n                                                                     figsize=(10, 5))","5f7903b5":"aug_train[aug_train['target'] == ' 1.0']['experience'].value_counts().head(3)\npd.crosstab(aug_train['experience'], aug_train['target']).plot(kind='barh', stacked=True, \n                                                               figsize=(10, 5))","2d531bf4":"aug_train[aug_train['target'] == ' 1.0']['company_size'].value_counts().head(3)\npd.crosstab(aug_train['company_size'], aug_train['target']).plot(kind='barh', stacked=True, \n                                                                 figsize=(10, 5))","2d1373c1":"aug_train[aug_train['target'] == ' 1.0']['company_type'].value_counts().head(3)\npd.crosstab(aug_train['company_type'], aug_train['target']).plot(kind='barh', stacked=True, \n                                                                 figsize=(10, 5))","b5743ef7":"aug_train[aug_train['target'] == ' 1.0']['last_new_job'].value_counts().head(3)\npd.crosstab(aug_train['last_new_job'], aug_train['target']).plot(kind='barh', stacked=True, figsize=(10, 5))","2abc448d":"x = \"training_hours\"\nfig, ax = plt.subplots(nrows=1, ncols=2,  sharex=False, sharey=False, figsize=(8,4))\nfig.suptitle(x, fontsize=20)\n### distribution\nax[0].title.set_text('distribution')\nvariable = aug_train[x].fillna(aug_train[x].mean())\nbreaks = np.quantile(variable, q=np.linspace(0, 1, 11))\nvariable = variable[ (variable > breaks[0]) & (variable < \n                    breaks[10]) ]\nsns.histplot(variable, color=\"red\", label=\"100% Equities\", kde=True, stat=\"density\", linewidth=0, ax=ax[0])\ndes = aug_train[x].describe()\nax[0].axvline(des[\"25%\"], ls='--')\nax[0].axvline(des[\"mean\"], ls='--')\nax[0].axvline(des[\"75%\"], ls='--')\nax[0].grid(True)\ndes = round(des, 2).apply(lambda x: str(x))\nbox = '\\n'.join((\"min: \"+des[\"min\"], \"25%: \"+des[\"25%\"], \"mean: \"+des[\"mean\"], \"75%: \"+des[\"75%\"], \"max: \"+des[\"max\"]))\nax[0].text(0.95, 0.95, box, transform=ax[0].transAxes, fontsize=10, va='top', ha=\"right\", bbox=dict(boxstyle='round', facecolor='white', alpha=1))\n### boxplot \nax[1].title.set_text('outliers (log scale)')\ntmp_aug_train = pd.DataFrame(aug_train[x])\ntmp_aug_train[x] = np.log(tmp_aug_train[x])\ntmp_aug_train.boxplot(column=x, ax=ax[1])\nplt.show()","c830aef6":"aug_train[['training_hours', 'gender']].groupby(['gender'], as_index=False).mean().sort_values(\n     by='training_hours', ascending=False).head(10)","c7db6813":"aug_train[['training_hours', 'relevent_experience']].groupby(['relevent_experience'], \n     as_index=False).mean().sort_values(by='training_hours', ascending=False).head(10)","7a3f8878":"aug_train[['training_hours', 'enrolled_university']].groupby(['enrolled_university'], \n     as_index=False).mean().sort_values(by='training_hours', ascending=False).head(10)","68eeab14":"aug_train[['training_hours', 'education_level']].groupby(['education_level'], as_index=False).mean().sort_values(by='training_hours', ascending=False).head(10)","425b98db":"aug_train[['training_hours', 'major_discipline']].groupby(['major_discipline'], as_index=False).mean().sort_values(by='training_hours', ascending=False).head(10)","eddf2ffa":"aug_train[['training_hours', 'experience']].groupby(['experience'], as_index=False).mean().sort_values(by='training_hours', ascending=False).head(10)","2655b2eb":"aug_train[['training_hours', 'company_size']].groupby(['company_size'], as_index=False).mean().sort_values(by='training_hours', ascending=False).head(10)","ad370a76":"aug_train[['training_hours', 'company_type']].groupby(['company_type'], as_index=False).mean().sort_values(by='training_hours', ascending=False).head(10)","818fc321":"aug_train[['training_hours', 'last_new_job']].groupby(['last_new_job'], as_index=False).mean().sort_values(by='training_hours', ascending=False).head(10)","8c151a46":"aug_train.groupby(['education_level'])['relevent_experience'].value_counts(normalize=True)","ea8c828c":"aug_train.groupby(['education_level'])['enrolled_university'].value_counts(normalize=True)","8b8c7b00":"aug_train.groupby(['education_level'])['major_discipline'].value_counts(normalize=True)","d343966e":"aug_train.groupby(['education_level'])['company_type'].value_counts(normalize=True)","5f8f26bd":"aug_train.groupby(['education_level'])['last_new_job'].value_counts(normalize=True)","543e68cc":"aug_train.groupby(['education_level'])['company_size'].value_counts(normalize=True)","6ed72733":"## Data Analysis","95f15334":"# Prediction of employees from humen resourses","c256509f":"* 1. [Introduction](#Introduction)\n* 2. [Data Cleaning](#Data-Cleaning)\n* 3. [Data Analysis](#Data-Analysis)","1b1e644e":"\n## Introduction\n\nThis data set contains information more than 19,000 rows, It consist of 13 columns such as gender, relevent experience, enrolled university, etc...\n\nLets load a aug_train database csv file:","9edc1be4":"## Table of contents\n","a6eca507":"## Data Cleaning"}}