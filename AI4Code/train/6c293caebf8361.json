{"cell_type":{"5ac70e8a":"code","013a5fe5":"code","772f75b2":"code","3bf94ad9":"code","3da57f8e":"code","4322f68b":"code","7a784aae":"markdown","d5e288fd":"markdown","50fc089e":"markdown","e43e6b3e":"markdown","c1852ace":"markdown","78ee8b18":"markdown"},"source":{"5ac70e8a":"from scipy import stats\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport statistics ","013a5fe5":"x = 10 #number of dfs\nd={}\nfor i in range(x):\n    co=np.random.randint(50,200) #range for columns\n    ro=np.random.randint(100,200) #range for rows\n    d[\"V{0}_Data\".format(i)] = pd.DataFrame(np.random.randint(10, size=(ro,co)), columns=[\"Special experiment {0}\".format(a) for a in range(co)])","772f75b2":"dfeatures={}\ny=10 #number of features in each dataset\nfor i in d.values():\n    for a in range(y):\n        i.insert(loc=1, column=\"Special feature{0}\".format(a), value=i.iloc[:,0:np.random.randint(co)].sum(axis = 1, skipna = True)) # insert feature columns indatasets","3bf94ad9":"# just a short test of a normal sample\nveryrandomnormal=np.random.randn(50,50) # generate normal dataset\nprint(\"p-value: \",stats.shapiro(veryrandomnormal)[1]) # if p<0.05 - it is not normal","3da57f8e":"pvalues=[]\nanova_test=dict()\nshapiro_test=dict()\nkruskal_test=dict()\nfor key, value in d.items():\n    shapiro_test[str(key)] = stats.shapiro(value)\n    if stats.shapiro(value)[1]>0.05:\n        for i in range(int(y\/2)):# iterate till the middle features and compare them with features from another half\n            stri='Special feature{0}'.format(i)+'vs'+'Special feature{0}'.format(y-i-1)\n            anova_test[key+stri]=stats.f_oneway(value['Special feature{0}'.format(i)],value['Special feature{0}'.format(y-i-1)])\n    else:\n        for i in range(int(y\/2)):\n                stri='Special feature{0}'.format(i)+'vs'+'Special feature{0}'.format(y-i-1)\n                kruskal_test[key+stri]=stats.kruskal(value['Special feature{0}'.format(i)],value['Special feature{0}'.format(y-i-1)])","4322f68b":"import itertools\n\nfeatures=[\"Special feature{0}\".format(e) for e in range(y)]\ncombinations=list(itertools.combinations(features, 2)) # all combinations of two features\n\ni=d['V0_Data'] # let's take one dataset\nfor e in range(len(combinations)):\n    fig, ax = plt.subplots(figsize=(10,7))\n    x = i[combinations[e][0]]\n    y1 = i[combinations[e][1]]\n    ax.scatter(x, y1)\n    z = np.polyfit(x, y1, 1)\n    p = np.poly1d(z)\n    ax.plot(x,p(x),\"r--\")\n    plt.title(combinations[e])\n    plt.show()\n    fig.savefig(\"{}.png\".format(combinations[e]),transparent=False, dpi=300,bbox_inches='tight', facecolor=(1,1,1,0))","7a784aae":"# Data generation\nGenerate random integer dataframes with values from 0 to 10","d5e288fd":"# Shapiro-Wilk test\nTest for normality of the data. Dataset is considered normal in case p value is higher than 0.05. If the data pass this test then we can compare highlighted features with Analysis of variance (ANOVA). Else it is possible to perform Kruskal\u2013Wallis H test.","50fc089e":"# Import packages","e43e6b3e":"Now we know the p-value and statistics for each pair of features","c1852ace":"# Visualisation\nLet's make scatter plots with linear regression trend lines","78ee8b18":"# Now let's make some special features\nSum random columns in the data making new features"}}