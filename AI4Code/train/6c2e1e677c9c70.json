{"cell_type":{"55cd7111":"code","560f8523":"code","2ef130c0":"code","b5c864eb":"code","a22008cf":"code","16fab1d2":"code","193c159b":"code","374ccaa6":"code","46c9337d":"code","48ec94e6":"code","5d5ee5d7":"code","6f7661dd":"code","c6b898bb":"code","4bc69040":"code","64994c73":"code","dbf31dc4":"markdown","8e72601c":"markdown","df699510":"markdown","103f94a1":"markdown"},"source":{"55cd7111":"    # This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense , Dropout , Lambda, Flatten\nfrom keras.optimizers import Adam ,RMSprop\nfrom sklearn.model_selection import train_test_split\nfrom keras import  backend as K\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","560f8523":"# create the training & test sets, skipping the header row with [1:]\ntrain = pd.read_csv(\"..\/input\/train.csv\")\nprint(train.shape)\ntrain.head()","2ef130c0":"test= pd.read_csv(\"..\/input\/test.csv\")\nprint(test.shape)\ntest.head()","b5c864eb":"\n\n\n\nX_train = (train.iloc[:,1:].values).astype('float32') # all pixel values\ny_train = train.iloc[:,0].values.astype('int32') # only labels i.e targets digits\nX_test = test.values.astype('float32')\n\n\nX = X_train\ny = y_train\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.10, random_state=42)","a22008cf":"y.shape","16fab1d2":"\\\n\n\nmean_px = X_train.mean().astype(np.float32)\nstd_px = X_train.std().astype(np.float32)\n\ndef standardize(x): \n    return (x-mean_px)\/std_px","193c159b":"X_train = X_train.reshape(-1,28,28,1)\nX_test = X_test.reshape(-1, 28, 28,1)\nX_val = X_val.reshape(-1,28,28,1)\nX_test.shape","374ccaa6":"y_train[2]","46c9337d":"from keras.utils import np_utils\ny_train = np_utils.to_categorical(y_train,10)\nX = X.reshape(-1,28,28,1)\ny = np_utils.to_categorical(y,10)","48ec94e6":"# fix random seed for reproducibility\nseed = 43\nnp.random.seed(seed)","5d5ee5d7":"from keras.models import  Sequential\nfrom keras.layers.core import  Lambda , Dense, Flatten, Dropout\nfrom keras.callbacks import EarlyStopping\nfrom keras.layers import BatchNormalization, Convolution2D , MaxPooling2D","6f7661dd":"from keras.layers.normalization import BatchNormalization\n\ndef get_bn_model():\n    model = Sequential([\n        Lambda(standardize, input_shape=(28,28,1)),\n        Convolution2D(32,(3,3), activation='relu'),\n        BatchNormalization(axis=1),\n        Convolution2D(32,(3,3), activation='relu'),\n        MaxPooling2D(),\n        BatchNormalization(axis=1),\n        Convolution2D(64,(3,3), activation='relu'),\n        BatchNormalization(axis=1),\n        Convolution2D(64,(3,3), activation='relu'),\n        MaxPooling2D(),\n        Flatten(),\n        BatchNormalization(),\n        Dense(512, activation='relu'),\n        BatchNormalization(),\n        Dense(10, activation='softmax')\n        ])\n    model.compile(Adam(), loss='categorical_crossentropy', metrics=['accuracy'])\n    return model","c6b898bb":"model= get_bn_model()\ngen =ImageDataGenerator(rotation_range=8, width_shift_range=0.08, shear_range=0.3,\n                               height_shift_range=0.08, zoom_range=0.08)\nbatches = gen.flow(X, y, batch_size=64)\nhistory=model.fit_generator(generator=batches, steps_per_epoch=batches.n, epochs=1)\n\n","4bc69040":"X_test.shape\n# predict results\nresults = model.predict(X_test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"Aniket_Digit_pred2.csv\",index=False)","64994c73":"X_test.shape","dbf31dc4":"**Import all required libraries**\n===============================","8e72601c":"**Designing Neural Network Architecture**\n=========================================","df699510":"## Convolutional Neural Network\nCNNs are extremely efficient for images.\n","103f94a1":"**Load Train and Test data**\n============================"}}