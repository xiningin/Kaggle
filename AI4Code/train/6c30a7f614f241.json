{"cell_type":{"5e370fb5":"code","b9d2ef6c":"code","8b7e4558":"code","013ca5d2":"code","ab6bf5e8":"code","ca67550c":"code","d2f8afff":"code","c0798208":"code","2794b62d":"code","eef533f5":"code","8ae70183":"code","c7916dc5":"markdown","79fb2526":"markdown","5550ac44":"markdown","d5b53a5c":"markdown","9c52dd72":"markdown","80d54fbe":"markdown","6727870d":"markdown","80b4aaac":"markdown"},"source":{"5e370fb5":"try:\n    from sklearn.ensemble import RandomForestClassifier\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.model_selection import train_test_split\n    from sklearn.metrics import accuracy_score, confusion_matrix\n    import pandas as pd \n    import seaborn as sns \n    import numpy as np \n    import os\n    import matplotlib.pyplot as plt\n    print('module imported')\nexcept:\n    raise ModuleNotFoundError\n","b9d2ef6c":"df=pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","8b7e4558":"def check_outlier1():\n    plt.hist(df['fixed acidity'])\n    lower_bound=0.1\n    upper_bound=0.95\n    res=df['fixed acidity'].quantile([lower_bound,upper_bound])\n    print(res)\n    true_index=(res.loc[lower_bound]<df['fixed acidity'].values) & \\\n        (df['fixed acidity'].values<res.loc[upper_bound])\n    df['fixed acidity']=df['fixed acidity'][true_index]\ncheck_outlier1()\ndef check_outlier2():\n    plt.hist(df['volatile acidity'])\n    lower_bound=0.1\n    upper_bound=0.95\n    res=df['volatile acidity'].quantile([lower_bound,upper_bound])\n    print(res)\n    true_index=(res.loc[lower_bound]<df['volatile acidity'].values) & \\\n        (df['volatile acidity'].values<res.loc[upper_bound])\n    df['volatile acidity']=df['volatile acidity'][true_index]\ncheck_outlier2()\n\ndef check_outlier3():\n    plt.hist(df['citric acid'])\n    lower_bound=0.1\n    upper_bound=0.95\n    res=df['citric acid'].quantile([lower_bound,upper_bound])\n    print(res)\n    true_index=(res.loc[lower_bound]<df['citric acid'].values) & \\\n        (df['citric acid'].values<res.loc[upper_bound])\n    df['citric acid']=df['citric acid'][true_index]\ncheck_outlier3()\ndef check_outlier4():\n    plt.hist(df['residual sugar'])\n    lower_bound=0.1\n    upper_bound=0.95\n    res=df['residual sugar'].quantile([lower_bound,upper_bound])\n    print(res)\n    true_index=(res.loc[lower_bound]<df['residual sugar'].values) & \\\n        (df['residual sugar'].values<res.loc[upper_bound])\n    df['residual sugar']=df['residual sugar'][true_index]\ncheck_outlier4()\ndef check_outlier5():\n    plt.hist(df['chlorides'])\n    lower_bound=0.1\n    upper_bound=0.95\n    res=df['chlorides'].quantile([lower_bound,upper_bound])\n    print(res)\n    true_index=(res.loc[lower_bound]<df['chlorides'].values) & \\\n        (df['chlorides'].values<res.loc[upper_bound])\n    df['chlorides']=df['chlorides'][true_index]\ncheck_outlier5()\ndef check_outlier6():\n    plt.hist(df['free sulfur dioxide'])\n    lower_bound=0.1\n    upper_bound=0.95\n    res=df['free sulfur dioxide'].quantile([lower_bound,upper_bound])\n    print(res)\n    true_index=(res.loc[lower_bound]<df['free sulfur dioxide'].values) & \\\n        (df['free sulfur dioxide'].values<res.loc[upper_bound])\n    df['free sulfur dioxide']=df['free sulfur dioxide'][true_index]\ncheck_outlier6()\n\ndef check_outlier7():\n    plt.hist(df['total sulfur dioxide'])\n    lower_bound=0.1\n    upper_bound=0.95\n    res=df['total sulfur dioxide'].quantile([lower_bound,upper_bound])\n    print(res)\n    true_index=(res.loc[lower_bound]<df['total sulfur dioxide'].values) & \\\n        (df['total sulfur dioxide'].values<res.loc[upper_bound])\n    df['total sulfur dioxide']=df['total sulfur dioxide'][true_index]\ncheck_outlier7()\n\ndef check_outlier8():\n    plt.hist(df['density'])\n    lower_bound=0.1\n    upper_bound=0.95\n    res=df['density'].quantile([lower_bound,upper_bound])\n    print(res)\n    true_index=(res.loc[lower_bound]<df['density'].values) & \\\n        (df['density'].values<res.loc[upper_bound])\n    df['density']=df['density'][true_index]\ncheck_outlier8()\n\ndef check_outlier9():\n    plt.hist(df['pH'])\n    lower_bound=0.1\n    upper_bound=0.95\n    res=df['pH'].quantile([lower_bound,upper_bound])\n    print(res)\n    true_index=(res.loc[lower_bound]<df['pH'].values) & \\\n        (df['pH'].values<res.loc[upper_bound])\n    df['pH']=df['pH'][true_index]\ncheck_outlier9()\n\ndef check_outlier10():\n    plt.hist(df['sulphates'])\n    lower_bound=0.1\n    upper_bound=0.95\n    res=df['sulphates'].quantile([lower_bound,upper_bound])\n    print(res)\n    true_index=(res.loc[lower_bound]<df['sulphates'].values) & \\\n        (df['sulphates'].values<res.loc[upper_bound])\n    df['sulphates']=df['sulphates'][true_index]\ncheck_outlier10()\n\ndef check_outlier11():\n    plt.hist(df['alcohol'])\n    lower_bound=0.1\n    upper_bound=0.95\n    res=df['alcohol'].quantile([lower_bound,upper_bound])\n    print(res)\n    true_index=(res.loc[lower_bound]<df['alcohol'].values) & \\\n        (df['alcohol'].values<res.loc[upper_bound])\n    df['alcohol']=df['alcohol'][true_index]\ncheck_outlier11()\n","013ca5d2":"df['fixed acidity'].fillna(8,inplace=True)\ndf['volatile acidity'].fillna(0.535,inplace=True)\ndf['citric acid'].fillna(0.27,inplace=True)\ndf['residual sugar'].fillna(2.2,inplace=True)\ndf['chlorides'].fillna(0.8,inplace=True)\ndf['free sulfur dioxide'].fillna(15,inplace=True)\ndf['total sulfur dioxide'].fillna(40,inplace=True)\ndf['density'].fillna(0.9968,inplace=True)\ndf['pH'].fillna(3.32,inplace=True)\ndf['sulphates'].fillna(0.63,inplace=True)\ndf['alcohol'].fillna(10.3,inplace=True)\n","ab6bf5e8":"bins = (1, 6.5, 10)\ngroup_names = ['bad', 'good']\ndf['quality'] = pd.cut(df['quality'], bins = bins, labels = group_names)","ca67550c":"x=df.iloc[:,:-1]\ny=df.iloc[:,11]","d2f8afff":"from sklearn.preprocessing import LabelEncoder , OneHotEncoder\nlabel = LabelEncoder()\ny = label.fit_transform(y)","c0798208":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=12)\n","2794b62d":"from sklearn.preprocessing import StandardScaler\nsc_x = StandardScaler()\nx_train = sc_x.fit_transform(x_train)\nx_test = sc_x.transform(x_test)","eef533f5":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier(n_estimators=10,criterion='entropy',max_depth=5)\nrfc.fit(x_train,y_train)\ny_predict=rfc.predict(x_test)\nscore3=accuracy_score(y_test,y_predict)\nprint(score3)","8ae70183":"from sklearn.model_selection import cross_val_score\nCV=cross_val_score(rfc,x_train,y_train,cv=5)\nprint(CV.mean())","c7916dc5":"***FILLING ALL THE NULL VALUES***","79fb2526":"***IMPORTING THE STANDARDSCALER FOR TRANSFORMING THE DATA INTO VAULES BETWEEN -1 TO 1***","5550ac44":"***ENCODING THE Y WHICH IS JUST SPLITTING AND WHICH IS HOLDING THE TARGET VARIABLE***","d5b53a5c":"***HERE WE ARE SIMPLY IMPORTING THE DATASET***","9c52dd72":"***USING RANDOMFORESTCLASSIFIER****","80d54fbe":"***SPLITTING THE DATASET INTO X AND Y***","6727870d":"***CHECKING THE ACCURACY USING CROSS VALIDATION***","80b4aaac":"***CHECKING FOR THE OUTLIERS***"}}