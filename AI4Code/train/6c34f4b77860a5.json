{"cell_type":{"e0f28137":"code","6f82a782":"code","42e6e84f":"code","ebb82f00":"code","6ee45bee":"code","a6ef1931":"code","45a8987d":"code","8665d9ee":"code","d240a3f6":"code","df3515b7":"code","e5d5fdbd":"code","39381de8":"code","d54aa4b3":"code","473e1e6b":"code","c3e290df":"code","ea72de40":"code","25a5c76c":"code","035efae3":"code","79fdc76f":"code","c04bd9b8":"code","e62342c8":"code","a335770e":"code","3c23c0b6":"code","d4e32289":"code","6a45c2c6":"code","de4cbbe8":"code","93bd6d24":"code","b8ef692b":"code","0379b892":"code","06e59882":"code","9dd8caba":"code","3b89c716":"code","4892f0b7":"code","db99221e":"code","f3eac58c":"code","69c46cde":"code","281dec74":"code","441664f2":"code","b0b17c3c":"code","f2b3cb8e":"code","5e48eb2f":"code","51c0e8f8":"code","0163d3e6":"code","10a3729e":"code","92fbebac":"code","cb095242":"code","14c13fdf":"code","d9c9cea0":"code","e2749eaa":"code","9e7ca1b9":"code","964db893":"code","7e6c2b97":"code","4dd4e486":"code","4425ae09":"code","032a7825":"code","2fe864ee":"code","b6fb4f81":"code","442f17f4":"code","6bb0ddcd":"code","5c9090ce":"code","7d9a6111":"code","06329650":"code","74b065ee":"code","9d335039":"code","0241364a":"code","061bc972":"code","3f208310":"code","b6e1ba06":"code","3992bbab":"code","f8f918b7":"code","98d0100f":"code","83954452":"code","1eb0516c":"code","8346d5d3":"code","e0911d75":"code","3680e153":"code","e92ed9b2":"code","34378581":"markdown","bca5588d":"markdown","8c425804":"markdown","c47b7cef":"markdown","995c00e6":"markdown","1a2a9fe6":"markdown","13fa8e56":"markdown","a4087332":"markdown","70c97a81":"markdown","1766b9af":"markdown","0a625b13":"markdown","56db72b6":"markdown","0be525b7":"markdown","05a9cdeb":"markdown","773e7a95":"markdown","47a5d556":"markdown","5ef1b55b":"markdown","ef4e9a4e":"markdown","d0000856":"markdown","cf455bec":"markdown","52ff80b0":"markdown","e545698e":"markdown","fbb20f57":"markdown","e115b460":"markdown","9e7488a1":"markdown","8b608365":"markdown","62a4fc53":"markdown","297d6851":"markdown","56d0b7e7":"markdown","cd2af85f":"markdown","d99d64a8":"markdown","3c78db3f":"markdown","502c5362":"markdown","04415140":"markdown","767dbd87":"markdown","3fa53064":"markdown","42844e61":"markdown","e326f5b6":"markdown","bbdd241a":"markdown","ec8ef3f7":"markdown","d6a9ebcc":"markdown","9e62870a":"markdown","413c8777":"markdown","27a160be":"markdown","5acf1210":"markdown","4de118d1":"markdown","f1649da5":"markdown","be3e00ed":"markdown","851faf1d":"markdown","11e7c922":"markdown","a1ef2484":"markdown","77626600":"markdown","cfa1286f":"markdown","beb69740":"markdown","9790efcf":"markdown","da4eab4b":"markdown","ad5bb46b":"markdown","4135dc54":"markdown","c11c78ce":"markdown","aa1377a0":"markdown","18ef2d8b":"markdown","85bb5cf3":"markdown","615dbabe":"markdown","e471c3ac":"markdown","0d6e57f5":"markdown","2063743f":"markdown","2f433e5f":"markdown","e05f0875":"markdown","3c18f8c9":"markdown","2f943ba1":"markdown","00b81568":"markdown","612ee41f":"markdown","c503ea0f":"markdown","cc0ee99f":"markdown","d95e4b76":"markdown","dcd4485a":"markdown","1643ed49":"markdown","71774268":"markdown","cdde8db2":"markdown","f96ebe40":"markdown","69861449":"markdown","dc042b6d":"markdown","8989d0d7":"markdown","7dc4fee3":"markdown","058cb5fb":"markdown","ac4291b9":"markdown","71215e4f":"markdown","82b74edb":"markdown"},"source":{"e0f28137":"# Importing libraries\nimport numpy as np\nimport pandas as pd","6f82a782":"# we can set numbers for how many rows and columns will be displayed\npd.set_option('display.min_rows', 10) #default will be 10 \npd.set_option('display.max_columns', 20)","42e6e84f":"# read csv file\n\ndf = pd.read_csv('..\/input\/online-store-customer-data\/online_store_customer_data.csv')\ndf.head(3)","ebb82f00":"# Loading csv file with skip first 2 rows without header\ndf_csv = pd.read_csv('..\/input\/online-store-customer-data\/online_store_customer_data.csv', skiprows=2, header=None)\ndf_csv.head(3)","6ee45bee":"# Read csv file from url\nurl=\"https:\/\/raw.githubusercontent.com\/norochalise\/medium\/main\/pandas_tutorial\/dataset\/online_store_customer_data.csv\"\ndf_url = pd.read_csv(url)\ndf_url.head(3)","a6ef1931":"# display first 3 rows\ndf.head(3)\n","45a8987d":"# display last 6 rows\ndf.tail(6)","8665d9ee":"# Display random 7 sample rows\ndf.sample(7)","d240a3f6":"df.info()","df3515b7":"# display datatypes\ndf.dtypes","e5d5fdbd":"df.dtypes.value_counts()","39381de8":"df.shape","d54aa4b3":"df.columns","473e1e6b":"# display Age columns first 3 rows data\ndf['Age'].head(3)","c3e290df":"# display first 4 rows of Age, Transaction_date and Gender columns\ndf[['Age', 'Transaction_date', 'Gender']].head(4)","ea72de40":"# for display 2nd to 6th rows\ndf[2:7]\n\n# for display starting to 10th\ndf[:11]\n\n# for display last two rows\ndf[-2:]\n","25a5c76c":"# Drop unwanted columns\ndf.drop(['Transaction_ID'], axis=1, inplace=True)","035efae3":"# create new df_col dataframe from df.copy() method. \ndf_col = df.copy()\n\n# rename columns name\ndf_col.rename(columns={\"Transaction_date\": \"Date\", \"Gender\": \"Sex\"}, inplace=True)\ndf_col.head(3)","79fdc76f":"# Add a new ajusted column which value will be amount_spent * 100\ndf_col['new_col'] = df_col['Amount_spent'] * 100","c04bd9b8":"df_col.head(3)","e62342c8":"df_col.head(3)","a335770e":"# changing Female to Woman and Male to Man in Sex column.\n#first argument in loc function is condition and second one is columns name. \ndf_col.loc[df_col.Sex == \"Female\", 'Sex'] = 'Woman' \ndf_col.loc[df_col.Sex == \"Male\", 'Sex'] = 'Man'\n\n","3c23c0b6":"df_col.head(3)","d4e32289":"df_col.info()","6a45c2c6":"# change object type to datefime64 format\ndf_col['Date'] = df_col['Date'].astype('datetime64[ns]')\n\n# change float64 to float32 of Referal columns\ndf_col['Referal'] = df_col['Referal'].astype('float32')\n","de4cbbe8":"df_col.info()","93bd6d24":"# Display duplicated entries \ndf.duplicated().sum()","b8ef692b":"# duplicate rows dispaly, keep arguments will--- 'first', 'last' and False\nduplicate_value = df.duplicated(keep='first')\n\ndf.loc[duplicate_value, :]","0379b892":"# dropping ALL duplicate values\ndf.drop_duplicates(keep = 'first', inplace = True)","06e59882":"df.isna().sum().sort_values(ascending=False)","9dd8caba":"# df copy to df_copy\ndf_new = df.copy()","3b89c716":"#Delete Nan rows of Job Columns\ndf_new.dropna(subset = [\"Employees_status\"], inplace=True)","4892f0b7":"df_new.drop(columns=['Amount_spent'], inplace=True)","db99221e":"df_new.isna().sum().sort_values(ascending=False)","f3eac58c":"df['Gender'].fillna('Unknown', inplace=True)","69c46cde":"# Impute Mean in Amount_spent columns\nmean_amount_spent = df['Amount_spent'].mean()\ndf['Amount_spent'].fillna(mean_amount_spent, inplace=True)\n\n#Impute Median in Age column\nmedian_age = df['Age'].median()\ndf['Age'].fillna(median_age, inplace=True)\n\n# Impute Mode in Employees_status column\nmode_emp = df['Employees_status'].mode().iloc[0]\ndf['Employees_status'].fillna(mode_emp, inplace=True)","281dec74":"\ndf['Referal'].fillna(method='ffill', inplace=True)","441664f2":"df.isna().sum().sum()","b0b17c3c":"df_memory = df.copy()","f2b3cb8e":"memory_usage = df_memory.memory_usage(deep=True)\nmemory_usage_in_mbs = round(np.sum(memory_usage \/ 1024 ** 2), 3)\nprint(f\" Total memory taking df_memory dataframe is : {memory_usage_in_mbs:.2f} MB \")","5e48eb2f":"# Object datatype to category convert\ndf_memory[df_memory.select_dtypes(['object']).columns] = df_memory.select_dtypes(['object']).apply(lambda x: x.astype('category'))","51c0e8f8":"# convert object to category\ndf_memory.info(memory_usage=\"deep\")\n","0163d3e6":"# Change Referal column datatypes\ndf_memory['Referal'] = df_memory['Referal'].astype('float32')","10a3729e":"# convert object to category\ndf_memory.info(memory_usage=\"deep\")","92fbebac":"df.describe().T","cb095242":"df.describe(include=object).T","14c13fdf":"# Calculate Mean\nmean = df['Age'].mean()\n\n# Calculate Median\nmedian = df['Age'].median()\n\n#Calculate Mode\nmode = df['Age'].mode().iloc[0]\n\n# Calculate standard deviation\nstd = df['Age'].std()\n\n# Calculate Minimum values\nminimum = df['Age'].min()\n\n# Calculate Maximum values\nmaximum = df.Age.max()\n\nprint(f\" Mean of Age : {mean}\")\nprint(f\" Median of Age : {median}\")\nprint(f\" Mode of Age : {mode}\")\nprint(f\" Standard deviation of Age : {std:.2f}\")\nprint(f\" Maximum of Age : {maximum}\")\nprint(f\" Menimum of Age : {minimum}\")","d9c9cea0":"# calculate correlation\ndf.corr()","e2749eaa":"# for display how many unique values are there in State_names column\ndf['State_names'].nunique()","9e7ca1b9":"# for display uniqe values of State_names column\ndf['State_names'].unique()","964db893":"df['Gender'].value_counts()","7e6c2b97":"# Calculate percentage of each category\ndf['Gender'].value_counts(normalize=True)","4dd4e486":"df['State_names'].value_counts().sort_values(ascending = False).head(20)","4425ae09":"# Sort Values by State_names\ndf.sort_values(by=['State_names']).head(3)","032a7825":"# Sort Values Amount_spent with ascending order\ndf.sort_values(by=['Amount_spent']).head(3)","2fe864ee":"# Sort Values Amount_spent with descending order\ndf.sort_values(by=['Amount_spent'], ascending=False).head(3)","b6fb4f81":"# nlargest\ndf.nlargest(4, 'Amount_spent').head(10) # first argument is how many rows you want to disply and second one is columns name","442f17f4":"# nsmallest\ndf.nsmallest(3, 'Age').head(10)","6bb0ddcd":"# filtering - Only show Paypal users\ncondition = df['Payment_method'] == 'PayPal'\ndf[condition].head(4)","5c9090ce":"# first create 3 condition\nfemale_person = df['Gender'] == 'Female'\nmarried_person = df['Marital_status'] == 'Married'\nloc_newyork = df['State_names'] == 'New York'\n\n# we passing condition on our dataframe\ndf[female_person & married_person & loc_newyork].head(4)","7d9a6111":"df[['Age', 'Amount_spent']].groupby(df['Gender']).max()\n","06329650":"# Group by one columns\nstate_gender_res = df[['Age','Gender','Amount_spent']].groupby(['Gender']).agg(['count', 'mean', 'max'])\nstate_gender_res","74b065ee":"#Group By multiple columns\nstate_gender_res = df[['State_names','Gender','Payment_method','Amount_spent']].groupby([ 'State_names','Gender', 'Payment_method']).agg(['count', 'min', 'max'])\nstate_gender_res.head(12)","9d335039":"pd.crosstab(df.Marital_status, df.Payment_method)","0241364a":"pd.crosstab(df.Marital_status, df.Payment_method, margins=True, margins_name=\"Total\")","061bc972":"pd.crosstab(df.Marital_status, df.Payment_method, normalize=True, margins=True, margins_name=\"Total\")","3f208310":"pd.crosstab(df.Marital_status, [df.Payment_method, df.Employees_status])","b6e1ba06":"dict_line = {\n    'year': [2016, 2017, 2018, 2019, 2020, 2021],\n    'price': [200, 250, 260, 220, 280, 300]\n}\ndf_line = pd.DataFrame(dict_line)","3992bbab":"# use plot() method on the dataframe\ndf_line.plot('year', 'price');","f8f918b7":"df['Employees_status'].value_counts().plot(kind='bar');","98d0100f":"df['Employees_status'].value_counts().plot(kind='barh');","83954452":"df['Segment'].value_counts().plot(\n    kind='pie');","1eb0516c":"df.plot(y=['Amount_spent'], kind='box');","8346d5d3":"import matplotlib.pyplot as plt\n\nnp.warnings.filterwarnings('ignore', category=np.VisibleDeprecationWarning) \nfig, ax = plt.subplots(figsize=(6,6)) \n\ndf.boxplot(by ='Employees_status', column =['Amount_spent'],ax=ax, grid = False);","e0911d75":"df.plot(\n    y='Age',\n    kind='hist',\n    bins=10\n);","3680e153":"df.plot(\n    y='Age',\n    xlim=(0, 100),\n    kind='kde'\n);","e92ed9b2":"df.plot(\n    x='Age',\n    y='Amount_spent',\n    kind='scatter'\n);","34378581":"## 6.6 KDE plot","bca5588d":"#### Display missing values information","8c425804":"When we work on large datasets, There we get one big issue is a memory problem. We need too large resources for dealing with this. But there are some methods in pandas to deal with this. Here are some methods or strategies to deal with this problem with help of pandas.","c47b7cef":"If we have a large number of nan values in particular columns then dropping those columns might be a good decision rather than imputing.","995c00e6":"In our `Date` columns, it's object type so now we will convert this to date types, and also we will convert `Referal` columns float64 to float32.\n","1a2a9fe6":"**Method 1** - Impute fixed value like 0, 'Unknown' or 'Missing' etc. We inpute Unknown in Gender columns","13fa8e56":"## 6.7 Scatterplot\n","a4087332":"### Import\n\n","70c97a81":"Now we deal with all missing values with different methods. So now we haven't any null values.","1766b9af":"**Method 3** - Imputing forward fill or backfill by `ffill` and `bfill`. In `ffill` missing value impute from the value of the above row and for `bfill` it's taken from the below rows value.","0a625b13":"#### Delete entire columns","56db72b6":"#### Retrieving information about dataframe ","0be525b7":"#### Change int64 or float64 to int 32, 16, or 8","05a9cdeb":"We know already above code will display only numeric columns basic statistical information. for object or category columns we can use `describe(include=object)` .","773e7a95":"**Method 2** - Impute Mean, Median and Mode","47a5d556":"## 6.5 Histogram\n\n","5ef1b55b":"In this crosstab features, we can pass multiple columns names for grouping and analyzing data. For instance, If we want to see how the `Payment_method` and `Employees_status` are distributed by `Marital_status` then we will pass these columns' names in `crosstab()` function and it will show below.","ef4e9a4e":"For sorting our dataframe by Amount_spent with ascending order:","d0000856":"In a boxplot, we can plot the distribution of categorical variables against a numerical variable and compare them. Let's plot it with the Employees_status and Amount_spent columns with pandas `boxplot()` method:","cf455bec":"For creating a simple crosstab between Maritatal_status and Payment_method columns we just use `crosstab()` with both column names.","52ff80b0":" ## 3.2 Data Cleaning\nAfter the explore our datasets may need to clean them for better analysis. Data coming in from multiple sources so It's possible to have an error in some values. This is where data cleaning becomes extremely important. In this section, we will delete unwanted columns, rename columns, correct appropriate data types, etc.\n","e545698e":"#### Display number of rows and columns. ","fbb20f57":"We can include subtotals by `margins` parameter:","e115b460":"Alternatively, We can use `nlargest()` and `nsmallest()` functions for displaying largest and smallest values with desired numbers. for example, If we want to display 4 largest Amount_spent rows then we use this:","9e7488a1":"<a id=\"section-six\"><\/a>\n# 6. Data Visualization","8b608365":"# Pandas Complete tutorial for data science in 2022\n\n**This is part of the original article [Pandas Complete tutorial for data science in 2022](https:\/\/norochalise.medium.com\/pandas-complete-tutorial-for-data-science-in-2022-685a4c6df347)**\n","62a4fc53":"We can calculate the mean, median, mode, maximum values, minimum values of individual columns we simply use these functions.","297d6851":"#### Groupby\n","56d0b7e7":"For 3 smallest Amount_spent rows","cd2af85f":"#### String value change or replace ","d99d64a8":"We can plot this by one column or multiple columns. For multiple columns, we need to pass columns name in `y` variable as a list.","3c78db3f":"#### Adding a new column to a DataFrame\n\n","502c5362":"## 3.1 Data Exploring","04415140":"## 5.2 Basic built in function for data analysis ","767dbd87":"#### Delete Nan rows","3fa53064":"The above line chart shows prices over a different time. It shows like price trend.","42844e61":"#### Delete Columns name","e326f5b6":"After changing only one column's data types we reduce 216 kb to 179 kb.\n","bbdd241a":"#### Change Columns name","ec8ef3f7":"<a id=\"section-one\"><\/a>\n# 1. Setup\n","d6a9ebcc":"**Note: Before changing datatypes please make sure it's consequences.**","9e62870a":"Handling missing values in the common task in the data pre-processing part. For many reasons most of the time we will encounter missing values. Without dealing with this we can't do the proper model building. For this section first, we will find out missing values then we decided how to handle them. We can handle this by removing affected columns or rows or replacing appropriate values there.","413c8777":"For sorting our dataframe by Amount_spent with descending order:","27a160be":"Our data frame is small in size. Which is 1.15 MB. Now We will convert our object datatype to category.","5acf1210":"**Grouping by multiple columns:** To find total count, maximum and minimum values of Amount_spent by State_names, Gender, and Payment_method then we can pass these columns names under `groupby()` function and add `.agg()` with `count`, `mean`, `max` argument.","4de118d1":"By default, pandas store numeric values to int64 or float64. Which takes more memory. If we have to store small numbers then we can change to 64 to 32, 16, and so on. For example, our Referal columns have only 0 and 1 values so for that we don't need to store at float64. so now we change it to float16.","f1649da5":"## 3.3 Remove duplicate","be3e00ed":"#### Impute missing values","851faf1d":"#### Number of uniqe values in category column","11e7c922":"**For horizontal bar:**","a1ef2484":"## 3.4 Handling missing values","77626600":"#### Retrieving sample rows from data frame.\n\n","cfa1286f":"<a id=\"section-four\"><\/a>\n# 4. Memory management","beb69740":"### Read CSV file from URL","9790efcf":"#### Retrieving a Range of Rows","da4eab4b":"<a id=\"section-seven\"><\/a>\n# 7. Reference\n\n\n1. [Pandas user guide](https:\/\/pandas.pydata.org\/docs\/user_guide\/index.html)\n2. [Pandas 1.x Cookbook](https:\/\/www.packtpub.com\/product\/pandas-1-x-cookbook-second-edition\/9781839213106)\n3. [The Data Wrangling Workshop](https:\/\/www.packtpub.com\/product\/the-data-wrangling-workshop-second-edition\/9781839215001) \n4. [Python for Data Analysis](https:\/\/www.oreilly.com\/library\/view\/python-for-data\/9781449323592\/)\n5. [Data Analysis with Python: Zero to Pandas - Jovian YouTube Channel](https:\/\/www.youtube.com\/watch?v=BaV4PRXYNIY&list=PLyMom0n-MBrpzC91Uo560S4VbsiLYtCwo)\n6. [Best practices with pandas - Data School YouTube Channel](https:\/\/www.youtube.com\/watch?v=hl-TGI4550M&list=PL5-da3qGB5IBITZj_dYSFqnd_15JgqwA6)\n7. [Pandas Tutorials - Corey Schafer YouTube Channel](https:\/\/www.youtube.com\/watch?v=ZyhVh-qRZPA&list=PL-osiE80TeTsWmV9i9c58mdDCSskIFdDS)\n8. [Pandas Crosstab Explained](https:\/\/pbpython.com\/pandas-crosstab.html)","ad5bb46b":"We can apply multiple conditional queries like before. For example, if we want to display all Married female people who lived in New York then we use the following:","4135dc54":"#### Retrieving rows from data frame.","c11c78ce":"## 5.1. Calculating Basic statistical measurement","aa1377a0":"For creating a line plot in pandas we use `.plot()` with two columns name for the argument. For example, we create a line plot from one dummy dataset.","18ef2d8b":"#### Conditional queries on Data","85bb5cf3":"\n<a id=\"section-five\"><\/a>\n# 5. Data Analysis","615dbabe":"Visualization is the key to data analysis. The most popular python package for visualization are matplotlib and seaborn but sometimes pandas will be handy for you. Pandas also provide some visualization plots easily. For the basic analysis part, it will be easy to use. For this section, we are exploring some different types of plots using pandas. Here are the plots.","e471c3ac":"Now Sex columns values are changed Female to Woman and Male to Man.","0d6e57f5":"### Table of content\n\n1. [Setup](#section-one)\n2. [Loading Different Data Formats](#section-two)\n3. [Data Preprocessing](#section-three)\n4. [Memory Management](#section-four)\n5. [Data Analysis](#section-five)\n6. [Data Visualization](#section-six)\n7. [Reference](#section-seven)\n\n\n\n\n\n\n\n\n\n","2063743f":"### Reading CSV file\n","2f433e5f":"## 5.3 Summarizing or grouping data","e05f0875":"<a id=\"section-three\"><\/a>\n# 3. Data preprocessing\nData preprocessing is the process of making raw data to clean data. This is the most crucial part of data the science. In this section, we will explore data first then we remove unwanted columns, remove duplicates, handle missing data, etc. After this step, we get clean data from raw data.","3c18f8c9":"If We want a display with percentage than `normalize=True` parameter help","2f943ba1":"In pandas we can display the correlation of different numeric columns. For this we can use `.corr()` function.","00b81568":"## 6.3 Pie plot","612ee41f":"#### Cross Tabulation (Crosstab)","c503ea0f":"#### Change object to category datatypes","cc0ee99f":"#### Shows all unique values","d95e4b76":"## 6.2 Bar plot\n\n","dcd4485a":"Now its reduce 1.15 megabytes to 216.6 kb. It's almost reduced 5.5 times.","1643ed49":"**Grouping by one column:** For example, if we want to find `maximum` values of `Age` and `Amount_spent` by `Gender` then we can use this:","71774268":"To find `mean`, `count`, and `max` values of `Age` and `Amount_spent` by `Gender` then we can use `agg()` function with `groupby()` .","cdde8db2":"## 6.1 Line plot\n","f96ebe40":"If we have less Nan value then we can delete entire rows by `dropna()` function. For this function, we will add columns name in subset parameter.","69861449":"#### Datatypes change","dc042b6d":"Sometimes if we delete entire columns that will be not the appropriate approach. Delete columns can affect our model building because we will lose our main features. For imputing we have many approaches so here are some of the most popular techniques.","8989d0d7":"**For vertical bar:**","7dc4fee3":"### Change datatypes","058cb5fb":"<a id=\"section-two\"><\/a>\n# 2. Loading Different Data Formats Into a Pandas Data Frame\n\n\n","ac4291b9":"## 6.4 Box Plot\n","71215e4f":"#### Counts of unique values","82b74edb":"If we want to show with the percentage of occurrence rather number than we use `normalize=True` argument in `value_counts()` function"}}