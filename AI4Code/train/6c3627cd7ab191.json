{"cell_type":{"d53e4155":"code","3ef224db":"code","3c59f492":"code","2d77f0cd":"code","05c51216":"code","23e13fdd":"code","593b1236":"code","482b673e":"code","6da619ca":"code","80f94213":"code","873b8942":"code","5ed72dfb":"code","7cda69bc":"code","73cbfa6a":"code","2d1e1711":"code","0d5ed66c":"code","e7be1e0c":"code","ab63a32d":"code","01baf70c":"code","da80f394":"code","8d4ce34a":"markdown"},"source":{"d53e4155":"# Importing libraries\n\nimport numpy as np\nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()\nfrom plotly import tools\nimport plotly.tools as tls\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","3ef224db":"result_df = pd.read_csv(\"..\/input\/StudentsPerformance.csv\")\nresult_df.head()","3c59f492":"result_df.shape","2d77f0cd":"result_df.info()","05c51216":"result_df.isnull().sum()","23e13fdd":"number = len(result_df)\nprint(\"Total Number of Students = \", number)","593b1236":"trace = go.Pie(labels = result_df['gender'].value_counts().index,\n               values = result_df['gender'].value_counts().values,\n               marker = dict(colors=['#009688','#ec5a5a'], line=dict(color='#000000', width=0.2))\n              )\n\nplotly.offline.iplot([trace], filename=\"piechart\")\ngo.Figure()","482b673e":"result_df.head(10)","6da619ca":"result_df['test preparation course'].unique()","80f94213":"result_df['race\/ethnicity'].unique()\n","873b8942":"marks_df = result_df[['math score','reading score','writing score']]\nmarks_df.head()\n\ntrace = go.Histogram(x = marks_df['math score'],\n                     name = 'Math Score',\n                     marker = dict(color='#1E8449'),\n                     opacity = 0.70)\n\ntrace2 = go.Histogram(x = marks_df['reading score'],\n                      name = 'Reading Score',\n                      marker = dict(color='#C0392B'),\n                      opacity = 0.70)\n\ntrace3 = go.Histogram(x = marks_df['writing score'],\n                      name = 'Writing Score',\n                      marker = dict(color='#2874A6'),\n                      opacity = 0.70)\n\ndata = [trace, trace2, trace3]\n\nlayout = go.Layout(barmode = 'stack', title='Score-Wise Distribution')\n\nfig = go.Figure(data=data, layout = layout)\n\nplotly.offline.iplot(fig)","5ed72dfb":"passed_math = result_df.loc[result_df['math score'] >= 50]['math score'].count()\nfailed_math = result_df.loc[result_df['math score'] < 50]['math score'].count()\n\npassed_reading = result_df.loc[result_df['reading score'] >= 50]['reading score'].count()\nfailed_reading = result_df.loc[result_df['reading score'] < 50]['reading score'].count()\n\npassed_writing = result_df.loc[result_df['writing score'] >= 50]['writing score'].count()\nfailed_writing = result_df.loc[result_df['writing score'] < 50]['writing score'].count()\n\nsubjects = ['Math Score', 'Writing Score', 'Reading Score']\n\ntrace1 = go.Bar(y = [passed_math,passed_reading,passed_writing],\n                x = subjects,\n                name = 'Passed',\n                marker = dict(color='#BD5039'))\ntrace2 = go.Bar(y = [failed_math,failed_reading,failed_writing],\n                x = subjects,\n                name = 'Failed',\n                marker = dict(color='#358C73'))\n\ndata = [trace1,trace2]\nlayout = go.Layout(barmode = 'stack',\n                   xaxis = dict(tickangle=-25)  )\n\nfig = go.Figure(data=data, layout=layout)\nplotly.offline.iplot(fig)","7cda69bc":"result_df['Total_Score'] = result_df['math score'] + result_df['reading score'] + result_df['writing score']\n\nresult_df['Percentage'] = (result_df['Total_Score']\/300)*100\nresult_df.head()","73cbfa6a":"trace = go.Pie(labels = result_df['parental level of education'].value_counts().index,\n               values = result_df['parental level of education'].value_counts().values,\n               marker = dict(colors=['#922B21','#CD6155','#F1948A','#F5B7B1','#5DADE2','#AED6F1'], \n               line=dict(color='#000000', width=0.2))\n              )\n\nplotly.offline.iplot([trace], filename=\"piechart\")\ngo.Figure()","2d1e1711":"trace1 = go.Box(y = result_df.loc[result_df['parental level of education'] == \"master's degree\"]['Percentage'],\n                name = \"Master's Degree\",\n                marker = dict(color='#AF4040')\n                )\n\ntrace2 = go.Box(y = result_df.loc[result_df['parental level of education'] == \"bachelor's degree\"]['Percentage'],\n                name = \"Bachelor's Degree\",\n                marker = dict(color='#4986B6'))\n\ntrace3 = go.Box(y = result_df.loc[result_df['parental level of education'] == \"associate's degree\"]['Percentage'],\n                name = \"Associate's Degree\",\n                marker = dict(color='#3C783E'))\n\ntrace4 = go.Box(y = result_df.loc[result_df['parental level of education'] == \"some college\"]['Percentage'],\n                name = \"Some College\",\n                marker = dict(color='#BD9428'))\n\ntrace5 = go.Box(y = result_df.loc[result_df['parental level of education'] == \"high school\"]['Percentage'],\n                name = \"High School\",\n                marker = dict(color='#6D3E83'))\n\ntrace6 = go.Box(y = result_df.loc[result_df['parental level of education'] == \"some high school\"]['Percentage'],\n                name = \"Some High School\",\n                marker = dict(color='#E5751A'))\n\ndata = [trace1,trace2,trace3,trace4,trace5,trace6]\n\nfig = go.Figure(data=data)\nplotly.offline.iplot(fig)","0d5ed66c":"result_df['test preparation course'].unique()","e7be1e0c":"temp_df = result_df[['lunch','Percentage']]\n\nsns.set_style('darkgrid')\nplt.figure(figsize=(12,10))\n\nsns.swarmplot(x = temp_df['lunch'],\n            y = temp_df['Percentage'],\n            data = temp_df\n           )","ab63a32d":"result_df['lunch'].value_counts()","01baf70c":"temp_df = result_df[['test preparation course','Percentage']]\n\nsns.set_style('darkgrid')\nplt.figure(figsize=(12,10))\n\nax = sns.stripplot(x = temp_df['Percentage'],\n               y = result_df['test preparation course'],\n               data = temp_df,\n               jitter = True,\n            linewidth = .5,\n            palette='YlGnBu_r')\n\nax.set_xlabel('Percentage',fontsize=16, fontweight='bold', color='#191970')\nax.set_ylabel('test preparation course', fontsize=16, fontweight='bold', color='#191970')","da80f394":"trace0 = go.Violin(y = result_df.loc[result_df['race\/ethnicity'] == \"group A\"]['Percentage'],\n                   name = \"Group A\",\n                   box = dict(visible=True),\n                   marker = dict(color='#AF4040')\n                   )\n\ntrace1 = go.Violin(y = result_df.loc[result_df['race\/ethnicity'] == \"group B\"]['Percentage'],\n                   name = \"Group B\",\n                   box = dict(visible=True),\n                   marker = dict(color='#4986B6')\n                   )\n\ntrace2 = go.Violin(y = result_df.loc[result_df['race\/ethnicity'] == \"group C\"]['Percentage'],\n                   name = \"Group C\",\n                   box = dict(visible=True),\n                   marker = dict(color='#3C783E')\n                   )\n\ntrace3 = go.Violin(y = result_df.loc[result_df['race\/ethnicity'] == \"group D\"]['Percentage'],\n                   name = \"Group D\",\n                   box = dict(visible=True),\n                   marker = dict(color='#BD9428')\n                   )\n\ntrace4 = go.Violin(y = result_df.loc[result_df['race\/ethnicity'] == \"group E\"]['Percentage'],\n                   name = \"Group E\",\n                   box = dict(visible=True),\n                   marker = dict(color='#6D3E83')\n                   )\n\n\ndata = [trace0,trace1,trace2,trace3,trace4]\n\nfig = go.Figure(data=data)\nplotly.offline.iplot(fig)","8d4ce34a":"### Loading required libraries and data"}}