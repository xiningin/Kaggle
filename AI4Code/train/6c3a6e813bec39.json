{"cell_type":{"96d7745d":"code","0cf6556c":"code","8e1b09a4":"code","3f499b68":"code","0e8af731":"code","12f20cbf":"code","1e3f7ebf":"code","c7fedc47":"code","54ac5646":"markdown","f59f6508":"markdown","f67bfbad":"markdown"},"source":{"96d7745d":"import numpy as np\nimport pandas as pd\nimport os\nimport copy\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom tqdm.notebook import tqdm\nimport datetime\nimport gc\nfrom collections import OrderedDict, Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0cf6556c":"def read_data():\n    print('Reading train_labels.csv file....')\n    train_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')\n    print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n    \n    print('Reading train.csv file....')\n    train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv')\n    print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n\n    print('Reading test.csv file....')\n    test = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/test.csv')\n    print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n    print('Reading specs.csv file....')\n    specs = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/specs.csv')\n    print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n    return train, test, train_labels, specs, sample_submission","8e1b09a4":"%%time\n# read data\ntrain, test, train_labels, specs, sample_submission = read_data()","3f499b68":"train","0e8af731":"train[train['type'] == 'Clip']['game_time'].value_counts()","12f20cbf":"train['timestamp'] = pd.to_datetime(train['timestamp'])\ntest['timestamp'] = pd.to_datetime(test['timestamp'])\ncounts = [len(train[train['type'] == 'Clip']), len(test[test['type'] == 'Clip'])]\ndfs = [train, test]\nsizes = [train.shape[0], test.shape[0]]\nresults = []\nfor df, count, size in zip(dfs, counts, sizes):\n    res = df['game_time']\n    for i, row in tqdm(df[df['type'] == 'Clip'].iterrows(), total=count):\n        if i < size - 1:\n            res[i] = int((df.iloc[i + 1, 2] - df.iloc[i, 2]).total_seconds() * 1000) #in millisecond\n    results.append(res)\nfor df, res in zip(dfs, results):\n    df['game_time'] = res","1e3f7ebf":"train[train['type'] == 'Clip']['game_time'].value_counts()","c7fedc47":"train","54ac5646":"All clips have 0 in the game_time column.","f59f6508":"To fix that we can use this code:","f67bfbad":"In this kernel I explain how we can estimate clip duration. "}}