{"cell_type":{"7e73c0b9":"code","d96e4838":"code","5a8fc001":"code","7b29e27a":"code","0a33b64e":"code","be41ce58":"code","05b914db":"code","724a62e8":"markdown","79a019fe":"markdown"},"source":{"7e73c0b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d96e4838":"df=pd.read_csv(\"..\/input\/position-salaries\/Position_Salaries.csv\")\ndf.info()","5a8fc001":"#LINEAR REGRESSION\nx=df.iloc[:,1:2].values\ny=df.iloc[:,2:3].values\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nl=LinearRegression()\nl.fit(x,y)\nSalary_pred=l.predict(x)\ndf[\"Salary_pred\"]=Salary_pred\ndf\n#we are very off from the salary at first glance itself\n","7b29e27a":"#EVALUATING WITH METRICS\nrmse=np.sqrt(mean_squared_error(y,Salary_pred))\nR2=r2_score(y,Salary_pred)\narr={'linear_rmse':rmse,'linear_R2':R2}\narr","0a33b64e":"#Linear Regression fails severely in these cases and Polynomial Regression comes to the rescue.\nplt.scatter(x,y)\nplt.plot(x,Salary_pred,color='Red')","be41ce58":"#POLYNOMIAL REGRESSION \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_feat=PolynomialFeatures(degree=2)\nx_poly=poly_feat.fit_transform(x)\nl=LinearRegression()\nl.fit(x_poly,y)\ny_polypred=l.predict(x_poly)\nplt.scatter(x,y)\nplt.plot(x,y_polypred,color='r')","05b914db":"#CALCULATING ERROR TO COMPARE LINEAR AND POLYNOMIAL\npolyrmse=np.sqrt(mean_squared_error(y,y_polypred))\npolyR2=r2_score(y,y_polypred)\narr1={'Poly_rmse':polyrmse,'polyR2':polyR2}\narr.update(arr1)\narr","724a62e8":"**WE ALWAYS WANT A HIGH R2 SCORE AND A LOW RMSE SCORE. WE OBSERVE THAT THE POLYNOMIAL REGRESSION HAS A MUCH BETTER METRIC AND THE LINE FITS FAR BETTER THAN LINEAR IN CASE OF NON LINEAR DATA.\nCHOICE OF MODEL LIES ON THE ONE WHO IS IMPLEMENTING AFTER ALL.**\n\n*The degree of the POLYNOMIAL PREPROCESSING MUST NOT BE TOO HIGH ( OVERFITTING) or TOO LOW (UNDERFITTING).*","79a019fe":"Applying Polynomial Regression\n"}}