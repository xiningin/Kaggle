{"cell_type":{"39654752":"code","fddeadcc":"code","608391c7":"code","e131d6fb":"code","e398355b":"code","990db830":"code","cd9127be":"code","fa6f5cdb":"code","dcfd8016":"code","4a570e34":"code","188eeb33":"code","e362bfce":"code","c3cb41db":"code","3aba15b0":"code","f9cd1455":"code","1cb8d0c7":"code","58f175dc":"code","7123c32d":"code","50434b2c":"code","68cd41d1":"code","c3009f50":"code","ec40e2f0":"code","672f75ff":"code","916ac2bb":"code","53c6b2c8":"code","885004cb":"code","5a43747d":"code","8c8d49c3":"code","ede28f64":"code","5c2856a8":"code","13cb07b0":"code","73079e8c":"code","2f598227":"code","bd8ac2ed":"code","3057b043":"code","6665dbca":"code","1a4d86ac":"code","cc29ec92":"code","1c9412e5":"code","ca03e97f":"code","b41666b8":"code","6bbe0eff":"code","5e76d935":"code","09586b96":"code","08524110":"code","46f0ec23":"code","ff38e459":"code","2435d5b6":"code","787eeffc":"code","701be7b4":"code","ba38ab52":"code","a0cfc529":"code","ce6903ff":"code","ffeda906":"code","9d8497a1":"code","819205b7":"code","8600cd99":"code","ee2ab1b6":"code","bee66fda":"code","546c3f98":"code","26301d06":"code","10b0bb44":"code","f5e62178":"code","11a7d0d5":"code","7a746a8e":"code","7b11cd37":"code","eafdcc80":"code","2ee998f7":"code","f0b2aeea":"code","fa8b15e6":"code","384cd400":"code","6a11289e":"code","908bde12":"code","f9fa9647":"code","ea56cf14":"code","bfcb4323":"code","f4d4b62f":"code","c58d67a1":"code","3484d09d":"code","b0bed59a":"code","c57936f7":"code","0562da42":"code","6c5d6910":"code","4212339e":"code","e794ef57":"code","7df955fa":"code","622bac12":"code","b92b2043":"code","734ee46d":"code","03e9ca90":"code","cccdc71d":"code","06418627":"code","dcf56517":"code","23c0c8b6":"code","69932198":"code","4c50a3ed":"code","596ff4a7":"code","e123fe6a":"code","dfed75ca":"code","2e676dd2":"code","99cf06ea":"code","2ef196b1":"code","0ffadabc":"code","945d74ec":"code","0a81ca3d":"code","a121c1cb":"code","aa40ba72":"code","50fd51fe":"code","62a37913":"code","41bd39d1":"code","c16e6bb9":"code","1b158d7e":"code","60623bfe":"code","22b45fcb":"code","6b808134":"code","d3f14ca5":"code","43b1ffc8":"code","fbf04a15":"code","8579a6d7":"code","17a55c74":"code","025ee248":"code","16ec3421":"code","d3535a05":"code","229c8606":"code","b8e29caf":"code","4772931d":"code","0b81fafb":"code","0099df67":"code","add1eb7e":"code","c6624b10":"code","147f4d18":"code","e4eacae0":"code","32d85bf4":"code","a9ef01f2":"code","106f13b2":"code","5145c980":"code","537659eb":"code","c55f4ea9":"code","81d5d7cc":"code","b6999c89":"code","4ab9d445":"code","68affcd4":"code","7000e1e5":"code","70cf1a5a":"code","7c3a6f1e":"code","fbd4db35":"code","1e35a9ca":"code","d5924e1f":"code","b5b3cec9":"code","758cb612":"code","17a380d2":"markdown","7781dd30":"markdown","01ab42c9":"markdown","bd74be2c":"markdown","e454fd4b":"markdown","7b2e27ac":"markdown","2f77bac1":"markdown","bccd4841":"markdown","16ee2979":"markdown","32a6385e":"markdown","bf3bb0ba":"markdown","1b92d422":"markdown","88377db3":"markdown","bac46a7c":"markdown","84401894":"markdown","a80610e1":"markdown","7b414f3a":"markdown","7f732688":"markdown","659368aa":"markdown","c7a8da05":"markdown","f5661035":"markdown","8188d46c":"markdown","ead338cb":"markdown","6e27efe2":"markdown","4387e022":"markdown","b1e18e7b":"markdown","cf11a1ca":"markdown","fafa49af":"markdown","a1f1bf9f":"markdown","73dce751":"markdown","e9834396":"markdown","0df37446":"markdown","442f974c":"markdown","f28ef3fb":"markdown","766ea05e":"markdown","fe8006b6":"markdown","27dac446":"markdown","aaa6482a":"markdown","d3ad044d":"markdown","4dfc0f05":"markdown","9b2d0f36":"markdown","ad8471d0":"markdown","f278205f":"markdown","9d3d135c":"markdown","bbb126d2":"markdown","8015b7e9":"markdown","c9e5e4b8":"markdown","9820a872":"markdown","0824a933":"markdown","9177ecc7":"markdown","6b96eb5e":"markdown","86e65b2f":"markdown","a588ee9b":"markdown","9c2f2cd5":"markdown","d4843756":"markdown","b701638c":"markdown","935cc312":"markdown","92b4b60b":"markdown","93ca6cbd":"markdown","67f8b60e":"markdown","19ebf4ca":"markdown","215739b3":"markdown","6e2b3c39":"markdown","c7c97ded":"markdown","6284f3cb":"markdown","fafc4457":"markdown","4d107c76":"markdown","06fd2485":"markdown","7ed5ede7":"markdown","f99ca74d":"markdown","a3d2aaa0":"markdown","5f5b5216":"markdown","3451ed66":"markdown","e67bbe1c":"markdown","21301856":"markdown","f979d857":"markdown","0056b6ba":"markdown","fd6ea72a":"markdown","e6ec49c4":"markdown","dc027a43":"markdown","17542c01":"markdown","de72856d":"markdown","1d6d92d8":"markdown","ad1cf6b6":"markdown","27f551c1":"markdown","9121aae7":"markdown","cb1ef557":"markdown","f7de2251":"markdown","79469035":"markdown","60f8dd6b":"markdown","3a5ab89b":"markdown","0051d62e":"markdown","1ce0589a":"markdown","ee08151d":"markdown","c901651d":"markdown","2fe716d6":"markdown","a3b352cc":"markdown","eb9f578e":"markdown","a700e5ea":"markdown","5b0513ac":"markdown","e2b7e50e":"markdown","c7b71a33":"markdown","f5d45059":"markdown","8b64789a":"markdown","db54bf27":"markdown","45dce366":"markdown","d058ea32":"markdown","2b57def5":"markdown","6c4aac06":"markdown","fd9d9bbd":"markdown","e4c0bcc7":"markdown","92bed66d":"markdown","591b3037":"markdown","864d18e8":"markdown","3d06e5be":"markdown","2f5f2ba2":"markdown","f0582a50":"markdown","e720f619":"markdown","312ca7a7":"markdown","7306e8c5":"markdown","ad48eb0b":"markdown","975fa603":"markdown","edd9f816":"markdown","d50cfe23":"markdown","65081137":"markdown","c5f56545":"markdown","6475deeb":"markdown","f6a423d2":"markdown","96001fb5":"markdown","559223d3":"markdown","17c7bf37":"markdown","b411e8fe":"markdown","a2ed38a2":"markdown","c929c592":"markdown","529135b6":"markdown","d21d35a2":"markdown","ca5a8295":"markdown","5ca643fb":"markdown","8ab01264":"markdown","e6473347":"markdown","6d2866f5":"markdown","55377d9a":"markdown","60820c7c":"markdown","971bcb9e":"markdown","cb9f4285":"markdown","7bcab6fc":"markdown","6a0f4c81":"markdown","7226d7cb":"markdown","71384729":"markdown","92542e5e":"markdown","9199c3e6":"markdown","23168f80":"markdown","77515f80":"markdown","197a7374":"markdown","93cf165f":"markdown","d6662eac":"markdown","ffb2a9b2":"markdown","09a1bccd":"markdown","33956db4":"markdown","1b542eab":"markdown","33b77f6b":"markdown","f350b648":"markdown","635d04d0":"markdown","4608065f":"markdown","ce409609":"markdown","1df944c4":"markdown","c714c06c":"markdown","80de0656":"markdown","bee632fc":"markdown","ffce396c":"markdown","82405f5f":"markdown","00635551":"markdown","0c807e83":"markdown","3d12c56e":"markdown","2c78f00e":"markdown","a8fae63b":"markdown","7691c2b4":"markdown","ed9ebf2c":"markdown","b87a104d":"markdown","48b32df0":"markdown","f3da27e9":"markdown","c40a0f86":"markdown","3bfb8da0":"markdown","8dd5f72c":"markdown","ccaff522":"markdown","a7effc91":"markdown","bb8c409d":"markdown","9b463b84":"markdown","7ec42983":"markdown","dca9ea71":"markdown","5249fa5e":"markdown","9ad75730":"markdown","033ef1cd":"markdown","00bed037":"markdown","4246559e":"markdown","ec52406b":"markdown","4ca9ef2e":"markdown","3bb8f72f":"markdown","b42ff269":"markdown","eed103db":"markdown","7f03216f":"markdown","f91e36f5":"markdown","fb885dbc":"markdown","72c0912d":"markdown","6a4961f9":"markdown","d53b6f34":"markdown","6d6a8923":"markdown","0b127973":"markdown","9a0394eb":"markdown","eef01e21":"markdown","1b753395":"markdown","8040181a":"markdown","fba23d06":"markdown","737ef81f":"markdown","3f74a9d7":"markdown","3c6ddcbb":"markdown","db4c8eaa":"markdown","9e1bad85":"markdown","c8900261":"markdown","d34e61d1":"markdown","1a9d29ec":"markdown","9c554be3":"markdown","f842e4ca":"markdown","12fc2cdd":"markdown","8ca8d664":"markdown","4084d4be":"markdown","07f88a29":"markdown","4aed5569":"markdown","cbec628f":"markdown","e54562dc":"markdown","55e7a791":"markdown","e5080837":"markdown","d021076a":"markdown","dc17ac07":"markdown","8d862aad":"markdown","3fe7e43d":"markdown","809f61b8":"markdown","bd799b76":"markdown","8eaa6842":"markdown","01bba94f":"markdown","f4f1eee8":"markdown","8f788ec3":"markdown","f90f8d4a":"markdown","f68e13d0":"markdown","8cd0ff6b":"markdown","4fdc7bea":"markdown","d846c4c8":"markdown","8e68ef7b":"markdown","773ba905":"markdown","2eba152b":"markdown","09bf7ea3":"markdown","782574f4":"markdown","4768111d":"markdown","a3bd3244":"markdown","78b3b81f":"markdown","1b600a2e":"markdown","318708f3":"markdown","4001dddc":"markdown","349b2704":"markdown","d8f171d7":"markdown","f8824bcd":"markdown","d5e7b1b1":"markdown","b69681be":"markdown","525902e3":"markdown","51694e2c":"markdown","7c25aa56":"markdown","d549068b":"markdown","d2658927":"markdown","3e4ff6c1":"markdown","afea9c77":"markdown","1d6744b3":"markdown","3ffe63b4":"markdown","14f8ace1":"markdown","1f0e23e0":"markdown","9d64c9b1":"markdown","846da55e":"markdown","658be85d":"markdown","37e06d6e":"markdown","52a580ef":"markdown","ffcde02c":"markdown","c5c05ceb":"markdown","a145665d":"markdown","eb7f5a81":"markdown","cad2d583":"markdown","801bc583":"markdown","f21b1804":"markdown","96d68967":"markdown","d250da75":"markdown","cc80fc10":"markdown","0a835cfd":"markdown","cb488607":"markdown","9af6922c":"markdown","b30b4bac":"markdown","7b1a0e8e":"markdown","2a3d1474":"markdown","91434d79":"markdown","ca7b1287":"markdown","3116d36d":"markdown","95628480":"markdown","e5a237cd":"markdown","470ff3cb":"markdown","764c3231":"markdown","74f9aeeb":"markdown","8d3a71da":"markdown","137acac6":"markdown","62b58b25":"markdown","1c8295df":"markdown","be536a4e":"markdown","b66e1e63":"markdown","ff222005":"markdown","3afc4719":"markdown","0901be36":"markdown","0d281e77":"markdown","a157ebe3":"markdown","e4275178":"markdown","fb333795":"markdown","3aeb6856":"markdown","f4f3ee6c":"markdown","686d1622":"markdown","4cd7963c":"markdown","1f99190c":"markdown","f039e06a":"markdown","c62be3db":"markdown"},"source":{"39654752":"print(\"hello, world\")","fddeadcc":"a = \"Hello, World\"            # Using these inverted quotes is important\nprint(a)          \nprint(a)                      # Don't use inverted quotes while printing a variable.","608391c7":"a = 10                        # no need to use inverted quotes when declaring an integer\nprint(a)","e131d6fb":"a = \"hello\"\nprint(a)\na = \"hi\"\nprint(a)\na = 10          # it doesn't matter which type of value you are asssigning\nprint(a)","e398355b":"# adding two strings.\na = \"Pranay\"\nb = \"Joshi\"\nc = a+b\nprint(c)\n# two print it seprately just add a blank space after \"Pranay \" or before \" Joshi\"\na = \"Pranay \"\nb = \"Joshi\"\nc = a+b\nprint(c)","990db830":"a = 10\nb = 20\nc = a+b\nprint(c)","cd9127be":"print(\"9 D was the best class\")   # normal","fa6f5cdb":"# printing in new line\n# we use \\n inside the quotes while printing\nprint(\"9 D was the \\nbest class.\")\n","dcfd8016":"# priting with the variable\na = \"9 D was the\"\nb = \"best class\"\nprint(a+\"\\n\"+b)       # Dont forget to use inverted quotes for \"\\n\" or newline    and also don't use quotes for Variables","4a570e34":"# like we use \"\\n\" for printing newline .\n# for printing tab we use \"\\t\".\nprint(\"9 D was the \\tbest class.\")","188eeb33":"# priting with the variable\na = \"hello\"\nb = \"python\"\nprint(a+\"\\t\"+b)       ","e362bfce":"a = 10\nb = \"python\"\nprint(a+\"\\t\"+b)               # when you will add an integer to the string it will cause the following error.","c3cb41db":"a = 10\na = str(a)\nb = \"python\"\nprint(a+\"\\t\"+b)","3aba15b0":"age = 10\nage2 = 12\nprint(\"your age is\", age, age2)","f9cd1455":"age = 10\nname = \"Pranay\"\nsurname = \"Joshi\"\nprint(\"your age is \", age)\nprint(\"your name is \", name)\nprint(\"your surname is \", surname)","1cb8d0c7":"age = 10\nname = \"Pranay\"\nsurname = \"Joshi\"\nprint(f\"your age is {age}\\nyour name is {name}\\nyour surname is {surname}\")","58f175dc":"x = \"hi\"\ny = 42\nz = 42.021                    # the decimal integers in python are called floats we will talk about them more in ch 5 Casting\nprint(x,y,z)","7123c32d":"a = input()           # We take string \nprint(a)        # printing the value in the variable a","50434b2c":"a = input()\nprint(a+10)               # we will talk about calculations in the upcoming tutorials","68cd41d1":"a = int(input())\nprint(a+10)","c3009f50":"a = int(input())\nprint(a+10)","ec40e2f0":"a = input()\nb = int(a)\nprint(b+10)      # adding 10 to b\n# I entered 14 and it showed the result","672f75ff":"print(\"What is your name?\")\na = input()\nprint(\"your name is\", a)","916ac2bb":"a = input(\"enter your name: \")\nprint(a)","53c6b2c8":"name = input(\"Enter your name\")\nage = int(input(\"Enter your age\"))\nfather = input(\"Enter your father's name\")\nf_age = int(input(\"Enter your father's age\"))\nmother = # Mother name\nm_age = int(input(\"\"))\nprint(\"Your name is {}. Your father name is {}. Your mother name is: {}\".format(name, father, mother))\nage_str = str(age)\nf_age_str = str()\nm_age_str = str()\nprint(\"your age{}. your father's age{}. Your mother's{}\")\nage_sum =\nprint(\" The sum of your family ages is.\", age_sum)","885004cb":"a = 10\nb = 60\nprint(a+b)","5a43747d":"a = 10\nb = 60\nprint(a-b)","8c8d49c3":"a = 10\nb = 60\nprint(a*b)","ede28f64":"a = 10\nb = 60\nprint(a\/b)","5c2856a8":"# we use \"**\" double astricts for exponents.\n# for ex.\na = 10\nb = 2\nprint(a**b)                   # this will print a to the power b i.e 10 to the power 2","13cb07b0":"a = 10\nb = 2\nprint(a**(1\/b)) ","73079e8c":"a = 10\nb = 2\nprint(a%b)                      # this will output the remainder when we divide 10 \/2 which is 0","2f598227":"x = int(1)   # x will be 1\ny = int(2.8) # y will be 2\nz = int(\"3\") # z will be 3\nprint(x, y, z)","bd8ac2ed":"x = float(1)     # x will be 1.0\ny = float(2.8)   # y will be 2.8\nz = float(\"3\")   # z will be 3.0\nw = float(\"4.2\") # w will be 4.2\nprint(x, y, z, w)","3057b043":"x = str(\"s1\") # x will be 's1'\ny = str(2)    # y will be '2'\nz = str(3.0)  # z will be '3.0'\nprint(x, y, z)","6665dbca":"a = 33\nb = 10\nif b > a:\n  print(\"b is greater than a\")\nprint(a+b)","1a4d86ac":"a = 33\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")","cc29ec92":"a = int(input())\nb = int(input())\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")\nelse:\n  print(\"a is greater than b\")","1c9412e5":"a = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelse:\n  print(\"b is not greater than a\")","ca03e97f":"x = 41\nif x > 10\n  if x < 50:\n    print(\"Above ten,\")\n    print(\"and also above 20!\")\n  else:\n    print(\"but not above 20.\")","b41666b8":"print(10 > 9)\nprint(10 == 9)\nprint(10 < 9)","6bbe0eff":"print(bool(\"Hello\"))\nprint(bool(10))","5e76d935":"x = \"Hello\"\ny = 15\n\nprint(bool(x))\nprint(bool(y))","09586b96":"a = 10\nb = 10\nc = -10\n  \nif a > 0 and b > 0: \n    print(\"The numbers are greater than 0\") \nif a > 0 and b > 0 and c > 0: \n    print(\"The numbers are greater than 0\") \nelse:\n    print(\"Atleast one number is not greater than 0\") ","08524110":"a = 10\nb = 12\nc = 0\n  \nif a and b and c: \n    print(\"All the numbers have boolean value as True\") \nelse: \n    print(\"Atleast one number has boolean value as False\") ","46f0ec23":"a = 10\nb = -10\nc = 0\n  \nif a > 0 or b > 0: \n    print(\"Either of the number is greater than 0\") \nelse: \n    print(\"No number is greater than 0\") \n  \nif b > 0 or c > 0: \n    print(\"Either of the number is greater than 0\") \nelse: \n    print(\"No number is greater than 0\") ","ff38e459":"a = 10\nb = 12\nc = 0\n  \nif a or b or c: \n    print(\"Atleast one number has boolean value as True\") \nelse: \n    print(\"All the numbers have boolean value as False\") ","2435d5b6":"a = 10\nif not a>12: \n    print(\"Boolean value of a is True\")   \nif not (a%3 == 0 or a%5 == 0): \n    print(\"10 is not divisible by either 3 or 5\") \nelse: \n    print(\"10 is divisible by either 3 or 5\") ","787eeffc":"thislist = [\"apple\", \"banana\", \"cherry\", 20, 40]\nprint(thislist)","701be7b4":"lst = [\"apple\", \"banana\", \"cherry\"]\nprint(lst[0])          # here zero is the index\nprint(lst[1])          # here 1 is the index\nprint(lst[2])          # here 2 is the index","ba38ab52":"thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist[1])","a0cfc529":"thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist[-1])","ce6903ff":"thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.append(\"orange\")\nprint(thislist)","ffeda906":"thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.insert(1, \"orange\")\nprint(thislist)","9d8497a1":"thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.remove(\"banana\")\nprint(thislist)","819205b7":"thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.pop(1)\nprint(thislist)","8600cd99":"thislist = [\"apple\", \"banana\", \"cherry\"]\ndel thislist[0]\nprint(thislist)","ee2ab1b6":"thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.clear()\nprint(thislist)","bee66fda":"thislist = [\"apple\", \"banana\", \"cherry\"]\nmylist = thislist\nprint(mylist)","546c3f98":"thislist = [\"apple\", \"banana\", \"cherry\"]\nmylist = thislist.copy()\nprint(mylist)","26301d06":"list1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\n\nlist3 = list2 + list1\nprint(list3)","10b0bb44":"list1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\n\nlist1.extend(list2)\nprint(list1)","f5e62178":"thislist = list((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thislist)","11a7d0d5":"a = list(\"abcdefghijklmnopqrstuvwxyz\")\nprint(a)","7a746a8e":"a = [\"apple\", \"banana\", \"cherry\",\"apple\", \"banana\"]\na = set(a)\nprint(list(a))","7b11cd37":"fruits = ['apple', 'banana', 'cherry']\n\nfruits.reverse()\nprint(fruits)","eafdcc80":"cars = ['Ford', 'BMW', 'Volvo']\n\ncars.sort()\nprint(cars)","2ee998f7":"no = [2,1,5,4,3]\nno.sort()\nprint(no)","f0b2aeea":"cars = ['Ford', 'BMW', 'Volvo']\ncars.sort(reverse=True)\nprint(cars)","fa8b15e6":"no = [2,1,5,4,3]\n\nno.sort(reverse=True)\nprint(no)","384cd400":"points = [1, 4, 2, 9, 7, 8, 9, 3, 1]\nx = points.count(9)\nprint(x)","6a11289e":"cars = ['Ford', 'BMW', 'Volvo']\nx = cars.index(\"Ford\")\nprint(x)","908bde12":"cars = ['Ford', 'BMW', 'Volvo']\nx = len(cars)\nprint(x)","f9fa9647":"py_string = \"Python\"\n\n# contains indices 0, 1 and 2\nprint(py_string[2:])","ea56cf14":"py_string = 'Python'\n\n# contains indices 0, 1 and 2\nprint(py_string[0:5:2])","bfcb4323":"py_lst = [\"P\",\"y\",\"t\",\"h\",\"o\",\"n\"]\n\n# contains indices 0, 1 and 2\nprint(py_lst[0:3])","f4d4b62f":"py_lst = [\"P\",\"y\",\"t\",\"o\",\"n\"]\n\n# contains indices 0, 1 and 2\nprint(py_lst[0:4:2])","c58d67a1":"py_lst = list(\"python\")\n\n# contains indices 0, 1 and 2\nprint(py_lst[0:5:2])","3484d09d":"py_lst = [\"P\",\"y\",\"t\",\"h\",\"o\",\"n\"]\n\n# contains indices 0, 1 and 2\nprint(py_lst[::-2])","b0bed59a":"py_string = \"Python\"\n\n# contains indices 0, 1 and 2\nprint(py_string[::-1])","c57936f7":"thislist = [\"apple\", \"banana\", \"cherry\"]\na = \"apple\"\nif a in thislist:\n  thislist.append(\"apple2\")\n  print(thislist)","0562da42":"thislist = [\"apple\", \"banana\", \"cherry\"]\nif \"apple\" not in thislist:\n  print(\"Yes, 'apple' is in the fruits list\")","6c5d6910":"x1 = 5\ny1 = 5\nx2 = 'Hello'\ny2 = 'Hello'\nx3 = [1,2,3]\ny3 = [1,2,3]\n\n\n# Output: True\nprint(x2 is y2)\n\n# Output: False\nprint(x3 is y3)","4212339e":"x1 = 5\ny1 = 5\nx2 = 'Hello'\ny2 = 'Hello'\nx3 = [1,2,3]\ny3 = [1,2,3]\n\n# Output: False\nprint(x1 is not y1)\n","e794ef57":"thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple)","7df955fa":"thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple[1])","622bac12":"thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple[-1])","b92b2043":"thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\nprint(thistuple[2:5])","734ee46d":"thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\nprint(thistuple[-4:-1])","03e9ca90":"x = (\"apple\", \"banana\", \"cherry\")\ny = list(x)\ny[1] = \"kiwi\"\nx = tuple(y)\n\nprint(x)","cccdc71d":"thistuple = (\"apple\", \"banana\", \"cherry\")\nif \"apple\" in thistuple:\n  print(\"Yes, 'apple' is in the fruits tuple\")","06418627":"thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(len(thistuple))","dcf56517":"thistuple = (\"apple\", \"banana\", \"cherry\")\nthistuple[1] = \"orange\" \nprint(thistuple)","23c0c8b6":"thistuple = (\"apple\",)\nprint(type(thistuple))\n\n#NOT a tuple\nthistuple = (\"apple\")\nprint(type(thistuple))","69932198":"thistuple = (\"apple\", \"banana\", \"cherry\")\ndel thistuple\nprint(thistuple)","4c50a3ed":"thistuple = (\"apple\", \"banana\", \"cherry\")\ndel thistuple\nprint(thistuple)","596ff4a7":"tuple1 = (\"a\", \"b\" , \"c\")\ntuple2 = (1, 2, 3)\n\ntuple3 = tuple2 + tuple1\nprint(tuple3)","e123fe6a":"thistuple = tuple((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thistuple)","dfed75ca":"i = 1\nwhile i < 6:\n  print(i)\n  i += 1","2e676dd2":"i = 1\nwhile i < 6:\n  print(i)\n  if i == 3:\n    break\n  i += 1","99cf06ea":"i = 0\nwhile i < 6:\n  i += 1\n  if i == 3:\n    continue\n  print(i)","2ef196b1":"i = 1\nwhile i < 6:\n  print(i)\n  i += 1\nelse:\n  print(\"i is no longer less than 6\")","0ffadabc":"fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  print(x)","945d74ec":"ba = \"banana\"\nfor x in ba:\n  print(x)","0a81ca3d":"fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  print(x)\n  if x == \"banana\":\n    break\n","a121c1cb":"fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  if x == \"banana\":\n    break\n  print(x)\n","aa40ba72":"fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  if x == \"banana\":\n    continue\n  print(x)\n","50fd51fe":"for x in range(11):\n  print(x)","62a37913":"for x in range(2, 6):\n  print(x)","41bd39d1":"for x in range(2, 30, 3):\n  print(x)","c16e6bb9":"for x in range(6):\n  print(x)\nelse:\n  print(\"Finally finished!\")\n","1b158d7e":"adj = [\"red\", \"big\", \"tasty\"]\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nfor x in adj:\n  for y in fruits:\n    print(x, y)\n","60623bfe":"for x in [0, 1, 2]:\n  pass","22b45fcb":"thisdict = {\n  \"Pranay\": 254367,\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(thisdict)","6b808134":"x = thisdict[\"Pranay\"]\nprint(x)","d3f14ca5":"x = thisdict.get(\"model\")","43b1ffc8":"thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nthisdict[\"year\"] = 2020","fbf04a15":"for x in thisdict:\n  print(x)\n","8579a6d7":"for x in thisdict:\n  print(thisdict[x])","17a55c74":"for x in thisdict.values():\n  print(x)","025ee248":"for x, y in thisdict.items():\n  print(x, y)","16ec3421":"thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nif \"model\" in thisdict:\n  print(\"Yes, 'model' is one of the keys in the thisdict dictionary\")","d3535a05":"print(len(thisdict))","229c8606":"thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nthisdict[\"color\"] = \"red\"\nprint(thisdict)","b8e29caf":"thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nthisdict.pop(\"model\")\nprint(thisdict)","4772931d":"thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nthisdict.popitem()\nprint(thisdict)","0b81fafb":"thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\ndel thisdict[\"model\"]\nprint(thisdict)","0099df67":"thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\ndel thisdict\nprint(thisdict)","add1eb7e":"thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nthisdict.clear()\nprint(thisdict)","c6624b10":"dict1 = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\ndict2 = dict1\nprint(dict2)\ndict1[\"brand\"] = \"farari\"\nprint(dict2)","147f4d18":"thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nmydict = dict(thisdict)\nprint(mydict)","e4eacae0":"myfamily = {\n  \"child1\" : {\n    \"name\" : \"Emil\",\n    \"year\" : 2004\n  },\n  \"child2\" : {\n    \"name\" : \"Tobias\",\n    \"year\" : 2007\n  },\n  \"child3\" : {\n    \"name\" : \"Linus\",\n    \"year\" : 2011\n  }\n}","32d85bf4":"child1 = {\n  \"name\" : \"Emil\",\n  \"year\" : 2004\n}\nchild2 = {\n  \"name\" : \"Tobias\",\n  \"year\" : 2007\n}\nchild3 = {\n  \"name\" : \"Linus\",\n  \"year\" : 2011\n}\nmyfamily = {\n  \"child1\" : child1,\n  \"child2\" : child2,\n  \"child3\" : child3\n}\nprint(myfamily)","a9ef01f2":"thisdict = dict(brand=\"Ford\", model=\"Mustang\", year=1964)\n# note that keywords are not string literals\n# note the use of equals rather than colon for the assignment\nprint(thisdict)","106f13b2":"def my_function():\n  print(\"Hello from a function\")","5145c980":"def my_function():\n  print(\"Hello from a function\")\n\nmy_function()","537659eb":"def my_function(fname):\n  print(fname + \" Refsnes\")\n  \nmy_function(\"Emil\")\nmy_function(\"Tobias\")\nmy_function(\"Linus\")","c55f4ea9":"def my_function(fname, lname):\n  print(fname + \" \" + lname)\n\nmy_function(\"Emil\", \"Refsnes\")","81d5d7cc":"def my_function(fname, lname):\n  print(fname + \" \" + lname)\n\nmy_function(\"Emile\")","b6999c89":"def my_function(*kids):\n  print(\"The youngest child is \" + kids[1:-1])\n\nmy_function(\"Emil\", \"Tobias\", \"Linus\", \"rishi\", \"pranay\")","4ab9d445":"def my_function(child3, child2, child1):\n  print(\"The youngest child is \" + child3)\n\nmy_function(child1 = \"Emil\", child2 = \"Tobias\", child3 = \"Linus\")","68affcd4":"def my_function(**kid):\n  print(\"His last name is \" + kid[\"lname\"])\n\nmy_function(fname = \"Tobias\", lname = \"Refsnes\")","7000e1e5":"def my_function(country = \"Norway\"):\n  print(\"I am from \" + country)\n\nmy_function(\"Sweden\")\nmy_function(\"India\")\nmy_function()\nmy_function(\"Brazil\")","70cf1a5a":"def my_function(food):\n  for x in food:\n    print(x)\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nmy_function(fruits)","7c3a6f1e":"def my_function(x):\n  return 5 * x\n\nprint(my_function(3))\nprint(my_function(5))\nprint(my_function(9))","fbd4db35":"def myfunction():\n  pass","1e35a9ca":"def tri_recursion(k):\n  if(k > 0):\n    result = k + tri_recursion(k - 1)\n    print(result)\n  else:\n    result = 0\n  return result\n\nprint(\"\\n\\nRecursion Example Results\")\ntri_recursion(6)","d5924e1f":"# Program to illustrate\n# the use of user-defined functions\n\ndef add_numbers(x,y):\n   sum = x + y\n   return sum\n\nnum1 = 5\nnum2 = 6\n\nprint(\"The sum is\", add_numbers(num1, num2))","b5b3cec9":"first_no = int(input(\"Enter the first no.: \"))\nsecond_no = int(input(\"Enter the second no.: \"))\nsymbol = input(\"Enter a symbol of the computations you want to perform. (i.e +, -, *, \/) \")\nif symbol == \"+\":\n    print(first_no + second_no)\nelif symbol == \"-\":\n    print(first_no - second_no)\nelif symbol == \"*\":\n    print(first_no * second_no)\nelif symbol == \"\/\":\n    if second_no != 0:\n        print(first_no \/ second_no)\n    else:\n        print(\"You can not divide a number with 0\")\nelse:\n    print(\"invalid symbol\")\n\n","758cb612":"name = input(\"Enter the string: \")\nname = name.lower()\nprint(name)\npalindrome = name[::-1]\nif palindrome == name:\n    print(\"yes, the number is palindrome.\")\nelse:\n    print(\"no, its not a palindrome.\")","17a380d2":"Ex 12.5 Range of Negative Indexes","7781dd30":"Ex 4.1 Addition","01ab42c9":"With the else statement we can run a block of code once when the condition no longer is true:","bd74be2c":"Print i as long as i is less than 6:","e454fd4b":"Ex 3.2  Input","7b2e27ac":"Ex 14.3 The break Statement","2f77bac1":"Ex 16.11 Return Values","bccd4841":"Functions that we define ourselves to do certain specific task are referred as user-defined functions. The way in which we define and call functions in Python are already discussed.\n\nFunctions that readily come with Python are called built-in functions. If we use functions written by others in the form of library, it can be termed as library functions.\n\nAll the other functions that we write on our own fall under user-defined functions. So, our user-defined function could be a library function to someone else.","16ee2979":"Ex 12.8 Tuple Length","32a6385e":"Ex 11.2 Not in","bf3bb0ba":"Adding an item to the dictionary is done by using a new index key and assigning a value to it:","1b92d422":"Solution:-           convert integer to the string","88377db3":"Ex 15.1 Dictionary","bac46a7c":"1. User-defined functions help to decompose a large program into small segments which makes program easy to understand, maintain and debug.\n2. If repeated code occurs in a program. Function can be used to include those codes and execute when needed by calling that function.\n3. Programmars working on large project can divide the workload by making different functions.","84401894":"The del keyword removes the specified index:","a80610e1":"Remember:- python uses BODMAS rule for the calculation","7b414f3a":"Ex 9.6.3 Del Method","7f732688":"**Ex 13 While Loops**","659368aa":"Ex 9.10 sets","c7a8da05":"If you try to call the function with 1 or 3 arguments, you will get an error:","f5661035":"Ex 15.6 Check if Key Exists","8188d46c":"a difficult example.","ead338cb":"you can take out the square root or cube root by dividing 1 by \"b\" in the above cae","6e27efe2":"Even strings are iterable objects, they contain a sequence of characters:","4387e022":"Ex 9.6.2 Pop method","b1e18e7b":"Ex 13.2 The break Statement","cf11a1ca":"Exit the loop when x is \"banana\":","fafa49af":"Exx 11.3 Is","a1f1bf9f":"This function expects 2 arguments, and gets 2 arguments:","73dce751":"You can also use the values() method to return values of a dictionary:","e9834396":"For ex- i will input \"hello\"","0df37446":"To determine if a specified item is present in a tuple use the in keyword:","442f974c":"If the number of keyword arguments is unknown, add a double ** before the parameter name:","f28ef3fb":"Ex 14.2 Looping Through a String","766ea05e":"The while loop requires relevant variables to be ready, in this example we need to define an indexing variable, i, which we set to 1.","fe8006b6":"Ex 9.8.1 Normal\/Standard way","27dac446":"**Ex 9 Lists**","aaa6482a":"The range() function defaults to increment the sequence by 1, however it is possible to specify the increment value by adding a third parameter: range(2, 30, 3):","d3ad044d":"A dictionary can also contain many dictionaries, this is called nested dictionaries.","4dfc0f05":"But actually you can convert a string to an integer by using \"int()\" function but the string should be a number.","9b2d0f36":"Ex 3.1:- Output","ad8471d0":"With the continue statement we can stop the current iteration of the loop, and continue with the next:","f278205f":"Ex 16.4 Parameters or Arguments?","9d3d135c":"Ex 9.7.1 normal method","bbb126d2":"**Ex 9.15 Len**","8015b7e9":"In this example we use two variables, a and b, which are used as part of the if statement to test whether b is greater than a. As a is 33, and b is 200, we know that 200 is greater than 33, and so we print to screen that \"b is greater than a\".","c9e5e4b8":"In Python a function is defined using the def keyword:","9820a872":"Ex 9.12.2 Sorting the list(descending)","0824a933":"To call a function, use the function name followed by parenthesis:","9177ecc7":"You can have if statements inside if statements, this is called nested if statements","6b96eb5e":"Ex 2.2 Integer(numbers) Variable","86e65b2f":"To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple.","a588ee9b":"You can loop through a dictionary by using a for loop.\n\nWhen looping through a dictionary, the return value are the keys of the dictionary, but there are methods to return the values as well.","9c2f2cd5":"Using the start parameter:","d4843756":"The del keyword can delete the tuple completely:","b701638c":"You might only be familiar with **print** command which is used to print\/display the output","935cc312":"There are 3 collection data types in the Python programming language:\n\n* List is a collection which is ordered and changeable. Allows duplicate members.\n* Tuple is a collection which is ordered and unchangeable. Allows duplicate members.\n* Dictionary is a collection which is unordered, changeable and indexed. No duplicate members.","92b4b60b":"Tuples are unchangeable, so you cannot remove items from it, but you can delete the tuple completely:","93ca6cbd":"Ex 9.7 copying a list","67f8b60e":"Ex 6.3 Else Statement","19ebf4ca":"**Ex 15 Dictionary**","215739b3":"You cannot copy a dictionary simply by typing dict2 = dict1, because: dict2 will only be a reference to dict1, and changes made in dict1 will automatically also be made in dict2.\n\nThere are ways to make a copy, one way is to use the built-in Dictionary method copy().","6e2b3c39":"You can also make a function to decide the sorting criteria(s). For ex :-","c7c97ded":"Ex 8.2 Or","6284f3cb":"The elif keyword is pythons way of saying \"if the previous conditions were not true, then try this condition\".","fafc4457":"**Ex1 - Starting of with the Hello World in python.**","4d107c76":"Ex 8.3 Not","06fd2485":"when list contains an integer values","7ed5ede7":"Change the \"year\" to 2018:","f99ca74d":"Ex 9.6.1 Remove method","a3d2aaa0":"**Ex 16 Functions**","5f5b5216":"Ex 15.3 Change Values","3451ed66":"From a function's perspective:\n\nA parameter is the variable listed inside the parentheses in the function definition.\n\nAn argument is the value that is sent to the function when it is called.","e67bbe1c":"taking input after printing","21301856":"Printing sentence with a tab","f979d857":"Ex 5.2 Float","0056b6ba":"Important tip:- in python python variables are mutable(changable) i.e their vales can be changed.\nFor Ex:-","fd6ea72a":"Here is another example. If you want to convert every letter of a string into a list element","e6ec49c4":"Ex 15.9 Removing Items","dc027a43":"Exit the loop when i is 3:","17542c01":"Ex 14.8 The pass Statement","de72856d":"Ex 12.12 Join Two Tuples","1d6d92d8":"The range() function defaults to 0 as a starting value, however it is possible to specify the starting value by adding a parameter: range(2, 6), which means values from 2 to 6 (but not including 6):\n\n","ad1cf6b6":"thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nmydict = thisdict.copy()\nprint(mydict)","27f551c1":"Ex 14.5 The range() Function","9121aae7":"Ex 12.9 Add Items","cb1ef557":"We will talk on performing calculations further.","f7de2251":"And Logical operator returns True if both the operands are True else it returns False.","79469035":"Ex 14.6 Else in For Loop","60f8dd6b":"Ex 2.3.2  Adding two Integers","3a5ab89b":"Ex 12.13 The tuple() Constructor","0051d62e":"A tuple is a collection which is ordered and unchangeable. In Python tuples are written with round brackets.","1ce0589a":"Printing sentence with new line","ee08151d":"Ex 16.12 The pass Statement","c901651d":"Ex 10.3.1 Reversing a List","2fe716d6":"Ex 15.10 Deleting Elements","a3b352cc":"Ex 9.11 Reversing the list.","eb9f578e":"Ex 16.2 Calling a Function","a700e5ea":"Ex 10.3.2 Reversing a string.","5b0513ac":"You can simply remove an item using remove() command. For ex.","e2b7e50e":"Important Tips- You can convert an integer to string but you can not convert a string to integer.","c7b71a33":"You can also send arguments with the key = value syntax.\n\nThis way the order of the arguments does not matter.","f5d45059":"There are several methods to remove items from a dictionary:","8b64789a":"Whenever you will try to access an element which is out of index it will give you an error like \n\n list index out of range\n\nFor ex.","db54bf27":"Remember:- you can only add a strig with string or an integer with integer. \n\nYou can not add a string with an integer","45dce366":"Set is also known as the fourth type of array but it's used rarely. We will use it here as a helper to the list","d058ea32":"Printing many variables in one line or via one print statement.","2b57def5":"Negative indexing means beginning from the end, -1 refers to the last item, -2 refers to the second last item etc.","6c4aac06":"Ex 9.1 Creating a list","fd9d9bbd":"If the number of arguments is unknown, add a * before the parameter name:","e4c0bcc7":"Ex 12.3 Negative Indexing","92bed66d":"Ex 14.4 The continue Statement","591b3037":"Ex 5.3 Strigs","864d18e8":"Ex 15.13 The dict() Constructor","3d06e5be":"Ex  12.11 Remove Items","2f5f2ba2":"Another way to make a copy is to use the built-in function dict().\n\n","f0582a50":"The phrase Keyword Arguments are often shortened to kwargs in Python documentations.","e720f619":"Ex 12.4 Slicing tuples","312ca7a7":"Ex 6.2 Elif statement","7306e8c5":"For ex:-","ad48eb0b":"For Example\/","975fa603":"Ex 9.5 Adding Items","edd9f816":"Ex 9.4 Negative Indexing","d50cfe23":"Ex 14.7 Nested Loops","65081137":"Ex 10.2 Slicing Lists","c5f56545":"Python has two primitive loop commands:\n* while loops\n* for loops","6475deeb":"Ex 9.10.1 Using set() to remove the multiple occurance of an element in the list.","f6a423d2":"These includes-\n*  in\n*  not in\n*  is\n*  is not","96001fb5":"Continue to the next iteration if i is 3:","559223d3":"Ex 9.6.4 Clear Method","17c7bf37":"You can access the items of a dictionary by referring to its key name, inside square brackets:","b411e8fe":"They are also known as Conditional statements","a2ed38a2":"Note that range(6) is not the values of 0 to 6, but the values 0 to 5.","c929c592":"Create three dictionaries, then create one dictionary that will contain the other three dictionaries:","529135b6":"In programming you often need to know if an expression is True or False.\n\nYou can evaluate any expression in Python, and get one of two answers, True or False.\n\nWhen you compare two values, the expression is evaluated and Python returns the Boolean answer:","d21d35a2":"Ex 2.3 Adding two strings. and two integers.","ca5a8295":"**Ex 9.14 List index**","5ca643fb":"Ex 16.1 Creating a Function","8ab01264":"Ex 4.2 Subtraction","e6473347":"Here is the example of a list conductor","6d2866f5":"Ex 9.3 Error","55377d9a":"**Ex 11 Identity Operators**","60820c7c":"The count() method returns the number of elements with the specified value.","971bcb9e":"This example returns the items from index -4 (included) to index -1 (excluded)","cb9f4285":"Print each fruit in a fruit list:","7bcab6fc":"The del keyword can also delete the dictionary completely:","6a0f4c81":"Make a copy of a dictionary with the copy() method:","7226d7cb":"Ex 15.4 Loop Through a Dictionary","71384729":"Ex 9.5.1 Appending Method","92542e5e":"Or, if you want to nest three dictionaries that already exists as dictionaries:","9199c3e6":"You can also take input after printing a line. by using quotes inside brackets of  input()\/ int(input())  and type the line you want to print.","23168f80":"To let a function return a value, use the return statement:","77515f80":"Ex 9.6 Removing Elements","197a7374":"Printing a varible after the statement ends.","93cf165f":"You can send any data types of argument to a function (string, number, list, dictionary etc.), and it will be treated as the same data type inside the function.\n\nE.g. if you send a List as an argument, it will still be a List when it reaches the function:\n","d6662eac":"Ex 9.12.1 Sorting the list (asscending)","ffb2a9b2":"Ex 8.1 And","09a1bccd":"The slicing returns a slice object that can use used to slice strings, lists, tuple etc.","33956db4":"You can access tuple items by referring to the index number, inside square brackets:","1b542eab":"Ex 15.8 Adding Items","33b77f6b":"Ex 12.10 Create Tuple With One Item","f350b648":"If you do not know how many keyword arguments that will be passed into your function, add two asterisk: ** before the parameter name in the function definition.\n\nThis way the function will receive a dictionary of arguments, and can access the items accordingly:","635d04d0":"Ex 14.1 Python For Loops","4608065f":"Ex 16.5 Number of Arguments","ce409609":"Do not print banana:\n\n","1df944c4":"for loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error.","c714c06c":"Arbitrary Kword Arguments are often shortened to **kwargs in Python documentations.","80de0656":"Ex 12.7 Check if Item Exists","bee632fc":"Insert an item as the second position","ffce396c":"Thank you,\n\nRegards,\n\nPranay Joshi\n\nLove You all.","82405f5f":"Ex 6.4 Nested if's.","00635551":"A dictionary is a collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values.","0c807e83":"Use the extend() method to add list2 at the end of list1:","3d12c56e":"Or Logical operator returns True if either of the operands is True.","2c78f00e":"for printing the value of the variables use comma after the inverted quotes and the enter your variable name.","a8fae63b":"In this example a is equal to b, so the first condition is not true, but the elif condition is true, so we print to screen that \"a and b are equal\".","7691c2b4":"Note:- Earlier I told you you can not convert a string into an integer.","ed9ebf2c":"Important note:- In aevery programming language counting starts from 0 not 1. YOu may see the above example.","b87a104d":"There is also a method called get() that will give you the same result:","48b32df0":"In python you can perform calculations with mathematical symbols.\n\nfor addition        +\n\nfor multiplication  *\n\nfor subtraction     -\n\nfor division        \/\n\nfor exponent        **\n\nfor remainder       %\n","f3da27e9":"In can be used in the following way.","c40a0f86":"Important Tips:- Remember if you use int(input()) for taking input.If the input you give is not an integer\/number than it will give an error.","3bfb8da0":"Ex 4.6 Remainder ","8dd5f72c":"and\tLogical AND: True if both the operands are true.\n\nor\tLogical OR: True if either of the operands is true.\n\nnot\tLogical NOT: True if operand is false.","ccaff522":"Ex 9.9 The list() Constructor","a7effc91":"Making this notebook took a lot of effort.\n\nYour upvote can praise my work.\n\nAlso Upvote only if you like this notebook and find it informative","bb8c409d":"A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).\n\nThis is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.\n\nWith the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.","9b463b84":"**Ex 6 IF Elif Else**","7ec42983":"Ex 16.10 Passing a List as an Argument","dca9ea71":"Ex 12.1 Create a Tuple","5249fa5e":"You can simply use the method of copying a variable. For ex.","9ad75730":"Here i am giving you different commands you may use when printing.","033ef1cd":"\nEx 16.7 Keyword Arguments","00bed037":"To join two or more tuples you can use the + operator:","4246559e":"Ex 10.3 Reversing th list and strings","ec52406b":"To convert a integer to string you may use \"str()\" function","4ca9ef2e":"first let us talk about float.\nFloat is nothing but decimal.","3bb8f72f":"Exit the loop when x is \"banana\", but this time the break comes before the print:","b42ff269":"It is also possible to use the dict() constructor to make a new dictionary:\n\n","eed103db":"To determine how many items (key-value pairs) a dictionary has, use the len() function.","7f03216f":"**Ex 7 Boolean**","f91e36f5":"**Ex 5 Casting**","fb885dbc":"We use \"+\" to add to strings. and also to add to add two integers.","72c0912d":"**Ex 8 Logical Operators**","6a4961f9":"Ex 2.3.1 Adding two strings","d53b6f34":"Ex 15.12 Nested Dictionaries","6d6a8923":"The popitem() method removes the last inserted item (in versions before 3.7, a random item is removed instead):\n\n","0b127973":"The sort() method sorts the list ascending by default.","9a0394eb":"Ex 16.9 Default Parameter Value","eef01e21":"With the break statement we can stop the loop even if the while condition is true:","1b753395":"Print all numbers from 0 to 5, and print a message when the loop has ended:\n\n","8040181a":"Ex 9.8.2 Extend() Method","fba23d06":"function definitions cannot be empty, but if you for some reason have a function definition with no content, put in the pass statement to avoid getting an error.","737ef81f":"Loop through the letters in the word \"banana\":","3f74a9d7":"Ex 13.4 The else Statement","3c6ddcbb":"Ex 9.12 Sort","db4c8eaa":"Increment the sequence with 3 (default is 1):","9e1bad85":"The clear() method empties the dictionary:","c8900261":"Negative indexing means beginning from the end, -1 refers to the last item, -2 refers to the second last item etc.","d34e61d1":"Ex 4.4 Division","1a9d29ec":"Ex 9.5.2 Inserting method","9c554be3":"Signs:-\n*   Equals: a == b\n*   Not Equals: a != b\n*   Less than: a < b\n*   Less than or equal to: a <= b\n*   Greater than: a > b\n*   Greater than or equal to: a >= b","f842e4ca":"If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition.\n\nThis way the function will receive a tuple of arguments, and can access the items accordingly:","12fc2cdd":"Ex 11.4 Is Not","8ca8d664":"By default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less.","4084d4be":"1.   Hello world\n2.   Variables\n3.   Input\/Output\n4. Performing calculations\n5. Casting\n6. If Elif Else\n7. Booleans\n8. Logical Statements\n9. Lists\n10. Slicing\n11. Identity and Membership operators\n12. Tuples\n13. While Loops\n14. For loops\n15. Dictionaries\n16. Functions\n17. User defined function\n\nThank You","07f88a29":"Here is the syntax for slicing the list.\n\n\n```\nobj[start:stop:step]\n```\n\n","4aed5569":"You may use this this input method to take a string input i.e whenever you will give an integer value it will not show an error but will show an error when you will use the variable for calculations","cbec628f":"Ex 6.1 if statement","e54562dc":"Ex 5.1 Integers","55e7a791":"The else keyword in a for loop specifies a block of code to be executed when the loop is finished:","e5080837":"There may be times when you want to specify a type on to a variable. This can be done with casting. Python is an object-orientated language, and as such it uses classes to define data types, including its primitive types.","d021076a":"To add an item at the specified index, use the insert() method:","dc17ac07":"Create a dictionary that contain three dictionaries:\n\n","8d862aad":"Ex 13.3 The continue Statement","3fe7e43d":"With the continue statement we can stop the current iteration, and continue with the next:","809f61b8":"Ex 4.3 Multiplication","bd799b76":"A nested loop is a loop inside a loop.\n\nThe \"inner loop\" will be executed one time for each iteration of the \"outer loop\":","8eaa6842":"\nEx 16.8 Arbitrary Keyword Arguments, **kwargs","01bba94f":"The pop() method removes the specified index, (or the last item if index is not specified):","f4f1eee8":"Once a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called.\n\nBut there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.","8f788ec3":"Ex 9.8 Joining two Lists.","f90f8d4a":"**What are user-defined functions in Python?**","f68e13d0":"With integer values.","8cd0ff6b":"The for loop does not require an indexing variable to set beforehand.","4fdc7bea":"Common Errors while performing this task ","d846c4c8":"**Ex 12 Tuples**","8e68ef7b":"Here we have to type print many times. \n\nTo overcome this problem we can use \"f\" key word before inverted quotes when printing. And inside the quotes we write normal statements\n'","773ba905":"Using the list() command","2eba152b":"Ex 16.13 Recursion","09bf7ea3":"Ex 16.6 Arbitrary Arguments, *args","782574f4":"Ex 13.1 While Loops","4768111d":"To loop through a set of code a specified number of times, we can use the range() function,\n\nThe range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.","a3bd3244":"**Ex 10. Slicing**","78b3b81f":"Get the value of the \"model\" key:","1b600a2e":"Ex 4.5 Exponent","318708f3":"The pop() method removes the item with the specified key name:\n\n","4001dddc":"Ex 10.1 Slicing Strings","349b2704":"A function is a block of code which only runs when it is called.\n\nYou can pass data, known as parameters, into a function.\n\nA function can return data as a result.","d8f171d7":"## **Index**","f8824bcd":"For ex-","d5e7b1b1":"Ex 2 Palindrome.","b69681be":"It is also possible to use the tuple() constructor to make a tuple.","525902e3":"The Logical operators acts as a filter in the conditional statements","51694e2c":"remember \"#\" or hastag is used to comment a line i.e it wont effet your code.","7c25aa56":"Class Execise:- 1","d549068b":"To solve the following error we may use \"int(input())\" command","d2658927":"Ex 9.2 Accessing elements","3e4ff6c1":"The terms parameter and argument can be used for the same thing: information that are passed into a function.","afea9c77":"Ex 3.2.3 Taking input after printing a line.","1d6744b3":"It act as opposite to in","3ffe63b4":"Ex 15.7 Dictionary Length","14f8ace1":"Ex 3.2.1  String\/Word input","1f0e23e0":"A list is a collection which is ordered and changeable. In Python lists are written with square brackets.","9d64c9b1":"Ex 9.7.2 Copy() Method","846da55e":"Ex 15.11 Copy a Dictionary","658be85d":"Check if \"model\" is present in the dictionary:","37e06d6e":"**Ex Programs**","52a580ef":"Ex 17 Python User-defined Functions","ffcde02c":"# **Python Basics(Hindi)**","c5c05ceb":"Ex 12.2 Access Tuple Items","a145665d":"Ex2.1  String(Alphabets\/letter\/words) Variables.","eb7f5a81":"Another example","cad2d583":"Ex 16.3 Arguments","801bc583":"To determine if a specified key is present in a dictionary use the in keyword:","f21b1804":"To determine how many items a tuple has, use the len() method","96d68967":"** Ex4:-   Performing calculations**","d250da75":"Ex 15.2 Accessing Items","cc80fc10":"adding an Integer\/number in the following manner.","0a835cfd":"Ex 9.13 Count","cb488607":"You access the list items by referring to the index number:","9af6922c":"**Ex-2  Variables**","b30b4bac":"Ex 11.1 in Operator.","7b1a0e8e":"You can simply add an item using append() command. For ex.","2a3d1474":"In this example a is greater than b, so the first condition is not true, also the elif condition is not true, so we go to the else condition and print to screen that \"a is greater than b\".\n\nYou can also have an else without the elif:","91434d79":"The clear() method empties the list:","ca7b1287":"An \"if statement\" is written by using the if keyword","3116d36d":"With the break statement we can stop the loop before it has looped through all the items:","95628480":"Casting in python is therefore done using constructor functions:","e5a237cd":"Information can be passed into functions as arguments.\n\nArguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.\n\nThe following example has a function with one argument (fname). When the function is called, we pass along a first name, which is used inside the function to print the full name:","470ff3cb":"Arbitrary Arguments are often shortened to *args in Python documentations.","764c3231":"The following example shows how to use a default parameter value.\n\nIf we call the function without argument, it uses the default value:","74f9aeeb":"**Ex-3 Input\/Output**","8d3a71da":"Loop through both keys and values, by using the items() method:","137acac6":"If elif and else, they are widely used commands in python or even in any programming language. They are pritty easy to understand but are very crucial part of programming. ","62b58b25":"Ex 3.2.2 taking an integer input","1c8295df":"Print all values in the dictionary, one by one:","be536a4e":"Note: remember to increment i, or else the loop will continue forever.","b66e1e63":"Errors","ff222005":"Not Logical operator work with the single boolean value. If the boolean value is True it returns False and vice-versa.","3afc4719":"In python we take input using input command. here are some examples.","0901be36":"**Ex 14 For Loops**","0d281e77":"Once a tuple is created, you cannot add items to it. Tuples are unchangeable.","a157ebe3":"These include\n*  And\n*  Or\n* not","e4275178":"The else keyword catches anything which isn't caught by the preceding conditions","fb333795":"You can change the value of a specific item by referring to its key name:","3aeb6856":"The bool() function allows you to evaluate any value, and give you True or False in return,\n\nEvaluate a string and a number:","f4f3ee6c":"*  int() - constructs an integer number from an integer literal, a float literal (by rounding down to the previous whole number), or a string literal (providing the string represents a whole number)\n*  float() - constructs a float number from an integer literal, a float literal or a string literal (providing the string represents a float or an integer)\n*  str() - constructs a string from a wide variety of data types, including strings, integer literals and float literals","686d1622":"Python also accepts function recursion, which means a defined function can call itself.\n\nRecursion is a common mathematical and programming concept. It means that a function calls itself. This has the benefit of meaning that you can loop through data to reach a result.\n\nThe developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.\n\nIn this example, tri_recursion() is a function that we have defined to call itself (\"recurse\"). We use the k variable as the data, which decrements (-1) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0).\n\nTo a new developer it can take some time to work out how exactly this works, best way to find out is by testing and modifying it.","4cd7963c":"The del keyword removes the item with the specified key name:","1f99190c":"Ex 12.6 Change Tuple Values","f039e06a":"**Advantages of user-defined functions**","c62be3db":"Ex 1 Calculator"}}