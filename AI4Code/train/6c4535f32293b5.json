{"cell_type":{"8e0a4fb9":"code","621c956e":"code","4140d68d":"code","827c591e":"code","828660f5":"code","c3f12f27":"code","5531ddec":"code","e98ef0a9":"code","ad074881":"code","c3a87818":"code","fb75ef20":"code","377b19df":"code","30435ccd":"code","8f460c83":"code","d9a31435":"code","cce8e9a9":"code","7833297e":"code","cf057d58":"code","b00e552d":"code","75abc6b5":"code","e6f19d31":"code","e8494e67":"code","a2e26e49":"code","1a659d96":"code","3cea54cc":"code","2bc81168":"code","892c5e8a":"code","22ccd5c1":"code","a4ca4db2":"code","51d1d3f0":"code","97116e21":"code","cc1bb855":"code","4cb46574":"code","e2747eb0":"code","82ec9fe2":"code","30fa696e":"code","150fb55f":"code","3877880b":"code","f4838d18":"code","87b375fc":"code","40261bde":"code","c62666cd":"code","3329b865":"markdown","f7a728cf":"markdown","fcb69ef4":"markdown","d14dd1bf":"markdown","2037e892":"markdown","476d1ebd":"markdown","cd0c8dcf":"markdown","6b3a089a":"markdown","851dacc0":"markdown","45e7c594":"markdown","c2333ad4":"markdown","2f9a6874":"markdown"},"source":{"8e0a4fb9":"#imports\n%matplotlib inline\n\nimport numpy as np\nimport pandas as pd\nimport geopy as gp\nfrom geopy.distance import great_circle\nimport matplotlib.pyplot as plt\nfrom pandas import Series, DataFrame\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt \nfrom scipy import stats, integrate\nimport seaborn as sns","621c956e":"train_df = pd.read_csv('..\/input\/new-york-city-taxi-fare-prediction\/train.csv', nrows = 1000000)","4140d68d":"train_df.info()","827c591e":"train_df.head()","828660f5":"train_df.describe()","c3f12f27":"def clean_passenger(data):\n    data = data.drop(data[data[\"passenger_count\"] > 10].index , axis = 0)\n    return data","5531ddec":"def clean_location(data):\n    data = data.drop( data[(data['pickup_latitude'].isnull()) | (data['pickup_longitude'].isnull()) ].index , axis = 0)\n    data = data.drop( data[(data['pickup_latitude'] == 0) | (data['pickup_longitude'] == 0) ].index , axis = 0)\n    data = data.drop( data[(data['dropoff_latitude'].isnull()) | (data['dropoff_longitude'].isnull()) ].index , axis = 0)\n    data = data.drop( data[(data['dropoff_latitude'] == 0) | (data['dropoff_latitude'] == 0) ].index , axis = 0)\n    data = data.drop( (data[ (data['pickup_latitude'] < -90)  | (data['pickup_latitude'] > 90) ]).index , axis = 0  )\n    data = data.drop( (data[ (data['dropoff_latitude'] < -90)  | (data['dropoff_latitude'] > 90) ]).index , axis = 0  ) \n  #  data = data.drop( data[(data['dropoff_latitude'] == data['pickup_latitude']) & (data['dropoff_longitude'] == data['pickup_longitude']) ].index , axis = 0)\n    return data","e98ef0a9":"def calc_distance(row):\n    coords_1 = (row['pickup_latitude'], row['pickup_longitude'])\n    coords_2 = (row['dropoff_latitude'], row['dropoff_longitude'])\n    return great_circle(coords_1, coords_2).miles","ad074881":"def calc_tariff_per_mile(data):\n    data['distance'] = data.apply(calc_distance , axis=1)\n    data['tariff_per_mile'] = (data['fare_amount'] - 2.5) \/ data['distance']\n    return data","c3a87818":"def parse_date(data):\n    data['pickup_datetime']  = pd.to_datetime(data['pickup_datetime'])\n    data['year'] = data['pickup_datetime'].apply(lambda t : pd.to_datetime(t).year)\n    data['month'] = data['pickup_datetime'].apply(lambda t : pd.to_datetime(t).month)\n    data['week_day'] = data['pickup_datetime'].apply(lambda t : pd.to_datetime(t).weekday)\n    data['hour'] = data['pickup_datetime'].apply(lambda t : pd.to_datetime(t).hour)\n    return data\n    ","fb75ef20":"# bounding_box definition ( west_long , east_long , south_lat , north_lat )\nNYC_bounding_box = (-74.26 , -73.71 ,  40.43 , 40.95)\nJFK_bounding_box = (-73.86 , -73.75 ,  40.61 , 40.66)\nLGA_bounding_box = (-73.91 , -73.82 ,  40.75 , 40.79)\nEWR_bounding_box = (-74.19 , -74.15 , 40.67 , 40.70)","377b19df":"def check_boundary_box(boundary_box , longtitude , latitude ):\n     if ( (boundary_box[0] < longtitude) & (longtitude < boundary_box[1]) & \n          (boundary_box[2] < latitude) & (latitude < boundary_box[3]) ):      \n        return True\n     else:\n        return False ","30435ccd":"def get_trip_type(trip_row):\n    if (check_boundary_box(JFK_bounding_box ,  trip_row['pickup_longitude'] , trip_row['pickup_latitude'] ) |\n        check_boundary_box(LGA_bounding_box ,  trip_row['pickup_longitude'] , trip_row['pickup_latitude'] ) |\n        check_boundary_box(EWR_bounding_box ,  trip_row['pickup_longitude'] , trip_row['pickup_latitude'] )) :\n        \n        return 'airport'\n    \n    elif (check_boundary_box(JFK_bounding_box ,  trip_row['dropoff_longitude'] , trip_row['dropoff_latitude'] ) |\n          check_boundary_box(LGA_bounding_box ,  trip_row['dropoff_longitude'] , trip_row['dropoff_latitude'] ) |\n          check_boundary_box(EWR_bounding_box ,  trip_row['dropoff_longitude'] , trip_row['dropoff_latitude'] )) :\n            \n        return 'airport'\n    \n    elif (check_boundary_box(NYC_bounding_box ,  trip_row['pickup_longitude'] , trip_row['pickup_latitude'] ) &\n          check_boundary_box(NYC_bounding_box ,  trip_row['dropoff_longitude'] , trip_row['dropoff_latitude'] )):\n        \n         return 'nyc'\n    else:\n         return 'out'\n      \n","8f460c83":"def classify_nyc_trip(data):\n    data['trip_type'] = data.apply(get_trip_type , axis=1)\n    return data","d9a31435":"def estimate_conditional_pdf(data,x,xLabel):\n    y = 'fare_amount'\n    print (data.groupby([x])[y].agg(['mean', 'std', 'count']))\n    fig, ax = plt.subplots(1,2 , figsize=(18,5))\n    fig.suptitle('Conditional Fare Amount Distribution given '+ xLabel)\n    sns.barplot(x = x , y = y ,  data = data , ax = ax[0] )\n    for  xgrp , grp_mean  in data.groupby(x):\n        sns.kdeplot( np.log(grp_mean[y]) , label = f'{xgrp} '+xLabel , ax = ax[1])","cce8e9a9":"def partition_time(data):\n    bins = [ 0  , 6 , 12  , 16 , 20 , 24]\n    labels = ['overnight' , 'morning', 'afternoon', 'rush_hour' , 'evening']\n    data['time_group'] = pd.cut(data['hour'], bins, labels=labels)\n    return data","7833297e":"train_df = train_df.drop(train_df[train_df['fare_amount'] < 2.5 ].index,axis = 0)\ntrain_df.shape","cf057d58":"train_df = clean_passenger(train_df)\ntrain_df.shape","b00e552d":"train_df = clean_location(train_df)\ntrain_df.shape","75abc6b5":"train_df = calc_tariff_per_mile(train_df)\ntrain_df.shape","e6f19d31":"train_df = parse_date(train_df)\ntrain_df.shape","e8494e67":"train_df = partition_time(train_df)\ntrain_df.shape","a2e26e49":"train_df = classify_nyc_trip(train_df)\ntrain_df.shape","1a659d96":"train_df.info()","3cea54cc":"fig, ax = plt.subplots(1,2 , figsize=(18,5))\nfig.suptitle('Fare Amount Distribution')\nsns.distplot(train_df['fare_amount'] , ax = ax[0] )\nsns.distplot(np.log(train_df['fare_amount']) , ax = ax[1])","2bc81168":"estimate_conditional_pdf(train_df, 'passenger_count' , 'Passenger Count')","892c5e8a":"estimate_conditional_pdf(train_df, 'year' , 'Year')","22ccd5c1":"estimate_conditional_pdf(train_df, 'month' , 'Month')","a4ca4db2":"estimate_conditional_pdf(train_df, 'week_day' , 'Week Day')","51d1d3f0":"estimate_conditional_pdf(train_df, 'hour' , 'Hour')","97116e21":"train_df = partition_time(train_df)","cc1bb855":"estimate_conditional_pdf(train_df, 'time_group' , 'Time Group')","4cb46574":"estimate_conditional_pdf(train_df,'trip_type','Trip Type')","e2747eb0":"train_df.info()","82ec9fe2":"train_df = pd.get_dummies( train_df, columns = ['trip_type'] )\ntrain_df = pd.get_dummies( train_df, columns = ['time_group'] )","30fa696e":"train_df.info()","150fb55f":"from sklearn.model_selection import train_test_split\nfeatures = [ 'passenger_count' ,  'distance' ,  'year' ,  'week_day' ,   'trip_type_airport' , 'trip_type_nyc' , 'trip_type_out' , 'time_group_overnight' , 'time_group_morning' , 'time_group_afternoon' , 'time_group_rush_hour' , 'time_group_evening' ]\nX_train, X_test, Y_train, Y_test = train_test_split( train_df[features] , train_df[['fare_amount']] , test_size=0.25 , random_state=1)\nmodels = {}","3877880b":"# Add linear regression model\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\n\nmodels['linear_model'] = Pipeline((\n        (\"standard_scaler\", StandardScaler()),\n        (\"linear_reg\", LinearRegression()),\n    ))","f4838d18":"# Add linear model with polynomial features. Use Ridge for L2 regularization\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import Ridge\n\nmodels['polynomial'] = Pipeline((\n        (\"standard_scaler\", StandardScaler()),    \n        (\"poly_features\", PolynomialFeatures(degree=2)),\n        (\"ridge\", Ridge()),\n    ))","87b375fc":"from sklearn.ensemble import GradientBoostingRegressor\n\nmodels['gradient_boosting_n10'] = GradientBoostingRegressor(max_depth=2, n_estimators=10, learning_rate=1.0)\nmodels['gradient_boosting_n100'] = GradientBoostingRegressor(max_depth=2, n_estimators=100, learning_rate=0.2)","40261bde":"# Add RandomForestRegressor with several different parameters\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodels['random_forest_regressor_n10'] = RandomForestRegressor(n_estimators=10, max_depth=10, min_samples_leaf=10)\nmodels['random_forest_regressor_n100'] = RandomForestRegressor(n_estimators=100, max_depth=10, min_samples_leaf=10)","c62666cd":"from sklearn import metrics\nfor name, model in models.items():\n    model.fit(X_train,Y_train)\n    print('\\n... model name {} ...'.format(name))\n    Y_predict = model.predict(X_test)\n    print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, Y_predict))\n    print('Mean Squared Error:', metrics.mean_squared_error(Y_test, Y_predict))\n    print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, Y_predict)))","3329b865":"we generate 4 features from pickup date (year,month,weekday and hour)","f7a728cf":"As we can deduce there is a strong relation between trip type (airport or within NYC) and fare amount","fcb69ef4":"based on this histogram we will partition the pickup hour","d14dd1bf":"calculate distance and tarrif per mile","2037e892":"classify trip to 3 category \n1. To or From airport\n2. In Newyork city\n3. Out Newyork city","476d1ebd":"We can assume now there is a linear relation between fare amount and year of the trip","cd0c8dcf":"Now we will build the prediction model based on linear , polynomial , random forest regression and gradient boosting","6b3a089a":"We will try to study fare amount distribution  ","851dacc0":"Now we will discuss pickup time (trip time) analysis via study conditional distribution for fare amount given year , month , week day and hour","45e7c594":"based on https:\/\/www1.nyc.gov\/site\/tlc\/passengers\/taxi-fare.page\nwe can assume fare amount depneds on the following variables \ndistance , trip hour , weekday , destination city , to or from airport ","c2333ad4":"We can assume there is a relation between fare amount and passenger count since if there is no passenger such as a trip for transporting goods it will be less than mean of fare amount","2f9a6874":"Discuss relation between fare amount and passenger count via fare amount distribution given passenger count"}}