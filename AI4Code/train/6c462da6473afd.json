{"cell_type":{"9a9f47ff":"code","a4c1ab62":"code","392e7439":"code","daa66531":"code","8e8dc04c":"code","f0143b26":"code","ce5cb37a":"code","164cc3c4":"code","b254c20d":"code","1920bfa8":"code","191e0221":"code","eaf6fec5":"code","92587c6a":"code","fc45a589":"code","85a6f0e1":"code","b65879bc":"code","7abe6751":"code","600288a9":"code","25e1ea2a":"code","6b853bb1":"code","41e0df57":"code","d90b1df6":"code","152b003b":"code","325ca4fc":"code","7a30f468":"code","38026ebc":"code","339020be":"code","90ae424d":"code","b019cd9b":"markdown","22f382c7":"markdown","012e53cf":"markdown","82342064":"markdown","ded4f8ed":"markdown","2ad65f73":"markdown","c393c815":"markdown","ca216eb9":"markdown","e1e7a9c4":"markdown","982d5895":"markdown","1f7560ee":"markdown","6aeaa80e":"markdown","3c11e982":"markdown","23825050":"markdown","50163345":"markdown","eba67d90":"markdown","be16277a":"markdown","9bf58d66":"markdown","474df799":"markdown","e241db76":"markdown","fe963f52":"markdown","06fe5349":"markdown"},"source":{"9a9f47ff":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nurl = 'https:\/\/raw.githubusercontent.com\/Dutta-SD\/Images_Unsplash\/master\/Kaggle\/bews_self_edit_1.png'\nfrom IPython.display import Image\nImage(url)","a4c1ab62":"## We might get some warnings later due to unknown characters. So we import this cell\nimport warnings\nwarnings.filterwarnings('ignore')","392e7439":"# Latin 1 encoding seems to be needed for this dataset\nimport pandas as pd\nspData = pd.read_csv('..\/input\/top50spotify2019\/top50.csv',encoding = 'latin_1', index_col=0)\nspData.head()","daa66531":"# Get information\nspData.info()","8e8dc04c":"# We will remove the + using regex(credits : Stack Overflow) :P\nfrom wordcloud import WordCloud\nfrom collections import Counter\nallSongs = [trackname for trackname in spData['Track.Name']]\nwc_dict = Counter(allSongs)\n\nwordcloud = WordCloud(width=1000, height=500).generate_from_frequencies(wc_dict)\nplt.figure(figsize = (20, 10))\nplt.imshow(wordcloud)\nplt.axis('off');","f0143b26":"# We will remove the + using regex(credits : Stack Overflow) :P\nfrom wordcloud import WordCloud\nfrom collections import Counter\nallSongs = [trackname for trackname in spData['Artist.Name']]\nwc_dict = Counter(allSongs)\n\nwordcloud = WordCloud(width=1000, height=500, background_color = 'white').generate_from_frequencies(wc_dict)\nplt.figure(figsize = (20, 10))\nplt.imshow(wordcloud)\nplt.axis('off');","ce5cb37a":"!pip -q --disable-pip-version-check install mplcyberpunk","164cc3c4":"# Plotting Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport mplcyberpunk\n%matplotlib inline","b254c20d":"plt.style.use('cyberpunk')\nplt.figure(figsize = (6, 30))\nsns.barplot(data = spData, y = 'Track.Name', x= 'Popularity');\nmplcyberpunk.make_lines_glow()","1920bfa8":"plt.figure(figsize = (20, 5));\nsns.countplot(data = spData, x = 'Beats.Per.Minute', palette = 'winter');\nmplcyberpunk.add_glow_effects()\nplt.title('Count of Beats Per Minute');","191e0221":"## Danceability\n##sns.set(style = 'whitegrid')\n\nplt.style.use('cyberpunk')\nplt.figure(figsize = (25, 5))\nsns.pointplot(data = spData, x = 'Track.Name',y = 'Danceability',hue = 'Popularity', palette = 'inferno');\n# remove lines\nsns.despine(offset = 10)\n# Rotate text by 90\nplt.xticks(rotation = 90)\nplt.title('Danceability');\n# Move Legend\nplt.legend(loc=8, ncol = 18);\n\nmplcyberpunk.add_glow_effects()","eaf6fec5":"# Genre plots using Plotly\nimport plotly.express as px\nfig = px.pie(spData, values = 'Popularity', names='Genre', hole = 0.3)\nfig.update_layout(annotations=[dict(text='Genre',font_size=20, showarrow=False)])","92587c6a":"import plotly.graph_objects as go\n\n# Generate Charts with Plotly\nfig = go.Figure(data = [go.Scatter3d(\n    x = spData['Energy'],\n    y = spData['Loudness..dB..'],\n    z = spData['Liveness'],\n    text = spData['Track.Name'],  ## Additional texts which will be shown\n    mode = 'markers',\n    marker = dict(\n    color = spData['Popularity'],\n    colorbar_title = 'Popularity',\n    colorscale = 'blues'\n    )\n)])\n\n# Set variables and size\nfig.update_layout(width=800, height=800, title = 'Energy, Liveness, Acousticness plot of Songs',\n                  scene = dict(xaxis=dict(title='Energy'),\n                               yaxis=dict(title='Liveness'),\n                               zaxis=dict(title='Acousticness')\n                               )\n                 )\n\nfig.show()","fc45a589":"# Visualise the Valence\nplt.figure(figsize = (10, 4))\nplt.style.use('cyberpunk')\nsns.distplot(spData['Valence.'],\n             rug=True,\n             hist_kws={\"histtype\": \"stepfilled\",\n                       'linewidth' : 2,\n                       'color':'r',\n                      'alpha' : 0.11});\nplt.title('Valence. Distribution');\nmplcyberpunk.add_glow_effects()","85a6f0e1":"# Energy plot\nsns.set(style = 'white')\nplt.figure(figsize = (10, 10));\nsns.despine(offset = 10, left = True)\nsns.jointplot(data = spData, \n              x = 'Energy',\n              y = 'Loudness..dB..',\n              kind = 'kde',\n              color = '#3a4e0b',\n              space = 1);","b65879bc":"# Speechiness\nfig = px.histogram(spData,\n                   x=\"Speechiness.\",\n                  opacity = 1,\n                  title = 'Speechiness Histogram',\n                  color = 'Artist.Name')\nfig.show()\n","7abe6751":"# Length\nfig = px.line(spData,\n              y = 'Length.',\n              x = 'Track.Name',\n              title = 'Length of Popular Songs(Hover to See Name)')\nfig.update_xaxes(visible=False)\n\nfig.show()\n","600288a9":"# review the data once again\nspData.tail()","25e1ea2a":"# Retain numeric columns\nspData2 = spData.drop(['Track.Name', 'Artist.Name', 'Genre'], axis = 1)\nspData2.head()","6b853bb1":"sns.pairplot(data = spData2, corner = True)","41e0df57":"plt.figure(figsize = (11, 11))\nplt.title('Correlation between all features')\nsns.heatmap(data = spData2.corr(),\n            annot = True,\n            cmap = 'copper_r',\n            square = True,\n           linewidths = 0.9);","d90b1df6":"from sklearn.linear_model import TheilSenRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error","152b003b":"X = spData2.iloc[: , :-1] # All rows, all columns upto column `-1` ie popularity\ny = spData2.iloc[:, -1] # The last row , 'Popularity'","325ca4fc":"y.plot();","7a30f468":"# Split The data\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.2, shuffle = True, random_state = 42)","38026ebc":"# define Model\nlRegrssModel = TheilSenRegressor()\n\n# Fit Model\nlRegrssModel.fit(X_train, y_train)\n\n# Get Predictions\ny_preds = lRegrssModel.predict(X_val)","339020be":"mean_squared_error(y_val, y_preds)","90ae424d":"print('True\\tPred')\nfor (trueVal, predVal) in zip(y_val, y_preds):\n    print(f\"{trueVal}\\t{predVal:.3f}\")","b019cd9b":"# Can we predict Popularity?\n\nLet us try to predict popularity of the songs based on the data we have available here.","22f382c7":"## We got some outliers in Linear Model. ","012e53cf":"# Genre Exploration using Plotly\nExploring the influence of Genre","82342064":"# How Long Music is most preferred?","ded4f8ed":"## Inference\nDance pop seems to be the most popular, followed by pop and latin","2ad65f73":"**Spotify is an online music streaming platform. This data file contains details of the top 50 songs of Spotify in 2019.\nLet us use techniques to see what information we can extract from this database.**\n\n* Version 10 : Added new mplcyberpunk effects\n* Version 13 : Added Word Clouds","c393c815":"# Data Analysis and EDA","ca216eb9":"## Inference\nBad Guy!!!","e1e7a9c4":"## Inference\nAbout **176 bpm** seems to be the most frequent bpm","982d5895":"# PairPlot of all the variables","1f7560ee":"# Energy,Liveliness, Acousticness\n3d Mapping of these 3 variables","6aeaa80e":"## Inference\nMost popular songs have a popularity somewhere between 70 and 80.","3c11e982":"## 1. Most Popular Songs","23825050":"# Heatmap","50163345":"# Predictive Modelling with outliers using Theil Sen Estimator\n","eba67d90":"Let us retain all the numeric columns and see what we can predict","be16277a":"# Read in the data File\n\nWe can see that the first song, has a character that pandas will not be able to recognise with **UTF-8**. So we use **latin_1** as encoding","9bf58d66":"# Speechiness and Length","474df799":"# 0. WordClouds!","e241db76":"# Hooray!\n# Hope you like it!","fe963f52":"# Danceability\n\nHow much would you like to groove to each of these tunes??","06fe5349":"# Valence, Energy and More"}}