{"cell_type":{"9eb29678":"code","9afc9bc3":"code","4177b9ae":"code","4f3b6473":"code","16ef9228":"code","353cc7a2":"code","ecf3307d":"code","b73d2d54":"code","25bd4873":"code","1bbc5ceb":"code","08249377":"code","64774ecd":"code","d71e0437":"code","d582596b":"code","9c479231":"code","aebfa94f":"code","5b845121":"code","d027371b":"code","a1c2fa2a":"code","ca9707cb":"code","95315cc8":"markdown","c2e95c8f":"markdown","9082f733":"markdown","76d782ca":"markdown","aadf39a1":"markdown","41ed389f":"markdown","4876ed9b":"markdown","1958f2ab":"markdown","0fd48eee":"markdown","511c8e33":"markdown","276fe1b8":"markdown","964c29fc":"markdown","76b15438":"markdown","f1f6295e":"markdown","6a07d758":"markdown","a0247245":"markdown"},"source":{"9eb29678":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","9afc9bc3":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames[:5]:\n        print(os.path.join(dirname, filename))\nTRAIN_IMG_PASS = '..\/input\/petfinder-pawpularity-score\/train'","4177b9ae":"df_train = pd.read_csv('\/kaggle\/input\/petfinder-pawpularity-score\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/petfinder-pawpularity-score\/test.csv')","4f3b6473":"fig = plt.figure(figsize=(15,5), dpi=150)\nsns.histplot(data=df_train, x='Pawpularity', bins=100)\nplt.axvline(df_train['Pawpularity'].mean(), ls='--', c='red', lw=3, label='Mean')\nplt.axvline(df_train['Pawpularity'].median(), ls='--', c='blue',lw=3, label='Median')\nplt.title('Pawpularity Scores', fontsize=20, fontweight='bold')\nplt.legend()\nplt.show()","16ef9228":"def plot_img(min, max):\n    less10 = train.query(f'{min} <= Pawpularity < {max}')\n    sample_less10 = less10.sample(n=5).reset_index()\n\n    fig = plt.figure(figsize=(30,30))\n    for index, row in sample_less10.iterrows():\n        title = str(row['Pawpularity'])\n        img = plt.imread(os.path.join(TRAIN_IMG_PASS, row['Id'] + '.jpg'))\n        plt.subplot(1,5,index+1)\n        plt.title(f'Pawpularity:{title}', fontsize=18)\n        plt.imshow(img)\n    plt.show()","353cc7a2":"img = plt.imread('\/kaggle\/input\/petfinder-pawpularity-score\/train\/1ade125ab98dcbe2963b5a92c0dd0416.jpg')\nplt.imshow(img)\nplt.show()","ecf3307d":"def plot_img(min_score, max_score):\n    less10 = df_train.query(f'{min_score} <= Pawpularity < {max_score}')\n    sample_less10 = less10.sample(n=5).reset_index()\n\n    fig = plt.figure(figsize=(30,30))\n    for index, row in sample_less10.iterrows():\n        title = str(row['Pawpularity'])\n        img = plt.imread(os.path.join(TRAIN_IMG_PASS, row['Id'] + '.jpg'))\n        plt.subplot(1,5,index+1)\n        plt.title(f'Pawpularity:{title}', fontsize=18)\n        plt.imshow(img)\n    plt.show()","b73d2d54":"plot_img(0, 10)","25bd4873":"plot_img(20, 40)","1bbc5ceb":"plot_img(40, 60)","08249377":"plot_img(60, 90)","64774ecd":"plot_img(90, 100)","d71e0437":"!pip install flaml --quiet\nimport flaml\nfrom flaml import AutoML\nimport warnings\nwarnings.filterwarnings('ignore')","d582596b":"feature_cols=df_train.columns[1:13]\ntrain_set = np.array(df_train[feature_cols])\ntest_set = np.array(df_test[feature_cols])\ndf_train['label'] = pd.cut(np.array(df_train['Pawpularity']),\n                          bins = list(range(0,110,10)),\n                          labels = list(range(0,10)))","9c479231":"df_train.head()","aebfa94f":"paw_values = []\nfor i in range(0,10):\n    v = list(df_train[df_train['label'] == i]['Pawpularity'])\n    paw_values.append(np.mean(v))\nytrain = np.array(df_train['label'])","5b845121":"clf = AutoML()\nsettings = {\n    'estimator_list':['xgboost','rf','lgbm','catboost'],\n    'log_file_name':'pp.log',\n    'task':'classification',\n    'metric':'accuracy',\n    'time_budget':360,\n    'seed': 1000\n}\nclf.fit(train_set, ytrain, **settings)","d027371b":"pred = clf.predict(test_set)","a1c2fa2a":"pred_set = [paw_values[i] for i in pred]","ca9707cb":"pred_df = pd.DataFrame.from_dict({\n    \"Id\":list(df_test[\"Id\"]),\n    \"Pawpularity\":pred_set\n})\npred_df.to_csv('.\/submission.csv',index=False)\npred_df.head(5)","95315cc8":"# Making first predictions based on metadata & AutoML","c2e95c8f":"### Bin the pawpularity score among a list of values ranging from 0 to 100\nLabels is a list of pawpularity score values ranging from 1 to 10","9082f733":"### Making Submission","76d782ca":"### Problem statement\nPredict the pawpularity score of pet images.","aadf39a1":"# ANNND THIS is a lovely PUGG","41ed389f":"# Understanding different ranges of `Pawpularity` representatives\n\n## Low Pawpularity (1-10)","4876ed9b":"## Maximum Pawpularity (90 - 100)","1958f2ab":"## Upper Intermediate Pawpularity (40 - 60)","0fd48eee":"### Conclusion\n\nFrom my perspective, some of the pets who have low popularity are quite nice though other pets with high popularity do not have that great appearance.\nSo from a human perspective, it's hard to determine by just looking at the picture if the pet is going to be popular or not. One more notice is that popularity might be mostly determined by the unusual picture. Once the user saw something unusual in the picture, it might lead to a growth of click rate independently of pet appearance.","511c8e33":"# Check images \ud83d\udc36\ud83d\udc31\nLet's have a look at what type of data we are actually working on.","276fe1b8":"### Iterate through the paw values list and  update the final predicted pawpularity scores\nConverting cztegories (bins) back to scores","964c29fc":"# Check distribution of pawpularity scores","76b15438":"### Training Classification Model (classify bins 0 .. 10)","f1f6295e":"### Here we will try not predict the target variable itself, but to classify it in the bins created previously","6a07d758":"## Intermediate Pawpularity (20 - 40)","a0247245":"## High  Pawpularity (60 - 90)"}}