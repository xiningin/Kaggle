{"cell_type":{"be324458":"code","c3675e78":"code","4c7ac3ba":"code","4a68473c":"code","7ddf0c70":"code","47317664":"code","f9cd8881":"code","e383706e":"code","c923cec4":"code","a507f64e":"code","cac819b8":"code","8f906896":"code","3002a617":"code","4c3be922":"code","dbffbd7e":"code","6709df98":"code","26ccfee1":"code","08063bf4":"code","56cda74c":"code","4b76b181":"code","97965e41":"code","5bf6d375":"code","3a1d89af":"code","291ac517":"code","f5abe135":"code","e3777e8b":"code","481919b3":"code","bfc80ec3":"code","329ccfbf":"code","7a502ee1":"code","fa5a18db":"code","44a35ff3":"code","f9eefd68":"code","d2ea4c4c":"code","64bfdd6e":"code","8a51120e":"code","7075c00d":"code","8482d6ea":"code","3edb08cb":"code","bff0a418":"code","95969382":"code","999da214":"code","8d332b25":"code","28db42bd":"code","e3967e3d":"code","dfb4c9bc":"code","550abf6e":"code","e614c7ca":"code","06b61739":"markdown","2b388217":"markdown","907b2088":"markdown","20303c42":"markdown","358c71a6":"markdown","6ce22a5e":"markdown","97854671":"markdown","28f90745":"markdown","552d6804":"markdown","8dabc58b":"markdown","bf89efeb":"markdown","5751fcc1":"markdown","72a92559":"markdown","090e8fe4":"markdown","2c0490f6":"markdown","d82e6161":"markdown","224827cc":"markdown","222d211b":"markdown","37255329":"markdown","7362cff1":"markdown","555bf9a7":"markdown","66db9682":"markdown","a8f6a7d9":"markdown","05c01955":"markdown","f877f310":"markdown","5e6082db":"markdown","398606b8":"markdown","c5248e19":"markdown","19b5abd1":"markdown","91d32f10":"markdown","3e65f887":"markdown","80b423e4":"markdown"},"source":{"be324458":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3675e78":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]\n","4c7ac3ba":"train_df.columns","4a68473c":"train_df.head()","7ddf0c70":"train_df.describe()","47317664":"train_df.info()","f9cd8881":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var= train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue= var.value_counts()\n    \n    # visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{} \\n {}\".format(variable,varValue))","e383706e":"category1=[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","c923cec4":"category2=[\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{}\\n\".format(train_df[c].value_counts))","a507f64e":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","cac819b8":"numericVar=[\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","8f906896":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","3002a617":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","4c3be922":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","dbffbd7e":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","6709df98":"# Age vs Survived\ntrain_df[[\"Age\",\"Survived\"]].groupby([\"Age\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","26ccfee1":"age_groups=pd.cut(train_df[\"Age\"],bins=[0, 15, 30, 50, 65, np.inf])\nage_groups\n","08063bf4":"train_df[[\"Survived\"]].groupby([age_groups]).mean().sort_values(by=\"Survived\",ascending=False)","56cda74c":"def detect_outliers(df,features):\n    outlier_indices=[]\n    \n    for c in features:\n        #1st quartile\n        Q1=np.percentile(df[c],25)\n        #3rd quartile\n        Q3=np.percentile(df[c],75)\n        #IQR\n        IQR=Q3-Q1\n        #Outlier Step\n        outlier_step=IQR*1.5\n        #Detect outlier and their indices\n        outlier_list_col=df[(df[c]<Q1-outlier_step) | (df[c]>Q3+outlier_step)].index\n        #Store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices=Counter(outlier_indices)\n    multiple_outliers=list(i for i, v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers","4b76b181":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","97965e41":"#Drop outliers\ntrain_df=train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","5bf6d375":"train_df_len=len(train_df)\ntrain_df=pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","3a1d89af":"train_df.columns[train_df.isnull().any()]","291ac517":"train_df.isnull().sum()","f5abe135":"train_df[train_df[\"Embarked\"].isnull()]","e3777e8b":"train_df.boxplot(column=\"Fare\", by=\"Embarked\")","481919b3":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","bfc80ec3":"train_df[train_df[\"Fare\"].isnull()]","329ccfbf":"train_df[train_df[\"Pclass\"]==3]","7a502ee1":"np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"])","fa5a18db":"train_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","44a35ff3":"train_df[train_df[\"Fare\"].isnull()]","f9eefd68":"list1=[\"Parch\", \"SibSp\" ,\"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True,fmt=\".2f\")\nplt.show()","d2ea4c4c":"g=sns.factorplot(x=\"SibSp\",y=\"Survived\", data=train_df, kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","64bfdd6e":"g=sns.factorplot(x=\"Parch\", y=\"Survived\", data=train_df, kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","8a51120e":"g=sns.factorplot(x=\"Pclass\",y=\"Survived\",data=train_df,kind=\"bar\",size=5)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","7075c00d":"g=sns.FacetGrid(train_df, col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins=25)\nplt.show()","8482d6ea":"g=sns.FacetGrid(train_df,col=\"Survived\",row=\"Pclass\",size=3)\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend()\nplt.show()","3edb08cb":"g=sns.FacetGrid(train_df,row=\"Embarked\",size=2)\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","bff0a418":"g=sns.FacetGrid(train_df,row=\"Embarked\",col=\"Survived\",size=2.5)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","95969382":"train_df[train_df[\"Age\"].isnull()]","999da214":"sns.factorplot(x=\"Sex\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","8d332b25":"sns.factorplot(x=\"Sex\",y=\"Age\",hue=\"Pclass\",data=train_df,kind=\"box\")\nplt.show()","28db42bd":"sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df,kind=\"box\")\nsns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df,kind=\"box\")\n\nplt.show()","e3967e3d":"train_df[\"Sex\"]=[1 if i==\"male\" else 0 for i in train_df[\"Sex\"] ]","dfb4c9bc":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot=True)\nplt.show()","550abf6e":"index_nan_age=list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_prediction=train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_median=train_df[\"Age\"].median()\n    if not np.isnan(age_prediction):\n        train_df[\"Age\"].iloc[i]=age_prediction\n    else:\n        train_df[\"Age\"].iloc[i]=age_median\n","e614c7ca":"train_df[train_df[\"Age\"].isnull()]","06b61739":"# Titanic EDA\n\n\n\nThe Titanic disaster is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n\nContent:\n\n<font color='blue'>\n\n    \n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between Parch -- SibSp -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing Age Feature](#20)\n    ","2b388217":"* SipSp and Parch can be used for new feature extraction with treshold=3\n* Small families have more chance to survive.\n* There is a standard deviation in survival of passenger with Parch=3","907b2088":"<a id=4><\/a><br>\n\n## Categorical Variable:","20303c42":"<a id=15><\/a><br>\n## Pclass -- Survived","358c71a6":"<a id=19><\/a><br>\n\n## Embarked -- Sex -- Fare -- Survived ","6ce22a5e":"<a id=2><\/a><br>\n# Variable Description\n\n1. PassengerId: Unique ID number to each passenger\n2. Survived: Passenger Survived(1) or Died(0)\n3. Pclass: Passenger Class\n4. Name: Name of the Passenger\n5. Sex: Sex of the Passenger\n6. Age: Age of the Passenger\n7. SibSp: Number of Siblings or Spouses\n8. Parch: Number of Parents or Children\n9. Ticket: Ticket Number\n10. Fare: Money Spent on Ticket\n11. Cabin: Cabin Category\n12. Embarked: Port embarked on (C=Cherbourg, Q=Queenstown, S=Southampton)\n\n","97854671":"<a id=1><\/a><br>\n# Load and Check Data","28f90745":"<a id=5><\/a><br>\n\n## Numerical Variable: ","552d6804":"* 1st class passengers are older than 2nd, and 2nd class are older than 3rd class","8dabc58b":"<a id=16><\/a><br>\n## Age -- Survived","bf89efeb":"* Female passengers have much better survival rate than males\n* Male passengers have better survival rate in Pclass 3 in C\n* Embarked and Sex features will be used in model training","5751fcc1":"<a id=17><\/a><br>\n\n## Pclass -- Survived -- Age","72a92559":"* Passengers who pay higher fare have better survival rate. \n* Fare can be used as categorical feature for training.\n","090e8fe4":"<a id=20><\/a><br>\n## Fill Missing Age Feature","2c0490f6":"* Sex is not informative for age prediction\n* Age distribution seems to be same","d82e6161":"* Pclass is an important feature for model training","224827cc":"<a id=14><\/a><br>\n## Parch -- Survived","222d211b":"<a id=3><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Embarked, Cabin, Name, Ticket, SibSp and ParCh\n* Numerical Variable: Fare, Age and PassengerId","37255329":"<a id=12><\/a><br>\n## Correlation Between Parch -- SibSp -- Age -- Fare -- Survived","7362cff1":"Fare feature seems to have correlation with Survived feature(0.26).","555bf9a7":"* Age<=10 has a high survival rate\n* Older passangers(80) survived\n* Large number of 20 years old did not survived\n* Most passengers are in 15-35 age range\n* Use age feature in training\n* Use age distribution for missing value of age","66db9682":"<a id=18><\/a><br>\n\n## Embarked -- Sex -- Pclass -- Survived ","a8f6a7d9":"<a id=11><\/a><br>\n# Visualization","05c01955":"* Age is not correlated with Sex, but it is correlated with Parch, SibSp and Pclass","f877f310":"* float64(2): Age and Fare\n* int64(5): PassengerId, Survived, Pclass, SibSp, Parch\n* object(5): Name, Sex, Ticket, Cabin, Embarked","5e6082db":"<a id=6><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n* Age - Survived","398606b8":"* Having a lot of SibSp have less chance to survive\n* If SibSp ==0 or 1 or 2, passenger has more chance to survive\n* We can consider a new feature describing these categories","c5248e19":"<a id=8><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","19b5abd1":"<a id=10><\/a><br>\n## Fill Missing Value\n* Embark has 2 missing values\n* Fare has only 1","91d32f10":"<a id=13><\/a><br>\n## SibSp -- Survived","3e65f887":"<a id=9><\/a><br>\n## Find Missing Value","80b423e4":"<a id=7><\/a><br>\n# Outlier Detection\n"}}