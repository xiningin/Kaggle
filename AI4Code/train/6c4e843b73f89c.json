{"cell_type":{"06f4b5a4":"code","37a522e0":"code","532a2911":"code","3c0b9c74":"code","9cfdbd88":"code","0516d0f7":"code","7ad8b2cb":"code","8948a45c":"code","762eec65":"code","5d1077a1":"markdown","aafa714e":"markdown","5227931d":"markdown","a7d8ff21":"markdown","61e23e04":"markdown","cba28b4b":"markdown"},"source":{"06f4b5a4":"import numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('..\/input\/xigua30\/xigua_data3.0.csv',index_col=0)","37a522e0":"df.loc[df['\u5bc6\u5ea6']>df['\u5bc6\u5ea6'].median(),'\u5bc6\u5ea6']='\u9ad8'\ndf.loc[df['\u5bc6\u5ea6']!='\u9ad8','\u5bc6\u5ea6']='\u4f4e'\ndf.loc[df['\u542b\u7cd6\u7387']>df['\u542b\u7cd6\u7387'].median(),'\u542b\u7cd6\u7387']='\u9ad8'\ndf.loc[df['\u542b\u7cd6\u7387']!='\u9ad8','\u542b\u7cd6\u7387']='\u4f4e'\n\nlabel=df['\u597d\u74dc']=='\u662f'\ndf=df.drop(['\u597d\u74dc'],axis=1)\ndf","532a2911":"label","3c0b9c74":"from math import log\n\ndef entropy(data,label):\n    ent = 0\n    for l in label.unique():\n        p = sum(label==l)\/len(label)\n        ent-= p*log(p,2)\n    return ent","9cfdbd88":"class node:\n    def __init__(self,df,label):\n        self.data=df\n        self.label=label\n        \n        self.criterion=None\n        self.children=[]\n        self.ent = entropy(df,label)\n        self.leaf=-1\n        self.type=''\n        \n    def divide(self):\n        if len(self.label.unique())==1:\n            self.leaf=list(self.label)[0]\n            return\n        if len(self.data.columns)==0:\n            self.leaf=self.label.value_counts().index[0]\n            return\n        \n        #\u5bfb\u627e\u6700\u4f18\u5c5e\u6027\n        IGs={}\n        for c in self.data.columns:\n            IG=self.ent\n            for typ in self.data[c].unique():\n                ent = entropy(self.data.loc[self.data[c]==typ],self.label[self.data[c]==typ])\n                IG -= ent*sum(self.data[c]==typ)\/len(self.data[c])\n            IGs[IG]=c\n            \n        if max(IGs.keys())>0:\n            self.criterion=IGs[max(IGs.keys())]\n            c=self.criterion\n            for typ in self.data[c].unique():\n                #\u5efa\u7acb\u5b50\u8282\u70b9\n                new_data = self.data.loc[self.data[c]==typ].drop(c,axis=1)\n                new_label = self.label[self.data[c]==typ]\n                new = node(new_data,new_label)\n                new.type=str(typ)\n                new.divide()\n                self.children.append(new)\n        else:\n            self.leaf=self.label.value_counts().index[0]\n            return","0516d0f7":"TREE = node(df,label)\nTREE.divide()","7ad8b2cb":"def bfs(node):\n    if node.criterion:\n        print(\"\u6309%s\u5212\u5206\"%node.criterion)\n        for c in node.children:\n            print(c.type,end='\\t')\n        print()\n        for c in node.children:    \n            print(c.leaf,end='\\t')\n        print()    \n        for c in node.children:\n            if c.leaf==-1:print('\u5982\u679c%s%s-->'%((node.criterion,c.type)),end='')\n            bfs(c)\n        ","8948a45c":"bfs(TREE)","762eec65":"with open('readme','w') as f:\n    f.write('ID3\u7b97\u6cd5\u5212\u5206\u897f\u74dc')","5d1077a1":"# \u5efa\u6811\u4e0e\u8bad\u7ec3","aafa714e":"# \u5c55\u793a\n* \u53ef\u89c6\u5316\u592a\u9ebb\u70e6\u5c31\u7528\u6587\u5b57\u5c55\u793a\u4e86\uff0corz\n* -1\u4ee3\u8868\u8fd8\u6709\u5b50\u8282\u70b9\n* True\u548cFalse\u8868\u793a\u662f\u4e0d\u662f\u597d\u74dc","5227931d":"# \u9884\u5904\u7406","a7d8ff21":"\u8ba1\u7b97\u4fe1\u606f\u71b5","61e23e04":"# \u7edf\u8ba1\u8ba1\u7b97\u4e0e\u673a\u5668\u5b66\u4e60\u4f5c\u4e1a","cba28b4b":"\u4fe1\u606f\u589e\u76ca\uff1a\n$$Gain(D,a) = Ent(D) - \\sum_{v=1}^V\\dfrac{|D^v|}{|D|}H(D^v)$$"}}