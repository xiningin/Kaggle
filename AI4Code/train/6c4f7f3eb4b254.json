{"cell_type":{"3a440164":"code","48a7d71d":"code","4085e659":"code","9bd23286":"code","d041b1ff":"code","89dda784":"code","b01c3aa2":"code","0b075fa1":"code","b4272577":"code","27b269b8":"code","2408267a":"code","8614c586":"code","060f5dc1":"code","49402833":"code","23e9a83e":"code","1ef8ef5b":"code","1e419df2":"code","761609f1":"code","dc0eab78":"code","2e9cdf20":"code","d983e90c":"code","662bae27":"markdown","4e2cb382":"markdown"},"source":{"3a440164":"!pip install '\/kaggle\/input\/competitionpackages\/wheels\/torch-1.7.1+cu110-cp37-cp37m-linux_x86_64.whl' --no-deps\n!pip install '\/kaggle\/input\/competitionpackages\/wheels\/torchvision-0.8.2+cu110-cp37-cp37m-linux_x86_64.whl' --no-deps\n!pip install '\/kaggle\/input\/competitionpackages\/wheels\/torchaudio-0.7.2-cp37-cp37m-manylinux1_x86_64.whl' --no-deps","48a7d71d":"!pip install '\/kaggle\/input\/1145141919810\/mmdetectionv2180\/addict-2.4.0-py3-none-any.whl' --no-deps\n!pip install '\/kaggle\/input\/1145141919810\/mmdetectionv2180\/yapf-0.31.0-py2.py3-none-any.whl' --no-deps\n!pip install '\/kaggle\/input\/1145141919810\/mmdetectionv2180\/terminal-0.4.0-py3-none-any.whl' --no-deps\n!pip install '\/kaggle\/input\/1145141919810\/mmdetectionv2180\/terminaltables-3.1.0-py3-none-any.whl' --no-deps\n!pip install '\/kaggle\/input\/1145141919810\/mmdetectionv2180\/mmcv_full-1_3_17-cu110-torch1_7_1\/mmcv_full-1.3.17-cp37-cp37m-manylinux1_x86_64.whl' --no-deps\n!pip install '\/kaggle\/input\/1145141919810\/mmdetectionv2180\/pycocotools-2.0.2\/pycocotools-2.0.2' --no-deps\n!pip install '\/kaggle\/input\/1145141919810\/mmdetectionv2180\/mmpycocotools-12.0.3\/mmpycocotools-12.0.3' --no-deps","4085e659":"!rm -rf mmdetection\n\n!cp -r \/kaggle\/input\/1145141919810\/mmdetectionv2180\/mmdetection-2.18.0 \/kaggle\/working\/\n!mv \/kaggle\/working\/mmdetection-2.18.0 \/kaggle\/working\/mmdetection\n%cd \/kaggle\/working\/mmdetection\n!pip install -e .\n#!rm \/kaggle\/working\/mmdetection\/configs\/_base_\/datasets\/coco_instance.py\n#!mv \/kaggle\/input\/cocoinstance\/coco_instance.py \/kaggle\/working\/mmdetection\/configs\/_base_\/datasets","9bd23286":"import torch\nimport torch.nn as nn\nimport torchvision.transforms as transforms\nimport torch.nn.functional as F\nimport sklearn\nimport torchvision\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nimport numpy as np\nimport cupy as cp\nimport gc\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport PIL\nimport json\nfrom PIL import Image, ImageEnhance\nimport albumentations as A\nimport mmdet\nimport mmcv\nfrom albumentations.pytorch import ToTensorV2\nimport seaborn as sns\nimport glob\nfrom pathlib import Path\nimport pycocotools\nfrom pycocotools import mask\nimport numpy.random\nimport random\nimport cv2\nimport re\nimport shutil\nfrom mmdet.datasets import build_dataset\nfrom mmdet.models import build_detector\nfrom mmdet.apis import train_detector\nfrom mmdet.apis import inference_detector, init_detector, show_result_pyplot, set_random_seed","d041b1ff":"%cd ..","89dda784":"IMG_WIDTH = 704\nIMG_HEIGHT = 520","b01c3aa2":"def rle_decode(mask_rle, shape):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (height,width) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape)\n\ndef rle_encode(img):\n    '''\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels = img.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)","0b075fa1":"def rle_encoding(x):\n    dots = np.where(x.flatten() == 1)[0]\n    run_lengths = []\n    prev = -2\n    for b in dots:\n        if (b>prev+1): run_lengths.extend((b + 1, 0))\n        run_lengths[-1] += 1\n        prev = b\n    return ' '.join(map(str, run_lengths))","b4272577":"def get_mask_from_result(result):\n    d = {True : 1, False : 0}\n    u,inv = np.unique(result,return_inverse = True)\n    mk = cp.array([d[x] for x in u])[inv].reshape(result.shape)\n#     print(mk.shape)\n    return mk","27b269b8":"def does_overlap(mask, other_masks):\n    for other_mask in other_masks:\n        if np.sum(np.logical_and(mask, other_mask)) > 0:\n            #import pdb; pdb.set_trace()\n            #print(\"Found overlapping masks!\")\n            return True\n    return False\n\n\ndef remove_overlapping_pixels(mask, other_masks):\n    for other_mask in other_masks:\n        if np.sum(np.logical_and(mask, other_mask)) > 0:\n            print(\"Overlap detected\")\n            mask[np.logical_and(mask, other_mask)] = 0\n    return mask","2408267a":"# %%writefile labels.txt\n# shsy5y\n# cort\n# astro","8614c586":"from mmcv import Config\ncfg = Config.fromfile('\/kaggle\/working\/mmdetection\/configs\/cascade_rcnn\/cascade_mask_rcnn_x101_64x4d_fpn_20e_coco.py')","060f5dc1":"cfg.dataset_type = 'CocoDataset'\ncfg.classes = '\/kaggle\/working\/labels.txt'\ncfg.data_root = '\/kaggle\/working'\n\nfor head in cfg.model.roi_head.bbox_head:\n    head.num_classes = 3\n    \ncfg.model.roi_head.mask_head.num_classes=3\n\ncfg.data.test.type = 'CocoDataset'\ncfg.data.test.classes = 'labels.txt'\ncfg.data.test.data_root = '..\/input\/livecellshsy5y'\ncfg.data.test.ann_file = 'annotations_val.json'\ncfg.data.test.img_prefix = '\/kaggle\/input\/sartorius-cell-instance-segmentation\/LIVECell_dataset_2021\/images\/livecell_train_val_images\/SHSY5Y\/'\n\ncfg.data.train.type = 'CocoDataset'\ncfg.data.train.data_root = '..\/input\/livecellshsy5y'\ncfg.data.train.ann_file = 'annotations_train.json'\ncfg.data.train.img_prefix = '\/kaggle\/input\/sartorius-cell-instance-segmentation\/LIVECell_dataset_2021\/images\/livecell_train_val_images\/SHSY5Y\/'\ncfg.data.train.classes = 'labels.txt'\n\ncfg.data.val.type = 'CocoDataset'\ncfg.data.val.data_root = '..\/input\/livecellshsy5y'\ncfg.data.val.ann_file = 'annotations_val.json'\ncfg.data.val.img_prefix = '\/kaggle\/input\/sartorius-cell-instance-segmentation\/LIVECell_dataset_2021\/images\/livecell_train_val_images\/SHSY5Y\/'\ncfg.data.val.classes = 'labels.txt'\n\ncfg.train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(type='Resize', img_scale=[(1333, 800), (2666, 1600)], keep_ratio=True),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'), \n    dict(type='Collect', keys=['img', 'gt_masks'])\n]\n\ncfg.val_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'), \n    dict(type='Collect', keys=['img', 'gt_masks'])\n    #\"\"\", 'gt_bboxes', 'gt_masks', 'gt_labels']\"\"\")\n]\n\ncfg.test_pipeline = [\n    dict(type='LoadImageFromWebcam'),\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations',with_mask=True),\n    dict(type='Resize', img_scale=[(480, 1333), (520, 1333),\n                                   (640, 1333), (704, 1333),\n                                   (768, 1333)], multiscale_mode='value', keep_ratio=True),\n    dict(\n        type='Normalize',\n        mean=[128, 128, 128],\n        std=[11.58, 11.58, 11.58],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img'])\n]\n\ncfg.work_dir = '\/kaggle\/working\/model_output\/cascade_mask_rcnn'\n\ncfg.data.samples_per_gpu = 2\ncfg.data.workers_per_gpu = 2\n\ncfg.data.train.pipeline = cfg.train_pipeline\ncfg.model.test_cfg.rcnn.max_per_img = 540\n#cfg.data.test.pipeline = cfg.test_pipeline\n#cfg.data.test.pipeline[0] = dict(type = 'LoadImageFromWebcam')\n\ncfg.evaluation.metric = 'segm'\ncfg.evaluation.interval = 4\n\ncfg.checkpoint_config.interval = 4\ncfg.runner.max_epochs = 12\ncfg.log_config.interval = 50\n\ncfg.seed = 0\nset_random_seed(0, deterministic=False)\ncfg.gpu_ids = range(1)\n# cfg.fp16 = dict(loss_scale=512.0)\n# meta = dict()\n# meta['config'] = cfg.pretty_text\nprint(f'Config:\\n{cfg.pretty_text}')","49402833":"masks = []\nfiles = []","23e9a83e":"confidence_thresholds = {0: 0.15, 1: 0.55, 2: 0.35}","1ef8ef5b":"# datasets = [build_dataset(cfg.data.train)]\nmodel = init_detector(cfg, '..\/input\/epoch-9\/sys5h_epoch6.pth')\n\nfor file in sorted(os.listdir('..\/input\/sartorius-cell-instance-segmentation\/LIVECell_dataset_2021\/images\/livecell_train_val_images\/SHSY5Y\/')):\n    img = mmcv.imread('..\/input\/sartorius-cell-instance-segmentation\/LIVECell_dataset_2021\/images\/livecell_train_val_images\/SHSY5Y\/' + file)\n    result = inference_detector(model, img)\n    show_result_pyplot(model, img, result)\n    msk = []\n    for i, classe in enumerate(result[0]):\n        if classe.shape != (0, 5):\n            bbs = classe\n#             print(bbs)\n            sgs = result[1][i]\n            for bb, sg in zip(bbs,sgs):\n                box = bb[:4]\n                cnf = bb[4]\n                if cnf >= confidence_thresholds[i]:\n                    mask = get_mask_from_result(sg)\n                    mask = remove_overlapping_pixels(mask, msk)\n                    msk.append(mask)\n                \n    for mk in msk:\n            rle_mask = rle_encoding(mk)\n            masks.append(rle_mask)\n            files.append(str(file.split('.')[0]))","1e419df2":"files = pd.Series(files, name='id')\npreds = pd.Series(masks, name='predicted')","761609f1":"submission_df = pd.concat([files, preds], axis=1)","dc0eab78":"submission_df.to_csv('submission.csv', index=False)","2e9cdf20":"submission_df","d983e90c":"shutil.rmtree('\/kaggle\/working\/mmdetection')","662bae27":"**inference**","4e2cb382":"**model**"}}