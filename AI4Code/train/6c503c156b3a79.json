{"cell_type":{"8a2f7464":"code","2de04cdf":"code","c88e2452":"code","def5bed8":"code","4d456e59":"code","fd09546a":"code","5f49648c":"code","ea1e331d":"code","5a44b2fb":"code","21889359":"code","77c01ffd":"code","b7abb03b":"code","ff49105d":"code","2b9f13e8":"code","2324fa5f":"code","ae58efce":"code","59a536b6":"code","85dec18b":"code","1ead85e7":"code","8a45f60c":"code","88a5cb70":"code","03508ddc":"code","ff207f04":"code","e6ca6ee6":"code","ed1886a4":"code","1b9b3ff5":"code","e4fc7778":"code","298b2091":"code","1f7a1d64":"code","7120b142":"code","455007f1":"code","521e24d2":"code","d1b0ebcd":"code","59688f3d":"code","e672799f":"code","bc6177dc":"markdown","1f998db2":"markdown","d4c30859":"markdown","ac14feaa":"markdown","9fd6972d":"markdown","5f15ca9c":"markdown"},"source":{"8a2f7464":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2de04cdf":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(\"ignore\")\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error","c88e2452":"train = pd.read_csv('..\/input\/30-days-of-ml\/train.csv')\ntest = pd.read_csv('..\/input\/30-days-of-ml\/test.csv')","def5bed8":"train.sample(7)\n","4d456e59":"test.sample(7)","fd09546a":"train.describe().T","5f49648c":"test.describe().T","ea1e331d":"train.isna().sum()","5a44b2fb":"test.isna().sum()","21889359":"train.info()","77c01ffd":"object_columns = train.select_dtypes(include=['object']).columns.values\nprint(object_columns)","b7abb03b":"float_columns = train.select_dtypes(include=['float64']).columns.values\nprint(float_columns)","ff49105d":"train.hist(figsize=(25,25))","2b9f13e8":"for i in object_columns:\n  print('Column Name: --> ',i)\n  print(train[i].value_counts())","2324fa5f":"a = 5\nb = 2\nc = 1\n\nfig = plt.figure(figsize=(14,10))\n\nfor i in object_columns:\n    plt.subplot(a, b, c)\n    plt.title('{}'.format(i))\n    plt.xlabel(i)\n    sns.countplot(train[i])\n    c = c + 1\n\nplt.show()","ae58efce":"#sns.pairplot(train)","59a536b6":"plt.figure(figsize=(18,15))\ncorr=train.iloc[:,:-1].corr()\ncorr_feat = corr.index\nsns.heatmap(train[corr_feat].corr(),cmap='cividis',annot=True,linewidths=2)","85dec18b":"x_train = train.drop('target',axis=1)","1ead85e7":"y_train = train['target']","8a45f60c":"x_train.head()","88a5cb70":"from sklearn.preprocessing import LabelEncoder,StandardScaler","03508ddc":"label = LabelEncoder()","ff207f04":"for i in object_columns:\n  x_train[i] = label.fit_transform(x_train[i])\n","e6ca6ee6":"x_train.head()","ed1886a4":"x_test = test.copy()","1b9b3ff5":"x_test.head()","e4fc7778":"for i in object_columns:\n  x_test[i] = label.fit_transform(x_test[i])\n","298b2091":"X_train, X_valid, y_train, y_valid = train_test_split(x_train,y_train, test_size=0.2, random_state=0)","1f7a1d64":"from xgboost import XGBRegressor","7120b142":"xgb = XGBRegressor(max_depth=3,learning_rate=0.08,n_estimators=2500,gamma=0.02,reg_alpha =40,reg_lambda=1,n_jobs=-1,booster='gbtree',tree_method='gpu_hist',eval_metric='rmse',subsample=0.9,random_state=25)","455007f1":"xgb.fit(X_train,y_train)","521e24d2":"pred = xgb.predict(X_valid)","d1b0ebcd":"pred","59688f3d":"mean_squared_error(y_valid,pred,squared=False)","e672799f":"predictions = xgb.predict(x_test)\n\noutput = pd.DataFrame({'Id': x_test.id,\n                       'target': predictions})\noutput.to_csv('submission.csv', index=False)","bc6177dc":"# Prepare Data","1f998db2":"**Label Encoding**","d4c30859":"# Train Model","ac14feaa":"# Model Preparation\n\n\n","9fd6972d":"# SUBMIT","5f15ca9c":"# EDA"}}