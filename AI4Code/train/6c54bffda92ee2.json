{"cell_type":{"7046eed2":"code","a4a75265":"code","084b1006":"code","8966c9bc":"code","631d5285":"code","089c1854":"code","5b119568":"code","ac6eb464":"code","44c10949":"code","27abbbe4":"code","0df5b64d":"code","422374bf":"code","ce79c6ae":"code","82d9711a":"code","957baa78":"code","2de88e94":"code","76c97b3f":"markdown","d1f1fb61":"markdown","487d8600":"markdown","0f29fb4f":"markdown","c3876926":"markdown","2e591da3":"markdown","0656d1df":"markdown","23de2eba":"markdown","276e0a39":"markdown"},"source":{"7046eed2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(style='darkgrid')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a4a75265":"noodle = pd.read_csv('..\/input\/pizza-sushi-restaurant-around-jakarta-area\/Noodle.csv')\npizza = pd.read_csv('..\/input\/pizza-sushi-restaurant-around-jakarta-area\/Pizza Around Jakarta Area.csv')\nsushi = pd.read_csv('..\/input\/pizza-sushi-restaurant-around-jakarta-area\/Sushi.csv')","084b1006":"print(noodle.head())\nnoodle = noodle.drop_duplicates()\nprint(noodle.info())","8966c9bc":"print(pizza.head())\npizza = pizza.drop_duplicates()\nprint(pizza.info())","631d5285":"print(sushi.head())\nsushi = sushi.drop_duplicates()\nprint(sushi.info())","089c1854":"#Lokasi\nnoodle['rest_zone'] = noodle['rest_zone'].map(lambda x: x.split(\", \")[-1]).map(lambda x: x.replace(\" \", \"\\n\"))\nnoodle_loc = noodle.groupby('rest_zone')['rest_name'].count().sort_values(ascending=False)\nnoodle_loc = pd.DataFrame(data = noodle_loc).reset_index().head(10)\n\npizza['2.rest_zone'] = pizza['2.rest_zone'].map(lambda x: x.split(\", \")[-1]).map(lambda x: x.replace(\" \", \"\\n\"))\npizza_loc = pizza.groupby('2.rest_zone')['1.rest_name'].count().sort_values(ascending=False)\npizza_loc = pd.DataFrame(data = pizza_loc).reset_index().head(10)\n\nsushi['rest_zone'] = sushi['rest_zone'].map(lambda x: x.split(\", \")[-1]).map(lambda x: x.replace(\" \", \"\\n\"))\nsushi_loc = sushi.groupby('rest_zone')['rest_name'].count().sort_values(ascending=False)\nsushi_loc = pd.DataFrame(data = sushi_loc).reset_index().head(10)\n\nfig, ax = plt.subplots(3,1,figsize=(9,12))\nfig.tight_layout(pad=5)\nsns.barplot(ax=ax[0], data=noodle_loc, y=noodle_loc['rest_name'], x=noodle_loc['rest_zone'])\nax[0].set_title(\"Location of most noodle restaurants in Jakarta and around\", fontsize=15)\nax[0].set_ylabel(\"Count\")\nax[0].set_xlabel(\"Location\")\n\nsns.barplot(ax=ax[1], data=pizza_loc, y=pizza_loc['1.rest_name'], x=pizza_loc['2.rest_zone'])\nax[1].set_title(\"Location of most pizza restaurants in Jakarta and around\", fontsize=15)\nax[1].set_ylabel(\"Count\")\nax[1].set_xlabel(\"Location\")\n\nsns.barplot(ax=ax[2], data=sushi_loc, y=sushi_loc['rest_name'], x=sushi_loc['rest_zone'])\nax[2].set_title(\"Location of most sushi restaurants in Jakarta and around\", fontsize=15)\nax[2].set_ylabel(\"Count\")\nax[2].set_xlabel(\"Location\")","5b119568":"sushi['rest_zone'].unique()","ac6eb464":"#Rating\nprint(\"Highest Ranking Sushi Restaurant: \", sushi[\"rating\"].max())\nprint(\"Lowest Ranking Sushi Restaurant: \", sushi[\"rating\"].min())","44c10949":"sushi_star = sushi.loc[:,['rest_name', 'rest_zone', 'rating','rest_cost']]\nsushi_star['rest_zone'] = sushi_star['rest_zone'].map(lambda x: x.replace(\"\\n\", \" \"))\nsushi_star_new = sushi_star.copy()\nsushi_star.head()","27abbbe4":"def grup(star):\n    if star >= 4.6 and star <= 5.0:\n        star = \"4.6 - 5.0\"\n    elif star >= 4.1 and star <= 4.5:\n        star = \"4.1 - 4.5\"\n    elif star >= 3.6 and star <= 4.0:\n        star = \"3.6 - 4.0\"\n    elif star >= 3.1 and star <= 3.5:\n        star = \"3.1 - 3.5\"\n    elif star >= 2.6 and star <= 3.0:\n        star = \"2.6 - 3.0\"\n    elif star >= 2.1 and star <= 2.5:\n        star = \"2.1 - 2.5\"\n    else:\n        star = \"None\"\n    \n    return star\n\nsushi_star['rating'] = sushi_star['rating'].apply(lambda x: grup(x))\nsushi_star_group = pd.DataFrame(data = sushi_star)","0df5b64d":"data1 = sushi_star_group['rating'].value_counts()\nprint(data1.head(10))\nfig, ax = plt.subplots(figsize=(15,10))\nax.pie(data1, autopct='%1.1f%%')\nax.set_title('Groups of Sushi Restaurants by Rating', fontsize=15)\nax.legend(['3.6 - 4.0','4.1 - 4.5','3.1 - 3.5',\n           '2.6 - 3.0','4.6 - 5.0','2.1 - 2.5'],\n          loc='upper right', \n          title='Rating')","422374bf":"data2 = sushi_star_new.sort_values(by='rating', ascending=False).head(50)\ndata2['loc_area'] = data2['rest_name'] + \" - \" + data2['rest_zone']\nfig, ax = plt.subplots(figsize=(5,15))\nsns.barplot(data = data2, x=data2['rating'], y=data2['loc_area'])\nax.set_title('Top 50 Sushi Restaurant Based on Rating', fontsize=15)\nax.set_ylabel('Restaurant - Location')\nax.set_xlabel('Rating')","ce79c6ae":"sushi_star_new['rest_cost'] = sushi['rest_cost'].apply(lambda x: x.split(\"Rp\")[-1].replace('.',''))\nsushi_star_new['rest_cost'] = sushi_star_new['rest_cost'].astype('int')\nsushi_star_new['rest_cost'] = sushi_star_new['rest_cost'].apply(lambda x: x \/ 2)\nsushi_star_new['loc_area'] = sushi_star_new['rest_name'] + \" - \" + sushi_star_new['rest_zone']\nsushi_star_new.head()","82d9711a":"print(\"Highest Sushi Price: Rp\", sushi_star_new.rest_cost.max())\nprint(\"Lowest Sushi Price: Rp\", sushi_star_new.rest_cost.min())","957baa78":"data3 = sushi_star_new.sort_values(by='rest_cost', ascending=False)\ndata3_top5 = data3.head(5)\n\nfig, ax = plt.subplots(figsize=(10,5))\nsns.barplot(ax=ax, data = data3_top5, x=data3_top5['rest_cost'], y=data3_top5['loc_area'])\nax.set_xlim([0,2000000])\nplt.title('Top 5 Highest Price sushi restaurants (per Unit)', fontsize=15)\nplt.ylabel('Restoran - Lokasi', fontsize =10 )\nplt.xlabel('Price (Rupiah) (1 x 1000000)')","2de88e94":"fig, ax = plt.subplots(figsize=(8,8))\nsns.regplot(x=sushi_star_new['rest_cost'], y=sushi_star_new['rating'], ax=ax)\nax.set_ylabel('Rating')\nax.set_xlabel('Price')","76c97b3f":"Because there are many sushi restaurants in Jakarta, I will analyze the data from the sushi restaurant dataset.","d1f1fb61":"* Rp 1750000 = USD $124,00\n\n* Rp 25000 = USD $1,77","487d8600":"## Correlation Price and Rating","0f29fb4f":"## Sushi Restaurant in Jakarta and around","c3876926":"# DKI Jakarta\n\n**The Special Capital Region of Jakarta (DKI Jakarta)** is the national capital and the largest city in Indonesia. Jakarta is the only city in Indonesia that has provincial-level status. Jakarta is located on the northwest coast of Java Island. In the past, several names were known, including Sunda Kelapa, Jayakarta, and Batavia. Internationally, Jakarta also has the nickname J-Town, or more popularly \u201cThe Big Durian\u201d because of the urban style that is comparable to New York City (Big Apple) in Indonesia.\n\n![Jakarta](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/f\/f6\/Jakarta_Pictures-1.jpg\/314px-Jakarta_Pictures-1.jpg) *Source: Wikipedia*","2e591da3":"## Restaurant Location\n\nLooking for many restaurants in Jakarta and around.","0656d1df":"## Read data","23de2eba":"## Rating (Sushi Restaurant)\nGroups of sushi restaurants by rating.","276e0a39":"## Price (Sushi Restaurant)\n\nLooking for the highest and lowest price sushi restaurants."}}