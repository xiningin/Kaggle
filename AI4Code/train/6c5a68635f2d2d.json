{"cell_type":{"bef248f9":"code","601e4e19":"code","c4e06632":"code","a708fb13":"code","eb323d4d":"code","bd43b9d4":"code","e1bb2508":"code","71cb0cd9":"code","7f8a9453":"code","41c75161":"code","8e93f933":"code","35c10c0c":"code","9a0dc45d":"code","48027574":"code","7815f34d":"code","2ecf53b8":"code","6e44b750":"code","ea80ad8d":"code","9e46c0da":"code","621ed321":"code","c3d95781":"code","682814f3":"code","25db4438":"code","666d462c":"code","f4dae2a0":"code","4523ff80":"code","fa7274a8":"code","37774db5":"code","777afc6b":"code","5e3dfce4":"code","afed3749":"code","023793d0":"code","cb038f0b":"code","92998933":"code","23f01071":"code","5cecd866":"code","f1a72bf2":"code","6360d7d1":"code","c9371d2d":"code","b26d8e03":"code","fe4ec5c5":"code","40d76774":"code","5eef5090":"code","0638bb2a":"code","bca8f529":"code","54a2f719":"code","033007c0":"code","4f78ba55":"code","4ffaff7e":"code","0be32d29":"code","02afb818":"code","f63221be":"markdown","2406ce31":"markdown","fdf6963b":"markdown","185c9d4e":"markdown","5a937af6":"markdown","1d396eb6":"markdown","85b46d74":"markdown","2f4e65e7":"markdown","10fba6b7":"markdown","0adaa644":"markdown","fd6b8152":"markdown","7750be3f":"markdown","8dcd4062":"markdown"},"source":{"bef248f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","601e4e19":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport seaborn as sns\nfrom sklearn import preprocessing \nfrom category_encoders import *\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets, linear_model, metrics\nfrom sklearn.metrics import  confusion_matrix","c4e06632":"df = pd.read_csv('..\/input\/others\/House_Price.csv')\ndf","a708fb13":"df.head()","eb323d4d":"df.tail()","bd43b9d4":"df.dtypes","e1bb2508":"df.shape","71cb0cd9":"df.size","7f8a9453":"df.columns","41c75161":"df.info()","8e93f933":"df.describe()","35c10c0c":"df.isnull().sum()","9a0dc45d":"df.duplicated().sum()","48027574":"df.drop(['airport','waterbody','bus_ter'],axis = 1).skew()","7815f34d":"df.drop(['airport','waterbody','bus_ter'],axis = 1).corr()","2ecf53b8":"! pip install Autoviz","6e44b750":"! pip install xlrd","ea80ad8d":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\ndf_av = AV.AutoViz('..\/input\/others\/House_Price.csv')","9e46c0da":"df['airport'].value_counts()  #two types of categorical data","621ed321":"sns.countplot(x = 'airport',data=df)\nplt.show()","c3d95781":"fig = px.histogram(df, 'price',             \n                   color=\"airport\",\n                   title=\"<b>Average Price eith Airport<\/b>\")\n\nfig.add_vline(x=df['price'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()\n\n#There is no corelation between price and airport\n#when price is 7-8.9,21-22.9,13-14.9,17-18.9 the count of houses having airport is lessthan count of houses not having airport","682814f3":"df['waterbody'].value_counts()  #4 types of categorical data","25db4438":"fig = px.histogram(df, 'price',             \n                   color='waterbody',\n                   title=\"<b>Average price with waterbody<\/b>\")\n\nfig.add_vline(x=df['price'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()","666d462c":"sns.countplot(x = 'waterbody',data = df)\nplt.show()","f4dae2a0":"sns.countplot(x = 'bus_ter',data = df)\nplt.show()\n\n#only one value in total row","4523ff80":"data = [go.Scatter(\n                     x = df.price,\n                     y = df.poor_prop,\n                     mode = 'markers',\n                     marker = dict(size = 7, \n                                   color = '#4ED700',\n                                   symbol = 'circle',\n                                   line = dict(width = 1,color = '#0E8700')\n                                  )\n                   )\n       ]\n\nlayout = go.Layout(\n                    xaxis = dict(title = '$price$'), # x-axis label\n                    yaxis = dict(title = '$poor_prop$'), # y-axis label\n                   )\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","fa7274a8":"data = [go.Scatter(\n                     x = df.price,\n                     y = df.room_num,\n                     mode = 'markers',\n                     marker = dict(size = 7, \n                                   color = '#4ED700',\n                                   symbol = 'circle',\n                                   line = dict(width = 1,color = '#0E8700')\n                                  )\n                   )\n       ]\n\nlayout = go.Layout(\n                    xaxis = dict(title = '$price$'), # x-axis label\n                    yaxis = dict(title = '$room_num$'), # y-axis label\n                   )\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","37774db5":"plt.figure(figsize=(16,9))\nx = df.drop(['airport','waterbody','bus_ter'],axis = 1)\nax = sns.heatmap(df.corr(),annot = True,cmap = 'viridis')\nplt.show()","777afc6b":"plt.figure(figsize=(6,8))\nx = df.drop(['airport','waterbody','bus_ter'],axis = 1)\nfor i in x.columns:\n    sns.histplot(x[i],kde = True)\n    plt.show()","5e3dfce4":"x = df.drop(['airport','waterbody','bus_ter'],axis = 1)\nfor i in x.columns:\n    sns.boxplot(x = i, data = x,color = 'yellowgreen')\n    plt.xlabel(i)\n    plt.show()","afed3749":"x = df.drop(['airport','waterbody','bus_ter'],axis = 1)\nfor i in x.columns:\n    sns.violinplot(x = i, data = x)\n    plt.xlabel(i)\n    plt.show()","023793d0":"def count_outliers(data,col):\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        q4 = data[col].quantile(1,interpolation='nearest')\n        IQR = q3 -q1\n        global LLP\n        global ULP\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers in\",i)\n        else:\n            print(\"There are outliers in\",i)\n            x = data[data[col]<LLP][col].size\n            y = data[data[col]>ULP][col].size\n            a.append(i)\n            print('Count of outliers are:',x+y)\nglobal a\na = []\nfor i in x.columns:\n    count_outliers(x,i)","cb038f0b":"df.columns","92998933":"df = df.rename(columns={'n_hos_beds': 'n_hot_beds'})\ndf.columns","23f01071":"#since ther are no outliers in n_hot_beds column we can fill null values with mean\ndf['n_hot_beds'].fillna(df['n_hot_beds'].mean(),inplace=True)","5cecd866":"df.isnull().sum()","f1a72bf2":"df","6360d7d1":"df1=pd.get_dummies(data=df,columns=['airport','waterbody','bus_ter'],drop_first=True)","c9371d2d":"df1","b26d8e03":"plt.figure(figsize=(6,8))\nfor i in df1.columns[1:]:\n    sns.scatterplot(x = 'price',y = i,data = df1,color = 'Red')\n    plt.show()\n    \n#price and crime_rate has negative corelation\n#price and room_num has highly positive corelation\n#price and poor_prop has highly negative corelation\n#No corelation between price and n_hotbeds,n_hot_rooms_,rainfall,parks","fe4ec5c5":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(df1.drop(['price'],axis = 1))","40d76774":"X = df1.drop(['price'],axis = 1)\nY = df1['price']\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.3,random_state=44)","5eef5090":"X = df1.drop(['price'],axis = 1)\nY = df1['price']\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.3,random_state=44)","0638bb2a":"reg = linear_model.LinearRegression()\nreg.fit(X_train, Y_train)","bca8f529":"# regression coefficients\nreg.coef_","54a2f719":"pred = reg.predict(X_test)\npred","033007c0":"plt.scatter(Y_test,pred)\nplt.xlabel('Y Test (True Values)')\nplt.ylabel('Predicted values')\nplt.show()","4f78ba55":"print('Mean Absolute Error',metrics.mean_absolute_error(Y_test,pred))\nprint('Mean Squared Error',metrics.mean_squared_error(Y_test,pred))\nprint('Root Mean Squared Error',np.sqrt(metrics.mean_squared_error(Y_test,pred)))","4ffaff7e":"#r2_score\nmetrics.explained_variance_score(Y_test,pred)","0be32d29":"# Here our curve is almost normally distributed so model is ok\nsns.displot(Y_test-pred,bins = 50,kde = True)","02afb818":"# This indicates that if 1 unit of increase in price takesplace then -0.071705 decrease in crime_rate\ncdf = pd.DataFrame(reg.coef_,X.columns,columns = ['coef'])\ncdf","f63221be":"# Loading Datasets","2406ce31":"## UPVOTE IF U LIKE","fdf6963b":"# Data Preprocessing","185c9d4e":"# Data Visualisation Using Autoviz","5a937af6":"# Prediction Using Linear Regression","1d396eb6":"# Feature Selection","85b46d74":"# Importing Libraries","2f4e65e7":"# Feature Scaling","10fba6b7":"# Data Cleaning","0adaa644":"# Exploratory Data Analysis","fd6b8152":"## Treating Null Values","7750be3f":"# Count of Outliers","8dcd4062":"# Data Visualistion"}}