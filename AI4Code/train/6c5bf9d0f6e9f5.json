{"cell_type":{"15e59ab8":"code","9a8f87ff":"code","9bb6cf48":"code","444222a9":"code","ccf5d574":"code","97ce6e6a":"code","f19cdc6e":"code","44560c88":"code","cdc28a19":"code","e1e50d9a":"code","a943c063":"code","af17b131":"code","2b7be9da":"code","bf30eaa6":"code","6e3d476b":"code","7a9a5df9":"code","bd45d15c":"code","5ee4a3cb":"code","cf10a5e7":"code","6432df49":"code","326e1945":"code","7c8cc566":"code","c45bca9c":"code","1f6d360b":"code","bf8927ef":"code","9b38cf71":"code","039fe34f":"code","bc3212e5":"code","63f972b9":"code","2ee2d5a0":"code","25869503":"code","182ea850":"code","534101a1":"code","ee271ca8":"code","964f48c2":"code","94a07b27":"code","30c26b7f":"code","c9e5abb2":"code","738c600e":"code","2b5d961f":"code","fb67f921":"markdown"},"source":{"15e59ab8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a8f87ff":"train = pd.read_csv('\/kaggle\/input\/comp-data\/TRAIN.csv')","9bb6cf48":"train.head()","444222a9":"train1 = train.copy()","ccf5d574":"import datetime \ntrain1['Month'] = pd.DatetimeIndex(train1['Date']).month\ntrain1['Year'] = pd.DatetimeIndex(train1['Date']).year\ntrain1['Day'] = pd.DatetimeIndex(train1['Date']).day","97ce6e6a":"train1.head()","f19cdc6e":"train1['StateHoliday'] = train1['StateHoliday'].astype(str)","44560c88":"train1['StateHoliday'].value_counts()","cdc28a19":"train1['StateHoliday'] = train1['StateHoliday'].replace('0','z')","e1e50d9a":"train1['StateHoliday'].value_counts()","a943c063":"train1['StateHoliday'].value_counts()","af17b131":"train1.head()","2b7be9da":"train1.columns","bf30eaa6":"x = train1[['Store','DayOfWeek','Open','Promo','StateHoliday','SchoolHoliday','Month','Year','Day']]\ny  = train1['Sales']","6e3d476b":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer","7a9a5df9":"columnTransformer = ColumnTransformer([('encoder', OneHotEncoder(), [4])], remainder='passthrough')","bd45d15c":"x = np.array(columnTransformer.fit_transform(x), dtype = np.str)","5ee4a3cb":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.1,random_state=42)","cf10a5e7":"x_train","6432df49":"x_train","326e1945":"#from sklearn.tree import DecisionTreeRegressor\n#tree = DecisionTreeRegressor()\n#tree.fit(x_train,y_train)\n#tree.score(x_test,y_test)","7c8cc566":"test = pd.read_csv('\/kaggle\/input\/comp-data\/TEST.csv')","c45bca9c":"test.head()","1f6d360b":"import datetime \ntest['Month'] = pd.DatetimeIndex(test['Date']).month\ntest['Year'] = pd.DatetimeIndex(test['Date']).year\ntest['Day'] = pd.DatetimeIndex(test['Date']).day","bf8927ef":"test['StateHoliday'].value_counts()","9b38cf71":"test['StateHoliday'] = test['StateHoliday'].astype(str)","039fe34f":"for i in range(10000):\n    if test['StateHoliday'][i]=='0':\n        test['StateHoliday'][i]='c'\n    \n        \n        ","bc3212e5":"test['StateHoliday'] = test['StateHoliday'].replace('0','z')","63f972b9":"test['StateHoliday'].value_counts()","2ee2d5a0":"test.head()","25869503":"test_f = test[['Store','DayOfWeek','Open','Promo','StateHoliday','SchoolHoliday','Month','Year','Day']]","182ea850":"test_f = np.array(columnTransformer.fit_transform(test_f), dtype = np.str)","534101a1":"test_f.shape","ee271ca8":"x_train.shape","964f48c2":"#predictions = f.predict(test_f)","94a07b27":"#result_df=pd.DataFrame(data=(predictions),columns=['Sales'])","30c26b7f":"#result_csv=result_df.to_csv('sales_3.csv',index=True)","c9e5abb2":"from sklearn.linear_model import RidgeCV\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nlevel0 = list()\nlevel0.append(('lr', RidgeCV()))\nlevel0.append(('knn', KNeighborsRegressor()))\nlevel0.append(('cart', DecisionTreeRegressor()))\nlevel0.append(('svm', SVR()))\nlevel0.append(('forest',RandomForestRegressor()))","738c600e":"#define meta model\nfrom sklearn.ensemble import StackingRegressor\n# define meta learner model\nlevel1 = RidgeCV()\n# define the stacking ensemble\nmodel = StackingRegressor(estimators=level0, final_estimator=level1, cv=5)","2b5d961f":"model.fit(x_train,y_train)","fb67f921":"# "}}