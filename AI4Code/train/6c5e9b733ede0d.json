{"cell_type":{"d7473817":"code","b3d5c0e3":"code","15e189f5":"code","a58b4971":"code","0b2cf526":"code","a7ab544d":"code","761c7946":"code","2264dfe0":"code","00950f00":"code","c4121ddb":"code","5ef5dfa1":"code","090756ba":"code","d9e57d8f":"code","93dfae9b":"code","4d922c23":"code","b8d3c3cb":"code","169eb314":"code","e8052927":"code","086dbe14":"code","14bf4b9c":"code","aa3e652d":"code","94d6544d":"code","70e72919":"code","f96880dd":"code","24c6fcc1":"code","0b03e906":"code","f33e21ba":"code","1aec1cfb":"code","676065ed":"code","81bb8ef5":"code","d84966ff":"code","6f540078":"code","7c88da67":"code","342f9238":"code","04f2a49d":"code","61e5d467":"code","385d932f":"code","aee1e3bc":"code","0dc1d404":"code","f2323d43":"code","8123015d":"code","6754399e":"code","3c8beb6a":"code","013d8de8":"code","1bc49e93":"code","2a402cfa":"code","d80c78dd":"markdown","605449f9":"markdown","721d57b2":"markdown","c1607e5d":"markdown","571b4fc9":"markdown"},"source":{"d7473817":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b3d5c0e3":"import seaborn as sns","15e189f5":"import pandas as pd\ndf=pd.read_csv(\"..\/input\/titanic\/train.csv\")","a58b4971":"df.shape","0b2cf526":"df.head()","a7ab544d":"if max(df.isnull().sum())==0:\n        print(\"There are no missing values\")\nelse:\n    for i in df.columns:\n        if df[i].isnull().sum()!=0:\n            print(\"The number of missing values in column\",i,\" :\",df[i].isnull().sum())","761c7946":"test=pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","2264dfe0":"df=df.drop(columns=['Cabin'])","00950f00":"df.groupby(['Embarked','Survived'], as_index=False)[['PassengerId']].count()","c4121ddb":"df['Embarked'].fillna('S', inplace=True)\n\n","5ef5dfa1":"sns.countplot(x=\"Embarked\", hue=\"Survived\", data=df)\n","090756ba":"df['Age'].fillna(df['Age'].median(), inplace=True)\ndf=df.dropna()\n\ndf.shape","d9e57d8f":"df.corr()","93dfae9b":"df['Title'] = df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\ndf.head()","4d922c23":"df[\"Age\"]=pd.cut(df[\"Age\"],5)\n","b8d3c3cb":"df['FamilySize'] = df['SibSp'] + df['Parch'] + 1\n\ndf[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","169eb314":"df['Alone'] = df['FamilySize'].map(lambda s: 1 if s == 1 else 0)\n","e8052927":"df.head()","086dbe14":"from sklearn.preprocessing import LabelEncoder\nLE = LabelEncoder()\ndf['Sex'] = LE.fit_transform(df['Sex'])\ndf['Embarked'] = LE.fit_transform(df['Embarked'])\ndf['Age'] = LE.fit_transform(df['Age'])\ndf['Title'] = LE.fit_transform(df['Title'])\n\n\n","14bf4b9c":"features=df[['Pclass','Sex','Age','SibSp','Parch','Embarked','Title','Alone','FamilySize']]","aa3e652d":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nscaler.fit(features)\nfeatures=scaler.transform(features)\nfeatures","94d6544d":"labeles=df[\"Survived\"]","70e72919":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(features, labeles, test_size=0.2,random_state=5 )\nfrom xgboost import XGBClassifier\nclf = XGBClassifier()\nclf.fit(features,labeles)\n","f96880dd":"pred=clf.predict(X_test)\n","24c6fcc1":"from sklearn.metrics import confusion_matrix\ns=confusion_matrix(y_test, pred)\ns","0b03e906":"from sklearn.metrics import accuracy_score\naccur=accuracy_score(y_test,pred)\nprint(accur)","f33e21ba":"test_data=pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_data.head()","1aec1cfb":"test_data['Title'] = test_data.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\ntest_data.head()","676065ed":"test=test_data.drop(columns=['PassengerId','Name'])","81bb8ef5":"test['FamilySize'] = test['SibSp'] + test['Parch'] + 1\n","d84966ff":"test['Alone'] = test['FamilySize'].map(lambda s: 1 if s == 1 else 0)\n","6f540078":"test.isnull().sum()","7c88da67":"test[\"Age\"].fillna(test['Age'].median(), inplace=True)\n","342f9238":"test[\"Age\"]=pd.cut(test[\"Age\"],5)\n","04f2a49d":"test=test[['Pclass','Sex','Age','SibSp','Parch','Embarked','Title','Alone','FamilySize']]","61e5d467":"test.head()","385d932f":"from sklearn.preprocessing import LabelEncoder\nLE = LabelEncoder()\ntest['Sex'] = LE.fit_transform(test['Sex'])\ntest['Embarked'] = LE.fit_transform(test['Embarked'])\ntest['Age'] = LE.fit_transform(test['Age'])\ntest['Title'] = LE.fit_transform(test['Title'])\n","aee1e3bc":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nscaler.fit(test)\ntest=scaler.transform(test)\ntest","0dc1d404":"prediction=clf.predict(test)","f2323d43":"test_data[\"Survived\"]=prediction","8123015d":"submission=test_data[[\"PassengerId\",\"Survived\"]]","6754399e":"test_data.head()","3c8beb6a":"submission = pd.DataFrame({ 'PassengerId': test_data.PassengerId.values, 'Survived':test_data.Survived.values  })\nsubmission.to_csv(\"my_submission_1.csv\", index=False)","013d8de8":"real_data=pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","1bc49e93":"real_labeles=real_data[\"Survived\"]","2a402cfa":"from sklearn.metrics import accuracy_score\naccur=accuracy_score(real_labeles,prediction)\nprint(accur)","d80c78dd":"Recode columns containing categories\n","605449f9":"Export the prediction file for the test data","721d57b2":" # Test the accuracy of the model on the new test data","c1607e5d":"Let's delete Cabin column and replace the missing Age values with the average age\n","571b4fc9":"Divide the sample into features and labels"}}