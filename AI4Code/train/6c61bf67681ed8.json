{"cell_type":{"4d7051c9":"code","d0ec8e62":"code","8ac8b1c5":"code","1c8c3ec1":"code","71482d2e":"code","78ec7f3a":"code","c981dbdd":"code","45245da8":"code","2f747786":"code","250c7f21":"code","9daba27e":"code","fe2a71e1":"code","ac5a232b":"code","e4c72eaa":"code","27a04c41":"code","0401fac8":"code","ee270b63":"code","ac6500df":"code","06eae806":"code","e07ffb80":"code","df0f129f":"code","735edb70":"code","1c4c2afa":"code","bcb3d976":"code","e02f1234":"markdown","24d7d076":"markdown","83f7fc7c":"markdown","4e327344":"markdown","4c1e21fc":"markdown","9bb1ec6a":"markdown","5a3b1531":"markdown","41064d29":"markdown","2658a9ab":"markdown","1bec32e0":"markdown","d8cf9699":"markdown","453e4cdc":"markdown","c0aa9145":"markdown","7bfe3094":"markdown","4807797b":"markdown","1c6351b8":"markdown","247edea9":"markdown"},"source":{"4d7051c9":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom urllib.request import urlopen\nimport json","d0ec8e62":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/nytimes\/covid-19-data\/master\/us-counties.csv')\nwv = df[df['state'] == 'West Virginia']\nwv.tail()","8ac8b1c5":"wv_recent = wv[wv['date'] == '2020-10-14']","1c8c3ec1":"with urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n    counties = json.load(response)","71482d2e":"fig = px.choropleth(wv_recent, geojson=counties, locations='fips', color='cases',\n                           scope=\"usa\",\n                           labels={'cases':'Cases'},\n                           color_continuous_scale=\"sunset\",\n                           hover_name = wv_recent['county'],\n                           range_color=[0,wv_recent.cases.max()]\n                          )\nlayout = go.Layout(geo=dict(lakecolor= 'rgba(70, 127, 226, 1)'),\n    title=go.layout.Title(\n        text=\"Total WV COVID-19 cases by county\",\n        x=0.5\n    ),\n    font=dict(size=16)\n)\n\nfig.update_layout(layout)\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.show()","78ec7f3a":"fig = px.choropleth(wv_recent, geojson=counties, locations='fips', color='deaths',\n                           scope=\"usa\",\n                           labels={'deaths':'Deaths'},\n                           color_continuous_scale=\"reds\",\n                           hover_name = wv_recent['county'],\n                           range_color=[0,wv_recent.deaths.max()]\n                          )\nlayout = go.Layout(geo=dict(lakecolor= 'rgba(70, 127, 226, 1)'),\n    title=go.layout.Title(\n        text=\"Total WV COVID-19 deaths by county\",\n        x=0.5\n    ),\n    font=dict(size=16)\n)\n\nfig.update_layout(layout)\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.show()","c981dbdd":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/nytimes\/covid-19-data\/master\/us-states.csv')\ndf[\"date\"] = pd.to_datetime(df[\"date\"]).dt.date.astype(str)\ndf.head()","45245da8":"us_state_abbrev = {\n'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA', 'Colorado': 'CO',\n'Connecticut': 'CT', 'Delaware': 'DE', 'Florida': 'FL', 'Georgia': 'GA', 'Hawaii': 'HI', 'Idaho': 'ID',\n'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA',\n'Maine': 'ME', 'Maryland': 'MD', 'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',\n'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH', 'New Jersey': 'NJ',\n'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK',\n'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC', 'South Dakota': 'SD',\n'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA',\n'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY'}\n\ndf['state abb'] = df['state'].map(us_state_abbrev)","2f747786":"df = df.dropna()","250c7f21":"fig = px.choropleth(locations=df['state abb'],\n                    color=df[\"cases\"], \n                    locationmode=\"USA-states\",\n                    scope=\"usa\",\n                    hover_name  = df['state'],\n                    labels = {'color' : 'Cases', 'animation_frame' : 'Date'},\n                    animation_frame=df['date'],\n                    color_continuous_scale=\"sunset\",\n                    range_color=[0,df['cases'].max()]\n                   )\n\nlayout = go.Layout(geo=dict(lakecolor= 'rgba(70, 127, 226, 1)'),\n    title=go.layout.Title(\n        text=\"Total COVID-19 cases by states\",\n        x=0.5\n    ),\n    font=dict(size=16)\n)\n\nfig.update_layout(layout)\n\nfig.show()","9daba27e":"fig = px.choropleth(locations=df['state abb'],\n                    color=df[\"deaths\"], \n                    locationmode=\"USA-states\",\n                    scope=\"usa\",\n                    hover_name  = df['state'],\n                    labels = {'color' : 'Deaths', 'animation_frame' : 'Date'},\n                    animation_frame=df['date'],\n                    color_continuous_scale=\"reds\",\n                    range_color=[0,df['deaths'].max()]\n                   )\n\nlayout = go.Layout(geo=dict(lakecolor= 'rgba(70, 127, 226, 1)'),\n    title=go.layout.Title(\n        text=\"Total COVID-19 deaths by states\",\n        x=0.5\n    ),\n    font=dict(size=16)\n)\n\nfig.update_layout(layout)\n\nfig.show()","fe2a71e1":"world = pd.read_csv('https:\/\/raw.githubusercontent.com\/owid\/covid-19-data\/master\/public\/data\/owid-covid-data.csv')\nworld.head()","ac5a232b":"world.columns","e4c72eaa":"world.continent.unique()","27a04c41":"europe = world[world['continent'] == 'Europe']\nafrica = world[world['continent'] == 'Africa']","0401fac8":"eu_df = europe[['location', 'date', 'total_cases', 'total_deaths', 'total_cases_per_million', 'total_deaths_per_million']].copy()\nafrica_df = africa[['location', 'date', 'total_cases', 'total_deaths', 'total_cases_per_million', 'total_deaths_per_million']].copy()\n\neu_df = eu_df.fillna(method='ffill')\nafrica_df = africa.fillna(method='ffill')\n\neu_df['date'] = pd.to_datetime(eu_df['date']).dt.date.astype(str)\nafrica_df['date'] = pd.to_datetime(africa_df['date']).dt.date.astype(str)\n\neu_df = eu_df.sort_values(by=['date'])\nafrica_df = africa_df.sort_values(by=['date'])\n\neu_df = eu_df[eu_df.date <= '2020-10-13']\nafrica_df = africa_df[africa_df.date <= '2020-10-14']\n\n\neu_df = eu_df[eu_df['total_cases'] != 0.0]\nafrica_df = africa_df[africa_df['total_cases'] != 0.0]","ee270b63":"max_europe = eu_df[eu_df['location'] == 'Montenegro']['total_cases_per_million'].max()","ac6500df":"fig = px.choropleth(locations=eu_df['location'],\n                    color=eu_df[\"total_cases_per_million\"], \n                    locationmode='country names',\n                    scope=\"europe\",\n                    hover_name  = eu_df['location'],\n                    labels = {'color' : 'Cases per million', 'animation_frame' : 'Date'},\n                    animation_frame=eu_df['date'],\n                    color_continuous_scale=\"purpor\",\n                    range_color=[0,max_europe]\n                   )\n\nlayout = go.Layout(geo=dict(bgcolor= 'rgba(103, 114, 131, 1)',\n                           lakecolor= 'rgba(70, 127, 226, 1)'),\n    title=go.layout.Title(\n        text=\"COVID-19 cases per 1 million people by country in Europe\",\n        x=0.45\n    ),\n    font=dict(size=16)\n)\nfig.update_layout(layout)\n\n\nfig.show()","06eae806":"africa_max = africa_df['total_cases'].max()","e07ffb80":"fig = px.choropleth(locations=africa_df['location'],\n                    color=africa_df[\"total_cases\"], \n                    locationmode='country names',\n                    scope=\"africa\",\n                    hover_name  = africa_df['location'],\n                    labels = {'color' : 'Cases', 'animation_frame' : 'Date'},\n                    animation_frame=africa_df['date'],\n                    color_continuous_scale=\"sunset\",\n                    range_color=[0,africa_max]\n                   )\n\nlayout = go.Layout(geo=dict(bgcolor= 'rgba(103, 114, 131, 1)',\n                           lakecolor= 'rgba(70, 127, 226, 1)'),\n    title=go.layout.Title(\n        text=\"Total COVID-19 cases in Africa\",\n        x=0.5\n    ),\n    font=dict(size=16)\n)\nfig.update_layout(layout)\n\n\nfig.show()","df0f129f":"world_df = world[['location', 'date', 'total_cases', 'total_deaths', 'total_cases_per_million', 'total_deaths_per_million']].copy()\nworld_df = world_df.fillna(method='ffill')\nworld_df['date'] = pd.to_datetime(world_df[\"date\"]).dt.date.astype(str)\nworld_df = world_df.sort_values(by=['date'])\nworld_df = world_df[world_df.date <= '2020-10-14']\nworld_df = world_df[world_df['total_cases'] != 0.0]\nmax_country = world_df[world_df['location'] == 'United States']['total_cases'].max()","735edb70":"fig = px.choropleth(locations=world_df['location'],\n                    color=world_df[\"total_cases\"], \n                    locationmode='country names',\n                    scope=\"world\",\n                    hover_name  = world_df['location'],\n                    labels = {'color' : 'Cases', 'animation_frame' : 'Date'},\n                    animation_frame=world_df['date'],\n                    color_continuous_scale=\"sunset\",\n                    range_color=[0,max_country]\n                   )\n\nlayout = go.Layout(geo=dict(bgcolor= 'rgba(10,10,300,0.5)',\n                           lakecolor='rgba(10,10,300,0.5)'),\n    title=go.layout.Title(\n        text=\"Total COVID-19 cases by country\",\n        x=0.5\n    ),\n    font=dict(size=16)\n)\nfig.update_layout(layout)\n\n\nfig.show()","1c4c2afa":"world_df = world_df[world_df['total_deaths'] != 0.0]\nmax_deaths = world_df[world_df['location'] == 'United States']['total_deaths'].max()","bcb3d976":"fig = px.choropleth(locations=world_df['location'],\n                    color=world_df[\"total_deaths\"], \n                    locationmode='country names',\n                    scope=\"world\",\n                    hover_name  = world_df['location'],\n                    labels = {'color' : 'Deaths', 'animation_frame' : 'Date'},\n                    animation_frame=world_df['date'],\n                    color_continuous_scale=\"reds\",\n                    range_color=[0,max_deaths]\n                   )\n\nlayout = go.Layout(geo=dict(bgcolor= 'rgba(10,10,300,0.5)',\n                           lakecolor='rgba(10,10,300,0.5)'),\n    title=go.layout.Title(\n        text=\"Total COVID-19 deaths by country\",\n        x=0.5\n    ),\n    font=dict(size=16)\n)\nfig.update_layout(layout)\n\n\nfig.show()","e02f1234":"Let's move on to visualizing the world now. Same data processing applies for the whole data set.","24d7d076":"After taking a look at the country with the highest total of cases per 1,000,000 population (Montenegro) I used it as the max value for my color wheel.","83f7fc7c":"## Country Level \n\nNow we can pull the world data and look at various continents over time.\nFirst I pulled the data using pandas again, I took a look at the various columns in this data set, and then looked at all the unique continents listed to decide which ones to look at individually.","4e327344":"Now I can do the same for Africa but we'll just do cases.","4c1e21fc":"Now we can visualize the cases by states using plotly.express.choropleth.\nThese are interactive so be sure to either hit the play button or drag the cursor over the dates.","9bb1ec6a":"# 3. Dynamic Choropleth plots\n## State Level\n\nI grabbed the data directly from the raw data webpages using pandas again. Then I wanted to just take a look at the data set I was working with. Seeing I had state names in full I wanted to create an abbreviated column to plug into the plotly locations within the choropleth function. With that dictionary made I simply mapped all the states to their abbreviated versions in a new column within the pandas DataFrame. After this I dropped any NaN values as some locations listed for the USA are not states (Virgin Islands, Puerto Rico, etc.) and thus wouldn't show up on the Plotly geojson for states.","5a3b1531":"# Choropleth Graphs in Plotly\n\nThe goal of this notebook is to use choropleth graphs in plotly to visualize Covid-19 over time.\n\nData was taken directly from the New York Times GitHub website: https:\/\/github.com\/nytimes\/covid-19-data\nThis data tracks the total number of Covid-19 cases by state.\n\nData for the world metrics on Covid-19 was taken from Our World in Data's GitHub website: https:\/\/github.com\/owid\/covid-19-data\/tree\/master\/public\/data\nSee https:\/\/ourworldindata.org\/ for other data sets on a global scale.\n\nI used Plotly for all visuals, so check out https:\/\/plotly.com\/ for documentation.","41064d29":"# 2. Static Plotly Choropleth graph","2658a9ab":"Knowing the most recent data collected I created a new DataFrame for that date specifically.","1bec32e0":"Time to visualize Europe.","d8cf9699":"Same thing but with deaths related to Covid-19.","453e4cdc":"# 1. Importing the data\n## County Level\n\nFirst I needed to import the proper libraries I would be using for this notebook.","c0aa9145":"First wanted to look at static renders by county. I'm from West Virginia so I decided to focus specifically on that state to start. I grabbed the data directly from the GitHub raw data page, filtered for the state of West Virginia, and looked at the end of the data to determine the most recent date.","7bfe3094":"First I pulled the columns I was interested in into new DataFrames, then I filled all NaN values with the previously recorded totals. I set the date column to_datetime within pandas, sorted the dates, dropped the most recent day (it had a few errors) and dropped any rows that had total_cases == 0 (so they wouldn't show up on the Choropleth until they had at least 1 case.","4807797b":"That's all for now. I hope you enjoyed the notebook and visuals. Plotly is great because it allows you to have interactive graphs of all types within a web browser (using a notebook or using Dash) without having to know a bunch of JavaScript, HTML, CSS, etc.\n\nIf you enjoyed this notebook please upvote or leave a comment.\nThank you!","1c6351b8":"We'll look at Europe and Africa individually before taking a look at the world as a whole.","247edea9":"Next I imported a geojson file of the US counties from the plotly repository."}}