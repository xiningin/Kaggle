{"cell_type":{"da7eb970":"code","9903579d":"code","68e4e369":"code","6302cc50":"code","60994824":"code","fcf24c77":"code","f9e4d5bc":"code","dc7a4ea3":"code","1f45f38b":"code","09f5cde6":"code","a6ae32f2":"code","8a69fe6b":"code","314ded7b":"code","4e578c37":"code","a998a904":"code","78b2bb4a":"code","5c192ca6":"code","200d34dd":"code","07e7379b":"code","92680eda":"code","e7435a39":"code","180ff24b":"code","4519ddaa":"code","a2372fc4":"code","cae9ff9d":"code","eb91126b":"code","93d73a28":"code","050cf4c8":"code","466dd891":"code","cd11e00e":"code","d1018d52":"code","9a9dd5c2":"code","08402e99":"code","fecc37d0":"code","e389dc0f":"code","13b83fba":"code","ee633717":"code","f944ada5":"code","81f1ed7c":"code","a7f5f591":"code","e13718e1":"code","050a4562":"code","57720553":"code","57dc9d5c":"code","20b55acd":"code","48ed1e4a":"code","009bc379":"code","ddafc29a":"code","2ee3039e":"code","29e46e82":"code","6b16c33a":"code","5af8e613":"code","40930943":"code","92978703":"code","c00a3354":"code","ab2c8cd9":"code","22562ed5":"code","a372ac5f":"code","b5a96ae5":"code","468c39fc":"code","939439e9":"code","38105cf4":"code","11ad5ffd":"code","24252b46":"code","2fa522ef":"code","84565b92":"code","9882524f":"code","3e63c8e9":"code","da6f437f":"code","39ef8040":"code","487be29e":"code","80107830":"code","69cd34b3":"code","2b2b729f":"code","3ae111b5":"code","2c1918e4":"code","fc7226c2":"code","ad1b31ad":"code","ed9f3b92":"code","c25255a9":"code","7cce30f3":"code","3f3202dd":"code","fb7415e2":"code","e8d3f32a":"code","4b2244ab":"code","9fa1b155":"code","c3919140":"code","1da020b9":"code","6dfe2f98":"code","77c89214":"code","d9db4aae":"code","7df6d151":"code","f2647b26":"code","c0cdf35f":"code","efa9b084":"code","9ad160ec":"code","62ca0660":"code","5f6ef1f2":"code","231517a2":"code","58bb7633":"code","98891c6e":"code","337413b7":"code","2ab48d77":"code","9eddec5f":"code","5fcfc162":"code","6c9b6d9f":"code","c21ce6ed":"code","fef2f59b":"code","e462f9e6":"code","1583ac2f":"code","ac2e29f8":"code","0000ce2c":"code","c772f18f":"code","14618d57":"code","462d7609":"code","c044d361":"code","ca1b414f":"code","1279976e":"code","dc631252":"code","ac4434f0":"code","b710fb68":"code","3e094db5":"code","c4a014c9":"code","31ef5fb3":"code","3d7ddfed":"code","8a7cb629":"code","ffa102c9":"code","aa234cbd":"code","3ca3d50f":"code","2d2fcc23":"code","91b35ba5":"code","295153c3":"code","a2af96c3":"code","2901501f":"code","48a227ae":"code","b27ed9e6":"code","46fcd9dd":"code","40f8f287":"code","3b4df296":"code","1827b5a6":"code","c86d3f5d":"code","f9ab14ee":"code","da46f543":"code","9f77da98":"markdown","d22bb250":"markdown","f9a059b1":"markdown","1fd2db38":"markdown","fa254b83":"markdown","36809c84":"markdown","4c23e6d8":"markdown","24b9d132":"markdown","89fc3c87":"markdown","80a036d2":"markdown","a68598f1":"markdown","50949ad8":"markdown","65120414":"markdown","c0243b5f":"markdown","8d60d326":"markdown","7c425186":"markdown","ac7cf8e5":"markdown","77c7218a":"markdown","0309f750":"markdown","8a4b7923":"markdown","6374f022":"markdown","b628311f":"markdown","ed60037a":"markdown","aaf2b7ab":"markdown","6aa72207":"markdown","cb66cc1d":"markdown","f430e901":"markdown","a8adbd13":"markdown","c3418824":"markdown","95092855":"markdown","22ba0773":"markdown","42f4f371":"markdown","49132a20":"markdown","04234fee":"markdown","876e4029":"markdown","a2aabe8f":"markdown","9e7da16d":"markdown","8c115de5":"markdown","4d5ab40c":"markdown","0a2fa8f0":"markdown","a58e548e":"markdown","22813e95":"markdown","94c784d2":"markdown","6f5a5eca":"markdown","74156edd":"markdown","a9a1fbd6":"markdown","1987d493":"markdown","68f472cc":"markdown","bfabcc95":"markdown","f3777f91":"markdown","5f339ace":"markdown","93dad1f0":"markdown","26043326":"markdown","3bc9e1e8":"markdown","c295b466":"markdown"},"source":{"da7eb970":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns \nsns.set(color_codes=True)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.feature_selection import mutual_info_classif\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier \n\nfrom sklearn.preprocessing import StandardScaler\nfrom imblearn.over_sampling import SMOTE\n","9903579d":"Bank  = pd.read_csv(\"..\/input\/bank-personal-loan-me-final-1\/Bank_Personal_Loan_Modelling.csv\")\nBank2 = pd.read_csv(\"..\/input\/bank-personal-loan-me-final-1\/Bank_Personal_Loan_Modelling.csv\")\nBank3 = pd.read_csv(\"..\/input\/bank-personal-loan-me-final-1\/Bank_Personal_Loan_Modelling.csv\")","68e4e369":"Bank.head()","6302cc50":"Bank.describe()","60994824":"Target= [\"Personal Loan\"]\nt= Bank[Target]\nt.head()","fcf24c77":"Bank['Personal Loan'].describe()","f9e4d5bc":"Bank.nunique()","dc7a4ea3":"rows_count, columns_count = Bank.shape\nprint(\"Number of rows :\", rows_count)\nprint(\"Number of columns :\", columns_count)","1f45f38b":"Bank.isnull()","09f5cde6":"Bank.duplicated()","a6ae32f2":"plt.figure(figsize=(15,7))\nplt.title('Correlation of Attributes', size=15)\nsns.heatmap(Bank.corr(), annot=True, linewidths=3, fmt='.3f', center=1);","8a69fe6b":"sns.distplot(Bank['Income'])\nplt.title('Income Distribution with KDE');","314ded7b":"sns.distplot(Bank['Family'])\nplt.title('Family Distribution with KDE');","4e578c37":"sns.distplot(Bank['CCAvg'])\nplt.title('Avg spending of credit cards Distribution with KDE');","a998a904":"sns.distplot(Bank['Education'])\nplt.title('Education Distribution with KDE');","78b2bb4a":"sns.distplot(Bank['Mortgage'])\nplt.title('Mortgage Distribution with KDE');","5c192ca6":"sns.kdeplot(\n   data=Bank, x='Income', hue=\"Personal Loan\",\n   fill=True, common_norm=False, palette=\"crest\",\n   alpha=.5, linewidth=0,\n)","200d34dd":"sns.kdeplot(\n   data=Bank, x='Family', hue=\"Personal Loan\",\n   fill=True, common_norm=False, palette=\"crest\",\n   alpha=.5, linewidth=0,\n)","07e7379b":"sns.kdeplot(\n   data=Bank, x='CCAvg', hue=\"Personal Loan\",\n   fill=True, common_norm=False, palette=\"crest\",\n   alpha=.5, linewidth=0,\n)","92680eda":"sns.kdeplot(\n   data=Bank, x='Education', hue=\"Personal Loan\",\n   fill=True, common_norm=False, palette=\"crest\",\n   alpha=.5, linewidth=0,\n)","e7435a39":"sns.kdeplot(\n   data=Bank, x='Mortgage', hue=\"Personal Loan\",\n   fill=True, common_norm=False, palette=\"crest\",\n   alpha=.5, linewidth=0,\n) ","180ff24b":"loan_acceptance_count = pd.DataFrame(Bank['Personal Loan'].value_counts()).reset_index()\nloan_acceptance_count.columns = ['Labels', 'Personal Loan']\nloan_acceptance_count","4519ddaa":"pie_labels = loan_acceptance_count['Labels']\npie_labels = ['Not Accepted' if x == 0 else 'Accepted' for x in pie_labels]\npie_data = loan_acceptance_count['Personal Loan'] \nexplode = (0, 0.15) \nwp = { 'linewidth' : 1, 'edgecolor' : '#000000' }\n\ndef func(pct, allvalues): \n    absolute = int(np.round(pct \/ 100.*np.sum(allvalues)))\n    return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\nfig, ax = plt.subplots(figsize =(10, 6))\n\nax.pie(pie_data,  \n       autopct = lambda pct: func(pct, pie_data), \n       explode = explode,  \n       labels = pie_labels, \n       shadow = True, \n       startangle = 70, \n       wedgeprops = wp)\n\nax.axis('equal') \nplt.title('Personal Loan Acceptance Percentage', size=22)\nplt.show();","a2372fc4":"fig = px.bar(Bank, x='Experience', y='Income', title='...', color='Experience')\nfig.show()","cae9ff9d":"categorical_variables= [col for col in Bank.columns if Bank[col].nunique()<=5]\nprint(categorical_variables)","eb91126b":"categorical_variables.remove(\"Personal Loan\")\nprint(categorical_variables)","93d73a28":"fig=plt.figure(figsize=(15,10))\nfor i,col in enumerate(categorical_variables):\n    ax=fig.add_subplot(2,3,i+1)\n    sns.barplot(x=col,y='Personal Loan',data=Bank,ci=None)","050cf4c8":"X = Bank.drop('Personal Loan', axis = 1)    #set X with all feature except Personal Loan\nY = Bank[['Personal Loan']]                 #set y with our target feature Personal Loan","466dd891":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=1, stratify = Y)","cd11e00e":"mutual_information = mutual_info_classif(X_train, y_train, n_neighbors=5, copy = True)\n\nplt.subplots(1, figsize=(26, 1))\nsns.heatmap(mutual_information[:, np.newaxis].T, cmap='Blues', cbar=False, linewidths=1, annot=True, annot_kws={\"size\": 20})\nplt.yticks([], [])\nplt.gca().set_xticklabels(X_train.columns, rotation=45, ha='right', fontsize=16)\nplt.suptitle(\"Variable Importance (mutual_info_classif)\", fontsize=22, y=1.2)\nplt.gcf().subplots_adjust(wspace=0.2)","d1018d52":"rf_clf = RandomForestClassifier(n_estimators=500, n_jobs=-1, random_state=42)\nrf_clf.fit(X_train, y_train)\n\nfeatures = list(X_train.columns)\nimportances = rf_clf.feature_importances_\nindices = np.argsort(importances)\n\nfig, ax = plt.subplots(figsize=(10, 7))\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nax.tick_params(axis=\"x\", labelsize=12)\nax.tick_params(axis=\"y\", labelsize=14)\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Feature Importance', fontsize = 18)","9a9dd5c2":"Bank = Bank.drop(['ID','ZIP Code'], axis=1) #dropped not important feaures","08402e99":"Bank.head(3)","fecc37d0":"scaler=StandardScaler()\nscaled_df=scaler.fit_transform(Bank.drop('Personal Loan',axis=1))","e389dc0f":"scaled_df=pd.DataFrame(scaled_df)","13b83fba":"scaled_df.columns=Bank.drop('Personal Loan',axis=1).columns\nscaled_df.head()","ee633717":"DT = DecisionTreeClassifier(max_depth=2)\n# max_depth is maximum number of levels in the tree \nDT.fit(X_train,y_train)","f944ada5":"y_pred_DT= DT.predict(X_test)","81f1ed7c":"print(accuracy_score(y_test,y_pred_DT))","a7f5f591":"cm_DT = confusion_matrix(y_test, y_pred_DT)\nprint(cm_DT)","e13718e1":"y_pred_DT= DT.predict(X_test)\nprint(classification_report(y_test, y_pred_DT))","050a4562":"sns.heatmap(confusion_matrix(y_test,y_pred_DT),annot=True,fmt='',cmap='YlGnBu')","57720553":"SVM = SVC(kernel='linear',C=1.0, gamma='scale')\nSVM.fit(X_train,y_train)","57dc9d5c":"y_pred_SVM = SVM.predict(X_test)","20b55acd":"print(accuracy_score(y_test,y_pred_SVM))","48ed1e4a":"cm_SVM = confusion_matrix(y_test, y_pred_SVM)\nprint(cm_SVM)","009bc379":"y_pred_SVM= SVM.predict(X_test)\nprint(classification_report(y_test, y_pred_SVM))","ddafc29a":"sns.heatmap(confusion_matrix(y_test,y_pred_SVM),annot=True,fmt='',cmap='YlGnBu')","2ee3039e":"kclf = KNeighborsClassifier(n_neighbors=5)","29e46e82":"kclf.fit(X_train,y_train)","6b16c33a":"y_pred_KNN= kclf.predict(X_test)","5af8e613":"print(metrics.accuracy_score(y_test, y_pred_KNN))","40930943":"cm_KNN = confusion_matrix(y_test, y_pred_KNN)\nprint(cm_KNN)","92978703":"y_pred_KNN= kclf.predict(X_test)\nprint(classification_report(y_test, y_pred_KNN))","c00a3354":"sns.heatmap(confusion_matrix(y_test,y_pred_KNN),annot=True,fmt='',cmap='YlGnBu')","ab2c8cd9":"LR= LogisticRegression()\nLR.fit(X_train, y_train)","22562ed5":"y_pred_LR= LR.predict(X_test)","a372ac5f":"print(metrics.accuracy_score(y_test, y_pred_LR))","b5a96ae5":"cm_LR = confusion_matrix(y_test, y_pred_LR)\nprint(cm_LR)","468c39fc":"y_pred_LR= LR.predict(X_test)\nprint(classification_report(y_test, y_pred_LR))","939439e9":"sns.heatmap(confusion_matrix(y_test,y_pred_LR),annot=True,fmt='',cmap='YlGnBu')","38105cf4":"GNB = GaussianNB()","11ad5ffd":"GNB.fit(X_train,y_train)","24252b46":"y_pred_GNB= GNB.predict(X_test)","2fa522ef":"print(metrics.accuracy_score(y_test, y_pred_GNB))","84565b92":"cm_GNB = confusion_matrix(y_test, y_pred_GNB)\nprint(cm_GNB)","9882524f":"y_pred_GNB= GNB.predict(X_test)\nprint(classification_report(y_test, y_pred_GNB))","3e63c8e9":"sns.heatmap(confusion_matrix(y_test,y_pred_GNB),annot=True,fmt='',cmap='YlGnBu')","da6f437f":"RF= RandomForestClassifier(n_estimators=500, random_state=0)","39ef8040":"RF.fit(X_train,y_train)","487be29e":"y_pred_RF= RF.predict(X_test)","80107830":"print(metrics.accuracy_score(y_test, y_pred_RF))","69cd34b3":"cm_RF = confusion_matrix(y_test, y_pred_RF)\nprint(cm_RF)","2b2b729f":"y_pred_RF= RF.predict(X_test)\nprint(classification_report(y_test, y_pred_RF))","3ae111b5":"sns.heatmap(confusion_matrix(y_test,y_pred_RF),annot=True,fmt='',cmap='YlGnBu')\n","2c1918e4":"Selected= Bank2[['Income','Family','CCAvg']].corr()\nSelected ","fc7226c2":"plt.figure(figsize=(15,7))\nplt.title('Correlation of Attributes', size=15)\nsns.heatmap(Selected.corr(), annot=True, linewidths=3, fmt='.3f', center=1);","ad1b31ad":"corr_PL= Bank2[['Age','Experience','Personal Loan']].corr()\ncorr_PL","ed9f3b92":"plt.figure(figsize=(15,7))\nplt.title('Correlation of Attributes', size=15)\nsns.heatmap(corr_PL.corr(), annot=True, linewidths=3, fmt='.3f', center=1);","c25255a9":"Bank2.drop('Experience',axis=1)","7cce30f3":"smote = SMOTE(sampling_strategy='minority')\nX_sm, y_sm = smote.fit_resample(X, Y)","3f3202dd":"X_train, X_test, y_train, y_test = train_test_split(X_sm, y_sm, test_size=0.2, random_state=42, stratify=y_sm) ","fb7415e2":"Bank2 = Bank2.drop(['ID','ZIP Code','Securities Account','CreditCard','Online','Experience'], axis=1)","e8d3f32a":"Bank2.head() #dataset after dropping unwanted attributes","4b2244ab":"dt2 = DecisionTreeClassifier(max_depth=2)\n# max_depth is maximum number of levels in the tree \ndt2.fit(X_train,y_train)","9fa1b155":"y_pred_DT2= dt2.predict(X_test)","c3919140":"print(accuracy_score(y_test,y_pred_DT2))","1da020b9":"cm_DT2 = confusion_matrix(y_test, y_pred_DT2)\nprint(cm_DT2)","6dfe2f98":"y_pred_DT2= dt2.predict(X_test)\nprint(classification_report(y_test, y_pred_DT2))\n","77c89214":"sns.heatmap(confusion_matrix(y_test,y_pred_DT2),annot=True,fmt='',cmap='YlGnBu')","d9db4aae":"SVM2 = SVC(kernel='linear',C=1.0, gamma='scale')\nSVM2.fit(X_train,y_train)","7df6d151":"y_pred_SVM2 = SVM2.predict(X_test)","f2647b26":"print(accuracy_score(y_test,y_pred_SVM2))","c0cdf35f":"cm_SVM2 = confusion_matrix(y_test, y_pred_SVM2)\nprint(cm_SVM2)","efa9b084":"y_pred_SVM2= SVM2.predict(X_test)\nprint(classification_report(y_test, y_pred_SVM2))","9ad160ec":"sns.heatmap(confusion_matrix(y_test,y_pred_SVM2),annot=True,fmt='',cmap='YlGnBu')","62ca0660":"kclf2 = KNeighborsClassifier(n_neighbors=5)","5f6ef1f2":"kclf2.fit(X_train,y_train)","231517a2":"y_pred_KNN2= kclf2.predict(X_test)","58bb7633":"print(metrics.accuracy_score(y_test, y_pred_KNN2))","98891c6e":"cm_KNN2 = confusion_matrix(y_test, y_pred_KNN2)\nprint(cm_KNN2)","337413b7":"y_pred_KNN2= kclf2.predict(X_test)\nprint(classification_report(y_test, y_pred_KNN2))","2ab48d77":"sns.heatmap(confusion_matrix(y_test,y_pred_KNN2),annot=True,fmt='',cmap='YlGnBu')","9eddec5f":"LR2= LogisticRegression()\nLR2.fit(X_train, y_train)","5fcfc162":"y_pred_LR2= LR2.predict(X_test)","6c9b6d9f":"print(metrics.accuracy_score(y_test, y_pred_LR2))","c21ce6ed":"cm_LR2 = confusion_matrix(y_test, y_pred_LR2)\nprint(cm_LR2)","fef2f59b":"y_pred_LR2= LR2.predict(X_test)\nprint(classification_report(y_test, y_pred_LR2))","e462f9e6":"sns.heatmap(confusion_matrix(y_test,y_pred_LR2),annot=True,fmt='',cmap='YlGnBu')","1583ac2f":"GNB2 = GaussianNB()","ac2e29f8":"GNB2.fit(X_train,y_train)","0000ce2c":"y_pred_GNB2= GNB2.predict(X_test)","c772f18f":"print(metrics.accuracy_score(y_test, y_pred_GNB2))","14618d57":"cm_GNB2 = confusion_matrix(y_test, y_pred_GNB2)\nprint(cm_GNB2)","462d7609":"y_pred_GNB2= GNB2.predict(X_test)\nprint(classification_report(y_test, y_pred_GNB2))","c044d361":"sns.heatmap(confusion_matrix(y_test,y_pred_GNB2),annot=True,fmt='',cmap='YlGnBu')","ca1b414f":"RF2= RandomForestClassifier(n_estimators=500, random_state=0)","1279976e":"RF2.fit(X_train,y_train)","dc631252":"y_pred_RF2= RF2.predict(X_test)","ac4434f0":"print(metrics.accuracy_score(y_test, y_pred_RF2))","b710fb68":"cm_RF2 = confusion_matrix(y_test, y_pred_RF2)\nprint(cm_RF2)","3e094db5":"y_pred_RF2= RF2.predict(X_test)\nprint(classification_report(y_test, y_pred_RF2))","c4a014c9":"sns.heatmap(confusion_matrix(y_test,y_pred_RF2),annot=True,fmt='',cmap='YlGnBu')\n","31ef5fb3":"sns.kdeplot(data=Bank, x=\"Income\", hue=\"Personal Loan\", multiple=\"stack\")","3d7ddfed":"sns.kdeplot(data=Bank, x=\"Family\", hue=\"Personal Loan\", multiple=\"stack\")","8a7cb629":"sns.kdeplot(data=Bank, x=\"CCAvg\", hue=\"Personal Loan\", multiple=\"stack\") ","ffa102c9":"sns.kdeplot(data=Bank, x=\"Education\", hue=\"Personal Loan\", multiple=\"stack\")","aa234cbd":"sns.kdeplot(data=Bank, x=\"Mortgage\", hue=\"Personal Loan\", multiple=\"stack\") ","3ca3d50f":"X = Bank3[['CCAvg','Family','Income']]\nY = Bank3[['Personal Loan']] ","2d2fcc23":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=1, stratify = Y) ","91b35ba5":"dt3 = DecisionTreeClassifier(max_depth=2)\n# max_depth is maximum number of levels in the tree \ndt3.fit(X_train,y_train)","295153c3":"y_pred_DT3= dt3.predict(X_test)","a2af96c3":"print(accuracy_score(y_test,y_pred_DT3))","2901501f":"cm_DT3 = confusion_matrix(y_test, y_pred_DT3)\nprint(cm_DT3)","48a227ae":"y_pred_DT3= dt3.predict(X_test)\nprint(classification_report(y_test, y_pred_DT3))","b27ed9e6":"sns.heatmap(confusion_matrix(y_test,y_pred_DT3),annot=True,fmt='',cmap='YlGnBu')","46fcd9dd":"RF3= RandomForestClassifier(n_estimators=500, random_state=0)","40f8f287":"RF3.fit(X_train,y_train)","3b4df296":"y_pred_RF3= RF3.predict(X_test)","1827b5a6":"print(metrics.accuracy_score(y_test, y_pred_RF3))","c86d3f5d":"cm_RF3 = confusion_matrix(y_test, y_pred_RF3)\nprint(cm_RF3)","f9ab14ee":"y_pred_RF3= RF3.predict(X_test)\nprint(classification_report(y_test, y_pred_RF3))","da46f543":"sns.heatmap(confusion_matrix(y_test,y_pred_RF3),annot=True,fmt='',cmap='YlGnBu')","9f77da98":"# Gaussian Naive Bayes (GNB)","d22bb250":"# **Import Dataset**","f9a059b1":"# Random Forest 3 (Try)","1fd2db38":"**Description:** We did another try to enhance the model by giving it the most important features & selected three of them:\n1.   Income\n2.   Family \n3. CCAvg\n\n","fa254b83":"# Support Vector Machine (SVM) After Enhance","36809c84":"\n1. ID: Customer ID\n2. Age: Customer's age in completed years\n3. Experience: #years of professional experience\n4. Income: Annual income of the customer\n5. ZIP Code: Home Address ZIP code.\n6. Family: Family size of the customer\n7. CCAvg: Avg. spending on credit cards per month\n8. Education: Education Level. 1: Undergrad  2: Graduate  3:Advanced\/Professional\n9. Mortgage: Value of house mortgage if any.\n10. Personal Loan: Did this customer accept the personal loan offered in the last campaign?\n11. Securities Account: Does the customer have a securities account with the bank?\n12. CD Account: Does the customer have a certificate of deposit (CD) account with the bank?\n13. Online: Does the customer use internet banking facilities?\n14. Credit card: Does the customer use a credit card issued by the bank?","4c23e6d8":"**Observation:** Using standard scaling to scale unbalanced ranges in values","24b9d132":"# **Check Null Values**","89fc3c87":"# **Feature Selection**","80a036d2":"\n\n* We had to do scaling to enhance results & reduce miss classifications. \n* After doing scaling saw that accuracy & recall got higher with much accurate results.\n\n\n\n","a68598f1":"\n# **Attributes Information:**","50949ad8":"# **Data Visualization**","65120414":"**Observation:** found that Personal Loan is  more likely to happend when the Income increases.","c0243b5f":"# The Target of dataset is **\"Personal Loan\"**","8d60d326":"# **Check Duplicates**","7c425186":"# Logistic Regression (LR)","ac7cf8e5":"## Gaussian Naive Bayes After Enhancing","77c7218a":"# Random Forest After Enhance","0309f750":"# **Train Test Split**","8a4b7923":"**Observation:** found that Personal Loan is more likely to happend when the Mortagage equal 0 ","6374f022":"# Decision Tree (DT)","b628311f":"**Observation:** Percentage of Personal Loan Acceptance catogories:\n\n1.   Accepted\n2.   Not Accepted\n\n","ed60037a":"**Observation:** found that the probabilty of Income to be at its highest point when the experience years are 20.","aaf2b7ab":"# **Scaling Dataset**","6aa72207":"# **Dataset Shape**","cb66cc1d":"**Overview:** This dataset is about a bank (Thera Bank) whose management wants to explore ways of converting its liability customers to personal loan customers.","f430e901":"# Random Forest (RF)","a8adbd13":"**Data Description:** This dataset contains 5000 customers. The data include customer demographic information (age, income, etc.), the customer's relationship with the bank (mortgage, securities account, etc.), and the customer response to the last personal loan campaign (Personal Loan). Among these 5000 customers, only 480 (= 9.6%) accepted the personal loan that was offered to them in the earlier campaign.","c3418824":"**Observation:** Ranking most Imortant features on dataset by using Random Forest **feature_importances_** and the most effective feature are:\n\n\n1. Income\n2. Education\n3. CCAvg\n\n","95092855":"**Observation:** found that the most correlated features on Personal Loan is: \n\n1.   Income\n2.   CCAvg\n3.   CD Account","22ba0773":"**Observation:** found that Personal Loan is  more likely to happend when the Eduacation level is higher. ","42f4f371":"# **Data Visualization After Enhancing**","49132a20":"# **Show Unique Values on dataset**","04234fee":"# Decision Tree (DT) After Enhance","876e4029":"End of work before trying to enhance the results of models.","a2aabe8f":"# **Model Building After Try to Enhance**","9e7da16d":"**Observation:** dropped Experience over Age because we found it slightly better on correlation with Personal Loan, and dropped Securities Account, CreditCard, Online becuse they didn't show any influence change.","8c115de5":"**Observation:**\n1. Customers with family size equal to 3 have more chances of having Personal Loan.\n2. Customers with Undergraduate degree have less chances of having Personal Loan as compaired to other customers having Graduate or Advanced\/Professional degree.\n3. Customers with CD Account and Securities Account have more chances of having Personal Loan.\n4. Customers with Online & Credit Card is more likely to have Personal Loan than others don't have a one. ","4d5ab40c":"# Decision Tree 3 (Try)","0a2fa8f0":"# **Finally Thank You!**","a58e548e":"# K-Nearest Neighbors After Enhance","22813e95":"# **Understanding Relations Between Features**","94c784d2":"#K-Nearest Neighbors (KNN)","6f5a5eca":"# **Model Building**","74156edd":"**Observation:** found that Personal Loan is more likely to happend when the Credit Card Average of spending is higher. ","a9a1fbd6":"**Observation:** most Imortant features on dataset (Income, CCAvg, CD Account)","1987d493":"# Logistic Regression After Enhance","68f472cc":"**Observation:** since Age shows a little better correlation with Personal loan we will drop the Experience attribute\n\n","bfabcc95":"# **Heat map Correlation of Attributes**","f3777f91":"# Support Vector Machine (SVM)","5f339ace":"# **Explorate Dataset**","93dad1f0":"**Observation:** found that Personal Loan is more likely to be achieved when the Family members are bigger.","26043326":"# **Importing Libraries**","3bc9e1e8":"**Observation:** Choosed most important features and highly ones  (Income, Family, CCAvg) ","c295b466":"**Description:** Showing distribution of bunch of features:"}}