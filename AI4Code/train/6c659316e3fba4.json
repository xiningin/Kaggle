{"cell_type":{"21471d5d":"code","b30ac067":"code","d6ba940f":"code","b63e2219":"code","55b52adc":"code","f0f122f2":"code","b8bd51d1":"code","ebf958e3":"code","fbc7d5e5":"code","2916c733":"code","70cad702":"code","eb616b91":"code","1e2ecd72":"code","767fa71f":"code","7312576e":"code","d3c934c8":"code","83567c9a":"code","b6b673a7":"code","22c3eb1b":"code","4ef45081":"code","1c4ea84c":"code","f3072ce8":"code","580843fa":"code","4f2d3e7d":"code","6acd4862":"code","622d6614":"code","669b5ffa":"code","07e0d878":"code","956fae20":"code","97cbc717":"code","0821ebd1":"code","bc288758":"code","c9cb7309":"code","4fd61520":"code","72a535a4":"code","96fb3449":"code","713b8d14":"code","e3bd73d3":"code","071dabf1":"code","40d86e31":"code","f1140c03":"code","20acf9f5":"code","a75a56a4":"code","09cc4af3":"code","7486f41d":"code","ca1ed574":"code","45545e5b":"code","8972706e":"code","69755f06":"code","db4844d0":"code","33ca70df":"code","1606e550":"code","3f965948":"code","9b6a9eba":"code","be28807f":"code","1c3dd0cb":"code","212ed36a":"code","bd99c6bd":"code","b5235b75":"markdown","462b31e4":"markdown","392d3188":"markdown","9e40565a":"markdown","07773722":"markdown","7d0d5133":"markdown","0107fb90":"markdown","2dd3a68a":"markdown","95da4513":"markdown","66250356":"markdown","a58ea732":"markdown","086ee0b8":"markdown","2e092297":"markdown","8e8a1870":"markdown","18ee4328":"markdown","6ce4e0ff":"markdown","64b988ad":"markdown","cbc1210a":"markdown","3ba2c148":"markdown","3913dda6":"markdown","cdcb3431":"markdown","58bf68c7":"markdown","82c2cb41":"markdown","cc8e8c4b":"markdown","bcd93869":"markdown","242027ad":"markdown","dfc78ffd":"markdown","f8b64de4":"markdown","a1854066":"markdown","251afe5c":"markdown","5a064f03":"markdown","2b45f9be":"markdown","d3bf139f":"markdown","54c9e1ab":"markdown","5a6eb175":"markdown","dcd05c96":"markdown","01f0539d":"markdown","d63ae196":"markdown","0bfb74cd":"markdown","1d7e48bb":"markdown","c3cf7176":"markdown","eb85df8e":"markdown","3afd2732":"markdown","bac05b43":"markdown","a09b193a":"markdown","20be874d":"markdown","c1682036":"markdown","cd2c18e6":"markdown","647f9802":"markdown","c28599bf":"markdown","954fca1e":"markdown","f1a013ea":"markdown","f6045c39":"markdown","015f3317":"markdown"},"source":{"21471d5d":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\n# Visualization Packages Importing\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom plotly import graph_objects as go\nfrom plotly import express as px\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode,iplot\n\n# WordCloud Packages\nfrom wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\n\n# Ignore Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","b30ac067":"\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","d6ba940f":"# Read Data Using read_csv() method\ndf = pd.read_csv('\/kaggle\/input\/videogamesales\/vgsales.csv')","b63e2219":"df.sample(5)","55b52adc":"df.head()","f0f122f2":"df.tail()","b8bd51d1":"df.shape","ebf958e3":"df.columns","fbc7d5e5":"df.describe()","2916c733":"df.info()","70cad702":"df.isna().any()","eb616b91":"(df.isna().sum() * 100) \/ df.shape[0]","1e2ecd72":"# Creating Categorical DataFrame\ncategorical_df = df.select_dtypes('O')\n\ncategorical_df.head()","767fa71f":"# Create Numerical DataFrame\n\nnumerical_df = df.select_dtypes(('int', 'float'))\n\nnumerical_df.head()","7312576e":"categorical_features = categorical_df.columns\nprint(categorical_features)\n\nprint('-' * 60)\n\nnumerical_features = numerical_df.columns\nprint(numerical_features)","d3c934c8":"# Categorical Features Normalization\n\nfor category_name in categorical_features:\n    print('-' * 50)\n    print(\"Column Name: \", category_name)\n    print(' ' * 50)\n    \n    print(df[category_name].value_counts().head())\n    \n    print('-' * 50)\n    print('-' * 50)","83567c9a":"\n#  Remove Null Values\n\ndf.isna().sum()","b6b673a7":"df[['Year', 'Publisher']].describe(include='all')","22c3eb1b":"df.Year = df.Year.fillna(df.Year.mean())","4ef45081":"# Change Year dtype to int32\n\ndf.Year = df.Year.astype('int32')\ndf.Year","1c4ea84c":"df.Publisher.value_counts(normalize=True)","f3072ce8":"df.Publisher = df.Publisher.fillna(df.Publisher.mode()[0])","580843fa":"df[['Publisher','Year']].dtypes","4f2d3e7d":"# Get Top 10 Video Games Publishers\ntop_10_publishers = df.Publisher.value_counts().head(10)\n\npx.bar(top_10_publishers, title='Top 10 Video Game Pubishers', \n       labels={\n           'value': \"Number of Games Publishing\",\n           'index': \"Name of the Publisher\"\n       })\n","6acd4862":"\n# Get Top 10 Video Games Genre\ntop_10_generes = df.Genre.value_counts()\n# top_10_generes\n\nfig =px.bar(top_10_generes, title='Top 10 Video Game Genres', \n       labels={\n           'value': \"Number of Games Genres\",\n           'index': \"Name of the Genre\"\n       })\n\nfig.show()\n\n\nfig = px.scatter(top_10_generes, title='Top Gernres Games',\n              labels={\n                   'value': \"Numbers\",\n                   'index': \"Genre\"\n               })\nfig.show()\n\n\n\n# px.bar(top_10_generes.index, top_10_generes.values, title='Top 10 Video Game Genres', \n#        labels={\n#            'value': \"Numbers\",\n#            'index': \"Genre\"\n#        })","622d6614":"\n# Get Top 10 Video Games Genre\ntop_10_platform = df.Platform.value_counts().sort_values()\ntop_10_platform\n\nfig = px.line(top_10_platform, title='Top Playing Platforms',\n              labels={\n                   'value': \"Counts\",\n                   'index': \"Name of the Platform\"\n               })\n\n# fig = go.Figure(data=go.Scatter(x= top_10_platform.index, y=top_10_platform.values,\n#                                title=\"Top Playing Platforms\"))\n\nfig.show()","669b5ffa":"df.head()","07e0d878":"year_wise_sales = df.loc[:, ['Name', 'Year', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].groupby(by =  'Year'  ).sum()\n\n\nfig1 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['NA_Sales'],\n                  name = \"North America's Sales\",\n                  line_shape='vh'\n                 )\n\nfig2 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['EU_Sales'],\n                  name = \"Europe's Sales\",\n                  line_shape='vh')\n\nfig3 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['JP_Sales'],\n                  name = \"Japan's Sales\",\n                  line_shape='vh')\n\nfig4 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['Other_Sales'],\n                  name = \"Other Sales\",\n                  line_shape='vh')\n\nfigs = [ fig1, fig2, fig3, fig4 ]\n\nlayout = dict(title = 'Year Wise Total Game Sales of North America, Europe, Japan and Other Country',\n              xaxis= dict(title= 'Year' ),\n              yaxis= dict(title= 'Total Sales In Millions',)\n             )\n\nfigure = dict(data = figs, layout = layout)\n\niplot(figure)\n\n","956fae20":"year_wise_sales = df.loc[:, ['Name', 'Year', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].groupby(by =  'Year'  ).mean()\n\n\nfig1 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['NA_Sales'],\n                  name = \"North America's Sales\",\n                  line_shape='vh'\n                 )\n\nfig2 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['EU_Sales'],\n                  name = \"Europe's Sales\",\n                  line_shape='vh')\n\nfig3 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['JP_Sales'],\n                  name = \"Japan's Sales\",\n                  line_shape='vh')\n\nfig4 = go.Scatter(x = year_wise_sales.index, y = year_wise_sales['Other_Sales'],\n                  name = \"Other Sales\",\n                  line_shape='vh')\n\nfigs = [ fig1, fig2, fig3, fig4 ]\n\nlayout = dict(title = 'Year Wise Average Sales for North America, Europe, Japan and Other Country',\n              xaxis= dict(title= 'Year' ),\n              yaxis= dict(title= 'Average Sales In Millions',)\n             )\n\nfigure = dict(data = figs, layout = layout)\n\niplot(figure)\n\n","97cbc717":"# Scatter \n\nfig = px.scatter(df, x=\"Year\", y=\"Global_Sales\", color=\"Genre\",\n                 size='Global_Sales', hover_data=['Name'],\n                 title=\"Year Wise Global Video Game Sales by Genere\",\n                 labels={'x':'Years', 'y':'Global Sales In Millions'}\n                )\n\nfig.show()","0821ebd1":"top_sales = df.sort_values(by=['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales'], ascending=False).head(10)\n\n# ['NA_Sales', '', '', '']\ndicts_name = {\n    'NA_Sales' : \"North America Sales ( In Millions)\",\n    'EU_Sales' : \"Europe Sales ( In Millions)\",\n    'JP_Sales' : \"Japan Sales ( In Millions)\",\n    'Other_Sales' : \"Other Sales ( In Millions)\",\n}\n\nfor (key, title) in dicts_name.items():\n    \n    fig = px.sunburst(top_sales, path=['Genre', 'Publisher', 'Platform'], values=key, title= 'Top Selling by '+ title)\n    \n    fig.update_layout(\n        grid= dict(columns=2, rows=2),\n        margin = dict(t=40, l=2, r=2, b=5)\n    )\n\n    fig.show()","bc288758":"\nglobal_sales = df.sort_values(by='Other_Sales', ascending=False)\n\n# plt.subplot(1, 2, 1)\n\n\nfig = plt.figure(figsize=(17,17))\n\n\nfor index, col,  in enumerate(categorical_features):\n    \n    plt.subplot(len(categorical_features), 2, index + 1)\n    \n    stopwords = set(STOPWORDS)\n    wordcloud = WordCloud(\n        stopwords=stopwords\n    ).generate(\" \".join(global_sales[col]))\n\n    # Show WordCloud Image\n    \n    \n    plt.imshow(wordcloud)\n    plt.title(\"Video Game \" + col, fontsize=20)\n    plt.axis('off')\n    plt.tight_layout(pad=3)\n\nplt.show()","c9cb7309":"corr_ = df.corr()\n\nplt.figure(figsize=(12, 7))\n\nsns.heatmap(corr_, annot=True, linewidths=.2, cmap='RdYlBu_r')\n\nplt.show()","4fd61520":"df.head(5)","72a535a4":"from sklearn.preprocessing import LabelEncoder","96fb3449":"data = df.copy()\n\nle = LabelEncoder()","713b8d14":"feature = [\"Platform\", \"Genre\"]\n\n\nfor col in feature:\n    data[col] = le.fit_transform(df[col])\n    \n    ","e3bd73d3":"X = data[['Platform', 'Genre', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].values\n\ny = data['Global_Sales'].values","071dabf1":"X[:5], y[:5]","40d86e31":"from sklearn.model_selection import train_test_split","f1140c03":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, random_state=45)","20acf9f5":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","a75a56a4":"from sklearn.linear_model import LinearRegression\n\n# Import r2 score for Calculation\nfrom sklearn.metrics import r2_score","09cc4af3":"lr = LinearRegression()\n\nlr.fit(X_train, y_train)\n\npred = lr.predict(X_test)\n\nr2_MultiLinear = r2_score(y_test,pred)\n\n","7486f41d":"\nprint(r2_MultiLinear)\n\nprint(lr.score(X_test, y_test))","ca1ed574":"#  \n\nfrom sklearn.neighbors import KNeighborsRegressor\n","45545e5b":"kRange = range(1,15,1)\n\nscores_list = []\nfor i in kRange:\n    regressor_knn = KNeighborsRegressor(n_neighbors = i)\n    \n    regressor_knn.fit(X_train,y_train)\n    pred = regressor_knn.predict(X_test)\n    \n    scores_list.append(r2_score(y_test,pred))\n    \n","8972706e":"\nplt.plot(kRange, scores_list, linewidth=2, color='blue')\nplt.xticks(kRange)\n\nplt.xlabel('Neighbor Number')\nplt.ylabel('r2_Score of KNN')\nplt.show()   ","69755f06":"# Training the KNN model on the training set\nregressor_knn = KNeighborsRegressor(n_neighbors = 3)\n\nregressor_knn.fit(X_train,y_train)\npred = regressor_knn.predict(X_test)\n\nr2_knn = r2_score(y_test,pred)\nprint(r2_knn)","db4844d0":"from sklearn.tree import DecisionTreeRegressor\n\ndtr = DecisionTreeRegressor(random_state=32)","33ca70df":"\ndtr.fit(X_train, y_train)\n\npred = dtr.predict(X_test)\n\nprint(r2_score(y_test, pred))","1606e550":"from sklearn.ensemble import RandomForestRegressor\n\nrfr = RandomForestRegressor(random_state= 10)","3f965948":"rfr.fit(X_train, y_train)\n\npred = rfr.predict(X_test)\n\nprint(r2_score(y_test, pred))","9b6a9eba":"from sklearn.svm import SVR\n\nsvr_linear = SVR(kernel='linear')\n\nsvr_rbf = SVR(kernel='rbf')","be28807f":"svr_linear.fit(X_train, y_train)\nsvr_rbf.fit(X_train, y_train)\n\npred_linear = svr_linear.predict(X_test)\npred_rbf = svr_rbf.predict(X_test)\n\nprint(r2_score(y_test, pred_linear))\nprint(r2_score(y_test, pred_rbf))","1c3dd0cb":"from xgboost import XGBRegressor\n\nxgb = XGBRegressor()","212ed36a":"xgb.fit(X_train, y_train)\n\npred = xgb.predict(X_test)\n\nprint(r2_score(y_test, pred))","bd99c6bd":"# DecisionTree Tunning","b5235b75":"#### *Displaying the correlation for the numerical feature.*","462b31e4":"#### *Top Ten Video Games Sales by Genre, Publisher and Platforms For All Country using sunburst graph.*","392d3188":"Same Here, We can see the last few records for better understanding of datasets records.","9e40565a":"### Separate the Numerical And Categorical Features\n","07773722":"#### *Showing Most repeting word in the dataset for all Categorical values like 'Name', 'Publisher', 'Platform' and 'Genre'.*","7d0d5133":"** Numerical Features are:","0107fb90":"Let's create train and target feature for train and test splites","2dd3a68a":"Here, `Publisher` is a categorical feature so we need to fill the missing values with values which is most repetitive.\n\nSo, We use the `.value_counts()` methods to get the value which is continue repeating.","95da4513":"### Implementing KNeighbor","66250356":"<img align=\"center\" src=\"https:\/\/media.giphy.com\/media\/1XeAoRH74h7i0MtwCU\/giphy.gif\" alt=\"Video Games Sales Visualization\" width=\"100%\" \/>","a58ea732":"### Implementing SVM","086ee0b8":"* Here, One feature is numerical and another is categorical featue, So we use `include='all'` to show both feature descriptions","2e092297":"#### *Showing top 10 Playing Video games Platforms using line plots*","8e8a1870":"Create a list of Categorical and Numerical Feature from `categorical_df` and `numerical_df`.","18ee4328":"<img align=\"center\" src=\"https:\/\/i.pinimg.com\/originals\/69\/cb\/61\/69cb61ef329d954713fea8560892e505.gif\" alt=\"Thanks for Visiting\"\n     width=\"100%\"\/>","6ce4e0ff":"--- \n---\n\n<div class=\"text-center\">\n    <h1>That's it Guys,<\/h1>\n    <h1>\ud83d\ude4f<\/h1>\n    \n        \n        I Hope you guys you like and enjoy it, and learn something interesting things from this notebook, \n        \n        Even I learn a lots of things while I'm creating this notebook\n    \n        Keep Learning,\n        Regards,\n        Vikas Ukani.\n    \n<\/div>\n\n---\n---\n\n<img src=\"https:\/\/static.wixstatic.com\/media\/3592ed_5453a1ea302b4c4588413007ac4fcb93~mv2.gif\" align=\"center\" alt=\"Thank You\" style=\"min-height:20%; max-height:20%\" width=\"90%\" \/>\n\n","64b988ad":"Let's print the features names with the help of `.columns` attribute. It'll returning `pandas Index` type of list with `dtype` is `object`","cbc1210a":"#### *Showing Average Sales (In Millions) By Year for Countries.*","3ba2c148":"** Overall information of datasets...\n\nUsing this `.info()` method we can see that, it will return the complete details about our dataset behavior. Like \n1. Total Number of records,\n* Feature Names,\n* Number of missing values,\n* What's the datatype for all features, And\n* It's memory usage","3913dda6":"Get the first few records and display it. Let's take some time to overview some data and it's feature names","cdcb3431":"### Implementing Decision Tree Regressor","58bf68c7":"<center>\n    <h1>\ud83c\udfae Video Game Sales Analysis EDA, Visualizations<\/h1>\n<\/center>\n<!--  and Sales Prediction Using Machine Learning Models -->","82c2cb41":"### Implementing RandomForest Regressor","cc8e8c4b":"#### *Showing Year wise Overall Global Sales (In Millions) By Genres With Name of the Game using Scatter Plot.*","bcd93869":"- To replace value we can use `mode` to get 'Electronic Arts'.","242027ad":"### Data Cleaning and Remove NaN values.","dfc78ffd":"#### *Showing top 10 Publisher who has published many video games by viewing bar plots*","f8b64de4":"** Statistical information for all numerical features","a1854066":"#### Analysis for Categorical Features & check the most repetitive values.","251afe5c":"#### *Showing top 10 Video Games Genres that has most playing video games using bar and scatter plots*","5a064f03":"## Data Collection & Loading","2b45f9be":"Check some random data using `.sample()` method. It will pick the random number of records.","d3bf139f":"## Import Necessary Packages","54c9e1ab":"* Now, We need to know how many features are having missing values, So we can easily find the feature name that has `NaN` values.","5a6eb175":"### Implementing XGBoost","dcd05c96":"#### *Showing Total Number of Sales (In Millions) for North America, Europe, Japan and Other Country's Sales by Year wise.*","01f0539d":"## Applying HyperParams Tunning ","d63ae196":"### Splite the data into Train and Test set","0bfb74cd":"#### Fill missing value in Publisher Feature","1d7e48bb":"Here, we have only two features are having missing values, Names are `Year` and `Publisher`.","c3cf7176":"## Model Selection","eb85df8e":"### Implementing LabelEncoder","3afd2732":"We clearly see that, `Year` has `1.63%` of values are actually missing. And, `Publisher` has `3.4%` of values are missing.","bac05b43":"** Categorical Features are:","a09b193a":"Firstly, We need to know how many values are missing? So Here, We use some calculations to show the percentage values of missing values features.  ","20be874d":"Here, We can see the shape of the dataset that we are using here. `.shape` attribute will return the tuple with (number of rows and number of columns)","c1682036":"## Data Visualization","cd2c18e6":"#### Fill Missing Value in year Feature","647f9802":"<img align=\"center\" src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRjU3MyvLT2oT-7mMElUQzxHfj8q7y2iompRg&usqp=CAU\" alt=\"Video Game Salary\" width=\"100%\"\/>","c28599bf":"## Data Exploration and Analysis","954fca1e":"Now, Let's check the datatype for both features.","f1a013ea":"Initially, We need to check the `How many number of missing values are there.`","f6045c39":"<img align=\"center\" src=\"https:\/\/i.chzbgr.com\/full\/8226604032\/hD903110C\/steam-sales-have-me-on-the-run\" alt=\"Sales Statistics\"\n     width=\"100%\" \/>","015f3317":"<img align=\"center\" src=\"https:\/\/media.giphy.com\/media\/idvY7ibAEvN9bh2rlV\/giphy.gif\" alt=\"Video Games Sales Visualization\" width=\"100%\"\/>"}}