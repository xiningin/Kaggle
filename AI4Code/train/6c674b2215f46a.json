{"cell_type":{"4196b52f":"code","a0189181":"code","d602dd3c":"code","43c0b698":"code","4586e435":"code","a2082c99":"code","e9c880d0":"code","e5d7f593":"code","7ea70248":"code","4ada3ed5":"code","b3d49bfa":"code","21cad88a":"code","4f2d2428":"code","393e8aec":"code","da4ecf40":"code","bcce6f25":"code","fbe9bbc0":"code","3693f78b":"code","27efb5cc":"code","347ac9e6":"code","5e27b2c4":"markdown","6b7400ca":"markdown","7e1271cb":"markdown","3b61251d":"markdown"},"source":{"4196b52f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n#DATA COLLECTION\n#DATA PREPROCESSING\n#EDA ---> Exploratry data analysis\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n#pip install pandas\n#pip install beautifulsoup4\n#pip install matplotlib\n#pip install seaborn\n#pip install warnings\n#pip install pandas-profiling\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a0189181":"import pandas as pd","d602dd3c":"from bs4 import BeautifulSoup as soup\nfrom datetime import date, datetime\nfrom urllib.request import Request, urlopen\n\nimport pandas as pd\nimport numpy as np\n","43c0b698":"import matplotlib.pyplot as plt \nimport plotly.graph_objects as go \nimport plotly.offline as py \nimport plotly.express as px\nimport seaborn as sns \nimport gc \nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom pandas_profiling import ProfileReport","4586e435":"today = datetime.now()\nyesterday_str = \"%s %d,%d\" %(date.today().strftime(\"%b\"), today.day-1, today.year)\nyesterday_str","a2082c99":"url = \"https:\/\/www.worldometers.info\/coronavirus\/#countries\"\nreq= Request(url , headers={'User-Agent':\"MOzilla\/5.0\"})\n\nwebpage = urlopen(req)\npage_soup = soup(webpage, \"html.parser\")","e9c880d0":"table=page_soup.findAll(\"table\",{\"id\": \"main_table_countries_yesterday\"})\n\ncontainers = table[0].findAll (\"tr\",{\"style\":\"\"})\ntitle = containers[0]\n\ndel containers[0]\n\nall_data = []\nclean = True\n\nfor country in containers:\n    country_data = []\n    country_container = country.findAll(\"td\")\n\n    if country_container[1].text == \"China\":\n        continue\n    for i in range(1, len(country_container)):\n        final_feature = country_container[i].text\n        if clean :\n            if i !=1 and i != len(country_container)-1:\n                final_feature = final_feature.replace(\",\",\"\")\n\n                if final_feature.find('+') != -1:\n                    final_feature = final_feature.replace(\"+\",\"\")\n                    final_feature = float(final_feature)\n                elif final_feature.find(\"-\") != -1:\n                    final_feature = final_feature.replace(\"-\",\"\")\n                    final_feature = float(final_feature) * -1\n            if final_feature == 'N\/A':\n                final_feature = 0\n            elif final_feature == \"\" or final_feature == \" \" :\n                final_feature = -1\n\n            country_data.append(final_feature)\n\n    all_data.append(country_data)\n\n","e5d7f593":"all_data ","7ea70248":"df = pd.DataFrame(all_data)\ndf.drop([15,16,17,18,19,20], inplace= True, axis = 1)\ndf.head() \n\n","4ada3ed5":"column_labels =[\"Country\", \"Total Cases\", \"New Cases\", \"Total Deaths\", \"New Deaths\", \"Total Recovered\", \"New Recovered\", \"Active Cases\", \"Series\/Critical\", \"Total Cases\/1M\", \"Deaths\/1M\", \"Total Test\", \"Test\/1M\", \"Population\", \"Continent\"]\ndf.columns = column_labels\n\n","b3d49bfa":"df.head()","21cad88a":"for label in df.columns:\n    if label != 'Country' and label != \"Continent\":\n        df[label] = pd.to_numeric(df[label])","4f2d2428":"df[\"%Inc Cases\"] = df[\"New Cases\"] \/ df[\"Total Cases\"] *100\ndf[\"%Inc Deaths\"] = df[\"New Deaths\"] \/ df[\"Total Deaths\"] *100\ndf[\"%Inc Recovered\"] = df[\"New Recovered\"] \/ df[\"Total Recovered\"] *100","393e8aec":"df.head()","da4ecf40":"cases = df[[\"Total Recovered\", \"Active Cases\", \"Total Deaths\"]].loc[0]\n\ncases_df = pd.DataFrame(cases).reset_index()\ncases_df.columns = [\"Type\", \"Total\"]\n\ncases_df[\"Percentage\"] = np.round(100*cases_df['Total'] \/np.sum(cases_df[\"Total\"]),2)\ncases_df[\"Virus\"] = [\"COVID-19\" for i in range(len(cases_df))]\n\nfig= px.bar(cases_df, x = \"Virus\", y = \"Percentage\", color = \"Type\", hover_data =[\"Total\"])\nfig.show()","bcce6f25":"cases = df[[\"New Cases\", \"New Recovered\", \"New Deaths\"]].loc[0]\n\ncases_df = pd.DataFrame(cases).reset_index()\ncases_df.columns = [\"Type\", \"Total\"]\n\ncases_df[\"Percentage\"] = np.round(100*cases_df['Total'] \/np.sum(cases_df[\"Total\"]),2)\ncases_df[\"Virus\"] = [\"COVID-19\" for i in range(len(cases_df))]\n\nfig= px.bar(cases_df, x = \"Virus\", y = \"Percentage\", color = \"Type\", hover_data =[\"Total\"])\nfig.show()","fbe9bbc0":"per = np.round(df[[\"%Inc Cases\", \"%Inc Deaths\", \"%Inc Recovered\"]].loc[0],2)\n\nper_df =pd.DataFrame(per)\nper_df.columns = [\"Percentage\"]\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x = per_df.index, y = per_df[\"Percentage\"], marker_color = [\"Yellow\", \"blue\", \"red\"]))\nfig.show()\n","3693f78b":"continent_df = df.groupby(\"Continent\").sum().drop(\"All\")\ncontinent_df = continent_df.reset_index() \ncontinent_df","27efb5cc":"df = df.drop([len(df)-1])\ncountry_df = df.drop([0])\n\ncountry_df","347ac9e6":"LOOK_AT = 5\ncountry = country_df.columns[1:14]\n\nfig = go.Figure()\nc=0\nfor i in country_df.index:\n    if c < LOOK_AT:\n        fig.add_trace(go.Bar(name = country_df['Country'][i],x = country , y = country_df.loc[i][1:14] ))\n    else:\n        break\n    c +=1\nfig.update_layout(title ={\"text\": f'top {LOOK_AT} countries affected '}, yaxis_type =\"log\")\nfig.show()","5e27b2c4":"Web Scraping","6b7400ca":"> CONTINENT","7e1271cb":"> COUNTRIES","3b61251d":"EDA"}}