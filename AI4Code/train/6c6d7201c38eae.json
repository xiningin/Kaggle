{"cell_type":{"6a43c43c":"code","c952d37f":"code","66488766":"code","2e085f53":"code","4208068a":"code","68409563":"code","ddb0f694":"code","58412a82":"code","cf32df82":"markdown","d16defd1":"markdown","e9779b98":"markdown","5c714b40":"markdown","cb9c4c23":"markdown"},"source":{"6a43c43c":"%matplotlib inline\n\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras","c952d37f":"train_file = \"..\/input\/train.csv\"\ntest_file = \"..\/input\/test.csv\"\noutput_file = \"submission.csv\"\n\nraw_data = np.loadtxt(train_file, skiprows=1, dtype='int', delimiter=',')\nx_train, y_train = raw_data[:, 1:], raw_data[:, 0]\n\nx_train = x_train.reshape(-1, 28, 28, 1).astype(\"float32\")\/255\ny_train = keras.utils.to_categorical(y_train)","66488766":"model = keras.models.Sequential([\n    keras.layers.Conv2D(32, kernel_size=3, activation='relu',\n                        input_shape=(28, 28, 1)),\n    keras.layers.BatchNormalization(),\n    keras.layers.Conv2D(32, kernel_size=3, activation='relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Conv2D(32, kernel_size=5, strides=2, padding='same',\n                        activation='relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Dropout(rate=0.4),\n\n    keras.layers.Conv2D(64, kernel_size=3, activation='relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Conv2D(64, kernel_size=3, activation='relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Conv2D(64, kernel_size=5, strides=2, padding='same',\n                        activation='relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Dropout(rate=0.4),\n\n    keras.layers.Flatten(),\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Dropout(rate=0.4),\n    keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(loss='categorical_crossentropy', optimizer='nadam', metrics=[\"accuracy\"])","2e085f53":"from scipy.ndimage.filters import gaussian_filter\nfrom scipy.ndimage.interpolation import map_coordinates\n\n\n# thanks to https:\/\/www.kaggle.com\/babbler\/mnist-data-augmentation-with-elastic-distortion\ndef elastic_transform(image, alpha_range, sigma, random_state=None):\n\n    random_state = np.random.RandomState(random_state)\n\n    if np.isscalar(alpha_range):\n        alpha = alpha_range\n    else:\n        alpha = np.random.uniform(low=alpha_range[0], high=alpha_range[1])\n\n    shape = image.shape\n\n    # convolve uniform(-1, 1) values with input response of Gaussian function\n    # scale them with alpha parameter\n    dx = gaussian_filter(random_state.rand(*shape) * 2 - 1, sigma) * alpha\n    dy = gaussian_filter(random_state.rand(*shape) * 2 - 1, sigma) * alpha\n\n    # prepare coordinate displacements\n    x, y, z = np.meshgrid(np.arange(shape[0]),\n                          np.arange(shape[1]),\n                          np.arange(shape[2]), indexing='ij')\n    indices = (np.reshape(x + dx, (-1, 1)),\n               np.reshape(y + dy, (-1, 1)),\n               np.reshape(z, (-1, 1)))\n\n    # map image to distorted new coordinates by interpolation\n    return map_coordinates(image, indices, order=1, mode='reflect').reshape(shape)","4208068a":"datagen = keras.preprocessing.image.ImageDataGenerator(\n    zoom_range=0.0,\n    height_shift_range=2,\n    width_shift_range=2,\n    preprocessing_function=lambda x: elastic_transform(x, alpha_range=[8, 10], sigma=3))\n\ndatagen.fit(x_train)","68409563":"batch_size = 32\nepochs = 30\n\nlearning_rate_reduction = keras.callbacks.ReduceLROnPlateau(monitor='val_acc', patience=3, verbose=1, factor=0.5, min_lr=0.00001)\n\nmodel.fit_generator(datagen.flow(x_train, y_train, batch_size=batch_size), \n                    epochs=epochs, verbose=2,\n                    callbacks=[learning_rate_reduction],\n                    steps_per_epoch=x_train.shape[0] \/\/ batch_size)","ddb0f694":"raw_data_test = np.loadtxt(test_file, skiprows=1, dtype='int', delimiter=',')\nx_test = raw_data_test.reshape(-1, 28, 28, 1).astype(\"float32\")\/255","58412a82":"results = model.predict_classes(x_test)\nresults = pd.Series(results, name='Label')\nsubmission = pd.concat([pd.Series(range(1, x_test.shape[0] + 1), name='ImageId'), results], axis=1)\nsubmission.to_csv(output_file, index=False)","cf32df82":"## Learn","d16defd1":"## Load and normalize data","e9779b98":"## Create CNN model","5c714b40":"## Prepare image data generator with elastic distortion","cb9c4c23":"## Commit results"}}