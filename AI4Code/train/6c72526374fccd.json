{"cell_type":{"f4e13b25":"code","0469dd48":"code","46c0170e":"code","b41d664c":"code","ae958e2b":"code","a2594d90":"code","9d753297":"code","62df5c4b":"code","f7eafee9":"code","0725b1e0":"code","d9ff20f3":"code","d561e10d":"code","e1cadabf":"code","788e7746":"code","5e569275":"code","cbbf2cf1":"code","1db167a1":"code","42b40d79":"code","7dc082fe":"code","eafbe8f7":"code","638bda38":"code","3f52da96":"code","82b857b4":"code","c65ddf34":"code","e7906fd1":"markdown","5c460613":"markdown","d3c6b5f8":"markdown","3fb25a42":"markdown","d1207f18":"markdown","3c711f82":"markdown","982b051b":"markdown","87bb4fb6":"markdown"},"source":{"f4e13b25":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0469dd48":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport statistics\nimport sklearn\nimport sklearn.metrics as sm\nimport lightgbm as lgb\n\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom lightgbm import LGBMRegressor\n\npd.options.display.max_rows = 1500\npd.options.display.max_columns = 130","46c0170e":"train_set = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest_set = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")\ntrain_set.head()","b41d664c":"train_set.shape","ae958e2b":"train_set.isnull().sum().sort_values(ascending =False)","a2594d90":"target_category = train_set[\"claim\"].unique()\ntarget_category=list(map(str,target_category))\nprint(target_category)\n","9d753297":"train_set = train_set.fillna(train_set.mean()) ","62df5c4b":"train_set.isnull().sum().sort_values(ascending=False)","f7eafee9":"train_set.hist(figsize=(30,30), bins =120)\nplt.show()","0725b1e0":"train_set['claim'].value_counts().plot(kind = 'bar', figsize = (5, 5))\nplt.xlabel('Claim')\nplt.ylabel('Count')\nplt.show()","d9ff20f3":"train_set.head()","d561e10d":"y= train_set['claim']\nx= train_set.drop(columns=['claim','id'])\nprint(len(x.columns))\n","e1cadabf":"X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size = 0.3, random_state = 60,shuffle=True)\nprint(len(X_train))\nprint(len(X_test))","788e7746":"from xgboost import XGBClassifier\nxgb = XGBClassifier()\n\nxgb.fit(X_train, Y_train)\n\ntest_predict = xgb.predict(X_test)","5e569275":"y_pred_proba = xgb.predict_proba(X_test)[::,1]\nfpr, tpr, _ = metrics.roc_curve(Y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(Y_test, y_pred_proba)\nprint(auc)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()\n","cbbf2cf1":"lgbm = LGBMRegressor()\n       \nlgbm.fit(X_train, Y_train)\n\ntest_predict = lgbm.predict(X_test)\n","1db167a1":"y_pred_proba = lgbm.predict(X_test)\nfpr, tpr, _ = metrics.roc_curve(Y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(Y_test, y_pred_proba)\nprint(auc)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()\n","42b40d79":"test_set.head()","7dc082fe":"test_set.isnull().sum().sort_values(ascending = False)","eafbe8f7":"test_set = test_set.fillna(test_set.mean()) ","638bda38":"test_id = test_set['id']\ntest_x= test_set.drop(columns=['id'])\nprint(len(test_x.columns))\n","3f52da96":"y_prdict =xgb.predict_proba(test_x)[:,1]","82b857b4":"submission = pd.DataFrame(list(zip(test_id, y_prdict)),\n               columns =['id', 'claim'])\nsubmission.head(20)","c65ddf34":"submission.to_csv('submission.csv', index=False)","e7906fd1":"# Test Set","5c460613":"# Fill Null Values with Mean Values of each feature","d3c6b5f8":"# Null Values","3fb25a42":"# LightGBM Regressor","d1207f18":"# Data Visualization","3c711f82":"# XGB AUC & ROC Curve","982b051b":"# 1. XGB Classifier","87bb4fb6":"# LGBM AUC & ROC Curve"}}