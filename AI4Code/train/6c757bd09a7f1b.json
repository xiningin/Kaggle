{"cell_type":{"f2d3e0d4":"code","9b60fdd3":"code","e0006a5c":"code","a48ebd4b":"code","769b712c":"code","0c11e38f":"code","6f048a99":"code","ba22e419":"code","b97c375d":"code","7742ee62":"code","2c3ce03e":"code","30a12eb0":"code","df8349e9":"code","2b351cae":"code","34a079e3":"code","01f29ca1":"code","2ede4c18":"code","a45f0b74":"code","8c1a2aac":"code","c0f6f58c":"code","9cfed7cf":"code","f3f76fed":"code","f20cb712":"code","61a870c8":"code","c54adb52":"code","7389c94c":"code","96f18c7b":"markdown","40a4a43c":"markdown","75385f68":"markdown","be7e9b9f":"markdown","f3ad8c81":"markdown","e1c08615":"markdown","9b07bace":"markdown","34b4eff7":"markdown","cf7af991":"markdown","bdb9e941":"markdown","121c8ce6":"markdown","0437ae04":"markdown","a1ac2b47":"markdown","751ac01d":"markdown","ca649ed7":"markdown","0d8041d8":"markdown","7685c1a2":"markdown","ddafa012":"markdown","00c94178":"markdown","e0c92d6a":"markdown","511007b2":"markdown","e0eb62ea":"markdown","e4d3c61d":"markdown","98a9f83f":"markdown","c2ddd761":"markdown","b0b84f0e":"markdown"},"source":{"f2d3e0d4":"!pip install ipython-sql\n","9b60fdd3":"import os\nimport sqlite3\nimport plotly.express as px, plotly.graph_objects as go\nimport pandas as pd","e0006a5c":"%load_ext sql\n%sql sqlite:\/\/\/\/kaggle\/input\/chinook-music-store-data\/chinook.db","a48ebd4b":"%%sql \n\n--Most popular genres in USA by number of locally sold tracks\n\n\nWITH tracks_bought_in_usa \n     AS (SELECT track_id, \n                quantity, \n                i.billing_country \n         FROM   invoice_line il \n                INNER JOIN invoice i \n                        ON il.invoice_id = i.invoice_id \n         WHERE  i.billing_country = 'USA'), \n     tracks_bought_in_usa_genres \n     AS (SELECT g.NAME AS genre, \n                tracks_bought_in_usa.quantity \n         FROM   tracks_bought_in_usa \n                INNER JOIN track t \n                        ON t.track_id = tracks_bought_in_usa.track_id \n                INNER JOIN genre g \n                        ON g.genre_id = t.genre_id) \nSELECT genre, \n       Sum(quantity) AS sold_tracks, \n       Round(Cast(Sum(quantity) AS FLOAT) \/ (SELECT Sum(quantity) \n                                             FROM   tracks_bought_in_usa_genres) \n             * 100) \n                     AS sold_tracks_perc \nFROM   tracks_bought_in_usa_genres \nGROUP  BY genre \nORDER  BY sold_tracks DESC \n\n","769b712c":"query = \"\"\"\nWITH tracks_bought_in_usa \n     AS (SELECT track_id, \n                quantity, \n                i.billing_country \n         FROM   invoice_line il \n                INNER JOIN invoice i \n                        ON il.invoice_id = i.invoice_id \n         WHERE  i.billing_country = 'USA'), \n     tracks_bought_in_usa_genres \n     AS (SELECT g.NAME AS genre, \n                tracks_bought_in_usa.quantity \n         FROM   tracks_bought_in_usa \n                INNER JOIN track t \n                        ON t.track_id = tracks_bought_in_usa.track_id \n                INNER JOIN genre g \n                        ON g.genre_id = t.genre_id) \nSELECT genre, \n       Sum(quantity) AS sold_tracks, \n       Round(Cast(Sum(quantity) AS FLOAT) \/ (SELECT Sum(quantity) \n                                             FROM   tracks_bought_in_usa_genres) \n             * 100) \n                     AS sold_tracks_perc \nFROM   tracks_bought_in_usa_genres \nGROUP  BY genre \nORDER  BY sold_tracks DESC \n \n \"\"\"\n\n# Make connection to database\ndata = sqlite3.connect('\/\/\/\/kaggle\/input\/chinook-music-store-data\/chinook.db')\n\n# Convert the query output into a dataframe\ngenre_pop = pd.read_sql_query(query, data)\ngenre_pop = genre_pop.append(genre_pop.loc[9:, ['sold_tracks', 'sold_tracks_perc']].sum(), \n                            ignore_index=True)\ngenre_pop.iloc[-1, 0] = 'Other'\ngenre_pop.drop(index=list(range(9, 17)), inplace=True)\n\n# Create a pie plot of the results\nfig = px.pie(genre_pop, names='genre', values='sold_tracks', \n            title='Most Popular genres in US Market', \n            color_discrete_sequence=px.colors.sequential.RdBu_r)\nfig.update_layout(legend_title_text='Genre')\nfig.show()","0c11e38f":"%%sql\n\nWITH total_sales \n     AS (SELECT c.support_rep_id, \n                Round(Sum(i.total)) AS total_sum \n         FROM   customer c \n                LEFT JOIN invoice i \n                       ON i.customer_id = c.customer_id \n         GROUP  BY c.support_rep_id) \nSELECT e.first_name \n       || ' ' \n       || e.last_name                                   AS name, \n       title, \n       hire_date, \n       country, \n       ts.total_sum, \n       Round(ts.total_sum \/ (SELECT Sum(total_sum) \n                             FROM   total_sales) * 100) AS percentage_of_sales \nFROM   employee e \n       INNER JOIN total_sales ts \n               ON ts.support_rep_id = e.employee_id \nORDER  BY ts.total_sum DESC \n\n","6f048a99":"query = \"\"\"\nWITH total_sales \n     AS (SELECT c.support_rep_id, \n                Round(Sum(i.total)) AS total_sum \n         FROM   customer c \n                LEFT JOIN invoice i \n                       ON i.customer_id = c.customer_id \n         GROUP  BY c.support_rep_id) \nSELECT e.first_name \n       || ' ' \n       || e.last_name                                   AS name, \n       title, \n       hire_date, \n       country, \n       ts.total_sum, \n       Round(ts.total_sum \/ (SELECT Sum(total_sum) \n                             FROM   total_sales) * 100) AS percentage_of_sales \nFROM   employee e \n       INNER JOIN total_sales ts \n               ON ts.support_rep_id = e.employee_id \nORDER  BY ts.total_sum DESC \n \n \"\"\"\n\n# Make connection to database\ndata = sqlite3.connect('\/\/\/\/kaggle\/input\/chinook-music-store-data\/chinook.db')\n\nemployee_sales = pd.read_sql_query(query, data)\n\nfig = px.bar(employee_sales, x='name', y='total_sum', text='total_sum', \n            title='Total Sales Amount by Employee', \n            hover_data=['title', 'total_sum', 'hire_date'])\nfig.update_xaxes(title_text='Employee')\nfig.update_yaxes(title_text='Total sales value', showticklabels=False)\nfig.update_layout(paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)')\nfig.update_traces(marker_color='rgb(207, 207, 207)')\nfig.show()","ba22e419":"%%sql\n\nWITH total_sales_by_customer_countries \n     AS (SELECT i.customer_id, \n                i.total, \n                CASE \n                  WHEN (SELECT Count(*) \n                        FROM   customer \n                        WHERE  country = c.country) = 1 THEN \"Other\" \n                  ELSE c.country \n                END AS country, \n                CASE \n                  WHEN (SELECT Count(*) \n                        FROM   customer \n                        WHERE  country = c.country) = 1 THEN 1 \n                  ELSE 0 \n                END AS only_one_customer \n         FROM   invoice i \n                INNER JOIN customer c \n                        ON i.customer_id = c.customer_id), \n    \n    \n     total_sales_by_customer_countries_analytincs \n     AS (SELECT only_one_customer, \n                country, \n                ( Count(DISTINCT customer_id) )                        AS \n                   unique_customers, \n                Round(Sum(total))                                      AS \n                   total_value_sales, \n                Round(Sum(total) \/ ( Count(DISTINCT customer_id) ), 2) AS \n                   avg_lifetime_sales, \n                Round(Sum(total) \/ ( Count(customer_id) ), 2)          AS \n                avg_order \n         FROM   total_sales_by_customer_countries \n         GROUP  BY country) \n    \n    \nSELECT country, \n       unique_customers, \n       total_value_sales, \n       avg_lifetime_sales, \n       avg_order \nFROM   total_sales_by_customer_countries_analytincs \nORDER BY only_one_customer, total_value_sales DESC","b97c375d":"query = '''\n\nWITH total_sales_by_customer_countries \n     AS (SELECT i.customer_id, \n                i.total, \n                CASE \n                  WHEN (SELECT Count(*) \n                        FROM   customer \n                        WHERE  country = c.country) = 1 THEN \"Other\" \n                  ELSE c.country \n                END AS country, \n                CASE \n                  WHEN (SELECT Count(*) \n                        FROM   customer \n                        WHERE  country = c.country) = 1 THEN 1 \n                  ELSE 0 \n                END AS only_one_customer \n         FROM   invoice i \n                INNER JOIN customer c \n                        ON i.customer_id = c.customer_id), \n    \n    \n     total_sales_by_customer_countries_analytincs \n     AS (SELECT only_one_customer, \n                country, \n                ( Count(DISTINCT customer_id) )                        AS \n                   unique_customers, \n                Round(Sum(total))                                      AS \n                   total_value_sales, \n                Round(Sum(total) \/ ( Count(DISTINCT customer_id) ), 2) AS \n                   avg_lifetime_sales, \n                Round(Sum(total) \/ ( Count(customer_id) ), 2)          AS \n                avg_order \n         FROM   total_sales_by_customer_countries \n         GROUP  BY country) \n    \n    \nSELECT country, \n       unique_customers, \n       total_value_sales, \n       avg_lifetime_sales, \n       avg_order \nFROM   total_sales_by_customer_countries_analytincs \nORDER BY only_one_customer, total_value_sales DESC\n'''\n\n\ncountry_data = pd.read_sql_query(query, data)\n\n# Create bar plot of data\nfig = px.bar(country_data, x='total_value_sales', y='country', title='Sales by Country', \n            hover_data=country_data.columns[1:], \n            text='total_value_sales', \n            orientation='h')\nfig.update_xaxes(tickangle=90, showticklabels=False)\nfig.update_traces(marker_color='rgb(207, 207, 207)')\nfig.update_layout(plot_bgcolor='rgba(0,0,0,0)')\nfig.show()","7742ee62":"fig = px.scatter_matrix(country_data.iloc[:, 1:])\nfig.update_layout(height=700, width=970, title='Country Statistics Correlations', title_x=.5)\nfig.update_traces(showupperhalf=False, diagonal_visible=False)\nfig.show()","2c3ce03e":"%%sql\n\n\n\nWITH invoice_track_album \n     AS (SELECT il.invoice_id, \n                il.track_id, \n                t.album_id \n         FROM   invoice_line il \n                INNER JOIN track t \n                        ON t.track_id = il.track_id), \n    \n     invoice_album_categorization \n     AS (SELECT ita.invoice_id, \n                ita.album_id, \n                CASE \n                  WHEN (SELECT t.track_id \n                        FROM   track t \n                        WHERE  t.album_id = ita.album_id \n                        EXCEPT \n                        SELECT subita.track_id \n                        FROM   invoice_track_album subita \n                        WHERE  subita.invoice_id = ita.invoice_id) IS NULL \n                       AND (SELECT subita.track_id \n                            FROM   invoice_track_album subita \n                            WHERE  subita.invoice_id = ita.invoice_id \n                            EXCEPT \n                            SELECT t.track_id \n                            FROM   track t \n                            WHERE  t.album_id = ita.album_id) IS NULL THEN \n                  'full' \n                  ELSE 'partial' \n                END AS full_album \n         FROM   invoice_track_album ita \n         GROUP  BY invoice_id) \n    \nSELECT full_album, \n       Count(*) \n       AS number_sold, \n       Round(Cast(Count(*) AS FLOAT) \/ (SELECT Count(*) \n                                        FROM   invoice_album_categorization) * \n             100) AS \n       percentage_sold \nFROM   invoice_album_categorization \nGROUP  BY full_album ","30a12eb0":"query = '''\n\nWITH invoice_track_album \n     AS (SELECT il.invoice_id, \n                il.track_id, \n                t.album_id \n         FROM   invoice_line il \n                INNER JOIN track t \n                        ON t.track_id = il.track_id), \n    \n     invoice_album_categorization \n     AS (SELECT ita.invoice_id, \n                ita.album_id, \n                CASE \n                  WHEN (SELECT t.track_id \n                        FROM   track t \n                        WHERE  t.album_id = ita.album_id \n                        EXCEPT \n                        SELECT subita.track_id \n                        FROM   invoice_track_album subita \n                        WHERE  subita.invoice_id = ita.invoice_id) IS NULL \n                       AND (SELECT subita.track_id \n                            FROM   invoice_track_album subita \n                            WHERE  subita.invoice_id = ita.invoice_id \n                            EXCEPT \n                            SELECT t.track_id \n                            FROM   track t \n                            WHERE  t.album_id = ita.album_id) IS NULL THEN \n                  'full' \n                  ELSE 'partial' \n                END AS full_album \n         FROM   invoice_track_album ita \n         GROUP  BY invoice_id) \n    \nSELECT full_album, \n       Count(*) \n       AS number_sold, \n       Round(Cast(Count(*) AS FLOAT) \/ (SELECT Count(*) \n                                        FROM   invoice_album_categorization) * \n             100) AS \n       percentage_sold \nFROM   invoice_album_categorization \nGROUP  BY full_album \n'''\n\n\n# Store query output in DataFrame\nalbum_or_not = pd.read_sql_query(query, data)\n\n# Create bar plot of DataFrame\nfig = px.bar(album_or_not, x='full_album', y='number_sold', \n            title='Number of Album vs Single Purchases', \n            text='number_sold', \n            hover_data=['full_album', 'percentage_sold', 'number_sold'])\nfig.update_traces(marker_color='rgb(207, 207, 207)')\nfig.update_yaxes(showticklabels=False)\nfig.update_layout(plot_bgcolor='rgba(0,0,0,0)')\nfig.show()","df8349e9":"%%sql\n\nWITH playlist_track_artist AS \n( \n          SELECT    p.NAME    playlist, \n                    t.NAME    track, \n                    alb.title album, \n                    art.NAME  artist \n          FROM      playlist p \n          LEFT JOIN playlist_track \n          ON        playlist_track.playlist_id = p.playlist_id \n          LEFT JOIN track t \n          ON        t.track_id = playlist_track.track_id \n          LEFT JOIN album alb \n          ON        alb.album_id = t.album_id \n          LEFT JOIN artist art \n          ON        art.artist_id = alb.artist_id) \nSELECT   artist, \n         Count(*) in_playlists \nFROM     playlist_track_artist \nGROUP BY artist \nORDER BY in_playlists DESC limit 10\n\n","2b351cae":"query = '''\n\nWITH playlist_track_artist AS \n( \n          SELECT    p.NAME    playlist, \n                    t.NAME    track, \n                    alb.title album, \n                    art.NAME  artist \n          FROM      playlist p \n          LEFT JOIN playlist_track \n          ON        playlist_track.playlist_id = p.playlist_id \n          LEFT JOIN track t \n          ON        t.track_id = playlist_track.track_id \n          LEFT JOIN album alb \n          ON        alb.album_id = t.album_id \n          LEFT JOIN artist art \n          ON        art.artist_id = alb.artist_id) \nSELECT   artist, \n         Count(*) in_playlists \nFROM     playlist_track_artist \nGROUP BY artist \nORDER BY in_playlists DESC limit 10\n\n\n'''\n\n# Store the output of query into a DataFrame\ntracks_sold = pd.read_sql_query(query, data)\n\n# Create bar plot of DataFrame\nfig = px.bar(tracks_sold, x='in_playlists', y='artist', orientation='h', text='in_playlists', \n            title='Top 10 Number of Tracks Sold by Artist')\nfig.update_xaxes(showticklabels=False)\nfig.update_traces(marker_color='rgb(207, 207, 207)')\nfig.update_layout(plot_bgcolor='rgba(0,0,0,0)')\nfig.show()","34a079e3":"%%sql\n\nSELECT Count(DISTINCT track_id) n_purchased, \n       (SELECT Count (*) \n        FROM   track)           n_total, \n       Round (Cast(Count(DISTINCT track_id) AS FLOAT) \/ (SELECT Count (*) \n                                                         FROM   track) * 100) \n                                percentage \nFROM   invoice_line ","01f29ca1":"\n%%sql\n\n-- invoice information by invoice ID\n\n\n\nSELECT\n    il.track_id,\n    t.name track_name,\n    art.name artist_name,\n    mt.name track_type,\n    il.unit_price,\n    il.quantity\nFROM invoice_line il\nINNER JOIN track t ON t.track_id = il.track_id\nINNER JOIN media_type mt ON mt.media_type_id = t.media_type_id\nINNER JOIN album a ON a.album_id = t.album_id\nINNER JOIN artist art on a.artist_id = art.artist_id\nWHERE il.invoice_id = 4;","2ede4c18":"%%sql\n\n--From which albums the most songs have been purchased.\n\nSELECT ta.album_title AS album, \n       ta.artist_name AS artist, \n       Count(*)       AS tracks_purchased \nFROM   invoice_line il \n       INNER JOIN (SELECT track.track_id, \n                          alb.title album_title, \n                          art.name  artist_name \n                   FROM   track \n                          INNER JOIN album alb \n                                  ON alb.album_id = track.album_id \n                          INNER JOIN artist art \n                                  ON art.artist_id = alb.artist_id) ta \n               ON ta.track_id = il.track_id \nGROUP  BY 1 \nORDER  BY 3 DESC \nLIMIT  5 ","a45f0b74":"%%sql\n\n--Recursive join report about employees and their supervisors.\n\nSELECT e1.first_name \n       || \"\" \n       || e1.last_name AS employee_name, \n       e1.title        employee_title, \n       e2.first_name \n       || \"\" \n       || e2.last_name AS supervisor_name, \n       e2.title        supervisor_title \nFROM   employee e1 \n       LEFT JOIN employee e2 \n              ON e1.reports_to = e2.employee_id \nORDER  BY 1 ","8c1a2aac":"%%sql\n\n--Summarizing purchases of each customer\n\nSELECT cust.first_name \n       || ' ' \n       || cust.last_name           customer_name, \n       invcust.number_of_purchases number_of_purchases, \n       invcust.total_spent         total_spent, \n       invcust.customer_category   customer_category \nFROM   customer cust \n       INNER JOIN (SELECT customer_id, \n                          Count(*)   AS number_of_purchases, \n                          Sum(total) AS total_spent, \n                          CASE \n                            WHEN Sum(total) < 40 THEN 'small spender' \n                            WHEN Sum(total) <= 100 THEN 'regular' \n                            ELSE 'big spender' \n                          END        AS customer_category \n                   FROM   invoice \n                   GROUP  BY customer_id) invcust \n               ON invcust.customer_id = cust.customer_id \nORDER  BY customer_name ","c0f6f58c":"%%sql\n\n-- A query that shows summary data for every playlist in the Chinook database\n\n-- LEFT JOINs between the tables inside named subquery to include all playlists whether they have tracks added to them or not.\n\nWITH playlist_extended \n     AS (SELECT playlist.playlist_id, \n                playlist.NAME             playlist_name, \n                track.NAME                track_name, \n                track.milliseconds \/ 1000 AS length \n         FROM   playlist \n                LEFT JOIN playlist_track \n                       ON playlist.playlist_id = playlist_track.playlist_id \n                LEFT JOIN track \n                       ON playlist_track.track_id = track.track_id) \nSELECT playlist_id, \n       playlist_name, \n       Count(track_name)    AS number_of_tracks, \n       Sum(length) AS length_seconds \nFROM   playlist_extended \nGROUP  BY playlist_id \nORDER  BY playlist_id ASC ","9cfed7cf":"%%sql\n\n-- view of customers that have purchased more than 90 from the store.\n\nDROP VIEW IF EXISTS customer_gt_90_dollars;\nCREATE TEMPORARY VIEW customer_gt_90_dollars AS \nSELECT     customer.* \nFROM       customer \nINNER JOIN \n           ( \n                    SELECT   Sum(total) total_sum, \n                             customer_id \n                    FROM     invoice \n                    GROUP BY customer_id \n                    HAVING   total_sum > 90) ts \nON         customer.customer_id = ts.customer_id;\n\n\nSELECT * \nFROM   customer_gt_90_dollars\nLIMIT  10;\n\n","f3f76fed":"%%sql\n\n-- View of all customers that live in the USA.\n\nDROP VIEW IF EXISTS customer_usa;\nCREATE TEMPORARY VIEW customer_usa AS \nSELECT * \nFROM   customer \nWHERE  country = \"USA\";\n\nSELECT * \nFROM   customer_usa\nLIMIT  10;","f20cb712":"%%sql\n\nSELECT * \nFROM   customer_usa \nUNION \nSELECT * \nFROM   customer_gt_90_dollars ","61a870c8":"%%sql\n\n-- a query that works out how many customers that are in the USA and \n-- have purchased more than $90 are assigned to each sales support agent.\n\nSELECT first_name \n       || ' ' \n       || last_name              AS employee_name, \n       Count(usa_90.customer_id) AS customers_usa_gt_90 \nFROM   employee e \n       LEFT JOIN (SELECT customer_id, \n                         support_rep_id \n                  FROM   customer_usa \n                  INTERSECT \n                  SELECT customer_id, \n                         support_rep_id \n                  FROM   customer_gt_90_dollars) usa_90 \n              ON usa_90.support_rep_id = e.employee_id \nWHERE  title = 'Sales Support Agent' \nGROUP  BY usa_90.support_rep_id \nORDER  BY employee_name ","c54adb52":"%%sql\n\n--The first named subquery returns all customers that are from India.\n--The second named subquery calculates the sum total for every customer.\n--The main query joins the two named subqueries\n\n\nWITH indian_customers \n     AS (SELECT * \n         FROM   customer \n         WHERE  country = 'India'), \n     total_sum \n     AS (SELECT customer_id, \n                Sum(total) AS total_purchases \n         FROM   invoice \n         GROUP  BY customer_id) \nSELECT first_name \n       || ' ' \n       || last_name              AS customer_name, \n       total_sum.total_purchases AS total_purchases \nFROM   indian_customers \n       INNER JOIN total_sum \n               ON total_sum.customer_id = indian_customers.customer_id \nORDER  BY customer_name ","7389c94c":"%%sql\n\nWITH total_sum_by_customer \n     AS (SELECT c.customer_id  AS customer_id, \n                c.first_name \n                || ' ' \n                || c.last_name AS customer_name, \n                Sum(i.total)   AS total_purchased, \n                c.country      AS country \n         FROM   invoice i \n                INNER JOIN customer c \n                        ON c.customer_id = i.customer_id \n         GROUP  BY i.customer_id) \nSELECT country, \n       customer_name, \n       Max(total_purchased) AS total_purchased \nFROM   total_sum_by_customer \nGROUP  BY country \nORDER  BY country ","96f18c7b":"## 1. Most profitable genres","40a4a43c":"The Chinook store allows customer to make purchases in one of the two ways:\n\n* purchase a whole album\n* purchase a collection of one or more individual tracks.\n\nThe store does not let customers purchase a whole album, and then add individual tracks to that same purchase (unless they do that by choosing each track manually). When customers purchase albums they are charged the same price as if they had purchased each of those tracks separately.\n\nManagement are currently considering changing their purchasing strategy to save money. The strategy they are considering is to purchase only the most popular tracks from each album from record companies, instead of purchasing every track from an album.\n\nWe have been asked to find out what percentage of purchases are individual tracks vs whole albums, so that management can use this data to understand the effect this decision might have on overall revenue.","75385f68":"The Chinook record store has just signed a deal with a new record label, and we need to select the first three albums that will be added to the store, from a list of four. All four albums are by artists that don't have any tracks in the store right now - we have the artist names, and the genre of music they produce:\n\n* Regal\t*Hip-Hop*\n* Red Tone\t*Punk*\n* Meteor and the Girls\t*Pop*\n* Slim Jim Bites\t*Blues*\n\nThe record label specializes in artists from the USA, and they have given Chinook some money to advertise the new albums in the USA, so we're interested in finding out which genres sell the best in the USA.\n\nThis query finds out which genres sell the most tracks in the USA to make a recommendation for the three artists whose albums we should purchase for the store.","be7e9b9f":"Each customer for the Chinook store gets assigned to a sales support agent within the company when they first make a purchase. We need to analyze the purchases of customers belonging to each employee to see if any sales support agent is performing either better or worse than the others.","f3ad8c81":"While there is a 20% difference in sales between Jane (the top employee) and Steve (the bottom employee), the difference roughly corresponds with the differences in their hiring dates. All employees are from Canada and report to the same manager, it is hard to come to any other conclusions according to data limitations.\n\n","e1c08615":"Album purchases account for 18.6% of purchases. Based on this data, it's possible to recommend against purchasing only select tracks from albums from record companies, since there is potential to lose one fifth of revenue.\n","9b07bace":"## 4. Full album purchases vs. single tracks stat","34b4eff7":"## Multiple named WITH clauses and JOIN","cf7af991":"# SQL experiments","bdb9e941":"Based on the data, there may be opportunity in the following countries:\n* Czech Republic\n* United Kingdom\n* India","121c8ce6":"## JOIN on INTERSECT with groupping","0437ae04":"## UNION both views","a1ac2b47":"\nQuery that collates data on purchases from different countries.\n\nWhere a country has only one customer, they are collected into an \"Other\" group, sorted by the total sales from highest to lowest, with the \"Other\" group at the very bottom.\n\nAnalytics\n* total number of customers\n* total value of sales\n* average value of sales per customer\n* average order value","751ac01d":"## Creating a view","ca649ed7":"## Join on subquery","0d8041d8":"# Imports, connecting to SQL DB","7685c1a2":"Based on the sales of tracks across different genres in the USA, we should purchase the new album by Red Tone (Punk). It's worth keeping in mind that combined, these one genre makes up only 12% of total sales, so we should be on the lookout for artists and albums from the 'rock' genre, which accounts for 53% of sales.","ddafa012":"## WITH summary statistics","00c94178":"# Chinook analytics","e0c92d6a":"## 2. Sales support agents performance","511007b2":"## 6. Number of tracks purchased at least once","e0eb62ea":"## Recursive joins","e4d3c61d":"## WITH as subquery","98a9f83f":"The list contains most popular artists used throughout playlists in Chinook DB.","c2ddd761":"## 5. Most popular artists in playlists","b0b84f0e":"## 3. Country sales analytics"}}