{"cell_type":{"aff56a98":"code","f6256567":"code","3730fb10":"code","685206b5":"code","9db53c50":"code","d1a2cd43":"code","8815851a":"code","01624718":"code","be502412":"code","b5a080b9":"code","efd11758":"code","d892ce2b":"code","5d31c027":"code","83ae44bb":"code","87d818ef":"code","796bd2a3":"code","c80d0ef8":"code","a0c165e2":"code","db3c890b":"code","a7750dcb":"markdown","43e6afb8":"markdown","54741fa7":"markdown","93d773d9":"markdown","82c34040":"markdown","c9515536":"markdown","7dbb80e0":"markdown","9c5d02eb":"markdown","822a236f":"markdown","b083e38b":"markdown","c4daa05c":"markdown","629eb8bd":"markdown","0a278725":"markdown","fa6acb5b":"markdown"},"source":{"aff56a98":"# Data handling \nimport pandas as pd \nimport numpy as np \n\n# Preprocessing \nfrom sklearn.impute import KNNImputer\nfrom sklearn.preprocessing import OneHotEncoder \nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\n\n# Model \nfrom sklearn.tree import DecisionTreeClassifier\n\n# Evaluation \nfrom sklearn.metrics import accuracy_score","f6256567":"# Import data \ntrain_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain_df.head()","3730fb10":"# Dropping irrelevant columns \ntrain_df.drop(columns=[\"PassengerId\",\"Name\"], inplace=True)","685206b5":"# Creating new variables \ntrain_df[\"Relatives\"] = train_df[\"SibSp\"] + train_df[\"Parch\"]\ntrain_df.loc[train_df[\"Relatives\"]==0, \"Travel_Alone\"] = 1\ntrain_df.loc[train_df[\"Relatives\"]>0, \"Travel_Alone\"] = 0\ntrain_df.head()","9db53c50":"# Defining target and explanatory variables \ny = train_df[\"Survived\"]\nX = train_df.drop(columns=[\"Survived\"])\n\n# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)","d1a2cd43":"# Drop cabin column \nX_train.drop(columns=[\"Cabin\",\"Ticket\"], inplace=True)\nX_test.drop(columns=[\"Cabin\",\"Ticket\"], inplace=True)","8815851a":"X_train[\"Embarked\"].fillna(\"S\", inplace=True)\nX_test[\"Embarked\"].fillna(\"S\", inplace=True)","01624718":"# One Hot Encoding\nencoder = OneHotEncoder(drop=\"first\", sparse=False)\ncolumns = [\"Sex\", \"Embarked\"]\nlabel_X_train = pd.DataFrame(encoder.fit_transform(X_train[columns]), index=X_train.index)\nlabel_X_test = pd.DataFrame(encoder.transform(X_test[columns]), index=X_test.index)","be502412":"X_train_numeric = X_train.select_dtypes(exclude=\"object\")\nX_test_numeric = X_test.select_dtypes(exclude=\"object\")\nX_train = pd.concat([X_train_numeric, label_X_train], axis=1, ignore_index=True)\nX_test = pd.concat([X_test_numeric, label_X_test], axis=1, ignore_index=True)","b5a080b9":"# Imputer \nimputer = KNNImputer()\nX_train = imputer.fit_transform(X_train)\nX_test = imputer.transform(X_test)","efd11758":"# Initial model \nmodel = DecisionTreeClassifier(random_state=0)\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\nscore = accuracy_score(y_test, predictions)\nprint(\"Score: {0:0.5f}\".format(score))","d892ce2b":"# 1st model improvement \nfor max_depth in range(1, 11, 1):\n    model_1 = DecisionTreeClassifier(max_depth=max_depth, random_state=0)\n    model_1.fit(X_train, y_train)\n    predictions_1 = model_1.predict(X_test)\n    score_1 = accuracy_score(y_test, predictions_1)\n    print(\"max_depth: {0}, score: {1:0.5f}\".format(max_depth, score_1))","5d31c027":"# Import data\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_df.head()","83ae44bb":"# Creating new variables \ntest_df[\"Relatives\"] = test_df[\"SibSp\"] + test_df[\"Parch\"]\ntest_df.loc[test_df[\"Relatives\"]==0, \"Travel_Alone\"] = 1\ntest_df.loc[test_df[\"Relatives\"]>0, \"Travel_Alone\"] = 0","87d818ef":"test = test_df.drop(columns=[\"PassengerId\", \"Name\", \"Ticket\", \"Cabin\"])\ntest.isna().sum()","796bd2a3":"# Categorical Encoding\ncolumns = [\"Sex\", \"Embarked\"]\nlabel_test = pd.DataFrame(encoder.transform(test[columns]), index=test.index)\ntest_numeric = test.select_dtypes(exclude=\"object\")\ntest = pd.concat([test_numeric, label_test], axis=1)\n\n# Missing values\ntest = imputer.transform(test)","c80d0ef8":"DTC_model = DecisionTreeClassifier(max_depth=8, random_state=0)\nDTC_model.fit(X_train, y_train)\ntest_predictions = DTC_model.predict(test)","a0c165e2":"output = pd.DataFrame({\"PassengerId\":test_df[\"PassengerId\"], \n                      \"Survived\": test_predictions})\noutput.to_csv(\"submission.csv\", index=False)","db3c890b":"output","a7750dcb":"## Categorical variables","43e6afb8":"### Missing Values ","54741fa7":"## Preprocessing","93d773d9":"### Encoding","82c34040":"# Packages","c9515536":"Optimal max_depth = 8","7dbb80e0":"# Preprocessing","9c5d02eb":"# Submission","822a236f":"## Numeric Variables","b083e38b":"# Feature Engineering","c4daa05c":"# Model Development","629eb8bd":"### Missing Values","0a278725":"## Model Development","fa6acb5b":"## Predictions"}}