{"cell_type":{"d837e100":"code","75dba141":"code","0cd7a898":"code","217f2513":"code","73c49e34":"code","4bc0a840":"code","04338c39":"code","b9156a80":"markdown"},"source":{"d837e100":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","75dba141":"# Reading from csv file\n\ndata = pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\", sep=\",\")\n\ny_data = data[\"class\"].values\nx_data = data.drop(\"class\", axis=1)\n\ny = [0 if each == \"Normal\" else 1 for each in y_data]","0cd7a898":"# Normalization\n\nx = (x_data - np.min(x_data))\/(np.max(x_data) - np.min(x_data))","217f2513":"# Train Test Split\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=4)","73c49e34":"# KNN\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(x_train, y_train)\npredict = knn.predict(x_test)","4bc0a840":"# Score\n\nprint(\"KNN Score with {} neighbors: {}\".format(5, knn.score(x_test, y_test)))","04338c39":"# Finding a K value\n\nimport matplotlib.pyplot as plt\n\nscore_list = []\nfor each in range(1, 15):\n    knn2 = KNeighborsClassifier(n_neighbors=each)\n    knn2.fit(x_train, y_train)\n    score_list.append(knn2.score(x_test, y_test))\n\nplt.plot(range(1, 15), score_list)\nplt.xlabel(\"K Neighbors\")\nplt.ylabel(\"Accuracy\")\n\nprint(\"Optimal Score: {}\".format(np.max(score_list)))\nprint(\"Optimal K value: {}\".format(score_list.index(np.max(score_list))))","b9156a80":"# KNN Homework\n\nThis is my third(?) homework in machine learning, you can definitely comment under this to inform me about more sufficient solutions. "}}