{"cell_type":{"e639b671":"code","84e57ee7":"code","bc864ac1":"code","b61ec090":"code","173f7493":"code","9cfbf481":"code","e39302fe":"code","24734134":"code","606b186e":"code","79930b70":"code","51fb42bf":"code","b4b8eddf":"code","215ecf18":"code","1392b078":"code","602fc82f":"code","553e2103":"code","0710d43c":"code","27f65424":"code","93697125":"code","25086e37":"markdown","a069ca1d":"markdown","f786336b":"markdown","c3cfcf47":"markdown","e02110bf":"markdown","ca021ef8":"markdown","72528886":"markdown","01e5029a":"markdown"},"source":{"e639b671":"import pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime","84e57ee7":"train = pd.read_csv('..\/input\/data-science-winter-osaka2\/train.csv')\ntest = pd.read_csv('..\/input\/data-science-winter-osaka2\/test.csv')\n\ndf_merge = pd.concat([train, test], axis=0).reset_index()#train\u3068test\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u7d71\u5408\nprint(df_merge.shape)\nprint(df_merge[\"name\"].unique().shape)#\u30bd\u30d5\u30c8\u540d\u306f\u30e6\u30cb\u30fc\u30af\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\ndf_merge.head()","bc864ac1":"\ndef eval_data(row):\n    if row == row:\n        return eval(row)\n    else:\n        return np.nan\n    \nfor column in ['popular_tags', 'categories', 'minimum_requirements', 'recommended_requirements']:\n    df_merge[column] = df_merge[column].apply(eval_data)","b61ec090":"def make_time_feature(strptime_feat):\n    #strptime\u3092\u5f15\u6570\u306b\u3001unix_time, year, month\u3092\u8fd4\u3059\u95a2\u6570\n    #assert(type(strptime_feat)==datetime.datetime)\n    unix_time = strptime_feat.timestamp()\n    year = strptime_feat.year\n    month = strptime_feat.month\n    time_feat_list = [unix_time, year, month]\n    return time_feat_list\n\ndef insert_data(df, index, time_feat_list):\n    #time_feat_list : [unix_time, year, month]\n    df.at[index, \"unix_time\"]=time_feat_list[0]\n    df.at[index, \"year\"]=time_feat_list[1]\n    df.at[index, \"month\"]=time_feat_list[2]\n    return df","173f7493":"df_merge[\"unix_time\"]=9999\ndf_merge[\"year\"]=9999#\u4ee5\u4e0b\u306eformat\u4ee5\u5916\u3067\u66f8\u3044\u3066\u3042\u308b\u5834\u5408\u306f9999\u3092\u4ee3\u5165\ndf_merge[\"month\"]=99#\u4ee5\u4e0b\u306eformat\u4ee5\u5916\u3067\u66f8\u3044\u3066\u3042\u308b\u5834\u5408\u306f9999\u3092\u4ee3\u5165\n\nnan_data = []\nother_data = []\nfor index, str_date in enumerate(tqdm(df_merge[\"release_date\"])):\n    try:\n        #\"Nov 5, 2015(\u6708\u7565\u79f0\u3000\u65e5\u4ed8, \u897f\u66a6)\"\u306e\u5f62\u5f0f\u3092\u5909\u63db\n        time_feat = datetime.datetime.strptime(str_date, \"%b %d, %Y\")\n        time_feat = make_time_feature(time_feat)     \n        df_merge = insert_data(df_merge, index, time_feat)\n\n    except ValueError:\n        try:\n            #\"2 Dec, 2019(\u65e5\u4ed8\u3000\u6708\u7565\u79f0, \u897f\u66a6)\"\u306e\u5f62\u5f0f\u3092\u5909\u63db\n            time_feat = datetime.datetime.strptime(str_date, \"%d %b, %Y\")\n            time_feat = make_time_feature(time_feat)     \n            df_merge = insert_data(df_merge, index, time_feat)\n        except ValueError:\n            try:\n                #\"Sep 2016(\u6708\u7565\u79f0 \u897f\u66a6)\"\u306e\u30c7\u30fc\u30bf\u3092\u5909\u63db\n                time_feat = datetime.datetime.strptime(str_date, \"%b %Y\")\n                time_feat = make_time_feature(time_feat)     \n                df_merge = insert_data(df_merge, index, time_feat)\n            except ValueError:\n                other_data.append(str_date)\n                #print(str_date)\n    \n    except TypeError:\n        #nan\u306e\u5834\u5408\n        nan_data.append(str_date)\n        #print(str_date)\n    \n        \n    ","9cfbf481":"#\u767a\u58f2\u5e74\u5ea6\u304c\u53ca\u307c\u3059\u30ec\u30d3\u30e5\u30fc\u306b\u53ca\u307c\u3059\u5f71\u97ff\ndf_cross = pd.crosstab(df_merge[\"year\"], df_merge[\"user_reviews\"],normalize='index')\nfig, axs = plt.subplots(1, 2, figsize=(15, 5))\n\n\nsns.countplot(x=\"year\", data=df_merge, hue=\"user_reviews\", ax=axs[0])\naxs[0].tick_params(rotation=90)\ndf_cross.plot.bar(stacked=True, ax=axs[1])\n\n#\u30dc\u30ea\u30e5\u30fc\u30e0\u30be\u30fc\u30f3\u3067\u3042\u308b2011\u5e74\u9803\u304b\u3089\u306e\u30c7\u30fc\u30bf\u306b\u7740\u76ee\u3059\u308b\u3068\u3001\u7d4c\u6642\u7684\u306b\u30dd\u30b8\u30c6\u30a3\u30d6\u30ec\u30d3\u30e5\u30fc(c0)\u306e\u5272\u5408\u304c\u6e1b\u5c11\u3057\u3001\u30ec\u30d3\u30e5\u30fc\u306a\u3057(c2)\u306e\u5272\u5408\u304c\u5897\u3048\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n#\u65b0\u3057\u3044\u30b2\u30fc\u30e0\u306f\u767a\u58f2\u3055\u308c\u3066\u304b\u3089\u306e\u6642\u9593\u304c\u77ed\u3044\u305f\u3081\u3001\u30ec\u30d3\u30e5\u30fc\u304c\u96c6\u307e\u3089\u306a\u3044\u30b1\u30fc\u30b9\u304c\u591a\u304f\u3001\u30ec\u30d3\u30e5\u30fc\u306a\u3057(c2)\u306e\u5272\u5408\u304c\u5927\u304d\u3044\u3053\u3068\u304c\u6539\u3081\u3066\u308f\u304b\u308a\u307e\u3059\u3002\n#(\u3068\u306f\u3044\u3048\u3001\u3053\u306e\u7279\u5fb4\u91cf\u306fbaseline\u306b\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u304c\u3002\u3002\u3002)","e39302fe":"df_cross = pd.crosstab(df_merge[\"month\"], df_merge[\"user_reviews\"],normalize='index')\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n\nsns.countplot(x=\"month\", data=df_merge, hue=\"user_reviews\", ax=axs[0])\ndf_cross.plot.bar(stacked=True, ax=axs[1])\n\n#\u767a\u58f2\u6708\u3067\u306e\u30ec\u30d3\u30e5\u30fc\u306e\u5dee\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u306d\u3002\n#\u500b\u4eba\u7684\u306b\u306f\u5e74\u672b\u3084\u30af\u30ea\u30b9\u30de\u30b9\u306a\u3069\u3001\u6d88\u8cbb\u884c\u52d5\u304c\u6d3b\u767a\u306b\u306a\u308b\u6642\u671f\u306b\u30b2\u30fc\u30e0\u306e\u767a\u58f2\u672c\u6570\u304c\u5897\u3048\u3001\u305d\u306e\u3088\u3046\u306a\u7af6\u5408\u304c\u591a\u304f\u3044\u308b\u72b6\u6cc1\u3067\u306f\u30ec\u30d3\u30e5\u30fc\u304c\u53b3\u3057\u3081\u306b\u306a\u308b\u306e\u3067\u306f\n#\uff08\u5e74\u672b\u3084\u30af\u30ea\u30b9\u30de\u30b9\u306b\u8ca9\u58f2\u3055\u308c\u305f\u30b2\u30fc\u30e0\u306f\u30ec\u30d3\u30e5\u30fc\u304c\u53b3\u3057\u304f\u306a\u308b\uff09\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u3093\u3053\u3068\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n#\u4e00\u65b9\u3067\u3001\u4e00\u5b9a\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5247\u3063\u3066\u3044\u306a\u3044\u767a\u58f2\u65e5\u306e\u66f8\u304d\u65b9\u3092\u3057\u3066\u3044\u308b\u30b2\u30fc\u30e0\u306f\u30ec\u30d3\u30e5\u30fc\u306a\u3057\u304c\u5727\u5012\u7684\u306b\u591a\u304f\u3001\u3053\u308c\u306f\u7279\u5fb4\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002","24734134":"#df_minimum_requirements\u306b\u3064\u3044\u3066long_format\u306b\u3066\u4f5c\u6210\nminimum_requirements_list = []\nfor i, row in tqdm(enumerate(df_merge[\"minimum_requirements\"])):\n    try:\n    \n        os_kinds = list(row.keys())#['windows', 'linux','macOS']\n        for os in os_kinds:\n            comopnents = list(row[os].keys())\n            for comopnent in comopnents:\n                record = list([df_merge[\"name\"][i], os, comopnent, row[os][comopnent]])\n                minimum_requirements_list.append(record)\n    except AttributeError:\n        continue\n        \ndf_minimum_requirements = pd.DataFrame(minimum_requirements_list)\ndf_minimum_requirements.columns = [\"name\", \"os\", \"component\", \"value\"]\ndf_minimum_requirements.head()#\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d","606b186e":"#wide_format\u306b\u5909\u63db\ndf_minimum_requirements_wide = df_minimum_requirements.pivot(index=\"name\", columns=[\"os\", \"component\"])\ndf_minimum_requirements_wide = df_minimum_requirements_wide.droplevel(0, axis=1)\ndf_minimum_requirements_wide.head()","79930b70":"recommended_requirements_list = []\nfor i, row in tqdm(enumerate(df_merge[\"recommended_requirements\"])):\n    try:\n        os_kinds = list(row.keys())#['windows', 'linux','macOS']\n        for os in os_kinds:\n            comopnents = list(row[os].keys())\n            for comopnent in comopnents:\n                record = list([df_merge[\"name\"][i], os, comopnent, row[os][comopnent]])\n                recommended_requirements_list.append(record)\n    except AttributeError:\n        continue\n        \ndf_recommended_requirements = pd.DataFrame(recommended_requirements_list)\ndf_recommended_requirements.columns = [\"name\", \"os\", \"component\", \"value\"]\ndf_recommended_requirements.head()#\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d","51fb42bf":"#wide_format\u306b\u5909\u63db\ndf_recommended_requirements_wide = df_recommended_requirements.pivot(index=\"name\", columns=[\"os\", \"component\"])\ndf_recommended_requirements_wide = df_recommended_requirements_wide.droplevel(0, axis=1)\ndf_recommended_requirements_wide.head()","b4b8eddf":"#windows\u3067\u306e\u6700\u4f4e\u30b9\u30da\u30c3\u30af\u306bGPU\u3063\u307d\u3044\u7528\u8a9e\u304cdf_minimum_requirements\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u30b2\u30fc\u30e0\u306f\"GPU_must\"=1\u3068\u3059\u308b\nGPU_keyword = [\"NVIDIA\", \"GT\", \"GeForce\", \"GPU\", \"Geforce\", \"Nvidia\"]#GPU\u3063\u307d\u3044\u7528\u8a9e\ndf_merge[\"GPU_must\"] = 0\nfor i in tqdm(range(len(df_minimum_requirements_wide))):\n    value = str(df_minimum_requirements_wide.iloc[i][(\"windows\", \"graphics\")])#windows\u306egraphics\u9805\u76ee\n    game_title = df_minimum_requirements_wide.index[i]\n    if any(map(value.__contains__,GPU_keyword)):\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"GPU_must\"]=1","215ecf18":"#\u53ef\u8996\u5316\u3057\u3066\u6bd4\u8f03\u3057\u3066\u307f\u308b\ndf_cross = pd.crosstab(df_merge[\"GPU_must\"], df_merge[\"user_reviews\"],normalize='index')\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n\nsns.countplot(x=\"GPU_must\", data=df_merge, hue=\"user_reviews\", ax=axs[0])\ndf_cross.plot.bar(stacked=True, ax=axs[1])\n\n#\"GPU_must\"==1\u306e\u30b2\u30fc\u30e0\u306e\u65b9\u304c\u3001\u50c5\u304b\u3067\u3059\u304c\u9ad8\u8a55\u4fa1\u306e\u5272\u5408\u304c\u9ad8\u3044\u3067\u3059\u3002\n#\u2192GPU\u3092\u4f7f\u3046\u30b2\u30fc\u30e0\u306f\u958b\u767a\u4f1a\u793e\u304c\u529b\u3092\u5165\u308c\u3066\u4f5c\u6210\u3057\u305f\u30b2\u30fc\u30e0\u304c\u591a\u304f\u3001\u8a55\u4fa1\u304c\u9ad8\u304f\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\uff1f\uff1f","1392b078":"#windows_ver\u3067\u306e\u6700\u4f4e\u30e1\u30e2\u30ea\n#\u3053\u306e\u30b3\u30fc\u30c9\u306f\u304b\u306a\u308a\u529b\u6280\u306a\u306e\u3067\u3001\u3082\u3057\u30b9\u30de\u30fc\u30c8\u306b\u66f8\u304f\u65b9\u6cd5\u3092\u3054\u5b58\u77e5\u306e\u65b9\u304c\u3044\u305f\u3089\u3001\u6559\u3048\u3066\u304f\u3060\u3055\u3044\ndf_merge[\"win_memory_min\"] = 7777#\u6b20\u640d\u306e\u5834\u5408\nfor i in tqdm(range(len(df_minimum_requirements_wide))):\n    value = str(df_minimum_requirements_wide.iloc[i][(\"windows\", \"memory\")])#windows\u306egraphics\u9805\u76ee\n    game_title = df_minimum_requirements_wide.index[i]\n    if ' 4 GB RAM' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=4.0\n    elif ' 2 GB RAM' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=2.0\n    elif ' 1 GB RAM' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=1.0\n    elif ' 512 MB RAM' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=0.5\n    elif ' 8 GB RAM' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=8.0\n    elif '2 GB RAM' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=2.0\n    elif ' 6 GB RAM' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=6.0\n    elif ' 2 ' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=2.0\n    elif ' 256 MB RAM' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=0.25\n    elif ' 4 MB RAM' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=0.01\n    elif ' 2 MB RAM' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=0.01\n    elif ' 500 MB RAM' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=0.5\n    elif ' 25' in value:#25MB\u3068\u63a8\u6e2c\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=0.01\n    elif ' 1 MB RAM' in value:#25MB\u3068\u63a8\u6e2c\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=0.01\n    elif value == \"\":#\u7a7a\u6b04\u306e\u5834\u5408\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=9999\n    else:#\u6b20\u640d\u3057\u3066\u306f\u3044\u306a\u3044\u304c\u3001\u4e0a\u8a18\u4ee5\u5916\u306e\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u5834\u5408\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_memory_min\"]=8888\n    #\u3053\u308c\u4ee5\u4e0b\u306e\u30e6\u30cb\u30fc\u30af\u30d0\u30ea\u30e5\u30fc\u306f100\u4ef6\u4ee5\u4e0b\u306e\u305f\u3081\u3001\u30ab\u30a6\u30f3\u30c8\u3057\u306a\u3044\n    \n        ","602fc82f":"#\u53ef\u8996\u5316\u3057\u3066\u6bd4\u8f03\u3057\u3066\u307f\u308b\ndf_cross = pd.crosstab(df_merge[\"win_memory_min\"], df_merge[\"user_reviews\"],normalize='index')\nfig, axs = plt.subplots(1, 2, figsize=(15, 5))\n\n\nsns.countplot(x=\"win_memory_min\", data=df_merge, hue=\"user_reviews\", ax=axs[0])\naxs[0].tick_params(rotation=90)\ndf_cross.plot.bar(stacked=True, ax=axs[1])\n\n#\u82e5\u5e72\u306e\u5dee\u306f\u3042\u308b\u306e\u3067\u3001\u7279\u5fb4\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u53ef\u80fd\u6027\u306f\u3042\u308b\u3001\u3001\u3001\u3068\u601d\u3044\u307e\u3059(\u305d\u3053\u307e\u3067\u52b9\u304b\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3002\u3002\u3002)\n#\u305f\u3060\u3001\u7cfb\u7d71\u7684\u306a\u89e3\u91c8\u306f\u96e3\u3057\u305d\u3046\u3067\u3059\u3002\u3002\u3002","553e2103":"#windowsver\u306e\u6700\u4f4e\u5fc5\u8981\u306aPCU\u30b9\u30da\u30c3\u30af\n#\u3053\u306e\u30b3\u30fc\u30c9\u306f\u304b\u306a\u308a\u529b\u6280\u306a\u306e\u3067\u3001\u3082\u3057\u30b9\u30de\u30fc\u30c8\u306b\u66f8\u304f\u65b9\u6cd5\u3092\u3054\u5b58\u77e5\u306e\u65b9\u304c\u3044\u305f\u3089\u3001\u6559\u3048\u3066\u304f\u3060\u3055\u3044\ndf_merge[\"win_processor_min\"] = \"other\"\nfor i in tqdm(range(len(df_minimum_requirements_wide))):\n    value = str(df_minimum_requirements_wide.iloc[i][(\"windows\", \"processor\")])#windows\u306egraphics\u9805\u76ee\n    game_title = df_minimum_requirements_wide.index[i]\n    if 'i3' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_processor_min\"]=\"i3\"\n    elif 'i5' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_processor_min\"]='i5'\n    elif 'i7' in value:\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_processor_min\"]='i7'\n    elif value == \"\":#\u7a7a\u6b04\u306e\u5834\u5408\n        df_merge.loc[df_merge[df_merge[\"name\"] == game_title].index[0], \"win_processor_min\"]=\"empty\"","0710d43c":"#\u53ef\u8996\u5316\u3057\u3066\u6bd4\u8f03\u3057\u3066\u307f\u308b\ndf_cross = pd.crosstab(df_merge[\"win_processor_min\"], df_merge[\"user_reviews\"],normalize='index')\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n\nsns.countplot(x=\"win_processor_min\", data=df_merge, hue=\"user_reviews\", ax=axs[0])\naxs[0].tick_params(rotation=90)\ndf_cross.plot.bar(stacked=True, ax=axs[1])\n\n#i3~i7\u3092\u6bd4\u8f03\u3059\u308b\u3068\u3001\u9ad8\u8a55\u4fa1\u306e\u5272\u5408\u304c\u4e0b\u304c\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n#\u89e3\u91c8\u306f\u96e3\u3057\u305d\u3046\u3067\u3059\u304c\u3001\u3042\u3048\u3066\u89e3\u91c8\u3059\u308b\u3068\u3001\u305d\u3082\u305d\u3082minimum_spec\u3068\u3057\u3066i7\u3084i5\u3092\u8981\u6c42\u3059\u308b\u30b2\u30fc\u30e0\u306f\u30de\u30cb\u30a2\u5411\u3051\u306e\u30b2\u30fc\u30e0\u304c\u591a\u304f\u3001\u8f9b\u53e3\u306b\u8a55\u4fa1\u3055\u308c\u3084\u3059\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n#(i5\u3084i7\u3092must\u3068\u3059\u308b\u30b2\u30fc\u30e0\u304c\u5c11\u306a\u3044\u306e\u3067\u3001pred\u3078\u306e\u8ca2\u732e\u306f\u4f4e\u305d\u3046\u3067\u3059\u304c\u3002\u3002\u3002)","27f65424":"df_merge","93697125":"df_feat = df_merge[['index',\"name\", 'GPU_must', \"win_memory_min\", \"win_processor_min\", \"unix_time\", \"year\", \"month\"]]\n#\u4eca\u5f8c\u306e\u518d\u5229\u7528\u306e\u305f\u3081\u306b\u3001\u5410\u304d\u51fa\u3057\u3066\u304a\u304d\u307e\u3059\u3002\ndf_feat.to_csv(\"release_date_minimum_requirements_feat.csv\", index=False)\ndf_feat.head()","25086e37":"# minimum_requirements\u3092\u7528\u3044\u305f\u7279\u5fb4\u91cf\u306e\u4f5c\u6210","a069ca1d":"### \u3010\u7279\u5fb4\u91cf\u3011\u6700\u4f4e\u5fc5\u8981\u306aCPU\u30b9\u30da\u30c3\u30af\n- i3, i5, i7\u304c\u5fc5\u8981\u3067\u3042\u308c\u3070\u6bd4\u8f03\u7684\u9ad8\u30b9\u30da\u30c3\u30af\u304c\u5fc5\u8981\u306a\u30b2\u30fc\u30e0\u3068\u8003\u3048\u3089\u308c\u308b\uff1f","f786336b":"## recommended_requirements\u306b\u3064\u3044\u3066\u3001\u5168\u3066\u306e\u30ad\u30fc\u3092\u53d6\u5f97\u3059\u308b\n- \u4eca\u56de\u306frecommended_requirements\u3092\u7528\u3044\u305f\u7279\u5fb4\u91cf\u4f5c\u6210\u306f\u5b9f\u65bd\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001minimum_requirements\u3068\u540c\u69d8\u306b\u5bfe\u5fdc\u53ef\u80fd\u3068\u601d\u3044\u307e\u3059","c3cfcf47":"### \u3010\u7279\u5fb4\u91cf\u3011\u6700\u4f4e\u5fc5\u8981\u306a\u30e1\u30e2\u30ea\u5bb9\u91cf","e02110bf":"### \u3010\u7279\u5fb4\u91cf\u3011GPU\u304cmust\u304b\u5426\u304b\n- GPU\u304c\u5fc5\u8981\u306a\u30b2\u30fc\u30e0\u306f\u30b2\u30fc\u30de\u30fc\u5411\u3051\u306e\u30b2\u30fc\u30e0\u304c\u591a\u3044\u3068\u8003\u3048\u3089\u308c\u3001\u8a55\u4fa1\u306b\u5f71\u97ff\u3059\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u307e\u3057\u305f\u3002","ca021ef8":"## minimum_requirements\u306b\u3064\u3044\u3066\u3001\u5168\u3066\u306e\u30ad\u30fc\u3092\u53d6\u5f97\u3059\u308b","72528886":"# release_date & minimum_requirements\n\u3053\u306eNotebook\u3067\u306f**\u300crelease_date & minimum_requirements\u300d**\u306b\u6ce8\u76ee\u3057\u3066\u3001 EDA\u3068\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3092\u5b9f\u65bd\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\uff08bug\u306a\u3069\u3042\u308c\u3070\u3001\u305c\u3072\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\uff09","01e5029a":"# release_date\u3092\u7528\u3044\u305f\u7279\u5fb4\u91cf\u306e\u4f5c\u6210"}}