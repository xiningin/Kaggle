{"cell_type":{"09f29dff":"code","8e48c101":"code","b6a0af23":"code","8e394466":"code","0f37afb5":"code","24a4c120":"code","4976c7a1":"code","a45f4378":"code","40524810":"code","577226bd":"code","4803b12d":"code","9bc4d1ad":"code","81481af0":"code","60f41419":"code","26ebb70b":"code","186b4cb5":"code","6f1a7f27":"code","b91ff832":"code","df599f78":"code","42ebc8e2":"code","9759d9c9":"code","94dbe651":"code","32374e14":"code","4e775ff0":"code","2182dad4":"code","de670ce1":"code","e8c598a3":"code","7216aeb8":"code","95c8e1eb":"code","6716d130":"code","1a64d34c":"code","8f536f6a":"code","c45dfc5c":"code","c83b8448":"code","54777491":"code","6bff27d9":"code","0ae962d6":"code","184bc9cc":"code","ea6a0c25":"code","3e6dddb2":"code","9ac6257e":"code","9b3a9647":"code","5623cd47":"code","0c3abba5":"code","4ae0a997":"code","10fd5297":"code","8b61e256":"code","60cb76ad":"code","26470d85":"code","1e019dce":"code","3639d2a6":"code","c819946f":"code","f7163ee3":"code","2aaaefc8":"code","a55c9157":"code","df322430":"code","2db46d85":"markdown","7d961f4e":"markdown","1a4eec79":"markdown","0418e861":"markdown","8f1b8152":"markdown","27d478d5":"markdown","af89f89d":"markdown","356c8b9b":"markdown","237c255d":"markdown","b7fbdde4":"markdown","c155705d":"markdown","140f1d6f":"markdown","4d5a301b":"markdown","2ebd0a75":"markdown","39e777ce":"markdown","5b7330a1":"markdown","99ac1491":"markdown","616e84c9":"markdown","1dc9be73":"markdown","5604140b":"markdown","d723950d":"markdown","5b5681ae":"markdown","840456e8":"markdown","2bb861da":"markdown","7a386b04":"markdown","0e510843":"markdown","ebe47fdf":"markdown","fdf5965e":"markdown"},"source":{"09f29dff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8e48c101":"data=pd.read_csv('..\/input\/ccdata\/CC GENERAL.csv')","b6a0af23":"data.info()\ndata.head()","8e394466":"data.columns","0f37afb5":"data.corr()","24a4c120":"##corraletion map\nf,ax =plt.subplots(figsize=(10,10))\nsns.heatmap(data.corr(), annot=True,linewidths=0.5, fmt='.2f', ax=ax)\nplt.show()","4976c7a1":"data.plot(kind=\"line\",x='ONEOFF_PURCHASES', y='CREDIT_LIMIT',linewidth=1,color='g',grid=True,alpha=0.6)\nplt.xlabel('oneoff_purchases')\nplt.ylabel('limits')\nplt.title('line plot')\nplt.show()","a45f4378":"data.PURCHASES.plot(kind='line', x='PURCHASES',color='r',linewidth=1.0, grid=True, alpha=1.0,linestyle = ':')\ndata.CASH_ADVANCE.plot(kind='line', x='CREDIT_LIMIT',color='b',linewidth=1, grid=True,alpha=0.7,linestyle = ':')\nplt.xlabel('PURCHASES')\nplt.ylabel('CREDIT_LIMIT')\nplt.show()","40524810":"data.CREDIT_LIMIT.plot(kind='hist', bins=50,figsize=(12,12))\nplt.show()","577226bd":"data.plot(kind='scatter',x='BALANCE',y='PURCHASES_FREQUENCY', alpha=0.7,grid=True, color='r')\nplt.xlabel('BALANCE')\nplt.ylabel('PURCHASES')\nplt.title('scatter plot')\nplt.show()","4803b12d":"plt.clf()","9bc4d1ad":"dictionary={'turkey':'istanbul','england':'london','germany':'berlin'}\nprint(dictionary.keys())\nprint(dictionary.values())","81481af0":"dictionary['turkey']=\"ankara\"\nprint(dictionary)\ndictionary['italy']=\"rome\"\nprint(dictionary)\ndel dictionary['turkey']\nprint(dictionary)\nprint('italy' in dictionary)\nprint('russia'in dictionary)\ndictionary.clear()\nprint(dictionary)","60f41419":"series=data['BALANCE']\nprint(type(series))\ndata_frame=data[['BALANCE']]\nprint(type(data_frame))","26ebb70b":"print(5<10)\nprint(3!=4)\n\nprint(True and False)\nprint(True or False)","186b4cb5":"x=data['BALANCE']<1000\ndata[x]","6f1a7f27":"data[np.logical_and(data['BALANCE']>4000,data['PURCHASES']<200)]","b91ff832":"data[(data['PURCHASES']<200) & (data['BALANCE']>4000)]","df599f78":"i=0\nwhile i!=10:\n    print('i is:',i)\n    i+=2\nprint(i,'is eqaul to 10')","42ebc8e2":"lis=[1,2,3,4,5]\nfor i in lis:\n    print('i is:',i)\nprint('')\n\nfor index , value in enumerate(lis):\n    print(index,\":\", value)\n    print('')\n\ndictionary={'turkey':'istanbul', 'germany':'berlin'}\nfor key,value in dictionary.items():\n    print(key,\":\",value)\nprint('')","9759d9c9":"x=5\ndef f():\n    y= x+2\n    return y\nprint(x)\nprint(f())","94dbe651":"import builtins\ndir(builtins)","32374e14":"x=10\ndef add():\n    def drive():\n        x=12\n        y=4\n        z=x\/y\n        return z\n    return drive()+x\nprint(add())","4e775ff0":"square= lambda x: x**2\ntot= lambda x,y,z: x+y+z\nprint(square(7))\nprint(tot(3,5,7))","2182dad4":"number_list=[1,2,3]\ny=map(lambda x: x**2,number_list)\nprint(list(y))","de670ce1":"city=\"istanbul\"\nit=iter(city)\nprint(next(it))\nprint(*it)","e8c598a3":"#zip example\nlist1=[1,12,3,4]\nlist2=[5,6,7,8]\nz=zip(list1,list2)\nprint(z)\nz_list=list(z)\nprint(z_list)","7216aeb8":"#unzip\nun_zip=zip(*z_list)\nun_list1,un_list2=list(un_zip)\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","95c8e1eb":"num1=[2,4,6]\nnum2=[i**2 if i==4 else i+2 if i<4 else i-2 for i in num1]\n\nprint(num2)","6716d130":"threshold=sum(data.BALANCE)\/len(data.BALANCE)\ndata[\"balance_amount\"]=[\"high\"if i>threshold else \"low\" for i in data.BALANCE]\ndata.loc[:20,[\"balance_amount\",\"BALANCE\"]]","1a64d34c":"print(data['CREDIT_LIMIT'].value_counts(dropna= False))","8f536f6a":"data.describe()","c45dfc5c":"data.boxplot(column='BALANCE', by='BALANCE_FREQUENCY')","c83b8448":"data_new=data.head()\ndata_new","54777491":"melted=pd.melt(frame=data_new,id_vars=\"CUST_ID\", value_vars=['CREDIT_LIMIT','PAYMENTS'])\nmelted","6bff27d9":"melted.pivot(index = 'CUST_ID', columns = 'variable',values='value')","0ae962d6":"data1=data.head()\ndata2=data.tail()\nconc_data_row=pd.concat([data1,data2],axis=0, ignore_index=True)\nconc_data_row","184bc9cc":"data[\"MINIMUM_PAYMENTS\"].value_counts(dropna=False)","ea6a0c25":"data1=data\ndata1[\"MINIMUM_PAYMENTS\"].dropna(inplace=True)","3e6dddb2":"assert data[\"MINIMUM_PAYMENTS\"].notnull().all()","9ac6257e":"data[\"MINIMUM_PAYMENTS\"].fillna('empty',inplace = True)","9b3a9647":"assert  data['MINIMUM_PAYMENTS'].notnull().all()","5623cd47":"import warnings\nwarnings.filterwarnings(\"ignore\")\ndata2=data.head()\ndate_list=[\"2020-01-10\",\"2020-02-10\",\"2020-03-10\",\"2020-03-15\",\"2020-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\ndata2= data2.set_index(\"date\")\ndata2 ","0c3abba5":"print(data2.loc[\"2020-03-10\":\"2020-03-16\"])","4ae0a997":"data2.resample(\"M\").mean()","10fd5297":"data2.resample(\"M\").first().interpolate(\"linear\")","8b61e256":"data[\"BALANCE\"][1]\n#OR \n#data.BALANCE[1]","60cb76ad":"data[[\"BALANCE\",\"BALANCE_FREQUENCY\"]]","26470d85":"print(type(data[\"BALANCE\"]))     # series\nprint(type(data[[\"BALANCE\"]]))   # data frames","1e019dce":"data.loc[1:10,\"BALANCE\":\"BALANCE_FREQUENCY\"]","3639d2a6":"data.loc[10:1:-1,\"BALANCE\":\"BALANCE_FREQUENCY\"]","c819946f":"data=pd.read_csv('..\/input\/ccdata\/CC GENERAL.csv')\ndata.loc[1:10,\"CREDIT_LIMIT\":]","f7163ee3":"def div(n):\n    return n\/2\ndata.BALANCE.apply(div)","2aaaefc8":"print(data.index.name)\ndata.index.name=\"index_name\"\ndata.head()","a55c9157":"data3=data.copy()\ndata3.index=range(100,9050,1)\ndata3.head()","df322430":"data1=data.set_index([\"BALANCE\",\"BALANCE_FREQUENCY\"])\ndata1.head(10)","2db46d85":"<a id=15><\/a>\n## Pivoting data","7d961f4e":"<a id=21><\/a>\n### TRANSFROMING DATA ","1a4eec79":"<a id=7><\/a>\n## User Defined Function and Scope","0418e861":"<a id=18><\/a>\n## INDEXING PANDAS TIME SERIES","8f1b8152":"\n### HIERARCHICAL INDEXING","27d478d5":"<a id=12><\/a>\n## LIST COMPREHENS\u0130ON","af89f89d":"<a id=14><\/a>\n## Tidy data","356c8b9b":"<a id=9><\/a>\n## LAMBDA FUNCTION","237c255d":"<a id=6><\/a>\n## Loops examples","b7fbdde4":"The data's contents as follow:\n\n*  CUSTID : Identification of Credit Card holder (Categorical)  \n*  BALANCE : Balance amount left in their account to make purchases ( \n*  BALANCEFREQUENCY : How frequently the Balance is updated, score         between 0 and 1 (1 = frequently updated, 0 = not frequently updated) \n*  PURCHASES : Amount of purchases made from account \n*  ONEOFFPURCHASES : Maximum purchase amount done in one-go \n*  INSTALLMENTSPURCHASES : Amount of purchase done in installment \n*  CASHADVANCE : Cash in advance given by the user \n*  PURCHASESFREQUENCY : How frequently the Purchases are being made,score between 0 and 1 (1 = frequently purchased, 0 = not frequently purchased) \n*  ONEOFFPURCHASESFREQUENCY : How frequently Purchases are happening in one-go (1 = frequently purchased, 0 = not frequently purchased) \n*  PURCHASESINSTALLMENTSFREQUENCY : How frequently purchases in installments are being done (1 = frequently done, 0 = not frequently done) \n*  CASHADVANCEFREQUENCY : How frequently the cash in advance being paid \n*  CASHADVANCETRX : Number of Transactions made with \"Cash in Advanced\" \n*  PURCHASESTRX : Numbe of purchase transactions made \n*  CREDITLIMIT : Limit of Credit Card for user PAYMENTS : Amount of Payment done by user \n*  MINIMUM_PAYMENTS : Minimum amount of payments made by user PRCFULLPAYMENT : Percent of full payment paid by user \n*  TENURE : Tenure of credit card service for user","c155705d":"<a id=2><\/a>\n# Matplotlib examples","140f1d6f":"<a id=22><\/a>\n### INDEX OBJECTS AND LABELED DATA","4d5a301b":"<a id=8><\/a>\n## Nested Function","2ebd0a75":"<a id=19><\/a>\n## MANIPULATING DATA FRAMES WITH PANDAS","39e777ce":"<a id=5><\/a>\n## Logic, control flow and filtering examples","5b7330a1":"<a id=13><\/a>\n## EXPLORATORY DATA ANALYSIS\n","99ac1491":"<a id=20><\/a>\n### SLICING DATA FRAME","616e84c9":"<a id=4><\/a>\n# Pandas Examples","1dc9be73":"<a id=17><\/a>\n## MISSING DATA and TESTING WITH ASSERT","5604140b":"PYTHON DATA SCIENCE TOOLBOX","d723950d":"# Introduction\n\nThis notebook has been prepared as homework for udemy course that's data science and python.\n\n<font color='blue'>\n    \nContent:\n   \n*    [Load and Check Data](#1)\n*      [Matplotlib examples](#2)\n*      [Dictionary examples](#3)\n*      [Pandas Examples](#4)\n*      [Logic, control flow and filtering examples](#5)\n*      [Loops examples](#6)\n*      [User Defined Function](#7)\n*      [Nested Function](#8)\n*      [LAMBDA FUNCTION](#9)\n*      [ANONYMOUS FUNCT\u0130ON](#10)\n*      [ITERATORS](#11)\n*      [LIST COMPREHENS\u0130ON](#12)\n*      [EXPLORATORY DATA ANALYSIS](#13)\n*      [Tidy data](#14)\n*      [Pivoting data](#15)\n*      [CONCATENATING DATA](#16)\n*      [MISSING DATA and TESTING WITH ASSERT](#17)\n*      [INDEXING PANDAS TIME SERIES](#18)\n*      [MANIPULATING DATA FRAMES WITH PANDAS](#19)\n*      [SLICING DATA FRAME](#20)\n*      [TRANSFROMING DATA](#21)\n*      [INDEX OBJECTS AND LABELED DATA](#22)","5b5681ae":"<a id=10><\/a>\n## ANONYMOUS FUNCT\u0130ON","840456e8":"<a id=11><\/a>\n## ITERATORS","2bb861da":"<a id =1><\/a>\n# Load and Check Data","7a386b04":"<a id=3><\/a>\n# Dictionary examples\n","0e510843":"# Cleaning Data","ebe47fdf":"filering examples","fdf5965e":"<a id=16><\/a>\n## CONCATENATING DATA"}}