{"cell_type":{"59b098d9":"code","5612a0c9":"code","3e20e6e7":"code","75119d06":"code","f27985aa":"code","12b87232":"code","c3820f93":"code","b3551a33":"code","6eb64203":"code","719f9228":"code","0c81ed44":"code","46393add":"code","f5a4d460":"code","4ed9547e":"code","76d50b0f":"code","ad25b313":"code","7e25ab82":"code","8251836a":"markdown","17c5e168":"markdown","729e4a61":"markdown","4a85e364":"markdown","7740d19d":"markdown","9726c615":"markdown","55bbdb4a":"markdown","0b0acd0b":"markdown","98486bb8":"markdown","32fd2f6a":"markdown","ea3de66b":"markdown","b73ab44d":"markdown","b66cb595":"markdown","e377cdbc":"markdown","bbe8693f":"markdown","9199954e":"markdown","bd663376":"markdown"},"source":{"59b098d9":"import pandas as pd\nimport numpy as np\n%pylab inline","5612a0c9":"def defdf():\n    df = pd.DataFrame({'int_col' : [1, 2, 6, 8, -1], \n                   'float_col' : [0.1, 0.2, 0.2, 10.1, None], \n                   'str_col' : ['a', 'b', None, 'c', 'a']})\n    return df\n\ndf = defdf()\ndf","3e20e6e7":"df2 = pd.DataFrame({'str_col_2' : ['a','b'], 'int_col_2' : [1, 2]})\ndf2","75119d06":"plot_df = pd.DataFrame(np.random.randn(1000,2),columns=['x','y'])\nplot_df['y'] = plot_df['y'].map(lambda x : x + 1)\nplot_df.head()","f27985aa":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n","12b87232":"# redefining the example objects\n\n# series\npopulation = pd.Series({'Germany': 81.3, 'Belgium': 11.3, 'France': 64.3, \n                        'United Kingdom': 64.9, 'Netherlands': 16.9})\n\n# dataframe\ndata = {'country': ['Belgium', 'France', 'Germany', 'Netherlands', 'United Kingdom'],\n        'population': [11.3, 64.3, 81.3, 16.9, 64.9],\n        'area': [30510, 671308, 357050, 41526, 244820],\n        'capital': ['Brussels', 'Paris', 'Berlin', 'Amsterdam', 'London']}\ncountries = pd.DataFrame(data)\ncountries","c3820f93":"#Setting the index to the country names:\n\n\ncountries = countries.set_index('country')\ncountries","b3551a33":"countries['area']","6eb64203":"\ncountries[['area', 'population']]","719f9228":"countries['France':'Netherlands']","0c81ed44":"countries.loc['Germany', 'area']","46393add":"countries.loc['France':'Germany', ['area', 'population']]","f5a4d460":"\ncountries.iloc[0:2,1:3]","4ed9547e":"\ncountries2 = countries.copy()\ncountries2.loc['Belgium':'Germany', 'population'] = 10","76d50b0f":"countries2","ad25b313":"countries['area'] > 100000","7e25ab82":"\ncountries[countries['area'] > 100000]","8251836a":"## New Columns = f(Existing Columns)\n\nGenerating new columns from existing columns in a data frame is an integral part of the data mungling workflow. \n\n### multiple columns as a function of a single column\n\n * Use map in combination with zip to construct two new columns being the square and third power of the integer column. [Help](http:\/\/stackoverflow.com\/questions\/12356501\/pandas-create-two-new-columns-in-a-dataframe-with-values-calculated-from-a-pre)","17c5e168":"## Merge and Join\n\nPandas supports database-like joins which makes it easy to link data frames.\n\n * Perform inner, outer, left and right joins of the dataframe with the second dataframe defined below","729e4a61":"## Plots\n\nPandas is equiped with straightforward wrappers for quick plotting of data\n\n * Use plot to visualize the values columns of the dataframe defined below\n * Use hist to visualize the distribution of the data in the form of a histogram","4a85e364":"### multiple columns as a function of multiple columns\n\n * Use apply and a function that returns a Series to construct two new columns being the square root of the float and integer columns. [Help](http:\/\/stackoverflow.com\/questions\/10751127\/returning-multiple-values-from-pandas-apply-on-a-dataframe)","7740d19d":"### Fill missing values\n * Use fillna to fill missing data. Fill float column with median of column and string column with a character of your choosing. Use inplace to alter the value in the original dataframe.","9726c615":"## Basic stats\n\n### describe\n\n * Use describe to gather information on the distribution of the float and integer columns.\n * Use boxplot for a visual representation of the same information","55bbdb4a":"# Data mungling with pandas\n\n_Adapted from original materials by [manishamde](https:\/\/github.com\/manishamde)._\n\nData munging or data wrangling is loosely the process of manually converting or mapping data from one \n\"raw\" form into another format that allows for more convenient consumption of the data with the help of \nsemi-automated tools.\n\nData munging is basically the hip term for cleaning up a messy data set.\n\nData munging involves common operations such as: \n - Indexing\n - Renaming\n - Handling missing values\n - map(), apply(), applymap()\n - New Columns = f(Existing Columns)\n - Basic stats\n - Merge, join\n - Plots","0b0acd0b":"### single column as a function of multiple columns\n\n * Use apply to construct a new column sum of the float and integer columns. [Help](http:\/\/stackoverflow.com\/questions\/13331698\/how-to-apply-a-function-to-two-columns-of-pandas-dataframe?lq=1)\n * Use apply to construct a new column composed of the concatenation of the string column and the integer column cast to string","98486bb8":"## Indexing\n\n### Selecting a subset of columns\n * Select only the float and string columns of the dataframe","32fd2f6a":"We'll try the above operations on a very simple dataframe","ea3de66b":"## Vectorized operations: map, apply\n### map\nThe map operation maps the values of a series iterating over each element\n * Use map to generate a series that equals each element of integer column squared","b73ab44d":" * Use apply on columns to compute the square root of the float and integer columns\n * Use apply on rows to compute the cumulative sum by rows of the elements of the float and integer columns","b66cb595":"## Handling missing values\n\n### Drop missing values\n\n * Use dropna to drop all rows with missing data (NaN). From now on, perform the rest of the exercises on this modified dataframe.","e377cdbc":"### applymap\nThe applymap operation applies a function to a dataframe that is intended to operate elementwise\n\n * Use applymap to transform the dataframe in the following manner: duplicate elements of type string ('z' -> 'zz') and compute the exponential of numerical elements. Hint: define first the function fn that needs to be applied.","bbe8693f":"### Conditional indexing\n * Using boolean indexing, select the rows of the dataframe for which float column is larger than 0.15\n * Select the rows for which float column is larger than 0.1 and integer column is larger than 2. Change 'and' by 'or' \n * Select the rows for which string column is not 'a'","9199954e":"## Renaming\n\n * Use the rename method to rename all three columns\n * Set inplace=True for the changes to affect the existing dataframe","bd663376":"### apply\nThe apply operation applies a function along any axis of the dataframe. \n - axis=0: apply function to each column\n - axis=1: apply function to each row\nDepending on the return type of the function passed to apply(), the result will either be of lower dimension or the same dimension.\n"}}