{"cell_type":{"3390c768":"code","6a58719f":"code","b2e98f9a":"code","151a01a2":"code","0434b30a":"code","4f5bf9c2":"code","b675cf2e":"code","39a878fd":"code","4906a5bb":"code","0809fafb":"code","b0306103":"code","a189be3d":"code","b4d7fb39":"code","afebacf0":"code","8757b069":"code","108a2bf9":"code","12974ef1":"code","c3b0b593":"code","ca3e6418":"code","f040d311":"code","3b2a5fe9":"code","64d03ebb":"code","00e85d64":"code","971f75ef":"code","89a520a0":"markdown"},"source":{"3390c768":"from fastai.vision.all import *\nimport sys\nimport numpy as np\n","6a58719f":"ROOT = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/'\n#IMAGE_OUTPUT = '..\/input\/rsnamiccai-competition-2021-png-strips\/'\nIMAGE_OUTPUT = '.'","b2e98f9a":"import pandas as pd\nimport os\nimport random\ndf = pd.read_csv(os.path.join(ROOT, 'train_labels.csv'), header=0, names=['id','value'], dtype=object)\ndf = df[~df.id.isin([\"00109\", \"00123\", \"00709\"])]","151a01a2":"df.head()","0434b30a":"#https:\/\/stackoverflow.com\/a\/4836734\/8245487\ndef natural_sort(l): \n    convert = lambda text: int(text) if text.isdigit() else text.lower()\n    alphanum_key = lambda key: [convert(c) for c in re.split('([0-9]+)', key)]\n    return sorted(l, key=alphanum_key)","4f5bf9c2":"np.maximum((1,5),(3,4))","b675cf2e":"df_test = pd.DataFrame(columns=['id', 'value'])\ndf_test.id = os.listdir(os.path.join(ROOT, 'test'))","39a878fd":"import os\nimport pydicom\nimport pandas as pd\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nfrom tqdm import tqdm\nimport binascii\nfrom PIL import Image\nfrom multiprocessing import Pool\n\n\nif not os.path.exists('.\/train'):\n    os.makedirs('.\/train')\n    \n\nif not os.path.exists('.\/test'):\n    os.makedirs('.\/test')\n\n\ndef get_dicom_files(dataset='train'):\n    root = f\"{ROOT}\/{dataset}\"\n    \n    ids = list(df.id) if dataset=='train' else list(df_test.id)\n    \n    with Pool(10) as p:\n        p.starmap(get_dicom_files_helper, [(dataset, root, cur_id) for cur_id in ids])\n    \n\ndef get_dicom_files_helper(dataset, root, cur_id):\n    final_image = np.array([])\n    for scan_type in ['FLAIR', 'T1w', 'T1wCE', 'T2w']:\n        cur_dir = os.path.join(root, cur_id, scan_type)\n        dicoms = natural_sort(os.listdir(cur_dir))\n        median = len(dicoms)\/\/2\n        modulo = max(len(dicoms)\/\/20, 1)\n        dicoms = [dicom for i, dicom in enumerate(dicoms) if i % modulo == 0]\n        for dicom in dicoms:\n            filepath = os.path.join(cur_dir, dicom)\n            data = process_dicom(filepath)\n            if len(final_image) != 0:\n                (data_rows, data_cols) = data.shape\n                (final_rows, final_cols) = final_image.shape\n                if final_cols != data_cols:\n                    if data_cols < final_cols:\n                        data = np.hstack((data, np.zeros((data_rows, final_cols - data_cols))))\n                    else:\n                        final_image = np.hstack((final_image, np.zeros((final_rows, data_cols - final_cols))))\n            final_image = np.concatenate([final_image,data]) if len(final_image) != 0 else data\n            data = None\n\n    outpath = os.path.join(f'.\/{dataset}',f'{cur_id}.png')\n    write_pixels(final_image, outpath)\n    final_image = None\n    print('Processed {}'.format(cur_id))\n        \n\ndef process_dicom(path):\n    dicom = pydicom.read_file(path)\n    data = apply_voi_lut(dicom.pixel_array, dicom)\n    if dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    \n    return data\n\n    \ndef write_pixels(data, outpath):\n    height = len(data)\n    width = len(data[0])\n    pixels_out = []\n    for row in data:\n        pixels_out.extend(row)\n    assert(len(pixels_out) == height * width)\n    \n    image_out = Image.new('L', (width, height))\n    image_out.putdata(pixels_out)\n    image_out.save(outpath)\n","4906a5bb":"get_dicom_files('train')\nget_dicom_files('test')","0809fafb":"for id_num in df.id:\n    full_path = os.path.join(IMAGE_OUTPUT, 'train\/{}.png'.format(id_num))\n    df.loc[df.id == id_num, 'file'] = full_path\n    ","b0306103":"df","a189be3d":"dls = ImageDataLoaders.from_df(df, item_tfms=Resize((40000,1024),method='pad',pad_mode=PadMode.Zeros), bs=2, label_col =1, fn_col=2, valid_pct=0.05)","b4d7fb39":"dls.show_batch()","afebacf0":"import torch \nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\nclass Net(nn.Module):\n    def __init__(self, pretrained=False):\n        super().__init__()\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        #self.conv2 = nn.Conv2d(6, 6, 5)\n        self.innerConvLayers = nn.ModuleList()\n        for i in range(15):\n            self.innerConvLayers.append(nn.Conv2d(6, 6, 5))\n        self.fc1 = nn.Linear(6 * 5 * 5, 120)\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, 10)\n        self.dropout = nn.Dropout(0.2)\n\n    def forward(self, x):\n        x = self.pool(F.leaky_relu_(self.conv1(x)))\n        for layer in self.innerConvLayers:\n            x = self.dropout(self.pool(F.leaky_relu_(layer(x))))\n        x = torch.flatten(x, 1) # flatten all dimensions except batch\n        x = F.leaky_relu_(self.fc1(x))\n        x = F.leaky_relu_(self.fc2(x))\n        x = F.leaky_relu_(self.fc3(x))\n        return x","8757b069":"print(Net())","108a2bf9":"\n\nlearn = cnn_learner(dls, Net, metrics=[error_rate, accuracy], model_dir=\"\/tmp\/model\/\").to_fp16()","12974ef1":"learn.lr_find()","c3b0b593":"learn.fit_one_cycle(3, lr_max=1e-2)","ca3e6418":"learn.show_results()","f040d311":"for id_num in df_test.id:\n    full_path = os.path.join(IMAGE_OUTPUT, 'test\/{}.png'.format(id_num))\n    prediction = learn.predict(full_path)\n    print(prediction)\n    probability = prediction[2][1].item()\n    print(probability)\n    df_test.loc[df_test.id==id_num, 'value'] = probability","3b2a5fe9":"df_test.head()","64d03ebb":"df_test.value.min()","00e85d64":"df_test.value.max()","971f75ef":"df_test.rename(columns={'id':'BraTS21ID','value':'MGMT_value'}).to_csv('submission.csv', index=False)","89a520a0":"Use the cell below to process the DICOMs into PNG animation strips"}}