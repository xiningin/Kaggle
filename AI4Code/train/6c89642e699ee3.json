{"cell_type":{"60edf3ca":"code","13ef7ab4":"code","5d7c16d9":"code","f3d9f323":"code","309b6c88":"code","52118f96":"code","f2c4e031":"code","51e09171":"code","4913b651":"code","135485d9":"code","85863fb9":"code","19f45973":"code","04315d00":"code","340c746b":"code","1611dc79":"code","3df762b3":"code","6c007224":"code","46de2ffd":"code","a857a0b7":"code","4f6e456a":"code","779ccc48":"code","56748c43":"code","bb2ff453":"code","2dfc3560":"code","7dd92988":"code","c2266050":"code","24a63dff":"code","71c9346f":"code","136d9b1f":"code","95ad9091":"code","004500f3":"code","784e396f":"code","8494f5d5":"code","0b05731a":"code","92640cc4":"code","80615152":"code","87ba4bd0":"code","dd64b498":"code","3ace2c2a":"code","375632f1":"code","3a89ec8d":"code","1c9a2b8d":"code","d5bff28b":"code","6ca832ae":"code","cfc6b1dc":"code","9d29ea41":"code","77fffea9":"code","92dd4337":"code","967b9bc8":"code","97c71228":"code","ccdba341":"code","ca8a0abb":"code","21e3d5a5":"code","dab7ef92":"code","0572c818":"code","05210866":"code","da1dd334":"code","57180365":"code","e29edf8e":"code","ebd6e2aa":"code","f8328a6b":"code","d81fa34a":"markdown","7279b542":"markdown","a43f048a":"markdown","f6af8612":"markdown","c1698ce4":"markdown","ebbca6fa":"markdown","e8a25769":"markdown","697681c1":"markdown","a3c5c5a1":"markdown","e83c7484":"markdown","3f423b60":"markdown","2c75da5b":"markdown","79e08ca3":"markdown","8f807e42":"markdown","0d7eea6c":"markdown","fbf09f9a":"markdown","e0a0c6c9":"markdown","6d519150":"markdown","1a88bd90":"markdown","9cb5b6bc":"markdown","00cddced":"markdown","a51c39a7":"markdown","a7cae557":"markdown","d42825f4":"markdown","cc43eb80":"markdown","ed747d80":"markdown","e38ceca5":"markdown","5dc79d18":"markdown","5c569b56":"markdown","06e81be5":"markdown","cbd9b475":"markdown","c2134cdf":"markdown","46e9345a":"markdown","3f51610c":"markdown","53755192":"markdown","95589840":"markdown","0846bb3f":"markdown","94e6d9dc":"markdown","18904f7a":"markdown","7e14581c":"markdown"},"source":{"60edf3ca":"import os\nimport re\nimport json\nimport numpy as np \nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches","13ef7ab4":"single_song_path = '..\/input\/singlesong\/single_song.json'\nwith open(single_song_path, 'rb') as f:\n    song_json = json.load(f)\n# Uncomment this     \n# print(song_json)","5d7c16d9":"# print(json.dumps(None, indent=4, sort_keys=True))","f3d9f323":"dictionary = {'dog': 'woof',\n              'cat': 'meow',\n              'lazer': 'zapppp',\n              'list_of_things': ['a', 3, dict()],\n              'numbers': 10012}\ndictionary","309b6c88":"dictionary.keys()","52118f96":"dictionary['dog']","f2c4e031":"dictionary['list_of_things']","51e09171":"list_of_things = dictionary['list_of_things']\nlist_of_things[0]","4913b651":"dictionary['list_of_things'][0]","135485d9":"song_json.keys()","85863fb9":"song_json['meta']","19f45973":"song_json['segments']","04315d00":"# Access the first element (dictionary) in the list\nfirst_segment = song_json['segments'][0]\nfirst_segment","340c746b":"#\u00a0Then access the timbre values\nfirst_segment['timbre']","1611dc79":"# song_timbres = []\n# for segment in song_json[None]:\n#     song_timbres.append(segment[None])\n# song_timbres","3df762b3":"training_data_path = '..\/input\/musicdata\/'\nos.listdir(training_data_path)","6c007224":"with open(os.path.join(training_data_path,'hiphop.json'), 'rb') as f:\n    hiphop = json.load(f)","46de2ffd":"# Each key is a unique identifer for a song known as a URI\nhiphop.keys()","a857a0b7":"hiphop['spotify:track:3MnwLa9KRUiv2gNFtWPvib'].keys()","4f6e456a":"hiphop['spotify:track:3MnwLa9KRUiv2gNFtWPvib']['artist']","779ccc48":"hiphop['spotify:track:3MnwLa9KRUiv2gNFtWPvib']['song']","56748c43":"hiphop['spotify:track:3MnwLa9KRUiv2gNFtWPvib']['meta'].keys()","bb2ff453":"hiphop['spotify:track:3MnwLa9KRUiv2gNFtWPvib']['meta']['segments'][0]","2dfc3560":"hiphop['spotify:track:3MnwLa9KRUiv2gNFtWPvib']['meta']['segments'][0]","7dd92988":"def get_song_name(json_data, song_uri):\n    '''Returns song name from song URI key\n     Args:\n     * json_data- (JSON) \n     * song_uri- (str) URI\n     \n     Return\n     * (str)- Song name\n     '''\n    return\n\ndef get_artist_name(json_data, song_uri):\n    '''Returns Artist name from song URI key\n     Args:\n     * json_data- (JSON) \n     * song_uri- (str) URI\n     \n     Return:\n     * (str)- Artist name\n     '''\n\n    return\n\ndef get_timbre_values(json_data, song_uri):\n    '''Returns timbre values from a song\n    Args:\n    * json_data- (JSON) \n    * song_uri- (str) URI \n    \n    Return:\n    * (list) Each element is a list of timbre values\n    '''\n    timbre_data = []\n    for segment in json_data[None][None][None]:\n        timbre_data.append(segment[None])\n    return timbre_data\n\ndef get_segment_start_time(json_data, song_uri):\n    '''Returns start times of segments from a song\n    Args:\n    * json_data- (JSON) \n    * song_uri- (str) URI \n    \n    Return:\n    * (list) Each element is float representing time in milliseconds\n    '''\n    start_times = []\n    for segment in json_data[None][None][None]:\n        start_times.append(segment[None])\n    return start_times\n\ndef get_segment_duration(json_data, song_uri):\n    '''Returns duration of segments from a song\n    Args:\n    * json_data- (JSON) \n    * song_uri- (str) URI \n    \n    Return:\n    * (list) Each element is float representing the duration of a segment\n    '''\n    durations = [] \n    for segment in json_data[None][None][None]:\n        durations.append(segment[None])\n    return durations","c2266050":"def get_genre_data(genre_data, genre_type):\n    '''\n    Processes a JSON object of a single genre\n    Args:\n    * genre data (JSON)\n    * single genre (str) Name of genre\n    \n    Returns:\n    * pandas DataFrame containing training data and label for ML\n    '''\n    genre_dataframes = []\n    for song_uri in genre_data.keys():\n        # Extract the relevant data with our functions\n        timbres = None\n        start_times = None\n        durations = None\n        artist_name = None\n        song_name = None\n        # Create a dataframe per song\n        # We'll build the timbre parts first then add columns\n        song_df = pd.DataFrame(timbres)\n        song_df['start'] = None\n        song_df['durations'] = None\n        song_df['song_name'] = None\n        song_df['artist'] = None\n        # Remember to add the genre so we can use it for supervised learning later!\n        song_df['genre'] = None\n        #\u00a0Now we need to store\/append all the songs in a genre dataframe\n        genre_dataframes.append(None)\n    # Now concatenate the song dataframes into a single genre specific dataframe\n    genre_df = pd.concat(None)\n    return genre_df","24a63dff":"# get_genre_data(hiphop, 'hiphop').head()","71c9346f":"genre_data_path = '..\/input\/musicdata\/'\ngenre_list = os.listdir(genre_data_path)","136d9b1f":"# all_genre_list = []\n# for genre in genre_list:\n#     # Get rid of the pesky .DS_Store files with this clause\n#     if not genre.endswith('.DS_Store'):\n#         path = os.path.join(genre_data_path, genre)\n#         with open(path, 'rb') as f:\n#             genre_json = json.load(f)\n#         # Extract the genre from the file name    \n#         genre_label = genre.replace('.json', '')   \n#         # Apply our function\n#         genre_data = get_genre_data(genre_json, genre_label)\n#         all_genre_list.append(genre_data)\n\n# df = pd.concat(all_genre_list)\n# df.head()","95ad9091":"# df.rename(columns={i: 'timbre_value_'+str(i) for i in range(0,12)}, inplace=True)","004500f3":"# df.rename(columns={'timbre_value_0':'loudness',\n#                    'timbre_value_1': 'brightness',\n#                    'timbre_value_2': 'flatness'}, inplace=True)","784e396f":"def get_genre_df(genre_data_path):\n    genre_list = os.listdir(genre_data_path)\n    all_genre_list = []\n    for genre in genre_list:\n    # Get rid of the pesky .DS_Store files with this clause\n        if not genre.endswith(None):\n            path = os.path.join(genre_data_path, genre)\n            with open(path, 'rb') as f:\n                genre_json = json.load(f)\n            # Extract the genre from the file name    \n            genre_label = genre.replace(None, '')   \n            # Apply our function get_genre_data\n            genre_data = None\n            all_genre_list.append(None)\n\n    df = pd.concat(all_genre_list)\n    df.rename(columns={i: 'timbre_value_'+str(i) for i in range(0,12)}, inplace=True)\n    df.rename(columns={'timbre_value_0':'loudness',\n                   'timbre_value_1': 'brightness',\n                   'timbre_value_2': 'flatness'}, inplace=True)\n    return df\n\n    ","8494f5d5":"# df = get_genre_df(genre_data_path)\n# df.head()","0b05731a":"# df_pop = df[df['genre']==None]\n# df = df[df['genre']!=None]","92640cc4":"# training_colummns = ['loudness', 'brightness', 'flatness', 'timbre_value_3',\n#                      'timbre_value_4', 'timbre_value_5', 'timbre_value_6', 'timbre_value_7',\n#                      'timbre_value_8', 'timbre_value_9', 'timbre_value_10',\n#                      'timbre_value_11']\n# X = df[training_colummns]\n# y = df['genre']\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","80615152":"# clf = LogisticRegression(random_state=0, solver='lbfgs',\n#                          multi_class='multinomial')\n# clf.fit(X_train, y_train)\n# y_pred_log_reg = clf.predict(X_test)","87ba4bd0":"# print('f1 score {}'.format(f1_score(y_test, y_pred_log_reg, average='weighted')))\n# print('recall score {}'.format(recall_score(y_test, y_pred_log_reg, average='weighted')))\n# print('precision score {}'.format(precision_score(y_test, y_pred_log_reg, average='weighted')))","dd64b498":"# {key:value for key, value in zip(sorted(df['genre'].unique()), f1_score(y_test, y_pred_log_reg, average=None))}\n","3ace2c2a":"# log_reg_results = pd.DataFrame({'y_Actual':y_test,\n#                         'y_Predicted':y_pred_log_reg})\n# confusion_matrix_log_reg = pd.crosstab(log_reg_results['y_Actual'], log_reg_results['y_Predicted'], rownames=['Actual'], colnames=['Predicted'], margins = True)\n# confusion_matrix_log_reg","375632f1":"# rf = RandomForestClassifier()\n# rf.fit(X_train, y_train)","3a89ec8d":"y_pred_rf = rf.predict(X_test)","1c9a2b8d":"# print('f1 score {}'.format(f1_score(y_test, y_pred_rf, average='weighted')))\n# print('recall score {}'.format(recall_score(y_test, y_pred_rf, average='weighted')))\n# print('precision score {}'.format(precision_score(y_test, y_pred_rf, average='weighted')))","d5bff28b":"# {key:value for key, value in zip(sorted(df['genre'].unique()), f1_score(y_test, y_pred_log_reg, average=None))}\n","6ca832ae":"# y_pred_rf = rf.predict(X_test)\n# results_rf = pd.DataFrame({'y_Actual':y_test,\n#                            'y_Predicted':y_pred_rf})\n","cfc6b1dc":"# confusion_matrix_rf = pd.crosstab(results_rf['y_Actual'], results_rf['y_Predicted'], rownames=['Actual'], colnames=['Predicted'], margins = True)\n# confusion_matrix_rf","9d29ea41":"# pop_timbre = df_pop[training_colummns]\n# df_pop['predicted_genre'] = rf.predict(None)","77fffea9":"# df_pop['song_name'].unique()","92dd4337":"# pop_song = df_pop[df_pop['song_name']=='CHopstix (with Travis Scott)']","967b9bc8":"# pop_song['predicted_genre'].value_counts().plot(kind='bar')\n\n# plt.title('Genre Composition for CHopstix by ScHoolboy Q with Travis Scott')","97c71228":"# plt.rcParams[\"figure.figsize\"] = (10,10)\n\n# colors = {'hiphop':'m',\n#            'funk': 'g',\n#            'metal': 'k',\n#            'jazz':'y',\n#            'blues':'b',\n#            'classical':'r',\n#            'electronic': 'C1'}\n\n# for segment in range(len(pop_song)):\n#     prediction = pop_song.iloc[segment]['predicted_genre']\n#     start = pop_song.iloc[segment]['start']\n#     duration = pop_song.iloc[segment]['durations']\n#     plt.hlines(xmin=start, xmax= start+duration, y=1,\n#                colors=colors[prediction], linewidth= 200)\n# plt.yticks([])\n# plt.xlabel='Seconds'\n# patches = [mpatches.Patch(color=color, label=genre) for genre, color in colors.items()]\n# plt.legend(handles=patches, bbox_to_anchor=(0.5, -0.05),\n#            fancybox=True, shadow=True, ncol=7,\n#            loc='upper center')\n# plt.title('{} by {}'.format(pop_song.iloc[segment]['song_name'],\n#                             pop_song.iloc[segment]['artist']))\n\n# plt.show()","ccdba341":"# test_songs = get_genre_df('..\/input\/testsongdata\/')","ca8a0abb":"# test_songs.head()","21e3d5a5":"# Predict the genre\n# test_songs_timbre = test_songs[training_colummns]\n# test_songs['predicted_genre'] = rf.predict(test_songs_timbre)","dab7ef92":"def get_song_data(song_dataframe, genre=None, song_name=None):\n    if song_name:\n        song_df = song_dataframe[song_dataframe['song_name']==song_name]\n        return song_df\n    else:\n        genre_df = song_dataframe[song_dataframe['genre']==genre]\n        random_song = np.random.choice(genre_df['song_name'].unique())\n        random_song_data = genre_df[genre_df['song_name']==random_song]\n        return random_song_data\n        ","0572c818":"def get_song_composition_bar(song_data):\n    song_data['predicted_genre'].value_counts().plot(kind='bar')\n    plt.title('{} by {}'.format(song_data.iloc[0]['song_name'],\n                                song_data.iloc[0]['artist']))\n    plt.show()","05210866":"def get_song_composition_timeline(song_data):\n    plt.rcParams[\"figure.figsize\"] = (10,10)\n    colors = {'hiphop':'m',\n               'funk': 'g',\n               'metal': 'k',\n               'jazz':'y',\n               'blues':'b',\n               'classical':'r',\n               'electronic': 'C1'}\n\n    for segment in range(len(song_data)):\n        prediction = song_data.iloc[segment]['predicted_genre']\n        start = song_data.iloc[segment]['start']\n        duration = song_data.iloc[segment]['durations']\n        plt.hlines(xmin=start, xmax= start+duration, y=1,\n                   colors=colors[prediction], linewidth= 200)\n    plt.yticks([])\n    plt.xlabel='Seconds'\n    patches = [mpatches.Patch(color=color, label=genre) for genre, color in colors.items()]\n    plt.legend(handles=patches, bbox_to_anchor=(0.5, -0.05),\n               fancybox=True, shadow=True, ncol=7,\n               loc='upper center')\n    plt.title('{} by {}'.format(song_data.iloc[segment]['song_name'],\n                                song_data.iloc[segment]['artist']))\n\n    plt.show()","da1dd334":"def song_composition(song_dataframe, genre=None, song_name=None):\n    song_data = get_song_data(song_dataframe, genre, song_name=song_name)\n    get_song_composition_bar(None)\n    get_song_composition_timeline(None)\n    ","57180365":"# song_composition(test_songs, 'classical')","e29edf8e":"# test_songs[test_songs['genre']=='metal']['song_name'].unique()","ebd6e2aa":"# song_composition(test_songs, genre=None, song_name='My Own Summer (Shove It)')","f8328a6b":"# genre_types = ['metal','hiphop', 'funk', 'jazz', 'blues', 'classical', 'electronic']\n# for g in genre_types:\n#     print(g)\n#     song_composition(test_songs, g)","d81fa34a":"# Sourcing our data\nSo now that we know what an API is and what to expect from it, the next hurdle is understanding how to get it and what it'll contain. \n\nWith this in mind let's jump over to the spotify API documentation- https:\/\/developer.spotify.com\/documentation\/web-api\/reference\/\n\nIn order to source and naviagate the data needed for a project you will need to understand what each key and value represent, so get used to jumping between your code and API documentation.\n\nHave a look for yourself across all the documentation- (It might give you a bit of inspiration for your own project).\n\nFor our project we will be living on these two pages: \n\n* https:\/\/developer.spotify.com\/documentation\/web-api\/reference\/tracks\/get-audio-analysis\/\n\n* https:\/\/developer.spotify.com\/documentation\/web-api\/reference\/tracks\/get-audio-features\/\n\n\nThese pages are incredibly useful- we get a description of what the data represent, but a map of how to access it.\n\nIn the interest of time, (and also ensuring we don't bring CodeNodes internet crashing down). All the data for tonights excercise is stored locally in the environment. \n\nHowever, at the end of the exercise we'll have a mini tutorial on how to call an API by yourself.\n\nLet's jump into a single songs audio analysis.\n","7279b542":"Cool! So now we have the basics of how to naviagate our way across a dictionary, let's put it to use.\n\nHere are the keys to our audio analysis","a43f048a":"We'll go through each genre and pick a random song...","f6af8612":"To give you an idea on the end goal of this wrangling- Check out how the dataframe will look like later...\n\n![](https:\/\/github.com\/Blair-Young\/PredictingMusicGenresFromSpotifyData\/blob\/master\/images\/Screen%20Shot%202019-04-21%20at%2015.43.03.png?raw=true)","c1698ce4":"We have our extraction functions, lets get extracting!\n\nEverything that we return from these functions should go straight into a pandas DataFrame.\n\nFor anyone that hasn't used a pandas DataFrame, it's basically a table similiar to that of an Excel\/Sheets spreadsheet.\nIf you want more information about them, check out https:\/\/pandas.pydata.org\/","ebbca6fa":"# Welcome to this months Central London Data Science Meetup! \n\nIf you've ever read a data science related blog before, you'll probably have read either:\n* 'AI is the new electricity' (I'm looking at you Andrew Ng)\n* '90% of a data scientist time is spent sourcing and then cleaning the data'\n\nIn tonights notebook we will be delving into predicting the genre of songs using spotify data. From this you'll see that a data scientist really does spend a lot of time collecting and wrangling data.\n\n**Note** The code you will be working with is commented out using `#`. To uncomment and run code highlight it and press `command` + `\/`\n\nSo without further ado lets get started!","e8a25769":"Lets look at the meta data values...","697681c1":"# Train a logistic regression model","a3c5c5a1":"We'll create a function that either picks a random or chosen song  to process from our test_songs dataframe.","e83c7484":"Now the super cool thing about dictionary object is that you can store a tonne of inforation in a variety of formats. Lets check out `list_of_things`.","3f423b60":"# Just as promised here's a quick tutorial on calling an API\nA lot of companies open up their APIs to the public so it's always worth checking their dev pages.\n\nA great example of this is [TFL](https:\/\/api.tfl.gov.uk\/)- The level of detail in this API is outrageous.\n\nIf your just looking to flex your API muscles then have a look at this website [apilist](https:\/\/apilist.fun\/)\n\nThere's an API that gives us images of dogs, so of course we're going to use that...\n\nhttps:\/\/dog.ceo\/dog-api\/\n\nThe dataset is based on the Stanford Dogs Dataset so hopefully we get some dog images back.\n\n**NOTE** Kaggle notebooks do not support calling an API directly- So if you want to try this code out, just copy it into a local jupyter notebook\/script.\n\n","2c75da5b":"# Now we have the model trained, we can now test it on pop songs\n\nCreate a predicted genre column for our pop dataframe","79e08ca3":"Now we'll wrap all this in a function. ","8f807e42":"Kinda gross, right? Let's make this a bit easier on the eyes.\n\nTry using the `json.dumps()` function.","0d7eea6c":"Looks like the funk class is really letting itself down.\n\nIf we look closer we can see our model is having trouble distinguishing between funk and hiphop.\n\nThese genres are quite similar in terms of the timbre. A lot of samples will be used in hiphop that have definitely been derived from funk, so we'll let it slide for now. \n\nMaybe we can introduce nes features\/more data later to boost our performance.\n\nBut right now, we'll continue with the project...","fbf09f9a":"**Check out the last line of the documentation**\n\n* `Timbre vectors are best used in comparison with each other.`\n\nLooks like they've already been normalised for us, thanks Spotify.\n\nThis means we can get straight into the machine learning (about time!)\n\nOne more thing (I promise). We'll separate the pop music from the rest of the data, we'll try and use our model to break them down.","e0a0c6c9":"Segments returns a list of dictionaries, each of these dictionaries contains string data and lists.\n\nGreat, our dictionary contains a list of other dictionaries, that isn't confusing at all...\n\nWhat we want is the timbre values.\n\n**Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. Timbre vectors are best used in comparison with each other.**","6d519150":"Let's tidy the name columns up.\n\nCheck out this page on what the timbre values correspond to\n\nhttps:\/\/developer.spotify.com\/documentation\/web-api\/reference\/tracks\/get-audio-analysis\/#timbre\n\nFrom this we know what some of the values correspond to, but not all of them...","1a88bd90":"```\n# use requests to interact with an API\nimport requests\n\n# The API path should be stated in the documentation \napi_path = 'https:\/\/dog.ceo\/api\/breeds\/image\/random'\n\n# use the get to collect data from the access point.\nr = requests.get(api_path).json()\n# Copy the url from the message and enjoy the view\nprint(r['message'])\n\n```\n","9cb5b6bc":"We want to combine all these data sources into one big dataframe.\n\nEach one has the same structure, let's look at an example fo how to get the data.","00cddced":"Lets create a couple of functions to extract this data.","a51c39a7":"It returns a `list`, we can either associate this value with a variable and work with it elsewhere like so....","a7cae557":"Here's how we would access the value associated with the key `dog`","d42825f4":"# Sourcing data online\n\nSourcing data for a project can be tricky, one option is to scower the internet looking for datasets to download. Another option is to use an Application Programming Interface (API).\n\n\n### APIs\nAn API allows different applications to share data between each another. By calling an API we gain access to data held on a server.\n\n### So why are these good for a data scientist?\n\nSay you wanted to keep up-to-date the National Leage promotion race (abosulte nail biter). You could search for the hashtag #LeytonOrient and copy and paste each of the tweets into a document. This will take forever.\n\nThe next best thing would be to email twitter and ask for a dataset of the twitter stream, but again this would waste even more peoples peoples time. \n\nInstead, companies create these access points known as APIs that let you query available data. This reduces up the time needed to collect the data you need for your project. Great!\n\n### What to expect from an API\nInformation returned from an API can come in a couple of formats, but the one that we'll be using today is JavaScript Object Notation- JSON. \n\nJSON is ubiquitous throughout the web. It's human readable, lightweight and can be interpreted by a tonne of languages, including python. \n","cc43eb80":"Here we have a dictionary built of key-value pairs. You can access each value stored in the dictionary using the keys.","ed747d80":"OK, this stuff is a bit boring, let's get into the data that we'll be using for our model.\nHead on over to the [doumentation](https:\/\/developer.spotify.com\/documentation\/web-api\/reference\/tracks\/get-audio-analysis\/) and check out what `segments` represents.\n\n**\"Audio segments attempts to subdivide a song into many segments, with each segment containing a roughly consitent sound throughout its duration.\"**","e38ceca5":"Phew...\n\nOK that's the main part of the exercise complete, congratz! \ud83c\udf89\n\nThese visualisation look pretty cool, you can even see the main parts like- intro, verses, chorus and even bridges!\n\nIf you have time to spare, or want to dive a bit deeper be our guest. \ud83c\udf75\ud83d\udd6f\n\nAlso, we mentioned about the `'90% of a data scientist time is spent sourcing and then cleaning the data'`\n\nIn this notebook we wrote `30` lines of code dedicated to ML, the rest (`284` lines) was getting and displaying the data.\n\nThat's approx `89.5%`, pretty close to the `90%` quote.\n\nHere's a few suggestions:\n\n* Try and cluster the data \n* Bring in the start time as a feature used to predict \n* Play around with the original data and see if you can extract other meaningful information for your model\n* What could we use to distinguish hiphop from funk better? Maybe time signatures, or tempo, if we had a bigger dataset we could try and bring in artist name?\n* Predict the verse, chorus, bidge, outros of a song or genre\n* Try other predictive models\n* Tune the hyperparams to optimise the current random forrest\n> * Explore other APIs\n","5dc79d18":"# Not great :S\nLet's bring in the cavalry...","5c569b56":"We'll pick a song from the list and see the breakdown of the composition","06e81be5":"This is neat, we can see the majority of the song is made up of hiphop, electronic and a bit of funk.\nCheck the song out for yourself [here](https:\/\/www.youtube.com\/watch?v=5xvxgUE_pTA)\n\nChopstiiiiicks, chopsticks, chopsticks....\n\nLyrical genius.[](http:\/\/)\n","cbd9b475":"Neat, we've just navigated and stored the relevant data for our model.\n\nHowever, this is only one song, we'll need to get a few more samples to play with.\n\nWe've collected about 50 songs from some well known genres:\n* jazz\n* blues\n* funk,\n* metal\n* classical\n* hiphop\n* pop\n* electronic\n\nAnd streamlined the data to include the information we'll need for the rest of the exercise.\n\nLet's use our knowledge of dictionary naviagation to wrangle the data into a Dataframe so we can model it.\n\nWithin the `musicdata` folder we have a few JSON files, each one contains songs and their segment data from a single genre.","c2134cdf":"Rename the first three timbre values according to the documentation","46e9345a":"Pop music isn't necessarily a genre onto itself, it's whats popular right now. So it's kinda cool that we can see whats currently influencing current music.\n\nWe'll now test out our model with separate data from our original genres and see how it copes.\n\nWe have another dataset waiting in the wing- `testsongdata`...\n\nLet's use our original `get_genre_df` function to save some time wrangling.","3f51610c":"* Not amazing performance here, let's see which genre's the model is having problems with...","53755192":"Still a bit intimadating though...\n\nWhen we load in a json object- python interprets it as a dictionary. So lets use some python 101 to navigate the struture.\n\nA dictionary consists of a collection of key-value pairs. Each key-value pair maps the key to its associated value.\n\nYou can build a dictionary by wrapping a `key` joined by a colon `:` to an asscoicated `value` using curly braces `{}`.\n\nLet's build a simple dictionary","95589840":"See you all next time! \ud83d\udc4b\ud83d\udc4b\ud83d\udc4b\ud83d\udc4b","0846bb3f":"Let's scale it up so we can use it across all genres.","94e6d9dc":"Try and explore and pick a song from the test dataframe","18904f7a":"We can combine the two lines and pass it through a for loop to get all the timbre values across each segment for this song...\n","7e14581c":"Or access the list object directly..."}}