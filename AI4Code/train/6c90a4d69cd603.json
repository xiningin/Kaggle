{"cell_type":{"8920c5a6":"code","306f7814":"code","cd3a0ffc":"code","fbb6f595":"code","77a698a0":"code","ccfd109f":"code","1e797287":"code","cd830d6a":"code","5b83d817":"code","aab63fa8":"code","d4f0a005":"code","d3edccdc":"code","1a62cd40":"code","0e2b2b92":"code","4350298b":"code","24b1382d":"code","91cfd55d":"code","3213c402":"code","7a1b9c59":"code","63f6ebfd":"code","92dff9fe":"code","3e53b5f3":"code","764f27a9":"code","ef1cc970":"code","cf4bcc06":"code","ce89a775":"code","59baf68f":"code","629a5319":"code","f4ce195b":"code","99a7929e":"markdown","98e226dc":"markdown","0c940049":"markdown","0a9055c7":"markdown","b652f1a4":"markdown","976da809":"markdown","db1d92f7":"markdown","4ae156e7":"markdown","150151a5":"markdown","03fdcc98":"markdown","6ddeac98":"markdown","f9939292":"markdown","28c92370":"markdown","bccc9ffc":"markdown","94fc1dc2":"markdown","f33da23f":"markdown","a98295bc":"markdown","d115b0db":"markdown","33fdc87a":"markdown","a24dc260":"markdown","c5179335":"markdown","0274c64c":"markdown","54108681":"markdown","fd104115":"markdown"},"source":{"8920c5a6":"# import python libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","306f7814":"df1=pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')\ndf1.head()","cd3a0ffc":"df1.columns = [*df1.columns[:-1], 'Target']\ndf1=df1.drop(['Target'],axis=1)\ndf1.head()","fbb6f595":"sns.pairplot(df1, hue = 'diagnosis', vars = ['radius_mean', 'texture_mean', 'area_mean', 'perimeter_mean', 'smoothness_mean'] )","77a698a0":"hist_mean=df1.hist(bins=10, figsize=(15, 10),grid=False,)","ccfd109f":"plt.figure (figsize=(6,6))\np = sns.countplot(data=df1,x = 'diagnosis',)","1e797287":"sns.scatterplot(x = 'area_mean', y = 'smoothness_mean', hue = 'diagnosis', data = df1)","cd830d6a":"plt.figure(figsize=(20,10)) \nsns.heatmap(df1.corr(), annot=True)","5b83d817":"f,ax=plt.subplots(2,3,figsize=(25,20))\nbox1=sns.boxplot(x=\"radius_mean\", y=\"diagnosis\", data=df1,ax=ax[0][0], palette=\"muted\",sym='k.')\nax[0][0].set_xlabel('radius_mean')\nbox1=sns.boxplot(x=\"texture_mean\", y=\"diagnosis\", data=df1,ax=ax[0][1], palette=\"muted\",sym='k.')\nax[0][1].set_xlabel('texture_mean')\nbox1=sns.boxplot(x=\"perimeter_mean\", y=\"diagnosis\", data=df1,ax=ax[0][2], palette=\"muted\",sym='k.')\nax[0][2].set_xlabel('perimeter_mean')\nbox1=sns.boxplot(x=\"area_mean\", y=\"diagnosis\", data=df1,ax=ax[1][0], palette=\"muted\",sym='k.')\nax[1][0].set_xlabel('area_mean')\nbox1=sns.boxplot(x=\"smoothness_mean\", y=\"diagnosis\", data=df1,ax=ax[1][1], palette=\"muted\",sym='k.')\nax[1][1].set_xlabel('smoothness_mean')\nbox1=sns.boxplot(x=\"compactness_mean\", y=\"diagnosis\", data=df1,ax=ax[1][2], palette=\"muted\",sym='k.')\nax[1][2].set_xlabel('compactness_mean')\nplt.show ()","aab63fa8":"f,ax=plt.subplots(2,2,figsize=(25,15))\nsns.violinplot(x=\"diagnosis\", y=\"radius_mean\",ax=ax[0][0],data=df1, palette=\"muted\")\nsns.violinplot(x=\"diagnosis\", y=\"texture_mean\",data=df1,ax=ax[0][1], palette=\"muted\")\nsns.violinplot(x=\"diagnosis\", y=\"perimeter_mean\",ax=ax[1][0],data=df1, palette=\"muted\")\nsns.violinplot(x=\"diagnosis\", y=\"area_mean\",ax=ax[1][1],data=df1, palette=\"muted\")\n","d4f0a005":"f,ax=plt.subplots(1,1,figsize=(25,6))\nsns.kdeplot(df1.loc[(df1['diagnosis']=='M'), 'perimeter_mean'], color='b', shade=True, Label='M')\nsns.kdeplot(df1.loc[(df1['diagnosis']=='B'), 'perimeter_mean'], color='g', shade=True, Label='B')\nplt.xlabel('Perimeter Mean')","d3edccdc":"f,ax=plt.subplots(1,1,figsize=(25,6))\nsns.kdeplot(df1.loc[(df1['diagnosis']=='M'), 'area_worst'], color='b', shade=True, Label='M')\nsns.kdeplot(df1.loc[(df1['diagnosis']=='B'), 'area_worst'], color='g', shade=True, Label='B') \nplt.xlabel('Area Worst') ","1a62cd40":"f,ax=plt.subplots(1,1,figsize=(25,6))\nsns.kdeplot(df1.loc[(df1['diagnosis']=='M'), 'perimeter_worst'], color='b', shade=True, Label='M')\nsns.kdeplot(df1.loc[(df1['diagnosis']=='B'), 'perimeter_worst'], color='g', shade=True, Label='B')\nplt.xlabel('Perimeter Worst') ","0e2b2b92":"f,ax=plt.subplots(1,2,figsize=(25,5))\nplot1=sns.scatterplot(x=\"area_mean\", y=\"diagnosis\",color = \"red\",data=df1,ax=ax[0])\nax[0].set_xlabel('Area Mean')\nplot2=sns.scatterplot(x=\"concavity_mean\", y=\"diagnosis\",color = \"green\",data=df1,ax=ax[1])\nax[1].set_xlabel('Concavity Mean')\nplt.show ()","4350298b":"x=df1['radius_mean']\ny=df1['texture_mean']\nN = 569\ncolors = np.random.rand(N)\narea = (25 * np.random.rand(N))**2\ndf2= pd.DataFrame({'X': x,'Y': y,'Colors': colors,\"bubble_size\":area})","24b1382d":"plt.scatter('X', 'Y', s='bubble_size', c='Colors', alpha=0.5, data=df2)\nplt.xlabel(\"X\", size=16)\nplt.ylabel(\"y\", size=16)\nplt.title(\"Bubble Plot with Matplotlib\", size=18)","91cfd55d":"plt.style.use('seaborn')\nx  = [(i+1) for i in range(10)]\ny1 = df1['radius_mean'][1:11]\ny2 = df1['texture_mean'][1:11]\nplt.plot(x, y1, label=\"radius_mean\", color = 'B')\nplt.plot(x, y2, label=\"texture_mean\", color = 'R')\nplt.plot()\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\nplt.title(\"Line Graph Example\")\nplt.legend()\nplt.show()","3213c402":"import matplotlib.pyplot as plt\nidxes = [(i+1) for i in range(10)]\narr1  = df1['compactness_mean'][:10]\narr2  = df1['concavity_mean'][:10]\narr3  = df1['concave points_mean'][:10]\n# Adding legend for stack plots is tricky.\nplt.plot([], [], color='#FF4500', label = 'D 1')\nplt.plot([], [], color='#00EB42', label = 'D 2')\nplt.plot([], [], color='#00D3FF', label = 'D 3')\nplt.stackplot(idxes, arr1, arr2, arr3, colors= ['#FF4500', '#00EB42', '#00D3FF'])\nplt.title('Stack Plot Example')\nplt.legend()\nplt.show()","7a1b9c59":"df_copy=df1[['radius_mean','texture_mean','perimeter_mean','area_mean']].copy()","63f6ebfd":"df_copy.plot.area()","92dff9fe":"from pandas.plotting import parallel_coordinates\ndf3=df1.head(20)\nfig, ax = plt.subplots(figsize=(30,8)) \nparallel_coordinates(df3,'diagnosis', colormap=plt.get_cmap(\"Set3\"))\nplt.show()","3e53b5f3":"sns.jointplot(x=df1[\"texture_worst\"], y=df1[\"perimeter_worst\"], kind='hex')\nsns.jointplot(x=df1[\"texture_worst\"], y=df1[\"area_worst\"], kind='kde')","764f27a9":"X = df1.drop(['diagnosis'], axis=1)\ny = df1['diagnosis']","ef1cc970":"# split data into training and testing with a ratio of 80:20 using sklearn\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state=5)","cf4bcc06":"from sklearn.svm import SVC\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","ce89a775":"svc_model = SVC(gamma='auto')\nsvc_model.fit(X_train, y_train)\ny_predict = svc_model.predict(X_test)\ncm = confusion_matrix(y_test, y_predict)\nsns.heatmap(cm, annot= True)\naccuracy1=svc_model.score(X_test,y_test)\nprint (accuracy1*100,'%')\nprint(classification_report(y_test, y_predict))","59baf68f":"logistic = LogisticRegression()\nlogistic.fit(X_train,y_train)\ny_pred=logistic.predict(X_test)\ncm=confusion_matrix(y_test,y_pred)\nsns.heatmap(cm,annot=True)\naccuracy1=logistic.score(X_test,y_test)\nprint (accuracy1*100,'%')\nprint(classification_report(y_test,y_pred))","629a5319":"des_class=DecisionTreeClassifier()\ndes_class.fit(X_train,y_train)\ndes_predict=des_class.predict(X_test)\ncm=confusion_matrix(y_test,des_predict)\nprint(classification_report(y_test,des_predict))\naccuracy3=des_class.score(X_test,y_test)\nprint(accuracy3*100,'%')\nsns.heatmap(cm,annot=True)","f4ce195b":"model= KNeighborsClassifier()\nmodel.fit(X_train,y_train)\nmodel_predict=model.predict(X_test)\nprint(classification_report(y_test,model_predict))\naccuracy4=model.score(X_test,y_test)\nprint(accuracy4*100,'%')\ncm=confusion_matrix(y_test,model_predict)\nsns.heatmap(cm,annot=True)","99a7929e":"**5.Heatmap**","98e226dc":"# MODEL TRAINING","0c940049":"**Bubbleplot**","0a9055c7":"**Scatterplot**","b652f1a4":"**3.Random Forest Classifier**","976da809":"**Line plot**","db1d92f7":"**Parallel plot**","4ae156e7":"**Visualization of Dataset**","150151a5":"# Importing important libraries ","03fdcc98":"**4.KNN**","6ddeac98":"**KDE Plot**","f9939292":"**4.Scatter Plot**","28c92370":"**2.Logistic Regression**","bccc9ffc":"**1.Pairplot**","94fc1dc2":"**1.SVM**","f33da23f":"**Stack Plot**","a98295bc":"**Boxplot**","d115b0db":"**Area plot**","33fdc87a":"**3.Count Plot**","a24dc260":"**2.Histogram**","c5179335":"**Violinplot**","0274c64c":"# BREAST CANCER CLASSIFICATION\n**PROBLEM STATEMENT**\n\nPredict if a cancer diagonsis is malignant or benign by classifying several features and observation.\n\nData Set Characteristics:\n\n:Number of Instances: 569\n\n:Number of Attributes: 30 numeric, predictive attributes and the class\n\n:Attribute Information:\n    - radius (mean of distances from center to points on the perimeter)\n    - texture (standard deviation of gray-scale values)\n    - perimeter\n    - area\n    - smoothness (local variation in radius lengths)\n    - compactness (perimeter^2 \/ area - 1.0)\n    - concavity (severity of concave portions of the contour)\n    - concave points (number of concave portions of the contour)\n    - symmetry \n    - fractal dimension (\"coastline approximation\" - 1)\n   class:\n            - WDBC-Malignant\n            - WDBC-Benign","54108681":"**Joint plot**","fd104115":"# Evaluating model"}}