{"cell_type":{"14fe9111":"code","354419ce":"code","04130a09":"code","afc80150":"code","10ad95f8":"code","c42aa2f1":"code","a9df1aa7":"code","987c990f":"code","903da284":"code","1cf54afd":"code","3678c532":"code","1c8192f8":"code","fb9500c4":"code","4ee756fe":"code","cdb3a0b5":"code","ede704ac":"markdown","75c8e573":"markdown","b9097135":"markdown","edcfb6cf":"markdown","31bd872f":"markdown","414f7d9d":"markdown","a996aedb":"markdown"},"source":{"14fe9111":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","354419ce":"import seaborn as sns\nfrom sklearn.utils import shuffle\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nimport sklearn.preprocessing as preprocessing\nfrom sklearn.model_selection import train_test_split\n","04130a09":"body = pd.read_csv(\"\/kaggle\/input\/body-performance-data\/bodyPerformance.csv\")","afc80150":"body.head()","10ad95f8":"def le(column):\n    LAEN = preprocessing.LabelEncoder()\n    LAEN.fit(column)\n    column = LAEN.transform(column)\n    return column\n    ","c42aa2f1":"body[\"class\"]= le(body[\"class\"])\nbody[\"gender\"]= le(body[\"gender\"])","a9df1aa7":"body.head()","987c990f":"body[\"age\"]= body[\"age\"].astype('int')\nbody[\"diastolic\"]= body[\"diastolic\"].astype('int')\nbody[\"systolic\"]= body[\"systolic\"].astype('int')\nbody[\"sit-ups counts\"]= body[\"sit-ups counts\"].astype('int')\nbody[\"broad jump_cm\"]= body[\"broad jump_cm\"].astype('int')","903da284":"X = body.drop(\"class\",axis=1)","1cf54afd":"y = body[\"class\"]","3678c532":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","1c8192f8":"svm_model = SVC(gamma=1e-4 ,C=1000,random_state=42)\nsvm_model = svm_model.fit(X_train, y_train)","fb9500c4":"Y_pred = svm_model.predict(X_test)\nY_pred","4ee756fe":"print(confusion_matrix(y_test,Y_pred))\nprint(\"\\n\")\nprint(classification_report(y_test,Y_pred))\n\nprint(\"Training set score for SVM: %f\" % svm_model.score(X_train , y_train))\nprint(\"Testing  set score for SVM: %f\" % svm_model.score(X_test , y_test ))\n\nsvm_model.score","cdb3a0b5":"cm_matrix = pd.DataFrame(data=confusion_matrix(y_test,Y_pred))\n\nsns.heatmap(cm_matrix, annot=True, fmt='d', cmap='YlGnBu');","ede704ac":"## SVM modelling","75c8e573":"# Importing Libraries and Data","b9097135":"## Results\n\n\n","edcfb6cf":"## Train-Test split","31bd872f":"# Label Encoder","414f7d9d":"## X-y Split ","a996aedb":"## Data type change into Integer"}}