{"cell_type":{"3be52a3a":"code","7da2d6ca":"code","4d521660":"code","9a9e17b0":"code","a99cc26a":"code","36537212":"code","85a8a604":"code","8ea67baf":"code","b1eca280":"code","5230f000":"code","9fdf1cf7":"code","67085d94":"code","317d6725":"code","c3093b1f":"code","48fbb6ce":"code","1eab4734":"code","af74f8b1":"code","27e7dd6f":"markdown","f4fecd59":"markdown","261e4acd":"markdown","adf30370":"markdown","1c6933cb":"markdown","14315304":"markdown","d48e7109":"markdown"},"source":{"3be52a3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7da2d6ca":"import numpy as np \nimport pandas as pd\nimport calendar\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport squarify\nimport gc\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nimport time\nimport datetime\nfrom datetime import datetime\nimport calendar\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.cluster import KMeans\n\nsns.set_style('white')\n\n\npd.options.display.float_format = '{:,.2f}'.format","4d521660":"df_sorted = pd.read_pickle('\/kaggle\/input\/easymoney\/EasyMoney_base.pkl',compression='zip')","9a9e17b0":"clientes_actuales=df_sorted[(df_sorted['pk_partition']=='2019-05-28')]","a99cc26a":"variable_segmentacion=['totalAssets','totalCuentas','totalAhorro','totalFinanciacion',\n                       'totalBeneficio','salary','age','diasDesdeUltimaAltaInt']","36537212":"pipe = Pipeline(\n        steps=[\n            ('StandardScaler', StandardScaler()),\n            ('KMeans', KMeans(n_clusters=7))\n        ]\n)","85a8a604":"pipe.fit(clientes_actuales[variable_segmentacion])","8ea67baf":"clientes_actuales['Cluster'] = pipe.predict(clientes_actuales[variable_segmentacion])","b1eca280":"clientes_actuales.groupby('Cluster').agg({\n                                         'totalAssets':np.mean,\n                                         'totalCuentas':np.mean,\n                                         'totalAhorro':np.mean,\n                                         'totalFinanciacion':np.mean,\n                                         'totalBeneficio':np.mean,\n                                         'diasDesdeUltimaAltaInt':np.mean,\n                                         'salary':np.mean,\n                                         'age':np.mean,\n                                         'Cluster':len\n                                        })","5230f000":"# Easymoney product list\nproductos_easymoney=['loans',\n 'mortgage',\n 'funds',\n 'securities',\n 'long_term_deposit',\n 'em_account_pp',\n 'credit_card',\n 'payroll',\n 'pension_plan',\n 'payroll_account',\n 'emc_account',\n 'debit_card',\n 'em_account_p',\n 'em_acount',\n 'short_term_deposit']","9fdf1cf7":"clientes_actuales_=clientes_actuales.pivot_table(index=['pk_partition','Cluster'], \n                                                 values=productos_easymoney,\n                                                aggfunc=[np.sum])","67085d94":"clientes_actuales_.head()","317d6725":"clientes_actuales_.columns=['credit_card',\n                            'debit_card','em_account_p','em_account_pp',\n                            'em_acount','emc_account','funds','loans',\n                            'long_term_deposit','mortgage','payroll','payroll_account',\n                            'pension_plan','securities','short_term_deposit']","c3093b1f":"clientes_actuales_.reset_index(drop=False,inplace=True)","48fbb6ce":"clientes_actuales_","1eab4734":"clientes_actuales_=clientes_actuales_.melt(id_vars=['pk_partition','Cluster'],\n              value_vars=productos_easymoney,\n              var_name='Product',\n              value_name='Count')","af74f8b1":"evolucion_horizontal = px.bar(clientes_actuales_, \n                              x=\"Cluster\", y=\"Count\", color='Product', orientation='v', \n                              height=600,title='Productos por Cluster', \n                              color_discrete_sequence = px.colors.cyclical.mygbm)\nevolucion_horizontal.show()","27e7dd6f":"Lo pintamos:","f4fecd59":"# Segmentamos con K-Means","261e4acd":"Resetamos el indice, sin borrar el antiguo ya que lo necesitamos.","adf30370":"Hacemos un Melt de la tabla y agrupamos los datos de todos los productos Easymoney en solo dos columnas:","1c6933cb":"Cambiamos el nombre a las columnas, ya que no me gusta el doble indexado.","14315304":"# Vamos a pintar los counts totales de los productos Easy money por cluster","d48e7109":"Para esto hacemos primero una pivoty table, agrupando por fecha y cluster:"}}