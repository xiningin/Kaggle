{"cell_type":{"27b0dbe8":"code","7aa991c0":"code","7e83e004":"code","2b2cbfce":"code","ea314aec":"code","61c0f6c3":"code","fcbec4d2":"code","dfe85531":"code","f1340cdb":"code","63428f08":"code","86b05955":"code","8b474088":"code","eae3cf50":"code","7a13051f":"code","29714107":"code","74fd903d":"code","49328a2a":"code","3d4d183b":"code","898a01e7":"code","4e56d560":"code","4677a2a9":"code","c813340c":"code","d24bd72f":"code","3b21d54f":"code","aa8bb4ab":"code","6f76f72b":"code","d481059b":"code","a7e92540":"code","fe9ff973":"code","26a3544f":"code","7602704f":"code","789496fa":"code","5cef1516":"code","5588ba57":"code","65100ab3":"code","c64a93ac":"code","1ae412b8":"code","3b4a497b":"code","6fbd08e0":"code","20e0f9d5":"code","0b1d05f2":"code","0d67ba3d":"code","b4743ca7":"code","d19ade7a":"code","c410cdd7":"code","3bb79be4":"code","b228047a":"code","2fa0ea14":"code","46207eba":"code","327b8856":"code","becb47e4":"code","d8579e0c":"code","d5a93828":"code","8329289c":"code","d10d8c5b":"code","c1302259":"code","968bfed4":"code","b6122ec3":"code","514ce047":"code","5c1d8ec9":"code","51076b09":"code","cde3cef4":"code","778254ce":"code","82acb4b9":"code","8760feb7":"code","2834521b":"code","9a81f1aa":"code","ed93fd3c":"code","ec857d6c":"code","7ff4f205":"code","621c98a2":"code","72f0601d":"code","06e644e6":"code","a3d06634":"code","3569dab1":"markdown","8e9c7b29":"markdown","dab1ee09":"markdown","61fa3de1":"markdown","4dc41076":"markdown","15aeab36":"markdown","5399c3cb":"markdown","ce8da6d2":"markdown","da66299f":"markdown","5dbc810b":"markdown","8446adb7":"markdown","ad2d3187":"markdown","a317c6dc":"markdown","0fe71f03":"markdown","f471af3b":"markdown","64b60575":"markdown","3489f3a3":"markdown","ce2e1327":"markdown","01f0fa83":"markdown","9deb2192":"markdown","b1150ba2":"markdown","3b3ba22f":"markdown","d37f838d":"markdown","e6ba36ce":"markdown","e4eae75c":"markdown","b5f82187":"markdown","24c28b9f":"markdown","ce10580e":"markdown","cf26c2ca":"markdown","b37e5101":"markdown","e68ff1ee":"markdown","1a2b22b9":"markdown"},"source":{"27b0dbe8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7aa991c0":"#Imports\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.ticker as mtick\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","7e83e004":"telco_base_data = pd.read_csv('..\/input\/churn-analysis-telecom-data\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","2b2cbfce":"telco_base_data.head()","ea314aec":"telco_base_data.shape","61c0f6c3":"telco_base_data.columns.values","fcbec4d2":"#Checking the data types of all the columns\ntelco_base_data.dtypes","dfe85531":"#Check the decriptive statistics of numeric variables (Only for Numeric)\ntelco_base_data.describe()","f1340cdb":"#plot Churn - > To identify Churners' ratio\ntelco_base_data['Churn'].value_counts().plot(kind='barh',figsize=(8,6))\nplt.xlabel(\"Count\",labelpad=14)\nplt.ylabel(\"Target Variable\",labelpad=14)\nplt.title(\"Count the Target Variable per category\",y=1.02);","63428f08":"# (%) Churn values\n100*telco_base_data['Churn'].value_counts()\/len(telco_base_data['Churn'])","86b05955":"# Actual Churn Values\ntelco_base_data['Churn'].value_counts()","8b474088":"# Concise summary of the dataframe, as we have too many cols., we are using verbose = True mode\ntelco_base_data.info(verbose=True)","eae3cf50":"# Code to plot missing data\n# reset_index | will give indexed values for the null records | if avlb.\nmissing = pd.DataFrame((telco_base_data.isnull().sum())*100\/telco_base_data.shape[0]).reset_index()\nplt.figure(figsize = (16,5))\nax = sns.pointplot('index',0,data=missing)\nplt.xticks(rotation=90,fontsize=7) #To write labels at certain angle\nplt.title(\"Percentage of Missing Values\")\nplt.ylabel(\"PERCENTAGE\")\nplt.show()","7a13051f":"telco_data = telco_base_data.copy() #To manipulate the data, while keeping the original data set intact\n","29714107":"telco_data.TotalCharges = pd.to_numeric(telco_data.TotalCharges, errors='coerce')\ntelco_data.isnull().sum()","74fd903d":"telco_data.loc[telco_data['TotalCharges'].isnull() == True] #To locate the null values #isnull() gives a boolean","49328a2a":"#Removing missing values\ntelco_data.dropna(how = 'any', inplace=True)","3d4d183b":"#Get the max tenure\nprint(telco_data['tenure'].max()) #72","898a01e7":"# Group the tenure in bins of 12 months\nlabels = [\"{0} - {1}\".format(i, i+11) for i in range(1,72,12)]\n\n# Use \"pd.cut\" when you need to sort the values in bins equally\n# Bin labels must be 1 fewer than the Edge of bins || so range = 1, 72 , bins = 6 , 1 fewer needed => range(1,80,12)\ntelco_data['tenure_group'] = pd.cut(telco_data.tenure, range(1,80,12), right=False, labels=labels)","4e56d560":"telco_data['tenure_group'].value_counts()","4677a2a9":"#drop column CustomerID and tenure(as we already have bins)\ntelco_data.drop(columns=['customerID','tenure'], axis=1, inplace=True)\ntelco_data.head()","c813340c":"# Create a predictor using FOR loop and ENUMERATE( gives index value & value) for each categorical column w.r.t. 'Target' column\nfor i, predictor in enumerate(telco_data.drop(columns=['Churn','TotalCharges','MonthlyCharges'])):\n    plt.figure(i)\n    sns.countplot(data=telco_data, x=predictor, hue='Churn')","d24bd72f":"telco_data['Churn'] = np.where(telco_data.Churn == 'Yes',1,0)\ntelco_data.head()","3b21d54f":"telco_data_dummies = pd.get_dummies(telco_data) #Converts all the categorical data columns into Dummy Variables\ntelco_data_dummies.head()","aa8bb4ab":"sns.lmplot(data=telco_data_dummies, x='MonthlyCharges', y='TotalCharges', fit_reg=False)","6f76f72b":"#Prepares KDE plot for Monthly Charges with Churn == 0 condition\nMth = sns.kdeplot(telco_data_dummies.MonthlyCharges[(telco_data_dummies['Churn'] == 0)], color=\"Red\", shade=True)\n#Prepares KDE plot for Monthly Charges with Churn == 1 condition\nMth = sns.kdeplot(telco_data_dummies.MonthlyCharges[telco_data_dummies['Churn'] == 1], color=\"Blue\", shade=True)\nMth.legend([\"NotChurn\",\"Churn\"], loc='upper right')\nMth.set_xlabel('Monthly Charges')\nMth.set_ylabel('Density')\nMth.set_title('Monthly Charges by Churn')","d481059b":"#Prepares KDE plot for Total Charges with Churn == 0 condition\nTot = sns.kdeplot(telco_data_dummies.TotalCharges[telco_data_dummies['Churn']==0], color=\"Red\", shade = True)\n#Prepares KDE plot for Total Charges with Churn == 1 condition\nTot = sns.kdeplot(telco_data_dummies.TotalCharges[telco_data_dummies['Churn']==1], color=\"Blue\", shade=True)\nTot.legend([\"NotChurn\",\"Churn\"], loc=\"upper right\")\nTot.set_xlabel(\"Total Charges\")\nTot.set_ylabel(\"Density\")\nTot.set_title(\"Total Charges by Churn\")","a7e92540":"plt.figure(figsize = (20,8))\ntelco_data_dummies.corr()['Churn'].sort_values(ascending=False).plot(kind='bar')","fe9ff973":"plt.figure(figsize=(12,12))\nsns.heatmap(telco_data_dummies.corr(), cmap=\"Paired\")","26a3544f":"# Analyse 2 variables || Create 2 dataframes || One for Churners, One for Non-Churners\nnew_df1_target0 = telco_data.loc[telco_data[\"Churn\"]==0]\nnew_df1_target1 = telco_data.loc[telco_data[\"Churn\"]==1]","7602704f":"def uniplot(df,col,title,hue=None): #Initiated the functions , that can be called out in plotting final graph\n    \n    sns.set_style('whitegrid')\n    sns.set_context('talk')\n    plt.rcParams[\"axes.labelsize\"]=20\n    plt.rcParams[\"axes.titlesize\"]=22\n    plt.rcParams[\"axes.titlepad\"]=30\n    \n    temp = pd.Series(data=hue)\n    fig, ax = plt.subplots()\n    width = len(df[col].unique())+7+4*len(temp.unique())\n    fig.set_size_inches(width, 8)\n    plt.xticks(rotation=45)\n    plt.yscale('log')\n    plt.title(title)\n    # Will set how the input will act in the graph and how the order of calculation will be\n    ax = sns.countplot(data = df, x=col, order=df[col].value_counts().index, hue=hue, palette='bright') \n    \n    plt.show()","789496fa":"#Plotting the Uniplot for \"Partner\" based on \"Gender\"\nuniplot(new_df1_target1, col='Partner', title='Distribution of Gender for Churned Customers', hue='gender')","5cef1516":"#Plotting the Uniplot for \"Partner\" based on \"Gender\"\nuniplot(new_df1_target0, col='Partner', title='Distribution of Gender for Non-Churned Customers', hue='gender')","5588ba57":"uniplot(new_df1_target0, col='PaymentMethod', title='Distribution of PaymentMethod for Non-Churned customers', hue='gender')","65100ab3":"uniplot(new_df1_target1, col='PaymentMethod', title = 'Distribution of Payment Method for Churned Customers', hue='gender')","c64a93ac":"uniplot(new_df1_target0, col='Contract', title='Distribution of Contract for Non-Churned', hue='gender')","1ae412b8":"uniplot(new_df1_target1, col='Contract', title='Distribution of Contract for Churned Customers', hue='gender')","3b4a497b":"uniplot(new_df1_target1,col='TechSupport',title='Distribution of TechSupport for Churned Customers',hue='gender')","6fbd08e0":"uniplot(new_df1_target1,col='SeniorCitizen',title='Distribution of TechSupport for Churned Customers',hue='gender')","20e0f9d5":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import recall_score, classification_report, confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom imblearn.combine import SMOTEENN #Used to Handle the IMBALANCED Data-Set","0b1d05f2":"df = pd.read_csv('..\/input\/churn-analysis-telecom-data\/tel_churn.csv') #Read the telecom data file || That was converted to Dummies = For Model Building","0d67ba3d":"df.head()","b4743ca7":"df = df.drop('Unnamed: 0', axis=1)","d19ade7a":"df.head()","c410cdd7":"#Creating X, & Y variables\n\nx=df.drop('Churn',axis=1)\nx.head()","3bb79be4":"y=df['Churn']\ny.head()","b228047a":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2)","2fa0ea14":"model_dt = DecisionTreeClassifier(criterion='gini', random_state=100, max_depth=6, min_samples_leaf=8)","46207eba":"model_dt.fit(x_train, y_train)","327b8856":"#Predictions\ny_pred = model_dt.predict(x_test)\ny_pred","becb47e4":"#Model Evaluation\nprint(confusion_matrix(y_test,y_pred))\nprint('\\n')\nprint(classification_report(y_test,y_pred))","d8579e0c":"sm = SMOTEENN()","d5a93828":"X_resampled, y_resampled = sm.fit_resample(x,y) #Did Over sampling using SMOTE and Data Cleaning using ENN\n#Handled the Imbalanced Dataset\n","8329289c":"xr_train, xr_test, yr_train, yr_test = train_test_split(X_resampled, y_resampled, test_size=0.2)","d10d8c5b":"model_dt_r = DecisionTreeClassifier(criterion='gini', random_state=100, max_depth=6, min_samples_leaf=8)","c1302259":"model_dt_r.fit(xr_train, yr_train)","968bfed4":"#Prediction of resampled data\ny_pred_smote = model_dt_r.predict(xr_test)\ny_pred_smote","b6122ec3":"#Model Evaluation\nprint(confusion_matrix(yr_test,y_pred_smote))\nprint('\\n')\nprint(classification_report(yr_test,y_pred_smote))","514ce047":"model_rf = RandomForestClassifier(n_estimators=100, criterion='gini', random_state=100, max_depth=6, min_samples_leaf=8)","5c1d8ec9":"#Model Fitting || Resampled Features\nmodel_rf.fit(xr_train, yr_train)","51076b09":"#Predictions || Use resampled x test feature\ny_pred_rf = model_rf.predict(x_test)\n","cde3cef4":"print(confusion_matrix(y_test, y_pred_rf))\nprint('\\n')\nprint(classification_report(y_test, y_pred_rf))","778254ce":"sm_rf = SMOTEENN()","82acb4b9":"#Resample the variables\nX_resampled, y_resampled = sm_rf.fit_resample(x,y)","8760feb7":"#Trained the model || Used Resampled features\nxr_train, xr_test, yr_train, yr_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=100)","2834521b":"model_rf_smote = RandomForestClassifier(n_estimators=100, criterion='gini', max_depth=6, min_samples_leaf=8)","9a81f1aa":"#Model Fitting\nmodel_rf_smote.fit(xr_train, yr_train)","ed93fd3c":"y_pred_rf_smote = model_rf_smote.predict(xr_test)","ec857d6c":"print(confusion_matrix(yr_test, y_pred_rf_smote))\nprint('\\n')\nprint(classification_report(yr_test, y_pred_rf_smote))","7ff4f205":"import pickle","621c98a2":"filename = 'churn_telecom_model.sav'","72f0601d":"pickle.dump(model_rf_smote, open(filename, 'wb')) #Write Mode","06e644e6":"load_model = pickle.load(open(filename, 'rb'))","a3d06634":"load_model.score(xr_test, yr_test)","3569dab1":"- Check various attributes of the data like shape(rows and cols), Columns, datatypes","8e9c7b29":"**Conclusion: Random Forest Classifier provides || Accuracy : 93.76%**\n- Accuracy using Confusion Matrix = Sum of (TP+TN)\/ Sum (TP+TN+FP+FN)","dab1ee09":"In Bivariate Analysis, we don't use FOR, ENUMERATE || We have to create a User-Defined PLOT\n**In Bivariate Analysis**,\n- Step-1: Create a Uniplot fun.\n- Step-2: Set Style, Context, Parameters(rcparams)\n- Step-3: Use Pandas, & Matplolib to set Series, Width, size_inches, and scale of the plot\n- Step-4: Create a Uniplot & plot it","61fa3de1":"### Decision Tree Classifer","4dc41076":"**Load the Data**","15aeab36":"### Data Exploration\n##### 1. Plot distribution of individual predictors by churn\n**Univariate Analysis**","5399c3cb":"##### 5.) Divide the customers into bins based on tenure ( using pd.cut)\n- e.g. for tenure < 12 months: assign a tenure group of 1-12, for the tenure between 1-2 years, tenure group of 13-24:, so on..","ce8da6d2":"**Derived Insights**\n\n- **High Churn** seen in case of **Month to Month contracts, No Online Security, No Tech Support, First Year of Subscription** and **Fibre optics Internet**\n- **Low Churn** is seen in case of **Long term contracts, Subscriptions w\/o internet services, and Customers engaged for 5+ years**\n- Factors like Gender, Availability of Phone Service and hashtag of multiple lines have almost **NO impact on Churn.**\n- This is also evident from the HeatMap below","da66299f":"##### 2. Convert the target variable 'Churn' in a binary numeric variable i.e. Yes=1; No=0\n\n- Using (np.where)","5dbc810b":"* NOTE: Always convert object data - > Numeric Data || To find the real null values count\n##### 3.) As we can see there are 11 missing values in TotalCharges column. Let's Check these records","8446adb7":"##### 2.) Total Charges should be numeric amount. Let's Convert it to numerical data type using (pd.to_numeric)","ad2d3187":"### Missing Data - Initial Intuition\n- Here, we don't have any missing data.\n-- General Thumb Rules:\n\n- For features with less missing values- can use regression to predict the missing values or fill with the mean of the values present, depending on the feature.\n- For features with very high number of missing values- it is better to drop those columns as they give very less insight on analysis.\n- As there's no thumb rule on what criteria do we delete the columns with high number of missing values, but generally you can delete the columns, if you have more than 30-40% of missing values. But again there's a catch here, for example, Is_Car & Car_Type, People having no cars, will obviously have Car_Type as NaN (null), but that doesn't make this column useless, so decisions has to be taken wisely.\n#### Data Cleaning\n##### 1.) Create a copy base data for manipulation & processing","a317c6dc":"- Observation: Accuracy is Cursed, as data is Imbalanced\n- Resolution: Use SMOTE Analysis using SMOTEENN \n### SMOTE+ENN (Imbalanced Data Handling) - Decision Tree based\n- To improve the model accuracy\n","0fe71f03":"### Save the Model","f471af3b":"### Thank You!!","64b60575":"**Bivariate Analysis**","3489f3a3":"# Telco Churn Analysis\n\n**\"Data Set Info: Sample Data Set containing Telco customer data and showing customers left last month\"**","ce2e1327":"##### 4.) Missing Value Treatment\n-  Since the % of these records compared to the total data set is very low i.e. 0.15%. It is safe to ignore them for further processing","01f0fa83":"###### Insight: Churn is high when Monthly Charges are high","9deb2192":"##### 6. Remove columns not required for processing","b1150ba2":"**Suprising Insights, as Higher Churn at lower Total Charges**\nHowever if we combine the insights of 3 parameters i.e. Tenure, Monthly Charges & Total Charges then the picture is bit clear :- Higher **Monthly Charge** at lower tenure results into lower Total Charge. Hence, all these 3 factors viz Higher Monthly Charge, **Lower tenure** and **Lower Total Charge** are linked to **High Churn**.\n\n##### 6. Build a Correlation of all predictors with Churn","3b3ba22f":"- Total Charges increases as Monthly Charges increases-As expected\n\n##### 5. Churn by Monthly Charges and Total Charges | Using KDE plot | Measuring Density","d37f838d":"- Data is highly imbalanced, ratio = 73:27\n- So we analyse the data with other features while taking the target values seperately to get some insights","e6ba36ce":"**CONCLUSION**\nThese are some of the quick insights from this exercise:\n\n- 1.) Electronic check medium are the highest churners\n- 2.) Contract Type - Monthly customers are more likely to churn because of no contract terms, as they are free to go customers.\n- 3.) No Online security, No Tech Support category are high churners\n- 4.) Non senior Citizens are high churners","e4eae75c":"**Conclusion: Decision Tree Classifier provides || Accuracy : 93.75%**\n- Accuracy using Confusion Matrix = Sum of (TP+TN)\/ Sum (TP+TN+FP+FN)\n### Random Forest Classifier","b5f82187":"##### 3. Convert all the categorical variables into DUMMY variables","24c28b9f":"### Load the Model || perform Checks","ce10580e":"- Top 5 Records","cf26c2ca":"- SeniorCitizen is actually a categorical hence the 25%-50%-75% distribution isn't proper\n- 75% customers have tenure less than 55 months\n- Average monthly charges are USD 64.76 whereas 25% customers pay more than USD 89.85 per month","b37e5101":"### Model Building\n##### Imports","e68ff1ee":"##### 4. Relationship between Monthly Charges and Total Charges","1a2b22b9":"- Observation: Accuracy is Cursed, as data is Imbalanced\n- Resolution: Use SMOTE Analysis using SMOTEENN \n### SMOTE+ENN (Imbalanced Data Handling) - Random Forest based\n- To improve the model accuracy"}}