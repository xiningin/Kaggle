{"cell_type":{"b37e1f88":"code","98bdf3b7":"code","1914cbd2":"code","35a753db":"code","1a3fccd3":"code","9a0170e0":"code","71cd43b6":"code","ff8db4e7":"code","cd4256f1":"code","6f5bfab8":"code","5c572887":"code","80fea204":"code","bafe5d53":"code","47f6da8d":"code","2474da85":"code","646e2e5f":"code","fe4ac6c5":"code","be7ace34":"code","d8a077fd":"code","bbeb28a3":"code","65160c67":"code","c62e1d54":"code","418ce2e4":"code","790cbc36":"code","4c76be5a":"code","82f6de68":"code","456b68a5":"code","acca06bb":"code","a7e17b59":"code","c2160ab9":"code","63e8951a":"code","feac04bf":"code","7c57ae70":"code","f3aaec4d":"code","c66cd4a1":"code","5b86d8fb":"code","8f46937f":"code","70e52440":"code","58913d36":"code","9f21229a":"code","51807b96":"markdown","90746225":"markdown","dd2f2b9f":"markdown","f9375dbd":"markdown","ea5093f5":"markdown","9e5d88c5":"markdown","17b63e28":"markdown","91ca3825":"markdown","e193fcad":"markdown","07ec610e":"markdown","5b05a440":"markdown","cc584beb":"markdown"},"source":{"b37e1f88":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","98bdf3b7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nfrom matplotlib.cm import rainbow\n%matplotlib inline\nimport warnings\nimport seaborn as sns\nimport pickle\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n","1914cbd2":"df1=pd.read_csv('\/kaggle\/input\/alc-datathon-2021\/covid_mental_health_test.csv')\ndf=pd.read_csv('\/kaggle\/input\/alc-datathon-2021\/covid_mental_health_train.csv')\ndf.head()","35a753db":"df.dtypes","1a3fccd3":"#df.isna().sum()","9a0170e0":"\ndf.shape\n\n#Removing NaN \/ NULL vales from the data\ndf.dropna(axis = 0, inplace = True) # removing null value from dataset\nprint(df.shape)","71cd43b6":"import scipy as sp\nin_vars=list(df.keys())\nmean_list=[]\nmedian_list=[]\nfor var in in_vars:\n  mean=sp.mean(df[var]) # mean determination\n  median=sp.median(df[var]) # median determination\n  mode=sp.stats.mode(df[var]) #mode determination\n  print(var,' mean=', mean,' median=',median, '\\n mode=', mode)\n  mean_list.append(mean)\n  median_list.append(median)\nplt.plot(mean_list,median_list) #plotting mean vs median","ff8db4e7":" # pearson correlation identification between features and depression\n    \nfrom scipy.stats import pearsonr\nin_vars=list(df.keys())\nin_vars.pop(len(in_vars)-1) # Popoe out 'depression' column\nco=[]\nprint(in_vars)\nfor var in in_vars:\n  corr, p = pearsonr(df[var], df['depression']) # pearson correlation identification between features and depression\n  print('Pearsons correlation: %.3f' % corr,'pvalu %.9f' % p, var) \n  co.append(corr)\n  if corr<.05:\n    print(var)\nplt.hist(co)","cd4256f1":"\nfrom scipy.stats import spearmanr\nin_vars=list(df.keys())\nin_vars.pop(len(in_vars)-1) # Popoe out 'depression' column\nprint(in_vars)\npv=[]\nco1=[]\nfor var in in_vars:\n  corr, p = spearmanr(df[var], df['depression']) # spearman correlation identification between features and depression\n  #pv.append(p)\n  co1.append(corr)\n\n  print('Spearman correlation: %.3f' % corr,'pvalu %.11f' % p, var) \n  #if corr<.05:\n    #print(var)\nplt.hist(co1)","6f5bfab8":"from scipy.stats import ttest_ind\nin_vars=list(df.keys())\nin_vars.pop(len(in_vars)-1) # Popoe out 'depression' column\nprint(in_vars)\ntem_list=[]\nfor var in in_vars:\n  st,pvalue= ttest_ind(df[var], df['depression']) # Independent t-test\n  tem_list.append(st)\n  print('statistic=',st, var)\nplt.hist(tem_list)","5c572887":"\n#correlation\ndf.corr()","80fea204":"plt.figure(figsize = (26, 15)) \nsns.heatmap(df.corr(), cmap='Purples',annot=True, linecolor='Green', linewidths=1.0)\nplt.show()","bafe5d53":"healthy = df[(df['depression'] ==0) ].count()[1]\ndepressed = df[(df['depression'] ==1) ].count()[1]\nprint (\"num of pepole without depression: \"+ str(healthy))\nprint (\"num of pepole with chance for depression: \"+ str(depressed))","47f6da8d":"## Relationship between 2 categorical variables: chi-squared test\nfrom scipy import stats\ndef chi_sq_test(DF, var1, var2):\n    dataset_table = pd.crosstab(DF[var1], DF[var2])\n    print('contingency table between {} and {} is:\\n'.format(var1, var2))\n    print(dataset_table)\n    val = stats.chi2_contingency(dataset_table)\n    Observed_Values = dataset_table.values \n    Expected_Values = val[-1]\n    no_of_rows = dataset_table.shape[0]\n    no_of_columns = dataset_table.shape[1]\n    ddof = (no_of_rows-1)*(no_of_columns-1)\n    print(\"\\nDegree of Freedom:-\",ddof)\n    alpha = 0.05\n    chi_square = sum([(o-e)**2.\/e for o,e in zip(Observed_Values, Expected_Values)])\n    chi_square_statistic = chi_square[0]+chi_square[1]\n    critical_value = stats.chi2.ppf(q=1-alpha,df=ddof)\n    p_value = 1-stats.chi2.cdf(x=chi_square_statistic,df=ddof)\n    \n    if chi_square_statistic>=critical_value and p_value<=alpha:\n        print(\"chi_square_statistic is {} and p-value is {}. So, there is a relationship between 2 categorical variables\".format(chi_square_statistic, p_value))\n    elif chi_square_statistic>=critical_value and p_value>alpha:\n        print(\"chi_square_statistic is {} and p-value is {}. So, there is a weak relationship between 2 categorical variables, but not evident enough\".format(chi_square_statistic, p_value))\n    else:\n        print(\"chi_square_statistic is {} and p-value is {}. So, these 2 variables are not related at all.\".format(chi_square_statistic, p_value))\n","2474da85":"chi_sq_test(df, 'gender', 'depression')","646e2e5f":"chi_sq_test(df, 'healthy_diet', 'depression')","fe4ac6c5":"chi_sq_test(df, 'past_physical', 'depression')\n","be7ace34":"chi_sq_test(df, 'city', 'depression')","d8a077fd":"chi_sq_test(df, 'interaction_online', 'depression')","bbeb28a3":"chi_sq_test(df, 'interaction_offline', 'depression')","65160c67":"chi_sq_test(df, 'interaction_offline', 'depression')","c62e1d54":"X = df[['gender', 'age', 'job', 'health_worker_self','health_worker_family',  'income_group','past_physical','current_physical',  'current_mental', 'past_mental',\n      'exercise', 'healthy_diet', 'healthy_sleep', 'activity','interaction_offline', 'interaction_online', 'preventive_behaviors','optimism', 'deterioration_economy', 'deterioration_interact','frustration', 'covid_anxiety', 'covid_sleepless', 'difficulty_living',\n    'difficulty_work']]\n#X=df[['difficulty_work','covid_sleepless','frustration','optimism','interaction_online','healthy_sleep','health_worker_self', 'current_physical', 'current_mental']]\ny = df['depression']\n\n\n#X=df[['deterioration_economy','deterioration_interact','frustration','covid_anxiety','covid_sleepless','difficulty_living','difficulty_work']]","418ce2e4":"\nId=df1['id']\n\ntest_X = df1[[ 'gender', 'age', 'job', 'health_worker_self','health_worker_family', 'income_group','past_physical',\n   'current_physical', 'current_mental', 'past_mental','exercise', 'healthy_diet', 'healthy_sleep', 'activity',\n'interaction_offline', 'interaction_online', 'preventive_behaviors','optimism', 'deterioration_economy', 'deterioration_interact',\n'frustration', 'covid_anxiety', 'covid_sleepless', 'difficulty_living','difficulty_work']]\n#test_X=df1[['difficulty_work','covid_sleepless','frustration','optimism','interaction_online','healthy_sleep','health_worker_self', 'current_physical', 'current_mental']]\n#test_X=df1[['deterioration_economy','deterioration_interact','frustration','covid_anxiety','covid_sleepless','difficulty_living','difficulty_work']]","790cbc36":"import xgboost as xg\nimport xgboost as xgb\n# Instantiation \n#xgb_r = xg.XGBRegressor(objective ='reg:linear', n_estimators = 10, seed = 123)\nxgb_r = xg.XGBClassifier(objective=\"binary:logistic\", random_state=42,eval_metric=\"auc\")\n# Fitting the model \nxgb_r.fit(X, y) \n  \n# Predict the model \npred = xgb_r.predict_proba(test_X)","4c76be5a":"pred","82f6de68":"\nprint(\"Accuracy of train:\",xgb_r.score(X,y))","456b68a5":"\nresult1=pd.DataFrame({'id':df1['id'],'depression':pred[:,1]})\nresult1\n","acca06bb":"result1.to_csv('team8_Empire_XGBoost_binarylogistic_updated_feature1.csv',index=False)","a7e17b59":"from sklearn import model_selection\n\nkfold = model_selection.KFold(n_splits=10, random_state=7, shuffle=True)\nscoring = 'accuracy'\nlogloss_score = model_selection.cross_val_score(xgb_r, X, y, cv=kfold, scoring=scoring)\nprint(\"Logloss: %.3f (%.3f)\" % (logloss_score.mean(), logloss_score.std()))","c2160ab9":"test_df = df1\nraw_train_df = df\n# using isnull() function   \nraw_train_df.isnull().any()\n# drop all rows with any NaN and NaT values\n#raw_train_df = raw_train_df.dropna()\n\n#fill null values with the mean of the corresponding column\nraw_train_df = raw_train_df.fillna(raw_train_df.mean())\nraw_train_df.info()","63e8951a":"array = raw_train_df.values\nX = array[:,1:28]\n\ny = array[:,28]","feac04bf":"from sklearn.feature_selection import RFE","7c57ae70":"# feature selection, top best 24 feature using Recursive Feature Elimination\nmodel = LogisticRegression(solver='lbfgs')\nrfe = RFE(model, 24)\nlogistic_model = rfe.fit(X, y)\nprint(\"Num Features: %d\" % logistic_model.n_features_)\nprint(\"Selected Features: %s\" % logistic_model.support_)\nprint(\"Feature Ranking: %s\" % logistic_model.ranking_)","f3aaec4d":"#processing test dataset and prediction on them\n\ntest_df = test_df.fillna(test_df.mean())\n\ntest_dataset = test_df.values\ntest_dataset = test_dataset[:,1:28]\n\npred_test = logistic_model.predict_proba(test_dataset)\nmin_test = min(pred_test[:,1])\nmin_test","c66cd4a1":"test_dataset.shape","5b86d8fb":"print(\"Accuracy of train:\",rfe.score(X,y))","8f46937f":"#exporting result\nresult=pd.DataFrame({'id':test_df['id'],'depression':pred_test[:,1]})\nresult","70e52440":"result.to_csv('team8_Empire_LogisticRegression_pred_col1_feature_elimination.csv',index=False)","58913d36":"\n\n# Performance Metrics: Log Loss","9f21229a":"from sklearn import model_selection\n\nkfold = model_selection.KFold(n_splits=10, random_state=7, shuffle=True)\nscoring = 'accuracy'\nlogloss_score = model_selection.cross_val_score(logistic_model, X, y, cv=kfold, scoring=scoring)\nprint(\"Logloss: %.3f (%.3f)\" % (logloss_score.mean(), logloss_score.std()))","51807b96":"We have used several models to find out which one is the perfect suit for us. We have used Linear regression, SVR, Xgboost, Decision tree, and logistic regression.\n\n We got the best value using logistic regression and Xboost.\n\nHere, in xgboost  we get. 824 considering all features..\nBut after feature extraction -> \nLogistic regression give. .822629 using 24 features after Recusrive Feature elimination","90746225":"# Descriptive analysis","dd2f2b9f":"Performance Metrics: Log Loss","f9375dbd":"# Data input","ea5093f5":"# Required Libraies are Imported here","9e5d88c5":"Logistic regression\n","17b63e28":"## Correlation matrix","91ca3825":"# Independent t-test","e193fcad":"**Removing NaN \/ NULL vales from the data**","07ec610e":" # spearman correlation identification between features and depression\n ","5b05a440":"\n**Data Visulaization**","cc584beb":"# We determine the mean, median and mode for our features."}}