{"cell_type":{"b1cb5a16":"code","dec550eb":"code","90f2f011":"code","80ed589a":"code","7a58ea3c":"code","914cfc77":"code","7fa33510":"code","198eaea7":"code","7baa2aaa":"code","1226ee62":"code","75265621":"code","f120de19":"code","c1412047":"code","4309bd64":"code","be024703":"code","e2fb036f":"code","2e24e211":"code","86359301":"code","12fe510d":"code","95e2c90e":"code","4fdf6dc2":"code","f700f4a4":"code","4dbc0d59":"code","5cb8365b":"code","a1e1446a":"code","6a745682":"code","026fe07f":"code","385c5242":"code","90681610":"code","c50c4669":"code","2200f9db":"code","e0e05ec7":"markdown","f1f06fbe":"markdown"},"source":{"b1cb5a16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dec550eb":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns","90f2f011":"df = pd.read_csv(\"\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\ndf.head()","80ed589a":"df.shape","7a58ea3c":"df.columns","914cfc77":"df.dtypes","7fa33510":"df.DEATH_EVENT = df.DEATH_EVENT.map({0: 'Recovered', 1: 'Died'})\ndf.diabetes = df.diabetes.map({0: 'No', 1: 'Yes'})","198eaea7":"df['DEATH_EVENT'].value_counts()","7baa2aaa":"ax = sns.catplot(x=\"DEATH_EVENT\", kind='count', data=df, height=5, legend=True)\nplt.show()","1226ee62":"df.age.value_counts().sort_index()","75265621":"df.age = pd.cut(df.age, bins=3, labels=[\"Middle Age\", \"Adulthood\", \"Older Adulthood\"]) #to create bins in age column","f120de19":"df.age.value_counts()","c1412047":"df.insert(0, 'Id', range(1, 1 + len(df))) #defining custom Id column\ndf","4309bd64":"def show_donut_plot(col): #donut plot function\n    \n    rating_data = df.groupby(col)[['Id']].count().head(10)\n    plt.figure(figsize = (12, 8))\n    plt.pie(rating_data[['Id']], autopct = '%1.0f%%', startangle = 140, pctdistance = 1.1, shadow = True)\n\n    # create a center circle for more aesthetics to make it better\n    gap = plt.Circle((0, 0), 0.5, fc = 'white')\n    fig = plt.gcf()\n    fig.gca().add_artist(gap)\n    \n    plt.axis('equal')\n    \n    cols = []\n    for index, row in rating_data.iterrows():\n        cols.append(index)\n    plt.legend(cols)\n    \n    plt.title('Donut Plot: Age categories involving Heart Failures', loc='center')\n    plt.show()","be024703":"show_donut_plot('age')","e2fb036f":"sns.relplot(x=\"serum_creatinine\", y=\"serum_sodium\", data=df, kind='scatter', hue='age', col='diabetes', height=6, alpha=0.6)\nplt.show()","2e24e211":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","86359301":"event = le.fit_transform(df.DEATH_EVENT)","12fe510d":"import plotly.express as px\nfig = px.sunburst(df, path=['age', 'ejection_fraction'], values=event)\nfig.show()","95e2c90e":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Scatter3d(\n    x=df.creatinine_phosphokinase,\n    y=df.platelets,\n    z=df.serum_creatinine,\n    name = 'Heart Failure Prediction',\n    mode='markers',\n    marker=dict(\n        size=10,\n        color = df['platelets'],\n        colorscale = 'Viridis',\n    )\n)])\nfig.show()","4fdf6dc2":"#Analysing the importance of features in the dataframe\n\ndef plot_feature_importance(importance,names,model_type):\n\n    #Create arrays from feature importance and feature names\n    feature_importance = np.array(importance)\n    feature_names = np.array(names)\n\n    #Create a DataFrame using a Dictionary\n    data={'feature_names':feature_names,'feature_importance':feature_importance}\n    fi_df = pd.DataFrame(data)\n\n    #Sort the DataFrame in order decreasing feature importance\n    fi_df.sort_values(by=['feature_importance'], ascending=False,inplace=True)\n\n    #Define size of bar plot\n    plt.figure(figsize=(10,8))\n    #Plot Searborn bar chart\n    sns.barplot(x=fi_df['feature_importance'], y=fi_df['feature_names'])\n    #Add chart labels\n    plt.title(model_type + ' FEATURE IMPORTANCE')\n    plt.xlabel('FEATURE IMPORTANCE')\n    plt.ylabel('FEATURE NAMES')","f700f4a4":"df.dtypes","4dbc0d59":"df.age = le.fit_transform(df.age)\ndf.DEATH_EVENT = le.fit_transform(df.DEATH_EVENT)\ndf.diabetes = le.fit_transform(df.diabetes)","5cb8365b":"rf_model = RandomForestClassifier().fit(df.drop([\"Id\",\"DEATH_EVENT\"], axis=1),df[\"DEATH_EVENT\"])","a1e1446a":"plot_feature_importance(rf_model.feature_importances_,df.drop([\"Id\",\"DEATH_EVENT\"], axis=1).columns,'RANDOM FOREST')","6a745682":"#List of classifiers\n\nclfs = {\n    'mnb': MultinomialNB(),\n    'gnb': GaussianNB(),\n    'svm1': SVC(kernel='linear'),\n    'svm2': SVC(kernel='rbf'),\n    'svm3': SVC(kernel='sigmoid'),\n    'mlp1': MLPClassifier(),\n    'mlp2': MLPClassifier(hidden_layer_sizes=[100, 100]),\n    'ada': AdaBoostClassifier(),\n    'dtc': DecisionTreeClassifier(),\n    'rfc': RandomForestClassifier(),\n    'gbc': GradientBoostingClassifier(),\n    'lr': LogisticRegression()\n}","026fe07f":"#accuracy for the list of classifiers\n\naccuracy_scores = dict()\ntrain_x, test_x, train_y, test_y = train_test_split(df.drop([\"Id\",\"DEATH_EVENT\"], axis=1), df[\"DEATH_EVENT\"], test_size= 0.3)\nfor clf_name in clfs:\n    \n    clf = clfs[clf_name]\n    clf.fit(train_x, train_y)\n    y_pred = clf.predict(test_x)\n    accuracy_scores[clf_name] = accuracy_score(y_pred, test_y)\n    print(clf, '-' , accuracy_scores[clf_name])","385c5242":"accuracy_scores = dict(sorted(accuracy_scores.items(), key = lambda kv:(kv[1], kv[0]), reverse= True))\naccuracy_scores ","90681610":"villi = list(accuracy_scores.keys())[0]\nprint(\"Classifier with high accuracy --> \",clfs[villi])\nprint(\"With the accuracy of\",accuracy_scores[villi])","c50c4669":"confusion_matrix(clfs[villi].predict(test_x), test_y)","2200f9db":"fig,ax=plt.subplots(figsize=(10,5))\nsns.regplot(y=test_y,x=clfs[villi].predict(test_x),marker=\"*\")\nplt.show()","e0e05ec7":"## Let's start","f1f06fbe":"## Importing necessary packages"}}