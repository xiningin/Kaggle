{"cell_type":{"f602a962":"code","0d902fda":"code","527904e7":"code","eb0abfe4":"code","513c2f88":"code","e2ca09cd":"code","ed817846":"code","b1678b97":"code","b1e78216":"code","13179453":"code","95d60159":"code","59bd2b8a":"code","929704a3":"code","0031f1e2":"code","afe0e1fe":"code","682cc568":"code","92df1b2e":"code","0f2e5cf9":"code","27446d66":"code","252f7562":"code","cab2752c":"code","604f48c5":"code","c117b6c2":"code","c56b2cf6":"code","84f402db":"code","af78a6ff":"code","73cd9b05":"code","b41e40de":"code","8a984e5c":"code","323e293f":"code","e7e3c282":"code","2b24301f":"code","82e9a81b":"code","bcab14ec":"code","087b1e16":"code","ce192c11":"code","5342f313":"code","ca34ae29":"code","c7f21713":"code","083a60ac":"markdown","0bf7ab16":"markdown","9bcd8e36":"markdown"},"source":{"f602a962":"import numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0d902fda":"df = pd.read_csv('..\/input\/bank-term-deposit\/bank-full.csv', sep=';')","527904e7":"df","eb0abfe4":" ##Input variables:\n   # bank client Data \n   #1 - age (numeric)\n   #2 - job : type of job (categorical: \"admin.\",\"unknown\",\"unemployed\",\"management\",\"housemaid\",\"entrepreneur\",\"student\",\n                                         # \"blue-collar\",\"self-employed\",\"retired\",\"technician\",\"services\") \n   #3 - marital : marital status (categorical: \"married\",\"divorced\",\"single\"; note: \"divorced\" means divorced or widowed)\n   #4 - education (categorical: \"unknown\",\"secondary\",\"primary\",\"tertiary\")\n   #5 - default: has credit in default? (binary: \"yes\",\"no\")\n   #6 - balance: average yearly balance, in euros (numeric) \n   #7 - housing: has housing loan? (binary: \"yes\",\"no\")\n   #8 - loan: has personal loan? (binary: \"yes\",\"no\")\n   # related with the last contact of the current campaign:\n   #9 - contact: contact communication type (categorical: \"unknown\",\"telephone\",\"cellular\") \n  # 10 - day: last contact day of the month (numeric)\n  # 11 - month: last contact month of year (categorical: \"jan\", \"feb\", \"mar\", ..., \"nov\", \"dec\")\n #  12 - duration: last contact duration, in seconds (numeric)\n   # other attributes:\n  #13 - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)\n  #14 - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric, -1 means client was not previously contacted)\n#  15 - previous: number of contacts performed before this campaign and for this client (numeric)\n # 16 - poutcome: outcome of the previous marketing campaign (categorical: \"unknown\",\"other\",\"failure\",\"success\")\n\n  # Target  variable (desired target):\n  # 17 - y - has the client subscribed a term deposit? (binary: \"yes\",\"no\")","513c2f88":"df.shape","e2ca09cd":"df.head(20)","ed817846":"df.info()","b1678b97":"df['y'].value_counts()","b1e78216":"df.describe()","13179453":"df['education'].unique()","95d60159":"df['job'].unique()","59bd2b8a":"sns.countplot(x='y', data=df,palette='hls')\nplt.show()\nplt.savefig('count_fig')","929704a3":"#count_sub = len(data[data['y']==1])\n\ncount_no_sub = len(df[df['y']=='no'])\ncount_sub = len(df[df['y']=='yes'])\nprint(count_no_sub)\nprint(count_sub)","0031f1e2":"pct_of_no_sub = count_no_sub\/(count_no_sub+count_sub)\nprint(\"percentage of no subscription is\", pct_of_no_sub*100)\npct_of_sub = count_sub\/(count_no_sub+count_sub)\nprint(\"percentage of subscription\", pct_of_sub*100)","afe0e1fe":"df.groupby('marital').mean()","682cc568":"df.groupby('job').mean()","92df1b2e":"df.groupby('education').mean()","0f2e5cf9":"pd.crosstab(df.job,df.y).plot(kind='bar')\nplt.title('Purchase Frequency for Job Title')\nplt.xlabel('Job')\nplt.ylabel('Frequency of Purchase')\nplt.savefig('purchase_fre_job')","27446d66":"pd.crosstab(df.education,df.y).plot(kind='bar')\nplt.title('Purchase Frequency for Job Title')\nplt.xlabel('Job')\nplt.ylabel('Frequency of Purchase')\nplt.savefig('purchase_fre_job')","252f7562":"table=pd.crosstab(df.marital,df.y)\ntable.div(table.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)\nplt.title('Stacked Bar Chart of Marital Status vs Purchase')\nplt.xlabel('Marital Status')\nplt.ylabel('Proportion of Customers')\nplt.savefig('mariral_vs_pur_stack')","cab2752c":"pd.crosstab(df.day,df.y).plot(kind='bar')\nplt.title('Purchase Frequency for Day of Months')\nplt.xlabel('No of Day ')\nplt.ylabel('Frequency of Purchase')\nplt.savefig('per_no ofday _bar')","604f48c5":"pd.crosstab(df.month,df.y).plot(kind='bar')\nplt.title('Purchase Frequency for Month')\nplt.xlabel('Month')\nplt.ylabel('Frequency of Purchase')\nplt.savefig('pur_fre_month_bar')","c117b6c2":"plt.figure(figsize=(15,10))\nplt.tight_layout()\nsns.distplot(df['age'])","c56b2cf6":"pd.crosstab(df.poutcome,df.y).plot(kind='bar')\nplt.title('Purchase Frequency for Poutcome')\nplt.xlabel('Poutcome')\nplt.ylabel('Frequency of Purchase')\nplt.savefig('pur_fre_pout_bar')","84f402db":"# Create dummy variables","af78a6ff":"cat_vars=['job','marital','education','default','housing','loan','contact','month','day','poutcome']\nfor var in cat_vars:\n    cat_list='var'+'_'+ var\n    cat_list= pd.get_dummies(df[var], prefix=var)\n    df1 = df.join(cat_list,how='left')\n    df = df1\ncat_vars=['job','marital','education','default','housing','loan','contact','month','day','poutcome']\ndata_vars=df.columns.values.tolist()\nto_keep=[i for i in data_vars if i not in cat_vars]","73cd9b05":"data_final=df[to_keep]\ndata_final.columns.values","b41e40de":"data_final.shape","8a984e5c":"X = data_final.loc[:, data_final.columns != 'y']\ny = data_final.loc[:, data_final.columns == 'y']","323e293f":"from sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\nos = SMOTE(random_state=0)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\ncolumns = X_train.columns","e7e3c282":"os_data_X,os_data_y=os.fit_sample(X_train, y_train)\nos_data_X = pd.DataFrame(data=os_data_X,columns=columns )\nos_data_y= pd.DataFrame(data=os_data_y,columns=['y'])","2b24301f":"# we can Check the numbers of our data\nprint(\"length of oversampled data is \",len(os_data_X))\nprint(\"Number of no subscription in oversampled data\",len(os_data_y[os_data_y['y']=='no']))\nprint(\"Number of subscription\",len(os_data_y[os_data_y['y']=='yes']))","82e9a81b":"print(\"Proportion of no subscription data in oversampled data is \",len(os_data_y[os_data_y['y']=='no'])\/len(os_data_X))\nprint(\"Proportion of subscription data in oversampled data is \",len(os_data_y[os_data_y['y']=='yes'])\/len(os_data_X))","bcab14ec":"data_final_vars=data_final.columns.values.tolist()\ny=['y']\nX=[i for i in data_final_vars if i not in y]\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nrfe = RFE(logreg, 20)\nrfe = rfe.fit(os_data_X, os_data_y.values.ravel())\nprint(rfe.support_)\nprint(rfe.ranking_)","087b1e16":"cols=[ 'job_blue-collar', 'job_housemaid',  'default_no', 'contact_cellular', 'contact_telephone', 'month_apr', 'month_aug', 'month_dec', 'month_jul', 'month_jun', 'month_mar', \n      'month_may', 'month_nov', 'month_oct', \"poutcome_failure\", \"poutcome_success\"] \nX=os_data_X[cols]\ny=os_data_y['y']","ce192c11":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","5342f313":"#Predicting the test set results and calculating the accuracy\ny_pred = logreg.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))","ca34ae29":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test, y_pred)\nprint(confusion_matrix)","c7f21713":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","083a60ac":"# Logistic Regression Model Fitting","0bf7ab16":"# Confusion Matrix","9bcd8e36":"# Interpretation:\nThe entire test set, 86% of the promoted term deposit were the term deposit that the customers liked. Of the entire test set, 86% of the customer\u2019s preferred term deposits that were promoted."}}