{"cell_type":{"dcf0602c":"code","a8d1d9c7":"code","cc27b62e":"code","18c5793b":"code","26db373e":"code","dc6a806d":"code","4c419625":"code","27893f95":"code","29bd48f7":"code","f9b1248f":"code","c0babe58":"code","02cbd03b":"code","778657f6":"code","ca2579a7":"code","e44b506c":"code","1b47cc88":"code","3d2c25e8":"code","eaf7589d":"markdown","e83e52c2":"markdown","7cb22dcc":"markdown","22948949":"markdown","bf14c870":"markdown","0f27b303":"markdown","220521c9":"markdown","b6fb7682":"markdown"},"source":{"dcf0602c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8d1d9c7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt","cc27b62e":"#importing the data\ndf = pd.read_csv(\"\/kaggle\/input\/grip-task1\/Iris_dataset.csv\")\ndf.head()","18c5793b":"#since we need to create the clusters ourselves, we'll drop the \"Species\" column\n\ndf.drop([\"Species\"],axis=1,inplace = True)","26db373e":"df.head()","dc6a806d":"df.describe()","4c419625":"df.shape","27893f95":"df.info()","29bd48f7":"X = df.iloc[:, [1, 2, 3, 4]].values\ndistortion=[]\ninertia=[]\nmapping_1={}\nmapping_2={}\nK = range(1,11)\n","f9b1248f":"from tqdm import tqdm\nfrom sklearn.cluster import KMeans\nfrom scipy.spatial.distance import cdist\nfor i in tqdm(K):\n    #creating the model and fitting\n    model = KMeans(n_clusters = i).fit(X)\n    model.fit(X)\n    distortion.append(sum(np.min(cdist(X, model.cluster_centers_,\n                                        'euclidean'), axis=1)) \/ X.shape[0])\n    inertia.append(model.inertia_)\n    mapping_1[i] = sum(np.min(cdist(X, model.cluster_centers_,\n                                   'euclidean'), axis=1)) \/ X.shape[0]\n    mapping_2[i] = model.inertia_\n    ","c0babe58":"plt.plot(K,distortion,'bx--')\nplt.xlabel(\"Number of clusters\")\nplt.ylabel(\"Distortion\")\nplt.title(\"Elbow method using distortion\")\nplt.show()","02cbd03b":"plt.plot(K,inertia,'bx--')\nplt.xlabel(\"Number of clusters\")\nplt.ylabel(\"Inertia\")\nplt.title(\"Elbow method using Inertia\")\nplt.show()","778657f6":"#applying Kmeans classifier to the dataset\n\nk_model = KMeans(n_clusters=3)\ny_kmean = k_model.fit_predict(X)","ca2579a7":"#viewing our classification array\ny_kmean","e44b506c":"#co-ordiantes of cluster centers\n\nk_model.cluster_centers_","1b47cc88":"#plotting the clusters\nplt.scatter(X[y_kmean==0,0],X[y_kmean==0,1],c='yellow')\nplt.scatter(X[y_kmean==1,0],X[y_kmean==1,1],c='green')\nplt.scatter(X[y_kmean==2,0],X[y_kmean==2,1],c='blue')\n\n#plotting the centers\nplt.scatter(k_model.cluster_centers_[:,0],k_model.cluster_centers_[:,1],c='red')\n\nplt.plot()","3d2c25e8":"# Import libraries\nfrom mpl_toolkits import mplot3d\n \n# Creating figure\nfig = plt.figure(figsize = (16, 9))\nax = plt.axes(projection =\"3d\")\n \n# Creating plot\nax.scatter3D(X[y_kmean==0,0],X[y_kmean==0,1],X[y_kmean==0,2] ,c = \"yellow\")\nax.scatter3D(X[y_kmean==1,0],X[y_kmean==1,1],X[y_kmean==1,2] ,c = \"green\")\nax.scatter3D(X[y_kmean==2,0],X[y_kmean==2,1],X[y_kmean==2,2] ,c = \"blue\")\n\n#cluster centers\nax.scatter3D(k_model.cluster_centers_[:,0],k_model.cluster_centers_[:,1],k_model.cluster_centers_[:,2],c='red')\nplt.title(\"3D scatter plot\")\n \n# show plot\nplt.show()","eaf7589d":"Since we do not know the number of clusters we might need for proper classification, we will use an algorithm called **Elbow method** to find the optimal value of K in K means clustering. For elbow method we have to define 2 things:\n1) Distortion:  It is calculated as the average of the squared distances from the cluster centers of the respective clusters. Typically, the Euclidean distance metric is used.\n\n2) Inertia: It is the sum of squared distances of samples to their closest cluster center.\nNow we iterate through a few values for our K and calculate the values of distortion and inertial for all the values of K in the range.","e83e52c2":"# Importing dataset and Exploring the data****","7cb22dcc":"**Visualizing the results**","22948949":"Thus from both the Elbow methods, we can conclude that the optimal number of clusters is 3. Thus k=3 for our Kmeans cluster model.","bf14c870":"# **Model**","0f27b303":"**3D Scatter plot for better understanding**","220521c9":"# **Finding the optimal number of clusters**","b6fb7682":"# **Visulaizing the clusters**"}}