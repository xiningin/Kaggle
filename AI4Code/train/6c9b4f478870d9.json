{"cell_type":{"8f06c267":"code","d5886235":"code","19006c3b":"code","5c9880e5":"code","de773dc2":"code","985b930d":"code","fd32bc6c":"code","85edcae9":"code","be21bdcb":"code","e56702d5":"code","34b957d4":"code","87fc77c5":"code","45acaae9":"markdown","1cdcb624":"markdown","8ae0121e":"markdown","aa13e2e7":"markdown","f0c17d83":"markdown","6bca7856":"markdown","9a38a00b":"markdown","7f453aa3":"markdown","9e73e0d8":"markdown","d4564f21":"markdown"},"source":{"8f06c267":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd","d5886235":"home_data = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\n\nfeatures = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\n\nx = home_data[features]\ny = home_data['SalePrice']\n\ntrain_x, val_x, train_y, val_y = train_test_split(x, y , random_state = 100)\n","19006c3b":"def get_mae_dt(max_leaf_nodes,train_x, train_y, val_x, val_y):\n    dt_model = DecisionTreeRegressor(max_leaf_nodes = max_leaf_nodes, random_state = 100)\n    dt_model.fit(train_x, train_y)\n    dt_pred_y = dt_model.predict(val_x)\n    dt_mea = mean_absolute_error(val_y, dt_pred_y)\n    return dt_mea","5c9880e5":"test_leaves = [40,80,90,91,95,96,97,98,100,160]","de773dc2":"for max_leaf_nodes in test_leaves:\n    mea = get_mae_dt(max_leaf_nodes, train_x, train_y, val_x, val_y)\n    print(f'The MEA for max_leaf_nodes of {max_leaf_nodes} is {mea:.2f}')","985b930d":"test_estimators = [50,60,80,100,120,150,155,160,165,170]","fd32bc6c":"def get_mae_rf(n_estimator,train_x, train_y, val_x,val_y):\n    rf_model = RandomForestRegressor(n_estimators = n_estimator,random_state = 100, max_leaf_nodes = 166)\n    rf_model.fit(train_x, train_y)\n    rf_pred_y = rf_model.predict(val_x)\n    mea = mean_absolute_error(val_y, rf_pred_y)\n    return mea","85edcae9":"for n_estimator in test_estimators:\n    rf = get_mae_rf(n_estimator, train_x,train_y,val_x,val_y)\n    print(f'The MEA for n_estimators of {n_estimator} is {rf:.2f}')","be21bdcb":"rf_model = RandomForestRegressor(random_state = 100, n_estimators = 120, max_leaf_nodes = 166)\nrf_model.fit(x,y)","e56702d5":"test_data = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')\nx_test = test_data[features]","34b957d4":"y_test = rf_model.predict(x_test)","87fc77c5":"output = pd.DataFrame({'Id': test_data.Id,\n                       'SalePrice': y_test})\noutput.to_csv('submission.csv', index=False)","45acaae9":"The best number of leaves is 96, after that we are overfiting our model","1cdcb624":"Comparing the 2 models presented, we see that Random Forest has the best performance considering only MEA as a criteria","8ae0121e":"For the Decision Tree Model, we are going to check a variety of max_leaf_nodes parameters, in order to check improvements in the MEA value.\n\nFirst, as taught on the introduction course, let`s build a function that loops the MEA values for us.","aa13e2e7":"#  **This is my first machine learning model, so be kind with me LOL**","f0c17d83":"First, let`s import relevant libraries","6bca7856":"Lets run our function in a loop to test all max_leaf_nodes we are trying to investigate","9a38a00b":"With the information I have so far, I can only try 2 different models: Decision Tree and Random Forest. So based on the Mean Absolute Error, let`s try to choose the best one.\n\nFirst of all, we have to understand the accuracy of our model. So first, lets use the train data to check MEA values of our models.\n","7f453aa3":"Lets now, test and submit our data to see our score on Kaggle","9e73e0d8":"Now we have to check the other model we have learned: Random Forest","d4564f21":"The best n_estimator so far is 120 if we fix max_leaf_nodes at 166. N_estimator indicates the number of parallel Decision Trees"}}