{"cell_type":{"499b05fa":"code","e8df1644":"code","d02a8208":"code","08a0bb3b":"code","68af989a":"code","5275d407":"code","ae7342e1":"code","4cfa4ada":"code","be7b0e0d":"code","f25142ba":"code","b59f11cf":"code","b22570a7":"code","2372b288":"code","2f5b1ab0":"code","d25497e9":"code","fcda7ced":"code","30ed329c":"code","17edd404":"code","09da0100":"code","2c18c615":"code","af4edcce":"code","ac938e06":"code","eea67f0f":"code","621f69dd":"code","94dd5cda":"code","d3ef18dc":"code","86d460a4":"code","e2228e61":"code","22c7c62e":"code","3e714ac5":"code","5b22e7e3":"code","3a5ec4b6":"code","e27fbb4d":"code","22a2dac3":"code","5f22c44c":"code","13a262af":"code","79b3f6c4":"code","52324d14":"code","c85081a9":"code","ccf7fba7":"code","5a57b21d":"code","8b268d03":"code","d58861ea":"code","c57222c3":"code","fd4e95b5":"code","a8bd28e6":"code","cab2a732":"code","26052220":"code","081de7c2":"code","18d0c399":"code","39dc512e":"code","0d11a034":"code","6c339846":"code","53525f76":"code","2b907e6d":"code","d699ae81":"code","0917d833":"code","827483b2":"code","7f25b48d":"code","afacbfdc":"code","0fd4f857":"code","7fb591d4":"code","aaaafcc5":"code","124954eb":"code","84dcbce8":"code","caee6047":"code","50bc2377":"code","dff85fdf":"markdown","9ce9a75f":"markdown","339b0408":"markdown","6f34dcae":"markdown","219d7034":"markdown","59b3869f":"markdown","e40c8099":"markdown","a48d0640":"markdown","2a3fc1a0":"markdown","1f2d3190":"markdown","bb937bfd":"markdown","21393326":"markdown","334166ca":"markdown","26414809":"markdown","24da9645":"markdown","cad30169":"markdown"},"source":{"499b05fa":"import numpy as np \nimport pandas as pd \n#\u53ef\u8996\u5316\u7cfb\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#\u6a5f\u68b0\u5b66\u7fd2\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold, StratifiedKFold\n#\u3088\u304f\u898b\u308b\u3051\u3069\u672a\u3060\u308f\u304b\u3089\u3093\nimport warnings\nimport time\n#os\u3068\u540c\u3058\u3000\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3068\u304b\u3082\u898b\u308c\u308b\nimport sys\nimport datetime\n#\u53ef\u8996\u5316\u3000\u30c0\u30d6\u3063\u3066\u306d\uff1f\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#RMSE\u51fa\u3059\u305f\u3081\u306b\u4f7f\u3046\nfrom sklearn.metrics import mean_squared_error\n#\u30b5\u30a4\u30ad\u30c3\u30c8\u30e9\u30fc\u30f3\u3067\u4f7f\u3046\uff08\u56de\u5e30\uff1f\u30ca\u30a4\u30fc\u30d5\u30d9\u30a4\u30ba\uff1f\uff09\nfrom sklearn.linear_model import BayesianRidge\n#warning\u3068\u30bb\u30c3\u30c8\u3067\u898b\u308b\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n#\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\nimport gc","e8df1644":"#\u3053\u306e\u30ab\u30fc\u30cd\u30eb\u3067\u306f\u4f7f\u3063\u3066\u306a\u3044\u3051\u308c\u3069\u4e00\u5fdc\u8aad\u307f\u8fbc\u307f\u3000\u89e3\u8aac\nmerchants = pd.read_csv('..\/input\/elo-merchant-category-recommendation\/merchants.csv')\nmerchants.head()","d02a8208":"#\u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f parse_date\u306f\u6307\u5b9a\u3057\u305f\u30ab\u30e9\u30e0\u3092\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u578b\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\u3000\u4eca\u56de\u306fperchase_date=\u8cfc\u5165\u65e5\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\nnew_transactions = pd.read_csv('..\/input\/elo-merchant-category-recommendation\/new_merchant_transactions.csv', parse_dates=['purchase_date'])\nhistorical_transactions = pd.read_csv('..\/input\/elo-merchant-category-recommendation\/historical_transactions.csv', parse_dates=['purchase_date'])\nnew_transactions.head()","08a0bb3b":"historical_transactions.head()","68af989a":"#\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u6e1b\u3089\u3059\u95a2\u6570\u3092\u5b9a\u7fa9\ndef reduce_mem_usage(df, verbose=True):\n    #\u578b\u5ba3\u8a00\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    #\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u5272\u5408\u3092\u683c\u7d0d\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    #\u30ab\u30e9\u30e0\u540d\u3092\u4e00\u3064\u305a\u3064\u5f15\u3063\u5f35\u3063\u3066\u304f\u308b\n    for col in df.columns:\n        #\u30ab\u30e9\u30e0\u306e\u578b\u3092col_type\u306b\u4ee3\u5165\n        col_type = df[col].dtypes\n        #\u578b\u304c\u6570\u5b57\u3060\u3063\u305f\u3089\n        if col_type in numerics:\n            #c_min\u306e\u6700\u4f4e\u5024\u3092c_max\u306b\u6700\u5927\u5024\u3092\u5165\u308c\u308b\n            c_min = df[col].min()\n            c_max = df[col].max()\n            #\u578b\u540d\u306e\u6700\u521d3\u6587\u5b57\u304cint~\u578b\u3060\u3063\u305f\u3089\n            if str(col_type)[:3] == 'int':\n                #c_min\u304cint8\u306e\u6570\u5024\u7bc4\u56f2\u306b\u3042\u308c\u3070int8\u578b\u3067\u683c\u7d0d\u3059\u308b\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                #\u540c\u69d8\u306bint16\u3067    \n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                #\u540c\u69d8\u306bint32    \n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                #\u540c\u69d8\u306bint64    \n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                #\u540c\u69d8\u306bfloat16\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                #\u540c\u69d8\u306bfloat32    \n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    #\u540c\u69d8\u306bfloat64\n                    df[col] = df[col].astype(np.float64)    \n    #\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u5272\u5408\u306e\u7b97\u51fa\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    #\u7b97\u51fa\uff1f\uff1f\uff1f\uff1f\u308f\u304b\u3089\u3093\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","5275d407":"#authorized_flag \u6c7a\u6e08\u5b8c\u9042\u30d5\u30e9\u30b0\u3068\u30ab\u30c6\u30b4\u30ea\uff11\u3000\u30ab\u30e9\u30e0\u3092\u30c0\u30df\u30fc\u5909\u6570\u5316\n#\u3053\u3063\u3061\u306f\u30e1\u30bd\u30c3\u30c9\u4f5c\u308a\u3000Y\u3092\uff11\u3000N\u3092\uff10\u306b\u7f6e\u63db\ndef binarize(df):\n    for col in ['authorized_flag', 'category_1']:\n        df[col] = df[col].map({'Y':1, 'N':0})\n    return df\n#new_merchant_transactions.csv(\u8ca9\u58f2\u5074\u306e\u65b0\u898f\u53d6\u5f15\u5c65\u6b74)\n#\u3068historical_transactions.csv(\u30ab\u30fc\u30c9\u4f1a\u793e\u5074\u53d6\u5f15\u5c65\u6b74)\u3092\u4e0a\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u30c0\u30df\u30fc\u5909\u6570\u5316\nhistorical_transactions = binarize(historical_transactions)\nnew_transactions = binarize(new_transactions)","ae7342e1":"%%time\n#\u2191\u306f\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u8a08\u6e2c\n#train\u30c7\u30fc\u30bf\u306e\u6574\u5f62\u30e1\u30bd\u30c3\u30c9\ndef read_data(input_file):\n    #csv\u3092df\u306b\u683c\u7d0d\n    df = pd.read_csv(input_file)\n    #train\u30c7\u30fc\u30bf\u306e\u521d\u8cfc\u5165\u6708(first_active_month) \u3092\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u578b\u306b\u5909\u63db\n    df['first_active_month'] = pd.to_datetime(df['first_active_month'])\n    # 2018\u5e742\u67081\u65e5(\u57fa\u6e96\u65e5\u3063\u307d\u3044)\u30fc\u521d\u8cfc\u5165\u6708(first_active_month)\u306e\u65e5\u4ed8\u3000\u3067\u65e5\u4ed8\u3060\u3051\u3092elapsed_time\u306b\u683c\u7d0d\n    df['elapsed_time'] = (datetime.date(2018, 2, 1) - df['first_active_month'].dt.date).dt.days\n    return df\n#train\u30c7\u30fc\u30bf\u3068test\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ntrain = read_data('..\/input\/elo-merchant-category-recommendation\/train.csv')\ntest = read_data('..\/input\/elo-merchant-category-recommendation\/test.csv')\n#train\u30c7\u30fc\u30bf\u306etarget\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u5c65\u6b74\u304a\u3088\u3073\u8a55\u4fa1\u671f\u9593\u306e2\u30f6\u6708\u5f8c\u306b\u7b97\u51fa\u3055\u308c\u305f\n#\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u30ed\u30a4\u30e4\u30ea\u30c6\u30a3\u6570\u5024\u30b9\u30b3\u30a2\uff1f\uff1f\u3092target\u5909\u6570\u306b\u683c\u7d0d\u3057\u3066\n\ntarget = train['target']\n#train\u30c7\u30fc\u30bf\u306etarget\u30ab\u30e9\u30e0\u306f\u524a\u9664\u3057\u3066\u3044\u308b\ndel train['target']\n#\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\ngc.collect()","4cfa4ada":"train.head()","be7b0e0d":"%%time\n#historical_transactions.csv\t\u30af\u30ec\u30ab\u53d6\u5f15\u5c65\u6b74\u306e\u30ab\u30c6\u30b4\u30ea\uff12\u3068\uff13\u3092\u30c0\u30df\u30fc\u5909\u6570\u5316\u3059\u308b\nhistorical_transactions = pd.get_dummies(historical_transactions, columns=['category_2', 'category_3'])","f25142ba":"#category_2_1.0\u3084category_3_A\u304c\u3067\u304d\u3066\uff10\u304b\uff11\u304c\u5165\u3063\u3066\u3044\u308b\nhistorical_transactions.head()","b59f11cf":"#\u4e0a\u8a18\u3068\u540c\u69d8\u306bnew_merchant_transactions.csv \u8ca9\u58f2\u5074\u306e\u65b0\u898f\u53d6\u5f15\u5c65\u6b74\u306e\u30ab\u30c6\u30b4\u30ea\uff12\u3068\uff13\nnew_transactions = pd.get_dummies(new_transactions, columns=['category_2', 'category_3'])","b22570a7":"new_transactions.head()","2372b288":"#historical_transactions\u3068new_transactions\u3092\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u6e1b\u3089\u3059\u30e1\u30bd\u30c3\u30c9\u306b\u304b\u3051\u3066\u308b\nhistorical_transactions = reduce_mem_usage(historical_transactions)\nnew_transactions = reduce_mem_usage(new_transactions)\n#\u30e1\u30e2\u30ea\u30fc\u4f7f\u7528\u91cf\u304c1304Mb\u6e1b\u5c11(54.8%)\u3000new\u306f84.24Mb","2f5b1ab0":"#\u30af\u30ec\u30ab\u53d6\u5f15\u5c65\u6b74(historical_transactions.csv)\u306e\n#authorized_flag=\u30ab\u30fc\u30c9\u6c7a\u6e08\u5b8c\u4e86\u30d5\u30e9\u30b0\u306e\u5408\u8a08\u3068\u5e73\u5747\u3092agg_fun\u5909\u6570\u306b\u683c\u7d0d\nagg_fun = {'authorized_flag': ['sum', 'mean']}\n#\u305d\u306eagg_fun\u3092\u4f7f\u3063\u3066\u3000\u30af\u30ec\u30ab\u53d6\u5f15\u5c65\u6b74(historical_transactions.csv)\u306e\u30ab\u30fc\u30c9ID(card_id)\u3092\u4e3b\u30ad\u30fc\u3068\u3057\u3066\n#\u30b0\u30eb\u30fc\u30d7\u30d0\u30a4\nauth_mean = historical_transactions.groupby(['card_id']).agg(agg_fun)\n\n#\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\ngc.collect()","d25497e9":"auth_mean.head()","fcda7ced":"#\u4e0a\u8a18\u306e\u30ab\u30e9\u30e0\u540d\u3092\u5f15\u3063\u5f35\u3063\u3066\u304d\u3066\u3000strip\u3067\u7a7a\u767d\u524a\u9664\u3057\u3066_\u3067\u30bf\u30a4\u30c8\u30eb\u3068\u7d50\u5408\nauth_mean.columns = ['_'.join(col).strip() for col in auth_mean.columns.values]\nauth_mean.head()","30ed329c":"#\u30ea\u30bb\u30c3\u30c8\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u756a\u53f7\u3092\u2191\u304b\u3089\u964d\u308a\u306a\u304a\u3057\uff09\nauth_mean.reset_index(inplace=True)\nauth_mean.head()","17edd404":"#authorized_flag=\u30ab\u30fc\u30c9\u6c7a\u6e08\u5b8c\u4e86\u30d5\u30e9\u30b0\u304c\n#\u5b8c\u4e86\u306e\uff11\u3092authorized_transaxtions\u3078\n#\u5931\u6557\u306e\uff10\u3092historical_transaxtions\u306b\u5206\u3051\u3066\u30c7\u30fc\u30bf\u683c\u7d0d\nauthorized_transactions = historical_transactions[historical_transactions['authorized_flag'] == 1]\nhistorical_transactions = historical_transactions[historical_transactions['authorized_flag'] == 0]\n#\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\ngc.collect()","09da0100":"authorized_transactions.head()","2c18c615":"historical_transactions.head()","af4edcce":"%%time\n#\u4e0a\u8a18\u306e\uff12\u3064\u306e\u30c7\u30fc\u30bf\u306e\u8cfc\u5165\u65e5(purchase_date)\u306e\u6708\u3060\u3051\u3092\u629c\u304d\u51fa\u3057\u3066\u8cfc\u5165\u6708(purchase_month)\u4f5c\u6210\nhistorical_transactions['purchase_month'] = historical_transactions['purchase_date'].dt.month\nauthorized_transactions['purchase_month'] = authorized_transactions['purchase_date'].dt.month\n#new_merchant_transactions.csv(\u8ca9\u58f2\u5074\u306e\u65b0\u898f\u53d6\u5f15\u5c65\u6b74)\u3082\u8cfc\u5165\u65e5\u304b\u3089\u8cfc\u5165\u6708\u4f5c\u6210\nnew_transactions['purchase_month'] = new_transactions['purchase_date'].dt.month\n#\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\ngc.collect()","ac938e06":"%%time\ndef aggregate_transactions(history):\n    #purchase_date\u3092\u6642\u7cfb\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066int64\u306b\u578b\u5909\u63db\u3057\u3066\u308b\u3060\u308d\u3046\u3068\u3044\u3046\u306e\u306f\u308f\u304b\u308b\u304c\n    #1e-9=0.000000001\u304c\u308f\u304b\u3089\u306a\u3044\uff089\u6841\u3067\u8868\u793a\u3068\u304b\uff1f\uff09\n    history.loc[:, 'purchase_date'] = pd.DatetimeIndex(history['purchase_date']).\\\n                                      astype(np.int64) * 1e-9\n    #agg_func\u5909\u6570\u306b\u4f5c\u6210\u3057\u305f\u3044\u9805\u76ee\u3092\u8ffd\u52a0(np.ptp\u306f\u5024\u306e\u7bc4\u56f2\uff1f)\n    agg_func = {\n        'category_1': ['sum', 'mean'],\n        'category_2_1.0': ['mean'],\n        'category_2_2.0': ['mean'],\n        'category_2_3.0': ['mean'],\n        'category_2_4.0': ['mean'],\n        'category_2_5.0': ['mean'],\n        'category_3_A': ['mean'],\n        'category_3_B': ['mean'],\n        'category_3_C': ['mean'],\n        'merchant_id': ['nunique'],\n        'merchant_category_id': ['nunique'],\n        'state_id': ['nunique'],\n        'city_id': ['nunique'],\n        'subsector_id': ['nunique'],\n        'purchase_amount': ['sum', 'mean', 'max', 'min', 'std'],\n        'installments': ['sum', 'mean', 'max', 'min', 'std'],\n        'purchase_month': ['mean', 'max', 'min', 'std'],\n        'purchase_date': [np.ptp, 'min', 'max'],\n        'month_lag': ['min', 'max']\n        }\n    #\u5f15\u6570\u306e\u6e21\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092agg_funnc\u306b\u30ab\u30fc\u30c9ID(card_id)\u3092\u4e3b\u30ad\u30fc\u306b\u3057\u3066\u30b0\u30eb\u30fc\u30d7\u30d0\u30a4\n    agg_history = history.groupby(['card_id']).agg(agg_func)\n    #\u30ab\u30e9\u30e0\u540d\u3092\u30bf\u30a4\u30c8\u30eb\u3068\u7d50\u5408\n    agg_history.columns = ['_'.join(col).strip() for col in agg_history.columns.values]\n    #\u30ea\u30bb\u30c3\u30c8\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n    agg_history.reset_index(inplace=True)\n    \n    #\u30ab\u30fc\u30c9ID(card_id)\u30b0\u30eb\u30fc\u30d7\u30d0\u30a4\u3057\u305f\u306e\u3092size\u3067\u8981\u7d20\u6570\uff1f\uff1f\uff1f\u3092\u53d6\u5f97\u3057\u3066\n    #\u30ea\u30bb\u30c3\u30c8\u30a4\u30f3\u30c7\u30c3\u30af\u30b9(transactions_count)\u3068\u3044\u3046\u9805\u76ee\u540d\u3067\n    df = (history.groupby('card_id')\n          .size()\n          .reset_index(name='transactions_count'))\n    #agg_history\u306b\u4e0a\u8a18\u306edf\u3068\u305d\u306e\u4e0a\u306eagg_history\u3092\u30ab\u30fc\u30c9ID\u3067\u5916\u90e8\u7d50\u5408\u3059\u308b\n    agg_history = pd.merge(df, agg_history, on='card_id', how='left')\n    #agg_history\u3092\u8fd4\u3059\n    return agg_history\n#\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\ngc.collect()","eea67f0f":"%%time\n#\u4e0a\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u30af\u30ec\u30ab\u53d6\u5f15\u5c65\u6b74(historical_transactions.csv)\u306b\u304b\u3051\u3066\u308b\nhistory = aggregate_transactions(historical_transactions)","621f69dd":"history.head()\n#\u6b63\u76f4transactions_count\u3068purchase_date\u304c\u306a\u3093\u3067\u3053\u3046\u306a\u3063\u3066\u308b\u306e\u304b\n#\u672a\u3060\u5206\u304b\u308a\u307e\u305b\u3093\u30fb\u30fb\u30fb","94dd5cda":"#\u5206\u304b\u308a\u8f9b\u3044\u304c\u3000\u30ab\u30fc\u30c9ID(card_id\uff09\u4ee5\u5916\u306e\u30ab\u30e9\u30e0\u540d\u306e\u5148\u982d\u306bhist_\u3092\u3064\u3051\u308b\nhistory.columns = ['hist_' + c if c != 'card_id' else c for c in history.columns]","d3ef18dc":"history[:5]","86d460a4":"#\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\ngc.collect()","e2228e61":"%%time\n#\u4e0a\u8a18\u3068\u540c\u3058\u4e8b\u3092\u30ab\u30fc\u30c9\u6c7a\u6e08\u5b8c\u4e86\u30d5\u30e9\u30b0\u304c\u5b8c\u4e86\u306b\u306a\u3063\u3066\u3044\u305f\u30c7\u30fc\u30bf\u3067\u884c\u3046\nauthorized = aggregate_transactions(authorized_transactions)\nauthorized.columns = ['auth_' + c if c != 'card_id' else c for c in authorized.columns]\nauthorized[:5]\ngc.collect()","22c7c62e":"%%time\n#\u4e0a\u306eaggregate_transactions\u30e1\u30bd\u30c3\u30c9\u3092#new_merchant_transactions.csv(\u8ca9\u58f2\u5074\u306e\u65b0\u898f\u53d6\u5f15\u5c65\u6b74)\u306b\u304b\u3051\u3066\u308b\nnew = aggregate_transactions(new_transactions)\n#\u4e0a\u8a18\u306eauth_\u3092new_\u306b\u3057\u3066\u308b\u3060\u3051\nnew.columns = ['new_' + c if c != 'card_id' else c for c in new.columns]\ngc.collect()","3e714ac5":"new[:5]","5b22e7e3":"%%time\n\ndef aggregate_per_month(history):\n    #\u6e21\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u30ab\u30fc\u30c9ID(card_id)\u3068month_lag=\u57fa\u6e96\u65e5(2018\u5e742\u6708\uff1f\uff09\u307e\u3067\u306e\u6708\u5dee\u3067\u30b0\u30eb\u30fc\u30d7\u30d0\u30a4\n    grouped = history.groupby(['card_id', 'month_lag'])\n\n    #agg_func\u306b\u6b32\u3057\u3044\u5f0f\u60c5\u5831\u3092\u5165\u308c\u3066\u308b\n    agg_func = {\n            'purchase_amount': ['count', 'sum', 'mean', 'min', 'max', 'std'],\n            'installments': ['count', 'sum', 'mean', 'min', 'max', 'std'],\n            }\n    #\u4e0a\u8a18\u306eagg_funk\u3092\u304b\u3051\u3066\u308b\n    intermediate_group = grouped.agg(agg_func)\n    #\u30ab\u30e9\u30e0\u540d\u3092\u7a7a\u767d\u524a\u9664\u3068\u5148\u982d\u306b\u30bf\u30a4\u30c8\u30eb\u540d_\u306e\u5f62\u3067\u7d50\u5408\n    intermediate_group.columns = ['_'.join(col).strip() for col in intermediate_group.columns.values]\n    #\u30ea\u30bb\u30c3\u30c8\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n    intermediate_group.reset_index(inplace=True)\n    #\u4e0a\u8a18\u306e\u30c7\u30fc\u30bf\u3092\u30ab\u30fc\u30c9ID(card_id)\u306e\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u3067\u30b0\u30eb\u30fc\u30d7\u30d0\u30a4\n    final_group = intermediate_group.groupby('card_id').agg(['mean', 'std'])\n    #\u30ab\u30e9\u30e0\u540d\u3092\u540c\u69d8\u306b\u5909\u66f4\n    final_group.columns = ['_'.join(col).strip() for col in final_group.columns.values]\n    final_group.reset_index(inplace=True)\n    #\u3053\u306e\u5024\u3092\u8fd4\u3059\n    return final_group\n#___________________________________________________________\n#historical_transactions.csv\t\u30af\u30ec\u30ab\u53d6\u5f15\u5c65\u6b74\u3092\u4e0a\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u304b\u3051\u308b\nfinal_group =  aggregate_per_month(historical_transactions) \n#\uff11\uff10\u884c\u8868\u793a\ngc.collect()","3a5ec4b6":"final_group[:10]","e27fbb4d":"train.head()","22a2dac3":"#train\u30c7\u30fc\u30bf\u3068historical_transactions.csv\t\u30af\u30ec\u30ab\u53d6\u5f15\u5c65\u6b74\u6574\u5f62\u5f8c\u306e\n#\u6c7a\u6e08\u5b8c\u4e86\u30d5\u30e9\u30b0\u304c\u5931\u6557\u3060\u3063\u305f\u30c7\u30fc\u30bf\u3092\u30ab\u30fc\u30c9ID(card_id)\u3067\u5de6\u5916\u90e8\u7d50\u5408\n#test\u30c7\u30fc\u30bf\u3082\ntrain = pd.merge(train, history, on='card_id', how='left')\ntest = pd.merge(test, history, on='card_id', how='left')","5f22c44c":"train.head()","13a262af":"#train\u30c7\u30fc\u30bf\u3068historical_transactions.csv\t\u30af\u30ec\u30ab\u53d6\u5f15\u5c65\u6b74\u6574\u5f62\u5f8c\u306e\n#\u6c7a\u6e08\u5b8c\u4e86\u30d5\u30e9\u30b0\u304c\u5b8c\u4e86\u3060\u3063\u305f\u30c7\u30fc\u30bf\u3092\u30ab\u30fc\u30c9ID(card_id)\u3067\u5de6\u5916\u90e8\u7d50\u5408\n#test\u30c7\u30fc\u30bf\u3082\ntrain = pd.merge(train, authorized, on='card_id', how='left')\ntest = pd.merge(test, authorized, on='card_id', how='left')","79b3f6c4":"train.head()","52324d14":"#train\u30c7\u30fc\u30bf\u3068new_merchant_transactions.csv(\u8ca9\u58f2\u5074\u306e\u65b0\u898f\u53d6\u5f15\u5c65\u6b74)\u3092\u5de6\u5916\u90e8\u7d50\u5408\n#test\u30c7\u30fc\u30bf\u3082\ntrain = pd.merge(train, new, on='card_id', how='left')\ntest = pd.merge(test, new, on='card_id', how='left')","c85081a9":"train.head()","ccf7fba7":"#train\u30c7\u30fc\u30bf\u306b\u4e0a\u8a18\u3067\u7b97\u51fa\u3057\u305ffinal_group\u3092\u5de6\u5916\u90e8\u7d50\u5408\ntrain = pd.merge(train, final_group, on='card_id', how='left')\ntest = pd.merge(test, final_group, on='card_id', how='left')\n\n#\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\ngc.collect()","5a57b21d":"train.head()","8b268d03":"#train\u30c7\u30fc\u30bf\u306b\n#\u30af\u30ec\u30ab\u53d6\u5f15\u5c65\u6b74(historical_transactions.csv)\u306e\n#authorized_flag=\u30ab\u30fc\u30c9\u6c7a\u6e08\u5b8c\u4e86\u30d5\u30e9\u30b0\u306e\u5408\u8a08\u3068\u5e73\u5747\u3092agg_fun\u5909\u6570\u306b\u683c\u7d0d\n#\u4e0a\u8a18\u3068\u5de6\u5916\u90e8\u7d50\u5408\ntrain = pd.merge(train, auth_mean, on='card_id', how='left')\ntest = pd.merge(test, auth_mean, on='card_id', how='left')","d58861ea":"train.head()","c57222c3":"#train\u30c7\u30fc\u30bf\u3068test\u30c7\u30fc\u30bf\u306e\u4ef6\u6570\u3092\u51fa\u3057\u3066\u308b\u3000201917\u884c\u306e139\u5217\u3000123623\u884c\u306e139\u5217\nprint(\"Train Shape:\", train.shape)\nprint(\"Test Shape:\", test.shape)\ngc.collect()","fd4e95b5":"#\u30ab\u30fc\u30c9ID(card_id)\u53c8\u306f\u521d\u8cfc\u5165\u6708(first_active_month)\u4ee5\u5916\u306e\u30ab\u30e9\u30e0\u3092\u5f15\u3063\u5f35\u308a\u51fa\u3057\u3066\u308b\u3000\nfeatures = [c for c in train.columns if c not in ['card_id', 'first_active_month']]","a8bd28e6":"features","cab2a732":"#feature\u3067\u59cb\u307e\u308b\u5974\u3060\u3051\u629c\u304d\u51fa\u3057\ncategorical_feats = [c for c in features if 'feature_' in c]","26052220":"categorical_feats","081de7c2":"#LGBM\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\n#\u8449\u3063\u3071\u306e\u6570(\u5024\u304c\u5927\u304d\u3044\u307b\u3046\u304c\u826f\u3044\u304c\u3001\u5927\u304d\u3059\u304e\u308b\u3068\u8a70\u307e\u308b\u4e8b\u304c\u3042\u308b)\nparam = {'num_leaves': 31,\n         #\u8449\u3063\u3071\u306e\u6700\u4f4e\u6570\n         'min_data_in_leaf': 25,\n         #regression(\u56de\u5e30\u624b\u6cd5)\n         'objective':'regression',\n         #max_depth(\u6c7a\u5b9a\u6728\u306e\u6df1\u3055)num_leaves(\u8449\u3063\u3071\u306e\u6570)\u3000\u4ee5\u4e0b\u306f\u5bfe\u5fdc\u8868\n         #1\u306f\uff12\n         #2\u306f4\n         #3\u306f8\n         #7\u306f128\n         #10\u306f1024\n#\u3053\u306e\u30eb\u30fc\u30eb\u3092\u899a\u3048\u3066\u3057\u307e\u3048\u3070\uff0c\u7279\u306b\u554f\u984c\u306a\u3055\u305d\u3046\u3067\u3042\u308b\uff0e\u4f8b\u3048\u3070\"XGBoost\"\u306e max_depth=6 \u306e\u8a2d\u5b9a\u3068\u540c\u7b49\u306b\u3059\u308b\u306b\u306f\uff0cnum_leaves=64 \u3068\u8a2d\u5b9a\u3059\u308c\u3070\u3088\u3044\uff0e\n         'max_depth': 7,\n         #\u5b66\u7fd2\u5ea6\u5408\u3044(\u5024\u304c\u5c0f\u3055\u3044\u307b\u3046\u304c\u826f\u3044)\n         #\u52fe\u914d\u964d\u4e0b\u306e\u3088\u3046\u306a\u5b66\u7fd2\u91cd\u307f\u3002num_round\u306f\u3001\u5b9f\u884c\u3059\u308b\u5b66\u7fd2\u30b9\u30c6\u30c3\u30d7\u306e\u6570\u3001\u3064\u307e\u308a\u69cb\u7bc9\u3059\u308b\u30c4\u30ea\u30fc\u306e\u6570\u3002\n         #\u9ad8\u3044\u3068\u5b66\u7fd2\u7387\u304c\u4e0a\u304c\u308b\u304c\u904e\u5b66\u7fd2\u3057\u3084\u3059\u304f\u306a\u308b\u3002\u30e9\u30a6\u30f3\u30c9\u6570\u3092\uff12\u500d\u3057\u3001eta\u3092\uff12\u3067\u5272\u308b\u3002\u5b66\u7fd2\u306b\uff12\u500d\u6642\u9593\u304c\u304b\u304b\u308b\u304c\u3001\u30e2\u30c7\u30eb\u306f\u826f\u304f\u306a\u308b\u3002\n         'learning_rate': 0.01,\n         #\u4f55\u304b\u3067\u4f7f\u3046\uff1f\n         'lambda_l1':0.13,\n         #LightGBM = GBDT(Gradient boosting decision tree) + GOSS(Gradient-based One-Side Sampling) + EFB(Exclusive Feature Bundling)\n         #\u4e09\u7a2e\u3042\u308b\u5185\u306e\u4e00\u3064\u3002\u3000\u8a73\u7d30\u306fhttps:\/\/qiita.com\/Sa_qiita\/items\/7aa98c5df4019a7197ff\u3067\n         \"boosting\": \"gbdt\",\n         #\u5404\u6728\u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306e\u5217\u306b\u304a\u3051\u308b\u30b5\u30d6\u30b5\u30f3\u30d7\u30eb\u306e\u5272\u5408\u3000\u30c7\u30d5\u30a9\uff11\n         #\u904e\u5b66\u7fd2\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3053\u306e\u5024\u3092\u4e0b\u3052\u308b\u3002\n         \"feature_fraction\":0.85,\n         #\u30b5\u30d6\u30b5\u30f3\u30d7\u30eb\u3092\u751f\u6210\u3059\u308b\u969b\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306e\u62bd\u51fa\u5272\u5408\u3002\u305f\u3068\u3048\u3070\u30010.5\u306b\u8a2d\u5b9a\u3059\u308b\u3068\u3001\n         #XGBoost \u306f\u30c7\u30fc\u30bf\u306e\u534a\u5206\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3093\u3067\u6728\u3092\u6210\u9577\u3055\u305b\u308b\u3053\u3068\u3067\u3001\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3092\u9632\u304e\u307e\u3059\u3002\n         #\u4e0a\u8a18\u306e\u8aac\u660e\u304b\u3089\u3059\u308b\u3068\uff18\u5272\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306b\u3059\u308b\u306e\u304b\u306a\uff1f\n         'bagging_freq':8,\n         #\u4f7f\u7528\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5272\u5408\u3092\u5236\u5fa1\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30020\u30681\u306e\u9593\u306e\u5024\u3002\n         \"bagging_fraction\": 0.9 ,\n         #\u30b9\u30b3\u30a2\u306e\u7b97\u51fa\u65b9\u6cd5\uff1f RMSE\uff08Root Mean Square Error\uff09\u5e73\u5747\u5e73\u65b9\u4e8c\u4e57\u8aa4\u5dee\n         \"metric\": 'rmse',\n         #\u8b66\u544a\u30ec\u30d9\u30eb\u306e\u8868\u793a\uff08\u8a08\u7b97\u306b\u306f\u95a2\u4fc2\u306a\u3044\uff09\n         \"verbosity\": -1,\n         #\u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u306b\u76f8\u5f53\u3059\u308b\u3002\u3053\u3053\u3092\u5927\u304d\u304f\u3057\u3066\u3082\u30b9\u30b3\u30a2\u304c\u5b89\u5b9a\u3057\u305f\u65b9\u304c\u826f\u3044\uff08\uff1f\uff09\n         \"random_state\": 2333}\n","18d0c399":"#%%time\n#StratifiedKFold (y, k):\u5206\u5272\u5f8c\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u30e9\u30d9\u30eb\u306e\u6bd4\u7387\u3092\u4fdd\u3063\u305f\u307e\u307e\u3001\u30c7\u30fc\u30bf\u3092k\u500b\u306b\u5206\u5272\u3002\u3068\u8aac\u660e\u304c\u3042\u3063\u305f\u306e\u3067\n#\uff15\u5206\u5272\u3057\u3066\u30c7\u30fc\u30bf\u306e\u5404\u968e\u5c64\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u3066\u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\uff1f\uff08random_state\u304c\u6765\u308b\u306e\u306f\u5909\u306a\u6c17\u3082\u3059\u308b\u304c\uff09\nfolds = KFold(n_splits=5, shuffle=True, random_state=15)\n#train\u30c7\u30fc\u30bf\u306e\u9577\u3055\u306e\u5206\u3060\u30510\u306e\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\noof = np.zeros(len(train))\n#\u540c\u3058\u51e6\u7406\u3092test\u30c7\u30fc\u30bf\u306b\u3082\u884c\u3046\npredictions = np.zeros(len(test))","39dc512e":"#\u3053\u306e\u6642\u70b9\u306e\u6642\u9593\u3092\u8a18\u9332\u3057\u3066\u304a\u3044\u3066\u3082\u3046\uff11\u56detime.time()\u3067\u51e6\u7406\u6642\u9593\u3092\u56f3\u308b\nstart = time.time()","0d11a034":"#\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u4f5c\u6210\nfeature_importance_df = pd.DataFrame()\n#enumerate\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u306e\u53d6\u5f97\n#split\uff08X\u3001y =\u306a\u3057\u3001groups =\u306a\u3057\uff09\n#X \uff1a \u914d\u5217\u306e\u3088\u3046\u306a\u5f62\uff08n_samples\u3001n_features\uff09\n#\u5b66\u7fd2\u30c7\u30fc\u30bf\u3002\u3053\u3053\u3067\u3001n_samples\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3001n_features\u306f\u7279\u5fb4\u6570\u3067\u3059\u3002\n#y \uff1a \u914d\u5217\u306e\u3088\u3046\u306a\u5f62\uff08n_samples\u3001\uff09\n#\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u554f\u984c\u306e\u305f\u3081\u306e\u76ee\u6a19\u5909\u6570\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train.values, target.values)):\n    print(\"fold n\u00b0{}\".format(fold_))\n    #iloc\u306f\u5217\u884c\u3092\u756a\u53f7\u6307\u5b9a  \n    trn_data = lgb.Dataset(train.iloc[trn_idx][features], label=target.iloc[trn_idx], categorical_feature=categorical_feats)\n    val_data = lgb.Dataset(train.iloc[val_idx][features], label=target.iloc[val_idx], categorical_feature=categorical_feats)\n    #\u6f14\u7b97\u306e\u5468\u56de\u6570\n    num_round = 10000\n    #lgbm\u306e\u8a2d\u5b9a\u3067callback\u95a2\u6570\uff1f\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3000\u4e0b\u8a18\u306b\u8a2d\u5b9a\u9805\u76ee\u306e\u8aac\u660e\u3092\u8a18\u8ff0\u3057\u3066\u304a\u304d\u307e\u3059\u304c\u5206\u304b\u3089\u306a\u3044\u306e\u3082\u3042\u308b\u3002\u3002\u3050\u306c\u306c\n    \n    #early_stopping_rounds\uff08int \u307e\u305f\u306fNone \u3001\u30aa\u30d7\u30b7\u30e7\u30f3\uff08\u30c7\u30d5\u30a9\u30eb\u30c8= None \uff09\uff09 - \u65e9\u671f\u505c\u6b62\u3092\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\n    #\u691c\u8a3c\u30b9\u30b3\u30a2\u304c\u5411\u4e0a\u3057\u306a\u304f\u306a\u308b\u307e\u3067\u3001\u30e2\u30c7\u30eb\u306f\u5b66\u7fd2\u3057\u307e\u3059\u3002\n    #\u691c\u8a3c\u30b9\u30b3\u30a2\u306f\u3001early_stopping_rounds\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3092\u7d99\u7d9a\u3059\u308b\u305f\u3081\u306b\u5c11\u306a\u304f\u3068\u3082\u30e9\u30a6\u30f3\u30c9\u3054\u3068\u306b\u6539\u5584\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n    #\u5c11\u306a\u304f\u3068\u30821\u3064\u306e\u691c\u8a3c\u30c7\u30fc\u30bf\u30681\u3064\u306e\u30e1\u30c8\u30ea\u30c3\u30af\u304c\u5fc5\u8981\u3067\u3059\u3002\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u3089\u3059\u3079\u3066\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\n    #\u3057\u304b\u3057\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002best_iteration\u65e9\u671f\u505c\u6b62\u30ed\u30b8\u30c3\u30af\u304c\u8a2d\u5b9a\u306b\u3088\u3063\u3066\u6709\u52b9\u306b\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\n    #\u6700\u9ad8\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6301\u3064\u53cd\u5fa9\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\n    \n    #verbose_eval\uff08\u30d6\u30fc\u30eb\u5024\u307e\u305f\u306f\u6574\u6570\u5024\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\uff08\u30c7\u30d5\u30a9\u30eb\u30c8= True \uff09\uff09 -\n    #\u5c11\u306a\u304f\u3068\u30821\u3064\u306e\u691c\u8a3c\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3067\u3059\u3002True\u306e\u5834\u5408\u3001\u6709\u52b9\u30bb\u30c3\u30c8\u306e\u8a55\u4fa1\u30e1\u30c8\u30ea\u30c3\u30af\u306f\u5404\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u30b9\u30c6\u30fc\u30b8\u3067\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n    #int\u306e\u5834\u5408\u3001\u3059\u3079\u3066\u306everbose_eval\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u30b9\u30c6\u30fc\u30b8\u3067\u6709\u52b9\u306a\u30bb\u30c3\u30c8\u306e\u8a55\u4fa1\u30e1\u30c8\u30ea\u30c3\u30af\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n    #\u6700\u5f8c\u306e\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u30b9\u30c6\u30fc\u30b8\u307e\u305f\u306f\u3092\u4f7f\u3063\u3066\u898b\u3064\u3051\u305f\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u30b9\u30c6\u30fc\u30b8early_stopping_rounds\u3082\u5370\u5237\u3055\u308c\u307e\u3059\u3002\n    clf = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=100, early_stopping_rounds = 200)\n    print(clf)\n    #\u30b5\u30a4\u30ad\u30c3\u30c8\u30e9\u30fc\u30f3\u306e\u4e88\u6e2c\u3000\uff11\u756a\u76ee\u306e\u5f15\u6570\u306f\u4f7f\u3046\u30c7\u30fc\u30bf\u3000\uff12\u756a\u76ee\u306e\u5f15\u6570\u306f\u76ee\u7684\u5909\u6570\u3000\u4e88\u6e2c\u3059\u308b\u30c7\u30fc\u30bf\n    oof[val_idx] = clf.predict(train.iloc[val_idx][features], num_iteration=clf.best_iteration)\n    #\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u4f5c\u6210\n    fold_importance_df = pd.DataFrame()\n    #train\u306e\u30ab\u30e9\u30e0\u540d\u3092\u683c\u7d0d\u3057\u305f\u306e\u3092\u8ffd\u52a0\n    fold_importance_df[\"feature\"] = features\n    #\u4e88\u6e2c\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\uff1f\n    fold_importance_df[\"importance\"] = clf.feature_importance()\n    print(fold_importance_df)\n    #fold\u3092\u4e00\u3064\u3064\u3044\u304b\uff1f\n    fold_importance_df[\"fold\"] = fold_ + 1\n    #\u6700\u521d\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u8ffd\u52a0\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    #\u5206\u304b\u3089\u306a\u3044\n    predictions += clf.predict(test[features], num_iteration=clf.best_iteration) \/ folds.n_splits\n\nprint(\"CV score: {:<8.5f}\".format(mean_squared_error(oof, target)**0.5))","6c339846":"#\u7d50\u5c40importance\u304c\u306a\u3093\u306a\u306e\u304b\u308f\u304b\u3093\u306d\u3047\u3002\u3002\u3002\u3002LGBM\u306e\u6f14\u7b97\u3067\u51fa\u305f\u7d50\u679c\u3060\u3068\u601d\u3046\u3051\u3069\u3002\u3002\u3002\nfeature_importance_df","53525f76":"#\u4e0a\u8a18\u3092feature\u3067\u96c6\u8a08\u3057\u3066\u5e73\u5747\u51fa\u3057\u3066\u6607\u9806\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4e26\u3079\u3066\u308b\ncols = (feature_importance_df[[\"feature\", \"importance\"]]\n        .groupby(\"feature\")\n        .mean()\n        .sort_values(by=\"importance\", ascending=False)[:1000].index)\ncols","2b907e6d":"#???feature_importance_df\u3092\u8907\u88fd\u3057\u305f\u3060\u3051\uff1f\uff1f\uff1f\uff1f\nbest_features = feature_importance_df.loc[feature_importance_df.feature.isin(cols)]\nbest_features","d699ae81":"#importance\u306e\u9ad8\u3044\u9806\u304b\u3089\u53ef\u8996\u5316\u3057\u305f\u3060\u3051\nplt.figure(figsize=(14,25))\nsns.barplot(x=\"importance\",\n            y=\"feature\",\n            data=best_features.sort_values(by=\"importance\",\n                                           ascending=False))\nplt.title('LightGBM Features (avg over folds)')\nplt.tight_layout()\nplt.savefig('lgbm_importances.png')\nprint(gc.collect())","0917d833":"lgbparam = {'num_leaves': 31,\n            'boosting_type': 'rf',\n             'min_data_in_leaf': 25, \n             'objective':'regression',\n             'max_depth': -1,\n             'learning_rate': 0.005,\n             \"min_child_samples\": 20,\n             \"feature_fraction\": 0.9,\n             \"bagging_freq\": 1,\n             \"bagging_fraction\": 0.9 ,\n             \"bagging_seed\": 11,\n             \"metric\": 'rmse',\n             \"lambda_l1\": 0.2,\n             \"verbosity\": -1,\n            #\u4e26\u5217\u51e6\u7406\u3092\u884c\u3046\u30b9\u30ec\u30c3\u30c9\u6570\u306e\u6307\u5b9a\n             \"nthread\": 4,\n             \"random_state\": 4590}","827483b2":"#RepeatedKFold\u3092\u4f7f\u3046\nfrom sklearn.model_selection import RepeatedKFold\n#\u30c7\u30fc\u30bf\u3092\uff15\u5206\u5272\u3057\u3066\uff12\u56de\u7e70\u308a\u8fd4\u3059\uff1f\nfolds = RepeatedKFold(n_splits=5, n_repeats=2, random_state=4520)\n#\u3055\u3063\u304d\u3082\u3084\u3063\u3066\u305f\u306a\u3053\u308c\noof_lgb = np.zeros(len(train))\npredictions_lgb = np.zeros(len(test))\n#\u51e6\u7406\u6642\u9593\u8a08\u6e2c\u7528\nstart = time.time()\n#\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u4f5c\u6210\nfeature_importance_df = pd.DataFrame()\n#\u4ee5\u4e0b\u3082\u540c\u3058\u306a\u306e\u3067\u5272\u611b\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train.values, target.values)):\n    print(\"fold n\u00b0{}\".format(fold_))\n    trn_data = lgb.Dataset(train.iloc[trn_idx][features], label=target.iloc[trn_idx], categorical_feature=categorical_feats)\n    val_data = lgb.Dataset(train.iloc[val_idx][features], label=target.iloc[val_idx], categorical_feature=categorical_feats)\n\n    num_round = 11000\n    clf = lgb.train(lgbparam, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=100, early_stopping_rounds = 100)\n    oof_lgb[val_idx] = clf.predict(train.iloc[val_idx][features], num_iteration=clf.best_iteration)\n    \n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"feature\"] = features\n    fold_importance_df[\"importance\"] = clf.feature_importance()\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    \n    predictions_lgb += clf.predict(test[features], num_iteration=clf.best_iteration) \/ (5 * 2)\n\nprint(\"CV score: {:<8.5f}\".format(mean_squared_error(oof_lgb, target)**0.5))","7f25b48d":"#\u3053\u3053\u3082\u540c\u3058\ncols = (feature_importance_df[[\"feature\", \"importance\"]]\n        .groupby(\"feature\")\n        .mean()\n        .sort_values(by=\"importance\", ascending=False)[:1000].index)\n\nbest_features = feature_importance_df.loc[feature_importance_df.feature.isin(cols)]\n\nplt.figure(figsize=(14,25))\nsns.barplot(x=\"importance\",\n            y=\"feature\",\n            data=best_features.sort_values(by=\"importance\",\n                                           ascending=False))\nplt.title('LightGBM Features (avg over folds)')\nplt.tight_layout()\nplt.savefig('lgbm_importances.png')","afacbfdc":"#\u30ab\u30fc\u30c9ID\u304c\u5165\u3063\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u4f5c\u6210\nsub_df = pd.DataFrame({\"card_id\":test[\"card_id\"].values})\nsub_df.head()","0fd4f857":"#\u3053\u3053\u306b\u4e88\u6e2c\u7d50\u679c\u3092\u653e\u308a\u8fbc\u3080\nsub_df[\"target\"] = predictions\nsub_df.head()","7fb591d4":"#csv\u51fa\u529b\nsub_df.to_csv(\"submit_lgb.csv\", index=False)\n#\u3055\u3063\u304d\u3068\u540c\u3058\u4e8b\u3092\u5f8c\u8005\u306e\u6f14\u7b97\u3067\u51fa\u6765\u305f\u4e88\u6e2c\u3067\u683c\u7d0d\nsub_df1 = pd.DataFrame({\"card_id\":test[\"card_id\"].values})\nsub_df1[\"target\"] = predictions_lgb\nsub_df1.to_csv(\"submit_lgb1.csv\", index=False)\nsub_df1.head()","aaaafcc5":"#\u4e88\u6e2c\u304c\u5165\u3063\u3066\u305f\u30c7\u30fc\u30bf\noof","124954eb":"oof_lgb","84dcbce8":"#\uff12\u3064\u3092\u7d50\u5408\u3057\u3066\u6607\u9806\u306b\u4e26\u3079\u3066\u308b\ntrain_stack = np.vstack([oof,oof_lgb]).transpose()\ntest_stack = np.vstack([predictions,predictions_lgb]).transpose()\n#\u30c7\u30fc\u30bf\u3092\uff15\u5206\u5272\u3057\u3066\u7e70\u308a\u8fd4\u3057\u306f\uff11\u56de\uff1f\nfolds = RepeatedKFold(n_splits=5,n_repeats=1,random_state=4520)\n#\uff10\u306e\u914d\u5217\u3064\u304f\u308b\u3084\u3064\noof_stack = np.zeros(train_stack.shape[0])\npredictions_stack = np.zeros(test_stack.shape[0])\n#\u540c\u3058\u4e8b\u3084\u3063\u3066\u308b\uff1f\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train_stack, target)):\n    print(\"fold n\u00b0{}\".format(fold_))\n    trn_data, trn_y = train_stack[trn_idx], target.iloc[trn_idx].values\n    val_data, val_y = train_stack[val_idx], target.iloc[val_idx].values\n\n    print(\"-\" * 10 + \"Stacking \" + str(fold_) + \"-\" * 10)\n#     cb_model = CatBoostRegressor(iterations=3000, learning_rate=0.1, depth=8, l2_leaf_reg=20, bootstrap_type='Bernoulli',  eval_metric='RMSE', metric_period=50, od_type='Iter', od_wait=45, random_seed=17, allow_writing_files=False)\n#     cb_model.fit(trn_data, trn_y, eval_set=(val_data, val_y), cat_features=[], use_best_model=True, verbose=True)\n    #\u3053\u3053\u3067\u7dda\u5f62\u56de\u5e30\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5f15\u3063\u5f35\u3063\u3066\u304d\u3066\u308b\uff1f\n    clf = BayesianRidge()\n    clf.fit(trn_data, trn_y)\n    \n    oof_stack[val_idx] = clf.predict(val_data)\n    predictions_stack += clf.predict(test_stack) \/ 5\n\n\nnp.sqrt(mean_squared_error(target.values, oof_stack))","caee6047":"#\u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u66f8\u304d\u63db\u3048\nsample_submission = pd.read_csv('..\/input\/elo-merchant-category-recommendation\/sample_submission.csv')\nsample_submission['target'] = predictions_stack\nsample_submission.to_csv('Bayesian_Ridge_Stacking.csv', index=False)","50bc2377":"#Blend1\u306f\u4eca\u56de\u306e\u7d50\u679c\u3092Blend2\u306f\u4eca\u56de\u306e\u7d50\u679c\u3092\uff12\u5272\u30003.695.csv\u304c\uff12\u5272\u3000combining_submission(1)\u304c\uff16\u5272\nsample_submission = pd.read_csv('..\/input\/elo-merchant-category-recommendation\/sample_submission.csv')\nsample1 = pd.read_csv(\"..\/input\/elo-blending\/3.695.csv\")\nsample2 = pd.read_csv(\"..\/input\/elo-blending\/combining_submission (1).csv\")\nsample_submission['target'] = predictions * 0.5 + predictions_lgb * 0.5\nsample_submission.to_csv(\"Blend1.csv\", index = False)\nsample_submission['target'] = sample_submission['target'] * 0.2 + sample1['target'] * 0.2 + sample2['target'] * 0.6\nsample_submission.to_csv('Blend2.csv', index=False)","dff85fdf":"## \u2191historical_transactions.csv\t\u30af\u30ec\u30ab\u53d6\u5f15\u5c65\u6b74\n###new_merchant_transactions.csv \u8ca9\u58f2\u5074\u306e\u65b0\u898f\u53d6\u5f15\u5c65\u6b74\u3068\u30ab\u30e9\u30e0\u5185\u5bb9\u306f\u540c\u3058\n<br>card_id=\u30ab\u30fc\u30c9\u8b58\u5225\u5b50\n<br>month_lag=\u57fa\u6e96\u65e5(2018\u5e742\u6708\uff1f\uff09\u307e\u3067\u306e\u6708\u5dee\n<br>purchase_date=\u8cfc\u5165\u65e5\n<br>authorized_flag=\u30ab\u30fc\u30c9\u6c7a\u6e08\u5b8c\u4e86\u7387\u3000\u5b8c\u4e86\u3057\u305f\u3089Y\u3001\u5931\u6557\u3057\u305f\u3089N\n<br>category_3=\u30ab\u30c6\u30b4\u30ea\u3000A~C\n<br>installments=\u8cfc\u5165\u306e\u5206\u5272\u6570\n<br>category_1=\u30ab\u30c6\u30b4\u30ea\u3000Y\u304bN\n<br>merchant_category_id=\u8ca9\u58f2\u8005\u30ab\u30c6\u30b4\u30eaID\n<br>subsector_id=\u8ca9\u58f2\u8005\u30ab\u30c6\u30b4\u30ea\u30b0\u30eb\u30fc\u30d7ID\n<br>merchant_id=\u8ca9\u58f2\u8005ID\n<br>purchase_amount=\u8cfc\u5165\u91cf\n<br>city_id=\u5e02ID\n<br>state_id=\u5ddeID\n<br>category_2=\u30ab\u30c6\u30b4\u30ea\u3000\uff11\uff5e\uff14","9ce9a75f":"new_merchant_transactions.csv(\u8ca9\u58f2\u5074\u306e\u65b0\u898f\u53d6\u5f15\u5c65\u6b74)\n<br>\u53d6\u5f15\u56de\u6570\u3001\u30ab\u30c6\u30b4\u30ea\uff11\u306e\u5408\u8a08\u5e73\u5747\u3001\u30ab\u30c6\u30b4\u30ea\uff12\u306e\u5e73\u5747\u3001\u30ab\u30c6\u30b4\u30ea\uff13\u306e\u5e73\u5747\u3001\u8cfc\u5165\u91cf\u306e\u5408\u8a08\u5e73\u5747\u6700\u5927\u6700\u5c0f\u6a19\u6e96\u504f\u5dee\n<br>\u5206\u5272\u56de\u6570\u306e\u5408\u8a08\u5e73\u5747\u6700\u5927\u6700\u5c0f\u6a19\u6e96\u504f\u5dee\u3001\u8cfc\u5165\u6708\u306e\u5e73\u5747\u6700\u5c0f\u6a19\u6e96\u504f\u5dee\u3001\u8cfc\u5165\u65e5\u306e\u7bc4\u56f2\u6700\u5c0f\u6700\u5927\u3001\u4f55\u65e5\u524d\u8cfc\u5165\u306e\u6700\u5c0f\u6700\u5927\n<br>\u3092\u8ffd\u52a0","339b0408":"## P.S. \u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306e\u80cc\u666f\u306b\u3042\u308b\u4e3b\u306a\u30a2\u30a4\u30c7\u30a2\u306f\u3001FabienDaniel Kernel Elo_world\u304b\u3089\u30d2\u30f3\u30c8\u3092\u5f97\u305f\u3082\u306e\u3067\u3059\u3002\nhttps:\/\/www.kaggle.com\/fabiendaniel\/elo-world\n\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u8aac\u660e\u304b\u3089\n","6f34dcae":"## \u30ab\u30fc\u30c9ID\u6bce\u306e\u6c7a\u6e08\u5b8c\u4e86\u56de\u6570\u3068\u6c7a\u6e08\u5e73\u5747\u5024\u3092\u8ffd\u52a0","219d7034":"## \u2191merchants.csv \u30af\u30ec\u30ab\u767b\u9332\u5e97\u8217\u306e\u4e00\u89a7\u53ca\u3073\u30c7\u30fc\u30bf\n<br>merchant_id\uff1d\u8ca9\u58f2\u8005ID\u3000M_ID_\u304b\u3089\u59cb\u307e\u308b\u82f1\u6570\u5b57\n<br>merchant_group_id=\u8ca9\u58f2\u8005\u30b0\u30eb\u30fc\u30d7\u30001~113k\u307e\u3067\u3042\u308b\n<br>merchant_category_id\uff1d\u8ca9\u58f2\u8005\u30ab\u30c6\u30b4\u30ea\u3000-1~891\u307e\u3067\uff08-1\u306f\u591a\u5206\u4e0d\u660e\uff09\n<br>subsector_id=\u8ca9\u58f2\u8005\u30ab\u30c6\u30b4\u30ea\u30b0\u30eb\u30fc\u30d7\u3000-1~41\u307e\u3067(merchant_category_id\u3088\u308a\u72ed\u3044)\n<br>\n<br>city_id\t\uff1d\u5e02ID\u3000-1~347 -1\u306f\u4e0d\u660e\uff1f\n<br>state_id\uff1d\u56fdID\u3000-1~24 -1\u306f\u4e0d\u660e\uff1f\n<br>\n<br>numerical_1=\u6307\u6a19\u3000-0.06\u524d\u5f8c\u304c\u591a\u3044\u304c184\uff08null?\uff09\u3082\u3042\u308b\n<br>numerical_2=\u6307\u6a19\u3000\u540c\u4e0a\u3060\u304c184\u3067\u306a\u304f182(null\uff1f)\n<br>\n<br>category_1=\u30ab\u30c6\u30b4\u30ea\u3000N98%Y2%\n<br>category_2\u30001~5\n<br>category_4=\u30ab\u30c6\u30b4\u30ea N71%Y29%\n<br>\n<br>most_recent_sales_range=\u5148\u6708\u306e\u53ce\u76ca\u306e\u7bc4\u56f2\uff08\u901a\u8ca8\u5358\u4f4d\uff09 - > A> B> C> D 35%> E 53%\u306e\uff15\u6bb5\u968e\u8a55\u4fa1(\u57fa\u6e96\u5206\u304b\u3089\u305a)\n<br>most_recent_purchases_range=\u524d\u6708\u306e\u53d6\u5f15\u91cf\u306e\u7bc4\u56f2 - > A> B> C> D 36%> E 52%\u306e\uff15\u6bb5\u968e\u8a55\u4fa1(\u57fa\u6e96\u5206\u304b\u3089\u305a)\n<br>avg_sales_lag3=3\u30f6\u6708\u79fb\u52d5\u5e73\u5747\u53ce\u76ca\u3000-82.13~9k\uff08\u76f4\u8fd13\u30f6\u6708\u9593\u306e\u53ce\u76ca\u3092\u76f4\u8fd1\u306e\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u6708\u306e\u58f2\u4e0a\u3067\u5272\u3063\u305f\u6708\u5e73\u5747\uff09\n<br>avg_purchases_lag3=3\u30f6\u6708\u79fb\u52d5\u5e73\u5747\u53d6\u5f15\u30000.3~99(\u904e\u53bb3\u304b\u6708\u306e\u53d6\u5f15\u306e\u6708\u5e73\u5747\u3092\u524d\u306e\u30a2\u30af\u30c6\u30a3\u30d6\u6708\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3067\u5272\u3063\u305f\u3082\u306e)\n<br>active_months_lag3=\u904e\u53bb3\u30f6\u6708\u3067\u53d6\u5f15\u304c\u3042\u3063\u305f\u6708\u306e\u6570 1~3\n<br>\n<br>avg_sales_lag6=6\u30f6\u6708\u79fb\u52d5\u5e73\u5747\u53ce\u76ca\u3000\uff08\u76f4\u8fd1\u306e6\u30f6\u6708\u9593\u306e\u53ce\u76ca\u3092\u76f4\u8fd1\u306e\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u6708\u306e\u58f2\u4e0a\u3067\u5272\u3063\u305f\u6708\u5e73\u5747\uff09\n<br>avg_purchases_lag6=6\u30f6\u6708\u79fb\u52d5\u5e73\u5747\u53d6\u5f15\u3000\uff08\u904e\u53bb6\u304b\u6708\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u6708\u5e73\u5747\u3092\u524d\u306e\u30a2\u30af\u30c6\u30a3\u30d6\u6708\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3067\u5272\u3063\u305f\u3082\u306e\uff09\n<br>active_months_lag6=\u904e\u53bb6\u30f6\u6708\u3067\u53d6\u5f15\u304c\u3042\u3063\u305f\u6708\u306e\u6570\n<br>\n<br>avg_sales_lag12=12\u30f6\u6708\u79fb\u52d5\u5e73\u5747\u53ce\u76ca\u3000\uff08\u76f4\u8fd1\u306e12\u30f6\u6708\u306e\u58f2\u4e0a\u3092\u76f4\u8fd1\u306e\u6709\u52b9\u6708\u306e\u58f2\u4e0a\u3067\u5272\u3063\u305f\u6708\u5e73\u5747\uff09\n<br>avg_purchases_lag12=12\u30f6\u6708\u79fb\u52d5\u5e73\u5747\u53d6\u5f15\uff08\u904e\u53bb12\u304b\u6708\u9593\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u6708\u5e73\u5747\u3092\u3001\u76f4\u524d\u306e\u30a2\u30af\u30c6\u30a3\u30d6\u6708\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3067\u5272\u3063\u305f\u3082\u306e\uff09\n<br>active_months_lag12=\u904e\u53bb12\u304b\u6708\u3067\u53d6\u5f15\u304c\u3042\u3063\u305f\u6708\u306e\u6570","59b3869f":"\u30af\u30ec\u30ab\u53d6\u5f15\u5c65\u6b74(historical_transactions.csv)\u306e\u30ab\u30fc\u30c9\u6c7a\u6e08\u5b8c\u4e86\u30d5\u30e9\u30b0\u304c\u6210\u529f\u3060\u3063\u305f\u30c7\u30fc\u30bf\u306e\n<br>\u53d6\u5f15\u56de\u6570\u3001\u30ab\u30c6\u30b4\u30ea\uff11\u306e\u5408\u8a08\u5e73\u5747\u3001\u30ab\u30c6\u30b4\u30ea\uff12\u306e\u5e73\u5747\u3001\u30ab\u30c6\u30b4\u30ea\uff13\u306e\u5e73\u5747\u3001\u8cfc\u5165\u91cf\u306e\u5408\u8a08\u5e73\u5747\u6700\u5927\u6700\u5c0f\u6a19\u6e96\u504f\u5dee\n<br>\u5206\u5272\u56de\u6570\u306e\u5408\u8a08\u5e73\u5747\u6700\u5927\u6700\u5c0f\u6a19\u6e96\u504f\u5dee\u3001\u8cfc\u5165\u6708\u306e\u5e73\u5747\u6700\u5c0f\u6a19\u6e96\u504f\u5dee\u3001\u8cfc\u5165\u65e5\u306e\u7bc4\u56f2\u6700\u5c0f\u6700\u5927\u3001\u4f55\u65e5\u524d\u8cfc\u5165\u306e\u6700\u5c0f\u6700\u5927\n<br>\u3092\u8ffd\u52a0","e40c8099":"# \u4eca\u307e\u3067\u4f5c\u6210\u3057\u305f\u30c7\u30fc\u30bf\u3092train(\u53ca\u3073test)\u30c7\u30fc\u30bf\u306b\u7d50\u5408","a48d0640":"## \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\uff08\u7279\u5fb4\u91cf\u5275\u51fa\uff09","2a3fc1a0":"## \u30b9\u30bf\u30c3\u30ad\u30f3\u30b0","1f2d3190":"## \u672c\u30ab\u30fc\u30cd\u30eb\u306b\u306f\u8a18\u8ff0\u3057\u3066\u306a\u3044\u304c\u30c7\u30fc\u30bf\u306e\u8aac\u660e<br>(train\u3068test\u306f\u5c11\u3057\u5f8c\u3067\u89e3\u8aac\u3057\u3066\u307e\u3059)\n<br>\u30b3\u30f3\u30da\u30c7\u30fc\u30bf\u4e00\u89a7\n<br>\n<br>Data_Dictionary.xlsx\n<br>\u3000\u5404\u3005\u306e\u30c7\u30fc\u30bf\u306e\u8aac\u660e\u3092\u8a18\u8ff0\u3057\u3066\u308b\u30a8\u30af\u30bb\u30eb\u30d5\u30a1\u30a4\u30eb\n<br>merchants.csv(\u672c\u30ab\u30fc\u30cd\u30eb\u3067\u306f\u306a\u305c\u304b\u4e0d\u4f7f\u7528)(\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u3059\u3079\u3066\u306e\u8ca9\u58f2\u5074ID\u306b\u95a2\u3059\u308b\u8ffd\u52a0\u60c5\u5831\u3002)\n<br>\u3000\u30af\u30ec\u30ab\u767b\u9332\u5e97\u8217\u306e\u4e00\u89a7\u53ca\u3073\u30c7\u30fc\u30bf\n<br>historical_transactions.csv\n<br>\u3000\u30af\u30ec\u30ab\u53d6\u5f15\u5c65\u6b74\u3000(\u5404card_id\u306b\u3064\u3044\u3066\u6700\u59273\u304b\u6708\u5206\u306e\u904e\u53bb\u306e\u53d6\u5f15)\n<br>new_merchant_transactions.csv\u3000\n<br>\u3000(\u4e0a\u8a18\u5c65\u6b74\u30c7\u30fc\u30bf\u3067\u306f\u8a2a\u554f\u3055\u308c\u306a\u304b\u3063\u305fmerchant_id\u3067\u884c\u308f\u308c\u305f\u3059\u3079\u3066\u306e\u8cfc\u5165\u3092\u542b\u3080\u3001\u5404card_id\u306e2\u304b\u6708\u5206\u306e\u30c7\u30fc\u30bf\u3002)\n<br>\u3000\u8ca9\u58f2\u5074\u306e\u65b0\u898f\u53d6\u5f15\u5c65\u6b74\uff08\u30af\u30ec\u30ab\u5074\u306e\u30c7\u30fc\u30bf\u3067\u306f\u306a\u304f\u8ca9\u58f2\u5e97\u5074\u306e\u30c7\u30fc\u30bf\u306a\u306e\u3067\u306f\uff1f\uff09\n<br>train.csv\n<br>\u3000\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3000\u9867\u5ba2\u306eID\u3068\u30ab\u30c6\u30b4\u30ea\u5206\u3051\u304c\u3055\u308c\u3066\u308b\n<br>test.csv\n<br>\u3000\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3000\u540c\u4e0a\n<br>sample_submission.csv\n<br>\u3000\u4e88\u6e2c\u7d50\u679c\u3092\u66f8\u304d\u8fbc\u3080\u6240\n<br><br><br>\nElo_Blending=\u4e88\u6e2c\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u70ba\u306b\u7528\u610f\u3057\u305f\u30c7\u30fc\u30bf\n<br><br>\n\u904e\u53bb\u306b\u4e88\u6e2c\u3057\u305f\u30c7\u30fc\u30bf\u304c\u8272\u3005\u5165\u3063\u3066\u308b","bb937bfd":"## train.csv \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf =\u3000test.csv \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\n<br>\n<br>#card_id\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u30ab\u30fc\u30c9ID\u3000\u3000\u3000\u3000\n<br>#first_active_month\u3000\u3000\u521d\u8cfc\u5165\u6708\u3000\u3000\u3000\u3000\n<br>#feature_1            \u3000\u3000\u533f\u540d\u30ab\u30fc\u30c9\u306e\u5206\u985e\u6a5f\u80fd(\u30b4\u30fc\u30eb\u30c9\u4f1a\u54e1\uff1f)\n<br>#feature_2\u3000\u3000\u3000\u3000\u3000\u3000\uff13\u6bb5\u968e\u306b\u5206\u304b\u308c\u3066\u3044\u308b\n<br>#feature_3\n<br>#elapsed_time\u3000\u3000\u3000\u30002018\u5e742\u67081\u65e5\u304b\u3089\u521d\u8cfc\u5165\u6708\u304c\u4f55\u65e5\u524d\u304b","21393326":"\u30af\u30ec\u30ab\u53d6\u5f15\u5c65\u6b74(historical_transactions.csv)\u306e\u30ab\u30fc\u30c9\u6c7a\u6e08\u5b8c\u4e86\u30d5\u30e9\u30b0\u304c\u5931\u6557\u3060\u3063\u305f\u30c7\u30fc\u30bf\u306e\n<br>\u53d6\u5f15\u56de\u6570\u3001\u30ab\u30c6\u30b4\u30ea\uff11\u306e\u5408\u8a08\u5e73\u5747\u3001\u30ab\u30c6\u30b4\u30ea\uff12\u306e\u5e73\u5747\u3001\u30ab\u30c6\u30b4\u30ea\uff13\u306e\u5e73\u5747\u3001\u8cfc\u5165\u91cf\u306e\u5408\u8a08\u5e73\u5747\u6700\u5927\u6700\u5c0f\u6a19\u6e96\u504f\u5dee\n<br>\u5206\u5272\u56de\u6570\u306e\u5408\u8a08\u5e73\u5747\u6700\u5927\u6700\u5c0f\u6a19\u6e96\u504f\u5dee\u3001\u8cfc\u5165\u6708\u306e\u5e73\u5747\u6700\u5c0f\u6a19\u6e96\u504f\u5dee\u3001\u8cfc\u5165\u65e5\u306e\u7bc4\u56f2\u6700\u5c0f\u6700\u5927\u3001\u4f55\u65e5\u524d\u8cfc\u5165\u306e\u6700\u5c0f\u6700\u5927\n<br>\u3092\u8ffd\u52a0","334166ca":"## \u7e70\u308a\u8fd4\u3057LGBM\u306ekfold\u30a2\u30d7\u30ed\u30fc\u30c1\n\nRepeatedKFold\u306f\u3001K-Fold\u3092n\u56de\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002 KFold\u3092n\u56de\u5b9f\u884c\u3057\u3066\u3001\u7e70\u308a\u8fd4\u3057\u3054\u3068\u306b\u7570\u306a\u308b\u5206\u5272\u3092\u751f\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002","26414809":"## \u2191new_merchant_transactions.csv \u8ca9\u58f2\u5074\u306e\u65b0\u898f\u53d6\u5f15\u5c65\u6b74\n<br>card_id\uff1d\u30ab\u30fc\u30c9ID\n<br>month_lag\uff1d\u57fa\u6e96\u65e5(2018\u5e742\u6708\uff1f\uff09\u307e\u3067\u306e\u6708\u5dee\n<br>purchase_date\uff1d\u8cfc\u5165\u65e5\n<br>\n<br>authorized_flag\uff1d\u53d6\u5f15\u5b8c\u4e86\u30d5\u30e9\u30b0\u3000\uff08\u627f\u8a8d\u3055\u308c\u305f\u5834\u5408\u306fY\u3001\u62d2\u5426\u3055\u308c\u305f\u5834\u5408\u306fN\uff09\n<br>\n<br>category_1\uff1d\u30ab\u30c6\u30b4\u30ea\u3000N97%\u3000Y3%\n<br>category_2\uff1d\u30ab\u30c6\u30b4\u30ea\u30001\uff5e5\n<br>category_3\uff1d\u30ab\u30c6\u30b4\u30ea\u3000A47\uff05\u3000B43%\n<br>\n<br>installments\uff1d\u8cfc\u5165\u306e\u5206\u5272\u6570\u3000\uff0d\uff11\uff5e\uff19\uff19\uff19\uff08\uff19\uff19\uff19\u56de\u5206\u5272\u306f\u4e0d\u6b63\u53d6\u5f15\u307d\u3044\uff09\n<br>\n<br>merchant_category_id\uff1d\u8ca9\u58f2\u8005\u30ab\u30c6\u30b4\u30eaID\n<br>subsector_id\uff1d\u8ca9\u58f2\u8005\u30ab\u30c6\u30b4\u30ea\u30b0\u30eb\u30fc\u30d7ID\n<br>merchant_id\uff1d\u8ca9\u58f2\u8005ID\n<br>\n<br>purchase_amount\uff1d\u8cfc\u5165\u91cf\n<br>\n<br>city_id\uff1d\u5e02ID\n<br>state_id\uff1d\u5ddeID","24da9645":"### historical_transactions.csv\t\u30af\u30ec\u30ab\u53d6\u5f15\u5c65\u6b74\u306e\u8cfc\u5165\u91cf(purchase_amount) \u3068\u5206\u5272\u56de\u6570\u306e\n### \u30ec\u30b3\u30fc\u30c9\u6570\u3001\u5408\u8a08\u3001\u5e73\u5747\u3001\u6700\u5c0f\u5024\u3001\u6700\u5927\u3001\u6a19\u6e96\u504f\u5dee\u306e\u30ab\u30e9\u30e0\u6bce\u306e\u30ab\u30fc\u30c9ID\u6bce\u306e\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u3092\u8ffd\u52a0","cad30169":"## LightGBM"}}