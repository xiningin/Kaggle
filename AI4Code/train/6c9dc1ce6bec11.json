{"cell_type":{"9fda4831":"code","8e16c206":"code","a6cd8972":"code","db571b3a":"code","5fe60037":"code","6f2f99c7":"code","77b97906":"code","569b8eab":"code","3b6a2e88":"code","4bcd3acf":"code","10b4a767":"code","6aea4165":"code","8b9b80b3":"code","f4864588":"code","12abb690":"code","a02dc800":"code","2f1ef129":"code","a0c197de":"code","092c7a57":"code","1ad357b9":"code","e3d30e86":"code","fa1b97ce":"code","80924e07":"code","21caeb92":"code","a4f9e6f6":"code","0219711c":"code","ba6af0a0":"code","c0c49025":"code","41cdc445":"code","87567b7d":"code","a258e969":"code","76398f73":"code","a7564233":"code","6bbf6ac1":"code","d6167448":"code","641e4b15":"code","7ea33bc2":"code","5462923a":"code","500cdbac":"code","1b6e4db1":"code","b6c1d0b5":"code","5e5a39a8":"code","122e4fe0":"code","e4172377":"code","06b47d54":"code","bcb40cd3":"code","0686f358":"code","04322ddd":"code","8fe6ee37":"code","8641f000":"code","8d8273e6":"code","d0f59369":"code","92e2443d":"markdown","3ad4cbdc":"markdown","78fcb24e":"markdown","e32dff8c":"markdown","54ee0ec8":"markdown","5ff587c9":"markdown","d48424c9":"markdown","464e3d1f":"markdown","70bc1654":"markdown","19e952fe":"markdown","3b3d4fde":"markdown","944c979b":"markdown","41599f83":"markdown","07809079":"markdown","f52db80b":"markdown","e826ca01":"markdown","cdec7503":"markdown","20df01c9":"markdown","dd6fd15c":"markdown","675bfb0e":"markdown","d657d388":"markdown","edf674c4":"markdown","ac7750a4":"markdown","a7d0ba3f":"markdown","4b6e695f":"markdown","dec794da":"markdown","4cee86c6":"markdown","dd206407":"markdown","7964dd64":"markdown","4ea18af6":"markdown"},"source":{"9fda4831":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#Step1: Necessery imports\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport scipy as scipy\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport statsmodels.formula.api as smf\nfrom pandas import DataFrame\nfrom sklearn import linear_model\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score , mean_absolute_error\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n#Step2: Loading the data \n#Change the csv file for another brand\n#Added Data types for memory optimization and faster loading\ndata = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/merc.csv', low_memory=False, nrows=14000,\n                   dtype={\n                       'year': object,\n                       'year': int,\n                       'price': int,\n                       'transmission': object,\n                       'mileage': int,\n                       'fuelType': object,\n                       'tax': int,\n                       'mpg': float,\n                       'engineSize ': float\n                   })\ndata.shape","8e16c206":"#machine learning and making predictions\n#Display columns\ndata.columns\n#drop empty values\ndata = data.dropna(axis=0)\n#selecting prediction target\ny = data.price\n#Choosing features and stroring it in X\ndata_features = ['year', 'mileage', 'tax', 'mpg', 'engineSize']\nX = data[data_features]\n#Describe data in X\nX.describe()\n#Describe the head\nX.head()\n\n\n\n# Define model. Specify a number for random_state to ensure same results each run\ndata_model = DecisionTreeRegressor(random_state=1)\n\n# Fit model\ndata_model.fit(X, y)\n\n#Printing Predictions\nprint(\"Making predictions for the following 5 Cars:\")\nprint(X.head())\nprint(\"The predictions are\")\nprint(data_model.predict(X.head()))","a6cd8972":"#Evaluating and validating the model\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)\n# Define model\ndata_model = DecisionTreeRegressor()\n# Fit model\ndata_model.fit(train_X, train_y)\n\n# get predicted prices on validation data\nval_predictions = data_model.predict(val_X)\nprint(mean_absolute_error(val_y, val_predictions))","db571b3a":"#underfitting and overfitting\ndef get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)\n# compare MAE with differing values of max_leaf_nodes\nfor max_leaf_nodes in [5, 50, 500, 5000]:\n    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, my_mae))","5fe60037":"forest_model = RandomForestRegressor(random_state=1)\nforest_model.fit(train_X, train_y)\ndata_preds = forest_model.predict(val_X)\nprint(mean_absolute_error(val_y, data_preds))","6f2f99c7":"std = np.std(data)\nprint(std)\n\n\n","77b97906":"cv = np.std(data) \/ np.mean(data)\nprint(cv)","569b8eab":"var_full = np.var(data)\nprint(var_full)","3b6a2e88":"#Step3:Describing the data\ndata.describe()","4bcd3acf":"#Step3:Describing the data - finding the mode [most frequent]\ndata.mode","10b4a767":"#Step4: Loading the data in the axis data frames:\nX1 = DataFrame(data, columns=['engineSize'])\ny1 = DataFrame(data, columns=['mpg'])\nX2 = DataFrame(data, columns=['year'])\ny2 = DataFrame(data, columns=['mileage'])\nX3 = DataFrame(data, columns=['year'])\ny3 = DataFrame(data, columns=['price'])\nX4 = DataFrame(data, columns=['year'])\ny4 = DataFrame(data, columns=['engineSize'])\nX5 = DataFrame(data, columns=['mpg'])\ny5 = DataFrame(data, columns=['year'])\nX6 = DataFrame(data, columns=['price'])\ny6 = DataFrame(data, columns=['mileage'])\nX7 = DataFrame(data, columns=['mileage'])\ny7 = DataFrame(data, columns=['price'])\n","6aea4165":"#Step5: Drawing the plot with data:\n\nplt.figure(figsize=(12,8))\nplt.scatter(X1, y1, alpha = 0.3)\nplt.title('MPG vs Engine Size')\nplt.xlabel('Engine Size in Liters')\nplt.ylabel('MPG')\nplt.ylim(0, 100)\nplt.xlim(0, 7)\nplt.show()\n#Step6: Updating the previous code to draw the LinearRegression\nplt.figure(figsize=(12,8))\nplt.scatter(X1, y1, alpha = 0.3)\n#Draws the Linear Regression\nregression = linear_model.LinearRegression()\nregression.fit(X1, y1)\nplt.plot(X1, regression.predict(X1), color='red', linewidth=4)\nplt.title('MPG vs Engine Size')\nplt.xlabel('Engine Size in Liters')\nplt.ylabel('MPG')\nplt.ylim(0, 100)\nplt.xlim(0, 7)\nplt.show()\n\n#Step7:Calculating the Regression Theta Coefficient:\nprint('Regression coeficent: %.2f' % regression.coef_ )#theta_1\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(X1, y1))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(X1, y1))\n\n","8b9b80b3":"#Step5: Drawing the plot with data:\n\nplt.figure(figsize=(12,8))\nplt.scatter(X2, y2, alpha = 0.3)\nplt.title('Year vs Mileage')\nplt.xlabel('Year')\nplt.ylabel('Mileage')\nplt.ylim(0, 180000)\nplt.xlim(1997, 2021)\nplt.show()\n#Step6: Updating the previous code to draw the LinearRegression\nplt.figure(figsize=(12,8))\nplt.scatter(X2, y2, alpha = 0.3)\n#Draws the Linear Regression\nregression = linear_model.LinearRegression()\nregression.fit(X2, y2)\nplt.plot(X2, regression.predict(X2), color='red', linewidth=4)\nplt.title('Year vs Mileage')\nplt.xlabel('Year')\nplt.ylabel('Mileage')\nplt.ylim(0, 200000)\nplt.xlim(1995, 2021)\nplt.show()\n\n#Step7:Calculating the Regression Theta Coefficient:\nprint('Regression coeficent: %.2f' % regression.coef_ )#theta_1\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(X2, y2))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(X2, y2))","f4864588":"#Step5: Drawing the plot with data:\n\nplt.figure(figsize=(12,8))\nplt.scatter(X3, y3, alpha = 0.3)\nplt.title('Year vs Price')\nplt.xlabel('Year')\nplt.ylabel('Price')\nplt.ylim(0, 50000)\nplt.xlim(1997, 2021)\nplt.show()\n#Step6: Updating the previous code to draw the LinearRegression\nplt.figure(figsize=(12,8))\nplt.scatter(X3, y3, alpha = 0.3)\n#Draws the Linear Regression\nregression = linear_model.LinearRegression()\nregression.fit(X3, y3)\nplt.plot(X3, regression.predict(X3), color='red', linewidth=4)\nplt.title('Year vs Price')\nplt.xlabel('Year')\nplt.ylabel('Price')\nplt.ylim(0, 50000)\nplt.xlim(1997, 2021)\nplt.show()\n\n#Step7:Calculating the Regression Theta Coefficient:\nprint('Regression coeficent: %.2f' % regression.coef_ )#theta_1\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(X3, y3))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(X3, y3))","12abb690":"#Step5: Drawing the plot with data:\n\nplt.figure(figsize=(12,8))\nplt.scatter(X4, y4, alpha = 0.3)\nplt.title('Year vs Engine Size')\nplt.xlabel('Year')\nplt.ylabel('Engine Size')\nplt.ylim(0, 6)\nplt.xlim(1997, 2021)\nplt.show()\n#Step6: Updating the previous code to draw the LinearRegression\nplt.figure(figsize=(12,8))\nplt.scatter(X4, y4, alpha = 0.3)\n#Draws the Linear Regression\nregression = linear_model.LinearRegression()\nregression.fit(X4, y4)\nplt.plot(X4, regression.predict(X4), color='red', linewidth=4)\nplt.title('Year vs Engine Size')\nplt.xlabel('Year')\nplt.ylabel('Engine Size')\nplt.ylim(0, 6)\nplt.xlim(1997, 2021)\nplt.show()\n\n#Step7:Calculating the Regression Theta Coefficient:\nprint('Regression coeficent: %.2f' % regression.coef_ )#theta_1\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(X4, y4))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(X4, y4))","a02dc800":"#Step5: Drawing the plot with data:\n\nplt.figure(figsize=(12,8))\nplt.scatter(X5, y5, alpha = 0.3)\nplt.title('Year vs MPG')\nplt.xlabel('MPG')\nplt.ylabel('Year')\nplt.ylim(1997, 2021)\nplt.xlim(0, 100)\nplt.show()\n#Step6: Updating the previous code to draw the LinearRegression\nplt.figure(figsize=(12,8))\nplt.scatter(X5, y5, alpha = 0.3)\n#Draws the Linear Regression\nregression = linear_model.LinearRegression()\nregression.fit(X5, y5)\nplt.plot(X5, regression.predict(X5), color='red', linewidth=4)\nplt.title('Year vs MPG')\nplt.xlabel('MPG')\nplt.ylabel('Year')\nplt.ylim(1997, 2021)\nplt.xlim(0, 100)\nplt.show()\n\n#Step7:Calculating the Regression Theta Coefficient:\nprint('Regression coeficent: %.2f' % regression.coef_ )#theta_1\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(X5, y5))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(X5, y5))","2f1ef129":"#Step5: Drawing the plot with data:\n\nplt.figure(figsize=(12,8))\nplt.scatter(X6, y6, alpha = 0.3)\nplt.title('Price vs Mileage')\nplt.xlabel('Price')\nplt.ylabel('Mileage')\nplt.ylim(0, 200000)\nplt.xlim(0, 50000)\nplt.show()\n#Step6: Updating the previous code to draw the LinearRegression\nplt.figure(figsize=(12,8))\nplt.scatter(X6, y6, alpha = 0.3)\n#Draws the Linear Regression\nregression = linear_model.LinearRegression()\nregression.fit(X6, y6)\nplt.plot(X6, regression.predict(X6), color='red', linewidth=4)\nplt.title('Price vs Mileage')\nplt.xlabel('Price')\nplt.ylabel('Mileage')\nplt.ylim(0, 200000)\nplt.xlim(0, 50000)\nplt.show()\n\n#Step7:Calculating the Regression Theta Coefficient:\nprint('Regression coeficent: %.2f' % regression.coef_ )#theta_1\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(X6, y6))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(X6, y6))","a0c197de":"#Step5: Drawing the plot with data:\n\nplt.figure(figsize=(12,8))\nplt.scatter(X7, y7, alpha = 0.3)\nregression = linear_model.LinearRegression()\nregression.fit(X7, y7)\n\n\nplt.plot(X7, regression.predict(X7), color='red', linewidth=4)\nplt.title('price vs mileage')\nplt.xlabel('mileage')\nplt.ylabel('price')\nplt.ylim(0, 50000)\nplt.xlim(0, 160000)\n\n\nplt.show()\n\n#Step7:Calculating the Regression Theta Coefficient:\nprint('Regression coeficent: %.2f' % regression.coef_ )#theta_1\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(X7, y7))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(X7, y7))","092c7a57":"#Step5: Drawing the plot with data:\n\nplt.figure(figsize=(12,8))\nplt.scatter(X7, y7, alpha = 0.3)\nregression = linear_model.LinearRegression()\nregression.fit(X7, y7)\n\n\nplt.plot(X7, regression.predict(X7), color='red', linewidth=4)\nplt.title('price vs mileage')\nplt.xlabel('mileage')\nplt.ylabel('price')\nplt.ylim(0, 50000)\nplt.xlim(0, 160000)\n\n\nplt.show()\n\n#Step7:Calculating the Regression Theta Coefficient:\nprint('Regression coeficent: %.2f' % regression.coef_ )#theta_1\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(X7, y7))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(X7, y7))","1ad357b9":"data_model=data['model'].value_counts().reset_index().rename(columns={'index':'model','model':'Count'})\ndata_model\nfig = px.pie(data_model, values='Count', names='model')\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=12,insidetextorientation='radial')\nfig.update_layout(title=\"model Distribution\",title_x=0.5)\nfig.show()","e3d30e86":"data_price=data['price'].value_counts().reset_index().rename(columns={'index':'price','price':'Count'})\ndata_price\nfig = px.pie(data_price, values='Count', names='price')\n\ndata_engineSize=data['engineSize'].value_counts().reset_index().rename(columns={'index':'engineSize','engineSize':'Count'})\ndata_engineSize\nfig = px.pie(data_engineSize, values='Count', names='engineSize')\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=12,insidetextorientation='radial')\nfig.update_layout(title=\"engineSize Distribution\",title_x=0.5)\nfig.show()","fa1b97ce":"#controls the numer of rows to be read in the dataframe\nstart, end = 0, 100","80924e07":"\n\nfig = go.Figure(data=go.Scatter3d(\n    x=data['model'][start:end],\n    y=data['year'][start:end],\n    z=data['price'][start:end],\n    text=data['transmission'][start:end],\n    mode='markers',\n    marker=dict(\n        sizemode='diameter',\n        sizeref=10000,\n        size=data['mileage'][start:end],\n        color = data['mileage'][start:end],\n        colorscale = 'Viridis',\n        colorbar_title = 'MILEAGE<br>',\n        line_color='rgb(140, 140, 170)'\n    )\n))\n\n\n\n\n\n\n\n\nfig.update_layout(height=800, width=800,\n                  title='3-D Graph - X-Model,Y-Year,Z-Price,Size-mileage,Color-mileage')\n\n\n\n\n\n\nfig.show()\n","21caeb92":"\n\nfig = go.Figure(data=go.Scatter3d(\n    x=data['model'][start:end],\n    y=data['year'][start:end],\n    z=data['price'][start:end],\n    text=data['engineSize'][start:end],\n    mode='markers',\n    marker=dict(\n        sizemode='diameter',\n        sizeref=5000,\n        size=data['mileage'][start:end],\n        color = data['engineSize'][start:end],\n        colorscale = 'Viridis',\n        colorbar_title = 'ENGINE SIZE<br>',\n        line_color='rgb(140, 140, 170)'\n    )\n))\n\n\n\n\n\n\n\n\nfig.update_layout(height=800, width=800,\n                  title='3-D Graph - X-Model,Y-Year,Z-Price,Size-mileage,Color-engineSize')\n\n\n\n\n\n\nfig.show()\n","a4f9e6f6":"\n\nfig = go.Figure(data=go.Scatter3d(\n    x=data['model'][start:end],\n    y=data['year'][start:end],\n    z=data['price'][start:end],\n    text=data['transmission'][start:end],\n    mode='markers',\n    marker=dict(\n        sizemode='diameter',\n        sizeref=5000,\n        size=data['mileage'][start:end],\n        color = data['mileage'][start:end],\n        colorscale = 'Viridis',\n        colorbar_title = 'MILEAGE<br>',\n        line_color='rgb(140, 140, 170)'\n    )\n))\n\n\n\n\n\n\n\n\nfig.update_layout(height=800, width=800,\n                  title='3-D Graph - X-Model,Y-Year,Z-Price,Size-mileage,Color-mileage')\n\n\n\n\n\n\nfig.show()\n","0219711c":"\n\nfig = go.Figure(data=go.Scatter3d(\n    x=data['model'][start:end],\n    y=data['year'][start:end],\n    z=data['engineSize'][start:end],\n    text=data['fuelType'][start:end],\n    mode='markers',\n    marker=dict(\n        sizemode='diameter',\n        sizeref=20,\n        size=data['tax'][start:end],\n        color = data['tax'][start:end],\n        colorscale = 'Viridis',\n        colorbar_title = 'tax<br>',\n        line_color='rgb(140, 140, 170)'\n    )\n))\n\n\n\n\n\n\n\n\nfig.update_layout(height=800, width=800,\n                  title='3-D Graph - X-Model,Y-Year,Z-Engine Size,Size-tax,Color-tax')\n\n\n\n\n\n\nfig.show()\n","ba6af0a0":"\n\nfig = go.Figure(data=go.Scatter3d(\n    x=data['model'][start:end],\n    y=data['year'][start:end],\n    z=data['mpg'][start:end],\n    text=data['fuelType'][start:end],\n    mode='markers',\n    marker=dict(\n        sizemode='diameter',\n        sizeref=0.2,\n        size=data['engineSize'][start:end],\n        color = data['engineSize'][start:end],\n        colorscale = 'Viridis',\n        colorbar_title = 'engineSize<br>',\n        line_color='rgb(140, 140, 170)'\n    )\n))\n\n\n\n\n\n\n\n\nfig.update_layout(height=800, width=800,\n                  title='3-D Graph - X-Model,Y-Year,Z-MPG,Size-engineSize,Color-engineSize')\n\n\n\n\n\n\nfig.show()\n","c0c49025":"data.sort_values(by='year', ascending=True).head(10)","41cdc445":"data.sort_values(by='year', ascending=True).tail(10)","87567b7d":"\ndata.sort_values(by='price', ascending=True).head(10)","a258e969":"data.sort_values(by='price', ascending=True).tail(10)","76398f73":"\ndata.sort_values(by='mileage', ascending=True).head(10)","a7564233":"data.sort_values(by='mileage', ascending=True).tail(10)","6bbf6ac1":"\ndata.sort_values(by='tax', ascending=True).head(10)","d6167448":"data.sort_values(by='tax', ascending=True).tail(10)","641e4b15":"\ndata.sort_values(by='mpg', ascending=True).head(10)","7ea33bc2":"data.sort_values(by='mpg', ascending=True).tail(10)","5462923a":"data.sort_values(by='engineSize', ascending=True).head(10)","500cdbac":"data.sort_values(by='engineSize', ascending=True).tail(10)","1b6e4db1":"#correlate data\ncorr = data.corr()\n\n#using matplotlib to define the size\n\nplt.figure(figsize=(8, 8))\n\n#creating the heatmap with seaborn\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","b6c1d0b5":"# Contrasting heatmap with seaborn\n\nsns.set_theme(style=\"dark\")\n\n\n# Compute the correlation matrix\ncorr = data.corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(8, 8))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmin=-0.1, vmax=0.1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","5e5a39a8":"corr = data.corr()\n\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\ncorr = corr.mask(mask)\nfig = ff.create_annotated_heatmap(\n    z=corr.to_numpy().round(2),\n    x=list(corr.index.values),\n    y=list(corr.columns.values),       \n    xgap=3, ygap=3,\n    zmin=-1, zmax=1,\n    colorscale='fall',\n    colorbar_thickness=30,\n    colorbar_ticklen=3,\n)\nfig.update_layout(title_text='Correlation Matrix (impact relationship with numbers)',\n                  title_x=0.5,\n                  titlefont={'size': 20},\n                  width=800, height=800,\n                  xaxis_showgrid=False,\n                  xaxis={'side': 'bottom'},\n                  yaxis_showgrid=False,\n                  yaxis_autorange='reversed',                   \n                  paper_bgcolor=None,\n                  template=\"simple_white\"\n                  )\nfig.show()\n","122e4fe0":"sns.jointplot(x=\"year\", y=\"price\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","e4172377":"sns.jointplot(x=\"mileage\", y=\"price\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","06b47d54":"sns.jointplot(x=\"mpg\", y=\"price\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","bcb40cd3":"sns.jointplot(x=\"tax\", y=\"price\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","0686f358":"sns.jointplot(x=\"engineSize\", y=\"price\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","04322ddd":"sns.pairplot(data,palette='bright')","8fe6ee37":"sns.set(style=\"ticks\", color_codes=True)\ng = sns.pairplot(data, kind=\"reg\", plot_kws={'line_kws':{'color':'red'}})\nplt.show()","8641f000":"model = smf.ols('price ~ year', data = data)\nresults = model.fit()\nprint(results.summary())","8d8273e6":"model = smf.ols('price ~ mileage', data = data)\nresults = model.fit()\nprint(results.summary())","d0f59369":"model = smf.ols('price ~ mpg', data = data)\nresults = model.fit()\nprint(results.summary())","92e2443d":"# The Least Thirsty","3ad4cbdc":"# Describing the data ","78fcb24e":"# The Most Cheapest","e32dff8c":"# Examing The Average and making predictions\n> Drawing the plot with data for and with Linear regression","54ee0ec8":"# Car Predictor UK\n\n* The application helps people find the best cars in Uk.\n* Examines the average and makes predictions on various factors.\n* Examines factors like fuel ecomonomy, depreciation e.t.c. \n* Creates 3-D Visualizations. \n* Shows the Top 10. \n* Shows the correlation between factors with heatmaps.\n* Is optimized to work with large datasets","5ff587c9":"# 3-D Visualization","d48424c9":"# Depreciation Linear Regression Table","464e3d1f":"***Part1: Building the model***","70bc1654":"# Making Predictions\n*building mathematical Machine Learning Model model and making predictions\n*evaluating the model","19e952fe":"# The Oldest","3b3d4fde":"# The Highest Tax","944c979b":"***Coefficient of Variation***","41599f83":"# The Newest","07809079":"# Correlation Influence Heatmaps","f52db80b":"# The Most Expensive","e826ca01":"***Standard deviation***","cdec7503":"# The Bigest Engine","20df01c9":"***Random Forest***","dd6fd15c":"# The Most Thirsty","675bfb0e":"# TOP 10:","d657d388":"# Model & Engine Size Distribution","edf674c4":"# The Highest Mileage","ac7750a4":"# The Smallest Engine","a7d0ba3f":"***Part2 Evaluating the model***","4b6e695f":"# Storing the data ","dec794da":"# The Lowest Mileage","4cee86c6":"# The Lowest Tax","dd206407":"***Variance***","7964dd64":"# Jointplots correlating to and predicting price","4ea18af6":"#  PAIRPLOTS and Predictions"}}