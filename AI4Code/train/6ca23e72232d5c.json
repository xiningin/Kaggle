{"cell_type":{"8f7c7c70":"code","221276cb":"code","e0c111eb":"code","887a75f2":"code","ca77364e":"code","1e2e7047":"code","6048a080":"code","29f0f009":"code","6e78d299":"code","b0272878":"code","6198db87":"code","98975f11":"code","0d7b0237":"code","fee98863":"code","3caba4fa":"code","8a76749e":"code","eac6dd87":"code","0451e426":"code","43b06cf3":"code","213877f4":"code","13e49ae9":"code","2e79bd03":"code","514b71d4":"code","eaf35612":"code","6bdb23bb":"code","0147de6c":"code","4fa0b200":"code","e35c189f":"code","d0d54a8f":"code","f8825bd8":"code","51b5be35":"code","7d19bc55":"code","cdd5b965":"code","cf6218f6":"code","cc00e871":"code","8ec782d0":"code","2526bee6":"code","73387158":"code","ae72a13d":"code","ba03afe9":"code","8233601f":"code","6abc2dfd":"code","afb4e3b4":"code","fdb9b45e":"code","769d62ed":"code","1a5e8e84":"code","4958ebf0":"code","9de1d807":"code","3153dc68":"code","b05e7283":"code","2f168743":"code","73a97497":"code","78cbfc5b":"code","432c6e1a":"code","5d0c08dc":"code","f912915f":"code","8b631910":"code","fadf7df7":"code","ce322781":"code","d3069156":"code","61675058":"code","eb8cfec2":"code","f86b23de":"code","b24bd764":"code","d5450383":"code","776a0c6b":"code","d4f92d9b":"code","be0930de":"code","16d30c0e":"code","e79ea783":"code","428e397a":"code","ffa18825":"code","efed29a1":"code","814f5a81":"code","4fb5eb66":"code","ee96ce3c":"code","3113b28c":"code","118d52ff":"code","a8c978b2":"code","60ab5427":"code","1551147a":"code","7a9aafcd":"code","c7f3ebe0":"code","e57f0343":"code","c6897cf7":"code","6f7e5348":"code","31087cf7":"code","e421cc4a":"code","9a10c8ac":"code","7d02e93f":"code","72968a37":"code","221a6ad7":"code","89507e99":"code","f1dda664":"code","a6f2c2cc":"code","a27d2f8d":"code","137943ed":"code","2a659b43":"code","25cf0493":"code","fb556133":"code","af1f99cc":"code","ce764972":"code","4a8afecf":"code","b089758d":"code","036c3a67":"code","3cf2f528":"markdown","11ebd016":"markdown","870fc80b":"markdown","465a0bb5":"markdown","618e7957":"markdown","c9be7c38":"markdown","aabd9da7":"markdown","72d1b3ce":"markdown","aee11c67":"markdown","a8270ce2":"markdown","983118df":"markdown","a08fcec5":"markdown","203bd98a":"markdown","d011f3e8":"markdown","0d57c358":"markdown","550aaac3":"markdown","1b66670c":"markdown","ca291580":"markdown","442825c5":"markdown","ff2c4ab2":"markdown","904fa91b":"markdown","74a567b7":"markdown","fc98e0f9":"markdown","47d802d5":"markdown","a0bf5893":"markdown","fc8968b1":"markdown","625797b0":"markdown","5c5e3929":"markdown","7dd3c9a7":"markdown","d4a9b8eb":"markdown","ca8c0de9":"markdown","a3aff128":"markdown","ae829613":"markdown","3c375466":"markdown","bd606310":"markdown","08411afb":"markdown","5a45825f":"markdown","f2d837cd":"markdown","21e3d1f9":"markdown","aee225ab":"markdown"},"source":{"8f7c7c70":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","221276cb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nfrom scipy import stats\nfrom scipy.stats import skew,kurtosis\nfrom datetime import datetime\n%matplotlib inline","e0c111eb":"train_data=pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/train_SJC.csv\")\ntest_data=pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv\")","887a75f2":"train_data.head()   ##shown first five row of the dataset","ca77364e":"#rename the columns \ntrain_data=train_data.rename({\"Unnamed: 0\":\"ClaimNumber\",\"Unnamed: 1\":\"DateTimeOfAccident\",\n                             \"Unnamed: 3\":\"Age\",\"Unnamed: 4\":\"Gender\",\"Unnamed: 5\":\"MaritalStatus\",\n                             \"Unnamed: 6\":\"DependentChildren\",\"Unnamed: 8\":\"WeeklyWages\",\n                             \"Unnamed: 9\":\"PartTimeFullTime\",\"Unnamed: 10\":\"HoursWorkedPerWeek\",\n                             \"Unnamed: 12\":\"ClaimDescription\",\"Unnamed: 13\":\"InitialIncurredCalimsCost\",\n                             \"Unnamed: 14\":\"UltimateIncurredClaimCost\"},axis=1)","1e2e7047":"#drop the zero index row \ntrain_data=train_data.drop(0)\n","6048a080":"#reset row index\ntrain_data.reset_index(drop=True)","29f0f009":"train_data.head()","6e78d299":"print(train_data.shape)#checking the number of rows and columns this dataset has\nprint(test_data.shape)","b0272878":"print(train_data.isnull().sum()) #checking if there is any null value in each columns","6198db87":"print(train_data.duplicated().sum())#checking if there is duplicated values ","98975f11":"train_data.info() # gives overview of the dataset","0d7b0237":"#coverting object type data into int or float\ndf=train_data[[\"Age\",\"DependentChildren\",\"WeeklyWages\",\"HoursWorkedPerWeek\",\"InitialIncurredCalimsCost\",\"UltimateIncurredClaimCost\"]]\nfor i in df:\n    train_data[i]=pd.to_numeric(train_data[i],errors='coerce')","fee98863":"train_data.describe()# summmary statistic ","3caba4fa":"#categorical variables\ncatdata=train_data.select_dtypes(include='object')\ncatdata.head()","8a76749e":"numdata=train_data.select_dtypes(exclude='object') # numerical data\nnumdata.head()","eac6dd87":"train_data.columns","0451e426":"Counter(train_data[\"MaritalStatus\"]).most_common()# for count most common value    ","43b06cf3":"train_data[\"MaritalStatus\"]=train_data['MaritalStatus'].fillna(train_data['MaritalStatus'].mode()[0])","213877f4":"train_data[\"WeeklyWages\"].describe()","13e49ae9":"week=train_data[['WeeklyWages']].hist()\nhours=train_data[['HoursWorkedPerWeek']].hist()\nprint(\"Weekly wages on history graph\",week)\nprint(\"Hours worked per week on graph\",hours)","2e79bd03":"#both distribution are left sknewd so median is used here \ntrain_data[\"WeeklyWages\"]=train_data['WeeklyWages'].fillna(train_data['WeeklyWages'].median())\ntrain_data[\"HoursWorkedPerWeek\"]=train_data[\"HoursWorkedPerWeek\"].fillna(train_data['HoursWorkedPerWeek'].median())","514b71d4":"train_data.isnull().sum()","eaf35612":"catdata=train_data.select_dtypes(include='object')\ncatdata.head()","6bdb23bb":"#def outlier_checker(x):\n        #for i in x:  \n            ##sns.boxplot(x=catdata[i],y=train_data[\"UltimateIncurredClaimCost\"])\n           # plt.show()\n\n            \n#plt1=outlier_checker(catdata)\n","0147de6c":"Counter(train_data.DateTimeOfAccident).most_common(15)","4fa0b200":"#coverting date object data type into datetime\ntrain_data['DateTimeOfAccident']=pd.to_datetime(train_data['DateTimeOfAccident'])\ntrain_data['DateReported']=pd.to_datetime(train_data[\"DateReported\"])","e35c189f":"train_data.info()","d0d54a8f":"#extracting year, month,day_name from the date of accident\ntrain_data['YearOfAccident']=train_data['DateTimeOfAccident'].dt.year\ntrain_data['MonthOfAccident']=train_data['DateTimeOfAccident'].dt.month\ntrain_data['WeekdayOfAccident']=train_data['DateTimeOfAccident'].dt.day_name()","f8825bd8":"train_data['DateTimeOfAccident'].min() # earlierest date of accident","51b5be35":"train_data['DateTimeOfAccident'].max() # gives latest date accident","7d19bc55":"#How long it take the day of accident till the date of report\ntrain_data['Duration']=train_data['DateReported']-train_data['DateTimeOfAccident']","cdd5b965":"train_data.isnull().sum()","cf6218f6":"train_data.info()","cc00e871":"train_data['Gender'].value_counts().plot(kind='pie',legend=True,labels = ['M','F','U'],autopct='%1.1f%%',\n                                    title='gender proportion',)\ntrain_data['Gender'].value_counts()\n","8ec782d0":"train_data['MaritalStatus'].value_counts().plot(kind='pie',legend=True,labels = ['S','M','U'],autopct='%1.1f%%',\n                                    title='MaritalStatus proportion',)\ntrain_data['MaritalStatus'].value_counts()\n","2526bee6":"train_data['PartTimeFullTime'].value_counts()","73387158":"train_data['PartTimeFullTime'].value_counts().plot(kind='pie',legend=True,labels = ['F','P',],autopct='%1.1f%%',\n                                    title='PartTimeFullTime proportion',)\ntrain_data['PartTimeFullTime'].value_counts()\n","ae72a13d":"train_data.columns","ba03afe9":"sns.countplot(x=\"PartTimeFullTime\", hue=\"Gender\", data=train_data,)\nplt.show()","8233601f":"sns.countplot(x=\"MaritalStatus\", hue=\"Gender\", data=train_data,)\nplt.show()","6abc2dfd":"sns.countplot(x=\"DaysWorkedPerWeek\", data=train_data,)\nplt.show()","afb4e3b4":"sns.countplot(x=\"MonthOfAccident\", data=train_data,)\nplt.show()","fdb9b45e":"sns.countplot(x=\"YearOfAccident\", data=train_data,)\nplt.show()","769d62ed":"ax=sns.barplot(x=\"DependentChildren\", y=\"UltimateIncurredClaimCost\", data=train_data,)","1a5e8e84":"ax=sns.barplot(x=\"DependentsOther\", y=\"UltimateIncurredClaimCost\", data=train_data,)","4958ebf0":"ax=sns.lineplot(x=\"WeeklyWages\", y=\"UltimateIncurredClaimCost\", data=train_data,)","9de1d807":"ax=sns.barplot(x=\"PartTimeFullTime\", y=\"UltimateIncurredClaimCost\", data=train_data,)","3153dc68":"sns.scatterplot(train_data['HoursWorkedPerWeek'],train_data['UltimateIncurredClaimCost'])","b05e7283":"ax=sns.lineplot(x=\"HoursWorkedPerWeek\", y=\"UltimateIncurredClaimCost\", data=train_data,)","2f168743":"ax=sns.lineplot(x=\"DaysWorkedPerWeek\", y=\"UltimateIncurredClaimCost\", data=train_data,)\n","73a97497":"ax=sns.lineplot(x=\"InitialIncurredCalimsCost\", y=\"UltimateIncurredClaimCost\", data=train_data,)\n","78cbfc5b":"train_data.columns","432c6e1a":"g=sns.relplot(x='DaysWorkedPerWeek', y=\"UltimateIncurredClaimCost\",\n                 col=\"PartTimeFullTime\",\n                 kind=\"line\", data=train_data,col_wrap=3,height=5,aspect=.80,linewidth=3)","5d0c08dc":"train_data.info()","f912915f":"#covert the data type into string\ntrain_data['Gender']=train_data['Gender'].astype(str)\ntrain_data['MaritalStatus']=train_data['MaritalStatus'].astype(str)\ntrain_data['PartTimeFullTime']=train_data['PartTimeFullTime'].astype(str)\ntrain_data['WeekdayOfAccident']=train_data['WeekdayOfAccident'].astype(str)\n","8b631910":"#encode the\nfrom sklearn.preprocessing import LabelEncoder\ncatData=LabelEncoder()\nVar=['ClaimNumber','Gender','MaritalStatus','MaritalStatus','PartTimeFullTime','WeekdayOfAccident',\n     ]\nfor  i in Var:\n    train_data[[i]]=catData.fit_transform(train_data[[i]])","fadf7df7":"train_data.head()","ce322781":"#Counter(train_data['ClaimDescription']).most_common()","d3069156":"corr_matrix=train_data.corr() # checking correlation with respect to target variable \ncorr_matrix['UltimateIncurredClaimCost'].sort_values(ascending=False)","61675058":"plt.figure(figsize=(15,10))\nsns.heatmap(train_data.corr(), annot=True, cmap=\"coolwarm\").set_title('Seaborn')\nplt.show()","eb8cfec2":"train_data[['HoursWorkedPerWeek']].boxplot() #try to use different method to find the distribution","f86b23de":"train_data[['WeeklyWages']].boxplot()","b24bd764":"import sklearn.preprocessing as pre\nfrom sklearn.preprocessing import MinMaxScaler","d5450383":"df=train_data.loc[:,['ClaimNumber','Age','MaritalStatus','DependentChildren','DependentsOther','WeeklyWages',\n                    'PartTimeFullTime','HoursWorkedPerWeek','DaysWorkedPerWeek',\n                    'InitialIncurredCalimsCost','YearOfAccident','MonthOfAccident'\n                   ]]","776a0c6b":"df.head()","d4f92d9b":"minmax_scaling=MinMaxScaler()\nscaled_data=pre.minmax_scale(df)","be0930de":"dataf=pd.DataFrame(scaled_data,columns=['ClaimNumber','Age','MaritalStatus','DependentChildren','DependentsOther','WeeklyWages',\n                    'PartTimeFullTime','HoursWorkedPerWeek','DaysWorkedPerWeek',\n                    'InitialIncurredCalimsCost','YearOfAccident','MonthOfAccident'\n                   ])","16d30c0e":"dataf.head()","e79ea783":"# Selecting parameters for training the model","428e397a":"X=dataf[['ClaimNumber','Age','MaritalStatus','DependentChildren','DependentsOther','WeeklyWages',\n                    'PartTimeFullTime','HoursWorkedPerWeek','DaysWorkedPerWeek',\n                    'InitialIncurredCalimsCost','YearOfAccident','MonthOfAccident'\n                   ]]","ffa18825":"y=train_data.UltimateIncurredClaimCost","efed29a1":"X.head()\nprint(X.shape,y.shape)","814f5a81":"import sklearn.model_selection as ms\nimport  sklearn.linear_model as lm\nfrom sklearn.metrics import r2_score,mean_squared_error\n","4fb5eb66":"# split training and testing dataset for better learning \nX_train,X_test,y_train,y_test=ms.train_test_split(X,y,random_state=1234,test_size=0.3)","ee96ce3c":"Lmodel=lm.LinearRegression() #linear regression algorith is used \nLmodel.fit(X_train,y_train)\nLmodel_predict=Lmodel.predict(X_test)\ny_predict = Lmodel.predict(X_test)\nrmse = np.sqrt(mean_squared_error(y_test, y_predict))\nprint(\"RMSE: %f\" % (rmse))\n","3113b28c":"from sklearn.ensemble import RandomForestRegressor\nmodel=RandomForestRegressor()\nmodel.fit(X_train,y_train)\nmodel.score(X_test,y_test)\nm_predict=model.predict(X_test)\nrmse = np.sqrt(mean_squared_error(y_test, m_predict))\nprint(\"RMSE: %f\" % (rmse))","118d52ff":"#spliting the data into test and train\nX_train,X_test,y_train,y_test=ms.train_test_split(X,y,random_state=1234,test_size=0.3)","a8c978b2":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,\n                                            random_state=20)","60ab5427":"import xgboost\nregressor=xgboost.XGBRegressor()","1551147a":"regressor=xgboost.XGBRegressor(base_score=0.25, booster='gbtree',gamma=0, learning_rate=0.01, max_delta_step=0,\n       max_depth=2, n_estimators=900)  # parameter tunning \n       ","7a9aafcd":"regressor.fit(X_train,y_train) # fitting the model\ny_pred=regressor.predict(X_test)","c7f3ebe0":"rmse = np.sqrt(mean_squared_error(y_test, y_pred)) # root mean square error_\nprint(\"RMSE: %f\" % (rmse))","e57f0343":"X.head()","c6897cf7":"#test data\ntest_data.head()","6f7e5348":"test_data.isnull().sum()","31087cf7":"test_data[\"MaritalStatus\"]=test_data['MaritalStatus'].fillna(test_data['MaritalStatus'].mode()[0])","e421cc4a":"test_data.info()","9a10c8ac":"test_data['DateTimeOfAccident']=pd.to_datetime(test_data['DateTimeOfAccident'])\ntest_data['DateReported']=pd.to_datetime(test_data[\"DateReported\"])","7d02e93f":"test_data['YearOfAccident']=test_data['DateTimeOfAccident'].dt.year\ntest_data['MonthOfAccident']=test_data['DateTimeOfAccident'].dt.month\ntest_data['WeekdayOfAccident']=test_data['DateTimeOfAccident'].dt.day_name()","72968a37":"test_data['Gender']=test_data['Gender'].astype(str)\ntest_data['MaritalStatus']=test_data['MaritalStatus'].astype(str)\ntest_data['PartTimeFullTime']=test_data['PartTimeFullTime'].astype(str)\ntest_data['WeekdayOfAccident']=test_data['WeekdayOfAccident'].astype(str)\n","221a6ad7":"catData=LabelEncoder()\nVar=['ClaimNumber','Gender','MaritalStatus','MaritalStatus','PartTimeFullTime','WeekdayOfAccident',\n     ]\nfor  i in Var:\n    test_data[[i]]=catData.fit_transform(test_data[[i]])","89507e99":"test_data.head()","f1dda664":"test_df=test_data.loc[:,['ClaimNumber','Age','MaritalStatus','DependentChildren','DependentsOther','WeeklyWages',\n                    'PartTimeFullTime','HoursWorkedPerWeek','DaysWorkedPerWeek',\n                    'InitialIncurredCalimsCost','YearOfAccident','MonthOfAccident'\n                   ]]","a6f2c2cc":"minmax_scaling=MinMaxScaler()\nscaled_testdata=pre.minmax_scale(test_df)","a27d2f8d":"testf=pd.DataFrame(scaled_testdata,columns=['ClaimNumber','Age','MaritalStatus','DependentChildren','DependentsOther','WeeklyWages',\n                    'PartTimeFullTime','HoursWorkedPerWeek','DaysWorkedPerWeek',\n                    'InitialIncurredCalimsCost','YearOfAccident','MonthOfAccident'\n                   ])","137943ed":"testf.head()","2a659b43":"\nXtest=testf[['ClaimNumber','Age','MaritalStatus','DependentChildren','DependentsOther','WeeklyWages',\n                    'PartTimeFullTime','HoursWorkedPerWeek','DaysWorkedPerWeek',\n                    'InitialIncurredCalimsCost','YearOfAccident','MonthOfAccident'\n                   ]]","25cf0493":"Lmodel=lm.LinearRegression() #linear regression algorith [Lmodel] \nLmodel.fit(X_train,y_train)\npredictions=Lmodel.predict(Xtest)# linear model \nr_predict=model.predict(Xtest)#randomforest model\n","fb556133":"regressor.fit(X_train,y_train) # fitting the model for regressor model\ny_pred=regressor.predict(Xtest)\ny_pred","af1f99cc":"sample1=pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv\")\nsample1['UltimateIncurredClaimCost']=y_pred","ce764972":"sample1=pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv\")\nsample1['UltimateIncurredClaimCost']=y_pred","4a8afecf":"Sample.head(40)","b089758d":"sample1.to_csv(\"Sample_Submission1.csv\",index=False)","036c3a67":"sample1","3cf2f528":"# RandomForestRegressor \n### RandomForest algorithm overcome overfitting and manages outliers so ,RandomForest is used","11ebd016":"# Using linear regression model and randomforest model ","870fc80b":"# 2.Data Transformation","465a0bb5":"<h3> the data is not normally distributed so median is used in inplace of null\n   <\/h3>","618e7957":"# feature Engineering","c9be7c38":"<p>Here number of dependent childern increases with respect to the ultimate claim cost.  <\/p>\n    ","aabd9da7":"## Linear regression is used for training this  Ml model because we are prediction continous dependent variable. \n","72d1b3ce":"<p>Here most of  male workers have full time job and there are very less women who are having full time job.This is because of female has to be stay at home after they get married as they do some parttime job from home<\/p>\n","aee11c67":"<p> Here the line graph shown there is good correlation between these two variable<p>","a8270ce2":"<p> In this survey, most of individuals were working 5 days per week which means large number of the participant have full time job. They are on holiday only on weekend<\/p>","983118df":"<p> the line graph shown days worked per week drasctically increase at 6 level and then started decrease<\/p>","a08fcec5":"<p> 91% of participant are having full time job as their life style is much better than those 9% individual who are doing part time job as they earn less and jon is not stable.<\/p>","203bd98a":"# feature selection","d011f3e8":"<p>Here given graph, we can say that those who are doing parttime job has ultimateincurredClaimCost is higher than those who are having full time job<\/p>","0d57c358":"# 3.EDA","550aaac3":"#  feature scaling","1b66670c":"#### There are 36176 rows and 15 columns in train dataset\n#### In testdata, there are 17824 dataset and 14 columns ","ca291580":"<p>There are more number of single individual participant followed by married people<\/p>","442825c5":"## Missing value imputation","ff2c4ab2":"# 1. Data preprocessing","904fa91b":"# Import neccessary packages ","74a567b7":"<p>by looking at the ploted boxplot, there are outlier, most of data are situated far away from fom the rest of the data<\/p>\n<h3> MinmaxScaler is used here to overcome the outlier as all the data are in certain range<\/h3>","fc98e0f9":"## create csv to upload submisiion on kaggle","47d802d5":"<p>","a0bf5893":"<p>Looking at the above graph, Male are major,in earlier man are suppose to go for work outside regardless of work type, and female are told stay at home and look after kids<\/p> <\/p>","fc8968b1":"<p> heatmap present correlation between the features in visually. When the color code goes up red color,shows strong correlation <\/p>","625797b0":"<p> There were around 2000 accident happened in each year from 1988 to 2005<\/p>","5c5e3929":"## univariate analysis\n","7dd3c9a7":"### correlation ","d4a9b8eb":"<p>in this scatter graph, shown there were outliers and those who works more number of hours in week has less 'UltimateIncurredClaimCost. There is one individual who works less hours per week but has to pay high UltimateIncurredClaimCost.<\/p>","ca8c0de9":"#  handling outlier ","a3aff128":"# XGBoost","ae829613":"# Data Loading","3c375466":"# bivariate anaysis","bd606310":"<p> In this graph, there are highly outliers and Weekly wages are in 0 to 2000\nThose who are earning greater than 2500 have less claim cost <\/p>","08411afb":"<p> Number of dependent of other one has highest cost<\/p>","5a45825f":"<p>by looking at the graph, we can say that accident happened in every month with numbers are high.In May number of accident happened more than rest of the monthes.<\/p>","f2d837cd":"<p> There are more number of Male individuals participant in this survy than the Female\n    \n<\/p>","21e3d1f9":"# test data","aee225ab":"# XGBoost is supervised regression model and is used here because this algorithm gives best result since it is efficient and effective implementation of the gradient boostig algorithm."}}