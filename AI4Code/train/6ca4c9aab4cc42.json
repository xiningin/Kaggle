{"cell_type":{"f9680dc9":"code","91c24d9c":"code","4db12806":"code","9edb72ec":"code","994778d9":"code","5f22f0e0":"code","e75a826a":"code","7711c98e":"code","5eadbd5a":"code","3f5a9121":"code","2fb965c2":"code","bd3068ac":"code","7436806e":"code","8dd8c3d5":"code","381fb8a3":"code","1cf4c7af":"code","ff32498b":"code","5de0fd28":"code","70b7f7f2":"code","21b64aeb":"code","5d0e1c77":"code","c0faef73":"code","fc6cf84e":"code","13e5d683":"code","2495e4ae":"code","0b5eecc3":"code","f938a121":"code","9b272e22":"code","0b713d96":"code","7326cef3":"code","7f9d9519":"code","2926e695":"code","8a5d36da":"code","ce12e28e":"code","5bc12180":"code","dbd7cc06":"code","5e33289e":"code","44418a68":"code","3983867e":"code","b8addf0d":"code","b645e34c":"code","f09c9fd4":"code","49c2b12b":"code","de0f316f":"code","c46ecbe2":"code","19e62da9":"code","6a05ae3c":"code","9007d3b6":"code","2ba263f2":"code","f51d2f66":"code","58174baa":"code","a34f6b5a":"code","dd741054":"code","89adf236":"code","9c527454":"code","6c7ca4ff":"markdown","581ec8be":"markdown","12707ea6":"markdown","24ac0441":"markdown","b9b5f098":"markdown","c30335cd":"markdown","1677ff36":"markdown","c66cae80":"markdown","561006db":"markdown","640c5e8f":"markdown","a22ebead":"markdown","68f2d763":"markdown"},"source":{"f9680dc9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","91c24d9c":"#Importing libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4db12806":"train=pd.read_csv(\"..\/input\/home-data-for-ml-course\/train.csv\")","9edb72ec":"train.head()","994778d9":"test = pd.read_csv(\"..\/input\/home-data-for-ml-course\/test.csv\")","5f22f0e0":"test.head()","e75a826a":"print(train.shape)\nprint(test.shape)","7711c98e":"train.isnull().sum().sum()","5eadbd5a":"train.isnull().sum()[0:40]","3f5a9121":"train.isnull().sum()[40:81]","2fb965c2":"# Checking correlation between columns \ntrain_corr = train.corr(method=\"spearman\")\nplt.figure(figsize=(35,20))\nsns.heatmap(train_corr, vmin=-1, vmax=1, cmap=\"viridis\", annot=True, linewidth=0.1)","bd3068ac":"# Selecting features with correlation above 50% with target variable\nmain_features = ['OverallQual','YearBuilt','YearRemodAdd','TotalBsmtSF','1stFlrSF','GrLivArea','FullBath','TotRmsAbvGrd','Fireplaces','GarageCars','GarageArea']","7436806e":"train_new = train[main_features]","8dd8c3d5":"train_new.isnull().sum().sum()","381fb8a3":"test_new = test[main_features]","1cf4c7af":"test_new.isnull().sum()","ff32498b":"test_new[\"TotalBsmtSF\"].fillna(value=test_new[\"TotalBsmtSF\"].mean(), axis=0, inplace=True )\ntest_new[\"GarageCars\"].fillna(value=test_new[\"GarageCars\"].mean(), axis=0, inplace = True)\ntest_new[\"GarageArea\"].fillna(value=test_new[\"GarageArea\"].mean(), axis=0, inplace = True)","5de0fd28":"test_new.isnull().sum().sum()","70b7f7f2":"# Scatter plot b\/w OverallQual and SalePrice\nplt.figure(figsize=(12,6))\nplt.scatter(train[\"OverallQual\"] ,train[\"SalePrice\"])\nplt.xlabel(\"quality\")\nplt.ylabel(\"SalePrice\")\nplt.legend()\nplt.show() \n","21b64aeb":"# Scatter plot b\/w YearBuilt and SalePrice\nplt.figure(figsize=(12,6))\nplt.scatter(train[\"YearBuilt\"] ,train[\"SalePrice\"])\nplt.xlabel(\"year\")\nplt.ylabel(\"SalePrice\")\nplt.show() ","5d0e1c77":"# Scatter plot b\/w YearRemodAdd and SalePrice\nplt.figure(figsize=(12,6))\nplt.scatter(train[\"YearRemodAdd\"] ,train[\"SalePrice\"])\nplt.xlabel(\"YearRemodAdd\")\nplt.ylabel(\"SalePrice\")\nplt.show() ","c0faef73":"# Scatter plot b\/w TotalBsmtSF and SalePrice\nplt.figure(figsize=(12,6))\nplt.scatter(train[\"TotalBsmtSF\"] ,train[\"SalePrice\"])\nplt.xlabel(\"TotalBsmtSF\")\nplt.ylabel(\"SalePrice\")\nplt.show() ","fc6cf84e":"# Scatter plot b\/w 1stFlrSF and SalePrice\nplt.figure(figsize=(12,6))\nplt.scatter(train[\"1stFlrSF\"] ,train[\"SalePrice\"])\nplt.xlabel(\"1stFlrSF\")\nplt.ylabel(\"SalePrice\")\nplt.show() ","13e5d683":"# Scatter plot b\/w GrLivArea and SalePrice\nplt.figure(figsize=(12,6))\nplt.scatter(train[\"GrLivArea\"] ,train[\"SalePrice\"])\nplt.xlabel(\"GrLivArea\")\nplt.ylabel(\"SalePrice\")\nplt.show() ","2495e4ae":"# Scatter plot b\/w FullBath and SalePrice\nplt.figure(figsize=(12,6))\nplt.scatter(train[\"FullBath\"] ,train[\"SalePrice\"])\nplt.xlabel(\"FullBath\")\nplt.ylabel(\"SalePrice\")\nplt.show() ","0b5eecc3":"# Scatter plot b\/w TotRmsAbvGrd and SalePrice\nplt.figure(figsize=(12,6))\nplt.scatter(train[\"TotRmsAbvGrd\"] ,train[\"SalePrice\"])\nplt.xlabel(\"TotRmsAbvGrd\")\nplt.ylabel(\"SalePrice\")\nplt.show() ","f938a121":"# Scatter plot b\/w Fireplaces and SalePrice\nplt.figure(figsize=(12,6))\nplt.scatter(train[\"Fireplaces\"] ,train[\"SalePrice\"])\nplt.xlabel(\"Fireplaces\")\nplt.ylabel(\"SalePrice\")\nplt.show() ","9b272e22":"# Scatter plot b\/w GarageCars and SalePrice\nplt.figure(figsize=(12,6))\nplt.scatter(train[\"GarageCars\"] ,train[\"SalePrice\"])\nplt.xlabel(\"GarageCars\")\nplt.ylabel(\"SalePrice\")\nplt.show() ","0b713d96":"# Scatter plot b\/w GarageArea and SalePrice\nplt.figure(figsize=(12,6))\nplt.scatter(train[\"GarageArea\"] ,train[\"SalePrice\"])\nplt.xlabel(\"GarageArea\")\nplt.ylabel(\"SalePrice\")\nplt.show() ","7326cef3":"X=train_new\ny=train['SalePrice']","7f9d9519":"from sklearn.model_selection import train_test_split","2926e695":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)","8a5d36da":"print(len(X_train),len(X_test),len(y_train),len(y_test))","ce12e28e":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()","5bc12180":"model.fit(X_train,y_train)","dbd7cc06":"predictions = model.predict(X_test)","5e33289e":"model.score(X_test,y_test)","44418a68":"from sklearn.ensemble import RandomForestRegressor\nmodel1 = RandomForestRegressor()","3983867e":"model1.fit(X_train,y_train)","b8addf0d":"prediction1 = model1.predict(X_test)","b645e34c":"model1.score(X_test,y_test)","f09c9fd4":"from sklearn.tree import DecisionTreeRegressor\nmodel2 = DecisionTreeRegressor()","49c2b12b":"model2.fit(X_train,y_train)","de0f316f":"prediction2 = model2.predict(X_test)","c46ecbe2":"model2.score(X_test,y_test)","19e62da9":"from sklearn.neighbors import KNeighborsRegressor\nmodel3 = KNeighborsRegressor()","6a05ae3c":"model3.fit(X_train,y_train)","9007d3b6":"prediction3 = model3.predict(X_test)","2ba263f2":"model3.score(X_test, y_test)","f51d2f66":"final_model = RandomForestRegressor()","58174baa":"final_model.fit(X,y)","a34f6b5a":"final_pred = final_model.predict(test_new)","dd741054":"submission = pd.DataFrame({'Id':test.Id, 'SalePrice': final_pred})","89adf236":"submission.to_csv('submission.csv', index=False)","9c527454":"submission","6c7ca4ff":"# **DATA CLEANING**","581ec8be":"# **FINAL MODEL**","12707ea6":"**Scatter Plots**","24ac0441":"Selecting main features using heat map :","b9b5f098":"**Decision Tree Regressor**","c30335cd":"Observation: RandomForestRegressor model is selected as it has highest accuracy score.","1677ff36":"# **Correlation between Independent variables and Target variable (SalePrice)**","c66cae80":"**Linear Regression**","561006db":"**Random Forest Regressor**","640c5e8f":"**K-Neighbors Regressor**","a22ebead":"# **DATA VISUALISATION**","68f2d763":"# **MODEL SELECTION**"}}