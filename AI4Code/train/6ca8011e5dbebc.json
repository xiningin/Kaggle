{"cell_type":{"6ba79189":"code","4f726bed":"code","5fe95daf":"code","c430320e":"code","e2a51aea":"code","a6728a48":"code","28e8c1a5":"code","8df96849":"code","3461dd44":"code","55561df4":"code","0db79e4f":"code","ddbad4e6":"code","186516f4":"code","3798f3f1":"code","34317749":"code","787e8807":"code","474439b2":"markdown","232ab6e7":"markdown","1aa0c350":"markdown","380eb827":"markdown","2b26a354":"markdown","0aa7c523":"markdown"},"source":{"6ba79189":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f726bed":"train =pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv')\ntest=pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv')","5fe95daf":"train.head()","c430320e":"test.head()","e2a51aea":"X_train = train.drop(\"label\",axis=1)\nY_train=train[\"label\"]\n\n\nX_test =test.drop(\"label\",axis=1)\nY_test = test[\"label\"]","a6728a48":"X_train= np.array(X_train)\nX_test= np.array(X_test)\n\n\nprint(\"X_train shape: \",X_train.shape)\nprint(\"X_test shape: \",X_test.shape)","28e8c1a5":"X_test=X_test\/255.0\nX_train=X_train\/255.0","8df96849":"X_train= X_train.reshape(-1, 28,28,1)\nX_test= X_test.reshape(-1, 28,28,1)","3461dd44":"X_train= X_train.reshape(-1, 28,28,1)\nX_test= X_test.reshape(-1, 28,28,1)","55561df4":"from keras.utils import to_categorical\nY_train=to_categorical(Y_train,num_classes=len(set(Y_train)))\nY_test =to_categorical(Y_test,num_classes=len(set(Y_test)))","0db79e4f":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\n\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.20))\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(10, activation = \"softmax\"))\nmodel.compile(optimizer = (\"Adam\") , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","ddbad4e6":"from sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.2, random_state=2)","186516f4":"print(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","3798f3f1":"history= model.fit(X_train, Y_train, batch_size=50, epochs=10, verbose=1, validation_data=(X_val, Y_val))","34317749":"score = model.evaluate(X_test, Y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","787e8807":"import matplotlib.pyplot as plt\naccuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(accuracy))\nplt.plot(epochs, accuracy, 'g', label='Training accuracy')\nplt.plot(epochs, val_accuracy, 'r', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'g', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","474439b2":"# Normalization","232ab6e7":"# Model Create","1aa0c350":"# Splitting Test and Train Data Into X and Y","380eb827":"#  Reshape","2b26a354":"# Converting Our Data to Numpy Array","0aa7c523":"# Catogoricalizing The Y Variables\u00b6"}}