{"cell_type":{"93d07cc2":"code","32371943":"code","77336798":"code","92c01ed7":"code","3a2f5fc7":"code","abfcb477":"code","eb1949f3":"code","0d15ab01":"code","73ff8fa4":"code","c54620d1":"code","c3814bb3":"code","3326b1f8":"markdown"},"source":{"93d07cc2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","32371943":"import os\nimport tensorflow as tf \nimport numpy as np \nimport matplotlib.pyplot as plt ","77336798":"train_dir='..\/input\/fruits\/fruits-360_dataset\/fruits-360\/Training'\nfine_label_list=os.listdir(train_dir)","92c01ed7":"img_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n                            rescale=1.\/255,\n                            channel_shift_range=0.2,\n                            horizontal_flip=True,\n                            vertical_flip=True,\n                            validation_split=0.2)","3a2f5fc7":"train_generator = img_generator.flow_from_directory(\n    directory=train_dir,\n    target_size=(224, 224),\n    batch_size=16,\n    shuffle=True,\n    subset=\"training\")\n\nvalid_generator = img_generator.flow_from_directory(\n    directory=train_dir,\n    target_size=(224, 224),\n    batch_size=16,\n    shuffle=True,\n    subset=\"validation\")","abfcb477":"imgs, labels = next(iter(train_generator))\nfor img, label in zip(imgs, labels):\n    plt.imshow(img)\n    label = np.argmax(label)\n    plt.title(fine_label_list[label])\n    plt.show()","eb1949f3":"HEIGHT = 224\nWIDTH = 224\n\nbase_model = tf.keras.applications.Xception(\n                    weights='imagenet', \n                    include_top=False, \n                    input_shape=(HEIGHT, WIDTH, 3))","0d15ab01":"base_model.trainable = False\nmodel = tf.keras.Sequential([\n    base_model,\n    tf.keras.layers.MaxPooling2D(),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(len(fine_label_list), activation=\"softmax\")\n])","73ff8fa4":"initial_learning_rate = 0.1\nlr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n    initial_learning_rate,\n    decay_steps=100000,\n    decay_rate=0.96,\n    staircase=True)\n\nmodel.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=lr_schedule),\n              loss = tf.keras.losses.CategoricalCrossentropy(),\n              metrics = [tf.keras.metrics.CategoricalAccuracy()])\n","c54620d1":"history = model.fit(train_generator, \n          validation_data=valid_generator, \n          steps_per_epoch=256,\n          epochs=25)","c3814bb3":"# Visualize history\n# Plot history: Accuracy\nplt.plot(history.history['val_categorical_accuracy'])#val_accuracy\nplt.title('Validation accuracy history')\nplt.ylabel('Accuracy value (%)')\nplt.xlabel('No. epoch')\nplt.show()\n\n# Plot history: Loss\nplt.plot(history.history['val_loss'])\nplt.title('Validation loss history')\nplt.ylabel('Loss value')\nplt.xlabel('No. epoch')\nplt.show()\n\n","3326b1f8":"Credit to stpeteishii for some of the code.\nSome of the code was copied from: https:\/\/www.kaggle.com\/stpeteishii\/transfer-learning-for-fruites-classification.\nAnd changed by me inorder to try and improve it."}}