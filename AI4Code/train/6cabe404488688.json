{"cell_type":{"e1f21a08":"code","344a2cfc":"code","d85f715b":"code","7e5e6dbf":"code","345614eb":"code","0994c91b":"code","979c972b":"code","164e2f62":"code","aafeb860":"code","3c2a64ea":"code","7e365c11":"code","414a6531":"code","bd2d97fd":"code","0e7ab656":"code","988b9c16":"code","4436328d":"code","4b8adbb2":"code","99907d75":"code","a6072bfc":"code","fc12691d":"code","e8ce3805":"code","79b2024b":"code","cae50713":"code","0720e120":"code","c4d3c795":"code","0c04be4b":"code","101024e7":"code","f7289a4f":"code","80b7898b":"code","5b3c4561":"code","e42a65f8":"code","5542831c":"code","39748337":"code","070df211":"code","75c7b8d9":"markdown","3ad94286":"markdown","3f590d9a":"markdown","0d749af7":"markdown","f29000e7":"markdown","c1ecb0fc":"markdown","d4bf5df3":"markdown","75ab30c2":"markdown","635615f2":"markdown","79b3f12f":"markdown","38ee3a68":"markdown","49631c26":"markdown","afe0554c":"markdown","03a0021f":"markdown","bc252d50":"markdown","5e57f4e2":"markdown","a604fb8f":"markdown"},"source":{"e1f21a08":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot, plot_mpl\nimport plotly.offline as py\nimport folium\nimport Bio.SeqIO\ninit_notebook_mode(connected=True)\nplt.rcParams.update({'font.size': 14})","344a2cfc":"confirmed_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndeaths_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\nrecoveries_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')","d85f715b":"# Drop date columns if they are mostly NaN\nna_columns = (confirmed_df.isna().sum() \/ confirmed_df.shape[0]) > 0.99\nna_columns = na_columns[na_columns]\n\nconfirmed_df = confirmed_df.drop(na_columns.index, axis=1)\ndeaths_df = deaths_df.drop(na_columns.index, axis=1)\nrecoveries_df = recoveries_df.drop(na_columns.index, axis=1)","7e5e6dbf":"## Tidy up the data\nconfirmed_df = confirmed_df.melt(id_vars=['Country\/Region', 'Province\/State', 'Lat', 'Long'], var_name='date', value_name='confirmed')\ndeaths_df = deaths_df.melt(id_vars=['Country\/Region', 'Province\/State', 'Lat', 'Long'], var_name='date', value_name='deaths')\nrecoveries_df = recoveries_df.melt(id_vars=['Country\/Region', 'Province\/State', 'Lat', 'Long'], var_name='date', value_name='recoveries')","345614eb":"confirmed_df['date'] = pd.to_datetime(confirmed_df['date'])\ndeaths_df['date'] = pd.to_datetime(deaths_df['date'])\nrecoveries_df['date'] = pd.to_datetime(recoveries_df['date'])","0994c91b":"full_df = confirmed_df.merge(recoveries_df).merge(deaths_df)\nfull_df = full_df.rename(columns={'Country\/Region': 'Country', 'date': 'Date', 'confirmed': \"Confirmed\", \"recoveries\": \"Recoveries\", \"deaths\": \"Deaths\"})\n# Check null values\nfull_df.isnull().sum()","979c972b":"world_df = full_df.groupby(['Date']).agg({'Confirmed': ['sum'], 'Recoveries': ['sum'], 'Deaths': ['sum']}).reset_index()\nworld_df.columns = world_df.columns.get_level_values(0)\n\ndef add_rates(df):\n    df['Confirmed Change'] = df['Confirmed'].diff().shift(-1)\n \n    df['Mortality Rate'] = df['Deaths'] \/ df['Confirmed']\n    df['Recovery Rate'] = df['Recoveries'] \/ df['Confirmed']\n    df['Growth Rate'] = df['Confirmed Change'] \/ df['Confirmed']\n    df['Growth Rate Change'] = df['Growth Rate'].diff().shift(-1)\n    df['Growth Rate Accel'] = df['Growth Rate Change'] \/ df['Growth Rate']\n    return df\n\nworld_df = add_rates(world_df)","164e2f62":"def plot_aggregate_metrics(df, fig=None):\n    if fig is None:\n        fig = go.Figure()\n    fig.update_layout(template='plotly_dark')\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Confirmed'],\n                             mode='lines+markers',\n                             name='Confirmed',\n                             line=dict(color='Yellow', width=2)\n                            ))\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Deaths'],\n                             mode='lines+markers',\n                             name='Deaths',\n                             line=dict(color='Red', width=2)\n                            ))\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Recoveries'],\n                             mode='lines+markers',\n                             name='Recoveries',\n                             line=dict(color='Green', width=2)\n                            ))\n    return fig","aafeb860":"plot_aggregate_metrics(world_df).show()","3c2a64ea":"def plot_diff_metrics(df, fig=None):\n    if fig is None:\n        fig = go.Figure()\n\n    fig.update_layout(template='plotly_dark')\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Mortality Rate'],\n                             mode='lines+markers',\n                             name='Mortality rate',\n                             line=dict(color='red', width=2)))\n\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Recovery Rate'],\n                             mode='lines+markers',\n                             name='Recovery rate',\n                             line=dict(color='Green', width=2)))\n\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Growth Rate'],\n                             mode='lines+markers',\n                             name='Growth rate confirmed',\n                             line=dict(color='Yellow', width=2)))\n    fig.update_layout(yaxis=dict(tickformat=\".2%\"))\n    \n    return fig","7e365c11":"plot_diff_metrics(world_df).show()","414a6531":"fig = go.Figure()\nfig.update_layout(template='plotly_dark')\n\ntmp_df = world_df.copy()\ntmp_df = tmp_df[tmp_df['Growth Rate Accel'] < 10]\n\nfig.add_trace(go.Scatter(x=tmp_df['Date'], \n                         y=tmp_df['Growth Rate Accel'],\n                         mode='lines+markers',\n                         name='Growth Acceleration',\n                         line=dict(color='Green', width=3)))\nfig.update_layout(yaxis=dict(tickformat=\".2%\"))\n\nfig.show()","bd2d97fd":"confirmed_by_country_df = full_df.groupby(['Date', 'Country']).sum().reset_index()","0e7ab656":"fig = px.line(confirmed_by_country_df, x='Date', y='Confirmed', color='Country', line_group=\"Country\", hover_name=\"Country\")\nfig.update_layout(template='plotly_dark')\nfig.show()","988b9c16":"# Log scale to allow for view\n#  (1) of countries other than China, and\n#  (2) identifying linear sections, which indicate exponential growth\nfig = px.line(confirmed_by_country_df, x='Date', y='Confirmed', color='Country', line_group=\"Country\", hover_name=\"Country\")\nfig.update_layout(\n    template='plotly_dark',\n    yaxis_type=\"log\"\n)\nfig.show()","4436328d":"confirmed_by_country_df.groupby('Country').max().sort_values(by='Confirmed', ascending=False)[:60]","4b8adbb2":"k_layout_kwargs = {\n    'font': dict(size=12,),\n    'legend': dict(x=0, y=-0.7),\n}","99907d75":"bg_df = confirmed_by_country_df[confirmed_by_country_df['Country'] == 'Bulgaria'].copy()\nbg_df = add_rates(bg_df)","a6072bfc":"tmp_df = bg_df[bg_df['Confirmed'] > 5]\n\nplot_aggregate_metrics(tmp_df).show()","fc12691d":"plot_diff_metrics(tmp_df).show()","e8ce3805":"from sklearn.linear_model import LinearRegression\n\nbg_growth_rates = {}\n\nn_days_to_fit = 7\nconfirmed_bg_df = confirmed_by_country_df[(confirmed_by_country_df['Country'] == 'Bulgaria') & (confirmed_by_country_df['Date'] >= (np.datetime64('today') - np.timedelta64(n_days_to_fit,'D')))]\n\nx = (confirmed_bg_df['Date'] - confirmed_bg_df['Date'].min()).dt.days.to_numpy().reshape(-1, 1)\ny = np.log(confirmed_bg_df['Confirmed'])\nreg = LinearRegression().fit(x, y)\nprint(f\"Model fit score: {reg.score(x, y):.2f}\")\nprint(f\"Growth rate: {reg.coef_[0]:.3f}\")\nbg_growth_rates[n_days_to_fit] = reg.coef_[0]\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=x[:,0],\n        y=np.exp(y),\n        name='Bulgaria - Current fit'\n    )\n)\n\nxx = np.linspace(0, len(x[:,0]) + 14, 100)  # Forecast 14 days out\nyy = reg.predict(xx.reshape(-1,1))\n\nfig.add_trace(\n    go.Scatter(\n        x=xx,\n        y=np.exp(yy),\n        name='Bulgaria - Exponential fit',\n        mode='lines',\n    )\n)\n\nfig.update_layout(\n    title=f\"Exponential Model of Bulgaria. Confirmed Cases<br>(fit to last {n_days_to_fit} days) with 14-Day Extrapolation\",\n    xaxis_title=f\"Days since {confirmed_bg_df['Date'].min()}\",\n    yaxis_title=\"Number of Confirmed Cases\",\n    yaxis_type=\"log\",\n    template=\"plotly_dark\",\n    **k_layout_kwargs,\n)\n\nfig.show()","79b2024b":"n_days_to_fit = 4\nconfirmed_bg_df = confirmed_by_country_df[(confirmed_by_country_df['Country'] == 'Bulgaria') & (confirmed_by_country_df['Date'] >= (np.datetime64('today') - np.timedelta64(n_days_to_fit,'D')))]\n\nx = (confirmed_bg_df['Date'] - confirmed_bg_df['Date'].min()).dt.days.to_numpy().reshape(-1, 1)\ny = np.log(confirmed_bg_df['Confirmed'])\n\nreg = LinearRegression().fit(x, y)\nprint(f\"Model fit score: {reg.score(x, y):.2f}\")\nprint(f\"Growth rate: {reg.coef_[0]:.3f}\")\nbg_growth_rates[n_days_to_fit] = reg.coef_[0]\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=confirmed_by_country_df[confirmed_by_country_df['Country'] == 'Bulgaria']['Date'],\n        y=confirmed_by_country_df[confirmed_by_country_df['Country'] == 'Bulgaria']['Confirmed'],\n        name='Bulgaria - Current fit',\n        line=dict(width=4)\n    )\n)\n\npredict_days_out = 7*2\n\nexponential_fit_date_range = pd.date_range(confirmed_bg_df['Date'].min(), confirmed_bg_df['Date'].max() + np.timedelta64(predict_days_out,'D'))\n\nxx = np.linspace(0, len(x[:,0]) + predict_days_out, exponential_fit_date_range.shape[0])  # Forecast 14 days out\nyy = reg.predict(xx.reshape(-1,1))\n\nfig.add_trace(\n    go.Scatter(\n        x=exponential_fit_date_range,\n        y=np.exp(yy),\n        name='Bulgaria - Exponential fit',\n        mode='lines'\n    )\n)\n\nfig.update_layout(\n    title=f\"Exponential Model of Bulgaria Confirmed Cases<br>(fit to last {n_days_to_fit} days) with {predict_days_out}-Day Extrapolation\",\n    xaxis_title=f\"Date\",\n    yaxis_title=\"Number of Confirmed Cases\",\n    yaxis_type=\"log\",\n    template=\"plotly_dark\",\n    **k_layout_kwargs,\n)\n\nfig.show()","cae50713":"proxy_country = 'Italy'\n\nconfirmed_italy_df = confirmed_by_country_df[(confirmed_by_country_df['Country'] == proxy_country) & (confirmed_by_country_df['Confirmed'] >= 100)]\n\nx = (confirmed_italy_df['Date'] - confirmed_italy_df['Date'].min()).dt.days.to_numpy().reshape(-1, 1)\ny = np.log(confirmed_italy_df['Confirmed'])\nreg = LinearRegression().fit(x, y)\nprint(f\"Model fit score: {reg.score(x, y):.2f}\")\nprint(f\"Growth rate: {reg.coef_[0]:.3f}\")\nitaly_growth_rate = reg.coef_[0]\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=x[:,0],\n        y=np.exp(y),\n        name=proxy_country\n    )\n)\n\nxx = np.linspace(0, len(x[:,0]) + 14, 100)  # Forecast 14 days out\nyy = reg.predict(xx.reshape(-1,1))\n\nfig.add_trace(\n    go.Scatter(\n        x=xx,\n        y=np.exp(yy),\n        name=f'{proxy_country} - Exponential fit'\n    )\n)\n\nfig.update_layout(\n    title=f\"Exponential Model of {proxy_country} Confirmed Cases<br>with 14-Day Extrapolation\",\n    xaxis_title=f\"Days since {confirmed_italy_df['Date'].min()}\",\n    yaxis_title=\"Number of Confirmed Cases\",\n    yaxis_type=\"log\",\n    template=\"plotly_dark\",\n    **k_layout_kwargs,\n)\n\nfig.show()","0720e120":"def linear_model(x, a, b):\n    return b * x + a\n\n\ndef linear_model_fixed_slope(slope):\n    def func(x, intercept):\n        return linear_model(x, a=intercept, b=slope)\n    \n    return func\n\ntest_model = linear_model_fixed_slope(2)\nx = np.array([1, 2, 3])\ntest_model(x=x, intercept=2)","c4d3c795":"from scipy.optimize import curve_fit\n\n\ndef get_model(model, popt):\n    def fitted_model(x):\n        return model(x, *popt)\n    return fitted_model\n\n\nx = (confirmed_bg_df['Date'] - confirmed_bg_df['Date'].min()).dt.days.to_numpy()\ny = np.log(confirmed_bg_df['Confirmed'].to_numpy())\n\n# Pull the slope from the Italy model and use for the U.S., allowing only the intercept to vary\nmodel = linear_model_fixed_slope(italy_growth_rate)\npopt, pcov = curve_fit(model, x, y)\n\nfitted_model_italy_rate = get_model(model, popt)\n\n# Now do the same using the slope from the Bulgaria model\nbg_growth_rate_n_days_to_fit = 4\nprint(bg_growth_rate_n_days_to_fit)\n\nmodel = linear_model_fixed_slope(bg_growth_rates[bg_growth_rate_n_days_to_fit])\npopt, pcov = curve_fit(model, x, y)\n\nfitted_model_bg_rate = get_model(model, popt)\n\n# Plot results\nfor layout_kwargs in [{}, {\"yaxis_type\": \"log\"}]:\n    fig = go.Figure()\n\n    fig.add_trace(\n        go.Scatter(\n            x=confirmed_by_country_df[confirmed_by_country_df['Country'] == 'Bulgaria']['Date'],\n            y=confirmed_by_country_df[confirmed_by_country_df['Country'] == 'Bulgaria']['Confirmed'],\n            name='Bulgaria - Current fit',\n            line=dict(width=4)\n        )\n    )\n\n    exponential_fit_date_range = pd.date_range(confirmed_bg_df['Date'].min(), confirmed_bg_df['Date'].max() + np.timedelta64(14,'D'))\n\n    xx = np.linspace(0, len(x) + 14, exponential_fit_date_range.shape[0])  # Forecast 14 days out\n    yy = fitted_model_italy_rate(xx)\n\n    fig.add_trace(\n        go.Scatter(\n            x=exponential_fit_date_range,\n            y=np.exp(yy),\n            name=f'Bulgaria - Exponential fit based on {proxy_country} growth rate ({italy_growth_rate:.0%})',\n            mode='lines'\n        )\n    )\n\n    #########\n\n    yy = fitted_model_bg_rate(xx)\n\n    fig.add_trace(\n        go.Scatter(\n            x=exponential_fit_date_range,\n            y=np.exp(yy),\n            name=f'Bulgaria - Exponential fit based on US growth rate ({bg_growth_rates[bg_growth_rate_n_days_to_fit]:.0%}) (fitted to {bg_growth_rate_n_days_to_fit} days)',\n            mode='lines'\n        )\n    )\n\n    fig.update_layout(\n        title=\"Exponential Model of Bulgaria Confirmed Cases<br>with 14-Day Extrapolation\",\n        xaxis_title=\"Date\",\n        yaxis_title=\"Number of Confirmed Cases\",\n        template=\"plotly_dark\",\n        **k_layout_kwargs,\n        **layout_kwargs\n    )\n\n    fig.show()","0c04be4b":"from fbprophet.plot import plot_plotly\nfrom fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot","101024e7":"full_pop = 330e6\n\n#floor_model = lambda x: max(x - 1, 0)  # Use the value itself because the function only increases\nfloor_model = lambda x: round(0.65 * x)\ncap_model = lambda x: round(min(full_pop, 1.5 * x + 10000))  # 50% above plus one to ensure floor > cap at 0\n\n# Modeling Bulgaria confirmed cases \nconfirmed_training_df = confirmed_by_country_df[(confirmed_by_country_df['Country'] == 'Bulgaria') & (confirmed_by_country_df['Confirmed'] > 0)]\nconfirmed_training_df = confirmed_training_df.rename(columns={'Date': 'ds', 'Confirmed': 'y'}).reset_index(drop=True)\n\nconfirmed_training_df['floor'] = confirmed_training_df.y.apply(floor_model)\nconfirmed_training_df['cap'] = confirmed_training_df.y.apply(cap_model)","f7289a4f":"confirmed_training_df.y = confirmed_training_df.y.apply(np.log10)\nconfirmed_training_df.floor = confirmed_training_df.floor.apply(np.log10)\nconfirmed_training_df.cap = confirmed_training_df.cap.apply(np.log10)","80b7898b":"# Total confirmed model \nm = Prophet(\n    growth='linear',\n    #interval_width=0.90,\n    changepoint_prior_scale=0.05,\n    changepoint_range=0.9,\n    yearly_seasonality=False,\n    weekly_seasonality=False,\n    daily_seasonality=False,\n    #n_changepoints=2\n)\nm.fit(confirmed_training_df)\nfuture = m.make_future_dataframe(periods=14)\nfuture['floor'] = confirmed_training_df.floor\nfuture['cap'] = confirmed_training_df.cap\nconfirmed_forecast = m.predict(future)","5b3c4561":"for kwargs in [{}, {\"yaxis_type\": \"log\"}]:\n    fig = plot_plotly(m, confirmed_forecast, plot_cap=False, changepoints=True)\n    annotations = []\n    annotations.append(dict(\n        xref='paper',\n        yref='paper',\n        x=0.0,\n        y=1.15,\n        xanchor='left',\n        yanchor='bottom',\n        text='Predictions for log10 Confirmed cases Bulgaria',\n        font=dict(\n            family='Arial',\n            size=30,\n            color='rgb(37,37,37)'),\n        showarrow=False))\n    fig.update_layout(\n        annotations=annotations,\n        **kwargs\n    )\n    fig.show()","e42a65f8":"for kwargs in [{}, {\"yaxis_type\": \"log\"}]:\n    fig = plot_plotly(m, confirmed_forecast, plot_cap=False, changepoints=True)\n    annotations = []\n    annotations.append(dict(\n        xref='paper',\n        yref='paper',\n        x=0.0,\n        y=1.15,\n        xanchor='left',\n        yanchor='bottom',\n        text='Predictions for Confirmed cases Bulgaria',\n        font=dict(\n            family='Arial',\n            size=30,\n            color='rgb(37,37,37)'),\n        showarrow=False))\n    fig.update_layout(\n        annotations=annotations,\n        **kwargs\n    )\n    for trace in fig.data:\n        trace.y = np.power(trace.y, 10)\n    fig.show()","5542831c":"data= pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\n\ndata['Date'] = data['ObservationDate'].apply(pd.to_datetime)\ndata.drop(['SNo'],axis=1,inplace=True)\n\n#Set Date column as the index column.\n#data.set_index('Last Update', inplace=True)\n\n# Countries affected\ndata.rename(columns={'Country\/Region':'Country'},inplace = True)\ncountries = data['Country'].unique().tolist()\n\n# Combining China and Mainland China cases\ndata['Country'].replace({'Mainland China':'China'},inplace=True)\ncountries = data['Country'].unique().tolist()\n\nd = data['Date'][-1:].astype('str')\nyear = int(d.values[0].split('-')[0])\nmonth = int(d.values[0].split('-')[1])\nday = int(d.values[0].split('-')[2].split()[0])\n\nfrom datetime import date\ndata_latest = data[data['Date'] >= pd.Timestamp(date(year,month,day))]\n\n# Creating a dataframe with total no of confirmed cases for every country\nNumber_of_countries = len(data_latest['Country'].value_counts())\n\ncases = pd.DataFrame(data_latest.groupby('Country')['Confirmed'].sum())\ncases['Country'] = cases.index\ncases.index=np.arange(1,Number_of_countries+1)\n\nglobal_cases = cases[['Country','Confirmed']]\n#global_cases.sort_values(by=['Confirmed'],ascending=False)\n\n# Importing the world_coordinates dataset\nworld_coordinates = pd.read_csv('..\/input\/world-coordinates\/world_coordinates.csv')\n\n# Merging the coordinates dataframe with original dataframe\nworld_data = pd.merge(world_coordinates,global_cases,on='Country')\nworld_data.head()\n\n# create map and display it\nworld_map = folium.Map(location=[10, -20], zoom_start=2.3,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(world_data['latitude'], world_data['longitude'], world_data['Confirmed'], world_data['Country']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(world_map)\nworld_map","39748337":"for sequence in Bio.SeqIO.parse('\/kaggle\/input\/coronavirus-genome-sequence\/MN908947.fna', \"fasta\"):\n    print('Id: ' + sequence.id + '\\nSize: ' + str(len(sequence))+' nucleotides')","070df211":"sequence = '..\/input\/coronavirus-genome-sequence\/MN908947.txt'\nwith open(sequence) as text: \n    print (text.read(100000))","75c7b8d9":"Import the data (make sure you update this on a daily basis)","3ad94286":"The Italy growth rate is at 25%. The U.S. growth rate is at 38%","3f590d9a":"###### Top 60 countries by confirmed cases","0d749af7":"# Modeling Bulgaria","f29000e7":"### Applying the proxy model to Bulgaria","c1ecb0fc":"#### *TODO*\n\n* Project peak of active cases\n* Apply [SIR model](https:\/\/scipython.com\/book\/chapter-8-scipy\/additional-examples\/the-sir-epidemic-model\/)","d4bf5df3":"# Bulgaria Model with Prophet\n\nWe allow for a linear model that detects changepoints at Prophet's default significance. In effect, this is a spline of linear models. This is nice because we expect the growth rate to change at some points during the spread.","75ab30c2":"The y-axis above is the log of the number of cases. So let's rescale that.","635615f2":"## Exploring Coronavirus (SARS-CoV-2) Genome\n* Using data from https:\/\/www.nature.com\/articles\/s41586-020-2008-3","79b3f12f":"# Worldwide Rates","38ee3a68":"# World Map Visualization","49631c26":"# Confirmed Cases by Country","afe0554c":"***You can select individual traces above by double-clicking on the legend on the right***","03a0021f":"This notebook tracks the spread of the novel coronavirus, also known as the 2019-nCoV in Bulgaria. It is a contagious respiratory virus that first started in Wuhan in December 2019. As of 2\/11\/2020, the virus is officially named COVID-19 by the World Health Organization.\n\nLearn more from the [WHO](https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019)\n<br>Learn more from the [CDC](https:\/\/www.cdc.gov\/coronavirus\/2019-ncov)","bc252d50":"# Worldwide Cases","5e57f4e2":"# Daily Percent Change in Growth Rate\n\nUseful for tracking whether the growth rate is increasing. Any positive percentage indicates exponential growth.","a604fb8f":"The sequencing of the virus genome is essential for the development of vaccines and diagnostic tests. They are also key to understanding the spread of the virus, as well as allowing to detect possible mutations. https:\/\/panoramafarmaceutico.com.br\/2020\/03\/02\/pesquisadores-brasileiros-sequenciam-genoma-do-coronavirus-em-apenas-dois-dias\/ It helps to track the virus since it changes the genetic codes."}}