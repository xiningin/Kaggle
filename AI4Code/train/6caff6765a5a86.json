{"cell_type":{"bec525fa":"code","f8e08a86":"code","b81e192b":"code","e8d79f44":"code","5416f73e":"code","504d1dae":"code","6b58d4ac":"code","5ec85aa8":"code","f0ca0d67":"code","20336ed0":"code","e53429eb":"code","a6a903c1":"code","ee81ed67":"code","89db997c":"code","64b2737b":"code","6b3afb9a":"code","99653d66":"code","06b61552":"code","d39eee17":"code","e886f326":"code","36234725":"code","0d536b08":"code","6ed632ec":"code","b409d2cd":"code","d5437c87":"code","aaef5db7":"code","0307b963":"code","a2780a54":"code","9af23682":"code","c508193b":"code","9bce2532":"code","319ff18e":"markdown","a13b538b":"markdown","d9c4029c":"markdown","879bc389":"markdown","afa9bdf4":"markdown","548360eb":"markdown","d4ea4d34":"markdown"},"source":{"bec525fa":"# Score --> RMSLE --> 0.29 (Around)","f8e08a86":"# import Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as pyplot\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling as pp\nimport re\n%matplotlib inline","b81e192b":"%load_ext autoreload\n%autoreload 2\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","e8d79f44":"#Import data\ntrain = pd.read_csv(r'C:\\Users\\Sajal\\Desktop\\current\\Current\\Machinehack - House Price prediction\\Participants_Data_HPP\\Train.csv')\ntest = pd.read_csv(r'C:\\Users\\Sajal\\Desktop\\current\\Current\\Machinehack - House Price prediction\\Participants_Data_HPP\\Test.csv')\nsample = pd.read_csv(r'C:\\Users\\Sajal\\Desktop\\current\\Current\\Machinehack - House Price prediction\\Participants_Data_HPP\\sample_submission.csv')","5416f73e":"# Tool For Initial visualization\nreport = pp.ProfileReport(train)\nreport","504d1dae":"cat_col = ['POSTED_BY', 'UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', \n           'BHK_OR_RK', 'READY_TO_MOVE', 'RESALE']\n\nnum_col = [col for col in train.columns if col not in cat_col]\nnum_col = [c for c in list(num_col) if c!='ADDRESS']","6b58d4ac":"# Before Log transformation\nsns.set(font_scale=1.3)\nfig, axes = plt.subplots(2,2, figsize=(18,14))\naxes = [ax for axes_row in axes for ax in axes_row]\n\nfor i, c in enumerate(num_col):\n  train[c].plot.kde(ax=axes[i])\n\nplt.tight_layout()","5ec85aa8":"# After Log Transformation\nfig, axes = plt.subplots(4,1,figsize=(12,18))\n\nfor i,c in enumerate(train[num_col]):\n  _ = np.log1p(train[[c]]).boxplot(ax=axes[i], vert=False)","f0ca0d67":"# Checking correlation\nplt.figure(figsize=(15, 8))\nsns.heatmap(train.corr(),annot=True)","20336ed0":"#Converting categorical values\ntrain['POSTED_BY']=train['POSTED_BY'].replace({'Owner':0,'Dealer':1,'Builder':2})\ntest['POSTED_BY']=test['POSTED_BY'].replace({'Owner':0,'Dealer':1,'Builder':2})\ntrain['BHK_OR_RK']=train['BHK_OR_RK'].replace({'BHK':0,'RK':1})\ntest['BHK_OR_RK']=test['BHK_OR_RK'].replace({'BHK':0,'RK':1})","e53429eb":"# Removing Dublicacy\ntrain.drop_duplicates(keep = False, inplace = True,ignore_index=True)\n# Check Dublicacy\nduplicateRowsDF = train[train.duplicated()]\nduplicateRowsDF.shape","a6a903c1":"train['sq_per_room']=train['SQUARE_FT']\/train['BHK_NO.']\ntest['sq_per_room']=test['SQUARE_FT']\/test['BHK_NO.']","ee81ed67":"train['price_log']=np.log1p(train['TARGET(PRICE_IN_LACS)'])\ntrain['price_log'].plot(kind = 'density', title = 'log of Price Distribution')","89db997c":"cat_col=['POSTED_BY', 'UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', 'BHK_OR_RK', 'RESALE']\nfor col in cat_col:\n    train[col].value_counts()\/len(train)","64b2737b":"# Extracting name of city and locality of house\ndef city(address):\n city_name=address.split(',')[-1]\n return city_name\ndef locality(address):\n locality=address.split(',')[-2]\n return locality\ntrain['loc']=train['ADDRESS'].apply(lambda x : locality(x))\ntrain['City']=train['ADDRESS'].apply(lambda x : city(x))\ntest['loc']=test['ADDRESS'].apply(lambda x : locality(x))\ntest['City']=test['ADDRESS'].apply(lambda x : city(x))","6b3afb9a":"Encoding = train.groupby('City')['TARGET(PRICE_IN_LACS)'].mean()\ntrain['City_mean']= train.City.map(Encoding )\ntest['City_mean']= test.City.map(Encoding )","99653d66":"train['sq_per_city_mean']=train['SQUARE_FT']\/train['City_mean']\ntest['sq_per_city_mean']=test['SQUARE_FT']\/test['City_mean']","06b61552":"train['citym_per_lat'] = train['City_mean']\/train['LATITUDE']\ntest['citym_per_lat'] = test['City_mean']\/test['LATITUDE']\ntrain['citym_per_long'] = train['City_mean']\/train['LONGITUDE']\ntest['citym_per_long'] = test['City_mean']\/test['LONGITUDE']","d39eee17":"train['citym_sq_ft'] = train['SQUARE_FT']\/train['City_mean']\ntest['citym_sq_ft'] = test['SQUARE_FT']\/test['City_mean']","e886f326":"train['citym_per_room'] = train['City_mean']\/train['sq_per_room']\ntest['citym_per_room'] = test['City_mean']\/test['sq_per_room']","36234725":"train['citym_per_bhk'] = train['City_mean']\/train['BHK_NO.']\ntest['citym_per_bhk'] = test['City_mean']\/test['BHK_NO.']","0d536b08":"train['1_per_lat'] = 1\/train['LATITUDE']\ntest['1_per_lat'] = 1\/test['LATITUDE']\ntrain['1_per_long'] = 1\/train['LONGITUDE']\ntest['1_per_long'] = 1\/test['LONGITUDE']","6ed632ec":"# Numerical Columns to be included\ncol=['POSTED_BY', 'UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', 'BHK_OR_RK', 'SQUARE_FT','LONGITUDE', 'LATITUDE', 'RESALE','City_mean','sq_per_room','sq_per_city_mean','citym_per_lat','citym_per_long','citym_sq_ft','citym_per_bhk','1_per_lat','1_per_long']","b409d2cd":"# sub_Train validation set split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nX_train, X_val = train_test_split(train, test_size=.15, random_state=3000,shuffle=True)","d5437c87":"# Model Fitting on sub_train set and evaluating score on validation set \nfrom lightgbm import LGBMRegressor\n# n_esti = 1000,importance_type=gain \nlgb = LGBMRegressor(n_estimators=2000,metrics=\"rmse\")\nlgb= lgb.fit(X_train[col],X_train['price_log'],categorical_feature=cat_col,eval_set=(X_val[col],X_val['price_log']),verbose=100,early_stopping_rounds=100)\ny_predict = lgb.predict(X_val[col])\nnp.sqrt(mean_squared_error(X_val['price_log'],y_predict))","aaef5db7":"from catboost import CatBoostRegressor\ncatb = CatBoostRegressor(eval_metric=\"RMSE\")\ncatb= catb.fit(X_train[col],X_train['price_log'],cat_features=cat_col,eval_set=(X_val[col],X_val['price_log']),verbose=100,early_stopping_rounds=100)\ny_predict = catb.predict(X_val[col])\nnp.sqrt(mean_squared_error(X_val['price_log'],y_predict))","0307b963":"from xgboost import XGBRegressor,XGBRFRegressor\nxgb =XGBRegressor(booster='gbtree',importance_type='gain',validate_parameters=5,n_estimators=500)\nxgb= xgb.fit(X_train[col],X_train['price_log'],eval_set=[(X_val[col],X_val['price_log'])],eval_metric=\"rmse\",verbose=100)\ny_predict = xgb.predict(X_val[col])\nnp.sqrt(mean_squared_error(X_val['price_log'],y_predict))","a2780a54":"import numpy as np\ncorr_sale=train.corr()[\"price_log\"]\n\nfig, ax = plt.subplots(figsize = (6, 10))\ncorr_sale[np.argsort(corr_sale, axis=0)[::-1]].plot(kind='barh')\nplt.tick_params(labelsize=12)\nplt.ylabel(\"Pearson correlation\",size=12)\nplt.title('Correlated features with Sale Price', size=13)\nplt.tight_layout()\n\ndel corr_sale","9af23682":"# Checking Feature Importance\nfeat_importances = pd.Series(lgbcl.feature_importances_, index=col) # change model.feature_importances according to model\nfeat_importances.nlargest(12).plot(kind='barh')\nplt.show()","c508193b":"from sklearn.ensemble import VotingRegressor\nereg = VotingRegressor(estimators=[('xgb', xgb), ('lgb', lgb),('xgb1', xgb),('cat',catb)])\nereg= ereg.fit(X_train[col],X_train['price_log'])\ny_predict = ereg.predict(X_val[col])\nnp.sqrt(mean_squared_error(X_val['price_log'],y_predict))","9bce2532":"# Fitting model on complete training set and Predicting on test set\nereg= ereg.fit(train[col], train['price_log'])\nlgb_pred = ereg.predict(test[col])\nsample['TARGET(PRICE_IN_LACS)']=np.abs((np.exp(lgb_pred)-1))\nsample.to_csv('ereg1.csv',index=False)","319ff18e":"# Model ","a13b538b":"# Lets Start","d9c4029c":"# Insights from models","879bc389":"# Ensembling ","afa9bdf4":"# Data Visualization ","548360eb":"# Feature Engineering","d4ea4d34":"# File Creation"}}