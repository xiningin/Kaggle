{"cell_type":{"5ddbfdf1":"code","ddd21bb8":"code","be44a279":"code","10708e64":"code","10e5fdde":"code","c42fb0a7":"code","e0218aa3":"code","ed2b1850":"code","e17a4429":"code","f9e261e5":"code","ec82e4f9":"code","1da310f5":"code","111b7642":"code","3c5ec9a6":"code","ae3b486d":"code","dab11c90":"code","3826baf6":"code","5da7bca0":"code","9a4c12d9":"code","f35e7805":"code","250c25d5":"code","09ff23fe":"code","17a87d1e":"markdown","35367639":"markdown","80e570e1":"markdown","94c71506":"markdown","da10d0ac":"markdown"},"source":{"5ddbfdf1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ddd21bb8":"import warnings\nwarnings.filterwarnings(\"ignore\")\n# EDA libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Model Libraries\nfrom sklearn.linear_model import LinearRegression\n\nsns.set_style(\"darkgrid\")","be44a279":"df = pd.read_csv('..\/input\/omicron-covid19-variant-daily-cases\/covid-variants.csv',\n                 parse_dates=[\"date\"])\ndf.head()","10708e64":"df.info()","10e5fdde":"df.variant.value_counts()","c42fb0a7":"df.num_sequences.value_counts()","e0218aa3":"df.describe()","ed2b1850":"# Let's plot the the date with num_sequences\nplt.figure(figsize=(22,8))\nsns.scatterplot(x=\"date\", y=\"num_sequences\", data=df, hue=\"variant\")","e17a4429":"df.location.unique()","f9e261e5":"df.variant.unique()","ec82e4f9":"# Let's check the variant wise with top 10 countries with maximum virus\nfor virus in df.variant.unique():\n    most_cases = df.loc[df['variant'] == virus].groupby('location')['num_sequences'].agg('sum').sort_values(ascending=False)[:10]\n    most_cases = pd.DataFrame({'Location':most_cases.index, 'Number of Case':most_cases.values})\n    plt.figure(figsize=(20,8))\n    sns.barplot(y='Location',x=\"Number of Case\",data=most_cases,palette=\"plasma_r\")\n    plt.title('COUNTRIES HAVE MORE {} CASES THAN OTHERS'.format(virus).upper(),loc='center',fontweight=\"bold\")","1da310f5":"# Seprate date with apply function\ndf['month'] = df['date'].apply(lambda date: date.month)\ndf['year'] = df['date'].apply(lambda date: date.year)\ndf['day'] = df['date'].apply(lambda date: date.day)\n\n# We will drop date column as we don't need keep it in our dataframe\ndf.drop('date',axis=1, inplace=True)\ndf.head()","111b7642":"# Let's check all summed variant with montly ratio\ndf_val1 = df.loc[df[\"variant\"]== virus].groupby('month')['num_sequences'].agg('sum').sort_values(ascending=False)\ndf_val1 = pd.DataFrame({'Month':df_val1.index, 'Number of Cases':df_val1.values})\n\nplt.figure(figsize=(14,8))\nsns.barplot(x='Month', y='Number of Cases',data=df_val1);\nplt.title('Monthly Cases Ratio Of All Summed Variant',fontweight=\"bold\");","3c5ec9a6":"# Let's check all summed variant with daily ratio\ndf_val1 = df.loc[df[\"variant\"]== virus].groupby('day')['num_sequences'].agg('sum').sort_values(ascending=False)\ndf_val1 = pd.DataFrame({'Day':df_val1.index, 'Number of Cases':df_val1.values})\n\nplt.figure(figsize=(14,8))\nsns.barplot(x='Day', y='Number of Cases',data=df_val1);\nplt.title('Daily Cases Ratio Of All Summed Variant',fontweight=\"bold\");","ae3b486d":"# Let's check all summed variant with yearly ratio\ndf_val1 = df.loc[df[\"variant\"]== virus].groupby('year')['num_sequences'].agg('sum').sort_values(ascending=False)\ndf_val1 = pd.DataFrame({'Year':df_val1.index, 'Number of Cases':df_val1.values})\n\nplt.figure(figsize=(14,8))\nsns.barplot(x='Year', y='Number of Cases',data=df_val1);\nplt.title('Over All Cases Ratio With Year Of All Variant',fontweight=\"bold\");","dab11c90":"df_val1 = df.loc[df[\"variant\"]== 'Omicron'].groupby('month')['num_sequences'].agg('sum').sort_values(ascending=False)\ndf_val1 = pd.DataFrame({'Month':df_val1.index, 'Number of Cases':df_val1.values})\n\nplt.figure(figsize=(14,8))\nsns.barplot(x='Month', y='Number of Cases',data=df_val1);\nplt.title('Omicron Cases Montly Ratio',fontweight=\"bold\");","3826baf6":"df_val1 = df.loc[df[\"variant\"]== 'Omicron'].groupby('day')['num_sequences'].agg('sum').sort_values(ascending=False)\ndf_val1 = pd.DataFrame({'Day':df_val1.index, 'Number of Cases':df_val1.values})\n\nplt.figure(figsize=(14,8))\nsns.barplot(x='Day', y='Number of Cases',data=df_val1);\nplt.title('Omicron Cases Daily Ratio',fontweight=\"bold\");","5da7bca0":"df_val1 = df.loc[df[\"variant\"]== 'Omicron'].groupby('year')['num_sequences'].agg('sum').sort_values(ascending=False)\ndf_val1 = pd.DataFrame({'Year':df_val1.index, 'Number of Cases':df_val1.values})\n\nplt.figure(figsize=(14,8))\nsns.barplot(x='Year', y='Number of Cases',data=df_val1);\nplt.title('Omicron Cases Yearly Ratio',fontweight=\"bold\");","9a4c12d9":"df_val1 = df.loc[df[\"variant\"]== 'Omicron'].groupby('location')['num_sequences'].agg('sum').sort_values(ascending=False)[:12]\ndf_val1 = pd.DataFrame({'Location':df_val1.index, 'Number of Cases':df_val1.values})\n\nplt.figure(figsize=(16,8))\nsns.barplot(x='Location', y='Number of Cases',data=df_val1);\nplt.title('Highest Omicron Cases Location',fontweight=\"bold\");\nplt.xticks(rotation=30);","f35e7805":"# Creating a copy of dataframe\ndf_temp = df.copy()","250c25d5":"df_temp = df.loc[df[\"variant\"]== 'Omicron'].groupby('day')['num_sequences'].agg('sum').sort_values(ascending=False)\ndf_temp = pd.DataFrame({'Day':df_temp.index, 'Number of Cases':df_temp.values})\n","09ff23fe":"df_temp","17a87d1e":"### Now Let's check the Omicron variant","35367639":"# EDA (Exploratory Data Analysis)","80e570e1":"### Now we have Extra three columns with month, year and day and dropped the date column as we don't need that anymore","94c71506":"### Let's Seprate date, month and year","da10d0ac":"# Model"}}