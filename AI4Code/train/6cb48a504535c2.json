{"cell_type":{"605a6a0d":"code","dc0799bb":"code","dd403f6a":"code","1f369960":"code","98467073":"code","5b749a76":"code","974b23fd":"code","a042667b":"code","feb17576":"code","b2aea6e4":"code","7e58ee5a":"code","cfe52f77":"code","1970d341":"code","bd52b5e9":"code","70b05675":"code","fd5dfdfe":"code","546d5daa":"code","23d8cd09":"code","51547d10":"code","85dfb661":"code","80acd9d3":"code","bffdb19c":"code","088c3d7a":"code","7367226d":"code","a5ef0792":"code","985b9069":"code","8cc23723":"code","25a1ba51":"code","b959f6b4":"code","304a4e90":"code","2fed5100":"code","4de0e38e":"code","f647656d":"code","756a6511":"code","7722bb30":"code","c3002496":"code","3450a021":"code","521254c7":"code","f70032d5":"code","b1822be6":"code","02d34728":"code","5ba60503":"code","4d4f4a9f":"code","e8c7d5c8":"code","932742d0":"code","59289d54":"code","012dcac5":"code","58caab7d":"code","afe9a612":"code","698b404c":"code","00b86ce9":"code","8f6a8c1f":"code","3fe87bcc":"code","71d6d7f4":"code","3e9f801c":"code","224ed27d":"code","35712014":"code","d9a79a5b":"code","735df647":"code","7183fc3a":"markdown","5499e434":"markdown","9b00e422":"markdown","22b32e51":"markdown","c246120c":"markdown","42039d5e":"markdown","a6834692":"markdown","7ed04755":"markdown","e6457361":"markdown","e41c89a7":"markdown","2acb8fcc":"markdown","d0ad85ce":"markdown","1f435bb3":"markdown","dd096f6c":"markdown","7e815b30":"markdown","85d79fd3":"markdown","7a0a9d73":"markdown","9f78f209":"markdown","4dd7f135":"markdown","e16bbba8":"markdown","da88ab12":"markdown","915d6b95":"markdown","430a444d":"markdown","62b90de2":"markdown","4ae2ec63":"markdown","ea6ba551":"markdown","a7f359d4":"markdown","88a136bc":"markdown","68069696":"markdown","a261dd26":"markdown","7a47bb9e":"markdown","88fef32c":"markdown","54bf6c8b":"markdown","98c73694":"markdown","64cf0c4c":"markdown","ba6dd99e":"markdown","df994bbc":"markdown","d4e01d86":"markdown"},"source":{"605a6a0d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc0799bb":"test = pd.read_csv('..\/input\/itea-goal-prediction\/goal_test.csv')\ntrain = pd.read_csv('..\/input\/itea-goal-prediction\/goal_train.csv')\ngoal_submission = pd.read_csv('..\/input\/itea-goal-prediction\/goal_submission.csv')","dd403f6a":"train.columns","1f369960":"train","98467073":"train.info()","5b749a76":"train.describe()","974b23fd":"import datetime\n\ndate_time_str = '2020-09-10'\ndate_time_obj = datetime.datetime.strptime(date_time_str, '%Y-%m-%d')\nk = date_time_obj.date()\n\ntrain['birthDate'] = pd.to_datetime(train['birthDate'], errors='coerce')\ntrain['birth'] = k\ntrain['birth'] = pd.to_datetime(train['birth'], errors='coerce')\n\ntest['birthDate'] = pd.to_datetime(test['birthDate'], errors='coerce')\ntest['birth'] = k\ntest['birth'] = pd.to_datetime(test['birth'], errors='coerce')","a042667b":"%matplotlib inline\n\ntrain.plot.scatter(x = 'x_1', y = 'y_1', figsize = (15,8))","feb17576":"train['role'].hist()","b2aea6e4":"train['body_part'].hist()","7e58ee5a":"train['matchPeriod'].hist()","cfe52f77":"train.isnull().sum()","1970d341":"train.isna().sum()","bd52b5e9":"train['matchPeriod'] = np.where(train['matchPeriod'] == \"1H\", 1, 2)\ntrain.drop(columns = 'middleName', inplace = True)\n\ntrain['flang'] = np.where (((train['y_1'] > 50) & (train['foot'] == \"left\")), 1, \n                           np.where((train['y_1'] <= 50) & (train['foot'] == \"right\"), 1, 0))\n\ntrain['body_part'] = np.where (train['body_part'] == \"right\",1, \n                               np.where(train['body_part'] == \"left\",-1, \n                                        np.where(train['body_part'] == \"head\/body\", 0, 0)))\ntrain['foot'] = np.where (train['foot'] == \"right\",1, \n                               np.where(train['foot'] == \"left\",-1, \n                                        np.where(train['foot'] == \"both\", 0, 1)))\ntrain['weight'] = train['weight'].fillna(train['weight'].mean())\ntrain['birthDate'] = ((train['birth'] - train['birthDate']).dt.days \/ 365.25)\ntrain['birthDate'] = train['birthDate'].fillna(train['birthDate'].mean())\n\ntrain['role'] = np.where (train['role'] == \"Goalkeeper\",1, \n                               np.where(train['role'] == \"Defender\", 1, \n                                        np.where(train['role'] == \"Midfielder\", 2, 3)))\n\ntrain['distance'] = ((100 - train['x_1'])**2 + (50 - train['y_1'])**2)**0.5\n\nimport math \ntrain['ugol'] = np.where(train['y_1'] > 50, \n                         (180\/math.pi*np.arcsin((((train['x_1'] - 100)**2)**0.5) \/ (((train['x_1'] - 100)**2 + (train['y_1']-50)**2)**0.5))).astype(float), \n                         np.where(train['y_1'] < 50, (180 - 90 - (180\/math.pi*np.arcsin((((train['x_1'] - 100)**2)**0.5) \/ (((train['x_1'] - 100)**2 + (train['y_1']-50)**2)**0.5))).astype(float)), 0))\n\ntrain['Legioner'] = np.where((train['league'] == \"IT\") & (train['passportArea'] == \"Italy\"), 0,\n                            np.where((train['league'] == \"SP\") & (train['passportArea'] == \"Spain\"), 0,\n                                    np.where((train['league'] == \"GE\") & (train['passportArea'] == \"Germany\"), 0,\n                                            np.where((train['league'] == \"FR\") & (train['passportArea'] == \"France\"), 0,\n                                                    np.where((train['league'] == \"EN\") & (train['passportArea'] == \"England\"), 0, 1)))))","70b05675":"test['matchPeriod'] = np.where(test['matchPeriod'] == \"1H\", 1, 2)\ntest.drop(columns = 'middleName', inplace = True)\n\ntest['flang'] = np.where (((test['y_1'] > 50) & (test['foot'] == \"left\")), 1, \n                           np.where((test['y_1'] <= 50) & (test['foot'] == \"right\"), 1, 0))\n\ntest['body_part'] = np.where (test['body_part'] == \"right\",1, \n                               np.where(test['body_part'] == \"left\",-1, \n                                        np.where(test['body_part'] == \"head\/body\", 0, 0)))\ntest['foot'] = np.where (test['foot'] == \"right\",1, \n                               np.where(test['foot'] == \"left\",-1, \n                                        np.where(test['foot'] == \"both\", 0, 1)))\ntest['weight'] = test['weight'].fillna(test['weight'].mean())\ntest['birthDate'] = ((test['birth'] - test['birthDate']).dt.days \/ 365.25)\ntest['birthDate'] = test['birthDate'].fillna(test['birthDate'].mean())\n\ntest['role'] = np.where (test['role'] == \"Goalkeeper\",1, \n                               np.where(test['role'] == \"Defender\", 1, \n                                        np.where(test['role'] == \"Midfielder\", 2, 3)))\n\ntest['distance'] = ((100 - test['x_1'])**2 + (50 - test['y_1'])**2)**0.5\n\nimport math \ntest['ugol'] = np.where(test['y_1'] > 50, \n                         (180\/math.pi*np.arcsin((((test['x_1'] - 100)**2)**0.5) \/ (((test['x_1'] - 100)**2 + (test['y_1']-50)**2)**0.5))).astype(float), \n                         np.where(test['y_1'] < 50, (180 - 90 - (180\/math.pi*np.arcsin((((test['x_1'] - 100)**2)**0.5) \/ (((test['x_1'] - 100)**2 + (test['y_1']-50)**2)**0.5))).astype(float)), 0))\n\ntest['Legioner'] = np.where((test['league'] == \"IT\") & (test['passportArea'] == \"Italy\"), 0,\n                            np.where((test['league'] == \"SP\") & (test['passportArea'] == \"Spain\"), 0,\n                                    np.where((test['league'] == \"GE\") & (test['passportArea'] == \"Germany\"), 0,\n                                            np.where((test['league'] == \"FR\") & (test['passportArea'] == \"France\"), 0,\n                                                    np.where((test['league'] == \"EN\") & (test['passportArea'] == \"England\"), 0, 1)))))","fd5dfdfe":"#df.drop_duplicates(['teamId', 'matchId', 'shot']).groupby(['teamId', 'matchId'])['shot'].mean()\n#df['shot'] = df.iloc[:,3]\n\n#df.groupby(['matchId'])['shot'].transform(lambda x: x.unique().mean())\ndf = pd.DataFrame(train.groupby(['teamId', 'matchId']).size().reset_index())\n\ndf1 = pd.DataFrame(df.groupby(['teamId'])[0].agg(lambda x: x.unique().mean()))\ndf1.rename(columns = {0:'team_shots'}, inplace=True)\ntrain = train.merge(df1, how = 'left', left_on='teamId', right_on='teamId')","546d5daa":"df = pd.DataFrame(test.groupby(['teamId', 'matchId']).size().reset_index())\n\ndf1 = pd.DataFrame(df.groupby(['teamId'])[0].agg(lambda x: x.unique().mean()))\ndf1.rename(columns = {0:'team_shots'}, inplace=True)\ntest = test.merge(df1, how = 'left', left_on='teamId', right_on='teamId')","23d8cd09":"df = pd.DataFrame(train.groupby(['matchId', 'teamId']).size().reset_index())\n\ndf1 = pd.DataFrame(df.groupby(['matchId'])[0].agg(lambda x: x.unique().mean()))\ndf1.rename(columns = {0:'match_shots'}, inplace=True)\ntrain = train.merge(df1, how = 'left', left_on='matchId', right_on='matchId')","51547d10":"df = pd.DataFrame(test.groupby(['matchId', 'teamId']).size().reset_index())\n\ndf1 = pd.DataFrame(df.groupby(['matchId'])[0].agg(lambda x: x.unique().mean()))\ndf1.rename(columns = {0:'match_shots'}, inplace=True)\ntest = test.merge(df1, how = 'left', left_on='matchId', right_on='matchId')","85dfb661":"df = pd.DataFrame(train.groupby(['playerId', 'matchId']).size().reset_index())\n\ndf1 = pd.DataFrame(df.groupby(['playerId'])[0].agg(lambda x: x.unique().mean()))\ndf1.rename(columns = {0:'player_shots'}, inplace=True)\ntrain = train.merge(df1, how = 'left', left_on='playerId', right_on='playerId')","80acd9d3":"df = pd.DataFrame(test.groupby(['playerId', 'matchId']).size().reset_index())\n\ndf1 = pd.DataFrame(df.groupby(['playerId'])[0].agg(lambda x: x.unique().mean()))\ndf1.rename(columns = {0:'player_shots'}, inplace=True)\ntest = test.merge(df1, how = 'left', left_on='playerId', right_on='playerId')","bffdb19c":"train.drop(columns = 'teamId', inplace = True)\ntest.drop(columns = 'teamId', inplace = True)\n\ntrain.drop(columns = 'matchId', inplace = True)\ntest.drop(columns = 'matchId', inplace = True)\n\ntrain.drop(columns = 'birth', inplace = True)\ntest.drop(columns = 'birth', inplace = True)\n\ntrain.drop(columns = 'shot_id', inplace = True)\ntest.drop(columns = 'shot_id', inplace = True)\n\ntrain.drop(columns = 'playerId', inplace = True)\ntest.drop(columns = 'playerId', inplace = True)","088c3d7a":"train.select_dtypes(include = ['object'])","7367226d":"train.corr()","a5ef0792":"X = train.select_dtypes(exclude = ['object']).fillna(-1)\nX.drop(columns = 'is_goal', inplace = True)\ny_tr = train['is_goal'].values\nX_tr = X.values\ntest_obrabot = test.select_dtypes(exclude = ['object']).fillna(-1)","985b9069":"from sklearn.model_selection import train_test_split\n\nX_tr, X_test, y_tr, y_test = train_test_split(X_tr, y_tr, test_size = 0.2, random_state = 0)\nX_tr.shape, X_test.shape, y_tr.shape, y_test.shape\n\nfrom sklearn.metrics import accuracy_score, f1_score, roc_auc_score","8cc23723":"import xgboost as xgb\n\nxg_class = xgb.XGBClassifier(\n    learning_rate=0.02, \n    max_delta_step=0, \n    max_depth=3, #10,\n    min_child_weight=5, #0.1, \n    missing=None, \n    n_estimators=250, \n    nthread=4,\n    objective='binary:logistic', \n    reg_alpha=0.01, \n    reg_lambda = 0.01,\n    scale_pos_weight=1, \n    seed=0, \n    #silent=True, \n    subsample=1) #0.9)\n\nxg_fit=xg_class.fit(X_tr, y_tr)\n\nroc_auc_score(y_test, xg_class.predict_proba(X_test)[:,1]), roc_auc_score(y_tr, xg_class.predict_proba(X_tr)[:,1])\n#(0.7678727858633386, 0.9981305023093079)\n#(0.773255976456168, 0.7846403099711974)\n\n#(0.7735184381009774, 0.784546541135321)\n","25a1ba51":"from sklearn.model_selection import cross_val_score\n\nnp.mean(cross_val_score(xg_class, X_tr, y_tr, cv = 10, scoring= 'roc_auc')) #'roc_auc') #, #scoring = roc_auc_score)","b959f6b4":"pd.DataFrame({\n    'variable': X.columns,\n    'importance': xg_fit.feature_importances_\n}).sort_values('importance', ascending=False)","304a4e90":"from sklearn.pipeline import Pipeline\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\n\nxg_class_grid = xgb.XGBClassifier (random_state = 0, objective='binary:logistic',\n                   nthread=4, missing = None) # silent=True,\nparam_grid = {\n        'param__min_child_weight': [8], #[1, 3, 5], #[5], 555\n        'param__gamma': [3], #[1, 3, 5], #[5],\n        'param__subsample': [0.8], #[0,5, 0.6, 0.8, 0.9], #[1], 0.8\n        'param__colsample_bytree': [0.7], #[0.8],\n        'param__max_depth': [2], #[2, 3, 4, 5], #333\n        'param__n_estimators': [600],\n        'param__learning_rate' : [0.02], #0.01, 0.03],\n        'param__max_delta_step' : [0],\n        #'param__missing': ['None'],\n        #'param__ nthread=4,\n        'param__reg_alpha' : [0.04], #[0.01, 0.02, 0.03], \n        'param__reg_lambda' : [0.04], #[0.01, 0.02, 0.03],\n        'param__scale_pos_weight': [1],\n        'param__seed' : [0],   \n        }\n    \npipeline = Pipeline([ ('param', xg_class_grid)])\n\ngrid = GridSearchCV(pipeline, cv = 10, param_grid = param_grid, n_jobs=-1, \n                    scoring='roc_auc')\ngrid.fit(X_tr, y_tr)\n\nprint('Best parameters found by grid search are:', grid.best_params_)\nprint('Best score found by grid search is:', grid.best_score_)\n#0.7733440037081725\n#(0.7623493089753883, 0.8047825947514051)\n\n\nroc_auc_score(y_test, grid.predict_proba(X_test)[:,1]), roc_auc_score(y_tr, grid.predict_proba(X_tr)[:,1])","2fed5100":"#0.7730951529235991\n#(0.7664714523012375, 0.7891694530375316)","4de0e38e":"#Best score found by grid search is: 0.7738371273389062\n #   (0.7663870702191697, 0.7892375348307237)\n\n","f647656d":"#grid.best_estimator_.named_steps[\"pipeline\"].feature_importances_ #named_steps[\"pipeline\"].\n\n#grid.best_estimator_.feature_importances_","756a6511":"#pd.DataFrame({\n#    'variable': X.columns,\n#    'importance': grid.best_estimator_.named_steps[\"pipeline\"].feature_importances_ #xg_fit\n#}).sort_values('importance', ascending=False)","7722bb30":"roc_auc_score(y_test, grid.predict_proba(X_test)[:,1]), roc_auc_score(y_tr, grid.predict_proba(X_tr)[:,1])","c3002496":"roc_auc_score(y_test, xg_class.predict_proba(X_test)[:,1]), roc_auc_score(y_tr, xg_class.predict_proba(X_tr)[:,1])","3450a021":"print(f1_score(y_test, grid.predict(X_test)), \"TRAIN:\",f1_score(y_tr, grid.predict(X_tr)))","521254c7":"print(f1_score(y_test, xg_class.predict(X_test)), \"TRAIN:\",f1_score(y_tr, xg_class.predict(X_tr)))","f70032d5":"{i: f1_score(y_test, (grid.predict_proba(X_test)[:,1] > i).astype('int')) for i in np.array(list(range(10, 50)))\/100}","b1822be6":"{i: f1_score(y_test, (xg_class.predict_proba(X_test)[:,1] > i).astype('int')) for i in np.array(list(range(10, 50)))\/100}","02d34728":"treshold_grid = 0.18\nprint(f1_score(y_test, (grid.predict_proba(X_test)[:,1] > treshold_grid).astype('int')), \n      \"TRAIN:\",f1_score(y_tr, (grid.predict_proba(X_tr)[:,1] > treshold_grid).astype('int')))","5ba60503":"#0.40574712643678157 TRAIN: 0.449438202247191","4d4f4a9f":"treshold_model = 0.18\nprint(f1_score(y_test, (xg_class.predict_proba(X_test)[:,1] > treshold_model).astype('int')), \n      \"TRAIN:\",f1_score(y_tr, (xg_class.predict_proba(X_tr)[:,1] > treshold_model).astype('int')))","e8c7d5c8":"import lightgbm\n\ntrain_data = lightgbm.Dataset(X_tr, label = y_tr)\ntest_data = lightgbm.Dataset(X_test, label = y_test)\n\nparameters = {\n    'objective': 'binary',\n    'metric': 'auc',\n    'is_unbalance': 'true',\n    'boosting': 'gbdt',\n    'num_leaves': 30,\n    'feature_fraction': 0.9,\n    'bagging_fraction': 0.9,\n    'bagging_freq': 5,\n    'learning_rate': 0.2,\n    'verbose': 0\n}\n\nlgb_model = lightgbm.train(parameters,\n                       train_data,\n                       valid_sets=test_data,\n                       num_boost_round=5000,\n                       early_stopping_rounds=100)","932742d0":"pd.DataFrame({\n    'variable': X.columns,\n    'importance': lgb_model.feature_importance(importance_type=\"gain\")\n}).sort_values('importance', ascending=False)","59289d54":"from sklearn.metrics import roc_auc_score\nimport lightgbm as lgb\nfrom sklearn.model_selection import GridSearchCV, ParameterGrid\nfrom sklearn.metrics import (roc_curve, auc, accuracy_score)\n\nparams = {\n    'task': 'train',\n    'boosting_type': 'gbdt',\n    'objective': 'binary',\n    'metric': 'auc',\n    'is_unbalance': True,\n    'metric_freq': 1,\n    'is_training_metric': True,\n    'max_bin': 255,\n    'learning_rate': 0.02,\n    'num_leaves': 63,\n    'lambda_l1': 0,\n    'lambda_l2': 0,\n    'tree_learner': 'serial',\n    'feature_fraction': 0.8,\n    'bagging_fraction': 0.8,\n    'bagging_freq': 5,\n    'min_data_in_leaf': 50,\n    'min_sum_hessian_in_leaf': 5,\n    'num_machines': 1,\n    'local_listen_port': 12400,\n    'verbose': 0,\n    'min_child_samples': 20,\n    'min_child_weight': 0.001,\n    'min_split_gain': 0.0,\n    'colsample_bytree': 1.0,\n    'reg_alpha': 0.0,\n    'reg_lambda': 0.0\n}\n\ngridParams = {\n    #'max_depth': [7, 8, 10, 11, 12],\n    'lambda_l1': [6], #[3, 4, 5, 10, 11, 12, 13], #[11],\n    'lambda_l2': [4], #[0, 1, 2, 3], #[2],\n    'num_leaves': [6], #[8, 9, 10, 11, 15, 20], #20],\n    'feature_fraction': [0.3], #[0.2, 0.3, 0.4, 0.5], #, 0.4],\n    'bagging_fraction': [0.1], #[0.4, 0.5, 0.6, 0.7] #, 0.4]\n    'learning_rate': [0.02],\n    'min_child_samples': [15],\n    'min_child_weight': [0.001],\n    'colsample_bytree': [0.7],\n    'min_data_in_leaf': [50],\n    'min_sum_hessian_in_leaf': [4],\n}\n\nmdl = lgb.LGBMClassifier(\n    n_estimators = 1000,\n    task = params['task'],\n    metric = params['metric'],\n    metric_freq = params['metric_freq'],\n    is_training_metric = params['is_training_metric'],\n    max_bin = params['max_bin'],\n    feature_fraction = params['feature_fraction'],\n    bagging_fraction = params['bagging_fraction'],\n    n_jobs = -1\n)\n\nscoring = {'AUC': 'roc_auc'}\n\ngrid_lgb = GridSearchCV(mdl, gridParams, verbose=2, cv=10, \n                    scoring=scoring, n_jobs=-1, refit='AUC')\n\ngrid_lgb.fit(X_tr, y_tr)\n\nprint('Best parameters found by grid search are:', grid_lgb.best_params_)\nprint('Best score found by grid search is:', grid_lgb.best_score_)\n\nprint(\"Light_lgb \", roc_auc_score(y_test, grid_lgb.predict_proba(X_test)[:,1]), roc_auc_score(y_tr, grid_lgb.predict_proba(X_tr)[:,1]))","012dcac5":"#Best score found by grid search is: 0.7738790956929777\n#Light_lgb  0.7623419714030347 0.8008642797612084","58caab7d":"pd.DataFrame({\n    'variable': X.columns,\n    'importance': grid_lgb.best_estimator_.feature_importances_ \n}).sort_values('importance', ascending=False)","afe9a612":"print(f1_score(y_test, grid_lgb.predict(X_test)), \"TRAIN:\",f1_score(y_tr, grid_lgb.predict(X_tr)))","698b404c":"{i: f1_score(y_test, (grid_lgb.predict_proba(X_test)[:,1] > i).astype('int')) for i in np.array(list(range(10, 50)))\/100}","00b86ce9":"#from catboost import CatBoostClassifier\n\n#cat_model = CatBoostClassifier(\n#    eval_metric='AUC',\n#    use_best_model=True,\n#    random_seed=42, iterations=2000)\n\n#cat_model.fit(X_tr, y_tr, eval_set = (X_test, y_test))","8f6a8c1f":"#pd.DataFrame({\n#    'variable': X.columns,\n#    'importance': cat_model.feature_importances_\n#}).sort_values('importance', ascending=False)","3fe87bcc":"treshold_lgb = 0.19\nprint(\"F1_score Light_lgb \", f1_score(y_test, (grid_lgb.predict_proba(X_test)[:,1] > treshold_lgb).astype('int')), \n      \"TRAIN:\",f1_score(y_tr, (grid_lgb.predict_proba(X_tr)[:,1] > treshold_lgb).astype('int')))\n\ntreshold_grid = 0.18\nprint(\"F1_score XG_Boost \", f1_score(y_test, (grid.predict_proba(X_test)[:,1] > treshold_grid).astype('int')), \n      \"TRAIN:\",f1_score(y_tr, (grid.predict_proba(X_tr)[:,1] > treshold_grid).astype('int')))","71d6d7f4":"#XG_Boost  0.7633594481027485 0.8074625130201806  \n#XG_Boost  0.7623430196276566 0.8064790041755092 last\n#Light_lgb  0.7587773088719636 0.826900746188638  \n#Light_lgb  0.7589380366473304 0.8267665843679851 last","3e9f801c":"print(\"XG_Boost \", roc_auc_score(y_test, grid.predict_proba(X_test)[:,1]), roc_auc_score(y_tr, grid.predict_proba(X_tr)[:,1]))\nprint(\"Light_lgb \", roc_auc_score(y_test, grid_lgb.predict_proba(X_test)[:,1]), roc_auc_score(y_tr, grid_lgb.predict_proba(X_tr)[:,1]))","224ed27d":"print(\"Roc_Auc for XG_Boost+Light_lgb \", roc_auc_score(y_test, (grid.predict_proba(X_test)[:,1] * 0.55 + grid_lgb.predict(X_test) * 0.45)))","35712014":"#np.around(xg_class.predict_proba(X_test)[:,1]).astype('int').sum()\n#sub = np.where(xg_class.predict_proba(test_obrabot)[:,1] > 0.17, 1, 0)\nsub = (xg_class.predict_proba(test_obrabot)[:,1] > treshold_model).astype('int')\nsub_grid = (grid.predict_proba(test_obrabot)[:,1] > treshold_grid).astype('int')\nsub_lgb = (grid_lgb.predict_proba(test_obrabot)[:,1] > treshold_lgb).astype('int')","d9a79a5b":"sub.sum(), sub_grid.sum(), sub_lgb.sum()","735df647":"goal_submission['is_goal'] = sub_grid\ngoal_submission.to_csv('submission1.csv', index = False)","7183fc3a":"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0432\u0443\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043b\u0443\u0447\u0448\u0435\u0439 \u043e\u043a\u0430\u0437\u0430\u043b\u0430\u0441\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0448\u043b\u0430 \u043f\u043e\u0434\u0431\u043e\u0440\u043a\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0432 GridSearchCV. \u0427\u0442\u043e \u043b\u043e\u0433\u0438\u0447\u043d\u043e","5499e434":"# **Light_GBM**","9b00e422":"\u041e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f treshold_lgb = 0.2, \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438.\n","22b32e51":"\u041f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0443 \u043c\u043e\u0434\u0435\u043b\u0438 lightgbm \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e GridSearchCV. \u041f\u0440\u043e\u043f\u043e\u0434\u0438\u043c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0438 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438.","c246120c":"\u041f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0432\u044b\u0431\u0440\u0430\u043d scoring= 'roc_auc'","42039d5e":"\u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0441\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043d\u0430 \u0442\u0440\u0435\u0448\u0445\u043e\u043b\u0434","a6834692":"\u041f\u0440\u043e\u0448\u0443 \u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f, \u043a\u043e\u0434 \u043d\u0430\u0441\u043f\u0438\u0441\u0430\u043d \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u043a\u0440\u0438\u0432\u043e, \u0442\u0430\u043a \u0441\u043b\u043e\u0436\u0438\u043b\u043e\u0441\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438, \u043d\u0430\u0447\u0430\u043b \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0442\u0440\u0435\u0438\u043d \u0438 \u0440\u0435\u0448\u0438\u043b \u0443\u0436\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f. \u0414\u0430\u043d\u043d\u044b\u0439 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u0440\u0430\u0441\u0448\u0430\u0440\u0435\u043d \u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043d\u043e\u0441\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0435\u0433\u043e \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044e. \u0411\u044b\u043b\u043e \u0431\u044b \u0447\u0443\u0442\u044c \u0447\u0443\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u044f \u0431\u044b \u0432\u0441\u0435 \u043f\u043e\u043f\u0440\u0430\u0432\u0438\u043b. \u0418\u0437\u0432\u0438\u043d\u044f\u044e\u0441\u044c ;)","7ed04755":"\u0422\u0430\u043a\u0436\u0435 \u0431\u044b\u043b\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0430 \u043d\u0435\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f - Middle_Name","e6457361":"\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c, \u043a\u0430\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u0430 object \u043e\u0441\u0442\u0430\u043b\u0438\u0441\u044c, \u0434\u0435\u043b\u0430\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0442\u0435\u0441\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438.","e41c89a7":"\u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","2acb8fcc":"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c feature_importances, \u043a\u0430\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0431\u043e\u043b\u0435\u0435 \u0432\u0430\u0436\u043d\u044b \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 - Light_gbm, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u043a\u043b\u0430\u0434 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0442\u0430\u0440\u0433\u0435\u0442\u0430. \u041d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u0432\u043a\u043b\u0430\u0434 \u0432\u043d\u043e\u0441\u0438\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 distance and body_part","d0ad85ce":"\u041f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0441\u043f\u043b\u0438\u0442\u0430 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0438 \u0442\u0440\u0435\u0439\u043d\u043e\u0432\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438. \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0442\u044c \u0434\u0430\u0442\u0430 \u0441\u0435\u0442 \u0431\u0443\u0434\u0435\u043c \u0432 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 80\\20. \u041f\u043e\u043f\u0443\u0442\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 -1.","1f435bb3":"\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u0435,  \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043d\u0435 \u0432\u044b\u044f\u0432\u0438\u043b. ","dd096f6c":"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u043b\u0430\u0441\u044c \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0430 \u043e\u0431 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u0434\u0430\u0442\u0430 \u0441\u0435\u0442\u0430 \u043d\u0430 \u0442\u0440\u0435\u0438\u043d \u0438 \u0442\u0435\u0441\u0442. 80\/20 or 70\/30. \u041f\u0435\u0440\u0432\u043e\u0435 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043b\u0443\u0447\u0448\u0438\u043c. \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0434\u043e \u0442\u043e\u043d\u043a\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438.","7e815b30":"\u041e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044f\u0441\u044c \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435, \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0441 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438 (x_1 & y_1) \u043c\u0435\u0441\u0442\u0430 \u0443\u0434\u0430\u0440\u0430, \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0433\u043e\u0442\u0443 \u0431\u044b \u043f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0434\u043e \u0432\u043e\u0440\u043e\u0442.","85d79fd3":"Best parameters found by grid search are: {'bagging_fraction': 0.4, 'feature_fraction': 0.4, 'lambda_l1': 11, 'lambda_l2': 2, 'num_leaves': 8}\nBest score found by grid search is: 0.7740061062507155\nLight_lgb  0.7591134395674047 0.8194888821931275","7a0a9d73":"F1_score Light_lgb  0.40990516332982085 TRAIN: 0.43868921775898523\nF1_score XG_Boost  0.40543478260869564 TRAIN: 0.44661493176344663","9f78f209":"\u0414\u043b\u044f \u0442\u043e\u043d\u043a\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f GridSearchCV, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e. \n\n\u0412\u043e\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n\n'param__min_child_weight': [1, 5], #, 10],\n        'param__gamma': [0.5, 1, 1.5], #, 2, 5],\n        'param__subsample': [0.6, 0.8], #, 1.0],\n        'param__colsample_bytree': [0.6, 0.8], #, 1.0],\n        'param__max_depth': [3, 4] # 5]}\n        'param__learning_rate' : [0.02], #0.01, 0.03],\n        'param__reg_alpha' : [0.01], \n        'param__reg_lambda' : [0.01],","4dd7f135":"\u0422\u0435\u0436\u0435 \u0441\u0430\u043c\u044b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0435\u043b\u0430\u0435\u043c \u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","e16bbba8":"\u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0443\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 F1_Score and Roc_Auc ","da88ab12":"Best parameters found by grid search are: {'bagging_fraction': 0.1, 'colsample_bytree': 0.8, 'feature_fraction': 0.4, 'lambda_l1': 11, 'lambda_l2': 2, 'learning_rate': 0.02, 'min_child_samples': 17, 'min_child_weight': 0.001, 'min_data_in_leaf': 50, 'min_sum_hessian_in_leaf': 4, 'num_leaves': 6}\nBest score found by grid search is: 0.7740094818833152\nLight_lgb  0.7624548302539988 0.8007254616593976","915d6b95":"# **CatBoost**","430a444d":"\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043d\u0435\u043f\u043b\u043e\u0445\u043e\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e","62b90de2":"\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0444\u0443\u0442\u0431\u043e\u043b\u0438\u0441\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u044c Datatime, \u0430 \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430.","4ae2ec63":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u0432 \u0434\u0430\u0442\u0430 \u0441\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0431\u0443\u0434\u0435\u0442 \u0433\u043e\u043b \u0438\u043b\u0438 \u043d\u0435\u0442. \u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u043e \u0438\u0441\u043f\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u0417\u0430 \u0442\u0430\u0440\u0433\u0435\u0442\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0431\u044b\u043b \u0432\u0437\u044f\u0442\u044c \u0432\u0435\u043a\u0442\u043e\u0440 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \"is_goal\", \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0434\u0432\u0443\u0445 \u0432\u0438\u0434\u043e\u0432 0 - \u0435\u0441\u043b\u0438 \u0433\u043e\u043b \u043d\u0435 \u0437\u0430\u0431\u0438\u0442 \u0438 1 - \u0435\u0441\u043b\u0438 \u0433\u043e\u043b \u0437\u0430\u0431\u0438\u0442. \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430 \u0441\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 24733 rows \u00d7 29 columns, \u0438\u0437 \u043d\u0438\u0445 14 \u0438\u043c\u0435\u044e\u0442 \u0442\u0438\u043f int or float, 15 \u0442\u0438\u043f object. \u0414\u043b\u044f \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441 \u0446\u0435\u043b\u044c\u044e \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0433\u043e \u0434\u0430\u0442\u0430 \u0441\u0435\u0442\u0430, \u0431\u044b\u043b\u043e \u0440\u0435\u0448\u0435\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0447\u0430\u0441\u0442\u044c \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438\u0437 object \u0432 \u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0442\u0438\u043f, \u0430 \u0447\u0430\u0441\u0442\u044c \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438","ea6ba551":"for 70\/30 (0.7597098650097454, 0.9962773427626026)\n\nfor 80\/20 (0.7610774152777219, 0.9936794878060444)\n\n(0.7439560536948805, 0.9901874115518476)","a7f359d4":"0.17054263565891473 TRAIN: 0.22000623247117485","88a136bc":"Best parameters found by grid search are: {'bagging_fraction': 0.1, 'colsample_bytree': 0.7, 'feature_fraction': 0.4, 'lambda_l1': 5, 'lambda_l2': 3, 'learning_rate': 0.02, 'min_child_samples': 15, 'min_child_weight': 0.001, 'min_data_in_leaf': 50, 'min_sum_hessian_in_leaf': 4, 'num_leaves': 6}\nBest score found by grid search is: 0.7744442376252124\nLight_lgb  0.7684999416488294 0.8073265561378663","68069696":"Best parameters found by grid search are: {'bagging_fraction': 0.5, 'feature_fraction': 0.4, 'lambda_l1': 12, 'lambda_l2': 1, 'num_leaves': 10}\nBest score found by grid search is: 0.7733672110939371\nLight_lgb  0.7587640313600854 0.8187380677355747","a261dd26":"\u041f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437, \u0434\u0430\u043b \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u0430\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438 \u043a\u0430\u043a \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441 \u0440\u043e\u043b\u044c\u044e, \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a Label, \u0437\u0430\u043c\u0435\u043d\u0438\u0432 \u0440\u043e\u0434\u0438 \u043d\u0430 \u0446\u0438\u0444\u0440\u044b \u043e\u0442 1 \u0434\u043e 4. \u0422\u043e\u0442 \u0436\u0435 \u0441\u0430\u043c\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0438 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u043d\u043d\u044b\u0445 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 'body_part', 'matchPeriod'  \u0438 \u0434\u0440\u0443\u0433\u0438\u0435.\n\n\n\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u044b\u043b\u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u043e\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b\u0445 \u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u044c\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0442\u0430\u043a \u043f\u0440\u0438\u044f\u0442\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043a \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0435. \u0412 \u0441\u0432\u044f\u0437\u0438 \u0441 \u044d\u0442\u0438\u043c, \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0431\u044b\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u043b\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435. ","7a47bb9e":"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c feature_importances, \u043a\u0430\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0431\u043e\u043b\u0435\u0435 \u0432\u0430\u0436\u043d\u044b \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u043a\u043b\u0430\u0434 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0442\u0430\u0440\u0433\u0435\u0442\u0430. \u041d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u0432\u043a\u043b\u0430\u0434 \u0432\u043d\u043e\u0441\u0438\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 distance and body_part","88fef32c":"0.7732341653840873\n(0.7663294178649621, 0.7893969907020592)\n\nBest score found by grid search is: 0.7739400870338475\n\n(0.7662190048714492, 0.7892914519555336)\n\n\n","54bf6c8b":"\u0421\u0442\u0440\u043e\u0438\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0438 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u0435\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e. \u041c\u043e\u0434\u0435\u043b\u044c - XG_Boost","98c73694":"\u0421\u0442\u043e\u0438\u0442\u044c \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 Age and weight \u0431\u044b\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043e\u0447\u0435\u043d\u044c \u043c\u0430\u043b\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0432\u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 (1 !!!!), \u0432\u0441\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0431\u044b\u043b\u0438 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u044b \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. ","64cf0c4c":"0.41681059297639617 TRAIN: 0.4290202799200229\n\n","ba6dd99e":"\u041f\u043e\u0434\u0431\u0438\u0440\u0430\u0435\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u0440\u0435\u0448-\u0445\u043e\u043b\u0434 \u0434\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","df994bbc":"\u041f\u043e\u0434\u0431\u0438\u0440\u0430\u0435\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u0440\u0435\u0448 \u0445\u043e\u043b\u0434","d4e01d86":"\u041f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u0442\u0430 \u0441\u0435\u0442\u0430"}}