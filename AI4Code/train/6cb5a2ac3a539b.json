{"cell_type":{"65bed45a":"code","79308b9c":"code","51847a8d":"code","dd6c0246":"code","f2b6cee7":"code","6db2580e":"code","4ce7e3eb":"code","aabdd348":"code","2eb55784":"code","71c89f00":"code","7e0baf55":"code","6d4073c5":"code","79b622f6":"code","271e158d":"code","5e7480f2":"code","47ba241f":"code","88dfa388":"code","da0fd76f":"code","da04789a":"code","ef7da4fa":"code","a2621cc6":"code","33faf8ea":"code","22e95580":"code","0578fe12":"markdown"},"source":{"65bed45a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","79308b9c":"human = pd.read_table('..\/input\/humandata\/human_data.txt')\nhuman.head()","51847a8d":"chimp = pd.read_table('..\/input\/chimp-data\/chimp_data.txt')\ndog = pd.read_table('..\/input\/dog-data\/dog_data.txt')\nchimp.head()\ndog.head()","dd6c0246":"def getKmers(sequence, size=6):\n    return [sequence[x:x+size].lower() for x in range(len(sequence) - size + 1)]","f2b6cee7":"human['words'] = human.apply(lambda x: getKmers(x['sequence']), axis=1)\nhuman = human.drop('sequence', axis=1)\nchimp['words'] = chimp.apply(lambda x: getKmers(x['sequence']), axis=1)\nchimp = chimp.drop('sequence', axis=1)\ndog['words'] = dog.apply(lambda x: getKmers(x['sequence']), axis=1)\ndog = dog.drop('sequence', axis=1)","6db2580e":"human.head()","4ce7e3eb":"human_texts = list(human['words'])\nfor item in range(len(human_texts)):\n    human_texts[item] = ' '.join(human_texts[item])\ny_h = human.iloc[:, 0].values","aabdd348":"human_texts[0]","2eb55784":"y_h","71c89f00":"chimp_texts = list(chimp['words'])\nfor item in range(len(chimp_texts)):\n    chimp_texts[item] = ' '.join(chimp_texts[item])\ny_c = chimp.iloc[:, 0].values                       \n\ndog_texts = list(dog['words'])\nfor item in range(len(dog_texts)):\n    dog_texts[item] = ' '.join(dog_texts[item])\ny_d = dog.iloc[:, 0].values                         ","7e0baf55":"# This is equivalent to k-mer counting\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(ngram_range=(4,4))\nX = cv.fit_transform(human_texts)\nX_chimp = cv.transform(chimp_texts)\nX_dog = cv.transform(dog_texts)","6d4073c5":"print(X.shape)\nprint(X_chimp.shape)\nprint(X_dog.shape)\n","79b622f6":"human['class'].value_counts().sort_index().plot.bar()","271e158d":"chimp['class'].value_counts().sort_index().plot.bar()","5e7480f2":"dog['class'].value_counts().sort_index().plot.bar()","47ba241f":"# Splitting the human dataset into the training set and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y_h, \n                                                    test_size = 0.20, \n                                                    random_state=42)","88dfa388":"print(X_train.shape)\nprint(X_test.shape)","da0fd76f":"### Multinomial Naive Bayes Classifier ###\n# The alpha parameter was determined by grid search previously\nfrom sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB(alpha=0.1)\nclassifier.fit(X_train, y_train)","da04789a":"y_pred = classifier.predict(X_test)","ef7da4fa":"from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\nprint(\"Confusion matrix\\n\")\nprint(pd.crosstab(pd.Series(y_test, name='Actual'), pd.Series(y_pred, name='Predicted')))\ndef get_metrics(y_test, y_predicted):\n    accuracy = accuracy_score(y_test, y_predicted)\n    precision = precision_score(y_test, y_predicted, average='weighted')\n    recall = recall_score(y_test, y_predicted, average='weighted')\n    f1 = f1_score(y_test, y_predicted, average='weighted')\n    return accuracy, precision, recall, f1\naccuracy, precision, recall, f1 = get_metrics(y_test, y_pred)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))","a2621cc6":"# Predicting the chimp, dog and worm sequences\ny_pred_chimp = classifier.predict(X_chimp)\ny_pred_dog = classifier.predict(X_dog)","33faf8ea":"# performance on chimp genes\nprint(\"Confusion matrix\\n\")\nprint(pd.crosstab(pd.Series(y_c, name='Actual'), pd.Series(y_pred_chimp, name='Predicted')))\naccuracy, precision, recall, f1 = get_metrics(y_c, y_pred_chimp)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))","22e95580":"# performance on dog genes\nprint(\"Confusion matrix\\n\")\nprint(pd.crosstab(pd.Series(y_d, name='Actual'), pd.Series(y_pred_dog, name='Predicted')))\naccuracy, precision, recall, f1 = get_metrics(y_d, y_pred_dog)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))","0578fe12":"**In this notebook, we will classify gene function based on DNA sequence**. "}}