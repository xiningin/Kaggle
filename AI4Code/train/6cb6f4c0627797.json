{"cell_type":{"e67a0b28":"code","502775ca":"code","901e89b2":"code","248d6984":"code","4528234e":"code","5a9b5a32":"code","11eaeb25":"code","90a7372c":"code","0d3ed60b":"code","92795a7d":"code","7fc9dac2":"code","597b918a":"code","0535a2ec":"code","dccec163":"code","c2fa24ab":"code","6efd9107":"code","481e8af5":"code","1ae378a2":"code","211dfc21":"code","d56f13a5":"code","a2301ca9":"code","e9023613":"code","e2098cda":"code","8e8219dc":"code","37115514":"code","243d70dd":"code","181b2f09":"code","d813c9c6":"code","76a353fd":"markdown","e1234125":"markdown","9a4f9cd7":"markdown","0fd3fb56":"markdown","2686501d":"markdown","49a0f7a0":"markdown","1c10fb37":"markdown","693d0ab6":"markdown"},"source":{"e67a0b28":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier #KNN\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix, f1_score, roc_curve, auc\nfrom sklearn.metrics import make_scorer, accuracy_score, roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression #LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier #RandomForest\nfrom sklearn.tree import DecisionTreeClassifier #DecisionTree\nfrom sklearn.naive_bayes import GaussianNB #Naive Bayes\nimport xgboost as xgb #XGBoost\n\nfrom sklearn import tree\nimport graphviz","502775ca":"test = pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/test.csv', delimiter=',')\ntest.head()","901e89b2":"sample_submission = pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/sample_submission.csv', delimiter=',')\nsample_submission.head()","248d6984":"train = pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/train.csv', delimiter=',')\ntrain.head()","4528234e":"test.info()","5a9b5a32":"test.describe()","11eaeb25":"train.info()","90a7372c":"train.describe()","0d3ed60b":"train.shape, test.shape, sample_submission.shape","92795a7d":"new_train = train.copy()\nnew_train = new_train.iloc[:,:2]\nnew_train_without_target = train.copy()\nnew_train_without_target.drop([\"ID_code\", \"target\"], inplace=True, axis=1)\nnew_train['var_mean'] = new_train_without_target.mean(axis=1)\nnew_train.head()","7fc9dac2":"colors = ['palegreen','salmon']\nplt.figure(figsize=(7,7))\nplt.pie(train[\"target\"].value_counts(), explode=(0, 0.25), labels= [\"0\", \"1\"], startangle=225, autopct='%1.1f%%', colors=colors)\nplt.axis('equal')\nplt.show()","597b918a":"sns.countplot(train['target'], palette='Set2')","0535a2ec":"f,ax=plt.subplots(1,2,figsize=(15,7))\nnew_train[new_train['target']==0].var_mean.plot.hist(ax=ax[0],bins=20,edgecolor='black',color='gray')\nax[0].set_title('target= 0')\nx1=list(range(3,12,1))\nax[0].set_xticks(x1)\nnew_train[new_train['target']==1].var_mean.plot.hist(ax=ax[1],color='purple',bins=20,edgecolor='black')\nax[1].set_title('target= 1')\nx2=list(range(3,12,1))\nax[1].set_xticks(x2)\nplt.show()","dccec163":"sns.distplot(new_train['var_mean'])","c2fa24ab":"X = train.iloc[:,2:]\ny = train.loc[:, train.columns == 'target']","6efd9107":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state = 1,stratify =y)","481e8af5":"logreg = LogisticRegression().fit(X_train, y_train)\ny_pred_logreg = logreg.predict(X_test)","1ae378a2":"print(\"Confusion matrix:\\n\", confusion_matrix(y_test,y_pred_logreg))\nprint(\"\\n\\nLogistic Regression model accuracy(in %): \", accuracy_score(y_test, y_pred_logreg)*100)\nprint(\"\\n\\nClassification report:\\n\", classification_report(y_test, y_pred_logreg))","211dfc21":"gnb = GaussianNB().fit(X_train, y_train)\ny_pred_gnb = gnb.predict(X_test)","d56f13a5":"print(\"Confusion matrix:\\n\", confusion_matrix(y_test,y_pred_gnb))\nprint(\"\\n\\nNaive Bayes model accuracy(in %): \", accuracy_score(y_test, y_pred_gnb)*100)\nprint(\"\\n\\nClassification report:\\n\", classification_report(y_test, y_pred_gnb))","a2301ca9":"tree_model = DecisionTreeClassifier(random_state=0, max_depth=5, min_samples_split=5).fit(X_train, y_train)\nfeatures = [c for c in train.columns if c not in ['ID_code', 'target']]\ntree_graph = tree.export_graphviz(tree_model, out_file=None, feature_names=features)\ngraphviz.Source(tree_graph)","e9023613":"y_pred_tree = tree_model.predict(X_test)","e2098cda":"print(\"Confusion matrix:\\n\", confusion_matrix(y_test,y_pred_tree))\nprint(\"\\n\\nDecision Tree model accuracy(in %): \", accuracy_score(y_test, y_pred_tree)*100)\nprint(\"\\n\\nClassification report:\\n\", classification_report(y_test, y_pred_tree))","8e8219dc":"rf = RandomForestClassifier(n_estimators=100,\n                                       bootstrap = True,\n                                       criterion='entropy').fit(X_train, y_train)\ny_pred_rf = rf.predict(X_test)\n","37115514":"print(\"Confusion matrix:\\n\", confusion_matrix(y_test,y_pred_rf))\nprint(\"\\n\\nRandom Forest model accuracy(in %): \", accuracy_score(y_test, y_pred_rf)*100)\nprint(\"\\n\\nClassification report:\\n\", classification_report(y_test, y_pred_rf))","243d70dd":"xgb_model = xgb.XGBClassifier().fit(X_train, y_train)\ny_pred_xgb = xgb_model.predict(X_test)","181b2f09":"print(\"Confusion matrix:\\n\", confusion_matrix(y_test,y_pred_xgb))\nprint(\"\\n\\nXGBoost model accuracy(in %): \", accuracy_score(y_test, y_pred_xgb)*100)\nprint(\"\\n\\nClassification report:\\n\", classification_report(y_test, y_pred_rf))","d813c9c6":"roc_auc_score(y_test, y_pred_logreg)","76a353fd":"# Decision Tree","e1234125":"# AUC ROC for Logistic Regression","9a4f9cd7":"# XGBoost","0fd3fb56":"# Naive Bayes","2686501d":"# Logistic Regression","49a0f7a0":"# Creating new dataframe with var means","1c10fb37":"<h3>Train Test Data<\/h3>","693d0ab6":"# Random Forest"}}