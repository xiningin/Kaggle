{"cell_type":{"0eea26df":"code","6982eb9c":"code","bfeab2ac":"code","ee1c82ca":"code","04620c4b":"code","df112753":"code","2d973c46":"code","a7b24bbf":"code","fe971bb1":"code","8ad68ae6":"code","c54ea3ac":"code","fe1a3fd7":"code","aeb4bd09":"code","fc700629":"code","2135bbea":"code","cacd9a3b":"code","807b04bb":"code","27ef34d6":"code","467e09ba":"code","cedbee4c":"code","814bd3b8":"code","547995a1":"code","e3455b56":"code","92641310":"code","22471521":"code","28814b63":"code","a372a6ad":"code","0907d78e":"code","a5737a57":"code","c4fb6572":"code","57fb01fc":"code","fe59fb22":"code","6d0edaab":"code","73be42cd":"markdown","bc8991a6":"markdown"},"source":{"0eea26df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6982eb9c":"import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score, cross_val_predict\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport pandas as pd\nfrom sklearn.metrics import  accuracy_score \nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.metrics import f1_score\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nimport sklearn.metrics as metrics\nfrom sklearn.ensemble import RandomForestClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV","bfeab2ac":"ad= pd.read_csv(\"..\/input\/turkiye-is-bankas-machine-learning-challenge-3\/train.csv\")\ndf= ad.copy()\ndf.head()","ee1c82ca":"me= pd.read_csv(\"..\/input\/turkiye-is-bankas-machine-learning-challenge-3\/monthly_expenditures.csv\")\nME= me.copy()\nME.head()","04620c4b":"ad= pd.read_csv(\"..\/input\/turkiye-is-bankas-machine-learning-challenge-3\/test.csv\")\ndf_test= ad.copy()\ndf_test.head()","df112753":"merged_inner_test = pd.merge(left=df_test, right=ME, left_on='musteri', right_on='musteri')\n\nmerged_inner_test.shape\nmerged_inner_test","2d973c46":"b= merged_inner_test.copy()\nb = b.fillna(b.mode().iloc[0])\nb=b.drop(['tarih_x'], axis=1)\nb\n","a7b24bbf":"merged_inner = pd.merge(left=df, right=ME, left_on='musteri', right_on='musteri')\nmerged_inner.shape\nmerged_inner","fe971bb1":"a= merged_inner.copy()\na = a.fillna(a.mode().iloc[0])\na=a.drop(['tarih_x'], axis=1)","8ad68ae6":"train_size = int(len(a) * 0.80)\ntrain_size","c54ea3ac":"test_size = len(a) - train_size\ntest_size","fe1a3fd7":"a = a[['musteri', 'yas', 'kidem_suresi', 'egitim', 'is_durumu', 'meslek_grubu',\n        'sektor', 'islem_adedi', 'aylik_toplam_tutar', 'tarih_y','target']]","aeb4bd09":"pd.set_option(\"max_rows\", 1560)\na.head()","fc700629":"b = b[['musteri', 'yas', 'kidem_suresi', 'egitim', 'is_durumu', 'meslek_grubu',\n        'sektor', 'islem_adedi', 'aylik_toplam_tutar', 'tarih_y']]\nb","2135bbea":"a[\"egitim\"] = a[\"egitim\"].astype('string')\na[\"musteri\"]= a[\"musteri\"].astype('string')\na[\"egitim\"]= a[\"egitim\"].astype('string')\na[\"is_durumu\"]= a[\"is_durumu\"].astype('string')\na[\"meslek_grubu\"]= a[\"meslek_grubu\"].astype('string')\na[\"sektor\"]= a[\"sektor\"].astype('string')","cacd9a3b":"encoder = LabelEncoder()\na[\"musteri\"] = encoder.fit_transform(a[\"musteri\"])\n\nencoder1 = LabelEncoder()\n\na[\"egitim\"] = encoder1.fit_transform(a[\"egitim\"])\n\n\nencoder2 = LabelEncoder()\na[\"is_durumu\"] = encoder2.fit_transform(a[\"is_durumu\"])\n\nencoder3 = LabelEncoder()\na[\"meslek_grubu\"] = encoder3.fit_transform(a[\"meslek_grubu\"])\n\nencoder4 = LabelEncoder()\na[\"sektor\"] = encoder4.fit_transform(a[\"sektor\"])","807b04bb":"a[\"egitim\"] = a[\"egitim\"].astype('category')\na[\"is_durumu\"]= a[\"is_durumu\"].astype('category')\na[\"meslek_grubu\"]= a[\"meslek_grubu\"].astype('category')\na[\"target\"]= a[\"target\"].astype('category')","27ef34d6":"b[\"egitim\"] = b[\"egitim\"].astype('string')\nb[\"musteri\"]= b[\"musteri\"].astype('string')\nb[\"egitim\"]= b[\"egitim\"].astype('string')\nb[\"is_durumu\"]= b[\"is_durumu\"].astype('string')\nb[\"meslek_grubu\"]= b[\"meslek_grubu\"].astype('string')\nb[\"sektor\"]= b[\"sektor\"].astype('string')","467e09ba":"encoder5 = LabelEncoder()\nb[\"musteri\"] = encoder5.fit_transform(b[\"musteri\"])\n\nencoder6 = LabelEncoder()\n\nb[\"egitim\"] = encoder6.fit_transform(b[\"egitim\"])\n\nencoder7 = LabelEncoder()\nb[\"is_durumu\"] = encoder7.fit_transform(b[\"is_durumu\"])\n\nencoder8 = LabelEncoder()\nb[\"meslek_grubu\"] = encoder8.fit_transform(b[\"meslek_grubu\"])\n\nencoder9 = LabelEncoder()\nb[\"sektor\"] = encoder9.fit_transform(b[\"sektor\"])","cedbee4c":"b[\"egitim\"] = b[\"egitim\"].astype('category')\nb[\"is_durumu\"]= b[\"is_durumu\"].astype('category')\nb[\"meslek_grubu\"]= b[\"meslek_grubu\"].astype('category')","814bd3b8":"X = a.iloc[:, :-1].values\ny = a.iloc[:, 10].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20,random_state = 42)","547995a1":"cart = DecisionTreeClassifier()\ncart_model = cart.fit(X_train,y_train)","e3455b56":"y_pred = cart_model.predict(X_test)\naccuracy_score(y_test,y_pred)","92641310":"probs = cart_model.predict_proba(X_test)\npreds = probs[:,1]\nfpr, tpr, threshold = metrics.roc_curve(y_test,y_pred)\ncart_roc_auc = metrics.auc(fpr,tpr)\n\nfpr, tpr, threshold = metrics.roc_curve(y_test,y_pred)","22471521":"plt.title('Reciever Opersting Characteristic')\nplt.plot(fpr, tpr,'b', label = 'AUC = %0.2f' % cart_roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0,1],[0,1],'r--')\nplt.xlim([0,1])\nplt.ylim([0,1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","28814b63":"cart_roc_auc","a372a6ad":"y_pred_test = cart_model.predict(b)","0907d78e":"y_pred_test","a5737a57":"dff = pd.DataFrame(y_pred_test, columns = ['Target'])\n\naaa=encoder5.inverse_transform(b.musteri.values) \n\nbb = pd.DataFrame(aaa, columns = ['Musteri'])\n\njoined=bb.join(dff)","c4fb6572":"joined = joined.groupby('Musteri').mean()","57fb01fc":"joined","fe59fb22":"joined.Target = [1 if each > 0.5 else 0 for each in joined.Target]","6d0edaab":"joined.to_csv('mycsvfile2.csv',index=True)","73be42cd":"# CART","bc8991a6":"# Model"}}