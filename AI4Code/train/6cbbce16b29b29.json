{"cell_type":{"6a80239d":"code","abee540a":"code","f3e9861b":"code","4691b6ff":"code","392456b5":"code","4b47b4f1":"code","fd02559e":"code","dcb5d638":"code","8a1f8ec5":"code","6ae47665":"code","bb5810d5":"code","74ddce47":"code","d43ab655":"code","049b9e36":"code","fce03636":"code","abdf8e37":"code","9ed1c2d5":"code","3b5750f4":"code","2692d33c":"code","80838df9":"code","9517b017":"code","242e83f7":"code","47389871":"code","63c97abe":"code","546d3a4a":"code","cf75fcac":"code","095b86e5":"code","82136062":"code","3f1368fd":"code","d62223da":"code","9546cc0d":"markdown","4e740559":"markdown"},"source":{"6a80239d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","abee540a":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt","f3e9861b":"plt.rcParams[\"figure.figsize\"] = (10,6) # define figure size of pyplot","4691b6ff":"pd.set_option(\"display.max_columns\", 100) # set max columns when displaying pandas DataFrame\npd.set_option(\"display.max_rows\", 200) # set max rows when displaying pandas DataFrame","392456b5":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","4b47b4f1":"df","fd02559e":"df.describe() # statistical description of DataFrame columns, numerical only","dcb5d638":"df.info() # get DataFrame general info","8a1f8ec5":"df.head() # get first 5 records of DataFrame","6ae47665":"df = df.iloc[:, 2:] # get columns from Pclass to Embarked","bb5810d5":"df.head()","74ddce47":"cols = [x.lower() for x in df.columns]\ndf.columns = cols","d43ab655":"df.head()","049b9e36":"df[df['age'].isnull()].tail() # get last 5 records of DataFrame","fce03636":"df[df['cabin'].isnull()].head()","abdf8e37":"null_age = df[df['age'].isnull()].copy()","9ed1c2d5":"null_age.groupby('sex')['name'].count().reset_index(name='total_passengers')","3b5750f4":"grouped_null_age = null_age.groupby('sex')['name'].count().reset_index(name='total_passengers')","2692d33c":"grouped_null_age.plot(kind='bar', x='sex');","80838df9":"df.plot(kind='box');","9517b017":"df['fare'].plot(kind='box');","242e83f7":"df.hist();","47389871":"df['age'].hist();","63c97abe":"male_filler_age = df[df['sex']=='male']['age'].median()\nfemale_filler_age = df[df['sex']=='female']['age'].median()","546d3a4a":"# using median of each gender to fill null values\ndf['age'] = np.where(df['age'].isnull(), np.where(df['sex'] == 'male', male_filler_age, female_filler_age), df['age'])","cf75fcac":"df[df['age'].isnull()] # there's no null values anymore","095b86e5":"group_embarked = df.groupby('embarked')['name'].count().reset_index(name='total_passengers')","82136062":"# see the distribution of passengers by place they embarked\ngroup_embarked.plot(kind='bar', x='embarked');","3f1368fd":"grouped_age = df.groupby('age')['name'].count().reset_index(name='total_passengers')","d62223da":"# see the distribution of passengers by age (similar to histogram)\ngrouped_age.plot(kind='line', x='age');","9546cc0d":"Dataset description:\n* Pclass: ticket class (1 = 1st, 2 = 2nd, 3 = 3rd)\n* Name: passengger's name\n* Sex: gender\n* Age: age in years\n* SibSp: # of siblings \/ spouse aboard the Titanic\n* Parch: # of parents \/ children aboard the Titanic\n* Ticket: ticket number \t\n* Fare: passenger fare \t\n* Cabin: cabin number \t\n* Embarked: port of embarkation (C = Cherbourg, Q = Queenstown, S = Southampton)","4e740559":"**Numpy where function:**<br>\n> np.where({condition}, {if meets condition}, {if doesn't meet condition})"}}