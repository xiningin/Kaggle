{"cell_type":{"8dab68f5":"code","a2bc7d35":"code","d1a323b6":"code","cb477636":"code","6133fe9c":"code","97a79fa5":"code","dd1e102c":"code","8258d97e":"code","1f549de1":"code","70b9120b":"code","3213e598":"code","0363dee3":"code","17cd1a28":"code","4f7cdf16":"code","7a4fe4e5":"code","60a3b5f3":"code","dd963d49":"code","b27d3d0d":"code","3ba3144a":"code","204ca273":"code","b06fa216":"code","b9d458ad":"code","28d06534":"code","fcbae8ca":"code","53d00941":"code","b5661f71":"code","47974a61":"code","9c5081f2":"code","f1f1990d":"markdown","50e4f6fa":"markdown","08fd4741":"markdown","f9d53060":"markdown","2a9907e1":"markdown","c9f5b6a5":"markdown","f1f43cf6":"markdown","e6a57714":"markdown","a0cf9a8f":"markdown","185d449c":"markdown","eca3fb03":"markdown","41fe4042":"markdown","cabdb672":"markdown","3e2abaa7":"markdown","f2839896":"markdown","5a2740e1":"markdown","8c02e991":"markdown","155eb798":"markdown","785a146a":"markdown","3728ff3c":"markdown","e37cae5f":"markdown"},"source":{"8dab68f5":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\n\n# plots\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a2bc7d35":"# load data and first glance\ndf_train = pd.read_csv('..\/input\/ranzcr-clip-catheter-line-classification\/train.csv')\ndf_train.head()","d1a323b6":"# dimensions of data frame\nn_rows = df_train.shape[0]\ndf_train.shape","cb477636":"# select target columns\ntargets = ['ETT - Abnormal', 'ETT - Borderline',\n           'ETT - Normal', 'NGT - Abnormal', 'NGT - Borderline',\n           'NGT - Incompletely Imaged', 'NGT - Normal', 'CVC - Abnormal',\n           'CVC - Borderline', 'CVC - Normal', 'Swan Ganz Catheter Present']\n\ntargets_ETT = ['ETT - Abnormal', 'ETT - Borderline', 'ETT - Normal']\n\ntargets_NGT = ['NGT - Abnormal', 'NGT - Borderline','NGT - Incompletely Imaged',\n               'NGT - Normal']\n\ntargets_CVC = ['CVC - Abnormal', 'CVC - Borderline', 'CVC - Normal']","6133fe9c":"# count entries per column\ncol_counts = df_train[targets].sum(axis=0)\n# and plot\ncol_counts.plot(kind='bar')\nplt.title('Absolute frequencies')\nplt.grid()\nplt.show()","97a79fa5":"# plot relative counts\n(col_counts \/ n_rows).plot(kind='bar')\nplt.title('Percentages')\nplt.grid()","dd1e102c":"# count\ndf_train['Sum_Indicators'] = df_train[targets].sum(axis=1)\nprint(df_train.Sum_Indicators.value_counts().sort_index())\n# and plot\ndf_train.Sum_Indicators.value_counts().sort_index().plot(kind='bar')\nplt.title('Multiplicities of indicators')\nplt.grid()\nplt.show()","8258d97e":"# let's check the most extreme cases (count=6)\ndf_train[df_train.Sum_Indicators==6]","1f549de1":"# we have also 24 rows without any \"1\":\ndf_train[df_train.Sum_Indicators==0]","70b9120b":"# correlation of columns\ncorr_pearson = df_train[targets].corr()\n# plot correlation matrix\nfig = plt.figure(figsize = (12,9))\nsns.heatmap(corr_pearson, annot=True, cmap='RdYlGn')\nplt.title('Pearson correlation')\nplt.show()","3213e598":"# look at ETT targets only\ndf_train['Sum_ETT'] = df_train[targets_ETT].sum(axis=1)\nprint(df_train.Sum_ETT.value_counts().sort_index())\n# and plot\ndf_train.Sum_ETT.value_counts().sort_index().plot(kind='bar')\nplt.title('Multiplicities of ETT indicators')\nplt.grid()\nplt.show()","0363dee3":"df_train['ETT'] = 'NONE'\ndf_train.loc[df_train['ETT - Abnormal']==1,'ETT'] = 'ETT_Abnormal'\ndf_train.loc[df_train['ETT - Borderline']==1,'ETT'] = 'ETT_Borderline'\ndf_train.loc[df_train['ETT - Normal']==1,'ETT'] = 'ETT_Normal'\n# evaluate frequencies\ndf_train.ETT.value_counts()\ndf_train.ETT.value_counts().plot(kind='bar')\nplt.title('Frequency of ETT Targets')\nplt.grid()\nplt.show()","17cd1a28":"# now look at NGT targets only\ndf_train['Sum_NGT'] = df_train[targets_NGT].sum(axis=1)\nprint(df_train.Sum_NGT.value_counts().sort_index())\n# and plot\ndf_train.Sum_NGT.value_counts().sort_index().plot(kind='bar')\nplt.title('Multiplicities of NGT indicators')\nplt.grid()\nplt.show()","4f7cdf16":"targets_TEMP = targets_NGT\nnn = len(targets_TEMP)\nfor i in range(1,nn+1):\n    for j in range(1,nn+1):\n       if (i<j):\n        f1 = targets_TEMP[i-1]\n        f2 = targets_TEMP[j-1]\n        print(pd.crosstab(df_train[f1], df_train[f2]))\n        print('\\n')","7a4fe4e5":"# use correlation matrix as container for the frequencies\ncond_NGT = df_train[targets_NGT].corr()\n\n# calc frequency of x given y for all pairs\nfor i in range(1,nn+1):\n    for j in range(1,nn+1):\n       if (i!=j):\n        f1 = targets_TEMP[i-1]\n        f2 = targets_TEMP[j-1]\n        ctab = pd.crosstab(df_train[f1], df_train[f2])\n        n_1 = df_train[f1].sum() # feature 1 = 1\n        n_both = ctab.iloc[1,1]  # both features = 1\n        perc_2_given_1 = n_both \/ n_1 # feature_2 = 1 given feature_1 = 1\n        print('Percentage ',f2,' given ',f1,':',np.round(perc_2_given_1,4))\n        cond_NGT.loc[f1,f2] = perc_2_given_1 # store value in correlation matrix","60a3b5f3":"# plot values as matrix\nsns.heatmap(cond_NGT, annot=True, cmap='RdYlGn')\nplt.title('Conditional Frequencies')\nplt.show()","dd963d49":"# look at CVC targets only\ndf_train['Sum_CVC'] = df_train[targets_CVC].sum(axis=1)\nprint(df_train.Sum_CVC.value_counts().sort_index())\n# and plot\ndf_train.Sum_CVC.value_counts().sort_index().plot(kind='bar')\nplt.title('Multiplicities of CVC indicators')\nplt.grid()\nplt.show()","b27d3d0d":"targets_TEMP = targets_CVC\nnn = len(targets_TEMP)\nfor i in range(1,nn+1):\n    for j in range(1,nn+1):\n       if (i<j):\n        f1 = targets_TEMP[i-1]\n        f2 = targets_TEMP[j-1]\n        print(pd.crosstab(df_train[f1], df_train[f2]))\n        print('\\n')","3ba3144a":"# use correlation matrix as container for the frequencies\ncond_CVC = df_train[targets_CVC].corr()\n\n# calc frequency of x given y for all pairs\nfor i in range(1,nn+1):\n    for j in range(1,nn+1):\n       if (i!=j):\n        f1 = targets_TEMP[i-1]\n        f2 = targets_TEMP[j-1]\n        ctab = pd.crosstab(df_train[f1], df_train[f2])\n        n_1 = df_train[f1].sum()\n        n_both = ctab.iloc[1,1] \n        perc_2_given_1 = n_both \/ n_1\n        print('Percentage ',f2,' given ',f1,':',np.round(perc_2_given_1,4))\n        cond_CVC.loc[f1,f2] = perc_2_given_1","204ca273":"# plot matrix of conditional frequencies\nsns.heatmap(cond_CVC, annot=True, cmap='RdYlGn')\nplt.title('Conditional Frequencies - CVC Targets')\nplt.show()","b06fa216":"# finally let's check the \"Swan Ganz Catheter Present\" target:\ndf_train['Swan Ganz Catheter Present'].value_counts()\ndf_train['Swan Ganz Catheter Present'].value_counts().plot(kind='bar')\nplt.title('Swan Ganz Catheter Present')\nplt.grid()\nplt.show()","b9d458ad":"# use correlation matrix as container for the frequencies\ncond_ALL = df_train[targets].corr()\n\ntargets_TEMP = targets\nnn = len(targets)\n\n# calc frequency of x given y for all pairs\nfor i in range(1,nn+1):\n    for j in range(1,nn+1):\n       if (i!=j):\n        f1 = targets_TEMP[i-1]\n        f2 = targets_TEMP[j-1]\n        ctab = pd.crosstab(df_train[f1], df_train[f2])\n        n_1 = df_train[f1].sum()\n        n_both = ctab.iloc[1,1] \n        perc_2_given_1 = n_both \/ n_1\n        # print('Percentage ',f2,' given ',f1,':',np.round(perc_2_given_1,4))\n        cond_ALL.loc[f1,f2] = perc_2_given_1\n        \n# plot matrix of conditional frequencies\nfig = plt.figure(figsize = (12,9))\nsns.heatmap(cond_ALL, annot=True, cmap='RdYlGn')\nplt.title('Conditional Frequencies - All Targets')\nplt.show()","28d06534":"pd.crosstab(df_train['ETT - Normal'], df_train['CVC - Normal'])","fcbae8ca":"freq_check_1 = 5302 \/ (5302+1938)\nprint(freq_check_1)","53d00941":"freq_check_2 = 5302 \/ (5302+16022)\nprint(freq_check_2)","b5661f71":"# \"flatten\" matrix to data frame\ncond_ALL_df = cond_ALL.stack().reset_index(name='cond_freq')\n# remove the trivial 1's to get a nicer plot\ncond_ALL_df = cond_ALL_df[cond_ALL_df.cond_freq < 1]\n# show structure\ncond_ALL_df.head()","47974a61":"# plot matrix in \"corrplot\"-style\n\ncolor_min, color_max = [0, 1] # range of values\nn_colors = 256\npalette = sns.mpl_palette('seismic', n_colors)\n\nsize_scale = 1000\n\n# translate values into color of palette\ndef value_to_color(val):\n    val_position = float((val - color_min)) \/ (color_max - color_min)\n    ind = int(val_position * (n_colors - 1))\n    return palette[ind]\n\nfig, ax = plt.subplots(figsize=(7,7))\n\nx = cond_ALL_df.level_1 # matrix columns\ny = cond_ALL_df.level_0 # matrix rows\nsize = cond_ALL_df.cond_freq\ncolor = cond_ALL_df.cond_freq\n\n# define mapping between labels and coordinates\nx_labels = y.unique() # intentionally using y here, we want the same (original) order on both axes!\ny_labels = y.unique()\n# reverse y_labels to get diagonal in NW to SE direction\ny_labels = y_labels[::-1]\nx_to_num = {p[1]:p[0] for p in enumerate(x_labels)} \ny_to_num = {p[1]:p[0] for p in enumerate(y_labels)} \n\n# finally the actual plotting\nax.scatter(\n    x=x.map(x_to_num),\n    y=y.map(y_to_num),\n    s=size * size_scale,\n    c=color.apply(value_to_color),\n    marker='o' # use circles as markers\n)\n\n# set labels, title, etc.\nax.set_xticks([x_to_num[v] for v in x_labels])\nax.set_xticklabels(x_labels, rotation=90)\nax.set_yticks([y_to_num[v] for v in y_labels])\nax.set_yticklabels(y_labels)\nax.set(xlabel=\"\", ylabel=\"\", aspect='equal')\nplt.title('Conditional Frequencies - All Targets')\nplt.show()","9c5081f2":"# show top 10 \"dependencies\"\ncond_ALL_df.sort_values('cond_freq', ascending=False)[0:10]","f1f1990d":"# Swan Ganz Catheter","50e4f6fa":"#### Different visualization (R corrplot style):","08fd4741":"#### Nothing really interesting here, just a very unbalanced target.","f9d53060":"#### Pearson correlation is not a really good tool for binary variables, nevertheless let's use it to get a first impression. At the end of this notebook you will find a better (asymmetric) alternative.","2a9907e1":"### The indicators are not unique in each row (see e. g. the second row). Let's evaluate the multiplicities:","c9f5b6a5":"#### Example:\n* Conditional frequency for CVC-Normal given ETT-Normal is 0.73.\n* Conditional frequency for ETT-Normal given CVC-Normal is 0.25. \n\nLet's check that:","f1f43cf6":"#### Indicators of NGT targets are NOT mutually exclusive (however, we have \"only\" 45 rows with double entries). This is actually multi-label not multi-class...\n#### Let's check the cross tables to identify common occurrences:","e6a57714":"# Evaluation of the dependencies between the binary targets.","a0cf9a8f":"#### We see that there are many (2607) common occurrences of \"Normal\" and \"Borderline\".\n\n#### Let's evaluate the conditional frequencies (e. g. CVC Normal=1 given CVC Borderline=1) again.","185d449c":"# Correlation of columns","eca3fb03":"#### Indicators of CVC targets are also NOT mutually exclusive. Here we have quite a few duplicates and even 71 \"triples\".\n#### Let's check the cross tables again:","41fe4042":"The following code for plotting is based on this kernel: https:\/\/www.kaggle.com\/drazen\/heatmap-with-sized-markers.\nMany thanks to the author!","cabdb672":"#### Interesting: In 9 cases we have \"Normal\" and \"Abnormal\" at the same time... No contradiction, we can have more than one object within one image!\n\n#### Let's evaluate the conditional frequencies (e. g. NGT-Normal=1 given NGT-Borderline=1 and vice versa) systematically.","3e2abaa7":"# ETT Targets (endotracheal tube)","f2839896":"#### Indicators of ETT targets are actually mutually exclusive. So we could in theory convert the ETT columns into only one (multi-class) column:","5a2740e1":"#### We can observe some connections between ETT and NGT as well as something happening withing the CVC \"block\".","8c02e991":"# NGT Targets (nasogastric tube)","155eb798":"#### Example how to read this:\n* Relative Frequency of Borderline=1 given Normal=1 can be looked up in \"Normal\"-row: 0.0027.\n* Relative Frequency of Normal=1 given Borderline=1 can be looked up in \"Borderline\"-row: 0.025.","785a146a":"# CVC Targets (central venous catheter)","3728ff3c":"# Finally let's apply the conditional frequency approach to all the targets","e37cae5f":"### This is the alternative to the correlation matrix promised at the beginning:"}}