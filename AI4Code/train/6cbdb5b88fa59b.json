{"cell_type":{"38b6052f":"code","13b2a8e6":"code","d922a97a":"code","7b544efe":"code","de9c03a3":"code","e4644bde":"code","d8696007":"code","bf80b892":"code","d3cebc9b":"code","143c126b":"code","75ebb067":"code","d47630b0":"code","10233bd8":"code","1ffd8a4f":"code","617ab33e":"code","112ce6b7":"code","c3f877b4":"code","a59b6a02":"code","aca18be5":"code","e0fe95c5":"code","e7d1c6dd":"code","b58f7719":"code","4f456345":"code","5a0c1c74":"code","1f5d3b63":"code","4b63a2fa":"markdown","dae5d9e9":"markdown"},"source":{"38b6052f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","13b2a8e6":"df = pd.read_csv('..\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv')\ndf.head()","d922a97a":"df.info()","7b544efe":"df.dropna(subset=['description'], inplace=True)","de9c03a3":"df.info()","e4644bde":"sentences = df['description']\nlabels = df['fraudulent']","d8696007":"sentences","bf80b892":"labels","d3cebc9b":"labels.value_counts().plot(kind='bar', title='Value Counts - Fraudulent')","143c126b":"import tensorflow as tf\n\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.callbacks import EarlyStopping","75ebb067":"vocab_size = 3000\nembedding_dim = 16\nmax_length = 150\ntrunc_type = 'post'\npadding_type = 'post'\noov_tok = '<OOV>'\ntraining_size = 11000","d47630b0":"training_sentences = sentences[0:training_size]\ntesting_sentences = sentences[training_size:]\ntraining_labels = labels[0:training_size]\ntesting_labels = labels[training_size:]","10233bd8":"print(len(testing_sentences))","1ffd8a4f":"training_sentences","617ab33e":"tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok)\ntokenizer.fit_on_texts(training_sentences)\n\nword_index = tokenizer.word_index","112ce6b7":"#print(word_index)","c3f877b4":"training_sequences = tokenizer.texts_to_sequences(training_sentences)\ntraining_padded = pad_sequences(training_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n\ntesting_sequences = tokenizer.texts_to_sequences(testing_sentences)\ntesting_padded = pad_sequences(testing_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)","a59b6a02":"print(training_sentences[0])\nprint(training_sequences[0])","aca18be5":"training_padded[0]","e0fe95c5":"model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim,\n                             input_length=max_length),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy', optimizer=tf.keras.optimizers.Adam(),\n             metrics=['accuracy'])","e7d1c6dd":"model.summary()","b58f7719":"early_stop = EarlyStopping(monitor='val_accuracy', min_delta=0.01, patience=1)","4f456345":"history = model.fit(training_padded, training_labels, epochs=30, \n                   validation_data=(testing_padded, testing_labels), callbacks=early_stop, verbose=2)","5a0c1c74":"accuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']","1f5d3b63":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 5))\nplt.plot(accuracy, label='accuracy')\nplt.plot(val_accuracy, label='val_accuracy')\nplt.plot(loss, label='loss')\nplt.plot(val_loss, label='val_loss')\nplt.grid(True)\nplt.legend()\nplt.show()","4b63a2fa":"* Not fraudulent = 0\n* Fraudulent = 1","dae5d9e9":"**TensorFlow**"}}