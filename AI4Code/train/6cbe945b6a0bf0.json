{"cell_type":{"d2e25fa6":"code","efc0183d":"code","d1f05842":"code","d1358ab8":"code","3a0f9972":"code","fa495d2b":"code","68875f9a":"code","71c33a4f":"code","2a54e0b7":"code","e31f5d27":"code","6e0987b9":"code","3ec7d9f2":"code","29c8a557":"code","e6f1a55f":"code","4ea8bf94":"code","f3f00a91":"markdown","e9fe6f65":"markdown","87b4724e":"markdown","d575a8d1":"markdown","3931d6fe":"markdown","93ad9358":"markdown","1a9bb2f5":"markdown","cd59de40":"markdown","b6b09a45":"markdown","4a657ea6":"markdown","98e1672a":"markdown","0cba4484":"markdown"},"source":{"d2e25fa6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","efc0183d":"spam_data = pd.read_csv('\/kaggle\/input\/textdata\/spam.csv')\nspam_data['target'] = np.where(spam_data['target']=='spam',1,0)\nspam_data.head()","d1f05842":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(spam_data['text'],\n                                                spam_data['target'],\n                                                random_state=0)","d1358ab8":"len(spam_data[spam_data['target']==1])\/len(spam_data['target'])*100","3a0f9972":"from sklearn.feature_extraction.text import CountVectorizer\nvocab = CountVectorizer()    \nvocab = vocab.fit(X_train).vocabulary_\n    \n#we want only the keys i.e. words.\nvocab = [words for words in vocab.keys()]\n    \n#store the length in the seperate list.\nlen_vocab = [len(words) for words in vocab]\n    \n#use the index of the longest token.\nvocab[np.argmax(len_vocab)]","fa495d2b":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import roc_auc_score\n\ncv = CountVectorizer().fit(X_train)\n    \n# Transform both X_train and X_test with the same CV object:\nX_train_cv = cv.transform(X_train)\nX_test_cv = cv.transform(X_test)\n    \n# Classifier for prediction:\nclf = MultinomialNB(alpha=0.1)\nclf.fit(X_train_cv, y_train)\npreds_test = clf.predict(X_test_cv)\n    \nroc_auc_score(y_test, preds_test)","68875f9a":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ntfidf = TfidfVectorizer().fit(X_train)\nfeature_names = np.array(tfidf.get_feature_names())\n    \nX_train_tf = tfidf.transform(X_train)\n    \nmax_tf_idfs = X_train_tf.max(0).toarray()[0] # Get largest tfidf values across all documents.\nsorted_tf_idxs = max_tf_idfs.argsort() # Sorted indices\nsorted_tf_idfs = max_tf_idfs[sorted_tf_idxs] # Sorted TFIDF values\n    \n# feature_names doesn't need to be sorted! You just access it with a list of sorted indices!\nsmallest_tf_idfs = pd.Series(sorted_tf_idfs[:20], index=feature_names[sorted_tf_idxs[:20]])                    \nlargest_tf_idfs = pd.Series(sorted_tf_idfs[-20:][::-1], index=feature_names[sorted_tf_idxs[-20:][::-1]])\n    \n(smallest_tf_idfs, largest_tf_idfs)","71c33a4f":"tf = TfidfVectorizer(min_df=3).fit(X_train)\nX_train_tf = tf.transform(X_train)\nX_test_tf = tf.transform(X_test)\nclf = MultinomialNB(alpha=0.1)\nclf.fit(X_train_tf, y_train)\npred = clf.predict(X_test_tf)\nroc_auc_score(y_test, pred)","2a54e0b7":"len_spam = [len(x) for x in spam_data.loc[spam_data['target']==1, 'text']]\nlen_not_spam = [len(x) for x in spam_data.loc[spam_data['target']==0, 'text']]\n(np.mean(len_not_spam), np.mean(len_spam))","e31f5d27":"from scipy.sparse import csr_matrix, hstack\ndef add_feature(X,feature_to_add):\n    return hstack([X, csr_matrix(feature_to_add).T], 'csr')","6e0987b9":"from sklearn.svm import SVC\n\nlen_train = [len(x) for x in X_train]\nlen_test = [len(x) for x in X_test]\n    \ntf = TfidfVectorizer(min_df=5).fit(X_train)\nX_train_tf = tf.transform(X_train)\nX_test_tf = tf.transform(X_test)\n    \nX_train_tf = add_feature(X_train_tf, len_train)\nX_test_tf = add_feature(X_test_tf, len_test)\n    \nclf = SVC(C=10000)\nclf.fit(X_train_tf, y_train)\npred = clf.predict(X_test_tf)\n    \nroc_auc_score(y_test, pred)","3ec7d9f2":"dig_spam = [sum(char.isnumeric() for char in x) for x in spam_data.loc[spam_data['target']==1,'text']]\ndig_not_spam = [sum(char.isnumeric() for char in x) for x in spam_data.loc[spam_data['target']==0,'text']]\n(np.mean(dig_not_spam), np.mean(dig_spam))","29c8a557":"from sklearn.linear_model import LogisticRegression\n\ndig_train = [sum(char.isnumeric() for char in x) for x in X_train]\ndig_test = [sum(char.isnumeric() for char in x) for x in X_test]\n    \ntf = TfidfVectorizer(min_df = 5, ngram_range = (1,3)).fit(X_train)\nX_train_tf = tf.transform(X_train)\nX_test_tf = tf.transform(X_test)\n    \nX_train_tf = add_feature(X_train_tf, dig_train)\nX_test_tf = add_feature(X_test_tf, dig_test)\n    \nclf = LogisticRegression(C=100).fit(X_train_tf, y_train)\npred = clf.predict(X_test_tf)\n    \nroc_auc_score(y_test, pred)","e6f1a55f":"(np.mean(spam_data.loc[spam_data['target']==0,'text'].str.count('\\W')), \nnp.mean(spam_data.loc[spam_data['target']==1,'text'].str.count('\\W')))","4ea8bf94":"len_train = [len(x) for x in X_train]\nlen_test = [len(x) for x in X_test]\ndig_train = [sum(char.isnumeric() for char in x) for x in X_train]\ndig_test = [sum(char.isnumeric() for char in x) for x in X_test]\n    \n# Not alpha numeric:\nnan_train = X_train.str.count('\\W')\nnan_test = X_test.str.count('\\W')\n    \ncv = CountVectorizer(min_df = 5, ngram_range=(2,5), analyzer='char_wb').fit(X_train)\nX_train_cv = cv.transform(X_train)\nX_test_cv = cv.transform(X_test)\n    \nX_train_cv = add_feature(X_train_cv, [len_train, dig_train, nan_train])\nX_test_cv = add_feature(X_test_cv, [len_test, dig_test, nan_test])\n    \nclf = LogisticRegression(C=100).fit(X_train_cv, y_train)\npred = clf.predict(X_test_cv)\n    \nscore = roc_auc_score(y_test, pred)\n    \nfeature_names = np.array(cv.get_feature_names() + ['length_of_doc', 'digit_count', 'non_word_char_count'])\nsorted_coef_index = clf.coef_[0].argsort()\nsmall_coeffs = list(feature_names[sorted_coef_index[:10]])\nlarge_coeffs = list(feature_names[sorted_coef_index[:-11:-1]])\n    \n(score, small_coeffs, large_coeffs)","f3f00a91":"Percentage of document that are spam","e9fe6f65":"The average number of non-word characters (anything other than a letter, digit or underscore) per document for not spam and spam documents","87b4724e":"The average number of digits per document for not spam and spam documents.","d575a8d1":"Fit and transform the training data X_train using a Count Vectorizer ignoring terms that have a document frequency strictly lower than 5 and using character n-grams from n=2 to n=5.\n\nTo tell Count Vectorizer to use character n-grams pass in analyzer='char_wb' which creates character n-grams only from text inside word boundaries. This should make the model more robust to spelling mistakes.\n\nUsing this document-term matrix and the following additional features:\n\nthe length of document (number of characters)\nnumber of digits per document\nnumber of non-word characters (anything other than a letter, digit or underscore.)\nfit a Logistic Regression model with regularization C=100. Then compute the area under the curve (AUC) score using the transformed test data.\n\nAlso find the 10 smallest and 10 largest coefficients from the model and return them along with the AUC score in a tuple.\n\nThe list of 10 smallest coefficients should be sorted smallest first, the list of 10 largest coefficients should be sorted largest first.\n\nThe three features that were added to the document term matrix should have the following names should they appear in the list of coefficients: ['length_of_doc', 'digit_count', 'non_word_char_count']","3931d6fe":"Fiting the training data X_train using a Count Vectorizer","93ad9358":"Fitting a multinomial Naive Bayes classifier model with smoothing alpha=0.1","1a9bb2f5":"Combine new features into the training data:","cd59de40":"Fitting and transforming the training data X_train using a Tfidf Vectorizer ignoring terms that have a document frequency strictly lower than 3.\n\nThen fitting a multinomial Naive Bayes classifier model with smoothing alpha=0.1 and compute the area under the curve (AUC) score using the transformed test data.","b6b09a45":"Fitting and transforming the training data X_train using a Tfidf Vectorizer ignoring terms that have a document frequency strictly lower than 5.\n\nUsing this document-term matrix and an additional feature, the length of document (number of characters), fitting a Support Vector Classification model with regularization C=10000. Then computing the area under the curve (AUC) score using the transformed test data.","4a657ea6":"Fitting and transforming the training data X_train using a Tfidf Vectorizer with default parameters.","98e1672a":"The average length of documents (number of characters) for not spam and spam documents","0cba4484":"Fitting and transformig the training data X_train using a Tfidf Vectorizer ignoring terms that have a document frequency strictly lower than 5 and using word n-grams from n=1 to n=3 (unigrams, bigrams, and trigrams).\n\nUsing this document-term matrix and the following additional features:\n\nthe length of document (number of characters)\nnumber of digits per document\nfit a Logistic Regression model with regularization C=100. Then compute the area under the curve (AUC) score using the transformed test data."}}