{"cell_type":{"c1584930":"code","8d85c648":"code","ac5318a7":"code","557b62e3":"code","0bf375e6":"code","50e19ba3":"code","a2056519":"code","689ba084":"code","f623c72c":"code","715a0bf3":"code","11dcb301":"code","381b46d4":"code","2956eaf8":"code","0fd1d585":"code","2abe64f6":"code","710d2954":"code","f9ffb856":"code","b9778f8b":"code","d976db0f":"code","ce56cb76":"markdown","6efec24d":"markdown","a6422cad":"markdown","db556042":"markdown","0c53ca67":"markdown","62e44406":"markdown","a0d8b7d4":"markdown","3f0086fe":"markdown","cc83f710":"markdown"},"source":{"c1584930":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d85c648":"train = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\nprint(\"Data imported\")","ac5318a7":"df = {'train':train, 'test':test}\n\nfor d in df.values():\n    d.loc[d['Cabin'].isnull(), 'Cabin'] = 'W'\n    d['Cabin_initial'] = d['Cabin'].apply(lambda x : x[0])\n    d.drop(['Cabin','Name','Ticket','PassengerId'], axis = 1, inplace = True)\n    ","557b62e3":"categorical_colums = ['Embarked']\nnumeric_columns = ['Age','Fare']","0bf375e6":"numeric_transformer = SimpleImputer(missing_values=np.nan, strategy='mean')\ncategorical_transformer = SimpleImputer(missing_values= np.nan, strategy = 'most_frequent')","50e19ba3":"preprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_columns),\n        ('cat', categorical_transformer, categorical_colums)],remainder = 'passthrough')","a2056519":"train_transformed = pd.DataFrame(data = preprocessor.fit_transform(train), columns = ['Age','Fare','Embarked','Survived','Pclass','Sex','SibSp','Parch','Cabin_initial'])\ntest_transformed = pd.DataFrame(data = preprocessor.fit_transform(test), columns = ['Age','Fare','Embarked','Pclass','Sex','SibSp','Parch','Cabin_initial'])","689ba084":"df_transformed = [train_transformed,test_transformed]","f623c72c":"for d in df_transformed:\n    d['SibSp+Parch'] = d['SibSp']+d['Parch']","715a0bf3":"age_bins = [0,10,20,30,50,60,70,90]\nage_labels = ['0 to 10','11 to 20','21 to 30','31 to 40','41 to 50','51 to 60','61 to 90']\nfare_bins = [0,2,4,6,10,12,15,20,26,30,38,70,100,200,300,500,800]\nfare_labels = ['0 to 2','3 to 4','5 to 6','7 to 10','11 to 12','13 to 15','16 to 20','21 to 26','27 to 30','31 to 38','39 to 70','71 to 100','101 to 200','201 to 300','301 to 500','501 to 800']\nSip_parch_bins = [0,1,3,5,10,20]\nSip_parch_labels = ['0 to 1','1 to 3', '3 to 5','5 to 10','10 to 20']","11dcb301":"for d in df_transformed:\n    d['Age_binned'] = pd.cut(d['Age'], bins = age_bins, labels = age_labels, right = True)\n    d.drop(columns = 'Age',axis =1, inplace = True)\n    d['Fare_binned'] = pd.cut(d['Fare'], bins = fare_bins, labels = fare_labels , right = True)\n    d.drop('Fare', axis = 1, inplace = True)\n    d['SibSp+Parch_binned'] = pd.cut(d['SibSp+Parch'], bins = Sip_parch_bins, labels = Sip_parch_labels , right = False)\n    d.drop('SibSp+Parch', axis = 1, inplace = True)","381b46d4":"ohe = OneHotEncoder()\ncat_vars = ['Sex', 'Cabin_initial','Embarked','Age_binned','Fare_binned','SibSp+Parch_binned']\ncol_transformer = ColumnTransformer(transformers = [('cat',ohe,cat_vars)],remainder = 'passthrough')\nrfc = RandomForestClassifier(n_estimators = 150)","2956eaf8":"y = train_transformed['Survived'].astype('int')\nX = train_transformed[[col for col in train_transformed.columns if col not in 'Survived']]\nX_train, X_test, y_train, y_test = train_test_split(X,y)","0fd1d585":"pipe = Pipeline([('col_trasf', col_transformer),('rfc',rfc)])","2abe64f6":"pipe.fit(X_train, y_train)","710d2954":"pipe.score(X_test, y_test)","f9ffb856":"prediction = pipe.predict(test_transformed)","b9778f8b":"test = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')","d976db0f":"submission=pd.DataFrame({'PassengerId':test['PassengerId'],\n                        'Survived':prediction})\nsubmission.to_csv('my_submissions.csv',index=False)","ce56cb76":"### Features engineering","6efec24d":"### Dealing with missing values","a6422cad":"# Titanic predictions with Pipelines","db556042":"Cabin both for train and test dataset is a variable with a lot of missing values. We could drop the variable but the missing value itself coul be a valuable information so we can create a new value for cabin (W in this case) just as an indication that value is missing. \nName and PassengerId are variables that can be dropped.","0c53ca67":"#### Predictions submitting","62e44406":"All of the others variables can be imputed. We can use colums transformer to impute in a different ways categorical and numerical features.","a0d8b7d4":"## RandomForestClassifier","3f0086fe":"A useful thing to do is to divide Fare, Age and  Sip_parch in bins. ","cc83f710":"The aim of this notebook is to develop a simple model for Titanic classification using Pipelines."}}