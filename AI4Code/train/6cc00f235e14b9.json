{"cell_type":{"cb441384":"code","b4bcb846":"code","d1b18fa8":"code","4387a623":"code","2da6429a":"code","16cbc358":"code","4bc89c3d":"code","4de3f568":"code","786efb7b":"code","11578ef4":"code","768f73e9":"code","b4011037":"code","6b1d3e34":"code","32586820":"code","820e1a6a":"code","ba5ad101":"code","58ef5dbf":"code","fb62278e":"code","734aed59":"code","4a45fee0":"code","257c2f5b":"code","9e6e53d6":"code","a4dd0e62":"code","d9f8e9ab":"code","07b0103f":"code","634049a9":"code","c60ca806":"code","c92f3f87":"code","d05cff7b":"code","5fa41d51":"code","09c5a9f8":"code","272c2771":"code","b6fde3a8":"code","c7dd5e83":"code","1bedf930":"code","6e4d6fc2":"code","e0d38413":"code","aaa3cfe1":"code","5e0f780f":"code","1d3cbe6b":"code","68305959":"code","293beef1":"code","b7ff7ff7":"code","27a68431":"code","5312d59f":"markdown","6017daff":"markdown","991ea0dd":"markdown","6d6b0f71":"markdown","dfecfc14":"markdown","f15e1160":"markdown","c06c670f":"markdown","67170d63":"markdown","81a679b9":"markdown","8d35587d":"markdown","072a396d":"markdown","12787c79":"markdown","6e93bcaf":"markdown","a782b276":"markdown","97403ce7":"markdown","169ffed5":"markdown"},"source":{"cb441384":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b4bcb846":"per_poverty = pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv\",encoding = \"windows-1252\")\nrace_city = pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv\",encoding = \"windows-1252\")\nmedian_income = pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv\",encoding = \"windows-1252\")\nper_25_highschool = pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv\",encoding = \"windows-1252\")\npolice_killings_us = pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv\",encoding = \"windows-1252\")\n# we need to encode as \"encoding = \"windows-1252\" for this error: UnicodeDecodeError: 'utf-8' codec can't decode byte 0x88 in position 8: invalid start byte","d1b18fa8":"per_poverty.info()\n# per_poverty dataframe has a 3 features;  Geographic Area, City and Poverty Rate.","4387a623":"# showing first 5 rows\nper_poverty.head()","2da6429a":"# The \"unique()\" function is used to find the unique elements of an array.\nper_poverty[\"Geographic Area\"].unique()\n# Geographic Area's keys abbreviated name of US's states for example;\n# AL : Alabama, AK: Alaska, AZ: Arizona, AR: Arkansas, CA: California...","16cbc358":"per_poverty.poverty_rate = per_poverty.poverty_rate.replace(\"-\",\"0.0\")\nper_poverty.poverty_rate = per_poverty.poverty_rate.astype(float)\narea_list = list(per_poverty[\"Geographic Area\"].unique())\narea_poverty_ratio = []\nfor i in area_list:\n    x = per_poverty[per_poverty[\"Geographic Area\"]==i]\n    area_poverty_rate = sum(x.poverty_rate)\/len(x)\n    area_poverty_ratio.append(area_poverty_rate)\ndf = pd.DataFrame({\"area_list\":area_list,\"area_poverty_ratio\":area_poverty_ratio})\nnew_index = (df[\"area_poverty_ratio\"].sort_values(ascending=False)).index.values\nsorted_data = df.reindex(new_index)\n","4bc89c3d":"plt.figure(figsize= (15,10))\nsns.barplot(x= sorted_data[\"area_list\"], y = sorted_data[\"area_poverty_ratio\"],palette = sns.cubehelix_palette(len(x),reverse = True))\nplt.show()","4de3f568":"per_25_highschool.head()","786efb7b":"per_25_highschool.percent_completed_hs = per_25_highschool.percent_completed_hs.replace(\"-\",\"0.0\")\nper_25_highschool.percent_completed_hs = per_25_highschool.percent_completed_hs.astype(float)\narea_list_2 = list(per_25_highschool[\"Geographic Area\"].unique())\ncompleted_level = []\nfor i in area_list_2:\n    x = per_25_highschool[per_25_highschool[\"Geographic Area\"]==i]\n    complete_ratio = sum(x.percent_completed_hs)\/len(x)\n    completed_level.append(complete_ratio)\ndf_2 = pd.DataFrame({\"Area List\":area_list_2,\"Complete Ratio\":completed_level})\nnew_index = (df_2[\"Complete Ratio\"].sort_values(ascending=True)).index.values\nsorted_df = df_2.reindex(new_index)\n\nplt.figure(figsize= (15,10))\nsns.barplot(x = sorted_df[\"Area List\"], y = sorted_df[\"Complete Ratio\"])\nplt.title(\"Percent Over 25 Completed HighSchool\")\nplt.xlabel(\"States\")\nplt.show()","11578ef4":"police_killings_us.head()\n","768f73e9":"from collections import Counter\n\nseparate = police_killings_us.name[police_killings_us.name != \"TK TK\"].str.split()\na,b = zip(*separate)\nname_list = a\nname_count = Counter(name_list)\nmost_common_names = name_count.most_common(15)\nx,y = zip(*most_common_names)\nx,y = list(x), list(y)\nplt.figure(figsize= (15,10))\nsns.barplot(x= x, y = y, palette= \"rocket\")\nplt.title(\"Most names used in people killed\")\nplt.xlabel(\"Names\")\nplt.ylabel(\"Frequency\")\nplt.show()","b4011037":"surname_list = b\nsurname_count = Counter(surname_list)\nmost_common_surname = surname_count.most_common(15)\nx,y = zip(*most_common_surname)\nx,y = list(x),list(y)\nplt.figure(figsize= (15,10))\nsns.barplot(x = x, y = y, palette = sns.cubehelix_palette(len(x), reverse = True))\nplt.title(\"Most surnames used in people killed\")\nplt.xlabel(\"Surnames\")\nplt.ylabel(\"Frequency\")\nplt.show()","6b1d3e34":"race_city.info()","32586820":"# Percentage of state's population according to races that are black,white,native american, asian and hispanic\nrace_city.replace([\"-\"],0.0,inplace = True)\nrace_city.replace([\"(X)\"],0.0, inplace = True)\nrace_city.loc[:,[\"share_white\",\"share_black\",\"share_native_american\",\"share_asian\",\"share_hispanic\"]] = race_city.loc[:,[\"share_white\",\"share_black\",\"share_native_american\",\"share_asian\",\"share_hispanic\"]].astype(float)\narea_list = list(race_city[\"Geographic area\"].unique())\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nfor i in area_list:\n    x = race_city[race_city[\"Geographic area\"] == i]\n    share_white.append(sum(x.share_white)\/len(x))\n    share_black.append(sum(x.share_black)\/len(x))\n    share_native_american.append(sum(x.share_native_american)\/len(x))\n    share_asian.append(sum(x.share_asian)\/len(x))\n    share_hispanic.append(sum(x.share_hispanic)\/len(x))\n    \n# Visualization:\nf,ax =  plt.subplots(figsize = (12,15))\nsns.barplot(x = share_white,y = area_list, color = \"green\",alpha = 0.5, label=\"White American\")\nsns.barplot(x = share_black, y = area_list, color = \"blue\", alpha = 0.7, label = \"African American\" )\nsns.barplot(x = share_native_american, y = area_list, color = \"red\",alpha = 0.6, label = \"Native American\")\nsns.barplot(x = share_asian, y = area_list, color = \"yellow\", alpha = 0.6, label = \"Asian\")\nsns.barplot(x = share_hispanic, y = area_list, color = \"cyan\", alpha = 0.6, label = \"Hispanic\")\nax.legend(loc = \"upper right\", frameon = True) # legends visibility\nax.set(xlabel = \"Percentage of Races\", ylabel = \"States\", title = \"Percentage of State's Population According to Races\")\nplt.show()\n\n    \n    \n    \n    ","820e1a6a":"# datas to normalize\nsorted_data[\"area_poverty_ratio\"] = sorted_data[\"area_poverty_ratio\"]\/max(sorted_data[\"area_poverty_ratio\"])\nsorted_df[\"Complete Ratio\"] = sorted_df[\"Complete Ratio\"]\/max(sorted_df[\"Complete Ratio\"])\ndata = pd.concat([sorted_data,sorted_df[\"Complete Ratio\"]], axis = 1)\ndata.sort_values(\"area_poverty_ratio\",inplace = True)\n\n# Visualize \nf,ax1 = plt.subplots(figsize = (20,10))\nsns.pointplot(x = \"area_list\", y = \"area_poverty_ratio\", data = data, color = \"red\", alpha = 0.8)\nsns.pointplot(x = \"area_list\", y = \"Complete Ratio\", data = data , color = \"lime\", alpha = 0.8)\nplt.text(40,0.6,\"Poverty Rate\",color = \"red\", fontsize = 17, style = \"italic\")\nplt.text(37,0.55, \"High school Complete Ratio\", color = \"lime\", fontsize = 17, style = \"italic\")\nplt.xlabel(\"States\", fontsize = 15, color = \"black\")\nplt.ylabel(\"Ratio\", fontsize = 15, color = \"black\")\nplt.title(\"High School Graduate  VS  Poverty Rate\", fontsize = 20, color = \"black\")\nplt.grid()\nplt.show()","ba5ad101":"concat = pd.concat([data,df], axis = 1)\ndata.head()","58ef5dbf":"state = police_killings_us.state.value_counts()","fb62278e":"\n\nkill_state = pd.DataFrame({\"area_list\":state[::].index,\"kill\":state[::].values})\nkill_state[\"kill\"] = kill_state[\"kill\"]\/max(kill_state[\"kill\"])\nsorted_data[\"area_poverty_ratio\"] = sorted_data[\"area_poverty_ratio\"]\/max(sorted_data[\"area_poverty_ratio\"])\nsorted_df[\"Complete Ratio\"] = sorted_df[\"Complete Ratio\"]\/max(sorted_df[\"Complete Ratio\"])\n\ndata = pd.concat([sorted_data,sorted_df[\"Complete Ratio\"]], axis = 1)\ndata.sort_values(\"area_poverty_ratio\",inplace = True)\n\ndata = data.set_index(\"area_list\")\ndata = data.reset_index() \n    \nkill_state_count =  list(police_killings_us[\"state\"].value_counts())\nkill_state_index = police_killings_us[\"state\"].value_counts().index[::]\nkill_state = pd.DataFrame({\"state\":kill_state_index, \"kill_count\":kill_state_count })\nkill_state[\"kill_count\"] = kill_state[\"kill_count\"]\/max(kill_state[\"kill_count\"]) \n\nkill_state = kill_state.set_index(\"state\")\nkill_state = kill_state.reindex(index = data[\"area_list\"])\nkill_state = kill_state.reset_index()\ndata =  pd.concat([data,kill_state[\"kill_count\"]], axis = 1)\ndata.head()\n","734aed59":"# Visualize \nf,ax1 = plt.subplots(figsize = (20,10))\nsns.pointplot(x = \"area_list\", y = \"area_poverty_ratio\", data = data, color = \"red\", alpha = 0.8)\nsns.pointplot(x = \"area_list\", y = \"Complete Ratio\", data = data , color = \"lime\", alpha = 0.8)\nsns.pointplot(x = \"area_list\", y = \"kill_count\", data = data, color = \"black\", alpha = 0.5  )\nplt.text(40,0.47,\"kill ratio each states\",color = \"black\", fontsize = 17, style = \"italic\")\nplt.text(37,0.6,\"Poverty Rate\",color = \"red\", fontsize = 17, style = \"italic\")\nplt.text(37,0.55, \"High school Complete Ratio\", color = \"lime\", fontsize = 17, style = \"italic\")\nplt.xlabel(\"States\", fontsize = 15, color = \"black\")\nplt.ylabel(\"Ratio\", fontsize = 15, color = \"black\")\nplt.title(\"High School Graduate - Poverty Rate - Kill Ratio\", fontsize = 20, color = \"black\")\nplt.grid()\nplt.show()","4a45fee0":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# joint kernel density\n# pearsonr= if it is 1, there is positive correlation and if it is, -1 there is negative correlation.\n# If it is zero, there is no correlation between variables\n# Show the joint distribution using kernel density estimation \ng =  sns.jointplot(data.area_poverty_ratio, data[\"Complete Ratio\"], kind = \"kde\", size = 7 )\n\nplt.savefig(\"grapgh.png\")\nplt.show()","257c2f5b":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\nsns.set(style=\"ticks\")\nsns.jointplot(\"area_poverty_ratio\",\"Complete Ratio\",data = data, size = 5, ratio = 3,  color=\"#4CB391\")\nplt.show()","9e6e53d6":"police_killings_us.manner_of_death.unique()","a4dd0e62":"#Plot the orbital period with horizontal boxes\nsns.boxplot(x = \"race\", y = \"age\", hue = \"manner_of_death\", data = police_killings_us, palette = \"PRGn\")\nplt.show()","d9f8e9ab":"sns.swarmplot(x = \"gender\", y = \"age\", hue = \"manner_of_death\", data = police_killings_us)\nplt.show()","07b0103f":"police_killings_us.gender.unique()","634049a9":"sns.countplot(police_killings_us.gender)\nplt.title(\"Gender of Killed People\", color = \"black\",  fontsize = 15)\nplt.show()","c60ca806":"# kill weapons\narmed = police_killings_us.armed.value_counts()\nplt.figure(figsize = (10,7))\nsns.barplot(x = armed[:7].index, y = armed[:7].values)\nplt.title(\"Kill Weapons\", color = \"black\", fontsize = \"15\")","c92f3f87":"police_killings_us.head()","d05cff7b":"# Age of killed people\nabove_below = [ \"Above\" if i >=25 else \"Below\" for i in police_killings_us.age]\ndf = pd.DataFrame({\"Age\": above_below})\nsns.countplot(x = df.Age)\nplt.title(\"Above and Below of killed people 25 age \", color = \"green\", fontsize = 15) ","5fa41d51":"# Race of Killed People\nsns.countplot(data = police_killings_us, x = \"race\")\nplt.title(\"Race of Killed People\")","09c5a9f8":"sns.countplot(police_killings_us.flee)\nplt.xlabel(\"Flee Types\")\nplt.ylabel(\"Count\")\nplt.title(\"Flee Types\", color = \"green\", fontsize = 15)","272c2771":"# Having body cameras or not for police\nsns.countplot(police_killings_us.body_camera)\nplt.title(\"Having body cameras or not for police\",color =\"black\",fontsize=15)\nplt.show()","b6fde3a8":"# Most deaths by police in cities\ncity = police_killings_us.state.value_counts()\n\nsns.barplot(x = city[:12].index, y = city[:12].values)\nplt.title(\"Most Deaths By Police In Cities\")","c7dd5e83":"kill_state = pd.DataFrame({\"area_list\":city[::].index,\"kill\":city[::].values})\nkill_state[\"kill\"] = kill_state[\"kill\"]\/max(kill_state[\"kill\"])\nsorted_data[\"area_poverty_ratio\"] = sorted_data[\"area_poverty_ratio\"]\/max(sorted_data[\"area_poverty_ratio\"])\nsorted_df[\"Complete Ratio\"] = sorted_df[\"Complete Ratio\"]\/max(sorted_df[\"Complete Ratio\"])\n\ndata = pd.concat([sorted_data,sorted_df[\"Complete Ratio\"]], axis = 1)\ndata.sort_values(\"area_poverty_ratio\",inplace = True)\n\ndata = data.set_index(\"area_list\")\ndata = data.reset_index() \n    \nkill_state_count =  list(police_killings_us[\"state\"].value_counts())\nkill_state_index = police_killings_us[\"state\"].value_counts().index[::]\nkill_state = pd.DataFrame({\"state\":kill_state_index, \"kill_count\":kill_state_count })\nkill_state[\"kill_count\"] = kill_state[\"kill_count\"]\/max(kill_state[\"kill_count\"]) \n\nkill_state = kill_state.set_index(\"state\")\nkill_state = kill_state.reindex(index = data[\"area_list\"])\nkill_state = kill_state.reset_index()\ndata =  pd.concat([data,kill_state[\"kill_count\"]], axis = 1)\ndata.head()","1bedf930":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# lmplot \n# Show the results of a linear regression within each dataset\nsns.set(color_codes=True)\nsns.lmplot(x = \"area_poverty_ratio\", y =\"Complete Ratio\", markers = \"x\",data =data , height = 6)\nsns.lmplot(x = \"area_poverty_ratio\", y =\"kill_count\",data =data, palette = \"Set1\",height = 6)\n\nplt.show()","6e4d6fc2":"data.head()","e0d38413":"sns.kdeplot(data.area_poverty_ratio,data.kill_count,shade = True, cut =3)\nplt.show()","aaa3cfe1":"sns.kdeplot(data[\"Complete Ratio\"],data.area_poverty_ratio,shade = True, cmap = \"Reds\")\nplt.show()","5e0f780f":"data.head()","1d3cbe6b":"# Show each distribution with both violins and points\n# Use cubehelix to get a custom sequential palette\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data = data, palette = pal, inner = \"points\")\nplt.show()","68305959":"# Correlation between area poverty ratio, highschool complete ratio and kill ratio\ndata.corr()","293beef1":"# Visualizaiton\nf,ax = plt.subplots(figsize=(6, 6))\nsns.heatmap(data.corr(), annot = True, linewidths = 0.5,linecolor=\"black\", fmt = \".1f\", ax = ax)\nplt.show()","b7ff7ff7":"data.head()","27a68431":"sns.pairplot(data)\nplt.show()","5312d59f":"<a id=\"1\"><\/a> \n## BAR PLOT\n> Most names used in people killed","6017daff":"<a id =\"11\"><\/a>\n## PAIR PLOT","991ea0dd":"<a id =\"3\"><\/a>\n## JOINT PLOT","6d6b0f71":"> Percent Over 25 Completed HighSchool:","dfecfc14":"<a id = \"5\"><\/a>\n## SWARM PLOT","f15e1160":"<a id = \"2\"><\/a>\n## POINT PLOT\n>  High school Graduation Ratio VS Poverty Rate of Each States \n","c06c670f":"<a id =\"8\"><\/a>\n## KDE PLOT","67170d63":"> High school graduate, poverty rate and kill ratio plot with point plot","81a679b9":"> Plotting Percentage People Below Poverty Level on States:","8d35587d":"# INTRODUCTION\n1. Read datas\n1. Poverty rate of each state\n1. Most common 15 Name or Surname of killed people\n1. High school graduation rate of the population that is older than 25 in states\n1. Percentage of state's population according to races that are black,white,native american, asian and hispanic\n1. High school graduation rate vs Poverty rate of each state\n1. Kill properties\n    * Manner of death\n    * Kill weapon\n    * Age of killed people\n    * Race of killed people\n    * Most dangerous cities\n    * Most dangerous states\n    * Having mental ilness or not for killed people\n    * Threat types\n    * Flee types\n    * Having body cameras or not for police\n1. Race rates according to states in kill data \n1. Kill numbers from states in kill data\n\n<br>\n<br>\nPlot Contents:\n* [Bar Plot](#1)\n* [Point Plot](#2)\n* [Joint Plot](#3)\n* [Box Plot](#4)\n* [Swarm Plot](#5)\n* [Count Plot](#6)\n* [LM Plot](#7)\n* [KDE Plot](#8)\n* [Violin Plot](#9)\n* [Heat Map](#10)\n* [Pair Plot](#11)\n\n\n","072a396d":"<a id =\"7\"><\/a>\n## LM PLOT","12787c79":"<a id = \"9\"><\/a>\n## VIOLIN PLOT","6e93bcaf":"<a id=\"4\"><\/a>\n## BOX PLOT","a782b276":"<a id =\"10\"><\/a>\n## HEAT MAP","97403ce7":"<a id=\"6\"><\/a>\n## COUNT PLOT","169ffed5":"> Percentage of State's Population According to Races"}}