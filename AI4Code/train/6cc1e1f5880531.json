{"cell_type":{"10797ed0":"code","6e64d50f":"code","02a1a77d":"code","f1a1acc7":"markdown","a76cc3cb":"markdown","03833b06":"markdown"},"source":{"10797ed0":"# load imports\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n#load CSV Files\n\na_company = pd.read_csv('..\/input\/companydataintegrity\/a__company.csv')\na_geo = pd.read_csv('..\/input\/companydataintegrity\/a__geo.csv')\nb_address = pd.read_csv('..\/input\/companydataintegrity\/b__address.csv')\nb_company = pd.read_csv('..\/input\/companydataintegrity\/b__company.csv')\nb_hierarchy = pd.read_csv('..\/input\/companydataintegrity\/b__hierarchy.csv')\n\n#inspect Data tables\nprint('a_company')\nprint(a_company.head())\nprint(a_company.info())\n\nprint('\\n')\nprint('a_geo')\nprint(a_geo.head())\nprint(a_geo.info())\n\nprint('\\n')\nprint('b_address')\nprint(b_address.head())\nprint(b_address.info())\n\nprint('\\n')\nprint('b_company')\nprint(b_company.head())\nprint(b_company.info())\n\nprint('\\n')\nprint('b_hierarchy')\nprint(b_hierarchy.head())\nprint(b_hierarchy.info())","6e64d50f":"#inspect all tables for missing values and duplicate records\n\nprint('a_company has....')\nprint('Total Number of Rows:', a_company.shape[0])\nprint('Total Number of Columns:', a_company.shape[1])\nprint('-' * 10)\nprint('Duplicated Records:', a_company.duplicated().any())\nprint('Missing Values:', a_company.isnull().values.sum())\nprint('\\n')\nprint('Missings data details:')\nprint('\\n')\n#Loop to identify where there is missing data values\nfor i in a_company.columns:\n    # Total number of null values in the column \n    nullNum = data[i].isnull().sum()\n    if nullNum > 0:\n        print(f\"{i} {nullNum}\")\n\n\n\nprint('\\n')\nprint('a_geo has....')\nprint('Total Number of Rows:', a_geo.shape[0])\nprint('Total Number of Columns:', a_geo.shape[1])\nprint('-' * 10)\nprint('Duplicated Records:', a_geo.duplicated().any())\nprint('Missing Values:', a_geo.isnull().values.sum())\nprint('\\n')\nprint('Missings data details:')\nprint('\\n')\n#Loop to identify where there is missing data values\nfor i in a_geo.columns:\n    # Total number of null values in the column \n    nullNum = a_geo[i].isnull().sum()\n    if nullNum > 0:\n        print(f\"{i} {nullNum}\")\n\nprint('\\n')\nprint('b_address has....')\nprint('Total Number of Rows:', b_address.shape[0])\nprint('Total Number of Columns:', b_address.shape[1])\nprint('-' * 10)\nprint('Duplicated Records:', b_address.duplicated().any())\nprint('Missing Values:', b_address.isnull().values.sum())\nprint('\\n')\nprint('Missings data details:')\nprint('\\n')\n#Loop to identify where there is missing data values\nfor i in b_address.columns:\n    # Total number of null values in the column \n    nullNum = b_address[i].isnull().sum()\n    if nullNum > 0:\n        print(f\"{i} {nullNum}\")\n        \n        \nprint('\\n')\nprint('b_company has....')\nprint('Total Number of Rows:', b_company.shape[0])\nprint('Total Number of Columns:', b_company.shape[1])\nprint('-' * 10)\nprint('Duplicated Records:', b_company.duplicated().any())\nprint('Missing Values:', b_company.isnull().values.sum())\nprint('\\n')\nprint('Missings data details:')\nprint('\\n')\n#Loop to identify where there is missing data values\nfor i in b_company.columns:\n    # Total number of null values in the column \n    nullNum = b_company[i].isnull().sum()\n    if nullNum > 0:\n        print(f\"{i} {nullNum}\")\n        \n        \nprint('\\n')\nprint('b_hierarchy has....')\nprint('Total Number of Rows:', b_hierarchy.shape[0])\nprint('Total Number of Columns:', b_hierarchy.shape[1])\nprint('-' * 10)\nprint('Duplicated Records:', b_hierarchy.duplicated().any())\nprint('Missing Values:', b_hierarchy.isnull().values.sum())\nprint('\\n')\nprint('Missings data details:')\nprint('\\n')\n#Loop to identify where there is missing data values\nfor i in b_hierarchy.columns:\n    # Total number of null values in the column \n    nullNum = b_hierarchy[i].isnull().sum()\n    if nullNum > 0:\n        print(f\"{i} {nullNum}\")","02a1a77d":"# change ID data type to object\na_company['vendor_id'] = a_company['vendor_id'].astype(object)\n#merge tables\ndatamapping = pd.merge(a_company, b_company,how= 'left', left_on ='vendor_id', right_on = 'b_entity_id' )\n\nprint(datamapping[['vendor_id', 'b_entity_id']])","f1a1acc7":"Next we will inspect each table data for missing values and duplicated records","a76cc3cb":"For the first step of this project I will simply load in the data and examine the tables. I want to see what the columns are, data type, and inspect for columns that can be joined.","03833b06":"Merge a_company and b_company on vendor_id and b_entity_id"}}