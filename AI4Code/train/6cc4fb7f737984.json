{"cell_type":{"28b09850":"code","242425e0":"code","988cb045":"code","5a2170c4":"code","98840283":"code","10c594ea":"code","f4e7d24f":"code","095cacaf":"code","d56ad881":"code","b688bf35":"code","7bdb8e8b":"code","b5f40d38":"code","a9b50288":"code","ccaf7927":"markdown","a1be7cb1":"markdown","56afef71":"markdown","413872f2":"markdown","54b9f013":"markdown","9f577886":"markdown","f1c119d1":"markdown","00d85eec":"markdown","45e05743":"markdown","4e021726":"markdown","149e8a38":"markdown"},"source":{"28b09850":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","242425e0":"import Bio\nfrom Bio.SeqIO import parse,read , to_dict\n","988cb045":"# Getting a generator object.\ncor_seq = [cor_seq for cor_seq in parse(\"\/kaggle\/input\/coronavirus-genome-sequence\/MN908947.fna\",\"fasta\")]\n# Converting this sequence into a dictionary.\ncor_seq_dict = to_dict(cor_seq)","5a2170c4":"print(cor_seq_dict)","98840283":"cor = read(\"\/kaggle\/input\/coronavirus-genome-sequence\/MN908947.fna\",\"fasta\")\nprint(cor.seq)","10c594ea":"# As we can see the T's in the Sequence we can predict that it is either a DNA or a Protein. By the information of\n# data we can say that it cannot be a protein sequence.                                                    ","f4e7d24f":"# Taking the compliment.\ncor_com = cor_seq[0].seq.complement()\nrepr(cor_com)","095cacaf":"# Transcribing the sequence\ncor_rna = cor_seq[0].seq.transcribe()\nprint(cor_rna)","d56ad881":"# Translation\n# 1.\nprotein = cor_seq[0].seq.translate()\nprint(protein)\n# 2.\npr = cor_rna.translate()\npr","b688bf35":"# Getting the positions of Stop codons\n# Stop in the first occurences of stop codons\ncor_seq[0].seq.translate(to_stop=True)","7bdb8e8b":"# The translation table that we used is standard transition table and it is by-default in used in BioPython\nimport Bio.Data.CodonTable as CodonTable\nprint(CodonTable.unambiguous_dna_by_name[\"Standard\"])","b5f40d38":"# Spltting the protein according to the stop codons\nprotn = protein.split(\"*\")\nfor each in protn:\n    if each==\" \":\n        continue\n    print(each)","a9b50288":"# Now calculating the GC% in the given sequence\nfrom Bio.SeqUtils import GC\nprint(f\"GC% :{GC(cor_seq[0].seq)}\")","ccaf7927":"### Transcribing the Sequence to get a RNA Sequence","a1be7cb1":"At last of this sequence we can see there are multiple A's , this is due to the Polymerase chain Reaction.","56afef71":"### Translating the Sequence to Protein","413872f2":"### Getting the Transition Table","54b9f013":"### GC percent of Sequence","9f577886":"### Parsing the Genome Sequence to get a generator Object","f1c119d1":"### Splitting the Protein","00d85eec":"Translating the \n1. DNA Sequence \n2. RNA Sequence<br>\n\nBoth to Protein Sequence","45e05743":"#### In the Next part I'll be discussing some other information regarding the genome sequence.\nIf u liked my work please hit upvote !","4e021726":"### Reading the Genome Sequence","149e8a38":"### Taking complement of the sequence"}}