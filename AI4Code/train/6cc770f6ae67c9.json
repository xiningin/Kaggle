{"cell_type":{"d2e2a7d0":"code","980e99a9":"code","10be7558":"code","27d71ffc":"code","e2690c96":"code","fe9a2145":"code","583706db":"code","8c00e0b4":"code","3971484c":"code","30f598dd":"code","00c0e35a":"code","b9ccfbf5":"code","204d3c48":"code","1c7ff950":"code","b7fd6339":"code","dde11bab":"code","a90239a7":"code","47caed07":"markdown","ddef6c58":"markdown","b611ddbf":"markdown","4f840a2c":"markdown","05bd0fad":"markdown"},"source":{"d2e2a7d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas_profiling as pp\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","980e99a9":"df_raw = pd.read_csv(\"..\/input\/diamonds\/diamonds.csv\", index_col=0)\ndf_raw.head()","10be7558":"pp.ProfileReport(df_raw)","27d71ffc":"#not in custom order\n#df_raw[\"cut\"].unique()\n#df_raw[\"cut\"].astype(\"category\").cat.codes\ncut_class_dict = {\"Fair\": 1, \"Good\": 2, \"Very Good\": 3, \"Premium\": 4, \"Ideal\": 5}\nclarity_dict = {\"I3\": 1, \"I2\": 2, \"I1\": 3, \"SI2\": 4, \"SI1\": 5, \"VS2\": 6, \"VS1\": 7, \"VVS2\": 8, \"VVS1\": 9, \"IF\": 10, \"FL\": 11}\ncolor_dict = {\"J\": 1, \"I\": 2, \"H\": 3, \"G\": 4, \"F\": 5, \"E\": 6, \"D\": 7}\n\ndf_raw[\"cut\"] = df_raw[\"cut\"].map(cut_class_dict)\ndf_raw[\"clarity\"] = df_raw[\"clarity\"].map(clarity_dict)\ndf_raw[\"color\"] = df_raw[\"color\"].map(color_dict)\n\ndf_raw.head()","e2690c96":"%matplotlib notebook\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorr = df_raw.corr()\n\n# plot the heatmap\nsns.heatmap(corr, \n        xticklabels=corr.columns,\n        yticklabels=corr.columns)\n","fe9a2145":"import sklearn\nfrom sklearn import svm, preprocessing\n\ndf = sklearn.utils.shuffle(df_raw)\n\nX = df.drop(\"price\", axis=1).values\nX = preprocessing.scale(X)\ny = df[\"price\"].values\n\ntest_size = 200\n\nX_train = X[:-test_size] #upto last 200\ny_train = y[:-test_size]\n\n\nX_test = X[-test_size:]\ny_test = y[-test_size:]\n\nclf = svm.SVR(kernel=\"linear\")\nclf.fit(X_train, y_train)","583706db":"clf.score(X_test, y_test)","8c00e0b4":"for X,y in zip(X_test, y_test):\n    print(f\"Model: {clf.predict([X])[0]}, Actual: {y}\")","3971484c":"clf = svm.SVR(kernel=\"rbf\")\nclf.fit(X_train, y_train)","30f598dd":"clf.score(X_test, y_test)","00c0e35a":"for X,y in zip(X_test, y_test):\n    print(f\"Model: {clf.predict([X])[0]}, Actual: {y}\")","b9ccfbf5":"X = df[[\"carat\", \"x\", \"y\", \"z\"]].values\ny = df[\"price\"].values\n\ntest_size = 200\n\nX_train = X[:-test_size] #upto last 200\ny_train = y[:-test_size]\n\n\nX_test = X[-test_size:]\ny_test = y[-test_size:]\n\nclf = svm.SVR(kernel=\"linear\")\nclf.fit(X_train, y_train)","204d3c48":"clf.score(X_test, y_test)","1c7ff950":"for X,y in zip(X_test, y_test):\n    print(f\"Model: {clf.predict([X])[0]}, Actual: {y}\")","b7fd6339":"clf = svm.SVR(kernel=\"rbf\")\nclf.fit(X_train, y_train)","dde11bab":"clf.score(X_test, y_test)","a90239a7":"for X,y in zip(X_test, y_test):\n    print(f\"Model: {clf.predict([X])[0]}, Actual: {y}\")","47caed07":"# Using only highest corr cols","ddef6c58":"## Linear SVR","b611ddbf":"## RBF","4f840a2c":"## Linear","05bd0fad":"## RBF SVR"}}