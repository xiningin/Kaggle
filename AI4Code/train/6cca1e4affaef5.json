{"cell_type":{"e29436d3":"code","ba5faf90":"code","857b4e1f":"code","6de93930":"code","f5b74a39":"code","575f9ea6":"code","0d26570c":"code","3d8e996b":"code","bdd2b087":"code","5a528183":"code","c98e7569":"code","ebec4984":"code","1b4f5625":"code","e7f99a99":"code","8ca547cf":"code","12a16e77":"code","a6005dd5":"code","83589515":"code","68892d49":"code","61dbc650":"code","cf1caf18":"code","95e3ee87":"code","eb29b236":"code","b63a9e9c":"code","c7afe46c":"code","51cc2889":"code","c6d04041":"code","44eefdd3":"code","abbedf61":"code","34d3e21f":"code","467e1560":"code","d3780144":"code","b8a71791":"code","646da374":"code","be6c19ad":"code","d88825d7":"code","1035cf09":"code","fe2eeae5":"code","bb07a750":"code","1b2d4d5a":"code","a93e3732":"code","5519fcd0":"code","32bce096":"code","cfcca35f":"code","43f0ada6":"code","b378e79e":"code","474132c9":"code","29f14246":"code","c947adf1":"code","7d4b7461":"code","698a9732":"code","a2703dda":"code","e250263c":"code","51b44437":"code","e1e0d042":"code","7cca7000":"code","ffb48601":"code","f4d5ebbd":"code","26d4fd97":"code","28970677":"code","f0d909a4":"code","eb2c8fe2":"code","1014f6dd":"code","99de8528":"code","743ebf12":"code","e0f6a334":"code","854f89d3":"code","12d26d2b":"code","73a7e75c":"code","7cc043b2":"code","6188d354":"code","6fea464a":"code","1526506b":"code","b2becb74":"code","c059bf62":"code","2b34fe76":"code","49db08ab":"code","2de7f59d":"code","09d474a2":"code","c6a41ebd":"code","7394d938":"code","9991e09d":"code","7c631235":"code","d8d09686":"code","f5bc6bff":"code","ee14862d":"code","b3194541":"code","e056b8dc":"code","7065facc":"code","9e08aeaa":"code","f5f54e30":"code","26097acf":"code","9d664d79":"code","078e6cbb":"code","24ed8c1b":"code","2a179501":"code","f977d3c4":"code","f149f0a5":"code","34ff547f":"code","3c4ca43a":"code","7887c22c":"code","57bf0cda":"code","21261466":"code","5f865b85":"code","e1bcb676":"code","224f2880":"code","2b788d57":"code","f759899c":"code","d54b042f":"code","8ca0dafe":"code","0a492f1f":"code","2a6a8674":"code","bcda68a1":"code","cddaeefa":"code","277cd21f":"code","dc6156cd":"code","5edbe412":"code","8ceed3b3":"code","99d1010d":"code","f4746a98":"code","e1008458":"code","fde673ef":"code","a234c467":"code","9bb61d1c":"code","a2fa4642":"code","69805dd1":"code","8ea99a3b":"code","ffaa2cb1":"code","9174871d":"code","c02fa7ae":"code","eb234820":"code","3de884de":"code","2ca8c240":"code","7e1a93a2":"code","a0e72792":"code","1829082f":"code","53da25cb":"code","3f6b9d61":"markdown","829a09f5":"markdown","43290c99":"markdown","4d18d473":"markdown","f21790e8":"markdown","f18e8f06":"markdown","7baa3b8f":"markdown","2954b477":"markdown","15a2e255":"markdown","40f29ac6":"markdown","3d0e7bfb":"markdown","b6a2cdeb":"markdown","00216560":"markdown","03ca0d32":"markdown","7bbf168a":"markdown","4467eec9":"markdown","ae65bc62":"markdown","75f5cb94":"markdown","55008244":"markdown","af733820":"markdown","69addb7d":"markdown","1bbf4c1f":"markdown","211540af":"markdown","04dc09d6":"markdown","7f9a43d4":"markdown","55d9c9ae":"markdown","a97f7698":"markdown"},"source":{"e29436d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt","ba5faf90":"sns.set()","857b4e1f":"def ecdf(data):\n    x = np.sort(data)\n    y = np.arange(0, len(x),1) \/ len(x)\n    return x, y","6de93930":"def plot_histogram_train_test(feature, bins=100):\n    # train and test histogram\n    plt.figure(figsize=(20, 3))\n    plt.subplot(1,2,1)\n    plt.title('Train distribution')\n    plt.xlabel(feature)\n    plt.hist(train_df[feature], bins=bins)\n    plt.subplot(1,2,2)\n    plt.hist(test_df[feature], bins=bins)\n    plt.title('Test distribution')\n    plt.xlabel(feature)\n    \ndef plot_kde_train_test(feature):\n    # train and test kde\n    plt.figure(figsize=(20, 3))\n    plt.subplot(1,2,1)\n    plt.title('Train distribution')\n    plt.xlabel(feature)\n    sns.kdeplot(train_df[feature])\n    plt.subplot(1,2,2)\n    sns.kdeplot(test_df[feature])\n    plt.title('Test distribution')\n    plt.xlabel(feature)\n    \ndef plot_ecdf_train_test(feature):\n    # train and test ecdf\n    plt.figure(figsize=(20, 3))\n    plt.subplot(1,2,1)\n    plt.title('Train distribution')\n    plt.xlabel(feature)\n    plt.scatter(*ecdf(train_df[feature]))\n    plt.subplot(1,2,2)\n    plt.scatter(*ecdf(test_df[feature]))\n    plt.title('Test distribution')\n    plt.xlabel(feature)\n    \ndef count_plot_train_test(feature):\n    # train and test countplot\n    plt.figure(figsize=(20, 3))\n    plt.subplot(1,2,1)\n    plt.title('Train distribution')\n    plt.xlabel(feature)\n    sns.countplot(train_df[feature])\n    plt.subplot(1,2,2)\n    sns.countplot(test_df[feature])\n    plt.title('Test distribution')\n    plt.xlabel(feature)\n    \ndef checknull(feature):\n    print('Portion of null values in train and test respectively:', \n          train_df[feature].isnull().mean(), ',', \n          test_df[feature].isnull().mean())","f5b74a39":"train_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","575f9ea6":"train_df.head()","0d26570c":"test_df.head()","3d8e996b":"test_df.info()","bdd2b087":"print('Number of columns in dataset:', len(train_df.columns))\nprint('Including 1 target columns: SalePrice')","5a528183":"# drop columns having null value > 30%\nnull_thresh = 0.3\n\nis_nan_train = train_df.isnull().mean()\ndropped_cols_train = is_nan_train[is_nan_train > null_thresh].index\nis_nan_test = test_df.isnull().mean()\ndropped_cols_test = is_nan_test[is_nan_test > null_thresh].index\n\nprint('Columns having null value > '+str(null_thresh),'in train_df:',dropped_cols_train)\nprint('Columns having null value > '+str(null_thresh),'in test_df:',dropped_cols_test)\n# print('\\nPortion of null of these columns in test_df:\\n', test_df[dropped_cols].isnull().mean())\n# train_df.drop(dropped_cols, axis=1, inplace=True)","c98e7569":"train_df.drop(dropped_cols_train, axis=1, inplace=True)\ntest_df.drop(dropped_cols_test, axis=1, inplace=True)","ebec4984":"train_df.info()","1b4f5625":"train_corr_matrix = train_df.corr()\nvaluable_cols = train_corr_matrix[np.abs(train_corr_matrix['SalePrice']) > 0.3].index\nprint('Columns having correlation with SalePrice > 0.3: ', valuable_cols.values)\ntrain_df = train_df[valuable_cols]\ntest_df = test_df[valuable_cols[:-1]]","e7f99a99":"train_corr_matrix[np.abs(train_corr_matrix['SalePrice']) > 0.55].index","8ca547cf":"sns.heatmap(train_df.corr())","12a16e77":"train_df.head()","a6005dd5":"train_df.LotFrontage.dtype","83589515":"print('Portion of null values in train and test respectively:', train_df.LotFrontage.isnull().mean(), ',', test_df.LotFrontage.isnull().mean())","68892d49":"# train and test LotFrontage distribution\nplt.figure(figsize=(20, 3))\nplt.subplot(1,2,1)\nplt.title('Train distribution')\nplt.xlabel('LotFrontage')\nsns.kdeplot(train_df['LotFrontage'])\nplt.subplot(1,2,2)\nsns.kdeplot(test_df['LotFrontage'])\nplt.title('Test distribution')\nplt.xlabel('LotFrontage')","61dbc650":"# train and test LotFrontage histogram\nplt.figure(figsize=(20, 3))\nplt.subplot(1,2,1)\nplt.title('Train distribution')\nplt.xlabel('LotFrontage')\nplt.hist(train_df['LotFrontage'], bins=100)\nplt.subplot(1,2,2)\nplt.hist(test_df['LotFrontage'], bins=100)\nplt.title('Test distribution')\nplt.xlabel('LotFrontage')","cf1caf18":"# train and test LotFrontage histogram\nplt.figure(figsize=(13, 3))\n\nplt.subplot(1,2,1)\nplt.scatter(*ecdf(train_df['LotFrontage']))\nplt.title('Train cumulative plot')\nplt.xlabel('LotFrontage')\n\nplt.subplot(1,2,2)\nplt.scatter(*ecdf(test_df['LotFrontage']))\nplt.title('Test cumulative plot')\nplt.xlabel('LotFrontage')","95e3ee87":"# fir a regression line\nplt.figure(figsize=(10,6))\nsns.scatterplot('LotFrontage', 'SalePrice', data=train_df)\nsns.regplot('LotFrontage', 'SalePrice', data=train_df, scatter=None)","eb29b236":"train_df.OverallQual.dtype","b63a9e9c":"print('Portion of null values in train and test respectively:', train_df.OverallQual.isnull().mean(), ',', test_df.OverallQual.isnull().mean())","c7afe46c":"plt.figure(figsize=(10, 5))\n\nplt.subplot(1,2,1)\nsns.countplot(train_df.OverallQual)\nplt.title('Value count of each OverallQual type on train set')\n\nplt.subplot(1,2,2)\nsns.countplot(test_df.OverallQual)\nplt.title('Value count of each OverallQual type on train set')","51cc2889":"train_df.groupby('OverallQual').mean()['SalePrice']","c6d04041":"sns.scatterplot('OverallQual', 'SalePrice', data=train_df)","44eefdd3":"train_df.YearBuilt.dtype","abbedf61":"print('Portion of null values in train and test respectively:', train_df.YearBuilt.isnull().mean(), ',', test_df.YearBuilt.isnull().mean())","34d3e21f":"np.sort(test_df.YearBuilt.unique())","467e1560":"np.sort(train_df.YearBuilt.unique())","d3780144":"# train and test histogram\nplt.figure(figsize=(13, 3))\n\nplt.subplot(1,2,1)\nplt.scatter(*ecdf(train_df.YearBuilt))\nplt.title('Train cumulative plot')\nplt.xlabel('YearBuilt')\n\nplt.subplot(1,2,2)\nplt.scatter(*ecdf(test_df.YearBuilt))\nplt.title('Test cumulative plot')\nplt.xlabel('YearBuilt')","b8a71791":"sns.scatterplot('YearBuilt', 'SalePrice', data=train_df)","646da374":"train_df.YearRemodAdd.dtype","be6c19ad":"print('Portion of null values in train and test respectively:', train_df.YearRemodAdd.isnull().mean(), ',', test_df.YearRemodAdd.isnull().mean())","d88825d7":"# train and test histogram\nplt.figure(figsize=(13, 3))\n\nplt.subplot(1,2,1)\nplt.scatter(*ecdf(train_df.YearRemodAdd))\nplt.title('Train cumulative plot')\nplt.xlabel('YearRemodAdd')\n\nplt.subplot(1,2,2)\nplt.scatter(*ecdf(test_df.YearRemodAdd))\nplt.title('Test cumulative plot')\nplt.xlabel('YearRemodAdd')","1035cf09":"sns.scatterplot('YearRemodAdd', 'SalePrice', data=train_df)","fe2eeae5":"plt.scatter(train_df['YearRemodAdd']-train_df['YearBuilt'], train_df['SalePrice'])","bb07a750":"train_df.MasVnrArea.dtype","1b2d4d5a":"print('Portion of null values in train and test respectively:', train_df.MasVnrArea.isnull().mean(), ',', test_df.MasVnrArea.isnull().mean())","a93e3732":"# train and test histogram\nplt.figure(figsize=(13, 3))\n\nplt.subplot(1,2,1)\nplt.scatter(*ecdf(train_df.MasVnrArea))\nplt.title('Train cumulative plot')\nplt.xlabel('MasVnrArea')\n\nplt.subplot(1,2,2)\nplt.scatter(*ecdf(test_df.MasVnrArea))\nplt.title('Test cumulative plot')\nplt.xlabel('MasVnrArea')","5519fcd0":"# train and test MasVnrArea histogram\nplt.figure(figsize=(20, 3))\nplt.subplot(1,2,1)\nplt.title('Train distribution')\nplt.xlabel('MasVnrArea')\nplt.hist(train_df['MasVnrArea'], bins=100)\nplt.subplot(1,2,2)\nplt.hist(test_df['MasVnrArea'], bins=100)\nplt.title('Test distribution')\nplt.xlabel('MasVnrArea')","32bce096":"(train_df.MasVnrArea == 0).sum()","cfcca35f":"(test_df.MasVnrArea == 0).sum()","43f0ada6":"train_df.BsmtFinSF1.dtype","b378e79e":"checknull('BsmtFinSF1')","474132c9":"plot_kde_train_test('BsmtFinSF1')","29f14246":"plot_histogram_train_test('BsmtFinSF1')","c947adf1":"plot_ecdf_train_test('BsmtFinSF1')","7d4b7461":"sns.lmplot('BsmtFinSF1', 'SalePrice', data=train_df)","698a9732":"train_df.TotalBsmtSF.dtype","a2703dda":"checknull('TotalBsmtSF')","e250263c":"plot_histogram_train_test('TotalBsmtSF')","51b44437":"plot_kde_train_test('TotalBsmtSF')","e1e0d042":"plot_ecdf_train_test('TotalBsmtSF')","7cca7000":"sns.lmplot('TotalBsmtSF', 'SalePrice', train_df)","ffb48601":"train_df['1stFlrSF'].dtype","f4d5ebbd":"checknull('1stFlrSF')","26d4fd97":"plot_histogram_train_test('1stFlrSF')","28970677":"plot_kde_train_test('1stFlrSF')","f0d909a4":"plot_ecdf_train_test('1stFlrSF')","eb2c8fe2":"sns.lmplot('1stFlrSF', 'SalePrice', train_df)","1014f6dd":"train_df['2ndFlrSF'].dtype","99de8528":"checknull('2ndFlrSF')","743ebf12":"plot_histogram_train_test('2ndFlrSF')","e0f6a334":"plot_kde_train_test('2ndFlrSF')","854f89d3":"plot_ecdf_train_test('2ndFlrSF')","12d26d2b":"sns.lmplot('2ndFlrSF', 'SalePrice', train_df)","73a7e75c":"train_df.GrLivArea.dtype","7cc043b2":"checknull('GrLivArea')","6188d354":"plot_histogram_train_test('GrLivArea')","6fea464a":"plot_kde_train_test('GrLivArea')","1526506b":"plot_ecdf_train_test('GrLivArea')","b2becb74":"sns.lmplot('GrLivArea', 'SalePrice', train_df)","c059bf62":"train_df.FullBath.dtype","2b34fe76":"checknull('FullBath')","49db08ab":"count_plot_train_test('FullBath')","2de7f59d":"sns.lmplot('FullBath', 'SalePrice', train_df)","09d474a2":"train_df.TotRmsAbvGrd.dtype","c6a41ebd":"train_df.TotRmsAbvGrd.unique()","7394d938":"checknull('TotRmsAbvGrd')","9991e09d":"count_plot_train_test('TotRmsAbvGrd')","7c631235":"sns.lmplot('TotRmsAbvGrd', 'SalePrice', data=train_df)","d8d09686":"train_df.Fireplaces.dtype","f5bc6bff":"train_df.Fireplaces.unique()","ee14862d":"checknull('Fireplaces')","b3194541":"count_plot_train_test('Fireplaces')","e056b8dc":"sns.lmplot('Fireplaces', 'SalePrice', train_df)","7065facc":"train_df.GarageYrBlt.dtype","9e08aeaa":"train_df.GarageYrBlt.unique()","f5f54e30":"plot_histogram_train_test('GarageYrBlt')","26097acf":"plot_kde_train_test('GarageYrBlt')","9d664d79":"plot_ecdf_train_test('GarageYrBlt')","078e6cbb":"sns.lmplot('GarageYrBlt', 'SalePrice', train_df)","24ed8c1b":"train_df.GarageCars.dtype","2a179501":"train_df.GarageCars.unique()","f977d3c4":"checknull('GarageCars')","f149f0a5":"count_plot_train_test('GarageCars')","34ff547f":"sns.lmplot('GarageCars', 'SalePrice', train_df)","3c4ca43a":"train_df.GarageArea.dtype","7887c22c":"checknull('GarageArea')","57bf0cda":"plot_histogram_train_test('GarageArea')","21261466":"plot_kde_train_test('GarageArea')","5f865b85":"plot_ecdf_train_test('GarageArea')","e1bcb676":"sns.lmplot('GarageArea', 'SalePrice', train_df)","224f2880":"train_df.WoodDeckSF.dtype","2b788d57":"checknull('WoodDeckSF')","f759899c":"plot_histogram_train_test('WoodDeckSF')","d54b042f":"plot_kde_train_test('WoodDeckSF')","8ca0dafe":"plot_ecdf_train_test('WoodDeckSF')","0a492f1f":"sns.lmplot('WoodDeckSF', 'SalePrice', train_df)","2a6a8674":"train_df.OpenPorchSF.dtype","bcda68a1":"checknull('OpenPorchSF')","cddaeefa":"plot_histogram_train_test('OpenPorchSF')","277cd21f":"plot_kde_train_test('OpenPorchSF')","dc6156cd":"plot_ecdf_train_test('OpenPorchSF')","5edbe412":"sns.lmplot('OpenPorchSF', 'SalePrice', train_df)","8ceed3b3":"from sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.svm import SVC\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_log_error","99d1010d":"combine = [train_df, test_df]","f4746a98":"feature_cols = ['LotFrontage', 'OverallQual', 'YearBuilt',\n       'TotalBsmtSF', '1stFlrSF', 'GrLivArea',\n       'FullBath', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n       'GarageArea']","e1008458":"train_df = train_df[feature_cols+['SalePrice']]\ntest_df = test_df[feature_cols]","fde673ef":"# Impute columns with missing value\nfor col in feature_cols:\n    feature_most_frequent_value_train = train_df[col].mode().values[0]\n    train_df[col] = train_df[col].fillna(feature_most_frequent_value_train)\n    test_df[col] = test_df[col].fillna(feature_most_frequent_value_train)","a234c467":"labels = train_df['SalePrice']\ndata = train_df.drop('SalePrice', axis=1)\n\nmean_vec = np.mean(data, axis=0)\nstd_vec = np.std(data, axis=0)\n\ndata = (data - mean_vec) \/ std_vec\n\ntest_data = (test_df-mean_vec)\/std_vec","9bb61d1c":"X_train, X_test, y_train, y_test = train_test_split(data,\n                                                   train_df['SalePrice'],\n                                                   test_size=0.2,\n                                                   random_state=123)","a2fa4642":"# params = {'C':[1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1, 10]}\n\n# grid = GridSearchCV(param_grid=params, estimator=LogisticRegression(multi_class='auto', solver='lbfgs'), cv=5, n_jobs=-1)","69805dd1":"# grid.fit(X_train, y_train)","8ea99a3b":"lr = LogisticRegression(multi_class='auto', solver='lbfgs')\n# lr.fit(X_train, y_train)","ffaa2cb1":"dt = DecisionTreeRegressor(max_depth=9, min_samples_leaf=20)\n# dt.fit(X_train, y_train)","9174871d":"rf = RandomForestRegressor(n_estimators=50, max_depth=9 ,min_samples_leaf=5)\n# rf.fit(X_train, y_train)","c02fa7ae":"gb = GradientBoostingRegressor(n_estimators=80)\ngb.fit(X_train, y_train)","eb234820":"y_pred_train = gb.predict(X_train)\nmean_squared_log_error(y_train, y_pred_train)**.5","3de884de":"y_pred_val = gb.predict(X_test)\nmean_squared_log_error(y_test, y_pred_val)**.5","2ca8c240":"gb.fit(np.vstack([X_train, X_test]), np.concatenate([y_train, y_test]))\ny_pred_test = gb.predict(test_data)","7e1a93a2":"submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","a0e72792":"submission['SalePrice'] = y_pred_test","1829082f":"submission.to_csv('submission.csv', index=False)","53da25cb":"submission.head()","3f6b9d61":"## 1.12. Fireplaces:\n- Number of fireplaces","829a09f5":"## 1.10. FullBath:\n- Full bathrooms above grade\n- An ordinal feature","43290c99":"## 1.14. GarageArea:\n- Size of garage in square feet","4d18d473":"# 2. Training","f21790e8":"## 1.6. BsmtFinSF1:\n- type 1 finished square feet","f18e8f06":"## 1.12. GarageYrBlt:\n- Year garage was built","7baa3b8f":"- About 60% MasVnrArea of train set having value exactly 0. The same observation occur","2954b477":"- 60% of both train and test set is exactly 0","15a2e255":"## 1.4. YearRemodAdd:\n- Remodel date (same as construction date if no remodeling or additions)","40f29ac6":"## 1.10. GrLivArea:\n- Above grade (ground) living area square feet","3d0e7bfb":"- Choosing highly related columns with target variable","b6a2cdeb":"## 1.7. TotalBsmtSF:\n- Total square feet of basement area","00216560":"## 1.16. OpenPorchSF:\n- Open porch area in square feet","03ca0d32":"## 1.5. MasVnrArea:\n- Masonry veneer area in square feet","7bbf168a":"## 1.15. WoodDeckSF:\n- Wood deck area in square feet","4467eec9":"## 1.3. Year built:\n- Original construction date\n","ae65bc62":"## 1.11. TotRmsAbvGrd:\n- Total rooms above grade (does not include bathrooms)","75f5cb94":"- There are a few outliers","55008244":"## 1.2. OverallQual:\nOverallQual: Rates the overall material and finish of the house\n\n       10\tVery Excellent\n       9\tExcellent\n       8\tVery Good\n       7\tGood\n       6\tAbove Average\n       5\tAverage\n       4\tBelow Average\n       3\tFair\n       2\tPoor\n       1\tVery Poor\n\t","af733820":"- So we decide to drop ['Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature'] from both train and test set","69addb7d":"## 1.9. 2ndFlrSF:\n- Second floor square feet","1bbf4c1f":"# 1. EDA","211540af":"## 1.13. GarageCars:\n- Size of garage in car capacity","04dc09d6":"## 1.8. 1stFlrSF:\n> - First Floor square feet","7f9a43d4":"- We see the correlation between OverallQual with SalePrice on average of each quality types (1->10)","55d9c9ae":"- It is an ordinal feature","a97f7698":"## 1.1. LotFrontage:\n- Linear feet of street connected to property"}}