{"cell_type":{"8ce6821a":"code","f4d0f93a":"code","b552ae97":"code","24cca6f6":"code","f9ad99b9":"code","db7eda9b":"code","48dc6813":"code","d3dd2288":"code","12071fe2":"code","291a2e02":"code","8696838c":"code","338413a2":"code","dbbff268":"code","e94da1e6":"code","b58d1565":"code","ca8901e3":"code","2d1a9d3a":"code","e8709664":"code","d3d32891":"code","b4c82738":"code","da5eedbc":"code","affa6f0c":"code","5ae2c9ef":"code","cd891314":"code","25fecb43":"code","a2dc1cce":"code","759a63a2":"code","96c37a47":"markdown","f74b921c":"markdown","a760c4d3":"markdown","7cc5eb15":"markdown","986a6816":"markdown","b10b671d":"markdown","f971c9c0":"markdown","70556eed":"markdown","b452fd0c":"markdown"},"source":{"8ce6821a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nfrom time import time\nfrom tqdm import tqdm_notebook as tqdm\nfrom collections import Counter\nfrom scipy import stats\nimport lightgbm as lgb\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.model_selection import KFold, StratifiedKFold\nimport gc\nimport json\npd.set_option('display.max_columns', 1000)","f4d0f93a":"def read_data():\n    print('Reading train.csv file....')\n    train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv')\n    print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n\n    print('Reading test.csv file....')\n    test = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/test.csv')\n    print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n    print('Reading train_labels.csv file....')\n    train_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')\n    print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n    print('Reading specs.csv file....')\n    specs = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/specs.csv')\n    print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n    return train, test, train_labels, specs, sample_submission\n\n\n\n\ndef encode_title(train, test, train_labels):\n    # encode title\n    # make a list with all the unique 'titles' from the train and test set\n    list_of_user_activities = list(set(train['title'].unique()).union(set(test['title'].unique())))\n    # make a list with all the unique 'event_code' from the train and test set\n    list_of_event_code = list(set(train['event_code'].unique()).union(set(test['event_code'].unique())))\n    # make a list with all the unique worlds from the train and test set\n    list_of_worlds = list(set(train['world'].unique()).union(set(test['world'].unique())))\n    # create a dictionary numerating the titles\n    activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n    activities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n    activities_world = dict(zip(list_of_worlds, np.arange(len(list_of_worlds))))\n    # replace the text titles with the number titles from the dict\n    train['title'] = train['title'].map(activities_map)\n    test['title'] = test['title'].map(activities_map)\n    train['world'] = train['world'].map(activities_world)\n    test['world'] = test['world'].map(activities_world)\n    train_labels['title'] = train_labels['title'].map(activities_map)\n    win_code = dict(zip(activities_map.values(), (4100*np.ones(len(activities_map))).astype('int')))\n    # then, it set one element, the 'Bird Measurer (Assessment)' as 4110, 10 more than the rest\n    win_code[activities_map['Bird Measurer (Assessment)']] = 4110\n    # convert text into datetime\n    train['timestamp'] = pd.to_datetime(train['timestamp'])\n    test['timestamp'] = pd.to_datetime(test['timestamp'])\n    return train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels\n\ndef get_data(user_sample, test_set=False):\n    '''\n    The user_sample is a DataFrame from train or test where the only one \n    installation_id is filtered\n    And the test_set parameter is related with the labels processing, that is only requered\n    if test_set=False\n    '''\n    # Constants and parameters declaration\n    last_activity = 0\n    \n    user_activities_count = {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n    \n    # new features: time spent in each activity\n    event_code_count = {eve: 0 for eve in list_of_event_code}\n    last_session_time_sec = 0\n    \n    accuracy_groups = {0:0, 1:0, 2:0, 3:0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy = 0\n    accumulated_correct_attempts = 0 \n    accumulated_uncorrect_attempts = 0\n    accumulated_actions = 0\n    counter = 0\n    time_first_activity = float(user_sample['timestamp'].values[0])\n    durations = []\n    # itarates through each session of one instalation_id\n    for i, session in user_sample.groupby('game_session', sort=False):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        \n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n                    \n            \n        # for each assessment, and only this kind off session, the features below are processed\n        # and a register are generated\n        if (session_type == 'Assessment') & (test_set or len(session)>1):\n            # search for event_code 4100, that represents the assessments trial\n            all_attempts = session.query(f'event_code == {win_code[session_title]}')\n            # then, check the numbers of wins and the number of losses\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # copy a dict to use as feature template, it's initialized with some itens: \n            # {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n            features = user_activities_count.copy()\n            features.update(event_code_count.copy())\n            # get installation_id for aggregated features\n            features['installation_id'] = session['installation_id'].iloc[-1]\n            # add title as feature, remembering that title represents the name of the game\n            features['session_title'] = session['title'].iloc[0]\n            # the 4 lines below add the feature of the history of the trials of this player\n            # this is based on the all time attempts so far, at the moment of this assessment\n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts \n            accumulated_uncorrect_attempts += false_attempts\n            # the time spent in the app so far\n            if durations == []:\n                features['duration_mean'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            # the accurace is the all time wins divided by the all time attempts\n            features['accumulated_accuracy'] = accumulated_accuracy\/counter if counter > 0 else 0\n            accuracy = true_attempts\/(true_attempts+false_attempts) if (true_attempts+false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            # a feature of the current accuracy categorized\n            # it is a counter of how many times this player was in each accuracy group\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n            features.update(accuracy_groups)\n            accuracy_groups[features['accuracy_group']] += 1\n            # mean of the all accuracy groups of this player\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group\/counter if counter > 0 else 0\n            accumulated_accuracy_group += features['accuracy_group']\n            # how many actions the player has done so far, it is initialized as 0 and updated some lines below\n            features['accumulated_actions'] = accumulated_actions\n            \n            # there are some conditions to allow this features to be inserted in the datasets\n            # if it's a test set, all sessions belong to the final dataset\n            # it it's a train, needs to be passed throught this clausule: session.query(f'event_code == {win_code[session_title]}')\n            # that means, must exist an event_code 4100 or 4110\n            if test_set:\n                all_assessments.append(features)\n            elif true_attempts+false_attempts > 0:\n                all_assessments.append(features)\n                \n            counter += 1\n        \n        # this piece counts how many actions was made in each event_code so far\n        n_of_event_codes = Counter(session['event_code'])\n        \n        for key in n_of_event_codes.keys():\n            event_code_count[key] += n_of_event_codes[key]\n            # counts how many actions the player has done so far, used in the feature of the same name\n        accumulated_actions += len(session)\n        if last_activity != session_type:\n            user_activities_count[session_type] += 1\n            last_activitiy = session_type \n                        \n    # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return all_assessments[-1]\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments\n\n\ndef get_train_and_test(train, test):\n    compiled_train = []\n    compiled_test = []\n    for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort = False)), total = 17000):\n        compiled_train += get_data(user_sample)\n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort = False), total = 1000):\n        test_data = get_data(user_sample, test_set = True)\n        compiled_test.append(test_data)\n    reduce_train = pd.DataFrame(compiled_train)\n    reduce_test = pd.DataFrame(compiled_test)\n    categoricals = ['session_title']\n    return reduce_train, reduce_test, categoricals","b552ae97":"train, test, train_labels, specs, sample_submission = read_data()\n# get usefull dict with maping encode\ntrain, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels = encode_title(train, test, train_labels)\n# tranform function to get the train and test set\nreduce_train, reduce_test, categoricals = get_train_and_test(train, test)","24cca6f6":"def preprocess(reduce_train, reduce_test):\n    for df in [reduce_train, reduce_test]:\n        df['installation_session_count'] = df.groupby(['installation_id'])['Clip'].transform('count')\n        df['installation_duration_mean'] = df.groupby(['installation_id'])['duration_mean'].transform('mean')\n        #df['installation_duration_std'] = df.groupby(['installation_id'])['duration_mean'].transform('std')\n        df['installation_title_nunique'] = df.groupby(['installation_id'])['session_title'].transform('nunique')\n        \n        df['sum_event_code_count'] = df[[2050, 4100, 4230, 5000, 4235, 2060, 4110, 5010, 2070, 2075, 2080, 2081, 2083, 3110, 4010, 3120, 3121, 4020, 4021, \n                                        4022, 4025, 4030, 4031, 3010, 4035, 4040, 3020, 3021, 4045, 2000, 4050, 2010, 2020, 4070, 2025, 2030, 4080, 2035, \n                                        2040, 4090, 4220, 4095]].sum(axis = 1)\n        \n        df['installation_event_code_count_mean'] = df.groupby(['installation_id'])['sum_event_code_count'].transform('mean')\n        #df['installation_event_code_count_std'] = df.groupby(['installation_id'])['sum_event_code_count'].transform('std')\n        \n    features = reduce_train.loc[(reduce_train.sum(axis=1) != 0), (reduce_train.sum(axis=0) != 0)].columns # delete useless columns\n    features = [x for x in features if x not in ['accuracy_group', 'installation_id']]\n    return reduce_train, reduce_test, features\n# call feature engineering function\nreduce_train, reduce_test, features = preprocess(reduce_train, reduce_test)","f9ad99b9":"import h2o\nh2o.init(\n  nthreads=-1,            ## -1: use all available threads\n  max_mem_size = \"8G\")  \n","db7eda9b":"# names1=list(reduce_train.columns)\n# names1.remove('accuracy_group')\n# names1.remove('installation_id')","48dc6813":"#type(reduce_test)\n#f = lambda x: np.sign(x) * np.power(abs(x), 1.\/2)\nreduce_train1=reduce_train\n#reduce_train1[names1]=(reduce_train1[names1]-reduce_train1[names1].min())\/(reduce_train1[names1].max()-reduce_train1[names1].min())\n#reduce_train1[names]=f(reduce_train[names])\nreduce_train1.columns = reduce_train1.columns.map(str)\nXX=h2o.H2OFrame(reduce_train1)\n#XX[names]=f(XX[names])","d3dd2288":"reduce_test1=reduce_test\n#reduce_test1[names]=f(reduce_test[names])\n#reduce_test1[names1]=(reduce_test1[names1]-reduce_test1[names1].min())\/(reduce_test1[names1].max()-reduce_test1[names1].min())\nreduce_test1.columns = reduce_test1.columns.map(str)\ntest=h2o.H2OFrame(reduce_test1)\n#XX1[names]=f(XX1[names])","12071fe2":"XX[\"accuracy_group\"] = XX[\"accuracy_group\"].asfactor()\nnames=list(XX.columns)\nnames.remove('accuracy_group')\nnames.remove('installation_id')","291a2e02":"param = {\n      \"ntrees\" : 200\n    , \"max_depth\" : 10\n    , \"learn_rate\" : 0.02\n    , \"sample_rate\" : 0.7\n    , \"col_sample_rate_per_tree\" : 0.9\n    , \"min_rows\" : 5\n    , \"seed\": 4241\n    , \"score_tree_interval\": 100,\"stopping_metric\" :\"MSE\",\"nfolds\":8,\"fold_assignment\":\"AUTO\",\"keep_cross_validation_predictions\" : True,\"booster\":\"dart\"\n}\nfrom h2o.estimators import H2OXGBoostEstimator\nmodel_xgb = H2OXGBoostEstimator(**param)\nmodel_xgb.train(x = names, y = \"accuracy_group\", training_frame = XX)","8696838c":"model_xgb","338413a2":"param = {\n      \"ntrees\" : 500\n    , \"max_depth\" : 5\n    , \"learn_rate\" : 0.02\n    , \"sample_rate\" : 0.7\n    , \"col_sample_rate_per_tree\" : 0.9\n    , \"min_rows\" : 5\n    , \"seed\": 4241\n    , \"score_tree_interval\": 100,\"stopping_metric\" :\"MSE\",\"nfolds\":8,\"fold_assignment\":\"AUTO\",\"keep_cross_validation_predictions\" : True\n}\nfrom h2o.estimators import H2OXGBoostEstimator\nmodel_xgb2 = H2OXGBoostEstimator(**param)\nmodel_xgb2.train(x = names, y = \"accuracy_group\", training_frame = XX)","dbbff268":"model_xgb2","e94da1e6":"param = {\n      \"ntrees\" : 200\n    , \"max_depth\" : 10\n    , \"learn_rate\" : 0.02\n    , \"sample_rate\" : 0.7\n    , \"col_sample_rate_per_tree\" : 0.9\n    , \"min_rows\" : 5\n    , \"seed\": 4241\n    , \"score_tree_interval\": 100,\"stopping_metric\" :\"MSE\",\"nfolds\":8,\"fold_assignment\":\"AUTO\",\"keep_cross_validation_predictions\" : True\n}\nfrom h2o.estimators import H2OXGBoostEstimator\nmodel_xgb3 = H2OXGBoostEstimator(**param)\nmodel_xgb3.train(x = names, y = \"accuracy_group\", training_frame = XX)","b58d1565":"model_xgb3","ca8901e3":"param = {\n      \"ntrees\" : 200\n    , \"max_depth\" : 10\n    #, \"learn_rate\" : 0.02\n    , \"sample_rate\" : 0.7\n    , \"col_sample_rate_per_tree\" : 0.9\n    , \"min_rows\" : 5\n    , \"seed\": 4241\n    , \"score_tree_interval\": 100,\"stopping_metric\" :\"logloss\",\"nfolds\":8,\"fold_assignment\":\"AUTO\",\"keep_cross_validation_predictions\" : True\n}\nfrom h2o.estimators.random_forest import H2ORandomForestEstimator\nmodel_rf = H2ORandomForestEstimator(**param)\nmodel_rf.train(x = names, y = \"accuracy_group\", training_frame = XX)","2d1a9d3a":"model_rf","e8709664":"param = {\n    \"hidden\":[32,32,32],\n    \"epochs\":1000,\n    \"stopping_tolerance\":0.01,\n    \"seed\":4241,\n    \"activation\":\"Tanh\",\n    \"stopping_metric\" :\"MSE\",\"nfolds\":8,\"fold_assignment\":\"AUTO\",\"keep_cross_validation_predictions\" : True\n}\nfrom h2o.estimators import H2ODeepLearningEstimator\nmodel_dl1 = H2ODeepLearningEstimator(**param)\nmodel_dl1.train(x = names, y = \"accuracy_group\", training_frame = XX)\n","d3d32891":"model_dl1","b4c82738":"from h2o.estimators import H2OStackedEnsembleEstimator\nstack = H2OStackedEnsembleEstimator(model_id=\"ensemble11\",\n                                       training_frame=XX,\n                                       #validation_frame=test,\n                                       base_models=[model_xgb.model_id,model_xgb2.model_id,model_xgb3.model_id, model_rf.model_id,model_dl1.model_id],metalearner_algorithm=\"glm\")\nstack.train(x=names, y=\"accuracy_group\", training_frame=XX)\n#stack.model_performance()","da5eedbc":"stack","affa6f0c":"prediction = stack.predict(test)","5ae2c9ef":"pred_all=prediction.as_data_frame()","cd891314":"pred_all['prob']=pred_all['p1']+pred_all['p2']*2+pred_all['p3']*3","25fecb43":"coefficients = [1.12232214, 1.73925866, 2.22506454]\nimport numpy\noof=list(pred_all['prob'])\ni=0\nwhile i < len(oof):\n    if oof[i]<=coefficients[0]:\n        oof[i]=0\n    if oof[i]>coefficients[0] and oof[i]<=coefficients[1]:\n        oof[i]=1\n    if oof[i]>coefficients[1] and oof[i]<=coefficients[2]:\n        oof[i]=2\n    if oof[i]>coefficients[2]:\n        oof[i]=3\n    i=i+1","a2dc1cce":"#oof=list(pred_all['prob'])\npred_all['prob']=oof\nfinal_sub=pd.DataFrame(reduce_test[\"installation_id\"])\nfinal_sub[\"accuracy_group\"]=pred_all['prob']\n\n","759a63a2":"final_sub.to_csv('submission.csv', index = False)","96c37a47":"Converting train and test in h2o data frame format","f74b921c":"Predicting","a760c4d3":"Calculating prediction probability","7cc5eb15":"Random Forest h2o model","986a6816":"Below is the Data preprocessing and feature extraction","b10b671d":"Loading h2o cluster on local host.","f971c9c0":"Simple XGBoost model h2o ","70556eed":"Ensemble model of all three, to ensemble the `nfolds` and `\"keep_cross_validation_predictions\" : True` should be same.","b452fd0c":"Deep learning model h2o"}}