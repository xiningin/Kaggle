{"cell_type":{"9bc895c6":"code","d59acb0a":"code","d31dc28b":"code","fccdfdf9":"code","67e673c6":"code","7255332d":"code","4842cb65":"code","4e483374":"markdown","14d61ee7":"markdown","e5ed4124":"markdown","597a8ad4":"markdown","ab91cb98":"markdown","7bc22bb6":"markdown"},"source":{"9bc895c6":"import pandas as pd\nimport numpy as np\nimport lightgbm as lgb\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold\nimport optuna","d59acb0a":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsample_submission = pd.read_csv('..\/input\/gender_submission.csv')","d31dc28b":"# Sex\u3068Embarked\u306eOne-Hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ntrain = pd.get_dummies(train, columns=['Sex', 'Embarked'])\ntest = pd.get_dummies(test, columns=['Sex', 'Embarked'])\n\n# \u4e0d\u8981\u306a\u5217\u306e\u524a\u9664\ntrain.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\ntest.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\n\n# train\u306e\u8868\u793a\ndisplay(train.head())\n\nX_train = train.drop(['Survived'], axis=1)  # X_train\u306ftrain\u306eSurvived\u5217\u4ee5\u5916\nY_train = train['Survived']  # Y_train\u306ftrain\u306eSurvived\u5217","fccdfdf9":"def objective(trial):\n    kf = KFold(n_splits=3)\n    gbm = lgb.LGBMClassifier(objective='binary')\n    oof = np.zeros(len(train))\n\n    for fold, (train_index, valid_index) in enumerate(kf.split(X_train, Y_train)):\n        train_x, valid_x = X_train.iloc[train_index], X_train.iloc[valid_index]\n        train_y, valid_y  = Y_train[train_index], Y_train[valid_index]\n        gbm = lgb.LGBMClassifier(objective='binary',\n                                 reg_alpha=trial.suggest_loguniform('reg_alpha', 1e-4, 100.0),\n                                 reg_lambda=trial.suggest_loguniform('reg_lambda', 1e-4, 100.0),\n                                 silent=True)\n        gbm.fit(train_x, train_y, eval_set = [(valid_x, valid_y)],\n                early_stopping_rounds=20,\n                verbose= -1) # \u5b66\u7fd2\u306e\u72b6\u6cc1\u3092\u8868\u793a\u3057\u306a\u3044\n        oof[valid_index] = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\n\n    accuracy = accuracy_score(Y_train, oof)\n    return 1.0 - accuracy\n    ","67e673c6":"study = optuna.create_study(sampler=optuna.samplers.RandomSampler(seed=0))\n# \u30b7\u30fc\u30c9\u3092\u56fa\u5b9a\u3002\n# \u53c2\u8003\uff1ahttps:\/\/qiita.com\/phorizon20\/items\/1b795beb202c2dc378ed\n\nstudy.optimize(objective, n_trials=100)","7255332d":"kf = KFold(n_splits=3)\noof = np.zeros(len(train))\nfor fold, (train_index, valid_index) in enumerate(kf.split(X_train, Y_train)):\n    train_x, valid_x = X_train.iloc[train_index], X_train.iloc[valid_index]\n    train_y, valid_y  = Y_train[train_index], Y_train[valid_index]\n\n    gbm = lgb.LGBMClassifier(objective='binary')\n    gbm.fit(train_x, train_y, eval_set = [(valid_x, valid_y)],\n            early_stopping_rounds=20,\n            verbose= -1) # \u5b66\u7fd2\u306e\u72b6\u6cc1\u3092\u8868\u793a\u3057\u306a\u3044\n    \n    oof[valid_index] = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\n\nround(accuracy_score(Y_train, oof), 3)","4842cb65":"kf = KFold(n_splits=3)\noof = np.zeros(len(train))\nfor fold, (train_index, valid_index) in enumerate(kf.split(X_train, Y_train)):\n    train_x, valid_x = X_train.iloc[train_index], X_train.iloc[valid_index]\n    train_y, valid_y  = Y_train[train_index], Y_train[valid_index]\n\n    gbm = lgb.LGBMClassifier(objective='binary',\n                            reg_alpha=0.19628224813442816,\n                            reg_lambda=1.9549524484259886)\n    gbm.fit(train_x, train_y, eval_set = [(valid_x, valid_y)],\n            early_stopping_rounds=20,\n            verbose= -1) # \u5b66\u7fd2\u306e\u72b6\u6cc1\u3092\u8868\u793a\u3057\u306a\u3044\n    oof[valid_index] = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\n\nround(accuracy_score(Y_train, oof), 3)","4e483374":"* reg_alpha\u3068reg_lambda\u3092\u30ed\u30b0\u30b9\u30b1\u30fc\u30eb\uff08trial.suggest_loguniform\uff09\u3067\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u3053\u3068\u306b\u3059\u308b\u3002  \n\n\u305d\u306e\u4ed6\u3001suggest_categorical\u3001suggest_discrete_uniform\u3001suggest_int\u3001suggest_uniform\u3001ptuna.trial.FixedTrial\u306a\u3069\u3092\u9078\u629e\u3067\u304d\u308b\u3002  \n\u8a73\u3057\u304f\u306f\u3001[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/trial.html)\u3092\u53c2\u7167","14d61ee7":"# \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","e5ed4124":"optuna\u3092\u4f7f\u3063\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u3057\u3066\u307f\u308b\n\n- LightGBM\u306eScikit-learn\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f7f\u3063\u3066\u3001\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306e\u30c7\u30fc\u30bf\u3067\u3001reg_alpha\u3068reg_lambda\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u307f\u308b\u4f8b\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\n- LightGBM\u306eScikit-learn\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f7f\u308f\u306a\u3044\u4f8b\u306f\u3001[\u516c\u5f0f\u306eexamples](https:\/\/github.com\/pfnet\/optuna\/blob\/master\/examples\/lightgbm_simple.py)\u7b49\u3092\u53c2\u7167\u304f\u3060\u3055\u3044","597a8ad4":"# \u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u5f8c","ab91cb98":"# \u30c7\u30d5\u30a9\u30eb\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf","7bc22bb6":"# \u53c2\u8003\n- [Welcome to Optuna\u2019s documentation\\! \u2014 Optuna 0\\.10\\.0 documentation](https:\/\/optuna.readthedocs.io\/en\/stable\/index.html)\n- [pfnet\/optuna: A hyperparameter optimization framework](https:\/\/github.com\/pfnet\/optuna)"}}