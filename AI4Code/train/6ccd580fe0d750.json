{"cell_type":{"0a946e5c":"code","5b09581f":"code","0fdfe4c5":"code","29fb88c9":"code","f130b0d8":"code","17202e93":"code","2da47d55":"code","43537a61":"code","8bd1a939":"code","d3ced7f8":"code","18f59643":"code","11a114d5":"code","0272bce9":"markdown","a02ae41c":"markdown","939403bc":"markdown","ab252df9":"markdown","922caefa":"markdown","8ccccf47":"markdown"},"source":{"0a946e5c":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.svm import LinearSVR, SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor","5b09581f":"data = pd.read_csv('..\/input\/absenteeism-at-work-uci-ml-repositiory\/Absenteeism_at_work.csv', delimiter=';')","0fdfe4c5":"data","29fb88c9":"data.info()","f130b0d8":"def onehot_encode(df, column, prefix):\n    df = df.copy()\n    \n    dummies = pd.get_dummies(df[column], prefix=prefix)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    \n    return df","17202e93":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop ID columns\n    df = df.drop('ID', axis=1)\n    \n    # One-hot encode the reason column\n    df = onehot_encode(\n        df,\n        column='Reason for absence',\n        prefix='Reason'\n    )\n    \n    # Split df into X and y\n    y = df['Absenteeism time in hours'].copy()\n    X = df.drop('Absenteeism time in hours', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=123)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    \n    X_train = pd.DataFrame(scaler.transform(X_train), columns=X.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), columns=X.columns)\n    \n    return X_train, X_test, y_train, y_test","2da47d55":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","43537a61":"X_train","8bd1a939":"y_train","d3ced7f8":"models = {\n    \"                     Linear Regression\": LinearRegression(),\n    \"                   K-Nearest Neighbors\": KNeighborsRegressor(),\n    \"                        Neural Network\": MLPRegressor(),\n    \"Support Vector Machine (Linear Kernel)\": LinearSVR(),\n    \"   Support Vector Machine (RBF Kernel)\": SVR(),\n    \"                         Decision Tree\": DecisionTreeRegressor(),\n    \"                         Random Forest\": RandomForestRegressor(),\n    \"                     Gradient Boosting\": GradientBoostingRegressor(),\n    \"                               XGBoost\": XGBRegressor(),\n    \"                              LightGBM\": LGBMRegressor(),\n    \"                              CatBoost\": CatBoostRegressor(verbose=0)\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")","18f59643":"for name, model in models.items():\n    print(name + \" R^2 Score: {:.5f}\".format(model.score(X_test, y_test)))","11a114d5":"svm_model = SVR(C=15.0)\nsvm_model.fit(X_train, y_train)\n\nprint(\"Support Vector Machine R^2: {:.5f}\".format(svm_model.score(X_test, y_test)))","0272bce9":"# Task for Today  \n\n***\n\n## Absentee Prediction  \n\nGiven *data about absenteeism of employees*, let's try to predict **how many hours** a given employee will be absent.\n\nWe will use various regression models to make our predictions. ","a02ae41c":"# Training","939403bc":"# Preprocessing","ab252df9":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/qko_4h1ayMI","922caefa":"# Getting Started","8ccccf47":"# Results"}}