{"cell_type":{"f3e2fc61":"code","af5ca258":"code","ef659759":"code","ee19fa99":"code","f1442e19":"code","24b0bd18":"code","5a8b6da2":"code","f59870b0":"code","1822b853":"code","507529d1":"code","142b48d2":"code","ba18e836":"code","4ec0f9d0":"markdown","f7190538":"markdown","657fde5c":"markdown","37dd73a7":"markdown","e093d8e5":"markdown","67cb0067":"markdown","83d99067":"markdown","41d2072b":"markdown","b7a4f63f":"markdown","a3de6571":"markdown","815c0f97":"markdown","59d0b031":"markdown","e8e68179":"markdown"},"source":{"f3e2fc61":"from IPython.display import display, Image\nfrom matplotlib import animation\nfrom IPython.display import HTML","af5ca258":"Image(url='https:\/\/cdn-images-1.medium.com\/max\/600\/1*GdxHFaUDbvTXJreKg3S8SQ.gif')","ef659759":"# Import the required libraries\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense","ee19fa99":"# Initializing the CNN\nClassifier=Sequential()","f1442e19":"# Adding layers into CNN architecture\n# Convolution Step\nClassifier.add(Convolution2D(32,(3,3),input_shape=(64,64,3),activation='relu'))\n# Pooling Step\nClassifier.add(MaxPooling2D(pool_size=(2,2)))\n#Flattening Step\nClassifier.add(Flatten())\n# Fully Connected Layer\nClassifier.add(Dense(128,activation='relu'))\nClassifier.add(Dense(1,activation='sigmoid'))","24b0bd18":"# Compiling the model\nClassifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n","5a8b6da2":"# Image Preprocessing Step\nfrom keras.preprocessing.image import ImageDataGenerator\n","f59870b0":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)","1822b853":"test_datagen = ImageDataGenerator(rescale = 1.\/255)","507529d1":"training_set = train_datagen.flow_from_directory('\/kaggle\/input\/dogs-cats-images\/dataset\/training_set',\n                                                 target_size = (64, 64),\n                                                 batch_size = 32,\n                                                 class_mode = 'binary')","142b48d2":"test_set = test_datagen.flow_from_directory('\/kaggle\/input\/dogs-cats-images\/dataset\/test_set',\n                                            target_size = (64, 64),\n                                            batch_size = 32,\n                                            class_mode = 'binary')","ba18e836":"Classifier.fit_generator(training_set,\n                         steps_per_epoch = 8000,\n                         epochs = 5,\n                         validation_data = test_set,\n                         validation_steps = 2000)","4ec0f9d0":"# 4. CONCLUSIONS","f7190538":"Here I took only 5 epochs because it takes time to train. But it is always good to use more epochs than 5. ","657fde5c":"# 1. INTRODUCTION","37dd73a7":"Simple idea is like this:","e093d8e5":"# 5. SUGGESTIONS\n\nHow can we increase the accuracy of our test set over 80%?. We can,\n* Add another convolutional layer - Add this second convolutional layer after the first convolutional layer and the max-pooling step, but before the flattening step.\n\n* Add another fully connected layer.\n\n* Increace the number of epochs. (use 10,25 etc)\n\nare some of them.","67cb0067":"\nHere we got the images of 10,000 cats and dogs. We don't have rows and columns like our usual datasets. Instead of that, we have two separate files including images of cats and dogs.\n* Train Set (8000) -Cats:4000,Dogs:4000\n* Test Set (2000) - Cats:1000,Dogs:1000","83d99067":"# 3. METHODOLOGY","41d2072b":"* Accuracy of the train set - 95%\n* Accuracy of the test set - 75%\n\nThis means our Convolutional neural network (CNN) correctly classify the images of cats and dogs where the model hasn't seen before with 75% accuracy. Therefore this is a pretty a much good fit.\n","b7a4f63f":"## Thank You !!!\n### Leave any comment or feedback","a3de6571":"We input our images into our CNN. \n\n* Convolutional Step- Feature detector applied to detect certain features in our input image. Using that feature detector we create many feature maps to obtain our convolutional layer with the help of 'Relu' activation function. The purpose of using 'Relu' is to increase the non-linearity in our image.\n\n* Pooling - Its function is to progressively reduce the spatial size of the representation to reduce the number of parameters and computation in the network. Pooling layer operates on each feature map independently.\nThe most common approach used in pooling is max pooling.\n\n* Flattening - Taking all our pooled feature maps and put them into one single vector, which are the inputs for the next layer.\n\n* Fully Connected layer - Outputs of the fattening step are the inputs for a fully connected layer. In here it takes the results of the convolution\/pooling process and uses them to classify the image into a label (Dog or Cat).\n\n\n","815c0f97":"# 2. OBJECTIVE\n\n* To create a system that can detect cats and dogs.","59d0b031":"![image.png](attachment:image.png)","e8e68179":"Since this is an image classification problem, I used supervised deep learning model called Convolutional Neural Network (CNN). \n\nAnalysis Procedure: **Building the CNN**\n1. Import the required models and layers\n2. Initializing the CNN\n3. Convolution Step\n4. Pooling Step\n5. Flattening Step\n6. Fully Connected layers\n7. Compiling the CNN\n8. Image Preprocessing step"}}