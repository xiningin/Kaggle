{"cell_type":{"6ffae75d":"code","1619a3bd":"code","abdd0c85":"code","3b21001f":"code","6cfceba5":"code","1439f5cc":"code","931fe9b3":"code","87f484e2":"code","1b4d2bf6":"code","6a7ef558":"code","2e6698a9":"code","f50b09a8":"code","5ef54023":"code","bdddc884":"code","1785e3d7":"code","11fa2263":"code","da7362c4":"code","4c3774cb":"code","7810ee6e":"code","f44296c8":"code","14e6462d":"code","0a5227ac":"code","b151955b":"code","96434a8a":"code","f7eed8b4":"markdown","dbe183fe":"markdown","e5738ac4":"markdown","38043cc7":"markdown","ee7f26e8":"markdown","c6468847":"markdown"},"source":{"6ffae75d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/plant-seedlings-classification\/test'):\n    for filename in filenames:\n        dirname\n        #print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1619a3bd":"import cv2\nimport os\ncount=1;\nall_images=[]\nall_class=[];\npath='\/kaggle\/input\/plant-seedlings-classification\/train\/'\nentries = os.listdir('\/kaggle\/input\/plant-seedlings-classification\/train\/')\nfor entry in entries:\n  for image_path in os.listdir(path+entry):\n    img = cv2.imread(path+entry+'\/'+image_path)\n    img=cv2.resize(img,(32,32))\n    GREEN_MIN = np.array([25, 52, 72],np.uint8)\n    GREEN_MAX = np.array([102, 255, 255],np.uint8)\n    hsv_img = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)\n    frame_threshed = cv2.inRange(hsv_img, GREEN_MIN, GREEN_MAX)\n    all_images.append(frame_threshed)\n    all_class.append(entry)\n\n    \n\n \nX_train=np.array(all_images)\ny_train=np.array(all_class)","abdd0c85":"X_train.shape","3b21001f":"train_images=[]\nall_class=[]\nimage_name=[]\npath='\/kaggle\/input\/plant-seedlings-classification\/test\/'\n\n\nfor image_path in os.listdir(path):\n  img = cv2.imread(path+image_path)\n  img=cv2.resize(img,(32,32))\n  GREEN_MIN = np.array([25, 52, 72],np.uint8)\n  GREEN_MAX = np.array([102, 255, 255],np.uint8)\n  hsv_img = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)\n  frame_threshed = cv2.inRange(hsv_img, GREEN_MIN, GREEN_MAX)\n  train_images.append(frame_threshed)\n  all_class.append(entry)\n  image_name.append(image_path)\n\n    \n\n \nx_test=np.array(train_images)","6cfceba5":"\nall_class=[]\npath='\/kaggle\/input\/plant-seedlings-classification\/train\/'\nentries = os.listdir('\/kaggle\/input\/plant-seedlings-classification\/train\/')\nfor entry in entries:\n  print(entry)","1439f5cc":"y_train=[]\ntrain_classes=[]\npath='\/kaggle\/input\/plant-seedlings-classification\/train\/'\nentries = os.listdir('\/kaggle\/input\/plant-seedlings-classification\/train\/')\nfor entry in entries:\n  for image_path in os.listdir(path+entry):\n    train_classes.append(entry)\n    \ny_train=np.array(train_classes)","931fe9b3":"y_train=np.where(y_train=='Common Chickweed',11, y_train) \ny_train=np.where(y_train=='Charlock', 3, y_train) \ny_train=np.where(y_train=='Shepherds Purse', 1, y_train) \ny_train=np.where(y_train=='Black-grass', 8, y_train) \ny_train=np.where(y_train=='Cleavers', 7, y_train) \ny_train=np.where(y_train=='Scentless Mayweed', 10, y_train) \ny_train=np.where(y_train=='Common wheat', 6, y_train) \ny_train=np.where(y_train=='Fat Hen', 2, y_train) \ny_train=np.where(y_train=='Maize', 5, y_train) \n\ny_train=np.where(y_train=='Loose Silky-bent', 0, y_train) \ny_train=np.where(y_train=='Sugar beet', 4, y_train) \ny_train=np.where(y_train=='Small-flowered Cranesbill', 9, y_train) ","87f484e2":"from keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation\nfrom keras.layers.core import Flatten\nfrom keras.layers.core import Dropout\nfrom keras.layers.core import Dense\nfrom keras.utils import np_utils\nimport tensorflow as tf\nfrom keras.callbacks import EarlyStopping\nfrom keras.optimizers import SGD","1b4d2bf6":"trainY=np_utils.to_categorical(y_train,12)","6a7ef558":"trainX =X_train\/255\ntestX=x_test\/255","2e6698a9":"trainX=trainX.reshape(trainX.shape[0],32,32,1).astype('float32') \ntestX=testX.reshape(testX.shape[0],32,32,1).astype('float32') ","f50b09a8":"trainX.shape","5ef54023":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(32, 32, 1), padding='valid', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2 , padding='same'))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(32, (3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D())\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(12, activation='softmax'))\n# Compile model\nepochs = 40\nlrate = 0.01\ndecay = lrate\/epochs\n          \n#sgd = SGD(lr=lrate, momentum=0.9, decay=decay, nesterov=False)\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'] , )\nmodel.summary()","bdddc884":"\nepochs=5\nearly_stopping = EarlyStopping(monitor='acc', patience=2, verbose=1, mode='auto')\ncallback_list = [early_stopping]# [stats, early_stopping]\n\nmodel.fit(trainX, trainY,epochs=epochs, batch_size=32 , callbacks=callback_list)","1785e3d7":"pred_class=model.predict_classes(testX)","11fa2263":"pred_class","da7362c4":"pred_class=np.where(pred_class=='11', 'Common Chickweed',pred_class) \npred_class=np.where(pred_class== '3','Charlock', pred_class) \npred_class=np.where(pred_class== '2','Shepherds Purse', pred_class) \npred_class=np.where(pred_class== '8','Black-grass', pred_class) \npred_class=np.where(pred_class== '7', 'Cleavers',pred_class) \npred_class=np.where(pred_class== '10','Scentless Mayweed', pred_class) \npred_class=np.where(pred_class== '6', 'Common wheat',pred_class) \npred_class=np.where(pred_class== '2', 'Fat Hen',pred_class) \npred_class=np.where(pred_class=='5', 'Maize', pred_class) \npred_class=np.where(pred_class== '0', 'Loose Silky-bent',pred_class) \npred_class=np.where(pred_class== '4', 'Sugar beet',pred_class) \npred_class=np.where(pred_class== '9', 'Small-flowered Cranesbill',pred_class) \n","4c3774cb":"pred_class","7810ee6e":"cnt=0\nresult=[]\ndf_result=pd.DataFrame()\nfor x in pred_class:\n    result.append(image_name[cnt]+\",\"+pred_class[cnt])\n    \n    cnt=cnt+1\n","f44296c8":"import pandas as pd\ndf=pd.DataFrame(result)","14e6462d":"df_result1=pd.DataFrame()\n\ndf_result1['file']=image_name\ndf_result1['species']=pred_class","0a5227ac":"result","b151955b":"df_result1","96434a8a":"df_result1.to_excel('sample_submission.xlsx',index=False)","f7eed8b4":"**Mapping Class ID to Class Name**","dbe183fe":"**To export the result in Excel File**","e5738ac4":"**Test Data**","38043cc7":"**In this Kernel, I have tried to identify the plant seedling using canny edge detection algorithm. The following steps are used for Pre-processing:\n\n    1.Reshape the image to 32 * 32,\n    2.Convert the image to HSV,\n    3.Applied Green color Max and Min threshold - To identify the plant leafs outline.\n    4.Convert the image to gray scale\n    5.Create the base model and train the images\n    6.Model returns 65% accuracy for test dataset.**","ee7f26e8":"    **Train Data**\n    1.Reshaping the image to 32*32\n    2.Applying Green color Min & Max threshold to identify the leat outline","c6468847":"**ACCURACY - 67.03%**"}}