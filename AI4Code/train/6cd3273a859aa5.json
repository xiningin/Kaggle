{"cell_type":{"c9a6826a":"code","8c533e70":"code","6769afbd":"code","6913e33f":"code","9df1e7d1":"code","12ca0589":"code","2280ce94":"code","59a242d3":"code","7ff3531c":"code","4f353d99":"code","5833cef0":"code","64f60e4f":"code","e897af5b":"code","a3d631a5":"code","0edce1ab":"code","76d35c3e":"code","d0979bae":"code","8e200302":"code","783a1d0d":"code","bed7d554":"code","d3723f6b":"code","584aad4f":"code","d84539a4":"code","c17112f7":"code","937fbab8":"code","cca8fee2":"code","42024d11":"code","b433f873":"code","5cd9db46":"code","bb9a28c6":"code","f13bea51":"code","38636fb2":"code","f3e0f2b5":"code","05b13b6a":"code","f72f12e8":"code","de37b2fd":"code","897dbf1b":"code","4ca4870d":"code","98d789e5":"code","ff73d680":"code","94a26461":"code","a7cc6df0":"code","f265ad5a":"code","c79d512b":"code","1251b7f0":"code","0c75e7c3":"code","301f0a8f":"code","9f4189fc":"code","423ad997":"code","5d59b266":"code","22dc028c":"code","65ce285b":"code","3f17312e":"code","0f1971ac":"code","9eca5e23":"code","ca4e5f99":"code","1d350045":"code","96698e59":"code","96974124":"code","2eed22e4":"code","18570e71":"code","ee862613":"code","44ef0a3c":"code","47707e79":"code","6716b54d":"code","c0838e7f":"code","ce8ee41c":"code","015fd368":"code","72343093":"markdown","03089cca":"markdown","dcaf9457":"markdown","1ffa067f":"markdown","952cee46":"markdown","f8d33848":"markdown","2bf9f271":"markdown","af5a64a3":"markdown"},"source":{"c9a6826a":"import warnings\nwarnings.filterwarnings('ignore')\nimport gc\nimport os\nimport sys\nimport datetime\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm_notebook\nfrom scipy.sparse import hstack,csr_matrix\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nfrom collections import Counter\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom joblib import Parallel,delayed\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.feature_selection import SelectPercentile\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import OneHotEncoder,StandardScaler,LabelEncoder","8c533e70":"%%time\ntrain = pd.read_csv('..\/input\/train.csv',)\ntest = pd.read_csv('..\/input\/test.csv')\nht = pd.read_csv('..\/input\/historical_transactions.csv')\nnmt = pd.read_csv('..\/input\/new_merchant_transactions.csv')","6769afbd":"#\u65e5\u671f\u53d8\u6362\ntrain['first_active_month'] = pd.to_datetime(train['first_active_month'])\ntest['first_active_month'] = pd.to_datetime(test['first_active_month'])\nht['purchase_date'] = pd.to_datetime(ht['purchase_date'])\nht['purchase_year'] = ht['purchase_date'].dt.year\nht['purchase_year'] = ht['purchase_year'].astype(np.int32)\nht['purchase_hour'] = ht['purchase_date'].dt.hour\nht['purchase_month'] = ht['purchase_date'].dt.month\nht['purchase_month'] = ht['purchase_month'].astype(np.int16)\nnmt['purchase_date'] = pd.to_datetime(nmt['purchase_date'])\nnmt['purchase_year'] = nmt['purchase_date'].dt.year\nnmt['purchase_month'] = nmt['purchase_date'].dt.month\nnmt['purchase_hour'] = nmt['purchase_date'].dt.hour","6913e33f":"#\u7f3a\u5931\u503c\u586b\u5145\nht['category_2'] = ht['category_2'].fillna(0)\nht['category_3'] = ht['category_3'].fillna('E')\nnmt['category_2'] = nmt['category_2'].fillna(0)\nnmt['category_3'] = nmt['category_3'].fillna('E')\nht['category_2'] = ht['category_2'].astype(np.int16)\nnmt['category_2'] = nmt['category_2'].astype(np.int16)","9df1e7d1":"train['feature_1'] = train['feature_1'].astype(str)\ntrain['feature_2'] = train['feature_2'].astype(str)\ntrain['feature_3'] = train['feature_3'].astype(str)\ntest['feature_1'] = test['feature_1'].astype(str)\ntest['feature_2'] = test['feature_2'].astype(str)\ntest['feature_3'] = test['feature_3'].astype(str)","12ca0589":"#\u6fc0\u6d3b\u65e5\u671f\u8ddd\u79bb\u4eca\u5929\u7684\u65f6\u95f4\ntrain['active_till_now'] = train['first_active_month'].map(lambda x:(datetime.datetime.today() - x).days)\ntest['active_till_now'] = test['first_active_month'].map(lambda x:(datetime.datetime.today() - x).days)","2280ce94":"#\u7edf\u8ba1\u572824\u5c0f\u65f6\u5185\u7684\u8d2d\u4e70\u8bb0\u5f55\u6b21\u6570\nhour_purchase_cnt = pd.pivot_table(ht,values='month_lag',index='card_id',columns=['purchase_hour'],aggfunc=len,fill_value=0)\nhour_purchase_cnt.columns = ['purchase_hour_%s'%str(i) for i in range(24)]\nhour_purchase_cnt.reset_index(inplace=True)\ntrain = pd.merge(train,hour_purchase_cnt,on='card_id',how='left')\ntest = pd.merge(test,hour_purchase_cnt,on='card_id',how='left')\ndel hour_purchase_cnt\ngc.collect()","59a242d3":"#\u7edf\u8ba1\u572824\u5c0f\u65f6\u5185\u7684\u8d2d\u4e70\u8bb0\u5f55\u6b21\u6570\nhour_sub_id = pd.pivot_table(ht,values='month_lag',index='card_id',columns=['subsector_id'],aggfunc=len,fill_value=0)\nhour_sub_id.columns = ['sub_id_%s'%str(i) for i in range(ht['subsector_id'].nunique())]\nhour_sub_id.reset_index(inplace=True)\ntrain = pd.merge(train,hour_sub_id,on='card_id',how='left')\ntest = pd.merge(test,hour_sub_id,on='card_id',how='left')\ndel hour_sub_id\ngc.collect()","7ff3531c":"#\u7edf\u8ba1\u5728\u5386\u53f2\u4e0a\u6bcf\u4e2a\u6708\u7684\u8d2d\u4e70\u6b21\u6570\nym_purchase_cnt = pd.pivot_table(ht,values='month_lag',index='card_id',columns=['purchase_year','purchase_month'],aggfunc=len,fill_value=0)\nym_purchase_cnt.columns = ['purchase_ym_%s'%str(i) for i in range(ym_purchase_cnt.shape[1])]\nym_purchase_cnt.reset_index(inplace=True)\ntrain = pd.merge(train,ym_purchase_cnt,on='card_id',how='left')\ntest = pd.merge(test,ym_purchase_cnt,on='card_id',how='left')\ndel ym_purchase_cnt\ngc.collect()","4f353d99":"#\u7edf\u8ba1\u572824\u5c0f\u65f6\u5185\u7684\u5e73\u5747\u8d2d\u4e70\u91d1\u989d\nhour_purchase_amount = pd.pivot_table(ht,values='purchase_amount',index='card_id',columns=['purchase_hour'],aggfunc=np.mean,fill_value=0)\nhour_purchase_amount.columns = ['purchase_amount_%s'%str(i) for i in range(24)]\nhour_purchase_amount.reset_index(inplace=True)\ntrain = pd.merge(train,hour_purchase_amount,on='card_id',how='left')\ntest = pd.merge(test,hour_purchase_amount,on='card_id',how='left')\ndel hour_purchase_amount\ngc.collect()","5833cef0":"#\u7edf\u8ba1\u572824\u5c0f\u65f6\u5185\u7684\u5e73\u5747month_lag\nhour_month_lag = pd.pivot_table(ht,values='month_lag',index='card_id',columns=['purchase_hour'],aggfunc=np.sum,fill_value=0)\nhour_month_lag.columns = ['month_lag_%s'%str(i) for i in range(24)]\nhour_month_lag.reset_index(inplace=True)\ntrain = pd.merge(train,hour_month_lag,on='card_id',how='left')\ntest = pd.merge(test,hour_month_lag,on='card_id',how='left')\ndel hour_month_lag\ngc.collect()","64f60e4f":"#\u7edf\u8ba1\u572824\u5c0f\u65f6\u5185\u7684\u5e73\u5747month_lag\nhour_installment = pd.pivot_table(ht,values='installments',index='card_id',columns=['purchase_hour'],aggfunc=np.sum,fill_value=0)\nhour_installment.columns = ['month_installments_%s'%str(i) for i in range(24)]\nhour_installment.reset_index(inplace=True)\ntrain = pd.merge(train,hour_installment,on='card_id',how='left')\ntest = pd.merge(test,hour_installment,on='card_id',how='left')\ndel hour_installment\ngc.collect()","e897af5b":"#\u7edf\u8ba1\u5386\u53f2\u4e0a\u603b\u5171\u4e70\u8fc7\u591a\u5c11\u6b21\u4e1c\u897f\nht_cnt = ht.groupby('card_id')['city_id'].count().reset_index()\nht_cnt.columns = ['card_id','ht_cnt']\n#merge the result\ntrain = pd.merge(train,ht_cnt,on='card_id',how='left')\ntest = pd.merge(test,ht_cnt,on='card_id',how='left')\ndel ht_cnt\ngc.collect()","a3d631a5":"#\u8ba1\u7b97\u5386\u53f2\u4e0a\u7684\u6d88\u8d39\u72b6\u51b5\nht_amount = ht.groupby('card_id').agg({'purchase_amount':[np.max,np.mean,np.std]})\nht_amount.columns = ['amount_max','amount_mean','amount_std']\nht_amount = ht_amount.reset_index()\ntrain = pd.merge(train,ht_amount,on='card_id',how='left')\ntest = pd.merge(test,ht_amount,on='card_id',how='left')\ndel ht_amount\ngc.collect()","0edce1ab":"#\u8ba1\u7b97\u5386\u53f2\u4e0amonth_lag\u7684\u60c5\u51b5\nht_month_lag = ht.groupby('card_id').agg({'month_lag':[np.min,np.mean,np.std]})\nht_month_lag.columns = ['lag_min','lag_mean','lag_std']\nht_month_lag = ht_month_lag.reset_index()\ntrain = pd.merge(train,ht_month_lag,on='card_id',how='left')\ntest = pd.merge(test,ht_month_lag,on='card_id',how='left')\ndel ht_month_lag\ngc.collect()","76d35c3e":"#\u8ba1\u7b97\u5386\u53f2\u4e0ainstallments\u7684\u60c5\u51b5\nht_installment = ht.groupby('card_id').agg({'installments':[np.max,np.min,np.mean,np.std]})\nht_installment.columns = ['ins_max','ins_min','ins_mean','ins_std']\nht_installment = ht_installment.reset_index()\ntrain = pd.merge(train,ht_installment,on='card_id',how='left')\ntest = pd.merge(test,ht_installment,on='card_id',how='left')\ndel ht_installment\ngc.collect()","d0979bae":"ht_auth_flag = pd.pivot_table(ht,values='city_id',index='card_id',columns='authorized_flag',aggfunc=len,fill_value=0)\nht_auth_flag.columns = ['auth_y','auth_n']\nht_auth_flag = ht_auth_flag.reset_index()\ntrain = pd.merge(train,ht_auth_flag,on='card_id',how='left')\ntest = pd.merge(test,ht_auth_flag,on='card_id',how='left')\ndel ht_auth_flag\ngc.collect()","8e200302":"ht['merchant_category_id'] = ht['merchant_category_id'].map(lambda x:str(x))\nht_mer_cate = ht.groupby('card_id').apply(lambda x:' '.join(x['merchant_category_id']))\nht_mer_cate = ht_mer_cate.reset_index()\nht_mer_cate.columns = ['card_id','mer_cate_id_list']\ntrain = pd.merge(train,ht_mer_cate,on='card_id',how='left')\ntest = pd.merge(test,ht_mer_cate,on='card_id',how='left')\ndel ht_mer_cate\ngc.collect()","783a1d0d":"ht_state_cnt = ht.groupby('card_id')['state_id'].nunique().reset_index()\nht_state_cnt.columns = ['card_id','state_cnt']\ntrain = pd.merge(train,ht_state_cnt,on='card_id',how='left')\ntest = pd.merge(test,ht_state_cnt,on='card_id',how='left')","bed7d554":"del ht_state_cnt\ngc.collect()","d3723f6b":"ht_mer_cate_cnt = ht.groupby('card_id')['merchant_category_id'].nunique().reset_index()\nht_mer_cate_cnt.columns = ['card_id','merchant_category_id_cnt']\ntrain = pd.merge(train,ht_mer_cate_cnt,on='card_id',how='left')\ntest = pd.merge(test,ht_mer_cate_cnt,on='card_id',how='left')","584aad4f":"del ht_mer_cate_cnt\ngc.collect()","d84539a4":"ht_mer_cnt = ht.groupby('card_id')['merchant_id'].nunique().reset_index()\nht_mer_cnt.columns = ['card_id','merchant_id_cnt']\ntrain = pd.merge(train,ht_mer_cnt,on='card_id',how='left')\ntest = pd.merge(test,ht_mer_cnt,on='card_id',how='left')","c17112f7":"del ht_mer_cnt\ngc.collect()","937fbab8":"#\u7edf\u8ba1\u5728\u65b0\u5546\u5e97\u768424\u5c0f\u65f6\u7684\u8d2d\u4e70\u8bb0\u5f55\u6b21\u6570\u5206\u5e03\nnew_hour_purchase_cnt = pd.pivot_table(nmt,values='month_lag',index='card_id',columns=['purchase_hour'],aggfunc=len,fill_value=0)\nnew_hour_purchase_cnt.columns = ['new_purchase_hour_%s'%str(i) for i in range(24)]\nnew_hour_purchase_cnt.reset_index(inplace=True)\ntrain = pd.merge(train,new_hour_purchase_cnt,on='card_id',how='left')\ntest = pd.merge(test,new_hour_purchase_cnt,on='card_id',how='left')","cca8fee2":"del new_hour_purchase_cnt\ngc.collect()","42024d11":"#\u7edf\u8ba1\u572824\u5c0f\u65f6\u5185\u7684\u8d2d\u4e70\u8bb0\u5f55\u6b21\u6570\nnew_hour_sub_id = pd.pivot_table(nmt,values='month_lag',index='card_id',columns=['subsector_id'],aggfunc=len,fill_value=0)\nnew_hour_sub_id.columns = ['new_sub_id_%s'%str(i) for i in range(nmt['subsector_id'].nunique())]\nnew_hour_sub_id.reset_index(inplace=True)\ntrain = pd.merge(train,new_hour_sub_id,on='card_id',how='left')\ntest = pd.merge(test,new_hour_sub_id,on='card_id',how='left')\n","b433f873":"del new_hour_sub_id\ngc.collect()","5cd9db46":"#\u7edf\u8ba1\u5728\u5386\u53f2\u4e0a\u6bcf\u4e2a\u6708\u7684\u8d2d\u4e70\u6b21\u6570\nnew_ym_purchase_cnt = pd.pivot_table(nmt,values='month_lag',index='card_id',columns=['purchase_year','purchase_month'],aggfunc=len,fill_value=0)\nnew_ym_purchase_cnt.columns = ['new_purchase_ym_%s'%str(i) for i in range(new_ym_purchase_cnt.shape[1])]\nnew_ym_purchase_cnt.reset_index(inplace=True)\ntrain = pd.merge(train,new_ym_purchase_cnt,on='card_id',how='left')\ntest = pd.merge(test,new_ym_purchase_cnt,on='card_id',how='left')","bb9a28c6":"del new_ym_purchase_cnt\ngc.collect()","f13bea51":"#\u7edf\u8ba1\u572824\u5c0f\u65f6\u5185\u7684\u5e73\u5747\u8d2d\u4e70\u91d1\u989d\nnmt_hour_purchase_amount = pd.pivot_table(nmt,values='purchase_amount',index='card_id',columns=['purchase_hour'],aggfunc=np.mean,fill_value=0)\nnmt_hour_purchase_amount.columns = ['new_purchase_amount_%s'%str(i) for i in range(24)]\nnmt_hour_purchase_amount.reset_index(inplace=True)\ntrain = pd.merge(train,nmt_hour_purchase_amount,on='card_id',how='left')\ntest = pd.merge(test,nmt_hour_purchase_amount,on='card_id',how='left')","38636fb2":"del nmt_hour_purchase_amount\ngc.collect()","f3e0f2b5":"#\u7edf\u8ba1\u572824\u5c0f\u65f6\u5185\u7684\u5e73\u5747\u8d2d\u4e70\u91d1\u989d\nnmt_hour_month_lag = pd.pivot_table(nmt,values='month_lag',index='card_id',columns=['purchase_hour'],aggfunc=np.mean,fill_value=0)\nnmt_hour_month_lag.columns = ['new_month_lag_%s'%str(i) for i in range(24)]\nnmt_hour_month_lag.reset_index(inplace=True)\ntrain = pd.merge(train,nmt_hour_month_lag,on='card_id',how='left')\ntest = pd.merge(test,nmt_hour_month_lag,on='card_id',how='left')","05b13b6a":"del nmt_hour_month_lag\ngc.collect()","f72f12e8":"#\u7edf\u8ba1\u572824\u5c0f\u65f6\u5185\u7684\u5e73\u5747\u8d2d\u4e70\u91d1\u989d\nnmt_hour_installments = pd.pivot_table(nmt,values='installments',index='card_id',columns=['purchase_hour'],aggfunc=np.mean,fill_value=0)\nnmt_hour_installments.columns = ['new_installments_%s'%str(i) for i in range(24)]\nnmt_hour_installments.reset_index(inplace=True)\ntrain = pd.merge(train,nmt_hour_installments,on='card_id',how='left')\ntest = pd.merge(test,nmt_hour_installments,on='card_id',how='left')","de37b2fd":"del nmt_hour_installments\ngc.collect()","897dbf1b":"#\u7edf\u8ba1\u5386\u53f2\u4e0a\u603b\u5171\u4e70\u8fc7\u591a\u5c11\u6b21\u4e1c\u897f\nnmt_cnt = nmt.groupby('card_id')['city_id'].count().reset_index()\nnmt_cnt.columns = ['card_id','nmt_cnt']\n#merge the result\ntrain = pd.merge(train,nmt_cnt,on='card_id',how='left')\ntest = pd.merge(test,nmt_cnt,on='card_id',how='left')","4ca4870d":"del nmt_cnt\ngc.collect()","98d789e5":"#\u8ba1\u7b97\u5386\u53f2\u4e0a\u7684\u6d88\u8d39\u72b6\u51b5\nnmt_amount = nmt.groupby('card_id').agg({'purchase_amount':[np.max,np.mean,np.std]})\nnmt_amount.columns = ['nmt_amount_max','nmt_amount_mean','nmt_amount_std']\nnmt_amount = nmt_amount.reset_index()\ntrain = pd.merge(train,nmt_amount,on='card_id',how='left')\ntest = pd.merge(test,nmt_amount,on='card_id',how='left')","ff73d680":"del nmt_amount\ngc.collect()","94a26461":"#\u8ba1\u7b97\u5386\u53f2\u4e0amonth_lag\u7684\u60c5\u51b5\nnmt_month_lag = nmt.groupby('card_id').agg({'month_lag':[np.min,np.mean,np.std]})\nnmt_month_lag.columns = ['nmt_lag_min','nmt_lag_mean','nmt_lag_std']\nnmt_month_lag = nmt_month_lag.reset_index()\ntrain = pd.merge(train,nmt_month_lag,on='card_id',how='left')\ntest = pd.merge(test,nmt_month_lag,on='card_id',how='left')","a7cc6df0":"del nmt_month_lag\ngc.collect()","f265ad5a":"#\u8ba1\u7b97\u5386\u53f2\u4e0ainstallments\u7684\u60c5\u51b5\nnmt_installment = nmt.groupby('card_id').agg({'installments':[np.max,np.min,np.mean,np.std]})\nnmt_installment.columns = ['nmt_ins_max','nmt_ins_min','nmt_ins_mean','nmt_ins_std']\nnmt_installment = nmt_installment.reset_index()\ntrain = pd.merge(train,nmt_installment,on='card_id',how='left')\ntest = pd.merge(test,nmt_installment,on='card_id',how='left')","c79d512b":"del nmt_installment\ngc.collect()","1251b7f0":"nmt_auth_flag = pd.pivot_table(ht,values='city_id',index='card_id',columns='authorized_flag',aggfunc=len,fill_value=0)\nnmt_auth_flag.columns = ['nmt_auth_y','nmt_auth_n']\nnmt_auth_flag = nmt_auth_flag.reset_index()\ntrain = pd.merge(train,nmt_auth_flag,on='card_id',how='left')\ntest = pd.merge(test,nmt_auth_flag,on='card_id',how='left')","0c75e7c3":"del nmt_auth_flag\ngc.collect()","301f0a8f":"nmt['merchant_category_id'] = ht['merchant_category_id'].map(lambda x:str(x))\nnmt_mer_cate = nmt.groupby('card_id').apply(lambda x:' '.join(x['merchant_category_id']))\nnmt_mer_cate = nmt_mer_cate.reset_index()\nnmt_mer_cate.columns = ['card_id','nmt_mer_cate_id_list']\ntrain = pd.merge(train,nmt_mer_cate,on='card_id',how='left')\ntest = pd.merge(test,nmt_mer_cate,on='card_id',how='left')","9f4189fc":"train['nmt_mer_cate_id_list'] = train['nmt_mer_cate_id_list'].fillna('')\ntest['nmt_mer_cate_id_list'] = test['nmt_mer_cate_id_list'].fillna('')","423ad997":"del nmt_mer_cate\ngc.collect()","5d59b266":"nmt_state_cnt = nmt.groupby('card_id')['state_id'].nunique().reset_index()\nnmt_state_cnt.columns = ['card_id','nmt_state_cnt']\ntrain = pd.merge(train,nmt_state_cnt,on='card_id',how='left')\ntest = pd.merge(test,nmt_state_cnt,on='card_id',how='left')","22dc028c":"del nmt_state_cnt\ngc.collect()","65ce285b":"nmt_mer_cate_cnt = nmt.groupby('card_id')['merchant_category_id'].nunique().reset_index()\nnmt_mer_cate_cnt.columns = ['card_id','nmt_merchant_category_id_cnt']\ntrain = pd.merge(train,nmt_mer_cate_cnt,on='card_id',how='left')\ntest = pd.merge(test,nmt_mer_cate_cnt,on='card_id',how='left')","3f17312e":"del nmt_mer_cate_cnt\ngc.collect()","0f1971ac":"nmt_mer_cnt = nmt.groupby('card_id')['merchant_id'].nunique().reset_index()\nnmt_mer_cnt.columns = ['card_id','nmt_merchant_id_cnt']\ntrain = pd.merge(train,nmt_mer_cnt,on='card_id',how='left')\ntest = pd.merge(test,nmt_mer_cnt,on='card_id',how='left')","9eca5e23":"del nmt_mer_cnt\ngc.collect()","ca4e5f99":"train_cate = pd.get_dummies(train[['feature_1','feature_2','feature_3']])","1d350045":"test_cate = pd.get_dummies(test[['feature_1','feature_2','feature_3']])","96698e59":"cv = CountVectorizer()\ncv_train = cv.fit_transform(train['mer_cate_id_list'])\ncv_test =  cv.transform(test['mer_cate_id_list'])\ntrain.drop('mer_cate_id_list',axis=1,inplace=True)\ntest.drop('mer_cate_id_list',axis=1,inplace=True)","96974124":"ss = StandardScaler(with_mean=False)\ncv_train = ss.fit_transform(cv_train)\ncv_test = ss.transform(cv_test)","2eed22e4":"cv_ = CountVectorizer()\ncv_train_ = cv_.fit_transform(train['nmt_mer_cate_id_list'])\ncv_test_ =  cv_.transform(test['nmt_mer_cate_id_list'])\ntrain.drop('nmt_mer_cate_id_list',axis=1,inplace=True)\ntest.drop('nmt_mer_cate_id_list',axis=1,inplace=True)","18570e71":"ss = StandardScaler(with_mean=False)\ncv_train_ = ss.fit_transform(cv_train_)\ncv_test_ = ss.transform(cv_test_)","ee862613":"train.fillna(0,inplace=True)\ntest.fillna(0,inplace=True)","44ef0a3c":"#handler the numeric feature\ndrop_columns = ['first_active_month','card_id','feature_1','feature_2','feature_3','target','year','month','cate']\nnum_feature = [v for v in train.columns if v not in drop_columns]","47707e79":"train_num_feature = train[num_feature].values\ntest_num_feature = test[num_feature].values\nss = StandardScaler()\ntrain_num_feature = ss.fit_transform(train_num_feature)\ntest_num_feature = ss.transform(test_num_feature)","6716b54d":"#stack the feature\ntrain_feature = hstack([train_num_feature,cv_train,cv_train_,train_cate]).tocsr()\ntest_feature = hstack([test_num_feature,cv_test,cv_test_,test_cate]).tocsr()","c0838e7f":"del train_num_feature\ndel test_num_feature\ngc.collect()","ce8ee41c":"#\u4e0d\u7528stacking\nres_lgb = []\nfeature_imp = []\nfor tr,va in KFold(n_splits=10,random_state=2018).split(train_feature,train['target'].values):\n    lgbmr = LGBMRegressor(num_leaves=32,n_estimators=150,colsample_bytree=0.7,subsample=0.7)\n    lgbmr.fit(train_feature[tr],train['target'].values[tr],early_stopping_rounds=10,\n              eval_set=[(train_feature[tr],train['target'].values[tr]),(train_feature[va],train['target'].values[va])],\n              eval_metric='rmse',\n              verbose=50)\n    feature_imp.append(lgbmr.feature_importances_)\n    res_lgb.append(lgbmr.predict(test_feature))\nf = np.mean(feature_imp,axis=0)","015fd368":"avg_res = np.mean(res_lgb,axis=0)\ntest['target'] = avg_res\ntest[['card_id','target']].to_csv('predictlgb_1225.csv',index=False)","72343093":"## \u6570\u636e\u9884\u5904\u7406","03089cca":"### \u9488\u5bf9\u5386\u53f2\u8bb0\u5f55\u8fdb\u884c\u7279\u5f81\u6784\u9020","dcaf9457":"### \u6574\u7406\u7a00\u758f\u7279\u5f81","1ffa067f":"## \u8bfb\u5165\u6570\u636e","952cee46":"## \u7279\u5f81\u5de5\u7a0b","f8d33848":"### \u9488\u5bf9\u65b0\u5546\u5e97\u8bb0\u5f55\u8fdb\u884c\u7279\u5f81\u6784\u9020","2bf9f271":"## \u8bad\u7ec3\u6a21\u578b\u548c\u9884\u6d4b\u6570\u636e","af5a64a3":"### \u7279\u5f81\u5f52\u4e00\u5316\u548c\u62fc\u63a5"}}