{"cell_type":{"2868bc54":"code","1bc735e3":"code","68e4583c":"code","5989756c":"code","a8a07d2d":"code","a7eba84a":"code","2f202609":"code","cf8a1315":"code","e82ff298":"code","722110ae":"code","4eebb82b":"code","ea991912":"code","9cc52eec":"code","57c4f492":"code","b3924efe":"code","973d931b":"code","b316be24":"code","288eb81e":"code","6826668f":"code","157a0c71":"code","7305d5f8":"code","86567ea2":"code","992384e9":"code","0d7d2783":"code","3447184a":"code","f4e57c13":"code","9173275d":"code","6d1683c1":"code","1a562cc9":"code","0fddf7b9":"code","d8f07bd0":"code","30f12b4a":"code","eaa2642d":"code","95a51dc3":"code","beec1c61":"code","93a41355":"code","52fbf979":"code","61c52f6e":"code","03ac13fa":"code","8869aa70":"code","79d0e1b0":"code","c3c8b648":"code","488ecb83":"code","66f6ef04":"code","7e92bd0c":"code","bf09ede7":"code","dcdf2150":"code","77f129b9":"code","25d00052":"code","c6469e3b":"code","3669e3cf":"code","50494b5b":"code","100be66b":"code","9b302e52":"code","0f621152":"code","c23409bd":"code","ba58bada":"code","633008a5":"code","a13c90ca":"code","35e8e9db":"code","9c863db6":"code","d150a38b":"code","7311cf40":"code","8d51d092":"code","efeb946e":"code","ac351621":"code","3415f721":"code","349b3f1b":"code","1f395497":"code","ae116876":"code","c64756e0":"code","df1c5468":"code","22290f05":"code","5a1f306b":"code","f510359f":"code","9669c3c7":"code","0cd9be30":"code","a7d03e66":"code","34f2d37d":"code","0dee380a":"code","0e3f36ff":"code","e7bd09f4":"code","d211decc":"code","52a351cd":"code","d92e1897":"code","cc1e2aa5":"markdown","c92e0a0c":"markdown","3d6a4501":"markdown","308a4de6":"markdown","4602e24e":"markdown","ac5ea6b6":"markdown","a5bdf4be":"markdown","0429017a":"markdown","cae5eda8":"markdown","6024b265":"markdown","dfab2075":"markdown","3b448726":"markdown","5f312999":"markdown","a0a9ad00":"markdown","4cb93d4a":"markdown","fe6d07c3":"markdown","a0ee2787":"markdown"},"source":{"2868bc54":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","1bc735e3":"risk = pd.read_csv(\"..\/input\/german-credit-data-with-risk\/german_credit_data.csv\", index_col = \"Unnamed: 0\")\ndf = risk.copy()","68e4583c":"df","5989756c":"df.info()","a8a07d2d":"df.describe().T","a7eba84a":"df.isnull().sum()","2f202609":"df[\"Job\"].value_counts().sort_index()","cf8a1315":"df[\"Housing\"].value_counts()","e82ff298":"df[\"Saving accounts\"].value_counts()","722110ae":"df[\"Checking account\"].value_counts()","4eebb82b":"df[\"Purpose\"].value_counts()","ea991912":"df[\"Risk\"].value_counts()","9cc52eec":"df.describe().T","57c4f492":"df.corr()","b3924efe":"for i in df[\"Age\"]:\n    if i < 25:\n        df[\"Age\"] = df[\"Age\"].replace(i,\"0-25\")\n    elif (i >= 25) and (i < 30):\n        df[\"Age\"] = df[\"Age\"].replace(i,\"25-30\")\n    elif (i >= 30) and (i < 35):\n        df[\"Age\"] = df[\"Age\"].replace(i,\"30-35\")\n    elif (i >= 35) and (i < 40):\n        df[\"Age\"] = df[\"Age\"].replace(i,\"35-40\")\n    elif (i >= 40) and (i < 50):\n        df[\"Age\"] = df[\"Age\"].replace(i,\"40-50\")\n    elif (i >= 50) and (i < 76):\n        df[\"Age\"] = df[\"Age\"].replace(i,\"50-75\")","973d931b":"for i in df[\"Duration\"]:\n    if i < 12:\n        df[\"Duration\"] = df[\"Duration\"].replace(i,\"0-12\")\n    elif (i >= 12) and (i < 24):\n        df[\"Duration\"] = df[\"Duration\"].replace(i,\"12-24\")\n    elif (i >= 24) and (i < 36):\n        df[\"Duration\"] = df[\"Duration\"].replace(i,\"24-36\")\n    elif (i >= 36) and (i < 48):\n        df[\"Duration\"] = df[\"Duration\"].replace(i,\"36-48\")\n    elif (i >= 48) and (i < 60):\n        df[\"Duration\"] = df[\"Duration\"].replace(i,\"48-60\")\n    elif (i >= 60) and (i <= 72):\n        df[\"Duration\"] = df[\"Duration\"].replace(i,\"60-72\")","b316be24":"df[\"Job\"] = pd.Categorical(df[\"Job\"], categories = [0,1,2,3], \n                           ordered = True)\ndf[\"Age\"] = pd.Categorical(df[\"Age\"], \n                           categories = ['0-25','25-30', '30-35','35-40','40-50','50-75'], \n                           ordered = True)\ndf[\"Duration\"] = pd.Categorical(df[\"Duration\"], \n                                categories = ['0-12','12-24', '24-36','36-48','48-60','60-72'], \n                                ordered = True)","288eb81e":"fig,ax = plt.subplots(ncols = 2, nrows = 3,figsize = (15, 10))\ncat_list = [\"Age\", \"Sex\", \"Job\",\"Housing\", \"Purpose\", \"Risk\"]\npalette = [\"crimson\", \"dodgerblue\", \"fuchsia\", \"lime\",\"yellow\", \"sandybrown\"]\ncount = 0\nfor i in range(3):\n    for j in range(2):\n        sns.countplot(df[cat_list[count]], ax = ax[i][j],\n                      palette = sns.dark_palette(palette[count],\n                                                 reverse=True))\n        ax[i][j].set_xticklabels(ax[i][j].get_xticklabels(),rotation = 30)\n        count += 1","6826668f":"plt.figure(figsize = (16, 5))\nsns.stripplot(x = \"Age\", y = \"Credit amount\", data = df)","157a0c71":"plt.figure(figsize = (16, 5))\nsns.boxplot(x = \"Age\", y = \"Credit amount\",data = df)","7305d5f8":"fig, ax = plt.subplots(ncols = 2, nrows = 2, figsize=(16, 7))\nliste = [\"Sex\", \"Risk\"]\nfor i in range(2):\n    count = 0\n    sns.pointplot(x = \"Age\", y = \"Credit amount\", hue = liste[i], data = df, \n                  ax = ax[0][i], palette = [\"#FFAE00\",\"#000000\"], ci = None)\n    sns.pointplot(x = \"Purpose\", y = \"Credit amount\", hue = liste[i], data = df, \n                  ax = ax[1][i], palette = [\"#FF00F0\",\"#04FF00\"], ci = None)\n    ax[1][i].set_xticklabels(ax[1][i].get_xticklabels(), rotation = 40, size = 11)\n    ax[i][count].legend(loc = \"upper left\")\n    count += 1","86567ea2":"import missingno as msno","992384e9":"msno.bar(df)","0d7d2783":"msno.heatmap(df)","3447184a":"msno.matrix(df)","f4e57c13":"df.isnull().sum()","9173275d":"df[\"Saving accounts\"].value_counts()","6d1683c1":"df[\"Saving accounts\"].fillna(df[\"Saving accounts\"].mode()[0], inplace = True)","1a562cc9":"df[\"Saving accounts\"].value_counts()","0fddf7b9":"df[\"Checking account\"].value_counts()","d8f07bd0":"df[\"Checking account\"].fillna(df[\"Checking account\"].mode()[0], inplace = True)","30f12b4a":"df[\"Checking account\"].value_counts()","eaa2642d":"df.isnull().sum()","95a51dc3":"import statsmodels.api as sm\nfrom sklearn import preprocessing\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.metrics import roc_auc_score,roc_curve\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report","beec1c61":"df","93a41355":"df_fit = df.apply(preprocessing.LabelEncoder().fit_transform)","52fbf979":"df_fit","61c52f6e":"df_fit.info()","03ac13fa":"y = df_fit[\"Risk\"]\nX = df_fit.drop([\"Risk\"], axis=1)","8869aa70":"loj = sm.Logit(y, X)\nloj_model= loj.fit()\nloj_model.summary()","79d0e1b0":"from sklearn.linear_model import LogisticRegression","c3c8b648":"loj = LogisticRegression(solver = \"liblinear\")\nloj_model = loj.fit(X,y)\nloj_model","488ecb83":"loj_model.intercept_","66f6ef04":"loj_model.coef_","7e92bd0c":"y_pred = loj_model.predict(X)","bf09ede7":"confusion_matrix(y, y_pred)","dcdf2150":"accuracy_score(y, y_pred)","77f129b9":"print(classification_report(y, y_pred))","25d00052":"loj_model.predict(X)[0:10]","c6469e3b":"loj_model.predict_proba(X)[0:10][:,0:2]","3669e3cf":"y[0:10]","50494b5b":"y_probs = loj_model.predict_proba(X)\ny_probs = y_probs[:,1]","100be66b":"y_probs[0:10]","9b302e52":"y_pred = [1 if i > 0.5 else 0 for i in y_probs]","0f621152":"y_pred[0:10]","c23409bd":"confusion_matrix(y, y_pred)","ba58bada":"accuracy_score(y, y_pred)","633008a5":"print(classification_report(y, y_pred))","a13c90ca":"logit_roc_auc = roc_auc_score(y, loj_model.predict(X))\n\nfpr, tpr, thresholds = roc_curve(y, loj_model.predict_proba(X)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='AUC (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Oran\u0131')\nplt.ylabel('True Positive Oran\u0131')\nplt.title('ROC')\nplt.show()","35e8e9db":"X_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size = 0.30, \n                                                    random_state = 42)","9c863db6":"loj = LogisticRegression(solver = \"liblinear\")\nloj_model = loj.fit(X_train,y_train)\nloj_model","d150a38b":"accuracy_score(y_test, loj_model.predict(X_test))","7311cf40":"cross_val_score(loj_model, X_test, y_test, cv = 10).mean()","8d51d092":"from sklearn.naive_bayes import GaussianNB","efeb946e":"y = df_fit[\"Risk\"]\nX = df_fit.drop([\"Risk\"], axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.30, \n                                                    random_state=42)","ac351621":"nb = GaussianNB()\nnb_model = nb.fit(X_train, y_train)\nnb_model","3415f721":"nb_model.predict(X_test)[0:10]","349b3f1b":"nb_model.predict_proba(X_test)[0:10]","1f395497":"y_pred = nb_model.predict(X_test)","ae116876":"accuracy_score(y_test, y_pred)","c64756e0":"cross_val_score(nb_model, X_test, y_test, cv = 10).mean()","df1c5468":"from sklearn.ensemble import GradientBoostingClassifier","22290f05":"y = df_fit[\"Risk\"]\nX = df_fit.drop([\"Risk\"], axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.30, \n                                                    random_state=42)","5a1f306b":"gbm_model = GradientBoostingClassifier().fit(X_train, y_train)","f510359f":"y_pred = gbm_model.predict(X_test)\naccuracy_score(y_test, y_pred)","9669c3c7":"from sklearn.model_selection import learning_curve, GridSearchCV","0cd9be30":"gbm_model","a7d03e66":"gbm_params = {\"learning_rate\" : [0.001, 0.01, 0.1, 0.05],\n             \"n_estimators\": [100,500,100],\n             \"max_depth\": [3,5,10],\n             \"min_samples_split\": [2,5,10]}","34f2d37d":"gbm = GradientBoostingClassifier()\n\ngbm_cv = GridSearchCV(gbm, gbm_params, cv = 10, n_jobs = -1, verbose = 2)","0dee380a":"gbm_cv.fit(X_train, y_train)","0e3f36ff":"print(\"En iyi parametreler: \" + str(gbm_cv.best_params_))","e7bd09f4":"gbm = GradientBoostingClassifier(learning_rate = 0.01, \n                                 max_depth = 5,\n                                min_samples_split = 10,\n                                n_estimators = 100)","d211decc":"gbm_tuned =  gbm.fit(X_train,y_train)","52a351cd":"y_pred = gbm_tuned.predict(X_test)\naccuracy_score(y_test, y_pred)","d92e1897":"cross_val_score(gbm_model, X_test, y_test, cv = 10).mean()","cc1e2aa5":"## 5.1) statsmodels","c92e0a0c":"# 7) Gradient Boosting Machines ","3d6a4501":"## 3.1) De\u011fi\u015fkenlerin G\u00f6rselle\u015ftirilmesi","308a4de6":"## 5.2) scikit-learn","4602e24e":"## 5.3) Tahmin & Model Tuning","ac5ea6b6":"## 4.1) Saving accounts","a5bdf4be":"## 3.2) Missing Value","0429017a":"# 3) G\u00f6rselle\u015ftirme","cae5eda8":"# 1) Verinin Ke\u015ffi (EDA)","6024b265":"# Alman Kredi Riskini Tahmin Etme","dfab2075":"# 6) Naive Bayes","3b448726":"# 2) Age ve Duration De\u011fi\u015fkenlerinin Kategorikle\u015ftirilmesi","5f312999":"## 6.1) Model Tuning","a0a9ad00":"# 4) Eksik De\u011ferlerin Doldurulmas\u0131","4cb93d4a":"## 1.1) De\u011fi\u015fkenlerin \u0130ncelenmesi","fe6d07c3":"# 5) Lojistik Regresyon Modeli","a0ee2787":"## 4.2) Checking account"}}