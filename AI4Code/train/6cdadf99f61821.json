{"cell_type":{"0c4a0b42":"code","68fe2961":"code","0d6477fe":"code","99d957e1":"code","c44d5163":"code","d9f0a147":"code","c3c23add":"code","01cbe4c0":"code","cb1afd67":"code","2fd9c5ea":"code","c0c2a235":"code","cf3d3b8e":"code","182ee770":"code","98654bbd":"code","cacf15c9":"code","09e97685":"code","a3a4c39a":"markdown","3a59ae9b":"markdown","bd71dbd0":"markdown","e26473c3":"markdown","6090a2a6":"markdown","21a5d1cd":"markdown","0b5fffcf":"markdown","e45a41a9":"markdown","8b3bddc3":"markdown","2820af53":"markdown","4a897cb5":"markdown","62b5f885":"markdown"},"source":{"0c4a0b42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68fe2961":"data=pd.read_csv(\"\/kaggle\/input\/videogamesales\/vgsales.csv\")\ndata.head()\n","0d6477fe":"data.info()","99d957e1":"data.corr()","c44d5163":"f,ax=plt.subplots(figsize=(13,12))\nsns.heatmap(data.corr(),annot=True,linewidth=.5,fmt=\"0.2f\",ax=ax)\nplt.show()","d9f0a147":"plt.scatter(data[\"Year\"],data[\"NA_Sales\"],color=\"green\",label=\"NA\",alpha=0.5)\nplt.xlabel(\"Year\")\nplt.legend(loc=\"upper right\")\nplt.ylabel(\"SALES\")\n\nplt.scatter(data[\"Year\"],data[\"EU_Sales\"],color=\"blue\",label=\"EU\",alpha=0.5)\nplt.xlabel(\"Year\")\nplt.legend(loc=\"upper right\")\nplt.ylabel(\"SALES\")\n\nplt.scatter(data[\"Year\"],data[\"JP_Sales\"],color=\"red\",label=\"JP\",alpha=0.5)\nplt.xlabel(\"Year\")\nplt.legend(loc=\"upper right\")\nplt.ylabel(\"SALES\")\n\nplt.show()\n","c3c23add":"data_genre=data.Genre.unique()\nprint(data_genre)\n\n","01cbe4c0":"data_genre[0]=data[\"Genre\"]==\"Sports\"\ndata_genre[1]=data[\"Genre\"]==\"Platform\"\ndata_genre[2]=data[\"Genre\"]==\"Racing\"\ndata_genre[3]=data[\"Genre\"]==\"Role-Playing\"\ndata_genre[4]=data[\"Genre\"]==\"Puzzle\"\ndata_genre[5]=data[\"Genre\"]==\"Misc\"\ndata_genre[6]=data[\"Genre\"]==\"Shooter\"\ndata_genre[7]=data[\"Genre\"]==\"Simulation\"\ndata_genre[8]=data[\"Genre\"]==\"Action\"\ndata_genre[9]=data[\"Genre\"]==\"Fighting\"\ndata_genre[10]=data[\"Genre\"]==\"Adventure\"\ndata_genre[11]=data[\"Genre\"]==\"Strategy\"\n\n\n","cb1afd67":"i=0\ncolor=[\"orange\",\"purple\",\"blue\",\"pink\",\"red\",\"yellow\",\"black\",\"violet\",\"brown\",\"olive\",\"turquoise\",\"maroon\"]\nname=['Sports','Platform' ,'Racing' ,'Role-Playing' ,'Puzzle' ,'Misc' ,'Shooter',\n 'Simulation' ,'Action' ,'Fighting', 'Adventure', 'Strategy']\nwhile i<12:\n    plt.plot(data[data_genre[i]][\"Global_Sales\"],data[data_genre[i]][\"Year\"],color=color[i],label=name[i])\n    plt.legend(loc = \"upper right\")\n    plt.xlabel(\"GLOBAL SALES\")\n    plt.ylabel(\"YEAR\")\n    plt.show()\n    i=i+1\n","2fd9c5ea":"data_plt=data.Platform.unique()\nprint(data_plt)","c0c2a235":"data_plt[0]=data[\"Platform\"]==\"Wii\"\ndata_plt[1]=data[\"Platform\"]==\"NES\"\ndata_plt[2]=data[\"Platform\"]==\"GB\"\ndata_plt[3]=data[\"Platform\"]==\"DS\"\ndata_plt[4]=data[\"Platform\"]==\"X360\"\ndata_plt[5]=data[\"Platform\"]==\"PS3\"\ndata_plt[6]=data[\"Platform\"]==\"PS2\"\ndata_plt[7]=data[\"Platform\"]==\"SNES\"\ndata_plt[8]=data[\"Platform\"]==\"GBA\"\ndata_plt[9]=data[\"Platform\"]==\"3DS\"\ndata_plt[10]=data[\"Platform\"]==\"PS4\"\ndata_plt[11]=data[\"Platform\"]==\"N64\"\ndata_plt[12]=data[\"Platform\"]==\"PS\"\ndata_plt[13]=data[\"Platform\"]==\"XB\"\ndata_plt[14]=data[\"Platform\"]==\"PC\"\ndata_plt[15]=data[\"Platform\"]==\"2600\"\ndata_plt[16]=data[\"Platform\"]==\"PSP\"\ndata_plt[17]=data[\"Platform\"]==\"XOne\"\ndata_plt[18]=data[\"Platform\"]==\"GC\"\ndata_plt[19]=data[\"Platform\"]==\"WiiU\"\ndata_plt[20]=data[\"Platform\"]==\"GEN\"\ndata_plt[21]=data[\"Platform\"]==\"DC\"\ndata_plt[22]=data[\"Platform\"]==\"PSV\"\ndata_plt[23]=data[\"Platform\"]==\"SAT\"\ndata_plt[24]=data[\"Platform\"]==\"SCD\"\ndata_plt[25]=data[\"Platform\"]==\"WS\"\ndata_plt[26]=data[\"Platform\"]==\"NG\"\ndata_plt[27]=data[\"Platform\"]==\"TG16\"\ndata_plt[28]=data[\"Platform\"]==\"3DO\"\ndata_plt[29]=data[\"Platform\"]==\"GG\"\ndata_plt[30]=data[\"Platform\"]==\"PCFX\"\n\nk=1\ni=0\nj=1\nname_plt=['Wii' ,'NES', 'GB', 'DS' ,'X360' ,'PS3', 'PS2' ,'SNES', 'GBA', '3DS' ,'PS4' ,'N64'\n 'PS', 'XB' ,'PC', '2600' ,'PSP', 'XOne' ,'GC', 'WiiU', 'GEN' ,'DC', 'PSV', 'SAT',\n 'SCD' ,'WS' ,'NG' ,'TG16', '3DO', 'GG' ,'PCFX']\n","cf3d3b8e":"    fig=plt.figure(figsize=(20,20))\n    while i<30:\n        ax=fig.add_subplot(7,5,i+1)\n        data[data_plt[i]][\"Year\"].hist(bins=20,ax=ax,facecolor=\"b\")\n        ax.set_title(name_plt[i],color=\"maroon\")\n        ax.set_yscale('log')\n        i=i+1\n    fig.tight_layout()  \n    plt.show()","182ee770":"data\n","98654bbd":"t= data.Global_Sales.mean()\nprint(t)","cacf15c9":"data[\"NA_Rank\"]=[\"1\" if i>t else \"negative\" for i in data.NA_Sales]\ndata[\"EU_Rank\"]=[\"positive\" if i>t else \"negative\" for i in data.EU_Sales]\ndata[\"JP_Rank\"]=[\"positive\" if i>t else \"negative\" for i in data.JP_Sales]","09e97685":"data","a3a4c39a":"we will use the correlation table to visualize the direct and inverse proportions between the data.","3a59ae9b":"Usage amount of each game platform by year","bd71dbd0":"# **Visualization**\n\n\n","e26473c3":"# **Importing the data**","6090a2a6":"# Scatter Plot","21a5d1cd":"# List Comprehension Tutorial","0b5fffcf":"# **Intoduction**\n\n\nIn this kernel I will make a visualization using the video games sales data set. This dataset contains a list of video games with sales greater than 100,000 copies. First I'm importing libraries that I will use \n\n \n","e45a41a9":"Video game purchase rate of NA Eu and JP by years","8b3bddc3":"\nGlobal sales of game genres by years","2820af53":"\nvisualization is a process that facilitates our work when examining a data set and makes it easier to understand the connections between data. We will use some ready-made tools for the visualization process, such as the matplotlib library we use for this data.This library allows us to create figures and plots and makes it very easy to produce static raster.Some plots: Scatter,Line,Histogram","4a897cb5":"# Histogram Plot","62b5f885":"# Line Plot"}}