{"cell_type":{"bbe3929e":"code","eb1ba5e4":"code","ea5f5800":"code","576ccdda":"code","299001ea":"code","2379e7e8":"code","64023d9d":"code","c82f49eb":"code","940a2dad":"code","5f5079c1":"code","136b48c7":"code","897c5fa4":"code","ed998da5":"code","d539b21f":"code","b7effb9d":"code","f596209d":"code","4357feff":"code","7ab3b98c":"code","0ac989c7":"code","c6418b8b":"code","bcb02139":"code","9ef66a31":"code","1fe5803b":"code","5bd624f4":"code","71e72fef":"code","7e07e5dc":"code","8f0d32db":"code","4d4c5f8e":"code","89e73511":"code","cf9fbc5b":"code","c37371d5":"code","acff38f2":"code","8ed052ed":"code","f8ab5400":"code","bb51424d":"code","65a67901":"code","adcc22e7":"code","1cbf0877":"code","997b54cc":"code","2b556663":"code","3c401a9b":"code","60381421":"code","831fb003":"code","3ffa05f0":"code","fe5bae79":"code","b680e8c8":"code","226919f3":"code","98b7e1fa":"code","cff163e9":"code","4a396cdf":"code","c89f51e9":"markdown","a4aa16b7":"markdown","662b4c99":"markdown","b0811b17":"markdown","8f07a366":"markdown","4cacef40":"markdown","15df8c9d":"markdown","20e267ce":"markdown","cc6d96c9":"markdown","c9586d23":"markdown","9cbba247":"markdown","576eeaa8":"markdown","9cb86cb0":"markdown","8ffebc8f":"markdown","01468139":"markdown","ede0b98a":"markdown","dba42e0a":"markdown","44868f6a":"markdown","c8e40f18":"markdown","dd3b9650":"markdown","8c0ed96f":"markdown"},"source":{"bbe3929e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","eb1ba5e4":"import tensorflow as tf\nimport tensorflow as tf; print(tf.__version__)\nfrom spacy.lang.en import English\n\nimport tensorflow as tf\nimport datetime\n\nimport pandas as pd\nfrom spacy.lang.en import English\nimport spacy\nimport re","ea5f5800":"\ndf=pd.read_csv('\/kaggle\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv')\ndf.shape","576ccdda":"df.head()","299001ea":"#Checking the distribution of target class\ndf['fraudulent'].value_counts()\n#Clearly the data is imbalanced","2379e7e8":"#Check if there is any relationship between the target class and employment_type\ndf.pivot_table(index=['fraudulent'], columns='employment_type', aggfunc='size', fill_value=0)\n#Clearly,Employment type,doesn't have any significant impact. SO we shall remove it","64023d9d":"#Check if there is any relationship between the target class and required_experience\ndf.pivot_table(index=['fraudulent'], columns=['required_experience'], aggfunc='size', fill_value=0)\n#Clearly,required_experience,doesn't have any significant impact. SO we shall remove it","c82f49eb":"#Check if there is any relationship between the target class and required_education\ndf.pivot_table(index=['fraudulent'], columns=['required_education'], aggfunc='size', fill_value=0)\n#Clearly,required_educationrequired_experience,doesn't have any significant impact. SO we shall remove it","940a2dad":"#Check if there is any relationship between the target class and required_education\ndf.pivot_table(index=['fraudulent'], columns=['required_education'], aggfunc='size', fill_value=0)\n#Clearly,required_education,doesn't have any significant impact. SO we shall remove it","5f5079c1":"df.isna().sum()","136b48c7":"df.fillna(' ',inplace=True)","897c5fa4":"df['text']=df['title']+\" \" + df['department'] + \" \" + df['company_profile'] + \" \" + df['description'] + \" \" + df['requirements'] + \" \" + df['benefits'] + \" \" ","ed998da5":"df.head()","d539b21f":"#Delete all the un-necessary Columns\ndelete_list=['job_id','title','location','telecommuting','has_company_logo','has_questions','department','salary_range','company_profile','description','requirements','benefits','employment_type','required_experience','required_education','industry','function']\n\nfor val in delete_list:\n    del df[val]\ndf.head()","b7effb9d":"#Data Cleanups\n\n\ndf['text']=df['text'].str.replace('\\n','')\ndf['text']=df['text'].str.replace('\\r','')\ndf['text']=df['text'].str.replace('\\t','')\n  \n  #This removes unwanted texts\ndf['text'] = df['text'].apply(lambda x: re.sub(r'[0-9]','',x))\ndf['text'] = df['text'].apply(lambda x: re.sub(r'[\/(){}\\[\\]\\|@,;.:-]',' ',x))\n  \n  #Converting all upper case to lower case\ndf['text']= df['text'].apply(lambda s:s.lower() if type(s) == str else s)\n  \n\n  #Remove un necessary white space\ndf['text']=df['text'].str.replace('  ',' ')\n\n  #Remove Stop words\nnlp=spacy.load(\"en_core_web_sm\")\ndf['text'] =df['text'].apply(lambda x: ' '.join([word for word in x.split() if nlp.vocab[word].is_stop==False ]))\n","f596209d":"df.head()","4357feff":"#Lemmenization\n#Time module is just to measure the time it took as i was comparing Spacy, NLTK and Gensim. Spacy was the fastest\nsp = spacy.load('en_core_web_sm')\nimport time\nt1=time.time()\noutput=[]\n\nfor sentence in df['text']:\n    sentence=sp(str(sentence))\n    s=[token.lemma_ for token in sentence]\n    output.append(' '.join(s))\ndf['processed']=pd.Series(output)\nt=time.time()-t1\nprint(\"Time\" + str(t))\n\n        ","7ab3b98c":"import matplotlib.pyplot as plt\nfrom wordcloud import WordCloud,STOPWORDS\nfrom nltk.stem import WordNetLemmatizer\nplt.figure(figsize = (20,20)) # Text that is not fraudulent(0)\nwc = WordCloud(width = 1600 , height = 800 , max_words = 3000).generate(\" \".join(df[df.fraudulent == 0].processed))\nplt.imshow(wc , interpolation = 'bilinear')","0ac989c7":"import matplotlib.pyplot as plt\nfrom wordcloud import WordCloud,STOPWORDS\nfrom nltk.stem import WordNetLemmatizer\nplt.figure(figsize = (20,20)) # Text that is not fraudulent(0)\nwc = WordCloud(width = 1600 , height = 800 , max_words = 3000).generate(\" \".join(df[df.fraudulent == 1].processed))\nplt.imshow(wc , interpolation = 'bilinear')","c6418b8b":"import tensorflow as tf\n\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\nvocab_size = 100000\nembedding_dim = 64\nmax_length = 250\ntrunc_type='post'\npadding_type='post'\noov_tok = \"<OOV>\"\ntraining_size = 20000\n#Tokenization\n\ntokenizer = Tokenizer(num_words=vocab_size)\ntokenizer.fit_on_texts(df['processed'].values)\nword_index = tokenizer.word_index\nprint(len(word_index))","bcb02139":"X = tokenizer.texts_to_sequences(df['processed'].values)                         #Tokenize the dataset\nX = pad_sequences(X, maxlen=max_length)     #Padding the dataset\nY=df['fraudulent']                                                                   #Assign the value of y  \nprint(Y.shape)\n","9ef66a31":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,Y, test_size = 0.20,random_state=41)\n","1fe5803b":"#I tried OverSampling to handle class imbalance, but the results were worse. You can try this as well\n'''\nfrom imblearn.over_sampling import (RandomOverSampler, \n                                    SMOTE, \n                                    ADASYN)\nsampler =SMOTE(random_state=42)\nX_train, y_train = sampler.fit_sample(X_train, y_train)\n'''","5bd624f4":"\nmodel = tf.keras.Sequential([\n        tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n        tf.keras.layers.SpatialDropout1D(0.2),\n        tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),\n        tf.keras.layers.Dense(24, activation='relu'),\n        tf.keras.layers.Dense(1, activation='sigmoid')\n    ])\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()","71e72fef":"X_train = np.array(X_train)\ny_train = np.array(y_train)\nX_test = np.array(X_test)\ny_test = np.array(y_test)\nX_train.shape","7e07e5dc":"from keras.callbacks import EarlyStopping, ModelCheckpoint\n\ncallbacks = [EarlyStopping(monitor='val_loss', patience=2)]\nhistory = model.fit(X_train, y_train, epochs=10,batch_size=64, validation_split=0.1,callbacks=callbacks, verbose=1)\n","8f0d32db":"import matplotlib.pyplot as plt\n\n\ndef plot_graphs(history, string):\n  plt.plot(history.history[string])\n  plt.plot(history.history['val_'+string])\n  plt.xlabel(\"Epochs\")\n  plt.ylabel(string)\n  plt.legend([string, 'val_'+string])\n  plt.show()\n\nplot_graphs(history, 'accuracy')\nplot_graphs(history, 'loss')","4d4c5f8e":"y_predict=model.predict(X_test)\ny_predict = np.around(y_predict, decimals = 0)\ny_predict","89e73511":"from sklearn.metrics import confusion_matrix\ncf=confusion_matrix(y_test,y_predict)\ncf","cf9fbc5b":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nc_report=classification_report(y_test,y_predict,target_names = ['0','1'])\nprint(c_report)","c37371d5":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\n","acff38f2":"!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py\nimport tokenization\ndef bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","8ed052ed":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(clf_output)\n    \n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=2e-6), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","f8ab5400":"module_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","bb51424d":"df.head()","65a67901":"X =df['text']        #Tokenize the dataset\nY=df['fraudulent']                                                                   #Assign the value of y  \nprint(Y.shape)","adcc22e7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,Y, test_size = 0.20,random_state=41)\n","1cbf0877":"X_train.head()","997b54cc":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","2b556663":"train_input = bert_encode(X_train.values, tokenizer, max_len=160)\ntest_input = bert_encode(X_test.values, tokenizer, max_len=160)\ntrain_labels = y_train.values","3c401a9b":"model = build_model(bert_layer, max_len=160)\nmodel.summary()","60381421":"train_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.2,\n    epochs=3,\n    batch_size=16\n)\n\nmodel.save('model.h5')","831fb003":"import matplotlib.pyplot as plt\n\n\ndef plot_graphs(history, string):\n  plt.plot(history.history[string])\n  plt.plot(history.history['val_'+string])\n  plt.xlabel(\"Epochs\")\n  plt.ylabel(string)\n  plt.legend([string, 'val_'+string])\n  plt.show()\n\nplot_graphs(train_history, 'accuracy')\nplot_graphs(train_history, 'loss')","3ffa05f0":"X_test.shape","fe5bae79":"y_predict=model.predict(test_input)\n","b680e8c8":"y_predict","226919f3":"y_predict = np.around(y_predict, decimals = 0)\ny_predict","98b7e1fa":"y_predict = np.around(y_predict, decimals = 0)\ny_predict","cff163e9":"from sklearn.metrics import confusion_matrix\ncf=confusion_matrix(y_test,y_predict)\ncf","4a396cdf":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nc_report=classification_report(y_test,y_predict,target_names = ['0','1'])\nprint(c_report)","c89f51e9":"**OVERSAMPLING DATA TO HANDLE IMBALANCE**","a4aa16b7":"Reference: https:\/\/www.kaggle.com\/ratan123\/in-depth-guide-to-google-s-bert\/notebook","662b4c99":" ** DEFINE MODEL**","b0811b17":"CLEARLY YOU CAN SEE THE PERFORMANCE OF BERT EXCEEDS BI-DIRECTIONAL LSTM(Compare F1 Score)","8f07a366":" **VISUALIZING THE RESULTS**","4cacef40":"# 3) **BI-DIRECTIONAL LSTM**","15df8c9d":" **RUNNING BERT MODEL**","20e267ce":" **LET'S HANDLE SOME MISSING DATA**","cc6d96c9":" **BERT MODEL**","c9586d23":" **WORDCLOUD**","9cbba247":" **ANALYZE THE ATTRIBUTES AND THEIR RELATION**","576eeaa8":" **TRAINING**","9cb86cb0":"# 4) **BERT**","8ffebc8f":"# 1) **DATA ANALYSIS AND VISUALTIZATION**","01468139":"# 2) **DATA CLEANING**","ede0b98a":"**BERT ENCODER FUNCTION**","dba42e0a":" **CONCATENATE DATA**","44868f6a":" **LOADING BERT TOKENIZER**","c8e40f18":"**LEMMANIZATION**","dd3b9650":" **EVALUATING BI-DIRECTIONAL LSTM**","8c0ed96f":" **TOKENIZATION AND PADDING**"}}