{"cell_type":{"3f4c8d55":"code","99fecf37":"code","52d30c15":"code","8f0b57f2":"code","749eb9a6":"code","2c610955":"code","fe5b7c0d":"code","5c5da3f7":"code","8a26d0e4":"code","ecd55b3c":"code","f9254f31":"code","baf5d28a":"code","ce0a40ff":"code","2691fd1e":"code","5f5c7398":"code","bff151d9":"code","7a00741a":"code","a8c320dd":"code","95deccbb":"code","c38d3c47":"code","33be5395":"code","f3c181c8":"code","4f693e53":"code","336a856a":"code","41425e7a":"code","08e6be3f":"code","1b335c3e":"code","ecbbbe51":"code","75580bd0":"code","d92084d5":"code","1e196c8c":"code","139397ea":"code","56b2c953":"code","a8aabb2d":"code","47ae4671":"code","8512befe":"code","49688bcd":"code","13c2a6cf":"code","d7a3f843":"code","d1feccff":"code","3b55b7fa":"code","d7d0af4b":"code","b634ec85":"code","df42fa42":"code","ac1bbadf":"code","4fca2f65":"code","fd3faf0c":"code","1770803c":"code","425ba28f":"code","6a0abd4c":"code","c467c1bd":"code","d33aa185":"code","e8561301":"code","1ff59cc3":"code","516db749":"code","d55c5247":"code","c21cedcc":"code","6b8b8a4e":"code","88ec165c":"code","eb2fd628":"code","31b01c50":"code","a0ec770e":"code","37cb8a5b":"code","a1e6772c":"markdown","08203aa0":"markdown","96eea460":"markdown","2d8b6546":"markdown","926835cf":"markdown","a16d201a":"markdown","5d0807a3":"markdown","d7383e30":"markdown","e9ec7942":"markdown","c2701db4":"markdown","58610c14":"markdown","7afdbc55":"markdown","832a4c0e":"markdown","21c1a2c5":"markdown","c96cef53":"markdown","6388aad7":"markdown","3e48e927":"markdown","41cb36b5":"markdown","f0216a93":"markdown","d14f926b":"markdown","2b6851d7":"markdown","5d388665":"markdown"},"source":{"3f4c8d55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport csv\nimport seaborn as sns\nimport matplotlib.pyplot as plt","99fecf37":"train_filename = \"..\/input\/home-data-for-ml-course\/train.csv\"\n\nX_train_full = pd.read_csv(train_filename)\n\nX_test_full = pd.read_csv(\"..\/input\/home-data-for-ml-course\/test.csv\")\n\nX_train_full.head()\nX_test_full.head()","52d30c15":"X_train_full.shape","8f0b57f2":"y_train_full = X_train_full.SalePrice\nX_train_full.columns","749eb9a6":"print(X_test_full.shape)\nprint(X_train_full.shape)","2c610955":"X_train_full.info();","fe5b7c0d":"X_train_full.isnull().sum().sort_values(ascending=False)[X_train_full.isnull().sum().sort_values(ascending=False)!=0]","5c5da3f7":"missing = X_train_full.isnull().sum().sort_values(ascending = False)[X_train_full.isnull().sum().sort_values(ascending=False)!=0]\nmissing_percentage = missing\/len(X_train_full)*100\nmissing_percentage","8a26d0e4":"plt.figure(figsize=(10,5))\nsns.barplot(x=missing.index , y = missing_percentage)\nplt.xticks(rotation = 45)","ecd55b3c":"X_train_full['LotFrontage'].fillna(X_train_full['LotFrontage'].mean(),inplace = True)\nX_train_full.isnull().sum()","f9254f31":"missing_col = ['PoolQC','Fence','MiscFeature','Alley','FireplaceQu']\nX_train_full[missing_col] = X_train_full[missing_col].fillna(value='None')\nX_train_full.isna().sum().sort_values(ascending = False)","baf5d28a":"X_train_full[missing.index]","ce0a40ff":"X_train_num = X_train_full.select_dtypes(['int64','float64'])\nX_train_categ = X_train_full.select_dtypes(['object'])\nX_train_categ_cols = list(X_train_categ.columns)\nX_train_num.head()\n#X_train_categ_cols","2691fd1e":"X_train_num.isnull().any()","5f5c7398":"print(\"Pool Area Non Zero Values\")\nprint(np.count_nonzero(X_train_num.PoolArea, axis=0))\nprint(\"Misc Val Non Zero Values\")\nprint(np.count_nonzero(X_train_num.MiscVal,axis = 0))\nprint(\"3Ssn Porch Non Zero Values\")\nprint(np.count_nonzero(X_train_num['3SsnPorch'], axis=0))\nprint(\"ScreenPorch Non Zero Values\")\nnp.count_nonzero(X_train_num.ScreenPorch, axis=0)\n#X_train.MiscVal.describe()","bff151d9":"'''Almost_zero = ['3SsnPorch','ScreenPorch','PoolArea','MiscVal']\nfor col in X_train_num.columns:\n    if col in Almost_zero:\n        del X_train_num[col]\nX_train_num.head()'''","7a00741a":"X_train_categ.isnull().any()","a8c320dd":"from sklearn.impute import SimpleImputer\nimp = SimpleImputer(strategy = 'constant')\nX_train_categ_imp = pd.DataFrame(imp.fit_transform(X_train_categ))\nX_train_categ_imp.columns = X_train_categ.columns\nX_train_categ_imp.isnull().any()","95deccbb":"X_train_categ_imp.head()","c38d3c47":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder","33be5395":"X_train_categ_imp.nunique()","f3c181c8":"#train_X_categ , valid_X_categ, train_y_categ , valid_y_categ = train_test_split(X_train_categ_imp,y_train_full, test_size = 0.2) \ncols_encode = []\nfor col in X_train_categ_imp:\n    if X_train_categ_imp[col].nunique()>2:\n        cols_encode.append(col)","4f693e53":"label_X_train_categ = pd.get_dummies(X_train_categ_imp,columns=list(X_train_categ_imp.columns))","336a856a":"print(label_X_train_categ.shape)\nlabel_X_train_categ.head()","41425e7a":"label_X_train_categ.isnull()","08e6be3f":"X_train_num.info()","1b335c3e":"X_train_num.columns[X_train_num.isnull().any()]","ecbbbe51":"X_train_num.MasVnrArea","75580bd0":"np.count_nonzero(X_train_num.MasVnrArea, axis=0)","d92084d5":"X_train_num.GarageYrBlt.describe()","1e196c8c":"num_fill = SimpleImputer(strategy = 'constant', fill_value = 0)\nX_train_num_imp = pd.DataFrame(num_fill.fit_transform(X_train_num))\nX_train_num_imp.columns = X_train_num.columns\nX_train_num_imp.info()","139397ea":"X_train_num_imp.GarageYrBlt.describe()","56b2c953":"X_train_num_imp.GarageYrBlt = X_train_num.GarageYrBlt\nX_train_num_imp.GarageYrBlt.describe()","a8aabb2d":"X_train_num_imp.GarageYrBlt.interpolate(method = 'nearest',inplace =True)\nX_train_num_imp.GarageYrBlt.isnull().any()","47ae4671":"print(X_train_num_imp.GarageYrBlt)\nprint(\"Number of unique entries in column \"+str(X_train_num_imp.GarageYrBlt.nunique()))\nprint(\"Number of null entries in the column \"+str(X_train_num_imp.GarageYrBlt.isna().sum()))","8512befe":"X_train_num_imp.info()","49688bcd":"print(\"Number of null entries in the column \"+str(X_train_num_imp.MasVnrArea.isna().sum()))","13c2a6cf":"X_train_num_imp.MasVnrArea","d7a3f843":"np.count_nonzero(X_train_num_imp.MasVnrArea,axis =0)","d1feccff":"label_X_train_categ.isnull().any()","3b55b7fa":"label_X_train_categ","d7d0af4b":"X_train_num_imp","b634ec85":"tables = [X_train_num_imp,label_X_train_categ]\nX_train = pd.concat(tables,axis = 1)\nprint(X_train.shape)","df42fa42":"X_train","ac1bbadf":"X_train.to_csv('Cleaned_train.csv')","4fca2f65":"X_test_full.isnull().sum()","fd3faf0c":"'''neglig_col = ['PoolQC','Fence','MiscFeature','Alley','FireplaceQu']\nfor col in X_test_full.columns:\n    if col in neglig_col:\n        del X_test_full[col]\nX_test_full.head()'''","1770803c":"X_test_num = X_test_full.select_dtypes(['int64','float64'])\nX_test_categ = X_test_full.select_dtypes(['object'])","425ba28f":"X_test_num.head()","6a0abd4c":"X_test_categ.head()","c467c1bd":"X_test_num.info()","d33aa185":"test_imp = SimpleImputer(strategy = 'mean')\nX_test_num_imp = pd.DataFrame(test_imp.fit_transform(X_test_num))\nX_test_num_imp.columns = X_test_num.columns","e8561301":"X_test_num_imp.info()","1ff59cc3":"X_test_categ.info()","516db749":"X_test_categ.head()","d55c5247":"#testcat_imp = SimpleImputer(strategy = 'constant',missing_values=np.nan,fill_value='None')\n#X_test_categ_imp = pd.DataFrame(imp.fit_transform(X_test_categ))\n#X_test_categ_imp.columns = X_test_categ.columns\nX_test_categ_imp = X_test_categ.fillna(value='None')\nX_test_categ_imp.isnull().any()","c21cedcc":"X_test_categ_imp.head()","6b8b8a4e":"label_X_test_categ = pd.get_dummies(X_test_categ_imp,columns=list(X_test_categ_imp.columns))","88ec165c":"label_X_test_categ.head()","eb2fd628":"X_test_categ_imp.MSZoning.unique()","31b01c50":"test_tables = [X_test_num_imp,label_X_test_categ]\nX_test = pd.concat(test_tables,axis = 1)\nprint(X_test.shape)","a0ec770e":"X_test","37cb8a5b":"X_test.to_csv('Cleaned_test.csv')","a1e6772c":"### A new check for columns to make sure the only thing left is to have all columns with same number of entries (Entirely Numeric)","08203aa0":"# Concatenating the numerical and categorical tables","96eea460":"#### Checking the null values","2d8b6546":"# Input data ","926835cf":" Firstly I will try to fill the missing values with mean values","a16d201a":"## Importing the header files","5d0807a3":"#### Initializing the prediction output to y ","d7383e30":"Using Interpolate for Year Column (Considering different methods)","e9ec7942":"To make all entries uniform across all columns","c2701db4":"### Removing negligible columns the same as the ones in training data","58610c14":"Filling missing values with 0 for now","7afdbc55":"#### Applying One Hot Encoding","832a4c0e":"# Seperating into numerical and categorical columns","21c1a2c5":"#### Displaying all the data types of each column","c96cef53":"Examining the non-numeric columns","6388aad7":"# Handling the missing values","3e48e927":"#### Separating the numeric and categorical columns","41cb36b5":"#### For columns with very high percentage of missing values I will look to replace NaN values with None wherever applicable for categorical columns and with 0 for numerical columns","f0216a93":"#### Filling up all numerical columns with mean","d14f926b":"Removing the columns that have almost negligible non zero values","2b6851d7":"The imputed categorical table is now taken the complete categorical training data","5d388665":"Splitting the categorical data"}}