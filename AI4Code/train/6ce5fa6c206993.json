{"cell_type":{"72712212":"code","a451ceeb":"code","18761710":"code","a7e87854":"code","ae3979ab":"code","d0d9532a":"code","929b4f3f":"code","75d1e75d":"code","1477ab7e":"code","0697c421":"code","5ea1dd4a":"code","4127c6dc":"code","cfb268ba":"code","74de99cb":"code","25b2a32d":"code","de51fa90":"code","e227d038":"code","0a17510c":"code","094affb7":"code","4ba3a419":"code","082ec5ed":"code","3e319cca":"code","abb92022":"code","823ee516":"code","f3912911":"code","9a6c7a8e":"code","2920f73a":"code","9dd0509a":"code","23cfba99":"code","b21e9315":"code","95d99cee":"code","05e77f69":"code","bf1dcd12":"code","e23d46ab":"code","cc24144a":"code","fedc236f":"code","516b43ce":"code","c4a45914":"code","e7985d30":"code","50b43ff0":"code","ca369b88":"code","436144b6":"code","26962a91":"code","7d1f7fa2":"code","1c7594cc":"code","4dbf568e":"code","a8032391":"code","0041e7c8":"code","014289f7":"code","25146af2":"code","294cfa54":"code","3c474064":"code","4d964d02":"code","2df13a8d":"code","cae6a6ca":"code","d3bd25ec":"code","33f0d9d3":"code","54ac7134":"code","ed21f3cd":"code","8ea111c1":"code","0fd30afe":"code","7c63da3b":"code","c3e78039":"code","ac477e3c":"code","857b5fa2":"code","91a133fb":"code","81ce2cfe":"code","2501a93a":"code","728a5703":"code","6106183e":"code","a55658e6":"code","f7cefb31":"code","8168e737":"code","9103a652":"code","a3660f89":"code","ad4ca0a8":"code","78d837f0":"code","d2b80e97":"code","6b4d3562":"code","c3661ed5":"markdown","0d5503f5":"markdown","c15d8467":"markdown","3a82a4f1":"markdown","d5d3a8df":"markdown","6b9b773d":"markdown","b479be68":"markdown","629a90f5":"markdown","5557b8b9":"markdown","89d93f8c":"markdown","7f828a13":"markdown","3db294de":"markdown","a8091ee1":"markdown","5ffcedb0":"markdown","e9b26fda":"markdown"},"source":{"72712212":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb","a451ceeb":"!pip install missingno","18761710":"import missingno as mn","a7e87854":"# \uacbd\uace0\ucc3d\uc774 \ub728\uc9c0 \uc54a\uac8c\nimport warnings\nwarnings.filterwarnings('ignore')","ae3979ab":"df_train = pd.read_csv('train.csv')\ndf_test = pd.read_csv('test.csv')","d0d9532a":"df_train.info()","929b4f3f":"df_train.describe()","75d1e75d":"df_train['age'].value_counts()","1477ab7e":"df_train['fnlwgt'].value_counts()","0697c421":"df_train['education-num'].value_counts()","5ea1dd4a":"df_train['capital-gain'].value_counts()","4127c6dc":"df_train['capital-loss'].value_counts()","cfb268ba":"df_train['hours-per-week'].value_counts()","74de99cb":"df_train['income'].value_counts()","25b2a32d":"df_train['workclass'].value_counts()","de51fa90":"df_train['occupation'].value_counts()     # ???","e227d038":"df_train['native-country'].value_counts() # \ubbf8\uad6d\uc5d0\ub2e4 \ubb3c\uc74c\ud45c","0a17510c":"df_train['race'].value_counts()","094affb7":"df_train['education'].value_counts()","4ba3a419":"# workclass \uacb0\uce21\uce58( ?)\ub97c private\ub85c \ucc44\uc6b0\uae30\ndf_train[\"workclass\"]=df_train[\"workclass\"].replace(\" ?\",\"Private\")\ndf_test[\"workclass\"]=df_train[\"workclass\"].replace(\" ?\",\"Private\")","082ec5ed":"# native-country \uacb0\uce21\uce58( ?)\ub97c U-S \ub85c \ucc44\uc6b0\uae30\ndf_train[\"native-country\"]=df_train[\"native-country\"].replace(\" ?\",\"United-States\")\ndf_test[\"native-country\"]=df_test[\"native-country\"].replace(\" ?\",\"United-States\")","3e319cca":"# occupation\uc758 \uacb0\uce21\uce58\ub97c Machine-op-inspct\ndf_train['occupation'] = df_train['occupation'].replace(' ?',' Prof-specialty')\ndf_test['occupation'] = df_test['occupation'].replace(' ?',' Prof-specialty')","abb92022":"df_train['occupation'].value_counts() # occupation \ub4f1 \uacb0\uce21\uce58 \uc81c\uac70\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\uae30","823ee516":"plt.figure(figsize=(10,10))\nplt.xticks(rotation=45)\nsb.countplot(\"occupation\", hue='income', data=df_train)","f3912911":"plt.figure(figsize=(10,10))\nsb.countplot(\"native-country\", hue='income', data=df_train)","9a6c7a8e":"plt.figure(figsize=(8,8))\nsb.countplot(\"country\", hue='income', data=df_train)","2920f73a":"plt.figure(figsize=(8,8))\nsb.countplot(\"race\", hue='income', data=df_train)","9dd0509a":"plt.figure(figsize=(8,8))\nsb.countplot(\"race\", hue='income', data=df_train)","23cfba99":"plt.figure(figsize=(8,8))\nsb.countplot(\"workclass\", hue='income', data=df_train)","b21e9315":"plt.figure(figsize=(8,8))\nsb.countplot(\"sex\", hue='income', data=df_train)","95d99cee":"# \ud788\uc2a4\ud1a0\uadf8\ub7a8 : \ud074\ub798\uc2a4\ubcc4 \uacc4\uc218 \uadf8\ub798\ud504 (kdeplot()) \uc0ac\uc6a9\ud574\uc11c \ud655\uc778\nplt.figure(figsize=(8,8))\nsb.kdeplot(df_train[df_train['income']==1][\"hours-per-week\"])\nsb.kdeplot(df_train[df_train['income']==0][\"hours-per-week\"])\nplt.legend(['income(1)','income(0)'])","05e77f69":"df_train['hours-per-week'].groupby(df_train['income'], as_index=1).count()","bf1dcd12":"#### 2\uac1c \uc774\uc0c1\uc758 \uad00\uacc4\ub97c \ubcf4\uc5ec\uc8fc\ub294 \"\uadf8\ub798\ud504\" ####\n\n# factorplot : 2\uac1c \uceec\ub7fc\uacfc Survived\uceec\ub7fc\uacfc\uc758 \uad00\uacc4\ub97c \ud55c\ubc88\uc5d0 \ubcf4\uc5ec\uc8fc\ub294 \uac83\n# \uc138\ub85c\uc120\uc758 \uae38\uc774\ub294 \uc784\uc758 \ud45c\ubcf8\uc744 \ubf51\uc558\uc744 \ub54c \ucd5c\uc18c\ube44\uc728\uacfc \ucd5c\ub300\ube44\uc728\uc744 \ud45c\uc2dc\ud55c \uac83\nsb.factorplot(\"Pclass\", \"Survived\", hue=\"Sex\", data=df_train)\n\n# \ud788\uc2a4\ud1a0\uadf8\ub7a8 : \ud074\ub798\uc2a4\ubcc4 \uacc4\uc218 \uadf8\ub798\ud504 (kdeplot())\n# \ub098\uc774\ub97c \uae30\uc900\uc73c\ub85c \uc0dd\uc874\ub960\uc744 \ud45c\uc2dc (\ub098\uc774\uac00 \uc5f0\uc18d\uc801\uc778 \uac12\uc758 \ud2b9\uc9d5\uc744 \uac00\uc9c0\uace0 \uc788\uae30\ub54c\ubb38\uc5d0 \uc0ac\uc6a9)\nsb.kdeplot(df_train[df_train['Survived']==1][\"Age\"])\nsb.kdeplot(df_train[df_train['Survived']==0][\"Age\"])\nplt.legend(['Survived(1)','Survived(0)'])\n\n# violinplot() : 2\uac1c \uce7c\ub7fc\uacfc Survived \uceec\ub7fc\uacfc\uc758 \uad00\uacc4\ub97c \ud45c\uc2dc\ud558\ub294 \uac83\n# hue = \uae30\uc900\uc810!\nsb.violinplot('Pclass','Age',hue='Survived', data=df_train,scale=\"count\",split=1)\nplt.show()","e23d46ab":"####  2\uac1c \uc774\uc0c1\uc758 \uad00\uacc4\ub97c \ubcf4\uc5ec\uc8fc\ub294 \"\ud45c:groupby \/ crosstab\" ####\n\n# Groupby : \ud574\ub2f9 \uce7c\ub7fc\uc744 \uae30\uc874\uc758 \uc0c1\ub300\uce7c\ub7fc\uc73c\ub85c \ubb36\uc74c\n# as_index=True : \ud074\ub798\uc2a4\ub97c \ucd9c\ub825 (False : \uc778\ub371\uc2a4 \uac12\uc73c\ub85c \ucd9c\ub825)\n# count() : \uac1c\uc218\ub97c \uc138\ub294 \ud568\uc218\ndf_train[['Pclass','Survived']].groupby(df_train['Pclass'], as_index=1).count()\n# \uc0dd\uc874\uc790 \uc218\ub9cc \uacc4\uc0b0\ndf_train[[\"Pclass\", \"Survived\"]].groupby(df_train['Pclass'], as_index=True).sum()\n# \uc0dd\uc874\ub960 \uacc4\uc0b0\ndf_train[[\"Pclass\", \"Survived\"]].groupby(df_train['Pclass'], as_index=True).mean()\n# \ud615\uc81c,\uc790\ub9e4\uc640 \uc0dd\uc874\ub960\npd.crosstab(df_train['SibSp'],df_train['Survived'],margins=True).style.background_gradient(cmap=\"summer_r\")","cc24144a":"df_train['marital']=df_train['marital-status'].replace([' Married-AF-spouse',' Married-civ-spouse',' Divorced',' Never-married',' Widowed',' Married-spouse-absent',' Separated'],\n                        ['Family','Family','N_Family','N_Family','N_Family','N_Family','N_Family'])\ndf_test['marital']=df_test['marital-status'].replace([' Married-AF-spouse',' Married-civ-spouse',' Divorced',' Never-married',' Widowed',' Married-spouse-absent',' Separated'],\n                        ['Family','Family','N_Family','N_Family','N_Family','N_Family','N_Family'])","fedc236f":"# Asia\ub85c \ubc14\uafb8\uae30 (12\uac1c\uad6d\uac00)\ndf_train['country']=df_train['native-country'].replace([' Philippines',' India',' China',' Japan',' Vietnam',' Taiwan',\n                                                        ' Cambodia',' Hong',' Thailand',' Laos', ' South',' Iran'],\n                                                       ['Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia'])\ndf_test['country']=df_test['native-country'].replace([' Philippines',' India',' China',' Japan',' Vietnam',' Taiwan',\n                                                        ' Cambodia',' Hong',' Thailand',' Laos', ' South',' Iran'],\n                                                       ['Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia'])                                                       ","516b43ce":"# N_America\ub85c \ubc14\uafb8\uae30 (4\uac1c\uad6d\uac00(\ubbf8\uad6d\uc774 2\uac1c! = 5\uac1c)\ndf_train['country']=df_train['country'].replace([' United-States','United-States',' Mexico',' Canada',' Outlying-US(Guam-USVI-etc)'],\n                                                       ['N_America','N_America','N_America','N_America','N_America'])\ndf_test['country']=df_test['country'].replace([' United-States','United-States',' Mexico',' Canada',' Outlying-US(Guam-USVI-etc)'],\n                                                       ['N_America','N_America','N_America','N_America','N_America'])                                                       ","c4a45914":"# S_America\ub85c \ubc14\uafb8\uae30 (13\uac1c\uad6d\uac00)','\ndf_train['country']=df_train['country'].replace([' Puerto-Rico',' El-Salvador',' Cuba',' Jamaica',' Columbia',' Dominican-Republic',\n                                                       ' Guatemala',' Haiti',' Nicaragua',' Peru',' Ecuador',' Trinadad&Tobago',' Honduras'],\n                                                       ['S_America','S_America','S_America','S_America','S_America','S_America','S_America',\n                                                       'S_America','S_America','S_America','S_America','S_America','S_America'])\ndf_test['country']=df_test['country'].replace([' Puerto-Rico',' El-Salvador',' Cuba',' Jamaica',' Columbia',' Dominican-Republic',\n                                                       ' Guatemala',' Haiti',' Nicaragua',' Peru',' Ecuador',' Trinadad&Tobago',' Honduras'],\n                                                       ['S_America','S_America','S_America','S_America','S_America','S_America','S_America',\n                                                       'S_America','S_America','S_America','S_America','S_America','S_America'])                                                       ","e7985d30":"# Europe\ub85c \ubc14\uafb8\uae30 (12\uac1c\uad6d\uac00)\ndf_train['country']=df_train['country'].replace([' Germany',' England',' Italy',' Poland',' Portugal',' Greece',\n                                                        ' Ireland',' France',' Yugoslavia',' Hungary', ' Scotland',' Holand-Netherlands'],\n                                                       ['Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe',\n                                                       'Europe','Europe','Europe','Europe'])\ndf_test['country']=df_test['country'].replace([' Germany',' England',' Italy',' Poland',' Portugal',' Greece',\n                                                        ' Ireland',' France',' Yugoslavia',' Hungary', ' Scotland',' Holand-Netherlands'],\n                                                       ['Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe',\n                                                       'Europe','Europe','Europe','Europe'])                                                       ","50b43ff0":"# df_train[\"Age_cat\"] = 0\n\n# df_train.loc[df_train['age'] < 20, \"Age_cat\"] = 1\n# df_train.loc[(20 <= df_train['age'])&(df_train['age']< 40), \"Age_cat\"] = 2\n# df_train.loc[(40 <= df_train['age'])&(df_train['age']< 60), \"Age_cat\"] = 3\n# df_train.loc[60 <= df_train['age'], \"Age_cat\"] = 4\n\n# df_test[\"Age_cat\"] = 0\n\n# df_test.loc[df_test['age'] < 20, \"Age_cat\"] = 1\n# df_test.loc[(20 <= df_test['age'])&(df_test['age']< 40), \"Age_cat\"] = 2\n# df_test.loc[(40 <= df_test['age'])&(df_test['age']< 60), \"Age_cat\"] = 3\n# df_test.loc[60 <= df_test['age'], \"Age_cat\"] = 4","ca369b88":"df_train['education'] = df_train['education'].replace([' Preschool', ' 1st-4th', ' 5th-6th',' 7th-8th', ' 9th', ' 10th', ' 11th', \n                                                       ' 12th', ' Assoc-acdm', ' Assoc-voc', ' HS-grad', ' Some-college',\n                                                      ' Prof-school',' Bachelors', ' Masters', ' Doctorate' ],\n                                                      ['minor','minor','minor','minor','minor','minor','minor','minor',\n                                                       'Associates','Associates','HS-graduate','HS-graduate','Prof-school', \n                                                       'Bachelors', 'Masters', 'Doctorate' ])\ndf_test['education'] = df_test['education'].replace([' Preschool', ' 1st-4th', ' 5th-6th',' 7th-8th', ' 9th', ' 10th', ' 11th', \n                                                       ' 12th', ' Assoc-acdm', ' Assoc-voc', ' HS-grad', ' Some-college',\n                                                      ' Prof-school',' Bachelors', ' Masters', ' Doctorate' ],\n                                                      ['minor','minor','minor','minor','minor','minor','minor','minor',\n                                                       'Associates','Associates','HS-graduate','HS-graduate','Prof-school', \n                                                       'Bachelors', 'Masters', 'Doctorate' ])","436144b6":"df_train['occupation'] = df_train['occupation'].replace([' Prof-specialty',' Exec-managerial',' Tech-support',' Protective-serv',\n                                                         \" Craft-repair\",\" Adm-clerical\",' Sales', ' Other-service', ' Machine-op-inspct',\n                                                          ' Transport-moving', ' Handlers-cleaners', ' Farming-fishing',\n                                                          ' Protective-serv', ' Priv-house-serv', ' Armed-Forces'],\n                                                         ['a','a','a','a','b','b','b','b','b','b','b','b','b','b','b'])\ndf_test['occupation'] = df_test['occupation'].replace([' Prof-specialty',' Exec-managerial',' Tech-support',' Protective-serv',\n                                                         \" Craft-repair\",\" Adm-clerical\",' Sales', ' Other-service', ' Machine-op-inspct',\n                                                          ' Transport-moving', ' Handlers-cleaners', ' Farming-fishing',\n                                                          ' Protective-serv', ' Priv-house-serv', ' Armed-Forces'],\n                                                       ['a','a','a','a','b','b','b','b','b','b','b','b','b','b','b'])","26962a91":"df_train['marital'] = df_train['marital'].map({'Family':0, 'N_Family':1})\ndf_test['marital'] = df_test['marital'].map({'Family':0, 'N_Family':1})","7d1f7fa2":"# race\uc744 \uc22b\uc790\ub85c\ndf_train.race = df_train.race.map({' Amer-Indian-Eskimo':0,' Asian-Pac-Islander':1,' Black':2,' Other':3,' White':4})\ndf_test.race = df_test.race.map({' Amer-Indian-Eskimo':0,' Asian-Pac-Islander':1,' Black':2,' Other':3,' White':4})","1c7594cc":"# country\uc744 \uc22b\uc790\ub85c\ndf_train.country = df_train.country.map({'N_America':0,'S_America':1,'Asia':2,'Europe':3})\ndf_test.country = df_test.country.map({'N_America':0,'S_America':1,'Asia':2,'Europe':3})","4dbf568e":"# \uc131\ubcc4 \ubb38\uc790\ub97c \uc22b\uc790\ub85c \ubc14\uafb8\uae30 \ndf_train['sex'] = df_train['sex'].map({' Male':0, ' Female':1})\ndf_test['sex'] = df_test['sex'].map({' Male':0, ' Female':1})","a8032391":"# # hours-per-week \ubd84\ub958 \ubc0f \uc22b\uc790\ub85c \ubc14\uafb8\uae30\n\n# df_train['New_hour'] = 0\n\n# df_train.loc[df_train['hours-per-week'] < 25, \"New_hour\"] = 1\n# df_train.loc[(25 <= df_train['hours-per-week'])&(df_train['hours-per-week']< 40), \"New_hour\"] = 2\n# df_train.loc[(40 <= df_train['hours-per-week'])&(df_train['hours-per-week']< 60), \"New_hour\"] = 3\n# df_train.loc[60 <= df_train['hours-per-week'], \"New_hour\"] = 4\n\n# df_test[\"New_hour\"] = 0\n\n# df_test.loc[df_test['hours-per-week'] < 25, \"New_hour\"] = 1\n# df_test.loc[(25 <= df_test['hours-per-week'])&(df_test['hours-per-week']< 40), \"New_hour\"] = 2\n# df_test.loc[(40 <= df_test['hours-per-week'])&(df_test['hours-per-week']< 60), \"New_hour\"] = 3\n# df_test.loc[60 <= df_test['hours-per-week'], \"New_hour\"] = 4","0041e7c8":"# education\uc744 \uc22b\uc790\ub85c\ndf_train.education = df_train.education.map({'minor':0,'Associates':1,'HS-graduate':2,'Prof-school':3,'Bachelors':4,'Masters':5,'Doctorate':6})\ndf_test.education = df_test.education.map({'minor':0,'Associates':1,'HS-graduate':2,'Prof-school':3,'Bachelors':4,'Masters':5,'Doctorate':6})","014289f7":"# education \uceec\ub7fc one-hot encoding\ndf_train = pd.get_dummies(df_train, columns=[\"education\"], prefix=\"edu\")\ndf_test = pd.get_dummies(df_test, columns=[\"education\"], prefix=\"edu\")","25146af2":"# occupation \uceec\ub7fc one-hot encoding\ndf_train = pd.get_dummies(df_train, columns=[\"occupation\"], prefix=\"occ\")\ndf_test = pd.get_dummies(df_test, columns=[\"occupation\"], prefix=\"occ\")","294cfa54":"# race \uceec\ub7fc one-hot encoding\ndf_train = pd.get_dummies(df_train, columns=[\"race\"], prefix=\"ra\")\ndf_test = pd.get_dummies(df_test, columns=[\"race\"], prefix=\"ra\")","3c474064":"# sex \uceec\ub7fc one-hot encoding\ndf_train = pd.get_dummies(df_train, columns=[\"sex\"], prefix=\"sex\")\ndf_test = pd.get_dummies(df_test, columns=[\"sex\"], prefix=\"sex\")","4d964d02":"# marital \uceec\ub7fc one-hot encoding\ndf_train = pd.get_dummies(df_train, columns=[\"marital\"], prefix=\"mar\")\ndf_test = pd.get_dummies(df_test, columns=[\"marital\"], prefix=\"mar\")","2df13a8d":"# country \uceec\ub7fc one-hot encoding\ndf_train = pd.get_dummies(df_train, columns=[\"country\"], prefix=\"c\")\ndf_test = pd.get_dummies(df_test, columns=[\"country\"], prefix=\"c\")","cae6a6ca":"df_train #\ud655\uc778","d3bd25ec":"# del df_train['age']\n# del df_test['age']\n\ndel df_train['workclass']\ndel df_test['workclass']\n\ndel df_train['education-num']\ndel df_test['education-num']\n\ndel df_train['marital-status']\ndel df_test['marital-status']\n\n# del df_train['hours-per-week']\n# del df_test['hours-per-week']\n\ndel df_train['native-country']\ndel df_test['native-country']\n\ndel df_train['relationship']\ndel df_test['relationship']\n\ndel df_train['no']\ndel df_test['no']","33f0d9d3":"df_test #\ud655\uc778","54ac7134":"heatmapCo = df_train[['income', 'capital-gain', 'capital-loss', 'marital', 'country', 'Age_cat', 'New_hour']]\nplt.figure(figsize=(12,12))\nsb.heatmap(heatmapCo.astype(float).corr(),annot=True)","ed21f3cd":"df_train","8ea111c1":"Y = df_train.iloc[:,5]\nX = df_train.drop(labels=['income'],axis=1)\nY","0fd30afe":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier","7c63da3b":"from sklearn.model_selection import train_test_split\ntrainX, testX, trainY, testY = train_test_split(X,Y,random_state=0)","c3e78039":"!pip install xgboost","ac477e3c":"import xgboost\nfrom xgboost.sklearn import XGBClassifier","857b5fa2":"from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\n\nscaler_m = StandardScaler()\nscaler_m.fit(trainX)\n\ntrainX_scaler = scaler_m.transform(trainX)\ntestX_scaler = scaler_m.transform(testX)\ndf_test_scaler = scaler_m.transform(df_test)","91a133fb":"# LinearSVC (scaler O\nmodel_svc = LinearSVC(C=0.1,random_state=3)\nmodel_svc.fit(trainX_scaler, trainY)\nmodel_svc.score(testX_scaler,testY)","81ce2cfe":"# xgboost (scaler X\nmodel_xgb = XGBClassifier(learning_rate=0.1,n_estimators=1000,max_depth=4,gamma=2)\nmodel_xgb.fit(trainX, trainY)\nmodel_xgb.score(testX,testY)","2501a93a":"# xgboost (scaler O\nmodel_xgb = XGBClassifier(learning_rate=0.1,n_estimators=500,max_depth=2,gamma=0)\nmodel_xgb.fit(trainX_scaler, trainY)\nmodel_xgb.score(testX_scaler,testY)","728a5703":"# RandomForest\nmodel_rf = RandomForestClassifier(n_estimators=500,max_depth=2,random_state=0)\nmodel_rf.fit(trainX, trainY)\nmodel_rf.score(testX,testY)","6106183e":"# GradientBoosting (scaler X\nmodel_gbm = GradientBoostingClassifier(random_state=0)\nmodel_gbm.fit(trainX, trainY)\nmodel_gbm.score(testX,testY)","a55658e6":"# GradientBoosting (scaler O\nmodel_gbm = GradientBoostingClassifier(random_state=3)\nmodel_gbm.fit(trainX_scaler, trainY)\nmodel_gbm.score(testX_scaler,testY)","f7cefb31":"# \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c \/ \ud30c\ub77c\ubbf8\ud130\uac12 \uc870\uc815 \/ \ud655\ub960\uc740 \uc798?\n\nlearning_rate = [0.0001, 0.001, 0.1, 1, 10, 100, 1000]\nn_estimators = [100,200,300,400,500,600,700]\nmax_depth = [1,2,3,4,5,6,7]\ngamma = [0.001,0.01,0.1,1,10,100,1000]\n\n\nfor i in range(len(learning_rate)):\n    model_xgb = XGBClassifier(learning_rate=learning_rate[i],n_estimators=n_estimators[i],max_depth=max_depth[i])\n    model_xgb.fit(trainX, trainY)\n    print(\"learning_rate \uac12 : \", learning_rate[i])\n    print(\"n_estimators \uac12 : \", n_estimators[i])\n    print(\"max_depth \uac12 : \",max_depth[i])\n    print(\"Score : \", model_xgb.score(testX, testY))","8168e737":"# GridSearchCV\nfrom sklearn.model_selection import GridSearchCV\n\n# \ud30c\ub77c\ubbf8\ud130 \uac12\uc744 \uc124\uc815\nparam = {\"C\":[0.001,0.01,0.1,1,10,100,1000],'n_estimators':[500],'max_depth':[2], 'gamma':[1]}\n\n# (\uc0ac\uc6a9\ud560 \ubaa8\ub378, \uac80\uc0c9\ud560 \ud30c\ub77c\ubbf8\ud130 \ubaa9\ub85d,Kfold\uac12, \uad50\ucc28 \uac80\uc99d\uac12\uc744 \ubc18\ud658\ud560\uc9c0 )\ngrid_search = GridSearchCV(XGBClassifier(), param, cv=5, return_train_score=True)","9103a652":"grid_search.fit(trainX, trainY)","a3660f89":"grid_search.score(testX, testY)","ad4ca0a8":"answer_xgb = model_xgb.predict(df_test_scaler)","78d837f0":"answer_df = pd.DataFrame(columns=['income'])","d2b80e97":"for i in range(len(df_test)):\n    answer_df.loc[i,['income']] = answer_xgb[i]\nanswer_df","6b4d3562":"answer_df.to_csv('answer_df_xgb66.csv', encoding='euc-kr', index=False) # submisstion","c3661ed5":"\uc6d0\ud56b\uc778\ucf54\ub529","0d5503f5":"### \ud6c8\ub828 \ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub85c \ubd84\ub9ac","c15d8467":"### \uc0c1\uad00\uad00\uacc4\ubd84\uc11d(HEAT MAP)","3a82a4f1":"\uac01 \uceec\ub7fc\uc758 \ud074\ub798\uc2a4\uc758 \uc885\ub958\uc640 \uc218\ub97c \ud655\uc778 ( .value_counts())","d5d3a8df":"# \uac1c\uc778 \uc218\uc785 (Classification)","6b9b773d":"\uacb0\uce21\uce58 \ucc44\uc6b0\uae30","b479be68":"### \uc5c5\ub85c\ub4dc\ud558\ub294 \ubc95","629a90f5":"\uadf8\ub798\ud504 \uc815\ub9ac *don't Run","5557b8b9":"## 3. \ud2b9\uc131\uacf5\ud559 \/ \uc804\ucc98\ub9ac","89d93f8c":"## 2. \ub370\uc774\ud130 \uc218\uc9d1","7f828a13":"income \uceec\ub7fc\uacfc \ub2e4\ub978 \uceec\ub7fc \uac04 \uad00\uacc4 \uc2dc\uac01\ud654","3db294de":"\ud544\uc694\uc5c6\ub294 \uc5f4 del","a8091ee1":"## 3. EDA\n- \uacb0\uce21\uce58, \uc774\uc0c1\uce58 \ud655\uc778\n- \uc2dc\uac01\ud654 \ubd84\uc11d\n- \ub370\uc774\ud130 \ud655\uc778\n- \uc218, \ube44\uc728 \ubd84\uc11d\n- \uc815\uaddc\ud654\ub97c \uc704\ud55c \ub370\uc774\ud130 \ubd84\uc11d","5ffcedb0":"\uadf8\ub8f9\ud654\ud558\uae30(\ubc94\uc8fc\ud615\ub370\uc774\ud130\ub85c!)","e9b26fda":"## 1. \ubb38\uc81c \uc815\uc758"}}