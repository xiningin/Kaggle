{"cell_type":{"6d2ae885":"code","88dd4068":"code","c3cea563":"code","0a4d9264":"code","685615d0":"code","4bf8e24f":"code","96a64e76":"code","4a38e574":"code","91386afc":"code","ed308365":"code","a32df75d":"code","c8a45af1":"code","2773a093":"code","ea028e63":"code","eb7e5730":"code","1346a4a4":"code","636bd95c":"code","bf9af041":"code","446d3701":"code","5f2dbf3b":"code","16ffc285":"code","9ddfc02b":"code","466da3c6":"code","32cf0ddf":"code","4a98e5d4":"code","bb7bc078":"code","2f436e41":"markdown","cc13a3bd":"markdown","73eebe02":"markdown"},"source":{"6d2ae885":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nimport math\nimport random\n%matplotlib inline","88dd4068":"def seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\nSEED = 30\nseed_everything(SEED)","c3cea563":"data = pd.read_csv('..\/input\/shopee-product-matching\/train.csv')\noriginal_data = pd.read_csv('..\/input\/shopee-product-matching\/train.csv')","0a4d9264":"data.head()","685615d0":"data.shape","4bf8e24f":"for col in data.columns:\n    print(col, len(np.unique(data[col])))","96a64e76":"vc = dict(data.label_group.value_counts())\ncounts = list(set(vc.values()))\nprint('min = ', min(counts), \", max = \", max(counts), ', all = ', sum(vc.values()))","4a38e574":"fig = plt.figure(figsize=(15, 5))\narr = plt.hist(vc.values(), bins=52)\nfor i in range(52):\n    plt.text(arr[1][i]+0.1,arr[0][i]+200,str(arr[0][i]), rotation=90)\nplt.xticks(list(range(52)))\nplt.tight_layout()\nplt.show()","91386afc":"max_count = 10\nlabels = data.label_group.unique()\nfor i in tqdm(range(len(labels))):\n    label_group = labels[i]\n    if vc[label_group] > 5:\n        continue\n    current_data = data[data.label_group == label_group]\n    duplicates = math.ceil(max_count \/ vc[label_group])\n    for i in range(duplicates):\n        data = data.append(current_data, ignore_index=True)","ed308365":"data.shape","a32df75d":"vc = dict(data.label_group.value_counts())\ncounts = list(set(vc.values()))\nprint('min = ', min(counts), \", max = \", max(counts), ', all = ', sum(vc.values()))","c8a45af1":"fig = plt.figure(figsize=(15, 5))\narr = plt.hist(vc.values(), bins=52)\nfor i in range(52):\n    plt.text(arr[1][i]+0.1,arr[0][i]+200,str(arr[0][i]), rotation=90)\nplt.xticks(list(range(52)))\nplt.tight_layout()\nplt.show()","2773a093":"data['label_group_2'] = 0","ea028e63":"labels = data.label_group.unique()\nsame= 0.3\nfor i in tqdm(range(len(labels))):\n    label_group = labels[i]\n    current_data = data[data.label_group == label_group]\n    ln = current_data.shape[0]\n    same_group_ids = random.sample(current_data.posting_id.values.tolist(), math.ceil(ln * same))\n    other_groups_ids = []\n    labels2 = list(labels[:])\n    labels2.remove(label_group)\n    for j in range(ln - math.ceil(ln * same)):\n        other_label_group = random.sample(labels2, 1)[0]\n        other_data = data[data.label_group == other_label_group]\n        other_groups_ids.append(random.sample(other_data.posting_id.values.tolist(), 1)[0])\n    same_group_ids.extend(other_groups_ids)\n    data.loc[data.label_group == label_group, 'label_group_2'] = same_group_ids","eb7e5730":"data.shape","1346a4a4":"data.head()","636bd95c":"data_merged = data.merge(original_data, how='inner', left_on='label_group_2', right_on='posting_id', suffixes=('', '_g2'),)","bf9af041":"data_merged.drop(['label_group_2'], axis=1, inplace=True)","446d3701":"data_merged['label'] = (data_merged['label_group'] == data_merged['label_group_g2']).astype(int)","5f2dbf3b":"data_merged.shape","16ffc285":"data_merged.head()","9ddfc02b":"data_merged['train'] = True","466da3c6":"labels = data_merged.label_group.unique()\nvalid = 0.2\nfor i in tqdm(range(len(labels))):\n    label_group = labels[i]\n    current_data1 = data_merged[(data_merged.label_group == label_group) & (data_merged.label == 1)]\n    current_data0 = data_merged[(data_merged.label_group == label_group) & (data_merged.label == 0)]\n    same_group_ids = random.sample(current_data1.index.values.tolist(), math.ceil(current_data1.shape[0] * valid \/ 2.))\n    same_group_ids.extend(random.sample(current_data0.index.values.tolist(), math.ceil(current_data0.shape[0] * valid \/ 2.)))\n    \n    data_merged.loc[same_group_ids, 'train'] = False","32cf0ddf":"print(data_merged[(data_merged.train == False) & (data_merged.label == 1)].shape)\nprint(data_merged[(data_merged.train == False) & (data_merged.label == 0)].shape)\nprint(data_merged[(data_merged.train == False)].shape[0] \/ data_merged[(data_merged.train == True)].shape[0])","4a98e5d4":"data_merged.to_csv('data_merged.csv', index=False)","bb7bc078":"data_merged[(data_merged.train == False)].to_csv('data_merged_valid.csv', index=False)\ndata_merged[(data_merged.train == True)].to_csv('data_merged_train.csv', index=False)","2f436e41":"## Oversampling","cc13a3bd":"## Data Exploration","73eebe02":"## Generate second image"}}