{"cell_type":{"12a43e80":"code","6f17a1ef":"code","475e5e54":"code","89ea96d2":"code","ef747893":"code","62d156cb":"markdown"},"source":{"12a43e80":"#Get the input files\nimport os\nimport pandas as pd \nimport numpy as np\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\n\n\nprint(os.listdir(\"..\/input\"))\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n","6f17a1ef":"#Getting to knoe the data\ntrain.info()\nprint(train.shape)\nprint(train.describe())\ntest.info()\nprint(test.shape)\nprint(test.describe())","475e5e54":"#Restructure the data\n\n\n#1. Separate Label and Image Pixels\ntrain_label = train[\"label\"]\ntrain_images = train.drop(labels = [\"label\"], axis = 1)\n\n#2. Normalize the data (Since, 255 is the max value)\ntrain_images = train_images \/ 255.0\ntest = test \/ 255.0\n\n#3. Reshape the data - From scalar to actual image format -?? \ntrain_images = train_images.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\n\n#4. Label Encoding - Changing classes to 0\/1 matrices\ntrain_label = to_categorical(train_label, num_classes = 10)\n\n\nprint(train_images.shape)\nprint(test.shape)\nprint(train_label.shape)\n","89ea96d2":"#Define model\n\nfrom keras import models\nfrom keras import layers\nfrom keras.layers.core import  Flatten, Dense, Activation\n\nnetwork = models.Sequential()\nnetwork.add(layers.Dense(52, activation='relu', input_shape=(28, 28, 1)))\nnetwork.add(Flatten())\nnetwork.add(Dense(10, activation='softmax'))\n\nprint(network.input_shape)\nprint(network.output_shape)\n\nnetwork.compile(optimizer='rmsprop',\n                loss='categorical_crossentropy',\n                metrics=['accuracy'])\n\nnetwork.fit(train_images, train_label, epochs=5, batch_size=128)","ef747893":"predictions = network.predict_classes(test)\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"DR.csv\", index=False, header=True)\n","62d156cb":"Coding Neural Network, can be a daunting task for any beginner. It took me huge amount of time to figure out **The Hello World** programme. I've written down this kernel as an amalgamation from so many sources. This kernel consits of the bare minimum code, which can help any newcomer to get onboarded with Deep Learning. \n\nMost of the code is pretty self explanatory. I've provided explanations, wherever it took me a great amount of struggle."}}