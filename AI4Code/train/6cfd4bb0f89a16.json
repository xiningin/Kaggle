{"cell_type":{"b6897194":"code","c3e596ff":"code","30a582e8":"code","6f721b37":"code","6a3cb56e":"code","3bc05991":"code","04085a3a":"code","4a7acad4":"code","a8ee68da":"code","31088f6e":"code","6e1124ee":"code","a7d14fa0":"code","b69b0a5a":"code","d4a996df":"code","9def372d":"code","d999367e":"code","74f49c93":"code","ec2a48b8":"code","26fed583":"code","c046804d":"code","9837767c":"code","43a8847b":"code","26c23dfc":"code","094d3e1f":"code","178d586b":"code","3175c8f1":"code","83f5c736":"code","bd84ac6c":"code","40fbf862":"code","6e289e21":"code","4a0bd0f5":"code","cd2ae52c":"code","ded0c82f":"code","3a73b26b":"code","3ca6403d":"code","8c9da21d":"code","97b016cd":"code","b2f80019":"code","b66db53d":"code","a43d5fb5":"code","6666255e":"markdown","224e51a9":"markdown","450bf9ce":"markdown","a7e90758":"markdown","b1dcbd61":"markdown","126403b8":"markdown","c80e79b6":"markdown","72723179":"markdown","416d8a56":"markdown","950b5d8f":"markdown","18ec54d9":"markdown","123dbc1d":"markdown","f8a98068":"markdown","0799e7a9":"markdown","9794d7e6":"markdown","cd09c622":"markdown","60184f02":"markdown"},"source":{"b6897194":"!pip install tweet-preprocessor\n!pip install transformers","c3e596ff":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","30a582e8":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch import autograd\nfrom torch.utils import data\nfrom torch.backends import cudnn\nimport torch.optim as optim\n\nimport time\nimport preprocessor as tp\nimport re\n\nimport string\nimport pandas as pd\nimport numpy as np\n\nfrom statistics import mean\nfrom wordcloud import STOPWORDS\nfrom torch.utils.data import DataLoader, RandomSampler, SequentialSampler, WeightedRandomSampler\nfrom torch.utils.data import TensorDataset, random_split\nfrom transformers import BertForSequenceClassification, AdamW, BertConfig\nfrom transformers import BertTokenizer","6f721b37":"import time\nimport datetime\n","6a3cb56e":"import matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport seaborn as sns","3bc05991":"# If there's a GPU available...\nif torch.cuda.is_available():    \n\n    # Tell PyTorch to use the GPU.    \n    device = torch.device(\"cuda\")\n\n    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n\n    print('We will use the GPU:', torch.cuda.get_device_name(0))\n\n# If not...\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device(\"cpu\")","04085a3a":"df_train = pd.read_csv('..\/input\/nlp-getting-started\/train.csv', dtype={'id': np.int16, 'target': np.int8})\ndf_test = pd.read_csv('..\/input\/nlp-getting-started\/test.csv', dtype={'id': np.int16})\n\nprint('Training Set Shape = {}'.format(df_train.shape))\nprint('Training Set Memory Usage = {:.2f} MB'.format(df_train.memory_usage().sum() \/ 1024**2))\nprint('Test Set Shape = {}'.format(df_test.shape))\nprint('Test Set Memory Usage = {:.2f} MB'.format(df_test.memory_usage().sum() \/ 1024**2))","4a7acad4":"df_train.head()","a8ee68da":"fig, axes = plt.subplots(ncols=2, figsize=(17, 4), dpi=100)\nplt.tight_layout()\n\ndf_train.groupby('target').count()['id'].plot(kind='pie', ax=axes[0], labels=['Not Disaster (57%)', 'Disaster (43%)'])\nsns.countplot(x=df_train['target'], hue=df_train['target'], ax=axes[1], )","31088f6e":"missing_columns = [\"location\", \"keyword\"]\n\nfig, axes = plt.subplots(ncols=2, figsize=(17, 4), dpi=100)\n\nsns.barplot(x=df_train[missing_columns].isnull().sum().index, y=df_train[missing_columns].isnull().sum().values, ax=axes[0])\nsns.barplot(x=df_test[missing_columns].isnull().sum().index, y=df_test[missing_columns].isnull().sum().values, ax=axes[1])\n\naxes[0].set_ylabel(\"Count of missing values\")\naxes[0].tick_params(axis='x', labelsize=15)\naxes[0].tick_params(axis='y', labelsize=15)\naxes[1].tick_params(axis='x', labelsize=15)\naxes[1].tick_params(axis='y', labelsize=15)\n\naxes[0].set_title('Training Set', fontsize=13)\naxes[1].set_title('Test Set', fontsize=13)\nplt.show()\n\n# every null value should be replaced with no_x\n\nfor df in [df_train, df_test]:\n    for col in ['keyword', 'location']:\n        df[col] = df[col].fillna(f'no_{col}')","6e1124ee":"df_train.head()","a7d14fa0":"df_train['keyword'].value_counts().size","b69b0a5a":"df_train.groupby('keyword')['keyword'].nunique()","d4a996df":"print(f\"Number of unique values in keywords: training - {df_train['keyword'].value_counts().size}, test {df_test['keyword'].value_counts().size}\")\nprint(f\"Number of unique values in location: training - {df_train['location'].value_counts().size}, test {df_test['location'].value_counts().size}\")","9def372d":"df_train['target_mean'] = df_train.groupby('keyword')['target'].transform('mean')\n\nfig = plt.figure(figsize=(8, 72), dpi=100)\n\nsns.countplot(y=df_train.sort_values(by='target_mean', ascending=False)['keyword'],\n              hue=df_train.sort_values(by='target_mean', ascending=False)['target'])\n\nplt.tick_params(axis='x', labelsize=15)\nplt.tick_params(axis='y', labelsize=12)\nplt.legend(loc=1)\nplt.title('Target Distribution in Keywords')\n\nplt.show()\n\ndf_train.drop(columns=['target_mean'], inplace=True)","d999367e":"df_train['word_count'] = df_train['text'].apply(lambda x: len(str(x).split()))\ndf_test['word_count'] = df_test['text'].apply(lambda x: len(str(x).split()))\n\ndf_train['unique_word_count'] = df_train['text'].apply(lambda x: len(set(str(x).split())))\ndf_test['unique_word_count'] = df_test['text'].apply(lambda x: len(set(str(x).split())))\n                                                       \ndf_train['stop_word_count'] = df_train['text'].apply(lambda x: len([w for w in str(x).lower().split() if w in STOPWORDS]))\ndf_test['stop_word_count'] = df_test['text'].apply(lambda x: len([w for w in str(x).lower().split() if w in STOPWORDS]))\n\ndf_train['url_count'] = df_train['text'].apply(lambda x: len([w for w in str(x).lower().split() if \"http\" in w]))\ndf_test['url_count'] = df_test['text'].apply(lambda x: len([w for w in str(x).lower().split() if \"http\" in w]))\n\ndf_train['mean_word_length'] = df_train['text'].apply(lambda x: mean([len(w) for w in str(x).split()]))\ndf_test['mean_word_length'] = df_test['text'].apply(lambda x: mean([len(w) for w in str(x).split()]))\n\ndf_train['char_count'] = df_train['text'].apply(lambda x: len(str(x)))\ndf_test['char_count'] = df_test['text'].apply(lambda x: len(str(x)))\n\ndf_train['punctuation_count'] = df_train['text'].apply(lambda x: len([c for c in str(x) if c in string.punctuation]))\ndf_test['punctuation_count'] = df_test['text'].apply(lambda x: len([c for c in str(x) if c in string.punctuation]))","74f49c93":"meta_features = [\"word_count\", \"unique_word_count\", \"stop_word_count\", \"url_count\", \"mean_word_length\", \"char_count\", \"punctuation_count\"]\n\nDISASTER_TWEETS = df_train['target'] == 1\n\nfig, axes = plt.subplots(ncols=2,\n                      nrows=len(meta_features),\n                      figsize=(20,50),\n                      dpi=100)\n\nfor (i, feature) in enumerate(meta_features):    \n    sns.distplot(df_train.loc[~DISASTER_TWEETS][feature], label=\"Not Disaster\", ax=axes[i][0], color=\"green\")\n    sns.distplot(df_train.loc[DISASTER_TWEETS][feature], label=\"Disaster\", ax=axes[i][0], color=\"red\")\n    \n    sns.distplot(df_train[feature], label='Training', ax=axes[i][1])\n    sns.distplot(df_test[feature], label='Test', ax=axes[i][1])\n    \n    for j in range(2):\n        axes[i][j].set_xlabel('')\n        axes[i][j].tick_params(axis='x', labelsize=12)\n        axes[i][j].tick_params(axis='y', labelsize=12)\n        axes[i][j].legend()\n    \n    axes[i][0].set_title(f'{feature} Target Distribution in Training Set', fontsize=13)\n    axes[i][1].set_title(f'{feature} Training & Test Set Distribution', fontsize=13)\n\nplt.show()","ec2a48b8":"# remove URLs, emojis, mentions, smileys and numbers\ntp.set_options(tp.OPT.URL,\n               tp.OPT.EMOJI,\n               tp.OPT.MENTION,\n               tp.OPT.SMILEY,\n               tp.OPT.NUMBER)","26fed583":"# apply preprocessing\ndf_train['preprocessed_text'] = df_train['text'].apply(lambda x: tp.clean(x))\ndf_test['preprocessed_text'] = df_test['text'].apply(lambda x: tp.clean(x))","c046804d":"df_train['preprocessed_text'] = df_train['preprocessed_text'].apply(lambda x: re.sub(r\"#(\\w+)\", r\"\\1\", x))\ndf_test['preprocessed_text'] = df_test['preprocessed_text'].apply(lambda x: re.sub(r\"#(\\w+)\", r\"\\1\", x))","9837767c":"tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)","43a8847b":"df_train['token_count'] = df_train['preprocessed_text'].apply(lambda x: len(tokenizer.encode(x)))\ndf_test['token_count'] = df_test['preprocessed_text'].apply(lambda x: len(tokenizer.encode(x)))","26c23dfc":"DISASTER_TWEETS = df_train['target'] == 1\n\nfig, axes = plt.subplots(ncols=2,\n                      nrows=1,\n                      figsize=(14,4),\n                        dpi=100)\n\nsns.distplot(df_train.loc[~DISASTER_TWEETS][\"token_count\"], label=\"Not Disaster\", ax=axes[0], color=\"green\")\nsns.distplot(df_train.loc[DISASTER_TWEETS][\"token_count\"], label=\"Disaster\", ax=axes[0], color=\"red\")\n\nsns.distplot(df_train[\"token_count\"], label='Training', ax=axes[1])\nsns.distplot(df_test[\"token_count\"], label='Test', ax=axes[1])\n    \nfor j in range(2):\n    axes[j].set_xlabel('')\n    axes[j].tick_params(axis='x', labelsize=12)\n    axes[j].tick_params(axis='y', labelsize=12)\n    axes[j].legend()\n    \naxes[0].set_title(f'Token count Target Distribution in Training Set', fontsize=13)\naxes[1].set_title(f'Token count Training & Test Set Distribution', fontsize=13)\n\nplt.show()","094d3e1f":"print(f\"Max token count is {max(df_train['token_count'].max(), df_test['token_count'].max())}\")","178d586b":"# method for tokenizing data from dataframes\ndef tokenize_dataframe(df, include_labels = True):\n    input_ids = []\n    attention_masks = []\n    \n    # For every tweet\n    for tweet in df[\"preprocessed_text\"]:\n        # `encode_plus` will:\n        #   (1) Tokenize the sentence.\n        #   (2) Prepend the `[CLS]` token to the start.\n        #   (3) Append the `[SEP]` token to the end.\n        #   (4) Map tokens to their IDs.\n        #   (5) Pad or truncate the sentence to `max_length`\n        #   (6) Create attention masks for [PAD] tokens.\n        encoded_dict = tokenizer.encode_plus(\n                            tweet,                      # Sentence to encode.\n                            add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                            max_length = 128,           # Pad & truncate all sentences to 128 - max tokens is 78\n                            pad_to_max_length = True,\n                            return_attention_mask = True,   # Construct attn. masks.\n                            return_tensors = 'pt',     # Return pytorch tensors.\n                       )\n\n        # Add the encoded sentence to the list.    \n        input_ids.append(encoded_dict['input_ids'])\n\n        # And its attention mask (simply differentiates padding from non-padding).\n        attention_masks.append(encoded_dict['attention_mask'])\n        \n    # Convert the lists into tensors.\n    input_ids = torch.cat(input_ids, dim=0)\n    attention_masks = torch.cat(attention_masks, dim=0)\n    \n    if include_labels:\n        labels = torch.tensor(df.target.values).long()\n        return input_ids, attention_masks, labels\n    else:\n        return input_ids, attention_masks","3175c8f1":"def get_weighted_sampler_for_subset(subset):\n    ds = subset.dataset[subset.indices]\n    labels = ds[2].numpy()\n    unique_labels, class_counts = np.unique(labels, return_counts = True)\n    num_samples = sum(class_counts)\n\n    print(f\"Non-disaster vs Disaster: {class_counts[0]} \/ {class_counts[1]}\")\n\n    class_weights = [num_samples\/class_counts[i] for i in range(len(class_counts))]\n    weights = [class_weights[labels[i]] for i in range(int(num_samples))]\n    sampler = WeightedRandomSampler(torch.DoubleTensor(weights), int(num_samples))\n    \n    return sampler","83f5c736":"# Use BERT Tokenizer on train and test data\nds_inputs, ds_attentions_masks, ds_labels = tokenize_dataframe(df_train, include_labels = True)\ntest_inputs, test_attention_masks = tokenize_dataframe(df_test, include_labels = False)\n\n# Generate TensorDatasets\ndataset = TensorDataset(ds_inputs, ds_attentions_masks, ds_labels)\ntest_dataset = TensorDataset(test_inputs, test_attention_masks)\n\n# Create a 80-20 train-validation split.\n# Calculate the number of samples to include in each set.\ntrain_size = int(0.8 * len(dataset))\nval_size = len(dataset) - train_size\n\n# # Divide the dataset by randomly selecting samples.\ntrain_dataset, validation_dataset = random_split(dataset, [train_size, val_size])\n\nprint(f\"{train_size} training samples\")\nprint(f\"{val_size} validation samples\")","bd84ac6c":"batch_size = 32\n\n# Create the DataLoader for training data\ntrain_sampler = get_weighted_sampler_for_subset(train_dataset)\ntrain_dataloader = DataLoader(train_dataset, sampler=train_sampler, batch_size=batch_size)\n\n# Create the DataLoader for validation data\nvalidation_sampler = get_weighted_sampler_for_subset(validation_dataset)\nvalidation_dataloader = DataLoader(validation_dataset, sampler=validation_sampler, batch_size=batch_size)\n\n# Create the DataLoader for test data\ntest_dataset = TensorDataset(test_inputs, test_attention_masks)\ntest_sampler = SequentialSampler(test_dataset)\ntest_dataloader = DataLoader(test_dataset, sampler=test_sampler, batch_size=batch_size)","40fbf862":"model = BertForSequenceClassification.from_pretrained(\n    \"bert-base-uncased\", # Use the 12-layer BERT model, with an uncased vocab.\n    num_labels = 2, # The number of output labels--2 for binary classification.\n                    # You can increase this for multi-class tasks.   \n    output_attentions = False, # Whether the model returns attentions weights.\n    output_hidden_states = False, # Whether the model returns all hidden-states.\n)\n\nmodel.cuda()","6e289e21":"# Get all of the model's parameters as a list of tuples.\nparams = list(model.named_parameters())\n\nprint('The BERT model has {:} different named parameters.\\n'.format(len(params)))\n\nprint('==== Embedding Layer ====\\n')\n\nfor p in params[0:5]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n\nprint('\\n==== First Transformer ====\\n')\n\nfor p in params[5:21]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n\nprint('\\n==== Output Layer ====\\n')\n\nfor p in params[-4:]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))","4a0bd0f5":"# Note: AdamW is a class from the huggingface library (as opposed to pytorch) \n# I believe the 'W' stands for 'Weight Decay fix\"\noptimizer = AdamW(model.parameters(),\n                  lr = 2e-5, # args.learning_rate - default is 5e-5, our notebook had 2e-5\n                  eps = 1e-8 # args.adam_epsilon  - default is 1e-8.\n                )\n","cd2ae52c":"from transformers import get_linear_schedule_with_warmup\n\n# Number of training epochs. The BERT authors recommend between 2 and 4. \n# We chose to run for 4, but we'll see later that this may be over-fitting the\n# training data.\nepochs = 4\n\n# Total number of training steps is [number of batches] x [number of epochs]. \n# (Note that this is not the same as the number of training samples).\ntotal_steps = len(train_dataloader) * epochs\n\n# Create the learning rate scheduler.\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps = 0, # Default value in run_glue.py\n                                            num_training_steps = total_steps)","ded0c82f":"# Function to calculate the accuracy of our predictions vs labels\ndef flat_accuracy(preds, labels):\n    pred_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return np.sum(pred_flat == labels_flat) \/ len(labels_flat)\n\ndef format_time(elapsed):\n    '''\n    Takes a time in seconds and returns a string hh:mm:ss\n    '''\n    # Round to the nearest second.\n    elapsed_rounded = int(round((elapsed)))\n    \n    # Format as hh:mm:ss\n    return str(datetime.timedelta(seconds=elapsed_rounded))","3a73b26b":"import random\nimport numpy as np\n\n# This training code is based on the `run_glue.py` script here:\n# https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L128\n\n# Set the seed value all over the place to make this reproducible.\nseed_val = 42\n\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)\n\n# We'll store a number of quantities such as training and validation loss, \n# validation accuracy, and timings.\ntraining_stats = []\n\n# Measure the total training time for the whole run.\ntotal_t0 = time.time()\n\n# For each epoch...\nfor epoch_i in range(0, epochs):\n    \n    # ========================================\n    #               Training\n    # ========================================\n    \n    # Perform one full pass over the training set.\n\n    print(\"\")\n    print('======== Epoch {:} \/ {:} ========'.format(epoch_i + 1, epochs))\n    print('Training...')\n\n    # Measure how long the training epoch takes.\n    t0 = time.time()\n\n    # Reset the total loss for this epoch.\n    total_train_loss = 0\n\n    # Put the model into training mode. Don't be mislead--the call to \n    # `train` just changes the *mode*, it doesn't *perform* the training.\n    # `dropout` and `batchnorm` layers behave differently during training\n    # vs. test (source: https:\/\/stackoverflow.com\/questions\/51433378\/what-does-model-train-do-in-pytorch)\n    model.train()\n\n    # For each batch of training data...\n    for step, batch in enumerate(train_dataloader):\n\n        # Progress update every 40 batches.\n        if step % 40 == 0 and not step == 0:\n            # Calculate elapsed time in minutes.\n            elapsed = format_time(time.time() - t0)\n            \n            # Report progress.\n            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))\n\n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using the \n        # `to` method.\n        #\n        # `batch` contains three pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n\n        # Always clear any previously calculated gradients before performing a\n        # backward pass. PyTorch doesn't do this automatically because \n        # accumulating the gradients is \"convenient while training RNNs\". \n        # (source: https:\/\/stackoverflow.com\/questions\/48001598\/why-do-we-need-to-call-zero-grad-in-pytorch)\n        model.zero_grad()        \n\n        # Perform a forward pass (evaluate the model on this training batch).\n        # The documentation for this `model` function is here: \n        # https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#transformers.BertForSequenceClassification\n        # It returns different numbers of parameters depending on what arguments\n        # arge given and what flags are set. For our useage here, it returns\n        # the loss (because we provided labels) and the \"logits\"--the model\n        # outputs prior to activation.\n        loss, logits = model(b_input_ids, \n                             token_type_ids=None, \n                             attention_mask=b_input_mask, \n                             labels=b_labels)\n\n        # Accumulate the training loss over all of the batches so that we can\n        # calculate the average loss at the end. `loss` is a Tensor containing a\n        # single value; the `.item()` function just returns the Python value \n        # from the tensor.\n        total_train_loss += loss.item()\n\n        # Perform a backward pass to calculate the gradients.\n        loss.backward()\n\n        # Clip the norm of the gradients to 1.0.\n        # This is to help prevent the \"exploding gradients\" problem.\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        # Update parameters and take a step using the computed gradient.\n        # The optimizer dictates the \"update rule\"--how the parameters are\n        # modified based on their gradients, the learning rate, etc.\n        optimizer.step()\n\n        # Update the learning rate.\n        scheduler.step()\n\n    # Calculate the average loss over all of the batches.\n    avg_train_loss = total_train_loss \/ len(train_dataloader)            \n    \n    # Measure how long this epoch took.\n    training_time = format_time(time.time() - t0)\n\n    print(\"\")\n    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n    print(\"  Training epcoh took: {:}\".format(training_time))\n        \n    # ========================================\n    #               Validation\n    # ========================================\n    # After the completion of each training epoch, measure our performance on\n    # our validation set.\n\n    print(\"\")\n    print(\"Running Validation...\")\n\n    t0 = time.time()\n\n    # Put the model in evaluation mode--the dropout layers behave differently\n    # during evaluation.\n    model.eval()\n\n    # Tracking variables \n    total_eval_accuracy = 0\n    total_eval_loss = 0\n    nb_eval_steps = 0\n\n    # Evaluate data for one epoch\n    for batch in validation_dataloader:\n        \n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using \n        # the `to` method.\n        #\n        # `batch` contains three pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n        \n        # Tell pytorch not to bother with constructing the compute graph during\n        # the forward pass, since this is only needed for backprop (training).\n        with torch.no_grad():        \n\n            # Forward pass, calculate logit predictions.\n            # token_type_ids is the same as the \"segment ids\", which \n            # differentiates sentence 1 and 2 in 2-sentence tasks.\n            # The documentation for this `model` function is here: \n            # https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#transformers.BertForSequenceClassification\n            # Get the \"logits\" output by the model. The \"logits\" are the output\n            # values prior to applying an activation function like the softmax.\n            (loss, logits) = model(b_input_ids, \n                                   token_type_ids=None, \n                                   attention_mask=b_input_mask,\n                                   labels=b_labels)\n            \n        # Accumulate the validation loss.\n        total_eval_loss += loss.item()\n\n        # Move logits and labels to CPU\n        logits = logits.detach().cpu().numpy()\n        label_ids = b_labels.to('cpu').numpy()\n\n        # Calculate the accuracy for this batch of test sentences, and\n        # accumulate it over all batches.\n        total_eval_accuracy += flat_accuracy(logits, label_ids)\n        \n\n    # Report the final accuracy for this validation run.\n    avg_val_accuracy = total_eval_accuracy \/ len(validation_dataloader)\n    print(\"  Accuracy: {0:.2f}\".format(avg_val_accuracy))\n\n    # Calculate the average loss over all of the batches.\n    avg_val_loss = total_eval_loss \/ len(validation_dataloader)\n    \n    # Measure how long the validation run took.\n    validation_time = format_time(time.time() - t0)\n    \n    print(\"  Validation Loss: {0:.2f}\".format(avg_val_loss))\n    print(\"  Validation took: {:}\".format(validation_time))\n\n    # Record all statistics from this epoch.\n    training_stats.append(\n        {\n            'epoch': epoch_i + 1,\n            'Training Loss': avg_train_loss,\n            'Valid. Loss': avg_val_loss,\n            'Valid. Accur.': avg_val_accuracy,\n            'Training Time': training_time,\n            'Validation Time': validation_time\n        }\n    )\n\nprint(\"\")\nprint(\"Training complete!\")\n\nprint(\"Total training took {:} (h:mm:ss)\".format(format_time(time.time()-total_t0)))","3ca6403d":"# Display floats with two decimal places.\npd.set_option('precision', 2)\n\n# Create a DataFrame from our training statistics.\ndf_stats = pd.DataFrame(data=training_stats)\n\n# Use the 'epoch' as the row index.\ndf_stats = df_stats.set_index('epoch')\n\n# A hack to force the column headers to wrap.\n#df = df.style.set_table_styles([dict(selector=\"th\",props=[('max-width', '70px')])])\n\n# Display the table.\ndf_stats","8c9da21d":"# Use plot styling from seaborn.\nsns.set(style='darkgrid')\n\n# Increase the plot size and font size.\nsns.set(font_scale=1.5)\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\n# Plot the learning curve.\nplt.plot(df_stats['Training Loss'], 'b-o', label=\"Training\")\nplt.plot(df_stats['Valid. Loss'], 'g-o', label=\"Validation\")\n\n# Label the plot.\nplt.title(\"Training & Validation Loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.xticks([1, 2, 3, 4])\n\nplt.show()","97b016cd":"# Prediction on test set\n\nprint(f'Predicting labels for {len(test_dataset)} test sentences...')\n\n# Put model in evaluation mode\nmodel.eval()\n\n# Tracking variables \npredictions = []\n\n# Predict \nfor batch in test_dataloader:\n    # Add batch to GPU\n    batch = tuple(t.to(device) for t in batch)\n  \n    # Unpack the inputs from our dataloader\n    b_input_ids, b_input_mask = batch\n  \n    # Telling the model not to compute or store gradients, saving memory and \n    # speeding up prediction\n    with torch.no_grad():\n        # Forward pass, calculate logit predictions\n        outputs = model(b_input_ids, token_type_ids=None, \n                          attention_mask=b_input_mask)\n\n    logits = outputs[0]\n\n    # Move logits and labels to CPU\n    logits = logits.detach().cpu().numpy()\n\n    # Store predictions and true labels\n    for logit in logits:\n        predictions.append(logit)\n\nprint('    DONE.')","b2f80019":"predictions_class = []\nids = []\n\nfor i in range(len(predictions)):\n    predictions_class.append(np.argmax(predictions[i]))\n    ids.append(df_test[\"id\"][i])","b66db53d":"my_submission = pd.DataFrame({\"Id\" : ids, \"target\" : predictions_class})","a43d5fb5":"# export to csv\nmy_submission.to_csv(\"my_submission.csv\", index=False)","6666255e":"### Create samplers and data loaders","224e51a9":"### Reformat logits into actual predictions","450bf9ce":"## Generate the datasets","a7e90758":"## Create the model object","b1dcbd61":"## Load data","126403b8":"### Acknowledgment\nThis kernel relies on fantastic kernels:\n\nhttps:\/\/www.kaggle.com\/gunesevitan\/nlp-with-disaster-tweets-eda-cleaning-and-bert\n\nhttps:\/\/www.kaggle.com\/vbmokin\/nlp-eda-bag-of-words-tf-idf-glove-bert\n\nMy goal was largely to replicate their work and reimplement it in pytorch\n\nI also used code from the article:\n\nhttps:\/\/towardsdatascience.com\/bert-text-classification-using-pytorch-723dfb8b6b5b\n\nAs well from Chris McCormick's excellent tutorial on using BERT:\nhttps:\/\/colab.research.google.com\/drive\/1pTuQhug6Dhl9XalKB0zUGf4FIdYFlpcX#scrollTo=cRaZQ4XC7kLs","c80e79b6":"## Look into the data","72723179":"## Token numbers countplot","416d8a56":"### Tokenization process\n1. Create the BertTokenizer object\n2. Count tokens\n3. SNS plot\n4. Tokenize dataframes & add attention masks\n","950b5d8f":"### Predictions on test dataset","18ec54d9":"## Meta features\n* `word_count` number of words in text\n* `unique_word_count` number of unique words in text\n* `stop_word_count` number of stop words in text\n* `url_count` of urls in text\n* `mean_word_length` average character count in words\n* `char_count` of characters in text\n* `punctuation_count` number of punctuations in text\n* `hashtag_count` of hashtags (#) in text\n* `mention_count` number of mentions (@) in text\n","123dbc1d":"### replace hashtags with words","f8a98068":"## Address class inbalance - use Weighted Sampler\nNormally, we would be alright using just SequentialSampler. However, in this case classes are unbalanced and WeightedSampler is needed.","0799e7a9":"## Count disaster vs non-disaster tweets","9794d7e6":"## Cardinality and Target Distribution","cd09c622":"# EDA\nAssumptions about the data to be tested:\n1. There is an even split between disaster and non-disaster tweets - pie chart and bar chart\n2. Count missing values\n\n### Tasks:\n1. Plot location frequency as descending order bar chart\n2. Plot vertical axis plot, with keyword frequencies by target\n\n### Meta features:\n1. word count target_distribution in:\n    a. training set\n    b. training & test set\n2. unique word count:\n    a. training set\n    b. training & test set\n3. stop word count:\n    a. training set\n    b. training & test set\n4. URL count:\n    a. training set\n    b. training & test set\n5. mean word lenghts:\n    a. training set\n    b. training & test set\n6. char count:\n    a. training set\n    b. training & test set\n7. punctuation count\n    a. training set\n    b. training & test set\n8. hashtag count    \n    a. training set\n    b. training & test set\n9. mention count\n    a. not disaster\n    b. disaster\n    \n### n-grams anlysis\n1. Countplot of the most frequent 1-, 2- and 3- grams for disaster and non-disaster tweets\n","60184f02":"### Preprocessing tweets"}}