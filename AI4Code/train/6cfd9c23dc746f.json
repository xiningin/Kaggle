{"cell_type":{"0acc7306":"code","92a5eafa":"code","ddc744ed":"code","aeceb7ca":"code","cc210a9f":"code","e39a78cc":"code","b6b86c7b":"code","6fe64f61":"code","51d5174a":"code","7d426340":"code","91ba1942":"code","3a7c2a7e":"code","3cf9363d":"code","3d9238a8":"code","192c1201":"code","28ab9b89":"code","e34a1d79":"code","e7090fad":"code","9d32be9b":"code","aa2c80d8":"code","2599e3a4":"code","a6f524bf":"code","27e33ae5":"code","050f2153":"code","5560a3f6":"code","09ffe32a":"code","dfd1dd33":"code","f93fd784":"code","c6408047":"code","2d030ca0":"code","8988cc8c":"code","2128f5fb":"code","a2378d4f":"code","8ffd1fa4":"code","b3a047f9":"code","d26bccca":"code","275705b6":"code","bfc727f9":"code","041b4ddb":"code","f5b2ed8d":"code","a5538ba5":"code","33d0f43f":"code","c7209a24":"code","8eddba77":"code","ef92bdc0":"code","18149529":"code","15252667":"code","bd3b7518":"code","3c7899df":"code","2f95f36e":"code","25fe98d0":"code","ac35dd0f":"code","91ef37c2":"code","b56704fe":"markdown","67a1e93e":"markdown","ae35da38":"markdown","9a3d68df":"markdown","2cde2fc8":"markdown","d5a48291":"markdown","9555d506":"markdown","c05686fa":"markdown","abbcd131":"markdown","45bfe44c":"markdown","50529315":"markdown","dc371b0e":"markdown","2b5eb6ce":"markdown","2f8e4e04":"markdown"},"source":{"0acc7306":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go \nimport plotly.express as px \n%matplotlib inline","92a5eafa":"# Importing the House price dataset\ndf = pd.read_csv('..\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv')\ndf.head()","ddc744ed":"print('the shape of dataset is :',df.shape)","aeceb7ca":"#Checking the null values\ndf.isnull().sum()","cc210a9f":"# Checking the dataset info\ndf.describe()","e39a78cc":"# Observing the Bath and Balcony column\ny0 = df.bath\ny1 = df.balcony\nfig = go.Figure()\nfig.add_trace(go.Box(y=y0,name='Bath',quartilemethod=\"linear\"))\nfig.add_trace(go.Box(y=y1,name='Balcony',quartilemethod=\"linear\"))\nfig.update_layout(title='Bath & Balcony', yaxis_title='Count',height=420,width=1080)\nfig.show()","b6b86c7b":"# As we can not fill the null data in Society by any means so saying it: No data (for nan value)\n# As we say that maximum count of Bath and Balcony lies between its LQ - UQ: We can fill the bath,balcony by its mean\n# For size we can not\ndf.bath = df.bath.fillna(int(df.bath.mean()))\ndf.balcony = df.balcony.fillna(int(df.balcony.mean()))\ndf.society = df.society.fillna(\"No data\")\ndf = df[df['location'].notna()]\ndf = df[df['size'].notna()]\ndf.head()","6fe64f61":"# Again checking the null values\ndf.isnull().sum()","51d5174a":"# Removing un-necessary columns\ndf.drop(columns=['area_type','availability','society'],inplace=True)\n","7d426340":"# Size column having mixed value like '2 bhk or 2 bedroom' so i am generalising it\n# Renaming column size to BHK\n# Converting price into lakhs\ndf['size'] = df['size'].apply(lambda x: int(x.split(' ')[0]))\ndf.rename(columns={'size':'bhk'},inplace=True)\ndf['price'] = df['price']*100000\ndf.head()\n","91ba1942":"#Checking total_sqft column entires\ndf.total_sqft.unique()","3a7c2a7e":"# Making a function to have all different types of entires\ndef check_float(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True\ndf[~df['total_sqft'].apply(check_float)].head(10)","3cf9363d":"# Now converting this type of entries ('1125 - 4112') into INT and storing their average\ndef dash_to_int(x):\n    dash = x.split('-')\n    if len(dash)==2:\n        return (float(dash[0]) + float(dash[1]))\/2\n    try:\n        return float(x)\n    except:\n        return None\ndf['total_sqft'] = df['total_sqft'].apply(dash_to_int)\ndf.rename(columns={'total_sqft':'total_area'},inplace=True)\ndf.head()","3d9238a8":"# Cross checking total_area entries types\ndf[df['total_area'].apply(check_float)]","192c1201":"df.head()","28ab9b89":"# Applying strip function to stripping the location names\ndf['location'] = df['location'].apply(lambda x: x.strip())","e34a1d79":"# As we have a lot of locations name so i am reducing the name types by assigning: location occuring for less than 10times as OTHER\nloc = df.location.value_counts()\nloc[loc<=10].count()\nlocation_lessthan_10 = loc[loc<=10]\ndf.location = df.location.apply(lambda x: 'other' if x in location_lessthan_10 else x)\ndf.head()\n\n","e7090fad":"# cross checking\ndf.location.value_counts()","9d32be9b":"# Making column 'price_per_sqft'\ndf['price_per_sqft'] = df['price']\/df['total_area']","aa2c80d8":"df.price_per_sqft.describe()","2599e3a4":"df.shape","a6f524bf":"df.describe()","27e33ae5":"## Removing general outliers and making dataset distributed normally\ndef normally_dist(df):\n    df_out = pd.DataFrame()\n    for key, subdf in df.groupby('location'):\n        m = np.mean(subdf.price_per_sqft)\n        st = np.std(subdf.price_per_sqft)\n        red_df = subdf[(subdf.price_per_sqft>(m-st)) &(subdf.price_per_sqft<=(m+st))]\n        df_out = pd.concat([df_out,red_df],ignore_index = True)\n    return df_out\ndf = normally_dist(df)\ndf.shape\n","050f2153":"df.describe()","5560a3f6":"# Checking total_area data points\nfig = px.box(df,y='total_area',\n            title='Total Area')\nfig.update_layout(yaxis_title ='Area')\nfig.show()","09ffe32a":"# 1bhk house must be more than 300 sqft\ndf = df[~(df.total_area\/df.bhk < 300)]\ndf.shape","dfd1dd33":"## Viz where it is happening that 2bhk price > 3bhk\n\ndef plot_scatter(df,location):\n    bhk2 = df[(df.location == location) &(df.bhk ==2)]\n    bhk3 = df[(df.location == location) &(df.bhk ==3)]\n    fig = go.Figure() \n    fig.add_trace(go.Scatter(x=bhk2.total_area,y=bhk2.price,\n                    mode='markers',\n                    name='2 BHK'))\n    fig.add_trace(go.Scatter(x=bhk3.total_area,y=bhk3.price,\n                    mode='markers',\n                    name='3 BHK'))\n    fig.update_layout(title='2BHK vs 3BHK Price', xaxis_title='Area in Sqft', yaxis_title='Price',height=620,width=680)\n    fig.show()\n\nplot_scatter(df,'Rajaji Nagar')\n\n","f93fd784":"# new feature inspection = Bathrooms (i went to my bussines manager)\ndf.bath.unique()","c6408047":"y0 = df.bath\ny1 = df.bhk\nfig = go.Figure()\nfig.add_trace(go.Box(y=y0,name='Bath',quartilemethod=\"linear\"))\nfig.add_trace(go.Box(y=y1,name='BHK',quartilemethod=\"linear\"))\nfig.update_layout(title='Bath & BHK', yaxis_title='Count',height=420,width=1080)\nfig.show()","2d030ca0":"## As per BM i know that their can not be bathrooms more than Count of BHK +2 (may be outlier)","8988cc8c":"df[df['bath']> df['bhk']+2]","2128f5fb":"# Removing bath outliers\ndf.drop(df[df['bath']> df['bhk']+2].index, inplace = True)","a2378d4f":"y0 = df.total_area\ny1 = df.bhk\nfig = go.Figure()\nfig.add_trace(go.Box(y=y0,name='total_area',quartilemethod=\"linear\"))\nfig.add_trace(go.Box(y=y1,name='BHK',quartilemethod=\"linear\"))\nfig.update_layout(title='Bath & BHK', yaxis_title='Count',height=420,width=1080)\nfig.show()","8ffd1fa4":"df.to_csv('Final_cleaned_data_4.csv')","b3a047f9":"dff = pd.read_csv('.\/Final_cleaned_data_4.csv',index_col=0)","d26bccca":"dff.shape","275705b6":"# one hot enchoding\ndummies_dff =  pd.get_dummies(dff.location)\ndff1 = pd.concat([dff,dummies_dff],axis='columns')","bfc727f9":"#dummmy variable trap avoided and string categorical data column removed\n\ndff = dff1.drop(columns=['Vittasandra','location'])","041b4ddb":"dff.head(3)","f5b2ed8d":"dff.shape","a5538ba5":"df.corr()","33d0f43f":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\n\nmodel = LinearRegression()","c7209a24":"%%time\nx= dff.drop(columns=['price','price_per_sqft'])\ny = dff1['price']","8eddba77":"y.shape","ef92bdc0":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.35,random_state=10)","18149529":"model.fit(x_train,y_train)\nmodel.score(x_test,y_test)","15252667":"print('Model Acccuracy:',model.score(x_test,y_test)*100,'%')","bd3b7518":"x.columns","3c7899df":"# Script for prediction\ndef prediction(location,sqft,bhk,bath):\n    location_index = np.where(x.columns == location)[0][0]\n\n    X = np.zeros(len(x.columns))\n    X[0]=bhk\n    X[1]=sqft\n    X[2]=bath  \n    #X[3]=price_per_sqft   \n # X[3]= pricepersqft'( if we want to add price_p_sqft as a feature)       \n    if location_index>=0:\n        X[location_index]=1\n    return model.predict([X])[0]\n","2f95f36e":"#Give input in order of location,sqft,bhk,bath\n\nPrice_prediction = prediction('1st Phase JP Nagar',1400,2,2)\n\nprint(\"The predicted price is\",Price_prediction ,\"lakh\")","25fe98d0":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = scaler.fit_transform(x)","ac35dd0f":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\n#import xgboost as xgb \nfrom sklearn.tree import DecisionTreeRegressor\n#from sklearn.ensemble import RandomForestRegressor\n\ndef find_best_model_using_gridsearchcv(x , y):\n    algos = {\n        'LinearRegression' : {\n            'model' : LinearRegression(),\n            'params' : {\n                'normalize' : [True , False],\n                'fit_intercept': [True , False],\n                 'copy_X' : [True , False]\n            }\n        },\n        'lasso' : {\n            'model' : Lasso(),\n            'params' : {\n                'alpha' : [1, 10, 50, 200, 500],\n                'selection' : ['random' , 'cyclic']\n            } \n        },\n         'Ridge' : {\n            'model' : Ridge(), \n            'params' : {\n                'alpha' : [1, 10, 50, 200, 500],\n                'fit_intercept' : [True , False],\n                'normalize' : [True , False],\n            }\n        },\n        'descision_tree' : {\n            'model' : DecisionTreeRegressor(),\n            'params' :{\n                'criterion' : ['mse' , 'friedman_mse'],\n                'splitter' : ['best' , 'random']\n            }\n        }\n    }\n    \n    scores = []\n    cv = ShuffleSplit(n_splits = 5 , test_size = 0.2 , random_state = 0)\n    for algo_name , config in algos.items():\n        gs = GridSearchCV(config['model'] , config['params'] , cv = cv , return_train_score = False)\n        gs.fit(x,y)\n        scores.append({\n            'model' : algo_name , \n            'best_score' : gs.best_score_,\n            'best_params' : gs.best_params_\n        })\n \n    return pd.DataFrame(scores , columns = ['model' , 'best_score' , 'best_params'])  ","91ef37c2":"from warnings import simplefilter\nfrom sklearn.exceptions import ConvergenceWarning\nsimplefilter(\"ignore\", category=ConvergenceWarning)\n\nfind_best_model_using_gridsearchcv(x,y) ","b56704fe":"## Outliers removal by the knowledge of bussiness domain\n\n#### Dataset must be Distributed uniformally\n1. 1bhk house must be more than 300 sqft\n2. Mostly price of 3 or 4 bhk house > price of 1bhk house\n3. Number of bathrooms is less than count of BHK or (bhk+2) of house\n ","67a1e93e":"## Data Cleaning","ae35da38":"### Cleaning columns : 'bath' and 'balcony'","9a3d68df":"### Now i am Going to check other Regression models and find out which one is the best","2cde2fc8":"### Cleaning column: 'location'","d5a48291":"### Cleaning Column: total_sqft","9555d506":"We can see that total_sqft column have some entires as (1113 - 1505) so now we have to check more carefully","c05686fa":"### Predictions","abbcd131":"#### ADDING a column named 'price_per_sqft' for understanding the data more clearly","45bfe44c":"### Thats why we used Liner Reg model\n\n{Project by : Kumar Shivam}","50529315":"### Normalising the data set by taking 'price_per_sqft' as a feature","dc371b0e":"## AS WE CLEANED OUR DATA NOW I AM MOVING TOWARDS MODEL TRAINING","2b5eb6ce":"### MOdel training","2f8e4e04":"### As we used hot encoding for th elocation so we need a script to take input as location and get desired predictions\n\nInput Parameters: Bhk;total_sqft;bath;location"}}