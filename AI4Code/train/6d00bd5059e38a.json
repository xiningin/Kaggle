{"cell_type":{"19b830a7":"code","f7d579cc":"code","a5f5af36":"code","5ffd6ad8":"code","6a2f9f80":"code","87bb209b":"code","ee5577c0":"code","41305d32":"code","2fe5b489":"code","bb9d4fbc":"code","e7687680":"code","d0e55cab":"code","1989ec2a":"code","aff1a2d3":"code","341fee86":"code","2b872ea2":"code","1e8fedf2":"code","575606fb":"code","9d56acda":"code","d8b85c9d":"code","ba9785ef":"code","b267dbf9":"code","7e806297":"code","f1e3cca9":"code","a8302355":"code","b8c6e72c":"code","38c67e2a":"code","b79599cc":"code","fef6dcfb":"code","52513b9d":"code","5817dcda":"code","d9bf017a":"code","923d55b6":"code","13b875f5":"code","a69d5051":"code","ed4e0dc5":"code","24855e67":"code","e1a50f0c":"code","d445c256":"code","89ec0a2d":"code","a4523f1e":"code","e2ed7de7":"code","d26cde0b":"code","e198031d":"code","a583e6be":"code","e3b71bfd":"code","b0003171":"code","6e38b864":"code","09e7e354":"code","90f0e098":"code","eea66d14":"code","5c21c655":"code","03713f74":"code","9c2e6865":"code","246602fa":"code","4c6bc3b6":"code","740032f0":"code","f68d1e28":"code","7f087475":"code","9972b8bb":"code","cf1861ef":"code","ae590168":"code","ca6f8093":"code","3e5c4797":"code","2556043e":"code","a5d181d4":"code","2d6648f7":"code","a3bf9d04":"code","f158f7bc":"code","0555abaa":"code","73ea7dcf":"code","089bbd90":"code","f9ce6138":"code","9832913d":"code","d2a4c4e0":"code","8740927c":"code","bbbe31b0":"code","65496416":"code","14d49b24":"code","d40aca9d":"code","6f9462e5":"code","3ffe70ac":"code","cfd9d631":"code","ebee950e":"code","17588b9d":"code","ae924472":"code","1ab6eb4d":"code","428c1ade":"code","8f03eb6f":"code","4712e82d":"code","63a3b6bf":"code","64e6d9b1":"code","f2a08857":"code","56c71e11":"code","f24d5255":"markdown","ff02ca8e":"markdown","8af45ac5":"markdown","e2324848":"markdown","01a4da97":"markdown","ccc9b8dc":"markdown","9152ef9e":"markdown","42ebc2c3":"markdown","e75abf9c":"markdown","eac0067b":"markdown","47ba965f":"markdown","2fdfb5d4":"markdown","6d0f0bb2":"markdown","7ca41bb5":"markdown","04bff534":"markdown","eb2d1aca":"markdown","8990f4b9":"markdown","d01ca9ba":"markdown","34c3adb4":"markdown","abe84b68":"markdown","1f5d3fa8":"markdown","6a13e951":"markdown","b6bdaaaf":"markdown","d4fa9e7c":"markdown","3abc8111":"markdown","76a8f914":"markdown","fb837ac4":"markdown","c733969d":"markdown","ebe18756":"markdown","8f34fcdb":"markdown","64923c6e":"markdown","f76784bc":"markdown","2353abe6":"markdown","3f085c24":"markdown","40345e6d":"markdown","c560d18b":"markdown","572ee14d":"markdown","51787d6d":"markdown","4629d570":"markdown","ae0bee83":"markdown","6b9a546c":"markdown","ea673e46":"markdown","405f6148":"markdown","d93cb21d":"markdown","0cdc2af6":"markdown","ede9b703":"markdown","6a061080":"markdown","68f6397a":"markdown","a121f005":"markdown","45d851a2":"markdown","53624477":"markdown","fe7cb444":"markdown","66b6ccdd":"markdown"},"source":{"19b830a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport random\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7d579cc":"pd.set_option('display.max_colwidth', 100)","a5f5af36":"# Read the data and make a visual assessment\nzomato_df= pd.read_csv('\/kaggle\/input\/zomato-bangalore-restaurants\/zomato.csv')\nzomato_df.head(5)","5ffd6ad8":"#dataset size\nzomato_df.shape","6a2f9f80":"#list the names of columns\nzomato_df.columns","87bb209b":"# Get information about the dataset\nzomato_df.info()","ee5577c0":"#Number of unique values in each column\nzomato_df.nunique()","41305d32":"#find addresses which have multiple urls\nzomato_df.address.value_counts()","2fe5b489":"#check if the multiple urls for a single address belong to a single restaurant\nzomato_df.query('address == \"14th Main, 4th Sector, HSR, Bangalore\"')['name'].unique()","bb9d4fbc":"#check if Ritz-Carlton has more than one restaurant in the same location\nzomato_df.query('address == \"The Ritz-Carlton, 99, Residency Road, Bangalore\"')['name'].unique()","e7687680":"#find the number of unique restaurants \n'''reason for using 'name','address'and location for groupby is that there are restaurants with same \nname and address \"Delivery only\" but have branches in different locations'''\nzomato_df.groupby(['name','address','location']).nunique().sort_values(by='url', ascending=False).shape","d0e55cab":"#list of the number of missing values in each column\nmissing_value_count =zomato_df.isnull().sum()\nmissing_value_count","1989ec2a":"#calculate the percentage of missing values in columns which have missing values\n#this will help us decide how we deal with missing values\nfor col in zomato_df.columns:\n    total_cells =(zomato_df.shape)[0]\n    missing_cells =  zomato_df[col].isnull().sum()\n    percentage_missing = (missing_cells\/total_cells)*100\n    print (col + \" : \", percentage_missing)","aff1a2d3":"#let us create a new column 'url_count' which is a count of the number of entries for each restaurant\nzomato_df['url_count']=zomato_df.groupby(['name','address','location'])['url'].transform('count')","341fee86":"#change the datatype of 'url_count' column to integer\nzomato_df['url_count'] = zomato_df['url_count'].astype('Int64')\nassert zomato_df['url_count'].dtype  == 'Int64'","2b872ea2":"#create a copy of the original dataframe\nnew_zomato = zomato_df.copy()\n#drop the columns 'url' ,'phone' and 'dish_liked'\nnew_zomato = new_zomato.drop(['url', 'phone', 'dish_liked'], axis =1)","1e8fedf2":"#We will change names of columns 'approx_cost(for two people)' to 'cost' , 'listed_in(type)' to 'type_of_rest'\n# and 'listed_in(city)' to 'city'\nnew_zomato.rename(columns = {'approx_cost(for two people)':'cost','listed_in(type)':'type_of_rest','listed_in(city)':'city'}, inplace = True)\nnew_zomato.columns","575606fb":"#observe the cost column\nnew_zomato.cost.unique()","9d56acda":"# remove the , symbol from the data \nnew_zomato['cost'] = new_zomato['cost'].str.replace(',','')\n# convert to float \nnew_zomato['cost'] =new_zomato['cost'].astype(float)\nassert new_zomato['cost'].dtype  == 'float'","d8b85c9d":"#explore the datatypes\nnew_zomato.rate.unique()","ba9785ef":"#seggregate the restaurants which are new\nnew_rest = new_zomato[new_zomato.rate =='NEW']\nnew_rest.shape","b267dbf9":"#find the no of votes when rating is 'NEW'\nnew_rest.votes.unique()","7e806297":"# find the no of votes when rating = '-'\neval1 =new_zomato.query(\"rate =='-'\")\neval1.votes.unique()","f1e3cca9":"#let us find the type_of_rest which have hypen value in the rate column\neval1.type_of_rest.value_counts(100)","a8302355":"eval1.rest_type.value_counts(100)","b8c6e72c":"# Find the number of votes when rating is missing\neval2 =new_zomato[new_zomato.rate.isnull()]\neval2.votes.value_counts(100)","38c67e2a":"eval2.type_of_rest.value_counts(100)","b79599cc":"eval2.rest_type.value_counts(100)","fef6dcfb":"#filter rows which have rate 'NEW','-' or nan\nmissing_rate= new_zomato[new_zomato['rate'].isin(['NEW','-',np.nan])]\nmissing_rate.sample(4)","52513b9d":"#clean the rate column \ndef clean_rate(x):\n    if (x == 'NEW' or x =='-'):\n        return np.nan\n    else:\n        x = str(x).split('\/')[0]\n        return x\n    \nnew_zomato['rate'] = new_zomato.rate.apply(lambda row:clean_rate(row))","5817dcda":"#convert rate column to datatype float\nnew_zomato['rate']=new_zomato['rate'].astype(float)\nassert new_zomato['rate'].dtype == 'float'","d9bf017a":"new_zomato.rate.unique()","923d55b6":"#when value of rate is missing then in most cases votes = 0, so for those cases we will fill rate = votes =0\nnew_zomato.loc[(new_zomato['rate'].isna()) & (new_zomato['votes'] == 0), 'rate'] = new_zomato['votes']","13b875f5":"#calculate the mean rate considering all values which != 0\nzomato_mean_rate=new_zomato[new_zomato.rate !=0].rate.mean()\nzomato_mean_rate","a69d5051":"# handle missing values in rate column when votes !=0\nnew_zomato['rate'].fillna(zomato_mean_rate, inplace=True)\nassert new_zomato.rate.isnull().sum()== 0","ed4e0dc5":"#round off rate values to 2 decimal places\nnew_zomato['rate'] = new_zomato['rate'].round(decimals =2)","24855e67":"#replace Yes with 1 and No with 0 in 'order_online' and 'book_table' columns\nmapping ={'Yes': True , 'No' : False}\nnew_zomato =new_zomato.replace({'online_order': mapping , 'book_table': mapping})\nnew_zomato.sample(2)","e1a50f0c":"#assess the rows which have missing values for location column\nloc_null = new_zomato[new_zomato.location.isnull()]","d445c256":"#number of rows with missing location data\nloc_null.shape[0]","89ec0a2d":"#Since rows having missing location column also have missing data in other columns like\n#rest_type, cost cuisines etc , we will drop the rows\nnew_zomato = new_zomato.dropna(subset =['location'])\nassert new_zomato.location.isnull().sum() == 0","a4523f1e":"# function to pull missing values in one column based on either 'name' column \n'''Since there are a number of repeat orders for many restaurants we can pull values of cost , cuisine \nand rest_type columns from rows where values are not missing. In some cases data is not retrievable\nand hence we will still have some missing values\ncol1 - column which has missing values\ncol2 - column 'name'  \ndf - dataframe\n'''\ndef fill_missing_values(df ,col1 ,col2):\n    missing_val = df[df[col1].isnull()]\n    pull_val =df[df[col2].isin(missing_val[col2])]\n    pull_list = pull_val[~pull_val[col1].isnull()]\n    pull_list = pull_list.drop_duplicates(subset =[col2])\n    s = pull_list.set_index(col2)[col1].dropna()\n    df[col1] =df[col1].fillna(df[col2].map(s))\n    print(\"Missing values remaining: \"+str(df[col1].isnull().sum()))\n   ","e2ed7de7":"# use 'address' column to identify same restaurants and pull value for 'cost' column from rows in \n# which data is not missing\nfill_missing_values(new_zomato, 'cost','name')","d26cde0b":"# use 'address' column to identify same restaurants and pull value for 'rest_type' column from rows in \n# which data is not missing\nfill_missing_values(new_zomato,'rest_type' ,'name')","e198031d":"# use 'name' column to identify same restaurants and pull value for 'cuisine' column from rows in \n# which data is not missing\nfill_missing_values(new_zomato, 'cuisines', 'name')","a583e6be":"#find the unique values of rest_type\nnew_zomato.rest_type.unique()","e3b71bfd":"#import fuzzywuzzy \nimport fuzzywuzzy\nfrom fuzzywuzzy import fuzz, process","b0003171":"# list rest_type values with more than one word\nchoices = new_zomato[new_zomato.rest_type.str.contains(',', na=False)].rest_type.unique()","6e38b864":"#use process.extract to find 10 closest matches\npossibilities = process.extract('Cafe, Casual Dining', choices,limit =10, scorer =fuzz.token_sort_ratio)","09e7e354":"#list matches for score above 70\n[possible for possible in possibilities if possible[1] > 70]","90f0e098":"#sort values in choices to identify values which are in reverse word order but are the same\n\nnp.sort(choices)","eea66d14":"# create a categories dataframe containing the correct categories of each rest_type with no repeats\nchanges = ['Cafe, Casual Dining', 'Cafe, Quick Bites', 'Beverage Shop, Quick Bites','Bakery, Cafe',\n          'Bakery, Dessert Parlor','Bakery, Quick Bites', 'Bar, Cafe', 'Bar, Casual Dining',\n          'Bar, Lounge', 'Bar, Pub', 'Beverage Shop, Dessert Parlor', 'Beverage Shop, Quick Bites',\n          'Cafe, Casual Dining', 'Cafe, Dessert Parlor', 'Cafe, Lounge', 'Cafe, Quick Bites',\n          'Casual Dining, Lounge', 'Casual Dining, Microbrewery', 'Casual Dining, Pub', \n           'Dessert Parlor, Food Court', 'Dessert Parlor, Quick Bites', 'Dessert Parlor, Sweet Shop',\n          'Food Court, Quick Bites', 'Lounge, Microbrewery', 'Mess, Quick Bites', 'Microbrewery, Pub'\n          ,'Quick Bites, Sweet Shop']\ncategories =pd.DataFrame(changes, columns=['cat_rest_type'])","5c21c655":"#categories dataframe\ncategories.head()","03713f74":"#for each category \nfor type in categories['cat_rest_type']:\n    #find potential matches of type of rest with different word order\n    matches = process.extract(type, new_zomato['rest_type'], limit=new_zomato.shape[0],scorer =fuzz.token_sort_ratio)\n    #for each match\n    for match in matches:\n        #if score is 100 i.e, same words in different orders\n        if match[1] == 100:\n            #replace rest_type if it is same word with different order\n            new_zomato.loc[new_zomato['rest_type']==match[0], 'rest_type'] =type","9c2e6865":"#check if rest_type column has been suitably cleaned\nnp.sort(new_zomato[new_zomato.rest_type.str.contains(',', na=False)].rest_type.unique())","246602fa":"#Since there are multiple entries for same restaurant we will create a column to document the max value of rate\nnew_zomato['rate_max']=new_zomato.groupby(['name','address','location'])['rate'].transform('max')","4c6bc3b6":"#Since there are multiple entries for same restaurant we will create a column to document the max value of votes\nnew_zomato['votes_max']=new_zomato.groupby(['name','address','location'])['votes'].transform('max')","740032f0":"#Since there are multiple entries for same restaurant we will create a column to document the min value of votes\nnew_zomato['votes_min']=new_zomato.groupby(['name','address','location'])['votes'].transform('min')","f68d1e28":"'''Since there are multiple entries for same restaurant and entries taken at later date in some cases\nhave more votes I have created a column with the difference in votes between max and min'''\n\nnew_zomato['votes_diff']=new_zomato['votes_max'] - new_zomato['votes_min']","7f087475":"new_zomato['max_cost']=new_zomato.groupby(['name','address','location'])['cost'].transform('max')","9972b8bb":"#create a new dataframe without repeat entries \nzomato_unique = new_zomato.drop_duplicates(subset=['name','address','location'], keep='last')\nzomato_unique.shape","cf1861ef":"#drop extra columns which are not required\n# city ,votes_min\nzomato_unique = zomato_unique.drop(['city', 'votes_min'], axis = 1)","ae590168":"#!pip install plotly==5.1.0","ca6f8093":"#import necessary libraries\nfrom plotly import tools\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom IPython.display import HTML, Image\n","3e5c4797":"  #Plot a pie-chart which shows the distribution of online orders     \ncolors = ['gold', 'mediumturquoise']\n#create a copy of zomato_unique dataset\ndf=zomato_unique.copy()\n#to change labels we make changes in dataset\n#replace 1 with 'Yes' and 0 with 'No' in 'order_online' and 'book_table' columns\nmapping ={ True:'Yes' , False: 'No' }\ndf_string =df.replace({'online_order': mapping , 'book_table': mapping})\nonline_counts = df_string.online_order.value_counts(sort=True)\nlabels =online_counts.index\nvalues = online_counts.values\n\npie = go.Pie(labels=labels, values=values,name='',hovertemplate = \"%{label}: <br>Percentage: %{percent} <\/br> %{value}\")\nlayout = go.Layout(title='Distribution of online orders', title_x=0.5)\nfig = go.Figure(data=[pie], layout=layout)\n\n\nfig.update_traces(hoverinfo='label+percent', textposition ='auto', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(legend_title_text='Online Orders')\n\npy.iplot(fig)","2556043e":"#Plot a pie chart to show distribution of book table option in restaurants\ncolors = ['#CB4335' ,'#34495E' ]\ntable_counts = df_string.book_table.value_counts(sort=True)\nlabels =table_counts.index\nvalues = table_counts.values\n\npie = go.Pie(labels=labels, values=values, name='',\n             hovertemplate = \"%{label}: <br>Percentage: %{percent} <\/br> %{value}\")\nlayout = go.Layout(title='Distribution of Restaurants with Table Booking Option', title_x=0.5, legend={'traceorder':'reversed'})\nfig = go.Figure(data=[pie], layout=layout)\n\n\nfig.update_traces(hoverinfo='label+percent', textposition ='auto', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(legend_title_text='Book Table')\n\npy.iplot(fig)","a5d181d4":"# Plot the locations which have more restaurants\nfig = px.histogram(zomato_unique, x='location',height =800 , width =1000, color_discrete_sequence=['#138D75']).update_xaxes(categoryorder=\"total descending\")\n\nfig.update_layout(\n    title_text='Number of restaurants in each Location', # title of plot\n    xaxis_title_text='Location', # xaxis label\n    yaxis_title_text='Number of Restaurants', # yaxis label\n    bargap=0.2, # gap between bars of adjacent location coordinates\n    bargroupgap=0.1, # gap between bars of the same location coordinates\n    #hovermode ='x',\n    title_x=0.5,\n    hoverlabel=dict(\n        bgcolor=\"white\",\n        font_size=16,\n        font_family=\"Rockwell\"\n    )\n)\n\n\npy.iplot(fig)","2d6648f7":"#Plot the top 30 Restaurants with more number of franchisees\nfranchisee_count = zomato_unique.groupby(['name']).size().to_frame().sort_values([0], ascending = False).head(30).reset_index()\nfranchisee_count.columns = ['name', 'count']\nfig = px.histogram(franchisee_count, x='name',y='count',height =800 , width =1000, color_discrete_sequence=['#EC7063'])\nfig.update_layout(\n    title_text=\"Top 30 Franchisees' in Bengaluru  \", # title of plot\n    xaxis_title_text='Name of Restaurant', # xaxis label\n    yaxis_title_text='Number of Outlets', # yaxis label\n    bargap=0.2, # gap between bars of adjacent location coordinates\n    bargroupgap=0.1, # gap between bars of the same location coordinates\n    #hovermode ='x',\n    title_x=0.5,\n    hoverlabel=dict(\n        bgcolor=\"lightblue\",\n        font_size=16,\n        font_family=\"Georgia\"\n    )\n)\npy.iplot(fig)","a3bf9d04":"#Plot a pie chart showing the different types of restaurant in Bangalore \ntype_colors = ['#85C1E9 ','#F7DC6F','#2874A6','#EC7063','#AEB6BF','#BB8FCE ','#FA8072' ]\nrest_counts = df.type_of_rest.value_counts(sort=True)\nlabels =rest_counts.index\nvalues = rest_counts.values\n\npie = go.Pie(labels=labels, values=values, marker_colors=type_colors,\n             hovertemplate = \"%{label}: <br>Percentage: %{percent} <\/br> %{value}\"+'<extra><\/extra>')\nlayout = go.Layout(title='Distribution of Types of Restaurants', title_x=0.5, legend={'traceorder':'reversed'})\nfig = go.Figure(data=[pie], layout=layout)\n\n\nfig.update_traces(hoverinfo='label+percent', textposition ='auto', textinfo='value', textfont_size=20)\nfig.update_layout(legend_title_text='Type of Restaurant')\n\npy.iplot(fig)","f158f7bc":"#Plot a Histogram to show cost distribution of restaurants\nfrom plotly.subplots import make_subplots\ndf=zomato_unique.dropna(subset =['cost'])\n\nfig = make_subplots(rows =3, cols =1, subplot_titles=(\"Cost Distribution\",\"Cost Distribution for Range:0-3000\",\"Cost Distribution for Range:3000-6000\"))\nfig.add_trace(go.Histogram(x =df['cost'],nbinsx =20, name='Cost Distribution',hovertemplate='<b>No of Rest<\/b>: %{y}'+'<br><b>Cost<\/b>: %{x}<br>'+'<extra><\/extra>'), row=1, col=1)\nfig.update_xaxes(title_text=\"Cost for 2 people\", row=1, col=1)\nfig.update_yaxes(title_text=\"Number of Restaurants\",row=1, col=1)\nfig.add_trace(go.Histogram(x=df['cost'], nbinsx =20, name=\"Cost(Rs):0-3000\",hovertemplate='<b>No of Rest<\/b>: %{y}'+\n    '<br><b>Range<\/b>: %{x}<br>'+'<extra><\/extra>') ,row=2, col=1)\nfig.update_xaxes(title_text=\"Cost (range:0-3000)\", range=[0, 3030], row=2, col=1)\nfig.update_yaxes(title_text=\"Number of Restaurants\", row=2, col=1)\nfig.add_trace(go.Histogram(x=df['cost'], nbinsx =20, name=\"Cost(Rs):3000-6000\",hovertemplate='<b>No of Rest<\/b>: %{y}'+\n    '<br><b>Range<\/b>: %{x}<br>'+'<extra><\/extra>') ,row=3, col=1)\nfig.update_xaxes(title_text=\"Cost (range:3000-6000)\", range=[3000, 7050], row=3, col=1)\nfig.update_yaxes(title_text=\"Number of Restaurants\", range=[0, 50], row=3, col=1)\nfig.update_layout(height=700, width=800, hovermode='x unified', title_text=\"Subplots:Cost Distribution for different Ranges\", title_x=0.5)\npy.iplot(fig)","0555abaa":"#plot a histogram number of restaurants for each rest_type \ndf1=zomato_unique.dropna(subset=['rest_type'])\ndf1\nfig = go.Figure([go.Histogram(x=df1['rest_type'])]).update_xaxes(categoryorder=\"total descending\")\nfig.update_layout(\n    title=\"Distribution of Different Restaurant Types\",\n    title_x=0.5,\n    xaxis_title=\"Restaurant Types\",\n    yaxis_title=\"Count\",\n    font=dict(\n        size=14,\n        color=\"Black\"\n    )\n                  ,height=700, width=900)\npy.iplot(fig)","73ea7dcf":"#relation between online_order, rate and book_table\ndf =df_string[df_string.rate >0]\nfig = px.box(df, x=\"online_order\", y=\"rate\", color ='book_table', hover_data=['rest_type'])\nfig.update_layout(\n    title='Relation between Rating, Online Order and Book Table',\n    xaxis_title=\"Online Order\",\n    title_x=0.5,\n    yaxis_title=\"Rating\",\n    legend_title=\"Book Table\",\n    font=dict(\n        family=\"Rockwell\",\n        size=14,\n        color=\"#1C2833\"\n    )\n)\npy.iplot(fig)","089bbd90":"#Relation between rating and cost\ndf =zomato_unique.dropna(subset=['cost'])\ndf_rate1 =df[df.rate_max <=2.0]\ndf_rate2 =df[(df.rate_max>2.0)&(df.rate_max <=3.0)]\ndf_rate3 =df[(df.rate_max>3.0)&(df.rate_max <=4.0)]\ndf_rate4 =df[df.rate_max > 4.0]\nfig =go.Figure()\nfig.add_trace(go.Scatter(x=df_rate1['cost'], y=df_rate1['rate_max'], name='rating:0.0-2.0', mode='markers',hovertemplate='<b>Rating<\/b>: %{y}'+\n    '<br><b>Cost<\/b>: %{x}<br>'+'<extra><\/extra>'+'<b>Votes<\/b>: %{text}', opacity=0.7, marker =dict(color ='#F1C40F'), text =df_rate1['votes']))\nfig.add_trace(go.Scatter(x=df_rate2['cost'], y=df_rate2['rate_max'], name='rating:2.1-3.0', mode='markers', hovertemplate='<b>Rating<\/b>: %{y}'+\n    '<br><b>Cost<\/b>: %{x}<br>'+'<extra><\/extra>'+'<b>Votes<\/b>: %{text}', opacity=0.7, marker =dict(color ='#4A235A'), text =df_rate2['votes']))\nfig.add_trace(go.Scatter(x=df_rate3['cost'], y=df_rate3['rate_max'], name='rating:3.1-4.0', mode='markers', hovertemplate='<b>Rating<\/b>: %{y}'+\n    '<br><b>Cost<\/b>: %{x}<br>'+'<extra><\/extra>'+'<b>Votes<\/b>: %{text}', opacity=0.7, marker =dict(color ='#C0392B '), text =df_rate3['votes']))\nfig.add_trace(go.Scatter(x=df_rate4['cost'], y=df_rate4['rate_max'], name='rating:4.1-5.0', mode='markers', hovertemplate='<b>Rating<\/b>: %{y}'+\n    '<br><b>Cost<\/b>: %{x}<br>'+'<extra><\/extra>'+'<b>Votes<\/b>: %{text}', opacity=0.7, marker =dict(color ='#1B4F72'), text =df_rate4['votes']))\nfig.for_each_trace(\n    lambda trace: trace.update(marker_symbol=\"diamond\") if trace.name == \"rating:0.0-2.0\" else (),\n)\nfig.for_each_trace(\n    lambda trace: trace.update(marker_symbol=\"triangle-up\") if trace.name == \"rating:2.1-3.0\" else (),\n)\nfig.for_each_trace(\n    lambda trace: trace.update(marker_symbol=\"star\") if trace.name == \"rating:3.1-4.0\" else (),\n)\nfig.for_each_trace(\n    lambda trace: trace.update(marker_symbol=\"cross\") if trace.name == 'rating:4.1-5.0' else (),\n)\nfig.update_layout(\n    title='Relation between Rating and Cost',\n    title_x=0.5,\n    xaxis_title=\"Cost for 2 People\",\n    yaxis_title=\"Rating\",\n    legend_title=\"Ratings\",\n    font=dict(\n        family=\"Rockwell\",\n        size=14,\n        color=\"#1C2833\"\n    ), width=1000\n)\npy.iplot(fig)","f9ce6138":"#Relation between rate and votes_max and cost\nfig = go.Figure(data=go.Scatter(y=df['votes_max'],\n                                x=df['rate_max'],\n                                mode='markers',\n                                marker=dict(\n        size=12,\n        color=df['cost'], #set color equal to a variable\n        colorscale='Viridis', # one of plotly colorscales\n        showscale=True\n    ),opacity =0.5 \n    ,text =df['type_of_rest'])) # hover text goes here\nfig.update_layout(\n    title='Relation between Rating, Votes and Cost',\n    title_x=0.5,\n    xaxis_title=\"Rating\",\n    yaxis_title=\"Votes\",\n    legend_title=\"Cost\",\n    font=dict(\n        family=\"Rockwell\",\n        size=14,\n        color=\"#1C2833\"\n    ), height=1000\n)\n\npy.iplot(fig)","9832913d":"dfx =df[['rate_max','votes_max','max_cost']]\ncr=dfx.corr(method='kendall')\nfig = go.Figure(go.Heatmap(x=cr.columns, y=cr.columns , z=cr.values.tolist()\n                          , colorscale='RdBu', zmin=-1, zmax=1))\npy.iplot(fig)","d2a4c4e0":"#top 5 most voted restaurants\nmost_voted = zomato_unique.groupby(['name']).votes.sum().to_frame().sort_values(by='votes', ascending = False).head(5).reset_index()\nmost_voted.columns = ['name', 'votes']\n","8740927c":"# top 5 restaurants with highest average rating\nzomato_unique = zomato_unique.replace(to_replace =['Sant\u00c3\u0083\u00c2\u0083\u00c3\u0082\u00c2\u0083\u00c3\u0083\u00c2\u0082\u00c3\u0082\u00c2\u0083\u00c3\u0083\u00c2\u0083\u00c3\u0082\u00c2\u0082\u00c3\u0083\u00c2\u0082\u00c3\u0082\u00c2\u0083\u00c3\u0083\u00c2\u0083\u00c3\u0082\u00c2\u0083\u00c3\u0083\u00c2\u0082\u00c3\u0082\u00c2\u0082\u00c3\u0083\u00c2\u0083\u00c3\u0082\u00c2\u0082\u00c3\u0083\u00c2\u0082\u00c3\u0082\u00c2\u00a9 Spa Cuisine'],\n                      value ='Santa Spa Cuisine')\nhighest_rating = zomato_unique.groupby(['name','cost']).rate.mean().to_frame().sort_values(by='rate', ascending = False).head(5).reset_index()\nhighest_rating.columns =['name','cost', 'avg_rating']\nhighest_rating","bbbe31b0":"#top 5 most expensive restaurants\ndfc = zomato_unique.dropna(subset=['cost'])\nmost_expensive = dfc.groupby(['name','rate']).cost.mean().to_frame().sort_values(by='cost', ascending = False).head(5).reset_index()\nmost_expensive.columns =['name','rate','avg_cost']\nmost_expensive","65496416":"#top 5 most popular restaurant types\ntop_rest_type = zomato_unique.groupby(['rest_type']).size().to_frame().sort_values([0], ascending = False).head(5).reset_index()\ntop_rest_type.columns = ['rest_type', 'count']\ntop_rest_type","14d49b24":"#top 5 most budget friendly restaurants with rating above 4.5\nhigh_rating = dfc[dfc.rate >4.5]\nbudget_friendly = high_rating.groupby(['name','rate']).cost.mean().to_frame().sort_values(by='cost', ascending = True).head(5).reset_index()\nbudget_friendly.columns =['name','rate','avg_cost']\nbudget_friendly","d40aca9d":"#top 10 cuisines\ntop_cuisines = zomato_unique.groupby(['cuisines']).size().to_frame().sort_values([0], ascending = False).head(5).reset_index()\ntop_cuisines.columns = ['cuisine', 'count']\ntop_cuisines","6f9462e5":"fig = make_subplots(\n    rows=3, cols=2, subplot_titles=('Most Voted','Most Popular Restaurant Type','Highest Rated',\n                                   'Budget Friendly with High Rating','Most Expensive','Popular Cuisines')\n    )\n\nfig.add_trace(go.Bar(x=most_voted['name'] ,y=most_voted['votes'] ,marker=dict(color=\"crimson\"),\n                     hovertemplate ='<b>Votes<\/b>: %{y}'+\n    '<br><b>Name<\/b>: %{x}<br>'+'<extra><\/extra>', showlegend=False), row=1, col=1)\nfig.update_xaxes(title_text=\"Name of Restaurant\", row=1, col=1)\nfig.update_yaxes(title_text=\"Votes\",row=1, col=1)\n\nfig.add_trace(go.Bar(x=highest_rating['name'] ,y=highest_rating['avg_rating'] ,marker=dict(color=\"crimson\"),\n                     hovertemplate ='<b>Average Rating<\/b>: %{y}'+\n    '<br><b>Name<\/b>: %{x}<br>'+'<extra><\/extra>'+'<b>Cost<\/b>: %{text}',text =highest_rating['cost'], showlegend=False), row=2, col=1)\nfig.update_xaxes(title_text=\"Name of Restaurant\", row=2, col=1)\nfig.update_yaxes(title_text=\"Average Rating\",row=2, col=1)\n\nfig.add_trace(go.Bar(x=most_expensive['name'] ,y=most_expensive['avg_cost'] ,marker=dict(color=\"crimson\"),\n                     hovertemplate ='<b>Average Cost<\/b>: %{y}'+\n    '<br><b>Name<\/b>: %{x}<br>'+'<extra><\/extra>'+'<b>Rating<\/b>: %{text}',text =most_expensive['rate'], showlegend=False), row=3, col=1)\nfig.update_xaxes(title_text=\"Name of Restaurant\", row=3, col=1)\nfig.update_yaxes(title_text=\"Average Cost\",row=3, col=1)\n\nfig.add_trace(go.Bar(x=top_rest_type['rest_type'] ,y=top_rest_type['count'] ,marker=dict(color=\"crimson\"),\n                     hovertemplate ='<b>Count<\/b>: %{y}'+\n    '<br><b>Type of Restaurant<\/b>: %{x}<br>'+'<extra><\/extra>', showlegend=False), row=1, col=2)\nfig.update_xaxes(title_text=\"Type of Restaurant\", row=1, col=2)\nfig.update_yaxes(title_text=\"Count\",row=1, col=2)\n\nfig.add_trace(go.Scatter(y=budget_friendly['rate'],\n                                x=budget_friendly['name'],\n                                mode='markers',\n                                marker=dict(\n        size=12,\n        #color=budget_friendly['avg_cost'], #set color equal to a variable\n        colorscale='Viridis', # one of plotly colorscales\n        #showscale=True\n    ), showlegend =False, hovertemplate ='<b>Rating<\/b>: %{y}'+\n    '<br><b>Name<\/b>: %{x}<br>'+'<extra><\/extra>'+'<b>Cost<\/b>: %{text}'\n    ,text =budget_friendly['avg_cost']), row=2, col=2)\nfig.update_xaxes(title_text=\"Name of Restaurant\", row=2, col=2)\nfig.update_yaxes(title_text=\"Rating\",row=2, col=2)\n\nfig.add_trace(go.Bar(x=top_cuisines['cuisine'] ,y=top_cuisines['count'] ,marker=dict(color=\"crimson\"),\n                     hovertemplate ='<b>Count<\/b>: %{y}'+\n    '<br><b>Cuisine<\/b>: %{x}<br>'+'<extra><\/extra>', showlegend=False), row=3, col=2)\nfig.update_xaxes(title_text=\"Cuisine\", row=3, col=2)\nfig.update_yaxes(title_text=\"Count\",row=3, col=2)\n\nfig.update_layout(height=1500, width=900, title_text=\"Subplots:Top 5 Restaurants\", title_x=0.5)\n\npy.iplot(fig)","3ffe70ac":"#Identify Top 10 locations where new restaurants are opening\nnew_rest1 = new_rest.drop_duplicates(subset=['name','address','location'], keep='last')\ndfn =new_rest1.groupby('location').size().to_frame().sort_values([0],ascending =False).head(10).reset_index()\ndfn.columns =['location','count']\nprint(dfn)\n","cfd9d631":"# filter restaurants in locations which have most number of new restaurants opening (top 10 locations)\nnew_rest_loc= zomato_unique[zomato_unique['location'].isin(dfn.location)]\n#remove entries of new restaurants so that we can analyse data of existing restaurants in top 10 locations\nnew_rest_1 = new_rest_loc.loc[~new_rest_loc.index.isin(new_rest.index)]\nnew_rest_1.shape ","ebee950e":"#filter restaurants which are more popular and have more than 100 votes so that we can study trends \nnew_rest_x =new_rest_1[new_rest_1.votes >100]","17588b9d":"#filter the popular restaurants in Electronic City \nexplore_ec = new_rest_x.query('location ==\"Electronic City\"')\nexplore_ec.shape","ae924472":"#filter the popular restaurants in BTM \nexplore_btm = new_rest_x.query('location ==\"BTM\"')\nexplore_btm.shape","1ab6eb4d":"#filter the popular restaurants in Whitefield \nexplore_w = new_rest_x.query('location ==\"Whitefield\"')\nexplore_w.shape","428c1ade":"#suplots of relation between cost and rate, relation between rate,online order and book table in different locations\nfig = make_subplots(\n    rows=3, cols=2, subplot_titles=('Cost v\/s rate:Electronic City','Order Online v\/s rate: Electronic City','Cost v\/s rate: BTM','Order Online v\/s rate: BTM','Cost v\/s rate: Whitefield','Order Online v\/s rate: Whitefield')\n    )\nfig.add_trace(go.Scatter(x=explore_ec['cost'], y=explore_ec['rate_max'], name='rating:EC', mode='markers',hovertemplate='<b>Rating<\/b>: %{y}'+\n    '<br><b>Cost<\/b>: %{x}<br>'+'<extra><\/extra>'+'<b>Votes<\/b>: %{text}', showlegend=False, opacity=0.7, marker =dict(color ='#F1C40F'), text =explore_ec['votes'])\n    ,row =1 ,col =1)\nfig.update_xaxes(title_text=\"Cost for 2 people\", row=1, col=1)\nfig.update_yaxes(title_text=\"Rating\",row=1, col=1)\n\nfig.add_trace(go.Scatter(x=explore_btm['cost'], y=explore_btm['rate_max'], name='rating:BTM', mode='markers',hovertemplate='<b>Rating<\/b>: %{y}'+\n    '<br><b>Cost<\/b>: %{x}<br>'+'<extra><\/extra>'+'<b>Votes<\/b>: %{text}', showlegend=False, opacity=0.7, marker =dict(color ='#E7361B'), text =explore_btm['votes']),row =2 ,col =1)\nfig.update_xaxes(title_text=\"Cost for 2 people\", row=2, col=1)\nfig.update_yaxes(title_text=\"Rating\",row=2, col=1)\n\nfig.add_trace(go.Scatter(x=explore_w['cost'], y=explore_w['rate_max'], name='rating:Whitefield', mode='markers',hovertemplate='<b>Rating<\/b>: %{y}'+\n    '<br><b>Cost<\/b>: %{x}<br>'+'<extra><\/extra>'+'<b>Votes<\/b>: %{text}', showlegend=False, opacity=0.7, marker =dict(color ='#5B2C6F'), text =explore_w['votes'])\n    ,row =3 ,col =1)\nfig.update_xaxes(title_text=\"Cost for 2 people\", row=3, col=1)\nfig.update_yaxes(title_text=\"Rating\",row=3, col=1)\n\nfig.add_trace(go.Box(x=explore_ec['online_order'],y=explore_ec['rate'], showlegend=False, marker_color='#F1C40F', hovertemplate ='<b>Rating<\/b>: %{y}'+\n    '<br><b>Online Order<\/b>: %{x}<br>'+'<extra><\/extra>'),row =1 ,col =2)\nfig.update_xaxes(title_text=\"Online Orders\", row=1, col=2)\nfig.update_yaxes(title_text=\"Ratings\",row=1, col=2)\n\nfig.add_trace(go.Box(x=explore_btm['online_order'],y=explore_btm['rate'], showlegend=False, marker_color ='#E7361B', hovertemplate ='<b>Rating<\/b>: %{y}'+\n    '<br><b>Online Order<\/b>: %{x}<br>'+'<extra><\/extra>'),row =2 ,col =2)\nfig.update_xaxes(title_text=\"Online Orders\", row=2, col=2)\nfig.update_yaxes(title_text=\"Ratings\",row=2, col=2)\n\nfig.add_trace(go.Box(x=explore_w['online_order'],y=explore_w['rate'], showlegend=False, marker_color ='#5B2C6F', hovertemplate ='<b>Rating<\/b>: %{y}'+\n    '<br><b>Online Order<\/b>: %{x}<br>'+'<extra><\/extra>'),row =3 ,col =2)\nfig.update_xaxes(title_text=\"Online Orders\", row=3, col=2)\nfig.update_yaxes(title_text=\"Ratings\",row=3, col=2)\n\nfig.update_layout(height=700, width=800, title_text=\"Subplots:Electronic City\/BTM\/Whitefield\", title_x=0.5)\npy.iplot(fig)","8f03eb6f":"#!pip install wordcloud","4712e82d":"#importing all necessary modules\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","63a3b6bf":"def create_word_cloud(df, column):\n    comment_words = ''\n    stopwords = set(STOPWORDS)\n    stopwords.update(['serves','select','worth','buy','free','one','shop'])\n\n    # iterate through the csv file\n    for val in df[column]:\n\n        # typecaste each val to string\n        val = str(val)\n\n        # split the value\n        tokens = val.split()\n\n        # Converts each token into lowercase\n        for i in range(len(tokens)):\n            tokens[i] = tokens[i].lower()\n            tokens[i] = tokens[i].replace(\"'\", \"\")\n\n        comment_words += \" \".join(tokens)+\" \"\n\n    wordcloud = WordCloud(width = 800, height = 800,\n                          stopwords = stopwords, colormap=\"Oranges_r\" ).generate(comment_words)\n\n    # plot the WordCloud image  \n    font1 = {'family':'serif','color':'black','size':30}\n    plt.figure(figsize = (8, 8), facecolor = None)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.title('Word Cloud: Explore: {}'.format(column), fontdict =font1)\n    plt.tight_layout(pad = 0)\n    plt.margins(x=0, y=0)\n    plt.show()","64e6d9b1":"#create wordclouds for location: Electronic City\ncreate_word_cloud(explore_ec, 'cuisines')\ncreate_word_cloud(explore_ec, 'menu_item')\ncreate_word_cloud(explore_ec, 'rest_type')","f2a08857":"#create word_clouds for location: BTM\ncreate_word_cloud(explore_btm, 'cuisines')\ncreate_word_cloud(explore_btm, 'menu_item')\ncreate_word_cloud(explore_btm, 'rest_type')","56c71e11":"#create word clouds for location: Whitefield\ncreate_word_cloud(explore_w, 'cuisines')\ncreate_word_cloud(explore_w, 'menu_item')\ncreate_word_cloud(explore_w, 'rest_type')","f24d5255":"<p style='font-size:110%;'>We can see that the rest_type column has been cleaned and there are no two values which are same but in reverse word order<\/p>","ff02ca8e":"<p style='font-size:110%;'>Thank you for going through this notebook. Feedback and votes are appreciated.\ud83d\ude0a <\/p>","8af45ac5":"<p style='font-size:110%'>We can see that along with nan we also have 'NEW' and hypen which are non numeric and hence do not give us information about the rating of the restaurant. <\/p>","e2324848":"### General Assessment","01a4da97":"### Introduction :-\n<p style=\"font-size:110%; color:Black;\">In this notebook, I am going to be cleaning and analysing the <a href='https:\/\/www.kaggle.com\/himanshupoddar\/zomato-bangalore-restaurants'>Zomato Bangalore Dataset<\/a> created by <a href='https:\/\/www.kaggle.com\/himanshupoddar'>Himanshu Poddar.<\/a> We have 51717 rows and 17 columns in this dataset whereas Bengaluru has around 12,000 restaurants. While explaining the process of creating the dataset Himanshu explains that he extracted the url, name and the address of the restaurant in the Phase 1 and then the rest of the  information has been pulled category wise. This probably means that if a restaurant is listed in more than one category then there maybe multiple entries for it.<\/p> \n\n### Dataset :-\n<p style=\"font-size:110%; color:Black;\">Information about the dataset columns:\n<ul style=\"font-size:110%; color:Black;list-style-type:circle;\">\n    <li><b>url:<\/b> contains the url of the restaurant in the zomato website<\/li>\n    <li><b>address:<\/b> contains the address of the restaurant in Bengaluru<\/li>\n    <li><b>name:<\/b> contains the name of the restaurant<\/li>\n    <li><b>online_order:<\/b> whether online ordering is available in the restaurant or not<\/li>\n    <li><b>book_table:<\/b> whether the option to book table is available or not<\/li>\n    <li><b>rate:<\/b> contains the overall rating of the restaurant out of 5<\/li>\n    <li><b>votes:<\/b> contains total number of ratings given for the restaurant as of the above mentioned date (15th March 2019)<\/li>\n    <li><b>approx_cost(for two people):<\/b> approx amount spend by two people when eating at the restaurant<\/li>\n    <li><b>location:<\/b> area in which restaurant is located<\/li>\n    <li><b>rest_type:<\/b> type of restaurant<\/li>\n    <li><b>cuisines:<\/b> type of food the restaurant sells<\/li>\n    <li><b>listed_in(type):<\/b> category in which the restaurant is listed in the Zomato app<\/li>\n<\/ul>\nNow that we have a basic idea about the dataset let us get started. \ud83d\ude0a    \n<\/p>\n\n\n","ccc9b8dc":"Our assessment shows that rows which have missing values for location column also have data missing in other columns like 'rest_type', 'cuisine' , 'cost' etc.","9152ef9e":"## Analysis","42ebc2c3":"<p style='font-size:110%;'>We can see that more than 50% restaurants which have nan values for rate column belong to 'Delivery' type of rest and around 69% have rest_type Quick Bites, Delivery or Takeaway<\/p>","e75abf9c":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Filter established restaurants in top 3 locations where new restaurants are opening\n<\/div>\n","eac0067b":"### 8. Feature Engineering: Create new columns rate_max, votes_max, votes_diff and max_cost","47ba965f":"### 4. Replace yes and no with 1 and 0 respectively in 'order_online' and 'book_table' columns","2fdfb5d4":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Create wordclouds for cuisines, rest_type and menu items for restaurants in locations:BTM\n<\/div>","6d0f0bb2":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Which types of Restaurants are more popular in Bengaluru?\n<\/div>","7ca41bb5":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Distribution of Restaurants with\/without book table facility\n<\/div>","04bff534":"### 2. Change column names where required","eb2d1aca":"### 3. Cleanup the 'cost' and 'rate' column","8990f4b9":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Top 30 Most Popular Food Chains in Bengaluru\n<\/div>","d01ca9ba":"### Find the number of Restaurants ","34c3adb4":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Relation between cost and rate, relation between rate,online order and book table in locations:Electronic City, BTM and Whitefield\n<\/div>\n","abe84b68":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Relation between Rating, Online Order and Book Table\n<\/div>","1f5d3fa8":"<p style='font-size:110%'>We can see that in most cases 'rate' column has missing values\/-\/'NEW' when number of votes is 0. <\/p>","6a13e951":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Create wordclouds for cuisines, rest_type and menu items for restaurants in locations:Whitefield\n<\/div>","b6bdaaaf":"<p style='font-size:110%'>We can see that the address The Ritz-Carlton, 99, Residency Road, Bangalore houses multiple restaurants and there maybe be many similar cases as many star hotels have multiple inhouse restaurants in them. Similarly there are many different restaurants in a mall, each having the same address.<\/p>\n<p style='font-size:110%;'>Edit: My initial assessment was that since there are 11495 unique addresses so we have that many restaurants but there are some restaurants which have the same address\/location because they are located in a mall or a part of a star hotel. We also have restaurants which have branches\/franchisees' in different locations.<\/p>","d4fa9e7c":"<p style='font-size:110%;'>On further Assessment we can see that there are 12519 restaurants and each unique address does not signify a unique restaurant.<\/p>","3abc8111":"### Find the % of Data missing in each column","76a8f914":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Distribution of Restaurants with\/without online order facility\n<\/div>\n","fb837ac4":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Relation between Rating v\/s Votes v\/s Cost\n<\/div>","c733969d":"### 1. Remove columns that are not required or have more than 50% missing values","ebe18756":"We can see that 'Cafe, Casual Dining' and 'Casual Dining, Cafe' are one and the same and we will use fuzzywuzzy to identify such matches and make required changes to maintain consistency in data.","8f34fcdb":"<p style='font-size:110%'>On manual observation we can observe that the columns 'url' and 'phone' are not valuable to our analysis so we will drop them. As we can see above, the 'dish_liked' column has more than 50% missing values. Hence we will drop the column.<\/p>","64923c6e":"# Data Cleaning and Analysis of the Bengaluru Zomato Dataset","f76784bc":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> How expensive are restaurants in Benguluru?\n<\/div>","2353abe6":"<p style='font-size:110%;'>When examining the unique data in each column we can see that 'url' has unique value 51717 whereas 'address' column has value 11495. This indicates that there are 11495 restaurants listed in Zomato. The different urls for the same restaurants are because some restaurants maybe listed in multiple categories in Zomato. Unique values for the 'name' column is 8792 which is less than the number of restaurants listed. The reason could be that some restaurants might be having franchisee\/branches in different locations. Let us further assess the data to find more informtion. \ud83d\udc47<\/p>","3f085c24":"<p style='font-size:110%;'>We can see that around 71% restaurants which have hypen in rate column belong to the 'Delivery' type of restaurant. <\/p>","40345e6d":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Distribution of Restaurants based on the category (restaurant type)\n<\/div>","c560d18b":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Top 10 Locations which have new restaurants opening up\n<\/div>\n","572ee14d":"### Add a new feature: Number of urls\/entries each unique restaurant has","51787d6d":"<p style='font-size:110%;'>In the rest_type also, restaurants which have hypen in rate column belong to either Quick Bites or Delivery category (around 73%) <\/p>","4629d570":"![Zom-dataset-bengaluru .jpg](attachment:a6c6fd92-dc58-4946-8499-8f2143ccf489.jpg)","ae0bee83":"<p style='font-size:110%;'>When assessing the missing values of rate column we can see that most entries which have 'NEW', hypen or nan values for rate column also have value zero for votes column. Keeping this in mind I am filling all rate values as 0 if votes = 0. This is also important because entries having missing values for rate column have higher % of restaurants which are of type delivery or Quick Bites. <\/p>\n<p style='font-size:110%;'>For entries where the number of votes >0 and rate column has missing data it indicates that the rate column value has not been successfully retrieved. We can see that less than 1% of missing values fall in this category, hence we can either drop these rows or fill these with mean value. I will be filling these with mean rate column value. <\/p>\n<p style='font-size:110%;'> <\/p>","6b9a546c":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Create wordclouds for cuisines, rest_type and menu items for restaurants in locations:Electronic City, BTM and Whitefield\n<\/div>","ea673e46":"## Clean the Data","405f6148":"### 5. Missing values in 'location' column","d93cb21d":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Popular Locations with most Number of Restaurants \n<\/div>","0cdc2af6":"### 7. Finding fuzzy matches in rest_type column","ede9b703":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Create wordclouds for cuisines, rest_type and menu items for restaurants in locations:Electronic City\n<\/div>","6a061080":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Top 5:Most voted, Highest Rated , Most Expensive, Popular Restaurant Types , Popular Budget Friendly Restaurants and Most Popular Cuisines\n<\/div>","68f6397a":"## Assess the Data","a121f005":"We can see above that same values with different word order have a score of 100. Hence we will use the score 100 to make changes in our dataset","45d851a2":"###  6. Missing values in 'cost', 'cuisines' and 'rest_type' column","53624477":"<p style='font-size:110%;'>We can see that a few of the addresses that have a number of repeats are those of hotels. Let us use the address , The Ritz-Carlton, 99, Residency Road, Bangalore, to find if there are multiple restaurants in 'The Ritz-Carlton' or that all the urls are for the same restaurant.\nWe can also observe that there are 128 rows with missing address as they are \"Delivery Only\".<\/p>","fe7cb444":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#C39BD3;\n           font-size:110%;\n           padding:15px;\n           font-family:Verdana;\n           letter-spacing:0.5px\"> Relation between Cost v\/s Rating\n<\/div>","66b6ccdd":"### 9. Create a new Dataframe without repeat entries for same restaurant "}}