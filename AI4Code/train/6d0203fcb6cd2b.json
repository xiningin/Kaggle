{"cell_type":{"381c00fc":"code","c8f9df04":"code","8219473a":"code","e2b2bf14":"code","16bdf471":"code","9f20c45d":"code","f81c3e89":"code","77eefc0b":"code","55626dfe":"code","a59f1a8c":"code","3a3dfec4":"code","b6647452":"code","ffb1befa":"code","a43d5e1e":"code","a5203ea0":"code","6a5f4fe0":"code","d6f6f2d5":"code","7d93b60c":"markdown","13590d86":"markdown","c857120e":"markdown","8c792bd0":"markdown","91b852c9":"markdown","6524219a":"markdown","8e11bbe6":"markdown","d9147b8c":"markdown","c919e5b2":"markdown","d4ee2f49":"markdown"},"source":{"381c00fc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","c8f9df04":"train_dataset = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain_dataset.head()\n\n","8219473a":"test_dataset = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_dataset.head()","e2b2bf14":"X = train_dataset[['Pclass','Sex','Age','Fare','SibSp','Parch', 'Embarked', 'Name', 'Cabin']]\nprint(X)\ny = train_dataset.iloc[:, 1].values\nprint(y[0:10])\n\nX_test = test_dataset[['Pclass','Sex','Age','Fare','SibSp','Parch', 'Embarked','Name','Cabin']]\nprint(X_test)\n\n","16bdf471":"X['Age'] = X['Age'].fillna((X['Age'].mean()))\n\nX[\"Embarked\"] = X[\"Embarked\"].fillna(\"S\")\nX.loc[X[\"Embarked\"] == \"S\", \"Embarked\"] = 0\nX.loc[X[\"Embarked\"] == \"C\", \"Embarked\"] = 1\nX.loc[X[\"Embarked\"] == \"Q\", \"Embarked\"] = 2\n\n\nX_test['Age'] = X_test['Age'].fillna((X_test['Age'].mean()))\n\nX_test[\"Embarked\"] = X_test[\"Embarked\"].fillna(\"S\")\nX_test.loc[X_test[\"Embarked\"] == \"S\", \"Embarked\"] = 0\nX_test.loc[X_test[\"Embarked\"] == \"C\", \"Embarked\"] = 1\nX_test.loc[X_test[\"Embarked\"] == \"Q\", \"Embarked\"] = 2\n\ndata = [X, X_test]\ntitles = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n\nfor dataset in data:\n    # extract titles\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n    # replace titles with a more common title or as Rare\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr','Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    # convert titles into numbers\n    dataset['Title'] = dataset['Title'].map(titles)\n    # filling NaN with 0, to get safe\n    dataset['Title'] = dataset['Title'].fillna(0)\n    \n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4\n    dataset['Age'] = dataset['Age'].astype(int)\n    \n    dataset['FamilySize'] = dataset['SibSp'] +  dataset['Parch'] + 1\n    \n    dataset['Fare'] = dataset['Fare'].fillna(dataset['Fare'].median())\n    \n    dataset['Cabin'] = dataset['Cabin'].str[:1]\n    \n    \nX = X.drop(['Name'], axis=1)\nX_test = X_test.drop(['Name'], axis=1)\n\nprint(X)\nprint(X_test)\n","9f20c45d":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\ndata = [X, X_test]\nfor dataset in data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)\n    \nX[\"Cabin\"].fillna(X.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\nX_test[\"Cabin\"].fillna(X_test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","f81c3e89":"X['FareBand'] = pd.qcut(X['Fare'], 4)\nX_test['FareBand'] = pd.qcut(X_test['Fare'], 4)\n\ndata = [X, X_test]\nfor dataset in data:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n","77eefc0b":"data = [X, X_test]\nfor dataset in data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n\nprint(X)\nprint(X_test)","55626dfe":"features_drop = [ 'SibSp', 'Parch', 'FamilySize', 'FareBand']\nX = X.drop(features_drop, axis=1)\nX_test = X_test.drop(features_drop, axis=1)\n\nprint(X)\nprint(X_test)","a59f1a8c":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX = sc.fit_transform(X)\nprint('X')\nprint(X)\n\nX_test = sc.fit_transform(X_test)\nprint('X_test')\nprint(X_test)","3a3dfec4":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X, y)\ny_pred_l_reg = classifier.predict(X_test)\nacc_l_reg = round( classifier.score(X, y) * 100, 2)\nprint (str(acc_l_reg) + ' percent')\n","b6647452":"from sklearn.svm import SVC\nclf = SVC()\nclf.fit(X, y)\ny_pred_svc = clf.predict(X_test)\nacc_svc = round(clf.score(X, y) * 100, 2)\nprint (acc_svc)","ffb1befa":"from sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier(n_neighbors = 3)\nclf.fit(X, y)\ny_pred_knn = clf.predict(X_test)\nacc_knn = round(clf.score(X, y) * 100, 2)\nprint (acc_knn)\n\n\n","a43d5e1e":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier()\nclf.fit(X, y)\ny_pred_decision_tree = clf.predict(X_test)\nacc_decision_tree = round(clf.score(X, y) * 100, 2)\nprint (acc_decision_tree)\n\n\n","a5203ea0":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X, y)\ny_pred_random_forest = clf.predict(X_test)\nacc_random_forest = round(clf.score(X, y) * 100, 2)\nprint (acc_random_forest)","6a5f4fe0":"# Stochastic Gradient Descent\nfrom sklearn.linear_model import SGDClassifier\nsgd = SGDClassifier()\nsgd.fit(X, y)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X, y) * 100, 2)\nprint(acc_sgd)","d6f6f2d5":"\noutput = pd.DataFrame({'PassengerId': test_dataset.PassengerId, 'Survived': y_pred_l_reg})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved\")","7d93b60c":"**Import Dataset**","13590d86":"**Selection of specific features**","c857120e":"Training and predict the K Neighbors model","8c792bd0":" **Import Libraries**","91b852c9":"**Predicting the Test set results**","6524219a":"Training and predict the Support Vector Machine model","8e11bbe6":"Training and predict the Random Forest model","d9147b8c":"**Training and predict the Logistic Regression model on the Training set**","c919e5b2":"Training and predict the Decision Tree model","d4ee2f49":"**Taking care of missing data**"}}