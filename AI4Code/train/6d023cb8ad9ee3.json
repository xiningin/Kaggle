{"cell_type":{"c2d07d62":"code","5112b28a":"code","6c785574":"code","7b0a8b20":"code","79f4655d":"code","812053a3":"code","c8288fb7":"code","5cd26548":"code","c876c06e":"code","b485faea":"code","775e9152":"markdown","b60fdc02":"markdown","e783c977":"markdown","6cfed787":"markdown","90e9c44a":"markdown","3a68470a":"markdown","b6f36e63":"markdown"},"source":{"c2d07d62":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5112b28a":"import numpy as np \nimport pandas as pd  \n\ndf = pd.read_csv('..\/input\/android-permission-dataset\/Android_Permission.csv')\ndf.head()\n","6c785574":"df.shape","7b0a8b20":"df.drop_duplicates(inplace=True)\ndf.dropna(inplace=True) \ndf.shape","79f4655d":"obs=len(df)\nmal= len(df.loc[df['Class'] == 1])\nnot_mal= len(df.loc[df['Class'] == 0])\nprint('Percentages of malware and benign applications in original dataset:')\nprint('Num of Malware: {0} ({1:.2f}%)'.format(mal, (mal\/obs)*100))\nprint('Num of benign: {0} ({1:.2f}%)'.format(not_mal, (not_mal\/obs)*100))","812053a3":"permission_columns=df.columns[df.columns.str.contains(':')].to_list()\n","c8288fb7":"from sklearn.model_selection import train_test_split\n# Selecting feature and target columns\nfeature_cols =  permission_columns \ntarget_cols= ['Class']\n\n# setting up 2 dataframes; one for the features, and one for the target variable\nX= df[feature_cols].values #predictor columns\ny= df[target_cols].values\n\n\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.30, random_state=42)","5cd26548":"### Training Algorithm\nfrom sklearn.naive_bayes import GaussianNB\n\nmodel = GaussianNB()\n\nmodel.fit(X_train, y_train.ravel())","c876c06e":"# Predicting values based on training data\npredict_train = model.predict(X_train)\npredict_test = model.predict(X_test)\n\nfrom sklearn import metrics\n\nprint(\" Training Accuracy: {0:.4f}\".format(metrics.accuracy_score(y_train, predict_train)))\nprint(\"Testing Accuracy: {0:.4f}\".format(metrics.accuracy_score(y_test, predict_test)))","b485faea":"print('Confusion Matrix')\nprint(metrics.confusion_matrix(y_test, predict_test), end=\"\\n\")\nprint('Classification Report')\nprint(metrics.classification_report(y_test, predict_test))","775e9152":"# Fitting Android Permissions Dataset to Naive Bayes Model","b60fdc02":"# Gathering data and preparing the Naive Bayes Model","e783c977":"## Below finds all columns with binary values that are application permissions, parsed using using the ':' character.\n### only the list of permissions, both danerous and safe, are going to be used in evaluation the naive bayes model\n","6cfed787":"## Confusion Matrix and Classification Report","90e9c44a":"### Ratio off malware to benign application in original data set","3a68470a":"# Evaluating performance of Naive Bayes","b6f36e63":"## Initial clean up and exploration"}}