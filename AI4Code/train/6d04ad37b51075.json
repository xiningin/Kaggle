{"cell_type":{"5091d1f3":"code","923879bb":"code","02d5db9c":"code","2a52ccaf":"code","2b11e365":"code","9dd8fb5f":"code","931c3ea2":"code","f7c73980":"code","fa68d43b":"code","455d6322":"code","74c55bfc":"code","ec906d16":"code","91bfe767":"code","116acded":"code","e3278a16":"code","60db3e7a":"code","a45fae4b":"code","7de6bf6a":"code","284923f4":"code","fde3aa8a":"code","631b2fac":"code","dddf3704":"code","507e26b5":"code","e90e8ba2":"code","d1956c2b":"code","9b7263ff":"code","aca60864":"code","48e51e94":"markdown","84b310fc":"markdown","895e85ff":"markdown","270f6e04":"markdown","9a3b8170":"markdown","29124e26":"markdown","2c7e16ee":"markdown"},"source":{"5091d1f3":"import numpy as np\nimport pandas as pd\nfrom sklearn import metrics\nfrom sklearn.cluster import DBSCAN\nimport matplotlib.pyplot as plt","923879bb":"df = pd.read_csv(\"..\/input\/fifa-18-more-complete-player-dataset\/complete.csv\")\ndf","02d5db9c":"df = df[[\"age\" , \"special\"]]\ndf","2a52ccaf":"df.isnull().sum()","2b11e365":"def dbScanFunction (eplison , minimum):\n    db = DBSCAN(eps=eplison, min_samples=minimum).fit(df)\n    core_samples_mask = np.zeros_like(db.labels_ , dtype=bool)\n    core_samples_mask[db.core_sample_indices_] = True\n    labels = db.labels_\n    n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)\n    n_noise_ = list(labels).count(-1)\n    percentage_of_Outlaiers=n_noise_\/len(df)\n    print(\"percentage_of_Outlaiers= %.3f\" %(percentage_of_Outlaiers*100))\n    print('Estimated number of clusters: %d' % n_clusters_)\n    print('Estimated number of noise points: %d' % n_noise_)\n    print(\"Silhouette Coefficient: %0.3f\" % (metrics.silhouette_score(df, labels)*100))","9dd8fb5f":"dbScanFunction(5 , 15)","931c3ea2":"dbScanFunction(5.5 , 15)","f7c73980":"dbScanFunction(5 , 13)","fa68d43b":"dbScanFunction(4 , 10)","455d6322":"dbScanFunction(4.5 , 8)","74c55bfc":"dbScanFunction(6 , 10)","ec906d16":"dbScanFunction(5.2 , 10)","91bfe767":"dbScanFunction(6 , 10)","116acded":"dbScanFunction(4 , 20)","e3278a16":"dbScanFunction(7 , 5)","60db3e7a":"dbScanFunction(10 , 2)","a45fae4b":"dbScanFunction(15 , 1)","7de6bf6a":"dbScanFunction(4.5 , 13)","284923f4":"for i in range (1 , 21 , 1):\n        for x in range (1 , 21 , 1):\n            try:\n                db = DBSCAN(eps=i, min_samples=x).fit(df)\n                labels = db.labels_\n                n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)\n                if (n_clusters_ > 6 or n_clusters_ < 3):\n                    continue\n                else:\n                    labels = db.labels_\n                    score = (metrics.silhouette_score(df, labels) *100)\n                    if (score >= 35.000):\n                        print (\"eps = %d and min = %d and score = %.3f\" % (i,x,score))\n            except:\n                print(\"Error in eps = %d and min = %d\" % (i,x))\n                continue","fde3aa8a":"from sklearn.cluster import KMeans\ndistortions = []\nsilhouette_score = []\nK = range(2,11)\nfor i in K: \n    kmeans = KMeans(n_clusters = i)\n    kmeans.fit(df) \n    distortions.append(kmeans.inertia_)\n    silhouette_score.append(metrics.silhouette_score(df, kmeans.labels_))\nfig, ax = plt.subplots(figsize = (12, 8))\nax2 = ax.twinx()\nax.plot(K, distortions, color = 'g' , marker=\"o\")\nax2.plot(K, silhouette_score, color = 'b', marker=\"o\")\nax.set_xlabel('Number of clusters', color = 'r')\nax.set_ylabel('distortion', color = 'g')\nax2.set_ylabel('silhouette score', color = 'b')\nplt.tight_layout()\nplt.show()","631b2fac":"from sklearn.cluster import AgglomerativeClustering\nX = df.values","dddf3704":"def agglomerativeClusterFunction(x):  \n    hc = AgglomerativeClustering(n_clusters = 6, affinity = 'euclidean', linkage = x)\n    y_hc = hc.fit_predict(X)\n    print(\"silhouette_score = %0.3f\" %(metrics.silhouette_score(X, hc.labels_) *100))\n    plt.figure(figsize = (12,8))\n    plt.scatter(X[y_hc == 0, 0], X[y_hc == 0, 1], s = 50, c = 'red', label = '1st Cluster')\n    plt.scatter(X[y_hc == 1, 0], X[y_hc == 1, 1], s = 50, c = 'blue', label = '2nd Cluster')\n    plt.scatter(X[y_hc == 2, 0], X[y_hc == 2, 1], s = 50, c = 'green', label = '3rd Cluster')\n    plt.scatter(X[y_hc == 3, 0], X[y_hc == 3, 1], s = 50, c = 'cyan', label = '4th Cluster')\n    plt.scatter(X[y_hc == 4, 0], X[y_hc == 4, 1], s = 50, c = 'magenta', label = '5th Cluster')\n    plt.scatter(X[y_hc == 5, 0], X[y_hc == 5, 1], s = 50, c = 'black', label = '6th Cluster')\n    plt.title('Clusters of Players by %s' % x)\n    plt.xlabel('Age')\n    plt.ylabel('Special')\n    plt.legend()\n    plt.show()","507e26b5":"agglomerativeClusterFunction(\"ward\")","e90e8ba2":"agglomerativeClusterFunction(\"average\")","d1956c2b":"agglomerativeClusterFunction(\"single\")","9b7263ff":"agglomerativeClusterFunction(\"complete\")","aca60864":"import scipy.cluster.hierarchy as sch\ndendrogrm = sch.dendrogram(sch.linkage(df, method = 'average'))\nplt.title('HCluster by average')\nplt.xlabel('Players')\nplt.ylabel('Euclidean distance')\nplt.show()","48e51e94":"## H Cluster","84b310fc":"## Don't try the following code at the home (^_^)","895e85ff":"## Don't try the following code at the home (^_^)","270f6e04":"## K_Means","9a3b8170":"## from Kmeans we can figeure that the best model is when clusters = 6\n## and in HClustering  when linkage is average and clusters = 6","29124e26":"## DBSCAN","2c7e16ee":"## so from all of that we can figure that the best model is when eps = 5 and min_samples = 15 so the silhouette_score will be 49.917"}}