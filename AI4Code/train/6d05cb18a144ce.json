{"cell_type":{"daf32d29":"code","074655ff":"code","b7b49f85":"code","c604a5ba":"code","1a995420":"code","e2496240":"code","9b51cdf2":"code","7bcc096e":"code","a44a29b9":"code","8a0bf2fe":"code","716f947f":"code","eb0454b6":"code","c988153f":"code","5a49af3b":"code","f1fef1c1":"code","b87ad7ae":"markdown","d47687e8":"markdown"},"source":{"daf32d29":"import numpy as np\nimport pandas as pd","074655ff":"data = pd.read_csv('..\/input\/first-gop-debate-twitter-sentiment\/Sentiment.csv')\ndata = data[['text','sentiment']]\ndata.head()","b7b49f85":"data = data[data.sentiment != \"Neutral\"]\ndata['sentiment']= pd.get_dummies(data['sentiment'], drop_first = True)\ndata = data.reset_index(drop=True)\ndata.head()","c604a5ba":"import re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize","1a995420":"corpus = []\n\nfor i in range(0, data.shape[0]):\n    tweet = re.sub('[^a-zA-Z]', ' ', data['text'][i])\n    tweet = tweet.lower()\n    tweet = word_tokenize(tweet)\n    # Reduce words to their root form\n    tweet = [WordNetLemmatizer().lemmatize(w) for w in tweet if not w in set(stopwords.words('english'))]\n    # Lemmatize verbs by specifying pos\n    tweet = [WordNetLemmatizer().lemmatize(w, pos='v') for w in tweet if not w in set(stopwords.words('english'))]\n    tweet = ' '.join(tweet)\n    corpus.append(tweet)\n\nprint(corpus[0:3])","e2496240":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ntfIdfVectorizer=TfidfVectorizer(use_idf=True)\ntfIdf = tfIdfVectorizer.fit_transform(corpus)\ndf = pd.DataFrame(tfIdf[0].T.todense(), index=tfIdfVectorizer.get_feature_names(), columns=[\"TF-IDF\"])\ndf = df.sort_values('TF-IDF', ascending=False)\npd.set_option('display.max_rows', None)\ndf.head(20)\n","9b51cdf2":"for i in range(0, len(corpus)):\n    corpus[i] = re.sub('co','', corpus[i])\n    corpus[i] = re.sub('rt','', corpus[i])\n    corpus[i] = re.sub('http','', corpus[i])\n    ","7bcc096e":"from tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\ntokenizer = Tokenizer(num_words=None)\ntokenizer.fit_on_texts(corpus)\nencoded_docs = tokenizer.texts_to_sequences(corpus)\npadded_sequence = pad_sequences(encoded_docs,maxlen=200)\n","a44a29b9":"print(tokenizer.word_index['trump'])","8a0bf2fe":"print(corpus[0])\nprint(encoded_docs[0])","716f947f":"print(padded_sequence[0])","eb0454b6":"# Build the model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM,Dense, Dropout\nfrom tensorflow.keras.layers import SpatialDropout1D\nfrom tensorflow.keras.layers import Embedding\nfrom keras.initializers import Constant\n\nvocab_size = len(tokenizer.word_index) + 1\nembedding_vector_length = 200\n\n\nmodel = Sequential()\nmodel.add(Embedding(vocab_size, embedding_vector_length,\n                    input_length=25) )\nmodel.add(SpatialDropout1D(0.2))\nmodel.add(LSTM(3, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy',optimizer='adam', metrics=['accuracy'])\nprint(model.summary())","c988153f":"# converting the targets to numpy array to feed it into the model\ntarget = np.asarray(data['sentiment'])","5a49af3b":"MODEL = model.fit(padded_sequence,target,validation_split=0.2, epochs=5, batch_size=256)","f1fef1c1":"test_word ='love trump'\ntw = tokenizer.texts_to_sequences([test_word])\ntw = pad_sequences(tw,maxlen=200)\nprediction = int(model.predict(tw).round().item())\nprint(prediction)","b87ad7ae":"##applying TF-IDF to check the most relevant words after preprocessing , so we can remove some of these word to improve the model accuracy","d47687e8":"finally this is the best accuracy i could get after hyperparametes tuning + TF-IDF as guidance for removing some words"}}