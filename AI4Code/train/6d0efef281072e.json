{"cell_type":{"410185a9":"code","7ee23f09":"code","7c41cfea":"code","1591e5b7":"code","1dee60a8":"code","32c9ea85":"code","210f52b4":"code","967a91e4":"code","8a577f05":"code","edd56fe4":"code","d523dbd0":"markdown","43bca6e0":"markdown","f74b995b":"markdown","bcbafa45":"markdown","e57186b7":"markdown"},"source":{"410185a9":"%%capture\n!pip install pycaret","7ee23f09":"from tqdm.notebook import tqdm\nimport pandas as pd\nimport numpy as np\nimport random\nimport os\nimport gc\n\nimport pycaret\nfrom pycaret.classification import setup, compare_models\nfrom pycaret.classification import tune_model, blend_models, stack_models\nfrom pycaret.classification import finalize_model, predict_model\nfrom pycaret.classification import plot_model\n\nimport cuml\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import StratifiedKFold, KFold\nimport statsmodels.api as sm\n\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nimport warnings\nwarnings.simplefilter('ignore')\n\npycaret.__version__","7c41cfea":"CFG = {\n    'target': 'song_popularity',\n    'seed': 42,\n    'n_select': 7,\n    'tuning': True,\n    'normalize': True,\n    'fold_strategy': 'kfold',\n    'fold': 10,\n    'fold_shuffle': True,\n    'optimize': 'auc',\n    'pca': False,\n    'categorical_features': ['key', 'audio_mode', 'time_signature'],\n    'categorical_imputation': 'mode',\n    'numeric_features': ['song_duration_ms', 'acousticness', 'danceability',\n                         'energy', 'instrumentalness', 'liveness',\n                         'loudness', 'speechiness','tempo',\n                         'audio_valence'],\n    'numeric_imputation': 'median',\n    'fix_imbalance': False,\n    'remove_outliers': False,\n    'outliers_threshold': 0.05,\n    'polynomial_features': False,\n    'polynomial_degree': 10,\n    'trigonometry_features': False,\n    'use_gpu': True\n} ","1591e5b7":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(CFG['seed'])","1dee60a8":"train = pd.read_csv(\"..\/input\/song-popularity-prediction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/song-popularity-prediction\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/song-popularity-prediction\/sample_submission.csv\")\n\nfeatures = [col for col in test.columns if 'id' not in col]","32c9ea85":"class pycaret_model():\n    def __init__(self, train, test, features, config):\n        self.train = train\n        self.test = test\n        self.features = features\n        self.config = config\n\n    def pycaret_setup(self):\n        print('Setup Your Data....')\n        \n        setup(\n            data=self.train[self.features+[self.config['target']]],\n            target=self.config['target'],\n            categorical_features=self.config['categorical_features'],\n            categorical_imputation=self.config['categorical_imputation'],\n            numeric_features=self.config['numeric_features'],\n            numeric_imputation=self.config['numeric_imputation'],\n            session_id=self.config['seed'],\n            fold_strategy=self.config['fold_strategy'],\n            fold_shuffle=self.config['fold_shuffle'],\n            fold=self.config['fold'],\n            normalize=self.config['normalize'],\n            pca=self.config['pca'],\n            fix_imbalance=self.config['fix_imbalance'],\n            remove_outliers=self.config['remove_outliers'],\n            outliers_threshold=self.config['outliers_threshold'],\n            polynomial_features=self.config['polynomial_features'],\n            polynomial_degree=self.config['polynomial_degree'],\n            trigonometry_features=self.config['trigonometry_features'],\n            use_gpu=self.config['use_gpu'],\n            silent=True,\n        )\n\n    def pycaret_compare_models(self, exclude_models=[]):\n        print(\"Comparing Models....\")\n        \n        models = compare_models(\n            sort=self.config['optimize'],\n            n_select=self.config['n_select'],\n            exclude=exclude_models\n        )\n        return models\n    \n    def pycaret_tune_models(self, models):\n        print(\"Tuning Models....\")\n        \n        tuned_models = [tune_model(model, optimize=self.config['optimize'], round=9) for model in models]\n        return tuned_models\n        \n    def pycaret_stacking_models(self, estimators):\n        print(\"Stacking Models....\")\n        \n        stacked_model = stack_models(estimator_list=estimators, optimize=self.config['optimize'], round=9)\n        return stacked_model\n    \n    def pycaret_blending_models(self, estimators):\n        print(\"Blending Models....\")\n        \n        blended_model = blend_models(estimator_list=estimators, optimize=self.config['optimize'], round=9)\n        return blended_model\n\n    def pycaret_finalizing_model(self, model):\n        print(\"Finallizing Model....\")\n        \n        final_model = finalize_model(model)\n        return final_model\n\n    def pycaret_predict_model(self, model, probability, n_rounds):\n        print(\"Predicting....\")\n        \n        pred = predict_model(estimator=model,\n                             data=self.test[self.features],\n                             raw_score=probability,\n                             round=n_rounds)\n        return pred","210f52b4":"pycaret = pycaret_model(train, test, features, CFG)\npycaret.pycaret_setup()","967a91e4":"exclude_models = ['knn', 'dt', 'qda', 'dummy', 'svm', 'ridge']\nbase_models = pycaret.pycaret_compare_models(exclude_models)","8a577f05":"tuned_models = pycaret.pycaret_tune_models(base_models)\nstacked_model = pycaret.pycaret_stacking_models(base_models + tuned_models)\nfinalized_stacked_model = pycaret.pycaret_finalizing_model(stacked_model)\n\npred_stacked = pycaret.pycaret_predict_model(\n    model=finalized_stacked_model,\n    probability=True,\n    n_rounds=16\n)\n\nplot_model(finalized_stacked_model, plot='auc')","edd56fe4":"submission[CFG['target']] = pred_stacked['Score_1'].to_numpy()\nsubmission.to_csv('submission.csv', index=False)\n\nsubmission","d523dbd0":"# Libraries","43bca6e0":"# Datasets","f74b995b":"# Parameters","bcbafa45":"# PyCaret","e57186b7":"# Submission"}}