{"cell_type":{"daf9078d":"code","b4218d1f":"code","7ada1064":"code","f225d748":"code","ac2e7d3b":"code","2e0dcb27":"code","911581e6":"code","6aa9abd4":"code","dd88a02b":"code","39b5eb16":"code","72f7deba":"code","42c4c11a":"code","be842c03":"code","0decc0ad":"markdown","8440eeec":"markdown","7ed70468":"markdown","c62ed2be":"markdown","39a14bef":"markdown","86151bcb":"markdown"},"source":{"daf9078d":"from Bio.PDB import PDBParser\nimport sys\nimport Bio.PDB\nimport Bio.PDB.StructureBuilder\nfrom Bio.PDB.Residue import Residue\n\nimport pandas as pd","b4218d1f":"class SloppyStructureBuilder(Bio.PDB.StructureBuilder.StructureBuilder):\n    \"\"\"Cope with resSeq < 10,000 limitation by just incrementing internally.\n\n    # Q: What's wrong here??\n    #   Some atoms or residues will be missing in the data structure.\n    #   WARNING: Residue (' ', 8954, ' ') redefined at line 74803.\n    #   PDBConstructionException: Blank altlocs in duplicate residue SOL\n    #   (' ', 8954, ' ') at line 74803.\n    #\n    # A: resSeq only goes to 9999 --> goes back to 0 (PDB format is not really\n    #    good here)\n    \"\"\"\n\n    # NOTE\/TODO:\n    # - H and W records are probably not handled yet (don't have examples\n    #   to test)\n\n    def __init__(self, verbose=False):\n        Bio.PDB.StructureBuilder.StructureBuilder.__init__(self)\n        self.max_resseq = -1\n        self.verbose = verbose\n\n    def init_residue(self, resname, field, resseq, icode):\n        \"\"\"Initiate a new Residue object.\n\n        Arguments:\n        o resname - string, e.g. \"ASN\"\n        o field - hetero flag, \"W\" for waters, \"H\" for\n            hetero residues, otherwise blanc.\n        o resseq - int, sequence identifier\n        o icode - string, insertion code\n\n        \"\"\"\n        if field != \" \":\n            if field == \"H\":\n                # The hetero field consists of\n                # H_ + the residue name (e.g. H_FUC)\n                field = \"H_\" + resname\n        res_id = (field, resseq, icode)\n\n        if resseq > self.max_resseq:\n            self.max_resseq = resseq\n\n        if field == \" \":\n            fudged_resseq = False\n            while self.chain.has_id(res_id) or resseq == 0:\n                # There already is a residue with the id (field, resseq, icode)\n                # resseq == 0 catches already wrapped residue numbers which\n                # do not trigger the has_id() test.\n                #\n                # Be sloppy and just increment...\n                # (This code will not leave gaps in resids... I think)\n                #\n                # XXX: shouldn't we also do this for hetero atoms and water??\n                self.max_resseq += 1\n                resseq = self.max_resseq\n                res_id = (field, resseq, icode)  # use max_resseq!\n                fudged_resseq = True\n\n            if fudged_resseq and self.verbose:\n                sys.stderr.write(\n                    \"Residues are wrapping (Residue \"\n                    + \"('%s', %i, '%s') at line %i).\"\n                    % (field, resseq, icode, self.line_counter)\n                    + \".... assigning new resid %d.\\n\" % self.max_resseq\n                )\n        residue = Residue(res_id, resname, self.segid)\n        self.chain.add(residue)\n        self.residue = residue\n\n\nclass SloppyPDBIO(Bio.PDB.PDBIO):\n    \"\"\"PDBIO class that can deal with large pdb files as used in MD simulations\n\n    - resSeq simply wrap and are printed modulo 10,000.\n    - atom numbers wrap at 99,999 and are printed modulo 100,000\n\n    \"\"\"\n\n    # The format string is derived from the PDB format as used in PDBIO.py\n    # (has to be copied to the class because of the package layout it is not\n    # externally accessible)\n    _ATOM_FORMAT_STRING = (\n        \"%s%5i %-4s%c%3s %c%4i%c   \" + \"%8.3f%8.3f%8.3f%6.2f%6.2f      %4s%2s%2s\\n\"\n    )\n\n    def _get_atom_line(\n        self,\n        atom,\n        hetfield,\n        segid,\n        atom_number,\n        resname,\n        resseq,\n        icode,\n        chain_id,\n        element=\"  \",\n        charge=\"  \",\n    ):\n        \"\"\" Returns an ATOM string that is guaranteed to fit the ATOM format.\n\n        - Resid (resseq) is wrapped (modulo 10,000) to fit into %4i (4I) format\n        - Atom number (atom_number) is wrapped (modulo 100,000) to fit into\n          %5i (5I) format\n\n        \"\"\"\n        if hetfield != \" \":\n            record_type = \"HETATM\"\n        else:\n            record_type = \"ATOM  \"\n        name = atom.get_fullname()\n        altloc = atom.get_altloc()\n        x, y, z = atom.get_coord()\n        bfactor = atom.get_bfactor()\n        occupancy = atom.get_occupancy()\n        args = (\n            record_type,\n            atom_number % 100000,\n            name,\n            altloc,\n            resname,\n            chain_id,\n            resseq % 10000,\n            icode,\n            x,\n            y,\n            z,\n            occupancy,\n            bfactor,\n            segid,\n            element,\n            charge,\n        )\n        return self._ATOM_FORMAT_STRING % args\n\ndef get_structure(pdbfile, pdbid=\"system\"):\n    return sloppyparser.get_structure(pdbid, pdbfile)","7ada1064":"train_df = pd.read_json(r'\/kaggle\/input\/stanford-covid-vaccine\/train.json', lines=True)\ntrain_df.head()","f225d748":"# Get the id of the first sequence\n\nrna_id = train_df.id.values[0]\nprint(rna_id)","ac2e7d3b":"# get the pdb file and parse the structure\n\nsloppyparser = Bio.PDB.PDBParser(\n    PERMISSIVE=True, structure_builder=SloppyStructureBuilder()\n)\n\nstructure = sloppyparser.get_structure(\"MD_system\", f\"\/kaggle\/input\/openvaccine3dstructures\/{rna_id}.pdb\")","2e0dcb27":"# print out C1 atom coordinates of each nucleotide\n\nfor x in structure.get_atoms():\n    if str(x) == \"<Atom C1'>\":\n        print(str(x), x.parent.resname.strip(), x.coord)","911581e6":"import os\nimport pickle\nimport numpy as np","6aa9abd4":"data_dir = r'\/kaggle\/input\/stanford-covid-vaccine'\ntrain = pd.read_json(os.path.join(data_dir, 'train.json'), lines=True)\ntest = pd.read_json(os.path.join(data_dir, 'test.json'), lines=True)\n\nuse_cols = ['id','sequence', 'structure']\nall_samples = pd.concat([train[use_cols], test[use_cols]], ignore_index=True, sort=False)","dd88a02b":"sloppyparser = Bio.PDB.PDBParser(\n    PERMISSIVE=True, structure_builder=SloppyStructureBuilder()\n)","39b5eb16":"pdb_folder = r\"\/kaggle\/input\/openvaccine3dstructures\/\"\n\ndef _get_seq(structure):\n    coord = []\n    seq = []\n    for x in structure.get_atoms():\n        if str(x) == \"<Atom C1'>\":\n            coord.append(x.coord)\n            seq.append(x.parent.resname.strip())\n    seq = \"\".join(seq)\n    return coord, seq\n\ndef get_c1_coord(rna_id, sequence):\n    full_path = os.path.join(pdb_folder, f\"{rna_id}.pdb\")\n    if not os.path.exists(full_path):\n        return \"file doesn't exist\", np.nan\n    structure = sloppyparser.get_structure(\"MD_system\", full_path)\n    coord, seq = _get_seq(structure)\n    if seq != sequence:\n        print(f\"rna_id {rna_id} sequence doesn't match\")\n        return \"sequence doesn't match\", seq\n    return coord, seq\n\nall_samples[['coord', 'C1_implied_sequence']] = all_samples.apply(lambda x: get_c1_coord(x['id'], x['sequence']), axis=1, result_type=\"expand\")","72f7deba":"def point_distance(a, b):\n    return np.sqrt(np.sum((a-b)**2))\n\ndef calc_dist(coord):\n    N = len(coord)\n    result = np.zeros((N, N))\n    for i in range(N):\n        for j in range(i+1, N):\n            d = point_distance(coord[i], coord[j])\n            result[i][j] = d\n            result[j][i] = d\n    return result","42c4c11a":"dist = {}\nfor i in range(len(all_samples)):\n    assert all_samples.sequence.values[i] == all_samples.C1_implied_sequence.values[i]\n    rna_id = all_samples.id.values[i]\n    coord = all_samples.coord.values[i]\n    dist[rna_id] = calc_dist(coord)\n    if i % 100 == 0:\n        print(i, end=\" \")","be842c03":"pickle.dump(dist, open(r\"dist\", \"wb\"))","0decc0ad":"## Import Packages and Helper Functions","8440eeec":"## Generate 3D Distance all mRNA samples","7ed70468":"## Parse 3D Structure and Find 3D Coordinates from PDB","c62ed2be":"Refer to https:\/\/biopython.org\/wiki\/Reading_large_PDB_files","39a14bef":"## Training Samples from OpenVaccine competition","86151bcb":"## Introduction\nThis is a simple introduction on how to use the pdb files to access 3D coordinates information for Open Vaccine Competition"}}