{"cell_type":{"58c516c8":"code","1858789b":"code","9b719184":"code","e1bcc782":"code","9a07008e":"code","82a00404":"code","0bc60057":"code","9941521b":"code","f2242b47":"code","ebc2159d":"code","fed807be":"code","7e838daa":"code","8179bd8b":"code","f94092dd":"code","96268b0c":"code","8d0968eb":"code","68dcf645":"code","244a2a04":"code","50da0287":"code","f41b00a0":"code","69a50d37":"code","4bc81f77":"code","fdf3eea3":"code","06f9f1b2":"code","7987b78d":"code","da293af8":"code","f54b9d53":"code","bdf6b83c":"code","3d7b45d4":"code","b6ebaafb":"code","08479b81":"code","e61cd4fd":"code","1f3d947f":"code","0e4b82ad":"code","7c5f7bbe":"code","b671f8c6":"code","be1fd90a":"code","658be669":"code","f7195f71":"code","04fea8f7":"code","785e44df":"code","2077ceab":"code","07c5a346":"code","f56eb36a":"code","a315da69":"code","d87f858e":"markdown","a410f94d":"markdown","4e4a846b":"markdown","60cada0f":"markdown","4f0257b8":"markdown","fa17a4cb":"markdown","351c8296":"markdown","415c388e":"markdown","4eec4c3b":"markdown"},"source":{"58c516c8":"!pip install plotly","1858789b":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\n\n\nDATA_DIR = '\/kaggle\/input\/footballsoccer-statistics\/dataset_football_cleaned.csv'\n","9b719184":"dataset = pd.read_csv(DATA_DIR)","e1bcc782":"dataset.head()","9a07008e":"dataset.info()","82a00404":"dataset.drop(['first_name','end_contract'],axis=1,inplace=True)","0bc60057":"dataset.info()","9941521b":"dataset['name'] = dataset['name'].astype('string')\ndataset['nation'] = dataset['nation'].astype('string')\ndataset['league'] = dataset['league'].astype('string')\ndataset['team'] = dataset['team'].astype('string')\ndataset['position'] = dataset['position'].astype('string')","f2242b47":"dataset.describe()","ebc2159d":"dataset.league.unique()","fed807be":"selected_leagues = ['PremierLeague','SerieA','S\u00fcperLig','Bundesliga','Ligue1','LaLiga']\n\ndataset = dataset[dataset.league.isin(selected_leagues)]\n\ndataset.head()","7e838daa":"sorted_dataset = dataset.sort_values(by=\"price\",ascending=False)\n\nsorted_dataset.head()","8179bd8b":"nations_and_prices = sorted_dataset[['nation','price']]\npositions_and_prices = sorted_dataset[['position','price']]\nteams_and_prices = sorted_dataset[['team','price']]\n\nnations_and_prices = nations_and_prices.groupby('nation').sum().sort_values('price',ascending=False)[0:10]\n\npositions_and_prices = positions_and_prices.groupby('position').sum().sort_values('price',ascending=False)[0:5]\n\nteams_and_prices = teams_and_prices.groupby('team').sum().sort_values('price',ascending=False)[0:10]\n\n","f94092dd":"f, ax = plt.subplots(2,2,figsize=(25, 10))\n\nax[0,0].set_title(\"Leagues' total player count\")\nax[0,1].set_title(\"Players' price sums according to their nation (Top 10)\")\nax[1,0].set_title(\"Players' price sums according to their positions (Top 5)\")\nax[1,1].set_title(\"Teams' total value according to their football players (Top 10)\")\n\nsns.countplot(data=sorted_dataset, x='league', order=sorted_dataset.league.value_counts().index,ax=ax[0,0])\n\nsns.barplot(x=nations_and_prices.index, y=nations_and_prices.price,ax=ax[0,1])\n\nposition_chart = sns.barplot(x=positions_and_prices.index, y=positions_and_prices.price,ax=ax[1,0])\n\nposition_chart.set_xticklabels(position_chart.get_xticklabels(), rotation=90)\n\nteam_chart = sns.barplot(x=teams_and_prices.index, y=teams_and_prices.price,ax=ax[1,1])\nteam_chart.set_xticklabels(team_chart.get_xticklabels(), rotation=90)\n","96268b0c":"def plot_world_map(df,iso,locations,hover_name):\n    fig = px.choropleth(df, locations=iso,\n                    color=locations,\n                    hover_name=hover_name,\n                    color_continuous_scale=px.colors.sequential.YlOrRd)\n\n    layout = go.Layout(\n        title=go.layout.Title(\n            text=\"World map of players' price sum according to nations\",\n            x=0.8\n        ),\n        font=dict(size=12),\n        width = 1000,\n        height = 500,\n        margin=dict(l=0,r=0,b=0,t=30)\n    )\n\n    fig.update_layout(layout)\n\n    fig.show()\n    ","8d0968eb":"nations_and_prices.reset_index(level=0,inplace=True)\n","68dcf645":"ISO_CODES =  {\n                'France'    : 'FRA',\n                'Germany'   : 'DEU',\n                'England'   : 'GB',\n                'Brazil'    : 'BRA',\n                'Italy'     : 'ITA',\n                'Spain'     : 'ESP',\n                'Belgium'   : 'BEL',\n                'Portugal'  : 'PRT',\n                'Argentina' : 'ARG',\n                'Egypt'     : 'EGY',\n                'Croatia'   : 'HRV'\n             }\n\nnations_and_prices['ISO'] = nations_and_prices['nation'].apply(lambda x : ISO_CODES[x])\n\nplot_world_map(nations_and_prices,'ISO','nation','price')","244a2a04":"def count_of_player_acc_to_class(position):\n\n    data = sorted_dataset[['position','nation','price']]\n\n    data = data[data['position']==position]\n\n    data.drop(['position'],axis=1,inplace=True)\n\n    price_mean = data.price.mean()\n\n    lower_limit = price_mean - price_mean*50\/100\n\n    upper_limit = price_mean + price_mean*50\/100\n\n    data.drop_duplicates(subset=None, keep='first', inplace=True)\n\n    avg_midfields = data[(data['price']>=lower_limit) & (data['price']<=upper_limit)]\n\n    under_avg_midfields = data[data['price']<lower_limit]\n\n    upper_avg_midfields = data[data['price']>upper_limit]\n    \n\n    upper_avg_midfields.drop(['price'],axis=1,inplace=True)\n    avg_midfields.drop(['price'],axis=1,inplace=True)\n    under_avg_midfields.drop(['price'],axis=1,inplace=True)\n\n\n    f, ax = plt.subplots(2,2,figsize=(30, 20))\n\n    ax[0,1].set_title('Average Price {} Nation'.format(position))\n\n    ax[0,0].set_title('Under-Average Price {} Nation'.format(position))\n\n    ax[1,0].set_title('Upper-Average Price {} Nation'.format(position))\n\n    avg_chart = sns.barplot(x=avg_midfields.value_counts().index, y=avg_midfields.value_counts(),ax=ax[0,1])\n    avg_chart.set_xticklabels(avg_chart.get_xticklabels(), rotation=90)\n\n    under_avg_chart = sns.barplot(x=under_avg_midfields.value_counts().index, y=under_avg_midfields.value_counts(),ax=ax[0,0])\n    under_avg_chart.set_xticklabels(under_avg_chart.get_xticklabels(), rotation=90)\n\n    upper_avg_chart = sns.barplot(x=upper_avg_midfields.value_counts().index, y=upper_avg_midfields.value_counts(),ax=ax[1,0])\n    upper_avg_chart.set_xticklabels(upper_avg_chart.get_xticklabels(), rotation=90)\n\n    f.tight_layout()\n    \ncount_of_player_acc_to_class('CentralMidfield')","50da0287":"\ntop_scorers = sorted_dataset[['name','age','league','team','goals_selection','goal_champ','assist_champ']]\n\ntop_goal_scorers = top_scorers.sort_values('goal_champ',ascending=False)[0:30]\ntop_assisters = top_scorers.sort_values('assist_champ',ascending=False)[0:30]\n\n\nf, ax = plt.subplots(1,2,figsize=(30, 10))\n\n\ntop_scorer_player_chart = sns.barplot(x=top_goal_scorers['name'], y=top_goal_scorers['goal_champ'],ax=ax[0])\ntop_scorer_player_chart.set_xticklabels(top_scorer_player_chart.get_xticklabels(), rotation=90)\n\ntop_assisters_player_chart = sns.barplot(x=top_assisters['name'], y=top_assisters['assist_champ'],ax=ax[1])\ntop_assisters_player_chart.set_xticklabels(top_assisters_player_chart.get_xticklabels(), rotation=90)","f41b00a0":"#Delete unnecessary columns\n\nsorted_dataset.drop(['name','nation','team'],axis=1,inplace=True)\n\nsorted_dataset.info()","69a50d37":"corr = sorted_dataset.corr()\n\nf, ax = plt.subplots(figsize=(25, 25))\n\nax = sns.heatmap(corr,annot=True)","4bc81f77":"sorted_dataset.drop(['red_card_continent','second_yellow_card_continent','own_goal_continent','penalty_goal_cup','red_card_cup','second_yellow_card_cup','yellow_card_cup','sub_on_cup','sub_out_cup','own_goal_cup','conceded_goal_cup','penalty_goal_champ','red_card_champ','second_yellow_card_champ','yellow_card_champ','sub_on_champ','sub_out_champ','own_goal_champ','clean_sheet_continent','conceded_goal_continent','clean_sheet_cup','conceded_goal_cup','clean_sheet_champ'],axis=1,inplace=True)","fdf3eea3":"df_league = pd.DataFrame()\ndf_position = pd.DataFrame()\n\ndf_league['league'] = sorted_dataset['league']\ndf_position['position'] = sorted_dataset['position']\n\ndum_league_df = pd.get_dummies(df_league['league'], columns=[\"league\"], prefix='League')\ndum_position_df = pd.get_dummies(df_position['position'], columns=[\"position\"], prefix='Position')\n\nsorted_dataset.drop(['league','position'],axis=1,inplace=True)\n\nconcated_df = pd.concat([dum_league_df,dum_position_df],axis=1)\nsorted_dataset = pd.concat([sorted_dataset,concated_df],axis=1)","06f9f1b2":"sorted_dataset.head()","7987b78d":"#Finding outliers\n\nplt.scatter(x=sorted_dataset.index,y=sorted_dataset['price'])\n","da293af8":"import math\n\nsorted_dataset = sorted_dataset[sorted_dataset['price']<0.75*math.pow(10,8)]","f54b9d53":"plt.scatter(x=sorted_dataset.index,y=sorted_dataset['price'])\n","bdf6b83c":"Y = sorted_dataset['price']\n\nsorted_dataset.drop(['price'],axis=1,inplace = True)\n\nX = sorted_dataset","3d7b45d4":"#Train-Test Split\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=42,shuffle=True)\n\npreprocessing.StandardScaler().fit_transform(x_train)\npreprocessing.StandardScaler().fit_transform(x_test)","b6ebaafb":"from sklearn.metrics import auc, accuracy_score, confusion_matrix, mean_squared_error\nimport random","08479b81":"random.seed(1)\ndef display_scores(scores):\n    print(\"Mean: {}\\nStd: {}\".format(np.mean(scores), np.std(scores)))\n    \ndef display_rmse(y_pred):\n    mse=mean_squared_error(y_test, y_pred)\n\n    print(\"RMSE : {}\".format(np.sqrt(mse)))\n    \ndef compare_random(y_pred):\n    random_number = random.randint(0,y_test.__len__())\n    print(\"Example of prediction\\nPrediction : {}  True Value : {} \".format(y_pred[random_number],y_test.values[random_number]))","e61cd4fd":"import xgboost as xgb","1f3d947f":"xgb_model = xgb.XGBRegressor(objective=\"reg:linear\", random_state=42)\n\nxgb_model.fit(x_train, y_train)\n\ny_pred = xgb_model.predict(x_test)\n\ndisplay_scores(y_pred)\ndisplay_rmse(y_pred)\ncompare_random(y_pred)\n","0e4b82ad":"from sklearn.svm import SVR","7c5f7bbe":"# 3 Different Kernel for SVR\n\nsvr_rbf = SVR(kernel='rbf', C=100, gamma=0.1, epsilon=.1)\nsvr_lin = SVR(kernel='linear', C=100, gamma='auto')\nsvr_poly = SVR(kernel='poly', C=100, gamma='auto', degree=3, epsilon=.1,\n               coef0=1)","b671f8c6":"y_pred = svr_rbf.fit(x_train,y_train).predict(x_test)\n\ndisplay_scores(y_pred)\ndisplay_rmse(y_pred)\ncompare_random(y_pred)\n","be1fd90a":"y_pred = svr_lin.fit(x_train,y_train).predict(x_test)\n\ndisplay_scores(y_pred)\ndisplay_rmse(y_pred)\ncompare_random(y_pred)\n","658be669":"y_pred = svr_poly.fit(x_train,y_train).predict(x_test)\n\ndisplay_scores(y_pred)\ndisplay_rmse(y_pred)\ncompare_random(y_pred)\n","f7195f71":"from sklearn.linear_model import BayesianRidge\n\nclf = BayesianRidge()\nclf.fit(x_train, y_train)\n\ny_pred = clf.predict(x_test)\n\ndisplay_scores(y_pred)\ndisplay_rmse(y_pred)\ncompare_random(y_pred)","04fea8f7":"from sklearn.neighbors import KNeighborsRegressor\n\nneigh = KNeighborsRegressor(n_neighbors=6)\n\ny_pred = neigh.fit(x_train,y_train).predict(x_test)\n\ndisplay_scores(y_pred)\ndisplay_rmse(y_pred)\ncompare_random(y_pred)","785e44df":"from sklearn.ensemble import GradientBoostingRegressor\n\nest = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1,max_depth=1, random_state=0, loss='ls').fit(x_train, y_train)\n    \ny_pred = est.predict(x_test)\n\ndisplay_scores(y_pred)\ndisplay_rmse(y_pred)\ncompare_random(y_pred)","2077ceab":"from sklearn.neural_network import MLPRegressor\nregr = MLPRegressor(random_state=1, max_iter=500,hidden_layer_sizes = (3000,100)).fit(x_train, y_train)\n","07c5a346":"y_pred = regr.predict(x_test)\n\ndisplay_scores(y_pred)\ndisplay_rmse(y_pred)\ncompare_random(y_pred)","f56eb36a":"from sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression(random_state=0,solver=\"liblinear\",max_iter = 50).fit(x_train, y_train)\ny_pred = clf.predict(x_test)\n\ndisplay_scores(y_pred)\ndisplay_rmse(y_pred)\ncompare_random(y_pred)","a315da69":"from sklearn.linear_model import ElasticNet\n\nregr = ElasticNet(random_state=0,normalize=False)\ny_pred = regr.fit(x_train, y_train).predict(x_test)\n\ndisplay_scores(y_pred)\ndisplay_rmse(y_pred)\ncompare_random(y_pred)","d87f858e":"# **PREPROCESSING DATA FOR TRAINING**","a410f94d":"# **Distribution of players according to their position and price (Average Price,Upper Price,Lower Price)**","4e4a846b":"> Correlation Matrix (To see relation between columns)\n\n","60cada0f":"# **Machine Learning Algorithms For Forecasting**\n1. XGBOOST\n","4f0257b8":"**Common Functions**","fa17a4cb":"# *XGBOOST*","351c8296":"#  **Expensive players according to league, nation,position and team**","415c388e":"# **TOP SCORER AND ASSISTER PLAYERS FOR EACH LEAGUE**","4eec4c3b":"# **World map of expensive players nation**"}}