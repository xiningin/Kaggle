{"cell_type":{"4adeddda":"code","80fcfae7":"code","5e3e4bd0":"code","e863d38f":"code","87c45e4f":"code","99d14889":"code","9901fda8":"code","432aa9ae":"code","1b3284ee":"code","ac0b65d7":"code","697f09de":"code","e6c698c4":"code","064eae12":"code","356e3ac6":"code","4415f46f":"code","9f00430b":"code","e8717297":"code","fb0e9f32":"code","3dbcd7d3":"code","4dcdd4a3":"code","83dc4ed6":"code","b08dc5d0":"code","2af62344":"code","69cc0ebb":"code","b2d16579":"code","010284eb":"code","723abcb1":"code","9b6cfca1":"code","1cf0da7a":"code","04b00d1c":"code","364c1e04":"code","a86d5408":"code","2b320727":"code","a782f2da":"code","aeb75485":"code","56dfa1b1":"code","46c59e88":"code","6e0f5324":"code","4a339ee9":"code","433ab324":"code","5cf628c3":"code","d9582c25":"markdown","7cf2b811":"markdown","97c46d8a":"markdown","0a10ee09":"markdown","1a2e3bc9":"markdown","a57b8874":"markdown","95b7996a":"markdown"},"source":{"4adeddda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","80fcfae7":"df = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","5e3e4bd0":"df.shape","e863d38f":"df.isnull().sum()","87c45e4f":"import seaborn as sns\nsns.heatmap(df.isnull())","99d14889":"df.info()","9901fda8":"df.describe()","432aa9ae":"df.corr()","1b3284ee":"df.isnull().any()","ac0b65d7":"import seaborn as sns\nimport matplotlib.pyplot as plt","697f09de":"sns.histplot(df['bmi'],bins=20)","e6c698c4":"df['bmi'].mean()","064eae12":"df['bmi'].median()","356e3ac6":"df_m = df.copy()","4415f46f":"df_m['bmi'] = df_m['bmi'].fillna(28.1)","9f00430b":"df_m.isnull().any()","e8717297":"df_m.head()","fb0e9f32":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf_m['gender'] = le.fit_transform(df_m['gender'])\ndf_m['ever_married'] = le.fit_transform(df_m['ever_married'])\ndf_m['work_type'] = le.fit_transform(df_m['work_type'])\ndf_m['Residence_type'] = le.fit_transform(df_m['Residence_type'])\ndf_m['smoking_status'] = le.fit_transform(df_m['smoking_status'])","3dbcd7d3":"df_m.head(2)","4dcdd4a3":"df.columns","83dc4ed6":"from sklearn.model_selection import train_test_split\nx = df_m[['gender', 'age', 'hypertension', 'heart_disease', 'ever_married',\n       'work_type', 'Residence_type', 'avg_glucose_level', 'bmi',\n       'smoking_status']]\ny = df_m['stroke']","b08dc5d0":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,stratify=y,random_state=101)","2af62344":"from sklearn.linear_model import LogisticRegression\nlog = LogisticRegression()\nlog.fit(x_train,y_train)","69cc0ebb":"log.score(x_test,y_test)","b2d16579":"from sklearn.metrics import confusion_matrix\nsns.heatmap(confusion_matrix(y_test,log.predict(x_test)),annot=True)\n    ","010284eb":"import seaborn as sns\nsns.set_theme(style=\"darkgrid\")\nsns.lineplot(x='age',y='bmi',hue='gender',data=df)\n","723abcb1":"import matplotlib as mpl\nsns.set_theme(style='ticks')\nf, ax = plt.subplots(figsize=(7, 5))\nsns.despine(f)\n\nsns.histplot(\n    df,\n    x=\"bmi\", hue=\"gender\",\n    multiple=\"stack\",\n    palette=\"light:m_r\",\n    edgecolor=\".3\",\n    linewidth=.5,\n    log_scale=True,\n)\nax.xaxis.set_major_formatter(mpl.ticker.ScalarFormatter())\nax.set_xticks([10,20,30,40,50])","9b6cfca1":"data_male = df[df['gender']=='Male']","1cf0da7a":"data_male.head()","04b00d1c":"print('Median BMI of male with age less than 30 : ',data_male[data_male['age']<30]['bmi'].median())\nprint('Median BMI of male with age more than 30 and less than 50 : ',data_male[(data_male['age']>30) & (data_male['age']<50)]['bmi'].median())\nprint('Median BMI of male with age greater than 50 : ',data_male[data_male['age']>50]['bmi'].median())","364c1e04":"data_female = df[df['gender']=='Female']\nprint('Median BMI of Female with age less than 30 : ',data_female[data_female['age']<30]['bmi'].median())\nprint('Median BMI of Female with age more than 30 and less than 50 : ',data_female[(data_female['age']>30) & (data_female['age']<50)]['bmi'].median())\nprint('Median BMI of Female with age greater than 50 : ',data_female[data_female['age']>50]['bmi'].median())","a86d5408":"data_other = df[df['gender']=='Other']\nprint('Median BMI of Other with age less than 30 : ',data_other[data_other['age']<30]['bmi'].median())\nprint('Median BMI of Other with age more than 30 and less than 50 : ',data_other[(data_other['age']>30) & (data_other['age']<50)]['bmi'].median())\nprint('Median BMI of Other with age greater than 50 : ',data_other[data_other['age']>50]['bmi'].median())","2b320727":"df.isnull().sum()","a782f2da":"df.isnull().any()","aeb75485":"#sns.heatmap(df.isnull())","56dfa1b1":"#df[(df['gender']=='Male')&df['age']<30]['bmi'].median()","46c59e88":"df['bmi']","6e0f5324":"df['bmi'].fillna(0,inplace=True)","4a339ee9":"df.head()","433ab324":"m=0\nfor i in range(len(df['bmi'])):\n    if df['bmi'][i] == 0.0:\n        if df['gender'][i] == 'Male':\n            m=22.1\n            df['bmi'][i] = m\n        else:\n            m = 23\n            df['bmi'][i] = m","5cf628c3":"df.isnull().sum()","d9582c25":"Now I will calculate BMI based on two factors age and gender , i will find median for 3 different age groups for male and female and other \n\nThree age groups :\n1. 0-30\n\n2.30-50\n\n3.>50","7cf2b811":"# Imputing Medians in Missing Values based on conditions","97c46d8a":"Converting Strings into Integers\n1. GENDER\n\n2.Ever Married\n\n3.Work Type\n\n4.Residence Type\n\n5.Smoking Status","0a10ee09":"# EXPLORING BMI DISTRIBUTION AND FILLING IT","1a2e3bc9":"There are furthur two ways to either use dummy varibales or do label encoding , first we would go for label encoding","a57b8874":"# MAKING MODEL WITH MEDIAN VALUE INSTEAD OF NULL VALUES IN BMI","95b7996a":"# EXPLORE BMI WITH RESPECT TO OTHER COLUMNS "}}