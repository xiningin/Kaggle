{"cell_type":{"c4add3c6":"code","e40ad662":"code","deffb305":"code","0bcbd556":"code","f11ad91a":"code","5c6ab666":"code","7b4e1dc7":"code","9e8c0bd5":"code","04765549":"code","3e7ba797":"code","884a84cb":"code","0efb4108":"code","bb6cae63":"code","badedcb9":"code","1c2fe124":"code","0fd9f8d1":"code","aa2237b3":"code","aec2a7c1":"code","ec945764":"code","3c540413":"code","4a3c2812":"code","09dd5052":"code","b14d858a":"code","4dd20e5d":"code","b34c5a54":"code","db120981":"code","32f386da":"code","e2f8fe15":"code","fa615e54":"code","82e2a2b7":"code","81e3570a":"code","32b61c01":"code","5e6c57f9":"code","91ff1b50":"code","9aade463":"code","5ef666f8":"code","c3befde4":"code","a75658d5":"code","798bc210":"code","dcc1bbfa":"markdown","8e9fc836":"markdown","acb4123b":"markdown","ca92e9a0":"markdown","e802a7e5":"markdown","8bf31709":"markdown"},"source":{"c4add3c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e40ad662":"train = pd.read_csv(\"\/kaggle\/input\/titanic-solution-for-beginners-guide\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic-solution-for-beginners-guide\/test.csv\")","deffb305":"train.isnull().sum()","0bcbd556":"test.isnull().sum()","f11ad91a":"train_test_data = [train , test ]   # concate the train and split data","5c6ab666":"train['Age'].fillna((train['Age'].mean()), inplace=True)\ntest['Age'].fillna((test['Age'].mean()), inplace=True)\n","7b4e1dc7":"test['Fare'].fillna((test['Fare'].mean()), inplace=True)\n","9e8c0bd5":"train['Embarked'].fillna((train['Embarked'].ffill()) , inplace=True)","04765549":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","3e7ba797":"train['Cabin'].fillna((train['Cabin'].ffill()) , inplace=True)\ntest['Cabin'].fillna((test['Cabin'].ffill()) , inplace=True)","884a84cb":"train['Cabin'].fillna((train['Cabin'].bfill()) , inplace=True)\ntest['Cabin'].fillna((test['Cabin'].bfill()) , inplace=True)","0efb4108":"train.isnull().sum()","bb6cae63":"test.isnull().sum()","badedcb9":"train.head(5)","1c2fe124":"for dataset in train_test_data:\n    dataset.loc[ dataset['Sex'] == 'male', 'Sex'] = 0,\n    dataset.loc[ dataset['Sex'] == 'female', 'Sex'] = 1","0fd9f8d1":"\ntrain.Embarked.value_counts()","aa2237b3":"test.Embarked.value_counts()","aec2a7c1":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","ec945764":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","3c540413":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","4a3c2812":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","09dd5052":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","b14d858a":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","4dd20e5d":"train.head(5)","b34c5a54":"train_test_data = [train, test] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","db120981":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","32f386da":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","e2f8fe15":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","fa615e54":"train.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","82e2a2b7":"train.head(5)","81e3570a":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","32b61c01":"train_dat = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_dat.shape, target.shape","5e6c57f9":"# modelling\n\nfrom sklearn.svm import SVC\n\nimport numpy as np","91ff1b50":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","9aade463":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_dat, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","5ef666f8":"round(np.mean(score)*100,2)","c3befde4":"clf = SVC()\nclf.fit(train_dat, target)\n\ntest_dat = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_dat)","a75658d5":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","798bc210":"submission = pd.read_csv('submission.csv')\nsubmission.head()","dcc1bbfa":"**  Age **","8e9fc836":"** Testing **","acb4123b":"** Fare **","ca92e9a0":"** Embarked  **","e802a7e5":"** Encoding  **","8bf31709":"** Cabin **"}}