{"cell_type":{"f70276b0":"code","ca98c93a":"code","a2134e78":"code","1d31ef61":"code","877e599a":"code","27614baa":"code","01f14241":"code","98b10c9a":"code","f827a2a8":"code","3944b553":"code","2a0ab3e8":"code","ae494019":"code","0cb145c9":"code","426eb760":"code","462783cd":"code","fd1048fe":"code","0379db68":"code","92f743ad":"code","9a7f6c63":"code","af9f5066":"markdown","9ba505f7":"markdown","e27a48ad":"markdown","06bc1fe5":"markdown"},"source":{"f70276b0":"from pathlib import Path\nfrom dataclasses import dataclass\nimport json\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ca98c93a":"dir1 = \"\/kaggle\/input\/CORD-19-research-challenge\"\ndir1 = Path(dir1)","a2134e78":"files = list(dir1.rglob(\"*.readme\"))\ndef show_whole_file(p):\n    with open(p) as f:\n        for line in f: print(line)\n            \nshow_whole_file(files[0])","1d31ef61":"## Look at the what else is in the data set","877e599a":"files = list(dir1.rglob(\"*.*\"))\nfiles[0:10]","27614baa":"show_whole_file(files[0])","01f14241":"dir2 = '\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/comm_use_subset\/comm_use_subset\/'\ndir2 = Path(dir2)","98b10c9a":"files = list(dir2.rglob(\"*.json*\"))","f827a2a8":"# open a single file so we can get confortable with the data and see how to process it\none_json = files[0]\nwith open(one_json, 'r') as myfile:\n    data=myfile.read()\n    \nj_obj = json.loads(data)","3944b553":"def get_keys(obj):\n    for k,v in obj.items():\n        if isinstance(v, dict): get_keys(v)\n        else: print(k)      \n\n        \ndef get_values_of_key(obj, mykey = 'country'):\n    data = []   \n    if isinstance(obj, dict):       \n        for k,v in obj.items():\n            if isinstance(v, dict) or isinstance(v,list): data.extend(get_values_of_key(v, mykey))\n            elif k == mykey: data.append(v)\n    if isinstance(obj, list):  \n        for v in obj:\n            if isinstance(v, dict) or isinstance(v,list): data.extend(get_values_of_key(v, mykey))\n    return data\n\ndef get_children_of_key(obj, mykey = 'abstract'):\n    for k,v in obj.items():\n        if isinstance(v, dict):\n            r = get_children_of_key(v, mykey)\n            if r is not None: return r\n        else:\n            if k==mykey: return v","2a0ab3e8":"# get_keys(j_obj)","ae494019":"# test on somthing simple, \"country\"\nr = get_values_of_key(j_obj)\nr","0cb145c9":"def flatten(r):\n    s =\"\"\n    for v in r:\n        if type(v)==str: s+=v\n    return s","426eb760":"r = get_children_of_key(j_obj, 'abstract')\nr = get_values_of_key(r,'text')\nprint(len(r))\nr = flatten(r)\nprint(len(r))\nr\n","462783cd":"def get_key_from_all_files(files, key= 'abstract', key2 = 'text'):\n    data = []\n    for f in files:\n        with open(f, 'r') as myfile:                  \n            data.append( flatten(get_values_of_key(get_children_of_key(json.loads(myfile.read()) , key),key2)))\n    return data","fd1048fe":"abstracts = get_key_from_all_files(files, key = 'abstract')","0379db68":"abstracts","92f743ad":"df = pd.DataFrame({'abstracts':abstracts})","9a7f6c63":"df.to_csv('abstracts.csv')","af9f5066":"# The meta-data will likely be interesteding. Hopefully, authors have distilled the key inforamtion into the abstract , So, as a first pass lets try to process the abstact","9ba505f7":"# combine everything, get all abstracts","e27a48ad":"# Read the readme is a good start","06bc1fe5":"### Json schema is important, lets take a look"}}