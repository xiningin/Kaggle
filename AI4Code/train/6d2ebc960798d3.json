{"cell_type":{"b645f419":"code","7d302bf2":"code","ba9f394a":"code","ca5bcd0c":"code","5ce5a157":"code","7b93a901":"code","4a9bc3a2":"code","18c744b5":"code","655acbe5":"code","dcefe515":"code","bbeae8f9":"code","a54e9c92":"code","30878ada":"code","4fcee0e0":"code","67dca07f":"code","2579aff3":"code","c0c9d723":"code","291788ff":"code","8aad410e":"code","2e377909":"code","ff57db7a":"code","d68d8334":"markdown"},"source":{"b645f419":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(data, target, id_name = '', null_name = ''):\n    if id_name == \"\":\n        data = data.reset_index().rename(columns = {'index' : 'id'})\n        id_name = 'id'\n    else:\n        id_name = id_name\n        \n    if null_name != '':\n        data[data == null_name] = np.nan\n        \n    X_train, X_test = train_test_split(data, test_size = 0.2, random_state = 2021)\n    \n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns = [target])\n    \n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns = [target])\n    return X_train, X_test, y_train, y_test\n\ndata = pd.read_csv('..\/input\/insurance\/insurance.csv')\nX_train, X_test, y_train, y_test = exam_data_load(data, target = 'charges')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","7d302bf2":"X_train.head()","ba9f394a":"X_test.head()","ca5bcd0c":"y_train.head()","5ce5a157":"y_test.head()","7b93a901":"X_train.isna().sum()","4a9bc3a2":"X_test.isna().sum()","18c744b5":"X_train = pd.get_dummies(X_train)\nX_test = pd.get_dummies(X_test)","655acbe5":"X_train.head()","dcefe515":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train['bmi'] = sc.fit_transform(X_train[['bmi']])\nX_test['bmi'] = sc.fit_transform(X_test[['bmi']])","bbeae8f9":"X = X_train.drop(['id'], axis = 1)\ny = y_train['charges']","a54e9c92":"X_tr, X_val, y_tr, y_val = train_test_split(X, y, test_size = 0.3, random_state = 2021)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","30878ada":"from sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor(random_state = 2021)\nrf.fit(X_tr, y_tr)\npred = rf.predict(X_val)","4fcee0e0":"pred","67dca07f":"from sklearn.metrics import mean_squared_error\n\ndef rmse2(y_true, y_pred):\n    return np.sqrt(mean_squared_error(y_true, y_pred))\n\nrmse2(y_val, pred)    ","2579aff3":"def rmse(y_true, y_pred):\n    return np.sqrt(np.mean((y_true - y_pred) ** 2))\n\nrmse(y_val, pred)","c0c9d723":"X_test = X_test.drop(['id'], axis = 1)","291788ff":"rf.fit(X, y)\npred = rf.predict(X_test)","8aad410e":"output = pd.DataFrame({'id' : y_test['id'], 'charges' : pred})\noutput.head()","2e377909":"output.to_csv('000000.csv', index = False)","ff57db7a":"rmse(y_test['charges'], pred)","d68d8334":"- Age : \ud53c\ubcf4\ud5d8\uc790\uc758 \ub098\uc774\n- Sex : \ud53c\ubcf4\ud5d8\uc790\uc758 \uc131\ubcc4\n- BMI : \ud53c\ubcf4\ud5d8\uc790\uc758 \uccb4\uc9c8\ub7c9 \uc9c0\uc218\n- Children : \ud53c\ubcf4\ud5d8\uc790\uc758 \uc790\ub140\uc758 \uc218\n- Smoker : \ud761\uc5f0 \uc5ec\ubd80\n- Region : \ud53c\ubcf4\ud5d8\uc790\uac00 \uac70\uc8fc\ud558\ub294 \uc9c0\uc5ed\n- Charges : \ubcf4\ud5d8\ub8cc"}}