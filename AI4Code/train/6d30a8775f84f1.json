{"cell_type":{"51650e47":"code","2e5459ba":"code","cf61e116":"code","aeb9606c":"code","3b7cba3e":"code","3cf9bab3":"code","e0e065e5":"code","f2f0c57b":"code","43ac5432":"code","2aecea49":"code","01e86c6b":"markdown","e04261f3":"markdown","80aa2333":"markdown","d1e7af7a":"markdown","18eab147":"markdown","413c8fad":"markdown","f6f881a2":"markdown","d233f98e":"markdown","fd032eeb":"markdown","e2c773bf":"markdown","f158d4e4":"markdown","8965b6dd":"markdown","871f6e9b":"markdown","f06adfd7":"markdown","7e2a9a3c":"markdown"},"source":{"51650e47":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnohitter_times = pd.read_csv(\"https:\/\/assets.datacamp.com\/production\/repositories\/470\/datasets\/593c37a3588980e321b126e30873597620ca50b7\/mlb_nohitters.csv\")\n","2e5459ba":"nohitter_times","cf61e116":"# Let's plot PDF of exponential distribution\n# Seed random number generator\nSEED = np.random.seed(42)\n\n# Compute mean no-hitter time: tau\ntau = np.mean(nohitter_times.iloc[:,1])\n\n# Draw out of an exponential distribution with parameter tau: inter_nohitter_time\ninter_nohitter_time = np.random.exponential(tau, 100000)\n\n# Plot the PDF and label axes\n_ = plt.hist(inter_nohitter_time,\n             bins=50, histtype='step') # normed=True, \n_ = plt.xlabel('Games between no-hitters')\n_ = plt.ylabel('PDF')\n\n# Show the plot\nplt.show()\n","aeb9606c":"# Compute a bootstrape replicate\nbs_replicates = np.empty(10000)\n\n# Confidence interval\n# confidence_interval = np.percentile()\n# will work on it later!\n# https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.percentile.html","3b7cba3e":"import pandas\nrainfall = pandas.read_csv(\"https:\/\/assets.datacamp.com\/production\/repositories\/470\/datasets\/129cba08c45749a82701fbe02180c5b69eb9adaf\/sheffield_weather_station.csv\", error_bad_lines=False,  skiprows=[0,1,2,3,4,5,6,7])\n","3cf9bab3":"# rainfall2 = pd.read_csv(rainfall, sep=\" \")\nrainfall_data = pandas.read_csv(\"https:\/\/assets.datacamp.com\/production\/repositories\/470\/datasets\/129cba08c45749a82701fbe02180c5b69eb9adaf\/sheffield_weather_station.csv\", \n                           error_bad_lines=False,  skiprows=[0,1,2,3,4,5,6,7], sep=\"\\s+\")\n# error_bad_lines: In the original dataset (if u open the link above), we have some formatting issues. The code would throw error if we dont put False\n# skiprows: we have 8 lines at the top of the CSV file (before actual header of the dataset starts), we should SKIP them, right?\n# sep=\"\\s+\": The data points in the file is seperated by spaces, but random spaces, sometime single space, sometime 2 or more spaces \nrainfall  = rainfall_data['rain']","e0e065e5":"rainfall","f2f0c57b":"!pip install dc_stat_think\nimport dc_stat_think as dcst # needed to calculate ECDF","43ac5432":"for _ in range(50):\n    # Generate bootstrap sample: bs_sample\n    \n    bs_sample = np.random.choice(rainfall, size=10*len(rainfall))\n\n    # Compute and plot ECDF from bootstrap sample\n    x, y = dcst.ecdf(bs_sample)\n    _ = plt.plot(x, y, marker= '2', linestyle='none',\n                 color='black')\n# detail on Marker https:\/\/matplotlib.org\/3.1.0\/api\/markers_api.html\n# a marker of ',' is tiny compared to '.'\n\n# Compute and plot ECDF from original data\nx, y = dcst.ecdf(rainfall)\n_ = plt.plot(x, y, marker=',', color='blue')\n\n# Make margins and label axes\nplt.margins(0.02)\n_ = plt.xlabel('yearly rainfall (mm)')\n_ = plt.ylabel('ECDF')\n\n# Show the plot\nplt.show()","2aecea49":"# Bootstrap confidence interval\nconf_int = np.percentile(bs_sample, [2.5, 97.5])\nconf_int","01e86c6b":"A typical screen of DataCamp; impressive, right?\n![image.png](attachment:image.png)","e04261f3":"### Visualizing bootstrap samples\nIn this exercise, you will generate bootstrap samples from the set of annual rainfall data measured at the Sheffield Weather Station in the UK from 1883 to 2015. The data are stored in the NumPy array rainfall in units of millimeters (mm). By graphically displaying the bootstrap samples with an ECDF, you can get a feel for how bootstrap sampling allows probabilistic descriptions of data.","80aa2333":"Theoratical and empirical distribution:\nEmpirical CDF is build on actual data. Empirical distribution changes with data. \nan empirical distribution is determined by the sample, whereas a theoretical distribution can determine the sample coming out of it. [Source](https:\/\/stats.stackexchange.com\/questions\/237237\/what-is-the-difference-between-the-theoretical-distribution-and-the-empirical-di)\n\n**Optimal parameters:**\nParameter values that bring the model in closest agreement with the data","d1e7af7a":"A\/B test: compare a new model\/design with old one\n\nUsed by organizations to see if a strategy change gives a better result\n\n\nNull Hypothesis: Performance of the system is NOT affected by change \n\nLower p-value indicates new model\/design is better! \n\nimpervious means impenetrable \n","18eab147":"# Chapter 4: A\/B Testing","413c8fad":"# Chapter 2: Generating Bootstrap replicates","f6f881a2":"# Chapter 3: Formulating and simulating a Hypothesis","d233f98e":"# Statistical Thinking in Python (Part 2) from Datacamp\nThis Notebook is a mere personal note that I am writing for keep a track of my learning. Dont consider this as what to learn from the DataCamp course.","fd032eeb":"Displaying the linear regression results\n\nPython Code:\n\n_ = plt.plot(bl_1975, bd_1975, marker='.',\n             linestyle='none', color='blue', alpha=0.5)\n\n_ = plt.plot(bl_2012, bd_2012, marker='.',\n             linestyle='none', color='red', alpha=0.5)\n\n_ = plt.xlabel('beak length (mm)')\n_ = plt.ylabel('beak depth (mm)')\n_ = plt.legend(('1975', '2012'), loc='upper left')\n\nx = np.array([10, 17])\n\nfor i in range(100):\n    plt.plot(x, bs_intercept_reps_1975[i]+ bs_slope_reps_1975[i]*x,\n             linewidth=0.5, alpha=0.2, color='blue')\n    plt.plot(x,  bs_intercept_reps_2012[i]+ bs_slope_reps_2012[i]*x,\n             linewidth=0.5, alpha=0.2, color='red')\nplt.show()\n\n![image.png](attachment:image.png)","e2c773bf":"# Chapter 1","f158d4e4":"**Your statistical thinking skills**\n* Perform EDA:\nGenerate effective plots like ECDFs, \nCompute summary statistics\n* Estimate parameters:\nBy optimization, including linear regression, \nDetermine confidence intervals\n* Formulate and test hypotheses","8965b6dd":"# Chapter 5: Finch Beaks and the need for Statistics\n","871f6e9b":"Packages to do Statistical Inferences:\n1. Scipy.stats\n1. statmodels\n1. Hacker stat with Numpy","f06adfd7":"**Bootstraping:** The use of resampled data to perform statistical inference","7e2a9a3c":"Test statistics: A single number that can be computed from observed data and from data you simulate under the null hypothesis\n\n\n**Pipeline for hypothesis testing**\n* Clearly state the null hypothesis\n* Define your test statistic\n* Generate many sets of simulated data assuming the null hypothesis is true\n* Compute the test statistic for each simulated data set\n* The p-value is the fraction of your simulated data sets for which the test statistic is at least as extreme as for the real data\n\n"}}