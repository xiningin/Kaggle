{"cell_type":{"2a224424":"code","1f72e805":"code","d40863e4":"code","68936c61":"code","2a0f63a6":"code","d255d196":"code","aac8ac58":"code","5098d7ea":"code","c2500cc8":"code","209608dd":"code","6174487d":"code","4afc1e21":"code","7d846f6e":"code","3e740bf8":"code","9a3d68bc":"markdown","3f47801f":"markdown","043972ab":"markdown","9e509845":"markdown","8b434e35":"markdown","e769eb0b":"markdown","ae50c3f1":"markdown","2454dad8":"markdown","507ac14c":"markdown","4d2fe646":"markdown"},"source":{"2a224424":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#Library for mathematical computation\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport scipy.stats as stats #Statistics\n\n#Library for Data Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\n\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f72e805":"df=pd.read_csv(\"\/kaggle\/input\/spotify-top-200-charts-20202021\/spotify_dataset.csv\")\ndf","d40863e4":"\ndf['Genre']=df['Genre'].astype(str)\ndf[\"Genre\"][df[\"Genre\"] == \"[]\"] = np.nan\ndf[\"Genre\"] = df[\"Genre\"].fillna(0)\n#here we get rid of useless symbols to be able to separate genres\ndf.Genre=df.Genre.str.replace(\"[\", \"\")\ndf.Genre=df.Genre.str.replace(\"]\", \"\")\ndf.Genre=df.Genre.str.replace(\"'\", \"\")\n#now we devide genre strings by comma\ndf[\"Genre\"] = df[\"Genre\"].str.split(\",\")\n#next command separates rows based on genres, so for each song that is marked with several genres, \n#now we'll have multiple rows with one genre for each row\ndf=df.explode('Genre')\n\ndf","68936c61":"#now we have everything to plot a pie plot with most popular genres\n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfig = plt.figure(figsize = (10, 10))\nax = fig.subplots()\ndf.Genre.value_counts()[:25].plot(ax=ax, kind = \"pie\")\nax.set_ylabel(\"\")\nax.set_title(\"Top 25 most popular genres\")\nplt.show()","2a0f63a6":"df=pd.read_csv(\"\/kaggle\/input\/spotify-top-200-charts-20202021\/spotify_dataset.csv\")","d255d196":"#here we sort dataframe based on \"Number of Times Charted\", \n#but also group by artist and sum numbers of times charted for each of the artist\n\ndf_numbercharted=df.groupby('Artist').sum().sort_values('Number of Times Charted', ascending=False)\ndf_numbercharted=df_numbercharted.reset_index()\ndf_numbercharted","aac8ac58":"\n#here we plot 10 most popular artist based on their appearence in charts\nplt.figure(figsize=(20,8))\nplt.title(\"Top 10 Artists with Highest Numbers of Times Charted\")\nsns.barplot(x='Artist',y='Number of Times Charted',data=df_numbercharted.head(10))","5098d7ea":"#clean data\n\ndf=df.fillna('')\ndf=df.replace(' ', '')\ndf['Streams']=df['Streams'].str.replace(',','')\n\n#convert all numeric columns to numeric\n\ndf[['Highest Charting Position', 'Number of Times Charted', 'Streams', 'Popularity', 'Danceability', 'Energy', 'Loudness', 'Speechiness',\n       'Acousticness', 'Liveness', 'Tempo', 'Duration (ms)', 'Valence',\n       ]] = df[['Highest Charting Position', 'Number of Times Charted', 'Streams','Popularity', 'Danceability', 'Energy', 'Loudness', 'Speechiness',\n       'Acousticness', 'Liveness', 'Tempo', 'Duration (ms)', 'Valence',\n       ]].apply(pd.to_numeric)","c2500cc8":"#let's also separate year from the column \"Release date\" to be able to analyze its correlations\n\ndf['Release Year'] = pd.DatetimeIndex(df['Release Date']).year","209608dd":"%matplotlib inline\n\n#here's the correlation plot\nf,ax = plt.subplots(figsize=(14,10))\nsns.heatmap(df.corr(),annot = True,fmt = \".1f\",ax = ax)\nplt.show()","6174487d":"plt.figure(figsize=(15, 5))\nplt.title('Danceability over the course of the century')\nsns.lineplot(x=\"Release Year\", y=\"Danceability\", data=df)","4afc1e21":"dfyear=df.groupby('Release Year').sum().sort_values('Number of Times Charted', ascending=False)\ndfyear=dfyear.reset_index()","7d846f6e":"\n#Plotting Barchart about artist and their followers\nplt.figure(figsize=(20,8))\nplt.title(\"Years with Highest Numbers of Times Charted\")\nsns.barplot(x='Release Year',y='Number of Times Charted',data=dfyear.head(10))","3e740bf8":"%matplotlib inline\nplt.figure(figsize=(14,7))\nplt.rcParams['figure.facecolor'] = 'white' \nartistsbypop = df.groupby(\"Artist\")['Popularity'].sum().sort_values(ascending=False)[:15]\naxis = sns.barplot(artistsbypop.index, artistsbypop,palette='cubehelix')\naxis.set_title('Top 15 Artists by Popularity')\naxis.set_ylabel('Popularity')\naxis.set_xlabel('Artists')\nplt.xticks(rotation = 65)\nplt.show()","9a3d68bc":"Unfortunately, no high correlations with release year is noticeable, but we can still have a look at \nhow denceability was changing over the years","3f47801f":"# Let's first analyze genres and find most popular ones","043972ab":"Among interesting observations is that acousticness and energy and loudness have negative high correlation, \nwhich is logical, because acoustic music is often quite and requires careful listening","9e509845":"Another thing I would like to check is how 'Number of Times Charted' correlates with years. Maybe some years were included in this data and some not. We have information for other years, however, most probably it is not full and representative","8b434e35":"# Spotify Data Visualisation","e769eb0b":"We see that most data comes from 2020, and sice 2021 is ongoing we have a bit less data for this year","ae50c3f1":"We see that this chart has differeent artists, however, some of them intersect, like Justin Bieber, The Weekend etc. \nHope this helps someone! Thank you!","2454dad8":"Now let's analyze column 'Number of Times Charted' and find out, which artists are charted most oftenly\nTo do that we need to go back to our initial dataset, because in the previous part we devided rows based on genres\nSo we upload the intital dataset again","507ac14c":"Our next step is to look at the correlations between the columns, and check, if we can find anything interesting","4d2fe646":"Finally, I decided to have a look at popularity. \nI look at popularity by artist to be able to compare the results with the previous graph based on times charted"}}