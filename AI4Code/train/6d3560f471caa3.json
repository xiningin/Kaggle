{"cell_type":{"6988ce82":"code","b7c84bd7":"code","0a957be6":"code","43bfe22b":"code","91491be0":"code","4cab195f":"code","3607c73d":"code","acb5ad87":"code","8af0cd75":"code","a1f7ba68":"code","5fcb6c06":"code","8f85849a":"code","f4f6b6f3":"code","012a3438":"code","9c513e94":"code","2b989058":"code","be7b1dbe":"code","25d1aa8c":"markdown","340e9637":"markdown"},"source":{"6988ce82":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7c84bd7":"import numpy as np \nimport pandas as pd\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected = True)\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.metrics import mean_absolute_error\n\nfrom sklearn.model_selection import KFold, GroupKFold\n\nfrom sklearn.ensemble import VotingRegressor\n\nimport optuna\n\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\n\npd.set_option('display.max_columns', None)\n#########################################################\ntrain = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\nss = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","0a957be6":"train.head()","43bfe22b":"print(\"Train shape\",train.shape)\nprint(\"Test shape\",test.shape)","91491be0":"# Missing values\nprint('Missing values in TRAIN dataset')\nfor i in train.iloc[:, 0:-1].columns.tolist():\n    print(f'{i}: {train[i].isna().sum()}')\nprint('')\nprint('Missing values in TEST dataset')\nfor i in train.iloc[:, 0:-1].columns.tolist():\n    print(f'{i}: {train[i].isna().sum()}')\nprint('')","4cab195f":"print(f'Number of breaths in train dataset: {train[\"breath_id\"].nunique()}')\nprint(f'Number of breaths in test dataset: {test[\"breath_id\"].nunique()}')\nprint(f'The number of observations for each breath: {train[\"breath_id\"].value_counts().reset_index()[\"breath_id\"].unique()[0]}')","3607c73d":"fig = plt.figure(figsize = (13, 8))\nrc = ['R', 'C']\nfor i in rc:\n    plt.subplot(2, 2, rc.index(i)+1)\n    plt.title(i, y = 1.2, size = 25, fontname = 'monospace', color = 'black')\n    a = sns.countplot(x = i, data = train, palette = 'mako')\n    plt.ylabel('')\n    plt.xlabel('')\n    plt.xticks(fontname = 'monospace', size = 12)\n    plt.yticks([])\n    for j in ['right', 'top']:\n        a.spines[j].set_visible(False)\n    for j in ['bottom', 'left']:    \n        a.spines[j].set_linewidth(1.2)\n        \n    summ = 0\n    for p in a.patches:\n        summ += p.get_height()\n\n    for p in a.patches:\n        height = p.get_height()\n        a.annotate(f'{height}', (p.get_x() + p.get_width() \/ 2, p.get_height()), \n                   ha = 'center', va = 'center', \n                   size = 13,\n                   xytext = (1, -15), \n                   textcoords = 'offset points',\n                   fontname = 'monospace', color = 'white')\n        a.annotate(f'{round((height\/summ) * 100, 1)}%', (p.get_x() + p.get_width() \/ 2, p.get_height()), \n                   ha = 'center', va = 'center', \n                   size = 15,\n                   xytext = (1, 13), \n                   textcoords = 'offset points',\n                   fontname = 'monospace', color = 'black')   \n        \nfor i in rc:\n    plt.subplot(2, 2, rc.index(i)+3)\n    a = sns.countplot(x = i, data = test, palette =\"magma\")\n    plt.ylabel('')\n    plt.xlabel('')\n    plt.xticks(fontname = 'monospace', size = 12)\n    plt.yticks([])\n    for j in ['right', 'top']:\n        a.spines[j].set_visible(False)\n    for j in ['bottom', 'left']:    \n        a.spines[j].set_linewidth(1.2)\n        \n    summ = 0\n    for p in a.patches:\n        summ += p.get_height()\n\n    for p in a.patches:\n        height = p.get_height()\n        a.annotate(f'{height}', (p.get_x() + p.get_width() \/ 2, p.get_height()), \n                   ha = 'center', va = 'center', \n                   size = 13,\n                   xytext = (1, -15), \n                   textcoords = 'offset points',\n                   fontname = 'monospace', color = 'white')\n        a.annotate(f'{round((height\/summ) * 100, 1)}%', (p.get_x() + p.get_width() \/ 2, p.get_height()), \n                   ha = 'center', va = 'center', \n                   size = 15,\n                   xytext = (1, 13), \n                   textcoords = 'offset points',\n                   fontname = 'monospace', color = 'black')\n        \nplt.figtext(0.15, 1.1, 'Distribution of lung attributes (R\/C)', fontname = 'monospace', size = 30, color = 'black')\nplt.figtext(1.03, 0.15, 'TEST', fontname = 'monospace', size = 25, color = 'black', rotation = 90)\nplt.figtext(1.03, 0.7, 'TRAIN', fontname = 'monospace', size = 25, color = 'black', rotation = 90)\n        \nfig.tight_layout(h_pad = 10)\nplt.show()","acb5ad87":"fig = plt.figure(figsize = (15, 15))\nr, c, plot = [5, 20, 50], [10, 20, 50], 1\nfor i in range(3):\n    rr = r[i]\n    for k in range(3):\n        cc = c[k]\n        br_id = train.query('R == @rr & C == @cc').iloc[0,1]\n        plt.subplot(3, 3, plot)\n        plt.title(f'breath id = {br_id} | R = {rr} | C = {cc}', fontname = 'monospace', size = 14)\n        a = sns.lineplot(data = train.query(\"breath_id == @br_id\"), x = \"time_step\", y = \"u_in\", color = '#4b585c', linewidth = 2)\n        sns.lineplot(data = train.query(\"breath_id == @br_id\"), x = \"time_step\", y = \"u_out\", color = '#dbae58', linewidth = 2)\n        sns.lineplot(data = train.query(\"breath_id == @br_id\"), x = \"time_step\", y = \"pressure\", color = '#488a99', linewidth = 2)\n        plt.ylabel('')\n        plt.xlabel('time stemp', size = 14, fontname = 'monospace', labelpad = 10)\n        plt.xticks(size = 12, fontname = 'monospace')\n        plt.yticks(size = 12, fontname = 'monospace')\n\n        for j in ['right', 'top']:\n            a.spines[j].set_visible(False)\n        for j in ['bottom', 'left']:    \n            a.spines[j].set_linewidth(1.2)\n            \n        plot += 1\n\nplt.figtext(0.01, 1.08, 'Observations on breaths with all possible lung attributes', fontname = 'monospace', size = 30, color = 'black')\nplt.figtext(0.35, 1.03, 'u_in', fontname = 'monospace', size = 27, color = '#4b585c')\nplt.figtext(0.45, 1.03, 'u_out', fontname = 'monospace', size = 27, color = '#dbae58')\nplt.figtext(0.55, 1.03, 'pressure', fontname = 'monospace', size = 27, color = '#488a99')\nfig.tight_layout(h_pad = 3)\nplt.show()","8af0cd75":"fig = plt.figure(figsize = (15, 12))\nplot = 1\nfor i in range(3):\n    rr = r[i]\n    for k in range(3):\n        cc = c[k]\n        plt.subplot(3, 3, plot)\n        plt.title(f'R = {rr} | C = {cc}', fontname = 'monospace', size = 15, color = 'black')\n        a = sns.kdeplot(train.query('time_step < 0.000001 & u_in < 0.000001 & R == @rr & C == @cc')['pressure'], color = '#488a99', shade = True, alpha = 1, linewidth = 1.5, edgecolor = 'black')\n        plt.ylabel('')\n        plt.xlabel('')\n        plt.xticks(size = 12, fontname = 'monospace')\n        plt.yticks([])\n\n        for j in ['right', 'top']:\n            a.spines[j].set_visible(False)\n        for j in ['bottom', 'left']:    \n            a.spines[j].set_linewidth(1.2)\n            \n        plot += 1\n\ny = 1.27\nfor i in range(3):\n    rr = r[i]\n    y -= 0.333\n    x = -0.315\n    for k in range(3):\n        cc = c[k]\n        x += 0.333\n        plt.figtext(x, y, f'Min: {round(train.query(\"time_step < 0.000001 & u_in < 0.000001 & R == @rr & C == @cc\")[\"pressure\"].min(),2)}', fontname = 'monospace', color = 'black')\n        plt.figtext(x, y-0.02, f'Max: {round(train.query(\"time_step < 0.000001 & u_in < 0.000001 & R == @rr & C == @cc\")[\"pressure\"].max(),2)}', fontname = 'monospace')\n        plt.figtext(x, y-0.04, f'Mean: {round(train.query(\"time_step < 0.000001 & u_in < 0.000001 & R == @rr & C == @cc\")[\"pressure\"].mean(),2)}', fontname = 'monospace', color = 'black')\n        plt.figtext(x, y-0.06, f'Median: {round(train.query(\"time_step < 0.000001 & u_in < 0.000001 & R == @rr & C == @cc\")[\"pressure\"].median(),2)}', fontname = 'monospace', color = 'black')\n        \nplt.figtext(0.01, 1.08, 'Distribution of pressure depending on lung attributes', fontname = 'monospace', size = 30, color = 'black')\n        \nfig.tight_layout(h_pad = 3)\nplt.show()","a1f7ba68":"from sklearn.preprocessing import RobustScaler, normalize\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.callbacks import LearningRateScheduler\nfrom tensorflow.keras.optimizers.schedules import ExponentialDecay","5fcb6c06":"def features(df):\n    df['area'] = df['time_step'] * df['u_in']\n    df['area'] = df.groupby('breath_id')['area'].cumsum()\n    \n    df['u_in_cumsum'] = (df['u_in']).groupby(df['breath_id']).cumsum()\n    \n    df['u_in_lag2'] = df['u_in'].shift(2).fillna(0)\n    df['u_in_lag4'] = df['u_in'].shift(4).fillna(0)\n    \n    df['R'] = df['R'].astype(str)\n    df['C'] = df['C'].astype(str)\n    df = pd.get_dummies(df)\n    \n    df['ewm_u_in_mean'] = df.groupby('breath_id')['u_in'].ewm(halflife=10).mean().reset_index(level=0,drop=True)\n    df['ewm_u_in_std'] = df.groupby('breath_id')['u_in'].ewm(halflife=10).std().reset_index(level=0,drop=True)\n    df['ewm_u_in_corr'] = df.groupby('breath_id')['u_in'].ewm(halflife=10).corr().reset_index(level=0,drop=True)\n    \n    df['rolling_10_mean'] = df.groupby('breath_id')['u_in'].rolling(window=10, min_periods=1).mean().reset_index(level=0,drop=True)\n    df['rolling_10_max'] = df.groupby('breath_id')['u_in'].rolling(window=10, min_periods=1).max().reset_index(level=0,drop=True)\n    df['rolling_10_std'] = df.groupby('breath_id')['u_in'].rolling(window=10, min_periods=1).std().reset_index(level=0,drop=True)\n    \n    df['expand_mean'] = df.groupby('breath_id')['u_in'].expanding(2).mean().reset_index(level=0,drop=True)\n    df['expand_max'] = df.groupby('breath_id')['u_in'].expanding(2).max().reset_index(level=0,drop=True)\n    df['expand_std'] = df.groupby('breath_id')['u_in'].expanding(2).std().reset_index(level=0,drop=True)\n    \n    return df\n\ntrain = features(train)\ntest = features(test)","8f85849a":"train = train.fillna(0)\ntest = test.fillna(0)","f4f6b6f3":"targets = train[['pressure']].to_numpy().reshape(-1, 80)\ntrain.drop(['pressure', 'id', 'breath_id'], axis = 1, inplace = True)\ntest = test.drop(['id', 'breath_id'], axis = 1)","012a3438":"RS = RobustScaler()\ntrain = RS.fit_transform(train)\ntest = RS.transform(test)","9c513e94":"train = train.reshape(-1, 80, train.shape[-1])\ntest = test.reshape(-1, 80, train.shape[-1])","2b989058":"EPOCH = 200\nBATCH_SIZE = 1024\n\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect()\ntpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\nwith tpu_strategy.scope():\n    kf = KFold(n_splits = 5, shuffle = True, random_state = 228)\n    test_preds = []\n    for fold, (train_idx, test_idx) in enumerate(kf.split(train, targets)):\n        print('-'*15, '>', f'Fold {fold+1}', '<', '-'*15)\n        X_train, X_valid = train[train_idx], train[test_idx]\n        y_train, y_valid = targets[train_idx], targets[test_idx]\n        model = keras.models.Sequential([\n            keras.layers.Input(shape = train.shape[-2:]),\n            keras.layers.Bidirectional(keras.layers.LSTM(400, return_sequences = True)),\n            keras.layers.Bidirectional(keras.layers.LSTM(300, return_sequences = True)),\n            keras.layers.Bidirectional(keras.layers.LSTM(200, return_sequences = True)),\n            keras.layers.Bidirectional(keras.layers.LSTM(100, return_sequences = True)),\n            keras.layers.Dense(50, activation = 'selu'),\n            keras.layers.Dense(1),\n        ])\n        model.compile(optimizer = \"adam\", loss = \"mae\")\n\n        scheduler = ExponentialDecay(1e-3, 400*((len(train)*0.8)\/BATCH_SIZE), 1e-5)\n        lr = LearningRateScheduler(scheduler, verbose = 1)\n\n        model.fit(X_train, y_train, validation_data = (X_valid, y_valid), epochs = EPOCH, batch_size = BATCH_SIZE, callbacks = [lr])\n\n        test_preds.append(model.predict(test).squeeze().reshape(-1, 1).squeeze())","be7b1dbe":"ss['pressure'] = sum(test_preds) \/ 5\nss.to_csv('lstm.csv', index = False)","25d1aa8c":"# EDA","340e9637":"# Import Libraries"}}