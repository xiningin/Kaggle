{"cell_type":{"98b61b4c":"code","92ce3ebf":"code","51d3ae36":"code","30b9be3e":"code","4b4f4f1f":"code","b0f54019":"code","74b95152":"code","00f504b8":"code","72e77efb":"code","74094ab6":"code","1296d396":"code","c90e2664":"code","67fb7182":"code","498f2006":"code","1ccdd769":"code","547898c2":"code","996a494b":"code","d67d5a58":"code","9f7a7b98":"code","d63a5605":"code","fb85714f":"code","5ac8241d":"code","eaa4eb0d":"code","46133791":"code","d781a452":"code","31fb2366":"code","12f3f009":"code","867b8cb2":"code","e04cbf32":"code","9d0f1994":"code","a8332368":"code","a5e1edb4":"code","fa0a8f7e":"code","497e7fba":"code","153b034e":"code","5ec1ad75":"code","806e1ea6":"code","63f6dea3":"code","11a5375b":"markdown","c42e616b":"markdown","74139b99":"markdown","862574f5":"markdown","aa1ba290":"markdown","fcf152da":"markdown","0ebb189f":"markdown","ff8c6d46":"markdown","80b584dc":"markdown","7d563106":"markdown"},"source":{"98b61b4c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","92ce3ebf":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nimport plotly.express as px\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score\nfrom sklearn.metrics import f1_score, confusion_matrix, precision_recall_curve, roc_curve\nimport lightgbm as lgb\nfrom lightgbm import plot_importance\nimport xgboost as xgb\n\n\nfrom imblearn.under_sampling import TomekLinks\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.over_sampling import SMOTE\n\n\nplt.style.use('seaborn')\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","51d3ae36":"train_df = pd.read_csv('\/kaggle\/input\/santander-customer-satisfaction\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/santander-customer-satisfaction\/test.csv')\ntrain_df.head()","30b9be3e":"print(\"Train Data Shape : \",train_df.shape)\nprint(\"Test Data Shape : \",test_df.shape)","4b4f4f1f":"train_df.info()","b0f54019":"train_df.describe()","74b95152":"features = train_df.drop(['ID','TARGET'],axis=1)","00f504b8":"pd.DataFrame(train_df['TARGET'].value_counts())","72e77efb":"f, ax = plt.subplots(1,2,figsize=(10,4))\ntrain_df['TARGET'].value_counts().plot.pie(\n    explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True\n)\nsns.countplot('TARGET', data=train_df, ax=ax[1])\nplt.show()","74094ab6":"null_value = train_df.isnull().sum().sort_values(ascending=False)\nnull_percent = round(train_df.isnull().sum().sort_values(ascending=False)\/len(train_df)*100,2)\npd.concat([null_value, null_percent], axis=1, keys=['Null values', 'Percent'])","1296d396":"features[features.columns[:8]].corr()","c90e2664":"sns.heatmap(features[features.columns[:8]].corr(),annot=True,cmap='YlGnBu')\nfig=plt.gcf()\nfig.set_size_inches(10,8)\nplt.show()","67fb7182":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of mean values per row in the train and test set\")\nsns.distplot(train_df[features.columns].mean(axis=1),color=\"black\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features.columns].mean(axis=1),color=\"red\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","498f2006":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of std values per rows in the train and test set\")\nsns.distplot(train_df[features.columns].std(axis=1),color=\"blue\",kde=True,bins=120, label='train')\nsns.distplot(test_df[features.columns].std(axis=1),color=\"green\", kde=True,bins=120, label='test')\nplt.legend(); plt.show()","1ccdd769":"t0 = train_df[train_df['TARGET'] == 0]\nt1 = train_df[train_df['TARGET'] == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of skew values per row in the train set\")\nsns.distplot(t0[features.columns].skew(axis=1),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features.columns].skew(axis=1),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","547898c2":"train_df.describe()","996a494b":"plt.boxplot(train_df['var3'])","d67d5a58":"plt.boxplot(train_df['var38'])","9f7a7b98":"train_df['var3'].replace(-999999,2,inplace=True)\ntrain_df.describe()","d63a5605":"train_df.drop('ID',axis=1,inplace=True)\ntest_df.drop('ID',axis=1,inplace=True)","fb85714f":"x = train_df.drop('TARGET',axis=1)\ny = train_df['TARGET']","5ac8241d":"scaler = StandardScaler().fit(x)\nx_scaler = scaler.transform(x)\ntest_df_scler = scaler.transform(test_df)\nx_scaler_df = pd.DataFrame(x_scaler, columns=x.columns)","eaa4eb0d":"pca = PCA(n_components=0.95)\nx_scaler_pca = pca.fit_transform(x_scaler)\nx_scaler_pca_df = pd.DataFrame(x_scaler_pca)","46133791":"x_scaler_pca_df.head()","d781a452":"pca.explained_variance_ratio_","31fb2366":"plt.scatter(x_scaler_pca_df.loc[:, 0], x_scaler_pca_df.loc[:, 1], c=y,  cmap=\"copper_r\")\nplt.axis('off')\nplt.colorbar()\nplt.show()","12f3f009":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)","867b8cb2":"scaler_x_train, scaler_x_test, scaler_y_train, scaler_y_test = train_test_split(x_scaler, y, test_size=0.3)","e04cbf32":"smote = SMOTE()\nx_over, y_over = smote.fit_resample(scaler_x_train,scaler_y_train)\ny_over.value_counts().plot(kind='bar',title='Count_target',color=['blue','orange'])","9d0f1994":"def get_clf_eval(y_test, pred = None, pred_proba = None):\n    confusion = confusion_matrix(y_test, pred)\n    accuacy = accuracy_score(y_test, pred)\n    precision = precision_score(y_test, pred)\n    recall = recall_score(y_test, pred)\n    f1 = f1_score(y_test, pred)\n    roc_auc = roc_auc_score(y_test, pred_proba)\n    \n    print('confusion')\n    print(confusion)\n    print('Accuacy : {}'.format(np.around(accuacy,4)))\n    print('Precision: {}'.format(np.around(precision,4)))\n    print('Recall : {}'.format(np.around(recall,4)))\n    print('F1 : {}'.format(np.around(f1,4)))  \n    print('ROC_AUC : {}'.format(np.around(roc_auc,4)))","a8332368":"lg_reg = LogisticRegression()\n\nlg_reg.fit(x_over, y_over)\npred = lg_reg.predict(scaler_x_test)\npred_proba = lg_reg.predict_proba(scaler_x_test)[:,1]\nget_clf_eval(scaler_y_test, pred, pred_proba)","a5e1edb4":"scaler_x_test, scaler_x_val, scaler_y_test, scaler_y_val = train_test_split(scaler_x_test, scaler_y_test, test_size=0.5)","fa0a8f7e":"train_data = lgb.Dataset(x_over, label=y_over)\nval_data = lgb.Dataset(scaler_x_val, label=scaler_y_val)\nparams = {\n    'n_estimators': 5000,\n    'num_leaves': 20,\n    'max_depth': -1,\n    'min_data_in_leaf': 80,\n    'learning_rate': 0.001,\n    'boosting': 'gbdt',\n    'objective': 'binary',\n    'metric': 'auc',\n    'n_jobs': -1\n}","497e7fba":"model = lgb.train(params,\n                  train_data,\n                  valid_sets=val_data, \n                  valid_names=['train','valid'],\n                  early_stopping_rounds=300)","153b034e":"submission = pd.read_csv('\/kaggle\/input\/santander-customer-satisfaction\/sample_submission.csv')\nsubmission.head()","5ec1ad75":"target = model.predict(test_df_scler)","806e1ea6":"submission['TARGET'] = target","63f6dea3":"submission.to_csv('submission.csv', index=False)","11a5375b":"* LogisticRegression ","c42e616b":"# EDA\n* Target Percent\n* Check Multicollinearity\n* Check Outlier","74139b99":"=> We Can Check Multicollinearity","862574f5":"# Preprocessing\n* Processing Outlier Values","aa1ba290":"=> We cant use PCA","fcf152da":"# Submission","0ebb189f":"# Modeling\n* LogisticRegression\n* LightGBM Classification","ff8c6d46":"* LightGBM Classifier","80b584dc":"# Feature Engineering\n* Split Data to Train \/ Test \n* Train Data to Standard Scaler\n* Target Data to Oversampling by SMOTE","7d563106":"=> We Can Check Outlier"}}