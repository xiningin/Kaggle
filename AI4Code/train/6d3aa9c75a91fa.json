{"cell_type":{"e327d1e3":"code","9cce67c2":"code","8e3954fa":"code","84bb1d2b":"code","3c834969":"code","933538c2":"code","60fbd457":"markdown","1ad1df5f":"markdown","f1e55c62":"markdown","1ead671d":"markdown","a3a405af":"markdown"},"source":{"e327d1e3":"import matplotlib.pyplot as plt\nimport numpy as np\nimport tensorflow as tf\nimport h5py\n\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Input, Conv2D, MaxPool2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.applications import vgg19\nfrom tensorflow.keras.optimizers import Adam","9cce67c2":"file = h5py.File('..\/input\/food41\/food_c101_n10099_r64x64x3.h5', 'r')\n\nimages_train = file['images'][...]\ncategory_labels_train = file['category'][...]\ncategory_names_train = file['category_names'][...]\n\nfile.close()\n\nfile = h5py.File('..\/input\/food41\/food_test_c101_n1000_r64x64x3.h5', 'r')\n\nimages_test = file['images'][...]\ncategory_labels_test = file['category'][...]\ncategory_names_test = file['category_names'][...]\n\nfile.close()","8e3954fa":"def scale_images(images):\n    images = images \/ 255.0\n    return images\n\nimages_test = scale_images(images_test)\nimages_train = scale_images(images_train)\n\nimages_input_size = images_train.shape[1:] # (32, 32, 3)\nlabels_train = np.where(category_labels_train == True)[1]\nlabels_test = np.where(category_labels_test == True)[1]","84bb1d2b":"vgg_transfer = vgg19.VGG19(include_top = False, weights='imagenet', input_tensor = Input(shape=(64, 64, 3)))\n\n# Freezing only first 17 layers of the VGG19 and training last layers of the model to increase the performance\nfor layer in vgg_transfer.layers[:17]:\n    layer.trainable = False\n\ntransfer_model = Sequential([\n    vgg_transfer,\n    Flatten(),\n    Dense(2048, activation = \"relu\", kernel_initializer=\"he_normal\"),\n    Dense(2048, activation = \"relu\", kernel_initializer=\"he_normal\"),\n    Dense(len(category_names_test), activation = \"softmax\")\n])\n\nvgg_transfer.summary()","3c834969":"transfer_model.compile(optimizer = Adam(learning_rate = 0.000075), loss = \"sparse_categorical_crossentropy\", metrics = [\"accuracy\"])\n\nhistory = transfer_model.fit(images_train, labels_train, validation_split=0.2, epochs = 10)\ntransfer_model.evaluate(images_test, labels_test)","933538c2":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","60fbd457":"### Training the model","1ad1df5f":"### Loading the data","f1e55c62":"### Data preparation (scale values)","1ead671d":"### Building the VGG19 Model","a3a405af":"# VGG19 Transfer Learning with Food-101 dataset"}}