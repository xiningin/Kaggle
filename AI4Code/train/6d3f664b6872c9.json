{"cell_type":{"a607b276":"code","cdc2c290":"code","c37442fe":"code","426e420d":"code","9b2664da":"code","f8a7d552":"code","f1507a5f":"code","69af07d5":"code","61fe9b46":"code","65c9eba0":"code","5f6e1b28":"code","1e8aafe9":"code","b9f7176e":"code","46cb2162":"code","392ff312":"code","b5ef371d":"code","5f19c4d5":"code","32ef6277":"code","f23abf50":"code","753a1fc9":"code","542986f6":"code","f2019749":"code","915f4031":"code","65ace64d":"code","e9325963":"code","02cfee70":"code","cd2cf9bf":"code","8457b02a":"markdown","bf8e18bd":"markdown","b7312792":"markdown","ba51e13f":"markdown","9456f4d5":"markdown","4c7bf42a":"markdown","d8aacef1":"markdown","5a60a8b1":"markdown","b957ac61":"markdown","eac49946":"markdown","7215ee9a":"markdown"},"source":{"a607b276":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cdc2c290":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n#preview data\nprint(\"-\"*20)\n#df.info()\n# check null value\nprint(\"Null values in train data\\n\",df_train.isnull().sum())\nprint(\"Null values in test data\\n\",df_test.isnull().sum())\n","c37442fe":"f,ax=plt.subplots(1,2,figsize=(18,8))\nprint(df_train['Survived'].value_counts())\ndf_train['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived',data=df_train,ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","426e420d":"#S,sx=plt.subplots(1,2,figsize=(18,8))\nsx=sns.countplot('Sex',hue='Survived',data=df_train)\nsx.set_title('Sex vs Survived')","9b2664da":"df_train.head(10)","f8a7d552":"sns.countplot('Survived',hue='Pclass',data=df_train)","f1507a5f":"plt.figure(figsize=(12,7))\nsns.boxplot(x='Pclass',y='Age',data=df_train)","69af07d5":"def imput_age(cols):\n    age=cols[0]\n    pclass=cols[1]\n    if pd.isnull(age):\n        if pclass==1:\n            return 38\n        if pclass==2:\n            return 29\n        if pclass==3:\n            return 25\n    else:\n        return age\n\n            \n        ","61fe9b46":"df_train['Age']=df_train[['Age','Pclass']].apply(imput_age,axis=1)\ndf_train['Age'].isnull().sum()\ndf_train.drop(['Cabin'],axis=1,inplace=True)\n","65c9eba0":"df_train.head()","5f6e1b28":"sex_dummy=df_train['Sex'].str.get_dummies()\nsex_dummy.head()","1e8aafe9":"Emb_dummy=df_train['Embarked'].str.get_dummies()\nEmb_dummy.head()\ndf_train.drop(['Sex','Pclass','Name','Ticket','Embarked'],axis=1,inplace=True)","b9f7176e":"\ndf_train=pd.concat([df_train,sex_dummy,Emb_dummy],axis=1)\ndf_train.head()\n                ","46cb2162":"df_train.drop('Survived',axis=1)\n","392ff312":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test= train_test_split(df_train.drop('Survived',axis=1),df_train['Survived'],test_size=0.30,\n                                               random_state=101)","b5ef371d":"from sklearn.linear_model import LogisticRegression # for logistic regression\nfrom sklearn.ensemble import RandomForestClassifier  # for Random Forest\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import svm\nlogmodel=LogisticRegression()\nlogmodel=RandomForestClassifier(n_estimators=100)\n#logmodel= KNeighborsClassifier()\n#logmodel= svm.SVC(kernel='rbf',C=1,gamma=0.1)\nlogmodel.fit(x_train,y_train)\n","5f19c4d5":"predication=logmodel.predict(x_test)","32ef6277":"from sklearn.metrics import confusion_matrix","f23abf50":"accuracy=confusion_matrix(y_test,predication)","753a1fc9":"accuracy","542986f6":"from sklearn.metrics import accuracy_score\naccuracy=accuracy_score(y_test,predication)\naccuracy","f2019749":"predication","915f4031":"df_test1=df_test.copy()\n#df_test1.head()\n#df_test1.info()\ndf_test1['Age']=df_test1['Age'].fillna(df_test['Age'].mean())\ndf_test1['Fare']=df_test1['Fare'].fillna(df_test['Fare'].mean())\ndf_test1.drop(columns=['Name','Ticket','PassengerId','Cabin'],inplace=True)","65ace64d":"\ndf_test1=pd.get_dummies(data=df_test1,columns=['Sex','Embarked'])","e9325963":"df_test1.head()\ny_pred=logmodel.predict(df_test1)","02cfee70":"submission=pd.DataFrame({'PassengerId':df_test['PassengerId'],'Survived':y_pred})","cd2cf9bf":"submission.to_csv('submission.csv',index=False)","8457b02a":"**Data Cleaning**\nSurvied","bf8e18bd":"Class 3 has less survival rate as compared to Class 1 and Class 2","b7312792":"Load data in data frame in pandas","ba51e13f":"**Using Logistic Regression**","9456f4d5":"**Sex**","4c7bf42a":"Number of males survival is less as compared to female number. (women and children first policy)","d8aacef1":"**Feature Engineering **","5a60a8b1":"out of 891, only 342 were survived i.e. 38.4% of total of train data set","b957ac61":"Class vs Survived","eac49946":"**Building Model******","7215ee9a":"1. filling null values in Age column and Droping Cabin i.e. null values Column"}}