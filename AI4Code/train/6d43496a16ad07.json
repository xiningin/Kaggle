{"cell_type":{"c29d3404":"code","f06e06b8":"code","2b1d3430":"code","4dd3ab0d":"code","ae88b596":"code","7bb07453":"code","6ebbdcda":"code","d2c8ebe1":"code","11d9002a":"code","22b81e2e":"code","45f0ea8c":"code","95ad1935":"code","e2a05938":"code","f60ccf14":"code","a805b688":"code","cbec8a58":"code","50c0887c":"code","54a3c40d":"code","56f05653":"code","f1ea5a09":"code","0e5c90fc":"code","3e2d7560":"code","5f8b9cba":"code","f772e7f1":"code","e3d0dfe7":"code","c1e6a15f":"code","d25a92d1":"code","08f1b1f7":"code","dd3af2e5":"code","19945335":"code","1aa206f2":"code","b1c4db85":"code","9509e943":"code","8f531ddd":"code","cb63d4d9":"code","22315196":"code","3d9aeba5":"code","dc3b954f":"code","cb508297":"code","ec78752a":"code","f32b7346":"code","ee400d40":"code","2a749568":"code","40549dd9":"code","d65405cb":"code","83e7bbba":"code","c2a4ce0d":"code","fea2c407":"code","ed9546e0":"code","17016d80":"code","36540ab9":"code","f8051747":"code","eb0e7a54":"code","c514fdb3":"code","5f49e53b":"code","667a7d15":"code","248a21b5":"code","d494af83":"code","df1cb73d":"code","aaa70826":"code","6b908601":"code","c93745de":"code","5b0f03e8":"code","c5f75892":"code","751d25fd":"code","5047d9b8":"code","e7b86d14":"code","39a1fbf0":"code","acb95353":"code","15ff989b":"code","9e11c99d":"code","7322f557":"code","7e713651":"code","aa79db4f":"code","1a63d592":"code","e9835e27":"code","f186659c":"code","24ea75d4":"code","ee870653":"code","506563a2":"code","2875dd88":"code","67e542a5":"markdown","a288c5f8":"markdown","e93c179b":"markdown","96a9b72d":"markdown","f7ca621b":"markdown","9d9c9a43":"markdown","0d48ae5a":"markdown","7d738173":"markdown","c5ca1164":"markdown","93e6fd0f":"markdown","359e7596":"markdown","282deab8":"markdown","c99928bf":"markdown","0c0d0c24":"markdown","ed5da2e4":"markdown","975b9ba7":"markdown","f2fdcc61":"markdown","daf8a60d":"markdown","f1de73b4":"markdown","0a0d7307":"markdown","9215aaf9":"markdown","a86792f0":"markdown","ad5ac931":"markdown","a10f48a4":"markdown","b5654380":"markdown","a93224d7":"markdown","9488ce22":"markdown","cacbaffd":"markdown","cfebb1a8":"markdown","e4525e49":"markdown","3bef89e7":"markdown","9e764cae":"markdown","27d33155":"markdown","70eaece1":"markdown","6a398512":"markdown","d76fa994":"markdown","274e0dec":"markdown","2ca82dad":"markdown","797c6a8d":"markdown","b3768517":"markdown","664bb62b":"markdown","e60f5465":"markdown","068033c6":"markdown","66dc30f0":"markdown","559b4ccf":"markdown","2b405edd":"markdown","2eeeb3fa":"markdown","214fc891":"markdown","6e2b651b":"markdown","06f91147":"markdown","cd96abb9":"markdown","e703ac37":"markdown","31850aab":"markdown"},"source":{"c29d3404":"# \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438\nimport numpy as np\nimport pandas as pd \nfrom pandas import Series\nimport seaborn as sns\nimport sys\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nimport re\n# from bs4 import BeautifulSoup    \n# import requests\nimport pandas_profiling\nfrom nltk.util import ngrams\nfrom collections import Counter\nimport xgboost as xgb\n\nfrom sklearn.ensemble import BaggingRegressor, StackingRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor, ExtraTreesRegressor, RandomForestRegressor\n\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.linear_model import LinearRegression\nimport lightgbm as lgb\n# from sklearn.metrics import mean_absolute_percentage_error as mape\n\nfrom sklearn.preprocessing import (\n    LabelEncoder, \n    OneHotEncoder,\n    RobustScaler,\n    StandardScaler, \n    OrdinalEncoder, \n    Binarizer, \n    PolynomialFeatures\n    \n)\n\n# import lazypredict \n# from lazypredict.Supervised import LazyRegressor\n\nfrom sklearn.feature_selection import f_regression, mutual_info_regression\nfrom datetime import timedelta, datetime, date\n\nfrom tqdm.notebook import tqdm\nfrom catboost import CatBoostRegressor\n  \nfrom prettytable import PrettyTable\n\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_columns', None)\n\nprint('Python       :', sys.version.split('\\n')[0])\nprint('Numpy        :', np.__version__)\n\n# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\n!pip freeze > requirements.txt\n\n# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\nRANDOM_SEED = 42\nVAL_SIZE   = 0.33   # 33%\nN_FOLDS    = 5\n\n# CATBOOST\nITERATIONS = 2000\nLR         = 0.1\n\n# SUBMISSION\nVERSION = 6","f06e06b8":"# \u0444\u0430\u0439\u043b\u044b \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 \"..\/input\/\"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2b1d3430":"# \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ntrain = pd.read_csv('\/kaggle\/input\/dfcars\/df_cars_final.csv')\ntest = pd.read_csv('\/kaggle\/input\/sf-dst-car-price-prediction\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/sf-dst-car-price-prediction\/sample_submission.csv')","4dd3ab0d":"# \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0434\u0432\u0443\u043c\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u043c\u0438: \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439.\n# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435\ntrain.info(), test.info()","ae88b596":"train.columns, test.columns","7bb07453":"def col_change(df_input):\n    df_output = df_input.copy()\n    df_output = df_output.rename(\n        columns={\n            'bodyType':'body_type',\n            'engineDisplacement':'engine_displacement',\n            'enginePower':'engine_power',\n            'fuelType':'fuel_type',\n            'modelDate':'model_date', \n            'numberOfDoors': 'number_doors', \n            'priceCurrency': 'currency',\n            'productionDate': 'production_date', \n            'vehicleConfiguration':'configuration',\n            'vehicleTransmission':'transmission', \n            'parsing_unixtime': 'publish_unixtime',\n            '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b': 'car_owners',\n            '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435':'ownership',\n            '\u041f\u0422\u0421':'pts',\n            '\u041f\u0440\u0438\u0432\u043e\u0434':'drive_type',\n            '\u0420\u0443\u043b\u044c': 'wheel',\n            '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435':'condition',\n            '\u0422\u0430\u043c\u043e\u0436\u043d\u044f':'customs'\n        })\n    return df_output\n\ncols_to_drop = [] # \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","6ebbdcda":"train = col_change(train)\ntest = col_change(test)\ntrain.columns, test.columns","d2c8ebe1":"pandas_profiling.ProfileReport(train, title=\"Pandas Profiling Report\")","11d9002a":"pandas_profiling.ProfileReport(test, title=\"Pandas Profiling Report\")","22b81e2e":"to_drop = [\n    'car_url', 'image', 'currency', 'publish_unixtime', \n    'ownership'\n]\nfor col in to_drop:\n    cols_to_drop.append(col)","45f0ea8c":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\ndef drop_columns(cols):\n    for col in cols:\n        train.drop(col, axis=1, inplace=True)\n        test.drop(col, axis=1, inplace=True)\n\n# \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\ndef column_info(column):\n    print('\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0435 {}'.format(column))\n    print(f'\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a: {data[column].isnull().sum()}')\n    print('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430:', pd.DataFrame(data[column].value_counts()))\n    print(data[column].describe())\n    if data[column].dtype == 'int64' or data[column].dtype == 'float64':\n        median = data[column].median()\n        perc25 = data[column].quantile(0.25)\n        perc75 = data[column].quantile(0.75)\n        IQR = perc75 - perc25\n        print(f'25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {perc25}, 75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {perc75},IQR: {IQR} \u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{perc25 - 1.5*IQR},{perc75 + 1.5*IQR}]')\n        data[column].hist(bins = 10, label = 'IQR')\n        plt.legend()\n    print('\\n')\n\n# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\ndef outliers_iqr(ys):\n    quartile_1, quartile_3 = np.percentile(ys, [25, 75])\n    iqr = quartile_3 - quartile_1\n    lower_bound = quartile_1 - (iqr * 1.5)\n    upper_bound = quartile_3 + (iqr * 1.5)\n    return lower_bound, upper_bound\n\n# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430 \u0430\u0432\u0442\u043e \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438\ndef model_segment(x):\n    if x in model_3:\n        return 3 #  \u043f\u0440\u0435\u043c\u0438\u0443\u043c \u043a\u043b\u0430\u0441\u0441\n    elif x in model_2:\n        return 2 # \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441\n    else:\n        return 1 # \u044d\u043a\u043e\u043d\u043e\u043c \u043a\u043b\u0430\u0441\u0441\n\n# \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0432 \u0432\u0438\u0434\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\ndef mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))\n","95ad1935":"# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u043c\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ntest['pts'].fillna('\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b', inplace=True)\n\n# \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \n# pts_dict = {'\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b':1, '\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442':0}\n# train.pts = train.pts.replace(to_replace=pts_dict)\n# test.pts = test.pts.replace(to_replace=pts_dict)","e2a05938":"# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 'other'\ntest['equipment_dict'] = test['equipment_dict'].fillna(\"['other']\")\n\n# \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u0438 \u043c\u0430\u0448\u0438\u043d\u044b \u0445\u0430\u0440-\u043a\n# \u0435\u0441\u043b\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u043d\u0435 \u0441\u0442\u0440\u043e\u043a\u0430, \u0437\u043d\u0430\u0447\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u0438 \u043d\u0435\u0442\ntest['equipment_dict'] = test['equipment_dict'].apply(\n    lambda x: len(x[1:-1].split(',')) if type(x == str) else 0)\ntrain['equipment_dict'] = train['equipment_dict'].apply(\n    lambda x: len(x[1:-1].split(',')) if type(x == str) else 0)","f60ccf14":"\n# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 'complectation_dict'\n# \u0442\u0430\u043c \u0433\u0434\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f \u0441\u0442\u0430\u0432\u0438\u043c 1, \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 -  0\ntest['complectation_d'] = test['complectation_dict'].notnull()\ntest['complectation_dict'] = test['complectation_d'].map({False:0, True: 1})\n\ntest.drop('complectation_d', axis=1, inplace=True)\n\ntrain['complectation_d'] = train['complectation_dict'].notnull()\ntrain['complectation_dict'] = train['complectation_d'].map({False:0, True: 1})\n\ntrain.drop('complectation_d', axis=1, inplace=True)","a805b688":"#  Train dataset\ntrain['body_type'] = train['body_type'].apply(lambda x: str(x))\ndef bodytype(row):\n    for body_type in ['\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a', '\u0445\u044d\u0442\u0447\u0431\u0435\u043a', '\u043a\u0443\u043f\u0435-\u0445\u0430\u0440\u0434\u0442\u043e\u043f', '\u0441\u0435\u0434\u0430\u043d', '\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b', \n                      '\u0440\u043e\u0434\u0441\u0442\u0435\u0440', '\u043a\u0430\u0431\u0440\u0438\u043e\u043b\u0435\u0442', '\u043a\u043e\u043c\u043f\u0430\u043a\u0442\u0432\u044d\u043d', '\u043b\u0438\u0444\u0442\u0431\u0435\u043a', '\u043a\u0443\u043f\u0435']:\n        if row.lower().startswith(body_type):\n            return body_type\ntrain['body_type'] = train['body_type'].apply(bodytype)\ntrain['body_type'] = train['body_type'].apply(lambda x: '\u043a\u0443\u043f\u0435' if x == '\u043a\u0443\u043f\u0435-\u0445\u0430\u0440\u0434\u0442\u043e\u043f' else x)\n\n# \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043a \u0435\u0434\u0438\u043d\u043e\u043c\u0443 \u0432\u0438\u0434\u0443\ntrain.body_type = train.body_type.str.lower()\n\n#  test dataset\ntest['body_type'] = test['body_type'].apply(lambda x: str(x))\ndef bodytype(row):\n    for body_type in ['\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a', '\u0445\u044d\u0442\u0447\u0431\u0435\u043a', '\u043a\u0443\u043f\u0435-\u0445\u0430\u0440\u0434\u0442\u043e\u043f', '\u0441\u0435\u0434\u0430\u043d', '\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b', \n                      '\u0440\u043e\u0434\u0441\u0442\u0435\u0440', '\u043a\u0430\u0431\u0440\u0438\u043e\u043b\u0435\u0442', '\u043a\u043e\u043c\u043f\u0430\u043a\u0442\u0432\u044d\u043d', '\u043b\u0438\u0444\u0442\u0431\u0435\u043a', '\u043a\u0443\u043f\u0435']:\n        if row.lower().startswith(body_type):\n            return body_type\ntest['body_type'] = test['body_type'].apply(bodytype)\ntest['body_type'] = test['body_type'].apply(lambda x: '\u043a\u0443\u043f\u0435' if x == '\u043a\u0443\u043f\u0435-\u0445\u0430\u0440\u0434\u0442\u043e\u043f' else x)\ntest['body_type'] = test['body_type'].str.lower()\n\n#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \ntrain['body_type'].fillna('unknown', inplace=True)\ntest['body_type'].fillna('unknown', inplace=True)","cbec8a58":"print(f'{len(test.brand.value_counts())} \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0431\u0440\u0435\u043d\u0434\u0430 \u0432 \u0442\u0435\u0441\u0442\u0435 \u0438 {len(train.brand.value_counts())} \u0431\u0440\u0435\u043d\u0434\u0430 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435')","50c0887c":"# \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u043c\u0430\u0440\u043e\u043a, \u043a\u0430\u043a \u0432 \u0442\u0435\u0441\u0442\u0435, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u043c \u043a\u0430\u043a \"other\"\n\ncar_list = ['BMW', 'VOLKSWAGEN', 'NISSAN', 'MERCEDES', 'TOYOTA',\n            'AUDI', 'MITSUBISHI', 'SKODA', 'VOLVO', 'HONDA', 'INFINITI']\n\ntrain['brand'] = np.where(train['brand'].isin(\n    car_list), train['brand'], 'other')","54a3c40d":"# \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0446\u0432\u0435\u0442\u043e\u0432, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u043c \u043a\u0430\u043a \"other\"\n\ncolor_list = ['\u0447\u0451\u0440\u043d\u044b\u0439', '\u0431\u0435\u043b\u044b\u0439', '\u0441\u0435\u0440\u044b\u0439', '\u0441\u0435\u0440\u0435\u0431\u0440\u0438\u0441\u0442\u044b\u0439', '\u0441\u0438\u043d\u0438\u0439', '\u043a\u043e\u0440\u0438\u0447\u043d\u0435\u0432\u044b\u0439',\n        '\u043a\u0440\u0430\u0441\u043d\u044b\u0439', '\u0431\u0435\u0436\u0435\u0432\u044b\u0439']\n#  train dataset\ntrain['color'] = np.where(train['color'].isin(\n    color_list), train['color'], 'other')\n\n#  test dataset\ntest['color'] = np.where(test['color'].isin(\n    color_list), test['color'], 'other')\n\n#  \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0441\u0430\u043c\u044b\u0439 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u0446\u0432\u0435\u0442 -1, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 - 0\ntrain['pop_color'] = train.color.apply(lambda x: 1 if x in color_list else 0)\ntest['pop_color'] = test.color.apply(lambda x: 1 if x in color_list else 0)","56f05653":"train.description = train.description.apply(lambda x: x.lower())\ntest.description = test.description.apply(lambda x: x.lower())\n\n# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0441\u0430\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 \u0432 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\u0445\ntext = ' '.join(test['description'].values)\ntext_trigrams = [i for i in ngrams(text.split(' '), 5)]\ntext_trigrams\nmy_list = Counter(text_trigrams).most_common(50)\nmy_list[:20]\n\n# for test\ntest['new'] = test.description.apply(lambda x: 1 if '\u043d\u043e\u0432' in x else 0)\ntest['full'] = test.description.apply(lambda x: 1 if ('\u043f\u043e\u043b\u043d\u0430\u044f' in x) or ('\u043f\u043e\u043b\u043d\u044b\u0439' in x)  else 0)\ntest['bargain'] = test.description.apply(lambda x: 1 if '\u0442\u043e\u0440\u0433' in x else 0)\ntest['dealer'] = test.description.apply(lambda x: 1 if '\u0434\u0438\u043b\u0435\u0440' in x else 0)\ntest['exchange'] = test.description.apply(lambda x: 1 if '\u043e\u0431\u043c\u0435\u043d' in x else 0)\ntest['urgent'] = test.description.apply(lambda x: 1 if '\u0441\u0440\u043e\u0447\u043d\u043e' in x else 0)\ntest['discount'] = test.description.apply(lambda x: 1 if '\u0441\u043a\u0438\u0434\u043a\u0430' in x else 0)\ntest['extra'] = test.description.apply(lambda x: 1 if '\u043f\u043e\u0434\u0430\u0440\u043e\u043a' in x else 0)\ntest['tires'] = test.description.apply(lambda x: 1 if ('\u0448\u0438\u043d\u044b' in x) or ('\u0440\u0435\u0437\u0438\u043d\u0430' in x) else 0)\ntest['rims'] = test.description.apply(lambda x: 1 if '\u0434\u0438\u0441\u043a' in x else 0)\ntest['heating'] = test.description.apply(lambda x: 1 if '\u043f\u043e\u0434\u043e\u0433\u0440\u0435\u0432 \u0441\u0438\u0434\u0435\u043d\u0438\u0439' in x else 0)\ntest['service_incl'] = test.description.apply(lambda x: 1 if '\u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u0435' in x else 0)\ntest['central_lock'] = test.description.apply(lambda x: 1 if '\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043c\u043e\u043a' in x else 0)\ntest['power_windows'] = test.description.apply(lambda x: 1 if '\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u0441\u0442\u0435\u043a\u043b\u043e\u043f\u043e\u0434\u044a\u0435\u043c\u043d\u0438\u043a\u0438' in x else 0)\ntest['computer'] = test.description.apply(lambda x: 1 if '\u0431\u043e\u0440\u0442\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440' in x else 0)\ntest['airbag'] = test.description.apply(lambda x: 1 if '\u043f\u043e\u0434\u0443\u0448\u043a\u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438' in x else 0)\ntest['power_steering'] = test.description.apply(lambda x: 1 if '\u0443\u0441\u0438\u043b\u0438\u0442\u0435\u043b\u044c \u0440\u0443\u043b\u044f' in x else 0)\ntest['cruise_control '] = test.description.apply(lambda x: 1 if '\u043a\u0440\u0443\u0438\u0437-\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c' in x else 0)\ntest['parking_sensors'] = test.description.apply(lambda x: 1 if '\u043f\u0430\u0440\u043a\u0442\u0440\u043e\u043d\u0438\u043a' in x else 0)\ntest['child_car_seat'] = test.description.apply(lambda x: 1 if '\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0434\u0435\u0442\u0441\u043a\u0438\u0445 \u0430\u0432\u0442\u043e\u043a\u0440\u0435\u0441\u0435\u043b' in x else 0)\ntest['good'] = test.description.apply(lambda x: 1 if '\u0445\u043e\u0440\u043e\u0448' in x else 0)\ntest['perfect'] = test.description.apply(lambda x: 1 if '\u0438\u0434\u0435\u0430\u043b\u044c\u043d' in x else 0)\ntest['very_good'] = test.description.apply(lambda x: 1 if '\u043e\u0442\u043b\u0438\u0447' in x else 0)\n#  \u0434\u043b\u044f \u0442\u0440\u0435\u0439\u043d\u0430\ntrain['new'] = train.description.apply(lambda x: 1 if '\u043d\u043e\u0432' in x else 0)\ntrain['full'] = train.description.apply(lambda x: 1 if ('\u043f\u043e\u043b\u043d\u0430\u044f' in x) or ('\u043f\u043e\u043b\u043d\u044b\u0439' in x)  else 0)\ntrain['bargain'] = train.description.apply(lambda x: 1 if '\u0442\u043e\u0440\u0433' in x else 0)\ntrain['dealer'] = train.description.apply(lambda x: 1 if '\u0434\u0438\u043b\u0435\u0440' in x else 0)\ntrain['exchange'] = train.description.apply(lambda x: 1 if '\u043e\u0431\u043c\u0435\u043d' in x else 0)\ntrain['urgent'] = train.description.apply(lambda x: 1 if '\u0441\u0440\u043e\u0447\u043d\u043e' in x else 0)\ntrain['discount'] = train.description.apply(lambda x: 1 if '\u0441\u043a\u0438\u0434\u043a\u0430' in x else 0)\ntrain['extra'] = train.description.apply(lambda x: 1 if '\u043f\u043e\u0434\u0430\u0440\u043e\u043a' in x else 0)\ntrain['tires'] = train.description.apply(lambda x: 1 if ('\u0448\u0438\u043d\u044b' in x) or ('\u0440\u0435\u0437\u0438\u043d\u0430' in x) else 0)\ntrain['rims'] = train.description.apply(lambda x: 1 if '\u0434\u0438\u0441\u043a' in x else 0)\ntrain['heating'] = train.description.apply(lambda x: 1 if '\u043f\u043e\u0434\u043e\u0433\u0440\u0435\u0432 \u0441\u0438\u0434\u0435\u043d\u0438\u0439' in x else 0)\ntrain['service_incl'] = train.description.apply(lambda x: 1 if '\u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u0435' in x else 0)\ntrain['central_lock'] = train.description.apply(lambda x: 1 if '\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043c\u043e\u043a' in x else 0)\ntrain['power_windows'] = train.description.apply(lambda x: 1 if '\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u0441\u0442\u0435\u043a\u043b\u043e\u043f\u043e\u0434\u044a\u0435\u043c\u043d\u0438\u043a\u0438' in x else 0)\ntrain['computer'] = train.description.apply(lambda x: 1 if '\u0431\u043e\u0440\u0442\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440' in x else 0)\ntrain['airbag'] = train.description.apply(lambda x: 1 if '\u043f\u043e\u0434\u0443\u0448\u043a\u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438' in x else 0)\ntrain['power_steering'] = train.description.apply(lambda x: 1 if '\u0443\u0441\u0438\u043b\u0438\u0442\u0435\u043b\u044c \u0440\u0443\u043b\u044f' in x else 0)\ntrain['cruise_control '] = train.description.apply(lambda x: 1 if '\u043a\u0440\u0443\u0438\u0437-\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c' in x else 0)\ntrain['parking_sensors'] = train.description.apply(lambda x: 1 if '\u043f\u0430\u0440\u043a\u0442\u0440\u043e\u043d\u0438\u043a' in x else 0)\ntrain['child_car_seat'] = train.description.apply(lambda x: 1 if '\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0434\u0435\u0442\u0441\u043a\u0438\u0445 \u0430\u0432\u0442\u043e\u043a\u0440\u0435\u0441\u0435\u043b' in x else 0)\ntrain['good'] = train.description.apply(lambda x: 1 if '\u0445\u043e\u0440\u043e\u0448' in x else 0)\ntrain['perfect'] = train.description.apply(lambda x: 1 if '\u0438\u0434\u0435\u0430\u043b\u044c\u043d' in x else 0)\ntrain['very_good'] = train.description.apply(lambda x: 1 if '\u043e\u0442\u043b\u0438\u0447' in x else 0)\ncols_to_drop.append('description')","f1ea5a09":"# train['condition'].value_counts()","0e5c90fc":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0444\u043e\u0440\u043c\u0430\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntrain['engine_displacement'] = train['engine_displacement'].apply(lambda x: x[:3])\ntest['engine_displacement'] = test['engine_displacement'].apply(lambda x: x[:3])","3e2d7560":"# \u0441\u0440\u0435\u0434\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0435\u0441\u0442\u044c LT\nlen(test[test['engine_displacement'] == ' LT']), len(train[train['engine_displacement'] == ' LT'])","5f8b9cba":"# \u0437\u0430\u043c\u0435\u043d\u0438\u043c LT \u043d\u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e\u0435 2.0\ntest['engine_displacement'] = test['engine_displacement'].apply(lambda x: 2.0 if x == ' LT' else x)\ntrain['engine_displacement'] = train['engine_displacement'].apply(lambda x: 2.0 if x == ' LT' else x)","f772e7f1":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0444\u043e\u0440\u043c\u0430\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntest['engine_power'] = test['engine_power'].apply(lambda x: x[:3])\ntrain['engine_power'] = train['engine_power'].apply(lambda x: x[:3])","e3d0dfe7":"# \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\nfor feature in ['engine_displacement', 'engine_power']:\n        train[feature]=train[feature].astype('float').round(1)\n        test[feature]=test[feature].astype('float').round(1)","c1e6a15f":"# \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \u0442\u043e\u043f\u043b\u0438\u0432\u0430\n#  \u0441\u0430\u043c\u044b\u043c \u043f\u043e\u043f\u043e\u043b\u044f\u0440\u043d\u044b\u043c 1 \u0438 2, \u0438 3 - \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u0432\u0438\u0434\u0430\u043c\nfuel_type_dict = {'\u0431\u0435\u043d\u0437\u0438\u043d':1, '\u0434\u0438\u0437\u0435\u043b\u044c':2, '\u0433\u0438\u0431\u0440\u0438\u0434':3, '\u044d\u043b\u0435\u043a\u0442\u0440\u043e':3, '\u0433\u0430\u0437':3}\ntest['fuel_type'] = test['fuel_type'].replace(to_replace=fuel_type_dict)\ntrain['fuel_type'] = train['fuel_type'].replace(to_replace=fuel_type_dict)","d25a92d1":"to_drop = ['name', 'configuration']\nfor col in to_drop:\n    cols_to_drop.append(col)","08f1b1f7":"#  \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u043b\u0435 price_segment \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0438\u0437 super_gen\npattern1 = \"price_segment': '(.*?)'}\"\n\ntrain['price_segment']  = train['super_gen'].apply(lambda x: re.search(pattern1, x).group(1))\n# train['price_segment'].value_counts()\n\n# \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u043c\u0443 price_segment\nprice_segment_dict = {'ECONOMY':1, 'MEDIUM':2, 'PREMIUM':3}\ntrain['price_segment'] = train['price_segment'].replace(to_replace=price_segment_dict)\n\n# \u0432 \u043f\u043e\u043b\u0435 model_name \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0430\u0432\u0442\u043e, \u043a\u0430\u043a \u0432 \u0442\u0435\u0441\u0442\u0435\npattern2 = \"{'code':(.*?)', 'name\"\n\ntrain['model_name'] = train['model_info'].apply(lambda x: re.search(pattern2, x).group(1)[2:])\n# train.model_name.sample(3)\n\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u0430\u0432\u0442\u043e \u043f\u0440\u0435\u043c\u0438\u0443\u043c \u043a\u043b\u0430\u0441\u0441\u0430\nmodel_3 = train[train['price_segment']==3]['model_name'].unique()\n\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u0430\u0432\u0442\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430\nmodel_2 = train[train['price_segment']==2]['model_name'].unique()","dd3af2e5":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0437\u043d\u044b\u0435 \u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u043f\u0440\u0435\u043c\u0438\u0443\u043c \u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0430\u0445\nmodel_2 == model_3","19945335":"# \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043d\u0435\u0442 \u0432 \u0441\u043f\u0438\u0441\u043a\u0430\u0445\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u0430\u0432\u0442\u043e \u044d\u043a\u043e\u043d\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0430\nmodel_1 = train[train['price_segment']==1]['model_name'].unique()","1aa206f2":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0437\u043d\u044b\u0435 \u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u044d\u043a\u043e\u043d\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0430\u0445\nmodel_2 == model_1","b1c4db85":"# \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u043b\u0435 price_segment \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438 model_name    \n# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0442\u0435\u0441\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u0430\u0432\u0442\u043e   \ntest['price_segment'] = test.model_name.apply(model_segment)\n\nfor col in ['super_gen', 'model_info']:\n    cols_to_drop.append(col) ","9509e943":"# \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \n# transmission_dict = {'\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f':1, '\u043c\u0435\u0445\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f':2, '\u0440\u043e\u0431\u043e\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f':3, '\u0432\u0430\u0440\u0438\u0430\u0442\u043e\u0440':4}\n\n# train['transmission'] = train['transmission'].replace(to_replace = transmission_dict)\n# test['transmission'] = test['transmission'].replace(to_replace = transmission_dict)","8f531ddd":"# \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \n# vendor_dict = {'EUROPEAN':1, 'JAPANESE':2,'AMERICAN':3, 'CHINESE':4, 'RUSSIAN':5, 'KOREAN':6}\n# test.vendor = test.vendor.replace(to_replace=vendor_dict)\n# train.vendor = train.vendor.replace(to_replace=vendor_dict)","cb63d4d9":"# \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432\ntest['car_owners'] = test['car_owners'].apply(lambda x: 1 if x == '1\\xa0\u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446' else 2 if x == '2\\xa0\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430' else 3)\ntrain['car_owners'] = train['car_owners'].apply(lambda x: 1 if x == '1\\xa0\u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446' else 2 if x == '2\\xa0\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430' else 3)","22315196":"# \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \n# drive_type_dict = {'\u043f\u043e\u043b\u043d\u044b\u0439':1, '\u043f\u0435\u0440\u0435\u0434\u043d\u0438\u0439':2, '\u0437\u0430\u0434\u043d\u0438\u0439':3}\n# test.drive_type = test.drive_type.replace(to_replace=drive_type_dict)\n# train.drive_type = train.drive_type.replace(to_replace=drive_type_dict)","3d9aeba5":"# \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \n# wheel_dict = {'\u041b\u0435\u0432\u044b\u0439':1, '\u041f\u0440\u0430\u0432\u044b\u0439':0}\n# test.wheel = test.wheel.replace(to_replace=wheel_dict)\n# train.wheel = train.wheel.replace(to_replace=wheel_dict)","dc3b954f":"cols_to_drop.append('condition')\ncols_to_drop.append('customs')\ncols_to_drop.append('model_name')","cb508297":"train = train.drop_duplicates(subset=['sell_id'])\n\n# \u043a\u043e\u0434 \u0430\u0432\u0442\u043e \u043d\u0435 \u043d\u0443\u0436\u0435\u043d \u0434\u043b\u044f ML\ncols_to_drop.append('sell_id')","ec78752a":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\ntrain['car_age'] = 2021 - train['production_date']\ntest['car_age'] = 2021 - train['production_date']\n\n#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \ntrain['car_age'].fillna(train['car_age'].mean(), inplace=True)\ntest['car_age'].fillna(test['car_age'].mean(), inplace=True)","f32b7346":"# \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044f \u0446\u0435\u043d\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n\nk = round((72.1\/76.2),2) # \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u043f\u043e\u043f\u0440\u0430\u0432\u043a\u0438 \u0446\u0435\u043d\u044b, \u0442\u0430\u043a \u043a\u0430\u043a \u0442\u0435\u0441\u0442 2020 \u0433\u043e\u0434\u0430 \u0441 \u0442\u0440\u0435\u0439\u043d 2021\n\ntrain['price'] = train['price']*k","ee400d40":"# train = train.loc[train.number_doors > 0]\n# test = test.loc[test.number_doors > 0]","2a749568":"# \u041b\u0443\u0447\u0448\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441 price \u0435\u0441\u043b\u0438 \u0431\u0440\u0430\u0442\u044c mileage \u0432 \u0441\u0435\u0442\u043f\u0435\u043d\u0438 0.5\ntrain['mileage'] = train['mileage']**(0.5)\ntest['mileage'] = test['mileage']**(0.5)\n\n# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u043b\u0438\u0448\u043d\u0438\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndrop_columns(cols_to_drop)","40549dd9":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u0440\u043e\u0431\u0435\u0433 \u0437\u0430 \u0433\u043e\u0434\n\n# test['km_year'] = (test['mileage']\/(datetime.now().year-test['production_date'])).round(1)\n# train['km_year'] = (train['mileage']\/(datetime.now().year-train['production_date'])).round(1)\n# train['km_year'].replace([np.inf],42,inplace=True) ","d65405cb":"train['price'].hist(bins=77)\ntrain.price.describe()","83e7bbba":"# \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442.\ntrain['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ntest['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ntest['price'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f price, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\n# \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ndata = test.append(train, sort=False).reset_index(drop=True)\n\n\nprint('\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:', data.shape)\ndata.head(2)","c2a4ce0d":"# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0442\u0438\u043f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\ndata.nunique()","fea2c407":"# \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0432\u0441\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\n# sample, price \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u043b\u0438 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430\n\nbin_cols = ['pts', 'wheel', 'new', 'full', 'bargain', 'dealer',\n       'exchange', 'urgent', 'discount', 'extra', 'tires', 'rims', 'heating',\n       'service_incl', 'central_lock', 'power_windows', 'computer', 'airbag',\n       'power_steering', 'cruise_control ', 'parking_sensors', 'pop_color',\n       'child_car_seat', 'good','perfect','very_good']\ncat_cols = [\n    'body_type', 'brand', 'color', 'fuel_type', 'transmission', 'vendor',\n    'car_owners', 'drive_type','price_segment'\n]\nnum_cols = [\n    'engine_displacement', 'engine_power', 'equipment_dict', 'mileage', 'model_date', \n     'number_doors', 'production_date', 'car_age']\n# len(bin_cols+cat_cols+num_cols)","ed9546e0":"label_encoder = LabelEncoder()\n\nfor column in bin_cols:\n    data[column] = label_encoder.fit_transform(data[column])\n    \n# \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438    \ndata.head()","17016d80":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\nmissings = pd.DataFrame(test.isna().sum()).reset_index()\nmissings.rename(columns={'index': '\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f', 0: '\u041a\u043e\u043b-\u0432\u043e NA'}, inplace=True)\nmissings","36540ab9":"for col in num_cols:\n    plt.figure()\n    plt.title(f\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 {col}\")\n    sns.distplot(data[col], kde=False)","f8051747":"# \u043f\u0440\u043e\u043b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\n# cols_log = ['equipment_dict', 'model_date', 'production_date']\n# for i in cols_log:\n#     data[i] = np.log(data[i] + 1)\n#     plt.figure(figsize=(10,6))\n#     sns.distplot(data[i][data[i] > 0].dropna(), kde = False, rug=False)\n#     plt.show()","eb0e7a54":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439\nplt.figure(figsize=(8, 5))\nsns.heatmap(data[num_cols].corr().abs(), vmin=0, vmax=1, annot=True, fmt=\".2f\")","c514fdb3":"# \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nimp_num = pd.Series(f_regression(data[num_cols], data[\"price\"])[0], index=num_cols)\nimp_num.sort_values(inplace=True, ascending=False)\nimp_num.plot(kind=\"bar\")\nplt.title('\u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432')","5f49e53b":"plt.figure(figsize=(8, 5))\ng1 = sns.boxplot(y=np.log(train.price), x='number_doors', \n                  data=train, color='darkgreen')\ng1.set_title(\"price of doors number\", fontsize=20)\n\ng1.set_ylabel(\"log_price\", fontsize=15)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\nplt.show()","667a7d15":"train[['number_doors', 'price']].corr(method='spearman')","248a21b5":"# data.drop('model_date', axis=1, inplace=True)\n# data.drop('engine_displacement', axis=1, inplace=True)","d494af83":"for col in cat_cols:\n    plt.figure(figsize=(8, 4))\n    sns.countplot(data[col])","df1cb73d":"#  \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nfor column in cat_cols:\n    data[column] = data[column].astype('category').cat.codes","aaa70826":"# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nimp_cat = pd.Series(mutual_info_regression(pd.concat([data[cat_cols]], axis=1),\n                                        data['price'], discrete_features =True),\n                    index = pd.concat([data[cat_cols]], axis=1).columns)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')\nplt.title('\u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432')","6b908601":"# \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439\n\ncorr = round(data[cat_cols].corr(method='spearman'), 1)\ncorr.style.background_gradient(cmap='coolwarm').set_precision(3)","c93745de":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfor col in bin_cols:\n    plt.figure(figsize=(8, 4))\n    sns.countplot(data[col])\n    plt.title(f\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 {col}\")","5b0f03e8":"# \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nimp_bin = Series(mutual_info_regression(data[bin_cols], data['price'],\n                                     discrete_features =True), index = bin_cols)\nimp_bin.sort_values(inplace = True)\nimp_bin.plot(kind = 'barh')\nplt.title('\u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432')","c5f75892":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\ndata.head(5)","751d25fd":"# for cols in ['equipment_dict', 'production_date', 'mileage']:\n#     data[cols]=data[cols].round(1)","5047d9b8":"# \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0441\u043d\u043e\u0432\u0430 \u043d\u0430 train \u0438 test, \u0442.\u043a. \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443\u0436\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b\ntrain_data = data[data['sample'] == 1].drop(['sample'], axis=1)\ntest_data = data[data['sample'] == 0].drop(['sample'], axis=1)\n\n\n\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nX = train_data.drop(['price'], axis=1)\ny = train_data['price']\n\n\n# standard scaler\n\n# X = StandardScaler().fit_transform(X)\n\n\n# \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)\n\n# \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u043c \u043d\u0430 \u043d\u0435\u0439\ny_train_log = np.log(y_train)","e7b86d14":"X_sub = data.query('sample == 0').drop(['sample'], axis=1)","39a1fbf0":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\ndef print_learn_report(start, y_test, y_pred):\n    print('\\n\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f - ', datetime.now() - start)\n    print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE:{(mape(y_test, y_pred))*100:0.2f}%\")","acb95353":"start = datetime.now()\n\n# \u043e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nmodel_LR = LinearRegression().fit(X_train, y_train_log)\n# \u0434\u0435\u043b\u0430\u0435\u043c \"\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043e\u0435\" \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435\ny_pred_log = model_LR.predict(X_test)\n# \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0446\u0435\u043d\u0443 \u043a \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0443: \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0438\u0440\u0443\u0435\u043c\ny_pred = np.exp(y_pred_log)\n\nprint_learn_report(start, y_test, y_pred)","15ff989b":"start = datetime.now()\n# model_RF =  RandomForestRegressor()\n# model_RF.fit(X_train, np.log(y_train))\n# y_pred = np.exp(model_RF.predict(X_test))\n# print_learn_report(start, y_test, y_pred)\n\nrandom_grid = {'n_estimators': [int(x) for x in np.linspace(start = 100, stop = 400, num = 4)],\n               'max_features': ['auto', 'sqrt'],\n               'max_depth': [int(x) for x in np.linspace(5, 15, num = 6)] + [None],\n               'min_samples_split': [2, 5, 10],\n               'min_samples_leaf': [1, 2, 4],\n               'bootstrap': [True, False]}\n\n# rfr = RandomForestRegressor(random_state = RANDOM_SEED)\n# rf_random = RandomizedSearchCV(estimator = rfr, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=10, random_state=RANDOM_SEED, n_jobs = -1)\n# rf_random.fit(X_train, np.log(y_train))\n# rf_random.best_params_\n\n# best_params_: \n# {'n_estimators': 200,\n# 'min_samples_split': 5,\n# 'min_samples_leaf': 1,\n# 'max_features': 'auto',\n# 'max_depth': 15,\n# 'bootstrap': True}\n\n# best_rfr = rf_random.best_estimator_\nbest_rfr = RandomForestRegressor(random_state=RANDOM_SEED\n                      , n_estimators=200\n                      , min_samples_split=5\n                      , min_samples_leaf=1\n                      , max_features='auto'\n                      , max_depth=15\n                      , bootstrap=True)\n\nbest_rfr.fit(X_train, np.log(y_train))\n\npredict_rfr = np.exp(best_rfr.predict(X_test))\nprint_learn_report(start, y_test, predict_rfr)","9e11c99d":"start = datetime.now()\n\n# for e,i in enumerate([5, 50, 250, 500, 750, 2000, 3000, 4000, 15000, 30000]):\n#     print(i)\n#     regr_uquipment = lgb.LGBMRegressor(n_estimators=i)\n#     regr_uquipment.fit(X_train,y_train_log)\n#     y_pred = np.exp(regr_uquipment.predict(X_test))\n#     print_learn_report(start, y_test, y_pred)\n    \nmodel_LGBM = lgb.LGBMRegressor(n_estimators=2000)\nmodel_LGBM.fit(X_train, np.log(y_train))\n\ny_pred = np.exp(model_LGBM.predict(X_test))\nprint_learn_report(start, y_test, y_pred)","7322f557":"start = datetime.now()\n\nmodel_XGBR = xgb.XGBRegressor(objective='reg:squarederror', colsample_bytree=0.5,\n                          learning_rate=0.05, max_depth=12, alpha=1,\n                          n_estimators=1000)\nmodel_XGBR.fit(X_train, np.log(y_train))\n\ny_pred = np.exp(model_XGBR.predict(X_test))\nprint_learn_report(start, y_test, y_pred)","7e713651":"start = datetime.now()\nmodel_CBR = CatBoostRegressor(iterations = ITERATIONS,\n                          learning_rate = LR,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE']\n                         )\nmodel_CBR.fit(X_train, y_train_log,\n#          cat_features=cat_features_ids,\n         eval_set=(X_test, np.log(y_test)),\n         verbose_eval=100,\n         use_best_model=True,\n         plot=True\n         )\ny_pred = np.exp(model_CBR.predict(X_test)) \nprint_learn_report(start, y_test, y_pred)","aa79db4f":"model_CBR.save_model('catboost_model_opt.model_CBR')","1a63d592":"start = datetime.now()\n# \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0435\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 \u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f\u043c\u0438\nmodel = CatBoostRegressor(iterations=50,\n                          loss_function='MAPE',\n                          metric_period=10)\n# \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\ngrid = {\n    'learning_rate': [0.1, 0.13, 0.14, 0.15],\n    'depth': [10, 11, 12],\n    'l2_leaf_reg': [7, 7.5, 8],\n    'random_strength': [0.2, 0.3, 0.4]\n}\n\n# grid_search_result = model.grid_search(\n#     grid, X=X_train, y=np.log(y_train), plot=False, verbose=False, cv=3)\n\n# grid_search_result['params']\n\n# \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\noptimal_parameters = {\n    'depth': 12,\n    'l2_leaf_reg': 8,\n    'random_strength': 0.2,\n    'learning_rate': 0.15\n}\n\nmodel_opt = CatBoostRegressor().set_params(**optimal_parameters)\nmodel_opt.fit(X_train, np.log(y_train), verbose=False)\n\ny_pred = np.exp(model_opt.predict(X_test))\n\nprint_learn_report(start, y_test, y_pred)","e9835e27":"start = datetime.now()\n\nbagg_rfr = BaggingRegressor(best_rfr, n_estimators=3, n_jobs=1, random_state=RANDOM_SEED)\nbagg_rfr.fit(X_train, np.log(y_train))\npredict_bagg_rfr = np.exp(bagg_rfr.predict(X_test))\nprint_learn_report(start, y_test, predict_bagg_rfr)","f186659c":"start = datetime.now()\n\nbagg_LGBM = BaggingRegressor(model_LGBM, n_estimators=3, n_jobs=1, random_state=RANDOM_SEED)\nbagg_LGBM.fit(X_train, np.log(y_train))\npredict_bagg_rfr = np.exp(bagg_LGBM.predict(X_test))\nprint_learn_report(start, y_test, predict_bagg_rfr)","24ea75d4":"start = datetime.now()\n\nbagg_XGB = BaggingRegressor(model_XGBR, n_estimators=3, n_jobs=1, random_state=RANDOM_SEED)\nbagg_XGB.fit(X_train, np.log(y_train))\npredict_bagg_xgb = np.exp(bagg_XGB.predict(X_test))\nprint_learn_report(start, y_test, predict_bagg_xgb)","ee870653":"start = datetime.now()\n\nestimators=[('lgbm', lgb.LGBMRegressor(n_estimators=2000\n                                        ,random_state=RANDOM_SEED))\n            ,('xgb', xgb.XGBRegressor(objective='reg:squarederror'\n                                      ,colsample_bytree=0.5\n                                      ,learning_rate=0.05\n                                      ,max_depth=12\n                                      ,alpha=1\n                                      ,n_estimators=1000))]\n\nst_ensemble = StackingRegressor(estimators=estimators\n                                ,final_estimator = CatBoostRegressor(iterations = 2000\n                                                                     ,random_seed = RANDOM_SEED\n                                                                     ,eval_metric='MAPE'\n                                                                     ,custom_metric=['R2', 'MAE']\n                                                                     ,silent=True\n                                                                     ,learning_rate=0.15\n                                                                     ,depth=12\n                                                                     ,l2_leaf_reg=8\n                                                                     ,random_strength=0.2))\n\n    \nst_ensemble.fit(X_train, np.log(y_train))\n\npredict_ensemble = np.exp(st_ensemble.predict(X_test))\nprint_learn_report(start, y_test, predict_ensemble)","506563a2":"predict_submission = np.exp(model_CBR.predict(X_sub))\npredict_submission","2875dd88":"sample_submission['price'] = predict_submission\nsample_submission.to_csv(f'submission_v{VERSION}.csv', index=False)\nsample_submission.head(10)","67e542a5":"## \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","a288c5f8":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'super_gen'","e93c179b":"## LightGBM","96a9b72d":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'engine_displacement'\n\n\u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 56, \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - \u043e\u0442\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f LTR, \u0441\u0430\u043c\u043e\u0435 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: 2.0 LTR\n","f7ca621b":"\u041f\u043e \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442\u0443 \u0432\u0438\u0434\u043d\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0446\u0435\u043d\u044b \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0432\u0435\u0440\u0435\u0439, \u0445\u043e\u0442\u044f \u043e\u043d\u0438 \u0438 \u0441\u043b\u0430\u0431\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c.\n\u0423\u0434\u0430\u043b\u0438\u043c model_date \u0438 engine_displacement  \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430.","9d9c9a43":"![cars.jpg](attachment:00d170ea-783e-4525-b72e-bff2b0f9b540.jpg)\n","0d48ae5a":"drive_type \u0438 body_type \u0443\u043c\u0435\u0440\u0435\u043d\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439. \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439\n","7d738173":"**\u0426\u0435\u043b\u044c:** \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u043b\u0443\u0447\u0448\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0446\u0435\u043d \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u043d\u0430 auto.ru\n\n**\u0417\u0430\u0434\u0430\u0447\u0438:**\n\n- \u0421\u043e\u0431\u0440\u0430\u0442\u044c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\/\u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u0430\u043d\u043d\u044b\u0445\n- EDA \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\n- \u041f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0430\u0434 \u043e\u0447\u0438\u0441\u0442\u043a\u043e\u0439 \u0438 \u043e\u0431\u043e\u0433\u0430\u0449\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445\n- \u041e\u0446\u0435\u043d\u0438\u0442\u044c \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n- \u041e\u0431\u0443\u0447\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\n- \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0446\u0435\u043d\u044b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438\n- \u0421\u0442\u044d\u043a\u0438\u043d\u0433\n- Submission \u043d\u0430 Kaggle\n\n\n**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:**\n\n\u0414\u0430\u043d\u043d\u044b\u0435 - \u044d\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\u0443: \u043c\u0430\u0440\u043a\u0430, \u0434\u0430\u0442\u0430 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438, \u043e\u0431\u044a\u0435\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0438 \u0442.\u0434. \u0426\u0435\u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c. \u0422\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0441\u0430\u0439\u0442\u0430 Auto.ru. \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435, \u0432\u0441\u0435\u0433\u043e 34686 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439, \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d \u043f\u043e \u0433\u043e\u0434\u0443 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0441 2005 \u043f\u043e 2020 \u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0430\u043c\u0438 \"\u0441 \u043f\u0440\u043e\u0431\u0435\u0433\u043e\u043c\" \u0438 \"\u043f\u0440\u043e\u0434\u0430\u043d\". \u0412\u0441\u0435\u0433\u043e \u0432 \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u043e\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 47423 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043b\u0443\u0447\u0448\u0438\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0446\u0435\u043d \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438.\n\n\n\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0446\u0435\u043d\u044b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u0437\u0430\u0434\u0430\u0447\u0435 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438. \u041d\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043b\u0443\u0447\u0448\u0438\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0446\u0435\u043d \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438.","c5ca1164":"# \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f","93e6fd0f":"number_doors - \u0415\u0441\u0442\u044c \u043e\u0434\u0438\u043d \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0431\u0435\u0437 \u0434\u0432\u0435\u0440\u0438, \u043d\u043e \u043e\u043d \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u0435. \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u043c","359e7596":"## \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 'pts' \u0432 \u0442\u0435\u0441\u0442\u0435","282deab8":"\u043f\u0440\u0438\u0437\u043d\u0430\u043a 'condition' \u041f\u0440\u0438\u0437\u043d\u0430\u043a \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u043d\u0435\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u0435\u043d, \u0432\u0441\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \"\u041d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0440\u0435\u043c\u043e\u043d\u0442\u0430\", \u0443\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446.\n\n\u043f\u0440\u0438\u0437\u043d\u0430\u043a 'customs' \u0412\u0441\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0438\u043c\u0435\u044e\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \"\u0420\u0430\u0441\u0442\u0430\u043c\u043e\u0436\u0435\u043d\", \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u0441\u0442\u043e\u043b\u0431\u0435\u0446.","c99928bf":"## \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","0c0d0c24":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'fuel_type'\n\n\u0432\u0441\u0435\u0433\u043e 5 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0441\u0430\u043c\u044b\u0439 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430 - \u0431\u0435\u043d\u0437\u0438\u043d.\n","ed5da2e4":"## \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","975b9ba7":"## XGBRegressor","f2fdcc61":"\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u043f\u0440\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044f\u0445 \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0438\u0445 \u043e\u0447\u0438\u0441\u0442\u043a\u0430.\n\u041f\u0420\u043e\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0435\u0442\u0430 \u0438 \u043f\u043e\u0442\u043e\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u0438\u0445\n\n\n## \u041f\u043e\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\n\n- body_type - \u0442\u0438\u043f \u043a\u0443\u0437\u043e\u0432\u0430\n- brand - \u043c\u0430\u0440\u043a\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- car_url - \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0430\u0432\u0442\u043e.\u0440\u0443\n- color - \u0446\u0432\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- complectation_dict - \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- description - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- engine_displacement - \u043e\u0431\u0434\u044a\u0435\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0432 \u043b\u0438\u0442\u0440\u0430\u0445\n- engine_power - \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0432 \u043b.\u0441.\n- equipment_dict - \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- fuel_type - \u0442\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430 (\u0431\u0435\u043d\u0437\u0438\u043d, \u0434\u0438\u0437\u0435\u043b\u044c)\n- image - \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0444\u043e\u0442\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- mileage - \u043f\u0440\u043e\u0431\u0435\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0432 \u043a\u043c\n- model_date - \u0433\u043e\u0434 \u043d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\n- model_info - \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438\n- model_name - \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n- name - \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- number_doors - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\n- parsing_unixtime - \u0432\u0440\u0435\u043c\u044f \u0438 \u0434\u0430\u0442\u0430 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 unixtime\n- production_date - \u0433\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- sell_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\n- super_gen - \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0430\u0432\u0442\u043e - \u043f\u0440\u0435\u043c\u0438\u0443\u043c\n- configuration - \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- transmission- \u0442\u0438\u043f \u0442\u0440\u0430\u043d\u0441\u043c\u0438\u0441\u0441\u0438\u0438\n- vendor - \u0440\u0435\u0433\u0438\u043e\u043d \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- car_owners - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0442\u0440\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: 1,2, 3 \u0438 \u0431\u043e\u043b\u0435\u0435\n- ownership - \u0442\u0438\u043f \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f\n- pts - \u0432\u0438\u0434 \u041f\u0422\u0421, \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b \u0438\u043b\u0438 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\n- drive_type - \u0442\u0438\u043f \u043f\u0440\u0438\u0432\u043e\u0434\u0430\n- wheel - \u0442\u0438\u043f \u0440\u0443\u043b\u044f: \u043f\u0440\u0430\u0432\u044b\u0439 \u0438\u043b\u0438 \u043b\u0435\u0432\u044b\u0439\n- condition - \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- customs - \u0440\u0430\u0441\u0442\u0430\u043c\u043e\u0436\u0435\u043d \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0438\u043b\u0438 \u043d\u0435\u0442\n- price - \u0446\u0435\u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- currency - \u0432\u0430\u043b\u044e\u0442\u0430 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n\n\u0422\u0440\u0435\u0439\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438 33 \u043f\u0440\u0438\u0437\u043d\u0430\u043ao\u0432, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f 'price', \u0438\u0437 \u043d\u0438\u0445 25 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a, \u0430 6 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435. \u0417\u0430\u0434\u0430\u0447\u0430 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0446\u0435\u043d\u044b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0435\u0433\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0447\u0435\u0439 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438. \u0421\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c. \u0411\u0443\u0434\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u043f\u0438\u0441\u043a\u0438. \u0412 'ownership', 'complectation_dict', 'equipment_dict' \u0438 'pts' \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c.\n\n\u0421\u0440\u0430\u0437\u0443 \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0432\u0430\u043b\u044e\u0442\u044b, \u0438 \u0441\u0441\u044b\u043b\u043a\u043e\u0439 \u043d\u0430 \u0430\u0432\u0442\u043e \u0438 \u0434\u0440., \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0438 \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438.\n","daf8a60d":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\n\u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u0443\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u0445, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u043b\u0438 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443","f1de73b4":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'body_type'\n\n\u0432\u0441\u0435\u0433\u043e 24 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f, \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0434\u0430\u043d\u043e\u0432.","0a0d7307":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'description'\n\n\u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u043b\u0435 \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c","9215aaf9":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438","a86792f0":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'car_owners'\n\n\u0417\u0434\u0435\u0441\u044c 3 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0441\u0430\u043c\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u043e\u0435 - 3 \u0438 \u0431\u043e\u043b\u0435\u0435, \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n","ad5ac931":"sell_id \u0438\u043c\u0435\u0435\u0442 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0432 \u0442\u0440\u0435\u0439\u043d\u0435. \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u0445","a10f48a4":"\u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 production_date \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0430\u0432\u0442\u043e","b5654380":"C LightGBM","a93224d7":"\u043f\u0440\u0438\u0437\u043d\u0430\u043a 'name' \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442 \u0440\u0430\u043d\u0435\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435: \u043b\u0438\u0442\u0440\u0430\u0436, \u043c\u043e\u0434\u0435\u043b\u044c, \u0442\u0438\u043f\n\n\u043f\u0440\u0438\u0437\u043d\u0430\u043a 'configuration' \u0442\u0430\u043a\u0436\u0435 \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u0443\u044e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b(\u0442\u0438\u043f \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f, \u043a\u0443\u0437\u043e\u0432\u0430, \u043a\u043e\u043b-\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439 \u0438 \u0442.\u0434. \n\u041c\u043e\u0436\u043d\u043e \u0438\u0445 \u0443\u0434\u0430\u043b\u0438\u0442\u044c.\n\n","9488ce22":"\u0412\u0438\u0434\u043d\u043e \u0447\u0442\u043e \u043e\u0447\u0435\u043d\u043e \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 engine_displacement  \u0438 engine_power, \u0430 \u0442\u0430\u043a\u0436\u0435 model_date \u0438 production_date . \n\n\u041f\u041e \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443\u0434\u0430\u043b\u0438\u043c. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0438\u0445 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c.","cacbaffd":"\u0421 XGB","cfebb1a8":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'mileage'","e4525e49":"## What's next?\n\u0427\u0442\u043e \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n\n- \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u043b\u0438 \u043a\u0430\u043a \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n- \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 ML\n- \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n- \u041f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0435\u0449\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n- \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Blending & Stacking \u043d\u0435 \u043f\u0440\u0438\u043d\u0435\u0441\u043b\u043e \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439. \u041d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438\u043c\u0435\u043b\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 Random Forest \u0441 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439.\n","3bef89e7":"\n\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'brands'\n\n\u0432\u0441\u0435\u0433\u043e 14 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f, \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e BMW.","9e764cae":"## \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","27d33155":"## \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","70eaece1":"# \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c pandas profiling \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432","6a398512":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'vendor'\n\n\u0418\u043c\u0435\u0435\u0442\u0441\u044f 5 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0441\u0430\u043c\u043e\u0435 \u0447\u0430\u0441\u0442\u043e\u0435 - EUROPEAN","d76fa994":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'transmission'\n\n\u0417\u0434\u0435\u0441\u044c 4 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0441\u0430\u043c\u043e\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043a\u043e\u0440\u043e\u0431\u043a\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447","274e0dec":" \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'drive_type'\n\n\u0418\u043c\u0435\u044e\u0442\u0441\u044f \u0442\u0440\u0438 \u0442\u0438\u043f\u0430 \u043f\u0440\u0438\u0432\u043e\u0434\u0430, \u0441\u0430\u043c\u044b\u0439 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 - \u043f\u043e\u043b\u043d\u044b\u0439.","2ca82dad":"## Submission","797c6a8d":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'wheel' \u0415\u0441\u0442\u044c \u043c\u0430\u0448\u0438\u043d\u044b \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0441 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0440\u0443\u043b\u044f \u0441\u043f\u0440\u0430\u0432\u0430, \u043d\u043e \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043e\u043d \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d \u0441\u043b\u0435\u0432\u0430.\n","b3768517":"## \u0412\u044b\u0432\u043e\u0434\u044b:\n\n\u0414\u0430\u043d\u043d\u044b\u0435 - \u044d\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\u0443: \u043c\u0430\u0440\u043a\u0430, \u0442\u0438\u043f \u043a\u0443\u0437\u043e\u0432\u0430, \u0434\u0430\u0442\u0430 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438, \u043e\u0431\u044a\u0435\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0438 \u0442.\u0434. \u0426\u0435\u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439. \u0422\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0441\u0430\u0439\u0442\u0430 Auto.ru. \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435, \u0432\u0441\u0435\u0433\u043e 34686 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439, \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d \u043f\u043e \u0433\u043e\u0434\u0443 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0441 2005 \u043f\u043e 2020 \u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u043c \"\u0441 \u043f\u0440\u043e\u0431\u0435\u0433\u043e\u043c\", \u0432 \u043d\u0435\u043c \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043c\u0430\u0448\u0438\u043d\u044b \u0441 \u0444\u043b\u0430\u0433\u043e\u043c \"\u043f\u0440\u043e\u0434\u0430\u043d\". \u0412\u0441\u0435\u0433\u043e \u0432 \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u043e\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 47423 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043b\u0443\u0447\u0448\u0438\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0446\u0435\u043d \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438, \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438.\n\n\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0438 \u043f\u043e\u0434\u0433\u043e\u043d\u044f\u0435\u043c \u043f\u043e\u0434 \u043d\u0435\u0433\u043e \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u043b\u0438\n\u0427\u0442\u043e\u0431\u044b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043a\u0443\u0437\u043e\u0432\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u043b\u0438 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u0442\u0435\u0441\u0442\u0435, \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u0442\u0438\u043f\u044b \u043a\u0443\u0437\u043e\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\n\u041c\u044b \u043e\u0442\u043e\u0431\u0440\u0430\u043b\u0438 \u0446\u0432\u0435\u0442\u0430 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u0441\u043b\u0438\u043c \u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0434\u0440\u0443\u0433\u043e\u0435. \u0422\u0430\u043a\u0436\u0435 \u0432\u044b\u0434\u0435\u043b\u0435\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a -  \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u0446\u0432\u0435\u0442. \u0427\u0435\u0440\u043d\u044b\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0430\u043c\u044b\u043c\u0438 \u0434\u043e\u0440\u043e\u0433\u0438\u043c\u0438.\n\u0412 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u043c\u0430\u0440\u043e\u043a, \u0447\u0435\u043c \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a  \u0438\u0437 \u0442\u0435\u0445 \u043c\u0430\u0440\u043e\u043a, \u0447\u0442\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0432 \u0442\u0435\u0441\u0442\u0435, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u043d\u0435\u0441\u0435\u043c \u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u2013 \u0434\u0440\u0443\u0433\u043e\u0435.\n\n\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043a\u043e\u0448\u0435\u043d\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0435\u0435 \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c, \u0435\u0433\u043e \u0438 \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0441\u043f\u0440\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u044b\u043b\u043e \u0431\u043e\u043b\u0435\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c, \u044d\u0442\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438.\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c\u044b\u0435 \u044f\u0432\u043d\u044b\u0435.\n\n\u0412 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 sell_id \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0435\u0441\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b, \u043c\u044b \u0438\u0445 \u0443\u0434\u0430\u043b\u0438\u043b\u0438.\n\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f.\n\n\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0438\u043c\u0435\u044e\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442  3 - 10 \u043b\u0435\u0442,\u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f - \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 7.5 \u043b\u0435\u0442, \u0447\u0435\u043c \u0441\u0442\u0430\u0440\u0448\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c, \u0442\u0435\u043c \u043e\u043d \u0434\u0435\u0448\u0435\u0432\u043b\u0435.\n\n\u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u043e\u0431\u0435\u0433, \u0442\u0435\u043c \u043d\u0438\u0436\u0435 \u0446\u0435\u043d\u0430 \u043d\u0430 \u0430\u0432\u0442\u043e. \u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u043f\u0440\u043e\u0431\u0435\u0433 - \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e 100 \u043a\u043c.\n\u0415\u0441\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u043e\u0431\u044a\u0435\u043c\u043e\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0438 \u0446\u0435\u043d\u043e\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f: \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u044a\u0435\u043c, \u0442\u0435\u043c, \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c, \u0432\u044b\u0448\u0435 \u0446\u0435\u043d\u0430.\n\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0438\u043c\u0435\u044e\u0442 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u043e\u0442 150 \u0434\u043e 300 \u043b.\u0441.,\u0447\u0435\u043c \u043c\u043e\u0449\u043d\u0435\u0435 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044c, \u0442\u0435\u043c, \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c, \u0432\u044b\u0448\u0435 \u0446\u0435\u043d\u0430.\n\u0415\u0441\u043b\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442, \u043c\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u043b\u0438  \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u043b\u044f\u043c\u0438.\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043c\u044b \u0432\u044b\u0447\u043b\u0435\u043d\u0438\u043b\u0438, \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0432 \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435, \u0438\u0437 \u043d\u0438\u0445 \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.\n\n\u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0441 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043a\u043e\u0440\u043e\u0431\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0447 \u0441\u0442\u043e\u044f\u0442 \u0434\u043e\u0440\u043e\u0436\u0435, \u0430 \u0441 \u043c\u0435\u0445\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 - \u0434\u0435\u0448\u0435\u0432\u043b\u0435.\n\u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0441 \u0437\u0430\u0434\u043d\u0438\u043c \u043f\u0440\u0438\u0432\u043e\u0434\u043e\u043c \u0441\u0442\u043e\u044f\u0442 \u0434\u043e\u0440\u043e\u0436\u0435, \u0430 \u0441 \u043f\u0435\u0440\u0435\u0434\u043d\u0438\u043c - \u0434\u0435\u0448\u0435\u0432\u043b\u0435.\n\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043c\u0435\u0442\u043a\u0438 \u043f\u0440\u0435\u043c\u0438\u0443\u043c \u043a\u043b\u0430\u0441\u0441\u0430 \u043d\u0430\u043f\u0440\u043e\u0442\u0438\u0432 MERCEDES \u0438 BMW, \u043e\u0442\u0440\u0430\u0437\u0438\u043b\u0438 \u044d\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043a\u043b\u0430\u0441\u0441\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f.\n\u041c\u044b \u043f\u0440\u043e\u0432\u0435\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0441 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u043c\u0438 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u043f\u044b\u0442\u0430\u043b\u0438\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u044d\u0433\u0433\u0438\u043d\u0433 \u0438 \u0441\u0442\u0435\u043a\u043a\u0438\u043d\u0433.\n\n\u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u043f\u044b\u0442\u0430\u043b\u0438\u0441\u044c \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438. \u0422\u0430\u043a \u043a\u0430\u043a \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u043b\u0441\u044f \u0432 2020 \u0433\u043e\u0434\u0443\n\u0430 \u043d\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 2021, \u0446\u0435\u043d\u0443 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0443\u043c\u043d\u043e\u0436\u0438\u043b\u0438 \u043d\u0430 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u0440\u0443\u0431\u043b\u044f \u0432 2020 \u043a \u0441\u0435\u0433\u043e\u0434\u043d\u044f\u0448\u043d\u0435\u043c\u0443 \u043a\u0443\u0440\u0441\u0443.\n\n\u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u043e\u0431\u0435\u0433\u0430 \u0430\u0432\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u043b\u0438 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u0440\u043e\u0431\u0435\u0433 \u0430\u0432\u0442\u043e \u0432 \u0433\u043e\u0434 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 \u0430\u0432\u0442\u043e - km_year. \u042d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0442\u0430\u043a\u0436\u0435 \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438.\n\n\u0421\u0442\u0435\u043a\u043a\u0438\u043d\u0433 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u0435\u0442\u043e\u0434 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.\n\u041b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c CatboostRegressor.\n\u041c\u044b \u0441\u0447\u0438\u0442\u0430\u0435\u043c, \u0447\u0442\u043e \u043f\u0440\u0438 \u0441\u0430\u0431\u043c\u0438\u0442\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0440\u044b\u043d\u043a\u0430 \u0438 \u0446\u0435\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0433\u043e\u0434, \u043c\u0438\u043d\u0438\u043c\u0443\u043c 10%\n\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 MAPE \u043d\u0430 \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 - 10.89%","664bb62b":"## \u0410\u043d\u0430\u043b\u0438\u0437 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 - price\n\n\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043e\u043a\u043e\u043b\u043e 3.6 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0440\u0443\u0431\u043b\u0435\u0439, \u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u0430\u044f - \u043e\u043a\u043e\u043b\u043e 2.1 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432. \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0441\u0442\u043e\u044f\u0442 \u043e\u0442 1.5 \u0434\u043e 2.7 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0440\u0443\u0431\u043b\u0435\u0439.\n","e60f5465":"\u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u044d\u0433\u0433\u0438\u043d\u0433\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0434\u043b\u044f LightGBM \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0438\u0441\u044c, \u0430 \u0434\u043b\u044f Random Forest Regressor \u0438 XGB Regressor \u0441\u043d\u0438\u0437\u0438\u043b\u0438\u0441\u044c.","068033c6":"## \u0421\u0442\u0435\u043a\u043a\u0438\u043d\u0433. \u0410\u043d\u0441\u0430\u043c\u0431\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","66dc30f0":"## \u0420\u0430\u0437\u0431\u0438\u0432\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e \u0442\u0438\u043f\u0430\u043c","559b4ccf":"# \u041c\u043e\u0434\u0435\u043b\u0438","2b405edd":"## \u0411\u044d\u0433\u0433\u0438\u043d\u0433\n### \u0421\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043b\u0435\u0441\u043e\u043c","2eeeb3fa":"## CatboostRegressor","214fc891":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","6e2b651b":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e","06f91147":"## RandomForest\n\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043e\u0431\u0443\u0447\u0438\u043c \u043d\u0430 \u043d\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u044c","cd96abb9":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'color'\n\n\u0432\u0441\u0435\u0433\u043e 16 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f, \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0447\u0435\u0440\u043d\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439.","e703ac37":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'engine_power'","31850aab":"\u041f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0435 \u0434\u0430\u043b \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0438 \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0442\u0430\u043a \u0438 \u043e\u0441\u0442\u0430\u043b\u0438\u0441\u044c \u0443 CatBoost \u043c\u043e\u0434\u0435\u043b\u0438."}}