{"cell_type":{"cf1089aa":"code","0321fa6b":"code","d6d75467":"code","5d7b1746":"code","4b8b6e4d":"code","efd0baf5":"code","3bfac31a":"markdown","8b1f0a51":"markdown","0609307d":"markdown","af55ac28":"markdown","508eed95":"markdown","b5f711d9":"markdown"},"source":{"cf1089aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0321fa6b":"!pip install COVID19Py --upgrade\n!pip install cufflinks --upgrade\n!pip install wget\n\nimport cufflinks as cf\nimport plotly.offline\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport copy\nimport COVID19Py\nimport matplotlib.pyplot as plt\nimport wget\n\ndef print_full(x):\n    pd.set_option('display.max_rows', len(x))\n    pd.set_option('display.max_columns', None)\n    pd.set_option('display.width', 2000)\n    pd.set_option('display.float_format', '{:20,.2f}'.format)\n    pd.set_option('display.max_colwidth', -1)\n    print(x)\n    pd.reset_option('display.max_rows')\n    pd.reset_option('display.max_columns')\n    pd.reset_option('display.width')\n    pd.reset_option('display.float_format')\n    pd.reset_option('display.max_colwidth')\n    \n","d6d75467":"def read_train():\n    train_df = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv\")\n    return train_df","5d7b1746":"def get_recovered_by_country():\n    \n    confirmed = {}\n    \n    url = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv'\n    filename = wget.download(url)\n\n    recv_df = pd.read_csv(filename)\n    dates = recv_df.columns[4:]\n\n    recv_df_long = recv_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                            value_vars=dates, var_name='Date', value_name='Recovered')\n    \n    \n    recv_df_long[\"Date\"] = pd.to_datetime(recv_df_long.Date)\n    \n    for i, row in recv_df_long.iterrows():\n        country = row['Country\/Region']\n        recovered = row['Recovered']\n        date = row['Date']\n        if country not in confirmed:\n            confirmed[country] = {}\n        \n        _month = date.month if len(str(date.month)) != 1 else \"0{}\".format(date.month)\n        _str_date = \"{}-{}-{}\".format(date.year, _month, date.day)\n        confirmed[country][_str_date] = recovered\n        \n    \n    return confirmed\n\ndef add_recovered_cases(recovered_cases, df):\n    def add_recovered(row):\n        return recovered_cases.get(row[2], {}).get(row[5],0)\n    \n    df['Recovered'] = df.apply(lambda x: add_recovered(x), axis=1)\n    return df\n\n\n\ndf = read_train()\n\nrecovered_cases = get_recovered_by_country()\n\ndf = add_recovered_cases(recovered_cases, df)\n\n","4b8b6e4d":"countries = df[\"Country\/Region\"].unique()\ndf_by_date = df.groupby(\"Date\").sum()\nlast_day = df_by_date.iloc[-1]\npre_last_day = df_by_date.iloc[-2]\ntotal_infected = last_day[\"ConfirmedCases\"]\ntotal_deaths = last_day[\"Fatalities\"]\ntotal_recoveries = pre_last_day[\"Recovered\"]\n\ninfected_timeline = df_by_date[\"ConfirmedCases\"]\ndeath_timeline = df_by_date[\"Fatalities\"]\nrecovery_timeline = df_by_date[\"Recovered\"][:-1]\n\nprint(\"[!] GENERAL STATISTICS\")\nprint(\"[-] Number of infected countries: {}\".format(len(countries)))\nprint(\"[-] Total number of infected: {}\".format(total_infected))\ninfected_timeline.iplot()\nprint(\"[-] Total number of deaths: {}\".format(total_deaths))\ndeath_timeline.iplot()\nprint(\"[-] Total number of recoveries: {}\".format(total_recoveries))\nrecovery_timeline.iplot()\n\n","efd0baf5":"\ndef add_insights(_df):\n    # Here we add some insight:\n    # - fatal ratio and recovery ratio\n    # - a balanced fatal ratio, which takes into account the number of confirmed cases.\n    # - a balanced recovery ratio, as above.\n    \n    #_df = _df.groupby([\"Country\/Region\"]).sum()\n\n    \n    _df = _df[[\"Country\/Region\",\"ConfirmedCases\", \"Fatalities\", \"Recovered\"]]\n    _df['FatalRatio'] = (_df['Fatalities'] \/ _df['ConfirmedCases']) *100\n    \n    _df['RecoveryRatio'] = (_df['Recovered'] \/ _df['ConfirmedCases']) *100\n\n    _df.replace(np.inf, 0, inplace=True)\n    _df.replace(np.nan, 0, inplace=True)\n    return _df\n\ndef pie_column(df, column=\"FatalRatio\", top=5):\n    \n    _tmp = df[['Country\/Region', column]][:top]\n    \n    #plot = _tmp.plot.pie(y=column, figsize=(5, 5))\n    values = [x[1] for i,x in _tmp.iterrows()]\n    labels = [str(x) for x in _tmp['Country\/Region']]\n\n    fig1, ax1 = plt.subplots()\n    ax1.pie(values, autopct='%1.1f%%', labels=labels, shadow=True, startangle=90)\n    # Equal aspect ratio ensures that pie is drawn as a circle\n    ax1.axis('equal')  \n    plt.tight_layout()\n    plt.show()\n    \ndef analyze_fatality(_df, top=5):\n    _df = _df.sort_values(\"FatalRatio\", ascending=False)\n    print(\"[-] Cases by country, sorted by fatality ratio\")\n    print_full(_df.head(top))\n    \n    pie_column(_df, column=\"FatalRatio\", top=top)\n    \n    _df = _df.sort_values(\"Fatalities\", ascending=False)\n    print(\"[-] Cases by country, sorted fatalities\")\n    print_full(_df.head(top))\n    \n    pie_column(_df, column=\"Fatalities\")\n    \ndef analyze_recovery(_df, top=5):\n    _df = _df.sort_values(\"RecoveryRatio\", ascending=False)\n    print(\"[-] Cases by country, sorted by recovery ratio\")\n    print_full(_df.head(top))\n    \n    pie_column(_df, column=\"RecoveryRatio\", top=top)\n    \n    _df = _df.sort_values(\"Recovered\", ascending=False)\n    print(\"[-] Cases by country, sorted by number of recevered\")\n    print_full(_df.head(top))\n    \n    pie_column(_df, column=\"Recovered\")\n\ndef create_country_df(df):\n    country_df = df.groupby([\"Country\/Region\", \"Date\"]).sum()\n    last_day_df = []\n    \n    all_countries = list(df['Country\/Region'].unique())\n    \n    for country in all_countries:\n        last_infos = country_df.loc[country].iloc[-1].to_dict()\n        last_infos['Country\/Region'] = country\n        last_day_df.append(last_infos)\n        \n    _df = pd.DataFrame(last_day_df)\n    return _df\n    \ndf = read_train()\n\nrecovered_cases = get_recovered_by_country()\n\ndf = add_recovered_cases(recovered_cases, df)\n\ncountry_df = create_country_df(df)\n\n\ninsight_country_df = add_insights(country_df)\n\nanalyze_fatality(insight_country_df)\nanalyze_recovery(insight_country_df, top=5)","3bfac31a":"# Exploratory Data Analysis","8b1f0a51":"![](https:\/\/www.theitaliantimes.it\/public\/salute\/coronavirus-italia-cos-e-sintomi-covid-19-incubazione-dopo-quanti-giorni-contagio-trasmissione-durata-e-prevenzione.jpg)\n\n## What's in the notebook\n- **Exploratory Data Analsysis (EDA) ** \n    - Adding some insight\n    - General data analysis\n    - Data analysis by country\n    \n\n**The notebook is under construction**\n","0609307d":"# General Analysis\nHere we are going to show a bunch of general statistics, like:\n- Number of countries infected\n- Total number of infected\n- Total number of deaths\n- Total number of recoveries\n- Evolution of infected\n- Evolution of deaths\n- Evolution of recoveries\n","af55ac28":"## Analysis by country\n\nHere we are going to analyze the data by country. \nFor each cuntry we are going to study:\n- Fatality\n- Recovery","508eed95":"# Utility functions","b5f711d9":"# Adding some insight\nSince the data does not include number of recoveries, we're gonna use a [python library](https:\/\/github.com\/Kamaropoulos\/COVID19Py) in order to enhance the data with such information.\n\nIn addition, we also add the Fatal Ratio and Recovery Ratio, which are the ratios of fatality and recovered w.r.t number of infected. In addition, for analysis purpose, we also add a Balanced score for both Fatal Ratio and Recovery Ratio, which takes into account also the number of infected, having a less biased score."}}