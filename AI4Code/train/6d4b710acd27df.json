{"cell_type":{"0837cd45":"code","c7d59a24":"code","445b1fe0":"code","fad35283":"code","39e2ce0b":"code","65c952c1":"code","4cc352ed":"code","692f61fb":"code","32ddf0e4":"code","dbc00f10":"code","ff878ec9":"code","4b7ba8d8":"code","6ace8def":"code","98ac6675":"code","29600553":"code","a9e664ca":"code","403362ff":"code","32bc28be":"code","37737d93":"code","26550034":"code","137c14b2":"code","17dfe7a4":"code","f4242863":"code","59bcac19":"code","8b57235b":"code","f5d662ca":"code","2df43af9":"code","978169f7":"code","2a149779":"code","f243967b":"code","528c1840":"code","b34ac64d":"markdown","d5dd00a0":"markdown","aba04b4c":"markdown","2e13187c":"markdown","2f9a7e05":"markdown","41db82e7":"markdown","1b04c61e":"markdown"},"source":{"0837cd45":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c7d59a24":"df = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')","445b1fe0":"df.head()","fad35283":"df.shape","39e2ce0b":"df.isnull().sum()","65c952c1":"df['habitat'].value_counts()","4cc352ed":"from sklearn.preprocessing import LabelEncoder\ndef label_encoded(feat):\n    le = LabelEncoder()\n    le.fit(feat)\n    print(feat.name,le.classes_)\n#     print(le.classes_)\n    return le.transform(feat)","692f61fb":"for col in df.columns:\n    df[str(col)] = label_encoded(df[str(col)])","32ddf0e4":"df.head()","dbc00f10":"import seaborn as sns \nimport matplotlib.pyplot as plt \nplt.figure(figsize=(12,10))\nax = sns.heatmap(df.corr())","ff878ec9":"fig = plt.figure(figsize = (20,15))\nax = fig.gca()\ndf.hist(ax=ax)\nplt.show()","4b7ba8d8":"X = df.drop(['class','veil-type','gill-attachment','ring-type','gill-color','bruises'],axis=1)\ny = df['class']","6ace8def":" from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n     X, y, test_size=0.4,random_state=42)","98ac6675":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nmodel_1 = RandomForestClassifier(max_depth=10, random_state=10)\nmodel_1.fit(X_train, y_train)\n","29600553":"y_pred = model_1.predict(X_test)","a9e664ca":"accuracy_score(y_test,y_pred)","403362ff":"X = df.drop(['class'],axis=1)\ny = df['class']","32bc28be":"X_train, X_test, y_train, y_test = train_test_split(\n     X, y, test_size=0.4,random_state=42)","37737d93":"model_2 = RandomForestClassifier(max_depth=10, random_state=0)\nmodel_2.fit(X_train, y_train)","26550034":"y_pred = model_2.predict(X_test)","137c14b2":"accuracy_score(y_test,y_pred)","17dfe7a4":"X = df.drop(['class','veil-type','gill-attachment','ring-type','gill-color','bruises'],axis=1)\ny = df['class']","f4242863":"X_train, X_test, y_train, y_test = train_test_split(\n     X, y, test_size=0.33,random_state=42)","59bcac19":"df['class'].value_counts()","8b57235b":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout","f5d662ca":"model_NN = Sequential()\nmodel_NN.add(Dense(32, input_dim=17, activation='tanh'))\n# Dropout(0.2),\nmodel_NN.add(Dense(16, activation='tanh'))\n# Dropout(0.2),\nmodel_NN.add(Dense(1, activation='softmax'))\n# Compile model\nmodel_NN.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","2df43af9":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss', mode='min', patience=10,restore_best_weights=True)","978169f7":"model_NN.fit(x=X_train, \n          y=y_train, \n          epochs=500,\n#           batch_size=200,\n          validation_data=(X_test, y_test),\n           callbacks=[early_stop]\n          )","2a149779":"model_NN.evaluate(X_test, y_test)","f243967b":"pred = model_NN.predict(X_test)\ny_test.iloc[9]","528c1840":"model_NN.predict(np.array([X_test.iloc[9]]))\n","b34ac64d":"### Building model ","d5dd00a0":"# Model 3 Using NN ","aba04b4c":"# Exploring Data","2e13187c":"# Model 1 remove less corr. data  ","2f9a7e05":"# Loading Data","41db82e7":"#  Model 2 Using All Features","1b04c61e":"## Split Data"}}