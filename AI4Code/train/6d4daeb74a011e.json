{"cell_type":{"85d97288":"code","53196354":"code","1365ff80":"code","c4bfb6a9":"code","63dbd851":"code","6a52721f":"code","a67a30cf":"code","419874a4":"code","7fa77690":"code","f3fafd2a":"code","10d9d97b":"code","c8a65dd2":"code","c5f19ba3":"code","345d7bcf":"code","ad6c5e6c":"code","8505cf1c":"code","850ac662":"code","6a68d37f":"code","51a2a3e9":"code","ecc3dd91":"code","44b97560":"code","0a4ced81":"code","844a39c1":"code","044e3fc8":"code","cd480a1b":"code","f079dd69":"code","68cc9bdb":"code","d05026c3":"code","590d7d56":"code","837edbee":"code","3a0cd536":"code","d4bbd5e1":"code","18c33a60":"code","504a56bb":"code","bb1bbc79":"code","6a2b87d1":"code","df2be1b2":"code","8392dee8":"code","594d2607":"code","fc11de21":"code","4c56f08a":"code","58d46620":"code","94b0562a":"code","5e12ac88":"code","11c7ed8a":"code","17afc3ba":"code","0c2e308e":"code","0fdd9f34":"code","d026067f":"code","b08b5b6d":"code","9eff5d7c":"code","651be57c":"code","0f187a65":"code","829dbbf5":"code","7649f8cc":"code","d7a7a3ca":"code","d03c0476":"code","84e959a4":"code","ccef00a0":"code","433b8124":"code","29fb3c23":"code","aa724a0e":"code","03aa366e":"markdown","e1b9ee30":"markdown","706aa396":"markdown","f18dcaf7":"markdown","c165e25c":"markdown","331ed7b7":"markdown","1150391e":"markdown","7f1832a0":"markdown","8d59ada5":"markdown","84fc62b8":"markdown"},"source":{"85d97288":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n%matplotlib inline","53196354":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')\ndf_gender_submission = pd.read_csv('..\/input\/gender_submission.csv')","1365ff80":"df_train.head()","c4bfb6a9":"df_train.describe()","63dbd851":"df_train.info()","6a52721f":"df_train.isnull().sum()","a67a30cf":"df_train.columns","419874a4":"corr = list(df_train.columns[1:])\ncorr = df_train[corr].corr()\n","7fa77690":"plt.figure(figsize=(16,8))\nax = sns.heatmap(corr, cmap='coolwarm', annot=True)","f3fafd2a":"a = df_train[['Survived', 'Pclass']].groupby(['Pclass']).mean()\na","10d9d97b":"a.plot.bar()","c8a65dd2":"s = df_train[['Survived', 'Sex']].groupby(['Sex']).mean()\ns","c5f19ba3":"s.plot.bar()","345d7bcf":"a = df_train[['Survived', 'Sex','Pclass']].groupby(['Sex', 'Pclass']).mean()\na","ad6c5e6c":"a.plot.bar()","8505cf1c":"df_train['AgeRange'] = pd.cut(df_train['Age'], 5, precision=0)","850ac662":"ag = df_train[['AgeRange', 'Survived']].groupby(['AgeRange']).mean()\nag","6a68d37f":"plt.figure(figsize=(12,7))\nax = ag.plot.bar()\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nplt.show","51a2a3e9":"df_train[['SibSp', 'Survived']].groupby(['SibSp']).mean()","ecc3dd91":"df_train[['Parch', 'Survived']].groupby(['Parch']).mean()","44b97560":"df_train[['Embarked', 'Survived']].groupby(['Embarked']).mean()","0a4ced81":"df_train[['Embarked', 'Survived']].groupby(['Embarked']).mean().plot.bar()","844a39c1":"grid = sns.FacetGrid(df_train, col='Survived', row='Pclass')\ngrid.map(plt.hist, 'Age', alpha=.6, bins=20)","044e3fc8":"sns.barplot(x='Survived', y='Fare', alpha=.5, data = df_train)","cd480a1b":"df_train.columns","f079dd69":"df_train.head()","68cc9bdb":"df_train = df_train.drop(['Name','Ticket','Cabin'], axis=1)\ndf_test = df_test.drop(['Name','Ticket','Cabin'], axis=1)","d05026c3":"df_train.head()","590d7d56":"di = {'male':0,'female':1}\ndf_train['Sex'] = df_train['Sex'].map(di)","837edbee":"sns.boxplot(x='Pclass',y='Age',data=df_train)","3a0cd536":"def agerep(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    if pd.isnull(Age):\n        if Pclass == 1:\n          return 38\n        elif Pclass == 2:\n          return 28\n        else:\n          return 24\n    else:\n        return Age\n        \n        \n        ","d4bbd5e1":"df_train['Age'] = df_train[['Age','Pclass']].apply(agerep,axis = 1)","18c33a60":"df_train['Embarked'] = df_train['Embarked'].fillna('S')","504a56bb":"df_train.isnull().sum()","bb1bbc79":"df_train.loc[ df_train['Age'] <= 16, 'Age'] = 0\ndf_train.loc[(df_train['Age'] > 16) & (df_train['Age'] <= 32), 'Age'] = 1\ndf_train.loc[(df_train['Age'] > 32) & (df_train['Age'] <= 48), 'Age'] = 2\ndf_train.loc[(df_train['Age'] > 48) & (df_train['Age'] <= 64), 'Age'] = 3\ndf_train.loc[ df_train['Age'] > 64, 'Age'] = 4","6a2b87d1":"df_train = df_train.drop(['AgeRange'], axis=1)","df2be1b2":"df_train = df_train.drop(['PassengerId'], axis=1)","8392dee8":"df_train['Age']=df_train['Age'].astype(int)","594d2607":"df_train['Embarked'] = df_train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} )","fc11de21":"df_train.loc[ df_train['Fare'] <= 7.91, 'Fare'] = 0\ndf_train.loc[(df_train['Fare'] > 7.91) & (df_train['Fare'] <= 14.454), 'Fare'] = 1\ndf_train.loc[(df_train['Fare'] > 14.454) & (df_train['Fare'] <= 31), 'Fare']   = 2\ndf_train.loc[ df_train['Fare'] > 31, 'Fare'] = 3\ndf_train['Fare'] = df_train['Fare'].astype(int)","4c56f08a":"df_test['Embarked'] = df_test['Embarked'].fillna('S')\ndf_test['Age'] = df_test[['Age','Pclass']].apply(agerep,axis = 1)","58d46620":"df_test['Embarked'] = df_test['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} )","94b0562a":"df_test.loc[ df_test['Fare'] <= 7.91, 'Fare'] = 0\ndf_test.loc[(df_test['Fare'] > 7.91) & (df_test['Fare'] <= 14.454), 'Fare'] = 1\ndf_test.loc[(df_test['Fare'] > 14.454) & (df_test['Fare'] <= 31), 'Fare']   = 2\ndf_test.loc[ df_test['Fare'] > 31, 'Fare'] = 3\n","5e12ac88":"df_test.loc[ df_train['Age'] <= 16, 'Age'] = 0\ndf_test.loc[(df_train['Age'] > 16) & (df_test['Age'] <= 32), 'Age'] = 1\ndf_test.loc[(df_train['Age'] > 32) & (df_test['Age'] <= 48), 'Age'] = 2\ndf_test.loc[(df_train['Age'] > 48) & (df_test['Age'] <= 64), 'Age'] = 3\ndf_test.loc[ df_train['Age'] > 64, 'Age'] = 4\n\ndf_test['Sex'] = df_test['Sex'].map(di)\n\ndf_test['Age']=df_test['Age'].astype(int)","11c7ed8a":"df_test['Fare'] = df_test['Fare'].fillna(2)","17afc3ba":"df_test['Fare'] = df_test['Fare'].astype(int)","0c2e308e":"df_test.head()","0fdd9f34":"df_train.head()","d026067f":"test_data = df_gender_submission['Survived']","b08b5b6d":"combined_test = pd.merge(df_test, df_gender_submission, on = 'PassengerId')","9eff5d7c":"from sklearn.model_selection import train_test_split\nfrom sklearn.cross_validation import KFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom sklearn import metrics\n","651be57c":"X_train = df_train.drop(\"Survived\", axis=1)\nY_train = df_train[\"Survived\"]\n#X_test  = df_test.drop(\"PassengerId\", axis=1)\nX_test  = combined_test.drop([\"PassengerId\",\"Survived\"], axis=1)\nX_train.shape, Y_train.shape, X_test.shape","0f187a65":"# I have created a function to perform k folds cross validation which helps in obtaining a better insight to test the accuracy of the model\n# More info at https:\/\/www.analyticsvidhya.com\/blog\/2018\/05\/improve-model-performance-cross-validation-in-python-r\/\n\ndef classification_model(model, data, predictors, outcome):\n  #Fit the model:\n  model.fit(data[predictors],data[outcome])\n  \n  predictions = model.predict(data[predictors])\n  \n  accuracy = metrics.accuracy_score(predictions,data[outcome])\n  print(\"Accuracy : %s\" % \"{0:.3%}\".format(accuracy))\n\n  #Perform k-fold cross-validation with 5 folds\n  kf = KFold(data.shape[0],n_folds= 5)\n  error = []\n  for train, test in kf:\n    # Filter the training data\n    train_predictors = (data[predictors].iloc[train,:])\n    train_target = data[outcome].iloc[train]\n    model.fit(train_predictors, train_target)\n    \n    error.append(model.score(data[predictors].iloc[test,:], data[outcome].iloc[test]))\n    \n    print(\"Cross-Validation Score : %s\" % \"{0:.3%}\".format(np.mean(error)))\n    \n  model.fit(data[predictors],data[outcome]) ","829dbbf5":"model = LogisticRegression()\nmodel.fit(X_train, Y_train)\n\nY_pred = model.predict(X_test)\n\npredictor_var = list(X_train[1:])\noutcome_var='Survived'\nclassification_model(model,df_train,predictor_var,outcome_var)","7649f8cc":"print('Accuracy on Test data:')\nprint(accuracy_score(combined_test['Survived'], Y_pred))\nprint('\\n')\nprint(classification_report(combined_test['Survived'], Y_pred))","d7a7a3ca":"model =  KNeighborsClassifier(n_neighbors = 3)\nmodel.fit(X_train, Y_train)\nY_pred = model.predict(X_test)\n\npredictor_var = list(X_train[1:])\noutcome_var='Survived'\nclassification_model(model,df_train,predictor_var,outcome_var)","d03c0476":"print('Accuracy on Test data:')\nprint(accuracy_score(combined_test['Survived'], Y_pred))\nprint('\\n')\nprint(classification_report(combined_test['Survived'], Y_pred))","84e959a4":"model = RandomForestClassifier()\nmodel.fit(X_train, Y_train)\nY_pred = model.predict(X_test)\n\npredictor_var = list(X_train[1:])\noutcome_var='Survived'\nclassification_model(model,df_train,predictor_var,outcome_var)","ccef00a0":"print('Accuracy on Test data:')\nprint(accuracy_score(combined_test['Survived'], Y_pred))\nprint('\\n')\nprint(classification_report(combined_test['Survived'], Y_pred))","433b8124":"model = SVC()\nmodel.fit(X_train, Y_train)\nY_pred = model.predict(X_test)\n\npredictor_var = list(X_train[1:])\noutcome_var='Survived'\nclassification_model(model,df_train,predictor_var,outcome_var)","29fb3c23":"print('Accuracy on Test data:')\nprint(accuracy_score(combined_test['Survived'], Y_pred))\nprint('\\n')\nprint(classification_report(combined_test['Survived'], Y_pred))","aa724a0e":"submit = pd.DataFrame({\n        \"PassengerId\": combined_test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\n#submit.to_csv('..\/submit.csv', index=False)","03aa366e":"KNN","e1b9ee30":"We can see that our best accuracy is with SVM of 91.38%","706aa396":"### This means a make with class 3 ticket has only 13.5 % chance of survival and a female with class 1 ticket has 96.8% chance of survival.","f18dcaf7":"This indicates a very bad survival rate for people with class 3 tickets.","c165e25c":"Based on the average ages found above","331ed7b7":"Random Forest","1150391e":"Logistic Regression","7f1832a0":"SVM","8d59ada5":"The survival rate is around 19 percent if you are a male.","84fc62b8":"Using machine learning"}}