{"cell_type":{"e8dc7d35":"code","0ae762a2":"code","092a96f2":"code","f94fc739":"code","d4fc8a14":"code","87bdd23e":"code","0f210b2f":"code","1bc36332":"code","883f5c5e":"code","673980ea":"code","e13daac2":"code","c47d3d06":"code","ebb8882d":"code","66e1ba96":"code","e39347c3":"code","cf4ba9f9":"code","6247d7c0":"code","1f334a3c":"code","25f65748":"code","0b659be7":"code","496a7302":"code","3ef6e9c5":"code","023c11a4":"code","eee7bfb6":"code","626accc0":"code","d7e95103":"code","d4c2d0cc":"code","6979f05c":"code","20a9d823":"code","a1fc2909":"code","eb334d06":"code","e0d5ee30":"code","66a7fa34":"code","721aeae4":"code","2cdaba78":"code","9eeb5c70":"code","0a801983":"code","5f6c7e3f":"code","3d781f5b":"code","70432047":"code","1592ae63":"code","4f365e73":"code","7417f7c4":"code","520a72a4":"code","f018a730":"code","f6fa370e":"code","4f759b51":"code","1e3156dd":"code","eeb92cc1":"code","1b396af4":"code","66dfae78":"code","02d6606b":"code","04a50326":"code","8e457cd9":"markdown","ba06ae4c":"markdown","3c2183f7":"markdown","a8439307":"markdown","54fd57a2":"markdown","0f62129b":"markdown","4b58ce83":"markdown","93bc6d07":"markdown","06504b5a":"markdown","fd867435":"markdown","bf24a76c":"markdown","d7ee1234":"markdown","1fd18ca5":"markdown","519ea56c":"markdown","ba263312":"markdown","80cfdf5a":"markdown","6937ddb2":"markdown","1f3c004e":"markdown","b96454c3":"markdown","3d9bbf1c":"markdown","28deca41":"markdown","c31c2679":"markdown","47f401b8":"markdown","fbbe79a1":"markdown"},"source":{"e8dc7d35":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Classifier Libraries\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nimport collections\n\n\n# Other Libraries\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.metrics import confusion_matrix , precision_score, recall_score, f1_score, roc_auc_score, accuracy_score, classification_report\nfrom sklearn.model_selection import KFold, StratifiedKFold\n#warnings.filterwarnings(\"ignore\")\nfrom imblearn.over_sampling import SMOTE \n\nimport warnings\nwarnings.filterwarnings('ignore')\n","0ae762a2":"df = pd.read_csv(\"..\/input\/paysim1\/PS_20174392719_1491204439457_log.csv\")","092a96f2":" df","f94fc739":"\nfrom sklearn.model_selection import train_test_split\n\ndf_sample, _ = train_test_split(df, test_size=0.92141601,random_state=1234, stratify=df[\"isFraud\"])","d4fc8a14":"df_sample","87bdd23e":"df_train, df_test = train_test_split(df_sample, test_size=0.2,random_state=1234,stratify=df_sample[\"isFraud\"])\ndf_train, df_val = train_test_split(df_train, test_size=0.25,random_state=1234,stratify=df_train[\"isFraud\"])","0f210b2f":"df_train.info()","1bc36332":"df_train.isnull().sum()","883f5c5e":"df_train.shape","673980ea":"df_train","e13daac2":"df_train.describe()","c47d3d06":"from sklearn.preprocessing import StandardScaler, RobustScaler\n\nstd_scaler = StandardScaler()\nrob_scaler = RobustScaler()\n\ndf_train['scaled_amount'] = rob_scaler.fit_transform(df_train['amount'].values.reshape(-1,1))\ndf_train['scaled_time'] = rob_scaler.fit_transform(df_train['step'].values.reshape(-1,1))\n\n","ebb8882d":"df_train['isFraud'].value_counts()\nsns.set_theme(style=\"darkgrid\")\nax = sns.countplot(x=\"isFraud\", data=df_train , color = \"midnightblue\")\nfor p in ax.patches:\n    ax.annotate(str(format(int(p.get_height()), ',d')), (p.get_x(), p.get_height()))","66e1ba96":"f, ax = plt.subplots(1, 1, figsize=(8, 8))\ndf_train.type.value_counts().plot(kind='bar', title=\"Transaction type\", ax=ax, figsize=(8,8) , color = \"midnightblue\")\nplt.ticklabel_format(style='plain', axis='y')","e39347c3":"pd.crosstab(df_train['type'], df_train['isFraud'])","cf4ba9f9":"ax=sns.countplot('type', data=df_train[(df_train['isFraud'] == 1)])\nplt.title('Fraud Distribution', fontsize=14)\nfor p in ax.patches:\n    ax.annotate(str(format(int(p.get_height()), ',d')), (p.get_x(), p.get_height()))\n\nplt.show()","6247d7c0":"# transaction hour\ndf_train['transactionHour'] = df_train['step'] % 24\n\nfrauds_hour = pd.concat([df_train.groupby(\"transactionHour\")[\"isFraud\"].sum(),df_train.groupby(\"transactionHour\")[\"isFraud\"].count()],axis=1)\nfrauds_hour.columns = [\"Frauds\",\"Transactions\"]\nfrauds_hour[\"fraud_rate\"] = frauds_hour.Frauds\/frauds_hour.Transactions\nsns.barplot(x=frauds_hour.index,y=frauds_hour.fraud_rate)\nplt.show()","1f334a3c":"# converting into object type\ndf_train['transactionHour'] = df_train['transactionHour'].astype('object')","25f65748":"plt.figure(figsize=(18,6))\nsns.lineplot(data=df_train.groupby(['transactionHour','type']).agg({'amount' : 'mean'}).round(2).reset_index(),\n             x='transactionHour',\n             y='amount',\n             hue='type')\nplt.xlabel('Transaction hour', fontsize=15, fontweight='bold')\nplt.xticks(range(24), range(24),fontsize=15, fontweight='bold', rotation=0)\nplt.ylabel('Average transaction amount (millions)', fontsize=15, fontweight='bold')\nplt.yticks(fontsize=15, fontweight='bold')\nplt.title('Average transaction amount at each hour', fontsize=22, fontweight='bold')","0b659be7":"newscatplot=df_train[df_train['isFraud']==1]\nplt.figure(figsize=(8,8))\nax = plt.gca()\nax.set_ylim(0,2*1e7)\nax.set_xlim(0,2*1e7)\ndf_train.plot.scatter(x='oldbalanceOrg',y='amount', ax=ax,edgecolors='red',s=100,alpha=0.1,label=\"Legit transaction\")\nnewscatplot.plot.scatter(x='oldbalanceOrg',y='amount', color='#FCD735', ax=ax,edgecolors='red',s=100,alpha=0.1,label=\"Fraud transcation\")\nplt.title('Amount vs Balance',fontsize=25,color='#E43A36')","496a7302":"df_train = pd.concat([df_train, pd.get_dummies(df_train['type'], prefix='type')],axis=1) ","3ef6e9c5":"df_train = df_train.drop(['type'],axis=1)","023c11a4":"df_train = df_train.drop([\"isFlaggedFraud\"],axis=1)","eee7bfb6":"df_train = df_train.drop(['nameOrig',\"nameDest\"],axis=1)","626accc0":"df_train","d7e95103":"y_train = df_train[\"isFraud\"]\nX_train = df_train.drop(['isFraud'],axis=1)","d4c2d0cc":"X_train","6979f05c":"y_train","20a9d823":"rf_cfl = RandomForestClassifier(max_depth=2)\nrf_cfl.fit(X_train, y_train)\n\ny_predict = rf_cfl.predict(X_train)\n\n# evaluate the model\nprint(classification_report(y_train, y_predict))\nprint(confusion_matrix(y_train, y_predict))","a1fc2909":"df_val = pd.concat([df_val, pd.get_dummies(df_val['type'], prefix='type')],axis=1) \ndf_val = df_val.drop(['type'],axis=1)\ndf_val = df_val.drop([\"isFlaggedFraud\"],axis=1)\ndf_val = df_val.drop(['nameOrig',\"nameDest\"],axis=1)\ndf_val['transactionHour'] = df_val['step'] % 24\n#df_train['transactionHour'] = df_train['transactionHour'].astype('object')","eb334d06":"y_val = df_val[\"isFraud\"]\nX_val= df_val.drop(['isFraud'],axis=1)","e0d5ee30":"from sklearn.preprocessing import StandardScaler, RobustScaler\n\nstd_scaler = StandardScaler()\nrob_scaler = RobustScaler()\n\ndf_val['scaled_amount'] = rob_scaler.fit_transform(df_val['amount'].values.reshape(-1,1))\ndf_val['scaled_time'] = rob_scaler.fit_transform(df_val['step'].values.reshape(-1,1))\n","66a7fa34":"df_val","721aeae4":"from sklearn.metrics import average_precision_score,accuracy_score,f1_score,classification_report,precision_recall_curve,confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier","2cdaba78":"rf_cfl = RandomForestClassifier(n_estimators = 200)\nrf_cfl.fit(X_val, y_val)\n\ny_predict = rf_cfl.predict(X_val)\n\n# evaluate the model\nprint(classification_report(y_val, y_predict))\nprint(confusion_matrix(y_val, y_predict))","9eeb5c70":"df = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","0a801983":"df","5f6c7e3f":"%config InlineBackend.figure_format = \"svg\"","3d781f5b":"plt.figure(figsize=(5,5))\ndf['Class'].value_counts()\nsns.set_theme(style=\"darkgrid\")\nax = sns.countplot(x=\"Class\", data=df,color = \"midnightblue\" )\nfor p in ax.patches:\n    ax.annotate(str(format(int(p.get_height()), ',d')),\n            (p.get_x(), p.get_height()))","70432047":"df_train, df_test = train_test_split(df, test_size=0.2,random_state=123,stratify=df[\"Class\"])\ndf_train, df_val = train_test_split(df_train, test_size=0.25,random_state=123,stratify=df_train[\"Class\"])","1592ae63":"plt.figure(figsize = (8,6))\nplt.title('Credit Card Transactions features correlation plot (Pearson)')\ncorr = df_train.corr()\nsns.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns,linewidths=.1,cmap=\"PuBuGn_r\")\nplt.show()","4f365e73":"# Statistical data\n\ndf_train.describe()","7417f7c4":"std_scaler = StandardScaler()\nrob_scaler = RobustScaler()\n\ndf_train['scaled_amount'] = rob_scaler.fit_transform(df_train['Amount'].values.reshape(-1,1))\ndf_train['scaled_time'] = rob_scaler.fit_transform(df_train['Time'].values.reshape(-1,1))\n\ndf_train.drop(['Time','Amount'], axis=1, inplace=True)","520a72a4":"df_train","f018a730":"X_train = df_train.drop([\"Class\"], axis = 1)\ny_train = df_train[\"Class\"]","f6fa370e":"from imblearn.over_sampling import SMOTE \n\nsm = SMOTE(random_state=1234)\n\nX_train, y_train = sm.fit_resample(X_train, y_train)","4f759b51":"from collections import Counter\ncounter = Counter(y_train)\nfor k, v in counter.items():\n    dist = v \/ len(y_train) * 100 \n    print(f\"Class= {k}, n={v} ({dist}%)\")","1e3156dd":"df_val['scaled_amount'] = rob_scaler.fit_transform(df_val['Amount'].values.reshape(-1,1))\ndf_val['scaled_time'] = rob_scaler.fit_transform(df_val['Time'].values.reshape(-1,1))\ndf_val.drop(['Time','Amount'], axis=1, inplace=True)","eeb92cc1":"X_val= df_val.drop([\"Class\"], axis = 1)\ny_val = df_val[\"Class\"]","1b396af4":"log_cfl = LogisticRegression(C=0.95, random_state=0)\n\nlog_cfl.fit(X_train, y_train)\n\ny_predict = log_cfl.predict(X_val)\n\n# evaluate the model\nprint(classification_report(y_val, y_predict))\nprint(confusion_matrix(y_val, y_predict))","66dfae78":"KNN = KNeighborsClassifier(n_neighbors=5)\n\nKNN.fit(X_train, y_train)\n\ny_predict = KNN.predict(X_val)\n\n# evaluate the model\nprint(classification_report(y_val, y_predict))\nprint(confusion_matrix(y_val, y_predict))","02d6606b":"rf_cfl = RandomForestClassifier(max_depth=2)\nrf_cfl.fit(X_train, y_train)\n\ny_predict = rf_cfl.predict(X_train)\n\n# evaluate the model\nprint(classification_report(y_train, y_predict))\nprint(confusion_matrix(y_train, y_predict))","04a50326":"rf_cfl = RandomForestClassifier(n_estimators = 200)\nrf_cfl.fit(X_train, y_train)\n\ny_predict = rf_cfl.predict(X_val)\n\n# evaluate the model\nprint(classification_report(y_val, y_predict))\nprint(confusion_matrix(y_val, y_predict))","8e457cd9":"After we reviewed these results for false data , Now we will read the real data that is very similar as we mentioned earlier in the description above the article and complete this article and test more than one model to find out which model is closest to health and most important to us\n\n\n![TLC logo](https:\/\/sadad.qa\/sadad_uploads\/2019\/03\/%C3%8F%C3%81%C3%AA%C3%8F_%C3%8F%C2%AE-%C3%8F%C2%AC%C3%A0%C3%A7%C3%A8%C3%8F%C2%BB%C3%A8%C3%8F%C2%AE-1.jpg)","ba06ae4c":"# Conclusion\n\n\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\u0640\n\n \u2022 First test results were promising .\n \n\u2022 Giving future solutions in the form of a model that predicts these frauds\n\n\u2022 Detection and investigation of fraud .\n\n\u2022 Bypass the identification of potential fraudulent activity and provide a practical framework for dealing with the presence and effects of fraud.","3c2183f7":"# Introduction\n\n_______________________________________________________________________\n\nScams target people all over the world. Everyone is vulnerable to scams, so everyone needs information on how to recognize and avoid them. Scammers are smart, and if you don't know what to watch out for, anyone can fall victim to a scam.\n\n\nScams work because they look like the real thing and happen when you least expect them. They can include an offer too tempting to be true, a phone call to help fix your computer, or a threat to pay money you don't owe,\nOr a warning from your bank or telecom provider about a problem with your account, or even an invitation to \"friend\" someone online.\n\nScammers take advantage of new technology, new products or services, and major events to create believable stories that will persuade you to provide your money or personal details.\n\nScammers even impersonate government officials and make false allegations or use threats of fines, arrest, and deportation to intimidate you into paying. These scammers may get some of your personal information from social media sites to make their demands appear more legitimate.\n\n\n","a8439307":"We did not show any relationships, as the above figure is because the data is encrypted\n","54fd57a2":" After experimenting with more than one model, \nit became clear that the closest to the correct prediction is the SVM model (support vector machine)\nit represents to us that the model gave us a correct percentage of 70 percent on the test, meaning that the number of those who said that they are fraudsters and they are in fact fraudulent is 69 people and made a mistake in 29 people\n\n![TLC logo](https:\/\/up4net.com\/uploads4\/up4net.com163985568586481.png)\n","0f62129b":"In the above figure, 0 represents non-fraudulent individuals - 1 represents fraudulent individuals","4b58ce83":"# SMOTE for data ","93bc6d07":"\n\n\n\u00a0GITHUB PAGE \n I attached a GITHUB page for the full code..\n\n\n\n   \n   \n   _______________________________________________________________________\n   \n   https:\/\/github.com\/yaarraa11\/Datasets-For-Fraud-Detection\n","06504b5a":"The above figure represents the illegal money and how to increase it until it reaches the permissible limit of transfers per day and then stops (example) The permissible limit of transfers per day is $50 at this amount, the customer cannot transfer more than this balance until 24 hours are completed","fd867435":"The goal of retrieval of this data is to understand how this data works within banks, and after reviewing the relationships between them, we will use a classification model. Did this data detect these frauds correctly or not?\n\nWe used the form ( RandomForestClassifier )\n\nWe will divide the data and test the model (we did a preliminary test for it with validation) and the results were not useful in the evaluation (recall) because we are interested in knowing the scammers whom the model predicted are scammers but gave the opposite result that they are not scammers","bf24a76c":"\n\n\n\n\n\n\n![TLC logo](https:\/\/cdn.shopify.com\/s\/files\/1\/2351\/9115\/files\/thankyou.png?height=628&pad_color=ffffff&v=1594590282&width=1200)\n","d7ee1234":"# Random Forest Classifier\n","1fd18ca5":"# Data \n\n_________________________________________________________________________\n\n\nIn this article, we will use false data from the famous data site (kaggle) that was made with a simulation program that simulates the operations that take place via phones, and we analyzed the data on it and find out what data is most in the occurrence of the scam and it became clear to us that most of it is through transfer and withdrawal between more than one account Bank (money laundering) so that the identity of the fraudster is not identified when it is done on one account.\n\nAfter we got acquainted with the nature of the data and how it occurs, and knowing the advantages in it, it turns out that we will have :\n\n-The steps are the rate of operations that take place during one hour.\n-And the types, which are the operations that are carried out by each customer - in addition to placing identity numbers for customers and recipients of operations in a fictitious manner.\n-Is this customer a fraud or a fraud (legal process)\n-The amount of incoming and outgoing money.\n\n\nWe have presented the fees that illustrate these relationships, and because they are false data, they will show us the operations of each client, but? The defect in this data is that it does not properly classify fraudulent people because it was not taken from a real banking source.\n\nWe have presented the fees that illustrate these relationships, and because they are false data, they will show us the operations of each client, but? The defect in this data is that it does not properly classify fraudulent people because it was not taken from a real banking source.\n-The steps that take place every hour\n-The amount of incoming and outgoing money.\n-Was this process disclosed, is it legal or illegal?\n\n\nAll this we will review in this article on two sets of data that were studied and analyzed.\n\n\n\n\n\nLet's go ..\n","519ea56c":"\n\nWe focus on the people who the model said are legitimate and they are originally illegal\n\n","ba263312":"# Data set\n\n![TLC logo](https:\/\/www.bayut.sa\/blog\/wp-content\/uploads\/2015\/03\/%D8%A7%D9%84%D9%86%D8%B5%D8%A8-%D8%B9%D8%A8%D8%B1-%D8%A7%D9%84%D8%A7%D9%86%D8%AA%D8%B1%D9%86%D8%AAAR07062020-1024x640.jpg)\n","80cfdf5a":"# KNN","6937ddb2":"# EDA for data","1f3c004e":"# LogisticRegression Model\n","b96454c3":"![TLC logo](https:\/\/www.albayan.ae\/polopoly_fs\/1.3830947.1586885771!\/image\/image.jpg)\n","3d9bbf1c":"In order to evaluate the model, we transform the data categorical into data numerical","28deca41":"In the above figure, we notice the most fraudulent operations (TRANSFER & CASH_OUT)","c31c2679":"In the above figure, the process of withdrawing money is done in the late hours of the day","47f401b8":"The figure above represents the percentage of individuals who said they were fraudulent and non-fraudulent in the random sample","fbbe79a1":"#  StandardScaler "}}