{"cell_type":{"f2544184":"code","3f74fec3":"code","3d46c7fb":"code","ad95cc9f":"code","1fdb4c84":"code","026cce70":"code","4e4620b4":"code","7c64fe8e":"code","ed29a60f":"code","4c13a0bb":"code","66e2cb6a":"code","8c9fff8b":"code","e8c71fda":"code","303c3295":"code","bf95f44c":"code","4043809c":"code","204e6cde":"code","c1e9ee71":"code","cbe05a0b":"markdown","b90f2bc5":"markdown","a7ba7c8d":"markdown","5edc033a":"markdown","3332ef8f":"markdown","e1da7467":"markdown","f066e7a2":"markdown","907402c6":"markdown","031e7788":"markdown","87c1b39b":"markdown","d32b84e9":"markdown","4c958cde":"markdown","838bd776":"markdown","a8cd2df3":"markdown","f88ee758":"markdown"},"source":{"f2544184":"import os\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\nimport matplotlib.pyplot as plt\nfrom xgboost import plot_importance, plot_tree\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n\n# Time series decomposition\n!pip install stldecompose\nfrom stldecompose import decompose\n\n# Chart drawing\nimport plotly as py\nimport plotly.io as pio\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\n# Mute sklearn warnings\nfrom warnings import simplefilter\nsimplefilter(action='ignore', category=FutureWarning)\nsimplefilter(action='ignore', category=DeprecationWarning)\n\n# Show charts when running kernel\ninit_notebook_mode(connected=True)\n\n# Change default background color for all visualizations\nlayout=go.Layout(paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(250,250,250,0.8)')\nfig = go.Figure(layout=layout)\ntemplated_fig = pio.to_templated(fig)\npio.templates['my_template'] = templated_fig.layout.template\npio.templates.default = 'my_template'","3f74fec3":"ETF_NAME = 'CERN'\nETF_DIRECTORY = '\/kaggle\/input\/price-volume-data-for-all-us-stocks-etfs\/Data\/Stocks\/'\n\ndf = pd.read_csv(os.path.join(ETF_DIRECTORY, ETF_NAME.lower() + '.us.txt'), sep=',')\n\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df[(df['Date'].dt.year >= 2010)].copy()\ndf.index = range(len(df))\n\ndf.head()","3d46c7fb":"fig = make_subplots(rows=2, cols=1)\n\nfig.add_trace(go.Ohlc(x=df.Date,\n                      open=df.Open,\n                      high=df.High,\n                      low=df.Low,\n                      close=df.Close,\n                      name='Price'), row=1, col=1)\n\nfig.add_trace(go.Scatter(x=df.Date, y=df.Volume, name='Volume'), row=2, col=1)\n\nfig.update(layout_xaxis_rangeslider_visible=False)\nfig.show()","ad95cc9f":"df_close = df[['Date', 'Close']].copy()\ndf_close = df_close.set_index('Date')\ndf_close.head()\n\ndecomp = decompose(df_close, period=365)\nfig = decomp.plot()\nfig.set_size_inches(20, 8)","1fdb4c84":"df['EMA_9'] = df['Close'].ewm(9).mean().shift()\ndf['SMA_5'] = df['Close'].rolling(5).mean().shift()\ndf['SMA_10'] = df['Close'].rolling(10).mean().shift()\ndf['SMA_15'] = df['Close'].rolling(15).mean().shift()\ndf['SMA_30'] = df['Close'].rolling(30).mean().shift()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df.Date, y=df.EMA_9, name='EMA 9'))\nfig.add_trace(go.Scatter(x=df.Date, y=df.SMA_5, name='SMA 5'))\nfig.add_trace(go.Scatter(x=df.Date, y=df.SMA_10, name='SMA 10'))\nfig.add_trace(go.Scatter(x=df.Date, y=df.SMA_15, name='SMA 15'))\nfig.add_trace(go.Scatter(x=df.Date, y=df.SMA_30, name='SMA 30'))\nfig.add_trace(go.Scatter(x=df.Date, y=df.Close, name='Close', opacity=0.2))\nfig.show()","026cce70":"def relative_strength_idx(df, n=14):\n    close = df['Close']\n    delta = close.diff()\n    delta = delta[1:]\n    pricesUp = delta.copy()\n    pricesDown = delta.copy()\n    pricesUp[pricesUp < 0] = 0\n    pricesDown[pricesDown > 0] = 0\n    rollUp = pricesUp.rolling(n).mean()\n    rollDown = pricesDown.abs().rolling(n).mean()\n    rs = rollUp \/ rollDown\n    rsi = 100.0 - (100.0 \/ (1.0 + rs))\n    return rsi\n\ndf['RSI'] = relative_strength_idx(df).fillna(0)\n\nfig = go.Figure(go.Scatter(x=df.Date, y=df.RSI, name='RSI'))\nfig.show()","4e4620b4":"EMA_12 = pd.Series(df['Close'].ewm(span=12, min_periods=12).mean())\nEMA_26 = pd.Series(df['Close'].ewm(span=26, min_periods=26).mean())\ndf['MACD'] = pd.Series(EMA_12 - EMA_26)\ndf['MACD_signal'] = pd.Series(df.MACD.ewm(span=9, min_periods=9).mean())\n\nfig = make_subplots(rows=2, cols=1)\nfig.add_trace(go.Scatter(x=df.Date, y=df.Close, name='Close'), row=1, col=1)\nfig.add_trace(go.Scatter(x=df.Date, y=EMA_12, name='EMA 12'), row=1, col=1)\nfig.add_trace(go.Scatter(x=df.Date, y=EMA_26, name='EMA 26'), row=1, col=1)\nfig.add_trace(go.Scatter(x=df.Date, y=df['MACD'], name='MACD'), row=2, col=1)\nfig.add_trace(go.Scatter(x=df.Date, y=df['MACD_signal'], name='Signal line'), row=2, col=1)\nfig.show()","7c64fe8e":"df['Close'] = df['Close'].shift(-1)","ed29a60f":"df = df.iloc[33:] # Because of moving averages and MACD line\ndf = df[:-1]      # Because of shifting close price\n\ndf.index = range(len(df))","4c13a0bb":"test_size  = 0.15\nvalid_size = 0.15\n\ntest_split_idx  = int(df.shape[0] * (1-test_size))\nvalid_split_idx = int(df.shape[0] * (1-(valid_size+test_size)))\n\ntrain_df  = df.loc[:valid_split_idx].copy()\nvalid_df  = df.loc[valid_split_idx+1:test_split_idx].copy()\ntest_df   = df.loc[test_split_idx+1:].copy()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=train_df.Date, y=train_df.Close, name='Training'))\nfig.add_trace(go.Scatter(x=valid_df.Date, y=valid_df.Close, name='Validation'))\nfig.add_trace(go.Scatter(x=test_df.Date,  y=test_df.Close,  name='Test'))\nfig.show()","66e2cb6a":"drop_cols = ['Date', 'Volume', 'Open', 'Low', 'High', 'OpenInt']\n\ntrain_df = train_df.drop(drop_cols, 1)\nvalid_df = valid_df.drop(drop_cols, 1)\ntest_df  = test_df.drop(drop_cols, 1)","8c9fff8b":"y_train = train_df['Close'].copy()\nX_train = train_df.drop(['Close'], 1)\n\ny_valid = valid_df['Close'].copy()\nX_valid = valid_df.drop(['Close'], 1)\n\ny_test  = test_df['Close'].copy()\nX_test  = test_df.drop(['Close'], 1)\n\nX_train.info()","e8c71fda":"%%time\n\nparameters = {\n    'n_estimators': [100, 200, 300, 400],\n    'learning_rate': [0.001, 0.005, 0.01, 0.05],\n    'max_depth': [8, 10, 12, 15],\n    'gamma': [0.001, 0.005, 0.01, 0.02],\n    'random_state': [42]\n}\n\neval_set = [(X_train, y_train), (X_valid, y_valid)]\nmodel = xgb.XGBRegressor(eval_set=eval_set, objective='reg:squarederror', verbose=False)\nclf = GridSearchCV(model, parameters)\n\nclf.fit(X_train, y_train)\n\nprint(f'Best params: {clf.best_params_}')\nprint(f'Best validation score = {clf.best_score_}')","303c3295":"%%time\n\nmodel = xgb.XGBRegressor(**clf.best_params_, objective='reg:squarederror')\nmodel.fit(X_train, y_train, eval_set=eval_set, verbose=False)","bf95f44c":"plot_importance(model);","4043809c":"y_pred = model.predict(X_test)\nprint(f'y_true = {np.array(y_test)[:5]}')\nprint(f'y_pred = {y_pred[:5]}')","204e6cde":"print(f'mean_squared_error = {mean_squared_error(y_test, y_pred)}')","c1e9ee71":"predicted_prices = df.loc[test_split_idx+1:].copy()\npredicted_prices['Close'] = y_pred\n\nfig = make_subplots(rows=2, cols=1)\nfig.add_trace(go.Scatter(x=df.Date, y=df.Close,\n                         name='Truth',\n                         marker_color='LightSkyBlue'), row=1, col=1)\n\nfig.add_trace(go.Scatter(x=predicted_prices.Date,\n                         y=predicted_prices.Close,\n                         name='Prediction',\n                         marker_color='MediumPurple'), row=1, col=1)\n\nfig.add_trace(go.Scatter(x=predicted_prices.Date,\n                         y=y_test,\n                         name='Truth',\n                         marker_color='LightSkyBlue',\n                         showlegend=False), row=2, col=1)\n\nfig.add_trace(go.Scatter(x=predicted_prices.Date,\n                         y=y_pred,\n                         name='Prediction',\n                         marker_color='MediumPurple',\n                         showlegend=False), row=2, col=1)\n\nfig.show()","cbe05a0b":"### Split into features and labels","b90f2bc5":"### Decomposition","a7ba7c8d":"### OHLC Chart\n\nI start with drawing an OHLC (open\/high\/low\/close) chart to get a sense of historical prices. Below OHLC I draw Volume chart which shows number of stocks traded each day. In my previous notebook (linked above) I explain importance of OHLC and Volume charts in technical analysis.","5edc033a":"#### Moving Averages\n\nI'm calculating few moving averages to be used as features: $SMA_{5}$, $SMA_{10}$, $SMA_{15}$, $SMA_{30}$ and $EMA_{9}$.","3332ef8f":"### Read historical prices\n\nI read historical data frame for a chosen stock (e.g. CERN) which I am going to analyze. New York Stock Exchange dataset provides day by day price history gathered over more than 10 years. I decided to crop the time frame and start it from a year 2010 to reduce amount of data to be processed.\n\nRemoving rows is then followed by reindexing the data frame to keep it clean.","e1da7467":"Here I split stock data frame into three subsets: training ($70\\%$), validation ($15\\%$) and test ($15\\%$) sets. I calculated split indices and create three separate frames (train_df, valid_df, test_df). All three frames have been ploted in the chart below.","f066e7a2":"### Technical indicators","907402c6":"### Shift label column\n\nBecause I want to predict the next day price, after calculating all features for day $D_{i}$, I shift Close price column by -1 rows. After doing that, for day $D_{i}$ we have features from the same timestamp e.g. $RSI_{i}$, but the price $C_{i+1}$ from upcoming day.","031e7788":"#### MACD","87c1b39b":"### Fine-tune XGBoostRegressor","d32b84e9":"### Introduction\n\nIn this kernel I use XGBRegressor from XGBoost library to predict future prices of stocks using technical indicator as features. If you are looking for an explanation of indicators (e.g. moving averages, RSI, MACD) used below, please refer to [articles on Investopedia](https:\/\/www.investopedia.com\/technical-analysis-4689657) or [this notebook of mine](https:\/\/www.kaggle.com\/mtszkw\/analysis-and-technical-indicators-for-trading-etfs) where I introduce and visualize various technical analysis concepts.","4c958cde":"#### Relative Strength Index\n\nI'll add RSI indicator to predict whether a stock is overbought\/oversold.","838bd776":"### Drop unnecessary columns","a8cd2df3":"### Drop invalid samples\n\nBecause of calculating moving averages and shifting label column, few rows will have invalid values i.e. we haven't calculated $SMA_{10}$ for the first 10 days. Moreover, after shifting Close price column, last row price is equal to 0 which is not true. Removing these samples should help.","f88ee758":"### Calculate and visualize predictions"}}