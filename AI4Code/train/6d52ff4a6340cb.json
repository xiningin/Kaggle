{"cell_type":{"49926473":"code","0c7a1ed3":"code","95ed8e7b":"code","65c536c7":"code","0bb9a0eb":"code","9fe90417":"code","2fe5596b":"code","3e9c6c7a":"code","12e69def":"code","fe237568":"code","ba4a5313":"code","2d03ceb0":"code","b99663da":"code","1166e516":"code","c8add126":"code","6bab9e2b":"code","45e9f8c4":"code","b6cfc78c":"code","a18c123a":"code","ecdea3b7":"markdown","71195ba3":"markdown","1f66a573":"markdown","e1bc8d9c":"markdown","d3f7c809":"markdown","41d7ac3a":"markdown","065a2991":"markdown","2bae229e":"markdown","9a5a7051":"markdown","de6d9864":"markdown","ac605bfa":"markdown"},"source":{"49926473":"import pandas as pd\nimport numpy as numpy\nimport h2o\nfrom h2o.estimators.gbm import H2OGradientBoostingEstimator\nfrom h2o.grid.grid_search import H2OGridSearch\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_auc_score","0c7a1ed3":"h2o.init()","95ed8e7b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","65c536c7":"data = h2o.import_file(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\", destination_frame=\"data\")","0bb9a0eb":"data.describe()","9fe90417":"target = \"Outcome\"\nfeatures = [f for f in data.columns if f not in ['Outcome']]","2fe5596b":"train_df, valid_df, test_df = data.split_frame(ratios=[0.8, 0.19], seed=2018)","3e9c6c7a":"#Get Target data \n\ntrain_df[target] = train_df[target].asfactor()\nvalid_df[target] = valid_df[target].asfactor()\ntest_df[target] = test_df[target].asfactor()","12e69def":"# define the predictor list - all the features analyzed before (all columns but 'default.payment.next.month')\npredictors = features\n# initialize the H2O GBM \ngbm = H2OGradientBoostingEstimator()\n# train with the initialized model\ngbm.train(x=predictors, y=target, training_frame=train_df)","fe237568":"gbm.summary()","ba4a5313":"#Train Accuracy\nprint(gbm.model_performance(train_df).auc())","2d03ceb0":"#Test Accuracy\nprint(gbm.model_performance(valid_df).auc())","b99663da":"tuned_gbm  = H2OGradientBoostingEstimator(\n    ntrees = 2000,\n    learn_rate = 0.02,\n    stopping_rounds = 25,\n    stopping_metric = \"AUC\",\n    col_sample_rate = 0.65,\n    sample_rate = 0.65,\n    seed = 2018\n)      \ntuned_gbm.train(x=predictors, y=target, training_frame=train_df, validation_frame=valid_df)","1166e516":"tuned_gbm.model_performance(valid_df).auc()","c8add126":"grid_search_gbm = H2OGradientBoostingEstimator(\n    stopping_rounds = 25,\n    stopping_metric = \"AUC\",\n    col_sample_rate = 0.65,\n    sample_rate = 0.65,\n    seed = 2018\n) \n\nhyper_params = {\n    'learn_rate':[0.01, 0.02, 0.03],\n    'max_depth':[4,8,16,24],\n    'ntrees':[50, 250, 1000]}\n\ngrid = H2OGridSearch(grid_search_gbm, hyper_params,\n                         grid_id='depth_grid',\n                         search_criteria={'strategy': \"Cartesian\"})\n#Train grid search\ngrid.train(x=predictors, \n           y=target,\n           training_frame=train_df,\n           validation_frame=valid_df)","6bab9e2b":"grid_sorted = grid.get_grid(sort_by='auc',decreasing=True)\nprint(grid_sorted)","45e9f8c4":"#Best Model\nbest_gbm = grid_sorted.models[0]\nprint(best_gbm)","b6cfc78c":"best_gbm.varimp_plot()","a18c123a":"pred_val = (best_gbm.predict(test_df[predictors])[0]).as_data_frame()\ntrue_val = (test_df[target]).as_data_frame()\nprediction_auc = roc_auc_score(pred_val, true_val)\nprediction_auc","ecdea3b7":"# Load Libraries","71195ba3":"# Grid Search","1f66a573":"# Check Important Variables","e1bc8d9c":"# Build Model","d3f7c809":"# Check Accuracy","41d7ac3a":"# Show all models","065a2991":"# Load Dataset ","2bae229e":"# Train Test Validation Split","9a5a7051":"# END","de6d9864":"# Get target and feature variables names","ac605bfa":"# Model Tuning"}}