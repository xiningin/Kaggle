{"cell_type":{"953e1d7a":"code","358a7c6a":"code","f8063d32":"code","814cc62f":"code","684cb9cd":"code","7835c8be":"code","778240c9":"code","3c822ed7":"code","15fc55f6":"code","770a829d":"code","16b91797":"code","eed24a4d":"code","0eea4e46":"code","f9e0c6d8":"code","230ea1d3":"code","80ce513b":"code","bf875420":"code","c330538d":"code","dc2ea323":"code","4fb0035b":"code","861ef812":"code","07fc5efd":"code","fcf3152e":"code","f56db52e":"code","fbb57dfc":"code","be55f0b3":"code","4a633e49":"code","04459d5f":"code","a2312032":"code","998d28a9":"code","e259cff7":"code","fc870c71":"markdown","a0733bd8":"markdown","ceae68f4":"markdown","c14912cb":"markdown","444b480d":"markdown","38e9b49e":"markdown"},"source":{"953e1d7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","358a7c6a":"import cv2 \nimport matplotlib.pyplot as plt","f8063d32":"nadia = cv2.imread('..\/input\/nadiamurad\/Nadia_Murad.jpg')\ndenis = cv2.imread('..\/input\/dennis\/Denis_Mukwege.jpg')\nsolvay = cv2.imread('..\/input\/solvay\/solvay_conference.jpg')","814cc62f":"plt.imshow(plt.imread(\"..\/input\/dennis\/Denis_Mukwege.jpg\"),cmap=\"gray\")","684cb9cd":"plt.imshow(plt.imread(\"..\/input\/nadiamurad\/Nadia_Murad.jpg\"),cmap=\"gray\")","7835c8be":"plt.imshow(plt.imread(\"..\/input\/solvay\/solvay_conference.jpg\"),cmap=\"gray\")","778240c9":"face_cascade = cv2.CascadeClassifier('..\/input\/frontalface\/haarcascade_frontalface_default.xml')","3c822ed7":"def detect_face(img):\n    \n  \n    face_img = img.copy()\n  \n    face_rects = face_cascade.detectMultiScale(face_img) \n    \n    for (x,y,w,h) in face_rects: \n        cv2.rectangle(face_img, (x,y), (x+w,y+h), (0,255,0), 10) \n        \n    return face_img\n    ","15fc55f6":"#Lets detect Denis's face\nresult = detect_face(denis) ","770a829d":"plt.imshow(result,cmap='gray')","16b91797":"#Lets detect Nadia's face\nresult = detect_face(nadia) \nplt.imshow(result)","eed24a4d":"#Lets detect scientists' faces in the famous science conference\nresult = detect_face(solvay) \nplt.imshow(result)","0eea4e46":"def adjusted_detect_face(img):\n    \n    face_img = img.copy()\n  \n    face_rects = face_cascade.detectMultiScale(face_img,scaleFactor=1.2, minNeighbors=5) \n    \n    for (x,y,w,h) in face_rects: \n        cv2.rectangle(face_img, (x,y), (x+w,y+h), (255,0,0), 10) \n        \n    return face_img","f9e0c6d8":"result = adjusted_detect_face(solvay)\nplt.imshow(result,cmap='gray')\n#Now it performs better","230ea1d3":"eye_cascade = cv2.CascadeClassifier(\"..\/input\/eyefile\/haarcascade_eye.xml\")","80ce513b":"def detect_eyes(img):\n    \n    face_img = img.copy()\n  \n    eyes = eye_cascade.detectMultiScale(face_img,scaleFactor=1.2, minNeighbors=5) \n    \n    \n    for (x,y,w,h) in eyes: \n        cv2.rectangle(face_img, (x,y), (x+w,y+h), (0,0,255), 10) \n        \n    return face_img\n    ","bf875420":"result = detect_eyes(nadia)\nplt.imshow(result)","c330538d":"messi = cv2.imread(\"..\/input\/messi2\/messi.jpg\")\nresult = detect_face(messi) \nplt.imshow(result)","dc2ea323":"def detect_eyes(img):\n    \n    face_img = img.copy()\n  \n    eyes = eye_cascade.detectMultiScale(face_img,scaleFactor=2, minNeighbors=0) \n    \n    \n    for (x,y,w,h) in eyes: \n        cv2.rectangle(face_img, (x,y), (x+w,y+h), (255,0,0), 1) \n        \n    return face_img","4fb0035b":"result = detect_eyes(messi)\nplt.imshow(result)","861ef812":"car = cv2.imread(\"..\/input\/carplate\/car_plate.jpg\")","07fc5efd":"def display(img):\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.figure(figsize=(12,10))\n    plt.imshow(img)","fcf3152e":"display(car)","f56db52e":"plate_cascade = cv2.CascadeClassifier(\"..\/input\/platecascade\/haarcascade_russian_plate_number.xml\")","fbb57dfc":"def detect_plate(img):\n    plate_img= img.copy()\n    face_rects = plate_cascade.detectMultiScale(plate_img)\n    for (x,y,w,h) in face_rects: \n        cv2.rectangle(plate_img, (x,y), (x+w,y+h), (255,255,255), 10) \n        \n    return plate_img","be55f0b3":"result = detect_plate(car)\ndisplay(result)\n#There are some problems, we need to adjust","4a633e49":"car2 = cv2.imread(\"..\/input\/carplate\/car_plate.jpg\")","04459d5f":"#In order detect better, we need to make some adjustments\ndef detect_plate2(img):\n    plate_img= img.copy()\n    face_rects = plate_cascade.detectMultiScale(plate_img,scaleFactor=1.3,minNeighbors=3)\n    #playing with scaleFactor and minNeighbors give us better results\n    for (x,y,w,h) in face_rects: \n        cv2.rectangle(plate_img, (x,y), (x+w,y+h), (0,0,255), 4) \n        \n    return plate_img","a2312032":"result = detect_plate2(car2)\ndisplay(result)","998d28a9":"# Now we will adjust the function in order to blur the detected plate, instead of just drawing a rectangle around it\ndef detect_and_blur_plate(img):\n    plate_img= img.copy()\n    regionof_interest = img.copy()\n    face_rects = plate_cascade.detectMultiScale(plate_img,scaleFactor=1.3,minNeighbors=3)\n    for (x,y,w,h) in face_rects: \n        regionof_interest = regionof_interest[y:y+h,x:x+w]\n        blurred_regionof_interest = cv2.medianBlur(regionof_interest,7)\n        plate_img[y:y+h,x:x+w] = blurred_regionof_interest\n    return plate_img","e259cff7":"result = detect_and_blur_plate(car2)\ndisplay(result)","fc870c71":"## 1. Face Detection:","a0733bd8":"Lets adjust our function because there aresom problems in the detection above","ceae68f4":"OpenCV comes with these pre-trained cascade files, we've relocated the .xml files for you in our own DATA folder.","c14912cb":"## 2. Detection of Objects in the Image:","444b480d":"#If we want to detect the face in a video, we can use this function below, but it does npot work with kaggle\n\n\ncap = cv2.VideoCapture(0) \n\nwhile True: \n    \n    ret, frame = cap.read(0) \n     \n    frame = detect_face(frame)\n \n    cv2.imshow('Video Face Detection', frame) \n \n    c = cv2.waitKey(1) \n    if c == 27: \n        break \n        \ncap.release() \n\ncv2.destroyAllWindows()","38e9b49e":"## 2. Detection of Eyes in the Image:"}}