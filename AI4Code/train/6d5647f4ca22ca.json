{"cell_type":{"a0690b73":"code","56332a14":"code","acb2e6a1":"code","a3b7aef5":"code","601d4346":"code","50379882":"code","24d6b30e":"code","3ac2eb38":"code","5bd22dc3":"code","d5732206":"code","5b2ae842":"code","40e7fc40":"code","eecb8b4f":"code","01e11468":"markdown"},"source":{"a0690b73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\ndirec = \"\/kaggle\/input\/cats-and-dogs-sentdex-tutorial\/PetImages\/\"\ncategories = ['Dog', 'Cat']\nfor category in categories:\n    path = os.path.join(direc, category)\n    for img in os.listdir(path):\n        img_read = cv2.imread(os.path.join(path, img))\n        new_read = cv2.resize(img_read, (100, 100))\n        plt.imshow(new_read)\n        break\n    break\n# Any results you write to the current directory are saved as output.","56332a14":"#load training_data\ntraining_data = []\nSIZE = 100   #fix the size for all images\nfor category in categories:\n    path = os.path.join(direc, category)\n    class_num = categories.index(category)\n    for img in os.listdir(path):\n        try:\n            img_read = cv2.imread(os.path.join(path, img))\n            new_read = cv2.resize(img_read, (SIZE, SIZE))\n            training_data.append([new_read, class_num])\n        except Exception as e:\n            pass\n\nprint(len(training_data))","acb2e6a1":"#Now shuffle the training data\nimport random\nrandom.shuffle(training_data)","a3b7aef5":"x = []\ny = []\nfor features, label in training_data:\n    x.append(features)\n    y.append(label)\n\nprint(str(len(x)) + \"  |  \" + str(len(y)))","601d4346":"x = np.array(x).reshape(-1, SIZE, SIZE, 3)\nprint(x.shape)\ny = np.array(y)\nprint(y.shape)\nX = x\/255.0\nplt.imshow(X[0])","50379882":"import tensorflow as tf\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D\nfrom keras.layers import BatchNormalization, Dropout\nprint('using Tensorflow with Keras')","24d6b30e":"model = Sequential()\nmodel.add(Conv2D(64, (3,3), kernel_initializer = 'he_normal', input_shape = X.shape[1:]))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D((3,3), strides = (2,2)))\nmodel.add(Dropout(rate = 0.5))\n\nmodel.add(Conv2D(128, (3,3), kernel_initializer = 'he_normal'))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D((3,3), strides = (2,2)))\nmodel.add(Dropout(rate = 0.5))\n\nmodel.add(Conv2D(256, (3,3), kernel_initializer = 'he_normal'))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D((3,3), strides = (2,2)))\nmodel.add(Dropout(rate = 0.5))\n\nmodel.add(Conv2D(512, (3,3), kernel_initializer = 'he_normal'))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D((3,3), strides = (2,2)))\nmodel.add(Dropout(rate = 0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(1024, use_bias = True))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(rate = 0.5))\n\nmodel.add(Dense(512, use_bias = True))\nmodel.add(Activation('relu'))\n\nmodel.add(Dense(128, use_bias = True))\nmodel.add(Activation('relu'))\n\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\nhistory = model.fit(X, y, batch_size = 64, epochs = 50, validation_split = 0.1)","3ac2eb38":"# summarize history for accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","5bd22dc3":"#test dataset\ntest_data = []\ndirec = \"\/kaggle\/input\/cat-and-dog\/test_set\/test_set\"\ncategories = ['dogs', 'cats']\nSIZE = 100   #fix the size for all images\nfor category in categories:\n    path = os.path.join(direc, category)\n    class_num = categories.index(category)\n    for img in os.listdir(path):\n        try:\n            img_read = cv2.imread(os.path.join(path, img))\n            new_read = cv2.resize(img_read, (SIZE, SIZE))\n            test_data.append([new_read, class_num])\n        except Exception as e:\n            pass\n\nprint(len(test_data))\n    ","d5732206":"random.shuffle(test_data)\ntest_x = []\ntest_y = []\nfor features, label in test_data:\n    test_x.append(features)\n    test_y.append(label)\ntest_x = np.array(test_x).reshape(-1, SIZE, SIZE, 3)\nprint(test_x.shape)\ntest_y = np.array(test_y)\nprint(test_y.shape)\ntest_x = test_x\/255.0\nplt.imshow(test_x[0])","5b2ae842":"val_loss, val_accu = model.evaluate(test_x, test_y)\nprint(val_loss)\nprint(val_accu)","40e7fc40":"model.summary()","eecb8b4f":"model.save(\"\/kaggle\/working\/catvsdog.h5\")\nprint('Saved Successfully')","01e11468":"Classifier trained on <b>22451<\/b> samples, validated on <b>2495<\/b> samples and tested on <b>2023<\/b> samples<br>\ntrain_accuracy = <b>96.00<\/b><br>\ndev_accuracy = <b>93.55<\/b><br>\nTest_accuracy = <b>97.16<\/b><br>\nfor better results use <b>data augmentation<\/b> "}}