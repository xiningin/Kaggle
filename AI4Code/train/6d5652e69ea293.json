{"cell_type":{"8861a75a":"code","0f913c65":"code","6a686e79":"code","4d95f24e":"code","f93a0603":"code","ad4c8c29":"code","63951ea1":"code","d7284c33":"code","981fab38":"code","e2f87912":"code","7093d0a0":"code","4df23a92":"code","ba17d6de":"code","cb6b3615":"code","21b03ffd":"code","bb1f851b":"code","0b2e38b2":"code","5859e3f3":"code","c374ec10":"code","50bd8d2f":"code","81ec231d":"code","13410b5e":"code","da07639e":"code","b6e1314a":"code","2bb48786":"code","fc5230b8":"code","8d56dbc8":"code","7844611f":"code","6b7215ca":"code","4a79548f":"code","b9678b2a":"code","8c865ecb":"code","e0fa9b3a":"code","b148f6e8":"code","96fc699e":"markdown","5976aca8":"markdown"},"source":{"8861a75a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f913c65":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import classification_report \nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n\nsns.set(style='white', context='notebook', palette='deep')","6a686e79":"#Load the train and test data from the dataset\ndf_train=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest=pd.read_csv('..\/input\/digit-recognizer\/test.csv')","4d95f24e":"df_train.info()","f93a0603":"test.info()","ad4c8c29":"Y_train = df_train[\"label\"]\n\n# Drop 'label' column\nX_train = df_train.drop(labels = [\"label\"],axis = 1) \n\n# free some space\ndel df_train \n\ng = sns.countplot(Y_train)\n\nY_train.value_counts()","63951ea1":"print(X_train.shape)\nprint(test.shape)","d7284c33":"# Checking the training data dose it has any null value or not\nX_train.isnull().any().describe()","981fab38":"# Checking the testing data dose it has any null value or not\n\ntest.isnull().any().describe()","e2f87912":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\n# -1 is used to identify the total amount of training and testing samples respectively\n\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","7093d0a0":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","4df23a92":"print(X_train.shape)\nprint(test.shape)","ba17d6de":"# Encode labels to vectors by using one hot encoding(ex : 6 -> [0,0,0,0,0,0,1,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)\nprint(Y_train[0])","cb6b3615":"# Split the train and the validation set for the fitting\nrandom_seed=2\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=random_seed)","21b03ffd":"# Some examples\nExample = plt.imshow(X_train[0][:,:,0])","bb1f851b":"model = Sequential()","0b2e38b2":"# Set the CNN model \n# my CNN architechture is In -> [[Conv2D->relu]*2 -> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dense(10, activation = \"softmax\"))","5859e3f3":"model.summary()","c374ec10":"# Define the optimizer\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","50bd8d2f":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","81ec231d":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\n\nepochs = 30 \nbatch_size = 86","13410b5e":"# With data augmentation to prevent overfitting (accuracy 0.99286)\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","da07639e":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","b6e1314a":"# ... Visualize performance\nhistory_dict = history.history\nepochs = history.epoch\ntrain_accuracy = history_dict['accuracy']\nval_accuracy = history_dict['val_accuracy']\n\nplt.figure()\nplt.plot(epochs, train_accuracy, c='b')\nplt.plot(epochs, val_accuracy, c='r')\nplt.title('learning curves')\nplt.ylim(0.9,1)\nplt.ylabel('accuracy')\nplt.xlabel('epochs')\nplt.show()","2bb48786":"# evaluate the keras model\naccuracy = model.evaluate(X_train, Y_train)\nprint(f'Train results - Accuracy: {accuracy[1]*100}%')","fc5230b8":"# evaluate the keras model\naccuracy = model.evaluate(X_val, Y_val)\nprint(f'validation test results - Accuracy: {accuracy[1]*100}%')","8d56dbc8":"# summarize history for accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation test'], loc='upper left')\nplt.show()","7844611f":"# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation test'], loc='upper left')\nplt.show()","6b7215ca":"# Predict the values from the validation dataset\npredict_val = model.predict(X_val)\n\n# Convert predictions classes to one hot vectors \ny_val_pred=( np.argmax(predict_val,axis=1))\n\n# Convert validation observations to one hot vectors\ny_true = np.argmax(Y_val,axis = 1) ","4a79548f":"# Performance evaluation of the model for validation set\nresults = confusion_matrix(y_true,y_val_pred) \nprint ('Confusion Matrix :')\nprint(results) \nprint ('Accuracy Score :',accuracy_score(y_true,y_val_pred))\nprint ('Report : ')\nprint (classification_report(y_true,y_val_pred))","b9678b2a":"# Calculating AUC(Area under the ROC curve) score for the model\nval_lr_probs = model.predict_proba(X_val)\nval_lr_auc = (roc_auc_score(y_true, val_lr_probs, multi_class=\"ovr\",average=\"macro\"))*100\nprint(\"AUC :%.2f%%\"%(val_lr_auc))","8c865ecb":"# Predict the values from the validation dataset\npredictions = model.predict(test)\n\n# Convert predictions classes to one hot vectors \ny_pred= np.argmax(predictions,axis=1)","e0fa9b3a":"results = pd.Series(y_pred,name=\"Label\")","b148f6e8":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"submission.csv\",index=False)","96fc699e":"## **MNIST Hand written Digit Recognition & Classification using CNN Deep Learning Framework**\n\n### **Contents of the Notebook:**\n\n* Loading test and train dataset\n* Checking null value\n* Data pre-processing\n* Image Augmentation\n* Model Development and train the model\n* Performance evaluation for validation set\n* Performance evaluation for testing set\n\n### **Dataset Description:**\n\n* The data files train.csv and test.csv contain gray-scale images of hand-drawn digits, from zero through nine.\n* The training set consist of 42000  samples and testing dataset consist of 28000  samples where in the dataset each row consist of a label and pixels from 1 to 784 which represent a single 28x28 pixel image with grayscale values between 0-255.\n* Kaggle Digit-Recognizer dataset Link : [https:\/\/www.kaggle.com\/c\/digit-recognizer\/data](https:\/\/www.kaggle.com\/c\/digit-recognizer\/data)\n\n### ***Let's jump in :)***","5976aca8":"### ***Please upvote if you like the notebook. :)***"}}