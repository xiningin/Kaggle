{"cell_type":{"02675abe":"code","2684e5b0":"code","eb39d520":"code","535ad2c0":"code","2d49aa2a":"code","b6e6b9cb":"code","f7ece33a":"code","b06ba062":"code","0b19739b":"code","5b87234b":"code","a4df09a5":"code","35c3395e":"code","c2ceed6d":"markdown","f4ae94ac":"markdown","74959e7f":"markdown","8be3196c":"markdown","a7033894":"markdown","ab5e9d4a":"markdown","ebd3ad94":"markdown","24d6d772":"markdown","d759d8b4":"markdown","5ffb743a":"markdown","07dd7ab0":"markdown","dcda5ed1":"markdown","765d2d21":"markdown","dfe1ad96":"markdown","f4b1ee0d":"markdown"},"source":{"02675abe":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport sys\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nprint(os.listdir('..\/input'))\n\nnRowsRead = None # specify 'None' if want to read whole file\ndf1 = pd.read_csv('..\/input\/diabetic.csv',sep=',',decimal='.', nrows = nRowsRead,header=0,error_bad_lines=False)\n#df1.dataframeName = 'diabetic.csv'\n#nRow, nCol = df1.shape\n#print(f'There are {nRow} rows and {nCol} columns')\n\n#start with a date (as for simple logging with time stamp)\n#print pd.to_datetime(pd.Timestamp.toda, format='%Y-%m-%d', errors='raise', infer_datetime_format=False, exact=True)\n\n#print (pd.to_datetime(pd.Timestamp.toda, format='%Y-%m-%d', errors='raise', infer_datetime_format=False, exact=True))\n#range = pd.date_range('2018-01-21', '2015-12-31',freq=24hour) # freq='15min')\n#df = pd.DataFrame(index = range)\n\n\n# repair malformated data updates :\ndf1.rename( columns={\"weekday\":\"day\"},inplace =\"true\") # to better fit screen\ndf1.rename (columns = {\"0700i\":\"i0700\",\"0930i\":\"i0930\",\"1300i\":\"i1300\",\"1500i\":\"i1500\",\"1800i\":\"i1800\",\"2300i\":\"i2300\"},inplace = \"true\") \ndf1.rename (columns={\"1i300\":\"i1300\"},inplace = \"true\")\n#print(pd.get_option(\"display.max_columns\"))\n                     \ndf1.head(25)","2684e5b0":"dfi =df1[['day','i0700','i0930','i1300','i1500','i1800','i2300']].copy()\ndfi.fillna(0,inplace=True) # while i dont want to fill unknown measurements we can replace NAN in insuline dose safely. (allows for math)\nb = dfi.set_index('day').stack(dropna=False)\n\ndfi=b.reset_index(drop=False, level=0).reset_index()\ndfi.columns= ['InsulinTime', 'InsulinDay', 'Insulin']\ndfi.head(7)","eb39d520":"dfiDayTotal = df1[['day','i0700','i0930','i1300','i1500','i1800','i2300']].copy()\ndfiDayTotal.fillna(0,inplace=True)\ndfiDayTotal['InsulinTotal'] = dfiDayTotal['i0700']+dfiDayTotal['i0930']+dfiDayTotal['i1300']+dfiDayTotal['i1500']+dfiDayTotal['i1800']+dfiDayTotal['i2300']\ndfiDayTotal.drop(['i0700','i0930','i1300','i1500','i1800','i2300'], 1, inplace=True)\ndfiDayTotal['DayIndex']=np.arange(len(dfiDayTotal))\ndfiDayTotal.head(7)","535ad2c0":"df2 = df1.loc[:, 'day':'M2300']\na = df2.set_index('day','Glucose').stack(dropna=False)\n\ndf2 = a.reset_index(drop=False, level=0).reset_index()\ndf2.columns= ['time', 'day', 'GlucoseLevel']\n\ndf2['ID'] = np.arange(len(df2))\ndf2 =  pd.concat([df2, dfi], axis=1, sort=False)\ndf2.drop('InsulinDay', 1, inplace=True)\ndf2.drop('InsulinTime', 1, inplace=True)\ndf2.columns= ['time', 'day', 'GlucoseLevel','ID','Insulin']\ndf2 = df2[['ID', 'time','day','GlucoseLevel','Insulin']]\n\ndf2['DayIndex']= np.ceil((df2['ID']+1)\/7).astype(int)-1 # to merge it with Daytotal.\n#temp = dfiDayTotal.filter(['DayIndex','InsulinTotal'],axis=1)# old.filter(['A','B','D'], axis=1)\n#df2 = pd.merge(df2, temp, left_on='DayIndex', right_on='DayIndex')\ndf2 = pd.merge(df2, dfiDayTotal.filter(['DayIndex','InsulinTotal'],axis=1), left_on='DayIndex', right_on='DayIndex') #joined without using temp\ndf2.head(11)\n\n","2d49aa2a":"df2 = df2[df2.day != 6] # deleting saturdays\ndf2 = df2[df2.day != 7] # deleting sundays\n\ndf1 = df1[df1.day != 6] # deleting saturdays\ndf1 = df1[df1.day != 7] # deleting sundays\n\ndfi = dfi[dfi.InsulinDay != 6] # deleting saturdays\ndfi = dfi[dfi.InsulinDay != 7] # deleting sundays\n\ndfiDayTotal = dfiDayTotal[dfiDayTotal.day != 6] # deleting saturdays\ndfiDayTotal = dfiDayTotal[dfiDayTotal.day != 7] # deleting sundays\nprint('Weekend data deleted')","b6e6b9cb":"cc=['g','g','g','g','g','g','g','r','r','r','r','r','r','r']# days swap collor, its simple i'm not a pro in this.\n\nax = df2.plot.scatter(x='ID', y='InsulinTotal', color='DarkBlue', label='Insulin day total',alpha=0.1);\nbx = df2.plot.scatter(x='ID', y='Insulin', color='LightBlue', label='Insulin dose',alpha=0.2,ax=ax,s=65);\ndf2.plot(kind='scatter',x='ID',y='GlucoseLevel',label = 'GlucoseLevel',c=cc,figsize=(20,8),ax=bx)#,c='day'\ndf2.plot(kind='scatter' ,x='ID', y='Insulin',color='black',figsize=(20,4),label = 'Insulin per dose')\n\n\n#from pandas.plotting import scatter_matrix \n#scatter_matrix(df2, alpha=0.2,figsize=(20,20))\n\ndfiDayTotal.plot(kind='scatter',x='DayIndex',y='InsulinTotal',label = 'Total insulin per day',figsize=(20,4))#,c='day')","f7ece33a":"dfMorning = df1.filter(['day','M0700','M0930','i0700'])\n#dfMorning = dfMorning[dfMorning.weekday != 6] # deleting saturdays\n#dfMorning = dfMorning[dfMorning.weekday != 7] # deleting sundays\n\n\ndfMorningSorted = dfMorning.sort_values('M0700')\n##dfMorning.head(50)\ndfMorningSorted['InsulineEffect']=(dfMorningSorted['M0700']-dfMorningSorted['M0930'])\/dfMorningSorted['i0700']\ndfMorningSorted.head(12)\n","b06ba062":"dfm = dfMorningSorted [dfMorningSorted.InsulineEffect>0.0] # for the moment deleting strange negative values\ndfNegative = dfMorningSorted [dfMorningSorted.InsulineEffect<0.0] \n\n# plot a scatter and connect the dots\nax = dfm.plot(kind='scatter', x='M0700', y='InsulineEffect',color='blue')\ndfm.plot(kind='line', x='M0700', y='InsulineEffect',color='green',ax=ax, label = 'Effective insuline')\n\nbx = dfNegative.plot(kind='scatter', x='M0700', y='InsulineEffect',color='blue',ax=ax)\ndfNegative.plot(kind='line', x='M0700', y='InsulineEffect',color='red',ax=ax,linestyle = ':', label = 'On bad days' )\nax.set(ylabel=\"Insuline effect per unit\", xlabel=\"blood glucose level\")","0b19739b":"plt.style.use('ggplot') \n\nplt.rcParams[\"figure.figsize\"] = (13,12)\nplt.ylim([2, 15])\nplt.xlim([2, 6.5])\nplt.title(\"Glucose from 7:00 morning to 9:30 by insulin adjustment\", fontsize=20)\nplt.ylabel('Glucose level', fontsize=20)\nplt.xlabel('Insulin dose', fontsize=20)\nax = plt.gca()\nax.tick_params(axis = 'both', which = 'major', labelsize = 16)\nax.tick_params(axis = 'both', which = 'minor', labelsize = 8)\n#plt.xticks(np.arange(min(0), max(6)+1, 1.0))\n\nplt.yticks(np.arange(0, 15, step=1))\nplt.xticks(np.arange(0, 8.5, step=.5))\n\n\nfor index, row in df1.head(len(df1)).iterrows():\n    mhw=0.15\n    mlw=1.5\n    x =0\n    a = 1 \/len(df1)*index*0.7+0.3\n    y= row['M0700']\n    dx = row['i0700']\n    dy = row['M0930']-row['M0700']\n    if ((row['M0930']> 5) and (row['M0930']<10)):\n        if (dy>0):\n            plt.arrow(x,y,dx,dy,head_width=mhw,shape='right',lw=mlw,alpha=.9*a,color='blue')\n        else:\n            plt.arrow(x,y,dx,dy,head_width=mhw,shape='right',lw=mlw,alpha=.9*a,color='green')\n    else:\n        if ((row['M0930']> 3.5) and (row['M0930']<11.5)):\n            plt.arrow(x,y,dx,dy,head_width=mhw,shape='right',lw=mlw,alpha=.9*a,color='orange')\n        else:\n            plt.arrow(x,y,dx,dy,head_width=mhw,shape='right',lw=mlw,alpha=.9*a,color='red')\n    #plt.text(dx, dy, dx, fontsize=9)\nplt.show()","5b87234b":"#Needs a FIX because an extra doses could have been given at 15:00 (kink in a line..)\nplt.style.use('ggplot') \nplt.rcParams[\"figure.figsize\"] = (20,10)\nplt.ylim([2, 15])\nplt.xlim([2, 6.5])\nplt.title(\"Glucose from 13:00 morning to 15:00 by insulin adjustment\", fontsize=20)\nplt.ylabel('Glucose level', fontsize=20)\nplt.xlabel('Insulin dose', fontsize=20)\nax = plt.gca()\nax.tick_params(axis = 'both', which = 'major', labelsize = 16)\nax.tick_params(axis = 'both', which = 'minor', labelsize = 8)\n\nplt.yticks(np.arange(0, 15, step=1))\nplt.xticks(np.arange(0, 12.5, step=.5))\n\nlinestyle='-'\nmhw=0.15\nmlw=1.5\nfor index, row in df1.head(len(df1)).iterrows():\n    x =0\n    y= row['M1300']\n  \n    dx = row['i1300']\n    a = 1 \/len(df1)*index*0.7+0.3\n    if (not np.isnan(row['i1500'])):\n        #dx=dx+row['i1500']\n        #linestyle=':'\n        temp=0\n    \n    dy = row['M1500']-row['M1300'] \n\n    if(x+y+dx+dy>0):   #PLACE FOR AFIX \n        if ((row['M1500']> 5) and (row['M1500']<10)):\n            if (dy>0):\n                plt.arrow(x,y,dx,dy,head_width=mhw,shape='right',lw=mlw,alpha=.9*a,color='blue',linestyle=linestyle)\n            else:\n                plt.arrow(x,y,dx,dy,head_width=mhw,shape='right',lw=mlw,alpha=.9*a,color='green',linestyle=linestyle)\n        else:\n            if ((row['M1500']> 3.5) and (row['M1500']<11.5)):\n                plt.arrow(x,y,dx,dy,head_width=mhw,shape='right',lw=mlw,alpha=.9*a,color='orange',linestyle=linestyle)\n            else:\n                plt.arrow(x,y,dx,dy,head_width=mhw,shape='right',lw=mlw,alpha=.9*a,color='red',linestyle=linestyle)\nplt.show()","a4df09a5":"# todo make a graph for the evening but there is some incosistancy of later measurements 20:00 andd 23:00 and sometimes none.\n# not often insuline is used at 1500 how to deal with that..\nplt.style.use('ggplot') \n\nplt.rcParams[\"figure.figsize\"] = (10,10)\nplt.ylim([2, 15])\nplt.xlim([2, 6.5])\nplt.title(\"Glucose from 13:00 morning to 18:00 by insulin adjustment\", fontsize=20)\nplt.ylabel('Glucose level', fontsize=20)\nplt.xlabel('Insulin dose', fontsize=20)\nax = plt.gca()\nax.tick_params(axis = 'both', which = 'major', labelsize = 16)\nax.tick_params(axis = 'both', which = 'minor', labelsize = 8)\n#plt.xticks(np.arange(min(0), max(6)+1, 1.0))\nplt.yticks(np.arange(0, 15, step=1))\nplt.xticks(np.arange(0, 6.5, step=.5))\n\nfor index, row in df1.head(len(df1)).iterrows():\n    end = 'M1800'\n    start = 'M1300'\n    x =0\n    y= row['M1300']\n    dx = row['i1500']\n    dy = row[end]-row['M1300']\n    a = 1 \/len(df1)*index*0.7+0.3\n    if ((row[end]> 5) and (row[end]<10)):\n        if (dy>0):\n            plt.arrow(x,y,dx,dy,head_width=.1,shape='right',alpha=.9*a,color='blue')\n        else:\n            plt.arrow(x,y,dx,dy,head_width=.1,shape='right',alpha=.9*a,color='green')\n    else:\n        if ((row[end]> 3.5) and (row[end]<11.5)):\n            plt.arrow(x,y,dx,dy,head_width=.1,shape='right',alpha=.9*a,color='orange')\n        else:\n            plt.arrow(x,y,dx,dy,head_width=.1,shape='right',alpha=.9*a,color='red')\n\nplt.show()","35c3395e":"# to be written ...","c2ceed6d":"**The usability of this dataset**\nThe most usefull shared here of this data experiment have been the custom graphics.   \nThose lines give a overview of insuline levels and the dose, and the result.   \nFrom it safe levels of insuline can be determinid so you dont endup to high or to low.\n\n","f4ae94ac":"## Exploratory Analysis\nAt first i will load the data and import required libraries, you can expand the code to see it.\nThe bloodGlucose level is inside M---- while the inslune dose in in ----i where  (--- = time ).  M for measurement i for insulin  *(  i  small not capital so you wont mistake it for another character.)*","74959e7f":"## The dataframe : DfiDayTotal, total insulin per day\nA simple table of Insuline totals per day, to check for high \/ low demand or other statistics.","8be3196c":"## Is the reaction to insuline usually equal ?  \nOr is there some relation depending to bloodsuger level (on the bottem).   \nNotice sometimes insuline doenst seam to help at all, he calls them bad days \n\n**Notice we dont have that much samples**   \nSo this might be a bit biased view for the moment.   \nWith more data in the future this might get interesting.  ","a7033894":"## Work in progress \nThis is a work in progress I require more data for sure (as we can clearly see from above we have strange results see 9.0 mornings.) Those numbers are real though, and it oultines the problems he has to live width on a daily basis.  From above i think i should pre select values maybe on average response or ignore weird responses. (no worries as if his doses is wrong he will check no 9:30 and takes aditional insulin if required, again by a best guess. Side notes in above you see a lot of 4.0 doses thats because he usely did do 4 in the morning. I want to have a base of measurements as well, but one might determine how unlikely some responses are, and how common other responses are. (ea last on 14.7 to 11.7 doses 5 seams still to low dose, but drop is roughly as in the one above it (still to high as well), but seams a reasonable response.  (kinda wished i could plot colors in above table).","ab5e9d4a":"## The evening\nData is less stable after work hours (evening meals differ more)   \nthis graph is not yet ready therefor (data requires more processing).   \n**NOT READY MATH NEEDS ADJUSTMENTS**","ebd3ad94":"## Deleting weekends from all dataframes\nJust to improve data, as its known that the weekends are not that regular as work activity.   \nIf one skips this step then weekends are included (todo would be nice to have some checkbox \/ question here ea include weekends ? (j\/n)).","24d6d772":"## Back to the non linear sequence, lets sort it on glucose level off only workday mornings.\nGreat title, but put plain simple, what if one doesnt want to use the previous single column.  \n**df1** constains the original data as from the csv file   \nBut from that i can create **dfMorning**, with only a few columns in it, and research their possible relations.   \nBecause weekends are verry chaotic i also simply skip that data, lets solve that later.   ","d759d8b4":"# Finding bad days\nLets define bad days differently not by insulin effectiveness.   \nBut by how many extra doses where given that day.   \nMaybe a pattern can be found.like mondays are worse (weekend recovery), kinda doubt that.  \nOr perhaps near the end of the week (tired of work) things get worse.  \nReminding diabetis is a disease that distorts the bodies energy process.  \n\nnot ready not ideal maybe different  ","5ffb743a":"## DF2 sequental insuline \nShowing 11 entries here but this table is quit large since all samples follow each per row now\nAlso this table contains column insulin total for that day","07dd7ab0":"## Introduction\nThis Dataset and Kernel is not only my attempt to explore and eventually solve insuline regulation.   \nIt also serves as a starting kernel for others and better real data for people interested in this topic.   \nThese days insuline data is not easy to get, this wasnt always the case.  \nThe kernel contains some usefull data reshapes, and basic plotting.  \nI dont have that much data yet, but i will update when I get more data. \n\nIn this kernel i will first focus on reshaping the data, and getting the weekday morning data.      \nMornings do not require a lot of energy (carbonhydrates \/ sugar), the body is 'fairly' stable and relaxed then..    \nHowever under certain conditions a diabetics can in their sleep make sugar in the liver  (happens to my girlfriend).   \nSo my girlfriend has frequently mornings with higher glucose readings. The human metabolism is a complex.   \n\nLater on I will hope to use also use the mid-day readings and beyond, taking into acount total insuline intake during that day.    \n(as overal this would stick to some average over multiple days).  \n\n\n## Spoiler allert  (read me!!)\nThe main value of my posting turned out to be the custom graph's and data filterings I made.  \nA graph showing lines combining previous level - dose - outcome level, and with a history based upon transparancy.   \nI'm showing multiple dimensional data in a clear view (i have a background in art  and design).  \nThe graph's are a novel way to to find the glucose needs.    \nFrom it people with unstable diabetic reactions, might be able to better determine a proper dose.\n\nRealizing the effect of the graphics,      \nI made handmade tables of the most common safe dosis and it worked out well.   \nWith an aim to keep the diabetic at around 3.5 - 6 (later the hospital wanted it a bit higher  inbetween 6 - 10).   \nIt worked remarkable well though.    \nEventually data collection was stopped, as she got an omnipod and the way the device works made her less randomly react to it.    \n(using a different insulin as well). Its still sometimes that we look upon it, and so i believe these graph's have great value.   \n\nI have trained a neural net on it, that worked quite well, though paper tables dont require batteries, and thus are more safe.   \nThe idea here is to make better educated guesses (as a neural net would).   \nThough I leave it up to the user, as he \/ she can see his \/her historic data and the effect of the doses.    \nFeel free to use this yupiter notebook inside your own google drive where you can keep your own private dataset.\n\n## The results of this data experiment\nThe result of this experiment, resulted in better advice for my girlfrend insuline requirements.   \nTo keep her out of dangerous (life threatening levels), and keep here stable.   \nIn her situation this really a problem due to her nature of diabetics, some people act stable but she wasnt that stable.  \n","dcda5ed1":"## Create a simple graph of it.\nI'm no expert in this, but here we have a simple graph of the data.  \nI took a scatter its less distracting then lines, used the Index as sequence  \nVagely it seams to show two bands upper and lower ( like if it doesnt like to be at 6 )... (hmm but its too early still).  \nTo me though it shows cleary how chaotic the response is, alsmost as if a thermostate went crazzy (thinking back about fussz logic   \nFor the first graphics each day is colored in a different color ea red green red green.. (otherwise i got lost here..).   \nAmazingly week 2, where is used a table advice to keep him at 4, isnt even using the most insulin over a week...   \nI think i hit something important here, but 4 isnt our goal...","765d2d21":"## The dataframe : dfi,  sequental verticle list of insulin\nTo investigate this problem some might prefer a long sequental list.  ","dfe1ad96":"# Visually compare insulin effect after lunch time (13:00)\nThe previous morning graph would continou with the graph below.  \nHwever we cannot extend the graph since its based upon dose.  \nOne might also notice a bit higher doses here, but keep in mind that he's taking a meal and has to take a bit more.  \nThe graph goes often towards 4 as result of a earlier (but wrong) goals, we need to focus on between 6 and 10 here.   ","f4b1ee0d":"## Visually comparing insulin effect of dose in the morning.\nWe humans are better in visuals then we are in numbers, having good graphics is important.  \nSo far we've seen the diabetic reaction to insulin is a has a noisy \/ chaotic pattern.   \nThis makes it extra difficult to analyze, we dont have a simple calculation where the result of A + B = C   \nIts more like A + B + random = C + random.   \nRandom has side effects it can mean no effect of dropping in glucose, or dropping to much.\n\n\n**I need create a new kind of graphics to visualize this, to make it clear :**\n* What starting glucose level is and how much insuline was used to get to a certain value\n* The dangerous zone values say below 3.5 or a 11.5 make it red\n* The good values in between 6 - 10 use a non warning color make it bleu (raising) or geen (lowering)\n* Do we went in between dangerous and good zones make it orange we dont want to be there either.\n* By adjusting transparancy let old samples be vaguely visible and new samples be strongly colored.\n\n\n### Quick conclusion  below graph\nAdding a dose of 4.0 usually lowers, only 2 blue lines + 1 orange raise, 11 go down.   \nAdding a dose of 3.3 stays near stable 2 times, one time raises strong (from 6 to 8)   \nAdding dose of around 3.7 lowers slightly 2 times.   \nWhen on 9 a dose of 4 can stay 9 or drop to 3, i think both are exceptional reactions, some how from 9 a lot of wild lines apear...   "}}