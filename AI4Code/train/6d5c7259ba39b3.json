{"cell_type":{"93f0e090":"code","3492e87a":"code","f188e01d":"code","52a80dcd":"code","49b201a0":"code","3805dacc":"code","9cec48fc":"code","c7878444":"code","266ff2eb":"code","3ad3870e":"code","a59c0320":"code","71ef4a27":"code","d2c447d1":"code","92c456fa":"code","2a05f788":"code","202d8c68":"code","1045c34e":"code","19088b8a":"code","755b3f04":"code","192e8ed5":"code","b13100cc":"code","a1935d59":"code","9086b598":"markdown","64b59257":"markdown","543862f5":"markdown","dbc05d09":"markdown","546c5304":"markdown","845b77ac":"markdown","d5e070ca":"markdown","cb6d93a9":"markdown","73a3c183":"markdown","7e316de7":"markdown","2cae6beb":"markdown"},"source":{"93f0e090":"pip install -U lightautoml","3492e87a":"# Standard python libraries\nimport os\nimport time\nimport joblib\n\n# Installed libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import train_test_split\n\n# Imports from our package\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task","f188e01d":"N_THREADS = 4 # threads cnt for lgbm and linear models\nN_FOLDS = 5 # folds cnt for AutoML\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 3600 # Time in seconds for automl run\nTARGET_NAME = 'target'\nLOAD_PRETRAINED = True","52a80dcd":"%%time\n\ntrain_data = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/train.csv')\ntrain_data[TARGET_NAME] = train_data[TARGET_NAME].str.slice(start=6).astype(int) - 1\ntrain_data.head()","49b201a0":"test_data = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/test.csv')\ntest_data.head()","3805dacc":"submission = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/sample_submission.csv')\nsubmission.head()","9cec48fc":"def create_gr_feats(data):\n    pass\n    \nif not LOAD_PRETRAINED:\n    all_df = pd.concat([train_data, test_data]).reset_index(drop = True)\n    create_gr_feats(all_df)\n    train_data, test_data = all_df[:len(train_data)], all_df[len(train_data):]\n    print(train_data.shape, test_data.shape)","c7878444":"train_data.head()","266ff2eb":"%%time\n\ntask = Task('multiclass',)","3ad3870e":"%%time\n\nroles = {\n    'target': TARGET_NAME,\n    'drop': ['id'],\n}","a59c0320":"%%time \n# Model training\nif not LOAD_PRETRAINED:\n    automl = TabularUtilizedAutoML(task = task, \n                                   timeout = 3 * TIMEOUT,\n                                   cpu_limit = N_THREADS,\n                                   reader_params = {'n_jobs': N_THREADS},\n                                   configs_list=[\n                                       '..\/input\/lightautoml-configs\/conf_0_sel_type_0.yml',\n                                       '..\/input\/lightautoml-configs\/conf_1_sel_type_1.yml'\n                                   ])\n    oof_pred_1 = automl.fit_predict(train_data, roles = roles)\n    print('oof_pred:\\n{}\\nShape = {}'.format(oof_pred_1[:10], oof_pred_1.shape))","71ef4a27":"%%time\n\n# Fast feature importances calculation\nif not LOAD_PRETRAINED:\n    fast_fi_1 = automl.get_feature_scores('fast', silent = False)\n    fast_fi_1.set_index('Feature')['Importance'].plot.bar(figsize = (20, 10), grid = True)","d2c447d1":"%%time\n# Model prediction\nif not LOAD_PRETRAINED:\n    test_pred_1 = automl.predict(test_data)\n    print('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred_1[:10], test_pred_1.shape))\n\n    print('Check scores...')\n    print('OOF score: {}'.format(log_loss(train_data[TARGET_NAME].values, oof_pred_1.data)))","92c456fa":"%%time \n# Model training\nif not LOAD_PRETRAINED:\n    automl = TabularUtilizedAutoML(task = task, \n                                   timeout = 5 * TIMEOUT,\n                                   cpu_limit = N_THREADS,\n                                   reader_params = {'n_jobs': N_THREADS},\n                                   configs_list=[\n                                       '..\/input\/lightautoml-configs\/conf_4_sel_type_0_no_int.yml',\n                                       '..\/input\/lightautoml-configs\/conf_5_sel_type_1_tuning_full.yml',\n                                       '..\/input\/lightautoml-configs\/conf_6_sel_type_1_tuning_full_no_int_lgbm.yml'\n                                   ])\n    oof_pred_2 = automl.fit_predict(train_data, roles = roles)\n    print('oof_pred:\\n{}\\nShape = {}'.format(oof_pred_2[:10], oof_pred_2.shape))","2a05f788":"%%time\n\n# Fast feature importances calculation\nif not LOAD_PRETRAINED:\n    fast_fi_2 = automl.get_feature_scores('fast', silent = False)\n    fast_fi_2.set_index('Feature')['Importance'].plot.bar(figsize = (20, 10), grid = True)","202d8c68":"%%time\n# Model prediction\nif not LOAD_PRETRAINED:\n    test_pred_2 = automl.predict(test_data)\n    print('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred_2[:10], test_pred_2.shape))\n\n    print('Check scores...')\n    print('OOF score: {}'.format(log_loss(train_data[TARGET_NAME].values, oof_pred_2.data)))","1045c34e":"if not LOAD_PRETRAINED:\n    best_score = 10000\n    best_w = None\n    for w in np.arange(0, 1.01, 0.01):\n        preds = w * oof_pred_1.data + (1 - w) * oof_pred_2.data\n        sc = log_loss(train_data[TARGET_NAME].values, preds)\n        if sc < best_score:\n            best_score = sc\n            best_w = w\n            print(best_w, best_score)\n\n    print('=' * 30)\n    print(best_w, best_score)","19088b8a":"if not LOAD_PRETRAINED:\n    test_preds = best_w * test_pred_1.data + (1 - best_w) * test_pred_2.data","755b3f04":"if LOAD_PRETRAINED:\n    # Load calculated data from v10 of this kernel. Let's try to build an average of this 2 LightAutoML models\n    oof_pred_1, oof_pred_2, test_pred_1, test_pred_2 = joblib.load('..\/input\/tps-may-computed-data\/oof_and_test_v10.pkl')\n    test_preds = 0.5 * test_pred_1.data + 0.5 * test_pred_2.data","192e8ed5":"submission.iloc[:, 1:] = test_preds\nsubmission.to_csv('lightautoml_2variants_ensemble.csv', index = False)","b13100cc":"submission","a1935d59":"if not LOAD_PRETRAINED:\n    joblib.dump((oof_pred_1, oof_pred_2, test_pred_1, test_pred_2), 'saved_oof_and_preds_from_ensemble.pkl')","9086b598":"## Step 4. Train on full data (variant 2)","64b59257":"# Step 0.5. Add new features","543862f5":"#### Please upvote if you find the notebook useful\n\n# Step 0.0. Install LightAutoML","dbc05d09":"## Step 2. Setup columns roles","546c5304":"# Step 0.1. Import necessary libraries ","845b77ac":"## Step 5. Ensembling","d5e070ca":"# ========= AutoML preset usage =========\n\n\n## Step 1. Create Task","cb6d93a9":"## Step 6. Prepare submission","73a3c183":"# Step 0.3. Data load ","7e316de7":"## Step 3. Train on full data (variant 1)","2cae6beb":"# Step 0.2. Parameters "}}