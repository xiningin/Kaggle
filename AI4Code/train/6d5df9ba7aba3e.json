{"cell_type":{"65690647":"code","a6fccc73":"code","f0b0b1ff":"code","0fc322a6":"code","c62b951f":"code","fa66bd61":"code","14427352":"code","41cbe397":"code","e3511473":"code","0a9dc0ff":"code","2e6b8904":"code","0d5d8107":"code","e53de2e7":"code","6039930b":"code","4922cda1":"code","960d3a7a":"code","25ca2ba0":"code","505c549e":"code","5c204401":"code","2e48562d":"code","2aa70709":"code","c6483521":"code","00bca028":"code","a3173b4b":"code","ad427038":"code","71b23339":"code","d2a33995":"code","32e660c9":"code","c16efdea":"code","0f5ee55c":"code","a9df66fa":"code","48b74920":"code","ef01fbb4":"code","96ecf28c":"code","c32a97a6":"code","c053cd48":"code","ec775764":"code","89c72564":"code","6af23e56":"code","facc5fea":"code","498e60da":"markdown","3b86d001":"markdown","615dbfed":"markdown","171d883f":"markdown","1265a012":"markdown","ea875523":"markdown","eda23954":"markdown","9f85841d":"markdown","b49860c5":"markdown","ebdc7d4b":"markdown","06dc613e":"markdown","343d4d83":"markdown","0e9ac99e":"markdown","79f5f43c":"markdown","d16e8ee9":"markdown","c3fbaa94":"markdown","b5b61bdf":"markdown","50394fba":"markdown","6674764d":"markdown","11e0b481":"markdown","9b3ecc47":"markdown","1775ac13":"markdown","cecb5224":"markdown","4c1007ee":"markdown","e855bce5":"markdown","fa6eebdf":"markdown","496e966a":"markdown","f56a9577":"markdown","88d17521":"markdown","f2961a04":"markdown","f5f6736e":"markdown","e52705bd":"markdown","9a2e88ab":"markdown","476aef4f":"markdown","9e3cb1b8":"markdown","8b042865":"markdown"},"source":{"65690647":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sb\nmatches = pd.read_csv(\"..\/input\/ipl-cricket-dataset\/matches.csv\")\ndeliveries = pd.read_csv(\"..\/input\/ipl-cricket-dataset\/deliveries.csv\")","a6fccc73":"matches.head(3)","f0b0b1ff":"deliveries.head(3)","0fc322a6":"season = np.sort(matches['season'].unique())\nprint(\"The Number of Seasons in all are\",len(season), \"which are\" , season)","c62b951f":"# Plotting a Histogram to get the number of seasons and no. of matches played in each season. \nplt.rcParams[\"figure.figsize\"][0] = 15\nplt.rcParams[\"figure.figsize\"][1] = 6\nmatches['season'].hist(color = '#6DA65A',bins = 20,  grid = False)\nplt.title(\"Histogram to show number of matches Played In Each Season of IPL\",fontsize = 20)\nplt.xlabel(\"Years in Which the IPL Was Played\", fontsize = 15)\nplt.ylabel(\"Matches Played in the Season\", fontsize = 15)\nplt.xticks(np.arange(2008,2018, step = 1), rotation=40)\nplt.show()","fa66bd61":"i = 0;\nmatch_no = []\nwhile(i < len(season)):\n    match_no.append(len(matches[matches['season'] == season[i]]['id']))\n    i = i + 1;\nmean = np.mean(match_no)\nprint(\"The Average Number of Matches played in all seasons combined\", mean)","14427352":"#finding the number of teams in all seasons of IPL \nteam1 = matches['team1'].unique()\nmatches = matches.replace(\"Rising Pune Supergiants\", \"Rising Pune Supergiant\")\nprint(\"The total teams that participated in all seasons of IPLs are\", len(team1))\nmatches['team1'].unique()","41cbe397":"# Finding the number of matches played by each team.\n#Finding the unique teams in the IPL Matches\nteam1 = matches['team1'].unique()\n# Finding the number of matches played as team1 and team2 by the teams \nteam1_all = pd.crosstab(index = matches['team1'], columns = 'count')\nteam2_all = pd.crosstab(index = matches['team2'], columns = 'count')\n# Adding both the numbers to get the total number of matches\nfinal_team = team1_all.add(team2_all)\n# Finding the total matches won by the team\nwinner = pd.crosstab(index = matches['winner'], columns = \"count\")\nfinal_team['wins'] = winner['count']\nfinal_team[['count', 'wins']].plot(kind = 'bar' ,  width = 0.7,   color=['#93BEFE' , '#F93D43'],fontsize = 12)\nplt.xlabel(\"Teams Who Played IPL Seasons\", fontsize = 14)\nplt.title(\"Grouped Bar Plot for total matches and wins of Each Team in All Seasons\", fontsize = 18)","e3511473":"#Calculating the percentage of the wins for all the teams\nfinal_team['percent'] = final_team['wins']\/final_team['count'] * 100 \nfinal_team.sort_values(by = 'percent', ascending = False)","0a9dc0ff":"#Calculating the average number of matches played by each team\nmean = final_team['count'].mean()\nprint(\"The average no. of matches are\", mean)\nprint(\"The teams who have played less than average matches are\" ,sum(final_team['count'] < mean))","2e6b8904":"#Calculating average number of wins \nmean_win = final_team['percent'].mean()\nprint(\"The average percent win is\", mean_win)\nprint(\"The teams who have won more than average winning percentage are\" ,sum(final_team['percent'] > mean_win))","0d5d8107":"# Determining the first and the last seasons of IPL \ni = 0;\nteam_order = np.sort(matches['team1'].unique())\narray = []\nfirst = []\nlast = []\nwhile i < 13:\n    array = np.sort(list(matches[matches['team1'] == team_order[i]]['season'].unique()))\n    first.append(array[0] % 2000)\n    last.append(array[len(array)-1] - array[0])\n    i = i +1\nfinal_team['First Season']= first\nfinal_team['Last Season'] = last\nfinal_team['seasons'] = [x+1 for x in last]\nplt.rcParams[\"figure.figsize\"][0] = 18\nplt.rcParams[\"figure.figsize\"][1] = 10\nfinal_team[['First Season' , 'Last Season']].plot(kind = 'barh', stacked = True, rot = 0, xticks = np.arange(0,18,1),\n                                                  fontsize = 14,width = 0.7,   color=['#FB8F5B' , '#6ABFA5']) \nplt.title('Horizontal Stacked Bar Chart for Seasons Played by Each Team in IPL -- Year v\/s Teams', fontsize = 20)\nplt.xlabel(\"Years from 2000 to 2017\", fontsize = 16)\nplt.ylabel(\"Teams Playing in IPL in all Seasons\", fontsize  = 15)","e53de2e7":"final_team = final_team.drop(columns = ['First Season' , 'Last Season'])\nfinal_team.sort_values(['seasons', 'percent'], ascending = [False, False])","6039930b":"#Finding the Cities in which matches were played \nnull = matches.isnull()\nprint(\"The entries which have no cities mentioned are\" , sum(null['city']))\nprint(matches[null['city'] == True]['id'])\n# Removing all these matches by these specific indices\nmatches_clean = matches.drop(matches.index[[461,462,466,468,469,474,476]])","4922cda1":"final_team_city = final_team[final_team['count'] > 70]\nfinal_team_city = final_team_city.sort_values(by = 'count', ascending = False)\ncities = pd.crosstab(index = matches_clean['city'], columns = 'count').sort_values(by = 'count', ascending = False)\ncities_analyse = cities[cities['count'] > 40]","960d3a7a":"#Finding the cities in Which MUMBAI INDIANS WON for PIE CHART 1\nmatcheswin = matches_clean[matches_clean['winner'] == \"Mumbai Indians\"]\nwinner_MI = pd.crosstab(index = matcheswin['city'],columns= 'count' )\nwinner_MI = winner_MI[winner_MI['count'] > 2].sort_values(by = 'count' , ascending = False)\n#Finding the cities in Which RCB WON -- PIE CHART 1\nmatcheswin2 = matches_clean[matches_clean['winner'] == \"Royal Challengers Bangalore\"]\nwinner_RCB = pd.crosstab(index = matcheswin2['city'],columns= 'count' )\nwinner_RCB = winner_RCB[winner_RCB['count'] > 3].sort_values(by = 'count' , ascending = False)\n#Finding the cities in Which CSK WON -- PIE CHART 1\nmatcheswin3 = matches_clean[matches_clean['winner'] == \"Chennai Super Kings\"]\nwinner_CSK = pd.crosstab(index = matcheswin3['city'],columns= 'count' )\nwinner_CSK = winner_CSK[winner_CSK['count'] > 2].sort_values(by = 'count' , ascending = False)\n#Finding the cities in Which DD WON -- PIE CHART 1\nmatcheswin4 = matches_clean[matches_clean['winner'] == \"Delhi Daredevils\"]\nwinner_DD = pd.crosstab(index = matcheswin4['city'],columns= 'count' )\nwinner_DD = winner_DD[winner_DD['count'] > 2].sort_values(by = 'count' , ascending = False)\n#Finding the cities in Which KKR WON -- PIE CHART 1\nmatcheswin5 = matches_clean[matches_clean['winner'] == \"Kolkata Knight Riders\"]\nwinner_KKR = pd.crosstab(index = matcheswin5['city'],columns= 'count' )\nwinner_KKR = winner_KKR[winner_KKR['count'] > 2].sort_values(by = 'count' , ascending = False)\n#Finding the cities in Which KIP WON -- PIE CHART 1\nmatcheswin6 = matches_clean[matches_clean['winner'] == \"Kings XI Punjab\"]\nwinner_KIP = pd.crosstab(index = matcheswin6['city'],columns= 'count' )\nwinner_KIP = winner_KIP[winner_KIP['count'] > 3].sort_values(by = 'count' , ascending = False)","25ca2ba0":"plt.rcParams[\"figure.figsize\"][0] = 18\nplt.rcParams[\"figure.figsize\"][1] = 12\nfig, axs = plt.subplots(2,3)\nplt.suptitle(\"3d Pie Chart For Matches Won By these teams in different cities \\n \"\n             \"A. Mumbai Indians    B. Royal Challnegers Bangalore  C. Chennai Super Kings \\n\"\n             \"D. Delhi Daredevils  E. Kolkata Knight Riders  F. Kings X1 Punjab\", fontsize = 18)\nexplode1 = (0.1, 0, 0 , 0 , 0 ,0 , 0 , 0)\nexplode2 = (0.1,0,0,0)\nexplode3 = (0.1, 0 , 0 , 0 ,0 , 0 , 0 )\nexplode4 = (0.1, 0,0,0,0,0)\nwinner_MI.plot(kind = 'pie' , subplots = True, ax=axs[0][0], explode = explode1,  autopct='%1.1f%%',shadow=True)\nwinner_RCB.plot(kind = 'pie' , subplots = True, ax = axs[0][1], explode = explode2, autopct = '%1.1f%%', shadow = True)\nwinner_CSK.plot(kind = 'pie' ,subplots = True, ax = axs[0][2], explode = explode3, autopct = \"%1.1f%%\", shadow = True)\nwinner_DD.plot(kind = 'pie' , subplots = True, ax=axs[1][0], explode = explode4, autopct = \"%1.1f%%\", shadow = True)\nwinner_KKR.plot(kind = 'pie' , subplots = True, ax = axs[1][1], explode = explode1, autopct = \"%1.1f%%\", shadow = True)\nwinner_KIP.plot(kind = 'pie' ,subplots = True, ax = axs[1][2], explode = explode4, autopct = \"%1.1f%%\", shadow = True)\nplt.show()","505c549e":"# Finding the matches played in Mumbai City FOR PIE CHART 2\nmatches_city1 = matches[matches['city'] == \"Mumbai\"]\n# Finding the number of matches played as team1 and team2 by the teams \nteam1_mumbai = pd.crosstab(index = matches_city1['team1'], columns = 'count')\nteam2_mumbai = pd.crosstab(index = matches_city1['team2'], columns = 'count')\n# Adding both the numbers to get the total number of matches\nteam_city1 = team1_mumbai.add(team2_mumbai)\nteam_city1 = team_city1[team_city1['count'] > 5]\n\n# Finding the matches played in Bangalore City -- PIE CHART 2\nmatches_city2 = matches[matches['city'] == \"Bangalore\"]\n# Finding the number of matches played as team1 and team2 by the teams \nteam1_bangalore = pd.crosstab(index = matches_city2['team1'], columns = 'count')\nteam2_bangalore = pd.crosstab(index = matches_city2['team2'], columns = 'count')\n# Adding both the numbers to get the total number of matches\nteam_city2 = team1_bangalore.add(team2_bangalore)\nteam_city2 = team_city2[team_city2['count'] > 5]\n\n# Finding the matches played in Chennai City -- PIE CHART 2\nmatches_city3 = matches[matches['city'] == \"Chennai\"]\n# Finding the number of matches played as team1 and team2 by the teams \nteam1_chennai = pd.crosstab(index = matches_city3['team1'], columns = 'count')\nteam2_chennai = pd.crosstab(index = matches_city3['team2'], columns = 'count')\n# Adding both the numbers to get the total number of matches\nteam_city3 = team1_chennai.add(team2_chennai)\nteam_city3 = team_city3[team_city3['count'] > 5]\n\n# Finding the matches played in Delhi City -- PIE CHART 2\nmatches_city4 = matches[matches['city'] == \"Delhi\"]\n# Finding the number of matches played as team1 and team2 by the teams \nteam1_delhi = pd.crosstab(index = matches_city4['team1'], columns = 'count')\nteam2_delhi = pd.crosstab(index = matches_city4['team2'], columns = 'count')\n# Adding both the numbers to get the total number of matches\nteam_city4 = team1_delhi.add(team2_delhi)\nteam_city4 = team_city4[team_city4['count'] > 5]\n\n# Finding the matches played in Kolkata City -- PIE CHART 2\nmatches_city5 = matches[matches['city'] == \"Kolkata\"]\n# Finding the number of matches played as team1 and team2 by the teams \nteam1_kolkata = pd.crosstab(index = matches_city5['team1'], columns = 'count')\nteam2_kolkata = pd.crosstab(index = matches_city5['team2'], columns = 'count')\n# Adding both the numbers to get the total number of matches\nteam_city5 = team1_kolkata.add(team2_kolkata)\nteam_city5 = team_city5[team_city5['count'] > 5]\n\n## Finding the matches played in Chandigarh City -- PIE CHART 2\nmatches_city6 = matches[matches['city'] == \"Chandigarh\"]\n# Finding the number of matches played as team1 and team2 by the teams \nteam1_chandigarh = pd.crosstab(index = matches_city6['team1'], columns = 'count')\nteam2_chandigarh = pd.crosstab(index = matches_city6['team2'], columns = 'count')\n# Adding both the numbers to get the total number of matches\nteam_city6 = team1_chandigarh.add(team2_chandigarh)\nteam_city6 = team_city6[team_city6['count'] > 5]","5c204401":"plt.rcParams[\"figure.figsize\"][0] = 20\nplt.rcParams[\"figure.figsize\"][1] = 30\nfig, axs = plt.subplots(3,2)\nplt.suptitle(\"Cities Hosting Matches of Different Teams  \\n \"\n             \"A. Mumbai    B. Bangalore  C. Chennai \\n\"\n             \"D. Delhi     E. Kolkata    F.Chandigarh\", fontsize = 24)\nteam_city1.plot(kind = 'pie' , subplots = True, ax = axs[0][0],  autopct = \"%1.1f%%\", shadow= True, startangle=20, fontsize = 15)\nteam_city2.plot(kind = 'pie' , subplots = True, ax = axs[0][1],  autopct = \"%1.1f%%\", shadow= True, fontsize = 15)\nteam_city3.plot(kind = 'pie' , subplots = True, ax = axs[1][0],  autopct = \"%1.1f%%\", shadow= True, fontsize = 15)\nteam_city4.plot(kind = 'pie' , subplots = True, ax = axs[1][1],  autopct = \"%1.1f%%\", shadow= True, fontsize = 15)\nteam_city5.plot(kind = 'pie' , subplots = True, ax = axs[2][0],  autopct = \"%1.1f%%\", shadow= True, fontsize = 15)\nteam_city6.plot(kind = 'pie' , subplots = True, ax = axs[2][1],  autopct = \"%1.1f%%\", shadow= True, fontsize = 15)\nplt.show()","2e48562d":"win_game = matches[matches['toss_winner'] == matches['winner']]\ntoss_win = pd.crosstab(index = win_game['winner'], columns = 'count')\ntoss_all = pd.crosstab(index = matches['toss_winner'], columns = 'count')\ntoss_all['won_match'] = toss_win['count']\ntoss_all['percent'] = toss_win['count'] \/ toss_all['count']\nplt.rcParams[\"figure.figsize\"][0] = 15\nplt.rcParams[\"figure.figsize\"][1] = 8\ntoss_all['percent'].plot(kind = 'barh', width = 0.6, fontsize = 15)\nplt.ylabel(\"Various Teams Playing in IPL\", fontsize =21)\nplt.title(\"Horizontal Bar Chart For percent win for the team when it won the toss\" , fontsize = 20)\nplt.show()","2aa70709":"win_game.head(4)\nfield_win = win_game[win_game['toss_decision'] == 'field']\nbat_win = win_game[win_game['toss_decision'] == 'bat']\nbat = pd.crosstab(index = bat_win['winner'] , columns = 'count')\nfield = pd.crosstab(index = field_win['winner'], columns = 'count')\ntoss_all['bat_win'] = bat['count']\ntoss_all['field_win'] = field['count']\nplt.rcParams[\"figure.figsize\"][0] = 15\nplt.rcParams[\"figure.figsize\"][1] = 6\ntoss_all[['bat_win', 'field_win']].plot(kind = 'bar', stacked = True, fontsize = 14, color = ['#D12C22', '#2AA023'])\nplt.title(\"Stacked Bar Chart for the matches won wrt preference to field or bat after winning the toss\", fontsize = 18)\nplt.ylabel(\"Value of Matches Won\", fontsize = 16)\nplt.xlabel(\"Teams Of IPL\", fontsize = 16)\nplt.show()","c6483521":"#Finding the count of each player being the man of the match and selecting top 15 to plot the chart\nplayer = matches['player_of_match']\nfrom collections import Counter\ncount = Counter(player).values()\nlist1 = pd.DataFrame({'Player' :matches['player_of_match'].unique()})\nlist1['count'] = count\nlist1 = list1[list1['count'] > 8].sort_values(by = 'count', ascending = False)\n#plotting the Doughnut Chart \nplt.rcParams[\"figure.figsize\"][0] = 8\nplt.rcParams[\"figure.figsize\"][1] = 8\nplt.pie(list1['count'], labels = list1['Player'], wedgeprops = {'linewidth' : 7, 'edgecolor' : 'white'})\nmy_circle = plt.Circle(( 0,0) , 0.7 , color = 'White')\np = plt.gcf()\np.gca().add_artist(my_circle)\nplt.title(\"Doughnut Chart for top 15 Cricketers who have been Man of the Matches\", fontsize= 18)","00bca028":"plt.rcParams[\"figure.figsize\"][0] = 25\nplt.rcParams[\"figure.figsize\"][1] = 15\nwin = matches[['win_by_runs','winner']]\nwin = win.sort_values(by = 'win_by_runs', ascending = False)\nwin = win[win['win_by_runs'] > 80]\n\nlist1 = win['winner']\nlist2 =[i.split()[0][0] for i in list1]\nlist3 =[j.split()[1][0] for j in list1]\nlist4 = []\ni = 0\nwhile i < 21: \n    list4.append(list2[i] + list3[i])\n    i = i  + 1\n\n\nax =  win.plot(kind = 'bar' , color = '#AA0000', fontsize = 16)\nrects = ax.patches\nlabels = [\"%s\" % i for i in list4]\nfor rect, label in zip(rects, labels):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() \/ 2, height + 5, label,\n            ha='center', va='bottom', fontsize = 18)\nplt.title(\"Teams Winning By More than 80 Runs V\/s The Runs in IPL Seasons\", fontsize = 24)\nplt.xlabel(\"Match IDS\", fontsize = 18)\nplt.ylabel(\"Runs By Which a Team has won\", fontsize = 18)","a3173b4b":"plt.rcParams[\"figure.figsize\"][0] = 16\nplt.rcParams[\"figure.figsize\"][1] = 5\nwin2 = matches[['win_by_wickets','winner']]\nwin2 = win2.sort_values(by = 'win_by_wickets', ascending = False)\nwin2 = win2[win2['win_by_wickets'] > 0]\nwin_field = pd.crosstab(index = win2['winner'] , columns = 'count')\nlist1 = []\nlist1 = win2['winner'].unique()\nmin_wicket = []\nmax_wicket = []\ndiff_wicket = []\ni = 0 \nwhile i < 13: \n    min_wicket.append(win2[win2['winner'] == list1[i]]['win_by_wickets'].min())\n    max_wicket.append(win2[win2['winner'] == list1[i]]['win_by_wickets'].max())\n    diff_wicket.append(max_wicket[i] - min_wicket[i])\n    i = i + 1\n\nwin_field['max_wickets'] = diff_wicket\nwin_field['min_wickets'] = min_wicket\nwin_field[['min_wickets' ,'max_wickets']].plot(kind = 'bar', stacked = True, fontsize = 14)\nplt.title(\"Minimum and Maximum No. of wickets by which a team has won in all seasons of  IPL\" , fontsize = 18)\nplt.xlabel(\"Winner Teams in IPL\", fontsize = 15)\nplt.ylabel(\"Wickets By Which Team has Won\" , fontsize = 15)","ad427038":"#Adding seasons in deliveries dataframe\ns = deliveries.match_id.replace(matches.set_index('id')['season'])\ndeliveries['season'] = s\ndeliveries['season'].unique()","71b23339":"fig, ax = plt.subplots(figsize=(16,10))\ndeliveries_by_season = deliveries.groupby(['season' , 'batting_team']).sum()\ndeliveries_by_season['batsman_runs'].unstack().plot(kind = 'bar',ax = ax, width = 0.4, fontsize = 16)\nplt.title(\"Runs Scored by Teams In The Seasons of IPL\" , fontsize = 25)\nplt.ylabel(\"Runs Scored By Teams\" ,fontsize = 20)\nplt.xlabel(\"Seasons Of IPL\", fontsize = 20)\nax.legend(loc='center left', bbox_to_anchor=(1, 1))","d2a33995":"deliveries['player_dismissed_no'] = deliveries['player_dismissed']\ndeliveries['player_dismissed_no'] = np.where(deliveries['player_dismissed_no'].isnull(), 0 , 1)\nwickets_by_season = deliveries.groupby(['season' , 'bowling_team']).sum()\nfig, ax = plt.subplots(figsize=(16,10))\nwickets_by_season['player_dismissed_no'].unstack().plot(kind = 'bar',ax = ax, width = 0.4, fontsize = 16)\nplt.title(\"Wickets Taken by Teams In The Seasons of IPL\" , fontsize = 25)\nplt.ylabel(\"Wickets Taken By Teams\" ,fontsize = 20)\nplt.xlabel(\"Seasons Of IPL\", fontsize = 20)\nax.legend(loc='center left', bbox_to_anchor=(1, 1))","32e660c9":"# Getting the  HIghest Scoreres of All Seasons \na = deliveries.groupby(['batsman','season']).sum()\nbat = a[a['batsman_runs'] > 10].sort_values(by = 'season')\nbatsman_all = bat.groupby(level=['season' , 'batsman']).max()\nseason_batsman = batsman_all.groupby(level = ['season']).max()\ni = 2008 \nbatsman_array = []\nwhile i < 2018: \n    season_which = batsman_all.groupby(['season']).get_group(i)\n    runs_total = season_which[season_which['total_runs'] == season_batsman['total_runs'][i]]\n    batsman = runs_total.groupby('batsman').groups.keys()\n    for key in batsman:\n        batsman_array.append(key)\n    i = i + 1\nbatsman_array","c16efdea":"plt.rcParams[\"figure.figsize\"][0] = 15\nplt.rcParams[\"figure.figsize\"][1] = 5\nax =  season_batsman['total_runs'].plot(kind = 'bar' , color = ['#91F29F','#9478A6','#94B2A6'], fontsize = 16)\nrects = ax.patches\nlabels = [\"%s\" % i for i in batsman_array]\nfor rect, label in zip(rects, labels):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() \/ 2, height + 5, label,\n            ha='center', va='bottom', fontsize = 14)\nplt.title(\"Highest Scorers of Each Season of IPL\", fontsize = 24)\nplt.xlabel(\"Seasons of IPL\", fontsize = 18)\nplt.ylabel(\"Runs Scored By the Highest Scorers\", fontsize = 18)","0f5ee55c":"field = deliveries.groupby(['season' , 'bowler']).sum()\nbowlers_all = field.groupby(level = ['season' , 'bowler']).max()\nbowlers_max = field.groupby(level = ['season']).max()\nmax_wickets = bowlers_max['player_dismissed_no']\ni = 2008\nbowler_array = []\nwhile i < 2018:\n    season_b = bowlers_all.groupby(['season']).get_group(i)\n    bowler_find = season_b[season_b['player_dismissed_no'] == max_wickets[i]]\n    bowlers = bowler_find.groupby(['bowler']).groups.keys()\n    for key in bowlers: \n        bowler_array.append(key)\n    i = i + 1\nbowler_array","a9df66fa":"plt.rcParams['figure.figsize'][1] = 8\nax =  max_wickets.plot(kind = 'bar' , color = ['#95063B', '#E04B6C' , '#F16E3E' , '#FBB36C' , '#F7E189' , \n                                               '#FFFCCA' , '#E0FB9C','#A9E2B0' , '#63C0A5' , '#2E84B9']  , fontsize = 16)\nrects = ax.patches\nlabels = [\"%s\" % i for i in bowler_array]\nfor rect, label in zip(rects, labels):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() \/ 2, height +0.5, label,\n            ha='center', va='bottom', fontsize = 12)\nplt.title(\"Highest Wicket Takers of Each Season of IPL\", fontsize = 24)\nplt.xlabel(\"Seasons of IPL\", fontsize = 18)\nplt.ylabel(\"Wickets Taken By the Bowlers\", fontsize = 18)","48b74920":"special4 = deliveries[deliveries['batsman_runs'] == 4]\nspecial6 = deliveries[deliveries['batsman_runs']== 6]\ntotal4   = special4.groupby(['season' , 'batsman']).count()\ntotal6   = special6.groupby(['season' , 'batsman']).count()\nhigh4    = total4.groupby(level=['season', 'batsman']).max()\nhigh6    = total6.groupby(level=['season', 'batsman']).max()\nbatsman4 = high4.groupby(level = ['season']).max()\nbatsman6 = high6.groupby(level = ['season']).max()\ni = 2008 \nbatsman_array4 = []\nbatsman_array6 = []\nwhile i < 2018:\n    season4_which = high4.groupby(['season']).get_group(i)\n    batsman4_which = season4_which[season4_which['batsman_runs'] == batsman4['batsman_runs'][i]]\n    bat4 = batsman4_which.groupby('batsman').groups.keys()\n    for key4 in bat4:\n        batsman_array4.append(key4)\n    season6_which = high6.groupby(['season']).get_group(i)\n    batsman6_which = season6_which[season6_which['batsman_runs'] == batsman6['batsman_runs'][i]]\n    bat6 = batsman6_which.groupby('batsman').groups.keys()\n    for key6 in bat6:\n        batsman_array6.append(key6)\n    i = i + 1\nbatsman_array6.pop()\ndataframe = pd.DataFrame({'Number of 4s': batsman4['batsman_runs']  , 'Number of 6s': batsman6['batsman_runs'] })\nfinal_list = batsman_array4 + batsman_array6\ndataframe","ef01fbb4":"plt.rcParams['figure.figsize'][1] = 8\nax =  dataframe[['Number of 4s' , 'Number of 6s']].plot(kind = 'bar'  , stacked = False,  fontsize = 16, color = ['#1F9C77' , '#D45F16'])\nlabels = [\"%s\" % i for i in final_list]\nrect =  ax.patches\nfor rect, label in zip(rects, labels):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() \/ 2, height +0.5, label,\n            ha='center', va='bottom', fontsize = 12)\nplt.title(\"Highest 4's and 6's for all Seasons of IPL\", fontsize = 24)\nplt.xlabel(\"Seasons of IPL\", fontsize = 18)\nplt.ylabel(\"No. of 4's and 6's by Batsman\", fontsize = 18)","96ecf28c":"plt.rcParams['figure.figsize'][0] = 15\nplt.rcParams['figure.figsize'][1] = 8\ndismissal = deliveries.dropna(subset =  ['dismissal_kind'])\ndismis = dismissal['dismissal_kind']\ndismissal_type = pd.crosstab(index = dismis, columns = 'count')\ndataframe = pd.DataFrame({'Number of Each Type':dismissal_type['count']})\nx = np.arange(1,10,1)\ny = []\nxtick = [i for i in dismis.unique()]\nfor a in xtick:\n    y.append(dataframe['Number of Each Type'][a])\nplt.xticks(x,xtick, fontsize = 12)\nplt.scatter(x,y,color = 'red',marker = 'o' , s =80)\nplt.plot(x,y,color = 'blue')\nplt.title('No. of Players getting dismissed in different ways in all seasons of IPL' , fontsize = 20)\nplt.xlabel(\"Types of Dismissal\",fontsize = 15)\nplt.ylabel(\"Number of Players Dismissed\" , fontsize = 15)\nplt.show()","c32a97a6":"caught = deliveries[(deliveries['dismissal_kind'] == \"caught and bowled\") | (deliveries['dismissal_kind'] == 'caught')]\nfielder = caught.groupby(['season' , 'fielder']).count()\nfielders_all = fielder.groupby(level = ['season' , 'fielder']).max()\nseason_catch = fielder.groupby(level = ['season']).max()\ncatches = season_catch['player_dismissed_no']\ni = 2008\nfielder_array = []\nwhile i < 2018:\n    season_f = fielders_all.groupby(['season']).get_group(i)\n    fielder_find = season_f[season_f['player_dismissed_no'] == catches[i]]\n    fielders = fielder_find.groupby(['fielder']).groups.keys()\n    for key in fielders: \n        fielder_array.append(key)\n    i = i + 1\ncatches","c053cd48":"plt.rcParams['figure.figsize'][0] = 22\nplt.rcParams['figure.figsize'][1] = 10\nax =  catches.plot(kind = 'barh' , color = 'green' , fontsize = 16)\nrects = ax.patches\nlabels = [\"%s\" % i for i in fielder_array]\nfor rect, label in zip(rects, labels):\n    ax.text(rect.get_width() + 0.8, rect.get_y() + rect.get_height()\/2, label,\n            ha='center', va='bottom', fontsize = 12)\nplt.title(\"Max No. of Catches in Seasons of IPL\", fontsize = 24)\nplt.ylabel(\"Seasons of IPL\", fontsize = 18)\nplt.xlabel(\"Catches Taken By the Bowlers\", fontsize = 18)","ec775764":"runs = deliveries.groupby(['season' , 'over']).sum()\nmatches = deliveries.groupby(['season'])['match_id'].unique()\nlen(matches[2008])\nno_matches = []\nfor index in matches.index:\n    no_matches.append(len(matches[index]))\nno_matches_df = pd.DataFrame({\"Seasons\": matches.index , \"No. of Matches\": no_matches})\naverage_runs = pd.DataFrame({\"Total Runs\":runs['total_runs'] })\nno_matches_df['No. of Matches']","89c72564":"i = 2008 \nseason_total = pd.DataFrame({})\nwhile i < 2018:\n    new = \"season_over_%d\"%i\n    new = average_runs.groupby('season').get_group(i)\n    new['Average_runs'] = new['Total Runs']\/no_matches_df['No. of Matches'][i - 2008]\n    new[\"Average_runs\"].plot(label = i)\n    i = i + 1\nx = range(0,20)\nxtick = range(1,21)\nplt.xticks(x, xtick, fontsize= 12)\nplt.xlabel(\"Overs of All Seasons\" , fontsize = 12)\nplt.ylabel(\"Average Score for All Seasons\" , fontsize = 12)\nplt.legend()\nplt.title(\"Average Scores Per Ball In Each Season\" , fontsize = 20)","6af23e56":"batsmen_order = deliveries.groupby(['batsman']).sum().sort_values(by = 'total_runs' , ascending = False)\nbatsmen15 = batsmen_order.head(15)\nbatsmen15['total_runs'].plot(kind = 'bar', color = ['#C77AFD' , '#FB746E' , '#7DAC00' , '#03BCC6'],width= 0.4, fontsize = 12)\nplt.rcParams['figure.figsize'][0] = 15\nplt.rcParams['figure.figsize'][1] = 10\nplt.title(\"Top 15 Batsman OF All Times in All The Seasons of IPL\" ,fontsize = 22)\nplt.xlabel(\"Batsman in IPL\", fontsize = 18)\nplt.ylabel(\"Runs Scored by the Top Batsman\" , fontsize = 18)","facc5fea":"bowlers_order = deliveries.groupby(['bowler']).sum().sort_values(by = 'player_dismissed_no', ascending = False)\nbowlers15 = bowlers_order.head(15)\nbowlers15['player_dismissed_no'].plot(kind = 'bar', color = ['#3791A3' , '#FEB412' , '#C02D1F' , '#87A830' , '#994B12'] , width = 0.4)\nplt.title(\"Top 15 Bowlers OF All Times in All The Seasons of IPL\" ,fontsize = 22)\nplt.xlabel(\"Bowlers in IPL\", fontsize = 18)\nplt.ylabel(\"Wickets Taken by the Top Bowlers\" , fontsize = 18)","498e60da":"<h3> Plotting a bar chart to get total matches and total wins in each season for each team <\/h3>","3b86d001":"<h3>Preparing for analysis<\/h3>","615dbfed":"<h3>Getting the Number of Seasons played by each team and arranging them wrt to seasons and winning percentage <\/h3>","171d883f":"<h2 style = 'color:#8B1A1A'>17. Top 15 Batsman Considering all Seasons of IPL (Highest Score)<\/h2>","1265a012":"<h3>Plotting Pie  Charts <\/h3>","ea875523":"<h2 style = 'color:#8B1A1A'>6.  Analysis on all the player of the matches <\/h2>","eda23954":"<h2 style = 'color:#8B1A1A'> 5 B.Preference to batting or bowling after winning the toss v\/s Final Match Win <\/h2>","9f85841d":"<h2 style = 'color:#8B1A1A'>10. Getting The  Wickets of All Team in each Season in IPL <\/h2>","b49860c5":"<h3> Removing the Entries which have no cities <\/h3>","ebdc7d4b":"<h2 style = 'color:#8B1A1A'>9. Getting The  Scores of All Team in each Season in IPL <\/h2>","06dc613e":"<h2 style = 'color:#8B1A1A'> 4 A.Percentage of matches Played By A Team In Different Cities (TEAM WISE) <\/h2>","343d4d83":"<h2 style = 'color:#8B1A1A'>15. Maximum No. of Catches Taken By the Players in Each Season of IPL<\/h2>","0e9ac99e":"<h2 style = 'color:#8B1A1A'>1. Total Seasons Played in IPL and total Matches Played in each season of IPL<\/h2>","79f5f43c":"<h2 style = 'color:#8B1A1A'>7. Analysis of Teams Winning By More Than 80 Runs in all the matches of IPL<\/h2>","d16e8ee9":"<h2 style = 'color:#8B1A1A'> 2. Wins of all Teams in All IPLS and finding the winning percentage for each Team<\/h2>","c3fbaa94":"<h2 style = 'color:#8B1A1A'> 3. Analysis on Number of Seasons A Team has Played   <\/h2>","b5b61bdf":"<h2 style = 'color:#8B1A1A'>16. Average Runs Scored Per Over In each Season of IPL<\/h2>","50394fba":"<h3> Displaying some data from both the datasets <\/h3>","6674764d":"<h3> Finding the percentage of winning the match of every team after winning the toss <\/h3>","11e0b481":"<p> So, 4 teams have played 10 matches and though KKR appear to be number 5 in overall list but it had played in all 10 seasons.So in that case it has second highest winning percentage.<\/p>\n<p>Also, Kochi Tuskers Kerala is the only team which played in just 1 year in 2011 and never played after that<\/p>\n<p> But there has been a change in the past 2 years. Some big and really good teams like CSK, RR have not played and some new teams have joined which are Gujrat Lions and Rising Pune Supergiants<\/p>\n","9b3ecc47":"<h2 style = 'color:#8B1A1A'> 5 A.Toss Win\/Loss V\/S Match Win\/Loss<\/h2>","1775ac13":"<h2 style = 'color:#8B1A1A'>18. Top 15 Bowlers Considering All Seasons of IPL (Maximum Wickets)<\/h2>","cecb5224":"<h3> Calculating average number of matches played in all seasons <\/h3>","4c1007ee":"<h2 style = 'color:#8B1A1A'>14. Finding the Number of Players Getting Dismissed By Different Dismissal Type<\/h2>","e855bce5":"<h3>Plotting Pie Charts for this <\/h3>","fa6eebdf":"<h2 style = 'color:#8B1A1A'>11. Getting The Highest Scores of All Seasons and Their Scores <\/h2>","496e966a":"<h1> INDIAN PREMIER LEAGUE -- Data Analysis and Machine Learning Part 1<\/h1>","f56a9577":"<h3> Finding the winning percentage for each team in all seasons and arranging teams in order <\/h3>","88d17521":"<h3> Plotting a histogram to get No. Of matches  v\/s seasons <\/h3>","f2961a04":"<h2 style = 'color:#8B1A1A'>13.Record of Players with highest no. of 4's and 6's in all seasons<\/h2>","f5f6736e":"<h3> Determining Which Team has played from which Season to Which using Stacked Bar Graph<\/h3>","e52705bd":"<h2 style = 'color:#8B1A1A'>12. Getting The Highest Wicket Taking Players of All Seasons and No. of Wickets Taken <\/h2>","9a2e88ab":"<h2 style = 'color:#8B1A1A'> 4 B.Percentage of matches Played By Different Teams in A City (CITY WISE) <\/h2>","476aef4f":"<h3>Analysis on Teams winning matches in different cities<\/h3>","9e3cb1b8":"<h2 style = 'color:#8B1A1A'>8. Analysis of Minimum and Maximum Wickets by which any team has won in IPL Seasons<\/h2>","8b042865":"<h3> Getting the average wins and percent <\/h3>"}}