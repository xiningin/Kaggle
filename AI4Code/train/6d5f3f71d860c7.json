{"cell_type":{"f0f47024":"code","0aba756b":"code","3d722144":"code","a9a896c3":"code","fb092083":"code","a055383c":"code","1ad48c4f":"code","0e13aa5a":"code","70afa63c":"code","f686bd9c":"code","26b8afc7":"code","a9bc2886":"code","34f34629":"code","9656b312":"code","5fa48996":"code","caf13325":"code","e42bd7e0":"code","3f7ebb90":"code","c2a587c1":"code","7f4f4352":"code","707d9119":"code","31307a11":"code","f9a29a8c":"code","7ebb3776":"markdown","3d8dc3e4":"markdown","435dc83a":"markdown","d1ea4f05":"markdown","e0410e7a":"markdown","2cda6b9d":"markdown","0e8d730d":"markdown","7ea99bad":"markdown","b3bcbe6e":"markdown","0a6d725e":"markdown","72e5e9da":"markdown","44bfbf8d":"markdown","96fd0a52":"markdown"},"source":{"f0f47024":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0aba756b":"!pip install sidetable","3d722144":"#Import libraries\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nimport sidetable\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report, mean_squared_error, accuracy_score  \nfrom math import sqrt\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV","a9a896c3":"df = pd.read_csv('\/kaggle\/input\/palmer-archipelago-antarctica-penguin-data\/penguins_size.csv')\ndf.head(2)\n#len(df) ","fb092083":"# to view few metrics of  columns\ndf.describe(include=\"all\")","a055383c":"#to identify the unique values in any column\ndf['sex'].value_counts()","1ad48c4f":"#Replace the null\/junk rows of the column Sex with its mode\nmode_sex = df['sex'].mode()[0]  \ndf['sex'].fillna(mode_sex,inplace=True)\ndf['sex'] = df['sex'].str.replace(\".\",mode_sex)","0e13aa5a":"# Filling null values of culmenlen, culmendepth, flipper_length_mm and body_mass_g by their mean \n# grouped by species.\n\ndf['culmen_length_mm'].fillna(df.groupby('species')['culmen_length_mm'].transform('mean'),inplace=True)\ndf['culmen_depth_mm'].fillna(df.groupby('species')['culmen_depth_mm'].transform('mean'),inplace=True)\ndf['flipper_length_mm'].fillna(df.groupby('species')['flipper_length_mm'].transform('mean'),inplace=True)\ndf['body_mass_g'].fillna(df.groupby('species')['body_mass_g'].transform('mean'),inplace=True)","70afa63c":"#After handling the empty values\ndf.describe(include=\"all\") ","f686bd9c":"#Sideplot is a combination of value_counts and crosstab.\nprint(df.stb.freq(['species']))\ndf.stb.freq(['species']).Count.plot(kind='bar',legend=True)\nplt.xlabel('Species')\nplt.show()\n\n#Understanding the counts of each specie present in our dataset","26b8afc7":"print(df.stb.freq(['sex']))\ndf.stb.freq(['sex']).Count.plot(kind='bar',color='r', legend=True)\nplt.xlabel('Sex')\nplt.show()","a9bc2886":"sns.countplot(x=\"species\", hue=\"sex\", data=df)\nplt.show()","34f34629":"#Box plots would help us identify if there any outliers and about percenatge of data above\/below the median etc\nf, axes = plt.subplots(1, 4)\nplt.subplots_adjust(right=2)\nsns.set(style=\"whitegrid\")\nsns.boxplot(  x = \"culmen_length_mm\", data=df,  ax=axes[0])\n#plt.xlabel(\"culmen_length\")\nsns.boxplot(  x= \"culmen_depth_mm\", data=df, ax=axes[1])\nsns.boxplot(  x= \"flipper_length_mm\", data=df,   ax=axes[2])\nsns.boxplot(  x= \"body_mass_g\", data=df,   ax=axes[3])\nplt.show()","9656b312":"# Pair Plot below helps us understand the relationship between all the features.\nsns.pairplot(df,hue='species')\nplt.show()","5fa48996":"#converting species to Categories to help us for our classification.\ndf['species'] = df['species'].astype('category')\ndf['species'] = df['species'].cat.codes\ndf['species'].unique()","caf13325":"X =  df.drop(['species','island','sex','culmen_depth_mm','body_mass_g'],axis=1)","e42bd7e0":"#defining the class\ny  = df['species']","3f7ebb90":"#Splitting the data into train and test (70-30 respectively)\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,stratify=y,random_state=42)","c2a587c1":"knn2 = KNeighborsClassifier()\n#Creating a dictionary of neighbours \nneighbours= {'n_neighbors': np.arange(1, 5)}\nknn_cv = GridSearchCV(knn2, neighbours, cv=5)\n#fit model to data\nknn_cv.fit(X_train, y_train)","7f4f4352":"#gives the n for the best score\nprint(knn_cv.best_params_)\nprint(knn_cv.best_score_)","707d9119":"from matplotlib.colors import ListedColormap","31307a11":"h = 0.1\nx_min, x_max = X_train.iloc[:,0].min() - .5, X_train.iloc[:,0].max() + .5\ny_min, y_max = X_train.iloc[:,1].min() - .5, X_train.iloc[:,1].max() + .5\ncmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])\ncmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF'])\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ = knn_cv.predict(np.c_[xx.ravel(), yy.ravel()])\n\n# Put the prediction into a color plot\nZ = Z.reshape(xx.shape)\nplt.figure(1, figsize=(6, 5))\n#plt.set_cmap(plt.cm.Paired)\nplt.pcolormesh(xx, yy, Z,cmap=cmap_light)\n\n# Plot training points\nplt.scatter(X_train.iloc[:,0], X_train.iloc[:,1],c=y_train, cmap=cmap_bold )\nplt.xlabel('culmen_length')\nplt.ylabel('flipper_length')\n\nplt.xlim(xx.min(), xx.max())\nplt.ylim(yy.min(), yy.max())\nplt.xticks(())\nplt.yticks(())\n\nplt.show()","f9a29a8c":"y_predict = knn_cv.predict(X_test)\nprint(confusion_matrix(y_test,y_predict))\nprint(accuracy_score(y_test,y_predict))","7ebb3776":"This is an attempt to explore the dataset, handle the missing values and classify them into their species by identifying the useful features.","3d8dc3e4":"PS : Would love to hear your feedback :) ","435dc83a":"<h3>Handling Missing Values<\/h3>","d1ea4f05":"<h3>Confusion Matrix and accuracy on the test data<h3>","e0410e7a":"<h3> The dataset used is of penguins with information like species, island, culmen_length etc. <\/h3>\n\nSource of data [github](https:\/\/github.com\/allisonhorst\/palmerpenguins)","2cda6b9d":"To Visualize the decision boundary.\n\nRef - https:\/\/scikit-learn.org\/stable\/auto_examples\/neighbors\/plot_classification.html","0e8d730d":"<h3>Understanding the data.<\/h3>","7ea99bad":"<h3> Modelling - To predict the species based on the features.<\/h3>","b3bcbe6e":"<h3>Reading the CSV file to a dataframe<\/h3>","0a6d725e":"Using GridSearch CV to determine the best hyper parameter i.e. \"K\"","72e5e9da":"From the above pairplot, it looks like culmen_length and flipper_length would help us classify into respective classes (here, species) better. So, retaining only these two columns as of now and checking the accuracy.","44bfbf8d":"<h4>Sidetable - is a new package that helps us in getting useful summary tables of the pandas DataFrame.<\/h4>\n\nsource :- https:\/\/github.com\/chris1610\/sidetable#caveats\n\nA nice youtube tutorial briefing about this : https:\/\/www.youtube.com\/watch?v=BoIDhAxdO5s&t=4s","96fd0a52":"<h3>Data Visualization<\/h3>"}}