{"cell_type":{"782e1594":"code","28b33256":"code","816c6399":"code","402df813":"code","43cbb886":"code","ed634125":"code","06246f0f":"code","3c8e10eb":"code","821115d0":"code","9e417a67":"code","6c1b6ec3":"markdown","79c67b51":"markdown","56f8c6e0":"markdown","0aca6b18":"markdown","fcc23dd1":"markdown"},"source":{"782e1594":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","28b33256":"df_train = pd.read_csv(\"\/kaggle\/input\/toxicvaleur\/comment_train.csv\",encoding=\"UTF8\",sep=\",\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/toxicvaleur\/comment_test.csv\",encoding=\"UTF8\",sep=\",\")","816c6399":"df_train.comment_text_preprocess = df_train.comment_text.apply(lambda x: x if type(x) == str else '')\ndf_test.comment_text_preprocess = df_test.comment_text.apply(lambda x: x if type(x) == str else '')\n\n\ndf_train.comment_text_preprocess = df_train.comment_text_preprocess.apply(lambda x: x.lower())\ndf_test.comment_text_preprocess = df_test.comment_text_preprocess.apply(lambda x: x.lower())\n\n\nregex = r\"[^\\w\\s\\(\\)\\\/]|_\"\ndf_train.comment_text_preprocess = df_train.comment_text_preprocess.str.replace(regex, \" \")\ndf_test.comment_text_preprocess = df_test.comment_text_preprocess.str.replace(regex, \" \")\n\n\ndf_train.comment_text_preprocess = df_train.comment_text_preprocess.str.replace(r'\\s{2,}', \" \")\ndf_test.comment_text_preprocess = df_test.comment_text_preprocess.str.replace(r'\\s{2,}', \" \")","402df813":"from sklearn.feature_extraction.text import TfidfVectorizer\n\nvectorizer = TfidfVectorizer(lowercase=True, analyzer =\"word\")\nvectorizer.fit(df_train.comment_text.values)","43cbb886":"tfidf_train_data = vectorizer.transform(df_train.comment_text.values)\ntfidf_train_data.shape","ed634125":"from sklearn.svm import LinearSVC\n\nSVC = LinearSVC(C=10)\nmodel = SVC.fit(X = tfidf_train_data, y = df_train.toxic.values)\nres_train = model.predict(tfidf_train_data)\nprint(np.mean(res_train == df_train.toxic.values))","06246f0f":"tfidf_test_data = vectorizer.transform(df_test.comment_text.values)\nres_test = model.predict(tfidf_test_data)","3c8e10eb":"submission = df_test\nsubmission[\"toxic\"] = res_test\nsubmission = submission[[\"id\",\"toxic\"]]","821115d0":"print(submission)","9e417a67":"submission.to_csv(\"submission.csv\",encoding=\"utf8\",sep=',',index=False)","6c1b6ec3":"### fit et transform du TFIDF","79c67b51":"### Chargement des donn\u00e9es","56f8c6e0":"### SVM","0aca6b18":"### obtention des pr\u00e9dictions sur le test","fcc23dd1":"### Sauvegarde du fichier au format demand\u00e9"}}