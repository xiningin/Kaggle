{"cell_type":{"13bbc823":"code","7c5afed3":"code","3afb6763":"code","92b6e006":"code","6998816c":"code","de395223":"code","ece254f8":"markdown","b2f09de1":"markdown","353b9ec3":"markdown","24a3cf74":"markdown","bac2615f":"markdown","526874e7":"markdown"},"source":{"13bbc823":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pydicom\nfrom tqdm import tqdm\nimport os","7c5afed3":"dcms = []\nfor root, dirs, fnames in os.walk('\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train'):\n    dcms += list(os.path.join(root, f) for f in fnames if f.endswith('.dcm'))\nprint(f'There are {len(dcms)} CT scans')","3afb6763":"attrs = set()\nfor fname in tqdm(dcms):\n    with pydicom.dcmread(fname) as obj:\n        attrs.update(obj.dir())","92b6e006":"dcm_keys = list(attrs)\ndcm_keys.remove('PixelData') # The actual array of pixels, this is not metadata\ndcm_keys.remove('PatientName') # Anonymous data!\ndcm_keys","6998816c":"meta = []\ntypemap = {\n    pydicom.uid.UID: str,\n    pydicom.multival.MultiValue: list\n}\ndef cast(x):\n    return typemap.get(type(x), lambda x: x)(x)\n\nfor i, fname in enumerate(tqdm(dcms)):\n    with pydicom.dcmread(fname) as obj:\n        meta.append([cast(obj.get(key, np.nan)) for key in dcm_keys])\n\ndfmeta = pd.DataFrame(meta, columns=dcm_keys)\ndfmeta","de395223":"dfmeta.to_csv('meta.csv', index=False)","ece254f8":"# DICOM metadata\n\nThis notebook extracts all possible metadata from DICOM files and saves it into a DataFrame (I will also create a .csv file for portability to other notebooks).\nThe process takes a few minutes and is very memory expensive, so better done just once.\n\nIn [this other notebook](https:\/\/www.kaggle.com\/anarthal\/dicom-metadata-eda) I'm using this data to perform an initial research on what does each attribute mean and an EDA. This notebook just dumps the data into CSV.","b2f09de1":"# 3. Load the actual values from the files\n\nIf an attribute is not present, we stick an `np.nan`. We also perform some casting to standard Python types to make things easier.","353b9ec3":"# 2. Attribute name listing\n\nLet's get all the attributes present in **any** of the DICOM files. The `.dir()` method comes in handy for this. Note that some files have some attributes and some others do not, so inspecting a single file is not enough. Running this takes some minutes.","24a3cf74":"This is a complete list of the DICOM attributes. Drop `PixelData` so we do not run out of memory (this one contains the actual image).","bac2615f":"# 1. File listing\n\nFind the names for all the files in the training set with .dcm extension.","526874e7":"# 4. Done!"}}