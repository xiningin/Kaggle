{"cell_type":{"2eca062a":"code","297dfd1e":"code","aef35ce3":"code","c68a1250":"code","3fbe6fa1":"code","490b67a2":"code","66db2b68":"code","40c9237b":"code","7352d9ed":"code","a5efe644":"code","e28a6829":"code","43cf05df":"code","35e524ce":"code","7c1cd3b5":"code","06297540":"code","8ea0d129":"code","a4748ed6":"code","3db9e2b3":"code","cc23eae1":"code","41c3549a":"code","250d2691":"code","99b2d61f":"code","1b5b645a":"code","dba63318":"code","6385c057":"code","db7cdcb9":"code","7bf575b4":"markdown","2f262c60":"markdown"},"source":{"2eca062a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","297dfd1e":"import numpy as np\nimport pandas as pd\n\nimport os\nfrom datetime import date \nfrom sklearn.metrics import f1_score\nfrom tqdm import tqdm_notebook\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import NuSVR, SVR\nfrom sklearn.metrics import mean_absolute_error\n\nimport lightgbm as lgb\nimport xgboost as xgb\nimport time\nimport datetime\nfrom catboost import CatBoostRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold, RepeatedKFold\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.linear_model import LinearRegression\nimport gc\n\nfrom scipy.signal import hilbert\nfrom scipy.signal import hann\nfrom scipy.signal import convolve\nfrom scipy import stats\nfrom sklearn.kernel_ridge import KernelRidge\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom tqdm import tqdm\n\nfrom itertools import product\nimport ast\n\nfrom datetime import timedelta \nfrom time import time\n\nimport seaborn as sns\nimport random","aef35ce3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno  # \u7528\u4e8e\u53ef\u89c6\u5316\u7f3a\u5931\u503c\u5206\u5e03\nimport scipy.stats as st","c68a1250":"#Load data\nhist_data  =  pd.read_excel('..\/input\/history\/Historical Sales.xlsx', usecols=['YM','Date','SalesRegion','SKU Code','VolumeHL'])\nhist_data.head()\nhist_data.isnull().sum()","3fbe6fa1":"#\u628amaster data\u548ccommercial planning \u4e24\u5f20\u8868\u90fd\u8bfb\u8fdb\u6765\nmd = pd.read_excel('..\/input\/master\/(Replace)Product Master Data.xlsx')\nmd.head()\npl = pd.read_excel('..\/input\/planning\/(Replace)Commercial Planning.xlsx')\npl.head()","490b67a2":"#\u8fd9\u91cc\u7528\u66e6\u7136\u7684\u65b9\u6cd5 \u5bfc\u5165planning\u4ee5\u540e \u505a\u66ff\u6362\u5904\u7406\uff0c\u5c06SKU Code\u66ff\u6362\u6210Brand\npl = pl.rename(columns={'SKU Code':'Brand'})\n\npl['Brand'].replace([1,2,3,4], 'middle_end_2',inplace=True)\npl['Brand'].replace([5,6,7,8,9,10,11,28,37], 'high_end_2',inplace=True)\npl['Brand'].replace([34], 'high_end_1',inplace=True)\npl['Brand'].replace([12], 'high_end_3',inplace=True)\npl['Brand'].replace([44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,68,69], 'low_end_1',inplace=True)\npl['Brand'].replace([13,14,15,16,17,18,19,20,25,26,27,29,31,36,41,42,43,45], 'low_end_2',inplace=True)\npl['Brand'].replace([23,24,32,33,35,39,40,67], 'low_end_3',inplace=True)\npl['Brand'].replace([65], 'middle_end_1',inplace=True)\npl['Brand'].replace([21,22,30], 'middle_end_3',inplace=True)\npl['Brand'].replace([38], 'superhigh_end_1',inplace=True)\n\npl.head()","66db2b68":"md.isnull().sum()# 0 0 0 0 \npl.isnull().sum()# price : 1374\npl['Price'].isnull()\n\nimport missingno as msno\nmsno.bar(pl.sample(1000))","40c9237b":"msno.matrix(pl.sample(1000))","7352d9ed":"#\u5148\u628ahistorical data \u548cmaster data\u8fde\u63a5\uff0c\u4e4b\u540e\u5c06historical \u901a\u8fc7\u6708\u4efd\u6c42\u548c\u6c42\u5f97\u6708\u5ea6\u7684\u9500\u91cf\u4ee5\u540e\u518d\u548ccommercial planning\u8fde\u63a5\nhm = pd.merge(hist_data,md,on='SKU Code')\n#\u628adate\uff08\u4e5f\u5c31\u662f\u5e74\u6708\u65e5\uff09\u8bbe\u6210index\nhm = hm.set_index(['Date'])\n#hm = hm0.drop(['SKU Code'], axis=1)\n#hm0.head()\n#hm0.describe()\nhm.head()","a5efe644":"import scipy.stats as st\ny = hm['VolumeHL']\nplt.figure(1); plt.title('Johnson SU')\nsns.distplot(y, kde=False, fit=st.johnsonsu)\nplt.figure(2); plt.title('Normal')\nsns.distplot(y, kde=False, fit=st.norm)\nplt.figure(3); plt.title('Log Normal')\nsns.distplot(y, kde=False, fit=st.lognorm)","e28a6829":"#\u770b\u9884\u6d4b\u503c\uff08VolumeHL\uff09\u7684\u504f\u5ea6\u548c\u5cf0\u5ea6\nsns.distplot(hm['VolumeHL']);\nprint(\"Skewness: %f\" % hm['VolumeHL'].skew())\nprint(\"Kurtosis: %f\" % hm['VolumeHL'].kurt())\nplt.hist(hm['VolumeHL'], orientation = 'vertical',histtype = 'bar', color ='red')\nplt.show()\nhm.skew(), hm.kurt()","43cf05df":"# \u6570\u5b57\u7279\u5f81\nnumeric_features = hm.select_dtypes(include=[np.number])\n#numeric_features.columns#Index(['YM', 'SKU Code', 'VolumeHL'], dtype='object')\n# \u7c7b\u578b\u7279\u5f81\ncategorical_features = hm.select_dtypes(include=[np.object])\n#categorical_features.columns#Index(['SalesRegion', 'Brand', 'Package', 'Segment'], dtype='object')","35e524ce":"#\u76f8\u5173\u6027\u5206\u6790\nvolume_numeric = hm[['YM', 'SKU Code', 'VolumeHL']]\ncorrelation = volume_numeric.corr()\nprint(correlation['VolumeHL'].sort_values(ascending=False),'\\n')\nf, ax = plt.subplots(figsize = (7, 7))\nplt.title('Correlation of Numeric Features with Volume',y=1,size=16)\nsns.heatmap(correlation,square = True,  vmax=0.8)\ndel volume_numeric['VolumeHL']","7c1cd3b5":"#sns.pairplot()\uff1a\u5c55\u793a\u53d8\u91cf\u4e24\u4e24\u4e4b\u95f4\u7684\u5173\u7cfb\uff08\u7ebf\u6027\u6216\u975e\u7ebf\u6027\uff0c\u6709\u65e0\u8f83\u4e3a\u660e\u663e\u7684\u76f8\u5173\u5173\u7cfb\uff09\nsns.set()\ncolumns = ['VolumeHL','YM', 'SKU Code','SalesRegion', 'Brand', 'Package', 'Segment']\nsns.pairplot(hm[columns],size = 2 ,kind ='scatter',diag_kind='kde')\nplt.show()","06297540":"#\u7c7b\u522b\u7279\u5f81\nfor cat_fea in categorical_features:\n    print(cat_fea + '\u7279\u5f81\u5206\u5e03\u5982\u4e0b\uff1a')\n    print('{}\u7279\u5f81\u6709{}\u4e2a\u4e0d\u540c\u7684\u503c'.format(cat_fea, hm[cat_fea].nunique()))\n    print(hm[cat_fea].value_counts())","8ea0d129":"#\u67e5\u770b\u7bb1\u578b\u56fe\ncategorical_features =['SalesRegion', 'Brand', 'Package', 'Segment']\nfor c in categorical_features:\n    hm[c] = hm[c].astype('category')\n    if hm[c].isnull().any():\n        hm[c] = hm[c].cat.add_categories(['MISSING'])\n        hm[c] = hm[c].fillna('MISSING')\n\ndef boxplot(x, y, **kwargs):\n    sns.boxplot(x=x, y=y)\n    x=plt.xticks(rotation=45)\n\nf = pd.melt(hm, id_vars=['VolumeHL'], value_vars=categorical_features)\ng = sns.FacetGrid(f, col=\"variable\",  col_wrap=2, sharex=False, sharey=False, size=5)\ng = g.map(boxplot, \"value\", \"VolumeHL\")","a4748ed6":"import pandas_profiling\npfr1 = pandas_profiling.ProfileReport(hm)\npfr1.to_file(\".\/example1.html\")\n\npfr2 = pandas_profiling.ProfileReport(pl)\npfr2.to_file(\".\/example2.html\")","3db9e2b3":"#\u770b\u4e24\u4e2a\u5730\u533a\u5206\u522b\u6709\u54ea\u4e9bSKU\u6709\u5bf9\u5e94\u7684\u6570\u636e\n\n#\u53ef\u4ee5\u770b\u51fa\u4e24\u4e2a\u5730\u533a\uff08\u9ed1\u9f99\u6c5f\uff0c\u5409\u6797\uff09\u4e0d\u662f\u6240\u6709\u54c1\u7c7b\uff08SKU\uff09\u90fd\u6709\u5f53\u5730\u5bf9\u5e94\u7684\u9500\u552e\u6570\u636e\nH = sorted(set(hist_data.loc[hist_data['SalesRegion']=='Heilongjiang']['SKU Code']))\nJ = sorted(set(hist_data.loc[hist_data['SalesRegion']=='Jilin']['SKU Code']))\nAL = sorted(set(hist_data['SKU Code']))\n               \nprint('Heilongjiang has ',len(hist_data.loc[hist_data['SalesRegion']=='Heilongjiang']),'records.')\nprint('Jilin has ',len(hist_data.loc[hist_data['SalesRegion']=='Jilin']),'records.')\nprint('The SKUs which have data in Heilongjiang:\\n ',H)\nprint('The SKUs which DO NOT have data in Heilongjiang:\\n ',[item for item in AL if not item in H])\nprint('The SKUs which have data in Jilin:\\n ',J)\nprint('The SKUs which DO NOT have data in Jilin:\\n ',[item for item in AL if not item in J])","cc23eae1":"print(hm['Brand'].unique()) ","41c3549a":"#\u672c\u60f3\u7528for loop\u5faa\u73af\u641e\u4e2a\u5b57\u5178\uff0c\u53d1\u73b0\u81ea\u52a8\u51fa\u6765\u6709\u4e9b\u5730\u533a\u6ca1\u6709\u4e00\u4e9b\u7279\u5b9a\u7684brand\/segement\u53ea\u80fd\u7b28\u529e\u6cd5\u4e00\u4e2a\u4e00\u4e2a\u770b\uff0c\u8fd9\u6837\u4e5f\u80fd\u770b\u51fa\u6765\u54ea\u4e9b\u5730\u65b9\u6709\n#\u7528\u8fd9\u79cd\u65b9\u6cd5\u64cd\u4f5c\u7684\u65f6\u5019 SKU code\u4e5f\u4f1a\u5728\u6708\u5ea6\u52a0\u548c\u7684\u65f6\u5019\u88ab\u52a0\u8fdb\u53bb\n#\u3010\u5730\u533a\u3011\u2014\u2014\u9ed1\u9f99\u6c5f\n#LOW-END\n\n\n#hl1 = hm[(hm['SalesRegion']=='Heilongjiang') & (hm['Brand'] == 'low-end 1')]\u2014\u2014low end 1 \u5728\u9ed1\u9f99\u6c5f\u5730\u533a\u65e0\u552e\n#hl1.head()\n\nhl2 = hm[(hm['SalesRegion']=='Heilongjiang') & (hm['Brand'] == 'low-end 2')]\n\n#hl2_merge = pd.merge(hl2,pl,on=['YM','Brand'])\n\nhl2.head(25)\n#print('hl2 has following SKU Codes:',hl2['SKU Code'].unique())\n\nmhl2 = hl2.resample('M').sum()\nmhl2.to_period('M')['VolumeHL'].head()\n\n","250d2691":"hl3 = hm[(hm['SalesRegion']=='Heilongjiang') & (hm['Brand'] == 'low-end 3')]\n#hl3.head()\n\n#hm1 = hm[(hm['SalesRegion']=='Heilongjiang') & (hm['Brand'] == 'middle-end 1')]\n#hm1.head()\n\nhm2 = hm[(hm['SalesRegion']=='Heilongjiang') & (hm['Brand'] == 'middle-end 2')]\n#hm2.head()\n\nhm3 = hm[(hm['SalesRegion']=='Heilongjiang') & (hm['Brand'] == 'middle-end 3')]\n#hm3.head()\n\nhh1 = hm[(hm['SalesRegion']=='Heilongjiang') & (hm['Brand'] == 'high-end 1')]\n#hh1.head()\n\nhh2 = hm[(hm['SalesRegion']=='Heilongjiang') & (hm['Brand'] == 'high-end 2')]\n#hh2.head()\n\nhh3 = hm[(hm['SalesRegion']=='Heilongjiang') & (hm['Brand'] == 'high-end 3')]\n#hh3.head()\n\nhs1 = hm[(hm['SalesRegion']=='Heilongjiang') & (hm['Brand'] == 'super high-end 1')]\n#hs1.head()","99b2d61f":"sns.distplot(hm['VolumeHL']);\nprint(\"Skewness: %f\" % hm['VolumeHL'].skew())\nprint(\"Kurtosis: %f\" % hm['VolumeHL'].kurt())\nsns.distplot(hm.skew(),color='blue',axlabel ='Skewness')\nsns.distplot(hm.kurt(),color='orange',axlabel ='Kurtness')\n#hm['VolumeHL'].skew(), hm['VolumeHL'].kurt()","1b5b645a":"import matplotlib.pyplot as plt\nplt.hist(hm['VolumeHL'], orientation = 'vertical',histtype = 'bar', color ='red')\nplt.show()\nplt.hist(np.log(hm['VolumeHL']),orientation = 'vertical',histtype = 'bar',color ='red')\nplt.show()","dba63318":"#\u5730\u533a\uff1a\u9ed1\u9f99\u6c5f\uff1bBrand\uff1a10\u79cd\n\nlayered_hlist = []\nlayered_jlist = []\nheilong = {}\njilin = {}\n\n#\u5148\u770b\u5730\u533a\u4e3a\u9ed1\u9f99\u6c5f\u7684\nfor segment in ['low-end 1','low-end 2','low-end 3','middle-end 1','middle-end 2','middle-end 3','high-end 1','high-end 2','high-end 3','super high-end 1']:\n    heilong = hm[(hm['SalesRegion']=='Heilongjiang') & (hm['Brand'] == segment)]\n    layered_hlist.append(heilong)\n\n#\u518d\u770b\u5730\u533a\u4e3a\u5409\u6797\u7684\nfor segment in ['low-end 1','low-end 2','low-end 3','middle-end 1','middle-end 2','middle-end 3','high-end 1','high-end 2','high-end 3','super high-end 1']:\n    jilin = hm[(hm['SalesRegion']=='Jilin') & (hm['Brand'] == segment)]\n    layered_jlist.append(jilin)\n    \nprint(layered_hlist)\n","6385c057":"#\u5730\u533a\u4e3a\u9ed1\u9f99\u6c5f\u768420\u4e2a\u968f\u673aSKU\u65f6\u95f4\u5e8f\u5217\u2014\u2014\u7528\u4e8e\u89c2\u5bdf\u4e0d\u540cSKU\u7684\u4e0d\u540c\u9500\u91cf\u8d8b\u52bf\u53d8\u5316\u7279\u5f81\ntwenty_examples = random.sample(range(1,70), 20)\n\nfig, axs = plt.subplots(10, 2, figsize=(15, 20))\naxs = axs.flatten()\nax_idx = 0\nfor i in twenty_examples:\n    s = hm0.loc[hm0['SKU Code']==i]\n    sh= s.loc[s['SalesRegion']=='Heilongjiang']['VolumeHL']\n    sh.plot(title='SKU'+str(i),ax=axs[ax_idx])\n    ax_idx += 1\nplt.tight_layout()\nplt.show()","db7cdcb9":"#\u5730\u533a\u4e3a\u5409\u6797\u768420\u4e2a\u968f\u673aSKU\u65f6\u95f4\u5e8f\u5217\u2014\u2014\u7528\u4e8e\u89c2\u5bdf\u4e0d\u540cSKU\u7684\u4e0d\u540c\u9500\u91cf\u8d8b\u52bf\u53d8\u5316\u7279\u5f81\n\ntwenty_examples = random.sample(range(1,70), 20)\n\nfig, axs = plt.subplots(10, 2, figsize=(15, 20))\naxs = axs.flatten()\nax_idx = 0\nfor i in twenty_examples:\n    s = hm0.loc[hm0['SKU Code']==i]\n    sh= s.loc[s['SalesRegion']=='Jilin']['VolumeHL']\n    sh.plot(title='SKU'+str(i),ax=axs[ax_idx])\n    ax_idx += 1\nplt.tight_layout()\nplt.suptitle('Jilin')\nplt.show()","7bf575b4":"# \u7279\u5f81\u5206\u6790","2f262c60":"# **\u5bfc\u5165\u6240\u9700\u7684\u5305**"}}