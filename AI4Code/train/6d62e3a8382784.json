{"cell_type":{"9e32eaf0":"code","656b0397":"code","1df5ac76":"code","a39f235d":"code","d68f20cc":"code","85af8d93":"code","5b0b6921":"code","e89b51f5":"code","c9710afd":"code","a5b6268a":"code","12b2dddc":"code","a8b486bb":"code","97f5ec24":"code","7f4ea5c8":"code","c6921d11":"code","e1806f3b":"code","6b8c4371":"code","aec9e282":"code","46f8db7d":"code","481cff57":"code","bc13d555":"code","66da8418":"code","b98409b9":"code","01f78b9c":"code","6d823988":"code","0e43087b":"code","c3c71701":"code","d4d65bbc":"code","553fe958":"code","ae81440d":"code","01be4471":"code","cef3b92d":"code","e405b041":"code","1ed5d69c":"code","7ebbc0b3":"code","54fbaf8f":"code","fd0b760c":"code","852d2dd6":"code","caff84f5":"code","075ab842":"code","d19a3793":"code","b95d0156":"code","4b0ed5d0":"code","d34b9aea":"code","16229873":"code","291a5a4b":"code","cdc61e92":"code","3253b32e":"code","15bb37a1":"code","b0238f06":"code","9d02ebd9":"code","67a6cec4":"code","612049c3":"code","53746abb":"code","01e7b01b":"code","cd2148f7":"code","e4062d76":"code","e7f35a62":"code","ea9e211f":"code","d1300327":"code","4a0631e4":"code","f1285f5c":"code","d3195bf3":"code","36dcd716":"code","de029b18":"code","91c01307":"code","4b5f0958":"code","0f74a38b":"code","7b1c02d3":"code","797f1d4b":"code","3530a263":"code","9729c6bd":"code","fd7aad27":"code","4cea34ce":"code","9735e879":"code","4e7621f8":"code","441f72ae":"code","b9987c73":"code","f9310d65":"code","afd1461a":"code","71735175":"code","c26dc3a3":"code","853e13e1":"code","b7cfa62f":"code","fc2a21ac":"code","e67c4867":"code","21248f45":"code","db419483":"code","985822b8":"code","5b0efa78":"code","b47515de":"code","b2c9e84f":"code","68fe23ef":"code","ce2c9f74":"code","fd89d1c5":"code","657d8769":"code","da3c6b71":"code","d1b436b8":"code","7df9102b":"code","dfc3608c":"code","c0fe02aa":"code","ace9c9f9":"code","766aeed5":"code","65a0c66a":"markdown","6115544f":"markdown","4393d836":"markdown","f5d9b34c":"markdown","7019e1e6":"markdown","8f9e218b":"markdown","ec4dc8cb":"markdown","237f8845":"markdown","c918b674":"markdown","d642a08d":"markdown","5ec068f8":"markdown","a9940f57":"markdown","f6d25cc2":"markdown","0fa50729":"markdown","98e317f6":"markdown","968de026":"markdown","5608334c":"markdown","68d8922d":"markdown","6b82083e":"markdown","db633f50":"markdown","5314bc4f":"markdown","181c5c79":"markdown","8418da4c":"markdown","7220fcad":"markdown","5bf6aa5a":"markdown","b3a98aa9":"markdown","9ae375d3":"markdown","c610252d":"markdown","b9d824ba":"markdown","96cf98e5":"markdown","32551b3b":"markdown","b33fa039":"markdown","cfecfa76":"markdown","5ceab87f":"markdown","052e454c":"markdown","ff1f6468":"markdown","aab03d1e":"markdown","5173dddf":"markdown","2fe1c450":"markdown","176953b8":"markdown"},"source":{"9e32eaf0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import minimize\nfrom scipy.integrate import odeint\nimport plotly.express as px\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\nimport folium\nfrom scipy.integrate import odeint\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","656b0397":"df1 = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv')\ndf1.head(2)","1df5ac76":"df1 = df1[df1.columns[:-8]]\ndf1.drop('Unnamed: 3', axis=1, inplace=True)","a39f235d":"df1.head(2)","d68f20cc":"df1['reporting date'] = pd.to_datetime(df1['reporting date'])\ndf1['exposure_start'] = pd.to_datetime(df1['exposure_start'])\ndf1['exposure_end'] = pd.to_datetime(df1['exposure_end'])\ndf1['hosp_visit_date'] = pd.to_datetime(df1['hosp_visit_date'])\ndf1['symptom_onset'] = pd.to_datetime(df1['symptom_onset'])","85af8d93":"df2 = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv')\ndf2 = df2[df2.columns[:-12]]\ndf2.loc[df2['sex']=='male', 'sex'] = 'Male'\ndf2.loc[df2['sex']=='female', 'sex'] = 'Female'\ndf2.head(2)","5b0b6921":"df3 = pd.read_csv(\"..\/input\/corona-virus-report\/covid_19_clean_complete.csv\")\ndf3.head()","e89b51f5":"df_loc = pd.DataFrame(df1.groupby(['country'])['location'].nunique()).reset_index().sort_values(by='location', ascending=False).reset_index(drop=True)\ndf_loc.loc[df_loc.shape[0]]=['Total: '+str(df_loc['country'].nunique()), 'Total: '+str(df_loc['location'].sum())]\ndf_loc","c9710afd":"df1.head(2)","a5b6268a":"df1['sym_exp_diff'] = (df1['symptom_onset'] - df1['exposure_end']).dt.days\ndf1['hosp_sym_diff'] = (df1['hosp_visit_date'] - df1['symptom_onset']).dt.days","12b2dddc":"fig = px.pie(df1, values=[df1['gender'].value_counts()[0], df1['gender'].value_counts()[1]], names=['Male', 'Female'], title='Male v Female Affected Ratio')\nfig.show()","a8b486bb":"fig = px.violin(df2[df2['sex']!='4000'].dropna(subset=['age', 'sex']), y=\"age\", x='sex', color=\"sex\",\n                hover_data=df2.columns, title='Age Ratio of people affected b\/w the two genders')\nfig.show()","97f5ec24":"# Credits: https:\/\/www.kaggle.com\/imdevskp\/covid-19-analysis-visualization-comparisons, Devakumar Kp\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\ndf3_mapping = df3.loc[:20000].dropna(subset=['Confirmed']).reset_index(drop=True)\n\nfor i in range(0, len(df3_mapping)):\n    folium.Circle(\n        location=[df3_mapping.iloc[i]['Lat'], df3_mapping.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(df3_mapping.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(df3_mapping.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(df3_mapping.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(df3_mapping.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(df3_mapping.iloc[i]['Recovered']),\n        radius=int(df3_mapping.iloc[i]['Confirmed'])**1.1).add_to(m)\nm","7f4ea5c8":"ncov_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n\nncov_df['ObservationDate'] = pd.to_datetime(ncov_df['ObservationDate']) \n\nncov_df[\"Country\"] = ncov_df[\"Country\/Region\"].replace(\n    {\n        \"Mainland China\": \"China\",\n        \"Hong Kong SAR\": \"Hong Kong\",\n        \"Taipei and environs\": \"Taiwan\",\n        \"Iran (Islamic Republic of)\": \"Iran\",\n        \"Republic of Korea\": \"South Korea\",\n        \"Republic of Ireland\": \"Ireland\",\n        \"Macao SAR\": \"Macau\",\n        \"Russian Federation\": \"Russia\",\n        \"Republic of Moldova\": \"Moldova\",\n        \"Taiwan*\": \"Taiwan\",\n        \"Cruise Ship\": \"Others\",\n        \"United Kingdom\": \"UK\",\n        \"Viet Nam\": \"Vietnam\",\n        \"Czechia\": \"Czech Republic\",\n        \"St. Martin\": \"Saint Martin\",\n        \"Cote d'Ivoire\": \"Ivory Coast\",\n        \"('St. Martin',)\": \"Saint Martin\",\n        \"Congo (Kinshasa)\": \"Congo\",\n    }\n)\nncov_df[\"Province\"] = ncov_df[\"Province\/State\"].fillna(\"-\").replace(\n    {\n        \"Cruise Ship\": \"Diamond Princess cruise ship\",\n        \"Diamond Princess\": \"Diamond Princess cruise ship\"\n    }\n)","c6921d11":"ncov_df.head()","e1806f3b":"ncov_china = ncov_df[ncov_df['Country'] == 'China']\nncov_china = pd.DataFrame(ncov_china.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nfig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=ncov_china['ObservationDate'], y=ncov_china['Confirmed'], name='Confirmed Cases'))\nfig1.add_trace(go.Scatter(x=ncov_china[21:23]['ObservationDate'], y=ncov_china[21:23]['Confirmed'], mode='markers', name='Inflection', marker=dict(color='Red',line=dict(width=5, color='Red'))))\nfig1.layout.update(title_text='COVID-19 Growth in China & Inflection',xaxis_showgrid=False, yaxis_showgrid=False, width=800,\n        height=500,font=dict(\n#         family=\"Courier New, monospace\",\n        size=12,\n        color=\"white\"\n    ))\nfig1.layout.plot_bgcolor = 'Black'\nfig1.layout.paper_bgcolor = 'Black'\nfig1.show()","6b8c4371":"fig = px.box(df1.dropna(subset=['sym_exp_diff']), y=\"sym_exp_diff\", points='all', title='Days difference between symptom and exposure dates') # typically after how many days after the exposure do the symptoms come up\n# fig.layout.plot_bgcolor = '#6A7806'\n# fig.layout.paper_bgcolor = '#6A7806'\nfig.show()","aec9e282":"fig = px.box(df1.dropna(subset=['hosp_sym_diff']).reset_index(drop=True), y=\"hosp_sym_diff\", points='all', \\\n             title='Days difference between hospital visit and symptom dates') # typically after how many days after the exposure do the symptoms come up\nfig.show()","46f8db7d":"ncov_italy = ncov_df[ncov_df['Country'] == 'Italy']\nncov_us = ncov_df[ncov_df['Country'] == 'US']\nncov_spain = ncov_df[ncov_df['Country'] == 'Spain']\nncov_germany = ncov_df[ncov_df['Country'] == 'Germany']\nncov_iran = ncov_df[ncov_df['Country'] == 'Iran']\nncov_france = ncov_df[ncov_df['Country'] == 'France']\nncov_uk = ncov_df[ncov_df['Country'] == 'UK']\nncov_swiss = ncov_df[ncov_df['Country'] == 'Switzerland']\nncov_soukor = ncov_df[ncov_df['Country'] == 'South Korea']\n\nncov_italy = pd.DataFrame(ncov_italy.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_us = pd.DataFrame(ncov_us.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_spain = pd.DataFrame(ncov_spain.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_germany = pd.DataFrame(ncov_germany.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_iran = pd.DataFrame(ncov_iran.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_france = pd.DataFrame(ncov_france.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_uk = pd.DataFrame(ncov_uk.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_swiss = pd.DataFrame(ncov_swiss.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()\nncov_soukor = pd.DataFrame(ncov_soukor.groupby(['ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index()","481cff57":"ncov_all = pd.DataFrame(ncov_df.groupby(['Country', 'ObservationDate'])['Confirmed', 'Deaths', 'Recovered'].sum()).reset_index().drop_duplicates(subset=['Country'], keep='last')\nncov_all.reset_index(drop=True, inplace=True)\nncov_all = ncov_all.sort_values(by=['Confirmed'], ascending=False).reset_index(drop=True)\nncov_all = ncov_all.head(10)","bc13d555":"fig = go.Figure(data=[\n    go.Bar(name='Confirmed',x=ncov_all['Country'].unique(), y=ncov_all['Confirmed']),\n    go.Bar(name='Deaths', x=ncov_all['Country'].unique(), y=ncov_all['Deaths']),\n    go.Bar(name='Recovered', x=ncov_all['Country'].unique(), y=ncov_all['Recovered'])\n])\n# Change the bar mode\nfig.layout.update(barmode='stack', title='Top 10 Country-wise Corona Cases & Consequences', yaxis_showgrid=False)\nfig.show()","66da8418":"fig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=ncov_italy['ObservationDate'], y=ncov_italy['Confirmed'], name='Italy'))\nfig1.add_trace(go.Scatter(x=ncov_us['ObservationDate'], y=ncov_us['Confirmed'], name='USA'))\nfig1.add_trace(go.Scatter(x=ncov_spain['ObservationDate'], y=ncov_spain['Confirmed'], name='Spain'))\nfig1.add_trace(go.Scatter(x=ncov_uk['ObservationDate'], y=ncov_uk['Confirmed'], name='UK'))\nfig1.add_trace(go.Scatter(x=ncov_germany['ObservationDate'], y=ncov_germany['Confirmed'], name='Germany'))\nfig1.add_trace(go.Scatter(x=ncov_iran['ObservationDate'], y=ncov_iran['Confirmed'], name='Iran'))\nfig1.add_trace(go.Scatter(x=ncov_france['ObservationDate'], y=ncov_france['Confirmed'], name='France'))\n\nfig1.layout.update(title_text='COVID-19 Growth in Rest of the World',xaxis_showgrid=False, yaxis_showgrid=False, width=800,\n        height=500,font=dict(\n        size=12,\n        color=\"white\"\n    ))\nfig1.layout.plot_bgcolor = 'Black'\nfig1.layout.paper_bgcolor = 'Black'\nfig1.show()","b98409b9":"ncov_all['CD_Ratio'] = ncov_all['Deaths']\/ncov_all['Confirmed']\nncov_all['CR_Ratio'] = ncov_all['Recovered']\/ncov_all['Confirmed']\nncov_all = ncov_all.round(2)\nncov_all.head()","01f78b9c":"ncov_all_cdr = ncov_all.sort_values(by=['CD_Ratio'], ascending=False).reset_index(drop=True)\nncov_all_crr = ncov_all.sort_values(by=['CR_Ratio'], ascending=False).reset_index(drop=True)\nfig = px.bar(ncov_all_cdr, x=\"Country\", y=\"CD_Ratio\", color='CD_Ratio', title='Country-wise Death:Confirmed Cases Ratio')\nfig.show()","6d823988":"fig = px.bar(ncov_all_crr, x=\"Country\", y=\"CR_Ratio\", color='CR_Ratio', title='Country-wise Recovered:Confirmed Cases Ratio')\nfig.show()","0e43087b":"df2_china = df2[df2['country']=='China'].dropna(subset=['age']).reset_index(drop=True)\ndf2_italy = df2[df2['country']=='Italy'].dropna(subset=['age']).reset_index(drop=True)\ndf2_china.head(2)","c3c71701":"fig = go.Figure()\nfig.add_trace(go.Box(y=df2_china['age'], name='China'))\nfig.add_trace(go.Box(y=df2_italy['age'], name='Italy'))\nfig.update_layout(title='Age Comparison between Chinese and Italians')\n\nfig.show()","d4d65bbc":"def clean(x):\n    if x == 'death' or x == 'died' or x == 'Death':\n        return 'death'\n    elif x == 'discharged' or x=='discharge':\n        return 'discharge'\n    elif x == 'recovered' or x=='stable':\n        return 'recovered'\n    else:\n        return np.nan\n    \ndef apply_int(x):\n    try:\n        y = int(x)\n        return y\n    except:\n        return np.nan\n\n    \ndf1_chinese = pd.DataFrame(df2_china[df2_china['outcome'].apply(clean)=='death']['age'].apply(apply_int)).assign(outcome='death')\ndf2_chinese = pd.DataFrame(df2_china[df2_china['outcome'].apply(clean)=='discharge']['age'].apply(apply_int)).assign(outcome='discharge')\ndf3_chinese = pd.DataFrame(df2_china[df2_china['outcome'].apply(clean)=='recovered']['age'].apply(apply_int)).assign(outcome='recovered')\n\nfig = go.Figure()\nfig.add_trace(go.Box(y=df1_chinese['age'], name=\"Deceased Patients\"))\nfig.add_trace(go.Box(y=df2_chinese['age'], name=\"Discharged Patients\"))\nfig.add_trace(go.Box(y=df3_chinese['age'], name=\"Recovered Patients\"))\nfig.update_layout(title_text='Chinese COVID-19 Patients Outcome Age-Wise')\nfig.show()","553fe958":"df_india= pd.read_csv('..\/input\/coronavirus-cases-in-india\/Covid cases in India.csv')\ndbd_tc_india = pd.read_excel('..\/input\/covid19-india-complete-data\/COVID19 India Complete Dataset May 2020.xlsx', sheet_name='Daily Cases Time-Series')","ae81440d":"dbd_tc_india.head(2)","01be4471":"db_india = pd.DataFrame(dbd_tc_india.groupby(['Date'])['Total Confirmed'].sum()).reset_index()\n\nfig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=db_india['Date'], y=db_india['Total Confirmed']))\nfig1.layout.update(title_text='COVID-19 Growth in India',xaxis_showgrid=False, yaxis_showgrid=False, width=800,\n        height=500,font=dict(\n#         family=\"Courier New, monospace\",\n        size=12,\n        color=\"white\"\n    ))\nfig1.layout.plot_bgcolor = 'Black'\nfig1.layout.paper_bgcolor = 'Black'\nfig1.show()","cef3b92d":"db_state_india = pd.read_excel('..\/input\/covid19-india-complete-data\/COVID19 India Complete Dataset May 2020.xlsx', sheet_name='State-Wise Data')\ndb_state_india = db_state_india[db_state_india['State']!='Total']\ndb_state_india.head(2)","e405b041":"fig = px.bar(db_state_india.sort_values('Confirmed', ascending=False).sort_values('Confirmed', ascending=True),\n             x=\"Confirmed\", y=\"State\", \n             title='Total Confirmed Cases', \n             text='Confirmed', \n             orientation='h', \n             width=800, height=800, range_x = [0, max(db_state_india['Confirmed'])])\nfig.update_traces(marker_color='#670404', opacity=0.8, textposition='inside')\n\nfig.update_layout(plot_bgcolor='#CDCCA7')\nfig.show()","1ed5d69c":"dbd_testing_india = pd.read_excel('..\/input\/covid19-india-complete-data\/COVID19 India Complete Dataset May 2020.xlsx', sheet_name='ICMR Testing Count')\ndbd_testing_india['Update Time Stamp'] = pd.to_datetime(dbd_testing_india['Update Time Stamp'], format='%d\/%m\/%Y %I:%M: %p')\ndbd_testing_india.head(2)","7ebbc0b3":"df_hos_bed = dbd_testing_india.rename(columns={'Update Time Stamp':'DateTime', 'Total Individuals Tested':'TotalIndividualsTested', 'Total Positive Cases':\\\n                                              'TotalPositiveCases'}).copy()\ndf_hos_bed['DateTime'] = df_hos_bed['DateTime'].dt.date\ndf_hos_bed.head()","54fbaf8f":"df_hos_bed['totalnegative'] = df_hos_bed['TotalIndividualsTested'] - df_hos_bed['TotalPositiveCases']","fd0b760c":"df_hos_bed_per_day = df_hos_bed.drop_duplicates(subset=['DateTime'], keep='last')\ndf_hos_bed_per_day['test_results_posratio'] = round(df_hos_bed_per_day['TotalPositiveCases']\/df_hos_bed_per_day['TotalIndividualsTested'], 3)\ndf_hos_bed_per_day.head()","852d2dd6":"df_indi = pd.read_excel('..\/input\/covid19-india-complete-data\/COVID19 India Complete Dataset May 2020.xlsx', sheet_name='Raw Data')\ndf_indi.rename(columns={'Patient Number':'id','Current Status':'current_status', 'Age Bracket':'age', 'Notes':'notes'}, inplace=True)\ndf_indi.head(2)","caff84f5":"df_indi.dropna(subset=['current_status', 'age'], inplace=True)\ndf_indi.reset_index(drop=True, inplace=True)","075ab842":"df_indi['current_status'].unique(), df_indi.shape","d19a3793":"df1_indians = df_indi[df_indi['current_status'] == 'Deceased']\ndf2_indians = df_indi[df_indi['current_status'] == 'Hospitalized']\ndf3_indians = df_indi[df_indi['current_status'] == 'Recovered']\n\nfig = go.Figure()\nfig.add_trace(go.Box(y=df1_indians['age'], name=\"Deceased Patients\"))\nfig.add_trace(go.Box(y=df2_indians['age'], name=\"Hospitalized Patients\"))\nfig.add_trace(go.Box(y=df3_indians['age'], name=\"Recovered Patients\"))\nfig.update_layout(title_text='Indian COVID-19 Patients Outcome Age-Wise')\nfig.show()","b95d0156":"pep_no_trav_his = df_indi[df_indi['notes'].str.contains('Travel') == False]\npep_with_trav_his = df_indi[df_indi['notes'].str.contains('Travel') == True]","4b0ed5d0":"df_indi['id'].nunique(), pep_no_trav_his['id'].nunique()","d34b9aea":"colors = ['#B5B200', '#1300B5']\nnegative = round(pep_no_trav_his['id'].nunique()\/df_indi['id'].nunique()*100, 2)\npositive = round(pep_with_trav_his['id'].nunique()\/df_indi['id'].nunique()*100, 2)\n                         \nfig = px.pie(pep_no_trav_his, values=[negative, positive], names=['Patients w\/o Travel History', 'Patients with Travel History'], \\\n             title='Patients with and without Travel History')\nfig.show()","16229873":"from wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='black',\n        stopwords=stopwords,\n        max_words=200,\n        max_font_size=40, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n).generate(str(data))\n\n    fig = plt.figure(1, figsize=(15, 15))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()\n\nshow_wordcloud(pep_no_trav_his['notes'].apply(lambda x: x.replace('travel', '')))","291a5a4b":"df_w_testing = pd.read_csv('..\/input\/covid19-testing-rate-all-countries\/full-list-total-tests-for-covid-19.csv')\ndf_w_testing.head(2)","cdc61e92":"df_w_testing = df_w_testing[(df_w_testing['Entity']=='Italy') | (df_w_testing['Entity']=='France') | \\\n                            (df_w_testing['Entity']=='Germany') | (df_w_testing['Entity']=='United Kingdom') | \\\n                            (df_w_testing['Entity']=='United States') | (df_w_testing['Entity']=='Spain') | \\\n                            ((df_w_testing['Entity']=='India'))]\ndf_w_testing['Date'] = pd.to_datetime(df_w_testing['Date'])\ndf_w_testing.reset_index(drop=True, inplace=True)","3253b32e":"df_fra = df_w_testing[df_w_testing['Entity'] == 'France']\ndf_ita = df_w_testing[df_w_testing['Entity'] == 'Italy']\ndf_spa = df_w_testing[df_w_testing['Entity'] == 'Spain']\ndf_uk = df_w_testing[df_w_testing['Entity'] == 'United Kingdom']\ndf_us = df_w_testing[df_w_testing['Entity'] == 'United States']\ndf_ger = df_w_testing[df_w_testing['Entity'] == 'Germany']","15bb37a1":"df_fra_rate = pd.merge(df_fra[['Date', 'Total tests']], ncov_france[['ObservationDate', 'Confirmed']], left_on=['Date'], \\\n         right_on=['ObservationDate'], how='left')\ndf_ita_rate = pd.merge(df_ita[['Date', 'Total tests']], ncov_italy[['ObservationDate', 'Confirmed']], left_on=['Date'], \\\n         right_on=['ObservationDate'], how='left')\ndf_ger_rate = pd.merge(df_ger[['Date', 'Total tests']], ncov_germany[['ObservationDate', 'Confirmed']], left_on=['Date'], \\\n         right_on=['ObservationDate'], how='left')\ndf_us_rate = pd.merge(df_us[['Date', 'Total tests']], ncov_us[['ObservationDate', 'Confirmed']], left_on=['Date'], \\\n         right_on=['ObservationDate'], how='left')\ndf_uk_rate = pd.merge(df_uk[['Date', 'Total tests']], ncov_uk[['ObservationDate', 'Confirmed']], left_on=['Date'], \\\n         right_on=['ObservationDate'], how='left')\ndf_spa_rate = pd.merge(df_spa[['Date', 'Total tests']], ncov_spain[['ObservationDate', 'Confirmed']], left_on=['Date'], \\\n         right_on=['ObservationDate'], how='left')","b0238f06":"df_fra_rate['positive_percentage'] = round(df_fra_rate['Confirmed']\/df_fra_rate['Total tests'], 2)\ndf_ita_rate['positive_percentage'] = round(df_ita_rate['Confirmed']\/df_ita_rate['Total tests'], 2)\ndf_ger_rate['positive_percentage'] = round(df_ger_rate['Confirmed']\/df_ger_rate['Total tests'], 2)\ndf_us_rate['positive_percentage'] = round(df_us_rate['Confirmed']\/df_us_rate['Total tests'], 2)\ndf_uk_rate['positive_percentage'] = round(df_uk_rate['Confirmed']\/df_uk_rate['Total tests'], 2)\ndf_spa_rate['positive_percentage'] = round(df_spa_rate['Confirmed']\/df_spa_rate['Total tests'], 2)","9d02ebd9":"df_rate = pd.DataFrame(['France', 'Italy', 'Germany', 'USA', 'UK', 'Spain']).rename(columns={0:'Country'})\ndf_rate['positive_percentage_mean'] = [df_fra_rate['positive_percentage'].mean(), df_ita_rate['positive_percentage'].mean(), \\\n                                  df_ger_rate['positive_percentage'].mean(), df_us_rate['positive_percentage'].mean(), \\\n                                  df_uk_rate['positive_percentage'].mean(), df_spa_rate['positive_percentage'].mean()]\ndf_rate['positive_percentage_mean'] = df_rate['positive_percentage_mean']*100\ndf_rate['positive_percentage_mean'] = df_rate['positive_percentage_mean'].round(2)\ndf_rate","67a6cec4":"df_ind_rate = pd.read_excel('..\/input\/covid19-india-complete-data\/COVID19 India Complete Dataset May 2020.xlsx', sheet_name='ICMR Testing Count')\ndf_ind_rate = df_ind_rate.dropna(subset=['Total Positive Cases']).reset_index(drop=True)\ndf_ind_rate['Total Individuals Tested'].fillna(df_ind_rate['Total Samples Tested']-900, inplace=True)\ndf_ind_rate['positive_percentage'] = round(df_ind_rate['Total Positive Cases']\/df_ind_rate['Total Individuals Tested'], 5)\ndf_ind_rate_count = pd.DataFrame(['India']).rename(columns={0:'Country'})\ndf_ind_rate_count['positive_percentage_mean'] = round(df_ind_rate.loc[len(df_ind_rate)-1]['positive_percentage']*100, 2)","612049c3":"df_rate = pd.concat([df_rate, df_ind_rate_count], ignore_index=True)","53746abb":"fig = px.bar(df_rate.sort_values(by=['positive_percentage_mean'], ascending=False), x='Country', y='positive_percentage_mean',\n            title='Percentage of People who turned out to be +ve in Testing')\nfig.show()","01e7b01b":"df_hos_bed_per_day = df_hos_bed_per_day.dropna(subset=['TotalPositiveCases']).reset_index(drop=True)\ndf_hos_bed_per_day['TotalIndividualsTested'].fillna(df_hos_bed_per_day['Total Samples Tested']-900, inplace=True)\ndf_hos_bed_per_day['test_results_posratio'] = round(df_hos_bed_per_day['TotalPositiveCases']\/df_hos_bed_per_day['TotalIndividualsTested'], 3)\ndf_hos_bed_per_day.head(2)","cd2148f7":"fig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=df_hos_bed_per_day['DateTime'], y=df_hos_bed_per_day['test_results_posratio']*100, name='Confirmed Cases', \\\n                         marker=dict(color='#D32210')))\nfig1.layout.update(title_text='COVID-19 Positive Detection per Test Ratio in India w.r.t. Time',xaxis_showgrid=False, width=700, yaxis_title='% of Patients Tested +ve',\n        height=500,font=dict(\n#         family=\"Courier New, monospace\",\n        size=12,\n        color=\"white\"\n    ))\nfig1.layout.plot_bgcolor = '#097E99'\nfig1.layout.paper_bgcolor = '#097E99'\nfig1.show()","e4062d76":"dbd_tc_india.rename(columns={'Daily Confirmed':'New Cases'}, inplace=True)\ndbd_tc_india.head(2)","e7f35a62":"ss = []\nfor i in dbd_tc_india.index:\n    if(i!= min(dbd_tc_india.index)):\n        lm = dbd_tc_india.loc[i]['New Cases']\/dbd_tc_india.loc[i-1]['New Cases']\n    else:\n        lm = np.NaN\n    ss.append(lm)\n        \ndbd_tc_india['Growth_Rate'] = ss\ndbd_tc_india.head(2)","ea9e211f":"fig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=dbd_tc_india.iloc[35:(dbd_tc_india.shape[0]-1)]['Date'], y=dbd_tc_india.iloc[35:(dbd_tc_india.shape[0]-1)]['Growth_Rate'], name='Growth Factor', \\\n                         marker=dict(color='#008040')))\nfig1.layout.update(title_text='COVID-19 Growth Factor in India w.r.t. Time',xaxis_showgrid=False, yaxis_showgrid=False, width=700, yaxis_title='Growth Factor',\n        height=500,font=dict(\n#         family=\"Courier New, monospace\",\n        size=12,\n        color=\"white\"\n    ))\nfig1.layout.plot_bgcolor = '#4d3900'\nfig1.layout.paper_bgcolor = '#4d3900'\nfig1.show()","d1300327":"print('Mean Growth Factor in India = ', round(dbd_tc_india.iloc[35:]['Growth_Rate'].mean(), 2))","4a0631e4":"df_ind_main = pd.read_excel('..\/input\/covid19-india-complete-data\/COVID19 India Complete Dataset May 2020.xlsx', sheet_name='Raw Data')\ndf_ind_main = df_ind_main.dropna(subset=['Date Announced'])\ndf_ind_main.reset_index(drop=True)\ndf_ind_main = df_ind_main.drop_duplicates(subset=df_ind_main.drop('Patient Number', axis=1).columns)\ndf_ind_main.reset_index(drop=True)\ndf_ind_main.head(2)","f1285f5c":"col = 'Notes'\ndf_ind_main['Notes'] = df_ind_main['Notes'].fillna('NA').apply(lambda x: x.replace('No Travel', 'Non-travel'))\nconditions  = [ df_ind_main[col].str.contains('Travel') == True, df_ind_main[col].str.contains('Attended|attended') == True]\nchoices     = [1300, 350] \n\n# Guesstimating avg. population that might have been affected (Airport: 1200 (flight+both side airport) + 100[miscellaneous], \n# Religious Event: 250 + 100[miscellaneous])\n\ndf_ind_main[\"estd_population\"] = np.select(conditions, choices, default=100) # default is 100 (only miscellaneous)\n\n# Miscellaneous corresponds to local area shops, transportation, residential area, etc.)\n# Since there has been no hard evidence of community transmission yet, in India, I have kept the figures on the lower side","d3195bf3":"# Total population, N.\nN = 1080000 # considering the a rough estimate of 10 lakhs as population of India who might have been exposed because 135 crore,\n            \n# Initial number of infected and recovered individuals, I0 and R0.\nI0, R0 = 102, 19 # till India crossed 100 cases\n# Everyone else, S0, is susceptible to infection initially.\nS0 = N - I0 - R0\n# Contact rate, beta, and mean recovery rate, gamma, (in 1\/days).\nbeta, gamma = 2.4, 1.\/35 # considering Beta & Gamma value based on China's & Europe situation\n# A grid of time points (in days)\nt = np.linspace(0, 30, 30)\n\n# The SIR model differential equations.\ndef deriv(y, t, N, beta, gamma):\n    S, I, R = y\n    dSdt = -beta * S * I \/ N\n    dIdt = beta * S * I \/ N - gamma * I\n    dRdt = gamma * I\n    return dSdt, dIdt, dRdt\n\n# Initial conditions vector\ny0 = S0, I0, R0\n# Integrate the SIR equations over the time grid, t.\nret = odeint(deriv, y0, t, args=(N, beta, gamma))\nS, I, R = ret.T\n\n# Plot the data on three separate curves for S(t), I(t) and R(t)\nfig = plt.figure(facecolor='w', figsize=(12,10))\nax = fig.add_subplot(111, axisbelow=True)\nax.plot(t, S, 'b', alpha=0.5, lw=2, label='Susceptible')\nax.plot(t, I, 'r', alpha=0.5, lw=2, label='Infected')\nax.plot(t, R, 'g', alpha=0.5, lw=2, label='Recovered with immunity')\nax.set_xlabel('Time in Days', size=13)\nax.set_ylabel('Number of People', size=13)\n# ax.set_ylim(0,1.2)\nax.yaxis.set_tick_params(length=0)\nax.xaxis.set_tick_params(length=0)\nax.grid(b=True, which='major', c='w', lw=2, ls='-')\nlegend = ax.legend()\nax.set_facecolor('#dddddd')\nlegend.get_frame().set_alpha(0.5)\nfor spine in ('top', 'right', 'bottom', 'left'):\n    ax.spines[spine].set_visible(False)\nax.set_title('Potential COVID-19 Scenario from 14th March for next 30 days in India without lockdown', size=15)\nplt.show()","36dcd716":"dbd_tc_india.head(2)","de029b18":"dbd_tc_param = pd.DataFrame(dbd_tc_india.groupby(['Date'])['Total Confirmed','Total Recovered', 'Total Deceased'].sum().reset_index())\ndbd_tc_param['Total Active Cases'] = dbd_tc_param['Total Confirmed'] - dbd_tc_param['Total Recovered'] - dbd_tc_param['Total Deceased']\ndbd_tc_param.head(3)","91c01307":"dbd_tc_pl = dbd_tc_param[(dbd_tc_param['Date']>'2020-03-01') & (dbd_tc_param['Date']<'2020-03-25')].reset_index(drop=True) # considering pre lockdown period\ndbd_tc_pl.head(2)","4b5f0958":"dbd_tc_param = dbd_tc_param[dbd_tc_param['Date']>='2020-03-25'].reset_index(drop=True) # considering from lockdown date\ndbd_tc_param = dbd_tc_param[:-1]\ndbd_tc_param.head(2)","0f74a38b":"dbd_tc_param.tail(2)","7b1c02d3":"data = dbd_tc_pl.set_index('Date')['Total Active Cases']\ninfected = dbd_tc_pl.set_index('Date')['Total Confirmed']\nrecovered = dbd_tc_pl.set_index('Date')['Total Recovered']","797f1d4b":"s_0 = 150000\ni_0 = 5\nr_0 = 3","3530a263":"def loss(point, data, recovered, s_0, i_0, r_0):\n    size = len(data)\n    beta, gamma = point\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    solution = solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1), vectorized=True)\n    l1 = np.sqrt(np.mean((solution.y[1] - data)**2))\n    l2 = np.sqrt(np.mean((solution.y[2] - recovered)**2))\n    alpha = 0.1\n    return alpha * l1 + (1 - alpha) * l2","9729c6bd":"def predict(beta, gamma, data, recovered, s_0, i_0, r_0):\n    new_index = list(data.index.values)\n    size = len(new_index)\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    extended_actual = np.concatenate((data.values, [None] * (size - len(data.values))))\n    extended_recovered = np.concatenate((recovered.values, [None] * (size - len(recovered.values))))\n    return new_index, extended_actual, extended_recovered, solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1))","fd7aad27":"def train(recovered, infected, data):\n    recovered = recovered\n    infected = infected\n    data = data\n\n    optimal = minimize(loss, [0.001, 0.001], args=(data, recovered, s_0, i_0, r_0), method='L-BFGS-B', bounds=[(0.00000001, 2), (0.00000001, 0.4)])\n    print(optimal)\n    beta, gamma = optimal.x\n    new_index, extended_actual, extended_recovered, prediction = predict(beta, gamma, data, recovered, s_0, i_0, r_0)\n    df = pd.DataFrame({'Actual Infected': extended_actual, 'Actual Recovered': extended_recovered, 'Susceptible': prediction.y[0], 'Predicted Infected': prediction.y[1], 'Predicted Recovered': prediction.y[2]}, index=new_index)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.set_title('Estimating Beta and Gamma for India during pre-lockdown')\n    df.plot(ax=ax)\n    print(f\"country=India, beta={beta:.8f}, gamma={gamma:.8f}, r_0:{(beta\/gamma):.8f}\")","4cea34ce":"train(recovered, infected, data)","9735e879":"dbd_tc_param.head(2)","4e7621f8":"dbd_tc_param.tail(2)","441f72ae":"data = dbd_tc_param.set_index('Date')['Total Active Cases']\ninfected = dbd_tc_param.set_index('Date')['Total Confirmed']\nrecovered = dbd_tc_param.set_index('Date')['Total Recovered']","b9987c73":"s_0 = 750000 \ni_0 = 603\nr_0 = 43","f9310d65":"def loss(point, data, recovered, s_0, i_0, r_0):\n    size = len(data)\n    beta, gamma = point\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    solution = solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1), vectorized=True)\n    l1 = np.sqrt(np.mean((solution.y[1] - data)**2))\n    l2 = np.sqrt(np.mean((solution.y[2] - recovered)**2))\n    alpha = 0.1\n    return alpha * l1 + (1 - alpha) * l2","afd1461a":"pres_fut = np.array(list(data.index.values)+ list((np.array(pd.date_range('2020-05-05', periods=90))))) #  months from 5th May","71735175":"def predict(beta, gamma, data, recovered, s_0, i_0, r_0):\n    new_index = pres_fut\n    size = len(new_index)\n    def SIR(t, y):\n        S = y[0]\n        I = y[1]\n        R = y[2]\n        return [-beta*S*I\/s_0, beta*S*I\/s_0-gamma*I, gamma*I]\n    extended_actual = np.concatenate((data.values, [None] * (size - len(data.values))))\n    extended_recovered = np.concatenate((recovered.values, [None] * (size - len(recovered.values))))\n    return new_index, extended_actual, extended_recovered, solve_ivp(SIR, [0, size], [s_0,i_0,r_0], t_eval=np.arange(0, size, 1))","c26dc3a3":"def train(recovered, infected, data):\n    recovered = recovered\n    infected = infected\n    data = data\n\n    optimal = minimize(loss, [0.001, 0.001], args=(data, recovered, s_0, i_0, r_0), method='L-BFGS-B', bounds=[(0.000001, 0.5), (0.00000001, 0.4)])\n    print(optimal)\n    beta, gamma = optimal.x\n    new_index, extended_actual, extended_recovered, prediction = predict(beta, gamma, data, recovered, s_0, i_0, r_0)\n    df = pd.DataFrame({'Actual Infected': extended_actual, 'Actual Recovered': extended_recovered, 'Susceptible': prediction.y[0], 'Predicted Infected': prediction.y[1], 'Predicted Recovered': prediction.y[2]}, index=new_index)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.set_title('Possible COVID19 India Scenario next 3 months from 5th May, 2020')\n    df.plot(ax=ax)\n    print(f\"country=India, beta={beta:.8f}, gamma={gamma:.8f}, r_0:{(beta\/gamma):.8f}\")","853e13e1":"train(recovered, infected, data)","b7cfa62f":"ncov_china['week_no'] = ncov_china['ObservationDate'].dt.week\nncov_china_infl = ncov_china.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_china_infl","fc2a21ac":"ncov_china_infl_weekly = ncov_china_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_china_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_china_infl = pd.merge(ncov_china_infl, ncov_china_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_china_infl['Increased_Cases'] = np.log(ncov_china_infl['Increased_Cases'])\nncov_china_infl = ncov_china_infl.replace([np.inf, -np.inf], np.nan)\nncov_china_infl = ncov_china_infl.fillna(0)\nncov_china_infl.drop(ncov_china_infl.tail(1).index,inplace=True) \nncov_china_infl","e67c4867":"ncov_italy['week_no'] = ncov_italy['ObservationDate'].dt.week\nncov_italy_infl = ncov_italy.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_italy_infl","21248f45":"ncov_italy_infl_weekly = ncov_italy_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_italy_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_italy_infl = pd.merge(ncov_italy_infl, ncov_italy_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_italy_infl['Increased_Cases'] = np.log(ncov_italy_infl['Increased_Cases'])\nncov_italy_infl = ncov_italy_infl.replace([np.inf, -np.inf], np.nan)\nncov_italy_infl = ncov_italy_infl.fillna(0)\nncov_italy_infl.drop(ncov_italy_infl.tail(1).index,inplace=True) \nncov_italy_infl","db419483":"ncov_us['week_no'] = ncov_us['ObservationDate'].dt.week\nncov_us_infl = ncov_us.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_us_infl","985822b8":"ncov_us_infl_weekly = ncov_us_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_us_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_us_infl = pd.merge(ncov_us_infl, ncov_us_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_us_infl['Increased_Cases'] = np.log(ncov_us_infl['Increased_Cases'])\nncov_us_infl = ncov_us_infl.replace([np.inf, -np.inf], np.nan)\nncov_us_infl = ncov_us_infl.fillna(0)\nncov_us_infl.drop(ncov_us_infl.tail(1).index,inplace=True) \nncov_us_infl","5b0efa78":"ncov_germany['week_no'] = ncov_germany['ObservationDate'].dt.week\nncov_germany_infl = ncov_germany.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_germany_infl","b47515de":"ncov_germany_infl_weekly = ncov_germany_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_germany_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_germany_infl = pd.merge(ncov_germany_infl, ncov_germany_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_germany_infl['Increased_Cases'] = np.log(ncov_germany_infl['Increased_Cases'])\nncov_germany_infl = ncov_germany_infl.replace([np.inf, -np.inf], np.nan)\nncov_germany_infl = ncov_germany_infl.fillna(0)\nncov_germany_infl.drop(ncov_germany_infl.tail(1).index,inplace=True) \nncov_germany_infl","b2c9e84f":"ncov_spain['week_no'] = ncov_spain['ObservationDate'].dt.week\nncov_spain_infl = ncov_spain.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_spain_infl","68fe23ef":"ncov_spain_infl_weekly = ncov_spain_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_spain_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_spain_infl = pd.merge(ncov_spain_infl, ncov_spain_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_spain_infl['Increased_Cases'] = np.log(ncov_spain_infl['Increased_Cases'])\nncov_spain_infl = ncov_spain_infl.replace([np.inf, -np.inf], np.nan)\nncov_spain_infl = ncov_spain_infl.fillna(0)\nncov_spain_infl.drop(ncov_spain_infl.tail(1).index,inplace=True) \nncov_spain_infl","ce2c9f74":"ncov_soukor['week_no'] = ncov_soukor['ObservationDate'].dt.week\nncov_soukor_infl = ncov_soukor.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_soukor_infl","fd89d1c5":"ncov_soukor_infl_weekly = ncov_soukor_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_soukor_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_soukor_infl = pd.merge(ncov_soukor_infl, ncov_soukor_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_soukor_infl['Increased_Cases'] = np.log(ncov_soukor_infl['Increased_Cases'])\nncov_soukor_infl = ncov_soukor_infl.replace([np.inf, -np.inf], np.nan)\nncov_soukor_infl = ncov_soukor_infl.fillna(0)\nncov_spain_infl.drop(ncov_spain_infl.tail(1).index,inplace=True) \nncov_soukor_infl","657d8769":"ncov_iran['week_no'] = ncov_iran['ObservationDate'].dt.week\nncov_iran_infl = ncov_iran.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_iran_infl","da3c6b71":"ncov_iran_infl_weekly = ncov_iran_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_iran_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_iran_infl = pd.merge(ncov_iran_infl, ncov_iran_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_iran_infl['Increased_Cases'] = np.log(ncov_iran_infl['Increased_Cases'])\nncov_iran_infl = ncov_iran_infl.replace([np.inf, -np.inf], np.nan)\nncov_iran_infl = ncov_iran_infl.fillna(0)\nncov_iran_infl.drop(ncov_iran_infl.tail(1).index,inplace=True) \nncov_iran_infl","d1b436b8":"ncov_france['week_no'] = ncov_france['ObservationDate'].dt.week\nncov_france_infl = ncov_france.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_france_infl","7df9102b":"ncov_france_infl_weekly = ncov_france_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_france_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_france_infl = pd.merge(ncov_france_infl, ncov_france_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_france_infl['Increased_Cases'] = np.log(ncov_france_infl['Increased_Cases'])\nncov_france_infl = ncov_france_infl.replace([np.inf, -np.inf], np.nan)\nncov_france_infl = ncov_france_infl.fillna(0)\nncov_france_infl.drop(ncov_france_infl.tail(1).index,inplace=True) \nncov_france_infl","dfc3608c":"ncov_uk['week_no'] = ncov_uk['ObservationDate'].dt.week\nncov_uk_infl = ncov_uk.drop_duplicates(subset=['week_no'], keep='last').reset_index(drop=True)\nncov_uk_infl","c0fe02aa":"ncov_uk_infl_weekly = ncov_uk_infl.set_index(['week_no']).diff().reset_index().fillna(0)\nncov_uk_infl_weekly.rename(columns={'Confirmed':'Increased_Cases'}, inplace=True)\nncov_uk_infl = pd.merge(ncov_uk_infl, ncov_uk_infl_weekly[['week_no', 'Increased_Cases']], how='left')\nncov_uk_infl['Increased_Cases'] = np.log(ncov_uk_infl['Increased_Cases'])\nncov_uk_infl = ncov_uk_infl.replace([np.inf, -np.inf], np.nan)\nncov_uk_infl = ncov_uk_infl.fillna(0)\nncov_uk_infl.drop(ncov_uk_infl.tail(1).index,inplace=True) \nncov_uk_infl","ace9c9f9":"fig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=ncov_china_infl['Confirmed'], y=ncov_china_infl['Increased_Cases'], name='China', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_italy_infl['Confirmed'], y=ncov_italy_infl['Increased_Cases'], name='Italy', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_us_infl['Confirmed'], y=ncov_us_infl['Increased_Cases'], name='USA', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_soukor_infl['Confirmed'], y=ncov_soukor_infl['Increased_Cases'], name='South Korea', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_france_infl['Confirmed'], y=ncov_france_infl['Increased_Cases'], name='France', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_uk_infl['Confirmed'], y=ncov_uk_infl['Increased_Cases'], name='UK', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_iran_infl['Confirmed'], y=ncov_iran_infl['Increased_Cases'], name='Iran', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_spain_infl['Confirmed'], y=ncov_spain_infl['Increased_Cases'], name='Spain', \\\n                         ))\nfig1.add_trace(go.Scatter(x=ncov_germany_infl['Confirmed'], y=ncov_germany_infl['Increased_Cases'], name='Germany', \\\n                         ))\n\n\nfig1.layout.update(title_text='Predicting Inflection Point for the Countries',xaxis_showgrid=False, width=800, xaxis_title='Total no. of Confirmed Cases',\\\n                yaxis_title='log(Increased no. of Nwe Cases w.r.t. previous week)',\n        height=600,font=dict(\n#         family=\"Courier New, monospace\",\n        size=14,\n        color=\"white\"\n    ))\nfig1.layout.plot_bgcolor = '#3E6704'\nfig1.layout.paper_bgcolor = '#3E6704'\nfig1.show()","766aeed5":"from IPython.display import YouTubeVideo\n# a talk about IPython at Sage Days at U. Washington, Seattle.\n# Video credit: William Stein.\nYouTubeVideo('54XLXg4fYsc')","65a0c66a":"### What might be the reasons that patients without travel history got infected?","6115544f":"## Lets analyse a bit of India's situation right now","4393d836":"#### For all the initial population (N) estimations, please refer to the notebook present in this GitHub repo of mine:\nhttps:\/\/github.com\/debadridtt\/COVID-19-Analysis\/blob\/master\/SIR%20Modeling%20India%20%26%20State-Wise.ipynb","f5d9b34c":"# ***First set of Hypothesis around the Growth Factor:***\n### ***i) It majorly comprises public-exposure***\n### ***ii) Secondly to some extent, it also comprises the delay by a person in getting tested from the symptom date***\n### ***iii) Through unnoticed items like your smartphones, etc. Smartphone can be an extremely vulnerable item***\n\n#### The second hypothesis has to be highly correlated with the first one","7019e1e6":"#### - We see that none of the countries have approached the inflection point yet","8f9e218b":"> ### **Diving into some more EDA**\n\n#### Lets check the top 10 countries with maximum cases and respective deaths and recoveries","ec4dc8cb":"### The theory behind this is that, when the no. of weekly cases start dropping consistently for a few consecutive weeks w.r.t. previous week we have hit the inflection point\n### We see that only China and South Korea have been able to hit the inflection point\n\nFor my understanding, I have taken reference from the following video:","237f8845":"#### Defining Loss Function for estimating Beta and Gamma","c918b674":"**- Estimating Beta and Gamma during lockdown period and using it to predict the figures for the next 3 months from 5th May 2020**","d642a08d":"### Guesstimating the population that might have been affected by the Patients based on their places visited\n","5ec068f8":"![](https:\/\/miro.medium.com\/max\/4800\/0*2Hb-dGkPAZU_vUtW)\n\nPhoto by Viktor Forgacs on Unsplash\n\n### With everything that is occurring about the Coronavirus, it may be exceptionally difficult to settle on a choice of what to do today. Would it be a good idea for you to wait for more data? Accomplish something today? What?\n\n#### -How many cases of coronavirus will there be in your area?\n#### -What are the actual figures? Is everyone testing on time?\n#### -What should you do to prevent the spreading?\n#### -When is everything going to slow down?\n\n### The only way to prevent this is restricting the growth factor associated with the exponential rise in the number of cases. But what does this growth factor comprise of? ","a9940f57":"### Let's see if we can estimate the Beta & Gamma parameter with splitting the dataset into train and validation considering the lockdown ","f6d25cc2":"### - We see that there are so many people who go to the hospital after a few days from their symptom day. Can this delay cause more exposure and hence spread it out to more people?","0fa50729":"### From the above graph I believe that the inflection point is somewhere in the region between the two red points. We see that the exponential curve stops going upwards from around 1st March. The growth factor for the next few days seems to be a constant ~1\n\n### But in the first place why did the curve go up so fast? What led to the growth so fast?\n","98e317f6":"### In the above graph we see that the grey bars refer to the true no. of people and the yellow bars correspond to the people who got tested. Which means the ones who did not get tested were getting exposure with a lot of people outside.","968de026":"### COVID19 Test Results comparison between India & Rest of the World","5608334c":"### Pre-Lockdown Period (2nd March-25th March)\n\n#### Assumptions taken:\n- An initial population of 150000 could have been potentially exposed to COVID-19 as of 2nd March\n\n#### For all the initial population (N) estimations, please refer to the notebook present in this GitHub repo of mine:\nhttps:\/\/github.com\/debadridtt\/COVID-19-Analysis\/blob\/master\/SIR%20Modeling%20India%20%26%20State-Wise.ipynb","68d8922d":"### To better understand this I'm going to try out SIR models","6b82083e":"## Getting an Idea of the Inflection Point for a Country","db633f50":"- Comparing both of them seems like the age of the affected females are higher than that of males","5314bc4f":"### - We see that outcome trends are similar to China w.r.t. Age","181c5c79":"### COVID19 Test Results in Rest of the World","8418da4c":"- 1 out of 10 person dies in Italy which is too high","7220fcad":"## Estimating Beta & Gamma for India for SIR Modeling and Predicting for next 6 months\n\n#### Please note that in this notebook I have shown only the best case scenario possible in India, for other cases please refer to the notebook here: \nhttps:\/\/github.com\/debadridtt\/COVID-19-Analysis\/blob\/master\/SIR%20Modeling%20India%20%26%20State-Wise.ipynb\n\n\n#### Beta and Gamma are estimated in the following way:\n- Validation data used is from 2nd Mar to 24th Mar (pre-lockdown period) and 25th Mar to 19th Apr (lockdown period)\n- Forward prediction of 60 days have been done from 20th April considering parameter values derived during lockdown period\n- Define y(t) for the SIR model, and then use RMSE as the loss function, and used L-BFGS-B gradient descent optimization to minimise the loss function ","5bf6aa5a":"### Interesting Facts here:\n#### i) What did China do that there recovery rate is so high?\n#### ii) Need to understand why the deaths:confirmed ratio are so high in Iran, Italy, Spain and UK","b3a98aa9":"### COVID19 Test Results in India","9ae375d3":"# ***COVID-19: Understanding the Growth Factor involved in the exponential growth of the Corona Virus & Inflection Point in the Curve of Growth***","c610252d":"### State-Wise No. of cases in India","b9d824ba":"### **Total countries and locations affected**","96cf98e5":"### Comparing the Death:Confirmed & Recovered:Confirmed Ratios","32551b3b":"### - We see that for more the majority of the people the symptoms came up >=0 days after their last exposure date.\n\n### But when the symptoms showed up what did they do? Did they visit the hospital on time?","b33fa039":"![](https:\/\/miro.medium.com\/max\/3584\/1*r-ddYhoUtP_se6x-NOEinA.png)\n\nSource: Tomas Pueyo analysis over chart from the Journal of the American Medical Association, based on raw case data from the Chinese Center for Disease Control and Prevention","cfecfa76":"### Lockdown Period (25th Mar - 4th May)\n\n#### Assumptions taken:\n- An initial population of 750000 could have been potentially exposed to COVID-19 as of 25th March\n\n#### For all the initial population (N) estimations, please refer to the notebook present in this GitHub repo of mine:\nhttps:\/\/github.com\/debadridtt\/COVID-19-Analysis\/blob\/master\/SIR%20Modeling%20India%20%26%20State-Wise.ipynb\n","5ceab87f":"### Compared to the Western countries (Europe & USA) although we see that although the curve is in the trend of going up exponentially, however the no. of cases have not increased drastically. Because for those countries we see that the no. of cases has increased exponentially in the multiples of 1000 over a span of 2-3 weeks, where as in India its still below 1000\n\n### Following are the possible reasons:\n\n#### - **No. of testings done are less as compared to other countries, but even after that the no. of cases being a random multiple of 1000s like 50k or 60k is quite absurd**\n#### - **Community transmission never got triggered in India maybe because of climatic conditions or some other factors that we might be missing out on?**\n#### - **No community transmission happening yet**\n#### - **People here are more immunized?**","052e454c":"##### Plotting the locations on the map","ff1f6468":"### How Corona Virus fared in Rest of the World","aab03d1e":"### - **From the notes it seems the other patients without any travel history, who have been affected are mainly the closed ones of the patients with travel history and few other exceptions**","5173dddf":"### **SIR Epidemic Model for India** \n\n##### This is a potential SIR model, if lockdown hadn't been imposed (14th March - 14th April, 30 days)","2fe1c450":"### Analysing the Growth Factor in India","176953b8":"### We all know an exponential graph keeps on increasing, and when we are in that period of exponential we are not able to predict how far is the inflection point in the curve"}}