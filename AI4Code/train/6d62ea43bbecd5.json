{"cell_type":{"b91d23c1":"code","189a5f49":"code","0bdde9a5":"code","a227e36a":"code","d73d7420":"code","4115482a":"code","9ebf2725":"code","ccfd37dc":"code","d53e1ff0":"code","01bb7082":"code","9b019193":"code","2907886c":"code","16274c4a":"markdown","6c33046d":"markdown","0159f510":"markdown","72e41a0f":"markdown","1a23e0cb":"markdown","ec28eccc":"markdown","6fe213c4":"markdown","032a3726":"markdown","d366273c":"markdown"},"source":{"b91d23c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","189a5f49":"X = np.load('\/kaggle\/input\/sign-language-digits-dataset\/Sign-language-digits-dataset\/X.npy')\ny = np.load('\/kaggle\/input\/sign-language-digits-dataset\/Sign-language-digits-dataset\/Y.npy')","0bdde9a5":"X.shape,y.shape","a227e36a":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(10,8)})\n\n\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.subplots_adjust(wspace=0.1)\n    j=200*i\n    plt.imshow(X[j])\n    #print(y[j])\n    plt.title('Digit: '+ str(np.argmax(y[j])))\n    plt.axis('off')\n","d73d7420":"X_df = X.reshape(-1,64*64)\nX_df.shape","4115482a":"#quickly checking the content\n\nX_df[:5]","9ebf2725":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\nprincipal_components =  pca.fit_transform(X_df)\npc_df = pd.DataFrame(data = principal_components, columns=['principal_component1', 'principal_component2'])\npc_df.head()","ccfd37dc":"# converting labels to single value from an array:\n\nlabels_temp =[]\nfor i in range(len(y)):\n    labels_temp.append(np.argmax(y[i]))","d53e1ff0":"pc_df['labels'] = labels_temp\npc_df['str_labels'] ='Label_'+(pc_df['labels']).astype(str)\nprint(pc_df['str_labels'].value_counts())\npc_df.head()","01bb7082":"sns.scatterplot(pc_df['principal_component1'], pc_df['principal_component2'], hue=pc_df['str_labels'] )","9b019193":"from sklearn.manifold import TSNE\n\nX_embedded = TSNE(n_components=2).fit_transform(X_df)\n","2907886c":"tsne_df = pd.DataFrame(data = X_embedded, columns=['X1', 'X2'])\nsns.scatterplot(tsne_df['X1'], tsne_df['X2'], hue=pc_df['str_labels'] )","16274c4a":"## Content of this notebook:\n\n1. Reading the data\n2. Converting data to format which can be accepted by PCA and t-SNE.\n3. Performing Principal Component Analysis\n4. Principal t-SNE visualization\n","6c33046d":"### Reshaping the data to use it with sklearn library","0159f510":"### Reading the data:","72e41a0f":"## Sign languages (also known as signed languages) \n#### are languages that use manual communication to convey meaning. This can include simultaneously employing hand gestures, movement, orientation of the fingers, arms or body, and facial expressions to convey a speaker's ideas. ","1a23e0cb":"## What is t-SNE?\n\n* t-SNE is t-distributed stochastic neighbor embedding\n* t-SNE is a machine learning algorithm for visualization based on Stochastic Neighbor Embedding\n\n[SkLearn TSNE](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.manifold.TSNE.html?highlight=tsne#sklearn.manifold.TSNE)","ec28eccc":"## What is PCA?\n\n* PCA means Principal Component Analysis.\n* It is a dimension reduction technique which helps us convert high dimensional data into n components.\n\n[Sklearn PCA](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.decomposition.PCA.html)\n","6fe213c4":"## Lets look at some of the sample images","032a3726":"## When should you use PCA vs t-SNE? [here](https:\/\/stats.stackexchange.com\/a\/249520\/7828)\n\n\n## Learn how to get started with deep learning using tensorflow on this dataset: Check out a similar notebook [here](https:\/\/stats.stackexchange.com\/a\/249520\/7828)","d366273c":"### Lets quickly check how many samples we have for each category:"}}