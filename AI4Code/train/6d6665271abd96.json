{"cell_type":{"d60dafb6":"code","e25d2045":"code","f18cd6f9":"code","35f94787":"code","04a77abf":"code","b219350c":"code","11167a64":"code","a436f7ca":"code","0c21c5bd":"code","3082b910":"code","25c5edf0":"code","88780b3e":"code","7309f92f":"code","5df6a3e8":"code","a51fd14e":"code","c28a08b8":"code","6aeecb56":"code","69de4c06":"code","ff980914":"code","41bdd664":"code","a6b549b2":"code","7f177fa6":"code","9bdc560b":"code","bbcf23b8":"code","5bb98139":"code","83fe0fa7":"code","4fb8daf1":"code","5592a2ad":"code","25ed9074":"code","0c175e01":"code","c6ec6788":"code","6f859bfc":"code","e975d834":"code","85448ccd":"code","5b1c7075":"code","7e14556b":"code","3066d6cf":"code","4b50fe69":"code","14de7fcf":"code","9a1fbfa4":"code","7470b87c":"code","3acbb59b":"code","bc80ee46":"code","0d5eeb2c":"code","de347dcf":"code","9bfd0b06":"code","140533d5":"code","aa08bdf0":"code","3e4a0c58":"code","6df48302":"code","c097db85":"code","6a6b3bee":"code","04f93566":"code","fd74730a":"code","df1ad7ab":"code","e5bb76c1":"code","af18ac05":"code","12023513":"code","d56ad7cb":"code","31f89624":"code","a1af423b":"markdown","2c74ef16":"markdown","43dd3554":"markdown","40f90417":"markdown","ecddbf0b":"markdown","f405d839":"markdown","ad3b9531":"markdown","158f5392":"markdown","4be22e64":"markdown","968af9ba":"markdown","b820dc7d":"markdown","6da5646a":"markdown","dc2181c3":"markdown","82ffeff2":"markdown"},"source":{"d60dafb6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e25d2045":"data = pd.read_csv('\/kaggle\/input\/unsupervised-learning-on-country-data\/Country-data.csv')\ndf_dic = pd.read_csv('\/kaggle\/input\/unsupervised-learning-on-country-data\/data-dictionary.csv')","f18cd6f9":"for i, row in df_dic.iterrows():\n    print(row['Column Name'], '--->', row['Description'])","35f94787":"data.head()","04a77abf":"# Number of countries\nprint(len(data))","b219350c":"plt.figure(figsize=(12,8))\nsns.kdeplot(data.child_mort)","11167a64":"# Country with min child mortality\nprint(data[data.child_mort == data.child_mort.min()].country.values[0], '(%d)' %(data.child_mort.min()))","a436f7ca":"# Country with min child mortality\nprint(data[data.child_mort == data.child_mort.max()].country.values[0], '(%d)' %(data.child_mort.max()))","0c21c5bd":"# Countries that are not in the ISO Code\n\ndata['country'] = data['country'].str.replace('Cape Verde', 'Cabo Verde')\ndata['country'] = data['country'].str.replace('Congo, Dem. Rep.', 'Congo, The Democratic Republic of the')\ndata['country'] = data['country'].str.replace('Congo, Rep.', 'Republic of the Congo')\ndata['country'] = data['country'].str.replace('Macedonia, FYR', 'North Macedonia')\ndata['country'] = data['country'].str.replace('Micronesia, Fed. Sts.', 'Micronesia, Federated States of')\ndata['country'] = data['country'].str.replace('South Korea', 'Korea, Republic of')\ndata['country'] = data['country'].str.replace('St. Vincent and the Grenadines', 'Saint Vincent and the Grenadines')","3082b910":"import pycountry\nimport plotly.express as px\nimport pandas as pd\n\nlist_countries = data['country'].unique().tolist()\n\nd_country_code = {}  # To hold the country names and their ISO\nfor country in list_countries:\n    try:\n        country_data = pycountry.countries.search_fuzzy(country)\n        country_code = country_data[0].alpha_3\n        d_country_code.update({country: country_code})\n    except:\n        print('could not add ISO 3 code for ->', country)\n        # If could not find country, make ISO code ' '\n        d_country_code.update({country: ' '})\n\n# create a new column iso_alpha in the data\n# and fill it with appropriate iso 3 code\nfor k, v in d_country_code.items():\n    data.loc[(data.country == k), 'iso_alpha'] = v","25c5edf0":"data[data['iso_alpha'].duplicated(keep=False)]","88780b3e":"data.loc[112,'iso_alpha'] = 'NER'","7309f92f":"fig = px.choropleth(data_frame = data,\n                    locations= \"iso_alpha\",\n                    color= \"child_mort\",  # value in column 'Confirmed' determines color\n                    hover_name= \"country\",\n                    color_continuous_scale= 'RdYlGn_r',  #  color scale red, yellow green\n                    )\n\nfig.show()","5df6a3e8":"plt.figure(figsize=(12,8))\nsns.kdeplot(data.exports)","a51fd14e":"# Country with min exports\nprint(data[data.exports == data.exports.min()].country.values[0], '(%d)' %(data.exports.min()))","c28a08b8":"# Country with max exports\nprint(data[data.exports == data.exports.max()].country.values[0], '(%d)' %(data.exports.max()))","6aeecb56":"fig = px.choropleth(data_frame = data,\n                    locations= \"iso_alpha\",\n                    color= \"exports\",  # value in column 'Confirmed' determines color\n                    hover_name= \"country\",\n                    color_continuous_scale= 'RdYlGn',  #  color scale red, yellow green\n                    )\n\nfig.show()","69de4c06":"plt.figure(figsize=(12,8))\nsns.kdeplot(data.health)","ff980914":"# Country with min health\nprint(data[data.health == data.health.min()].country.values[0], '(%d)' %(data.health.min()))","41bdd664":"# Country with max health\nprint(data[data.health == data.health.max()].country.values[0], '(%d)' %(data.health.max()))","a6b549b2":"fig = px.choropleth(data_frame = data,\n                    locations= \"iso_alpha\",\n                    color= \"health\",  # value in column 'Confirmed' determines color\n                    hover_name= \"country\",\n                    color_continuous_scale= 'RdYlGn',  #  color scale red, yellow green\n                    )\n\nfig.show()","7f177fa6":"# Country with min imports\nprint(data[data.imports == data.imports.min()].country.values[0], '(%d)' %(data.imports.min()))","9bdc560b":"# Country with max health\nprint(data[data.imports == data.imports.max()].country.values[0], '(%d)' %(data.imports.max()))","bbcf23b8":"fig = px.choropleth(data_frame = data,\n                    locations= \"iso_alpha\",\n                    color= \"imports\",  # value in column 'Confirmed' determines color\n                    hover_name= \"country\",\n                    color_continuous_scale= 'RdYlGn',  #  color scale red, yellow green\n                    )\n\nfig.show()","5bb98139":"plt.figure(figsize=(12,8))\nsns.kdeplot(data.income)","83fe0fa7":"# Country with min income\nprint(data[data.income == data.income.min()].country.values[0], '(%d)' %(data.income.min()))","4fb8daf1":"# Country with income income\nprint(data[data.income == data.income.max()].country.values[0], '(%d)' %(data.income.max()))","5592a2ad":"fig = px.choropleth(data_frame = data,\n                    locations= \"iso_alpha\",\n                    color= \"income\",  # value in column 'Confirmed' determines color\n                    hover_name= \"country\",\n                    color_continuous_scale= 'RdYlGn',  #  color scale red, yellow green\n                    )\n\nfig.show()","25ed9074":"plt.figure(figsize=(12,8))\nsns.kdeplot(data.inflation)","0c175e01":"# Country with min inflation\nprint(data[data.inflation == data.inflation.min()].country.values[0], '(%d)' %(data.inflation.min()))","c6ec6788":"# Country with min inflation\nprint(data[data.inflation == data.inflation.max()].country.values[0], '(%d)' %(data.inflation.max()))","6f859bfc":"data[data.inflation == data.inflation.max()]","e975d834":"fig = px.choropleth(data_frame = data,\n                    locations= \"iso_alpha\",\n                    color= \"inflation\",  # value in column 'Confirmed' determines color\n                    hover_name= \"country\",\n                    color_continuous_scale= 'RdYlGn',  #  color scale red, yellow green\n                    )\n\nfig.show()","85448ccd":"plt.figure(figsize=(12,8))\nsns.kdeplot(data.life_expec)","5b1c7075":"# Country with min life_expec\nprint(data[data.life_expec == data.life_expec.min()].country.values[0], '(%d)' %(data.life_expec.min()))","7e14556b":"# Country with min life_expec\nprint(data[data.life_expec == data.life_expec.max()].country.values[0], '(%d)' %(data.life_expec.max()))","3066d6cf":"fig = px.choropleth(data_frame = data,\n                    locations= \"iso_alpha\",\n                    color= \"life_expec\",  # value in column 'Confirmed' determines color\n                    hover_name= \"country\",\n                    color_continuous_scale= 'RdYlGn',  #  color scale red, yellow green\n                    )\n\nfig.show()","4b50fe69":"plt.figure(figsize=(12,8))\nsns.kdeplot(data.total_fer)","14de7fcf":"# Country with min total_fer\nprint(data[data.total_fer == data.total_fer.min()].country.values[0], '(%d)' %(data.total_fer.min()))","9a1fbfa4":"# Country with max total_fer\nprint(data[data.total_fer == data.total_fer.max()].country.values[0], '(%d)' %(data.total_fer.max()))","7470b87c":"fig = px.choropleth(data_frame = data,\n                    locations= \"iso_alpha\",\n                    color= \"total_fer\",  # value in column 'Confirmed' determines color\n                    hover_name= \"country\",\n                    color_continuous_scale= 'RdYlGn',  #  color scale red, yellow green\n                    )\n\nfig.show()","3acbb59b":"plt.figure(figsize=(12,8))\nsns.kdeplot(data.gdpp)","bc80ee46":"# Country with min gdpp\nprint(data[data.gdpp == data.gdpp.min()].country.values[0], '(%d)' %(data.gdpp.min()))","0d5eeb2c":"# Country with max total_fer\nprint(data[data.gdpp == data.gdpp.max()].country.values[0], '(%d)' %(data.gdpp.max()))","de347dcf":"fig = px.choropleth(data_frame = data,\n                    locations= \"iso_alpha\",\n                    color= \"gdpp\",  # value in column 'Confirmed' determines color\n                    hover_name= \"country\",\n                    color_continuous_scale= 'RdYlGn',  #  color scale red, yellow green\n                    )\n\nfig.show()","9bfd0b06":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score","140533d5":"# Normalize the columns, the majority are skawed\n# Normalize the columns (right skew)\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\ndata['child_mort'] = scaler.fit_transform(data['child_mort'].values.reshape(-1, 1))\ndata['exports'] = scaler.fit_transform(data['exports'].values.reshape(-1, 1))\ndata['health'] = scaler.fit_transform(data['health'].values.reshape(-1, 1))\ndata['imports'] = scaler.fit_transform(data['imports'].values.reshape(-1, 1))\ndata['income'] = scaler.fit_transform(data['income'].values.reshape(-1, 1))\ndata['inflation'] = scaler.fit_transform(data['inflation'].values.reshape(-1, 1))\ndata['life_expec'] = scaler.fit_transform(data['life_expec'].values.reshape(-1, 1))\ndata['total_fer'] = scaler.fit_transform(data['total_fer'].values.reshape(-1, 1))\ndata['gdpp'] = scaler.fit_transform(data['gdpp'].values.reshape(-1, 1))","aa08bdf0":"# Remove country and iso_code\ncountries = data['country']\niso_alpha = data['iso_alpha']\ndata = data.drop(['country', 'iso_alpha'], axis=1)","3e4a0c58":"data.head()","6df48302":"# Calculate sum of squared distances\nssd = []\nK = range(1,10)\nfor k in K:\n    km = KMeans(n_clusters=k)\n    km = km.fit(data)\n    ssd.append(km.inertia_)","c097db85":"# Plot sum of squared distances \/ elbow method\nplt.figure(figsize=(10,6))\nplt.plot(K, ssd, 'bx-')\nplt.xlabel('k')\nplt.ylabel('ssd')\nplt.title('Elbow Method For Optimal k')\nplt.show()","6a6b3bee":"# Best number of clusters is 3","04f93566":"# Create and fit model\nkmeans = KMeans(n_clusters=3)\nmodel = kmeans.fit(data)","fd74730a":"pred = model.labels_\ndata['cluster'] = pred","df1ad7ab":"data.head()","e5bb76c1":"# Create PCA for data visualization \/ Dimensionality reduction to 2D graph\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\npca_model = pca.fit_transform(data)\ndata_transform = pd.DataFrame(data = pca_model, columns = ['PCA1', 'PCA2'])\ndata_transform['Cluster'] = pred","af18ac05":"data_transform.head()","12023513":"plt.figure(figsize=(8,8))\ng = sns.scatterplot(data=data_transform, x='PCA1', y='PCA2', palette=sns.color_palette()[:3], hue='Cluster')\ntitle = plt.title('Countries Clusters with PCA')","d56ad7cb":"data['country'] = countries\ndata['iso_alpha'] = iso_alpha","31f89624":"fig = px.choropleth(data_frame = data,\n                    locations= \"iso_alpha\",\n                    color= \"cluster\",  # value in column 'Confirmed' determines color\n                    hover_name= \"country\",\n                    color_continuous_scale= 'RdYlGn_r',  #  color scale red, yellow green\n                    )\n\nfig.show()","a1af423b":"### Countries","2c74ef16":"### Death of children per 100","43dd3554":"### Total health spending per capita","40f90417":"### Number of children that would be born to each woman if the current age-fertility rates remain the same","ecddbf0b":"# Clustering the countries","f405d839":"### Exports of goods and services per capita","ad3b9531":"### Net income per person","158f5392":"### Average number of years a new born child would live if the current mortality patterns are to remain the same","4be22e64":"### Map of countries clusters","968af9ba":"### Measurement of the annual growth rate of the Total GDP","b820dc7d":"### Imports of goods and services per capita","6da5646a":"### GDP per capita","dc2181c3":"# Data Exploration","82ffeff2":"### PCA graph"}}