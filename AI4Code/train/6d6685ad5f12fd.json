{"cell_type":{"347861b8":"code","5fcf51f7":"code","415f4cb2":"code","ee7f1d7a":"code","9e224166":"code","0b29117d":"code","d8432e7b":"code","515465b1":"code","02c73d7f":"code","392b4d89":"code","7cae972b":"code","361bb4af":"code","9a308347":"code","dcb37ec4":"markdown","f831eba9":"markdown","6b58aa81":"markdown","dec4140b":"markdown","83ecf4ec":"markdown","44a1ec06":"markdown","77576d00":"markdown","dc5f0ba9":"markdown","34a7cd9d":"markdown","73476797":"markdown","dd339fa6":"markdown","808dbf74":"markdown","18566310":"markdown"},"source":{"347861b8":"# Import the libraries\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow_hub as hub\nimport tensorflow_datasets as tfds","5fcf51f7":"# Load and split the data\ntrain_data, validation_data, test_data = tfds.load(\n    name=\"imdb_reviews\", \n    split=('train[:60%]', 'train[60%:]', 'test'),\n    as_supervised=True)","415f4cb2":"train_samples_batch, train_labels_batch = next(iter(train_data.batch(5)))","ee7f1d7a":"# View the first 5 samples\ntrain_samples_batch","9e224166":"# View the first 5 labels\ntrain_labels_batch","0b29117d":"# Create an embedding layer\nembedding =  \"https:\/\/tfhub.dev\/google\/tf2-preview\/gnews-swivel-20dim\/1\"\nhub_layer = hub.KerasLayer(embedding, input_shape=[],\n                          dtype=tf.string, trainable=True)","d8432e7b":"# Build the model\nmodel = tf.keras.Sequential()\n\n# Configure the layers\nmodel.add(hub_layer)\nmodel.add(tf.keras.layers.Dense(16, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))","515465b1":"# View the model's architecture\nmodel.summary()","02c73d7f":"# Compile the model\nmodel.compile(loss='binary_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","392b4d89":"# Fit the model\nhistory = model.fit(train_data.shuffle(10000, seed=0).batch(512),\n                    epochs=20,\n                    validation_data=validation_data.batch(512))","7cae972b":"import matplotlib.pyplot as plt\n\n# Create the accuracy plot\nplt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['val_accuracy'], label = 'val_accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.xlim([0, 20])\nplt.ylim([0.5, 1])\nplt.legend(loc='lower right')\nplt.show()","361bb4af":"test_loss, test_acc = model.evaluate(test_data.batch(512), verbose=2)","9a308347":"# Predict on a positive movie review\nmodel.predict(['This is the best movie I have ever seen!',\n               'This movie is very horrible! The acting is very poor!'])","dcb37ec4":"## Loading the Data\nWe can import and load the IMDB dataset directly from TensorFlow datasets. Originally, the dataset is split into 25,000 reviews for training and 25,000 reviews for testing. We will split the training set with a ratio of 60:40. So, we will end up with 15,000 samples for training, 10,000 samples for validation and 25,000 samples for testing.\n","f831eba9":"## Evaluating the Model\nNext, compare how the model performs on the test data.","6b58aa81":"## Making Predictions\nNow that we have our model trained, we can try to make some predictions.","dec4140b":"### Compiling the Model\nBefore training the model, we need to compile the model with the following settings:\n- Loss function: This measures how accurate the model is during training. Since this is a binary classification problem and the model outputs logits (a single-unit layer with a linear activation), we will use the binary crossentropy loss function.\n- Optimizer: This is how the model is updated based on the data it sees and its loss function. We are going to use Adam, which is an optimization algorithm based on adaptive estimation of first-order and second-order moments.\n- Metrics: Used to monitor the training and testing steps. Here we will use accuracy, the fraction of the images that are correctly classified.","83ecf4ec":"As we can see, each sample is a sentence representing the movie review and the label is an integer value of either 0 or 1, where 0 is a negative review, and 1 is a positive review.","44a1ec06":"Let's view the first 5 samples and labels of our training data. ","77576d00":"Since the first review has a value closer to 1, the model classifies this as a positive review. On the other hand, the second review has a value closer to 0, so the model classifies this as a negative review.","dc5f0ba9":"## Building the Model\nHere, we will apply transfer learning by using a pre-trained text embedding model from [TensorFlow Hub](https:\/\/www.tensorflow.org\/hub) called [gnews-swivel-20dim](https:\/\/tfhub.dev\/google\/tf2-preview\/gnews-swivel-20dim\/1). Let's first create a Keras layer that uses this TensorFlow Hub model to embed the sentences.","34a7cd9d":"# Sentiment Analysis on IMDB Movie Reviews\nThis project is one of my Deep Learning projects. For this project, we have the [IMDB](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/datasets\/imdb) dataset that contains the text of 50,000 movie reviews from the Internet Movie Database.\n\nThe goal of this project is apply [transfer learning](https:\/\/en.wikipedia.org\/wiki\/Transfer_learning) to classifiy movie reviews as positive or negative based on the text of the review.","73476797":"\nIt turns out that the accuracy on the test dataset is a little less than the accuracy on the validation data.","dd339fa6":"### Fitting the Model\nNow, we can use the model.fit method to fits the model to the training data. We will train the model for 20 epochs in mini-batches of 512 samples. During the training process, we will also monitor the model's loss and accuracy on the 10,000 samples from the validation set.","808dbf74":"As the model trains, the loss and accuracy metrics are displayed. This model reaches an accuracy of about 94% on the training data and 87% on validation data.","18566310":"### Configuring the Layers\nNow, we can build the full model by configuring the layers. The first layer is the embedding layer using the pre-trained model from TensorFlow Hub. The next layer will be a `tf.keras.layers.Dense` layer with 16 hidden units. Finally, the last layer is another `tf.keras.layers.Dense` with a single output node."}}