{"cell_type":{"d8bfab57":"code","ec68be37":"code","e62db063":"code","d2968cc9":"code","c4514d39":"code","3235c5c7":"code","ab2823b7":"code","2a6816d7":"code","4548f7be":"code","8e2fc1b3":"code","b3d8bfc2":"code","cec3aa9d":"markdown","3347b19f":"markdown","33b75e24":"markdown","4365e7b7":"markdown","adb8d8ff":"markdown","ee0ae705":"markdown"},"source":{"d8bfab57":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.linear_model import Ridge\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import mean_squared_error\nfrom scipy.stats import rankdata\n\ndef ridge_cv (vec, X, y, X_test, folds, stratified ):\n    kf = StratifiedKFold(n_splits=FOLDS,shuffle=True,random_state=123)\n    val_scores = []\n    rmse_scores = []\n    X_less_toxics = []\n    X_more_toxics = []\n\n    preds = []\n    for fold, (train_index,val_index) in enumerate(kf.split(X,stratified)):\n        X_train, y_train = X[train_index], y[train_index]\n        X_val, y_val = X[val_index], y[val_index]\n        model = Ridge()\n        model.fit(X_train, y_train)\n\n        rmse_score = mean_squared_error ( model.predict (X_val), y_val, squared = False) \n        rmse_scores.append (rmse_score)\n\n        X_less_toxic = vec.transform(df_val['less_toxic'])\n        X_more_toxic = vec.transform(df_val['more_toxic'])\n\n        p1 = model.predict(X_less_toxic)\n        p2 = model.predict(X_more_toxic)\n\n        X_less_toxics.append ( p1 )\n        X_more_toxics.append ( p2 )\n\n        # Validation Accuracy\n        val_acc = (p1< p2).mean()\n        val_scores.append(val_acc)\n\n        pred = model.predict (X_test)\n        preds.append (pred)\n\n        print(f\"FOLD:{fold}, rmse_fold:{rmse_score:.5f}, val_acc:{val_acc:.5f}\")\n\n    mean_val_acc = np.mean (val_scores)\n    mean_rmse_score = np.mean (rmse_scores)\n\n    p1 = np.mean ( np.vstack(X_less_toxics), axis=0 )\n    p2 = np.mean ( np.vstack(X_more_toxics), axis=0 )\n\n    val_acc = (p1< p2).mean()\n\n    print(f\"OOF: val_acc:{val_acc:.5f}, mean val_acc:{mean_val_acc:.5f}, mean rmse_score:{mean_rmse_score:.5f}\")\n    \n    preds = np.mean ( np.vstack(preds), axis=0 )\n    \n    return p1, p2, preds\n","ec68be37":"df_val = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv\")\ndf_test = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\")","e62db063":"jc_train_df = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv\")\nprint(f\"jc_train_df:{jc_train_df.shape}\")","d2968cc9":"toxic = 1.0\nsevere_toxic = 2.0\nobscene = 1.0\nthreat = 1.0\ninsult = 1.0\nidentity_hate = 2.0\n\ndef create_train (df):\n    df['y'] = df[[\"toxic\",\"severe_toxic\",\"obscene\",\"threat\",\"insult\",\"identity_hate\"]].max(axis=1)\n    df['y'] = df[\"y\"]+df['severe_toxic']*severe_toxic\n    df['y'] = df[\"y\"]+df['obscene']*obscene\n    df['y'] = df[\"y\"]+df['threat']*threat\n    df['y'] = df[\"y\"]+df['insult']*insult\n    df['y'] = df[\"y\"]+df['identity_hate']*identity_hate\n    \n    \n    \n    df = df[['comment_text', 'y', 'toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']].rename(columns={'comment_text': 'text'})\n\n    #undersample non toxic comments  on Toxic Comment Classification Challenge\n    min_len = (df['y'] >= 1).sum()\n    df_y0_undersample = df[df['y'] == 0].sample(n=int(min_len*1.5),random_state=201)\n    df = pd.concat([df[df['y'] >= 1], df_y0_undersample])\n                                                \n    return df\n \njc_train_df = create_train (jc_train_df)\n                           \ndf = jc_train_df\nprint(df['y'].value_counts())\n","c4514d39":"FOLDS = 5\n\nvec = TfidfVectorizer(analyzer='char_wb', max_df=0.5, min_df=3, ngram_range=(4, 6) )\nX = vec.fit_transform(df['text'])\ny = df[\"y\"].values\nX_test = vec.transform(df_test['text'])\n\nstratified = np.around ( y )\njc_p1, jc_p2, jc_preds =  ridge_cv (vec, X, y, X_test, FOLDS, stratified )","3235c5c7":"juc_train_df = pd.read_csv(\"..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/train.csv\")\nprint(f\"juc_train_df:{juc_train_df.shape}\")\njuc_train_df = juc_train_df.query (\"toxicity_annotator_count > 5\")\nprint(f\"juc_train_df:{juc_train_df.shape}\")\n\njuc_train_df['y'] = juc_train_df[[ 'severe_toxicity', 'obscene', 'sexual_explicit','identity_attack', 'insult', 'threat']].sum(axis=1)\n\njuc_train_df['y'] = juc_train_df.apply(lambda row: row[\"target\"] if row[\"target\"] <= 0.5 else row[\"y\"] , axis=1)\njuc_train_df = juc_train_df[['comment_text', 'y']].rename(columns={'comment_text': 'text'})\nmin_len = (juc_train_df['y'] > 0.5).sum()\ndf_y0_undersample = juc_train_df[juc_train_df['y'] <= 0.5].sample(n=int(min_len*1.5),random_state=201)\njuc_train_df = pd.concat([juc_train_df[juc_train_df['y'] > 0.5], df_y0_undersample])\n\ndf = juc_train_df\nprint(df['y'].value_counts())","ab2823b7":"#FOLDS = 5\nFOLDS = 10\nvec = TfidfVectorizer(analyzer='char_wb', max_df=0.5, min_df=3, ngram_range=(4, 6) )\nX = vec.fit_transform(df['text'])\ny = df[\"y\"].values\nX_test = vec.transform(df_test['text'])\n\nstratified = (np.around ( y, decimals = 1  )*10).astype(int)\njuc_p1, juc_p2, juc_preds =  ridge_cv (vec, X, y, X_test, FOLDS, stratified )","2a6816d7":"rud_df = pd.read_csv(\"..\/input\/ruddit-jigsaw-dataset\/Dataset\/ruddit_with_text.csv\")\nprint(f\"rud_df:{rud_df.shape}\")\nrud_df['y'] = rud_df['offensiveness_score'].map(lambda x: 0.0 if x <=0 else x)\nrud_df = rud_df[['txt', 'y']].rename(columns={'txt': 'text'})\nmin_len = (rud_df['y'] < 0.5).sum()\nprint(rud_df['y'].value_counts())","4548f7be":"#FOLDS = 5\nFOLDS = 10\ndf = rud_df\nvec = TfidfVectorizer(analyzer='char_wb', max_df=0.5, min_df=3, ngram_range=(4, 6) )\nX = vec.fit_transform(df['text'])\ny = df[\"y\"].values\nX_test = vec.transform(df_test['text'])\n\nstratified = (np.around ( y, decimals = 1  )*10).astype(int)\nrud_p1, rud_p2, rud_preds =  ridge_cv (vec, X, y, X_test, FOLDS, stratified )","8e2fc1b3":"jc_max = max(jc_p1.max() , jc_p2.max())\njuc_max = max(juc_p1.max() , juc_p2.max())\nrud_max = max(rud_p1.max() , rud_p2.max())\n\n\np1 = jc_p1\/jc_max + juc_p1\/juc_max + rud_p1\/rud_max\np2 = jc_p2\/jc_max + juc_p2\/juc_max + rud_p2\/rud_max\n\nval_acc = (p1< p2).mean()\nprint(f\"Ensemble: val_acc:{val_acc:.5f}\")","b3d8bfc2":"score = jc_preds\/jc_max + juc_preds\/juc_max + rud_preds\/rud_max  \n## to enforce unique values on score\ndf_test['score'] = rankdata(score, method='ordinal')\n\ndf_test[['comment_id', 'score']].to_csv(\"submission.csv\", index=False)\n\ndf_test.head()","cec3aa9d":"# Model Toxic Comment Classification Challenge\n\nUsing data from [Toxic Comment Classification Challenge](https:\/\/www.kaggle.com\/c\/jigsaw-toxic-comment-classification-challenge)","3347b19f":"## Ensemble","33b75e24":"## Model Ruddit: Norms of Offensiveness for English Reddit Comments\n\nUsing data from [Ruddit](https:\/\/github.com\/hadarishav\/Ruddit)","4365e7b7":"# Model Unintended Bias in Toxicity Classification\n\nUsing data from [Unintended Bias in Toxicity Classification](https:\/\/www.kaggle.com\/c\/jigsaw-unintended-bias-in-toxicity-classification\/data)\n","adb8d8ff":"# How far can we push linear models in LB ? :)\n\ncheck out these forerunners too\n\n* https:\/\/www.kaggle.com\/julian3833\/jigsaw-incredibly-simple-naive-bayes-0-768 \n* https:\/\/www.kaggle.com\/steubk\/jrsotc-ridgeregression\n* https:\/\/www.kaggle.com\/samarthagarwal23\/the-benchmark-0-81-tfidf-ridge\n\n","ee0ae705":"# Submission"}}