{"cell_type":{"9cbdf741":"code","7c3c4c5f":"code","3bd6138a":"code","018a4957":"code","0b093a28":"code","ae0f9613":"code","24a87d6f":"code","abf8763e":"code","07994ec7":"code","e36bf7a2":"code","a8e95863":"code","b26b59fe":"code","9aa2216d":"code","220111ae":"code","fde4399d":"markdown","7050201b":"markdown","14a8b572":"markdown","344ab97c":"markdown","bdd251b9":"markdown"},"source":{"9cbdf741":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder\nimport xgboost as xgb\n!pip install catboost\nimport catboost as cb \n#reading form csv files\ntrain=pd.read_csv('..\/input\/dsc-psut-continued\/train.csv')\ntest=pd.read_csv('..\/input\/dsc-psut-continued\/test.csv')","7c3c4c5f":"display(test)","3bd6138a":"pd.get_dummies(test[['Fence', 'MSZoning']])\n","018a4957":"train.corr()['SalePrice']","0b093a28":"AreaDF=train[[ 'LotArea', 'MasVnrArea','TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea','GarageArea','WoodDeckSF','OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch','SalePrice']].copy()\n#AreaDF=df.assign(TotalArea = [['LotArea'+ 'MasVnrArea'+'TotalBsmtSF'+'1stFlrSF'+'2ndFlrSF'+'LowQualFinSF'+'GrLivArea'+'GarageArea'+'WoodDeckSF'+'OpenPorchSF'+'EnclosedPorch'+'3SsnPorch'+'ScreenPorch']])\ntrain['Total_Area'] = train.apply(lambda row: row.LotArea + row.MasVnrArea + row.TotalBsmtSF + row.LowQualFinSF + row.GrLivArea + row.GarageArea + row.WoodDeckSF + row.OpenPorchSF + row.EnclosedPorch  + row.ScreenPorch, axis = 1)\ndisplay(AreaDF)\nAreaDF.sum(axis=1)\n#  row.1stFlrSF + row.2ndFlrSF + row.3SsnPorch","ae0f9613":"# relation between the saleprice and the area\n#display(df[['Total_Area','SalePrice']].groupby(['Total_Area'],as_index=False).mean())\n# mode , mean ?\n'''\ntest['Total_Area'] = AreaDF['Total_Area']\ntest[['Total_Area','SalePrice']].corr()\n'''","24a87d6f":"train.Fence.fillna('NF', inplace=True)\n#display(train[['Fence','SalePrice']].groupby(['Fence'],as_index=False).mean())\n\ntrain.MiscFeature.fillna('NM', inplace=True)\n#display(train[['MiscFeature','SalePrice']].groupby(['MiscFeature'],as_index=False).mean())\n\ntrain.PoolQC.fillna('NP', inplace=True)\n#display(train[['PoolQC','SalePrice']].groupby(['PoolQC'],as_index=False).mean())\n\ntrain.GarageFinish.fillna('NG', inplace=True)\n#display(train[['GarageFinish','SalePrice']].groupby(['GarageFinish'],as_index=False).mean())\n\ntrain.FireplaceQu.fillna('NG', inplace=True)\n#display(train[['FireplaceQu','SalePrice']].groupby(['FireplaceQu'],as_index=False).mean())\n\ntrain.BsmtFinType1.fillna('NG', inplace=True)\n#display(train[['BsmtFinType1','SalePrice']].groupby(['FireplaceQu'],as_index=False).mean())\n\ntrain.Alley.fillna('NG', inplace=True)\n#display(train[['Alley','SalePrice']].groupby(['Alley'],as_index=False).mean())","abf8763e":"test.Fence.fillna('NF', inplace=True)\ntest.MiscFeature.fillna('NM', inplace=True)\ntest.PoolQC.fillna('NP', inplace=True)\ntest.GarageFinish.fillna('NG', inplace=True)\ntest.FireplaceQu.fillna('NG', inplace=True)\ntest.BsmtFinType1.fillna('NG', inplace=True)\ntest.Alley.fillna('NG', inplace=True)","07994ec7":"test['HasFence'] = test['Fence'].map(lambda x: 0 if x=='NF' else 1)\ntest['HasFence']\ntrain['HasFence'] = train['Fence'].map(lambda x: 0 if x=='NF' else 1)\ntrain['HasFence']","e36bf7a2":"test['HouseAge']=test['YrSold']-test['YearRemodAdd']\ndisplay(test['HouseAge'])\ntrain['HouseAge']=train['YrSold']-train['YearRemodAdd']\ndisplay(train['HouseAge'])\n#display(train[['HouseAge','SalePrice']].groupby(['HouseAge'],as_index=False).mean())","a8e95863":"Rates=test[['OverallQual','OverallCond']].copy()\nRates.groupby('OverallCond').apply(lambda x: x.mode())\n#display(Rates)\nRates.fillna(Rates.median())","b26b59fe":"########### 'MiscFeature']+train['PoolQC']+train['GarageFinish']+train['FireplaceQu']+train['BsmtFinType1']+train['Alley']\ncbr  = cb.CatBoostRegressor()\nfeatures = ['TotRmsAbvGrd','GarageArea','3SsnPorch','HouseAge','GrLivArea','TotalBsmtSF','FullBath','1stFlrSF','2ndFlrSF','OpenPorchSF','PoolArea','WoodDeckSF','MasVnrArea','Fireplaces','EnclosedPorch','GarageCars','ScreenPorch','LotArea','BsmtUnfSF','MiscVal','LotFrontage','GarageYrBlt','OverallQual','OverallCond','MoSold','LowQualFinSF','MSSubClass','BedroomAbvGr','KitchenAbvGr','YearBuilt'] \ncbr.fit(train[features], train['SalePrice'])\npredictions = cbr.predict(test[features])\n","9aa2216d":"mms = MinMaxScaler()\nmms.fit(test[['BsmtFinSF1', 'BsmtFinSF2', 'GrLivArea','TotRmsAbvGrd','LotArea','GarageArea','LotFrontage']])\nmms.transform(test[['BsmtFinSF1', 'BsmtFinSF2', 'GrLivArea','TotRmsAbvGrd','LotArea','GarageArea','LotFrontage']])","220111ae":"submission = pd.read_csv(\"..\/input\/dsc-psut-continued\/sample_submission.csv\")\nsubmission['SalePrice'] = predictions\nsubmission.head()\nsubmission.to_csv('submission', index=False)","fde4399d":"Collecting all numirical values such as the areas in a separate df","7050201b":"rates","14a8b572":"Train\n","344ab97c":"modelling","bdd251b9":"filling all the missing values "}}