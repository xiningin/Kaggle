{"cell_type":{"0eca4a8d":"code","1dfc66b1":"code","90151864":"code","15d144ad":"code","7b8d2345":"code","bd0ce404":"code","9414cefd":"code","808e8888":"code","61eefcd8":"code","6a33586c":"code","164abb20":"code","b4a7d7df":"code","d45ff7e7":"code","3927701b":"code","fbe30e53":"code","b9d95817":"code","b944d0c3":"code","6e25a920":"code","feabf5ee":"code","ef048ab0":"code","d9b7072c":"code","81b647b7":"code","41c37ef6":"code","a1ea121d":"code","628604e0":"code","ed74d1f0":"code","6767fdfe":"code","5f2886a0":"code","8a54078c":"code","70a7bd5d":"code","3a8792bb":"code","7e82fae9":"code","80493653":"code","e860c2fc":"code","2bd3cc53":"code","425bfac7":"markdown","3582c064":"markdown","8b686a1f":"markdown","aaed60d8":"markdown","915d5fba":"markdown","2a4c86dc":"markdown","268ded15":"markdown","522ceb7d":"markdown","f614b89c":"markdown","99c22949":"markdown","c2b0817c":"markdown","6b2683cb":"markdown","2838bcdb":"markdown","da810444":"markdown","4d43e8a2":"markdown","fb68fb5f":"markdown","00d69746":"markdown","acf341ac":"markdown","520c7b97":"markdown","31942842":"markdown","07597fd9":"markdown","b493e7d1":"markdown","b7389f65":"markdown","a72de42a":"markdown"},"source":{"0eca4a8d":"import os\nimport pandas as pd\nimport numpy as np\nimport math\nimport datetime as dt\n\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, explained_variance_score, r2_score \nfrom sklearn.metrics import mean_poisson_deviance, mean_gamma_deviance, accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom itertools import cycle\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\nimport seaborn as sns \nimport matplotlib.pyplot as plt \nfrom colorama import Fore","1dfc66b1":"bitcoindf = pd.read_csv('..\/input\/all-cryptocurrencies-price-20152021\/Bitcoin\/BTC-USD.csv')\nbitcoindf = bitcoindf.rename(columns={'Date': 'date','Open':'open','High':'high','Low':'low','Close':'close',\n                                'Adj Close':'adj_close','Volume':'volume'})\nbitcoindf.head()","90151864":"dogecoindf = pd.read_csv('..\/input\/all-cryptocurrencies-price-20152021\/Dogecoin\/DOGE-USD.csv')\ndogecoindf = dogecoindf.rename(columns={'Date': 'date','Open':'open','High':'high','Low':'low','Close':'close',\n                                'Adj Close':'adj_close','Volume':'volume'})\ndogecoindf.head()","15d144ad":"ethereumdf = pd.read_csv('..\/input\/all-cryptocurrencies-price-20152021\/Ethereum\/ETH-USD.csv')\nethereumdf = ethereumdf.rename(columns={'Date': 'date','Open':'open','High':'high','Low':'low','Close':'close',\n                                'Adj Close':'adj_close','Volume':'volume'})\nethereumdf.head()","7b8d2345":"cardanodf = pd.read_csv('..\/input\/all-cryptocurrencies-price-20152021\/Cardano\/ADA-USD.csv')\ncardanodf = cardanodf.rename(columns={'Date': 'date','Open':'open','High':'high','Low':'low','Close':'close',\n                                'Adj Close':'adj_close','Volume':'volume'})\ncardanodf.head()","bd0ce404":"bitcoindf = bitcoindf.fillna(method = 'ffill')\ndogecoindf = dogecoindf.fillna(method = 'ffill')\nethereumdf = ethereumdf.fillna(method = 'ffill')\ncardanodf = cardanodf.fillna(method = 'ffill')","9414cefd":"bitcoindf['date'] = pd.to_datetime(bitcoindf.date)\nbitcoindf.head().style.set_properties(subset=['date','close'], **{'background-color': 'skyblue'})","808e8888":"dogecoindf['date'] = pd.to_datetime(dogecoindf.date)\ndogecoindf.head().style.set_properties(subset=['date','close'], **{'background-color': 'pink'})","61eefcd8":"ethereumdf['date'] = pd.to_datetime(ethereumdf.date)\nethereumdf.head().style.set_properties(subset=['date','close'], **{'background-color': 'lightgrey'})","6a33586c":"cardanodf['date'] = pd.to_datetime(cardanodf.date)\ncardanodf.head().style.set_properties(subset=['date','close'], **{'background-color': 'yellow'})","164abb20":"fig = plt.figure(figsize = (15,10))\n\nplt.subplot(2, 2, 1)\nplt.plot(bitcoindf['date'], bitcoindf['close'], color=\"red\")\nplt.title('Bitcoin Close Price')\n\nplt.subplot(2, 2, 2)\nplt.plot(cardanodf['date'], cardanodf['close'], color=\"black\")\nplt.title('Cardano Close Price')\n\nplt.subplot(2, 2, 3)\nplt.plot(dogecoindf['date'], dogecoindf['close'], color=\"orange\")\nplt.title('Dogecoin Close Price')\n\nplt.subplot(2, 2, 4)\nplt.plot(ethereumdf['date'], ethereumdf['close'], color=\"green\")\nplt.title('Ethereum Close Price')","b4a7d7df":"last1year_bitcoindf = bitcoindf[bitcoindf['date'] > '09-2020']\nlast1year_cardanodf = cardanodf[cardanodf['date'] > '09-2020']\nlast1year_dogecoindf = dogecoindf[dogecoindf['date'] > '09-2020']\nlast1year_ethereumdf = ethereumdf[ethereumdf['date'] > '09-2020']","d45ff7e7":"fig = plt.figure(figsize = (15,10))\nfig.suptitle(\"Last 1 year close prices of Bitcoin, Cardano, Dogecoin, Ethereum\", fontsize=16)\n\n\nplt.subplot(4, 1, 1)\nplt.plot(last1year_bitcoindf['date'], last1year_bitcoindf['close'], color=\"red\")\nplt.legend(\"B\")\n\nplt.subplot(4, 1, 2)\nplt.plot(last1year_cardanodf['date'], last1year_cardanodf['close'], color=\"black\")\nplt.legend(\"C\")\n\nplt.subplot(4, 1, 3)\nplt.plot(last1year_dogecoindf['date'], last1year_dogecoindf['close'], color=\"orange\")\nplt.legend(\"D\")\n\nplt.subplot(4, 1, 4)\nplt.plot(last1year_ethereumdf['date'], last1year_ethereumdf['close'], color=\"green\")\nplt.legend(\"E\")\n","3927701b":"fig = plt.figure(figsize = (15,7))\n\nplt.plot(last1year_bitcoindf['date'] , last1year_bitcoindf['volume'])\nplt.plot(last1year_cardanodf['date'] , last1year_cardanodf['volume'])\nplt.plot(last1year_dogecoindf['date'], last1year_dogecoindf['volume'])\nplt.plot(last1year_ethereumdf['date'], last1year_ethereumdf['volume'])\nplt.title('Volume of Bitcoin, Cardano, Dogecoin, Ethereum')\nplt.legend(['Bitcoin', 'Cardano', 'Dogecoin', 'Ethereum'])\n\n\nplt.show()","fbe30e53":"last1month_bitcoindf = bitcoindf[bitcoindf['date'] > '08-2021']\nlast1month_cardanodf = cardanodf[cardanodf['date'] > '08-2021']\nlast1month_dogecoindf = dogecoindf[dogecoindf['date'] > '08-2021']\nlast1month_ethereumdf = ethereumdf[ethereumdf['date'] > '08-2021']","b9d95817":"fig = plt.figure(figsize = (15,15))\nfig.suptitle(\"Last month comparision of close and open prices of Bitcoin, Cardano, Dogecoin, Ethereum\", fontsize=16)\nfig.tight_layout()\n\nplt.subplot(4, 1, 1)\nplt.plot(last1month_bitcoindf['date'], last1month_bitcoindf['close'])\nplt.plot(last1month_bitcoindf['date'], last1month_bitcoindf['open'])\nplt.legend([\"C\", \"O\"])\nplt.title(\"Bitcoin\")\n\nplt.subplot(4, 1, 2)\nplt.plot(last1month_cardanodf['date'], last1month_cardanodf['close'], color=\"black\")\nplt.plot(last1month_cardanodf['date'], last1month_cardanodf['open'], color=\"grey\")\nplt.legend([\"C\", \"O\"])\nplt.title(\"Cardano\")\n\nplt.subplot(4, 1, 3)\nplt.plot(last1month_dogecoindf['date'], last1month_dogecoindf['close'], color=\"orange\")\nplt.plot(last1month_dogecoindf['date'], last1month_dogecoindf['open'], color=\"green\")\nplt.legend([\"C\", \"O\"])\nplt.title(\"Dogecoin\")\n\nplt.subplot(4, 1, 4)\nplt.plot(last1month_ethereumdf['date'], last1month_ethereumdf['close'], color=\"blue\")\nplt.plot(last1month_ethereumdf['date'], last1month_ethereumdf['open'], color=\"yellow\")\nplt.legend([\"C\", \"O\"])\nplt.title(\"Ethereum\")\n\n\nplt.show()","b944d0c3":"fig = plt.figure(figsize = (15,10))\n\nplt.subplot(2, 2, 1)\nplt.plot(bitcoindf['date'], bitcoindf['close'].rolling(50).mean())\nplt.plot(bitcoindf['date'], bitcoindf['close'].rolling(200).mean())\nplt.title('Bitcoin Close Price moving average')\n\nplt.subplot(2, 2, 2)\nplt.plot(cardanodf['date'], cardanodf['close'].rolling(50).mean(), color=\"black\")\nplt.plot(cardanodf['date'], cardanodf['close'].rolling(200).mean(), color=\"red\")\nplt.title('Cardano Close Price moving average')\n\nplt.subplot(2, 2, 3)\nplt.plot(dogecoindf['date'], dogecoindf['close'].rolling(50).mean(), color=\"orange\")\nplt.plot(dogecoindf['date'], dogecoindf['close'].rolling(200).mean(), color=\"grey\")\nplt.title('Dogecoin Close Price moving average')\n\nplt.subplot(2, 2, 4)\nplt.plot(ethereumdf['date'], ethereumdf['close'].rolling(50).mean(), color=\"green\")\nplt.plot(ethereumdf['date'], ethereumdf['close'].rolling(200).mean(), color=\"blue\")\nplt.title('Ethereum Close Price moving average')","6e25a920":"fig = plt.figure(figsize = (15,12))\n\nfig.tight_layout()\n\nplt.subplot(4, 1, 1)\nsns.histplot(bitcoindf['close'],color='darkred', kde=True)\nplt.axvline(bitcoindf['close'].mean(), color='k', linestyle='dashed', linewidth=2)\nplt.text(50000,400,'Bitcoin Close Price', fontsize=16)\n\nplt.subplot(4, 1, 2)\nsns.histplot(cardanodf['close'],color='darkgreen', kde=True)\nplt.axvline(cardanodf['close'].mean(), color='k', linestyle='dashed', linewidth=2)\nplt.text(2.3,200,'Cardano Close Price', fontsize=16)\n\nplt.subplot(4, 1, 3)\nsns.histplot(dogecoindf['close'],color='grey', kde=True)\nplt.axvline(dogecoindf['close'].mean(), color='k', linestyle='dashed', linewidth=2)\nplt.text(0.52,200,'Dogecoin Close Price', fontsize=16)\n\nplt.subplot(4, 1, 4)\nsns.histplot(ethereumdf['close'],color='darkorange', kde=True)\nplt.axvline(ethereumdf['close'].mean(), color='k', linestyle='dashed', linewidth=2)\nplt.text(3100,400,'Ethereum Close Price', fontsize=16)\n","feabf5ee":"bitcoin_numeric = bitcoindf.select_dtypes(exclude = [\"bool\"])\nbitcoin_numeric.hist(figsize=(18,12))\nplt.show()","ef048ab0":"closedf = bitcoindf[['date','close']]\nprint(\"Shape of close dataframe:\", closedf.shape)","d9b7072c":"closedf = closedf[closedf['date'] > '2020-09-13']\nclose_stock = closedf.copy()\nprint(\"Total data for prediction: \",closedf.shape[0])","81b647b7":"del closedf['date']\nscaler=MinMaxScaler(feature_range=(0,1))\nclosedf=scaler.fit_transform(np.array(closedf).reshape(-1,1))\nprint(closedf.shape)","41c37ef6":"training_size=int(len(closedf)*0.70)\ntest_size=len(closedf)-training_size\ntrain_data,test_data=closedf[0:training_size,:],closedf[training_size:len(closedf),:1]\nprint(\"train_data: \", train_data.shape)\nprint(\"test_data: \", test_data.shape)","a1ea121d":"fig, ax = plt.subplots(figsize=(15, 6))\nsns.lineplot(x = close_stock['date'][:255], y = close_stock['close'][:255], color = 'black')\nsns.lineplot(x = close_stock['date'][255:], y = close_stock['close'][255:], color = 'red')\n\n# Formatting\nax.set_title('Train & Test data', fontsize = 20, loc='center', fontdict=dict(weight='bold'))\nax.set_xlabel('Date', fontsize = 16, fontdict=dict(weight='bold'))\nax.set_ylabel('Weekly Sales', fontsize = 16, fontdict=dict(weight='bold'))\nplt.tick_params(axis='y', which='major', labelsize=16)\nplt.tick_params(axis='x', which='major', labelsize=16)\nplt.legend(loc='upper right' ,labels = ('train', 'test'))","628604e0":"# convert an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-time_step-1):\n        a = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 \n        dataX.append(a)\n        dataY.append(dataset[i + time_step, 0])\n    return np.array(dataX), np.array(dataY)","ed74d1f0":"time_step = 15\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, y_test = create_dataset(test_data, time_step)\n\nprint(\"X_train: \", X_train.shape)\nprint(\"y_train: \", y_train.shape)\nprint(\"X_test: \", X_test.shape)\nprint(\"y_test\", y_test.shape)","6767fdfe":"from xgboost import XGBRegressor\nmy_model = XGBRegressor(n_estimators=1000)\nmy_model.fit(X_train, y_train, verbose=False)","5f2886a0":"predictions = my_model.predict(X_test)\nprint(\"Mean Absolute Error - MAE : \" + str(mean_absolute_error(y_test, predictions)))\nprint(\"Root Mean squared Error - RMSE : \" + str(math.sqrt(mean_squared_error(y_test, predictions))))","8a54078c":"train_predict=my_model.predict(X_train)\ntest_predict=my_model.predict(X_test)\n\ntrain_predict = train_predict.reshape(-1,1)\ntest_predict = test_predict.reshape(-1,1)\n\nprint(\"Train data prediction:\", train_predict.shape)\nprint(\"Test data prediction:\", test_predict.shape)","70a7bd5d":"# Transform back to original form\n\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)\noriginal_ytrain = scaler.inverse_transform(y_train.reshape(-1,1)) \noriginal_ytest = scaler.inverse_transform(y_test.reshape(-1,1)) ","3a8792bb":"# shift train predictions for plotting\n\nlook_back=time_step\ntrainPredictPlot = np.empty_like(closedf)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\nprint(\"Train predicted data: \", trainPredictPlot.shape)\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(closedf)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(closedf)-1, :] = test_predict\nprint(\"Test predicted data: \", testPredictPlot.shape)\n\nnames = cycle(['Original close price','Train predicted close price','Test predicted close price'])\n\nplotdf = pd.DataFrame({'date': close_stock['date'],\n                       'original_close': close_stock['close'],\n                      'train_predicted_close': trainPredictPlot.reshape(1,-1)[0].tolist(),\n                      'test_predicted_close': testPredictPlot.reshape(1,-1)[0].tolist()})\n\nfig = px.line(plotdf,x=plotdf['date'], y=[plotdf['original_close'],plotdf['train_predicted_close'],\n                                          plotdf['test_predicted_close']],\n              labels={'value':'Close price','date': 'Date'})\nfig.update_layout(title_text='Comparision between original close price vs predicted close price',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()\n","7e82fae9":"x_input=test_data[len(test_data)-time_step:].reshape(1,-1)\ntemp_input=list(x_input)\ntemp_input=temp_input[0].tolist()\n\nfrom numpy import array\n\nlst_output=[]\nn_steps=time_step\ni=0\npred_days = 10\nwhile(i<pred_days):\n    \n    if(len(temp_input)>time_step):\n        \n        x_input=np.array(temp_input[1:])\n        #print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        \n        yhat = my_model.predict(x_input)\n        #print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat.tolist())\n        temp_input=temp_input[1:]\n       \n        lst_output.extend(yhat.tolist())\n        i=i+1\n        \n    else:\n        yhat = my_model.predict(x_input)\n        \n        temp_input.extend(yhat.tolist())\n        lst_output.extend(yhat.tolist())\n        \n        i=i+1\n        \nprint(\"Output of predicted next days: \", len(lst_output))","80493653":"last_days=np.arange(1,time_step+1)\nday_pred=np.arange(time_step+1,time_step+pred_days+1)\nprint(last_days)\nprint(day_pred)","e860c2fc":"temp_mat = np.empty((len(last_days)+pred_days+1,1))\ntemp_mat[:] = np.nan\ntemp_mat = temp_mat.reshape(1,-1).tolist()[0]\n\nlast_original_days_value = temp_mat\nnext_predicted_days_value = temp_mat\n\nlast_original_days_value[0:time_step+1] = scaler.inverse_transform(closedf[len(closedf)-time_step:]).reshape(1,-1).tolist()[0]\nnext_predicted_days_value[time_step+1:] = scaler.inverse_transform(np.array(lst_output).reshape(-1,1)).reshape(1,-1).tolist()[0]\n\nnew_pred_plot = pd.DataFrame({\n    'last_original_days_value':last_original_days_value,\n    'next_predicted_days_value':next_predicted_days_value\n})\n\nnames = cycle(['Last 15 days close price','Predicted next 10 days close price'])\n\nfig = px.line(new_pred_plot,x=new_pred_plot.index, y=[new_pred_plot['last_original_days_value'],\n                                                      new_pred_plot['next_predicted_days_value']],\n              labels={'value': 'Close price','index': 'Timestamp'})\nfig.update_layout(title_text='Compare last 15 days vs next 10 days',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","2bd3cc53":"my_model=closedf.tolist()\nmy_model.extend((np.array(lst_output).reshape(-1,1)).tolist())\nmy_model=scaler.inverse_transform(my_model).reshape(1,-1).tolist()[0]\n\nnames = cycle(['Close Price'])\n\nfig = px.line(my_model,labels={'value': 'Close price','index': 'Timestamp'})\nfig.update_layout(title_text='Plotting whole closing price with prediction',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Stock')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","425bfac7":"# Visualization\n\n### Plotting close price of Bitcoin, Cardano, Dogecoin and Ethereum","3582c064":"## Cardano\n\n**The cardano blockchain can be used to build smart contracts, and in turn, create decentralized applications and protocols. Additionally, the ability to send and receive funds instantly through, for minimal fees, have many applications in the world of business and finance.**","8b686a1f":"# Introduction\n\nTime series is a sequence or series of data points in which the time component is involved throughout the occurrence and Analyzing this time series data with certain tools and techniques is called time series analysis.\n\n[Click Here](https:\/\/www.analyticsvidhya.com\/blog\/2021\/06\/time-series-analysis-a-comprehensive-guide\/) to know more about Time series analysis.\n\nHere, I am going to visualize and predict price of different kind of cryptocurrencies which are following:\n- Bitcoin\n- Cardano\n- Dogecoin\n- Ethereum\n\n\n## Brief introduction of XGBoost\n\n**XGBoost stands for \u201cExtreme Gradient Boosting\u201d. XGBoost is an optimized distributed gradient boosting library designed to be highly efficient, flexible, and portable. It implements Machine Learning algorithms under the Gradient Boosting framework. It provides a parallel tree boosting to solve many data science problems in a fast and accurate way.**\n\n[Click here](https:\/\/medium.com\/analytics-vidhya\/introduction-to-xgboost-algorithm-d2e7fad76b04) to know more about XGBoost.","aaed60d8":"#### Plotting last month open and close price of Bitcoin, Cardano, Dogecoin and Ethereum with comparision","915d5fba":"## Bitcoin\n\n**Bitcoin is a digital currency which operates free of any central control or the oversight of banks or governments. Instead it relies on peer-to-peer software and cryptography. A public ledger records all bitcoin transactions and copies are held on servers around the world.**","2a4c86dc":"# Preprocessing\n\n#### Replace None or Null values with forward filling technique using *fillna* function.","268ded15":"## Import Dataset","522ceb7d":"#### Convert Date column into Datatime format","f614b89c":"#### Plotting only 2020-2021 year volume of Bitcoin, Cardano, Dogecoin and Ethereum","99c22949":"#### Normalizing close price value","c2b0817c":"## Import Libraries","6b2683cb":"#### Dataframe of bitcoin close price","2838bcdb":"#### Separate data for Train and Test","da810444":"#### Import XGBRegressor module and Fit X_train and y_train for training model","4d43e8a2":"#### Model testing and evaluation","fb68fb5f":"## Ethereum\n\n**Ethereum operates on a decentralized computer network, or distributed ledger called a blockchain, which manages and tracks the currency. It can be useful to think of a blockchain like a running receipt of every transaction that's ever taken place in the cryptocurrency.**","00d69746":"### Note: For trying other cryptocurrencies, you just need to change closedf\n\n### If you want to try with Stock prediction with other algorithms such as SVR, KNN, RFR, LSTM, GRU then refered following notebook.\n\n- https:\/\/www.kaggle.com\/ysthehurricane\/advanced-stock-pred-using-svr-rfr-knn-lstm-gru\n- https:\/\/www.kaggle.com\/ysthehurricane\/tesla-stock-price-prediction-using-gru-tutorial","acf341ac":"## Dogecoin\n\n**Dogecoin is primarily used for tipping users on Reddit and Twitter, but it is also accepted as a method of payment by a few dozen merchants. It can be used to buy food, household supplies and even website domains.**","520c7b97":"#### Plotting only 2020-2021 year close price of Bitcoin, Cardano, Dogecoin and Ethereum","31942842":"#### Prediction next 10 days","07597fd9":"### Moving Averages\n**As we know the stock prices are highly volatile and prices change quickly with time. To observe any trend or pattern we can take the help of a 50-day 200-day average.**","b493e7d1":"#### Prepare train data for time series analysis","b7389f65":"### Plotting histogram with mean indicator of all four cryptocurrencies","a72de42a":"#  Bitcoin Close Price Prediction using XGBoost"}}