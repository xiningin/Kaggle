{"cell_type":{"5e418a6f":"code","2ef6b27e":"code","c0cdb02a":"code","601e9b7e":"code","b0cb5b8d":"code","6fe1e306":"code","2c44ef38":"code","a44f5321":"code","62c59b74":"code","9340590d":"code","78fffc01":"code","01229e83":"code","a6d0fb61":"code","228dfaa9":"code","0ad237b2":"code","fc17ce30":"markdown","545f78dd":"markdown","66468f0e":"markdown","ad31577a":"markdown","86fb29a4":"markdown","c56d00be":"markdown","2c311e59":"markdown"},"source":{"5e418a6f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2ef6b27e":"data = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","c0cdb02a":"data.info()","601e9b7e":"data.head()","b0cb5b8d":"data.describe().T","6fe1e306":"data.isna().sum()","2c44ef38":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_validate, KFold, train_test_split\nfrom sklearn.metrics import make_scorer, accuracy_score, f1_score, roc_auc_score","a44f5321":"y = data.iloc[:,-1]\nX = data.iloc[:,:-1]","62c59b74":"mms = MinMaxScaler()\nX = mms.fit_transform(X)","9340590d":"def oob_(estimator, X, y):\n    return 1 - estimator.oob_score_\ndef accuracy(y_true, y_pred):\n    return accuracy_score(y_true, y_pred)\ndef f1(y_true, y_pred):\n    return f1_score(y_true, y_pred)\ndef auc(y_true, y_pred):\n    return roc_auc_score(y_true, y_pred)\nscoring = {\n    'oob': oob_,\n    'accuracy': make_scorer(accuracy),\n    'f1 score': make_scorer(f1),\n    'roc auc': make_scorer(auc)\n}","78fffc01":"Xt, Xv, yt, yv = train_test_split(X, y, test_size=0.3)","01229e83":"model = RandomForestClassifier(oob_score=True)\nmodel.fit(Xt, yt)\nyp = model.predict(Xv)\nprint('Accuracy Score :', np.round(accuracy_score(yv, yp), 4))\nprint('F1 Score :', np.round(f1_score(yv, yp), 4))\nprint('AUC Score :', np.round(roc_auc_score(yv, model.predict_proba(Xv)[:,1]), 4))\nprint('OOB Error :', np.round(1 - model.oob_score_, 4))","a6d0fb61":"fold = KFold(n_splits=3)\ncv = cross_validate(RandomForestClassifier(oob_score=True), X, y, scoring=scoring, cv=fold)","228dfaa9":"cv_result = pd.DataFrame({\n    'Model': 'RandomForestClassifier',\n    'OOB Error': np.round(cv['test_oob'].mean(), 4),\n    'Accuracy': np.round(cv['test_accuracy'].mean(), 4),\n    'F1 Score': np.round(cv['test_f1 score'].mean(), 4),\n    'ROC AUC': np.round(cv['test_roc auc'].mean(), 4)\n}, index=[0])","0ad237b2":"cv_result","fc17ce30":"# Define Custom Metrics","545f78dd":"# Simple Data Exploration","66468f0e":"# Import Data","ad31577a":"# Model","86fb29a4":"# Result","c56d00be":"# Cross Validation","2c311e59":"# Preprocessing"}}