{"cell_type":{"874d2d70":"code","5c9e60c8":"code","12946e71":"code","9dc30db6":"code","38d1becc":"code","e51b3c3f":"code","543c19e6":"markdown","a913da50":"markdown","cf0b0367":"markdown","aeaf33ed":"markdown","035e981a":"markdown"},"source":{"874d2d70":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c9e60c8":"class Node:\n    def __init__(self, dataval=None):\n        self.dataval = dataval\n        self.nextval = None\n        self.prevval = None\n\nclass LinkedList:\n    def __init__(self):\n        self.headval = None\n    \n    def printlist(self):\n        node = self.headval\n        while node is not None:\n            print(f\"Node: {node.dataval}\")\n            if node.nextval is not None:\n                print(f\"Nextval: {node.nextval.dataval}\")\n            if node != self.headval:\n                print(f\"Prevval: {node.prevval.dataval}\")\n            print(\"-------\")\n            node = node.nextval\n\n    def insertAtBegin(self,newval):\n        newnode = Node(newval)\n        newnode.nextval = self.headval\n        self.headval.prevval = newnode\n        self.headval = newnode\n        \n    def insertAtEnd(self,newval):\n        newnode = Node(newval)\n        if self.headval is None:\n            self.headval = newnode\n            return\n        node = self.headval\n        while node.nextval:\n            node = node.nextval\n        node.nextval = newnode\n        newnode.prevval = node\n    \n    def insertAfterNode(self,node, newval):\n        # node is before newnode\n        # check if Node is None -> print \"error\" and return\n        if node is None:\n            print(\"Node does not exist - Error\")\n            return\n        \n        newnode = Node(newval)\n        newnode.nextval = node.nextval\n        newnode.prevval = node\n        node.nextval.prevval = newnode\n        node.nextval = newnode\n    \n    def removeNode(self,node2Remove):\n        if node2Remove is None:\n            print(\"Node does not exist - Error\")\n            return\n        node = self.headval\n        \n        # Special case if node2Remove is headnode\n        if self.headval == node2Remove:\n            node2Remove.nextval.prevval = None\n            self.headval = self.headval.nextval\n            node2Remove.nextval = None\n            \n        \n        while node.nextval:\n            if node.nextval == node2Remove:\n                node.nextval = node2Remove.nextval\n                if node.nextval is not None:\n                    node2Remove.nextval.prevval = node\n                node2Remove.nextval = None\n                #node2Remove.dataval = None\n                node2Remove.prevval = None\n                return\n            node = node.nextval","12946e71":"mylist = LinkedList()\nmylist.headval = Node(\"1\")\nmylist.insertAtEnd(\"5\")\nmylist.insertAtEnd(\"10\")\nmylist.insertAfterNode(mylist.headval.nextval, \"7\")\nmylist.insertAtBegin(\"0\")\nmylist.printlist()\n","9dc30db6":"mylist.removeNode(mylist.headval)\nmylist.printlist()","38d1becc":"mylist.removeNode(mylist.headval.nextval)\nmylist.printlist()","e51b3c3f":"mylist.removeNode(mylist.headval.nextval.nextval)\nmylist.printlist()","543c19e6":"Test for insertAtEnd, insertAtBegin, insertAfterNode","a913da50":"Test for \"removeNode\" removing the headval","cf0b0367":"Test for \"removeNode\" removing node at the end","aeaf33ed":"Double Linked List","035e981a":"Test for \"removeNode\" removing node in the middle"}}