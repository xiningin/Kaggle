{"cell_type":{"3a59297d":"code","ea22f3cc":"code","1057ee37":"code","1cba7791":"code","21818194":"code","cf2ec417":"code","6fe12738":"code","1b39f448":"code","b45e2378":"code","4d6c9ed8":"code","ea394f5e":"code","bf3f1037":"code","0076bf84":"code","82ff0494":"code","1821b68e":"code","19de87aa":"code","89576439":"code","fdbb82e8":"code","1bc28e9d":"code","0b5414a0":"code","b9820a07":"code","51c596f6":"code","f4e0de62":"code","c998d99f":"code","b554094a":"code","50c7e605":"code","f9bf3af9":"code","f8700581":"code","7a0f3f6a":"code","9775fafe":"code","53866f6a":"code","7253928f":"code","3718006d":"code","0471186f":"code","9390580c":"code","26dec4ab":"code","d6fe48c8":"code","f9c43ae0":"code","32f5ce42":"code","8c00a5f1":"code","6da397b7":"code","cf6cfa6a":"markdown","b8ae62de":"markdown","a98720f1":"markdown","ca5acaf9":"markdown","2cc1cf04":"markdown","323b7100":"markdown","fec76462":"markdown","650c7095":"markdown","be22f382":"markdown","b4b2733f":"markdown","79c0816a":"markdown","3b19feae":"markdown","0ddab9d3":"markdown","3c6838e3":"markdown","f1fe5e69":"markdown","6bdf27fe":"markdown"},"source":{"3a59297d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea22f3cc":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV , RepeatedStratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nimport warnings\nwarnings.simplefilter('ignore')\n%matplotlib inline","1057ee37":"plt.style.use('seaborn-darkgrid')\npalette =  plt.get_cmap('Set2')","1cba7791":"df = pd.read_csv('..\/input\/advertising\/advertising.csv')\ndf.head(5)","21818194":"df.columns","cf2ec417":"df.info()","6fe12738":"df.describe()","1b39f448":"df.describe(include=[np.object])","b45e2378":"df['Timestamp'] = pd.to_datetime(df['Timestamp'])","4d6c9ed8":"plt.figure(figsize=(10 , 5))\ndf['Daily Time Spent on Site'].hist()\nplt.show()","ea394f5e":"plt.figure(figsize=(10 , 5))\nsns.distplot(df['Age'] , bins=35)\nplt.xlabel('Age' , fontsize=15)\nplt.ylabel('Density' , fontsize=15)\nplt.show()","bf3f1037":"df['hour'] = df['Timestamp'].apply(lambda x : x.hour)\ndf['clicks_hour']= df.groupby('hour')['Clicked on Ad'].transform('sum')","0076bf84":"plt.figure(figsize=(10 , 5))\nsns.lineplot(df['hour'] , df['clicks_hour'])\nplt.xlabel('Hours' , fontsize=15)\nplt.ylabel('click counts' , fontsize=15)\nplt.xticks(list(range(0,26 , 2)))\nplt.show()","82ff0494":"df['day'] = df['Timestamp'].apply(lambda x : x.day_of_week)\ndf['clicks_day'] = df.groupby('day')['Clicked on Ad'].transform('sum')","1821b68e":"temp = df['day'].map({0:'Sun' , 1:'Mon' , 2:'Tue' , 3:'Wed' , 4:'Thurs' ,5:'Fri' , 6:'Sat'})\nplt.figure(figsize=(10 , 5))\nsns.lineplot(temp , df['clicks_day'])\nplt.xlabel('Week days' , fontsize=15)\nplt.ylabel('Click Counts' , fontsize=15)\nplt.show()","19de87aa":"plt.figure(figsize=(20 , 6))\nsns.scatterplot(df['Age'] , df['Area Income'] , hue=df['Clicked on Ad'])\nplt.xlabel('Age' , fontsize=15)\nplt.ylabel('Area Income' , fontsize=15)\nplt.show()","89576439":"plt.figure(figsize=(20 , 6))\nsns.scatterplot(df['Age'] , df['Daily Time Spent on Site'] , hue=df['Clicked on Ad'])\nplt.xlabel('Age' , fontsize=15)\nplt.ylabel('Daily Tme Spent on Site' , fontsize=15)\nplt.show()","fdbb82e8":"plt.figure(figsize=(20 , 6))\nsns.scatterplot(df['Daily Internet Usage'] , df['Daily Time Spent on Site'] , hue=df['Clicked on Ad'])\nplt.xlabel('Daily Internet Usage' , fontsize=15)\nplt.ylabel('Daily Tme Spent on Site' , fontsize=15)\nplt.show()","1bc28e9d":"plt.figure(figsize=(20 , 6))\nsns.countplot(df['Male'])\nplt.xlabel('Male' , fontsize=15)\nplt.ylabel('Count' , fontsize=15)\nplt.show()","0b5414a0":"df['Male'].value_counts()","b9820a07":"plt.figure(figsize=(25 , 15))\nsns.pairplot(df , hue='Clicked on Ad')\nplt.show()","51c596f6":"X = df[['Daily Time Spent on Site', 'Age', 'Area Income','Daily Internet Usage', 'Male']]\ny = df['Clicked on Ad']","f4e0de62":"X_train , X_test , y_train , y_test = train_test_split(X , y , random_state=0 , test_size=0.30)","c998d99f":"scaler = MinMaxScaler(feature_range=(0,1))\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","b554094a":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)\ny_pred = logmodel.predict(X_test)","50c7e605":"print(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(accuracy_score(y_test,y_pred))\nlg=accuracy_score(y_test,y_pred)","f9bf3af9":"rf = RandomForestClassifier()\nrf.fit(X_train,y_train)\ny_pred = rf.predict(X_test)","f8700581":"print(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(accuracy_score(y_test,y_pred))\nrfs=accuracy_score(y_test,y_pred)","7a0f3f6a":"xgb = XGBClassifier()\nxgb.fit(X_train,y_train)\ny_pred = xgb.predict(X_test)","9775fafe":"print(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(accuracy_score(y_test,y_pred))\nxgbs=accuracy_score(y_test,y_pred)","53866f6a":"svm = SVC()\nsvm.fit(X_train,y_train)\ny_pred = svm.predict(X_test)","7253928f":"print(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(accuracy_score(y_test,y_pred))\nsvcs=accuracy_score(y_test,y_pred)","3718006d":"models = pd.DataFrame({\n    'Model':['Logistic Regression','Random Forest', 'XGBoost', 'SVC'],\n    'Accuracy_score' :[lg,rfs, xgbs, svcs]\n})\nsns.barplot(x='Accuracy_score', y='Model', data=models)\nmodels.sort_values(by='Accuracy_score', ascending=False)","0471186f":"model = LogisticRegression()\nsolvers = ['newton-cg', 'lbfgs', 'liblinear']\npenalty = ['l2']\nc_values = [100, 10, 1.0, 0.1, 0.01]","9390580c":"grid = dict(solver=solvers,penalty=penalty,C=c_values)\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\ngrid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\ngrid_result = grid_search.fit(X, y)","26dec4ab":"print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","d6fe48c8":"model = SVC()\nkernel = ['poly', 'rbf', 'sigmoid']\nC = [50, 10, 1.0, 0.1, 0.01]\ngamma = ['scale']","f9c43ae0":"grid = dict(kernel=kernel,C=C,gamma=gamma)\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\ngrid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\ngrid_result = grid_search.fit(X_train, y_train)","32f5ce42":"print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","8c00a5f1":"logmodel = LogisticRegression(penalty='l2' , C=10 , solver='newton-cg')\nlogmodel.fit(X_train,y_train)\ny_pred = logmodel.predict(X_test)","6da397b7":"print(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(accuracy_score(y_test,y_pred))\nlg=accuracy_score(y_test,y_pred)","cf6cfa6a":"**No of clicks are higher on Saturday , Wednesday , Tuesday**\n**And least clicks on Monday**","b8ae62de":"**No of clicks are higher at 0 , 7 and 9 according to 24 hours time format**","a98720f1":"### We have created a model with 97 % accuracy","ca5acaf9":"**20-40 aged peoples having area income ranging 45k to 80k clicks on ad more than others**","2cc1cf04":"**Peoples who spent more time on internet and internet surfing more clicks on the ads**","323b7100":"# Random Forest","fec76462":"# Exploratory Data Analysis (EDA)","650c7095":"**20-40 aged peoples who spents more than 60 minutes on internet more clicks on the ads**","be22f382":"**We can say male and female both surfs equally**","b4b2733f":"# Hyperparameter tuning of logistics model","79c0816a":"# Preprocessing","3b19feae":"# XGBoost","0ddab9d3":"# SVM","3c6838e3":"# Model Comparison","f1fe5e69":"# Logistics Model","6bdf27fe":"# Let's create our best model"}}