{"cell_type":{"cc52e826":"code","8c871b4e":"code","9a7cccc4":"code","90644458":"code","5c1c4d13":"code","3c8a8c74":"code","f6e5617c":"code","53422081":"code","13f7b200":"code","605ef34f":"code","adaa3754":"code","9793143a":"code","af0b4b32":"code","78246459":"code","1b4bc34d":"code","6c7fcf26":"code","d6a82b03":"code","989b2bfd":"code","27ecf5ca":"code","5e85386a":"code","415759f9":"code","45870806":"code","e3f2d8bb":"code","0c9c670a":"code","f7f65101":"code","1157ca66":"code","5e06d82b":"code","e03a15fe":"code","9dc12dc4":"code","46bd95e5":"code","ac033bc6":"markdown","55094ee8":"markdown","4d6018a7":"markdown","fafc385f":"markdown","09ee5bd0":"markdown","adb67265":"markdown","65bc984a":"markdown","eeffefd2":"markdown","016b74b7":"markdown","4e70941b":"markdown","6bfe3f80":"markdown","b4c64376":"markdown","87730051":"markdown","8a84fc4b":"markdown","d1e393f8":"markdown","3023e3b3":"markdown","3642936a":"markdown","474e8862":"markdown","2df2137e":"markdown","5ea831c4":"markdown"},"source":{"cc52e826":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cv2","8c871b4e":"DATASET_DIR = os.listdir(\"..\/input\/flowers-recognition\/flowers\/flowers\") \nDATASET_DIR","9a7cccc4":"labels = ['daisy', 'rose', 'dandelion', 'sunflower', 'tulip'] #labels\nDIR = \"..\/input\/flowers-recognition\/flowers\/flowers\/\" # path\nlink = []\nfor label in labels:\n    path = os.path.join(DIR, label) # combine path and labels\n    link.append(path) # append in link\nprint(link)\n\n\nfor i in range(len(link)):\n    new = os.listdir(link[i])\n    i+=1\n    print(f\"length : {len(new)}\") # each folder total image count ","90644458":"IMG_SIZE = 224 # image size\n\ndata = [] \n\ndef get_data(data_dir):\n    for category in labels:\n        path = os.path.join(data_dir, category) #combine path\n        class_num = labels.index(category) # index no of labels\n        for img in os.listdir(path):\n            try:\n                img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_COLOR) # color image array\n                resized_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE)) # resize\n                data.append([resized_array, class_num])\n            except Exception as e: # exception\n                print(e)\n    return np.array(data) # return array","5c1c4d13":"new_data = get_data(\"\/kaggle\/input\/flowers-recognition\/flowers\/flowers\/\") # path for function","3c8a8c74":"# visualize each class\nimport seaborn as sns\n\nl = []\nfor i in new_data:\n    l.append(labels[i[1]])\nsns.set_style('whitegrid')\ncountplot = sns.countplot(l)\n\nfor p in countplot.patches:\n    countplot.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.45, p.get_height()+0.1), ha='center', va='bottom', color= 'black') # show the count no.","f6e5617c":"import matplotlib.pyplot as plt # pip install matplotlib","53422081":"import random\nrandom.shuffle(new_data) # shuffle data","13f7b200":"# random image visualization\nfig=plt.figure(figsize=(8, 8))\ncolumns = 4\nrows = 5\nfor i in range(1, columns*rows +1):\n    r = random.randint(0, len(new_data))\n    img = (new_data[r][0])\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(img)\n    plt.title(f\"Flower: {labels[new_data[r][1]]}\")\n    fig.tight_layout()\nplt.show()","605ef34f":"# split data\nfrom sklearn.model_selection import train_test_split","adaa3754":"# separate item and label\nX = []\ny = []\nfor item, label in new_data:\n    X.append(item)\n    y.append(label)","9793143a":"X = np.array(X) \/ 255 # Normaliation( Now the array will remain 0-1)\ny = np.array(y)","af0b4b32":"X = X.reshape(-1, IMG_SIZE, IMG_SIZE, 3) # Reshape array with channel 3","78246459":"from sklearn.preprocessing import LabelBinarizer # LabelBinarizer\nlabel_binarizer = LabelBinarizer()\ny = label_binarizer.fit_transform(y)\n\n# if rose, then it will be 0 1 0 0 0","1b4bc34d":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42) # trainning and testing data","6c7fcf26":"import tensorflow as tf \nfrom tensorflow.keras.layers import Flatten, Conv2D, Activation, Dense, Dropout, MaxPooling2D\nfrom tensorflow.keras.models import Sequential","d6a82b03":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), input_shape=x_train.shape[1:]))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(2, 2, padding=\"same\"))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(2, 2, padding=\"same\"))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(128, (3, 3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(2, 2, padding=\"same\"))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation=\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(128, activation=\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(5, activation=\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])","989b2bfd":"history = model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test), batch_size=32) # training part with 10 epochs","27ecf5ca":"score = model.evaluate(x_test, y_test)\nmodel.save(\"cnn.model\") # save model","5e85386a":"# ploting \naccuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(accuracy))\n\nplt.plot(epochs, accuracy, \"b\", label=\"trainning accuracy\")\nplt.plot(epochs, val_accuracy, \"r\", label=\"validation accuracy\")\nplt.legend()\nplt.show()\n\nplt.plot(epochs, loss, \"b\", label=\"trainning loss\")\nplt.plot(epochs, val_loss, \"r\", label=\"validation loss\")\nplt.legend()\nplt.show()","415759f9":"predictions = model.predict_classes(x_test)\npredictions[:10] # predict 10 images","45870806":"y_test_inv_label = label_binarizer.inverse_transform(y_test)","e3f2d8bb":"# predict function\nlabels = ['daisy', 'rose', 'dandelion', 'sunflower', 'tulip']\n\ndef prepare(filepath):\n    img_array = cv2.imread(filepath, cv2.IMREAD_COLOR)\n    new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))\n    return new_array.reshape(-1, IMG_SIZE, IMG_SIZE, 3)\n\nmodel = tf.keras.models.load_model(\"cnn.model\")","0c9c670a":"prediction = model.predict_classes([prepare(\"..\/input\/prediction-images\/rose.jpg\")])\nprint(labels[(prediction[0])])  # predict rose","f7f65101":"prediction = model.predict_classes([prepare(\"..\/input\/prediction-images\/daisy.jpg\")])\nprint(labels[(prediction[0])]) # predict daisy","1157ca66":"prediction = model.predict_classes([prepare(\"..\/input\/prediction-images\/dandelion1.jpg\")])\nprint(labels[(prediction[0])]) # predict daisy","5e06d82b":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score","e03a15fe":"confusion_matrix(y_test_inv_label, predictions)","9dc12dc4":"print(classification_report(y_test_inv_label, predictions, target_names=labels))","46bd95e5":"print(accuracy_score(y_test_inv_label, predictions))","ac033bc6":"# inverse_transform them to original classes.","55094ee8":"# If you like, please upvote","4d6018a7":"# predict images","fafc385f":"# visualize accuracy, validation accuracy, loss, validation loss","09ee5bd0":"# separate the data and label, for training, testing","adb67265":"![daisy.jpg](attachment:daisy.jpg)\n\n","65bc984a":"# Split train, test data","eeffefd2":"# create list of existing folder","016b74b7":"# create a function for model prediction test","4e70941b":"# Normalize data, It will keep the value in range(0 to 1). Normalization is the process of organizing a database to reduce redundancy and improve data integrity.\n\nfor more, you should follow [Normalization](https:\/\/database.guide\/what-is-normalization\/)","6bfe3f80":"# Declear the label and path, join then and append in link. Using for loop count total image from different categories","b4c64376":"# Train the model\n\n[Take a look my blog](https:\/\/skilldynamo.blogspot.com\/2020\/07\/convolution-neural-network.html)","87730051":"# Using seaborn to visualize","8a84fc4b":"## define the path for function","d1e393f8":"# Shuffle the data, cause every category should present in trainning data...","3023e3b3":"# labelbinarizer convert your label\n\n## think labels = ['daisy', 'rose', 'dandelion', 'sunflower', 'tulip']\n\n## then rose will convert like        0 1 0 0 0\n## daisy will convert like            1 0 0 0 0","3642936a":"# Reshape data with channel 3, because RGB","474e8862":"# Wrong predict","2df2137e":"# Fix the image size is 224, create a function and combine the path, create image array, resize array, append and return in data ","5ea831c4":"## Take a look of some random image"}}