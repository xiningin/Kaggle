{"cell_type":{"d11bbade":"code","37f0f130":"code","8967f2f5":"code","dbb83420":"code","902eaadc":"code","763ec96c":"code","ec929028":"code","707613f0":"code","e6073af1":"code","03b5ab53":"code","e9414ddf":"code","6a59f7da":"code","f112b7d4":"code","9d64619b":"code","12c765ba":"code","7fc234e1":"code","d074ec7f":"code","49a0fa0c":"code","5ac4c170":"code","f1ef1e02":"code","c5b0360b":"code","ef213603":"code","e60cdd98":"code","36cbc05f":"code","35e5cbce":"code","531a5872":"code","a1ff98f3":"code","e5bb653e":"code","a0a35207":"code","ecf57f2c":"code","1c0b51b3":"code","dccc7075":"code","569f055a":"code","a22c8488":"code","0ef27ea8":"code","50fbb437":"code","f2c549d8":"code","8c57a272":"code","1ebe8970":"code","e6a96514":"code","98764435":"code","69e97fe6":"code","09e2f638":"code","8d6b0fc6":"code","9ef6dc3d":"code","4e47e722":"code","ed8910e4":"markdown"},"source":{"d11bbade":"import numpy as np\nimport pandas as pd","37f0f130":"movies = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\ncredits = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')","8967f2f5":"movies.head()","dbb83420":"credits.head(1)","902eaadc":"movies = movies.merge(credits, on = 'title')  # merging both dataframes on the basis of title","763ec96c":"movies.shape","ec929028":"movies.head(1)","707613f0":"# important features -> genres, id, keywords, title, overview, cast, crew\nmovies = movies[['id', 'title', 'overview', 'keywords', 'genres', 'cast', 'crew']]","e6073af1":"movies.head()","03b5ab53":"movies.isnull().sum()","e9414ddf":"# 3 null values in overview column is a very small number so we'll drop them\nmovies.dropna(inplace=True)\nmovies.isnull().sum()","6a59f7da":"movies.duplicated().sum()","f112b7d4":"movies.iloc[0].genres","9d64619b":"import ast\ndef convert(obj):\n    L = []\n    for i in ast.literal_eval(obj):\n        L.append(i['name'])\n    return L","12c765ba":"movies['genres'] = movies['genres'].apply(convert)\nmovies['keywords'] = movies['keywords'].apply(convert)","7fc234e1":"movies.head()","d074ec7f":"def convert2(obj):\n    L = []\n    count = 0\n    for i in ast.literal_eval(obj):\n        if count != 3:\n            L.append(i['name'])\n            count +=1\n        else:\n            break\n    return L","49a0fa0c":"movies['cast'] = movies['cast'].apply(convert2)","5ac4c170":"movies.head()","f1ef1e02":"def fetch_director(obj):\n    L = []\n    count = 0\n    for i in ast.literal_eval(obj):\n        if i['job'] == 'Director':\n            L.append(i['name'])\n            break\n    return L","c5b0360b":"movies['crew'] = movies['crew'].apply(fetch_director)","ef213603":"movies.head()","e60cdd98":"# overview is a column of string, so we'll covert it into list\nmovies['overview'] = movies['overview'].apply(lambda x:x.split())","36cbc05f":"movies.head()","35e5cbce":"# now we'll remove space\nmovies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(' ', '') for i in x])\nmovies['genres'] = movies['genres'].apply(lambda x:[i.replace(' ', '') for i in x])\nmovies['cast'] = movies['cast'].apply(lambda x:[i.replace(' ', '') for i in x])\nmovies['crew'] = movies['crew'].apply(lambda x:[i.replace(' ', '') for i in x])","531a5872":"movies.head()","a1ff98f3":"# now dataset is ready to make tags\n\nmovies['tags'] = movies['overview'] + movies['keywords'] + movies['genres'] + movies['cast'] + movies['crew']","e5bb653e":"movies.head()","a0a35207":"# now ther is no need of overview, keywords, genre, cast, crew\n\ntags_df = movies[['id', 'title', 'tags']]","ecf57f2c":"tags_df","1c0b51b3":"tags_df['tags'] = tags_df['tags'].apply(lambda x: \" \".join(x))","dccc7075":"tags_df['tags'] = tags_df['tags'].apply(lambda x: x.lower())","569f055a":"tags_df","a22c8488":"# now we'll do text vetorization\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features = 5000, stop_words = 'english')","0ef27ea8":"vectors = cv.fit_transform(tags_df['tags']).toarray()","50fbb437":"vectors.shape","f2c549d8":"cv.get_feature_names()","8c57a272":"from sklearn.metrics.pairwise import cosine_similarity","1ebe8970":"cosine_similarity(vectors).shape","e6a96514":"similarity = cosine_similarity(vectors)","98764435":"similarity[0]","69e97fe6":"sorted(list(enumerate(similarity[0])), reverse=True, key = lambda x:x[1])[1:6]","09e2f638":"def recommend(movie):\n    movie_index = tags_df[tags_df['title'] == movie].index[0]\n    distance = similarity[movie_index]\n    movie_r = sorted(list(enumerate(distance)), reverse=True, key = lambda x:x[1])[1:6]\n    for i in movie_r:\n        print(tags_df.iloc[i[0]].title)","8d6b0fc6":"recommend('Avatar')","9ef6dc3d":"recommend('Batman')","4e47e722":"recommend('John Carter')","ed8910e4":"## Creating Tags"}}