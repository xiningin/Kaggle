{"cell_type":{"017343f0":"code","c535e3f6":"code","375af3e4":"code","c19fddea":"code","777703d9":"code","d52322c6":"code","4e4e954b":"code","3026542a":"code","8d0fea5f":"code","0694d6b2":"code","5f6aa1a6":"code","18005738":"code","d36361d7":"code","b7e1c35d":"code","2bc5f7c0":"code","a841cecc":"code","394775d3":"code","0d9a1dc8":"code","d3fb4704":"code","4517719b":"code","59b159d1":"code","28196f95":"code","7f163efc":"code","aec99ec5":"code","05c68d11":"code","20eb9ab6":"code","99f16c4f":"code","c1d6905f":"code","b0792a00":"code","170dfd3b":"code","e4b2d83a":"code","3af1dfd0":"code","eb35feb9":"code","7f1b2a36":"code","6ef17261":"code","0d907fe3":"code","1292c3d2":"code","397cdd41":"code","89c2bbab":"code","d546491e":"code","1bf4b429":"code","e08cf484":"code","d28c4b9e":"markdown","6e2670a1":"markdown","7abc0bdf":"markdown","b29e488a":"markdown","db32eef4":"markdown","3ce68e9f":"markdown","ee511551":"markdown","fed8b51b":"markdown","d02a7ea2":"markdown","07b8f011":"markdown","97c1d797":"markdown","2d117457":"markdown","9f0eb002":"markdown","7e4e94c5":"markdown","11623872":"markdown","a71b1274":"markdown","ee928aba":"markdown","d4b94b84":"markdown","3da0b8f1":"markdown","04346632":"markdown","860f7613":"markdown","dc4dc812":"markdown","dbb3d023":"markdown","2d6701fd":"markdown","713cce95":"markdown","41d7e7a0":"markdown","c3dd319d":"markdown","54c21fe9":"markdown","3c4b944b":"markdown","13d5838a":"markdown","100efada":"markdown","01d82627":"markdown","af6ab737":"markdown","a05ee289":"markdown","23da9174":"markdown","6df509af":"markdown","8b52a9c2":"markdown","8f081e6c":"markdown","6056b743":"markdown","9cfa9b9f":"markdown","74a018c5":"markdown","8341d1e9":"markdown","0f302d36":"markdown","91739121":"markdown","9bab0a49":"markdown","b3e10ea0":"markdown","1b456cc9":"markdown","5debe150":"markdown","311cfa6c":"markdown","4bb21a31":"markdown","9357fb55":"markdown","c91b9783":"markdown","da175991":"markdown","1b11e60e":"markdown","73fe8647":"markdown","73110177":"markdown","1ecd1115":"markdown","db0eef14":"markdown","ba57f72d":"markdown","399703dd":"markdown","5a50f0a3":"markdown","5e975a0e":"markdown","6e48c113":"markdown","dbe875a0":"markdown","115078e3":"markdown","d1420101":"markdown","d15259b1":"markdown","02c2e5f4":"markdown","740521a9":"markdown","2a423800":"markdown","5dbc850d":"markdown","5b5bce0e":"markdown","1a1ff6c3":"markdown","99924c97":"markdown","a9736d81":"markdown","65dc3338":"markdown"},"source":{"017343f0":"import tensorflow as tf\n\n# Get the GPU device name.\ndevice_name = tf.test.gpu_device_name()\n\n# The device name should look like the following:\nif device_name == '\/device:GPU:0':\n    print('Found GPU at: {}'.format(device_name))\nelse:\n    raise SystemError('GPU device not found')","c535e3f6":"import torch\n\n# If there's a GPU available...\nif torch.cuda.is_available():    \n\n    # Tell PyTorch to use the GPU.    \n    device = torch.device(\"cuda\")\n\n    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n\n    print('We will use the GPU:', torch.cuda.get_device_name(0))\n\n# If not...\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device(\"cpu\")","375af3e4":"# !pip install transformers=='2.8.0'","c19fddea":"# pip install emoji","777703d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d52322c6":"import pandas as pd\nimport re\n# import emoji\n\n# Load the dataset into a pandas dataframe.\ntrain_df = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv',encoding='UTF-8')\n\n# Report the number of sentences.\nprint('Number of training sentences: {:,}\\n'.format(train_df.shape[0]))\n\n# Display 10 random rows from the data.\ntrain_df.sample(10)","4e4e954b":"# #HappyEmoticons\n# emoticons_happy = set([\n#     ':-)', ':)', ';)', ':o)', ':]', ':3', ':c)', ':>', '=]', '8)', '=)', ':}',\n#     ':^)', ':-D', ':D', '8-D', '8D', 'x-D', 'xD', 'X-D', 'XD', '=-D', '=D',\n#     '=-3', '=3', ':-))', \":'-)\", \":')\", ':*', ':^*', '>:P', ':-P', ':P', 'X-P',\n#     'x-p', 'xp', 'XP', ':-p', ':p', '=p', ':-b', ':b', '>:)', '>;)', '>:-)',\n#     '<3'\n#     ])\n\n# # Sad Emoticons\n# emoticons_sad = set([\n#     ':L', ':-\/', '>:\/', ':S', '>:[', ':@', ':-(', ':[', ':-||', '=L', ':<',\n#     ':-[', ':-<', '=\\\\', '=\/', '>:(', ':(', '>.<', \":'-(\", \":'(\", ':\\\\', ':-c',\n#     ':c', ':{', '>:\\\\', ';('\n#     ])\n\n# #combine sad and happy emoticons\n# emoticons = emoticons_happy.union(emoticons_sad)\n\n\n#Emoji patterns\nemoji_pattern = re.compile(\"[\"\n         u\"\\U0001F600-\\U0001F64F\"  # emoticons\n         u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n         u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n         u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n         u\"\\U00002702-\\U000027B0\"\n         u\"\\U000024C2-\\U0001F251\"\n         \"]+\", flags=re.UNICODE)","3026542a":"from nltk.tokenize import WordPunctTokenizer\nimport re\nimport emoji\nfrom bs4 import BeautifulSoup\nimport itertools\n\ntok = WordPunctTokenizer()\npat1 = r'@[A-Za-z0-9]+'\npat2 = r'https?:\/\/[A-Za-z0-9.\/]+'\n\ndef tweet_cleaner(text): # ref: https:\/\/towardsdatascience.com\/another-twitter-sentiment-analysis-bb5b01ebad90\n    # removing UTF-8 BOM (Byte Order Mark)\n    try:\n        text1 = text.decode(\"utf-8-sig\").replace(u\"\\ufffd\", \"?\") # The UTF-8 BOM is a sequence of bytes (EF BB BF) that allows the reader to identify a file as being encoded in UTF-8\n    except:\n        text1 = text\n    \n    \n    #replace consecutive non-ASCII characters with a space\n    text1 = re.sub(r'[^\\x00-\\x7F]+',' ', text1)\n    \n    #remove emojis from tweet\n    text2 = emoji_pattern.sub(r'', text1)\n    \n    # Remove emoticons\n    # text3 = [word for word in text2.split() if word not in emoticons]\n    # text3 = \" \".join(text3)\n    \n    # contradictions and special characters \n    # text4 = spl_ch_contra(text3)\n    \n    # HTML encoding\n    soup = BeautifulSoup(text2, 'lxml') #HTML encoding has not been converted to text, and ended up in text field as \u2018&amp\u2019,\u2019&quot\u2019,etc.\n    text5 = soup.get_text()\n    \n    # removing @ mentions\n    text6 = re.sub(pat1, '', text5)\n    \n    # Removing URLs\n    text7 = re.sub(pat2, '', text6)\n    \n    # Removing punctuations\n    # text8 = re.sub(\"[\\.\\,\\!\\?\\:\\;\\-\\=\\(\\)\\[\\]\\\"\\'\\%\\*\\#\\@]\", \" \", text7)\n    \n    # Fix misspelled words\n    text9 = ''.join(''.join(s)[:2] for _, s in itertools.groupby(text7))# checking that each character should occur not more than 2 times in every word\n\n    # Tokenizing ,change cases & join together to remove unneccessary white spaces\n    text9_list = tok.tokenize(text9.lower())\n    text10 = (\" \".join(text9_list)).strip()\n    \n    return text10","8d0fea5f":"# cleaning tweets\ntrain_df['text_cleaned'] = list(map(lambda x:tweet_cleaner(x),train_df['text']) )","0694d6b2":"# checking out few samples\ntrain_df.sample(10)","5f6aa1a6":"# Get the lists of sentences and their labels.\nsentences = train_df.text_cleaned.values\nlabels = train_df.target.values","18005738":"from transformers import BertTokenizer\n\n# Load the BERT tokenizer.\nprint('Loading BERT tokenizer...')\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)","d36361d7":"# Print the original sentence.\nprint(' Original: ', sentences[0])\n\n# Print the tweet split into tokens.\nprint('Tokenized: ', tokenizer.tokenize(sentences[0]))\n\n# Print the tweet mapped to token ids.\nprint('Token IDs: ', tokenizer.convert_tokens_to_ids(tokenizer.tokenize(sentences[0])))","b7e1c35d":"max_len = 0\n\n# For every sentence...\nfor sent in sentences:\n\n    # Tokenize the text and add `[CLS]` and `[SEP]` tokens.\n    input_ids = tokenizer.encode(sent, add_special_tokens=True)\n\n    # Update the maximum sentence length.\n    max_len = max(max_len, len(input_ids))\n\nprint('Max sentence length: ', max_len)","2bc5f7c0":"# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\nattention_masks = []\n\n# For every sentence...\nfor sent in sentences:\n    # `encode_plus` will:\n    #   (1) Tokenize the sentence.\n    #   (2) Prepend the `[CLS]` token to the start.\n    #   (3) Append the `[SEP]` token to the end.\n    #   (4) Map tokens to their IDs.\n    #   (5) Pad or truncate the sentence to `max_length`\n    #   (6) Create attention masks for [PAD] tokens.\n    encoded_dict = tokenizer.encode_plus(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                        max_length = 75,           # Pad & truncate all sentences.\n                        pad_to_max_length = True,\n                        return_attention_mask = True,   # Construct attn. masks.\n                        return_tensors = 'pt',     # Return pytorch tensors.\n                   )\n    \n    # Add the encoded sentence to the list.    \n    input_ids.append(encoded_dict['input_ids'])\n    \n    # And its attention mask (simply differentiates padding from non-padding).\n    attention_masks.append(encoded_dict['attention_mask'])\n\n# Convert the lists into tensors.\ninput_ids = torch.cat(input_ids, dim=0)\nattention_masks = torch.cat(attention_masks, dim=0)\nlabels = torch.tensor(labels)\n\n# Print sentence 0, now as a list of IDs.\nprint('Original: ', sentences[1])\nprint('Token IDs:', input_ids[1])","a841cecc":"from torch.utils.data import TensorDataset, random_split\n\n# Combine the training inputs into a TensorDataset.\ndataset = TensorDataset(input_ids, attention_masks, labels)\n\n# Create a 90-10 train-validation split.\n\n# Calculate the number of samples to include in each set.\ntrain_size = int(0.9 * len(dataset))\nval_size = len(dataset) - train_size\n\n# Divide the dataset by randomly selecting samples.\ntrain_dataset, val_dataset = random_split(dataset, [train_size, val_size])\n\n# print('{:>5,} training samples'.format(train_size))\n# print('{:>5,} validation samples'.format(val_size))\n\n# Checking whether the distribution of target is consitent across both the sets\nlabel_temp_list = []\nfor a,b,c in train_dataset:\n  label_temp_list.append(c)\n\nprint('{:>5,} training samples'.format(train_size))\nprint('{:>5,} training samples with real disater tweets'.format(sum(label_temp_list)))\n\n\nlabel_temp_list = []\nfor a,b,c in val_dataset:\n  label_temp_list.append(c)\n\nprint('{:>5,} validation samples'.format(val_size))\nprint('{:>5,} validation samples with real disater tweets'.format(sum(label_temp_list)))","394775d3":"from torch.utils.data import DataLoader, RandomSampler, SequentialSampler\n\n# The DataLoader needs to know our batch size for training, so we specify it \n# here. For fine-tuning BERT on a specific task, the authors recommend a batch \n# size of 16 or 32.\nbatch_size = 32\n\n# Create the DataLoaders for our training and validation sets.\n# We'll take training samples in random order. \ntrain_dataloader = DataLoader(\n            train_dataset,  # The training samples.\n            sampler = RandomSampler(train_dataset), # Select batches randomly\n            batch_size = batch_size # Trains with this batch size.\n        )\n\n# For validation the order doesn't matter, so we'll just read them sequentially.\nvalidation_dataloader = DataLoader(\n            val_dataset, # The validation samples.\n            sampler = SequentialSampler(val_dataset), # Pull out batches sequentially.\n            batch_size = batch_size # Evaluate with this batch size.\n        )","0d9a1dc8":"from transformers import BertForSequenceClassification, AdamW, BertConfig\n\n# Load BertForSequenceClassification, the pretrained BERT model with a single \n# linear classification layer on top. \nmodel = BertForSequenceClassification.from_pretrained(\n    \"bert-base-uncased\", # Use the 12-layer BERT model, with an uncased vocab.\n    num_labels = 2, # The number of output labels--2 for binary classification.\n                    # You can increase this for multi-class tasks.   \n    output_attentions = False, # Whether the model returns attentions weights.\n    output_hidden_states = False, # Whether the model returns all hidden-states.\n)\n\n# Tell pytorch to run this model on the GPU.\nmodel.cuda()","d3fb4704":"# Get all of the model's parameters as a list of tuples.\nparams = list(model.named_parameters())\n\nprint('The BERT model has {:} different named parameters.\\n'.format(len(params)))\n\nprint('==== Embedding Layer ====\\n')\n\nfor p in params[0:5]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n\nprint('\\n==== First Transformer ====\\n')\n\nfor p in params[5:21]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n\nprint('\\n==== Output Layer ====\\n')\n\nfor p in params[-4:]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))","4517719b":"# Note: AdamW is a class from the huggingface library (as opposed to pytorch) \n# I believe the 'W' stands for 'Weight Decay fix\"\noptimizer = AdamW(model.parameters(),\n                  lr = 5e-5, # args.learning_rate - default is 5e-5\n                  eps = 1e-8 # args.adam_epsilon  - default is 1e-8.\n                )","59b159d1":"from transformers import get_linear_schedule_with_warmup\n\n# Number of training epochs. The BERT authors recommend between 2 and 4. \n# We chose to run for 2,I have already seen that the model starts overfitting beyound 2 epochs\nepochs = 2\n\n# Total number of training steps is [number of batches] x [number of epochs]. \n# (Note that this is not the same as the number of training samples).\ntotal_steps = len(train_dataloader) * epochs\n\n# Create the learning rate scheduler.\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps = 0, # Default value in run_glue.py\n                                            num_training_steps = total_steps)","28196f95":"import numpy as np\n\n# Function to calculate the accuracy of our predictions vs labels\ndef flat_accuracy(preds, labels):\n    pred_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return np.sum(pred_flat == labels_flat) \/ len(labels_flat)","7f163efc":"import time\nimport datetime\n\ndef format_time(elapsed):\n    '''\n    Takes a time in seconds and returns a string hh:mm:ss\n    '''\n    # Round to the nearest second.\n    elapsed_rounded = int(round((elapsed)))\n    \n    # Format as hh:mm:ss\n    return str(datetime.timedelta(seconds=elapsed_rounded))\n","aec99ec5":"import random\nimport numpy as np\n\n# This training code is based on the `run_glue.py` script here:\n# https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L128\n\n# Set the seed value all over the place to make this reproducible.\nseed_val = 66\n\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)\n\n# We'll store a number of quantities such as training and validation loss, \n# validation accuracy, and timings.\ntraining_stats = []\n\n# Measure the total training time for the whole run.\ntotal_t0 = time.time()\n\n# For each epoch...\nfor epoch_i in range(0, epochs):\n    \n    # ========================================\n    #               Training\n    # ========================================\n    \n    # Perform one full pass over the training set.\n\n    print(\"\")\n    print('======== Epoch {:} \/ {:} ========'.format(epoch_i + 1, epochs))\n    print('Training...')\n\n    # Measure how long the training epoch takes.\n    t0 = time.time()\n\n    # Reset the total loss for this epoch.\n    total_train_loss = 0\n\n    # Put the model into training mode. Don't be mislead--the call to \n    # `train` just changes the *mode*, it doesn't *perform* the training.\n    # `dropout` and `batchnorm` layers behave differently during training\n    # vs. test (source: https:\/\/stackoverflow.com\/questions\/51433378\/what-does-model-train-do-in-pytorch)\n    model.train()\n\n    # For each batch of training data...\n    for step, batch in enumerate(train_dataloader):\n\n        # Progress update every 40 batches.\n        if step % 40 == 0 and not step == 0:\n            # Calculate elapsed time in minutes.\n            elapsed = format_time(time.time() - t0)\n            \n            # Report progress.\n            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))\n\n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using the \n        # `to` method.\n        #\n        # `batch` contains three pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n\n        # Always clear any previously calculated gradients before performing a\n        # backward pass. PyTorch doesn't do this automatically because \n        # accumulating the gradients is \"convenient while training RNNs\". \n        # (source: https:\/\/stackoverflow.com\/questions\/48001598\/why-do-we-need-to-call-zero-grad-in-pytorch)\n        model.zero_grad()        \n\n        # Perform a forward pass (evaluate the model on this training batch).\n        # The documentation for this `model` function is here: \n        # https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#transformers.BertForSequenceClassification\n        # It returns different numbers of parameters depending on what arguments\n        # are given and what flags are set. For our usage here, it returns\n        # the loss (because we provided labels) and the \"logits\"--the model\n        # outputs prior to activation.\n        loss, logits = model(b_input_ids, \n                             token_type_ids=None, \n                             attention_mask=b_input_mask, \n                             labels=b_labels)\n\n        # Accumulate the training loss over all of the batches so that we can\n        # calculate the average loss at the end. `loss` is a Tensor containing a\n        # single value; the `.item()` function just returns the Python value \n        # from the tensor.\n        total_train_loss += loss.item()\n\n        # Perform a backward pass to calculate the gradients.\n        loss.backward()\n\n        # Clip the norm of the gradients to 1.0.\n        # This is to help prevent the \"exploding gradients\" problem.\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        # Update parameters and take a step using the computed gradient.\n        # The optimizer dictates the \"update rule\"--how the parameters are\n        # modified based on their gradients, the learning rate, etc.\n        optimizer.step()\n\n        # Update the learning rate.\n        scheduler.step()\n\n    # Calculate the average loss over all of the batches.\n    avg_train_loss = total_train_loss \/ len(train_dataloader)            \n    \n    # Measure how long this epoch took.\n    training_time = format_time(time.time() - t0)\n\n    print(\"\")\n    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n    print(\"  Training epcoh took: {:}\".format(training_time))\n        \n    # ========================================\n    #               Validation\n    # ========================================\n    # After the completion of each training epoch, measure our performance on\n    # our validation set.\n\n    print(\"\")\n    print(\"Running Validation...\")\n\n    t0 = time.time()\n\n    # Put the model in evaluation mode--the dropout layers behave differently\n    # during evaluation.\n    model.eval()\n\n    # Tracking variables \n    total_eval_accuracy = 0\n    total_eval_loss = 0\n    nb_eval_steps = 0\n\n    # Evaluate data for one epoch\n    for batch in validation_dataloader:\n        \n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using \n        # the `to` method.\n        #\n        # `batch` contains three pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n        \n        # Tell pytorch not to bother with constructing the compute graph during\n        # the forward pass, since this is only needed for backprop (training).\n        with torch.no_grad():        \n\n            # Forward pass, calculate logit predictions.\n            # token_type_ids is the same as the \"segment ids\", which \n            # differentiates sentence 1 and 2 in 2-sentence tasks.\n            # Get the \"logits\" output by the model. The \"logits\" are the output\n            # values prior to applying an activation function like the softmax.\n            (loss, logits) = model(b_input_ids, \n                                   token_type_ids=None, \n                                   attention_mask=b_input_mask,\n                                   labels=b_labels)\n            \n        # Accumulate the validation loss.\n        total_eval_loss += loss.item()\n\n        # Move logits and labels to CPU\n        logits = logits.detach().cpu().numpy()\n        label_ids = b_labels.to('cpu').numpy()\n\n        # Calculate the accuracy for this batch of test sentences, and\n        # accumulate it over all batches.\n        total_eval_accuracy += flat_accuracy(logits, label_ids)\n        \n\n    # Report the final accuracy for this validation run.\n    avg_val_accuracy = total_eval_accuracy \/ len(validation_dataloader)\n    print(\"  Accuracy: {0:.2f}\".format(avg_val_accuracy))\n\n    # Calculate the average loss over all of the batches.\n    avg_val_loss = total_eval_loss \/ len(validation_dataloader)\n    \n    # Measure how long the validation run took.\n    validation_time = format_time(time.time() - t0)\n    \n    print(\"  Validation Loss: {0:.2f}\".format(avg_val_loss))\n    print(\"  Validation took: {:}\".format(validation_time))\n\n    # Record all statistics from this epoch.\n    training_stats.append(\n        {\n            'epoch': epoch_i + 1,\n            'Training Loss': avg_train_loss,\n            'Valid. Loss': avg_val_loss,\n            'Valid. Accur.': avg_val_accuracy,\n            'Training Time': training_time,\n            'Validation Time': validation_time\n        }\n    )\n\nprint(\"\")\nprint(\"Training complete!\")\n\nprint(\"Total training took {:} (h:mm:ss)\".format(format_time(time.time()-total_t0)))","05c68d11":"import pandas as pd\n\n# Display floats with two decimal places.\npd.set_option('precision', 2)\n\n# Create a DataFrame from our training statistics.\ndf_stats = pd.DataFrame(data=training_stats)\n\n# Use the 'epoch' as the row index.\ndf_stats = df_stats.set_index('epoch')\n\n# A hack to force the column headers to wrap.\n#df = df.style.set_table_styles([dict(selector=\"th\",props=[('max-width', '70px')])])\n\n# Display the table.\ndf_stats","20eb9ab6":"from google.colab import files\nfrom io import BytesIO\nfrom PIL import Image\n\nuploaded = files.upload()\nim = Image.open(BytesIO(uploaded['df_stats.JPG']))\nimport matplotlib.pyplot as plt\n\nplt.imshow(im)\nplt.show()","99f16c4f":"import matplotlib.pyplot as plt\n% matplotlib inline\n\nimport seaborn as sns\n\n# Use plot styling from seaborn.\nsns.set(style='darkgrid')\n\n# Increase the plot size and font size.\nsns.set(font_scale=1.5)\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\n# Plot the learning curve.\nplt.plot(df_stats['Training Loss'], 'b-o', label=\"Training\")\nplt.plot(df_stats['Valid. Loss'], 'g-o', label=\"Validation\")\n\n# Label the plot.\nplt.title(\"Training & Validation Loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.xticks([1, 2, 3, 4])\n\nplt.show()","c1d6905f":"from google.colab import files\nfrom io import BytesIO\nfrom PIL import Image\n\nuploaded = files.upload()\nim = Image.open(BytesIO(uploaded['epochs.png']))\nimport matplotlib.pyplot as plt\n\nplt.imshow(im)\nplt.show()","b0792a00":"import pandas as pd\n\n# Load the dataset into a pandas dataframe.\ndf = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv')\n\n# preprocessing text\ndf['text_cleaned'] = list(map(lambda x: tweet_cleaner(x),df['text']))\n\n# Report the number of sentences.\nprint('Number of test sentences: {:,}\\n'.format(df.shape[0]))\n\n# Create sentence and label lists\nsentences = df.text_cleaned.values\n# labels = df.target.values\n\n# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\nattention_masks = []\n\n# For every sentence...\nfor sent in sentences:\n    # `encode_plus` will:\n    #   (1) Tokenize the sentence.\n    #   (2) Prepend the `[CLS]` token to the start.\n    #   (3) Append the `[SEP]` token to the end.\n    #   (4) Map tokens to their IDs.\n    #   (5) Pad or truncate the sentence to `max_length`\n    #   (6) Create attention masks for [PAD] tokens.\n    encoded_dict = tokenizer.encode_plus(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                        max_length = 75,           # Pad & truncate all sentences.\n                        pad_to_max_length = True,\n                        return_attention_mask = True,   # Construct attn. masks.\n                        return_tensors = 'pt',     # Return pytorch tensors.\n                   )\n    \n    # Add the encoded sentence to the list.    \n    input_ids.append(encoded_dict['input_ids'])\n    \n    # And its attention mask (simply differentiates padding from non-padding).\n    attention_masks.append(encoded_dict['attention_mask'])\n\n# Convert the lists into tensors.\ninput_ids = torch.cat(input_ids, dim=0)\nattention_masks = torch.cat(attention_masks, dim=0)\n# labels = torch.tensor(labels)\n\n# Set the batch size.  \nbatch_size = 32  \n\n# Create the DataLoader.\n# prediction_data = TensorDataset(input_ids, attention_masks, labels)\nprediction_data = TensorDataset(input_ids, attention_masks)\nprediction_sampler = SequentialSampler(prediction_data)\nprediction_dataloader = DataLoader(prediction_data, sampler=prediction_sampler, batch_size=batch_size)","170dfd3b":"# Prediction on test set\n\nprint('Predicting labels for {:,} test sentences...'.format(len(input_ids)))\n\n# Put model in evaluation mode\nmodel.eval()\n\n# Tracking variables \npredictions , true_labels = [], []\n\n# Predict \nfor batch in prediction_dataloader:\n  # Add batch to GPU\n  batch = tuple(t.to(device) for t in batch)\n  \n  # Unpack the inputs from our dataloader\n  # b_input_ids, b_input_mask, b_labels = batch\n  b_input_ids, b_input_mask = batch\n  \n  # Telling the model not to compute or store gradients, saving memory and \n  # speeding up prediction\n  with torch.no_grad():\n      # Forward pass, calculate logit predictions\n      outputs = model(b_input_ids, token_type_ids=None, \n                      attention_mask=b_input_mask)\n\n  logits = outputs[0]\n\n  # Move logits and labels to CPU\n  logits = logits.detach().cpu().numpy()\n  # label_ids = b_labels.to('cpu').numpy()\n  \n  # Store predictions and true labels\n  predictions.append(logits)\n  # true_labels.append(label_ids)\n\nprint('    DONE.')","e4b2d83a":"# print('Positive samples: %d of %d (%.2f%%)' % (df.label.sum(), len(df.label), (df.label.sum() \/ len(df.label) * 100.0)))","3af1dfd0":"# from sklearn.metrics import matthews_corrcoef\n\n# matthews_set = []\n\n# # Evaluate each test batch using Matthew's correlation coefficient\n# print('Calculating Matthews Corr. Coef. for each batch...')\n\n# # For each input batch...\n# for i in range(len(true_labels)):\n  \n#   # The predictions for this batch are a 2-column ndarray (one column for \"0\" \n#   # and one column for \"1\"). Pick the label with the highest value and turn this\n#   # in to a list of 0s and 1s.\n#   pred_labels_i = np.argmax(predictions[i], axis=1).flatten()\n  \n#   # Calculate and store the coef for this batch.  \n#   matthews = matthews_corrcoef(true_labels[i], pred_labels_i)                \n#   matthews_set.append(matthews)","eb35feb9":"# # Create a barplot showing the MCC score for each batch of test samples.\n# ax = sns.barplot(x=list(range(len(matthews_set))), y=matthews_set, ci=None)\n\n# plt.title('MCC Score per Batch')\n# plt.ylabel('MCC Score (-1 to +1)')\n# plt.xlabel('Batch #')\n\n# plt.show()","7f1b2a36":"# # Combine the results across all batches. \nflat_predictions = np.concatenate(predictions, axis=0)\n\n# # For each sample, pick the label (0 or 1) with the higher score.\nflat_predictions = np.argmax(flat_predictions, axis=1).flatten()\n\n# adding to the main datframe\ndf['target'] = flat_predictions\n\n# # Combine the correct labels for each batch into a single list.\n# flat_true_labels = np.concatenate(true_labels, axis=0)\n\n# # Calculate the MCC\n# mcc = matthews_corrcoef(flat_true_labels, flat_predictions)\n\n# print('Total MCC: %.3f' % mcc)","6ef17261":"# downloading file to local\n# df[['id','target']].to_csv('submission.csv',index=False)","0d907fe3":"import os\n\n# Saving best-practices: if you use defaults names for the model, you can reload it using from_pretrained()\n\noutput_dir = '.\/tweet_classification_model_save\/'\n\n# Create output directory if needed\nif not os.path.exists(output_dir):\n    os.makedirs(output_dir)\n\nprint(\"Saving model to %s\" % output_dir)\n\n# Save a trained model, configuration and tokenizer using `save_pretrained()`.\n# They can then be reloaded using `from_pretrained()`\nmodel_to_save = model.module if hasattr(model, 'module') else model  # Take care of distributed\/parallel training\nmodel_to_save.save_pretrained(output_dir)\ntokenizer.save_pretrained(output_dir)\n\n# Good practice: save your training arguments together with the trained model\n# torch.save(args, os.path.join(output_dir, 'training_args.bin'))\n","1292c3d2":"# !ls -l --block-size=K .\/tweet_classification_model_save\/","397cdd41":"# !ls -l --block-size=M .\/model_save\/pytorch_model.bin","89c2bbab":"# # Mount Google Drive to this Notebook instance.\n# from google.colab import drive\n#     drive.mount('\/content\/drive')","d546491e":"# # Copy the model files to a directory in your Google Drive.\n# !cp -r .\/model_save\/ \".\/drive\/Shared drives\/ChrisMcCormick.AI\/Blog Posts\/BERT Fine-Tuning\/\"","1bf4b429":"# # Load a trained model and vocabulary that you have fine-tuned\n# model = model_class.from_pretrained(output_dir)\n# tokenizer = tokenizer_class.from_pretrained(output_dir)\n\n# # Copy the model to the GPU.\n# model.to(device)","e08cf484":"# # This code is taken from:\n# # https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L102\n\n# # Don't apply weight decay to any parameters whose names include these tokens.\n# # (Here, the BERT doesn't have `gamma` or `beta` parameters, only `bias` terms)\n# no_decay = ['bias', 'LayerNorm.weight']\n\n# # Separate the `weight` parameters from the `bias` parameters. \n# # - For the `weight` parameters, this specifies a 'weight_decay_rate' of 0.01. \n# # - For the `bias` parameters, the 'weight_decay_rate' is 0.0. \n# optimizer_grouped_parameters = [\n#     # Filter for all parameters which *don't* include 'bias', 'gamma', 'beta'.\n#     {'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)],\n#      'weight_decay_rate': 0.1},\n    \n#     # Filter for parameters which *do* include those.\n#     {'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)],\n#      'weight_decay_rate': 0.0}\n# ]\n\n# # Note - `optimizer_grouped_parameters` only includes the parameter values, not \n# # the names.","d28c4b9e":"# 3. Tokenization & Input Formatting\n\nIn this section, we'll transform our dataset into the format that BERT can be trained on.","6e2670a1":"# 1. Setup","7abc0bdf":"\n## Advantages of Fine-Tuning\n","b29e488a":"The huggingface example includes the following code block for enabling weight decay, but the default decay rate is \"0.0\", so I moved this to the appendix.\n\nThis block essentially tells the optimizer to not apply weight decay to the bias terms (e.g., $ b $ in the equation $ y = Wx + b $ ). Weight decay is a form of regularization--after calculating the gradients, we multiply them by, e.g., 0.99.","db32eef4":"For this task, we first want to modify the pre-trained BERT model to give outputs for classification, and then we want to continue training the model on our dataset until that the entire model, end-to-end, is well-suited for our task. \n\nHere is the current list of classes for which a BERT is used for fine tuning:\n* BertModel\n* BertForPreTraining\n* BertForMaskedLM\n* BertForNextSentencePrediction\n* **BertForSequenceClassification** - The one we'll use.\n* BertForTokenClassification\n* BertForQuestionAnswering\n","3ce68e9f":"## 2.2. TrainData","ee511551":"Notice that, while the the training loss is going down with each epoch, the validation loss is increasing! This suggests that we are training our model too long, and it's over-fitting on the training data. ","fed8b51b":"We're ready to kick off the training!","d02a7ea2":"## 2.3 Pre-processing Tweets\n","07b8f011":"In order for torch to use the GPU, we need to identify and specify the GPU as the device. Later, in our training loop, we will load data onto the device. ","97c1d797":"\n## What is BERT?\n\nBERT, which stands for Bidirectional Encoder Representations from Transformers. Unlike other  language representation models, BERT is designed to pretrain deep bidirectional representations from unlabeled text by jointly conditioning on both left and right context in all layers. As a result, the pre-trained BERT model can be finetuned with just one additional output layer to create state-of-the-art models for a wide range of tasks, such as sentence clasification and question answering, without substantial task specific architecture modifications. \n\nRef: [BERT: Pre-training of Deep Bidirectional Transformers for\nLanguage Understanding paper](https:\/\/arxiv.org\/abs\/1810.04805)\n","2d117457":"### Sentence Length & Attention Mask\n\n","9f0eb002":"The sentences in our dataset obviously have varying lengths, so how does BERT handle this?\n\nBERT has two constraints:\n1. All sentences must be padded or truncated to a single, fixed length.\n2. The maximum sentence length is 512 tokens.\n\nPadding is done with a special `[PAD]` token, which is at index 0 in the BERT vocabulary. The below illustration demonstrates padding out to a \"MAX_LEN\" of 8 tokens.\n\n<img src=\"http:\/\/www.mccormickml.com\/assets\/BERT\/padding_and_mask.png\" width=\"600\">\n\nThe \"Attention Mask\" is simply an array of 1s and 0s indicating which tokens are padding and which aren't (seems kind of redundant, doesn't it?!). This mask tells the \"Self-Attention\" mechanism in BERT not to incorporate these PAD tokens into its interpretation of the sentence.","7e4e94c5":"## 4.3. Training Loop","11623872":"## A1. Saving & Loading Fine-Tuned Model\n\nThis first cell (taken from `run_glue.py` [here](https:\/\/github.com\/huggingface\/transformers\/blob\/35ff345fc9df9e777b27903f11fa213e4052595b\/examples\/run_glue.py#L495)) writes the model and tokenizer out to disk.","a71b1274":"## 3.3. Tokenize Dataset","ee928aba":"## 3.4. Training & Validation Split\n","d4b94b84":"# BERT Fine-Tuning with PyTorch\n\nBy Jaskaran Singh","3da0b8f1":"Let's apply the tokenizer to one sentence just to see the output.\n","04346632":"The largest file is the model weights, at around 418 megabytes.","860f7613":"\n## Intention\n\nTransfer learning models like ELMO, OpenAI's Open-GPT, and Google's BERT have broken multiple benchmarks with minimal task-specific fine-tuning. I will be attempting differnet transfer learning models to see which one performs better in a series of notebooks. In this notebook I will be showing you how we can use BERT for tweet classification\n","dc4dc812":"Define a helper function for calculating accuracy.","dbb3d023":"# Introduction","2d6701fd":"\nLet's get started!","713cce95":"## 3.2. Required Formatting","41d7e7a0":"\n\nWe'll be using [BertForSequenceClassification](https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#bertforsequenceclassification). This is the normal BERT model with an added single linear layer on top for classification that we will use as a sentence classifier. As we feed input data, the entire pre-trained BERT model and the additional untrained classification layer is trained on our specific task. \n","c3dd319d":"# Appendix\n","54c21fe9":"Just in case there are some longer test sentences, I'll set the maximum length to 75.\n","3c4b944b":"# 2. Loading Data","13d5838a":"The final score will be based on the entire test set, but let's take a look at the scores on the individual batches to get a sense of the variability in the metric between batches. \n\nEach batch has 32 sentences in it, except the last batch.\n","100efada":"The following functions will load the model back from disk.","01d82627":"# 4. Train Our Classification Model","af6ab737":"# 5. Performance On Test Set","a05ee289":"Below is our training loop. There's a lot going on, but fundamentally for each pass in our loop we have a trianing phase and a validation phase. \n\n**Training:**\n- Unpack our data inputs and labels\n- Load data onto the GPU for acceleration\n- Clear out the gradients calculated in the previous pass. \n    - In pytorch the gradients accumulate by default (useful for things like RNNs) unless you explicitly clear them out.\n- Forward pass (feed input data through the network)\n- Backward pass (backpropagation)\n- Tell the network to update parameters with optimizer.step()\n- Track variables for monitoring progress\n\n**Evalution:**\n- Unpack our data inputs and labels\n- Load data onto the GPU for acceleration\n- Forward pass (feed input data through the network)\n- Compute loss on our validation data and track variables for monitoring progress","23da9174":"To save your model across Colab Notebook sessions, download it to your local machine, or ideally copy it to your Google Drive.","6df509af":"The two properties we actually care about are the the `tweets(text)` and its `target`, which is referred to as the \"Real Disater or not\" (0=Not Real, 1=Real).","8b52a9c2":"Now that we have our model loaded we need to grab the training hyperparameters from within the stored model.\n\nFor the purposes of fine-tuning, the authors recommend choosing from the following values (from Appendix A.3 of the [BERT paper](https:\/\/arxiv.org\/pdf\/1810.04805.pdf)):\n\n>- **Batch size:** 16, 32  \n- **Learning rate (Adam):** 5e-5, 3e-5, 2e-5  \n- **Number of epochs:** 2, 3, 4 \n\nWe chose:\n* Batch size: 32 (set when creating our DataLoaders)\n* Learning rate: 2e-5\n* Epochs: 4 (we'll see that this is probably too many...)\n\nThe epsilon parameter `eps = 1e-8` is \"a very small number to prevent any division by zero in the implementation\" (from [here](https:\/\/machinelearningmastery.com\/adam-optimization-algorithm-for-deep-learning\/)).","8f081e6c":"## 4.1. BertForSequenceClassification","6056b743":"Browsing all of the model's parameters by name here.\n\nIn the below cell, we have names and dimensions of the weights for:\n\n1. The embedding layer.\n2. The first of the twelve transformers.\n3. The output layer.\n\n\n","9cfa9b9f":"If we had labels indicating a disater\/not disaster tweet then we can use this piece of code to test our model as well. I am commenting those codes out","74a018c5":"\nTo feed our text to BERT, it must be split into tokens, and then these tokens must be mapped to their index in the tokenizer vocabulary.\n\nThe tokenization must be performed by the tokenizer included with BERT--the below cell will download this for us. We'll be using the \"uncased\" version here.\n","8341d1e9":"## 5.2. Evaluate on Test Set\n","0f302d36":"Accuracy is measured using the \"[Matthews correlation coefficient](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.matthews_corrcoef.html)\" (MCC).\n\nWe use MCC here because the classes are imbalanced:\n","91739121":"### 5.1. Data Preparation\n","9bab0a49":"## Acknowledgement\n\n*   A big shout out to Chris McCormick for sharing his work publicly. Most of the codes you see in this notebook are taken from his notebook\n\n*   A big thanks to to the Hugging Face team for such a wonderful package","b3e10ea0":"The transformers library provides a helpful `encode` function which will handle most of the parsing and data prep steps for us.\n\nBefore we are ready to encode our text, though, we need to decide on a **maximum sentence length** for padding \/ truncating to.\n\nThe below cell will perform one tokenization pass of the dataset in order to measure the maximum sentence length.","1b456cc9":"In this notebook I'll use BERT with the huggingface PyTorch library to fine-tune a model to get near state of the art performance in Tweet Disaster Classification.\n\nIn order the build this notebook references were taken from a blog post [here](http:\/\/mccormickml.com\/2019\/07\/22\/BERT-fine-tuning\/) and a Colab Notebook [here](https:\/\/colab.research.google.com\/drive\/1pTuQhug6Dhl9XalKB0zUGf4FIdYFlpcX). ","5debe150":"\nNext, let's install the [transformers](https:\/\/github.com\/huggingface\/transformers) package from Hugging Face which will give us a pytorch interface for working with BERT. This package strikes a nice balance between the high-level APIs (which are easy to use but don't provide insight into how things work) and tensorflow code (which contains lots of unnecessary details).","311cfa6c":"This post demonstrates that with a pre-trained BERT model you can quickly and effectively create a high quality model with minimal effort and training time using the pytorch interface. I would soon be posting a notebook with a different transformer model to see if the performance improves or not","4bb21a31":"OK, let's load BERT! There are a few different pre-trained BERT models available. \"bert-base-uncased\" means the version that has only lowercase letters (\"uncased\") and is the smaller version of the two (\"base\" vs \"large\").\n\nThe documentation for `from_pretrained` can be found [here](https:\/\/huggingface.co\/transformers\/v2.2.0\/main_classes\/model.html#transformers.PreTrainedModel.from_pretrained), with the additional parameters defined [here](https:\/\/huggingface.co\/transformers\/v2.2.0\/main_classes\/configuration.html#transformers.PretrainedConfig).","9357fb55":"Now we're ready to perform the real tokenization.\n\nThe `tokenizer.encode_plus` function combines multiple steps for us:\n\n1. Split the sentence into tokens.\n2. Add the special `[CLS]` and `[SEP]` tokens.\n3. Map the tokens to their IDs.\n4. Pad or truncate all sentences to the same length.\n5. Create the attention masks which explicitly differentiate real tokens from `[PAD]` tokens.\n\nThe first four features are in `tokenizer.encode`, but I'm using `tokenizer.encode_plus` to get the fifth item (attention masks). Documentation is [here](https:\/\/huggingface.co\/transformers\/main_classes\/tokenizer.html?highlight=encode_plus#transformers.PreTrainedTokenizer.encode_plus).\n","c91b9783":"\nWe'll need to apply all of the same steps that we did for the training data to prepare our test data set.","da175991":"Let's check out the file sizes, out of curiosity.","1b11e60e":"## 1.1. Using GPU for Training\n","73fe8647":"cls forest fire near la ron_ _ge s_ _ask . canada SEP","73110177":"The above image shows how the model starts overfitting significantly after 2nd epoch","1ecd1115":"When we actually convert all of our sentences, we'll use the `tokenize.encode` function to handle both steps, rather than calling `tokenize` and `convert_tokens_to_ids` separately. \n\nBefore we can do that, though, we need to talk about some of BERT's formatting requirements.","db0eef14":"We'll also create an iterator for our dataset using the torch DataLoader class. This helps save on memory during training because, unlike a for loop, with an iterator the entire dataset does not need to be loaded into memory.","ba57f72d":"We are required to:\n1. Add special tokens to the start and end of each sentence.\n2. Pad & truncate all sentences to a single constant length.\n3. Explicitly differentiate real tokens from padding tokens with the \"attention mask\".\n\n","399703dd":"\nWe will use BERT to train a text classifier. Specifically, we will take the pre-trained BERT model, add an untrained layer of neurons on the end, and train the new model for our classification task. How is this better than training any deep learning model like CNN, BiLSTMS, RNNs, etc from scratch.\n\n1. **Quicker Development**\n\n    * First, the pre-trained BERT model weights already encode a lot of information about our language. As a result, it takes much less time to train our fine-tuned model - it is as if we have already trained the bottom layers of our network extensively and only need to gently tune them while using their output as features for our classification task. In fact, the authors recommend only 2-4 epochs of training for fine-tuning BERT on a specific NLP task (compared to the hundreds of GPU hours needed to train the original BERT model or a LSTM from scratch!). \n\n2. **Less Data**\n\n    * In addition and perhaps just as important, because of the pre-trained weights this method allows us to fine-tune our task on a much smaller dataset than would be required in a model that is built from scratch. A major drawback of NLP models built from scratch is that we often need a prohibitively large dataset in order to train our network to reasonable accuracy, meaning a lot of time and energy had to be put into dataset creation. By fine-tuning BERT, we are now able to get away with training a model to good performance on a much smaller amount of training data.\n\n3. **Better Results**\n\n    * Finally, this simple fine-tuning procedure (typically adding one fully-connected layer on top of BERT and training for a few epochs) was shown to achieve state of the art results with minimal task-specific adjustments for a wide variety of tasks: classification, language inference, semantic similarity, question answering, etc. Rather than implementing custom and sometimes-obscure architetures shown to work well on a specific task, simply fine-tuning BERT is shown to be a better (or at least equal) alternative.\n","5a50f0a3":"## A.2. Weight Decay\n\n","5e975a0e":"## 3.1. BERT Tokenizer","6e48c113":"### Special Tokens\n","dbe875a0":"Here we would see how this model can be used on the unseen data","115078e3":"Now that our input data is properly formatted, it's time to fine tune the BERT model. ","d1420101":"**`[CLS]`**\n\nFor classification tasks, we must prepend the special `[CLS]` token to the beginning of every sentence.\n\nThis token has special significance. BERT consists of 12 Transformer layers. Each transformer takes in a list of token embeddings, and produces the same number of embeddings on the output (but with the feature values changed, of course!).\n\n![Illustration of CLS token purpose](http:\/\/www.mccormickml.com\/assets\/BERT\/CLS_token_500x606.png)\n\nOn the output of the final (12th) transformer, *only the first embedding (corresponding to the [CLS] token) is used by the classifier*.\n\n>  \"The first token of every sequence is always a special classification token (`[CLS]`). The final hidden state\ncorresponding to this token is used as the aggregate sequence representation for classification\ntasks.\" (from the [BERT paper](https:\/\/arxiv.org\/pdf\/1810.04805.pdf))\n\nYou might think to try some pooling strategy over the final embeddings, but this isn't necessary. Because BERT is trained to only use this [CLS] token for classification, we know that the model has been motivated to encode everything it needs for the classification step into that single 768-value embedding vector. It's already done the pooling for us!\n\n","d15259b1":"Let's view the summary of the training process.","02c2e5f4":"# Conclusion","740521a9":"Now we'll combine the results for all of the batches and calculate our final MCC score.","2a423800":"Helper function for formatting elapsed times as `hh:mm:ss`\n","5dbc850d":"The above image shows how the validation loss increases as we moved from 1 to 4 epochs","5b5bce0e":"\n\nLet's extract the sentences and labels of our training set as numpy ndarrays.","1a1ff6c3":"Divide up our training set to use 90% for training and 10% for validation.","99924c97":"## 4.2. Optimizer & Learning Rate Scheduler","a9736d81":"## 1.2. Installing the Hugging Face Library\n","65dc3338":"\n**`[SEP]`**\n\nAt the end of every sentence, we need to append the special `[SEP]` token. \n\nThis token is an artifact of two-sentence tasks, where BERT is given two separate sentences and asked to determine something (e.g., can the answer to the question in sentence A be found in sentence B?). \n\nI am not certain yet why the token is still required when we have only single-sentence input, but it is!\n"}}