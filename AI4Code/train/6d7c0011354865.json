{"cell_type":{"9847922f":"code","5fac7411":"code","ee65687b":"code","47a44679":"code","b5c7580c":"code","2f47d8b4":"code","a7c6955b":"code","0bd4629b":"code","a76d8445":"code","7b0c452d":"code","1a8be3a3":"code","335d385b":"code","0c6ac49f":"code","6446d36a":"code","7608bf0b":"code","eddd5ed7":"code","72666dee":"code","d70b2554":"code","4b848e43":"code","f1563793":"code","2a1d0599":"code","0ca66aa4":"code","0f8c3155":"code","f621446e":"code","55948270":"code","1336a64a":"code","8d30ca6d":"code","8d2f570b":"code","70cde881":"code","4ce2806f":"code","af95824a":"code","8e66a3f5":"code","bc7fcd01":"code","7b7d3eda":"code","b65383a3":"code","d142ec8b":"code","b07a11c2":"code","eae440a6":"code","44af16cb":"code","257fd774":"code","a3fe86df":"code","18481dd7":"code","0b4dda43":"code","50959928":"markdown","b81c1e6d":"markdown","024acee9":"markdown","cc74c4cc":"markdown","f0b4c4f1":"markdown","5c4130fa":"markdown","5a9b1158":"markdown","84e692e4":"markdown","756df67b":"markdown"},"source":{"9847922f":"# Author : Sagar Bapodara (PS : This is my first competition submission)","5fac7411":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nprint('Dependencies Imported')","ee65687b":"df = pd.read_csv('..\/input\/titanic\/train.csv')","47a44679":"df.head(10)","b5c7580c":"#dropping less correlated columns \ndf.drop(['PassengerId','Name','Ticket','Cabin','Embarked','SibSp','Parch'], axis=1, inplace=True )","2f47d8b4":"df.head(10)","a7c6955b":"#checking for any missing values\ndf.isnull().sum()","0bd4629b":"df.describe()","a76d8445":"#replacing missing values in 'Age' with mean values of 'Age' Column\ndf['Age'].fillna(df['Age'].mean(),inplace=True)","7b0c452d":"l_sex_dummies=pd.get_dummies(df['Sex'],drop_first=True)","1a8be3a3":"df= pd.concat([df,l_sex_dummies],axis=1)","335d385b":"df.head(10)","0c6ac49f":"df.drop(['Sex'], axis=1, inplace=True)","6446d36a":"df.head(10)","7608bf0b":"from sklearn.preprocessing import StandardScaler\nsd = StandardScaler()","eddd5ed7":"feature_scale = ['Age','Fare']\ndf[feature_scale] = sd.fit_transform(df[feature_scale])","72666dee":"df.head(5)","d70b2554":"X=df.drop(['Survived'],axis=1)\ny=df['Survived']","4b848e43":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier","f1563793":"#defining various model parameters\nmodel_param = {\n    'DecisionTreeClassifier':{\n        'model':DecisionTreeClassifier(),\n        'param':{\n            'criterion': ['gini','entropy']\n        }\n    },\n        'KNeighborsClassifier':{\n        'model':KNeighborsClassifier(),\n        'param':{\n            'n_neighbors': [5,10,15,20,25,30,35]\n        }\n    },\n        'SVC':{\n        'model':SVC(),\n        'param':{\n            'kernel':['rbf','linear','poly','sigmoid'],\n            'C': [0.1, 1, 10, 100]\n         \n        }\n    },\n    \n    'RandomForestClassifier':{\n        'model':RandomForestClassifier(),\n        'param':{\n            'n_estimators': [100],\n            'criterion': ['gini','entropy'],\n            'max_features' : ['auto', 'sqrt', 'log2']\n        }\n    }\n}","2a1d0599":"scores =[]\nfor model_name, mp in model_param.items():\n    model_selection = GridSearchCV(estimator=mp['model'],param_grid=mp['param'],cv=5,return_train_score=False)\n    model_selection.fit(X,y)\n    scores.append({\n        'model': model_name,\n        'best_score': model_selection.best_score_,\n        'best_params': model_selection.best_params_\n    })","0ca66aa4":"df_model_score = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndf_model_score","0f8c3155":"model_svc = SVC(C= 100,kernel='rbf')","f621446e":"model_svc.fit(X, y)","55948270":"df2 = pd.read_csv('..\/input\/titanic\/test.csv')","1336a64a":"df2.head(5)","8d30ca6d":"df3=df2.drop(['PassengerId','Name','Ticket','Cabin','Embarked','SibSp','Parch'], axis=1 )","8d2f570b":"df3.isnull().sum()","70cde881":"#filling the missing values in test dataset\ndf3['Age'].fillna(df3['Age'].mean(),inplace=True)\ndf3['Fare'].fillna(df3['Fare'].mean(),inplace=True)","4ce2806f":"l_sex_dummies=pd.get_dummies(df3['Sex'],drop_first=True)\ndf3= pd.concat([df3,l_sex_dummies],axis=1)\ndf3.drop(['Sex'], axis=1, inplace=True )","af95824a":"df3.head()","8e66a3f5":"df3[feature_scale] = sd.fit_transform(df3[feature_scale])","bc7fcd01":"df3.head(5)","7b7d3eda":"y_predicted = model_svc.predict(df3)","b65383a3":"submission = pd.DataFrame({\n        \"PassengerId\": df2['PassengerId'],\n        \"Survived\": y_predicted\n    })","d142ec8b":"submission","b07a11c2":"submission.to_csv('titanic_submission.csv', index=False)","eae440a6":"model_randomforest = RandomForestClassifier(n_estimators = 100, criterion='entropy',max_features='log2')","44af16cb":"model_randomforest.fit(X, y)","257fd774":"y_predicted_randomforest = model_randomforest.predict(df3)","a3fe86df":"submission = pd.DataFrame({\n        \"PassengerId\": df2['PassengerId'],\n        \"Survived\": y_predicted\n    })","18481dd7":"submission","0b4dda43":"submission.to_csv('titanic_submission_rf.csv', index=False)","50959928":"# Importing Dependencies","b81c1e6d":"# Random Forest Model","024acee9":"# Goal : Predict if someone survived the Titanic Shipwreck or not","cc74c4cc":"# Implementing ML Model","f0b4c4f1":"# Feature Engineering","5c4130fa":"# SVC Model","5a9b1158":"#### Note : Implementing Both SVC and Random Forest","84e692e4":"# Basic Data Analysis","756df67b":"## If you found this useful, kindly upvote and comment your views :) "}}