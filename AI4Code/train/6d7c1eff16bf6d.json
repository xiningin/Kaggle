{"cell_type":{"1462e607":"code","2476ad2a":"code","4dc0c13e":"code","fbc9b543":"code","0c55b2f2":"code","817398ff":"code","fe9ec424":"code","06426b3a":"code","5b19435d":"code","8ad04ff7":"code","dc31e847":"code","c5e6192c":"code","15178694":"code","82bafc31":"code","ff1a56ec":"code","a7ee434d":"code","5892567f":"code","f585d064":"code","6af72d85":"code","6160d3ed":"code","bd78877e":"code","8ae4f567":"code","4528b2d1":"code","1bf7c178":"code","eb5c8be4":"code","76cf2c3d":"code","0c115d72":"code","e2730537":"code","d37638ec":"code","a05f09fb":"code","6c06cad8":"code","a2af8442":"code","847ebfc2":"code","08386b06":"code","87ec6d64":"code","114938b8":"code","b4558b84":"code","f5c11356":"code","938c34fa":"code","d630a8e7":"code","a2fdf641":"code","8d689e03":"code","526bef3c":"code","d2be35ec":"code","b61e810e":"markdown","26047c7f":"markdown","eefa700e":"markdown","b031f4ba":"markdown","ae875aa1":"markdown","22f2f8a3":"markdown","6df61334":"markdown","37b624e6":"markdown","b86eac5b":"markdown","13ccd68c":"markdown","06a14d20":"markdown","ba56c3bd":"markdown","e3979d60":"markdown","35bb9b99":"markdown","bba82c68":"markdown","4e9a7cc4":"markdown","b03b171c":"markdown","54bb100f":"markdown","5e89bfeb":"markdown","d9852838":"markdown","5955ccce":"markdown","210576e4":"markdown","41f3d4a5":"markdown","fa8576d9":"markdown","c48e46bf":"markdown","2468e7e6":"markdown","d709d8f5":"markdown","39af7f08":"markdown","b0670f7d":"markdown","195cf6ba":"markdown","3a0c8e69":"markdown","90f5599c":"markdown","3775273c":"markdown","127be680":"markdown","9a1f283e":"markdown","90a0fb8e":"markdown","2e9b96b6":"markdown","407782f6":"markdown","9f2b97f5":"markdown","baeb4274":"markdown","c7159c98":"markdown","410ebb6c":"markdown","f53cef6a":"markdown"},"source":{"1462e607":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\n%matplotlib inline","2476ad2a":"df = pd.read_csv('..\/input\/absenteeism-at-work-an-uci-dataset\/Absenteeism_at_work.csv')\ndf.columns","4dc0c13e":"df.head()","fbc9b543":"df.describe()","0c55b2f2":"df.info()","817398ff":"cat_cols = ['ID','Reason for absence', 'Month of absence', \n            'Day of the week', 'Seasons', 'Disciplinary failure', \n            'Education', 'Son', 'Social drinker', 'Social smoker',\n            'Pet']\nfor col in cat_cols:\n    df[col] = df[col].astype('category')","fe9ec424":"df.info()","06426b3a":"sns.set_palette(\"GnBu_d\")\nplt.title(\"Missingess Map\")\nplt.rcParams['figure.figsize'] = (8.0, 5.0) #Adjust values as necessary\nsns.heatmap(df.isnull(), cbar=False)","5b19435d":"df.info()","8ad04ff7":"pd.unique(df['Month of absence'])","dc31e847":"df[df['Month of absence'] == 0]","c5e6192c":"df = df[df['Month of absence'] != 0]\ndf.info()","15178694":"df[(df['Absenteeism time in hours'] == 0)].head()","82bafc31":"df[(df['Absenteeism time in hours'] == 0) & (df['Disciplinary failure'] == 0)]","ff1a56ec":"df.groupby(\"Reason for absence\").mean()[26:27]","a7ee434d":"df.loc[(df['Reason for absence'] == 27) & (df['Absenteeism time in hours'] == 0), 'Absenteeism time in hours'] = 3\ndf.iloc[34]['Absenteeism time in hours']","5892567f":"fig, axs = plt.subplots(ncols = 3,nrows = 1, figsize = (36,8.5))\nfor i,j in enumerate(cat_cols[0:3]):\n    sns.countplot(y = j, data = df, ax = axs[i],  \n                  orient = \"h\", \n                  order = df[j].value_counts().index, \n                  palette = \"mako\")\nfig.suptitle(\"Total Count of Filed Absences\", fontsize=30)\n\nfig, axs = plt.subplots(ncols = 8,nrows = 1, figsize = (36,4))\nfor i,j in enumerate(cat_cols[3:11]):\n    sns.countplot(y = j, data = df, ax = axs[i],  \n                  orient = \"h\", order = df[j].value_counts().index, \n                  palette = \"mako\")","f585d064":"from IPython.display import display_html \n\ndef styler(feature):\n    counts = df.groupby([feature], as_index = False).count()[[feature,'Absenteeism time in hours']].sort_values('Absenteeism time in hours', ascending = False)\n    counts.columns = [feature, 'Total Count of Hours']\n    style = counts.head(5).style.set_table_attributes(\"style='display:inline'\").set_caption(\"Top 5 \" + str(feature) + \"s -Counts\" ).hide_index()\n    return style\n\ndisplay_html(styler(\"ID\")._repr_html_() + styler(\"Reason for absence\")._repr_html_() + styler(\"Month of absence\")._repr_html_(), raw=True)","6af72d85":"fig, axs = plt.subplots(ncols = 3,nrows = 1, figsize = (36,8.5))\nfor i,j in enumerate(cat_cols[0:3]):\n    df_sum = df.groupby([j],as_index = False).sum()\n    sns.barplot(y = j, x = \"Absenteeism time in hours\", ax = axs[i],\n                data = df_sum,orient = \"h\", \n                order=df_sum.sort_values('Absenteeism time in hours',ascending = False)[j],\n                palette = \"mako\")\nfig.suptitle(\"Total Absenteeism time in hours\", fontsize=30)\n\nfig, axs = plt.subplots(ncols = 8,nrows = 1, figsize = (36,5))\nfor i,j in enumerate(cat_cols[3:11]):\n    df_sum = df.groupby([j],as_index = False).sum()\n    sns.barplot(y = j, x = \"Absenteeism time in hours\", ax = axs[i],\n                data = df_sum,orient = \"h\", \n                order=df_sum.sort_values('Absenteeism time in hours',ascending = False)[j],\n                palette = \"mako\")","6160d3ed":"from IPython.display import display_html \n\ndef styler(feature):\n    counts = df.groupby([feature], as_index = False).sum()[[feature,'Absenteeism time in hours']].sort_values('Absenteeism time in hours', ascending = False)\n    counts.columns = [feature, 'Sum of Hours']\n    style = counts.head(5).style.set_table_attributes(\"style='display:inline'\").set_caption(\"Top 5 \" + str(feature) + \"s - Counts\" ).hide_index()\n    return style\n\ndisplay_html(styler(\"ID\")._repr_html_() + styler(\"Reason for absence\")._repr_html_() + styler(\"Month of absence\")._repr_html_(), raw=True)","bd78877e":"fig, axs = plt.subplots(ncols = 3,nrows = 1, figsize = (36,8.5))\nfor i,j in enumerate(cat_cols[0:3]):\n    df_sum = df.groupby([j],as_index = False).mean()\n    sns.barplot(y = j, x = \"Absenteeism time in hours\", ax = axs[i],\n                data = df_sum,orient = \"h\", \n                order=df_sum.sort_values('Absenteeism time in hours',ascending = False)[j],\n                palette = \"mako\")\nfig.suptitle(\"Average Absenteeism time in hours\", fontsize=30)\n\nfig, axs = plt.subplots(ncols = 8,nrows = 1, figsize = (36,4))\nfor i,j in enumerate(cat_cols[3:11]):\n    df_sum = df.groupby([j],as_index = False).mean()\n    sns.barplot(y = j, x = \"Absenteeism time in hours\", ax = axs[i],\n                data = df_sum,orient = \"h\", \n                order=df_sum.sort_values('Absenteeism time in hours',ascending = False)[j],\n                palette = \"mako\")","8ae4f567":"from IPython.display import display_html \n\ndef styler(feature):\n    counts = df.groupby([feature], as_index = False).mean()[[feature,'Absenteeism time in hours']].sort_values('Absenteeism time in hours', ascending = False)\n    counts.columns = [feature, 'Average Number of Hours']\n    style = counts.head(5).style.set_table_attributes(\"style='display:inline'\").set_caption(\"Top 5 \" + str(feature) + \"s - Average\" ).hide_index()\n    return style\n\ndisplay_html(styler(\"ID\")._repr_html_() + styler(\"Reason for absence\")._repr_html_() + styler(\"Month of absence\")._repr_html_(), raw=True)","4528b2d1":"num_cols = list(set(list(df.columns)) - set(cat_cols))\norder = [1,0,2,3,4,5,6,7,8,9]\nnum_cols = [num_cols[i] for i in order]\nfirst = num_cols[0:5]\nsecond = set(num_cols) - set(first[1:])\npairplot1 = sns.pairplot(data = df[first])\npairplot1.fig.set_size_inches(8,8)\npairplot1.fig.suptitle(\"Pairplot 1\", y = 1.03, size = 20)\npairplot2 = sns.pairplot(data = df[second])\npairplot2.fig.set_size_inches(8,8)\npairplot2.fig.suptitle(\"Pairplot 2\", y = 1.03, size = 20)","1bf7c178":"plt.rcParams['figure.figsize'] = (10, 8)\nplt.title(\"Correlation Plot\")\nsns.heatmap(df[num_cols].corr(),cmap = \"YlGnBu\")","eb5c8be4":"sel_numf = ['Age','Service time','Transportation expense','Distance from Residence to Work','Hit target', 'Pet', 'Son','Body mass index']\nfor f in sel_numf:\n    fig, axs = plt.subplots(ncols = 3,nrows = 1, figsize = (35,4.5))\n    age_mean = df.groupby(f, as_index=False).mean()\n    age_sum = df.groupby(f, as_index=False).sum()\n    age_count = df.groupby(f, as_index=False).count()\n\n    sns.barplot(x = f, y = \"Absenteeism time in hours\",\n                    data = age_mean, orient = \"v\", ax = axs[0],\n                    order = age_mean.sort_values('Absenteeism time in hours',ascending = False)[f],\n                    palette = \"viridis\").set_title('Average Absenteeism Hours by ' + str(f))\n    sns.barplot(x = f, y = \"Absenteeism time in hours\",\n                    data = age_sum, orient = \"v\", ax = axs[1],\n                    order = age_sum.sort_values('Absenteeism time in hours',ascending = False)[f],\n                    palette = \"viridis\").set_title('Total Absenteeism Hours by ' + str(f))\n    sns.barplot(x = f, y = \"Absenteeism time in hours\",\n                    data = age_count, orient = \"v\", ax = axs[2],\n                    order = age_count.sort_values('Absenteeism time in hours',ascending = False)[f],\n                    palette = \"viridis\").set_title('Count of Absences by ' + str(f))\n    fig.suptitle(str(f) + \" and Absenteeism Time\", fontsize = 20)","76cf2c3d":"names = ['<=4', '4-8', '8-16', '>16']\ndf['Absenteeism time in hours'] = pd.cut(df['Absenteeism time in hours'], bins = [-1,4,8,16,np.inf], labels=names)\ndf.head(6)","0c115d72":"df.head(6)","e2730537":"df.groupby('Absenteeism time in hours').count()['ID']","d37638ec":"df.info()","a05f09fb":"df.drop(['ID'],axis =1, inplace = True)","6c06cad8":"from sklearn.preprocessing import OneHotEncoder\ntodummify = list(df.select_dtypes(include=['category']).columns)\ntoexclude = {'Absenteeism time in hours', 'Son', 'Pet', 'Education'}\ntodummify = [var for var in todummify if var not in toexclude]\nenc = OneHotEncoder(drop = 'first')\nenc_df = pd.DataFrame(enc.fit_transform(df[todummify]).toarray(),\n                      columns = enc.get_feature_names(todummify))\ndf = df.join(enc_df,how='inner')\ndf.drop(todummify, axis = 1, inplace = True)\ntocategorify = [col for col in df.columns if '_' in col]\ndf[tocategorify] = df[tocategorify].astype('category')\ndf.columns","a2af8442":"tv = 'Absenteeism time in hours'\nX = df.drop([tv], axis = 1) #can use drop or the simple df[] whichever is convenient\ny = df[tv]\nprint(\"Independent Variables\")\ndisplay(X.head(20))\nprint(\"Target Variable\")\ndisplay(y.to_frame().head(20))","847ebfc2":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom statsmodels.tools.tools import add_constant\nX_numeric = X._get_numeric_data() #drop non-numeric cols\nX_numeric = add_constant(X_numeric)\nVIF_frame = pd.Series([variance_inflation_factor(X_numeric.values, i) \n               for i in range(X_numeric.shape[1])], \n              index=X_numeric.columns).to_frame()\n\nVIF_frame.drop('const', axis = 0, inplace = True) \nVIF_frame.rename(columns={VIF_frame.columns[0]: 'VIF'},inplace = True)\nVIF_frame[~VIF_frame.isin([np.nan, np.inf, -np.inf]).any(1)]","08386b06":"X.drop('Weight',axis = 1, inplace = True)\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom statsmodels.tools.tools import add_constant\nX_numeric = X._get_numeric_data() #drop non-numeric cols\nX_numeric = add_constant(X_numeric)\nVIF_frame = pd.Series([variance_inflation_factor(X_numeric.values, i) \n               for i in range(X_numeric.shape[1])], \n              index=X_numeric.columns).to_frame()\n\nVIF_frame.drop('const', axis = 0, inplace = True) \nVIF_frame.rename(columns={VIF_frame.columns[0]: 'VIF'},inplace = True)\nVIF_frame[~VIF_frame.isin([np.nan, np.inf, -np.inf]).any(1)]","87ec6d64":"all_cat = list(X.select_dtypes(include=['category']).columns)\nX[all_cat] = X[all_cat].astype('float')","114938b8":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size = 0.25, \n                                                    random_state = 823)\nX_train.head()","b4558b84":"import xgboost as xgb\nxgbc = xgb.XGBClassifier(random_state = 823)\nxgbc.fit(X_train,y_train)\nfeatures = X_train.columns.tolist()\nfeature_value = xgbc.feature_importances_\nd = {'Features' : features, 'Values' : feature_value}\nfi = pd.DataFrame(d).sort_values('Values', ascending = False).reset_index()\nplt.rcParams['figure.figsize'] = (20.0, 10.0)\nax = sns.barplot(y = fi['Features'], x = fi['Values'], \n                 orient = \"h\", data = fi, palette=\"Blues_d\")","f5c11356":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_numeric = X_train._get_numeric_data() #drop non-numeric cols\nX_test_numeric = X_test._get_numeric_data() #drop non-numeric cols\nX_train_numeric_scaled = pd.DataFrame(scaler.fit_transform(X_train_numeric), \n                                      index=X_train.index,\n                                      columns=X_train_numeric.columns)\nX_test_numeric_scaled = pd.DataFrame(scaler.transform(X_test_numeric), \n                                     index = X_test.index, \n                                     columns=X_test_numeric.columns)\nX_train.update(X_train_numeric_scaled)\nX_test.update(X_test_numeric_scaled)\ndisplay(X_train.head())\ndisplay(X_test.head())","938c34fa":"import sklearn.metrics as metrics\ny_pred_test = xgbc.predict(X_test)\ny_pred_train = xgbc.predict(X_train)\nprint(\"Test Accuracy:\",round(metrics.accuracy_score(y_test, y_pred_test),4))\nprint(\"Train Accuracy:\",round(metrics.accuracy_score(y_train, y_pred_train),4))","d630a8e7":"from sklearn.model_selection import GridSearchCV\nparameters = [{'n_estimators' : [5600],\n               'max_depth': [1],\n               'learning_rate': [0.005]}]\nxgb_clf = GridSearchCV(xgbc, parameters,scoring = 'balanced_accuracy', cv = 10)\nxgb_clf.fit(X_train,y_train)\nprint(\"Best Parameter Values: \")\npd.DataFrame.from_dict(xgb_clf.best_params_,orient='index',columns=['Values'])","a2fdf641":"best_xgbc_model = xgb_clf.best_estimator_\nbest_xgbc_model.fit(X_train,y_train)\npredictions = best_xgbc_model.predict(X_test)\npredictions[0:10]","8d689e03":"from sklearn.metrics import classification_report,confusion_matrix\ndata = confusion_matrix(y_test, predictions)\ndf_cm = pd.DataFrame(data, columns=np.unique(y_test), index = np.unique(y_test))\ndf_cm.index.name = 'Predicted'\ndf_cm.columns.name = 'Actual'\nplt.figure(figsize = (10,7))\nsns.set(font_scale=1.5)\nax = sns.heatmap(df_cm,cmap = 'Greens', annot=True,annot_kws={\"size\": 16}, fmt = 'g')\nax.set_title('Confusion Matrix')\nprint(\"Classification Report: \")\nprint(classification_report(y_test,predictions))","526bef3c":"import scikitplot as skplt\ny_true = y_test\ny_probas = best_xgbc_model.predict_proba(X_test)\nskplt.metrics.plot_roc(y_true, y_probas, \n                             title = 'ROC Curve',\n                             figsize = (12,8))\nplt.grid(b = 'Whitegrid')","d2be35ec":"from sklearn.metrics import accuracy_score\npredictions2 = best_xgbc_model.predict(X_train)\nprint(\"Test Accuracy:\",round(metrics.accuracy_score(y_test, predictions),4))\nprint(\"Train Accuracy:\",round(metrics.accuracy_score(y_train, predictions2),4))","b61e810e":"### III. Exploratory Data Analysis","26047c7f":"- *Predicting* ","eefa700e":"- *Feature Scaling* ","b031f4ba":"- *Removing MultiCollinearity Issues from Numeric Features using Variance Inflation Factor*","ae875aa1":"#### Data Cleaning\n- *Let's check for some missing values*","22f2f8a3":"- *We'll replace the value with 3 hours*","6df61334":"- *Now let's look at the total Absenteeism time in hours for each categorical variable*","37b624e6":"- *Evaluation - Classification Report and Confusion Matrix* ","b86eac5b":"### II. Dataset Preparation","13ccd68c":"- *Hyperparameter Optimization with Cross Validation* ","06a14d20":"#### XGB Classifier","ba56c3bd":"- *Checking:*.","e3979d60":"#### Try - Average Absenteeism time in hours:","35bb9b99":"- *To replace the 0 absenteeisim time for this row (row 134), we'll replace it with the average absenteeism time of reason for absence 27*","bba82c68":"- *Among all numerical features, nothing seems to be highly correlated with Absenteeism time in hours. Weight and BMI are obviously highly correlated and is reflected in the heatmap.*","4e9a7cc4":"- *Check for correlations*","b03b171c":"- *Instead of regression, we'll apply classification to the dataset to predict the number of absenteeism hours of an employee given a set of features. We'll do this by segmenting the target variable into multiple classes*.","54bb100f":"- *Deleting these 3 rows (Creating a subset where these 3 rows are filtered):*","5e89bfeb":"### I. Importing Libraries","d9852838":"- *Defining independent variables and target variable (X & y)*\n- *We dropped the ID column as it definitely would not help in the prediction*","5955ccce":"- *Splitting to Test & Train* ","210576e4":"- *Correlation Plot*","41f3d4a5":"#### Checking Validity of Data:\n- *Upon investigation, we've noticed that there are some rows with values of \"0\" in the Month of absence which doesn't make sense*","fa8576d9":"#### Mapping the Target Variable:","c48e46bf":"- *Quick Peek at Train & Test Accuracy* ","2468e7e6":"- *Evaluation - Check for Overfitting* ","d709d8f5":"- *Overview of Feature Importance using xgbc's feature_importances_* ","39af7f08":"- *Evaluation - ROC Curve and Area Under the Curve* ","b0670f7d":"- *Employee with ID 3 has the most number of absenteeism time in hours*\n- *Reason 13 which refers to \"Diseases of the musculoskeletal system and connective tissue\" has the highest total abseenteeism time in hours (800+ hours) among all other reasons.*\n- *The month with the highest total absenteeism time in hours is month 3 which refers to March.*\n- *The day of the week which has the highest total number of absenteeism hours is 2 which refers to Monday.*\n- *The season which has the highest total number of absenteeism hours is 3 which refers to the winter season.*\n- *The total absenteeism time of employees with \"education value\" of 1 which refers to high school graduates is more than 4000 hours. This is the higest among all other classes in the Education category.* \n- *The total absenteeism time of employees with \"son value\" of 2 which refers to employees with 2 children is the higest among all other classes in the Son category.*","195cf6ba":"- *Employee with employee ID 3 has the most number of filed absences.*\n- *The top filed reason for absence is reason no. 23 which referes to Medical Consultations.*\n- *The month with the most number of filed absences is 3 which refers to March.*\n- *The day of the week which has the most number of filed absences is 2 which refers to Monday. The other days are not really that far.*\n- *The season which has the most number of filed absences is 4 which refers to the spring season.*\n- *Almost all of the filed absences have a disciplinary failure value of 0.*\n- *A large chunk of the filed absences are from employees with \"education value\" of 1 which refers high school graduates.* \n- *Employees with \"son value\" of 0 which refers to employees with no chlidren, tend to file more absences than employees with children* \n- *Social drinkers have more filed cases of absence than non-social drinkers*\n- *Non-social somers have more filed cases of absence than social smokers*","3a0c8e69":"### IV. Classification using XGB","90f5599c":"#### Looking at total Absenteeism time in hours:","3775273c":"#### Numerical Features:","127be680":"- *Encoding Categorical Features* ","9a1f283e":"- *Dropping Weight Feature and checking VIFs again* ","90a0fb8e":"- *Of these 41 rows, 1 row seems suspicious because it is the only one that has a disciplinary failure value of 0 and it has a valid reason for absence.*","2e9b96b6":"#### Count Plots for Categorical Features:","407782f6":"#### Taking a peeek at the dataset and its structure:","9f2b97f5":"- *Checking if conversion is successfull*","baeb4274":"#### Converting feature types:\n- *Features such as Employee ID, Reason for absence, Month of absence, Day of the week, Seasons, Disciplinary Failure, Education, Son, Social Drinker, Social Smoker and Pet are all categorical features according to their description and should therefore be converted.*","c7159c98":"#### Looking at Sum, Average and Count using Numerical Variables","410ebb6c":"### IV. Model Evaluation","f53cef6a":"- *Upon investigation, we've noticed that there are 41 rows with values of \"0\" in the Absenteeism time in hours feature. We believe these are late cases, which is why the disciplinary failure values for almost all of these cases are 1.*"}}