{"cell_type":{"d7437596":"code","6012118a":"code","fef2f715":"code","a2e4fb55":"code","e4a1bf21":"code","8d2c71ea":"code","0448639c":"code","c9c699d1":"code","e82723d3":"code","5542df8b":"code","5d491dea":"code","0f859858":"code","72511633":"code","4e2b758f":"code","4c64175a":"code","5b7bad9b":"code","78daaee2":"code","c48ed079":"code","93757534":"code","0e1a414c":"code","36a6495d":"code","3fcdc618":"code","10f8201c":"code","f6597bd4":"code","958b9ba1":"code","318411ea":"code","53652ab4":"code","b9b5eda7":"code","be6fb0bc":"code","3b86ff5f":"code","c6acd28d":"code","84d998bb":"code","159f9812":"code","46a3180f":"code","b1663843":"code","d9692bd4":"code","18733ba0":"code","a3f9a9bb":"code","bbc4249e":"code","931c6713":"code","7efa7ba7":"code","17957bae":"code","cb2cd967":"code","4f22c62a":"code","45169b36":"code","49685fc4":"code","c7bb6335":"code","eacbd258":"code","447bd623":"code","36da73b6":"code","61d7db58":"code","0d72f849":"markdown","a66c6203":"markdown","3e2c91ce":"markdown","8524e0c1":"markdown","cf1d6665":"markdown","ce863bee":"markdown","0e438494":"markdown"},"source":{"d7437596":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6012118a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","fef2f715":"# Importing all datasets\nchurn_data = pd.read_csv(\"\/kaggle\/input\/telecom-churn-data-sets\/churn_data.csv\")\nchurn_data.head()","a2e4fb55":"customer_data = pd.read_csv(\"\/kaggle\/input\/telecom-churn-data-sets\/customer_data.csv\")\ncustomer_data.head()","e4a1bf21":"internet_data = pd.read_csv(\"\/kaggle\/input\/telecom-churn-data-sets\/internet_data.csv\")\ninternet_data.head()","8d2c71ea":"df_1=pd.merge(churn_data, customer_data, how='inner',on='customerID')","0448639c":"telecom=pd.merge(df_1,internet_data,how='inner',on='customerID')","c9c699d1":"# Let's check the dataframe\ntelecom.head(5)","e82723d3":"telecom.shape","5542df8b":"telecom.describe()","5d491dea":"telecom.info()","0f859858":"#The varaible was imported as a string we need to convert it to float\ntelecom['TotalCharges']=pd.to_numeric(telecom['TotalCharges'],errors='coerce')","72511633":"telecom.info()","4e2b758f":"plt.figure(figsize=(20,40))\nplt.subplot(10,2,1)\nax = sns.distplot(telecom['tenure'], hist=True, kde=False, \n             bins=int(180\/5), color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})\nax.set_ylabel('# of Customers')\nax.set_xlabel('Tenure (months)')\nplt.subplot(10,2,2)\nax = sns.countplot(x='PhoneService', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,3)\nax =sns.countplot(x='Contract', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,3)\nax =sns.countplot(x='Contract', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,4)\nax =sns.countplot(x='PaperlessBilling', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,5)\nax =sns.countplot(x='PaymentMethod', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,6)\nax =sns.countplot(x='Churn', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,7)\nax =sns.countplot(x='gender', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,8)\nax =sns.countplot(x='SeniorCitizen', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,9)\nax =sns.countplot(x='Partner', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,10)\nax =sns.countplot(x='Dependents', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,11)\nax =sns.countplot(x='MultipleLines', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,12)\nax =sns.countplot(x='InternetService', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,13)\nax =sns.countplot(x='OnlineSecurity', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,14)\nax =sns.countplot(x='OnlineBackup', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,15)\nax =sns.countplot(x='DeviceProtection', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,16)\nax =sns.countplot(x='TechSupport', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,17)\nax =sns.countplot(x='StreamingTV', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,18)\nax =sns.countplot(x='StreamingMovies', data=telecom)\nax.set_ylabel('# of Customers')\nplt.subplot(10,2,19)\nax = sns.distplot(telecom['MonthlyCharges'], hist=True, kde=False, \n             bins=int(180\/5), color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})\nax.set_ylabel('# of Customers')\nax.set_xlabel('MonthlyCharges')\nplt.subplot(10,2,20)\nax = sns.distplot(telecom['TotalCharges'], hist=True, kde=False, \n             bins=int(180\/5), color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})\nax.set_ylabel('# of Customers')\nax.set_xlabel('TotalCharges');","4c64175a":"plt.figure(figsize=(25, 10))\nplt.subplot(1,3,1)\nsns.boxplot(x = 'tenure', y = 'Churn', data=telecom)\nplt.subplot(1,3,2)\nsns.boxplot(x = 'MonthlyCharges', y = 'Churn', data=telecom)\nplt.subplot(1,3,3)\nsns.boxplot(x = 'TotalCharges', y = 'Churn', data=telecom)\nplt.show()","5b7bad9b":"# Converting some binary variables (Yes\/No) to 0\/1\nvarlist =  ['PhoneService', 'PaperlessBilling', 'Churn', 'Partner', 'Dependents']\n\n# Defining the map function\ndef binary_map(x):\n    return x.map({'Yes': 1, \"No\": 0})\n\n# Applying the function to the housing list\ntelecom[varlist] = telecom[varlist].apply(binary_map)","78daaee2":"# creating dummy varaibles\ndummy1 = pd.get_dummies(telecom[['Contract', 'PaymentMethod', 'gender', 'InternetService']], drop_first=True)\n\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom, dummy1], axis=1)","c48ed079":"ml = pd.get_dummies(telecom['MultipleLines'], prefix='MultipleLines')\n# Dropping MultipleLines_No phone service column\nml1 = ml.drop(['MultipleLines_No phone service'], 1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ml1], axis=1)\n\n\nos = pd.get_dummies(telecom['OnlineSecurity'], prefix='OnlineSecurity')\nos1 = os.drop(['OnlineSecurity_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,os1], axis=1)\n\n# Creating dummy variables for the variable 'OnlineBackup'.\nob = pd.get_dummies(telecom['OnlineBackup'], prefix='OnlineBackup')\nob1 = ob.drop(['OnlineBackup_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ob1], axis=1)\n\n# Creating dummy variables for the variable 'DeviceProtection'. \ndp = pd.get_dummies(telecom['DeviceProtection'], prefix='DeviceProtection')\ndp1 = dp.drop(['DeviceProtection_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,dp1], axis=1)\n\nts = pd.get_dummies(telecom['TechSupport'], prefix='TechSupport')\nts1 = ts.drop(['TechSupport_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ts1], axis=1)\n\n# Creating dummy variables for the variable 'StreamingTV'.\nst =pd.get_dummies(telecom['StreamingTV'], prefix='StreamingTV')\nst1 = st.drop(['StreamingTV_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,st1], axis=1)\n\n# Creating dummy variables for the variable 'StreamingMovies'. \nsm = pd.get_dummies(telecom['StreamingMovies'], prefix='StreamingMovies')\nsm1 = sm.drop(['StreamingMovies_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,sm1], axis=1)","93757534":"# We have created dummies for the below variables, so we can drop them\ntelecom = telecom.drop(['Contract','PaymentMethod','gender','MultipleLines','InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n       'TechSupport', 'StreamingTV', 'StreamingMovies'], 1)","0e1a414c":"# Checking for outliers in the continuous variables\nnum_telecom = telecom[['tenure','MonthlyCharges','SeniorCitizen','TotalCharges']]","36a6495d":"num_telecom.describe(percentiles=[.25, .5, .75, .90, .95, .99])","3fcdc618":"# checking for missing values\nround(100*(telecom.isnull().sum()\/len(telecom)),2)","10f8201c":"telecom.dropna(inplace=True)","f6597bd4":"telecom = telecom.reset_index(drop=True)","958b9ba1":"# creating the X and y varaibles\nX=telecom.drop(['Churn','customerID'],axis=1)","318411ea":"y=telecom['Churn']","53652ab4":"from sklearn.model_selection import train_test_split","b9b5eda7":"# creating the train and test split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","be6fb0bc":"# Scaling the values \nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()","3b86ff5f":"X_train[['tenure','MonthlyCharges','TotalCharges']]=scaler.fit_transform(X_train[['tenure','MonthlyCharges','TotalCharges']])","c6acd28d":"X_test[['tenure','MonthlyCharges','TotalCharges']]=scaler.transform(X_test[['tenure','MonthlyCharges','TotalCharges']])","84d998bb":"churn=(sum(telecom['Churn'])\/len(telecom['Churn'].index))*100\nchurn","159f9812":"# drawing the correlation \nimport matplotlib.pyplot as plt\nimport seaborn as sns","46a3180f":"plt.figure(figsize=(20,15))\nsns.heatmap(telecom.corr(),annot=True)","b1663843":"plt.figure(figsize=(10,8))\ntelecom.corr()['Churn'].sort_values(ascending = False).plot(kind='bar');","d9692bd4":"# dropping the highly correlated dummy variables\nX_test = X_test.drop(['MultipleLines_No','OnlineSecurity_No','OnlineBackup_No','DeviceProtection_No','TechSupport_No',\n                       'StreamingTV_No','StreamingMovies_No'], 1)\nX_train = X_train.drop(['MultipleLines_No','OnlineSecurity_No','OnlineBackup_No','DeviceProtection_No','TechSupport_No',\n                         'StreamingTV_No','StreamingMovies_No'], 1)","18733ba0":"from sklearn.linear_model import LogisticRegression\nlogireg=LogisticRegression()","a3f9a9bb":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif.head()","bbc4249e":"features_to_remove = vif.loc[vif['VIF'] >= 4.99,'Features'].values\nfeatures_to_remove = list(features_to_remove)\nprint(features_to_remove)","931c6713":"X_train = X_train.drop(columns=features_to_remove, axis = 1)\nX_train.head()","7efa7ba7":"X_test = X_test.drop(columns=features_to_remove, axis = 1)\nX_test.head()","17957bae":"model=logireg.fit(X_train,y_train)","cb2cd967":"# Evaluting model using precision_score, recall_score, accuracy_score,f1_score\nfrom sklearn.metrics import precision_score, recall_score, accuracy_score,f1_score","4f22c62a":"y_test_pred=model.predict(X_test)","45169b36":"precision_score(y_test,y_test_pred)","49685fc4":"recall_score(y_test,y_test_pred)","c7bb6335":"accuracy_score(y_test,y_test_pred)","eacbd258":"f1_score(y_test,y_test_pred)","447bd623":"from sklearn.metrics import plot_confusion_matrix,plot_roc_curve","36da73b6":"plot_confusion_matrix(model, X_test, y_test_pred) \nplt.show()","61d7db58":"plot_roc_curve(model, X_test, y_test_pred) \nplt.show()","0d72f849":"# EDA","a66c6203":"# Evaluating Model","3e2c91ce":"# Plotting Confusion Matrix and ROC","8524e0c1":"# Test-Train Split and scaling","cf1d6665":"# Importing and Merging Data","ce863bee":"# Creating Logistic Regression Model","0e438494":"## Combining all data files into one consolidated dataframe"}}