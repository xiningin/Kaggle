{"cell_type":{"a48d69ae":"code","ab9565d2":"code","f392a0b4":"code","e3ba712e":"code","9d909d35":"code","9dbf4c67":"code","4d3d3441":"code","06fea636":"code","a96a11a3":"code","3c31575a":"code","d3427b10":"code","d415f292":"code","51c2bb7b":"code","f80971fe":"code","86657d8f":"code","32fc42ae":"code","ca35ce88":"code","da3de9df":"code","59c9935f":"code","a0cd47b9":"code","280709ae":"code","50bdc112":"code","2ad659fa":"code","d377b317":"code","5e2f608b":"code","566559ce":"code","68c849f5":"code","e59059d2":"markdown","f6465748":"markdown","c4225e93":"markdown","bc82f0d4":"markdown","41f8ec36":"markdown","09406f1e":"markdown","6d1b5432":"markdown","311b11c3":"markdown"},"source":{"a48d69ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ab9565d2":"import matplotlib.pyplot as plt\nfrom tqdm import tqdm\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold, GridSearchCV, cross_val_predict\n","f392a0b4":"def compute_meta_feature(clf, X_train, X_test, y_train, cv):    \n    n_classes = len(np.unique(y_train))\n    X_meta_train = np.zeros((len(y_train), n_classes), dtype=np.float32)\n    splits = cv.split(X_train,y_train)    \n    for train_fold_index, predict_fold_index in splits:\n        X_fold_train, X_fold_predict = X_train[train_fold_index], X_train[predict_fold_index]        \n        y_fold_train = y_train[train_fold_index]        \n        folded_clf = clone(clf)\n        folded_clf.fit(X_fold_train, y_fold_train)        \n        X_meta_train[predict_fold_index] = folded_clf.predict_proba(X_fold_predict)   \n    clf.fit(X_train, y_train)    \n    X_meta_test = clf.predict_proba(X_test)  \n    \n    return X_meta_train, X_meta_test\n\n\ndef generate_meta_features(classifiers, X_train, X_test, y_train, cv):   \n    features = [\n        compute_meta_feature(clf, X_train, X_test, y_train, cv)\n        for clf in tqdm(classifiers)\n    ]    \n    stacked_features_train = np.hstack([\n        features_train for features_train, features_test in features\n    ])\n    stacked_features_test = np.hstack([\n        features_test for features_train, features_test in features\n    ])    \n    \n    return stacked_features_train, stacked_features_test\n\n\ndef compute_metric(clf, X_train, y_train, X_test, y_test):\n    clf.fit(X_train, y_train)\n    y_test_pred = clf.predict(X_test)\n    \n    return np.round(roc_auc_score(y_test, y_test_pred), 6)\n\n\ndef get_columns_corr(data):\n    columns_cor = data.columns\n    ind = 0\n    matrix_corr = data[np.abs(data)>0.8].values\n    list_corr = set()\n    for i in range(len(matrix_corr)):\n        list_corr1 = []\n        list_corr1.append(columns_cor[i])\n        for j in range(len(matrix_corr)):        \n            if abs(matrix_corr[i,j])  >0.8 and i!=j:\n                list_corr1.append(columns_cor[j])\n\n        if(len(list_corr1)>1):       \n            list_corr.add(tuple(sorted(list_corr1)))\n\n\n    return list_corr   \n\n\ndef get_drop_columns(columns):   \n    result = []\n    i = 0\n    for column in columns:         \n        if isinstance(column,tuple):            \n            for i in range(1,len(column)):\n                result.append(column[i])\n        elif i!=0:\n            result.append(column)\n        else:\n            i+=1\n    return result  \n\n\ndef columns_str_to_int(data,columns):\n    for i in columns:\n        data.loc[data[i] == \"Yes\",i] = 1\n        data.loc[data[i] == \"No\",i] = 0\n        data[i] = data[i].astype(int)\n    return data\n\n\ndef standartscaler(data,columns, mean = 0, std = 0):\n    matrix = data[columns].values\n    if mean ==0 and std ==0:\n        mean = matrix.mean()\n        std = matrix.std()\n    matrix = (matrix - matrix.mean())\/matrix.std()\n    data.loc[:,columns] = matrix\n    return (data,mean,std)\n\n\ndef learn_model(model,parametrs,cv, x_train,y_train):\n    gscv = GridSearchCV(estimator = model,param_grid = parametrs, scoring = \"roc_auc\",\n                        cv = cv, n_jobs = -1)\n    gscv.fit(x_train,y_train)\n    return gscv.best_params_","e3ba712e":"data = pd.read_csv(\"..\/input\/uoohoo-dataset\/train.csv\")\ndata_test = pd.read_csv(\"..\/input\/uoohoo-dataset\/test.csv\")","9d909d35":"# \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0430\u043d\u043d\u044b\u0445\ndata.head(10)","9dbf4c67":"# \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\ndata.info()","4d3d3441":"# \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ncol = data.columns\nprint(col)\nprint(len(col))\nprint()\nfor i in col:    \n    print(data[i].value_counts())\n    print()\n","06fea636":"fig = plt.figure(figsize = [20,12])\nClientPeriod_plot = fig.add_subplot(4,5,1, label = \"ClientPeriod\")\nMonthlySpending_plot = fig.add_subplot(4,5,2)\nTotalSpent_plot = fig.add_subplot(4,5,3)\nSex_plot = fig.add_subplot(4,5,4)\nIsSeniorCitizen_plot = fig.add_subplot(4,5,5)\nHasPartner_plot = fig.add_subplot(4,5,6)\nHasChild_plot = fig.add_subplot(4,5,7)\nHasPhoneService_plot = fig.add_subplot(4,5,8)\nHasMultiplePhoneNumbers_plot = fig.add_subplot(4,5,9)\nHasInternetService_plot = fig.add_subplot(4,5,10)\nHasOnlineSecurityService_plot = fig.add_subplot(4,5,11)\nHasOnlineBackup_plot = fig.add_subplot(4,5,12)\nHasDeviceProtection_plot = fig.add_subplot(4,5,13)\nHasTechSupportAccess_plot = fig.add_subplot(4,5,14)\nHasOnlineTV_plot = fig.add_subplot(4,5,15)\nHasMovieSubscription_plot = fig.add_subplot(4,5,16)\nHasContractPhone_plot = fig.add_subplot(4,5,17)\nIsBillingPaperless_plot = fig.add_subplot(4,5,18)\nPaymentMethod_plot = fig.add_subplot(4,5,19)\nChurn_plot = fig.add_subplot(4,5,20)\n\nClientPeriod_plot.hist(data[\"ClientPeriod\"])\nMonthlySpending_plot.hist(data[\"MonthlySpending\"])\nTotalSpent_plot.hist(data[\"TotalSpent\"],bins = 10)\nSex_plot.hist(data[\"Sex\"])\nIsSeniorCitizen_plot.hist(data[\"IsSeniorCitizen\"])\nHasPartner_plot.hist(data[\"HasPartner\"])\nHasChild_plot.hist(data[\"HasChild\"])\nHasPhoneService_plot.hist(data[\"HasPhoneService\"])\nHasMultiplePhoneNumbers_plot.hist(data[\"HasMultiplePhoneNumbers\"])\nHasInternetService_plot.hist(data[\"HasInternetService\"])\nHasOnlineSecurityService_plot.hist(data[\"HasOnlineSecurityService\"])\nHasOnlineBackup_plot.hist(data[\"HasOnlineBackup\"])\nHasDeviceProtection_plot.hist(data[\"HasDeviceProtection\"])\nHasTechSupportAccess_plot.hist(data[\"HasTechSupportAccess\"])\nHasOnlineTV_plot.hist(data[\"HasOnlineTV\"])\nHasMovieSubscription_plot.hist(data[\"HasMovieSubscription\"])\nHasContractPhone_plot.hist(data[\"HasContractPhone\"])\nIsBillingPaperless_plot.hist(data[\"IsBillingPaperless\"])\nPaymentMethod_plot.hist(data[\"PaymentMethod\"])\nChurn_plot.hist(data[\"Churn\"])\n;\nplt.show()\n","a96a11a3":"columns_to_int = [\"HasPartner\",\"HasChild\",\"HasPhoneService\",\"IsBillingPaperless\"]\ndata = columns_str_to_int(data,columns_to_int)\ndata_test = columns_str_to_int(data_test,columns_to_int)\n\n\ndata.loc[data[\"TotalSpent\"] == \" \",\"TotalSpent\"] = 20\ndata[\"TotalSpent\"]=data[\"TotalSpent\"].astype(\"float64\")\ndata_test.loc[data_test[\"TotalSpent\"] == \" \",\"TotalSpent\"] = 20\ndata_test[\"TotalSpent\"]=data_test[\"TotalSpent\"].astype(\"float64\")","3c31575a":"dummies_col = [\"Sex\",\"HasMultiplePhoneNumbers\",\"HasInternetService\",\"HasOnlineSecurityService\",\n               \"HasOnlineBackup\",\"HasDeviceProtection\",\"HasTechSupportAccess\",\"HasOnlineTV\",\n              \"HasMovieSubscription\", \"HasContractPhone\", \"PaymentMethod\", \"IsSeniorCitizen\"]","d3427b10":"data1 = pd.get_dummies(data,columns = dummies_col,drop_first = True)\ndata2 = pd.get_dummies(data_test,columns = dummies_col,drop_first = True)","d415f292":"columns_standart = [\"ClientPeriod\",\"MonthlySpending\",\"TotalSpent\"]\ndata1, mean,std = standartscaler(data1,columns_standart)\ndata2, mean2,std2 = standartscaler(data2,columns_standart,mean,std)","51c2bb7b":"data1.corr().style.background_gradient(cmap = 'coolwarm')\ndata_corr = data1.corr()","f80971fe":"p = get_columns_corr(data_corr)","86657d8f":"drop = get_drop_columns(p)\ndrop2 = get_drop_columns(p)","32fc42ae":"x = data1\nx = x.drop(drop2,axis = 1)\nx = x.drop(['Churn'],axis = 1)\ny = data1[\"Churn\"]\nx2 = data2.drop(drop2,axis = 1)","ca35ce88":"x_train, x_valid, y_train, y_valid = train_test_split(x,y,test_size=0.2,random_state = 139)","da3de9df":"list_c = [x\/100 for x in range(961,981)]","59c9935f":"lgrm = LogisticRegression()\nparam_lgrm = {'penalty':['l1','l2'],'C':[1,2,5,7,10],'fit_intercept':[True,False],\n              'max_iter':[100,300,500,1000],'multi_class':['ovr','multinomial'], \n              'solver':['newton-cg','sag','saga','lbfgs']}\ndic_lgrm = learn_model(lgrm,param_lgrm,5, x,y)\nprint(dic_lgrm)","a0cd47b9":"# \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u043b\u0443\u0447\u0448\u0438\u0445 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\ndic_lgrm1 = {'C': 9.79,\n 'fit_intercept': True,\n 'multi_class': 'ovr',\n 'penalty': 'l1',\n 'solver': 'liblinear'}\nlgrm_upgrade = LogisticRegression(**dic_lgrm1)\ncross_val_score(lgrm_upgrade,x,y,scoring = \"roc_auc\").mean()","280709ae":"lgrm_upgrade.fit(x,y)\ny_pred = lgrm_upgrade.predict(x2)\ndf = pd.DataFrame(y_pred)\ndf.index.name = \"id\"\ndf.columns = [\"Churn\"]\ndf.to_csv(\"lgrm_model.csv\")","50bdc112":"lgrmcv = LogisticRegressionCV(Cs = 10, scoring = 'roc_auc', penalty = \"l2\", \n                              solver = 'sag', max_iter = 10000,cv = 5) \nlgrmcv.fit(x,y)","2ad659fa":"y_valid_pred = lgrmcv.predict(x_valid)\nroc_auc_score(y_valid,y_valid_pred)","d377b317":"y_pred = lgrmcv.predict(x2)\ndf = pd.DataFrame(y_pred)\ndf.index.name = \"id\"\ndf.columns = [\"Churn\"]\ndf.to_csv(\"lgrmcv_model.csv\")","5e2f608b":"gbc = GradientBoostingClassifier()\nparam_gbc = {'loss':['deviance','exponential'], 'learning_rate':[0.1,0.05,0.01],\n             'n_estimators':[50,100,200,300], 'criterion':['friedman_mse', 'mse', 'mae'],\n             'min_samples_leaf':[1,2,3,5], 'max_depth':[3,5,7,10],'random_state':[42,None],\n             'max_features':['auto','sqrt','log2']}\nparam_gbc1 = {'loss':['exponential'],'learning_rate':[0.01],'n_estimators':[302],'criterion':['friedman_mse'],\n               'min_samples_leaf' :[6], 'max_depth' : [5], 'random_state' : [42],'max_features':['sqrt']}\n# dic_gbc = learn_model(gbc,param_gbc1,5, x,y)\n","566559ce":"dig_gbs_exp = {'loss':'exponential',\n               'learning_rate':0.01,\n               'n_estimators':302,\n               'criterion':'friedman_mse',\n               'min_samples_leaf' : 6, 'max_depth' : 5, 'random_state' : 42,'max_features':'sqrt'}\ngbc_upgrade = GradientBoostingClassifier(**dig_gbs_exp)\ncross_val_score(gbc_upgrade,x,y,scoring = \"roc_auc\").mean()","68c849f5":"gbc_upgrade.fit(x,y)\ny_pred = gbc_upgrade.predict(x2)\ndf = pd.DataFrame(y_pred)\ndf.index.name = \"id\"\ndf.columns = [\"Churn\"]\ndf.to_csv(\"gbc_model.csv\")","e59059d2":"\u041c\u043e\u0434\u0435\u043b\u044c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0441 \u043a\u0440\u043e\u0441\u0441\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439","f6465748":"# \u042d\u0442\u0430\u043f 3: \u041c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n\n1) \u0412\u044b\u0431\u043e\u0440 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0439\n\n2) \u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n\n3) \u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\n\n","c4225e93":"\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0438 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0438\u043c\u044e\u0442 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043d\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e","bc82f0d4":"# \u042d\u0442\u0430\u043f 2: \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445:\n1) \u041d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u043c\u0435\u044e\u0449\u0438\u0435 2 \u0433\u0440\u0430\u0434\u0430\u0446\u0438\u0438 \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u0435\u0436\u043d\u0438\u043c\u0438, \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f [\"Yes\",\"No\"] \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 [1,0] \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\n\n2) \u041d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 3 \u0433\u0440\u0430\u0434\u0430\u0446\u0438\u044f\u043c\u0438 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u044b \u043d\u0430 \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n\n3) \u0412\u044b\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0438 \u0443\u0434\u0430\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u0438\u043b\u044c\u043d\u043e\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u043f\u0430\u0440\u043e\u0433 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 - 0.8 \u043f\u043e \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e)","41f8ec36":"# \u042d\u0442\u0430\u043f 1: \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","09406f1e":"\u041c\u043e\u0434\u0435\u043b\u044c \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0430","6d1b5432":"\u041c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0435 \u0432\u044b\u0432\u043e\u0434\u044b:\n1) \u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 19 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\n\n2) \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435\n\n3) \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\n\n4) \u041f\u0440\u0438\u0437\u043d\u0430\u043a \"TotalSpent\" \u0438\u043c\u0435\u0435\u0442 \u043f\u0443\u0441\u0442\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438","311b11c3":"\u0412\u043d\u0430\u0447\u0430\u043b\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0434\u043b\u044f \u043e\u0431\u043b\u0435\u0433\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"}}