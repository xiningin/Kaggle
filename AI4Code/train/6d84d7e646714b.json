{"cell_type":{"64468b38":"code","1fd733e3":"code","86f1a932":"code","b855c19c":"code","971a7d0f":"code","e2a35f70":"code","664e233b":"code","aaea9aef":"code","9613a815":"code","3c21cfb3":"code","2cab0a76":"code","a56ec676":"code","7d032165":"code","0bfc3cca":"code","ee84d4e5":"code","418eacc8":"code","98b28009":"code","080fbd74":"code","abd3d46a":"code","67de572a":"code","869c73d2":"code","170e70a7":"code","20d7455d":"code","2d89b68d":"code","8d8cdde4":"code","feaf12fa":"code","0beb715d":"code","9e27f684":"code","65b292ce":"code","e980256d":"code","b7d83eda":"code","7275a92b":"code","0c574a2a":"code","52a4c467":"code","6a8a5b6e":"code","0aaf24e8":"code","8f9fc274":"code","b13d5a72":"code","408df0b4":"code","da20a4f1":"code","a8c212c3":"code","ea144ec9":"code","559dce9d":"code","aaf9e836":"code","b7c94088":"code","9472a2e0":"code","977239b9":"code","ed02e385":"markdown","2c7f93d7":"markdown","7800d893":"markdown","073f4247":"markdown","300ec0e1":"markdown","2116596b":"markdown","2f3ca0a8":"markdown"},"source":{"64468b38":"#importando as bibliotecas necess\u00e1ria\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport seaborn as sns","1fd733e3":"train_data = pd.read_csv(\"..\/input\/adult-pmr3508\/train_data.csv\",na_values=\"?\")\ntrain_data = train_data.set_index('Id')","86f1a932":"#vis\u00e3o geral da base de dados\ntrain_data.head()","b855c19c":"#lista com o nome das colunas para facilitar pr\u00f3ximas analises\ntrain_data.columns","971a7d0f":"#descrevendo a base para verificar anormalidades\ntrain_data.describe()","e2a35f70":"#aqui podemos ver que temos 3 colunas com grandes quantidades de missing data\ntrain_data.isnull().sum()\n","664e233b":"#verificando as colunas\nprint(train_data['workclass'].describe())\nprint()\nprint()\nprint(train_data['occupation'].describe())\nprint()\nprint()\nprint(train_data['native.country'].describe())","aaea9aef":"#preenchendo os missing data com a moda\nmoda1 = train_data['workclass'].mode()[0]\ntrain_data['workclass'].fillna(moda1, inplace = True)\n\nmoda2 = train_data['occupation'].mode()[0]\ntrain_data['occupation'].fillna(moda2,inplace = True)\n\nmoda3 = train_data['native.country'].mode()[0]\ntrain_data['native.country'].fillna(moda3,inplace = True)","9613a815":"#missing data preenchida com sucesso\ntrain_data.isnull().sum()\n","3c21cfb3":"train_data.columns","2cab0a76":"#aqui vemos que o income esta relacionado com sexo\nsns.countplot( x = \"sex\", data = train_data,palette = 'hls',hue = \"income\", )","a56ec676":"# e tamb\u00e9m income esta relacionado com idade\nsns.countplot( x = \"age\", data = train_data,palette = 'hls',hue = \"income\", saturation = 10)","7d032165":"#podemos ver que quem trabalha mais tem uma pequena tendencia a ganhar mais\nsns.catplot(x = 'hours.per.week',y='income',data = train_data,kind = 'bar', palette = 'hls',hue = \"income\", saturation = 10)","0bfc3cca":"#Primeiro vamos transformar as variaveis categoricas em nao categoricas\ntrain_data.dtypes","ee84d4e5":"obj = train_data.select_dtypes(['object']).columns\ntrain_data[obj] = train_data[obj].astype('category')\ntrain_data[obj]=train_data[obj].apply(lambda x: x.cat.codes)\ntrain_data[obj]","418eacc8":"train_data['income'].value_counts()","98b28009":"#analisando os paises vemos que temos uma maioria absoluta, para fins de precis\u00e3o vamos substituir o 39 por 1 e o resto por 0\ntrain_data['native.country'].value_counts()","080fbd74":"def converte(x):\n    if x == 39:\n        x = 1\n    else:\n        x = 0\n    return x\ntrain_data['native.country'] = train_data['native.country'].apply(converte)","abd3d46a":"train_data['native.country'].value_counts()","67de572a":"train_data = train_data.drop(columns = 'fnlwgt')","869c73d2":"#por ter vers\u00e3o num\u00e9rica, podemos dropar education\ntrain_data.drop(columns = ['education'],inplace = True)\n","170e70a7":"train_data['education.num'].dtype","20d7455d":"#Aqui vemos que nenhuma das colunas possuem grande correla\u00e7\u00f5es, podemos seguir com an\u00e1lise\nsns.heatmap(train_data.corr())","2d89b68d":"train_data.head()","8d8cdde4":"test_data = pd.read_csv(\"..\/input\/adult-pmr3508\/test_data.csv\",na_values = \"?\")\ntest_data.set_index('Id',inplace = True)","feaf12fa":"#preenchendo os missing data com a moda\nmoda1 = test_data['workclass'].mode()[0]\ntest_data['workclass'].fillna(moda1, inplace = True)\n\nmoda2 = test_data['occupation'].mode()[0]\ntest_data['occupation'].fillna(moda2,inplace = True)\n\nmoda3 = test_data['native.country'].mode()[0]\ntest_data['native.country'].fillna(moda3,inplace = True)\n","0beb715d":"obj = test_data.select_dtypes(['object']).columns\ntest_data[obj] = test_data[obj].astype('category')\ntest_data[obj]=test_data[obj].apply(lambda x: x.cat.codes)\ntest_data[obj]","9e27f684":"test_data['native.country']","65b292ce":"def converte2(x):\n    if x == 38:\n        x = 1\n    else:\n        x = 0\n    return x\ntest_data['native.country'] = test_data['native.country'].apply(converte2)\ntest_data.drop(columns = ['education','fnlwgt'],inplace = True)","e980256d":"import sklearn\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler","b7d83eda":"scaler = StandardScaler()","7275a92b":"scaler.fit(train_data.drop('income',axis = 1))","0c574a2a":"train_normalizado = scaler.transform(train_data.drop('income',axis = 1))","52a4c467":"train = pd.DataFrame(train_normalizado,columns = train_data.columns[:-1])","6a8a5b6e":"train","0aaf24e8":"scaler.fit(test_data)\ntest_normalizado = scaler.transform(test_data)\ntest = pd.DataFrame(test_normalizado,columns = test_data.columns)\ntest","8f9fc274":"x_train = train\ny_train = train_data.income","b13d5a72":"'''%%time\n\nacc = []\n\nfor k in range(15, 40):\n    knn = KNeighborsClassifier(k, p = 1)\n    scores = cross_val_score(knn, x_train, y_train, cv = 10)\n    acc.append(np.mean(scores))\n\nbestK = np.argmax(acc) + 15\nprint(\"Best acc: {}, K = {}\".format(max(acc), bestK))'''","408df0b4":"knn = KNeighborsClassifier(32, p = 1)\nscores = cross_val_score(knn, x_train, y_train, cv = 10)\nprint(scores)\nnp.mean(scores)","da20a4f1":"knn.fit(x_train, y_train)","a8c212c3":"x_test = test\ny_test = knn.predict(x_test)","ea144ec9":"#aqui ainda est\u00e1 bin\u00e1rio, para ver basta contar os valores, o que tiver mais \u00e9 income maior que 50k\ny_test","559dce9d":"#aqui podemos ver que est\u00e1 relativamente coerente com a base de treinos, e que o 0 correspondo a menos que 50k\ny_test = pd.DataFrame(y_test)\ny_test[0].value_counts()","aaf9e836":"#convertendo\ndef volta(x):\n    if x == 0:\n        x = '<=50K'\n    else:\n        x = '>50K'\n    return x\n        \nprediction = y_test\nprediction.columns = ['income']\nprediction = prediction['income'].apply(volta)\n","b7c94088":"prediction = pd.DataFrame(prediction)\nprediction['Id'] = prediction.index\nprediction = prediction[['Id','income']]","9472a2e0":"prediction.head()","977239b9":"prediction.to_csv('prediction.csv',index = False)","ed02e385":"# Data Prep","2c7f93d7":"## Realizando Algumas An\u00e1lises","7800d893":"## Dados teste","073f4247":"## KNN","300ec0e1":"# Normalizando as bases e aplicando KNN","2116596b":"# Predi\u00e7\u00e3o","2f3ca0a8":"## Visualizando os Dados\n* Nosso objetivo \u00e9 fazer an\u00e1lises de acordo com o income da pessoa"}}