{"cell_type":{"d2c18d37":"code","c725aedd":"code","46555594":"code","0fff7a5c":"code","17297f0f":"code","dc6cf453":"code","e78fc927":"code","2cf1ef03":"code","9cee492e":"code","06bc6550":"code","f4b9cfca":"code","3ca550be":"code","bf91609c":"code","aa1ef315":"code","0245ad6e":"code","3433635c":"code","52113ca0":"code","a1bc31dd":"code","243303a2":"code","e55b8bd0":"code","0f771944":"code","0ca03d7f":"code","a031814c":"code","f08485e1":"code","6fbf1893":"code","e5e7d202":"code","caaa8873":"code","7ba48000":"code","a8d49333":"code","9eca7d38":"code","4c5ae0a2":"code","75a7df32":"code","7d521aa9":"code","e5d8e507":"code","ccfa92ba":"code","6749709e":"code","24bae67a":"code","d5238ea7":"code","be21f2ea":"code","482f9a42":"code","d85cbc58":"code","c935c29b":"code","faa56cd8":"code","18910ed9":"code","353ebd0e":"code","12d48a73":"code","9545721a":"code","d53b3ca2":"code","725337f6":"code","2586ca3b":"markdown","356d5da4":"markdown","ed60d95f":"markdown","bd400302":"markdown","70c8d8d1":"markdown","bdf041ad":"markdown","a559056b":"markdown","d52ff345":"markdown","1b28ac5d":"markdown","73570e27":"markdown","f0d8e70d":"markdown","0fdb4ab5":"markdown","8a8ae9c2":"markdown","0c875b25":"markdown","4fb3c3a9":"markdown","8f863beb":"markdown","ebf1bbbc":"markdown","2eb049e1":"markdown","2c2c23d2":"markdown","244c5313":"markdown","b9e7c5bc":"markdown"},"source":{"d2c18d37":"import pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nimport seaborn as sns\nimport numpy as np\nimport json\nimport warnings\nwarnings.filterwarnings('ignore')\nimport base64\nimport io\nfrom matplotlib.pyplot import imread\nimport codecs\nfrom IPython.display import HTML","c725aedd":"movies = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\ncredits = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')","46555594":"movies.head()","0fff7a5c":"movies.describe()","17297f0f":"credits.head()","dc6cf453":"credits.describe()","e78fc927":"# changing the genres column from json to string\nmovies['genres'] = movies['genres'].apply(json.loads)\nfor index,i in zip(movies.index,movies['genres']):\n    list1 = []\n    for j in range(len(i)):\n        list1.append((i[j]['name'])) # the key 'name' contains the name of the genre\n    movies.loc[index,'genres'] = str(list1)\n\n# changing the keywords column from json to string\nmovies['keywords'] = movies['keywords'].apply(json.loads)\nfor index,i in zip(movies.index,movies['keywords']):\n    list1 = []\n    for j in range(len(i)):\n        list1.append((i[j]['name']))\n    movies.loc[index,'keywords'] = str(list1)\n    \n# changing the production_companies column from json to string\nmovies['production_companies'] = movies['production_companies'].apply(json.loads)\nfor index,i in zip(movies.index,movies['production_companies']):\n    list1 = []\n    for j in range(len(i)):\n        list1.append((i[j]['name']))\n    movies.loc[index,'production_companies'] = str(list1)\n\n# changing the cast column from json to string\ncredits['cast'] = credits['cast'].apply(json.loads)\nfor index,i in zip(credits.index,credits['cast']):\n    list1 = []\n    for j in range(len(i)):\n        list1.append((i[j]['name']))\n    credits.loc[index,'cast'] = str(list1)\n\n# changing the crew column from json to string    \ncredits['crew'] = credits['crew'].apply(json.loads)\ndef director(x):\n    for i in x:\n        if i['job'] == 'Director':\n            return i['name']\ncredits['crew'] = credits['crew'].apply(director)\ncredits.rename(columns={'crew':'director'},inplace=True)","2cf1ef03":"movies.head()","9cee492e":"movies.iloc[25]","06bc6550":"movies = movies.merge(credits,left_on='id',right_on='movie_id',how='left')\nmovies = movies[['id','original_title','genres','cast','vote_average','director','keywords']]","f4b9cfca":"movies.iloc[25]","3ca550be":"movies.shape","bf91609c":"movies.size","aa1ef315":"movies.index","0245ad6e":"movies.columns","3433635c":"movies.dtypes","52113ca0":"movies['genres'] = movies['genres'].str.strip('[]').str.replace(' ','').str.replace(\"'\",'')\nmovies['genres'] = movies['genres'].str.split(',')","a1bc31dd":"plt.subplots(figsize=(12,10))\nlist1 = []\nfor i in movies['genres']:\n    list1.extend(i)\nax = pd.Series(list1).value_counts()[:10].sort_values(ascending=True).plot.barh(width=0.9,color=sns.color_palette('hls',10))\nfor i, v in enumerate(pd.Series(list1).value_counts()[:10].sort_values(ascending=True).values): \n    ax.text(.8, i, v,fontsize=12,color='white',weight='bold')\nplt.title('Top Genres')\nplt.show()","243303a2":"for i,j in zip(movies['genres'],movies.index):\n    list2=[]\n    list2=i\n    list2.sort()\n    movies.loc[j,'genres']=str(list2)\nmovies['genres'] = movies['genres'].str.strip('[]').str.replace(' ','').str.replace(\"'\",'')\nmovies['genres'] = movies['genres'].str.split(',')","e55b8bd0":"genreList = []\nfor index, row in movies.iterrows():\n    genres = row[\"genres\"]\n    \n    for genre in genres:\n        if genre not in genreList:\n            genreList.append(genre)\ngenreList[:10] #now we have a list with unique genres","0f771944":"def binary(genre_list):\n    binaryList = []\n    \n    for genre in genreList:\n        if genre in genre_list:\n            binaryList.append(1)\n        else:\n            binaryList.append(0)\n    \n    return binaryList","0ca03d7f":"movies['genres_bin'] = movies['genres'].apply(lambda x: binary(x))\nmovies['genres_bin'].head()","a031814c":"movies['cast'] = movies['cast'].str.strip('[]').str.replace(' ','').str.replace(\"'\",'').str.replace('\"','')\nmovies['cast'] = movies['cast'].str.split(',')","f08485e1":"plt.subplots(figsize=(12,10))\nlist1=[]\nfor i in movies['cast']:\n    list1.extend(i)\nax=pd.Series(list1).value_counts()[:15].sort_values(ascending=True).plot.barh(width=0.9,color=sns.color_palette('muted',40))\nfor i, v in enumerate(pd.Series(list1).value_counts()[:15].sort_values(ascending=True).values): \n    ax.text(.8, i, v,fontsize=10,color='white',weight='bold')\nplt.title('Actors with highest appearance')\nplt.show()","6fbf1893":"for i,j in zip(movies['cast'],movies.index):\n    list2 = []\n    list2 = i[:4]\n    movies.loc[j,'cast'] = str(list2)\nmovies['cast'] = movies['cast'].str.strip('[]').str.replace(' ','').str.replace(\"'\",'')\nmovies['cast'] = movies['cast'].str.split(',')\nfor i,j in zip(movies['cast'],movies.index):\n    list2 = []\n    list2 = i\n    list2.sort()\n    movies.loc[j,'cast'] = str(list2)\nmovies['cast']=movies['cast'].str.strip('[]').str.replace(' ','').str.replace(\"'\",'')","e5e7d202":"castList = []\nfor index, row in movies.iterrows():\n    cast = row[\"cast\"]\n    \n    for i in cast:\n        if i not in castList:\n            castList.append(i)","caaa8873":"def binary(cast_list):\n    binaryList = []\n    \n    for genre in castList:\n        if genre in cast_list:\n            binaryList.append(1)\n        else:\n            binaryList.append(0)\n    \n    return binaryList","7ba48000":"movies['cast_bin'] = movies['cast'].apply(lambda x: binary(x))\nmovies['cast_bin'].head()","a8d49333":"def xstr(s):\n    if s is None:\n        return ''\n    return str(s)\nmovies['director'] = movies['director'].apply(xstr)","9eca7d38":"plt.subplots(figsize=(12,10))\nax = movies[movies['director']!=''].director.value_counts()[:10].sort_values(ascending=True).plot.barh(width=0.9,color=sns.color_palette('muted',40))\nfor i, v in enumerate(movies[movies['director']!=''].director.value_counts()[:10].sort_values(ascending=True).values): \n    ax.text(.5, i, v,fontsize=12,color='white',weight='bold')\nplt.title('Directors with highest movies')\nplt.show()","4c5ae0a2":"directorList=[]\nfor i in movies['director']:\n    if i not in directorList:\n        directorList.append(i)","75a7df32":"def binary(director_list):\n    binaryList = []  \n    for direct in directorList:\n        if direct in director_list:\n            binaryList.append(1)\n        else:\n            binaryList.append(0)\n    return binaryList","7d521aa9":"movies['director_bin'] = movies['director'].apply(lambda x: binary(x))\nmovies.head()","e5d8e507":"from wordcloud import WordCloud, STOPWORDS\nimport nltk\nfrom nltk.corpus import stopwords","ccfa92ba":"plt.subplots(figsize=(12,12))\nstop_words = set(stopwords.words('english'))\nstop_words.update(',',';','!','?','.','(',')','$','#','+',':','...',' ','')\n\nwords=movies['keywords'].dropna().apply(nltk.word_tokenize)\nword=[]\nfor i in words:\n    word.extend(i)\nword=pd.Series(word)\nword=([i for i in word.str.lower() if i not in stop_words])\nwc = WordCloud(background_color=\"black\", max_words=2000, stopwords=STOPWORDS, max_font_size= 60,width=1000,height=1000)\nwc.generate(\" \".join(word))\nplt.imshow(wc)\nplt.axis('off')\nfig=plt.gcf()\nfig.set_size_inches(10,10)\nplt.show()","6749709e":"movies['keywords'] = movies['keywords'].str.strip('[]').str.replace(' ','').str.replace(\"'\",'').str.replace('\"','')\nmovies['keywords'] = movies['keywords'].str.split(',')\nfor i,j in zip(movies['keywords'],movies.index):\n    list2 = []\n    list2 = i\n    movies.loc[j,'keywords'] = str(list2)\nmovies['keywords'] = movies['keywords'].str.strip('[]').str.replace(' ','').str.replace(\"'\",'')\nmovies['keywords'] = movies['keywords'].str.split(',')\nfor i,j in zip(movies['keywords'],movies.index):\n    list2 = []\n    list2 = i\n    list2.sort()\n    movies.loc[j,'keywords'] = str(list2)\nmovies['keywords'] = movies['keywords'].str.strip('[]').str.replace(' ','').str.replace(\"'\",'')\nmovies['keywords'] = movies['keywords'].str.split(',')","24bae67a":"words_list = []\nfor index, row in movies.iterrows():\n    genres = row[\"keywords\"]\n    \n    for genre in genres:\n        if genre not in words_list:\n            words_list.append(genre)","d5238ea7":"def binary(words):\n    binaryList = []\n    for genre in words_list:\n        if genre in words:\n            binaryList.append(1)\n        else:\n            binaryList.append(0)\n    return binaryList","be21f2ea":"movies['words_bin'] = movies['keywords'].apply(lambda x: binary(x))\nmovies = movies[(movies['vote_average']!=0)] #removing the movies with 0 score and without drector names \nmovies = movies[movies['director']!='']","482f9a42":"from scipy import spatial\n\ndef Similarity(movieId1, movieId2):\n    a = movies.iloc[movieId1]\n    b = movies.iloc[movieId2]\n    \n    genresA = a['genres_bin']\n    genresB = b['genres_bin']\n    \n    genreDistance = spatial.distance.cosine(genresA, genresB)\n    \n    scoreA = a['cast_bin']\n    scoreB = b['cast_bin']\n    scoreDistance = spatial.distance.cosine(scoreA, scoreB)\n    \n    directA = a['director_bin']\n    directB = b['director_bin']\n    directDistance = spatial.distance.cosine(directA, directB)\n    \n    wordsA = a['words_bin']\n    wordsB = b['words_bin']\n    wordsDistance = spatial.distance.cosine(directA, directB)\n    return genreDistance + directDistance + scoreDistance + wordsDistance","d85cbc58":"Similarity(3,160) #checking similarity between any 2 random movies","c935c29b":"print(movies.iloc[3])\nprint(movies.iloc[160])","faa56cd8":"new_id = list(range(0,movies.shape[0]))\nmovies['new_id']=new_id\nmovies=movies[['original_title','genres','vote_average','genres_bin','cast_bin','new_id','director','director_bin','words_bin']]\nmovies.head()","18910ed9":"import operator\n\ndef predict_score(name):\n    #name = input('Enter a movie title: ')\n    new_movie = movies[movies['original_title'].str.contains(name)].iloc[0].to_frame().T\n    print('Selected Movie: ',new_movie.original_title.values[0])\n    def getNeighbors(baseMovie, K):\n        distances = []\n    \n        for index, movie in movies.iterrows():\n            if movie['new_id'] != baseMovie['new_id'].values[0]:\n                dist = Similarity(baseMovie['new_id'].values[0], movie['new_id'])\n                distances.append((movie['new_id'], dist))\n    \n        distances.sort(key=operator.itemgetter(1))\n        neighbors = []\n    \n        for x in range(K):\n            neighbors.append(distances[x])\n        return neighbors\n\n    K = 10\n    avgRating = 0\n    neighbors = getNeighbors(new_movie, K)\n    \n    print('\\nRecommended Movies: \\n')\n    for neighbor in neighbors:\n        avgRating = avgRating+movies.iloc[neighbor[0]][2]  \n        print( movies.iloc[neighbor[0]][0]+\" | Genres: \"+str(movies.iloc[neighbor[0]][1]).strip('[]').replace(' ','')+\" | Rating: \"+str(movies.iloc[neighbor[0]][2]))\n    \n    print('\\n')\n    avgRating = avgRating\/K\n    print('The predicted rating for %s is: %f' %(new_movie['original_title'].values[0],avgRating))\n    print('The actual rating for %s is %f' %(new_movie['original_title'].values[0],new_movie['vote_average']))","353ebd0e":"predict_score('Godfather')","12d48a73":"predict_score('Donnie Darko')","9545721a":"predict_score('Notting Hill')","d53b3ca2":"predict_score('Despicable Me')","725337f6":"#predict_score()","2586ca3b":"Now lets generate a list 'genreList' with all possible unique genres mentioned in the dataset.\n\n","356d5da4":"## **Working with the Genres column**","ed60d95f":"## **Score Predictor**","bd400302":"### **Merging the two csv files**","70c8d8d1":"Above is a wordcloud showing the major keywords or tags used for describing the movies.\n","bdf041ad":"## **Working with Director column**","a559056b":"It is evident that The Dark Knight Rises and How to train your Dragon 2 are very different movies. Thus the distance is huge.\n\n","d52ff345":"We will we using Cosine Similarity for finding the similarity between 2 movies. ","1b28ac5d":"## **Working with the Cast Column**\n ","73570e27":"### Thus we have completed the Movie Recommendation System implementation using K Nearest Neighbors algorithm.\n### Do give an upvote if you found this kernel useful :)","f0d8e70d":"Drama appears to be the most popular genre followed by Comedy.","0fdb4ab5":"### **Import the required Python libraries**","8a8ae9c2":"## **Working with the Keywords column**","0c875b25":"## TMDB Score Prediction and Movie Recommendation\n\n","4fb3c3a9":"**Converting JSON into strings**","8f863beb":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAsICBUREBYVEBUXFRUWEBIaEhcVFxYVFhUWHhofIB4YHR0hJjQtISUxJRseLUAtMTc5PD08HypDSUI\/SDU7PDkBDA0NEhASIhMTIj0lJy8+Pzk9OTo+RTpFPUI\/OTlFPTk5PT49PT05RTlFOTlCOj05PT05OT45QD05PTk9PTo5Of\/AABEIAE0CWAMBIgACEQEDEQH\/xAAbAAADAQEBAQEAAAAAAAAAAAAAAQYFAgQDB\/\/EAD8QAAIBAQIJCQUIAgIDAAAAAAABAgMEEQUGEiExcXKxwTM0QVFhgZGh0RMVMmKiFCIjQlNzkuFSYxaCstLw\/8QAGgEAAgMBAQAAAAAAAAAAAAAAAQIDBAUABv\/EADARAAIBAgIHBgcBAQAAAAAAAAABAgMEETESITIzQYGxFCJRUnHRBRNhkaHB8CPx\/9oADAMBAAIRAxEAPwC5w5y\/\/SJms1sMUJSrXxhKSyFnSbV+fqPB9jqfpS\/jL0IZZlConpM+AH3+x1P0pfxl6HwaubTzNPPf1nEbTQHLOj6Rss5JOMJNPQ1GTT77ggwxPgdUvjW0t59vsVX9Of8AGXoOnY6mUvw5aV+WXXqGBg\/ArwABzVM\/DfN5a47yVZVYb5u9qO8lWAz7nb5CGndnQgCVS0sVo9rSjPrWfWsz80fcw8XbRfGUH0PKjqenz3m4ca1KWlBMAA81utHsqMpdKjm1vMvM4dvBYsmML2n2teTWiOaOpf3eeEAHRiSk5PSfERs4tcrPZ4mMbOLXKz2eIXkSW+9iUwABGbBiYytqnC7N957iay31vxKTGbk4bT3EyTQyMe73r5Dyn1vxYe0fW\/FiSv0ZxuD6n4Mcq4ncbVUXwyktUpLiemlhmvHRUb13S3niau05tYg4HKpJZN\/c37NjQ9FaC2o+j9Tds1rhVjfTkpLpu0rWuggz6We0ypSUqcnFrwa6mulCOmnkWqV7OOqetfkvwM\/BmEo2iF+ia+KPV26maBC1ga0ZKS0o5AAAAYncapNKlc7s89HcTeW+t+ZR416KWufAmy3T2UYN4\/8AaXLoh+0fW\/MWW+t+Z3Qs8qrupxcndfdHTdelf5o9Hue0fpSJMUisozlrSb+55VWktEmtTaPvTwrXj8NWXe3I5q4PqwV86ckutp3eJ5xsEwYzg8Na+6KPB+M97StCST\/Os12uPFeBSRkmk0701emuk\/NirxWtrlCVOTvyLnHU7713PeV6tJJaUTTs7uUpfLnr8GUAABWNUAADjgPhabTGlByqSUYrpe5LS2c262RoU3OehaEtMn0JELb8ITtE8qb68mK+GK6l6k1Kk5+hTuruNBYLXL+zNe241ybaoRSX+TzyepaF33mNWwlWqfHUk+y9peCzHmEXo04xyRg1LirUfek+gNiBgSorgAAEACYxMIoCGIKAITGJhOGcs6OWEUbENiCgAIYggEMQxhT6UrXUhnhKUfFbjWseNVencptVV0pq59zXG8xAElThPaWJNTuKtPYk1\/eGR+i4Mw3StK+47ppZ4PTrXWjSPymE3FpxbUk7007mn2MuMXsO\/aFkVM1SKzP\/ADj1mbcWugtKGXQ37H4j85\/LqapcHwfszeAAKRrgAAccBG2jlJ7ct7LIjbRyk9uW9iTK1xkjgqsF83p7PFkqVWC+b09nizo5iW+0z1gADlwAADjjPw3zeWuO8lWVWG+bvajvJVgM+52+R9bJSU6kYvRKSXifKUWm09KbT1p3Hpwdy9P9xH2w3Z8iu2tE1lLX0+e8JDo9zS+p8cG2j2deL6G7panm9PAsSDZZYOtHtaMZdN10tazM4s2ks48z1GBjJaPgprXLcuJvkXhGv7WtOXRlXR1LMt3mFEl1LCGHieU+9az5FKnJ6Z+0fcmkuJ8qdNykktMpJLW2bGMFJRVGK0RjNLuuQxnRjjCUvDDqjENnFrlZ7PExjZxa5WezxC8hqG9iUwABGbBh4zcnDae4mSmxm5OG09xMk0MjHu96+RqYvc5WzIriSxd5wtmRWiTzLlluufscSpqXxJPWkzOtWAqNS+5ZEuuPpoNQBU8CzOEZrCSxIa34OnQldPOn8Ml8L9H2HkLy2WVVqbhLpWZ9T6GQs4OMmnpjJp607mTwlpGPc0PlS1ZM+thtjo1VOPR8S610ou4TUkms6aTT7GfnjLHF+vl2aN+mMpRfjevJoFVcSawqa3B+pqAAEBqk5jXopa58CbKTGvRS1z4E2XKeyjBvN9Ll0RtYrc4l+y\/\/ACiVpHYt1owrSc5JL2bV7dyvvWbyZUfb6X6kf5IgqrvGhZSSorF+J6SRxmsUadSMoK7LUspLRers93RpKGrhajBXyqR1L7z8ESWGMJ\/aKiaV0Iq6KentbGoxlpYiX1Sm6ejji+BnG9iovxp7GfxRglhi5g90qTnNXSqXZn0JX3eN9\/gT1mlFmfZQcqya4azbAAKJ6EAA8uELR7KhOa0qLu16F5nYYgbSWLJHGDCDrV8mL+5C9R6nLr4dxlMEDNWMVFYI8nUqOpJzlmxAADEbOWAMBkAAAAgATGJhFAQxBQBCYxMJwzlnRywijYhsQUABDEEAhiGMKIAAKOEd0a0qc1ODuaknF9qOAYQZa0fp2DrYq9GNRfmWddTWZrxTEYGJdqvhUpv8rjKOp5nuXiBgVqap1HE9ra1vnUY1Hm8\/XiVQABEWAI20cpPblvZZEbaOUnty3sSZWuMkcFVgvm9PZ4slSqwXzens8WdHMS32mesAAcuAAAccZ+G+by1x3kqyqw3zeWuO8lWAz7nb5Hpwdy9P9xGzjBZ8qkprTB59Uv7SMbB3L0\/3EVlooqpTlF\/mi0EahHSpyiRDNzFy05503rjx4GLKLTaelNp60fWw2j2VaEuhSz6nmfkwlalPQmmVGFLR7OhJrM2smOt5iPNvGK0XzjBaIrKet6PK\/wATECh7qWM8PA08A2fLr5T0QTfe8y4vuPTjP8VLVPgezF+z5FDKembv7lmXF9548Z\/ipap8DuJK4aNt64P8owTZxa5WezxMY2cWuVns8RnkVrfexKYAAjNgw8ZuThtPcTJTYzcnDae4mSaGRj3e9fI1cXecLZkVpJYu84WzIrRJ5lyy3fP2AAAQuAROGoXWqpd\/kn3uKb8y2IXCdb2loqSWhyuWpZk\/IlpZlC\/2Evr+jyMp8V3+HNfOn4r+iYZU4rwuoyfXU3JepJU2SnZb5czcAAKxtk5jXopa58CbKTGvRS1z4E2XKeyjAvN9Ll0QhHpsVilXnkQuvyW87uVyaXE0f+L1+uP8v6Gc4rNkMaFSaxjHExQNiWLNZLNkvU\/VGbabHUpO6pBxv0N6HqegaM4vJizo1ILGUWjYwNSsuUnKWVUv+6prJjf2dDet9xVn5oUOL+GJKao1HfF5oN6Yvqv6n0ENWm33kzQs7qMcKbSWPFfvHriVQABVNcDIxlldZJ9soLzT4GuZeH6eVZKl3RkvwaHp7SILlN0ZpeD6EMDENmmeWEAAEDOWAMBkAAAAgATGJhFAQxBQBCYxMJwzlnRywijYhsQUABDEEAhiGMKIAAKOEDAGEBQ4myutMl10XvTEfTEum3WqS6FTS721duYjFvWvm8kes+FYq2Xq+pagAFU0QI20cpPblvZZEbaOUnty3sSZWuMkcFVgvm9PZ4slSqwXzens8WdHMS32mesAAcuAAAccZ+G+by1x3kqyqw3zeWuO8lWAz7nb5Hpwdy9P9xFiR2DuXp\/uIsQktrsv1\/RJ4bs+RXbWiSUlr6fO\/wATPKTGGz5VJTWmDz6n\/dxNhRVrx0Zs6nNyd8ne7ks\/UlcvJCp03OSjHTKSS7xGpi\/Qy6zk9EU33vMvK8JFCOnJLxKWnBQiorQkktSRg4z\/ABUtU+BQk9jP8VLVPgBZmlc7p8uqME2cWuVns8TGNnFrlZ7PEd5Gfb72JTAAEZsGHjNycNp7iZKbGbk4bT3EyTQyMe73r5Gri7zhbMitIrBVrjRrKc77slrMr3eze\/5HQ65eAs02yxaVYRp4SaWs1wMaeMtJfCpPuS4ngtOMs5XqnBQ7W8p93QvMVQZPK6pR44+hqYYwiqFNqL\/Ekrorq7SPOqlSU5Nybbelt3s5LEY6KMqvWdWWPDgJlzgyzeyoQi9KV8tbzveT+AcGupNVZr7kX92\/8z9EVhFVljqLtjSwTqPjkAABEaJOY16KWufAmykxr0Utc+BNlynsowLzfS5dEbOK3OJftveiuI3F60RpVpOclGPsmr27lfes3kyl970P1Y+JDVTcsjQspxVJJtLPie08tvoRq0Zxkr1kvuazpnHveh+rExsLYwxlBwoXu9XSm00kulJPPeJGEm9RPVr0oweLT+niTSHGbi01pi01rvvEdQpuUlFZ3KSS133Ggea1n6NTllRT60n4o7OKccmKXUkvBHZmHrQPnWpKcHGWiUWnqZ9AOOPzWvQlTm4T+KMmn6nDKnGXBTl+NTV7SSqJdKWh93T2aiVNOnPTWJ5a4oOjNweXD0AAAkK7OWAMBkAAAAgATGJhFAQxBQBCYxMJwzlnRywijYhsQUABDEEAhiGMKIAAKOEJjNPAmCXaqqvV1OLTnq6l2glJRTlLIanTlUkoQ1tlPirYvZWbKkrpVHe9SzLi+8ZtxikrkrklckBgTnpycnxPa0aSpU1TXBHQAAhKBG2jlJ7ct7LIkq9H8SWf88ujtYkytcZI85VYL5vT2eLJn2Hb5FNgxfgQ2eLOiJb7TPWAAOXAAAOOM\/DfN3tR3kqyrwyr7PLXHeTPse3yAULld\/kfTB3L0\/3EWJJYPo3V6bv\/ADroK0JLa7L9f0fK0UVUpyi\/zRaIhxabTzNNp6y8JXCtmStE7nde4vR0tZwoW7jilIzSowFZ8igm9M25d2heWfvJ1UL3p03LR2lpCCikloSSRzI7WHecnwOiexn+KlqnwKEwMZKd8qWfonwOWZYud0+XVE+bOLXKz2eJmew7fI1sXad1WWe\/7i3jvIz6C\/0iUYABGbBh4zcnDae4mSmxm5OG09xMk0MjHu96+QmDBgxyqAM+lGllu6+7uvN2z4sxdznUb7FHJ4s5ySGp0Z1NUUTtxs4NwBKd0q18Y5nk\/ml\/6o3rLg2lR+CCv\/yeeXi9B7SN1PA0KVilrqPH6HFOmoxSikklcktCR2AERoAAAccTmNeilrnwJspMa9FLXPgTZcp7KMG830uXRCEMRIU2DA7pwvem42bHi4qivdVpdSit95zko5klKjOq8ILEwSlwBgdqSrVVdd8EXp1vgadiwJRou9Rypf5Sz3aloRplepWxWETTt7HQlpVM1wAAArmmAABxwEthjFx3upZ12yprTrj\/APaipAeE3B4ohrUIVo6M\/wDh+ZNNNppprSmrmtaEfoFswZSr8rBN9azPy0mPasUo6YVZR7Gr+KLkbiLz1GJV+HVYvu95fb++5KsDTqYHufKX\/wDVepz7r+fyJ9OJV7NV8vT3M4DQ91fP5f2L3V8\/l\/YdOIOz1fL09zPBmh7q+fy\/sfun5\/pXqHTQOzVfL09zOEaHun5\/pQe6fn+leodOIvZ6vl6e5nCZp+6Pn+leovdPz\/SvUbTiDs9Xy9Pczjlml7o+f6f7D3T8\/wBP9nacRez1fL09zOYjR90\/P9K9Q90f7PpXqNpxO7NV8vT3M4Rpe6Pn+leovdH+z6V6h04g7NV8vT3M0Zo+6P8AZ9K9Q90f7PpXqHTiDs1by\/le5mgUVjxUVR56t2fohn8bzcseLVCi08lzktDm7\/IhndU4as2WaXwy4qa2lFfV+2JK4KwBUtLTucKd+eUlpXYuncXdjscKEFCkrorxb62+k++gZm1q8qr16l4G\/a2VO2Xd1vx\/sgAAIC4f\/9k=)\n\n### Recommendation systems are becoming increasingly important in today\u2019s hectic world. People are always in the lookout for products\/services that are best suited for them. Therefore, the recommendation systems are important as they help them make the right choices, without having to expend their cognitive resources.\n\n### In this kernel, I will build a Movie Recommendation System using collaborative filtering by implementing the K-Nearest Neighbors algorithm. I will also predict the rating of the given movie based on its neighbors and compare it with the actual rating.\n\n### Check out my [blog](https:\/\/medium.com\/swlh\/movie-recommendation-and-rating-prediction-using-k-nearest-neighbors-704ca8ccaff3) for a better understanding ","ebf1bbbc":"**One Hot Encoding for multiple labels**","2eb049e1":"### **Import the dataset**","2c2c23d2":"## Similarity between movies","244c5313":"## **Data Exploration & Cleaning**","b9e7c5bc":"We see that the distance is about 2.068, which is high. The more the distance, the less similar the movies are. Let's see what these random movies actually were."}}