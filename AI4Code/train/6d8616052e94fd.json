{"cell_type":{"71836fe0":"code","cc2d280c":"code","7fd25b3a":"code","7ba37e5e":"code","b0856995":"code","a06fb587":"code","53805081":"code","59241ae5":"code","6b788734":"code","eabc7337":"code","e667d084":"code","20e21e78":"code","75431bfe":"code","ee63c1e5":"code","8c216cb9":"code","cba3cf77":"code","6a906d7e":"code","255429ab":"code","63e4fa45":"code","23d46dec":"code","aeebc3fa":"code","bf5d1ab9":"code","4721f46c":"code","fac940af":"code","756cfc8f":"code","5d80c3a6":"code","57092c84":"code","df0fa170":"code","3c256941":"code","e06af920":"code","49b2b41d":"code","f51b5f56":"code","6367a19d":"code","5766e17c":"code","335f2048":"code","21364a6a":"code","0dd7aaec":"code","24e7ddaf":"code","23f23da3":"code","726225d3":"code","daa8ef0d":"code","a1013bd1":"code","80fefb68":"code","fe1efc2e":"code","183ed7b5":"code","3c0e9cd9":"code","ad0f8e12":"markdown","2c1d7322":"markdown","bb893af9":"markdown","ac2c8076":"markdown","43cc456e":"markdown","05eb5b06":"markdown","b1ac496f":"markdown","e6d3205d":"markdown"},"source":{"71836fe0":"!pip install regressors","cc2d280c":"import numpy as np \nimport pandas as pd \nfrom regressors import stats\nfrom sklearn import linear_model as lm\nimport statsmodels.formula.api as sm\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom scipy.stats import skew\nimport seaborn as sns\n\nimport os\nprint(os.listdir(\"..\/input\"))","7fd25b3a":"d = pd.read_csv(\"..\/input\/smarket.csv\")\nd.head(10)","7ba37e5e":"print(\"Summary for column Year:\\n\", d[\"Year\"].describe())","b0856995":"plt.boxplot(d[\"Year\"])\nplt.show()","a06fb587":"skew(d[\"Year\"])","53805081":"print(\"Summary for column Lag1:\\n\", d[\"Lag1\"].describe())","59241ae5":"plt.boxplot(d[\"Lag1\"])\nplt.show()","6b788734":"skew(d[\"Lag1\"])","eabc7337":"print(\"Summary for column Lag2:\\n\", d[\"Lag2\"].describe())","e667d084":"plt.boxplot(d[\"Lag2\"])\nplt.show()","20e21e78":"skew(d[\"Lag2\"])","75431bfe":"print(\"Summary for column Lag3:\\n\", d[\"Lag3\"].describe())","ee63c1e5":"plt.boxplot(d[\"Lag3\"])\nplt.show()","8c216cb9":"skew(d[\"Lag3\"])","cba3cf77":"print(\"Summary for column Lag4:\\n\", d[\"Lag4\"].describe())","6a906d7e":"plt.boxplot(d[\"Lag4\"])\nplt.show()","255429ab":"skew(d[\"Lag4\"])","63e4fa45":"print(\"Summary for column Lag5:\\n\", d[\"Lag5\"].describe())","23d46dec":"plt.boxplot(d[\"Lag5\"])\nplt.show()","aeebc3fa":"skew(d[\"Lag5\"])","bf5d1ab9":"print(\"Summary for column Volume:\\n\", d[\"Volume\"].describe())","4721f46c":"plt.boxplot(d[\"Volume\"])\nplt.show()","fac940af":"skew(d[\"Volume\"])","756cfc8f":"print(\"Summary for column Today:\\n\", d[\"Today\"].describe())","5d80c3a6":"plt.boxplot(d[\"Today\"])\nplt.show()","57092c84":"skew(d[\"Today\"])","df0fa170":"d = d.drop([d.columns[0]],axis=1)","3c256941":"d.corr()","e06af920":"sns.pairplot(d)","49b2b41d":"d = pd.read_csv(\"..\/input\/smarket.csv\")\nd = d.drop([d.columns[0]],axis=1)\nd['Direction'] = d['Direction'].map({'Up': 1, 'Down': 0})\nd.head(10)","f51b5f56":"#Model Fit \ninputDf = d[[\"Year\", \"Lag1\", \"Lag2\", \"Lag3\", \"Lag4\", \"Lag5\", \"Volume\", \"Today\"]]\noutputDf = d[[\"Direction\"]].values.ravel()","6367a19d":"logisticRegr = LogisticRegression(solver='lbfgs')\nlogisticRegr.fit(inputDf, outputDf)\nprint(logisticRegr.intercept_)\nprint(logisticRegr.coef_)","5766e17c":"ynew = logisticRegr.predict(inputDf)","335f2048":"newDf = pd.DataFrame()\nnewDf[\"original\"] = d[\"Direction\"]\nnewDf[\"prediction\"] = ynew\nnewDf.head()","21364a6a":"i = 0\ncorrectCount = 0\nincorrectCount = 0\n\nwhile i < len(newDf):\n    if (newDf.at[i, 'original'] == 1) & (newDf.at[i,'prediction'] == 1):\n        correctCount += 1\n    elif (newDf.at[i, 'original'] == 1) & (newDf.at[i,'prediction'] == 0):\n        incorrectCount += 1\n    i += 1\n\nprint(\"Correct Count of Up is: \", correctCount)\nprint(\"Incorrect Count of Up is: \", incorrectCount)\nprint(\"Percent of Outcomes predicted correctly: \", (correctCount\/(correctCount + incorrectCount)*100))","0dd7aaec":"i = 0\ncorrectCount = 0\nincorrectCount = 0\n\nwhile i < len(newDf):\n    if (newDf.at[i, 'original'] == 0) & (newDf.at[i,'prediction'] == 0):\n        correctCount += 1\n    elif (newDf.at[i, 'original'] == 0) & (newDf.at[i,'prediction'] == 1):\n        incorrectCount += 1\n    i += 1\n\nprint(\"Correct Count of Down is: \", correctCount)\nprint(\"Incorrect Count of Down is: \", incorrectCount)\nprint(\"Percent of Outcomes predicted correctly: \", (correctCount\/(correctCount + incorrectCount)*100))","24e7ddaf":"d","23f23da3":"dTrain = d[d.Year != 2005]\ndTrain.tail()","726225d3":"#Model Fit \ninputDf = dTrain[[\"Year\", \"Lag1\", \"Lag2\", \"Lag3\", \"Lag4\", \"Lag5\", \"Volume\", \"Today\"]]\noutputDf = dTrain[[\"Direction\"]].values.ravel()","daa8ef0d":"logisticRegr2 = LogisticRegression(solver='lbfgs')\nlogisticRegr2.fit(inputDf, outputDf)\nprint(logisticRegr.intercept_)\nprint(logisticRegr.coef_)","a1013bd1":"dTest = d[d.Year == 2005]\ndTest = dTest.reset_index(drop = True)\ndTest.head()","80fefb68":"inputDf = dTest[[\"Year\", \"Lag1\", \"Lag2\", \"Lag3\", \"Lag4\", \"Lag5\", \"Volume\", \"Today\"]]\noutputDf = dTest[[\"Direction\"]].values.ravel()\nynew2 = logisticRegr2.predict(inputDf)","fe1efc2e":"newDf2 = pd.DataFrame()\nnewDf2[\"original\"] = outputDf\nnewDf2[\"prediction\"] = ynew2\nnewDf2.head()","183ed7b5":"i = 0\ncorrectCount = 0\nincorrectCount = 0\n\nwhile i < len(newDf2):\n    if (newDf2.at[i, 'original'] == 1) & (newDf2.at[i,'prediction'] == 1):\n        correctCount += 1\n    elif (newDf2.at[i, 'original'] == 1) & (newDf2.at[i,'prediction'] == 0):\n        incorrectCount += 1\n    i += 1\n\nprint(\"Correct Count of Up is: \", correctCount)\nprint(\"Incorrect Count of Up is: \", incorrectCount)\nprint(\"Percent of Outcomes predicted correctly: \", (correctCount\/(correctCount + incorrectCount)*100))","3c0e9cd9":"i = 0\ncorrectCount = 0\nincorrectCount = 0\n\nwhile i < len(newDf2):\n    if (newDf2.at[i, 'original'] == 0) & (newDf2.at[i,'prediction'] == 0):\n        correctCount += 1\n    elif (newDf2.at[i, 'original'] == 0) & (newDf2.at[i,'prediction'] == 1):\n        incorrectCount += 1\n    i += 1\n\nprint(\"Correct Count of Down is: \", correctCount)\nprint(\"Incorrect Count of Down is: \", incorrectCount)\nprint(\"Percent of Outcomes predicted correctly: \", (correctCount\/(correctCount + incorrectCount)*100))","ad0f8e12":"Divide the data into Training and Test data sets","2c1d7322":"Logistic Regression","bb893af9":"Logistic Regression with Training\/Test Separation","ac2c8076":"Build a regression model based on the training data","43cc456e":"Count when Up was predicted correctly and incorrectly and percentage predicted correctly:","05eb5b06":"**Pairplot Correlations**","b1ac496f":"Do Predictions for the Test Data only:","e6d3205d":"Count when Down was predicted correctly and incorrectly and percentage predicted correctly:"}}