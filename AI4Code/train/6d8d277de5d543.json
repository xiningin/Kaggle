{"cell_type":{"17cad688":"code","80f094b5":"code","db548861":"code","3785b6ae":"code","6a0d97fd":"code","680b68ec":"code","a0be08e7":"code","1ab34203":"code","525faef3":"code","4c6bc6ab":"code","3232a591":"code","78bd6d87":"code","8abbe2a5":"markdown","60270785":"markdown","da486861":"markdown","d7231513":"markdown","13c9b00f":"markdown","2bcf74f6":"markdown","f767cae2":"markdown","0e508004":"markdown","25e3a7e9":"markdown","1aba6de7":"markdown","584b8738":"markdown"},"source":{"17cad688":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","80f094b5":"# TensorFlow and tf.keras\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Helper libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd","db548861":"fashion_mnist = keras.datasets.fashion_mnist\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()\ntrn_images, valid_images, trn_labels, valid_labels = train_test_split(train_images, train_labels,test_size=0.2)","3785b6ae":"trn_images = trn_images \/ 255.0\ntest_images = test_images \/ 255.0\nvalid_images = valid_images \/ 255.0","6a0d97fd":"model1 = keras.models.Sequential()\nmodel1.add(keras.layers.Flatten(input_shape=[28, 28]))\nmodel1.add(keras.layers.Dense(300, activation=\"relu\"))\nmodel1.add(keras.layers.Dense(10, activation=\"softmax\"))","680b68ec":"model2 = keras.models.Sequential()\nmodel2.add(keras.layers.Flatten(input_shape=[28, 28]))\nmodel2.add(keras.layers.Dense(300, activation=\"relu\"))\nmodel2.add(keras.layers.Dense(10, activation=\"softmax\"))","a0be08e7":"model1.compile(loss=\"sparse_categorical_crossentropy\",\noptimizer=\"adam\",\nmetrics=[\"accuracy\"])\nmodel2.compile(loss=\"sparse_categorical_crossentropy\",\noptimizer=\"adam\",\nmetrics=[\"accuracy\"])","1ab34203":"history = model1.fit(trn_images, trn_labels, epochs=50,validation_data=(valid_images, valid_labels))","525faef3":"import pandas as pd\nimport matplotlib.pyplot as plt\ndf= pd.DataFrame(history.history)\nind=[1,3]\ndf.iloc[:,ind].plot(figsize=(8, 5))\nplt.grid(True)\nplt.gca().set_ylim(0.8, 0.98) # set the vertical range to [0.5-1]\nplt.show()","4c6bc6ab":"model1.evaluate(test_images, test_labels)","3232a591":"callback = tf.keras.callbacks.EarlyStopping(patience=4, restore_best_weights=True)\nhistory1 = model2.fit(trn_images, trn_labels, epochs=50,validation_data=(valid_images, valid_labels),callbacks=[callback])","78bd6d87":"model2.evaluate(test_images, test_labels)","8abbe2a5":"![image.png](attachment:image.png)","60270785":"## What is callback?","da486861":"* monitor: Quantity to be monitored.\n* min_delta: Minimum change in the monitored quantity to qualify as an improvement\n* patience: Number of epochs with no improvement after which training will be stopped.\n* mode: One of {\"auto\", \"min\", \"max\"}\n* restore_best_weights:Whether to use best models weight or the last epoch weight","d7231513":"# Base callback","13c9b00f":"# Early Stopping Paramters","2bcf74f6":"* A **callback** is a powerful tool to customize the behavior of a Keras model during training, evaluation, or inference\n* Periodically save your model to disk, \n* You can get a view on internal states and statistics of a model during training,\n* There can be multiple callbacks one for saving, one for monitoring\n* The callbacks can be attached **fit**, **evaluate**, **predict**","f767cae2":"![image.png](attachment:image.png)","0e508004":"# Earlystopping","25e3a7e9":"# Importing dataset","1aba6de7":"# Creating model","584b8738":"# Standardizing input"}}