{"cell_type":{"faaed056":"code","8ae378dc":"code","adadc227":"code","df0dd134":"code","38637d18":"code","cd854707":"code","0e50c650":"code","e70a226d":"code","e414a6a5":"code","0cb3addc":"code","46cde382":"code","3755bd73":"code","b5ef8ace":"code","6164a14f":"code","7beaea0c":"code","ea776344":"code","5ef30ac8":"code","68b5eac8":"code","a0c6edd8":"code","625ff99e":"code","f5528113":"code","6aa73d3a":"code","ebd0ae6c":"code","41f383d5":"markdown","59ee9154":"markdown","ec76b859":"markdown","dde65ab5":"markdown","2951bd95":"markdown","09a32431":"markdown","f053c781":"markdown","b18ac922":"markdown"},"source":{"faaed056":"!git clone https:\/\/github.com\/ultralytics\/yolov5","8ae378dc":"import torch\nfrom IPython.display import Image  # for displaying images\nimport os \nimport random\nimport shutil\nfrom sklearn.model_selection import train_test_split\nimport xml.etree.ElementTree as ET\nfrom xml.dom import minidom\nfrom tqdm import tqdm\nfrom PIL import Image, ImageDraw\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imsave\n\nrandom.seed(108)","adadc227":"images = np.load('..\/input\/chessboarddetection\/xtrain.npy')\nprint(\"Images shape = \", images.shape)\nlabels = np.load('..\/input\/chessboarddetection\/ytrain.npy')\nprint(\"Labels shape = \", labels.shape)","df0dd134":"images = images[:5000]\nlabels = labels[:5000]","38637d18":"# Data format left_top,left_bot,right_bot,right_top'\nfor i,j in enumerate(labels[0]):\n    if i %2 ==0:\n        print(f'x{i\/\/2}={j * 256}')\n    else:\n        print(f'y{i\/\/2}={j * 256}')","cd854707":"#plt.imshow(images[0])\nimport matplotlib.patches as patches\nfig, ax = plt.subplots()\n\n# Display the image\nax.imshow(images[0], cmap='gray')\n\n# Create a Rectangle patch\nrect = patches.Rectangle((55,2), 175, 250, linewidth=1, edgecolor='r', facecolor='none')\n\n# Add the patch to the Axes\nax.add_patch(rect)\n\nplt.show()","0e50c650":"# Create parent directory\ndirectory = \".\/ChessBoardDataset\"\nos.mkdir(directory)\n  \n# Directory names\ndirectory_labels = \"labels\"\ndirectory_images = \"images\"\n  \n# Parent Directory path\nparent_dir = \".\/ChessBoardDataset\"\n  \n# Path\npath_images = os.path.join(parent_dir, directory_images)\npath_labels = os.path.join(parent_dir, directory_labels)\n  \n# Create the directories\nos.mkdir(path_images)\nos.mkdir(path_labels)","e70a226d":"def convert_to_yolov5(array):\n    print_buffer = []\n    \n    # For each bounding box\n    for i, box in enumerate(array):\n        class_id = 0\n        \n        # Transform the bbox co-ordinates as per the format required by YOLO v5\n        y_max = box[1::2].max()\n        y_min = box[1::2].min()\n        x_max = box[::2].max()\n        x_min = box[::2].min()\n        \n        b_center_x = (x_max + x_min) \/ 2 \n        b_center_y = (y_min + y_max) \/ 2\n        b_width    = (x_max - x_min)\n        b_height   = (y_max - y_min)\n        \n        \n        #Write the bbox details to the file \n        print_buffer.append(\"{} {:.3f} {:.3f} {:.3f} {:.3f}\".format(class_id, b_center_x, b_center_y, b_width, b_height))\n        \n        # Name of the file which we have to save \n        save_file_name = os.path.join(\".\/ChessBoardDataset\/labels\", f\"{i}.txt\")\n    \n        # Save the annotation to disk\n        print(\"\\n\".join(print_buffer), file= open(save_file_name, \"w\"))\n        print_buffer.clear()\n        \nconvert_to_yolov5(labels)","e414a6a5":"def save_images(path, array):\n    pbar = tqdm(array)\n    for i, image in enumerate(pbar):\n        imsave(f'{path}{i}.png', image,  cmap='gray')\n\nsave_images('.\/ChessBoardDataset\/images\/',images.squeeze(3))\n","0cb3addc":"test_im = np.load('..\/input\/chessboarddetection\/xtest.npy')\nos.mkdir('.\/test_images')\nsave_images('.\/test_images\/',test_im.squeeze(3))","46cde382":"file1 = open(\".\/yolov5\/data\/ChessBoardData.yaml\",\"w\")\nL = ['path: .\/ChessBoardDataset \\n', 'train: images \\n' , 'val: images \\n', 'nc: 1 \\n' , 'names: [\"board\"] \\n']\n  \n# \\n is placed to indicate EOL (End of Line)\nfile1.writelines(L)\nfile1.close() #to change file access modes\n  \nfile1 = open(\".\/yolov5\/data\/ChessBoardData.yaml\",\"r+\") \n  \nprint(\"Output of Read function is \")\nprint (file1.read())","3755bd73":"# Weights & Biases  (optional)\n# e6f937fc3cb25d7b89f8b95e44768562ae84a438\n%pip install -q wandb\nimport wandb\n#wandb.login()","b5ef8ace":"!wandb disabled","6164a14f":"!python yolov5\/train.py --img 640 --batch 8 --epochs 10 --data ChessBoardData.yaml --weights yolov5s.pt ","7beaea0c":"test_image = np.load('..\/input\/chessboarddetection\/xtest.npy')\ntest_image.shape","ea776344":"!python yolov5\/detect.py --source .\/test_images --weights runs\/train\/exp\/weights\/best.pt --conf 0.25 ","5ef30ac8":"detections_dir = \"runs\/detect\/exp\"\ndetection_images = [os.path.join(detections_dir, x) for x in os.listdir(detections_dir)]\n\nrandom_detection_image = Image.open(random.choice(detection_images))\nplt.imshow(np.array(random_detection_image))","68b5eac8":"plt.imshow(np.array(Image.open('runs\/detect\/exp\/0.png')))","a0c6edd8":"plt.imshow(np.array(Image.open('runs\/detect\/exp\/1.png')))","625ff99e":"plt.imshow(np.array(Image.open('runs\/detect\/exp\/2.png')))","f5528113":"plt.imshow(np.array(Image.open('runs\/detect\/exp\/3.png')))","6aa73d3a":"plt.imshow(np.array(Image.open('runs\/detect\/exp\/4.png')))","ebd0ae6c":"from IPython.display import FileLink \nFileLink(r'runs\/train\/exp2\/weights\/best.pt')","41f383d5":"# 1)Clone the YOLOv5 repository","59ee9154":"# 5)Train YOLOv5s","ec76b859":"# 7)Download the weights","dde65ab5":"# 2) Import libraries","2951bd95":"# 4) Prepare files for train","09a32431":"# 6) Inference and results visualization ","f053c781":"# 3)Let's look to the data","b18ac922":"## We have only 5 grayscale images to test,let's vizualize them\n"}}