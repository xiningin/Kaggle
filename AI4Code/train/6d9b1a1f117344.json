{"cell_type":{"7799c581":"code","a0c88bdb":"code","52a7f9d9":"code","efc40c72":"code","cd31a670":"code","398744c3":"code","1235caa1":"code","727596ec":"code","15e90c35":"code","a1a81b93":"code","42eae147":"code","a2aeb187":"code","08067bf4":"code","1bb41222":"code","591532ab":"code","3424bc35":"code","35a25283":"code","55d63b93":"code","1964b5db":"code","e7b4c71b":"code","7f6e033a":"code","d6892b9f":"code","ed11f1e2":"code","d5158eb1":"code","ba3e8d6c":"code","595fe5c1":"code","3774ff0d":"code","ca6ed227":"markdown"},"source":{"7799c581":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\n\nfrom sklearn.neural_network import MLPClassifier        # Multy level Perseptatthron Classifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier      \n                                                        # Random Forest Classifier, Gradient Boosting\nfrom sklearn.svm import SVC                             # Support Vector Classifier\nfrom sklearn.linear_model import LogisticRegression     # Logistic Regression\nfrom sklearn.tree import DecisionTreeClassifier         # Decission Tree\nfrom sklearn import svm\n\n\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","a0c88bdb":"df = pd.read_csv('..\/input\/heart.csv')\ndf.tail(4)","52a7f9d9":"df.info()","efc40c72":"f,ax = plt.subplots(figsize=(18, 6))\nsns.heatmap(df.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()\n","cd31a670":"\nsns.set(style=\"darkgrid\")\nplt.title('Heart disease in total')\nsns.countplot(x=\"target\", data=df, facecolor=(1, 0, 1, 0),linewidth=5, edgecolor=sns.color_palette(\"dark\", 3))\nplt.xlabel(\"Target ({} for HD negative, {} for HD positive)\".format(0, 1))\n\nNo_Disease, Disease = (len(df[df.target == 0]), len(df[df.target == 1]))\nlen_heart = df.shape[0]\n\nprint(\"Patients which havn't heart disease: {:.0f}\".format(No_Disease))\nprint(\"Patients which have heart disease: {:.0f}\".format(Disease))\nprint()\nprint(\"Patients which havn't heart disease: {:.0f}%\".format(No_Disease\/(len_heart)*100))\nprint(\"Patients which have heart disease: {:.0f}%\".format(Disease\/(len_heart)*100))\n","398744c3":"col = ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal']\nfor item in col:\n    pd.crosstab(df[item], df.target).plot.bar(figsize=(15, 5))\n    plt.title(\"{} with target\".format(str(item)))\n    plt.legend([\"dont have disease\", \"have disease\"])\n    plt.ylabel(\"Count\")\nplt.show()","1235caa1":"print(\"                    Patients by age       \") \nprint()\n# less than 50 years\nless, less_notdiseased, less_diseased = len(df[df.age <= 50]), len(df[(df.target == 0) & (df.age <= 50)]), len(df[(df.target == 1) & (df.age <= 50)])\nprint(\"Out of %s younger than 50 years of age patients - %s dont have heart disease and - %s do have\" %(less, less_notdiseased, less_diseased))\nprint(\"Dont have heart disease: {:.0f}%\".format(less_notdiseased\/(less)*100))  \nprint(\"Have heart disease: {:.0f}%\".format(less_diseased\/(less)*100)) \n\nline_labels = 'Dont have heart disease', 'Have heart disease'\n\nsizes1 = [29, 66]\n \nprint()\n# More than 50\nmore, more_notdiseased,more_diseased = len(df[df.age > 50]), len(df[(df.target == 0) & (df.age > 50)]), len(df[(df.target == 1) & (df.age > 50)])\nprint(\"Out of %s older than 50 years of age patients  - %s dont have heart disease and - %s do have\" %(more, more_notdiseased,more_diseased))\nprint(\"Dont have heart disease: {:.0f}%\".format(more_notdiseased\/(more)*100))  \nprint(\"Have heart disease: {:.0f}%\".format(more_diseased\/(more)*100)) \n\nsizes2 = [109,99]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 6))\nfig.patch.set_facecolor('darkgrey')\nl1 = ax1.pie(sizes1, autopct='%1.0f%%',\n        shadow=True, startangle=90)\nl2 = ax2.pie(sizes2, autopct='%1.0f%%',\n        shadow=True, explode=(0, 0))\nax1.set_title('Younger than 50 years')\nax2.set_title('Older than 50 years')\nfig.legend([l1, l2],    \n           labels=line_labels, \n           loc=\"center left\",  \n           borderaxespad=0.1,   \n           title=\"Diagnosis\" \n           )\n\nplt.subplots_adjust(right=0.9)\nplt.show()\n\nmean = df.age.mean()\nmax = df.age.max()\nmin = df.age.min()\ntot, diag = less+more, ((less_diseased + more_diseased)\/(less + more)) *100\n\nprint(\"Average patiens age is %s. Oldes is - %s years of age and the youngest - %s  \" %(round(mean), max, min))\nprint(\"To %s %% out of all %s patiens heart disease  was diagnosed\" %(round(diag), tot))\nprint (\"2 of 3 patiens are older than 50 years, but only 48 % of them heart disease diagnosis is positive\")\nprint (\"2 of 3 patiens younger than 50 years, heart disease diagnosis is positive\")","727596ec":"print(\"                    Patients by gender       \") \nprint()\n# Male\nmale, male_notdiseased, male_diseased = len(df[df.sex == 1]), len(df[(df.sex == 1) & (df.target == 0)]), len(df[(df.sex == 1) & (df.target == 1)])\n\nprint(\"Out of %s male patients - %s dont have heart disease and - %s do have \" %(male, male_notdiseased, male_diseased))\nprint(\"Dont have heart disease: {:.0f}%\".format(male_notdiseased\/(male)*100))  \nprint(\"Have heart disease: {:.0f}%\".format(male_diseased\/(male)*100)) \n\nline_labels = 'Dont have disease', 'Have disease'\n\nsizes1 = [114,93]\n \nprint()\n# Female\nfemale, female_notdiseased, female_diseased = len(df[df.sex == 0]), len(df[(df.sex == 0) & (df.target == 0)]), len(df[(df.sex == 0) & (df.target == 1)])\n\nprint(\"Out of %s female patients - %s dont have heart disease and - %s do have\" %(female, female_notdiseased, female_diseased))\nprint(\"Dont have heart disease: {:.0f}%\".format(female_notdiseased\/(female)*100))  \nprint(\"Have heart disease: {:.0f}%\".format(female_diseased\/(female)*100)) \n\nsizes2 = [24, 72]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 6))\nfig.patch.set_facecolor('darkgrey')\nl1 = ax1.pie(sizes1, autopct='%1.0f%%',\n        shadow=True, startangle=90)\nl2 = ax2.pie(sizes2, autopct='%1.0f%%',\n        shadow=True, explode=(0, 0))\nax1.set_title('Male')\nax2.set_title('Female')\nfig.legend([l1, l2],    \n           labels=line_labels, \n           loc=\"center left\",  \n           borderaxespad=0.1,   \n           title=\"Diagnosis\" \n           )\n\nplt.subplots_adjust(right=0.9)\nplt.show()\n\nprint (\"2 of 3 patiens are male, but to 55% of them heart disease diagnosis is rejected\")\nprint (\"To 3 of 4 female patients heart disease diagnosis is positive\")","15e90c35":"print(\"                    Patients by chest pain types       \") \nprint()\n# Dont have disease by chest pain types\ntarg_1n, cp_1n, cp_2n, cp_3n, cp_4n = len(df[df.target == 0]), len(df[(df.target == 0) & (df.cp == 0)]), len(df[(df.target == 0) & (df.cp == 1)]), len(df[(df.target == 0) & (df.cp == 2)]), len(df[(df.target == 0) & (df.cp == 3)])\n\nprint(\"%s patients, that dont have heart disease have:  %s - first, %s - second, %s - third and %s - fourth chest type pains\" %(targ_1n, cp_1n, cp_2n, cp_3n, cp_4n))\nprint(\"1 type chest pain: {:.0f}%\".format(cp_1n\/(targ_1n)*100))\nprint(\"2 type chest pain: {:.0f}%\".format(cp_2n\/(targ_1n)*100))\nprint(\"3 type chest pain: {:.0f}%\".format(cp_3n\/(targ_1n)*100))\nprint(\"4 type chest pain: {:.0f}%\".format(cp_4n\/(targ_1n)*100))\n\nline_labels = '1 type', '2 type', '3 type', '4 type'\n\nsizes1 = [104, 9, 18, 7]\n \nprint()\n# Have disease by chest pain types\ntarg_1d, cp_1d, cp_2d, cp_3d, cp_4d = len(df[df.target == 1]), len(df[(df.target == 1) & (df.cp == 0)]), len(df[(df.target == 1) & (df.cp == 1)]), len(df[(df.target == 1) & (df.cp == 2)]), len(df[(df.target == 1) & (df.cp == 3)])\n\nprint(\"%s patients, that do have heart disease have:  %s - first, %s - second, %s - third and %s - fourth chest type pains\" %(targ_1d, cp_1d, cp_2d, cp_3d, cp_4d))\nprint(\"1 type chest pain: {:.0f}%\".format(cp_1d\/(targ_1d)*100))\nprint(\"2 type chest pain: {:.0f}%\".format(cp_2d\/(targ_1d)*100))\nprint(\"3 type chest pain: {:.0f}%\".format(cp_3d\/(targ_1d)*100))\nprint(\"4 type chest pain: {:.0f}%\".format(cp_4d\/(targ_1d)*100))\n\nsizes2 = [39,41,69,16]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 6))\nfig.patch.set_facecolor('darkgrey')\nl1 = ax1.pie(sizes1, autopct='%1.0f%%',\n        shadow=True, startangle=90)\nl2 = ax2.pie(sizes2, autopct='%1.0f%%',\n        shadow=True, explode=(0, 0, 0, 0))\nax1.set_title('Dont have disease')\nax2.set_title('Have disease')\nfig.legend([l1, l2],    \n           labels=line_labels, \n           loc=\"center left\",  \n           borderaxespad=0.1,   \n           title=\"Chest pain type\" \n           )\n\nplt.subplots_adjust(right=0.9)\nplt.show()\nprint(\"3 of 4 healthy patients have 1 type chest pain and that type of chets pain have only 1 of 4 unhealthy patients\")\nprint(\"Each of 2, 3 and 4 type of chest pain was higher for patiens that have heart disease compared to those who havent \")","a1a81b93":"print(\"                    Patients by resting blood pressure       \") \nprint()\n# Dont have disease by resting blood pressure\nntarg, nnormal, nelevated, nhypertension_stage1, nhypertension_stage2, nhypertensive_crisis  = len(df[df.target == 0]), len(df[(df.target == 0) & (df.trestbps < 120)]),len(df[(df.target == 0) & (df.trestbps.between(120, 129, inclusive=True))]) ,len(df[(df.target == 0) & (df.trestbps.between(130, 139, inclusive=True))]),len(df[(df.target == 0) & (df.trestbps.between(140, 180, inclusive=True))]), len(df[(df.target == 0) & (df.trestbps >= 181)])\nprint(\"%s patients, that dont have heart disease have:  %s - normal, %s - elevated, %s - high blood pressure (hypertension) stage 1, %s - high blood pressure (hypertension) stage 2, %s - hypertensive crisis\" %(ntarg, nnormal, nelevated, nhypertension_stage1, nhypertension_stage2, nhypertensive_crisis))\nprint(\" --- Normal resting blood pressure(less than 120): {:.0f}%\".format(nnormal\/(ntarg)*100))\nprint(\" --- Elevated resting blood pressure(120 - 129): {:.0f}%\".format(nelevated\/(ntarg)*100))\nprint(\" --- High blood pressure (hypertension) stage 1 (130 - 139): {:.0f}%\".format(nhypertension_stage1\/(ntarg)*100))\nprint(\" --- High blood pressure (hypertension) stage 2 (140 or higher): {:.0f}%\".format(nhypertension_stage2\/(ntarg)*100))\nprint(\" --- hypertensive crisis (higher than 180): {:.0f}%\".format(nhypertensive_crisis\/(ntarg)*100))\n\nline_labels = 'Normal', 'Elevated', 'Hypertension stage 1', 'Hypertension stage 2', 'Hypertensive crisis'\n\nsizes1 = [23, 35, 27, 51, 2]\nprint()\n# Have disease by resting blood pressure\ndtarg, dnormal, delevated, dhypertension_stage1, dhypertension_stage2, dhypertensive_crisis  = len(df[df.target == 1]), len(df[(df.target == 1) & (df.trestbps < 120)]),len(df[(df.target == 1) & (df.trestbps.between(120, 129, inclusive=True))]) ,len(df[(df.target == 1) & (df.trestbps.between(130, 139, inclusive=True))]),len(df[(df.target == 1) & (df.trestbps.between(140, 180, inclusive=True))]), len(df[(df.target == 1) & (df.trestbps >= 181)])\nprint(\"%s patients, that dont have heart disease have:  %s - normal, %s - elevated, %s - high blood pressure (hypertension) stage 1, %s - high blood pressure (hypertension) stage 2, %s - hypertensive crisis\" %(dtarg, dnormal, delevated, dhypertension_stage1, dhypertension_stage2, dhypertensive_crisis))\nprint(\" --- Normal resting blood pressure(less than 120): {:.0f}%\".format(dnormal\/(dtarg)*100))\nprint(\" --- Elevated resting blood pressure(120 - 129): {:.0f}%\".format(delevated\/(dtarg)*100))\nprint(\" --- High blood pressure (hypertension) stage 1 (130 - 139): {:.0f}%\".format(dhypertension_stage1\/(dtarg)*100))\nprint(\" --- High blood pressure (hypertension) stage 2 (140 or higher): {:.0f}%\".format(dhypertension_stage2\/(dtarg)*100))\nprint(\" --- hypertensive crisis (higher than 180): {:.0f}%\".format(dhypertensive_crisis\/(dtarg)*100))\n\nsizes2 = [37, 40, 44, 44, 0]\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 6))\nfig.patch.set_facecolor('darkgrey')\nl1 = ax1.pie(sizes1, autopct='%1.0f%%',\n        shadow=True, startangle=90)\nl2 = ax2.pie(sizes2, autopct='%1.0f%%',\n        shadow=True, explode=(0, 0, 0, 0, 0))\nax1.set_title('Dont have disease')\nax2.set_title('Have disease')\nfig.legend([l1, l2],    \n           labels=line_labels, \n           loc=\"center left\",  \n           borderaxespad=0.1,   \n           title=\"Resting blood pressure\" \n           )\n\nplt.subplots_adjust(right=0.9)\nplt.show()\nprint(\"To - 83 % of patients, that dont have heart disease, resting blood pressure is higher than normal and  - 78 % who have heart disease\")\nprint(\"No strong deviations regarding resting blood pressure among patients who have and dont have heart disease noticed. Even thou high blood pressure can be assigned to diseases non related to heart disease, not normal resting blood pressure remain one of the main risk factors\")","42eae147":"print(\"                    Patients by serum cholestoral in mg\/dL       \") \nprint()\n# Dont have disease by serum cholestoral in mg\/dl\nntarg_1, nchol_good, nchol_borderline, nchol_bad = len(df[df.target == 0]), len(df[(df.target == 0) & (df.chol < 200)]), len(df[(df.target == 0) & (df.chol.between(200, 239, inclusive=True))]), len(df[(df.target == 0) & (df.chol >= 240)])\nprint(\"%s patients that dont have heart disease have: %s - normal cholestoral, %s - borderline cholestoral and %s - high cholestoral\" %(ntarg_1, nchol_good, nchol_borderline, nchol_bad))\nprint(\"Normal cholestoral (less 200 mg\/dL): {:.0f}%\".format(nchol_good\/(ntarg_1)*100))\nprint(\"Borderline cholestoral(between 200-240 mg\/dL): {:.0f}%\".format(nchol_borderline\/(ntarg_1)*100))  \nprint(\"High cholestoral (above 240 mh\/dL): {:.0f}%\".format(nchol_bad\/(ntarg_1)*100))  \nprint()\nline_labels = 'Normal', 'Borderline', 'High'\nsizes1 = [20, 39, 79]\n\n# Have disease by serum cholestoral in mg\/dl\ndtarg_1, dchol_good, dchol_borderline, dchol_bad = len(df[df.target == 1]), len(df[(df.target == 1) & (df.chol < 200)]), len(df[(df.target == 1) & (df.chol.between(200, 239, inclusive=True))]), len(df[(df.target == 1) & (df.chol >= 240)])\nprint(\"%s patients that have heart disease have: %s  - normal cholestoral, %s - borderline cholestoral and %s - high cholestoral\" %(dtarg_1, dchol_good, dchol_borderline, dchol_bad))\nprint(\"Normal cholestoral (less 200 mg\/dL): {:.0f}%\".format(dchol_good\/(dtarg_1)*100))\nprint(\"Borderline cholestoral(between 200-240 mg\/dL): {:.0f}%\".format(dchol_borderline\/(dtarg_1)*100))  \nprint(\"High cholestoral (above 240 mh\/dL): {:.0f}%\".format(dchol_bad\/(dtarg_1)*100))  \n\nsizes2 = [30, 59, 76]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 6))\nfig.patch.set_facecolor('darkgrey')\nl1 = ax1.pie(sizes1, autopct='%1.0f%%',\n        shadow=True, startangle=90)\nl2 = ax2.pie(sizes2, autopct='%1.0f%%',\n        shadow=True, explode=(0, 0, 0))\nax1.set_title('Dont have disease')\nax2.set_title('Have disease')\nfig.legend([l1, l2],    \n           labels=line_labels, \n           loc=\"center left\",  \n           borderaxespad=0.1,   \n           title=\"Serum cholestoral\" \n           )\n\nplt.subplots_adjust(right=0.9)\nplt.show()\nprint(\"For - 86 % of patients that have no heart disease serum cholestoral in mg\/dl is higher than normal and - 82 % of patients that have heart disease\")\nprint(\"No strong deviations regarding serum cholesteral among patients noticed. Even thou high serum cholestoral can be assigned to diseases non related to heart disease, higher normal serum cholestoral in mg\/dl remain one of the main risk factors\")","a2aeb187":"print(\"                    Patients by fasting blood sugar       \") \nprint()\n# Dont have disease by fasting blood sugar\nntarg_1, nfbs0, nfbs1 = len(df[df.target == 0]), len(df[(df.target == 0) & (df.fbs == 1)]), len(df[(df.target == 0) & (df.fbs == 0)])\n\nprint(\"Out of %s patients that dont have heart disease - %s have high fasting blood sugar - %s have low fasting blood sugar\" %(ntarg_1, nfbs0, nfbs1))\nprint(\"Have high fasting blood sugar: {:.0f}%\".format(nfbs0\/(ntarg_1)*100))  \nprint(\"Have low fasting blood sugar: {:.0f}%\".format(nfbs1\/(ntarg_1)*100)) \nprint()\nline_labels = 'High fasting blood sugar', 'Low fasting blood sugar'\nsizes1 = [22, 116]\n\n# Have disease by fasting blood sugar\ndtarg_1, dfbs0, dfbs1 = len(df[df.target == 1]), len(df[(df.target == 1) & (df.fbs == 1)]), len(df[(df.target == 1) & (df.fbs == 0)])\n\nprint(\"Out of %s patients that dont have heart disease - %s have high fasting blood sugar - %s have low fasting blood sugar\" %(dtarg_1, dfbs0, dfbs1))\nprint(\"Have high fasting blood sugar: {:.0f}%\".format(dfbs0\/(dtarg_1)*100))  \nprint(\"Have low fasting blood sugar: {:.0f}%\".format(dfbs1\/(dtarg_1)*100)) \nprint()\n\nsizes2 = [23, 142]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 6))\nfig.patch.set_facecolor('darkgrey')\nl1 = ax1.pie(sizes1, autopct='%1.0f%%',\n        shadow=True, startangle=90)\nl2 = ax2.pie(sizes2, autopct='%1.0f%%',\n        shadow=True, explode=(0, 0))\nax1.set_title('Dont have disease')\nax2.set_title('Have disease')\nfig.legend([l1, l2],    \n           labels=line_labels, \n           loc=\"center left\",  \n           borderaxespad=0.1,   \n           title=\"Fasting blood sugar\" \n           )\n\nplt.subplots_adjust(right=0.9)\nplt.show()\nprint()\nprint(\"Both groups of patients have obviously decreased level of fasting blood sugar. Fasting blood sugar is serious risk factor for human health in general\")","08067bf4":"print(\"                    Patients by electrocardiogramic results       \") \nprint()\n# Not diseased electrocardiogramic result\nntarg_1, nrestecg0, nrestecg1, nrestecg2 = len(df[df.target == 0]), len(df[(df.target == 0) & (df.restecg == 0)]), len(df[(df.target == 0) & (df.restecg == 1)]), len(df[(df.target == 0) & (df.restecg == 2)])\n\nprint(\"%s patients that have no heart disease have: %s - electrocardiogramic result 0 , %s - electrocardiogramic result 1, %s - electrocardiogramic result 2\" %(ntarg_1, nrestecg0, nrestecg1, nrestecg2))\nprint(\"Electrocardiogramic result - 0: {:.0f}%\".format(nrestecg0\/(ntarg_1)*100))\nprint(\"Electrocardiogramic result - 1: {:.0f}%\".format(nrestecg1\/(ntarg_1)*100))\nprint(\"Electrocardiogramic result - 2: {:.0f}%\".format(nrestecg2\/(ntarg_1)*100))\nprint()\nline_labels = 'Result 0', 'Result 1', 'Result 2'\nsizes1 = [79,56,3]\n\n# Diseased electrocardiogramic result\ndtarg_1, drestecg0, drestecg1, drestecg2 = len(df[df.target == 1]), len(df[(df.target == 1) & (df.restecg == 0)]), len(df[(df.target == 1) & (df.restecg == 1)]), len(df[(df.target == 1) & (df.restecg == 2)])\n\nprint(\"%s patients that have no heart disease have: %s - electrocardiogramic result 0 , %s - electrocardiogramic result 1, %s - electrocardiogramic result 2\" %(dtarg_1, drestecg0, drestecg1, drestecg2))\nprint(\"Electrocardiogramic result - 0: {:.0f}%\".format(drestecg0\/(dtarg_1)*100))\nprint(\"Electrocardiogramic result - 1: {:.0f}%\".format(drestecg1\/(dtarg_1)*100))\nprint(\"Electrocardiogramic result - 2: {:.0f}%\".format(drestecg2\/(dtarg_1)*100))\n\nsizes2=[68, 96, 1]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 6))\nfig.patch.set_facecolor('darkgrey')\nl1 = ax1.pie(sizes1, autopct='%1.0f%%',\n        shadow=True, startangle=90)\nl2 = ax2.pie(sizes2, autopct='%1.0f%%',\n        shadow=True, explode=(0, 0, 0))\nax1.set_title('Dont have disease')\nax2.set_title('Have disease')\nfig.legend([l1, l2],    \n           labels=line_labels, \n           loc=\"center left\",  \n           borderaxespad=0.1,   \n           title=\"Electrocardiogramic result\" \n           )\n\nplt.subplots_adjust(right=0.9)\nplt.show()\nprint(\"Wery strong correlation between Result 0 and Result 1. The same but reversed percentage shows electrocardiogramic result accuracy \")","1bb41222":"print(\"                    Patients by maximum heart rate acheaved       \") \nprint()\n# Dont have disease by maximum heart rate acheaved\nntarg_1, nthalach_min, nthalach_max = len(df[df.target == 0]), len(df[(df.target == 0) & (df.thalach <= 150)]), len(df[(df.target == 0) & (df.thalach > 150)])\n\nprint(\"%s patients that have no heart disease have: %s - lower than 150 maximum heart rate acheaved and %s - higher\" %(ntarg_1, nthalach_min, nthalach_max))\nprint(\"Heart rate less than 150: {:.0f}%\".format(nthalach_min\/(ntarg_1)*100))\nprint(\"Heart rate more than 150: {:.0f}%\".format(nthalach_max\/(ntarg_1)*100))  \nprint()\nline_labels = 'Less than 150', 'More than 150'\nsizes1 = [94, 44]\n  \n# Diseased by maximum heart rate acheaved\ndtarg_1, dthalach_min, dthalach_max = len(df[df.target == 1]), len(df[(df.target == 1) & (df.thalach <= 150)]), len(df[(df.target == 1) & (df.thalach > 150)])\n\nprint(\"%s patients that have heart disease have: %s - lower than 150 maximum heart rate acheaved and %s - higher\" %(dtarg_1, dthalach_min, dthalach_max))\nprint(\"Heart rate less than 150: {:.0f}%\".format(dthalach_min\/(dtarg_1)*100))\nprint(\"Heart rate more than 150: {:.0f}%\".format(dthalach_max\/(dtarg_1)*100))  \n\nsizes2 = [45,120]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 6))\nfig.patch.set_facecolor('darkgrey')\nl1 = ax1.pie(sizes1, autopct='%1.0f%%',\n        shadow=True, startangle=90)\nl2 = ax2.pie(sizes2, autopct='%1.0f%%',\n        shadow=True, explode=(0, 0))\nax1.set_title('Dont have disease')\nax2.set_title('Have disease')\nfig.legend([l1, l2],    \n           labels=line_labels, \n           loc=\"center left\",  \n           borderaxespad=0.1,   \n           title=\"Heart rate acheaved\" \n           )\n\nplt.subplots_adjust(right=0.9)\nplt.show()\nprint(\"Similary as electrocardiogramic results, wery strong reverse correlation betwean patients with disease and the ones dont have it\")\nprint(\"3\/4 patients with heart disease heart rate exceeded 150 during phisical activity\")","591532ab":"print(\"                    Patients by exercise induced angina       \") \nprint()\n# Dont have disease by exercise induced angina \nntarg_1, nexang_min, nexang_max = len(df[df.target == 0]), len(df[(df.target == 0) & (df.exang == 0)]), len(df[(df.target == 0) & (df.exang == 1)])\n\nprint(\"%s patients that dont have heart disease have:  %s - exercise induced angina and %s - not exercise induced angina\" %(ntarg_1, nexang_min, nexang_max))\nprint(\"exercise induced angina: {:.0f}%\".format(nexang_min\/(ntarg_1)*100))\nprint(\"exercise not induced angina: {:.0f}%\".format(nexang_max\/(ntarg_1)*100))  \nprint()\nline_labels = 'Yes', 'No'\nsizes1 = [62,76]\n\n# Have disease by exercise induced angina \ndtarg_1, dexang_min, dexang_max = len(df[df.target == 1]), len(df[(df.target == 1) & (df.exang == 0)]), len(df[(df.target == 1) & (df.exang == 1)])\n\nprint(\"%s patients that dont have heart disease have:  %s - exercise induced angina and %s - not exercise induced angina\" %(dtarg_1, dexang_min, dexang_max))\nprint(\"Exercise induced angina: {:.0f}%\".format(dexang_min\/(dtarg_1)*100))\nprint(\"Exercise not induced angina: {:.0f}%\".format(dexang_max\/(dtarg_1)*100))  \nprint()\n\nsizes2 = [142,23]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 6))\nfig.patch.set_facecolor('darkgrey')\nl1 = ax1.pie(sizes1, autopct='%1.0f%%',\n        shadow=True, startangle=90)\nl2 = ax2.pie(sizes2, autopct='%1.0f%%',\n        shadow=True, explode=(0, 0))\nax1.set_title('Dont have disease')\nax2.set_title('Have disease')\nfig.legend([l1, l2],    \n           labels=line_labels, \n           loc=\"center left\",  \n           borderaxespad=0.1,   \n           title=\"Induced angina by excersise\" \n           )\n\nplt.subplots_adjust(right=0.9)\nplt.show()\nprint(\"Angina by exercie is significantly over 86% induced among patients that have heart disease\")","3424bc35":"print(\"                    Patients by oldpeak       \") \nprint()\n# Dont have disease by oldpeak = ST depression induced by exercise relative to rest\nntarg_1, noldpeak_1, noldpeak_2, noldpeak_3, noldpeak_4 = len(df[df.target == 0]), len(df[(df.target == 0) & (df.oldpeak < 1)]), len(df[(df.target == 0) & (df.oldpeak.between(1,2, inclusive=True))]), len(df[(df.target == 0) & (df.oldpeak.between(2,3, inclusive=False))]), len(df[(df.target == 0) & (df.oldpeak >= 3)])\n\n\nprint(\"%s patients that dont have disease have: %s - ST depression induced by exercise relative to rest less 1, %s - between 1-2, %s - between 2-3, %s - more 3\" %(ntarg_1, noldpeak_1, noldpeak_2, noldpeak_3, noldpeak_4))\nprint(\"ST depression induced by exercise relative to rest less 1: {:.0f}%\".format(noldpeak_1\/(ntarg_1)*100)) \nprint(\"ST depression induced by exercise relative to rest between 1-2: {:.0f}%\".format(noldpeak_2\/(ntarg_1)*100))  \nprint(\"ST depression induced by exercise relative to rest between 2-3: {:.0f}%\".format(noldpeak_3\/(ntarg_1)*100))\nprint(\"ST depression induced by exercise relative to rest more 3: {:.0f}%\".format(noldpeak_4\/(ntarg_1)*100))\nprint()\nline_labels = 'A type. less 1', 'B type. between 1-2', 'C type. between 2-3', 'D type. more 3'\nsizes1 = [46, 49, 21, 22]\n\n# Have disease by oldpeak = ST depression induced by exercise relative to rest\ndtarg_1, doldpeak_1, doldpeak_2, doldpeak_3, doldpeak_4 = len(df[df.target == 1]), len(df[(df.target == 1) & (df.oldpeak < 1)]), len(df[(df.target == 1) & (df.oldpeak.between(1,2, inclusive=True))]), len(df[(df.target == 1) & (df.oldpeak.between(2,3, inclusive=False))]), len(df[(df.target == 1) & (df.oldpeak >= 3)])\n\n\nprint(\"%s patients that have disease have: %s - ST depression induced by exercise relative to rest less 1, %s - between 1-2, %s - between 2-3, %s - more 3\" %(dtarg_1, doldpeak_1, doldpeak_2, doldpeak_3, doldpeak_4))\nprint(\"ST depression induced by exercise relative to rest less 1: {:.0f}%\".format(doldpeak_1\/(dtarg_1)*100)) \nprint(\"ST depression induced by exercise relative to rest between 1-2: {:.0f}%\".format(doldpeak_2\/(dtarg_1)*100))  \nprint(\"ST depression induced by exercise relative to rest between 2-3: {:.0f}%\".format(doldpeak_3\/(dtarg_1)*100))\nprint(\"ST depression induced by exercise relative to rest more 3: {:.0f}%\".format(doldpeak_4\/(dtarg_1)*100))\n\nsizes2 = [120, 38, 4, 3]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 6))\nfig.patch.set_facecolor('darkgrey')\nl1 = ax1.pie(sizes1, autopct='%1.0f%%',\n        shadow=True, startangle=90)\nl2 = ax2.pie(sizes2, autopct='%1.0f%%',\n        shadow=True, explode=(0, 0, 0, 0))\nax1.set_title('Dont have disease')\nax2.set_title('Have disease')\nfig.legend([l1, l2],    \n           labels=line_labels, \n           loc=\"center left\",  \n           borderaxespad=0.1,   \n           title=\"ST depression\" \n           )\n\nplt.subplots_adjust(right=0.9)\nplt.show()\nprint(\"Patients, that dont have heart disease are more likely to have B, C and D type ST depression induced by exercise relative to rest, compared to patients, that have heart disease\")\nprint(\"Patients, that have heart disease are more likely to have A type of ST depression induced by exercise relative to rest\")\nprint(\"Almost 3 of 4 patients, that have heart disease have A type of ST depression induced by exercise relative to rest. And A type is diagnosed only to 1 of 3 patients , that dont have heart disease\")","35a25283":"print(\"                    Patients by the slope of the peak exercise ST segment       \") \nprint()\n# Dont have disease by the slope of the peak exercise ST segment \nntarg_1, nslope_0, nslope_1, nslope_2 = len(df[df.target == 0]), len(df[(df.target == 0) & (df.slope == 0)]), len(df[(df.target == 0) & (df.slope == 1)]), len(df[(df.target == 0) & (df.slope == 2)])\n\n\nprint(\"%s patients that dont have heart disease have:  %s - the slope 0 of the peak exercise ST segment, slope 1 - %s, slope 2 - %s\" %(ntarg_1, nslope_0, nslope_1, nslope_2))\nprint(\"Slope 0 of the peak exercise ST segment: {:.0f}%\".format(nslope_0\/(ntarg_1)*100)) \nprint(\"Slope 1 of the peak exercise ST segment: {:.0f}%\".format(nslope_1\/(ntarg_1)*100))  \nprint(\"Slope 2 of the peak exercise ST segment: {:.0f}%\".format(nslope_2\/(ntarg_1)*100))\nprint()\n\nline_labels = 'Slope 0', 'Slope 1', 'Slope 2'\nsizes1 = [12, 91, 35]\n\n# Have disease by the slope of the peak exercise ST segment \ndtarg_1, dslope_0, dslope_1, dslope_2 = len(df[df.target == 1]), len(df[(df.target == 1) & (df.slope == 0)]), len(df[(df.target == 1) & (df.slope == 1)]), len(df[(df.target == 1) & (df.slope == 2)])\nprint(\"%s patients that have heart disease have:  %s - the slope 0 of the peak exercise ST segment, slope 1 - %s, slope 2 - %s\" %(dtarg_1, dslope_0, dslope_1, dslope_2))\nprint(\"Slope 0 of the peak exercise ST segment: {:.0f}%\".format(dslope_0\/(dtarg_1)*100)) \nprint(\"Slope 1 of the peak exercise ST segment: {:.0f}%\".format(dslope_1\/(dtarg_1)*100))  \nprint(\"Slope 2 of the peak exercise ST segment: {:.0f}%\".format(dslope_2\/(dtarg_1)*100))\n\nsizes2 = [9, 49, 107]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 6))\nfig.patch.set_facecolor('darkgrey')\nl1 = ax1.pie(sizes1, autopct='%1.0f%%',\n        shadow=True, startangle=90)\nl2 = ax2.pie(sizes2, autopct='%1.0f%%',\n        shadow=True, explode=(0, 0, 0))\nax1.set_title('Dont have disease')\nax2.set_title('Have disease')\nfig.legend([l1, l2],    \n           labels=line_labels, \n           loc=\"center left\",  \n           borderaxespad=0.1,   \n           title=\"Slope\" \n           )\n\nplt.subplots_adjust(right=0.9)\nplt.show()\nprint(\"2 of 3 patients that dont have heart disease have slope 0\")\nprint(\"2 of 3 patients that have heart disease have slope 2\")","55d63b93":"print(\"                    Patients by number of major vessels (0-3) colored by flourosopy       \") \nprint()\n# Dont have disease by number of major vessels (0-3) colored by flourosopy\nntarg_1, nca_0, nca_1, nca_2, nca_3 = len(df[df.target == 0]), len(df[(df.target == 0) & (df.ca == 0)]), len(df[(df.target == 0) & (df.ca == 1)]), len(df[(df.target == 0) & (df.ca == 2)]), len(df[(df.target == 0) & (df.ca >= 3)])\n\nprint(\"Out of %s patients, that dont have heart disease have: %s - number 0 of major vessels colored by flourosopy, %s - number 1, %s - number 2, %s - number 3\" %(ntarg_1, nca_0, nca_1, nca_2, nca_3))\nprint(\"Number 0 of major vessels colored by flourosopy: {:.0f}%\".format(nca_0\/(ntarg_1)*100)) \nprint(\"Number 1 of major vessels colored by flourosopy: {:.0f}%\".format(nca_1\/(ntarg_1)*100))  \nprint(\"Number 2 of major vessels colored by flourosopy: {:.0f}%\".format(nca_2\/(ntarg_1)*100)) \nprint(\"Number 3 of major vessels colored by flourosopy: {:.0f}%\".format(nca_3\/(ntarg_1)*100)) \nprint()\nline_labels = 'Number 0', 'Number 1', 'Number 2', 'Number 3'\nsizes1 = [45, 44, 31, 18]\n\n# Have disease by number of major vessels (0-3) colored by flourosopy\ndtarg_1, dca_0, dca_1, dca_2, dca_3 = len(df[df.target == 1]), len(df[(df.target == 1) & (df.ca == 0)]), len(df[(df.target == 1) & (df.ca == 1)]), len(df[(df.target == 1) & (df.ca == 2)]), len(df[(df.target == 1) & (df.ca >= 3)])\n\nprint(\"Out of %s patients, that have heart disease have: %s - number 0 of major vessels colored by flourosopy,%s - number 1, %s - number 2, %s - number 3\" %(dtarg_1, dca_0, dca_1, dca_2, dca_3))\nprint(\"Number 0 of major vessels colored by flourosopy: {:.0f}%\".format(dca_0\/(dtarg_1)*100)) \nprint(\"Number 1 of major vessels colored by flourosopy: {:.0f}%\".format(dca_1\/(dtarg_1)*100))  \nprint(\"Number 2 of major vessels colored by flourosopy: {:.0f}%\".format(dca_2\/(dtarg_1)*100)) \nprint(\"Number 3 of major vessels colored by flourosopy: {:.0f}%\".format(dca_3\/(dtarg_1)*100)) \n\nsizes2 = [130, 21, 7, 7]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 6))\nfig.patch.set_facecolor('darkgrey')\nl1 = ax1.pie(sizes1, autopct='%1.0f%%',\n        shadow=True, startangle=90)\nl2 = ax2.pie(sizes2, autopct='%1.0f%%',\n        shadow=True, explode=(0, 0, 0, 0))\nax1.set_title('Dont have disease')\nax2.set_title('Have disease')\nfig.legend([l1, l2],    \n           labels=line_labels, \n           loc=\"center left\",  \n           borderaxespad=0.1,   \n           title=\"Major vessels\" \n           )\n\nplt.subplots_adjust(right=0.9)\nplt.show()\nprint(\"Patients, that have heart disease mostly have number 0 of major vessels colored by flourosopy\")\nprint(\"Only 1 of 3 patients, that dont have heart disease have number 0 of major vessels colored by flourosopy ant they more likely to have number 1, 2 and 3 of major vessels colored by flourosopy\")\n","1964b5db":"print(\"                    Patients by thal       \") \nprint()\n# Dont have disease by thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\nntarg_1, nthal_0, nthal_1, nthal_2, nthal_3 = len(df[df.target == 0]), len(df[(df.target == 0) & (df.thal == 0)]), len(df[(df.target == 0) & (df.thal == 1)]), len(df[(df.target == 0) & (df.thal == 2)]), len(df[(df.target == 0) & (df.thal == 3)])\n\n\nprint(\"Out of %s patients, that dont have heart disease have: %s - thal 0, %s - thal 1, %s - thal 2, %s - thal 3\" %(ntarg_1, nthal_0, nthal_1, nthal_2, nthal_3))\nprint(\"thal 0: {:.0f}%\".format(nthal_0\/(ntarg_1)*100)) \nprint(\"thal 1: {:.0f}%\".format(nthal_1\/(ntarg_1)*100))  \nprint(\"thal 2: {:.0f}%\".format(nthal_2\/(ntarg_1)*100)) \nprint(\"thal 3: {:.0f}%\".format(nthal_3\/(ntarg_1)*100)) \nprint()\nline_labels = 'thal 0', 'thal 1', 'thal 2', 'thal 3'\nsizes1 = [1, 12, 36, 89]\n\n# Have disease by thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\ndtarg_1, dthal_0, dthal_1, dthal_2, dthal_3 = len(df[df.target == 1]), len(df[(df.target == 1) & (df.thal == 0)]), len(df[(df.target == 1) & (df.thal == 1)]), len(df[(df.target == 1) & (df.thal == 2)]), len(df[(df.target == 1) & (df.thal == 3)])\n\n\nprint(\"Out of %s patients, that have heart disease have: %s - thal 0, %s - thal 1, %s - thal 2, %s - thal 3\" %(dtarg_1, dthal_0, dthal_1, dthal_2, dthal_3))\nprint(\"thal 0: {:.0f}%\".format(dthal_0\/(dtarg_1)*100)) \nprint(\"thal 1: {:.0f}%\".format(dthal_1\/(dtarg_1)*100))  \nprint(\"thal 2: {:.0f}%\".format(dthal_2\/(dtarg_1)*100)) \nprint(\"thal 3: {:.0f}%\".format(dthal_3\/(dtarg_1)*100)) \n\nsizes2 = [1, 6, 130, 28]\n\nfig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 6))\nfig.patch.set_facecolor('darkgrey')\nl1 = ax1.pie(sizes1, autopct='%1.0f%%',\n        shadow=True, startangle=90)\nl2 = ax2.pie(sizes2, autopct='%1.0f%%',\n        shadow=True, explode=(0, 0, 0, 0))\nax1.set_title('Dont have disease')\nax2.set_title('Have disease')\nfig.legend([l1, l2],    \n           labels=line_labels, \n           loc=\"center left\",  \n           borderaxespad=0.1,   \n           title=\"By thal\" \n           )\n\nplt.subplots_adjust(right=0.9)\nplt.show()\nprint(\"Almost 4 of 5 patients, that have heart disease have thal 2\")\nprint(\"Almost 2 of 3 patients, that dont have heart disease have thal 3\")","e7b4c71b":"X = df.drop('target', axis=1)\ny = df['target']","7f6e033a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","d6892b9f":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","ed11f1e2":"X_train[:1]","d5158eb1":"classifiers = { \n        'Random Forest':RandomForestClassifier(n_estimators=10, random_state=0), \n        'SVM':SVC(gamma=0.01, kernel='linear'), 'MLP' : MLPClassifier(hidden_layer_sizes=(11,11,11), max_iter=500), 'Logistic Regression': LogisticRegression(solver='liblinear'), \n        'Decision Tree':DecisionTreeClassifier(), 'Gradient Boosting' :GradientBoostingClassifier(max_features=1, learning_rate=0.05) \n       }\n\npredict_value = {}\nfor k, v in classifiers.items():\n    model = v\n    model.fit(X_train, y_train)\n    predict_value[k] = model.score(X_test, y_test)*100\n    print('Acurracy of ' + k + ' is {0:.2f}'.format(model.score(X_test, y_test)*100))\n","ba3e8d6c":"plt.style.use('ggplot')\nplt.figure(figsize=(16, 6))\nsns.barplot(x=list(predict_value.keys()), y=list(predict_value.values()), palette=\"rocket\")\nsns.despine(bottom=True)\nplt.setp(f.axes, yticks=[])\nplt.tight_layout(h_pad=2)\n\nplt.yticks(np.arange(0,100,5))\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Models\")\nplt.show()","595fe5c1":"GBC = GradientBoostingClassifier(max_features=1, learning_rate=0.05)\nGBC.fit(X_train, y_train)\nGBC_pred = GBC.predict(X_test)\nprint(classification_report(y_test, GBC_pred))\nprint(confusion_matrix(y_test, GBC_pred))\nprint()","3774ff0d":"Xnew = [[34, 0, 0, 124, 160, 1, 0, 130, 0, 3.1, 0, 0, 1]]\nXnew = sc.transform(Xnew)\nYnew = GBC.predict(Xnew)\nprint(Ynew, \"Diagnosis ({} for Non-disease, {} for disease)\".format(0, 1))\n","ca6ed227":"\nAttribute Information: \n> 1. age \n> 2. sex \n> 3. chest pain type (4 values) \n> 4. resting blood pressure \n> 5. serum cholestoral in mg\/dl \n> 6. fasting blood sugar > 120 mg\/dl\n> 7. resting electrocardiographic results (values 0,1,2)\n> 8. maximum heart rate achieved \n> 9. exercise induced angina \n> 10. oldpeak = ST depression induced by exercise relative to rest \n> 11. the slope of the peak exercise ST segment \n> 12. number of major vessels (0-3) colored by flourosopy \n> 13. thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n"}}