{"cell_type":{"3ccebd95":"code","53e2f73d":"code","a94738ad":"code","4a12d03c":"code","adf59e49":"code","6ec57025":"code","b3ef6799":"code","3cd68cc3":"code","6f25f08d":"code","51ed0b5c":"code","b2efab3a":"code","09b18333":"code","16b3dfd2":"code","1ff64789":"code","5b7e5e39":"code","7628a9c3":"code","28f7e405":"code","21f690b6":"code","93f37085":"code","940420e1":"code","548d5ded":"code","69508a52":"code","555a3b7c":"code","dd5485fe":"code","aff982f1":"code","07d1abcd":"code","4db9e464":"code","83bedcb8":"code","697f241a":"code","054a25b8":"code","e1829c0e":"code","8f279742":"code","706b7a01":"code","f0149530":"code","2079d60b":"code","0333d6d8":"code","c8930122":"code","8ddfb702":"code","3ae621da":"code","0a1105bf":"code","6d4052f0":"code","82b2418c":"code","a89482da":"code","5cb790fd":"code","11d5b81b":"code","356a1946":"code","f7b508c9":"code","1b397949":"code","2c98736c":"code","86f16869":"code","0593ab78":"code","c63dce2a":"code","6f9a0ace":"code","6dab69c2":"code","f96dd8f1":"code","06f8fa7e":"code","a6d3fffc":"code","70f2201c":"code","9b13856c":"code","ccc6e4c5":"code","d5ccf490":"code","2755c6ca":"code","7c8c9af6":"code","60304b5f":"code","d1388767":"code","4c95b87b":"code","674d78cb":"code","bc7c0d74":"code","9a57a7b5":"code","73487114":"code","f17d8656":"code","e2d1ac65":"code","93db27a0":"markdown","50333210":"markdown","090cb714":"markdown","c3cf464e":"markdown","4dc9bce3":"markdown","33e7d404":"markdown","83681b8d":"markdown","6af424bd":"markdown"},"source":{"3ccebd95":"import os, gc, pickle, copy, datetime, warnings\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nfrom sklearn import metrics\npd.set_option('display.max_columns', 100)\nwarnings.filterwarnings('ignore')","53e2f73d":"df_train = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/train.csv\")\nprint(df_train.shape)\ndf_train.head()","a94738ad":"df_test = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/test.csv\")\nprint(df_test.shape)\ndf_test.head()","4a12d03c":"# concat train and test\ndf_traintest = pd.concat([df_train, df_test])\nprint(df_train.shape, df_test.shape, df_traintest.shape)","adf59e49":"# process date\ndf_traintest['Date'] = pd.to_datetime(df_traintest['Date'])\ndf_traintest['day'] = df_traintest['Date'].apply(lambda x: x.dayofyear).astype(np.int16)\ndf_traintest.head()","6ec57025":"day_before_valid = 85-7 # 3-18 day  before of validation\nday_before_public = 85 # 3-25, the day before public LB period\nday_before_private = df_traintest['day'][pd.isna(df_traintest['ForecastId'])].max() # last day of train\nprint(df_traintest['Date'][df_traintest['day']==day_before_valid].values[0])\nprint(df_traintest['Date'][df_traintest['day']==day_before_public].values[0])\nprint(df_traintest['Date'][df_traintest['day']==day_before_private].values[0])","b3ef6799":"# concat Country\/Region and Province\/State\ndef func(x):\n    try:\n        x_new = x['Country_Region'] + \"\/\" + x['Province_State']\n    except:\n        x_new = x['Country_Region']\n    return x_new\n        \ndf_traintest['place_id'] = df_traintest.apply(lambda x: func(x), axis=1)\ndf_traintest.head()","3cd68cc3":"df_traintest[(df_traintest['day']>=day_before_public-3) & (df_traintest['place_id']=='China\/Hubei')].head()","6f25f08d":"# concat lat and long\ndf_latlong = pd.read_csv(\"..\/input\/smokingstats\/df_Latlong.csv\")\ndf_latlong.head()","51ed0b5c":"# concat Country\/Region and Province\/State\ndef func(x):\n    try:\n        x_new = x['Country\/Region'] + \"\/\" + x['Province\/State']\n    except:\n        x_new = x['Country\/Region']\n    return x_new\n        \ndf_latlong['place_id'] = df_latlong.apply(lambda x: func(x), axis=1)\ndf_latlong = df_latlong[df_latlong['place_id'].duplicated()==False]\ndf_latlong.head()","b2efab3a":"df_tmp = df_traintest[['place_id']][df_traintest['place_id'].duplicated()==False]\ndf_tmp = pd.merge(df_tmp, df_latlong[['place_id', 'Lat', 'Long']], on='place_id', how='left')\ntmp = df_latlong[['Lat', 'Long']].values[df_latlong['place_id']=='United Kingdom\/United Kingdom']\ndf_tmp.loc[df_tmp['place_id']=='United Kingdom', ['Lat', 'Long']] = tmp\ntmp = df_latlong[['Lat', 'Long']].values[df_latlong['place_id']=='Cruise Ship\/Diamond Princess']\ndf_tmp.loc[df_tmp['place_id']=='Diamond Princess', ['Lat', 'Long']] = tmp\ntmp = df_latlong[['Lat', 'Long']].values[df_latlong['place_id']=='Denmark\/Denmark']\ndf_tmp.loc[df_tmp['place_id']=='Denmark', ['Lat', 'Long']] = tmp\ntmp = df_latlong[['Lat', 'Long']].values[df_latlong['place_id']=='France\/France']\ndf_tmp.loc[df_tmp['place_id']=='France', ['Lat', 'Long']] = tmp\ntmp = df_latlong[['Lat', 'Long']].values[df_latlong['place_id']=='Gambia, The']\ndf_tmp.loc[df_tmp['place_id']=='Gambia', ['Lat', 'Long']] = tmp\ntmp = df_latlong[['Lat', 'Long']].values[df_latlong['place_id']=='Netherlands\/Netherlands']\ndf_tmp.loc[df_tmp['place_id']=='Netherlands', ['Lat', 'Long']] = tmp\ndf_tmp.loc[df_tmp['place_id']=='Dominica', ['Lat', 'Long']] = (15.3, -61.383333)\ndf_tmp.loc[df_tmp['place_id']=='Angola', ['Lat', 'Long']] = (-8.830833, 13.245)\ndf_tmp.loc[df_tmp['place_id']=='Bahamas', ['Lat', 'Long']] = (25.066667, -77.333333)\ndf_tmp.loc[df_tmp['place_id']=='Belize', ['Lat', 'Long']] = (17.498611, -88.188611)\ndf_tmp.loc[df_tmp['place_id']=='Cabo Verde', ['Lat', 'Long']] = (14.916667, -23.516667)\ndf_tmp.loc[df_tmp['place_id']=='Chad', ['Lat', 'Long']] = (12.134722, 15.055833)\ndf_tmp.loc[df_tmp['place_id']=='Denmark\/Greenland', ['Lat', 'Long']] = (64.181389, -51.694167)\ndf_tmp.loc[df_tmp['place_id']=='El Salvador', ['Lat', 'Long']] = (13.698889, -89.191389)\ndf_tmp.loc[df_tmp['place_id']=='Eritrea', ['Lat', 'Long']] = (15.322778, 38.925)\ndf_tmp.loc[df_tmp['place_id']=='Fiji', ['Lat', 'Long']] = (-18.166667, 178.45)\ndf_tmp.loc[df_tmp['place_id']=='France\/Martinique', ['Lat', 'Long']] = (14.666667, -61)\ndf_tmp.loc[df_tmp['place_id']=='France\/New Caledonia', ['Lat', 'Long']] = (-22.2758, 166.458)\ndf_tmp.loc[df_tmp['place_id']=='Grenada', ['Lat', 'Long']] = (12.05, -61.75)\ndf_tmp.loc[df_tmp['place_id']=='Guinea-Bissau', ['Lat', 'Long']] = (11.85, -15.566667)\ndf_tmp.loc[df_tmp['place_id']=='Haiti', ['Lat', 'Long']] = (18.533333, -72.333333)\ndf_tmp.loc[df_tmp['place_id']=='Laos', ['Lat', 'Long']] = (17.966667, 102.6)\ndf_tmp.loc[df_tmp['place_id']=='Libya', ['Lat', 'Long']] = (32.887222, 13.191389)\ndf_tmp.loc[df_tmp['place_id']=='Madagascar', ['Lat', 'Long']] = (-18.933333, 47.516667)\ndf_tmp.loc[df_tmp['place_id']=='Mali', ['Lat', 'Long']] = (12.639167, -8.002778)\ndf_tmp.loc[df_tmp['place_id']=='Mozambique', ['Lat', 'Long']] = (-25.966667, 32.583333)\ndf_tmp.loc[df_tmp['place_id']=='Netherlands\/Sint Maarten', ['Lat', 'Long']] = (18.052778, -63.0425)\ndf_tmp.loc[df_tmp['place_id']=='Nicaragua', ['Lat', 'Long']] = (12.136389, -86.251389)\ndf_tmp.loc[df_tmp['place_id']=='Niger', ['Lat', 'Long']] = (13.511667, 2.125278)\ndf_tmp.loc[df_tmp['place_id']=='Papua New Guinea', ['Lat', 'Long']] = (-9.478889, 147.149444)\ndf_tmp.loc[df_tmp['place_id']=='Saint Kitts and Nevis', ['Lat', 'Long']] = (17.3, -62.733333)\ndf_tmp.loc[df_tmp['place_id']=='Syria', ['Lat', 'Long']] = (33.513056, 36.291944)\ndf_tmp.loc[df_tmp['place_id']=='Timor-Leste', ['Lat', 'Long']] = (-8.566667, 125.566667)\ndf_tmp.loc[df_tmp['place_id']=='Uganda', ['Lat', 'Long']] = (0.313611, 32.581111)\ndf_tmp.loc[df_tmp['place_id']=='Zimbabwe', ['Lat', 'Long']] = (-17.829167, 31.052222)\ndf_tmp.loc[df_tmp['place_id']=='United Kingdom\/Bermuda', ['Lat', 'Long']] = (32.293, -64.782)\ndf_tmp.loc[df_tmp['place_id']=='United Kingdom\/Isle of Man', ['Lat', 'Long']] = (54.145, -4.482)\n\ndf_tmp.loc[df_tmp['place_id']=='Botswana', ['Lat', 'Long']] = (-24.658056, 25.912222)\ndf_tmp.loc[df_tmp['place_id']=='Burma', ['Lat', 'Long']] = (16.85, 96.183333)\ndf_tmp.loc[df_tmp['place_id']=='Burundi', ['Lat', 'Long']] = (-3.383333, 29.366667)\ndf_tmp.loc[df_tmp['place_id']=='Canada\/Northwest Territories', ['Lat', 'Long']] = (62.442222, -114.394722)\ndf_tmp.loc[df_tmp['place_id']=='Canada\/Yukon', ['Lat', 'Long']] = (60.716667, -135.05)\ndf_tmp.loc[df_tmp['place_id']=='Kosovo', ['Lat', 'Long']] = (42.666667, 21.166667)\ndf_tmp.loc[df_tmp['place_id']=='MS Zaandam', ['Lat', 'Long']] = (26.086111, -80.115278) # Uncertain\ndf_tmp.loc[df_tmp['place_id']=='Sierra Leone', ['Lat', 'Long']] = (8.484444, -13.234444)\ndf_tmp.loc[df_tmp['place_id']=='United Kingdom\/Anguilla', ['Lat', 'Long']] = (18.220833, -63.051667)\ndf_tmp.loc[df_tmp['place_id']=='United Kingdom\/British Virgin Islands', ['Lat', 'Long']] = (18.431389, -64.623056)\ndf_tmp.loc[df_tmp['place_id']=='United Kingdom\/Turks and Caicos Islands', ['Lat', 'Long']] = (21.783333, -72.283333)\ndf_tmp.loc[df_tmp['place_id']=='West Bank and Gaza', ['Lat', 'Long']] = (31.703056, 35.195556)\ndf_tmp[df_tmp['place_id']=='West Bank and Gaza'][['Lat', 'Long']] ","09b18333":"df_traintest = pd.merge(df_traintest, df_tmp[['place_id', 'Lat', 'Long']], on='place_id', how='left')\ndf_traintest.head()","16b3dfd2":"# count the places with no Lat and Long.\ntmp = np.sort(df_traintest['place_id'][pd.isna(df_traintest['Lat'])].unique())\nprint(len(tmp)) # count Nan\nprint(tmp)","1ff64789":"# get place list\nplaces = np.sort(df_traintest['place_id'].unique())\nfor place in places:\n    print(place)\nprint(len(places))","5b7e5e39":"# calc cases, fatalities per day\ndf_traintest2 = copy.deepcopy(df_traintest)\ndf_traintest2['cases\/day'] = 0\ndf_traintest2['fatal\/day'] = 0\ntmp_list = np.zeros(len(df_traintest2))\nfor place in places:\n    tmp = df_traintest2['ConfirmedCases'][df_traintest2['place_id']==place].values\n    tmp[1:] -= tmp[:-1]\n    df_traintest2['cases\/day'][df_traintest2['place_id']==place] = tmp\n    tmp = df_traintest2['Fatalities'][df_traintest2['place_id']==place].values\n    tmp[1:] -= tmp[:-1]\n    df_traintest2['fatal\/day'][df_traintest2['place_id']==place] = tmp\nprint(df_traintest2.shape)\ndf_traintest2[df_traintest2['place_id']=='China\/Hubei'].head()","7628a9c3":"# aggregate cases and fatalities\ndef do_aggregation(df, col, mean_range):\n    df_new = copy.deepcopy(df)\n    col_new = '{}_({}-{})'.format(col, mean_range[0], mean_range[1])\n    df_new[col_new] = 0\n    tmp = df_new[col].rolling(mean_range[1]-mean_range[0]+1).mean()\n    df_new[col_new][mean_range[0]:] = tmp[:-(mean_range[0])]\n    df_new[col_new][pd.isna(df_new[col_new])] = 0\n    return df_new[[col_new]].reset_index(drop=True)\n\ndef do_aggregations(df):\n    df = pd.concat([df, do_aggregation(df, 'cases\/day', [1,1]).reset_index(drop=True)], axis=1)\n    df = pd.concat([df, do_aggregation(df, 'cases\/day', [1,7]).reset_index(drop=True)], axis=1)\n    df = pd.concat([df, do_aggregation(df, 'cases\/day', [8,14]).reset_index(drop=True)], axis=1)\n    df = pd.concat([df, do_aggregation(df, 'cases\/day', [15,21]).reset_index(drop=True)], axis=1)\n    df = pd.concat([df, do_aggregation(df, 'fatal\/day', [1,1]).reset_index(drop=True)], axis=1)\n    df = pd.concat([df, do_aggregation(df, 'fatal\/day', [1,7]).reset_index(drop=True)], axis=1)\n    df = pd.concat([df, do_aggregation(df, 'fatal\/day', [8,14]).reset_index(drop=True)], axis=1)\n    df = pd.concat([df, do_aggregation(df, 'fatal\/day', [15,21]).reset_index(drop=True)], axis=1)\n    for threshold in [1, 10, 100]:\n        days_under_threshold = (df['ConfirmedCases']<threshold).sum()\n        tmp = df['day'].values - 22 - days_under_threshold\n        tmp[tmp<=0] = 0\n        df['days_since_{}cases'.format(threshold)] = tmp\n            \n    for threshold in [1, 10, 100]:\n        days_under_threshold = (df['Fatalities']<threshold).sum()\n        tmp = df['day'].values - 22 - days_under_threshold\n        tmp[tmp<=0] = 0\n        df['days_since_{}fatal'.format(threshold)] = tmp\n    \n    # process China\/Hubei\n    if df['place_id'][0]=='China\/Hubei':\n        df['days_since_1cases'] += 35 # 2019\/12\/8\n        df['days_since_10cases'] += 35-13 # 2019\/12\/8-2020\/1\/2 assume 2019\/12\/8+13\n        df['days_since_100cases'] += 4 # 2020\/1\/18\n        df['days_since_1fatal'] += 13 # 2020\/1\/9\n    return df","28f7e405":"df_traintest3 = []\nfor place in places[:]:\n    df_tmp = df_traintest2[df_traintest2['place_id']==place].reset_index(drop=True)\n    df_tmp = do_aggregations(df_tmp)\n    df_traintest3.append(df_tmp)\ndf_traintest3 = pd.concat(df_traintest3).reset_index(drop=True)\ndf_traintest3[df_traintest3['place_id']=='China\/Hubei'].head()","21f690b6":"# add Smoking rate per country\n# data of smoking rate is obtained from https:\/\/ourworldindata.org\/smoking\ndf_smoking = pd.read_csv(\"..\/input\/smokingstats\/share-of-adults-who-smoke.csv\")\nprint(np.sort(df_smoking['Entity'].unique())[:10])\ndf_smoking.head()","93f37085":"# extract newest data\ndf_smoking_recent = df_smoking.sort_values('Year', ascending=False).reset_index(drop=True)\ndf_smoking_recent = df_smoking_recent[df_smoking_recent['Entity'].duplicated()==False]\ndf_smoking_recent['Country_Region'] = df_smoking_recent['Entity']\ndf_smoking_recent['SmokingRate'] = df_smoking_recent['Smoking prevalence, total (ages 15+) (% of adults)']\ndf_smoking_recent.head()","940420e1":"# merge\ndf_traintest4 = pd.merge(df_traintest3, df_smoking_recent[['Country_Region', 'SmokingRate']], on='Country_Region', how='left')\nprint(df_traintest4.shape)\ndf_traintest4.head()","548d5ded":"# fill na with world smoking rate\nSmokingRate = df_smoking_recent['SmokingRate'][df_smoking_recent['Entity']=='World'].values[0]\nprint(\"Smoking rate of the world: {:.6f}\".format(SmokingRate))\ndf_traintest4['SmokingRate'][pd.isna(df_traintest4['SmokingRate'])] = SmokingRate\ndf_traintest4.head()","69508a52":"# add data from World Economic Outlook Database\n# https:\/\/www.imf.org\/external\/pubs\/ft\/weo\/2017\/01\/weodata\/index.aspx\ndf_weo = pd.read_csv(\"..\/input\/smokingstats\/WEO.csv\")\ndf_weo.head()","555a3b7c":"print(df_weo['Subject Descriptor'].unique())","dd5485fe":"subs  = df_weo['Subject Descriptor'].unique()[:-1]\ndf_weo_agg = df_weo[['Country']][df_weo['Country'].duplicated()==False].reset_index(drop=True)\nfor sub in subs[:]:\n    df_tmp = df_weo[['Country', '2019']][df_weo['Subject Descriptor']==sub].reset_index(drop=True)\n    df_tmp = df_tmp[df_tmp['Country'].duplicated()==False].reset_index(drop=True)\n    df_tmp.columns = ['Country', sub]\n    df_weo_agg = df_weo_agg.merge(df_tmp, on='Country', how='left')\ndf_weo_agg.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in df_weo_agg.columns]\ndf_weo_agg.columns\ndf_weo_agg['Country_Region'] = df_weo_agg['Country']\ndf_weo_agg.head()","aff982f1":"# merge\ndf_traintest5 = pd.merge(df_traintest4, df_weo_agg, on='Country_Region', how='left')\nprint(df_traintest5.shape)\ndf_traintest5.head()","07d1abcd":"# add Life expectancy\n# Life expectancy at birth obtained from http:\/\/hdr.undp.org\/en\/data\ndf_life = pd.read_csv(\"..\/input\/smokingstats\/Life expectancy at birth.csv\")\ntmp = df_life.iloc[:,1].values.tolist()\ndf_life = df_life[['Country', '2018']]\ndef func(x):\n    x_new = 0\n    try:\n        x_new = float(x.replace(\",\", \"\"))\n    except:\n#         print(x)\n        x_new = np.nan\n    return x_new\n    \ndf_life['2018'] = df_life['2018'].apply(lambda x: func(x))\ndf_life.head()","4db9e464":"df_life = df_life[['Country', '2018']]\ndf_life.columns = ['Country_Region', 'LifeExpectancy']","83bedcb8":"# merge\ndf_traintest6 = pd.merge(df_traintest5, df_life, on='Country_Region', how='left')\nprint(len(df_traintest6))\ndf_traintest6.head()","697f241a":"# add additional info from countryinfo dataset\ndf_country = pd.read_csv(\"..\/input\/countryinfo\/covid19countryinfo.csv\")\ndf_country.head()","054a25b8":"df_country['Country_Region'] = df_country['country']\ndf_country = df_country[df_country['country'].duplicated()==False]","e1829c0e":"print(df_country[df_country['country'].duplicated()].shape)","8f279742":"df_country[df_country['country'].duplicated()]","706b7a01":"df_traintest7 = pd.merge(df_traintest6, \n                         df_country.drop(['tests', 'testpop', 'country'], axis=1), \n                         on=['Country_Region',], how='left')\nprint(df_traintest7.shape)\ndf_traintest7.head()","f0149530":"def encode_label(df, col, freq_limit=0):\n    df[col][pd.isna(df[col])] = 'nan'\n    tmp = df[col].value_counts()\n    cols = tmp.index.values\n    freq = tmp.values\n    num_cols = (freq>=freq_limit).sum()\n    print(\"col: {}, num_cat: {}, num_reduced: {}\".format(col, len(cols), num_cols))\n\n    col_new = '{}_le'.format(col)\n    df_new = pd.DataFrame(np.ones(len(df), np.int16)*(num_cols-1), columns=[col_new])\n    for i, item in enumerate(cols[:num_cols]):\n        df_new[col_new][df[col]==item] = i\n\n    return df_new\n\ndef get_df_le(df, col_index, col_cat):\n    df_new = df[[col_index]]\n    for col in col_cat:\n        df_tmp = encode_label(df, col)\n        df_new = pd.concat([df_new, df_tmp], axis=1)\n    return df_new\n\ndf_traintest7['id'] = np.arange(len(df_traintest7))\ndf_le = get_df_le(df_traintest7, 'id', ['Country_Region', 'Province_State'])\ndf_traintest8 = pd.merge(df_traintest7, df_le, on='id', how='left')","2079d60b":"df_traintest8['cases\/day'] = df_traintest8['cases\/day'].astype(np.float)\ndf_traintest8['fatal\/day'] = df_traintest8['fatal\/day'].astype(np.float)","0333d6d8":"# covert object type to float\ndef func(x):\n    x_new = 0\n    try:\n        x_new = float(x.replace(\",\", \"\"))\n    except:\n#         print(x)\n        x_new = np.nan\n    return x_new\ncols = [\n    'Gross_domestic_product__constant_prices', \n    'Gross_domestic_product__current_prices', \n    'Gross_domestic_product__deflator', \n    'Gross_domestic_product_per_capita__constant_prices', \n    'Gross_domestic_product_per_capita__current_prices', \n    'Output_gap_in_percent_of_potential_GDP', \n    'Gross_domestic_product_based_on_purchasing_power_parity__PPP__valuation_of_country_GDP', \n    'Gross_domestic_product_based_on_purchasing_power_parity__PPP__per_capita_GDP', \n    'Gross_domestic_product_based_on_purchasing_power_parity__PPP__share_of_world_total', \n    'Implied_PPP_conversion_rate', 'Total_investment', \n    'Gross_national_savings', 'Inflation__average_consumer_prices', \n    'Inflation__end_of_period_consumer_prices', \n    'Six_month_London_interbank_offered_rate__LIBOR_', \n    'Volume_of_imports_of_goods_and_services', \n    'Volume_of_Imports_of_goods', \n    'Volume_of_exports_of_goods_and_services', \n    'Volume_of_exports_of_goods', 'Unemployment_rate', 'Employment', 'Population', \n    'General_government_revenue', 'General_government_total_expenditure', \n    'General_government_net_lending_borrowing', 'General_government_structural_balance', \n    'General_government_primary_net_lending_borrowing', 'General_government_net_debt', \n    'General_government_gross_debt', 'Gross_domestic_product_corresponding_to_fiscal_year__current_prices', \n    'Current_account_balance', 'pop'\n]\nfor col in cols:\n    df_traintest8[col] = df_traintest8[col].apply(lambda x: func(x))  \nprint(df_traintest8['pop'].dtype)","c8930122":"from google.cloud import bigquery\n# %%time\nclient = bigquery.Client()\ndataset_ref = client.dataset(\"noaa_gsod\", project=\"bigquery-public-data\")\ndataset = client.get_dataset(dataset_ref)\n\ntables = list(client.list_tables(dataset))\n\ntable_ref = dataset_ref.table(\"stations\")\ntable = client.get_table(table_ref)\nstations_df = client.list_rows(table).to_dataframe()\n\ntable_ref = dataset_ref.table(\"gsod2019\")\ntable = client.get_table(table_ref)\ntwenty_twenty_df = client.list_rows(table).to_dataframe()\n\nstations_df['STN'] = stations_df['usaf'] + '-' + stations_df['wban']\ntwenty_twenty_df['STN'] = twenty_twenty_df['stn'] + '-' + twenty_twenty_df['wban']\n\ncols_1 = ['STN', 'mo', 'da', 'temp', 'min', 'max', 'stp', 'wdsp', 'prcp', 'fog']\ncols_2 = ['STN', 'country', 'state', 'call', 'lat', 'lon', 'elev']\nweather_df = twenty_twenty_df[cols_1].join(stations_df[cols_2].set_index('STN'), on='STN')\n\nweather_df['temp'] = weather_df['temp'].apply(lambda x: np.nan if x==9999.9 else x)\nweather_df['max'] = weather_df['max'].apply(lambda x: np.nan if x==9999.9 else x)\nweather_df['min'] = weather_df['min'].apply(lambda x: np.nan if x==9999.9 else x)\nweather_df['stp'] = weather_df['stp'].apply(lambda x: np.nan if x==9999.9 else x)\nweather_df['wdsp'] = weather_df['wdsp'].apply(lambda x: np.nan if x==999.9 else x)\nweather_df['prcp'] = weather_df['prcp'].apply(lambda x: np.nan if x==99.9 else x)\n\ndisplay(weather_df.tail(10))\nweather_df.info(verbose=True)","8ddfb702":"# process date\nweather_df['mo'] = weather_df['mo'].apply(int)\nweather_df['day'] = (weather_df['da'].apply(int)\n                                   + 31*(weather_df['mo']==2) \n                                   + 59*(weather_df['mo']==3)\n                                   + 90*(weather_df['mo']==4)  \n                                   + (90+30)*(weather_df['mo']==5)  \n                                   + (90+30+31)*(weather_df['mo']==6)  \n                                   )\n","3ae621da":"print(weather_df.shape)\ndf_weather = weather_df.sort_values(['STN', 'day'])\ndf_weather = df_weather[df_weather['mo']<=6]\ncols_new = []\nfor col in ['temp', 'min', 'max', 'stp', 'wdsp', 'prcp', 'fog']:\n    col_new = '{}_mean'.format(col)\n    cols_new.append(col_new)\n    df_weather[col_new] = df_weather[col].rolling(15, center=True).mean()\ndf_weather.head(20)","0a1105bf":"df_place = df_traintest8[df_traintest8['place_id'].duplicated()==False].reset_index(drop=True)\ndf_place['STN'] = ''\ndf_station = df_weather[df_weather['STN'].duplicated()==False].reset_index(drop=True)\nC = []\ncoord2 = df_station[['lat','lon']].values\nfor i in range(len(df_place)):\n    coord1 = df_place[['Lat','Long']].values[i]\n    dist = coord1[0][np.newaxis]*coord2[:, 0] + coord1[1][np.newaxis]*coord2[:, 1]\n    df_place['STN'][i] = df_station['STN'][np.argmin(dist)]\ndf_traintest9 = pd.merge(df_traintest8, df_place[['place_id', 'STN']], on='place_id', how='left')\ndf_traintest9 = pd.merge(df_traintest9, df_weather[['STN', 'day']+cols_new], on=['STN', 'day'], how='left')\n\ndf_traintest9.head()","6d4052f0":"df_traintest9[df_traintest9['place_id']=='China\/Hubei'].head()","82b2418c":"for col in df_traintest9.columns:\n    print(\"'{}',\".format(col))","a89482da":"def calc_score(y_true, y_pred):\n    y_true[y_true<0] = 0\n    score = metrics.mean_squared_error(np.log(y_true.clip(0, 1e10)+1), np.log(y_pred[:]+1))**0.5\n    return score","5cb790fd":"# train model to predict fatalities\/day\n# params\nSEED = 42\nparams = {'num_leaves': 8,\n          'min_data_in_leaf': 5,  # 42,\n          'objective': 'regression',\n          'max_depth': 8,\n          'learning_rate': 0.02,\n          'boosting': 'gbdt',\n          'bagging_freq': 5,  # 5\n          'bagging_fraction': 0.8,  # 0.5,\n          'feature_fraction': 0.8201,\n          'bagging_seed': SEED,\n          'reg_alpha': 1,  # 1.728910519108444,\n          'reg_lambda': 4.9847051755586085,\n          'random_state': SEED,\n          'metric': 'mse',\n          'verbosity': 100,\n          'min_gain_to_split': 0.02,  # 0.01077313523861969,\n          'min_child_weight': 5,  # 19.428902804238373,\n          'num_threads': 6,\n          }\n","11d5b81b":"# train model to predict fatalities\/day\n# features are selected manually based on valid score\ncol_target = 'fatal\/day'\ncol_var = [\n    'Lat', 'Long',\n#     'days_since_1cases', \n#     'days_since_10cases', \n#     'days_since_100cases',\n#     'days_since_1fatal', \n#     'days_since_10fatal', 'days_since_100fatal',\n#     'days_since_1recov',\n#     'days_since_10recov', 'days_since_100recov', \n    'cases\/day_(1-1)', \n    'cases\/day_(1-7)', \n#     'cases\/day_(8-14)',  \n#     'cases\/day_(15-21)', \n    \n#     'fatal\/day_(1-1)', \n    'fatal\/day_(1-7)', \n    'fatal\/day_(8-14)', \n    'fatal\/day_(15-21)', \n    'SmokingRate',\n#     'Gross_domestic_product__constant_prices',\n#     'Gross_domestic_product__current_prices',\n#     'Gross_domestic_product__deflator',\n#     'Gross_domestic_product_per_capita__constant_prices',\n#     'Gross_domestic_product_per_capita__current_prices',\n#     'Output_gap_in_percent_of_potential_GDP',\n#     'Gross_domestic_product_based_on_purchasing_power_parity__PPP__valuation_of_country_GDP',\n#     'Gross_domestic_product_based_on_purchasing_power_parity__PPP__per_capita_GDP',\n#     'Gross_domestic_product_based_on_purchasing_power_parity__PPP__share_of_world_total',\n#     'Implied_PPP_conversion_rate', 'Total_investment',\n#     'Gross_national_savings', 'Inflation__average_consumer_prices',\n#     'Inflation__end_of_period_consumer_prices',\n#     'Six_month_London_interbank_offered_rate__LIBOR_',\n#     'Volume_of_imports_of_goods_and_services', 'Volume_of_Imports_of_goods',\n#     'Volume_of_exports_of_goods_and_services', 'Volume_of_exports_of_goods',\n#     'Unemployment_rate', \n#     'Employment', 'Population',\n#     'General_government_revenue', 'General_government_total_expenditure',\n#     'General_government_net_lending_borrowing',\n#     'General_government_structural_balance',\n#     'General_government_primary_net_lending_borrowing',\n#     'General_government_net_debt', 'General_government_gross_debt',\n#     'Gross_domestic_product_corresponding_to_fiscal_year__current_prices',\n#     'Current_account_balance', \n#     'LifeExpectancy',\n#     'pop',\n    'density', \n#     'medianage', \n#     'urbanpop', \n#     'hospibed', 'smokers', \n    'temp_mean',\n    'min_mean',\n#     'max_mean',\n    'stp_mean',\n    'wdsp_mean',\n#     'prcp_mean',\n#     'fog_mean',\n]\ncol_cat = []\ndf_train = df_traintest9[(pd.isna(df_traintest9['ForecastId'])) & (df_traintest9['day']<=day_before_valid)]\ndf_valid = df_traintest9[(pd.isna(df_traintest9['ForecastId'])) & (day_before_valid<df_traintest9['day']) & (df_traintest9['day']<=day_before_public)]\nX_train = df_train[col_var]\nX_valid = df_valid[col_var]\ny_train = np.log(df_train[col_target].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nnum_round = 15000\nmodel = lgb.train(params, train_data, num_round, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)\n\nbest_itr = model.best_iteration","356a1946":"y_true = df_valid['fatal\/day'].values\ny_pred = np.exp(model.predict(X_valid))-1\nscore = calc_score(y_true, y_pred)\nprint(\"{:.6f}\".format(score))","f7b508c9":"\"\"\"\n0.411872 baseline\n0.409379 +all weather\n0.413820 + temp\n0.413059 + temp+min\n0.414248+ temp+min+max\n0.410319 + temp+min+stp\n0.404198 + temp+min+stp+wdsp\n0.404198 + temp+min+stp+wdsp+prcp\n0.404198+ temp+min+stp+wdsp+prcp+fog\n\"\"\"","1b397949":"# display feature importance\ntmp = pd.DataFrame()\ntmp[\"feature\"] = col_var\ntmp[\"importance\"] = model.feature_importance()\ntmp = tmp.sort_values('importance', ascending=False)\ntmp","2c98736c":"# train with all data before public\ndf_train = df_traintest9[(pd.isna(df_traintest9['ForecastId'])) & (df_traintest9['day']<=day_before_valid)]\ndf_valid = df_traintest9[(pd.isna(df_traintest9['ForecastId'])) & (day_before_valid<df_traintest9['day']) & (df_traintest9['day']<=day_before_public)]\nX_train = df_train[col_var]\nX_valid = df_valid[col_var]\ny_train = np.log(df_train[col_target].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nmodel_pub = lgb.train(params, train_data, best_itr, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)","86f16869":"# train model to predict fatalities\/day\ncol_target2 = 'cases\/day'\ncol_var2 = [\n    'Lat', 'Long',\n#     'days_since_1cases', \n    'days_since_10cases', #selected\n#     'days_since_100cases',\n#     'days_since_1fatal', \n#     'days_since_10fatal',\n#     'days_since_100fatal',\n#     'days_since_1recov',\n#     'days_since_10recov', 'days_since_100recov', \n    'cases\/day_(1-1)', \n    'cases\/day_(1-7)', \n    'cases\/day_(8-14)',  \n    'cases\/day_(15-21)', \n    \n#     'fatal\/day_(1-1)', \n#     'fatal\/day_(1-7)', \n#     'fatal\/day_(8-14)', \n#     'fatal\/day_(15-21)', \n#     'recov\/day_(1-1)', 'recov\/day_(1-7)', \n#     'recov\/day_(8-14)',  'recov\/day_(15-21)',\n#     'active_(1-1)', \n#     'active_(1-7)', \n#     'active_(8-14)',  'active_(15-21)', \n#     'SmokingRate',\n#     'Gross_domestic_product__constant_prices',\n#     'Gross_domestic_product__current_prices',\n#     'Gross_domestic_product__deflator',\n#     'Gross_domestic_product_per_capita__constant_prices',\n#     'Gross_domestic_product_per_capita__current_prices',\n#     'Output_gap_in_percent_of_potential_GDP',\n#     'Gross_domestic_product_based_on_purchasing_power_parity__PPP__valuation_of_country_GDP',\n#     'Gross_domestic_product_based_on_purchasing_power_parity__PPP__per_capita_GDP',\n#     'Gross_domestic_product_based_on_purchasing_power_parity__PPP__share_of_world_total',\n#     'Implied_PPP_conversion_rate', 'Total_investment',\n#     'Gross_national_savings', 'Inflation__average_consumer_prices',\n#     'Inflation__end_of_period_consumer_prices',\n#     'Six_month_London_interbank_offered_rate__LIBOR_',\n#     'Volume_of_imports_of_goods_and_services', 'Volume_of_Imports_of_goods',\n#     'Volume_of_exports_of_goods_and_services', 'Volume_of_exports_of_goods',\n#     'Unemployment_rate', \n#     'Employment', \n#     'Population',\n#     'General_government_revenue', 'General_government_total_expenditure',\n#     'General_government_net_lending_borrowing',\n#     'General_government_structural_balance',\n#     'General_government_primary_net_lending_borrowing',\n#     'General_government_net_debt', 'General_government_gross_debt',\n#     'Gross_domestic_product_corresponding_to_fiscal_year__current_prices',\n#     'Current_account_balance', \n#     'LifeExpectancy',\n#     'pop',\n#     'density', \n#     'medianage', \n#     'urbanpop', \n#     'hospibed', 'smokers', \n        'temp_mean',\n    'min_mean',\n    'max_mean',\n    'stp_mean',\n    'wdsp_mean',\n#     'prcp_mean',\n#     'fog_mean',\n]\ncol_cat = []\ndf_train = df_traintest9[(pd.isna(df_traintest9['ForecastId'])) & (df_traintest9['day']<=day_before_valid)]\ndf_valid = df_traintest9[(pd.isna(df_traintest9['ForecastId'])) & (day_before_valid<df_traintest9['day']) & (df_traintest9['day']<=day_before_public)]\nX_train = df_train[col_var2]\nX_valid = df_valid[col_var2]\ny_train = np.log(df_train[col_target2].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target2].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nmodel2 = lgb.train(params, train_data, num_round, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)\nbest_itr2 = model2.best_iteration","0593ab78":"y_true = df_valid['cases\/day'].values\ny_pred = np.exp(model2.predict(X_valid))-1\nscore = calc_score(y_true, y_pred)\nprint(\"{:.6f}\".format(score))\n","c63dce2a":"\"\"\"\n0.872413 baseline\n0.871128 + tmp+min+stp+wdsp\n0.866764 + tmp+min+stp+wdsp+max\n\"\"\"","6f9a0ace":"# display feature importance\ntmp = pd.DataFrame()\ntmp[\"feature\"] = col_var2\ntmp[\"importance\"] = model2.feature_importance()\ntmp = tmp.sort_values('importance', ascending=False)\ntmp","6dab69c2":"df_train = df_traintest9[(pd.isna(df_traintest9['ForecastId'])) & (df_traintest9['day']<=day_before_valid)]\ndf_valid = df_traintest9[(pd.isna(df_traintest9['ForecastId'])) & (day_before_valid<df_traintest9['day']) & (df_traintest9['day']<=day_before_public)]\nX_train = df_train[col_var2]\nX_valid = df_valid[col_var2]\ny_train = np.log(df_train[col_target2].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target2].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nmodel2_pub = lgb.train(params, train_data, best_itr2, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)","f96dd8f1":"# train model to predict fatalities\/day\ndf_train = df_traintest9[(pd.isna(df_traintest9['ForecastId'])) & (df_traintest9['day']<=day_before_public)]\ndf_valid = df_traintest9[(pd.isna(df_traintest9['ForecastId'])) & (day_before_public<df_traintest9['day'])]\nX_train = df_train[col_var]\nX_valid = df_valid[col_var]\ny_train = np.log(df_train[col_target].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nnum_round = 15000\nmodel = lgb.train(params, train_data, num_round, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)\n\nbest_itr = model.best_iteration","06f8fa7e":"# train with all data\ndf_train = df_traintest9[(pd.isna(df_traintest9['ForecastId']))]\ndf_valid = df_traintest9[(pd.isna(df_traintest9['ForecastId']))]\nX_train = df_train[col_var]\nX_valid = df_valid[col_var]\ny_train = np.log(df_train[col_target].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nmodel_pri = lgb.train(params, train_data, best_itr, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)","a6d3fffc":"# train model to predict cases\/day\ndf_train = df_traintest9[(pd.isna(df_traintest9['ForecastId'])) & (df_traintest9['day']<=day_before_public)]\ndf_valid = df_traintest9[(pd.isna(df_traintest9['ForecastId'])) & (day_before_public<df_traintest9['day'])]\nX_train = df_train[col_var2]\nX_valid = df_valid[col_var2]\ny_train = np.log(df_train[col_target2].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target2].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nmodel2 = lgb.train(params, train_data, num_round, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)\nbest_itr2 = model2.best_iteration","70f2201c":"# train with all data\ndf_train = df_traintest9[(pd.isna(df_traintest9['ForecastId']))]\ndf_valid = df_traintest9[(pd.isna(df_traintest9['ForecastId']))]\nX_train = df_train[col_var2]\nX_valid = df_valid[col_var2]\ny_train = np.log(df_train[col_target2].values.clip(0, 1e10)+1)\ny_valid = np.log(df_valid[col_target2].values.clip(0, 1e10)+1)\ntrain_data = lgb.Dataset(X_train, label=y_train, categorical_feature=col_cat)\nvalid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=col_cat)\nmodel2_pri = lgb.train(params, train_data, best_itr2, valid_sets=[train_data, valid_data],\n                  verbose_eval=100,\n                  early_stopping_rounds=150,)","9b13856c":"# remove overlap for public LB prediction\ndf_tmp = df_traintest9[\n    ((df_traintest9['day']<=day_before_public)  & (pd.isna(df_traintest9['ForecastId'])))\n    | ((day_before_public<df_traintest9['day']) & (pd.isna(df_traintest9['ForecastId'])==False))].reset_index(drop=True)\ndf_tmp = df_tmp.drop([\n    'cases\/day_(1-1)', 'cases\/day_(1-7)', 'cases\/day_(8-14)', 'cases\/day_(15-21)', \n    'fatal\/day_(1-1)', 'fatal\/day_(1-7)', 'fatal\/day_(8-14)', 'fatal\/day_(15-21)',\n    'days_since_1cases', 'days_since_10cases', 'days_since_100cases',\n    'days_since_1fatal', 'days_since_10fatal', 'days_since_100fatal',\n                               ],  axis=1)\ndf_traintest10 = []\nfor i, place in enumerate(places[:]):\n    df_tmp2 = df_tmp[df_tmp['place_id']==place].reset_index(drop=True)\n    df_tmp2 = do_aggregations(df_tmp2)\n    df_traintest10.append(df_tmp2)\ndf_traintest10 = pd.concat(df_traintest10).reset_index(drop=True)\ndf_traintest10[df_traintest10['day']>day_before_public-2].head()","ccc6e4c5":"# remove overlap for private LB prediction\ndf_tmp = df_traintest9[\n    ((df_traintest9['day']<=day_before_private)  & (pd.isna(df_traintest9['ForecastId'])))\n    | ((day_before_private<df_traintest9['day']) & (pd.isna(df_traintest9['ForecastId'])==False))].reset_index(drop=True)\ndf_tmp = df_tmp.drop([\n    'cases\/day_(1-1)', 'cases\/day_(1-7)', 'cases\/day_(8-14)', 'cases\/day_(15-21)', \n    'fatal\/day_(1-1)', 'fatal\/day_(1-7)', 'fatal\/day_(8-14)', 'fatal\/day_(15-21)',\n    'days_since_1cases', 'days_since_10cases', 'days_since_100cases',\n    'days_since_1fatal', 'days_since_10fatal', 'days_since_100fatal',\n                               ],  axis=1)\ndf_traintest11 = []\nfor i, place in enumerate(places[:]):\n    df_tmp2 = df_tmp[df_tmp['place_id']==place].reset_index(drop=True)\n    df_tmp2 = do_aggregations(df_tmp2)\n    df_traintest11.append(df_tmp2)\ndf_traintest11 = pd.concat(df_traintest11).reset_index(drop=True)\ndf_traintest11[df_traintest11['day']>day_before_private-2].head()","d5ccf490":"# predict test data in public\n# predict the cases and fatatilites one day at a time and use the predicts as next day's feature recursively.\ndf_preds = []\nfor i, place in enumerate(places[:]):\n    df_interest = copy.deepcopy(df_traintest10[df_traintest10['place_id']==place].reset_index(drop=True))\n    df_interest['cases\/day'][(pd.isna(df_interest['ForecastId']))==False] = -1\n    df_interest['fatal\/day'][(pd.isna(df_interest['ForecastId']))==False] = -1\n    len_known = (df_interest['day']<=day_before_public).sum()\n    len_unknown = (day_before_public<df_interest['day']).sum()\n    for j in range(len_unknown): # use predicted cases and fatal for next days' prediction\n        X_valid = df_interest[col_var].iloc[j+len_known]\n        X_valid2 = df_interest[col_var2].iloc[j+len_known]\n        pred_f = model_pub.predict(X_valid)\n        pred_c = model2_pub.predict(X_valid2)\n        pred_c = (np.exp(pred_c)-1).clip(0, 1e10)\n        pred_f = (np.exp(pred_f)-1).clip(0, 1e10)\n        df_interest['fatal\/day'][j+len_known] = pred_f\n        df_interest['cases\/day'][j+len_known] = pred_c\n        df_interest['Fatalities'][j+len_known] = df_interest['Fatalities'][j+len_known-1] + pred_f\n        df_interest['ConfirmedCases'][j+len_known] = df_interest['ConfirmedCases'][j+len_known-1] + pred_c\n#         print(df_interest['ConfirmedCases'][j+len_known-1], df_interest['ConfirmedCases'][j+len_known], pred_c)\n        df_interest = df_interest.drop([\n            'cases\/day_(1-1)', 'cases\/day_(1-7)', 'cases\/day_(8-14)', 'cases\/day_(15-21)', \n            'fatal\/day_(1-1)', 'fatal\/day_(1-7)', 'fatal\/day_(8-14)', 'fatal\/day_(15-21)',\n            'days_since_1cases', 'days_since_10cases', 'days_since_100cases',\n            'days_since_1fatal', 'days_since_10fatal', 'days_since_100fatal',\n\n                                       ],  axis=1)\n        df_interest = do_aggregations(df_interest)\n    if (i+1)%10==0:\n        print(\"{:3d}\/{}  {}, len known: {}, len unknown: {}\".format(i+1, len(places), place, len_known, len_unknown), df_interest.shape)\n    df_interest['fatal_pred'] = np.cumsum(df_interest['fatal\/day'].values)\n    df_interest['cases_pred'] = np.cumsum(df_interest['cases\/day'].values)\n    df_preds.append(df_interest)\ndf_preds = pd.concat(df_preds)","2755c6ca":"# predict test data in public\ndf_preds_pri = []\nfor i, place in enumerate(places[:]):\n    df_interest = copy.deepcopy(df_traintest11[df_traintest11['place_id']==place].reset_index(drop=True))\n    df_interest['cases\/day'][(pd.isna(df_interest['ForecastId']))==False] = -1\n    df_interest['fatal\/day'][(pd.isna(df_interest['ForecastId']))==False] = -1\n    len_known = (df_interest['day']<=day_before_private).sum()\n    len_unknown = (day_before_private<df_interest['day']).sum()\n    for j in range(len_unknown): # use predicted cases and fatal for next days' prediction\n        X_valid = df_interest[col_var].iloc[j+len_known]\n        X_valid2 = df_interest[col_var2].iloc[j+len_known]\n        pred_f = model_pri.predict(X_valid)\n        pred_c = model2_pri.predict(X_valid2)\n        pred_c = (np.exp(pred_c)-1).clip(0, 1e10)\n        pred_f = (np.exp(pred_f)-1).clip(0, 1e10)\n        df_interest['fatal\/day'][j+len_known] = pred_f\n        df_interest['cases\/day'][j+len_known] = pred_c\n        df_interest['Fatalities'][j+len_known] = df_interest['Fatalities'][j+len_known-1] + pred_f\n        df_interest['ConfirmedCases'][j+len_known] = df_interest['ConfirmedCases'][j+len_known-1] + pred_c\n#         print(df_interest['ConfirmedCases'][j+len_known-1], df_interest['ConfirmedCases'][j+len_known], pred_c)\n        df_interest = df_interest.drop([\n            'cases\/day_(1-1)', 'cases\/day_(1-7)', 'cases\/day_(8-14)', 'cases\/day_(15-21)', \n            'fatal\/day_(1-1)', 'fatal\/day_(1-7)', 'fatal\/day_(8-14)', 'fatal\/day_(15-21)',\n            'days_since_1cases', 'days_since_10cases', 'days_since_100cases',\n            'days_since_1fatal', 'days_since_10fatal', 'days_since_100fatal',\n\n                                       ],  axis=1)\n        df_interest = do_aggregations(df_interest)\n    if (i+1)%10==0:\n        print(\"{:3d}\/{}  {}, len known: {}, len unknown: {}\".format(i+1, len(places), place, len_known, len_unknown), df_interest.shape)\n    df_interest['fatal_pred'] = np.cumsum(df_interest['fatal\/day'].values)\n    df_interest['cases_pred'] = np.cumsum(df_interest['cases\/day'].values)\n    df_preds_pri.append(df_interest)\ndf_preds_pri = pd.concat(df_preds_pri)","7c8c9af6":"places_sort = df_traintest10[['place_id', 'ConfirmedCases']][df_traintest10['day']==day_before_private]\nplaces_sort = places_sort.sort_values('ConfirmedCases', ascending=False).reset_index(drop=True)['place_id'].values\nprint(len(places_sort))\nplaces_sort[:5]","60304b5f":"print(\"Fatalities \/ Public\")\nplt.figure(figsize=(30,30))\nfor i in range(30):\n    plt.subplot(5,6,i+1)\n    idx = i * 10\n    df_interest = df_preds[df_preds['place_id']==places_sort[idx]].reset_index(drop=True)\n    tmp = df_interest['fatal\/day'].values\n    tmp = np.cumsum(tmp)\n    sns.lineplot(x=df_interest['day'], y=tmp, label='pred')\n    df_interest2 = df_traintest10[(df_traintest10['place_id']==places_sort[idx]) & (df_traintest10['day']<=day_before_private)].reset_index(drop=True)\n    sns.lineplot(x=df_interest2['day'].values, y=df_interest2['Fatalities'].values, label='true')\n    plt.title(places_sort[idx])\nplt.show()","d1388767":"print(\"Confirmed Cases \/ Public\")\nplt.figure(figsize=(30,30))\nfor i in range(30):\n    plt.subplot(5,6,i+1)\n    idx = i * 10\n    df_interest = df_preds[df_preds['place_id']==places_sort[idx]].reset_index(drop=True)\n    tmp = df_interest['cases\/day'].values\n    tmp = np.cumsum(tmp)\n    sns.lineplot(x=df_interest['day'], y=tmp, label='pred')\n    df_interest2 = df_traintest10[(df_traintest10['place_id']==places_sort[idx]) & (df_traintest10['day']<=day_before_private)].reset_index(drop=True)\n    sns.lineplot(x=df_interest2['day'].values, y=df_interest2['ConfirmedCases'].values, label='true')\n    plt.title(places_sort[idx])\nplt.show()","4c95b87b":"print(\"Fatalities \/ Private\")\nplt.figure(figsize=(30,30))\nfor i in range(30):\n    plt.subplot(5,6,i+1)\n    idx = i * 10\n    df_interest = df_preds_pri[df_preds_pri['place_id']==places_sort[idx]].reset_index(drop=True)\n    tmp = df_interest['fatal\/day'].values\n    tmp = np.cumsum(tmp)\n    sns.lineplot(x=df_interest['day'], y=tmp, label='pred')\n    df_interest2 = df_traintest10[(df_traintest10['place_id']==places_sort[idx]) & (df_traintest10['day']<=day_before_private)].reset_index(drop=True)\n    sns.lineplot(x=df_interest2['day'].values, y=df_interest2['Fatalities'].values, label='true')\n    plt.title(places_sort[idx])\nplt.show()","674d78cb":"print(\"ConfirmedCases \/ Private\")\nplt.figure(figsize=(30,30))\nfor i in range(30):\n    plt.subplot(5,6,i+1)\n    idx = i * 10\n    df_interest = df_preds_pri[df_preds_pri['place_id']==places_sort[idx]].reset_index(drop=True)\n    tmp = df_interest['cases\/day'].values\n    tmp = np.cumsum(tmp)\n    sns.lineplot(x=df_interest['day'], y=tmp, label='pred')\n    df_interest2 = df_traintest10[(df_traintest10['place_id']==places_sort[idx]) & (df_traintest10['day']<=day_before_private)].reset_index(drop=True)\n    sns.lineplot(x=df_interest2['day'].values, y=df_interest2['ConfirmedCases'].values, label='true')\n    plt.title(places_sort[idx])\nplt.show()","bc7c0d74":"# merge 2 preds\ndf_preds[df_preds['day']>day_before_private] = df_preds_pri[df_preds['day']>day_before_private]","9a57a7b5":"df_preds.to_csv(\"df_preds.csv\", index=None)","73487114":"# load sample submission\ndf_sub = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/submission.csv\")\nprint(len(df_sub))\ndf_sub.head()","f17d8656":"# merge prediction with sub\ndf_sub = pd.merge(df_sub, df_traintest3[['ForecastId', 'place_id', 'day']])\ndf_sub = pd.merge(df_sub, df_preds[['place_id', 'day', 'cases_pred', 'fatal_pred']], on=['place_id', 'day',], how='left')\ndf_sub.head(10)","e2d1ac65":"# save\ndf_sub['ConfirmedCases'] = df_sub['cases_pred']\ndf_sub['Fatalities'] = df_sub['fatal_pred']\ndf_sub = df_sub[['ForecastId', 'ConfirmedCases', 'Fatalities']]\ndf_sub.to_csv(\"submission.csv\", index=None)\ndf_sub.head(10)","93db27a0":"# Model training\nhere I train an LGBM model. The target is cases or fatalities per day because LGBM is failed to learn accumulated cases\/fatalities.\n### train a model for public LB","50333210":"### Preprocessing","090cb714":"\n### train a model for private LB","c3cf464e":"# Make submission","4dc9bce3":"# Prediction","33e7d404":"- [week-1 version (2nd place as of 2020-4-4 update)](https:\/\/www.kaggle.com\/osciiart\/covid19-lightgbm?scriptVersionId=30830623)\n- [week-2 version](https:\/\/www.kaggle.com\/osciiart\/covid-19-lightgbm-no-leak?scriptVersionId=31248128)","83681b8d":"# Visualize prediction","6af424bd":"# Data loading"}}