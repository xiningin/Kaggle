{"cell_type":{"580fcfee":"code","69abec41":"code","52e7a419":"code","bf7279f8":"code","edfbf4ac":"code","06450b8a":"code","dc8f8127":"code","72f29b14":"code","dcb08ea0":"code","f8e911f3":"code","a9a44ae8":"code","e5754ddb":"code","8c615d89":"code","81e7a144":"code","81e484f4":"code","5e16a32b":"code","6b21fcf8":"code","cb18423a":"code","70347e57":"code","0514a683":"code","0aee5597":"code","03ad5d47":"code","9d2e04df":"code","914f727e":"code","dd099fa6":"code","b746b9db":"code","c0e5a54c":"code","5700304e":"code","74103459":"markdown","6d86b9c8":"markdown","88245060":"markdown","16e84b9e":"markdown","bcdddd9f":"markdown","b5b155c8":"markdown","ef28e259":"markdown","e0e6576b":"markdown","c279cbdd":"markdown","7a9488bb":"markdown","454688ae":"markdown","ea0b9bb3":"markdown"},"source":{"580fcfee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport folium \nfrom folium import plugins\nfrom folium import FeatureGroup, LayerControl, Map, Marker\n# from folium.plugins import HeatMap\n\nimport json \nfrom datetime import datetime\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport datetime\n\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nfrom pyproj import Proj, transform","69abec41":"TimeGender = pd.read_csv('..\/input\/coronavirusdataset\/TimeGender.csv')\nCase = pd.read_csv('..\/input\/coronavirusdataset\/Case.csv')\nRegion = pd.read_csv('..\/input\/coronavirusdataset\/Region.csv')\nTimeProvince = pd.read_csv('..\/input\/coronavirusdataset\/TimeProvince.csv')\nSearchTrend = pd.read_csv('..\/input\/coronavirusdataset\/SearchTrend.csv')\nPatientRoute = pd.read_csv('..\/input\/coronavirusdataset\/PatientRoute.csv')\nSeoulFloating = pd.read_csv('..\/input\/coronavirusdataset\/SeoulFloating.csv')\nTime = pd.read_csv('..\/input\/coronavirusdataset\/Time.csv')\nPatientInfo = pd.read_csv('..\/input\/coronavirusdataset\/PatientInfo.csv')\nWeather = pd.read_csv('..\/input\/coronavirusdataset\/Weather.csv')\nTimeAge = pd.read_csv('..\/input\/coronavirusdataset\/TimeAge.csv')\nPolicy = pd.read_csv('..\/input\/coronavirusdataset\/Policy.csv')","52e7a419":"PatientInfo[pd.notna(PatientInfo['contact_number'])]\nPatientRoute.merge(PatientInfo, on=['patient_id']).groupby(['patient_id']).count()\nPatientInfo.groupby(['infected_by']).count().sort_values('patient_id', ascending=False).head(20).style.format(\"{:.0f}\")\n\n\n# PatientInfo['age'] = 2020 - PatientInfo['birth_year'].astype(int) + 1\nPatientInfo['age'] = PatientInfo['age'].str.slice(0, -1).astype(float)\nPatientInfo['age_group'] = PatientInfo['age'] \/\/ 10\nPatientInfo['age_group'] = [str(a).replace('.','') for a in PatientInfo['age_group']]\nPatientInfo['age_gender'] = PatientInfo['age_group'] + '_' + PatientInfo['sex']\n\nPatientInfo[PatientInfo['contact_number'] == '-'] = np.nan\nPatientInfo['contact_number'] = PatientInfo['contact_number'].astype(float)\n\nfig = plt.gcf()\nfig.set_size_inches(15, 5)\n\nclasses = np.sort(pd.unique(PatientInfo['age_gender'].dropna().values.ravel()))\nboxplot = sns.boxplot(x=\"age_gender\", y=\"contact_number\", data=PatientInfo[PatientInfo['contact_number'] < 200], order = classes)\nboxplot.set_xticklabels(boxplot.get_xticklabels(), rotation=45)\nplt.title(\"Age vs Contact_number\")\nplt.show()\n\nprint(np.sort(pd.unique(PatientInfo['age_group'].dropna().values.ravel())))","bf7279f8":"PatientRoute['date'] = pd.to_datetime(PatientRoute['date'])","edfbf4ac":"def return_total_distance(patient_id, symptom_date=datetime.datetime.strptime('2000-01-01', '%Y-%m-%d')):\n    total_distance = 0\n    x = 0\n    y = 0\n    first = True\n    for index,row in PatientRoute[PatientRoute['patient_id'] == patient_id].iterrows():\n        prev_x = x\n        prev_y = y\n        x = row['longitude']\n        y = row['latitude']            \n        if (not first):\n            total_distance += (((x - prev_x) * 88.74) ** 2 + ((y - prev_y) * 110) ** 2) ** 0.5\n        first = False\n\n            \n    return total_distance\n        \nPatientInfo['total_distance'] = PatientInfo['patient_id'].map(return_total_distance)","06450b8a":"def return_visit_count(patient_id, symptom=False):\n    if symptom:\n        symptom_date = datetime.datetime.strptime(PatientInfo[PatientInfo['patient_id'] == patient_id]['symptom_onset_date'].values[0], '%Y-%m-%d')\n    else:\n        symptom_date =datetime.datetime.strptime('2000-01-01', '%Y-%m-%d')\n    if (PatientRoute['patient_id'] == patient_id).any():\n        return PatientRoute[(PatientRoute['patient_id'] == patient_id) & (PatientRoute['date'] >= symptom_date)].groupby(['latitude', 'longitude']).ngroups\n    else:\n        return np.nan\n    \nPatientInfo['visit_count'] = PatientInfo['patient_id'].map(return_visit_count)\nPatientInfo","dc8f8127":"fig = plt.gcf()\n\nfig.set_size_inches(15, 5);\nprint(PatientInfo.loc[3127, 'visit_count'])\n# classes = np.sort(pd.unique(PatientInfo['age_group'].dropna().values.ravel()))\n\ndf2 = PatientInfo[pd.notna(PatientInfo['visit_count'])].groupby('age_gender').mean();\ndf2.reset_index(inplace=True);\nbarplot = sns.barplot(x='age_gender', y='visit_count', data=df2);\nbarplot.set_xticklabels(barplot.get_xticklabels(), rotation=45)\nplt.title('Age VS Number of visited sites')\nplt.show()","72f29b14":"def return_distance_symptom(patient_id, symptom=True):\n    if symptom:\n        try:\n            symptom_date = datetime.datetime.strptime(PatientInfo[PatientInfo['patient_id'] == patient_id]['symptom_onset_date'].values[0], '%Y-%m-%d')\n        except:\n            return np.NaN\n    else:\n        symptom_date =datetime.datetime.strptime('2000-01-01', '%Y-%m-%d') \n\n    max_x = PatientRoute[\n        (PatientRoute['patient_id'] == patient_id) & (PatientRoute['date'] > symptom_date)\n    ]['longitude'].max()\n    max_y = PatientRoute[\n        (PatientRoute['patient_id'] == patient_id) & (PatientRoute['date'] > symptom_date)\n    ]['latitude'].max()\n    min_x = PatientRoute[\n        (PatientRoute['patient_id'] == patient_id) & (PatientRoute['date'] > symptom_date)\n    ]['longitude'].min()\n    min_y = PatientRoute[\n        (PatientRoute['patient_id'] == patient_id) & (PatientRoute['date'] > symptom_date)\n    ]['latitude'].min()\n    return (((max_x - min_x) * 88.74) ** 2 + ((max_y - min_y) * 110) ** 2) ** 0.5","dcb08ea0":"def return_visit_count_symptom(patient_id, symptom=True):\n    if symptom:\n        try:\n            symptom_date = datetime.datetime.strptime(PatientInfo[PatientInfo['patient_id'] == patient_id]['symptom_onset_date'].values[0], '%Y-%m-%d')\n        except:\n            return np.nan\n    else:\n        symptom_date =datetime.datetime.strptime('2000-01-01', '%Y-%m-%d')\n    # print(PatientRoute['date'] >= symptom_date)\n    if (PatientRoute['patient_id'] == patient_id).any():\n        return PatientRoute[(PatientRoute['patient_id'] == patient_id) & (PatientRoute['date'] >= symptom_date)].groupby(['latitude', 'longitude']).ngroups\n    else:\n        return np.nan","f8e911f3":"# PatientInfo_symptom = PatientInfo[pd.notna(PatientInfo['symptom_onset_date'])].copy(deep=True)\nPatientInfo['distance_after_symptom'] = PatientInfo['patient_id'].map(return_distance_symptom)","a9a44ae8":"PatientInfo['visit_count_after_symptom'] = PatientInfo['patient_id'].map(return_visit_count_symptom)","e5754ddb":"fig = plt.gcf()\n\nfig.set_size_inches(20, 8);\n\n# classes = np.sort(pd.unique(PatientInfo_symptom['age_gender'].dropna().values.ravel()));\n\ndf2 = PatientInfo[PatientInfo['distance_after_symptom'] > 0].groupby('age_group').mean();\ndf2.reset_index(inplace=True);\nbarplot = sns.barplot(x='age_group', y='distance_after_symptom', data=df2)\nbarplot.set_xticklabels(barplot.get_xticklabels(), rotation=45)\nplt.title('Who move well after symptoms?')\nplt.show()","8c615d89":"fig = plt.gcf()\n\nfig.set_size_inches(15, 5);\n\n# classes = np.sort(pd.unique(PatientInfo_symptom['age_gender'].dropna().values.ravel()));\n\ndf2 = PatientInfo[pd.notna(PatientInfo['visit_count_after_symptom'])].groupby('age_gender').count();\ndf2.reset_index(inplace=True);\nbarplot = sns.barplot(x='age_gender', y='visit_count', data=df2)\nbarplot.set_xticklabels(barplot.get_xticklabels(), rotation=45)\nplt.title('Age VS Number of visited sites (After showing symptom)')\nplt.show()","81e7a144":"fig = plt.gcf()\n\nfig.set_size_inches(15, 5);\n\n# classes = np.sort(pd.unique(PatientInfo_symptom['age_gender'].dropna().values.ravel()));\n\ndf2 = PatientInfo[pd.notna(PatientInfo['visit_count'])].groupby('infection_case').mean();\ndf2.reset_index(inplace=True);\nbarplot = sns.countplot(x='type', data=PatientRoute) # [~PatientRoute['type'].isin(['etc', 'hospital'])]\nbarplot.set_xticklabels(barplot.get_xticklabels(), rotation=45)\nplt.title('Where is dangerous?')\nplt.show()","81e484f4":"# Return each patient's range of movement in killometers.\ndef return_distance(patient_id, symptom_date=datetime.datetime.strptime('2000-01-01', '%Y-%m-%d')):\n \n    max_x = PatientRoute[\n        (PatientRoute['patient_id'] == patient_id) & (PatientRoute['date'] >= symptom_date)\n    ]['longitude'].max()\n    max_y = PatientRoute[\n        (PatientRoute['patient_id'] == patient_id) & (PatientRoute['date'] >= symptom_date)\n    ]['latitude'].max()\n    min_x = PatientRoute[\n        (PatientRoute['patient_id'] == patient_id) & (PatientRoute['date'] >= symptom_date)\n    ]['longitude'].min()\n    min_y = PatientRoute[\n        (PatientRoute['patient_id'] == patient_id) & (PatientRoute['date'] >= symptom_date)\n    ]['latitude'].min()\n    return (((max_x - min_x) * 88.74) ** 2 + ((max_y - min_y) * 110) ** 2) ** 0.5\n\nPatientInfo['distance'] = PatientInfo['patient_id'].map(return_distance)","5e16a32b":"# Distribution of the traveling range of each patient\nplt.figure(figsize=(16, 6))\nsns.set()\nax = sns.distplot(PatientInfo[(PatientInfo['distance'] > 0) & (PatientInfo['distance'] < 500)]['distance'],kde=False, bins=100)","6b21fcf8":"sns.set()\nplt.figure(figsize=(16, 6))\n\n# To see the distribution easily, I dropped outliers which the traveling distance was over than 400 km.\nfig = px.box(PatientInfo[PatientInfo['distance']<400], x=\"age_group\", y=\"distance\", points=\"all\")\nfig.update_xaxes(dtick=10)\nfig.show()","cb18423a":"# Calculate distance between naighbor rows in patients' route data.\nprev_id = \"\"\nPatientRoute['diff_distance'] = 0\nfor i, row in PatientRoute.iterrows():\n    if prev_id == row['patient_id']:\n        prev_x = PatientRoute.loc[i-1]['longitude']\n        prev_y = PatientRoute.loc[i-1]['latitude']\n        x = PatientRoute.loc[i]['longitude']\n        y = PatientRoute.loc[i]['latitude']\n        diff = (((x - prev_x) * 88.74) ** 2 + ((y - prev_y) * 110) ** 2) ** 0.5\n        \n        PatientRoute.loc[i, 'diff_distance'] = diff\n    else:\n        PatientRoute.loc[i, 'diff_distance'] = np.nan\n    prev_id = row['patient_id']","70347e57":"Policy['start_week'] = pd.to_datetime(Policy['start_date']).dt.weekofyear\n\ndef mark_policy(fig):\n    fig.update_layout(\n\n        annotations=[\n            dict(\n                x=Policy[Policy['type'] == 'Alert'].iloc[1]['start_week'],\n                y=1,\n                xref=\"x\",\n                yref=\"y\",\n                text=f\"Alert {Policy[Policy['type'] == 'Alert'].iloc[1]['detail']}\",\n                showarrow=True,\n                arrowhead=7,\n                ax=0,\n                ay=-40,\n                bgcolor='white'\n            ),\n            dict(\n                x=Policy[Policy['type'] == 'Alert'].iloc[2]['start_week'],\n                y=1,\n                xref=\"x\",\n                yref=\"y\",\n                text=f\"Alert {Policy[Policy['type'] == 'Alert'].iloc[2]['detail']}\",\n                showarrow=True,\n                arrowhead=7,\n                ax=0,\n                ay=-60,\n                bgcolor='white'\n            ),\n            dict(\n                x=Policy[Policy['type'] == 'Alert'].iloc[3]['start_week'],\n                y=1,\n                xref=\"x\",\n                yref=\"y\",\n                text=f\"Alert {Policy[Policy['type'] == 'Alert'].iloc[3]['detail']}\",\n                showarrow=True,\n                arrowhead=7,\n                ax=0,\n                ay=-40,\n                bgcolor='white'\n            ),\n            dict(\n                x=Policy[Policy['type'] == 'Social'].iloc[0]['start_week'],\n                y=1,\n                xref=\"x\",\n                yref=\"y\",\n                text=f\"{Policy[Policy['type'] == 'Social'].iloc[0]['gov_policy']}\",\n                showarrow=True,\n                arrowhead=7,\n                ax=0,\n                ay=-40,\n                bgcolor='white'\n            )\n        ]\n    )    ","0514a683":"PatientRoute['week'] = PatientRoute['date'].dt.weekofyear","0aee5597":"colors = px.colors.sequential.Plotly3\n\n# Sum distances for each patient and each week.\n# Average the traveling distance on each week and each age group.\n\ndf = PatientRoute[PatientRoute['diff_distance'].notna()]\nnew_df = df.merge(PatientInfo, on='patient_id')[\n    ['week','age_group','patient_id','diff_distance']\n].dropna().groupby(['week','age_group','patient_id']).sum().reset_index().groupby([\n    'week','age_group'\n]).mean().reset_index()\nfig = px.line(new_df, x='week', y='diff_distance', color='age_group')\n# fig.Layout(legend={'traceorder': 'normal'})\n\nfig = go.Figure()\nfor i, age in enumerate(sorted(new_df['age_group'][new_df['age_group'].notna()].unique().tolist())):\n    if age in ['00','10','90','nan']:\n        continue\n    cur_df = new_df[new_df['age_group'] == age]\n    fig.add_trace(go.Scatter(x=cur_df['week'], y=cur_df['diff_distance'],\n                        hoverinfo='all', hoverlabel=dict(bgcolor='white'),\n                        mode='lines',\n                        line=dict(width=2, color=colors[i]),\n                        name=age))\nmark_policy(fig)\n    \nfig.update_layout(title='Who moves a lot?',\n        showlegend=True,\n        xaxis=dict(\n            range=[4, 16],\n            ticksuffix=' week'),\n        yaxis=dict(\n            ticksuffix=' km'),\n        )\nfig.show()","03ad5d47":"cdf = new_df[~new_df['age_group'].isin(['00','10','90','nan'])].pivot('age_group','week','diff_distance')\n\ndata = [\n    go.Contour(x=[4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n               y=['20','30','40','50','60','70','80'],\n        z=cdf.values,\n        colorscale='Jet',\n    )\n]\n\nlayout = go.Layout(\n    title = \"Who moves a lot?\",\n    yaxis = dict(range=[10,80], ticksuffix='s'),\n    xaxis = dict(ticksuffix=' week'),\n    xaxis_title=\"weeks\",\n    yaxis_title=\"age group\",\n)\n\nfig = go.Figure(data=data, layout=layout)\nfig.show()","9d2e04df":"PatientRoute['type'].unique()","914f727e":"\ndef large_type(x):\n    if x in ['academy', 'school', 'university']:\n        return 'education'\n    elif x in ['airport', 'public_transportation', 'gas_station']:\n        return 'transportation'\n    elif x in ['hospital', 'pharmacy']:\n        return 'medicine'\n    elif x in ['store', 'restaurant', 'beauty_salon', 'bank', 'bakery', 'real_estate_agency', 'posr_office', 'lodging']:\n        return 'life'\n    elif x in ['pc_cafe', 'bar', 'gym', 'cafe']:\n        return 'entertainment'\n    elif x in ['church']:\n        return 'church'\n    else:\n        return 'etc'\n\nPatientRoute['large_type'] = PatientRoute['type'].map(large_type)\n\ntype_by_time = PatientRoute.groupby(['week', 'large_type']).size().unstack().fillna(0)\n# type_by_time = type_by_time.div(type_by_time.sum(axis=1), axis=0) * 100\ntype_by_time\ntype_by_time_age = []\ndf = PatientRoute.merge(PatientInfo, on='patient_id')\nfor age in ['20','30','40','50','60','70','80']:\n    \n    new_type_by_time = df[df['age_group'] == age].groupby(['week', 'large_type']).size().unstack().fillna(0)\n    if 'education' not in new_type_by_time.columns:\n        new_type_by_time['education'] = 0\n    if 'entertainment' not in new_type_by_time.columns:\n        new_type_by_time['entertainment'] = 0\n    type_by_time_age.append(new_type_by_time)","dd099fa6":"\ncolors = px.colors.qualitative.Light24\nx = type_by_time.index.tolist()\ncategories = ['medicine', 'transportation', 'life', 'entertainment', 'education', 'church', 'etc']\nfig = go.Figure()\n\nfor i, cat in enumerate(categories):\n    fig.add_trace(go.Scatter(x=x, y=type_by_time[cat],\n                        hoverinfo='x+y',\n                        mode='lines',\n                        line=dict(width=0.5, color=colors[i]),\n                        name=cat,\n                        stackgroup='one',\n                        groupnorm='percent'))\nfor age, df in enumerate(type_by_time_age):\n    for i, cat in enumerate(categories):\n        fig.add_trace(go.Scatter(x=df.index.tolist(), y=df[cat],\n                            hoverinfo='x+y',\n                            mode='lines',\n                            line=dict(width=0.5, color=colors[i]),\n                            name=cat,\n                            stackgroup=age,\n                            groupnorm='percent',\n                            visible=False))    \n\nfig.update_layout(\n    title='Where most patients visited?',\n    showlegend=True,\n    xaxis=dict(\n        range=[4, 16],\n        ticksuffix=' week'\n    ),\n    yaxis=dict(\n        type='linear',\n        range=[1, 100],\n        ticksuffix='%'))\nmark_policy(fig)\n\nmenus = []\nfor i, name in enumerate(['All', '20','30','40','50','60','70','80']):\n    d = dict(label=name,\n                     method=\"update\",\n                     args=[{\"visible\": [False]*i*7 + [True]*7 + [False]*(8-i-1)*7},\n                           {\"title\": f\"Where most patients visited? (Age: {name})\"}])\n    menus.append(d)\n\nfig.update_layout(\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            direction=\"right\",\n            active=0,\n            x=1,\n            y=1.2,\n            buttons=menus,\n        )\n    ],\n    xaxis_title=\"weeks\",\n    yaxis_title=\"% in group of patients\",\n)\n\nfig.show()","b746b9db":"PatientInfoRoute = PatientInfo.merge(PatientRoute, on=\"patient_id\")\n\nfor group_name, group in PatientInfoRoute.groupby(\"patient_id\"):\n    x = 0\n    y = 0\n    for row_index, row in group.iterrows():\n        if x == 0:\n            x = row['longitude']\n            y = row['latitude']\n        PatientInfoRoute.loc[row_index, 'relative_x'] = PatientInfoRoute.loc[row_index, 'longitude'] - x\n        PatientInfoRoute.loc[row_index, 'relative_y'] = PatientInfoRoute.loc[row_index, 'latitude'] - y","c0e5a54c":"df = PatientInfoRoute.groupby('patient_id').filter(lambda x: x['relative_x'].count()>1)\ndf[df['patient_id']==1700000020]['date']","5700304e":"from ipywidgets import interact\nf = go.FigureWidget()\n# for group_name, group in PatientInfoRoute.groupby(\"patient_id\"):\n#     f.add_scatter(x=group['relative_x'], y=group['relative_y'], visible=False)\n\n# steps = []\n# for i in range(len(f.data)):\n#     step = dict(\n#         method=\"update\",\n#         args=[{\"visible\": [False] * len(f.data)},\n#              {\"title\": \"Slider switched to patient_id: \"}],\n#     )\n#     step[\"args\"][0][\"visible\"][i] = True\n#     steps.append(step)\n\n# sliders = [dict(\n#     active=10,\n#     currentvalue={\"prefix\": \"patient_id: \"},\n#     steps=steps\n# )]\n# f.update_layout(sliders=sliders)\nf.update_xaxes(range=[-1,1])\nf.update_yaxes(range=[-1.3,1.3])\nf.update_layout(width=400, height=400)\n\nscatt = f.add_scatter()\n\n@interact(patient_id=PatientInfoRoute.groupby('patient_id').filter(lambda x: x['relative_x'].count()>1)['patient_id'].unique())\ndef update(patient_id=\"1000000001\"):\n    with f.batch_update():\n        f.data = []\n        f.add_scatter(x=PatientInfoRoute[PatientInfoRoute['patient_id'] == patient_id]['relative_x'],\n                    y= PatientInfoRoute[PatientInfoRoute['patient_id'] == patient_id]['relative_y'],\n                     mode='lines+markers')\n        x_max = PatientInfoRoute[PatientInfoRoute['patient_id'] == patient_id]['relative_x'].abs().max()\n        y_max = PatientInfoRoute[PatientInfoRoute['patient_id'] == patient_id]['relative_y'].abs().max()\n        f.update_xaxes(range=[-max(x_max,y_max), max(x_max,y_max)])\n        f.update_yaxes(range=[-max(x_max,y_max), max(x_max,y_max)])\n        \nf","74103459":"# Trend of number of visited sites after showing symptoms of patients over age and gender","6d86b9c8":"As time goes on, patients in all age group was deactivated.\n\nEspecially, When governments raised alert level and launched social distancing campaign, their movements was decreased.\n\nIn terms of age, dark traces means younger people. As seen, younger people like 20s~30s usually moved a longer distance than older.","88245060":"# Trend of number of visited sites of patients over age and gender","16e84b9e":"After pandemic, there were a lot of guidelines about social distancing and restriction of movements.\n\nSo, there would be some change in patients movement as time goes on.\n\nTo interpret patients' movement in time series,\n1. Calculate distance between naighbor rows in patients' route data.\n2. Sum distances for each patient and each week.\n3. Average the traveling distance on each week and each age group.","bcdddd9f":"Many patients kept the social distancing well. But, some patients moved a lot even in this situation.\n\nThere might be some groups like people who keeps well, people who keeps little, people who ignore the guideline to go to travel of business trip. It can be further topic.\n\n# The traveling range for each age group","b5b155c8":"This is contour plot with same data. It also shows younger patients usually covered a wide area, so they would give a bad effect on spread of COVID-19.","ef28e259":"Like popular opinion, 20s patients usually moved for a long distance and have many outliers who covered a wide area.","e0e6576b":"# Trend of Contact_number of patients over age and gender","c279cbdd":"# The traveling distance of each patient in time series","7a9488bb":"I also marked some important policies for COVID-19.\n\nAs time goes on, the patients who move for entertainment or life, church was decreased. It was impressive since many patients keep the social distancing as well.\n\nAlso, the patients who visited educational place like school was comparatively less, and it means the policy to delay opening semester was effective.\n\nThe reason of increased percentage for 'transportation' would be homecoming of people who stayed abroad.\n\nFor 20s, the percenatage of less essential place like church, entertainment, life was impressively decreased after social distancing campaign.\n\nEven for church, the older people usually went to the church even after raising alert level and social distancing campaign.\n\n\n","454688ae":"# The place most patients visited\n\nIn this part, I visualized where the patients usually visited.\n\nAlthough there are already many visualizations about the place which most patients visited, there are some problems.\n\nThe ordinary method (usaully in leaderboard):\n- Just show absolute number of each type of place\n\nProblem:\n- Hard to catch the changes with time varying\n- Too many hospital (Every patients would go hospital because of symptoms. And, it makes hard to analyze the other type of place)\n\n\nFor these reasons, I classified the type of place to the large group which are 'medicine', 'transportation', 'life', 'entertainment', 'education', 'church'.\n\nAnd, to visualize change for time and age, I normalized for each week and age group.\n\nIt was effective because the number of patients was so vary for time,and it makes hard to see the changes of type clearly.","ea0b9bb3":"# The traveling distance of patients\n\nhttps:\/\/news.joins.com\/article\/23739340\n\nhttp:\/\/www.donga.com\/news\/article\/all\/20200409\/100569089\/1\n\nKorea government launched a social distance campaign to prevent spread of COVID-19.\nAlso, a lot of government including Europe pass the ordinance, which restricts movements.\n\nWe are sure that the social distancing and restriction of movements is effective for preventing COVID-19, but my question is 'Do people really keeps the guideline?'\n\nIn this part, I made some interpretations which show whether patients keep the social distancing or not.\n\n\nThe ordinary method (usaully in leaderboard) :\n* Counting rows of patients' route data.\n\nProblems\n* Visiting same place many times may be less critical because of limitation in contacted people.\n* It doesn't include data expressing distance.\n* (e.g. Visiting store in front the house VS visiting Busan)\n\n2 weeks ago, I made some visualizations which shows how many places the patient visited, but it also doesn't include data about moving distance.\n\nThus, I craeted another feature 'distance' which shows each patient's range of movement from patients' route data, and I visualize it in some ways."}}