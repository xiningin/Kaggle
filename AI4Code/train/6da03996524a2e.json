{"cell_type":{"b26fe619":"code","d53454bb":"code","12fa6efc":"code","2cf66ea6":"code","e9759f72":"code","dc1315c4":"code","c7c3e155":"code","dd789b9f":"code","ce8ac703":"code","55a231fa":"code","6a7157e8":"code","fae88692":"code","0af6dd03":"code","6da2bd06":"code","5497cb9c":"code","dafea6ea":"code","149630ef":"markdown","78d29c08":"markdown","d9ac5d97":"markdown","988814ae":"markdown","eb416fcb":"markdown","40a4e4fa":"markdown","a1ea8969":"markdown","d489fe23":"markdown","81abb528":"markdown","4b987517":"markdown","7769b27c":"markdown","00fbd188":"markdown","d65040be":"markdown","8cb766e7":"markdown","92af015b":"markdown","1727bc5a":"markdown","d0e6909f":"markdown"},"source":{"b26fe619":"import tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator","d53454bb":"tf.__version__","12fa6efc":"# this is one of the numerous ways of dataloading, with practice and more kaggle reading you will know the different types\n# of data loading processes\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\ntraining_set = train_datagen.flow_from_directory('..\/input\/cat-and-dog\/training_set\/training_set',\n                                                 target_size = (64, 64),\n                                                 batch_size = 32,\n                                                 class_mode = 'binary')","2cf66ea6":"test_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_set = test_datagen.flow_from_directory('..\/input\/cat-and-dog\/test_set\/test_set',\n                                            target_size = (64, 64),\n                                            batch_size = 32,\n                                            class_mode = 'binary')","e9759f72":"cnn = tf.keras.models.Sequential()","dc1315c4":"cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))","c7c3e155":"cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","dd789b9f":"cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","ce8ac703":"cnn.add(tf.keras.layers.Flatten())","55a231fa":"cnn.add(tf.keras.layers.Dense(units=16, activation='relu'))","6a7157e8":"cnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))","fae88692":"# for multi-class classification(more than two)\n# we will use loss = 'categorical_crossentropy'\n# metric = 'accuracy' because this is a classification task unlike the previous ann demonstration\n# shown yesterday\ncnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","0af6dd03":"cnn.fit(x = training_set, validation_data = test_set, epochs = 25)","6da2bd06":"import numpy as np\nfrom keras.preprocessing import image\ntest_image = image.load_img('..\/input\/cat-and-dog\/test_set\/test_set\/dogs\/dog.4011.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n  prediction = 'dog'\nelse:\n  prediction = 'cat'","5497cb9c":"print(prediction)","dafea6ea":"test_image = image.load_img('..\/input\/cat-and-dog\/test_set\/test_set\/cats\/cat.4012.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n  prediction = 'dog'\nelse:\n  prediction = 'cat'\n\nprint(prediction)","149630ef":"## Part 3 - Training the CNN","78d29c08":"### Initialising the CNN","d9ac5d97":"### Preprocessing the Test set","988814ae":"### Importing the libraries","eb416fcb":"## Part 2 - Building the CNN","40a4e4fa":"### Step 3 - Flattening","a1ea8969":"### Compiling the CNN","d489fe23":"### Step 1 - Convolution","81abb528":"## Part 1 - Data Preprocessing","4b987517":"### Preprocessing the Training set","7769b27c":"## Part 4 - Making a single prediction","00fbd188":"### Step 5 - Output Layer","d65040be":"### Step 2 - Pooling","8cb766e7":"### Step 4 - Full Connection","92af015b":"### Adding a second convolutional layer","1727bc5a":"# Convolutional Neural Network","d0e6909f":"### Training the CNN on the Training set and evaluating it on the Test set"}}