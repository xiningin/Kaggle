{"cell_type":{"e276093e":"code","5adc3967":"code","d27f45c6":"code","90605526":"code","8faf9947":"code","7fbdd6a6":"code","7065095b":"code","468376b1":"code","23cacc85":"code","cee1a0d9":"code","d9f21d3a":"code","8bad428f":"code","f777940e":"code","78bd7a2e":"code","42c54882":"code","be454c6c":"code","453d803a":"code","2eadc3ba":"code","963a8146":"code","810622ad":"code","39cf8c51":"code","2ab416eb":"code","f79ce100":"code","c31b4624":"code","a9acd387":"code","7e97f2bf":"code","5f5e014a":"code","57922997":"code","425b5f5e":"code","f2a86d12":"code","f68fe972":"markdown","f3e90f12":"markdown","76401aba":"markdown","0740629d":"markdown","7be152e6":"markdown","37f35669":"markdown","229a0066":"markdown","2122df84":"markdown","11ce783c":"markdown","11b4940d":"markdown"},"source":{"e276093e":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport sqlite3\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport string\nimport re\nimport nltk\nimport seaborn as sns\n\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve,auc\nfrom nltk.stem.porter import PorterStemmer","5adc3967":"con = sqlite3.connect(\"..\/input\/amazon-fine-food-reviews\/database.sqlite\")","d27f45c6":"filtered_data = pd.read_sql_query(\"\"\"SELECT * FROM REVIEWS WHERE SCORE != 3\"\"\",con)","90605526":"#filtering only positive and negative reviews i.e. \n# not taking into consideration those reviews with Score=3\ndef partistion(x):\n    if x < 3:\n        return \"negative\"\n    return \"positive\"","8faf9947":"ActualScore = filtered_data['Score']\nPositiveNegative = ActualScore.map(partistion)\nfiltered_data['Score'] = PositiveNegative","7fbdd6a6":"filtered_data.shape\nfiltered_data","7065095b":"display = pd.read_sql_query(\"\"\"SELECT * FROM REVIEWS WHERE SCORE != 3 AND UserId =\"AR5J8UI46CURR\" ORDER BY ProductId\"\"\",con)\ndisplay","468376b1":"#sorting data according to ProductId in ascending order\nsorted_data = filtered_data.sort_values('ProductId',axis=0,ascending=True,inplace=False, kind='quicksort', na_position='last')","23cacc85":"#Deduplication of entries\nfinal = sorted_data.drop_duplicates(subset=('UserId','ProfileName','Time','Text'),keep='first',inplace=False)\nfinal.shape","cee1a0d9":"#checking to see how much % of Data still remains\n(final['Id'].size*1.0)\/(filtered_data['Id'].size*1.0)*100","d9f21d3a":"display = pd.read_sql_query(\"\"\"SELECT * FROM REVIEWS WHERE SCORE != 3 AND Id =44737 OR Id = 64422 ORDER BY ProductID\"\"\",con)\ndisplay","8bad428f":"final = final[final.HelpfulnessNumerator<=final.HelpfulnessDenominator]","f777940e":"print(final.shape)\n\n#How many positive and negative reviews are present in our dataset?\nfinal['Score'].value_counts()","78bd7a2e":"# find sentences containing HTML tags\ni = 0;\nfor sent in final['Text'].values:\n    if (re.findall('<.*?>',sent)):\n        print(i)\n        print(sent)\n        break;\n    i +=1","42c54882":"from nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nstop = set(stopwords.words('english')) #set of stopwords\nsno = nltk.stem.SnowballStemmer('english') #initialising the snowball stemming\n\ndef cleanhtml(sentence): #function to clean the word of any html-tags\n    cleanr = re.compile('<.*?>')\n    cleantext = re.sub(cleanr,' ',sentence)\n    return cleantext\ndef cleanpunc(sentence): #function to clean the word of any punctuation\n    cleaned = re.sub(r'[?|!|\\'|\"|#]',r'',sentence)\n    cleaned = re.sub(r'[.|,|)|(|\\|\/]',r' ',cleaned)\n    return cleaned\nprint(stop)\nprint(\"*************************************************\")\nprint(sno.stem('tasty'))\n    ","be454c6c":"#code for implementing step-by-step the checks mentioned in the pre-process\ni = 0\nstr1 = ' '\nfinal_string = []\nall_positive_words = [] #store words from +ve reviews here\nall_negative_words = [] #store words from -ve reviews here\ns = ''\nfor sent in final['Text'].values:\n    filtered_sentence=[]\n    sent = cleanhtml(sent) #remove HTML tags\n    for w in sent.split():\n        for cleaned_words in cleanpunc(w).split():\n            if ((cleaned_words.isalpha()) & (len(cleaned_words)>2)):\n                if(cleaned_words.lower() not in stop):\n                    s = (sno.stem(cleaned_words.lower())).encode('utf8')\n                    filtered_sentence.append(s)\n                    if (final['Score'].values)[i]=='positive':\n                        all_positive_words.append(s) #list of all words that are positve\n                    if (final['Score'].values)[i]=='negative':\n                        all_negative_words.append(s) #list of all words that are negative\n                else:\n                    continue\n            else:\n                continue\n    str1 = b\" \".join(filtered_sentence) #final string of cleaned words\n    \n    final_string.append(str1)\n    i +=1","453d803a":"final['CleanedText']=final_string #adding a column of cleanedtext to final","2eadc3ba":"final.head(3)\n\n#store final table into an SQL Lite table for future\n\nconn = sqlite3.connect('final.sqlite')\nc = conn.cursor()\nconn.text_factory = str\nfinal.to_sql('Reviews',conn,schema=None,if_exists='replace')","963a8146":"#Bag of Words\ncount_vect = CountVectorizer()\nfinal_counts = count_vect.fit_transform(final['Text'].values)","810622ad":"type(final_counts)","39cf8c51":"final_counts.shape","2ab416eb":"len(all_positive_words)","f79ce100":"freq_dist_positive = nltk.FreqDist(all_positive_words)\nfreq_dist_negative = nltk.FreqDist(all_negative_words)\nprint(\"Most Common Positive words : \",freq_dist_positive.most_common(20))\nprint(\"Most Common Negative Words : \",freq_dist_negative.most_common(20))","c31b4624":"#bi_gram\ncount_vect = CountVectorizer(ngram_range=(1,2))\nfinal_bigram_counts = count_vect.fit_transform(final['Text'].values)","a9acd387":"final_bigram_counts.shape","7e97f2bf":"tf_idf_vect = TfidfVectorizer(ngram_range=(1,2))\nfinal_tf_idf = tf_idf_vect.fit_transform(final['Text'].values)","5f5e014a":"final_tf_idf.shape","57922997":"features = tf_idf_vect.get_feature_names()","425b5f5e":"features[100000:100010]","f2a86d12":"#convert a row in saprsematrix to a numpy array\nprint(final_tf_idf[3,:].toarray()[0])","f68fe972":"**Observations:** It was seen that in two rows given below the value of HelpulnessNumerator is greater than HelfulnessDenominator which is not practically possible hence these two rows are removed","f3e90f12":"# **Bi-Grams and N-Grams**\n\nNow that we have our listof words describing positive and negative reviews lets analyse them.","76401aba":"# **TF-IDF (Term frequency\u2013Inverse document frequency)** ","0740629d":"**Observation:-** From the above it can be seen that the most common positive and the negative wordsoverlap for eg:'like' could be used as 'not like' \n\nso, its a goog ideato consider pairs of consequent words(bi-grams) or a q sequence of n consecutive words(n_grams)","7be152e6":"# **Text Preprocessing:  stemming, stop-word removal and Lemmatization**\nNow that we have finished deduplication our data requires some preprocessing before we go on further with analysis and making the prediction model.\n\nHence in the Preprocessing phase we do the following in the order below:-\n\n1)Begin by removing the html tags\n\n2)Remove any punctuations or limited set of special characters like , or . or # etc.\n\n3)Check if the word is made up of english letters and is not alpha-numeric\n\n4)Check to see if the length of the word is greater than 2 (as it was researched that there is no adjective in 2-letters)\n\n5)Convert the word to lowercase\n\n6)Remove Stopwords\n\n7)Finally Snowball Stemming the word (it was obsereved to be better than Porter Stemming)\n\nAfter which we collect the words used to describe positive and negative reviews","37f35669":"# **Bag of Words (BOW)**","229a0066":"As can be seen above the same user has multiple reviews of the with the same values for HelpfulnessNumerator, HelpfulnessDenominator, Score, Time, Summary and Text and on doing analysis it was found that\n\nProductId=B000HDOPZG was Loacker Quadratini Vanilla Wafer Cookies, 8.82-Ounce Packages (Pack of 8)\n\nProductId=B000HDL1RQ was Loacker Quadratini Lemon Wafer Cookies, 8.82-Ounce Packages (Pack of 8) and so on\n\nIt was inferred after analysis that reviews with same parameters other than ProductId belonged to the same product just having different flavour or quantity. Hence in order to reduce redundancy it was decided to eliminate the rows having same parameters.\n\nThe method used for the same was that we first sort the data according to ProductId and then just keep the first similar product review and delelte the others. for eg. in the above just the review for ProductId=B000HDL1RQ remains. This method ensures that there is only one representative for each product and deduplication without sorting would lead to possibility of different representatives still existing for the same product.","2122df84":"# **Amazon Fine Food Reviews Analysis**\n\nThe Amazon Fine Food Reviews dataset consists of reviews of fine foods from Amazon.\n\nNumber of reviews: 568,454\nNumber of users: 256,059\nNumber of products: 74,258\nTimespan: Oct 1999 - Oct 2012\nNumber of Attributes\/Columns in data: 10\n\nAttribute Information:\n\n1)Id\n\n2)ProductId - unique identifier for the product\n\n3)UserId - unqiue identifier for the user\n\n4)ProfileName\n\n5)HelpfulnessNumerator - number of users who found the review helpful\n\n6)HelpfulnessDenominator - number of users who indicated whether they found the review helpful or not\n\n7)Score - rating between 1 and 5\n\n8)Time - timestamp for the review\n\n9)Summary - brief summary of the review\n\n10)Text - text of the review\n\n**Objective**\n\nGiven a review, determine whether the review is positive (Rating of 4 or 5) or negative (rating of 1 or 2).\n\n\n[Q] How to determine if a review is positive or negative?\n\n[Ans] We could use the Score\/Rating. A rating of 4 or 5 could be cosnidered a positive review. A review of 1 or 2 could be considered negative. A review of 3 is nuetral and ignored. This is an approximate and proxy way of determining the polarity (positivity\/negativity) of a review.\n\n\n# **Loading the data**\n\n\nThe dataset is available in two forms\n\n.csv file\n\nSQLite Database\n\nIn order to load the data, We have used the SQLITE dataset as it easier to query the data and visualise the data efficiently.\n\nHere as we only want to get the global sentiment of the recommendations (positive or negative), we will purposefully ignore all Scores equal to 3. If the score id above 3, then the recommendation wil be set to \"positive\". Otherwise, it will be set to \"negative\".","11ce783c":"# **Exploratory Data Analysis**\n\n## **Data Cleaning**","11b4940d":"# **Reading Data**"}}