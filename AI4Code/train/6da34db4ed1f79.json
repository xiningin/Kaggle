{"cell_type":{"a611722a":"code","3dfa95c7":"code","c48d2e45":"code","fb9dad23":"code","b0cf96cb":"code","6e513a03":"code","1944d115":"code","143782ad":"code","61a325a9":"code","4f339ca0":"code","e1d506f7":"code","d6f04d3d":"code","f21d2daf":"code","e99b605e":"code","8550aa63":"code","b8139239":"code","08e3b0e1":"code","ebaca721":"code","d95449d9":"code","ce4d7486":"code","14c3f1e0":"code","6cd3704c":"code","21e8670a":"code","a3830f9b":"code","03718188":"code","e0fe9907":"code","1fbdb095":"code","7ea1a53f":"code","82777311":"code","4096d27c":"code","7f7350ee":"code","e0cf9cab":"code","36b31f92":"code","9e77d458":"code","2668a975":"code","d01b8fd3":"code","2ac1e832":"code","8ecdd5d9":"code","c19d918e":"code","d4dbf2ba":"code","99a77068":"code","6779e50b":"code","8f137544":"code","5722af6f":"markdown","9367f9d6":"markdown","35ac5d85":"markdown","787459c9":"markdown","2e836ba9":"markdown","cffc4846":"markdown","d155c78a":"markdown","c335938b":"markdown","1e9f1bab":"markdown","b71b4318":"markdown","a3c57325":"markdown","68b5d967":"markdown"},"source":{"a611722a":"import matplotlib.pylab as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, accuracy_score, r2_score\nfrom sklearn.preprocessing import StandardScaler, Normalizer, MinMaxScaler\n\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression, SGDRegressor, Ridge, Lasso\nfrom sklearn.svm import LinearSVR\nimport xgboost as xgb","3dfa95c7":"# load and split the data\ndf = pd.read_csv('..\/input\/Admission_Predict_Ver1.1.csv')","c48d2e45":"# refining the features names to avoid any sort of column name errors \ndf.columns = df.columns.str.strip().str.lower().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')","fb9dad23":"# dropping the serial number (insignificant feature)\ndf.drop(columns=['serial_no.'], axis=1, inplace=True)\nprint(list(df.columns.values))","b0cf96cb":"# scatter plot of the features\ncols = list(df.columns.values)\nsns.pairplot(df[cols], size = 2)\nplt.suptitle('Figure - The scatter plot of features ', x=0.5, y=1.01, verticalalignment='center', fontsize= 20)\nplt.tight_layout()\nplt.show();","6e513a03":"# printing the columns' information \ndf.info()","1944d115":"# checking for any NaN value in dataset\ndf.isnull().values.any()","143782ad":"# finding the significant features for predicting chances of admit\npd.DataFrame(df.corr()['chance_of_admit'])","61a325a9":"sns.set_color_codes(\"pastel\")\nsns.kdeplot(df['gre_score'], df['toefl_score'], shade=True, cut=5)","4f339ca0":"# creating features and labels\ny = df['chance_of_admit']\nx = df","e1d506f7":"scaler = Normalizer().fit(x)\nrescaledX = scaler.transform(x)","d6f04d3d":"X_train, X_test, y_train, y_test = train_test_split(rescaledX, y, random_state=42)\n\nprint(\"X train: \", X_train.shape)\nprint(\"X test: \", X_test.shape)\nprint(\"y train: \", y_train.shape)\nprint(\"y test: \", y_test.shape)","f21d2daf":"lr = LinearRegression()\nlr.fit(X_train, y_train)","e99b605e":"y_pred = lr.predict(X_test)\nnlr = round(100*lr.score(X_test, y_test),3)\nprint('Score: ', nlr)\nprint('Mean-squared error: ', mean_squared_error(y_test, y_pred))","8550aa63":"scaler = MinMaxScaler(feature_range=(0, 1))\nrescaledX = scaler.fit_transform(x)","b8139239":"X_train, X_test, y_train, y_test = train_test_split(rescaledX, y, random_state=42)\n\nprint(\"X train: \", X_train.shape)\nprint(\"X test: \", X_test.shape)\nprint(\"y train: \", y_train.shape)\nprint(\"y test: \", y_test.shape)","08e3b0e1":"lr = LinearRegression()\nlr.fit(X_train, y_train)","ebaca721":"y_pred = lr.predict(X_test)\nmmlr = round(100*lr.score(X_test, y_test),3)\nprint('Score: ', mmlr)\nprint('Mean-squared error: ', mean_squared_error(y_test, y_pred))","d95449d9":"scaler = StandardScaler().fit(x)\nrescaledX = scaler.transform(x)","ce4d7486":"X_train, X_test, y_train, y_test = train_test_split(rescaledX, y, random_state=42)\n\nprint(\"X train: \", X_train.shape)\nprint(\"X test: \", X_test.shape)\nprint(\"y train: \", y_train.shape)\nprint(\"y test: \", y_test.shape)","14c3f1e0":"lr = LinearRegression()\nlr.fit(X_train, y_train)","6cd3704c":"y_pred = lr.predict(X_test)\nslr = round(100*lr.score(X_test, y_test),3)\nprint('Score: ', slr)\nprint('Mean-squared error: ', mean_squared_error(y_test, y_pred))","21e8670a":"X_train, X_test, y_train, y_test = train_test_split(x, y, random_state=42)\n\nprint(\"X train: \", X_train.shape)\nprint(\"X test: \", X_test.shape)\nprint(\"y train: \", y_train.shape)\nprint(\"y test: \", y_test.shape)","a3830f9b":"model = xgb.XGBClassifier()\nmodel.fit(X_train, y_train)","03718188":"y_pred = model.predict(X_test)\nprint('Mean-squared error: ', mean_squared_error(y_test, y_pred))\nxgbc = round(100*r2_score(y_test, y_pred),2)\nprint('R2 score for regression: ', xgbc)","e0fe9907":"scaler = StandardScaler().fit(x)\nrescaledX = scaler.transform(x)","1fbdb095":"X_train, X_test, y_train, y_test = train_test_split(rescaledX, y, random_state=42)\n\nprint(\"X train: \", X_train.shape)\nprint(\"X test: \", X_test.shape)\nprint(\"y train: \", y_train.shape)\nprint(\"y test: \", y_test.shape)","7ea1a53f":"model = Ridge(alpha=0.5)\nmodel.fit(X_train, y_train)","82777311":"y_pred = model.predict(X_test)\nrrc = round(100*model.score(X_test, y_test),3)\nprint('Score: ', rrc)\nprint('Mean-squared error: ', mean_squared_error(y_test, y_pred))","4096d27c":"scaler = StandardScaler().fit(x)\nrescaledX = scaler.transform(x)","7f7350ee":"X_train, X_test, y_train, y_test = train_test_split(rescaledX, y, random_state=42)\n\nprint(\"X train: \", X_train.shape)\nprint(\"X test: \", X_test.shape)\nprint(\"y train: \", y_train.shape)\nprint(\"y test: \", y_test.shape)","e0cf9cab":"model = Lasso(alpha=0.01)\nmodel.fit(X_train, y_train)","36b31f92":"y_pred = model.predict(X_test)\nlrc = round(100*model.score(X_test, y_test),3)\nprint('Score: ', lrc)\nprint('Mean-squared error: ', mean_squared_error(y_test, y_pred))","9e77d458":"standardScaler = StandardScaler()\nstandardScaler.fit(X_train)","2668a975":"X_train_standard = standardScaler.transform(X_train)\nX_test_standard = standardScaler.transform(X_test)","d01b8fd3":"sgd_reg = SGDRegressor(max_iter=50)\nsgd_reg.fit(X_train_standard, y_train)","2ac1e832":"y_pred = sgd_reg.predict(X_test_standard)\nsgdc = round(100*sgd_reg.score(X_test_standard, y_test),2)\nprint('Score: ', sgdc)","8ecdd5d9":"rfr = RandomForestRegressor(n_estimators=100,criterion='mse')\nrfr.fit(X_train, y_train)","c19d918e":"y_pred = rfr.predict(X_test)\nrfrc = round(100*rfr.score(X_test,y_test),2)\nprint('Score: ', rfrc)","d4dbf2ba":"mlp = MLPRegressor(hidden_layer_sizes=(100,),activation='relu',solver='lbfgs',learning_rate='adaptive',max_iter=1000,learning_rate_init=0.01,alpha=0.5,random_state=15)\nmlp.fit(X_train, y_train)","99a77068":"y_pred = mlp.predict(X_test)\nmlpr = round(100*mlp.score(X_test, y_test),2)\nprint('Score: ', mlpr)\nprint('Mean-squared error: ', mean_squared_error(y_test, y_pred))","6779e50b":"data = {'Normalised Linear Regression':nlr, \n        'Min-max scaling Linear Regression':mmlr, \n        'Data standardization Linear Regression':slr, \n        'XGBoost classifier':xgbc, \n        'Ridge regression':rrc, \n        'Lasso regression':lrc, \n        'Stochastic gradient descent':sgdc, \n        'Random Forest regressor':rfrc, \n        'Multi-layer perceptron regressor':mlpr}","8f137544":"import matplotlib.pyplot as plt\n\nsns.barplot(np.array(list(data.values())), np.array(list(data.keys())), palette=\"rocket\")\n\nplt.show()","5722af6f":"# Analysing the best algorithm","9367f9d6":"# Stochastic gradient descent (SGD)","35ac5d85":"# XGBoost classifier","787459c9":"As we can see that, GRE score, TOEFL score and CGPA are top 3 features which can be useful to decide the output.","2e836ba9":"1. Using data normalization","cffc4846":"3. Using data Standardization","d155c78a":"# Multi-layer perceptron regressor (MLP)","c335938b":"# Linear regression","1e9f1bab":"# Random forest","b71b4318":"2. Using min-max scaling","a3c57325":"# Lasso regression (least absolute shrinkage and selection operator)","68b5d967":"# Ridge regression classifier"}}