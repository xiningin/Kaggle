{"cell_type":{"a5bcb9c1":"code","57695854":"code","e018f875":"code","b00dd881":"code","a58f8071":"code","627ea0e6":"code","f30bf387":"code","0a75c05e":"code","f9996363":"code","ec4ecfb3":"markdown","58f686ed":"markdown","b955cd6a":"markdown","a241b110":"markdown","2e207a39":"markdown","7bf0eef4":"markdown","b0f3656c":"markdown","a4b96bb6":"markdown","7b99e2da":"markdown","fa45d17b":"markdown","312fb5af":"markdown","24e9395e":"markdown","e19e9e48":"markdown"},"source":{"a5bcb9c1":"# Using library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom keras import layers, models","57695854":"train = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/test.csv')\n\nX = train.drop(['target','id'],axis=1)\ny = train['target']\ntest = test.drop(['id'],axis=1)","e018f875":"X","b00dd881":"from sklearn.decomposition import PCA\npca = PCA(n_components=27, svd_solver='randomized', whiten =True)\nX = pca.fit_transform(X)\n\nX = np.array(X)\ny = np.array(pd.get_dummies(y))\ntest = np.array(test)","a58f8071":"model = models.Sequential()\nmodel.add(layers.Dense(9, input_shape=X.shape, activation='relu'))\nmodel.add(layers.Dense(9, activation='softmax'))\nmodel.compile(loss = 'categorical_crossentropy', optimizer='adam')\nmodel.summary()","627ea0e6":"history = model.fit(X, y, epochs=30, batch_size=256, validation_split=0.3,verbose=1)","f30bf387":"weight = model.weights\nlayer1 = pd.DataFrame([list(range(1,28,1)),np.ones((27))]).T\nlayer2 = pd.DataFrame([list(range(1,28,3)),np.ones((9))]).T\nlayer2[1] = layer2[1]*2\nlayer3 = layer2.copy()\nlayer3[1] = 3\npoint = pd.concat([layer1,layer2,layer3]).reset_index(drop=True)\npoint.columns = ['y', 'x']","0a75c05e":"fig = plt.figure(figsize=(20,13))\nplt.scatter( x= point['x'],y=point['y'], s=400,color='black')\n\nweight_i = 0\nweight_j =0\nfor i in range(1,28):\n    weight_j =0\n    for j in range(1,28,3):\n        tmp = pd.DataFrame({'x':[1,2], 'y': [i,j]})\n        we = weight[0][weight_i][weight_j]\n        if we >= 0:\n            color = 'green'\n        else:\n            color = 'red'\n        sns.lineplot(x=tmp['x'],y=tmp['y'],ci=None,lw=np.abs(we)**2*2,color=color)\n        weight_j = weight_j+1\n    weight_i = weight_i+1\n    \nweight_i = 0\nweight_j =0\nfor i in range(1,28,3):\n    weight_j =0\n    for j in range(1,28,3):\n        tmp = pd.DataFrame({'x':[2,3], 'y': [i,j]})\n        we = weight[2][weight_i][weight_j]\n        if we >= 0:\n            color = 'green'\n        else:\n            color = 'red'\n        sns.lineplot(x=tmp['x'],y=tmp['y'],lw=np.abs(we)**2*2,ci=None,color=color)\n        weight_j = weight_j+1\n    weight_i = weight_i+1\n        \nplt.axis('off')\nplt.text(s='Input_layer', x=1,y=28,fontsize=18,va='center',ha='center')\nplt.text(s='hidden_layer', x=2,y=28,fontsize=18,va='center',ha='center')\nplt.text(s='out_layer', x=3,y=28,fontsize=18,va='center',ha='center')\n\nplt.show()","f9996363":"fig = plt.figure(figsize=(20,13))\nplt.scatter( x= point['x'],y=point['y'], s=400,color='black')\n\nweight_i = 0\nweight_j =0\nfor i in range(1,28):\n    weight_j =0\n    for j in range(1,28,3):\n        tmp = pd.DataFrame({'x':[1,2], 'y': [i,j]})\n        we = weight[0][weight_i][weight_j]\n        sns.lineplot(x=tmp['x'],y=tmp['y'],ci=None,lw=np.abs(we)**2*2,color='black')\n        weight_j = weight_j+1\n    weight_i = weight_i+1\n    \nweight_i = 0\nweight_j =0\nfor i in range(1,28,3):\n    weight_j =0\n    for j in range(1,28,3):\n        tmp = pd.DataFrame({'x':[2,3], 'y': [i,j]})\n        we = weight[2][weight_i][weight_j]\n        sns.lineplot(x=tmp['x'],y=tmp['y'],lw=np.abs(we)**2*2,ci=None,color='black')\n        weight_j = weight_j+1\n    weight_i = weight_i+1\n        \nplt.axis('off')\nplt.text(s='Input_layer', x=1,y=28,fontsize=18,va='center',ha='center')\nplt.text(s='hidden_layer', x=2,y=28,fontsize=18,va='center',ha='center')\nplt.text(s='out_layer', x=3,y=28,fontsize=18,va='center',ha='center')\n\nplt.show()","ec4ecfb3":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nVisuailization (Not consider positive and negative value)\n<\/h1>\n<\/div>","58f686ed":"## I made New version include bias and Activation function. [New version](https:\/\/www.kaggle.com\/jeongbinpark\/tps-jun-try-visualization-dnn-model2?scriptVersionId=66505979)\n## Feel free to comments me Plz!","b955cd6a":"![](https:\/\/www.icegif.com\/wp-content\/uploads\/thank-you-icegif-2.gif)","a241b110":"### I using only model's weight. ( Ignore bias ) \n### If weight is postive number, Green line, If weight is negative number, Red line\n### And, Using abs(weight)**2, Make their's width ! - Because, If set only abs(weight), I can't compare their's weight\n### + Multiply 2 ! ( After make notebook, It's so hard to see )","2e207a39":"### Dimensionality reduction. Because, It has so many columns. So I reduce the columns using PCA","7bf0eef4":"### I just build so simple model. This time, I focus on visualization !","b0f3656c":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nVisuailization\n<\/h1>\n<\/div>","a4b96bb6":"### If you have Good Idea ( Anything OKay ), Feel free to give some comments !","7b99e2da":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nTabular Playground Series - Jun 2021\n<\/h1>\n<\/div>\n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/25226\/logos\/header.png?t=2021-01-27-17-34-31)","fa45d17b":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nImport Library and Dataset\n<\/h1>\n<\/div>","312fb5af":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nDimensionality reduction - Using PCA \n<\/h1>\n<\/div>","24e9395e":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nBuild Model - DNN\n<\/h1>\n<\/div>","e19e9e48":"### Hello, This time, I try visualization Deep learning model. DNN !"}}