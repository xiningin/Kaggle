{"cell_type":{"f7618fec":"code","ed37c57a":"code","d8cc9f00":"code","df83ff61":"code","18b8ee67":"code","c9d4e10a":"code","bfecb2b7":"code","38d989d9":"code","6037eb86":"code","81b797f8":"code","54c62cb5":"code","0db90a03":"code","1a4d9c27":"code","d0690d15":"code","7525e527":"code","df51fc17":"code","19b7c4f7":"code","7b537e58":"code","d1363cac":"code","edee540a":"code","83ce12c9":"code","e458db81":"code","8c60a977":"code","2fcaec80":"code","cba3f740":"code","3247168a":"code","5a17de1b":"code","a1d943dd":"code","da4e8042":"code","44e975a9":"code","23c4ac0d":"code","5b30180a":"code","3817c451":"code","f319b970":"code","c2f98ba2":"code","17ed8764":"code","177e38b0":"markdown","29626de4":"markdown","cf07a092":"markdown","fea7a148":"markdown","98c516ee":"markdown","2bbacbea":"markdown","ea941680":"markdown","83af700d":"markdown","a5b701da":"markdown","40512e89":"markdown","350f3357":"markdown","33e61939":"markdown","eba7a74e":"markdown","9c68551c":"markdown","fc383ee9":"markdown","8b09fb1d":"markdown","1c1d9203":"markdown","7f636288":"markdown","47f1af24":"markdown","98d85620":"markdown","01e55952":"markdown","a1c237e4":"markdown","054e77f5":"markdown","f650bfed":"markdown","bf0e3fdc":"markdown","06d1f4b8":"markdown","dcd024c4":"markdown","29c5d973":"markdown","58afd865":"markdown","a2ac71f4":"markdown","c97cf468":"markdown","96c7047c":"markdown","f4762d4b":"markdown","0d0a9ea2":"markdown","ae56a937":"markdown","d640a274":"markdown","cbb7efaa":"markdown","473181a7":"markdown","1b063a70":"markdown"},"source":{"f7618fec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\n\nfrom bokeh.plotting import output_notebook, figure, show\nfrom bokeh.models import ColumnDataSource, Div, Select, Button, ColorBar, CustomJS\nfrom bokeh.layouts import row, column, layout\nfrom bokeh.transform import cumsum, linear_cmap\nfrom bokeh.palettes import Blues8, Spectral3\nfrom bokeh.plotting import figure, output_file, show\n\noutput_notebook()\n\n# Visualisation libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport folium \nfrom folium import plugins\nplt.style.use(\"fivethirtyeight\")# for pretty graphs\n\n\n\n\n\nfrom plotly.offline import iplot\nfrom plotly import tools\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.offline as py\nimport plotly.figure_factory as ff\npy.init_notebook_mode(connected=True)","ed37c57a":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d8cc9f00":"train_df = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv\")\nsubmission_csv = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/submission.csv\")\ncountry_csv = pd.read_csv(\"\/kaggle\/input\/country-code\/wikipedia-iso-country-codes.csv\")","df83ff61":"train_df.head()","18b8ee67":"temp = train_df.groupby(['Date', 'Country\/Region'])['ConfirmedCases'].sum().reset_index()\ntemp['Date'] = pd.to_datetime(temp['Date'])\ntemp['Date'] = temp['Date'].dt.strftime('%m\/%d\/%Y')\ntemp['size'] = temp['ConfirmedCases'].pow(0.3) * 3.5\n\nfig = px.scatter_geo(temp, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"ConfirmedCases\", size='size', hover_name=\"Country\/Region\", \n                     range_color=[1,100],\n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='COVID-19: Cases Over Time', color_continuous_scale=\"greens\")\nfig.show()","c9d4e10a":"Country=pd.DataFrame()\n#temp = train_df.groupby([\"Country\/Region\"])[\"ConfirmedCases\"].sum().reset_index()\ntemp = train_df.loc[train_df[\"Date\"]==train_df[\"Date\"][len(train_df)-1]].groupby(['Country\/Region'])[\"ConfirmedCases\"].sum().reset_index()\nCountry['Name']=temp[\"Country\/Region\"]\nCountry['Values']=temp[\"ConfirmedCases\"]\n\nfig = px.choropleth(Country, locations='Name',\n                    locationmode='country names',\n                    color=\"Values\")\nfig.update_layout(title=\"Corona spread on 19-03-2020\")\nfig.show()","bfecb2b7":"Disease_through_Country = pd.DataFrame()\nDisease_through_Country = train_df.groupby([\"Country\/Region\"]).sum().reset_index()\nDisease_through_Country = Disease_through_Country.drop(['Lat','Long'],axis=1)\n\nNames = [\"ConfirmedCases\",\"Fatalities\"]\nfor i in Names:\n    Disease_through_Country[i+\"_percentage\"] = Disease_through_Country[i]\/Disease_through_Country[Names].sum(axis=1)*100\n    Disease_through_Country[i+\"_angle\"] = Disease_through_Country[i+\"_percentage\"]\/100 * 2*np.pi\n    \nDisease_through_Country_plot = pd.DataFrame({'class': [\"ConfirmedCases\",\"Fatalities\"],\n                                              'percent': [float('nan'), float('nan')],\n                                              'angle': [float('nan'), float('nan')],\n                                              'color': [ '#718dbf', '#e84d60']})\nDisease_through_Country_plot","38d989d9":"# Create the ColumnDataSource objects \"s2\" and \"s2_plot\"\ns2 = ColumnDataSource(Disease_through_Country)\ns2_plot = ColumnDataSource(Disease_through_Country_plot)\n\n# Create the Figure object \"p2\"\np2 = figure(plot_width=475, plot_height=550, y_range=(-0.5, 0.7),toolbar_location=None, tools=['hover'], tooltips='@percent{0.0}%')\n\n# Add circular sectors to \"p2\"\np2.wedge(x=0, y=0, radius=0.8, source=s2_plot,start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),fill_color='color', line_color=None, legend='class')\n\n# Change parameters of \"p2\"\np2.axis.visible = False\np2.grid.grid_line_color = None\np2.legend.orientation = 'horizontal'\np2.legend.location = 'top_center'\n\n# Create the custom JavaScript callback\ncallback2 = CustomJS(args=dict(s2=s2, s2_plot=s2_plot), code='''\n    var ang = ['ConfirmedCases_angle', 'Fatalities_angle'];\n    var per = ['ConfirmedCases_percentage',  'Fatalities_percentage'];\n    if (cb_obj.value != 'Please choose...') {\n        var disease = s2.data['Country\/Region'];\n        var ind = disease.indexOf(cb_obj.value);\n        for (var i = 0; i < ang.length; i++) {\n            s2_plot.data['angle'][i] = s2.data[ang[i]][ind];\n            s2_plot.data['percent'][i] = s2.data[per[i]][ind];\n            \n        }\n    }\n    else {\n        for (var i = 0; i < ang.length; i++) {\n            s2_plot.data['angle'][i] = undefined;\n            s2_plot.data['percent'][i] = undefined;\n        }\n\n    }\n    s2_plot.change.emit();\n''')\n\n# When changing the value of the dropdown menu execute \"callback2\"\noptions = ['Please choose...'] + list(s2.data['Country\/Region'])\nselect = Select(title='Country ', value=options[0], options=options)\nselect.js_on_change('value', callback2)\n\n# Display \"select\" and \"p2\" as a column\nshow(column(select, p2))","6037eb86":"Data = train_df.groupby(\"Date\").sum().reset_index()\nData[\"Date\"]= pd.to_datetime(Data[\"Date\"])\nsource = ColumnDataSource(Data)\np = figure(x_axis_type='datetime')\n\n\n\np.line(x='Date', y='ConfirmedCases', line_width=2, source=source, legend_label='Confirmed Corona Cases')\np.line(x='Date', y='Fatalities', line_width=2, source=source, color=Spectral3[2], legend_label='Death by Corona')\n\np.yaxis.axis_label = 'Activity of Corona period of time'\nshow(p)","81b797f8":"train_df[\"Date\"] = pd.to_datetime(train_df[\"Date\"])","54c62cb5":"China_cases = train_df.loc[train_df[\"Country\/Region\"]==\"China\"].groupby(\"Date\")[\"ConfirmedCases\"].sum().reset_index()\nItaly_cases = train_df.loc[train_df[\"Country\/Region\"]==\"Italy\"].groupby(\"Date\")[\"ConfirmedCases\"].sum().reset_index()\nIran_cases = train_df.loc[train_df[\"Country\/Region\"]==\"Iran\"].groupby(\"Date\")[\"ConfirmedCases\"].sum().reset_index()\nUsa_cases = train_df.loc[train_df[\"Country\/Region\"]==\"Usa\"].groupby(\"Date\")[\"ConfirmedCases\"].sum().reset_index()\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=China_cases.Date, y=China_cases['ConfirmedCases'], name=\"Cases in China\",\n                         line_color='deepskyblue'))\n\nfig.add_trace(go.Scatter(x=Italy_cases.Date, y=Italy_cases['ConfirmedCases'], name=\"Cases in Itlay\",\n                         line_color='red'))\n\nfig.add_trace(go.Scatter(x=Iran_cases.Date, y=Iran_cases['ConfirmedCases'], name=\"Cases in Iran\",\n                         line_color='green'))\n\nfig.add_trace(go.Scatter(x=Usa_cases.Date, y=Usa_cases['ConfirmedCases'], name=\"Cases in Usa\",\n                         line_color='yellow'))\n\nfig.update_layout(title_text='Spread of Corona over a period of Time',\n                  xaxis_rangeslider_visible=True)\nfig.show()","0db90a03":"China_cases = train_df.loc[train_df[\"Country\/Region\"]==\"China\"].groupby(\"Date\")[\"Fatalities\"].sum().reset_index()\nItaly_cases = train_df.loc[train_df[\"Country\/Region\"]==\"Italy\"].groupby(\"Date\")[\"Fatalities\"].sum().reset_index()\nIran_cases = train_df.loc[train_df[\"Country\/Region\"]==\"Iran\"].groupby(\"Date\")[\"Fatalities\"].sum().reset_index()\nUsa_cases = train_df.loc[train_df[\"Country\/Region\"]==\"Usa\"].groupby(\"Date\")[\"Fatalities\"].sum().reset_index()\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=China_cases.Date, y=China_cases['Fatalities'], name=\"Fatalities in China\",\n                         line_color='deepskyblue'))\n\nfig.add_trace(go.Scatter(x=Italy_cases.Date, y=Italy_cases['Fatalities'], name=\"Fatalities in Itlay\",\n                         line_color='red'))\n\nfig.add_trace(go.Scatter(x=Iran_cases.Date, y=Iran_cases['Fatalities'], name=\"Fatalities in Iran\",\n                         line_color='green'))\n\nfig.add_trace(go.Scatter(x=Usa_cases.Date, y=Usa_cases['Fatalities'], name=\"Fatalities in Usa\",\n                         line_color='yellow'))\n\nfig.update_layout(title_text='Fatality through Corona over a period of Time',\n                  xaxis_rangeslider_visible=True)\nfig.show()","1a4d9c27":"import math\ndef Survival(Country):\n    Sx = [] \n    d = 1\n    Ld = 0\n    temp_ = train_df.loc[train_df[\"Country\/Region\"]==Country]\n    temp = temp_.groupby(['Date'])['Fatalities','ConfirmedCases'].sum().reset_index()\n    temp[\"Survival Probability\"] = 0\n    temp[\"Hazard Rate\"] = 0\n    Hr = []\n    for i in range(len(temp)):\n        delta = 1\n        d = temp[\"Fatalities\"][i]\n        n = temp[\"ConfirmedCases\"][i]\n        L = Ld + math.pow((d\/n),delta)\n        S = math.exp(-L)\n        Hr.append(L)\n        Sx.append(S)\n        d= temp[\"Fatalities\"][i]\n        Ld = 0\n    temp[\"Survival Probability\"] = Sx\n    temp[\"Hazard Rate\"] = Hr\n    return temp\n    \nChina_df = Survival(\"China\")\nItaly_df = Survival(\"Italy\")\nIran_df = Survival(\"Iran\")\nUsa_df = Survival(\"USA\")","d0690d15":"China_df.head()","7525e527":"fig = go.Figure()\n\n\nfig.add_trace(go.Scatter(x=Italy_df.Date, y=Italy_df['Survival Probability'], name=\"Italy\",\n                         line_color='red'))\n\nfig.add_trace(go.Scatter(x=Iran_df.Date, y=Iran_df['Survival Probability'], name=\"Iran\",\n                         line_color='blue'))\n\nfig.add_trace(go.Scatter(x=Usa_df.Date, y=Usa_df['Survival Probability'], name=\"Usa\",\n                         line_color='green'))\n\nfig.add_trace(go.Scatter(x=China_df.Date, y=China_df['Survival Probability'], name=\"China\",\n                         line_color='black'))\n\nfig.update_layout(title_text='Survival Probability Corona over a period of Time',\n                  xaxis_rangeslider_visible=True)\n\nfig.show()","df51fc17":"temp_df = train_df.loc[train_df[\"Date\"]==\"2020-03-16\"].groupby(\"Country\/Region\")[\"ConfirmedCases\",\"Fatalities\"].sum().reset_index()\ntemp=pd.DataFrame()\ntemp[\"Index\"] = [\"Korea,South\",\"Spain\",\"Iran\",\"Italy\",\"China\",\"Others\"]\nt = temp_df.sort_values(by=\"ConfirmedCases\").tail()[\"ConfirmedCases\"].values\nvalues = []\nfor i in range(0,5):\n    values.append(t[i])\nvalues.append(sum(temp_df.loc[~temp_df[\"Country\/Region\"].isin(temp[\"Index\"])][\"ConfirmedCases\"]))\ntemp[\"Values\"]=values\n\nfig = go.Figure(data=[go.Pie(labels=temp[\"Index\"], values=temp[\"Values\"],hole=0.2)])\nfig.show()","19b7c4f7":"temp = train_df.loc[(train_df[\"Country\/Region\"]==\"China\") & (train_df[\"Date\"]==\"2020-03-20\")].groupby([\"Province\/State\",\"Lat\",\"Long\"])[\"ConfirmedCases\"].sum().reset_index()\nmap = folium.Map(location=[34, 100], zoom_start=3.5,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(temp['Lat'], temp['Long'], temp['ConfirmedCases'], temp[\"Province\/State\"]):\n    folium.CircleMarker([lat, lon],\n                        radius=value*0.007,\n                        popup = ('<strong>State<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Active Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.3 ).add_to(map)\nmap","7b537e58":"temp = train_df.loc[(train_df[\"Country\/Region\"]==\"China\")].groupby([\"Date\"])[\"ConfirmedCases\"].sum().reset_index()\nfig = px.bar(temp, x='Date', y='ConfirmedCases',\n             hover_data=['ConfirmedCases'], color='ConfirmedCases',\n             labels={'pop':'Total Number of confirmed Cases'}, height=400)\nfig.show()","d1363cac":"Italy_df = pd.read_csv(\"\/kaggle\/input\/covid19italy\/Covid19 - Italy.csv\")\ntemp = Italy_df.loc[Italy_df[\"date\"]==\"2020-03-20 17:00:00\"].reset_index()\nmap = folium.Map(location=[34, 34.5], zoom_start=3.5,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(temp['lat'], temp['long'], temp['Total Cases'], temp[\"\\nreason designation\"]):\n    folium.CircleMarker([lat, lon],\n                        radius=value*0.0007,\n                        popup = ('<strong>State<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Active Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.3 ).add_to(map)\nmap","edee540a":"temp = Italy_df.groupby(\"date\")[\"Total Cases\"].sum().reset_index()\nfig = px.bar(temp, x='date', y='Total Cases',\n             hover_data=['Total Cases'], color='Total Cases',\n             labels={'pop':'Total Number of confirmed Cases'}, height=400)\nfig.show()","83ce12c9":"temp = Italy_df.loc[Italy_df[\"date\"]==\"2020-03-20 17:00:00\"].groupby(\"date\").sum().reset_index()\nItaly = pd.DataFrame()\nItaly[\"Index\"] = [\"Total Cases\",\"Recovered\",\"Death\"]\nItaly[\"Values\"] = [temp[\"Total Cases\"].values[0],temp[\"Recovered\"].values[0],temp[\"Death\"].values[0]]\nfig = go.Figure(data=[go.Pie(labels=Italy[\"Index\"], values=Italy[\"Values\"],hole=0.2)])\nfig.show()","e458db81":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nSk_df = train_df.loc[train_df[\"Country\/Region\"]==\"Korea, South\"].groupby(\"Date\").sum().reset_index()\nIran_df = train_df.loc[train_df[\"Country\/Region\"]==\"Korea, South\"].groupby(\"Date\").sum().reset_index()\n\nfig = make_subplots(rows=1, cols=2, shared_yaxes=True)\n\nfig.add_trace(go.Bar(x=Sk_df.Date, y=Sk_df.ConfirmedCases, name=\"South Korea\"),1, 1)\n\nfig.add_trace(go.Bar(x=Iran_df.Date, y=Iran_df.ConfirmedCases, name =\"Iran\"),1, 2)\n\n#fig.update_layout(coloraxis=dict(colorscale='Bluered_r'), showlegend=False)\nfig.update_layout(\n    title_text=\"Disease Spread Pattern in South Korea and Iran\")\nfig.show()","8c60a977":"Iran_df = pd.DataFrame()\nSk_df = pd.DataFrame()\nlatest_df = pd.read_csv(\"\/kaggle\/input\/lastupdate\/Covid19 - 20-3-2020.csv\")\nIran_df[\"Index\"] =[\"Confirmed\",\"Death\",\"Recovered\"]\nIran_df[\"Values\"] = (latest_df.loc[latest_df[\"Country\"]==\"Iran\"][[\"Confirmed\",\"Death\",\"Recovered\"]].values).tolist()[0]\nSk_df[\"Index\"] =[\"Confirmed\",\"Death\",\"Recovered\"]\nSk_df[\"Values\"] = (latest_df.loc[latest_df[\"Country\"]==\"Korea, South\"][[\"Confirmed\",\"Death\",\"Recovered\"]].values).tolist()[0]\n\n\nfrom plotly.subplots import make_subplots\n\nlabels = ['Confirmed Cases', \"Death\", \"Recovered\"]\n\n\n# Create subplots, using 'domain' type for pie charts\nspecs = [[{'type':'domain'}, {'type':'domain'}]]\nfig = make_subplots(rows=1, cols=2)\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=labels, values=Sk_df[\"Values\"], name=\"South Korea\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=Iran_df[\"Values\"], name=\"Iran\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"Ground Truth of South Korea and Iran\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='South Korea', x=0.18, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Iran', x=0.82, y=0.5, font_size=20, showarrow=False)])\nfig.show()","2fcaec80":"train_df = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv\")\ntrain_df[\"Date\"] = train_df[\"Date\"].apply(lambda x: str(x).replace(\"-\",\"\"))\ntrain_df[\"Date\"]  = train_df[\"Date\"].astype(int)","cba3f740":"#drop Province column and all not available entries\ntrain_df = train_df.drop(['Province\/State'],axis=1)\ntrain_df = train_df.dropna()\ntrain_df.isnull().sum()","3247168a":"test_df = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/test.csv\")   \ntest_df[\"Date\"] = test_df[\"Date\"].apply(lambda x: x.replace(\"-\",\"\"))\ntest_df[\"Date\"]  = test_df[\"Date\"].astype(int)\n\ntest_df[\"Lat\"]  = test_df[\"Lat\"].fillna(12.5211)\ntest_df[\"Long\"]  = test_df[\"Long\"].fillna(69.9683)\ntest_df.isnull().sum()","5a17de1b":"#Asign columns for training and testing\n\nx =train_df[['Lat', 'Long', 'Date']]\ny1 = train_df[['ConfirmedCases']]\ny2 = train_df[['Fatalities']]\nx_test = test_df[['Lat', 'Long', 'Date']]\n#y_test = test[['ConfirmedCases']]","a1d943dd":"#We are going to use Random Forest classifier for the forecast\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=200)\n\n##\nmodel.fit(x,y1)\npred1 = model.predict(x_test)\npred1 = pd.DataFrame(pred1)\npred1.columns = [\"ConfirmedCases_prediction\"]","da4e8042":"RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n                      max_depth=None, max_features='auto', max_leaf_nodes=None, \n                      n_estimators=150, random_state=None, n_jobs=1, verbose=0)","44e975a9":"pred1.head()\n","23c4ac0d":"##\nmodel.fit(x,y2)\npred2 = model.predict(x_test)\npred2 = pd.DataFrame(pred2)\npred2.columns = [\"Death_prediction\"]","5b30180a":"pred2.head()","3817c451":"test_df[\"ConfirmedCases\"] = pred1[\"ConfirmedCases_prediction\"]\ntest_df[\"Death\"] = pred2[\"Death_prediction\"]\ntest_df.head()","f319b970":"temp1 = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/train.csv\")  \ntemp2 = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/test.csv\")\ntrain = train_df.loc[(train_df[\"Country\/Region\"]==\"China\")].groupby([\"Date\"])[\"ConfirmedCases\"].sum().reset_index()\ntest  = test_df.loc[(test_df[\"Country\/Region\"]==\"China\")].groupby([\"Date\"])[\"ConfirmedCases\"].sum().reset_index()\ntrain[\"Date\"] = temp1[\"Date\"]\ntest[\"Date\"] = temp2[\"Date\"]","c2f98ba2":"import matplotlib.patches as mpatches\nplt.figure(figsize=(10, 8))\nplt.plot(train['Date'], train['ConfirmedCases'], 'b-')\nplt.plot(test['Date'], test['ConfirmedCases'], 'r-')\nred_patch = mpatches.Patch(color='red', label='Predicted Corona Cases')\nblue_patch = mpatches.Patch(color='blue', label='Actual Corona Cases')\nplt.legend(handles=[red_patch, blue_patch])\nplt.xlabel('Date'); \nplt.ylabel('Corona Virus Confirmed Cases')\nplt.title('Spread of Corona Virus in China');","17ed8764":"temp1 = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/train.csv\")  \ntemp2 = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/test.csv\")\ntrain = train_df.loc[(train_df[\"Country\/Region\"]==\"China\")].groupby([\"Date\"])[\"Fatalities\"].sum().reset_index()\ntest  = test_df.loc[(test_df[\"Country\/Region\"]==\"China\")].groupby([\"Date\"])[\"Death\"].sum().reset_index()\ntrain[\"Date\"] = temp1[\"Date\"]\ntest[\"Date\"] = temp2[\"Date\"]\n\nimport matplotlib.patches as mpatches\nplt.figure(figsize=(10, 8))\nplt.plot(train['Date'], train['Fatalities'], 'b-')\nplt.plot(test['Date'], test['Death'], 'r-')\nred_patch = mpatches.Patch(color='red', label='Predicted death due to Corona')\nblue_patch = mpatches.Patch(color='blue', label='Actual death due to Corona')\nplt.legend(handles=[red_patch, blue_patch])\nplt.xlabel('Date'); \nplt.ylabel('Corona Virus Death')\nplt.title('Death due to Corona Virus in China');","177e38b0":"#### Observations:\n\nFrom this graph, we can see clearly that disease is well spread in **China**.\n\nWe can also able to observe that, **Iran**, **Italy**, **USA** are following the trend of China and are having high numbers.","29626de4":"* The novel coronavirus that originated in Wuhan, China, in late December.\n* The virus is now known to have infected more than 240,000 people around the world and killed more than 9,800 of them.\n* The virus has also spread to about 160 countries and regions around the world in less than three months.\n* Of these affected countries let's try to understand the ground truth of some of them.\n        * China\n        * Italy\n        * Iran\n        * South Korea\n        ","cf07a092":"###  Predicitions <a id=\"9\"><\/a>","fea7a148":"## Content \n\n* [**About the Competition**](#1)\n    * Objective of the Competition\n    * About the kernel(Key Takeaways)\n* [**Importing the necessary Packages**](#2)\n* [**Exploratory Data Analysis**](#3)\n    * Disease spread over the countries\n    * Cases Confirmed Vs Fatalities across Countries\n    * Forecasting Confirmed Cases and Fatality Rate\n* [**Survival Probability and Hazard Rate**](#4)\n* [**Inside Story of each Countries**](#5)\n    * China\n    * Italy\n    * Iran\n    * South Korea\n* [**Observation and the big Question**](#6)\n* [**References**](#8)\n* [**Predicition**](#9)","98c516ee":"#### Survival Probability:\n\nIn reliability, the survival probability is the proportion of units that survive beyond a specified time. These estimates of survival probabilities are frequently referred to as reliability estimates.\n\n\nThe survival function, conventionally denoted by S, is the probability that the event (say, death) has not occurred yet:\n                      **S(t)=Pr(T>t)**","2bbacbea":"We are treating the spread as of corona as a regression problem and we are using **RandomForest Regression** to predict the death and the spread of the Corona cases","ea941680":"### Survival Probability and Hazard Rate <a id=\"4\"><\/a>","83af700d":"#### Iran and South Korea","a5b701da":"#### **References**  <a id=\"8\"><\/a>\n\nThis kernel is inspired from various kerenels in the Kaggle. I would like to thank everyone for insipiring.\n\n#### Dataset Reference:\n\n* [Italy Dataset](https:\/\/github.com\/pcm-dpc\/COVID-19\/tree\/master\/dati-regioni)\n* [Latest Dataset](https:\/\/github.com\/CSSEGISandData\/COVID-19\/tree\/master\/csse_covid_19_data\/csse_covid_19_daily_reports)","40512e89":"**Observation:**\n\nOn observing both **Confirmed cases** and **fatalities** over the time Italy and Iran are in the verge of repeating the China, whereas the death rate in **Italy** seems worse of all and it follows a increasing trend, which leaves us with the worries.","350f3357":"### Loading the necessary Packages <a id=\"2\"><\/a>","33e61939":"#### Disease spread pattern","eba7a74e":"#### China","9c68551c":"#### Ground Truth of Italy","fc383ee9":"### Please stay tuned for more updates","8b09fb1d":"#### Note:\n\nI have made a dashboard for each countries on their confirmed cases vs fatality rate. Please feel free to hover over the dashboard and please select the values to explore more about each countires","1c1d9203":"In less than a month, Italy has gone from having only three cases of the coronavirus to having the highest number of cases and deaths outside of China, with **463 deaths** and at least 9, 172 of people infected throughout all 20 regions of the country. The number of cases rose by **50% on March 8** alone. Italy also faces an above **average mortality rate of 4%**.","7f636288":"**Observation:**\n\nFrom this graph now we can see that the survival prbability of all Iran,Italy, China are now at same state","47f1af24":"![image.png](attachment:image.png)","98d85620":"## Exploratory Data Analysis <a id=\"3\"><\/a>","01e55952":"#### Hazard Rate:\n\nThe hazard function is the instantaneous rate of failure at a given time. \n\nThe hazard function h(t) is the event (death) rate at time t, conditional on survival until t (i.e., T\u2265t):\n**h(t)=p(t)\/S(t)**","a1c237e4":"### Disease spread over the countries ","054e77f5":"From the inside stories of the higly affected countries  we can understand that, countries had a huge spike in their confirmed cases rate at their 4th and 5th of infection, It is noted that many counties like India are entring into their **fourth and fith** week of Corona. By knowing this fact the question that coming into my mind is **Will we take this seriously, What are we going to do to prevent the outbreak**","f650bfed":"#### Reading the files","bf0e3fdc":"## Observation and the big Question <a id=\"1\"><\/a>","06d1f4b8":"##### The plot above is interactive please feel free to select options to explore","dcd024c4":"Disease spread across the top counrties","29c5d973":"#### Observation:\n\nThere are two fluctuation point on the period of Corona one between **2-10-2020** and **2-15-2020** and other at **3-10-2020** and **3-15-2020**, which is exactly a month period. So it might follow a cyclical pattern, we will try to explore from that prespective in this kernel.","58afd865":"### Inside Story of each Countries <a id=\"5\"><\/a>","a2ac71f4":"In response to the COVID-19 pandemic, the White House and a coalition of leading research groups have prepared the COVID-19 Open Research Dataset (CORD-19). CORD-19 is a resource of over 29,000 scholarly articles, including over 13,000 with full text, about COVID-19, SARS-CoV-2, and related coronaviruses.\n\nThe challenge involves forecasting confirmed cases and fatalities between March 25 and April 22 by region, the primary goal isn't to produce accurate forecasts. It\u2019s to identify factors that appear to impact the transmission rate of COVID-19.","c97cf468":"## About the Competition:COVID19 Global Forecasting <a id=\"1\"><\/a>","96c7047c":"#### Italy","f4762d4b":"### Prediction Plot","0d0a9ea2":"#### Disease spread pattern","ae56a937":"### Cases Confirmed Vs Fatalities across Countries ","d640a274":"### Please upvote if you find this kernel useful","cbb7efaa":"### Forecasting Confirmed Cases and Fatality Rate","473181a7":"### About this kernel (Key TakeAways):\n\n* Extensive EDA to understand more about the corona disease.\n* Modeling tor forercast the future values.\n\nWith this we can fight the corona by taking necessary precautions.","1b063a70":"#### Ground Truth of Korea and China"}}