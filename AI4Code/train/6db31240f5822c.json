{"cell_type":{"852d5baf":"code","ac9dfb31":"code","ae711527":"code","23d86756":"code","57bd6fd3":"code","0e73b1d9":"code","3adfafbc":"code","18eaef02":"code","61f0934b":"code","51df3bfc":"code","666b793e":"code","6084b801":"markdown","5760b049":"markdown"},"source":{"852d5baf":"%matplotlib inline\nfrom sklearn.datasets import load_digits\ndigits = load_digits()\n","ac9dfb31":"# Print to show there are 1797 images (8 by 8 images for a dimensionality of 64)\nprint(\"Image Data Shape\" , digits.data.shape)\n\n# Print to show there are 1797 labels (integers from 0-9)\nprint(\"Label Data Shape\", digits.target.shape)\n","ae711527":"import numpy as np \nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,4))\nfor index, (image, label) in enumerate(zip(digits.data[0:5], digits.target[0:5])):\n    plt.subplot(1, 5, index + 1)\n    plt.imshow(np.reshape(image, (8,8)), cmap=plt.cm.gray)\n    plt.title('Training: %i\\n' % label, fontsize = 20)\n","23d86756":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(digits.data, digits.target, test_size=0.25, random_state=0)\n\n","57bd6fd3":"from sklearn.linear_model import LogisticRegression\n#Step 2. Make an instance of the Model\nlogisticRegr = LogisticRegression()\nlogisticRegr.fit(x_train, y_train)","0e73b1d9":"# Returns a NumPy Array\n# Predict for One Observation (image)\nlogisticRegr.predict(x_test[0].reshape(1,-1))\n","3adfafbc":"# Make predictions on entire test data\npredictions = logisticRegr.predict(x_test)\n","18eaef02":"# Use score method to get accuracy of model\nscore = logisticRegr.score(x_test, y_test)\nprint(score)\n\n","61f0934b":"import numpy as np \n\nimport seaborn as sns\nfrom sklearn import metrics\n","51df3bfc":"cm = metrics.confusion_matrix(y_test, predictions)\n\n\nplt.figure(figsize=(9,9))\nsns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r');\nplt.ylabel('Actual label');\nplt.xlabel('Predicted label');\nall_sample_title = 'Accuracy Score: {0}'.format(score)\nplt.title(all_sample_title, size = 15);\nplt.savefig('toy_Digits_ConfusionSeabornCodementor.png')\n#plt.show();\n\n","666b793e":"cm = metrics.confusion_matrix(y_test, predictions)\n\nplt.figure(figsize=(9,9))\nplt.imshow(cm, interpolation='nearest', cmap='Pastel1')\nplt.title('Confusion matrix', size = 15)\nplt.colorbar()\ntick_marks = np.arange(10)\nplt.xticks(tick_marks, [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"], rotation=45, size = 10)\nplt.yticks(tick_marks, [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"], size = 10)\nplt.tight_layout()\nplt.ylabel('Actual label', size = 15)\nplt.xlabel('Predicted label', size = 15)\nwidth, height = cm.shape\n\nfor x in range(width):\n    for y in range(height):\n        plt.annotate(str(cm[x][y]), xy=(y, x), \n                    horizontalalignment='center',\n                    verticalalignment='center')\nplt.savefig('toy_Digits_ConfusionMatplotlibCodementor.png')\n#plt.show()\n\n","6084b801":"![image.png](attachment:image.png)","5760b049":"# Handwritten Digit Recognition"}}