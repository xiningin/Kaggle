{"cell_type":{"374d2d7d":"code","2831ce72":"code","03399445":"code","bddcc2fd":"code","d8362406":"code","24105539":"code","5e1bf89f":"code","19e26171":"code","86d4f0b0":"code","9da6bd50":"code","07d8a38f":"code","b7dd1771":"code","3ae9dc0f":"code","c9074b28":"code","36340194":"code","6d9e7048":"code","b539466a":"code","18abcdac":"code","88bf5ce6":"code","269cce7a":"code","95ffc8b1":"code","28e05902":"code","8ea57bb9":"code","b067f2db":"code","7bb1c04d":"code","8ddcb433":"code","9dcf00c1":"code","f6f35026":"code","d326f08d":"code","037718bc":"code","7af2ff76":"code","8ed8d05f":"code","ff8f303a":"code","61cbb231":"code","769c4e9e":"code","7d153007":"code","630e622c":"code","f4f66818":"code","bca24866":"code","4f4ad127":"code","9aedc470":"code","a9117ef7":"code","3c598d5f":"code","e16b8700":"code","df1ad373":"code","6f943905":"code","5eda4bcb":"code","ec871436":"code","75f44240":"code","4dc06441":"code","cb33ec04":"code","7c886f14":"code","242b2444":"code","78c4fd8c":"code","8035bb86":"code","ae07c903":"code","8a640c9a":"code","70e21b55":"code","ba8151ca":"code","d39f3e4f":"code","df3f4b4d":"code","8feb7a5f":"code","e9d3d18b":"code","6d45b379":"code","eed75454":"code","e88112fd":"code","c54dbe0a":"code","418ea32a":"code","958a0aa9":"code","788dc473":"code","c96690f6":"code","8d091492":"code","c72aa7df":"code","4e5b18e4":"code","b715c1bb":"markdown","ef01510e":"markdown","60b35ae8":"markdown","fd1c371e":"markdown","785bdda9":"markdown","0f970595":"markdown","b910fe11":"markdown","1f225132":"markdown","e7f10d08":"markdown","ae70329d":"markdown","52a3247f":"markdown","783c8c80":"markdown","69b13123":"markdown","217a06aa":"markdown","ddd99b9e":"markdown","0e6f9e89":"markdown","ac136f80":"markdown","fd9780e4":"markdown","6e4f4a17":"markdown","0decefdd":"markdown","e0ea8201":"markdown","8497fce5":"markdown","b415854d":"markdown","94d23d6a":"markdown","e80a5f69":"markdown","2c288fc7":"markdown","939432f2":"markdown","2960d3c1":"markdown","a0f15f81":"markdown","b2b2e85a":"markdown","9faf9d47":"markdown","8e1601b5":"markdown","cbcb9db0":"markdown","deb9755e":"markdown","eeb25c1f":"markdown","da88bc6a":"markdown","7e359d0e":"markdown","3b851ddb":"markdown","579ef7e1":"markdown","0519544f":"markdown","4fe6c575":"markdown","3f8855fd":"markdown","60ff5652":"markdown","08930c11":"markdown","9321b79d":"markdown","11e059b9":"markdown","3e0d755c":"markdown","20d1e47b":"markdown","470a9929":"markdown","e0da73f9":"markdown","0ffadda7":"markdown","d0ed80e6":"markdown","d7066280":"markdown","54b634e3":"markdown","13f59d43":"markdown","396d02ea":"markdown","d8112e8d":"markdown","a99b8ed4":"markdown"},"source":{"374d2d7d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder\nfrom sklearn.model_selection import GridSearchCV, RepeatedStratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, StackingClassifier\nimport xgboost as xgb","2831ce72":"# Set seed value for reproducing the same results\nseed = 101","03399445":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","bddcc2fd":"# Train data preview\ntrain_data.head()","d8362406":"# Test data preview\ntest_data.head()","24105539":"# Summary of train data\ntrain_data.info()","5e1bf89f":"# Summary of test data\ntest_data.info()","19e26171":"# Train data descriptive statistics\ntrain_data.describe()","86d4f0b0":"# Test data descriptive statistics\ntest_data.describe()","9da6bd50":"plt.subplots(figsize=(7, 5))\nplt.boxplot(train_data['Fare'])\nplt.title('Boxplot of Fare')\nplt.show()","07d8a38f":"# Retrieve rows with Fare greater than 500\ntrain_data[train_data['Fare']>500]","b7dd1771":"# Retrieve rows with Fare equal to 0\ntrain_data[train_data['Fare']==0]","3ae9dc0f":"# Number of missing values in each column in train data\ntrain_data.isnull().sum()","c9074b28":"# Number of missing values in each column in test data\ntest_data.isnull().sum()","36340194":"# Function to extract title from passenger's name\ndef extract_title(df):\n    title = df['Name'].apply(lambda name: name.split(',')[1].split('.')[0].strip())\n    return title","6d9e7048":"# Count of each title in train data\ntrain_data['Title'] = extract_title(train_data)\ntrain_data['Title'].value_counts()","b539466a":"# Count of each title in test data\ntest_data['Title'] = extract_title(test_data)\ntest_data['Title'].value_counts()","18abcdac":"# Function to map titles to main categories\ndef map_title(df):\n    title_category = {\n    \"Capt\": \"Officer\",\n    \"Col\": \"Officer\",\n    \"Major\": \"Officer\",\n    \"Jonkheer\": \"Royalty\",\n    \"Don\": \"Royalty\",\n    \"Sir\": \"Royalty\",\n    \"Dr\": \"Officer\",\n    \"Rev\": \"Officer\",\n    \"the Countess\": \"Royalty\",\n    \"Dona\": \"Royalty\",\n    \"Mme\": \"Mrs\",\n    \"Mlle\": \"Miss\",\n    \"Ms\": \"Mrs\",\n    \"Mr\": \"Mr\",\n    \"Mrs\": \"Mrs\",\n    \"Miss\": \"Miss\",\n    \"Master\": \"Master\",\n    \"Lady\": \"Royalty\"\n    }\n    new_title = df['Title'].map(title_category)\n    return new_title","88bf5ce6":"# Count of each title in train data after mapping\ntrain_data['Title'] = map_title(train_data)\ntrain_data['Title'].value_counts()","269cce7a":"# Count of each title in test data after mapping\ntest_data['Title'] = map_title(test_data)\ntest_data['Title'].value_counts()","95ffc8b1":"# Group train data by 'Pclass', 'Title' and calculate the median age\ntrain_data.groupby(['Pclass', 'Title']).median()['Age']","28e05902":"# Function to identify passengers who have the title 'Miss' and, 1 or 2 value in the 'Parch' column\ndef is_young(df):\n    young = []\n    for index, value in df['Parch'].items():\n        if ((df.loc[index, 'Title'] == 'Miss') and (value == 1 or value == 2)):\n            young.append(1)\n        else:\n            young.append(0)\n    return young","8ea57bb9":"# Group train data by 'Pclass', 'Title', 'Is_Young(Miss)' and calculate the median age\ntrain_data['Is_Young(Miss)'] = is_young(train_data)\ngrouped_age = train_data.groupby(['Pclass', 'Title', 'Is_Young(Miss)']).median()['Age']\ngrouped_age","b067f2db":"test_data['Is_Young(Miss)'] = is_young(test_data)","7bb1c04d":"# Fill missing age values in train and test data\ntrain_data.set_index(['Pclass', 'Title', 'Is_Young(Miss)'], drop=False, inplace=True)\ntrain_data['Age'].fillna(grouped_age, inplace=True)\ntrain_data.reset_index(drop=True, inplace=True)\ntest_data.set_index(['Pclass', 'Title', 'Is_Young(Miss)'], drop=False, inplace=True)\ntest_data['Age'].fillna(grouped_age, inplace=True)\ntest_data.reset_index(drop=True, inplace=True)","8ddcb433":"# Group train data by 'Pclass' and calculate the median fare\ngrouped_fare = train_data.groupby('Pclass').median()['Fare']\ngrouped_fare","9dcf00c1":"# Fill the missing fare value in test data\ntest_data.set_index('Pclass', drop=False, inplace=True)\ntest_data['Fare'].fillna(grouped_fare, inplace=True)\ntest_data.reset_index(drop=True, inplace=True)","f6f35026":"# Drop unnecessary rows and columns\ntrain_data.drop(columns=['Name', 'Cabin', 'Ticket', 'Is_Young(Miss)'], inplace=True)\ntest_data.drop(columns=['Name', 'Cabin', 'Ticket', 'Is_Young(Miss)'], inplace=True)\ntrain_data.dropna(subset=['Embarked'], inplace=True)","d326f08d":"# Missing values in train data after data cleaning\ntrain_data.isnull().sum()","037718bc":"# Missing values in test data after data cleaning\ntest_data.isnull().sum()","7af2ff76":"plt.subplots(figsize=(7, 5))\nsns.countplot(x='Survived', data=train_data)\nplt.title('Class Distribution')\nplt.show()","8ed8d05f":"plt.subplots(figsize=(7, 5))\nsns.barplot(x='Sex', y='Survived', data=train_data, ci=None)\nplt.title('Ratio of survivors based on sex')\nplt.show()","ff8f303a":"plt.subplots(figsize=(7, 5))\nsns.barplot(x='Pclass', y='Survived', data=train_data, ci=None)\nplt.title('Ratio of survivors based on ticket class')\nplt.show()","61cbb231":"plt.subplots(figsize=(7, 5))\nsns.barplot(x='Embarked', y='Survived', data=train_data, ci=None)\nplt.title('Ratio of survivors based on port of embarkation')\nplt.show()","769c4e9e":"plt.subplots(figsize=(7, 5))\nsns.barplot(x='Title', y='Survived', data=train_data, ci=None)\nplt.title('Ratio of survivors based on title')\nplt.show()","7d153007":"# Encode 'Sex' variable values\nle = LabelEncoder()\ntrain_data['Sex'] = le.fit_transform(train_data['Sex'])\ntest_data['Sex'] = le.transform(test_data['Sex'])","630e622c":"# Convert 'Embarked' and 'Title' into dummy variables\ntrain_data = pd.get_dummies(train_data, columns=['Embarked', 'Title'])\ntest_data = pd.get_dummies(test_data, columns=['Embarked', 'Title'])","f4f66818":"train_data.head()","bca24866":"# Pairwise correlation of columns\ncorr = train_data.corr()\ncorr","4f4ad127":"# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(10, 8))\n\n# Draw the heatmap with the mask\nsns.heatmap(corr, mask=mask, cmap='RdBu_r', linewidths=.5, cbar_kws={'shrink': .7})\nplt.show()","9aedc470":"# Apply feature scaling using MinMaxScaler\nscaler = MinMaxScaler()\ntrain_data.iloc[:, 2:] = scaler.fit_transform(train_data.iloc[:, 2:])\ntest_data.iloc[:, 1:] = scaler.transform(test_data.iloc[:, 1:])","a9117ef7":"train_data.head()","3c598d5f":"X_train, X_test, y_train = train_data.iloc[:, 2:], test_data.iloc[:, 1:], train_data['Survived']","e16b8700":"# Function to generate submission file to get test score\ndef submission(preds):\n    test_data['Survived'] = preds\n    predictions = test_data[['PassengerId', 'Survived']]\n    predictions.to_csv('submission.csv', index=False)","df1ad373":"# Classification model\nlogreg = LogisticRegression()\n\n# Parameters to tune\nparams = [{'penalty': ['l1', 'l2', 'elasticnet', 'none'],\n           'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}]\n\n# Hyperparameter tuning using GridSearchCV\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=seed)\nlr_clf = GridSearchCV(logreg, params, cv=cv, n_jobs=-1)\nlr_clf.fit(X_train, y_train)","6f943905":"# Best parameters\nlr_clf.best_params_","5eda4bcb":"# Train score\nlr_clf.best_score_","ec871436":"# Test score\ny_preds = lr_clf.predict(X_test)\nsubmission(y_preds)","75f44240":"# Classification model\ngnb = GaussianNB()\ngnb.fit(X_train, y_train)","4dc06441":"# Test score\ny_preds = gnb.predict(X_test)\nsubmission(y_preds)","cb33ec04":"# Classification model\nlda = LinearDiscriminantAnalysis()\nlda.fit(X_train, y_train)","7c886f14":"# Test score\ny_preds = lda.predict(X_test)\nsubmission(y_preds)","242b2444":"# Classification model\nknn = KNeighborsClassifier()\n\n# Parameters to tune\nparams = [{'n_neighbors': range(1, 21),\n           'p': [1, 2]}]\n\n# Hyperparameter tuning using GridSearchCV\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=seed)\nknn_clf = GridSearchCV(knn, params, cv=cv, n_jobs=-1)\nknn_clf.fit(X_train, y_train)","78c4fd8c":"# Best parameters\nknn_clf.best_params_","8035bb86":"# Train score\nknn_clf.best_score_","ae07c903":"# Test score\ny_preds = knn_clf.predict(X_test)\nsubmission(y_preds)","8a640c9a":"# Classification model\nsvm = SVC(max_iter=10000)\n\n# Parameters to tune\nparams = [{'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000],\n           'kernel': ['linear', 'poly', 'rbf', 'sigmoid']}]\n\n# Hyperparameter tuning using GridSearchCV\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=seed)\nsvm_clf = GridSearchCV(svm, params, cv=cv, n_jobs=-1)\nsvm_clf.fit(X_train, y_train)","70e21b55":"# Best parameters\nsvm_clf.best_params_","ba8151ca":"# Train score\nsvm_clf.best_score_","d39f3e4f":"# Test score\ny_preds = svm_clf.predict(X_test)\nsubmission(y_preds)","df3f4b4d":"# Classification model\ndt = DecisionTreeClassifier(random_state=seed)\n\n# Parameters to tune\nparams = [{'max_depth': [5, 7, 10, None],\n           'min_samples_split': [2, 5, 10],\n           'max_features': ['sqrt', 5, 7, 10]}]\n\n# Hyperparameter tuning using GridSearchCV\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=seed)\ndt_clf = GridSearchCV(dt, params, cv=cv, n_jobs=-1)\ndt_clf.fit(X_train, y_train)","8feb7a5f":"# Best parameters\ndt_clf.best_params_","e9d3d18b":"# Train score\ndt_clf.best_score_","6d45b379":"# Test score\ny_preds = dt_clf.predict(X_test)\nsubmission(y_preds)","eed75454":"# Note: This cell will take a while to run depending on the available processing power\n\n# Classification model\nrf = RandomForestClassifier(random_state=seed)\n\n# Parameters to tune\nparams = [{'n_estimators': range(50, 550, 50),\n           'max_depth': [5, 7, 10, None],\n           'min_samples_split': [2, 5, 10],\n           'max_features': ['sqrt', 5, 7, 10]}]\n\n# Hyperparameter tuning using GridSearchCV\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=5, random_state=seed)\nrf_clf = GridSearchCV(rf, params, cv=cv, n_jobs=-1)\nrf_clf.fit(X_train, y_train)","e88112fd":"# Best parameters\nrf_clf.best_params_","c54dbe0a":"# Train score\nrf_clf.best_score_","418ea32a":"# Test score\ny_preds = rf_clf.predict(X_test)\nsubmission(y_preds)","958a0aa9":"# Note: This cell will take a while to run depending on the available processing power\n\n# Classification model\nxgboost = xgb.XGBClassifier(random_state=seed)\n\n# Parameters to tune\nparams = [{'max_depth': [3, 5, 10],\n           'learning_rate': [0.01, 0.02, 0.03, 0.05, 0.07, 0.1],\n           'n_estimators': range(100, 1100, 100)}]\n\n# Hyperparameter tuning using GridSearchCV\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=5, random_state=seed)\nxgb_clf = GridSearchCV(xgboost, params, cv=cv, n_jobs=-1)\nxgb_clf.fit(X_train, y_train)","788dc473":"# Best parameters\nxgb_clf.best_params_","c96690f6":"# Train score\nxgb_clf.best_score_","8d091492":"# Test score\ny_preds = xgb_clf.predict(X_test)\nsubmission(y_preds)","c72aa7df":"# Models that we will input to stacking classifier\nbase_estimators = list()\nbase_estimators.append(('lda', lda))\nbase_estimators.append(('knn', knn_clf.best_estimator_))\nbase_estimators.append(('svm', svm_clf.best_estimator_))\nbase_estimators.append(('dt', dt_clf.best_estimator_))\nbase_estimators.append(('rf', rf_clf.best_estimator_))\n\n# Stacking classifier\nstacking_clf = StackingClassifier(estimators=base_estimators, final_estimator=LogisticRegression(), cv=5, n_jobs=-1)\nstacking_clf.fit(X_train, y_train)","4e5b18e4":"# Test score\ny_preds = stacking_clf.predict(X_test)\nsubmission(y_preds)","b715c1bb":"After submission, the test accuracy is found to be 77.5%.","ef01510e":"# 2. Read Data <a id=\"heading2\"><\/a>","60b35ae8":"For 'Embarked' and 'Title' variables, we will use dummy variables to represent different values.","fd1c371e":"Since all of the passengers have the same ticket number, we can conclude that the fare was calculated for the entire group and not each individual. Hence, we will not discard these rows.\n\nTo standardize the fare calculation across all passengers in the dataset, the obvious step would be to divide fare by the number of people on the same ticket and get the individual fare. But factors such as reduced fares for children, missing values, etc., will further complicate things. Therefore, we will leave it as it is. For an in-depth understanding of the titanic dataset (particularly fare calculation), you can explore [Encyclopedia Titanica](https:\/\/www.encyclopedia-titanica.org\/).\n\nBefore we proceed further, we also need to analyze passengers who had 0 fare.","785bdda9":"This is how the dataset looks like after conversion:","0f970595":"The train accuracy is 82.8%.","b910fe11":"After submission, the test accuracy is found to be 77.3%.","1f225132":"Looking at the above table, we can observe the following:\n* Random Forest gave the highest train accuracy of 83.7%\n* Decision Tree and Stacking Classifier performed best for test\/unseen data with an accuracy of 78%\n* Most of the models performed really similar in terms of test accuracy\n* Due to the small dataset size, all models have (slightly) overfitted the train data, giving lower test scores than expected","e7f10d08":"## 5.6 Decision Tree <a id=\"subheading6\"><\/a>\n\nImportant parameters that we will tune:\n* max_depth: Maximum depth of the tree\n* min_samples_split: Minimum number of samples required to split an internal node\n* max_features: Number of features to consider when looking for the best split","ae70329d":"Finally, we can calculate the correlation.","52a3247f":"Now that we have extracted titles from names, we can group data by title and impute missing age values using the median age of each category. We will also group by 'Pclass' as it will help in accurately calculating the median age within each class.\n\nNote: We are using median value instead of mean because extreme values (or outliers) have a lot more impact on mean than median.","783c8c80":"# Titanic Survival Prediction\n\n1. [Import Libraries](#heading1)\n2. [Read Data](#heading2)\n3. [Data Cleaning & Feature Engineering](#heading3)\n4. [Exploratory Data Analysis](#heading4)\n5. [Model Building & Evaluation](#heading5)\n  * [Logistic Regression](#subheading1)\n  * [Gaussian Naive Bayes](#subheading2)\n  * [Linear Discriminant Analysis (LDA)](#subheading3)\n  * [k Nearest Neighbors (kNN)](#subheading4)\n  * [Support Vector Machine (SVM)](#subheading5)\n  * [Decision Tree](#subheading6)\n  * [Random Forest](#subheading7)\n  * [XGBoost](#subheading8)\n  * [Model Stacking](#subheading9)\n  * [Result Comparison](#subheading10)\n6. [Conclusion](#heading6)","69b13123":"## 5.3 Linear Discriminant Analysis (LDA) <a id=\"subheading3\"><\/a>\n\nUsing default parameters.","217a06aa":"The train accuracy is 83.7%.","ddd99b9e":"## 5.4 k Nearest Neighbors (kNN) <a id=\"subheading4\"><\/a>\n\nImportant parameters that we will tune:\n* n_neighbors: Number of neighbors to use\n* p: For choosing between manhattan distance and euclidean distance metrics","0e6f9e89":"The train accuracy is 82.7%.","ac136f80":"## 5.8 XGBoost <a id=\"subheading8\"><\/a>\n\nImportant parameters that we will tune:\n* max_depth: Maximum depth of the tree\n* learning_rate: Controls the contribution of each tree\n* n_estimators: Number of trees","fd9780e4":"# 5. Model Building & Evaluation <a id=\"heading5\"><\/a>\n\nBefore we can start building the machine learning models, we need to apply feature scaling to standardize the independent variables within a particular range. This is required because some machine learning algorithms (such as kNN) tend to give more weightage to features with high magnitudes than features with low magnitudes, regardless of the unit of the values. To bring all features to the same level of magnitudes, we need to apply feature scaling.\n\nIn this case, we will use the MinMaxScaler to scale each feature to a (0, 1) range.","6e4f4a17":"This looks better as we can now guess the missing age values more accurately than before. We will apply this function to the test data as well.","0decefdd":"Finally, we will drop all of the unnecessary rows and columns:\n* Name: We've extracted the information that we needed (i.e. Title) and don't need this column anymore\n* Cabin: Majority of the values are missing so we will drop the entire column\n* Embarked: Only 2 values are missing in train data so we can just remove those 2 entire rows\n* Ticket: Doesn't seem to provide any useful information so we will drop the entire column\n* Is_Young(Miss): Purpose of creating this column has been fulfilled and we don't need it anymore","e0ea8201":"## 5.5 Support Vector Machine (SVM) <a id=\"subheading5\"><\/a>\n\nImportant parameters that we will tune:\n* C: Penalty parameter for determining the trade-off between setting a larger margin and lowering misclassification\n* kernel: Specifies the kernel type to be used in the algorithm","8497fce5":"We can see that the 'Survived' column is missing in the test set. We have to predict that label for each passenger in the test data.","b415854d":"Next, we will impute the missing age values according to the grouped data shown above.","94d23d6a":"The train accuracy is 81.6%.","e80a5f69":"A very important thing that needs to be addressed is that I've only used the train data to calculate the median ages for replacing missing values in both train and test datasets. Many people, especially those participating in data science competitions, use test data as well for preprocessing purposes. This may help people improve their model's test accuracy and rank higher in competitions, but it is considered a major mistake in real world applications (known as **data leakage**). Models built using this approach do not generalize too well to the new\/unseen data and give results that are a lot poorer than expected. Hence, test data should never be used for data preprocessing and should only be used for testing purposes.\n\nFor replacing the missing 'Fare' value in test data, we will simply group the train data by 'Pclass' and repeat the same steps as above.","2c288fc7":"# 4. Exploratory Data Analysis <a id=\"heading4\"><\/a>\n\nIn this section, we will try to find some interesting insights using visual methods.\n\nFirst, we will look at the class distribtuion.","939432f2":"This is how the dataset looks like after feature scaling (remember, we only need to scale predictor variables):","2960d3c1":"We can clearly see that the classes are slightly imbalanced since majority of the passengers did not survive. In scenarios like this, the same ratio is expected in test data so we don't need to worry about the imbalanced classes.\n\nNext, let's find out the ratio of survivors with respect to other variables (i.e. 'Sex', 'Pclass', 'Embarked', 'Title').","a0f15f81":"First, let's deal with the missing 'Age' values. For that purpose, we will first extract title of each passenger from their name.","b2b2e85a":"The train accuracy is 82.9%.","9faf9d47":"## 5.7 Random Forest <a id=\"subheading7\"><\/a>\n\nImportant parameters that we will tune:\n* n_estimators: Number of trees in the forest\n* max_depth: Maximum depth of the tree\n* min_samples_split: Minimum number of samples required to split an internal node\n* max_features: Number of features to consider when looking for the best split","8e1601b5":"## 5.2 Gaussian Naive Bayes <a id=\"subheading2\"><\/a>\n\nUsing default parameters.","cbcb9db0":"After submission, the test accuracy is found to be 78%.","deb9755e":"# 3. Data Cleaning & Feature Engineering <a id=\"heading3\"><\/a>","eeb25c1f":"For both train and test datasets, the statistics for 'Fare' column seem a bit strange. The minimum fare is 0 and the maximum is around 512, with 75% of values less than 31.5 and the mean being 35.6. We need to analyze this further to see if there are any outliers.\n\nFor this purpose, we can make use of a boxplot. It will help us understand the variation in the 'Fare' values by visually displaying the distribution of the data points.","da88bc6a":"After submission, the test accuracy is found to be 76.8%.","7e359d0e":"Let's convert this into a visualization for better comprehension. ","3b851ddb":"Based on these visualizations, we can conclude the following:\n* Females had a way higher survival rate than males\n* Lower ticket class (with 3 being the lowest) means less chance of survival\n* Passengers who embarked from port 'C' had slightly more chances of survival\n* Passengers with the title 'Mr' and 'Officer' had really low chances of survival as compared to other passengers\n\nNote: The accuracy of these findings also depends on other factors such as the frequency distribution within each categorical variable. For example, if there is only 1 female in the entire dataset and she survived, then the survival rate of females will be 100% which cannot be considered a concrete finding. Hence, depending on the type of problem being solved, further data analysis should be done if required.\n\nNext, we will compute the pairwise correlation of different variables, focusing mainly on how different features correlate with the target variable 'Survived'. But first, we need to convert all of the categorical variables into numeric data type.\n\nTo convert 'Sex' variable into numeric format, we will simply encode male with 1 and female with 0.","579ef7e1":"# 1. Import Libraries <a id=\"heading1\"><\/a>","0519544f":"After submission, the test accuracy is found to be 75.1%.","4fe6c575":"It is always good to verify that there are no remaining missing values.","3f8855fd":"Now, we can finally start building machine learning models to predict which of the passengers survived.","60ff5652":"After submission, the test accuracy is found to be 77.8%.","08930c11":"## 5.1 Logistic Regression <a id=\"subheading1\"><\/a>\n\nImportant parameters that we will tune:\n* penalty: Used to specify the norm used in the penalization\n* C: Inverse of regularization strength\n\nFor hyperparameter tuning, we will use grid search cross validation over the specified parameter values. We will repeat 5-fold cross validation 10 times so that we can further improve the model performance and reduce overfitting. This will lead to better results for test\/unseen data.","9321b79d":"## 5.9 Model Stacking <a id=\"subheading9\"><\/a>\n\nIn this part, we will stack all of our best performing models using the stacking classifier. Predictions generated by various models will be optimally combined to form a new set of predictions. (Note: The new predictions may not always give better result than the individual models).\n\nUsing default parameters.","11e059b9":"The train accuracy is 82.1%.","3e0d755c":"One thing to note here is that unlike the 'Master' title, there is no separate category for young female passengers. If we go back and look at the original dataset, we will realize that the 'Miss' title includes both young and adult females. We can somewhat solve this by identifying passengers with 'Miss' title having 1 or 2 value in the 'Parch' column. This way we can retrieve passengers who are most likely, young females (there's also a small chance that the retrieved passenger is a female adult because the 'Parch' column not only reveals the number of parents but also the number of children).","20d1e47b":"# 6. Conclusion <a id=\"heading6\"><\/a>\n\nThis notebook gave a brief overview of how different steps are performed in a data science project life cycle. We started by reading in the dataset, preprocessing it, exploring it to find useful insights, and finally built various machine learning models and evaluated them. The main objective of this project was to analyze the titanic dataset and predict whether a passenger will survive or not, based on various input features. To further build and improve upon this project, a lot of techniques could be tried.\n\nInnovative ways of feature engineering like combining the 'SibSp' and 'Parch' features, or applying different data preprocessing methods such as binning the 'Age' column could be tried to help improve the overall performance. One technique that will surely improve the scores is to further hypertune the models. Due to limited time and processing power available, we only performed grid search over a few combinations of paramters' values (we also skipped many parameters and used their default value). The extra time spent on tuning the parameters usually leads to better results.\n\nAdditionally, there are other options for trying and improving the prediction accuracy such as applying feature selection techniques or building deep learning models (e.g. neural networks). Part of a job of data scientists is to be creative, keep experimenting and try figuring out new ways of improving upon their work. The 'titanic survival prediction' task is no exception.","470a9929":"Next, we will split our train and test datasets with respect to predictor (X) and response (y) variables.","e0da73f9":"The 'y_test' is not provided in this dataset. For getting the test scores, we will have to submit our predictions online. To make the entire process a bit smoother, we will write a function that takes in model predictions and generates a file in the required format to submit online.","0ffadda7":"## 5.10 Result Comparison <a id=\"subheading10\"><\/a>\n\n\n| Model | Train Accuracy (%) | Test Accuracy (%) |\n| ----- | ------------------ | ----------------- |\n| Logistic Regression | 82.7 | 76.8 |\n| Gaussian Naive Bayes | N\/A | 75.1 |\n| Linear Discriminant Analysis | N\/A | 77.5 |\n| k Nearest Neighbors | 82.1 | 77.3 |\n| Support Vector Machine | 82.8| 77.8 |\n| Decision Tree | 81.6 | 78 |\n| Random Forest | 83.7 | 77 |\n| XGBoost | 82.9 | 76.8 |\n| Model Stacking | N\/A | 78 |","d0ed80e6":"Since there are many titles with very few counts, we will map them to main categories (titles that are more frequently occurring).","d7066280":"Again, it looks like there are no data errors; just some passengers who got a free ride for whatever reason (visit Encyclopedia Titanica if you're interested to find out why).\n\nNext, we will check for missing values.","54b634e3":"After submission, the test accuracy is found to be 78%.","13f59d43":"After submission, the test accuracy is found to be 77%.","396d02ea":"If we just focus on the 'Survived' variable, we will notice that:\n* It has a comparatively strong negative correlation with 'Pclass', 'Sex' and 'Title_Mr'\n* It has a comparatively strong positive correlation with 'Fare', 'Embarked_C', 'Title_Miss' and 'Title_Mrs'","d8112e8d":"It seems like there are a few extreme data points. Let's explore this further.","a99b8ed4":"After submission, the test accuracy is found to be 76.8%"}}