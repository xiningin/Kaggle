{"cell_type":{"c776bc39":"code","32676741":"code","7f208335":"code","414686a6":"code","3b89fa5d":"code","501ff49e":"code","e0837d8e":"code","a77c58ff":"code","f60412c4":"code","61c0dc3b":"code","86fc825a":"code","70677cb5":"code","c43b0be9":"code","e987f9b5":"code","a20344db":"code","37730a48":"code","e315a895":"code","0fc90579":"code","60b4f61f":"code","0a41d561":"code","2d2f6ab5":"code","8b1d80fd":"code","d35cbcee":"code","c3334dfd":"code","d81fd47b":"code","d3e0d80a":"code","b33c2c47":"code","92531ab0":"code","0b8e2981":"code","b71d3553":"code","3c83637e":"code","a493707f":"code","04722080":"code","addf163d":"code","d6fd755e":"code","e974ed44":"code","86336c90":"code","98126f3d":"code","982f0e5a":"code","f9be4db3":"markdown","913251ab":"markdown","f3e64b90":"markdown","77b84ed7":"markdown","13b22945":"markdown","1ca6087a":"markdown","13a13085":"markdown","7de7dc0d":"markdown"},"source":{"c776bc39":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","32676741":"import torch","7f208335":"torch.__version__","414686a6":"lst=[3,4,5,6]\narr=np.array(lst)","3b89fa5d":"arr","501ff49e":"arr.dtype","e0837d8e":"tensors =torch.from_numpy(arr)\ntensors","a77c58ff":"tensors[:2]","f60412c4":"tensors[1:4]","61c0dc3b":"tensors[3]=100","86fc825a":"tensors","70677cb5":"arr","c43b0be9":"tensor_arr=torch.tensor(arr)","e987f9b5":"tensor_arr","a20344db":"tensor_arr[3]=17\ntensor_arr","37730a48":"arr","e315a895":"torch.zeros(2,3,dtype=torch.float32)","0fc90579":"torch.ones(4,4,dtype=torch.float64)","60b4f61f":"x=torch.tensor(np.arange(0,12).reshape(4,3))","0a41d561":"x","2d2f6ab5":"x[:1]","8b1d80fd":"x[:,:1]","d35cbcee":"a=torch.tensor([1,2,3],dtype=torch.float32)\nb=torch.tensor([3,4,5],dtype=torch.int64)","c3334dfd":"print(a+b)","d81fd47b":"a","d3e0d80a":"b","b33c2c47":"torch.add(a,b)","92531ab0":"c=torch.zeros(3)","0b8e2981":"c","b71d3553":"torch.add(a,b,out=c)","3c83637e":"c","a493707f":"torch.add(a,b).sum()","04722080":"x=torch.tensor([1,2,3],dtype=torch.float32)\ny=torch.tensor([4,5,6],dtype=torch.float32)","addf163d":"print(x*y)","d6fd755e":"torch.mul(x,y)","e974ed44":"x=torch.tensor([[1,2,3],[4,5,6]],dtype=torch.float64)\ny=torch.tensor([[1,2],[3,4],[5,6]],dtype=torch.float64)","86336c90":"torch.matmul(x,y)","98126f3d":"torch.mm(x,y)","982f0e5a":"x@y","f9be4db3":"# # creating tensors in torch","913251ab":"# if we want to stor our output in some other variable yes we can do that","f3e64b90":"# Disadvantage of from_numpy the array and tensor uses the same memory location","77b84ed7":"# mathematical operation","13b22945":"# dot product and multiplication operation","1ca6087a":"# summing up all the internal no","13a13085":"# Prevent this by using torch.tensor","7de7dc0d":"shape should be same of out"}}