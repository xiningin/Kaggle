{"cell_type":{"57fc7c4d":"code","9023f095":"code","5f97e77c":"code","cde1ec21":"code","4886ee64":"code","f796e2eb":"code","44cae636":"markdown","a36f8334":"markdown","4129813b":"markdown","6dbab7b8":"markdown","0e2ea4bc":"markdown","ff6ae58f":"markdown"},"source":{"57fc7c4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9023f095":"# Install:\n# Kaggle environments.\n!git clone https:\/\/github.com\/Kaggle\/kaggle-environments.git\n!cd kaggle-environments && pip install .\n\n# GFootball environment.\n!apt-get update -y\n!apt-get install -y libsdl2-gfx-dev libsdl2-ttf-dev\n\n# Make sure that the Branch in git clone and in wget call matches !!\n!git clone -b v2.7 https:\/\/github.com\/google-research\/football.git\n!mkdir -p football\/third_party\/gfootball_engine\/lib\n\n!wget https:\/\/storage.googleapis.com\/gfootball\/prebuilt_gameplayfootball_v2.7.so -O football\/third_party\/gfootball_engine\/lib\/prebuilt_gameplayfootball.so\n!cd football && GFOOTBALL_USE_PREBUILT_SO=1 pip3 install .","5f97e77c":"!conda install -y -c potassco clingo","cde1ec21":"%%writefile submission.py\nfrom kaggle_environments.envs.football.helpers import *\nimport clingo\nimport re\nimport math\n\n# AZIONI\n\n# Action.Idle = 0\n# Action.Left = 1, run to the left, sticky action.\n# Action.TopLeft = 2, run to the top-left, sticky action.\n# Action.Top = 3, run to the top, sticky action.\n# Action.TopRight = 4, run to the top-right, sticky action.\n# Action.Right = 5, run to the right, sticky action.\n# Action.BottomRight = 6, run to the bottom-right, sticky action.\n# Action.Bottom = 7, run to the bottom, sticky action.\n# Action.BottomLeft = 8, run to the bottom-left, sticky action.\n# Action.Sprint = 9, start sprinting, sticky action. Player moves faster, but has worse ball handling.\n# Action.ReleaseSprint = 10, stop sprinting.\n# Action.LongPass = 11, perform a long pass to the player on your team. Player to pass the ball to is auto-determined based on the movement direction.\n# Action.HighPass = 12, perform a high pass, similar to action_long_pass.\n# Action.ShortPass = 13, perform a short pass, similar to action_long_pass.\n# Action.Shot = 14, perform a shot, always in the direction of the opponent's goal.\n# Action.ReleaseDirection = 15, reset current movement direction.\n# Action.Slide = 16, perform a slide \n# Action.Dribble = 17, start dribbling \n# Action.ReleaseDribble = 18, stop dribbling. \n\n\n# GAME MODES\n\n# GameMode.Normal = 0, normal play\n# GameMode.ThrowIn = 1, rimessa laterale\n# GameMode.FreeKick = 2, calcio di punizione\n# GameMode.Corner = 3, calcio d'angolo\n# GameMode.Penalty = 4, calcio di rigore\n\n\ndef find_answer_in_model(string):\n    start = 6\n    end = 9\n    index = string.rfind('answer')\n    temp = string[index+start:index+end]\n    answer = re.split(\"[()]+\", temp)\n    return(int(answer[1]))\n\ndef find_action_in_answer(x):\n    _map = [\n        Action.Idle,\n        Action.Left,\n        Action.TopLeft,\n        Action.Top,\n        Action.TopRight,\n        Action.Right,\n        Action.BottomRight,\n        Action.Bottom,\n        Action.BottomLeft,\n        Action.Sprint,\n        Action.ReleaseSprint,\n        Action.LongPass,\n        Action.HighPass,\n        Action.ShortPass,\n        Action.Shot,\n        Action.ReleaseDirection,\n        Action.Slide,\n        Action.Dribble,\n        Action.ReleaseDribble\n    ]\n    return _map[x]\n\ndef distanza(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 * 2.38 - y2 * 2.38) ** 2) \n\ndef get_active_sticky_actions(obs):\n    active_sticky_actions = ''\n    if (Action.Left in obs['sticky_actions']):\n        active_sticky_actions += ('active_sticky_action(1). ')\n    if (Action.TopLeft in obs['sticky_actions']):\n        active_sticky_actions += ('active_sticky_action(2). ')\n    if (Action.Top in obs['sticky_actions']):\n        active_sticky_actions += ('active_sticky_action(3). ')\n    if (Action.TopRight in obs['sticky_actions']):\n        active_sticky_actions += ('active_sticky_action(4). ')\n    if (Action.Right in obs['sticky_actions']):\n        active_sticky_actions += ('active_sticky_action(5). ')\n    if (Action.BottomRight in obs['sticky_actions']):\n        active_sticky_actions += ('active_sticky_action(6). ')\n    if (Action.Bottom in obs['sticky_actions']):\n        active_sticky_actions += ('active_sticky_action(7). ')\n    if (Action.BottomLeft in obs['sticky_actions']):\n        active_sticky_actions += ('active_sticky_action(8). ')\n    if (Action.Sprint in obs['sticky_actions']):\n        active_sticky_actions += ('active_sticky_action(9). ')\n    if (Action.Dribble in obs['sticky_actions']):\n        active_sticky_actions += ('active_sticky_action(17). ')\n    #print('ACTIVE STICKY ACTIONS: ' + active_sticky_actions)\n    return active_sticky_actions\n\ndef get_active_player_position(obs):\n    active_player_position = ''\n    #print(str(int(obs['left_team'][obs['active']][1] * 1000)))\n    if (obs['left_team'][obs['active']] != None and obs['left_team'][obs['active']][0] != None):\n        active_player_position += 'active_player(' + str(obs['active']) + '). '\n        active_player_position += 'active_player_x(' + str(int(obs['left_team'][obs['active']][0] * 1000)) + '). '\n        active_player_position += 'active_player_y(' + str(int(obs['left_team'][obs['active']][1] * 1000)) + '). '\n    #print('ACTIVE PLAYER: ' + active_player_position)\n    return active_player_position\n\ndef get_ball_position(obs):\n    ball_position = ''\n    if (obs['ball'][0] != None and obs['ball'][1] != None):\n        #print(str(int(obs['ball'][1] * 1000)))\n        ball_position += 'ball_position_x(' + str(int(obs['ball'][0] * 1000)) + '). '\n        ball_position += 'ball_position_y(' + str(int(obs['ball'][1] * 1000)) + '). '\n    #print('BALL POSITION: ' + ball_position)\n    return ball_position\n\ndef get_ball_direction(obs):\n    ball_direction = ''\n    if (obs['ball_direction'][0] != None and obs['ball_direction'][1] != None):\n        #print(str(int(obs['ball_direction'][1] * 1000)))\n        ball_direction += 'ball_direction_x(' + str(int(obs['ball_direction'][0] * 10000)) + '). '\n        ball_direction += 'ball_direction_y(' + str(int(obs['ball_direction'][1] * 10000)) + '). '\n    #print('BALL DIRECTION: ' + ball_direction)\n    return ball_direction\n\ndef get_defense_vector(obs):\n    defense_vector = ''\n    player_x = obs['left_team'][obs['active']][0]\n    player_y = obs['left_team'][obs['active']][1]\n    ballPosX = obs['ball'][0]\n    ballPosY = obs['ball'][1]\n    vec_pgX = -1 - ballPosX\n    vec_pgY = - ballPosY\n    qX = -1 - vec_pgX + (vec_pgX * 0.2)\n    qY = - vec_pgY + (vec_pgY * 0.2)\n    vector_x = (qX - player_x)\n    vector_y = (qY - player_y)\n    defense_vector += 'defense_vector_x(' + str(int(vector_x * 1000)) + '). '\n    defense_vector += 'defense_vector_y(' + str(int(vector_y * 1000)) + '). '\n    return defense_vector\n\ndef get_ball_team(obs):\n    ball_team = 'ball_team(' + str(obs['ball_owned_team']) + '). '\n    #print('BALL TEAM: ' + ball_team)\n    return ball_team\n\ndef get_ball_player(obs):\n    ball_player = 'ball_player(' + str(obs['ball_owned_player']) + '). '\n    #print('BALL PLAYER: ' + ball_player)\n    return ball_player\n\ndef get_enemy_goalkeeper(obs):\n    enemy_goalkeeper_x = 'enemy_goalkeeper_x(' + str(int(obs['right_team'][0][0] * 1000)) + '). '\n    #print('BALL PLAYER: ' + ball_player)\n    return enemy_goalkeeper_x\n\ndef get_game_mode(obs):\n    if obs['game_mode'] == GameMode.Normal:\n        return 'game_mode(0). '\n    elif obs['game_mode'] == GameMode.ThrowIn:\n        return 'game_mode(1). '\n    elif obs['game_mode'] == GameMode.FreeKick:\n        return 'game_mode(2). '\n    elif obs['game_mode'] == GameMode.Corner:\n        return 'game_mode(3). '\n    elif obs['game_mode'] == GameMode.Penalty:\n        return 'game_mode(4). '\n    else:\n        return 'game_mode(0).'\n    \ndef get_closest_opponent_ahead(obs):\n    posX = obs['left_team'][obs['active']][0]\n    posY = obs['left_team'][obs['active']][1]\n    shortest_distance = None\n    opponent = None\n    for i in range(1, len(obs[\"right_team\"])):\n        distance_to_opponent = distanza(posX, posY, obs[\"right_team\"][i][0], obs[\"right_team\"][i][1])\n        if (obs[\"right_team\"][i][0] > posX and\n                abs(obs[\"right_team\"][i][0] - posX) < 0.15 and\n                abs(obs[\"right_team\"][i][1] - posY) < 0.1):\n            if shortest_distance == None or distance_to_opponent < shortest_distance:\n                shortest_distance = distance_to_opponent\n                opponent = obs[\"right_team\"][i]\n    opponent_ahead = ''\n    if opponent != None:\n        opponent_ahead += 'opponent_ahead(1). '\n        opponent_ahead += 'opponent_ahead_x(' + str(int(opponent[0] * 1000)) + '). '\n        opponent_ahead += 'opponent_ahead_y(' + str(int(opponent[1] * 1000)) + '). '\n    else:\n        opponent_ahead += 'opponent_ahead(0). '\n    return opponent_ahead\n    \ndef get_asp_program(obs):\n    return \"\"\"\\\n    \n    #show.\n    #show X : answer(X).\n    \n    \n    \n    % INPUTS\n    \n    % modalit\u00e0 di gioco : 0 = normal, 1 = rimessa laterale, 2 = punizione, 3 = angolo, 4 = rigore\n    \"\"\" + get_game_mode(obs) + \"\"\"\n    \n    % squadra in possesso della palla : 0 = giocatore, 1 = avversario, -1 = nessuno\n    \"\"\" + get_ball_team(obs) + \"\"\"\n    \n    % giocatore in possesso della palla : 0..11\n    \"\"\" + get_ball_player(obs) + \"\"\"\n    \n    % posizione del portiere avversario\n    \"\"\" + get_enemy_goalkeeper(obs) + \"\"\"\n    \n    % azioni in corso : 0..8 = direzione di movimento, 9 = corsa\n    \"\"\" + get_active_sticky_actions(obs) + \"\"\"\n    \n    % posizione del giocatore controllato\n    \"\"\" + get_active_player_position(obs) + \"\"\"\n    \n    % posizione della palla\n    \"\"\" + get_ball_position(obs) + \"\"\"\n    \n    % direzione della palla\n    \"\"\" + get_ball_direction(obs) + \"\"\"\n    \n    % posizione ottimale di copertura tra la palla e la nostra porta\n    \"\"\" + get_defense_vector(obs) + \"\"\"\n    \n    % avversario d'avanti pi\u00f9 vicino\n    \"\"\" + get_closest_opponent_ahead(obs) + \"\"\"\n    \n    \n    \n    % ATTACCO E DIFESA\n    \n    % CORRI SE NON STAI CORRENDO\n    action(9) :- not active_sticky_action(9), ball_team(K), K != 0.\n    action(9) :- not active_sticky_action(9), ball_team(0), active_player_x(X), enemy_goalkeeper_x(X1), X < 300, X > -400, X1 - X > 350.\n    \n    % SMETTI DI CORRERE SE STAI PER TIRARE\n    action(10) :- active_sticky_action(9), ball_team(0), active_player_x(X), enemy_goalkeeper_x(X1), X1 - X <= 350.\n    \n    \n    \n    % CALCI PIAZZATI\n    \n    % calcio di rigore\n     % mira\n    action(4) :- game_mode(4), ball_team(0), not active_sticky_action(4).\n     % tira\n    action(14) :- game_mode(4), ball_team(0), active_sticky_action(4).\n    \n    % calcio d'angolo\n    action(12) :- game_mode(3), ball_team(0).\n    \n    % calcio di punizione\n     % mira\n    action(5) :- game_mode(2), ball_team(0), not active_sticky_action(5).\n     % passa se sei non sei in buona posizione per tirare\n    action(12) :- game_mode(2), ball_team(0).\n     % tira se sei in buona posizione per tirare\n    action(14) :- game_mode(2), ball_team(0), active_player_x(X), active_player_y(Y), Y > -160, Y < 160, X > 600.\n    \n    \n    \n    % ATTACCO\n    \n    % condizione di partenza : il giocatore controllato ha la palla\n    player_has_ball :- game_mode(0), ball_team(0), active_player(K), ball_player(K).\n    \n    % (utility) calcola se la palla \u00e8 davanti al giocatore controllato\n    ball_is_ahead :- active_player_x(X), ball_position_x(X1), X1 > X.\n    \n    % rinvio portiere\n    action(14) :- player_has_ball, active_player(0).\n    \n    % spazzata dalla difesa\n    action(14) :- player_has_ball, active_player_x(X), X > -1000, X <= -800.\n    \n    % lancio lungo dalla difesa\n    action(12) :- player_has_ball, run_to_goal(_), ball_is_ahead, active_player_x(X), X > -800, X <= -500.\n    \n    % passaggio filtrante\n    action(11) :- player_has_ball, run_to_goal(_), ball_is_ahead, active_player_x(X), X > -500, X < -200.\n    \n    % tiro con portiere fuori posizione\n     % (utility) check se il portiere \u00e8 uscito dai pali\n    goalkeeper_out :- player_has_ball, active_player_x(X), enemy_goalkeeper_x(X1), X1 <= 900, X1 - X < 350.\n     % spiazzamento a sinistra\n    action(6) :- goalkeeper_out, not active_sticky_action(6), active_player_y(Y), Y >= 0, Y < 160.\n     % spiazzamento a destra\n    action(4) :- goalkeeper_out, not active_sticky_action(4), active_player_y(Y), Y < 0, Y > -160.\n     % tiro \n    action(14) :- goalkeeper_out, active_sticky_action(4).\n    action(14) :- goalkeeper_out, active_sticky_action(6).\n    \n    % tiro in posizione avanzata\n    action(14) :- player_has_ball, ball_is_ahead, active_player_x(X), active_player_y(Y), X > 700, Y > -160, Y < 160.\n    \n    % passaggio in posizione avanzata\n    action(13) :- player_has_ball, not ball_is_ahead, active_player_x(X), active_player_y(Y), X > 700, Y > -160, Y < 160.\n    \n    % cross in posizione avanzata\n    cross(3) :- player_has_ball, active_player_x(X), active_player_y(Y), X > 700, Y >= 160.\n    cross(7) :- player_has_ball, active_player_x(X), active_player_y(Y), X > 700, Y <= -160.\n    action(X) :- cross(X), not active_sticky_action(X).\n    action(13) :- cross(X), active_sticky_action(X).\n    \n    % dribbling\n    can_dribble(1) :- player_has_ball, opponent_ahead(1), active_player_y(Y), active_player_x(X), X > 0, Y > -300, Y < 300.\n    %action(17) :- can_dribble(0). \n    %can_dribble(1) :- active_sticky_action(17).\n    \n    dribble(4) :- can_dribble(1), opponent_ahead_y(Y1), active_player_y(Y), Y < 0, Y1 > Y + 100.\n    dribble(6) :- can_dribble(1), opponent_ahead_y(Y1), active_player_y(Y), Y < 0, Y1 < Y + 100, Y1 > Y - 100.\n    dribble(5) :- can_dribble(1), opponent_ahead_y(Y1), active_player_y(Y), Y < 0, Y1 < Y - 100.\n    \n    dribble(5) :- can_dribble(1), opponent_ahead_y(Y1), active_player_y(Y), Y > 0, Y1 > Y + 100.\n    dribble(6) :- can_dribble(1), opponent_ahead_y(Y1), active_player_y(Y), Y > 0, Y1 < Y + 100, Y1 > Y - 100.\n    dribble(4) :- can_dribble(1), opponent_ahead_y(Y1), active_player_y(Y), Y > 0, Y1 < Y - 100.\n    \n    action(X) :- dribble(X).\n    \n    % rilascio dribbling\n    action(18) :- active_sticky_action(17), opponent_ahead(0).\n    \n    % corri verso la porta avversaria\n    run_to_goal(5) :- player_has_ball, active_player_y(Y), Y < 160, Y > -160.\n    run_to_goal(4) :- player_has_ball, active_player_y(Y), Y > 160.\n    run_to_goal(6) :- player_has_ball, active_player_y(Y), Y < -160.\n    action(X) :- run_to_goal(X).\n    \n    \n    \n    % DIFESA\n    \n    % condizione di partenza : la palla non \u00e8 in nostro possesso\n    defense_move(X) :- ball_team(X), X != 0.\n    \n    % tattica 1: corri verso la palla se sei vicino ad essa\n    defense(1) :- defense_move(1), active_player_x(X), active_player_y(Y), ball_position_x(X1), ball_position(Y1), X < X1, X > X1 - 50, Y1 - Y < 20, Y1 - Y > -20.\n    \n    % tattica 2: corri verso la direzione in cui sta andando la palla se sei nella met\u00e0 campo avversaria\n    defense(2) :- defense_move(1), active_player_x(X), X > 0.\n    defense(2) :- defense_move(-1).\n    \n    % tattica 3: copri la porta\n    defense(3) :- defense_move(1).\n    \n    %not run_to_ball_position(0), not run_to_ball_direction(0).\n    \n    % calcolo tattica 1\n    x_dir(X, 1) :- defense(1), ball_position_x(Y), active_player_x(Z), X = Z - Y. \n    y_dir(X, 1) :- defense(1), ball_position_y(Y), active_player_y(Z), X = Z - Y. \n    \n    % calcolo tattica 2\n    x_dir(X, 2) :- defense(2), ball_position_x(Y), ball_direction_x(Y1), active_player_x(Z), X = Y + Y1 - Z.\n    y_dir(X, 2) :- defense(2), ball_position_y(Y), ball_direction_y(Y1), active_player_y(Z), X = Y + Y1 - Z.\n    \n    % calcolo tattica 3\n    x_dir(X, 3) :- defense(3), defense_vector_x(X).\n    y_dir(X, 3) :- defense(3), defense_vector_y(X).\n    \n    % applica tattica difensiva scelta : calcola direzione dove andare 1\n    dirsign_x(0, K) :- x_dir(X, K), X < -20.\n    dirsign_x(1, K) :- x_dir(X, K), X <= 20, X >= -20.\n    dirsign_x(2, K) :- x_dir(X, K), X > 20.\n    dirsign_y(0, K) :- y_dir(X, K), X < -20.\n    dirsign_y(1, K) :- y_dir(X, K), X <= 20, X >= -20.\n    dirsign_y(2, K) :- y_dir(X, K), X > 20.\n    \n    % applica tattica difensiva scelta : calcola direzione dove andare 2\n     % top left\n    direction(2, K) :- dirsign_y(0, K), dirsign_x(0, K).\n     % top\n    direction(3, K) :- dirsign_y(0, K), dirsign_x(1, K).\n     % top right\n    direction(4, K) :- dirsign_y(0, K), dirsign_x(2, K).\n     % left\n    direction(1, K) :- dirsign_y(1, K), dirsign_x(0, K).\n     % release direction\n    direction(15, K) :- dirsign_y(1, K), dirsign_x(1, K).\n     % right\n    direction(5, K) :- dirsign_y(1, K), dirsign_x(2, K).\n     % bottom left\n    direction(8, K) :- dirsign_y(2, K), dirsign_x(0, K).\n     % bottom\n    direction(7, K) :- dirsign_y(2, K), dirsign_x(1, K).\n     % bottom right\n    direction(6, K) :- dirsign_y(2, K), dirsign_x(2, K).\n    \n    % esegui azione difensiva\n    action(X) :- direction(X, K).\n    \n    \n    \n    % FILLER\n    \n    % azione filler quando non ci sono altre azioni disponibili\n    action(0).\n    \n    \n    \n    % MAIN\n    \n    % guess and check answer\n    {act(X)} :- action(X).\n    answer(X) :- act(X).\n    \n    % azione scelta deve essere unica\n    :- #count{X: act(X)} != 1.\n    \n    \n    \n    % OTTIMIZZAZIONE\n    \n    % azione nulla : priorit\u00e0 minima\n    :~ act(0). [25@5, act(0)]\n    \n    % corri verso la porta avversaria : priorit\u00e0 minore rispetto alle altre azioni d'attacco\n    :~ run_to_goal(X), act(X). [1@1, act(X)]\n    \n    % tattica difensiva 3 : priorit\u00e0 bassa\n    :~ act(X), direction(X, 3). [1@2, direction(X, 3)]\n    \n    % dribbling : priorit\u00e0 media\n    :~ not act(X), dribble(X). [1@2, dribble(X)]\n    \n    % tiro : priorit\u00e0 alta\n    :~ not act(14), action(14). [1@3, act(14)]\n    \n    % azione corsa o rilascio corsa : priorit\u00e0 massima\n    :~ not act(9), action(9). [1@4, act(9)]\n    :~ not act(10), action(10). [1@4, act(10)]\n    \n    \n    \"\"\"\n\n@human_readable_agent\ndef agent(obs):\n    \n    #inizializziamo il processo di grounding\/solving\n    ctl = clingo.Control()\n    \n    #ASP\n    ctl.add(\"base\", [], get_asp_program(obs))\n    \n    ctl.ground([(\"base\", [])])\n    ctl.configuration.solve.models=\"0\"\n    \n    models = []\n    \n    # little magic\n    with ctl.solve(yield_=True) as handle:\n         for model in handle:\n             models.append(model.symbols(atoms=True))\n    \n    #print(str(models[0]))\n    answer = find_answer_in_model(str(models))\n    action = find_action_in_answer(answer)\n    return action\n","4886ee64":"%%writefile agent.py\nfrom kaggle_environments.envs.football.helpers import *\nfrom math import sqrt\n\ndirections = [\n             [Action.TopLeft,      Action.Top,     Action.TopRight],\n             [Action.Left,        Action.Idle,        Action.Right],\n             [Action.BottomLeft, Action.Bottom, Action.BottomRight]\n             ]\n\ndef dirsign(x):\n    #se si trova molto vicino all'obiettivo\n    if abs(x) < 0.02:\n        return 1\n    #se si trova a destra dell'obiettivo\n    elif x < 0:\n        return 0\n    #se si trova a sinistra dell'obiettivo\n    else:\n        return 2\n    \ndef pallaAvanti(pos, ballPos):\n    return pos < ballPos\n\n#strategia difensiva\ndef defensiveMove(obs):\n    posX = obs['left_team'][obs['active']][0]\n    posY = obs['left_team'][obs['active']][1]\n    ballPosX = obs['ball'][0]\n    ballPosY = obs['ball'][1]\n    ballDirX = obs['ball_direction'][0]\n    ballDirY = obs['ball_direction'][1]\n    if posX < ballPosX and abs(posX - ballPosX) < 0.05 and abs(posY - ballPosY) < 0.02:\n        return runTowardsTheBall(posX, posY, ballPosX, ballPosY)\n    elif posX > 0:\n        return runTowardsTheBallDir(posX, posY, ballPosX, ballPosY, ballDirX, ballDirY)\n    else:\n        return copertura(posX, posY, ballPosX, ballPosY)\n    \n#tackle\ndef runTowardsTheBall(posX, posY, ballPosX, ballPosY):\n    xdir = dirsign(ballPosX - posX)\n    ydir = dirsign(ballPosY - posY)\n    return directions[ydir][xdir] \n    \n#anticipo\ndef runTowardsTheBallDir(posX, posY, ballPosX, ballPosY, ballDirX, ballDirY):\n    xdir = dirsign(ballPosX + (ballDirX * 12) - posX)\n    ydir = dirsign(ballPosY + (ballDirY * 12) - posY)\n    #print('ballDirX: ' + str(ballDirX))\n    #print('ballDirY: ' + str(ballDirY))\n    return directions[ydir][xdir]\n\n#copertura\ndef copertura(posX, posY, ballPosX, ballPosY):\n    vec_pgX = -1 - ballPosX\n    vec_pgY = - ballPosY\n    qX = -1 - vec_pgX + (vec_pgX * 0.2)\n    qY = - vec_pgY + (vec_pgY * 0.2)\n    xdir = dirsign(qX - posX)\n    ydir = dirsign(qY - posY)\n    return directions[ydir][xdir] \n\n#calcola il giocatore piu avanzato della squadra\ndef mostAdvancedPlayer(obs):\n    for i in range(11):\n        flag = True\n        for j in range(11):\n            if obs['left_team'][i][0] < obs['left_team'][j][0]:\n                flag = False\n        if flag == True:\n            return i\n    return None\n\n#verifica se il giocatore pi\u00f9 avanzato della squadra \u00e8 in fuorigioco\ndef atkInOffSide(obs):\n    atk = mostAdvancedPlayer(obs)\n    if atk == None:\n        return True\n    else:\n        oneBehind = False\n        for i in range(11):\n            if obs['right_team'][i][0] > obs['left_team'][atk][0]:\n                oneBehind = True\n    return oneBehind\n    \nenemyGoal = [1, 0]\n\n#area di tiro\nperfectRange = [[0.7, 1], [-0.16, 0.16]]\n\n#verifica se il giocatore si trova in una determinata zona del campo\ndef inside(pos, area):\n    return area[0][0] <= pos[0] <= area[0][1] and area[1][0] <= pos[1] <= area[1][1]\n\n@human_readable_agent\ndef agent(obs):\n    \n    goalkeeper = 0\n    controlled_player_pos = obs['left_team'][obs['active']]\n    \n    #se il portiere ha il pallone tra i piedi : rinvia\n    if controlled_player_pos == goalkeeper:\n        return Action.Shot\n    \n    #calcio di rigore\n    if obs[\"game_mode\"] == GameMode.Penalty:\n        return Action.Shot\n    \n    #calcio d'angolo\n    if obs[\"game_mode\"] == GameMode.Corner:\n        if controlled_player_pos[0] > 0:\n            return Action.HighPass\n        \n    #punizione\n    if obs[\"game_mode\"] == GameMode.FreeKick:\n        if controlled_player_pos[0] > 0.5 and abs(controlled_player_pos[1] < 0.2):\n            return Action.Shot\n        else:\n            return Action.LongPass\n        \n        \n    #se il giocatore non sta correndo\n    if (-0.4 < controlled_player_pos[0] < 0.3 or not (obs['right_team'][goalkeeper][0] - controlled_player_pos[0] < 0.35)) and Action.Sprint not in obs['sticky_actions']:\n        return Action.Sprint\n    #se il giocatore sta correndo ma \u00e8 gi\u00e0 in posizione molto avanzata\n    elif (controlled_player_pos[0] > 0.6 or obs['right_team'][goalkeeper][0] - controlled_player_pos[0] < 0.35) and Action.Sprint in obs['sticky_actions']:\n        return Action.ReleaseSprint\n    \n    \n    #fase di possesso (attacco)\n    if obs['ball_owned_player'] == obs['active'] and obs['ball_owned_team'] == 0:\n        goalkeeper = 0\n        \n        inSide = not atkInOffSide(obs)\n        \n        #se il giocatore \u00e8 in difesa e sta avanzando : lancio lungo\n        if -0.6 < controlled_player_pos[0] < -0.4 and pallaAvanti(controlled_player_pos[0], obs['ball'][0]):\n            return Action.HighPass\n        \n        #se il centravanti non \u00e8 in fuorigioco: passaggio filtrante DA FIXARE\n        if -0.1 < controlled_player_pos[0] < 0.1 and pallaAvanti(controlled_player_pos[0], obs['ball'][0]) and inSide:\n            return Action.LongPass\n            \n        #se il giocatore \u00e8 in una buona posizione per tirare \n        #e se la palla si trova pi\u00f9 avanti del giocatore : tira\n        elif inside(controlled_player_pos, perfectRange) and pallaAvanti(controlled_player_pos[0], obs['ball'][0]):\n            return Action.Shot\n        \n        #se il giocatore \u00e8 vicino al portiere avversario : finalizza\n        elif obs['right_team'][goalkeeper][0] - controlled_player_pos[0] < 0.3: \n            \n            #se il giocatore \u00e8 sulla fascia : crossa\n            if abs(controlled_player_pos[1]) > 0.2:\n                if controlled_player_pos[1] > 0.2 and (controlled_player_pos[1] - obs['ball'][1]) > 0:\n                    return Action.ShortPass\n                elif controlled_player_pos[1] < -0.2 and (controlled_player_pos[1] - obs['ball'][1]) < 0:\n                    return Action.ShortPass\n                elif controlled_player_pos[1] > 0.2:\n                    return Action.Top\n                elif controlled_player_pos[1] < -0.2:\n                    return Action.Bottom\n                \n            #se il giocatore non \u00e8 sulla fascia : tira\n            else:\n                return Action.Shot\n        \n        #il giocatore corre verso la porta avversaria\n        else:\n            #se il giocatore \u00e8 piu o meno sulla linea della porta\n            if abs(controlled_player_pos[1]) < 0.10:\n                return Action.Right\n            #se deve correggere la traiettoria di corsa\n            else:\n                xdir = dirsign(enemyGoal[0] - controlled_player_pos[0])\n                ydir = dirsign(enemyGoal[1] - controlled_player_pos[1])\n                return directions[ydir][xdir]\n        \n        \n        \n    #fase di non possesso (difesa)\n    else:\n        return defensiveMove(obs)","f796e2eb":"# Set up the Environment.\nfrom kaggle_environments import make\nenv = make(\"football\", configuration={\"save_video\": True, \"scenario_name\": \"11_vs_11_kaggle\", \"running_in_notebook\": True}, debug=True)\noutput = env.run([\"\/kaggle\/working\/submission.py\", \"\/kaggle\/working\/agent.py\"])[-1]\nprint('Left player: reward = %s, status = %s, info = %s' % (output[0]['reward'], output[0]['status'], output[0]['info']))\nprint('Right player: reward = %s, status = %s, info = %s' % (output[1]['reward'], output[1]['status'], output[1]['info']))\nenv.render(mode=\"human\", width=800, height=600)","44cae636":"# Play Agent - ASP","a36f8334":"# Play","4129813b":"#  **Install clingo**","6dbab7b8":"# Install GFootball Environment\n\nmake sure to set internet on","0e2ea4bc":"# Setup kaggle notebook","ff6ae58f":" # Custom Opponent\n very strong"}}