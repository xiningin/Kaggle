{"cell_type":{"df2dc5ad":"code","1e0a49b1":"code","c6099dfa":"code","bcc9ef53":"code","6cffb359":"code","63afd14d":"code","35a1db4f":"code","e13dff1e":"code","95f45e96":"code","56217014":"code","65a80828":"code","da46f0a4":"code","98a1a322":"code","3d0e98e1":"code","0a6e456c":"code","b452e7e2":"code","5e13d967":"code","5efe06d1":"code","eab7f494":"code","459c329e":"code","f68fc8d5":"code","e634bdf9":"markdown","fa3e441d":"markdown","f499aea2":"markdown","85ec7f28":"markdown","10aa5b12":"markdown","3d7b0354":"markdown","d6c6b6db":"markdown","e3190451":"markdown","81088ee9":"markdown","deff1743":"markdown","4cc5c98c":"markdown","76557317":"markdown","f33156c0":"markdown","757bf9f8":"markdown","b2673914":"markdown","39dc4eb7":"markdown","ddfbf30b":"markdown","9bf902e6":"markdown","c21412c1":"markdown","e2289753":"markdown","12260ef8":"markdown","1bcff17c":"markdown","9fe60ca6":"markdown","fb07df6e":"markdown","630e495e":"markdown","c2fe84ed":"markdown","75f1ea1e":"markdown","e0faee96":"markdown","6e4b783b":"markdown","f57ad5d9":"markdown","ecd9de11":"markdown","529f6a7d":"markdown","3609e572":"markdown","e87067a5":"markdown","3905b5b0":"markdown","52293ed9":"markdown"},"source":{"df2dc5ad":"# !wget https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DL0321EN\/data\/concrete_data_week4.zip","1e0a49b1":"# !unzip concrete_data_week4.zip","c6099dfa":"import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.applications.resnet50 import preprocess_input as preprocess_resnet50_input\nfrom tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.applications.vgg16 import preprocess_input as preprocess_vgg16_input\n","bcc9ef53":"params = {\n    'image_size': 224,\n    'batch_size': 100,\n    'num_epochs': 2,\n    'class_mode': 'categorical',\n    'num_classes': 2,\n    'shuffle': True}","6cffb359":"def batch_generator(path, preprocess_input, params):\n    data_generator = ImageDataGenerator(\n        preprocessing_function=preprocess_input)\n    \n    generator = data_generator.flow_from_directory(\n        path,\n        target_size=(params['image_size'], \n                     params['image_size']),\n        batch_size=params['batch_size'],\n        class_mode=params['class_mode'],\n        shuffle=params['shuffle'])\n    \n    return generator\n","63afd14d":"train_generator = batch_generator(\n    '..\/input\/concrete-data-wk4\/concrete_data_week4\/train',\n    preprocess_vgg16_input,\n    params)\nvalidation_generator = batch_generator(\n    '..\/input\/concrete-data-wk4\/concrete_data_week4\/valid',\n    preprocess_vgg16_input,\n    params)\nsteps_per_epoch_training = len(train_generator)\nsteps_per_epoch_validation = len(validation_generator)","35a1db4f":"model = keras.Sequential()\n\nmodel.add(VGG16(weights = 'imagenet', include_top = False, pooling = 'avg'))\nmodel.layers[0].trainable = False\n\nmodel.add(Dense(params['num_classes'], activation = 'softmax'))\n\nmodel.summary()","e13dff1e":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","95f45e96":"%%script false --no-raise-error\nfit_history = model.fit(\n    train_generator,\n    steps_per_epoch=steps_per_epoch_training,\n    epochs=params['num_epochs'],\n    validation_data=validation_generator,\n    validation_steps=steps_per_epoch_validation,\n    verbose=1,\n)","56217014":"%%script false --no-raise-error\nmodel.save('classifier_vgg16_model.h5')","65a80828":"resnet50 = keras.models.load_model('..\/input\/classifier-resnet50\/classifier_resnet_model.h5')\nvgg16 = keras.models.load_model('..\/input\/classifier-vgg16\/classifier_vgg16_model.h5')\nprint(resnet50.summary())\nprint(vgg16.summary())","da46f0a4":"params['shuffle'] = False\ntest_resnet_generator = batch_generator(\n    '..\/input\/concrete-data-wk4\/concrete_data_week4\/test',\n    preprocess_resnet50_input, params)\ntest_vgg16_generator = batch_generator(\n    '..\/input\/concrete-data-wk4\/concrete_data_week4\/test',\n    preprocess_vgg16_input, params)","98a1a322":"result_resnet = resnet50.evaluate_generator(\n    test_resnet_generator,\n    verbose=1)","3d0e98e1":"result_vgg16 = vgg16.evaluate_generator(\n    test_vgg16_generator,\n    verbose=1)","0a6e456c":"print(f\"Accuracy: {result_vgg16[1]}\")\nprint(f\"Loss: {result_vgg16[0]}\")","b452e7e2":"print(f\"Accuracy: {result_resnet[1]}\")\nprint(f\"Loss: {result_resnet[0]}\")","5e13d967":"import numpy as np\n\ndef get_predictions(predictions):\n    for pred in predictions:\n        position = np.argmax(pred)\n        if position == 1:\n            print(\"Positive\")\n        if position == 0:\n            print(\"Negative\")","5efe06d1":"resnet_prediction = resnet50.predict_generator(\n    test_resnet_generator,\n    verbose=1)","eab7f494":"vgg16_prediction = vgg16.predict_generator(\n    test_vgg16_generator,\n    verbose=1)","459c329e":"get_predictions(resnet_prediction[:5])","f68fc8d5":"get_predictions(vgg16_prediction[:5])","e634bdf9":"# 3. Evaluate the models\nThe method ```evaluate_generator``` is actually deprecated. Currently, ```evaluate``` handles generators as argument.","fa3e441d":"# 1. Make predictions\n\nThe method ```predict_generator``` is actually deprecated. Currently, ```predict``` handles generators as argument.","f499aea2":"<hr>\n\nCopyright &copy; 2020 [IBM Developer Skills Network](https:\/\/cognitiveclass.ai\/?utm_source=bducopyrightlink&utm_medium=dswb&utm_campaign=bdu). This notebook and its source code are released under the terms of the [MIT License](https:\/\/bigdatauniversity.com\/mit-license\/).","85ec7f28":"In this lab, you will build an image classifier using the VGG16 pre-trained model, and you will evaluate it and compare its performance to the model we built in the last module using the ResNet50 pre-trained model. Good luck!","10aa5b12":"In this part, you will evaluate your deep learning models on a test data. For this part, you will need to do the following:\n\n1. Load your saved model that was built using the ResNet50 model. \n2. Construct an ImageDataGenerator for the test set. For this ImageDataGenerator instance, you only need to pass the directory of the test images, target size, and the **shuffle** parameter and set it to False.\n3. Use the **evaluate_generator** method to evaluate your models on the test data, by passing the above ImageDataGenerator as an argument. You can learn more about **evaluate_generator** [here](https:\/\/keras.io\/models\/sequential\/).\n4. Print the performance of the classifier using the VGG16 pre-trained model.\n5. Print the performance of the classifier using the ResNet pre-trained model.\n","3d7b0354":"Use the <code>wget<\/code> command to download the data for this assignment from here: https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DL0321EN\/data\/concrete_data_week4.zip","d6c6b6db":"## Part 1","e3190451":"In this model, you will predict whether the images in the test data are images of cracked concrete or not. You will do the following:\n\n1. Use the **predict_generator** method to predict the class of the images in the test data, by passing the test data ImageDataGenerator instance defined in the previous part as an argument. You can learn more about the **predict_generator** method [here](https:\/\/keras.io\/models\/sequential\/).\n2. Report the class predictions of the first five images in the test set. You should print something list this:\n\n<center>\n    <ul style=\"list-style-type:none\">\n        <li>Positive<\/li>  \n        <li>Negative<\/li> \n        <li>Positive<\/li>\n        <li>Positive<\/li>\n        <li>Negative<\/li>\n    <\/ul>\n<\/center>","81088ee9":"After you unzip the data, you fill find the data has already been divided into a train, validation, and test sets.","deff1743":"### **NOTE**: \nThe model is not run here, it was trained in a previous session. The model is reloaded in Section 2.","4cc5c98c":"# 5. Compile the Model","76557317":"## Part 3","f33156c0":"## Introduction\n","757bf9f8":"Use the following cells to create your classifier.","b2673914":"In this part, you will design a classifier using the VGG16 pre-trained model. Just like the ResNet50 model, you can import the model <code>VGG16<\/code> from <code>keras.applications<\/code>.","39dc4eb7":"This notebook is part of a course on **Coursera** called *AI Capstone Project with Deep Learning*. If you accessed this notebook outside the course, you can take this course online by clicking [here](https:\/\/cocl.us\/DL0321EN_Coursera_Week4_LAB1).","ddfbf30b":"# 2. Data Generator\n\nSee the function used ```batch_generator``` in the first section of the notebook.","9bf902e6":"## 2.2. Defining Useful Functions","c21412c1":"## Table of Contents\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n\n<font size = 3>    \n\n1. <a href=\"#item41\">Download Data \n2. <a href=\"#item42\">Part 1<\/a>\n3. <a href=\"#item43\">Part 2<\/a>  \n4. <a href=\"#item44\">Part 3<\/a>  \n\n<\/font>\n    \n<\/div>","e2289753":"## Download Data","12260ef8":"<a href=\"https:\/\/cognitiveclass.ai\"><img src = \"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/Logos\/organization_logo\/organization_logo.png\" width = 400> <\/a>\n\n<h1 align=center><font size = 5>Peer Review Final Assignment<\/font><\/h1>","1bcff17c":"# 3. Create Generators ","9fe60ca6":"# 4. VGG16 Performance","fb07df6e":"# 1. Libraries Setup","630e495e":"Use the following cells to download the data.","c2fe84ed":"# 5. ResNet50 Performance","75f1ea1e":"## 2.1 Defining Parameters","e0faee96":"Use the following cells to make your predictions.","6e4b783b":"# 2. Class predictions report","f57ad5d9":"Use the following cells to evaluate your models.","ecd9de11":"<a id=\"item44\"><\/a>","529f6a7d":"# 4. Create DeepLearning Model","3609e572":"### Thank you for completing this lab!\n\nThis notebook was created by Alex Aklson.","e87067a5":"You will essentially build your classifier as follows:\n1. Import libraries, modules, and packages you will need. Make sure to import the *preprocess_input* function from <code>keras.applications.vgg16<\/code>.\n2. Use a batch size of 100 images for both training and validation.\n3. Construct an ImageDataGenerator for the training set and another one for the validation set. VGG16 was originally trained on 224 \u00d7 224 images, so make sure to address that when defining the ImageDataGenerator instances.\n4. Create a sequential model using Keras. Add VGG16 model to it and dense layer.\n5. Compile the mode using the adam optimizer and the categorical_crossentropy loss function.\n6. Fit the model on the augmented data using the ImageDataGenerators.","3905b5b0":"# 1. Load models back\nThis notebook has been executed in different sessions hence, both modules will be uploaded again","52293ed9":"## Part 2"}}