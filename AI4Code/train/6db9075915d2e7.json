{"cell_type":{"58ab5e8f":"code","165dba38":"code","2651b234":"code","d0061544":"code","868c895a":"code","36bd39a8":"code","c44acd47":"code","70bc4400":"code","ab0f773d":"code","b995f8ba":"code","a4af3c06":"code","f192cf5e":"code","c365c585":"code","2b7116e8":"code","2f562fcb":"code","3c45b204":"code","1a5255e8":"code","11f4631b":"code","90e3c87b":"code","887f819d":"code","e1d03f98":"code","bf48d58e":"code","4a26d8cc":"code","71e05328":"code","15f55edc":"markdown","472d42cf":"markdown","a35d4883":"markdown","014c08aa":"markdown","40fe57c9":"markdown","17f9c94d":"markdown","a0a98e09":"markdown","661aa71d":"markdown","77aec017":"markdown","5a30d8a5":"markdown","b631d183":"markdown","3f734650":"markdown","8e24a164":"markdown"},"source":{"58ab5e8f":"#In this challenge, we ask you to complete the analysis of what sorts of people were likely to survive.\n#In particular, we ask you to apply the tools of machine learning to predict which passengers survived the tragedy.","165dba38":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","2651b234":"train_data = pd.read_csv(\"..\/input\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/test.csv\")","d0061544":"train_data.head()","868c895a":"train_data.info()","36bd39a8":"train_data.describe()","c44acd47":"train_data.drop(columns=[\"PassengerId\"]).hist(bins=40, figsize=(15,12))","70bc4400":"train_data.Embarked.value_counts()","ab0f773d":"corr_matrix = train_data.corr()\ncorr_matrix[\"Survived\"].sort_values(ascending=False)","b995f8ba":"from sklearn.base import BaseEstimator, TransformerMixin\n\n# A class to select numerical or categorical columns \n# since Scikit-Learn doesn't handle DataFrames yet\nclass DataFrameSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, attribute_names):\n        self.attribute_names = attribute_names\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n        return X[self.attribute_names]","a4af3c06":"from sklearn.impute import SimpleImputer\n\nnum_imputer = SimpleImputer(strategy=\"median\")","f192cf5e":"class MostFrequentImputer(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        self.most_frequent_ = pd.Series([X[c].value_counts().index[0] for c in X], index=X.columns)\n        return self\n    def transform(self, X, y=None):\n        return X.fillna(self.most_frequent_)","c365c585":"from sklearn.preprocessing import OneHotEncoder\n\nencoder = OneHotEncoder(sparse=False)","2b7116e8":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()","2f562fcb":"from sklearn.pipeline import Pipeline\n\nnum_attribs = [\"Age\", \"SibSp\", \"Parch\", \"Fare\"]\n\nnum_pipeline = Pipeline([\n    ('select_num', DataFrameSelector(num_attribs)),\n    ('imputer', num_imputer),\n    ('scaler', scaler)\n])","3c45b204":"cat_attribs = [\"Pclass\", \"Sex\", \"Embarked\"]\n\ncat_pipeline = Pipeline([\n        (\"select_cat\", DataFrameSelector(cat_attribs)),\n        (\"imputer\", MostFrequentImputer()),\n        ('encoder', encoder)\n    ])","1a5255e8":"from sklearn.pipeline import FeatureUnion\n\nfull_pipeline = FeatureUnion(transformer_list=[\n    ('num_pipeline', num_pipeline),\n    ('cat_pipeline', cat_pipeline)\n])","11f4631b":"X_train = full_pipeline.fit_transform(train_data)\ny_train = train_data['Survived']","90e3c87b":"from sklearn.model_selection import cross_val_score","887f819d":"from sklearn.ensemble import RandomForestClassifier\n\nrf_clf = RandomForestClassifier(random_state=11)\nrf_clf.fit(X_train, y_train)\ncross_val_score(rf_clf, X_train, y_train, cv=10).mean()","e1d03f98":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = { \n    'n_estimators': [100, 200, 300, 400],\n    'max_features': ['auto', 'sqrt', 'log2'],\n    'max_depth' : [2, 4, 6, 8],\n    'criterion' :['gini', 'entropy']\n}\n\ngrid_search = GridSearchCV(estimator=rf_clf, param_grid=param_grid, cv=5)\ngrid_search.fit(X_train, y_train)","bf48d58e":"grid_search.best_params_","4a26d8cc":"grid_search.best_score_","71e05328":"from sklearn.metrics import accuracy_score\n\nX_test = full_pipeline.fit_transform(test_data)\nPassengerId = test_data['PassengerId']\n\ny_pred = grid_search.predict(X_test)\nsubmission = pd.DataFrame({'PassengerId' : PassengerId,\n                          'Survived' : y_pred})\nsubmission.head()","15f55edc":"### Gain Insights","472d42cf":"#### Pipeline","a35d4883":"### Description","014c08aa":"#### Viz","40fe57c9":"## What is Rose's PassengerId?","17f9c94d":"### Getting the Data","a0a98e09":"### Preparing the Data \/ Pipeline","661aa71d":"#### Data Cleaning [ Selector\/Imputer ]","77aec017":"#### Correlations","5a30d8a5":"#### Feature Scaling [ Normalization\/Standarization ]","b631d183":"#### Text and Categories attributes handling [ Encoding ]","3f734650":"### Selecting & Training the Model","8e24a164":"### Understanding the Data"}}