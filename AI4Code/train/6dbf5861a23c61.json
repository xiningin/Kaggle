{"cell_type":{"bc2bff38":"code","ebc80695":"code","8a2ccee3":"code","cd2b30c5":"code","e99ff917":"code","48c6f227":"code","64ea25a6":"code","93b5032d":"code","7d3733c6":"code","d89d0ca2":"code","7b4906e5":"code","0469e941":"code","9c27503d":"code","3099dae0":"markdown"},"source":{"bc2bff38":"import pandas as pd\nimport matplotlib.pyplot as plt","ebc80695":"dtype = {\n    'Call Number' : 'str', \n    'Incident Number' : 'str', \n    'Station Area' : 'str', \n    'Box' : 'str', \n    'Fire Prevention District' : 'str', \n    'Supervisor District' : 'str',\n    'Call Type Group' : 'category'\n}\ndf = pd.read_csv('..\/input\/fire-department-calls-for-service.csv', dtype = dtype, na_values = ['NaN'])\n\ndate_time_cols = ['Call Date', 'Watch Date', 'Received DtTm', 'Entry DtTm', 'Dispatch DtTm', 'Response DtTm', 'On Scene DtTm', 'Transport DtTm', 'Transport DtTm', 'Hospital DtTm', 'Available DtTm']\nfor col in date_time_cols:\n    df[col] =  pd.to_datetime(df[col], format='%Y-%m-%dT%H:%M:%S')","8a2ccee3":"import folium\nimport json","cd2b30c5":"m = folium.Map(location = [37.77, -122.42], zoom_start = 13)\n\ndf_call_date = df.set_index('Received DtTm')\nlastest_12_hour = df_call_date.last('12h')\n\ncolor_map = {'Potentially Life-Threatening': 'orange', 'Non Life-threatening': 'green', 'Alarm': 'purple', 'Fire': 'red'}\nicon_map = {'Potentially Life-Threatening': 'heart', 'Non Life-threatening': 'info-sign', 'Alarm': 'exclamation-sign', 'Fire': 'fire'}\n\nfor index, row in lastest_12_hour.iterrows():\n    json_str = row['Location'].replace('\"', \"*\").replace('\\'', '\"').replace('False', '\"False\"')\n    json_obj = json.loads(json_str)\n    longitude = float(json_obj['longitude'])\n    latitude = float(json_obj['latitude'])\n    color = color_map[row['Call Type Group']]\n    icon = icon_map[row['Call Type Group']]\n    tooltip = index.strftime('%Y-%m-%dT%H:%M:%S')\n    popup = 'Call Type Group: ' + row['Call Type Group'] + '<br>Call Type: ' + row['Call Type'] + '<br>Received Time: ' + index.strftime('%Y-%m-%dT%H:%M:%S')\n    folium.Marker([latitude, longitude], popup = popup, tooltip = tooltip, icon = folium.Icon(color = color, icon = icon)).add_to(m)\n\nlegend_html = '''\n<div style=\"position:fixed;bottom:50px;left:50px;width:250px;height:100px;border:2px solid grey;z-index:9999;font-size:14px;background-color:lightblue;\">\n&nbsp;Legend<br>\n&nbsp; Potentially Life-Threatening &nbsp; <i class='fa-rotate-0 glyphicon glyphicon-heart  icon-white' style='color:orange'><\/i><br>\n&nbsp; Non Life-threatening &nbsp; <i class='fa-rotate-0 glyphicon glyphicon-info-sign  icon-white' style='color:green'><\/i><br>\n&nbsp; Fire &nbsp; <i class='fa-rotate-0 glyphicon glyphicon-fire  icon-white' style='color:red'><\/i><br>\n&nbsp; Alarm &nbsp; <i class='fa-rotate-0 glyphicon glyphicon-exclamation-sign  icon-white' style='color:purple'><\/i>\n<\/div>\n'''\n\nm.get_root().html.add_child(folium.Element(legend_html))\nm","e99ff917":"# count of calls per month\ndf_by_date = df['Call Date'].groupby([df['Call Date'].dt.year, df['Call Date'].dt.month, df['Call Date'].dt.day]).agg('count')\n\n# convert to dataframe\ndf_by_date = df_by_date.to_frame()\n\n# move date month from index to column\ndf_by_date['date'] = df_by_date.index\n\n# rename column\ndf_by_date = df_by_date.rename(columns = {df_by_date.columns[0] : 'calls'})\n\n# re-parse dates\ndf_by_date['date'] = pd.to_datetime(df_by_date['date'], format = '(%Y, %m, %d)')\n\n# remove index\ndf_by_date = df_by_date.reset_index(drop = True)\n\n# get date of meet\ndf_by_date['date'] = df_by_date.date.dt.date","48c6f227":"import plotly.plotly as py\nimport plotly.graph_objs as go\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n\n# sepcify that we want a scatter plot with, with date on the x axis and meet on the y axis\ndata = [go.Scatter(x = df_by_date.date, y = df_by_date.calls)]\n\n# specify the layout of our figure\nlayout = dict(title = \"Number of Calls per Month\",\n              xaxis = dict(title = 'Date', ticklen =  5, zeroline = False))\n\n# create and show our figure\nfig = dict(data = data, layout = layout)\niplot(fig)","64ea25a6":"print('There are', df.shape[0], 'rows with', df.shape[1], 'columns')\nprint('The column names:')\ndf.columns.tolist()","93b5032d":"print('The first 5 rows:')\ndf.head()","7d3733c6":"print('The statistic of numeric columns')\ndf.describe()","d89d0ca2":"print('Data type for each column:')\ndf.dtypes","7b4906e5":"for col in df:\n    print('Column', col, 'has', len(df[col].unique()), 'unique values')","0469e941":"print('Call Types:')\nprint(df['Call Type'].unique())\nprint('Call Type Groups:')\nprint(df['Call Type Group'].unique())\nprint('Unit Types:')\nprint(df['Unit Type'].unique())","9c27503d":"df['Call Type'].value_counts().plot(kind = 'bar', title = 'Call Type', logy = True)\nplt.show()\n\ndf['Call Type Group'].value_counts().plot(kind = 'bar', title = 'Call Type Group')\nplt.show()\n\ndf['Unit Type'].value_counts().plot(kind = 'bar', title = 'Unit Type')\nplt.show()","3099dae0":"# Last 12 hours calls"}}