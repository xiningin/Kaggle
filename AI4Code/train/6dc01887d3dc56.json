{"cell_type":{"eabaa127":"code","92f0861b":"code","17a56dfb":"code","7f0e2db8":"code","4703ca36":"code","15897243":"code","8ebd69c0":"code","f0c28e95":"code","a65212b4":"code","7c3a3318":"code","1131ddfd":"code","46748c2b":"code","477c48d0":"code","9b5d7c8e":"code","ac01c274":"code","91117a9a":"code","34c311e4":"code","53260765":"code","59dc2862":"code","80c1adfd":"code","6e1c082c":"code","20ad7fef":"code","88f45005":"code","435f2265":"code","6974fc94":"code","b4a2cb28":"code","c9d35a7d":"code","2e0d4c95":"code","dbc79936":"code","824b74fc":"code","c18da5d4":"code","3bbf8f91":"markdown","2133dc0a":"markdown","2192d482":"markdown","3c8bcc11":"markdown","e2132d04":"markdown"},"source":{"eabaa127":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","92f0861b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport re\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nstop_words = list(set(stopwords.words('english')))\nstop_words.extend(['CA','ca','!','@','#','$','%','&','*','(',')',',','.','?','\/','{','}','[',']'])","17a56dfb":"train = pd.read_csv(\"..\/input\/nlp-getting-started\/train.csv\")\ntest = pd.read_csv(\"..\/input\/nlp-getting-started\/test.csv\")","7f0e2db8":"train.head()","4703ca36":"train['target'].value_counts()","15897243":"train['text'][2]","8ebd69c0":"train[train.keyword.notna()]['keyword'].values\n# for x in train[train.keyword.notna()]['keyword'].values:\n#     print(x.replace('%20',' '))","f0c28e95":"train['keyword'].isna().sum()","a65212b4":"kws= list(train[train.keyword.notna()]['keyword'].values)\n\nfor x,y in zip(train.loc[train.keyword.isna(),'text'].head(10),train.loc[train.keyword.isna(),'keyword']):\n#     for y in kws:\n#         if y in x:\n#             print(y)\n#             train[train.text==x]['keyword'] = y\n    print(x,y)    \n    ","7c3a3318":"for x in train.loc[train.keyword.isna(),'text']:\n    for y in kws:\n        if y.lower() in x.lower():\n            print(y)\n            train.loc[train.text==x,'keyword'] = y\n            break","1131ddfd":"train['keyword'].isna().sum()","46748c2b":"for x in train.loc[train.keyword.isna(),'text']:\n    print(x.lower())","477c48d0":"for x in train.loc[train.keyword.isna(),'text']:\n    if 'heat wave' in x.lower():\n        train.loc[train.text==x,'keyword'] = 'heat wave'\n    elif 'oil spill' in x.lower():\n        train.loc[train.text==x,'keyword'] = 'oil spill'\n        ","9b5d7c8e":"train.keyword.isna().sum()","ac01c274":"for x in train.loc[train.keyword.isna(),'text']:\n    print(x.lower(),train.loc[train.text==x,'target'])","91117a9a":"train['keyword'] = train['keyword'].fillna('general')","34c311e4":"train['keyword'].isna().sum()","53260765":"train.head()","59dc2862":"train.loc[train['location'].isna(),'text']","80c1adfd":"train['location'].isna().sum()","6e1c082c":"train.shape","20ad7fef":"train['text'][0][0]","88f45005":"locs = list(train.loc[train.location.notna(),'location'].values)\n\n\nfor x in train.loc[train['location'].isna(),'text']:\n    for y in locs:\n        if y.lower() in word_tokenize(x.lower()) and y.lower() not in stop_words:\n            train.loc[train['text']==x,'location'] = y\n            \n            break\n        \n    ","435f2265":"train.location.isna().sum()","6974fc94":"train.to_csv('modified1.csv')","b4a2cb28":"train.loc[train['location'].isna(),'text']","c9d35a7d":"train['location'] = train['location'].fillna('unknown')","2e0d4c95":"train.location.isna().any()","dbc79936":"train.head()","824b74fc":"ids = train['id']\ntrain.drop(['id'],axis=1,inplace=True)","c18da5d4":"train.head()","3bbf8f91":"Since we've extracted the keywords,let's remove the #,@ from text so that few locations in #,@ can be extracted","2133dc0a":"Now that we've filled the keywords of most of disaster tweets,the others don't really matter\n\nStill we've countable number(3) of disaster tweets left without keywords of which we can manually fill 2 of them with heat wave ;)","2192d482":"Yeah ! We've filled NaN values with appropraite values in keywords","3c8bcc11":"Obviously, the above method wasn't accurate as many locations weren't appropriate. But most of the irrelevant entries we've made are for non disaster tweets while disastrous tweets got proper location entries. So,it won't degrade our model performance","e2132d04":"So around 5000 locations are identified. We'll use them to try fill the unknown locations"}}