{"cell_type":{"1d960045":"code","eeb8d169":"code","5e0dafae":"code","358b9e59":"code","6629de6a":"code","46882bfa":"code","b11736b7":"code","8eda5e2c":"code","ed5ddfa7":"code","ee057387":"code","2dbbe88e":"code","af56a692":"code","00f7f850":"code","40c810bf":"code","8aa5587b":"code","3f143396":"code","e0e0a00d":"code","88e4634e":"code","db57be04":"code","3d8112fb":"code","98549f40":"code","c24485c4":"code","c28bd575":"code","8416280d":"code","a38cd107":"code","46ff2445":"code","85a84a02":"code","4ceb0602":"code","283cdf4d":"code","76ff549c":"code","653d5a70":"code","1fc5101c":"code","61f22c5e":"code","1dad5439":"markdown"},"source":{"1d960045":"#importing the necessary libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import Imputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nimport statsmodels.api as sm\nimport warnings\nwarnings.filterwarnings('ignore')","eeb8d169":"#reading the datasets into dataframes\n\ndf_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")","5e0dafae":"df_train.head(10)","358b9e59":"df_train.describe()","6629de6a":"df_train.isnull().sum()*100\/len(df_train)","46882bfa":"#imputing median for missing 'Age' values\n\nmed_imputer = Imputer(missing_values='NaN', strategy='median', axis=0)\ndf_train['Age'] = med_imputer.fit_transform(df_train[['Age']])","b11736b7":"#mapping age values to categories\n\ndef age_map(x):\n    if(x <= 12):\n        return \"Kid\"\n    elif(x >= 13 and x <= 19):\n        return \"Teen\"\n    elif(x >= 19 and x < 70):\n        return \"Adult\"\n    else:\n        return \"Senior\"\ndf_train['Age'] = df_train['Age'].apply(lambda x: age_map(x))","8eda5e2c":"#processing 'Cabin' and 'Embarked' columns\n\ndf_train['Cabin'].fillna('U', inplace=True)\ndf_train['Cabin'] = df_train['Cabin'].apply(lambda x: x[0])\n\ndf_train['Embarked'].fillna('S', inplace=True)","ed5ddfa7":"#converting 'Fare' values to categorical\n\ndf_train['Fare'] = pd.cut(df_train['Fare'], bins=[-1, 7, 11, 15, 22, 40, 520], labels=[1, 2, 3, 4, 5, 6])","ee057387":"df_train.drop(['Ticket', 'Name'], axis=1, inplace=True)","2dbbe88e":"df_train.head()","af56a692":"fig, ax = plt.subplots(1,2,figsize=(10,5))\nsns.countplot(df_train['Age'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Age'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency of each age group\")\nax[1].title.set_text(\"Survived: Age Group\")","00f7f850":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Sex'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Sex'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Sex\")\nax[1].title.set_text(\"Survived: Sex\")","40c810bf":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Pclass'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Pclass'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Pclass\")\nax[1].title.set_text(\"Survived: Pclass\")","8aa5587b":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['SibSp'], data=df_train, ax=ax[0])\nsns.countplot(df_train['SibSp'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: SibSp\")\nax[1].title.set_text(\"Survived: SibSp\")","3f143396":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Embarked'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Embarked'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Embarked\")\nax[1].title.set_text(\"Survived: Embarked\")\n","e0e0a00d":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Parch'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Parch'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Parch\")\nax[1].title.set_text(\"Survived: Parch\")","88e4634e":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Cabin'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Cabin'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Cabin\")\nax[1].title.set_text(\"Survived: Cabin\")","db57be04":"#LabelEncoder\nLE = LabelEncoder()\n\n#label encoding the remaining categorical and continous variables\ndf_train['Sex'] = LE.fit_transform(df_train['Sex'])\ndf_train['Cabin'] = LE.fit_transform(df_train['Cabin'])\ndf_train['Embarked'] = LE.fit_transform(df_train['Embarked'])\ndf_train['Age'] = LE.fit_transform(df_train['Age'])","3d8112fb":"#plotting a heatmap of the train set\n\nplt.figure(figsize=(10,10))\nsns.heatmap(df_train.corr(), xticklabels = df_train.columns.values, yticklabels = df_train.columns.values, annot=True, cmap=\"YlGnBu\")","98549f40":"df_train.head(10)","c24485c4":"#sorting PassendgerId in ascending order\ndf_train.sort_values(by=['PassengerId'], inplace=True)","c28bd575":"#Splitting the train set into dependent and independent variables\ny = df_train['Survived']\nX = df_train.drop('Survived', axis = 1)\n\n#converting 'Fare' values to int64 type\nX['Fare'] = X['Fare'].astype('int64')","8416280d":"#train-test split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size = 0.6, test_size = 0.4, random_state=100 )","a38cd107":"#creating a LogisticRegression object and generate the model\nlr = LogisticRegression()\nmodel = lr.fit(X_train, y_train)","46ff2445":"#making predictions on validation set\ny_preds = model.predict(X_valid)","85a84a02":"#accuracy score of the logistic regression model\nlr_score = accuracy_score(y_valid, y_preds)\nprint(lr_score)","4ceb0602":"df_test.head()","283cdf4d":"#imputing missing values in 'Age' with the median\nage_imputer = Imputer(missing_values='NaN', strategy='median', axis=0)\ndf_test['Age'] = age_imputer.fit_transform(df_test[['Age']])\n\n#converting age values to categorical values\ndf_test['Age'] = df_test['Age'].apply(lambda x: age_map(x))\n\n#processing Cabin and Embarked columns\ndf_test['Cabin'].fillna('U', inplace=True)\ndf_test['Cabin'] = df_test['Cabin'].apply(lambda x: x[0])\n\ndf_test['Embarked'].fillna('S', inplace=True)\n\n#imputing missing values in 'Fare' with the mean\nfare_imputer = Imputer(missing_values='NaN', strategy='mean', axis=0)\ndf_test['Fare'] = fare_imputer.fit_transform(df_test[['Fare']])\n\n#converting 'Fare' values to categorical\ndf_test['Fare'] = pd.cut(df_test['Fare'], bins=[-1, 7, 11, 15, 22, 40, 520], labels=[1, 2, 3, 4, 5, 6])\n\n#label encoding the remaining categorical and continous variables\ndf_test['Sex'] = LE.fit_transform(df_test['Sex'])\ndf_test['Cabin'] = LE.fit_transform(df_test['Cabin'])\ndf_test['Embarked'] = LE.fit_transform(df_test['Embarked'])\ndf_test['Age'] = LE.fit_transform(df_test['Age'])\n\n\n#converting 'Fare' values to int64 type\ndf_test['Fare'] = df_test['Fare'].astype('int64')\n\n#dropping Name and Ticket columns from the test set\ndf_test.drop(['Name','Ticket'], axis=1, inplace=True)","76ff549c":"df_test.head()","653d5a70":"#Sorting the PassengerId in ascending order\ndf_test.sort_values(by=['PassengerId'], inplace=True)","1fc5101c":"#making predictions on the test set\ny_test_pred = model.predict(df_test)","61f22c5e":"#write to output file\noutput = pd.DataFrame({'PassengerId': df_test['PassengerId'], 'Survived': y_test_pred})\noutput.to_csv(\"submission.csv\", index=False)","1dad5439":"Most survivors were from the 1st class, followed by 3rd and lastly 2nd class."}}