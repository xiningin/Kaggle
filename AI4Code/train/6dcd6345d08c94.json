{"cell_type":{"822dbe80":"code","b439e1fb":"code","563f6eee":"code","11002ae4":"code","7d7ad667":"code","9943fe8e":"code","778a5d4a":"code","fd888d8d":"markdown","a6ad79a3":"markdown","cd57cb00":"markdown","6af8436c":"markdown","34d85724":"markdown","d3f10c76":"markdown"},"source":{"822dbe80":"# Import der Numpy-Bibliothek unter dem Namen np\nimport numpy as np\n\n# Beispiele und Tests, nachvollziehen und dann auskommentieren oder l\u00f6schen!\ntest_array1 = np.array([2,5,1])\ntest_array2 = np.array([[1,2,3],\n                        [1,1,1]])\nprint(test_array1)\nprint(test_array2)\n\n# alle Werte von test_array1 mal 2 rechnen und Ergebnisse im selben Array speichern\ntest_array1 = test_array1 * 2\nprint(test_array1)\n\n# auf einzelne Arrays im 2-dim. Array zugreifen\nprint(test_array2[0])\nprint(test_array2[1])\n\n# test_array1 und das zweite Array in test_array2 komponentenweise addieren und Ergebnis in test_array1 speichern\ntest_array1 = test_array1 + test_array2[1]\nprint(test_array1)\n\n# Skalarprodukt berechnen (5*1 + 11*2 + 3*3)\ns = np.dot(test_array1, test_array2[0])\nprint(s)","b439e1fb":"def accuracy(o, y):\n    # TODO\n    \n# Test (Beispiel vom Perzeptron-Arbeitsblatt, es muss Accuracy = 0,625 rauskommen!)\no=np.array([0,0,1,1,0,1,1,0])\ny=np.array([1,0,1,0,0,1,1,1])\na=accuracy(o, y)\nprint(\"Accuracy = \" + str(a))","563f6eee":"# TODO: activation-Funktion programmieren\ndef activation(net):\n    # TODO\n\n# Test\no=activation(2.6)\nprint(o)   # es muss 1 herauskommen\no=activation(-3)\nprint(o)   # es muss 0 herauskommen","11002ae4":"# TODO: propagate-Funktion programmieren \n# (Um den Netzinput w*x zu berechnen, koennen Sie die np.dot-Funktion (s.o.) verwenden; \n# anschlie\u00dfend muss auch activation-Funktion aufgerufen werden)\ndef propagate(x):\n    global w  # um auf die au\u00dferhalb der Funktion definierten Variable w (Gewichts-Array) zuzugreifen\n    #TODO\n    \n# Test\nw=np.array([-2, 1, 0.5])\nx=np.array([1, 0, 1])\no=propagate(x)\nprint(o)    # es muss 0 herauskommen, da -2*1 + 1*0 + 0.5*1 = -1.5 < 0 ist","7d7ad667":"# TODO: predict-Funktion (nutzt die propagate-Funktion)\ndef predict(X):\n    # TODO\n    \n# Test\n# Testen Sie die predict-Funktion, indem Sie das OR-Beispiel nehmen, also\n# X als entsprechendes zweidimensionales Input-Array definieren und\n# w auf die richtigen Gewichte f\u00fcr OR setzen.\n#X =    # TODO \n#w =    # TODO\no = predict(X)\nprint(o)    # es muss [0 1 1 1] herauskommen","9943fe8e":"# TODO: fit_one_sample programmieren, auch hier global w als erste Anweisung!\n\n# Test\nw=np.array([-2, 1, 0.5])\nx=np.array([1, 0, 1])\ny=1\nfit_one_sample(x, y, 0.5)\nprint(w)    # es muss [-1.5, 1, 1.5] herauskommen (durch Anwendung der Lernregel auf die Beispieldaten w, x, y)\n\n\n# TODO: fit_one_epoch und fit programmieren und testen","778a5d4a":"# Anfangsgewichte und Trainingsdaten des Arbeitsblatts\nw=np.array([-0.5,0.5,-1])\nX=np.array([[1,0,0],\n            [1,0,1],\n            [1,1,0],\n            [1,1,1]])\ny=np.array([0,1,1,1])\n\n# TODO\n# fit aufrufen, anschlie\u00dfend Gewichte ausgeben und predict(X) ausf\u00fchren, ausgeben und pr\u00fcfen!\n\n","fd888d8d":"### Activation-, Propagate- und Predict-Funktionen programmieren\nProgrammieren und testen Sie die drei Funktionen. Eine nach der anderen!","a6ad79a3":"## Lernen der OR-Funktion\nTesten Sie die Perzeptron-Implementation, indem Sie die OR-Funktion lernen. Nehmen Sie dieselben Anfangswerte f\u00fcr die Gewichte wie auf dem Perzeptron-Arbeitsblatt. Wenn Sie in die entsprechenden Funktionen oben noch mittels print z.B. die Gewichte ausgeben lassen, k\u00f6nnen Sie nachvollziehen, wie sich die Gewichte schrittweise \u00e4ndern und mit der per Hand ausgef\u00fcllten Tabelle des Arbeitsblatts vergleichen!","cd57cb00":"### Trainingsfunktionen (fit)","6af8436c":"## Programmierung\n### Accuracy-Funktion","34d85724":"## \u00dcbersicht\n### Variablen\n* Inputs **X**: zweidimensionales Numpy-Array, z.B. \\[\\[1,0,0\\],\\[1,0,1\\],\\[1,1,0\\],\\[1,1,1\\]\\] f\u00fcr die OR-Funktion (der jeweils erste Wert ist konstant 1 f\u00fcr den Bias-Input).\n* Labels **y**: eindimensionales Numpy-Array mit erw\u00fcnschten Outputs, z.B. \\[0,1,1,1\\] f\u00fcr OR\n* Gewichte **w**: eindimensionales Numpy-Array mit Gewichten, inkl. Bias als erstem Wert.\n* **eta**: Lernrate\n* **n**: Anzahl der Epochen\n\n### Funktionen\n*Hinweis*: Die Gewichte sind keine Parameter der folgenden Funktionen. Stattdessen sollen die Funktionen auf das (global) initialisierte Gewichtsarray w zugreifen (Schl\u00fcsselwort global). Erste Anweisung in der jeweiligen Funktion muss dann sein: global w\n* **accuracy(o, y)**: Berechnet f\u00fcr ein Output- und ein Label-Array die Accuracy (Anteil der \u00fcbereinstimmenden Werte) und gibt diese zur\u00fcck (return).\n* **activation(net)**: Berechnet die Aktivierungsfunktion f und gibt das Ergebnis zur\u00fcck. D.h. activation gibt 0 bei net < 0 und 1 bei net >= 0 zur\u00fcck.\n* **propagate(x)**: Berechnet f\u00fcr einen Input-Vektor x (eindimensionales Numpy-Array) den Perzeptron-Output und gibt das Ergebnis zur\u00fcck. D.h. es wird das Skalarprodukt w\\*x (mit np.dot) berechnet und darauf activation aufgerufen.\n* **predict(X)**: Berechnet f\u00fcr **alle** Inputs X (zweidimensionales Array) die Outputs o, R\u00fcckgabe ist also ein Array mit Outputs.\n\nDie bis jetzt genannten Funktionen wenden das Perzeptron an. Insbesondere der Funktionsname **predict** ist im Machinellen Lernen \u00fcblich, um ein trainiertes Modell (z.B. Neuronales Netz) auf eine ganze Menge von Inputs X anzuwenden und ein Array mit den entsprechenden Outputs zu erhalten.\n\nEs folgen noch die Funktionen zum Trainieren \/ Lernen des Perzeptrons. Die entsprechenden Methoden hei\u00dfen im Maschinellen Lernen h\u00e4ufig fit (von Englisch \"to fit\" = \"anpassen\"). **Die folgenden Funktionen geben nichts zur\u00fcck, sondern \u00e4ndern die (global definierten) Gewichte w!**\n* **fit_one_sample(x, y, eta)**: Berechnet den Output o f\u00fcr x (propagate-Funktion) und wendet dann die Lernregel an, um w zu aktualisieren. (x ist ein eindimensionales Array, y ein einzelnert Wert.)\n* **fit_one_epoch(X, y, eta)**: Ruft f\u00fcr jeden Input in X und jedes entsprechende Label in y einmal fit_one_sample auf.\n* **fit(X, y, eta=0.5, n=10)**: Ruft n mal fit_one_epoch auf.\n\nfit ist die Funktion, die das Perzeptron trainiert, die beiden vorigen Funktionen Hilfsfunktionen.","d3f10c76":"# Programmierung eines Perzeptrons\n\nEs sollen alle Funktionen zum Anwenden eines Perzeptrons und zum Lernen der Gewichte programmiert werden.\n\nDie verschiedenen Daten (Inputs, Gewichte etc.) werden in **Arrays** (statt Python-Listen) aus der **Numpy-Bibliothek** gespeichert. Man kann ein Numpy-Array aus einer Python-Liste erstellen. Man kann Numpy-Arrays mit einzelnen Zahlen multiplizieren, addieren etc., zwei Numpy-Arrays addieren, multiplizieren etc. und von zwei Numpy-Arrays das Skalarprodukt berechnen.\nF\u00fchren Sie die folgende Code-Zelle aus, um die Numpy-Bibliothek zu importieren und sich ein paar kleine Beispiele anzusehen. Vollziehen Sie die Beispiele nach!\n"}}