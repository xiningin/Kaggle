{"cell_type":{"a2b40f8d":"code","628d6170":"code","ac5e3d66":"code","a3905905":"code","472680fa":"code","5b49b4bb":"markdown","fd6ca556":"markdown","0a2b2bdb":"markdown","0f84b635":"markdown","10569c99":"markdown"},"source":{"a2b40f8d":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport time\nimport datetime\nimport itertools\nimport networkx as nx \nimport matplotlib.pyplot as plt\nfrom IPython.display import Image\nimport warnings\nwarnings.filterwarnings(\"ignore\") \nimport os","628d6170":"data = pd.read_csv(\"..\/input\/crisis-data.csv\")\ntoday = time.strftime(\"%Y-%m-%d\")\ntoday = '2018-12-16'\ndata = data.loc[(data['Reported Date'] == today)]\n#print(today)","ac5e3d66":"call_types = data['Call Type'].unique()\nofficers = data['Officer ID'].unique()","a3905905":"g = nx.DiGraph()\ncolor_map = []\nsize = []\nlabels = []\nfor i in range (0,len(call_types)):\n    g.add_node(call_types[i], type = 'call_type')\n    color_map.append('lightskyblue')\n    size.append(2000)\nfor i in range (0,len(officers)):\n    g.add_node(officers[i], type = 'officer')\n    color_map.append('blue')\n    size.append(1000)\n    \nfor i in range (0,len(data)):\n    if data.iloc[i,5] == 'SUICIDE - IP\/JO SUICIDAL PERSON AND ATTEMPTS':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'red', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'ASSIST OTHER AGENCY - ROUTINE SERVICE':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'green', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'DISTURBANCE, MISCELLANEOUS\/OTHER':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'green', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'SFD - ASSIST ON FIRE OR MEDIC RESPONSE':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'orange', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'ASLT - WITH OR W\/O WEAPONS (NO SHOOTINGS)':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'orange', weight=1)\n            labels.append(data.iloc[i,5])       \n    if data.iloc[i,5] == 'MISSING - CHILD':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'green', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'BOMB THREATS - IP\/JO':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'red', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'PERSON IN BEHAVIORAL\/EMOTIONAL CRISIS':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'orange', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'TRESPASS':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'black', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'DIST - DV - NO ASLT':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'green', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'FIGHT - IP - PHYSICAL (NO WEAPONS)':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'green', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'THREATS - DV - NO ASSAULT':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'orange', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'OVERDOSE - DRUG RELATED CASUALTY':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'orange', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'NUISANCE - MISCHIEF':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'green', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'UNKNOWN - COMPLAINT OF UNKNOWN NATURE':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'green', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'ROBBERY - IP\/JO (INCLUDES STRONG ARM)':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'red', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'BURG - IP\/JO - RES (INCL UNOCC STRUCTURES)':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'green', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'ALARM - COMM, HOLD-UP\/PANIC (EXCEPT BANKS)':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'red', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'SEX IN PUBLIC PLACE\/VIEW (INCL MASTURBATION)':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'pink', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'CHILD - ABAND, ABUSED, MOLESTED, NEGLECTED':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'orange', weight=1)\n            labels.append(data.iloc[i,5])\n    if data.iloc[i,5] == 'DOWN - CHECK FOR PERSON DOWN':\n            g.add_edge(data.iloc[i,4], data.iloc[i,13], type = data.iloc[i,5], color = 'red', weight=1)\n            labels.append(data.iloc[i,5])","472680fa":"# Drawing Graph\nprint(today)\nplt.figure(3,figsize=(10,10)) \nedges = g.edges()\ncolors = [g[u][v]['color'] for u,v in edges]\nnx.draw_circular(g, node_size = size, node_color = color_map,edge_color = colors, width=3.0, size=0.2, with_labels = True);\nplt.show();\nplt.savefig('graph.png') \nImage(filename='graph.png')","5b49b4bb":"# Let's read the dataset and extract daily data (2018-12-16)","fd6ca556":"# Let's draw our graph","0a2b2bdb":"# Let put our data in a graph where : Edges colors represent importance of the cases \n# Green = Low, Orange = Medium, Red =High, Black = Too Late","0f84b635":"# Daily operational view of Seattle crisis Management\n## To change, let's display data in another way...\n\n\n\n\n\n![](http:\/\/i.ebayimg.com\/images\/i\/320655661598-0-1\/s-l1000.jpg)\n","10569c99":"# Now we extract all the Call Types and Officers involved"}}