{"cell_type":{"9e97af99":"code","d88b43f3":"code","34d991cb":"code","786e0358":"code","f14c4827":"code","58b10525":"code","8120bd8a":"code","6364eb5e":"code","ac36d711":"code","fe901e6d":"code","3f05ddfa":"code","55b24e58":"code","c5856d2e":"code","0941cb88":"code","34df39bd":"code","f72926a1":"code","0432a185":"code","1e563046":"code","c24d44a0":"code","d1a2c5cd":"code","f660b426":"code","769489ce":"markdown","6f711cf1":"markdown","1aa804b8":"markdown","41748ae1":"markdown","3517ceec":"markdown","f19bc02f":"markdown","f9bf7b55":"markdown","6c4f79fb":"markdown","c47eae4b":"markdown","01de184c":"markdown","ad2964bb":"markdown"},"source":{"9e97af99":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d88b43f3":"import numpy as np\nimport pandas as pd\n\nfrom pprint import pprint\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import mean_squared_log_error\n\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (12.0, 6.0)\nsns.set_palette(\"deep\")","34d991cb":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\ntrain.head()","786e0358":"all_data = pd.concat((train.loc[:,'MSSubClass':'SaleCondition'],\n                      test.loc[:,'MSSubClass':'SaleCondition']))","f14c4827":"prices = pd.DataFrame({\"price\":train[\"SalePrice\"], \"log(price + 1)\":np.log1p(train[\"SalePrice\"])})\nprices.hist();","58b10525":"#log transform the target:\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#log transform skewed numeric features:\nfrom scipy.stats import skew\n\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\nskewed_feats = train[numeric_feats].apply(lambda x: skew(x.dropna())) #compute skewness\nskewed_feats = skewed_feats[skewed_feats > 0.75]\nskewed_feats = skewed_feats.index\n\nall_data[skewed_feats] = np.log1p(all_data[skewed_feats])","8120bd8a":"all_data = pd.get_dummies(all_data)","6364eb5e":"missing = train.isnull().sum()\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar();","ac36d711":"all_data = all_data.fillna(all_data.mean())","fe901e6d":"X_train = all_data[:train.shape[0]]\nX_test = all_data[train.shape[0]:]\ny_train = train.SalePrice","3f05ddfa":"from sklearn.linear_model import LassoCV","55b24e58":"lasso_model = LassoCV( alphas = [1, 0.1, 0.001, 0.0005], max_iter=10000, n_jobs=-1, positive=True)\n\nlasso_model.fit(X_train, y_train)\nlasso_model.get_params()","c5856d2e":"y_lasso_train = lasso_model.predict(X_train)\nlasso_model.score(X_train, y_train)","0941cb88":"np.sqrt(mean_squared_log_error(y_train, y_lasso_train))","34df39bd":"preds = pd.DataFrame({\"preds\":y_lasso_train, \"true\":y_train})\npreds[\"residuals\"] = preds[\"true\"] - preds[\"preds\"]\n\nplt.rcParams['figure.figsize'] = (6.0, 6.0)\npreds.plot(x = \"preds\", y = \"residuals\", kind = \"scatter\");","f72926a1":"def plot_regression_results(y_true, y_pred):\n    \"\"\"Scatter plot of the predicted vs true targets.\"\"\"\n\n    fig, ax = plt.subplots() \n\n    ax.plot([y_true.min(), y_true.max()],\n            [y_true.min(), y_true.max()],\n            '--r', linewidth=2)\n    ax.scatter(y_true, y_pred, alpha=0.2)\n\n    ax.set_xlabel('Measured')\n    ax.set_ylabel('Predicted')\n\n    plt.show()","0432a185":"plot_regression_results( y_train, y_lasso_train)","1e563046":"y_lasso = np.expm1(lasso_model.predict(X_test))","c24d44a0":"y_predicted = y_lasso","d1a2c5cd":"data = {'Id' : test['Id'], \"SalePrice\" : y_predicted}\ndf = pd.DataFrame(data=data)\ndf.head()","f660b426":"df.to_csv('out.csv', index=False)","769489ce":"# Preprocessing","6f711cf1":"# Fitting Lasso model","1aa804b8":"# Exporting predictions to appropriate submission format","41748ae1":"## Log transform","3517ceec":"## Making predictions","f19bc02f":"# Measuring predictions accuracy","f9bf7b55":"## Handling missing data","6c4f79fb":"# Loading data","c47eae4b":"# House Prices - Advanced Regression Techniques","01de184c":"## Splitting the dataset for sklearn","ad2964bb":"## Encoding categorical data"}}