{"cell_type":{"9a5288a0":"code","1b6f33db":"code","46be9749":"code","07a0a5d0":"code","2bd80363":"code","14be44ad":"code","cc3ac73e":"code","51fde9c8":"code","0cab2124":"code","aa7d8380":"code","04b1bfa7":"code","fd5a1524":"code","2286e20a":"code","4d4750f5":"code","72db2177":"code","6156ced3":"code","72d77c89":"code","e455f6f2":"code","cff1555d":"code","7283c6eb":"code","68fdb252":"code","b8cf565a":"code","9c43983c":"code","feaa732c":"code","c950a741":"code","2d1ac122":"code","127ed110":"code","baa8c46a":"code","2ea76cb2":"markdown","689ad6c3":"markdown","ac6775d5":"markdown","399ec625":"markdown","4351e58d":"markdown","f7b068dd":"markdown","0df72e86":"markdown","d7a76121":"markdown"},"source":{"9a5288a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1b6f33db":"!echo -n \"Computersicherheit\"","46be9749":"!echo -n \"Computersicherheit\" | md5sum | awk '{ print $1; }'","07a0a5d0":"import hashlib\nhashlib.md5(\"Computersicherheit\".encode()).hexdigest()","2bd80363":"!shuf -n 20 \/kaggle\/input\/ehpdata\/dictionary.txt","14be44ad":"password_hash = 'd6496e1d42945ffd98ef2720369a75c9'","cc3ac73e":"import hashlib\n\npassword = None\n\nwith open('\/kaggle\/input\/ehpdata\/dictionary.txt', 'r') as file:\n    for line in file:\n        word = line.strip()\n        wordhash = hashlib.md5(word.encode()).hexdigest()\n        if wordhash == password_hash:\n            password = word\n            break\n        if password is not None:\n            break\n\nif password is None:\n    print('Not found')\nelse:\n    print(password)","51fde9c8":"hashlib.md5('quality_control'.encode()).hexdigest()","0cab2124":"password_special_hash = '99585bc5666c79a50fa447d1a06b7e58'\nspecial_chars = '!$%&\/()=?'\n\nimport hashlib\n\npassword = None\n\nwith open('\/kaggle\/input\/ehpdata\/dictionary.txt', 'r') as file:\n    for line in file:\n        word = line.strip()\n        for c in special_chars:\n            w = word + c\n            md5digest = hashlib.md5(w.encode()).hexdigest()\n            if md5digest == password_special_hash:\n                password = w\n                break\n        if password is not None:\n            break\n\nif password is None:\n    print('The md5 hash could not be decrypted.')\nelse:\n    print('The password is:', password)","aa7d8380":"%%timeit -r 5 -n 1\n\npassword_special_hash = '99585bc5666c79a50fa447d1a06b7e58'\nspecial_chars = '!$%&\/()=?'\n\nimport hashlib\n\npassword = None\n\nwith open('\/kaggle\/input\/ehpdata\/dictionary.txt', 'r') as file:\n    for line in file:\n        word = line.strip()\n        for c in special_chars:\n            w = word + c\n            md5digest = hashlib.md5(w.encode()).hexdigest()\n            if md5digest == password_special_hash:\n                password = w\n                break\n        if password is not None:\n            break\n\nif password is None:\n    print('The md5 hash could not be decrypted.')\nelse:\n    print('The password is:', password)","04b1bfa7":"%timeit -r 5 -n 1 print('foo')","fd5a1524":"def md5crack(md5hash, special_chars='', dictionary='\/kaggle\/input\/ehpdata\/dictionary.txt'):\n    with open(dictionary, 'r') as file:\n        for line in file:\n            word = line.strip()\n            md5digest = hashlib.md5(word.encode()).hexdigest()\n            if md5digest == md5hash:\n                return word\n            for c in special_chars:\n                w = word + c\n                md5digest = hashlib.md5(w.encode()).hexdigest()\n                if md5digest == md5hash:\n                    return w","2286e20a":"%timeit -r 5 -n 1 print(password_hash, md5crack(password_hash))\n%timeit -r 5 -n 1 print(password_special_hash, md5crack(password_special_hash, special_chars='!$%&\/()=?'))","4d4750f5":"hashlib.md5('quality_control?'.encode()).hexdigest()","72db2177":"q_control_hash = 'd6496e1d42945ffd98ef2720369a75c9'\nq_control_hash_special = '1f8e447ca90e8bdf99decca6b90663ef'","6156ced3":"%timeit -r 5 -n 1 print(q_control_hash, md5crack(q_control_hash))\n%timeit -r 5 -n 1 print(q_control_hash_special, md5crack(q_control_hash_special, special_chars='!$%&\/()=?'))","72d77c89":"%timeit -r 5 -n 1 md5crack(q_control_hash)\n%timeit -r 5 -n 1 md5crack(q_control_hash_special, special_chars='!$%&\/()=?')","e455f6f2":"squares = []\nfor x in range(10):\n    squares.append(x**2)\nprint(squares)","cff1555d":"squares = list(map(lambda x: x**2, range(10)))\nprint(squares)","7283c6eb":"squares = [x**2 for x in range(10) if x > 3]\nprint(squares)","68fdb252":"# 1. take 10 random passwords from dictionary, save as array\n# 2. append special chars, save as other array\n# 3. calculate hashes for both arrays\n# 4. compare performance","b8cf565a":"# 1. take 10 random passwords from dictionary, save as array\npasswords = !shuf -n 10 \/kaggle\/input\/ehpdata\/dictionary.txt\nprint(passwords)","9c43983c":"# 2. append special chars, save as other array\nimport random\nspecial_chars = '!$%&\/()=?'\npasswords_special = []\nfor pw in passwords:\n    passwords_special.append(pw + random.choice(special_chars))\nprint(passwords_special)","feaa732c":"# 2. append special chars, save as other array -- list comprehension version\npasswords_special = [pw + random.choice(special_chars) for pw in passwords]\nprint(passwords_special)","c950a741":"# 3. calculate hashes for both arrays\npassword_hashes = [hashlib.md5(pw.encode()).hexdigest() for pw in passwords]\nprint(password_hashes)","2d1ac122":"password_special_hashes = [hashlib.md5(pw.encode()).hexdigest() for pw in passwords_special]\nprint(password_special_hashes)","127ed110":"%%timeit -r 5 -n 1\n# 4. compare performance\nfor hash_value in passwords:\n    md5crack(hash_value)","baa8c46a":"%%timeit -r 5 -n 1\n# 4. compare performance\nfor hash_value in passwords_special:\n    md5crack(hash_value, special_chars='!$%&\/()=?')","2ea76cb2":"## Special chars","689ad6c3":"## PEP-8\nhttps:\/\/www.python.org\/dev\/peps\/pep-0008\/","ac6775d5":"## List Comprehension\nhttps:\/\/docs.python.org\/3\/tutorial\/datastructures.html#list-comprehensions","399ec625":"For convenience, we may define a function for the code above:","4351e58d":"## Random Sampling\nhttps:\/\/docs.python.org\/3\/library\/random.html","f7b068dd":"## Performance evaluation\n\n","0df72e86":"## Dictionary attack\nLegal remark: The dictionary (dictionary.txt) has been extracted from WordNet Project: http:\/\/wordnet.princeton.edu","d7a76121":"## MD5 via Shell and Python"}}