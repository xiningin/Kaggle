{"cell_type":{"25119560":"code","418e588e":"code","2ae0d368":"code","34c3bd40":"code","98bc13bd":"code","3a9e6a54":"code","f4c2876e":"code","ee74c34d":"code","a4aa98ab":"code","3912ec6b":"code","75e0c8a6":"code","35618502":"code","a6bbf615":"code","cc6c7493":"code","26d21fba":"code","0899ef5f":"code","74dc61d4":"code","5ac7c3de":"code","bc175703":"code","937827ee":"code","463c5d7f":"code","ae82942b":"code","95bdf0d8":"code","3b1e9d96":"code","ee36b3db":"code","c71c3625":"code","ba95da25":"markdown","257f9540":"markdown","546378fb":"markdown","07b5d3da":"markdown","a0f16aee":"markdown","2868a4b9":"markdown","fe0093e9":"markdown","64e005a5":"markdown","320e4ef3":"markdown","50c98fb0":"markdown","204f21ac":"markdown","7b7be417":"markdown","73b01d42":"markdown","61734dee":"markdown","d1633052":"markdown","8e574057":"markdown","d0227d74":"markdown","976e8dad":"markdown"},"source":{"25119560":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport operator\nimport os\nprint(os.listdir(\"..\/input\"))","418e588e":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","2ae0d368":"train.head()","34c3bd40":"count_dash = {}\ncount_name = {}","98bc13bd":"for col in train.columns:\n    if col not in ['id', 'target']:\n        names = col.split('-')\n        for name in names:\n            if not name in count_name:\n                count_name[name] = 1\n            else:\n                count_name[name] += 1\n\n        if not len(names) in count_dash:\n            count_dash[len(names)] = 1\n        else:\n            count_dash[len(names)] += 1","3a9e6a54":"count_dash","f4c2876e":"sorted_count_name = sorted(count_name.items(), key=operator.itemgetter(1), reverse=True)\nsorted_count_name[0:10]","ee74c34d":"# Saving to file so you can inspect the whole list\nwith open('count_name_train.txt', 'w') as f:\n    for item in sorted_count_name:\n        f.write(\"%s\\n\" % str(item))","a4aa98ab":"len(sorted_count_name)","3912ec6b":"count_name_train = count_name","75e0c8a6":"test.head()","35618502":"count_dash = {}\ncount_name = {}","a6bbf615":"for col in test.columns:\n    if col not in ['id']:\n        names = col.split('-')\n        for name in names:\n            if not name in count_name:\n                count_name[name] = 1\n            else:\n                count_name[name] += 1\n        \n        if not len(names) in count_dash:\n            count_dash[len(names)] = 1\n        else:\n            count_dash[len(names)] += 1","cc6c7493":"count_dash","26d21fba":"sorted_count_name = sorted(count_name.items(), key=operator.itemgetter(1), reverse=True)\nsorted_count_name[0:10]","0899ef5f":"# Saving to file so you can inspect the whole list\nwith open('count_name_test.txt', 'w') as f:\n    for item in sorted_count_name:\n        f.write(\"%s\\n\" % str(item))","74dc61d4":"len(sorted_count_name)","5ac7c3de":"set(count_name.keys()) - set(count_name_train.keys())","bc175703":"set(count_name_train.keys()) - set(count_name.keys())","937827ee":"# We can use only train column because it's exactly the same between test & train\nprint(set(train.columns) - set(test.columns))\nprint(set(test.columns) - set(train.columns))","463c5d7f":"column_1 = {}\ncolumn_2 = {}\ncolumn_3 = {}\ncolumn_4 = {}","ae82942b":"for col in train.columns:\n    if col not in ['id', 'target']:\n        names = col.split('-')\n        if not names[0] in column_1:\n            column_1[names[0]] = 1\n        else:\n            column_1[names[0]] += 1\n\n        if not names[1] in column_2:\n            column_2[names[1]] = 1\n        else:\n            column_2[names[1]] += 1\n\n        if not names[2] in column_3:\n            column_3[names[2]] = 1\n        else:\n            column_3[names[2]] += 1\n\n        if not names[3] in column_4:\n            column_4[names[3]] = 1\n        else:\n            column_4[names[3]] += 1\n        ","95bdf0d8":"col_list = [column_1, column_2, column_3, column_4]\n\nfor i in range(0,3):\n    for j in range(i+1,4):\n        print(\"Duplicate name between column {} and {}\".format(i+1, j+1))\n        print(set(col_list[i].keys()) & set(col_list[j].keys()))\n","3b1e9d96":"print([x for x in train.columns if 'magic' in x.split('-')])","ee36b3db":"train['stealthy-chocolate-urchin-kernel']","c71c3625":"train['bluesy-chocolate-kudu-fepid']","ba95da25":"All column in train consist of 4 item separated by dashes","257f9540":"That's all for now. I'll update this later when there is new findings.","546378fb":"Let's store name for each column","07b5d3da":"Every name is present in both train and test column","a0f16aee":"## Ideas\nHere some crazy idea that I've tried out:\n* Using only column with 'important' in the names (bad result)  \n* Removing column with 'noise' in the names (bad result)","2868a4b9":"## Column with magic\nAs shown in other kernel, some column have a high impact and one of the names in that column is 'magic'. Let's find more magic.","fe0093e9":"There is a duplicate name between column 2 & 3!","64e005a5":"The name that appears most often is also 'important'","320e4ef3":"## Uniqueness Between Columns\nDo any words from one column show up in another column? (For example does a word from column 1 show up in column 2, 3, or 4?) as asked by [@cdeotte](https:\/\/www.kaggle.com\/cdeotte) [here](https:\/\/www.kaggle.com\/c\/instant-gratification\/discussion\/92604#533156)","50c98fb0":"Overall there is 385 unique name in train data column","204f21ac":"## Check Test","7b7be417":"All column in test also consist of 4 item separated by dashes","73b01d42":"The name that appears most often is 'important'","61734dee":"Overall there is 385 unique name in test data column","d1633052":"## Check Train","8e574057":"# EDA Column Name\n\nThe column is anonymized with this cryptic names. Let's check it out! ","d0227d74":"Unfortunately there only one magic :(  \n","976e8dad":"That's all for now. I'll add more when I find new ideas."}}