{"cell_type":{"458a803a":"code","71346fe9":"code","95a83881":"code","a50a5254":"code","9055ccc1":"code","b1df7644":"code","d728f2a6":"code","ce7ec105":"code","d4b069a9":"code","f0e11de4":"code","49dd3d69":"code","727d31f8":"code","4a520c80":"code","b48ba989":"code","01ba9be5":"code","67e03066":"code","7acbf433":"code","3c206bd2":"code","27105e78":"code","80c299ac":"code","c4b3cc32":"code","f8462e41":"code","0264c3e3":"code","05655899":"code","4fd86d43":"code","a78830f5":"code","10063027":"code","1712e526":"code","a2892381":"code","2b5eb27d":"code","868c920c":"code","b7c511f1":"code","3fd5f415":"code","90756859":"code","a49714b9":"code","93b4660a":"code","7033820b":"code","c5c0e976":"code","b32a849d":"code","c38f5d93":"code","95b5dae8":"code","89d8059d":"code","8e9d85a3":"code","057de62a":"code","80d1b328":"code","d7333ebf":"code","9ee22fb7":"code","34cd1a84":"code","9535aaea":"code","8c4691c0":"code","2e04d03b":"code","0022a457":"code","647c4124":"code","441373ba":"code","f78c889d":"code","cf00475a":"code","f99632ce":"code","477e9d27":"code","5be37ce5":"code","ba2ceb34":"code","ae0d09b8":"code","6e0c9bd2":"code","cfbc86a0":"markdown","bd63717d":"markdown","db5dff4b":"markdown","9a1737a1":"markdown","056bdcdb":"markdown","654f086d":"markdown","00fc4d12":"markdown","e51c8a7b":"markdown","260b2096":"markdown","46bbde35":"markdown","e40826f7":"markdown","3bb1e677":"markdown","32b6244f":"markdown","66f4c3d6":"markdown","4fc014e7":"markdown","c432d55f":"markdown","5bf2ad75":"markdown","7f2171de":"markdown","21d666e7":"markdown","debc9b3b":"markdown","014a9c2f":"markdown","076acbf2":"markdown","0571f509":"markdown","c2b21599":"markdown","7fdb0eea":"markdown","9526795f":"markdown","ebc8196f":"markdown","1ee838d4":"markdown","feb6c5c3":"markdown","d3fbe1da":"markdown","e4a8eb70":"markdown","60cc0202":"markdown","462a27ff":"markdown","e28d0596":"markdown","7179a180":"markdown","cd629d45":"markdown","12cebbbb":"markdown","268bf1cd":"markdown","8bdc6f44":"markdown","b61e45e9":"markdown","c6816964":"markdown","18ebba6b":"markdown","a87e9e52":"markdown","7974d0ef":"markdown","d2755e3c":"markdown","b02c6914":"markdown","7d177753":"markdown","c32997c4":"markdown","459edb48":"markdown","096a3bee":"markdown","215a7088":"markdown"},"source":{"458a803a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","71346fe9":"# Importing Library\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt,datetime\nfrom datetime import timedelta\nimport folium\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression,LogisticRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline\nsns.set()","95a83881":"symptoms={'symptom':['Fever',\n                'Dry cough',\n                'Fatigue',\n                'Sputum production',\n                'Shortness of breath',\n                'Muscle pain',\n                'Sore throat',\n                'Headache',\n                'Chills',\n                'Nausea or vomiting',\n                'Nasal congestion',\n                'Diarrhoea',\n                'Haemoptysis',\n                'Conjunctival congestion'],'percentage':[87.9,67.7,38.1,33.4,18.6,14.8,13.9,13.6,11.4,5.0,4.8,3.7,0.9,0.8]}\n\nsymptoms=pd.DataFrame(data=symptoms,index=range(14))\nsymptoms","a50a5254":"plt.figure(figsize=(12,8))\nplt.title('Symptoms of Coronavirus',fontsize=20)    \nplt.pie(symptoms['percentage'],autopct='%1.1f%%')\nplt.legend(symptoms['symptom'],bbox_to_anchor=(1.45, 0.8),loc=\"upper center\")\n\ncentre_circle = plt.Circle((0,0),0.50,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\nplt.show() ","9055ccc1":"from wordcloud import WordCloud, STOPWORDS\n\ntext=symptoms['symptom'].to_list()\nplt.figure(figsize=(10,6))\nwordcloud=WordCloud(max_words=200,background_color='white',).generate(str(text))\nplt.imshow(wordcloud,interpolation='bilinear')\nplt.axis('off')\nplt.show()","b1df7644":"data=pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\nconfirmed_data=pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndeaths_data=pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\nrecovered_data=pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')\ndata.head()","d728f2a6":"#getting a summary of the columns\n\nprint(\"Size\/Shape of the dataset: \",data.shape)\nprint(\"Checking for null values:\\n\",data.isnull().sum())\nprint(\"Checking Data-type of each column:\\n\",data.dtypes)","ce7ec105":"# Changing Datatypes of 'Confirmed', 'Deaths' and 'Recovered'\ndata[['Confirmed','Deaths','Recovered']]=data[['Confirmed','Deaths','Recovered']].astype(int)\n\n# Renaming Columns name\ndata.rename(columns={'Country\/Region':'Country','Province\/State':'State','ObservationDate':'Observation Date'},inplace=True)\n#data.tail()\n\n# Creating column of Active Case\ndata['Active']=data['Confirmed']-(data['Recovered']+data['Deaths'])\n#data.tail()\n\n# Replacing 'Mainland China' with 'China'\ndata['Country']=data['Country'].replace('Mainland China','China')\n\n# #converting 'Date' column to datetime\ndata['Observation Date']=pd.to_datetime(data['Observation Date'], format='%m\/%d\/%Y')\ndata['Date1'] = pd.to_datetime('2020\/01\/22')\ndata['Days']= data['Observation Date'] - data['Date1']\ndata['Days'] = data['Days'].astype(str).str[:2]\ndata['Days'] = data[['Days']].apply(pd.to_numeric)\ndata['Observation Date']=pd.to_datetime(data['Observation Date'],unit='ns').dt.date\ndata.drop('Date1',inplace=True, axis=1)\ndata.tail()","d4b069a9":"data.describe()","f0e11de4":"data.corr().style.background_gradient(cmap='Reds')","49dd3d69":"sns.heatmap(data.corr(),annot=True)","727d31f8":"#listing all the countries where the virus has spread to\ncountries=data['Country'].unique().tolist()\nprint('Total countries affected by virus : ',len(countries))\nprint('\\ncountries:', countries)","4a520c80":"world_data = data.groupby('Observation Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nworld = world_data[world_data['Observation Date']==max(world_data['Observation Date'])].reset_index(drop=True)\nworld['Global Moratality'] = world['Deaths']\/world['Confirmed']\nworld['Deaths per 100 Confirmed Cases'] = world['Global Moratality']*100\nworld.style.background_gradient(cmap='Pastel2')","b48ba989":"Data=data[data['Observation Date']==max(data['Observation Date'])].reset_index()\ndata_country_wise=Data.groupby(['Country'])[[\"Confirmed\",\"Recovered\",\"Deaths\",\"Active\"]].sum().reset_index().sort_values('Confirmed',ascending=False).reset_index(drop=True)\ndata_country_wise['Mortality Rate']=round((data_country_wise['Deaths']\/data_country_wise['Confirmed'])*100,2)\ndata_country_wise['Recovery Rate']=round((data_country_wise['Recovered']\/data_country_wise['Confirmed'])*100,2)\ndata_country_wise['Confirmed Case Rate']=round((data_country_wise['Confirmed']\/data_country_wise['Confirmed'].sum())*100,2)\n#data_country_wise.style.background_gradient(cmap='Oranges')\n\ndata_country_wise.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Active\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate\"])\\\n                        .background_gradient(cmap='Oranges',subset=[\"Recovery Rate\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Confirmed Case Rate\"])                      ","01ba9be5":"most_country=data_country_wise.groupby('Country')[\"Confirmed\",\"Recovered\",\"Deaths\",\"Active\"].sum()\n#most_country.head()\n\nplt.figure(figsize=(15,35))\n\nplt.subplot(4,1,1)\nmost_country[most_country['Confirmed'] > 10000]['Confirmed'].sort_values(ascending=False).plot(kind='pie',autopct='%1.1f%%')\nplt.title(\"Countries Confirmed more than 10000 Cases\", fontsize=15)\nplt.xlabel('Country');\nplt.ylabel('No. of Cases');\nplt.xticks(rotation='30')\n\nplt.subplot(4,1,2)\n\nmost_country[most_country['Deaths'] > 1000]['Deaths'].sort_values(ascending=False).plot(kind='pie',autopct='%1.1f%%')\nplt.title(\"Countries Deaths more than 1000 Cases\", fontsize=15)\nplt.xlabel('Country');\nplt.ylabel('No. of Cases');\nplt.xticks(rotation='30')\n\nplt.subplot(4,1,3)\n\nmost_country[most_country['Active'] > 10000]['Active'].sort_values(ascending=False).plot(kind='pie',autopct='%1.1f%%')\nplt.title(\"Countries Active more than 10000 Cases\", fontsize=15)\nplt.xlabel('Countries');\nplt.ylabel('No. of Cases');\nplt.xticks(rotation='30')\n\nplt.subplot(4,1,4)\n\nmost_country[most_country['Recovered'] > 5000]['Recovered'].sort_values(ascending=False).plot(kind='pie',autopct='%1.1f%%')\nplt.title(\"Countries Recovered more than 5000 Cases\", fontsize=15)\nplt.xlabel('Countries');\nplt.ylabel('No. of Cases');\nplt.xticks(rotation='30')\n\n\nplt.show()","67e03066":"top10=data_country_wise.head(10)\nX=top10.Country\nY=top10.Confirmed\nplt.figure(figsize=(15,9))\nsns.barplot(X,Y,order=X,palette='RdBu').set_title('Most 10 Infected Country')\nplt.xticks(rotation=90,fontsize=12)\n\nfor i, v in enumerate(top10['Confirmed']):\n    plt.text(i-.25, v,\n              top10['Confirmed'][i], \n              fontsize=12 )","7acbf433":"f, ax = plt.subplots(figsize=(10,8))\nbar1=sns.barplot(x=\"Confirmed\",y=\"Country\",data=top10,\n            label=\"Confirmed\", color=\"darkcyan\")\n\n\nbar2=sns.barplot(x=\"Recovered\", y=\"Country\", data=top10,\n            label=\"Recovered\", color=\"gold\")\n\n\nbar3=sns.barplot(x=\"Deaths\", y=\"Country\", data=top10,\n            label=\"Deaths\", color=\"darkred\")\n\nplt.xlabel('No of Cases', fontsize=15)\nplt.ylabel('Country',fontsize=15)\nplt.title('Confirmed vs Recovery vs Deaths ',fontsize=20)\nax.legend(loc=4, ncol = 1)\nplt.show()","3c206bd2":"mortality_10=data_country_wise.sort_values(by='Deaths',ascending=False).reset_index(drop=True).head(10)\nplt.figure(figsize=(8,5))\nplt.style.use('ggplot') # ggplot for grid\nars=mortality_10.sort_values('Mortality Rate',ascending=True).head(10)\nax=ars.plot(kind='barh',x='Country',y='Mortality Rate',color='salmon',title='World wide Mortality rate',figsize=(10,6))\n\nplt.show()","27105e78":"main_cols=[\"Confirmed\",\"Recovered\",\"Deaths\",\"Active\"]\n\n\ndata_date_wise=data.groupby(['Observation Date'])[main_cols].sum().reset_index(drop=None)\ndata_date_wise[['Confirmed','Deaths','Recovered']]=data_date_wise[['Confirmed','Deaths','Recovered']].astype(int)\ndata_date_wise['daily_cases']=data_date_wise.Confirmed.diff()\ndata_date_wise['daily_deaths']=data_date_wise.Deaths.diff()\ndata_date_wise['daily_recoveries']=data_date_wise.Recovered.diff()\ndata_date_wise['daily_cases']=data_date_wise['daily_cases'].replace(np.nan, 0, regex=True)\ndata_date_wise['daily_deaths']=data_date_wise['daily_deaths'].replace(np.nan, 0, regex=True)\ndata_date_wise['daily_recoveries']=data_date_wise['daily_recoveries'].replace(np.nan, 0, regex=True)\ndata_date_wise['daily_cases']=data_date_wise['daily_cases'].astype(int)\ndata_date_wise['daily_deaths']=data_date_wise['daily_cases'].astype(int)\ndata_date_wise['daily_recoveries']=data_date_wise['daily_cases'].astype(int)\ndata_date_wise.nlargest(5,'Confirmed')","80c299ac":"plt.figure(figsize=(15, 8))\nplt.subplot(121)\nplt.plot(data_date_wise.index, world_data['Confirmed'],color='b')\nplt.plot(data_date_wise.index, world_data['Deaths'],color='r')\nplt.plot(data_date_wise.index, world_data['Recovered'],color='g')\nplt.plot(data_date_wise.index, world_data['Active'],color='y')\nplt.bar(data_date_wise.index,world_data['Confirmed'],alpha=0.2,color='c')\nplt.title('Statistics of Worlds Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('No. of Cases', size=20)\nplt.xticks(size=12)\nplt.yticks(size=12)\nplt.legend(['Confirmed','Deaths','Recovered','Active Cases'])\n\nplt.subplot(122)\nplt.plot(data_date_wise.index,np.log10(world_data['Confirmed']))\nplt.plot(data_date_wise.index, np.log10(world_data['Deaths']))\nplt.plot(data_date_wise.index, np.log10(world_data['Recovered']))\nplt.title('Coronavirus Cases Over Time on Log Scale', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('No.of Cases (Logerithmic scale)', size=20)\nplt.xticks(size=12)\nplt.yticks(size=12)\nplt.legend(['Confirmed','Deaths','Recovered'])\n\nplt.show()","c4b3cc32":"plt.figure(figsize=(15, 12))\nplt.subplot(211)\nplt.bar(data_date_wise['Observation Date'],data_date_wise['daily_cases'])\nplt.title('World Daily Increases in Confirmed Cases ', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('No of Cases', size=15)\nplt.xticks(size=12)\nplt.yticks(size=12)\n\nplt.subplot(212)\nplt.bar(data_date_wise['Observation Date'],data_date_wise['daily_deaths'])\nplt.title('World Daily Increases in Deaths Cases ', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('No of Cases', size=15)\nplt.xticks(size=12)\nplt.yticks(size=12)\nplt.show()","f8462e41":"plt.figure(figsize=(15,6))\nplt.plot(data_date_wise[\"Confirmed\"].diff().fillna(0),label=\"Daily increase in Confiremd Cases\",marker='o')\nplt.plot(data_date_wise[\"Recovered\"].diff().fillna(0),label=\"Daily increase in Recovered Cases\",marker='*')\nplt.plot(data_date_wise[\"Deaths\"].diff().fillna(0),label=\"Daily increase in Death Cases\",marker='^')\nplt.xlabel(\"Timestamp\")\nplt.ylabel(\"Daily Increment\")\nplt.title(\"Daily increase in different Types of Cases Worldwide\")\nplt.xticks(rotation=90)\nplt.legend()\n\nprint(\"Average increase in number of Confirmed Cases every day: \",np.round(data_date_wise[\"Confirmed\"].diff().fillna(0).mean()))\nprint(\"Average increase in number of Recovered Cases every day: \",np.round(data_date_wise[\"Recovered\"].diff().fillna(0).mean()))\nprint(\"Average increase in number of Deaths Cases every day: \",np.round(data_date_wise[\"Deaths\"].diff().fillna(0).mean()))","0264c3e3":"daily_increase_confirm=[]\ndaily_increase_recovered=[]\ndaily_increase_deaths=[]\nfor i in range(data_date_wise.shape[0]-1):\n    daily_increase_confirm.append(((data_date_wise[\"Confirmed\"].iloc[i+1]\/data_date_wise[\"Confirmed\"].iloc[i])))\n    daily_increase_recovered.append(((data_date_wise[\"Recovered\"].iloc[i+1]\/data_date_wise[\"Recovered\"].iloc[i])))\n    daily_increase_deaths.append(((data_date_wise[\"Deaths\"].iloc[i+1]\/data_date_wise[\"Deaths\"].iloc[i])))\ndaily_increase_confirm.insert(0,1)\ndaily_increase_recovered.insert(0,1)\ndaily_increase_deaths.insert(0,1)\n\nplt.figure(figsize=(15,5))\nplt.plot(data_date_wise.index,daily_increase_confirm,label=\"Growth Factor Confiremd Cases\",marker='o')\nplt.plot(data_date_wise.index,daily_increase_recovered,label=\"Growth Factor Recovered Cases\",marker='*')\nplt.plot(data_date_wise.index,daily_increase_deaths,label=\"Growth Factor Death Cases\",marker='^')\nplt.xlabel(\"Timestamp\")\nplt.ylabel(\"Growth Factor\")\nplt.title(\"Growth Factor of different Types of Cases Worldwide\")\nplt.axhline(1,linestyle='--',color='black',label=\"Baseline\")\nplt.xticks(rotation=90)\nplt.legend()","05655899":"# Calculate Mortality rate and Recovery rate\n\nmortality_rate=(data_date_wise.Deaths\/data_date_wise.Confirmed)*100\nrecovery_rate=(data_date_wise.Recovered\/data_date_wise.Confirmed)*100\n\nmean_mortality_rate = np.mean(mortality_rate)\nmean_recovery_rate=np.mean(recovery_rate)\n\nplt.figure(figsize=(15, 7))\n\nplt.subplot(121)\nplt.plot(data_date_wise['Observation Date'], mortality_rate, color='orange')\nplt.axhline(y = mean_mortality_rate,linestyle='--', color='black')\nplt.title('Mortality Rate of Coronavirus Over Time', size=20)\nplt.legend(['mortality rate', 'y='+str(mean_mortality_rate)], prop={'size': 10})\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('Mortality Rate', size=15)\nplt.xticks(size=12)\nplt.yticks(size=12)\n\nplt.subplot(122)\nplt.plot(data_date_wise['Observation Date'], recovery_rate, color='blue')\nplt.axhline(y = mean_recovery_rate,linestyle='--', color='black')\nplt.title('Recovery Rate of Coronavirus Over Time', size=20)\nplt.legend(['recovery rate', 'y='+str(mean_recovery_rate)], prop={'size': 10})\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('Recovery Rate', size=15)\nplt.xticks(size=12)\nplt.yticks(size=12)\nplt.show()","4fd86d43":"plt.plot(data_date_wise['Confirmed'],data_date_wise['Deaths'])\n#plt.scatter(data_date_wise['Confirmed'],data_date_wise['Deaths'])\nplt.xlabel(\"Confirmed cases\")\nplt.ylabel(\"Deaths\")\nplt.title(\"Confirmed vs Deaths\")\nplt.show()","a78830f5":"plt.plot(data_date_wise['Recovered'],data_date_wise['Deaths'])\n#plt.scatter(data_date_wise['Confirmed'],data_date_wise['Deaths'])\nplt.xlabel(\"Confirmed cases\")\nplt.ylabel(\"Deaths\")\nplt.title(\"Confirmed vs Recoveries\")\nplt.show()","10063027":"date_country_wise=data.groupby(['Observation Date','Country'])[main_cols].sum().reset_index(drop=None)\ndate_country_wise[['Confirmed','Deaths','Recovered']]=date_country_wise[['Confirmed','Deaths','Recovered']].astype(int)\ndate_country_wise['Confirmed']=date_country_wise['Confirmed'].replace(np.nan, 0, regex=True)\ndate_country_wise['Deaths']=date_country_wise['Deaths'].replace(np.nan, 0, regex=True)\ndate_country_wise['Recovered']=date_country_wise['Recovered'].replace(np.nan, 0, regex=True)\n\n#Rest of the world\nrest_of_the_world=date_country_wise.loc[date_country_wise['Country']!='China']\nrest_of_the_world_n=rest_of_the_world.groupby(['Observation Date'])[main_cols].sum().reset_index()\nrest_of_the_world_n['daily_cases']=rest_of_the_world_n.Confirmed.diff()\nrest_of_the_world_n['daily_deaths']=rest_of_the_world_n.Deaths.diff()\nrest_of_the_world_n['daily_recoveries']=rest_of_the_world_n.Recovered.diff()\n\n# China \nchina=date_country_wise[date_country_wise['Country']=='China']\nchina_n=china.groupby(['Observation Date'])[main_cols].sum().reset_index()\nchina_n['daily_cases']=china_n.Confirmed.diff()\nchina_n['daily_deaths']=china_n.Deaths.diff()\nchina_n['daily_recoveries']=china_n.Recovered.diff()\n","1712e526":"plt.figure(figsize=(8,6))\nplt.bar('China', china_n['Confirmed'])\nplt.bar('Rest of the world', rest_of_the_world_n['Confirmed'])\nplt.title('No of Coronavirus Confirmed Cases', size=20)\nplt.xlabel('Country', fontsize=15)\nplt.ylabel('No of Case',fontsize=15)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","a2892381":"us=date_country_wise[date_country_wise['Country']=='US']\nus_n=us.groupby(['Observation Date'])[main_cols].sum().reset_index()\nus_n['daily_cases']=us_n.Confirmed.diff()\nus_n['daily_deaths']=us_n.Deaths.diff()\nus_n['daily_recoveries']=us_n.Recovered.diff()\n#us_n.tail()\n\nf, ax = plt.subplots(figsize=(10, 8))\nbar1=plt.plot(us_n.index,us_n.Confirmed,color='purple')\nbar2=plt.plot(us_n.index,us_n.Active,color='orange')\nbar3=plt.plot(us_n.index,us_n.Recovered,color='g')\nbar4=plt.plot(us_n.index,us_n.Deaths,color='r')\nax.legend(['Confirmed','Active','Recovered','Deaths'],loc='best')\nplt.xlabel(\"Since 22\/1\",fontsize=15)\nplt.ylabel(\"No of Cases\",fontsize=15)\nplt.title('US Corona Virus Cases - Confirmed, Active, Recovered and Deaths ', fontsize=20)\nplt.xticks(rotation=45)\nplt.show()","2b5eb27d":"italy=date_country_wise[date_country_wise['Country']=='Italy']\nitaly_n=italy.groupby(['Observation Date'])[main_cols].sum().reset_index()\nitaly_n['daily_cases']=italy_n.Confirmed.diff()\nitaly_n['daily_deaths']=italy_n.Deaths.diff()\nitaly_n['daily_recoveries']=italy_n.Recovered.diff()\n\nf, ax = plt.subplots(figsize=(10, 8))\nbar1=plt.plot(italy_n.index,italy_n.Confirmed,color='purple')\nbar2=plt.plot(italy_n.index,italy_n.Active,color='orange')\nbar3=plt.plot(italy_n.index,italy_n.Recovered,color='g')\nbar4=plt.plot(italy_n.index,italy_n.Deaths,color='r')\nax.legend(['Confirmed','Active','Recovered','Deaths'],loc='best')\nplt.xlabel(\"Since 22\/1\",fontsize=15)\nplt.ylabel(\"No of Cases\",fontsize=15)\nplt.title('Italy Corona Virus Cases - Confirmed, Active, Recovered and Deaths ',fontsize=20)\nplt.xticks(rotation=45)\nplt.show()","868c920c":"spain=date_country_wise[date_country_wise['Country']=='Spain']\nspain_n=spain.groupby(['Observation Date'])[main_cols].sum().reset_index()\nspain_n['daily_cases']=spain_n.Confirmed.diff()\nspain_n['daily_deaths']=spain_n.Deaths.diff()\nspain_n['daily_recoveries']=spain_n.Recovered.diff()\nspain_n.nlargest(5,'Confirmed')\n\nf, ax = plt.subplots(figsize=(10, 8))\nbar1=plt.plot(spain_n.index,spain_n.Confirmed,color='purple')\nbar2=plt.plot(spain_n.index,spain_n.Active,color='orange')\nbar3=plt.plot(spain_n.index,spain_n.Recovered,color='g')\nbar4=plt.plot(spain_n.index,spain_n.Deaths,color='r')\nax.legend(['Confirmed','Active','Recovered','Deaths'],loc='best')\nplt.xlabel(\"Since 22\/1\",fontsize=15)\nplt.ylabel(\"No of Cases\",fontsize=15)\nplt.title('Spain Corona Virus Cases - Confirmed, Active, Recovered and Deaths ', fontsize=20)\nplt.xticks(rotation=45)\nplt.show()","b7c511f1":"germany=date_country_wise[date_country_wise['Country']=='Germany']\ngermany_n=germany.groupby(['Observation Date'])[main_cols].sum().reset_index()\ngermany_n['daily_cases']=germany_n.Confirmed.diff()\ngermany_n['daily_deaths']=germany_n.Deaths.diff()\ngermany_n['daily_recoveries']=germany_n.Recovered.diff()\ngermany_n.nlargest(5,'Confirmed')\n\nf, ax = plt.subplots(figsize=(10, 8))\nbar1=plt.plot(germany_n.index,germany_n.Confirmed,color='purple')\nbar2=plt.plot(germany_n.index,germany_n.Active,color='orange')\nbar3=plt.plot(germany_n.index,germany_n.Recovered,color='g')\nbar4=plt.plot(germany_n.index,germany_n.Deaths,color='r')\nax.legend(['Confirmed','Active','Recovered','Deaths'],loc='best')\nplt.xlabel(\"Since 22\/1\",fontsize=15)\nplt.ylabel(\"No of Cases\",fontsize=15)\nplt.title('Germany Corona Virus Cases - Confirmed, Active, Recovered and Deaths ', fontsize=20)\nplt.xticks(rotation=45)\nplt.show()","3fd5f415":"france=date_country_wise[date_country_wise['Country']=='France']\nfrance_n=france.groupby(['Observation Date'])[main_cols].sum().reset_index()\nfrance_n['daily_cases']=france_n.Confirmed.diff()\nfrance_n['daily_deaths']=france_n.Deaths.diff()\nfrance_n['daily_recoveries']=france_n.Recovered.diff()\nfrance_n.nlargest(5,'Confirmed')\n\nf, ax = plt.subplots(figsize=(10, 8))\nbar1=plt.plot(france_n.index,france_n.Confirmed,color='purple')\nbar2=plt.plot(france_n.index,france_n.Active,color='orange')\nbar3=plt.plot(france_n.index,france_n.Recovered,color='g')\nbar4=plt.plot(france_n.index,france_n.Deaths,color='r')\nax.legend(['Confirmed','Active','Recovered','Deaths'],loc='best')\nplt.xlabel(\"Since 22\/1\",fontsize=15)\nplt.ylabel(\"No of Cases\",fontsize=15)\nplt.title('France Corona Virus Cases - Confirmed, Active, Recovered and Deaths ', fontsize=20)\nplt.xticks(rotation=45)\nplt.show()","90756859":"uk=date_country_wise[date_country_wise['Country']=='UK']\nuk_n=uk.groupby(['Observation Date'])[main_cols].sum().reset_index()\nuk_n['daily_cases']=uk_n.Confirmed.diff()\nuk_n['daily_deaths']=uk_n.Deaths.diff()\nuk_n['daily_recoveries']=uk_n.Recovered.diff()\nuk_n.nlargest(5,'Confirmed')\n\nf, ax = plt.subplots(figsize=(10, 8))\nbar1=plt.plot(uk_n.index,uk_n.Confirmed,color='purple')\nbar2=plt.plot(uk_n.index,uk_n.Active,color='orange')\nbar3=plt.plot(uk_n.index,uk_n.Recovered,color='g')\nbar4=plt.plot(uk_n.index,uk_n.Deaths,color='r')\nax.legend(['Confirmed','Active','Recovered','Deaths'],loc='best')\nplt.xlabel(\"Since 22\/1\",fontsize=15)\nplt.ylabel(\"No of Cases\",fontsize=15)\nplt.title(' UK Corona Virus Cases - Confirmed, Active, Recovered and Deaths ', fontsize=20)\nplt.xticks(rotation=45)\nplt.show()","a49714b9":"f, ax = plt.subplots(figsize=(10, 8))\nbar1=plt.plot(china_n.index,china_n.Confirmed,color='purple')\nbar2=plt.plot(china_n.index,china_n.Active,color='y')\nbar3=plt.plot(china_n.index,china_n.Recovered,color='g')\nbar4=plt.plot(china_n.index,china_n.Deaths,color='r')\nax.legend(['Confirmed','Active','Recovered','Deaths'],loc='best')\nplt.xlabel(\"Since 22\/1\",fontsize=15)\nplt.ylabel(\"No of Cases\",fontsize=15)\nplt.title('China Corona Virus Cases - Confirmed, Active, Recovered and Deaths ',fontsize=20)\nplt.xticks(rotation=45)\nplt.show()","93b4660a":"india=date_country_wise[date_country_wise['Country']=='India']\nindia_n=india.groupby(['Observation Date'])[main_cols].sum().reset_index()\nindia_n['daily_cases']=india_n.Confirmed.diff()\nindia_n['daily_deaths']=india_n.Deaths.diff()\nindia_n['daily_recoveries']=india_n.Recovered.diff()\nindia_n.nlargest(5,'Confirmed')\n\nf, ax = plt.subplots(figsize=(10, 8))\nbar1=plt.plot(india_n.index,india_n.Confirmed,color='Purple')\nbar2=plt.plot(india_n.index,india_n.Active,color='orange')\nbar3=plt.plot(india_n.index,india_n.Recovered,color='g')\nbar4=plt.plot(india_n.index,india_n.Deaths,color='r')\nax.legend(['Confirmed','Active','Recovered','Deaths'],loc='best')\nplt.xlabel(\"Since 22\/1\",fontsize=15)\nplt.ylabel(\"No of Cases\",fontsize=15)\nplt.title('India Corona Virus Cases - Confirmed, Active, Recovered and Deaths ', fontsize=20)\nplt.xticks(rotation=45)\nplt.show()","7033820b":"plt.figure(figsize=(15, 12))\nplt.subplot(211)\nplt.plot(india_n.index,india_n['daily_cases'])\nplt.plot(china_n.index,china_n['daily_cases'])\nplt.plot(us_n.index,us_n['daily_cases'])\nplt.plot(spain_n.index,spain_n['daily_cases'])\nplt.plot(italy_n.index,italy_n['daily_cases'])\nplt.plot(germany_n.index,germany_n['daily_cases'])\nplt.plot(france_n.index,france_n['daily_cases'])\nplt.plot(uk_n.index,uk_n['daily_cases'])\nplt.title('Daily Increases in Confirmed Cases ', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('No. of Cases', size=15)\nplt.xticks(size=12)\nplt.yticks(size=12)\nplt.legend(['India','China','US','Spain','Italy','Germany','France','UK'])\n\nplt.subplot(212)\nplt.plot(india_n.index,india_n['daily_deaths'])\nplt.plot(china_n.index,china_n['daily_deaths'])\nplt.plot(us_n.index,us_n['daily_deaths'])\nplt.plot(spain_n.index,spain_n['daily_deaths'])\nplt.plot(italy_n.index,italy_n['daily_deaths'])\nplt.plot(germany_n.index,germany_n['daily_deaths'])\nplt.plot(france_n.index,france_n['daily_deaths'])\nplt.plot(uk_n.index,uk_n['daily_deaths'])\nplt.title('Daily Increases in Deaths Cases ', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('No. of Cases', size=15)\nplt.xticks(size=12)\nplt.yticks(size=12)\nplt.legend(['India','China','US','Spain','Italy','Germany','France','Uk'])\nplt.show()","c5c0e976":"plt.figure(figsize=(10,25))\n\nplt.subplot(3,1,1)\nplt.plot(india_n.index,india_n['Confirmed'],label='India',color='green')\nplt.plot(china_n.index,china_n['Confirmed'],label='China',color='red')\nplt.plot(italy_n.index,italy_n['Confirmed'],label='Italy',color='brown')\nplt.plot(spain_n.index,spain_n['Confirmed'],label='Spain',color='black')\nplt.plot(germany_n.index,germany_n['Confirmed'],label='Germany',color='blue')\nplt.plot(france_n.index,france_n['Confirmed'],label='Germany',color='orange')\nplt.plot(uk_n.index,uk_n['Confirmed'],label='Germany',color='purple')\nplt.plot(us_n.index,us_n['Confirmed'],label='US',color='magenta')\nplt.xlabel('Date')\nplt.ylabel('Number of Cases')\nplt.title('Comparison between Confirmed Cases',fontsize=20)\nplt.legend(loc='best')\nplt.xticks(rotation=45)\n\nplt.subplot(3,1,2)\nplt.plot(india_n.index,india_n['Recovered'],label='India',color='green')\nplt.plot(china_n.index,china_n['Recovered'],label='China',color='red')\nplt.plot(italy_n.index,italy_n['Recovered'],label='Italy',color='brown')\nplt.plot(spain_n.index,spain_n['Recovered'],label='Spain',color='black')\nplt.plot(germany_n.index,germany_n['Recovered'],label='Germany',color='blue')\nplt.plot(france_n.index,france_n['Recovered'],label='Germany',color='orange')\nplt.plot(uk_n.index,uk_n['Recovered'],label='Germany',color='purple')\nplt.plot(us_n.index,us_n['Recovered'],label='US',color='magenta')\nplt.xlabel('Date')\nplt.ylabel('Number of Cases')\nplt.title('Comparison between Recovered Cases',fontsize=20)\nplt.legend(loc='best')\nplt.xticks(rotation=45)\n\nplt.subplot(3,1,3)\nplt.plot(india_n.index,india_n['Deaths'],label='India',color='green')\nplt.plot(china_n.index,china_n['Deaths'],label='China',color='red')\nplt.plot(italy_n.index,italy_n['Deaths'],label='Italy',color='brown')\nplt.plot(spain_n.index,spain_n['Deaths'],label='Spain',color='black')\nplt.plot(germany_n.index,germany_n['Deaths'],label='Germany',color='blue')\nplt.plot(france_n.index,france_n['Deaths'],label='Germany',color='orange')\nplt.plot(uk_n.index,uk_n['Deaths'],label='Germany',color='purple')\nplt.plot(us_n.index,us_n['Deaths'],label='US',color='magenta')\nplt.xlabel('Date')\nplt.ylabel('Number of Cases')\nplt.title('Comparison between Deaths Cases',fontsize=20)\nplt.legend(loc='best')\nplt.xticks(rotation=45)\nplt.show()","b32a849d":"italy_n['Death Rate in Italy'] = ((italy_n['Deaths']\/italy_n['Confirmed'])*100)\ngermany_n['Death Rate in Germany'] = (germany_n['Deaths']\/germany_n['Confirmed'])*100\nspain_n['Death Rate in Spain'] = (spain_n['Deaths']\/spain_n['Confirmed'])*100\nus_n['Death Rate in US'] = (us_n['Deaths']\/us_n['Confirmed'])*100\nfrance_n['Death Rate in France'] = (france_n['Deaths']\/france_n['Confirmed'])*100\nuk_n['Death Rate in UK'] = (uk_n['Deaths']\/uk_n['Confirmed'])*100\nindia_n['Death Rate in India'] = (india_n['Deaths']\/india_n['Confirmed'])*100\nchina_n['Death Rate in China'] = (china_n['Deaths']\/china_n['Confirmed'])*100\nrest_of_the_world_n['Death Rate in Outside China'] = (rest_of_the_world_n['Deaths']\/rest_of_the_world_n['Confirmed'])*100\n\n#Recoveries\nitaly_n['Recovery Rate in Italy'] = ((italy_n['Recovered']\/italy_n['Confirmed'])*100)\ngermany_n['Recovery Rate in Germany'] = (germany_n['Recovered']\/germany_n['Confirmed'])*100\nspain_n['Recovery Rate in Spain'] = (spain_n['Recovered']\/spain_n['Confirmed'])*100\nus_n['Recovery Rate in US'] = (us_n['Recovered']\/us_n['Confirmed'])*100\nfrance_n['Recovery Rate in France'] = (france_n['Recovered']\/france_n['Confirmed'])*100\nuk_n['Recovery Rate in UK'] = (uk_n['Recovered']\/uk_n['Confirmed'])*100\nindia_n['Recovery Rate in India'] = (india_n['Recovered']\/india_n['Confirmed'])*100\nchina_n['Recovery Rate in China'] = (china_n['Recovered']\/china_n['Confirmed'])*100\nrest_of_the_world_n['Recovery Rate in Outside China'] = (rest_of_the_world_n['Recovered']\/rest_of_the_world_n['Confirmed'])*100","c38f5d93":"plt.figure(figsize=(15, 12))\nplt.subplot(211)\nplt.plot(india_n.index,india_n['Death Rate in India'])\nplt.plot(china_n.index,china_n['Death Rate in China'])\nplt.plot(us_n.index,us_n['Death Rate in US'])\nplt.plot(spain_n.index,spain_n['Death Rate in Spain'])\nplt.plot(italy_n.index,italy_n['Death Rate in Italy'])\nplt.plot(germany_n.index,germany_n['Death Rate in Germany'])\nplt.plot(france_n.index,france_n['Death Rate in France'])\nplt.plot(uk_n.index,uk_n['Death Rate in UK'])\nplt.title('Death Rate in deifferent Countries ', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('No. of Cases', size=15)\nplt.xticks(size=12)\nplt.yticks(size=12)\nplt.legend(['India','China','US','Spain','Italy','Germany','France','UK'])","95b5dae8":"plt.figure(figsize=(15, 12))\nplt.subplot(211)\nplt.plot(india_n.index,india_n['Recovery Rate in India'])\nplt.plot(china_n.index,china_n['Recovery Rate in China'])\nplt.plot(us_n.index,us_n['Recovery Rate in US'])\nplt.plot(spain_n.index,spain_n['Recovery Rate in Spain'])\nplt.plot(italy_n.index,italy_n['Recovery Rate in Italy'])\nplt.plot(germany_n.index,germany_n['Recovery Rate in Germany'])\nplt.plot(france_n.index,france_n['Recovery Rate in France'])\nplt.plot(uk_n.index,uk_n['Recovery Rate in UK'])\nplt.title('Recovery Rate in deifferent Countries', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('No. of Cases', size=15)\nplt.xticks(size=12)\nplt.yticks(size=12)\nplt.legend(['India','China','US','Spain','Italy','Germany','France','UK'])","89d8059d":"plt.figure(figsize=(15, 12))\nplt.subplot(211)\nplt.plot(rest_of_the_world_n.index,rest_of_the_world_n['Death Rate in Outside China'])\nplt.plot(china_n.index,china_n['Death Rate in China'])\nplt.title('Recovery Rate : Chian vs Outside China', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('No. of Cases', size=15)\nplt.xticks(size=12)\nplt.yticks(size=12)\nplt.legend(['Outside of China','China'])","8e9d85a3":"plt.figure(figsize=(15, 12))\nplt.subplot(211)\nplt.plot(rest_of_the_world_n.index,rest_of_the_world_n['Death Rate in Outside China'])\nplt.plot(china_n.index,china_n['Death Rate in China'])\nplt.title('Daeth Rate : Chian vs Outside China', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('No. of Cases', size=15)\nplt.xticks(size=12)\nplt.yticks(size=12)\nplt.legend(['Outside of China','China'])","057de62a":"date=np.array(data_date_wise[\"Observation Date\"]).reshape(-1,1)\n\nsince_21 = np.array([i for i in range(len(date))]).reshape(-1, 1)\nconfirmed_world= np.array(data_date_wise[\"Confirmed\"]).reshape(-1, 1)\ndeaths_world = np.array(data_date_wise[\"Deaths\"]).reshape(-1, 1)\nrecovered_world = np.array(data_date_wise[\"Recovered\"]).reshape(-1, 1)\n","80d1b328":"days_in_future = 10\nfuture_forcast = np.array([i for i in range(len(date)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-10]\n\nadjusted_dates=adjusted_dates.reshape(1, -1)[0]\nadjusted_dates","d7333ebf":"# Creating future forcast dates\nstart = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","9ee22fb7":"X_train, X_test, y_train, y_test = train_test_split(since_21, confirmed_world,test_size=0.2, random_state=0) ","34cd1a84":"# Transform our data for polynomial regression\npoly_reg=PolynomialFeatures(degree=4)\npoly_X_train = poly_reg.fit_transform(X_train)\npoly_X_test = poly_reg.fit_transform(X_test)\npoly_future_forcast = poly_reg.fit_transform(future_forcast)","9535aaea":"# polynomial regression\n\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model.fit(poly_X_train, y_train)\ntest_linear_pred = linear_model.predict(poly_X_test)\nlinear_pred = linear_model.predict(poly_future_forcast)","8c4691c0":"print('MAE:', mean_absolute_error(test_linear_pred, y_test))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test))\nprint('R2 Score :',r2_score(y_test,test_linear_pred ))","2e04d03b":"linear_pred = linear_pred.reshape(1,-1)[0]\nprint('Polynomial Regression future predictions:')\nset(zip(future_forcast_dates[-10:], np.round(linear_pred[-10:])))","0022a457":"plt.figure(figsize=(8, 8))\n\nplt.plot(adjusted_dates,confirmed_world)\nplt.plot(future_forcast, linear_pred, linestyle='dashed', color='green')\nplt.title('Coronavirus Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('No of Cases', size=20)\nplt.legend(['Confirmed Cases', 'Polynomial Regression Predictions'], prop={'size': 20})\nplt.xticks(size=12)\nplt.yticks(size=12)\n\nplt.show()","647c4124":"X_train, X_test, y_train, y_test = train_test_split(since_21, deaths_world,test_size=0.2, random_state=0)","441373ba":"# Transform our data for polynomial regression\npoly_reg=PolynomialFeatures(degree=4)\npoly_X_train = poly_reg.fit_transform(X_train)\npoly_X_test = poly_reg.fit_transform(X_test)\npoly_future_forcast = poly_reg.fit_transform(future_forcast)","f78c889d":"# polynomial regression\n\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model.fit(poly_X_train, y_train)\ntest_linear_pred = linear_model.predict(poly_X_test)\nlinear_pred = linear_model.predict(poly_future_forcast)","cf00475a":"print('MAE:', mean_absolute_error(test_linear_pred, y_test))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test))\nprint('R2 Score :',r2_score(y_test,test_linear_pred ))","f99632ce":"linear_pred = linear_pred.reshape(1,-1)[0]\nprint('Polynomial Regression future predictions:')\nset(zip(future_forcast_dates[-10:], np.round(linear_pred[-10:])))","477e9d27":"plt.figure(figsize=(8, 8))\n\nplt.plot(adjusted_dates,deaths_world)\nplt.plot(future_forcast, linear_pred, linestyle='dashed', color='green')\nplt.title('Coronavirus Deaths Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('No of Cases', size=20)\nplt.legend(['Deaths Cases', 'Polynomial Regression Predictions'], prop={'size': 20})\nplt.xticks(size=12)\nplt.yticks(size=12)\n\nplt.show()","5be37ce5":"# Confirmed cases\nconf= confirmed_data.melt(id_vars=[\"Province\/State\", \"Country\/Region\", \"Lat\", \"Long\"], var_name=\"Date\", value_name=\"Confirmed\")\nconf['Date'] = pd.to_datetime(conf['Date']).dt.date\nconf.rename(columns={'Country\/Region':'Country'},inplace=True)\n\n# Recovered Cases\nrecover= recovered_data.melt(id_vars=[\"Province\/State\", \"Country\/Region\", \"Lat\", \"Long\"], var_name=\"Date\", value_name=\"Recovered\")\nrecover['Date'] = pd.to_datetime(recover['Date']).dt.date\nrecover.rename(columns={'Country\/Region':'Country'},inplace=True)\n\n# Deaths\ndeath= deaths_data.melt(id_vars=[\"Province\/State\", \"Country\/Region\", \"Lat\", \"Long\"], var_name=\"Date\", value_name=\"Deaths\")\ndeath['Date'] = pd.to_datetime(death['Date']).dt.date\ndeath.rename(columns={'Country\/Region':'Country'},inplace=True)\n\ncovid=conf.merge(death).merge(recover)\n#print(\"Size\/Shape of the dataset: \",covid.shape)\n#print(\"Checking for null values:\\n\",covid.isnull().sum())\n#print(\"Checking Data-type of each column:\\n\",covid.dtypes)","ba2ceb34":"world_map = folium.Map(location=[10, -20], zoom_start=2.3,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(covid['Lat'], covid['Long'], covid['Confirmed'], covid['Country']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(world_map)\nworld_map\n","ae0d09b8":"world_map = folium.Map(location=[10, -20], zoom_start=2.3,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(covid['Lat'], covid['Long'], covid['Deaths'], covid['Country']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Deaths Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='green',\n                        \n                        fill_color='green',\n                        fill_opacity=0.3 ).add_to(world_map)\nworld_map\n","6e0c9bd2":"world_map = folium.Map(location=[10, -20], zoom_start=2.3,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(covid['Lat'], covid['Long'], covid['Recovered'], covid['Country']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Recovered Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='blue',\n                        \n                        fill_color='blue',\n                        fill_opacity=0.5 ).add_to(world_map)\nworld_map","cfbc86a0":"### Latest data of Corona Virus\n\n**Total number of confirmed cases, deaths reported, revoveries and active cases all across the world**","bd63717d":"### Recovery Rate in deifferent Countries Over Time","db5dff4b":"### Datewise Analysis ","9a1737a1":"### Map Visualization : Recovered Cases","056bdcdb":"### US: Confirmed vs Recovered vs Deaths and Active cases","654f086d":"### Daily Increase: Confirmed vs Deaths vs Recovered","00fc4d12":"### Future Forecasting using Machine Learning","e51c8a7b":"Coronaviruses (CoV) are a large family of viruses that cause illness ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS-CoV) and Severe Acute Respiratory Syndrome (SARS-CoV). A novel coronavirus (nCoV) is a new strain that has not been previously identified in humans. The virus identified as the cause of the recent outbreak is being referred to as 2019-nCoV.\n\nA virus that was first reported in the Chinese city of Wuhan, has now spread to more than a dozen countries across the world, sparking an unprecedented health and economic crisis which later declared as Pandemic by WHO due to high rate spreads throughout the world. Currently (on date 14 April 2020), this leads to more than a 1.9 million infected cases and 1.2 million Deaths across the globe. Pandemic is spreading all over the world.\n\n","260b2096":"### Daily Increases in Confirmed Cases and Deaths in Different Countries Over Time","46bbde35":"### Import Libraries","e40826f7":"### Spain: Confirmed vs Recovered vs Deaths and Active cases","3bb1e677":"### Death Rate in deifferent Countries Over Time","32b6244f":"**Conclusion:**\n\n**A large number of infected people in China have recovered and as of now China as very few active cases. COVID-19 doesn't have very high mortality rate as we can see which the most positive take away. Also the healthily growing Recovery Rate implies the disease is curable. The only matter of concern is the exponential growth rate of infection.**\n\n**Countries like US, Italy, Spain, Germany,France and UK are facing some serious trouble in containing the disease showing how deadly the negligence can lead to. The need of the hour is to perform COVID-19 pandemic controlling practices like Testing, Contact Tracing and Quarantine with a speed greater than the speed of disease spread at each country level.**\n\n\n**Prevention:**\n\n**To avoid the critical situation people are suggested to do following things**\n\n**Avoid contact with people who are sick. Avoid touching your eyes, nose, and mouth. Stay home when you are sick. Cover your cough or sneeze with a tissue, then throw the tissue in the trash. Clean and disinfect frequently touched objects and surfaces using a regular household Wash your hands often with soap and water, especially after going to the bathroom; before eating; and after blowing your nose, coughing, or sneezing. If soap and water are not readily available, use an alcohol-based hand sanitizer.**","66f4c3d6":"### Reading Datasets","4fc014e7":"### Map Visualization : Death Cases","c432d55f":"### Map Visualization","5bf2ad75":"## DateWise Analysis","7f2171de":"### UK: Confirmed vs Recovered vs Deaths and Active cases","21d666e7":"### Italy: Confirmed vs Recovered vs Deaths and Active cases","debc9b3b":"## Countrywise Analysis\n**US now leads with highest confirmed cases all over the world follwing Spain, Italy, France, Germany and UK. This scenario is in total contrast to the initial days when China accounted for nearly 99% of the cases. China moved to 7th place with respect to the number of confirmed cases as UK takes over**","014a9c2f":"### **Symptoms of Corona Virus**","076acbf2":"### Daily Increases in Confirmed Cases and Deaths Worldwide","0571f509":"#### Splitting Data for Confirmed Cases","c2b21599":"### Statstics Analysis across the World","7fdb0eea":"### Mortality Rate and Recovery Rate across the World Over Time","9526795f":"#### Future prediction for Deaths","ebc8196f":"### Polynomial Regression","1ee838d4":"### Description of Data","feb6c5c3":"### Death Rate in China and Rest of the World Over Time","d3fbe1da":"#### Spliting Data for Deaths","e4a8eb70":"### China: Confirmed vs Recovered vs Deaths and Active cases","60cc0202":"**There is no strong correlation between any of the variables except for Confirmed, Deaths and Recovered variables**","462a27ff":"### Correlation Analysis","e28d0596":"### Top 10 Infected Countries","7179a180":"### Top 10 infected countries: Confirmed vs Deaths vs Recovered ","cd629d45":"### France: Confirmed vs Recovered vs Deaths and Active cases","12cebbbb":"#### Future Prediction for Confirmed Cases","268bf1cd":"### Confirmed vs Recoveries","8bdc6f44":"### Confirmed vs Deaths","b61e45e9":"### Comparison of Confirmed Cases between China and Rest of the World ","c6816964":"### Statstics Analysis (US vs China vs Italy vs Spain vs Germany vs France vs UK vs India)","18ebba6b":"### Data Exploration\/Analysis","a87e9e52":"### Germany: Confirmed vs Recovered vs Deaths and Active cases","7974d0ef":"### India: Confirmed vs Recovered vs Deaths and Active cases","d2755e3c":"### Polynomial Regression","b02c6914":"### Total impacted countries across the world \n\n**A total of 220 countries have been impacted uptill now.**","7d177753":"### Mortality Rate Analysis Country wise ","c32997c4":"### Recovery Rate in China and Rest of the World Over Time","459edb48":"### Growth Factor of different Types of Cases Worldwide","096a3bee":"### Corona virus cases: Confirmed, Deaths, Recovered and Active ","215a7088":"### Map Visualization : Confirmed Cases"}}