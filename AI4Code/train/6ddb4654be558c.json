{"cell_type":{"faf8fe04":"code","a1d8180a":"code","1fe69c06":"code","bf6923e6":"code","d3ec325d":"code","45f5eff6":"code","810b52fc":"code","1b7deed0":"code","f2952a16":"code","5968189c":"code","2a4790fb":"code","913843b1":"code","69d3ac49":"markdown","c25d14d7":"markdown","ade92328":"markdown","6bdaf2b0":"markdown"},"source":{"faf8fe04":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport sklearn\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import KFold","a1d8180a":"tabular_columns = ['Subject Focus', 'Eyes', 'Face', 'Near', 'Action', 'Accessory', 'Group', 'Collage', 'Human', 'Occlusion', 'Info', 'Blur']\nimage_size = 224\nbatch_size = 128","1fe69c06":"test = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/sample_submission.csv\")\ntest[\"file_path\"] = test[\"Id\"].apply(lambda identifier: \"..\/input\/petfinder-pawpularity-score\/test\/\" + identifier + \".jpg\")\ntest.head()","bf6923e6":"efficient_net = tf.keras.applications.EfficientNetB0(\n    weights = \"..\/input\/efficientnet-b0-for-keras-no-top\/efficientnetb0_notop.h5\", \n    include_top = False, \n    input_shape = (image_size, image_size, 3)\n)    \nefficient_net.trainable = False\nefficient_net.summary()","d3ec325d":"keras.utils.plot_model(efficient_net, show_shapes=True)","45f5eff6":"def get_image_prediction_model(inputs):\n    x = efficient_net(inputs)\n    x = tf.keras.layers.GlobalAveragePooling2D()(x)\n    x = tf.keras.layers.Dropout(0.0)(x)\n    return x","810b52fc":"def get_tabular_prediciton_model(inputs):\n    width = 32\n    depth = 3\n    activation = \"relu\"\n    kernel_regularizer = keras.regularizers.l2()\n    x = keras.layers.Dense(\n            width, \n            activation=activation,\n            kernel_regularizer=kernel_regularizer\n        )(inputs)\n    for i in range(depth):\n        if i == 0:\n            x = inputs\n        x = keras.layers.Dense(\n            width, \n            activation=activation,\n            kernel_regularizer=kernel_regularizer\n        )(x)\n        if (i + 1) % 3 == 0:\n            x = keras.layers.Concatenate()([x, inputs])\n    return x","1b7deed0":"def get_model():\n    image_inputs = tf.keras.Input((image_size, image_size , 3))\n    tabular_inputs = tf.keras.Input(len(tabular_columns))\n    image_x = get_image_prediction_model(image_inputs)\n    tabular_x = get_tabular_prediciton_model(tabular_inputs)\n    x = tf.keras.layers.Concatenate(axis=1)([image_x, tabular_x])\n    output = tf.keras.layers.Dense(1)(x)\n    model = tf.keras.Model(inputs=[image_inputs, tabular_inputs], outputs=[output])\n    optimizer = tf.keras.optimizers.Adam(1e-3)\n    model.compile(loss=rmse, optimizer=optimizer, metrics=[\"mae\", \"mape\"])\n    return model","f2952a16":"def rmse(y_true, y_pred):\n    return tf.sqrt(tf.reduce_mean((y_true -  y_pred) ** 2))","5968189c":"def preprocess_test_data(image_url, tabular):\n    print(image_url, tabular)\n    image_string = tf.io.read_file(image_url)\n    image = tf.image.decode_jpeg(image_string, channels=3)\n    image = tf.image.central_crop(image, 1.0)\n    image = tf.image.resize(image, (image_size, image_size))\n    # 0 won't be used in prediction, but it's needed in this senario or the tabular variable is treated as label.\n    return (image, tabular), 0","2a4790fb":"test_ds = tf.data.Dataset.from_tensor_slices((test[\"file_path\"], test[tabular_columns])).map(preprocess_test_data).batch(batch_size).cache().prefetch(2)","913843b1":"total_results = []\nfor i in [0, 1, 2, 4]:\n    model = get_model()\n    model.load_weights(\"..\/input\/petfinder-efficientnet-model\/petfinder_efficientnet_model_%d.h5\"%(i))\n    results = model.predict(test_ds).reshape(-1)\n    total_results.append(results)\nresults = np.mean(total_results, axis=0).reshape(-1)\nsample_submission[\"Pawpularity\"] = results\nsample_submission.to_csv(\"submission.csv\", index=False)\n","69d3ac49":"### The Pawpularity Model","c25d14d7":"### The Image Prediciton Model","ade92328":"### The Efficient Net Model","6bdaf2b0":"### The Tabular Prediciton Model"}}