{"cell_type":{"b8023ee2":"code","c7067a20":"code","61d1d1e6":"code","90c9a05e":"code","88154e2a":"code","ced576bd":"code","67e7bc36":"code","3d361f49":"code","136824ce":"code","2a4c91a1":"code","4a8d734f":"code","9fba2a8e":"code","a28e3cf6":"code","25cdb86d":"code","f42612a0":"code","7440501b":"code","5235647c":"code","8998778f":"code","e9a76494":"code","67fbd9e1":"code","c50648c6":"code","f9b7f8ee":"code","72c81f8a":"code","b02b0bae":"code","53953445":"code","17d4d47d":"code","0fbba4d0":"code","2f8abb20":"code","a2b70fc2":"code","e714f912":"code","2ff54fde":"code","03358f11":"code","fb802356":"code","e06747c0":"code","c8191416":"code","0e30ddca":"code","c4f09873":"code","7ec00e9f":"code","1305b7fa":"code","72e473bd":"code","a2bb2ca9":"code","4e9f4a89":"code","335eef12":"code","5c9ccf80":"code","b524e3c9":"code","d66c95a3":"code","862f0e65":"code","ea436451":"code","19c6f25c":"code","eef0f15b":"code","d82308fa":"code","f3c514a2":"code","bf18e015":"code","ca91b21e":"code","83e98daa":"code","18877a38":"code","12e2b7bb":"code","f155bc76":"code","6b453b21":"code","5a6ee0e1":"code","4b97175b":"code","0b9717ac":"code","cdd04421":"code","d6136b53":"code","4c78f4fd":"code","c3f6c6c2":"code","b6232f3d":"code","ae053e37":"code","095f041b":"code","de677310":"code","43daf4f0":"code","dd6d1990":"code","9bd5ffb6":"code","baa9b7a6":"code","76ee4c01":"code","d6ed0c29":"code","2df758c5":"code","9eac5ff4":"code","45eeb651":"code","c7701398":"code","d34426e0":"code","a8257eec":"code","5f99b52d":"code","bf98670b":"code","3679c05a":"code","f0a19cd3":"code","4b682909":"code","37d59c0a":"code","9adb9c4f":"code","0f379989":"code","29a26b3a":"code","16154d8f":"code","31043c4c":"code","65af5d87":"code","26be4ffe":"code","78e2945d":"code","cf1311df":"code","6dc5febf":"code","f064a1f4":"code","94a2281b":"code","674194f5":"code","fc322f21":"code","5d91134e":"code","a858a779":"code","a169ebec":"code","d0dc16c5":"code","5c4c4935":"code","39f87189":"code","809221d6":"code","80aa6da6":"code","c2f2c752":"code","71f95c52":"code","03abbc85":"code","ba7b0aab":"code","4c5051c0":"code","ff511ae2":"code","31973f61":"code","dd1bf01a":"code","d5d80769":"code","2b4474c0":"code","5293d63d":"code","b67556aa":"code","380c9f69":"code","f3eed159":"code","27c659b5":"code","9a67ae00":"code","07814944":"code","18a1bb65":"code","c0e496de":"code","5c259083":"code","2e4b58b5":"code","9c77aaf0":"code","12190e78":"code","b6aee370":"code","4d0f2f93":"code","6f76ece2":"code","cdd2aa5b":"code","4b418736":"code","3bbbfad1":"code","0f562576":"code","94f97609":"code","aef2bf56":"code","0a0a4231":"code","e5a2e9d9":"code","ccaa058c":"markdown","9ab94b07":"markdown","9e7edd70":"markdown","07c7f729":"markdown","c27802e5":"markdown","4800444e":"markdown","9df321cb":"markdown","aaece7bf":"markdown","af276cd4":"markdown","f48275f8":"markdown","55cac69c":"markdown","b4bcc425":"markdown","9a5f7ce1":"markdown","310cc62f":"markdown","00febaec":"markdown","d890af10":"markdown","6ef8dd97":"markdown","b63e9a76":"markdown","7f94b741":"markdown","5cdb88fa":"markdown","b2fed899":"markdown","91de95f1":"markdown","e98e413d":"markdown","d6413f73":"markdown","2b5ad219":"markdown","4328863f":"markdown","3e916d63":"markdown","955ffcdf":"markdown","4cd9eade":"markdown","cc608e15":"markdown","59cecbc3":"markdown","8a124fee":"markdown"},"source":{"b8023ee2":"import pandas as pd ","c7067a20":"from pandas import Series, DataFrame","61d1d1e6":"obj = pd.Series([4, 7, -5, 3])\nobj ","90c9a05e":"obj.values ","88154e2a":"obj.index ","ced576bd":"obj2 = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])\nobj2","67e7bc36":"obj2.index","3d361f49":"obj2['a']","136824ce":"obj2[obj2 > 0]","2a4c91a1":"obj2 * 2","4a8d734f":"import numpy as np\nnp.exp(obj2)","9fba2a8e":"sdata = {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000}","a28e3cf6":"obj3 = pd.Series(sdata)\nobj3\n","25cdb86d":"states = ['California', 'Ohio', 'Oregon', 'Texas']","f42612a0":"obj4 = pd.Series(sdata, index=states)\nobj4","7440501b":"pd.isnull(obj4)","5235647c":"pd.notnull(obj4)","8998778f":"obj3 + obj4","e9a76494":"obj4.name = 'population'","67fbd9e1":"obj4","c50648c6":"obj4.index.name = 'state'","f9b7f8ee":"obj4","72c81f8a":"data = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'],\n'year': [2000, 2001, 2002, 2001, 2002, 2003],\n'pop': [1.5, 1.7, 3.6, 2.4, 2.9, 3.2]}\n","b02b0bae":"frame = pd.DataFrame(data)\nframe","53953445":"frame.head(3)","17d4d47d":"pd.DataFrame(data, columns=['year', 'state', 'pop'])","0fbba4d0":"frame2 = pd.DataFrame(data, columns=['year', 'state', 'pop', 'debt'],\n....:\nindex=['one', 'two', 'three', 'four',\n....:\n'five', 'six'])","2f8abb20":"frame2","a2b70fc2":"frame2.columns","e714f912":"frame2['state']","2ff54fde":"frame2.year","03358f11":"frame2.loc['three']","fb802356":"frame2['debt'] = 16.5\nframe2","e06747c0":"frame2['debt'] = np.arange(6.)","c8191416":"frame2","0e30ddca":"val = pd.Series([-1.2, -1.5, -1.7], index=['two', 'four', 'five'])","c4f09873":"frame2['debt'] = val\nframe2","7ec00e9f":"frame2['eastern'] = frame2.state == 'Ohio'\nframe2","1305b7fa":"del frame2['eastern']","72e473bd":"frame2","a2bb2ca9":"frame2.columns","4e9f4a89":"pop = {'Nevada': {2001: 2.4, 2002: 2.9},\n....:\n'Ohio': {2000: 1.5, 2001: 1.7, 2002: 3.6}}","335eef12":"frame3 = pd.DataFrame(pop)","5c9ccf80":"frame3","b524e3c9":"frame3.T","d66c95a3":"pd.DataFrame(pop, index=[2001, 2002, 2003])","862f0e65":"frame3.index.name = 'year'; frame3.columns.name = 'state'","ea436451":"frame3","19c6f25c":"frame3.values","eef0f15b":"frame2.values","d82308fa":"obj = pd.Series(range(3), index=['a', 'b', 'c'])","f3c514a2":"obj ","bf18e015":"index = obj.index","ca91b21e":"index ","83e98daa":"index[1:]","18877a38":"labels = pd.Index(np.arange(3))\nlabels ","12e2b7bb":"obj2 = pd.Series([1.5, -2.5, 0], index=labels)\nobj2","f155bc76":"obj2.index is labels","6b453b21":"obj = pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c'])","5a6ee0e1":"obj ","4b97175b":"obj2 = obj.reindex(['a', 'b', 'c', 'd', 'e'])","0b9717ac":"obj2","cdd04421":"obj3 = pd.Series(['blue', 'purple', 'yellow'], index=[0, 2, 4])\nobj3","d6136b53":"obj3.reindex(range(6), method='ffill')","4c78f4fd":"obj = pd.Series(np.arange(5.), index=['a', 'b', 'c', 'd', 'e'])\nobj ","c3f6c6c2":"new_obj = obj.drop('c') \nnew_obj","b6232f3d":"data = pd.DataFrame(np.arange(16).reshape((4, 4)),\n.....:\nindex=['Ohio', 'Colorado', 'Utah', 'New York'],\n.....:\ncolumns=['one', 'two', 'three', 'four'])","ae053e37":"data ","095f041b":"data.drop(['Colorado', 'Ohio'])","de677310":"data.drop('two', axis=1)","43daf4f0":"obj = pd.Series(np.arange(4.), index=['a', 'b', 'c', 'd'])","dd6d1990":"obj ","9bd5ffb6":"obj['b']","baa9b7a6":"obj[2:4]","76ee4c01":"obj[['b', 'a', 'd']]","d6ed0c29":"obj[obj < 2]","2df758c5":"obj['b':'c']","9eac5ff4":"data ","45eeb651":"data['two']","c7701398":"data[['three', 'one']]","d34426e0":"data[:2]","a8257eec":"data[data['three'] > 5]","5f99b52d":"data[data < 5] = 0\ndata ","bf98670b":"data.loc['Colorado', ['two', 'three']]","3679c05a":"data.iloc[2, [3, 0, 1]]","f0a19cd3":"data.iloc[2]","4b682909":"data.iloc[[1, 2], [3, 0, 1]]","37d59c0a":"s1 = pd.Series([7.3, -2.5, 3.4, 1.5], index=['a', 'c', 'd', 'e']) \n\ns2 = pd.Series([-2.1, 3.6, -1.5, 4, 3.1],index=['a', 'c', 'e', 'f', 'g'])\n","9adb9c4f":"s1 ","0f379989":"s2 ","29a26b3a":"s1+s2 ","16154d8f":"df1 = pd.DataFrame(np.arange(9.).reshape((3, 3)), columns=list('bcd'),index=['Ohio', 'Texas', 'Colorado'])\ndf2 = pd.DataFrame(np.arange(12.).reshape((4, 3)), columns=list('bde'),index=['Utah', 'Ohio', 'Texas', 'Oregon'])","31043c4c":"df1 ","65af5d87":"df2 ","26be4ffe":"df1+df2 ","78e2945d":"df1-df2 ","cf1311df":"df1.add(df2, fill_value=0)","6dc5febf":"frame = pd.DataFrame(np.arange(12.).reshape((4, 3)),\n.....:\ncolumns=list('bde'),\n.....:\nindex=['Utah', 'Ohio', 'Texas', 'Oregon'])","f064a1f4":"series = frame.iloc[0]\nseries","94a2281b":"frame","674194f5":"frame - series","fc322f21":"frame = pd.DataFrame(np.random.randn(4, 3), columns=list('bde'),index=['Utah', 'Ohio', 'Texas', 'Oregon'])\nframe","5d91134e":"np.abs(frame)","a858a779":"f = lambda x: x.max() - x.min()","a169ebec":"frame.apply(f)","d0dc16c5":"frame.apply(f,axis='columns')","5c4c4935":"format = lambda x: '%.2f' % x","39f87189":"frame.applymap(format)","809221d6":"frame['e'].map(format)","80aa6da6":"frame = pd.DataFrame({'b': [4, 7, -3, 2], 'a': [0, 1, 0, 1]})","c2f2c752":"frame ","71f95c52":"frame.sort_values(by='b')","03abbc85":"frame.sort_values(by=['a', 'b'])","ba7b0aab":"obj = pd.Series([7, -5, 7, 4, 2, 0, 4])","4c5051c0":"obj.rank()","ff511ae2":"obj.rank(method='first')","31973f61":"obj.rank(ascending=False, method='max')","dd1bf01a":"obj = pd.Series(range(5), index=['a', 'a', 'b', 'b', 'c'])\nobj ","d5d80769":"obj.index.is_unique","2b4474c0":"df = pd.DataFrame(np.random.randn(4, 3), index=['a', 'a', 'b', 'b'])","5293d63d":"df ","b67556aa":"df.loc['b']","380c9f69":"df = pd.DataFrame([[1.4, np.nan], [7.1, -4.5],\n     [np.nan, np.nan], [0.75, -1.3]],index=['a', 'b', 'c', 'd'],\n                  columns=['one', 'two'])","f3eed159":"df ","27c659b5":"df.sum()","9a67ae00":"df.sum(axis='columns')","07814944":"df.mean(axis='columns', skipna=False)","18a1bb65":"df.idxmax()","c0e496de":"df.count()","5c259083":"df.cumsum()","2e4b58b5":"df.describe()","9c77aaf0":"import pandas_datareader.data as web\nall_data = {ticker: web.get_data_yahoo(ticker)\n            for ticker in ['AAPL', 'IBM', 'MSFT', 'GOOG']}\n\nprice = pd.DataFrame({ticker: data['Adj Close']\n                        for ticker, data in all_data.items()})\nvolume = pd.DataFrame({ticker: data['Volume']\n            for ticker, data in all_data.items()})","12190e78":"returns = price.pct_change()","b6aee370":"returns.tail()","4d0f2f93":"returns['MSFT'].corr(returns['IBM'])","6f76ece2":"returns['MSFT'].cov(returns['IBM'])","cdd2aa5b":"returns.MSFT.corr(returns.IBM)","4b418736":"returns.corr()","3bbbfad1":"returns.corrwith(returns.IBM)","0f562576":"returns.corrwith(volume)","94f97609":"obj = pd.Series(['c', 'a', 'd', 'a', 'a', 'b', 'b', 'c', 'c'])\nobj ","aef2bf56":"uniques = obj.unique()\nuniques","0a0a4231":"obj.value_counts()","e5a2e9d9":"pd.value_counts(obj.values, sort=False)","ccaa058c":"#### loc and iloc ","9ab94b07":"<a id='11'><\/a>\n## Correlation and Covariance\n\n[Go back to the table of contents](#table_of_contents)\n\n","9e7edd70":"<a id='6'><\/a>\n### Series and dataframe \n\n[Go back to the table of contents](#table_of_contents)\n\n","07c7f729":"<a id='2'><\/a>\n\n### Index Object and reindexing\n\n[Go back to the table of contents](#table_of_contents)\n\n","c27802e5":"**Looking for Null value**","4800444e":"Thus, whenever you see pd. in code, it\u2019s referring to pandas. You may also find it eas\u2010\nier to import Series and DataFrame into the local namespace since they are so fre\u2010\nquently used:","9df321cb":"![image.png](attachment:image.png)","aaece7bf":"<a id='7'><\/a>\n### Function Application and Mapping\n\n[Go back to the table of contents](#table_of_contents)\n\n","af276cd4":"<a id='4'><\/a>\n### Indexing, Selection, and Filtering\n\n[Go back to the table of contents](#table_of_contents)\n\n","f48275f8":"#  Getting Started with part-1\n\n![image.png](attachment:image.png)","55cac69c":"<a id='3'><\/a>\n### Droping \n\n[Go back to the table of contents](#table_of_contents)\n\n","b4bcc425":"**Naming to index and column**\n","9a5f7ce1":"<a id='5'><\/a>\n## Arithmetic and Data Alignment\n\n[Go back to the table of contents](#table_of_contents)\n\n","310cc62f":"![image.png](attachment:image.png)","00febaec":"\n\n### Reindexing ","d890af10":"**Nested dict of dict to dataFrame**","6ef8dd97":"![image.png](attachment:image.png)","b63e9a76":"**Addition of two series**","7f94b741":"**Giving custom index**\n","5cdb88fa":"<a id='9'><\/a>\n### Axis Indexes with Duplicate Labels\n\n[Go back to the table of contents](#table_of_contents)\n\n","b2fed899":"**Creating Series with dict**","91de95f1":"**df.head()**","e98e413d":"\n<a id='table_of_contents'><\/a>\n\n# Table of Contents\n\n[Import](#-1)\n\n[Introduction to pandas Data Structures](#0)\n\n[DataFrame](#1)\n\n[Index Object and reindexing](#2)\n\n[Droping ](#3)\n\n[Indexing, Selection, and Filtering](#4)\n\n[Aritmatic and data alignment](#5)\n\n[Series and dataframe  ](#6)\n\n[Function Application and Mapping](#7)\n\n[Sorting and Ranking ](#8)\n\n[Axis Indexes with Duplicate Labels ](#9)\n\n[Summarizing and Computing Descriptive Statistics](#10)\n\n[Correlation and Covariance](#11)\n\n[Unique value,value counts](#12)\n","d6413f73":"<a id='12'><\/a>\n## Unique Values, Value Counts, and Membership\n\n[Go back to the table of contents](#table_of_contents)\n\n","2b5ad219":"<a id='8'><\/a>\n\n### Sorting and Ranking\n\n[Go back to the table of contents](#table_of_contents)\n","4328863f":"<a id='10'><\/a>\n## Summarizing and Computing Descriptive Statistics\n\n[Go back to the table of contents](#table_of_contents)\n\n","3e916d63":"<a id='0'><\/a>\n\n## Introduction to pandas Data Structures\n\n[Go back to the table of contents](#table_of_contents)\n\n\n### Series\n\nA Series is a one-dimensional array-like object containing a sequence of values (of\nsimilar types to NumPy types) and an associated array of data labels, called its index.\nThe simplest Series is formed from only an array of data","955ffcdf":"**adding a series to dataFrame**\n","4cd9eade":"**Slicing Values**","cc608e15":"<a id='-1'><\/a>\n# Import\n\n[Go back to the table of contents](#table_of_contents)\n","59cecbc3":"<a id='1'><\/a>\n\n# DataFrame\n\n[Go back to the table of contents](#table_of_contents)\n\n\nA DataFrame represents a rectangular table of data and contains an ordered collec\u2010\ntion of columns, each of which can be a different value type (numeric, string,\nboolean, etc.). The DataFrame has both a row and column index; it can be thought of\nas a dict of Series all sharing the same index. Under the hood, the data is stored as one\nor more two-dimensional blocks rather than a list, dict, or some other collection of\none-dimensional arrays","8a124fee":"**delete column**\n"}}