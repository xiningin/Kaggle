{"cell_type":{"da5e5d59":"code","e90bf61c":"code","73ae3a06":"code","a976e463":"code","a3e31daa":"code","a5acca18":"code","8416dfa7":"code","3c8c335a":"code","1637c7d2":"code","64309969":"code","a2290837":"code","e2244b5a":"code","618d9d04":"code","8f4a4939":"code","8d50e0a6":"code","5b6da4cf":"code","f3780eca":"code","f9109cfd":"code","c002c78b":"code","ccfe392e":"code","f390b74e":"code","e1c0e5a2":"code","2988ee5d":"code","5faf89f7":"code","37c909e6":"code","f10b1eca":"code","1d72ef9b":"code","346b7a0f":"code","78215d90":"code","3d7730ab":"code","99e4ff4c":"code","1d274b6f":"code","b30f842e":"code","ddc1ff4b":"code","ee025977":"code","bb206370":"code","2ac56fe4":"code","07bfe92d":"code","0ddfc497":"code","c98b891c":"code","7f047d19":"code","48c0064c":"code","3e76cb53":"code","11379aac":"code","f256cad2":"code","8dfe25bf":"code","2a6df38d":"code","cf198a94":"code","ecd40265":"markdown","b54fee06":"markdown","ce10b680":"markdown","93697a32":"markdown","cea00c83":"markdown","b81e70ad":"markdown","665d62fe":"markdown","5ae7b3e8":"markdown","57042519":"markdown","768e1a1f":"markdown","705dba4d":"markdown","3a425fc6":"markdown","a5506497":"markdown","ffb73fdd":"markdown","f7647cba":"markdown","788066de":"markdown","852dbac8":"markdown","51996381":"markdown","5c124a40":"markdown"},"source":{"da5e5d59":"!pip install pytrends","e90bf61c":"!pip install forex-python","73ae3a06":"import time","a976e463":"from datetime import datetime\ntime_format = \"%d%b%Y %H:%M\"\ndatetime.now().strftime(time_format)","a3e31daa":"import os\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport matplotlib\nfrom matplotlib.ticker import ScalarFormatter\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n# Matplotlib\n%matplotlib inline\nplt.style.use(\"seaborn-ticks\")\nplt.rcParams[\"xtick.direction\"] = \"in\"\nplt.rcParams[\"ytick.direction\"] = \"in\"\nplt.rcParams[\"font.size\"] = 11.0\nplt.rcParams[\"figure.figsize\"] = (9, 6)\n# Pandas\npd.set_option(\"display.max_colwidth\", 1000)","a5acca18":"def line_plot(df, title, xlabel=None, ylabel=\"Cases\",\n              h=None, v=None, xlim=(None, None), ylim=(0, None),\n              math_scale=True, x_logscale=False, y_logscale=False, y_integer=False,\n              show_legend=True, bbox_to_anchor=(1.02, 0),  bbox_loc=\"lower left\"):\n    \"\"\"\n    Show chlonological change of the data.\n    \"\"\"\n    ax = df.plot()\n    # Scale\n    if math_scale:\n        ax.yaxis.set_major_formatter(ScalarFormatter(useMathText=True))\n        ax.ticklabel_format(style=\"sci\",  axis=\"y\",scilimits=(0, 0))\n    if x_logscale:\n        ax.set_xscale(\"log\")\n        if xlim[0] == 0:\n            xlim = (None, None)\n    if y_logscale:\n        ax.set_yscale(\"log\")\n        if ylim[0] == 0:\n            ylim = (None, None)\n    if y_integer:\n        fmt = matplotlib.ticker.ScalarFormatter(useOffset=False)\n        fmt.set_scientific(False)\n        ax.yaxis.set_major_formatter(fmt)\n    # Set metadata of figure\n    ax.set_title(title)\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    ax.set_xlim(*xlim)\n    ax.set_ylim(*ylim)\n    if show_legend:\n        ax.legend(bbox_to_anchor=bbox_to_anchor, loc=bbox_loc, borderaxespad=0)\n    else:\n        ax.legend().set_visible(False)\n    if h is not None:\n        ax.axhline(y=h, color=\"black\", linestyle=\":\")\n    if v is not None:\n        if not isinstance(v, list):\n            v = [v]\n        for value in v:\n            ax.axvline(x=value, color=\"black\", linestyle=\":\")\n    plt.tight_layout()\n    plt.show()","8416dfa7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3c8c335a":"gov_raw = pd.read_csv(\"\/kaggle\/input\/covid19-dataset-in-japan\/covid_jpn_total.csv\")\ngov_raw.tail()","1637c7d2":"# https:\/\/www.kaggle.com\/lisphilar\/eda-of-japan-dataset\ndf = gov_raw.copy()\ndf.dropna(how=\"all\", inplace=True)\ndf[\"Date\"] = pd.to_datetime(df[\"Date\"])\ndf = df.groupby(\"Location\").apply(\n    lambda x: x.set_index(\"Date\").resample(\"D\").interpolate(method=\"linear\")\n)\ndf = df.drop(\"Location\", axis=1).reset_index()\ndf = df.sort_values(\"Date\").reset_index(drop=True)\nsel = df.columns.isin([\"Location\", \"Date\"])\ndf.loc[:, ~sel] = df.loc[:, ~sel].fillna(0).astype(np.int64)\n# Select Confirmed\/Recovered\/Fatal\ndf = df.loc[:, [\"Location\", \"Date\", \"Positive\", \"Fatal\", \"Discharged\"]]\ndf = df.rename({\"Positive\": \"Confirmed\", \"Discharged\": \"Recovered\"}, axis=1)\n# Show\ngov_df = df.copy()\ngov_df.tail(9)","64309969":"gov_total_df = gov_df.groupby(\"Date\").sum()\ngov_total_df.tail()","a2290837":"df = gov_df.copy()\ndf = df.loc[df[\"Location\"] == \"Domestic\", :].drop(\"Location\", axis=1)\ndf = df.groupby(\"Date\").last()\ngov_dom_df = df.copy()\ngov_dom_df.tail()","e2244b5a":"jhu_raw = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\njhu_raw.loc[jhu_raw[\"Country\/Region\"] == \"Japan\", :]","618d9d04":"jhu_raw[\"Province\/State\"].isnull().value_counts()","8f4a4939":"df = jhu_raw.copy()\ndf = df.rename({\"ObservationDate\": \"Date\", \"Deaths\": \"Fatal\"}, axis=1)\ndf = df.loc[df[\"Country\/Region\"] == \"Japan\", [\"Date\", \"Confirmed\", \"Fatal\", \"Recovered\"]]\ndf[\"Date\"] = pd.to_datetime(df[\"Date\"])\ndf = df.groupby(\"Date\").sum()\ndf = df.astype(np.int64)\ndf = df.reset_index()\njhu_df = df.copy()\njhu_df.tail()","8d50e0a6":"df = pd.merge(\n    gov_total_df, gov_dom_df,\n    left_index=True, right_index=True,\n    suffixes=[\"\/Total\", \"\/Domestic\"]\n)\ndf = pd.merge(\n    df.add_suffix(\"\/GOV\"), jhu_df.set_index(\"Date\").add_suffix(\"\/JHU\"),\n    left_index=True, right_index=True\n)\ncomp_df = df.copy()\ncomp_df.tail()","5b6da4cf":"c_df = comp_df.loc[:, comp_df.columns.str.startswith(\"Confirmed\")]\nc_df.tail(10)","f3780eca":"df = c_df.copy()\ndf.columns = df.columns.str.replace(\"Confirmed\/\", \"\")\nline_plot(df, \"Confirmed cases in Japan: Comparison of datasets\", y_integer=True)","f9109cfd":"df = c_df.copy()\ndf.columns = df.columns.str.replace(\"Confirmed\/\", \"\")\nseries = df[\"JHU\"] - df[\"Total\/GOV\"]\nline_plot(\n    series,\n    \"Confirmed cases in Japan: JHU minus Total\/GOV\",\n    y_integer=True, ylim=(None, None), show_legend=False,\n    h=0\n)","c002c78b":"d_df = comp_df.loc[:, comp_df.columns.str.startswith(\"Fatal\")]\nd_df.tail(10)","ccfe392e":"df = d_df.copy()\ndf.columns = df.columns.str.replace(\"Fatal\/\", \"\")\nline_plot(df, \"Fatal cases in Japan: Comparison of datasets\", y_integer=True)","f390b74e":"df = d_df.copy()\ndf.columns = df.columns.str.replace(\"Fatal\/\", \"\")\nseries = df[\"JHU\"] - df[\"Total\/GOV\"]\nline_plot(\n    series,\n    \"Fatal cases in Japan: JHU minus Total\/GOV\",\n    y_integer=True, ylim=(None, None), show_legend=False,\n    h=0\n)","e1c0e5a2":"r_df = comp_df.loc[:, comp_df.columns.str.startswith(\"Recovered\")]\nr_df.tail(10)","2988ee5d":"df = r_df.copy()\ndf.columns = df.columns.str.replace(\"Recovered\/\", \"\")\nline_plot(df, \"Recovered cases in Japan: Comparison of datasets\", y_integer=True)","5faf89f7":"df = r_df.copy()\ndf.columns = df.columns.str.replace(\"Recovered\/\", \"\")\nseries = df[\"JHU\"] - df[\"Total\/GOV\"]\nline_plot(\n    series,\n    \"Recovered cases in Japan: JHU minus Total\/GOV\",\n    y_integer=True, ylim=(None, None), show_legend=False,\n    h=0\n)","37c909e6":"start_dt = gov_total_df.index[1]\nend_dt = gov_total_df.index[-1]","f10b1eca":"start = str(start_dt)[:10]\nend = str(end_dt)[:10]\nprint(start, end)","1d72ef9b":"from pytrends.request import TrendReq\npytrend = TrendReq(hl='ja-jp')","346b7a0f":"keywords = [\"COVID-19\", \"Corona virus\", \"\u65b0\u578b\u30b3\u30ed\u30ca\u30a6\u30a4\u30eb\u30b9\", \"\u65b0\u578b\u30b3\u30ed\u30ca\", \"\u30b3\u30ed\u30ca\"]","78215d90":"pytrend.build_payload(kw_list=keywords, timeframe=f'{start} {end}', geo=\"JP\")\n# reference: https:\/\/github.com\/GeneralMills\/pytrends","3d7730ab":"# Interest by Region\ndf = pytrend.interest_by_region()","99e4ff4c":"df","1d274b6f":"df_interest = pytrend.interest_over_time()\ndf_interest","b30f842e":"gov_total_df[\"Confirmed_per_day\"] = gov_total_df[\"Confirmed\"].diff()\ngov_total_df","ddc1ff4b":"import warnings\nwarnings.simplefilter('ignore')\n\ndf_interest.plot(figsize=(12,4), marker='.', title=\"Google Trends\")\nplt.show()\ngov_total_df[\"Confirmed_per_day\"].plot(figsize=(12,4), marker='x', title=\"Confirmed #\")\nplt.show()","ee025977":"from forex_python.converter import get_rate","bb206370":"def getForex(currency1, currency2):\n    import datetime\n    dates = []\n    rate = []\n    timer = 0\n\n    for i in range(366):\n        t = datetime.datetime.today() - datetime.timedelta(days = i)\n        dates.append(str(t))\n        r = get_rate(currency1, currency2, t)\n        rate.append(r)\n        timer +=1\n        if timer%100== 0:\n            print('paused at timer: {}'.format(timer))\n            time.sleep(20)\n            \n    forex = {'date':dates,\n            'Rate':rate}\n    \n    forexDF = pd.DataFrame.from_dict(forex)\n    return forexDF  ","2ac56fe4":"cur1 = \"USD\"\ncur2 = \"JPY\"\n\nfoerex = getForex(cur1, cur2)\nfoerex","07bfe92d":"foerex.date = foerex.date.apply(lambda x: pd.to_datetime(x))","0ddfc497":"foerex_sub = foerex[(start_dt <= foerex.date) & (foerex.date <= end_dt)]\nfoerex_sub.set_index(\"date\", inplace=True)\nfoerex_sub","c98b891c":"df_interest.plot(figsize=(12,4), marker='.', title=\"Google Trends\")\nplt.show()\ngov_total_df[\"Confirmed_per_day\"].plot(figsize=(12,4), marker='x', title=\"Confirmed #\")\nplt.show()\nfoerex_sub.plot(figsize=(12,4), marker='*', title=f\"{cur1}\/{cur2} Rate\")\nplt.show()","7f047d19":"url = \"https:\/\/raw.githubusercontent.com\/OxCGRT\/covid-policy-tracker\/master\/data\/OxCGRT_latest.csv\"\noxdf = pd.read_csv(url)\noxdf","48c0064c":"oxdf = oxdf[oxdf.CountryName==\"Japan\"]\noxdf","3e76cb53":"oxdf.Date = oxdf.Date.apply(lambda x: pd.to_datetime(str(x)))","11379aac":"cols = oxdf.columns[oxdf.columns.str.contains(\"ForDisplay\")]\noxdf.set_index(\"Date\", inplace=True)\noxdf = oxdf[cols]\noxdf","f256cad2":"oxdf = oxdf[(start_dt <= oxdf.index) & (oxdf.index <= end_dt)]","8dfe25bf":"oxdf.rename(columns={col:col.replace(\"ForDisplay\", \"\") for col in cols}, inplace=True)","2a6df38d":"df_interest.plot(figsize=(12,4), marker='.', title=\"Google Trends\")\nplt.show()\ngov_total_df[\"Confirmed_per_day\"].plot(figsize=(12,4), marker='x', title=\"Confirmed #\")\nplt.show()\nfoerex_sub.plot(figsize=(12,4), marker='*', title=f\"{cur1}\/{cur2} Rate\")\nplt.show()\noxdf.plot(figsize=(12,4), marker='+', title=\"OxCGRT\")\nplt.show()","cf198a94":"#df_interest.plot(figsize=(12,4), marker='.', title=\"Google Trends\")\n#plt.show()\ngov_total_df[\"Confirmed_per_day\"].plot(figsize=(12,4), marker='x', title=\"Confirmed #\")\nplt.show()\n#foerex_sub.plot(figsize=(12,4), marker='*', title=f\"{cur1}\/{cur2} Rate\")\n#plt.show()\noxdf.plot(figsize=(12,4), marker='+', title=\"OxCGRT\")\nplt.show()","ecd40265":"# OxCGRT\/covid-policy-tracker\nCredit to https:\/\/github.com\/OxCGRT\/covid-policy-tracker","b54fee06":"### Raw data","ce10b680":"## Package","93697a32":"# Confirmed","cea00c83":"## Merge","b81e70ad":"# Introduction\nIn this notebook, we will compare the number of cases announced by Japanese government and gathered by Johns Hopkins University.\n\n(Japanese goverment annouced)\n* Primary source: [Ministry of Health, Labour and Welefare HP (in English)](https:\/\/www.mhlw.go.jp\/stf\/seisakunitsuite\/bunya\/newpage_00032.html)\n* Secondary source: [COVID-19 dataset in Japan](https:\/\/www.kaggle.com\/lisphilar\/covid19-dataset-in-japan)\n\n(Johns Hoplins University gathered)\n* Primary source: [COVID-19 Data Repository by CSSE at Johns Hopkins University](https:\/\/github.com\/CSSEGISandData\/COVID-19)\n* Secondary source: [Novel Corona Virus 2019 Dataset](https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset\/kernels)","665d62fe":"# Fatal","5ae7b3e8":"# Google Trends","57042519":"# Recovered","768e1a1f":"### Government announced, domestic\nWithout airport quarantine and returnees by chartered flights.","705dba4d":"## JHU data","3a425fc6":"### Data cleaning","a5506497":"## Government data","ffb73fdd":"### Raw data","f7647cba":"## Functions","788066de":"# Forex","852dbac8":"# Datasets","51996381":"### Data cleaning","5c124a40":"### Government announced, total"}}