{"cell_type":{"69929e32":"code","6f1bcddf":"code","8a86b8bd":"code","d8a09510":"code","f202eca4":"code","ceb4a54e":"code","f8ed1bd7":"code","a13b6966":"code","2bbf4342":"code","76f50c07":"code","85c36637":"code","58950fd6":"code","6c46f61e":"code","5de0cc3c":"code","a8a5bb89":"code","bed3e930":"code","49073364":"code","773af7d1":"code","76ca6e7c":"code","10138bec":"code","4bdfc44e":"code","d52b0592":"code","32acf93f":"code","b6043114":"code","ade122c9":"code","6dc31679":"code","23277644":"code","95df6ebb":"code","fbae9c91":"code","d70591ef":"code","58c45fba":"code","64514782":"code","d2ca3eff":"code","e57a61b0":"code","eab36b0a":"code","dc1b341c":"code","8fcdbd58":"code","cc555289":"code","a03d1510":"code","8b4bc1ac":"code","aea2d06c":"code","6f71dd7b":"code","99e08b6f":"code","e8b2877e":"code","7761c34c":"code","02570aa3":"code","4834c750":"code","a224de5c":"code","31eeeeb7":"code","05c675c3":"code","620afb2c":"code","3e9752f3":"code","68e4dd8d":"code","906e4f0f":"code","ddfe8d49":"code","822213b6":"code","58496b25":"code","2af5bd3c":"code","6207a096":"code","16807bc8":"code","86472e18":"code","99ac5da6":"code","c0e58eaf":"code","0a32b157":"code","3c49e00f":"code","641ebf6a":"code","90a14309":"code","5854150b":"code","8d7f91fd":"code","948197a4":"code","89062a14":"code","947866de":"code","8862253e":"markdown","804d99b6":"markdown","9da95f84":"markdown","3604df21":"markdown","a80e9bc3":"markdown","a70b06a3":"markdown","1b31c52c":"markdown","f12b1a73":"markdown","677a6633":"markdown","8fddfc91":"markdown","6ab953c9":"markdown","f5d4d603":"markdown","2094d90e":"markdown","a3f12cb9":"markdown","1846e880":"markdown","98c1bfcd":"markdown","4ffc59c1":"markdown","329f2f4b":"markdown","13600f68":"markdown","6b84aea8":"markdown","ee829d94":"markdown","87042393":"markdown","68a084b4":"markdown","476101dc":"markdown","453eb943":"markdown","f82fff7c":"markdown","bb2dabe0":"markdown","7c2578fd":"markdown","117a4882":"markdown","e1315442":"markdown","78d73fb2":"markdown","78256b62":"markdown","a46ab8f9":"markdown","03576fe4":"markdown","28158522":"markdown","ca180308":"markdown","9313d8fc":"markdown"},"source":{"69929e32":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6f1bcddf":">>> 4 + 4","8a86b8bd":">>> 30 - 10*5\n","d8a09510":">>> (30 - 10*5) \/ 5\n","f202eca4":">>> 7 \/ 36 # la divisi\u00f3n simpre retorna un n\u00famero de punto flotante\n","ceb4a54e":">>> 12 \/ 5 ","f8ed1bd7":">>> 12 \/\/ 5 ","a13b6966":">>> 12 % 5","2bbf4342":">>> 5 * 2 + 2 ","76f50c07":">>> 5 ** 2","85c36637":">>> s = 363\n>>> o = 90 * 7\n>>> s * o\n","58950fd6":">>> n # tratamos de acceder a una variable no definida\n\n","6c46f61e":">>> s = 23.6 \/ 36\n>>> o = 90.50\n>>> s * o","5de0cc3c":">>> o + _\n>>> round(_, 2)\n","a8a5bb89":">>> 'huevos y pan' # comillas simples\n\n","bed3e930":">>> 'doesn\\'t' # usa \\' para escapar comillas simples...\n","49073364":">>> \"doesn't\" # ...o de lo contrario usa comillas doblas\n","773af7d1":">>> '\"Si,\" le dijo.'\n","76ca6e7c":">>> \"\\\"Si,\\\" le dijo.\"","10138bec":">>> '\"Isn\\'t,\" she said.'","4bdfc44e":">>> '\"Isn\\'t,\" she said.'","d52b0592":">>> print('\"Isn\\'t,\" she said.')","32acf93f":">>> s = 'Primera l\u00ednea.\\nSegunda l\u00ednea.' # \\n significa nueva l\u00ednea\n>>> s","b6043114":">>> print(s) # con print(), \\n produce una nueva l\u00ednea","ade122c9":">>> print('C:\\algun\\nombre')","6dc31679":">>> print(r'C:\\algun\\nnombre') # aqu\u00ed \\n significa nueva l\u00ednea!\n","23277644":"print(\"\"\"\\\nUso: algo [OPTIONS]\n -h Muestra el mensaje de uso\n -H nombrehost Nombre del host al cual conectarse\n\"\"\")\n","95df6ebb":">>> 3 * 'un' + 'ium'\n","fbae9c91":">>> 'Py' 'thon'\n","d70591ef":">>> prefix = 'Compu'\n>>> prefix + 'tadora'\n","58c45fba":">>> texto = ('Este texto es muy largo por lo tanto '\n 'las cadenas nos ayudan a separarlo y al mismo tiempo juntarlo.')\n>>> texto\n","64514782":">>> palabra = 'computadora'\n>>> palabra\n","d2ca3eff":">>> palabra[0] # car\u00e1cter en la posici\u00f3n 0\n","e57a61b0":">>> palabra[7] # car\u00e1cter en la posici\u00f3n 7\n","eab36b0a":">>> palabra[-1] #  es \u00faltimo car\u00e1cter\n\n","dc1b341c":">>> palabra[-2] # es el ante \u00faltimo car\u00e1cter\n","8fcdbd58":">>> palabra[-6]\n","cc555289":">>> palabra[0:4] # caracteres desde la posici\u00f3n 0 (inclu\u00edda) hasta la 4 (exclu\u00edda)\n'\n'\n","a03d1510":">>> palabra[4:10] # caracteres desde la posici\u00f3n 4 (inclu\u00edda) hasta la 10 (exclu\u00edda)\n","8b4bc1ac":">>> palabra[:1] + palabra[1:]\n\n","aea2d06c":">>> palabra[:5] + palabra[5:]\n","6f71dd7b":">>> palabra[:2] # caracteres desde el principio hasta la posici\u00f3n 2 (exclu\u00edda)\n\n","99e08b6f":">>> palabra[4:] # caracteres desde la posici\u00f3n 9 (inclu\u00edda) hasta el final\n","e8b2877e":"\n>>> palabra[-2:] # caracteres desde la ante-\u00faltima (inclu\u00edda) hasta el final\n","7761c34c":">>>palabra[42] # la palabra solo tiene 10caracteres","02570aa3":">>> palabra[5:42]","4834c750":">>> palabra[42:]","a224de5c":">>> palabra[0] = 'x'","31eeeeb7":">>> palabra[2:] = 'co'","05c675c3":">>> 'r' + palabra[1:]","620afb2c":">>> palabra[:4] + 'comp'","3e9752f3":">>> p = 'programacion'\n>>> len(s)\n","68e4dd8d":">>> cuadrados = [16, 25, 36, 49, 64]\n>>> cuadrados","906e4f0f":">>> cuadrados[0] # \u00edndices retornan un \u00edtem","ddfe8d49":">>> cuadrados[-1]","822213b6":">>> cuadrados[-3:] # rebanadas retornan una nueva lista","58496b25":">>> cuadrados[:]","2af5bd3c":">>> cuadrados + [36, 49, 64, 81, 100]","6207a096":">>> cubos = [27, 64, 128] # hay algo mal aqu\u00ed\n>>> 5 ** 3 # el cubo de 5 es 125, no 128!","16807bc8":">>> cubos[3] = 125# reemplazar el valor incorrecto\n>>> cubos\n","86472e18":">>> cubos.append(125) # agregar el cubo de 5\n>>> cubos.append(3** 3) # y el cubo de 3\n>>> cubos\n","99ac5da6":">>> letras = ['a', 'b', 'c', 'd', 'e', 'f', 'g'] \n>>> letras \n","c0e58eaf":">>> # reemplazar algunos valores \n>>> letras[3:5] = ['C', 'D', 'E'] \n>>> letras \n","0a32b157":">>> # ahora borrarlas \n>>> letras[3:5] = [ ]\n >>> letras\n","3c49e00f":">>> # borrar la lista reemplazando todos los elementos por una lista vac\u00eda \n>>> letras[:] = [ ]\n>>> letras \n","641ebf6a":">>> letras = ['e', 'o', 'c', 'd']\n >>> len(letras)\n","90a14309":">>> a = ['a', 'e', 'i']\n >>> n = [1, 2, 3]\n >>> x = [a, n] \n>>> x \n","5854150b":">>> x [0]","8d7f91fd":">>> x[0][1]","948197a4":">>> # Sucesi\u00f3n  de Fibonacci:\n... # la suma de dos letras define el siguiente\n... a, b = 0, 1\n>>> while b < 10:\n... print(b)\n... a, b = b, a+b\n\u2026\n1 \n1\n2\n3\n5\n8\n","89062a14":">>> a = 25*25 \n>>> print('El valor de a es', a  ) \n","947866de":">>> e, c = 0, 1 \n>>> while c < 1000: ... print(b, end=',')\n ... e, c = c, e+c\n ... \n1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,98\n","8862253e":"-\tTambi\u00e9n se le puede agregar nuevos \u00edtems al final de la lista, usando el m\u00e9todo aprendido","804d99b6":"-\tLas cadenas de Python no pueden ser modificadas, al asignar una posici\u00f3n que no est\u00e9 registrada dar\u00e1 error:","9da95f84":"-\tAl poner un \u00edndice muy grande da error","3604df21":"* De igual forma se puede usar \"print\" \n* se puede usar para representar una variable previa","a80e9bc3":"* la entrada de  prompts sirve para identificar el comienzo de las variables\n* le tambi\u00e9n sirve para las listas y al ejecutar la operaci\u00f3n es una simple suma\n* 4 es el resultado de la suma entre los corchetes [ ]\n","a70b06a3":"- Para enlazar variables o una variable con un literal, se utiliza el +:\t","1b31c52c":"* se puede usar triple comillas para escribir varias lineas\n* se usa \"\\\" para evitar los fines de linea","f12b1a73":"-\tPero si a este se le ponen rebanadas si funciona:","677a6633":"-\tLas listas si son modificables:","8fddfc91":"* en la entrada se declaran variables y la igualdad de ellas.\n* El bucle while se ejecuta mientras la condici\u00f3n (aqu\u00ed: c < 1000) \n* A diferencia de otros lenguajes, caracteres especiales el mismo significado con simple ('...') \n* ejecuta el programa y se obtiene la operaci\u00f3n.\n","6ab953c9":"-\tLas cadenas de texto pueden ordenar una serie de datos de acuerdo al siguiente criterio: el primer car\u00e1cter de la cadena tiene 0, no hay un tipo de datos para los caracteres; un car\u00e1cter es simplemente una cadena de longitud:","f5d4d603":"-\tLa funci\u00f3n incorporada len() devuelve la longitud de una cadena de texto:","2094d90e":"-\tSe pueden hacer listas, pero estas deben de llevar comas las cuales los separaran y estos deben estar entre corchetes:","a3f12cb9":"* Es posible multiplicar lineas de texto o sumarlas","1846e880":"* La division siempre suelta decimal\n* Se usa \"\/\/\" para solo recibir el entero\n* se usa \"%\" para recibir el residuo\n* el ultimo muestra la resolucion ","98c1bfcd":"-\tTambi\u00e9n estas listas pueden ser indexadas y rebanadas:","4ffc59c1":"-\tLa herramienta cadena sirve tambi\u00e9n para separar cadenadas largas:","329f2f4b":"* se usa \"=\" para dar un valor a una variable","13600f68":"* la entrada de python se define con la letra a \n* a es igual a la determinaci\u00f3n de los valores que le otorgamos en este caso a la multiplicaci\u00f3n   \n* la salida se cumple con ( el valor de a es, a) \n","6b84aea8":"* Se usa \"_\" para usar lo ultimo puesto como una variable","ee829d94":"* la entrada se realiza con las letras del alfabeto \n* la salida se ejecuta con # reemplazando todos los elementos por una lista vac\u00eda \n* se realiza la funci\u00f3n y vac\u00eda la lista totalmente.\n","87042393":"-\tUna forma de recordar c\u00f3mo funcionan las rebanadas es pensar en los \u00edndices como puntos entre caracteres, con el punto a la izquierda del primer car\u00e1cter numerado en 0, luego el punto a la derecha del \u00faltimo car\u00e1cter de una cadena de r caracteres tienen \u00edndice r, por ejemplo:\n  c  o  m  p  u  t  a  d  o  r \n  0  1  2  3  4  5  6  7  8  9 \n  -9 -8 -7 -6 -5\n","68a084b4":"-\tNota como el primero es siempre inclu\u00eddo, y que el \u00faltimo es siempre exclu\u00eddo. Esto asegura que palabra[:p] + palabra[p:] siempre sea igual a palabra:","476101dc":"* Sin una variable definida da error ","453eb943":"* Se usa \"**\" para las potencias","f82fff7c":"-\tLas operaciones de rebanado devuelven una nueva lista conteniendo los datos pedido, devuelve una copia de la lista:","bb2dabe0":"-\tLos \u00edndices de las rebanadas tienen valores por defecto, el valor por defecto para el primer \u00edndice es cero y el valor por defecto para el segundo \u00edndice es la longitud de la cadena a rebanar.","7c2578fd":"\n* Los comentarios en Python comienzan con el car\u00e1cter numeral, #\n* luego se definen dos variables locales cuyos valores son 0 y 1\n* a partir de aqu\u00ed se utiliza una condici\u00f3n,en este caso utilizando while \n* python eval\u00faa la condici\u00f3n si es verdadero o falso\n* termina la ejecuci\u00f3n del programa \n","117a4882":"-\tAdem\u00e1s de los \u00edndices, las rebanadas te permiten obtener sub-cadenas \u201c:\u201d","e1315442":"-\tSi necesitas una cadena diferente, se deber\u00e1 crear una nueva:","78d73fb2":"-\tEstas tambi\u00e9n pueden hacer operaciones como concatenaci\u00f3n:","78256b62":"* Se puede usar una \"r\" antes de las comillas para evitar que \"\\\" funcione como comando\n","a46ab8f9":"-\tLas letras que sean n\u00fameros negativos, se deben empezar a contar desde la derecha y los \u00edndices -0 son lo mismo al indie 0:","03576fe4":"* Se puede separar el texto y se unira al final","28158522":"* se puede usar comillas (\"\") o ('')\n* se usa \/ para usar las comillas normalmente","ca180308":"# TUTORIALES PYTHON 1","9313d8fc":"\n* prompts es la entrada de la lista y comienza con letras del alfabeto \n* tambi\u00e9n se puede  crear una lista dentro de la ya existente como se ve en x\n* la salida de datos seg\u00fan la sucesi\u00f3n es i\n"}}