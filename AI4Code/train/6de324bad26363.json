{"cell_type":{"cc2f0482":"code","244300c3":"code","c324c3e0":"code","ea7f5262":"code","01661730":"code","8f55b6b0":"code","8381018e":"code","df3c9176":"markdown","a821db13":"markdown","5db6c1fd":"markdown","8eb96eb1":"markdown","3d986c5e":"markdown"},"source":{"cc2f0482":"import numpy as np\nimport pandas as pd\nfrom xgboost import XGBClassifier\nfrom sklearn.multioutput import MultiOutputClassifier\nfrom sklearn.model_selection import cross_validate, KFold\nfrom sklearn.metrics import make_scorer\nfrom keras.losses import binary_crossentropy","244300c3":"# load dataset\ntr_feats = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ntr_scored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\nts_feats = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/lish-moa\/sample_submission.csv')","c324c3e0":"# set mask of 'ctl_vehicle'\ntr_mask = tr_feats['cp_type']=='ctl_vehicle'\nts_mask = ts_feats['cp_type']=='ctl_vehicle'\n\n# replace str to binary\ntr_feats['cp_dose'] = tr_feats['cp_dose'].replace({'D1': 0, 'D2': 1})\ntr_feats['cp_type'] = tr_feats['cp_type'].replace({'trt_cp': 0, 'ctl_vehicle': 1})\nts_feats['cp_dose'] = ts_feats['cp_dose'].replace({'D1': 0, 'D2': 1})\nts_feats['cp_type'] = ts_feats['cp_type'].replace({'trt_cp': 0, 'ctl_vehicle': 1})\n# Exclude rows where cp_type is \"ctl_vehicle\"\nX = tr_feats[~tr_mask]\ny = tr_scored[~tr_mask]\n# convert to ndarray\nX = X.iloc[:,1:].to_numpy()\nX_test = ts_feats.iloc[:,1:].to_numpy()\ny = y.iloc[:,1:].to_numpy()","ea7f5262":"%%time\nNFOLDS = 4\n# define Log loss metric\ndef logloss(y_true, y_pred):    \n    return binary_crossentropy(y_true, y_pred.astype('float')).numpy().mean()\n\n# CV\nclassifier =  MultiOutputClassifier(XGBClassifier(tree_method='gpu_hist'))\nscore_funcs = {\n    'custom_logloss': make_scorer(logloss)\n}\nk_fold = KFold(n_splits=NFOLDS, shuffle=True, random_state=10)\ncv_results = cross_validate(classifier, X, y, cv=k_fold, scoring=score_funcs, return_estimator=True, verbose=1)\ncv_results['test_custom_logloss']","01661730":"%%time\ntest_proba = np.zeros((X_test.shape[0], y.shape[1]))\nfor nfold in range(NFOLDS):\n    proba = cv_results['estimator'][nfold].predict_proba(X_test)\n    proba = np.array(proba)[:,:,1].T\n    test_proba += proba \/ NFOLDS","8f55b6b0":"# set control test preba to 0\ntest_proba[ts_mask] = 0","8381018e":"submission.iloc[:,1:] = test_proba\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","df3c9176":"# Prediction","a821db13":"# create submission file","5db6c1fd":"# Import Libraries","8eb96eb1":"# Cross Validation","3d986c5e":"# Load and Format the dataset"}}