{"cell_type":{"d1db7d69":"code","bd79c31f":"code","b02e9d33":"code","a3da4d78":"code","940c21ce":"code","b09cd2d3":"markdown","94e4228a":"markdown","0aded211":"markdown"},"source":{"d1db7d69":"import random\nimport numpy as np\nfrom itertools import chain\nfrom collections import defaultdict\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\nprevious_direction  = \"\"\nbanned_directions = {\"EAST\" : \"WEST\", \"WEST\" : \"EAST\", \"NORTH\" : \"SOUTH\", \"SOUTH\" : \"NORTH\", \"\" : \"\"}\n\ncircle_directions = {\"SOUTH\" : \"WEST\", \"NORTH\" : \"EAST\", \"EAST\" : \"SOUTH\", \"WEST\" : \"NORTH\", \"\" : \"\"}\n\nbackup_directions = {\"SOUTH\" : \"EAST\", \"EAST\" : \"NORTH\", \"WEST\" : \"SOUTH\", \"NORTH\" : \"WEST\", \"\" : \"\"}\n\n#Cant move in previous direction\n\ndef BFS(graphdict,source):\n    \n    #initialisation\n    colour={}\n    distance={}\n    predecessor={}\n    for v in graphdict.keys():\n        colour[v]='w'\n        distance[v]=np.inf\n        predecessor[v]=None\n        \n    colour[source]='g'\n    distance[source]=0\n    queue=[source]\n    \n    #iteration\n    while queue != []:\n        u=queue[0]\n        for vertex in graphdict[u]:\n            if colour[vertex]=='w':\n                colour[vertex]='g'\n                distance[vertex]=distance[u]+1\n                predecessor[vertex]=u\n                queue.append(vertex)\n        colour[u]='b'\n        \n        if len(queue)>1:\n            queue=queue[1:]\n        else:\n            queue=[]\n            \n    return (distance,predecessor)\n\ndef pathfind(graphdict,start,finish):\n    (d,p)=BFS(graphdict,start)\n   # print(p)\n    thepath=[finish]\n    if finish != start:\n        running=1\n        v=finish\n        #print(\"V\",v)\n        while running==1:\n           # print(\"PV\", p[v])\n            v=p[v]\n            thepath=[v]+thepath\n            if v==start:\n                running=0\n    return thepath\n\ndef addEdge(u,v, graph):\n        graph[u].append(v)\n        return graph\n\ndef getgraph():\n    graph = defaultdict(list)\n    for i in range(77):\n        directions = {\"NORTH\" : [-1, 0], \"SOUTH\" : [1, 0], \"EAST\" : [0,1], \"WEST\" : [0,-1]}\n        for direction in [\"NORTH\", \"EAST\", \"SOUTH\", \"WEST\"]:\n            row, col = row_col(i, 11)\n            add_row, add_col = directions[direction]\n            new_row = (row + add_row) % 7\n            new_col = (col + add_col) % 11\n            newpos = new_row*11 + new_col \n            oldpos = row*11 + col\n            graph = addEdge(oldpos,newpos,graph)\n    return graph\n\n\ndef removeEdge(u,v, graph):\n    if v in graph[u]:\n        graph[u].remove(v)\n    return graph\n\ndef removepositions(my_goose, graph):\n    for i in range(len(my_goose)-1, -1, -1):\n        graph = removeEdge(my_goose[i], my_goose[i-1], graph)\n    return graph\n\ndef get_direction(from_, to_, configuration):\n    \n    fromrow, fromcol = row_col(from_, configuration.columns)\n    torow, tocol = row_col(to_, configuration.columns)\n    \n    \n    row_difference = abs(torow - fromrow)\n    col_difference = abs(tocol - fromcol)\n\n    other_row_difference = 7 - row_difference\n    other_col_difference = 11 - col_difference\n\n    if torow > fromrow:\n        if row_difference > other_row_difference:\n            direction = \"NORTH\"\n        elif row_difference < other_row_difference:\n            direction = \"SOUTH\"\n    if torow < fromrow:\n        if row_difference < other_row_difference:\n            direction = \"NORTH\"\n        elif row_difference > other_row_difference:\n            direction = \"SOUTH\"\n\n    if tocol > fromcol:\n        if col_difference < other_col_difference:\n            direction = \"EAST\"\n        elif col_difference > other_col_difference:\n            direction = \"WEST\"\n    if tocol < fromcol:\n        if col_difference > other_col_difference:\n            direction = \"EAST\"\n        elif col_difference < other_col_difference:\n            direction = \"WEST\"\n    \n    return direction\n\ndef get_board():\n    board = np.zeros((7,11), int)\n    count = 0\n    for i in range(len(board)):\n        for j in range(len(board[1])):\n            board[i][j] = count\n            count +=1\n    return board\n\ndef get_preferred_moves(player_goose, observation, configuration):\n    possible_moves_ = possible_moves(player_goose, observation, configuration)\n    player_row, player_column = row_col(player_goose, configuration.columns)\n    \n    food_row, food_col = get_closest_food(player_row, player_column, observation, configuration)\n    food_pos = food_row*11 + food_col\n    \n    distances = [get_distance(player_pos, food_pos, configuration, observation) for player_pos in possible_moves_]\n    preferred_moves = [possible_moves_[idx] for idx in np.argsort(distances)] \n    \n    return preferred_moves\n\n\ndef get_new_dangerous(player_goose, move, player_pos, dangerous_geese_positions, previous_direction, observation, configuration):\n    new_goose = new_goose_position(player_goose, move)\n    new_goose_head = new_goose[0]\n    count = 0\n    \n    temp_previous_direction = get_direction(player_pos, move, configuration)\n  \n    \n    new_possible_moves = possible_moves(new_goose_head, observation, configuration)\n    for val in new_possible_moves:\n        intended_direction = get_direction(new_goose_head, val, configuration)\n        if intended_direction == banned_directions[previous_direction]:\n            count += 1\n        if val in dangerous_geese_positions or val in new_goose:\n            count += 1\n        \n    return new_goose_head, count, temp_previous_direction, new_goose\n\n\ndef dead_end_detection(player_goose, player_pos, move, dangerous_geese_positions, previous_direction, observation, configuration, depth):\n  #  print(\"Depth\", depth)\n    if depth == 1:\n        new_goose_head, count, temp_previous_direction, new_goose = get_new_dangerous(player_goose, move, player_pos, dangerous_geese_positions, previous_direction, observation, configuration)\n        return count\n    \n    else:\n        for i in range(depth):\n            new_goose_head, count, temp_previous_direction, new_goose = get_new_dangerous(player_goose, move, player_pos, dangerous_geese_positions, previous_direction, observation, configuration)\n            if count == 4:\n                print(\"------\")\n                print(\"Count hit 4, printing description\")\n                print(\"Move\", move)\n                print(\"Depth\", depth)\n                print(new_goose, new_goose_head)\n                print(\"------\")\n                return count\n            new_preferred_moves = get_preferred_moves(new_goose_head, observation, configuration)\n            for newmove in new_preferred_moves:\n                new_goose_head, count, temp_previous_direction, new_goose = get_new_dangerous(new_goose, newmove, new_goose_head, dangerous_geese_positions, temp_previous_direction, observation, configuration)\n            player_pos = new_goose_head\n            player_goose = new_goose\n    return count\n    \ndef get_closest_food(player_row, player_column, observation, configuration):\n    foods = observation.food\n    distances = []\n    for i in range(len(foods)):\n        food_row, food_column = row_col(foods[i], configuration.columns)\n        total_distance = (food_row - player_row)**2 + (food_column - player_column)**2\n        distances.append(total_distance)\n    min_distance_index = distances.index(min(distances))\n    closest_food = foods[min_distance_index]\n    food_row, food_column = row_col(foods[min_distance_index], configuration.columns)\n    return food_row, food_column\n\ndef possible_moves(position, observation, configuration):\n    possible_moves  = [] \n    directions = {\"NORTH\" : [-1, 0], \"SOUTH\" : [1, 0], \"EAST\" : [0,1], \"WEST\" : [0,-1]}\n    row, col = row_col(position, configuration.columns)\n    for direction in list(directions.keys()):\n        add_row, add_col = directions[direction]\n        new_row = (row + add_row) % 7\n        new_col = (col + add_col) % 11\n        rowcol_topos = new_row*11 + new_col\n        possible_moves.append(rowcol_topos)\n    return possible_moves\n\n\ndef get_next_placement(goose, observation, configuration):\n    if not goose:\n        return set()\n    \n    # Retrieve basic information for goose\n    goose_head = goose[0]\n    rows, columns = configuration.rows, configuration.columns\n    \n    # Get all possible moves\n    possible_moves_ = possible_moves(goose_head, observation, configuration)\n    # Placement of goose is equal to current placement and one cell towards food\n    next_move_placement = set(goose + possible_moves_)\n\n    return next_move_placement\n\ndef get_distance(position, destination, configuration, observation):\n    distances = []\n    row, col = row_col(position, configuration.columns)\n    destrow, destcol = row_col(destination, configuration.columns)\n    total_distance = (destrow - row)**2 + (destcol - col)**2\n    return total_distance\n\ndef new_goose_position(goose, move):\n    copy_goose = goose\n   # print(copy_goose)\n    copy_goose = copy_goose[-1:] + copy_goose[:-1]\n    copy_goose[0] = move\n    return copy_goose\n\ndef new_position(position, direction, observation, configuration):\n    directions = {\"NORTH\" : [-1, 0], \"SOUTH\" : [1, 0], \"EAST\" : [0,1], \"WEST\" : [0,-1]}\n    row, col = row_col(position, configuration.columns)\n    add_row, add_col = directions[direction]\n    new_row = (row + add_row) % 7\n    new_col = (col + add_col) % 11\n    rowcol_topos = new_row*11 + new_col\n    return rowcol_topos\n\ndef myround(x, base=40):\n    return base * round(x\/base)\n\n\n\n    \ndef agent(obs_dict, config_dict):\n   \n    global previous_direction\n    \n    \n    observation = Observation(obs_dict)\n    configuration = Configuration(config_dict)\n    player_index = observation.index\n#     print(\"Index\", player_index)\n    \n#     print(\"Observation.step\", observation.step+1)\n    player_goose = observation.geese[player_index]\n    player_pos = player_goose[0]\n    player_row, player_column = row_col(player_pos, configuration.columns)\n    \n    geese_positions = observation.geese[:]\n    geese_positions.pop(player_index)\n    dangerous_geese_positions = [get_next_placement(goose, observation, configuration)\n                             for goose in geese_positions]\n    dangerous_geese_positions = list(chain.from_iterable(dangerous_geese_positions))\n    new_dangerous = [[i] for i in dangerous_geese_positions]\n    \n    two_step = [get_next_placement(goose, observation, configuration)\n                             for goose in new_dangerous]\n    two_step = list(chain.from_iterable(two_step))\n    own_next_placement = get_next_placement(player_goose, observation, configuration)\n    \n\n    closest_starve_step = myround(observation.step)\n    steps_until_starve = closest_starve_step - observation.step\n    \n\n    graph = getgraph()\n    graph = removepositions(player_goose, graph)\n    if previous_direction != \"\" and len(player_goose) > 1 and observation.step <= 150:\n        disregard = False\n        intended_direction = circle_directions[previous_direction]\n        move = new_position(player_goose[0], intended_direction, observation, configuration)\n        graph = removeEdge(move, player_pos, graph)\n        path_list = pathfind(dict(graph),move,player_goose[-1])[:-1]\n        \n        for pos in path_list:\n            if pos in dangerous_geese_positions and pos in player_goose or intended_direction == banned_directions[previous_direction]:\n                disregard = True\n        \n        if disregard:\n            intended_direction = backup_directions[intended_direction]\n            move = new_position(player_goose[0], intended_direction, observation, configuration)\n            graph = getgraph()\n            graph = removepositions(player_goose, graph)  \n            graph = removeEdge(move, player_pos, graph)\n            path_list = pathfind(dict(graph),move,player_goose[-1])[:-1]\n            for pos in path_list:\n                if pos in dangerous_geese_positions and pos in player_goose or intended_direction == banned_directions[previous_direction]:\n                    disregard_backup = True\n                \n                if diregard_backup == False:\n                    previous_direction = intended_direction\n                    return intened_direction\n        else:\n            previous_direction = intended_direction\n            return intended_direction\n        \n      \n        \n        \n#         if new_rowcol not in dangerous_geese_positions and new_rowcol not in player_goose and intended_direction != banned_directions[previous_direction]:\n#                 previous_direction = intended_direction\n#                 return intended_direction\n#         else:\n#             intended_direction = backup_directions[intended_direction]\n#             new_rowcol = new_position(player_goose[0], intended_direction, observation, configuration)\n#             if new_rowcol not in dangerous_geese_positions and new_rowcol not in player_goose and intended_direction != banned_directions[previous_direction]:\n#                 previous_direction = intended_direction\n#                 return intended_direction\n    \n    food_row, food_col = get_closest_food(player_row, player_column, observation, configuration)\n    food_pos = food_row*11 + food_col\n    \n    possible_moves_ = possible_moves(player_pos, observation, configuration)\n    \n    \n    \n    \n#     print(\"Step\", observation.step +1)\n#     print(\"player index\", player_index)\n#     print(\"player goose\", player_goose)\n#     print(\"Possible moves\", possible_moves_)\n\n# #         banned_direction = banned_directions[previous_direction]\n# #         last_position = new_position(player_pos, banned_direction, observation, configuration)\n# #         graph = removeEdge(player_pos, last_position, graph)\n# #      #   print(graph)\n#    # print(\"Graph\",dict(graph))\n    \n    \n    \n    distances = [get_distance(player_pos, food_pos, configuration, observation) for player_pos in possible_moves_]\n    preferred_moves = [possible_moves_[idx] for idx in np.argsort(distances)]\n    \n    \n    graph = getgraph()\n    graph = removepositions(player_goose, graph)\n    \n    temp_direction = None\n    chosen_direction = \"SOUTH\"\n    \n    for move in preferred_moves:\n        \n        graph = removeEdge(move, player_pos, graph)\n        path_list = pathfind(dict(graph),move,player_goose[-1])[:-1]\n        graph = getgraph()\n        graph = removepositions(player_goose, graph)\n        for pos in path_list:\n            if pos in dangerous_geese_positions or pos in player_goose:\n                continue\n    \n        \n        \n#         count = dead_end_detection(player_goose, player_pos, move, dangerous_geese_positions, previous_direction, observation, configuration, depth = 5)\n# #         print(\"Move\", move)\n#         print(\"Count\",count)\n   \n    \n#         if count == 4:\n#             continue\n        \n        if move not in dangerous_geese_positions and move not in player_goose:\n            intended_direction = get_direction(player_pos, move,configuration)\n            \n            if intended_direction != banned_directions[previous_direction]:\n                chosen_direction = intended_direction\n                temp_direction = intended_direction\n                break\n    \n    if temp_direction is None:\n        for move in preferred_moves:\n            if move in player_goose:\n                continue\n            else:\n                temp_direction = get_direction(player_pos, move, configuration)\n\n                if temp_direction != banned_directions[previous_direction]:\n                    chosen_direction = temp_direction\n                    break\n    \n    \n \n    previous_direction = chosen_direction \n    return chosen_direction","bd79c31f":"from kaggle_environments import evaluate, make, utils\n\n# Setup a hungry_geese environment.\nenv = make(\"hungry_geese\", debug = True)\nenv.run([agent, agent])\n","b02e9d33":"env.render(mode=\"ipython\", width=700, height=700)","a3da4d78":"def mean_reward(rewards):\n    print(rewards)\n    return sum(r[0] for r in rewards) \/ float(len(rewards))\n\n# Run multiple episodes to estimate its performance.\nprint(\"Greedy vs Random Agent:\", mean_reward(evaluate(\"hungry_geese\", [agent, \"random\"], num_episodes=100)))\nprint(\"Greedy vs Greedy:\", mean_reward(evaluate(\"hungry_geese\", [agent, agent], num_episodes=100)))","940c21ce":"%%writefile agent.py\n\nimport random\nimport numpy as np\nfrom itertools import chain\nfrom collections import defaultdict\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\nprevious_direction  = \"\"\nbanned_directions = {\"EAST\" : \"WEST\", \"WEST\" : \"EAST\", \"NORTH\" : \"SOUTH\", \"SOUTH\" : \"NORTH\", \"\" : \"\"}\n\ncircle_directions = {\"SOUTH\" : \"WEST\", \"NORTH\" : \"EAST\", \"EAST\" : \"SOUTH\", \"WEST\" : \"NORTH\", \"\" : \"\"}\n\nbackup_directions = {\"SOUTH\" : \"EAST\", \"EAST\" : \"NORTH\", \"WEST\" : \"SOUTH\", \"NORTH\" : \"WEST\", \"\" : \"\"}\n\n#Cant move in previous direction\n\ndef BFS(graphdict,source):\n    \n    #initialisation\n    colour={}\n    distance={}\n    predecessor={}\n    for v in graphdict.keys():\n        colour[v]='w'\n        distance[v]=np.inf\n        predecessor[v]=None\n        \n    colour[source]='g'\n    distance[source]=0\n    queue=[source]\n    \n    #iteration\n    while queue != []:\n        u=queue[0]\n        for vertex in graphdict[u]:\n            if colour[vertex]=='w':\n                colour[vertex]='g'\n                distance[vertex]=distance[u]+1\n                predecessor[vertex]=u\n                queue.append(vertex)\n        colour[u]='b'\n        \n        if len(queue)>1:\n            queue=queue[1:]\n        else:\n            queue=[]\n            \n    return (distance,predecessor)\n\ndef pathfind(graphdict,start,finish):\n    (d,p)=BFS(graphdict,start)\n   # print(p)\n    thepath=[finish]\n    if finish != start:\n        running=1\n        v=finish\n        #print(\"V\",v)\n        while running==1:\n           # print(\"PV\", p[v])\n            v=p[v]\n            thepath=[v]+thepath\n            if v==start:\n                running=0\n    return thepath\n\ndef addEdge(u,v, graph):\n        graph[u].append(v)\n        return graph\n\ndef getgraph():\n    graph = defaultdict(list)\n    for i in range(77):\n        directions = {\"NORTH\" : [-1, 0], \"SOUTH\" : [1, 0], \"EAST\" : [0,1], \"WEST\" : [0,-1]}\n        for direction in [\"NORTH\", \"EAST\", \"SOUTH\", \"WEST\"]:\n            row, col = row_col(i, 11)\n            add_row, add_col = directions[direction]\n            new_row = (row + add_row) % 7\n            new_col = (col + add_col) % 11\n            newpos = new_row*11 + new_col \n            oldpos = row*11 + col\n            graph = addEdge(oldpos,newpos,graph)\n    return graph\n\n\ndef removeEdge(u,v, graph):\n    if v in graph[u]:\n        graph[u].remove(v)\n    return graph\n\ndef removepositions(my_goose, graph):\n    for i in range(len(my_goose)-1, -1, -1):\n        graph = removeEdge(my_goose[i], my_goose[i-1], graph)\n    return graph\n\ndef get_direction(from_, to_, configuration):\n    \n    fromrow, fromcol = row_col(from_, configuration.columns)\n    torow, tocol = row_col(to_, configuration.columns)\n    \n    \n    row_difference = abs(torow - fromrow)\n    col_difference = abs(tocol - fromcol)\n\n    other_row_difference = 7 - row_difference\n    other_col_difference = 11 - col_difference\n\n    if torow > fromrow:\n        if row_difference > other_row_difference:\n            direction = \"NORTH\"\n        elif row_difference < other_row_difference:\n            direction = \"SOUTH\"\n    if torow < fromrow:\n        if row_difference < other_row_difference:\n            direction = \"NORTH\"\n        elif row_difference > other_row_difference:\n            direction = \"SOUTH\"\n\n    if tocol > fromcol:\n        if col_difference < other_col_difference:\n            direction = \"EAST\"\n        elif col_difference > other_col_difference:\n            direction = \"WEST\"\n    if tocol < fromcol:\n        if col_difference > other_col_difference:\n            direction = \"EAST\"\n        elif col_difference < other_col_difference:\n            direction = \"WEST\"\n    \n    return direction\n\ndef get_board():\n    board = np.zeros((7,11), int)\n    count = 0\n    for i in range(len(board)):\n        for j in range(len(board[1])):\n            board[i][j] = count\n            count +=1\n    return board\n\ndef get_preferred_moves(player_goose, observation, configuration):\n    possible_moves_ = possible_moves(player_goose, observation, configuration)\n    player_row, player_column = row_col(player_goose, configuration.columns)\n    \n    food_row, food_col = get_closest_food(player_row, player_column, observation, configuration)\n    food_pos = food_row*11 + food_col\n    \n    distances = [get_distance(player_pos, food_pos, configuration, observation) for player_pos in possible_moves_]\n    preferred_moves = [possible_moves_[idx] for idx in np.argsort(distances)] \n    \n    return preferred_moves\n\n\ndef get_new_dangerous(player_goose, move, player_pos, dangerous_geese_positions, previous_direction, observation, configuration):\n    new_goose = new_goose_position(player_goose, move)\n    new_goose_head = new_goose[0]\n    count = 0\n    \n    temp_previous_direction = get_direction(player_pos, move, configuration)\n  \n    \n    new_possible_moves = possible_moves(new_goose_head, observation, configuration)\n    for val in new_possible_moves:\n        intended_direction = get_direction(new_goose_head, val, configuration)\n        if intended_direction == banned_directions[previous_direction]:\n            count += 1\n        if val in dangerous_geese_positions or val in new_goose:\n            count += 1\n        \n    return new_goose_head, count, temp_previous_direction, new_goose\n\n\ndef dead_end_detection(player_goose, player_pos, move, dangerous_geese_positions, previous_direction, observation, configuration, depth):\n  #  print(\"Depth\", depth)\n    if depth == 1:\n        new_goose_head, count, temp_previous_direction, new_goose = get_new_dangerous(player_goose, move, player_pos, dangerous_geese_positions, previous_direction, observation, configuration)\n        return count\n    \n    else:\n        for i in range(depth):\n            new_goose_head, count, temp_previous_direction, new_goose = get_new_dangerous(player_goose, move, player_pos, dangerous_geese_positions, previous_direction, observation, configuration)\n            if count == 4:\n                print(\"------\")\n                print(\"Count hit 4, printing description\")\n                print(\"Move\", move)\n                print(\"Depth\", depth)\n                print(new_goose, new_goose_head)\n                print(\"------\")\n                return count\n            new_preferred_moves = get_preferred_moves(new_goose_head, observation, configuration)\n            for newmove in new_preferred_moves:\n                new_goose_head, count, temp_previous_direction, new_goose = get_new_dangerous(new_goose, newmove, new_goose_head, dangerous_geese_positions, temp_previous_direction, observation, configuration)\n            player_pos = new_goose_head\n            player_goose = new_goose\n    return count\n    \ndef get_closest_food(player_row, player_column, observation, configuration):\n    foods = observation.food\n    distances = []\n    for i in range(len(foods)):\n        food_row, food_column = row_col(foods[i], configuration.columns)\n        total_distance = (food_row - player_row)**2 + (food_column - player_column)**2\n        distances.append(total_distance)\n    min_distance_index = distances.index(min(distances))\n    closest_food = foods[min_distance_index]\n    food_row, food_column = row_col(foods[min_distance_index], configuration.columns)\n    return food_row, food_column\n\ndef possible_moves(position, observation, configuration):\n    possible_moves  = [] \n    directions = {\"NORTH\" : [-1, 0], \"SOUTH\" : [1, 0], \"EAST\" : [0,1], \"WEST\" : [0,-1]}\n    row, col = row_col(position, configuration.columns)\n    for direction in list(directions.keys()):\n        add_row, add_col = directions[direction]\n        new_row = (row + add_row) % 7\n        new_col = (col + add_col) % 11\n        rowcol_topos = new_row*11 + new_col\n        possible_moves.append(rowcol_topos)\n    return possible_moves\n\n\ndef get_next_placement(goose, observation, configuration):\n    if not goose:\n        return set()\n    \n    # Retrieve basic information for goose\n    goose_head = goose[0]\n    rows, columns = configuration.rows, configuration.columns\n    \n    # Get all possible moves\n    possible_moves_ = possible_moves(goose_head, observation, configuration)\n    # Placement of goose is equal to current placement and one cell towards food\n    next_move_placement = set(goose + possible_moves_)\n\n    return next_move_placement\n\ndef get_distance(position, destination, configuration, observation):\n    distances = []\n    row, col = row_col(position, configuration.columns)\n    destrow, destcol = row_col(destination, configuration.columns)\n    total_distance = (destrow - row)**2 + (destcol - col)**2\n    return total_distance\n\ndef new_goose_position(goose, move):\n    copy_goose = goose\n   # print(copy_goose)\n    copy_goose = copy_goose[-1:] + copy_goose[:-1]\n    copy_goose[0] = move\n    return copy_goose\n\ndef new_position(position, direction, observation, configuration):\n    directions = {\"NORTH\" : [-1, 0], \"SOUTH\" : [1, 0], \"EAST\" : [0,1], \"WEST\" : [0,-1]}\n    row, col = row_col(position, configuration.columns)\n    add_row, add_col = directions[direction]\n    new_row = (row + add_row) % 7\n    new_col = (col + add_col) % 11\n    rowcol_topos = new_row*11 + new_col\n    return rowcol_topos\n\ndef myround(x, base=40):\n    return base * round(x\/base)\n\n\n\n    \ndef agent(obs_dict, config_dict):\n   \n    global previous_direction\n    \n    \n    observation = Observation(obs_dict)\n    configuration = Configuration(config_dict)\n    player_index = observation.index\n#     print(\"Index\", player_index)\n    \n#     print(\"Observation.step\", observation.step+1)\n    player_goose = observation.geese[player_index]\n    player_pos = player_goose[0]\n    player_row, player_column = row_col(player_pos, configuration.columns)\n    \n    geese_positions = observation.geese[:]\n    geese_positions.pop(player_index)\n    dangerous_geese_positions = [get_next_placement(goose, observation, configuration)\n                             for goose in geese_positions]\n    dangerous_geese_positions = list(chain.from_iterable(dangerous_geese_positions))\n    new_dangerous = [[i] for i in dangerous_geese_positions]\n    \n    two_step = [get_next_placement(goose, observation, configuration)\n                             for goose in new_dangerous]\n    two_step = list(chain.from_iterable(two_step))\n    own_next_placement = get_next_placement(player_goose, observation, configuration)\n    \n\n    closest_starve_step = myround(observation.step)\n    steps_until_starve = closest_starve_step - observation.step\n    \n\n    graph = getgraph()\n    graph = removepositions(player_goose, graph)\n    if previous_direction != \"\" and len(player_goose) > 1 and observation.step <= 150:\n        disregard = False\n        intended_direction = circle_directions[previous_direction]\n        move = new_position(player_goose[0], intended_direction, observation, configuration)\n        graph = removeEdge(move, player_pos, graph)\n        path_list = pathfind(dict(graph),move,player_goose[-1])[:-1]\n        \n        for pos in path_list:\n            if pos in dangerous_geese_positions and pos in player_goose or intended_direction == banned_directions[previous_direction]:\n                disregard = True\n        \n        if disregard:\n            intended_direction = backup_directions[intended_direction]\n            move = new_position(player_goose[0], intended_direction, observation, configuration)\n            graph = getgraph()\n            graph = removepositions(player_goose, graph)  \n            graph = removeEdge(move, player_pos, graph)\n            path_list = pathfind(dict(graph),move,player_goose[-1])[:-1]\n            for pos in path_list:\n                if pos in dangerous_geese_positions and pos in player_goose or intended_direction == banned_directions[previous_direction]:\n                    disregard_backup = True\n                \n                if diregard_backup == False:\n                    previous_direction = intended_direction\n                    return intened_direction\n        else:\n            previous_direction = intended_direction\n            return intended_direction\n        \n      \n        \n        \n#         if new_rowcol not in dangerous_geese_positions and new_rowcol not in player_goose and intended_direction != banned_directions[previous_direction]:\n#                 previous_direction = intended_direction\n#                 return intended_direction\n#         else:\n#             intended_direction = backup_directions[intended_direction]\n#             new_rowcol = new_position(player_goose[0], intended_direction, observation, configuration)\n#             if new_rowcol not in dangerous_geese_positions and new_rowcol not in player_goose and intended_direction != banned_directions[previous_direction]:\n#                 previous_direction = intended_direction\n#                 return intended_direction\n    \n    food_row, food_col = get_closest_food(player_row, player_column, observation, configuration)\n    food_pos = food_row*11 + food_col\n    \n    possible_moves_ = possible_moves(player_pos, observation, configuration)\n    \n    \n    \n    \n#     print(\"Step\", observation.step +1)\n#     print(\"player index\", player_index)\n#     print(\"player goose\", player_goose)\n#     print(\"Possible moves\", possible_moves_)\n\n# #         banned_direction = banned_directions[previous_direction]\n# #         last_position = new_position(player_pos, banned_direction, observation, configuration)\n# #         graph = removeEdge(player_pos, last_position, graph)\n# #      #   print(graph)\n#    # print(\"Graph\",dict(graph))\n    \n    \n    \n    distances = [get_distance(player_pos, food_pos, configuration, observation) for player_pos in possible_moves_]\n    preferred_moves = [possible_moves_[idx] for idx in np.argsort(distances)]\n    \n    \n    graph = getgraph()\n    graph = removepositions(player_goose, graph)\n    \n    temp_direction = None\n    chosen_direction = \"SOUTH\"\n    \n    for move in preferred_moves:\n        \n        graph = removeEdge(move, player_pos, graph)\n        path_list = pathfind(dict(graph),move,player_goose[-1])[:-1]\n        graph = getgraph()\n        graph = removepositions(player_goose, graph)\n        for pos in path_list:\n            if pos in dangerous_geese_positions or pos in player_goose:\n                continue\n    \n        \n        \n#         count = dead_end_detection(player_goose, player_pos, move, dangerous_geese_positions, previous_direction, observation, configuration, depth = 5)\n# #         print(\"Move\", move)\n#         print(\"Count\",count)\n   \n    \n#         if count == 4:\n#             continue\n        \n        if move not in dangerous_geese_positions and move not in player_goose:\n            intended_direction = get_direction(player_pos, move,configuration)\n            \n            if intended_direction != banned_directions[previous_direction]:\n                chosen_direction = intended_direction\n                temp_direction = intended_direction\n                break\n    \n    if temp_direction is None:\n        for move in preferred_moves:\n            if move in player_goose:\n                continue\n            else:\n                temp_direction = get_direction(player_pos, move, configuration)\n\n                if temp_direction != banned_directions[previous_direction]:\n                    chosen_direction = temp_direction\n                    break\n    \n    \n \n    previous_direction = chosen_direction \n    return chosen_direction","b09cd2d3":"This agent takes advantage of board wrapping and goes for the closest food. It also avoids moving in the same direction as the previous direction which ends the game for the goose. \n\nAdditionally, it actively avoids other geese and itself as well as avoiding situations whereby it will be trapped by it's own body. Also, if faced with a situation where there are no valid moves (i.e will hit itself or the head of another goose if going for same food) then it will take the risk rather than deafult to the deafult direction which is South.\n\nIt will also try to move in circle patterns to survive longer which seems to be the meta currently.","94e4228a":"## Write Submission File","0aded211":"# Greedy VS Greedy"}}