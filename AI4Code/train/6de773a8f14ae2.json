{"cell_type":{"85d488f5":"code","c7f3cce5":"code","73aef831":"code","fec9d987":"code","ad74f56c":"code","1d780364":"code","ea06a607":"code","708c4892":"code","cc36c615":"code","2476c1df":"code","0b9b9591":"code","98dca49d":"code","78be88aa":"code","c8038bf6":"code","1cf5c628":"code","a5740437":"code","d817f4e8":"code","3367dddc":"code","64fe19a0":"markdown","828c1b86":"markdown","0d75b2c4":"markdown","06ff02c8":"markdown","3224d0b9":"markdown","304c0546":"markdown","69719a2a":"markdown","0e464f91":"markdown","24620426":"markdown","5df93d71":"markdown","218d2db0":"markdown","aaa80179":"markdown","5925f924":"markdown","64803620":"markdown","6159c14b":"markdown","ee80f3ee":"markdown","3083ac33":"markdown","060cf5af":"markdown"},"source":{"85d488f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c7f3cce5":"import matplotlib.pyplot as plt\nimport seaborn as sns # biblioteka za grafi\u010dki prikaz\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport re\n\nfrom bs4 import BeautifulSoup\nfrom tqdm import tqdm\nfrom nltk.stem import WordNetLemmatizer\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,f1_score, confusion_matrix\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Dense , Input , LSTM , Embedding, Dropout , Activation, GRU, Flatten\nfrom keras.layers import Bidirectional, GlobalMaxPool1D\nfrom keras.models import Model, Sequential\nfrom keras.layers import Convolution1D\nfrom keras import initializers, regularizers, constraints, optimizers, layers","73aef831":"all_data = pd.read_csv(\"\/kaggle\/input\/amazon-fine-food-reviews\/Reviews.csv\")\nprint(\"Koli\u010dina podataka : \", all_data.shape)\nall_data.head() # prikaz prvih 5 redova","fec9d987":"data_filtered = all_data[all_data[\"Score\"]!=3] #Uklanjanje neutralnih podataka, imaju Score = 3\ndata_filtered.shape","ad74f56c":"#pre promene\nplt.figure(figsize = (20,10))\nsns.countplot(data_filtered['Score'])\nplt.title(\"Graficki prikaz odnosa sentimentnosti kritika\")","1d780364":"data_filtered[\"Score\"] = data_filtered[\"Score\"].apply(lambda x : 1 if x>3 else 0)\ndata_filtered.head()\n","ea06a607":"sorted_data=data_filtered.sort_values('ProductId', kind='quicksort', na_position='last') #sortiranje podataka po Id -u proizvoda\ndata_final=sorted_data.drop_duplicates(subset={\"UserId\",\"ProfileName\",\"Time\",\"Text\"}, keep='first', inplace=False)\ndata_final.shape","708c4892":"#posle promene\ndata_final['Score'].value_counts()","cc36c615":"def decontract(text):\n    text = re.sub(r\"won\\'t\", \"will not\", text)\n    text = re.sub(r\"can\\'t\", \"can not\", text)\n    text = re.sub(r\"n\\'t\", \" not\", text)\n    text = re.sub(r\"\\'re\", \" are\", text)\n    text = re.sub(r\"\\'s\", \" is\", text)\n    text = re.sub(r\"\\'d\", \" would\", text)\n    text = re.sub(r\"\\'ll\", \" will\", text)\n    text = re.sub(r\"\\'t\", \" not\", text)\n    text = re.sub(r\"\\'ve\", \" have\", text)\n    text = re.sub(r\"\\'m\", \" am\", text)\n    return text\n\n#skup random stop reci (veznik)\nstop_words= set(['br', 'the', 'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"])","2476c1df":"def preprocess_text(review):\n    review = re.sub(r\"http\\S+\", \"\", review)             # uklanjanje veb linkova\n    review = BeautifulSoup(review, 'lxml').get_text()   # uklanjanje html tagova\n    review = decontract(review)                         # decontracting\n    review = re.sub(\"\\S*\\d\\S*\", \"\", review).strip()     # uklanjanje reci koji sadrze brojeve\n    review = re.sub('[^A-Za-z]+', ' ', review)          # uklanjanje karaktera koji nisu reci\n    review = review.lower()                             # pretvaranje sva slova u mala\n    review = [word for word in review.split(\" \") if not word in stop_words] # uklanjanje stop reci\n    review = \" \".join(review)\n    review.strip()\n    return review\ndata_final['Text'] = data_final['Text'].apply(lambda x: preprocess_text(x))\ndata_final['Text'].head()","0b9b9591":"train_df, test_df = train_test_split(data_final, test_size = 0.4, random_state = 42)\nkeep_col = ['Id','ProductId','Text','Score']\ntrain_df = train_df[keep_col]\ntest_df = test_df[keep_col]\nprint(\"Podaci za treniranje : \", train_df.shape)\nprint(\"Podaci za testiranje: \", test_df.shape)","98dca49d":"train_df.head()","78be88aa":"test_df.head()","c8038bf6":"overlapped = pd.merge(train_df[[\"Text\", \"Score\"]], test_df, on=\"Text\", how=\"inner\")\noverlap_boolean_mask_test = test_df['Text'].isin(overlapped['Text'])","1cf5c628":"print(\"Du\u017eina teksta u fajlu za treniranje\")\nsns.distplot(train_df['Text'].map(lambda ele: len(ele)), kde_kws={\"label\": \"train\"})\n\nprint(\"Du\u017eina teksta u fajlu za treniranje\")\nsns.distplot(test_df[~overlap_boolean_mask_test]['Text'].map(lambda ele: len(ele)), kde_kws={\"label\": \"test\"})","a5740437":"top_words = 6000\ntokenizer = Tokenizer(num_words=top_words) #\"A boy is sitting in..\" word_index[\"A\"] = 1; word_index[\"boy\"] = 2\ntokenizer.fit_on_texts(train_df['Text'])\nlist_tokenized_train = tokenizer.texts_to_sequences(train_df['Text'])\n\nmax_review_length = 130 \nX_train = pad_sequences(list_tokenized_train, maxlen=max_review_length)\ny_train = train_df['Score']\nembedding_vecor_length = 32\nmodel = Sequential()\nmodel.add(Embedding(top_words+1, embedding_vecor_length, input_length=max_review_length))\nmodel.add(LSTM(100)) #100 jedinica\nmodel.add(Dense(1, activation='sigmoid')) # sigmoid- uvek vraca 0 ili 1\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()","d817f4e8":"model.fit(X_train,y_train, epochs=2, batch_size=64, validation_split=0.2)","3367dddc":"list_tokenized_test = tokenizer.texts_to_sequences(test_df['Text'])\nX_test = pad_sequences(list_tokenized_test, maxlen=max_review_length)\ny_test = test_df['Score']\nprediction = model.predict(X_test)\ny_pred = (prediction > 0.5)\nprint(\"Ta\u010dnost modela: \", accuracy_score(y_pred, y_test))","64fe19a0":"<a id=\"2.3\"><\/a>\n# # 2.3 Uklanjanje dupliranih redova","828c1b86":"[1.Biblioteke](#1) <br>\n[2.Obrata podataka iz cvs fajla](#2)<br>\n   [2.1 Oblik podataka](#2.1) <br>\n   [2.2 Sentimentnost na osnovu vrednosti u koloni Score](#2.2) <br>\n   [2.3 Uklanjanje dupliranih redova](#2.3) <br>\n[3.Obrada teksta](#3) <br>\n[4.Podela skupa podataka na podatke za treniranje i testiranje](#4) <br>\n[5.Kreiranje modela](#5) <br>\n[6.Treniranje modela](#6) <br>\n[7.Evaluacija modela na podacima za testiranje](#7)\n\n   \n   \n   \n   \n   \n","0d75b2c4":"[](#)","06ff02c8":"<a id=\"3\"><\/a>\n# 3. Obrada teksta","3224d0b9":"Uklanjanje veb linkova, html tagova, reci koje sadrze brojeve, karaktera koji nisu reci, pretvaranje velika slova u mala","304c0546":"# # # Primena Sentiment analize na slede\u0107em skupu podataka \"Amazon Fine Food Reviews\" primenom LSTM modela","69719a2a":"<a id=\"6\"><\/a>\n# 6.Treniranje modela","0e464f91":"<a id=\"2.1\"><\/a>\n# # 2.1. Oblik podataka","24620426":"<a id=\"1\"><\/a>\n# 1. Biblioteke","5df93d71":"Histogram duzine komentara oba skupa podataka","218d2db0":"dodeljujem vrednost 1 ako je > 3 a vrednost 0 ako je < od 3","aaa80179":"Odnos podataka ta treniranje i testiranje je 60:40","5925f924":"Preklapanje podataka izmedju podataka u fajlovima za treniranje i za testiranje","64803620":"<a id=\"2\"><\/a>\n# 2.Obrata podataka iz cvs fajla","6159c14b":"<a id=\"5\"><\/a>\n# 5. Kreiranje modela","ee80f3ee":"<a id=\"7\"><\/a>\n# 7. Evaluacija modela na podacima za testiranje","3083ac33":"<a id=\"4\"><\/a>\n# 4. Podela skupa podataka na podatke za treniranje i testiranje","060cf5af":"<a id=\"2.2\"><\/a>\n# #  2.2 Sentimentnost na osnovu vrednosti u koloni Score"}}