{"cell_type":{"259e7743":"code","5687be2e":"code","005d2400":"code","0589e5b8":"code","7e6ca4ae":"code","5856b020":"code","97f58ca1":"code","02e98bb2":"code","0096f97d":"code","deb5796b":"code","bce92c46":"code","e1c91447":"markdown","2153a270":"markdown","36eb08f5":"markdown","9c71cb39":"markdown","c09940ec":"markdown","567ab669":"markdown","671de846":"markdown","2128449b":"markdown","0f945e8a":"markdown","2404286f":"markdown"},"source":{"259e7743":"!pip install reliefe","5687be2e":"!pip install umap -U","005d2400":"import pandas as pd\nimport numpy as np\nimport datatable as dt\nimport optuna\n\nimport reliefe\nfrom sklearn.model_selection import train_test_split\n\nimport gc; gc.enable()\n\nimport warnings\nwarnings.filterwarnings('ignore')","0589e5b8":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df","7e6ca4ae":"PATH = '..\/input\/dataprep-nov21\/gauss.parquet'\nX = pd.read_parquet(PATH)\nX = reduce_memory_usage(X)\ngc.collect()\nX.head()","5856b020":"PATH = '..\/input\/dataprep-nov21\/target.parquet'\ny = pd.read_parquet(PATH)\ny = reduce_memory_usage(y)\ngc.collect()\ny.head()","97f58ca1":"N = y.shape[0]\nX = X.head(N)\ntarget = 'target'\ny = y[target]\ngc.collect()\ny.head()","02e98bb2":"PATH = '..\/input\/dataprep-nov21\/folds.parquet'\nfolds = pd.read_parquet(PATH)\nfolds.head()","0096f97d":"# initialize feature importance table\nfi = pd.DataFrame([], columns=X.columns.tolist()).T\n\ni = 0\nfor c in folds.columns.tolist():\n    for j in range(5):\n        # select data\n        key = (folds[c] == j)\n        X_train, y_train = X.loc[key], y.loc[key]\n        \n        # sample for speed-up\n        _, X_train, _, y_train = train_test_split(X_train, y_train, \n                                                  test_size=0.01, random_state=42, stratify=y_train)\n        del _; gc.collect()\n        \n        # train model\n        relief = reliefe.ReliefE()\n        relief.fit(X_train.values, y_train.values)\n        \n        # record results\n        fi[f'rank_{i}'] = relief.feature_importances_\n        fi[f'rank_{i}'] = fi[f'rank_{i}'].rank(ascending=False)\n        \n        # update\n        i += 1\n        del X_train; del y_train; del relief; del key; gc.collect()","deb5796b":"rank_cols = [c for c in fi.columns.tolist() if 'rank' in c]\nfi['avg_rank'] = fi[rank_cols].mean(axis=1)\nfi['med_rank'] = fi[rank_cols].median(axis=1)\n\nfi.sort_values(by='med_rank').head(20)","bce92c46":"fi.reset_index().to_parquet('fi.parquet')","e1c91447":"### 4-Bagged 5-Fold CV Labels","2153a270":"## ReliefE Example\n### Calculate Ranks on Samples","36eb08f5":"## Load Previously Prepared Data\n### Train\/Test Combined","9c71cb39":"## User-Defined Helpers\n\n### Down-Casting to Reduce Memory Usage","c09940ec":"## Import packages","567ab669":"### Remove Test-Set","671de846":"### Final Post Processing","2128449b":"### Target","0f945e8a":"### Save Results","2404286f":"# Feature Ranking - TPS Nov21\n\n## ReliefE: Feature Ranking in High-dimensional Spaces via Manifold Embeddings\n\n* https:\/\/arxiv.org\/pdf\/2101.09577.pdf"}}