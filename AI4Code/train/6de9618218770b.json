{"cell_type":{"e18548f7":"code","453c3068":"code","954e6642":"code","a4788185":"code","78b098ef":"code","f5a72a09":"code","ece4cc97":"code","571a0a68":"code","5af10a2a":"code","9a60a803":"code","3460fd29":"code","22a34bee":"code","dde78083":"code","51df92f3":"code","125918a6":"code","a811d6ac":"code","6aacdb22":"code","d1535c92":"code","0b915ea3":"code","5289bd8a":"code","5d02d1ef":"code","2ab0336c":"code","e9a7c7df":"code","8411959b":"code","a5cbf5a2":"code","0b5b49f0":"code","1dd91b5e":"code","3d269aa3":"code","3a122860":"code","3491dde1":"code","77d5ea8b":"code","94bc3830":"markdown","3e229c03":"markdown","ad2a37d7":"markdown","65449a37":"markdown","aa01610e":"markdown","b2ce492b":"markdown","1b4df804":"markdown","c6825620":"markdown","634f7514":"markdown","de78712b":"markdown","feaaf0ba":"markdown","3c0a3c50":"markdown","c5f4543b":"markdown","d055d3db":"markdown","5aa6fa9e":"markdown","875485b8":"markdown","6d399f10":"markdown","0f537fda":"markdown","bae58345":"markdown","f2d25730":"markdown","3ddd4d1e":"markdown","da5fa8da":"markdown"},"source":{"e18548f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\n# Plotly for some fancy visulization, reference from kaggle notebook and plotly library\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.express as px\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","453c3068":"df_data=pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\ndf_m_data=pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations_by_manufacturer.csv')","954e6642":"display(df_data.head())","a4788185":"display(df_m_data.head())","78b098ef":"print(df_data.shape)\nprint(df_m_data.shape)","f5a72a09":"print(df_data.nunique())\nprint(df_data.dtypes)\ndf_data.country.unique()","ece4cc97":"print(df_m_data.nunique())\nprint(df_m_data.dtypes)\ndf_m_data.location.unique()","571a0a68":"# Draw the treemap to see the vaccine schemes (Package: plotly)\ncountry_total = df_data.groupby([\"country\", \"vaccines\"])['total_vaccinations', 'total_vaccinations_per_hundred'].max().reset_index()\n\nfig = px.treemap(country_total, path = ['vaccines', 'country'], values = 'total_vaccinations',\n                title=\"Total Vaccinations Tree Map\")\nfig.show()","5af10a2a":"# Worldmap\ntrace = go.Choropleth(\n            locations = country_total['country'],\n            locationmode='country names',\n            z = country_total['total_vaccinations'],\n            text = country_total['country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'Total vaccinations',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'Total vaccinations per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","9a60a803":"trace = go.Choropleth(\n            locations = country_total['country'],\n            locationmode='country names',\n            z = country_total['total_vaccinations_per_hundred'],\n            text = country_total['country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'Total vaccinations per hundred people',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'Total vaccinations per hundred people per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","3460fd29":"US_data=df_data.loc[df_data['country'] == 'United States']\nHK_data=df_data.loc[df_data['country'] == 'Hong Kong']\nUK_data=df_data.loc[df_data['country'] == 'United Kingdom']\nUS_m_data=df_m_data.loc[df_m_data['location'] == 'United States']","22a34bee":"display(US_data.head())\ndisplay(US_m_data.head())","dde78083":"display(UK_data.head())\ndisplay(HK_data.head())","51df92f3":"print(US_m_data.nunique())\nUS_m_data.vaccine.unique()","125918a6":"print(US_data.vaccines.unique())\nprint(UK_data.vaccines.unique())\nprint(HK_data.vaccines.unique())","a811d6ac":"us_vaccine_time = US_m_data[[\"location\", \"vaccine\", \"date\", 'total_vaccinations']].dropna()\nus_vaccine_time.columns = [\"location\", \"vaccine\", \"Date\", 'Total vaccinations']\nvaccines = ['Moderna', 'Pfizer\/BioNTech', 'Johnson&Johnson']\ndef plot_vaccine_time(data_df, feature, title, vaccines):\n    data = []\n    for vaccine in vaccines:\n        df = data_df.loc[data_df.vaccine==vaccine]\n        trace = go.Scatter(\n            x = df['Date'],y = df[feature],\n            name = vaccine,\n            mode = \"lines\",\n            marker_line_width = 1,\n            marker_size = 8,\n            marker_symbol = 'circle',\n            text=df['vaccine'])\n        data.append(trace)\n    layout = dict(title = title,\n          xaxis = dict(title = 'Date', showticklabels=True,zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                       showline=True, linewidth=2, linecolor='black', mirror=True,\n                       tickfont=dict(size=10,color='black'),), \n          yaxis = dict(title = feature, gridcolor='lightgrey', zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                       showline=True, linewidth=2, linecolor='black', mirror=True, type=\"linear\"),\n                       plot_bgcolor = 'rgba(0, 0, 0, 0)', paper_bgcolor = 'rgba(0, 0, 0, 0)',\n         hovermode = 'x', \n         height=400\n         )\n    fig = dict(data=data, layout=layout)\n    iplot(fig, filename='US_vaccine')\n    \nplot_vaccine_time(us_vaccine_time, 'Total vaccinations', 'Total vaccinations', vaccines)","6aacdb22":"country_vaccine_time = df_data[[\"country\", \"vaccines\", \"date\", 'total_vaccinations', \n                                'total_vaccinations_per_hundred',  'people_vaccinated','people_vaccinated_per_hundred',\n                               'daily_vaccinations','daily_vaccinations_per_million', \n                                'people_fully_vaccinated', 'people_fully_vaccinated_per_hundred'\n                               ]].dropna()\ncountry_vaccine_time.columns = [\"Country\", \"Vaccines\", \"Date\", 'Total vaccinations', 'Percent', 'People vaccinated', 'People vaccinated percent',\n                               \"Daily vaccinations\", \"Daily vaccinations per million\", \n                                'People fully vaccinated', 'People fully vaccinated percent']\ncountries = ['Hong Kong', 'United Kingdom', 'United States']\ndef plot_time_variation_countries_group(data_df, feature, title, countries):\n    data = []\n    for country in countries:\n        df = data_df.loc[data_df.Country==country]\n        trace = go.Scatter(\n            x = df['Date'],y = df[feature],\n            name=country,\n            mode = \"lines\",\n            marker_line_width = 1,\n            marker_size = 8,\n            marker_symbol = 'circle',\n            text=df['Country'])\n        data.append(trace)\n    layout = dict(title = title,\n          xaxis = dict(title = 'Date', showticklabels=True,zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                       showline=True, linewidth=2, linecolor='black', mirror=True,\n                       tickfont=dict(size=10,color='black'),), \n          yaxis = dict(title = feature, gridcolor='lightgrey', zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                       showline=True, linewidth=2, linecolor='black', mirror=True, type=\"linear\"),\n                       plot_bgcolor = 'rgba(0, 0, 0, 0)', paper_bgcolor = 'rgba(0, 0, 0, 0)',\n         hovermode = 'x', \n         height=400\n         )\n    fig = dict(data=data, layout=layout)\n    iplot(fig, filename='US_UK_HK')","d1535c92":"plot_time_variation_countries_group(country_vaccine_time, 'Percent', 'Total vaccination percentage', countries)","0b915ea3":"plot_time_variation_countries_group(country_vaccine_time, 'People vaccinated percent', 'People vaccinated percentage', countries)","5289bd8a":"plot_time_variation_countries_group(country_vaccine_time, 'People fully vaccinated percent', 'People fully vaccinated percentage', countries)","5d02d1ef":"from scipy import stats\nplt.style.use('seaborn-whitegrid')\n\nregression = df_data[[\"country\", \"date\", 'people_vaccinated_per_hundred']].dropna()\ncountries = ['Hong Kong', 'United Kingdom', 'United States']\n\nfor country in countries: \n    df = regression.loc[regression.country==country]\n    y = df['people_vaccinated_per_hundred'].values\n    x_date = df['date'].values\n    x = range(1, len(y)+1)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(x,y)\n    plt.plot(x,y,label=\"Original data\")\n    plt.plot(x,slope*x+intercept,label=\"Data using regression\")\n    plt.xlabel(\"Time starting from \"+x_date[0])\n    plt.ylabel(\"People vaccinated percent\")\n    plt.title(\"Regression Figure in \"+country)\n    plt.legend()\n    plt.show()\n    print(country,\": slope =\", slope, \", intercept =\", intercept)\n    \n    \n    \n","2ab0336c":"country_covid = ['China Hong Kong Sar', 'USA', 'UK']\nimport torch\ntorch.set_default_tensor_type(torch.DoubleTensor)\n\nclass Dataset(torch.utils.data.Dataset):\n    def __init__(self, country_data, is_full_dataset=False):\n        if is_full_dataset:\n            self.data = torch.tensor(country_data, requires_grad=True)\n        else:\n            self.data = torch.tensor(country_data, requires_grad=True)\n            self.data = self.data[:20]\n            print(self.data)\n    def __len__(self):\n        return len(self.data)-1\n    def __getitem__(self,index):\n        return self.data[index],self.data[index+1]","e9a7c7df":"# Define SIR Model with vaccination\ndef SIR_V(St,It,Rt,beta,gamma,k):\n    N = St + It + Rt\n    S_t1 = St - St * beta * It - k * N\n    I_t1 = It + St * beta * It - gamma * It\n    R_t1 = Rt + gamma * It + k * N\n    return S_t1, I_t1, R_t1","8411959b":"class Feedforward(torch.nn.Module):\n    def __init__(self, is_debug = True):\n        super(Feedforward, self).__init__()\n        self.is_debug = is_debug\n        # Initial Value\uff1aThis is important\n        self.beta = torch.nn.Parameter(torch.tensor(0.002))\n        self.beta.requires_grad = True\n        self.gamma = torch.nn.Parameter(torch.tensor(0.001))\n        self.gamma.requires_grad = True\n        # Based on the slope of the curve in last section\n        self.k = torch.nn.Parameter(torch.tensor(0.0001))\n        self.k.requires_grad = True\n    def forward(self,data):\n        St,It,Rt = data\n        N = St + It + Rt\n        S_t1 = St - self.beta * It - self.k * N\n        I_t1 = It + self.beta * It - self.gamma * It\n        R_t1 = Rt + self.gamma * It + self.k * N\n        if self.is_debug:\n            print(self.beta,self.gamma,self.k)\n        return S_t1, I_t1, R_t1\n\nmodel = Feedforward(is_debug=False)\n# This is discarded later and replaced by handwritten loss function\ncriterion = torch.nn.MSELoss()\noptimizer = torch.optim.Adam(model.parameters(), lr = 0.00001)","a5cbf5a2":"# Get US data\ncovid = pd.read_csv('..\/input\/covid19-global-dataset\/worldometer_coronavirus_daily_data.csv')\ncountry_data_US = covid.loc[covid['country'] == 'USA']\nprint(country_data_US.nunique())\n\ncountry_data_US['Susceptible'] = 329227746-country_data_US['cumulative_total_cases']\ncountry_data_US['Infected'] = country_data_US['active_cases'] \ncountry_data_US['Recovered'] = country_data_US['cumulative_total_cases'] - country_data_US['active_cases'] \ncountry_data_US = country_data_US[['Susceptible','Infected','Recovered']]\n# Starting from Jan13 2021 (when we have vaccination data for USA)\n# country_data_US = country_data_US.tail(119)\n# Use Recent Data when vaccination is more stable\ncountry_data_US = country_data_US.tail(80)\ncountry_data_US = country_data_US.values\n\n# Initialize a dataset\nUS_Covid_dataset = Dataset(country_data_US)\nUS_dataloader = torch.utils.data.DataLoader(US_Covid_dataset, batch_size=1, shuffle=True, num_workers=0)\n\nloss_log = []\nfor epoch in range(20):\n    train_loss = 0\n    for i, data in enumerate(US_dataloader):\n        optimizer.zero_grad()\n        x_train = data[0][0]\n        y_train = data[1][0]\n        # x_train = torch.squeeze(x_train)\n        # y_train = torch.squeeze(y_train)\n        # Forward pass\n        s, i, r = model(x_train)\n        # Compute Loss\n        loss = (y_train[0]-s).pow(2) + (y_train[1] - i).pow(2) + (y_train[2] - r).pow(2)\n        train_loss += loss.item()\n        # Backward pass\n        loss.backward()\n        # print(loss.grad)\n        # print(y_pred.grad)\n        optimizer.step()\n    loss_log.append(train_loss)\n    #print('Epoch {}: train loss: {}'.format(epoch, train_loss))\n\ntorch.save(model.state_dict(),'.\/US_SIR_parameter.pth')\n\n# Plot loss\ndef plot_loss(epoch,log, country):\n    plt.plot(epoch, log)\n    plt.xlabel(\"Epoch for \"+ country)\n    plt.ylabel(\"MSELoss\")\n    plt.title(\"Training Loss in \"+country)\n    plt.legend()\n    plt.show()\n\nplot_loss(range(20),loss_log, \"USA\")","0b5b49f0":"# Get HK data\ncovid = pd.read_csv('..\/input\/covid19-global-dataset\/worldometer_coronavirus_daily_data.csv')\ncountry_data_HK = covid.loc[covid['country'] == 'China Hong Kong Sar']\nprint(country_data_HK.nunique())\n\ncountry_data_HK['Susceptible'] = 7507000-country_data_HK['cumulative_total_cases']\ncountry_data_HK['Infected'] = country_data_HK['active_cases']\ncountry_data_HK['Recovered'] = country_data_HK['cumulative_total_cases'] - country_data_HK['active_cases']\ncountry_data_HK = country_data_HK[['Susceptible', 'Infected', 'Recovered']]\n# Starting from Mar 2021 (when we have vaccination data for HK)\ncountry_data_HK = country_data_HK.tail(70)\ncountry_data_HK = country_data_HK.values\n\n# Initialize a dataset\nHK_Covid_dataset = Dataset(country_data_HK)\nHK_dataloader = torch.utils.data.DataLoader(HK_Covid_dataset, batch_size=1, shuffle=True, num_workers=0)\n\nloss_log = []\nfor epoch in range(500):\n    train_loss = 0\n    for i, data in enumerate(HK_dataloader):\n        optimizer.zero_grad()\n        x_train = data[0][0]\n        y_train = data[1][0]\n        # x_train = torch.squeeze(x_train)\n        # y_train = torch.squeeze(y_train)\n        # Forward pass\n        s, i, r = model(x_train)\n        # Compute Loss\n        loss = (y_train[0]-s).pow(2) + (y_train[1] - i).pow(2) + (y_train[2] - r).pow(2)\n        train_loss += loss.item()\n        # Backward pass\n        loss.backward()\n        # print(loss.grad)\n        # print(y_pred.grad)\n        optimizer.step()\n    #print('Epoch {}: train loss: {}'.format(epoch, train_loss))\n    loss_log.append(train_loss)\n\ntorch.save(model.state_dict(),'.\/HK_SIR_parameter.pth')\n\nplot_loss(range(500),loss_log, \"HK\")","1dd91b5e":"# Get UK data\ncovid = pd.read_csv('..\/input\/covid19-global-dataset\/worldometer_coronavirus_daily_data.csv')\ncountry_data_UK = covid.loc[covid['country'] == 'UK']\nprint(country_data_UK.nunique())\n\ncountry_data_UK['Susceptible'] = 66650000-country_data_UK['cumulative_total_cases']\ncountry_data_UK['Infected'] = country_data_UK['active_cases']\ncountry_data_UK['Recovered'] = country_data_UK['cumulative_total_cases'] - country_data_UK['active_cases']\ncountry_data_UK = country_data_UK[['Susceptible','Infected','Recovered']]\n# Starting from Jan 2021 (when we have vaccination data for UK)\n# country_data_UK = country_data_UK.tail(122)\ncountry_data_UK = country_data_UK.tail(80)\ncountry_data_UK = country_data_UK.values\n\n# Initialize a dataset\nUK_Covid_dataset = Dataset(country_data_UK)\nUK_dataloader = torch.utils.data.DataLoader(UK_Covid_dataset, batch_size=1, shuffle=True, num_workers=0)\n\nloss_log = []\nfor epoch in range(100):\n    train_loss = 0\n    for i, data in enumerate(UK_dataloader):\n        optimizer.zero_grad()\n        x_train = data[0][0]\n        y_train = data[1][0]\n        # x_train = torch.squeeze(x_train)\n        # y_train = torch.squeeze(y_train)\n        # Forward pass\n        s, i, r = model(x_train)\n        # Compute Loss\n        loss = (y_train[0]-s).pow(2) + (y_train[1] - i).pow(2) + (y_train[2] - r).pow(2)\n        train_loss += loss.item()\n        # Backward pass\n        loss.backward()\n        # print(loss.grad)\n        # print(y_pred.grad)\n        optimizer.step()\n    loss_log.append(train_loss)\n    #print('Epoch {}: train loss: {}'.format(epoch, train_loss))\n\ntorch.save(model.state_dict(),'.\/UK_SIR_parameter.pth')\nplot_loss(range(100),loss_log, \"UK\")","3d269aa3":"covid = pd.read_csv('..\/input\/covid19-global-dataset\/worldometer_coronavirus_daily_data.csv')\ndef plot_prediction(country_data, country, t, type_of_people, location):\n    df = covid.loc[covid['country'] == location]\n    date = df['date'].tail(t)\n    date = date.values\n    day = date[0]\n    x = range(1, len(country_data)+1)\n    \n    input_data = torch.tensor(country_data[0])\n    model = Feedforward(is_debug=False)\n    model.load_state_dict(torch.load('.\/'+country+'_SIR_parameter.pth'))\n    model.eval()\n    \n    prediction = []\n    s, i, r = input_data\n    convert = [s.item(), i.item(), r.item()]\n    prediction.append(convert)\n    \n    for i in range(len(country_data)-1):\n        input_data = model(input_data)\n        s, i, r = input_data\n        convert = [s.item(), i.item(), r.item()]\n        prediction.append(convert)\n    \n    prediction = np.array(prediction)\n    \n    \n    if type_of_people == 'S':\n        plt.plot(x, country_data[:,0], label='original susceptible data for '+country)\n        plt.plot(x, prediction[:,0], label='predicted susceptible data for '+country)\n    if type_of_people == 'I':\n        plt.plot(x, country_data[:,1], label='original infected data for '+country)\n        plt.plot(x, prediction[:,1], label='predicted susceptible data for '+country)\n    if type_of_people == 'R':\n        plt.plot(x, country_data[:,2], label='original recovered data for '+country)\n        plt.plot(x, prediction[:,2], label='predicted susceptible data for '+country)\n\n    plt.xlabel(\"Time starting from date \"+day)\n    plt.ylabel(\"Number of cases\")\n    plt.title(\"Prediction Comparison for \"+country)\n    plt.legend()\n    plt.show()","3a122860":"plot_prediction(country_data_US, 'US', 80, 'S', 'USA')\nplot_prediction(country_data_US, 'US', 80, 'I', 'USA')\nplot_prediction(country_data_US, 'US', 80, 'R', 'USA')","3491dde1":"plot_prediction(country_data_UK, 'UK', 80, 'S', 'UK')\nplot_prediction(country_data_UK, 'UK', 80, 'I', 'UK')\nplot_prediction(country_data_UK, 'UK', 80, 'R', 'UK')","77d5ea8b":"plot_prediction(country_data_HK, 'HK', 70, 'S', 'China Hong Kong Sar')\nplot_prediction(country_data_HK, 'HK', 70, 'I', 'China Hong Kong Sar')\nplot_prediction(country_data_HK, 'HK', 70, 'R', 'China Hong Kong Sar')","94bc3830":"# Overview","3e229c03":"* **Types of vaccines**\n\nAs can be seen from this dataset, vaccines in USA are produced by Johnson&Johnson, Moderna and Pfizer\/BioNTech; Vaccines in UK are produced by Moderna, Oxford\/AstraZeneca and Pfizer\/BioNTech; Vaccines in HK are produced by Pfizer\/BioNTech and Sinovac. We will see later how vaccines affect the situation of Covid-19. And for the US, we have additional data to analyse the daily vaccination of different vaccines.","ad2a37d7":"# Linear Regression for People Vaccined","65449a37":"[Reference of the worldmap](https:\/\/plotly.com\/python\/reference\/scattergeo\/#scattergeo-locationmode)","aa01610e":"* Prediction -- UK","b2ce492b":"* Prediction -- US","1b4df804":"* Train parameter using UK data","c6825620":"* Define Plot Function","634f7514":"The total vaccination percentages in UK and US are almost the same, while in UK more percent of people are vaccinated. This indicated that in US, more percent of people will be fully vaccinated, as shown in the third graph.","de78712b":"# SIR Model to Predict Future Tendency","feaaf0ba":"* Train parameters using USA data.","3c0a3c50":"# Read Data","c5f4543b":"* **Data Preprocess**","d055d3db":"**We now define the SIR model with vaccination factor using Pytorch:**\n* I: Infected; \n* R: Removed; \n* S: Susceptible; \n* Beta: Infection rate per infected person; \n* Gamma: Recover rate of the infected; \n* k: vaccine effect factor;\n\n**Model:**\n* N = S + I + R\n* S(t+1) = S(t) - S(t) * beta * I(t)- k * N\n* I(t+1) = I(t) + S(t) * beta * I(t) - gamma * I(t)\n* R(t+1) = R(t) + gamma * I(t) + k * N\n\n**Revise:**\n* Beta = infection ability (# of cases per infected person)","5aa6fa9e":"As the SIR model with vaccination ignores many other factors, the model is not completely precise, but gives a generate trend.","875485b8":"* Train parameter using HK data.","6d399f10":"* Prediction -- HK","0f537fda":"# Vaccination Progress by date","bae58345":"# Vaccination Progress in US by different manufacturers\n","f2d25730":"We could draw a treemap to see the vaccination progress:\n\n**[Reference note of the treemap](https:\/\/plotly.com\/python\/treemaps\/)**","3ddd4d1e":"# Prediction using SIR parameters","da5fa8da":"# Vaccination Progress by Country\n\nIn this section, we will look at the covid-19 and vaccination situation by country. Specifically, we choose US, UK and HK for analysis.Here, India is not chosen because the covid situation there is out of control, not comparable with other countries we choose. Moreover, Hong Kong instead of China is chosen because China almost has no new local cases now. Below are the data we get, which will be used for visualization later."}}