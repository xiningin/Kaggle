{"cell_type":{"fb81e2e4":"code","e05d570b":"code","19479c6c":"code","cfe9ca2c":"code","41eb8f73":"code","c11843ea":"code","2969950d":"code","307188a9":"code","a6456489":"code","d9bacec3":"code","175bc6ce":"code","37d44ace":"code","dfcccd63":"code","dc1234db":"code","0712cabd":"code","eabf9bb5":"code","8510e914":"code","c403bf6b":"code","0abf6c12":"code","edd4003a":"code","7566cfc3":"code","ee95afe1":"code","ffbe1dcc":"code","c718021a":"code","b843b308":"code","a0c00109":"code","ab4a324f":"code","e5c7c61c":"code","8512c435":"code","50f5277f":"code","78e5a7de":"markdown","ca5224ba":"markdown","5e64a9b7":"markdown","0a4d47cd":"markdown","4498fa19":"markdown"},"source":{"fb81e2e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e05d570b":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report, roc_curve, roc_auc_score, accuracy_score\nimport random\nfrom sklearn.utils import shuffle\nfrom sklearn.linear_model import LogisticRegression","19479c6c":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'","cfe9ca2c":"veri = pd.read_csv('..\/input\/hearth-disease\/heart.csv')\nveri.info()","41eb8f73":"veri.head()\nveri.columns\nveri = shuffle(veri)","c11843ea":"sns.countplot(x= veri.target, data =veri);\nveri.target.value_counts();","2969950d":"f, ax = plt.subplots(figsize=(10,10))\nsns.heatmap(veri.corr(), annot=True, linewidths=0.5, fmt='.1f', ax=ax)\nplt.show();","307188a9":"veri.plot(kind='scatter', x='age', y='thalach', alpha = 0.5, color ='orange', grid='True')\nplt.xlabel('age')\nplt.ylabel('max heart rate achieved')\nplt.title('age-heart rate')\nplt.show();","a6456489":"# veri.boxplot(column='age', grid=True)\nsns.boxplot(x='target', y='chol', data=veri)\nplt.show;","d9bacec3":"from pandas.plotting import parallel_coordinates\nplt.figure(figsize=(16,6))\nparallel_coordinates(veri, 'target',color=('#556270', '#4ECDC4'))\n\nplt.show();\n# This visualization shows the cholesterol attribute is the unique that presents any distinction to categorize the two classes (source:kaggle).","175bc6ce":"girdi = pd.DataFrame(veri.drop(['target'], axis=1))\ngirdi\ncikti = pd.DataFrame(veri['target'])\ncikti","37d44ace":"x_train, x_test, y_train, y_test = train_test_split(girdi, cikti.values.flatten(), test_size = 0.25, random_state = 10)\nx_train.shape\nx_test.shape","dfcccd63":"Model = LogisticRegression(solver='lbfgs', max_iter=1000) #For small datasets, 'liblinear' is a good choice. max iteration error occurs.\nModel.fit(x_train, y_train)\ny_pred = Model.predict(x_test)\ny_pred_proba = Model.predict_proba(x_test)\ny_pred.size","dc1234db":"conf_mat = confusion_matrix(y_test,y_pred)\ny_label = ['HEALTHY','SICK']\ndf_cm = pd.DataFrame(conf_mat, y_label, y_label)\nsns.heatmap(df_cm, annot=True,annot_kws={\"size\": 16}, fmt=\"d\")# font size,  fmt say\u0131lar\u0131 integer olarak yazd\u0131.\nplt.suptitle('Confusion Matrix', x=0.44, y=1.0, ha='center', fontsize='large')\nplt.xlabel('Predict Values');\nplt.ylabel('Test Values');\nplt.show();\nplt.savefig('log_reg_cm.jpg')\nprint(classification_report(y_test,y_pred,target_names=y_label));\nprint('accuracy score:', accuracy_score(y_test,y_pred));","0712cabd":"# RoC e\u011frisi ile e\u015fik de\u011feri aras\u0131nda ki kalan b\u00f6lgenin alan\u0131  https:\/\/veribilimcisi.com\/2017\/07\/18\/roc-egrisi-roc-curve\/\nprint(y_test)\nlogit_roc_auc = roc_auc_score(y_test, y_pred)\n\n# G\u00f6rselle\u015ftirmek istersek\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba[:,0], pos_label = 0)\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\n# plt.savefig('Log_ROC')\nplt.show();","eabf9bb5":"from sklearn.tree import DecisionTreeClassifier","8510e914":"Model_DT = DecisionTreeClassifier(criterion = 'entropy',\n                                 max_depth = 3)\nModel_DT.fit(x_train,y_train)\ny_pred_DT = Model_DT.predict(x_test)\ny_pred_proba_DT = Model_DT.predict_proba(x_test)","c403bf6b":"conf_mat = confusion_matrix(y_test,y_pred_DT)\ny_label = ['0-hasta_degil','1-hasta']\ndf_cm = pd.DataFrame(conf_mat, y_label, y_label)\nsns.heatmap(df_cm, annot=True,annot_kws={\"size\": 16}, fmt=\"d\")# font size,  fmt say\u0131lar\u0131 integer olarak yazd\u0131.\nplt.suptitle('Confusion Matrix', x=0.44, y=1.0, ha='center', fontsize='large');\nplt.xlabel('Predict Values');\nplt.ylabel('Test Values');\nplt.show();\nprint('classification report:', classification_report(y_test,y_pred_DT,target_names=y_label));\nprint('accuracy score:', accuracy_score(y_test,y_pred_DT));","0abf6c12":"# RoC e\u011frisi ile e\u015fik de\u011feri aras\u0131nda ki kalan b\u00f6lgenin alan\u0131  https:\/\/veribilimcisi.com\/2017\/07\/18\/roc-egrisi-roc-curve\/\nlogit_roc_auc = roc_auc_score(y_test, y_pred_DT)\n\n# G\u00f6rselle\u015ftirmek istersek\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba_DT[:,1], pos_label = 1)\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([-0.1, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\n# plt.savefig('Log_ROC')\nplt.show();","edd4003a":"import os\nos.getcwd()","7566cfc3":"#!pip install pydotplus","ee95afe1":"#!pip install plotly==4.14.1","ffbe1dcc":"#!pip install jupyterlab \"ipywidgets==7.5\"","c718021a":"#!pip install dtreeviz","b843b308":"# graphviz \u00e7a\u011fr\u0131l\u0131yor\nfrom sklearn.tree import export_graphviz\n# resim g\u00f6stermesi i\u00e7in\nfrom IPython.display import Image\n# bu \u00e7\u0131kt\u0131y\u0131 yazd\u0131rmak yerine string olarak kaydetmek i\u00e7in \nfrom io import StringIO\n# buras\u0131n\u0131n konuyla alakas\u0131 yok, \u00e7\u0131kt\u0131 i\u00e7in bir nesne yarat\u0131l\u0131yor\nModel_data =StringIO()\n# a\u011fac\u0131 d\u0131\u015far\u0131ya aktar\u0131yoruz\nexport_graphviz(Model_DT, out_file=Model_data, filled=True, rounded=True, impurity=True,\n               feature_names=girdi.columns,\n               class_names=y_label)\n# pydotplus k\u00fct\u00fcphanesini \u00e7a\u011f\u0131ral\u0131m ve grafik yaratal\u0131m\nimport pydotplus\ngraph = pydotplus.graph_from_dot_data(Model_data.getvalue())\n# Bu grafi\u011fi saklayal\u0131m\ngraph.write_png('agac2.PNG')\n# bu grafi\u011fi g\u00f6sterelim\nImage(graph.create_png())","a0c00109":"from dtreeviz.trees import dtreeviz # remember to load the package\nviz = dtreeviz(Model_DT, x_train,y_train,\n                target_name=\"target\",\n                feature_names=veri.columns,\n                class_names=list(y_label))\nviz","ab4a324f":"from sklearn.neighbors import KNeighborsClassifier","e5c7c61c":"Model_KNN = KNeighborsClassifier(n_neighbors=1)\nModel_KNN.fit(x_train,y_train)\nModel_KNN.score(x_train,y_train)\ny_pred_proba_KNN = Model_KNN.predict_proba(x_test)\ny_pred_KNN = Model_KNN.predict(x_test)","8512c435":"score = np.round(accuracy_score(y_test, y_pred),2)\n# Kafa kar\u0131\u015f\u0131kl\u0131\u011f\u0131 matrisi haz\u0131rlayal\u0131m\ncm = confusion_matrix(y_test, y_pred)\n# DataFrame olarak saklay\u0131p \u00e7izelim\ndf_cm = pd.DataFrame(cm, columns=y_label, index=y_label)\nsns.heatmap(df_cm, annot= True, annot_kws={\"size\":15}, fmt='d')\nplt.title('Modelin skor degeri: {}'.format(score), size= 15);\nplt.suptitle('Kafa Kar\u0131\u015f\u0131kl\u0131\u011f\u0131 Matrisi', x= 0.42, y =1.05, size = 20);\nplt.xlabel('Tahmin Degerler', size = 15);\nplt.ylabel('Gercek Degerler', size = 15);\nplt.show();\nprint(classification_report(y_test, y_pred, target_names = y_label));","50f5277f":"# RoC e\u011frisi ile e\u015fik de\u011feri aras\u0131nda ki kalan b\u00f6lgenin alan\u0131  https:\/\/veribilimcisi.com\/2017\/07\/18\/roc-egrisi-roc-curve\/\nlogit_roc_auc = roc_auc_score(y_test, y_pred_KNN)\n\n# G\u00f6rselle\u015ftirmek istersek\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba_KNN[:,1], pos_label = 1)\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([-0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\n# plt.savefig('Log_ROC')\nplt.show();","78e5a7de":"### CLASSIFICATION WITH DECISION TREE MODEL","ca5224ba":"### CLASSIFICATION WITH LOGISTIC REGRESSION","5e64a9b7":"### LETS SEE THE INPORTANCE OF FEATURES","0a4d47cd":"### CLASSIFICATION WITK KNN MODEL","4498fa19":"### hearth desease dataset (UCI Repository) used for the selection of the best algorithm for classification"}}