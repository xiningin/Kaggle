{"cell_type":{"777d2602":"code","45b0de1d":"code","b521bb17":"code","12bc62c0":"code","866e9ce5":"code","d005af8f":"code","91f7f215":"code","6502a95f":"code","39b8cfbc":"code","bdb51005":"code","f4f242f1":"code","1f285330":"code","c1dbcd99":"code","79f2baaf":"code","b50b793a":"code","314a18d0":"code","7a538748":"code","c1788298":"code","716efe3e":"code","9f17774f":"code","1dcbe599":"code","ad0c15fb":"code","0f6d20ef":"code","5339fde7":"markdown","2b66b820":"markdown","694126ba":"markdown","cbe0ddb3":"markdown","f742885f":"markdown","445ee203":"markdown","ba392e73":"markdown","d6395aea":"markdown","f61adba7":"markdown","f4578712":"markdown","b237f904":"markdown","6be47e47":"markdown","8ed05e78":"markdown","67496495":"markdown","da8da8ae":"markdown","c1bc4e74":"markdown","e49c673a":"markdown","24719f2c":"markdown","b6b0f6d8":"markdown","a5af0c29":"markdown","591f3ee4":"markdown","ba7a4719":"markdown","027756d4":"markdown"},"source":{"777d2602":"import numpy as np \nimport pandas as pd \nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nimport requests","45b0de1d":"df = pd.read_csv(\"..\/input\/credit-card-transactions\/credit_card_transactions-ibm_v2.csv\")","b521bb17":"df.head().style.background_gradient(cmap='Blues')","12bc62c0":"df.dtypes.to_frame(name='Type').T.style.set_properties(**{'background-color': 'deepskyblue'})","866e9ce5":"df['Amount'] = df['Amount'].apply(lambda value: value.split(\"$\")[1])\ndf['Hour'] = df['Time'].apply(lambda value: value.split(\":\")[0])\ndf['Minutes'] = df['Time'].apply(lambda value: value.split(\":\")[1])\ndf.drop(['Time'],axis=1,inplace=True)\nconvert_dict = {'Amount': np.float32,\n                'Minutes': np.uint8,\n                'Hour': np.uint8,\n                'Year': np.int16,\n                'Month': np.uint8,\n                'Day': np.uint8,\n                'Zip': np.float16,\n                \n#                 'MCC':'category',\n#                 'Zip':'category',\n#                 'Merchant Name':'category',\n                'User':np.uint16,\n                'Card':np.uint8\n               }\n\ndf = df.astype(convert_dict)","d005af8f":"df.head()","91f7f215":"df.describe(include='all').fillna(\"\").T.style","6502a95f":"missing_count = df.isna().sum()\nmissing_df = (pd.concat([missing_count.rename('Missing count'),\n                     missing_count.div(len(df))\n                          .rename('Missing ratio')],axis = 1)\n             .loc[missing_count.ne(0)])\nmissing_df.style.background_gradient(cmap=\"Reds\")","39b8cfbc":"fig = px.histogram(df, x=\"Month\")\nfig.update_layout(bargap=0.2, title=\"Transactions Distribution over the months\")\nfig.show()","bdb51005":"fig_hour = px.histogram(df, x=\"Hour\")\nfig.update_layout(bargap=0.09, title=\"Transactions Distribution over Hour\")\nfig_hour.show()","f4f242f1":"df_year_fraud = df.loc[:,['Year','Is Fraud?']]\n\ndf_year_fraud = df_year_fraud.groupby(['Year'])['Is Fraud?'].value_counts().to_frame(name=\"Count\")\n\nunique_year_vals = df.Year.unique()\n\nto_plot_df = pd.DataFrame(columns=['Year', 'No','Yes'])\n\nfor year in unique_year_vals:\n    try:\n        no = df_year_fraud.loc[(year,'No')]['Count']\n    except:\n        no = 0\n    try:\n        yes = df_year_fraud.loc[(year,'Yes')]['Count']\n    except:\n        yes = 0\n    to_plot_df = to_plot_df.append(pd.DataFrame([[year,no,yes]],columns=[\"Year\",\"No\",\"Yes\"]))\n    \nto_plot_df['No'] = to_plot_df['No'].replace(0, np.nan)\nto_plot_df['Yes'] = to_plot_df['Yes'].replace(0, np.nan)\nto_plot_df['No'] = to_plot_df['No'].apply(lambda x: np.log10(x))\nto_plot_df['Yes'] = to_plot_df['Yes'].apply(lambda x: np.log10(x))\n\n\nfig = go.Figure(data=[\n    go.Bar(name='Non-Fraud', x=to_plot_df.Year, y=to_plot_df.No),\n    go.Bar(name='Fraud', x=to_plot_df.Year, y=to_plot_df.Yes)\n])\nfig.update_layout(barmode='group',title=\"Logartihmic Count of Fraud and Non-Fraud Transactions over the Years\")\nfig.show()","1f285330":"plot = sns.catplot(\"Is Fraud?\", col=\"Use Chip\",data=df,kind=\"count\", height=6,aspect=.7);\nplot.fig.suptitle(\"Card Type and Fraud\", size = 20, y=1.05);","c1dbcd99":"us_transactions = df[~df['Merchant State'].isna()]\n\ntransactions_per_state = us_transactions.groupby(['Merchant State'],as_index=False).count()\n\nfraud_count_per_state = us_transactions.groupby(['Merchant State', 'Is Fraud?']).size()\n\nmerchant_state_fraud_dict = fraud_count_per_state.to_dict()\n\nmerchant_plot_df = pd.DataFrame(us_transactions['Merchant State'].value_counts().reset_index())\n\nmerchant_plot_df.rename({'index':\"State\", 'Merchant State':\"Total_Transactions\"},axis=1,inplace=True )\n\nmerchant_plot_df['FraudPercent'] = merchant_plot_df['State'].apply(lambda x: merchant_state_fraud_dict.get((x,\"Yes\"),0))\n\nmerchant_plot_df['NonFraudPercent'] = merchant_plot_df['State'].apply(lambda x: merchant_state_fraud_dict.get((x,\"No\"),0))\n\nmerchant_plot_df['FraudPercent'] = round(100 * (merchant_plot_df['FraudPercent'] \/ merchant_plot_df['Total_Transactions']),2)\n\nmerchant_plot_df['NonFraudPercent'] = round(100 * (merchant_plot_df['NonFraudPercent'] \/ merchant_plot_df['Total_Transactions']),2)\n\nfor col in merchant_plot_df.columns:\n    merchant_plot_df[col] = merchant_plot_df[col].astype(str)\n    \n\nmerchant_plot_df['text'] = \"Fraudulent: \" + merchant_plot_df['FraudPercent'] +  \"% \" +'<br>' +              \"Non-Fraudulent: \" + merchant_plot_df['NonFraudPercent'] + \"% \"+ '<br>'\n\n\nfig = go.Figure(data=go.Choropleth(\n    locations=merchant_plot_df['State'],\n    z=merchant_plot_df['Total_Transactions'].astype(float),\n    locationmode='USA-states',\n    colorscale='deep',\n    autocolorscale=False,\n    text=merchant_plot_df['text'], # hover text\n    marker_line_color='white', # line markers between states\n    colorbar_title=\"Credit Card Transactions\"\n))\n\nfig.update_layout(\n    title_text='Credit Card Transactions per US state',\n    geo = dict(\n        scope='usa',\n        projection=go.layout.geo.Projection(type = 'albers usa'),\n        showlakes=True, # lakes\n        lakecolor='rgb(255, 255, 255)'),\n)\n\nfig.show()","79f2baaf":"df_nonusa = df[(df.Zip.isnull()) & (df['Merchant City'] != 'ONLINE')]\nprint(f\"Transactions not in the United States: {len(df_nonusa)}\")","b50b793a":"df_usa = df[(~df.Zip.isnull()) & (df['Merchant City'] != 'ONLINE')]\nprint(f\"Transactions in the United States: {len(df_usa)}\")","314a18d0":"transaction_count = df_nonusa['Merchant State'].value_counts().to_frame().reset_index()","7a538748":"transaction_count = transaction_count.rename(columns={\"index\":\"Country\",\"Merchant State\":\"Count\"})","c1788298":"code_list = []\n\nfor country in transaction_count.Country.values:\n    small_country = country.lower()\n    try:\n        response = requests.get(\"https:\/\/restcountries.eu\/rest\/v2\/name\/\" + small_country + \"?fullText=true\")\n        code_list.append(response.json()[0]['alpha3Code'])\n    except:\n        code_list.append(\"\")","716efe3e":"transaction_count[\"ISO_Code\"] = code_list","9f17774f":"transaction_count[transaction_count[\"ISO_Code\"] == \"\"]","1dcbe599":"transaction_count.at[3, \"ISO_Code\"] = \"GBR\"\ntransaction_count.at[13, \"ISO_Code\"] = \"KOR\"\ntransaction_count.at[17, \"ISO_Code\"] = \"BHS\"\ntransaction_count.at[47, \"ISO_Code\"] = \"RUS\"\ntransaction_count.at[54, \"ISO_Code\"] = \"VAT\"\ntransaction_count.at[55, \"ISO_Code\"] = \"MKD\"\ntransaction_count.at[57, \"ISO_Code\"] = \"VNM\"\ntransaction_count.at[91, \"ISO_Code\"] = \"VEN\"\ntransaction_count.at[97, \"ISO_Code\"] = \"MDA\"\ntransaction_count.at[99, \"ISO_Code\"] = \"SYR\"\ntransaction_count.at[107, \"ISO_Code\"] = \"BUR\"\ntransaction_count.at[110, \"ISO_Code\"] = \"IRN\"\ntransaction_count.at[116, \"ISO_Code\"] = \"FSM\"\ntransaction_count.at[123, \"ISO_Code\"] = \"KOS\"\ntransaction_count.at[124, \"ISO_Code\"] = \"TLS\"\ntransaction_count.at[136, \"ISO_Code\"] = \"TZA\"\ntransaction_count.at[140, \"ISO_Code\"] = \"BRN\"\ntransaction_count.at[148, \"ISO_Code\"] = \"COG\"\ntransaction_count.at[166, \"ISO_Code\"] = \"COD\"","ad0c15fb":"transaction_count['Count'] = np.log10(transaction_count['Count'].replace(0, np.nan))","0f6d20ef":"fig = px.choropleth(transaction_count, locations=\"ISO_Code\",\n                    color=\"Count\",\n                    hover_name=\"Country\",\n                    color_continuous_scale=px.colors.sequential.Blues,\n                    title = \"Transaction Count Across the World\")\nfig.show()","5339fde7":"### Loading the required libraries","2b66b820":"#### Converting to Logarithmic Scale","694126ba":"#### Transactions Outside the US","cbe0ddb3":"### Visualizations","f742885f":"### Basic Statistics","445ee203":"#### Dtypes of the columns","ba392e73":"#### The data now looks like this:  \n\nWe see that the extra decimals in ZipCode no longer exist as the type is converted to object,\nwe have two more columns: Hour and Minute whereas Time doesn't exist","d6395aea":"##### Countries whose 3 digit ISO codes are not found","f61adba7":"### Sneak Peak of the data","f4578712":"#### Distribution of transactions over the Months","b237f904":"#### Distribution of transactions over the Hours in a Day","6be47e47":"<span style='color:darkblue;font-size:17px'> Statistics Analysis <\/span>\n\nFrom the basic statistics we can see that the dataset consists of **24386900 transactions, with 2000 unique users and a user owns at most 9 cards.**\n\nThe most common type of transactions are swipe transactions and the majority of transactions in this dataset are in the zipcode **98516(Postal code in Thurston County, Washington)**.\n\nThe median amount is 30$ which is almost equal to one grocery shopping trip for a single person which coincides with the most common merchant category code: 5411 (Grocery and Supermarkets).","8ed05e78":"#### Fraudulent and Non fraudulent transactions based on type of card use","67496495":"#### Transactions per state in the US","da8da8ae":"#### Missing Values and their proportion","c1bc4e74":"### Summary","e49c673a":"Manually assigning 3 digit ISO codes to the countries the API could not find","24719f2c":"# Credit Card Transactions Data\n\n\n<span style='color:darkblue;font-size:20px;font-family:sans-serif'> The credit card market is fairly large. There were about 45 billion U.S. general-purpose credit card transactions in 2019 which accounted for a volume of $4 trillion.([ref](https:\/\/www.creditcards.com\/credit-card-news\/market-share-statistics\/)) <br\/> With such a large presence naturally people can be targets of credit card fraud and identity theft. Credit Card Fraud occurs when someone uses your credit card to execute an unauthorized charge. The card may be morphed, stolen, credentials leaked and another n number of possibilities.<\/span>\n\n\n<p align='left'>    \n<!-- [CreditCard](https:\/\/media.giphy.com\/media\/d3mmdNnW5hkoUxTG\/giphy.gif) -->\n<!--  <img src=https:\/\/media.giphy.com\/media\/d3mmdNnW5hkoUxTG\/giphy.gif align= 'left' width=240px \/> -->\n <img src=https:\/\/media.giphy.com\/media\/d3mmdNnW5hkoUxTG\/giphy.gif align= 'left' width=240px \/>\n <img src=https:\/\/media.giphy.com\/media\/hgjNPEmAmpCMM\/giphy.gif align= 'left' width=240px \/>\n \n<br\/>\n<br\/>\n<br\/>\n<\/p>  \n<br\/>\n<br\/>    \n\n","b6b0f6d8":"<span style='color:darkblue;font-size:17px'>Based on the default type assigning by pandas:<\/span>\n\n\nWe can see that the column Amount and Time columns are object types but we know that Amount should be actually processed like a numeric column and Time can be decomposed into Hour and Minute.\n\nSimilarly, User and Card columns should also be converted to object type as unique User values represent different users, and card values correspond to an index of a card a particular user uses. The card values do not specify a unique card number.\n\nAdditionally Merchant Name, Zip and MCC are treated as numeric but should be processed as categorical.\n\nHowever, since this dataset is large, to work with the kaggle kernel for visualization purposes we will not convert to object\/category type. Also, we will downcast all numeric datatypes to reduce memory consumption.\n\nSo let's convert these columns to the desired datatypes","a5af0c29":"#### Fraudulent Transactions over the Years","591f3ee4":"<p>\n<span align='left'style='color:darkblue;font-size:17px;font-family:sans-serif'> This is a starter notebook which shows basic Exploratory Data Analysis on this Credit Card Fraud Transactions Dataset. You will see some basic statistics, followed by some visualizations. \n<\/span>\n<\/p>\n","ba7a4719":"<span style='color:darkblue;font-size:17px'> Missing Value Analysis <\/span>\n\nBased on how the data was generated, Merchant State and Zip are not present when a transaction is processed online. Additionally for tranactions which are not US based, Zipcode is missing.\n\nFor successful transactions, errors are absent and a mjaority of transactions in this dataset are processed without errors which explains the high missing ratio for the errors column","027756d4":"### Reading the datafile"}}