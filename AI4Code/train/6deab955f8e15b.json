{"cell_type":{"8ff35f46":"code","5d62f3d2":"code","c5b5d395":"code","daefefdc":"code","1ad2b150":"code","3a7e96fa":"code","2ffecb7d":"code","daf2aa26":"code","cdc8fab7":"code","c7ab8343":"code","2d6a9581":"code","3defa7e9":"code","844b5e9b":"code","27e0bf84":"code","af821a80":"code","ffe24053":"code","2cfb4372":"code","42ea53b6":"code","5e8e1834":"code","122e4082":"code","2dd0d800":"code","a27c26cf":"code","e72e64f3":"code","12fc706d":"code","7d278c17":"markdown","c344155c":"markdown","d45b84b5":"markdown","bd8ff15c":"markdown","f3aa53d2":"markdown","8cd83e98":"markdown","25f11576":"markdown","1bddc8c5":"markdown","a9304cd7":"markdown","e684b283":"markdown","7d57a5c8":"markdown","6d38c00d":"markdown","aa50f6f5":"markdown","a5ccfef6":"markdown","6c2d860b":"markdown","762fdcdb":"markdown","c9f8cbc7":"markdown","fa3c9720":"markdown","f4903d5f":"markdown","4c4c02b3":"markdown","2015921e":"markdown","1a7ddf30":"markdown","f9938c43":"markdown","70bd7be2":"markdown","c2447e97":"markdown","d5a60859":"markdown","7c96a62a":"markdown","3759a6e1":"markdown","014d341d":"markdown","3a3ee750":"markdown","a0553da1":"markdown","c9fe1541":"markdown","5754ff0b":"markdown","d124e832":"markdown","1e4e228f":"markdown","a104d1d6":"markdown","2213c40d":"markdown","0869dcdb":"markdown"},"source":{"8ff35f46":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns# data visualization\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5d62f3d2":"delivery_data=pd.read_csv('\/kaggle\/input\/ipl\/deliveries.csv') # Bowl by Bowl data\n\nmatch_data=pd.read_csv('\/kaggle\/input\/ipl\/matches.csv')# IPL(Indian premier League) Match Data from 2008 and 2016.","c5b5d395":"# print(match_data.shape)\n","daefefdc":"match_data.head()\n# match_data.loc[match_data.season==2017]","1ad2b150":"biggest_win=match_data['win_by_runs'].max()\nteams_biggest_win=[]\n\nf=match_data.loc[match_data['win_by_runs']==biggest_win]\n\nteams_biggest_win.append((str(f['season'].tolist()[0])))\n\nteams_biggest_win.append((str(f['venue'].tolist()[0])))\n\nteams_biggest_win.append(str(f['team1'].tolist()[0]))\n\nteams_biggest_win.append(str(f['team2'].tolist()[0]))\n\n\nteams_biggest_win.append(str(f['winner'].tolist()[0]))\n\n\ntie_matches_no=match_data.loc[match_data['result']=='tie']\n\n","3a7e96fa":"f=match_data.loc[match_data['dl_applied']==1]\nseason_number=f['season'].value_counts()\ndl_stadium=f['venue'].value_counts()","2ffecb7d":"sns.set_style(\"darkgrid\")# to make background with grid\nls=match_data['venue'].value_counts().sort_values(ascending=False)\nls=ls[:7]\nplt.figure(figsize=(20,6))\nMost_Played =sns.barplot(ls.index, ls.values, alpha=0.8)\n\nplt.title('Most Played venue')\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Name of the stadiums', fontsize=15)\nMost_Played.set_xticklabels(rotation=30,labels=ls.index,fontsize=10)\nplt.show()\n","daf2aa26":"man_of_match=match_data['player_of_match'].value_counts()\nman_of_match=man_of_match[:10]\nsns.set_style(\"darkgrid\")\nplt.figure(figsize=(20,6))\nman_of_matches=sns.barplot(man_of_match.index, man_of_match.values, alpha=0.8,palette='winter')\nplt.title('Most Player Of The Match')\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('player_of_match', fontsize=12)\nman_of_matches.set_xticklabels(rotation=30,labels=man_of_match.index,fontsize=15)\nplt.show()","cdc8fab7":"plt.figure(figsize=(20,6))\nseason=sns.countplot(x='season',data=match_data)\nplt.xlabel('Season',fontsize=20)","c7ab8343":"ump=pd.concat([match_data['umpire1'],match_data['umpire2']]).value_counts().sort_values(ascending=False)\nump=ump[:7]\nplt.figure(figsize=(10,5))\nMost_umpired =sns.barplot(x=ump.index, y=ump.values, alpha=0.9)\n\nplt.title('Favorite umpire')\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Name of the Umpire', fontsize=15)\nMost_umpired.set_xticklabels(rotation=50,labels=ump.index,fontsize=20)\nplt.show()\n\n\n","2d6a9581":"Delhi_stadium=match_data.loc[(match_data['venue']=='Feroz Shah Kotla') ]\nDelhi_stadium_win_by_runs=Delhi_stadium[Delhi_stadium['win_by_runs']>0]# As it is  win by runs this depicts Team batting First Has Won the match\nslices=[len(Delhi_stadium_win_by_runs),len(Delhi_stadium)-len(Delhi_stadium_win_by_runs)]\nlabels=['Batting first','Batting Second']\nplt.pie(slices,labels=labels,startangle=90,shadow=1,explode=(0,0.4),autopct='%1.2f%%',colors=['#bf00ff','#66CDAA'])\nplt.show()","3defa7e9":"Kolkata_stadium=match_data.loc[(match_data['venue']=='Eden Gardens') ]\nKolkata_stadium_win_by_runs=Kolkata_stadium[Kolkata_stadium['win_by_runs']>0]# As it is  win by runs this depicts Team batting First Has Won the match\nslices=[len(Kolkata_stadium_win_by_runs),len(Kolkata_stadium)-len(Kolkata_stadium_win_by_runs)]\nlabels=['Batting first','Batting Second']\nplt.pie(slices,labels=labels,startangle=90,shadow=1,explode=(0,0.4),autopct='%1.2f%%',colors=['#00bfff','#00ff00'])\nplt.show()","844b5e9b":"Mumbai_stadium=match_data.loc[(match_data['venue']=='Wankhede Stadium') ]\nMumbai_stadium_win_by_runs=Mumbai_stadium[Mumbai_stadium['win_by_runs']>0]# As it is  win by runs this depicts Team batting First Has Won the match\nslices=[len(Mumbai_stadium_win_by_runs),len(Mumbai_stadium)-len(Mumbai_stadium_win_by_runs)]\nlabels=['Batting first','Batting Second']\nplt.pie(slices,labels=labels,startangle=90,shadow=1,explode=(0,0.4),autopct='%1.2f%%',colors=['#00bfff','#00ff00'])\nplt.show()","27e0bf84":"M_Chinnaswamy_Stadium=match_data.loc[(match_data['venue']=='M Chinnaswamy Stadium') ]\nM_Chinnaswamy_Stadium_win_by_runs=M_Chinnaswamy_Stadium[M_Chinnaswamy_Stadium['win_by_runs']>0]# As it is  win by runs this depicts Team batting First Has Won the match\nslices=[len(M_Chinnaswamy_Stadium_win_by_runs),len(M_Chinnaswamy_Stadium)-len(M_Chinnaswamy_Stadium_win_by_runs)]\nlabels=['Batting first','Batting Second']\nplt.pie(slices,labels=labels,startangle=90,shadow=1,explode=(0,0.4),autopct='%1.2f%%',colors=['#99ff99','#ffcc99'])\nplt.show()","af821a80":"\nChennai_stadium=match_data.loc[(match_data['venue']=='MA Chidambaram Stadium, Chepauk') ]\nChennai_stadium_win_by_runs=Chennai_stadium[Chennai_stadium['win_by_runs']>0]# As it is  win by runs this depicts Team batting First Has Won the match\nslices=[len(Chennai_stadium_win_by_runs),len(Chennai_stadium)-len(Chennai_stadium_win_by_runs)]\nlabels=['Batting first','Batting Second']\nplt.pie(slices,labels=labels,startangle=90,shadow=1,explode=(0,0.4),autopct='%1.2f%%',colors=['#00ffbf','#00ff00'])\nplt.show()","ffe24053":"match_2017=match_data[match_data['season']==2017]\ndf=match_2017[match_2017['toss_winner']==match_2017['winner']]\nslices=[len(df),(59-len(df))]# because Toal 59 matches were played in 2017\nlabels=['yes','no']\nplt.pie(slices,labels=labels,startangle=90,shadow=True,explode=(0,0.05),autopct='%1.2f%%',colors=['#99ff99','#ffcc99'])\nplt.show()","2cfb4372":"dfs=match_data[(match_data['toss_decision']=='field') & (match_data['season']==2017) ]\nlabels=['Bat','Field']\nslices=[59-len(dfs),len(dfs)]\nplt.pie(slices,labels=labels,startangle=90,shadow=1,explode=(0.2,0.4),autopct='%1.2f%%',colors=['#ff9999','#66b3ff'])\nplt.show()","42ea53b6":"\ndfd=match_2017[(match_2017['toss_decision']=='field') & (match_2017['toss_winner']==match_2017['winner'])]\nlabels=['Fielding First Side Won','Fielding Second Side Won']\nslices=[len(dfd),59-len(dfd)]\nplt.pie(slices,labels=labels,startangle=90,shadow=1,explode=(0.2,0.4),autopct='%1.2f%%',colors=['#ff9999','#66b3ff'])\nplt.show()","5e8e1834":"def comparator(team1):\n    teams=list(match_data.team1.unique())# you can take team2 here also \n    teams.remove(team1)\n    opponents=teams.copy()\n    mt1=match_data[((match_data['team1']==team1)|(match_data['team2']==team1))]\n    for i in opponents:\n        mask = (((mt1['team1']==i)|(mt1['team2']==i)))&((mt1['team1']==team1)|(mt1['team2']==team1))# each time comparing each opponent team and the team we are looking for\n#         print(mask)\n        mt2 = mt1.loc[mask, 'winner'].value_counts().to_frame().T# to_frame to convert to DataFrame and T is used to Transpose\n        print(mt2)\n","122e4082":"comparator('Mumbai Indians')","2dd0d800":"print(delivery_data.shape)\nprint(delivery_data.columns)","a27c26cf":"delivery_data.batting_team.unique()","e72e64f3":"delivery_data.head()","12fc706d":"\nmatch_data.loc[match_data.season==2017].shape# this shows 59 matches were played in season 2017\n\nmost_maidens=delivery_data.groupby(['match_id','inning','over'])\n\n# most_maidens.first()\nlist_of_most_maidens=[]\nfor match in range(1,60): # to iterate over each match total 59 matches\n    for inning in range(1,3):# to iterate over each innings there are 2 innings in a match\n        for over in range(1,21):# to iterate over maximum 20 overs in an innings\n            \n            try:# try block beacuse not every inning or every match is perfectly divided into 2 innings of 20 overs each in some matches due to rain or some other reason overswere reduced \n                #or even innings was dismissed\n                if ((most_maidens.get_group((match,inning,over))['wide_runs'].sum()>0) + \n                    (most_maidens.get_group((match,inning,over))['noball_runs'].sum()>0)==most_maidens.get_group((match,inning,over))['total_runs'].sum()):\n                    bowler=list(most_maidens.get_group((match,inning,over))['bowler'].unique())[0]\n                    list_of_most_maidens.append(bowler)\n                    \n                    \n                else:\n                    pass\n                \n            except:\n                continue\n\n\nfrom statistics import mode \ndef most_common(List): \n    return(mode(List)) \n    \nprint(str(most_common(list_of_most_maidens))+ \" bowled most \" + str(list_of_most_maidens.count(most_common(list_of_most_maidens))) + \" maiden overs in 2017\")                      \n","7d278c17":"This shows **M Chinnaswamy stadium** has hosted most matches in the History of IPL","c344155c":"![jaidev](https:\/\/iplstatic.s3.amazonaws.com\/players\/284\/86.png)","d45b84b5":"# 7 Most Played venue in the History of IPL from 2008 to 2017","bd8ff15c":"## Definition of Maiden over\nIn cricket, an over consists of six consecutive legal deliveries bowled from one end of a cricket pitch to the player batting at the other end, almost always by a single bowler.\n\nA **maiden over** is an over in which no runs are scored that count against the bowler (so leg byes and byes may be scored as they are not counted against the bowler).\n\nhttps:\/\/en.wikipedia.org\/wiki\/Over_(cricket)","f3aa53d2":"# <font color='red'> Team1 <\/font> vs <font color='red'> Team 2 <\/font>","8cd83e98":"Batting Second on **Eden Gardens** is Clearly Favourable","25f11576":"**Chris Gayle** has recived most man of the matches from 2008 to 2017","1bddc8c5":"# Most Player of the Matches across 9 Seasons","a9304cd7":"## *Wankhede Stadium*","e684b283":"Teams winning toss in 2017 majorly decide to **Field** first.","7d57a5c8":"Anybody who is a cricket Fan should surely try to analyse this dataset as it would help you in learning with a fun factor. I have tried my best to keep this notebook as simple as possible so that even a beginner can understand it easily. At the same time I have made efforts to analyse the dataset in different aspects effectively. I will keep updating the notebook as and when I come up with new things. Hope you like it!!!","6d38c00d":"## *MA Chidambaram Stadium, Chepauk*","aa50f6f5":"This Shows Most Matches were played in the **2013** Season","a5ccfef6":"Batting Second on **M Chinnaswamy Stadium** has Better win Percentage","6c2d860b":"## Jaidev Unadkat","762fdcdb":"# MOST MAIDEN OVERS IN <font color='red'> 2017<\/font>","c9f8cbc7":"This Shows that **Batting Second** is Slightly Preferrable on **Feroz Shah Kotla**","fa3c9720":"# Work Starts","f4903d5f":"# Stadium Wise Analysis for Most Played 6 Venues","4c4c02b3":"##  *Eden Gardens*","2015921e":"Sides Fielding Second Side Won More Matches in 2017","1a7ddf30":"# Matches Played across each season","f9938c43":"# Facts for <font color='red'>IPL<\/font>","70bd7be2":"##  *Feroz Shah Kotla*","c2447e97":"Is **Toss Winner** Also the Match Winner? For the year 2017","d5a60859":"# Most Favourite Umpires","7c96a62a":"# <font color='red'>BALL BY BALL<\/font> OBSERVATION","3759a6e1":"**YES**,In 2017 if a team won the **toss** they had slightly better chances to win the match","014d341d":"# Lets Play Cricket - IPL Exploration Analysis","3a3ee750":"# Analysis for year 2017","a0553da1":"This shows it's almost equal if a Teams Bat's First or Bowl's First at **Wankhede Stadium**","c9fe1541":"![chec](https:\/\/cdn.zeebiz.com\/sites\/default\/files\/styles\/zeebiz_850x478\/public\/2018\/04\/08\/33887-ipl-official-twitter-account1.jpg?itok=alCgF7G6)","5754ff0b":"## *M Chinnaswamy Stadium*","d124e832":"## <font color='red'>**Crucial**<\/font> observation ","1e4e228f":"This shows that **Dharamsena** and **S Ravi** were the favourite Umpires.\n","a104d1d6":"Batting Fisrt at **MA Chidambaram Stadium, Chepauk** is clearly a Good Option","2213c40d":"1. Biggest win in terms of run margin was witnessed in Season of **2017** where **Mumbai Indians** won by **146** runs against **Delhi Daredevils** at **Feroz Shah Kotla**\n2. From 2008 to 2017 only **7** Matches have Tied in **IPL**.\n3. Since 2008 to 2017 only **16** Matches have been Decided on Duckworth Lewis Method and in 2016 highest matches were decided by this System that counted to 4.\n4. **M Chinnaswamy Stadium** and **Eden Gardens** are the Venues where highest macthes have been Decided on DL Method (**3 each**).","0869dcdb":"Trends in 2017 after **winning the toss**."}}