{"cell_type":{"53720ac5":"code","cad69196":"code","374fc049":"code","4f8fe7d0":"code","b1f433ac":"code","b6d755b7":"code","7e9b4903":"code","64189f44":"code","5b9c1c14":"code","5c8849eb":"code","ddca6ef9":"code","95c83251":"code","006ea973":"code","e7e2f7e4":"code","1eb46a27":"code","c774e1aa":"code","4dc33acc":"code","799fc174":"code","6c967c5e":"code","e05cb806":"code","09933137":"code","81dc6a7d":"code","d27732ab":"code","236d1fa3":"code","9bbd4778":"markdown","d669b396":"markdown","22f753d2":"markdown","77e51ff2":"markdown","f43d0a98":"markdown","9a456384":"markdown","2108ff3b":"markdown","3d098bdd":"markdown","b9434b4b":"markdown","e1ad611c":"markdown","016498b4":"markdown","547b74f1":"markdown"},"source":{"53720ac5":"import os\nimport shutil\nimport json\nimport csv\nimport random\nimport pickle\nimport cv2\nimport numpy as np\nimport pandas as pd\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport torchvision.transforms as transforms\n\n\nimport PIL\nfrom PIL import Image, ImageOps\nfrom PIL import Image\nfrom torch.utils.data import Dataset, DataLoader\nfrom scipy.ndimage.measurements import label\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score, roc_curve\n","cad69196":"class RefugeDataset(Dataset):\n\n    def __init__(self, root_dir, split='train', output_size=(256,256)):\n        # Define attributes\n        self.output_size = output_size\n        self.root_dir = root_dir\n        self.split = split\n        \n        # Load data index\n        with open(os.path.join(self.root_dir, self.split, 'index.json')) as f:\n            self.index = json.load(f)\n            \n        self.images = []\n        for k in range(len(self.index)):\n            print('Loading {} image {}\/{}...'.format(split, k, len(self.index)), end='\\r')\n            img_name = os.path.join(self.root_dir, self.split, 'images', self.index[str(k)]['IMG_NAME'])\n            img = np.array(Image.open(img_name).convert('RGB'))\n            img = transforms.functional.to_tensor(img)\n            img = transforms.functional.resize(img, self.output_size, interpolation=Image.BILINEAR)\n            self.images.append(img)\n            \n        # Load ground truth for 'train' and 'val' sets\n        if split != 'test':\n            self.segs = []\n            for k in range(len(self.index)):\n                print('Loading {} segmentation {}\/{}...'.format(split, k, len(self.index)), end='\\r')\n                seg_name = os.path.join(self.root_dir, self.split, 'gts', self.index[str(k)]['IMG_NAME'].split('.')[0]+'.bmp')\n                seg = np.array(Image.open(seg_name)).copy()\n                seg = 255. - seg\n                od = (seg>=127.).astype(np.float32)\n                oc = (seg>=250.).astype(np.float32)\n                od = torch.from_numpy(od[None,:,:])\n                oc = torch.from_numpy(oc[None,:,:])\n                od = transforms.functional.resize(od, self.output_size, interpolation=Image.NEAREST)\n                oc = transforms.functional.resize(oc, self.output_size, interpolation=Image.NEAREST)\n                seg = torch.cat([od, oc], dim=0)\n                self.segs.append(seg)\n                \n        print('Succesfully loaded {} dataset.'.format(split) + ' '*50)\n            \n            \n    def __len__(self):\n        return len(self.index)\n\n    def __getitem__(self, idx):\n        # Image\n        img = self.images[idx]\n    \n        # Return only images for 'test' set\n        if self.split == 'test':\n            return img\n        \n        # Else, images and ground truth\n        else:\n            # Label\n            lab = torch.tensor(self.index[str(idx)]['Label'], dtype=torch.float32)\n\n            # Segmentation masks\n            seg = self.segs[idx]\n\n            # Fovea localization\n            f_x = self.index[str(idx)]['Fovea_X']\n            f_y = self.index[str(idx)]['Fovea_Y']\n            fov = torch.FloatTensor([f_x, f_y])\n        \n            return img, lab, seg, fov, self.index[str(idx)]['IMG_NAME']","374fc049":"EPS = 1e-7\n\ndef compute_dice_coef(input, target):\n    '''\n    Compute dice score metric.\n    '''\n    batch_size = input.shape[0]\n    return sum([dice_coef_sample(input[k,:,:], target[k,:,:]) for k in range(batch_size)])\/batch_size\n\ndef dice_coef_sample(input, target):\n    iflat = input.contiguous().view(-1)\n    tflat = target.contiguous().view(-1)\n    intersection = (iflat * tflat).sum()\n    return (2. * intersection) \/ (iflat.sum() + tflat.sum())\n\n\ndef vertical_diameter(binary_segmentation):\n    '''\n    Get the vertical diameter from a binary segmentation.\n    The vertical diameter is defined as the \"fattest\" area of the binary_segmentation parameter.\n    '''\n\n    # get the sum of the pixels in the vertical axis\n    vertical_axis_diameter = np.sum(binary_segmentation, axis=1)\n\n    # pick the maximum value\n    diameter = np.max(vertical_axis_diameter, axis=1)\n\n    # return it\n    return diameter\n\n\n\ndef vertical_cup_to_disc_ratio(od, oc):\n    '''\n    Compute the vertical cup-to-disc ratio from a given labelling map.\n    '''\n    # compute the cup diameter\n    cup_diameter = vertical_diameter(oc)\n    # compute the disc diameter\n    disc_diameter = vertical_diameter(od)\n\n    return cup_diameter \/ (disc_diameter + EPS)\n\ndef compute_vCDR_error(pred_od, pred_oc, gt_od, gt_oc):\n    '''\n    Compute vCDR prediction error, along with predicted vCDR and ground truth vCDR.\n    '''\n    pred_vCDR = vertical_cup_to_disc_ratio(pred_od, pred_oc)\n    gt_vCDR = vertical_cup_to_disc_ratio(gt_od, gt_oc)\n    vCDR_err = np.mean(np.abs(gt_vCDR - pred_vCDR))\n    return vCDR_err, pred_vCDR, gt_vCDR\n\n\ndef classif_eval(classif_preds, classif_gts):\n    '''\n    Compute AUC classification score.\n    '''\n    auc = roc_auc_score(classif_gts, classif_preds)\n    return auc\n\n\ndef fov_error(pred_fov, gt_fov):\n    '''\n    Fovea localization error metric (mean root squared error).\n    '''\n    err = np.sqrt(np.sum((gt_fov-pred_fov)**2, axis=1)).mean()\n    return err","4f8fe7d0":"def refine_seg(pred):\n    '''\n    Only retain the biggest connected component of a segmentation map.\n    '''\n    np_pred = pred.numpy()\n        \n    largest_ccs = []\n    for i in range(np_pred.shape[0]):\n        labeled, ncomponents = label(np_pred[i,:,:])\n        bincounts = np.bincount(labeled.flat)[1:]\n        if len(bincounts) == 0:\n            largest_cc = labeled == 0\n        else:\n            largest_cc = labeled == np.argmax(bincounts)+1\n        largest_cc = torch.tensor(largest_cc, dtype=torch.float32)\n        largest_ccs.append(largest_cc)\n    largest_ccs = torch.stack(largest_ccs)\n    \n    return largest_ccs","b1f433ac":"class UNet(nn.Module):\n    def __init__(self, n_channels=3, n_classes=2):\n        super(UNet, self).__init__()\n        self.n_channels = n_channels\n        self.n_classes = n_classes\n        self.epoch = 0\n\n        self.inc = DoubleConv(n_channels, 64)\n        self.down1 = Down(64, 128)\n        self.down2 = Down(128, 256)\n        self.down3 = Down(256, 512)\n        factor = 2 \n        self.down4 = Down(512, 1024 \/\/ factor)\n        self.up1 = Up(1024, 512 \/\/ factor)\n        self.up2 = Up(512, 256 \/\/ factor)\n        self.up3 = Up(256, 128 \/\/ factor)\n        self.up4 = Up(128, 64)\n        self.output_layer = OutConv(64, n_classes)\n\n    def forward(self, x):\n        x1 = self.inc(x)\n        x2 = self.down1(x1)\n        x3 = self.down2(x2)\n        x4 = self.down3(x3)\n        x5 = self.down4(x4)\n        out = self.up1(x5, x4)\n        out = self.up2(out, x3)\n        out = self.up3(out, x2)\n        out = self.up4(out, x1)\n        out = self.output_layer(out)\n        out = torch.sigmoid(out)\n        return out\n    \nclass RN(nn.Module):\n    def __init__(self, n_channels=3, n_classes=2):\n        super(UNet, self).__init__()\n        self.n_channels = n_channels\n        self.n_classes = n_classes\n        self.epoch = 0\n\n        self.inc = DoubleConv(n_channels, 64)\n        self.down1 = Down(64, 128)\n        self.down2 = Down(128, 256)\n        self.down3 = Down(256, 512)\n        factor = 2 \n        self.down4 = Down(512, 1024 \/\/ factor)\n        self.up1 = Up(1024, 512 \/\/ factor)\n        self.up2 = Up(512, 256 \/\/ factor)\n        self.up3 = Up(256, 128 \/\/ factor)\n        self.up4 = Up(128, 64)\n        self.output_layer = OutConv(64, n_classes)\n\n    def forward(self, x):\n        x1 = self.inc(x)\n        x2 = self.down1(x1)\n        x3 = self.down2(x2)\n        x4 = self.down3(x3)\n        x5 = self.down4(x4)\n        out = self.up1(x5, x4)\n        out = self.up2(out, x3)\n        out = self.up3(out, x2)\n        out = self.up4(out, x1)\n        out = self.output_layer(out)\n        out = torch.sigmoid(out)\n        return out\n\n    \nclass DoubleConv(nn.Module):\n    \"\"\"(convolution => [BN] => ReLU) * 2\"\"\"\n\n    def __init__(self, in_channels, out_channels, mid_channels=None):\n        super().__init__()\n        if not mid_channels:\n            mid_channels = out_channels\n        self.double_conv = nn.Sequential(\n            nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1),\n            nn.BatchNorm2d(mid_channels),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1),\n            nn.BatchNorm2d(out_channels),\n            nn.ReLU(inplace=True)\n        )\n\n    def forward(self, x):\n        return self.double_conv(x)\n\n\nclass Down(nn.Module):\n    \"\"\"Downscaling with maxpool then double conv\"\"\"\n\n    def __init__(self, in_channels, out_channels):\n        super().__init__()\n        self.maxpool_conv = nn.Sequential(\n            nn.MaxPool2d(2),\n            DoubleConv(in_channels, out_channels)\n        )\n\n    def forward(self, x):\n        return self.maxpool_conv(x)\n\n\nclass Up(nn.Module):\n    \"\"\"Upscaling then double conv\"\"\"\n\n    def __init__(self, in_channels, out_channels):\n        super().__init__()\n\n        # Use the normal convolutions to reduce the number of channels\n        self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)\n        self.conv = DoubleConv(in_channels, out_channels, in_channels \/\/ 2)\n\n\n    def forward(self, x1, x2):\n        x1 = self.up(x1)\n        # input is CHW\n        diffY = x2.size()[2] - x1.size()[2]\n        diffX = x2.size()[3] - x1.size()[3]\n\n        x1 = F.pad(x1, [diffX \/\/ 2, diffX - diffX \/\/ 2,\n                        diffY \/\/ 2, diffY - diffY \/\/ 2])\n        x = torch.cat([x2, x1], dim=1)\n        return self.conv(x)\n\n\nclass OutConv(nn.Module):\n    '''\n    Simple convolution.\n    '''\n    def __init__(self, in_channels, out_channels):\n        super(OutConv, self).__init__()\n        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=1)\n\n    def forward(self, x):\n        return self.conv(x)","b6d755b7":"dir_path=\"..\/input\/eurecom-aml-2021-challenge-2\/refuge_data\/refuge_data\/\"\ndf_train = pd.read_json(dir_path+\"train\/index.json\").T.rename(columns={\"ImgName\" : \"IMG_NAME\"})\ndf_val = pd.read_json(dir_path+\"val\/index.json\").T.rename(columns={\"ImgName\" : \"IMG_NAME\"})\ndf_test = pd.read_json(dir_path+\"test\/index.json\").T.rename(columns={\"ImgName\" : \"IMG_NAME\"})\n\nIMG_SIZE = 512\nNUM_CLASSES = 5\nSEED = 77\nTRAIN_NUM = 1000","7e9b4903":"import torch\nfrom torchvision import transforms","64189f44":"df_aug_train = df_train\ndf_preproc_val = df_val\ndf_preproc_test = df_test\nloader_transform = transforms.RandomRotation(180)","5b9c1c14":"def pre_process(image, color=True, gaussian=False, kernel=IMG_SIZE\/\/10):\n    if color:\n        image = image\n    else:\n        image = cv2.cvtColor(image, cv2.IMREAD_GRAYSCALE)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))\n    if gaussian:\n        image=cv2.addWeighted ( image,4, cv2.GaussianBlur( image , (0,0) , kernel) ,-4 ,128)\n    else:\n        image=cv2.addWeighted ( image,4, cv2.medianBlur(image, kernel) ,-4 ,128)\n        \n    return PIL.Image.fromarray(image, \"RGB\")","5c8849eb":"\ndef aug_train_img_creator(tranform, df_init=df_train, df_augmented=df_aug_train):\n    try:\n        shutil.rmtree('refuge_data')\n    except:\n        print(\"no such directory1\")\n    \n    shutil.copytree('\/kaggle\/input\/eurecom-aml-2021-challenge-2\/refuge_data\/refuge_data','refuge_data\/refuge_data' )\n    try:\n        shutil.rmtree('refuge_data\/refuge_data\/train\/gts')\n        shutil.rmtree('refuge_data\/refuge_data\/train\/images')\n        os.remove('refuge_data\/refuge_data\/train\/index.json')\n    except:\n        print(\"no such directory2\")\n    \n    os.mkdir('refuge_data\/refuge_data\/train\/images')\n    os.mkdir('refuge_data\/refuge_data\/train\/gts')\n    i = 0\n    for image in df_init.IMG_NAME:\n        i = i+1\n        if i%10 ==0:\n            print(i)\n        path_to_img = dir_path+\"train\/images\/\"+image\n        bmp = image.replace('.jpg', '.bmp')\n        path_to_bmp = dir_path+\"train\/gts\/\"+bmp\n        img = cv2.imread(path_to_img)\n        bmpimg = PIL.Image.open(path_to_bmp)\n        #original = pre_process(img)\n        original = PIL.Image.fromarray(img, \"RGB\")\n        name = image.replace('.jpg', '')\n        bmpimg.save(\"refuge_data\/refuge_data\/train\/gts\/\"+bmp)\n        original.save(\"refuge_data\/refuge_data\/train\/images\/\"+name+\".jpg\")\n        for k in range(6):\n            new_img = loader_transform(original)\n            name = image.replace('.jpg', '') + str(k)\n            new_img.save(\"refuge_data\/refuge_data\/train\/images\/\"+name+\".jpg\")\n            bmpimg.save(\"refuge_data\/refuge_data\/train\/gts\/\"+name+\".bmp\")\n            new_sample = df_init[df_init.IMG_NAME == image]\n            new_sample.IMG_NAME = name+\".jpg\"\n            df_augmented = df_augmented.append(new_sample, ignore_index=True)\n    print('Augmentation ok')\n    return df_augmented","ddca6ef9":"df_val","95c83251":"def preprocess_val_test( df_vinit = df_val , df_tinit = df_test):\n    try:\n        shutil.rmtree('refuge_data\/refuge_data\/val\/images')\n        shutil.rmtree('refuge_data\/refuge_data\/val\/gts')\n        os.remove('refuge_data\/refuge_data\/val\/index.json')\n        shutil.rmtree('refuge_data\/refuge_data\/test\/images')\n        os.remove('refuge_data\/refuge_data\/test\/index.json')\n    except:\n        print(\"no such directory2\")\n    \n    os.mkdir('refuge_data\/refuge_data\/val\/images')\n    os.mkdir('refuge_data\/refuge_data\/val\/gts')\n    os.mkdir('refuge_data\/refuge_data\/test\/images')\n    df_v = pd.DataFrame(columns=['IMG_NAME','Label', 'Fovea_X', 'Fovea_Y', 'Size_X', 'Size_Y'])\n    df_t = pd.DataFrame(columns=['IMG_NAME', 'Size_X', 'Size_Y'])\n    for image in df_vinit.IMG_NAME:\n        path_to_img = dir_path+\"val\/images\/\"+image\n        path_to_bmp = dir_path+\"val\/gts\/\"+image.replace('.jpg', '.bmp')\n        img = cv2.imread(path_to_img)\n        bmp = PIL.Image.open(path_to_bmp)\n        #new_img = pre_process(img)\n        new_img = PIL.Image.fromarray(img, \"RGB\")\n        new_img.save(\"refuge_data\/refuge_data\/val\/images\/\"+image)\n        bmp.save(\"refuge_data\/refuge_data\/val\/gts\/\"+image.replace('.jpg', '.bmp'))\n        sample = df_vinit[df_vinit.IMG_NAME == image]\n        df_v = df_v.append(sample, ignore_index=True)\n    \n    print('Preprocessing validation ok')\n    for image in df_tinit.IMG_NAME:\n        path_to_img = dir_path+\"test\/images\/\"+image\n        img = cv2.imread(path_to_img)\n        #new_img = pre_process(img)\n        new_img = PIL.Image.fromarray(img, \"RGB\")\n        new_img.save(\"refuge_data\/refuge_data\/test\/images\/\"+image)\n        sample = df_tinit[df_tinit.IMG_NAME == image]\n        df_t = df_t.append(sample, ignore_index=True)\n    print('Preprocessing test ok')\n    return df_v, df_t\n        ","006ea973":"loader_transform = transforms.RandomRotation(10)\ndf_aug_train = aug_train_img_creator(loader_transform)","e7e2f7e4":"df_preproc_val, df_preproc_test = preprocess_val_test()","1eb46a27":"def write_jsons(train=df_aug_train, val=df_preproc_val, test=df_preproc_test):\n    train = train.T\n    val = val.T\n    test = test.T\n    train.to_json('refuge_data\/refuge_data\/train\/index.json')\n    val.to_json('refuge_data\/refuge_data\/val\/index.json')\n    test.to_json('refuge_data\/refuge_data\/test\/index.json')\n    \n    print('Write JSONs ok')","c774e1aa":"write_jsons()","4dc33acc":"import matplotlib.pyplot as plt","799fc174":"root_dir = 'refuge_data\/refuge_data'\nlr = 1e-4\nbatch_size = 8\nnum_workers = 8\ntotal_epoch = 100\n# Datasets\n\n\ntrain_set = RefugeDataset(root_dir, \n                          split='train')\n\nval_set = RefugeDataset(root_dir, \n                        split='val')\n\ntest_set = RefugeDataset(root_dir, \n                         split='test')\n\n# Dataloaders\ntrain_loader = DataLoader(train_set, \n                          batch_size=batch_size, \n                          shuffle=True, \n                          num_workers=num_workers,\n                          pin_memory=True,\n                         )\nval_loader = DataLoader(val_set, \n                        batch_size=batch_size, \n                        shuffle=False, \n                        num_workers=num_workers,\n                        pin_memory=True,\n                        )\ntest_loader = DataLoader(test_set, \n                        batch_size=batch_size, \n                        shuffle=False, \n                        num_workers=num_workers,\n                        pin_memory=True)","6c967c5e":"import torchvision.models as models\n# Device\ndevice = torch.device(\"cuda:0\")\n\nmodel = UNet(n_channels=3, n_classes=2).to(device)\n# model = models.inception_v3(pretrained=True).to(device)\n# model.AuxLogits.fc = nn.Linear(768, 2)\n# model.fc = nn.Linear(2048, 2)\n\n#model = models.resnet50(pretrained=True).to(device)\n#model.fc=nn.Linear(512, 2)\n\n","e05cb806":"\n# Loss\nseg_loss = torch.nn.BCELoss(reduction='mean')\n\n# Optimizer\noptimizer = optim.Adam(model.parameters(), lr=lr)","09933137":"# Define parameters\nnb_train_batches = len(train_loader)\nnb_val_batches = len(val_loader)\nnb_iter = 0\nbest_val_auc = 0.\nepoch = 50\nepoch_c=0\n\nwhile epoch_c < total_epoch:\n    epoch_c+=1\n    # Accumulators\n    train_vCDRs, val_vCDRs = [], []\n    train_classif_gts, val_classif_gts = [], []\n    train_loss, val_loss = 0., 0.\n    train_dsc_od, val_dsc_od = 0., 0.\n    train_dsc_oc, val_dsc_oc = 0., 0.\n    train_vCDR_error, val_vCDR_error = 0., 0.\n    \n    ############\n    # TRAINING #\n    ############\n    model.train()\n    train_data = iter(train_loader)\n    for k in range(nb_train_batches):\n        # Loads data\n        imgs, classif_gts, seg_gts, fov_coords, names = train_data.next()\n        imgs, classif_gts, seg_gts = imgs.to(device), classif_gts.to(device), seg_gts.to(device)\n\n        # Forward pass\n        logits = model(imgs)\n        print(logits.shape)\n        loss = seg_loss(logits, seg_gts)\n \n        # Backward pass\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        train_loss += loss.item() \/ nb_train_batches\n        \n        with torch.no_grad():\n            # Compute segmentation metric\n            pred_od = refine_seg((logits[:,0,:,:]>=0.5).type(torch.int8).cpu()).to(device)\n            pred_oc = refine_seg((logits[:,1,:,:]>=0.5).type(torch.int8).cpu()).to(device)\n            gt_od = seg_gts[:,0,:,:].type(torch.int8)\n            gt_oc = seg_gts[:,1,:,:].type(torch.int8)\n            dsc_od = compute_dice_coef(pred_od, gt_od)\n            dsc_oc = compute_dice_coef(pred_oc, gt_oc)\n            train_dsc_od += dsc_od.item()\/nb_train_batches\n            train_dsc_oc += dsc_oc.item()\/nb_train_batches\n\n\n            # Compute and store vCDRs\n            vCDR_error, pred_vCDR, gt_vCDR = compute_vCDR_error(pred_od.cpu().numpy(), pred_oc.cpu().numpy(), gt_od.cpu().numpy(), gt_oc.cpu().numpy())\n            train_vCDRs += pred_vCDR.tolist()\n            train_vCDR_error += vCDR_error \/ nb_train_batches\n            train_classif_gts += classif_gts.cpu().numpy().tolist()\n            \n        # Increase iterations\n        nb_iter += 1\n        \n        # Std out\n        print('Epoch {}, iter {}\/{}, loss {:.6f}'.format(model.epoch+1, k+1, nb_train_batches, loss.item()) + ' '*20, \n              end='\\r')\n        \n    # Train a logistic regression on vCDRs\n    train_vCDRs = np.array(train_vCDRs).reshape(-1,1)\n    train_classif_gts = np.array(train_classif_gts)\n    clf = LogisticRegression(random_state=0, solver='lbfgs').fit(train_vCDRs, train_classif_gts)\n    train_classif_preds = clf.predict_proba(train_vCDRs)[:,1]\n    train_auc = classif_eval(train_classif_preds, train_classif_gts)\n    \n    ##############\n    # VALIDATION #\n    ##############\n    model.eval()\n    with torch.no_grad():\n        val_data = iter(val_loader)\n        for k in range(nb_val_batches):\n            # Loads data\n            imgs, classif_gts, seg_gts, fov_coords, names = val_data.next()\n            imgs, classif_gts, seg_gts = imgs.to(device), classif_gts.to(device), seg_gts.to(device)\n\n            # Forward pass\n            logits = model(imgs)\n            val_loss += seg_loss(logits, seg_gts).item() \/ nb_val_batches\n\n            # Std out\n            print('Validation iter {}\/{}'.format(k+1, nb_val_batches) + ' '*50, \n                  end='\\r')\n            \n            # Compute segmentation metric\n            pred_od = refine_seg((logits[:,0,:,:]>=0.5).type(torch.int8).cpu()).to(device)\n            pred_oc = refine_seg((logits[:,1,:,:]>=0.5).type(torch.int8).cpu()).to(device)\n            gt_od = seg_gts[:,0,:,:].type(torch.int8)\n            gt_oc = seg_gts[:,1,:,:].type(torch.int8)\n            dsc_od = compute_dice_coef(pred_od, gt_od)\n            dsc_oc = compute_dice_coef(pred_oc, gt_oc)\n            val_dsc_od += dsc_od.item()\/nb_val_batches\n            val_dsc_oc += dsc_oc.item()\/nb_val_batches\n            \n            # Compute and store vCDRs\n            vCDR_error, pred_vCDR, gt_vCDR = compute_vCDR_error(pred_od.cpu().numpy(), pred_oc.cpu().numpy(), gt_od.cpu().numpy(), gt_oc.cpu().numpy())\n            val_vCDRs += pred_vCDR.tolist()\n            val_vCDR_error += vCDR_error \/ nb_val_batches\n            val_classif_gts += classif_gts.cpu().numpy().tolist()\n            \n\n    # Glaucoma predictions from vCDRs\n    val_vCDRs = np.array(val_vCDRs).reshape(-1,1)\n    val_classif_gts = np.array(val_classif_gts)\n    val_classif_preds = clf.predict_proba(val_vCDRs)[:,1]\n    val_auc = classif_eval(val_classif_preds, val_classif_gts)\n        \n    # Validation results\n    print('VALIDATION epoch {}'.format(model.epoch+1)+' '*50)\n    print('LOSSES: {:.4f} (train), {:.4f} (val)'.format(train_loss, val_loss))\n    print('OD segmentation (Dice Score): {:.4f} (train), {:.4f} (val)'.format(train_dsc_od, val_dsc_od))\n    print('OC segmentation (Dice Score): {:.4f} (train), {:.4f} (val)'.format(train_dsc_oc, val_dsc_oc))\n    print('vCDR error: {:.4f} (train), {:.4f} (val)'.format(train_vCDR_error, val_vCDR_error))\n    print('Classification (AUC): {:.4f} (train), {:.4f} (val)'.format(train_auc, val_auc))\n    \n    # Save model if best validation AUC is reached\n    if val_auc > best_val_auc:\n        torch.save(model.state_dict(), '\/kaggle\/working\/best_AUC_weights.pth')\n        with open('\/kaggle\/working\/best_AUC_classifier.pkl', 'wb') as clf_file:\n            pickle.dump(clf, clf_file)\n        best_val_auc = val_auc\n        print('Best validation AUC reached. Saved model weights and classifier.')\n    print('_'*50)\n        \n    # End of epoch\n    model.epoch += 1\n        \n","81dc6a7d":"# Load model and classifier\nmodel = UNet(n_channels=3, n_classes=2).to(device)\nmodel.load_state_dict(torch.load('\/kaggle\/working\/best_AUC_weights.pth'))\nwith open('\/kaggle\/working\/best_AUC_classifier.pkl', 'rb') as clf_file:\n    clf = pickle.load(clf_file)","d27732ab":"model.eval()\nval_vCDRs = []\nval_classif_gts = []\nval_loss = 0.\nval_dsc_od = 0.\nval_dsc_oc = 0.\nval_vCDR_error = 0.\nwith torch.no_grad():\n    val_data = iter(val_loader)\n    for k in range(nb_val_batches):\n        # Loads data\n        imgs, classif_gts, seg_gts, fov_coords, names = val_data.next()\n        imgs, classif_gts, seg_gts = imgs.to(device), classif_gts.to(device), seg_gts.to(device)\n\n        # Forward pass\n        logits = model(imgs)\n        val_loss += seg_loss(logits, seg_gts).item() \/ nb_val_batches\n\n        # Std out\n        print('Validation iter {}\/{}'.format(k+1, nb_val_batches) + ' '*50, \n              end='\\r')\n\n        # Compute segmentation metric\n        pred_od = refine_seg((logits[:,0,:,:]>=0.5).type(torch.int8).cpu()).to(device)\n        pred_oc = refine_seg((logits[:,1,:,:]>=0.5).type(torch.int8).cpu()).to(device)\n        gt_od = seg_gts[:,0,:,:].type(torch.int8)\n        gt_oc = seg_gts[:,1,:,:].type(torch.int8)\n        dsc_od = compute_dice_coef(pred_od, gt_od)\n        dsc_oc = compute_dice_coef(pred_oc, gt_oc)\n        val_dsc_od += dsc_od.item()\/nb_val_batches\n        val_dsc_oc += dsc_oc.item()\/nb_val_batches\n\n        # Compute and store vCDRs\n        vCDR_error, pred_vCDR, gt_vCDR = compute_vCDR_error(pred_od.cpu().numpy(), pred_oc.cpu().numpy(), gt_od.cpu().numpy(), gt_oc.cpu().numpy())\n        val_vCDRs += pred_vCDR.tolist()\n        val_vCDR_error += vCDR_error \/ nb_val_batches\n        val_classif_gts += classif_gts.cpu().numpy().tolist()\n\n\n# Glaucoma predictions from vCDRs\nval_vCDRs = np.array(val_vCDRs).reshape(-1,1)\nval_classif_gts = np.array(val_classif_gts)\nval_classif_preds = clf.predict_proba(val_vCDRs)[:,1]\nval_auc = classif_eval(val_classif_preds, val_classif_gts)\n\n# Validation results\nprint('VALIDATION '+' '*50)\nprint('LOSSES: {:.4f} (val)'.format(val_loss))\nprint('OD segmentation (Dice Score): {:.4f} (val)'.format(val_dsc_od))\nprint('OC segmentation (Dice Score): {:.4f} (val)'.format(val_dsc_oc))\nprint('vCDR error: {:.4f} (val)'.format(val_vCDR_error))\nprint('Classification (AUC): {:.4f} (val)'.format(val_auc))","236d1fa3":"nb_test_batches = len(test_loader)\nmodel.eval()\ntest_vCDRs = []\nwith torch.no_grad():\n    test_data = iter(test_loader)\n    for k in range(nb_test_batches):\n        # Loads data\n        imgs = test_data.next()\n        imgs = imgs.to(device)\n\n        # Forward pass\n        logits = model(imgs)\n\n        # Std out\n        print('Test iter {}\/{}'.format(k+1, nb_test_batches) + ' '*50, \n              end='\\r')\n            \n        # Compute segmentation\n        pred_od = refine_seg((logits[:,0,:,:]>=0.5).type(torch.int8).cpu()).to(device)\n        pred_oc = refine_seg((logits[:,1,:,:]>=0.5).type(torch.int8).cpu()).to(device)\n            \n        # Compute and store vCDRs\n        pred_vCDR = vertical_cup_to_disc_ratio(pred_od.cpu().numpy(), pred_oc.cpu().numpy())\n        test_vCDRs += pred_vCDR.tolist()\n            \n\n    # Glaucoma predictions from vCDRs\n    test_vCDRs = np.array(test_vCDRs).reshape(-1,1)\n    test_classif_preds = clf.predict_proba(test_vCDRs)[:,1]\n    \n# Prepare and save .csv file\ndef create_submission_csv(prediction, submission_filename='\/kaggle\/working\/submission.csv'):\n    \"\"\"Create a sumbission file in the appropriate format for evaluation.\n\n    :param\n    prediction: list of predictions (ex: [0.12720, 0.89289, ..., 0.29829])\n    \"\"\"\n    \n    with open(submission_filename, mode='w') as csv_file:\n        fieldnames = ['Id', 'Predicted']\n        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)\n        writer.writeheader()\n\n        for i, p in enumerate(prediction):\n            writer.writerow({'Id': \"T{:04d}\".format(i+1), 'Predicted': '{:f}'.format(p)})\n\ncreate_submission_csv(test_classif_preds)\n\n# The submission.csv file is under \/kaggle\/working\/submission.csv.\n# If you want to submit it, you should download it before closing the current kernel.","9bbd4778":"# Dataset class","d669b396":"# Train for OC\/OD segmentation","22f753d2":"# Create datasets and data loaders\nAll image files are loaded in RAM in order to speed up the pipeline. Therefore, each dataset creation should take a few minutes.","77e51ff2":"## DATA AUGMENTATION","f43d0a98":"# Post-processing functions","9a456384":"# Network","2108ff3b":"# Check performance is maintained on validation","3d098bdd":"# Load best model + classifier","b9434b4b":"# Device, model, loss and optimizer","e1ad611c":"# Predictions on test set","016498b4":"# Metrics","547b74f1":"# Settings"}}