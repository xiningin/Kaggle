{"cell_type":{"88b7a3c6":"code","6d110617":"code","11a5fd10":"code","214c9a07":"code","f9e5c667":"code","ff2f7465":"code","94ae5ce2":"code","916e706e":"code","b96ae534":"code","5afa06a9":"code","306fb90b":"code","a37917ed":"code","14fa84c4":"code","7d9647bc":"code","ce425641":"code","c9a49e30":"markdown","44791680":"markdown","0e4fdfb3":"markdown","1384ded8":"markdown","5a89c965":"markdown","91f6ff4f":"markdown"},"source":{"88b7a3c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d110617":"import matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout\nfrom tensorflow import keras\nfrom tensorflow.keras.applications import ResNet50V2,InceptionV3\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.optimizers import Adam\nimport os","11a5fd10":"train_path = '..\/input\/intel-image-classification\/seg_train\/seg_train\/'\ntest_path = '..\/input\/intel-image-classification\/seg_test\/seg_test\/'\npred_path = '..\/input\/intel-image-classification\/seg_pred\/seg_pred\/'","214c9a07":"train_df = keras.preprocessing.image_dataset_from_directory(\n    train_path,\n    shuffle = True,\n    image_size=(160,160),\n)","f9e5c667":"classes = train_df.class_names\nprint(classes)","ff2f7465":"plt.figure(figsize=(10,10))\n\nfor images, labels in train_df.take(1):\n  for i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(images[i]\/255) \n    plt.title(classes[labels[i]])\n    plt.xticks([])\n    plt.yticks([])","94ae5ce2":"TRAINING_DIR = train_path\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(\n    rescale = 1.0\/255,\n    shear_range=0.2,\n    zoom_range = 0.2\n)\ntrain_generator = train_datagen.flow_from_directory(TRAINING_DIR,\n                                                    batch_size=20,\n                                                    class_mode='categorical',\n                                                    target_size=(160,160))","916e706e":"VALIDATION_DIR = test_path\nvalidation_datagen = ImageDataGenerator( rescale = 1.0\/255.)\nvalidation_generator = train_datagen.flow_from_directory(VALIDATION_DIR,\n                                                    batch_size=20,\n                                                    class_mode='categorical',\n                                                    target_size=(160, 160))","b96ae534":"BATCH_SIZE = 32\nIMG_HEIGHT = 160\nIMG_WIDTH = 160\nIMG_SHAPE = (IMG_WIDTH, IMG_HEIGHT, 3)\nEPOCHS = 10\nINIT_LR = 1e-3\n\nCLASS_NAMES = np.array([item for item in os.listdir(train_path)])\nprint (CLASS_NAMES)","5afa06a9":"def define_model(n_layers=150,BASE_MODEL='ResNet50V2'):\n    if BASE_MODEL =='ResNet50V2':\n        # Pre-trained model with MobileNetV2\n        base_model = ResNet50V2(input_shape=IMG_SHAPE,include_top=False,weights='imagenet')\n        head_model = base_model\n        for layers in base_model.layers[:n_layers]:\n            layers.trainable=False\n        head_model = head_model.output\n        head_model = tf.keras.layers.GlobalMaxPooling2D()(head_model)\n        head_model = tf.keras.layers.Flatten(name=\"Flatten\")(head_model)\n        head_model = tf.keras.layers.Dense(1024,activation='relu')(head_model)\n        head_model = tf.keras.layers.Dropout(0.2)(head_model)\n        prediction_layer = tf.keras.layers.Dense(len(CLASS_NAMES), activation='softmax')(head_model)\n        model = tf.keras.Model(inputs=base_model.input,outputs=prediction_layer)\n    \n    if BASE_MODEL =='InceptionV3':\n        base_model = InceptionV3(input_shape=IMG_SHAPE,include_top=False,weights='imagenet')\n        head_model = base_model\n        for layers in base_model.layers[:n_layers]:\n            layers.trainable=False\n        \n        head_model = head_model.output\n        head_model = tf.keras.layers.GlobalMaxPooling2D()(head_model)\n        head_model = tf.keras.layers.Flatten(name=\"Flatten\")(head_model)\n        head_model = tf.keras.layers.Dense(1024,activation='relu')(head_model)\n        head_model = tf.keras.layers.Dropout(0.5)(head_model)\n        prediction_layer = tf.keras.layers.Dense(len(CLASS_NAMES), activation='softmax')(head_model)\n        model = tf.keras.Model(inputs=base_model.input,outputs=prediction_layer)\n    return model\n\n# define Model \nmodel= define_model(BASE_MODEL='InceptionV3')\n\n#Compilation of the model\nmodel.compile(\n    loss='categorical_crossentropy', \n    optimizer=Adam(lr=0.01), \n    metrics=['accuracy'])","306fb90b":"model.summary()","a37917ed":"history = model.fit(train_generator,\n                              epochs=25,\n                              verbose=1,\n                              validation_data=validation_generator)","14fa84c4":"import matplotlib.pyplot as plt\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend(loc=0)\nplt.figure()\n\nplt.show()","7d9647bc":"import glob\nimport random\ntest_img = glob.glob('..\/input\/intel-image-classification\/seg_pred\/seg_pred\/*.jpg')\nimg_select = random.randint(1,len(test_img))\nprint(type(test_img))\nimg = plt.imread(test_img[img_select])\nplt.imshow(img)","ce425641":"import cv2\nimg = cv2.resize(img,(160,160))\nimg=img\/255.0\ninput_data = np.array(np.expand_dims(img,axis=0), dtype=np.float32)\n# print(input_data)\noutput_data = model.predict(np.expand_dims(img,axis=0))\nresults = np.squeeze(output_data)\npred = classes[np.argmax(results)]\nprint('The Model Predicted {}'.format(pred))","c9a49e30":"Model Analysis ","44791680":"**Dataset Paths**","0e4fdfb3":"Image's Present In The Dataset","1384ded8":"**Important Library**","5a89c965":"Image Data Generator & Image Agumentation","91f6ff4f":"**Defining The Model**"}}