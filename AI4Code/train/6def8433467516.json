{"cell_type":{"b45e3f10":"code","2ca1db10":"code","a378e0ff":"code","e6b382df":"code","bd8fd26f":"code","1269865c":"code","4988e2a5":"code","f59084ea":"code","f75cbb88":"code","09929155":"code","e4686669":"code","d5fa2928":"code","8f327fe6":"code","d1114bc9":"code","438dd4da":"code","7fea02e3":"code","a0d6fbe5":"code","76e77375":"code","e74cb5e2":"code","4ee6f4ac":"code","8d64dced":"code","df230795":"code","7c1f419a":"code","c954dfdd":"markdown"},"source":{"b45e3f10":"# Base \n# -----------------------------------\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Missing Values \n# -----------------------------------\n# !pip install missingno\nimport missingno as msno\n\n# Models \n# -----------------------------------\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier,RandomForestClassifier, BaggingClassifier, AdaBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\n# Metrics & Evaluation\n# -----------------------------------\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import accuracy_score, roc_auc_score, roc_curve, classification_report\n\n# Configuration\n# -----------------------------------\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\npd.set_option('display.max_columns', None)\npd.options.display.float_format = '{:.4f}'.format","2ca1db10":"tr = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nts = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\ndf = tr.append(ts)\n\n\nfor i in [\"object\", \"float\", \"integer\", \"bool\"]:\n    print(i.capitalize()+\" Variables:\", \"\\n\", \"# of Variables:\", \n      len(df.select_dtypes(i).columns), \"\\n\", \n      df.select_dtypes(i).columns.tolist(), \"\\n\")\n\ndf.shape, tr.shape, ts.shape","a378e0ff":"df.head()","e6b382df":"df.describe([0.01, 0.05, 0.10, 0.80, 0.90, 0.95, 0.99]).T","bd8fd26f":"print(df.Survived.value_counts()), print(df.Survived.value_counts() \/ df.shape[0])","1269865c":"df.isnull().values.any()","4988e2a5":"msno.heatmap(df)\nplt.show()","f59084ea":"def missing_values(data, plot = False, target = \"SalePrice\"):\n    \n    mst = pd.DataFrame({\"Num_Missing\":df.isnull().sum(), \"Missing_Ratio\":df.isnull().sum() \/ df.shape[0]}).sort_values(\"Num_Missing\", ascending = False)\n    mst[\"DataTypes\"] = df[mst.index].dtypes.values\n    mst = mst[mst.Num_Missing > 0].reset_index().rename({\"index\":\"Feature\"}, axis = 1)\n    mst = mst[mst.Feature != target]\n    \n    print(\"Number of Variables include Missing Values:\", mst.shape[0], \"\\n\")\n    \n    if mst[mst.Missing_Ratio > 0.99].shape[0] > 0:  \n        print(\"Full Missing Variables:\",mst[mst.Missing_Ratio > 0.99].Feature.tolist())\n        data.drop(mst[mst.Missing_Ratio > 0.99].Feature.tolist(), axis = 1, inplace = True)\n\n        print(\"Full missing variables are deleted!\", \"\\n\")\n\n    if plot:\n        plt.figure(figsize = (25, 8))    \n        p = sns.barplot(mst.Feature, mst.Missing_Ratio)\n        for rotate in p.get_xticklabels():\n            rotate.set_rotation(90)\n                        \n    print(mst, \"\\n\")        \n    \nmissing_values(df, plot = True, target = \"Survived\")","f75cbb88":"def missing_vs_target(dataframe, target):\n    temp_df = dataframe.copy()\n    \n    variable_with_na = temp_df.drop(target, axis = 1).isnull().sum().reset_index()\n    variable_with_na = variable_with_na[variable_with_na[0] > 0][\"index\"].tolist()\n\n    for variable in variable_with_na:\n        temp_df[variable + '_NA_FLAG'] = np.where(temp_df[variable].isnull(), 1, 0)\n\n    flags_na = temp_df.loc[:, temp_df.columns.str.contains(\"_NA_\")].columns\n\n    for variable in flags_na:\n        print(pd.DataFrame({\"TARGET_MEAN\": temp_df.groupby(variable)[target].mean()}), end=\"\\n\\n\\n\")\n\n        \nmissing_vs_target(df, \"Survived\")","09929155":"def num_plot(data, cat_length = 16, remove = [\"Id\"], hist_bins = 12, figsize = (20,4)):\n    \n    num_cols = [col for col in data.columns if data[col].dtypes != \"O\" \n                and len(data[col].unique()) >= cat_length]\n    \n    if len(remove) > 0:\n        num_cols = list(set(num_cols).difference(remove))\n            \n    for i in num_cols:\n        fig, axes = plt.subplots(1, 3, figsize = figsize)\n        data.hist(str(i), bins = hist_bins, ax=axes[0])\n        data.boxplot(str(i),  ax=axes[1], vert=False);\n        try: \n            sns.kdeplot(np.array(data[str(i)]))\n        except: ValueError\n        \n        axes[1].set_yticklabels([])\n        axes[1].set_yticks([])\n        axes[0].set_title(i + \" | Histogram\")\n        axes[1].set_title(i + \" | Boxplot\")\n        axes[2].set_title(i + \" | Density\")\n        plt.show()\n        \n        \nnum_plot(df, cat_length = 16, remove = [\"PassengerId\"], hist_bins = 10, figsize = (20,4))","e4686669":"def cat_eda(data, cat_length, target = \"Survived\"):  \n    dataframe = data.copy()\n    \n    #if len(ordinal_variable) > 0:\n    #    dataframe.drop(ordinal_variable, axis = 1, inplace = True)\n        \n    more_cat_cols = [col for col in dataframe.columns if len(dataframe[col].unique()) < cat_length]\n    \n    num_cols = [col for col in data.columns if data[col].dtypes != \"O\" \n                and len(data[col].unique()) >= cat_length]\n    \n    for i in more_cat_cols: \n        print(i, \":\", len(dataframe[i].value_counts()), \"Unique Category -\", str(dataframe[i].dtype))\n        print(pd.DataFrame({\"COUNT\": dataframe[i].value_counts(),\n                            \"RATIO\": dataframe[i].value_counts() \/ len(dataframe),\n                            \"TARGET_MEAN\": dataframe.groupby(i)[target].mean(),\n                            \"TARGET_COUNT\": dataframe.groupby(i)[target].count(),\n                            \"TARGET_STD\": dataframe.groupby(i)[target].std()}), end=\"\\n\\n\\n\")\n    \n    print(\"# DTYPES -----------------------------\")\n    print(\"Object Variables:\",dataframe[more_cat_cols].select_dtypes(\"object\").columns.tolist(), \"\\n\")\n    print(\"Integer Variables:\",dataframe[more_cat_cols].select_dtypes(\"integer\").columns.tolist(), \"\\n\")\n    print(\"Float Variables:\",dataframe[more_cat_cols].select_dtypes(\"float\").columns.tolist(), \"\\n\")\n    \n    print(\"# OTHER -----------------------------\")\n    print(\"More than \" + str(cat_length)+\" categories:\", dataframe.drop(more_cat_cols + num_cols, axis = 1).columns, \"\\n\")\n    print(dataframe.drop(more_cat_cols + num_cols, axis = 1).nunique())\n\ncat_eda(df, cat_length=10, target = \"Survived\")\n","d5fa2928":"df[(df.Embarked.isnull()) | (df.Ticket == \"113572\")]","8f327fe6":"df[(df.Fare.isnull())]","d1114bc9":"# Mode: S\ndf[\"Embarked\"] = df[\"Embarked\"].fillna(df[\"Embarked\"].mode()[0])\n\n# All data median = 14, Pclass = 3 median = 8\ndf[\"Fare\"] = df[\"Fare\"].fillna(df.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"))\n\n\n# Title\ndf['NEW_TITLE'] = df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n# Fill NA with Title\ndf[\"Age\"] = df[\"Age\"].fillna(df.groupby(\"NEW_TITLE\")[\"Age\"].transform(\"mean\"))","438dd4da":"# Label\ndf[\"NEW_CABIN_BOOL\"] = df[\"Cabin\"].notnull().astype('int')\n\n# Family\ndf.loc[((df['SibSp'] + df['Parch']) > 0), \"NEW_IS_ALONE\"] = 0\ndf.loc[((df['SibSp'] + df['Parch']) == 0), \"NEW_IS_ALONE\"] = 1\n\n# NUMERIC TO CATEGORICAL\ndf.loc[(df['Age'] < 18), 'NEW_AGE_CAT'] = 'young'\ndf.loc[(df['Age'] >= 18) & (df['Age'] < 56), 'NEW_AGE_CAT'] = 'mature'\ndf.loc[(df['Age'] >= 56), 'NEW_AGE_CAT'] = 'senior'\n\ndf[\"AGECAT2\"] = pd.cut(df.Age, 8, labels = np.arange(1,9,1)).astype(int)\n\n# INTERACTIONS\n\ndf[\"FAMILY_SIZE\"] = df[\"SibSp\"] + df[\"Parch\"] + 1\ndf[\"NEW_AGExPCLASS\"] = df[\"Age\"] * df[\"Pclass\"]\n\ndf.loc[(df['Sex'] == 'male') & (df['Age'] <= 21), 'NEW_SEX_CAT'] = 'youngmale'\ndf.loc[(df['Sex'] == 'male') & ((df['Age'] > 21) & (df['Age']) < 50), 'NEW_SEX_CAT'] = 'maturemale'\ndf.loc[(df['Sex'] == 'male') & (df['Age'] > 50), 'NEW_SEX_CAT'] = 'seniormale'\ndf.loc[(df['Sex'] == 'female') & (df['Age'] <= 21), 'NEW_SEX_CAT'] = 'youngfemale'\ndf.loc[(df['Sex'] == 'female') & ((df['Age'] > 21) & (df['Age']) < 50), 'NEW_SEX_CAT'] = 'maturefemale'\ndf.loc[(df['Sex'] == 'female') & (df['Age'] > 50), 'NEW_SEX_CAT'] = 'seniorfemale'\n\n\n# PERSONNEL\ndf[\"NEW_CABIN_BOOL\"] = df[\"Cabin\"].notnull().astype('int')\n\n# CABIN CODE\ncabin = []\nimport re\nfor i in range(0,len(df)):\n    regex = re.compile('[A-Z]')\n    try:\n        temp = regex.findall(df.Cabin.iloc[i])[0]   \n    except:\n        temp = \"Unknown\"\n    cabin.append(temp)\ndf[\"CabinCode\"] = cabin\n\n\n# FARE\ndf[\"Fare_0\"] = np.where(df.Fare < 1, 1, 0)\n\ndf[\"FareClass\"]= pd.cut(df.Fare, 10, labels = np.arange(1,11,1)).astype(int)\n\n# Pclass \/ Fare\ndf[\"NewClass\"] = df.Pclass \/ (df.Fare + 1)\n\n\n# DROP\ndf.drop([\"Name\"], axis = 1, inplace = True)\n\n\ndf[\"Cabin\"] = df.Cabin.fillna(\"Unknown\")","7fea02e3":"# LABEL ENCODER\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\n\nfor i in [\"Sex\", \"Ticket\", \"Cabin\", \"CabinCode\"]:\n    df[i] = le.fit_transform(df[i])\n    \n# ONE-HOT ENCODER\ndf = pd.get_dummies(df, columns=[\"Embarked\", \"Pclass\",\"NEW_TITLE\", \"NEW_AGE_CAT\", \"NEW_SEX_CAT\"], drop_first=True)","a0d6fbe5":"cat_eda(df, cat_length=10, target = \"Survived\")","76e77375":"# Train Test Split After Data Manipulation\ntrain = df.iloc[:891]\ntrain[\"Survived\"] = train[\"Survived\"].astype(\"int\")\ntrain.drop(\"PassengerId\", axis = 1, inplace = True)\n\ntest = df.iloc[891:].drop(\"Survived\", axis = 1)\n\nX_train = train.drop(\"Survived\", axis = 1)\ny_train = train.Survived\n\n\n# All Models & Train Validation Scores\nmodels = [('LR', LogisticRegression()),\n          (\"NBAYES\", GaussianNB()),\n          ('KNN', KNeighborsClassifier()),\n          ('CART', DecisionTreeClassifier()),\n          (\"BAGGING\", BaggingClassifier()),\n          ('RF', RandomForestClassifier()),\n          ('SVM', SVC(gamma='auto')),\n          (\"ADAB\",AdaBoostClassifier()),\n          ('GBM', GradientBoostingClassifier()),\n          (\"XGB\", XGBClassifier()),\n          (\"LGBM\", LGBMClassifier())]\n\n# evaluate each model in turn\nresults = []\nnames = []\n\nprint(\"# Algorithm Comparison\")\nprint(\"-----------------------------------------\")\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=123456)\n    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring=\"accuracy\")\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)\n    \nprint(\"\\n\")    \n\n# boxplot algorithm comparison\nfig = plt.figure(figsize=(15, 10))\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","e74cb5e2":"gbm = GradientBoostingClassifier(\n    random_state=1\n)\ngbm","4ee6f4ac":"params = {\n    #\"ccp_alpha\":np.arange(0.0, 1.1, 0.1),\n    \"max_depth\":np.arange(3, 16, 1),\n    \"max_leaf_nodes\":np.arange(2, 11, 1)\n}\n\n\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n\ngs = GridSearchCV(gbm, params,  n_jobs=-1, cv = 10, scoring = \"accuracy\")\ngs_gbm = gs.fit(X_train, y_train)\n\ngs_gbm","8d64dced":"print(classification_report(y_train, gs_gbm.predict(X_train)))","df230795":"sub = pd.DataFrame({\"PassengerId\":test.PassengerId, \"Survived\":gs_gbm.predict(test.drop(\"PassengerId\", axis = 1))})\nsub.to_csv(\"submission.csv\", index = None)","7c1f419a":"sub.head(20)","c954dfdd":"- <code>survival<\/code> - **Target** (0 = No, 1 = Yes)\n- <code>pclass<\/code> - **Ticket class** (1 = 1st, 2 = 2nd, 3 = 3rd)\n- <code>sex<\/code> - **Sex**\n- <code>Age<\/code> - **Age in years**\n- <code>sibsp<\/code> - **# of siblings \/ spouses aboard the Titanic**\t\n- <code>parch<\/code> - **# of parents \/ children aboard the Titanic**\t\n- <code>ticket<\/code> - **Ticket number**\n- <code>fare<\/code> - **Passenger fare**\t\n- <code>cabin<\/code> - **Cabin number**\n- <code>embarked<\/code> - **Port of Embarkation**\t(C = Cherbourg, Q = Queenstown, S = Southampton)"}}