{"cell_type":{"33ecca42":"code","ac0e28f9":"code","60246d69":"code","acdae843":"code","c4f06054":"code","0651f1fb":"code","bd81a548":"code","baf3d7b0":"code","72b4854c":"code","de421501":"code","f40ef4c9":"code","b56e89e1":"code","9085f279":"code","4e9edb77":"code","000e0c88":"code","2a25e05b":"code","2dafd918":"code","6d317dde":"code","ab8e72d5":"code","1567d0a5":"code","3455864f":"code","90a1090b":"code","23c37934":"code","b58086a6":"code","9291c128":"code","44f25dde":"code","d9ff0540":"code","7b4493ea":"code","5837fe11":"code","5692f2e8":"code","2c024404":"code","b2dbca3b":"code","6ee54ad7":"code","b507bcf8":"code","10f315af":"code","3ab78470":"code","ec0e87d5":"code","b38a1dec":"code","d54091d0":"code","96629ae6":"code","12ddd095":"code","c2f97cb0":"code","dba5b81d":"code","16ae76ab":"code","fdae9e1b":"markdown","839710ef":"markdown","8f7b44d2":"markdown","0fca765a":"markdown","86ab5360":"markdown","65936715":"markdown","76f24089":"markdown","f56e4e9d":"markdown","5dc0001e":"markdown","aaf6bdcc":"markdown","f4324c38":"markdown","5fa2eb30":"markdown","25cdd0c1":"markdown","9c45c2e7":"markdown","242b93fb":"markdown","e0bf95b2":"markdown","8ff88ec5":"markdown","3cc83cdb":"markdown","42b7e7bf":"markdown","351c85ee":"markdown","a22bd7f2":"markdown","b08afcca":"markdown","a6ed7e15":"markdown","fc2cbe55":"markdown","e5874f15":"markdown","76786fee":"markdown","97887d8c":"markdown","fc0e8e8d":"markdown","9310acf0":"markdown"},"source":{"33ecca42":"import numpy as np\nimport pandas as pd\nimport os","ac0e28f9":"df = pd.read_csv(\"..\/input\/telecom-churn\/telecom_churn.csv\")\ndf.head()","60246d69":"df.shape","acdae843":"df.info()","c4f06054":"df[\"Churn\"] = df[\"Churn\"].astype(\"int64\")","0651f1fb":"df.describe(include=[\"object\", \"bool\"])","bd81a548":"df.head()","baf3d7b0":"df.describe()","72b4854c":"state_abbr = {\n  'AL' : 'Alabama',\n  'AK' : 'Alaska',\n  'AZ' : 'Arizona',\n  'AR' : 'Arkansas',\n  'CA' : 'California',\n  'CO' : 'Colorado',\n  'CT' : 'Connecticut',\n  'DE' : 'Delaware',\n  'DC' : 'District of Columbia',\n  'FL' : 'Florida',\n  'GA' : 'Georgia',\n  'HI' : 'Hawaii',\n  'ID' : 'Idaho',\n  'IL' : 'Illinois',\n  'IN' : 'Indiana',\n  'IA' : 'Iowa',\n  'KS' : 'Kansas',\n  'KY' : 'Kentucky',\n  'LA' : 'Louisiana',\n  'ME' : 'Maine',\n  'MD' : 'Maryland',\n  'MA' : 'Massachusetts',\n  'MI' : 'Michigan',\n  'MN' : 'Minnesota',\n  'MS' : 'Mississippi',\n  'MO' : 'Missouri',\n  'MT' : 'Montana',\n  'NE' : 'Nebraska',\n  'NV' : 'Nevada',\n  'NH' : 'New Hampshire',\n  'NJ' : 'New Jersey',\n  'NM' : 'New Mexico',\n  'NY' : 'New York',\n  'NC' : 'North Carolina',\n  'ND' : 'North Dakota',\n  'OH' : 'Ohio',\n  'OK' : 'Oklahoma',\n  'OR' : 'Oregon',\n  'PA' : 'Pennsylvania',\n  'RI' : 'Rhode Island',\n  'SC' : 'South Carolina',\n  'SD' : 'South Dakota',\n  'TN' : 'Tennessee',\n  'TX' : 'Texas',\n  'UT' : 'Utah',\n  'VT' : 'Vermont',\n  'VA' : 'Virginia',\n  'WA' : 'Washington',\n  'WV' : 'West Virginia',\n  'WI' : 'Wisconsin',\n  'WY' : 'Wyoming'\n}","de421501":"df['State'] = df['State'].replace(state_abbr)","f40ef4c9":"\ndf.shape","b56e89e1":"d = {\"No\": False, \"Yes\": True}\ndf[\"International plan\"] = df[\"International plan\"].map(d)\ndf[\"Voice mail plan\"] = df[\"Voice mail plan\"].map(d)\ndf.head()","9085f279":"total_calls = (\n    df[\"Total day calls\"]\n    + df[\"Total eve calls\"]\n    + df[\"Total night calls\"])\ndf.insert(loc = len(df.columns),column=\"Total Calls\", value=total_calls)\n\n# Insert column into DataFrame at specified location.\n# loc parameter is the number of columns after which to insert the Series object\n# we set it to len(df.columns) to paste it at the very end of the dataframe\n","4e9edb77":"df[\"Total charge\"] = (\n    df[\"Total day charge\"]\n    + df[\"Total eve charge\"]\n    + df[\"Total night charge\"]\n    + df[\"Total intl charge\"]\n)\ndf.head()","000e0c88":"df = df.sort_values(by=\"State\",ascending=True)\ndf=df.reset_index()\n","2a25e05b":"# del df[\"index\"]\n# df.head()","2dafd918":"df.info()\n","6d317dde":"df[\"Churn\"].mean()","ab8e72d5":"df[df[\"Churn\"]==1].mean()","1567d0a5":"df[df[\"Churn\"]==1][\"Total day minutes\"].mean()","3455864f":"df.pivot_table(\n    [\"Total day calls\", \"Total eve calls\", \"Total night calls\",\"Total intl calls\"],\n    [\"Area code\"],\n    aggfunc=\"mean\",\n)","90a1090b":"df.pivot_table(\n    [\"Total day minutes\", \"Total eve minutes\", \"Total night minutes\",\"Total intl minutes\"],\n    [\"Area code\"],\n    aggfunc=\"mean\",\n)","23c37934":"df.pivot_table(\n    [\"Total day charge\", \"Total eve charge\", \"Total night charge\",\"Total intl charge\"],\n    [\"Area code\"],\n    aggfunc=\"mean\",\n)","b58086a6":"df.groupby(\"State\",sort=True)[\"Churn\"].describe(percentiles=[])","9291c128":"for i, x in df.groupby('State'):\n    p = os.path.join(os.getcwd(), \"data_{}.csv\".format(i.lower()))\n    x.to_csv(p, index=False)","44f25dde":"df[\"Area code\"].value_counts()\n","d9ff0540":"df[\"Area code\"].value_counts(normalize=True)","7b4493ea":"pd.crosstab(df[\"Churn\"], df[\"Area code\"],margins=True)","5837fe11":"pd.crosstab(df[\"Churn\"], df[\"Area code\"],margins=True,normalize=True)\n","5692f2e8":"pd.crosstab(df[\"International plan\"],df[\"Area code\"],margins=True)","2c024404":"pd.crosstab(df[\"International plan\"],df[\"Area code\"],margins=True,normalize=True)","b2dbca3b":"pd.crosstab(df[\"Churn\"],df[\"International plan\"],margins=True)","6ee54ad7":"pd.crosstab(df[\"Churn\"],df[\"International plan\"],margins=True,normalize=True)","b507bcf8":"pd.crosstab(df[\"Voice mail plan\"],df[\"Area code\"],margins=True)","10f315af":"pd.crosstab(df[\"Voice mail plan\"],df[\"Area code\"],margins=True,normalize=True)","3ab78470":"pd.crosstab(df[\"Churn\"],df[\"Voice mail plan\"],margins=True)","ec0e87d5":"pd.crosstab(df[\"Churn\"],df[\"Voice mail plan\"],margins=True,normalize=True)","b38a1dec":"# some imports to set up plotting\nimport matplotlib.pyplot as plt\n# pip install seaborn\nimport seaborn as sns\n\n# Graphics in retina format are more sharp and legible\n%config InlineBackend.figure_format = 'retina'","d54091d0":"sns.countplot(x=\"International plan\", hue=\"Churn\", data=df);","96629ae6":"sns.countplot(x=\"International plan\", hue=\"Churn\", data=df);","12ddd095":"pd.crosstab(df[\"Churn\"], df[\"Customer service calls\"], margins=True)","c2f97cb0":"df[\"Many_service_calls\"] = (df[\"Customer service calls\"] > 3).astype(\"int\")\n\npd.crosstab(df[\"Many_service_calls\"], df[\"Churn\"], margins=True)","dba5b81d":"pd.crosstab(df[\"Many_service_calls\"] & df[\"International plan\"], df[\"Churn\"])","16ae76ab":"pd.crosstab(df[\"Many_service_calls\"] & df[\"Voice mail plan\"], df[\"Churn\"])","fdae9e1b":"**Group The Data According to States**","839710ef":"**We can Sort data WRT columns we have sorted value based on states**","8f7b44d2":"**Let's construct another contingency table that relates Churn with both International plan and freshly created Many_service_calls.**","0fca765a":"**If we want to calculate the total number of calls for all users, let's create the total_calls**","86ab5360":"**Therefore, predicting that a customer is not loyal (Churn=1) in the case when the number of calls to the service center is greater than 3 and the Voice mail Plan is added (and predicting Churn=0 otherwise), we might expect an accuracy of 85.14% (we are mistaken only 453 + 42 times).**","65936715":"**From above table we can see that around 9.7% people has International Plan**","76f24089":"**pivot tables are implemented in Pandas: the pivot_table method takes the following parameters:**\n\n**values \u2013 a list of variables to calculate statistics for,**\n\n**index \u2013 a list of variables to group data by,**\n\n**aggfunc \u2013 what statistics we need to calculate for groups, ex. sum, mean, maximum, minimum or something else.**\n\n**Let's take a look at the average number of day, evening, and night calls by area code:**","f56e4e9d":"**Indexing and retrieving data**\n\n**A DataFrame can be indexed in a few different ways.To get a single column, you can use a DataFrame['Name'] construction. Let's use this to answer a question about that column alone: what is the proportion of churned users in our dataframe?**","5dc0001e":"**Therefore, predicting that a customer is not loyal (Churn=1) in the case when the number of calls to the service center is greater than 3 and the International Plan is added (and predicting Churn=0 otherwise), we might expect an accuracy of 85.8% (we are mistaken only 464 + 9 times).**","aaf6bdcc":"**As you can see we have successfully created States wise Dataset,Want to study in depth about telecom-churn this might be helpful.**\n\nSpecial Thanks to this article for helping create State wise Datasets.\nhttps:\/\/stackoverflow.com\/questions\/49050455\/pandas-split-data-frame-into-multiple-csvs-based-on-column-value\n\n","f4324c38":"**Out of 9.7% people 4.1% people Churned Due to International Plan**","5fa2eb30":"**14.5% is actually quite bad for a company; such a churn rate can make the company go bankrupt.**\n\n**Boolean indexing** \n\n**with one column is also very convenient. The syntax is df[P(df['Name'])], where P is some logical condition that is checked for each element of the Name column. The result of such indexing is the DataFrame consisting only of rows that satisfy the P condition on the Name column.**","25cdd0c1":"**Although it's not so obvious from the summary table, it's easy to see from the above plot that the churn rate increases sharply from 4 customer service calls and above.**\n\n**Now let's add a binary feature to our DataFrame \u2013 Customer service calls > 3. And once again, let's see how it relates to churn.**","9c45c2e7":"**Question**\n\n**1) What are average values of numerical features for churned users?**","242b93fb":"**Grouping**\n\n**In general, grouping data in Pandas works as follows:**\n\n*df.groupby(by=grouping_columns)[columns_to_show].function()*\n\n**First, the groupby method divides the grouping_columns by their values. They become a new index in the resulting dataframe.**\n\n**Then, columns of interest are selected (columns_to_show). If columns_to_show is not included, all non groupby clauses will be included.**\n\n**Finally, one or several functions are applied to the obtained groups per selected columns.**","e0bf95b2":"**Special Thanks To :Yury Kashnitsky** \n\n**Pandas is a Python library that provides extensive means for data analysis. Data scientists often work with data stored in table formats like .csv, .tsv, or .xlsx. Pandas makes it very convenient to load, process, and analyze such tabular data using SQL-like queries. In conjunction with Matplotlib and Seaborn, Pandas provides a wide range of opportunities for visual analysis of tabular data.**","8ff88ec5":"**Here we have converted State Short form to Long form for better understanding**","3cc83cdb":"**The map method can be used to replace values in a column by passing a dictionary of the form {old_value: new_value} as its argument:**","42b7e7bf":"**The describe method shows basic statistical characteristics of each numerical feature (int64 and float64 types): number of non-missing values, mean, standard deviation, range, median, 0.25 and 0.75 quartiles.**","351c85ee":"**From the above tables we can see that around 27.6% customer has Voice mail plan Activated**","a22bd7f2":"**Out of 27.6% People 2.4% Customer has Churned.**","b08afcca":"**From the output, we can see that the table contains 3333 rows and 20 columns**","a6ed7e15":"**Study of Whole Dataset*","fc2cbe55":"**We can see from the table that these columns are object type out of which there are 51 unique states 2 unique interenational plan(Yes No) similar to voice mail plan**","e5874f15":"**After studing area code we can understand that in 415 area code more number of customers so higher percentage of churn rate compare to other code**","76786fee":"**Total Charge Per Min:**\n\n**Day: 0.170\/min**\n\n**Evening: 0.084\/min**\n\n**Night: 0.044\/min**\n\n**International :0.27\/min**","97887d8c":"**bool, int64, float64 and object are the data types of our features. We see that one feature is logical (bool), 3 features are of type object, and 16 features are numeric. With this same method, we can easily see if there are any missing values. Here, there are none because each column contains 3333 observations, the same number of rows we saw before with shape.**\n\n**We can change the column type with the astype method. Let's apply this method to the Churn feature to convert it into int64:**","fc0e8e8d":"**Next, let's look at another important feature \u2013 Customer service calls. Let's also make a summary table and a picture.**","9310acf0":"**2) How much time (on average) do churned users spend on the phone during daytime?**"}}