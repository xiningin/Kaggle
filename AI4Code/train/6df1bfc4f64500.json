{"cell_type":{"639685fd":"code","c2d7b328":"code","4a39e428":"code","a186bebd":"code","914900cd":"code","4c838a8b":"code","46385a15":"code","386a2fe2":"code","d2cb061e":"code","a730c80d":"code","52091ec2":"code","327e7ab7":"code","765c1373":"code","effa8773":"code","eb02b960":"code","ac803aaa":"code","7c1e71a6":"code","6e7e484d":"code","6694c270":"code","d0ddac9e":"code","65131585":"code","ec9dc31f":"code","fa28e2a3":"code","6273cd5e":"code","95e861fd":"code","a30da796":"code","9b18a51b":"code","c183efe9":"code","0cc4c3a0":"code","9fb79487":"code","e0005b2a":"code","1831a8e2":"code","e454a3fe":"code","19f1f77d":"code","8d413c5f":"code","1b6ef62b":"code","f976b6b0":"code","c70b0829":"code","07dc0e63":"code","bf57c070":"markdown","efd81f56":"markdown","aee9b861":"markdown","8ace0f5b":"markdown","8edaf942":"markdown","181ad126":"markdown","097ab86a":"markdown","84d31a67":"markdown","4417eb8d":"markdown","20749568":"markdown","ec206c9a":"markdown"},"source":{"639685fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2d7b328":"import torch\nfrom tqdm.notebook import tqdm","4a39e428":"df = pd.read_csv('..\/input\/smile-twitter-emotion-dataset\/smile-annotations-final.csv',\n                names=['id', 'text', 'category'])\ndf.set_index('id', inplace=True)","a186bebd":"df.head()","914900cd":"df.category.value_counts()","4c838a8b":"df = df[df.category.isin(['happy', 'not-relevant', 'angry', 'surprise', 'sad', 'disgust'])]","46385a15":"df.category.value_counts()","386a2fe2":"possible_labels = df.category.unique()","d2cb061e":"label_dict = {}\nfor index, possible_label in enumerate(possible_labels):\n    label_dict[possible_label] = index","a730c80d":"label_dict","52091ec2":"df.category = df['category'].map(label_dict)","327e7ab7":"df.head(10)","765c1373":"from sklearn.model_selection import train_test_split","effa8773":"X_train, X_val, y_train, y_val = train_test_split(df.index.values, \n                                                  df.category.values, \n                                                  test_size=0.15, \n                                                  random_state=42,\n                                                  stratify=df.category.values)","eb02b960":"df['data_type'] = ['not_set']*df.shape[0]","ac803aaa":"df.head()","7c1e71a6":"df.loc[X_train, 'data_type'] = 'train'\ndf.loc[X_val, 'data_type'] = 'val'","6e7e484d":"df.groupby(['category', 'data_type']).count()","6694c270":"from transformers import BertTokenizer\nfrom torch.utils.data import TensorDataset","d0ddac9e":"tokenizer = BertTokenizer.from_pretrained(\n    'bert-base-uncased',\n    do_lower_case=True\n)","65131585":"encoded_data_train = tokenizer.batch_encode_plus(\n    df[df.data_type=='train'].text.values,\n    add_special_tokens=True,\n    return_attention_mask=True,\n    pad_to_max_length=True,\n    max_length=256,\n    return_tensors='pt'\n)\n\nencoded_data_val = tokenizer.batch_encode_plus(\n    df[df.data_type=='val'].text.values,\n    add_special_tokens=True,\n    return_attention_mask=True,\n    pad_to_max_length=True,\n    max_length=256,\n    return_tensors='pt'\n)\n\ninput_ids_train = encoded_data_train['input_ids']\nattention_masks_train = encoded_data_train['attention_mask']\nlabels_train = torch.tensor(df[df.data_type=='train'].category.values)\n\ninput_ids_val = encoded_data_val['input_ids']\nattention_masks_val = encoded_data_val['attention_mask']\nlabels_val = torch.tensor(df[df.data_type=='val'].category.values)","ec9dc31f":"dataset_train = TensorDataset(input_ids_train, \n                              attention_masks_train,\n                              labels_train)\n\ndataset_val = TensorDataset(input_ids_val, \n                            attention_masks_val,\n                           labels_val)","fa28e2a3":"len(dataset_train)","6273cd5e":"dataset_val.tensors","95e861fd":"from transformers import BertForSequenceClassification","a30da796":"model = BertForSequenceClassification.from_pretrained(\n                                      'bert-base-uncased', \n                                      num_labels = len(label_dict),\n                                      output_attentions = False,\n                                      output_hidden_states = False\n                                     )","9b18a51b":"from torch.utils.data import DataLoader, RandomSampler, SequentialSampler","c183efe9":"batch_size = 4\n\ndataloader_train = DataLoader(\n    dataset_train,\n    sampler=RandomSampler(dataset_train),\n    batch_size=batch_size\n)\n\ndataloader_val = DataLoader(\n    dataset_val,\n    sampler=RandomSampler(dataset_val),\n    batch_size=32\n)","0cc4c3a0":"from transformers import AdamW, get_linear_schedule_with_warmup","9fb79487":"optimizer = AdamW(\n    model.parameters(),\n    lr = 1e-5,\n    eps = 1e-8\n)","e0005b2a":"epochs = 10\n\nscheduler = get_linear_schedule_with_warmup(\n    optimizer,\n    num_warmup_steps=0,\n    num_training_steps = len(dataloader_train)*epochs\n)","1831a8e2":"import numpy as np\nfrom sklearn.metrics import f1_score","e454a3fe":"def f1_score_func(preds, labels):\n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return f1_score(labels_flat, preds_flat, average = 'weighted')","19f1f77d":"def accuracy_per_class(preds, labels):\n    label_dict_inverse = {v: k for k, v in label_dict.items()}\n    \n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    \n    for label in np.unique(labels_flat):\n        y_preds = preds_flat[labels_flat==label]\n        y_true = labels_flat[labels_flat==label]\n        print(f'Class: {label_dict_inverse[label]}')\n        print(f'Accuracy:{len(y_preds[y_preds==label])}\/{len(y_true)}\\n')","8d413c5f":"import random\n\nseed_val = 17\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)","1b6ef62b":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel.to(device)\nprint(device)","f976b6b0":"def evaluate(dataloader_val):\n\n    model.eval()\n    \n    loss_val_total = 0\n    predictions, true_vals = [], []\n    \n    for batch in tqdm(dataloader_val):\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }\n\n        with torch.no_grad():        \n            outputs = model(**inputs)\n            \n        loss = outputs[0]\n        logits = outputs[1]\n        loss_val_total += loss.item()\n\n        logits = logits.detach().cpu().numpy()\n        label_ids = inputs['labels'].cpu().numpy()\n        predictions.append(logits)\n        true_vals.append(label_ids)\n    \n    loss_val_avg = loss_val_total\/len(dataloader_val) \n    \n    predictions = np.concatenate(predictions, axis=0)\n    true_vals = np.concatenate(true_vals, axis=0)\n            \n    return loss_val_avg, predictions, true_vals","c70b0829":"for epoch in tqdm(range(1, epochs+1)):\n    model.train()\n    loss_train_total = 0\n    \n    progress_bar = tqdm(dataloader_train, \n                        desc='Epoch {:1d}'.format(epoch), \n                        leave=False, \n                        disable=False)\n    \n    for batch in progress_bar:\n        model.zero_grad()\n        batch = tuple(b.to(device) for b in batch)\n        inputs = {\n            'input_ids': batch[0],\n            'attention_mask': batch[1],\n            'labels': batch[2]\n        }\n        \n        outputs = model(**inputs)\n        loss = outputs[0]\n        loss_train_total +=loss.item()\n        loss.backward()\n        \n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n        \n        optimizer.step()\n        scheduler.step()\n        \n        progress_bar.set_postfix({'training_loss': '{:.3f}'.format(loss.item()\/len(batch))})     \n    \n    #torch.save(model.state_dict(), f'Models\/BERT_ft_Epoch{epoch}.model')\n    \n    tqdm.write('\\nEpoch {epoch}')\n    \n    loss_train_avg = loss_train_total\/len(dataloader_train)\n    tqdm.write(f'Training loss: {loss_train_avg}')\n    \n    val_loss, predictions, true_vals = evaluate(dataloader_val)\n    val_f1 = f1_score_func(predictions, true_vals)\n    tqdm.write(f'Validation loss: {val_loss}')\n    tqdm.write(f'F1 Score (weighted): {val_f1}')\n","07dc0e63":"accuracy_per_class(predictions, true_vals)","bf57c070":"# 5. Creating Data Loaders","efd81f56":"## 1: Exploratory Data Analysis and Preprocessing","aee9b861":"## 2: Training\/Validation Split","8ace0f5b":"# 9. Evaluating our Model","8edaf942":"# **Sentiment Analysis with Deep Learning using BERT**\n\n\n## **What is BERT?**\n\nBERT is a large-scale transformer-based Language Model that can be finetuned for a variety of tasks.\n\nFor more information, the original paper can be found here (https:\/\/arxiv.org\/abs\/1810.04805).\n\nHuggingFace documentation (https:\/\/huggingface.co\/transformers\/model_doc\/bert.html)","181ad126":"# 8. Creating our Training Loop","097ab86a":"Classes are imbalanced as visible","84d31a67":"# 4. Setting up BERT Pretrained Model","4417eb8d":"# 7. Defining our Performance Metrics","20749568":"# 3. Loading Tokenizer and Encoding our Data","ec206c9a":"# 6. Setting Up Optimizer and Scheduler"}}