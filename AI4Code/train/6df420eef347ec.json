{"cell_type":{"b4b8ca01":"code","a5144f4e":"code","31eb9711":"code","80dc1edf":"code","e5a8358d":"code","d451ae78":"code","86982dd8":"code","84973c85":"code","419a5c8f":"code","5f04b135":"code","a37276e5":"code","da8074c0":"code","ec313181":"code","948b6bc0":"code","847f5b78":"code","621453f3":"code","9ddb6903":"code","19d1aa63":"code","06c12ea7":"code","99e0c75f":"code","053fc0f9":"code","4c7f6ae3":"code","713957a8":"code","4cfb887b":"code","45c9ce40":"code","ca63cae6":"markdown","782dd084":"markdown","105cbc4e":"markdown","c2532129":"markdown","bf077f8e":"markdown","cecbd1af":"markdown","e3fff3c9":"markdown","e6b7f470":"markdown","df7863ff":"markdown","c37a93ff":"markdown","22680c97":"markdown","5e52d1e8":"markdown","48593f77":"markdown","9cdb553b":"markdown","c1dfaa46":"markdown"},"source":{"b4b8ca01":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nimport time\nfrom sklearn.metrics import precision_recall_fscore_support as score\nfrom sklearn.metrics import r2_score, confusion_matrix, accuracy_score, mean_squared_error\n","a5144f4e":"df_heart = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')","31eb9711":"df_heart.head()","80dc1edf":"df_heart.shape","e5a8358d":"df_heart.info()","d451ae78":"df_heart.isnull().sum()","86982dd8":"df_heart.describe()","84973c85":"df_heart['output'].value_counts()","419a5c8f":"sns.countplot(df_heart['output'])","5f04b135":"ax = px.pie(df_heart, names = 'output', template = 'plotly_dark', title = 'Output', hole = 0.5)\nax.show()","a37276e5":"plt.figure(figsize=(16,8))\nsns.heatmap(df_heart.corr(), linewidth = 1, cmap = 'Reds', annot = True)","da8074c0":"X=df_heart.iloc[:, :-1].values\ny=df_heart.iloc[:, -1].values","ec313181":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","948b6bc0":"print('Shape of train_dataset :', X_train.shape, y_train.shape)\nprint('Shape of train_dataset :', X_test.shape, y_test.shape)","847f5b78":"def compute(Y_test,Y_pred):\n    plt.figure(figsize=(7,3))\n    cm=confusion_matrix(Y_test,Y_pred)\n    class_label = [\"High-risk\", \"Low-risk\"]\n    df_cm = pd.DataFrame(cm, index=class_label,columns=class_label)\n    sns.heatmap(df_cm,annot=True,cmap='OrRd',linewidths=2,fmt='d')\n    plt.title(\"Confusion Matrix\",fontsize=15)\n    plt.xlabel(\"Predicted\")\n    plt.ylabel(\"True\")\n    plt.show()\n    \n    \n    acc=accuracy_score(Y_test,Y_pred)\n    mse=mean_squared_error(Y_test,Y_pred)\n    precision, recall, fscore, train_support = score(Y_test, Y_pred, pos_label=1, average='binary')\n    print('Precision: {} \\nRecall: {} \\nF1-Score: {} \\nAccuracy: {} %\\nMean Square Error: {}'.format(\n        round(precision, 3), round(recall, 3), round(fscore,3), round((acc*100),3), round((mse),3)))","621453f3":"start = time.time()\n\nmodel_lr = LogisticRegression()\nmodel_lr.fit(X_train, y_train)\ny_pred = model_lr.predict(X_test)\n\nend = time.time() \n\nprint(f'Execution time of model :{round((end-start), 5)} seconds')\n\ncompute(y_test,y_pred)","9ddb6903":"start = time.time()\n\nmodel_knn = KNeighborsClassifier()\nmodel_knn.fit(X_train, y_train)\ny_pred = model_knn.predict(X_test)\n\nend = time.time()\n\nprint(f'Execution time of model : {round((end - start), 5)} seconds')\n\ncompute(y_test, y_pred) ","19d1aa63":"start = time.time()\n\nmodel_svm = SVC()\nmodel_svm.fit(X_train, y_train)\ny_pred = model_svm.predict(X_test)\n\nend = time.time()\n\nprint(f'Execution time of model: {round((end - start), 5)} seconds')\n\ncompute(y_test, y_pred)","06c12ea7":"start = time.time()\n\nmodel_DT = DecisionTreeClassifier()\nmodel_DT.fit(X_train, y_train)\ny_pred = model_DT.predict(X_test)\n\nend = time.time()\n\nprint(f'Execution time of model : {round((end-start), 5)} seconds')\n\ncompute(y_test, y_pred)","99e0c75f":"start = time.time()\n\nmodel_rf = RandomForestClassifier()\nmodel_rf.fit(X_train, y_train)\ny_pred = model_rf.predict(X_test)\n\nend = time.time()\n\nprint(f'Execution time of model:{round((end - start), 5)} seconds')\n\ncompute(y_test, y_pred)","053fc0f9":"start = time.time()\n\nmodel_ada = AdaBoostClassifier()\nmodel_ada.fit(X_train, y_train)\ny_pred = model_ada.predict(X_test)\n\nend = time.time()\n\nprint(f'Execution time of model: {round((end - start), 5)} seconds')\n\ncompute(y_test, y_pred)","4c7f6ae3":"start = time.time()\n\nmodel_grad = GradientBoostingClassifier()\nmodel_grad.fit(X_train, y_train)\ny_pred = model_grad.predict(X_test)\n\nend = time.time()\n\nprint(f'Execution time of model: {round((end - start), 5)} seconds')\n\ncompute(y_test, y_pred)","713957a8":"start = time.time()\n\nmodel_xg = XGBClassifier()\nmodel_xg.fit(X_train, y_train)\ny_pred = model_xg.predict(X_test)\n\nend = time.time()\n\nprint(f'Execution time of model: {round((end - start), 5)} seconds')\n\ncompute(y_test, y_pred)","4cfb887b":"plt.figure(figsize = (10,6))\nModel = ['Logistic Reg', 'KNN', 'SVM', 'Decision Tree', 'Random forest', 'Ada_Boost', 'Gradient_Boost', 'XG_boost']\nAccuracy = [85.24, 63.93, 68.85, 73.77, 85.24, 90.16, 80.32, 78.69]\n\nplt.barh(Model, Accuracy, color = 'pink')\nplt.title('Accuracy Comparision of Different Model')\nplt.xlabel('Model')\nplt.ylabel('Accuracy')\nplt.show()","45c9ce40":"plt.figure(figsize = (10,6))\nModel = ['Logistic Reg', 'KNN', 'SVM', 'Decision Tree', 'Random forest', 'Ada_Boost', 'Gradient_Boost', 'XG_boost']\nExecutionTime = [0.0232, 0.0071, 0.0054, 0.0036, 0.2068, 0.0707, 0.0755, 0.0490]\n\nplt.barh(Model, ExecutionTime, color = 'purple')\nplt.title('Execution Time Comparision of Different Models')\nplt.xlabel('Execution Time in seconds')\nplt.ylabel('Model')\nplt.show()","ca63cae6":"### **6.AdaBoostClassifier**","782dd084":"### **7.GradientBoostingCXlassifier**","105cbc4e":"### **2. KNeighborsClassifier**","c2532129":"### <h1 style='color:blue'>**Execution Time Comparision of all models**<\/h1>","bf077f8e":"### **5.RandomForestClassifier**","cecbd1af":"### <h1 style='color:blue'>**Accuracy Comparision of all model**<\/h1>","e3fff3c9":"### **4.DecisionTreeClassifier**","e6b7f470":"### <h1 style='color:Blue'>**Thank You**<\/h1>","df7863ff":"#### <h1 style='color:blue'>**Read Data**<\/h1>","c37a93ff":"### **3. Support Vector Machine**","22680c97":"### **8.XGBoostClassifier**","5e52d1e8":"### <h1 style='color:blue'>**Model Building**<\/h1>","48593f77":"#### <h1 style='color:blue'>**Import Librabries**<\/h1>","9cdb553b":"**From above graph is clearly shows that Ada boosting has high accuracy compare to other models.**","c1dfaa46":"### **1. Logistic Regression**"}}