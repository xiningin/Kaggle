{"cell_type":{"f867116e":"code","531a8fff":"code","9d9caf59":"code","dd5cfba7":"code","27c90f0b":"code","1a13a5fb":"code","dc23beb9":"code","4816401e":"code","1f5b3387":"code","ca32eee0":"code","8dc163e0":"code","02482280":"code","b97d310e":"code","39606c53":"code","ef18c1af":"code","ea8bfe84":"code","2af5af3d":"code","93404f4a":"code","6b5041a9":"code","e8689d46":"code","52fb2feb":"code","2164108e":"code","d046165a":"code","98cf7b9b":"code","4a6eed5d":"code","087f35e3":"code","1c97c9cf":"code","6dd4d917":"code","1b4c77a1":"code","0a8f032f":"code","5ea62201":"code","60b33dc6":"code","29319a21":"code","43b90877":"code","c29e9cdf":"code","74c89650":"code","72d990b8":"code","1b03e48d":"code","36bcde3d":"code","95bb4d85":"code","55999408":"code","96f5a567":"code","4c628a5f":"code","76a30836":"code","7b9676a7":"code","81e03ed4":"code","2e71237c":"code","c707edad":"code","de5e8961":"code","722e4da7":"code","b1b80cda":"code","dc2e1af3":"code","3deb28fa":"code","192eb7f8":"code","c00ca49b":"code","fb5f5400":"code","f6ef6ad4":"code","67a53961":"code","bbdd18fd":"code","40913e6c":"code","4f75f739":"markdown","e4330719":"markdown","2b1e2bb9":"markdown","e5a67b5d":"markdown","75f5c2dd":"markdown","580f5fb1":"markdown","de21ff0f":"markdown","33711832":"markdown"},"source":{"f867116e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","531a8fff":"data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","9d9caf59":"data.head()","dd5cfba7":"data.tail()","27c90f0b":"# datatypes of the dataset\ndata.dtypes","1a13a5fb":"data.info()","dc23beb9":"# shape of the dataset\ndata.shape","4816401e":"# Null value checking\ndata.isnull().sum()","1f5b3387":"sns.countplot(x = 'sex',hue = 'target',data = data)","ca32eee0":"corr=data.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(data.corr(),annot=True,cmap='PiYG')\nplt.show()","8dc163e0":"corr=data.corr()\nsections = [56, 66]\ncolors = ['c', 'y']\n\nplt.pie(sections, colors=colors,\n        startangle=90,\n        explode = (0, 0),\n        autopct = '%1.2f%%')\n\nplt.axis('equal') # Try commenting this out.\nplt.show()","02482280":"sns.pairplot(data)\nplt.show()","b97d310e":"sns.boxplot(x='target',y='age',hue='sex',data=data)","39606c53":"sns.countplot(data.cp,hue=data.target)\nplt.show()","ef18c1af":"sns.distplot(data.trestbps[data.target==0])\nsns.distplot(data.trestbps[data.target==1])\nplt.legend(['0','1'])\nplt.show()","ea8bfe84":"sns.countplot(data.restecg,hue=data.target)\nplt.show()","2af5af3d":"sns.countplot(data.exang,hue=data.target)\ndef random_plots():\n  xs = []\n  ys = []\n  \n  for i in range(20):\n    x = i\n    y = np.random.randint(10)\n    \n    xs.append(x)\n    ys.append(y)\n  \n  return xs, ys\n\nfig = plt.figure()\nax1 = plt.subplot2grid((5, 2), (0, 0), rowspan=1, colspan=2)\nax2 = plt.subplot2grid((5, 2), (1, 0), rowspan=3, colspan=2)\nax3 = plt.subplot2grid((5, 2), (4, 0), rowspan=1, colspan=1)\nax4 = plt.subplot2grid((5, 2), (4, 1), rowspan=1, colspan=1)\n\nx, y = random_plots()\nax1.plot(x, y)\n\nx, y = random_plots()\nax2.plot(x, y)\n\nx, y = random_plots()\nax3.plot(x, y)\n\nx, y = random_plots()\nax4.plot(x, y)\n\nplt.tight_layout()\nplt.show()","93404f4a":"sns.swarmplot(data.ca,hue=data.target)\nplt.show()","6b5041a9":"sns.kdeplot(data.thal,hue=data.target)\nplt.show()","e8689d46":"sns.catplot(x=\"cp\", y=\"chol\",hue=\"sex\",data=data, kind=\"bar\")\nplt.show()","52fb2feb":"plt.subplot(1,2,1)\nsns.scatterplot(x='age',y='chol',hue='sex',data=data)\nplt.subplot(1,2,2)\nsns.scatterplot(x='age',y='chol',hue='target',data=data)","2164108e":"# Show the results of a linear regression within each dataset\nsns.lmplot(x=\"trestbps\", y=\"chol\",data=data,hue=\"cp\")\nplt.show()","d046165a":"plt.figure(figsize=(5,5))\nsns.heatmap(pd.DataFrame(data.corr()['target']).sort_values(by='target').transpose().drop('target',axis=1).transpose(),annot=True,cmap='CMRmap')","98cf7b9b":"list = ['sex','cp','fbs','restecg','exang','slope','ca','thal']\nm=1\nplt.figure(figsize=(15,10))\nfor i in list:\n    plt.subplot(3,3,m)\n    sns.countplot(x=i,data=data,hue='target')\n    m+=1","4a6eed5d":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nsns.histplot(data=data,hue='target',x='thalach',bins=20,element='poly')\nplt.subplot(1,2,2)\nsns.histplot(data=data,hue='target',x='chol',bins=20,element='poly')","087f35e3":"X = data.drop('target',axis=1)\nY = data['target']","1c97c9cf":"from sklearn.feature_selection import SelectKBest, chi2\nfs = SelectKBest(score_func=chi2, k='all')\nfs.fit(X, Y)\nper = []\nfor i in fs.scores_:\n    per.append(round(((i\/sum(fs.scores_))*100),3))\n\nfeatures_data = pd.DataFrame({'Feature':X.columns,'Scores':fs.scores_,'Importance (%)':per}).sort_values(by=['Scores'],ascending=False)\n\nplt.figure(figsize=(9,4))\nsns.barplot( 'Importance (%)','Feature',orient='h',data=features_data,palette='CMRmap')\ninsignificant = features_data.loc[features_data['Importance (%)']<0.005]['Feature'].unique()\nfeatures_data = features_data.set_index('Feature')\nfeatures_data","6dd4d917":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.model_selection import train_test_split","1b4c77a1":"target = data['target']\ndetail = data.drop('target',axis=1)","0a8f032f":"target.head()","5ea62201":"X_train, X_test, y_train, y_test = train_test_split(detail, target, test_size=0.3)","60b33dc6":"np.array(y_test)","29319a21":"np.array(X_test)","43b90877":"#input and output selection\nip=data.drop(['target'],axis=1)\nop=data['target']","c29e9cdf":"from sklearn.model_selection import train_test_split\nxtr,xts,ytr,yts=train_test_split(ip,op,test_size=0.3)","74c89650":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nsc.fit(xtr)\nxtr=sc.transform(xtr)\nxts=sc.transform(xts)","72d990b8":"from sklearn.linear_model import LogisticRegression\nalg=LogisticRegression()","1b03e48d":"#train the algorithm with the training data\nalg.fit(xtr,ytr)\nyp=alg.predict(xts)","36bcde3d":"from sklearn import metrics\ncm=metrics.confusion_matrix(yts,yp)\nprint(cm)","95bb4d85":"accuracy=metrics.accuracy_score(yts,yp)\nprint(accuracy)","55999408":"precission=metrics.precision_score(yts,yp)\nprint(precission)","96f5a567":"recall=metrics.recall_score(yts,yp)\nprint(recall)","4c628a5f":"from sklearn.model_selection import train_test_split\nxtr,xts,ytr,yts=train_test_split(ip,op,test_size=0.2)","76a30836":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nsc.fit(xtr)\nxtr=sc.transform(xtr)\nxts=sc.transform(xts)","7b9676a7":"from sklearn.naive_bayes import GaussianNB\nGNB=GaussianNB()\nGNB.fit(xtr,ytr)\nyp=GNB.predict(xts)","81e03ed4":"from sklearn import metrics\ncm=metrics.confusion_matrix(yts,yp)\nprint(cm)","2e71237c":"accuracy=metrics.accuracy_score(yts,yp)\nprint(accuracy)","c707edad":"recall=metrics.recall_score(yts,yp)\nprint(recall)","de5e8961":"#KNN algorithm the nearest distance is calculated\nfrom sklearn.neighbors import KNeighborsClassifier\n\nneighbors=np.arange(1,9)\ntrain_accuracy=np.empty(len(neighbors))\ntest_accuracy=np.empty(len(neighbors))\n\nfor i,k in enumerate(neighbors):\n    knn=KNeighborsClassifier(n_neighbors=k)\n    knn.fit(xtr,ytr)\n    train_accuracy[i]=knn.score(xtr,ytr)\n    test_accuracy[i]=knn.score(xts,yts)\n\nplt.xlabel('neighbors of number')\nplt.ylabel('accuracy')\nplt.title('k-NN Varying number of neighbors')\nplt.plot(neighbors, test_accuracy, label='Testing Accuracy')\nplt.plot(neighbors, train_accuracy, label='Training accuracy')\nplt.legend()\nplt.show()","722e4da7":"from sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV","b1b80cda":"X_train, X_test, y_train, y_test = train_test_split(detail, target, test_size=0.3)","dc2e1af3":"grid={'C':[1,10,100,1000,10000,100000,1000000],'gamma':[0.0000001,0.000001,0.00001,0.0001,0.001,.01,0.1,1]}","3deb28fa":"g=GridSearchCV(SVC(),grid,verbose=2)","192eb7f8":"g.fit(X_train,y_train)","c00ca49b":"g.best_estimator_","fb5f5400":"Prediction4=g.predict(X_test)","f6ef6ad4":"np.array(y_test)","67a53961":"Prediction4","bbdd18fd":"print(classification_report(y_test,Prediction4))","40913e6c":"print(confusion_matrix(y_test,Prediction4))","4f75f739":"# ***Naive Bayes classifier***","e4330719":"# **SVC**","2b1e2bb9":"# ***Checking the Accuracy of the Model***","e5a67b5d":"----------------------------------------------------------------","75f5c2dd":"# ***Feature Selection***","580f5fb1":"# ***LogisticRegression***","de21ff0f":"**K-NEAREST NEIGHBOUR**","33711832":"# ***Analyzing the dataset***"}}