{"cell_type":{"79453f35":"code","cb8c2fae":"code","43e5d56b":"code","14e5bf8e":"code","08b1d763":"code","52e3c1f7":"code","dd030031":"code","f37d5276":"code","bf4c79d7":"code","2d9170fd":"code","326dc747":"code","a7b6c42f":"code","888e9a00":"code","0e2d4403":"code","d782a560":"code","dcc628c7":"code","6472e31b":"code","df6a5b41":"code","7ad42761":"code","c1bb0819":"code","9d9c36e6":"code","f88707fb":"code","917d6ad4":"code","68bf7a06":"code","f1fce244":"code","fd556fb7":"code","7bedcef9":"code","b5a059b8":"code","b8213944":"code","b6a23e70":"code","52740aa6":"code","09ec260f":"code","cf0f7712":"code","0c38c01e":"code","b8dbe978":"code","f2a5e39e":"markdown","fbefc226":"markdown","59eaa29b":"markdown","d950e948":"markdown","a90b65e5":"markdown","918acbfb":"markdown","e23d0891":"markdown","c9ec7d0a":"markdown","50a508df":"markdown","eceb0e66":"markdown","5b0b4bf2":"markdown"},"source":{"79453f35":"#import library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport nltk\nimport math\nnltk.download('wordnet')\nfrom textblob import TextBlob\nfrom wordcloud import WordCloud\nimport re\nimport string\nstring.punctuation\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn import metrics","cb8c2fae":"df = pd.read_csv('..\/input\/arcane-soundtrack-lyrics\/Arcane\/arcane_soundtrack.csv')","43e5d56b":"df.shape","14e5bf8e":"df.head()","08b1d763":"df.describe()","52e3c1f7":"df.info()","dd030031":"#handling missing value\ndf.dropna(inplace = True)","f37d5276":"#selection data\ntext = df[['lyrics']]\ntext.head()","bf4c79d7":"#defining to remove punctuation\ndef remove_punctuation(text):\n    punctuationfree = \"\".join([i for i in text if i not in string.punctuation])\n    return punctuationfree\n\ntext['lyrics_punctuation'] = text['lyrics'].apply(lambda text: remove_punctuation(text))\ntext.head()","2d9170fd":"#setting lower case\ntext['lyrics_lower'] = text['lyrics_punctuation'].str.lower()\ntext.head()","326dc747":"#defining function for tokenization\ndef tokenization(text):\n    tokens = re.split('W+', text)\n    return tokens\n\n#applying function to the column\ntext['lyrics_tokenied'] = text['lyrics_lower'].apply(lambda x: tokenization(x))\ntext.head()","a7b6c42f":"#stop words present in the library\nstopwords = nltk.corpus.stopwords.words('english')\n\n#defining the function to remove stopwords from tokenized text\ndef remove_stopwords(text):\n    output= [i for i in text if i not in stopwords]\n    return output\n\n#applying the function\ntext['no_stopword'] = text['lyrics_tokenied'].apply(lambda x:remove_stopwords(x))\ntext.head()","888e9a00":"#defining the object for stemming\nporter_stemmer = PorterStemmer()\n\n#defining a function for stemming\ndef stemming(text):\n    stem_text = [porter_stemmer.stem(word) for word in text]\n    return stem_text\n\n#applying the function\ntext['lyrics_stemmend'] = text['no_stopword'].apply(lambda x: stemming(x))\ntext.head()","0e2d4403":"#defining the object for lemmatizing\nlemmatizer = WordNetLemmatizer()\n\n#defining a function for lemmatizing\ndef lemmatize_words(text):\n    lemma_text = [lemmatizer.lemmatize(word) for word in text]\n    return lemma_text\n                \n#applying the function\ntext['lyrics_lemmatized'] = text['lyrics_stemmend'].apply(lambda text: lemmatize_words(text))\ntext.head()","d782a560":"#selection data\nsentiment = text[['lyrics_punctuation']]\nsentiment.head()","dcc628c7":"#create function to get subjectivity\ndef getSubjectivity(text):\n    return TextBlob(text).sentiment.subjectivity\n\n#create function to get polarity\ndef getPolarity(text):\n    return TextBlob(text).sentiment.polarity\n\n#apply function to data \nsentiment['subjectivity'] = sentiment['lyrics_punctuation'].apply(getSubjectivity)\nsentiment['polarity'] = sentiment['lyrics_punctuation'].apply(getPolarity)\nsentiment.head()","6472e31b":"#create function to get sentiment data\ndef getSentiment(score):\n    if score < 0:\n        return 'Negative'\n    elif score == 0:\n        return 'Neutral'\n    else:\n        return 'Positive'\n\n#apply function to data\nsentiment['sentiment'] = sentiment['polarity'].apply(getSentiment)\nsentiment.head()","df6a5b41":"#visualize track title\nplt.figure(figsize = (10,6))\ndf['track_title'].value_counts().sort_values().plot(kind = 'barh', color = 'orange')\nplt.title(\"Track Title of Arcane Soundtrack\")\nplt.xlabel(\"Count\")\nplt.ylabel(\"Track Title\")\nplt.show()","7ad42761":"#visualize artists\nplt.figure(figsize = (10,6))\ndf['artists'].value_counts().sort_values().plot(kind = 'barh', color = 'orangered')\nplt.title(\"Artists of Arcane Soundtrack\")\nplt.xlabel(\"Count\")\nplt.ylabel(\"Artists\")\nplt.show()","c1bb0819":"#group track title & instrumental\ntrack_instrumental = df.groupby(['track_title', 'instrumental']).size().reset_index(name = 'Count')\n\n#visualize track title ~ instrumental\nplt.figure(figsize = (10,6))\nchart = sns.barplot(data = track_instrumental, x = 'track_title', y = 'Count', hue = 'instrumental', palette  = 'Set2')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Track Title ~ Instrumental\")\nplt.xlabel(\"Track Title\")\nplt.ylabel(\"Count\")\nplt.show()","9d9c36e6":"#group artists & instrumental\nartist_instrumental = df.groupby(['artists', 'instrumental']).size().reset_index(name = 'Count')\n\n#visualize artists ~ instrumental\nplt.figure(figsize = (10,6))\nchart = sns.barplot(data = artist_instrumental, x = 'artists', y = 'Count', hue = 'instrumental')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Artists ~ Instrumental\")\nplt.xlabel(\"Artists\")\nplt.ylabel(\"Count\")\nplt.show()","f88707fb":"#visualize positive sentiment of lyrics\npositive = \" \".join(sentiment[sentiment.sentiment == 'Positive']['lyrics_punctuation'].values)\nw = WordCloud(width = 700, height = 400, random_state = 10, max_font_size = 100).generate(positive)\n\nplt.figure(figsize = (10,6))\nplt.imshow(w, interpolation = \"bilinear\")\nplt.title(\"Wordcloud of Positive Lyrics\")\nplt.axis('off')\nplt.show()","917d6ad4":"#visualize neutral sentiment of lyrics\nneutral = \" \".join(sentiment[sentiment.sentiment == 'Neutral']['lyrics_punctuation'].values)\nw = WordCloud(width = 700, height = 400, random_state = 10, max_font_size = 100, colormap = 'Set1').generate(neutral)\n\nplt.figure(figsize = (10,6))\nplt.imshow(w, interpolation = \"bilinear\")\nplt.title(\"Wordcloud of Neutral Lyrics\")\nplt.axis('off')\nplt.show()","68bf7a06":"#visualize negative sentiment of lyrics\nnegative = \" \".join(sentiment[sentiment.sentiment == 'Negative']['lyrics_punctuation'].values)\nw = WordCloud(width = 700, height = 400, random_state = 10, max_font_size = 100, colormap = 'Set2').generate(negative)\n\nplt.figure(figsize = (10,6))\nplt.imshow(w, interpolation = \"bilinear\")\nplt.title(\"Wordcloud of Negative Lyrics\")\nplt.axis('off')\nplt.show()","f1fce244":"#visualize sentiment\nplt.figure(figsize = (8,6))\nplt.xlabel('Sentiment')\nplt.ylabel('Count')\nsentiment['sentiment'].value_counts().plot(kind = 'bar', color = 'blueviolet')\nplt.title(\"Sentiment Analysis of Lyrics\")\nplt.show()","fd556fb7":"#handling categorical data\nfor i in df.columns.tolist():\n    df[i] = df[i].astype('category').cat.codes\n\ndf.head()","7bedcef9":"#split data\nX = df.drop('Act', axis = 1)\ny = df['Act']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","b5a059b8":"#setup arrays to store training and test accuracy\nneighbors = np.arange(1,9)\ntrain_accuracy = np.empty(len(neighbors))\ntest_accuracy = np.empty(len(neighbors))\n\nfor i,k in enumerate(neighbors):\n    knn = KNeighborsClassifier(n_neighbors = k)\n    knn.fit(X_train, y_train)\n    train_accuracy[i] = knn.score(X_train, y_train)\n    test_accuracy[i] = knn.score(X_test, y_test) ","b8213944":"#find good K-value from error rate\nerror_rate = []\n\nfor i in range(1,9):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    knn.fit(X_train, y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))\n    \nplt.figure(figsize = (10, 6))\nplt.plot(range(1,9), error_rate, color ='blue',\n                linestyle ='dashed', marker ='o',\n                markerfacecolor ='red', markersize = 10)\n\nplt.title('Find Error Rate from K-Value')\nplt.xlabel('K-Value')\nplt.ylabel('Error Rate')\nplt.show()","b6a23e70":"#visualize knn model for training and testing\nplt.figure(figsize = (8,6))\nplt.title('k-NN Validation Accuracy of Neighbors')\nplt.plot(neighbors, test_accuracy, label = 'Testing Accuracy', color = 'r')\nplt.plot(neighbors, train_accuracy, label = 'Training accuracy', color = 'b')\nplt.legend()\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.show()","52740aa6":"#build model\nknn = KNeighborsClassifier(n_neighbors = 3)\n%time knn.fit(X_train, y_train)\nknn.score(X_test, y_test)","09ec260f":"#prediction\ny_pred = knn.predict(X_test)\nprint(y_pred)","cf0f7712":"#report of MSE & RMSE\nmse = metrics.mean_squared_error(y_test, y_pred)\nprint('Mean Squared Error : '+ str(mse))\nrmse = math.sqrt(metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error : '+ str(rmse))","0c38c01e":"#confusion matrix\nmatrix = metrics.confusion_matrix(y_test, y_pred)\nprint(matrix)\n\n#heatmap matrix\nplt.figure(figsize = (8,6))\nsns.heatmap(matrix, annot = True, fmt = '.0f', cmap = 'viridis')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Prediction\")\nplt.ylabel(\"Actual\")\nplt.show()","b8dbe978":"#classification report\nreport = metrics.classification_report(y_test, y_pred)\nprint(report)","f2a5e39e":"## Stemming","fbefc226":"## Lower Casing","59eaa29b":"## Removal Stopwords","d950e948":"# Data Extraction","a90b65e5":"# Natural Language Processing","918acbfb":"## Tokenization","e23d0891":"## Removal Punctuation","c9ec7d0a":"# Visualization","50a508df":"# K-Nearest Neighbors Model","eceb0e66":"## Lemmatization","5b0b4bf2":"# Arcana Soundtrack Lyrics Act Prediction"}}