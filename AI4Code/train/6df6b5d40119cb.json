{"cell_type":{"bd02dd0b":"code","199e4805":"code","f108bafa":"code","5d31878a":"code","ea5dd914":"code","f3d94ac0":"code","6dca0c87":"code","81435427":"code","18a0fd9b":"code","085097a1":"code","8f5cd45e":"code","35b959b5":"code","e9f6f68c":"code","a1cb5187":"code","4e3b24f2":"code","39fc9c4f":"code","a0a8829e":"code","b19b4884":"code","c68ffca7":"code","21f4e6cd":"code","bb4f6fb6":"code","5ed7b61d":"code","25bd8e45":"code","284ecc41":"code","28c8e024":"code","2434c0d7":"code","69f4cdb8":"code","bd3d8b08":"code","1a6bfb31":"code","16f34dbf":"code","afb5d606":"code","f76a1f1c":"code","3122b973":"code","b2c9a206":"code","1578c696":"code","052966f1":"code","49f28094":"code","149dc4cb":"code","ef962032":"code","d71a5ec4":"code","a13cec50":"code","02f82663":"code","049db79e":"code","2add5541":"code","c81c449a":"code","2f349643":"code","2399b671":"code","1f161b2c":"code","79bdda5d":"code","173fd3e1":"code","22ce6460":"code","20447591":"code","bc66a9c9":"code","df628b6d":"code","d4ff1efa":"code","5eef095a":"code","32b41831":"code","09c2c6e7":"code","359429a0":"code","7025a928":"code","3202bcfd":"code","2971bb08":"code","18d4930a":"code","2833c128":"code","36a9537e":"code","4f5146ce":"code","987f1feb":"code","7ad1708e":"code","eb9a290d":"code","bcf0931b":"code","e210ccca":"code","85fa1c63":"code","f4e0268b":"code","dc59cbc7":"code","c157561e":"code","f9943f7c":"code","624a70ab":"code","ade11c1c":"code","d99e191c":"code","6d6ead44":"code","ce9fb7af":"code","9f8be15c":"code","d948f454":"code","34f34e13":"code","c675482f":"code","f3c38bbd":"code","8f5e8ae9":"code","280e7b5d":"code","5b516b9d":"code","0cab37b2":"code","738c9559":"code","b949e68d":"code","d3de5d97":"code","aadd5093":"code","03bf357c":"code","7644c5ba":"code","a2a2387c":"code","74ff47a4":"code","be6162b7":"code","3441109f":"code","a969246d":"code","ba0bd25a":"markdown","d347519f":"markdown","982f7d2c":"markdown","8c2d21d7":"markdown","72ddd393":"markdown","cb918eea":"markdown","17fa4e33":"markdown","f6c40354":"markdown","ab18b2c6":"markdown","cfda26a0":"markdown","0d097cdc":"markdown","43cbfa9d":"markdown","a844de72":"markdown","da0a699a":"markdown","f36d808f":"markdown","d5093e76":"markdown","33360f74":"markdown","a2eac1c0":"markdown","35dac14b":"markdown","14ddc929":"markdown","26b7382e":"markdown","70e436dc":"markdown","f7f6893d":"markdown","0f173a4e":"markdown","4f9b96d8":"markdown","074aceeb":"markdown","770123a3":"markdown","be9eec8c":"markdown","8696ad9a":"markdown","4174ff1c":"markdown","419a366b":"markdown","47e8ec35":"markdown","fe7ca59f":"markdown","2785f62d":"markdown","4ca7dffd":"markdown"},"source":{"bd02dd0b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom datetime import datetime\nfrom dateutil.parser import parse\nimport folium                       #This is a Python Library for visualizing geospatial data.\nimport re","199e4805":"# Loading station.csv file\n\ndf_station= pd.read_csv('..\/input\/cycle-share-dataset\/station.csv')","f108bafa":"df_station.head()","5d31878a":"# Analyzing the Data Types of the Fields\n\ndf_station.info()","ea5dd914":"# Checking for missing values.\n\n(df_station.isnull().sum()\/len(df_station))*100","f3d94ac0":"# There are missing values in the fields \"modification_date\" and \"decommission_date\".\n# 70.6% and 93.1% of missing values in both the above fields respectively.\n# So, let's drop the both the fields for Visualization purposes.\n\ndf_station.drop(['modification_date','decommission_date'],axis=1,inplace=True)","6dca0c87":"# Listing the columns in the Dataset.\n\ndf_station.columns","81435427":"#Analyzing the values of the Fields.\n\ndf_station.describe()","18a0fd9b":"# Let's convert install_date (which is an Object Type) to Datetime.\ndf_station['install_date']=pd.to_datetime(df_station['install_date'])\n\n# Extraction only the date.\ndf_station['install_date']=df_station['install_date'].dt.date  ","085097a1":"# Visualizing the Locations of the Cycle Stations using folium Library.\n# It's very easy to use folium.\n\n# 1. Creating a Basic Map of Seattle by providing the respective lat & long values of the City to the \n# Map method.\n\nmap_stations=folium.Map(location=[47.608013,  -122.335167],zoom_start=12)\nmap_stations","8f5cd45e":"# 2. We can add a location marker to the map by using add_to() method.\n\nfolium.Marker([47.615486,-122.318245]).add_to(map_stations)\nmap_stations","35b959b5":"# 3. Let's add all the location data (lat & long) of all the Stations to the map.\n\nlat = df_station.lat.values\n\nlong = df_station.long.values\n\nname = df_station.name.values  # Station names\n\nname=name.tolist()  # converting name (which is in array form) to list\n\nprint(type(name))","e9f6f68c":"# Adding all the locations and stations to the map\n\nfor la,lo,nm in zip(lat,long,name):\n    folium.Marker([la,lo],popup=nm).add_to(map_stations)\nmap_stations","a1cb5187":"df_station.columns","4e3b24f2":"# Determining the date on which most stations were installed.\n\nplt.figure(figsize=(16,4))\ng=sns.countplot(x='install_date', data=df_station)\nfor i,p in zip(g.get_xticklabels(),g.patches):\n    i.set_rotation(45)\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 4), \n                   textcoords = 'offset points',\n                   rotation='horizontal')\nplt.xlabel('Date of Installation', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.title('Most No of Stations Installed', fontsize=18)","39fc9c4f":"# Let's determine the total docks added or removed from all stations.\n\ndf_station['DocksCount']= df_station['current_dockcount'] - df_station['install_dockcount']","a0a8829e":"# Determining total docks added and removed till present.\n\nplt.figure(figsize=(20,6))\ng=sns.barplot(x='station_id', y='DocksCount', data=df_station, order=df_station.sort_values(by='DocksCount', ascending=False).station_id)\nfor i,p in zip(g.get_xticklabels(),g.patches):\n    i.set_rotation(90)\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 6), \n                   textcoords = 'offset points',\n                   rotation='horizontal')\nplt.xlabel('Station IDs', fontsize=15)\nplt.ylabel('Docks Status', fontsize=15)\nplt.title('Total Docks Added\/ Removed', fontsize=18)","b19b4884":"# Loading Trip.csv file.\n\ndf_trip=pd.read_csv('..\/input\/cycle-share-dataset\/trip.csv',error_bad_lines=False)","c68ffca7":"df_trip.head()","21f4e6cd":"# Let's drop the trip_id field.\n\ndf_trip=df_trip.drop('trip_id',axis=1)","bb4f6fb6":"# Analyzing the Data Types of the Fields\ndf_trip.info()","5ed7b61d":"# Checking for missing values.\n\n(df_trip.isnull().sum()\/len(df_trip))*100","25bd8e45":"# Let's fill the missing values with the previous field values in the dataframe using ffill (forward method) and bfill (backward method) \n\ndf_trip = df_trip.fillna(method='ffill').fillna(method='bfill')","284ecc41":"df_trip.info()","28c8e024":"# Let's convert all dates in Object types into datetypes.\ndf_trip['starttime']=pd.to_datetime(df_trip['starttime'])\ndf_trip['stoptime']=pd.to_datetime(df_trip['stoptime'])","2434c0d7":"# Let's convert birthyear to Integer.\ndf_trip['birthyear']=df_trip['birthyear'].apply(lambda x:int(x))","69f4cdb8":"df_trip.birthyear.dtypes","bd3d8b08":"# Age Calculation.\n\ndf_trip['Age']=df_trip['stoptime'].dt.year - df_trip['birthyear']","1a6bfb31":"df_trip.columns","16f34dbf":"# Determining the Top 10 Source Stations.\n\nplt.figure(figsize=(15,4))\ng=sns.countplot(x='from_station_name', data=df_trip, order= df_trip.from_station_name.value_counts().head(10).index)\nfor i,p in zip(g.get_xticklabels(),g.patches):\n    i.set_rotation(90)\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 4), \n                   textcoords = 'offset points',\n                   rotation='horizontal')\nplt.xlabel('Source Station Names', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.title('Top 10 Source Stations', fontsize=18)","afb5d606":"# Determining the Top 10 Destination Stations.\n\nplt.figure(figsize=(15,4))\ng=sns.countplot(x='to_station_name', data=df_trip, order= df_trip.to_station_name.value_counts().head(10).index)\nfor i,p in zip(g.get_xticklabels(),g.patches):\n    i.set_rotation(90)\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 4), \n                   textcoords = 'offset points',\n                   rotation='horizontal')\nplt.xlabel('Destination Station Names', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.title('Top 10 Destination Stations', fontsize=18)","f76a1f1c":"plt.figure(figsize=(18,6))\ng=sns.countplot(x='Age', data=df_trip)\nfor i,p in zip(g.get_xticklabels(),g.patches):\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 20), \n                   textcoords = 'offset points',\n                   rotation='vertical')\nplt.xlabel('Age', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.title('Age Analysis', fontsize=18)","3122b973":"# Let's check for Outliers in tripduration field.\n\nsns.boxplot(df_trip.tripduration)","b2c9a206":"# 9.4% Outliers in tripduration field.\n# Converting tripduration to Minutes.\n\ndf_trip['tripduration(in Minutes)']=df_trip['tripduration'].apply(lambda x: round((x\/60),2))","1578c696":"# Let's try to clip the Outliers by Identifying the Quartile Range.\n\nOutliers_tripduration_mins = df_trip['tripduration(in Minutes)']\n\nOutliers_tripduration_mins_Q1 = Outliers_tripduration_mins.quantile(0.25)  # 1st Quartile\n\nOutliers_tripduration_mins_Q3 = Outliers_tripduration_mins.quantile(0.75)  # 3rd Quartile \n\nOutliers_tripduration_mins_IQR= Outliers_tripduration_mins_Q3-Outliers_tripduration_mins_Q1      # Inter Quartile Range\n\nOutliers_tripduration_mins_Lowerrange=Outliers_tripduration_mins_Q1-(1.5 * Outliers_tripduration_mins_IQR)\n\nOutliers_tripduration_mins_Upperrange=Outliers_tripduration_mins_Q3+(1.5 * Outliers_tripduration_mins_IQR)\n\n\nprint(Outliers_tripduration_mins_Q1, \" -> 1st Quartile\")\nprint(Outliers_tripduration_mins_Q3, \" -> 3rd Quartile\")\nprint(Outliers_tripduration_mins_IQR, \" -> Inter Quartile Range\")\nprint(Outliers_tripduration_mins_Lowerrange, \" -> Outliers below the lower Range\")\nprint(Outliers_tripduration_mins_Upperrange, \" -> Outliers Above the Upper Range\")","052966f1":"Outliers_tripduration_mins_outliers=df_trip[(Outliers_tripduration_mins < Outliers_tripduration_mins_Lowerrange) | \n                                       (Outliers_tripduration_mins > Outliers_tripduration_mins_Upperrange)]\n\nprint((len(Outliers_tripduration_mins_outliers)\/len(df_trip.tripduration))*100,\"%\")","49f28094":"# 9.4% Outliers exist.\n# Let's Analyze Trip duration excluding the Outliers.\n\nTripDuration_Analysis=df_trip[df_trip['tripduration(in Minutes)'] < 36.8]","149dc4cb":"plt.figure(figsize=(15,6))\nsns.distplot(TripDuration_Analysis['tripduration(in Minutes)'])\nplt.xlabel('Trip Duration (in Minutes)', fontsize=15)\nplt.ylabel('Age Density', fontsize=15)\nplt.title('Age Analysis', fontsize=18)","ef962032":"# User Types Analysis\n\ng=sns.countplot(x='usertype',data=df_trip)\nfor p in g.patches:\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 4), \n                   textcoords = 'offset points')\nplt.xlabel('User Type', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.title('User Type Analysis', fontsize=18)","d71a5ec4":"# Gender Analysis\n\ng=sns.countplot(x='gender',data=df_trip)\nfor p in g.patches:\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 4), \n                   textcoords = 'offset points')\nplt.xlabel('Gender', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.title('Gender Analysis', fontsize=18)","a13cec50":"g=sns.countplot(x='usertype',data=df_trip,hue='gender')\nfor p in g.patches:\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 4), \n                   textcoords = 'offset points')\nplt.xlabel(\"User Types w.r.t Gender\", fontsize=15)\nplt.ylabel(\"Count\", fontsize=15)\nplt.title(\"User Types Analysis w.r.t Gender\", fontsize=18)","02f82663":"Male_Cyclists=df_trip[df_trip.gender == \"Male\"]","049db79e":"Male_Cyclists=Male_Cyclists[Male_Cyclists['tripduration(in Minutes)'] < 36.8]  # Excluding Outliers\n\nplt.figure(figsize=(15,6))\nsns.distplot(Male_Cyclists['tripduration(in Minutes)'])\nplt.xlabel('Trip Duration (in Minutes)', fontsize=15)\nplt.ylabel('Density', fontsize=15)\nplt.title('Trip Duration Analysis', fontsize=18)","2add5541":"# Age Analysis of Male Cyclists\n\nplt.figure(figsize=(18,6))\ng=sns.countplot(x='Age', data=Male_Cyclists)\nfor i,p in zip(g.get_xticklabels(),g.patches):\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 20), \n                   textcoords = 'offset points',\n                   rotation='vertical')\nplt.xlabel('Age', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.title('Age Analysis (Males)', fontsize=18)","c81c449a":"# User types Analysis of Males\n\ng=sns.countplot(x='usertype', data=Male_Cyclists)\nfor i,p in zip(g.get_xticklabels(),g.patches):\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 5), \n                   textcoords = 'offset points',\n                   rotation='horizontal')\nplt.xlabel('User Type', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.title('User Type Analysis (Males)', fontsize=18)","2f349643":"# Let's Analyze Age w.r.t trip duration.\nplt.figure(figsize=(18,6))\nsns.barplot(x='Age', y='tripduration(in Minutes)', data=Male_Cyclists)\n\nplt.xlabel('Age', fontsize=15)\nplt.ylabel('Trip Duartion (in Minutes)', fontsize=15)\nplt.title('Age Vs Trip Duration (Males)', fontsize=18)","2399b671":"Female_Cyclists=df_trip[df_trip.gender == \"Female\"]","1f161b2c":"Female_Cyclists=Female_Cyclists[Female_Cyclists['tripduration(in Minutes)'] < 36.8]  # Excluding Outliers\n\nplt.figure(figsize=(15,6))\nsns.distplot(Female_Cyclists['tripduration(in Minutes)'])\nplt.xlabel('Trip Duartion (in Minutes)', fontsize=15)\nplt.ylabel('Density', fontsize=15)\nplt.title('Age Vs Trip Duration (Males)', fontsize=18)","79bdda5d":"# Age Analysis of Female Cyclists\n\nplt.figure(figsize=(20,6))\ng=sns.countplot(x='Age', data=Female_Cyclists)\nfor i,p in zip(g.get_xticklabels(),g.patches):\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 20), \n                   textcoords = 'offset points',\n                   rotation='vertical')\nplt.xlabel('Age', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.title('Age Analysis (Females)', fontsize=18)","173fd3e1":"# User types Analysis of Females\n\ng=sns.countplot(x='usertype', data=Female_Cyclists)\nfor i,p in zip(g.get_xticklabels(),g.patches):\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 5), \n                   textcoords = 'offset points',\n                   rotation='horizontal')\nplt.xlabel('User Type', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.title('User Type Analysis (Females)', fontsize=18)","22ce6460":"# Let's Analyze Age w.r.t trip duration.\nplt.figure(figsize=(18,6))\nsns.barplot(x='Age', y='tripduration(in Minutes)', data=Female_Cyclists)\n\nplt.xlabel('Age', fontsize=15)\nplt.ylabel('Trip Duration (in Minutes)', fontsize=15)\nplt.title('Age Vs Trip Duration (Females)', fontsize=18)","20447591":"# Loading weather.csv file\n\ndf_weather=pd.read_csv('..\/input\/cycle-share-dataset\/weather.csv')","bc66a9c9":"df_weather.head()","df628b6d":"df_weather.columns","d4ff1efa":"df_weather.info()","5eef095a":"(df_weather.isnull().sum()\/len(df_weather))*100","32b41831":"\ndf_weather[df_weather.Mean_Temperature_F.isnull()]","09c2c6e7":"# determining the mean value in the field\n\ndf_weather.Mean_Temperature_F.mean()","359429a0":"# filling the missing value with the mean value.\ndf_weather['Mean_Temperature_F']=df_weather['Mean_Temperature_F'].fillna(df_weather.Mean_Temperature_F.mean())","7025a928":"df_weather['Max_Gust_Speed_MPH'].head()","3202bcfd":"# Let's replace the \"Hyphens\" with nan values.\n\nimport math\n\ndf_weather.Max_Gust_Speed_MPH = df_weather.Max_Gust_Speed_MPH.replace({\"-\" : math.nan})","2971bb08":"df_weather['Max_Gust_Speed_MPH'].head()","18d4930a":"# Let's fill the nan values using forward & backward filling methods.\n\ndf_weather['Max_Gust_Speed_MPH']= df_weather['Max_Gust_Speed_MPH'].fillna(method='ffill').fillna(method='bfill')","2833c128":"df_weather.Events.value_counts()","36a9537e":"# Let's replace field values having 'Comma' with 'Hyphen'.\n\ndf_weather.Events=df_weather.Events.replace('Fog , Rain', 'Fog-Rain')\ndf_weather.Events=df_weather.Events.replace('Rain , Thunderstorm', 'Rain-Thunderstorm')\ndf_weather.Events=df_weather.Events.replace('Rain , Snow', 'Rain-Snow')","4f5146ce":"df_weather.Events.value_counts()","987f1feb":"# As there are a lot of nan values, let's fill them with \"No-Event\".\n\ndf_weather.Events = df_weather.Events.fillna(\"No-Event\")","7ad1708e":"df_weather.info()","eb9a290d":"# Converting Date to datetype.\ndf_weather['Date'] = pd.to_datetime(df_weather['Date'])","bcf0931b":"# Converting float to int type.\n\ndf_weather['Mean_Temperature_F'] = df_weather['Mean_Temperature_F'].apply(lambda x: int(x))","e210ccca":"# Converting object to int type.\n\ndf_weather.Max_Gust_Speed_MPH = df_weather.Max_Gust_Speed_MPH.apply(lambda x: int(x))","85fa1c63":"# Converting object to String type.\n\ndf_weather.Events = df_weather.Events.astype('string')","f4e0268b":"# Let's make a column named \"Quarter\" to analyse Precipitation Data on a quarterly basis.\n\ndf_weather['Quarter']=df_weather['Date'].dt.to_period('Q')\ndf_weather['Quarter'].value_counts().sort_index()","dc59cbc7":"plt.figure(figsize=(20,6))\nsns.barplot(x='Quarter', y='Precipitation_In', data=df_weather)\n\nplt.xlabel('Quarter', fontsize=15)\nplt.ylabel('Precipitation', fontsize=15)\nplt.title('Precipitation on a Quarterly basis', fontsize=18)","c157561e":"# let's create \"Year\", \"Month\" & \"Day\" columns for detail analysis.\n\ndf_weather['Year'] = pd.DatetimeIndex(df_weather.Date).year\ndf_weather['Month'] = pd.DatetimeIndex(df_weather.Date).month\ndf_weather['WeekDay'] = pd.DatetimeIndex(df_weather.Date).weekday","f9943f7c":"df_weather[df_weather.Month == 1]['Date'].head(30)","624a70ab":"df_weather.Month=df_weather.Month.map({1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',7:'Jul',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'})\ndf_weather.WeekDay=df_weather.WeekDay.map({0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'})","ade11c1c":"index=[0,1,2]\nx_val=[\"Year\",\"Month\",\"WeekDay\"]\ny_val=\"Precipitation_In\"\ntitle=[\"Yearly\",\"Monthly\",\"Daily\"]\n\nfig, axes = plt.subplots(1, 3, figsize=(20, 6), sharey=True)\nfig.suptitle('Precipitation Analysis', fontsize = 18)\n\nfor index,x_val,title in zip(index,x_val,title):\n    b=sns.barplot(ax=axes[index], x=x_val, y=y_val, data=df_weather)\n    b.set_xlabel(x_val,fontsize=15)\n    b.set_ylabel(y_val,fontsize=15)\n    axes[index].set_title(title + \" Precipitation\", fontsize = 15)","d99e191c":"# creating 2 new columns named \"From_Station_ID\" & \"To_Station_ID\" in \"df_station.csv\"\n\ndf_station['from_station_id']=df_station.station_id\ndf_station['to_station_id']=df_station.station_id","6d6ead44":"#creating a dataframe with \"lat\", \"long\" & 'from_station_id' fields\n\ndf_from_station=df_station[['lat','long','from_station_id']]","ce9fb7af":"# Merging \"df_from_station\" with \"df_trip\".\n\ndf_trip_updated1=pd.merge(df_trip,df_from_station,on='from_station_id')","9f8be15c":"#creating a dataframe with \"lat\", \"long\" & 'to_station_id' fields\n\ndf_to_station=df_station[['lat','long','to_station_id']]","d948f454":"# Merging \"df_to_station\" with \"df_trip_updated1\".\n\ndf_trip_updated2=pd.merge(df_trip_updated1,df_to_station,on='to_station_id')","34f34e13":"df_trip_updated2.columns","c675482f":"# converting \"starttime\" field to list in order to extract Date.\n\ndate_str=list(df_trip_updated2.starttime)","f3c38bbd":"# Extracting Date from \"date_str\".\n\ndate_str=[datetime.strftime(x, '%Y-%m-%d') for x in date_str]","8f5e8ae9":"# Updating \"df_trip_updated2\".\n\ndf_trip_updated2['Date']=date_str","280e7b5d":"# Converting Object to datetime format.\n\ndf_trip_updated2['Date']=pd.to_datetime(df_trip_updated2['Date'])","5b516b9d":"# Merging \"df_trip_updated2\" with \"df_weather\".\n\ndf_merged=pd.merge(df_trip_updated2,df_weather,on='Date')","0cab37b2":"df_merged.columns","738c9559":"df_merged.info()","b949e68d":"df_merged.describe()","d3de5d97":"# Let's create a column named \"Hour\" to analyze hourly activity.\n\ndf_merged['Hour'] = pd.DatetimeIndex(df_merged.starttime).hour","aadd5093":"plt.figure(figsize=(16,5))\ng=sns.countplot(x='Year',data=df_merged,hue='gender')\nfor p in g.patches:\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 4), \n                   textcoords = 'offset points',\n                   rotation='horizontal')\nplt.xlabel(\"Year\",fontsize=15)\nplt.ylabel(\"Count\",fontsize=15)\nplt.title(\"Yearly Analysis of Cyclists W.r.t Gender\",fontsize=18)","03bf357c":"plt.figure(figsize=(16,5))\ng=sns.countplot(x='Month',data=df_merged,hue='gender')\nfor p in g.patches:\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 4), \n                   textcoords = 'offset points',\n                   rotation='horizontal')\nplt.xlabel(\"Month\",fontsize=15)\nplt.ylabel(\"Count\",fontsize=15)\nplt.title(\"Monthly Analysis of Cyclists W.r.t Gender\",fontsize=18)","7644c5ba":"plt.figure(figsize=(16,5))\ng=sns.countplot(x='WeekDay',data=df_merged,hue='gender')\nfor p in g.patches:\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 4), \n                   textcoords = 'offset points',\n                   rotation='horizontal')\nplt.xlabel(\"WeekDay\",fontsize=15)\nplt.ylabel(\"Count\",fontsize=15)\nplt.title(\"Weekly Analysis of Cyclists W.r.t Gender\",fontsize=18)","a2a2387c":"plt.figure(figsize=(18,5))\ng=sns.countplot(x='Hour',data=df_merged,hue='gender')\nfor p in g.patches:\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 20), \n                   textcoords = 'offset points',\n                   rotation='vertical')\nplt.xlabel(\"Hour\",fontsize=15)\nplt.ylabel(\"Count\",fontsize=15)\nplt.title(\"Hourly Analysis of Cyclists W.r.t Gender\",fontsize=18)","74ff47a4":"# Let's categorize the Hours to \"Morning\", \"Afternoon\", \"Evening\", \"Night\" & \"Mid-night\" to get a better understanding.\n\ndef update_hour(hour):\n    if(hour in range(0,5)):\n        return \"Mid-night\"\n    elif(hour in range(5,11)):\n        return \"Morning\"\n    elif(hour in range(11,16)):\n        return \"Afternoon\"\n    elif(hour in range(16,20)):\n        return \"Evening\"\n    elif(hour in range(20,24)):\n        return \"Night\"","be6162b7":"df_merged['Time_of_day']=df_merged['Hour'].apply(update_hour)","3441109f":"plt.figure(figsize=(18,5))\ng=sns.countplot(x='Time_of_day',data=df_merged,hue='gender')\nfor p in g.patches:\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 5), \n                   textcoords = 'offset points',\n                   rotation='horizontal')\nplt.xlabel(\"Time of the Day\",fontsize=15)\nplt.ylabel(\"Count\",fontsize=15)\nplt.title(\"Daily Analysis of Cyclists W.r.t Gender\",fontsize=18)","a969246d":"plt.figure(figsize=(18,5))\ng=sns.countplot(x='Events',data=df_merged,hue='gender')\nfor p in g.patches:\n    g.annotate(format(p.get_height()), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 5), \n                   textcoords = 'offset points',\n                   rotation='horizontal')\nplt.xlabel(\"Events\",fontsize=15)\nplt.ylabel(\"Count\",fontsize=15)\nplt.title(\"Cycle Usage Analysis during different Weather Situations\",fontsize=18)","ba0bd25a":"Users have been using Cycle Services starting from Age 16 till the age of 85! and most users are in the range of 24 to 34 Years (Above 10000 count) with 28 being the highest.","d347519f":"Most of the female Cyclists' trip duration varies from 5 to 20 mins.","982f7d2c":"Let's Analyse the Female Users Data","8c2d21d7":"**Loading all the Required Libraries**","72ddd393":"There's high activity in the Evening (from 4 P.M to 6 P.M) & in the Morning (from 8 A.M to9 A.M).There is some Activity during mid-night too!.","cb918eea":"Handling Missing Values","17fa4e33":"There are missing values in the fields \"gender\" and \"birthyear\".\n36.7% of missing values in both the above fields respectively.","f6c40354":"From the above plots, we can see that the rainfall has reduced from 2014 to 2016.\nRainfall is high at the start of the year & during the year end.\nDaily rainfall is high on Fridays & Saturdays","ab18b2c6":"**VISUALIZATION**","cfda26a0":"The weekdays have consistent Nos compared to the weekends.","0d097cdc":"Excluding the Outliers, the duration of most Cyclists ranges from 3 to 15 mins.","43cbfa9d":"On 13\/10\/2014, 50 Stations were installed.","a844de72":"Permanent Memberships are more in males.","da0a699a":"****Handling Missing values****","f36d808f":"Let's Analyse the male Users Data","d5093e76":"We can see that precipitation is high at the year end and the beginning of the next year. i.e., during Quarter 4 & Quarter 1.","33360f74":"The duration of most of the Cyclists varies from 10 to 12.5 mins and decreases drastically above 72 yrs except some variations in between.","a2eac1c0":"Data Fields:\n\n1. trip_id -> Trip ID\n2. starttime -> Starting time of the trip.\n3. stoptime -> Ending time of the trip.\n4. bikeid -> Cycle ID.\n5. tripduration -> Duration of the Trip (in Seconds).\n6. from_station_name -> Source Station Name.\n7. to_station_name -> Destination Station Name.\n8. from_station_id -> Source Station ID.\n9. to_station_id -> Destination Station ID.\n10. usertype -> Type of User.\n11. gender -> Gender of the User.\n12. birthyear -> Birth Year of the User.","35dac14b":"****If you like my Kernel, Please Upvote :). Please feel free to provide suggestions in the comments which helps me to improve myself. Thank you :)****","14ddc929":"There are 3 Datasets:\n1. station.csv\n2. trip.csv\n3. weather.csv","26b7382e":"****Handling Missing values****","70e436dc":"It can be seen that there are fewer Cyclists in September than compared with other months. As it is winter from December to February in Seattle, the no of Cyclists are low which is obvious.As it's peek summer during July & August, more Cyclists hit the road.","f7f6893d":"As we can see, Most Cyclists Cycle during the Afternoons and there are Mid-night Cyclists too!.","0f173a4e":"There are missing values in the fields \"Max_Gust_Speed_MPH\" and \"Events\".\n26.8% and 52.3% of missing values in both the above fields respectively and 1 missing value in \"\"Mean_Temperature_F.","4f9b96d8":"There are obviously more Cyclists during no weather phenomena and also during Rains.","074aceeb":"Most Female Cyclists' Age is varying from 24 to 34 after which there are ups & downs. 51 & 65 yrs of age are Cycling more.","770123a3":"On an Avg, there are 16 Docks at every Station.\nMinimum no of Docks at a Station is 0 and Maximum no is 26.","be9eec8c":"Most Cyclists are in the range of 23 to 35 and after that there is a decrease in the no of users.","8696ad9a":"Most of their trip varies between 11 to 15 mins and longest duration (half an hr) is of an 85 yr old women's!.","4174ff1c":"Permanent memberships are more w.r.t females too.","419a366b":"As we now have the wholw dataset, let's start analyzing it.","47e8ec35":"# Visualization and Exploratory Data Analysis of Cycle-Share-Dataset","fe7ca59f":"Males are the highest members w.r.t both permanent & Short-term memberships.","2785f62d":"So, highest No of docks removed were 20 from Station SLU-18 & most Docks added were to the Station SLU-15.","4ca7dffd":"Let's merge all 3 datasets for further analysis"}}