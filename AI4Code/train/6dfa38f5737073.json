{"cell_type":{"e40c4d3c":"code","c2c7c2db":"code","a532fa33":"code","ea1f660f":"code","c7405234":"code","16e04986":"code","2f72d40f":"code","a4a5700a":"code","33913faf":"code","099ee3fd":"code","51277a0d":"code","e00b88ce":"code","8e984af7":"code","8cfe7fa3":"code","8d0c4d3e":"code","5b165f3f":"code","a1463afc":"code","c5239ea7":"code","cc01f045":"code","b0112dbf":"code","d68c3eee":"code","08aecdfd":"code","d0eea463":"code","572af876":"code","10a626a2":"markdown","0971dfc1":"markdown","1dd4a087":"markdown","45ebef4a":"markdown","3c9ec837":"markdown","491d89c4":"markdown","d7ef6e5a":"markdown","fe4f4c9a":"markdown","19eee924":"markdown","09283ae3":"markdown","6cac7f7d":"markdown","54950ef9":"markdown","445fa3e9":"markdown","76e1d5e9":"markdown","379ca55c":"markdown","b654414b":"markdown","0d01694c":"markdown","9468ff44":"markdown","f3667873":"markdown","7ca76e12":"markdown","3721738d":"markdown","2f67247c":"markdown","22b1bfc1":"markdown","553949ca":"markdown","0de115f7":"markdown","842dcf38":"markdown","a2fba901":"markdown","373b5ccd":"markdown","adef2bfc":"markdown","36d0d02c":"markdown","3cb90383":"markdown","f6334e5c":"markdown","69822083":"markdown","1643393c":"markdown","4b40b884":"markdown","b69583c8":"markdown","194173fd":"markdown","c25c7920":"markdown","c305f89c":"markdown","12b1cc8c":"markdown","94cebd9a":"markdown","7f9f5cf4":"markdown","2da755e7":"markdown","fa4f3c86":"markdown","b832caa0":"markdown","de167ca3":"markdown","ba33caff":"markdown","827fb443":"markdown"},"source":{"e40c4d3c":"import warnings\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nwarnings.filterwarnings(\"ignore\")\npd.set_option(\"float_format\", \"{:.5f}\".format)","c2c7c2db":"fig = plt.figure()","a532fa33":"fig = plt.figure()\n\nax1 = fig.add_axes()\nax1","ea1f660f":"fig, ax = plt.subplots()","c7405234":"fig, ax = plt.subplots()\n\n# Create the data to plot\nX = np.linspace(0.5, 3.5, 100)\nY1 = 3 + np.cos(X)\nY2 = 1 + np.cos(1 + X \/ 0.75) \/ 2\nY3 = np.random.uniform(Y1, Y2, len(X))\n\nax.scatter(X, Y3)\nax.plot(X, Y1)\nax.plot(X, Y2);","16e04986":"axes_list = fig.get_axes()\naxes_list","2f72d40f":"ax = axes_list[0]","a4a5700a":"plt.setp(fig)","33913faf":"plt.setp(fig, \"size_inches\")","099ee3fd":"plt.setp(fig, size_inches=(9, 6))","51277a0d":"fig.get_figure()","e00b88ce":"plt.setp(ax)","8e984af7":"plt.getp(ax, \"xlim\")","8cfe7fa3":"plt.setp(\n    ax,\n    xlabel=\"Simple x range\",\n    ylabel=\"Simply y range\",\n    title=\"Meaningless jumble of couple of cosines\",\n    xlim=(0, 4),\n    ylim=(0, 4.5),\n)","8d0c4d3e":"fig.get_figure()","5b165f3f":"import matplotlib.patches as patches\n\ndir(patches)","a1463afc":"fig, ax = plt.subplots()\n\nplt.setp(fig, size_inches=(9, 6))\n\n# Create the data to plot\n...\n\nax.scatter(X, Y3)\nax.plot(X, Y1)\nax.plot(X, Y2)\n\nplt.setp(\n    ax,\n    xlabel=\"Simple x range\",\n    ylabel=\"Simply y range\",\n    title=\"Meaningless jumble of couple of cosines\",\n    xlim=(0, 4),\n    ylim=(0, 4.5),\n);","c5239ea7":"ax.get_children()","cc01f045":"# Look at what params we want\n# plt.setp(ax.get_children()[0])\n\nplt.setp(ax.get_children()[0], edgecolor=\"red\", facecolor=\"red\", sizes=[40])","b0112dbf":"fig.get_figure()","d68c3eee":"for spine in ax.get_children()[3:7]:\n    plt.setp(spine, edgecolor=\"cyan\", lw=3)","08aecdfd":"fig.get_figure()","d0eea463":"fig, ax = plt.subplots()\n\n# Create the data to plot\nX = np.linspace(0.5, 3.5, 100)\nY1 = 3 + np.cos(X)\nY2 = 1 + np.cos(1 + X \/ 0.75) \/ 2\nY3 = np.random.uniform(Y1, Y2, len(X))\n\n# Extract into separate variables\ndots = ax.scatter(X, Y3)\nline1 = ax.plot(X, Y1)\nline2 = ax.plot(X, Y2);","572af876":"type(dots), type(line1[0])","10a626a2":"We see our lines. We also see four spines, which are also separate classes. The X and Y-axis objects are also visible along with the first element, which we haven't seen before.\n\n`PathCollection` represents the groups of dots. So, let's extract it and give the dots a few customizations:","0971dfc1":"# Matplotlib was created by artists","1dd4a087":"In the list we see a little function called `get_axes`, so we'll use it.","45ebef4a":"As you can see, we have got everything we need to create histograms, scatterplots, boxplots, and line plots. They all can be made using patches like circles, rectangles, polygons, and lines.\n\n![](https:\/\/miro.medium.com\/max\/636\/1*TXy0pd2BiktnRYMe0nqN-A.png)\n<figcaption style=\"text-align: center;\">\n    <strong>\n        Full image can be found \n        <a href='https:\/\/matplotlib.org\/stable\/_images\/inheritance-50f63fede88c32059ff6460c4a9c89a5f3850a4a.png'>here from the docs.<\/a>\n    <\/strong>\n<\/figcaption>","3c9ec837":"# Breaking down the plot components and their components and their components","491d89c4":"We will start by choosing a unified approach to doing tasks. There are many ways to do a single one, so it is essential to stick to only one style and master it.\n\nThe workflow I use to create a plot and customize it is as follows:\n1. Create the plot itself with basic elements and low customization.\n2. Find out the weaknesses of the plot and make a note of the components you want to improve.\n3. Isolate those weak components with relevant Matplotlib functions.\n4. Tweak them until you are satisfied, using the swiss army knife of Matplotlib (more on that later).\n5. Save or display the plot.\n\nWe will learn how to do each step in detail. I guarantee you that this framework works for almost any type of plot you create and customization you want to make.","d7ef6e5a":"We want to change the axis labels, limits, the title, and the axis spine color. If we don't know the current values of these parameters, we call `plt.getp` - a friend of `setp`:","fe4f4c9a":"When I was a beginner learning data visualization, I used to have a rule\u200a-\u200anever, ever visit the Matplotlib documentation.\n\nNothing good ever came out of there. When I was on its pages, my eyes would process English words but, somehow, they were interpreted into my brain like I was deciphering a foreign language. Then I would stumble upon some masterpieces like [these](https:\/\/ibexorigin.medium.com\/yes-these-unbelievable-masterpieces-are-created-with-matplotlib-2256a4c54b12?source=your_stories_page-------------------------------------) and I would think, do I even use the same library?\n\nEven if you are a seasoned programmer, I am sure you've faced similar challenges while learning Maplotlib. It is no easy library. There are so many classes and so damn many ways of doing the simplest tasks-utter confusion.\n\nIf you are in that position or want to step up your Matplotlib game, I've got the guide you need. I will show you to reach deep into the roots of the Matplotlib jungle, set a fire on it, and fly out on a jetpack. Are you ready? Let's start!\n\n![](https:\/\/cdn-images-1.medium.com\/max\/900\/1*m0-c5e45bQH7bigxoSOnyQ.gif)","19eee924":"This immediately creates a figure and attaches an axes (coordinate system). Next, we start plotting data on the axes using the plotting methods.\n\nThese plots have names such as `bar`, `hist`, `scatter`, `boxplot`, etc. Let's create a simple scatterplot and draw a couple of lines:","09283ae3":"Though exceptional programmers wrote Matplotlib, it consists of base classes called Artists.","6cac7f7d":"```python\n>>> dir(fig)\n[\n ...\n 'gca',\n 'get_agg_filter',\n 'get_alpha',\n 'get_animated',\n 'get_axes',\n 'get_dpi',\n 'get_edgecolor',\n 'get_facecolor',\n 'get_figheight',\n 'get_figure',\n 'get_figwidth',\n 'get_frameon',\n 'get_gid',\n 'get_in_layout'\n ...\n]\n```","54950ef9":"Naturally, you are frustrated because you don't know where the heck you used the Lined2D object or where it came from.\n\nIf you're one of these people, I will show you a few tricks that I have learned, which will make you a pro Matplotlib user and read the documentation like you would read children's bedtime stories.","445fa3e9":"Now, it is time for axes:","76e1d5e9":"Since we created the axes and figures at the beginning, they are already isolated as objects (`fig` and `ax`).\n\nNow, let's assume for a moment that we have the figure but not the axes. How do we extract it from the figure?\n\nEvery matplotlib artist has several methods that start with `get_*` prefix. If we call the `dir` function on `fig`, we can see a few examples:","379ca55c":"The official class name of axes is `AxesSubplot` and as we see, there is only one in the list:","b654414b":"# Setup","0d01694c":"From the above map of Matplotlib classes, we see the little Lind2D I mentioned earlier. It is a class that draws the lines and markers when we plot scatterplots and lines using `plot` or `scatter` functions.\n\nNow, getting back to our plot\u200a-\u200ahere are the steps we have made so far:","9468ff44":"To get from the base artists to colorful plots, the components need to go through a long chain of inheritance of many MPL classes. Along this chain, two groups of classes are essential to how you use Matplotlib. These groups are called **containers** and **primitives**.\n\nWe've already seen two instances of **containers**\u200a-\u200afigures and axes. The figure contains axes, and axes contains pretty much everything.\n\nPrimitives are all the graphical or geometrical objects that go into a container. You rarely use these primitives directly. They are created dynamically when you call plotting functions. You can access all of their names under the `patches` module of Matplotlib:","f3667873":"The function returns None, meaning the operation was successful. Now, we take a look at the plot once again:","7ca76e12":"We can also tweak the spines:","3721738d":"You can create a figure with nothing drawn on it with the figure function. On its own, the figure does nothing - remember that it is the blank white page you draw your plots on.\n\nWe will come back to figures later.","2f67247c":"A final trick I recommend is storing all created plots into a variable so that you can work on them separately without having to access them through axes:","22b1bfc1":"The fun begins when we add axes to the figure. The `Axes` class is an artist that represents a set of x, y coordinate systems in a plot:","553949ca":"Every circle-annotated component of the plot is implemented as a separate class that inherits from the base artist. But this ability to represent everything as a class has its pros and cons.\n\nOn the one hand, it gives Matplotlib unprecedented flexibility. Using their respective class, you can tweak virtually any plot component until you are satisfied. Often, you have multiple options to do the same task, enabling you to switch between different interfaces.\n\nPerhaps, this is what upsets Pythonistas about MPL the most. According to the [zen of Python](https:\/\/www.python.org\/dev\/peps\/pep-0020\/), there should be one, and preferably only one obvious way to do something. And Matplotlib API is a violation of this rule in every way imaginable.\n\nAs a result, beginners are confused. They don't know which class or function to use to do a simple task. They don't understand the documentation because, frankly, it is so damn hard to understand. Even experienced developers may not have a clue what errors like this mean:","0de115f7":"Let's start by learning how to create plots using figures. A Figure object in MPL is the highest-level artist, which can be considered as the canvas you draw everything on.","842dcf38":"Now, we know that the lines and dots are actually patch artists contained within the axes. Let's actually look at all artists within `ax`:","a2fba901":"# Containers and primitives","373b5ccd":"![](https:\/\/miro.medium.com\/max\/1400\/1*w-UpVHWvDrpCNy1-QLkkCQ.jpeg)\n<figcaption style=\"text-align: center;\">\n    <strong>\n        Photo by \n        <a href='https:\/\/pixabay.com\/users\/bujinzhao-10495661\/'>bujinzhao<\/a>\n        on \n        <a href=''>Pixabay<\/a>\n    <\/strong>\n<\/figcaption>\n\nNow that we have a couple of objects, it is time we customize them using their parameters. But first, we have to ask\u200a-\u200awhat parameters does my object accept and what values do they take?\n\nThat's where the swiss army knife of Matplotlib comes into play. It is the function `plt.setp` ( set parameter) and it is accessible through the PyPlot API.\n\nSo, let's see what parameters the figure object accepts:","adef2bfc":"I know these are fundamental concepts, but the lesson you should take from here is that every class in MPL has such `get_*` functions that allow you to retrieve different parts of that component class.","36d0d02c":"# Putting everything together","3cb90383":"# The swiss army knives of Matplotlib","f6334e5c":"```python\n>>> plt.plot([1, 2, 3], [2, 6, 4], s=4)\n\n...\nAttributeError: 'Line2D' object has no property 's'\n```","69822083":"But how about the line and marker colors? We also said we would be tweaking the axis lines? Well, they are separate classes, so we need to extract them from the axes. But before we do that, there is a couple of crucial concepts we need to learn about. This section only served as an introduction to `setp` and `getp` functions.","1643393c":"# I used to have a rule...","4b40b884":"Passing the object and its parameter name as a string is shorthand for printing out the parameters' possible values. Now, let's finally change the figure size:","b69583c8":"Calling the function on an object with no parameters prints the documentation of all object arguments. In the list of parameters, we see the one we want to change, which is the figure size. It is the one named `size_inches`:","194173fd":"# 5 Step Workflow To Touch Into the Heart of Matplotlib And Create Awesome Graphs\n## Use Matplotlib like an absolute boss!\n![](https:\/\/miro.medium.com\/max\/2000\/1*5lPME8X8kQSwj9Hlecr3cA.jpeg)\n<figcaption style=\"text-align: center;\">\n    <strong>\n        Photo by \n        <a href='https:\/\/www.pexels.com\/@ilargian-faus-763704?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels'>Ilargian Faus<\/a>\n        on \n        <a href='https:\/\/www.pexels.com\/photo\/close-up-photo-of-dog-wearing-sunglasses-1629781\/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels'>Pexels.<\/a> All images are by the author unless specified otherwise.\n    <\/strong>\n<\/figcaption>","c25c7920":"![](https:\/\/cdn-images-1.medium.com\/max\/900\/1*aUil2pXVXAAJ0oYn761Lxg.jpeg)\n<figcaption style=\"text-align: center;\">\n    <strong>\n        Photo by \n        <a href='https:\/\/www.pexels.com\/@matreding?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels'>Mathias P.R. Reding<\/a>\n        on \n        <a href='https:\/\/www.pexels.com\/photo\/old-axe-with-rusty-blade-in-stump-6835322\/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels'>Pexels<\/a><\/strong>\n<\/figcaption>","c305f89c":"The function to add a blank axes to a figure is `add_axes` but in practice, you never use it. Instead, you usually create a single figure and one or more axes simultaneously using the `subplots` function:","12b1cc8c":"Similar to `setp`, `getp` returns the defaults or current values of parameters. Calling it without any arguments on an object returns all default values. Let's change the ones we wanted:","94cebd9a":"# Let's throw Axes!","7f9f5cf4":"Let's structure all the jumbled pieces of information we learned today:\n\n1. Create the plot and mark the parts you want to improve.\n2. Extract a single component. Call `dir` on the axes or figure object if you don't know what you are looking for. Also, the get_* prefixed functions are helpful in this case.\n3. After you have a component, see the default values of its parameters by calling `plt.getp`.\n4. Mark the parameters you need and call `plt.setp` on each of them to see the possible values they accept.\n5. Set your custom values using the same function.\n6. Iterate through 2\u20135 until you have the perfect plot you need.\n\nOnce you go through this workflow a few times, you will get more comfortable with higher-level functions. Instead of extracting every component from the axes and primitives, you will start passing arguments directly to the function calls or when creating the axes.\n\nBut `setp`, `getp` and `dir` functions are everything you need if you ever encounter an unknown Matplotlib class or function.\n\nBesides, learning the concepts of artists, patches, and container\/primitives has set you up to understand the documentation to its fullest extent. These are the terms that come up the most in the docs. I strongly recommend going through them with your newfound knowledge to learn even more.","2da755e7":"# Figuratively speaking...","fa4f3c86":"We can already see that the plot needs a few text labels. Besides, we don't like the default colors of the points and the lines. Also, the figure itself is a bit small.\n\nSee what we did here? We first created a base plot and identified the components we want to improve. Now, we need to figure out how to extract those components and customize them.","b832caa0":"![](https:\/\/matplotlib.org\/stable\/_images\/sphx_glr_anatomy_001.png)\n<figcaption style=\"text-align: center;\">\n    <strong>\n        Matplotlib anatomy from the docs.\n    <\/strong>\n<\/figcaption>","de167ca3":"# Creating a unified workflow of your own","ba33caff":"Data visualization isn't about learning a plotting library. It is a combination of creativity, understanding the audience, and delivering insights in a professional and informative way.\n\nI expect all these three skills from your end. My part was to show how you can use one of the strongest plotting libraries in the Python ecosystem to complement those skills. I have taught you a powerful iterative process that enables you to improve Matplotlib plots in an intelligent and structured manner.\n\n![](https:\/\/cdn-images-1.medium.com\/max\/900\/1*KeMS7gxVGsgx8KC36rSTcg.gif)","827fb443":"# Summary"}}