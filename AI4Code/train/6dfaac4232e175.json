{"cell_type":{"37936001":"code","7ab38548":"code","48a8001d":"code","0fef153f":"code","a483d891":"code","8bf2a2d5":"code","a751b3b5":"code","2839c0f4":"code","d3eae512":"markdown","38b355e4":"markdown","ec18f6bb":"markdown","40d17fb3":"markdown","796a2d7f":"markdown","8c0cb168":"markdown","719d0169":"markdown"},"source":{"37936001":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nif 0:\n    # Input data files are available in the read-only \"..\/input\/\" directory\n    # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n    import os\n    for dirname, _, filenames in os.walk('\/kaggle\/input'):\n        for filename in filenames:\n            print(os.path.join(dirname, filename))\n\n    # You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n    # You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ab38548":"# Cell Div. 2019; 14: 15. Published online 2019 Dec 23. doi: 10.1186\/s13008-019-0058-4 \n# PMCID: PMC6927170 PMID: 31889988 The essentiality landscape of cell cycle related genes in human pluripotent \n# and cancer cells \n# https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC6927170\/\n# List of essential genes common to all cell lines, S phase genes:\n    \nlist_s_phase_stable_many_cell_lines =      ['ANAPC2' , 'CDC16' , 'CDC23' , 'CDC6' , 'CDT1' , 'DAD1' , 'EEF2' , 'GINS2' , 'POLA1' , 'POLE2' , 'RPS2' , 'RRM1' , 'RRM2' , 'U2AF2' , 'WEE1' ]\nprint( len( list_s_phase_stable_many_cell_lines))\nprint(list_s_phase_stable_many_cell_lines)","48a8001d":"url = 'https:\/\/raw.githubusercontent.com\/theislab\/scanpy_usage\/master\/180209_cell_cycle\/data\/regev_lab_cell_cycle_genes.txt'\ncell_cycle_genes_scanpy = pd.read_csv(url, header = None)\nprint( cell_cycle_genes_scanpy.shape )\nprint('Unique genes', cell_cycle_genes_scanpy[0].nunique())\ns_genes = cell_cycle_genes_scanpy[:43]\ng2m_genes = cell_cycle_genes_scanpy[43:]\nprint('G2\/M', len( list(g2m_genes.values.ravel()) ) )\nprint( list(g2m_genes.values.ravel()) )\nprint('S', len(list(s_genes.values.ravel()) ))\nprint( list(s_genes.values.ravel()) )\ncell_cycle_genes_scanpy.columns = ['symbol']\nfor i in range(43):\n    cell_cycle_genes_scanpy.loc[i,'phase'] = 'S'\nfor i in range(43,len(cell_cycle_genes_scanpy)):\n    cell_cycle_genes_scanpy.loc[i,'phase'] = 'G2\/M'\ncell_cycle_genes_scanpy\n\n","0fef153f":"mask = cell_cycle_genes_scanpy['symbol'].isin( list_s_phase_stable_many_cell_lines     )\ncell_cycle_genes_scanpy['S phase essential'] = mask\nprint()\nprint('S phase essential:', mask.sum(), 'out of ', len(list_s_phase_stable_many_cell_lines), len(cell_cycle_genes_scanpy ))\nmask = cell_cycle_genes_scanpy['phase'] == 'S'\nprint('Sanity check - number of those in S phase:', cell_cycle_genes_scanpy['S phase essential'][ mask ].sum() )\ncell_cycle_genes_scanpy","a483d891":"# Count by hands from Tirosh2016 table 5 - found that it contains duplicate of gene HJURP in G2\/M phase, clean it, check coincides with scanpy list\n\n# here we check that coincidency with scanpy\n\n# Table S5 Core signature of cell cycle genes expressed in cycling malignant cells from both low-cycling and high-cycling tumors. https:\/\/science.sciencemag.org\/highwire\/filestream\/677381\/field_highwire_adjunct_files\/9\/aad0501_Table_S5.xlsx\n\n#Note in that file gene HJURP is dublicated twice in G2\/M phase - below already cleaned\n\ns_list = ['MCM5' ,\n'PCNA' ,\n'TYMS' ,\n'FEN1' ,\n'MCM2' ,\n'MCM4' ,\n'RRM1' ,\n'UNG' ,\n'GINS2' ,\n'MCM6' ,\n'CDCA7' ,\n'DTL' ,\n'PRIM1' ,\n'UHRF1' ,\n'MLF1IP' ,\n'HELLS' ,\n'RFC2' ,\n'RPA2' ,\n'NASP' ,\n'RAD51AP1' ,\n'GMNN' ,\n'WDR76' ,\n'SLBP' ,\n'CCNE2' ,\n'UBR7' ,\n'POLD3' ,\n'MSH2' ,\n'ATAD2' ,\n'RAD51' ,\n'RRM2' ,\n'CDC45' ,\n'CDC6' ,\n'EXO1' ,\n'TIPIN' ,\n'DSCC1' ,\n'BLM' ,\n'CASP8AP2' ,\n'USP1' ,\n'CLSPN' ,\n'POLA1' ,\n'CHAF1B' ,\n'BRIP1' ,\n'E2F8' ,]\n\nprint( len(s_list) )\n\ng2m_list = [ 'HMGB2' ,\n'CDK1' ,\n'NUSAP1' ,\n'UBE2C' ,\n'BIRC5' ,\n'TPX2' ,\n'TOP2A' ,\n'NDC80' ,\n'CKS2' ,\n'NUF2' ,\n'CKS1B' ,\n'MKI67' ,\n'TMPO' ,\n'CENPF' ,\n'TACC3' ,\n'FAM64A' ,\n'SMC4' ,\n'CCNB2' ,\n'CKAP2L' ,\n'CKAP2' ,\n'AURKB' ,\n'BUB1' ,\n'KIF11' ,\n'ANP32E' ,\n'TUBB4B' ,\n'GTSE1' ,\n'KIF20B' ,\n'HJURP' ,\n'CDCA3' ,\n'HN1' ,\n'CDC20' ,\n'TTK' ,\n'CDC25C' ,\n'KIF2C' ,\n'RANGAP1' ,\n'NCAPD2' ,\n'DLGAP5' ,\n'CDCA2' ,\n'CDCA8' ,\n'ECT2' ,\n'KIF23' ,\n'HMMR' ,\n'AURKA' ,\n'PSRC1' ,\n'ANLN' ,\n'LBR' ,\n'CKAP5' ,\n'CENPE' ,\n'CTCF' ,\n'NEK2' ,\n'G2E3' ,\n'GAS2L3' ,\n'CBX5' ,\n'CENPA' ]\nprint(len(g2m_list))\n\nl1 = cell_cycle_genes_scanpy\nphase = 'G2\/M'\nmask = l1['phase'] == phase\ns1 = set(l1[mask]['symbol'].values )\ns2 = set(g2m_list )\nprint( len(s1 & s2), len(s1),len(s2) )\n\nl1 = cell_cycle_genes_scanpy\nphase = 'S'\nmask = l1['phase'] == phase\ns1 = set(l1[mask]['symbol'].values )\ns2 = set(s_list )\nprint( len(s1 & s2), len(s1),len(s2) )\n\n","8bf2a2d5":"cc_genes_list = pd.read_csv('https:\/\/raw.githubusercontent.com\/hbc\/tinyatlas\/master\/cell_cycle\/Homo_sapiens.csv')\ncc_genes_list","a751b3b5":"flag_use_mygene = 1\nif flag_use_mygene:\n    !pip install mygene\n    import mygene\n    mg = mygene.MyGeneInfo()\n    \n    for i in range(len(cc_genes_list)):\n        ens_id = cc_genes_list['geneID']\n        ensembl_id = cc_genes_list['geneID'].iat[i] # genes[0].iat[IX1].split('.')[0]\n        g_inf = mg.getgene(ensembl_id )\n        ix = cc_genes_list.index[i]\n        cc_genes_list.loc[ix,'symbol'] = g_inf['symbol']\nprint( cc_genes_list['phase'].value_counts() )        \ncc_genes_list        ","2839c0f4":"l1 = cell_cycle_genes_scanpy\nl2 = cc_genes_list\n\nfor phase in ['S','G2\/M']:\n    print(phase)\n\n    m1 = l1['phase'] == phase\n    m2 = l2['phase'] == phase\n    print('Count ',phase , ' phase ' , '1:', m1.sum(),'2:', m2.sum())\n    s1 = set(l1[m1]['symbol'])\n    s2 = set(l2[m2]['symbol'])\n    print('Count intersection:', len( set(l1[m1]['symbol']) & set(l2[m2]['symbol']) ) )\n    print('s1-s2:', s1-s2,'s2-s1:', s2-s1 )\n    print()\n","d3eae512":"# Compare two lists - small differences","38b355e4":"# Tirosh2016 - copy original by hands and compare with above - coincides\n\n Count by hands from Tirosh2016 table 5 - found that it contains duplicate of gene HJURP in G2\/M phase, clean it, check coincides with scanpy list\n\n here we check that coincidency with scanpy\n\n Table S5 Core signature of cell cycle genes expressed in cycling malignant cells from both low-cycling and high-cycling tumors. https:\/\/science.sciencemag.org\/highwire\/filestream\/677381\/field_highwire_adjunct_files\/9\/aad0501_Table_S5.xlsx\n\n#Note in that file gene HJURP is dublicated twice in G2\/M phase - below already cleaned\n","ec18f6bb":"# What is about ?\n\nHere we look at lists of genes marking phases of  cell cycle and somewhat compare them.\n\n\n\n## Tirosh 2016 - used e.g. by scanpy \n\n**Tirosh 2016** - many cite that for cell cycle markers lists\nhttps:\/\/science.sciencemag.org\/content\/352\/6282\/189\/tab-figures-data\nhttps:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC4944528\/\nDissecting the multicellular ecosystem of metastatic melanoma by single-cell RNA-seq\nScience. 2016 Apr 8; 352(6282): 189\u2013196.\nIn particular table 5 gives some list of biomarkers for cell cycle.\n\nTable S5 Core signature of cell cycle genes expressed in cycling malignant cells from both low-cycling and high-cycling tumors.\nhttps:\/\/science.sciencemag.org\/highwire\/filestream\/677381\/field_highwire_adjunct_files\/9\/aad0501_Table_S5.xlsx\n\nNote in that file gene HJURP   is dublicated twice in G2\/M phase - below already cleaned\n\nEach gene-set is ranked from most significant (top) to least significant gene (bottom).\t\t\t\n\nG2\/M 54\n\n['HMGB2', 'CDK1', 'NUSAP1', 'UBE2C', 'BIRC5', 'TPX2', 'TOP2A', 'NDC80', 'CKS2', 'NUF2', 'CKS1B', 'MKI67', 'TMPO', 'CENPF', 'TACC3', 'FAM64A', 'SMC4', 'CCNB2', 'CKAP2L', 'CKAP2', 'AURKB', 'BUB1', 'KIF11', 'ANP32E', 'TUBB4B', 'GTSE1', 'KIF20B', 'HJURP', 'CDCA3', 'HN1', 'CDC20', 'TTK', 'CDC25C', 'KIF2C', 'RANGAP1', 'NCAPD2', 'DLGAP5', 'CDCA2', 'CDCA8', 'ECT2', 'KIF23', 'HMMR', 'AURKA', 'PSRC1', 'ANLN', 'LBR', 'CKAP5', 'CENPE', 'CTCF', 'NEK2', 'G2E3', 'GAS2L3', 'CBX5', 'CENPA']\n\nS 43\n\n['MCM5', 'PCNA', 'TYMS', 'FEN1', 'MCM2', 'MCM4', 'RRM1', 'UNG', 'GINS2', 'MCM6', 'CDCA7', 'DTL', 'PRIM1', 'UHRF1', 'MLF1IP', 'HELLS', 'RFC2', 'RPA2', 'NASP', 'RAD51AP1', 'GMNN', 'WDR76', 'SLBP', 'CCNE2', 'UBR7', 'POLD3', 'MSH2', 'ATAD2', 'RAD51', 'RRM2', 'CDC45', 'CDC6', 'EXO1', 'TIPIN', 'DSCC1', 'BLM', 'CASP8AP2', 'USP1', 'CLSPN', 'POLA1', 'CHAF1B', 'BRIP1', 'E2F8']\n\n\nPay attention that the Table 5 also contains list of genes specific to melanoma cell cycle - we do not use it here.\n\n\n\n\n## 2019 \n\nCell Div. 2019; 14: 15. Published online 2019 Dec 23. doi: 10.1186\/s13008-019-0058-4 PMCID: PMC6927170 PMID: 31889988 The essentiality landscape of cell cycle related genes in human pluripotent and cancer cells https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC6927170\/\nList of essential genes common to all cell lines, S phase genes:\n\n[ANAPC2' , 'CDC16' , 'CDC23' , 'CDC6' , 'CDT1' , 'DAD1' , 'EEF2' , 'GINS2' , 'POLA1' , 'POLE2' , 'RPS2' , 'RRM1' , 'RRM2' , 'U2AF2' , 'WEE1' ]\n\n\n## Compare 2016 vs 2019 - intersect only by 5 genes\n\nthese genes are:\n\n\n## Almost the same list from nice tutorial\n\nhttps:\/\/hbctraining.github.io\/scRNA-seq\/lessons\/cell_cycle_scoring.html\nFor pedestrians - introduction\n\nThe nice tutorial referes to the same Tirosh list, but seems there is a bit of difference\n\ncc_genes_list = pd.read_csv('https:\/\/raw.githubusercontent.com\/hbc\/tinyatlas\/master\/cell_cycle\/Homo_sapiens.csv')\n\nIn that github cell cycle genes for other organisms can be also found\n\n","40d17fb3":"# List from Tirosh2016 used e.g. by scanpy  ","796a2d7f":"# List S phase stable for several cell lines - 2019","8c0cb168":"# Related list to check \n\nNice tutorial: \nhttps:\/\/hbctraining.github.io\/scRNA-seq\/lessons\/cell_cycle_scoring.html\nFor pedestrians - introduction\n\ncc_genes_list = pd.read_csv('https:\/\/raw.githubusercontent.com\/hbc\/tinyatlas\/master\/cell_cycle\/Homo_sapiens.csv')\n\nIn that github cell cycle genes for other organisms can be also found\n\n","719d0169":"# Compare to 2019 paper list of S phase essential for several cell lines:\n\nintersects only by 5 genes"}}