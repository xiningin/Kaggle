{"cell_type":{"3a461a6e":"code","31608966":"code","fd7c2d50":"code","1e76ad41":"code","8463c146":"code","2d5035e1":"code","a0c54285":"code","bde265ad":"code","49d8bcf7":"code","667c8013":"code","e5b63031":"code","74323a78":"code","f28a81db":"code","accdd5ee":"code","5e758698":"code","3ac3855a":"code","689c7837":"code","d97f7480":"code","2136b06e":"code","2d9a1a66":"code","6546ab1e":"code","2496ce9e":"code","166ca397":"code","e575bb62":"markdown","75d7f723":"markdown","bacccf88":"markdown","a85ab693":"markdown","0f9c00a7":"markdown","f38ef995":"markdown","0fde362a":"markdown","a1952bb4":"markdown","640cf50a":"markdown","1b6efe0e":"markdown","2d377bfe":"markdown","676df4a0":"markdown","433c713a":"markdown","3577c422":"markdown","35f65802":"markdown","61d7199d":"markdown","8d364c6b":"markdown"},"source":{"3a461a6e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport missingno as msno\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, StackingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom itertools import product\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","31608966":"# download train and test datasets\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ncm = ['#BDBAB4', '#FF6766', '#97CE68', '#6BCBCA', '#FF9900']","fd7c2d50":"df = pd.concat([train_data,test_data], axis=0, ignore_index = True)\nmsno.bar(df, color=cm)","1e76ad41":"pclass, sex = [1,2,3], [\"female\",\"male\"]\nfor c,s in product(pclass, sex):\n    msk = (df[\"Pclass\"]==c) & (df[\"Sex\"]==s)\n    df.loc[msk,\"Age\"] = df[msk][\"Age\"].fillna(df[msk][\"Age\"].median())","8463c146":"msno.bar(df, color=cm)","2d5035e1":"len(df[\"Age\"].value_counts())","a0c54285":"df[\"Age_Group\"] = df[\"Age\"].map(lambda x: int(x\/\/10))\ndf[['Age','Age_Group']]\ndf[\"Age_Group\"].value_counts()","bde265ad":"age_survived = df.groupby(['Age_Group', 'Survived']).size().unstack()\nage_survived.fillna(0)\nage_survived.plot(kind='barh', stacked=True)","49d8bcf7":"df['Cabin_num'] = df['Cabin'].str[:1]\ndf['Cabin_num'].replace(np.nan, \"None\", inplace=True)\ndf.head(10)\nset(df['Cabin_num'])","667c8013":"msno.bar(df, color=cm)","e5b63031":"df[\"Title\"] = pd.DataFrame(df[\"Name\"].str.strip().str.split(\".\"))\ndf[\"Title\"] = df[\"Title\"].map(lambda title : title[0])\ndf[\"Title\"] = df[\"Title\"].str.strip().str.split(\",\").map(lambda title: title[1].strip())\nrename = {\"Miss\":\"Ms\",\n          \"Mrs\": \"Mme\",\n          \"Others\": [\"Don\",\"Rev\",\"Dr\",\"Lady\",\"Sir\",\"Mlle\",\"Col\",\"the Countess\",\"Mme\",\"Major\",\"Capt\",\"Jonkheer\",\"Dona\"]}\nfor k in rename:\n    df[\"Title\"].replace(rename[k],k, inplace=True)\ndf[\"Title\"].value_counts()","74323a78":"msno.bar(df, color=cm)","f28a81db":"df[\"Fare\"].replace(np.nan, df[\"Fare\"].median(), inplace=True)\nmsno.bar(df, color=cm)","accdd5ee":"df.loc[df[\"Embarked\"].isna() == True]","5e758698":"df = df.drop([61, 829])\ndf.loc[df[\"Embarked\"].isna() == True]","3ac3855a":"features = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Age_Group', 'Cabin_num', 'Title']\ndummies = pd.get_dummies(df[features])\nx = dummies[:800]\nx_test = dummies[800:889]\nx_submit = dummies[-418:]\n\ntrain_data = df[:800]\ny = train_data['Survived']\ntrain_data_test = df[800:889]\ny_test = train_data_test['Survived']","689c7837":"model = RandomForestClassifier(n_estimators = 100, max_depth = 5, random_state = 1)\nmodel.fit(x, y)\npredictions = model.predict(x_test)","d97f7480":"accuracy = accuracy_score(y_test, predictions)\nprint('Accuracy with max_depth 5 is: ', accuracy)","2136b06e":"model = RandomForestClassifier(n_estimators = 100, max_depth = 10, random_state = 1)\nmodel.fit(x, y)\npredictions = model.predict(x_test)\naccuracy = accuracy_score(y_test, predictions)\nprint('Accuracy with Random FOrest 10 is: ', accuracy)\n\nmodel = AdaBoostClassifier(n_estimators = 100)\nmodel.fit(x, y)\npredictions = model.predict(x_test)\naccuracy = accuracy_score(y_test, predictions)\nprint('Accuracy with AdaBoost is: ', accuracy)\n\nmodel = GradientBoostingClassifier(n_estimators = 100)\nmodel.fit(x, y)\npredictions = model.predict(x_test)\naccuracy = accuracy_score(y_test, predictions)\nprint('Accuracy with GradientBoosting is: ', accuracy)","2d9a1a66":"estimators = [\n    ('RF', RandomForestClassifier(n_estimators = 100, max_depth = 10, random_state = 1)),\n    ('Ada', AdaBoostClassifier(n_estimators = 100)),\n    ('GradBoost', GradientBoostingClassifier(n_estimators = 100))\n]\nclf = StackingClassifier(estimators = estimators, final_estimator=LogisticRegression())\nclf.fit(x, y)\npredictions = clf.predict(x_test)\naccuracy = accuracy_score(y_test, predictions)\nprint('Accuracy with ensemble is: ', accuracy)","6546ab1e":"x = dummies[:889]\ntrain_data = df[:889]\ny = train_data['Survived']\n\nmodel = clf\nmodel.fit(x, y)\npredictions = model.predict(x_submit)","2496ce9e":"predictions = predictions.astype('int')","166ca397":"output = pd.DataFrame({'PassengerId' : test_data.PassengerId, 'Survived' : predictions})\noutput.to_csv('result_ensemble.csv', index = False)","e575bb62":"Two 'Embarked' values are missed. We should find them","75d7f723":"We have 99 different values of age and it should be grouped. Let's do it by division without remainder every age. We will get age value grouped by ten.","bacccf88":"Transform predictions values to int type","a85ab693":"We have one NaN fare value. I replaced it just by median value (one value is not so important for us).","0f9c00a7":"Choose the best model.","f38ef995":"We will use Random Forest Classifier.","0fde362a":"All passenger's have their title. So we should group them by title. \nLet's parse passenger's names and get 5 values of titles in 'Title'.","a1952bb4":"Great. Now we have 9 cabin values in \"Cabin_num'.","640cf50a":"Now let's put our features in 'features' array and split our data by train set and test set.","1b6efe0e":"Concatinate train_data and test_data sets to analyse the data easier","2d377bfe":"We have a lot of cabin numbers. So let's group it by first letter. \nPassenger's cabin without cabin number will has 'None' value.","676df4a0":"Save predictions to csv file.","433c713a":"Let's test our model","3577c422":"Only 0-10 age group have more survived passengers than not survived.","35f65802":"Two values is not so important for us so it would be easier to delete them.","61d7199d":"Now we have 9 age groups in 'Are_Group'. Let's take a look if there are relation between age group and survivory.","8d364c6b":"Only 1046 passengers has age information. Let's fill NaN's values by median value for each pair of (Pclass and sex)."}}