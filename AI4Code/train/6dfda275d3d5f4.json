{"cell_type":{"afa32bfd":"code","bfffba32":"code","b80e9528":"code","38923d54":"code","87676c45":"code","7b4f1b01":"code","441a89a2":"code","c8e793a4":"code","5234009b":"code","edac6b7e":"code","3871198b":"code","89922f66":"code","8322a47f":"code","77d16305":"code","955ec07d":"code","6fe4ac6b":"code","d9d83efc":"code","15f0aee8":"code","3200c4f0":"code","477b20b0":"code","93b1ac16":"code","120b1c53":"code","4f40c1bb":"code","22fdbb9f":"code","946ab547":"code","54ea7edc":"code","8527029e":"code","e746f26a":"code","136e3fee":"code","9947647c":"code","d54b3fdb":"code","c7054524":"code","cfe516e4":"code","aabe22a7":"code","634e3260":"code","98ef207a":"code","f74c8372":"code","2f56ba4c":"code","357c6886":"code","e5478aa6":"code","28bb01ac":"code","4bdeaeed":"code","23a8edb9":"code","da7b7547":"code","2dc943d5":"code","701ebf57":"code","f57cd041":"code","71185c1d":"code","b6b4a12a":"code","a05eb3d3":"code","8a111c2b":"code","d30102bd":"code","f6f1e626":"code","fe6ed701":"code","bf7308ab":"code","cdefe5b8":"code","d656d81c":"code","a9233ce1":"code","524a203d":"code","a2c822a1":"code","93be5ae8":"code","c28515c9":"code","e24e34aa":"code","7b8ba725":"code","c6c8ba6c":"code","06d26120":"code","52306494":"code","41d3d78c":"code","c1625bcc":"code","96a1698b":"code","f62a1a57":"code","d3f5e4ff":"code","eb7fccda":"code","07619586":"code","9ddca231":"code","44066d08":"code","039f839c":"code","1860cdfd":"code","d0517c61":"code","59f3fe3b":"code","973730f5":"code","248a5aff":"code","fe7696ae":"code","5398ce9f":"code","0fbb0455":"code","a6c7a72a":"code","7935fc38":"code","48e4f8ba":"code","689dc741":"markdown","dba3baa4":"markdown","925b0379":"markdown","2a29a6ab":"markdown","f81ba2f1":"markdown","604ac33b":"markdown","110ed449":"markdown","356fe54a":"markdown","1e9813a3":"markdown","b90de600":"markdown"},"source":{"afa32bfd":"import numpy as np\ntype(np.array([\"utsav\",1,5.0]))","bfffba32":"#upcasting example","b80e9528":"np.array([1,2,3.0]) #Integers are converted into float numbers as 3.0 is float","38923d54":"np.array([[1,2],[3,4]]) #two dimension array","87676c45":"np.array([4,5,6,7,8],ndmin = 5) #5 dimension array","7b4f1b01":"np.array([1,2,3,4,5,6,7,8],dtype=complex) #changing datatype of the array","441a89a2":"#assigning different datatypes to elements in an array\nx = np.array([(1,2),(3,4)],dtype=[('a','<i2'),('b','<i8')])\n\n#Here, element a is assigned to 1st elements of the tuple \n#And b is assigned to 2nd element of the tuple inside the list","c8e793a4":"#To check the datatype of any one element\nprint(type(x[0][0]))\ntype(x[0][1])","5234009b":"#Create an array from subclass\nnp.array([[1,2],[4,5]])","edac6b7e":"np.mat(np.array([[1,2],[4,5]]))","3871198b":"#checking the type\ntype(np.mat(np.array([[1,2],[4,5]])))","89922f66":"#Matrix using string\nnp.mat('1 2;4 5')","8322a47f":"#Convert the list into an array","77d16305":"a = [1,2,3,4]\ntype(np.asarray(a))","955ec07d":"#Convert datatype using asarrays","6fe4ac6b":"a = [1,2,3]\nnp.asarray(a,dtype=np.float64)","d9d83efc":"a = [1,2,3]\nnp.asarray(a,dtype=np.float64) is a","15f0aee8":"#Matrix is Subclass or Array : True\n#Array is a subclass of matrix : False","3200c4f0":"print(issubclass(np.matrix,np.ndarray))\nissubclass(np.ndarray,np.matrix)","477b20b0":"a=[1,2]\ntype(np.asanyarray(a)) \n#Result = Converted because list is not a variance of array","93b1ac16":"a = np.matrix([1,2])\na\nnp.asanyarray(a)\n#Result = Did not convert because matrix is a variance of array","120b1c53":"#SHALLOW COPY (Both the variables are pointed to the same location)\n#Change in one variable leads to change in another","4f40c1bb":"a = [1,2,3]","22fdbb9f":"b = a\nb","946ab547":"b[1]=100\nb","54ea7edc":"a #Changes done in 'a' as well","8527029e":"#DEEP COPY (Both the variables are pointed to the different locations)\n#Change in one variable does not lead to change in another","e746f26a":"a = [1,2,3]","136e3fee":"b = np.copy(a)\nb","9947647c":"b[1]=100\nb","d54b3fdb":"a # No changes done","c7054524":"np.fromfunction(lambda a,b: a == b, (3,3), dtype = int) ","cfe516e4":"np.fromfunction(lambda a,b:a*b,(4,4),dtype = int)","aabe22a7":"np.fromfunction(lambda a,b,c:a*b*c,(3,3,3),dtype = int) #3 dimension array","634e3260":"#Create a 1D array from iterable object","98ef207a":"iterable = (x*x for x in range(5))\niterable","f74c8372":"np.fromiter(iterable,float)","2f56ba4c":"#A new 1 D array converted from a text data into a string","357c6886":"a = np.fromstring('234 234',sep = ' ')\na","e5478aa6":"ab = np.fromstring('234 234',sep = ' ', dtype=int)\nab","28bb01ac":"#How to create a record array from a flat list of arrays","4bdeaeed":"x1 = np.array([1,2,3,4])\nx2 = np.array(['a','abc','df','12'])\nx3 = np.array([1.1,2,3,4])\nx4 = np.array([1.1,2,3,4])\ntype(x4)","23a8edb9":"r = np.core.records.fromarrays([x1,x2,x3,x4],names='a,b,c,d')\nr","da7b7547":"r[3]['b']","2dc943d5":"r[3][1]","701ebf57":"my_mat= [[1,2,3],[4,5,6],[7,8,9]]\nmat = np.array(my_mat)\nprint(\"Type\/Class of the object \",type(mat))\nprint(\"Here is the matrix \\n-----------\\n\", mat,\"\\n-----------\\n\")\nprint(\"Dimension of this matrix \",mat.ndim)\nprint(\"Size of this Matrix \",mat.size)\nprint(\"Shape of this Matrix \",mat.shape)\nprint(\"Data Type of this Matrix \",mat.dtype)\n\n","f57cd041":"#Normal range function does not accept a floating value, but np.arange function does\nnp.arange(1,50,0.2)","71185c1d":"np.arange(5.5,50)","b6b4a12a":"#The third element of arange\/range function is the step size\n#Whereas in Linspace, the 3rd element is the number of data printed between the first and second element","a05eb3d3":"print(\"10 linearly space numbers between 1 to 5\")\nprint(np.linspace(1,5,10))","8a111c2b":"np.linspace(0.5,5.5,15,endpoint = False) # Will not consider the upper bound(i.e 5.5)","d30102bd":"np.linspace(0.5,5.5,10,retstep = True) #It will give the linear space considered between 2 consecutive elements","f6f1e626":"#Logspace has same parameters like linspace. Logspace gives logarithmic values\nnp.logspace(1,5,5,base=2)","fe6ed701":"#Vector of zeros\nprint(np.zeros(5))","bf7308ab":"#Matrix of zeros\nprint(np.zeros((4,3))) #notice tuples","cdefe5b8":"#Similarly for ones\nprint(np.ones((2,3,3)))","d656d81c":"np.ones((3,3))+5","a9233ce1":"#Identity matrix\nmat1 = np.eye(4)\nprint(\"Identity matrix of dimension \",mat1.shape)\nmat1","524a203d":"#Extract a diagonal or construct a digonal array\nnp.arange(16).reshape((8,2))","a2c822a1":"x = np.arange(16).reshape((-1,4)) #takes the other number by default if -1 is given\nx","93be5ae8":"np.diag(x) #Only printing the diagonal elements","c28515c9":"#if we have a non sqare matrix and want the diagonal element of a certain position\na = np.arange(16).reshape(-1,8)\na","e24e34aa":"np.diag(a,k=3) #Diagonal from the 3rd position (starting from 0)","7b8ba725":"x = np.arange(16).reshape((-1,4)) #takes the other number by default if -1 is given\nx","c6c8ba6c":"np.diag(x,k=-1) #Gives the diagonal of the square matrix by eliminating the last column","06d26120":"#Making all the elements except the diagonal elements zero\nx = np.arange(16).reshape((-1,4))\nnp.diag(np.diag(x))","52306494":"x = np.arange(16).reshape((-1,4))\nnp.diag(np.diag(x),k=-1)","41d3d78c":"#An array to give ones below the diagonal and keep zero elsewhere\nnp.tri(5,5,0,dtype=int)","c1625bcc":"np.tri(5,5,2,dtype=int)","96a1698b":"np.tri(5,5,k=-2)","f62a1a57":"#Lower Triangle\nnp.tril([[1,2,3],[4,5,6],[7,8,9]],0)","d3f5e4ff":"#Upper Triangle\nnp.triu([[1,2,3],[4,5,6],[7,8,9]],0)","eb7fccda":"#uniform distribution (range 0 to 1)\nprint(np.random.rand(3,4))","07619586":"#standard normal distribution\nprint(np.random.randn(3,4))","9ddca231":"#Random integer\nprint(np.random.randint(1,10))","44066d08":"#matrix of random integer\nprint(np.random.randint(1,50,(4,4)))","039f839c":"from numpy.random import randint as ri","1860cdfd":"a = ri(1,100,30)\nb = a.reshape(2,3,5)\nc = a.reshape(6,-1)","d0517c61":"print(a.shape)\nprint(b.shape)\nprint(c.shape)","59f3fe3b":"a = ri(1,100,10)\nprint(\"Values of A: \",a)\nprint(\"Sorted A: \",np.sort(a))","973730f5":"m = ri(1,100,25).reshape(5,5)\nprint(m,'\\n')\nprint(np.sort(m,axis=1,kind='mergesort'),'\\n')\nprint(np.sort(m,axis=0,kind='mergesort'))","248a5aff":"x = ri(1,100,25).reshape(5,5)\nx","fe7696ae":"print(x.max())\nprint(x.min())","5398ce9f":"#argmax gives the INDEXES of the maximum numbers axis wise (either 0(column) or 1(row))\n#If axis is not given, it will simply give the index of the maximum number present \nprint(x.argmax(axis = 1))\nprint(x.argmax())","0fbb0455":"#Matrix multiplication\nmat1=np.array(ri(1,10,9).reshape(3,3))\nprint(mat1,'\\n')\nmat2=np.array(ri(1,10,9).reshape(3,3))\nprint(mat2,'\\n')","a6c7a72a":"#Element to element multiplication (1st index of a * 1st index of b)\nmat1*mat2","7935fc38":"#Actual matrix multiplication\nmat1@mat2","48e4f8ba":"#Apart from these,there are many more operations such as power,fmod,exp,sqrt,etc. ","689dc741":"# Random Number Generation","dba3baa4":"# np.fromfunction\nConstruct an array by executing a function on each dimension","925b0379":"# Matrix Creation","2a29a6ab":"# Reshaping","f81ba2f1":"# Data Types","604ac33b":"# numpy.asanyarray","110ed449":"# Numpy Array","356fe54a":"numpy.asanyarray will convert the data only if the type is not a variance of an array","1e9813a3":"# Arange and Linspace","b90de600":"# numpy.asarray"}}