{"cell_type":{"71cad391":"code","f6126cb0":"code","018fb4b7":"code","12d56dd8":"code","1ec07a9b":"code","b5dfebf6":"code","5140c3f4":"code","f76d85b5":"code","ea6b5eb3":"code","de5006c5":"code","fee3d753":"code","715edb3c":"code","9401f1f7":"code","91fcfe60":"code","afcaf102":"code","d6127a1a":"code","ae93df93":"code","fac051fb":"code","bd0b2552":"code","0bca72f0":"code","b92a8b0a":"code","e066517e":"code","49a19b54":"code","3ed2017a":"code","f195dc6c":"code","74578bfc":"code","a7f8f15e":"code","aa5e6604":"code","3034d93f":"code","5b4ec4f4":"code","76c73787":"code","a7f3435b":"code","1c11138f":"code","17fb0723":"code","0e09a5e2":"code","4eeeaac8":"markdown","93cd1ee4":"markdown"},"source":{"71cad391":"import time\nt_start = time.time()","f6126cb0":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","018fb4b7":"from fastai.vision import *\nfrom fastai.metrics import error_rate\nfrom fastai.callbacks import *","12d56dd8":"from functools import partial\nfrom sklearn import metrics\nfrom collections import Counter","1ec07a9b":"import os\nimport PIL\nimport cv2","b5dfebf6":"pwd","5140c3f4":"print(os.listdir(\"..\/input\/\"))","f76d85b5":"print(os.listdir(\"..\/input\/aptos2019-blindness-detection\"))","ea6b5eb3":"sys.path.insert(0, '..\/input\/aptos2019-blindness-detection')\nPath('\/tmp\/.cache\/torch\/checkpoints\/').mkdir(exist_ok=True, parents=True)\n!cp '..\/input\/resnet50\/resnet50.pth' '\/tmp\/.cache\/torch\/checkpoints\/resnet50-19c8e357.pth'","de5006c5":"dat_path = Path('..\/input\/aptos2019-blindness-detection')\ntrn_path = Path('..\/input\/aptos2019-blindness-detection\/train_images')\n(dat_path,trn_path)","fee3d753":"train_df = pd.read_csv(dat_path\/'train.csv')\ntrain_df.shape","715edb3c":"train_df.head()","9401f1f7":"def crop_image1(img,tol=7):\n    # img is image data\n    # tol  is tolerance\n        \n    mask = img>tol\n    return img[np.ix_(mask.any(1),mask.any(0))]\n\ndef crop_image_from_gray(img,tol=7):\n    if img.ndim ==2:\n        mask = img>tol\n        return img[np.ix_(mask.any(1),mask.any(0))]\n    elif img.ndim==3:\n        gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n        mask = gray_img>tol\n        \n        check_shape = img[:,:,0][np.ix_(mask.any(1),mask.any(0))].shape[0]\n        if (check_shape == 0): # image is too dark so that we crop out everything,\n            return img # return original image\n        else:\n            img1=img[:,:,0][np.ix_(mask.any(1),mask.any(0))]\n            img2=img[:,:,1][np.ix_(mask.any(1),mask.any(0))]\n            img3=img[:,:,2][np.ix_(mask.any(1),mask.any(0))]\n    #         print(img1.shape,img2.shape,img3.shape)\n            img = np.stack([img1,img2,img3],axis=-1)\n    #         print(img.shape)\n        return img\n\ndef load_ben_color(path, sigmaX=10):\n    image = cv2.imread(path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = crop_image_from_gray(image)\n    image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))\n    image=cv2.addWeighted ( image,4, cv2.GaussianBlur( image , (0,0) , sigmaX) ,-4 ,128)\n        \n    return image","91fcfe60":"IMG_SIZE = 512\ndef _load_format(path, convert_mode, after_open)->Image:\n    image = cv2.imread(path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = crop_image_from_gray(image)\n    image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))\n    image=cv2.addWeighted ( image,4, cv2.GaussianBlur( image , (0,0), 10) ,-4 ,128)\n                    \n    return Image(pil2tensor(image, np.float32).div_(255)) #return fastai Image format\n\nvision.data.open_image = _load_format","afcaf102":"tfms = get_transforms(do_flip=True, flip_vert=True, max_rotate=0.10, max_zoom=1.3, max_warp=0.0, max_lighting=0.2)","d6127a1a":"bs = 64","ae93df93":"data = ImageDataBunch.from_df(path=dat_path, folder='train_images', df=train_df, suffix='.png', \n                               fn_col=0, label_col=1,valid_pct=0.2, size=256, ds_tfms=tfms).normalize(imagenet_stats)","fac051fb":"#data.show_batch(rows=3, figsize=(7,6))","bd0b2552":"print(data.classes)\nlen(data.classes),data.c","0bca72f0":"#from sklearn.metrics import cohen_kappa_score\n#def quadratic_kappa(y_hat, y):\n#    return torch.tensor(cohen_kappa_score(torch.round(y_hat), y, weights='quadratic'),device='cuda:0')","b92a8b0a":"kappa = KappaScore()\nkappa.weights = \"quadratic\"","e066517e":"learn = cnn_learner(data, models.resnet50, metrics=[error_rate, kappa])","49a19b54":"learn.fit_one_cycle(1)","3ed2017a":"learn.fit_one_cycle(1)\n","f195dc6c":"learn.unfreeze()\nlearn.fit_one_cycle(9, max_lr=slice(1e-4,1e-3))","74578bfc":"#learn.unfreeze()\n#learn.fit_one_cycle(1, max_lr=slice(1e-4,1e-3))","a7f8f15e":"learn.model_dir = Path('\/kaggle\/working\/')","aa5e6604":"learn.save('\/kaggle\/working\/FastAI_APTOS_epoch_11')","3034d93f":"test_df = pd.read_csv(dat_path\/'sample_submission.csv')","5b4ec4f4":"test_df.head()","76c73787":"learn.data.add_test(ImageList.from_df(test_df,dat_path,folder='test_images',suffix='.png'))","a7f3435b":"preds,y = learn.get_preds(DatasetType.Test)","1c11138f":"test_df.diagnosis = preds.argmax(1)\ntest_df.head()","17fb0723":"test_df.to_csv('submission.csv',index=False)","0e09a5e2":"t_finish = time.time()\ntotal_time = round((t_finish-t_start) \/ 3600, 4)\nprint('Kernel runtime = {} hours ({} minutes)'.format(total_time, \n                                                      int(total_time*60)))","4eeeaac8":"This notebook is using fastai library with default parameters. Resnet-50 pretrained model.\n\nLearning Rate--> max_lr=slice(1e-4,1e-3)\n\nEpochs=11\n\nBens cropping and preprocessing","93cd1ee4":"# APTOS - Fastai\n\nSimple code for beginners"}}