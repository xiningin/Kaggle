{"cell_type":{"ebe3647e":"code","d84f7aa7":"code","50f51272":"code","ebf08170":"code","237b2f18":"code","cc0127f7":"code","ed653ef5":"code","641670b8":"code","98e7c283":"code","76303469":"code","b3887109":"code","6670721c":"code","69bc5f6f":"code","5bed1c7a":"code","0140a7d1":"code","5f3f35f6":"code","987fd515":"markdown","e5771ba9":"markdown"},"source":{"ebe3647e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d84f7aa7":"# Import libreries\nfrom keras.layers import Dense, Flatten, Lambda, Input\nfrom keras.models import Model\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom glob import glob","50f51272":"image_size = [224,224]\nvgg = VGG16(input_shape = image_size + [3], weights = 'imagenet', include_top = False)","ebf08170":"\n# Dont's train the existing weight\nfor layer in vgg.layers:\n  layer.trainable = False","237b2f18":"folders = glob('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/*')","cc0127f7":"x = Flatten()(vgg.output)","ed653ef5":"predictions = Dense(len(folders), activation='softmax')(x)\nmodel = Model(inputs= vgg.input, outputs= predictions)","641670b8":"model.summary()","98e7c283":"\nmodel.compile(loss = 'categorical_crossentropy',\n              optimizer ='adam',\n              metrics = ['accuracy'])","76303469":"from keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range =0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)","b3887109":"test_datagen = ImageDataGenerator(rescale = 1.\/255)\nval_datagen = ImageDataGenerator(rescale=1.\/255,\n                                  shear_range =0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)","6670721c":"training_set = train_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/train', \n                                                 target_size = (224,224),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')","69bc5f6f":"testing_set = test_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/test',\n                                               target_size = (224,224),\n                                               batch_size = 32,\n                                               class_mode = 'categorical')\nvelidating_set = val_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/val',\n                                               target_size = (224,224),\n                                               batch_size = 32,\n                                               class_mode = 'categorical')\n","5bed1c7a":"# fit the model\nr = model.fit_generator(\n    training_set,\n    validation_data = velidating_set ,\n    epochs=5, \n    steps_per_epoch = len(training_set),\n    validation_steps = len(velidating_set)\n)","0140a7d1":"plt.plot(r.history['loss'], label = 'train_loss')\nplt.plot(r.history['val_loss'], label = 'val loss')\nplt.legend()\nplt.show() ","5f3f35f6":"print(\"Loss of the model is - \" , model.evaluate(testing_set)[0]*100 , \"%\")\nprint(\"Accuracy of the model is - \" , model.evaluate(testing_set)[1]*100 , \"%\")","987fd515":"got a model accuray of 90.8%","e5771ba9":"## Pneumonia disease detection with X-ray\n\nIn this notebook we'll use transferlearning for classifying weather a person is suffering from pneumonia or not\nwe'll use vgg16 for same.\n\nLet's get started \ud83d\udd0e"}}