{"cell_type":{"47499c12":"code","e06c53d4":"code","b1c576b3":"code","6941f0aa":"code","1546a63f":"code","a2dd53d7":"markdown","e52808fb":"markdown","3057faeb":"markdown","495218fb":"markdown"},"source":{"47499c12":"# reference kernels\n# stacked classifiers https:\/\/www.kaggle.com\/thomasnelson\/simple-stacking-classifier-for-beginners \n# important features from https:\/\/www.kaggle.com\/cdeotte\/lb-probing-strategies-0-890-2nd-place","e06c53d4":"import numpy as np\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.naive_bayes import GaussianNB \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nimport pandas as pd\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.metrics import roc_auc_score\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# load data\ntrain = pd.read_csv('..\/input\/train.csv')\ntargets = train['target']\ntrain.drop(['id','target'], axis='columns', inplace=True)\ntest = pd.read_csv('..\/input\/test.csv').drop(\"id\", axis='columns')\n\n","b1c576b3":"RANDOM_SEED = 123\n\nnb = GaussianNB()\nsvc = SVC(kernel='rbf', C=1.0, gamma='auto', probability=True)\nsgd = SGDClassifier(eta0=1, max_iter=100, tol=0.0001, alpha=0.01, l1_ratio=0.0, learning_rate='adaptive', loss='log', penalty='elasticnet')\nnum_folds = 15\nrepeats = 5\n\nfrom mlxtend.classifier import StackingCVClassifier\nnp.random.seed(RANDOM_SEED)\nlr = LogisticRegression(max_iter=100, class_weight='balanced', penalty='l2', C=0.1, solver='liblinear')\nsclf = StackingCVClassifier(classifiers=[lr, svc, sgd], \n                            use_probas=True,\n                            use_features_in_secondary=True,\n                            meta_classifier=nb,\n                            cv=num_folds)\n","6941f0aa":"\nfolds = RepeatedStratifiedKFold(n_splits = num_folds, n_repeats = repeats, random_state=16)\ntest_result = np.zeros(len(test))\nauc_score = 0\nv = [16,33,45,63,65,73,91,108,117,164,189,199,209,217,239]\nfeatures = list(map(str,v))\n\ntrain = train[features]\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train, targets)):\n    print(\"Fold: \", fold_ + 1)\n    \n    X_train, y_train = train.iloc[trn_idx], targets.iloc[trn_idx]\n    X_valid, y_valid = train.iloc[val_idx], targets.iloc[val_idx]\n    \n    data = RobustScaler().fit_transform(np.concatenate((X_train, X_valid), axis=0))\n    X_train = data[:len(X_train)]\n    X_valid = data[len(X_train):]\n\n    sclf.fit(X_train, y_train.values)\n    \n    y_pred = sclf.predict_proba(X_valid)\n    auc = roc_auc_score(y_valid, y_pred[:, 1])\n    print(auc)\n    auc_score += auc\n\n    preds = sclf.predict_proba(test[features])\n    test_result += preds[:, 1]","1546a63f":"# print the average AUC across the folds and compute the final results on the test data\nauc_score = auc_score \/ (num_folds*repeats)\nprint(\"AUC score: \", auc_score)\ntest_result = test_result \/(num_folds*repeats)\n\n# create the submission\nsubmission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['target'] = test_result\nsubmission.to_csv('stacked_classifier_repeatedfolds.csv', index=False)\n\n# DISPLAY HISTOGRAM OF PREDICTIONS\nsubmission[\"target\"].plot.hist(bins=300, alpha=0.5)\n","a2dd53d7":"# Training and validation","e52808fb":"# Collection of models","3057faeb":"# Save submission","495218fb":"# Using stacked classifiers and important features\n## Stacking logistic regression, support vector machine and stochastic gradient descent with meta classifier being Naive Bayes\n## Repeated and Stratified Cross Validation"}}