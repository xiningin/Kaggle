{"cell_type":{"d35ede08":"code","b4571c13":"code","8cf57db8":"code","65a7888e":"code","b6656606":"code","6567f205":"code","5f369672":"code","b477f0bd":"code","28cd5d87":"code","92919326":"code","2b61753e":"code","c0c25a29":"code","efeb1fd8":"code","05c4358a":"code","70b22648":"code","58252b65":"code","657bc2d9":"code","db2c7f4a":"code","b53ecfb7":"code","f7e494a7":"code","2d8cdcad":"code","0542aeb9":"code","4393b19a":"code","775c6101":"code","ea8b3ba9":"code","886cdae2":"code","4bb9e5a7":"markdown","9b537844":"markdown","34f8a87c":"markdown","097e44a6":"markdown","7ef7f453":"markdown","17bec890":"markdown","c5fffe39":"markdown","87032d10":"markdown","a5969204":"markdown","d9eed2b3":"markdown","49171175":"markdown","0a0a8d29":"markdown","ee48ff42":"markdown","90f01d04":"markdown","b8f1da72":"markdown"},"source":{"d35ede08":"import pandas as pd\nimport plotly.express as px\n\npd.set_option('display.max_rows', 50000)","b4571c13":"#Bring in our data\nurl = 'https:\/\/en.wikipedia.org\/wiki\/List_of_United_States_FIPS_codes_by_county'\nfips = pd.read_html(url)                                                                                                   \nfips = fips[1]    \n\n#Rename our features\nFIPS = fips.rename(columns={'State or equivalent':'state', 'County or equivalent':'county'}) \n\n#Add a zero to FIPS less than 10,000, also change to string\nFIPS['FIPS']=FIPS['FIPS'].apply(lambda x:str(x) if x>=10000 else '0'+str(x))\n\n#Delete the word 'county' from all of our counties. This helps to merge!\nFIPS.county=FIPS.county.str.replace(' County', '')\n\n#Set index by state and county. This will make merging very easy!\nFIPS = FIPS.set_index(['state', 'county'])","8cf57db8":"#Lets get rid of the '[k]' from Connecticut \n###(This chunk of code was put in after for ease of flow)###\n\nFIPS = FIPS.reset_index()\nconn = FIPS[FIPS.state == 'Connecticut'].copy()\nconn['county'] = conn['county'].str.replace(r'\\[k\\]', '') \nFIPS = FIPS[FIPS.state != 'Connecticut'].append(conn)\nFIPS = FIPS.set_index(['state', 'county'])","65a7888e":"#1.) Loading our in as DataFrames\n#2.) Get rid of all of the word 'county' from all of the countys\n#3.) Lastly, I set the index to state and county for these new DataFrames\n\ndf0=pd.read_csv('..\/input\/us-election-2020\/governors_county.csv')\ndf0.county=df0.county.str.replace(' County', '')\ndf0 = df0.set_index(['state', 'county'])\n\ndf1=pd.read_csv('..\/input\/us-election-2020\/governors_county_candidate.csv')\ndf1.county=df1.county.str.replace(' County', '')\ndf1 = df1.set_index(['state', 'county'])\n\n\n\ndf2=pd.read_csv('..\/input\/us-election-2020\/president_county.csv')\ndf2.county=df2.county.str.replace(' County', '')\ndf2 = df2.set_index(['state', 'county'])\n\ndf3=pd.read_csv('..\/input\/us-election-2020\/president_county_candidate.csv')\ndf3.county=df3.county.str.replace(' County', '')\ndf3 = df3.set_index(['state', 'county'])\n\n\n\ndf4=pd.read_csv('..\/input\/us-election-2020\/senate_county.csv')\ndf4.county=df4.county.str.replace(' County', '')\ndf4 = df4.set_index(['state', 'county'])\n\ndf5=pd.read_csv('..\/input\/us-election-2020\/senate_county_candidate.csv')\ndf5.county=df5.county.str.replace(' County', '')\ndf5 = df5.set_index(['state', 'county'])\n\n#Finally, all that is left to do is merge in our FIPS DataFrame with our Datasets, and viola!\n\ndf0 = df0.join(FIPS)\ndf1 = df1.join(FIPS)\ndf2 = df2.join(FIPS)\ndf3 = df3.join(FIPS)\ndf4 = df4.join(FIPS)\ndf5 = df5.join(FIPS)","b6656606":"#From our Dataset, we create two more, for Dems and Reps\nDEM = df3[df3['party']=='DEM']\nREP = df3[df3['party']=='REP']\n\n\n#Using those two votes counts added together, we create a feature that totals the two candidates votes\ndf3['All_votes'] = DEM.total_votes + REP.total_votes \n\n#Dividing our original feature by our engineered feature gives us a percent, our new engineered feature\ndf3['Percent_of_vote'] = df3['total_votes']\/df3['All_votes'].round()\n\n#Let's sort our dataset to only have one record per county for what percent Joe recieved, called Joe.\nJoe = df3[df3['candidate'] == 'Joe Biden']","6567f205":"#Lastly, we reset the index so that plotly can read our DataFrame as we intend.\nJoe = Joe.reset_index()\nJoe.describe()","5f369672":"std=0.185664\nlower_q = 0.252208\nupper_q = 0.536585\nlow = lower_q-std\nhigh = upper_q + std","b477f0bd":"from urllib.request import urlopen\nimport json\n#bring in our geojson file ###https:\/\/plotly.com\/python\/choropleth-maps\/\n\nwith urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\n\nimport plotly.express as px\nfig = px.choropleth(Joe, geojson=counties, locations='FIPS', color='Percent_of_vote',\n                           color_continuous_scale=\"RdBu\",\n                           range_color=(low, high),  #could be set to (0,1) or (.07, .71) etc.\n                           scope=\"usa\",\n                           hover_data=('county','state')\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","28cd5d87":"FIPS = FIPS.reset_index()","92919326":"Joe[Joe.state=='Alaska'].head() #Alaska's political data goes by ED # where as our FIPS data has named locations","2b61753e":"FIPS[FIPS.state=='Alaska'].head()","c0c25a29":"#Maine has way more locations in our political data then in our FIPS data","efeb1fd8":"Joe[Joe.state=='Maine'].head()","05c4358a":"FIPS[FIPS.state=='Maine'].head()","70b22648":"#Massachusetts has way more locations in our political data then in our FIPS data","58252b65":"Joe[Joe.state=='Massachusetts'].head()","657bc2d9":"FIPS[FIPS.state=='Massachusetts'].head()","db2c7f4a":"Joe[Joe.state=='Hawaii']","b53ecfb7":"FIPS[FIPS.state=='Hawaii']","f7e494a7":"# Hawaii County = 15001 \nJoe.at[725,'FIPS']='15001'\n\n# Honolulu County = 15003\nJoe.at[726,'FIPS']='15003'\n\n# Kalawao County = 15005\n\n# Kauai County = 15007\nJoe.at[727,'FIPS']='15007'\n# Maui County = 15009\nJoe.at[728,'FIPS']='15009'","2d8cdcad":"fig = px.choropleth(Joe, geojson=counties, locations='FIPS', color='Percent_of_vote',\n                           color_continuous_scale=\"RdBu\",\n                           range_color=(low, high),\n                           scope=\"north america\",\n                           hover_data=('county','state'), \n                           projection='orthographic'\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","0542aeb9":"import pandas as pd\n\ndef FIPS_Codes():\n    \n    url = 'https:\/\/en.wikipedia.org\/wiki\/List_of_United_States_FIPS_codes_by_county'\n    fips = pd.read_html(url)                                                                                                   \n    fips = fips[1]    \n\n    FIPS = fips.rename(columns={'State or equivalent':'state', 'County or equivalent':'county'}) \n    FIPS['FIPS']=FIPS['FIPS'].apply(lambda x:str(x) if x>=10000 else '0'+str(x))\n    FIPS.county=FIPS.county.str.replace(' County', '')\n    FIPS = FIPS.set_index(['state', 'county'])\n\n    FIPS = FIPS.reset_index()\n\n    conn = FIPS[FIPS.state == 'Connecticut']\n    conn['county'] = conn['county'].str.replace('\\[k\\]', '') \n    FIPS = FIPS[FIPS.state != 'Connecticut'].append(conn)\n\n\n    dict = {'state':['Hawaii', 'Hawaii','Hawaii','Hawaii','Hawaii'],\n            'county':['Hawaii', 'Honolulu', 'Kalawao', 'Kauai', 'Maui'],\n            'FIPS':['15001', '15003', '15005', '15007', '15009']\n           }\n  \n    df2 = pd.DataFrame(dict)\n    FIPS = FIPS.append(df2)\n    FIPS = FIPS.rename(columns={'state':'State', 'county':'County'})\n    FIPS = FIPS.set_index(['State', 'County'])\n    return FIPS\n","4393b19a":"FIPS = FIPS_Codes()","775c6101":"FIPS = FIPS.reset_index()","ea8b3ba9":"FIPS.to_csv('FIPS_Codes_Counties')","886cdae2":"FIPS.tail(20)","4bb9e5a7":"Since not every state calculates votes by county, merging voting records by FIPS for Maine, Massachusetts, and Alaska are not as simple.","9b537844":"Closer inspection reveals that we have some states that didn't get our FIPS merge","34f8a87c":"# Adding FIPS Codes to Political Data","097e44a6":"First, let's bring in our FIPS code from Wikipedia, and create a dataframe. It will help us to merge if we name our features as they are named in our other dataset.","7ef7f453":"Without downloading anything, you can copy and paste the above block and so long as you have internet and the appropriate packages, you will be able to return a dataframe called FIPS which has a dual index of state and county. You may also reset the index, and save that as a csv for your own work.","17bec890":"The Goal of this Notebook is to amend a dataset to include FIPS codes, as requested by the Data Science community.","c5fffe39":"# Conclusion","87032d10":"Graphing our data was a helpful excercise because it let us see issues in merging FIPS data with our political datasets. However, if you only wanted to have the merged dataset, here is some final code that cleans up the FIPS data to make it easily appendable (a summary of above).  ","a5969204":"If you are more familiar with Alaska, and would like to take over, here is a website that may be helpful\nhttps:\/\/www.elections.alaska.gov\/Core\/listofpollingplacelocations.php","d9eed2b3":"We could set our color range for our graph between 0-1, which would be from 0-100% of the county that voted for Joe, but I posit that it is more useful to use the quartiles and standard deviation because it is an objective way to color the graph without bias, while still allowing the colors to be useful in reading the graph. A reasonable person could disagree and use another range, or anyways change this range to intentionally bias the graph.","49171175":"Since I am 'passing the buck' on Alaska, I will make one final change, which is to set the graph perameters to \"north america\", and the projection to 'orthographic'. If it pleases you, you may '# out' projection and get a flat map.","0a0a8d29":"# Graphing With FIPS","ee48ff42":"It looks like Hawaii doesn't even have any records in our FIPS dataset, but since we only need four, it isn't too much trouble to add manually","90f01d04":"# Nice, but we aren't done yet...","b8f1da72":"This next section demonstrates how we can take our FIPS appended datasets to make nice graphs. Using the presidential election by county dataset, we can compare how counties voted for Biden and Trump relative to each other with a choropleth graph. "}}