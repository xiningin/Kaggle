{"cell_type":{"b0782d16":"code","0eefd566":"code","38023006":"code","71d4c499":"code","579d3dba":"code","aaa3056f":"code","678f3913":"code","3e8651ca":"code","21d53b53":"code","de317d9f":"code","fd7762cf":"code","9ba22799":"code","1437e7c7":"code","1af2294d":"markdown","e6e4fa04":"markdown","5c87b78b":"markdown","67e19f81":"markdown","f227e00b":"markdown","13b95cbf":"markdown","c7adea4f":"markdown","eea9e74f":"markdown","4591a577":"markdown","953faad7":"markdown","e905c48e":"markdown","f16b0301":"markdown","fcec3c41":"markdown"},"source":{"b0782d16":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom scipy.misc import derivative\nfrom scipy.integrate import quad\nimport numpy as np\nimport math\nimport sympy\nfrom scipy import signal","0eefd566":"d=0.05;         # di\u00e2metro\nA=(np.pi*d**2)\/4;   # \u00c1rea\nk=2500;         # rigidez\nc=10;           # coeficiente de amortecimento\nm=0.25;         # massa\ntao=2;          # per\u00edodo\n\nF0 = 1;       # newton\nx0 = 0          # posicao inicial\nx0p = 0         # velocidade inicial\n\nwn=np.sqrt(k\/m);   # frequ\u00eancia natural\nw=2*np.pi\/tao;     # frequ\u00eancia de excita\u00e7\u00e3o\ncc=2*m*wn;      # coeficiente de amortecimento cr\u00edtico\nzheta=c\/cc;     # fator de amortecimento\nr=w\/wn;         # raz\u00e3o de frequ\u00eancias","38023006":"def fourier(n):\n\n    t = np.linspace(0,3,1000)\n    sq = np.zeros(len(t)) #preallocate the output array\n\n    for h in range(1,n,2):\n    \n        sq += (4\/(np.pi*h))*np.sin(np.pi*h*t)\n        \n    return sq\n\nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 20, 10\n\n        \nt = np.linspace(0,3,1000)\n\nfig, axs = plt.subplots(1)\n\n# criando o gr\u00e1fico das posi\u00e7\u00f5es\n\naxs.plot(t, signal.square(np.pi * t))\n\nfor i in range(1,10,2):\n    axs.plot(t, fourier(i), color='purple', label='Solu\u00e7\u00e3o particular')","71d4c499":"def fourier(n):\n\n    t = np.linspace(0,3,1000)\n    sq = np.zeros(len(t)) #preallocate the output array\n\n    for h in range(1,n,2):\n    \n        sq += (4\/(np.pi*h))*np.sin(np.pi*h*t)\n        \n    return sq\n\nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 20, 10\n\n        \nt = np.linspace(0,3,1000)\n\nfig, axs = plt.subplots(1)\n\n# criando o gr\u00e1fico das posi\u00e7\u00f5es\n\naxs.plot(t, signal.square(np.pi * t))\n\n\naxs.plot(t, fourier(10000), color='purple', label='Solu\u00e7\u00e3o particular')","579d3dba":"def xp(n,t):\n    \n    d=0.05;             # di\u00e2metro\n    A=(np.pi*d**2)\/4;   # \u00c1rea\n    k=2500;             # rigidez\n    c=10;               # coeficiente de amortecimento\n    m=0.25;             # massa\n    tao=2;              # per\u00edodo\n\n    a0 = 1;             # newton\n    x0 = 0              # posicao inicial\n    x0p = 0             # velocidade inicial\n\n    wn=np.sqrt(k\/m);   # frequ\u00eancia natural\n    w=2*np.pi\/tao;     # frequ\u00eancia de excita\u00e7\u00e3o\n    cc=2*m*wn;         # coeficiente de amortecimento cr\u00edtico\n    zheta=c\/cc;        # fator de amortecimento\n    r=w\/wn;            # raz\u00e3o de frequ\u00eancias\n\n    #t = np.linspace(0,3,1000)\n    sq = np.zeros(len(t)) #preallocate the output array\n\n    for h in range(1,n,2):\n    \n        sq += ((4\/(np.pi*h))\/k)*np.sin(np.pi*h*t-np.arctan(2*zheta*h*r\/(1-(h**2)*(r**2))))\/np.sqrt((1-(h**2)*(r**2))**2+(2*zheta*h*r)**2)\n        \n    return a0\/2*k + sq\n\n\n\nrcParams['figure.figsize'] = 20, 10\n\nt = np.linspace(0,3,1000)\n\nfig, axs = plt.subplots(1)\n\n#axs.plot(t, signal.square(np.pi * t))\n\nfor i in range(1,1000,2):\n    axs.plot(t, xp(i,t), color='purple', label='Solu\u00e7\u00e3o particular')","aaa3056f":"def xp(n,t):\n    \n    d=0.05;             # di\u00e2metro\n    A=(np.pi*d**2)\/4;   # \u00c1rea\n    k=2500;             # rigidez\n    c=10;               # coeficiente de amortecimento\n    m=0.25;             # massa\n    tao=2;              # per\u00edodo\n\n    a0 = 1;             # newton\n    x0 = 0              # posicao inicial\n    x0p = 0             # velocidade inicial\n\n    wn=np.sqrt(k\/m);   # frequ\u00eancia natural\n    w=2*np.pi\/tao;     # frequ\u00eancia de excita\u00e7\u00e3o\n    cc=2*m*wn;         # coeficiente de amortecimento cr\u00edtico\n    zheta=c\/cc;        # fator de amortecimento\n    r=w\/wn;            # raz\u00e3o de frequ\u00eancias\n\n    #t = np.linspace(0,3,1000)\n    sq = np.zeros(len(t)) #preallocate the output array\n\n    for h in range(1,n,2):\n    \n        sq += ((4\/(np.pi*h))\/k)*np.sin(np.pi*h*t-np.arctan(2*zheta*h*r\/(1-(h**2)*(r**2))))\/np.sqrt((1-(h**2)*(r**2))**2+(2*zheta*h*r)**2)\n        \n    return a0\/2*k + sq\n\n\n\nrcParams['figure.figsize'] = 20, 10\n\nt = np.linspace(0,3,1000)\n\nfig, axs = plt.subplots(1)\n\n#axs.plot(t, signal.square(np.pi * t))\n\n\naxs.plot(t, xp(100000,t), color='purple', label='Solu\u00e7\u00e3o particular')","678f3913":"def vp(n,t):\n    \n    delta = 0.00000000001\n  \n    # Returns the slope to the third decimal\n    \n    d=0.05;         # di\u00e2metro\n    A=(np.pi*d**2)\/4;   # \u00c1rea\n    k=2500;         # rigidez\n    c=10;           # coeficiente de amortecimento\n    m=0.25;         # massa\n    tao=2;          # per\u00edodo\n\n    a0 = 1;         # newton\n    x0 = 0          # posicao inicial\n    x0p = 0         # velocidade inicial\n\n    wn=np.sqrt(k\/m);   # frequ\u00eancia natural\n    w=2*np.pi\/tao;     # frequ\u00eancia de excita\u00e7\u00e3o\n    cc=2*m*wn;      # coeficiente de amortecimento cr\u00edtico\n    zheta=c\/cc;     # fator de amortecimento\n    r=w\/wn;         # raz\u00e3o de frequ\u00eancias\n\n    #t = np.linspace(0,3,1000)\n    sq = np.zeros(len(t)) #preallocate the output array\n\n    for h in range(1,n,2):\n    \n        sq += ((((4\/(np.pi*h))\/k)*np.sin(np.pi*h*(t+delta)-np.arctan(2*zheta*h*r\/(1-(h**2)*(r**2))))\/np.sqrt((1-(h**2)*(r**2))**2+(2*zheta*h*r)**2))\n                -(((4\/(np.pi*h))\/k)*np.sin(np.pi*h*t-np.arctan(2*zheta*h*r\/(1-(h**2)*(r**2))))\/np.sqrt((1-(h**2)*(r**2))**2+(2*zheta*h*r)**2)))\/delta\n\n    return sq","3e8651ca":"rcParams['figure.figsize'] = 20, 10\n\nt = np.linspace(0,3,1000)\n\nfig, axs = plt.subplots(1)\n\n#axs.plot(t, signal.square(np.pi * t))\n\nfor i in range(1,10,2):\n    axs.plot(t, vp(i,t), color='purple', label='Solu\u00e7\u00e3o particular')","21d53b53":"rcParams['figure.figsize'] = 20, 10\n\nt = np.linspace(0,3,1000)\n\nfig, axs = plt.subplots(1)\n\n#axs.plot(t, signal.square(np.pi * t))\n\n\naxs.plot(t, vp(100000,t), color='purple', label='Solu\u00e7\u00e3o particular')","de317d9f":"def ap(n,t):\n    \n    delta = 0.00000000001\n  \n    # Returns the slope to the third decimal\n    \n    d=0.05;         # di\u00e2metro\n    A=(np.pi*d**2)\/4;   # \u00c1rea\n    k=2500;         # rigidez\n    c=10;           # coeficiente de amortecimento\n    m=0.25;         # massa\n    tao=2;          # per\u00edodo\n\n    a0 = 1;         # newton\n    x0 = 0          # posicao inicial\n    x0p = 0         # velocidade inicial\n\n    wn=np.sqrt(k\/m);   # frequ\u00eancia natural\n    w=2*np.pi\/tao;     # frequ\u00eancia de excita\u00e7\u00e3o\n    cc=2*m*wn;      # coeficiente de amortecimento cr\u00edtico\n    zheta=c\/cc;     # fator de amortecimento\n    r=w\/wn;         # raz\u00e3o de frequ\u00eancias\n\n    #t = np.linspace(0,3,1000)\n    sq = np.zeros(len(t)) #preallocate the output array\n\n    for h in range(1,n,2):\n    \n        sq += (((4\/(np.pi*h))\/k)*np.sin(np.pi*h*(t+delta)-np.arctan(2*zheta*h*r\/(1-(h**2)*(r**2))))\/np.sqrt((1-(h**2)*(r**2))**2+(2*zheta*h*r)**2))-2*((4\/(np.pi*h))\/k)*np.sin(np.pi*h*t-np.arctan(2*zheta*h*r\/(1-(h**2)*(r**2))))\/np.sqrt((1-(h**2)*(r**2))**2+(2*zheta*h*r)**2)+((4\/(np.pi*h))\/k)*np.sin(np.pi*h*(t-delta)-np.arctan(2*zheta*h*r\/(1-(h**2)*(r**2))))\/np.sqrt((1-(h**2)*(r**2))**2+(2*zheta*h*r)**2)\/(delta**2)\n\n    return sq","fd7762cf":"rcParams['figure.figsize'] = 20, 10\n\nt = np.linspace(0,3,1000)\n\nfig, axs = plt.subplots(1)\n\n#axs.plot(t, signal.square(np.pi * t))\n\nfor i in range(1,10,2):\n    axs.plot(t, ap(i,t), color='purple', label='Solu\u00e7\u00e3o particular')","9ba22799":"rcParams['figure.figsize'] = 20, 10\n\nt = np.linspace(0,3,1000)\n\nfig, axs = plt.subplots(1)\n\n#axs.plot(t, signal.square(np.pi * t))\n\n\naxs.plot(t, ap(100000,t), color='purple', label='Solu\u00e7\u00e3o particular')","1437e7c7":"from pylab import rcParams\n\nrcParams['figure.figsize'] = 20, 10\n\ny = np.linspace(0,10,5000)\n\nfig, axs = plt.subplots(3)\n\n# criando o gr\u00e1fico das posi\u00e7\u00f5es\n\naxs[0].plot(y, xp(100000,y), color='purple', label='posi\u00e7\u00e3o')\naxs[0].set_title('Posi\u00e7\u00e3o')\n#axs[0].set_ylim(49.75,50.25)\naxs[0].set_xlim(0,4)\naxs[0].legend()\naxs[0].grid(True)\n\n\n# criando o gr\u00e1fico das posi\u00e7\u00f5es\n\n\naxs[1].plot(y, vp(100000,y), color='green', label='velocidade')\naxs[1].set_title('Velocidade')\n#axs[1].set_ylim(-1,1)\naxs[1].set_xlim(0,4)\naxs[1].legend()\naxs[1].grid(True)\n\n\n# criando o gr\u00e1fico das posi\u00e7\u00f5es\n\n\naxs[2].plot(y, ap(100000,y), color='red', label='acelera\u00e7\u00e3o')\naxs[2].set_title('Acelera\u00e7\u00e3o')\n#axs[2].set_ylim(-1,1)\naxs[2].set_xlim(0,4)\naxs[2].legend()\naxs[2].grid(True)","1af2294d":"# Eq da velocidade de um movimento para regime permanente","e6e4fa04":"Para n = 100000","5c87b78b":"# Gr\u00e1ficos todos juntos","67e19f81":"n = 100000","f227e00b":"# Eq da acelera\u00e7\u00e3o de um movimento para regime permanente","13b95cbf":"n = 100000","c7adea4f":"# ENTREGA\n","eea9e74f":"Para n = 10000","4591a577":"https:\/\/sandipanweb.wordpress.com\/2020\/06\/21\/fourier-series-and-differential-equations-with-some-applications\/","953faad7":"Para n = 100000","e905c48e":"# Eq. da posi\u00e7\u00e3o de um movimento para regime permanente","f16b0301":"* A for\u00e7a considerada tem m\u00f3dulo igual a 1 e \u00e9 alternada.\n* Como \u00e9 uma onda quadrada com comportamento \u00edmpar, s\u00f3 teremos o bn.\n\n![](https:\/\/sandipanweb.files.wordpress.com\/2020\/06\/f4-1.png)","fcec3c41":"# Come\u00e7ando com uma serie de fourier"}}