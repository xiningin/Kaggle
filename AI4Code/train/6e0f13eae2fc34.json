{"cell_type":{"ffc142bc":"code","f2214864":"code","f8e260d8":"code","f38257b3":"code","bddddf20":"code","a538e524":"code","702f9020":"code","3cc9a00c":"code","727a6a22":"code","3dddc93f":"code","9b47e561":"code","a0707bde":"code","850d7913":"code","742e3b29":"code","93b3684b":"code","3ea01c1f":"code","1fec200d":"code","bdc085bb":"code","0ad61048":"code","a8bdeef3":"code","74f0429f":"code","87da1205":"code","f5344b09":"code","26b96382":"code","01ca2570":"code","be63501c":"code","bd69be6f":"code","ad5754dc":"code","c7769727":"code","d57f798a":"code","9a4145a3":"code","b34a446e":"code","3af5760b":"code","b593037e":"code","67baa679":"code","877c222e":"code","92cc947e":"code","9b51146b":"code","cb384211":"code","a6f1f94c":"code","1ca04b55":"code","67a8f3dd":"code","417f7d64":"code","8bd195df":"code","a894fc46":"code","0aad2726":"code","77237751":"code","3f852d89":"code","82e6610b":"code","8c3e14b7":"code","c89190de":"code","1364a49e":"code","11a14b60":"code","cc3018b8":"code","83d061ac":"code","b8a8e101":"code","2abe11b2":"code","3720a217":"code","a3556771":"code","2498ba2c":"code","1c97b334":"code","0b3912f3":"code","32d95e19":"code","108db78d":"code","8464c344":"code","aeff502c":"code","034f4fb1":"code","898b626a":"code","f978a331":"code","849c4efa":"code","9bc82cc0":"code","68efb101":"code","a962160e":"code","0e658fff":"code","a71c7570":"code","e9eb866b":"code","806969cb":"code","e9712d69":"code","05390a59":"code","303e0c65":"code","2450d221":"code","299a7913":"code","deca594b":"code","50eda3ff":"code","0d7a7d5c":"code","d93fa022":"code","dfead9f5":"code","7f075b3a":"code","819cde23":"code","141b6788":"code","948bb23d":"code","7f4b4934":"code","44961dc5":"code","e356c0e8":"code","7ebd7217":"code","c7804f38":"code","620af495":"markdown","a0b2571d":"markdown","6bdcef9b":"markdown","4ad8da47":"markdown","d205c555":"markdown","bdd0878f":"markdown","1ca6f1b4":"markdown","155a850f":"markdown","43f1b53d":"markdown","574e7674":"markdown","0719daf7":"markdown","a5695631":"markdown","cb823555":"markdown","700e1996":"markdown","17459180":"markdown","9469f5f7":"markdown","2db45045":"markdown","d4a457c5":"markdown","f7d65737":"markdown","9e0bbec8":"markdown","5c90a374":"markdown","60e173d5":"markdown","bac098bf":"markdown","f4c7044b":"markdown","730f3147":"markdown","41de0015":"markdown","fd6d97ce":"markdown"},"source":{"ffc142bc":"# !pip install numpy pandas seaborn matplotlib\n# !pip list\n# !pip install sklearn\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n%matplotlib inline \nimport matplotlib.pyplot as plt\nimport sklearn","f2214864":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f8e260d8":"# Read the Data\nraw_train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nraw_train_data.head(10)","f38257b3":"raw_train_data.info()\n# Insights\n# Null values exists in Age (float) ==> Around 177 values out of 891 are null values\n# Null values exists in Embarked (object) ==> Around 2 values out of 891 are null\n# Null values exists in  Cabin (object) ==> Around 687 cabin values out of 891 are missing, contd....\n# which is more than 50% ==> Replacing\/predicting cabin nan values here can be bad idea","bddddf20":"raw_train_data['Pclass'].value_counts()\n# Insights: There were 3 passenger classes","a538e524":"# Lets see if survival has any relation with passenger class\nsns.countplot(x=raw_train_data['Survived'],hue=raw_train_data['Pclass'])\n# Insights: Pclass 3 has least survival\n# This Feature will be important for classification ","702f9020":"sns.countplot(x=raw_train_data['Survived'],hue=raw_train_data['Sex'])\n# Males have very less survival rate compared to females.\n# This feature is also important for classification","3cc9a00c":"sns.displot(raw_train_data, x=\"Age\", hue=\"Survived\", kind=\"kde\")","727a6a22":"# 1 indicates value is missing\/nan\nraw_train_data['Age_nan_status'] = raw_train_data['Age'].map(lambda x: 1 if pd.isnull(x) else 0)\ntest_data['Age_nan_status'] = test_data['Age'].map(lambda x: 1 if pd.isnull(x) else 0)","3dddc93f":"# 1 indicates value is missing\/nan\nraw_train_data['Cabin_nan_status'] = raw_train_data['Cabin'].map(lambda x: 1 if pd.isnull(x) else 0)\ntest_data['Cabin_nan_status'] = test_data['Cabin'].map(lambda x: 1 if pd.isnull(x) else 0)","9b47e561":"# plot shows missing values are more in case of the passenger who didnt survived, hence we can use this as a feature \nsns.countplot(x=raw_train_data['Survived'],hue=raw_train_data['Age_nan_status'])","a0707bde":"# plot shows missing values are more in case of the passenger who didnt survived, hence we can use this as a feature\nsns.countplot(x=raw_train_data['Survived'],hue=raw_train_data['Cabin_nan_status'])","850d7913":"fn_title_extract = (lambda name: name.split(',')[1].split('.')[0])\nraw_train_data['Title'] = raw_train_data['Name'].map(fn_title_extract)\nraw_train_data['Title'].value_counts()\n\n# Observations: There are some other titles like Dr, Rev, etc which all can mapped to Mr, Mrs, Master, Miss\n","742e3b29":"# Mapping all titles to Mr, Mrs, Master, Miss\nMr_synonyms = ['mr','dr','rev','major','col','capt','sir','jonkheer','don']\nMrs_synonyms = ['mrs','the countess','countess','mme','lady']\nMiss_synonyms = ['miss','ms','mlle']\nMaster_synonyms = ['master']\n\ntitle_replace = (lambda title: 'mr' if title in Mr_synonyms else ('mrs' if title in Mrs_synonyms else ('miss' if title in Miss_synonyms else ('master' if title in Master_synonyms else 'mr'))))\n\nraw_train_data['Title']= raw_train_data['Title'].map(lambda i: title_replace(i.lower().strip()))\nraw_train_data.loc[(raw_train_data['Title']=='mr') & (raw_train_data['Sex']=='female') ,'Title'] = 'mrs'\nraw_train_data['Title'].value_counts()\n# So now we have removed all other titles, also if thr is an unknown title which doesnt lie in any list will be mapped to 'mr'","93b3684b":"# Lets see Age distribution with Title\nsns.barplot(data=raw_train_data, x='Title', y='Age')\n# Title definitely gives good estimate of ages \n# Hence, assumption2 stands correct","3ea01c1f":"sns.barplot(data=raw_train_data, x='Title', y='Age',hue='Pclass')","1fec200d":"sns.barplot(data=raw_train_data, x='Title', y='Age',hue='Embarked')","bdc085bb":"# calculating mean ages as per title and pclass\ncondition_mr_pclass_1 = (raw_train_data['Title']=='mr') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==0)\ncondition_mr_pclass_2 = (raw_train_data['Title']=='mr') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==0)\ncondition_mr_pclass_3 = (raw_train_data['Title']=='mr') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==0)\nmean_mr_pclass_1 = raw_train_data[condition_mr_pclass_1]['Age'].mean()\nmean_mr_pclass_2 = raw_train_data[condition_mr_pclass_2]['Age'].mean()\nmean_mr_pclass_3 = raw_train_data[condition_mr_pclass_3]['Age'].mean()\nprint('Average ages of passengers with Title Mr in pclass 1,2,3:',mean_mr_pclass_1,mean_mr_pclass_2,mean_mr_pclass_3)","0ad61048":"# calculating mean ages as per title and pclass\ncondition_mrs_pclass_1 = (raw_train_data['Title']=='mrs') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==0)\ncondition_mrs_pclass_2 = (raw_train_data['Title']=='mrs') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==0)\ncondition_mrs_pclass_3 = (raw_train_data['Title']=='mrs') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==0)\nmean_mrs_pclass_1 = raw_train_data[condition_mrs_pclass_1]['Age'].mean()\nmean_mrs_pclass_2 = raw_train_data[condition_mrs_pclass_2]['Age'].mean()\nmean_mrs_pclass_3 = raw_train_data[condition_mrs_pclass_3]['Age'].mean()\nprint('Average ages of passengers with Title Mrs in pclass 1,2,3:',mean_mrs_pclass_1,mean_mrs_pclass_2,mean_mrs_pclass_3)","a8bdeef3":"# calculating mean ages as per title and pclass\ncondition_miss_pclass_1 = (raw_train_data['Title']=='miss') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==0)\ncondition_miss_pclass_2 = (raw_train_data['Title']=='miss') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==0)\ncondition_miss_pclass_3 = (raw_train_data['Title']=='miss') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==0)\nmean_miss_pclass_1 = raw_train_data[condition_miss_pclass_1]['Age'].mean()\nmean_miss_pclass_2 = raw_train_data[condition_miss_pclass_2]['Age'].mean()\nmean_miss_pclass_3 = raw_train_data[condition_miss_pclass_3]['Age'].mean()\nprint('Average ages of passengers with Title Miss in pclass 1,2,3:',mean_miss_pclass_1,mean_miss_pclass_2,mean_miss_pclass_3)","74f0429f":"# calculating mean ages as per title and pclass\ncondition_master_pclass_1 = (raw_train_data['Title']=='master') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==0)\ncondition_master_pclass_2 = (raw_train_data['Title']=='master') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==0)\ncondition_master_pclass_3 = (raw_train_data['Title']=='master') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==0)\nmean_master_pclass_1 = raw_train_data[condition_master_pclass_1]['Age'].mean()\nmean_master_pclass_2 = raw_train_data[condition_master_pclass_2]['Age'].mean()\nmean_master_pclass_3 = raw_train_data[condition_master_pclass_3]['Age'].mean()\nprint('Average ages of passengers with Title Master in pclass 1,2,3:',mean_master_pclass_1,mean_master_pclass_2,mean_master_pclass_3)","87da1205":"# Filling mean values for mr title\ncondition_mr_pclass_1_nan = (raw_train_data['Title']=='mr') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==1)\ncondition_mr_pclass_2_nan = (raw_train_data['Title']=='mr') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==1)\ncondition_mr_pclass_3_nan = (raw_train_data['Title']=='mr') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==1)\nraw_train_data.loc[condition_mr_pclass_1_nan,'Age'] = mean_mr_pclass_1\nraw_train_data.loc[condition_mr_pclass_2_nan,'Age'] = mean_mr_pclass_2\nraw_train_data.loc[condition_mr_pclass_3_nan,'Age'] = mean_mr_pclass_3","f5344b09":"# Filling mean values for mr title\ncondition_mrs_pclass_1_nan = (raw_train_data['Title']=='mrs') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==1)\ncondition_mrs_pclass_2_nan = (raw_train_data['Title']=='mrs') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==1)\ncondition_mrs_pclass_3_nan = (raw_train_data['Title']=='mrs') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==1)\nraw_train_data.loc[condition_mrs_pclass_1_nan,'Age'] = mean_mrs_pclass_1\nraw_train_data.loc[condition_mrs_pclass_2_nan,'Age'] = mean_mrs_pclass_2\nraw_train_data.loc[condition_mrs_pclass_3_nan,'Age'] = mean_mrs_pclass_3","26b96382":"# Filling mean values for mr title\ncondition_miss_pclass_1_nan = (raw_train_data['Title']=='miss') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==1)\ncondition_miss_pclass_2_nan = (raw_train_data['Title']=='miss') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==1)\ncondition_miss_pclass_3_nan = (raw_train_data['Title']=='miss') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==1)\nraw_train_data.loc[condition_miss_pclass_1_nan,'Age'] = mean_miss_pclass_1\nraw_train_data.loc[condition_miss_pclass_2_nan,'Age'] = mean_miss_pclass_2\nraw_train_data.loc[condition_miss_pclass_3_nan,'Age'] = mean_miss_pclass_3","01ca2570":"# Filling mean values for mr title\ncondition_master_pclass_1_nan = (raw_train_data['Title']=='master') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==1)\ncondition_master_pclass_2_nan = (raw_train_data['Title']=='master') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==1)\ncondition_master_pclass_3_nan = (raw_train_data['Title']=='master') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==1)\nraw_train_data.loc[condition_master_pclass_1_nan,'Age'] = mean_master_pclass_1\nraw_train_data.loc[condition_master_pclass_2_nan,'Age'] = mean_master_pclass_2\nraw_train_data.loc[condition_master_pclass_3_nan,'Age'] = mean_master_pclass_3","be63501c":"raw_train_data[raw_train_data['Age_nan_status']==1]['Age'] \n# confirming if all nan values are replaced","bd69be6f":"# Just to debug if nan values were replaced correctly. new distribution remains same as earlier\nsns.barplot(data=raw_train_data, x='Title', y='Age',hue='Pclass')","ad5754dc":"raw_train_data['Age_bins'] = pd.cut(raw_train_data.Age,bins=[0,10,20,30,40,50,60,70,80,120],labels=[1,2,3,4,5,6,7,8,9])","c7769727":"sns.countplot(data = raw_train_data ,x='Age_bins',hue='Survived')","d57f798a":"sns.countplot(data=raw_train_data, x='Title', hue='Survived')","9a4145a3":"fn_surname_extract = (lambda name: name.split(',')[0])\nraw_train_data['Surname'] = raw_train_data['Name'].map(fn_surname_extract)\nsurname_groupby = raw_train_data.groupby(['Surname','Ticket'])\n","b34a446e":"# 0 ==> travelling alone\n# 1 ===> travelling in small group of 2 or 3 members\n# 2 ====> travelling in large groups >3 members\n\ngroup_size_fn = (lambda x: 0 if len(x)==1 else(1 if (len(x)>1) & (len(x)<4) else 2 ) )\nraw_train_data['group'] = surname_groupby.Age.transform(group_size_fn )\nsns.countplot(data=raw_train_data,x='group',hue='Survived')","3af5760b":"sns.countplot(data=raw_train_data,x='group',hue='Sex')","b593037e":"min_age = 15\nprint_fn = (lambda x: print(x))\nmin_age_fn = (lambda x: 1 if min(x)<min_age else 0)\nraw_train_data['group_wth_child'] = surname_groupby.Age.transform(min_age_fn)\nsns.countplot(data=raw_train_data,x='group_wth_child',hue='Survived')","67baa679":"elder_age = 50\nprint_fn = (lambda x: print(x))\nelder_age_fn = (lambda x: 1 if max(x)>elder_age else 0)\nraw_train_data['group_wth_elder'] = surname_groupby.Age.transform(elder_age_fn)\nsns.countplot(data=raw_train_data,x='group_wth_elder',hue='Survived')","877c222e":"def count_fn(x):\n    female_count = 0\n    total_count = 0\n    for i in x:\n        total_count = total_count + 1\n        if i=='female':\n            female_count = female_count + 1\n    return 1 if female_count\/total_count > 0.5 else 0 \n        \nraw_train_data['group_female_dominant'] = surname_groupby.Sex.transform(count_fn)\nsns.countplot(data=raw_train_data,x='group_female_dominant',hue='Survived')","92cc947e":"raw_train_data['cabin_init'] = raw_train_data['Cabin'].map(lambda x: x if pd.isna(x) else x[0])","9b51146b":"sns.countplot(data=raw_train_data, x='Survived', hue='cabin_init',hue_order=['A','B','C','D','E','F','G','T'])","cb384211":"raw_train_data['SibSp'].value_counts()","a6f1f94c":"raw_train_data['Parch'].value_counts()","1ca04b55":"sns.catplot(data = raw_train_data,x='Survived',y='SibSp',kind='bar',hue='Sex')","67a8f3dd":"sns.countplot(x=raw_train_data['Parch'],hue=raw_train_data['Survived'])","417f7d64":"sns.countplot(x=raw_train_data['SibSp'],hue=raw_train_data['Survived'])","8bd195df":"raw_train_data['SibSp_depend'] = raw_train_data['SibSp'].map(lambda x: 1 if x>0 else 0 )","a894fc46":" raw_train_data['Parch_depend'] = raw_train_data['Parch'].map(lambda x: 1 if x>0 else 0 )","0aad2726":"raw_train_data['Ticket'].unique()","77237751":"raw_train_data['Ticket_length'] = raw_train_data['Ticket'].map(lambda x: len(x))\nsns.countplot(data = raw_train_data,x='Ticket_length',hue='Survived')","3f852d89":"sns.countplot(data = raw_train_data,x='Ticket_length',hue='Pclass')","82e6610b":"raw_train_data['Ticket_length_bins'] = pd.cut(raw_train_data['Ticket_length'],bins=[0,3.5,4.5,5.5,6.5,7.5,8.5,9.5,10.5,20],labels=[3,4,5,6,7,8,9,10,11])\nsns.countplot(data=raw_train_data,x='Ticket_length_bins',hue='Survived')","8c3e14b7":"sns.displot(raw_train_data, x=\"Fare\", hue=\"Survived\", kind=\"kde\")","c89190de":"raw_train_data['Fare_bins'] = pd.cut(raw_train_data.Fare,bins=[-5,50,100,150,200,250,300,1000],labels=[1,2,3,4,5,6,7])","1364a49e":"sns.countplot(data=raw_train_data,x='Fare_bins',hue='Survived')","11a14b60":"sns.countplot(data = raw_train_data,x='Embarked',hue='Survived')","cc3018b8":"# Encoding required\n\n# Sex ===> Ordinal\n# Title ===> Onehot\n# Embarked ===> Onehot\n# Ticket Length\n# Pclass # Ordinal encoding can also work\n\n\n# Encoding Not required\n\n# Age ==> Divide into bins\n# Fare ==> Divide into bins\n# Cabin_nan_status\n# Age_nan_status \n# Group","83d061ac":"from sklearn.preprocessing import OneHotEncoder ","b8a8e101":"raw_train_data['Embarked'] = raw_train_data['Embarked'].map(lambda x: 'Embarked_nan' if pd.isna(x) else x)\nraw_train_data['cabin_init'] = raw_train_data['cabin_init'].map(lambda x: 'Cabin_nan' if pd.isna(x) else x)","2abe11b2":"one_hot_obj = OneHotEncoder() # Creating Object OneHot encoding Object\none_hot_array = one_hot_obj.fit_transform(raw_train_data[['Pclass','Title','Embarked','cabin_init','Ticket_length_bins']]) # Outputs sparse matrix for space saving\ntype(one_hot_array)","3720a217":"one_hot_obj.categories_","a3556771":"X = pd.DataFrame()  # X is training Data\nX[['Pclass_1','Pclass_2','Pclass_3','master', 'miss', 'mr', 'mrs','C', 'Q', 'S', 'Embarked_nan','cabin_A', 'cabin_B', 'cabin_C', 'cabin_D', 'cabin_E', 'cabin_F', 'cabin_G', 'cabin_T', 'Cabin_nan','Tick_len_3',  'Tick_len_4',  'Tick_len_5',  'Tick_len_6',  'Tick_len_7',  'Tick_len_8',  'Tick_len_9', 'Tick_len_10', 'Tick_len_11']] = one_hot_array.toarray()\nX = X.drop(['Embarked_nan','Cabin_nan'],axis=1)\nX","2498ba2c":"raw_train_data.head() # For verification, if encoding is correct","1c97b334":"from sklearn.preprocessing import OrdinalEncoder ","0b3912f3":"Sex_ordinal_encod_obj = OrdinalEncoder()\nX['Sex'] = Sex_ordinal_encod_obj.fit_transform(raw_train_data[['Sex']])\nX","32d95e19":"Sex_ordinal_encod_obj.categories_","108db78d":"y = raw_train_data['Survived']","8464c344":"X[['Age_bins','Fare_bins','Cabin_nan_status','Age_nan_status','SibSp','Parch','group','group_wth_child','group_wth_elder','group_female_dominant']] = raw_train_data[['Age_bins','Fare_bins','Cabin_nan_status','Age_nan_status','SibSp','Parch','group','group_wth_child','group_wth_elder','group_female_dominant']]\nX.info()","aeff502c":"from sklearn.linear_model import SGDClassifier","034f4fb1":"sgd_clf = SGDClassifier(random_state=42)\n","898b626a":"from sklearn.model_selection import cross_val_score\ncross_val_score(sgd_clf, X, y, cv=3, scoring=\"accuracy\")","f978a331":"from sklearn.ensemble import RandomForestClassifier\nforest_clf = RandomForestClassifier(random_state=4)\ncross_val_score(forest_clf, X, y, cv=3)","849c4efa":"from sklearn.ensemble import RandomForestClassifier\nforest_clf = RandomForestClassifier(random_state=43)\ncross_val_score(forest_clf, X, y, cv=10)","9bc82cc0":"X_new = X.drop(['group','group_wth_child','group_wth_elder','group_female_dominant'],axis=1)\nfrom sklearn.ensemble import RandomForestClassifier\nforest_clf = RandomForestClassifier(random_state=4)\ncross_val_score(forest_clf, X_new, y, cv=10)","68efb101":"fn_title_extract = (lambda name: name.split(',')[1].split('.')[0])\ntest_data['Title'] = test_data['Name'].map(fn_title_extract)\ntest_data['Title'].value_counts()","a962160e":"# Mapping all titles to Mr, Mrs, Master, Miss\nMr_synonyms = ['mr','dr','rev','major','col','capt','sir','jonkheer','don']\nMrs_synonyms = ['mrs','the countess','countess','mme','lady']\nMiss_synonyms = ['miss','ms','mlle']\nMaster_synonyms = ['master']\n\ntitle_replace = (lambda title: 'mr' if title in Mr_synonyms else ('mrs' if title in Mrs_synonyms else ('miss' if title in Miss_synonyms else ('master' if title in Master_synonyms else 'mr'))))\n\ntest_data['Title']= test_data['Title'].map(lambda i: title_replace(i.lower().strip()))\ntest_data.loc[(test_data['Title']=='mr') & (test_data['Sex']=='female') ,'Title'] = 'mrs'\ntest_data['Title'].value_counts()","0e658fff":"# Filling mean values for mr title\ncondition_mr_pclass_1_nan = (test_data['Title']=='mr') & (test_data['Pclass']==1) & (test_data['Age_nan_status']==1)\ncondition_mr_pclass_2_nan = (test_data['Title']=='mr') & (test_data['Pclass']==2) & (test_data['Age_nan_status']==1)\ncondition_mr_pclass_3_nan = (test_data['Title']=='mr') & (test_data['Pclass']==3) & (test_data['Age_nan_status']==1)\ntest_data.loc[condition_mr_pclass_1_nan,'Age'] = mean_mr_pclass_1\ntest_data.loc[condition_mr_pclass_2_nan,'Age'] = mean_mr_pclass_2\ntest_data.loc[condition_mr_pclass_3_nan,'Age'] = mean_mr_pclass_3","a71c7570":"condition_mrs_pclass_1_nan = (test_data['Title']=='mrs') & (test_data['Pclass']==1) & (test_data['Age_nan_status']==1)\ncondition_mrs_pclass_2_nan = (test_data['Title']=='mrs') & (test_data['Pclass']==2) & (test_data['Age_nan_status']==1)\ncondition_mrs_pclass_3_nan = (test_data['Title']=='mrs') & (test_data['Pclass']==3) & (test_data['Age_nan_status']==1)\ntest_data.loc[condition_mrs_pclass_1_nan,'Age'] = mean_mrs_pclass_1\ntest_data.loc[condition_mrs_pclass_2_nan,'Age'] = mean_mrs_pclass_2\ntest_data.loc[condition_mrs_pclass_3_nan,'Age'] = mean_mrs_pclass_3","e9eb866b":"condition_miss_pclass_1_nan = (test_data['Title']=='miss') & (test_data['Pclass']==1) & (test_data['Age_nan_status']==1)\ncondition_miss_pclass_2_nan = (test_data['Title']=='miss') & (test_data['Pclass']==2) & (test_data['Age_nan_status']==1)\ncondition_miss_pclass_3_nan = (test_data['Title']=='miss') & (test_data['Pclass']==3) & (test_data['Age_nan_status']==1)\ntest_data.loc[condition_miss_pclass_1_nan,'Age'] = mean_miss_pclass_1\ntest_data.loc[condition_miss_pclass_2_nan,'Age'] = mean_miss_pclass_2\ntest_data.loc[condition_miss_pclass_3_nan,'Age'] = mean_miss_pclass_3","806969cb":"condition_master_pclass_1_nan = (test_data['Title']=='master') & (test_data['Pclass']==1) & (test_data['Age_nan_status']==1)\ncondition_master_pclass_2_nan = (test_data['Title']=='master') & (test_data['Pclass']==2) & (test_data['Age_nan_status']==1)\ncondition_master_pclass_3_nan = (test_data['Title']=='master') & (test_data['Pclass']==3) & (test_data['Age_nan_status']==1)\ntest_data.loc[condition_master_pclass_1_nan,'Age'] = mean_master_pclass_1\ntest_data.loc[condition_master_pclass_2_nan,'Age'] = mean_master_pclass_2\ntest_data.loc[condition_master_pclass_3_nan,'Age'] = mean_master_pclass_3","e9712d69":"test_data.info()","05390a59":"test_data['cabin_init'] = test_data['Cabin'].map(lambda x: x if pd.isna(x) else x[0])","303e0c65":"test_data['Ticket_length'] = test_data['Ticket'].map(lambda x: len(x))\ntest_data['Ticket_length_bins'] = pd.cut(test_data['Ticket_length'],bins=[0,3.5,4.5,5.5,6.5,7.5,8.5,9.5,10.5,20],labels=[3,4,5,6,7,8,9,10,11])","2450d221":"test_data['Surname'] = test_data['Name'].map(fn_surname_extract)\ntest_data_surname_groupby = test_data.groupby(['Surname','Ticket'])\n\n\n# 0 ==> travelling alone\n# 1 ===> travelling in small group of 2 or 3 members\n# 2 ====> travelling in large groups >3 members\n\n\ntest_data['group'] = test_data_surname_groupby.Age.transform(group_size_fn )\n\n\ntest_data['group_wth_child'] = test_data_surname_groupby.Age.transform(min_age_fn)\n\n\ntest_data['group_wth_elder'] = test_data_surname_groupby.Age.transform(elder_age_fn)\n\n\ntest_data['group_female_dominant'] = test_data_surname_groupby.Sex.transform(count_fn)","299a7913":"test_data['Embarked'] = test_data['Embarked'].map(lambda x: 'Embarked_nan' if pd.isna(x) else x)\ntest_data['cabin_init'] = test_data['cabin_init'].map(lambda x: 'Cabin_nan' if pd.isna(x) else x)","deca594b":"# Encoding\n#one_hot_obj = OneHotEncoder() # Creating Object OneHot encoding Object\none_hot_array = one_hot_obj.transform(test_data[['Pclass','Title','Embarked','cabin_init','Ticket_length_bins']]) # Outputs sparse matrix for space saving\ntype(one_hot_array)","50eda3ff":"X_test = pd.DataFrame()  # X is training Data\nX_test[['Pclass_1','Pclass_2','Pclass_3','master', 'miss', 'mr', 'mrs','C', 'Q', 'S','Embarked_nan','cabin_A', 'cabin_B', 'cabin_C', 'cabin_D', 'cabin_E', 'cabin_F', 'cabin_G', 'cabin_T', 'Cabin_nan','Tick_len_3',  'Tick_len_4',  'Tick_len_5',  'Tick_len_6',  'Tick_len_7',  'Tick_len_8',  'Tick_len_9', 'Tick_len_10', 'Tick_len_11']] = one_hot_array.toarray()\nX_test = X_test.drop(['Embarked_nan','Cabin_nan'],axis=1)\nX_test","0d7a7d5c":"one_hot_obj.categories_","d93fa022":"test_data.head()","dfead9f5":"#Sex_ordinal_encod_obj = OrdinalEncoder()\nX_test['Sex'] = Sex_ordinal_encod_obj.transform(test_data[['Sex']])\nX_test","7f075b3a":"test_data['Age_bins'] = pd.cut(test_data.Age,bins=[0,10,20,30,40,50,60,70,80,120],labels=[1,2,3,4,5,6,7,8,9])","819cde23":"test_data['Fare_bins'] = pd.cut(test_data.Fare,bins=[-5,50,100,150,200,250,300,1000],labels=[1,2,3,4,5,6,7])","141b6788":"# version 1\n#X_test[['Age','Cabin_nan_status','Age_nan_status','SibSp','Parch']] = test_data[['Age','Cabin_nan_status','Age_nan_status','SibSp','Parch']]\n# X_test","948bb23d":"# version 2\nX_test[['Age_bins','Fare_bins','Cabin_nan_status','Age_nan_status','SibSp','Parch','group','group_wth_child','group_wth_elder','group_female_dominant']] = test_data[['Age_bins','Fare_bins','Cabin_nan_status','Age_nan_status','SibSp','Parch','group','group_wth_child','group_wth_elder','group_female_dominant']]\nmean_fare = raw_train_data['Fare'].mean()\nX_test.loc[pd.isnull(X_test['Fare_bins']),['Fare_bins']] = 1","7f4b4934":"X","44961dc5":"X_test","e356c0e8":"sgd_clf_2 = SGDClassifier(random_state=42)\nsgd_clf_2.fit(X, y)\ny_test = sgd_clf_2.predict(X_test)\ny_test\noutput = pd.DataFrame()\noutput['PassengerId'] = test_data['PassengerId']\noutput['Survived'] = y_test","7ebd7217":"#output.to_csv('output.csv',index=False)","c7804f38":"best_rf = RandomForestClassifier(random_state=121, criterion='entropy', max_depth=9, min_samples_leaf=5, min_samples_split=2, n_estimators=50)\nX_new = X.drop(['group_female_dominant','group'],axis=1)\nX_test_new = X_test.drop(['group_female_dominant','group'],axis=1)\nbest_rf.fit(X, y)\ny_test = best_rf.predict(X_test)\noutput = pd.DataFrame()\noutput['PassengerId'] = test_data['PassengerId']\noutput['Survived'] = y_test\noutput.to_csv('output_1.csv',index=False)","620af495":"# Feature: Age and Cabin ","a0b2571d":"#  Hence, we use new Feature 'Title' and existing feature 'Pclass' to fill missing nan values in 'Age' Column","6bdcef9b":"# Feature: Embarked","4ad8da47":"### Embarked feature doesnt give much information on ages.","d205c555":"# Test data","bdd0878f":"# Feature: Cabin ","1ca6f1b4":"## Age column nan values replaced. And, converted to discrete bins.","155a850f":"# Assumption 2: Names feature can be helpful in identifying missing age values\n## Titles in name can be helpful for ages and also to predict survival","43f1b53d":"# Classification Algorithm ","574e7674":"# Feature: Fare","0719daf7":"# Feature: Sex ==> Encoding","a5695631":"# Random Forest","cb823555":"#  Lets see if other features such as Pclass and Embarked can add more information on missing ages","700e1996":"### Assumption 1: Missing age and cabin values can be more in case of passengers who didn't survive Lets create new features showing whether age\/cabin is missing\/nan or not for particular passenger id. Then, lets try to validate our assumption by plots","17459180":"# Stochastic Gradient Classifier","9469f5f7":"# Features: group, group_wth_child, group_wth_elder, group_female_dominant \n## derived features","2db45045":"# Final Predictions","d4a457c5":"## Family with higher ages are travelling through Pclass 1 & 2. And relatively younger families are traveling through Pclass 3 (Conclusion from above plot)","f7d65737":"# Classification","9e0bbec8":"# Feature: Pclass","5c90a374":"# Feature: Sex","60e173d5":"# Feature: Ticket","bac098bf":"# Feature: Title (Derived Feature)","f4c7044b":"# Feature: SibSp and Parch","730f3147":"### Conclusion: Plot shows nan values are less in case where passengers have survived. Hence, Age_nan_status and Cabin_nan_status can be use as other features.","41de0015":"# Derived Feature: Ticket Length","fd6d97ce":"# Encoding"}}