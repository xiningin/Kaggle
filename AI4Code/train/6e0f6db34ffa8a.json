{"cell_type":{"2ec366f0":"code","48bd2416":"code","60cb878f":"code","235c58e6":"code","c57b6bbc":"code","ae57b4c8":"code","5f4ae277":"code","88284e00":"code","529458f2":"code","07eba821":"code","0474233c":"code","da036134":"code","8f763b30":"code","cf0d24ae":"code","c47dc10a":"code","3aa30684":"code","3ec7fed1":"markdown","99a774ed":"markdown","14e25fc7":"markdown","b5b365db":"markdown","fff53b19":"markdown","91330f0d":"markdown","6db0130b":"markdown","1e0b92c4":"markdown","ef5d6143":"markdown","2f494731":"markdown","3d0c4068":"markdown","de827209":"markdown"},"source":{"2ec366f0":"import re\nimport os\nimport math\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow import keras\n\nfrom functools import partial\nfrom kaggle_datasets import KaggleDatasets\nfrom sklearn.model_selection import train_test_split\nprint(\"Tensorflow version \" + tf.__version__)","48bd2416":"AUTOTUNE = tf.data.experimental.AUTOTUNE\nBATCH_SIZE = 16 \nIMAGE_SIZE = [512, 512]\nCLASSES = ['0', '1', '2', '3', '4']\nCLASS_NAMES = ['Cassava Bacterial Blight', 'Cassava Brown Streak Disease', \n               'Cassava Green Mottle', 'Cassava Mosaic Disease', \n               'Healthy']\n\nEPOCHS = 7","60cb878f":"def decode_image(image):\n    image = tf.image.decode_jpeg(image, channels = 3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.reshape(image, [*IMAGE_SIZE, 3])\n    return image","235c58e6":"def read_tfrecord(example, labeled):\n    tfrecord_format = {'image': tf.io.FixedLenFeature([], tf.string), \n                       'target': tf.io.FixedLenFeature([], tf.int64)} if labeled else \\\n     {'image': tf.io.FixedLenFeature([], tf.string), \n      'image_name': tf.io.FixedLenFeature([], tf.string)}\n    \n    example = tf.io.parse_single_example(example, tfrecord_format)\n    image = decode_image(example['image'])\n    if labeled:\n        label = tf.cast(example['target'], tf.int32)\n        return image, label\n    idnum = example['image_name']\n    return image, idnum","c57b6bbc":"def load_dataset(filenames, labeled = True, ordered = False):\n    # For optimal performance, reading from multiple files at once\n    # Order does not matter since we will be shuffling the data anyway\n    ignore_order = tf.data.Options()\n    if not ordered:\n        # disable order, increase speed\n        ignore_order.experimental_deterministic = False \n        \n    # automatically interleaves reads from multiple files\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads = AUTOTUNE) \n    \n    # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.with_options(ignore_order) \n    \n    dataset = dataset.map(partial(read_tfrecord, labeled = labeled), num_parallel_calls = AUTOTUNE)\n    return dataset","ae57b4c8":"TEST_FILENAMES = tf.io.gfile.glob('..\/input\/cassava-leaf-disease-classification\/test_tfrecords\/ld_test*.tfrec')","5f4ae277":"def count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)","88284e00":"NUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nNUM_TEST_IMAGES","529458f2":"def data_augment(image, label): \n    image = tf.image.random_flip_left_right(image)\n    return image, label","07eba821":"def get_test_dataset(ordered = False):\n    dataset = load_dataset(TEST_FILENAMES, labeled = False, ordered = ordered)\n    dataset = dataset.batch(BATCH_SIZE).prefetch(AUTOTUNE)\n    return dataset","0474233c":"print(\"Test data shapes:\")\nfor image, idnum in get_test_dataset().take(3):\n    print(image.numpy().shape, idnum.numpy().shape)\nprint(\"Test data IDs:\", idnum.numpy().astype('U')) # U = unicode string","da036134":"testing_dataset = get_test_dataset()\ntesting_dataset = testing_dataset.unbatch().batch(20)\ntest_batch = iter(testing_dataset)","8f763b30":"model = tf.keras.models.load_model('..\/input\/casava-leaf-disease-classification\/model.h5')","cf0d24ae":"# this code will convert our test image data to a float32 \ndef to_float32(image, label):\n    return tf.cast(image, tf.float32), label","c47dc10a":"test_ds = get_test_dataset(ordered = True) \ntest_ds = test_ds.map(to_float32)\n\nprint('Computing predictions...')\ntest_images_ds = testing_dataset\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis = -1)\n\nprint(predictions)","3aa30684":"print('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]),\n           fmt=['%s', '%d'], delimiter=',', header='image_id,label', comments='')\n!head submission.csv","3ec7fed1":"## Import section","99a774ed":"## Data decoding","14e25fc7":"## Number of test examples","b5b365db":"## CSV file generation","fff53b19":"## Test data","91330f0d":"## Data Augmentation","6db0130b":"## Set up some constant variables","1e0b92c4":"## Load trained model","ef5d6143":"## Read TFRecords dataset","2f494731":"## Function to prepare test dataset","3d0c4068":"## Parse single example from TFRecord format","de827209":"## Make predictions"}}