{"cell_type":{"5cc0414a":"code","289aac20":"code","6e0b86bc":"code","735429cb":"code","a578f7c5":"code","737c0ec3":"markdown","c47ca392":"markdown","35cc67ca":"markdown"},"source":{"5cc0414a":"import pandas as pd\nimport numpy as np\ndf = pd.read_csv(\"..\/input\/spam-email\/spam.csv\")\ndf.head()","289aac20":"df.Category = df.Category.apply(lambda x: 1 if x == 'spam' else 0)","6e0b86bc":"from sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.tokenize import word_tokenize\nfrom sklearn import metrics\nfrom sklearn import model_selection\nfrom sklearn import linear_model","735429cb":"if __name__ == \"__main__\":\n    #create a new column called kfold and fill it with -1\n    df['kfold'] = -1\n    #randomize the rows of the data\n    df = df.sample(frac = 1).reset_index(drop = True)\n    \n    y = df.Category.values\n    #initialize the kfold class \n    kf = model_selection.StratifiedKFold(n_splits = 5)\n    #fill the new kfold column\n    for feature, (train, validation) in enumerate(kf.split(X =df, y =y)):\n        df.loc[validation, 'kfold'] = feature\n    #let's go over the folds created\n    for fold_ in range(5):\n        #temporary dataframes for train and test\n        train_df = df[df.kfold != fold_].reset_index(drop = True)\n        test_df = df[df.kfold == fold_].reset_index(drop = True)\n        \n        #initialize count vectorizer\n        count_vec = CountVectorizer(tokenizer = word_tokenize, token_pattern = None)\n        \n        #fit the count on trainig data Message\n        count_vec.fit(train_df.Message)\n        #transform\n        X_train = count_vec.transform(train_df.Message)\n        X_test = count_vec.transform(test_df.Message)\n        \n        #initialize Logistic regression\n        model = linear_model.LogisticRegression()\n        #fit the model\n        model.fit(X_train, train_df.Category)\n        preds = model.predict(X_test)\n        \n        #calculate accuracy\n        accuracy = metrics.accuracy_score(test_df.Category, preds)\n        \n        print(f\"Fold: {fold_}\")\n        print(f\"Accuracy: {accuracy}\")\n        print(\"\")","a578f7c5":"print(f\"The mean accuracy is: {accuracy.mean()}\")","737c0ec3":"Upvote if you like it or fork it! :)","c47ca392":"## I am a firm believer of simplicity.\n## Rather than trying highly complex model a simple linear model can give a very good accuracy and it helps beginners too.\n### So here comes our beloved Logistic Regression by which we can classify whether a text is spam or ham.","35cc67ca":"![](https:\/\/blog.comodo.com\/wp-content\/uploads\/top-anti-spam-email-filter.png)"}}