{"cell_type":{"ac4396aa":"code","582e510f":"code","7cf43064":"code","5e7eb1e0":"code","9587c15a":"code","15e119e3":"code","08e84893":"code","e6e30495":"code","2deb77db":"code","73bd3dbf":"code","e10602b7":"code","5f15498c":"code","65451186":"code","075fbbef":"code","cb65e41f":"code","477c6fda":"code","c661d871":"code","8b68a10d":"code","231261f2":"code","a73d52dd":"code","a08dbc6c":"markdown","a366d3c8":"markdown"},"source":{"ac4396aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","582e510f":"df = pd.read_csv('..\/input\/skin-cancer-mnist-ham10000\/HAM10000_metadata.csv')","7cf43064":"df.head(10)","5e7eb1e0":"df2 = pd.read_csv('..\/input\/skin-cancer-mnist-ham10000\/hmnist_28_28_L.csv')\ndf2.head()","9587c15a":"labels = [\"akiec\",\"bcc\", \"bkl\", \"df\", \"nv\", \"vasc\", \"mel\"]","15e119e3":"n_samples = len(df2.index)\nimages = np.array(df2.drop(['label'],axis=1))\nimages = images.reshape(n_samples,28,28)","08e84893":"plt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(images[i], cmap=\"gray_r\")\n    plt.title(labels[df2.label[i]])","e6e30495":"y = df2['label'].values\nX = df2.drop(['label'] , axis=1).values","2deb77db":"X = X\/255","73bd3dbf":"num_classes = 25","e10602b7":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","5f15498c":"from keras.models import Sequential\nfrom keras.layers import Dense","65451186":"model = Sequential()\n# model.add(Dense(200, activation='relu'))\n# model.add(Dense(60, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))","075fbbef":"model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","cb65e41f":"train = model.fit(X_train , y_train , validation_data=(X_test,y_test), epochs=30, verbose=1)","477c6fda":"model.evaluate(X_test,y_test)","c661d871":"print(train.history['accuracy'])","8b68a10d":"print(train.history['val_accuracy'])","231261f2":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","a73d52dd":"plot_scores(train)","a08dbc6c":"# Donn\u00e9es","a366d3c8":"# R\u00e9seaux denses (Keras\/Tensorflow)"}}