{"cell_type":{"130c49d5":"code","85308af2":"code","72b6df1a":"code","23907e57":"code","0ffb1777":"code","bde7e41e":"code","e4fb9d10":"code","54bae8e2":"code","b28bc1de":"code","80bc4baf":"code","6ffea953":"code","426be937":"code","5159adc8":"code","7efcbd79":"code","1de18fdb":"code","19733416":"markdown","e4ee21b1":"markdown","c7628832":"markdown","6e086a4b":"markdown","41ebc6ed":"markdown"},"source":{"130c49d5":"import pandas as pd\nimport numpy as np\nimport random\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import plot_confusion_matrix, accuracy_score\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\n","85308af2":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","72b6df1a":"application_data = pd.read_csv('\/kaggle\/input\/loan-defaulter\/application_data.csv')","23907e57":"label_vector = application_data['TARGET']\nnp.unique(label_vector, return_counts=True)","0ffb1777":"dataset_columns = [\n    'CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY', 'AMT_INCOME_TOTAL', 'AMT_CREDIT', 'AMT_ANNUITY',\n    'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE', 'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE', 'DAYS_BIRTH', 'DAYS_EMPLOYED', \n    'DAYS_ID_PUBLISH', 'FLAG_MOBIL', 'FLAG_EMP_PHONE', 'FLAG_WORK_PHONE', 'FLAG_CONT_MOBILE', 'FLAG_PHONE', 'FLAG_EMAIL',\n    'OCCUPATION_TYPE', 'CNT_FAM_MEMBERS', 'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3', 'OBS_30_CNT_SOCIAL_CIRCLE', \n    'DEF_30_CNT_SOCIAL_CIRCLE', 'OBS_60_CNT_SOCIAL_CIRCLE', 'DEF_60_CNT_SOCIAL_CIRCLE', 'DAYS_LAST_PHONE_CHANGE', \n    'FLAG_DOCUMENT_2', 'FLAG_DOCUMENT_3', 'FLAG_DOCUMENT_4', 'FLAG_DOCUMENT_5', 'FLAG_DOCUMENT_6', 'FLAG_DOCUMENT_7', \n    'FLAG_DOCUMENT_8', 'FLAG_DOCUMENT_9', 'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_11', 'FLAG_DOCUMENT_12', 'FLAG_DOCUMENT_13', \n    'FLAG_DOCUMENT_14', 'FLAG_DOCUMENT_15', 'FLAG_DOCUMENT_16', 'FLAG_DOCUMENT_17', 'FLAG_DOCUMENT_18', 'FLAG_DOCUMENT_19', \n    'FLAG_DOCUMENT_20', 'FLAG_DOCUMENT_21', 'AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_DAY', 'AMT_REQ_CREDIT_BUREAU_WEEK', \n    'AMT_REQ_CREDIT_BUREAU_MON', 'AMT_REQ_CREDIT_BUREAU_QRT', 'AMT_REQ_CREDIT_BUREAU_YEAR', 'TARGET'\n]","bde7e41e":"categorical_features = [\n    'CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY', 'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE', 'NAME_FAMILY_STATUS',\n    'NAME_HOUSING_TYPE', 'FLAG_MOBIL', 'FLAG_EMP_PHONE', 'FLAG_WORK_PHONE', 'FLAG_CONT_MOBILE', 'FLAG_PHONE', 'FLAG_EMAIL',\n    'OCCUPATION_TYPE', 'EXT_SOURCE_1', 'FLAG_DOCUMENT_2', 'FLAG_DOCUMENT_3', 'FLAG_DOCUMENT_4', 'FLAG_DOCUMENT_5', \n    'FLAG_DOCUMENT_6', 'FLAG_DOCUMENT_7', 'FLAG_DOCUMENT_8', 'FLAG_DOCUMENT_9', 'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_11', \n    'FLAG_DOCUMENT_12', 'FLAG_DOCUMENT_13', 'FLAG_DOCUMENT_14', 'FLAG_DOCUMENT_15', 'FLAG_DOCUMENT_16', 'FLAG_DOCUMENT_17', \n    'FLAG_DOCUMENT_18', 'FLAG_DOCUMENT_19', 'FLAG_DOCUMENT_20', 'FLAG_DOCUMENT_21'\n]\nnumerical_features = [\n    'AMT_INCOME_TOTAL', 'AMT_CREDIT', 'AMT_ANNUITY', 'DAYS_BIRTH', 'DAYS_EMPLOYED', 'DAYS_ID_PUBLISH', 'CNT_FAM_MEMBERS', \n    'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3', 'OBS_30_CNT_SOCIAL_CIRCLE', 'DEF_30_CNT_SOCIAL_CIRCLE', \n    'OBS_60_CNT_SOCIAL_CIRCLE', 'DEF_60_CNT_SOCIAL_CIRCLE', 'DAYS_LAST_PHONE_CHANGE', 'AMT_REQ_CREDIT_BUREAU_HOUR', \n    'AMT_REQ_CREDIT_BUREAU_DAY', 'AMT_REQ_CREDIT_BUREAU_WEEK', 'AMT_REQ_CREDIT_BUREAU_MON', 'AMT_REQ_CREDIT_BUREAU_QRT', \n    'AMT_REQ_CREDIT_BUREAU_YEAR'\n]","e4fb9d10":"application_data['AMT_ANNUITY'] = application_data['AMT_ANNUITY'].fillna(0)\napplication_data['OCCUPATION_TYPE'] = application_data['OCCUPATION_TYPE'].fillna('UNKNOWN')\napplication_data['CNT_FAM_MEMBERS'] = application_data['CNT_FAM_MEMBERS'].fillna(0)\napplication_data['EXT_SOURCE_1'] = application_data['EXT_SOURCE_1'].fillna(0)\napplication_data['EXT_SOURCE_2'] = application_data['EXT_SOURCE_2'].fillna(0)\napplication_data['EXT_SOURCE_3'] = application_data['EXT_SOURCE_3'].fillna(0)\napplication_data['OBS_30_CNT_SOCIAL_CIRCLE'] = application_data['OBS_30_CNT_SOCIAL_CIRCLE'].fillna(0)\napplication_data['DEF_30_CNT_SOCIAL_CIRCLE'] = application_data['DEF_30_CNT_SOCIAL_CIRCLE'].fillna(0)\napplication_data['OBS_60_CNT_SOCIAL_CIRCLE'] = application_data['OBS_60_CNT_SOCIAL_CIRCLE'].fillna(0)\napplication_data['DEF_60_CNT_SOCIAL_CIRCLE'] = application_data['DEF_60_CNT_SOCIAL_CIRCLE'].fillna(0)\napplication_data['DAYS_LAST_PHONE_CHANGE'] = application_data['DAYS_LAST_PHONE_CHANGE'].fillna(3650)\napplication_data['AMT_REQ_CREDIT_BUREAU_HOUR'] = application_data['AMT_REQ_CREDIT_BUREAU_HOUR'].fillna(0)\napplication_data['AMT_REQ_CREDIT_BUREAU_DAY'] = application_data['AMT_REQ_CREDIT_BUREAU_DAY'].fillna(0)\napplication_data['AMT_REQ_CREDIT_BUREAU_WEEK'] = application_data['AMT_REQ_CREDIT_BUREAU_WEEK'].fillna(0)\napplication_data['AMT_REQ_CREDIT_BUREAU_MON'] = application_data['AMT_REQ_CREDIT_BUREAU_MON'].fillna(0)\napplication_data['AMT_REQ_CREDIT_BUREAU_QRT'] = application_data['AMT_REQ_CREDIT_BUREAU_QRT'].fillna(0)\napplication_data['AMT_REQ_CREDIT_BUREAU_YEAR'] = application_data['AMT_REQ_CREDIT_BUREAU_YEAR'].fillna(0)\n","54bae8e2":"sample_class_1 = application_data[application_data['TARGET'] == 1][:20000]\nsample_class_0 = application_data[application_data['TARGET'] == 0][:20000]\ntreated_dataset = pd.concat([sample_class_1, sample_class_0])[dataset_columns]\ntraining_dataset, testing_dataset = train_test_split(treated_dataset, shuffle=True, stratify=treated_dataset['TARGET'])\n","b28bc1de":"features = list(set(dataset_columns) - set(['TARGET'])) \ntrain_features, Y_train = training_dataset[features], training_dataset['TARGET']\ntest_features, Y_test = testing_dataset[features], testing_dataset['TARGET']","80bc4baf":"column_trans = make_column_transformer(\n    (OneHotEncoder(), categorical_features),\n    (StandardScaler(), numerical_features)\n    )\ntransformer = column_trans.fit(treated_dataset[features])","6ffea953":"X_train = transformer.transform(train_features)\nX_test = transformer.transform(test_features)","426be937":"for max_depth in [5,10,20,50,None]:\n    clf = tree.DecisionTreeClassifier(criterion='entropy', max_depth=max_depth)\n    clf.fit(X_train, Y_train)\n    print(\"Accuracy score for depth: {} = {}\".format(max_depth, accuracy_score(clf.predict(X_test), Y_test)))\n    disp = plot_confusion_matrix(clf, X_test, Y_test,\n                                         cmap=plt.cm.Blues,\n                                         normalize='true')\n    disp.ax_.set_title(\"Confusion matrix for Decision tree classifier with max depth: {}\".format(max_depth))","5159adc8":"for max_depth in [5,10,20,50,None]:\n    clf = RandomForestClassifier(criterion='entropy', max_depth=max_depth, random_state=0)\n    clf.fit(X_train, Y_train)\n    print(\"Accuracy score for depth: {} = {}\".format(max_depth, accuracy_score(clf.predict(X_test), Y_test)))\n    disp = plot_confusion_matrix(clf, X_test, Y_test,\n                                         cmap=plt.cm.Blues,\n                                         normalize='true')\n    disp.ax_.set_title(\"Confusion matrix for Random forrest classifier with max depth: {}\".format(max_depth))","7efcbd79":"xgb_model = xgb.XGBClassifier(n_jobs=-1)\nclf = GridSearchCV(xgb_model,\n                   {'max_depth': [2, 4, 6, 10, 20, 40, 60, 75, 100],\n                    'n_estimators': [50, 100, 200]}, verbose=1, n_jobs=-1)\nclf.fit(X_train, Y_train)","1de18fdb":"print(\"Best params for XGBoost classifier: {}\".format(clf.best_params_))\nprint(\"XGBoost classifier accuracy: {}\".format(accuracy_score(clf.predict(X_test), Y_test)))\ndisp = plot_confusion_matrix(clf, X_test, Y_test,\n                                         cmap=plt.cm.Blues,\n                                         normalize='true')\ndisp.ax_.set_title(\"Confusion matrix for XGBoost classifier\")","19733416":"# Task 1: Decision Tree classification","e4ee21b1":"### Missing value treatment","c7628832":"# Task 3: XGBoost classification","6e086a4b":"# Dataset pre-processing","41ebc6ed":"# Task 2: Random Forest classification"}}