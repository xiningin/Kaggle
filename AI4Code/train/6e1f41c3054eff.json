{"cell_type":{"2495eb3c":"code","cccb1439":"code","87760a93":"code","3eedcedb":"code","da7e6edb":"code","df2ed190":"code","afa04251":"code","4e586bc1":"code","cc7bdc95":"code","74a383f1":"code","b1cff801":"code","ff5cf94e":"code","9c93d640":"code","96a85139":"code","632431cc":"code","bbb172d9":"code","b647310c":"code","8be6e570":"code","82fec94e":"code","609866d8":"code","f60a9de9":"code","51bac936":"code","4fe64c94":"code","de391cfb":"code","c24dc346":"code","61088734":"code","8fdda4b7":"code","163953dc":"code","8ca21eb8":"code","d490f05a":"markdown","ee6d58cb":"markdown","3bdb3be4":"markdown","e67f9041":"markdown","9daad338":"markdown"},"source":{"2495eb3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n        os.path.join(dirname, filename)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cccb1439":"#import keras \nimport tensorflow as tf\nimport sys\n\n\nimport json\nimport math\nimport keras\nimport keras.backend as K\n\n\n\nimport numpy as np\nimport pickle\nimport cv2\nimport pandas as pd\n\n\nimport os\nfrom os import listdir\nfrom sklearn.preprocessing import LabelBinarizer\nfrom keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\n\n\nfrom keras.layers.core import Activation, Flatten, Dropout, Dense\nfrom keras import backend as K\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import img_to_array\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n\n\n\nfrom keras import layers, optimizers\nfrom keras.applications import MobileNetV2\nfrom keras.callbacks import ModelCheckpoint\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout\nfrom keras.losses import categorical_crossentropy\n#from keras.optimizers import adam, sgd\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint\n\n\nfrom keras.models import Model\nfrom keras.optimizers import Adam\nfrom keras.layers import GlobalAveragePooling2D\n\nfrom keras.applications.inception_v3 import InceptionV3\nfrom keras.utils.np_utils import to_categorical\n","87760a93":"print(tf.__version__) \nprint(keras.__version__) ","3eedcedb":"\n#pwd\n","da7e6edb":"EPOCHS = 50\nINIT_LR = 1e-3\nBS = 42\n#default_image_size = tuple((256, 256))\n\ndefault_image_size = tuple((224, 224))\n\nimage_size = 0\ndirectory_root = '..\/input\/plantdisease\/plantvillage\/'\nwidth=224\nheight=224\ndepth=3","df2ed190":"# function to convert images to array\ndef convert_image_to_array(image_dir):\n    try:\n        image = cv2.imread(image_dir)\n        if image is not None :\n            image = cv2.resize(image, default_image_size) \n          #  gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)\n            return img_to_array(image)\n        else :\n            return np.array([])\n    except Exception as e:\n        print(f\"Error : {e}\")\n        return None","afa04251":"#Fetch images in the directory\n\nimage_list, label_list = [], []\n\ntry:\n    print(\"[INFO] Loading images ...\")\n    root_dir = listdir(directory_root)\n    for directory in root_dir :\n        # remove .DS_Store from list\n        if directory == \".DS_Store\" :\n            root_dir.remove(directory)\n\n\n    for plant_folder in root_dir :\n        plant_disease_folder_list = listdir(f\"{directory_root}\/{plant_folder}\")\n        copy=listdir(f\"{directory_root}\/{plant_folder}\")\n        plant_list = []\n        print(plant_disease_folder_list)\n        for disease_folder in copy :\n            # remove .DS_Store from list\n            print(disease_folder)\n            if disease_folder == \".DS_Store\" :\n                plant_disease_folder_list.remove(disease_folder)\n            \n                \n        for plant_disease_folder in plant_disease_folder_list:\n            print(f\"[INFO] Processing {plant_disease_folder} ...\")\n            plant_disease_image_list = listdir(f\"{directory_root}\/{plant_folder}\/{plant_disease_folder}\/\")\n                \n            for single_plant_disease_image in plant_disease_image_list :\n                if single_plant_disease_image == \".DS_Store\" :\n                    plant_disease_image_list.remove(single_plant_disease_image)\n\n            for image in plant_disease_image_list[:350]:\n                image_directory = f\"{directory_root}\/{plant_folder}\/{plant_disease_folder}\/{image}\"\n                if image_directory.endswith(\".jpg\") == True or image_directory.endswith(\".JPG\") == True:\n                    image_list.append(convert_image_to_array(image_directory))\n                    label_list.append(plant_disease_folder)\n    print(\"[INFO] Image loading completed\")  \nexcept Exception as e:\n    print(f\"Error : {e}\")","4e586bc1":"#get size of the processed images\nimage_size = len(image_list)\nprint(image_size)\nprint(len(label_list))","cc7bdc95":"#image_list[0][1]","74a383f1":"image_list[0].shape","b1cff801":"label_binarizer = LabelBinarizer()\nimage_labels = label_binarizer.fit_transform(label_list)\npickle.dump(label_binarizer,open('label_transform.pkl', 'wb'))\nn_classes = len(label_binarizer.classes_)","ff5cf94e":"print(n_classes)","9c93d640":"print(label_binarizer.classes_)","96a85139":"print(np.array(image_list[0]).dtype)","632431cc":"image_list = np.array(image_list, dtype=np.float32)","bbb172d9":"print(\"[INFO] Spliting data to train, test\")\nx_train, x_test, y_train, y_test = train_test_split(image_list, image_labels, test_size=0.2, random_state = 42) \n#changed random state from 10 to 24","b647310c":"aug = ImageDataGenerator(\n    rotation_range=25, width_shift_range=0.1,\n    height_shift_range=0.1, shear_range=0.2, \n    zoom_range=0.2,horizontal_flip=True, \n    fill_mode=\"nearest\")","8be6e570":"from keras.applications import ResNet50\n\nresnet = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n\nfor layer in resnet.layers[:-4]:\n    layer.trainable = False\n\ndef nvidia_model():\n    model = Sequential()\n    model.add(resnet)\n\n    #comment out\n   # model.add(MaxPooling2D(pool_size=(2, 2)))\n   # model.add(Dropout(0.5))\n    \n    model.add(Flatten())\n    \n  \n    model.add(Dense(512, activation='relu'))\n    model.add(Dropout(0.2))\n  \n      \n    \n    model.add(Dense(15,activation='softmax'))\n  \n\n\n    optimizer = Adam(lr=1e-3)\n    model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n    \n    return model\n\nmodel = nvidia_model()\nprint(model.summary())","82fec94e":"checkpoint = ModelCheckpoint('model.h5', monitor='val_loss',verbose=1,save_best_only=True, mode='auto')\n\nhistory = model.fit_generator(\n    aug.flow(x_train, y_train, batch_size=BS),\n    validation_data=(x_test, y_test),\n    steps_per_epoch=len(x_train) \/\/ BS,\n    epochs=30, verbose=1,\n    callbacks=[checkpoint]\n    )","609866d8":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\n#Train and validation accuracy\nplt.plot(epochs, acc, 'b', label='Training accurarcy')\nplt.plot(epochs, val_acc, 'r', label='Validation accurarcy')\nplt.title('Training and Validation accurarcy')\nplt.legend()\n\nplt.figure()\n#Train and validation lossvv\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\nplt.show()","f60a9de9":"#from one-hot encoding to original namin\nytestnames=np.argmax(y_test,axis = 1)\nY_testname = label_binarizer.classes_[ytestnames]\n#Y_testname","51bac936":"#create a function to test the test images\ndef predictdisease(imarray,size):\n    ypred=[]\n    for i in range(size) :\n        #print(i)\n        np_image = np.expand_dims(imarray[i],0)\n        #print(np_image.shape)\n        result = model.predict_classes(np_image) \n        #print(result)\n        ypred.append(result)\n    predictions = label_binarizer.classes_[ypred]\n    return predictions\n\n","4fe64c94":"#perform the prediction\nY_preds =predictdisease(x_test,x_test.shape[0])\n#Y_preds","de391cfb":"import sklearn.metrics as metrics\n#create a confusion matrix\nconfusion_matrix = metrics.confusion_matrix(y_true=Y_testname, y_pred=Y_preds)\n#confusion_matrix\ndisp = metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix,display_labels=label_binarizer.classes_)\n#display the confusion matrix\ndisp.plot(xticks_rotation='vertical') ","c24dc346":"#make predictions using the saved h5 model\nfrom keras.models import load_model\nmodel = load_model('model.h5')","61088734":"def predict_disease(image_path):\n    image_array = convert_image_to_array(image_path)\n    np_image = np.array(image_array, dtype=np.float32)\n    print(np_image.dtype)\n    np_image = np.expand_dims(np_image,0)\n    print(np_image.shape)\n    plt.imshow(plt.imread(image_path))\n    result = model.predict_classes(np_image) \n    print(result)\n    print((label_binarizer.classes_[result]))","8fdda4b7":"#predict the image \npredict_disease(\"..\/input\/plantdisease\/PlantVillage\/Tomato_Early_blight\/00c5c908-fc25-4710-a109-db143da23112___RS_Erly.B 7778.JPG\")","163953dc":"image=\"..\/input\/plantdisease\/PlantVillage\/Tomato__Tomato_mosaic_virus\/0dae2780-43e7-40ac-ae45-95e5318c8f32___PSU_CG 2290.JPG\"\n\npredict_disease(image)","8ca21eb8":"#convert keras model to tflite\nmodel = tf.keras.models.load_model('model.h5')\nconverter =  tf.lite.TFLiteConverter.from_keras_model(model)\ntflite_model = converter.convert()\nopen(\"plant.tflite\", \"wb\").write(tflite_model)","d490f05a":"Splitting the data","ee6d58cb":"Transform Image Labels uisng [Scikit Learn](http:\/\/scikit-learn.org\/)'s LabelBinarizer","3bdb3be4":"Fetch images in the directory","e67f9041":" **function to convert images to array**","9daad338":"print the classes"}}