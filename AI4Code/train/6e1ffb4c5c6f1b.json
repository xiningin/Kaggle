{"cell_type":{"196a0255":"code","90b7168f":"code","297b19cd":"code","04b19797":"code","c7455384":"code","ce993665":"code","043bbb79":"code","d58174f3":"code","f0e2a5de":"code","fe38632b":"code","b061cad4":"code","41f65473":"code","471166aa":"code","5843be9b":"code","431b0ce6":"markdown","c14cbbbb":"markdown","4448bf9b":"markdown","850cc843":"markdown","bced4cc6":"markdown"},"source":{"196a0255":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        data = pd.read_csv(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90b7168f":"from sklearn.model_selection import train_test_split","297b19cd":"data","04b19797":"df = data.copy()","c7455384":"df.isna().sum()","ce993665":"df.info()","043bbb79":"def OHE(df, col):\n    df = df.copy()\n    dummy = pd.get_dummies(df[col], prefix=col, drop_first=True)\n    df = pd.concat([df, dummy], axis=1)\n    df = df.drop(col, axis=1)\n    return df","d58174f3":"def preprocessInputs(df):\n    # Handling the object columns\n    df = df.copy()\n    cols = df.columns\n    for i in cols:\n        df = OHE(df, i)\n    \n    # Splitting into X and y\n    y = df['class_p']\n    X = df.drop('class_p', axis=1)\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42, shuffle=True)\n    \n    return X_train, X_test, y_train, y_test","f0e2a5de":"X_train, X_test, y_train, y_test = preprocessInputs(df)","fe38632b":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","b061cad4":"y_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","41f65473":"cm","471166aa":"from sklearn.metrics import f1_score, roc_auc_score as AUC","5843be9b":"print('     F1 Score:', f1_score(y_test, y_pred))\nprint('ROC AUC Score:', AUC(y_test, y_pred))","431b0ce6":"To many object columns","c14cbbbb":"## Metrics:","4448bf9b":"# Model Creation","850cc843":"No missing values","bced4cc6":"I feel like random forest would be a good model choice for this data set, so lets try using that"}}