{"cell_type":{"9b57164f":"code","e8e4b294":"code","60826442":"code","779f0e8f":"code","ffe9eb56":"code","113e7759":"code","c7e45f53":"code","8364feb0":"code","5d580683":"code","13f919b2":"code","dc31e37f":"markdown","e9483e0c":"markdown","78d3c850":"markdown","20ab8c69":"markdown","69c77846":"markdown","11856660":"markdown","d2eb38a9":"markdown","18f60722":"markdown","5da9da9b":"markdown","ef919ccf":"markdown"},"source":{"9b57164f":"import pandas as pd\nimport numpy as np\n\ndataset = pd.read_csv('..\/input\/heart-disease-prediction-using-logistic-regression\/framingham.csv')","e8e4b294":"# Any missing values?\nprint(dataset.isnull().values.any())\n# Sum of missing values in different columns\nprint(dataset.isnull().sum())","60826442":"dataset = dataset.drop(dataset.columns[[2, 14]], axis=1)\nx = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","779f0e8f":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\nimputer.fit(x)\nx = imputer.transform(x)\n\n# Choosing the most_frequent startegy to be replaced by the missing values since one of the features consists of nomial values","ffe9eb56":"from sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(x, y, train_size=0.7, random_state=666)","113e7759":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nxtrain = sc.fit_transform(xtrain)\nxtest = sc.transform(xtest)","c7e45f53":"# Applying Principal Component Analysis\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=12)\nxtrain = pca.fit_transform(xtrain)\nxtest = pca.transform(xtest)","8364feb0":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(C=0.5, random_state=666)\nlr.fit(xtrain, ytrain)","5d580683":"value_predict = lr.predict(xtest)\n# print(np.concatenate((value_predict.reshape(len(value_predict), 1), ytest.reshape(len(ytest), 1)), axis=1))","13f919b2":"from sklearn.metrics import confusion_matrix, accuracy_score, recall_score, precision_score\nprint(confusion_matrix(ytest, value_predict))\nprint(accuracy_score(ytest, value_predict)*100)\nprint(recall_score(ytest, value_predict)*100)\nprint(precision_score(ytest, value_predict)*100)","dc31e37f":"**# Replacing the missing data after dropping columns**","e9483e0c":"**# Creating the confusion matrix (observes the no. of correct and incorrect predictions)**","78d3c850":"**Importing libraries and dataset**","20ab8c69":"**# Predicting test set results**","69c77846":"**Checking missing values**","11856660":"**# Feature Scaling**","d2eb38a9":"**# Splitting the data set into training set and test set**","18f60722":"**# Feature Selection**","5da9da9b":"**# Dropping columns and spliiting into dependent and independent variables**","ef919ccf":"**# Training the Logistic Regression on the training set**"}}