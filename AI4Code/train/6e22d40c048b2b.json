{"cell_type":{"2ecdc9fe":"code","05ed20f1":"code","eac4b520":"code","9ae2da00":"code","799ee87f":"code","8eb2d076":"code","e0ab7429":"code","892c0eb8":"code","25360a86":"code","10aa36e8":"code","38b0199b":"code","e7ae2104":"markdown","4a1de07a":"markdown","cababce1":"markdown","b97a12af":"markdown","9fc8507d":"markdown","5505bf1e":"markdown","19ab969f":"markdown","f44b20d3":"markdown","da2aa537":"markdown","9a50759c":"markdown","8c4c5bfb":"markdown","0799dc01":"markdown","536a1b24":"markdown","6a99f420":"markdown"},"source":{"2ecdc9fe":"from keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation\nfrom keras.layers.core import Flatten\nfrom keras.layers.core import Dropout\nfrom keras.layers.core import Dense\nfrom keras import backend as K\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.metrics import classification_report\nfrom keras.optimizers import SGD\nfrom keras.datasets import cifar10\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline","05ed20f1":"def MiniVGGNet(width, height, depth, classes):\n    model = Sequential()\n    inputShape = (height, width, depth)\n    chanDim = -1\n\n    if K.image_data_format()==\"channels_first\":\n        inputShape = (depth, height, width)\n        chanDim = 1\n\n    model.add(Conv2D(32, (3,3), padding = \"same\", input_shape = inputShape))\n    model.add(Activation(\"relu\"))\n    model.add(BatchNormalization(axis=chanDim))\n    model.add(Conv2D(32, (3,3), padding = \"same\"))\n    model.add(Activation(\"relu\"))\n    model.add(BatchNormalization(axis=chanDim))\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Dropout(0.25))\n    model.add(Conv2D(64, (3,3), padding = \"same\"))\n    model.add(Activation(\"relu\"))\n    model.add(BatchNormalization(axis=chanDim))\n    model.add(Conv2D(64, (3,3), padding = \"same\"))\n    model.add(Activation(\"relu\"))\n    model.add(BatchNormalization(axis=chanDim))\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Dropout(0.25))\n    model.add(Flatten())\n    model.add(Dense(512))\n    model.add(Activation(\"relu\"))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.5))\n    model.add(Dense(classes))\n    model.add(Activation(\"softmax\"))\n    return model","eac4b520":"print(\"Loading CIFAR-10 data . . . \")\n((trainX, trainY), (testX, testY)) = cifar10.load_data()\n\ntrainX = trainX.astype(\"float\") \/ 255.0\ntestX = testX.astype(\"float\") \/ 255.0","9ae2da00":"lb = LabelBinarizer()\ntrainY = lb.fit_transform(trainY)\ntestY = lb.transform(testY)","799ee87f":"labelNames = [\"airplane\", \"automobile\", \"bird\", \"cat\", \"deer\", \"dog\", \"frog\", \"horse\", \"ship\", \"truck\"]","8eb2d076":"print(\"Compiling Model . . .\")\nopt = SGD(lr=0.01, decay=0.01 \/ 40, momentum=0.9, nesterov=True)\nmodel = MiniVGGNet(width=32, height=32, depth=3, classes=10)\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])","e0ab7429":"print(\"Training Neural Network . . .\")\nH = model.fit(trainX, trainY, validation_data=(testX, testY),\nbatch_size=64, epochs=40, verbose=1)","892c0eb8":"print(\"Evaluating Neural network...\")\npredictions = model.predict(testX, batch_size=64)\nprint(classification_report(testY.argmax(axis=1), predictions.argmax(axis=1), target_names=labelNames))","25360a86":"acc = H.history['accuracy']\nval_acc = H.history['val_accuracy']\nloss = H.history['loss']\nval_loss = H.history['val_loss']\n\nepochs = range(1, len(acc) + 1)","10aa36e8":"plt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and Validation accuracy')\nplt.legend()\nplt.figure()","38b0199b":"plt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\nplt.figure()","e7ae2104":"### Compile the model with loss, optimizer and metric","4a1de07a":"# MiniVGGNet from Scratch using Keras on CIFAR 10. ","cababce1":"### Train the network","b97a12af":"### Plot of Training Accuracy Vs Validation Accuracy","9fc8507d":"### Importing required libraries","5505bf1e":"### Loading CIFAR-10 Dataset","19ab969f":"### End of Notebook, if you like it then upvote it. ","f44b20d3":"### Initialize the label names for the CIFAR-10 dataset","da2aa537":"### A function MiniVGGNet() which takes input of (width, height, depth and number of classes) and model is defined. ","9a50759c":"![](https:\/\/www.researchgate.net\/publication\/332435757\/figure\/fig1\/AS:748140944703488@1555382109474\/Architecture-of-MiniVGGNet.jpg)","8c4c5bfb":"# [](http:\/\/)","0799dc01":"### Convert the labels from integers to vectors","536a1b24":"### Evaluate the network","6a99f420":"### Plot of Training Loss Vs Validation Loss"}}