{"cell_type":{"8f6f6d84":"code","f63b377a":"code","eec5c72c":"code","0332c8de":"code","46f0910d":"code","3f65a973":"code","4d01f419":"code","b4cfcb58":"code","44ded2df":"code","cec729ad":"code","c7a17cd1":"code","d4f432f6":"code","3a3cfcf1":"code","b645a52c":"code","569bf56d":"code","676a0a0b":"code","8ce3d07c":"code","7feefb4f":"code","dde1d87f":"code","f5d2f58f":"code","0d2e16cb":"code","a0f01054":"code","3113cead":"code","e874a346":"code","fa70c003":"code","a702b3d1":"code","881eff53":"code","61bc246f":"code","3376297a":"code","7dba9ad3":"code","70f8485d":"code","06ea1056":"code","c0c82460":"code","32f97579":"code","ca1ec8c4":"code","613b3a2e":"code","d0b5d60b":"code","1f8fedcb":"code","41a220f5":"code","d83f6ac4":"code","099137fb":"code","33b769fe":"code","a28e83f9":"code","87876a8f":"code","834baf3b":"code","be513990":"code","0f4a4b51":"code","39e2ac7c":"code","a25a4d79":"code","e3ec7f61":"code","40d6354d":"code","01b49df0":"code","9572f131":"code","f6ba74eb":"code","63c18184":"code","547c5d0a":"code","69fbc4ec":"code","703f572e":"code","abbc02b2":"code","e3fd1ca5":"code","0fe337e7":"code","746dfa96":"code","ecfa4daa":"code","5cc35e59":"code","bb61e780":"code","7900572d":"code","33e4a34f":"code","a3ba2cd9":"code","74a61d2d":"code","a47b2e26":"code","fb13a485":"code","7e9adae4":"code","b9aa2792":"code","778ffcae":"code","5134e203":"code","0221159e":"code","ae12f29d":"code","e6ddcfcc":"code","446b7f67":"code","4ead8792":"code","213de3bf":"code","49a9ea5f":"code","96d4ddee":"code","51b4394e":"code","05e9e0e3":"code","5e5f8719":"code","7ee6b353":"code","1cf0846b":"code","cc5d5ccb":"code","abefaf97":"code","0f1fc9cc":"code","c590a37f":"code","d11b51f5":"code","b635293d":"code","143c2fb6":"code","948f4285":"code","0896b112":"code","780a6c9f":"code","6ab8048e":"code","6ee807a4":"code","67065478":"code","a0e42e9e":"code","d5daa814":"code","a3aaa5e4":"code","22a29487":"code","6d06ef1a":"code","494636be":"code","47fe84d4":"code","88e115eb":"code","6aedbb2a":"code","6718592e":"code","c40d0879":"code","e001acbb":"code","a134caf1":"code","e366c558":"code","a3f3b0fc":"code","8ab45aec":"code","36e43037":"code","e43e3339":"code","9e86386d":"markdown","59e02b7b":"markdown","5ee93da1":"markdown","81f4a593":"markdown","598d1dd3":"markdown","a30cc39d":"markdown","aaf93abc":"markdown","9ebca849":"markdown","f2ad7868":"markdown","220d87e4":"markdown","5d1f25c4":"markdown","9cce08d6":"markdown","4e6e3981":"markdown"},"source":{"8f6f6d84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f63b377a":"## importing libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\n%matplotlib inline\n\npd.options.display.max_columns = 100\npd.options.display.max_rows = 100\n\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor \nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMRegressor\nfrom sklearn.linear_model import Ridge, RidgeCV\nfrom sklearn.linear_model import ElasticNet, ElasticNetCV\nfrom sklearn.svm import SVR\nfrom mlxtend.regressor import StackingCVRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import KFold, cross_val_score","eec5c72c":"train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain.head()","0332c8de":"test=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest.head()","46f0910d":"sub=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsub.head()","3f65a973":"train.shape","4d01f419":"test.shape","b4cfcb58":"train.info()","44ded2df":"df=pd.concat([train,test])\ndf.shape","cec729ad":"df_num=df.select_dtypes(include=['int64','float64'])\ndf_num.head()","c7a17cd1":"df_cat=df.select_dtypes(include=['object'])\ndf_cat.head()","d4f432f6":"# pandas_profiling.ProfileReport(train_num)","3a3cfcf1":"df_num.describe()","b645a52c":"df_cat.describe()","569bf56d":"corr=df_num.corr()","676a0a0b":"plt.figure(figsize=(25,15))\n    \nsns.heatmap(corr,cmap='YlGnBu',annot=True)\nplt.show()\n\n## Observations: \n\n# high correlations can be seen between:\n\n# a. garage built year and the house built year\n# b. garage cars and garage area\n# c. overall qualification and salesprice\n# d. Total basement sq ft and 1st floor square ft\n# e. Ground living area and salesprice","8ce3d07c":"plt.figure(figsize=(20,10))\ndf.groupby(['YrSold','MoSold'])['MoSold'].count().plot(kind='bar')\nplt.tight_layout()\nplt.show()\n\n## we can see that every year in the months 5,6,7 the houses sold are high!!\n","7feefb4f":"# houses sold every year\nsns.countplot('YrSold',data=df)\nplt.show()","dde1d87f":"# houses built every year\n\nplt.figure(figsize=(20,5))\nsns.countplot('YearBuilt',data=df)\nplt.show()","f5d2f58f":"## analysing basement areas\n\ncols=['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF']\n\nfor i in cols:\n    plt.figure(figsize=(5,2))\n    plt.hist(df[i])\n    plt.xlabel('')\n    plt.title(i,color='g')\n    plt.tight_layout()\n    plt.show()\n\n\n","0d2e16cb":"## analysing categorical basement columns\n\ncols=['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2']\n\nfor i in cols:\n    plt.figure(figsize=(5,2))\n    df.groupby([i])[i].count().plot(kind='bar')\n    plt.xlabel('')\n    plt.title(i,color='g')\n    plt.tight_layout()\n    plt.show()","a0f01054":"### analysing the garage areas\n\ncols= ['GarageYrBlt','GarageCars','GarageArea']\nfor i in cols:\n    plt.figure(figsize=(5,2))\n    plt.hist(df[i])\n    plt.xlabel('')\n    plt.title(i,color='g')\n    plt.tight_layout()\n    plt.show()","3113cead":"## scatter plot\n\n## Ground Living Area \/ Sale Price\nvar='GrLivArea'\ndata=pd.concat([df['SalePrice'],df[var]],axis=1)\ndata.plot.scatter(x=var,y='SalePrice',ylim=(0,800000))\nplt.show()","e874a346":"## Total Basement sf \/ Sale Price\nvar='TotalBsmtSF'\ndata=pd.concat([df['SalePrice'],df[var]],axis=1)\ndata.plot.scatter(x=var,y='SalePrice',ylim=(0,800000))\nplt.show()","fa70c003":"## garage Area \/ Sale Price\nvar='GarageArea'\ndata=pd.concat([df['SalePrice'],df[var]],axis=1)\ndata.plot.scatter(x=var,y='SalePrice',ylim=(0,800000))\nplt.show()","a702b3d1":"### Categorical variables\n\nvar='OverallQual'\ndata=pd.concat([df['SalePrice'],df[var]],axis=1)\nsns.boxplot(x=var,y='SalePrice',data=data)\nplt.show()","881eff53":"var='YearBuilt'\nplt.figure(figsize=(20,5))\ndata=pd.concat([df['SalePrice'],df[var]],axis=1)\nsns.boxplot(x=var,y='SalePrice',data=data)\nplt.show()\n","61bc246f":"### Missing data\n\nround((df.isnull().sum()\/len(df.index)*100),2).sort_values(ascending=False)","3376297a":"df.drop(['PoolQC', 'MiscFeature', 'Alley','Fence','GarageFinish',\n         'GarageCond','GarageQual','GarageYrBlt','GarageType'],axis=1,inplace=True)\n","7dba9ad3":"df['LotFrontage']=df['LotFrontage'].fillna(df['LotFrontage'].median())","70f8485d":"list1 = ['BsmtQual','BsmtExposure','BsmtFinType2','BsmtFinType1','BsmtCond','FireplaceQu','MasVnrType', 'MasVnrArea']","06ea1056":"for i in list1:\n    df[i]=df[i].fillna(df[i].mode()[0])\n    ","c0c82460":"columns_cat = ['Utilities','BsmtFullBath', 'BsmtHalfBath', 'Functional', 'SaleType', 'Exterior2nd', \n           'Exterior1st', 'KitchenQual','MSZoning','Electrical']\ncolumns_num = ['GarageCars', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',  'TotalBsmtSF', 'GarageArea']","32f97579":"for i in columns_cat:\n    df[i]=df[i].fillna(df[i].mode()[0])\n    \nfor i in columns_num:\n    df[i]=df[i].fillna(df[i].median())","ca1ec8c4":"round((df.isnull().sum()\/len(df.index)*100),2).sort_values(ascending=False)\n\n# no null values present ","613b3a2e":"sns.distplot(df['LotArea'])\nplt.show()\n\n## this column data is positively skewed","d0b5d60b":"## applying log transformation to correct positive skewness in the data\n\ndf['LotArea']=np.log(df['LotArea'])\nsns.distplot(df['LotArea'])\nplt.show()","1f8fedcb":"sns.distplot(train['SalePrice'])\nplt.show()\n\nprint(\"Skewness: %f\" % df['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % df['SalePrice'].kurt())\n\n#applying log transformation\ntrain['SalePrice'] = np.log(train['SalePrice'])\n\nsns.distplot(train['SalePrice'])\nplt.show()","41a220f5":"#applying log transformation\ndf['GrLivArea'] = np.log(df['GrLivArea'])\n\nsns.distplot(df['GrLivArea'])\nplt.show()","d83f6ac4":"df.shape","099137fb":"df.head()","33b769fe":"## Feature Engineering\n\n# Create some new features\n\ndf['house_age']=df['YrSold']-df['YearBuilt']\ndf['house_age'].describe()","a28e83f9":"## we could see the minimum value is 1 which is not possible, lets check for that row\n\ndf.loc[df['house_age']<0]\n\n## it is starnge that the house sold year is 2007 and built year is2008.\n## also the yearremodadd is 2009, so we plan to change the year sold to 2009 for this row.","87876a8f":"df.loc[df['house_age']<0,'YrSold']=2009\ndf['house_age']=df['YrSold']-df['YearBuilt']\ndf['house_age'].describe()","834baf3b":"# Total surface area = 1stflr area + 2ndflr area + bsmt area \ndf['TotalSA']=df['1stFlrSF']+df['2ndFlrSF']+df['TotalBsmtSF']\n\n# Total full bathrooms \ndf['TotalBath']=df['FullBath']+0.5*df['HalfBath']\n\n# Total full bsmt bathrooms \ndf['TotalBsmtBath']=df['BsmtFullBath']+0.5*df['BsmtHalfBath']\n","be513990":"df_cat=df.select_dtypes(include=['object'])","0f4a4b51":"df_cat.head()","39e2ac7c":"df_cat.shape","a25a4d79":"for i in df_cat.columns:\n    print(df_cat[i].value_counts())","e3ec7f61":"### we can also drop the columns utilities, streets as it has same values (not many distinct values)\n\ndf_cat.drop(['Street','Utilities'],axis=1,inplace=True)\ndf.drop(['Street','Utilities'],axis=1,inplace=True)","40d6354d":"## Creating dict to map values later\n\ndict={'Y' : 1, 'N' : 0, 'Ex': 1, 'Gd' : 2, 'TA' :3, 'Fa' : 4, 'Po' : 5,  \n     'GLQ' : 1, 'ALQ' : 2, 'BLQ' : 3, 'Rec' : 4, 'LwQ' : 5, 'Unf' : 6, 'NA' :7,\n     'Gd' : 1 , 'Av' :2, 'Mn' : 3, 'No' :4, 'Gtl' : 1, 'Mod' : 2, 'Sev' :3,\n      'Reg' : 1, 'IR1' :2, 'IR2' :3, 'IR3' :4}\n\n## selecting columns for mapping dict\n\ncols=['KitchenQual','LotShape','LandSlope','HeatingQC','FireplaceQu','ExterQual','ExterCond','BsmtQual',\n     'BsmtFinType2','BsmtFinType1','BsmtExposure','BsmtCond','CentralAir']","01b49df0":"for i in cols:\n    df_cat[i]=df_cat[i].map(dict)","9572f131":"df_cat.head()","f6ba74eb":"## creating dummies for remainig categorical variables\n\ndf_dummies=pd.get_dummies(df_cat,drop_first=True)\ndf_dummies.head()","63c18184":"for cols in df_cat.columns:\n    df.drop([cols],axis=1,inplace=True)","547c5d0a":"df.shape","69fbc4ec":"## creating final dataframe\ndf_final=pd.concat([df,df_dummies],axis=1)","703f572e":"df_final=df_final.loc[:,~df_final.columns.duplicated()]","abbc02b2":"df_final.shape","e3fd1ca5":"df_final.head()","0fe337e7":"df_train=df_final.iloc[:1460,:]","746dfa96":"df_test=df_final.iloc[1460:,:]","ecfa4daa":"df_test.drop(['SalePrice'],inplace=True,axis=1)","5cc35e59":"X_train=df_train.drop(['SalePrice'],axis=1)\ny_train=df_train['SalePrice']","bb61e780":"X_train.head()","7900572d":"rf=RandomForestRegressor()","33e4a34f":"rf.fit(X_train,y_train)","a3ba2cd9":"y_pred=rf.predict(df_test)","74a61d2d":"sub=pd.concat([test['Id'],pd.DataFrame(y_pred)],axis=1)\nsub.columns=['Id','SalePrice']\nsub.head()","a47b2e26":"sub.to_csv('Pred_RF.csv',index=False)","fb13a485":"xgb=XGBRegressor()\n\nxgb.fit(X_train,y_train)","7e9adae4":"y_pred=xgb.predict(df_test)","b9aa2792":"sub=pd.concat([test['Id'],pd.DataFrame(y_pred)],axis=1)\nsub.columns=['Id','SalePrice']\nsub.head()","778ffcae":"sub.to_csv('Pred_XGB.csv',index=False)","5134e203":"n_estimators = [100,300,500,700,900,1100,1300,1500]\nmax_depth = [2,3,5,10,15,20,25]\nlearning_rate = [0.05,0.1,0.15,0.20]\nbooster = ['gbtree','gblinear']\nmin_child_weight = [1,2,3,4]\nbase_score = [0.25,0.5,0.75,1.0]","0221159e":"hyperparameter_grid={\n    'n_estimators' : n_estimators,\n    'max_depth' :  max_depth,\n    'learning_rate' : learning_rate,\n    'booster' : booster,\n    'min_child_weight' : min_child_weight,\n    'base_score' : base_score\n} ","ae12f29d":"random_cv=RandomizedSearchCV(estimator=xgb,\n                            param_distributions=hyperparameter_grid,\n                            cv=5,\n                            n_jobs=3,\n                            random_state=42,\n                             n_iter=50,\n                            scoring='neg_mean_absolute_error')","e6ddcfcc":"# random_cv.fit(X_train,y_train)","446b7f67":"# random_cv.best_estimator_","4ead8792":"xgb=XGBRegressor(base_score=0.75, booster='gbtree', colsample_bylevel=1,\n       colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n       importance_type='gain', interaction_constraints='',\n       learning_rate=0.1, max_delta_step=0, max_depth=3,\n       min_child_weight=4, monotone_constraints='()',\n       n_estimators=700, n_jobs=0, num_parallel_tree=1,\n       objective='reg:squarederror', random_state=0, reg_alpha=0,\n       reg_lambda=1, scale_pos_weight=1, subsample=1, tree_method='exact',\n       validate_parameters=1, verbosity=None)","213de3bf":"xgb.fit(X_train,y_train)","49a9ea5f":"y_pred=xgb.predict(df_test)","96d4ddee":"sub=pd.concat([test['Id'],pd.DataFrame(y_pred)],axis=1)\nsub.columns=['Id','SalePrice']\nsub.head()","51b4394e":"sub.to_csv('Pred_XGB_GSCV.csv',index=False)","05e9e0e3":"# cb=CatBoostClassifier()\n\n# cb.fit(X_train,y_train)","5e5f8719":"# y_pred=cb.predict(df_test)","7ee6b353":"# sub=pd.concat([test['Id'],pd.DataFrame(y_pred)],axis=1)\n# sub.columns=['Id','SalePrice']\n# sub.head()","1cf0846b":"# sub.to_csv('Pred_Catb.csv',index=False)","cc5d5ccb":"# from sklearn.ensemble import AdaBoostRegressor\n# adb=AdaBoostRegressor()","abefaf97":"# adb.fit(X_train,y_train)","0f1fc9cc":"# y_pred=adb.predict(df_test)","c590a37f":"# sub=pd.concat([test['Id'],pd.DataFrame(y_pred)],axis=1)\n# sub.columns=['Id','SalePrice']\n# sub.head()","d11b51f5":"# sub.to_csv('Pred_ADB.csv',index=False)\n\n## Didnt perform well --> CATBOOST and ADABOOST","b635293d":" from sklearn.ensemble import GradientBoostingRegressor","143c2fb6":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\n\n\n## huber loss makes it robust to outliers","948f4285":"GBoost.fit(X_train,y_train)","0896b112":"y_pred_gb=GBoost.predict(df_test)","780a6c9f":"sub=pd.concat([test['Id'],pd.DataFrame(y_pred_gb)],axis=1)\nsub.columns=['Id','SalePrice']\nsub.head()","6ab8048e":"sub.to_csv('Pred_GBoost.csv',index=False)","6ee807a4":"model_xgb = XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1,verbosity=0)","67065478":"model_xgb.fit(X_train,y_train)","a0e42e9e":"y_pred_xgb=model_xgb.predict(df_test)","d5daa814":"sub=pd.concat([test['Id'],pd.DataFrame(y_pred_xgb)],axis=1)\nsub.columns=['Id','SalePrice']\nsub.head()","a3aaa5e4":"sub.to_csv('Pred_xgb_param.csv',index=False)","22a29487":"model_lgb = LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11,verbosity=0)","6d06ef1a":"model_lgb.fit(X_train,y_train)","494636be":"y_pred_lgb=model_lgb.predict(df_test)","47fe84d4":"sub=pd.concat([test['Id'],pd.DataFrame(y_pred_lgb)],axis=1)\nsub.columns=['Id','SalePrice']\nsub.head()","88e115eb":"sub.to_csv('Pred_lgbm.csv',index=False)","6aedbb2a":"y_pred=y_pred_lgb*0.30+y_pred_xgb*0.40+y_pred_gb*0.30","6718592e":"sub=pd.concat([test['Id'],pd.DataFrame(y_pred)],axis=1)\nsub.columns=['Id','SalePrice']\nsub.head()","c40d0879":"sub.to_csv('stacked.csv',index=False)","e001acbb":"# Setup cross validation folds\nkf = KFold(n_splits=12, random_state=42, shuffle=True)","a134caf1":"# Ridge Regressor\nridge_alphas = [1e-15, 1e-10, 1e-8, 9e-4, 7e-4, 5e-4, 3e-4, 1e-4, 1e-3, 5e-2, 1e-2, 0.1, 0.3, 1, 3, 5, 10, 15, 18, 20, 30, 50, 75, 100]\nridge = make_pipeline(RobustScaler(), RidgeCV(alphas=ridge_alphas, cv=kf))\n\n# Support Vector Regressor\nsvr = make_pipeline(RobustScaler(), SVR(C= 20, epsilon= 0.008, gamma=0.0003))\n\n\n# Stack up all the models above, optimized using xgboost\nstack_gen = StackingCVRegressor(regressors=(model_xgb, model_lgb, svr, ridge, GBoost, rf),\n                                meta_regressor=model_xgb,\n                                use_features_in_secondary=True)","e366c558":"## fitting several models\n\nsvr_model = svr.fit(X_train,y_train)\n\nridge_model=ridge.fit(X_train,y_train)\n\nstack_gen_model=stack_gen.fit(X_train,y_train)","a3f3b0fc":"# Blend models in order to make the final predictions more robust to overfitting\ndef blended_predictions(X):\n    return ((0.05 * ridge_model.predict(X)) + \\\n            (0.05 * svr_model.predict(X)) + \\\n            (0.2 * GBoost.predict(X)) + \\\n            (0.2 * model_xgb.predict(X)) + \\\n            (0.1 * model_lgb.predict(X)) + \\\n            (0.1 * rf.predict(X)) + \\\n            (0.30 * stack_gen_model.predict(np.array(X))))","8ab45aec":"y_pred=blended_predictions(df_test)","36e43037":"sub=pd.concat([test['Id'],pd.DataFrame(y_pred)],axis=1)\nsub.columns=['Id','SalePrice']\nsub.head()","e43e3339":"sub.to_csv('blend_model.csv',index=False)","9e86386d":"### CATBOOST and ADABOOST","59e02b7b":"### Gradient Boosting","5ee93da1":"imputing some more columns","81f4a593":"Bivariate Analysis","598d1dd3":"### Model Building","a30cc39d":"We should delete the below columns as it has more than 80% null values and doesnt look so important.\n'PoolQC', 'MiscFeature', 'Alley', 'Fence'\n\nWe can also delete the GarageX variables as the most effective garage variables are : G cars and G area.\n\n","aaf93abc":"### XGBOOST","9ebca849":"Splitting train and test data","f2ad7868":"Imputing missing values","220d87e4":"### Random Forest","5d1f25c4":"### XGBOOST with regularization","9cce08d6":"### LGBM ","4e6e3981":"## Stacked Model"}}