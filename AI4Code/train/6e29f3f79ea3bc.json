{"cell_type":{"3f9804aa":"code","ee056269":"code","2d0803a7":"code","ec88fa8a":"code","d3a4d4ea":"code","1162f99a":"code","c6f4bdbe":"code","0e9213c4":"code","edae2feb":"code","98d649a1":"code","7e328f4c":"code","2ff654be":"code","9d57b47a":"code","33e93801":"code","3b7a96b1":"code","078efbb9":"code","48b5defd":"code","805da938":"code","eb314ff3":"code","b5b0560f":"markdown","76da4c7a":"markdown","efb0bb07":"markdown","9f84be9c":"markdown","2bfb78e2":"markdown","da0bd61d":"markdown","4e330dd1":"markdown","f6bc7521":"markdown","4a7b8560":"markdown","65b3fa75":"markdown","3791889d":"markdown","5cdf7494":"markdown","45c97fb1":"markdown","39b993e9":"markdown","4d0e94c7":"markdown","7c712bf4":"markdown","7784a228":"markdown","1b94fc1c":"markdown","9eb01556":"markdown","dcfdbb77":"markdown","1b75692f":"markdown","add829fb":"markdown","4979635f":"markdown","73a2dadd":"markdown","9cb3230a":"markdown","29dcc6d2":"markdown","4b94a42f":"markdown","2b0a2270":"markdown","433259dd":"markdown"},"source":{"3f9804aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ee056269":"import pandas as pd\nimport numpy as np\nfrom wordcloud import WordCloud\nfrom matplotlib import pyplot as plt\nimport matplotlib as mpl\nimport matplotlib.ticker as ticker\nfrom matplotlib.colors import ListedColormap\nimport seaborn as sns\n\n!pip install pywaffle\nfrom pywaffle import Waffle\n\n%matplotlib inline\n\nmycolors = [\"#00589B\", \"#00A0B0\", \"#CF5C78\", \"#F5DF4D\", \"#F0EEE9\", \"#939597\"]\nmycolors2 = [\"#C2BFB5\", \"#F0A1BF\", \"#AFA4CE\", \"#C2BFB5\", \"#F5DF4D\", \"#939597\"]\ncolor_of_year = [\"#88B04B\", \"#5F4B8B\", \"#ff6f61\", \"#0f4c81\"]","2d0803a7":"year_file = {\n    \"2017\": \"\/kaggle\/input\/kaggle-survey-2017\/schema.csv\",\n    \"2018\": \"\/kaggle\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv\",\n    \"2019\": \"\/kaggle\/input\/kaggle-survey-2019\/multiple_choice_responses.csv\",\n    \"2020\": \"\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\"\n}\n\n\ndef generate_question_text(year):\n    file = year_file[year]\n    if year == \"2017\":\n        data = pd.read_csv(file)\n        df = data\n        df[\"question\"] = df[\"Question\"].apply(lambda x: x.split(\"?\")[0])\n        df[\"question\"] = df[\"Question\"].apply(lambda x: x.split(\":\")[0])\n        df.drop_duplicates(subset=[\"question\"], inplace=True)\n    else:\n        data = pd.read_csv(file, nrows=1)\n        df = data.T\n        df[\"question\"] = df.loc[:,0].apply(lambda x: x.split(\"?\")[0])\n        df[\"question\"] = df[\"question\"].apply(lambda x: x.split(\":\")[0])\n        df.drop_duplicates(subset=[\"question\"], inplace=True)\n    \n    text = \" \". join(df[\"question\"].tolist()[1:])\n    return text\n\n\ndef test_color_func(word, font_size, position, orientation, font_path, random_state):\n    if word in high_words:\n        return 'red'\n    else:\n        r, g, b, alpha = plt.get_cmap('viridis')(np.random.randint(0, 256))\n        return (int(r * 255), int(g * 255), int(b * 255))","ec88fa8a":"fig = plt.figure(figsize=(12, 8))\nfig.suptitle('Questions over the years', fontsize=20, fontweight=500)\n\nfor i in range(4):\n    ax = fig.add_subplot(2, 2, i + 1)\n    ax.axis('off')\n    ax.set_title(f\"{2017+i}\", y=-0.1, fontdict={\"fontsize\": 15})\n    text = generate_question_text(f\"{2017+i}\")\n    wordcloud = WordCloud(max_font_size=40, scale=5,\n                          background_color='white').generate(text)\n    high_words = list(wordcloud.words_.keys())[:3]\n    wordcloud.recolor(color_func=test_color_func)\n    ax.imshow(wordcloud)\n\nplt.tight_layout(h_pad=-5.0, w_pad=5.0)\nplt.show()","d3a4d4ea":"fig = plt.figure(\n    FigureClass=Waffle,\n    rows=4,\n    columns=10,  # Either rows or columns could be omitted\n    values=[4, 3, 3, 29, 1],\n    colors=[\"#00589B\", \"#CF5C78\", \"#00A0B0\", \"#cdcdcd60\", \"#ffffff00\"]\n)","1162f99a":"survey_2017 = pd.read_csv(\n    '\/kaggle\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv',\n    skiprows=[1],\n    low_memory=False,\n    encoding='latin1')\nsurvey_2018 = pd.read_csv(\n    '\/kaggle\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv',\n    skiprows=[1],\n    low_memory=False)\nsurvey_2019 = pd.read_csv(\n    '\/kaggle\/input\/kaggle-survey-2019\/multiple_choice_responses.csv',\n    skiprows=[1],\n    low_memory=False)\nsurvey_2020 = pd.read_csv(\n    '\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv',\n    skiprows=[1],\n    low_memory=False)\nsurvey_2020.loc[survey_2020['Q2'] == 'Man', 'Q2'] = 'Male'\nsurvey_2020.loc[survey_2020['Q2'] == 'Woman', 'Q2'] = 'Female'","c6f4bdbe":"def rename_country(x):\n    if x == \"United Kingdom of Great Britain and Northern Ireland\" or x == \"United Kingdom\":\n        return \"UK\"\n    elif x == \"United States of America\":\n        return \"USA\"\n    elif x == \"People 's Republic of China\":\n        return \"China\"\n    else:\n        return x\n    \n    \nvar_list = ['Country', 'Q3', 'Q3', 'Q3']\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()['survey_' + x]\n    df[\"Country\"] = df[var_list[i]].apply(rename_country)\n    df = pd.DataFrame(df[\"Country\"].value_counts(normalize=True, dropna=False))\n    df.columns = [x]\n    df = df[df.index != 'Other'].head(n=10)\n    df.sort_values(by=[x], inplace=True)\n    globals()['all' + x] = df\n    \n\nfig, ax = plt.subplots(2, 2, figsize=(12, 10))\nfig.suptitle('Top 10 countries where Kagglers reside in', fontsize=20, y=1.05, fontweight=500)\n\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()['all' + x]\n    df[x].plot.barh(ax=ax[int(i \/ 2)][i % 2],\n                    color=[color_of_year[i]],\n                    legend=True,\n                    width=0.4)\n    ax[int(i \/ 2)][i % 2].spines[\"bottom\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].spines[\"top\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].spines[\"right\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].set_yticklabels(df.index, fontsize=12)\n\n    ax[int(i \/ 2)][i % 2].legend(loc='best',\n                                 bbox_to_anchor=(0.45, 1.02),\n                                 ncol=1,\n                                 borderaxespad=0,\n                                 frameon=True,\n                                 fontsize=14)\n\n    x_axis = ax[int(i \/ 2)][i % 2].axes.get_xaxis()\n    x_axis.set_visible(False)\n    \n    j = 1\n    for p in ax[int(i \/ 2)][i % 2].patches:\n        width, height = p.get_width(), p.get_height()\n        _, y = p.get_xy()\n        #print(\"x=\",x, \", y= \", y, \" width=\", width)\n        ax[int(i \/ 2)][i % 2].annotate(f'{width:.1%}', (width * 1.05, y),\n                                       fontsize=12)\n        \n        if j == 10 or j == 9:\n            p.set_hatch(\"\/\/\")\n\n        if (x == \"2018\" and j == 1) or (x == \"2019\"\n                                        and j == 1) or (x == \"2020\"\n                                                        and j in [1, 4]):\n            p.set_color('darkred')\n        if (x == \"2017\" and j == 1) or (x == \"2018\" and j == 3) or (x == \"2019\" and j == 2):\n            p.set_alpha(0.2)\n\n        if x == \"2019\" and j == 1:\n            p.set_alpha(0.6)\n        j += 1\n\nplt.tight_layout(pad=2.0)\nplt.show()","0e9213c4":"var_list = ['GenderSelect', 'Q1', 'Q2', 'Q2']\ng_df = pd.DataFrame(columns=[\"year\", \"Overall\", \"Male\", \"Female\", \"Others\"])\nfor i in range(4):\n    x = str(i + 2017)\n    g_cnts = pd.DataFrame(\n        eval('survey_' + x)[var_list[i]].value_counts(dropna=False))\n    new_row = {\n        'year':\n        2017 + i,\n        'Overall':\n        int(g_cnts.sum()),\n        'Male':\n        int(g_cnts.loc[\"Male\", [var_list[i]]]),\n        'Female':\n        int(g_cnts.loc[\"Female\", [var_list[i]]]),\n        'Others':\n        int(g_cnts[~g_cnts.index.str.contains('ale', na=False)].sum(axis=0))\n    }\n    g_df = g_df.append(new_row, ignore_index=True)\n\ng_df[\"F_percentage\"] = g_df['Female']\/g_df['Overall']","edae2feb":"def get_age_group(x):\n    if x == \"18-21\":\n        return \"21-\"\n    if x == \"60-69\" or x == \"70-79\" or x == \"80+\":\n        return \"60+\"\n    return x\n\n\ndef get_age_group_2017(x):\n    age_list = [22, 25, 30, 35, 40, 45, 50, 55, 60]\n    for i, age in enumerate(age_list):\n        if x >= 60:\n            return \"60+\"\n        if x < 22:\n            return \"21-\"\n        if x >= age:\n            continue\n        else:\n            return f\"{age_list[i-1]}-{age_list[i]-1}\"","98d649a1":"var_list = ['Age', 'Q2', 'Q1', 'Q1']\nage_groups = [\n    \"21-\", \"22-24\", \"25-29\", \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\",\n    \"55-59\", \"60+\"\n]\nage_df = pd.DataFrame(columns=[\"year\"] + age_groups)\nfor i in range(4):\n    x = str(i + 2017)\n#     print(x)\n    df = globals()[f\"survey_{x}\"]\n    if x == \"2017\":\n        df[\"AgeGroup\"] = df[var_list[i]].apply(get_age_group_2017)\n    else:\n        df[\"AgeGroup\"] = df[var_list[i]].apply(get_age_group)\n\n    age_cnts = pd.DataFrame(df[\"AgeGroup\"].value_counts(dropna=False))\n\n    new_row = {'year': 2017 + i, 'Overall': int(age_cnts.sum())}\n    for gp in age_groups:\n        new_row[gp] = int(age_cnts.loc[gp, \"AgeGroup\"])\n    age_df = age_df.append(new_row, ignore_index=True)\n    \nage_df[\"Youth_percentage\"] = (age_df['21-'] + age_df['22-24'] + age_df['25-29'])\/age_df['Overall']\nage_df[\"Elder_percentage\"] = (age_df['60+'])\/age_df['Overall']","7e328f4c":"def get_education_level(x):\n    x = str(x)\n    if \"Master\" in x:\n        return \"Master\u2019s\"\n    elif \"Bachelor\" in x:\n        return \"Bachelor\u2019s\"\n    elif \"Doctoral\" in x:\n        return \"Doctoral\"\n    elif \"without\" in x:\n        return \"College Dropout\"\n    elif \"Professional\" in x:\n        return \"Professional\"\n    elif \"high school\" in str(x):\n        return \"High School\"\n    else:\n        return \"NaN\"","2ff654be":"var_list = ['FormalEducation', 'Q4', 'Q4', 'Q4']\n\nedu_groups = [\n    \"Master\u2019s\", \"Bachelor\u2019s\", \"Doctoral\", \"NaN\", \"College Dropout\",\n    \"Professional\", \"High School\"\n]\nedu_df = pd.DataFrame(columns=[\"year\"] + edu_groups)\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()[f\"survey_{x}\"]\n    df[\"EducationLevel\"] = df[var_list[i]].apply(get_education_level)\n\n    edu_cnts = pd.DataFrame(df[\"EducationLevel\"].value_counts(dropna=False))\n\n    new_row = {'year': 2017 + i, 'Overall': int(edu_cnts.sum())}\n    for gp in edu_groups:\n        new_row[gp] = int(edu_cnts.loc[gp, \"EducationLevel\"])\n    edu_df = edu_df.append(new_row, ignore_index=True)\n    \nedu_df[\"HigherEducation_percentage\"] = (edu_df['Master\u2019s'] + edu_df['Bachelor\u2019s'] +\n                              edu_df['Doctoral']) \/ edu_df['Overall']","9d57b47a":"fig, ax = plt.subplots(1, 3, figsize=(18, 5))\nfig.suptitle('Gender & Age & Education distributions',\n             fontsize=30,\n             y=1.15,\n             fontweight=500)\ndfs = [g_df, age_df, edu_df]\nylabels = [\"gender distribution\", \"age distribution\", \"education distribution\"]\nylabels2 = [\n    \"female participation (%)\", \"youth&elderly participation (%)\",\n    \"bachelor+ participation (%)\"\n]\ny_groups = [[\"Male\", \"Female\", \"Others\"], age_groups, edu_groups]\nline_column = [\"F_percentage\", [\"Youth_percentage\", \"Elder_percentage\"], \"HigherEducation_percentage\"]\ncolors = [[\"#00A0B0\", \"#CF5C78\", \"#939597\"],\n          sns.color_palette(\"bwr\", n_colors=12),\n          sns.color_palette(\"coolwarm\")]\nline_colors = ['#CF5C78', 'crimson', 'chocolate']\n\nfor i in range(3):\n    df = dfs[i]\n    ax1 = df.plot(x=\"year\",\n                  ax=ax[i],\n                  y=y_groups[i],\n                  kind='bar',\n                  rot=0,\n                  stacked=True,\n                  colormap=ListedColormap(colors[i]))\n    ax1.set_ylabel(ylabels[i], fontsize='15')\n    ax1.xaxis.label.set_visible(False)\n    ax2 = ax1.twinx()\n    ax2.plot(df.index,\n             df[line_column[i]],\n             color=line_colors[i],\n             linestyle='--',\n#              ms=10,\n#              lw=3,\n             marker='o')\n    # ax2.set_ylim([0, g_df[\"F_percentage\"].max()])\n    ax2.set_ylabel(ylabels2[i], fontsize='15')\n    ax2.yaxis.set_major_formatter(ticker.PercentFormatter(decimals=0, xmax=1))\n\nplt.tight_layout(pad=2.0)\nplt.show()","33e93801":"def rename_experience(x):\n    if x in [\"< 1 year\", \"< 1 years\", \"Under 1 year\"]:\n        return \"0-1 year\"\n    elif x in [\n            \"I have never studied machine learning but plan to learn in the future\",\n            \"I have never studied machine learning and I do not plan to\",\n            \"I do not use machine learning methods\"\n    ]:\n        return \"None experience\"\n    elif x == \"20 or more years\":\n        return \"20+ years\"\n    else:\n        return x\n    \ndef add_column_for_sort(x):\n    if x == \"None experience\":\n        return 99\n    elif str(x) == \"nan\":\n        return 100\n    \n    tmp = \"\"\n    for ch in x:\n        if not ch.isdigit():\n            break\n        tmp += ch\n    return int(tmp)\n\n\nvar_list = ['LearningDataScienceTime', 'Q25', 'Q23', 'Q15']\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()['survey_' + x]\n    df[\"MLExperience\"] = df[var_list[i]].apply(rename_experience)\n    df = pd.DataFrame(df[\"MLExperience\"].value_counts(normalize=True, dropna=False))\n    df.columns = [x]\n    df[\"order\"] = list(map(add_column_for_sort, df.index))\n    df.sort_values(by=[\"order\"], ascending=False, inplace=True)\n    globals()['MLexp_' + x] = df\n    \n    \nfig, ax = plt.subplots(2, 2, figsize=(12, 10))\nfig.suptitle('Machine learning experience', fontsize=20, y=1.05, fontweight=500)\n\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()['MLexp_' + x]\n    df[x].plot.barh(ax=ax[int(i \/ 2)][i % 2],\n                    color=[color_of_year[i]],\n                    legend=True,\n                    width=0.4)\n    ax[int(i \/ 2)][i % 2].spines[\"bottom\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].spines[\"top\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].spines[\"right\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].set_yticklabels(df.index, fontsize=12)\n    ax[int(i \/ 2)][i % 2].legend(loc='best',\n                                 bbox_to_anchor=(0.45, 1.02),\n                                 ncol=1,\n                                 borderaxespad=0,\n                                 frameon=True,\n                                 fontsize=14)\n\n    x_axis = ax[int(i \/ 2)][i % 2].axes.get_xaxis()\n    x_axis.set_visible(False)\n\n    j = 0\n    for p in ax[int(i \/ 2)][i % 2].patches:\n        width, height = p.get_width(), p.get_height()\n        x, y = p.get_xy()\n        #print(\"x=\",x, \", y= \", y, \" width=\", width)\n        ax[int(i \/ 2)][i % 2].annotate(f'{width:.1%}',\n                                       (width + 0.008, y + 0.1),\n                                       fontsize=12)\n        if j == 0:\n            #             p.set_hatch(\"\/\/\")\n            p.set_alpha(0.1)\n        j += 1\n\nplt.tight_layout(pad=1.0)\nplt.show()","3b7a96b1":"def rename_pl(x):\n    if x in [\"C++\", \"C\", \"C#\"]:\n        return \"C\/C++\/C#\"\n    else:\n        return x\n    \n\nvar_list = ['LanguageRecommendationSelect', 'Q18', 'Q19', 'Q8']\nRecPL_df = pd\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()['survey_' + x]\n    df[\"RecommendedPL\"] = df[var_list[i]].apply(rename_pl)\n    df = pd.DataFrame(df[\"RecommendedPL\"].value_counts(normalize=True, dropna=True))\n    df.columns = [x]\n    df.sort_values(by=[x], inplace=True)\n    df[\"pp\"] = df[x]\n    globals()['RecPL_' + x] = df.tail(5)\n    \n    \nfig, ax = plt.subplots(2, 2, figsize=(12, 10))\nfig.suptitle('Top 5 recommended programming language', fontsize=20, y=1.05, fontweight=500)\n\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()['RecPL_' + x]\n    df[x].plot.barh(ax=ax[int(i \/ 2)][i % 2],\n                    color=[color_of_year[i]],\n                    legend=True,\n                    width=0.4)\n    ax[int(i \/ 2)][i % 2].spines[\"bottom\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].spines[\"top\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].spines[\"right\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].set_yticklabels(df.index, fontsize=12)\n    ax[int(i \/ 2)][i % 2].legend(loc='best',\n                                 bbox_to_anchor=(0.45, 1.02),\n                                 ncol=1,\n                                 borderaxespad=0,\n                                 frameon=True,\n                                 fontsize=14)\n\n    x_axis = ax[int(i \/ 2)][i % 2].axes.get_xaxis()\n    x_axis.set_visible(False)\n\n    j = 0\n    for p in ax[int(i \/ 2)][i % 2].patches:\n        width, height = p.get_width(), p.get_height()\n        x, y = p.get_xy()\n        #print(\"x=\",x, \", y= \", y, \" width=\", width)\n        ax[int(i \/ 2)][i % 2].annotate(f'{width:.1%}',\n                                       (width + 0.008, y + 0.1),\n                                       fontsize=12)\n\nplt.tight_layout(pad=1.0)\nplt.show()","078efbb9":"def rename_platforms(x):\n    if x in [\n            \"Online University Courses\",\n            \"University Courses (resulting in a university degree)\"\n    ]:\n        return \"University Courses\"\n    elif x in [\"Kaggle Courses (i.e. Kaggle Learn)\", \"Kaggle Learn\", \"Kaggle Learn Courses\"]:\n        return \"Kaggle\"\n    elif x == \"LinkedIn Learning\":\n        return \"LinkedIn\"\n    elif x == \"Cloud-certification programs (direct from AWS, Azure, GCP, or similar)\":\n        return \"Cloud programs\"\n    else:\n        return x\n    \n    \ndef count_platforms_2017(df, year):\n    vc = df.value_counts()\n    dic = {}\n    for key, value in vc.items():\n        for plt in key.split(','):\n            if plt in dic:\n                dic[plt] += value\n            else:\n                dic[plt] = value\n    df = pd.DataFrame.from_dict(dic, orient='index', columns=[year])\n    df[year] = df[year] \/ df[year].sum()\n    df.sort_values(by=[year], ascending=True, inplace=True)\n    return df\n\n\ndef count_platforms(df, year):\n    df = df.describe().T\n    df[\"top\"] = df[\"top\"].apply(rename_platforms)\n    df.set_index(keys=[\"top\"], drop=True, inplace=True)\n    df.sort_values(by=[\"count\"], ascending=True, inplace=True)\n    df[\"count\"] = df[\"count\"] \/ df[\"count\"].sum()\n    df.rename(columns={\"count\": year}, inplace=True)\n    return df\n\n\nvar_list = [\n    'CoursePlatformSelect',\n    [\n        'Q36_Part_1', 'Q36_Part_2', 'Q36_Part_3', 'Q36_Part_4', 'Q36_Part_5',\n        'Q36_Part_6', 'Q36_Part_7', 'Q36_Part_8', 'Q36_Part_9', 'Q36_Part_10',\n        'Q36_Part_11', 'Q36_Part_12', 'Q36_Part_13'\n    ],\n    [\n        'Q13_Part_1', 'Q13_Part_2', 'Q13_Part_3', 'Q13_Part_4', 'Q13_Part_5',\n        'Q13_Part_6', 'Q13_Part_7', 'Q13_Part_8', 'Q13_Part_9', 'Q13_Part_10',\n        'Q13_Part_11', 'Q13_Part_12'\n    ],\n    [\n        'Q37_Part_1',\n        'Q37_Part_2',\n        'Q37_Part_3',\n        'Q37_Part_4',\n        'Q37_Part_5',\n        'Q37_Part_6',\n        'Q37_Part_7',\n        'Q37_Part_8',\n        'Q37_Part_9',\n        'Q37_Part_10',\n        'Q37_Part_11',\n        'Q37_OTHER',\n    ]\n]\n\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()['survey_' + x]\n    if x == \"2017\":\n        df = count_platforms_2017(df[var_list[i]], x)\n    else:\n        df = count_platforms(df[var_list[i]], x)\n    df.index.name = \"\"\n    globals()['pltfm_' + x] = df\n    \n    \nfig, ax = plt.subplots(2, 2, figsize=(12, 10))\nfig.suptitle('Platforms where Kagglers favor', fontsize=20, y=1.05, fontweight=500)\n\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()['pltfm_' + x]\n    df[x].plot.barh(ax=ax[int(i \/ 2)][i % 2],\n                    color=[color_of_year[i]],\n                    legend=True,\n                    width=0.4)\n    ax[int(i \/ 2)][i % 2].spines[\"bottom\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].spines[\"top\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].spines[\"right\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].set_yticklabels(df.index, fontsize=12)\n\n    ax[int(i \/ 2)][i % 2].legend(loc='best',\n                                 bbox_to_anchor=(0.45, 1.02),\n                                 ncol=1,\n                                 borderaxespad=0,\n                                 frameon=True,\n                                 fontsize=14)\n\n    x_axis = ax[int(i \/ 2)][i % 2].axes.get_xaxis()\n    x_axis.set_visible(False)\n    \n    j = 1\n    length = len(ax[int(i \/ 2)][i % 2].patches)\n    for p in ax[int(i \/ 2)][i % 2].patches:\n        width, height = p.get_width(), p.get_height()\n        _, y = p.get_xy()\n        #print(\"x=\",x, \", y= \", y, \" width=\", width)\n        ax[int(i \/ 2)][i % 2].annotate(f'{width:.1%}', (width * 1.05, y),\n                                       fontsize=12)\n        \n        if x == \"2019\" and j == 9:\n            p.set_color(\"maroon\")\n        \n        if x != \"2017\" and j > length - 5:\n            p.set_hatch(\"\/\/\")\n            \n        if x == \"2018\" and j == 9:\n            p.set_alpha(0.2)\n        \n        \n            \n        j += 1\n\nplt.tight_layout(pad=1.0)\nplt.show()","48b5defd":"def rename_job(x):\n    if x in ['Researcher','Scientist\/Researcher']:\n        return 'Research Scientist'\n    elif x == 'Currently not employed':\n        return \"Unemployed\"\n    elif x == 'Software Developer\/Software Engineer':\n        return 'Software Engineer'\n    elif x == 'Operations Research Practitioner':\n        return 'ORP'\n    elif x == 'Machine Learning Engineer':\n        return 'ML Engineer'\n    return x\n\n\nvar_list = ['CurrentJobTitleSelect', 'Q6', 'Q5', 'Q5']\n\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()['survey_' + x]\n    df[\"Job\"] = df[var_list[i]].apply(rename_job)\n    df = pd.DataFrame(df[\"Job\"].value_counts(normalize=True, dropna=True))\n    df.columns = [x]\n    df.sort_values(by=[x], inplace=True)\n    globals()['Jobs_' + x] = df\n    \n    \nfig, ax = plt.subplots(2, 2, figsize=(12, 10))\nfig.suptitle('Current role in workplace', fontsize=20, y=1.05, fontweight=500)\n\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()['Jobs_' + x]\n    df[x].plot.barh(ax=ax[int(i \/ 2)][i % 2],\n                    color=[color_of_year[i]],\n                    legend=True,\n                    width=0.4)\n    ax[int(i \/ 2)][i % 2].spines[\"bottom\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].spines[\"top\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].spines[\"right\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].set_yticklabels(df.index, fontsize=12)\n    ax[int(i \/ 2)][i % 2].legend(loc='best',\n                                 bbox_to_anchor=(0.45, 1.02),\n                                 ncol=1,\n                                 borderaxespad=0,\n                                 frameon=True,\n                                 fontsize=14)\n\n    x_axis = ax[int(i \/ 2)][i % 2].axes.get_xaxis()\n    x_axis.set_visible(False)\n\n    j = 1\n    length = len(ax[int(i \/ 2)][i % 2].patches)\n    for p in ax[int(i \/ 2)][i % 2].patches:\n        width, height = p.get_width(), p.get_height()\n        _, y = p.get_xy()\n        #print(\"x=\",x, \", y= \", y, \" width=\", width)\n        ax[int(i \/ 2)][i % 2].annotate(f'{width:.1%}',\n                                       (width + 0.008, y + 0.1),\n                                       fontsize=12)\n        \n        if j > length - 5:\n            p.set_hatch(\"\\\\\")\n        if (x == \"2017\" and j == length - 3) or (x == \"2018\" and j in [length - 4, length - 6]) or (x == \"2019\" and j in [6, 9]) or (x == \"2020\" and j in [9, 10]):\n            p.set_alpha(0.2)\n        j += 1\n\nplt.tight_layout(pad=1.0)\nplt.show()","805da938":"def rename_tasks(x):\n    x = str(x)\n    if x == \"Analyze and understand data to influence product or business decisions\":\n        return \"Data analysis\"\n    elif \"prototypes\" in x:\n        return \"Prototypes\"\n    elif \"machine learning service\" in x:\n        return \"ML service\"\n    elif \"data infrastructure\" in x:\n        return \"Data infrastructure\"\n    elif \"esearch\" in x:\n        return \"Research\"\n    elif \"ML models\" in x:\n        return \"ML models\"\n    elif \"None\" in x:\n        return \"None\"\n    return x\n\n\ndef count_tasks_2017(df, year):\n    vc = df.value_counts(normalize=True)\n    dic = {}\n    for key, value in vc.items():\n        dic[str(key)] = value\n    df = pd.DataFrame.from_dict(dic, orient='index', columns=[year])\n    df[year] = df[year] \/ df[year].sum()\n    df.sort_values(by=[year], ascending=True, inplace=True)\n    return df\n\n\ndef count_tasks(df, year):\n    df = df.describe().T\n    df[\"top\"] = df[\"top\"]\n    df.set_index(keys=[\"top\"], drop=True, inplace=True)\n    df.sort_values(by=[\"count\"], ascending=True, inplace=True)\n    df[\"count\"] = df[\"count\"] \/ df[\"count\"].sum()\n    df.rename(columns={\"count\": year}, inplace=True)\n    return df\n\n\nvar_list = [\n    'JobFunctionSelect',\n    [\n        'Q11_Part_1', 'Q11_Part_2', 'Q11_Part_3', 'Q11_Part_4', 'Q11_Part_5',\n        'Q11_Part_6', 'Q11_Part_7'\n    ],\n    [\n        'Q9_Part_1', 'Q9_Part_2', 'Q9_Part_3', 'Q9_Part_4', 'Q9_Part_5',\n        'Q9_Part_6', 'Q9_Part_7', 'Q9_Part_8'\n    ],\n    [\n        'Q23_Part_1', 'Q23_Part_2', 'Q23_Part_3', 'Q23_Part_4', 'Q23_Part_5',\n        'Q23_Part_6', 'Q23_Part_7', 'Q23_OTHER'\n    ]\n]\n\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()['survey_' + x]\n    if x == \"2017\":\n        df = count_tasks_2017(df[var_list[i]], x)\n    else:\n        df = count_tasks(df[var_list[i]], x)\n    df.index.name = \"\"\n    globals()['tasks_' + x] = df\n    \n    \nfig, ax = plt.subplots(2, 2, figsize=(12, 10))\nfig.suptitle('Daily task in workplace', fontsize=20, y=1.05, fontweight=500)\n\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()['tasks_' + x]\n    df[x].plot.barh(ax=ax[int(i \/ 2)][i % 2],\n                    color=[color_of_year[i]],\n                    legend=True,\n                    width=0.4)\n    ylabels = list(map(rename_tasks, df.index))\n    ax[int(i \/ 2)][i % 2].spines[\"bottom\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].spines[\"top\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].spines[\"right\"].set_visible(False)\n    ax[int(i \/ 2)][i % 2].set_yticklabels(ylabels, fontsize=12)\n    ax[int(i \/ 2)][i % 2].legend(loc='best',\n                                 bbox_to_anchor=(0.45, 1.02),\n                                 ncol=1,\n                                 borderaxespad=0,\n                                 frameon=True,\n                                 fontsize=14)\n\n    x_axis = ax[int(i \/ 2)][i % 2].axes.get_xaxis()\n    x_axis.set_visible(False)\n\n    j = 1\n    length = len(ax[int(i \/ 2)][i % 2].patches)\n    for p in ax[int(i \/ 2)][i % 2].patches:\n        width, height = p.get_width(), p.get_height()\n        _, y = p.get_xy()\n        #print(\"x=\",x, \", y= \", y, \" width=\", width)\n        ax[int(i \/ 2)][i % 2].annotate(f'{width:.1%}',\n                                       (width + 0.008, y + 0.1),\n                                       fontsize=12)\n        if (x == \"2017\" and j == 1) or (x in [\"2018\", \"2019\", \"2020\"] and j in [1, 2]):\n            p.set_alpha(0.2)\n            \n        if j == length:\n            p.set_hatch(\"\/\/\")\n            \n        j += 1\n        \nplt.tight_layout(pad=1.0)\nfootnote = \"*Details: \\n  Data analysis: Analyze and understand data to influence product or business decisions\\n\" \\\n\"  Data infrastructure: Build and\/or run the data infrastructure that my business uses for storing, analyzing, and operationalizing data\\n\"\\\n\"  Prototypes: Build prototypes to explore applying machine learning to new areas\\n\"\\\n\"  ML service: Build and\/or run a machine learning service that operationally improves my product or workflows\\n\"\\\n\"  ML models: Experimentation and iteration to improve existing ML models\\n\"\\\n\"  Research: Do research that advances the state of the art of machine learning\\n\"\\\n\"  None: None of these activities are an important part of my role at work\"\nplt.annotate(footnote, xy=(-1.6, -0.3), xycoords='axes fraction')\nplt.show()","eb314ff3":"salary_list = [\n    0, 1000, 2000, 3000, 4000, 5000, 7500, 10000, 15000, 20000, 25000, 30000,\n    40000, 50000, 60000, 70000, 80000, 90000, 100000, 125000, 150000, 200000,\n    250000, 300000, 500000\n]\nrate = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2017\/conversionRates.csv\")\n\n\ndef calculate_salary(x):\n    x = str(x)\n    try:\n        amount, cntry = x.split(\"_\")\n        amount = float(amount.replace(\",\", \"\"))\n        if amount < 0:\n            return \"nan\"\n        rt = float(rate[rate[\"originCountry\"] == cntry][\"exchangeRate\"])\n        salary = amount * rt\n        for i, sal in enumerate(salary_list):\n            if salary >= 500000:\n                return \"500000+\"\n            if salary < 1000:\n                return \"0-999\"\n            if salary >= sal:\n                continue\n            else:\n                return f\"{salary_list[i-1]}-{salary_list[i]-1}\"\n        return \"nan\"\n    except:\n        return \"nan\"\n\n\ndef add_column_for_sort(x):\n    if x == \"nan\":\n        return -1\n    tmp = \"\"\n    for ch in x:\n        if not ch.isdigit():\n            return int(tmp)\n        tmp += ch\n\n\ndef count_salary_2017(df, year):\n    df[\"Salary\"] = df.loc[:,\n                          'CompensationAmount'] + \"_\" + df.loc[:,\n                                                               'CompensationCurrency']\n    df[year] = df[\"Salary\"].apply(calculate_salary)\n    df = pd.DataFrame(df[year].value_counts())\n    df[\"order\"] = list(map(add_column_for_sort, df.index))\n    df.sort_values(by=[\"order\"], inplace=True)\n    df.drop(index=\"nan\", inplace=True)\n    return df\n\n\nvar_list = [['CompensationAmount', 'CompensationCurrency'], 'Q9', 'Q10', 'Q24']\n\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()['survey_' + x]\n    if x == \"2017\":\n        df = count_salary_2017(df[var_list[i]].dropna(), x)\n    else:\n        df = pd.DataFrame(df[var_list[i]].value_counts(dropna=True))\n        df.columns = [x]\n        if x == \"2018\":\n            df.drop(\n                index=\n                \"I do not wish to disclose my approximate yearly compensation\",\n                inplace=True)\n        if x == \"2019\" or x == \"2020\":\n            df.drop(index=[\"$0-999\", \"> $500,000\"], inplace=True)\n            df.rename(index={\n                \"$0-999\": \"0-999\",\n                \"> $500,000\": \"500,000+\"\n            },\n                      inplace=True)\n        df[\"order\"] = list(map(add_column_for_sort, df.index))\n        df.sort_values(by=[\"order\"], inplace=True)\n\n    df.index.name = \"\"\n    globals()['salary_' + x] = df\n    \n    \nfig, ax = plt.subplots(4, 1, figsize=(12, 16))\nfig.suptitle('Yearly compensation (approximate $USD)', fontsize=20, y=1.02, fontweight=500)\n\nfor i in range(4):\n    x = str(i + 2017)\n    df = globals()[f\"salary_{x}\"]\n    df[x].plot.bar(ax=ax[i], color=[color_of_year[i]], legend=True,)\n    ax[i].spines[\"top\"].set_visible(False)\n    ax[i].spines[\"right\"].set_visible(False)\n    ax[i].spines[\"left\"].set_visible(False)\n\n    y_axis = ax[i].axes.get_yaxis()\n    y_axis.set_visible(False)\n\n    if x == \"2017\":\n        height_offset = 20.\n    elif x == \"2018\":\n        height_offset = 150.\n    else:\n        height_offset = 30.\n        \n    j = 1\n    length = len(ax[i].patches)\n    for p in ax[i].patches:\n        width, height = p.get_width(), p.get_height()\n        xx, y = p.get_xy()\n        ax[i].annotate(height, (xx + .2, height + height_offset),\n                       fontsize=12,\n                       ha='center',\n                       weight='normal',\n                       size='large')\n        \n        if (x == \"2017\" and j > length - 4) or (x == \"2018\" and j > length - 5) or (x in [\"2019\", \"2020\"] and j > length - 3):\n            p.set_alpha(0.2)\n            \n        if j == 1:\n            p.set_color(\"maroon\")\n            \n        j += 1\n\nplt.tight_layout(pad=2.0)\nplt.show()","b5b0560f":"It's been four years since the first **Kaggle Machine Learning & Data Science Survey** competition held in 2017. How this event has evolved over the past years? Although a 4th anniversary is hardly a memorable milestone. Only four years can hardly make up of a **Chronicle** either. It might be interesting to dig into its ***growth***. \n\nSince a survey is merely made up by two parts: questions and answers(investigators and respondents). Hence, I will start with this two parts and the draw a conclusion at the end. Hope this notebook can find some useful insights about this event.","76da4c7a":"# Answers: diversed","efb0bb07":"### Learning platforms\n**Q: On which platforms have you begun or completed data science courses? (Select all that apply)**","9f84be9c":"This part explores how one year's answers to the 10 common questions differ from those of another year. ","2bfb78e2":"\n# Introduction","da0bd61d":"### Daily task\n**Q: Select any activities that make up an important part of your role at work: (Select all that apply)**","4e330dd1":"Although the choices of the question vary in four years, those who has \"0-1 year\" experience in machine learning and data science still take the largest part of all respondents. From the perspective of time dimension, this means **a large number of ML newbee enter into kaggle land every year**.","f6bc7521":"From the wordcloud map generated from question texts of each year's survey, we can tell:\n* Survey 2019 & 2020 pays more attention to Kagglers' habit of using tools and product for machine learning and data science.\n* 2017, which is the first year of this event has most questions of \"**<font color=\"#006600\">data science<\/font>**\", which only takes a small part of the Qs in the next 3 years.\n* Survey 2017 & 2018 cares more about Kagglers' **<font color=\"#006600\">work<\/font>** than 2019 and 2020.\n* **<font color=\"#006600\">Data<\/font>** is always an focus int Kaggle Survey as well as kagglers' future plan in the **<font color=\"#006600\">following<\/font>** years.\n","4a7b8560":"The 10 questions shared by 4 years can be divided into 3 groups: <span style=\"background:#00589B; font-weight:bold; color:white\">basic personal information<\/span>, <span style=\"background:#CF5C78; font-weight:bold; color:white\">machine learning\/data science experience<\/span>, <span style=\"background:#00A0B0; font-weight:bold; color:white\">jobs & works<\/span>. The <span style=\"background:#c2c2c2; font-weight:bold\">other 29 questions<\/span> of Survey 2020 are either asked in 2019 or in 2018 & 2019, but not in 2017.","65b3fa75":"## Jobs & Works","3791889d":"There are 39 questions listed in Kaggle Survey 2020, only 10 of them were also be asked(some in different ways) in 2017~2019. The format of questionnaire, the content, the choices and even the style of each year's questions differs from another. ","5cdf7494":"* **Data Scientist** and **Software Engineer** remain in top 5 list over the years.\n* **Student** rushes to the top once it is listed as an option in Survey 2018 and remains top 3 in the following years.\n* The proportion of **Unemployed** or **Not employed** keeps rising over the years, which corresponds to the big part of the \"Student\" selection in job questions. This also implies the data science technologies are more accessible and more friendly to the non-professionals.","45c97fb1":"### Gender & Age & Education\n1. **Q: What is your gender?**\n2. **Q: What is your age (# years)?**\n3. **Q: What is the highest level of formal education that you have attained or plan to attain within the next 2 years>**\n","39b993e9":"The three subchart above share one same background: the toal number of respondents reaches at hight point in 2018 and the falls by 3,000~4,000 in 2019. The answers number of the latest two years is almost the same. Inside each subchart:\n* **Gender**: **<font color=\"#00A0B0\">Male<\/font>** respondents have always been the majority of the kaggle community while the proportion of **<font color=\"#CF5C78\">female<\/font>** respondents has been increased from about 16% to nearly 20%.\n* **Age**: Half of kaggle users are **<font color=\"#225df8\">youth<\/font>**(young people under 30 years old). The proportion of the youth hasn't change much over the years.\n* **Education**: Most of kaggle users have has the experience of successfully completing higher education(**<font color=\"#3298e9\">bachelor\/master\/doctor<\/font>** degrees). Meanwhile, its proportion decreases in recent two years, which means more ans more people without high degree join the community. **Such trend encourages the popularization of AI technolgies.**\n","4d0e94c7":"## Machine Learning & Data Science experience","7c712bf4":"* The compensation distribution in 2019 and 2020 are highly consistent.\n* In 2017 most kagglers make money between 10,000 USD to 200,000. In 2019 and 2020, the range is from 1,000 to 200,000. The large number of high income respodents implies that data science jobs or the AI industry pays well.\n* By comparison, compensation distribution in 2018 is quite abnormal\n* The large number of low income less than 2,000 USD echoes the big proportion of the \"Student\" selection in the job question.\n","7784a228":"# Conclusion","1b94fc1c":"### Country distribution\n\n**Q: In which country do you currently reside?**","9eb01556":"### Jobs\n**Q: Select the title most similar to your current role (or most recent title if retired)**","dcfdbb77":"## Basic information of Kagglers","1b75692f":"* Python has always topped the list and it has only gained in popularity over the years.\n* The top 5 recommended programming languages have always been the same 5 languages, so has the order of them: Python, R, SQL, C\/C++\/C# and Matlab.","add829fb":"What can be learned from this notebook is that writing \"**Chronicles**\" is much harder than you think. \n\nAnyways, here are some worth-mentioned points from above:\n* As the first year, Survey 2017 is quite different from the other three surveys in both question side and answers side. In another word, there is some continuity from 2018~2019.\n* THe design of kaggle surveys tends to focus on what we use and how we practice than what we use for.\n* While kaggle remains a relatively professional platform, the survey result shows the machine learning and data science techniques and skill are becoming more accessible and more friendly to those non-professionals. \n* Kaggle attracts a lot of young blood into this community every year.\n\nTo be honest, this work is still far from perfect with so many improvements to be done. Nevertheless, I hope you can learn something from my work.","4979635f":"### ML experience\n**Q: For how many years have you used machine learning methods?**","73a2dadd":"# Questions: evolved","9cb3230a":"The chart above shows how top 10 countries changes over the last four years.\n* 40% of the respondents is concentrated in just the top 2 countries - India and USA.\n* The top 10 list changes every year with one or two countres coming up\/down.","29dcc6d2":"### Recommended programming language\n**Q: What programming language would you recommend an aspiring data scientist to learn first?**","4b94a42f":"* In 2017 only four specific paltforms are listed to be selected, among them over 40% of kagglers begun or completed their data science journey on \"Coursera\".\n* \"Coursera\" has been take the lead over the years.\n* The top 5 platforms remains the same in the last two years after \"University Courses\" replaced \"Udacity\" in 2019.","2b0a2270":"* **Data analysis** has consistently topped the list over the years while **Research** has been the bottom.\n* **Prototypes** stands still in its second place.\n* There is not much difference between the rest tasks.","433259dd":"### Compensation\n**Q: What is your current yearly compensation (approximate $USD)?**"}}