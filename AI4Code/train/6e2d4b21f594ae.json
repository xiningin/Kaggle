{"cell_type":{"131df8a2":"code","8a8f4949":"code","a7c179be":"code","9219d375":"code","2c79e5f7":"code","053a1ba9":"code","ebdefbbe":"code","968b0102":"code","bf81e5a7":"code","56dcc578":"code","56d78b08":"code","4d4a3f55":"code","70e3519a":"code","9951c923":"code","65cf0e5d":"code","7e34ca64":"markdown"},"source":{"131df8a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8a8f4949":"#read the data\ndata = pd.read_csv(\"..\/input\/cryptocurrencypricehistory\/ethereum_dataset.csv\")\ndata.info()","a7c179be":"#get the first 10 rows of data\ndata.head(10)","9219d375":"#coralation \ndata_corr = data.corr()\ndata_corr","2c79e5f7":"#Coralation Visualization\nf,ax = plt.subplots(figsize=(16, 16))\nsns.heatmap(data_corr, annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","053a1ba9":"#columns of data\ndata_columns = data.columns\ndata_columns","ebdefbbe":"#Series\na = data['eth_etherprice']\nprint(type(a))\nprint(a)","968b0102":"#DataFrame\nb = data[['eth_etherprice']]\nprint(type(b)) \nprint(b)","bf81e5a7":"# plot as line\ndata.eth_gasused.plot(kind='line',color = 'b',label = 'eth_gasused',linewidth=1,alpha = 0.7,grid = True,linestyle = '-.')\n\ndata.eth_gasprice.plot(color = 'r',label = 'eth_gasprice',linewidth=1,alpha = 0.7,grid = True,linestyle = ':')\n\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # xlabel = name of x label\nplt.ylabel('y axis')              # ylabel = name of y label\nplt.title('Line Plot')            # title = title of plot\nplt.show()","56dcc578":"#plot as scatter\nplt.scatter(data.eth_etherprice,data.eth_gaslimit,alpha = 0.4,color = 'red')\n\nplt.xlabel('eth_etherprice')              # xlabel = name of x label\nplt.ylabel('eth_gaslimit')              # ylabel = name of y label\nplt.title('eth_etherprice and eth_gaslimit Scatter Plot')            # title = title of plot\nplt.show()","56d78b08":"#plot as histogram\n# bins = number of bar in figure\ndata.eth_gasused.plot(kind = 'hist',bins = 50,figsize = (15,15))\nplt.title('Histogram of eth_gasused')\nplt.show()","4d4a3f55":"#plot as histogram\n# bins = number of bar in figure\ndata.eth_ens_register.plot(kind = 'hist',bins = 20,figsize = (12,12),normed=True)\nplt.title(\"Histogram of eth_ens_register\")\nplt.show()","70e3519a":"a = data.eth_address < 12000\ndata_true = data[a]\ndata_true","9951c923":"a = (data.eth_address >= 12000) & (data.eth_address < 17000)\ndata_true = data[a]\ndata_true","65cf0e5d":"data[np.logical_and(data['eth_address']>200, data['eth_tx']<4000 )].head()","7e34ca64":"## matplotlib (kind='line')\n## matplotlib (kind='scatter')\n## matplotlib (kind='hist')"}}