{"cell_type":{"e4f6759b":"code","cc1b1b48":"code","56d803c8":"code","a6882ba1":"code","c502e188":"code","a3ae8a00":"code","421e054b":"code","69589d1b":"code","8daf792a":"code","e0b819c8":"code","d0df54ae":"code","f77a6b31":"markdown","cbb29bb8":"markdown","5d1290cc":"markdown","9210f275":"markdown","b4aa0378":"markdown","22d5f8b7":"markdown","ec622de4":"markdown","c3c698c4":"markdown","967d2877":"markdown"},"source":{"e4f6759b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.metrics import classification_report, plot_confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder\nimport seaborn as sbn\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cc1b1b48":"df = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")","56d803c8":"missing_values_cols = [col for col in df.columns if df[col].isnull().any()]\nmissing_values_cols","a6882ba1":"categorical_cols = [col for col in df.columns if df[col].dtype == 'object']\nlabel_encoder = LabelEncoder()\nlabelled_df = df.copy()\nfor col in categorical_cols:\n    labelled_df[col] = label_encoder.fit_transform(df[col])\nlabelled_df.head()","c502e188":"correlation=labelled_df.corr()\nplt.figure(figsize=(15,15))\nsbn.heatmap(correlation,annot=True,cmap=plt.cm.Blues)","a3ae8a00":"labelled_df.drop('veil-type', axis=1, inplace=True)","421e054b":"y = labelled_df.iloc[:, 0]\nX = labelled_df.iloc[:, 1:22]","69589d1b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","8daf792a":"model = DecisionTreeClassifier()\nparameters = [{'max_depth': [1,2,3,4,5,6,7,8,9,10]}]\nclf = GridSearchCV(model, parameters, cv=5, scoring=\"accuracy\")\nclf.fit(X_train, y_train)\nprint(clf.best_params_)","e0b819c8":"clf = DecisionTreeClassifier(max_depth=9)\nclf.fit(X_train, y_train)\n\ny_test_hat = clf.predict(X_test)\nprint(classification_report(y_test, y_test_hat))\nprint(plot_confusion_matrix(clf, X_test, y_test, cmap=plt.cm.Blues,\n                            display_labels=['Poison', 'No poison']))","d0df54ae":"plt.figure(figsize=[20, 10])\ntree.plot_tree(clf, rounded= True, filled= True)","f77a6b31":"# Importing dataset","cbb29bb8":"# Visualizing","5d1290cc":"# Splitting training and testing dataset","9210f275":"# Applying the best parameters in our model","b4aa0378":"# Dependent and Independent variables","22d5f8b7":"# Label Encoding to categorical columns","ec622de4":"# Checking for missing values","c3c698c4":"As viel-type is not related to any of the columns, removing it","967d2877":"# Applying GridSearchCV to find the best hyperparameters for performing classification"}}