{"cell_type":{"78744085":"code","80d54212":"code","ca1a305a":"code","2ae05dfc":"code","053c5aad":"code","9d9ee034":"code","d4901a55":"code","2a6b6758":"code","4d2e51c0":"code","8e60111c":"code","b261d81c":"code","e9f16849":"code","c9f3836d":"code","88a0bca3":"code","a0b784d8":"code","52d2372d":"code","09306251":"code","5dc42ef6":"code","b4b142de":"markdown","e56a05ef":"markdown","6770ff16":"markdown","135a04ff":"markdown","b2d5f34d":"markdown","481a11d9":"markdown"},"source":{"78744085":"import os\nimport json\n\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport keras\nfrom keras import layers\nfrom keras.applications import DenseNet121\nfrom keras.callbacks import Callback, ModelCheckpoint, ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam, Nadam\nimport tensorflow as tf\nfrom tqdm import tqdm","80d54212":"train_df = pd.read_csv('..\/input\/severstal-steel-defect-detection\/train.csv')\n\nprint(train_df.shape)\ntrain_df.head()","ca1a305a":"submission_df = pd.read_csv('..\/input\/severstal-steel-defect-detection\/sample_submission.csv')\nprint(submission_df.shape)\nsubmission_df.head()","2ae05dfc":"unique_test_images = submission_df['ImageId_ClassId'].apply(\n    lambda x: x.split('_')[0]\n).unique()\n\nunique_test_images","053c5aad":"train_df['isNan'] = pd.isna(train_df['EncodedPixels'])\ntrain_df['ImageId'] = train_df['ImageId_ClassId'].apply(\n    lambda x: x.split('_')[0]\n)\ntrain_df.head()","9d9ee034":"train_nan_df = train_df.groupby(by='ImageId', axis=0).agg('sum')\ntrain_nan_df.reset_index(inplace=True)\ntrain_nan_df.rename(columns={'isNan': 'missingCount'}, inplace=True)\ntrain_nan_df['missingCount'] = train_nan_df['missingCount'].astype(np.int32)\ntrain_nan_df['allMissing'] = (train_nan_df['missingCount'] == 4).astype(int)\n\ntrain_nan_df.head()","d4901a55":"test_nan_df = pd.DataFrame(unique_test_images, columns=['ImageId'])\nprint(test_nan_df.shape)\ntest_nan_df.head()","2a6b6758":"train_nan_df['missingCount'].hist()\ntrain_nan_df['missingCount'].value_counts()","4d2e51c0":"def load_img(code, base, resize=True):\n    path = f'{base}\/{code}'\n    img = cv2.imread(path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    if resize:\n        img = cv2.resize(img, (256, 256))\n    \n    return img\n\ndef validate_path(path):\n    if not os.path.exists(path):\n        os.makedirs(path)","8e60111c":"train_path = '..\/tmp\/train'\nvalidate_path(train_path)\n\nfor code in tqdm(train_nan_df['ImageId']):\n    img = load_img(\n        code,\n        base='..\/input\/severstal-steel-defect-detection\/train_images'\n    )\n    path = code.replace('.jpg', '')\n    cv2.imwrite(f'{train_path}\/{path}.png', img)","b261d81c":"train_nan_df['ImageId'] = train_nan_df['ImageId'].apply(\n    lambda x: x.replace('.jpg', '.png')\n)","e9f16849":"BATCH_SIZE = 32\n\ndef create_datagen():\n    return ImageDataGenerator(\n        zoom_range=0.1,  # set range for random zoom\n        # set mode for filling points outside the input boundaries\n        fill_mode='constant',\n        cval=0.,\n        rotation_range=10,\n        height_shift_range=0.1,\n        width_shift_range=0.1,\n        horizontal_flip=True,\n        vertical_flip=True,\n        rescale=1\/255.,\n        validation_split=0.15\n    )\n\ndef create_test_gen():\n    return ImageDataGenerator(rescale=1\/255.).flow_from_dataframe(\n        test_nan_df,\n        directory='..\/input\/severstal-steel-defect-detection\/test_images\/',\n        x_col='ImageId',\n        class_mode=None,\n        target_size=(256, 256),\n        batch_size=BATCH_SIZE,\n        shuffle=False\n    )\n\ndef create_flow(datagen, subset):\n    return datagen.flow_from_dataframe(\n        train_nan_df, \n        directory='..\/tmp\/train',\n        x_col='ImageId', \n        y_col='allMissing', \n        class_mode='other',\n        target_size=(256, 256),\n        batch_size=BATCH_SIZE,\n        subset=subset\n    )\n\n# Using original generator\ndata_generator = create_datagen()\ntrain_gen = create_flow(data_generator, 'training')\nval_gen = create_flow(data_generator, 'validation')\ntest_gen = create_test_gen()","c9f3836d":"def build_model():\n    densenet = DenseNet121(\n        include_top=False,\n        input_shape=(256,256,3),\n        weights='..\/input\/densenet-keras\/DenseNet-BC-121-32-no-top.h5'\n    )\n    \n    model = Sequential()\n    model.add(densenet)\n    model.add(layers.GlobalAveragePooling2D())\n    model.add(layers.BatchNormalization())\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Dense(512, activation='relu'))\n    model.add(layers.BatchNormalization())\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Dense(1, activation='sigmoid'))\n    \n    model.compile(\n        loss='binary_crossentropy',\n        optimizer=Nadam(),\n        metrics=['accuracy']\n    )\n    \n    return model","88a0bca3":"model = build_model()\nmodel.summary()","a0b784d8":"total_steps = train_nan_df.shape[0] \/ BATCH_SIZE\n\ncheckpoint = ModelCheckpoint(\n    'model.h5', \n    monitor='val_acc', \n    verbose=1, \n    save_best_only=True, \n    save_weights_only=False,\n    mode='auto'\n)\n\nreduce_lr = ReduceLROnPlateau(\n    monitor='val_loss',\n    patience=5,\n    verbose=1,\n    min_lr=1e-6\n)\n\nhistory = model.fit_generator(\n    train_gen,\n    steps_per_epoch=total_steps * 0.85,\n    validation_data=val_gen,\n    validation_steps=total_steps * 0.15,\n    epochs=40,\n    callbacks=[checkpoint, reduce_lr]\n)","52d2372d":"history_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()","09306251":"model.load_weights('model.h5')\ny_test = model.predict_generator(\n    test_gen,\n    steps=len(test_gen),\n    verbose=1\n)","5dc42ef6":"test_nan_df['allMissing'] = y_test\n\nhistory_df.to_csv('history.csv', index=False)\ntrain_nan_df.to_csv('train_missing_count.csv', index=False)\ntest_nan_df.to_csv('test_missing_count.csv', index=False)","b4b142de":"# Modelling","e56a05ef":"# Reducing Image Size","6770ff16":"# About this kernel\n\nThe goal is to:\n* Investigate the problem of null masks by exploring the distribution of NaN per image.\n* Reduce image size to 224x224 for simpler models.\n* Create a lightweight CNN to predict if a certain image has no defect (i.e., it has 4 missing masks). This will be useful in order to reduce the computation power needed to train a segmentation model (e.g. Mask R-CNN), since we can immediately discard the image with 4 missing masks.\n\nThis is a work in progress, and I will update the kernel in the next few days. I'll work hard on this if you show some support :)\n\n### Updates\n* V9: Changed model from MobileNet to DenseNet.","135a04ff":"## Save results as CSV files","b2d5f34d":"# EDA\n\nThis EDA will mainly focus on detecting how the null masks are distributed. We will group all the `ImageId_ClassId` by their respective ImageId, and keep track of the number of missing masks for each image.","481a11d9":"We notice that an overwhelming number of images have 3 to 4 missing masks. In fact, all except 2 images have 2+ missing masks. This means that we would basically need to train the final segmentation model on less than half of the data points."}}