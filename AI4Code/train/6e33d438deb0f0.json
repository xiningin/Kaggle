{"cell_type":{"f5bab68d":"code","e15199c6":"code","f2d28f59":"code","cffb80e3":"code","b9a2400e":"code","7590e866":"code","a794239b":"code","4d60f939":"code","4e3a7542":"code","951e0c6d":"code","b3d17093":"code","ca8eb140":"code","00398d07":"code","94c8e4aa":"code","bf7581da":"code","f822cb7f":"code","e060447c":"code","b2c2967e":"code","dfb5a517":"code","dc653351":"code","f7c0f121":"code","b5a29c32":"code","c2da8400":"code","b6d37414":"code","9a60d36e":"code","74b48ad7":"code","84af2c4e":"code","2e034942":"code","86af0ba9":"markdown","f7efd6e1":"markdown","5dcf9d44":"markdown","cea44725":"markdown","7b87fe48":"markdown","6c4369e7":"markdown","4a26385f":"markdown","f58bd80f":"markdown","7bbc77a1":"markdown","a53c47ab":"markdown","7b94f5ef":"markdown","ae8daa45":"markdown","5fe98f71":"markdown","edf1d150":"markdown","e3c07c37":"markdown","e2da654d":"markdown","1049ba78":"markdown"},"source":{"f5bab68d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e15199c6":"%%bash\n\nJULIA_VERSION=\"1.7.1\"\nJULIA_PACKAGES=\"DataFrames Feather ShiftedArrays RollingFunctions CSV Pipe Plots\"\n\nJULIA_VER=`cut -d '.' -f -2 <<< \"$JULIA_VERSION\"`\nBASE_URL=\"https:\/\/julialang-s3.julialang.org\/bin\/linux\/x64\"\nURL=\"$BASE_URL\/$JULIA_VER\/julia-$JULIA_VERSION-linux-x86_64.tar.gz\"\nwget -nv $URL -O \/tmp\/julia.tar.gz\ntar -x -f \/tmp\/julia.tar.gz -C \/usr\/local --strip-components 1\nrm \/tmp\/julia.tar.gz\nfor PKG in `echo $JULIA_PACKAGES`; do\n    echo \"Installing Julia package $PKG...\"\n    julia -e 'using Pkg; pkg\"add '$PKG'\"'\ndone","f2d28f59":"import os\nos.environ['JULIA_NUM_THREADS'] = \"4\"","cffb80e3":"%%bash\n\njulia -e 'println(\"Hello Julia.\")'\njulia -e 'using Base.Threads; println(nthreads())'","b9a2400e":"%%time\n!pip install --quiet julia\nimport julia\nfrom julia.api import Julia\njulia.install()\njl = Julia(compiled_modules=False)  # cannot use precompiled packages with pyjulia on linux :-(\n%load_ext julia.magic","7590e866":"%%julia\nusing Pkg\nPkg.add(\"MLBase\")\nPkg.add(\"DecisionTree\")\nPkg.add(\"Distances\")\nPkg.add(\"Random\")\nPkg.add(\"LinearAlgebra\")\nPkg.add(\"DataStructures\")","a794239b":"%%julia\nusing DataFrames, CSV\nusing MLBase\nusing Plots\nusing DecisionTree\nusing Distances\nusing Random\nusing LinearAlgebra\nusing DataStructures","4d60f939":"%%julia\ndf = CSV.read(\"\/kaggle\/input\/iris-dataset\/iris.csv\",DataFrame, normalizenames = true);","4e3a7542":"%%julia\ndf[1:5,:]","951e0c6d":"%%julia\nsize(df)","b3d17093":"%%julia\nunique(df.Species)","ca8eb140":"%%julia\ndescribe(df)","00398d07":"%%julia\np1 = histogram(df.Sepal_Length, title=\"Sepal_Length\", label=\"SL\")\np2 = histogram(df.Sepal_Width, title=\"Sepal_Width\", label=\"SW\")\np3 = histogram(df.Petal_Length, title=\"Petal_Length\", label=\"PL\")\np4 = histogram(df.Petal_Width, title=\"Petal_Width\", label=\"PW\")\n\nplot(p1,p2,p3,p4, layout=(2,2))","94c8e4aa":"%%julia\nx= countmap(df.Species)\nprint(x)","bf7581da":"%%julia\na= [\"virginica\", \"setosa\", \"versicolor\"]\nb= [50, 50, 50]","f822cb7f":"%%julia\nPlots.gr()\npie(a,b)","e060447c":"%%julia\ncountmap(df.Species)","b2c2967e":"%%julia\nX = Matrix(df[:,1:4])","dfb5a517":"%%julia\nirislabels = df.Species","dc653351":"%%julia\nirislabelsmap = labelmap(irislabels)","f7c0f121":"%%julia\ny = labelencode(irislabelsmap, irislabels)","b5a29c32":"%%julia\nfunction perclass_splits(y,at)\n    uids = unique(y)\n    keepids = []\n    for ui in uids\n        curids = findall(y.==ui)\n        rowids = randsubseq(curids, at) \n        push!(keepids,rowids...)\n    end\n    return keepids\nend","c2da8400":"%%julia\ntrainids = perclass_splits(y,0.7)\ntestids = setdiff(1:length(y),trainids)","b6d37414":"%%julia\nmodel = RandomForestClassifier(n_trees=20)\nDecisionTree.fit!(model, X, y)","9a60d36e":"%%julia\nfindaccuracy(predictedvals,groundtruthvals) = sum(predictedvals.==groundtruthvals)\/length(groundtruthvals)","74b48ad7":"%%julia\nq = X[testids,:];\npredictions_RF = DecisionTree.predict(model, q)\nfindaccuracy(predictions_RF,y[testids])","84af2c4e":"%%julia\nmodel = DecisionTreeClassifier(max_depth=2)\nDecisionTree.fit!(model, X[trainids,:], y[trainids])","2e034942":"%%julia\nq = X[testids,:];\npredictions_DT = DecisionTree.predict(model, q)\nfindaccuracy(predictions_DT,y[testids])","86af0ba9":"## Importing and Using Packages","f7efd6e1":"## Random Forest ","5dcf9d44":"## Unique values in column species","cea44725":"- Accuracy","7b87fe48":"## Accuray Function","6c4369e7":"## First five rows of dataset","4a26385f":"- Accuracy","f58bd80f":"## Visualization\n- Histogram \n- Pie chart","7bbc77a1":"## Size of data","a53c47ab":"## Class counts","7b94f5ef":"## Label Encoding on species column","ae8daa45":"## Descriptive statistical values","5fe98f71":"## Splitting data\n- Train and Test ","edf1d150":"## Decision Tree","e3c07c37":"## Installing Julia","e2da654d":"## Reading data ","1049ba78":"## Splitting function\n- randsubseq is random in python"}}