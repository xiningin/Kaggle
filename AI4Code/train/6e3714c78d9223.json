{"cell_type":{"1c1bf85d":"code","8e04720a":"code","984b3950":"code","980f49b8":"code","6573bf60":"code","5800fa64":"code","d5965d34":"code","6ecf71ab":"code","15dc3a29":"code","0e92ee97":"code","667b43bf":"code","25e2e5cb":"code","9571d98e":"code","b07718d9":"code","aaf9a76a":"code","de20487f":"code","4eb62264":"code","337e8767":"code","026d08a4":"code","367a9e4d":"code","f70f0900":"code","aa99fcdd":"code","50538683":"code","0c834996":"code","34da996c":"code","d2c8cbb6":"code","fc58d870":"code","3c1854ac":"code","e879d1d8":"code","7e5aaf51":"code","ddad379b":"code","f2757632":"code","799388d2":"code","d3f937f7":"code","812acb04":"code","188e89df":"code","3d13bd7e":"code","6609470b":"code","b6dea3e7":"code","df291be1":"code","52daf1a4":"code","40e38f36":"code","9194bc3a":"code","be04f89b":"code","5ad81588":"code","f4632f1e":"code","b202933a":"code","0514b821":"code","830061df":"code","b4d75581":"code","24535f39":"code","bc57ef4c":"code","f45bf7ca":"code","cd988f42":"code","ef6f0a21":"code","d70e776d":"code","3f346674":"code","1091d821":"code","9335069a":"code","92f91683":"code","f5477404":"code","3b167b7c":"code","d0f0289c":"code","85982900":"code","e7476542":"code","62ff3173":"code","f7132771":"code","d2d2caaf":"code","a8626bd8":"code","c031426c":"code","2126d6a8":"code","75811b95":"code","142e0a18":"code","c1f424e7":"markdown","5deec9bb":"markdown","0443f5ed":"markdown","f0ea69e7":"markdown"},"source":{"1c1bf85d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e04720a":"import numpy as np\nimport pandas as pd\nimport missingno as msno\nimport matplotlib.pyplot as plt","984b3950":"aug_train = pd.read_csv('\/kaggle\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv')  \naug_test = pd.read_csv('\/kaggle\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv') ","980f49b8":"aug_train.shape","6573bf60":"aug_train.head()","5800fa64":"aug_train.drop(['enrollee_id'], axis = 1, inplace = True)","d5965d34":"string_cols = ['city','gender','relevent_experience','enrolled_university','education_level','major_discipline','company_type']","6ecf71ab":"aug_train.isnull().mean()*100","15dc3a29":"aug_test.isnull().mean() * 100","0e92ee97":"aug_train.groupby('company_type').agg({'target': ['sum', 'count','mean']})","667b43bf":"aug_test.groupby('company_type').agg({'training_hours': ['sum', 'count','mean']})","25e2e5cb":"aug_train.groupby('company_type').agg({'training_hours': ['sum', 'count','mean']})","9571d98e":"for i in  aug_train.isna().mean()[ aug_train.isna().mean() > 0].index:\n    print(i,  aug_train[i].unique(), '\\n')","b07718d9":"for i in  aug_train.columns:\n    print(i,  aug_train[i].unique(),'\\n')","aaf9a76a":"aug_train.sample(7)","de20487f":"aug_train.loc[aug_train['experience']== '>20','experience'] = '20'\naug_train.loc[aug_train['experience']== '<1','experience'] = '1'\naug_train['experience'].fillna('0',inplace = True)\naug_train['experience'] = aug_train['experience'].astype('int32')","4eb62264":"aug_train.loc[aug_train['last_new_job']== '>4','last_new_job'] = '5'\naug_train.loc[aug_train['last_new_job']== 'never','last_new_job'] = '0'\naug_train['last_new_job'].fillna('-1',inplace = True)\naug_train['last_new_job'] = aug_train['last_new_job'].astype('int32')","337e8767":"aug_train['company_size'] = aug_train['company_size'].map({'0':0,\n                               '50-99':50,\n                               '<10': 1,\n                               '10000+':10000,\n                               '5000-9999':5000,\n                               '1000-4999':1000,\n                               '10\/49':10,\n                               '100-500':100,\n                               '500-999':500})\naug_train['company_size'].fillna(-1,inplace = True)\naug_train['company_size'] = aug_train['company_size'].astype('int32')","026d08a4":"aug_train['city'] = aug_train['city'].str.replace('city_', '', regex=False).astype('int32')","367a9e4d":"for col in string_cols:\n    aug_train[col].fillna('NaN',inplace = True)","f70f0900":"for i in  aug_train.columns:\n    print(i,  aug_train[i].unique(),'\\n')","aa99fcdd":"aug_train.isnull().mean()*100","50538683":"#msno.heatmap(aug_train)","0c834996":"aug_train.agg({'target': ['sum','mean']})","34da996c":"aug_train.describe()","d2c8cbb6":"aug_train.dtypes","fc58d870":"aug_train.dtypes.value_counts()","3c1854ac":"lst_col_target = 'target'","e879d1d8":"def encode_and_bind(original_dataframe, feature_to_encode):\n    #dummies = pd.get_dummies(original_dataframe[[feature_to_encode]])\n    #res = pd.concat([original_dataframe, dummies], axis=1)\n    res = pd.get_dummies(original_dataframe,columns=feature_to_encode,drop_first=True)\n    return(res)","7e5aaf51":"str_cols = list(aug_train.dtypes.index[aug_train.dtypes == 'O'])","ddad379b":"str_cols","f2757632":"X_endc = encode_and_bind(aug_train, str_cols)","799388d2":"X_endc.head()","d3f937f7":"X_endc.dtypes.value_counts()","812acb04":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_endc.drop(columns=['target']),\n                                                    X_endc['target'], \n                                                    test_size=0.25, \n                                                    random_state=42)","188e89df":"X_train.sample(5)","3d13bd7e":"from sklearn import tree\ndct = tree.DecisionTreeClassifier(max_depth=5,min_samples_leaf=30)\ndct.fit(X_train,y_train)","6609470b":"#tree.plot_tree(dct)\n#https:\/\/moonbooks.org\/Articles\/How-to-plot-visualize-a-neural-network-in-python-using-Graphviz-\/","b6dea3e7":"import graphviz \ndot_data = tree.export_graphviz(dct, out_file=None,filled=True, rounded=True, )  \ngraph = graphviz.Source(dot_data)  \n#graph ","df291be1":"graph","52daf1a4":"graph.render('dct', view=False) ","40e38f36":"y_pred_lr = dct.predict(X_test)\ny_pred_proba = dct.predict_proba(X_test)[:,1]","9194bc3a":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred_lr)","be04f89b":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred_lr))","5ad81588":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(max_depth=5,n_estimators=5, random_state=42 )","f4632f1e":"clf.fit(X_train,y_train)","b202933a":"import shap\nexplainer = shap.TreeExplainer(clf)\nshap_values = explainer.shap_values(X_train)\nshap.summary_plot(shap_values, X_train, plot_type=\"bar\")","0514b821":"shap_values = explainer.shap_values(X_train, approximate=False, check_additivity=False)\nshap.summary_plot(shap_values[1], X_train)","830061df":"import matplotlib.pyplot as plt\nf = plt.figure()\nshap.summary_plot(shap_values[:-1], X_test)","b4d75581":"y_pred_lr = clf.predict(X_test)","24535f39":"y_pred_proba = clf.predict_proba(X_test)[:,1]","bc57ef4c":"y_pred_proba","f45bf7ca":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred_lr)","cd988f42":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred_lr))","ef6f0a21":"from sklearn.metrics import roc_auc_score, f1_score, plot_confusion_matrix\nfrom sklearn.metrics import plot_roc_curve, plot_precision_recall_curve, classification_report, precision_score, recall_score","d70e776d":"df_report = pd.DataFrame(columns={'ROC-AUC'}, data=[0])\ndf_report['ROC-AUC'] = roc_auc_score(y_test, y_pred_proba)\ndf_report['F1'] = f1_score(y_test, y_pred_lr)\ndf_report['precision_0'] = precision_score(y_test, y_pred_lr, pos_label=0)\ndf_report['recall_0'] = recall_score(y_test, y_pred_lr, pos_label=0)\ndf_report['precision_1'] = precision_score(y_test, y_pred_lr, pos_label=1)\ndf_report['recall_1'] = recall_score(y_test, y_pred_lr, pos_label=1)\ndf_report.index = ['Randomforrest']","3f346674":"df_report","1091d821":"score = pd.DataFrame({'score':y_pred_proba, 'target':y_test})","9335069a":"score.sample(15)","92f91683":"score.describe()","f5477404":"score['pct_rank'] = (score['score'].rank(pct=True)*100).astype('int')","3b167b7c":"score.describe()","d0f0289c":"score.sample(5)","85982900":"score['score'] = score['score'].astype('float')\nscore['bin'] = pd.qcut(score['score'].rank(method='first'), 10, labels=['{}'.format(str(x+1).zfill(2)) for x in range(10)]) ","e7476542":"Lift_chart = score[score.target==1].groupby('bin').count()","62ff3173":"score.groupby('bin').count()","f7132771":"score.groupby('bin').sum()","d2d2caaf":"Lift_chart","a8626bd8":"Lift_chart['pcnt'] = Lift_chart.iloc[:,1]\/score.groupby('bin').count().iloc[:,0]*100","c031426c":"Lift_chart","2126d6a8":"import matplotlib.pyplot as plt\nimport seaborn as sns","75811b95":"sns.countplot(score[score.target==1]['bin'])","142e0a18":"aug_train['target'].value_counts()","c1f424e7":"# Nan imputation","5deec9bb":"# **Random Forrest**","0443f5ed":"# **Decision Tree**","f0ea69e7":"# Feature Engineering"}}