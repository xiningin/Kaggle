{"cell_type":{"17363cee":"code","028be5b1":"code","53f0661b":"code","891ca6a0":"code","009a9416":"code","a22fecc1":"code","52236d04":"code","8e383682":"code","23bb6dcf":"code","3a8e4ed9":"code","3b20499c":"code","b95bc2e3":"code","3ae32f41":"code","1aee0f57":"code","66748527":"code","af8d6198":"code","de1de1bc":"code","1ac5ebe5":"code","9dc57766":"code","6819e7e5":"code","ee03a2c9":"code","bfb02c3a":"code","3312d387":"code","3084e23e":"code","2c8344d8":"code","4e410d62":"code","68917f71":"code","9a7021e3":"code","11faccd8":"code","705e2a7a":"code","fae3ad27":"code","80a2b961":"code","27b22c53":"code","74c5a3bb":"code","9c3596f9":"code","117ddb76":"code","6faa1de6":"code","0f8c82b4":"code","0736db76":"code","2dc7cd2f":"code","cfbb7771":"code","ae01a83c":"code","8d9bbb51":"code","15f001b8":"code","90c972a0":"code","a096745f":"code","15bac7fd":"code","2c6c9f6c":"code","9c5d8e7d":"code","3a563d9c":"code","499d0a1c":"code","3a03df3e":"code","881002ac":"code","a536244d":"code","43c9c570":"code","78497186":"code","93af5f0c":"code","67f46cf8":"code","a9665165":"code","11cdf3dd":"code","239d3267":"code","1f16c62c":"markdown","4ac87352":"markdown","7bfa3ff5":"markdown","2a5213db":"markdown","276142a5":"markdown","83d70fe0":"markdown","e4416bdb":"markdown","1212179b":"markdown","662629ac":"markdown","4f8da5be":"markdown","b964ed43":"markdown","da4f4546":"markdown"},"source":{"17363cee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","028be5b1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import rcParams\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score","53f0661b":"sns.set(style='darkgrid')\nrcParams['figure.figsize']=10,6","891ca6a0":"pd.pandas.set_option('display.max_columns',None)","009a9416":"train=pd.read_excel(r'..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')\ntest=pd.read_excel(r'..\/input\/flight-fare-prediction-mh\/Test_set.xlsx')","a22fecc1":"train.head()","52236d04":"test.head()","8e383682":"train.isna().sum()","23bb6dcf":"test.isna().sum()","3a8e4ed9":"train.shape","3b20499c":"test.shape","b95bc2e3":"train.info()","3ae32f41":"test.info()","1aee0f57":"train.dropna(inplace=True)","66748527":"train.shape","af8d6198":"chart=sns.countplot(x='Airline',data=train)\nchart.set_xticklabels(chart.get_xticklabels(), rotation=90)","de1de1bc":"chart=sns.barplot(x='Airline',y='Price',data=train)\nchart.set_xticklabels(chart.get_xticklabels(), rotation=90)","1ac5ebe5":"chart=sns.countplot(x='Airline',hue='Total_Stops',data=train)\nchart.set_xticklabels(chart.get_xticklabels(), rotation=90)","9dc57766":"train['jou_day'] = pd.DatetimeIndex(train['Date_of_Journey']).day\ntrain['jou_mon'] = pd.DatetimeIndex(train['Date_of_Journey']).month","6819e7e5":"chart=sns.countplot(x='Airline',hue='jou_mon',data=train)\nchart.set_xticklabels(chart.get_xticklabels(), rotation=90)","ee03a2c9":"sns.barplot(x='jou_mon',y='Price',data=train)","bfb02c3a":"test['jou_day'] = pd.DatetimeIndex(test['Date_of_Journey']).day\ntest['jou_mon'] = pd.DatetimeIndex(test['Date_of_Journey']).month","3312d387":"train['Airline'].value_counts()","3084e23e":"test['Airline'].value_counts()","2c8344d8":"train['Destination'].unique()","4e410d62":"test['Destination'].unique()","68917f71":"train_airline=pd.get_dummies(train.Airline,drop_first=True)","9a7021e3":"train_airline=train_airline.drop(['Trujet'],axis=1)","11faccd8":"train_airline.head()","705e2a7a":"test_airline=pd.get_dummies(test.Airline,drop_first=True)","fae3ad27":"test_airline.head()","80a2b961":"train_source=pd.get_dummies(train.Source,drop_first=True)\nprint(train_source.head())\n\ntrain_destination=pd.get_dummies(train.Destination,drop_first=True)\nprint(train_destination.head())","27b22c53":"test_source=pd.get_dummies(test.Source,drop_first=True)\nprint(test_source.head())\n\ntest_destination=pd.get_dummies(test.Destination,drop_first=True)\nprint(test_destination.head())","74c5a3bb":"train['Total_Stops'].unique()","9c3596f9":"stops={'non-stop':0,'1 stop':1,'2 stops':2,'3 stops':3,'4 stops':4}\n\ntrain['Total_Stops']=train['Total_Stops'].map(stops)","117ddb76":"train.head()","6faa1de6":"test['Total_Stops'].unique()","0f8c82b4":"stops={'non-stop':0,'1 stop':1,'2 stops':2,'3 stops':3,'4 stops':4}\n\ntest['Total_Stops']=test['Total_Stops'].map(stops)","0736db76":"train['dep_hour']=pd.to_datetime(train['Dep_Time']).dt.hour\ntrain['dep_min']=pd.to_datetime(train['Dep_Time']).dt.minute","2dc7cd2f":"test['dep_hour']=pd.to_datetime(test['Dep_Time']).dt.hour\ntest['dep_min']=pd.to_datetime(test['Dep_Time']).dt.minute","cfbb7771":"train['arr_hour']=pd.to_datetime(train['Arrival_Time']).dt.hour\ntrain['arr_min']=pd.to_datetime(train['Arrival_Time']).dt.minute","ae01a83c":"test['arr_hour']=pd.to_datetime(test['Arrival_Time']).dt.hour\ntest['arr_min']=pd.to_datetime(test['Arrival_Time']).dt.minute","8d9bbb51":"train.head()","15f001b8":"test.head()","90c972a0":"train.drop(['Airline','Date_of_Journey','Source','Destination','Route','Dep_Time','Arrival_Time','Duration','Additional_Info'],axis=1,inplace=True)","a096745f":"test.drop(['Airline','Date_of_Journey','Source','Destination','Route','Dep_Time','Arrival_Time','Duration','Additional_Info'],axis=1,inplace=True)","15bac7fd":"train.head()","2c6c9f6c":"test.head()","9c5d8e7d":"train=pd.concat([train,train_airline,train_source,train_destination],axis=1)","3a563d9c":"train.head()","499d0a1c":"test=pd.concat([test,test_airline,test_source,test_destination],axis=1)","3a03df3e":"test.head()","881002ac":"train.shape","a536244d":"test.shape","43c9c570":"X=train.drop(['Price'],axis=1)\ny=train['Price']","78497186":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.25, random_state=5)","93af5f0c":"knr=KNeighborsRegressor(n_neighbors=2)\nknr.fit(X_train,y_train)\ny_pred=knr.predict(X_test)","67f46cf8":"score=r2_score(y_test,y_pred)\nscore","a9665165":"regressor=RandomForestRegressor(n_estimators = 100, random_state = 15)\nregressor.fit(X_train,y_train)\ny_Pred=regressor.predict(X_test)","11cdf3dd":"scores=r2_score(y_test,y_Pred)\nscores","239d3267":"train_pred=regressor.predict(test)\nfinal_df=pd.DataFrame({ 'Price': train_pred })\nfinal_df.to_csv('final_dataset.csv',index=False)","1f16c62c":"##  Importing Important libraries","4ac87352":"### lets handle catrgorical features\n","7bfa3ff5":"#### so in this dataset \"jet Airways\" comes most of the time and the last 4 Airline ('Vistara Premium economy' , 'Jet Airways Business' , 'Multiple carriers Premium economy' & 'Trujet') comes almost nothing","2a5213db":"## RandomForestRegressor","276142a5":"#### As we can see most of the flight are traveled Non stop and One stop","83d70fe0":"##  KNeighborsRegressor","e4416bdb":"### to read an excel file use read_excel","1212179b":"#### Almost every Flight has least operation in the month of April and maximum in march & june","662629ac":"### similarly for other categorical feature ","4f8da5be":"#### Flight Vs Price","b964ed43":"### the data type of date_of_journey is object as we can see in info.so we will convert it into teimestamp.","da4f4546":"## Data Visualization "}}