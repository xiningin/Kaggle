{"cell_type":{"d2ca9b64":"code","cbb84db2":"code","74054b50":"code","df88576d":"code","84f0249b":"code","94a5ee30":"code","fa84b136":"code","f7df9a43":"code","c2433ead":"code","940b8cd6":"code","a04331ef":"code","987bc6ac":"code","7353d8e5":"code","362d716b":"code","271892bc":"code","2a9a9a1d":"code","5676c49d":"code","1f42334e":"code","96fafb3d":"code","b4387ca2":"code","036871d4":"markdown","f9701abd":"markdown","d6412806":"markdown","3906cd6a":"markdown","7befd14e":"markdown","9dae10ea":"markdown"},"source":{"d2ca9b64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cbb84db2":"import sklearn.metrics as metrics\nfrom sklearn.metrics import classification_report # for accuracy and F1 score","74054b50":"# Read the data into a pandas dataframe\nhealth_df = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\nhealth_df.head()","df88576d":"# Drop the id column since we don't need it.\nhealth_df.drop('id', axis = 1,inplace = True)\nhealth_df.head()","84f0249b":"# Find null data\nhealth_df.isnull().sum()","94a5ee30":"# Lets see how many datapoints are null and if small delete those rows\nprint(f\"% BMI missing  {(health_df['bmi'].isnull().sum()\/health_df.shape[0])*100:0.2f}\")","fa84b136":"# Remove null rows\nhealth_df.dropna(axis = 0, inplace = True)","f7df9a43":"# Check gender data \nhealth_df.gender.value_counts()","c2433ead":"# Remove \"Other\"\nhealth_df.drop(health_df[health_df[\"gender\"] == \"Other\"].index, axis = 0, inplace = True)","940b8cd6":"# Classify BMI as group\nhealth_df['bmi_group'] = 0 # create new column\nfor i in range(len(health_df.index)):\n    if health_df.iloc[i, 8] < 18.5:\n        health_df.iloc[i, 11] = 'Underweight'\n    elif health_df.iloc[i, 8] < 25.0 and health_df.iloc[i, 8] >= 18.5:\n        health_df.iloc[i, 11] = 'Normal weight'\n    elif health_df.iloc[i, 8] < 30.0 and health_df.iloc[i, 8] >= 25.0:\n        health_df.iloc[i, 11] = 'Overweight'\n    else:\n        health_df.iloc[i, 11] = 'Obese'\n        \nhealth_df.head()","a04331ef":"health_df.bmi_group.value_counts()","987bc6ac":"# Classify glucose as group\nhealth_df['glucose_group'] = 0 # create new column\nfor i in range(len(health_df.index)):\n    if health_df.iloc[i, 7] < 100.0:\n        health_df.iloc[i, 12] = 'Normal'\n    elif health_df.iloc[i, 7] >= 100.0 and health_df.iloc[i, 7] < 125.0:\n        health_df.iloc[i, 12] = 'Prediabetes'\n    else:\n        health_df.iloc[i, 12] = 'Diabetes'\n\nhealth_df.head()","7353d8e5":"health_df.glucose_group.value_counts()","362d716b":"# Transform string lables into numeric ones\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nhealth_df[\"gender\"] = le.fit_transform(health_df[\"gender\"])\nhealth_df[\"ever_married\"] = le.fit_transform(health_df[\"ever_married\"])\nhealth_df[\"work_type\"] = le.fit_transform(health_df[\"work_type\"])\nhealth_df[\"Residence_type\"] = le.fit_transform(health_df[\"Residence_type\"])\nhealth_df[\"smoking_status\"] = le.fit_transform(health_df[\"smoking_status\"])\nhealth_df[\"bmi_group\"] = le.fit_transform(health_df[\"bmi_group\"])\nhealth_df[\"glucose_group\"] = le.fit_transform(health_df[\"glucose_group\"])\n\nhealth_df.head()","271892bc":"# Assigning values and spliting test & train\nX = health_df.drop(['stroke', 'avg_glucose_level', 'bmi'], axis = 1)\ny = health_df['stroke']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","2a9a9a1d":"from sklearn.svm import SVC\nsvc = SVC(kernel='linear')\nsvc.fit(X_train, y_train)\noutcome_SVC = svc.predict(X_test)\n\nprint(classification_report(y_test, outcome_SVC))","5676c49d":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(criterion = \"entropy\", max_depth = 3)\nclf = clf.fit(X_train, y_train)\noutcome_DTC = clf.predict(X_test)\n\nprint(classification_report(y_test, outcome_DTC))","1f42334e":"from sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier(n_estimators = 100)\nforest_fit = forest.fit(X_train, y_train)\noutcome_forest = forest.predict(X_test)\n\nprint(classification_report(y_test, outcome_forest))","96fafb3d":"from xgboost.sklearn import XGBClassifier\nxgb = XGBClassifier(n_estimators = 100, learning_rate = 0.1,\n                    max_depth = 5, subsample = 1, gamma = 0,\n                    reg_lambda = 1, max_delta_step = 0, colsample_bytree = 1,\n                    min_child_weight = 1, seed = 1000)\nxgb_fit = xgb.fit(X_train, y_train)\noutcome_xgb = xgb.predict(X_test)\n\nprint(classification_report(y_test, outcome_xgb))","b4387ca2":"submission_df_1.to_csv('submission_1.csv', index=False) ","036871d4":"# Random Forest","f9701abd":"# Data Preprocessing","d6412806":"# XGBoost","3906cd6a":"# Decision Trees","7befd14e":"# SVC","9dae10ea":"# Export file"}}