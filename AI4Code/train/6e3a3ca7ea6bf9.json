{"cell_type":{"2531ca86":"code","446dd74e":"code","bd2bba17":"code","5531f0b1":"code","0ea14bcf":"code","e4effe96":"code","f2e293af":"code","dd91db3f":"code","beb5a1cd":"code","c03d0070":"code","a164b93e":"code","580c6070":"code","54589a75":"code","7619a171":"code","1f0d5e23":"code","302a9259":"code","1ca08928":"code","886eb906":"markdown","cb8580f4":"markdown","9a69aa01":"markdown","619c738d":"markdown","51af14fb":"markdown","a27082f2":"markdown","45b27631":"markdown","64b3ced1":"markdown","be71bbfe":"markdown","1edbfaef":"markdown","06cbcd5e":"markdown","e91e7ba3":"markdown","a4e02529":"markdown","fba91a7d":"markdown","dd05ba61":"markdown","a8b12c59":"markdown"},"source":{"2531ca86":"import numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport datetime\nimport folium\nimport plotly\nimport os\n\nfrom shapely import wkt\nfrom plotly.subplots import make_subplots\nfrom folium.plugins import HeatMap, MarkerCluster","446dd74e":"date_parser = lambda x: datetime.datetime.strptime(x, '%Y-%m-%d')\n\nairport_df = pd.read_csv('\/kaggle\/input\/covid19s-impact-on-airport-traffic\/covid_impact_on_airport_traffic.csv', parse_dates=['Date'], date_parser=date_parser)\nairport_df.head()","bd2bba17":"airport_df.info()","5531f0b1":"airport_df['Centroid'] = airport_df['Centroid'].apply(wkt.loads)\nairport_df['Geography'] = airport_df['Geography'].apply(wkt.loads)","0ea14bcf":"airport_geo = gpd.GeoDataFrame(airport_df, geometry= 'Centroid')\nairport_geo.head()","e4effe96":"iso_type = airport_geo.ISO_3166_2.value_counts(ascending=True)\npx.bar(y=iso_type,\n      x=iso_type.index,\n      color=iso_type)","f2e293af":"# The top records of the airport\nairport_rec = airport_geo.AirportName.value_counts(ascending=True)\npx.bar(y=airport_rec,\n      x=airport_rec.index,\n      color=airport_rec)","dd91db3f":"plt.figure(figsize=(15,5))\n\nplt.subplot(1,2,1)\nairport_geo.Country.value_counts(ascending=True).plot(kind='barh')\n\nplt.subplot(1,2,2)\nairport_geo.Country.value_counts().plot(kind='pie', legend=True)","beb5a1cd":"baseline_df = airport_geo[['Date', 'PercentOfBaseline']]\nbaseline_df['month'] = airport_geo.Date.apply(lambda x: x.month_name())\nbaseline_df['day'] = airport_geo.Date.apply(lambda x: x.day_name())\n\nmonth_percent = baseline_df.groupby('month').PercentOfBaseline.agg('mean')\nday_percent = baseline_df.groupby('day').PercentOfBaseline.agg('mean')","c03d0070":"fig_bar = make_subplots(rows=1, cols=2, start_cell='bottom-left', subplot_titles=('Month', 'Day'))\n\nfig_bar.add_trace(\n    go.Bar(x=month_percent.index, y=month_percent, name='Bar'), row=1, col=1\n)\n\nfig_bar.add_trace(\n    go.Scatter(x=month_percent.index, y=month_percent, name='Scatter'), row=1, col=1\n)\n\nfig_bar.add_trace(\n    go.Bar(x=day_percent.index, y=day_percent, name='Bar'), row=1, col=2\n)\n\nfig_bar.add_trace(\n    go.Scatter(x=day_percent.index, y=day_percent, name='Scatter'), row=1, col=2\n)\n\nfig_bar.update_layout(height=400, title='baseline percentage by month and day', showlegend=False)\n\nfig_bar.show()","a164b93e":"def return_pull(value):\n    return [0.2 if v==value.max() else 0  for v in value]\n\nfig_pie = make_subplots(rows=1, cols=2, subplot_titles=['Month', 'Day'], specs=[[{'type': 'domain'}, {'type': 'domain'}]])\n\nfig_pie.add_trace(\n    go.Pie(values=month_percent, labels=month_percent.index, name='Month', pull=return_pull(month_percent)), 1,1\n)\n\nfig_pie.add_trace(\n    go.Pie(values=day_percent, labels=day_percent.index, name='Day', pull=return_pull(day_percent)), 1,2\n)\n\nfig_pie.update_layout(\n    title='baseline percentage by month and day',\n    showlegend=False,\n    height=400\n)\n\nfig_pie.show()","580c6070":"airport_xy = airport_geo[~airport_geo.AirportName.duplicated()][['AirportName', 'Centroid', 'PercentOfBaseline']].reset_index(drop=True)\n\n# obtain the latitude and logitude from data\nairport_xy['lat'] = airport_xy.Centroid.y\nairport_xy['long'] = airport_xy.Centroid.x\nprint(airport_xy.shape)\nairport_xy.head()","54589a75":"fig_map = go.Figure(data=[\n    go.Scattergeo(lat=airport_xy['lat'],\n             lon=airport_xy['long'],\n             mode='markers',\n             hoverinfo='text',\n             marker=dict(color=\"darkred\", size=5, opacity=0.9))\n])\nfig_map.update_geos(\n    projection_type='orthographic',\n    landcolor='black',\n    showocean=True,\n    oceancolor='MidnightBlue',\n    lakecolor='blue',\n)\nfig_map.update_layout(\n    width=800,\n    height=400,\n    template=\"plotly_white\",\n    margin=dict(r=0, t=0, b=0, l=0),\n    annotations=[\n        dict(\n            text=\"\",\n            showarrow=False,\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0,\n            y=0)\n    ])\nfig_map.show()","7619a171":"class GeoMap:\n    def __init__(self, geodata):\n        assert type(geodata) == gpd.GeoDataFrame, 'geodata is not a GeoDataFrame: {}'.format(type(geodata))\n        \n        self.geo_df = geodata\n    \n    def heat_map(self, radius, location=None, zoom=None):\n        assert type(radius) == int, 'radius is not a interger value: {}'.format(type(radius))\n        assert type(location) == list, 'location is not a list: {}'.format(type(location))\n        assert type(zoom) == int, 'zoom is not a interger value: {}'.format(type(zoom))\n        \n        try:\n            map_ = folium.Map(location=location, zoom_start=zoom)\n            HeatMap(data=self.geo_df[['lat', 'long']], radius=radius).add_to(map_)\n        \n            return map_\n        \n        except Exception as e:\n            print(e)\n            \n    def marker_map(self, location=None, zoom=None):\n        assert type(location) == list, 'location is not a list: {}'.format(type(location))\n        assert type(zoom) == int, 'zoom is not a interger value: {}'.format(type(zoom))\n        \n        try:\n            map_ = folium.Map(location=location, zoom_start=zoom)\n            \n            m_cluster = MarkerCluster()\n            for idx, row in self.geo_df.iterrows():\n                m_cluster.add_child(folium.Marker([row['lat'], row['long']],\n                            popup='airport: {}\\nlatitude: {:.2f}\\nlogitude: {:.2f}'.format(row['AirportName'], row['lat'], row['long']),\n                            icon=folium.Icon(icon='plane', prefix='fa')))\n            return map_.add_child(m_cluster)\n        \n        except Exception as e:\n            print(e)\n            \n    def circle_map(self, radius, location=None, zoom=None):\n        assert type(radius) == int, 'radius is not a interger value: {}'.format(type(radius))\n        assert type(location) == list, 'location is not a list: {}'.format(type(location))\n        assert type(zoom) == int, 'zoom is not a interger value: {}'.format(type(zoom))\n\n        try:\n            COLOR = lambda x: 'forestgreen' if x>50 else 'darkred'\n\n            map_ = folium.Map(location=location, zoom_start=zoom)\n            for idx, row in self.geo_df.iterrows():\n                folium.Circle(\n                    location=[self.geo_df.iloc[idx]['lat'], self.geo_df.iloc[idx]['long']],\n                    radius=radius,\n                    color=COLOR(self.geo_df.iloc[idx]['PercentOfBaseline'])\n                ).add_to(map_)\n\n            return map_\n        \n        except Exception as e:\n            print(e)","1f0d5e23":"geomap = GeoMap(airport_xy)\n\ngeomap.marker_map([30, 31], 1)","302a9259":"geomap.heat_map(10, [30, 31], 1)","1ca08928":"geomap.circle_map(10, [30, 31], 1)","886eb906":"## Import libraries","cb8580f4":"averange of  baseline percentage by month","9a69aa01":"If the percentage of the baseline is more than 50, the color of the circle in the map turns green otherwise it turns red","619c738d":"Here, we consider a DataFrame having coordinates in WKT(well-known text) format","51af14fb":"read data and convert the date columns to datetime","a27082f2":"iso types","45b27631":"airports with the most data","64b3ced1":"## Data Visualization","be71bbfe":"countries with the most data","1edbfaef":"This shows the density of records in different regions of the countries","06cbcd5e":"Each marker below corresponds to a different records","e91e7ba3":"## Introduction","a4e02529":"Show on the map of the planet","fba91a7d":"## Import data","dd05ba61":"In this Notebook we will analysis the data and show it on the map","a8b12c59":"Convert dataframe to geodataframe"}}