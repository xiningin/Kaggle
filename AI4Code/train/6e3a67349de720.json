{"cell_type":{"26dceb2d":"code","22b6db45":"code","d7092e8b":"code","5be438e7":"code","229492b4":"code","453d7a21":"code","05fd4f13":"code","7f4c944d":"code","c68c6e39":"code","ef750c22":"code","46199077":"code","efe46dbb":"code","4701715d":"code","14e20eed":"code","99a874a2":"code","d17f4650":"code","45d1f8da":"code","921be8ca":"code","a43d3b6b":"code","07f18ef9":"code","25a621cf":"code","3a42af79":"code","f653c757":"code","d1351228":"code","2f648651":"code","0ac879ab":"code","6c797105":"code","0feb9a18":"code","3dc56a9e":"markdown","a6db47b6":"markdown","98d32b3c":"markdown"},"source":{"26dceb2d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sklearn as sk\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\n\nfrom sklearn.metrics import mean_absolute_error, r2_score\n\nimport xgboost\nfrom lightgbm import LGBMRegressor\npd.set_option('display.max_columns', 500)\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfolder = \"..\/input\/\"\n# folder = \".\/input\/\"\nprint(os.listdir(folder))\n\nNORMFACTOR = 1000\nTRAIN_SIZE = 0.9\nRANDOM_STATE = 212\nEARLY_STOP_ROUNDS = 10\nDEBUG = False\n\n# Any results you write to the current directory are saved as output.","22b6db45":"cID = ['Id', 'groupId', 'matchId']\ncOrigGP= ['assists', 'boosts', 'damageDealt',\n       'DBNOs', 'headshotKills', 'heals', \n       'kills', 'killStreaks', 'longestKill', 'revives',\n       'rideDistance', 'roadKills', 'swimDistance', 'teamKills',\n       'vehicleDestroys', 'walkDistance', 'weaponsAcquired', 'killPlace'] # Gameplay information\ncRKAll = ['matchDuration', 'killPoints', 'maxPlace', 'numGroups','rankPoints','winPoints'] # Match derived information\ncRKPop =['matchDuration', 'maxPlace', 'numGroups']\ncMT = ['matchType'] # the only categorical variable\ncY = ['winPlacePerc']\n\ncAgg = ['totalKills','netKills', 'totalDistance','teamwork','itemUse','netKillsPerDist','netItemsPerDist','headsPerKill','netWeaponsPerDist']\ncGPAggMOnly = ['teamSize']\ncGP = cOrigGP+cAgg\ncGPAggM = cGP+cGPAggMOnly\n\ncGPNZip = [(col, col+\"N\") for col in cGP]\ncGPN = [col+\"N\" for col in cGP] # Normalized for match then team\ncGPT = [col+\"T\" for col in cGP]\ncGPM = [col+\"M\" for col in cGPAggM]\n\ncGPMInherit = [col+\"M\" for col in cGP]\n\ncGPAll = cGPAggM+cGPT+cGPM+cGPN\n\ndef preprocess(train, cOrigFeat):\n    train = train.copy()\n    cOrig = train.columns.values\n    # Teamkills not included in kills, roadKills is included\n    train['teamSizeFeat'] = train.groupby('groupId')['groupId'].transform('count')\n    train['totalKills'] = train['DBNOs'] + train['kills'] + train['teamKills']\n    train['totalDistance'] = train['rideDistance'] + train['walkDistance'] + train['walkDistance']\n    train['netKills'] = train['DBNOs'] + train['kills'] - train['teamKills']\n    train['teamwork'] = train['assists'] - train['teamKills']\n    train['itemUse'] = train['boosts'] + train['heals']\n    train['netKillsPerDist'] = train['netKills']\/(train['totalDistance']+1)\n    train['netItemsPerDist'] = train['itemUse']\/(train['totalDistance']+1)\n    train['headsPerKill'] = train['headshotKills']\/(train['totalKills']+1)\n    train['netWeaponsPerDist'] = train['weaponsAcquired']\/(train['totalDistance']+1)\n    train['totalMatchPlayers'] = train.groupby('matchId')['Id'].transform('count')\n    train['killsInvolved'] = train['DBNOs'] + train['kills'] + train['teamKills'] + train['assists']\n    train['pctMatchKills'] = train['totalKills']\/train['totalMatchPlayers']\n    train['pctMatchKillInvolvement'] = train['killsInvolved']\/train['totalMatchPlayers']\n    cEng = [col for col in train.columns.values if col not in cOrig]\n    cBase = list(cOrigFeat) + list(cEng)\n    \n    # Below are utility features which should not be trained on or modified\n    train['teamSize'] = train['teamSizeFeat']\n    train['sampleWeight'] = 1\/train['teamSize']\n    cNotFeatures = [col for col in train.columns.values if col not in cBase]\n    \n    print('features done, scaling by match')\n    train[cBase] = minMidMaxGroupScale(train.groupby('matchId'), 0.75, base=train, col=cBase)\n    \n    print('match aggregation done, aggregating teams')\n    # The only thing that matters is teamwork. The features will be replace by sum by team, and min\/max\/mean by team will be added as well\n    train = train.merge(train.groupby('groupId')[cBase].transform(np.min), how='left', suffixes=[\"\",\"_min\"], left_index=True, right_index=True)\n    train = train.merge(train.groupby('groupId')[cBase].transform(np.max), how='left', suffixes=[\"\",\"_max\"], left_index=True, right_index=True)\n    train = train.merge(train.groupby('groupId')[cBase].transform(np.mean), how='left', suffixes=[\"\",\"_mean\"], left_index=True, right_index=True)\n    train[cBase] = train.groupby('groupId')[cBase].transform(np.sum)\n    \n    cDerived = [col for col in train.columns.values if col not in cBase+cNotFeatures]\n    cAll = cBase+cDerived\n    return (train, cAll)\n    \ndef minMidMaxGroupScale(g, midQuant, base, col=cGPAggM):\n    gMax = g[col].transform(np.max)\n    print(\"max done, quantiles\")\n    g75 = g[col].transform(lambda x: np.quantile(x, midQuant))\n    print(\"quantiles done, mins\")\n    gMin = g[col].transform(np.min)\n#     outdf = base[col]\n    print(\"mins done, time for big calc\")\n    outdf = (base[col] <= g75[col])*(base[col]-gMin[col])\/(g75[col]-gMin[col]).replace(to_replace=0,value=1)*midQuant+(base[col] > g75[col])*((base[col]-g75[col])\/(gMax[col]-g75[col]).replace(to_replace=0,value=1)*(1-midQuant) + midQuant) \n    print(\"big calc done\")\n    return outdf   ","d7092e8b":"# Memory saving function credit to https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    #start_mem = df.memory_usage().sum() \/ 1024**2\n    #print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n\n    for col in df.columns:\n        col_type = df[col].dtype\n\n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    #end_mem = df.memory_usage().sum() \/ 1024**2\n    #print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    #print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n\n    return df","5be438e7":"def shape(df):\n    return '{:,} rows - {:,} columns'.format(df.shape[0], df.shape[1])\n\ndef train_validation(df, train_size=TRAIN_SIZE):\n    \n    unique_games = df.matchId.unique()\n    train_index = round(int(unique_games.shape[0]*train_size))\n    \n    np.random.shuffle(unique_games)\n    \n    train_id = unique_games[:train_index]\n    validation_id = unique_games[train_index:]\n    \n    train = df[df.matchId.isin(train_id)]\n    validation = df[df.matchId.isin(validation_id)]\n    \n    return train, validation","229492b4":"df = pd.read_csv(folder+'train_V2.csv')","453d7a21":"if DEBUG:\n    df = df.head(100000)","05fd4f13":"time_0  = datetime.datetime.now()\n\ndf = reduce_mem_usage(df)\ndf, cAll = preprocess(df, cOrigGP)\nprint('Feature engineering done')\ndf = reduce_mem_usage(df)\n\ntime_1  = datetime.datetime.now()\nprint('Preprocessing took {} seconds'.format((time_1 - time_0).seconds))\n\ndf.head()","7f4c944d":"# lgbm code stolen from https:\/\/www.kaggle.com\/mm5631\/ml-workflow-data-science-approach\ntrain, validation = train_validation(df)","c68c6e39":"train.head()","ef750c22":"train_weights = (1\/train['teamSize'])\nvalidation_weights = (1\/validation['teamSize'])","46199077":"X_train = train[cAll]\nX_test = validation[cAll]\n\ny_train = train[cY]\ny_test = validation[cY]\n\nshape(X_train), shape(X_test)","efe46dbb":"time_0 = datetime.datetime.now()\n\nlgbm = LGBMRegressor(objective='mae', n_estimators=250,  \n                     learning_rate=0.3, num_leaves=200, \n                     n_jobs=-1,  random_state=RANDOM_STATE, verbose=0)\n\nlgbm.fit(X_train, y_train, sample_weight=train_weights,\n         eval_set=[(X_test, y_test)], eval_sample_weight=[validation_weights], \n         eval_metric='mae', early_stopping_rounds=EARLY_STOP_ROUNDS, \n         verbose=0)\n\ntime_1  = datetime.datetime.now()\n\nprint('Training took {} seconds. Best iteration is {}'.format((time_1 - time_0).seconds, lgbm.best_iteration_))","4701715d":"print('Mean Absolute Error is {:.5f}'.format(mean_absolute_error(y_test, lgbm.predict(X_test, num_iteration=lgbm.best_iteration_), sample_weight=validation_weights)))\nprint('R2 score is {:.2%}'.format(r2_score(y_test, lgbm.predict(X_test, num_iteration=lgbm.best_iteration_), sample_weight=validation_weights)))","14e20eed":"def plot_training(lgbm):\n    \n    fig, ax = plt.subplots(figsize=(13,7))\n    losses = lgbm.evals_result_['valid_0']['l1']\n    ax.set_ylim(np.nanmax(losses), 0)\n    ax.set_xlim(0,100)\n    ax.set_xlabel('n_estimators')\n    ax.set_ylabel('Mean Asbolute Error')\n    ax.set_title('Evolution of MAE over training iterations')\n    ax.plot(losses, color='grey');\n    \nplot_training(lgbm)","99a874a2":"test = reduce_mem_usage(pd.read_csv(folder+'test_V2.csv'))","d17f4650":"if DEBUG:\n    test = test.head(10000)","45d1f8da":"time_0  = datetime.datetime.now()\ntest, cAll = preprocess(test, cOrigGP)\ntime_1  = datetime.datetime.now()\nprint('Preprocessing took {} seconds'.format((time_1 - time_0).seconds))","921be8ca":"test = reduce_mem_usage(test)\ntest.head()","a43d3b6b":"X_sub = test[cAll]\nshape(X_sub)","07f18ef9":"y_sub_unfull = lgbm.predict(X_sub, num_iteration=lgbm.best_iteration_)","25a621cf":"sub = test[['Id']]\nsub['winPlacePerc'] = y_sub_unfull","3a42af79":"sub.head()\n","f653c757":"sub.to_csv('sub_LGBM_unfull.csv',index=False)","d1351228":"X_train = df[cAll]\ny_train = df[cY]\ntrain_weights = (1\/df['teamSize'])","2f648651":"time_0 = datetime.datetime.now()\n\nlgbm = LGBMRegressor(objective='mae', n_estimators=250,  \n                     learning_rate=0.3, num_leaves=200, \n                     n_jobs=-1,  random_state=RANDOM_STATE, verbose=1)\n\nlgbm.fit(X_train, y_train, sample_weight=train_weights)\n\ntime_1  = datetime.datetime.now()\n\nprint('Training took {} seconds. Best iteration is {}'.format((time_1 - time_0).seconds, lgbm.best_iteration_))","0ac879ab":"y_sub_full = lgbm.predict(X_sub, num_iteration=lgbm.best_iteration_)\nsub2 = test[['Id']]\nsub2['winPlacePerc'] = y_sub_full","6c797105":"sub2.head()","0feb9a18":"sub2.to_csv('sub_LGBM_full.csv',index=False)","3dc56a9e":"Do same for full training","a6db47b6":"Cool, it all works, let's train on entire training set and predict for submission. And make another submission using the current trained model just to see if there's any overfitting.","98d32b3c":"Create submisison file"}}