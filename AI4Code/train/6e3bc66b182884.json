{"cell_type":{"a862dac9":"code","3adcdc79":"code","c4502f3b":"code","8e23067d":"code","b78bff63":"code","beb36e93":"code","3963cbbe":"code","a5935cc6":"code","0d30578f":"code","8676a448":"code","8b095bde":"code","1273e6ca":"code","5e931922":"code","23bb4298":"code","4354a5d6":"code","a69c41fc":"code","f7e13a1d":"code","855622df":"code","a499df7b":"code","82fb7806":"code","18e68780":"code","1b48fb72":"code","bee6fbbd":"code","0cdd753d":"code","0ea582f7":"code","cc87e81c":"code","40228865":"code","c6a39620":"code","b17151e5":"code","b9063238":"code","96057555":"code","75503658":"code","23073683":"code","0f7b5582":"code","dd03d20b":"code","abbbea08":"code","da5edf12":"code","1067ac21":"code","6c7e7520":"code","cded063a":"code","7447b193":"code","78f86a86":"code","98e0dbbd":"code","5fa4af66":"code","4e72d30e":"code","46a41963":"code","51ca8aa9":"code","93da406b":"code","f6255316":"code","7a947e1c":"code","9802d6ae":"code","ebc12b2d":"code","8225861d":"code","e416f521":"code","18d1ab16":"code","7e53a1e1":"code","21e20aa4":"code","cb3534dd":"code","2a99a09b":"code","5e469216":"code","0c99d9aa":"code","4d5b69ad":"code","f3efc99e":"code","2dfbc3e8":"code","dbdecd99":"code","afaa670d":"code","3cf049da":"code","619fa719":"code","fedb88c6":"code","646afe24":"code","cd9cab65":"code","6a5ac0dc":"code","3da3d83e":"code","c14e7b1d":"code","c1d2bb7d":"code","2e7d4b60":"code","9972cdf2":"code","88c28482":"code","b3abd697":"code","99d7b06c":"code","743b4189":"code","8863ec8c":"code","dd75ed28":"code","f413db8d":"code","f2cafaad":"code","534ee9eb":"code","df9b1380":"code","401416e2":"code","3e5ed91f":"code","9645a4ab":"code","9eb323dc":"code","c959fad4":"code","3cfa5e79":"code","92b7c519":"code","573f470a":"code","ed92b442":"code","60958223":"code","10dc0def":"code","97a23964":"code","f18c3a64":"code","6337c634":"code","da0727c4":"code","dfe5b4fc":"code","b76d9957":"code","0659cabb":"code","6856631e":"code","b649ed09":"code","eff5fa93":"code","72c642a0":"code","b8057c6b":"code","7a3f934a":"code","2e84ae29":"markdown","20298e6a":"markdown","ddefb4db":"markdown","08ab836e":"markdown","34cba2fc":"markdown","e2346c97":"markdown","0cd19b06":"markdown","7eb88c11":"markdown","8ca83398":"markdown","48f55963":"markdown","24fa948e":"markdown","678fc965":"markdown","6035d363":"markdown","eb6d04db":"markdown","64de97a0":"markdown","1f2735f0":"markdown","23aee2ff":"markdown","d47e68b2":"markdown","7a45809a":"markdown","8a1143a2":"markdown","d5eaa4ea":"markdown","f4abd943":"markdown","2a928299":"markdown","9cb39fa7":"markdown","27a0b0f1":"markdown","d9610963":"markdown","bfffc91a":"markdown","05f6b1cd":"markdown","5aab89ab":"markdown","c8cbf205":"markdown","58a4d6c7":"markdown","a304ac12":"markdown","9b234bd7":"markdown","bc6664a4":"markdown","edb1697f":"markdown","fe3ea616":"markdown","5f0e5f9b":"markdown","044a1f31":"markdown","ea9fec18":"markdown","03a3e296":"markdown","13d09a47":"markdown","933bff0b":"markdown","29772e1e":"markdown","ebfff9bc":"markdown","107f3888":"markdown","4f26380d":"markdown","e26753f3":"markdown","cc1f042b":"markdown","134c663e":"markdown","ba2b0d87":"markdown","8bd79aac":"markdown","bf7022aa":"markdown","f3c8cdf4":"markdown","e985bb47":"markdown","39dacec0":"markdown","cd73d1c1":"markdown","0263ba91":"markdown","4ffccc25":"markdown","274bd1e8":"markdown","33588c15":"markdown","7d6b2961":"markdown","fb77f25d":"markdown","2f8d5872":"markdown","9ece2b1c":"markdown","44db941d":"markdown","9ff3099b":"markdown","c9ab445c":"markdown","6c0328dd":"markdown","455a35df":"markdown","4136e2c3":"markdown","85fd8ef2":"markdown","a3756366":"markdown","2ee004ef":"markdown","3a81f841":"markdown","daf41753":"markdown","c6312421":"markdown","7c58aaba":"markdown","652c7bea":"markdown","4c4b4268":"markdown","a3f7dbd4":"markdown","b37408d6":"markdown","e878981a":"markdown","1d81f69b":"markdown","c11c1e8e":"markdown","f6f13ef9":"markdown","c80ffeaa":"markdown","a4373bd5":"markdown","2d64edb5":"markdown","62b3125d":"markdown","b0a2454d":"markdown","549076bf":"markdown","7d34b2bd":"markdown","81845704":"markdown","cb2ce0b5":"markdown","db0b1465":"markdown","a654de78":"markdown","57bdfcd5":"markdown","2f9959aa":"markdown","055f9913":"markdown","1b7c23a6":"markdown","f90fe89a":"markdown","ed8cc52f":"markdown","95c2991c":"markdown","0efa754a":"markdown","02541013":"markdown","c9319628":"markdown","a5a029c4":"markdown","efe3c6fe":"markdown","3d24097b":"markdown","5e90a92f":"markdown","bed222e4":"markdown","91086771":"markdown","d4c6ab25":"markdown","49769f45":"markdown","e3319e44":"markdown","b16ae6eb":"markdown","32cad1f4":"markdown","e61af181":"markdown","fa15b1ba":"markdown","4d784407":"markdown","99fd119c":"markdown","489a9a5c":"markdown","b2a53061":"markdown","af6b0782":"markdown","3ee80d66":"markdown","e8391f2b":"markdown","52ded55c":"markdown","2f000f73":"markdown","d7496302":"markdown","1831b4a6":"markdown","9fb458cf":"markdown","4c313e0c":"markdown","6e1f3347":"markdown","80d752ab":"markdown","e953f0af":"markdown","15996017":"markdown","cc502687":"markdown","be60de29":"markdown","c377d92f":"markdown","c8324bd0":"markdown","e9774899":"markdown","9ae3528f":"markdown","1b4be64e":"markdown","0118db91":"markdown","b631c88c":"markdown","bafb3b5f":"markdown","3f4583fc":"markdown","10b45d86":"markdown","1bdeb19c":"markdown","1ef688e6":"markdown","3e65112d":"markdown","ca387cda":"markdown","65acc1d8":"markdown","a5d3573a":"markdown","9fc8472d":"markdown","c9e9b3ba":"markdown","87205a2f":"markdown","c35c35c5":"markdown","a0414bf1":"markdown","521cba18":"markdown","00564e68":"markdown","0897ed54":"markdown","3b130198":"markdown","56de578c":"markdown","13aa4cb2":"markdown","a5240350":"markdown","9a299b6f":"markdown","c796579f":"markdown","e64597c7":"markdown","544a0e13":"markdown","cb18b947":"markdown","32ae865c":"markdown","d8c503fb":"markdown"},"source":{"a862dac9":"# this will help in making the Python code more structured automatically (good coding practice)\n\n%load_ext nb_black\n\n# library to suppress warnings or deprecation notes\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\n# libraries to help with reading and manipulating data\nimport pandas as pd\nimport numpy as np\n\n# library to split data\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score\n\n# libaries to help with data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# remove the limit for the number of displayed columns\npd.set_option(\"display.max_columns\", None)\n\n# set the limit for the number of displayed rows\npd.set_option(\"display.max_rows\", 200)\n\nfrom sklearn import metrics\n\n# library to build Linear Regression Model\nfrom sklearn.linear_model import LogisticRegression\n\n# library to encoding\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\n\n# libraries to build decision tree classifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\n\n# libraries to build ensemble models\nfrom sklearn.ensemble import (\n    BaggingClassifier,\n    RandomForestClassifier,\n    AdaBoostClassifier, \n    GradientBoostingClassifier,\n)\n\n# libraries to build xgboost model\nfrom xgboost import XGBClassifier\n\n# library for stacking classifier\nfrom sklearn.ensemble import StackingClassifier\n\n# to tune different models\nfrom sklearn.model_selection import GridSearchCV, train_test_split, RandomizedSearchCV\n\n# to get diferent metric scores\nfrom sklearn.metrics import (\n    recall_score,\n    confusion_matrix,\n)\n\n# for oversampling and undersampling data\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\n\n# for creating pipelines and personalizing them\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n\n# for missing value imputation\nfrom sklearn.impute import SimpleImputer","3adcdc79":"# histogram and boxplot for the feature\ndef histogram_boxplot(data, feature, figsize=(12, 7), kde=False, bins=None):\n    \"\"\"\n    Boxplot and histogram combined\n\n    data: dataframe\n    feature: dataframe column\n    figsize: size of figure (default (12,7))\n    kde: whether to the show density curve (default False)\n    bins: number of bins for histogram (default None)\n    \"\"\"\n    f2, (ax_box2, ax_hist2) = plt.subplots(\n        nrows=2,  # Number of rows of the subplot grid= 2\n        sharex=True,  # x-axis will be shared among all subplots\n        gridspec_kw={\"height_ratios\": (0.25, 0.75)},\n        figsize=figsize,\n    )  # creating the 2 subplots\n    sns.boxplot(\n        data=data, x=feature, ax=ax_box2, showmeans=True, color=\"orange\"\n    )  # boxplot will be created and a star will indicate the mean value of the column\n    sns.histplot(\n        data=data, x=feature, kde=kde, ax=ax_hist2, bins=bins, palette=\"Winter\"\n    ) if bins else sns.histplot(\n        data=data, x=feature, kde=kde, ax=ax_hist2\n    )  # For histogram\n    ax_hist2.axvline(\n        data[feature].mean(), color=\"green\", linestyle=\"--\"\n    )  # Add mean to the histogram\n    ax_hist2.axvline(data[feature].median(), color=\"blue\", linestyle=\"-\")\n    plt.show()  # show the plot\n\n# labeled_barplot\ndef labeled_barplot(data, feature, perc=False, v_ticks=True, n=None):\n    \"\"\"\n    Barplot with percentage at the top\n\n    data: dataframe\n    feature: dataframe column\n    perc: whether to display percentages instead of count (default is False)\n    n: displays the top n category levels (default is None, i.e., display all levels)\n    \"\"\"\n\n    total = len(data[feature])  # length of the column\n    count = data[feature].nunique()\n    if n is None:\n        plt.figure(figsize=(count + 1, 5))\n    else:\n        plt.figure(figsize=(n + 1, 5))\n\n    if v_ticks is True:\n        plt.xticks(rotation=90)\n        \n    ax = sns.countplot(\n        data=data,\n        x=feature,\n        palette=\"Paired\",\n        order=data[feature].value_counts().index[:n].sort_values(),\n    )\n\n    for p in ax.patches:\n        if perc == True:\n            label = \"{:.1f}%\".format(\n                100 * p.get_height() \/ total\n            )  # percentage of each class of the category\n        else:\n            label = p.get_height()  # count of each level of the category\n\n        x = p.get_x() + p.get_width() \/ 2  # width of the plot\n        y = p.get_height()  # height of the plot\n\n        ax.annotate(\n            label,\n            (x, y),\n            ha=\"center\",\n            va=\"center\",\n            size=12,\n            xytext=(0, 5),\n            textcoords=\"offset points\",\n        )  # annotate the percentage\n    plt.show()  # show the plot\n\n# function to plot stacked bar chart\ndef stacked_barplot(data, predictor, target):\n    \"\"\"\n    Print the category counts and plot a stacked bar chart\n\n    data: dataframe\n    predictor: independent variable\n    target: target variable\n    \"\"\"\n    count = data[predictor].nunique()\n    sorter = data[target].value_counts().index[-1]\n    tab1 = pd.crosstab(data[predictor], data[target], margins=True).sort_values(\n        by=sorter, ascending=False\n    )\n    print(tab1)\n    print(\"-\" * 120)\n    tab = pd.crosstab(data[predictor], data[target], normalize=\"index\").sort_values(\n        by=sorter, ascending=False\n    )\n    tab.plot(kind=\"bar\", stacked=True, figsize=(count + 5, 6))\n    plt.legend(\n        loc=\"lower left\", frameon=False,\n    )\n    plt.legend(loc=\"upper left\", bbox_to_anchor=(1, 1))\n    plt.show()\n    \n# to plot confusion matrix\ndef draw_matrix(model, predictors, target):\n    \"\"\"\n    To plot the confusion_matrix with percentages\n\n    model: classifier\n    predictors: independent variables\n    target: dependent variable\n    \"\"\"\n    y_pred = model.predict(predictors)\n    cm = confusion_matrix(target, y_pred)\n    labels = np.asarray(\n        [\n            [\"{0:0.0f}\".format(item) + \"\\n{0:.2%}\".format(item \/ cm.flatten().sum())]\n            for item in cm.flatten()\n        ]\n    ).reshape(2, 2)\n\n    plt.figure(figsize=(6, 4))\n    sns.heatmap(cm, annot=labels, fmt=\"\")\n    plt.ylabel(\"True label\")\n    plt.xlabel(\"Predicted label\")\n    plt.show()\n\n# calculate different metric scores of the model - Accuracy, Recall, F1 and Precision\ndef get_metrics_score(model,flag=True):\n    \"\"\"\n    model : classifier to predict values of X\n\n    \"\"\"\n    # defining an empty list to store results\n    score_list=[] \n    accuracy_list=[]\n    precision_list=[]\n    recall_list=[]\n    f1_list=[]\n    \n    # predicting on train and tests\n    pred_train = model.predict(X_train)\n    pred_val = model.predict(X_val)\n    pred_test = model.predict(X_test)\n    \n    # accuracy of the model\n    train_acc = model.score(X_train,y_train)\n    val_acc = model.score(X_val,y_val)\n    test_acc = model.score(X_test,y_test)\n    \n    # recall of the model\n    train_recall = metrics.recall_score(y_train,pred_train)\n    val_recall = metrics.recall_score(y_val,pred_val)\n    test_recall = metrics.recall_score(y_test,pred_test)\n    \n    # precision of the model\n    train_precision = metrics.precision_score(y_train,pred_train)\n    val_precision = metrics.precision_score(y_val,pred_val)\n    test_precision = metrics.precision_score(y_test,pred_test)\n    \n    # f1_score of the model\n    train_f1 = metrics.f1_score(y_train,pred_train)\n    val_f1 = metrics.f1_score(y_val,pred_val)\n    test_f1 = metrics.f1_score(y_test,pred_test)\n\n    # populate the score_list \n    score_list.extend((train_acc,val_acc,test_acc,train_recall,val_recall,test_recall,train_precision,\n                        val_precision,test_precision,train_f1,val_f1,test_f1))\n\n    #list per data set\n    accuracy_list.extend((train_acc,val_acc,test_acc))\n    recall_list.extend((train_recall,val_recall,test_recall))\n    precision_list.extend((train_precision,val_precision,test_precision))\n    f1_list.extend((train_f1,val_f1,test_f1))\n\n    # If the flag is set to True then only the following print statements will be dispayed. The default value is set to True.\n    if flag == True: \n\n        print(\"Accuracy on training set : \",train_acc)\n        print(\"Accuracy on validation set : \",val_acc)\n        print(\"Accuracy on test set : \",test_acc)\n        print(\"Recall on training set : \",train_recall)\n        print(\"Recall on validation set : \",val_recall)\n        print(\"Recall on test set : \",test_recall)\n        print(\"Precision on training set : \",train_precision)\n        print(\"Precision on validation set : \",val_precision)\n        print(\"Precision on test set : \",test_precision)\n        print(\"F1 on training set : \",train_f1)\n        print(\"F1 on validation set : \",val_f1)\n        print(\"F1 on test set : \",test_f1)\n\n    model_df = pd.DataFrame({\"DataSet\":[\"Training\", \"Validation\", \"Testing\"], \n                                          \"Accuracy\": accuracy_list, \"Recall\": recall_list,\n                                          \"Precision\": precision_list,\"F1\": f1_list}) \n\n    return model_df, score_list  # returning the list with train and test scores","c4502f3b":"# load the file using excel. There are two sheets in the excel. Load the Tourism sheet\ndf = pd.read_csv(\"BankChurners.csv\")\n\n# back up data to preserve the initial version for reference\ndf_back = df.copy()","8e23067d":"# print the data set information as number of rows and columns\nprint(f\"There are {df.shape[0]} rows and {df.shape[1]} columns.\")  # f-string","b78bff63":"# check the dataset information\ndf.info()","beb36e93":"# setting the random seed via np.random.seed to get the same random results every time\nnp.random.seed(1)\n\n# also look at random 10 sample rows\ndf.sample(n=10)","3963cbbe":"# number of missing values in columns\ndf.isna().sum()","a5935cc6":"# precentage of missing values in columns\nround(df.isna().sum() \/ df.isna().count() * 100, 2)","0d30578f":"# let\"s check for duplicate values in the data\ndf.duplicated().sum()","8676a448":"# let\"s view the statistical summary of the numerical columns in the data\ndf.describe().T","8b095bde":"# create numerical columns list\nnum_cols = df.select_dtypes(include=[\"int64\", \"float64\"])\n\n# create categorical columns list\ncat_cols = df.select_dtypes(exclude=[\"int64\", \"float64\"])","1273e6ca":"#get the valuecounts\nfor i in cat_cols:\n    print(df[i].value_counts())\n    print(\"-\"*50)\n    print(\"\\n\")","5e931922":"df[df[\"Marital_Status\"].isna()][\"Card_Category\"].value_counts()","23bb4298":"df[df[\"Card_Category\"] == \"Blue\"][\"Marital_Status\"].value_counts()","4354a5d6":"df[df[\"Marital_Status\"].isna()][\"Income_Category\"].value_counts()","a69c41fc":"df[df[\"Income_Category\"] == \"Less than $40K\"][\"Marital_Status\"].value_counts()","f7e13a1d":"df[df[\"Marital_Status\"].isna()][\"Education_Level\"].value_counts()","855622df":"# use simple imputer to impute the most_frequent values in categorical column\nmar_imputer = SimpleImputer(missing_values=np.NaN, strategy=\"most_frequent\")\ndf.Marital_Status = mar_imputer.fit_transform(df[\"Marital_Status\"].values.reshape(-1,1))[:,0]","a499df7b":"df[\"Marital_Status\"].value_counts()","82fb7806":"df[df[\"Education_Level\"].isna()][\"Income_Category\"].value_counts()","18e68780":"df[df[\"Income_Category\"] == \"Less than $40K\"][\"Education_Level\"].value_counts()","1b48fb72":"# use simple imputer to impute the most_frequent values in categorical column\nedu_imputer = SimpleImputer(missing_values=np.NaN, strategy=\"most_frequent\")\ndf.Education_Level = edu_imputer.fit_transform(df[\"Education_Level\"].values.reshape(-1,1))[:,0]","bee6fbbd":"df[\"Education_Level\"].value_counts()","0cdd753d":"# precentage of missing values in columns\nround(df.isna().sum() \/ df.isna().count() * 100, 2)","0ea582f7":"# check value_counts\ndf.Income_Category.value_counts()","cc87e81c":"# check Eduation_Level values for income_category abc\ndf[df[\"Income_Category\"] == \"abc\"][\"Education_Level\"].value_counts()","40228865":"# treating error\nic_imputer = SimpleImputer(missing_values=\"abc\", strategy=\"most_frequent\")\ndf.Income_Category = ic_imputer.fit_transform(df[\"Income_Category\"].values.reshape(-1,1))[:,0]","c6a39620":"# verify the update\ndf.Income_Category.value_counts()","b17151e5":"# values before encoding\ndf.Attrition_Flag.value_counts()","b9063238":"# instantiate the LabelEncoder\nencode_attr = LabelEncoder()\n\n# fit the encoder\nencode_attr.fit(df[\"Attrition_Flag\"])\n\n# encode the variable\ndf[\"Attrition_Flag\"] = encode_attr.transform(df[\"Attrition_Flag\"])\n\n# verify the update\ndf.Attrition_Flag.value_counts()","96057555":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"CLIENTNUM\")  ","75503658":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"Attrition_Flag\", True, False) ","23073683":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"Customer_Age\")  ","0f7b5582":"df.loc[df[\"Customer_Age\"] > 70]","dd03d20b":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"Gender\", True, False) ","abbbea08":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"Dependent_count\", True, False) ","da5edf12":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"Education_Level\", True, True) ","1067ac21":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"Marital_Status\", True, False) ","6c7e7520":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"Income_Category\", True, True) ","cded063a":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"Card_Category\", True, False) ","7447b193":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"Months_on_book\")  ","78f86a86":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"Total_Relationship_Count\", True, False) ","98e0dbbd":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"Months_Inactive_12_mon\", True, False) ","5fa4af66":"# use label_barplot function to plot the graph\nlabeled_barplot(df,\"Contacts_Count_12_mon\", True, False) ","4e72d30e":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"Credit_Limit\")  ","46a41963":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"Total_Revolving_Bal\")  ","51ca8aa9":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"Avg_Open_To_Buy\")  ","93da406b":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"Total_Amt_Chng_Q4_Q1\")  ","f6255316":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"Total_Trans_Amt\")  ","7a947e1c":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"Total_Trans_Ct\")  ","9802d6ae":"df.loc[df[\"Total_Trans_Ct\"] > 130]","ebc12b2d":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"Total_Ct_Chng_Q4_Q1\")  ","8225861d":"# use the defined function histogram_boxplot to plot the graphs\nhistogram_boxplot(df,\"Avg_Utilization_Ratio\")  ","e416f521":"# for all numerical variables draw box plots\nplt.figure(figsize=(20,30))\nfor i, variable in enumerate(num_cols):\n                     plt.subplot(5,3,i+1)\n                     sns.boxplot(df[\"Attrition_Flag\"],df[variable],palette=\"Set1\")\n                     plt.tight_layout()\n                     plt.title(variable)\nplt.show()","18d1ab16":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"Gender\", \"Attrition_Flag\")","7e53a1e1":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"Education_Level\", \"Attrition_Flag\")","21e20aa4":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"Marital_Status\", \"Attrition_Flag\")","cb3534dd":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"Income_Category\", \"Attrition_Flag\")","2a99a09b":"# use the defined function stacked_barplot to plot the graphs\nstacked_barplot(df, \"Card_Category\", \"Attrition_Flag\")","5e469216":"# heatmap for correlation\nplt.figure(figsize=(15, 7))\nsns.heatmap(df.corr(), annot=True, vmin=-1, vmax=1, fmt=\".2f\", cmap=\"Spectral\")\nplt.show()","0c99d9aa":"# heatmap for correlation\nsns.pairplot(df,hue=\"Attrition_Flag\")","4d5b69ad":"# check the outliers before treating\nplt.figure(figsize=(20, 30))\n\nfor i, variable in enumerate(num_cols):\n    plt.subplot(5, 4, i + 1)\n    plt.boxplot(df[variable], whis=1.5)\n    plt.tight_layout()\n    plt.title(variable)\n\nplt.show()","f3efc99e":"# find the 25th percentile and 75th percentile.\nQ1 = df.quantile(0.25)            \nQ3 = df.quantile(0.75)\n\n# Inter Quantile Range (75th percentile - 25th percentile)\nIQR = Q3 - Q1                           \n\n# find lower and upper bounds for all values. All values outside these bounds are outliers\nlower=Q1-1.5*IQR                        \nupper=Q3+1.5*IQR\n\n((num_cols<lower)|(num_cols>upper)).sum()\/len(df)*100","2dfbc3e8":"# Separating target variable and other variables\n#X = df.drop([\"CLIENTNUM\",\"Attrition_Flag\",\"Total_Ct_Chng_Q4_Q1\",\"Total_Amt_Chng_Q4_Q1\",\"Avg_Utilization_Ratio\"], axis=1)\n#X = df.drop([\"CLIENTNUM\",\"Attrition_Flag\"], axis=1)\nX = df.drop([\"Attrition_Flag\"], axis=1)\ny = df[\"Attrition_Flag\"]","dbdecd99":"X = pd.get_dummies(data=X, drop_first=True)","afaa670d":"# Splitting data into training, validation and test set:\n\n# first we split data into 2 parts, say temporary and test\nX_temp, X_test, y_temp, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=1, stratify=y\n)\n\n# then we split the temporary set into train and validation\nX_train, X_val, y_train, y_val = train_test_split(\n    X_temp, y_temp, test_size=0.25, random_state=1, stratify=y_temp\n)\nprint(X_train.shape, X_val.shape, X_test.shape)","3cf049da":"# use SMOTE - Synthetic Minority Over Sampling Technique to create oversampled training sets\nsm = SMOTE(\n    sampling_strategy=1, k_neighbors=5, random_state=1\n)  \n\n# fit the sampler and created undersampled data\nX_train_over, y_train_over = sm.fit_resample(X_train, y_train)","619fa719":"# use randomundersampler for dataset processing\nrus = RandomUnderSampler(random_state=1)\n\n# fit the sampler and created undersampled data\nX_train_under, y_train_under = rus.fit_resample(X_train, y_train)","fedb88c6":" # Empty list to store all the models\nmodels = [] \n\n# Appending models into the list\nmodels.append((\"Logistic regression\", LogisticRegression(random_state=1)))\nmodels.append((\"Bagging\", BaggingClassifier(random_state=1)))\nmodels.append((\"Random forest\", RandomForestClassifier(random_state=1)))\nmodels.append((\"Gradient Boosting\", GradientBoostingClassifier(random_state=1)))\nmodels.append((\"Adaboost\", AdaBoostClassifier(random_state=1)))\nmodels.append((\"Xgboost\", XGBClassifier(random_state=1, eval_metric=\"logloss\")))\nmodels.append((\"Decision tree\", DecisionTreeClassifier(random_state=1)))","646afe24":"# Empty list to store all model\"s CV scores\nresults = []  \n\n# best_scores\nbest_scores = []\n\n# Empty list to store name of the models\nnames = []  \n\n# loop through all models to get the mean cross validated score\nprint(\"\\n\" \"Cross-Validation Performance on Training Set:\" \"\\n\")\n\nfor name, model in models:\n    scoring = \"recall\"\n    kfold = StratifiedKFold(\n        n_splits=5, shuffle=True, random_state=1\n    )  # Setting number of splits equal to 5\n    cv_result = cross_val_score(\n        estimator=model, X=X_train, y=y_train, scoring=scoring, cv=kfold\n    )\n    results.append(cv_result)\n    names.append(name)\n    print(\"{}: {}\".format(name, cv_result.mean() * 100))\n    \n    best_scores.append(round(cv_result.mean() * 100,2))\n\nprint(\"\\n\" \"Training Set Performance:\" \"\\n\")\n\n# fit and predict the models training set\nfor name, model in models:\n    model.fit(X_train, y_train)\n    scores = recall_score(y_train, model.predict(X_train)) * 100\n    print(\"{}: {}\".format(name, scores))\n\nprint(\"\\n\" \"Validation Set Performance:\" \"\\n\")\n\n# predict the models on validation set\nfor name, model in models:\n    scores = recall_score(y_val, model.predict(X_val)) * 100\n    print(\"{}: {}\".format(name, scores))","cd9cab65":"# Plotting boxplots for CV scores of all models defined above\nfig = plt.figure(figsize=(15, 7))\n\nfig.suptitle(\"Algorithm Comparison\")\nax = fig.add_subplot(111)\n\nplt.boxplot(results)\nax.set_xticklabels(names)\n\nplt.show()","6a5ac0dc":"# Empty list to store all model\"s CV scores\nresults_over = []  \n\n# best_scores\nbest_scores_over = []\n\n# Empty list to store name of the models\nnames_over = []  \n\n# loop through all models to get the mean cross validated score\nprint(\"\\n\" \"Cross-Validation Performance on Oversampled Training Set:\" \"\\n\")\n\nfor name, model in models:\n    scoring = \"recall\"\n    kfold = StratifiedKFold(\n        n_splits=5, shuffle=True, random_state=1\n    )  # Setting number of splits equal to 5\n    cv_result = cross_val_score(\n        estimator=model, X=X_train_over, y=y_train_over, scoring=scoring, cv=kfold\n    )\n    results_over.append(cv_result)\n    names_over.append(name)\n    print(\"{}: {}\".format(name, cv_result.mean() * 100))\n    \n    best_scores_over.append(round(cv_result.mean() * 100,2))\n\nprint(\"\\n\" \"Oversampled Training Performance:\" \"\\n\")\n\n# fit and predict the models training set\nfor name, model in models:\n    model.fit(X_train_over, y_train_over)\n    scores_over = recall_score(y_train_over, model.predict(X_train_over)) * 100\n    print(\"{}: {}\".format(name, scores_over))\n\nprint(\"\\n\" \"Validation Set Performance:\" \"\\n\")\n\n# predict the models on validation set\nfor name, model in models:\n    scores = recall_score(y_val, model.predict(X_val)) * 100\n    print(\"{}: {}\".format(name, scores))","3da3d83e":"# Plotting boxplots for CV scores of all models defined above\nfig = plt.figure(figsize=(15, 7))\n\nfig.suptitle(\"Algorithm Comparison\")\nax = fig.add_subplot(111)\n\nplt.boxplot(results_over)\nax.set_xticklabels(names_over)\n\nplt.show()","c14e7b1d":"# Empty list to store all model\"s CV scores\nresults_under = []  \n\n# best scores\nbest_scores_under = []\n\n# Empty list to store name of the models\nnames_under = []  \n\n# loop through all models to get the mean cross validated score\nprint(\"\\n\" \"Cross-Validation Performance on Undersampled Training set:\" \"\\n\")\n\nfor name, model in models:\n    scoring = \"recall\"\n    kfold = StratifiedKFold(\n        n_splits=5, shuffle=True, random_state=1\n    )  # Setting number of splits equal to 5\n    cv_result = cross_val_score(\n        estimator=model, X=X_train_under, y=y_train_under, scoring=scoring, cv=kfold\n    )\n    results_under.append(cv_result)\n    names_under.append(name)\n    print(\"{}: {}\".format(name, cv_result.mean() * 100))\n\n    best_scores_under.append(round(cv_result.mean() * 100,2))\n\nprint(\"\\n\" \"Undersampled Training Performance:\" \"\\n\")\n\n# fit and predict the models training set\nfor name, model in models:\n    model.fit(X_train_under, y_train_under)\n    scores_under = recall_score(y_train_under, model.predict(X_train_under)) * 100\n    print(\"{}: {}\".format(name, scores_under))\n\nprint(\"\\n\" \"Validation Set Performance:\" \"\\n\")\n\n# predict the models on validation set\nfor name, model in models:\n    scores = recall_score(y_val, model.predict(X_val)) * 100\n    print(\"{}: {}\".format(name, scores))","c1d2bb7d":"# Plotting boxplots for CV scores of all models defined above\nfig = plt.figure(figsize=(15, 7))\n\nfig.suptitle(\"Algorithm Comparison\")\nax = fig.add_subplot(111)\n\nplt.boxplot(results_under)\nax.set_xticklabels(names_under)\n\nplt.show()","2e7d4b60":"# create dataframe\ncomparison_frame = pd.DataFrame({\"Model\":[\"Logistic regression\",\"Bagging\",\"Random forest\",\"Gradient Boosting\",\"Adaboost\",\n                                          \"Xgboost\",\"Decision tree\"], \n                                          \"Training Set\": best_scores, \"Oversampled Training\": best_scores_over,\n                                          \"Undersampled Training\": best_scores_under}) \ncomparison_frame","9972cdf2":"# random forest classifier\nrfc = RandomForestClassifier(random_state=1)\n\n# type of scoring used to compare parameter combinations\nscorer = metrics.make_scorer(metrics.recall_score)\n\n# grid of parameters to choose from\nparam_grid_rfc = {\"n_estimators\": np.arange(50,150,50),\n              \"min_samples_leaf\": np.arange(1,6,1),\n              \"max_features\":[\"log2\",0.7,0.9,\"auto\"],\n              \"max_samples\": np.arange(0.3, 0.7, None),\n              \"max_depth\":np.arange(1,5,1),\n             }","88c28482":"%%time \n\n# run the grid search\nrfc_tuned1 = GridSearchCV(estimator=rfc, param_grid=param_grid_rfc, scoring=scorer, cv=5, n_jobs = -1, verbose= 2)\n\n# Fitting parameters in GridSeachCV\nrfc_tuned1.fit(X_train, y_train)\n\n# print best parameters\nprint(\"Best parameters are {} with CV score={}:\" .format(rfc_tuned1.best_params_,rfc_tuned1.best_score_))","b3abd697":"# building model with best parameters\nrfc_tuned_gcv = RandomForestClassifier(\n    random_state=1,\n    max_features=\"log2\",\n    max_samples=0.3,\n    max_depth=1,\n    min_samples_leaf=1, \n    n_estimators=50,\n)\n\n# Fit the model on training data\nrfc_tuned_gcv.fit(X_train, y_train)","99d7b06c":"# calculating different metrics\nrfc_tuned_gcv_score, rfc_tuned_gcv_list = get_metrics_score(\n    rfc_tuned_gcv, False\n)\n\n# model performance\nrfc_tuned_gcv_score","743b4189":"# use draw_matrix function\ndraw_matrix(rfc_tuned_gcv, X_val, y_val)","8863ec8c":"%%time \n\n# Calling RandomizedSearchCV\nrfc_tuned2 = RandomizedSearchCV(estimator=rfc, param_distributions=param_grid_rfc, n_iter=50, scoring=scorer, cv=5, random_state=1, n_jobs = -1)\n\n# Fitting parameters in RandomizedSearchCV\nrfc_tuned2.fit(X_train, y_train)\n\n# print best parameters\nprint(\"Best parameters are {} with CV score={}:\" .format(rfc_tuned2.best_params_,rfc_tuned2.best_score_))","dd75ed28":"# building model with best parameters\nrfc_tuned_rcv = RandomForestClassifier(\n    random_state=1,\n    max_features=0.9,\n    max_samples=0.3,\n    min_samples_leaf=5, \n    n_estimators=100,\n    max_depth=1,\n)\n\n# Fit the model on training data\nrfc_tuned_rcv.fit(X_train, y_train)","f413db8d":"# calculating different metrics\nrfc_tuned_rcv_score, rfc_tuned_rcv_list = get_metrics_score(\n    rfc_tuned_rcv, False\n)\n\n# model performance\nrfc_tuned_rcv_score","f2cafaad":"# use draw_matrix function\ndraw_matrix(rfc_tuned_rcv, X_val, y_val)","534ee9eb":"#defining model\nxgb = XGBClassifier(random_state=1,eval_metric=\"logloss\")\n\n# Parameter grid\nparam_grid_xgb ={\"n_estimators\":np.arange(50,150,50),\n            \"scale_pos_weight\":[2,5,10],\n            \"learning_rate\":[0.01,0.1,0.2,0.05],\n            \"gamma\":[0,1,3,5],\n            \"subsample\":[0.8,0.9,1],\n            \"max_depth\":np.arange(1,5,1),\n            \"reg_lambda\":[5,10]}\n\n# Type of scoring used to compare parameter combinations\nscorer = metrics.make_scorer(metrics.recall_score)","df9b1380":"%%time \n\n# Calling GridSearchCV\nxgb_tuned1 = GridSearchCV(estimator=xgb, param_grid=param_grid_xgb, scoring=scorer, cv=5, n_jobs = -1, verbose= 2)\n\n# Fitting parameters in GridSeachCV\nxgb_tuned1.fit(X_train,y_train)\n\n# print best parameters\nprint(\"Best parameters are {} with CV score={}:\" .format(xgb_tuned1.best_params_,xgb_tuned1.best_score_))","401416e2":"# building model with best parameters\nxgb_tuned_gcv = XGBClassifier(\n    random_state=1,\n    n_estimators=50,\n    scale_pos_weight=2,\n    subsample=0.8,\n    learning_rate=0.01,\n    gamma=0,\n    eval_metric=\"logloss\",\n    reg_lambda=5,\n    max_depth=1,\n)\n\n# Fit the model on training data\nxgb_tuned_gcv.fit(X_train, y_train)","3e5ed91f":"# calculating different metrics\nxgb_tuned_gcv_score, xgb_tuned_gcv_list = get_metrics_score(\n    xgb_tuned_gcv, False\n)\n\n# model performance\nxgb_tuned_gcv_score","9645a4ab":"# use draw_matrix function\ndraw_matrix(xgb_tuned_gcv, X_val, y_val)","9eb323dc":"%%time\n\n# Calling RandomizedSearchCV\nxgb_tuned2 = RandomizedSearchCV(estimator=xgb, param_distributions=param_grid_xgb, n_iter=50, scoring=scorer, cv=5, random_state=1, n_jobs = -1)\n\n# Fitting parameters\nxgb_tuned2.fit(X_train,y_train)\n\n# print best parameters\nprint(\"Best parameters are {} with CV score={}:\" .format(xgb_tuned2.best_params_,xgb_tuned2.best_score_))","c959fad4":"# building model with best parameters\nxgb_tuned_rcv = XGBClassifier(\n    random_state=1,\n    n_estimators=100,\n    scale_pos_weight=2,\n    subsample=0.8,\n    learning_rate=0.01,\n    gamma=5,\n    eval_metric=\"logloss\",\n    reg_lambda=10,\n    max_depth=1,\n)\n\n# Fit the model on training data\nxgb_tuned_rcv.fit(X_train, y_train)","3cfa5e79":"# calculating different metrics\nxgb_tuned_rcv_score, xgb_tuned_rcv_list = get_metrics_score(\n    xgb_tuned_rcv, False\n)\n\n# model performance\nxgb_tuned_rcv_score","92b7c519":"# use draw_matrix function\ndraw_matrix(xgb_tuned_rcv, X_val, y_val)","573f470a":"# Choose the type of classifier. \ngbc = GradientBoostingClassifier(random_state=1)\n\n# Parameter grid\nparam_grid_gbc ={\"n_estimators\":np.arange(50,150,50),\n            \"learning_rate\":[0.01,0.1,0.2,0.05],\n            \"subsample\":[0.8,0.9,1],\n            \"max_depth\":np.arange(1,5,1),\n            \"min_samples_leaf\": np.arange(1,6,1),\n            \"max_features\":[\"log2\",0.7,0.9,\"auto\"],\n            \"max_depth\":np.arange(1,5,1)}\n\n# Type of scoring used to compare parameter combinations\nscorer = metrics.make_scorer(metrics.recall_score)","ed92b442":"%%time\n\n# Run the grid search\ngbc_tuned1 = GridSearchCV(estimator=gbc, param_grid=param_grid_gbc, scoring=scorer, cv=5, n_jobs = -1, verbose= 2)\n\n# fit the model\ngbc_tuned1.fit(X_train, y_train)\n\n# print best parameters\nprint(\"Best parameters are {} with CV score={}:\" .format(gbc_tuned1.best_params_,gbc_tuned1.best_score_))","60958223":"# Choose the type of classifier. \ngbc_tuned_gcv = GradientBoostingClassifier (\n                    random_state=1,\n                    n_estimators=50,\n                    learning_rate=0.01,\n                    subsample=0.8,\n                    max_depth=1,\n                    min_samples_leaf=1,\n                    max_features=\"log2\",\n)\n\n# Fit the model on training data\ngbc_tuned_gcv.fit(X_train, y_train)","10dc0def":"# calculating different metrics\ngbc_tuned_gcv_score, gbc_tuned_gcv_list = get_metrics_score(\n    gbc_tuned_gcv, False\n)\n\n# model performance\ngbc_tuned_gcv_score","97a23964":"# use draw_matrix function\ndraw_matrix(gbc_tuned_gcv, X_val, y_val)","f18c3a64":"%%time\n\n# Calling RandomizedSearchCV\ngbc_tuned2 = RandomizedSearchCV(estimator=xgb, param_distributions=param_grid_gbc, n_iter=50, scoring=scorer, cv=5, random_state=1, n_jobs = -1)\n\n# Fitting parameters\ngbc_tuned2.fit(X_train,y_train)\n\n# print best parameters\nprint(\"Best parameters are {} with CV score={}:\" .format(gbc_tuned2.best_params_,gbc_tuned2.best_score_))","6337c634":"# Choose the type of classifier. \ngbc_tuned_rcv = GradientBoostingClassifier (\n                    random_state=1,\n                    n_estimators=50,\n                    learning_rate=0.01,\n                    subsample=0.8,\n                    max_depth=1,\n                    min_samples_leaf=4,\n                    max_features=0.7,\n)\n\n# Fit the model on training data\ngbc_tuned_rcv.fit(X_train, y_train)","da0727c4":"# calculating different metrics\ngbc_tuned_rcv_score, gbc_tuned_rcv_list = get_metrics_score(\n    gbc_tuned_rcv, False\n)\n\n# model performance\ngbc_tuned_rcv_score","dfe5b4fc":"# use draw_matrix function\ndraw_matrix(gbc_tuned_rcv, X_val, y_val)","b76d9957":"# create dataframe\ncomparison_frame1 = pd.DataFrame({\"Model\":[\"Accuracy - Training\",\n                                        \"Accuracy - Validation\",\n                                        \"Accuracy - Test\",\n                                        \"Recall - Training\",\n                                        \"Recall - Validation\",\n                                        \"Recall - Test\",\n                                        \"Precision - Training\",\n                                        \"Precision - Validation\",\n                                        \"Precision - Test\",\n                                        \"F1 - Training\",\n                                        \"F1 - Validation\",\n                                        \"F1 - Test\"], \n                                        \"Random Forest - Grid Search\": rfc_tuned_gcv_list,\n                                        \"Random Forest - Randomized Search\": rfc_tuned_rcv_list,\n                                        \"XG Boost - Grid Search\": xgb_tuned_gcv_list,\n                                        \"XG Boost - Randomized Search\": xgb_tuned_rcv_list,\n                                        \"Gradient Boost - Grid Search\": gbc_tuned_gcv_list,\n                                        \"Gradient Boost - Randomized Search\": gbc_tuned_rcv_list}\n                                ) \n                                         \ncomparison_frame1","0659cabb":"feature_names = X.columns\nimportances = xgb_tuned_rcv.feature_importances_\nindices = np.argsort(importances)\n\nplt.figure(figsize=(12, 12))\nplt.title(\"Feature Importances\")\nplt.barh(range(len(indices)), importances[indices], color=\"violet\", align=\"center\")\nplt.yticks(range(len(indices)), [feature_names[i] for i in indices])\nplt.xlabel(\"Relative Importance\")\nplt.show()","6856631e":"# creating a list of numerical variables\nnumerical_features = [\n    \"CLIENTNUM\",\n    \"Customer_Age\",\n    \"Dependent_count\",\n    \"Months_on_book\",\n    \"Total_Relationship_Count\",\n    \"Months_Inactive_12_mon\",\n    \"Contacts_Count_12_mon\",\n    \"Credit_Limit\",\n    \"Total_Revolving_Bal\",\n    \"Avg_Open_To_Buy\",\n    \"Total_Amt_Chng_Q4_Q1\",\n    \"Total_Trans_Amt\",\n    \"Total_Trans_Ct\",\n    \"Total_Ct_Chng_Q4_Q1\",\n    \"Avg_Utilization_Ratio\",\n]\n\n# creating a transformer for numerical variables, which will apply simple imputer on the numerical variables\nnumeric_transformer = Pipeline(steps=[(\"imputer\", SimpleImputer(strategy=\"median\"))])\n\n# creating a list of categorical variables\ncategorical_features = [\n    \"Gender\",\n    \"Education_Level\",\n    \"Marital_Status\",\n    \"Income_Category\",\n    \"Card_Category\",\n]\n\n# creating a transformer for categorical variables, which will first apply simple imputer and \n#then do one hot encoding for categorical variables\ncategorical_transformer = Pipeline(\n    steps=[\n        (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n        (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\")),\n    ]\n)\n\n# handle_unknown = \"ignore\", allows model to handle any unknown category in the test data\n\n# combining categorical transformer and numerical transformer using a column transformer\npreprocessor = ColumnTransformer(\n    transformers=[\n        (\"num\", numeric_transformer, numerical_features),\n        (\"cat\", categorical_transformer, categorical_features),\n    ],\n    remainder=\"passthrough\",\n)\n# remainder = \"passthrough\" has been used, it will allow variables that are present in original data \n# but not in \"numerical_columns\" and \"categorical_columns\" to pass through the column transformer without any changes","b649ed09":"# Separating target variable and other variables\nX = df.drop(columns=\"Attrition_Flag\")\nY = df[\"Attrition_Flag\"]","eff5fa93":"# Splitting the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    X, Y, test_size=0.30, random_state=1, stratify=Y\n)\nprint(X_train.shape, X_test.shape)","72c642a0":"# Creating new pipeline with best parameters\nmodel = Pipeline(\n    steps=[\n        (\"PRE\", preprocessor),\n        (\n            \"XGB\",\n            XGBClassifier(\n                random_state=1,\n                n_estimators=100,\n                scale_pos_weight=2,\n                subsample=0.8,\n                learning_rate=0.01,\n                gamma=5,\n                eval_metric=\"logloss\",\n                reg_lambda=10,\n                max_depth=1,\n            ),\n        ),\n    ]\n)\n\n# Fit the model on training data\nmodel.fit(X_train, y_train)","b8057c6b":"model.predict(X_test)","7a3f934a":"# Module : Feature Selection, Model Selection and Tuning\n# Project: thera bank credit card churners\n# Submitted by : Ritesh Sharma\n# Submission Date : 22 Oct 2021","2e84ae29":"**Observations:**\n1. Existing customers have slightly larger Credit_Limits.\n2. Existing customers have larger Revolving_Balance.\n3. Transaction_Amounts of existing customers are higher than attrited customers, which indicates some customers may have left as they may be using other credit cards OR they rarely use Credit Cards for purchases.\n4. Average Utilisation is higher in existing customers.\n5. Inactivity during last 12 months has very less role to play.\n6. Customer_Age is also not impacting the attrition.","20298e6a":"#### Define Parameters","ddefb4db":"### Validate the outliers using IQR","08ab836e":"### Contacts_Count_12_mon","34cba2fc":"### Impute null values for Education_Level\n\nIncome_Category can be checked for influence on Education_Level","e2346c97":"**Observations:**\n1. 38% of customers have not used the card for 3 months in last 12 months.\n2. The data shows that a small fraction of customers are active every month.\n3. There are around 1.2% of customers who have not used there cards for 6 months in last 12 months.","0cd19b06":"**Observations:**\n1. CLIENTNUM shows uneven distirbution of data and appears to have outliers.\n2. CLIENTNUM is customer identifier in the dataset and would not be used in our analysis.\n3. No handling required for the variable.","7eb88c11":"### Split independent and dependent columns","8ca83398":"#### Evaluate the model performance","48f55963":"**Observations:**\n\n1. Mean is smaller than median shows slight left skewness.\n2. From the domain knowledge we know that customers may or may not use the revolving credit \/ balance feature on their cards.\n3. The data looks right fit for domain and no treatment required.","24fa948e":"### Import required libraries","678fc965":"**Observations:**\n1. Income_Category has 1112 records with \"abc\", we will have to correct this.\n2. Gender, Education_Level, Marital_Status and Card_Category columns doesn\"t show any anomaly. ","6035d363":"#### Draw Confusion Matrix on Validation Set","eb6d04db":"#### Evaluate the model performance","64de97a0":"**Observations:**\n\n1. Avg_Utilization_Ratio shows significant correlation with Total_Revolving_Bal.\n2. Ang_Open_To_Buy is highly correlated to Credit_Limit.\n3. Customer_Age is highly correlated to Months_on_book.\n4. Avg_Utilization_Ratio is negatively correlated to Credit_Limit and Ang_Open_To_Buy.\n5. Total_Trans_Amt is highly correlated to Total_Trans_Ct as they are value and volume representation of Transactional Data.","1f2735f0":"### Create pipelines for column imputation","23aee2ff":"### Total_Revolving_Bal","d47e68b2":"### Draw boxplot for outliers in numerical columns","7a45809a":"### Check if the model runs on Test Set","8a1143a2":"### Total_Amt_Chng_Q4_Q1","d5eaa4ea":"#### Use the best params and train a model","f4abd943":"### Total_Ct_Chng_Q4_Q1","2a928299":"**Observations:**\n\n1. Credit_Limit, Contacts_Count_12_mon, Total_Trans_Ct and Avg_Open_To_Buy show heavy outliers.\n2. Month_on_book, Total_Amt_Chng_Q4_Q1, Total_Ct_Chng_Q4_Q1 and Months_Inactive_12_mon show few outliers.\n3. As we have seen during Univariate analysis, the variables does show outlers however these are valid business data and we should consider these in model_building.","9cb39fa7":"**Observations:**\n\nNULL Values are treated.","27a0b0f1":"### Credit_Limit","d9610963":"**Observations:**\n\n1. From the above comparision we see that all the hypertuned models give same recall.\n2. Accuracy and Precision is also consistent accross all datasets.\n3. All 6 models are giving consistent performance.\n4. XGBoostClassifier is tuned with maximum parameters using RandomizedSearchCV, we assume that this model will provide us better fitment and performance on future datasets.\n4. Let us also check the important features before proceeding.","bfffc91a":"### Total_Trans_Amt","05f6b1cd":"#### Define parameters","5aab89ab":"#### Draw the Confusion Matrix on Validation Set","c8cbf205":"#### We understand that Education_Level is a great influencer for Income_Category, let us cross validate","58a4d6c7":"#### Define the parameters","a304ac12":"#### Check the null values","9b234bd7":"**Observations:**\n\n1. Mean is greater than median, the data looks right skewed.\n2. Some customers are likely to spend more on credit card, which makes data ligitimate and can be used as is.\n3. The data looks normal for the domain and no treatment required.","bc6664a4":"## Define all required functions","edb1697f":"#### Use the best parameters and train a model","fe3ea616":"**Observations:**\n1. Education_Level has 15% (1519) missing values.\n2. Marital_Status has 7.4% (749) missing values.","5f0e5f9b":"**Observations:**\n\n1. Logistic regression gives best score on Training and Oversampled Training sets.\n2. But Random Forest, Gradient Boost and Xgboost gives us consistent scores on Training, Oversampled and Undersampled data.\n3. We have alse seen that these three models give us generalised performance on the validation set as well.\n4. We can continue with hyper tuning these models and see if the performance improves \/ generalises.\n5. We will build the hypertuned models on Training set, as all models give best recall on the same.","044a1f31":"# The Thera Bank - credit card users churn prediction - feature selection, model selection and tuning","ea9fec18":"### Check the basic statistics","03a3e296":"#### RandomizedSearchCV","13d09a47":"**Observations:**\n\nNumber of Female customers is higher than Male customers.","933bff0b":"## Model Building\n\n### Model evaluation criterion:\n\n#### Model can make wrong predictions as:\n1. Predicting a customer will close the Credit Card Account and the customer doesn\"t - Loss of resources.\n2. Predicting a customer will not close ther Credit Card Account and the customer does - Loss of revenue \/ business.\n\n#### Which case is more important? \n* Predicting that customer will not close the Credit Card but he does i.e. losing on a potential source of income for the company because that customer will not be focussed upon by the business team to provide better services.\n\n#### How to reduce this loss i.e need to reduce False Negatives?\n* Company wants Recall to be maximized, greater the Recall lesser the chances of false negatives.","29772e1e":"## Univariate Analysis","ebfff9bc":"#### Draw Confusion Matrix for Validation Set","107f3888":"#### Run Grid Search and fit the model","4f26380d":"### Create the new pipeline with best parameters","e26753f3":"#### Use the best parameters and traing the model","cc1f042b":"#### Boxplot of scores","134c663e":"**Observations:**\n\n1. Married Customers are less likely to close the credit card compared to other Statuses.\n2. It is recommended that business captures more accurate information for the variable in future to avoid NULL Values.","ba2b0d87":"#### Run Randomized Search and fit the model","8bd79aac":"### CLIENTNUM","bf7022aa":"### Check the duplicated values","f3c8cdf4":"**Observations:**\n\n1. The features are on different scales, for instance Months_on_book has 13 as minimum and Credit_Limit has 1438.\n2. CLIENTNUM has high uniform values on all scales as it customer identifier.\n3. For most variables mean is higher than standard deviation, depicting right sckewed data.","e985bb47":"#### Run Grid Search and fit the model","39dacec0":"#### Boxplot of scores","cd73d1c1":"### Gender VS Attrition_Flag","0263ba91":"## Pipelines for productionizing the model\nNow, we have a final model. let's use pipelines to put the model into production\n\n### Column Transformer\n1. We know that we can use pipelines to standardize the model building, but the steps in a pipeline are applied to each and every variable - how can we personalize the pipeline to perform different processing on different columns\n2. Column transformer allows different columns or column subsets of the input to be transformed separately and the features generated by each transformer will be concatenated to form a single feature space. This is useful for heterogeneous or columnar data, to combine several feature extraction mechanisms or transformations into a single transformer.\n\n### Next steps:\n1. We will create 2 different pipelines, one for numerical columns and one for categorical columns\n2. For numerical columns, we will do missing value imputation as pre-processing\n3. For categorical columns, we will do one hot encoding and missing value imputation as pre-processing\n4. We are doing missing value imputation for the whole data, so that if there is any missing value in the data in future that can be taken care of.","4ffccc25":"**Observations:**\n\nThe target columne is now encoded with Existing Customers as 1 and Attrited Customers as 0.","274bd1e8":"**Observations:**\n1. Customers with income greater that $120K and less than $40K are more likely to close the credit card.\n2. Customers within income range of $60K and $80K are less likely to leave.\n3. Data Entry error should be avoided to have more meaningful insights.","33588c15":"**Observations:**\n\nIncome_Category \"abc\" is now treated and imputed with most_frequent value \"Less than $40k\"","7d6b2961":"### Education_Level VS Attrition_Flag","fb77f25d":"#### Run Randomized Search and fit the model","2f8d5872":"**Observations:**\n\nThere are no duplicated values.","9ece2b1c":"## Conclusion\n\n1. There was imbalance in data, as it contains only 16% attrited customers. This must be fixed for future analysis.\n2. The data capture issues resulted in Missing values in Marital Status and Education_Level, which are imputed with most frequent values in dataset. This adds to imbalance in the data.  \n3. \"abc\" Category in Income_Level looks like typo for NULL Values and were also imputed using frequent values further creating one large segment of customers earning below $40 K. This should be avoided.\n4. The bank can run the model to achieve desired performance levels for new data, also to offer better services to customers.\n5. More data points to be added to dataset for better analysis in future.\n6. We tried building models for below combinations of variables, all of them gave similar performance on almost all models.\n    * By dropping the variables that has Ratio and CLIENTNUM.\n    * By dropping CLIENTNUM.\n    * With all dependent variables. (Final dataset that was used)","44db941d":"#### Evaluate the model performance","9ff3099b":"**Observations:**\n\n1. We see that Hypertuning with Best Parameters identied by RandomizedSearchCV, of the RandomForestClassifier has improved the recall to 1 on training set.\n2. Performance is consistent on Validation and Testing set as well.\n3. Accuracy and Precision scores are also consistent.","c9ab445c":"**Observations:**\n\nMost customers are Graduate followed by High School.","6c0328dd":"**Observations:**\n\n1. Mean is greater than median depicting right skewed data.\n2. From our domain knowledge we know that customers may or may not utlise the entire limit available on card.\n3. The data looks normal for the domain and no treatment required.","455a35df":"## Outliers Treatment","4136e2c3":"**Observations:**\n\n1. We see that Hypertuning with Best Parameters identied by GridSearchCV, of the RandomForestClassifier has improved the recall to 1 on training set.\n2. Performance is consistent on Validation and Testing set as well.\n3. Accuracy and Precision scores are also consistent.","85fd8ef2":"**Observations:**\n1. Around 53% customers are married.\n2. Next highest population is Single customers.","a3756366":"### Sample data","2ee004ef":"### Impute null values for Marital_Status\n\nEducation_Level, Income_Category and Card_Category can be checked for influence on Marital_Status","3a81f841":"#### Run Randomized Search and fit the model","daf41753":"### Create undersampled training set","c6312421":"**Observations:**\n\n1. Most customers earn Less than $40K.\n2. Followed by customers earning between $40K to $60K.","7c58aaba":"### Build different models on Training Set using KFold and cross_val_score.","652c7bea":"**Observations:**\n\nTarget variable shows 83.9% customers are existing and 16.1% are attrited.","4c4b4268":"**Observations:**\n1. Most customers in the dataset have \"Blue\" Card.\n2. There are very few customers using \"Gold\" and \"Platinum\" Cards.\n3. We also see some customers using \"Silver\" Card.","a3f7dbd4":"### Identify the models to be built","b37408d6":"### Income_Category VS Attrition_Flag","e878981a":"#### Use the best parameters and train a model","1d81f69b":"**Observations:**\n1. There are 21 columns in the dataset.\n2. Education_Level, Marital_Status columns have less than 10127 values, indicating existance of NULL Values.\n3. All categorical columns are of object type and can be used for onehot encoding.","c11c1e8e":"**Observations:**\n\n1. We see that Logistic Regression, Random Forest, XGBoost and Decision Tree models are over fiting on the training set.\n2. However the cross_validation has reduced the over fitting to some extent.\n3. Random Forest, Gradient Boosting and XGBoost gives best perfomance and we would want to tune them for further improvements.\n4. The boxplot shows that Gradient Boosting has 1 outlier and Random Forest has 2.\n4. Let us also build these models on Over and Under sampled datasets to validate our undertstanding.","f6f13ef9":"**Observations:**\n\nTotal_Trans_Ct is the most important variable, followed by Total_Ct_Chng_Q4_Q1 and Total_Trans_Amt.","c80ffeaa":"### Marital_Status","a4373bd5":"### GradientBoostClassifier","2d64edb5":"#### Evaluate the model performance","62b3125d":"#### Draw Confusion matrix for Validation Set","b0a2454d":"### RandomForestClassifier","549076bf":"#### Run Grid Search and fit the model","7d34b2bd":"### Comparision of all numerical variables with Attrition_Flag","81845704":"#### Feature importance for RandomForest tuned with RandomizedSearchCV","cb2ce0b5":"#### RandomizedSearchCV","db0b1465":"### Customer_Age","a654de78":"### Total_Relationship_Count","57bdfcd5":"### Compare model performance","2f9959aa":"**Observations:**\n\n1. CLIENTNUM being customer identifier will not add value to our model building and can be dropped during dependent variable spilt.\n2. Attrition_Flag is our target column, we will have encode the values before model building.\n3. Income_Category column needs to be reviewed and feature engineering if required can be done on the column.\n","055f9913":"### Card_Category VS Attrition_Flag","1b7c23a6":"## Data pre-processing","f90fe89a":"## Hyperparameter Tuning","ed8cc52f":"**Observations:**\n\nPlatinum card members are most likely to close the credit card compared to other categories.","95c2991c":"**Observations:**\n1. We see that almost 30% Customers with missing Education_Level are from Income_Category \"Less than $40K\".\n2. and most customers with the Income_Category \"Less than $40K\" are Graduates.\n3. We can assume and update Education_Level to \"Graduate\", however post that update the data may become biased for one specific category.\n4. We will use simple imputer to impute the null values with most_frequent strategy.","0efa754a":"## Bivariate Analysis","02541013":"#### Draw Confusion Matrix on Validation Set","c9319628":"**Observations:**\n\nNumber of Male Customers closing the Credit Card account is slighlty lesser than Female Customers.","a5a029c4":"**Observations:** \n1. Mean is almost equal to median and the data looks well distributed on both sides.\n2. There are customers who are assocated with bank for almost 5 years.","efe3c6fe":"### Months_on_book","3d24097b":"## Context:\n\nThe Thera bank recently saw a steep decline in the number of users of their credit card, credit cards are a good source of income for banks because of different kinds of fees charged by the banks like annual fees, balance transfer fees, and cash advance fees, late payment fees, foreign transaction fees, and others. Some fees are charged to every user irrespective of usage, while others are charged under specified circumstances.\n\nCustomers\u2019 leaving credit cards services would lead bank to loss, so the bank wants to analyze the data of customers and identify the customers who will leave their credit card services and reason for same \u2013 so that bank could improve upon those areas.\n\n## Objective:\n1. Explore and visualize the dataset.\n2. Build a classification model to predict if the customer is going to churn or not.\n3. Optimize the model using appropriate techniques.\n4. Generate a set of insights and recommendations that will help the bank.\n\n## Data Dictionary:\n1. CLIENTNUM: Client number. Unique identifier for the customer holding the account\n2. Attrition_Flag: Internal event (customer activity) variable - if the account is closed then \"Attrited Customer\" else \"Existing Customer\"\n3. Customer_Age: Age in Years\n4. Gender: Gender of the account holder\n5. Dependent_count: Number of dependents\n6. Education_Level:  Educational Qualification of the account holder - Graduate, High School, Unknown, Uneducated, College(refers to a college student), Post-Graduate, Doctorate.\n7. Marital_Status: Marital Status of the account holder\n8. Income_Category: Annual Income Category of the account holder\n9. Card_Category: Type of Card\n10. Months_on_book: Period of relationship with the bank\n11. Total_Relationship_Count: Total no. of products held by the customer\n12. Months_Inactive_12_mon: No. of months inactive in the last 12 months\n13. Contacts_Count_12_mon: No. of Contacts between the customer and bank in the last 12 months\n14. Credit_Limit: Credit Limit on the Credit Card\n15. Total_Revolving_Bal: The balance that carries over from one month to the next is the revolving balance\n16. Avg_Open_To_Buy: Open to Buy refers to the amount left on the credit card to use (Average of last 12 months)\n17. Total_Trans_Amt: Total Transaction Amount (Last 12 months)\n18. Total_Trans_Ct: Total Transaction Count (Last 12 months)\n19. Total_Ct_Chng_Q4_Q1: Ratio of the total transaction count in 4th quarter and the total transaction count in 1st quarter\n20. Total_Amt_Chng_Q4_Q1: Ratio of the total transaction amount in 4th quarter and the total transaction amount in 1st quarter\n21. Avg_Utilization_Ratio: Represents how much of the available credit the customer spent","5e90a92f":"**Observations:**\n1. Around 1\/4th of customers have 3 relationships with bank.\n2. Customers with 4,5 and 6 relationships are almost equal in numbers.","bed222e4":"### Apply onehot encoding","91086771":"## Load the dataset","d4c6ab25":"**Observations:**\n\n1. We see that Hypertuning with Best Parameters identied by RandomizedSearchCV, of the GradientBoostClassifier has improved the recall to 1 on training set.\n2. Performance is consistent on Validation and Testing set as well.\n3. Accuracy and Precision scores are also consistent.","49769f45":"### Dataset information","e3319e44":"### Split data into Training, Validation and Test Sets\n\nTraining Set to have 60% data and Validation and Testing sets to have 20% data each","b16ae6eb":"### Split data into Dependent and Independent Variables","32cad1f4":"### Create oversampled training set","e61af181":"#### Verify the update","fa15b1ba":"### Check the null values","4d784407":"**Observations:**\n\nNULL Values are treated.","99fd119c":"#### GridSearchCV","489a9a5c":"### Marital_Status VS Attrition_Flag","b2a53061":"<img alt=\"\" src=\"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7\/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7\/wgARCAHYBQADASIAAhEBAxEB\/8QAHAABAAIDAQEBAAAAAAAAAAAAAAMEAQIFBgcI\/8QAGgEBAAIDAQAAAAAAAAAAAAAAAAIDAQQFBv\/aAAwDAQACEAMQAAAB+MgywMgwzgAAAAAAAAAAAAywMgwzgAAAAAAAAAM4DOBnAyxkYyMAAAAAAAAAAAAZwMsZGM4AAAAAAAAAAAAMsAAAAAAAAAAAAAAAAzgybGrbBhkas4Fyr2iTz\/tPFgAAAAAAAAyYyyYbYMMjGM4EsVw63C9v4wrAAAAAAAAGRlsasjGNsGoLff53tuZ0PnlTpc3oaOBOIAAAAAAAyGRhkYxtgxtrIdDbrVDzwAAAAAAAAGWTDbBhkYxnAsV+oXfPe48OAAAAAAAAAAAAAAM4Gc4yZMmMbYNWcDu8L0B0\/Gel82YZya42GrIwAAAABnAznXJsZMA1ZwLFe2e7+c+68MYZGMbDVkYAAAAAzgbbabGQYxtqYBn6x8p+lcnofNNcurz8NmWjbBhnAAAAABljJsxsYMmuMjAPbcL0HkimyMNtTDbBgAAAAAGc67Gc4yMZwas4HT5nXPSeD9f5I1ZGAAAAAAAAADJM+janzt7\/U8Dj3mh4jb2+54rf2sh4bPuLx4Gz7MePre73PDdHq0TNC1k2nr4OtmtqaeI+wSHxV6+I8o9RGeaejyecz6myePe22PEbe2lPESe23PDvc2Dwln3Gp4+v7ayeCt96A05VzQklxEdbNPBb8R9J7h8Je3pnk3qYzzWPR4PPPS2TyefYyHjd\/bSHi8+4t4z88m+qdBtfKbH0yONvzDH1OjVnxHd6PP1uhyertc3rduhwprNq7Q36OnR8y4n6H+ey4nznHrNNnR8s9NoebeikPNbersHjdvZyHi5fabninuNzw1n3sZ4\/HsZjwFj2FQo1pMEF2PYuWOVcLXC7XqD4g+s+UPIZ9cPIPW4PJvWSHkHtMnjNvaynipPayHh3ubh4G17XB4+r7qc8He7NIzzLuok11L+0OhJ4j6vfPiL18R5V6nU8xj0mh553xwHe1OG7Q4ue1ucLbv7n1DW9k5unT0OZjojn7dAc3lWvIHSp09C1FHk2s1NiOzBcI+nRnJq9qQ3v0L5L0uT0Sxy+5GcjXq7HH262xy5OkOa6I5+3Qyc7n9HxZdp0Ii7DEFmDBtNXtml+pOT1rO5jq1di3f5906fE6ls4WnTkONnr5OVv1Bzc9HY5+3Q1rnUgo8+PoepHy9tno2qmcYvuV6UlNm+0Mmjfc3q71xj3msa2bVjl9GzS6HQ5li3n8uD1vF2+Lydexjb0ORv1djl7dIc7bobHOj6fljTn82MuaVsiSLJbqJCXE2ToV8TlXraQnUsQbnXqZ6pw83pDmunk5eemOZjpDn7dDJzeZd8adCpR0LcOmDa1U2NLEFs06VKUsVre46NSyTdLl9Eucjs7HI16e5x8dkcbHZHF17eDhu3g42\/X2OTJ1NiwqC1rVyT5rbFjnb+XKnJzWNmomkrzmku8hjOdDfq18FzXawT6x5NrO+Sbtea6hmxmsWc1tiwrifEGSxXz5kg4ElEzjXBLLBIMzZJdZaxL0I9S5vFbJZNqJNc2yZ7XCnL8tjmlratksYiwTbV8k3G34XN7slTWvu9yZFnOzM0mrnHNHLRmHEV\/VtSwb62JrEdqijMNXpYhtarLdfv68ru7HO5+YcdnzllXzZXPiLBPmvQIfJW+Gbw65NpYdiXEmxtizWJpMSF7MFoXtKRckk3F6lGelpWICbNXYs4gEyAWKMnlitxdqptjXBPvBKYkk2Nm0Rv1IBbYsk22kRJb2Evb87dJ7O1MtK+xOiEuNMG+NMEuYRPvX3PKyceY6W\/PjL83JlM8STnlZjUlkZMzx7EksO4m33NNtdi\/coXi9pZya4s0y\/BJAdjzvT5pSl83Md\/bi7nV25Mhb42\/OKGY8Ekkc5rPHISSw7G2d7Ai31LfQ5t86MM1kQXK5ahxMXOdpaPPyedkPQ44u52duTJXdZ4XR4\/P9ja1gn29ifSevK1vq0ti1pHLjEVzMOujtQS0zuXaNvV09buJIa9S\/V3zixdow7FFzzXqPA9Thdnfz03T5Xcxx5Ds8jHOKdPbQzvDbNd9ZSTbTYl02sGYptCXoc6+dLTTpmmljBnerdMW+TfPPq\/HPR54Uh15OPKT8bfmlTOmCSXG4nj2JJYdjaTaY0zrkvXeffL8U8xiK3VL1WTU6vCtwHKk81Iejz5+Q7ziDua8XQ7jgYPQyeZ2Opm3qV8WNSHSeA4PLvUjbVsWEchvPDKJYNySTXImhmLVuhfOnPBUOjEhLFbMRPNSsngp9MluxStlqWKc4\/Jv8012CfaKQ3mikNpIxJPDuazxSk9znXzo36cZd1i2N4oNzXpcboHjILlMsz0rJclh31ehSqyw6nrc3qFm+yaDXanZm20zrzlxFNFNDsrSSRbwxatVLuvq28Vtq6JCriVmNBZnseO9P53o8PiWINu7527Yp2zHJ6HKKe+Bm3X3JN9JSRjUmlhlG2uSa3TtF\/p824WMUrZpmrIR3KOSLyXrvKEtilYLs9Wc5XMvUDOGSxmOQ3milE1fYkm0yJNJC1boXjpWq9Y6EWNCeDTQku8u6fP0tcmVslrNaQlxrATZrYLSqPqWnYiOXr08nJ5fqfOnhocYNt45CTbQWcxzGsscpLtBIbTQTFmeKQux52JtQh1n0K9upMcvT2EZ5Cz6HUoWOlsfN6M9Yk2j2Jc4wWcxTmN47BtJX3NrdWUmljmOhXkFnaKQrx2IyGzX3KUHppzxc3ptTk1\/SeY0urztNtNP1ON45WylhkjKdnWqW8mMRxNpjeKbMU0IbXalimrS1XsRij3xGMGZNJTlpWb3Q43mq\/ta3f8v5i72ZDyvn\/T+XMZ0ySb6bkktWc3znJtZr5JJYxYmhmLu0chJPBKRRWNSLSWAm5fZ6p4x6vU4MvZgPDVZ65nePck30wWsxzGu+k5JtXlM2K8pZl03OhBvkmzqIdbERDarbnKrezwfP4Pd0jy3Q7XQPO0fbQngHsNDyW\/rtT37n4LUfOgOx561zz5vvDuSbxbk+Y9ySSPYkmrSFialOSq9osTVbJmxBoXY4thLHkxb5149ZHUgL6hkvScuc+URywEmY9yfMchvJHuSbwblmSrKWdYJyeencJWsRclqbkVutMRWaux62ahEXc8\/J0fD+q8tqdPlxbw6XqcywyY2N9494WS740gmlg2hmeSBCMskMkcTy6Kq8715mbNPfMYyR7aMTd\/znc6PE6NerF3fNdDPP2OB4z2fiTOY9iWSGU33imJEeS3tX2LsWsZZuU7ZZh20LM9LJuYJMYgO93fPdAs45+xeooz5vBvCb7R7k7Tckkj2JJq25ZmpTEyvaJ56ds2mi0LesGwniya26Fo9XirWLmtXYW6Vgu6aZKsG1It7c\/Y89ny2TtUasZ0bvnZiHfGhPvDITbw7E09Xck3gnMTQ7Eu8ExNeo2i1rnUnSQEFijMa5j8+dOhyNT0ePO5O9a8vOWau9csbwyE28O5NNW2JJIJhvoJ9opDfoULJb130LmrJTnqbGdouWWubyNTty+dHpt\/M3qtnoaR55\/rZdo9obU2Y8wttaaI5nxlHOZYJYtto5Y4tbQ2KK09eaGMQ2qmcTaR4libkzeO7Hmexji69Ljeiz5zY9Fwt65PvXlJpYNyaSvuWMRbE2M6ljGglt1bBeabk+NbBVxiAu1MajncaudW157B6Kx5aUmj10LG8EpNvDsTT1dyTeCcxLFklkhlJb\/PuFnTfQstoyvNTlMZi4h0OZy9Dvz+Xyequ+JkPoDxGD0fH5NY68vB2PvGO\/g8\/r6DJ56L0+p8z+f\/oX4EaSVpCzvDuS7w7EklfcnzHsT7Rbk1uCwTZjyXa8eSvJJVLPZ6Xpj589\/g8Bn3g8fN67Y8b8n\/RPyI8xtBuWZIJCTeHck3g2LGYtiWatMbXa1ks641OhBDIV9t4TT0Vf6CfP9PoGDwGPfZPEz+xyfF4vaeJ0PT7bw709GdohfO0zGc28EkM77x7RTapYJJ4ZqYrFSSON4ZdGMaST2a9mH32no\/GeAe+1nX4Gz7XY8f437JxT4pvDsWJa0xJvFsS5iyWNodySavuSTxzFqTTBbV5DWvLsR3eZ9LPKQfQMHgdPf4PDz+y3Pnfzz9D\/AA050lfcs7w7ku8O5vJBuTbRbE0kEhJdr2CxjQXq8exX3krEnfn9gfPdPoWp86g+lanzjX6Vk+Y7fTB8wi+p4PlUv1Dctx8yM6ueLqd3PCyd35\/6XJ8J3t0CzJVlJ9oMk20O5cQym9inOWrnPvE1fWQWIJTMtX157Dbl4OljkjquTsdTHHiO5x45D4Rt63xpYmqyFjMInzFktSV5jaerKXLNG4XKuuTNiKQzrjrntOty9Tp68rU62eRsdXXlQHT+MfVvKVbvjcxb6foZ94d69iTMW8ZbywTQnNrhCc09WatZnrb0s4xvltsxCGfaeU9r1PP9TTmx9XidTHJydXPJHUcTJ818r9j+Nm8tWQs7QifMQns1ZSTeMX9605ezDoZlxuSNNTvfRPPWzp6c2I6+OVg6+OXCdnx\/U3PhG\/W4pYkrSk20InzDuW9oJjaepOWrfPvFitruZnhlM5h9Oezn5eDpY5I62eTKdPXl1jvY4MB6J5vU9PjzcB841ipnT05+xako7lifn2iLjd+A5O8OSxmHcmlrblvaCUTRyHTzXnLDTJZ3jrGlWlUOpJxsF+biWi5mlsWNqmxZmrix5\/0EJxNkZYzBuTSV9y3tWmJDB1Jas5Z10lLG8GTXlQUzp55GDouVIdLSnIWFOwTzVbBT2m01+skrSa\/Tnzpmu2aarLC2bOu1dut2lbjOzvDvrx2sRbQjJpt5y7RzrzofQeY60fM0lHp78mct4gjLqHJd5PT0PP73uYWNoNiaSDYt7VpibRktdHnWSxLWskk1Sc35eeWdCLl4OxUowndr1slrFTcsT1ZTHB9HAcXeIWMw7k0lbcuZrzGZdMnU3q2CxjTcs7xRGlGpTOpvxsF+Xi2S7ipuSaxTEGnU0KevV55HmbYq2uZqdGxxR3adPQvz0axYs87Y6fDmjNZIck6HJasc7c6FnkWDsxcvU9DN5boHXqVcl2rPsVKnWycboWqZtrpgswQRlizQqE09LQ7PElhI94sk6HJYsc\/Y6MvMmO3ryozuW\/L3DuV6GxYzHKVIOluce7a0Id6cpjbSIvc+LQtXOLsdGLny073Rl58+vvWd62YW35KG9dl63y5KrOhnj5V+gcaqo6vM0263FsUrO9lfM162CnvPRLUWuTKpknrQRnWrVYSHbGhYQ5JrFHY6Wefudmfj6HWuebyep05UhvZoWyrH0YzmZ6wrK+5LFrETzVKJPY546vBniNN4ck+YRbn5250LHJnO1HytD0NjyvQOxWqZLcEspRq9nJweh0ICvrJcOdZsbFNe0KuOpXI4OpROXD7eueKk9jXPJa+zjPKwe62PBvZ2DwuvuNzw+fbyngHt7R8+1+iVjw8nv4jw2\/uusfL+n6G0ePu9fU4cPfkOBN2hxdPU8049b0I8xB66M8vF662eDz7iM8Tj3e54XHt7J8+19j1T55F9A1PDbe\/iPDPeXT5x0vTDytz0VY4tL0GxyNe7ZPPQ+j0OJQ9CPPV\/VRnlovdDw2PZWjwW\/udDx83s+diXl5Pc18Z8W9lKeR19dtjPjMfQamY+T29NNKPms9qucKz2NzhTd0eZsd2ocHTv5PK49TbPC49xoeNj99GeGe2nPEVvoGp4aP6DoeCfQR4Pb3No+eT+8pnnHruec2h6CI4+e7Mcar6KQ89X7ehwK\/qcHl4fYyHh3tJTw2vudzw2fbWD589pdPn8f0SqeK299AeI29n2D5t1u9OeUv8AUgOdU69g5m3UkOZp3uWbVt8mlPp0SaWrMb8++IrVXB0tAhAthzNw1nDp1Qsg51sJ9QtwBPIHFqhKCPcIJgs1As6BHdCjkIZgu7hrbDkWQn2CaELPGDbUMQBvKFS0E1QJNAuVwjiCayFusHQ5QSWA2kDSwHOjCLcK2QnqBYshVwG84KQaSBY6IUroQ0QuyAsBpgOdGGYQbhBkLkARyBrbDmyBDMHTgCbcObZCfQJ6YbahYrBFsGNwo2Au8cOtoE2oQzBz5QRh\/8QAMRAAAgICAQMEAQQCAgICAwAAAQIAAwQREgUTIRAUIjEVICMyQQZAMDMkQiVQQ0TA\/9oACAEBAAEFAv8A+GRpoZ3v6ZalX+4qM0r6Y9iWI1dn+1RQ9sq6T3Ey8ezFv\/2gCTi4jXNm4NmMn+2lTMW6Xbw\/+nB0enuWuz77KV\/3KXbk7OmNkWG6\/wD2sO\/S1czT1G\/3GT\/tIxU9LbY6pdZr\/bxHZrsu6yhf\/qOjaOT\/AJI\/+7j\/APfmsKuk\/wC2PsMK8VvLf7f+PgcOsvz6h\/t9N85X+QuFxf8A6joo3b\/kTcs3\/cwxvK6u2ulf7aDb554dN9df7PQRqrNbll\/7fSV3lf5E2\/8AY7bztPO207bTttODTttO00FLTsNOw07Ji4OQ0XpOc0PR88Q9NywR0rMMx8W3BOT08ZBTEw0KtRWtV9m+5XBR07JOb\/jjhbarKn1Nfp1OJnAzgZwadpoKWnZM7DTsmLiWtB0zMafhs+P0zMSL0vLMq6bkY7PjHOq9hi1tWuIkXIbfcGv\/AA7Dd\/j+PembhZOG+pr9WpxM4GdtoKWnYadhp2DEw7rIvSM9p+B6lp+i9RWL0bqDSjomUjNSc1D0bFqajG6ejCzU5grYMFxb\/j+Dkr1LpWXgHU1+rU4mcDO20FTQUmdhp2WgoYxen5TRej5zQ9IzhB07LJXpGYZio2ML+lIhTHwkBtrSVXORzqi9P6ZmDqHQMvHGpqampqampqcTOBnAztNBS07BnYadkxcK9ovSc1oejZ4jdNzFg6VmGUYd2E+Rg+7C4eGjL7etUuflyWCvAvOV\/jvJMii3Hs\/59T2ghxFhxBPaCe0E9oIMQT2onthPbie3rlfZqhzdE5rgL1XRs6jtRmtMg2Wl7PiiqC3hN84tFnCkabFe2udRxas2l8Di\/sZ7Keynsp7KLgxcKDDE9oIMQT2ontRPbie3WVJTXHy1Se8sIHU+M\/Jkh83533WXhHKKoUnyYHUimhnmrUbF5JH4ZVOV00VP7Geynsp7OeygwYuFBhwYYgxBBiiDGEqweUoxcWovkokGS5nvAsXM5Cy\/522NalYNZ1XFI5+5Gqx3Wfuq+P8AQbuV9S6Stb+ynsZ7KeynsoMGLhQYYnsxBiCe1E9sJ7cQUVQW1Vr74w5zIU6qzG\/P5r70kMH7jt3WXitbnt2ABjZRci4+mbGtsQdW6clx9lPYz2U9lPYz2MGCJ7OezEGIIMQT2wntxPbpKhTXGzACc1+P5bhH6iZ708slrL4bDwRU5Nvt7DSuh+CqVOK1lRzaas3Ht6f27PYz2M9lPZT2U9iZ7Iz2RnsjPZmezaezaDCM9iZ7EztztztTtTtTtTtTtRkCy+3iXvYR7DLCeNhlaSoxWbuFth2Ln4tjsngJs0Ma54Cjdcrc8srHW5Ur3OxOxOxOwJ2Z2Z2p2p2p2p2xL3CB7iI1rmctpv4KhdlIDZJbuciZyYpia4qqwpqVDgUPOL9VuSGVL6+yUfsTsCdgTsCCgTszsztTtTtTgqB8gw3vFbcD\/HzYQwBy3fddxCi1tYL\/ACOhLF01a6NVnMp8pW7Mo1Yt+L2rOxOxOxOxOxOzO1O1O1O1HASW3eWvcw2Esx1Y\/wBqnFGY9mpmgfTL\/OwIzumwqSpiBrzUxVqGMysbyKww7M7M7M7M7M7U7UFU7UNYAvt4R7yBZaxjkmt2+KJ8qjxZiwtLbDsWlWjjcRrh8qdpN+P4Stju+lMhEqM7E7AnYnt52BOwJ2BPbie3E9uJ7cT24nYnY9NTUI9NTUPgZ13CXWEs3ygbU3qaYnYi7lYbSrtPjORgTwPi2QxLVPxQWHZs1KCGF6aI0w1NTU1NTU1NTUyn4plXbmyQNCcuUPLX8YNzRNiDZ0BFYrEUTh8Hs3VikqDdo1vquh9tdWHVfM1NTU1NTU1NRviMi3lFLGDSznzm3M2FG2jhi4Q81Vdh+MHkqm4tn7GNvmb5Rb4rfZZQwK8W1NTU1NTU1NRvEzr\/ACbG5NrlzOvo6M3snfbUNorqDiCNvNSr9qzZ7vc8U2ln7o5V6ZHHbeampqampqa9M23guRaSzbZQwX0+RhIAXfKsMSg2o4iBm4qk1oZDFpQ\/FDZ57mlx2DS+vcU8hqampxmpxnGcZxnGcZqcf+DJt1L35MSDDPqCaEUblXhiFUL5r4iaQxBt0WKoIIs0gIbiZU3BkbkFHC3\/AIL3CrmWl2c\/JtT+hAFM\/vWjpZV\/LjKgva0BGU92pYVacWI8kKCDTZuZICW\/rJ1MizlLG+RIEHgIfPgmFQs+LA\/9hUbo1x0ArqQax5P3pmib4DyKrDMsbg\/X4Ay79S5iAdT7O9+jBQOO5VxIYDR+QqUCzS7C8qq964aVw+6xplGjjsyB+NlVJ+P68qziMqznYTuGf0JpdfZTSvxAlf8AHjFCcFHzVTzQBlYPOLb1uVkq1T7B0l\/\/AC9ydydyc5znOX3iqnIsEews2\/HnXoNQiUrLP5INs6gMhAlPLnUvyyNsMRU7PHcG2AXS4LfHIGx3BOc5znOc5znOcyMnnL7PJPldk+iamtqq\/Oz6\/sL+38RPkzsN2OdDERe9xUwbEKafFLLc\/EorcZznOc5znOc5dcJfboMdknkTsMo2U1yT6Oo\/gf0qbr+O\/wCSvszlxCAd7is870d1Hjd4KseJ5znOc5znOczb9DJuBjMWBnnX3P7GtlZUOKnxMcfJlCxGEqDCikALk7eIE48eIdSwceMdgUu+NnMTnOc5znOce0Il121ts2+4NwT+h5UjcqXbWwD5MoiEA08u7WP3LiSmGq8QoMXfEKVOCxEyAGQWTnOc5TlOU5TlOU5TlOU5Rb53oLYbp3vItmTbztyTsg\/LfgfWosQQeTv4f1VLG3F+qi3GpI43MVDUr+RXuFVaL+2xmWxps9xO\/O\/O9DfBdMq\/VOQfi\/lt+QYB6AeW8FfBi\/bnQSVcgUG7QFC11MMg6YLygAKupWVtuvOHFRkTvzvzvwXQ3eLD8Lz8+UB+aruNDDyUptWbUAm9BftN8vsgKAa2Nvgwfdf8DX5obnXlDmgyIL53534L4LY9vN7zqL9Ez7moogHxjmNK\/Aby32BtloVZbWba6vjXYGBq\/k6BhQdWP8hZaa3GRO\/O\/O\/BdMq7cyW3P\/fcB8ag+0G2Hkr9D6q+7G8VygsBUvkgCY1TVF9GJy1oNPNXpnftH3E9xPcT3E9xO\/O\/PcT3E9xPcQZEAMA9NGcYBOW5kHyPoxBNxRB6CInI6An2ABK9mIxaUoDETQPGbHBW2uTorXZudWTdG4CYPTUEuO7rm+K\/Z+kEbxF8nXn0UbhQb3tgAYn2HYSoAk1t3fgFb+VTCN80x7PjcOdXkEE+ggn\/ALOTP734qEfQAOyy+Vm9wbK8BN+YvxgJWV\/bVmfERvuphz5bWizgx8jJHDIBgPoJY3Co\/FbiS8+yPr7mviPQRU+J+MMAG62MrJI7e60UKLSJyCty1H+FyNynVl1cCYD6CCMd2ZB8D6MQQmIP0IuzxAn8oNGV+SjlmoQMFQ9z4cdypgUv+VdFnx6ivLF3ATNwNNzlOULTlOU5Gc5r9LHSP8Y\/8oJscfQCAQSqHegZ\/GDel8Cljr+uSzeyP4k7TH\/jkHniBjFaK8VoGgMv\/lcYPo\/aHQgiia1B9jzZ8jAdEeJWTquUtN+drGbyv8iflX\/3K0zPjlq0V4rRTP6sbwD4lLajn5RdzWp\/TeX8w+IPtDuL5NZ87hIjGf23hh4uQ+eseMsNA8VoGl\/muwmDy39CEgn+xNQRv4r4VtiL8oGPJYPBRjrY1yXX8o5PC47VW+PWvNAaK0VoGgaP4W3+Q9FI4+gE1qDwUh5GKfP8Am9V+FoJ1ubWE7K+ICJikzYNDEhg87hnMzmZznMzmYXnOc5znbnbnCcJwmQuqiSa\/sxfTx6b9Bv03NGbGk2ChIZYtvMiX7JT4gt8Km+f\/wCuFnGLFEAgWN\/3N5P9j7iweh1BB9bnmL4i70CQqEyy0CxN7s\/hXtWJ03L5Vn5Zw\/8AK4xYoiCP4a3+R9A2l3FghIgEE8n0Hiedr9VkkW2BYNwwAxj8i2oh+fVxu\/jFixRMzwl31\/UEH36f1BNn0WfylZO6mO2YIlbmyJ9MGLHfbZ5Wd09V843GaixRGH7Z3PtoPT+hAfQQePT+96C7EBIKzu8nX7t3qr4zelRz3E\/hYv7jDX6As4xpubm\/ThOE4TtztzqK8cd2Ol+v0D10RB9GITysKwrKtlrGJNG+4LPnY22MQEgHR5bTsx6Z2zESIkKfGxirL\/KD0EHj1AOl3PE+W9rxrG0GzC2q\/PcZo9nx8iAFnb+Vb+b6uVpp8doxEiJL9rYx\/cb+UEEHp\/SiLv0O5scUg3FPFG3CQFLftn78sXiN5zU5v2Z2jFSIk6gCJc25\/UHoPPrrz534nkSowcTb5WY+wXblKDxrrfyW3GYicSioeIyPnT2Y1J5CuIkuT9h2Iiev9CD10eI9FJ5WcOOvCbY2PKwe8bPla2yYgZp\/+St9hqdm2j4tUROBiIdpXO1LqdTttO2Z2mnbM7cNc4ThOE68pXEJ3B6D087Bh\/iPDGCATRE1ub+VZYtviafg6sGJdhDxhHknb+YtEegTsTsaiVy9NY7n5eg9QTF8ifYB9CsXyF8V8jPIX7dnVoxbass1ySwxdyirkjUDXYnYiVS\/+TRoIPQb0vyn3F+oPM1F+l8DZg3xbyC43548gYfMfwo2JVXzhoE7ENEWqdZHG5vPqPRd7UxtApD9iARfDVj58jqvkTsRG4Vg+dzama4lPMqBZ+wI1HnsQUzqCawrPUeoM\/8AWGCCFdT7X6is0J4xfFvJXLuwhKwgxz+4NyqnaWY4hxo+J5rx\/K0T28sx\/DY4gx52J7f0M8TcE\/yMf\/Hf3\/cH3B6cjNRT4ETUJ+WtxCSi6ly8nGxKdCXPEbbs6hVbTUeTG+\/QSwbpt+\/UeoYj0SD7HHbmfyle4o8v5SteKj52WWeA4E3xBYQHb441W\/16ATM8M0M\/oGf3uA6n3F8T+431uJ4YQ+VQan8oSJz0o8TYMU7mMPg316anXx+76r6D0B5H1XWtz6hieIE+fL4pqtGYG2pua2OCVPjCGzD9zU6kP\/As\/n6D9AYiaiGDcTjsnz\/KJsoJepaD4mrXK9\/gH+ZZQobzTo2VjSWehWcfKiARlhWEemp3YbhDcNtkCLkCdXcW9P8A79BB6CFZuDYH1N+djnz+FXlCFaMrk1cjF8Rf3AnixawYPvE0HN0N45d4TvCC4QXCZI43TfoPRZokDxBPJgb4v4lTSptt44cWCAEOQ3IODYRxhUM7AK9fhlsAV8gTvCd4TvCdQ13Gn9QeizRMHiDyfJimH+KNAf3BANL5BIO+UYTW4w1BomuzSPeJ3hO8ILhOtsGT1H6COLbmzF8H7iNLH8LrYUF3FkXka+QVdF1Gihr0o1rDYLDeBO+DO8J3hMhw+PafmT6j0WFfAOou9eZyjHTK3xqPJWCsrh9V8u4uwQecHiwV8odBqNB+8I2QN94TvCdwRbPC2RnEe0RrhvvrO+IOqRupqQ+fGzniZ1kGXyX6P6mJ9PocjBvR+z9I+58CoJMqXzYCHfaqj8FLHTa7tl3bFmfPfttc8kNnGDNaLmmZjcr9+o9QTwgnIxNmH6U+K31KyNLCPlYvw+fEMOYcmWkEc+IfO1LM9jEz2nvTFzjHu7s36j0EQkDcE5ai+g+g2ih8xh8gvwTlo65c9x\/4rHzvNue0TPae9MXOaX5Pdo3+pf5MTyhM2SRuD7J0UblNryIJrpWAHncSIr6UnzWZZk9qWdQMGc2\/fGe9aLmy4\/ub9R6knjPocjF3pofqt4vAopJKL8rhqNyUVtqczxf\/ALHs7a2Z+o2cxNeede9i50TMiZfhsyWZksyzv3bCDLM9tdPbXT2tsaiydmyCuyXBleCCCb\/R\/W4uoT5OtDxAYYmyUPm0jfmE6g0tea57mpxmjPM00UPLVftwQfqU+ICNk+E1pBFb4rNEzk0tPxY\/JdgL83zbD2zszjNGeYOUo5Tf6QYPRTPE3P6X6A8qYPo72NiN9MYs\/kc2zt1eZxnGeYOUTlvyrCD1B9QYZuKRF\/l9lfEQjbb0u4G+Nhg+3MfwtzmyzjOM0Z5i8pdyHoIIP0g+ICIxg1pfCg7g8xdxWO7SIdzZEWZzn04+nIznFsInfMN5MeyE+vtFntEhxVnskhwknsln+RYWsIGbgMHrv0B9QY0QfJJs8K9mMDrU2zF9aoVr8lul1EnpSz8WsPS0idKSDpiQdPUS\/pwtx\/IMB\/UPUHUP19wa2h0V3yHgcSS5PLWkLME\/GKUbpVcHSln4pIOlJsdMSDp6y+pqbZv0\/r1H6P6EGoPvfyAh5bfxFE3oLgi6hulVz8Us\/FpPxS7HTEi9OUTr+IcfIE35Bg9BNwfoUzztOOh4Dk6qG4+9P8QnIxv54FDZLHpVU\/FLPxaQ9KWL0tIOmpOrdO3gD0B\/Rv0HoIDGi\/a+CDoVb3rS6hLcmHFFDPa\/TK2LdKSfiljdJSfiFn4dJ+IE\/ET8QDD0dTD0Wfhp+FnGampqcZxltKW15lD4mWDBAf0g+nmD7HpWw1y2E+lZo5245Rvk\/Qcb9s1ztztidsTtwJOE4T\/KsP23UAYID+kGCeZ9wfa\/xQ+eUU\/MlwbG0nyBt2B0fG7+X252525252525wn+TY3A+g9R6KYP0CD73N+fIO\/gNx\/Aw6Ddd2xO3O3O2J24K5wnW8H3nTt+gm\/Qem5v08iD6X7nIaYzZ4Ix3ssfPEeT07F7GIa525252xO3OE4CdXxfY9Q3BAf0g+g3B5I8+lZE5blZgZpafkA+7fJ6Djc7O3O3O2J252p2p2p2p2RO0J2hOyJ2hCZubnKcpubn+X4PcpHoP07i+R5gieJvkyAcjsDwCDBviuwuNS+TfWi11\/p3Nzc6xhjPwCCjQGD036ofVNcuUUDX1G0TsEoSSN7P30nG9rifq3MqpMijIqei6D1Hqp8+g+yfCj0bz6L5PnkZ0bH7VP6tzc\/yfB9rneg\/SDPsQRW1K\/MUeHJngQExgdH66Lje4yv1bm5\/lGD7rCHoP07iHc8weIk5bKgAnaDwCpib4rsStHtsxaVx8f8A4dzY9NiHIE9wIcgT3InuRPciDKWG9GTqON7TL3+geiwTlOUVhpVm9zyYkUGHxNsw6MK8er3SQ5SQ5aT3Kz3Sz3Kw5Kz3QgylgyVn+T447+\/Qen16LBA05eUaAbifFW3PokMW\/rkd9IrU5Huknukhy1nulnuVgyVhyVnu1nuVn+QVrcIDF\/QPQGb8qZ9lPAM1Ds+m5iVh7\/dJPdJDlrPdLPcrBkrDkrDlLPdLOpivNwmBRwYPXfoIDqE+OU2CEGiSdfIwfxUahbU+TnDarGx\/dJDlJPdrPcrPcrPcLGylgylgyVnWsYY2Zv0HoPRYJynKIwgXcBnmJ4OiWnImdFVKp7pJ7pIctJ7pZ7pYMldNlIJ7xYc1Ic5J75Z79J75Ic9Z+Qvn5G4T3txnvLp76+e7vI95eIM+4zKtbIWbgM3NwfSzcBhBlY8V\/wDX\/XnhXua5FhMq0BRlXw5V+\/cXcWybtrl36OXkT3mQB7y8wZVxnurwVzrpblPYjDiZub9AYvoDD8og3KPv7NcXlv8A9ePwtdURcm6NlXxci6Pk3SvLvjZWRBmZAnvbzPc3Rc26HMt1vfoDAfQHyPTfn7gHyr\/kftf5fLYgHxJCK2VaWbKv0uRcZZk3RMu\/bZV893kCHNvnuboMy4QZl0y92tNzfpv0E3NzWoo1D\/GWcongKvzOgb7yLPc3wZNxL5N091cD7u\/Xusie+vgyrjPdXCLm3TIua+s+DuAzfoIpm4DDsysblP8AERf+tOW22Y6iZNgVFybtNlX79xdpsm7aZd+mysiDMyBDmXsTfbDdaZ3GEFzzkxgsaNYZZWItfJmVg7o07R40\/bDZSsQ1gx8RmWb9NwGAwen\/AK1GD73yNZJmvkDqX29tOXOdwicp3Iz+V2VEZPC1+EXzYJXXCiw43OWo1T+m5ubg9BFOmgPgb20WM+g9vdsduLc9zuajvKjueQePKBNH7i1ztrOwSbEKNAfTfoIPoT6aA+B9n6X0ysju2WtxbmTO5qNZKjs+Qdcp29FZw2RWNGrcycVq1m4JubgMHo0r8xNCb8LvSjR\/rLv4xv4dwznqdzxy+R3oeYa4o1CsSoQ1gxsQuCCp3Nzc3AYPT+qj6b3FJjD5CW2cE5mwl9HlO7GeV7ZQfLKCESU18yaRBiGe3UKBs9uLTynKD6357qM1xURLeJWxQ2QwKd5oHtl1C2IfBgm\/QGAzcrgJjbgfyHGuUtRXsqqANlALnGO1xjOwORpKIUURtQmsKzajWbPNHr7rLFssICraltbVt6b9FMUzcT7HiPKyQgfyWl3yRaQpyKQZ7c6bFbm2OBKsc8FCBOK8d8ZyVlrsVlexlKWO0q+UtTgQYDN+IsE3BB4hib0GhYS+zaLSoF1QK+3+NmK22x9THx4qiKFMPxiupFVqqcg8WW5iVazeXjqPXc36AzfgGV\/W9xdhw05iBp2ldlQdv2\/lsZuIxtLVj7ZqiLPhtgNixeRfT2MGq7zCB7NWUrdWylG9N+imKZuV\/YMeK0DicvN4VzXSFe+jbHFM9o3M0DftylPBFDp42lalP2hY5Xm3FT3UppYMQFmyE5EhGMd9zlqLaBObb7\/w5mM5gdgTY8J367m5uc5zi3ahvnuDO+TFZxXzsZLTsu5E04LMy2l6p3KUNzksCGJWqGyuPZ5S4iNadl\/iGOmsffIt67m5ucpzgt1DfO+Yb2lDO8SxmYktVU\/Gkdwq\/wAazaOJakS61GityDdox2TSWcZbad9z4hmjWPoWPsOIrwPOUDQPO5FfUa9RDlLPcyu2WZDs3I6xyeKF3U\/9Qs8bq09tRq5MWPbIDVRX1LbSQtmzzbl3HANrxvTc3NzlOcDwXz3E9wYtxLM7pFdgV8X8i1ibJV2E5Usy207exoOKgdhI7fud74907dzA7RrX2SW9dzc3Oc5xbtQ3z3BnfYytn7au7i080azhSVsUvtHL16LUVzIcM1Y7h7FFjWV1rQERIo43NtyuN7esL+yPNPbS5BRyBpBLVaUUai1gnj8u2tlnbWCsCdk8DQ3LssC1Gh7W3hZTwf27kvQyt2W5nHee28LjrxGJBRUYaKxX5Vd44W+uziiKzXGlgOLA11JYtSdzIHlaxydE5OnCEJp6VRu15Wrm3YYzsOAKPFeNa8enggpYxsd1VqiF9u8XH2Fx9z2+52atUUVqnEVysIVadsA\/t9urjqyisIyUkumlsFfG2uaXg9KCdrz2gzGk6OPYItGxXQ1jditBwHB6Co7fjtfFccGNj0hzTXy4ViY9FYnbCWUaYsEIZdsvbSuvgH7CGopSU4hK+CceAZUCg9pWXtLoooHtn5Ch2C0bY0HYw7OS18imLY87JJroZmFDRsYiNjqJ7dVlWPWbLakgKlz2oy2kVLWsbtC1K0sPCoSmtZ8SeCiWJpmVHY1LzFcFJZew2+wwho0oxbeNlPCdhjHx2QmpgTjtsY\/xWgcfbTsU6XHrWsA1qgx+Fq2bWpZd2eNfF6racethXS9mZsRVq521LZOK0kXdq5rLa2DM4NRpuLHh3e6PwHUCidC6rxT\/AB\/qAb8P1Li3Q+pA29GzJR\/j2YZ+D6hVe\/Tc\/VfR+qB26L1Wy23pfUEb8TlOt\/S8z21PTcyy27ouSQOjZaSrpNr1HpWVSqdJzGrp6PdYlnTjVV+OzseY+FmmP0rKDN02zi3TLeK9OyeP47JtX8Vnd0dKz9WdMzFezpWeS3TMvf4rqAB6TkqlXQ+oM9vQcxI\/TepLE6R1Bpf0jqrQ9F6iFr6bl2ynpOdwHT72Y9HyyqdDzAv4q18hOj5Chel5rsnSskXVdGsoQ9MzAUxM1myOl5YsHSnQJ027nV0zM0uHcGPSs0CvpPUEN3Ss+fjsztDpmaIOlZKwdGz3NvQcwVnpnUlg6TnOt\/SOqlPwnUxUvTcxnp6VmBrenXCfiMwheiZsbpVvfXot2j03NNv4nKS+voz1x+l5LWjFzXOR0zNcDpb7bp10XpmUH9lbSy9LzDQvSs9JZ0rqAVem5grXpeY0\/FZlhbpea71dAyu2nSepVp+Mznsr6R1Raqei9VDnpnUKp+KyVbJ6bkVWYvSc41t0TLNt3Sr66B0a4tZ0zLQP0nN4J0V7Zk9MteHDzq4vTs2yodKvMfp1mx0zIMbp94lfT8u+38Rmu\/4zqLD8Zl978bnc\/wAXnCN0rKCUdDzHY9Ez0tt6fnqK+jdTWyzo3VXst6T1BIOl5diHpWacenp2Tbdb0bKatejZimvpVtg\/EZKCrpWdbKOk5Lp+MbHq9hm0THozHfI6fkpa2GUHtH1Vi3pUEZ6Len5wlODnquXi3qttVzVe3eLj3lrktZLasmotTaW7btf2c4WXIS3dykrPVs0ROq9SDHqXUENnVcq9E6hn12Nn5RsORkrk2ZWQWS7qDoudnKtHUs2pWyLnam5qpb1LK7bZGQLTbcQ2bkx734HqFyUV5uZYRm3CVZOQ7e7y4czJ7nuLrJ7jIDPl5pAysvk2Rlla77nF2bkqhy8pg2VliJ1LJnu8xVOflOuVkZFkbLyHCZHUOaZWbQ2Pn5oe7Oy7zW5DHqOQktyMl0XIt4rlZVVYyG1jZl1a\/kMuxveZCF+oZPcszcsFsq5hZl3tO7k691lq7dQzCEfLJTLvrHvclR7vMZa829J7nK377LarIyLrE93kmn3OdzGRnU2V52ZyyOoZl5VmM\/IX1tZlZNy05FuqsnLqC5LNMfLuR36jlM\/u8lTl5+QC+ZmBTl3spy7wotyIcnMEGflJWbcp7a8jJqPvbwBm5jlMrJrj5mTY9OdmIfd36oysqpmvydG7qDL7\/MM\/JZnZ7ljFcmypLs\/Kteu67kL8juHLtsY5Fncv6nkCLlZRW7Pv7debmMgzcnaZNwDZFzMcjLAqzcqs3ZeVcBZlCDOulmfm8jk5PcbqF7VrmZqR8\/JL3ZOR3bMzIZq7+oEJnZtQxup5tcsy8i403MjWdTyhU+Tk8+\/bwOdlIpyWFadSuqoTqWZY35G9AufkWXNk5Idr7e4brLJX31d8nNjZWa8CZgWq3lMi65MdedtdVTVpUbza9tqGuw7ry85zzsY5ncW7FuMV+zkNfez\/AP\/EACoRAAIBAwQABQMFAAAAAAAAAAABAgMEEQUSIWAQExRBUSAiIzEzQkOg\/9oACAEDAQE\/Af8AENbUKc48k0lLjp9k8KT6YouT4I2k2egkLT5ZKFi4pr5IafGHsei45K1hTcStZyjzHo8IObwi1sYwjyKgvYjDAqKi8myC5PLW7JKbxhFWnziJUg\/gu6P810bTrTjcynASMGMmdqGvcm3gf2klkrUkmVqflzceiUIeZUUSjHasC4IC\/QwZ3EioOeSeWicHKJqNLGJ9E02OauSCMZILC8UMqG0SyjbwapD8XRNKX3spkRMz4slySEZNW\/ZfRNLl+TBBkX9GPDIxceGsSxTx0S0qbKqZTmRYmIyPxYhmsVczUF0Wzr+ZBMhITNxk3GRsZkq1VFOTK1R1JuT6LZV\/LnhkZkZimKQjJkyNmqXP9S6PaXWftkRqimRmKQmNjmXV2qMM+5KTk8vo6KVz8kLhHqERukeqR6yPyVb6MFwVKsqkt0ulKWDezexzNz7x\/8QALBEAAgIBAwMCAwkAAAAAAAAAAAECEQMSIWAEEDEFIiNBURMkMjNDUmFxoP\/aAAgBAgEBPwH\/ABDdX1GXHL2mNycU5cP9SWqUI\/zw3clDN8j7z+wzYM2ScZV4Ixa\/Gx5cSMk7dxZjz3tLg+XIsatkXJ7kZ0SmPK2PNO6MmZ\/UcrIT+o2mYMt+18GyS15f6L2LNVPcy5K8E3e5PyahypmPKzXTtGOeuKfBMstMbMfiyLsnKiT3GyTJskN2RZGZ6fk8x4J1b9tEZbUQlROY5OxzLGSKERPT5fF4J1ny7MffwMkMQmdB+dwTq1suzH2aKGMYlQqPTo\/F4JljqiUNFFdmMY\/BHcrc9Ox1Fy4LkjTGiihrvIaEQjqZjhoikuC5Y2ihooZQ0Nb9+gwfqPg+SA4lDXaY0M6bA80iMVFUuESxkoDiPGyWOTPsJ0Y+jlJmPHHGqjwqjSjSjQVzj\/\/EAEIQAAEDAgMFBgIKAQIGAQUAAAEAAhEhMQMSQRAiMlFhBBMgMHGBM5EUI0BCUmJyobHBNILRJENQkqLh8FNjg8Dx\/9oACAEBAAY\/Av8A9GRDTROxWHMGCXA3+20CGV8E2kUTmPEOaYI+1y0U1Knvcp6tonYOLxDlr9rgKK+yGISHYbjAP2wUuicMyQJyn\/pEoSjfI9pA+2tCz4dMok+ifiH7x+1jDNFucSz6RH2uiJKPZ3md6ftgQxGzlsf+k1WFh+\/21n6k40tH217\/AMIlE\/bJWJ+Wn2wDosNg+8f+kvPID+U0csMfbcIfmCazm\/7YBzK7R6fbWuOpKxnc3n7Z\/pK7O0fhP2iysrbLKysrbLbLLdwX\/JUwD8wv8c\/MKD2d8r4QHq4I97lnEGjpX0h\/aAwWjKt9z8Tot3s+HPKFo0cgt7Ca\/wDU0LLjdlZhn8WGYXedixhit\/C6hRw8RhY4XB8y2yyts3cNx9lTAPzXwP8AyC3uzvXwf3Cbj4gZDTbNVBvejDA3rLfx3O9oW7gNj8wlbrW4YW+M3qFlxuxYOW0ih\/ZZ+xY5YfwvqPmsuPhlvI6Hy7bLKysvq8J7vQKnZn+8BT9H\/wDMKvZH\/sqdnPu4LvcUYYazeO+nYHeDDz6lRidqe\/nDYW52dpH4n1UYOEzDHpC3971EqMTsWA4anLB\/ZE9lxXYLuU5mqcZks\/G2o8q2y2yysoDSSt3BcqYH\/kF\/ju+ajuHLgaPV4X0d0ZmE2Kz4nauLRrVwnFd1UYWDhz6LePyVezYT\/wBbQvhns7\/yH+kX4UdoZ+W\/y8y2yysrLdwnn2VMA\/ML\/HPzC3uzvC+FHq4LvcXLvAgQ6UMR2OGBgi0rfxHv\/ZbuAzpRWDRyC3mB3q1ZcfsmGybOYcq7zsOPnH4X\/wC6OHjYbmOGh+w2VlZWVlZWVlZWUu\/ZUDQoa0OWY5WhBuXPpE1Tg7AbT89l8IuPLou87siFlqQCnfVsBGjpTcSpaTUBUMHqu8wbWg1QZiAhUqzkpygx\/wBzUWkeKysrKysrKysq0U5R7qG7yoxoVCD+wQnAADrS66nuobyWXuS3W6y1tCaSzpmdKdlhuUfd1Wo9ardO\/wAwi7EbfkgcA\/NHCe0SdHWKoN3+NlvDZWVlZWVlWGg681OUOPN1VumTyVGNCvX5LMGUtMqgyjXVZBhuqpJg+il2GXQbmV3bcg6t1UbwOqianhIW+LUoEHYRgo4eKACfki\/DZA1by2W8NlZWVlZWVlvV\/hUgKjAt8gdAsowg8xPFZCMHeNiCqYWbrKzOa5uafZbzS6RZSG4f9hQ7MaUK6ahQKtNarezBwWXFqOa71rWydRr6qysrKytssrKysrKysq6clQNChozLNDGhaOHqi1\/Zx6Z18KfwiVPdloCLa\/JTka2RO9NUcTrBaFQxyld5hXF9VlxBAJUsq3kVBYCRobj0WX5FW2W+zQAgG19bKv8AKBMA\/wABCt+SLzwzCLQYlXrzVZkKXlvJNkZYoeaLWupyUVHP1QIBb0XCC0neKpVqzCylm6\/mocIcLjbbyaBSAZ6KsCUfw\/yVcU5IX5mVmCvMqHyUGmICc2L1lbroMqNdOUKg91mjM4CKrOynMIQKhZXiq7t9fwnbbyMzhPRF2vRcI6IgW+8URmCArU6oXomHNM6KHyREI4bSA0nVGRcRKcc28iSZmzgpj3TQ7ei0onhfqFB4lleFbcP7eC3kRFJRpTquugVx1ko3hQbmqIDohFZ236oHiN6IGgB0QM5gpgnoshmCg3KAI3SFldbmocKLvcEeo5qR5UqgW7X+EQ6BzhadFMyeiL9G9FuyFeYKgzOhUkilAssZYUNdFFlqOaoC1OeGgzeVuVbyQc1cnc0WvG8P367bK3isreZGaFRCSqaKcwcUKQP5UAao3U6BTIVSK\/ssrnHLRWtq5Mef2VIGpQz2N1k5clU1OzO0V\/lSLHyp+SkGeqqVCzOd6BGnujSsIIxKNRRVhbjzEoGHOlG1OSGUelETTdUs+9\/KkmijZB4hfyZUzKrrZXklVeMot1W62U1zhP8AamY9EIkGFkkIyR80ThnLN+izVdWqIoB\/CgDh16o2QeCJ1Uupz2WlZT7eUWz7KllJVCBKhsOCOYKg0WpUnVCo+aoag6LfcZQMAeqc2JJ0VIiwWSgIEiVNuSibKqmIab+VfKqKpVNFOYF3JCkSi2F\/WwmQhmI5IDMcsIwJ6lNedDoqQJusxRaKj+kJd6bJaKiyn7Lumyc415KpqroUsq2QdInkoVZRgUUKlUNfRUqnDlVZjAlXzV5JriJ5qlW39EXfcKqizQ1b5MaqL80QaDls9VIorgAbOazCcy9V10VaFADmvW6rAyrdfSFUR6LMBXUc0Mt2ldEMUejvJib\/AMKLBX91N+SECIWUw2boQFKF5sApEfNEGg0MI5qKkppqi2iGR1K0UH\/ZDRw\/dWh11\/KDxxN8iSnein73PZeeez0soBB9FNFBlAfJArmOaPTXkjSia6nJHK6HwufqEQQYPvC39KSsnyRBsVldxNofIgaIk1AVXf8ApclrzXqpJHQbP9lSTSqIXXkmhABObzqszoCO9mqg6Kg6LdG67Tks4tG8oVOF\/wDP2Rz+VllJ9Uf22G20KZlE2iq5r+lmvNkAJCc4TVGYKy0ifmqmoWYGsaJtp9FBvyUO+7RDJfTyXP0JoqGirbbKhXshT90BNkBZA0pdG6aRJgqSQoaGieiIdqomxonAwR1C3jQhEGzqo6rK7TxuPKi3dbqdCt35IqdFVZeVUJbPui2eq91BhTCAklCSt0CVJRbNERoRqg6aKljRdV008bcPVyJr0V1GqG2RSVzWay5wtFBuiJMKDRaKTH+ya4KWuN5Toj2W6ahS7VZh7+MvNgqmpqo00VVz29VMq3VSDNFRB2nRUkVQcJspMFZAGwnAmCgZqEAYMaxVGTWaLIbNsqKt\/sbWTRtSiSs3LYBtpoPByWqiFCMjWqc1hRDpFbqWUJsm3zG6pyum5rGkKtl0Oy\/hgXdRQKgKPEWm6IR02RJVvRFDqm6ErO6sjRXqBVEu04VlIRIPVBzbXWdul9l\/DluoGqjkjC5IKqio2RZSokq1FKBKk3lNfcKNVXh0VQt0xRSESL7L+F756DZ6+GdESguakrmhl0UQmyoYaITPDZbtefoo0UgAIsJnVQUWHxNw5vUr0XptvsgXQRvs6KJKtVRdOWVl4T5nmOiLghmG+boIEmmq6LOLHZf7C5\/Mq+3nCp4Ouq0cFm0UoFfpqjdoQrvBOzuLpKFawpLjBGils1WeiEmqnl4wPwj+UdFO3lsjZ\/CuFQZTCpZEaqBY0QbFeagn0Q3jAFkdKo71kQM0jqspWU2TtVHhHzRrC6bJVoKCCldFohSCUAiqKI9FvGnombxA5J2nNX0Ub0nqsponDRc08dfC53IIN9kee2oUKVy2Ut1RJE+hXqgj+y7yCUKxyonHDdFNE0Ok9USD0VcxgqlkHBaJrreLEd7fJVKOzn4eq0KmIANkUD81lA6hRw81U73yTy5xcmiVOb5LdzclmMSE0TZO+av5F1dX8ZPRDko8HXwG0rVTpyR5LLf+lZSKSKq2VXn2VBUURoBCLQiNYUH3UX3Y8b3DXwGb+GsKV+FBZxXoVMKbOBUx7qrlB1qgMqFqo5tSnWPJPHusT18M+AkjRQtVW60KGg2Up1XusymEUaSrquqspoiuYUc2wgebfDHMojwU2dNlAqVViqmUGlAQDH7oCNUGio0CjhQN4rZUHupNJ5oELdoZqgbWWYc58U++wDZ18M0lEo6dNnOVZBwpzQpCNZURUKIjkiBHNZXKt1l5URHI\/YSiTzU+KTtoYU89kDdQEwhutJUuRApCcOL0XS6LSeLnzUGhTphEeMt0ifIpbZ1VXW2f2pU0IVaBZAE0kz0VJWblRHUG0aptRCd1Cf4WhR4oVNklVO2hU6IU2X1RiQp5LN+6pzQTP0+HqAh6eONdl1eAiFVf0jWqIAHspUzCbIn0V+koN1abdEI\/dVXy8JWJ0t46220NVMyqqLUV6ISGlbyLRCM71PdAKpo686LK6irFk4dU71P2GeqLZ8dtgVVSyqYlBUPqg4tyqIgo2PshlKhs2VK+izk8WiJRvF\/EfRTPkzs3dnVCDVRlFNVF+qaf2iyyi6bMzKvvKhjIhQKk8pRdHh9CpPgvtsp2UvsqqHVRAK5oH9lCOa6qsttdnpVA+EeiHkQiqrRQSqLnyVo6Ixu81LqIzwr8smVNVWqAPoor4XI9V18F\/DX3VLKtNkg+qtHVcK3iHdYQy3Qa2Zgq8zdZ\/aF0srGqJ57LbbeY3q\/+vECNkobPvAIXquZXy2BCUTEeqaQTKzO50hFramfkmumkI8gjtttxCNGHyDsoFqpkrorQgiFLk18e+iLS7RC2UJrzeOFRMVCaLTfZJ5+Gqr4zTZrKudll77JKmFEoAWUnmnaSuqptttH6fIiEQtYUS5U0QohsKc26IMBOc0z6rI7UVKbEwNU4nWSp6poO22xx6hHxzdAqV95AySvSytogLoc0JUxHquI8Sc4xHRO1J5JpBtKgWChNPTZZW8FlbbbxTyeEfHCiQqrUhGDVXQhClZRJpWi3naqtTNFnN+qA5mqLBPNDSEKXR8TxzaUPHQqaVUKhVaK8oiaotvRCUINEK7sclvUARcBpRMuZojQyVOgVR4iOseOizbKFQVemwBCigFUOtUBszaytdjfEw82eREqVeqkrdcrouCmNFpmR3jmhczToo1uosAFMUC9URCafDi\/NR44lRRdFSSr1Qqro01RLqKrqLpSKLvHaaI\/usgmolZUDclFN9PsF1ijlXyASL22UqpQWqmLISmyAP7QG7CdvVClzuiMTTmuHMVNL\/Ncih1V\/EW8jHjJimyVVVQqohFRA9eShhaAg2YpzVXhZRP8ASE73JWiiEiAsxqQgFfZfY71nx0G23ggq0rcLUFxKKyuibuxtCvsurrDd6jx2VqqFChHYKCqFPmswDQeRRdNUCCqunWiDhShTtz3UwLfJUUcvBdYjObSp8cxTZKkoddlrIzqogeqgZcvRFua1qqXOFE5oJoLlCW5k610aQdFPMx5V1dXVVdX25XGhoiPGAbeCinqrbAJKJQmJ5IaklfWWnRE3J5rVGK9VPWB4L7LrOPvV8dLeGqsoRkmqDBMSiTuroApoAQswkgaI85ihQ5nRT\/qPinxmNkqmyDtrKgTVckECAroqqARIsqeAt9\/IrfwTptrZZwTK5zzRgotAsJW8YcgwfNVkBEwss1uqeF3jA08FNnVQFEla0FlXU0ELNxVRzxlRN9K6KfdDUonQU8F\/DfwcBXwyuArhK4SuAreET5VNll7L1X7ogGAg6gIEAqLDlCB+6uVfkpmZRdFkGTw+Gy4SpLSAD5dVRe6mmyhraUWHeBNV\/cIwa6qRbTquKY2frp4bK3mURlHadZUfJXqgr7HuH6R6nxcJRadPMgoRzUCF+0Kc1uiJyjeuFvOThd2i4qALIUB+JOdz8NkCR5VNlAvZTzQVKUQtuarl7XQM7uqOkrNM6Iu5Vogz\/V5tlZWVlZWQx2j4Rr6HzKLohmKpYoiHGdkNmqk+yMA1PNAJmCLIktqVQKysqhWVk\/C1cKKDQjzOuzdNVMHmoi9YKzVlQZ6oQCfdb1Ceq3dU3O2oCoFZWVlZWTsN12mPKjZ12Ctdlrqq1UKSIRITDiDqqNVlZWVlZNxAN3EH7jzOmwyVrSoQoaIKKwOSzam6G6YHVelViF1hRcKsrKysrJ7mDew9\/wAyAqISiW15owCdFHL9kMs1CrMBGBJtdcj6pmA3UwpLZKsrKysqDwarVa+Q7DeJY4QVidmfdhjy5pt5hUdREB3zQ3vVZQJUQgOSf2lw4qN9PJ79o+rx6\/6tfL02c1zKIauKqIzV6Ic0N1ZNU2RuYe87yGdqaKHdf\/XmnaJKv8lU1QMKuqZhc6n0VvHiYbR9Y3eZ6jzNEEdBs4jClrhRGXEtiiMCyzGgCL0xhG8au9fHZYmB93iZ+k+XoihzXRbpRAdU81AfqoGqIhZeSf2gijd1vr5tvIHbsMb2Hu4npz8mvgvsiJU3VGheqifXqm4LKE36JuGwQ1ogeS\/Apn4sM\/mRa4QRQjyTslAarnzUhVp0XDKkxIRM106LVBrviOq7yH4D+F4hOwsSjmGD5kbJC5KyhTsOK\/ixLenk98wfU49R0Oo8nr4LoiKqCLaqLqAAAstl05LvXfDw6+p8nv8ADH1uBX1br5w1VpHJTqFRoUwJsuL1KbhMG84pmC2zR8\/Ourq6urq6ui10OBoQnYV2XYeY82A1dVE7yzOX9qhRxHHff\/Curq6urq6urq6uvpmHZ\/H68\/LqpVpUKXFdFN1AK77FNGVHqrriV1dXV1dXV0O0s4m0d1Hkx4LbK2VF\/WwZzuBXXErq6urq6urp\/Z3EVq08iixwhwofJ67KKYorWRii3VUwuWiATcJpFL+q4ldXV1dXV1dXROGPqsSrenTyZ8AACiCt4iSpNvVCszqjBRx3nes1XXErq6urq6uuILiCuuJXXFturq64lfZD9LeVOyYUyr+ylxqgpUC6418RcZXGVxL4hXGuNcS4thY6oN1HlXUK8Iw5V4VosuqMqA6AviL4hXGVxqj1xlRnXEr+ZG266KF6qXI5DlHJca+IVxlcao9cZUZ1xFXV13v3tfKvsCvcrdK66qSprC3KELjXxCuMrjK4l8QrjXGVxK6yPUHyZ2HVcVFdb5XuqaKl1xUXxFxlcZXGviFfEKriFcZXGVxFcRVyozFcRV9kBVUq2yqoi5t\/HbbCiy6KtirqVVFxuoU+GdvJV2Qix3it4QFA5bLlFxsum2NtfFRQfMEeDu2nd\/lU8ui7wW18ueSJ+SqrqJUC6nZO2fDXZQ1RBoR4rbYXJQjynZdS5FxUeGqp4bqAq7czVmcUFuvVlLgg9lNlFLaYv8qD5VHbaaISiNFai0RV0KqNVEoSVIqFZUoQrqQoxqHQrK7ydVOZQ47KVVUI1VAhEbImEXAqXKc0KtVLQi2Kq6pdfXWXNuh8q6MnaWiiDgrVVIQVSpBRLypBhXlGBVbwUgqFB4V3mDbUcvKuhBkBX2dE5VC0CKkqhWUlQFRyiFUUWZtFdS1VMYqyuEHyqOqUJNtlEJUKgVIRC4lmlCblUcoeu8wFwI72WFQrmiXCEHLNIRJcqUWitsrhhVsqUVDC4lJ8zOeH1Rd8mhBwa71mia3V1kQ90AGIUNqIsm53Ec0M2Gek6p3d4gLZ+Sl7jPos5BMoTULcsuEEKwCoFMwuJQ4z5m7+6ABgc1DmOLgdFmNgmuBgPqE1zTqnZ906KQHObqU3uTH5eahzqdEAcxARyWVGyVIbCsCdg3lxeTV229VkENrWqexwceSdpGnJDEbYmAU5wO8jnoIWYAv51sh3bspn5rKXC9ll3iFDL9Vmj2Xw4KrXYYcuLy7bBmAk2qmFxzc0IBbPPVFjbgSQhndM2RBrVOqTyCcHNyGPkgc49VMkkqocv3lfDpzUUCoIQgwjvKXGfKtsz\/dTooIoBqmkNdKa4m9ii1xyxdMyWIsm94cpmq3sN2X8XNOOC8ZQJLToh3rzTkF3j24hFqIw15HKKrLh968ahST3TALFb2GC11o1T2EPwzCbh4ZxHOuUcN+GXH8wqmirIMCmqDHOwGuRa97GkUEBaHqFvbrT0lZCInWFV2YdAoaMrdIlyIDgeVYUmyzjhTm0JF1DpHsuKvUQsxEBZMwcellDYd6LKSAeRog066o6xeFc1tRAudiDnuSpJc1vMtQjEA\/UsrXzrvIMidHUv0UxLWncaTX5Jw3Rhvtuz\/8AxVzuxJ0fCkuxMwHGVxudWSQFvGB+pCcj5russiHNbQypZAqdVmgkTfKhvD0iEGhnqTM\/JCXzSeSuD6FRhzTqm\/mspNuaq4j1at0U5oOc8V0CEETMQgXbs2kGqzUI6JoBBJ0UnNAvRGc\/SGrcLiOZbCjvDPOF8Wp5Vaf9k6IP6dOqOYZC4EvmgK7zs4YGtpXX2UYrjFxoFkf3xsQDUD3RjEltQJCa4uvoSZCGUh7eUS5ZRhaRoFniw9AqOFdMq4JJ5\/8Ayqac53tIhUitqrK2cyJNN6EZFlOY\/wDaobXqFmdjEAGIAW7iS5El7g38WWhU97MXAumkYt+ig4zgRei4sRw0yiq3G4hi9FV29Glv\/aznGJ5Flfmjwu0huqBIIe6ma0j3Udnybpvz\/wB0X4jtx1SAIRDu\/wApndBze6hr90GYiyzF0EaElCHt6g1KaRgwJ9FlcILU2oBH5VvjN+yLickdEKjrVb09KoC09UC2oKgk9d2yhpzHlqgHOa2eagH581uiR0qqOaiOGOaBNjYrWRei4sTpOHdfWOcByiv\/AKXxKctUCMSY\/EIKh7DkFaC3VDNlOI8cwYTQXNBZ+Ef2szDiCLlrv6U4ZewkxvaoAupETZObnbOnJOyszEfeDVmcwNDgnNEWUTLf0qA3KOYk1Tm5505K9NaouYDAUSLT7IZ5b7Kc0Hq1ZogBBuYFxE0W6QaSodunkaIDmiAQ6K05LMS75LeLxF4bMK7g3mQqYkdXWWUYtdZ4fmsrbzoJ9uaIO5htrlcYr6KWBow8QRGWT8goxM73gUh0fJBuKcYubIzO0918R2ITFhWECXuPXN\/8CoG4kmmVk0RY7BH49KIPY5rS40JeapxGdzgauACBxG5HzSOKPSEI+k4ktiCViYjnCugNG+il72vZlmQ2app7onDcOBxQIwXMGHo51OsFbhxKGrbiqdL8KhoHVCd9Th1tvWUnsuH0c7EQcN12lbI4TWsexo4mmPZBnZh3haN4RH8ol7YmvHC3MIEcW65BmL2dmFJytOZPjB7OAKS9+i4GOaRodE7FdgNbyyuqszuzTiTeY913j8EtYP8AU5Pd2fs7YIn6ymVDJgRq7K7dlHPhEnmaoPY3Ew60g09V9Vgt51M5lIYzdHoPkgx\/ZGg\/\/U1RZ9FaKfdqpOFhOZfKRC4Zzc3QnMxIGc\/dP9rL3BeZ1RIwa23iVGNgTA5\/2mhtgaUXdfRuzvpeIWRrWQ0fiXwGuDbw6E2cBrp\/NZOEO9GrPR7nGIN\/moy\/XOsKuQL8LJFOKE12GwGKcUlQ7sYyxUl6w3YWHhPDt+XOhDK3BvXIdU1p7PhiKznX1mBLY3eaLB2fL6ukJjcLAJe10HPYonE7O3vZ3e7fVCcIltountOE4ECrmFd4GZnD7zjb2Rb3TBpyTxidkZij1sv8djuuqONg4bWj0upDBhx91tE3Ec1sDrKqxz50ug13ZHRfiKd9W1rT1zI4eHh3vDBRNIwsAjqKrK3Aw946ORzdnDnTbNRbuCGwKjNMrNqOFg5IuxJa7Sd5Q\/Bt1WZjASKyX1TY7HmHVwWbCwmPDnRBdaERl7POuR11ld2fDkmZLl3bsGWCiLWdmibb1AnYXdE4jXTanoj33Z8MU3Ax1Qi7unQDMTKZhnBObLdtCETkOJl4Q82RBw2+sQT\/ALKMTs7MYQKSjifRmGb9EX4OG1uU3hAd23DLb5fvJuJDefFMLvCHGTZU7K6HGwJTjh4Ia23HP7I5G78aM\/dZxhYMR\/zOJd53GHJpdQ\/BHs66xP8Ah2sePzymtnuwV9YwhoN5\/pfV4efDtMQqsrbjoiB2fMRTiooOC1mI0Zsua6+D2ZvLfrKc92C18E6hZRhCT+EyIQezsvydHsmux8E1oA0If8Phd3mqXGpX1WE5os3f\/hOz4FOuqFMUA3aXf2gxuDhhsxETCD8gqeaDvoeHhkDh5oMHZ2h3pK7p2GwmN1+oRbAp+eEGvBlg0ogW9nJgVdZMy9mh0zXEIWfFDQ6abqfGEP8A8gAaj9TgQDcUWY4DIPXVCezAg2JxE7dAI1Ca1gL8wkmYhNw8JuZ98sLM\/DyyK70IFmCIdoHSU7veyjDbPFmUMwcDdEZnOQyswy06NNFnd2doDBo6qJxOz5n\/ACR+pytbczJ9k13Z+zAy22JSF8Ad4eMsdT3QLsIma1qAnlrMRkOu03KluECXXcTMr4bGm50H\/tHDxOyNJP8AzOSy\/RR6hZ2YLCw1yFsLM3DMO+7MAJ\/eMo+m66f3TmfRcTFKM9jcMg1ccqaMTs25eOKfdd3hYbiwO+4wLJ9E7K4u5CvzXcs7Mxsbw3qBf48nUZisN7cKWP8AuuMp+9juxAN5rLLvD3opDi5gJQ\/4cy7hzXTQOxYzfxxqmlvZsR1IJxEWNwS9x5mE1hwS5oMmXp3d4LnO\/wDtvRz4WLbdBE1X+W\/0QA7SSEcvaX5eRqg042Iz0TT9Mc71Rd9Kc2V3mH2l7j+pOI7Vjtc7k5d2e0lzPzVWR2O4nmifpBJPRA4mI\/5on6TiEnm5BneZlJc8SIkFBje0YvPiQbiYuI4eqyse4D1UBz3LMXkDkgw4zoTvrnH1R7zFc6eanv3z6r4jz7r\/ACH\/ADQzdoflBXx3R1R\/4hwbqAoZ2h9Oqytx3BfGd80HDFcHItOK4dVTteJEzVNPflpHJA\/Snk\/qTe87RigttDludrxDm\/EZRBxjlOgQce0OpVEvxHFB30jFAGmdOy4xLVmJdHQou7\/EzO\/MsoxsUt\/Ui4OdJvVH6x5WVrnNEonvCCVlb2jEyofXOLeSH1rh6LL3z\/mt3tGIAORUjtGJHqsrcaIU4faXNKyntD55rdxnSOq3sZ4d6otLyUXN7ViCUAe0FV7S8+6DMTHxIFocs2H2vFP6jKz9\/e8ar\/IcByW9iuMeyB7\/ABWx+ZSzHJCcZMeqzHGxJA5qW4+KZ\/Osxc7NzlE94\/5otaXNlZjiGQmhnaMQTcIfXOhEd45voo75\/wA1u4+IPdCO0YlOqyNxrrN9IcH819Z2h5cVTHeZ6pwfiuI9VJxXOBQIx3tIsiD2klQe1PhOy478p\/MsuH2vHGsZ0HntFRYofXuB1MIYXfkhHNi4jXHXMow+0OJ6lRmJRY7ExGSZus7e0YtLbyjGc4+6H1j6dUILiVv4jq9U49+8OFlPfuzKrzPNH65\/zWbv3\/Nf5OL81mOO6Y1W\/jGEHO7U8tHVT376aIZcZ0eqzDGePdZO8c2f3TY7W\/3Wb6S4Jr8PtLyf1LP9JxmvjRy7v6S5zT+KqOGcdx5dFm+kEmIss2LiPIPVF57Vif8AcizvZCa8lw9Csre0Ylb7yDHY2IW9XLcc5s9VGd5U53NA0WU4zgDeFH0h5HVHvMRzh1KDu\/eI0lZe9xD\/AKlPf4nzTmOxnZCsrcbd9E4s7QWA3AK7oYmJOtURhF8+qAxHP\/7kCDVtqpx71zCamt0e8x3PadFNZHCU5peY5lBjsVxhNxBot0u9yi4F1Vl7w92v\/8QAKxABAAICAgIBBAMAAwEBAQEAAQARITFBUWFxgRCRobHB0fAg4fFAMFDA\/9oACAEBAAE\/If8A\/DIjw2mOgBUDl6f\/ALTBSnmP3uSfJqXZYRwn\/wBfBm1DeqabLeayQqg5VYOEev8A6yQ2suCnpco0AIiPSOv\/ALDqwQnJMBSnh0\/\/AMioGxuF1kvMbhol0+f\/AJT\/APCkXWCHmaHnjeFZ\/wDGf\/hfIo44uDgK3uviX5tBKnX\/AND9UCtlRCC0YqDTIF+KrH7\/APmr\/kIK1eY2g1vNYjl\/\/g8f8ygBQD+YRXWS\/wD8p\/8Ah9+CHDJB9v8A8h\/wf+DoPmJCqRxXG1v\/AOh\/4Isq7Q\/EphVcP\/yH\/F+pEDCpQR\/Ef\/wT\/wDDraBS2v3GV9AXQ\/b61\/8AGx+rmcyIptE\/b9a6zEpzj\/4T\/g\/VerCUkc4fdCcypUUbE9ypX\/7n\/wCBPKP2if4x3KnzKaun7f8AxH\/Oy8NDSNJ+T611\/wDL5s8medPFPO+kE5Qm6EIPBOPabEfZ+4pXyi\/mYyx8N\/Mq8eVTvB0v5gFhFalPMd1xgs0RtYcaX9oG8Tt+7HUbGqblGWq5Q\/NR7xnp\/wBM5IUfvdM0krdJLS0plSpUtBOJ4Z42HVCLoQmwR3k1f+HO8PYP5iBa\/j+yDYf2Zkyh2l\/MKsPYuvtLi5ybeKI0JY00IRWi02H7wOPfV1Bcn02vcoyqdMvnSf4POUmU88voZbqWlSpUqUy\/U8UF4g0I4h9BMOY\/MjsHv5z9jOA1\/nmB3R8K\/mahngfzOqjirXqGfkguqzqYAzhH83Ma8ZNv95aADSD8IX2PoY8YPH6DO8N3\/aJsh8Z354+ZaWlSmVKlMv1PF9EJx9G6P1EX8IBbNy\/ZX7m6P8eZzVXQf5ikW+aIh+OIE2AbBfESAVL5GdrMT8rwfaB+eIQJWr6aoFS3DLwL9yuW+Lx37RkQ5sUfcXOHEvLy\/Ut1LS\/UvPFPDB+ILCOIReR9N+7TKI+UX8zffB\/dHaQnHfQfzDQYisfM028Znm5gA8HL7S8RvBuvyx+zdNs1vr5JiFGzfjECj+jfjScNZj\/XKZTKlSvrX\/GvpUPo9Cbek8KMT9MxKBH+pCiwrpfzGFdykOgHbmGhf4zFINmizPg2e5mCYo7Pghl5Hak8sZmOlgUqNN9R81gWil5b6lTZIZz8x2FhFlEyVcarvxcNzBbE8niUnHCYPh1Hby+WE\/3iFGg7\/R\/UbMhp7O4+EfCK6luoeP0Bf8ARiQGCvQhdVP2iVVe8mN4FybghiuWV75dt\/ZBKYXwX8amVZqC3b7r7yrqTatK+Jq42RWaOTuHTM2sln6lDmLw4u6gMDuBSWulm3Zw1EENLpj5mRNHHL5\/uWZwyUMxLPPLpj4Rk+EX1LdTxQIH6gAP0DgvBkZ9Dn9TCO42PtqA1gNHEtTls8TOsuqDQ9riKILtEaXwQss3o0Y0O1sePtNtI0O17zLjkBgF+CKrYVPwqeYPYE9h+Jj5S1DHJUF2ylGhryQKifL167IZDKNlrw9zOi8OTzPEfGMHwlupbqM8QD6EIBkExD2jz4hkwT5qNDZoMQtzs1aSk8mW3GABoOHl\/iXo+wX7VUOV28Rf2gUascLlKXSALD8ShttJk+5M3HRPWf4hq0b5imu7mG3HDHplxTRd\/I7hnwZ3KPni\/Xy8yryK2dMpFYfpAOoCA\/wDBEMOD\/wA0OSBsbf8AU3Kd8\/eUt+0HaHtTiFOhcNL9G4wuAWuz+CF6klvpe6yTS8uld\/E7tUoZXWvUZxQN33SyhQXHAfxLpdfY3Ufoa2ly5\/JJr4rmWVeX\/VMVf3lBcS8rZ9z\/AL+l6RgvqL6ngnQR64x8c8UOqL4hE6ZTqJiOoiI6leoDqVgVsGjZM3EgujeHt3mKKqButmKUQ2C+iglthXg9YV7DDWX+vcUEMtq\/iZPMLFBTvLsuZLCtOj+pyA3NvvxAoWB0t\/lgcIMH9JshM7LDIM1mUuXgS3i8QtG3zWZisGSmopdHfzHiI6iOoGDqgeoA4lepXqB6lOokW8S+ZOLhjYHX6L+YNiw2OiFoYJy+i+5xtmheZGwLP8zMpRq\/l2+PUsBdV1ergTANarEuUSXLtv8Af9RJx4mtXzAA2tFQv\/qXbXdyvKHVYrT6i4cUF7fUDnWciYuIvcCfqZS9Jf4D8vh8\/uI6j0fSHVAcQPUp1A9SvUpLe0Cx6+f6gGlwOF+4sLDgXqXkUMu1+eoykeaLub\/b1D5lHWduLrBiWi\/Ny1B9BwFYIhANt8Vgf9zNOpmLoeLjblaxmvX9xra7XCxDDeTgMTID8D1\/VwpwldRuv9uUAxeTDP8AaSMiB1Vz8+IjqI6lOpWA9QHUr1K9QP0HefEsZAODfx7Y0DDtxx8Qo0L8x1G5vlZbzkiwCwX4YBK0Vri\/P8RLI5mf1C4KDV1zEpaq35dxuoCUtv45j+2Rb9\/7mJhBxpDuuoSJCOOVRRiVUaPbqUV5JjZ+dTJR4UhKPbxuVUD+P\/cO6mU6lOpXqB6lOpXqV6g9TGWZAQXrje4WA2z1\/nqeQBdLA0FxXFctb+Y6Ok2PvNmTBnJ+JbbjRnR1KKXBTxGftoUwpQL1icsuebTxNZhs+fmGJC8X8VK9oXT2zLF08wQGqlOl0SnFlU2ZJdaw2DvuXBjemj0lOo9EpFI8U8UeqeCPR9AQHRA9QHUC5SI+ghAfQCxhZLVpxfwSm4L+piw73bz\/ADN+poXNBobb49\/EpTcNV8o0GYWv+J\/QGanvDhcETkLRbn7QNAI3dsChguGpQgVrGI\/2YDm2Ky\/Hu56MCuffcFlD\/L5mX5Fl1q8PuYRylhsjh41HDDfhySpzhies9YeMD1\/wgIQLXA7a9zLZ5Cr\/AKIujCefv6mGEztdRpQ2V\/LG2xrCONRphNvhfc1BT07lIqvCax1GsDTNtGJkt9Ngu\/FSyBPNTxG0EGR0fMs2vLb\/AN5iJoQpuxzFI9CP5zNSINA3lk9ThwNbphFa+4lwvnk6Y2x8P9p6T1hnqV6+sCEM5XUpfLQqvX9wTOtqTb4DfnVy1wQtO3EoIFDD0ZhZJS761KAwF5f5jf5phJVoXu8VGYOmNPtLmFCgY7faE3PQFnvxMjKmC\/8AOpWEZYRn7IldbnGPt1DrhDHPhP5lrwLs7ryQxLtZxc04niLPkT0nrPWev1qQjFjf6O4AXhjm+ViHbBzxArF1o\/2oYHeOpdmcV79QXrcVrG4m8Cu35h8g\/wCIC7egrb4+ImRXC1276lDjDTlf\/ka0o3QceK5mNReebFlgOieS4uLINFJj+ogduqK\/6ga2GE69QDI7YlAcp1wfR7lT0\/4gCUiAW4JfWFrJdH9zsNaLi0B05+3\/AJMA+5fMtUaT8Ovib9At9sKFW\/tORb4ZiynA2249x8SaLc56h2A+yeahPBrvMCgnXUc\/MrSdDe7\/ANj7zDWeQ4rDEMzOH\/bimTXFc05eyeUKFX+zM5wfiVipueeoVI9nT19Hr9Pp9Pp\/wBBBJBF+jEgQJfqi1X+4xKl0Zkb7Zx+I\/ATQS8CnovMGAIq1NQEVuFsnuW7NealKAHVnGJeE1BvuZhprXcyDdZsqqmNtw0P5ioZK+8cwYVBfl9QouAnj\/XDAVnKdieGPGROSpQ4WYd+EQBKS7deyYm9m4HP637PoVKJj6JKlR3yF\/EKNoF8PRDUKLqkQxZVb5ZkW3S74lsgYUdy2vJKXfqOcdYJWpsPWFiiZBvOgoiMSjRJRG7OCtwiNzW2LrJ0ePMEbEpVk+JZggs+f9cBu4wBzF7SBrFJQRhxrF3EXx11ZPfWq75JoA\/H3KmJRKJUCVCHli0NrZ8QFPjJdwrQOaZqKy6qqj3NQEr5ucIBbXExQsDErNzxveoCxUBxDf\/spfI5i5OSAg8nu\/mPODmnmcBHN8O5pAN34gdDe2EHUbvyf8RYA8txXi5esp0S6+COaa6rw1KXYU8SiCafpiVKlQI2MAZYoV0cO+pYFi31i3sccn5nBsqkyOMvK8TTndDLURKUy\/dUELZHENBrYvmoDgbT15mbHuoVbpfCZ4W1gFEKG3BCEME7W6\/2IgGSUn3llVYb0QeLw8nZEOlmg7IeSWLvd+obZoqKrYf0P1xKjKlTKOUW9MS+6VcvMO+6+vwjLqzoEugJ2ZlqzQLIYg1IrFuYF3Fu5U2LTj+UR2ex5uUcOquUxV55r\/MRaeqC2HmdfbOphTwPcxgKr0\/4h7iGhV46gaNAcPSPiN109T9YRx4Bevfca58eSFfLw9fVUxKJUrxKlSpRCoErKdykr3K9yvcvLp93EUXzGkIrq9JTbbgzAtWjFwcU349xKO5YIMjnpgtUWz18TJR2MuO5VaYNVn9xloKHlcsShwar3L0rnmEY4Np\/uYVmSc\/1GslelbeGWNt2858Stk6k4ffmZlelXs+4qMueR9\/iNXdhZeqUb9oJTKyncp3KdyvcD3A9wFZkFeiVkajl7ZR87coaTeoLcObNcXLBR68QGQYVX8ywKXq+0NZi9PfVQFBSfP+qWu8Iy\/aCirI3f5m0HJ+K\/MS0M6uLvEFcA8wGBAYvXmBS\/Z2f9UViA3yHruWCwTRuCOOR7nqjPqILs\/kcSvcB3KdxPcrKXuKSSqn3MUrcm\/qICbyXf3j5eLxyY2MCdd9w0s07lqQo4\/G5yW8tHMOw9IPKzTrnE4Yq6Xf8AEvqGc9pnMsCzB6jZlCseOYW2g0yxusrFwQppvThghsuYJvjoHEr465CvvFHBPfk4n2zniWQ4WYrAdyncpK9yncA5Lc+iUApNO2KHKnMQ0EOSsQN3qHtf8TX8pVqBWeIRYeG6\/EIFQuq89QZDoeal4XDtdQBJeX+5lgBsCb7+8787bmdDR3viCutRWMIlhcuzKe40tZtVn\/kqYHaD\/eYgFVBV4rX8wXQUtqeJVXrxPNK9yncpKysXTDbK64GyeZgDWsNL+J7hVtmGYu7rxKrLMJRw5gYha66+Zb0C8MuohSgw\/wDYywBXF3DWVgBtX9Q\/k5mdQK6HN\/OptsGBjC8beh7mO4VM68ERHA0fzcTYSwKAimSnfUuabL8Lik2vfmYjTkeZXuA7lZWV7iZTuV7lO5TuEA7nlntPLKDc808s4xHjviKC4q5mbaVKHDH5juxDAR57gzgit0Vs\/wC5TJoGHkxxLM7PXEN7wqdxZ0nPLM2UKZlQi8UtpUJC2AC\/5gLLYH7ZjoIebHUKmYOTzKLVsDpmFoVQXaSwly\/KPYsv3LgeOHd+l7Qxu55J5oiNx6\/MsHMMR7+2NuBxL1TAy43xA13OR3LAEtSPEwRrH\/su0fDv5l3H7wVP2OOo6bcuUooLbr9x2I35XKPuxjf78xcaG7Z7nMHIQBu2tG7IJsLjPBUXPM08nUDBkQkI8sJHnHzlvMrbcdJ2MnmXWOEoIAxoZkKYxjniBztncKHLOMxpWGp2UNe+ZUGorWUVvbEtRc1xPgumMy9HifLGvMpCPW4jsMOHcSOysckEMlFpfHiBXZwz\/c33W6F7iCpDQQ1MoArT7J0NiRe\/ojzj5yzmeWUrgfZNszLKbuphdzf7TAYLfxPJ4jR2OJg1iIV3lS+eoa5bxMC370E6XHIiuD8kT\/IOIWgIKyWlycZS\/wDuKucUt3ODx6ffqINVeSDLBBisrcAwXXn\/AHxFN4brxHtZVfBzCK9xKck8kPOe823PJLp7PWERWmMBg3bjPMrlorc+54mimjB1zFAF6EwnmLEYDo5iu9gnBDYvHbxOQK3Zvpi42cwHRp7K\/wBcwiOC98eI1ZVeHR\/OpsLuzcZY5q\/NQ2GuoGedy8ELMq5laGNHu5oC+lfqJH\/toecIX7h5S3cv3Ldx8pY5l+4PuL39ExuU1gi0FGmIwb0t4MH6j0u9ZM2QV53mZIEq4MnoiBoYZebK2+IeUJpxn9QZsv0YJiaRihgGhslc+LeZ0hzfqN2VWccxpQdHge4pSluy26xLtbk4fEdtyW9S+pyDEUsGVbj3K7cO8hELBgHxfMr0Al5+0TDyhs\/MF3O5Gy2XhYXtX3\/4jbqOEHjzMvwY+guuU1EaAtUQNuM8TC4GpgLtfBN7M9DcWmzqCRvHf2lGBgYFgFFCgqIw+V5\/qMCw3X7fMXW7dys+GGa\/Fnn6cYqDDHBHl3Y52vcdlCjjzCziyh1nqZpQSmvUbScjU70FeYH6Rwuf6TSYOnfcw56OGoUbzNXbARDxDUsBoAbNzEYt3PNnojgMlMIW3CIUPTNHEbW5kHjdu3mUWKpBSosPgwwvu4A7PK+UuABy23AyLVbRGBUy9xWXYv0mdhJ9pZjg5OOotNUKxH05mHuN3EhcDPiA9zgYVZuACqsNx0dVAthCwU8vUuByDx5gPGEtyBnzK3l4oqDU66dEqXnBOAPUAWTZSweC7x6QhtN1zXUTBdJbEBlBg6faKYgmXMCVNNn29xCvYYGi4WmTjvkjHu1St9VB0csJ6j8wKZ2IzzC4IWHQWDXP+cx06XNDi5ucviePc46wckAbOd4luMf1AMtDUwaVhnIb9YqfZxBg95CG69zRIP8AEBZNrhLWDqO9TALSr+P6gIu9LVBh1ddE0+2Cc7NplDLVVZN47jNAW+oKnIFL4l+rNUTuXjtQU8k8We09oncXCoLIH3AXqFdSyWdRSH0SmEhgdx3LePF7m2MwolVhXzmNMBoMS0A\/MISgfMdC4arq4KFqzVELSUteWZr8vxLTgBRvmGOGwXi5h00APMAMklrzLtXkjJsyOKl+pB0m54aGw7lq4Lpclx6l5Re4DW5MrfRT6kEd8wr7S+nvzMZFSQMMAeszDZNObmLavuJXCylMBx5l79mbuGALw5asjUOMPmPjWseSMO7vnUzvoDxrMfvpxwhcWMrwdBVXEdQuU2Jr+ZjsuLUpCyBr\/ajQcDeOghYVtokaA1l9yLE+quUN1N743mJZPmU1T7hcCVV3U3lPdeo+tMSza+GY3Dk6mKGs2dy9VY8cEttXyU4SyouzafJHI\/qJanv1nibgzw9ZiKPsNQTUh8FWpho3w91BrkX8xty9ZP6ipSuE8+YJfjII0XvfhSPeY31ZhdSXmNxZtzaZfrxLhpeDqUNi65gt2kNy1o8wYaNRa0C20V4lyBGm\/EFDqVvUwWJ1GFh25izqlKjdxPJuYG7aqOwUQsSSOeiwaAm5ODcZjM+tfxM2uyw14lVXFRxH4Ah94i8\/RX6VRfUdWVWr5jVHzBfk8wM4mJ1ZXziYTyagYou46Yd7zKLFPmO3Q0f9w5QdV7hFKjlO5S3hIWtAAb48xAJub1fuZAFSW0lwWycWzmXh1K2tsYa+YqggLXGd3PUehqAMmLpc\/eAEqhFd\/aLNryR0alr9h+YkOz6Xml+55oySHl9DWbRh8PoVepQnmiYlMz4uGSKwwTzLgqrhsjVP3jDQpC8Z4hYAnBVxLKWtnZeHwXPYBpyxpKHBuiHqh8xUIZ881F9rB4\/uFzbapSSh24AuqxL4bF2vslVJE1Wn\/uK3ss4jVSqL+foYcfVeOVF9ZjX2F5uUp+ZX0B1KVKpWoK4OI0rZti9wt42Q5N5ZKdRSWC\/LcRI1RGIEy88YjGVqhXay4eYWxgIA648wWAvGHUwBHNP14lrgGWxd37gIV6LxXLAxrOeVIPGlkO6YGJLhljms\/EcLg+s2o8N39pn5n\/yAs6hUxHLKvGLlHDE6MR6FN9yx6hzsXg4lhVuLmUE13GZpfTWoZMmy410NOWYGB45iAAN+csspT4Vio2mEsf8AqEQXeQcMpyWIYZz1G8BYEz5mUN1XqEjyL+fpHiG\/p2vNhJjwQHDmJipiWzCCrhjIzGS7OOqjnNQN04EoceIvxAcNL+oMlLOSv5l4V0\/594kMhl9eJmxnPaMUFmPUIDW75\/xOWIcujHAq+F\/MsoXgc3vCVPvTCamE3PzUz9PA+YQUah+hR6ajRhV6+yYTxqBthZvPUKijmFYppuo6PMuCkscmWUcS9IWxjmU2cPUAtbmT3LJdLVi5dgXRm47yN4\/6mq1ZG8fMuXG2OK+UKNdJp4TmWasFmvgRvCqlaPzObuddkQGStr5n8je5tVLhUJZMCJN\/8IrGvE9Yx6RHURR0hnLKsrjWdziEdQzi5gVmtzW4fUwGKfM+Dm3zDv4uJ8yFamiuzL5zEM2A3Z5lKGV3e\/EpHoP8yi95R0WWJcUXXTLY7VycU5i7I3yL\/wDYlsACz13E4fZRycQGGEPS5fqKBUC4jTxzLVyimzSY9xZqXnE5Z6QwTA3uZrn+ucWGJchB1uYviz7xF8rZYLoHCbjtq4UktnMDNY5nORhCmjSod0I+wQykAIG+sfqBipiyWGVTCcyqIUO9y5QFbPc4gVeD7XKOVXzHviBcReo7xEjNf0SxFZvMHzhrVwZzzLmcP4hrIrUd3V\/xDOHk4iNitQYX5lFQyVgN3zC03WoRHYYZ5lHGZ3MSlJeAm8U\/M0gY\/mVpbD+YstG7DxEoF7GW4C7v3UDGl5A+8XLNDcv1AuIpxE6ip7UUi1rEarRQYnP0czJu4ZKg50QT2azKOjAwL484xHiE3zz8SotUHMwDQbM9Skso1QXiWTXCv7RHYYZJfxNaIaWqx\/qnti2u7llcgBcOYDkkovRvdzBspbbx4lUbzx47+8NbLYK6l+pqCIOo0QeuJSVfA9TVxlzOIH0dIx7zPiPH21KAmnZzDul0+mpRjq9QNlkViPkbzbLvIA3ftcpFOWviaR9K5mLETIwuPYil2fOSGITD57iHFuh\/PxLBrVLvuZtrDI4ZdtAbawOMkSlcriaQ6PBF6ROYzNR8gwxJ1PDPHK9kQynj6lZUbWH8plHbmUzNsVx19EIXmABsuJVCNVLhYJ5i8wBeS5HMUCgHHEaKp\/KLKDbxzxuYVLcfmc1tOdsWAc8s74lEUtDjx+5egNkA48xAcpmmlEShFUfLKmPAfdl1HAb\/AHArUdxKQWahxdkQfZjHbGIbLm4qKhqJZUJS7lEOaLjkWkzLP+gibM7ymoUjpav+J4ss+bmB2fxOfac1+plTRn1LLg1xZLAMMZJBjBVLJtQHOM+IrMGq5RuC5bPW4+GlwfMQoDC\/YmKs2nESnUTuodkuWytuHL5TlmYG4MXMuJQLdamal9EcMhiUaheJbbwariU8A5wTIHh3ibj4TNbacoaqwmp4BW9xBBNc8SgVKOIIXPJzClcVidzDRsMXE1lZV7lRyZQb4ZQ1KQPUr4iivAcfLNXQdwoMQ3cyjuULOHc0F1AAWNygoNsdZgTdDmJ2B0TKju2HZDyF1bMm2UMASfPuOk9tbixQroww94Eq875ldjNGn+5g7KbVDREBeB4JLJBKGddRKzu19oSG3XxCjULhKpFbqU1jB+YnHnuADmOSopxEWk4iDfMA711DCg1E1Q83FpwHfmA5A87YmxfBK2Lt95auoV\/MToUaJdWOeZnVWvL9Mq3JkHdNyiaBg2WDdwlnCOAFzF1bqE3sV4+IzXQ3XMGg2Iw1AgsiDxqD1DwhsKUB1A1qJYsiKiwiIWEj\/wB4SXiOIfRSLsi58wzDcbOo0b4MzKuBxiWrYstEtVTme4pYunMMhZPm2I9GA0HkbzFvwo4x6jV5GicJ3KrnRQK691MFSbTsrqUqwq3vdwCyTVuYWweFcQhKcY\/H\/cACVpKIhMGF1a\/ERzZmvoIEUNwbr6CcF+CKtiuWLJ3PBMQvTPkiGHdqci2kdmr9ksI0Vlv3A46c4zKDzb4LuE3sir3j7k86D0gv\/Qq0dZlRKAN\/Ey73oQlSUKZDuv8AuAB5ZScXKIVlQGWc4vWyU\/6hsyqrMVP3gq4HMTZuGF0xvzMlCeyWQYvKZ5\/cVcsFmngxLsZIHB5QW4V+5WHC5qm2kr7\/ABBUBg18dw\/AnERkmRW9S5xRvGoCsVePiEabqUvMSiA3BP8AQFl2WfmHNsNxRbi\/UHm8xLv3MHsLrzLEzS3BBayV3x6lF6O5cHhz5iK0OpbNHet6lUUhDi9R7rLKKzbzFFNhZrD7zCrXk\/1LxvA1tPMp2tGMXTidIeDzB2wbxzC+d\/DMStoBKMF8AfkTeN9xc8fSlkHFQ5l2+IJwcxptkX3A5Q9JYZA8G5ZfEYIxsoY8QKYyu1jERZyhLxB55lBhpWsS6WrZFjMF62uvtKQraCdV4nJDkeRmBEpyuZjIIxjfuUSkyJCF4\/qUxKIUa4n0Alp9IBlQED3Km5zkBzNyNtaH2sHNl5l5lN\/Vrq4xABhvMdgOUtV5mFt7vVRCn2dw4wYQwZu29VHMHpt1DRaaoHHuUu42\/wBYZdoLNDesL5ipMWAdlviUoWF2nXGYZgqeKiojOPXBf9RYzu54gmWFUuZNx7iXtzCLhBm\/8ouIYXUGL6bR1Rbi+EarZZzipt26qojYzzB4M8sy81gorPmBxbVYA9CtbjfodDAZZhN55s6gaxbedCUqtcN28RX9\/lNf1CysrXLKAyAzfM62H0rkueJDuiwuZMpuW+xDUpidWLNu5dRMGZ8BEi2zHn0mFu8RgHP9Qji75ZbwDolaSqj\/AHBEztC5plUIrAxFl0seJRa5s4\/3mIY4Mj8wyCY5TmZFtDNfqH+VBDBRuPU+idBfywag58QfxEQ1CGQDJioNBMijKaAp3UaWl\/MEW2N+YA3lrjqKIB0q5mKPH8oxoGjg6mRChhExnRBsnwvP8QyNb\/xIICzg1vUrYg9Q8zF2aUVtFjbWbHlXEuxrEucxBDmVcwkvZdCAsdTJLh5i+npcSr2YZ8jjxEELZtVklEDf8IVNv9zLKFGXQZXxUBI+ejnBHWeUOX9TiR9CviauKUG0YewD2PUAZ3d43XMBKg02X8SjWzB6mNW7lxA3qNGYWblnJDuhcoVblKWIdwMwDwlFMYhnOmU83CbcQUwG3zMucKMGEIS7hjuPEYag3Hk3FMLi7m\/wxfuO6hvSMKWrmvcex1sq5SXE4Fl620VTrz8ww6MmxdEQ+DP+5hqBoYZYwCE2tUcygDCrw9tSwl0+Ux2gaPVRQq4re5vE4MX47dISaB\/2haHuEpB4he4dCpbgkxy6gBhlyi1ZZAM7uUB24lkOPZE0SmeCPLaLez+pjcFdYuV3s4QVXqBiljcZJkzJl\/ED0\/ZO4x54FxHgQBip3EqJpKzrY3bDBbJiZwhqoyXj9QtsatuZTX3h7SyXgy683qo3VF5ncepYbFeYWSHrEKC+nIll0AbZYGO9VLKsazuJEFjflgrKqiwH\/ZjpZWOu5fBQrX2hiGzR4isWzCYWL8yxlmYsmHxDjBtgwgzcSDvzHJbBnuUJW5QW+IhVEQtc9XMdMJklJhxYPF9ysWcuDUQDAM51KjVk5GSBe4FXWbrVym5Qs69SoGpKqii\/1MEK0py84lrFkFj1+oBsBnPNEuC0W\/j6Qe1y43AuY3LKKtX+JkQgzSDCwlufEl3P+mNFXiXLoXfUyymTEWWGw3FvT0VcyMixzr7TUNK2T5nScpgnqIzqAQ6YpdBmW7buFvbMuPctT1X3jCqyBb4mmcB99\/uIKuX0iaMtUJ8S\/FwzeHTmboasw5U27lrC6Ne4GkHr7c1JDV6bz9n6KKIhlUGXB8y1Au5QdozuNwVXUyw9JjLq8t7lrenOBx1LJg7VTCViXMXosfyQVi0WZ5jey7tnHwilusx\/vc3CoBWmN4Ln27imXOIbyV1Z1Kd8lBuCruGSKKDUuoMGDWYls4igeZ+wTERfmYankSi20Fzc5BiqxuaGC2jcwIAKcUQsLQXZ2Jclwqh+pqOj\/wCkoM6bwfabKbS6clQzBq1PRv8AP0F4yrqyrlFdL0l\/aFoUMGLTOLmiW7ixr8cy6W7hpcU1XUqoKfUyWKG96mHVmZjtk01Kw4qrUQAqjCC6it1pgKgo55z1A1Tzuou31ncV4iHn\/wDCNu8S66lpRngZhJBMEKqKKDiDf0BlxuGIvPEpmrqVfPVRWAxcosMq8XFczAr1Ea4u1MamPmFYWz\/3CGotfM9MuSVPiviMNGzbj\/qWywoa3GCy+1wXdzBxFK9B3L+uWPXEU8RRKdQOrPLYLNLK+0GKKI1Lpgy4NRN8xQ8u5dz8RLNDMPyq8Q1KsMZmM1bhDVRIL52cZhVUyNcb9TFtc0yIBsWdv3Lk\/FWjuUcvg+Llac0bKb9XIOL1+Iiv0Un0LH0Q2lzcXGYjLlsU4TwYrFYNs\/aUNftKNGJkL9O\/dRp2PprP0E+g3NGTHfMKrGahplKGVcxZwn8YWgrHcpTtuzXO4UG4q6pxKr4wt0ngIThRdb1+OIpM2MWe5SnO7hCBY4pZXQ7vgJcgS1l\/TAzlOFNiJdTpvxhCMk8Hj81NfUUjw8wfvNcv6DLm4uLli+fEMtQR56iXGuCdwKZcPmY7YA8XFpPixv8AzLL1ewo+8DlK7vOfHfEVPmnncpVKNBsP8waOKu4qVLd0eZtsHHU4TAbhT6Mj1JytGWHC4\/cKS7foOoNEd9R49zDVuTrmeRBpf1cFeBFv43DQHglq4b62Yim6jo8zEuxXOIFltu4lAveMxsutrP4l3BcvA3r7nBIBC3WHjYf6R\/8Ao8Z+KjxCkYI\/ovqX2n8k8worg3DWmoz3F2MFnd8y1GRkDb6lCqDdn+3EvcCjYlvuDExqOF+3fEsi7Mvv8wUmjy8pQuJ\/RMqZ5+5xCRtxh9D5OH3JHEpwSK5Df4\/UbcvGPpjNwfoNxeT5hTrcV5riV1lYrpZW0h2KDPxKdhUurjF4I\/14llBns18IoDtR21\/rl23lC3MfxoqwHv1CAbByMU6piEe3jmcasrMw4xBdmGAmYMzDi4CyJMNXtC4\/KeLBjt+isrKykR1LDxn2O53i92cPyUzBHVTBLxBly5gm6hUHXuZpAmrs5x3M2cYy1WJkEbOD7RQrlso1WI7za7baj3LV4rh8XNal2fELXBm7oyTHFTG2cwH8bf5\/UDqV6ninggOp4ZTqUjYOL4g0\/T8\/QX0hgwZf0ljUAXV+4KgrbcWOsdMwxGjizP3lDLoOvzKNlGsDByWorLhgorTFsS0bpnywACmPGJzJWzr+og7B9zwff9RHUT1E9SvUp1AHEr1P5XG5fxFzDcUHcMe5kFR3MkWdQG5alIM8Yx0zXZPJ\/MdG8vUDYGH+YUZbPP4ll7dpcLZzZh5OeJbcvgQmmFacDcxUUDUT1E9TxSnU8Er1MgAfxnyWQi4oRcUv6C1Rt4lpTnxMb0L8ziL6q5dWxZj3AbonSxniQVTuYFRhd5jOCA7HuCgcKvqcQk9Vz\/iXpvRzP58rQOpTqJ6nggOpXqXbCcncenc7e9H218Q+pDiDLlzBDJKMmri2GBucjF9MLSmMspSHmZWLtTXEuFppzxUsbLJTmyL2zioKDspiIDW\/T8eZYyuW3iakv+d\/vMR1K9R6pXqIXUPGV6leo9E8U8UOiUR5Y05nvDy+j3mkzXAAc8fg4\/8AIuJccGXLlwo1GUW1iIgyrMftUYMX38Q7K91snADeBIx1F1gxC5ZthxmMF3aoZugXW2DIfLtLj0ZdOWYoAHiMf+CJT6MG2w4Gvvr5iUH2NibJfU5opcMIPcuswWxuonBxAR87i5GY2ESjruUl+QWN3LDlEmZybK4hYB5ZjYlkIDcW6dI2xkrQ9ykGX1vB8EYy\/piX9HK6Hjp+GF98oefmXmPuCfRVzOTzPM++O4mcOKlPPMRk2zaJ\/csLduxgYMOJXN9SsSx1f3LXgrgJlb8Hm46bVWtytX6n\/fcY\/Ul\/Rhpl5TRq1\/sT3BxBzFLl5l\/V5C\/lG7W5pTe71Ko6OblHkVu+GHiDa46+wSZ9QTodhgqszPqMIanP7zG0y9OhGEM9vwH8\/Rj9bqI+jdgkhvifG\/vFXzLrUUGXBlwowhTdSqVbvEdvBuY6u\/Uw6Ra11MRANdzABucgjk1dglJKG8LS8RbosoSS1rfg6iB2oHmZIaF9uWMfpiVMTExFJT6Cn0OHDF00w3GGwRE0iTWFmGq0jsiZKzyXX9TapbxBY5irEvzKJFVP7mlr4IUx5jLYuacXbvgguATdwWKHDrXiGmx2ccyxcB5cRYFri7cx7hccbglO92cPvueLKWs6GDcJ4MtNYfjPDmnWdBMP8ZOP7v3MCyDG47l4qEX8RC1P5Sw3jkmx4eYK1FmmcaI0gu2hKFqpeCr+ZTSgqi9kqVtOmWFDtVGj5ngTDiAAOAddPtuO6s5qSjrBuEerF4rC8Zl1hdrAMK6\/sPxFxZLosQmnqb5zN03MZnoRxUQbzqB5qnuGN2iWXW4IRpThgoFZV3Cgc3XBl7oc+JuyLS+DiUGDU8SdHB9Q9WdPOhlrWWcYMAi3x6f93HlNoeGZKYm\/EF7jnMIU7lMbm9rzNDcH\/eYBGYZrAc8xNrlt33zKDlbU3FnYs2Dia7pe8\/BMyFXTfHLwE5Qo++TPEnSzLPiTPrHrzoIs1nSMy2Jr+74fqYMtrEU2VHWJcqxaauHI4PxCl8RBnc3Au\/tKjC6u8HmWkyDxdQYbVhNwU1v8ti4p+A+IjoVvxK3l7nRyxLjGrSdTBOE8OPtWE6yvjB7+9OH9yPX+8BdI9X7w7pLDdM0rmxjKMz0SWUCZwVkKUXv6mRph9AQIiuEJqYb+0pMj4mZdIra4j8hgUk6DmYFFeym5npZ48xVmqWsfmGoFoxiChOmNEQXeKqqJbUGq+5OW1GvB4huPzFmVOezkEMVZKKx0GPzjhgwgi2ZMxF1BoxiZbrHiB0sjK9iDPZNQNCs\/aK7UBi6ltXQ73G2mQHXErSzyfc2sxm9sJ5RRDm1Smtku3+SdtHOUiMrdnEecLiEoXe4cEGvo8DLY+0VMPVTkr35jeBYRnJkhoDm+5syjDkcN4jat+7+5kUpIW+4eJQZV4JkIXEAwczkOgTQKc8IIkttNpcm+cUQ0KvBzBhBFstUvmO9E61f8TMqm6ikXtGA3\/UJQCXpJqnxO4hWVqugl0VMOEyaSv3Ap5M1A9zYfMqN7lMfglCoGEg8rE3MESiS7+giouiVs8MC2whT6JFvcVjAmH9Sq7HxDZdI+V\/aUuoRDzbZz\/US2tngNxJJHUHXw1qIAbX4ylDwxz3MEVGAOJhFZgV7oW35JySo9wB0Q9\/NPxYTb\/LNtT4gq\/wA04P35ev8APC\/y\/o0LZwmJvEMPD4jmPiWEZS5O4ctTnVxyChg7jY53CBn3fQr1HSNpeeep068xn4cwlE5fiB4RblEps74ml7faVEL49zbizB5gxkKWOUv7QbeZZGTGKsJTLasy9KxDvNWPlBc6x2CcpXnqCTk\/PmDBh5fQZRWLlLxzFvzvMuK1cMUuvHMELmuWMWcGVMNg3xyYZTBoMty6B7eIqF0NR0itpdRbiNcMTyJKymWJStVDW3UaKGGQUzix3BzAg+Z6S8kV5q5o2Te+YOQOIDV\/qAYuXOeImhbywKcp3BgLbivGSqh6Rcpy\/qZnA4iXUcJMWY9eombklfoBxVQqEP5Q+T7zcXgOPMuELz9BhF1HlKSD37zHdPMae86jSzf7QwNWEZAla7uXC\/8AaWhOT28Tei+\/EeiXWTDDe0Lwag3KCnE5f5l0l3zNzCazcZIA1f6hVqKRhAJ90MpRqPTFt8wdOPcSzSBq9uohUqtRDRwoZneovHj1GFtqP3LZDl+WXIz1F96LW3EFkl8SKalKDLVlUwKwN2CcYr2RO09SwwxGouZ2Ut61LFW3CtiqhSt9ML0+8zTj4nIXzOEWNh6XA2rWAq7T5lnqNnH\/AHgUBE2MGL6LzMcI3D7YRevUwi\/uQWrMtpMRXNVUwlzb7lcQEV2VKN4cy4gIXhh3LdnXif0M77cEq3wlIAwUqWXa\/RK5XBM8wxRQn5lx8+4qt4DKSpnp4SXB+i+\/ocl4lbxKI1G4D7M4YGuoY5F55h2eXqCoZGVpbvJGsXGrnzUuzUIdZjFriCI1LR2syRk7lTeKJFCYoxzEZd9MMtUPMTzQ1xk+g80BwlxxRHDMnzOpYbC9IxYZ5gWOMTcWKveN8sAu7dSrAfSDeR1LpjPUPChYqI6DcOWlYll8gylnBDZ4oNtsXEhzh+hL899oJlf\/AHjxLgw+gP0gxZumDa2\/EsE0qNLpEMHBvcVP4iOdLmXrkzH0D1DLiD9BUW1g0ivmGr5KdjXNwlgagbrsK5OU48vMuVZlcm+Llk6p4fDGiA2MGD9FzDOxnOtQD09RAoX5hbZFRiUoIYSNuWswRa8RASytwbxruJdgwsDD8Xuaf9Ed6\/FBCbOOYmDvkJ4sbmNK+cxRH2ITN7KGFOWEvcC+YhKZ1G9YMbzCWFdXuA8K1qNoB7DLxSvFzMbN3iKUeBM1AOku0AQplb3HXkRjfb39L+oSIhGhdEHi54JaLagij4hgRJvkY7YfGy9CF3GE4DNg1OVypNmCjG4JgdwBADbKEQJyxAzqyYRAulVjghAh8hklo2eCPUkbZmgr1FBVvc5Ydyuvhu46YGcuvpf\/AAIyWnEg9qx6orxCnFrdqgtua1q9S1SGMGIrnJzT1MYAU7PEzHvZ7lC4lIS8kLqUUWlWIRhIzRiXwV39pZNeM8xqiJs6mFZvctZOwmUrVcwdlj3E0s3w6i\/DKOfoEBKYB6gi4Lze5w2VcGIjr0XuYfZlriWMa7phSEsKbrLCw105cLYaOWGUd0TlhVV1BTNrWSJmDShcob7HmCKUpFeitaO0M48lxcUXUtGCuoaCmKuYNMg08v8AxAiDmeVGXFx6D9Num9VMquhXPuNADiuh6uXoM8Lv4TbPhRg04WCP4AzeiIa8OBq4NptXmApOIuOz1HdgvRFyHzzLqYMYINV2phcxygPUpldiEcm+Z3xBWwMXz9L\/AOBEQmyU1B4tlDD4kahVN2gx4dHLMWiiZpoJRBjow\/MXGCI3vmPLHccxRvaCcfMGFF7Fm3UYRolU447heuYEBCvB76j1Y8O+2zxLWqGIGvFSh4AFt+ajvi2S+EHNbU+Yh12xZB54iZeO5rnYNgdzrtztrymJaABNj5gtYhtbD+owUUMOx8VvMYOwJlQvMSVAMVk+2PxGuLNP9yZkS8miiAWrrYmfUtppfa\/uUxgcETOs83xEiwchfPqar1PaUUl1ZlxWcqHCvJcFsKDu3fHuKwjdiPdzJwfIVz9oDHHFC8\/5lquX1\/npicUcioXRhllcsfoF5+IjnO74XoTExS9g4zjCZYeVJZnfAsmiqLJHopvjMB8uIBXUOL4a7Hs7INvbeG28VwwGL1TJQm7H\/qH9wXdnXN4+0QJPZYZd3+4Iybgl58EqbHkviurlaX8qKYpwly5B6viMuWb1DvKDnIirHUuIEGWhCCwqlqj8QBmK0A22cePmOi+sUg5+UWvctUEF5YlomyANlcuKqCWa8gnrwU+DUyZYrK6jiJ7B+T3mMiDgZ+KJeCtit1+84lLvjQfOcStWMG1AOcFuO9S3ZnWOR2xk2zkRfwJfeoU9AFNOS8+JRRV2oYcPJGFoyUCyV1qxiGvgT7PI4jeDgYLnpvGozVomiC68fMUMMA2PGGKGKgmjvHEUKHZsHr9Qi3nqUo8TNDfC6XuggLeLtqmWXoBfvAK1yVKg0Slucjxj7ywLW1F19oWg4pGjKBbUZiWhipK\/GKjmabFOR8JmBkLQn8FR6YMDCFkjcDpuv1EliWXjWa7ZQRcui+mWIpVsGtPTNRHiG35+yEXQ0PsDr3LYZ7HIryPjUbCIw1r8KslRy7tUNtXmjMbSiI+069QXUKlFZ+EvaJ0wi1WW+eZtWq0nwP8A1ES4CkG9UxsKNKLL78S7OjQ5D2QxxDqxfEuNWsrh9zJ8y45i0HX3llRUcN56JymcgH5mhlKlgvx7nWWHuYiUaAr9pXYRmlD4nI87slfBcExnC2jdGbJcDnHEKhfla\/eYi0W9OevcoXOMLP8AqYm36v4edwZq1ydD7y4vEqBHPP5Sn0Ac0r2Yp3MauJwptr1LIuJbnWLhTBbzM7EvgLltA28lJrYWM28c75HkxFU0AyK6Y9crAaNbMOP3LaDTNf0W4NrESge6vGomCA7G69ThpgWWjrnUOs8ABR+39QVjgZW36h8hGiu3m4JlwbUnkOpzHFI1xbPK402RrKHlaLpjPVx6Q2lltioVcbw436g8LPRCjWlpqD5xMcnUTUISDZ\/JNABwHF89TLNJ1Q73C+cxmqV4zl8RSl8aT+GtX5izMZBvHk2+IX0KXSyeG0ojgrHPNYW\/rMtM3MAUbOBhkcAbg8q\/cDQQl1UMYYUgoUNgZR5H9ZxLgXSl221t9JcQUpjjlb6+JikCrWQGDAZxxu4op8rg7qwfUNpfHrVVnx7gmhYMLClpF2ACKZfbYELztguDpmuHqMrG0KeRV5ll0KponCePtmMdKIimMgtTxLCKurKO17P+9y7ZG3mOOL+IegVCwV3KdT+iofIN1CkdmDDPV3CK5X7W7lAGyJ083ygWL8AWekOJfK5AEv3dfmKMhUSN4L8TnBisjgnLZAOi2reY+WvAm10Na+0peVBBQBW0uxMbWzHUrNWLW9OfiEIprD0eL3H8IK4WeBuebPOt9io4dLcuOFuLAvamNZfmG2qbWjrf5iFLo0w8zkFGEHxmpy4W2U6MTCNiNi1938xK8+HHeep4dCmX4zmEFRWYvzymFzSIKfLfEU7gRT9+ZiKq4sc4h5OXS58xWByzj5HmDBUVbtX8vEKSW90NLCrEuWz1eoqO21D7EiwsrKVHmnDLRAmsso\/1VHrHxVDq2ncOGEA32neZn1VIC25qsQrOWwAeL1mUn0zdUOyrqKgXQBe\/9qVWLdAM4u8mWI1Uram8rn8xss5UPquYfQ6hC+ZaX6Nhq9DCt+8eYoTKC4eUQrYeW3GHiXMIlNfS9MB1ZmsXyla8zmuOm873qBmhOa4f3FZIUog9+YrMG8Zfh1PAG7i6tjypour54gcPIm\/3EdCMPypjQA0BWLY3BG+Kr1vTwSivF236mLC9igGWJuZtd1KMFTaTF3q6hO\/DW8DmBUiXnI6zMsFqYrGNRlZTRpp7Hnc3w5tf2F5jxmFkj\/Srg1eAo2Y034Iey0LOV7zmNCND0e\/M7p1E+y\/MTLxQFZbcj4faVlFjfT7h\/JguqdEaI5FR+5LKC1BbhXhms08q+Dr2ZmLIzlZ9ppioAV13NU7G1fahWzQgr4FwSdoAKfjUQoOUGafxMwcK\/HzeJX2+t7X0XHUs+LBd3V5zMsnayDXNPUZtg8J6p4lAX6hxHdQXOKAaImds6K9yU6e4RsDdFN3PMwQuWQtfqUJZv4A8n3lyNmX8BUqcMfNYwrdtQmtuMQciH7laEi2VG+WIiXXCjTwM3+YM0HJh2FHj1N9UJg3dmc3icabi9+\/EunmBh9rMkZTQ33A7QoGX8XNFVi1b4P1BRCLHSl1+5toobXxDcpsVK+bhhsgS10eZligUiDwG488kPT3UVKhrGod11A7MEVM+r1FL0j4z3Kwypdzi3cRNda\/8riW5cAVZHQA0gTjNfeIAXCtS3\/vMS1IimVvBM2sAVHe5a0O4V0FeGZM9hxb36jUq5YGrI2cTFSG\/QZe\/7gkaFKlZvl\/cfuYOA0bxMZFtYOUsqvEpzBmHTNOcXKh3FVhd2bjSBhN+oXMxrTDC+buV8U8ATyNkys6jBerKsmnlq2b4yzxF9RFW3nV31AFTpxQ8U3TGs0ukD07ENYFQF+FbwPMzQZqgxYQCrPJqYfUFYgPvvzDnq\/Qt7uVl8Uaszy4Y2JShgdDK3xnNtsDVzG2cMwdYxLrVxRLwDeGbhRsUJ0kcAfBz7O\/6jiacWDdwYG1K8ytCTNWeAVOZTTDuLgRzfymAqVxi1HpKEXXOU4h405V\/5Az9m0iA0NZPvKye4BqHYwDh+ImbyJXMK8kFI1qV4rUDzoVJkZIxZ8lC24A8DBI6oFZzUUVJWdEJAnOFx8yxjBj4RxPIlwzaUqClbjVzlAfEDYMCpeNm0VI9htXCYvK49NVdSxZ3GYw57Lf8SrfzaJYcYC\/mITnChuR9WD8R72UkNNqz\/dnVlVjMzoaghCT1001+JXGlFmIPYBjuDMgvkPMeQ8Hh\/U9+KbHBO5cWUvadLdw2YSzFw1DhB3H2qzhbqWaJq2Jg1jdKszMDvqGooGolrC2toBWuQFxWP+YS77bmcTzbGX0CySrG5l\/nCYYg\/I7lLU4Ln6gIlYOXbGl9pliGRBlHXyuKRUCDj+kcouVD3NIjm22NZVvkxdbqAwjD5IpjWp1k1CXn4ynPmjzAoot3dymULs8xCO+XuKwi5tVzQBVTrKeIQsbZuL5cuQuWhXVRiJ0o3cFBDK2Es3rOZ4BkZxH9OD4gleWMxcXApO9tf5iiCHYqeGPgJB9BOBmUlU8Z+845hRGIdDdZ4bvA31K+yxWLE0atAZ+Jx67mL6CLhxvKV2y5oFedIeukEMYHzrzKzD9synEzLbJjBshOOxpyl0tm8Yj3A9Fk+cR+dG6jXIbptmLe6JAqUGAXH8wckVwygS52xLbepcnANZHl8sqp\/EuLvvoH8S4AG6rLUF4WktQZxXPuFp9zqipze1cfvBgblGVAbo5VVfhbhYE+VDMxLsJxPFP2l8KMWVU1MFAYEyLkZwjoaa1NGzHOYJmUpNGWoaKrEMU1KV4QFSt4brneVRfT8NGIh\/tJ9g2EYiA9uoRCnyRPH4LiHQA7zGct3kiU03BxES7BeZ\/\/2gAMAwEAAgADAAAAEPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPDANPPPPPPPPPPPPDANPPPPPPPPPNNLCEPPPPPPPPPPPPLCFPPPPPPPPPPPPDPPPPPPPPPPPPPPPNGJDNNPPPPPPPPPOJJDHPMPPPPPPPPOCDCPNAvPPPPPPPPDDEKNPPPPPPPPPJJHFPNPPPPPPPPPPPPPPLEOMJBDGEMPPPPPLHOLJDIDGOPPPPPLBKJDJBwdNPPPPPGGOGCCDBMPPPPPPGKBJDEOPPPPPPPPPOHCOEAPEJKKPAPIJPEOOMOAPGNABBKJHHGFE\/hYgNymhEAOKBBMGAOJIKNIKKHFFAHAFFIDHMOGGPKKIIDPPJCFIELOBCMJIMJPNGBCGACFLCJOLAEICFAGLwIcSZ1OKGKGICGNBFAPPAKGAFANHDLEHIDMMGENNPMHCIGECCFEOPNFEHPGJAJLFLELMJMMLMKK35ZPv2tqz5O3ALDGMKFLKOKECOFBIKBHHBGLJBAIHIMODKEJMOEBHONPMGOFCKFHPLDLMIDLDIJIBAEh+lPCR0Xq4zKNHDJHNIMFGEFBNLENJGIBHCLDLMNLPMMPELFNGFAFOKGAGBFOIPELOIGDMKLDBKKPPFOd6dpF3xP2dhAeOLAIGMADPFONKPCHBLIGLEFBMGKFDHHBJKFCCMMGAJJMLGGKPBNEJLOHOFCPKLDCENDXgNa0WZYQacvuMOKKDIIJDIDIDCCEINKBMOBPGPKBFONKCCPPKKECKOPEHPADPOCFOGMNFOBHKMKILPLRQCdRsileM6ENLIAEHBHNPIFDBLMEHEGLLDOGEHPALOOMEKEMGCFNKPIDNHJIJLBEHEOFMPGFGEHMOPKgknvVWLO6oTeJGINJFBAPKFIICOJFPHNOPPPKPNAKDMBNCCGBBOHNIPOBDMDDLMHDPEEEHDKCPCNNNKATX705m8Emsu2XDCBIMGKPNINOACJBOLNAMKDKPFFKNAKAKCECKBOHAJGBMIAGOADDIJIALOPAGLOJACFCSYcQ\/bygMqdAKACDINGNFKIFONBCLKMMDAEHCJKHMEHANENOIGCNMEIMNNNPLDPPHIGDMLFBMPNMEKGIKFE6QrH4ueoGFDFLFKNPBPPFPHHGDEAAHCJAEABDKIFEOJJLAEHFLGMCJOONHNFBNLMCCJMEMBCKBALLJWK\/oQqXmCLKMFEDDFKFFLGOGNOEBHMDJGLLKIJFNONONBMDBNDBHGOFMIILOPMJCAKJDBIALIBMCPHGCJIEDGGhDDOMDLBJKBAEEJJGHHDONOEOMPBJNAJLFLBMENAIPPAIAIPHHHHAHPPAHAPHPIAAIHIHAHIAHPPAPIPAPIAHAPIPAPIAHHAHIAPAIPAHAPPHAIHHHIIHHHP\/EACURAQEBAQACAQMEAwEAAAAAAAEAESExYEFRYXEQkbHRgaChwf\/aAAgBAwEBPxD\/AEhk75yIWnp7fTz+5dbH0rIC5sL8ScI\/8se8EFzb95Rs4Wvzv1tTpnx\/X19HJlaAdjeHIfE6wBTzDsovGBg2YweY6nGXwv5\/v0ZMB1sgjzs4OQgHzYC0cNiheOO9l4ZEPj0T75QiIby09sww63WwmQc\/FlNhxyzfJZA\/Hon4kQOJLhwHZAZhdayzYYax+SNYsE\/c9E0\/wyyRdMj4Sq2hxlg31rSHPFwXUDY+38+iZP7IM5B8wnm3XkvfNpesucnTD52J5EJkA\/U+iftZ+9oEGQ+JG2F7a0lOz52TyauzCJ54N\/f0QUdINTvzfd\/RBBHZ03MjaTkIvCwXlafRe9cf5jUtS08zLIyOp6snLfb5n8\/+Ho+MTpAkP1g3NhTFgzL7sWcmGuvBO36+jpHRxlMK88wHzI8sidZfkca1tkd9KSP6EqZlpefd\/wD\/xAAkEQEBAQEAAgIBAwUAAAAAAAABABEhMWAQQVFhcYGRoLHB0f\/aAAgBAgEBPxD+yGCHBvICMc76ef5r\/Yjx6W2PwWHSR9P8j\/slP6hNCFzx7NwVoOT6PrSzl92Dsv5hUnbsEwnkLMeURo7ecejZC+IY1K0yetQImjPLXS3nPgsJzeWgWM379E14F0sxsQyZ7YsyzTIGTu\/VyJ9QDsKBaavjvomB\/KyofNt17dywuduy4uSwk2Rz+nom8\/nb4klt+5ez3T4PBtuT3OWDwXQmY\/Z9E0aByMOXG0ZSxemXlHu7Fwx13za6Po9E3Sc78CsvOfPYOwDzHNg4xtpcgmiRH79FVz4GeUhJPC1MmEUmMPuD6l6L3jzPNgz1HlqM8zM4ZYry7Yft6Pi6fE\/o+NAurhl0WN+vuAeA9HTeN+KTfEqXkZK4F4mXV8ISXpSX5oB9wfeP\/8QAKxABAQADAAICAgEEAwEBAQEBAREAITFBUWFxgZGhscHR8BDh8UAwIFDA\/9oACAEBAAE\/EP8A\/gUDn\/EMmT\/6j\/iZ4x7\/APSf86x\/+n8ZP+Jk\/wDqMmP\/APhTHPH\/APNz1kz+f\/ruHP8Aib0\/\/GGTDJ\/\/ABcHLrE+ce\/\/AE3C3LvJ849\/+q\/\/AOAYGBk\/4DJ5x7\/x3BgrDfzy+vzlTYLTuDsTqjZ41\/8AIYGTE3hncef83yKEd\/zgrD0N56bqGGzz0xyzjNoRP4\/OX\/4guSlyZMnjE\/5WUJ06D4+WeDGIawj8CiHyD9YguToQvlEI\/wBY3Lv\/AOIwMmT\/AIm8e\/8ADtXaA24uWZdCh2Clno\/eL+QSQUGFJXya7njHv\/wmBk\/4Mmsf+URCR+Pf1l2TNwi67QrNPjf\/ANpiZzDuBq45O0yBcTXMcmJziFPJvGq6BRvq\/nzhsSFBVIlc0r8zPGT6\/wDgPeJh84LiZHWTmsQ3rEx\/4vk6APJ\/nCczA\/JB6lVL4csVTuRnj+Jkx7\/8BhvMmsl8ZDE3j5x\/4cpFWoKTvz\/bXjB+9JopO7dWQLu4bWCoUHZ93+MN5P8A95h3AuSZMD4yf8E\/4igdg+x\/thfqg6lij8PcMuJgVbR6v\/xj5wNXEyvOT8YmsccNN7HzjGipadL5PVmEka9LaVPAp3EorVd\/\/aZdYYOsMP5yfGJMcm8mM2M6GoS3x3NsyjBvVD8Nf1k1\/wAJvJk\/\/YcHFh854z5mJiTP6ZN5MU9kXqEmETBEvQn8rfjJ\/T\/hk5iZP\/1M\/OOOHc8PgzpvefD8Y45Mhs0H\/feS6hqei8\/E\/OKCKl+XA3mpiZMn\/wChnjeCZfWeTPMxPjBjkz1iYYPIW1T50uEJpAiWbf5U\/GTJXJif\/sYYiYOsZDJxmJnGJvJhinQJbC\/2yldqQ3AVPph+cn\/3TAfnOsNHP4xPjeByYnjeI4j84ncdFCgryhP4HA3Mi72qP9TNj85AehlSg9n\/AEzWyg\/LMjL0zTpifGOTJ\/8AjMj6yOH1ju07gdwPd4G5H1kfnCe3pOtCL\/TDpJXwB\/g\/WBuUxAN6+8Euj9Bf6ZoAr0iP84F+fpxPjEyZMmT\/APuZH1hc8LzNevjAn6442V5gbkfWR+cJBsD7Uwhi2T0Kfx\/XAw6V0XCoG\/GsZBSWBMqzHE+MmTJ\/+MwHA+sJNGJ53iMcTI3I\/OTmCagfkh\/UcTx6A+L\/AOs2D6wDZF+8eVHt0\/czvk\/eJ8OTJkyZMn\/9zAcDeaeN5BOOcKbxEd9xHI5N43NGGyWA\/tMsMGWS0D+DJ3EBlmCXRfoXJt3v9ZMn\/wDM\/wDzmBg\/+DNVhq5J2XxMYW8Q0y+sTevWzACfkMY9THNXmhGh5mJTd+zCxRXDar8GSobxWH8wYYA0Q\/qmL6E8MT2HWAXJgAF9Ww\/Lh5u8ID74s6iCgCgqABrruHTu6Gsq0K3mQKYKofw2\/nWMwG6CjsWj8bVco0FRsSqxBgDfp5MQAFQeQYJF+385dSxJauMG3aBTyXEbgQCPYdH2GN5qI\/YHw+zTj6HXxjTjnxOL9OXvTlesG8ZwFlijzw\/xYrzv1jJF+sfC82418Acx3BTkDIF8vVhhYpOLD8Mn84eJRQdl+cA0h0KLiwI9h\/QXC6FKDInd0frEKuhoWAA3v5NXFOqpTWsAm93bhm0gQu6G1l84O8W0f6idvxPnBK1BQK8tSH1cdIuhNOjADrZ436yvKlYvCwhK1J8ji+GVYZlA4dNtwxfkL8sdP1p+MS8v1j6HFjxy40xXpyvWHiHB+JwXjb8Ypp\/rCtL9ZKr3nuFmj3gpaIbAwFKAeXQfeNa9ZT9\/IJ\/OTlDqqH2An5MOoeaMn34Yyerpv4iuEioLZfuiUn1kPNQTG0Cq4KWUXJmIRVk+3GipmmN8qSz4wUXo8r4FP0H4zxYWl3wDR9vrCwrFgm3YR0x8a+cioEEME6IGMFbPPvO3Jgk\/k8m6\/WQBWHKrofJ8A+Lifh\/WPocX6c9w5U0ZXrBtRwXifWC8f6w9j9Yppz6xDtXHhvgj2XkO5Jd33rubyFpX6AXIgs7IF\/YcBV3wg\/rBawdar4QweQdoxjq1QfxgofY\/EcXGELPnsiQoUuu4KfLo3hoQvZhANM39tsgf5wBoHlE4qbSeMRF2CJHg8R0zXiTBy6Y9UdUCl1p8nMBoPSUhndQvr94CU1KB7ouj0uLkSUiJETo+nPaP6xg6f1nyMbdZ8WU8sv4cOo59Z6G\/jOM+5M2n1jxvMhI2dQ4YkES7NZKDs+Fl+jAhOSiAP5YfzjIWmth+8AxCmhSnx5YRZECglfaMD5dYbWixE\/O39MWHDPBIqAgGvLmsUFLSFogG\/vOb6ogN\/VJfBTuKwRxNYOxJ5V\/GGwXpJt4ChvnPjBxRW19R0qIP26zs2Aw8tVaekH71iNMKS+sNn7D7zpQKJT2PB8lM+LPicv0\/rFnhy8RyOfTI5Ml8ZJhgG4LKfD9ZrBAJuG8MmA868zHRq9Tnzife3rGlnR6\/jJJJHs1gG++9HMPKPnWRgLutMDAhvApfr\/fvCJAsm2+ni\/BfvGIILHZ3qVfiuIBgogDe6lLJruzWa43KpV1YSDE1XXreBiSGDoeQK9a9mG5kBi7K1BgV0B1QwuTVdiBiIQRE6I+8AseEiIggrWJ7MQUbJEPgKxUG8K+sTdLY6tASi+Wz3ilWSBThQ0+QTYscBZgrN0ps4p8xfOilxDQCrBKihaUT8byh3arZVEoDQNp5hszdRpTAruAxNd0dsyDVhIQdqOntCPx06gJA1bQ9ns8fpXnmHlMMsfyOSad8fGWqX7x1lfrOC0314wcon1k4R+D+cndVfjDQnWyGHOdnkM2EjIE1hkyG1TRP7Yo7vaIWeweHyz6cAVDScXtSF+JjWAdCCXcDc+Qnzm3DtBJ7BILB8hp3N53IVDAAoC290G\/DzGeXIwAaxKOi1\/GUAkMCFGEETQE1RywqdVdps8F4+zWL1awYGpRqVbrQe8coqklNiCQU8Mpe5Bhk6KTIUYEXdi6wx+AAAoigkTjwfPjGdZSYhghYM0MRLsxqpQc3K6GwQHaIml5hYyQqk1sh6NJxvcwluqMpzW9PyNGRx7O4BVt2mzkXuh8K9S7dicwx6H61jFmv9cUp34wp160XGYuvpO4ECa\/HcpKWfGH8YvJhZS9NmGCm+p195OwHjn84pJ5og+Lf2Z8nmRp7siPsiAfR+ckRsAEa0AG2eqmc04CU2NKhfWvk86ygA2BUW0Inuo8w7B5QJBEjN7RnrNlR0nYUKgi9EogxcZEiEKqNOEnZouNUxmgBaElQgE2+stONDYClYPFXdOGsODxERQWNrV6nDKWEthC9o09onxcPYlLrT4Yo1jOauP2uZ1DBor2O0dxMd\/1tpVjQobEGjTmGhKi+ONA9m9ZS8pa0bH2r3pVJpSgdo0TXkTxMl1D4hjDlR3B4yDt3zjFUHnWHFF+sAFO\/Zl4yTgmfMJ6MJdTXZzLwieFKkyVRhtMCuKug\/n0ONyuIKAPM6+hYPrLWk2S1Po17WGaEoQoolJrZPJrZ3CadYCU0lEibEQNMXw3bDTRlZJ+WzDYIof1YbE6WUUKELj0QAmoisOBC7+frNzZSkNVCBwAV9XHCrS2sUB2SCpbR9ZSMqsneVs75FvxgI1MAeRROr2NtJkuwQTe0QVi27T1MG1QFDCRqiNPThKF4U2FjoEQSAzzTCpTKlQD5HZPn52zGpiUKNLAvtAXluBXcUQiHhPD\/AOmLKxN+MZ6r0esF8D3rEz0mnFIX31hlQw7MP4frAST48YeMWTmA8Hd2dy5C72JrBASb5sq+DyuXvdEEfC7F8FfrGwaFbEU8oXU5\/TBxlpUIa6vg7pnxgzpMLB0CUKD53oXWMIAAazeDVeNgS7zSNsQC6aivwCwfTlhDBGkNYhIo9Y\/GGk6KI0MehgE9O5ii2tYAgUCsAbg15MSLQdMIJKlaagTzjCIs8oB2hQvFEpHuA4PQMI2Coh4KPPWONA8a70SiCbEpvDiySwqxqADfO\/JxwpOZAKEFE6G6RfS4OnHVGlg2t8kTo8xUE1ZSZ+geT8noFA2+8QeY+cea+h\/7jtbo4VQXxq4eVew8zE2IeyYCq039meGLD1k3p74xr1+s9pMaImvrRk0RvqYQNl+TH\/zY\/wAdxhw724R4frHeDirx86zWAbwDgM+M0vF54v8Ag\/3uOWnYQKbinQ0s8hW4ydgAJ4AALyDRNBMZOtp2UvsQTaW\/VzZahgGUChd7ivh7itMQqYNaCxS1HdQ0GRui2xB7R0prZRUN41OIgCJ0hEDdmy08YWapnsdI6Teml2U5nimA0ECikb4DffGOWIixiaQLRArtHCo5IpAERCpEFRSn1izUI6DVQS0ZwkoQ1j0hJQKBiAOcE29cLDtjFA7IOhLp3yITNDNQIhBYRWiJEiO4qhnAGgOAks8LvUS3EchHUCFbsUb+xPjHRacBFLzyJ015mExaAaD4Tygo98MRxt\/tyN10+sWcfrLL4\/GFhL6zkE\/GQ8N4eh8YR4X6xtY38YimAqvjFZEJSAFs7pdL5D7x5mNnpSiDSm3WJYYYhQF6fNfaMsveY0MxERRoSVBwBOrO423umr69wqWRXyCZoMVKaRaDtHjwrc2Im4gBKAHlPIn1BxsaSaqqzta72IL6O6fLIRwDXnqI4ojdNjBWorxD0sb\/AGDRiRV60NTaUcrKZIgW11FSkV2bEBxAUCWoFsqLoSSenFK21gKYgCKlSk4fGPglRgk7pQSKIjEIzCFUmgJShKaOGkNRy1xqaGy9OndJ2J8Y8Cg2nZ4d9PDv+2ApEKeglpeCbHg30TGu\/loxSk\/k5mzj41lU1PgwCE\/jCHGHpT6y\/dOEhj1JhGoAbxqHWgEkb0tSeel1rFJMkKRZSkBSF0Rh5xuSVoVLFU3odoASbcihUF8IFaE+CroBw9RvTabg6awWFAmlwBgplIAHPDW0gGi5seyKBaNAogMbVtN7OBjFVAG9aJomzejyt1rHY9026O+u4ofhsRCGwl55jCTuU0IdjCAOoMHeWoCQgT1Q6TQxLqIiNdJU2N1RE4DsOb3TFXEpUAVLdmqTZe9xHNsCiu4Oj2Cy7HC4riEUIJAteDrv2C4RKT2RW63Iuoplyo0RNtKbux9XHIBF03D2Xh8Ono5\/5GU8v2Y35+zC\/wDKGFP93OeP1h61+sPWngmSJAmTyfxjURQVBU9Ae350dfkAAcglsiCqEHutQwC6CPEh3CADm1fBVcusyIoNBRKtBB9feDUUAKtQh0AaVqEl9CvahBUTsUA3acIB2uyAEAtQaKsXiVajhAiCoFiUBpRfrZTzUnAECipKaG3WH0uoQgwABphWobcAwtNSweI0KO9R7kbxkEKClHQOEUE33Ym2kA4o2CJN6bquTQxtVOqkBCNO7xUBBpsiOzZo+I\/nA\/uQ1Q9EMVCKlvhHBamYDHbGvgbs94WouJAXWIcTzrp4yTwqqCRwbAljxdMtwz6VKRPCI7EaJ4Rxc\/wx8R\/WV8f1gS+fxkXn9YlqP1nxL9YB15esBoBr4xlpDXyvxhFGOwEaEB2FQpt3wxqCWtLHbQqFSAKO1cCpN6FWQDpYl3Tnec1wmoUgNragOAvMIcPlAN78hdseHpVxkc0klUDaYs3Vhp9YBnIUKgIUBR9sR184qJLaonAoUhxPCzKASK0CvbIhNkvOYnsNsIopBUlF9pgthLHCRiV2G3dIKBjzbaoFKgjSzQBCGhcJN22EGWAUY3fdecUXNEVZRAaDrt7zuBVtgK37pEQ2AlENpw+qAKCOw8y3TsZ4jjGeyAMLZUYSJ41ky1AESGAfN7TeRlIg3HXoHiPGnEVq3bmjFDD+sXtG\/jKu9PGsSOfinMfVPxkz\/bhsX9zBLrOcwcIKZRNvxhDn9Z\/WZhDn9YK4TEjmMOGDaBc+FcQlDAejEhKeANq8D5cJipBRYoZXUiztrgMRKxbpUa9XytIQ45bkSlkg2u6oJvRw1gzUgJVu4sgeV8EPOKThW0iLAIDPD6+jZkSKgAIQ3WCGvOT2E0ZKwAgEa7s1vWUVUAygkQdUgs1iRZJHSG0HVQPFZ9YBiGMbAGnSdr7hhQUcQGAo7CLxtgk3hu0Q7pIt2QQKdIvMPjopIBFBg0G01BNXCaitgCmhUCbDy6vExQAVvWyk0EoFEglrWZv8EQpTS60xRFsKNHFUDpQQAa6UCIkXzd4QKU6IA7PzB+f5cl8CbjrT63eeHWPAuoBpSqnmlLIx91skBU7ffz4fnHSPywDg5Y\/WcEYic1iPJMA\/v7z0DWD6nyYbABVHFrvTwH57MuAQoirwiGhNaX6HA+AokaThsD5TbzEqpQ1IQskqB77zWMIRitagtEGH2KH0PQLHNDQO1EFdtV943scICJKnO5ttPGtYaJEoExsCDr1Hf7xO0IhbEVGqENTwODYzLGuxHzQYHWYAuS0W6ujZeo11MI1jFDfkCgqxE8D4x9BzRTiIka3qiHjAfbAAN0ACRWCUk30wTwNooiIUABURo0G4lQDaGh0EGqjBKKJjkhCKAwkaIFK0ZPeGOwoi3ulDZdDrZuPRwkbrSgm\/VER878jjEEShIhsPIidP\/dZSghLSkek3908Ya3AcekwboxB4mBqTBTX7wXU76x4wQwLBfa+j\/wB1l1MgrgRaaTo38Brj5uGwIN6VghSuzx3EkBIlSAweRVKpoN48waSAWoGpuX0v2lKBA2wlV2qLB3AJzCK8kSgAWNSgmoj7wm52IDaKIPk2v34xyyslMaaSW1dLam80+yMQo1WeFB8kckMqRKkIIip8kLiLgbPgsANCBF7Ue4PDbqJK0nCEClus3EqSYgVixqLFltHTh2QiWhiQrqsFZ49YkTiuUVNlERHkRLhJhrClCkHzQhB24RXpiqANhZxby+QuC+3oiUjqfAiX1ppMfiWIIVEiR7r1iPZRZtrDxtOPnmFtxFwG4B6YjwGQJq4eYwTwYxyLFFKB1fB49uJDUoB2PFypxi3mWcBCGi1ebAKQj35y8YA1BSwA2A2+\/OcbmpERYNlrNBwL5wnCyUHSUKksahyWYIyhLsbgCcJN7icwgZAWBUlpm13DejWsYqsBUUdq1vyj3uQVDKEAg3sATTPGHKMENINIGtLJo+zGACAYrWt1dCAFO4VPiKqhbqWgE+OcwJjoLMatDboXR0B8OTS0wgEoacVJAZDuN06ZGoCa3QhVjaBjNkj4JYzQgNTtTqYBEQ0zgFjaDYnsp6SoIAUI7rfZrnvV8kAqbAo0Cj+b83LrSAUg+g+IwFs4vyHkadMh7iE5nPP4xM5iN6xUph4jE7AG2eP84TnGzsTADarSwXngzphWdN6q9fAcLy4JFoVg7KRqA0GjuIIgFBVLKEhd94C4taGiwEaYG11Ylsu9wwbUBhInQRT1owLKB2IENgJqoeU77w6ER1QO6sFGd1d5tSaTieCHV2hTzMgRoCaQiDyifgxSgimhFkoIk0VAq47ACsp7gRTQqPymDKcEqbgI6ARORF8mKKBrCNrRATqijE84SQXdERCIIVYQo6UmD0jLLERo8VBkWIJ8rWXG0rV4CL0RO5CqMhbCWp4Hd85cQaZ7TbR65HpNd83EqqpFDhT2J4f6g4XcVidBivkRx153AcwaOjH4P1j3AxK+DjrEuPxMdOH6xPRn0Z8PMp3EfrAXpmtuES5s94GrgWm8nC9HQQ2F0PCvCvrHZigeibj0Wu3elJrFD5MNwKHRNyGpvBVPBgAAe67uvnvcaCmzoWCqeBlnn6yTwB2F+w7QA53A5dlSAdBw2A2\/EuKBzXZKljQ+1+nu8mQBC6tCzq7N\/j1jAkGYOgsgUAWvlTfnpo6DdKQNaZRTSoeMGORp0NNjdvfGstcG7ZQJWklAE7uzGLYURqo6VfBCPjxksakUuyjHyDUm9pjXqCIENm6GkHNvjWVAqAoiyo0QDfn4bgdEqN61FygTwvNuIBA72IBIClQF8TzzCLFpYyCU016eEs5jqIGarQkS91\/fCeqxmlt\/cj+X3kDxpwYOGTEMBLrCFZgFJhIill4Nb+Fh9XN38UgUnDk3Dxqu8egKtsNFZq2lVdfMwTSVMbZpa3apzRvzgs1FA0RFId8Px5xoEAgIoXVZtUBfvCAfNlXJIFVUJ\/IYdYCKN1IUbbav3o3k4QSt0GxvAU1N\/Gd2p0AETlpENtpzeVwB0tki63SaB685jfRbS93RaQl3+MSjtQblAAur4EkHfcP0oLRrbHisKbAxVoLQIFgpdpVdXzzCvXpHY97dsjZ7ME2jyKFqAnQCE9+8USAKKGqzjsGFfB5wAcRQNANBG9vs8uWKN1BxIlmitHXq8xgFE7BgWJ4PU93LDsgWROo4xT8PzgPEfrj84HpgiX\/gRNzAuA1gQfiCVArPx\/XGSk2ugrQ9CwsrvhhXLpVlQrZ0NJUNnJhlGVHrY0BTgEht14xwAAkQQiM8yk65ckcLFQC8JBYcMIWsHqRXbFEiau9BizwbDURVTbRkkmj2ONLG2qQGkVAoO9985bKnRSgFnNiRpHTqPQ7dFRXVHfnbYNbLi1NSVcJDZNpfVxDRgqqgHQGno07T4jdkAhl2CHNbZvbrGFCoIBsEVqzwv6xmFjdpei74QZvYfebhtAFKU1qIrvzy8ceDQbNgQu2Woj\/WZrMdkQuinQ0jve8qaQKTtVNRGR4m2YhVCw2QoX7N3VEcIwrIGVm\/vQv79Yt9hT6cAXmBHxkTEZK6wMSgCUfAbXCYFqyvSPacgSqrrKXRFkdws9J4h4I+0kJBpAvVClQ99XNEEkAQW7Qi0OXK0KMKgAFNbdd8HMAUNoiLA4eQhXtcNCq1QVoOhZKbNsVxylZoMdmx4aV+fWJyUyNLOgjAE7f6SD4qgCJhHhYqb73IDERELAAFdPfDsphcQiMJQ4ix3o3tnuYOXkEEPd2qE\/N8YSkasGioNWb1s9rcSGigImg0dwFdPxq4QXZoUVh3t60sb6wxAQo0LYgjsfUJS73jp0aAK6Z2EItpd+DIQoJCodWBp1Ga2TGN2G6oVoaEeerrJnlikRTj+bhYTamqB080m\/eEOmEdawwhMBcB6wFoYKENACJsp5Q2D5S8wBl5TsKrq7gtB3NbxjWkAPSrEAGuh1fjH6OJMQW21fjb1U4ZsuHTZVoJrWk38ayiTuaBDwpwB\/kzdaRaZW8nAu6fFccShZoVPOjqbA7x5hFOulAj1bWWHj53jZwTxEkJoWrUeQ24xmyJajsCTt3TgbwcYRhJkIrXb4nz7MfKKCuIVFqarfN1MQ+ioLUAnWvL4Fy5MIpFeXQkJdg2GvOBbRAElBrVJas\/u4RKO5KwKRNG9+Na5hINETAIHgNheaLkwyIuGFaAurDfGkybiNhbKqNRpRl0r7SaXW4KKUl0z\/GG6WpHQhqPKH7D1gQ5hPWAvi5EfOFhyZe\/nEVxPYTECXXnA15h4sHoYXiTxg+6TH1v3l3SfvJ3+7mF+P3gt0xvEYBZXoH53+MOwAtCKiwEreV6vrLdddhAVBnujP7YggvidgO6fmf65qUihZUWCmk3T4ZccSVOHXyfiLrvDIdVPh0n6\/vhehvKgCOponH7HERRTBR4WmWB89wUAlTUp0AIpHupuauFAAoFDINcr78XxlaoRTEFJTaE6d\/OM1g7agDGhKiI83TNUMNYIiBp0wb85OheTEQtlNRttt9mF28wQjNNiIo69F14eLMkBg2A2FUax+nHESqFNO4uw3sBR94uG64o2OhU02eUEjk42ElgCSF1RfPRLhMTMCNZpdoVH3p5l8i8IqhovFFJe2YRqkqpRF\/YTCKQS76fD9YL5N\/OHeP3ifh+8O0T7xrx+8qCMK7JDa8Dy\/rBk9tOkgqnkKB5a4bisUBVWk9Ub9ZYVQDKKTXe7lp\/XAohUiFTVVJJ08usIuhsQans\/J+OYaQGsdS6L5dbmB5KjRdhNs6Nm+UyREhpaq1Twknc37JC1KbVPYN8+dYAhSCCC8B2Bq3qu8E0C0KrUHXWpHb3zgjwBaqamyaY7NW73gyCIAKooIFXQqWjB7gLD2pQokJvrniXe8JxGyRKwOW0bvU842mJWoNsFBLUnRwGZITTS7EK7JGj7zeUoAk0VRYl8JGI9xoRJN7DQNCVAmxO4m6AJAWIKpeIOnfExCkyiICU9KlvllnnTgT2EvHN9DvscVgXgjrqv1r7HCvGRhHvuEeP3lPH7w9o3CabeMqZCB2pFvgLb5dGECVwBgwNJViTXn1iwQ7EKDQr5Y+yfWUpEgmrYAHQh3twkKcLhToH1fk3gEHsAjrdft0Hj51kYHQC7RO3YSzzHHGVKAzcADhLa++46BQq0ggCpeMAy6giAoAtJ2rVu9Q1jqJThSpqD4RbXvvuMKYsqoIQLFKWeheYx\/rYiiCEqkWS8qcxMDrpdaB8jPXbgkAKoiQKtL5NfPjALb2SrJdlQ5ZYJcB7vW2rv4Du7xH4S7rACKugKxA8TYNmsZBrZRF2J5vbvY1zQg0WjgwXVqc0w3cQWFgyO0+KDL02HiCUFRAB8Nj72z8mMYEwPB5H6b+zBY05i\/D94et+8Zyn7w9LLg6ZRmqF4VVDbUk8zE6qDxopX1PjlPWKCtpsa1Sa2yuuYpZVcSrpdPCfPnGEAbKxlfPkdx+8TAQmE2QaA91\/WBEoy1FOb1zB6BBrSAtNvl+nEJCgdkqERb3Hx5xQlrctAVLoKL7QS6ywgqHUTYi9l4d+cdDcQUCqWnB83WB3BYABg03wkoWK3HI8BaVAsWdOtamI7B0UVAsuqkdT8byXfVSA24sjqfItMbFLCZDpQI0sSCKPiEAhRQElRaUrFhX4xCMbANUIvWjvqUZuVVFPuxYqV4Tw684FRaIo2PIxCb9cweFAQxSXjrYD42ZRgEiraCvwkfhwo6fvBXj94et+8TNpiL0\/eG3ZrDtibOmGj8sPzhbGrCFDdm3e\/GoY7oQnEZorODIm6GezJQGInbH4\/wA4QEVg3KyLIPmmtm\/GTAaZUW2Gu8Bn4s7gxWp4JLrbreJoRhDZE5DVO3\/GCiUAFAgkVBXurzJN0KKCDYAbjIeYm8s1IJtU3QfejxrWL2OzJ5SnRvjn4wF1ikpREVRQh3wjszYJ2AgXZp9rHYkcNLWJaEE2WyA19TUwm6qjsq7sJJsJ5rrGERgIAkAM6gs0kyuyAEvPkiOmzX1iyBgGwGghMZN8R2aHEawpnSxOGwFsKcHQNpaUEAoq0mk6fI4RuAgNCsl4UJw8WYmILRUm8fif0cpabC3BpP2YeEYjw9dwM2j85fifvC8RfvK+k+8+NiF0w8wwYpgPZhpBrL66+XJQ87zFG8+sOTtOLJhuLNnnPFW5W4KEsb2CBb6P5xYQqPVQNbm+h\/Hcswg7FKpOnmZYEQNCbTq88Tb94iCiiEsreefzkCiUAQ97+f3rZzFuS9TtnPxjluHE0G2FOHrJfairKFX+uNqrGgYVCCl4CDTeWILUQaGtjfLdT585VO0iatoJNkQ1rtxmEFcIa\/YoGvzjqJLEOFEXXq+cAqAvgBHfIXfs9Y1wIjHbueixOedzDYLgQm0Am6qIwII4\/easAKKl27WoeE1jpKkgdyLwKDa224YBGIdGVrvVSBDamXAbuConNEnH8S4wytfYJGjag02UuK7StHaDuvH377hBIF24ps\/Y5ZKT3cDOF+HBqSCe8jSDEp8\/eWBtfvHV2j1sVG\/AP7zWI+y5AF\/YjH3jKVErqIdgamjDeFNlaEDdTijr5zc2Ah185VgHdHXnh\/l\/xiKjaCK2blzSCigA1fQ7m3+uApjgFDIopkp5dkR4RXXaEHA9SIh2pAIfh3+fOFKRrLNCur58S7lxici+QtFt8UtOX5zd1igaE8Px85JAoNa\/BNUDx5fjBvhUVj5GukZy9blspMCVRau06nogEyvC4ERsAyFGeX+Me\/K1AtdwNUTmujvCOVbg7gBoRZyhs1gMlkKwoYb4TXn7wziBQ0CNbI2lPDvFYGovRa2+b45biHokBdkvPHP5xE5\/DhpePveWF0+ctvj4c85O\/fcCxugAtVhPneJeKzdBVE5QTzg39lQIcmjdKiu++8UXQ3Emy74gl7owxAIt0KRJrzvmLilF3WAy+VXZxlPFcZBAKNoG\/wAB\/VwqAOEo769nmfjmWESZW0AlCkTmbPUgqRalNrqAstzcAwuCRWbKK8vNeMptIVAYfS7C3WOyiCKCKKX2eJ\/TFXcMg36b8msYZtJqxHDUAbx3+8Ax7JWzwCLxLPPMW2CAFQg95rWvbe5c3anqcjNg7eEnzhMowAICCD4fRY7wZQQg+SAQ+Cg6X5yZMGGJs9O0d\/nwme\/gNERpTUB9iYxuIgvKKvqc9ifh4kPgr+Pbc8iE0l5gp\/LeNzZ8bwOFv3jKfzcdAofG7d4+9AuwUQJbxeecYJ+aTiW22d5iHgqWogfXEmvzlAQQACMa3r85bVmda3sJ6P8AzFU8gx0SfHTnr7MRcG0NWHe\/OISK3ohFOrYesI8MatRN2eci0ShpiAoQeo3QdmbQbmxNrNm1sdD5+Md0RSVUBEDTdNs\/WX+3NIFjRPQAXzjIeA88qIbeeNZYiCo1JNHwrr2DhS1lUIcVNiydpfHnL+NlVAReihCEW0TVwl9QS1RTd5dfDpXLvAASrhTQrxgHmbwKesFsGtCvd7N3XyYpQFC1Ki066UTWi4TgU6RQAIKXbfCLgktoIqxNb+veT4K7vSwf4yruXxvNur\/Ocb+u8Xprr3l+1rbeZekKh5UK3Qt\/WBySSNC1DfjyW9+MnU+Au70Kc0uGwDZjtd8Gbd4ywWKxw3N\/rJCEhtivvXJrX6pjslJ2W3zPnHwuowKxdChoHOxU2qyaH+2GNRGgPSA0Xy3d5g7EIhp1towTRzf4zSgiqICOhNju\/McZK0AYiCU7op87yQ3NaIETxdDp7kIJbigmm3m1eQcIm1RaKhV0ovjTzCYegHTylVCDtr3eUuEAhRtFfMDU1r4cIpg9AUQJ4BG2vDQmEBaci+B5IXXUB3g9cL1CsQ9bXb0wjzTIwiUreApPcyooEDqnODro72TNPhR3wKX8kxnuvnfM1mk9XOEn3vuM\/wCLhDn8uJPEvvmarP1cQdgbIONjP7yB4v3gnY77xAXf+MFIRHWrrGtH+2LD0Wb252RVOvjDtavhyyLLN4iHk4CnL6H7w1QubQrsO6o6yyVEEAHz378fGGKu0t\/zixqrpiFj3Zr95KxBgA9Ae3\/rxjoO5TyIM13wzbfGEkpoVHXz+sElR8L1O+eT\/wAzUEJQJKIiNrS0hNS3DVbQhdc36067\/TDrQRUApdC7JubD9adyy2uhwB0\/LnWASERTAr\/nWscvaRoEC0UbBR3TJsBZBDAQ2ibDmtOGpqmRMOk8w4qujBhe4IHc7o3yHjV8ML8Sa0bXZpqOz3TKhRRvEtNGNJT1r41vtAlAAUdb1v0+MbqiqlKNHHoA\/O9YLqCL2UUMO6NedXCOsqmok\/o585oxPzlxfhiAnbgpNz1gz5nrDpNAzKGpdLCkP4\/ljdVHLgWI9rd4qrSEYNw6\/b1wgjapsvI\/7+8kADRGqXYpzRrLSIL2Aahu3zvrklhekBV8k5KJMDAIr1LNnzu7NawICJXgFm9\/XvAG0gIFFRRVJpW73DmxPdO1Mf0bs88MisO6Ne1OhiWWheYiDQCqkIsl4sP7YZEgAurtLy\/PJgQhOAA7CSXoHWqYQRkkQ0ANcFV7jqQg1SNOyinkl73NB5jW2utdBb3mtBQlqiqBijrREr8zI+hOhdikJrY\/c7hgU+itCNQCzXpnMJGFXARKCJpUD6FcO0jiQI2BrBI17MnyzZL3+Wzv+cTUqR9MyT9jJTXMQlU1ZgSTA7AV7kBr+X+MkJJwJoTZPJJ494kOkwhdorvbDmdEbSV87rPTz5DHWwK8hdeUmm7f8ZDguhtqIqulWdNXJOBACA1ETZqL3DFMa7L51X6nOZCwtmamE7U108usFoXGwIZr7JlDxtbzhPPOGKjlRSF8aHQ0Y\/M71FIsatK\/CCpr+cHRMEKK+Y\/75wtBpVQ3SJPe5TccB9ApRB6Wm18Xx84FKACsUU37HiFOXKJwgS8WPya\/nq2kSijqUsh2Gyr7w5ILIIIUGHuQre69Y9VYTW0QAHKHy694U4HRTaYN9ysbamSKAw0EWONUbqCL7wDGRUmhyfpNf4wmqCQ8Ng\/lw70i4kGrl+qPvDTbcR928D1aP5TNcCWpQDc5F8feKjSqFAe33Dvr7wmpSkEkepDvjLsgBavos3\/txwtAs12CF1st+sGpOJtAkIbn++cUCQAEeTKw4zzJruGAdlLxfR9+MIIsSDbTU32Uwhk0UBujwKEaG+be48gCzKdWTe\/PGJrWTxEUgKDYCvjzqP1hA8AKqj1ox9fH4mSJJooBBBr4rsemHKIC0UIRwYSng94beUjcFuoDer2RN4lfXUg9kc36OgmzIYzNwnvapuahrb4Kf1UyIbrxE43TvH1WCsQjwqSgXoPZjvQA22h0dxKAfL7uGYFUCt0HkDaPvWDb9hHrRrW9JvCwKedRRh96P5wybuAH5Y3280Yq7Wf0yzs1hMAFoEFf5T+MONhdAgoG4ghlKRHqABqsPWp+8hAFdtutmbhkgow4RXzt39fOCxBQgCKCOmzvOYlhpNigjd3rpdZY1CDH2xPX5zYQbKcrw7fjhgqw8AQM029upJN3EM1vCsexdG073AqjRgrhLLKIa1zC7bCi0R1hN\/PP6Y7IIIEANG\/H\/uO3CiEQFKl10jqYRACIjdkTyJpD84kjoC077aleLqs8YLLQJZDajrkLy764iQaopajd6NwlnrG6uLwFIgiyGkgAF54xMgb1gGldOj12+bgsDKpdEFnUDf3zAZ0Gxjg80RW9lxhSgKPD340jgINP55hpecSO1XJMrvL3DWbZvfMEuzfG8XNIfdzYe57wrrw1vKxofAOsF0D7HCoT92+MLGjgC+Ulxg6LMQNA\/nH6h+s5Mdg\/If1xuvQBEa3a3VtftxGd0nGy7YYFaBNEGkuvn47gak4RmNtIBU2RwTu+ejIBKC7Na1\/Pf3iKlU2qHrz9mWSxaqIsqe\/e8BiB1QLz50z+chzsIgQujxkmveIbYRXbbTfs8b\/eE1ArFDFnrpbrfzkhKLqRhp37ZHNeExDBGh96ZPGTYXMXhKwo6GHa\/WS4BrwQIIqNn9fLMNYGgilaLtXlgSe8Cd0ppNWIxvhDfN4OyiQ8JpoFB6fExFQIVEaxxtoj\/rhBwiCpARi9Q1vXHCQlVPKAUGvCvs94qxryFUINNJdC854zYCUiibFNnUSYU1US3zk\/L+fDiDuOy\/u4E3MZoA8GOEqKaeED+v6XHWgJ1G5dsO2a+s0aRWLYt3z185YNKMSiefJp3hAKFQAdXXz31lJBBdQO3aTw\/wBJgmwkwrZ63+P4xBLBixAN2v3zHAk2wSh8c8fz84UaUES0KxR1wN+MTThYbC7Bkpz4wi8CBYI8He00Scck5UIIL148f2yyArYCxnJzt+MYJQgEQLsDNlP5e4QCFGq9AKzSeR86uFqMLC2jQVQO0KuvnEiCRoqQFLeIknrGd67y7s9bTv1gkAJIoVpppIvw4SQSgFumWurQX4PGJaRbCiqMOnB78vchBXzENNSii\/cxRfGgtgrOmyI48YIEGgA6\/eXbUb6yg3rxvKu3BX+v3li1qAsAXn5n84h3AL0Fspo0S\/ZcFQC1CCCwD345\/TErQUBu2hBnx46YSumygChd6mjXvAFtDZUVERDoTc94xVaADee+\/b+8vjFogUXTVfj+MCyg0pUXu9Lb+PjB5EiyhYBBpKt9uJtQBF8Nak\/1xrG0LA+W7hfXsyWmzdGj0L3++bs8XgIafDTyfOVoIwAyePlEJ8GEogghWgJbr8U2NyNIFWoR81g82vvXMXWitkUFsT4I5fpFBYGGhZutnvPWPEKEyn0h+zCNwYIKhTtdpH+cctVAIyJI6zq\/g5g1VAqsBGEuklOU9zDTK1CKihB3obfPhxtogHyh+dH4mdw3+MMm4Xy4tLlpouKVpUWWbn1o1jDQ7ipAEqe3\/vNxqXy9VhXxrEEWFDpb9d8d5gE6NrUd44BKiIsBbrm8AIEkGjQePXX85r6DEsWwdXfDL5gNUPec8MxgwuhsDgD3ad+56wg7zlFhEd6763jJACKwp880fGubxagWAqZobIl5jXtDpAj39ym8atgEhZ6HqautGIN0wCyjwA2c2kuasdpKEVSDUq+N3xrFIQEAjasEHRqAt3XuXCEEtAkDWns9uJhbsVTxgH+mbsYmIyWRmk\/I6yHwKEgVAVWQN9uvnBCAUKgG1JKk9094DwCANIo3xS7D3kpEpnWqnxd\/nCpsnxikB5kRs\/Dd5cBmFTqF\/W8cASYEVar\/AL9ZrLVYGgr4hHRlAEimhZqvrnnKOBpxOf41kRiiCgA4BO6deV8ZogJ8AQnFPxjQgRtXnjv5yRRVsiKsD5GYOg3VE07+Tjf4yxRZmNJL4KWp25ITFAOIQ9y\/P3jGMbAUb0PZ1r5MSUhKEY6rennHWpgO2JROKU+nBAjJhQFnGjaCejEeNnGIjVG2\/b3WbdHQVZQEXbJqaN7zYEGjdUaBN1Efh1gXSCDSlgDjZa7HJsBsa0AraIP51iotWKIq03vVUPNwg3CgBHVl3uz79YeIkzQ1RBwpR43w5ZGrCIiwp+H+MponyGkf2wRa2RuAE9PeDGlD5f5wtXTy3CVduDcESAJpXNyKHDeDTrTh4xkVQ9C4a+QXp3JPIXg4pqT6+8QeL61iu3SaxU5Q8ZqK\/JiKAHRm91PXjBNFPZygPwD64YQAVFDhC0\/gbghF26CXEBFEu\/ZP6uOw2lgLY3uEBgxqPX5w6DEtC61rCqVQQF01R8cF7OZuhLCj358dZr8ZNEeoGwCro298Fx1kCoFTayqEqnswRCawLXVVeFOfGBI2GhoUn478YUExpAR0x+Lw2H1opSUQot21lf2ei4AomiiIbNlC2TpMcAUKEVLQ1ujf3vxiKliUKuAHTBCTfziRqpGxErfI3nLHW8EwQIDTE1sXaPLrmFonN1aT5gB31lEPuCPALwNA0kt3lYhNmAumDHSnjG0jPHaqgiaqH0fnGgcA4m3eKY1s\/WF1r6feG6NfWXCK47s0K\/GTgF0AglvXwh+MQ0dFAEGqnyT+cW00JzrzAlkToJ2f65sdiFUdO+TEiQHc+vGD4prvcIotcXhdmKKiEAgaUNCks9YVaEEoteH9fOSooUCDcvgabJ5MbsAV2jRRurfwTS45ShDW972fl95PGqQIQBrx5F538BjaisDZqCHwSeZioRBsFENo6UdTwYX9fQPBFhYCw64QaW4CgUYcAC\/fzjuCVpV8lva5rl3kSNMRSWA9AKw+TxldldKHEV2dP1gTWnQGKnem3vObx6bFACbSrPOjvzvLIlKqMiiQ+C35+cB5i1Gkgp6NaxxTU9fziXj\/AFmUjG80Yij8e8AQo6Y6Ah9jf3hKVVRTVgGz7bfjJpGDXOX\/AH+mQTptFfr17s+sNaWyogb6OvrzhqsbAXmo76\/n1jcgF2C34zogkQTsO755TCmljACIjJ4Hj6lxhbSKW6DcPfMal4KTSCoc7a9jmpaICqkErqbmg1vcxDIh0iK8v1oyg1CCA0t130j9YUqIUq69E1H4rhu3JRhotE5zYe7nvqYAF0pou\/0YDplUAChT27X8OMlRFSV5RfPs3vCyIFdIaQvKgTxg8hY2puU9h2fjAUdYBHKn5gfeMNgfQEIC8C+\/4wh43BUSAj89\/jBPFuBql\/sqPyYqMKhRxL19ZpP4MojEMvzQzzZB\/GK9iWpDSk\/TV74wRJV2Vn++H\/XFDSvVmNAKB40v+DWQKqsrvcTmInQ01HnvGMUD5L2b+8EUAHhwfPRGa5tzc6Adyw9H4mLBDcxBeULtdmj59ZaoM2t3YA8o3fjzcSjFppCgJfLo2njI1S4CIU+BLmoyEpQCJKG\/Y3LfxKOIlQUlVsUDX99wk+isKIWiFb5ry48C0ChtER31i+deJk3GQA7lFhq9N9zw42i2bxmnDpYV4jvHaYoAu2gGICiOxPVxAwaMmwEDoebPJghRQrxNPmxQ4bt1lBxr5DZQniiYB12IDYA68l17WOK2x3yTH1kB0\/0ysE73WXDTcrmSwvhdf3ypAbWRI1+VuIwVEHBqAP7xRTXo7l6avycuKB2BSLazuPp2FrtwECiRAvN\/7+MYnyEBTWoOnfv5x0AF2Jvv16\/vgSAiiJWSrvWApB0VW0dnSNp4x7EVwugmliEny3eJwKjpePZ97wjK4CChGF5xQ7ebdukPKE1Aq3XOzvC5deyIjd0JoSbLu42mDQISSkLYt54AxkihRq2iR72nyecJBgQslIq6a8k24XkwXihqu92U4l8topo0ECA+RrpfJgHASJAFAx0eLvbvWEaqABAA48r71MKvFrY0G6+Wfz4yBAniBetYgDQsfH05pNaOOKm+drktJYe9OMai+dYpWL+N4zVq9HbgE\/OhwAELd4760zx3HBFnA\/nLnXWI+2GjoDEzSRP1kHtezDaRGocm8cw0g0HTf5\/S46giKQujUfhv9MNkZtwjdJ572G39\/wBcpAabtC\/n+mMioFQtC9ftmMRoWy717Z45jwAexPM7\/wBZaiwIogAhpSfzkxKIUBpWl8nivgwi4XSWwDNS3YPybyKwaeQhPV7Uv3hVIIQUBCIXzP3vC0zBIAtBOVu\/xvGUog1O6ptoMm0vziSNUlsaUpx6vxAwzSqQUKQR8KL5gTDL0Z5CxKWbSdcn6gJKqO28REjvXTCiMsNn2Bq716dYL1brYAVF96IE7zUy+Si0FbUCsQs5s+cmYUbwUENvYKvkjg+GSGgQRJwHeB2tfk3k4bvj6ySrPvWaTHx+cbreuTHBNT8mnJUoHyQGp6r+TCRvAJXegj\/vM4FGG3lnc4Hqtfhmv3cNPrV3jqKIjNXdk9UMkAruKOvoxAFCk0jfNn3i7gl2garCuHPBIQL7Qfxh0ALIDYUKhxEqeDeCCS0CSl5UOIpjbBLoSzS3ZqnquSV5ABlWipzzvCWSI7SpG9ivdenuassoLAWMJ4dzz7mCvGulVEN68rsPPxl0MKm0sB8rs5rXnDx5whNlBDSIZqiYJVbAFaQD4F2gafGJWswbJFEANDNzY6dYWAgECEBhuC6vmM8OJsh2KoJFV8hVPc1hLEGIiCi17RJeDkAigEsnS\/a5V6MdecI2l8MmBTb8ZA253HAZSRibc\/BgmAFAkf8Av\/ONoajYgJah68mGtrajWAWw86n1mxUOqaF86yku97NI4\/scIkgHTAutju4BdtmqdLz5E\/GBSDCAFAGt8HvAWhNFQNuu+cQQq6BKoDs9R7536xV6XLTShvacfOPUgRDY0kIwG7Pj4xjdBgbHQd\/nLuitYijSeQ9c6ZcVVT7B75v89xQgPN2Usk1OYhmAKW67t47ozflAgiKIFk6Kc+MH0gQtCkD2936841k9H2pNGt0fNk33NkMbAKjVnln6\/ebUZyoro8zVnxTDAEZ0ARE\/AiB7PnI+YyWiqKnqkzU8er51neTeM2Y0FafGOhWAwgbeuipfHP5xPtJTs4av6+t41G4AaUat97\/WHNBIKD09a5rDo6IT1iU7gFk0\/GQitWd3yBXwaMU4VNAlHey+Gf3yHIzVBPr5yhiUI0R+ZzIJWIESAdB8s4ed4Amoq00m7rjrfswkSUHQEmw34+5hKtpA7ek2fC\/WVS5PRAC8kPF+PWRzXQd26E2AK+L+cD9DrqCBSJ2MngPLmi5TBQEjhVRPEM3XQRgSI0OVC6M3iWwNgJSvSi0fxgM0LwuE2FCLGm3twqEoF0OwXBJbfJiDqt2QugBt0MbY+8cFSkFChD7NB6yQuhTuAUTzYP4w1DO9swXQTYGsPFHw+MFKN\/phdQ6aLPnCHRNSjek8QPxioIawFQGr\/H9cNPQFnZ7\/AO8LREptvf8AHj9Y0Qd55XEQsFsXT4qHxkiWDV0qeYfEcYFSi9nS9PXMtFIOiAGbT73l\/gqgjHyfj++NsAUhoNgEtow\/WJVDobFfdZvw4UKAUIIaq3b4ZpyYUYtAIA7Z3U\/OBdaCiJBhfBsPimQVYBG6USnk08gvVxpUVHY8Gvnmvi+cAiUJMAQXaEGr+sYgXAq6AgmopKYJfJJQI0tmpPFMUQTQFUR3Dyjmmk87QaBbbtoepBddNfQNDuoLQRJ7qgO\/XjBmRhsBAPvW33XBYwgXa1p99zbaNObcUNHt5c7qg\/jIKqB4uPAQ5XxnbM7Qx4B10ccUlp9cxVdp4phU3X4xI0HtwDWsU009hjbJ96wM5r1MU5v+2ILAGjLFB\/IP4xgADVWV0fjzciIowInvx+5iAN0O\/EyoB\/H9MoLydcCoiIBYJk0LZ0pv+\/nDqXLYiIDY+Z85EcqiL8X6uMJAN1FFWB8E\/rkQqINS7CLo15S7jN5uSSqV+Cho6PvWK3EADQBLfz18ZGQCAhSsVDpsvmGN2EVJAEIO2+fV84YnK1lNkWRhXXr8ZOnAEAUZpgfEPZldBASqMWBDx\/Dj+yKIKCJdXp3xHGgEphF1UjJaO5K8wJpqE0pVZNinZDlwURGw8jfCAOrtvuZexOBeoB9BGeoXKK0g0drKDYGv1iRSUrfrJH66zU0\/OsOpBfWChN4zURPSMOEha0S3SHfer+cIgm03bdUuLEHas+TCEO\/F953+eeMZyxHvqYA2QGu\/vAtqQCJATViTn7w8WCsZvh+HDY00DYErVbv6xItNQCBJAC+\/Oz958C2k29AdlL41iI2NQiQA88NLrxhRNLFGAHo9qC7+JvNJRFI4poj4V2HjBgShxNHSAale+qdmOyZtSClgzroV94hjC1RVSKbdz4mOhRa6FEgpQionm4MqNUKAoEoJLHutZFQMFUGmzWrbz3qmOzIIhTwUuwp6o5sWGlqDab5QBvdhNYAlQtHQnU27H8Jm4irqTY5X7JvA2TLqmGQR9GCJPPJiSyk681P6uGo1qiNm4k\/p8YijbYDpvv8AHP1jCGGvPHw\/FmE+amteZvIjuvw2ExpgtjLXcfXPnCXyPQXYWifnuDS0EjoDv4cQWohDVWFV8esJW8FMgH3OzyYKcqJQPj8oP7we8JjVXaiePIfeVuBIIY7et6ynj3hJwCAjLKeNw3kNj0U8cgeZ\/Lca3KTBxZXXTuQYF0SJHc2a8ZDShew3SCew58YkmAUaj3fSr1nnLFFhLd6aJ68b+sCBkZQysbvRS\/rmCFpFGoEBX536kfeMAIoDNrGt7I6PvLYjoIaBCT41hnrsriboJ3maaEfg1hIPD4w5QmJ1sFn4P1jUQkgfYL8tX8OEFWuxJ8P9sk33Wm9x1ppjQevXvBxwdPN+sWUithSTk7McgkSWolmzWs3YKFKnv87xAbBEVuTmrPWQmmQDbfF5Nr8YycYJCE30+EJymTUB9RG7B8WJS+8ukqHVA5FPCBrXnDhVEGgvSl9GoPm\/GHYAHuhUBBLsu54zWGFTAiUj3n8\/OK1CUm4Q0k2fvCSiqQCVgaNu0GzLrRTIw8CDsPxPFybJbWKQoLuKNNQfbij+LIUAAPDpb4fvK8kgQpC8Hyjp8ayGK6wrpdX4Nbz63l9Cp3WMGDxzC3aX1iuXZI7iRPzzCIMZEM56+b\/GJVRB5s7GP1zPuA38YNAd2Tt+sRPG+8ZWiiblxina2aj69ZTekKiNRniM3zCBCt07Oz8YgqIoTAGEB7x\/0x4CFsxEK2BQ52xH6z1WUpA4w8IIXfMaJJEB2K9u\/wC28YoBoBaqIHiDDby4U9QVAim0jtQk9Mx0CIVZVAiyR1863zLxUKIggyCkANn5yRSkAkZsAtYvd9xMA6ggoFguwIsYYYAgMFUa8R350eTJMvTkSlFVAfv0zePxFN0IBPCi+GT1m8JjLBIgPQt588uFAau0BiABqx8+RxuUuqdoNwqc3mNETzydwikLql\/37woW77OODAAPnWEgJRI4\/Nt2escmBHwZW3X1NZo5T3N5ZNDzrD4MtmsMpocLXW\/OaKk8zCNpWI8hX94hsFJvz58\/vFwpyk3N+veCbio6XGABIcm8IAgzb7yehfL1+vw5uRQNz7wwLQinvrb+MJkAAVW0KCGyt9YC0AoatYoHvULnngDYIXqeinxg2DQd7Fq3Q+vvHcEEAMAiJKrSNDtuMY9VRNiTSO\/E8LhcATsqSCCeKDvWsKVlBSUqKkZpnNfeBJDClQNiu7KHvmPzaC+kIIoElrDXM3rAmFgbaKR7A55yZgj1oIbEJPPhEvcOVHQxESjKuppl+MJoyAaQY64rdb99cdgUUBJ6qnd6nxktCkFdFKvi0H\/mSCRA7mo1zCvDL+GEGB3uaev82zDQqGNsnD8HcVioxiD3v7ylI1nrmAKAra+8EohPH+caea91rJtAJs+sBRAUTbEfjENSHQqhrqFjVR7iqAGoai83vs8GsRRpAEDzsHt0e8KRUKEdLEnlW1\/nCQQGxBaQiieRRurgwkgFIIFGD8HXcfOFNhqpSuMFaIOviTGBS1AQGJdig+9OX7WgMBVFXyaSc34xjWzotVSBf3NsPjCEJERrGwPQiO7rW8AIrJaERGwVSI+anDJtTecRUpohR35TB\/iIRFAAB4m\/j5XE6zIBaUAEhFD8Yd5HgEcEmrH\/AJjg2O9fmZFSdxqmb\/nFTx\/jBSHci6AA2m3n2mbLAmldow9ff85YIi7QED4yBEVf13AECv8AT+PnB0WoqTU\/2YoSBq3y4rZA1L359+veKtBAFvlaHjhvE33SoakLt3zWNCBAsEH5vlMCdV2Cjyx7pNYCSgEHShv5i77m4F4GasfW3f19ZdQo98zUS\/7vHohVU0TXvfkD5M6ud5s6Dz47jNqhDWJAQ2pN61vOtTGxAhftefjxzHE+IF28fLv6NXABPkAMKxhDabq3PXtGGKoTz+\/zrFjaGjrySJt0uVKoJALVHXmBl3QbBea5\/OQ4cmNBfWaeGNYmMa1SD3g\/aZT6h2g5dCfGsRJKPTd37\/GSgdg0JgxSd\/WAKAB47kdSCpb78frG5Qd6Zr7OYeMl0wnvfvh5wCIQoBVqVsK3tuJYawKKAE2eInN50GBhKJtoepPxk4QEQGiigPk9\/eALRKISIbRhCIbVt+sbNdRENCbGnvydXzjdGGUIk6uyujzzeAZ0nYUJoO+ffvNehrpyFUnNt8YXCoTohS0R9p2b83EPmvtQ0g2D11Wb84TAIBNTsUdauvHeYCNUQgeEFocvKt8YlBU6BUIqWOid1YfGTswUADqDLI7\/ABhXGoPbFUQvAE\/eBJzKa9W58HBU1csxDVd02MUHQfRut3UvPrGmsN0eObmKVjaxcQIJrydy+gHw+scILNfEwC1BN0cXASTwFono9a1hSiO1QO6CDuanxkSFLbowlgrz9uWAEWHF2TUAF1gWAoSdUEE4AP8AGeMmIlhqutmkJNzfjIbC4IzVKaneD3sxbycAsQbI6pDbN7xJgjSkqAShZU17HephKKUsJoEq3cj715wzYI1YAalA0s8Cr7zc5tUhC9eitD01XOxU0KKoiQ7S607XWGFBTTvUFWCSsBw2juojaqv0zvfWsInBamkq0aILjGEAFiVVZo0GIU2CV9DAJJpcsyF+caSEychO2YaDCzHCSOEuj1JhC6Hbr1kbpZ4MSGo\/jIPD83HkR+XBLQ\/OGdIeVcLSfuzJYHy3FPyQb2br8Lgpdi73ZfnHXBXzPPrPwDxP5xVQC+cdRP33Caf0491enf1v+cGRANO7vnq4yiIgmoep4w6gUSUNciaeOvjBUEYCyK+4eNfxgHwiUA4vd+Z7cRWAQq+UB8hvR8jvIMnRqCoMicYphyDRiSSEJ5Tm9YAWoBUiseKBZPdxkBtOBVpdkJr2uM6jcTieIaCBoWHd4niSPGU0DaVrPveGBwaQFbdRKA1S13gevFGIx6NKxR5IZYgVVUa8jpIh7e4+fIiAPYKSUDOo\/GSxI1mhDqbkZZ84Wg+d\/wAZqzfvDxPLfDhStvvERK33i6lHSfDp\/vjGDVX16YLr3X4yhSvmznv+cLV35LlPmcxiq7ULfGbEinwfWCVKmm5v16yYNnQBL6frLUErDbPLqJz+MYFYaUgE8a6zxgKoLUK35flNZyKxoiEoB4U\/jWKAsREnSCetztN4llTpAhgoPFm\/vHtrFgsBtS6B27TbzEPAq6oNAe6QrsrkrSoEQVFKjoqwnMmhVgtFQXqNeq\/eWdiYKA5zTIahLRUyacoGBUXr4RptgeMmyPIdWBI7ta8DgakKCBCK26iAL4fjGU\/GHXueiR+cuUAKWx6v7XIARtnfOayL9OVU0HzhvFby4zn1G9UYzNKb4B+rlGQpRQ37\/p+8Yy8dl4ZQ6nr8cxRpCaOX\/ORM0myUDdwQNsA70ePK+cavY7J38\/1MJieAOz0MxYWC9EL7WTFLhPq\/e\/ofvORTwEg07\/rPOIhrG0ln473mtZcKm1CvnobNXIM7yG0V7LvXqc5jcosfOPGfizLgk4BV8WV3fBq5Na1FsPEXrqXI0JDChHak8tTm3usMrHZAPYAHJCfG53HMnRsx8g8BTXxh4RmkjsJRqGl9WZBZBITRdIePjDhQUGm1h\/aYdIQd7x5ZdXTkAaPLcD4T7zvl2rIATf4cmTQePf1m+Rq9\/vjCmzifGE0QXuPY4auaNNbwqgpBNbnP53iwmC0s5H5ObxQsBa3YuGkEF2P4ZYnvIoQ+BofWi4v9mAljYAdnfjJ\/tUrUJsfO3rjEhoiAjbvjsTBMBAjiqjHoddE\/rmmFzpQ1ddMWk4nvHK96Q8BTSzy+XRg+YiKVAyjxoHWy7mM1QjSka0PvhXYUi4odIKpo2npEsAVmssuDwQlpB3sA\/nDTWuIAmxVEIvLZPGLZOpgJjVjQU+OHjDbAbLdTb+TCtkvzjUE3sXeAkD3i4xoL95PTTPkKfyGETroW6CBhAQVOvvHcgg95R\/0xiiNnnyZuGVv3MJfm7fnJ3XBT+bv1rLz0hN+OPr4xRFQajX6YfK0gFPyJ5\/zigIA2pHbwO6synaVNAINNfgty1HNr42rPh9nd53VYK101JAdHHffnDEBOoHmaaN\/vbhjlQbvkDaLdUXXXALC2QNpFZ8lndYWaxugIoThNpFt7kGEoW02unQhCQD4wsCARQoArpEPLtZDI0DAABShURok8W+cGxDAiWbSIwUbk3DCoBWiUl01t3PeMdyDgh19F2P1mpkBrfDwfrCNI9K\/xkNj7usRbL1vF9L47gRCuIbHcEinzvAOpLrNUgPnCICYtIbhvGCV3uJowzX0EmOiisjG4ylh2K\/rEACCMatwRisZwCLPMtxiFfjSKX+MFC+G1+cRbdDo8fOOxYE+sZIMcFxw1U85YLQuaTRSOryy91H6yBNr8Gk\/zjYq+Duyx86\/rrCrX4BLBwpVkWFHoBdGhh8OJHtCVt1NjoE041qWwqwFG8GU7Wdww1QMCkWporDVPf1gmNZgWi6BEV1dpzzjJiFGoiULtG6aVfOMXQkINiAEl4ebbkU2kKpraNGiMab13NTQzLQg12NjrbzmWrsJzuEVrTilZ4ccAnToqAQNo+WAXzsaW1UoxAaug6w9BcF0Rg8Op8QH0VMZFrHYu83+A0VcA1iaRf5wFWT04PRAeK4SLK8fORajAE3wfsX84Y+EiOMQNBNpjvA13GPP6zUDb87w7bJ5nMfwiSxb4d7H+2UBuJoCp2Zott0RJv4S4UEBESdvfrIBq8KhCqh8H6HE4EDDR2iB5xF0gIFqCyC7SUHmCrd4wXSqutUQm93fMC30DVk9jNOuMeYUDgpUQKx4mkKFzxcgAMGRE2ShWadZadGrPJQd0hWnexw4SxIRiRHoQfPd4NmKql0FDku+G3WjH7xDcCwJ1CRl4z3mx1WDVIDGU0pd6D3hsweNVKoM1oA+bMUranC6y72DVVwgmM0+\/jKvk7t1iHCQX39YbaSj8U+8VpvXTXnX9LjEIhH87zwonj3\/v+M8naIWYjQVrotD\/AK5ldsksNExc0BtUT6f64WihdA34scYdiGkRBh2mXCh6Px5upiMAk6FVXRod\/wDZhoyp9GiR+RmPfYFhUE1RLq385pxsCCtk14m\/P63i1eaURN7f98410C9LFoF6E879ZOAUA6dF173NdMYZiCNDQb8qN\/BJMJMR4aAm63tf1kQSYUAFdHD9aDGoh2AUvngq6wUtQlMRa16Nn7cXEMlhAA84O3fJhR6QvFa\/iYqtHSrrGRceJ4wTSve6mImx8ePvCToPdvoPWlzjtEAT1gpZyf4whvV7TO9wcLSKHnCw8rSG3JbAOngfFxMQaq2Bw86MNkQx8Ls9TJJBEUrHnV3rXrAo9ADZznP\/AHA31EGiaF7sdnm5cRlJetXzuoM9xwkSZBtA6arpprxswm1lER0005Qdut4FtyF0bFZdB4gbuSq2FSUQ3dALW+MLGdiaFSuttV74MGyqgrlT03poHPnBETUwBWpKtedAzeL8VOVEIkQ63YPsxjIJUgGM8BUnm77oKnrLBUCrvrfgDWOKoKzt9PoNfPzhhpZwrvL+kXZfvAZtE8u8fIEvveTDq8j594JnRqmttj+kzznTvf8AGKtHzYe8JB1PeM9rPGI+RhtTNxtFhl1NtEQX5L0v84FIq+ofsc2l3q0N4al+Xb85TLoGepZvvH\/ZlAXsdQOgfBtnqpj3SCKilkQB55+MaawiFUU27ePl7imyI6KCQLCvXQfHnIy8AcFQgkaennQwkCXLqPgTuyIznnCRBewJFbojqu66LjAqRgi+hCQQdWa5TDOTiI7ijdi2Cc8b3klWm69kKKgTw8C7cI8tjfgSQKG0E9X1ha6IBoEnoag9dK7cMhMQeWF9KxQ9DjgNd7LhdEBg35wWrSUXTncRDdMa1GrEcnEgWjbm4DTy+cKFkP8Aa4yxp4bpxeJrXfnGZaXavcRW53bgxt9Ud5bFX3NYDpxdCYrx\/D3FzR8xe8KUvNgt\/GOszIEs2fOy\/nCKqrN68XNwE771lhA8c8mOANa1gBgs04Elry2ZSBqTnh7v73k1K2b3\/swJJU1RYEqzvjERh7bt+T1rFOyICAs3fjn8YOAlwaJqM\/H3huQZtoFbt8qP41cBqLBBKPmdgp8mGCogNL8AMdB3vfgHBLQ0FlfUetrtzeE6aUsQEoJ5bCJXK6S5M6pUK2+hX8Bmwk1CBemza2B9uCKWQYYWIEdBfzfk43TEABaKnKvxrHVg4Y0Qi+Tf85cBpJwm\/pA+I4+iO67cQWr+8EgNLqdywG76wVKfUHBQSfThS4BS0Sd+w\/eMCvdIdcKkZfnmMJoGHnWEm6V373iTdJfzM32+OGa1HzaO8oAzdPWGoECg7Rp\/fCnnuggexHv6xAUo9LZCf4xzVzGAbzf6\/wA5bZkhCKlQvAiK8wgoOFTXkJqjPxcJIbqooVoxq+OgY1ABaS1HyBQuzhvFohUppx8U0sbIb3kkYwBCaCeNXkk6zJiJTQotQeB3teVfGVYgFqIqigKAAeee8KyRkAO18jSK7nq+YSoSACAAvgdMfnGFONRVxTPYC4NjX3cWbHuVICPsM+Q+jKOvxvCuNiUYQpv6uQbY2U8n\/mMAEBnd\/eMQs+RY7zYIWEh84O4RJImz6+dYVV74881j2SlOq0kdenN1iOtlH77iWrsrXnXr6xpHbYA6fbhLRWyLqW6xyZPJIhdR\/wB7ifEQQpRnPl2Xx5wk+mQ1Hj\/3CGwNPtpNP34DGICgKoSlk+ta9dwBwbpDH+R+d9cRUQlBgSffna984ZDBYgEJKfM7\/jIOhq+AlS33952hU44QU5s0b8eMaAVnQelWEJ\/cxnSEUUCL8xL8QyU2jQKwJrGhXPeNYCa7OZFEUDodwBEf6HN4W9kUb0\/IuEOpIaJH+5haXa+Xms0e9e9mdDEtwuPDEcBUIb3lZHm5cUrfeu6+D94VBBFDfL3EcgAsOqGic8ZsCHZvfbv35wAgLLVC3Xm5Hc0FNDOU8WfGI0ikrseIIwPHvDmCEFRPOsJXb4uK61BVJErYU1xZU\/GrKCEQQCmyOQCV3vG2pzqiBB1JdGtbd6b4FEEsuhJ436thveNNU2hNKaSShWbbjgaQohKIskEZN3T47blqKBNjQWqn3D5wVIRYAig8Mu\/nFAhqegAP0GebWzuDOn84EYU865i3Tb6GUQu+t4scyqJfD+E\/WEp5DcM8QnjXhyzJ5dOG9Nz84SCHe5O1\/IyYMA8WO3fGOOpUURnrEShKBSzW\/wCLjwJh2CDvUHmEakTa0orfeGYXgh03089wy6ilEEyqvYiB2XBgKIhKzxT07\/MwEkdrBCIkZd77z5xiXSRqU0nzvyvOaxdgIcQRpF0lDxpfBgS24UEIi134fV9byc6YkGwgoIROeVmIcqQCh1Sg2rdfJWZZTdQArFCmhA1rnzkmyOAVVqK\/Np7y7eN5iCD8Uz5y+a3yuKCz5MUUY3RO5LTb6wPCp6x4d\/O8EiCdB1hmyuje\/wDe5fBQ+9vzilvwYr5w0dN40GrzAwAmrxowZEPo1lp+BawcEPjCtfsQxZqFQboJZ4D+64dbHyjjABodg7xK6bpH0+sJPnux5ii3z7y7s+sNppvPZm11L78Y22kc0PhredFwrX+2OrCw6g78hdw\/WawAVTvXZLNGdrB4FGjfw24xgjUQDwEOafc1hCO6EsLDoa7v3ggI9klAq+kAIXf5wx6wvAptBUdu5o6zGyIResAtVnEJ1+VxaFtiCiUH2VmpJ51hGkKSi0O\/FkB3gs7NNSuopake6g+ci4+XA9nghT8e8Mqgjqrd43QW+BMhk6boOTUH0Sf0zZBPr+mFAZPjGhC4M+LaajX+B\/LEWkh0QUCeERM0vDjNCSxie8LKleT3lEm0wiC8M1BOeadxdOnmeMUEAvmQPJghs4CkHxfNvX7xxQG5tAH0vj7xgkW1ToHxDvjDIgrU0FgPj6+t40AFvCrxhvk\/jCiKhroVE5Xe573gBiPcArEFnQadGN6FhcVNqOksLoNO3FYAlSqBIIbGj8zuFWxDSIFGyhtQt5JzJ4kiCo0m4kqnhPeFYiaCI7pOACM9M94bUUEVXQPaze96PeJ4iCvNKh9LH5MkQR4QL\/OVoLdUNmFaJvYHcMKQOa\/luc9vuYyRAiB4SP8ADhPJCnY6fpET4cNLQAUfWMJ6dU7cAD4Pjf1\/bBAqUDj49\/eWrCPR8muGIDtQ3TXTxiGI0aTnk85IIhBQOe+\/ODoSErT22+8CPgdYeXy\/vAcy+IIh5o7u\/vOpEkXkfAfPveBjYaqi04b35w7qBriJLuX4+ZjSbi3YIteTXjNiFgwfRZA34+cjoEU5BSEnyTz+M8y70wiThvgd94U6lAI0I3w9hzjrECZYW0mtPZ25XYhLVs8r3bqffrNJ5Q\/fk\/KH6cgQQnrZ+8eV0eUy1ovYZC027Nv7w81Wes5QPxj3SShAkD+T94kCCWb7kDiOiZcfzfOdHZzfvBBU124E6uCSdnU7jjaduyr8YWNgynkOoGvE+vWKEAosF3v4xg3pSJTukuv74jGulrvWr746uWiwgGDPh5D78YW+BskIaZ48pO40pAUSTYCRY\/g94\/f6AgCHAqg96r5mKXDiypKAIbSXxIcxxjZZQhOlgKmxnvGXISWrEgPJSB0d81kxxWUAQEfIdfC\/rE1QECqnBDm3R5o4SwMQ0fIH6G\/R7wJuDh4xzY1shjAEJdMLi0QLyo6wsSX6w0jPrEZMAG6Q\/uv4ZBSJL7E8YRYB6l25sH2a+Msi7rV9fOKItvhwrtmEJ5Hw4qa\/DefeOABR7oPs1vfPrOmmlQYHmB6\/xlmh8BQHxre\/rJGHvd\/ND8\/xkWgQiiPlXzo+MGRpiNTZFCu\/75YUCApARIOwO+vrB92iESlFPQPYr84G3vJ4RDYqujeu7F2tCa7WkVLAnX74Yh3xqIYCenYa+e9wERBAoCG1gHz5witkhryKb2tD279Yeht8O1YeBWvw+sMxoK7oh\/AYthq6QMNALGiZwZrRPP4xzXBeBqf1xhFH7cPC6fOsYr\/Flsp6KfnOYH0\/xgRoelVuLUIuIH+fOXCMze9mI7DEGQxtzADh+sU8Y8YMMnK\/jSPmNPSDlP1+uHc\/hA+HA8uusRJ4UyUafrBw6HRv1h2sh7ZnneZ4A2cpcrHS71\/OCkBPIhtPJcYzR0FT9Ef93jiKBVUXenW\/Pc2RUUI7Q3QVfWApBrbaCaT22X\/GN3AKpFKgjueV0zNJCDElcGG5E8K+cllStLZwoIhdJg3QtrlNBFmr5NObtIgWKCjeG2VecMjiCwgHJG0IVdc8aLsQjLQpB8+q8r7xkcKsGm2EDSITUxOwbPWArpfrFKwuBbjKNfwwAmn4wFw00frDfACSIajzdva9Zud+\/vKVOObPE1l6SHznHm++vrNByf7cO46fziiBLNAeMuppS6sPH+\/WWiCG6xUsoiEDfKu+\/wCcBgxAKULvu\/M18ZqiA2oGwTyG\/wAZPBQQW2tW9E1DyGKhBKkUAVV97aum5vLgeYKsNIGqOpvzinejQLtokAJHSxwyU12NA0Oi1uyXhdYfYCBKVwVqgmp52bmSmhjtBBLNwyT7wyADQS270oGWxeMeWKtXKajvrE+H6xrYn1m\/\/DOwP1ijxjwJhw0EVZ7BT7D3hbeYIfiOKrySX8YwGhhs95SPD7+8RCJpE+IjiYBp96+LnZGeEZ\/vcgBJuWbvt\/3wZdaiHE\/t\/vnJ8qxj6PH1l35AnPlb5nj+mOkHs2afzqa8ZAadWx+daRHGA61QbWE\/T1+XKZXNCJVb+PE+sgv4DQdDy52M7jykGj8BScf4yQROlETtfSSHfPvIEMVTb7LsnufqzE0XFwG7GfnusDVpp7XW\/gvl95AAAADgED9Y1sfrEkR+sacQ+MZ\/4YJuP1jA0yL+kzaSz9n2J6wUuydJz2fhwsA29mKX30xoe7qZtPSfnNtovjeQgLF5MNrr5Z+8uoQ8PovMgWjwgTd7POEwBOhV1wjN\/X8YqJTYKE5ea1fOaqFFIRBRKHj8+sI1MgIoIGzwC8+fjDCiARgPV7Kk9hhiKsaXoFDeu0J5cWm0BMU0FCvlElnzis4lISPAFVA8Olx3hAJASLIygzRy98YBECgASEimg55dyjvjTSWghJd6AtbrGHgnUGkU\/BD8Oeu\/WTJEcl4\/WAHt9Z3H8MBIj9ZAjsRCgSInpFH7wcBvXsM727L5WSNvP640n3cSePxivhZq\/eBdc\/W8D153\/GEns8CXIol8oHcbENvGbG+\/985EglCNj+o\/rGBAUVoddPP5xCSgorNkk6vP5zz3FNgVjzJ+8eFWgB01qjVt+hxRFiyiKwdwE812BlmYqDJodmqtuxusPqgBbMsgppeQ0XK5yNqKgpTUJR0dfOABQAQCG1TaEXxO+ZjTQSopTUvsrqw\/GOHjA0igsQ8ENeV5yag5kWx+s3lGJ3TvrIgv1rCCSfjFXZnnWa+ZfJmhrrC3E+sXef1glQfrAxB+shqMcPlcXK\/beHRi4bgOI6X+c81mLDXIrfke6n0njE6ij4wZICWacE+L4wUEdiY60QfblIGpXRgJ1G\/jD+pt2Q\/vg9GiBT4fPO4IMhEK6887\/THs1jWF3dc784rkIbIgjoBs3BfnBeDWPUKUtlt99wYEu+Agjsmjkd3S\/GQxBC2KkQ0KHlNvHW0sS5KAsI+W79913H4yoW70kTWg8TSNyxZiPYaqgwN9E9zWBa4UuqOl27dQ1r1nUYWGqXnos5WHnAQBm8Ah+Xr8rjo61jNaAxRK4y\/GUDAHcZd36uA23LoCkICsV4BW\/bwY4qoqKIh0Ronxh3AMevHAgiM\/0wW7w1FjqlyyqWOzPYTXiO8LFXwB\/kxhNEWPp\/nuObA4hb7fHN4XF0atX5t+s4hVRSAsi3pdfzl4WkxsJve9N7PzlmARokdoUrHx4JfjIj5ARGoxdMmgv9MhE7EEA0QSkg8Ra63joE7Sjs7uDw9+prGFhEUCgigFFs2p5c1VuAChSwsK1rvThg+3BDCnmrTzvFGtr6odfUD7V84w9Y9IBho6NYp4wjeJDeArsyXKlJV9H5AT6yptSORwewIj6cQjXXziS9Xt8mNRV8fj2TA2FoLDt1jRpp9WX1hPInXG\/jEBUqD3t376ZwNNSGh+\/rA2Yfsb4eOa84Q22IUaye\/GzExABYePO3wZNnNoI+2j+OazglPIhyhtn124wUbxIPNdeHnSX84kBh4bEDYnl+cGACCSg0yXXz5\/rigcx0ICjw4GpfGsN7j4TRooXbIb94raaVO7\/BMeSkQmy2G+Kq+JkzU+cZvWWKQxTxgAH3kl3iBgn7xsMERE6OIbQEeF9QKy9QccNhjPL41jyJSXT+8MAXkwh0+MNQJzj3LW6YESGUUBdm7\/AFyUCgIiLvfZiloJFUaoXfuX\/OF2EGq2Xf4k\/OI34YSte0+59\/OEIuwhY+VmuBp8P4wpYNBYiBUXZfg7iAEoxEHYCJufUc1CKQMECgaHnR8TPU1IMdgKBra+NW4Gjje0am1FNITSb5kb2FDVr1XkJT2420cgAAtT3yV\/vis0QIQdzNINXwHvFpUr3fvHemzGWwMUuEW5GOwcAFGYxQxBUbidYCfANuEqbB+80aauwfHrDour\/tw5R2ZqLS8r4xUDW0pO4CNUfHJ+8lvVOmofjuBdYsBOo6n4xIBk0FZv4+PWSVUoQWD\/AH+PjGWQRpYLqkNrPJi26SQIlNt\/J39YvWAbULBvyXq7vxVJ0OIDROsra1vZ9W14CANx19kihM0+qQCKF8Pwu4y2xyywVDYVjCAIB4jr5yCiABWoJugIQ\/zhGjMnTpU3Ais0DjPbIza7X5VX9esnZNY9TWCIUxE87gTncYPnC3cMduGbprmIXC3jut4Z8bxLk7idgk3vNrRLsuzOej5B5hpCFCXBOafeGFIPnNT9FXuTMHEjIg+EU\/OGRVQeh2fZ18j4TBHmE76wkLBEo5MgwupjmMWYwKX7cTPl4fzitnDTKJl4CwIjRfjz5wptRFLE55NxYTHChE0C70n98uSDdrpPIzgLf1iJFIunk2POHrvMFWWAICVgea3\/ALxSjpG3fVN6Vv8A1hPvIL3r5VYpuEdaMpwCmkxhVRUKQ0r57ggCTPJNoAb53oY5jsUiBW0m6BD\/AKzgQAmiqPhVX4xFD+bDCMu3eGQKelmHU1e0xFrD7wJYnneXDZ94Tf6mMVM\/eXMamo4AhGPGZBHgIfgrtxgCnkuXNMX25PSaRwQk241LuevWBSqonybxqilqgsyUQFGE0H7\/AHjEcAQIeJ3zzeMbgTaVbd38\/wAZyudFeemPdv6mEvBols0idP7I4JMUQAfIKcm\/fPziTMDYDUQfBZ+PjBFx0SDZAsdNs8HMM2qNqtdt0BLO+UwfGTYWZpRb873JiipBrjS1V+XWvH1kWXoKmqQegq\/GBNryN7jN2J7MPt+7WN6b5us0yD9mGOwfOCLw+cA39UuPqg+nEjIQlr+RSj8PxmzWni5IPNWXEAKLdTLBrBbbhqWjXX+ddw0FR1Tdjqh94iyB7N69\/wDWEaC6NBLcUJT2A1C23vnNtYu1VSTQ\/wC9wBN0aFnz5\/pgiDsgnXyKPj+tM2grwnQ+fh\/vl8JYOvCfZ\/fxchevARPou6\/+YQ9pA\/rRyPb57hDFEtD0qu4\/0uJkZ1preu+g5\/3kJujAYeXlYPxcigRoBAJrXwYOVCfJhRv4HEQFvI5HPJ7Mcp+S4Xf2b5h9wPvAR+hcLUKB0NuzaM8LH\/j6wMT\/ALxlAm\/L3OK2OecmNNeuTCqOnk8Y3G\/vmAeEH0ibxygCuwOfWIno9jdHx6xSjRFrB0bTmtbe5KVaAQuiv9n8OAgKGikIVbxpP1jkETZtUD5T\/Fx1R8gvgo8A\/v45mnGiIgA2LSVdPgX1gF8QQBTTdqVfYodc1pXihRRlLttW4wduoErXSya5rx1xAGskKcIDUsv\/AFjeiECbto+d6PgMbpD8mGdMGtPMVQB\/P9sJilq7TAhU\/OOH0a3hyDfnEAJOtwRRh4oifPxk0BHEp8fKf2PnKGbHXeYarB1LixNAm5ioKLiEp26P7YmUZfD5k84i2LLEL+PjCAEApSA2fnx\/OW2aQ1OGo9PrzjQRFIC73ceWAdK37J0E7564wbKDSIsjfZfOMIKLEUAR7ea\/8yqMjDdPhfbBP04qiAehrVFQ2Q5+VxwURGwEKUnnbN+F9AEgK2QVie2tA3y4pVGKIEADW9b\/AC\/Lk6hUs6Ar5Ug+h94l5vvL6KvNmCnb5Qy8hAXaY0rI6XAsE7XHr20bxUsrzeGcHhRFzzl6YzlEE7gJPn3j9jHs0MPFG6j4wqFjw594q4t29385pXSfeJmvJG\/vEkiFkfWC6s9PjLtCDxNYTEpuUygllQbXS+nV+hwYBEYj4zgc3ioxxNRm8Y7odPv8ZEFm7e49KaSIy3riwkN07I3cjjRcjYjPh\/WQgy7PG3hikONaMNF3+soySiF5dIGoBfvJQq5bVVIER\/C7hlTVIRHhBu0HbrncbCUNSiUjGVePrBwFiREBogQNO+t\/OS7USk1qA6kk9vnLNx00h1flaG\/eUGAkga+IZqnN2Ey\/oTqiji5V6amANfwpxxAwrg5khd8dYpUPmaMqm58XEBodVu8Khk1oR\/8Ac0S2BRPG\/YxHwlximm\/Yf595E+jubwLjJ2PvAkRt745jq2RPHcMVVI6O+zHBgCwKOm\/X+ubtRnI35sxIEAa11rLm6iEUI\/Zh2hbSxK1qbWZetARoIqk8k0t8\/GErFQW\/SLo4c1kOAQpicGhLttd43AApYWmJKrpAu\/MxASKANkVU18HoyBF7QqPAfItJ6uBs4qI69fnwfjDEDiSP3lx0qC6fxkSeLDiepmyD72SiesGSPMO5cPDy6ydpPWseGr7Vzi63s3gM0MDURNj95QsDahyXSfH++csPXjNh6eZXZ1o63\/rlJuthr89\/eLEmtaYlf5wlFRdjOPjF1IruqOyfWDTqLsE9N4olRtdPMsxU4k\/vnQUUFGwNvr4w2Y2kGG0Bvny+MAAGdi9zeve3++IB7K9Gu+OWGBGsEBJfZdvfW8NFeUKKWBrwG5klJdoB6fDzR5mCygQAQOD89X7xtEHRC48N6cGC\/nE11HQMB86wrAvibx4Cq9DeXb1VrrL4RdTuINGrVduG7s8pcqkQ+8GlIktzoX2hD6PjG73WfLzLxt94Q0wn3zAosENf0\/35ydOkOG7vAiiixRAHwfWKQATsb5a7cFEjhU1ZL\/GHSTsTz85J9CAIKp4PK5IxMYraavixVKYRslQCKD7HZdxA3kOh0EgpSR6gV8XxiSJtCEDV0uo\/DdY1cTRNgtDZtAWcNYYcGyotNpdmhuu6x2ANIQlIeNC\/SuR4CNMExMAj8MIBuIti694dFF6tc6tpRTAC31OYXR6bFxeke9dYvUSHh3gIRyMpjBgt02XkvxT5rgVRN\/5PjP5hnQvPnEQRiTuBrNDz6xSLLvX36xgkXok79\/BgzuBN7bEkjkQmYgjPGRxJEJoNX84Ah7g8P5y0sIoyhrh3fV9YKgCFTqeOib2d\/nGJMOkDHiu9+u\/jCSF4LW+ebGE9GGhK2IBWh1vw1Xk1chUEEWBoniPm9rrFt1wsPsvc033ggsIAaHCZKgLSGw9ax2kva2fJkYsmxouSS8bEsxr4ggGdCfFcylWnTQ\/jNxG7IrGEoO6g4+L9e8liz7YtVLeqf1x4UzwLNTZ9rjat4CVyPvpHtwWIDOz+uCgVmkfGDNuhWh1\/XE9ZPBu5LUq0PZ5PjCEShDmPbL0EEzcHbhr4vv8A8xIAgYiSTusl9Ydll84QHoSZs6Gu4gYY3T\/TFSRdrfP3gw9BYWnNtxdpoGJU1rXvGTQTgQZee8IyCIGwGwk3w709TChEBCF09fBTx3eIokgGhUIeKH4xpiKkoDtoH1p3r94RO3CsEAaOui34wgoKI3Zuv6r6DE6QRA18B6Dxmh1XhrLKqDgmj4uCjRPNyIgu9qzeE4zeyevnNqoZcZ7jxGY0AnPv7wWRA7CdwaogkH8\/OGDRO0+cGUvgiF+D4zrs2i7\/AJfXrN9D0nB4D6f+se7w6YAaSJYccA7gCwHJ2Ks24qKjkf2mWhJpYNAJ4eZ3AUwaesUdCEZoN6v7wzEB6pQaX3B3+\/GIiIChFE2AbWPX2ZsMOiIr2z4\/Gb0JslEW13p7DeEvkhI1C14aBmQ5sNpAFq\/HmedYyGvUJflPb\/GPmy+IX7xslCDO35yDXOI4gdl9eJgyRBeW4M4IduBtLUruQ8ZJjY7Hbghy2bq4zkdUNTO8CaRPz+cE37FRJ5mayqBAaf8AGOCtTc8\/jEBtptPP3hhSLSH63hQpE01l93+mEMKoeNfjGtODh5frEsDVIPNN0\/76xICGk2xfWUURGw40\/vMZaSFVtHYX8f2yQBSUahhvrmhBTBjrhrNpDfFGajvnzhhqHUYEuj0dMqVgI723sfvV+8ME5lAHv08Hl36y4TRhCpdfbJgCoEt7cVC0eTWMoSqUDmGC1NPXCJKPfWRAUV0WYuiwHVauUTXO+slkg7kc3ZNtmuf4xdVFilH6xawbrbvg9n9PrCZvWF5\/GDPBPH+MN5Kr18YS69eGMhGX3v7yQC63UsylAozZJ6NYohaNjaBl6AiBdPI\/h\/xcVoQYINLPJA+fhMiwVAHlSAvUrvmzAhEMaSwLv165zCe2SwjE6XbRJ+8ESRKbARPOqk\/GKVpbG2pv+IHgLjBRbtXc+VwAAsDfg\/zikH5pFxhpA0lrMfQddLhwAlkmMo1Nz+mOwUHdhP1iAlNbNYSWAiAhT4mQignn3gUS+gg4bJm+F9vMffjGLk0CJ4yXn7yzunVmEAVA7Dn4zWWHmesdLX50f64gI1Xt4eLkglI2KI35wrkarFrTt\/eOa0+Ug\/n7+sIaoMDQBSsnls\/XzglxFqAs4zgUe4xLqRoARQ871lCjSAhoEqetlvt+MbEQjXTtPO2qYQiFDdUOR6+D0XOUSgOBvQfnb7xsK3g0m+YqFQ6HYYhrGe9YqHa23mSqjwH987bibNrjq6HhiswhoIVIsfvGdqlBMMIKsAJ8YiMF2g9+HF4ojQQxeJKvzMgEA3ULfn6xFiHokX9Ytp9hqgf3zkYNmmvvCLXMaX786wPNFiNHJNQNiJH5zSrGgPGvWOWJsk2X3gUigMRfr84QBLKr+dmHVt6eH16wU4VXyeF8ejx58icmgIjd5tlziQZ7642606r8YatvaTGPfUXkwxG8oef93hKlNtl2T0m\/\/ccCxYDH50Tfz9YwpASlF+QeQzeqYBtLw9ayQcEHWHue3n7w5kF2iR8BO6y1pogWgH3fL6P4xvaIKsuIQodir8a5iGvdRP5MaFkKJ1+McRRa2rOxwMJO0ELcd5RxA1XGlLBWz\/0wrcnAQT\/OQKTSef3k622mmCZj0ndeMn\/5gG\/FMabjU2P45jpYdO0f3jyP1uH69fHn+cfwqU9+Ejh6OTE1udwIBN2iZcqebnccYN8gnxm0SE+dnckbj5sbP7\/5wQ4JVFrPdsP8TBU6hA1U+Cfx5xXSOCRF6z4NYgUlFS3w75g0JAjoni\/0z1ZAOsOb1Plxm1waPg3\/AO4W8iotAfMwEvbtP\/TziwSBHfG+fOFSgAsFA9PzlwAbUU\/8wj8FEJT23NqwgLP58YCS8ghX5uPwVKFQ+XmOwU8lF8FxuoW0hMH6B5QZ8YudwxH0by74kEal1Q95aqh0y+h9OQbZ7j6zjpUjpn5MmDR5m8u1d2x8GBSLE0O137xnfAY+v9uWGpvlN4QllLWpLuF5g0UCVZo9c7\/1lsY06JfX93NGB3x0cmERQJDTr1ezAEK2Kv73zDEEoOiyENHebmWgJCdJfOHdGXbWuR\/GdoHaHZ++ZQkeUKHtcnp2KDPwY72hgis2bwNgaLocWACaAbebxEo7Agp9TxgcgLQr3+MMuUBNDPl5hlooBphNKLxVF+fWB0qj0z0\/4xjBCy2jvs+HT64bY\/v6zesPjPhoLqecm2tOvjFUL0onnuF2VfVkenfOAQRzQrF7vx85AmbYQ7X616PrFUIoKVHkV37cSF6bVfK\/7MM7UKSxPHeGGigBpIjPrIG\/DWmPjz+X8YKqrqVa11k63gRV175lrARgkv45lylxGr9GEXE7BEvvAl4GB0e8kzQWBz8YniFRGl+T3kSTwER+EwqoECECvrzlHQ4SJ+MLTY8gX3jGAGVVD8mViRbSn6cWoIr7+U9Ph8PxrGtPAbyKf3wwDUt3j6kZ6ybFUvhxNFFO+JvCJQE0eeeP1gVCDTTufJN\/+YhkHiqtm9m3\/ORnA6DbHgc+cpZNADc\/y45AVBdzyl6bxqIK7RgHY1vnKgaFJqb63n43hmRoKwrr6wuO0qs+jAgulh\/LTC7yFuucyWUNKCi\/DgkYjEC79YGkBdgc\/u4IpLrdC+nj84AaqgSHxvzjEUcGFfldfrBAHkg6eavcLjdKh2eTzuY0dGpB87+cUmCVLp87OYXIqqVV7MCSC1Ti6nPzj0A2KH8+cbwVA7PkPWLJ+XXt4l5kPDIqtTphHSFVNpn5y8fzgUiGiIfB8YWHZVlvl+8vMTZNa8ZchIw8k85IthRW9fHv5yBqXaLvG1iynbD1\/f8A4GfOD\/4KWP48YcBA8\/Obzh8e8rAAEYfPMMoXry6wJXfUtmcdDSC\/z7xW0Ar2WAC0\/rhTgBaECCHQ+cP8YlAM2pe6dfGQSOuIU0jN2hilGiYj5TgnHzljx1ybbE1zTvDB+tJOAHzvHvwjKqbhU0+cGowDpXip7s+sPeC6dQqe\/HdYgl42w2qnn\/OdnkTQukT1kAhUlKuunjFB0iz1Zjl56Kr4txAK6JNrO4PkGFRb3RswxUkAUs7gQkiOntP8YhdNMEccFPjK+8ESanN5yUvvBmqDJZzGOwK9Pv8AtnzE3GHJir3WxcBQAL2tx45ECL8XvnDwuhFbQDjXge8ckEUG8gl9bdZaiEAKINkO7N\/OLcCVEJieSh4yqgEYh2pzXOfGJskxK0TqzX\/WLVeroSXVqb8GGpuSiDyL9OBVG6UO2zYTnTIAuqpETd6DDEpuFtI6GdMmbg6iVnP7OWxpCkV\/GKBgis3tf6Y7dFSpHxr\/ABgnprRfr3mmoopt9jqYyV3SOz8Pr7yggN+8s6ker1wY7HQYYghujZbkQqK\/McmK0HfTigxQhOr6wLAgNA5ngLeDt\/jKdAQKrp\/LgFBjTA7cK7+fBhtN6U07s0\/RrBtxYDxj0tZJ3K9M1pqxUPh+pgmVqSB4bxfHzhWcwogbkfW8ck6mUmN1T7+cPqMk0oqgpQwXmgGAPTf8Y71eyU07mt4WcO4xzgHUm6GFWO21JYlfPxkpRBQLGbu7gGI1oEnkPMw6WkEQP+sSiVIBgfnCIn5Ad+J7xVSjcX++AUgFQab\/AN5gpswWsPn3Dew9Z5ig+cijJ6witJ4H1MBSY0DSzzktJ+3IDANtrvCdYqDgV0TC4EeRHna+ecw+xKAXGh7bNZMagGFeAv1cB0vgIAKwTc\/vlvNRKRNbLsfGFhaqtrOJtPWRgwIKSonj1jcOlBWtFTTr1g3IBpBl0rtxAUSiDDd3gwXvjDmIoil2egaT5wnSBYTQM0vmdmUvLaAKyr4w9Zoo2B3p7zUorTa7e4sgvlb38f3xFEKRG\/8AWNQCBt+H4zjgzBzvOY673gxtnsyYEM3XRWvziEAHU+v74ZC4PeACVPNSZIGAdgtfz6+MdxGqEB2D\/XBC7Ajzap1h1xhX4jUaVLoHW8RRABLYzw8ZK4ghIKAOni4I0FaFUKQ3t\/GNW1j0F0A2\/wCcS\/yqpKkDR09JrCNwUK4VU5sPty2E2rE6DRWzobwZoQfbiy0m44UnOoCAaWo3dEwHZRVCDAa6aIc845PFrQO4CkPGJ04GlGtDwokHuzxlpxshZwWoP3PGSU1gAIpVZAFX4xzwNlLaLCBQBPMwU25ibBL4HH7yUAKW1UF+w+EGb3rHu2DASEl1rYgx0pGG7umygyoyELdx5rAhkKcRgaiIommyGXhJNeMABWDNN9HQ28IUUFBSmyKlPLYIMigqQbUn2kJohl12YYgVWtFpCYsKWglynlp5ZH3lNqkoQsoDnig4dGGhPwGcNLaWYDI20JnOBfHdTJq2wDCgoLSihFHzhvNfe0L6\/wB7zB0A9mgfBRUWTWlN45aibHgAForPW8kImUNNaArTQv6wLpfujCoQ2C2XHXKzSCCQ8iwJb3NQuLNdAjuhTUZbZhmpAZWbKqnaCessf4u56gb25s2Kd3C3QxMDQSUdUqsPqoUBdG6QYBZHoKJdrUMqC2kRTTSiu4KxYCWFrJHzSF2aa63URmiA2C1umiOiLvuG8RGtlBZB0lB34N4ItMawlS2QisEiNuNdlpJALZNDQgdg0yUSE3ZaFIQowhBqJsK6JMAAW0N1tTsPGH20R4aWEKaAkhaax4D2ViU2pF0hp8PrNQWzGlTUYkR2Kb1zASe36oLQnQVS8LjJ4VIIgjBp6KKHOY087fcSIvz4XmFlAgoR6MV8HxYjra1wC71QFvD5HGIDNk6I6ijxRpccC3\/kmhzpfY4vea6AgESViss1q4MjHzAMYmv3O5HIthAREUWaV+AiiGySokVUQgBV8GDKpIRI8pEabU763i9G0T+xmgXQ+c2gPSogKvgR9n4zWtEV3YkSnhbp99x486CwlUIYOwdiay4i8n7e1APbq6xiCiWpCrFK8INXzU1F6kgKA7b+dFFwjANbwghCiKKADyxYlw0tRsjYSFjqxxRY0WhAqiHUpHQ7wUxvlQKFLeGyIqA4qLqFO7aKILENpCNyHgGdigAURt7dbpjUNSorAuwjuwLYRyEJmjGVUjd6Ngt3lnRgUAqlVpRqNBNNMjoQRsKOsJaLKfi1srQkI0Gq2G1odXZmkiBIC2jAJ2mrrzlHYt5RalY2T8ncSK7VVQRahhICPbBpEv0VkoG\/BE9Lk8JEhZY8mhCUpKY8BtaOej8NX1c8yyELdiNYR5f1jBpU6jI6CNau5\/DFHtEURqtgJWpR1Yxp3CgVACAU+i38TArZa7eEGpvejUtwRMULC+dF0Wr49bxoA6spaJtBEiDXWvFECiK7BOgenIm6TDJB1A2UBtdwukcItkqoEGik804Gy6zlAYCQVYooSbHksdGzcbla4Vq+DNqauNWoBVFMgFBEhW+ZW8WGp5VUAAUnsU1k3z1DJRooJEBZLYMzDqlABAuxpSqaN5U4O0gAEBLZvSXamO9zmSQEosDoJv2qL6yUl2iFEiIvCCXAgUhgKeBEU2WoHw7RWNIkRUqkJ6XfvHeLqw95APK1UXWujNQQ2hpLakFu6h7mLRCqEVGLDYGhsdSilPJ0uutnz7k5gmcC0EimxpIa6uWYmiiCMRGgh66axq0ABECw6NDjK86YAG5AmjFDsNCwlMSG4hdajWtfPnDm0SrZ8roiIi3BxmARIWokfQr4GOCRdEgo4M4vLkpVISgicndJfMYKTCgZQNm6ugQXswlIaILXBOgUGcnkx5pG3zXX0FBv4sw8LgAxuhbQaNZp+5OuWkSYtGAN8v3dYHuE0wMTY8kQjqXmJhUmr0iNDQBrXZLABuLKIwiBUBEVWunJd8MpYoGBRNnjnTBpvVoGKtDWBKm1NzGxKK3oA0AAHa9fSdmUBCMWIlNDFdDFyUUs6oioEVCItKDvLifwaotBPdlTWsTSIVlqokTWOxRUmuGCESqMEkiLvhu8NzkqWyQijNzSvHTRHvIuwNqI0EHXmbFGQESdVXV9K95LlJmjgCiKCt08Dz3AyADxHV2aAE2NcpjZTgXUHYxtQfWnWAu62TWroOHxfGeYjoio2NADu7G0MYBTEsLxCefhmMHGgS\/YQfVg+MR6gIdXkg2+A7MkAqrA7UDGno33HF7bVSMBJaugm0waQrPg1YIJ78nmgqrsVtLJQl+PBg+WjulYeUhw2LJTESBYrY1DaOtLQdEmOV7AxGCZavhDW63NUgIHkhQ7FvLB84SYwoKKiB1aio6Z0SQgmAlsQqUFEQdjo6RsQYyMNQQFXz5NlI3xIVFJqEqhpgBnlGirAIpKt80VdAAJbUmDPEBaDpCoogJc0IQLW0KIg1GQI3oMqizr5oOi63hHW+RrSkEUkFiC1MExOYOQ7EKEYH95rdFJABLACylLsbjO8VPIRm2R58TDMIN8gAKkKiBUh5RDM2QNwoE3U0ChULcuVKrpqw7WMrPBA0XnGMUIGFdKhTCd5KAkZxbASNlA4naaRsiBG0IFjR3u+UGrUCCFNLN92CKaUUiJAoREkALsC7o2gAqBdSMKgdxWca2RA3B9icOmW4EibU2UElUCbnpxzYRsDIS6BqvmL6mOkD0CtolRF5sXe80qnNKjTTaAC6DuRrQD0tICUvw66WYBzouIlFRZdIBLqszSVQPEBbRDbLwLjspCtSgAqGl0HXbk9c2m1AInSMU8TGYwnU0HUI1IdHkwHDQI2HpVVmpb6fWqATKQ0QDRBd4jXeUmpo6CfBd65gtDeiMxZNK8rvptxKinwARQ4AcmmbxEitTKHYCNFIUPSYrHrcAMXQCjSGg8XLYB7YQykIKqlW8IZRmY2WCBgHxooGVKDAClkJVVVBKvzk5UpOk20haDXMRClDM80gsGCiwmWeqwilVIiKVFCliGPdCSLY2YlJS2frBXZAvHSJYORgfGsHm1GFoLgoPCOjOWHD1NKGdDHZj50xUFd26PZI4Uk2hRFCRIIKUOTjh326QWaFFKK+YOAxRAQvTYvSvjEvBKNpIikQFhO9MRyRQSCKKABIeH5x4skImMgyFRrIAPvHYjokCBUeHYbk3bMuHyMwNQ+QpPHcVPA4WKAwZxSGrvI16GUYGCAb2q61gUbunwkE4NYznjWBvmmQiAIIUEQX3vEW1RIBjJ0AVAtFuMNgEUNBYSAbk0eTDueLudJs0aE1FLzNdSAgwND9gWusPAUOWpEnYqRD4TAqnFENbsAjVt6aMCU8u0AQgQAitniGUeaJ1kCq9UhtNcXs8m4QkRqO9xS+cDCbCCisAgB0Vn5cQIUofvBip1AwiUNCSggCkUAxMFIBULAwCNxSDEWjg6QgEU2UdBLROGcWqxTbUIFB7w\/QinQFoDs6qNuI5hGUADtbQKB3GbUghLZoFDs0R3i94EBW9rQ6UfvWHJ5AzBdqCaNIGn3jZXhKWkkRW68SbxyqdhIRusCwUut8xpfiFAdtwA1qPK7eY9CTt9NpGmtJbd+MEjcCTFFAMvHvvVwTTAdHBLAu0VVqBrI3EJ+alIMiowO3GctJdCEBFpqPvzhAFxugCDcWo1RStxsUeJYqdAVApQpfGP7Zj0CogCq6TzHWKYonJ9BoJYdu0cC5TsWrECqQgSXDUZCixo6xBhZ7XN91pNAAiiZEX09woWohpVhcUU2zfO4LN6CEywA+AqApkfX4sG1WqPm2M1MHgAykiaVRDyrWfWbraFBREuUi6iee4YnSCKUAENREX84rgBarB6NES0AnZcnbq2QaJLARZxL3KmA4c9MJISVc0EmSFrYWsp0cOB1TXSgoIrqTHxB7ccdEF6N6yv+mzJEgBAgldFMZsLdKBpBUVEbSb1gUxUtE00A7jfBhEzRCAOAeRCQXWsDF9IkRuFjsb0qzxi5TlMibG1Gg14N6yeADs0FsVpZpjLLii0gbUCUHQggj1wATgOIoIOgpwWWquFRZAjQaxVV37+sRJlSTQou1V0BEHcx13lBmbsRmpdEJPGM2oIbVRAQgbbZjwN0LehpEu1hfgyR0kfSoAWgqNw1rLYQhBVT4Qr2B6XePzBNCDZRLdg9MphoKAwiwcC4NPsw4LLAGsAtFC8P0+1HrbmoFiUKBJq5E8A0U+0svgA84s95GSNiRPMVpp7gkAigJ8gqABLJcdydJxZQSB3gPCJgGkY8hADt2gACsC5eBrBUIIHbCalykd5VETSBSiN7nl0AhHYibELDGU44w\/AKtu1NOBCKlApIEKolp7TmFk7itBLoqrojHG58qVtV2K5AdaxhJYtSKOw9CK0npxZjISkVUUux3Hf2rE6CQd13HBsa63MlZkMiljKNgNN96XDDxAYBFcWOi7lxupV3yOxRdqiG1jBFs7X1FQfK+BklwvnHTAFpIKQt8a7jI8Z33ERSkkrv3hyZglSglKz0BD0GE5QbZADEPovrCAW2DQA0CsWbDIbWtgwyACHbZ3b45H4MIYggL2rRt+MqmAoWDyQjSt9wXYeyYImAh5srtswdKAE7SFCVKrJqY+GixuVYAnq8vxiKM1T8CiKqhzsMUxyhzk2pIXcGqy44SaUp8gQtls9Yosbsmh2wIhBoJqZWFQKAEASRBKmuYvkqIT0AhFEAlc3Ym2ArShgoFdGTSQTwsBFQ9Gl1d46LfNYw2UjArqyTbj93w24URDaU7K0SYCFNiXFBIUibDITBPzGXUAUpDAT8sw06EhuAKhRUgRRNYeGwMJRINOrGrzeK+vAwES7DZ8E+jBq2lK9kJEFq7fMyfSk2QIGgadNAtcU4ArnWwKNqIjK5RH\/ABD4sIAhQsG8OsRQIoaycVkRb7w5Ua2rJZCBsR0YypoyCLykvrZzELZV9hs7S68ccuBICbO1EKfAMLrG\/JAQ19r5cnQYnQNFABflwisYAI+gd\/TMM7G10HoCwPyOEasMR1zXD6woAAjo2IxdOXtokqV2VGmjbvHHaS0D0SDt2eXChjFqKtt7d4irhlkutL\/THlTRovSpK50fwgA9EeAnf1gGTCEHdWql3OXeTiTVcCR2RzTowkBPizvnCOkQ+nhZe+d4SWTWjzh1xJnTvPxxfxZiIkrV2KNd6xFcjawTQephtICWAHNBBP3jqQbsB7dSZfSBrYfBcHrBCJrm5ZjLDGFp+\/DzHDwPOGxTffWewPGsOjXmBAwSAme0N4BJARQd+nQrfjGtO42IHCE37MC4YmC08M1i2RQMxezqfHMO1XFX5XeIwsruh8Isc12RRAhp11+7huKrcJNaoH6xiMGk2VU1rbdecokSamoUhSLp1vGKgDCAcBIb\/rkvlDUB4SydwvmxG7el+ff9MNgBIhBoN7dYW+B1CXs3F5pxy96NhJWsZTuBMeigCFbfo5ganZlRsC3Zvzi\/fmlewvr4xagB0xeyM+zB4wVgApNn\/eQqWqwU9Gr85dSstD7Plu7jwMURUZzpgajSgHyvvCwimjJ53g\/5SUh7UO\/OIgK0dqba\/n94wS1oFUtRcFUuhuK9XEjegcEXqGl+8LFgk8b0+eu8Z5AHYMdRefjCr1bAq9r3x6xyegAB+HSuFkMtiR1u1nyuJtsQjgDxWoYCTnXzEVAhSbN5Y45UjppEDVDvZvIQgwgl8EVfLl3TUWK6wZtwjJT2YdHHgaxQLtVvd4aDZ\/BkqWOvLim1RDU278\/nH8xVEwrLaH13HW0ymEejb8b\/AKYD8QCAI6Lw\/GQY7C0JxOL+Mf22SQaukgfHMcOaJsFeodcMrJpSOK9v1hrZbBKj2ibuARY6xUtDKViQqF268X4wCi2VwXu5cuUqJBnicMYbm3QfXj8YyLvSPmTZwzkKxYE+TeIIEKqoaBXafeKs+zHhgtJ8ZC51FSl6g8y1lqhjv5CmIXHUivmpj9TLS1oE372\/DiMl2ZN01CtPfclaYPKdC60z1MUyuqgStb1FusY8JW6Gppu2YrWxqL77X4ydvhShG9A+5vJERBhOKI0obMEsITIEdKK+XriyDQHSnlOawZ2TFefS6TWpvOQyCEXl5v6TE+yuw79JIZc9LxSmoEcfjQpIG3z0zWv5qQ+Uut5va0tet3XjuG0EArsvhvnDBQwSbu\/k9GN3JsgT6TuSbEO6E86+hw7Tfi+v844rggAG\/M84JotfrgPCYCqUqKtUHQfUxsGobH5L1wGyhQT0WafeAOYGAScYP8ZZVzYRXoUP2Z17rIH0Gj8FxThJTp2AKfX3hEhaFoIRTevDjInwDAWtRLfPxgFfiRVfMQH69axumuiNcRZ8axu666wcF\/bHc1Rg3pJdiOVo5RDwG1DgnGGNRwmiHN9cfMhUJtaqXb5bgMyV4F61LPzjCBAIV86rjt6fpRujFPoTH4JADI7sr3CqaCgegHD4wzGTwFsgc9LfjGmNUCIXr4T+HFi2obgdktutZXgREDS3qXncLAjjAGpQE7vL7\/HCmpexx+1gFk4lvnNo02tSSKNT4wuddF+I6uvB9Z3+hWr9hUMJiNCxGhDgu8UTQhDnfeX5KFUPILJ8YnWVaqKSu5PGJSykyfd65trdYwU7zTt2dxuhZhxvsrNYMMDBArtjQwyqlSq9KAzef\/\/Z\" \/>","af6b0782":"### Attrition_Flag - target variable","3ee80d66":"**Observations:**\n\n1. We see that Logistic Regression, Random Forest, XGBoost and Decision Tree models are over fiting on the oversampled training set as well.\n2. However the cross_validation has reduced the over fitting.\n3. Random Forest, Gradient Boosting and XGBoost gives best perfomance and we would want to tune them for further improvements.\n5. Let us also build these models on Under sampled datasets to validate our undertstanding.","e8391f2b":"**Observations:**\n1. 33.4% customers had interacted 3 times with bank staff in last 12 months, followed by 31.9% customers who were contacted 2 times.\n2. Very small percentage of customers have interacted for 6 times in last 12 months.","52ded55c":"**Observations:**\n\n1. We see that Hypertuning with Best Parameters identied by RandomizedSearchCV, of the XGBoostClassifier has improved the recall to 1 on training set.\n2. Performance is consistent on Validation and Testing set as well.\n3. Accuracy and Precision scores are also consistent.","2f000f73":"**Observations:**\n\nAs we have seen during bivariate analysis there are no clear indicators of attrition as all variables show similar data for both existing customers and attrited customers.","d7496302":"### Split the data in training and test sets\n\nWe already have the model to be tuned, so we will need only Training and Testing Sets.","1831b4a6":"**Observations:**\n1. Mean is slightly smaller than median.\n2. The data looks normally distributed.\n3. There is one customer with age of 73 years, it is possible case and is not an outlier.","9fb458cf":"**Observations:**\n\n1. Mean is greater than median depicting right skewed data.\n2. From our domain knowledge we know that some customers will have higher credit limit compared to others.\n3. The data looks normal for the domain and no treatment required.","4c313e0c":"### Process the Income_Category Column","6e1f3347":"**Observations:**\n\n1. We see that Random Forest, XGBoost and Decision Tree models are over fiting on the undersampled training set as well.\n2. However the cross_validation has reduced the over fitting.\n3. Random Forest, Gradient Boosting and XGBoost gives best perfomance on undersampled training set.\n4. The boxplot shows that Gradient Boosting has 2 outliers and Random Forest has 1 outlier.","80d752ab":"#### Check the distinct data sets","e953f0af":"**Observations:**\n\n1. People with Doctorate degree tend to leave the Credit Card program more than other Education_Levels.\n2. Education_Level other than Doctorate dosent show significant impact on attrition.\n3. Data entry error \/ missing data cases should be reduced for future data capture to avoid NULL Values thus resulting into seperate category.","15996017":"**Observations:**\n\n1. Mean is slightly smaller than median.\n2. The data largely looks balanced.\n3. Few customers have used their card more than the other customers.\n4. The data looks good and no treatment required.","cc502687":"### Avg_Open_To_Buy","be60de29":"#### RandomizedSearchCV","c377d92f":"### Months_Inactive_12_mon","c8324bd0":"### Encode the target column","e9774899":"**Observations:**\n\nMost customers have 3 dependents followed by customers with 2 and 1 dependents.","9ae3528f":"## Recommendations\n\n1. Business can focus on customer using Revolving Credit and curate specific offers for them to retain those customers.\n2. Business can also promote offers for Female Customers to reduce attrition.\n3. Customer satisfaction survey to be conducted for Platinum Cards as they contribute to most attrited customers.\n4. The company can run various campaigns and offers for customers with family to increase sales.\n5. Card categories other than Blue to be promoted more.\n6. Specific promotional and rewards program can be created for different income groups.\n7. Customers with Income more that $120K should also be focused upon to enhance their satisfaction to reduce the attrition.\n8. Customers with Doctorate degrees contribute more to the attrited customers. Business can use the Customer satisfaction survey data, implement findings and improve the retention ratio of such customers.\n9. The data collection process can be enhanced to capture additional information related to Customer Employment, Living Status and Spending Pattern. This will help in doing better missing value treatment and will also provide uniform data for analysis.\n10. Business has to also focus on customers that have not used their cards for more than 3 months in last one year. There are chances that these customers may close the card accounts.","1b4be64e":"### Income_Category","0118db91":"## Prepare Data for Model Building","b631c88c":"**Observations:**\n\n1. Mean is slightly greater than median.\n2. Some customers are likely to spend more on credit card, which makes data ligitimate and can be used as is.\n3. The data looks normal for the domain and no treatment required.","bafb3b5f":"### Avg_Utilization_Ratio","3f4583fc":"**Observations:**\n\n1. We see that Hypertuning with Best Parameters identied by GridSearchCV, of the GradientBoostClassifier has improved the recall to 1 on training set.\n2. Performance is consistent on Validation and Testing set as well.\n3. Accuracy and Precision scores are also consistent.","10b45d86":"### Card_Category","1bdeb19c":"**Observations:**\n\nWe see that all null values are now treated","1ef688e6":"#### Use the best parameters and train the model","3e65112d":"## Multivariate Analysis ","ca387cda":"### Build different models on Undersampled Training Set using KFold and cross_val_score.","65acc1d8":"## Understand the data","a5d3573a":"### Shape of data","9fc8472d":"### Build different models on Oversampled Training Set using KFold and cross_val_score.","c9e9b3ba":"### Compare the Model Performance","87205a2f":"**Observations:**\n\n1. This is clearly a data input error.\n2. We are not able to accertain which category to replace \"abc\".\n3. Since all income categories are covered in the variable, it is clear the NULL Values are represented as \"abc\" due to data capture.","c35c35c5":"### Gender","a0414bf1":"### Total_Trans_Ct","521cba18":"#### Use the best parameters and train a model","00564e68":"#### Draw Consufion matrix for Validation Set","0897ed54":"### XGBoostClassifier","3b130198":"### Education_Level","56de578c":"**Observations:**\n\n1. We have cross validated missing value for Marital_Status with other variables like Education_Level, Card_Category and Income_Category.\n2. Though the validation shows that most of the customers may be married, but it is not clearly indicated.\n3. We will update the missing values using SimpleImputer with strategy as most_frequent.","13aa4cb2":"#### GridSearchCV","a5240350":"### Check the distinct values for anomalies","9a299b6f":"#### Evaluate the model performance","c796579f":"#### Boxplot of scores","e64597c7":"**Observations:**\n\n1. Mean is almost equal to median.\n2. The variable represents a comparision between utilisation of Q4 as compared to Q1.\n3. The data looks normal for the domain and no treatment required.","544a0e13":"### Dependent_count","cb18b947":"**Observations:**\n\n1. We see that Hypertuning with Best Parameters identied by GridSearchCV, of the XGBoostClassifier has improved the recall to 1 on training set.\n2. Performance is consistent on Validation and Testing set as well.\n3. Accuracy and Precision scores are also consistent.","32ae865c":"**Observations:**\n\n1. Mean is slightly greater than median.\n2. The variable represents a comparision between utilisation of Q4 as compared to Q1.\n3. The data looks normal for the domain and no treatment required.","d8c503fb":"#### Evaluate the model performance"}}