{"cell_type":{"489cd5bc":"code","ac127cd5":"code","695f8af9":"code","9c219497":"code","57dfbc93":"code","244af89d":"code","68ad83dd":"code","77bf61ce":"code","e394e0f5":"code","1c7ebe5a":"code","90b916ab":"code","697b6dc1":"code","448676df":"code","7b1e425e":"code","7f448895":"code","2f699f67":"code","fe26ca80":"code","765da62c":"code","020daf65":"code","1652ff6d":"code","66234137":"code","a72dba0d":"code","a40e694f":"code","a557d9ef":"code","5606c40a":"code","081686fc":"code","8a8cd679":"code","a0e6d8ea":"code","8a4ecbd8":"code","8d457c04":"code","a250a978":"code","8fa8c44d":"code","70439db2":"code","a811cd25":"code","e1a7307d":"code","04fdf3e8":"code","88406a63":"code","31ca8c48":"code","19db0b0c":"code","3fa6913c":"code","365e1ff0":"code","87aab85d":"code","8f8f0477":"code","51780854":"code","38fa3a97":"code","a7dc9688":"code","deca4e98":"code","3ca71446":"code","3074038a":"markdown","617815b0":"markdown","a803acfe":"markdown"},"source":{"489cd5bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        pass\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ac127cd5":"len(os.listdir(\"\/kaggle\/input\/qa-testing-23-june\"))\nos.listdir('\/kaggle\/input\/qa-testing-23-june')","695f8af9":"import os\nos.chdir(\"\/kaggle\/input\/qa-testing-23-june\/old_transformers\")\n!pip install -U .\/transformers > \/dev\/null\nos.chdir(\"\/kaggle\/input\")","9c219497":"!pip install -q gensim==3.8.2 > \/dev\/null","57dfbc93":"!pip install sentence-transformers > \/dev\/null","244af89d":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nimport json\nimport pandas as pd \nimport re\nimport nltk\nnltk.download('punkt')\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom gensim.models.phrases import Phraser, Phrases\nfrom gensim.models.word2vec import Word2Vec\nimport numpy as np\nimport torch\nfrom transformers import LongformerTokenizer, LongformerForQuestionAnswering, LongformerTokenizerFast\nimport matplotlib.pyplot as plt","68ad83dd":"list_of_docs = os.listdir(\"\/kaggle\/input\/qa-testing-23-june\/Data_For_Question_Answering_on_Regulatory_Documents-20200623T050102Z-001\/Data_For_Question_Answering_on_Regulatory_Documents\/Annotated_QAs\")\n#print(list_of_docs)\nprint(len(list_of_docs))\nlist_of_docs = [\"\/kaggle\/input\/qa-testing-23-june\/Data_For_Question_Answering_on_Regulatory_Documents-20200623T050102Z-001\/Data_For_Question_Answering_on_Regulatory_Documents\/Annotated_QAs\/{}\".format(i) for i in list_of_docs if \"train-v1.1.json\" not in i and \"dev-v1.1.json\" not in i]\n#print(list_of_docs)\nprint(len(list_of_docs))","77bf61ce":"docs = []\n\nfor i in list_of_docs:\n  with open(i, 'r') as f:\n    doc = json.load(f)\n  docs += [i['context'] for i in doc['data'][0]['paragraphs']]\n\nprint(len(docs))\n#docs[0]","e394e0f5":"from nltk.stem.porter import PorterStemmer\n\nstemmer = PorterStemmer()\n\ndef clean_docs(x, bi = True):\n  x = re.sub(r\"n't\", r\" not\", x.lower())\n  x = re.sub(r\"[^-0-9a-z ]\", r\" \", x)\n  x = re.sub(r\"[ ]+\", r\" \", x)\n  x = word_tokenize(x)\n  x = [i for i in x if len(i) > 1]\n  x = [stemmer.stem(i) for i in x]\n  if bi == True:\n    return bigram[x]\n  else:\n    return x","1c7ebe5a":"print(clean_docs(\"Money laundering and terror financing and money launderer and terror financer\", bi = False))","90b916ab":"news_documents = [\"\/kaggle\/input\/qa-testing-23-june\/drive-download-20200623T104925Z-001\/{}\".format(i) for i in os.listdir(\"\/kaggle\/input\/qa-testing-23-june\/drive-download-20200623T104925Z-001\") if \".xlsx\" in i and \"news\" in i]\n\ndf = pd.DataFrame()\n\nfor i in news_documents:\n  df = pd.concat((df, pd.read_excel(i)), axis = 0)\n\ndocs_2 = df.Text.tolist()\n\nprint(len(docs_2))\n\ndocs_2 = list(set(docs_2))\n\ndocs_2 = [i for i in docs_2 if type(i) == type('s')]\n\ndocs_2 = [i for i in docs_2 if len(i) > 100]\n\ndocs_2 = [i for i in docs_2 if (\"money\" in i.lower() and \"laundering\" in i.lower()) or (\"aml\" in i.lower() and \"ctf\" in i.lower()) or (\"pep\" in i.lower() and \"state\" in i.lower() and \"bank\" in i.lower()) or (\"state\" in i.lower() and \"bank\" in i.lower()) or (\"compliance\" in i.lower())]\n\nprint(len(docs_2))","697b6dc1":"docs_for_w2v = docs + docs_2","448676df":"docs_for_w2v_prime = [clean_docs(i, bi = False) for i in docs_for_w2v]","7b1e425e":"print(docs_for_w2v_prime[0:10])\nprint(len(docs_for_w2v_prime))","7f448895":"bigram = Phraser(Phrases(docs_for_w2v_prime, threshold = 64))","2f699f67":"docs_for_w2v_prime_2 = [bigram[i] for i in docs_for_w2v_prime]","fe26ca80":"docs_for_w2v_prime_2[:2]","765da62c":"model_w2v = Word2Vec(docs_for_w2v_prime_2, size = 64)","020daf65":"model_w2v.most_similar(clean_docs('money-laundering'))","1652ff6d":"#bigram.save('\/content\/gdrive\/My Drive\/bigram_22_june.pkl')\n#model_w2v.save('\/content\/gdrive\/My Drive\/w2v_22_june.w2v')\nbigram = Phraser.load('\/kaggle\/input\/qa-testing-23-june\/bigram_22_june.pkl')\nmodel_w2v = Word2Vec.load('\/kaggle\/input\/qa-testing-23-june\/w2v_22_june.w2v')","66234137":"from gensim.summarization.bm25 import BM25","a72dba0d":"vocab = model_w2v.wv.vocab\n\nfrom nltk.corpus import stopwords\nnltk.download('stopwords')\n\nstopset = stopwords.words()\n\ndef art_to_vect(x):\n  x = clean_docs(x)\n  x = list(set(x))\n  x = (np.array([model_w2v[i] for i in x if i in vocab and i not in stopset]))\n  return np.sum(x, axis = 0).flatten()\/len(x)","a40e694f":"from sentence_transformers import SentenceTransformer\n\nmodel_bert = SentenceTransformer('bert-base-nli-mean-tokens')\n\nvect_bert = model_bert.encode(docs)","a557d9ef":"cleaned_chatbot_docs = [clean_docs(i) for i in docs]\nvect_docs = [art_to_vect(i) for i in docs]\ndocs_tuple = [(i, j, k, l) for i, j, k, l in zip(docs, cleaned_chatbot_docs, vect_docs, vect_bert)]","5606c40a":"def corpus(x):\n  for i in x:\n    yield i","081686fc":"bm25 = BM25(corpus(cleaned_chatbot_docs))","8a8cd679":"def get_top_n(bm25, query, n=10):\n    \n    # score docs\n    scores = np.array(bm25.get_scores(query))\n    \n    # get indices of top N scores\n    idx = np.argpartition(scores, -n)[-n:]\n    \n    # sort top N scores and return their indices\n    return idx[np.argsort(-scores[idx])]","a0e6d8ea":"test_query = clean_docs(\"How is an offshore bank defined\")\ntop_idx_bm = get_top_n(bm25, test_query)\nprint(top_idx_bm)","8a4ecbd8":"from scipy.spatial.distance import cosine\n\ndef get_top_n_vect(vects, query, n = 10):\n  x = art_to_vect(query)\n  x = [(j, 1 - cosine(x, i)) for j, i in enumerate(vects)]\n  x = sorted(x, key = lambda x: x[1], reverse = True)[:10]\n  x = [i[0] for i in x]\n  return x","8d457c04":"test_query = \"How is an offshore bank defined?\"\ntop_idx_w2v = get_top_n_vect(vect_docs, test_query)\nprint(top_idx_w2v)\n#print(cleaned_chatbot_docs[top_idx])\n#print(docs_tuple[top_idx][0])","a250a978":"def get_top_n_vect_bert(vects, query, n = 10):\n  x = model_bert.encode([query])\n  x = [(j, 1 - cosine(x, i)) for j, i in enumerate(vects)]\n  x = sorted(x, key = lambda x: x[1], reverse = True)[:10]\n  x = [i[0] for i in x]\n  return x","8fa8c44d":"test_query = \"How is an offshore bank defined?\"\ntop_idx_bert = get_top_n_vect_bert(vect_bert, test_query)\nprint(top_idx_bert)\n#print(cleaned_chatbot_docs[top_idx])\n#print(docs_tuple[top_idx][0])","70439db2":"print(set(top_idx_bm).intersection(top_idx_bert))\nprint(set(top_idx_bm).intersection(top_idx_w2v))\nprint(set(top_idx_bert).intersection(top_idx_w2v))\nprint(set(top_idx_bm).intersection(top_idx_bert).intersection(top_idx_w2v))","a811cd25":"tokenizer = LongformerTokenizerFast.from_pretrained('\/kaggle\/input\/qa-testing-23-june\/CHATQA_4-20200623T050106Z-001\/CHATQA_4')\nmodel = LongformerForQuestionAnswering.from_pretrained('\/kaggle\/input\/qa-testing-23-june\/CHATQA_4-20200623T050106Z-001\/CHATQA_4')\n\ndef qa_long(question, text):\n  try:\n    encoding = tokenizer.encode_plus(question, text, return_tensors=\"pt\")\n    input_ids = encoding[\"input_ids\"]\n\n    attention_mask = encoding[\"attention_mask\"]\n\n    start_scores, end_scores = model(input_ids, attention_mask=attention_mask)\n    all_tokens = tokenizer.convert_ids_to_tokens(input_ids[0].tolist())\n\n    answer_tokens = all_tokens[torch.argmax(start_scores) :torch.argmax(end_scores)+1]\n    #print(torch.max(start_scores), torch.max(end_scores))\n    answer = tokenizer.decode(tokenizer.convert_tokens_to_ids(answer_tokens))\n    \n    return answer, start_scores, end_scores\n  except Exception as e:\n    pass","e1a7307d":"import time\nfrom textwrap import wrap\n\ndef check(query):\n    with torch.no_grad():\n        test_query = clean_docs(query)\n        top_idx = get_top_n(bm25, test_query)\n        print(query)\n        for i in top_idx[0:5]:\n            #print(cleaned_chatbot_docs[i])\n            #print(docs_tuple[i][0])\n            try:\n                ans = qa_long(query, docs_tuple[i][0])\n                #print(ans[0])\n                #title = ax.set_title(\"\\n\".join(wrap(\"Some really really long long long title I really really need - and just can't - just can't - make it any - simply any - shorter - at all.\", 60)))\n                a = len(ans[0]) \/\/ 200\n                if len(ans[0]) < 200:\n                    ans[0] = ans[0].center(200)\n                fig, (ax1, ax2) = plt.subplots(1, 2)\n                fig.suptitle(\"\\n\".join(wrap(ans[0], 200)), y = 1 + int(a)\/10)\n                ax1.plot(ans[1].detach().numpy().flatten())\n                ax2.plot(ans[2].detach().numpy().flatten())\n                #plt.draw()\n            except:\n                pass\n    #plt.show()","04fdf3e8":"check(\"How is an offshore bank defined?\")","88406a63":"questions = []\n\nfor i in list_of_docs:\n  with open(i, 'r') as f:\n    doc = json.load(f)\n  x =  [i['qas'] for i in doc['data'][0]['paragraphs']]\n  for i in x:\n    y = [j['question'] for j in i]\n    questions += y\n\nprint(len(questions))\nquestions[0]","31ca8c48":"import random\n\nto_ask = [questions[random.randint(0, len(questions) - 1)] for i in range(10)]","19db0b0c":"check(to_ask[0])","3fa6913c":"check(to_ask[1])","365e1ff0":"check(to_ask[2])","87aab85d":"check(to_ask[3])","8f8f0477":"check(to_ask[4])","51780854":"check(to_ask[5])","38fa3a97":"check(to_ask[6])","a7dc9688":"check(to_ask[7])","deca4e98":"check(to_ask[8])","3ca71446":"check(to_ask[9])","3074038a":"# Testing","617815b0":"# Initialization","a803acfe":"# Pipeline"}}