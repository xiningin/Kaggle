{"cell_type":{"f618f097":"code","6d71f1da":"code","4cfd8cbd":"code","79395273":"code","90e40eaf":"code","d88af71b":"code","eb067956":"code","7dd36cf3":"code","e3a32de7":"code","2713b282":"code","4f0d6372":"code","b1c90296":"code","77d25d8e":"code","bda59fb5":"code","3130720c":"code","4ef4949e":"code","f5ed705a":"code","64a99a64":"code","8c3b3e43":"code","048dbc7e":"markdown","374e7f0a":"markdown","dbe6f3ba":"markdown","939cc64d":"markdown","28798cff":"markdown","255af5f4":"markdown","52f61da1":"markdown","b9b817e5":"markdown","05c43468":"markdown","9e8d4981":"markdown","6bdacdd1":"markdown","ed3c941f":"markdown"},"source":{"f618f097":"import os, sys, subprocess\nimport numpy as np\nimport pandas as pd\nimport gc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.core.display import HTML, Image\nfrom scipy.stats import skew, kurtosis\n\n# import chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\nfrom html.parser import HTMLParser\n\npd.set_option('display.max_rows', 180)\n\nprint('List of datasets:')\nprint(os.listdir(\"..\/input\/\"))\nprint('LB files:')\nprint(os.listdir(\"..\/input\/vaccine-lb\/\"))","6d71f1da":"# see: https:\/\/www.kaggle.com\/pednoi\/visualize-the-shakeups-of-10-recent-competitions\/data?select=Elo+Merchant+Category+Recommendation+_+Kaggle.html\n\nclass RankParser(HTMLParser):\n\n    def __init__(self):\n        self.entered = False\n        self.sign = ''\n        self.data = []\n        \n        super().__init__()\n    \n    def handle_starttag(self, tag, attrs):\n        if tag == 'td' and ('data-th', 'Change') in attrs:\n            self.entered = True\n            \n        if self.entered and tag == 'span':\n            if len(attrs) > 0 and len(attrs[0]) > 1 and attrs[0][1].startswith('position-change'):\n                direction = attrs[0][1][len('position-change__'):]\n                if direction == 'fallen':\n                    self.sign = '-'                    \n\n    def handle_endtag(self, tag):\n        if self.entered and tag == 'td':\n            self.entered = False\n            self.sign = ''\n\n    def handle_data(self, data):\n        if self.entered:\n            data = '0' if data == '\u2014' else data\n            self.data.append(int(self.sign+data.strip()))\n    \n    def get_data(self):\n        return self.data\n\ndef read_html(file_path):\n    content = open(file_path, encoding='utf-8').read()    \n    parser = RankParser()\n    parser.feed(content)\n    return parser.get_data()\n\n\ndef do_read_csv(name):\n    df = pd.read_csv(name, low_memory=False)\n    print('-'*50)\n    print ('> Loaded:', name, df.shape)\n    print('-'*50)\n    return df","4cfd8cbd":"def plot_hist(title, diff):\n    stats = \"\"\n    stats += \"count = %d\\n\" % len(diff)\n    stats += \"mean = %.2f\\n\" % np.mean(diff) # always zero because the data are zero-sum\n    stats += \"std = %.4f\\n\" % np.std(diff)\n    stats += \"skew = %.4f\\n\" % skew(diff)\n    stats += \"kurtosis = %.4f\\n\" % kurtosis(diff)\n    \n    print(\"Mean shake-up       \" ,np.mean(diff))\n    print(\"\\nMedian shake-up     \" ,np.median(diff))\n    print(\"\\nMax shake-up        \" ,np.max(diff))\n    print(\"\\nMin shake-down ;)   \" ,np.min(diff))\n    print(\"\\nStd shake-up        \" ,np.std(diff))\n    \n    fig = plt.figure(figsize=(16, 6))\n    #     sns.distplot(diff, bins=100)\n    plt.hist(diff, bins = 50, edgecolor = 'black', color = 'green')\n    plt.text(0.05, 0.5, stats, transform=plt.gca().transAxes)\n    plt.xlabel(\"Places Shake-up\")\n    plt.ylabel(\"Frequency\")\n    plt.title(title, fontsize=16)\n    plt.show()\n\n\ndef color_negative_red(val):\n    \"\"\"\n    Takes a scalar and returns a string with\n    the css property `'color: red'` for negative\n    strings, black otherwise.\n    \"\"\"\n    try:\n        color = 'red' if val < 0 else 'black'\n    except:\n        color = 'black'\n    return 'color: %s' % color\n\n\ndef plot_candle(title, diff):\n    closes = np.array(range(len(diff)))+1\n    opens = closes + np.array(diff)\n    highs = np.where(np.array(diff)<0, closes, opens)\n    lows =  np.where(np.array(diff)>=0, closes, opens)\n    \n    hovertext = ['private lb: '+str(c)+'<br>public lb: '+ str(o) +'<br>TeamName: '+str(pvt_lb.iloc[c-1]['TeamName']) +'<br>shake: '+str(abs(o-c))  for o, c in zip(opens, closes)]\n\n    trace = go.Ohlc(x=list(range(1, len(diff)+1)), open=opens, high=highs, low=lows, close=closes,\n                    increasing=dict(line=dict(color='#800000')), # '#FF6699'\n                    decreasing=dict(line=dict(color='#228B22')),          # '#66DD99'\n                    text=hovertext, \n                    hoverinfo='text')\n    \n    layout = go.Layout(\n        title = \"<b>%s<\/b>\" % title,\n        xaxis = dict(\n            title='Final ranks (Pvt LB)',\n            rangeslider = dict(visible=False)\n        ), \n        yaxis=dict(\n            title='shakeups',\n            autorange='reversed'\n        ),\n        width=800,\n        height=600)\n    \n    fig = go.Figure(data=[trace], layout=layout)    \n    iplot(fig, filename='shakeup_candlestick')\n    \n    \ndef make_scatter_competitions(comps, teams):\n\n    shakes = {}\n    COLOR_DICT = {0: 'deepskyblue', 1: 'gold', 2: 'silver', 3: 'chocolate'}\n    plt.rc('font', size=14)\n    \n    for i, df in teams.groupby('CompetitionId', sort=False):\n        fname = comps.Slug[i]\n        row = comps.loc[i]\n        shakeup = df.eval('abs(PrivateLeaderboardRank-PublicLeaderboardRank)').mean() \/ df.shape[0]\n        title = (f'{row.Title} \u2014 {row.TotalTeams} teams \u2014 '\n                 f'{shakeup:.3f} shake-up \u2014 {row.DeadlineText}')\n        shakes[i] = shakeup\n        df = df.sort_values('PrivateLeaderboardRank', ascending=False)  # plot gold last\n        ax = df.plot.scatter('PublicLeaderboardRank', 'PrivateLeaderboardRank', c=df.Medal.map(COLOR_DICT), figsize=(15, 15))\n        plt.title(title, fontsize=16)\n        l = np.arange(df.PrivateLeaderboardRank.max())\n        ax.plot(l, l, linestyle='--', linewidth=1, color='Black', alpha=0.5)\n        ax.set_xlabel('Public Leaderboard Rank')\n        ax.set_ylabel('Private Leaderboard Rank')\n        plt.tight_layout()\n        plt.show()\n    return shakes\n\n\ndef make_scatter_single_competition(df, title=''):\n\n    plt.rc('font', size=14)\n    COLOR_DICT = {0: 'deepskyblue', 1: 'gold', 2: 'silver', 3: 'chocolate'}\n\n    title = 'OpenVaccine: mRNA Vaccine Degradation Prediction'\n    DeadlineText = '09\/07\/2020'\n\n    shakeup = df['shake']\n    \n    shakeup = (abs(df.Pvt_rank - df.Public_rank)).mean() \/ df.shape[0]\n    \n    \n    title = f' {title} \u2014 {len(df)} teams \u2014 {shakeup:.3f} shake-up \u2014 {DeadlineText}'\n\n    df = df.sort_values('Pvt_rank', ascending=False)  # plot gold last\n    ax = df.plot.scatter('Public_rank', 'Pvt_rank', c=df.Medal.map(COLOR_DICT), figsize=(15, 15))\n    plt.title(title, fontsize=16)\n\n    l = np.arange(df.Pvt_rank.max())\n    ax.plot(l, l, linestyle='--', linewidth=1, color='Black', alpha=0.5)\n    ax.set_xlabel('Public Leaderboard Rank')\n    ax.set_ylabel('Private Leaderboard Rank')\n    plt.tight_layout()\n    plt.show()\n","79395273":"META_DIR = \"..\/input\/meta-kaggle\"\nCSV_DIR = \"..\/input\/vaccine-lb\"\nHTML_DIR = CSV_DIR","90e40eaf":"# read PUBLIC LB (csv)\n\npublic_lb = do_read_csv(f'{CSV_DIR}\/Vaccine-public-LB2.csv')  \nprint('Public LB (Final) shape before cleaning:', len(public_lb))\n\n# create df for future use\npublic_scores = public_lb.groupby(['TeamId'])['Score'].agg('max').sort_values(ascending=False)\npublic_scores = pd.DataFrame(public_scores)\npublic_scores = public_scores.reset_index()\n\npublic_scores = public_scores.merge(public_lb[['TeamId', 'TeamName']], on='TeamId', how='right').drop_duplicates()\n\nprint('Public LB (Final) shape after cleaning:', len(public_scores))","d88af71b":"# read PVT LB (html)\n\npvt_lb = pd.read_excel(f'{CSV_DIR}\/Vaccine-pvt-LB2.xlsx', header=[0])\npvt_lb = pvt_lb[['#', '\u25b3pub', 'Team Name','Score', 'Entries', 'Last']]\npvt_lb.columns = ['Pvt_rank','pos_change', 'TeamName', 'Pvt_score', 'no_submissions', 'Last']                \n                \n# modify shake-up column\npvt_lb.pos_change = pvt_lb.pos_change.replace(to_replace='\u2014', value=0)\npvt_lb.pos_change = pvt_lb.pos_change.astype(int)\n\n\nfile = 'Vaccine-pvt-LB2.htm'\nshake_up = read_html(f'{HTML_DIR}\/{file}')\npvt_lb['shake'] = np.array(shake_up)\nprint('No. of Teams in PVT LB (Final):', len(pvt_lb))\n# sanity check\nassert len(public_scores)==len(pvt_lb), 'Not valid shapes!'","eb067956":"pvt_lb.loc[pvt_lb['shake']==0][['Pvt_rank', 'TeamName']]","7dd36cf3":"plot_hist('OpenVaccine: mRNA Vaccine Degradation Prediction - Shake-up', shake_up)","e3a32de7":"plot_candle('OpenVaccine: mRNA Vaccine Degradation Prediction - Shake-up',  pvt_lb['shake'])","2713b282":"# modified from: https:\/\/www.kaggle.com\/robikscube\/ashrae-leaderboard-and-shake\n\ndf = pvt_lb[['Pvt_rank','shake','TeamName','Pvt_score','no_submissions']].copy()\n\ndf['medal'] = ''\ndf.loc[df['Pvt_rank'] <= 165, 'medal'] = '\ud83e\udd49'\ndf.loc[df['Pvt_rank'] <= 82, 'medal'] = '\ud83e\udd48'\ndf.loc[df['Pvt_rank'] <= 13, 'medal'] = '\ud83e\udd47'\ndf = df[['Pvt_rank','medal','shake', 'TeamName', 'Pvt_score']]   \n\ndf.head(165).style.applymap(color_negative_red).hide_index()","4f0d6372":"# load 20 selected kernels\nkernels = pd.read_csv('..\/input\/vaccine-lb\/vaccine-nbs.csv')\n\ncateg_dict = {}\nfor i, cat in enumerate(kernels.category.unique()):\n    categ_dict[cat] = i\nkernels['Categ'] = kernels.category.map(categ_dict)","b1c90296":"kernels[['title','version','public_score','private_score','author','category']].style.hide_index()","77d25d8e":"\ndef make_scatter_nb(df, title='OpenVaccine: mRNA Vaccine Degradation Prediction'):\n\n    plt.rc('font', size=14)\n    COLOR_DICT = {0: 'deepskyblue', 1: 'green', 2: 'red', 3: 'chocolate', \n                  4: 'orange', 5: 'cyan',  6: 'yellow', 7: 'magenta'}\n\n    DeadlineText = '09\/07\/2020'\n    title = f' {title} \u2014 # of kernels:{len(df)}'\n\n    df = df.sort_values('public_score', ascending=False)  # plot gold last\n    \n    hovertext = ['private #: '+str(df.private_score[i])+'<br>public #: '+ str(df.public_score[i]) +'<br>Title: '+str(df.title[i]) for i in range(20)]\n\n    trace = go.Scatter(x=df.public_score, \n                       y=df.private_score,\n                       mode='markers',\n                       marker_size=10,\n                       hoverlabel=dict(namelength=0),\n                       text=hovertext, \n                       hoverinfo='text')\n    \n    trace2 = go.Scatter(x=l)\n    \n    # dict(line=dict(color='#800000')), # '#FF6699'# '#66DD99''#228B22'         \n    layout = go.Layout(\n        title=\"<b>%s<\/b>\" % title,\n        xaxis=dict(title='Public LB score', rangeslider = dict(visible=False)), \n        yaxis=dict(title='Private LB score'),\n        showlegend=True,\n        width=800,\n        height=600)\n    \n    fig = go.Figure(data=[trace, \n#                           trace2\n                         ], layout=layout)    \n    iplot(fig, filename='nb')\n    \n\n#     plt.title(title, fontsize=16)\n\n    \n# #     l = np.arange(df.private_score.max())\n# #     ax.plot(l, l, linestyle='--', linewidth=1, color='Black', alpha=0.5)\n#     ax.set_xlabel('Public LB score')\n#     ax.set_ylabel('Private LB score')\n#     plt.tight_layout()\n#     plt.show()","bda59fb5":"make_scatter_nb(kernels)","3130720c":"# select 20 most recent competitions\n\nteams = do_read_csv(f'{META_DIR}\/Teams.csv')\ncomps = do_read_csv(f'{META_DIR}\/Competitions.csv').set_index('Id')\ncomps['DeadlineText'] = comps.DeadlineDate.str.split().str[0]\ncomps['DeadlineDate'] = pd.to_datetime(comps.DeadlineDate)\n\nselected_comps = comps[(comps.HostSegmentTitle=='Featured') | (comps.HostSegmentTitle=='Research')].copy()\nselected_comps = selected_comps.sort_values('DeadlineDate')[-20:]\n\n# select teams for those competitions\nteams = teams.loc[teams.CompetitionId.isin(selected_comps.index)]\nteams = teams.assign(Medal=teams.Medal.fillna(0).astype(int))\nprint(teams.shape)","4ef4949e":"df_new = df.copy()\ndf_new['Medal'] = 0\ndf_new.loc[df_new['Pvt_rank'] <= 165, 'Medal'] = 3\ndf_new.loc[df_new['Pvt_rank'] <= 82, 'Medal']  = 2\ndf_new.loc[df_new['Pvt_rank'] <= 13, 'Medal']  = 1\ndf_new['Public_rank'] = df_new['Pvt_rank']+df_new['shake']\n\n# df_new","f5ed705a":"make_scatter_single_competition(df_new, title='OpenVaccine: mRNA Vaccine Degradation Prediction')","64a99a64":"shakes = make_scatter_competitions(selected_comps, teams)","8c3b3e43":"def fmt_link(row):\n    return f'<a target=_blank href=\"https:\/\/www.kaggle.com\/c\/{row.Slug}\">{row.Title}<\/a>'\n\n\nshow_cols = ['Title', 'HostSegmentTitle', 'TotalTeams','DeadlineText', 'Shakeup']\nbars = ['TotalTeams', 'Shakeup']\n\nselected_comps['Shakeup'] = np.array([shakes[key] for key in shakes.keys()])\n\ntmp = selected_comps.assign(Title=selected_comps.apply(fmt_link, 1))\ntmp = tmp[show_cols]\n\n# add Open Vaccine\ntmp_new = {}\ntmp_new['Title'] = f'Open Vaccine: mRNA Vaccine Degradation Prediction'\ntmp_new['HostSegmentTitle'] = 'Research'\ntmp_new['TotalTeams'] = len(public_scores)\ntmp_new['DeadlineText'] = '09\/07\/2020'\ntmp_new['Shakeup'] = (abs(df_new.Pvt_rank - df_new.Public_rank)).mean() \/ df_new.shape[0]\ntmp_new = pd.DataFrame(tmp_new, columns=show_cols, index=[0])\n\ntmp = pd.concat([tmp, tmp_new], axis=0)\n# tmp = tmp.assign(Title=selected_comps.apply(fmt_link, 1))\n\n# display\ntmp.set_index('Title').head(30).style.bar(subset=bars)","048dbc7e":"# Display Final Rankings & Medals","374e7f0a":"# Distribution of Shake Up\n\n\n### LB Status (Final)\n\n- `Max jump-up (shake-up)`: `+407` \n    - Team Name: `MarkFive` | `From`: `860 (# Pub)` `to`: `453 (# Pvt)`\n--------------------------------------------------------------\n\n- `Max jump-down (shake-down)`: `-901` \n    - Team Name: `senkin13` | `From`: `93 (# Pub)` `to`: `994 (# Pvt)`\n","dbe6f3ba":"# Extra I: Public vs Private scores of Top Public Kernels","939cc64d":"on progress.. (to be updated)","28798cff":"- `Unshaked Team(s)`:","255af5f4":"# Credits\n\n- https:\/\/www.kaggle.com\/pednoi\/visualize-the-shakeups-of-10-recent-competitions\n\n- https:\/\/www.kaggle.com\/jtrotman\/meta-kaggle-competition-shake-up\n\n- https:\/\/www.kaggle.com\/jtrotman\/meta-kaggle-scatter-plot-competition-shake-up\n","52f61da1":"# Extra II: Compare with 20 most recent Competitions","b9b817e5":"<H3> This notebook performs a post-competition public LB rank vs private LB rank analysis and visualizes the shake-up. <H3>\n\nNote: Updated to final LB standings! If you like to see the rankings before rescoring check v.1","05c43468":"# Helpers","9e8d4981":"# Load LB data","6bdacdd1":"# Open Vaccine: mRNA Vaccine Degradation Prediction Shake-up Report ","ed3c941f":"### If you like to see similar shake-up reports from previous competitions:\n\n- [SIIM-ISIC Melanoma 2020](https:\/\/www.kaggle.com\/imeintanis\/melanoma-post-competition-shake-up-report-final\/)\n\n- [Cornell Birdcall Identification](https:\/\/www.kaggle.com\/imeintanis\/cornell-shake-up-report)\n\n- [ASHRAE Great Energy Predictor III by @robikscube](https:\/\/www.kaggle.com\/robikscube\/ashrae-leaderboard-and-shake)\n\n\n### Feel free to add your comments\/suggestions bellow"}}