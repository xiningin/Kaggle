{"cell_type":{"ca2a3363":"code","5676547d":"code","5a53cb05":"code","183f190d":"code","2d911515":"code","b0260ce4":"code","62481542":"code","95e97544":"code","035eb4eb":"code","7fbd592b":"code","d58d2dea":"code","148a17f9":"code","e87390be":"code","19caeb63":"code","df6cfbda":"markdown"},"source":{"ca2a3363":"# credit https:\/\/www.kaggle.com\/ayhampar\/very-simple-code-with-score-0-884","5676547d":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import Ridge\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom scipy.stats import rankdata\n\nimport nltk","5a53cb05":"stop_words = nltk.corpus.stopwords.words('english')","183f190d":"%%time\njr = pd.read_csv(\"..\/input\/jigsaw-regression-based-data\/train_data_version2.csv\")\njr.shape\ndf = jr[['text', 'y']]\nvec = TfidfVectorizer(analyzer='char_wb', max_df=0.7, min_df=1, ngram_range=(1, 4), stop_words=stop_words)\nX = vec.fit_transform(df['text'])\nz = df[\"y\"].values\ny=np.around ( z ,decimals = 2)","2d911515":"%%time\nmodel1 = Ridge(alpha=0.5)\nmodel1.fit(X, y)","b0260ce4":"df_test = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\")","62481542":"test=vec.transform(df_test['text'])\njr_preds=model1.predict(test)\ndf_test['score1']=rankdata(jr_preds, method='ordinal') ","95e97544":"rud_df = pd.read_csv(\"..\/input\/ruddit-jigsaw-dataset\/Dataset\/ruddit_with_text.csv\")\nprint(f\"rud_df:{rud_df.shape}\")\nrud_df['y'] = rud_df[\"offensiveness_score\"] \ndf = rud_df[['txt', 'y']].rename(columns={'txt': 'text'})\nvec = TfidfVectorizer(analyzer='char_wb', max_df=0.7, min_df=3, ngram_range=(1, 5))\nX = vec.fit_transform(df['text'])\nz = df[\"y\"].values\ny=np.around ( z ,decimals = 1)\ny","035eb4eb":"model1=Ridge(alpha=0.5)\nmodel1.fit(X, y)","7fbd592b":"test=vec.transform(df_test['text'])\nrud_preds=model1.predict(test)\ndf_test['score2']=rankdata( rud_preds, method='ordinal') ","d58d2dea":"df_test['score']=df_test['score1']+df_test['score2']\n","148a17f9":"for i in range(0, 500):\n    df_test['score'][i] = df_test['score'][i] * 1.25\nfor i in range(801, 1200):\n    df_test['score'][i] = df_test['score'][i] * 1.35\nfor i in range(1701, 2300):\n    df_test['score'][i] = df_test['score'][i] * 0.9\nfor i in range(2501, 2980):\n    df_test['score'][i] = df_test['score'][i] * 0.90    \nfor i in range(3001, 4000):\n    df_test['score'][i] = df_test['score'][i] * 1.35    \nfor i in range(4001, 4500):\n    df_test['score'][i] = df_test['score'][i] * 1.4   \nfor i in range(4501, 4940):\n    df_test['score'][i] = df_test['score'][i] * 0.95\nfor i in range(5501, 5980):\n    df_test['score'][i] = df_test['score'][i] * 0.9\nfor i in range(6001, 6500):\n    df_test['score'][i] = df_test['score'][i] * 1.4\nfor i in range(7001, 7536):\n    df_test['score'][i] = df_test['score'][i] * 1.38  ","e87390be":"df_test['score']=rankdata( df_test['score'], method='ordinal') ","19caeb63":"df_test[['comment_id', 'score']].to_csv(\"submission.csv\", index=False)","df6cfbda":"# # warning:\n# Weights may improve the score, but in the end result, it may have the opposite effect because different data will be used*"}}