{"cell_type":{"b4b86b0a":"code","7a366911":"code","becafa92":"code","1c616ae2":"code","0020ec47":"code","c578badc":"code","18eed3d0":"code","e5f50133":"code","747e315c":"code","44b29409":"code","4ec97261":"code","e7b78ac4":"code","3f9afd1b":"code","0c167c22":"code","e62e488a":"code","b27c86c0":"code","7d5bf9e7":"code","b04d795f":"code","aa477af2":"code","4d10ebdc":"code","a44c423c":"code","7fa0f150":"code","2cf4d72b":"code","1d8acc11":"code","20c117bc":"code","b6c36600":"code","c4398e97":"code","3dff228b":"code","39de63f7":"code","a18b9d7c":"markdown","4e7a1e97":"markdown","59a6f3b7":"markdown","e545bf4b":"markdown","87dd672a":"markdown"},"source":{"b4b86b0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a366911":"speeches = pd.read_csv(\"..\/input\/speeches-modi\/PM_Modi_speeches.csv\")","becafa92":"speeches.head()","1c616ae2":"speeches.describe()","0020ec47":"speeches.drop([\"url\",\"lang\",\"words\"], axis = 1, inplace = True)\nspeeches.head()","c578badc":"import matplotlib.pyplot as plt\n%matplotlib inline  \nimport nltk\nimport textblob\nimport wordcloud\nimport seaborn as sns\nfrom nltk import word_tokenize, sent_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem import LancasterStemmer, WordNetLemmatizer, PorterStemmer\nfrom wordcloud import WordCloud, STOPWORDS\nfrom textblob import TextBlob","18eed3d0":"def wc(data,bgcolor,title):\n    plt.figure(figsize = (100,100))\n    wc = WordCloud(background_color = bgcolor, max_words = 1000,  max_font_size = 50)\n    wc.generate(' '.join(data))\n    plt.imshow(wc)\n    plt.axis('off')","e5f50133":"from collections import Counter\nfrom nltk.tokenize import RegexpTokenizer\nfrom stop_words import get_stop_words\nimport re\n\ntop_N = 100\n#convert list of list into text\n#a=''.join(str(r) for v in speeches['title'] for r in v)\n\na = speeches['title'].str.lower().str.cat(sep=' ')\n\n# removes punctuation,numbers and returns list of words\nb = re.sub('[^A-Za-z]+', ' ', a)\n\n#remove all the stopwords from the text\nstop_words = get_stop_words('en')        \nnltk_words = stopwords.words('english')   \nstop_words.extend(nltk_words)\n\nword_tokens = word_tokenize(b)\nfiltered_sentence = [w for w in word_tokens if not w in stop_words]\nfiltered_sentence = []\nfor w in word_tokens:\n    if w not in stop_words:\n        filtered_sentence.append(w)\n\n# Remove characters which have length less than 2  \nwithout_single_chr = [word for word in filtered_sentence if len(word) > 2]\n\n# Remove numbers\ncleaned_data_title = [word for word in without_single_chr if not word.isnumeric()]        \n\n# Calculate frequency distribution\nword_dist = nltk.FreqDist(cleaned_data_title)\nrslt = pd.DataFrame(word_dist.most_common(top_N),\n                    columns=['Word', 'Frequency'])\n\nplt.figure(figsize=(10,10))\nsns.set_style(\"whitegrid\")\nax = sns.barplot(x=\"Word\",y=\"Frequency\", data=rslt.head(10))","747e315c":"wc(cleaned_data_title,'black','Common Words' )","44b29409":"from collections import Counter\nfrom nltk.tokenize import RegexpTokenizer\nfrom stop_words import get_stop_words\nimport re\n\ntop_N = 100\n#convert list of list into text\n#a=''.join(str(r) for v in speeches['text'] for r in v)\n\ndesc_lower = speeches['text'].str.lower().str.cat(sep=' ')\n\n# removes punctuation,numbers and returns list of words\ndesc_remove_pun = re.sub('[^A-Za-z]+', ' ', desc_lower)\n\n#remove all the stopwords from the text\nstop_words = get_stop_words('en')         \nnltk_words = stopwords.words('english')   \nstop_words.extend(nltk_words)\n\nword_tokens_desc = word_tokenize(desc_remove_pun)\nfiltered_sentence_desc = [w_desc for w_desc in word_tokens_desc if not w_desc in stop_words]\nfiltered_sentence_desc = []\nfor w_desc in word_tokens_desc:\n    if w_desc not in stop_words:\n        filtered_sentence_desc.append(w_desc)\n\n# Remove characters which have length less than 2  \nwithout_single_chr_desc = [word_desc for word_desc in filtered_sentence_desc if len(word_desc) > 2]\n\n# Remove numbers\ncleaned_data_desc = [word_desc for word_desc in without_single_chr_desc if not word_desc.isnumeric()]        \n\n# Calculate frequency distribution\nword_dist_desc = nltk.FreqDist(cleaned_data_desc)\nrslt_desc = pd.DataFrame(word_dist_desc.most_common(top_N),\n                    columns=['Word', 'Frequency'])\n\n#print(rslt_desc)\n#plt.style.use('ggplot')\n#rslt.plot.bar(rot=0)\n\n\nplt.figure(figsize=(10,10))\nsns.set_style(\"whitegrid\")\nax = sns.barplot(x=\"Word\", y=\"Frequency\", data=rslt_desc.head(10))","4ec97261":"wc(cleaned_data_desc,'black','Frequent Words' )","e7b78ac4":"from textblob import TextBlob\n\nbloblist_desc = []\nspeeches_text = speeches['text'].astype(str)\nfor row in speeches_text:\n    blob = TextBlob(row)\n    bloblist_desc.append((row,blob.sentiment.polarity, blob.sentiment.subjectivity))\n    speeches_polarity_desc = pd.DataFrame(bloblist_desc, columns = ['sentence','sentiment','polarity'])\n \ndef f(speeches_polarity_desc):\n    if speeches_polarity_desc['sentiment'] > 0:\n        val = \"Positive\"\n    elif speeches_polarity_desc['sentiment'] == 0:\n        val = \"Neutral\"\n    else:\n        val = \"Negative\"\n    return val\n\nspeeches_polarity_desc['Sentiment_Type'] = speeches_polarity_desc.apply(f, axis=1)\n\nplt.figure(figsize=(10,10))\nsns.set_style(\"whitegrid\")\nax = sns.countplot(x=\"Sentiment_Type\", data=speeches_polarity_desc)","3f9afd1b":"speeches_50 = speeches.head(50)\nspeeches_50.head()","0c167c22":"from PIL import Image","e62e488a":"mask = np.array(Image.open(\"..\/input\/india-png\/india.png\"))\ndef wordcloud(tweets, title):\n    stopwords = set(STOPWORDS)\n    stopwords.add(\"will\")\n    stopwords.add(\"now\")\n    wordcloud = WordCloud(width=512, height=512, background_color=\"white\", max_font_size=18, min_font_size=4,\n                          max_words=200, stopwords=stopwords, contour_color = 'firebrick', colormap='Dark2',\n                          random_state=2018, mask=mask).generate(\" \".join([i for i in speeches_50['text']]))\n    plt.figure(title, figsize=(10, 10), facecolor='white', edgecolor='blue')\n    plt.imshow(wordcloud, interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.title(title)\n    plt.tight_layout(pad=0)\n    plt.show()\nwordcloud(speeches_50['text'], \"India\")","b27c86c0":"import pandas as pd  \n\nlist = speeches_50['text']\n  \n \nseries = pd.Series(list) \n  \n\neconomy_Count = series.str.count(\"economy\")\nEconomy_Count = series.str.count(\"Economy\")\neconomic_Count = series.str.count(\"economic\")\nEconomic_Count = series.str.count(\"Economic\")\nGDP_Count = series.str.count(\"GDP\")\nTotal_Count = economy_Count + Economy_Count + economic_Count + Economic_Count + GDP_Count ","7d5bf9e7":"economy_Count.aggregate(sum)","b04d795f":"Economy_Count.aggregate(sum)","aa477af2":"economic_Count.aggregate(sum)","4d10ebdc":"Economic_Count.aggregate(sum)","a44c423c":"GDP_Count.aggregate(sum)","7fa0f150":"Total_Count.aggregate(sum)","2cf4d72b":"economy_Count = pd.concat([speeches_50['date'], economy_Count], axis = 1)\neconomy_Count.head()","1d8acc11":"economy_Count = economy_Count.set_index(\"date\")\neconomy_Count.head(5)","20c117bc":"# Create figure and plot space\nfig, ax = plt.subplots(figsize=(15, 10))\n\n# Add x-axis and y-axis\nax.bar(economy_Count.index.values,\n        economy_Count['text'],\n        color='purple')\n\n# Set title and labels for axes\nax.set(xlabel=\"Date\",\n       ylabel=\"Frequency\",\n       title=\"word count of economy\")\n\n\n# Rotate tick marks on x-axis\nplt.setp(ax.get_xticklabels(), rotation=50)\n\nplt.show()","b6c36600":"Economy_Count = pd.concat([speeches_50['date'], Economy_Count], axis = 1)\nEconomy_Count = Economy_Count.set_index(\"date\")\nEconomy_Count.head(5)\n\n# Create figure and plot space\nfig, ax = plt.subplots(figsize=(15, 10))\n\n# Add x-axis and y-axis\nax.bar(Economy_Count.index.values,\n        Economy_Count['text'],\n        color='purple')\n\n# Set title and labels for axes\nax.set(xlabel=\"Date\",\n       ylabel=\"Frequency\",\n       title=\"word count of Economy\")\n\n\n# Rotate tick marks on x-axis\nplt.setp(ax.get_xticklabels(), rotation=50)\n\nplt.show()","c4398e97":"economic_Count = pd.concat([speeches_50['date'], economic_Count], axis = 1)\neconomic_Count = economic_Count.set_index(\"date\")\neconomic_Count.head(5)\n\n# Create figure and plot space\nfig, ax = plt.subplots(figsize=(15, 10))\n\n# Add x-axis and y-axis\nax.bar(economic_Count.index.values,\n        economic_Count['text'],\n        color='purple')\n\n# Set title and labels for axes\nax.set(xlabel=\"Date\",\n       ylabel=\"Frequency\",\n       title=\"word count of economic\")\n\n\n# Rotate tick marks on x-axis\nplt.setp(ax.get_xticklabels(), rotation=50)\n\nplt.show()","3dff228b":"Economic_Count = pd.concat([speeches_50['date'], Economic_Count], axis = 1)\nEconomic_Count = Economic_Count.set_index(\"date\")\nEconomic_Count.head(5)\n\n# Create figure and plot space\nfig, ax = plt.subplots(figsize=(15, 10))\n\n# Add x-axis and y-axis\nax.bar(Economic_Count.index.values,\n        Economic_Count['text'],\n        color='purple')\n\n# Set title and labels for axes\nax.set(xlabel=\"Date\",\n       ylabel=\"Frequency\",\n       title=\"word count of Economic\")\n\n\n# Rotate tick marks on x-axis\nplt.setp(ax.get_xticklabels(), rotation=50)\n\nplt.show()","39de63f7":"Total_Count = pd.concat([speeches_50['date'], Total_Count], axis = 1)\nTotal_Count = Total_Count.set_index(\"date\")\nTotal_Count.head(5)\n\n# Create figure and plot space\nfig, ax = plt.subplots(figsize=(15, 10))\n\n# Add x-axis and y-axis\nax.bar(Total_Count.index.values,\n        Total_Count['text'],\n        color='purple')\n\n# Set title and labels for axes\nax.set(xlabel=\"Date\",\n       ylabel=\"Frequency\",\n       title=\"word count of Economic\")\n\n\n# Rotate tick marks on x-axis\nplt.setp(ax.get_xticklabels(), rotation=50)\n\nplt.show()","a18b9d7c":"### Sentiment Analysis of the Speeches","4e7a1e97":"## Word Cloud of Recent 50 Speeches of Modi","59a6f3b7":"## Analyzing Trancripts of all Speeches","e545bf4b":"# PAST 50 SPEECHES","87dd672a":"## Analyzing Titles of Speeches"}}