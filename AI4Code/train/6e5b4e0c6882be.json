{"cell_type":{"22d0d491":"code","60a31090":"code","4332e579":"code","79208304":"code","40b4e3fb":"code","809b7928":"code","ba59bbc3":"code","884c1a70":"code","1c48a8fb":"code","c24a049b":"code","1733c18e":"code","c9a7ca07":"code","22301146":"code","dc010779":"code","3e59f2ee":"code","832a5f21":"code","7d778a61":"code","d68621d8":"markdown","dfd46f29":"markdown","c1f73b0c":"markdown","421941c4":"markdown"},"source":{"22d0d491":"!wget https:\/\/www.tbi.univie.ac.at\/RNA\/download\/ubuntu\/ubuntu_18_04\/viennarna_2.4.15-1_amd64.deb\n!apt-get install .\/viennarna_2.4.15-1_amd64.deb -y\n!git clone https:\/\/github.com\/DasLab\/arnie\n\n!\/opt\/conda\/bin\/python3.7 -m pip install --upgrade pip\n!git clone https:\/\/www.github.com\/DasLab\/draw_rna draw_rna_pkg\n!cd draw_rna_pkg && python setup.py install\n\n!yes '' | cpan -i Graph\n!git clone https:\/\/github.com\/hendrixlab\/bpRNA","60a31090":"!git clone https:\/\/github.com\/csfoo\/contrafold-se.git\n!apt-get install -y g++-4.8\n!sed -i.bak \"1 s\/^.*$\/CXX = g++-4.8\/\" contrafold-se\/src\/Makefile\n!cd contrafold-se\/src; make","4332e579":"!wget http:\/\/rna.urmc.rochester.edu\/Releases\/current\/RNAstructureLinuxTextInterfaces64bit.tgz\n!tar zxvf RNAstructureLinuxTextInterfaces64bit.tgz","79208304":"!wget http:\/\/www.rnasoft.ca\/download\/MultiRNAFold-2.1.tar.gz\n!tar zxvf MultiRNAFold-2.1.tar.gz\n!apt-get -y install xutils-dev\n!cd MultiRNAFold;make depend;make","40b4e3fb":"import os\nimport sys\n\n!echo \"vienna_2: \/usr\/bin\" > arnie.conf\n!echo \"contrafold_2: \/kaggle\/working\/contrafold-se\/src\" >> arnie.conf\n!echo \"rnastructure: \/kaggle\/working\/RNAstructure\/exe\" >> arnie.conf\n!echo \"rnasoft: \/kaggle\/working\/MultiRNAFold\" >> arnie.conf\n!echo \"TMP: \/kaggle\/working\/tmp\" >> arnie.conf\n!mkdir -p \/kaggle\/working\/tmp\nos.environ[\"ARNIEFILE\"] = f\"\/kaggle\/working\/arnie.conf\"\nos.environ[\"DATAPATH\"] = f\"\/kaggle\/working\/RNAstructure\/data_tables\"\nsys.path.append('\/kaggle\/working\/draw_rna_pkg\/')\nsys.path.append('\/kaggle\/working\/draw_rna_pkg\/ipynb\/')","809b7928":"!cat arnie.conf","ba59bbc3":"\nimport numpy as np\nimport pandas as pd\nfrom multiprocessing import Pool\nfrom arnie.pfunc import pfunc\nfrom arnie.mea.mea import MEA\nfrom arnie.free_energy import free_energy\nfrom arnie.bpps import bpps\nfrom arnie.mfe import mfe\nimport arnie.utils as utils\nfrom tqdm.notebook import tqdm as tqdm\n\nn_candidates = 3\n# turn off for all data\ndebug = False","884c1a70":"!grep processor \/proc\/cpuinfo | wc -l","1c48a8fb":"MAX_THRE = 4","c24a049b":"train = pd.read_json('..\/input\/stanford-covid-vaccine\/train.json', lines=True)\ntest = pd.read_json('..\/input\/stanford-covid-vaccine\/test.json', lines=True)\ntrain = train[:10]\ntest = test[:10]\ntarget_df = train.append(test)","1733c18e":"os.mkdir('bpps')","c9a7ca07":"def proc1(arg):\n    sequence = arg[0]\n    id = arg[1]\n    log_gamma = arg[2]\n    package = arg[3]\n    struct = arg[4]\n    if package == 'provided':\n        bp_matrix = np.load(f'..\/input\/stanford-covid-vaccine\/bpps\/{id}.npy')\n    else:\n        bp_matrix = bpps(sequence, package=package)\n        \n    mea_mdl = MEA(bp_matrix,gamma=10**log_gamma)\n    np.save(f'bpps\/{package}_{id}.npy', bp_matrix)\n    return id, sequence, mea_mdl.structure, log_gamma, mea_mdl.score_expected()[2], package\n\n# TODO add multiple packages for bpps\nli = []\nfor log_gamma in [0]:\n    for i, arr in enumerate(target_df[['sequence','id','structure']].values):\n        for pack in ['rnasoft_07', 'vienna_2', 'contrafold_2', 'rnastructure']:\n            li.append([arr[0], arr[1], log_gamma, pack, arr[2]])\n            \np = Pool(processes=MAX_THRE)\nresults = []\nfor ret in tqdm(p.imap(proc1, li),total=len(li)):\n    results.append(ret)\n    #print(f'done for {ret[0]}')\ndf = pd.DataFrame(results, columns=['id', 'sequence', 'structure', 'log_gamma', 'score', 'package'])\n\ndf_tmp = target_df[['id', 'sequence', 'structure']].copy()\ndf_tmp['log_gamma'] = 100\ndf_tmp['score'] = 100\ndf = df.append(df_tmp).sort_values('score', ascending=False).reset_index(drop=True)\n\nnew_df = pd.DataFrame()\nfor id in df['id'].unique():\n#     unq_df = df[df['id'] == id].drop_duplicates('structure')\n#     unq_df['cnt'] = unq_df.shape[0]\n    new_df = new_df.append(unq_df)","22301146":"!mkdir -p tmp_files\ndef get_predicted_loop_type(id, sequence, structure, debug=False):\n    structure_fixed = structure.replace('.','0').replace('(','1').replace(')','2')\n    pid = os.getpid()\n    tmp_in_file = f'tmp_files\/{id}_{structure_fixed}_{pid}.dbn'\n    tmp_out_file = f'{id}_{structure_fixed}_{pid}.st'\n    !echo $sequence > $tmp_in_file\n    !echo \"$structure\" >> $tmp_in_file\n    !export PERL5LIB=\/root\/perl5\/lib\/perl5 && perl bpRNA\/bpRNA.pl $tmp_in_file\n    result = [l.strip('\\n') for l in open(tmp_out_file)]\n    if debug:\n        print(sequence)\n        print(structure)\n        print(result[5])\n    else:\n        !rm $tmp_out_file $tmp_in_file\n    return id, structure, result[5]\n\ndef proc2(arg):\n    result = get_predicted_loop_type(arg[0], arg[1], arg[2], debug=False)\n    return result\n\nli = []\nfor i, arr in enumerate(new_df[['id', 'sequence', 'structure']].values):\n    li.append(arr)\n\np = Pool(processes=MAX_THRE)\nresults_loop_type = []\nfor ret in tqdm(p.imap(proc2, li),total=len(li)):\n    results_loop_type.append(ret)\n    #print(f'done for {ret[0]}')\n\nnew_df = new_df.merge(pd.DataFrame(results_loop_type, columns=('id', 'structure', 'predicted_loop_type')), on=['id','structure'], how='left')\nnew_df.to_csv('aug_data.csv', index=False)\n","dc010779":"new_df.head()","3e59f2ee":"!rm -r tmp\/\n!rm -r RNAstructure\/\n!rm -r arnie\/\n!rm -r contrafold-se\/\n!rm -r draw_rna_pkg\/\n!rm -r bpRNA\/\n!rm -r MultiRNAFold\/\n!rm viennarna_2.4.15-1_amd64.deb\n!rm RNAstructureLinuxTextInterfaces64bit.tgz\n!rm arnie.conf","832a5f21":"!zip -r bpps.zip bpps\/","7d778a61":"!rm -rf bpps","d68621d8":"# Using ARNIE\n\nARNIE can generate BPPs using a variety of different packages. Each of these packages do need to be installed separately. In this notebook, we install:\n* Vienna\n* Contrafold\n* RNAstructure\n* RNAsoft\n\nWe will then generate BPPs with these packages on a small subset of the data, in order to reduce the execution time.","dfd46f29":"## Setting","c1f73b0c":"## Getting structure\n","421941c4":"## Getting predicted_loop_type\n"}}