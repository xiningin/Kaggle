{"cell_type":{"e55494e9":"code","140b3e5d":"code","2059553f":"code","c0a8292a":"code","ac04bc11":"code","b2d9eda8":"code","ca98e597":"code","1b539bc8":"code","780a3b7a":"code","80269b43":"code","4a957c6e":"code","c40d7c8b":"code","16e04acf":"code","83142af3":"code","b5ce9660":"code","130355c8":"markdown","55c8325f":"markdown"},"source":{"e55494e9":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","140b3e5d":"from tensorflow import keras\nfrom tensorflow.keras import layers\nimport tensorflow as tf\nimport matplotlib.pyplot as plt","2059553f":"red_wine = pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\nred_wine.head()","c0a8292a":"red_wine.shape","ac04bc11":"# Linear Model\nmodel= keras.Sequential([\n    layers.Dense(units=1, input_shape=[11])\n])","b2d9eda8":"w, b = model.weights\nprint(\"Weights\\n{}\\n\\nBias\\n{}\".format(w, b))","ca98e597":"## Plotting an untrained linear model\nmodel = keras.Sequential([\n    layers.Dense(1, input_shape=[1]),\n])\n\nx = tf.linspace(-1.0, 1.0, 100)\ny = model(x)\n\nplt.figure(dpi=100)\nplt.plot(x, y, 'k')\nplt.xlim(-1, 1)\nplt.ylim(-1, 1)\nplt.xlabel(\"Input: x\")\nplt.ylabel(\"Target y\")\nw, b = model.weights # you could also use model.get_weights() here\nplt.title(\"Weight: {:0.2f}\\nBias: {:0.2f}\".format(w[0][0], b[0]))\nplt.show()","1b539bc8":"## Adding hidden layers to model\nmodel = keras.Sequential([\n    layers.Dense(units=512,activation=\"relu\",input_shape=[8]),\n    layers.Dense(units=512,activation=\"relu\"),\n    layers.Dense(units=512,activation=\"relu\"),\n    layers.Dense(units=1)\n])","780a3b7a":"## Adding activation layers to model\n\nmodel = keras.Sequential([\n    layers.Dense(32,input_shape=[8]),\n    layers.Activation(\"relu\"),\n    layers.Dense(32),\n    layers.Activation(\"relu\"),\n    layers.Dense(1),\n])","80269b43":"# Tanh activation Function\nactivation_layer = layers.Activation('tanh')\n\nx = tf.linspace(-3.0, 3.0, 100)\ny = activation_layer(x) # once created, a layer is callable just like a function\n\nplt.figure(dpi=100)\nplt.plot(x, y)\nplt.xlim(-3, 3)\nplt.xlabel(\"Input\")\nplt.ylabel(\"Output\")\nplt.show()","4a957c6e":"# sigmoid activation Function\nactivation_layer = layers.Activation('sigmoid')\n\nx = tf.linspace(-3.0, 3.0, 100)\ny = activation_layer(x) # once created, a layer is callable just like a function\n\nplt.figure(dpi=100)\nplt.plot(x, y)\nplt.xlim(-3, 3)\nplt.xlabel(\"Input\")\nplt.ylabel(\"Output\")\nplt.show()","c40d7c8b":"## Adding Loss and Optimizer\nmodel.compile(optimizer=\"Adam\",loss=\"MAE\")","16e04acf":"\n# Create training and validation splits\ndf_train = red_wine.sample(frac=0.7, random_state=0)\ndf_valid = red_wine.drop(df_train.index)\ndisplay(df_train.head(4))\n\n# Scale to [0, 1]\nmax_ = df_train.max(axis=0)\nmin_ = df_train.min(axis=0)\ndf_train = (df_train - min_) \/ (max_ - min_)\ndf_valid = (df_valid - min_) \/ (max_ - min_)\n\n# Split features and target\nX_train = df_train.drop('quality', axis=1)\nX_valid = df_valid.drop('quality', axis=1)\ny_train = df_train['quality']\ny_valid = df_valid['quality']","83142af3":"from tensorflow import keras\nfrom tensorflow.keras import layers, callbacks\n\nearly_stopping = callbacks.EarlyStopping(\n    min_delta=0.001, # minimium amount of change to count as an improvement\n    patience=20, # how many epochs to wait before stopping\n    restore_best_weights=True,\n)\n\nmodel = keras.Sequential([\n    layers.Dense(512, activation='relu', input_shape=[11]),\n    layers.Dense(512, activation='relu'),\n    layers.Dense(512, activation='relu'),\n    layers.Dense(1),\n])\nmodel.compile(\n    optimizer='adam',\n    loss='mae',\n)","b5ce9660":"history = model.fit(\n    X_train, y_train,\n    validation_data=(X_valid, y_valid),\n    batch_size=256,\n    epochs=500,\n    callbacks=[early_stopping], # put your callbacks in a list\n    verbose=0,  # turn off training log\n)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot();\nprint(\"Minimum validation loss: {}\".format(history_df['val_loss'].min()))","130355c8":"**Created by Berkay Alan**\n\n**9 of January, 2021**\n\n**Neural Networks with Keras**","55c8325f":"## Training a Model with Early Stopping"}}