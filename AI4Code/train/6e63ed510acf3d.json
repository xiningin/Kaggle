{"cell_type":{"7c4090e0":"code","e0e22262":"code","77e898c6":"code","1c51b2e7":"code","9352a0e0":"code","851242a9":"code","7c12f55a":"code","93fe4672":"code","51da3d1a":"code","9778726b":"code","258060a3":"code","707126a6":"code","1547b40e":"code","f3253584":"code","fabe02fe":"code","618f2673":"code","0116d54e":"code","7d7e2b1a":"code","437dbc22":"code","1b04fe32":"code","e8edaab8":"code","068321fb":"code","5aafbcc7":"code","888aa320":"code","86b69c04":"code","853b7128":"code","589f4a37":"markdown","db0d3a9a":"markdown","2c0b1d44":"markdown","d2c1ff01":"markdown","b27d8518":"markdown","ce8b2c17":"markdown","e37887b5":"markdown","7a44fd75":"markdown"},"source":{"7c4090e0":"import numpy as np # linear algebra\nimport pandas as pd\nimport re\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom IPython.display import display\n\nfrom plotly.offline import iplot\nimport plotly.express as px\n\nimport cufflinks as cf\ncf.go_offline()\ncf.set_config_file(offline = False, world_readable = True)\n\nfrom sklearn.model_selection import train_test_split\n\nplt.rcParams[\"figure.figsize\"] = (12, 8)\nplt.rcParams['axes.titlesize'] = 16\nsns.set_palette('Set3_r')\n\nimport os\n\nprint(os.listdir('\/kaggle\/input\/optiver-realized-volatility-prediction\/'))\n\nimport warnings\nwarnings.simplefilter('ignore')\n\nfrom time import time, strftime, gmtime\nstart = time()\nimport datetime\nprint(str(datetime.datetime.now()))","e0e22262":"base_dir = '\/kaggle\/input\/optiver-realized-volatility-prediction\/'","77e898c6":"train = pd.read_csv(base_dir + 'train.csv')\nprint(train.shape)\ntrain.head()","1c51b2e7":"train['stock_id'].unique()","9352a0e0":"test = pd.read_csv(base_dir + 'test.csv')\nprint(test.shape)\ntest.head()","851242a9":"sub = pd.read_csv(base_dir + 'sample_submission.csv')\nprint(sub.shape)\nsub.head()","7c12f55a":"print(f\"Number of unique stocks is {train['stock_id'].nunique()}\")\nprint(f\"Number of unique time_id is {train['time_id'].nunique()}\")\n\nprint(f\"Number of files in trade_train.parquet: {len(os.listdir(base_dir + 'trade_train.parquet'))}\")\nprint(f\"Number of files in book_train.parquet: {len(os.listdir(base_dir + 'book_train.parquet'))}\")\n\nprint(f\"Number of files in trade_test.parquet: {len(os.listdir(base_dir + 'trade_test.parquet'))}\")\nprint(f\"Number of files in book_test.parquet: {len(os.listdir(base_dir + 'book_test.parquet'))}\")","93fe4672":"plt.title('Target Distribution')\nsns.kdeplot(train['target'], shade = True, color = 'crimson')\nplt.axvline(train['target'].mean(), color = 'blue', linestyle = ':', label = f\"Mean: {train['target'].mean()}\")\nplt.axvline(train['target'].median(), color = 'green', linestyle = '--', label = f\"Median: {train['target'].median()}\")\nplt.legend()\nplt.show()","51da3d1a":"book_10 = pd.read_parquet(base_dir + 'book_train.parquet\/stock_id=10')\ntrade_10 =  pd.read_parquet(base_dir + 'trade_train.parquet\/stock_id=10')\n\nstock_id = '10'\n#book_10 = book_10[book_10['time_id'] == 5]\nbook_10.loc[:, 'stock_id'] = stock_id\n#trade_10 = trade_10[trade_10['time_id']==5]\ntrade_10.loc[:, 'stock_id'] = stock_id","9778726b":"book_10.head()","258060a3":"trade_10.head()","707126a6":"book_10['time_id'].unique(), trade_10['time_id'].unique()","1547b40e":"bid_ask = [('bid_price1', 'ask_price1', 'bid_size1', 'ask_size1'), ('bid_price2', 'ask_price2', 'bid_size2', 'ask_size2')]\nfor ba in bid_ask:\n    fig, ax = plt.subplots(1, 4, figsize = (16, 8))\n    ax = ax.ravel()\n    for i, c in enumerate(ba):\n        sns.boxplot(data = book_10, y = c, ax = ax[i]).set_title(c)\n        ax[i].set_ylabel('')","f3253584":"def log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff()\n\n\ndef realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return ** 2))\n\n\ndef get_log_return_df_per_time_id(file_path):\n    df_book_data = pd.read_parquet(file_path)\n    df_book_data['wap'] = (df_book_data['bid_price1'] * df_book_data['ask_size1'] + df_book_data['ask_price1'] * df_book_data['bid_size1'])  \/ (\n                                      df_book_data['bid_size1'] + df_book_data[\n                                  'ask_size1'])\n    df_book_data['log_return'] = df_book_data.groupby(['time_id'])['wap'].apply(log_return)\n    df_book_data = df_book_data[~df_book_data['log_return'].isnull()]\n\n    stock_id = file_path.split('=')[1]\n    df_book_data['row_id'] = df_book_data['time_id'].apply(lambda x:f'{stock_id}-{x}')\n    \n    return df_book_data\n\n\ndef get_realized_volatility_df_per_time_id(file_path):\n    df_book_data = pd.read_parquet(file_path)\n    df_book_data['wap'] = (df_book_data['bid_price1'] * df_book_data['ask_size1'] + df_book_data['ask_price1'] * df_book_data['bid_size1'])  \/ (\n                                      df_book_data['bid_size1'] + df_book_data[\n                                  'ask_size1'])\n    df_book_data['log_return'] = df_book_data.groupby(['time_id'])['wap'].apply(log_return)\n    df_book_data = df_book_data[~df_book_data['log_return'].isnull()]\n    \n    df_book_data['realized_volatility'] = df_book_data.groupby(['time_id'])['log_return'].apply(realized_volatility)\n    df_book_data = df_book_data[~df_book_data['realized_volatility'].isnull()]\n\n    stock_id = file_path.split('=')[1]\n    df_book_data['row_id'] = df_book_data['time_id'].apply(lambda x:f'{stock_id}-{x}')\n    \n    return df_book_data\n\ndef calculate_stats(df):\n    df['size_spread1'] = df['ask_size1'] - df['bid_size1']\n    df['size_spread2'] = df['ask_size2'] - df['bid_size2']\n    \n    df['price_spread1'] = df['ask_price1'] - df['bid_price1']\n    df['price_spread2'] = df['ask_price2'] - df['bid_price2']\n    \n    df['wap'] = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1']) \/ (df['bid_size1'] + df['ask_size1'])\n    \n    df.loc[:, 'log_return'] = log_return(df['wap'])\n    df = df[~df['log_return'].isnull()]\n    \n    #df.loc[:, 'realized_vol'] = realized_volatility(df['log_return'])\n    \n    return df","fabe02fe":"#Calculate spread and WAP for Stock 10\n\nbook_10 = calculate_stats(book_10)\nprint(book_10.shape)\nbook_10.head()","618f2673":"book_10.describe().T","0116d54e":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (16, 8))\nax1.plot(book_10['time_id'], book_10['price_spread1'], color = 'orange')\nax1.set_xlabel('Time_id')\nax1.set_ylabel('Price Spread')\nax1.set_title('Price Spread of Stock 10 - Layer 1')\nax2.plot(book_10['time_id'], book_10['price_spread2'], color = 'teal')\nax2.set_xlabel('Time_id')\nax2.set_ylabel('Price Spread')\nax2.set_title('Price Spread of Stock 10 - Layer 2')\nplt.show()","7d7e2b1a":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (16, 8))\nax1.plot(book_10['time_id'], book_10['size_spread1'], color = 'orange')\nax1.set_xlabel('Time_id')\nax1.set_ylabel('Size Spread')\nax1.set_title('Size Spread of Stock 10 - Layer 1')\nax2.plot(book_10['time_id'], book_10['size_spread2'], color = 'teal')\nax2.set_xlabel('Time_id')\nax2.set_ylabel('Size Spread')\nax2.set_title('Size Spread of Stock 10 - Layer 2')\nplt.show()","437dbc22":"plt.plot(book_10['time_id'], book_10['wap'])\nplt.xlabel('Time_id')\nplt.ylabel('WAP')\nplt.title('Weighted Averaged Price (WAP) of Stock 10')\nplt.show()","1b04fe32":"fig = px.line(book_10[book_10['time_id'] == 5], x = 'seconds_in_bucket', y = 'wap', \n             labels = {'x': 'seconds_in_bucket', 'y': 'WAP'}, \n             title = 'WAP for Stock 10')\n\nfor t in book_10['time_id'].unique()[1:8]:\n    fig.add_scatter(x = book_10[book_10['time_id'] == t]['seconds_in_bucket'], \n                    y = book_10[book_10['time_id'] == t]['wap'], name = str(t) )\nfig.show()","e8edaab8":"for t in book_10['time_id'].unique()[:5]:\n    fig = px.line(book_10[book_10['time_id'] == t], x = 'seconds_in_bucket', y = 'log_return',  \n                 title = f'Log_return for Stock 10 at time_id {t}')\n    fig.show()","068321fb":"def plot_bidaskprice(time_id):\n    plt.figure(figsize = (16, 6))\n    temp = book_10[book_10['time_id'] == time_id]\n    temptrade = trade_10[trade_10['time_id'] == time_id]\n    colors = ['y', 'r', 'b', 'g']\n    for i, ba in enumerate(['bid_price1', 'bid_price2', 'ask_price1', 'ask_price2']):\n        plt.plot(temp['seconds_in_bucket'], temp[ba], color = colors[i], label = ba)\n    plt.plot(temptrade['seconds_in_bucket'], temptrade['price'], linestyle = '--', color = 'black', \n             lw = 2, label = 'Trade price')\n    plt.legend()\n    plt.title(f\"Bid\/Ask Price for Stock 10 at time_id {time_id}\")\n    plt.show()","5aafbcc7":"for t in book_10['time_id'].unique()[:5]:\n    plot_bidaskprice(t)","888aa320":"def plot_price_vol(time_id):\n    temp = trade_10[trade_10['time_id'] == time_id]\n    fig = plt.figure(figsize = (16, 6))\n    ax = fig.add_subplot(111)\n    ax.plot(temp['seconds_in_bucket'], temp['size'], ':g', label = 'Size')\n    ax.legend(loc = 'upper left')\n\n    ax2 = ax.twinx()\n    ax2.plot(temp['seconds_in_bucket'], temp['price'], '-r', label = 'Price')\n    ax2.legend()\n    plt.title(f\"Price\/Size of Stock 10 at time_id: {time_id}\")\n    plt.show()","86b69c04":"for t in book_10['time_id'].unique()[:5]:\n    plot_price_vol(t)","853b7128":"stock_target_stats = train.groupby('stock_id')['target'].agg(['mean', 'median', 'std', 'sum'])\nplt.figure(figsize = (16, 8))\nplt.subplot(1, 2, 1)\nsns.distplot(stock_target_stats['mean'])\nplt.title('Target Mean')\nplt.subplot(1, 2, 2)\nsns.distplot(stock_target_stats['std'])\nplt.title('Target STD');","589f4a37":"Ref: https:\/\/www.investopedia.com\/terms\/b\/bid-askspread.aspv","db0d3a9a":"### Check the book and trade parquets for stock code 10","2c0b1d44":"# WIP","d2c1ff01":"More Info: https:\/\/www.kaggle.com\/jiashenliu\/introduction-to-financial-concepts-and-data","b27d8518":"#### Plotting the bid\/ask price with trade price","ce8b2c17":"# Weighted Averaged Price\n\n- Indicates if the market is bearish or bullish - The market is bullish when the price is below the WAP and bearish if the price is above the WAP.","e37887b5":"# What Is a Bid-Ask Spread?\n- A bid-ask spread is the amount by which the ask price exceeds the bid price for an asset in the market. The bid-ask spread is essentially the difference between the highest price that a buyer is willing to pay for an asset and the lowest price that a seller is willing to accept. An individual looking to sell will receive the bid price while one looking to buy will pay the ask price.\n- The spread is the transaction cost. Price takers buy at the ask price and sell at the bid price, but the market maker buys at the bid price and sells at the ask price.\n- The bid represents demand and the ask represents supply for an asset.\n- The bid-ask spread can be considered a measure of the supply and demand for a particular asset. Because the bid can be said to represent demand and the ask to represent the supply for an asset.\n- The bid-ask spread is the de facto measure of market liquidity, more liquid markets means lower spread while less liquid markets will have higher spread.\n- Typically, a security with a narrow bid-ask spread will have high demand. By contrast, a security with a wide bid-ask spread may illustrate a low volume of demand, therefore influencing wider discrepancies in its price.\n- Example: Stocks that are traded heavily, such as Google, Apple, and Microsoft will have a smaller bid-ask spread.","7a44fd75":"#### Utils"}}