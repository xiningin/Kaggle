{"cell_type":{"6bdf25a1":"code","f26aae00":"code","d9ad56bb":"code","8b2ad168":"code","87651dec":"code","dc4baa80":"code","dab1256e":"code","02bba994":"code","3a0bb025":"code","51f16571":"code","3b91a8d4":"code","bf6164b6":"code","e037df63":"code","f8328a9f":"code","ac7c892e":"code","5a4bb1e1":"code","2dd24465":"code","2d369cef":"code","0adafa22":"code","2fefd363":"code","23becee6":"code","5eeaea30":"code","8321c077":"code","a74fabc0":"code","1c039d6b":"code","b083ad22":"code","b69bddfa":"code","38222c0a":"code","c26c1b2f":"code","c1e64387":"code","a7b74f72":"code","0a99973a":"code","ceadc5dc":"code","1899091b":"code","7d954cfd":"code","bfdd4bbf":"code","c991a4ef":"code","9522b8c5":"code","e436362d":"code","78fdeb87":"markdown","e28d0463":"markdown","6d1ef279":"markdown","4b4013e6":"markdown","990c82d8":"markdown","45f8927d":"markdown","de94b595":"markdown","865083c0":"markdown"},"source":{"6bdf25a1":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nhit = pd.read_csv(\"..\/input\/hittlers\/Hitters.csv\")\ndf = hit.copy()\ndf = df.dropna()\ndms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])\ny = df[\"Salary\"]\nX_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')\nX = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.25, \n                                                    random_state=42)","f26aae00":"X_train = pd.DataFrame(X_train[\"Hits\"])\nX_test = pd.DataFrame(X_test[\"Hits\"])","d9ad56bb":"from sklearn.tree import DecisionTreeRegressor\ncart_model=DecisionTreeRegressor()","8b2ad168":"cart_model","87651dec":"cart_model.fit(X_train, y_train)","dc4baa80":"import numpy as np\nimport matplotlib.pyplot as plt\n\nX_grid = np.arange(min(np.array(X_train)),max(np.array(X_train)), 0.01) \nX_grid = X_grid.reshape((len(X_grid), 1))  \nplt.scatter(X_train, y_train, color = 'red') \nplt.plot(X_grid, cart_model.predict(X_grid), color = 'blue')  \nplt.title('CART REGRESON A\u011eACI')  \nplt.xlabel('At\u0131\u015f Say\u0131s\u0131(Hits)') \nplt.ylabel('Maa\u015f (Salary)') ;\n","dab1256e":"cart_model=DecisionTreeRegressor(max_leaf_nodes=3)\ncart_model\ncart_model.fit(X_train, y_train)\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nX_grid = np.arange(min(np.array(X_train)),max(np.array(X_train)), 0.01) \nX_grid = X_grid.reshape((len(X_grid), 1))  \nplt.scatter(X_train, y_train, color = 'red') \nplt.plot(X_grid, cart_model.predict(X_grid), color = 'blue')  \nplt.title('CART REGRESON A\u011eACI')  \nplt.xlabel('At\u0131\u015f Say\u0131s\u0131(Hits)') \nplt.ylabel('Maa\u015f (Salary)') ;\n","02bba994":"cart_model=DecisionTreeRegressor(max_leaf_nodes=10)\ncart_model\ncart_model.fit(X_train, y_train)\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nX_grid = np.arange(min(np.array(X_train)),max(np.array(X_train)), 0.01) \nX_grid = X_grid.reshape((len(X_grid), 1))  \nplt.scatter(X_train, y_train, color = 'red') \nplt.plot(X_grid, cart_model.predict(X_grid), color = 'blue')  \nplt.title('CART REGRESON A\u011eACI')  \nplt.xlabel('At\u0131\u015f Say\u0131s\u0131(Hits)') \nplt.ylabel('Maa\u015f (Salary)') ;\n","3a0bb025":"# Rule Set of the tree","51f16571":"!pip install skompiler","3b91a8d4":"from skompiler import skompile","bf6164b6":"pip install astor","e037df63":"print(skompile(cart_model.predict).to(\"python\/code\"))","f8328a9f":"x=[91]","ac7c892e":"(345.2011551724138 if x[0] <= 117.5 else ((((1300.0 if x[0] <= 118.5 else \n    641.0) if x[0] <= 122.5 else 1468.5236666666667) if x[0] <= 125.5 else \n    621.9679230769232) if x[0] <= 143.0 else (958.6111111111111 if x[0] <= \n    150.5 else 2460.0) if x[0] <= 151.5 else 499.1666666666667 if x[0] <= \n    157.5 else 892.5402413793104) if x[0] <= 225.5 else 1975.0)","5a4bb1e1":"cart_model.predict(X_test)[0:5]","2dd24465":"cart_model.predict([[91]])","2d369cef":"y_pred=cart_model.predict(X_test)","0adafa22":"from sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(y_test, y_pred))        #rmse without tuning","2fefd363":"# Grid Search Cv\n# setting params range and cv\n# fitting X_tain and y_train\n# finding best params\n# setting and fitting tuned model","23becee6":"cart_model = DecisionTreeRegressor()\ncart_model.fit(X_train, y_train)\ny_pred = cart_model.predict(X_test)","5eeaea30":"np.sqrt(mean_squared_error(y_test, y_pred))","8321c077":"cart_params = {\"min_samples_split\": range(2,100),\n               \"max_leaf_nodes\": range(2,10)}","a74fabc0":"from sklearn.model_selection import GridSearchCV\ncart_cv_model= GridSearchCV(cart_model,cart_params, cv=10)","1c039d6b":"cart_cv_model.fit(X_train,y_train)","b083ad22":"cart_cv_model.best_params_","b69bddfa":"cart_tuned = DecisionTreeRegressor(max_leaf_nodes = 9, min_samples_split = 76)","38222c0a":"cart_tuned.fit(X_train,y_train)    #fitted final model","c26c1b2f":"y_pred = cart_tuned.predict(X_test)","c1e64387":"np.sqrt(mean_squared_error(y_pred,y_test))","a7b74f72":"hit = pd.read_csv(\"..\/input\/hittlers\/Hitters.csv\")\ndf = hit.copy()\ndf = df.dropna()\ndms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])\ny = df[\"Salary\"]\nX_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')\nX = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.25, \n                                                    random_state=42)","0a99973a":"cart_model = DecisionTreeRegressor()\ncart_model.fit(X_train, y_train)\ncart_params = {\"min_samples_split\": range(2,100),\n               \"max_leaf_nodes\": range(2,10)}\ncart_cv_model= GridSearchCV(cart_model,cart_params, cv=10)\ncart_cv_model.fit(X_train,y_train)","ceadc5dc":"cart_cv_model.best_params_","1899091b":"cart_tuned = DecisionTreeRegressor(max_leaf_nodes = 9, min_samples_split = 37)","7d954cfd":"cart_tuned.fit(X_train,y_train)   ","bfdd4bbf":"y_pred = cart_tuned.predict(X_test)","c991a4ef":"np.sqrt(mean_squared_error(y_pred,y_test))","9522b8c5":"# We found 413 for KNN, \n#          367 for SVR,\n#          363 Artifical Neural Network.\n# And now, 376 for CART\n\n#In these models(KNN-SVR-ANN-CART), the best one is ANN for \"hitters\" data set, till now.\n","e436362d":"#Thanks to https:\/\/github.com\/mvahit\/DSMLBC","78fdeb87":"# Setting and fitting a model","e28d0463":"# Prediction","6d1ef279":"# Model Tuning","4b4013e6":"# Import and Split Data","990c82d8":"# Visualization\n","45f8927d":"# ***First, We will work on one x variable***","de94b595":"# ***Secondly, We will work on all x variables***","865083c0":"# Firstly, we will work on one x variable\n### 1.Import and split te data\n### 2.Set a model and fit it (Bonus: Visualization and Rule Set of the tree)  \n### 3.Predict\n### 4.Model Tuning\n\n\n# Secondly, we will work on all x variables.\n### 1.Import and split te data\n### 2.Set a model and fit it   \n### 3.Predict\n### 4.Model Tuning\n"}}