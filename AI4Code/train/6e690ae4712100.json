{"cell_type":{"f04ddc52":"code","a060e45f":"code","167ab3f6":"code","6fd43c49":"code","e153240b":"code","8619ebe6":"code","db277141":"code","2fcbbffa":"code","2b732501":"code","a0c95731":"code","9d0f4405":"code","b3067c33":"code","210e4c68":"code","aa03ccd5":"code","b59e0d04":"code","e5713c52":"code","9ac925ef":"code","a4b3b170":"code","871872a7":"code","1065b3ec":"code","c91e2aab":"code","560043df":"code","34fb656f":"markdown","1b86b671":"markdown","c3bacd0c":"markdown"},"source":{"f04ddc52":"import torch\nfrom torch import nn\nimport pathlib\nfrom torch.utils.data import DataLoader\nfrom torchvision import *","a060e45f":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","167ab3f6":"transformtrain = transforms.Compose([\n    transforms.Resize((150, 150)),\n    transforms.RandomHorizontalFlip(),\n    transforms.ToTensor(),\n    transforms.Normalize((.5, .5, .5), (.5, .5, .5))\n])\ntransformtest = transforms.Compose([\n    transforms.Resize((150, 150)),\n    transforms.ToTensor(),\n    transforms.Normalize((.5, .5, .5), (.5, .5, .5))\n])","6fd43c49":"trainds = datasets.ImageFolder('..\/input\/seg_train\/seg_train', transform=transformtrain)\ntestds = datasets.ImageFolder('..\/input\/seg_test\/seg_test', transform=transformtest)","e153240b":"trainloader = DataLoader(trainds, batch_size=256, shuffle=True)\ntestloader = DataLoader(testds, batch_size=64, shuffle=False)","8619ebe6":"root = pathlib.Path('..\/input\/seg_train\/seg_train')\nclasses = sorted([j.name.split('\/')[-1] for j in root.iterdir()])","db277141":"model = models.vgg19(pretrained=True).to(device)\nfor param in model.features.parameters():\n    param.requires_grad = False","2fcbbffa":"model","2b732501":"model.classifier[6] = nn.Linear(model.classifier[6].in_features, len(classes)).to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.classifier.parameters(), lr=0.00001)","a0c95731":"trainlosses = []\ntestlosses = []\nfor e in range(50):\n    trainloss = 0\n    traintotal = 0\n    trainsuccessful = 0\n    for traininput, trainlabel in trainloader:\n        traininputs, trainlabels = traininput.to(device), trainlabel.to(device)\n        optimizer.zero_grad()\n        trainpredictions = model(traininputs)\n        _, trainpredict = torch.max(trainpredictions.data, 1)\n        loss = criterion(trainpredictions, trainlabels)\n        loss.backward()\n        optimizer.step()\n        trainloss += loss.item()\n        traintotal += trainlabels.size(0)\n        trainsuccessful += (trainpredict == trainlabels).sum().item()\n    else:\n        testloss = 0\n        testtotal = 0\n        testsuccessful = 0\n        with torch.no_grad():\n            for testinput, testlabel in testloader:\n                testinputs, testlabels = testinput.to(device), testlabel.to(device)\n                testpredictions = model(testinputs)\n                _, testpredict = torch.max(testpredictions.data, 1)\n                tloss = criterion(testpredictions, testlabels)\n                testloss += tloss.item()\n                testtotal += testlabels.size(0)\n                testsuccessful += (testpredict == testlabels).sum().item()\n        trainlosses.append(trainloss\/len(trainloader))\n        testlosses.append(testloss\/len(testloader))\n        print('Train Accuracy %{:.2f}'.format(100*trainsuccessful\/traintotal))\n        print('Test Accuracy %{:.2f}'.format(100*testsuccessful\/testtotal))\n","9d0f4405":"import matplotlib.pyplot as plt","b3067c33":"plt.plot(trainlosses, label='Training loss', color='green')\nplt.plot(testlosses, label='Validation loss', color='black')\nplt.legend(frameon=False)\nplt.show()","210e4c68":"!ls ..\/input\/seg_pred\/seg_pred\/3966.jpg","aa03ccd5":"from PIL import Image\nimport numpy as np","b59e0d04":"img = Image.open('..\/input\/seg_pred\/seg_pred\/3966.jpg')","e5713c52":"nimg = np.array(img)","9ac925ef":"plt.imshow(nimg)","a4b3b170":"pimg = transformtest(img).unsqueeze(0).to(device)","871872a7":"pimg.shape","1065b3ec":"prediction = model(pimg)","c91e2aab":"_, tpredict = torch.max(prediction.data, 1)","560043df":"classes[tpredict[0].item()]","34fb656f":"It is amazing, isn't it?","1b86b671":"Seems there is overfitting. You could use L2 regularization or dropout to get better test accuracy if you wish to give it a try.","c3bacd0c":"__Let's predict__"}}