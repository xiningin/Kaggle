{"cell_type":{"1767dfdd":"code","8039cbdf":"code","083290d9":"code","e9a460c6":"code","474abd96":"code","b71005f4":"code","dc439c8b":"code","845c017d":"code","31c2d2b5":"code","e2493cd1":"code","d4926e80":"code","2ab501ab":"code","f9117a9c":"code","26703091":"code","fd9fa77f":"code","9291fcb3":"code","8d87a8b1":"code","5f571f94":"code","d96b2986":"code","fe7ed5f4":"code","fd43e736":"code","ef6c6c58":"code","13fb0987":"code","7d142667":"code","027987d3":"code","a0a927cb":"code","0552805e":"code","0531a9a8":"code","e176f1e7":"code","39a40e27":"code","e8a5dec3":"code","6e9e1a85":"code","52b05718":"code","2ecfb1a1":"code","68b14b96":"code","a7f3584f":"code","d108da93":"code","e0eb0d48":"code","c8563071":"code","0f94e32a":"code","31c162cd":"code","19f319af":"code","9e85c372":"code","a2c40d76":"code","2cbaefe7":"code","fa6316a8":"code","eabbfe12":"code","feaef601":"code","37f25932":"code","54787925":"code","91948a58":"code","3e5a8a7c":"code","8c2132c2":"code","8909943d":"code","8af7133f":"code","5633554a":"code","1f3960cc":"code","afececf4":"code","c4e93327":"code","b923dbf2":"code","b9a8e5c4":"markdown","f9d4ab27":"markdown","d1113397":"markdown","ca8b66ac":"markdown","b8b4a32a":"markdown","65228fa8":"markdown","751134cd":"markdown","a2592e49":"markdown","995baa35":"markdown","71ad5542":"markdown","097819bc":"markdown","38556a01":"markdown","9497a0f7":"markdown","152cb9e6":"markdown","d54cdbe5":"markdown","b92e26c7":"markdown","668171da":"markdown","b4bb2e3d":"markdown","999881b6":"markdown","530fb3f6":"markdown","f66ca5ec":"markdown","1034c847":"markdown","83924964":"markdown","a27491cf":"markdown","ab15818f":"markdown"},"source":{"1767dfdd":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","8039cbdf":"data_path = \"..\/input\/titanic\/train.csv\"\ndf = pd.read_csv(data_path)\ndf.head()","083290d9":"print(\"Columns details\")\npd.DataFrame(df.dtypes).rename(columns={0:'dtype'})","e9a460c6":"test_data_path = \"..\/input\/titanic\/test.csv\"\ndf_test = pd.read_csv(test_data_path)\ndf_test.head()\ntest_passenger_id = df_test['PassengerId'].values","474abd96":"# identify the null values\n\ndf.isnull().sum()","b71005f4":"# Identify missing data in test data\n\ndf_test.isnull().sum()","dc439c8b":"# Response variable distribution\n\ndf.groupby('Survived').size().reset_index(name='counts')","845c017d":"sns.countplot(x = 'Survived',data =df)","31c2d2b5":"df.groupby(['Sex', 'Survived'])['Survived'].count().reset_index(name = 'count')","e2493cd1":"sns.countplot(x = 'Sex', hue='Survived', data = df)","d4926e80":"pd.crosstab(df.Pclass, df.Survived, margins = True).style.background_gradient(cmap='summer_r')","2ab501ab":"sns.countplot(x= 'Pclass', hue='Survived', data = df)","f9117a9c":"pd.crosstab([df.Sex, df.Survived], df.Pclass, margins= True).style.background_gradient(cmap='summer_r')","26703091":"print('Olderes Passenger was of:', df.Age.max(), 'Years')\nprint('Youngest Passenger was of:', df.Age.min(), 'Years')\nprint(\"Average Age of the Passengers in ship:\" + \"{:.2f}\".format(df.Age.mean()), 'Years')","fd9fa77f":"\nf, ax = plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\", \"Age\", \n               hue=\"Survived\", \n               data = df,\n               split=True,\n               ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nsns.violinplot(\"Sex\", \"Age\",\n              hue=\"Survived\",\n              data = df,\n              split=True,\n              ax=ax[1])\n\nax[1].set_title('Sex and Age vs Survived')\nplt.show()","9291fcb3":"df['Initial']=0\ndf_test['Initial']=0\nfor i in df:\n    df['Initial']=df.Name.str.extract('([A-Za-z]+)\\.')\nfor i in df_test:\n    df_test['Initial']=df_test.Name.str.extract('([A-Za-z]+)\\.')\npd.crosstab(df.Initial, df.Sex, margins=True).T.style.background_gradient(cmap='summer_r')","8d87a8b1":"pd.crosstab(df_test.Initial, df_test.Sex, margins=True).T.style.background_gradient(cmap='summer_r')","5f571f94":"df['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                      ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],\n                      inplace=True)\ndf_test['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                      ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],\n                      inplace=True)\n\ndf.groupby('Initial')['Age'].mean().reset_index(name ='Mean')","d96b2986":"df_test.groupby('Initial')['Age'].mean().reset_index(name ='Mean')","fe7ed5f4":"# Assigning Age which NaN values with mean values of age\ndf.loc[(df.Age.isnull()) & (df.Initial == 'Mr'), 'Age']=33\ndf.loc[(df.Age.isnull()) & (df.Initial == 'Mrs'), 'Age']=36\ndf.loc[(df.Age.isnull()) & (df.Initial == 'Master'), 'Age']=46\ndf.loc[(df.Age.isnull()) & (df.Initial == 'Miss'), 'Age']=22\ndf.loc[(df.Age.isnull()) & (df.Initial == 'Other'), 'Age']= 46\n\n\ndf_test.loc[(df_test.Age.isnull()) & (df_test.Initial == 'Mr'), 'Age']=33\ndf_test.loc[(df_test.Age.isnull()) & (df_test.Initial == 'Mrs'), 'Age']=36\ndf_test.loc[(df_test.Age.isnull()) & (df_test.Initial == 'Master'), 'Age']=46\ndf_test.loc[(df_test.Age.isnull()) & (df_test.Initial == 'Miss'), 'Age']=22\ndf_test.loc[(df_test.Age.isnull()) & (df_test.Initial == 'Other'), 'Age']= 46\n\nprint(f\"Is there null values of age in trianing set: {df.Age.isnull().any()}\")\nprint(f\"Is there null values of age in trianing set: {df_test.Age.isnull().any()}\")","fd43e736":"f, ax = plt.subplots(1,2,figsize=(20,10))\ndf[df['Survived']==0].Age.hist(ax=ax[0],\n                              bins=20,\n                              edgecolor='black',\n                              color='red')\nax[0].set_title(' Fequency map of Age for Survived = 0 ')\nx=list(range(0,85,5))\nax[0].set_xticks(x)\n\ndf[df['Survived']==1].Age.hist(ax=ax[1],\n                              bins=20,\n                              edgecolor='black',\n                              color='blue')\nax[1].set_title(' Fequency map of Age for Survived = 1 ')\nax[1].set_xticks(x)\n\nplt.show()","ef6c6c58":"pd.crosstab([df.Embarked, df.Pclass], \n            [df.Sex, df.Survived], \n            margins=True).style.background_gradient(cmap='summer_r')","13fb0987":"sns.factorplot(data= df, \n               x= 'Embarked',\n               y= 'Survived')\nfig=plt.gcf()\nfig.set_size_inches(5,3)\nplt.show()","7d142667":"f,ax = plt.subplots(2,2, figsize=(20,15))\n\nsns.countplot('Embarked', data=df, ax=ax[0,0])\nax[0,0].set_title('No. Of Passengers Boarded')\n\nsns.countplot('Embarked', hue='Sex', data=df, ax=ax[0,1])\nax[0,1].set_title('Male Female Split for Embarked')\n\nsns.countplot('Embarked', hue='Survived', data=df, ax=ax[1,0])\nax[1,0].set_title('Embarked vs Survived')\n\nsns.countplot('Embarked', hue='Pclass', data=df, ax=ax[1,1])\nax[1,1].set_title('Embarked vs Pclass')\n\nplt.show()","027987d3":"sns.factorplot('Pclass', 'Survived', hue='Sex', col='Embarked', data=df)\nplt.show()","a0a927cb":"# Filling data for Embarked\n\ndf['Embarked'].fillna('S', inplace=True)\ndf.Embarked.isnull().any()","0552805e":"pd.crosstab(df.SibSp, df.Survived).style.background_gradient(cmap='summer_r')","0531a9a8":"sns.barplot('SibSp', 'Survived', data = df)\nplt.show()","e176f1e7":"pd.crosstab(df.SibSp, df.Pclass).style.background_gradient(cmap='summer_r')","39a40e27":"pd.crosstab(df.Parch, df.Pclass).style.background_gradient(cmap='summer_r')","e8a5dec3":"sns.barplot('Parch', 'Survived', data = df)\nplt.show()","6e9e1a85":"f,ax = plt.subplots(1,3, figsize=(20,8))\nsns.distplot(df[df['Pclass'] == 1].Fare, ax=ax[0])\nax[0].set_title('Fares in Pclass 1')\n\nsns.distplot(df[df['Pclass'] == 2].Fare, ax=ax[1])\nax[1].set_title('Fares in Pclass 2')\n\nsns.distplot(df[df['Pclass'] == 3].Fare, ax=ax[2])\nax[2].set_title('Fare in Pclass 3')\n\nplt.show()","52b05718":"# Fill NaN value for fare in test data \n\ndf_test['Fare'].fillna(df_test['Fare'].mean(), inplace=True)\ndf_test.Fare.isnull().any()","2ecfb1a1":"plt.subplots(figsize=(10, 10))\nsns.set(font_scale=1)\nsns.heatmap(df.corr(), square= True, cbar= True, annot= True)\nplt.show()","68b14b96":"df['Age_band']=0\ndf.loc[df.Age <= 16, 'Age_band'] = 0\ndf.loc[(df.Age > 16) & (df.Age <= 32), 'Age_band'] = 1\ndf.loc[(df.Age > 32) & (df.Age <= 48), 'Age_band'] = 2\ndf.loc[(df.Age > 48) & (df.Age <= 64), 'Age_band'] = 3\ndf.loc[df.Age > 64, 'Age_band'] = 4\n\ndf_test['Age_band']=0\ndf_test.loc[df_test.Age <= 16, 'Age_band'] = 0\ndf_test.loc[(df_test.Age > 16) & (df_test.Age <= 32), 'Age_band'] = 1\ndf_test.loc[(df_test.Age > 32) & (df_test.Age <= 48), 'Age_band'] = 2\ndf_test.loc[(df_test.Age > 48) & (df_test.Age <= 64), 'Age_band'] = 3\ndf_test.loc[df_test.Age > 64, 'Age_band'] = 4\n\ndf.head()","a7f3584f":"df['Age_band'].value_counts().to_frame().style.background_gradient(cmap='summer')","d108da93":"df['Family_Size'] = 0\ndf['Family_Size'] = df.Parch + df.SibSp\n\ndf_test['Family_Size'] = 0\ndf_test['Family_Size'] = df_test.Parch + df_test.SibSp\n\ndf['Alone'] = 0\ndf.loc[df['Family_Size'] ==0, 'Alone'] = 1\n\ndf_test['Alone'] = 0\ndf_test.loc[df_test['Family_Size'] ==0, 'Alone'] = 1\n\ndf.head()","e0eb0d48":"sns.factorplot('Family_Size', 'Survived', data = df)\nsns.factorplot('Alone', 'Survived', data = df)\nplt.show()","c8563071":"sns.factorplot('Alone', 'Survived', data = df, hue='Sex', col='Pclass')\nplt.show()","0f94e32a":"df['Fare_Range']=pd.qcut(df['Fare'],4)\ndf_test['Fare_Range']=pd.qcut(df_test['Fare'],4)\ndf.groupby(['Fare_Range'])['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')","31c162cd":"df['Fare_cat']=0\ndf.loc[df.Fare <= 7.91, 'Fare_cat']=0\ndf.loc[(df.Fare > 7.91) & (df.Fare <= 14.454), 'Fare_cat']=1\ndf.loc[(df.Fare > 14.454) & (df.Fare <= 31.0), 'Fare_cat']=2\ndf.loc[(df.Fare > 31.0) & (df.Fare <= 513), 'Fare_cat']=3\n\ndf_test['Fare_cat']=0\ndf_test.loc[df_test.Fare <= 7.91, 'Fare_cat']=0\ndf_test.loc[(df_test.Fare > 7.91) & (df_test.Fare <= 14.454), 'Fare_cat']=1\ndf_test.loc[(df_test.Fare > 14.454) & (df_test.Fare <= 31.0), 'Fare_cat']=2\ndf_test.loc[(df_test.Fare > 31.0) & (df_test.Fare <= 513), 'Fare_cat']=3\n\nsns.factorplot('Fare_cat', 'Survived', data = df, hue='Sex')\nplt.show()","19f319af":"df['Sex'].replace(['male', 'female'], [0,1], inplace=True)\ndf['Embarked'].replace(['S', 'C', 'Q'], [0,1,2], inplace=True)\ndf['Initial'].replace(['Master', 'Other', 'Mr', 'Mrs', 'Miss'], [0,1,2,3,4], inplace=True)\n\ndf_test['Sex'].replace(['male', 'female'], [0,1], inplace=True)\ndf_test['Embarked'].replace(['S', 'C', 'Q'], [0,1,2], inplace=True)\ndf_test['Initial'].replace(['Master', 'Other', 'Mr', 'Mrs', 'Miss'], [0,1,2,3,4], inplace=True)","9e85c372":"# Droping the coloumn\ndf.drop(['Name', 'Age', 'Ticket', 'Fare', 'Cabin', 'Fare_Range', 'PassengerId'], axis = 1, inplace=True)\ndf_test.drop(['Name', 'Age', 'Ticket', 'Fare', 'Cabin', 'Fare_Range', 'PassengerId'], axis = 1, inplace=True)\n\nplt.subplots(figsize=(10, 10))\nsns.set(font_scale=1)\nsns.heatmap(df.corr(), square= True, cbar= True, annot= True)\nplt.show()","a2c40d76":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix","2cbaefe7":"train, val = train_test_split(df, test_size=0.3, \n                              random_state=0, \n                              stratify=df['Survived'])\n\ntrain_X = train[train.columns[1:]]\ntrain_Y = train[train.columns[:1]]\n\nval_X = val[val.columns[1:]]\nval_Y = val[val.columns[:1]]\n\nX = df[df.columns[1:]]\nY = df[df.columns[:1]]","fa6316a8":"train.columns[:]","eabbfe12":"# Logistic regression \n\nmodel_LR = LogisticRegression()\nmodel_LR.fit(train_X, train_Y)\npred_logit=model_LR.predict(val_X)\n\nprint(f\"Logistic regression accuracy: {metrics.accuracy_score(pred_logit, val_Y):.3f}\")","feaef601":"# Decision Tree\n\nmodel_DT = DecisionTreeClassifier()\nmodel_DT.fit(train_X, train_Y)\npred_DTC = model_DT.predict(val_X)\nprint(f\"Decision tree classifier accuracy: {metrics.accuracy_score(pred_DTC, val_Y):.3f}\")","37f25932":"# K-Nearest Neighbours default values k=5\n\nmodel_KNN = KNeighborsClassifier(n_neighbors=5)\nmodel_KNN.fit(train_X, train_Y)\npred_KNN= model_KNN.predict(val_X)\nprint(f\"KNN accuracy:{metrics.accuracy_score(pred_KNN, val_Y):.3f}\")","54787925":"# For different values of k\n\naccuracy_list= pd.Series()\n\nfor i in list(range(1,11)):\n    model= KNeighborsClassifier(n_neighbors=i)\n    model.fit(train_X, train_Y)\n    pred=model.predict(val_X)\n    accuracy_list=accuracy_list.append(pd.Series(metrics.accuracy_score(pred, val_Y)))\nplt.plot(list(range(1,11)),accuracy_list)\nplt.show()\nprint('Accuracies for different values of n are:',accuracy_list.values,'with the max value as ',accuracy_list.values.max())","91948a58":"# K-Nearest Neighbours default values k=9\n\nmodel_KNN = KNeighborsClassifier(n_neighbors=9)\nmodel_KNN.fit(train_X, train_Y)\npred_KNN= model_KNN.predict(val_X)\nprint(f\"KNN accuracy:{metrics.accuracy_score(pred_KNN, val_Y):.3f}\")","3e5a8a7c":"# Random forest \n\nmodel_RF = RandomForestClassifier(n_estimators=100)\nmodel_RF.fit(train_X, train_Y)\npred_RF= model_RF.predict(val_X)\nprint(f\"Random forest accuracy:{metrics.accuracy_score(pred_RF, val_Y):.3f}\")","8c2132c2":"# cross validation to improve the model variance\n\nfrom sklearn.model_selection import KFold \nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\n\n\nkfold = KFold(n_splits=10, random_state=22)\n\nmeans = []\naccuracy = []\nstd = []\n\nclassifiers=['Logistic Regression', \n             'KNN', \n             'Decision Tree', \n             'Random Forest']\n\nmodels=[LogisticRegression(),\n       KNeighborsClassifier(n_neighbors=9),\n       DecisionTreeClassifier(),\n       RandomForestClassifier(n_estimators=100)]\n\nfor i in models:\n    model = i\n    cv_result = cross_val_score(model, X, Y, \n                                cv=kfold, \n                                scoring=\"accuracy\")\n    means.append(cv_result.mean())\n    std.append(cv_result.std())\n    accuracy.append(cv_result)\n\nmodels_result = pd.DataFrame({'CV Mean':means, 'STD':std}, index=classifiers)\n\nmodels_result","8909943d":"plt.subplots(figsize=(12,6))\nbox=pd.DataFrame(accuracy, index=[classifiers])\nbox.T.boxplot()","8af7133f":"f,ax=plt.subplots(2,2,figsize=(20,10))\n\ny_pred = cross_val_predict(LogisticRegression(), X,Y, cv=10)\nsns.heatmap(confusion_matrix(Y, y_pred), ax=ax[0,0], annot=True, fmt ='2.0f')\nax[0,0].set_title(\"Matrix for Logistic Regression\")\n\n\ny_pred = cross_val_predict(KNeighborsClassifier(n_neighbors=9), X,Y, cv=10)\nsns.heatmap(confusion_matrix(Y, y_pred), ax=ax[0,1], annot=True, fmt ='2.0f')\nax[0,1].set_title(\"Matrix for KK\")\n\ny_pred = cross_val_predict(DecisionTreeClassifier(), X,Y, cv=10)\nsns.heatmap(confusion_matrix(Y, y_pred), ax=ax[1,0], annot=True, fmt ='2.0f')\nax[1,0].set_title(\"Matrix for Decision tree\")\n\n\ny_pred = cross_val_predict(RandomForestClassifier(n_estimators=100), X,Y, cv=10)\nsns.heatmap(confusion_matrix(Y, y_pred), ax=ax[1,1], annot=True, fmt ='2.0f')\nax[1,1].set_title(\"Matrix for Random forest\")\n\nplt.show()","5633554a":"# Using logistic regression model to predict on test data\n\ntest_pred = model_LR.predict(df_test[df_test.columns[:]])","1f3960cc":"column_names = [\"PassengerId\", \"Survived\"]\n\nresult = pd.DataFrame(columns = column_names)","afececf4":"result['PassengerId'] = test_passenger_id\nresult['Survived'] = test_pred","c4e93327":"!rm -rf submission.csv\nresult.to_csv(\"submission.csv\", index=False)","b923dbf2":"pd.read_csv('.\/submission.csv')","b9a8e5c4":"### Missing data","f9d4ab27":"- Converting strig values into numerics","d1113397":"### Response variable ","ca8b66ac":"## Model building","b8b4a32a":"There are misspelled initials","65228fa8":"## Load in the data","751134cd":"- Relation ship between Embarked vs Sex, Survived, Pclass","a2592e49":"- Survival rate with Sex and Pclass","995baa35":"Age feature has 177 null values, can assign mean age to people based on Mr and Mrs in the name","71ad5542":"-  Categorical feature - Sex","097819bc":"### Feature analysis ","38556a01":"### Data preparation","9497a0f7":"# Feature Engineering ","152cb9e6":"- Confusion matrix","d54cdbe5":"Master mean age is arround 5 which is not acceptable sinces master's age expected to be old, its not clear that what would master mean in the given dataset. Hence Master will also be imputed with others category mean age","b92e26c7":"- Categorial value - Embarled","668171da":"- Ordinal feature - Pclass","b4bb2e3d":"There are missing data which needs to handled\n\n## EDA","999881b6":"- convert the fare into a ordinal variable","530fb3f6":"- Discrete feature SibSip","f66ca5ec":"Response variable is slightly imbalanced","1034c847":"- Discrete variable Parch","83924964":"- Correlation between the features","a27491cf":"- Continous feature - Fare","ab15818f":"- Continous feature - Age"}}