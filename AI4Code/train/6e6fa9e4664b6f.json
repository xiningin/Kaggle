{"cell_type":{"b1a01889":"code","d4f8c3fe":"code","736fa488":"code","aa048243":"code","8d4bf1ba":"code","1eba4475":"code","3923ff81":"code","e221bd72":"code","ef111caf":"code","e4c9bd2d":"markdown","b882eb29":"markdown","630ab566":"markdown","5151900c":"markdown","34acc4ff":"markdown","aa00f21d":"markdown","e70a95b4":"markdown","5d5ab2f6":"markdown"},"source":{"b1a01889":"import re\nimport gc\nfrom bs4 import BeautifulSoup\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import classification_report, f1_score\n\nimport fasttext","d4f8c3fe":"!wget https:\/\/dl.fbaipublicfiles.com\/fasttext\/vectors-crawl\/cc.tr.300.vec.gz\n!gzip -d cc.tr.300.vec.gz","736fa488":"df_train = pd.read_csv(\"..\/input\/dogus-teknoloji-n11\/train_n11.csv\", sep='|')\ndf_test = pd.read_csv(\"..\/input\/dogus-teknoloji-n11\/test_n11.csv\", sep='|')\ndf_sub = pd.read_csv(\"..\/input\/dogus-teknoloji-n11\/sample_submission_n11.csv\")\n\nDEBUG = False\nN_CLASSES = len(df_train[\"CATEGORY_ID\"].unique())","aa048243":"def clean_text(text):\n    \"\"\"\n    Basit onisleme fonksiyonu.\n    \"\"\"\n    text = BeautifulSoup(text, \"lxml\").text\n    text = text.replace('\\n', ' ')\n    text = re.sub(' +', ' ', text)\n    text = text.strip()\n    return text\n\n\ndef write_to_file(filename, text):\n    \"\"\"\n    Verilen text'i dosyaya yazar.\n    \"\"\"\n    with open(filename, 'w') as f:\n        f.write(text)\n        \n\ndef predict_test(model, test, k=1):\n    \"\"\"\n    Verilen fasttext modeliyle her bir test orneginin siniflandirilmasi.\n    \"\"\"\n    all_scores = []\n    all_labels = []\n    for row in test:\n        labels, scores = model.predict(row, k=k)\n        labels, scores = zip(*sorted(zip(labels, scores)))\n        all_labels.append(labels)\n        all_scores.append(scores)\n        \n    return all_labels, all_scores\n\n\ndef print_results(N, p, r, f1):\n    print(\"N\\t\" + str(N))\n    print(\"P@{}\\t{:.4f}\".format(1, p))\n    print(\"R@{}\\t{:.4f}\".format(1, r))\n    print(\"F1:\\t{:.4f}\".format(f1))","8d4bf1ba":"if DEBUG:\n    df_train = df_train.sample(frac=0.2).reset_index(drop=True)\n\ndf_train[\"CATEGORY_ID\"] = df_train[\"CATEGORY_ID\"].apply(lambda x: \"__label__\" + str(x))\n\ndf_train[\"cleaned_description\"] = df_train[\"DESCRIPTION\"].apply(clean_text)\ndf_test[\"cleaned_description\"] = df_test[\"DESCRIPTION\"].apply(clean_text)\n\ndf_train[\"cleaned_title\"] = df_train[\"TITLE\"].apply(clean_text)\ndf_test[\"cleaned_title\"] = df_test[\"TITLE\"].apply(clean_text)\n    \ndf_train[\"full_text\"] = df_train[\"cleaned_title\"] + '. ' + df_train[\"cleaned_description\"]\ndf_test[\"full_text\"] = df_test[\"cleaned_title\"] + '. ' + df_test[\"cleaned_description\"]","1eba4475":"# https:\/\/fasttext.cc\/docs\/en\/webassembly-module.html\n\nall_labels = []\nall_scores = []\n\nkfold = KFold(n_splits=5, shuffle=True, random_state=42)\noof_labels = np.zeros(shape=len(df_train), dtype=object)\n# oof_scores = np.zeros(shape=(len(df_train), N_CLASSES))\nf1s = []\n\nfor fold, (train_idx, valid_idx) in enumerate(kfold.split(X=df_train[\"full_text\"], \n                                                          y=df_train[\"CATEGORY_ID\"])):\n    print(f\"Training fold: {fold}\")\n    df_train_sub = df_train.iloc[train_idx].reset_index(drop=True)\n    df_valid_sub = df_train.iloc[valid_idx].reset_index(drop=True)\n    train_text = \"\\n\".join((df_train_sub[\"CATEGORY_ID\"] + ' ' + df_train_sub[\"full_text\"]).values)\n    valid_text = \"\\n\".join((df_valid_sub[\"CATEGORY_ID\"] + ' ' + df_valid_sub[\"full_text\"]).values)\n    \n    train_filename = f\"train_fold_{fold}.txt\"\n    valid_filename = f\"valid_fold_{fold}.txt\"\n    write_to_file(train_filename, train_text)\n    write_to_file(valid_filename, valid_text)\n    \n    # Modelin egitimi\n    model = fasttext.train_supervised(\n        input=train_filename, \n        epoch=100, \n        dim=300,\n        wordNgrams=2,\n        pretrainedVectors=\"cc.tr.300.vec\"\n    )\n    # Model performansinin olcumu.\n    N, p, r = model.test(valid_filename)\n    f1 = (2 * p * r) \/ (p + r)\n    f1s.append(f1)\n    print_results(N, p, r, f1)\n    # OOF tahminlemesi.\n    valid_labels, valid_scores = model.predict(df_valid_sub[\"full_text\"].values.tolist())\n    oof_labels[valid_idx] = [label[0] for label in valid_labels]\n    # Test verisi uzerinde tahminleme\n    labels, scores = predict_test(model, df_test[\"full_text\"].values, k=-1)\n    all_labels.append(labels)\n    all_scores.append(np.array(scores))\n    # Modelin kaydedilmesi.\n    # model.save_model(f\"ft_model_fold_{fold}.bin\")\n    del model\n    gc.collect()","3923ff81":"score = f1_score(df_train[\"CATEGORY_ID\"].values, oof_labels, average=\"macro\")\nprint(f\"CV score: {score}\")","e221bd72":"all_scores = np.mean([np.array(score) for score in all_scores], 0)\nlabels = [all_labels[0][0][idx] for idx in all_scores.argmax(1)]\n\ndf_sub[\"Expected\"] = [int(label[9:]) for label in labels]\ndf_sub.to_csv(\"fasttext_5_fold_submission.csv\", index=False)","ef111caf":"df_sub","e4c9bd2d":"# Kutuphanelerin Eklenmesi","b882eb29":"# Yarisma Verilerinin Okunmasi","630ab566":"# FastText Kelime Vektorlerinin Indirilmesi","5151900c":"# Yardimci Fonksiyonlar","34acc4ff":"# Cross Validation Skoru","aa00f21d":"# Submission Dosyasinin Olusturulmasi","e70a95b4":"# Verinin Onislenmesi ve Hazirlanmasi","5d5ab2f6":"# 5-Fold Cross Validation Egitimi ve Degerlendirmesi"}}