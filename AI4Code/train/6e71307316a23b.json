{"cell_type":{"d0c0be1b":"code","85955565":"code","91efdd5b":"code","cf6787d1":"code","3dbd2975":"code","b3974aa8":"code","bb9822d2":"code","1c7ae8be":"code","46ec2ac4":"code","b4e0d2c4":"code","c7494699":"code","b7236651":"code","79159499":"code","57386ec5":"code","33aee552":"code","68f3ce2d":"code","0f221cf3":"code","fdbf0b4f":"code","edde7031":"code","69c3a37c":"code","5286d17e":"code","ff5ff550":"code","820149d1":"code","6ba90df1":"code","b41a2282":"code","685a74e3":"code","051e00b3":"code","82a4eb18":"code","05f10be3":"code","a5749db6":"code","764f62df":"code","b7bb9d68":"code","015a3448":"code","f23345a9":"code","55de28a1":"code","e7d8726e":"code","2d4c1f5c":"code","0a2fcacb":"markdown","9d6e31f6":"markdown","d3b042b6":"markdown","1ea7a1bd":"markdown","237d525e":"markdown"},"source":{"d0c0be1b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","85955565":"# Importing Important library\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression , Ridge , Lasso\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score","91efdd5b":"# Reading the csv file in the data dataframe\ndata = pd.read_csv(\"\/kaggle\/input\/housepricing\/HousePrices_HalfMil.csv\")","cf6787d1":"# Having the brief idea of the dataset\ndata.head()","3dbd2975":"# Size of the dataset\n\ndata.shape","b3974aa8":"# Basic Statistic Analysis \n\ndata.describe()","bb9822d2":"# Checking the datatypes of each feature in the dataframe\n\ndata.dtypes","1c7ae8be":"# Checking for the null values\n\ndata.isnull().sum()","46ec2ac4":"# Checking for the correlation of the features among themselves\n\ncorrelation = data.corr()\ncorrelation","b4e0d2c4":"# Checking the relation using the heatmap\n\nsns.heatmap(data.corr())","c7494699":"# Price is linearly distributed with the area\n\nsns.lineplot(x = data[\"Area\"] , y = data[\"Prices\"])","b7236651":"# Price is linearly distributed with the No. of Garage\n\nsns.lineplot(x = data[\"Garage\"] ,y =  data[\"Prices\"])","79159499":"# Price is linearly distributed with the No. of FirePlace\n\nsns.lineplot( x = data[\"FirePlace\"] ,y =  data[\"Prices\"])","57386ec5":"# Price is linearly distributed with the No. of No. of Bathrooms\n\nsns.lineplot(x = data[\"Baths\"] ,y =  data[\"Prices\"])","33aee552":"# Price is linearly distributed with the White Marble\n\nsns.lineplot(x = data[\"White Marble\"] ,y =  data[\"Prices\"])","68f3ce2d":"# Price is inversely distributed with the Black Marble\n\nsns.lineplot(x = data[\"Black Marble\"] ,y =  data[\"Prices\"])","0f221cf3":"# Price is linearly distributed with the Indian Marble\n\nsns.lineplot(x = data[\"Indian Marble\"] ,y =  data[\"Prices\"])","fdbf0b4f":"# Price is linearly distributed with the No. of Floors\n\nsns.lineplot(x = data[\"Floors\"] ,y =  data[\"Prices\"])","edde7031":"# Price is linearly distributed with the type of City\n\nsns.lineplot(x = data[\"City\"] ,y =  data[\"Prices\"])","69c3a37c":"# Price is linearly distributed with the presence of solar system present with the house\n\nsns.lineplot(x = data[\"Solar\"] ,y =  data[\"Prices\"])","5286d17e":"# Price is linearly distributed with the presence of the facility of the electricity with the house\n\nsns.lineplot(x = data[\"Electric\"] ,y =  data[\"Prices\"])","ff5ff550":"# Price is linearly distributed with the Fiber\n\nsns.lineplot(x = data[\"Fiber\"] ,y =  data[\"Prices\"])","820149d1":"# Price is linearly distributed with the Glass Doors\n\nsns.lineplot(x = data[\"Glass Doors\"] ,y =  data[\"Prices\"])","6ba90df1":"# Price is linearly distributed with the Swiming Pool\n\nsns.lineplot(x = data[\"Swiming Pool\"] ,y = data[\"Prices\"])","b41a2282":"# Price is linearly distributed with the presence of Garden\n\nsns.lineplot(x = data[\"Garden\"] ,y = data[\"Prices\"])","685a74e3":"#Making the object of the LinearRegression\n\nlinreg = LinearRegression()","051e00b3":"# Splitting the dataset into the independent and dependent features\n\nX = data.iloc[:,:-1] # Independent Features\nY = data.iloc[:,-1] # Dependent Features","82a4eb18":"# Splitting the data into train and test from the dataset\n\nX_train , X_test , Y_train , Y_test = train_test_split(X,Y,random_state = 0, test_size = 0.2 )","05f10be3":"# Checking the size of train and test data\n\nprint(X_train.shape)\nprint(Y_train.shape)\nprint(X_test.shape)\nprint(Y_test.shape)","a5749db6":"# Training the Model\n\nlinreg.fit(X_train,Y_train)","764f62df":"# Testing the Model\n\nY_pred = linreg.predict(X_test)","b7bb9d68":"# Comparing the Actual Price and the Predicted Price\n\nmodel_result = pd.DataFrame({\"Actual_Price\" : Y_test, \"Predicted_Price\" : Y_pred})","015a3448":"model_result.head()","f23345a9":"# Checking the accuracy of the model using the r2_score\n\nr2 = r2_score(Y_test , Y_pred)\nr2","55de28a1":"area = int(input(\"Enter the Area of the House: \"))\ngarage = int(input(\"Enter the number of garage: \"))\nfirePlace = int(input(\"Enter the number of fire place: \"))\nbathroom = int(input(\"Enter the number of bathroom: \"))\nwhiteMarble = int(input(\"Enter 1 for white marble else 0: \"))\nblackMarble = int(input(\"Enter 1 for black marble else 0: \"))\nindianMarble = int(input(\"Enter 1 for indian marble else 0: \"))\nfloors = int(input(\"Enter the number of floors in the house: \"))\ncity = int(input(\"Enter the larger value for the good city range(1-3): \"))\nsolar = int(input(\"Enter 1 if you want solar system else 0: \"))\nelectric = int(input(\"Enter 1 if you need electric work to be done else 0: \"))\nfiber = int(input(\"Enter 1 or 0 for the electric fibre: \"))\nglassDoors = int(input(\"Enter 1 if you want glass doors else 0: \"))\nswimingPool = int(input(\"Enter 1 if you want a swiming pool else 0: \"))\ngarden = int(input(\"Enter 1 if you want garden in the house else 0: \"))\n\nvalues = [area,garage,firePlace,bathroom,whiteMarble,blackMarble,indianMarble,floors,\n          city,solar,electric,fiber,glassDoors,swimingPool,garden]\n\ncol = ['area','garage','firePlace','bathroom','whiteMarble','blackMarble',\n                      'indianMarble','floors','city','solar','electric','fibre','glassDoors'\n                     ,'swimingPool','garden']\n\nuser_input = pd.DataFrame(data = [values],\n                         columns = col)","e7d8726e":"# Predicting the price according to the user input\n\nuser_predicted_price = linreg.predict(user_input)","2d4c1f5c":"user_predicted_price = float(user_predicted_price)\nformatted_price = \"{:.2f}\".format(user_predicted_price)\nprint(\"According to the User Input ${} is the price of the house\".format(formatted_price))","0a2fcacb":"# Now predicting the house price using the user input","9d6e31f6":"# Thus we can say that our model is 100% accurate","d3b042b6":"## After using the boxplot for each of the feature we can say that there is no outlier present in the data\n\n- Using the code:- sns.boxplot(data[\"feature_name\"])","1ea7a1bd":"# Training the Model ","237d525e":"## Using the lineplot from seaborn plotting the lineplot of features with respect to the prices(target)"}}