{"cell_type":{"faf0290e":"code","5b6202c1":"code","2f64a07a":"code","3c186c81":"code","893c1e91":"code","c963cbda":"code","7c6167cc":"code","2882e837":"code","93b589f7":"code","71f6ad99":"code","8575c6eb":"code","13a7ee1d":"code","fe88585c":"code","c5e4a45d":"code","c41adbc1":"code","4cba946b":"code","5955ebb8":"code","6215eba6":"code","648a3f3d":"code","ab9934e7":"code","3fd58c4a":"code","3494b202":"code","a353e04e":"code","cada0665":"markdown","91eb5875":"markdown","a333a5e9":"markdown","632298f5":"markdown","219f6cb3":"markdown","286224bb":"markdown","968bb191":"markdown","025520f5":"markdown","fe51e42a":"markdown","982ec365":"markdown","0799efae":"markdown","905cef3e":"markdown","5f5a8508":"markdown","96497464":"markdown","489b096f":"markdown","d4a54f99":"markdown","a86e277c":"markdown"},"source":{"faf0290e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5b6202c1":"season_stats = pd.read_csv('..\/input\/Seasons_Stats.csv')\nseason_stats.sort_values(by='Year',ascending=False).head()\nseason_stats.loc[season_stats.Player== 'Ivica Zubac']","2f64a07a":"# Small Curious side thing, how has Lebron's Threes been progressing\nlebron_stats = season_stats.loc[season_stats.Player == 'LeBron James']\nlebron_stats","3c186c81":"columnsarr = ['FG','FGA','FG%','3P%','3PA','2P%','2PA','FT%','AST','STL','BLK','TOV']\ncolumnsarr[1]\n\nplt.figure(figsize=[20,20])\nfor s in range(len(columnsarr)):\n    plt.subplot(3,4,s+1)\n    plt.scatter(lebron_stats.Year,lebron_stats[columnsarr[s]])\n    plt.title(columnsarr[s])","893c1e91":"sums_per_year = season_stats.groupby('Year').sum()\n\nplt.figure(figsize=[20,20])\nfor s in range(len(columnsarr)):\n    plt.subplot(3,4,s+1)\n    plt.scatter(sums_per_year.index,sums_per_year[columnsarr[s]])\n    plt.title(columnsarr[s])","c963cbda":"season_stats = season_stats[np.isfinite(season_stats['3PA'])]\n\nsums_per_year = season_stats.groupby('Year').sum()\nmean_per_year = season_stats.groupby('Year').mean()\nmedian_per_year = season_stats.groupby('Year').median()\n\nplt.figure(figsize =[20,20])\n\n#Total sum\nplt.subplot(3,1,1)\nthreep = sums_per_year['3PA']\ntwop = sums_per_year['2PA']\n\nplt.bar(sums_per_year.index,threep)\nplt.bar(sums_per_year.index,twop,bottom=threep)\nplt.legend(('3PA','2PA'))\nplt.title('Sum of points')\n\n#Mean\nplt.subplot(3,1,2)\nthreep = mean_per_year['3PA']\ntwop = mean_per_year['2PA']\n\nplt.bar(mean_per_year.index,threep)\nplt.bar(mean_per_year.index,twop,bottom=threep)\nplt.legend(('3PA','2PA'))\nplt.title('Mean of points')\n\n#Median\nplt.subplot(3,1,3)\nthreep = median_per_year['3PA']\ntwop = median_per_year['2PA']\n\nplt.bar(median_per_year.index,threep)\nplt.bar(median_per_year.index,twop,bottom=threep)\nplt.legend(('3PA','2PA'))\nplt.title('Median of points')","7c6167cc":"# Lets check the points distribution for each position\nposarray = ['PG','SG','PF','SF','C']\n\nplt.figure(figsize =[20,20])\n\nfor pos in range(len(posarray)):\n    pos_stats = season_stats.loc[season_stats.Pos == posarray[pos]]\n    \n    sums_per_year = pos_stats.groupby('Year').sum()\n    mean_per_year = pos_stats.groupby('Year').mean()\n    median_per_year = pos_stats.groupby('Year').median()\n    \n    plt.subplot(5,3,pos*3+1)\n    plt.bar(sums_per_year.index,sums_per_year['3PA'])\n    plt.bar(sums_per_year.index,sums_per_year['2PA'],bottom=sums_per_year['3PA'])\n    plt.title('Sum' + \" \" + posarray[pos])\n    plt.subplot(5,3,pos*3+2)\n    plt.bar(sums_per_year.index,mean_per_year['3PA'])\n    plt.bar(sums_per_year.index,mean_per_year['2PA'],bottom=mean_per_year['3PA'])\n    plt.title('Mean' + \" \" + posarray[pos])\n    plt.subplot(5,3,pos*3+3)\n    plt.bar(sums_per_year.index,median_per_year['3PA'])\n    plt.bar(sums_per_year.index,median_per_year['2PA'],bottom=median_per_year['3PA'])\n    plt.title('Median' + \" \" + posarray[pos])\n\n#Note to self: I should learn how to put bar plots side by side later to make the std bars visible\n","2882e837":"#It is hard to quantify how good a player is but we'll just use wins as a metric\ncenter_stats = season_stats.loc[season_stats.Pos == 'C']\ntest_case = center_stats.sort_values('WS',ascending=False)[0:1000]","93b589f7":"#Now lets see how these players shoot\ntest_case = test_case.groupby('Year').head(10).sort_values('Year')\n\nsums_per_year = test_case.groupby('Year').sum()\nmean_per_year = test_case.groupby('Year').mean()\nmedian_per_year = test_case.groupby('Year').median()\n\nplt.figure(figsize = (20,20))\nplt.subplot(3,1,1)\nplt.bar(sums_per_year.index,sums_per_year['3PA'])\nplt.bar(sums_per_year.index,sums_per_year['2PA'],bottom=sums_per_year['3PA'])\nplt.title('Sum' + \" \" + posarray[pos])\n\nplt.subplot(3,1,2)\nplt.bar(sums_per_year.index,mean_per_year['3PA'])\nplt.bar(sums_per_year.index,mean_per_year['2PA'],bottom=mean_per_year['3PA'])\nplt.title('Mean' + \" \" + posarray[pos])\n\nplt.subplot(3,1,3)\nplt.bar(sums_per_year.index,median_per_year['3PA'])\nplt.bar(sums_per_year.index,median_per_year['2PA'],bottom=median_per_year['3PA'])\nplt.title('Median' + \" \" + posarray[pos])\n","71f6ad99":"test = center_stats.loc[(center_stats.Year == 2015) | (center_stats.Year == 2016) | (center_stats.Year == 2017)]","8575c6eb":"plt.scatter(test.WS,test['3PA'])\nplt.ylabel('3PA')\nplt.xlabel('WS')\nplt.title('WS vs 3PA')\n\nplt.axvline(test.WS.median(),0,400)","13a7ee1d":"testshot = test.loc[test.WS > test.WS.median()]\nshooters = testshot.loc[testshot['3PA'] > 150]\nnonshooters = testshot.loc[testshot['3PA'] <= 150]\n\n\nprint(str(len(shooters)\/len(testshot)) + \" \" + \"are shooters above WS mark\") \nprint(str(len(nonshooters)\/len(testshot)) + \" \" + \"are nonshooters above WS mark\") \n\ntestshot = test.loc[test.WS < test.WS.median()]\nshooters = testshot.loc[testshot['3PA'] > 150]\nnonshooters = testshot.loc[testshot['3PA'] <= 150]\n\nprint(str(len(shooters)\/len(testshot)) + \" \" + \"are shooters below WS mark\") \nprint(str(len(nonshooters)\/len(testshot)) + \" \" + \"are nonshooters below WS mark\") ","fe88585c":"player_data = pd.read_csv('..\/input\/player_data.csv')\nplayers = pd.read_csv('..\/input\/Players.csv')\nseason_stats = pd.read_csv('..\/input\/Seasons_Stats.csv')\nplayer_data.head()\nplayers.head()","c5e4a45d":"player_data.position = player_data.position.apply(lambda s: str(s).split('-')[0])\nplayer_data.head()","c41adbc1":"year_players = season_stats.loc[season_stats.Year==1950.0].Player.unique()\nyear_stats = players.loc[players.Player.isin(year_players)]\n\npositions = player_data.position.unique()\ncolors = dict(zip(positions,['Blue','Red','Green']))\n\nfor row in range(len(year_stats)):\n    color = colors[player_data.loc[player_data.name == year_stats.loc[row].Player].position.values[0]]\n    plt.scatter(year_stats.loc[row].height.item(),year_stats.loc[row].weight.item(),c=color)\n","4cba946b":"#We have a problem, probably cause a null value in our data so lets take it out\nplayer_data.position.isna().sum()\nnullrow = player_data.loc[player_data.position.isnull()]\nnullrow","5955ebb8":"player_data = pd.read_csv('..\/input\/player_data.csv')\nplayer_data = player_data.dropna(subset=['position'])\nplayer_data.position = player_data.position.apply(lambda s: str(s).split('-')[0])\nplayer_data.head()","6215eba6":"#To make our legend after\nimport matplotlib.patches as mpatches\nimport matplotlib.pyplot as plt\n\nyear_players = season_stats.loc[season_stats.Year==1950.0].Player.unique()\nyear_stats = players.loc[players.Player.isin(year_players)]\n\npositions = player_data.position.unique()\ncolors = dict(zip(positions,['Blue','Red','Green']))\n\nplayer_ready = player_data['name'].unique()\n\n#Sometimes players does not have a player from year_stats. IDK why cause the overview doesn't go over this\nyear_stats = year_stats.drop(year_stats[~year_stats.Player.isin(player_data.name)].index)\nyear_stats = year_stats.reset_index()\n################################DEBUGGING CODE#############################################\n#for row in range(len(year_stats)):\n    #if year_stats.Player[row] in player_ready:\n#    color = colors[player_data.loc[player_data.name == year_stats.loc[row].Player].position.values[0]]\n#    plt.scatter(year_stats.loc[row].height.item(),year_stats.loc[row].weight.item(),c=color)\n        \n#custom_lines = [plt.scatter(0,0, color='Blue'),plt.scatter(0,0, color='Green'),plt.scatter(0,0, color='Red')]\n#plt.legend(custom_lines,['C','G','P'])\n\n#year_stats = year_stats.drop(year_stats[~year_stats.Player.isin(player_data.name)].index)\n#year_stats = year_stats.reset_index()\n#year_stats\n###############################################################################################","648a3f3d":"#Plotting\nplt.scatter(year_stats.height,year_stats.weight,c=year_stats.Player.apply(lambda s: colors[player_data.loc[player_data.name == s].position.values[0]]))\nplt.xlabel('height (cm)')\nplt.ylabel('weight (kg)')\n\nred_patch = mpatches.Patch(color='red', label='Centers')\nblue_patch = mpatches.Patch(color='blue', label='Forwards')\ngreen_patch = mpatches.Patch(color='green', label='Guards')\nplt.legend(handles=[red_patch, blue_patch, green_patch])","ab9934e7":"#Lets try to include season stats. Maybe WS could be a good metric. We average the WS of each player\nmetric = '2PA'\nplayer_average = season_stats.groupby('Player')[metric].mean()\nplayer_average_df = pd.DataFrame(player_average)\nyear_stats\nyear_stats_WS = year_stats.merge(player_average_df,left_on='Player',right_on='Player')\nmin(year_stats_WS[metric])\nyear_stats.WS = year_stats_WS[metric] + 5","3fd58c4a":"#Plotting\nplt.scatter(year_stats_WS.height,year_stats_WS.weight,c=year_stats_WS.Player.apply(lambda s: colors[player_data.loc[player_data.name == s].position.values[0]]),s=0.2*year_stats_WS[metric])\nplt.xlabel('height (cm)')\nplt.ylabel('weight (kg)')\n\nred_patch = mpatches.Patch(color='red', label='Centers')\nblue_patch = mpatches.Patch(color='blue', label='Forwards')\ngreen_patch = mpatches.Patch(color='green', label='Guards')\nplt.legend(handles=[red_patch, blue_patch, green_patch])","3494b202":"#Now for the final lets include a scroll for the year\nimport matplotlib.animation as animation\nfrom matplotlib.widgets import Slider\n\nyear = 1950\nyear_players = season_stats.loc[season_stats.Year==year].Player.unique()\nyear_stats = players.loc[players.Player.isin(year_players)]\n\npositions = player_data.position.unique()\ncolors = dict(zip(positions,['Blue','Red','Green']))\n\nplayer_ready = player_data['name'].unique()\n\n#Sometimes players does not have a player from year_stats. IDK why cause the overview doesn't go over this\nyear_stats = year_stats.drop(year_stats[~year_stats.Player.isin(player_data.name)].index)\nyear_stats = year_stats.reset_index()\nyear_stats\n\n#Size : Proportional to points**2\nmetric = 'PTS'\nplayer_average = season_stats.groupby('Player')[metric].mean()\nplayer_average_df = pd.DataFrame(player_average)\nyear_stats\nyear_stats_WS = year_stats.merge(player_average_df,left_on='Player',right_on='Player')\nmin(year_stats_WS[metric])\nyear_stats.WS = year_stats_WS[metric] + 5\n\n#Plotting\nplt.figure(figsize=(20,20))\nplot = plt.scatter(year_stats_WS.height,year_stats_WS.weight,c=year_stats_WS.Player.apply(lambda s: colors[player_data.loc[player_data.name == s].position.values[0]]),s=0.001*(year_stats_WS[metric])**2)\nplt.xlabel('height (cm)')\nplt.ylabel('weight (kg)')\n\nred_patch = mpatches.Patch(color='red', label='Centers')\nblue_patch = mpatches.Patch(color='blue', label='Forwards')\ngreen_patch = mpatches.Patch(color='green', label='Guards')\nplt.legend(handles=[red_patch, blue_patch, green_patch])\n\n#Add a slider for the year\n\n#season_stats.head()","a353e04e":"i=0 #For the subplots\nplt.figure(figsize=(20,20))\n\nfor year in range(1950,2016,4):\n\n    #year = 1950\n    year_players = season_stats.loc[season_stats.Year==year].Player.unique()\n    year_stats = players.loc[players.Player.isin(year_players)]\n\n    positions = player_data.position.unique()\n    colors = dict(zip(positions,['Blue','Red','Green']))\n\n    player_ready = player_data['name'].unique()\n\n    #Sometimes players does not have a player from year_stats. IDK why cause the overview doesn't go over this\n    year_stats = year_stats.drop(year_stats[~year_stats.Player.isin(player_data.name)].index)\n    year_stats = year_stats.reset_index()\n    year_stats\n\n    #Size : Proportional to points**2\n    metric = 'PTS'\n    player_average = season_stats.groupby('Player')[metric].mean()\n    player_average_df = pd.DataFrame(player_average)\n    year_stats\n    year_stats_WS = year_stats.merge(player_average_df,left_on='Player',right_on='Player')\n    min(year_stats_WS[metric])\n    year_stats.WS = year_stats_WS[metric] + 5\n\n    #Plotting\n    #plt.figure(figsize=(20,20))\n    i = i + 1\n    plt.subplot(4,5,i)\n    plot = plt.scatter(year_stats_WS.height,year_stats_WS.weight,c=year_stats_WS.Player.apply(lambda s: colors[player_data.loc[player_data.name == s].position.values[0]]),s=0.0001*(year_stats_WS[metric])**2)\n    plt.xlabel('height (cm)')\n    plt.ylabel('weight (kg)')\n    plt.ylim((70,130))\n    plt.xlim((170,220))\n    plt.title(year)\n\n    red_patch = mpatches.Patch(color='red', label='Centers')\n    blue_patch = mpatches.Patch(color='blue', label='Forwards')\n    green_patch = mpatches.Patch(color='green', label='Guards')\n    plt.legend(handles=[red_patch, blue_patch, green_patch])\n","cada0665":"### Compare complete number of each stat","91eb5875":"### Importance of centers that can shoot threes","a333a5e9":"Right of the reference median line there seems to be much more centers that can shoot 3 points.","632298f5":"# How has the nature of the NBA changed?","219f6cb3":"From the median plot, from **2012-2017 just recently the number of players shooting 3s have gone so much higher whereas 2PA have been going down.**","286224bb":"### Three Points","968bb191":"**It seems like as much of 10% of centers with a WS higher than the median WS are shooters with a 3PA while for less than the median it is 1%.  While it may still be rare for center shooters and not completely necessary, it seems like a center that can shoot could at much value to a team.**","025520f5":"Every single stat is going up by a lot.  Lets first look at the scoring. 2PA seems to be plateuing while 3PA seems to be going up linearly.","fe51e42a":"## NBA as a whole","982ec365":"Lets look at the past 2 years at how WS correlates with 3PA for centers","0799efae":"**Conclusion: There has been an increasing number of threes in the past few years. PG are obvious but it also seems somewhat beneficial although not necessary for centers to also have the capability of shooting threes.**","905cef3e":"**First of all the fact that the total points have been rising or at least staying about the same while the median points have been going down suggests that there are more superpower players scoring points.\nSecond I found that the median number of threes for centers have been consistently small while the sum has been going up. Does this mean the winning teams usually have centers that can shoot threes?**","5f5a8508":"It is interesting to note that Lebron isn't taking more shots.\n**His field goal percentage is going up because he is taking smarter shots and his attempts are going down.**","96497464":"**This seems to confirm that basketball is becoming a guard dominated game.**","489b096f":"## Side Track: Lebron James","d4a54f99":"# Part 2: Python Practice with Height and Weight","a86e277c":"## Importing Data"}}