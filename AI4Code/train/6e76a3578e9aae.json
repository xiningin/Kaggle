{"cell_type":{"f6a6b4b5":"code","435c0055":"code","dd6f4259":"code","9e9b9cc1":"code","5f081c65":"code","5d68e413":"code","3bac94d0":"code","17d0785e":"code","f5834798":"code","e5123b8e":"code","4b988559":"code","601e2567":"code","8aafbb1a":"code","6f688866":"code","25810cae":"code","735425b6":"code","600ee565":"code","7aa5ee05":"code","f3305cc9":"code","d54a65a1":"code","bcc0ac18":"code","9183b600":"code","81962999":"code","8d9891a9":"code","098eda5f":"code","cddbcb18":"code","b53466db":"code","62d66645":"code","d49def16":"code","74784256":"code","cc040021":"code","1a1724e1":"code","3f21fc5f":"code","69161d05":"code","88ac3ffc":"code","f7b13906":"code","04891199":"code","c29d014a":"code","c5c8c472":"code","3c9524ed":"code","5e449e64":"code","2120999c":"code","f2478e12":"code","9acbd5e4":"code","f852b984":"code","bd7c860b":"code","eec86d8b":"code","5eba50ab":"code","1947bfcb":"code","b859cdde":"code","d2f33217":"code","0932648e":"code","cb6ddac5":"code","fe52647e":"code","cb00d7cb":"code","6cf29523":"code","1eefaf78":"code","b8758cc3":"code","f994f647":"code","2a315e53":"code","6cf49512":"code","bde826a3":"code","06cd5107":"code","315b1dc1":"code","d44b2066":"code","741200d6":"code","fc6b5484":"code","fc929bf8":"code","e9f4df8b":"code","321ee189":"code","23788d52":"code","5362e665":"code","8a89420b":"code","f12fcd3c":"code","f891fd90":"markdown","827e2db8":"markdown","a61b37b5":"markdown"},"source":{"f6a6b4b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","435c0055":"import pandas as pd\nimport pandas_profiling\nimport numpy as np\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestRegressor \nfrom sklearn import metrics\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom collections import Counter\nimport datetime\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\nimport re\nimport math\nimport copy\nfrom IPython.display import display\npd.options.mode.chained_assignment = None\nimport random\nfrom datetime import datetime, timedelta\nimport requests\nfrom pandas_profiling import ProfileReport\n#\u0432\u044b\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u043f\u0440\u0438\u0435\u043c\u043b\u0438\u043c\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432.\nfrom sklearn.model_selection import train_test_split\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","dd6f4259":"RANDOM_SEED = 42","9e9b9cc1":"#\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0435\u0433\u0434\u0430 RANDOM_SEED,\u0447\u0442\u043e\u0431\u044b \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0431\u044b\u043b\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u0434.\n!pip freeze > requirements.txt","5f081c65":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","5d68e413":"df_train.info()\n","3bac94d0":"df_train.head(5)","17d0785e":"sample_submission.head(5)","f5834798":"sample_submission.info()","e5123b8e":"# P.S:\u0434\u043b\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442.\ndf_train['sample'] = 1 # \u043e\u0442\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0440\u0435\u0439\u043d.\ndf_test['sample'] = 0 # \u043e\u0442\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0435\u0441\u0442.\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Rating,\u043d\u0430 \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0435\u0433\u043e \u043d\u0443\u043b\u0451\u043c.\n\ndf = df_test.append(df_train, sort=False).reset_index(drop=True)","4b988559":"df.info()","601e2567":"df.sample(5)","8aafbb1a":"df.Reviews[1]","6f688866":"df.head(2)","25810cae":"#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432.\ndf.columns = df.columns.str.lower()\ndf.columns = ['restaurant_id', 'city', 'cuisine', 'ranking',\n              'price', 'reviews_num', 'reviews', 'url_tag', 'id_tag', 'sample', 'rating']","735425b6":"df['reviews_num_isNAN'] = pd.isna(df['reviews_num']).astype('uint8')","600ee565":"sns.boxplot(df['reviews_num'])","7aa5ee05":"df.reviews_num = df.reviews_num.fillna(df.reviews_num.mode()[0])","f3305cc9":"df['cuisine_isna'] = pd.isna(df['cuisine']).astype('uint8')","d54a65a1":"df.city.unique()","bcc0ac18":"df.city = df.city.str.replace('Oporto', 'Porto')","9183b600":"pop = {'Paris':2125246, 'Stockholm':792593, 'London':7172091, 'Berlin':3399739, 'Munich':1259677, 'Porto':242883,\n       'Milan':1256211, 'Bratislava':426091, 'Vienna':1664146, 'Rome':2546804, 'Barcelona':1605602, 'Madrid':3213271,\n       'Dublin':505739, 'Brussels':1006749, 'Zurich':100000, 'Warsaw':1760800, 'Budapest':1727300, 'Copenhagen':1145804,\n       'Amsterdam':743104, 'Lyon':445452, 'Hamburg':1743627, 'Lisbon':508209, 'Prague':1285995, 'Oslo':505000,\n       'Helsinki':565186, 'Edinburgh':448624, 'Geneva':100001, 'Ljubljana':266845, 'Athens':720979,\n       'Luxembourg':100002, 'Krakow':789590}\n\ndf['population'] = df.city.apply(lambda x: pop.get(x))\ndf.population = df.population.astype('int64')","81962999":"pop = {'Paris':2125246, 'Stockholm':792593, 'London':7172091, 'Berlin':3399739, 'Munich':1259677, 'Porto':242883,\n       'Milan':1256211, 'Bratislava':426091, 'Vienna':1664146, 'Rome':2546804, 'Barcelona':1605602, 'Madrid':3213271,\n       'Dublin':505739, 'Brussels':1006749, 'Zurich':100000, 'Warsaw':1760800, 'Budapest':1727300, 'Copenhagen':1145804,\n       'Amsterdam':743104, 'Lyon':445452, 'Hamburg':1743627, 'Lisbon':508209, 'Prague':1285995, 'Oslo':505000,\n       'Helsinki':565186, 'Edinburgh':448624, 'Geneva':100001, 'Ljubljana':266845, 'Athens':720979,\n       'Luxembourg':100002, 'Krakow':789590}\n\ndf['population'] = df.city.apply(lambda x: pop.get(x))\ndf.population = df.population.astype('int64')","8d9891a9":"bc = Counter(df.city).most_common(8)\nbiggest_cities = []\nfor city in bc:\n    city = city[0]\n    biggest_cities.append(city)\n\ndf.city = df.city.apply(lambda x: x if x in biggest_cities else 'Other')\ndf = pd.get_dummies(df, dummy_na=False, columns=['city'])","098eda5f":"df.head (5)","cddbcb18":"df.sample (5)","b53466db":"df['price'].value_counts()","62d66645":"df.price = df.price.replace({'$':1, '$$ - $$$': 2, '$$$$': 3})\ndf.price = df.price.fillna(df.price.mean()) \ndf.price = df.price.astype('int64')","d49def16":"df.cuisine.head(5)","74784256":"def cuisine_clean(str_val):\n    if pd.isnull(str_val):\n        return str_val\n    str_val = str_val.strip('[]')\n    str_val = str_val.replace(\"\\'\", '')\n    str_val = str_val.split(', ')\n    return str_val\n\ndf['cuisine'] = df.cuisine.apply(cuisine_clean)","cc040021":"df.cuisine.head(5)","1a1724e1":"rc = df.cuisine.dropna()\ncsl = []\nfor row in rc:\n    for i in row:\n        csl.append(i)\nsc = Counter(csl).most_common(40)\n\ncommon_cuisine = []\ncommon_cuisine.append('other')\nfor item in sc:\n    item = item[0]\n    common_cuisine.append(item)","3f21fc5f":"df.cuisine = df.cuisine.fillna(random.choice(common_cuisine))","69161d05":"def set_common_styles(style):\n    row = set()\n    for i in style:\n        if i in common_cuisine:\n            row.add(i)\n        else:\n            row.add('other')\n    return row","88ac3ffc":"df.cuisine = df.cuisine.apply(set_common_styles)","f7b13906":"df.cuisine.head(10)","04891199":"def find_item(cell):\n    if item in cell:\n        return 1\n    return 0\n\nfor item in common_cuisine:\n    df[item] = df.cuisine.apply(find_item)\ndf.columns = df.columns.str.lower()\ndf.cuisine = df.cuisine.apply(len)","c29d014a":"df.info()","c5c8c472":"df.reviews = df.reviews.fillna('[[], []]')","3c9524ed":"df['reviews_date'] = df.reviews.str.findall('\\d{2}\/\\d{2}\/\\d{4}')","5e449e64":"df.reviews_date.head(5)","2120999c":"def to_time(x):\n    datetime_list = []\n    if len(x) == 3:\n        x = x[1:]\n    if type(x) != list:\n        pass\n    for date in x:\n        nl = datetime.strptime(date, '%m\/%d\/%Y')\n        datetime_list.append(nl) \n    return datetime_list","f2478e12":"df.reviews_date = df.reviews_date.apply(to_time)","9acbd5e4":"df.reviews_date.head(5)","f852b984":"df['reviews_delta'] = df.reviews_date.apply(lambda x: x[0] - x[1] if len(x) == 2 else np.nan)\ndf.reviews_delta = df.reviews_delta.apply(lambda x: int(x.days) if not pd.isna(x) else x)\n#df['reviews_delta_isNAN'] = pd.isna(df['reviews_delta']).astype('uint8')\ndf.reviews_delta = df.reviews_delta.fillna(df.reviews_delta.mean())","bd7c860b":"df.info()","eec86d8b":"plt.rcParams['figure.figsize'] = (10,7)\ndf_train['Ranking'].hist(bins=100)","5eba50ab":"df_train['City'].value_counts(ascending=True).plot(kind='barh')","1947bfcb":"df_train['Ranking'][df_train['City'] =='London'].hist(bins=100)","b859cdde":"for x in (df_train['City'].value_counts())[0:10].index:\n    df_train['Ranking'][df_train['City'] == x].hist(bins=100)\nplt.show()","d2f33217":"mms = df[['ranking', 'population']]\nmin_max_Scaler = MinMaxScaler()\nresult = min_max_Scaler.fit_transform(mms)\nresult = pd.DataFrame(result)\nresult.columns = ['ranking_norm', 'population_norm']\ndf = pd.concat([df, result], axis=1)","0932648e":"df_train['Rating'].value_counts(ascending=True).plot(kind='barh')","cb6ddac5":"df_train['Ranking'][df_train['Rating'] == 5].hist(bins=100)","fe52647e":"df_train['Ranking'][df_train['Rating'] < 4].hist(bins=100)","cb00d7cb":"plt.rcParams['figure.figsize'] = (15,10)\nsns.heatmap(df.drop(['sample'], axis=1).corr(),)","6cf29523":"train_data = df.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.rating.values\nX = train_data.drop(['restaurant_id', 'rating', 'id_tag', 'url_tag', 'reviews', 'reviews_date','price', 'cuisine'], axis=1)","1eefaf78":"def StandardScaler_func(col):\n    scaler = StandardScaler()\n    scaler.fit(df[col])\n    return scaler.transform(df[col])\nfor i in list(df.columns):\n    df[i] = StandardScaler(i)\n    if len(df[df[i].isna()]) < len(df):\n        df[i] = df[i].fillna(0)","b8758cc3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","f994f647":"from sklearn.ensemble import RandomForestRegressor \nfrom sklearn import metrics ","2a315e53":"model = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","6cf49512":"model.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)","bde826a3":"def classic_round(d_num):\n    return int(d_num + (0.5 if d_num > 0 else -0.5))\n\ndef my_round(d_pred):\n    result = classic_round(d_pred*2)\/2\n    if result <=5:\n        return result\n    else:\n        return 5\n    \nmy_vec_round = np.vectorize(my_round)","06cd5107":"y_pred = my_vec_round(y_pred)","315b1dc1":"plt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","d44b2066":"print('MAE:', metrics.mean_absolute_error(y_test, y_pred))","741200d6":"test_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","fc6b5484":"test_data.sample(10)","fc929bf8":"test_data = test_data.drop(['restaurant_id', 'rating', 'id_tag', 'url_tag', 'reviews', 'reviews_date','price', 'cuisine'], axis=1)","e9f4df8b":"test_data","321ee189":"sample_submission","23788d52":"model.fit(X, y)","5362e665":"predict_submission = model.predict(test_data)","8a89420b":"predict_submission = my_vec_round(predict_submission)","f12fcd3c":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","f891fd90":"**\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NaN**","827e2db8":"**DATA**","a61b37b5":"**\u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u041e\u0447\u0438\u0441\u0442\u043a\u0435 \u0414\u0430\u0442\u0430\u0441\u0435\u0442\u0430.**"}}