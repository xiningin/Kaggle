{"cell_type":{"8144af81":"code","6f9de773":"code","028aec71":"code","af44350f":"code","d84f6b00":"code","5377ee0a":"code","675f4530":"code","a1d0a907":"code","becb240b":"code","19637d2c":"code","5c2f2380":"code","a7573110":"code","521a781e":"code","34d4b30d":"code","0003ca90":"code","8c86ab02":"code","c971a50b":"code","542a0743":"code","8d90a6b4":"code","e465e047":"code","b3bb4ebb":"code","7a947796":"code","6d7bf9f9":"code","2908fd52":"code","b7ec322c":"code","73177b33":"code","744e44e1":"code","79f82021":"code","ee5aa989":"code","587d0810":"code","9dedab6a":"code","207a3d00":"code","80dc0b81":"code","30b62fde":"code","538161ad":"code","690a8c10":"code","cbadbdec":"code","bc3e94ab":"code","13ac8077":"code","0aab7564":"code","0b8bfeab":"code","7a353a10":"code","1074f7db":"code","352c22c2":"code","bec2bc5e":"code","d1ffabce":"code","38ab2746":"code","5a08eca6":"code","b40c3673":"code","ab83ba1d":"code","5aa151f5":"code","6e8723cf":"code","10732495":"markdown","30073d93":"markdown","ea124558":"markdown","e2d39c28":"markdown","2db84066":"markdown","c2d08994":"markdown","714108c9":"markdown","ad45953a":"markdown","235caab2":"markdown","7a261d70":"markdown","53f63c32":"markdown","19bae3fb":"markdown","bbc21ea8":"markdown","f927b174":"markdown","33292fd5":"markdown","bc0b8520":"markdown","9b9f3410":"markdown","9c70d75e":"markdown","5f00336f":"markdown","4c57b755":"markdown","157a93d3":"markdown","8ca6c585":"markdown","805cc5df":"markdown","3db5ffd1":"markdown","24ffd01d":"markdown","c71418eb":"markdown","a6163ed5":"markdown","bb018f18":"markdown","7d4e4635":"markdown","42a095a4":"markdown","e0125996":"markdown","3393e1d5":"markdown","4e3cd80f":"markdown","92f32522":"markdown"},"source":{"8144af81":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6f9de773":"data = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")","028aec71":"data.columns","af44350f":"data.head()","d84f6b00":"data[\"Label\"] = data.Outcome.values\ndata.drop(labels=[\"Outcome\"], axis=1, inplace=True)","5377ee0a":"data.head()","675f4530":"len(data)","a1d0a907":"data.describe()","becb240b":"data.info()","19637d2c":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(data[variable], bins=40)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequancies\")\n    plt.title(f\"{variable} distrubition with hist\")","5c2f2380":"numeric_variables = [\"Pregnancies\",\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\",\"DiabetesPedigreeFunction\",\"Age\"]\nfor variable in numeric_variables:\n    plot_hist(variable)","a7573110":"def detect_outliers(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c], 25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c], 75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier Step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)]. index\n        # store indices\n        outlier_indices.extend(outlier_list_col)\n    \n    # print() outlier_indices\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list((i for i, v in outlier_indices.items() if v > 2 ))\n    \n    return multiple_outliers","521a781e":"data.iloc[detect_outliers(data, [\"Pregnancies\",\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\",\"DiabetesPedigreeFunction\",\"Age\"])]","34d4b30d":"# drop the outlier variables\n#data.drop(detect_outliers(data, [\"Pregnancies\",\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\",\"DiabetesPedigreeFunction\",\"Age\"], axis=0)).reset_index(drop=True)","0003ca90":"data.columns[data.isnull().any()]","8c86ab02":"data.head()","c971a50b":"data[data==0].count()","542a0743":"data[data[\"Glucose\"] == 0]","8d90a6b4":"plt.scatter(x=data[\"Age\"], y=data[\"Glucose\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Glucose\")\nplt.title(\"Age - Glucose Distribution\")\nplt.show()","e465e047":"plt.scatter(x=data[\"BloodPressure\"], y=data[\"Glucose\"])\nplt.xlabel(\"BloodPressure\")\nplt.ylabel(\"Glucose\")\nplt.title(\"BloodPressure - Glucose Distribution\")\nplt.show()","b3bb4ebb":"mean = int(np.mean(data[data[\"Glucose\"]!=0][\"Glucose\"]))\nprint(\"Mean :\",mean)\ndata[\"Glucose\"] = [i if i != 0 else mean for i in data[\"Glucose\"]]","7a947796":"data[data[\"Glucose\"] == 0]","6d7bf9f9":"# Fill BloodPressure\ndata[data[\"BloodPressure\"] == 0][\"BloodPressure\"].count()","2908fd52":"mean = int(np.mean(data[data[\"BloodPressure\"] != 0][\"BloodPressure\"]))\nprint(\"Mean :\",mean)\ndata[\"BloodPressure\"] = [i if i != 0 else mean for i in data[\"BloodPressure\"]]","b7ec322c":"data[data[\"BloodPressure\"] == 0][\"BloodPressure\"].count()","73177b33":"# Fill SkinThickness\ndata[data[\"SkinThickness\"] == 0][\"SkinThickness\"].count()","744e44e1":"mean = int(np.mean(data[data[\"SkinThickness\"] != 0][\"SkinThickness\"]))\nprint(\"Mean :\",mean)\ndata[\"SkinThickness\"] = [i if i != 0 else mean for i in data[\"SkinThickness\"]]","79f82021":"data[data[\"SkinThickness\"] == 0][\"SkinThickness\"].count()","ee5aa989":"# Fill Insulin\ndata[data[\"Insulin\"] == 0][\"Insulin\"].count()","587d0810":"mean = int(np.mean(data[data[\"Insulin\"] != 0][\"Insulin\"]))\nprint(\"Mean :\",mean)\ndata[\"Insulin\"] = [i if i != 0 else mean for i in data[\"Insulin\"]]","9dedab6a":"data[data[\"Insulin\"] == 0][\"Insulin\"].count()","207a3d00":"# Fill BMI\ndata[data[\"BMI\"] == 0][\"BMI\"].count()","80dc0b81":"mean = int(np.mean(data[data[\"BMI\"] != 0][\"BMI\"]))\nprint(\"Mean :\",mean)\ndata[\"BMI\"] = [i if i != 0 else mean for i in data[\"BMI\"]]","30b62fde":"data[data[\"BMI\"] == 0][\"BMI\"].count()","538161ad":"list1 = [\"Pregnancies\", \"Glucose\", \"BloodPressure\", \"SkinThickness\", \"Insulin\", \"BMI\", \"Label\"]\nsns.heatmap(data[list1].corr(), annot = True, fmt=\".2f\")\nplt.show()","690a8c10":"# 0 = Non Diabetes , 1 = Diabetes\nzero_mean = data[data[\"Label\"] == 0][\"Glucose\"].mean()\none_mean = data[data[\"Label\"] == 1][\"Glucose\"].mean()\nzero_count = data[data[\"Label\"]==0][\"Label\"].count()\none_count = data[data[\"Label\"]==1][\"Label\"].count()\ng = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\ng.set_ylabel(\"Glucose Means\")\ng.legend()\nplt.tight_layout()\nplt.show()","cbadbdec":"# 0 = Non Diabetes , 1 = Diabetes\nzero_mean = data[data[\"Label\"] == 0][\"Insulin\"].mean()\none_mean = data[data[\"Label\"] == 1][\"Insulin\"].mean()\nzero_count = data[data[\"Label\"]==0][\"Label\"].count()\none_count = data[data[\"Label\"]==1][\"Label\"].count()\ng = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\ng.set_ylabel(\"Insulin Means\")\ng.legend()\nplt.tight_layout()\nplt.show()","bc3e94ab":"# 0 = Non Diabetes , 1 = Diabetes\nzero_mean = data[data[\"Label\"] == 0][\"BMI\"].mean()\none_mean = data[data[\"Label\"] == 1][\"BMI\"].mean()\nzero_count = data[data[\"Label\"]==0][\"Label\"].count()\none_count = data[data[\"Label\"]==1][\"Label\"].count()\ng = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\ng.set_ylabel(\"BMI Means\")\ng.legend()\nplt.tight_layout()\nplt.show()","13ac8077":"# 0 = Non Diabetes , 1 = Diabetes\nzero_mean = data[data[\"Label\"] == 0][\"BloodPressure\"].mean()\none_mean = data[data[\"Label\"] == 1][\"BloodPressure\"].mean()\nzero_count = data[data[\"Label\"]==0][\"Label\"].count()\none_count = data[data[\"Label\"]==1][\"Label\"].count()\ng = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\ng.set_ylabel(\"BloodPressure Means\")\ng.legend()\nplt.tight_layout()\nplt.show()","0aab7564":"# 0 = Non Diabetes , 1 = Diabetes\nzero_mean = data[data[\"Label\"] == 0][\"Pregnancies\"].mean()\none_mean = data[data[\"Label\"] == 1][\"Pregnancies\"].mean()\nzero_count = data[data[\"Label\"]==0][\"Label\"].count()\none_count = data[data[\"Label\"]==1][\"Label\"].count()\ng = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\ng.set_ylabel(\"Pregnancies Means\")\ng.legend()\nplt.tight_layout()\nplt.show()","0b8bfeab":"# 0 = Non Diabetes , 1 = Diabetes\nzero_mean = data[data[\"Label\"] == 0][\"SkinThickness\"].mean()\none_mean = data[data[\"Label\"] == 1][\"SkinThickness\"].mean()\nzero_count = data[data[\"Label\"]==0][\"Label\"].count()\none_count = data[data[\"Label\"]==1][\"Label\"].count()\ng = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\ng.set_ylabel(\"SkinThickness Means\")\ng.legend()\nplt.tight_layout()\nplt.show()","7a353a10":"# 0 = Non Diabetes , 1 = Diabetes\nzero_mean = data[data[\"Label\"] == 0][\"Age\"].mean()\none_mean = data[data[\"Label\"] == 1][\"Age\"].mean()\nzero_count = data[data[\"Label\"]==0][\"Label\"].count()\none_count = data[data[\"Label\"]==1][\"Label\"].count()\ng = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\ng.set_ylabel(\"Age Means\")\ng.legend()\nplt.tight_layout()\nplt.show()","1074f7db":"# 0 = Non Diabetes , 1 = Diabetes\nzero_mean = data[data[\"Label\"] == 0][\"DiabetesPedigreeFunction\"].mean()\none_mean = data[data[\"Label\"] == 1][\"DiabetesPedigreeFunction\"].mean()\nzero_count = data[data[\"Label\"]==0][\"Label\"].count()\none_count = data[data[\"Label\"]==1][\"Label\"].count()\ng = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\ng.set_ylabel(\"DiabetesPedigreeFunction Means\")\ng.legend()\nplt.tight_layout()\nplt.show()","352c22c2":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score","bec2bc5e":"# We will use this test data after select the model, parameters etc.\n\ntest = data.iloc[700:]\ntest_label= test[\"Label\"]\ntest.drop(labels=[\"Label\"], axis=1, inplace=True)","d1ffabce":"train_df = data.iloc[:700]\nX_train = train_df.drop(labels=[\"Label\"], axis=1)\nY_train = train_df[\"Label\"]\n\nx_train, x_test, y_train, y_test = train_test_split(X_train, Y_train, test_size=0.2, random_state=42)\nprint(f\"x_train size: {len(x_train)}\")\nprint(f\"y_train size: {len(y_train)}\")\nprint(f\"x_test size: {len(x_test)}\")\nprint(f\"y_test size: {len(y_test)}\")","38ab2746":"lr = LogisticRegression()\nlr.fit(x_train,y_train)\nacc_lr_train = round(lr.score(x_train, y_train)*100, 2)\nacc_lr_test = round(lr.score(x_test, y_test)*100, 2)\nprint(\"Logistic Regression Train Accuracy: %\", acc_lr_train)\nprint(\"Logistic Regression Test Accuracy: %\", acc_lr_test)","5a08eca6":"random_state=42\nclassifier=[DecisionTreeClassifier(random_state=random_state),\n           SVC(random_state=random_state),\n           RandomForestClassifier(random_state=random_state),\n           LogisticRegression(random_state=random_state),\n           KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\":range(10,500,20),\n           \"max_depth\":range(1,20,2)}\n\nsvc_param_grid = {\"kernel\":[\"rbf\"],\n            \"gamma\":[0.001, 0.01, 0.1, 1],\n            \"C\":[1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\":[1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\":[\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\":np.linspace(1,19,10, dtype=int).tolist(),\n                 \"weights\":[\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\n\nclassifier_params = [dt_param_grid, \n                    svc_param_grid, \n                    rf_param_grid, \n                    logreg_param_grid, \n                    knn_param_grid]","b40c3673":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid = classifier_params[i], cv=StratifiedKFold(n_splits=10), scoring=\"accuracy\", n_jobs=-1, verbose=1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","ab83ba1d":"print(cv_result)\ncv_results = pd.DataFrame({\"Cross Validaiton Means\":cv_result, \"Models\":[\"DecisionTree\",\"SVM\",\"RandomForest\",\"LogisticRegression\",\"KNN\"]})\ng = sns.barplot(x=\"Cross Validaiton Means\", y = \"Models\", data = cv_results)\ng.set_xlabel(\"Model Accuracy\")\ng.set_title(\"Cross Validation Score\")\nplt.show()","5aa151f5":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rf\",best_estimators[2]),\n                                        (\"logreg\",best_estimators[3])],\n                                        voting=\"soft\",\n                                        n_jobs=-1)\nvotingC = votingC.fit(x_train,y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","6e8723cf":"prediction = votingC.predict(test)\nprint(accuracy_score(prediction, test_label))","10732495":"Diabetes Patient's BMI Values more than Non Diabetes Patient's","30073d93":"<a id=\"16\"><\/a><br>\n# Modelling","ea124558":"Diabetes Patient's Insulin Levels more than Non Diabetes Patient's","e2d39c28":"<a id=\"9\"><\/a><br>\n## Insulin Mean -- Label","2db84066":"<a id=\"20\"><\/a><br>\n## Ensemble Modeling","c2d08994":"<a id=\"7\"><\/a><br>\n# Visualization","714108c9":"<a id=\"2\"><\/a><br>\n## Variable Describe\n\n1. Pregnancies: Number of times pregnant\n1. Glucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n1. BloodPressure: Diastolic Blood Pressure (mm Hg)\n1. SkinThickness: Triceps skin fold thickness (mm)\n1. Insulin: 2-Hour serum insulin (mu U\/ml)\n1. BMI: Body mass index (weight in kg\/(height in m)^2)\n1. DiabetesPedigreeFunction: Diabetes pedigree function\n1. Age: Age (years)\n1. Outcome: Class variable (0 or 1) 268 of 768 are 1, the others are 0","ad45953a":"<a id=\"10\"><\/a><br>\n## BMI Mean -- Label","235caab2":"<a id=\"13\"><\/a><br>\n## SkinThickness Mean -- Label","7a261d70":"# Introduction\nThis data set is include woman patients health features who is diabetes or not\n\nContent:\n1. [Load and Check Data](#1)\n1. [Numeric Variable](#2)\n1. [Outlier Detection](#3)\n1. [Missing Value](#4)\n    * [Find Missing Value](#5)\n    * [Fill Missing Value](#6)\n1. [Visualization](#7)\n    * [Glucose Mean -- Label](#8)\n    * [Insulin Mean -- Label](#9)\n    * [BMI Mean -- Label](#10)\n    * [BloodPressure Mean -- Label](#11)\n    * [Pregnancies Mean -- Label](#12)\n    * [SkinThickness Mean -- Label](#13)\n    * [Age Mean -- Label](#14)\n    * [DiabetesPedigreeFunction Mean -- Label](#15)\n1. [Modelling](#16)\n    * [Train - Test Split](#17)\n    * [Simple Logistid Regression](#18)\n    * [Hyperparameter Tuning -- Griid Search -- Cross Validation](#19)\n    * [Ensemble Modeling](#20)\n    * [Predict Test Data](#21)","53f63c32":"<a id=\"17\"><\/a><br>\n## Train - Test Split","19bae3fb":"<a id=\"5\"><\/a><br>\n## Find Missing Value\n\n* Missing value is 0 on this Database","bbc21ea8":"<a id=\"8\"><\/a><br>\n## Glucose Mean -- Label","f927b174":"<a id=\"4\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","33292fd5":"<a id=\"6\"><\/a><br>\n## Fill Missing Value\n\n* Pregnancies variable include 0 value but its not missing value this mean she have never been pregnant so we don't change this\n* Glucose, BloodPressure, SkinThickness, Insulin, BMI has include missing values. Lets get fill this values","bc0b8520":"Glucose and BMI features seems to have corelation with Label feature (0.49, 0.31)","9b9f3410":"<a id=\"1\"><\/a><br>\n## Load and Check Data","9c70d75e":"<a id=\"14\"><\/a><br>\n## Age Mean -- Label","5f00336f":"<a id=\"21\"><\/a><br>\n## Predict Test Data","4c57b755":"<a id=\"15\"><\/a><br>\n## DiabetesPedigreeFunction Mean -- Label","157a93d3":"* float64 (2): BMI, D\u0131abetesPedigreeFunction\n* int64 (7): Pregnancies, Glucosei BloodPressure, SkinThickness, Insulin, Age, Outcome","8ca6c585":"* Diabetes Patient's glucose level more than not Diabetes Patient's","805cc5df":"<a id=\"19\"><\/a><br>\n## Hyperparameter Tuning -- Griid Search -- Cross Validation\n\nWe will compare 5 ml classifier and evaluate mean accuacy of each of them by stratified cros validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","3db5ffd1":"* There is no double outlier varieble in database\n* We don't drop any varieble","24ffd01d":"* Outcome feature is represent patients diabetes results\n* Lets change this to Label","c71418eb":"<a id=\"2\"><\/a><br>\n# Numerical Variable\n* This data set has not include categorical variable so lets look short the numerical variables","a6163ed5":"<a id=\"11\"><\/a><br>\n## BloodPressure Mean -- Label","bb018f18":"Diabetes Patient's Insulin Levels little more than Non Diabetes Patient's","7d4e4635":"<a id=\"18\"><\/a><br>\n## Simple Logistid Regression","42a095a4":"<a id=\"12\"><\/a><br>\n## Pregnancies Mean -- Label","e0125996":"<a id=\"3\"><\/a><br>\n# Outlier Detection","3393e1d5":"Lower pregnancy average is good about Diabetes","4e3cd80f":"Old people are under risk for Diabetes more than younger people","92f32522":"There is 768 patients"}}