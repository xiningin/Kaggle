{"cell_type":{"569e2cfc":"code","8a66d113":"code","1cb1fa26":"code","c0c446cb":"code","65995a1b":"code","2bfa6731":"code","5ca6eb38":"code","6f95a5a9":"code","15e103f2":"code","c1794454":"code","cf4a857c":"code","b0e19900":"code","fc6e66c1":"code","16dc49ae":"code","7a200f54":"code","4e6bbf2c":"code","e0c4c22e":"code","615c2a83":"code","566dcd67":"code","48e93668":"code","28fee1b1":"code","5e0d1288":"code","c08c2351":"code","40afe7fe":"code","e22c9782":"code","80337a21":"code","5246326b":"code","fabf5472":"code","69d52335":"code","3db63e39":"code","b5e05bb1":"code","1188ed43":"code","5990250d":"code","df1d9c2a":"code","c23d83cd":"code","10c10a74":"code","d706ef23":"markdown","fa3293c4":"markdown","be9cc2d3":"markdown","1f3abe4c":"markdown","498ffa31":"markdown","7efaab78":"markdown","5af6b1ac":"markdown"},"source":{"569e2cfc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom keras import optimizers\nfrom keras.models import Sequential, Model \nfrom keras.utils import np_utils\nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense, BatchNormalization, Input\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\nfrom keras import backend as K\nfrom keras.utils import plot_model\n\nimport cv2    \n\nfrom sklearn.metrics import f1_score","8a66d113":"image_folder = '..\/input\/celeba-dataset\/img_align_celeba\/img_align_celeba\/'\ntrain_samples = 10000\nvalidation_samples = 2500\ntest_samples = 1000\nbatch_size  = 16\nepochs = 10\nheight = 218 \nwidth = 178","1cb1fa26":"if K.image_data_format() == 'channel_first':\n    input_shape = (3, height, width)\nelse:\n    input_shape = (height, width, 3)","c0c446cb":"df = pd.read_csv('..\/input\/celeba-dataset\/list_attr_celeba.csv', index_col=0)","65995a1b":"df.head()","2bfa6731":"df.shape","5ca6eb38":"df.columns","6f95a5a9":"df['Male'].unique()","15e103f2":"plt.figure(figsize = (10, 10))\nsns.countplot(y = 'Male', data =df)\nplt.title('Countplot of Male and Female')\nplt.xlabel('Count of persons')\nplt.ylabel('Male VS Female')","c1794454":"fig = plt.figure(figsize = (30, 15))\nplt.subplot(2,5,1)\nimage = cv2.imread(image_folder + '000004.jpg')\nplt.imshow(image, aspect=\"auto\")\nattr = df.loc['000004.jpg'.split('\/')[-1]][['Oval_Face','Male','Pointy_Nose']]\nplt.title(str(attr), fontsize = 20)\n\nplt.subplot(2,5,2)\nimage = cv2.imread(image_folder + '000017.jpg')\nplt.imshow(image, aspect=\"auto\")\nattr = df.loc['000017.jpg'.split('\/')[-1]][['Oval_Face','Male','Pointy_Nose']]\nplt.title(str(attr), fontsize = 20)\n\nplt.subplot(2,5,3)\nimage = cv2.imread(image_folder + '000014.jpg')\nplt.imshow(image, aspect=\"auto\")\nattr = df.loc['000014.jpg'.split('\/')[-1]][['Oval_Face','Male','Pointy_Nose']]\nplt.title(str(attr), fontsize = 20)\n\nplt.subplot(2,5,4)\nimage = cv2.imread(image_folder + '000225.jpg')\nplt.imshow(image, aspect=\"auto\")\nattr = df.loc['000225.jpg'.split('\/')[-1]][['Oval_Face','Male','Pointy_Nose']]\nplt.title(str(attr), fontsize = 20)\n\nplt.subplot(2,5,5)\nimage = cv2.imread(image_folder + '005287.jpg')\nplt.imshow(image, aspect=\"auto\")\nattr = df.loc['005287.jpg'.split('\/')[-1]][['Oval_Face','Male','Pointy_Nose']]\nplt.title(str(attr), fontsize = 20)\n\nplt.subplot(2,5,6)\nimage = cv2.imread(image_folder + '000150.jpg')\nplt.imshow(image, aspect=\"auto\")\nattr = df.loc['000004.jpg'.split('\/')[-1]][['Oval_Face','Male','Pointy_Nose']]\nplt.title(str(attr), fontsize = 20)\n\nplt.subplot(2,5,7)\nimage = cv2.imread(image_folder + '000999.jpg')\nplt.imshow(image, aspect=\"auto\")\nattr = df.loc['000017.jpg'.split('\/')[-1]][['Oval_Face','Male','Pointy_Nose']]\nplt.title(str(attr), fontsize = 20)\n\nplt.subplot(2,5,8)\nimage = cv2.imread(image_folder + '001014.jpg')\nplt.imshow(image, aspect=\"auto\")\nattr = df.loc['000014.jpg'.split('\/')[-1]][['Oval_Face','Male','Pointy_Nose']]\nplt.title(str(attr), fontsize = 20)\n\nplt.subplot(2,5,9)\nimage = cv2.imread(image_folder + '052225.jpg')\nplt.imshow(image, aspect=\"auto\")\nattr = df.loc['000225.jpg'.split('\/')[-1]][['Oval_Face','Male','Pointy_Nose']]\nplt.title(str(attr), fontsize = 20)\n\nplt.subplot(2,5,10)\nimage = cv2.imread(image_folder + '065877.jpg')\nplt.imshow(image, aspect=\"auto\")\nattr = df.loc['005287.jpg'.split('\/')[-1]][['Oval_Face','Male','Pointy_Nose']]\nplt.title(str(attr), fontsize = 20)\n\n\nplt.tight_layout()","cf4a857c":"# Reading partition file data\ndf_partition_data = pd.read_csv('..\/input\/celeba-dataset\/list_eval_partition.csv')\ndf_partition_data.head()","b0e19900":"df_partition_data['partition'].value_counts()","fc6e66c1":"df_partition_data.set_index('image_id', inplace=True)\ndf = df_partition_data.join(df['Male'], how='inner')","16dc49ae":"df.head()","7a200f54":"def load_image(file_name):\n    img = load_img(file_name)\n    X = img_to_array(img)\/255.\n    X = X.reshape((1,) + X.shape)\n\n    return X","4e6bbf2c":"def generate_df(partition, attribute, nsamples):\n    new_df = df[(df['partition'] == partition) & (df[attribute] == 1)].sample(int(nsamples\/2))\n    new_df = pd.concat([new_df, df[(df['partition'] == partition) & (df[attribute] == -1)].sample(int(nsamples\/2))])\n    \n    # Preprocessing image and setting the target attribute in the appropriate fromat for test and validation data\n    if partition!=2:\n        X = np.array([load_image(image_folder + file_name) for file_name in new_df.index])\n        X = X.reshape(X.shape[0], 218, 178, 3)\n        y = np_utils.to_categorical(new_df[attribute],2)\n    else:\n        X = []\n        y = []\n\n        for index, target in new_df.iterrows():\n            img = cv2.imread(image_folder + index)\n            img = cv2.resize(cv2.cvtColor(img, cv2.COLOR_BGR2RGB), (width, height)).astype(np.float32) \/ 255.0\n            img = np.expand_dims(img, axis =0)\n            X.append(img)\n            y.append(target[attribute])\n        \n    return X, y","e0c4c22e":"# Getting train dataframe\nX_train, y_train = generate_df(0, 'Male', train_samples)","615c2a83":"# Preparing train data with data augmentation\ndatagen_train =  ImageDataGenerator(\n  rotation_range=30,\n  width_shift_range=0.2,\n  height_shift_range=0.2,\n  shear_range=0.2,\n  zoom_range=0.2,\n  horizontal_flip=True\n)\n\ndatagen_train.fit(X_train)\n\ndatagen_train = datagen_train.flow(\nX_train, y_train,\nbatch_size=batch_size,\n)","566dcd67":"# Getting validation dataframe\nX_val, y_val = generate_df(1, 'Male', validation_samples)","48e93668":"# Preparing train data with data augmentation\ndatagen_val =  ImageDataGenerator(\n  rotation_range=30,\n  width_shift_range=0.2,\n  height_shift_range=0.2,\n  shear_range=0.2,\n  zoom_range=0.2,\n  horizontal_flip=True\n)\n\ndatagen_val.fit(X_val)\n\ndatagen_val = datagen_val.flow(\nX_val, y_val,\nbatch_size=batch_size,\n)","28fee1b1":"model = Sequential()\n\n#first convolutional layer\nmodel.add(Conv2D(32, (3,3), input_shape = input_shape, padding ='same'))\nmodel.add(Activation('relu'))\n\n#second convolutional layer\nmodel.add(Conv2D(64, (3,3), activation = 'relu', padding ='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size = (2,2)))\n\n#third convolutional layer\nmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(rate = 0.5))\n\n#fourth convolutional layer\nmodel.add(Conv2D(64, (3,3), activation = 'relu',padding = 'same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(rate = 0.5))\n\n#flatten\nmodel.add(Flatten())\n\n#first dense layer\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(rate = 0.5))\n\n#second dense layer\nmodel.add(Dense(32))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(rate = 0.5))\n\n#output layer\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))","5e0d1288":"from keras.optimizers import Adam","c08c2351":"#compiling the model\nmodel.compile(optimizer =Adam(lr = 0.001), loss = 'categorical_crossentropy', metrics = ['accuracy'] )","40afe7fe":"model.summary()","e22c9782":"checkpointer = ModelCheckpoint(filepath='model.h5', \n                               verbose=1, \n                               save_best_only=True)","80337a21":"history = model.fit_generator(datagen_train,\n                    validation_data = (X_val, y_val),\n                    steps_per_epoch= train_samples\/batch_size,\n                    epochs= epochs,\n                    callbacks=[checkpointer],\n                    verbose=1\n                    )","5246326b":"history.history.keys()","fabf5472":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nplt.figure(figsize = (8, 8))\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()","69d52335":"plt.figure(figsize = (8, 8))\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","3db63e39":"from keras.models import load_model","b5e05bb1":"#load the best model\nmodel = load_model('model.h5')","1188ed43":"def gender_prediction(filename):   \n    im = cv2.imread(filename)\n    im = cv2.resize(cv2.cvtColor(im, cv2.COLOR_BGR2RGB), (178, 218)).astype(np.float32) \/ 255.0\n    im = np.expand_dims(im, axis =0)\n    \n    # prediction\n    result = model.predict(im)\n    prediction = np.argmax(result)\n    \n    return result","5990250d":"#select random images of the test partition\ndf_test = df[(df['partition'] == 2)].sample(5)\ndf_test.head()","df1d9c2a":"filename = image_folder +df_test.index[0]\nimage = cv2.imread(filename)\nimage = cv2.resize(cv2.cvtColor(image, cv2.COLOR_BGR2RGB), (178, 218)).astype(np.float32) \/ 255.0\nimage = np.expand_dims(image, axis =0)\n    \n# prediction\nresult = model.predict(image)\nprediction = np.argmax(result)\n#print(result)\nif prediction == 1:\n    print(\"Predicted Label: Male\")\n\nelse:\n    print(\"Predicted Label: Female\")\n\n\nimage = cv2.imread(filename)\nplt.imshow(image)\nplt.show()","c23d83cd":"filename = image_folder +df_test.index[1]\nimage = cv2.imread(filename)\nimage = cv2.resize(cv2.cvtColor(image, cv2.COLOR_BGR2RGB), (178, 218)).astype(np.float32) \/ 255.0\nimage = np.expand_dims(image, axis =0)\n    \n# prediction\nresult = model.predict(image)\nprediction = np.argmax(result)\nif prediction == 1:\n    print(\"Predicted Label: Male\")\n\nelse:\n    print(\"Predicted Label: Female\")\n\n\nimage = cv2.imread(filename)\nplt.imshow(image)\nplt.show()","10c10a74":"filename = image_folder +df_test.index[2]\nimage = cv2.imread(filename)\nimage = cv2.resize(cv2.cvtColor(image, cv2.COLOR_BGR2RGB), (178, 218)).astype(np.float32) \/ 255.0\nimage = np.expand_dims(image, axis =0)\n    \n# prediction\nresult = model.predict(image)\nprediction = np.argmax(result)\nif prediction == 1:\n    print(\"Predicted Label: Male\")\n\nelse:\n    print(\"Predicted Label: Female\")\n\n\nimage = cv2.imread(filename)\nplt.imshow(image)\nplt.show()","d706ef23":"* 0 indicates training set\n* 1 indicates validation set\n* 2 indicates testing set\n\nNow let's join the partition dataframe(df_partition_data) with our target attribute from actual dataframe(df).","fa3293c4":"#### Defining the model architecture","be9cc2d3":"As we can see there are more number of female gender as compared to male gender so we need to ballance the dataset.\n\nNow let's display some random images from dataset with few attributes to understand the values of attribute and corresponding image clearly.","1f3abe4c":"#### Importing libraries","498ffa31":"\"1\" represents positive while \"-1\" represents negative","7efaab78":"The recommended partitioning of images into training, validation, testing of the data set is:\n\n1. 1-162770 images for training\n2. 162771-182637 images for validation\n3. 182638-202599 images for testing\n\nAs the size of the dataset is very huge we will take only subset of it for our experiment as follows:\n\n1. 10000 images for training\n2. 5000 images for validation","5af6b1ac":"#### Exploratory Data Analysis\nReading attribute CSV file."}}