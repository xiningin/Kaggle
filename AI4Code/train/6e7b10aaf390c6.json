{"cell_type":{"1b308e38":"code","c334a412":"code","6c9f4e66":"code","7b16f9b3":"code","d53c80f1":"code","8c18805a":"code","57f47802":"code","42c48e65":"code","e03804c1":"code","8f6495ee":"code","6f89445f":"code","3d468c6f":"code","f2a7729f":"code","31ad215e":"code","1df86e5d":"code","e5ae9cfc":"markdown","35fa3269":"markdown","dc0d96a8":"markdown","9ed3f1e6":"markdown","2b728604":"markdown","74c211ed":"markdown","8e352c97":"markdown","f85447b3":"markdown","c72ba88c":"markdown"},"source":{"1b308e38":"import os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom PIL import Image\nfrom pathlib import Path\nfrom matplotlib.patches import Rectangle\nfrom scipy.io import loadmat","c334a412":"devkit_path = Path('..\/input\/car_devkit\/devkit')\ntrain_path = Path('..\/input\/cars_train\/cars_train')\ntest_path = Path('..\/input\/cars_test\/cars_test')","6c9f4e66":"os.listdir(devkit_path)","7b16f9b3":"cars_meta = loadmat(devkit_path\/'cars_meta.mat')\ncars_train_annos = loadmat(devkit_path\/'cars_train_annos.mat')\ncars_test_annos = loadmat(devkit_path\/'cars_test_annos.mat')","d53c80f1":"labels = [c for c in cars_meta['class_names'][0]]\nlabels = pd.DataFrame(labels, columns=['labels'])\nlabels.head()","8c18805a":"frame = [[i.flat[0] for i in line] for line in cars_train_annos['annotations'][0]]\ncolumns = ['bbox_x1', 'bbox_y1', 'bbox_x2', 'bbox_y2', 'class', 'fname']\ndf_train = pd.DataFrame(frame, columns=columns)\ndf_train['class'] = df_train['class']-1 # Python indexing starts on zero.\ndf_train['fname'] = [train_path\/f for f in df_train['fname']] #  Appending Path\ndf_train.head()","57f47802":"df_train = df_train.merge(labels, left_on='class', right_index=True)\ndf_train = df_train.sort_index()\ndf_train.head()","42c48e65":"frame = [[i.flat[0] for i in line] for line in cars_test_annos['annotations'][0]]\ncolumns = ['bbox_x1', 'bbox_y1', 'bbox_x2', 'bbox_y2', 'fname']\ndf_test = pd.DataFrame(frame, columns=columns)\ndf_test['fname'] = [test_path\/f for f in df_test['fname']] #  Appending Path\ndf_test.head()","e03804c1":"# Returns (Image, title, rectangle patch) for drawing\ndef get_assets(df, i):\n    is_train = df is df_train\n    folder = train_path if is_train else test_path\n    image = Image.open(df['fname'][i])\n    title = df['labels'][i] if is_train else 'Unclassified'\n\n    xy = df['bbox_x1'][i], df['bbox_y1'][i]\n    width = df['bbox_x2'][i] - df['bbox_x1'][i]\n    height = df['bbox_y2'][i] - df['bbox_y1'][i]\n    rect = Rectangle(xy, width, height, fill=False, color='r', linewidth=2)\n    \n    return (image, title, rect)","8f6495ee":"def display_image(df, i):\n    image, title, rect = get_assets(df, i)\n    print(title)\n\n    plt.imshow(image)\n    plt.axis('off')\n    plt.title(title)\n    plt.gca().add_patch(rect)","6f89445f":"display_image(df_train, 0)","3d468c6f":"def display_range(end, start = 0):\n\n    n = end - start\n    fig, ax = plt.subplots(n, 2, figsize=(15, 5*end))\n\n    for i in range(start, end):\n        line = i - start\n        \n        im, title, rect = get_assets(df_train, i)\n        sub = ax[line, 0]\n        sub.imshow(im)\n        sub.axis('off')\n        sub.set_title(title)\n        sub.add_patch(rect)\n        \n        im, title, rect = get_assets(df_test, i)\n        sub = ax[line, 1]\n        sub.imshow(im)\n        sub.axis('off')\n        sub.set_title(title)\n        sub.add_patch(rect)\n        \n    plt.show()","f2a7729f":"display_range(5)","31ad215e":"freq_labels = df_train.groupby('labels').count()[['class']]\nfreq_labels = freq_labels.rename(columns={'class': 'count'})\nfreq_labels = freq_labels.sort_values(by='count', ascending=False)\nfreq_labels.head()","1df86e5d":"freq_labels.head(50).plot.bar(figsize=(15,10))\nplt.xticks(rotation=90);\nplt.xlabel(\"Cars\");\nplt.ylabel(\"Count\");","e5ae9cfc":"## Cars' Distribution","35fa3269":"## Displaying Range Image","dc0d96a8":"## Loading Cars Train","9ed3f1e6":"## Loading Labels","2b728604":"# DevKit","74c211ed":"### Merging labels","8e352c97":"## Loading Cars Test","f85447b3":"## `README.txt`\n\n```\nThis file gives documentation for the cars 196 dataset.\n(http:\/\/ai.stanford.edu\/~jkrause\/cars\/car_dataset.html)\n\n----------------------------------------\nMetadata\/Annotations\n----------------------------------------\nDescriptions of the files are as follows:\n\n-cars_meta.mat:\n  Contains a cell array of class names, one for each class.\n\n-cars_train_annos.mat:\n  Contains the variable 'annotations', which is a struct array of length\n  num_images and where each element has the fields:\n    bbox_x1: Min x-value of the bounding box, in pixels\n    bbox_x2: Max x-value of the bounding box, in pixels\n    bbox_y1: Min y-value of the bounding box, in pixels\n    bbox_y2: Max y-value of the bounding box, in pixels\n    class: Integral id of the class the image belongs to.\n    fname: Filename of the image within the folder of images.\n\n-cars_test_annos.mat:\n  Same format as 'cars_train_annos.mat', except the class is not provided.\n```\n\nFrom the `README.txt` file, we have the three meta data filles oppened bellow","c72ba88c":"## Displaying Image"}}