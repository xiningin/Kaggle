{"cell_type":{"b4e1d1b9":"code","4a73d89d":"code","7ddf5005":"code","a9fe1f82":"code","c9d5a20e":"code","7feb273c":"code","f11665bf":"code","9cbe2771":"code","e12242c3":"code","0e28af1f":"code","fae226cf":"code","0195d688":"code","c7e7a257":"code","68fecb72":"code","b61a9ba8":"code","44697ffa":"code","54b9b536":"code","4e6030d7":"code","f7b099cb":"code","38a88894":"code","c2fbee1b":"code","9d7b9c8e":"code","62da1d22":"code","d73ed94a":"code","fb970e37":"code","08a533e8":"code","84eadabb":"code","7e50e4f0":"code","f1de560e":"code","3516f70d":"code","f7bb8f11":"code","142bd260":"code","ba802dd3":"code","20db0503":"code","61354b1c":"code","3b4727af":"code","9f488874":"code","c9cc501c":"code","0c44ba58":"code","55531c3b":"code","17874b5a":"code","d4f05de9":"code","9c19c66d":"code","8c3824b6":"code","e57ccd29":"code","3192e61b":"code","0eb659fc":"code","71b06398":"code","f6ebd274":"code","6558f72b":"code","249fb38f":"code","71e485fe":"code","8b8bf63a":"code","c77c4ee3":"code","bc1e026d":"code","2e182347":"code","42fbe42c":"code","32102c81":"code","36a394af":"code","bd34efd8":"code","c08f1dd5":"code","f3921ad6":"code","37a572fc":"code","54d9e475":"code","93310ef2":"code","55354919":"code","a5001e3a":"code","26c0a673":"code","dc5c0c87":"code","8db30984":"code","f40660b0":"code","b2b66bd7":"code","ac852a00":"code","0ce0e712":"code","49ad31f2":"code","29751325":"code","b5444dc3":"code","83a0036b":"code","4622b59c":"code","9c48ce53":"code","d2ec8b8d":"code","a138bbd0":"code","d88c1343":"code","1475f836":"code","c07e00b9":"code","3ec9d3db":"code","22113105":"code","410af43f":"code","6d13d5cb":"code","65513cb2":"code","0cb5724c":"code","be4fee3a":"code","b7a5814f":"code","462ae061":"code","d24f512d":"code","caf267a0":"code","33e4d0d0":"code","49621aab":"code","dc355db1":"code","c2497b8e":"code","d7608375":"code","d310c142":"code","73aa6485":"code","c2d1d8a9":"code","d13795a7":"code","fe21f75d":"markdown","848113ba":"markdown","abb17971":"markdown","f1136b13":"markdown","9ba8986a":"markdown","306cd8c8":"markdown","d9cb4bd9":"markdown","92b44ad9":"markdown","5a45de6d":"markdown","52f4286c":"markdown","7ee80109":"markdown","88ae6f69":"markdown","2ccb02a1":"markdown","d2eef2a5":"markdown","d1921c93":"markdown","08a2fb9e":"markdown","e70653db":"markdown","cb919ec6":"markdown","8f2fc000":"markdown","fff47d4e":"markdown","3e087718":"markdown","f517fe01":"markdown","6871bc4a":"markdown","9df83bb5":"markdown","809ce629":"markdown","49f0985f":"markdown","8120fc9d":"markdown","6f81e92f":"markdown","c7f5aa7c":"markdown","8545ee49":"markdown","07b40621":"markdown","cebcef30":"markdown","7b9ec138":"markdown","636e3b63":"markdown","8de751e1":"markdown","70a0780e":"markdown","e41731bd":"markdown","4d7d7dfe":"markdown","4abed647":"markdown","6e9cdf90":"markdown","e3fb5579":"markdown","f303eb25":"markdown","41ec4448":"markdown","ff6d05a2":"markdown","932b5e58":"markdown","31e9df70":"markdown","d19c58a9":"markdown","e4eb7710":"markdown","cdfb7192":"markdown"},"source":{"b4e1d1b9":"import pandas as pd # For Data Analysis\nimport numpy as np # For numerical operations\nimport matplotlib.pyplot as plt # For Visualization\nimport seaborn as sns # For Visualization\nimport folium # For Visualization with Map\nimport math\nimport json\n\nplt.style.use(\"fivethirtyeight\")","4a73d89d":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","7ddf5005":"df = pd.read_csv(\"..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\")","a9fe1f82":"df.head()","c9d5a20e":"# Converting the columns to Lower Case and removing space and replacing symbols\ndf.columns","7feb273c":"df.columns = [x.lower().replace(\" \",\"_\").replace(\"(\",\"\").replace(\")\",\"\") for x in df.columns]","f11665bf":"df.head()","9cbe2771":"# Shape of Dataframe\ndf.shape","e12242c3":"df.head()","0e28af1f":"df.iloc[0]","fae226cf":"df.drop(0, axis=0, inplace=True)","0195d688":"df.head()","c7e7a257":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df","68fecb72":"memory_usage_train = df.memory_usage(deep=True) \/ 1024 ** 2","b61a9ba8":"memory_usage_train","44697ffa":"memory_usage_train.sum()","54b9b536":"df = reduce_memory_usage(df=df)","4e6030d7":"memory_usage_train = df.memory_usage(deep=True) \/ 1024 ** 2","f7b099cb":"memory_usage_train.sum()","38a88894":"df.dtypes","c2fbee1b":"df.time_from_start_to_finish_seconds = df.time_from_start_to_finish_seconds.astype('int32')","9d7b9c8e":"memory_usage_train = df.memory_usage(deep=True) \/ 1024 ** 2\nmemory_usage_train.sum()","62da1d22":"df.isnull().sum()","d73ed94a":"plt.figure(figsize=(15, 15))\nsns.heatmap(df.isnull(), cbar=False)","fb970e37":"total_time_invested = df[\"time_from_start_to_finish_seconds\"]","08a533e8":"total_time_invested","84eadabb":"times = total_time_invested.values","7e50e4f0":"def convert_sec_to_days(x):\n    return x\/(60.0 * 60.0 * 24.0)","f1de560e":"df[\"time_from_start_to_finish_seconds\"] = df[\"time_from_start_to_finish_seconds\"].apply(convert_sec_to_days)","3516f70d":"min(df[\"time_from_start_to_finish_seconds\"])","f7bb8f11":"max(df[\"time_from_start_to_finish_seconds\"])","142bd260":"df[\"time_taken_by_days\"] = df[\"time_from_start_to_finish_seconds\"].apply(lambda x: math.ceil(x))","ba802dd3":"time_taken_data = df.time_taken_by_days.value_counts().sort_index()","20db0503":"print(time_taken_data)","61354b1c":"plt.figure(figsize=(12,5))\nplt.plot(time_taken_data.index, time_taken_data.values, \n         color='#8f3a84', linestyle='solid', \n         label=\"Time Taken\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"No. of People\")\nplt.legend()\nplt.xticks(rotation=45)\nplt.title(\"How Fast the Survey is completed by each ?\")\nplt.show()","3b4727af":"time_taken_data = df.time_taken_by_days.value_counts(normalize=True).sort_index()","9f488874":"plt.figure(figsize=(12,5))\nplt.bar(\n    x=time_taken_data.index,\n    height=time_taken_data.values\n)\nfor year,value in time_taken_data.items():\n    plt.text(x=year , y =value , s=f\"{round(value*100, 2)} %\" , fontdict=dict(fontsize=9), rotation=90)\nplt.xlabel(\"Days\")\nplt.ylabel(\"No. of People\")\nplt.legend()\nplt.xticks(rotation=90)\nplt.title(\"How Fast the Survey is completed by each ?\")\nplt.show()","c9cc501c":"df.head()","0c44ba58":"df.q1.isnull().sum()","55531c3b":"# Total no of people by category wise. \ndf.q1.value_counts().sort_index()","17874b5a":"df.sort_values(by=[\"q1\"], inplace=True)","d4f05de9":"df.q1.value_counts().plot(kind='pie')","9c19c66d":"df.q1.value_counts(normalize=True).sort_index().plot(kind='bar')","8c3824b6":"plt.figure(figsize=(12,5))\nsns.countplot(\"q1\", data=df, palette=\"hls\")\nplt.ylabel(\"Count\", fontsize=18)\nplt.xlabel(\"Age Category\", fontsize=18)\nplt.title(\"Age Category Distribution of Survey\", fontsize=20)","e57ccd29":"df.groupby('time_taken_by_days').q1.value_counts()[1].sort_index()","3192e61b":"df.groupby('time_taken_by_days').q1.value_counts()[1].sort_index().plot(kind='bar')","0eb659fc":"df[df['time_taken_by_days']>1].q1.value_counts().sort_index().plot(kind='bar')\nplt.xlabel(\"Age Category\")\nplt.ylabel(\"People Count\")","71b06398":"# Finding Null Values\ndf.q2.isnull().sum()","f6ebd274":"data = df.q2.value_counts()\nprint(data)","6558f72b":"values = data.values\nlabels = data.index\n\ntitle = plt.title('Distribution of Gender')\ntitle.set_ha(\"left\")\nplt.gca().axis(\"equal\")\npie = plt.pie(values, startangle=0, autopct=\"%.1f%%\")\nplt.legend(pie[0],labels, bbox_to_anchor=(1,0.5), loc=\"center right\", fontsize=10, \n           bbox_transform=plt.gcf().transFigure)\nplt.subplots_adjust(left=0.0, bottom=0.1, right=0.45)\n","249fb38f":"sns.set(style=\"whitegrid\")\nplt.figure(figsize=(12,5))\ntotal = float(df.shape[0])\nax = sns.countplot(x=\"q2\", data=df)\nplt.title('Gender Distribution', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.xlabel(\"Gender\")\nplt.ylabel(\"Count\")\nplt.show()","71e485fe":"sns.set(style=\"whitegrid\")\nplt.figure(figsize=(12,5))\n\n# For Man & Woman\ndata = df[df[\"q2\"].isin([\"Man\",\"Woman\"])]\n\ntotal = float(data.shape[0])\nax = sns.countplot(x=\"q1\", data=data, hue='q2')\nplt.title('Gender Distribution (Man\/Woman)', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.xlabel(\"Gender\")\nplt.ylabel(\"Count\")\nplt.show()","8b8bf63a":"sns.set(style=\"whitegrid\")\nplt.figure(figsize=(12,5))\n\n# For Men\ndata = df[df[\"q2\"]==\"Man\"]\n\ntotal = float(data.shape[0])\nax = sns.countplot(x=\"q2\", data=data, hue=\"q1\")\nplt.title('Gender Distribution (Man)', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.xlabel(\"Gender\")\nplt.ylabel(\"Count\")\nplt.show()","c77c4ee3":"sns.set(style=\"whitegrid\")\nplt.figure(figsize=(12,5))\n\n\n# For Men\ndata = df[df[\"q2\"]==\"Woman\"]\ntotal = float(data.shape[0])\n\nax = sns.countplot(x=\"q2\", data=data, hue=\"q1\")\nplt.title('Gender Distribution (Woman)', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.xlabel(\"Gender\")\nplt.ylabel(\"Count\")\nplt.show()","bc1e026d":"sns.set(style=\"whitegrid\")\nplt.figure(figsize=(12,5))\n\n# For Man & Woman\ndata = df[df[\"q2\"].isin([\"Man\",\"Woman\"]) & df[\"time_taken_by_days\"].isin(list(range(1,10)))]\n\ntotal = float(data.shape[0])\nax = sns.countplot(x=\"time_taken_by_days\", data=data, hue='q2')\nplt.title('Gender with time taken', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.xlabel(\"Days\")\nplt.ylabel(\"Count\")\nplt.show()","2e182347":"df.head(5)","42fbe42c":"df.q3.value_counts().sort_values(ascending=False)","32102c81":"df.q3.value_counts().sort_values(ascending=False)[:5].plot(kind='bar')\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Count\")\nplt.legend([\"Count\"])","36a394af":"_c = df[df.q3!='Other'].q3.value_counts().sort_values(ascending=False)[:6]\n_c.index, _c.values","bd34efd8":"sns.set(style=\"whitegrid\")\nplt.figure(figsize=(10,5))\ntotal = float(data.shape[0])\n\nax = sns.barplot(x=_c.index, y=_c.values)\nplt.title('Country Distribution', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Count\")\nplt.show()","c08f1dd5":"_gender_categories = [\"Man\", \"Woman\"]\n_countries_list = _c.index\n\ntotal = float(data.shape[0])\n\nfiltered_data = df[ (df[\"q2\"].isin(_gender_categories)) & (df[\"q3\"].isin(_countries_list)) ]\n\nsns.set(style=\"whitegrid\")\nplt.figure(figsize=(10,5))\n\nax = sns.countplot(x=\"q3\", data=filtered_data, hue=\"q2\")\nplt.title('Gender Country Distribution', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Count\")\nplt.show()","f3921ad6":"_gender_categories = [\"Man\", \"Woman\"]\n_countries_list = _c.index[:1]\n\ntotal = float(data.shape[0])\n\nfiltered_data = df[ (df[\"q2\"].isin(_gender_categories)) & (df[\"q3\"].isin(_countries_list)) ]\n\nsns.set(style=\"whitegrid\")\nplt.figure(figsize=(14,5))\n\nax = sns.countplot(x=\"q1\", data=filtered_data, hue=\"q2\")\nplt.title('India Age Category\/Gender Distribution', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.3f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.xlabel(\"India\")\nplt.ylabel(\"Count\")\nplt.show()","37a572fc":"# Reading the Geojson file -> consists of Polygon geometries of the world. \njson_file = open(\"..\/input\/world-polygon-geometry\/countries.geo.json\", \"r\")\ncountries_geojson = json.load(json_file)","54d9e475":"# Creating a Separate countries list to compare with the countries present in the data (survey)\ncountries_from_geojson = []\nfor item in countries_geojson[\"features\"]:\n    countries_from_geojson.append(item.get(\"properties\", {}).get(\"name\"))","93310ef2":"# Exploring the geojson features\ncountries_geojson[\"features\"][0]","55354919":"print(sorted(countries_from_geojson))","a5001e3a":"# checking which countries are not in geojson\nfor _item in df.q3.unique():\n    if _item not in countries_from_geojson:\n        print(_item)","26c0a673":"# Replacign Vietnam\ndf.q3.replace({\"Viet Nam\":\"Vietnam\"}, inplace=True)","dc5c0c87":"country_df = df.q3.value_counts().rename_axis('Name').reset_index(name='Count')\ncountry_df.head()","8db30984":"# Updating the Geojson Content with df data. \ncountry_to_count = df.q3.value_counts()\n\n\n\nfor item in countries_geojson[\"features\"]:\n    key = item.get(\"properties\", {}).get(\"name\")\n    content = f\"Name: {key} | Total Count: {str(country_to_count.get(key, 0))}\"\n    item['properties']['content'] = content","f40660b0":"df_map = folium.Map(\n    location=[0,0],\n    zoom_start=3\n)\n\ntiles = ['stamenwatercolor', 'cartodbpositron', 'openstreetmap', 'stamenterrain']\nfor tile in tiles:\n    folium.TileLayer(tile).add_to(df_map)\n\n\nchoropleth = folium.Choropleth(\n    geo_data=countries_geojson,\n    key_on='feature.properties.name',\n    data=country_df, \n    columns=['Name', 'Count'], \n    fill_color='OrRd',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    highlight=True,\n    legend_name=\"Kaggle Survey\"\n).add_to(df_map)\n\nfolium.LayerControl().add_to(df_map)\n\nchoropleth.geojson.add_child(\n    folium.features.GeoJsonTooltip(['content'], labels=False,\n                                   style=('background-color: grey; color: white;'))\n)\n\ndf_map","b2b66bd7":"df.q4.value_counts()","ac852a00":"# replacing \"Some college\/university study without earning a bachelor\u2019s degree\" with small word \"dropouts\"\ndf.q4.replace({\n    \"Some college\/university study without earning a bachelor\u2019s degree\":\"dropouts\"\n}, inplace=True)","0ce0e712":"df.q4.value_counts().sort_values(ascending=False).plot(kind='bar')\nplt.xlabel(\"Education Qualifications\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=90)\nplt.legend([\"Count\"])","49ad31f2":"sns.set(style=\"whitegrid\")\nplt.figure(figsize=(10,5))\ntotal = float(df.shape[0])\n\nax = sns.countplot(x=\"q4\", data=df, order=df.q4.value_counts().sort_values(ascending=False).index)\nplt.title('Education Qualifications', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.xlabel(\"Education Categories\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=90)\nplt.show()","29751325":"_gender_categories = [\"Man\", \"Woman\"]\n\ntotal = float(data.shape[0])\n\nfiltered_data = df[df[\"q2\"].isin(_gender_categories)]\n\nsns.set(style=\"whitegrid\")\nplt.figure(figsize=(10,5))\n\nax = sns.countplot(x=\"q4\", data=filtered_data, hue=\"q2\", order=df.q4.value_counts().sort_values(ascending=False).index)\nplt.title('Gender Qualification Distribution', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.xlabel(\"Qualifications\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=90)\nplt.show()","b5444dc3":"df.head(2)","83a0036b":"df[df.q4==\"Bachelor\u2019s degree\"].q1.value_counts()","4622b59c":"_gender_categories = [\"Man\", \"Woman\"]\n\ntotal = float(data.shape[0])\n\nfiltered_data = df[(df.q4==\"Bachelor\u2019s degree\") & (df[\"q2\"].isin(_gender_categories))]\n\nsns.set(style=\"whitegrid\")\nplt.figure(figsize=(10,5))\n\nax = sns.countplot(x=\"q1\", data=filtered_data, hue=\"q2\", \n                   order=df[df.q4==\"Bachelor\u2019s degree\"].q1.value_counts().sort_values(ascending=False).index,\n                  palette=['#F5B041',\"#73C6B6\"])\nplt.title('Bachelors Degree by Gender\/Age Distribution', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.xlabel(\"Age Category\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=90)\nplt.show()","9c48ce53":"df.groupby(df.q3).q4.value_counts().sort_values(ascending=False)","d2ec8b8d":"country_max = {}\ncountry_qual = {}\nd = df.groupby(df.q3).q4.value_counts().sort_values(ascending=False)\nfor key, val in d.items():\n    _country = key[0]\n    _qualification = key[1]\n    if country_max.get(_country) == None:\n        country_max[_country] = val\n        country_qual[_country] = _qualification\n    if val > country_max[_country]:\n        country_max = val\n        country_qual[_country] = _qualification","a138bbd0":"country_qual","d88c1343":"max_by_qual = pd.DataFrame(data={\"Name\":country_qual.keys(), \"Max\":country_qual.values()})\nmax_by_qual.head()","1475f836":"# Updating the Geojson Content with df data. \n\nfor item in countries_geojson[\"features\"]:\n    key = item.get(\"properties\", {}).get(\"name\")\n    content = f\"{str(country_qual.get(key, 'N\/A'))}\"\n    item['properties']['max_qualification'] = content","c07e00b9":"df_map = folium.Map(\n    location=[0,0],\n    zoom_start=3\n)\n\ntiles = ['stamenwatercolor', 'cartodbpositron', 'openstreetmap', 'stamenterrain']\nfor tile in tiles:\n    folium.TileLayer(tile).add_to(df_map)\n\n\nchoropleth = folium.Choropleth(\n    geo_data=countries_geojson,\n    key_on='feature.properties.name',\n    data=country_df, \n    columns=['Name', 'Count'], \n    fill_color='BuPu', fill_opacity=0.7, line_opacity=0.5,\n    highlight=True,\n    legend_name=\"Kaggle Survey\"\n).add_to(df_map)\n\nfolium.LayerControl().add_to(df_map)\n\nchoropleth.geojson.add_child(\n    folium.features.GeoJsonTooltip(['max_qualification'], labels=False,\n                                   style=('background-color: grey; color: white;'))\n)\n\ndf_map","3ec9d3db":"df.q5.value_counts()","22113105":"df.q5.value_counts().plot(kind='bar')\nplt.xlabel(\"Profession\")\nplt.ylabel(\"Count\")\nplt.legend([\"Count\"])","410af43f":"sns.set(style=\"whitegrid\")\nplt.figure(figsize=(10,5))\ntotal = float(data.shape[0])\n\nax = sns.countplot(x=df.q5, data=df)\nplt.title('Profession Distribution', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.xlabel(\"Professions\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=90)\nplt.show()","6d13d5cb":"# Student                         6804\n# Data Scientist                  3616\n# Software Engineer               2449\n# Other                           2393\n# Data Analyst                    2301\n# Currently not employed          1986\n# Research Scientist              1538\n# Machine Learning Engineer       1499","65513cb2":"sns.set(style=\"whitegrid\")\nsns.set_palette(\"flare\")\nplt.figure(figsize=(10,5))\ntotal = float(data.shape[0])\n\n_selected_professions = [\"Student\", \"Data Scientist\", \"Software Engineer\", \"Data Analyst\", \"Research Scientist\",\n                        \"Machine Learning Engineer\"]\n\ndata = df[ (df.q2.isin([\"Man\", \"Woman\"])) & (df.q5.isin(_selected_professions)) ]\n\nax = sns.countplot(x=data.q5, data=data, hue=data.q2)\nplt.title('Profession Distribution by Gender', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.xlabel(\"Professions\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=90)\nplt.show()","0cb5724c":"# filtering out by top 10 not employed areas\ndf[(df.q2==\"Man\") & (df.q5 == \"Currently not employed\")].q3.value_counts()[:11]","be4fee3a":"sns.set(style=\"whitegrid\")\nsns.set_palette(\"flare\")\nplt.figure(figsize=(10,5))\ntotal = float(data.shape[0])\n\n_selected_professions = [\"Currently not employed\"]\n_selected_gender = [\"Man\"]\n_selected_countries = [\"India\", \"United States of America\", \"Nigeria\", \"Japan\", \"Russia\", \n                       \"United Kingdom of Great Britain and Northern Ireland\", \"Indonesia\",\n                      \"Pakistan\", \"Brazil\", \"Eqypt\"]\n\ndata = df[ (df.q2.isin(_selected_gender)) & (df.q5.isin(_selected_professions)) & (df.q3.isin(_selected_countries)) ]\n\nax = sns.countplot(x=data.q5, data=data, hue=data.q3)\nplt.title('Not Currently Employed - Man', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.ylabel(\"Percentage\")\n# plt.xticks(rotation=90)\nplt.show()","b7a5814f":"# filtering out by top 10 not employed areas\ndf[(df.q2==\"Woman\") & (df.q5 == \"Currently not employed\")].q3.value_counts()[:11]","462ae061":"sns.set(style=\"whitegrid\")\nsns.set_palette(\"flare\")\nplt.figure(figsize=(10,5))\ntotal = float(data.shape[0])\n\n_selected_professions = [\"Currently not employed\"]\n_selected_gender = [\"Woman\"]\n_selected_countries = [\"India\", \"United States of America\", \"Egypt\",\"Nigeria\", \"Russia\", \n                       \"Bangladesh\", \"Canada\",\"Singapore\",\"Kenya\",\"Spain\"]\n\ndata = df[ (df.q2.isin(_selected_gender)) & (df.q5.isin(_selected_professions)) & (df.q3.isin(_selected_countries)) ]\n\nax = sns.countplot(x=data.q5, data=data, hue=data.q3)\nplt.title('Not Currently Employed - Woman', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.ylabel(\"Percentage\")\n# plt.xticks(rotation=90)\nplt.show()","d24f512d":"df.groupby(df.q3).q5.value_counts().sort_values(ascending=False)","caf267a0":"country_max = {}\ncountry_prof = {}\nd = df.groupby(df.q3).q5.value_counts().sort_values(ascending=False)\nfor key, val in d.items():\n    _country = key[0]\n    _profession = key[1]\n    if country_max.get(_country) == None:\n        country_max[_country] = val\n        country_prof[_country] = _profession\n    if val > country_max[_country]:\n        country_max = val\n        country_prof[_country] = _profession","33e4d0d0":"country_prof.keys()","49621aab":"max_by_prof = pd.DataFrame(data={\"Name\":country_prof.keys(), \"Max\":country_prof.values()})\nmax_by_prof.head()","dc355db1":"# Updating the Geojson Content with df data. \n\nfor item in countries_geojson[\"features\"]:\n    key = item.get(\"properties\", {}).get(\"name\")\n    content = f\"{str(country_prof.get(key, ''))}\"\n    item['properties']['max_profession'] = content","c2497b8e":"countries_geojson[\"features\"][4]","d7608375":"max_by_prof.isnull().sum()","d310c142":"df_map = folium.Map(\n    location=[0,0],\n    zoom_start=3\n)\n\ntiles = ['stamenwatercolor', 'cartodbpositron', 'openstreetmap', 'stamenterrain']\nfor tile in tiles:\n    folium.TileLayer(tile).add_to(df_map)\n\n\nchoropleth = folium.Choropleth(\n    geo_data=countries_geojson,\n    key_on='feature.properties.name',\n    data=country_df, \n    columns=['Name', 'Count'], \n    fill_color='OrRd',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    highlight=True,\n    legend_name=\"Kaggle Survey\"\n).add_to(df_map)\n\nfolium.LayerControl().add_to(df_map)\n\nchoropleth.geojson.add_child(\n    folium.features.GeoJsonTooltip(['max_profession'], labels=False,\n                                   style=('background-color: grey; color: white;'))\n)\n\ndf_map","73aa6485":"df.q6.value_counts()","c2d1d8a9":"df.q6.value_counts().sort_values(ascending=False).plot(kind='bar')\nplt.xlabel(\"Coding Experience\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=90)\nplt.legend([\"Count\"])","d13795a7":"_gender_categories = [\"Man\", \"Woman\"]\n\nfiltered_data = df[df[\"q2\"].isin(_gender_categories)]\ntotal = float(filtered_data.shape[0])\n\nsns.set(style=\"whitegrid\")\nplt.figure(figsize=(10,5))\n\nax = sns.countplot(x=\"q6\", data=filtered_data, hue=\"q2\", order=df.q6.value_counts().sort_values(ascending=False).index)\nplt.title('Experience Distribution', fontsize=20)\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='center')\nplt.xlabel(\"Qualifications\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=90)\nplt.show()","fe21f75d":"#### Inference : \nFrom the Above map, we can see the dark areas, where there is no contribution towards the survey. \nIndia, Most Contributed to the survey. \n\nAreas like Kazakasthan, Ethiopia, Algeria were the one's who contributed in less number. \n","848113ba":"#### Inference:\nFrom the above plot, we can see people who Completed\/Pursuing <b>Masters Degree and Bachelor's Degree<\/b> we participated high in the kaggle survey . ","abb17971":"## Column Name Change","f1136b13":"#### inference:\nFrom the above plot, we can see more of people (Not Employed) are from India (Getting there handson with Kaggle to reach other professions). \n\nThe first 2 places of Unemployed Category (India, USA) are same for both Man and Woman. From the third place its changing for them. ","9ba8986a":"What is your gender?\n\n- Man\n- Woman\n- Nonbinary\n- Prefer not to say\n- Prefer to self-describe","306cd8c8":"# 3.3.1 Comparison of gender with age_category  (considering the major category - Man\/Woman )","d9cb4bd9":"# 3.1 Time From Start to Finish","92b44ad9":"# 3.2 Q1 - What is your age (# years)?","5a45de6d":"### For Man","52f4286c":"## Distribution of profession by Gender ( Man, Woman)","7ee80109":"# 3.6.0 Q5 Select the title most similar to your current role (or most recent title if retired):","88ae6f69":"#### Inference:\nFrom the above plot, we can see female counts is in between 1\/4 and 1\/5 of the male count. ","2ccb02a1":"#### Countries count","d2eef2a5":"In which country do you currently reside?\n[List of Countries]","d1921c93":"# 3.4.0 Q3. In which country do you currently reside? ","08a2fb9e":"## Woman","e70653db":"We can create a new column like time_taken_by_days, for using this valuable data as well ","cb919ec6":"## Trying to reduce the memory uage","8f2fc000":"# 3.7.0 Q6 For how many years have you been writing code and\/or programming?\n\n- I have never written code\n- < 1 years\n- 1-2 years\n- 3-5 years\n- 5-10 years\n- 10-20 years\n- 20+ years","fff47d4e":"Here we can see 'Viet Nam' is misspelled in the data, so we can change that. ( We can ignore the others for timebeing - Will update in future once i get the geom data )","3e087718":"# 3.0 Analyzation of data","f517fe01":"#### inference:\nFrom the above plot, we can see more of people (Not Employed) are from India (Getting there handson with Kaggle to reach other professions)","6871bc4a":"#### Distribution of Gender. ","9df83bb5":"#### Inference: \nFrom the above plot its clear that 98.35% of the people has taken less or equal to a one day . ","809ce629":"#### Remove the first row, since its a description","49f0985f":"# 3.3.2 Comparison of gender with time taken for the survey completion","8120fc9d":"### For Woman","6f81e92f":"#### Inference: \nFrom the above plot, its known that people in the age category of 18-21, 22-24, 25-29 has taken more than one day to complete the survey","c7f5aa7c":"- Business Analyst\n- Data Analyst\n- Data Engineer\n- Data Scientist\n- DBA\/Database Engineer\n- Machine Learning Engineer\n- Product Manager\n- Program\/Project Manager\n- Research Scientist\n- Software Engineer\n- Statistician\n- Student\n- Currently not employed\n- Other","8545ee49":"## Major Occupation in each Country","07b40621":"Do you liked it!!! Press the <b>Upvote<\/b> button. ","cebcef30":"## Survey Methodology:\n\nThe 2021 Kaggle DS & ML Survey received 25,973 usable responses from participants in 171\ndifferent countries and territories.\n\nYou can find the full list of questions and answer choices in the file\n\"kaggle_survey_2021_answer_choices.pdf\".\n\nResponses to multiple choice questions (only a single choice can be selected) were recorded in\nindividual columns. Responses to multiple selection questions (multiple choices can be selected)\nwere split into multiple columns (with one column per answer choice).\n\nTo ensure response quality, we excluded respondents that were flagged by our survey system as\n\u201cSpam\u201d or \"Duplicate. We also dropped responses from respondents that spent less than 2\nminutes completing the survey, as well as responses from respondents that selected fewer than\n15 answer choices in total.\n\nTo protect the respondents\u2019 privacy, free-form text responses were not included in the public\nsurvey dataset, and the order of the rows was shuffled (responses are not displayed in\nchronological order). Likewise, if a country or territory received less than 50 respondents, we\ngrouped them into a group named \u201cOther\u201d for the sake of anonymity.\n\nAn invitation to participate in the survey was sent to the entire Kaggle community (anyone\nopted-in to the Kaggle Email List). The survey was also promoted on the Kaggle website (via\nboth banners and popups) as well as on the Kaggle Twitter channel.\n\nThe survey was live from 09\/01\/2021 to 10\/04\/2021. We allowed respondents to complete the\nsurvey at any time during that window.\n\nThe survey data was released under a CC 2.0 license:","7b9ec138":"# 3.5.0 Q4. What is the highest level of formal education that you have attained or plan to attain within the next 2 years?\n\n- No formal education past high school\n- Some college\/university study without earning a bachelor\u2019s degree\n- Bachelor\u2019s degree\n- Master\u2019s degree\n- Doctoral degree\n- Professional doctorate\n- I prefer not to answer","636e3b63":"### Both Man and Woman","8de751e1":"# 3.3.0 Q2 - What is your gender?","70a0780e":"From the above plot we can see that more people from <b>India<\/b> has participated in Kaggle Survey .  ","e41731bd":"### For Man","4d7d7dfe":"#### Inference: \nThere are many null values is present in columns. \nSince we are just going to do analysis we can ignore it for now . ","4abed647":"## Distribution of Professions","6e9cdf90":"#### Inference: \nFrom the above plot, its known that people who completes survey within a day is same as whole survey. ","e3fb5579":"## Exploring Not Employed Category","f303eb25":"#### From the above graph of india, We can see that, more of the pople in the age category of 18-21 is greater than other categories. \nMore young people in india are getting knowledge in the field of Data Science and Machine Learning","41ec4448":"# 3.0 Finding Missing Values","ff6d05a2":"#### From the above graph, we can see there are more male participants than combining all the other Genders. ","932b5e58":"# Maximum Qualification in Each Country","31e9df70":"# 2. Loading Datasets","d19c58a9":"# 1. Loading Libraries","e4eb7710":"#### Inference: \nBy Comparing the above two plots, we can say that <b>more of females were active in ML and DS in the category range [18-21, 22-24, 25-29] than man. <\/b>","cdfb7192":"# 3.4.1 Visualizing in openstreet Map"}}