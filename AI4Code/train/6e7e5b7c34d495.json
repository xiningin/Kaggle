{"cell_type":{"61e4dab2":"code","a9d80d6c":"code","4d70b12e":"code","cbab690e":"code","eb6f87f6":"code","b9f7bde1":"code","955abcfa":"code","a54a9902":"code","1d625317":"code","2f589699":"code","dec3c5e4":"code","a289f6ef":"code","60093d66":"code","e2d53841":"code","50e4b3be":"code","45963ee2":"code","22a6701f":"code","1b681913":"code","70482782":"code","9f2823b6":"code","5d90e8bc":"code","480bbb4f":"code","64ffd0cf":"code","bae14b8a":"code","a7bf9000":"code","14ab9382":"code","9525668c":"code","05d1a850":"code","d593ff3b":"code","17cd5d8b":"code","a3fd2a6b":"code","a1c813c8":"code","9169fb2c":"code","5123bbc3":"markdown","c31224e5":"markdown","7f34873a":"markdown","0e2c28aa":"markdown","9f87018c":"markdown","af8b26e4":"markdown","82db563f":"markdown","53ff2a30":"markdown","cdc33477":"markdown","dc5bb950":"markdown","b8149498":"markdown","cdf08be3":"markdown","36583f79":"markdown","9b838580":"markdown","9040d380":"markdown","496a386f":"markdown","e1927f55":"markdown","8dc85127":"markdown","daee24f8":"markdown","e7ac845a":"markdown","0e56496b":"markdown","bed67c14":"markdown","c7b29129":"markdown","2e507725":"markdown","33f77161":"markdown","fb7afa99":"markdown"},"source":{"61e4dab2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9d80d6c":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\n\nfrom sklearn.model_selection import train_test_split\n\npd.set_option('display.max_columns', 1000)\npd.set_option('display.max_rows', 1000)\n\nimport warnings\nwarnings.filterwarnings(action='ignore')\n\n# visuzalitions libraries\nimport matplotlib.ticker as mtick\nimport matplotlib.gridspec as grid_spec","4d70b12e":"data = pd.read_csv('\/kaggle\/input\/bank-marketing-data-set\/bank-additional-full.csv',\n                  delimiter=';')\nprint(data.shape)\ndata.head()","cbab690e":"data.describe()","eb6f87f6":"# check if we have missing values\n[var for var in data.columns if data[var].isnull().mean() > 0]","b9f7bde1":"# data dtypes\ndata.dtypes","955abcfa":"# create lists of numerical and categorical variables\ncat_vars = [var for var in data.columns if var != 'y' and data[var].dtype=='O']\nnum_vars = [var for var in data.columns if var != 'y' and var not in cat_vars]\n\nprint('Number of categorical variables: {}'.format(len(cat_vars)))\nprint('Number of numerical variables: {}'.format(len(num_vars)))","a54a9902":"(data['y'].value_counts() \/ len(data))","1d625317":"def plot_nums(df, var):\n    \"\"\"Function to visualize histogram, q-q plot and box plot for numerical variables\"\"\"\n    plt.figure(figsize=(16,4))\n    \n    plt.subplot(1, 3, 1)\n    df[var].hist(bins=30)\n    plt.title('Histogram')\n    plt.xlabel(var)\n    \n    plt.subplot(1, 3, 2)\n    stats.probplot(df[var], plot=plt)\n    \n    plt.subplot(1, 3, 3)\n    sns.boxplot(y=df[var])\n    plt.title('Boxplot')\n    \n    plt.show()","2f589699":"# display plots for all numerical variables\nfor var in num_vars:\n    plot_nums(data, var)","dec3c5e4":"len(data[data['campaign']>50])","a289f6ef":"# remove one outlier from campaign\n# and see the distribution again\ndata = data[data['campaign']<50]\nplot_nums(data, 'campaign')","60093d66":"data['pdays'] = data['pdays'].replace(999, -1)","e2d53841":"data['pdays'].unique()","50e4b3be":"plot_nums(data, 'pdays')","45963ee2":"data['pdays'].value_counts()","22a6701f":"# divide pdays into 3 groups\nbins = [0, 7, 14, 30]\nlabels = ['1w', '2w', '>2w']\ndata['pdays_group'] = pd.cut(data['pdays'], bins=bins, labels=labels, include_lowest=False)\n\n# I set include_lowest = False\n# by doing so, the -1 values would not contain in any group\n# it will be encoded as NaN","1b681913":"# change the dtype as object\ndata['pdays_group'] = data['pdays_group'].astype('O')\n\n# fillna as Not contacted\ndata['pdays_group'].fillna('Not contacted', inplace=True)","70482782":"data['pdays_group'].value_counts() \/ len(data)","9f2823b6":"# now we can drop pdays (original variable)\ndata.drop('pdays', axis=1, inplace=True)","5d90e8bc":"# let's divide age into the bins\nbins = [16, 30, 40, 50, 60, 100]\n\n# bucket labels\nlabels = ['17-30', '31-40', '41-50', '51-60', '>60']\n\n\n# discretization\ndata['age_group'] = pd.cut(data['age'], bins=bins, labels=labels, include_lowest=True)","480bbb4f":"# Let's see the distribution of age_group\n(data['age_group'].value_counts() \/ len(data)).plot.bar()\nplt.title('Age group distribution');","64ffd0cf":"# now we can drop age (original numberical variable)\ndata.drop(['age'], axis=1, inplace=True)","bae14b8a":"# remove age and pdays from num_vars\nnum_vars.remove('age')\nnum_vars.remove('pdays')\n\n# add age_group and pdays_group to cat_vars\ncat_vars.append('age_group')\ncat_vars.append('pdays_group')","a7bf9000":"data.shape","14ab9382":"# target variable distribution\n\n((data['y'].value_counts()) \/ len(data)).plot.bar(color=['#67a9cf','#FA4035'])\nplt.title('The percentage of target variable in dataset');","9525668c":"# create two groups of yes and no\ngroup_yes = data[data['y']=='yes']\ngroup_no = data[data['y']=='no']\n\nprint(\"group_yes' data shape: {}\".format(group_yes.shape))\nprint(\"group_no's data shape: {}\".format(group_no.shape))","05d1a850":"background_color = '#fbfbfb'\n\nfig = plt.figure(figsize=(15,20), dpi=150)\nfig.patch.set_facecolor(background_color) # set up background color\ngs = fig.add_gridspec(4, 2)\ngs.update(wspace=0.35, hspace=0.25)\n\n# axes as a list\naxes = [fig.add_subplot(gs[0,0]),\n       fig.add_subplot(gs[0,1]),\n       fig.add_subplot(gs[1,0]),\n       fig.add_subplot(gs[1,1]),\n       fig.add_subplot(gs[2,0]),\n       fig.add_subplot(gs[2,1]),\n       fig.add_subplot(gs[3,0]),\n       fig.add_subplot(gs[3,1])]\n\ndef HistPlots(df, variable, ax):\n    \"\"\" Function to create histogram for numerical variables\"\"\"\n    \n    # create histograms\n    sns.kdeplot(group_yes[variable], ax=ax, color='#FA4035', shade=True, label='yes')\n    sns.kdeplot(group_no[variable], ax=ax, color='#67a9cf', shade=True, label='no')\n    ax.grid(which='major', color='gray', linestyle=':', axis='x', zorder=0, dashes=(1,5))\n    ax.set_title(f'{variable}'.title(), fontsize=14, fontweight='bold', \n                fontfamily='serif', color='#323232', loc='left')\n    ax.legend(loc=1)\n    ax.set_ylabel('')\n    \n\nfor ax, variable in zip(axes, num_vars):\n    HistPlots(data, variable, ax)\n    \n\n# Add observations\naxes[0].text(0.005, 0.0116, 'Differences between yes and no group on numerical variables',\n            fontsize=20, fontweight='bold', fontfamily='serif', color='#323232')\n\naxes[0].text(0.8, 0.0112, '- Duration',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(0.8, 0.0108, 'We can see the difference between yes and no groups.',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\naxes[0].text(0.8, 0.0104, 'Given the attribute information, and the author recommends to use this variable only for building benchmark, not for building models.',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(0.8, 0.0100, '- Campaign',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(0.8, 0.0096, 'We can see there is no any difference between yes and no groups.',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(0.8, 0.0092, '- Previous',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(0.8, 0.0088, 'No-group has more 0 values than yes-group.',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(0.8, 0.0084, '- Emp.Var.Rate',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(0.8, 0.0080, 'No-group has values which are more than 0 (positive values) compared to yes-group.',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(0.8, 0.0076, '- Cons.Price.Idx',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(0.8, 0.0072, 'We can see the peak at 94.0 in No-group unlike yes-group',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(0.8, 0.0068, '- Cons.Conf.Idx',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(0.8, 0.0064, 'Unlike yes-group which shows a normal distribution, no-group concentrates values between -47.5 to -35',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(0.8, 0.0060, '- Euribor3M',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(0.8, 0.0056, 'No-group has more values of 5 than yes-group',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(0.8, 0.0052, '- Nr.Employed',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(0.8, 0.0048, 'No-group has a lot of values between 5150 to 5250 compared to yes-group',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232');","d593ff3b":"target = 'y'\n\n# create two lists of categorical variables\nfirst_cats = ['job', 'marital', 'education', 'default', 'housing', 'loan']\nsecond_cats = ['contact', 'month', 'day_of_week', 'poutcome', 'age_group', 'pdays_group']","17cd5d8b":"def barPerc(df, variable, ax):\n    \"\"\" \n    source: https:\/\/stackoverflow.com\/a\/67076347\/4852724\n    \n    barPerc(): Add percentage for hues to bar plots\n    args:\n        df: pandas dataframe\n        xVar: (string) X variable\n        ax: Axes object (for Seaborn Countplot\/Bar plot or\n                             pandas bar plot)\n    \"\"\"\n    \n    # 1. How many X categories\n    ## check for NaN and remove\n    numX = len([x for x in df[variable].unique() if x==x])\n    \n    # 2. The bars are created in hue order, organize them\n    bars = ax.patches\n    ## 2a. For each X variable\n    for ind in range(numX):\n        ## 2b. Get hue bar\n        ##     ex. 8 X categories, 4 hues =>\n        ##     [0, 8, 16, 24] are hue bars for 1st X category\n        hueBars = bars[ind:][::numX]\n        ## 2c. Get the total height (for percentages)\n        total = sum([x.get_height() for x in hueBars])\n        \n        # 3. Print the percentage on the bars\n        for bar in hueBars:\n            ax.text(bar.get_x() + bar.get_width()\/2.,\n                   bar.get_height() - 0.1 * bar.get_height(),\n                   f\"{bar.get_height()\/total:.2%}\",\n                   ha='center', va='top', color='black')\n\ndef GrpSubplots(df, variable, ax, axis=None, ticklabels=None):\n    \"\"\" Create subplots based on X variables\"\"\"\n    \n    df.groupby([variable, target]).size().unstack(target).apply(lambda x: x*100\/x.sum(), axis=axis).plot.bar(rot=0,\n                                                                                                            width=0.9,\n                                                                                                             alpha=0.65,\n                                                                                                            color=['#67a9cf','#FA4035'],\n                                                                                                            ax=ax);\n    ax.set_title(f'{variable}'.title(), fontsize=14, fontweight='bold', fontfamily='serif', color='#323232', loc='left')\n    ax.grid(color='gray', linestyle=':', axis='y', zorder=0, dashes=(1,5))\n    ax.set_xticklabels(ticklabels, rotation=90)\n    ax.yaxis.set_major_formatter(mtick.PercentFormatter())\n    ax.yaxis.set_major_locator(mtick.MultipleLocator(10))\n    ax.legend(loc=1)\n    ax.set_xlabel('')\n    \n    barPerc(df, variable, ax)","a3fd2a6b":"fig = plt.figure(figsize=(20, 15), dpi=150)\nfig.patch.set_facecolor(background_color)\ngs = fig.add_gridspec(3, 2)\ngs.update(wspace=0.15, hspace=0.67)\n\n# axes as a list\naxes = [fig.add_subplot(gs[0,0]),\n       fig.add_subplot(gs[0,1]),\n       fig.add_subplot(gs[1,0]),\n       fig.add_subplot(gs[1,1]),\n       fig.add_subplot(gs[2,0]),\n       fig.add_subplot(gs[2,1])]\n\n# ticklabels as list\ntlabs = [['housemaid', 'services', 'admin.', 'blue-collar', 'technician', 'retired', 'management', \n          'unemployed', 'self-employed', 'unknown', 'entrepreneur', \n          'student']] + [['married', 'single', 'divorced', 'unknown']] + [['basic.4y', \n    'high.school', 'basic.6y', 'basic.9y', 'professional.course','unknown', 'university.degree', \n    'illiterate']] + [['no', 'unknown', 'yes']] + [['no', 'yes', 'unknown']]*2 \n\n        \nfor ax, variable, ticklabels in zip(axes, first_cats, tlabs):\n    GrpSubplots(data, variable, ax, axis=1, ticklabels=ticklabels)\n    \n    \n# Add observations\naxes[0].text(-0.80, 250, 'Differences between yes and no group on categorical variables',\n            fontsize=20, fontweight='bold', fontfamily='serif', color='#323232')\n\naxes[0].text(-0.8, 230, '- Job',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(-0.6, 220, 'No-group has more retired people which makes sense if we see the age-group below graph.',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(-0.8, 210, '- Marital',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(-0.6, 200, 'Both groups have similar patterns.',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(-0.8, 190, '- Education',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(-0.6, 180, 'Both groups have similar distribution, but yes-group has more people who got professional course.',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(-0.8, 170, '- Default',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(-0.6, 160, 'Yes-group does not have \"yes\" on default.',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(-0.8, 150, '- Housing',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(-0.6, 140, 'Yes and no groups have similar distribution.',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(-0.8, 130, '- Loan',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(-0.6, 120, 'Yes and no groups have similar distribution.',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232');\n\n","a1c813c8":"fig = plt.figure(figsize=(20, 15), dpi=150)\nfig.patch.set_facecolor(background_color)\ngs = fig.add_gridspec(3, 2)\ngs.update(wspace=0.15, hspace=0.67)\n\n# axes as a list\naxes = [fig.add_subplot(gs[0,0]),\n       fig.add_subplot(gs[0,1]),\n       fig.add_subplot(gs[1,0]),\n       fig.add_subplot(gs[1,1]),\n       fig.add_subplot(gs[2,0]),\n       fig.add_subplot(gs[2,1])]\n\n# ticklabels as list\ntlabs = [['telephone', 'cellular']] + [['mar', 'apr', 'may', 'jun', \n                                        'jul', 'aug', 'sep', 'oct', 'nov', 'dec']] + [['mon', 'tue', 'wed', 'thu', 'fri']] + [['nonexistent', \n    'failure', 'success']]+ [['17-30','31-40','41-50','51-60','>60']] + [['Not contacted', '1w', '2w', '>2w']]\n        \nfor ax, variable, ticklabels in zip(axes, second_cats, tlabs):\n    GrpSubplots(data, variable, ax, axis=1, ticklabels=ticklabels)\n    \n    \n# Add observations\naxes[0].text(-0.80, 260, 'Differences between yes and no group on categorical variables',\n            fontsize=20, fontweight='bold', fontfamily='serif', color='#323232')\n\naxes[0].text(-0.8, 240, '- Contact',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(-0.6, 230, 'No-group has more cellular than telephone compared to yes-group',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\naxes[0].text(-0.6, 220, 'Given the attribute information, and the author recommends to use this variable only for building benchmark, not for building models.',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(-0.8, 210, '- Month',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(-0.6, 200, 'No-group has a lot of values in march, april, june, july, september, and october',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(-0.8, 190, '- Day_Of_Week',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(-0.6, 180, 'Both groups have similar distribution.',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(-0.8, 170, '- Poutcome',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(-0.6, 160, 'Yes-group have a large number of people in success compared to no-group',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(-0.8, 150, '- Age_Group',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(-0.6, 140, 'No-group are normally distributed in age-group, but yes-group are more concentrated in more than 60th age',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232')\n\naxes[0].text(-0.8, 130, '- Pdays_Group',\n            fontsize=16, fontweight='bold', fontfamily='serif', color='#323232')\naxes[0].text(-0.6, 120, 'Unlike yes-group, a large percent of people in no-group were contacted 2 weeks later after the client was last contected',\n            fontsize=14, fontweight='light', fontfamily='serif', color='#323232');\n\n","9169fb2c":"corr = data.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nfig, ax = plt.subplots(figsize=(10,7))\n\nfig.text(.34, .88, 'Numerical variable correlation', fontfamily='serif', fontweight='bold', fontsize=15)\nfig.text(1.00,.78, 'Observations', fontfamily='serif', fontweight='bold', fontsize=15)\nfig.text(.88, .68, 'Positive Correlations:', fontfamily='serif', fontweight='bold', fontsize=13)\nfig.text(.92, .65, 'Emp.Var.Rate vs. Euribor3M', fontfamily='serif', fontweight='light', fontsize=11)\nfig.text(.92, .62, 'Emp.Var.Rate vs. Nr.employed', fontfamily='serif', fontweight='light', fontsize=11)\nfig.text(.92, .59, 'Emp.Var.Rate vs. Cons.Price.Idx', fontfamily='serif', fontweight='light', fontsize=11)\nfig.text(.92, .56, 'Cons.Price.Idx vs. Euribor3M', fontfamily='serif', fontweight='light', fontsize=11)\nfig.text(.92, .53, 'Cons.Price.Idx vs. Nr.employed', fontfamily='serif', fontweight='light', fontsize=11)\n\n\n\npl = sns.heatmap(corr, mask=mask, cmap='coolwarm', vmax=1.0, vmin=-1.0, center=0, square=True, linewidths=2.5)\nplt.show()","5123bbc3":"### pdays_group\n\nAs you can see the distribution plot above, `pdays` has a lot of 999 values which indicates that client was not previous contacted. I will change 999 to -1 and see the distribution again. ","c31224e5":"It looks better! Also, I removed one outlier, so it won't hurt the process. ","7f34873a":"### Feature Engineering","0e2c28aa":"# Bank Marketing_EDA and Visualization","9f87018c":"We see that there are a lot of clients (value = -1) who was not previous contacted. \n\n`pdays` could be discrete variable, and we can see there are very few values which have more than 16 days. \n\nSo, I would like to create a categorical variable by dividing pdays. ","af8b26e4":"### Target variable\n\nWe have a classification problem and target is a binary variable (yes\/no). Let's see the percentage of the value distribution of target","82db563f":"### Remove outliers\n\nEven though we found that there are outliers in `duration`, I will remove this variable when building models, wo I will keep it.\n\n`campaign` has one outlier which is more than 50. ","53ff2a30":"`age`: make it as a categorical variable\n- 17-30 for young adult, 31-40, 41-50, 51-60, and more than 61","cdc33477":"Distribution looks different from the original variable. ","dc5bb950":"## Introduction\n\n__The main goal of this project is to predict if the client will subscribe a term deposit (variable y).__ I will show how to approach developing a model to predict client's subscriptions using an imbalanced dataset. \n\nThe dataset is provided by [UCI-Machine Learning Repository](https:\/\/archive.ics.uci.edu\/ml\/datasets\/bank+marketing). The data contains direct marketing campaigns (phone calls) of a Portuguese banking institution. Often, more than one contact to the same client was required, in order to access if the product (bank term deposit) would be 'yes' or 'no' subscribed. \n\nIn this notebook, I will explore the data and create visualizations.","b8149498":"We have 10 numerical variables and 10 categorical variables","cdf08be3":"### Numerical variables\n\nLet's take a look at the distribution of numerical variables and figure out if they have outliers. ","36583f79":"We can see that `Emp.Var.Rate` is highly correlated with `Euribor3M`, `Nr.Employed`, and `Cons.Price.Idx`. Also, `Cons.Price.Idx` is correlated with `Euribor3M` and `Nr.Employed`. When I perform feature selection later, I need to consider these correlations between those variables. ","9b838580":"- Normal distribution? \n    - There are no gaussian distribution. \n    \n- Outliers?\n    - `age`: we can make `age` as a categorical variable to handle with outliers. \n    - `duration`: There are values which are more than 4000. \n    - `campaign`: There are values which are more than 50. ","9040d380":"Let's take a look at basic information on dataset","496a386f":"We have 21 features including target variable. ","e1927f55":"__Numeric variables have different scales, so we need to scale values when building machine learning model.__","8dc85127":"### Correlation between numerical variables","daee24f8":"Before we see categorical variables, I would like to create 2 categorical variables from `pdays` and `age`. ","e7ac845a":"If you want to see the entire workflow for this dataset, please visit to my [GitHub](https:\/\/github.com\/yejiseoung\/BankMarketing)","0e56496b":"We can see that this dataset is imbalanced. About 89% of the data has 'no' answer. This can be a problem because most machine learning algorithms assume balanced distributions. As the minority examples (here 'yes' answer) occur rarely, it is hard to find (or predict) small classes. Samples from the minority class are most often misclassified. Therefore, we need to deal with this imbalanced dataset carefully.\n","bed67c14":"### Differences between yes and no group on categorical variables","c7b29129":"## Data Visualization","2e507725":"### Differences between yes and no group on numerical variables\n\nAs we can see above, we have imbalanced data. In this section, I will create some graphs to compare 'yes'-group to 'no'-group based on y variable. If we see differences between groups, the variables will be important to build the models.","33f77161":"## EDA","fb7afa99":"## Load data"}}