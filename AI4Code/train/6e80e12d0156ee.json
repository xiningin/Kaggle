{"cell_type":{"54c37f5c":"code","6a28dd0b":"code","5d08503b":"code","47ea3a39":"code","fae07cc6":"code","72b310a9":"code","1567baad":"code","224f10f7":"code","91eb986b":"code","c62fc50b":"code","09a2b506":"code","62df6ec4":"code","f1a3db59":"code","af382eeb":"code","75aacca5":"code","7e6f9e42":"code","859cdb4f":"code","f6dddbed":"code","d09a7097":"markdown","aec8af05":"markdown","70779f88":"markdown","27210f92":"markdown","14468d2c":"markdown"},"source":{"54c37f5c":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBClassifier","6a28dd0b":"df = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\", index_col = 'id')\ndf_test = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\", index_col = 'id')\nsample_submission = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\n\nFEATURES = df.columns[:-1]\nTARGET = df.columns[-1]","5d08503b":"df_test.head()","47ea3a39":"df.shape","fae07cc6":"print(df.isnull().sum())","72b310a9":"y = df[TARGET]\nX= df.drop(TARGET, axis = 1)\nX_test = df_test.copy()\nX_test.head()","1567baad":"numerical_cols = [col for col in X.columns if X[col].dtype in ['int64', 'float64']]\nprint(numerical_cols)","224f10f7":"print(len(df.columns))\nprint(len(X.columns))","91eb986b":"X_train, X_valid, y_train, y_valid = train_test_split(X,y, \n                    train_size = 0.8, test_size = 0.2, random_state =0)","c62fc50b":"my_imputer = SimpleImputer()\nimputed_X_train = pd.DataFrame(my_imputer.fit_transform(X_train))\nimputed_X_valid = pd.DataFrame(my_imputer.transform(X_valid))\nimputed_X_test = pd.DataFrame(my_imputer.transform(X_test))\n\n\n","09a2b506":"# Imputation removed column names; put them back\nimputed_X_train.columns = X_train.columns\nimputed_X_valid.columns = X_valid.columns\nimputed_X_test.columns = X_test.columns","62df6ec4":"imputed_X_train.head()","f1a3db59":"#model = RandomForestRegressor(n_estimators=100, random_state=0, verbose = 1000)\n#model_xgboost = XGBClassifier(random_state = 42, tree_method= 'gpu_hist', gpu_id = 0, predictor='gpu_predictor')\n\nmodel_xgboost= XGBClassifier(max_depth=3, subsample=0.5, colsample_bytree=0.5, n_jobs=-1,\n    # Uncomment if you want to use GPU. Recommended for whole training set.\n    tree_method='gpu_hist',gpu_id = 0, predictor='gpu_predictor',\n    random_state=0,\n)","af382eeb":"\nmodel_xgboost.fit(imputed_X_train, y_train, verbose = False,\n             eval_set = [(X_train, y_train), (X_valid, y_valid)],\n             eval_metric = \"auc\",\n             early_stopping_rounds = 200)\npreds = model_xgboost.predict_proba(X_valid)[:,1]\nscore = roc_auc_score(y_valid, preds)\nprint('Score: ', score)","75aacca5":"X_test.head()","7e6f9e42":"#test_preds = model_xgboost.predict_proba(imputed_X_test)[:,1]\n\ntest_preds = pd.Series(\n    model_xgboost.predict(imputed_X_test),\n    index=X_test.index,\n    name=TARGET,\n)","859cdb4f":"test_preds","f6dddbed":"test_preds.to_csv(\"submission.csv\")","d09a7097":"The use of XGBoost Classifier Model because its an classification problem. ","aec8af05":"To check whether there are null values in train set (df)","70779f88":"Spliting the training and target in training and validation ","27210f92":"there seems to be null values so we need to use method to come over this. ","14468d2c":"There are no cateforical columns and therefore the focus will on the numerical columns and apply simple imputer method to handle the null values"}}