{"cell_type":{"602eaf91":"code","c79ef5d5":"code","93ae323b":"code","766d3999":"code","2d46d494":"code","961d1bad":"code","a3ea3233":"code","03660417":"code","586d0452":"code","77b11b46":"code","418f9a0d":"code","61efb185":"code","4fca9e33":"code","71a8968c":"code","56e7d551":"code","87209156":"code","8bfcb6dc":"code","0396adf0":"code","d1f97295":"code","24fe4696":"code","45dd8808":"code","534b1f29":"code","bd578ef1":"code","e3384985":"code","0b678546":"code","9c36a8e6":"code","a3fd6ea8":"code","bce71242":"code","b337130a":"code","55d7721d":"code","ab827ae4":"code","6b8938a9":"code","d35130ff":"code","4a4c63fd":"code","c688db1a":"code","646a7f43":"code","e8bb2fbb":"markdown","8e131b7f":"markdown","07f2e5c6":"markdown","2ef66e5f":"markdown","f56c13c2":"markdown","65ae4706":"markdown","ce6061db":"markdown"},"source":{"602eaf91":"from fastai.vision.all import *\nfrom fastai import *","c79ef5d5":"path = untar_data(URLs.MNIST)","93ae323b":"(path\/'training').ls()","766d3999":"zeroes = (path\/'training'\/'2').ls().sorted()\nones = (path\/'training'\/'1').ls().sorted()\ntwos = (path\/'training'\/'2').ls().sorted()\nthrees = (path\/'training'\/'3').ls().sorted()\nfours = (path\/'training'\/'4').ls().sorted()\nfives = (path\/'training'\/'5').ls().sorted()\nsixs = (path\/'training'\/'6').ls().sorted()\nsevens = (path\/'training'\/'7').ls().sorted()\neights = (path\/'training'\/'8').ls().sorted()\nnines = (path\/'training'\/'9').ls().sorted()","2d46d494":"img = ones[1]\nimg1 = Image.open(img)\nimg1","961d1bad":"img_1_tensor = tensor(img1)\ndf = pd.DataFrame(img_1_tensor[4:24, 9:20])\ndf.style.set_properties(**{'font-size': '6pt'}).background_gradient('Greys')","a3ea3233":"zero_tensors = [tensor(Image.open(o)) for o in zeroes]\none_tensors = [tensor(Image.open(o)) for o in ones]\ntwo_tensors = [tensor(Image.open(o)) for o in twos]\nthree_tensors = [tensor(Image.open(o)) for o in threes]\nfour_tensors = [tensor(Image.open(o)) for o in fours]\nfive_tensors = [tensor(Image.open(o)) for o in fives]\nsix_tensors = [tensor(Image.open(o)) for o in sixs]\nseven_tensors = [tensor(Image.open(o)) for o in sevens]\neight_tensors = [tensor(Image.open(o)) for o in eights]\nnine_tensors = [tensor(Image.open(o)) for o in nines]","03660417":"stacked_zeroes = torch.stack(zero_tensors).float()\/255\nstacked_ones = torch.stack(one_tensors).float()\/255\nstacked_twos = torch.stack(two_tensors).float()\/255\nstacked_threes = torch.stack(three_tensors).float()\/255\nstacked_fours = torch.stack(four_tensors).float()\/255\nstacked_fives = torch.stack(five_tensors).float()\/255\nstacked_sixs = torch.stack(six_tensors).float()\/255\nstacked_sevens = torch.stack(seven_tensors).float()\/255\nstacked_eights = torch.stack(eight_tensors).float()\/255\nstacked_nines = torch.stack(nine_tensors).float()\/255","586d0452":"mean1 = stacked_ones.mean(dim=0)\nshow_image(mean1)","77b11b46":"mean0 = stacked_zeroes.mean(0)\nmean1 = stacked_ones.mean(0)\nmean2 = stacked_twos.mean(0)\nmean3 = stacked_threes.mean(0)\nmean4 = stacked_fours.mean(0)\nmean5 = stacked_fives.mean(0)\nmean6 = stacked_fives.mean(0)\nmean7 = stacked_sevens.mean(0)\nmean8 = stacked_eights.mean(0)\nmean9 = stacked_nines.mean(0)","418f9a0d":"def mnist_distance(a, b):\n    return (a-b).abs().mean((-1, -2))","61efb185":"means = [mean0, mean1, mean2, mean3, mean4, mean5, mean6, mean7, mean8, mean9]\n\n# def get_prediction(x):\n#   distances = [mnist_distance(x, mean_image) for mean_image in mean_images]\n#   min_distance = min(distances)\n#   return distances.index(min_distance)","4fca9e33":"def get_prediction(x):\n    distances = [mnist_distance(x, mean_digit) for mean_digit in means]\n    return distances.index(min(distances))","71a8968c":"valid = (path\/'testing'\/'1').ls().sorted()","56e7d551":"valid[3]\nvalid_img = Image.open(valid[0])\nvalid_img","87209156":"valid_img_tensor = tensor(valid_img)","8bfcb6dc":"get_prediction(valid_img_tensor)","0396adf0":"valid_zeroes =torch.stack([tensor(Image.open(o)) for o in (path\/'testing'\/'0').ls().sorted() ])\nvalid_zeroes = valid_zeroes.float()\/255\ntotal_correct = 0\nfor x in valid_zeroes:\n    if(get_prediction(x) == 0):\n        total_correct += 1\n        \nprint(f\"Total accuracy is: {(total_correct\/valid_zeroes.shape[0])*100.0} %\")","d1f97295":"valid_ones =torch.stack([tensor(Image.open(o)) for o in (path\/'testing'\/'1').ls().sorted() ])\nvalid_ones = valid_ones.float()\/255\ntotal_correct = 0\nfor x in valid_ones:\n    if(get_prediction(x) == 1):\n        total_correct += 1\n        \nprint(f\"Total accuracy is: {(total_correct\/valid_ones.shape[0])*100.0} %\")","24fe4696":"valid_two = torch.stack([tensor(Image.open(o)) for o in (path\/'testing'\/'2').ls().sorted() ])\nvalid_two = valid_two.float()\/255\ntotal_correct = 0\nfor x in valid_two:\n    if(get_prediction(x) == 2):\n        total_correct += 1\n        \nprint(f\"Total accuracy is: {(total_correct\/valid_two.shape[0])*100.0} %\")","45dd8808":"valid_three = torch.stack([tensor(Image.open(o)) for o in (path\/'testing'\/'3').ls().sorted() ])\ntotal_correct = 0\nfor x in valid_three:\n    if(get_prediction(x) == 3):\n        total_correct += 1\n        \nprint(f\"Total accuracy is: {(total_correct\/valid_three.shape[0])*100.0} %\")","534b1f29":"valid_four = torch.stack([tensor(Image.open(o)) for o in (path\/'testing'\/'4').ls().sorted() ])\ntotal_correct = 0\nfor x in valid_four:\n    if(get_prediction(x) == 4):\n        total_correct += 1\n        \nprint(f\"Total accuracy is: {(total_correct\/valid_four.shape[0])*100.0} %\")","bd578ef1":"valid_five = torch.stack([tensor(Image.open(o)) for o in (path\/'testing'\/'5').ls().sorted() ])\ntotal_correct = 0\nfor x in valid_five:\n    if(get_prediction(x) == 5):\n        total_correct += 1\n        \nprint(f\"Total accuracy is: {(total_correct\/valid_five.shape[0])*100.0} %\")","e3384985":"valid_six = torch.stack([tensor(Image.open(o)) for o in (path\/'testing'\/'6').ls().sorted() ])\ntotal_correct = 0\nfor x in valid_six:\n    if(get_prediction(x) == 6):\n        total_correct += 1\n        \nprint(f\"Total accuracy is: {(total_correct\/valid_six.shape[0])*100.0} %\")","0b678546":"valid_seven = torch.stack([tensor(Image.open(o)) for o in (path\/'testing'\/'7').ls().sorted() ])\ntotal_correct = 0\nfor x in valid_seven:\n    if(get_prediction(x) == 7):\n        total_correct += 1\n        \nprint(f\"Total accuracy is: {(total_correct\/valid_seven.shape[0])*100.0} %\")","9c36a8e6":"valid_eight = torch.stack([tensor(Image.open(o)) for o in (path\/'testing'\/'8').ls().sorted() ])\ntotal_correct = 0\nfor x in valid_eight:\n    if(get_prediction(x) == 8):\n        total_correct += 1\n        \nprint(f\"Total accuracy is: {(total_correct\/valid_eight.shape[0])*100.0} %\")","a3fd6ea8":"valid_nine = torch.stack([tensor(Image.open(o)) for o in (path\/'testing'\/'9').ls().sorted() ])\ntotal_correct = 0\nfor x in valid_nine:\n    if(get_prediction(x) == 9):\n        total_correct += 1\n        \nprint(f\"Total accuracy is: {(total_correct\/valid_nine.shape[0])*100.0} %\")","bce71242":"training_data = [(path\/'training'\/str(i)) for i in range(10)]\ntesting_data = [(path\/'testing'\/str(i)) for i in range(10)]","b337130a":"training_tensors = [torch.stack([tensor(Image.open(image)).float()\/255 for image in x.ls()]) for x in training_data]\ntesting_tensors = [torch.stack([tensor(Image.open(image)).float()\/255 for image in test.ls()]) for test in testing_data]","55d7721d":"mean_tensors = [mean_train.mean(0) for mean_train in training_tensors]\nshow_image(mean_tensors[0])","ab827ae4":"correct = []\ntotal = []\n\nfor i in range(10):\n    total.append(testing_tensors[i].shape[0])\n    preds = torch.Tensor([torch.stack(\n        [F.mse_loss(testing_tensors[i][img], mean_tensors[mean_index]).sqrt()\n            for mean_index in range(10)\n        ]\n    ).argmin()\n    for img in range (testing_tensors[i].shape[0])\n    ])\n    correct.append((preds == i).sum())","6b8938a9":"print(f\"Accuracy of our baseline model is {100*(torch.Tensor(correct).sum()\/torch.Tensor(total).sum())} %\")","d35130ff":"dls = ImageDataLoaders.from_folder(path, train='training', valid='testing')","4a4c63fd":"learn = cnn_learner(dls, resnet18,\n                   loss_func=F.cross_entropy, metrics=accuracy,  pretrained=False)","c688db1a":"learn.fit_one_cycle(2)","646a7f43":"learn = cnn_learner(dls, resnet18,\n                   loss_func=F.cross_entropy, metrics=accuracy,  pretrained=True)\nlearn.fine_tune(2)","e8bb2fbb":"## Better Version of Pixel Similarity\n\n[Credits Ravi Mashru](https:\/\/gist.github.com\/ravimashru\/808584ee6e74338760b04072e1dc73ca)","8e131b7f":"### Using Pixel Similarity\n\nIt's similar to approach [mentioned in FastBook](https:\/\/github.com\/fastai\/fastbook\/blob\/master\/clean\/04_mnist_basics.ipynb)","07f2e5c6":"## Calculate average prediction","2ef66e5f":"## MNIST Image classification","f56c13c2":"## Fastai model with best accuracy(as per book )","65ae4706":"## Using Pixel Similarity","ce6061db":"Note: In tensor representation of the image. The first slices represents image in Y - axis, and second slice represents array in X-axis"}}