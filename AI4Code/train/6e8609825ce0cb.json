{"cell_type":{"314922f3":"code","eaa34057":"code","a0971fc4":"code","3ad364c8":"code","42b081ee":"code","3df0dee1":"code","802c0bbd":"code","03ec5700":"code","c7bf4f84":"code","9fa77416":"code","2805a7a1":"code","4e67254c":"code","0e231170":"code","4dd18c0a":"code","3951a63c":"code","669fd74e":"markdown","bab800fb":"markdown","bf7c735c":"markdown","5de05cd4":"markdown","31b6574a":"markdown","232a775a":"markdown"},"source":{"314922f3":"import tensorflow.keras as keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","eaa34057":"training_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","a0971fc4":"training_data.head()","3ad364c8":"X_train = training_data.drop('label', axis=1).values\ny_train = training_data[['label']].values\n\nX_test = test_data.values\ntest_data.shape","42b081ee":"batch_size = 128\nnum_classes = 10\nepochs = 20\n\nimg_rows, img_cols = 28, 28\ninput_shape = (1, img_rows, img_cols)","3df0dee1":"X_train = X_train.reshape(-1,28,28,1)\nX_test = X_test.reshape(-1,28,28,1)","802c0bbd":"X_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\n\nX_train \/= 255\nX_test \/= 255\nprint('x_train shape:', X_train.shape)\nprint(X_train.shape[0], 'train samples')\nprint(X_test.shape[0], 'test samples')","03ec5700":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, stratify=y_train, \n                                                 test_size=0.15, random_state=42)","c7bf4f84":"# convert class vectors to binary class matrices\n\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_val = keras.utils.to_categorical(y_val, num_classes)\ny_train.shape, y_val.shape ","9fa77416":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","2805a7a1":"optimizer = keras.optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n# optimizer = keras.optimizers.Adam()\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=optimizer,\n              metrics=['accuracy'])","4e67254c":"model.fit(X_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(X_val, y_val))","0e231170":"score = model.evaluate(X_val, y_val, verbose=0)\nscore","4dd18c0a":"# predict results\nresults = model.predict(X_test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results, axis = 1)\n\nresults = pd.Series(results, name=\"Label\")","3951a63c":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"), results],axis = 1)\nsubmission.to_csv(\"cnn_mnist.csv\",index=False)","669fd74e":"# Preprocessing","bab800fb":"# One-hot encode targets","bf7c735c":"# Prediction","5de05cd4":"# Setup dataset","31b6574a":"# Split into train and validation set","232a775a":"# Model "}}