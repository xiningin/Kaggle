{"cell_type":{"5291f479":"code","2a4f16e4":"code","b428a1d3":"code","872fb6de":"code","e57bbf21":"code","2e6d0ada":"code","7283883e":"code","892e5ffa":"code","2aa64411":"code","328244d8":"code","e5aa68a1":"code","8cb6a9bb":"code","1d42e6c4":"code","c5b57b9c":"code","c136c9e8":"code","4f4d6f1c":"code","d3ee8527":"code","280824e8":"code","47d80100":"code","5351e2aa":"code","f074f22b":"code","93e3532c":"code","f50b1afb":"code","303bf174":"code","0d027b0c":"code","0aa73e01":"code","0277c8d2":"code","42260271":"code","fb52cc2c":"code","bed7ae0e":"code","bfb527c4":"code","4a60cb49":"code","26d10e7e":"code","10502d9f":"code","09dd8bb9":"markdown","f0c988bf":"markdown","e8f0faef":"markdown","eee4af97":"markdown","d99385f8":"markdown","9229932d":"markdown","267b5b2c":"markdown","4acae43a":"markdown","cab429a5":"markdown","dbc9c0ea":"markdown"},"source":{"5291f479":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2a4f16e4":"import numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.linear_model import SGDClassifier, LinearRegression\nfrom sklearn.metrics import log_loss, accuracy_score, confusion_matrix, precision_recall_fscore_support, mean_squared_error, mean_absolute_error","b428a1d3":"df_data = pd.read_csv('..\/input\/kickstarter-projects\/ks-projects-201801.csv')\ndf_data.head(30)","872fb6de":"df_data.describe()","e57bbf21":"#convert qualitative variable to dummy variable\ndf_data = pd.get_dummies(df_data, columns = [\"category\", \"main_category\", \"currency\", \"country\", \"state\"])\ndf_data[\"pledged_per_goal\"] = df_data[\"usd_pledged_real\"] \/ df_data[\"usd_goal_real\"]\ndf_data.head()","2e6d0ada":"sns.heatmap(pd.concat([\n    df_data.loc[:, df_data.columns.str.startswith('category')],\n    df_data.loc[:, df_data.columns.str.startswith('state')],\n    df_data[\"usd_pledged_real\"],\n    df_data[\"pledged_per_goal\"]\n], axis = 1).corr())\n\npd.concat([\n    df_data.loc[:, df_data.columns.str.startswith('category')],\n    df_data.loc[:, df_data.columns.str.startswith('state')],\n    df_data[\"usd_pledged_real\"],\n    df_data[\"pledged_per_goal\"]\n], axis = 1).corr()","7283883e":"sns.heatmap(pd.concat([\n    df_data.loc[:, df_data.columns.str.startswith('main_category')],\n    df_data.loc[:, df_data.columns.str.startswith('state')],\n    df_data[\"usd_pledged_real\"],\n    df_data[\"pledged_per_goal\"]\n], axis = 1).corr())\n\npd.concat([\n    df_data.loc[:, df_data.columns.str.startswith('main_category')],\n    df_data.loc[:, df_data.columns.str.startswith('state')],\n    df_data[\"usd_pledged_real\"],\n    df_data[\"pledged_per_goal\"]\n], axis = 1).corr()","892e5ffa":"sns.heatmap(pd.concat([\n    df_data.loc[:, df_data.columns.str.startswith('currency')],\n    df_data.loc[:, df_data.columns.str.startswith('country')],\n    df_data.loc[:, df_data.columns.str.startswith('state')],\n    df_data[\"usd_pledged_real\"]\n], axis = 1).corr())\n\npd.concat([\n    df_data.loc[:, df_data.columns.str.startswith('currency')],\n    df_data.loc[:, df_data.columns.str.startswith('country')],\n    df_data.loc[:, df_data.columns.str.startswith('state')],\n    df_data[\"usd_pledged_real\"]\n], axis = 1).corr()","2aa64411":"sns.heatmap(pd.concat([\n    df_data.loc[:, df_data.columns.str.startswith('usd_goal_real')],\n    df_data.loc[:, df_data.columns.str.startswith('state')],\n    df_data[\"usd_pledged_real\"],\n    df_data[\"pledged_per_goal\"]\n], axis = 1).corr())\n\npd.concat([\n    df_data.loc[:, df_data.columns.str.startswith('usd_goal_real')],\n    df_data.loc[:, df_data.columns.str.startswith('state')],\n    df_data[\"usd_pledged_real\"],\n    df_data[\"pledged_per_goal\"]\n], axis = 1).corr()","328244d8":"sns.heatmap(pd.concat([\n    pd.to_datetime(df_data[\"launched\"]).map(pd.Timestamp.timestamp),\n    pd.to_datetime(df_data[\"deadline\"]).map(pd.Timestamp.timestamp),\n    pd.to_datetime(df_data[\"deadline\"]).map(pd.Timestamp.timestamp) - pd.to_datetime(df_data[\"launched\"]).map(pd.Timestamp.timestamp),\n    df_data.loc[:, df_data.columns.str.startswith('state')],\n    df_data[\"usd_pledged_real\"],\n    df_data[\"pledged_per_goal\"]\n], axis = 1).corr())\n\npd.concat([\n    pd.to_datetime(df_data[\"launched\"]).map(pd.Timestamp.timestamp),\n    pd.to_datetime(df_data[\"deadline\"]).map(pd.Timestamp.timestamp),\n    pd.to_datetime(df_data[\"deadline\"]).map(pd.Timestamp.timestamp) - pd.to_datetime(df_data[\"launched\"]).map(pd.Timestamp.timestamp),\n    df_data.loc[:, df_data.columns.str.startswith('state')],\n    df_data[\"usd_pledged_real\"],\n    df_data[\"pledged_per_goal\"]\n], axis = 1).corr()","e5aa68a1":"df_input = pd.concat([\n    df_data.loc[:, df_data.columns.str.startswith('category_')],\n    df_data.loc[:, df_data.columns.str.startswith('main_category_')],\n    df_data.loc[:, df_data.columns.str.startswith('country_')],\n    df_data.loc[:, df_data.columns.str.startswith('currency_')],\n    df_data.loc[:, df_data.columns.str.startswith('usd_goal_real_')],\n    pd.to_datetime(df_data[\"launched\"]).map(pd.Timestamp.timestamp),\n    pd.to_datetime(df_data[\"deadline\"]).map(pd.Timestamp.timestamp),\n    pd.to_datetime(df_data[\"deadline\"]).map(pd.Timestamp.timestamp) - pd.to_datetime(df_data[\"launched\"]).map(pd.Timestamp.timestamp)\n], axis = 1)\ndf_input.head()","8cb6a9bb":"df_target = pd.concat([\n    df_data.loc[:, df_data.columns.str.startswith('state_')],\n    df_data[[\"usd_pledged_real\", \"pledged_per_goal\", \"backers\"]],\n], axis = 1)\ndf_target.head(30)","1d42e6c4":"df_target.describe()","c5b57b9c":"df_target1 = df_data.loc[:, df_data.columns.str.startswith('state_')]","c136c9e8":"na_data_x = df_input.values\nna_data_y1 = np.argmax(df_target1.values, axis = 1)\nprint(na_data_y1)","4f4d6f1c":"X_train, X_test, Y_train, Y_test = train_test_split(na_data_x, na_data_y1, test_size = 0.1)","d3ee8527":"clf = SGDClassifier(loss = 'log', penalty = 'none', max_iter = 10000, fit_intercept = True, random_state = 1234, tol = 1e-3)\nclf.fit(X_train, Y_train)","280824e8":"y_pred = clf.predict(X_test)\naccuracy = accuracy_score(Y_test, y_pred)\nprecision, recall, f1_score, _ = precision_recall_fscore_support(Y_test, y_pred)","47d80100":"print('Accuracy: {:.3f}%'.format(100 * accuracy))\nprint('Precision: {:.3f}%'.format(100 * precision[0]))\nprint('Recall: {:.3f}%'.format(100 * recall[0]))\nprint('F1 Score: {:.3f}%'.format(100 * f1_score[0]))","5351e2aa":"conf_mat = confusion_matrix(Y_test, y_pred)\nconf_mat = pd.DataFrame(conf_mat,\n                           index = ['\u6b63\u89e3: canceled', '\u6b63\u89e3: failed', '\u6b63\u89e3: live', '\u6b63\u89e3: successful', '\u6b63\u89e3: suspended', '\u6b63\u89e3: undefined'],\n                           columns = ['\u4e88\u6e2c: canceled', '\u4e88\u6e2c: failed', '\u4e88\u6e2c: live', '\u4e88\u6e2c: successful', '\u4e88\u6e2c: suspended', '\u4e88\u6e2c: undefined']\n)\nconf_mat","f074f22b":"df_target2 = df_target[\"usd_pledged_real\"]","93e3532c":"na_data_x = df_input.values\nna_data_y2 = df_target2.values","f50b1afb":"X_train, X_test, Y_train, Y_test = train_test_split(na_data_x, na_data_y2, test_size = 0.1)","303bf174":"regr = LinearRegression(fit_intercept = True)\nregr.fit(X_train, Y_train)","0d027b0c":"y_pred = regr.predict(X_test)\n\nmse = mean_squared_error(Y_test, y_pred)\nmae = mean_absolute_error(Y_test, y_pred)\nrmse = np.sqrt(mse)","0aa73e01":"print(\"MSE: %s\"%round(mse, 3))\nprint(\"MAE: %s\"%round(mae, 3))\nprint(\"RMSE: %s\"%round(rmse, 3))","0277c8d2":"df_target3 = df_target[\"pledged_per_goal\"]","42260271":"na_data_x = df_input.values\nna_data_y3 = df_target3.values","fb52cc2c":"X_train, X_test, Y_train, Y_test = train_test_split(na_data_x, na_data_y3, test_size = 0.1)","bed7ae0e":"regr = LinearRegression(fit_intercept = True)\nregr.fit(X_train, Y_train)","bfb527c4":"df_input.head(10)","4a60cb49":"y_pred = regr.predict(X_test)\n\nmse = mean_squared_error(Y_test, y_pred)\nmae = mean_absolute_error(Y_test, y_pred)\nrmse = np.sqrt(mse)","26d10e7e":"print(\"MSE: %s\"%round(mse, 3))\nprint(\"MAE: %s\"%round(mae, 3))\nprint(\"RMSE: %s\"%round(rmse, 3))","10502d9f":"print(\"MAE of real value: %s\"%round(mean_absolute_error(Y_test, y_pred * X_test[:, -4]), 3))","09dd8bb9":"state\u306e\u5206\u985e","f0c988bf":"\u76f8\u95a2\u3092\u898b\u305f\u3060\u3051\u3067\u306f\u8aac\u660e\u529b\u306e\u3042\u308b\u8aac\u660e\u5909\u6570\u306f\u898b\u3064\u304b\u3089\u305a\u3002","e8f0faef":"ID: input, -  \nname: input, -  \ncategory:input, \u8cea\u7684\u5909\u6570  \nmain_category: input, \u8cea\u7684\u5909\u6570  \ncurrency: input, \u8cea\u7684\u5909\u6570  \ndeadline: input, \u91cf\u7684\u5909\u6570\uff1f  \ngoal: input, \u91cf\u7684\u5909\u6570 -> usd_goal_real  \nlaunched: input, \u91cf\u7684\u5909\u6570\uff1f  \npledged: target, \u91cf\u7684\u5909\u6570 -> usd_pledged_real  \nstate: target, \u8cea\u7684\u5909\u6570  \nbackers: target, \u91cf\u7684\u5909\u6570  \ncountry: input, \u8cea\u7684\u5909\u6570  \nusd_pledged: target, \u91cf\u7684\u5909\u6570 -> usd_pledged_real  \nusd_pledged_real: target, \u91cf\u7684\u5909\u6570  \nusd_goal_real: input, \u91cf\u7684\u5909\u6570","eee4af97":"\u4f7f\u3046target\u306e\u307f\u3092\u62bd\u51fa","d99385f8":"\u60aa\u304f\u306a\u3063\u305f\u2026\u3002","9229932d":"pledge\u306e\u56de\u5e30","267b5b2c":"pledged\/goal \u306e\u8a55\u4fa1\u5024","4acae43a":"pledge\u306e\u56de\u5e30(2)","cab429a5":"\u4f7f\u3046target\u306e\u307f\u3092\u62bd\u51fa","dbc9c0ea":"\u4f7f\u3046target\u306e\u307f\u3092\u62bd\u51fa"}}