{"cell_type":{"6e515558":"code","212e4b74":"code","71c6cdfc":"code","e39d86a6":"code","2854ae4e":"code","5b56c26d":"code","e65941fc":"code","9fe7bac3":"code","9a174812":"code","cd63389e":"code","6b6d41c7":"code","f9692e73":"code","b426ff94":"code","d24f4112":"code","91d1a070":"code","232a1c7c":"markdown","47e725e8":"markdown","ad6b2d0e":"markdown","e55b044f":"markdown","336b19ba":"markdown","833c473a":"markdown"},"source":{"6e515558":"import tweepy\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\nimport pandas as pd","212e4b74":"# Variables that contains the user specific credentials to access Twitter API\n# Please create yours by going to https:\/\/developer.twitter.com\/en \naccess_token = \"797427780162121728-dGSMAkmexIMX7nBr0buTJ1PQqgNj6Nl\"\naccess_token_secret = \"tbDj0egfypeU3NVTZSMaPjwSAYrdfH6Bqgb645IxnPULO\"\nconsumer_key = \"jZDGO8YAQbSxRT3n4I0tVrekb\"\nconsumer_secret = \"Tvj0O5LgWnkkFMFtSNFJmbIIypMQlZ8x41qIHPkdfcp4XpygpS\"","71c6cdfc":"# Connecting to twitter using user credentials\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\n# Searching about any keyword in all the latest tweets from delhi\ntweets_data=api.search('covid',count=100, lang='en', include_rts=False, tweet_mode=\"extended\",\n                      geocode=\"22.5726,88.3638,50km\", )\nprint (\"number of tweets found: \"+ str(len(tweets_data)))\n\n\n# Creating an empty data frame to store the tweets\ntweets = pd.DataFrame()\n\n# Extracting the tweet metadata\nfor status in tweets_data:\n    tweets=tweets.append(status._json, ignore_index=True)","e39d86a6":"# Looking at the data collected\ntweets.head()","2854ae4e":"# Looking at only the tweet texts\ntweets['full_text'].unique()","5b56c26d":"import pandas as pd\nNegativeWords=pd.read_table('..\/input\/sentiment\/Negative_words.txt',encoding='latin-1')\nPositiveWords=pd.read_table('..\/input\/sentiment\/Positive_words.txt',encoding='latin-1')","e65941fc":"# Defining a function to take a sentence as input and provide a sentiment fo it.\ndef ComputeSentimentScore(inputSentence):\n    import re\n    \n    PositiveScore=0\n    NegativeScore=0\n    OverallSentiment=''\n    \n    # converting every word in lowercase\n    newSentence=inputSentence.lower()\n    \n    # Removing everything which is not alphabets\n    WordList= re.sub(r'[^a-z A-Z]',r'',newSentence)\n    \n    # Splitting the sentence into list of words\n    WordList=WordList.split()\n    \n    # Iterate every word and check if it is present in the positive or negative word list\n    for newWord in WordList:\n        #print(newWord)\n        if (newWord in NegativeWords.values):\n            NegativeScore+=1\n        if (newWord in PositiveWords.values):\n            PositiveScore+=1\n    #print('Final Positive Score:',PositiveScore)\n    #print('Final Negative Score:',NegativeScore)\n    #print('Overall Score:',PositiveScore-NegativeScore)\n    \n    if((PositiveScore-NegativeScore) > 0):\n        OverallSentiment='Positive'\n    \n    elif((PositiveScore-NegativeScore) == 0):\n        OverallSentiment='Neutral'\n    \n    else:\n        OverallSentiment='Negative'\n        \n    return(OverallSentiment)","9fe7bac3":"# Calling sentiment score function for every tweet\ntweets['Sentiment']=tweets['full_text'].apply(ComputeSentimentScore)\n\n# Printing sample rows to understand\ntweets[['full_text', 'Sentiment']].head()","9a174812":"# Visualizing the overall sentiment distribution\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfig, subPlot =plt.subplots(nrows=1, ncols=2, figsize=(10,4))\nfig.suptitle(\"Sentiment analysis of Tweets\")\n\n# Grouping the data\nGroupedData=tweets.groupby('Sentiment').size()\n\n# Creating the charts\nGroupedData.plot(kind='bar', ax=subPlot[0], color=['crimson', 'lightblue','yellowgreen'])\nGroupedData.plot(kind='pie', ax=subPlot[1], colors=['crimson', 'lightblue','yellowgreen'])","cd63389e":"# Extracting only the Tweet text\nTweet_Texts=tweets['full_text'].values\n\n# Converting the text column as a single string for wordcloud\nTweets_String=str(Tweet_Texts)","6b6d41c7":"# Observing the tweets text for junk\nprint(Tweets_String)","f9692e73":"# Tweet Text cleaning\nimport re\n\n# Converting the whole text to lowercase\nTweet_Texts_Cleaned = Tweets_String.lower()\n\n# Removing the twitter usernames from tweet string\nTweet_Texts_Cleaned=re.sub(r'@\\w+', ' ', Tweet_Texts_Cleaned)\n\n# Removing the URLS from the tweet string\nTweet_Texts_Cleaned=re.sub(r'http\\S+', ' ', Tweet_Texts_Cleaned)\n\n\n# Deleting everything which is not characters\nTweet_Texts_Cleaned = re.sub(r'[^a-z A-Z]', ' ',Tweet_Texts_Cleaned)\n\n\n# Deleting any word which is less than 4-characters mostly those are stopwords\nTweet_Texts_Cleaned= re.sub(r'\\b\\w{1,3}\\b', '', Tweet_Texts_Cleaned)\n\n# Stripping extra spaces in the text\nTweet_Texts_Cleaned= re.sub(r' +', ' ', Tweet_Texts_Cleaned)\n\nTweet_Texts_Cleaned","b426ff94":"# Plotting the wordcloud \n# you can specify fonts, stopwords, background color and other options\nimport matplotlib.pyplot as plt\n\n# Creating the custom stopwords\ncustomStopwords=list(STOPWORDS)+ ['covid','corona','virus','rt','day','https','will']\n\nwordcloudimage = WordCloud(\n                          max_words=100,\n                          max_font_size=500,\n                          font_step=2,\n                          stopwords=customStopwords,\n                          background_color='white',\n                          width=1000,\n                          height=720\n                          ).generate(Tweet_Texts_Cleaned)\n\nplt.figure(figsize=(15,7))\nplt.axis(\"off\")\nplt.imshow(wordcloudimage)\nwordcloudimage\nplt.show()","d24f4112":"# Tweet Text cleaning\nimport re\n\n# Converting the whole text to lowercase\nTweet_Texts_Cleaned = Tweets_String.lower()\n\n# Removing the twitter usernames from tweet string\nTweet_Texts_Cleaned=re.sub(r'@\\w+', ' ', Tweet_Texts_Cleaned)\n\n# Removing the URLS from the tweet string\nTweet_Texts_Cleaned=re.sub(r'http\\S+', ' ', Tweet_Texts_Cleaned)\n\n\n# Deleting everything which is not characters\nTweet_Texts_Cleaned = re.sub(r'[^a-z A-Z]', ' ',Tweet_Texts_Cleaned)\n\n\n# Deleting any word which is less than 4-characters mostly those are stopwords\n#Tweet_Texts_Cleaned= re.sub(r'\\b\\w{1,3}\\b', '', Tweet_Texts_Cleaned)\n\n# Stripping extra spaces in the text\nTweet_Texts_Cleaned= re.sub(r' +', ' ', Tweet_Texts_Cleaned)\n\nTweet_Texts_Cleaned","91d1a070":"from textblob import TextBlob\n\n# Converting the sample text to a blob\nSampleTextInBlobFormat = TextBlob(Tweet_Texts_Cleaned)\n\n# Finding the noun phrases (important keywords combination) in the text\n# This can help to find out what entities are being talked about in the given text\nNounPhrases=SampleTextInBlobFormat.noun_phrases\n\n# Creating an empty list to hold new values\n# combining the noun phrases using underscore to visualize it as wordcloud\nNewNounList=[]\nfor words in NounPhrases:\n    NewNounList.append(words.replace(\" \", \"_\"))\n    \n# Converting list into a string to plot wordcloud\nNewNounString=' '.join(NewNounList)\nprint('##### Important word combinations ####')\nprint(NewNounString)\n\n########################################################################\n# Plotting the wordcloud\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\n\nfrom wordcloud import WordCloud, STOPWORDS\n\n# Creating a custom list of stopwords\ncustomStopwords=list(STOPWORDS) + ['less','Trump','American','politics','country']\n\nwordcloudimage = WordCloud( max_words=50,\n                            font_step=2 ,\n                            max_font_size=500,\n                            stopwords=customStopwords,\n                            background_color='black',\n                            width=1000,\n                            height=720\n                          ).generate(NewNounString)\n\nplt.figure(figsize=(20,8))\nplt.imshow(wordcloudimage)\nplt.axis(\"off\")\nplt.show()","232a1c7c":"## Twitter Data Analysis\n* Connecting to twitter.com using a user authentication and its api.\n* we can search tweets and get sentiment on about any topic using wide variety of methods.","47e725e8":"## Sentiment analysis\nUsing bag of words model, finding the sentiment of every tweet found","ad6b2d0e":"## Wordcloud analysis","e55b044f":"## Bigram\/Trigram Wordcloud","336b19ba":"### Generating the wordcloud","833c473a":"### Data Preprocessing: Cleaning the text"}}