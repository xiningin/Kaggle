{"cell_type":{"5d9ffea2":"code","974346e0":"code","3de59120":"code","e62c012c":"code","a94fe4e0":"code","faf4141d":"code","989aedbd":"code","913a7863":"code","844f25b3":"code","df93373e":"code","ac5b7e87":"code","8af77b94":"code","4aab8b28":"code","ab567f48":"code","c53414c6":"code","8ea1eb96":"code","3a63300a":"code","d5012dbf":"code","a8e67d09":"markdown","862a7be1":"markdown","24e62a0c":"markdown","abb76dc8":"markdown","c21af91b":"markdown","a7d98b1b":"markdown","05dab4be":"markdown","2237e743":"markdown","f11c5625":"markdown"},"source":{"5d9ffea2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","974346e0":"df = pd.read_excel(\"..\/input\/usa-monthly-retail-trade\/mrtssales92-present.xls\",sheet_name = None, header = 0, encoding = 'utf-8',errors='strict')","3de59120":"for key in df:\n    df[key] = df[key].loc[:, ~df[key].columns.str.contains('^Unnamed')]","e62c012c":"df_cat_ad = {}\ndf_cat_nad = {}\nfor key in df:\n    df_cat = df.copy()\n    df_cat[key]['NAICS  Code'] = df_cat[key]['NAICS  Code'].astype('str')\n    df_cat[key]['NAICS Code Cat'] = df_cat[key]['NAICS  Code'].str.extract('^(\\d{3})$')\n    index = pd.Index(df_cat[key]['Kind of Business'])\n    x = index.get_loc('ADJUSTED(2)')\n    df_cat_ad[key] = df_cat[key].iloc[x:]\n    df_cat_ad[key] = df_cat_ad[key].dropna(subset = ['NAICS Code Cat'])\n    df_cat_ad[key] = df_cat_ad[key].reset_index(drop = True)\n    df_cat_ad[key] = df_cat_ad[key].drop(['NAICS Code Cat'], axis=1)\n    df_cat_nad[key] = df_cat[key].iloc[0:x]\n    df_cat_nad[key] = df_cat_nad[key].dropna(subset = ['NAICS Code Cat'])\n    df_cat_nad[key] = df_cat_nad[key].reset_index(drop = True)\n    df_cat_nad[key] = df_cat_nad[key].drop(['NAICS Code Cat'], axis=1)","a94fe4e0":"def string_finder(row, words):\n    if any(word in field for field in row for word in words):\n        return 1\n    return 0","faf4141d":"match = ['(NA)', '(S)']\nfor key in df:\n    df_cat_nad[key]['isContained'] = df_cat_nad[key].astype(str).apply(string_finder, words=match, axis=1)\n    df_cat_ad[key]['isContained'] = df_cat_ad[key].astype(str).apply(string_finder, words=match, axis=1)\n    print(key)\n    print('Not Adjusted data contains', df_cat_nad[key]['isContained'].sum(), '(NA):Not Available or (S):Suppressed values')\n    print('Adjusted data contains', df_cat_ad[key]['isContained'].sum(), '(NA):Not Available or (S):Suppressed values')\n#     df_cat_nad[key] = df_cat_nad[key].drop(['isContained'], axis=1)\n#     df_cat_ad[key] = df_cat_ad[key].drop(['isContained'], axis=1)","989aedbd":"for key in df:\n    df_cat_nad[key].iloc[ : ,2: ] = df_cat_nad[key].iloc[ : ,2: ].astype(float)\n    df_cat_ad[key].iloc[ : ,2: ] = df_cat_ad[key].iloc[ : ,2: ].astype(float)","913a7863":"for key in df:\n    df_cat_nad[key] = df_cat_nad[key].drop(['isContained'], axis=1)\n    df_cat_ad[key] = df_cat_ad[key].drop(['isContained'], axis=1)","844f25b3":"for key in df:\n    df_cat_nad[key]['Kind of Business'] = df_cat_nad[key]['NAICS  Code'] + ': ' + df_cat_nad[key]['Kind of Business']\n    df_cat_ad[key]['Kind of Business'] = df_cat_ad[key]['NAICS  Code'] + ': ' + df_cat_ad[key]['Kind of Business']","df93373e":"df_cat_nad_m = {}\ndf_cat_ad_m = {}\nfor key in df:\n    df_cat_nad_m[key] = df_cat_nad[key].iloc[ : ,1:-1]\n    df_cat_nad_m[key] = df_cat_nad_m[key].transpose(copy = True)\n    header = df_cat_nad_m[key].iloc[0]\n    df_cat_nad_m[key] = df_cat_nad_m[key][1:]\n    df_cat_nad_m[key] = df_cat_nad_m[key].rename(columns = header)\n    df_cat_nad_m[key] = df_cat_nad_m[key].astype(float)\n    df_cat_nad_m[key] = df_cat_nad_m[key].reset_index().rename(columns={'index': 'Months'})\n    df_cat_ad_m[key] = df_cat_ad[key].iloc[ : ,1:-1]\n    df_cat_ad_m[key] = df_cat_ad_m[key].transpose(copy = True)\n    header = df_cat_ad_m[key].iloc[0]\n    df_cat_ad_m[key] = df_cat_ad_m[key][1:]\n    df_cat_ad_m[key] = df_cat_ad_m[key].rename(columns = header)\n    df_cat_ad_m[key] = df_cat_ad_m[key].astype(float)\n    df_cat_ad_m[key] = df_cat_ad_m[key].reset_index().rename(columns={'index': 'Months'})","ac5b7e87":"df_NA_months = pd.concat(df_cat_nad_m,ignore_index=True)\ndf_A_months = pd.concat(df_cat_ad_m,ignore_index=True)","8af77b94":"df_A_months","4aab8b28":"df_NA_months['Months'] = pd.to_datetime(df_NA_months['Months'], infer_datetime_format=True)\ndf_A_months['Months'] = pd.to_datetime(df_A_months['Months'], infer_datetime_format=True)","ab567f48":"df_NA_months = df_NA_months.set_index('Months')\ndf_A_months = df_A_months.set_index('Months')","c53414c6":"from fbprophet import Prophet","8ea1eb96":"df_A_months","3a63300a":"def change_name(timeseries):\n    ts = {}\n    ts['ds'] = timeseries.index\n    ts['y'] = timeseries.values\n    ts_df = pd.DataFrame(data = ts)\n    return ts_df","d5012dbf":"for i in range(0,12):\n    ts = change_name(df_A_months.iloc[:,i])\n    model = Prophet(yearly_seasonality=False,daily_seasonality=False)\n    model.fit(ts)\n    forecast = model.make_future_dataframe(periods=300, include_history=False)\n    forecast = model.predict(forecast)\n    figure = model.plot(forecast, xlabel = 'Date', ylabel = df_A_months.columns.values[i])\n    figure2 = model.plot_components(forecast)","a8e67d09":"Slicing Database into two dataframes of Not Adjusted and Adjusted Main Categories (NAICS code : 4xx, 7xx)","862a7be1":"## Data Cleaning","24e62a0c":"### Extract main categories","abb76dc8":"## Forcasting using Facebook Prophet","c21af91b":"removing Unnamed columns created due to encoding error by pandas in the dataframe","a7d98b1b":"Since our data is Categorical data we need to modify it\n* seperating Total from data \n* Encoding rows into columns\n* converting Rows to column and making a single dataframe for all years","05dab4be":"Since data contains many different kinds of dtypes, cleaning data of different dtypes","2237e743":"checking weather data contains (NA):Not Available or (S):Suppressed values","f11c5625":"### Time Series Indexing\nConverting Months to Datetime64[ns] for time series analysis"}}