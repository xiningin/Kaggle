{"cell_type":{"0a25a7c2":"code","ce481791":"code","af292b8d":"code","8c6424e3":"code","8ded757c":"code","f51229a6":"code","60c21d4c":"code","79e09efe":"code","e6058617":"markdown","7f3ccacd":"markdown","e5089dd0":"markdown","ea56def0":"markdown","3cd9bfc9":"markdown"},"source":{"0a25a7c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nfrom matplotlib import pyplot as plt\nimport cv2 \nimport os\nprint(os.listdir(\"..\/input\/dressr\/dressr\/Sports\"))\nimport csv\n\nfrom sklearn.cluster import DBSCAN\n# Any results you write to the current directory are saved as output.","ce481791":"sports = \"..\/input\/dressr\/dressr\/Sports\"\ncasual = \"..\/input\/dressr\/dressr\/Casual\"\nformal = \"..\/input\/dressr\/dressr\/Formal\"","af292b8d":"img = cv2.imread(\"..\/input\/dressr\/dressr\/Sports\/71nsuyxfXWL._SY879._SX._UX._SY._UY_.jpg\")\nmask = np.zeros(img.shape[:2],np.uint8)\nsize = img.shape\nbgdModel = np.zeros((1,65),np.float64)\nfgdModel = np.zeros((1,65),np.float64)\n\n#    rect = (x1,y1,x2-x1, y2-y1)\nrect = (20,20,size[0],size[1])\ncv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)\nmask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')\nimg = img*mask2[:,:,np.newaxis]\nplt.imshow(img),plt.colorbar(),plt.show()","8c6424e3":"x = []\nfor i in os.listdir(sports):\n    img = cv2.imread('..\/input\/dressr\/dressr\/Sports\/{0}'.format(i))\n    mask = np.zeros(img.shape[:2],np.uint8)\n    size = img.shape\n    bgdModel = np.zeros((1,65),np.float64)\n    fgdModel = np.zeros((1,65),np.float64)\n\n#    rect = (x1,y1,x2-x1, y2-y1)\n    \n    rect = (100,100,size[0],size[1])\n    cv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)\n    mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')\n    img = img*mask2[:,:,np.newaxis]\n    plt.imshow(img),plt.colorbar(),plt.show()","8ded757c":"color_frame= pd.DataFrame([[\"Red\",\"c44240\"],[\"Green\",\"6fc276\"],[\"Blue\",\"276ab3\"],[\"Pink\",\"ff7fa7\"],[\"Yellow\",\"eae90e\"],[\"Orange\",\"9e9412\"]])\ncolor_frame","f51229a6":"reader = csv.DictReader(color_frame)\nlab_matrix = np.array([row for row in reader])\n","60c21d4c":"def rgb2lab ( inputColor ) :\n    num = 0\n    RGB = [0, 0, 0]\n    for value in inputColor :\n        value = float(value) \/ 255\n        if value > 0.04045 :\n            value = ( ( value + 0.055 ) \/ 1.055 ) ** 2.4\n        else :\n            value = value \/ 12.92\n            RGB[num] = value * 100\n            num = num + 1 \n            XYZ = [0, 0, 0,]\n            X = RGB [0] * 0.4124 + RGB [1] * 0.3576 + RGB [2] * 0.1805\n            Y = RGB [0] * 0.2126 + RGB [1] * 0.7152 + RGB [2] * 0.0722\n            Z = RGB [0] * 0.0193 + RGB [1] * 0.1192 + RGB [2] * 0.9505\n            XYZ[ 0 ] = round( X, 4 )\n            XYZ[ 1 ] = round( Y, 4 )\n            XYZ[ 2 ] = round( Z, 4 )\n\n            XYZ[ 0 ] = float( XYZ[ 0 ] ) \/ 95.047         # ref_X =  95.047   Observer= 2\u00b0, Illuminant= D65\n            XYZ[ 1 ] = float( XYZ[ 1 ] ) \/ 100.0          # ref_Y = 100.000\n            XYZ[ 2 ] = float( XYZ[ 2 ] ) \/ 108.883        # ref_Z = 108.883\n            num = 0\n            for value in XYZ :\n                if value > 0.008856 :\n                    value = value ** ( 0.3333333333333333 )\n                else :\n                    value = ( 7.787 * value ) + ( 16 \/ 116 )\n                    XYZ[num] = value\n                    num = num + 1\n                    Lab = [0, 0, 0]\n                    L = ( 116 * XYZ[ 1 ] ) - 16\n                    a = 500 * ( XYZ[ 0 ] - XYZ[ 1 ] )\n                    b = 200 * ( XYZ[ 1 ] - XYZ[ 2 ] )\n                    Lab [ 0 ] = round( L, 4 )\n                    Lab [ 1 ] = round( a, 4 )\n                    Lab [ 2 ] = round( b, 4 )\n                    return Lab","79e09efe":"#eps = 8 \u2013 5\n#mis_samples=50-40\n\nimg= cv2.imread(\"..\/input\/dressr\/dressr\/Casual\/51axioyItqL._SX679._SX._UX._SY._UY_.jpg\")\nlabimg = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)\nn = 0\nwhile(n<3):\n    labimg = cv2.pyrDown(labimg)\n    n = n+1\n\nfeature_image=np.reshape(labimg, [-1, 3])\nrows, cols, chs = labimg.shape\n \ndb = DBSCAN(eps=5,min_samples=40 ,metric = 'euclidean',algorithm ='auto').fit(feature_image)\nlabels = db.labels_\n \nplt.figure(2)\nplt.subplot(2, 1, 1)\nplt.imshow(img)\nplt.axis('off')\nplt.subplot(2, 1, 2)\nplt.imshow(np.reshape(labels, [rows, cols]))\nplt.axis('off')\nplt.show()\n \narray = []\nn = 0\nfor x in labels:\n    if x == 1:\n        n += 1\n    elif x == -1:\n        n +=1\n    else:\n        array.append(n)\n        n += 1\n\nred = 0\nblue = 0\ngreen = 0\nfor index in array:\n\tred += feature_image[index][0]\n\tgreen += feature_image[index][1]\n\tblue += feature_image[index][2]\nred = red\/len(array) \ngreen = green\/len(array)\nblue = blue\/len(array)\n\n\nreader = csv.DictReader(https:\/\/xkcd.com\/color\/rgb.txt)\nlab_matrix = np.array([map(float, row.values()) for row in reader])\n \n# the reference color\nfrom colormath.color_objects import sRGBColor, LabColor\nnew_color = [red,green,blue]\nnew_color = rgb2lab(new_color)\ncolor = LabColor(lab_l=new_color[0], lab_a = new_color[1], lab_b=new_color[2])\n \n# find the closest match to `color` in `lab_matrix`\nfrom colormath.color_diff import delta_e_cie2000\ndelta = color.delta_e_matrix(lab_matrix)\nnearest_color = lab_matrix[np.argmin(delta)]\n \n\n","e6058617":"First attempts done with GrabCut  \nThese were later discarded as it would require the user to also make a second input and complicate the availability of the app","7f3ccacd":"The code from below was taken from the code in this [link](https:\/\/stackoverflow.com\/questions\/13405956\/convert-an-image-rgb-lab-with-python\/13423989)  ","e5089dd0":"def _floodfill(self, img):\n    back = Back._scharr(img)\n    # Binary thresholding.\n    back = back > 0.05\n    \n    # Thin all edges to be 1-pixel wide.\n    back = skm.skeletonize(back)\n\n    # Edges are not detected on the borders, make artificial ones.\n    back[0, :] = back[-1, :] = True\n    back[:, 0] = back[:, -1] = True\n\n    # Label adjacent pixels of the same color.\n    labels = label(back, background=-1, connectivity=1)\n    \n    # Count as background all pixels labeled like one of the corners.\n    corners = [(1, 1), (-2, 1), (1, -2), (-2, -2)]\n    for l in (labels[i, j] for i, j in corners):\n        back[labels == l] = True","ea56def0":"I also have a basic floodfill algorithm found on the internet that isn't in the current version, but we plan on experimenting to see if we can get similar results","3cd9bfc9":"So since the the xkcd list was in a txt format, and it had a few too many classifications required for the demo version of the app.  \nI couldn't find a proper way to find what classified as \"red\" for instance so these are just the rgb values kept in the array.  \nUnfortunately we simply didn't ahve enough time left in development because when we finally go to the stage of removing backgrounds our exam weeks rolled over which halted the progress.  \nAs time goes on, I'll do my best to translate all the color survey findings into the array here."}}