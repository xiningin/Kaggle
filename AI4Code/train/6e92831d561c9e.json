{"cell_type":{"545ab7c5":"code","b903b82c":"code","690c5486":"code","d4f91641":"code","24f0a477":"code","6f715942":"code","7f5fc1af":"code","6db07512":"code","61ca12f9":"code","3a37bee4":"code","d208c8c0":"code","56cf8780":"code","bdb1cf21":"code","d9282517":"code","9de2a7c8":"code","7a5da944":"code","b449e58e":"code","177fe081":"code","3c792e08":"code","355b8c44":"code","65d30260":"code","fdb9a411":"code","d54e8ed4":"code","b2b6e0b9":"code","23a0c159":"code","4bfc0d6e":"code","5af855ee":"code","9630d940":"code","a83d5fb9":"code","fb0f0862":"code","3a3fc495":"code","5dae3e2d":"markdown","73a27d92":"markdown","89ea11e4":"markdown","494d47e0":"markdown","b2c05d54":"markdown","c7770c5e":"markdown","22137c33":"markdown","aec49f22":"markdown","dc35fa1e":"markdown","35de801e":"markdown","35d94272":"markdown","50604d2f":"markdown","c5c39923":"markdown","59beba44":"markdown","f15d6e34":"markdown","5344f697":"markdown","52138745":"markdown","1ec2648e":"markdown","230c6b8f":"markdown","babccaf2":"markdown","f3494e42":"markdown","b16f424b":"markdown","872fe37e":"markdown","113240ef":"markdown","634d7d54":"markdown","e817ede2":"markdown","55cd19ac":"markdown","10fab3d1":"markdown","c07a2b48":"markdown","4989a38b":"markdown","d2919497":"markdown","65892100":"markdown","8f5f868d":"markdown","da811bfb":"markdown","decb9310":"markdown","a7161f8b":"markdown","da2216b2":"markdown","a0034eed":"markdown","a5ca01df":"markdown","5b8074d3":"markdown","bc6e243d":"markdown","62b3abed":"markdown","33bbb57b":"markdown","9ce324e2":"markdown","ca72719b":"markdown","080b8ce7":"markdown","f47ff315":"markdown","1d5eb38a":"markdown","ed202209":"markdown","acc74a23":"markdown","7040ba7b":"markdown","f2ff1f35":"markdown","d25cccd3":"markdown","1561dc20":"markdown"},"source":{"545ab7c5":"# Pandas is a software library written for the Python programming language for data manipulation and analysis.\nimport pandas as pd\n# NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays\nimport numpy as np\n# Matplotlib is a plotting library for python and pyplot gives us a MatLab like plotting framework. We will use this in our plotter function to plot data.\nimport matplotlib.pyplot as plt\n#Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics\nimport seaborn as sns\n# Preprocessing allows us to standarsize our data\nfrom sklearn import preprocessing\n# Allows us to split our data into training and testing data\nfrom sklearn.model_selection import train_test_split\n# Allows us to test parameters of classification algorithms and find the best one\nfrom sklearn.model_selection import GridSearchCV\n# Logistic Regression classification algorithm\nfrom sklearn.linear_model import LogisticRegression\n# Support Vector Machine classification algorithm\nfrom sklearn.svm import SVC\n# Decision Tree classification algorithm\nfrom sklearn.tree import DecisionTreeClassifier\n# K Nearest Neighbors classification algorithm\nfrom sklearn.neighbors import KNeighborsClassifier","b903b82c":"def plot_confusion_matrix(y,y_predict):\n    \"this function plots the confusion matrix\"\n    from sklearn.metrics import confusion_matrix\n\n    cm = confusion_matrix(y, y_predict)\n    ax= plt.subplot()\n    sns.heatmap(cm, annot=True, ax = ax); #annot=True to annotate cells\n    ax.set_xlabel('Predicted labels')\n    ax.set_ylabel('True labels')\n    ax.set_title('Confusion Matrix'); \n    ax.xaxis.set_ticklabels(['did not land', 'land']); ax.yaxis.set_ticklabels(['did not land', 'landed'])","690c5486":"data = pd.read_csv(\"https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBM-DS0321EN-SkillsNetwork\/datasets\/dataset_part_2.csv\")\n\n# If you were unable to complete the previous lab correctly you can uncomment and load this csv\n\n# data = pd.read_csv('https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork\/api\/dataset_part_2.csv')\n\ndata.head()","d4f91641":"data.shape","24f0a477":"X = pd.read_csv('https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBM-DS0321EN-SkillsNetwork\/datasets\/dataset_part_3.csv')\n\n# If you were unable to complete the previous lab correctly you can uncomment and load this csv\n\n# X = pd.read_csv('https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork\/api\/dataset_part_3.csv')\n\nX.head(100)","6f715942":"Y = data.Class.to_numpy()","7f5fc1af":"Y","6db07512":"# students get this \nX = preprocessing.StandardScaler().fit_transform(X)","61ca12f9":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)","3a37bee4":"Y_test.shape","d208c8c0":"parameters ={'C':[0.01,0.1,1],\n             'penalty':['l2'],\n             'solver':['lbfgs']}","56cf8780":"parameters ={\"C\":[0.01,0.1,1],'penalty':['l2'], 'solver':['lbfgs']}# l1 lasso l2 ridge\n\nlr=LogisticRegression()\ngscv = GridSearchCV(lr,parameters,scoring='accuracy',cv=10)\nlogreg_cv = gscv.fit(X_train,Y_train)","bdb1cf21":"print(\"tuned hpyerparameters :(best parameters) \",logreg_cv.best_params_)\nprint(\"accuracy :\",logreg_cv.best_score_)","d9282517":"print('Accuracy=  ',logreg_cv.score(X_test,Y_test))","9de2a7c8":"yhat=logreg_cv.predict(X_test)\nplot_confusion_matrix(Y_test,yhat)","7a5da944":"parameters = {'kernel':('linear', 'rbf','poly','rbf', 'sigmoid'),\n              'C': np.logspace(-3, 3, 5),\n              'gamma':np.logspace(-3, 3, 5)}\nsvm = SVC()\ngscv = GridSearchCV(svm,parameters,scoring='accuracy',cv=10)\nsvm_cv = gscv.fit(X_train,Y_train)\n\n\nprint(\"tuned hpyerparameters :(best parameters) \",svm_cv.best_params_)\nprint(\"accuracy :\",svm_cv.best_score_)\nprint(\"accuracy: \",svm_cv.score(X_test,Y_test))","b449e58e":"print(\"accuracy: \",svm_cv.score(X_test,Y_test))","177fe081":"yhat=svm_cv.predict(X_test)\nplot_confusion_matrix(Y_test,yhat)","3c792e08":"parameters = {'criterion': ['gini', 'entropy'],\n     'splitter': ['best', 'random'],\n     'max_depth': [2*n for n in range(1,10)],\n     'max_features': ['auto', 'sqrt'],\n     'min_samples_leaf': [1, 2, 4],\n     'min_samples_split': [2, 5, 10]}\n\ntree = DecisionTreeClassifier()","355b8c44":"gscv = GridSearchCV(tree,parameters,scoring='accuracy',cv=10)\ntree_cv = gscv.fit(X_train,Y_train)","65d30260":"print(\"tuned hpyerparameters :(best parameters) \",tree_cv.best_params_)\nprint(\"accuracy :\",tree_cv.best_score_)","fdb9a411":"print(\"accuracy: \",tree_cv.score(X_test,Y_test))","d54e8ed4":"yhat = svm_cv.predict(X_test)\nplot_confusion_matrix(Y_test,yhat)","b2b6e0b9":"parameters = {'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n              'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],\n              'p': [1,2]}\n\nKNN = KNeighborsClassifier()","23a0c159":"gscv = GridSearchCV(KNN,parameters,scoring='accuracy',cv=10)\nknn_cv = gscv.fit(X_train,Y_train)","4bfc0d6e":"print(\"tuned hpyerparameters :(best parameters) \",knn_cv.best_params_)\nprint(\"accuracy :\",knn_cv.best_score_)","5af855ee":"print(\"accuracy: \",knn_cv.score(X_test,Y_test))","9630d940":"yhat = knn_cv.predict(X_test)\nplot_confusion_matrix(Y_test,yhat)","a83d5fb9":"algorithms = {'KNN':knn_cv.best_score_,'Tree':tree_cv.best_score_,'LogisticRegression':logreg_cv.best_score_}\nbestalgorithm = max(algorithms, key=algorithms.get)\n\nprint('Best Algorithm is',bestalgorithm,'with a score of',algorithms[bestalgorithm])\nif bestalgorithm == 'Tree':\n    print('Best Params is :',tree_cv.best_params_)\nif bestalgorithm == 'KNN':\n    print('Best Params is :',knn_cv.best_params_)\nif bestalgorithm == 'LogisticRegression':\n    print('Best Params is :',logreg_cv.best_params_)","fb0f0862":"algorithms","3a3fc495":"# creating the bar plot\nplt.bar(algorithms.keys(), algorithms.values())\nplt.title(\"Bar Graph showing Accuracy for each Algorithm\")\nplt.ylabel(\"Accuracy Score\")\nplt.xlabel(\"Algorithmns\")\nplt.show()","5dae3e2d":"## TASK  2\n","73a27d92":"## Authors\n","89ea11e4":"Find the method performs best:\n","494d47e0":"<code>X_train, X_test, Y_train, Y_test<\/code>\n","b2c05d54":"We can plot the confusion matrix\n","c7770c5e":"We split the data into training and testing data using the  function  <code>train_test_split<\/code>.   The training data is divided into validation data, a second set used for training  data; then the models are trained and hyperparameters are selected using the function <code>GridSearchCV<\/code>.\n","22137c33":"Space X advertises Falcon 9 rocket launches on its website with a cost of 62 million dollars; other providers cost upward of 165 million dollars each, much of the savings is because Space X can reuse the first stage. Therefore if we can determine if the first stage will land, we can determine the cost of a launch. This information can be used if an alternate company wants to bid against space X for a rocket launch.   \n\n### Objective\n**create a machine learning pipeline to predict if the first stage will land given the data from the preceding labs**\n","aec49f22":"## TASK  7\n","dc35fa1e":"| Date (YYYY-MM-DD) | Version | Changed By    | Change Description      |\n| ----------------- | ------- | ------------- | ----------------------- |\n| 2021-08-31        | 1.1     | Lakshmi Holla | Modified markdown       |\n| 2020-09-20        | 1.0     | Joseph        | Modified Multiple Areas |\n","35de801e":"## Objectives\n","35d94272":"Create a support vector machine object then  create a  <code>GridSearchCV<\/code> object  <code>svm_cv<\/code> with cv - 10.  Fit the object to find the best parameters from the dictionary <code>parameters<\/code>.\n","50604d2f":"## TASK  8\n","c5c39923":"Create a decision tree classifier object then  create a  <code>GridSearchCV<\/code> object  <code>tree_cv<\/code> with cv = 10.  Fit the object to find the best parameters from the dictionary <code>parameters<\/code>.\n","59beba44":"![](https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork\/api\/Images\/landing\\_1.gif)\n","f15d6e34":"Create a NumPy array from the column <code>Class<\/code> in <code>data<\/code>, by applying the method <code>to_numpy()<\/code>  then\nassign it  to the variable <code>Y<\/code>,make sure the output is a  Pandas series (only one bracket df\\['name of  column']).\n","5344f697":"Load the data\n","52138745":"We output the <code>GridSearchCV<\/code> object for logistic regression. We display the best parameters using the data attribute <code>best_params\\_<\/code> and the accuracy on the validation data using the data attribute <code>best_score\\_<\/code>.\n","1ec2648e":"Standardize the data in <code>X<\/code> then reassign it to the variable  <code>X<\/code> using the transform provided below.\n","230c6b8f":"This function is to plot the confusion matrix.\n","babccaf2":"## TASK  10\n","f3494e42":"Calculate the accuracy on the test data using the method <code>score<\/code>:\n","b16f424b":"Estimated time needed: **60** minutes\n","872fe37e":"Perform exploratory  Data Analysis and determine Training Labels\n\n*   create a column for the class\n*   Standardize the data\n*   Split into training data and test data\n\n\\-Find best Hyperparameter for SVM, Classification Trees and Logistic Regression\n\n*   Find the method performs best using test data\n","113240ef":"## TASK  6\n","634d7d54":"We will import the following libraries for the lab\n","e817ede2":"## Assignment:  Machine Learning Prediction\n","55cd19ac":"<a href=\"https:\/\/www.linkedin.com\/in\/joseph-s-50398b136\/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDS0321ENSkillsNetwork26802033-2021-01-01\">Joseph Santarcangelo<\/a> has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD.\n","10fab3d1":"We can plot the confusion matrix\n","c07a2b48":"## TASK  3\n","4989a38b":"Lets look at the confusion matrix:\n","d2919497":"![](https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork\/api\/Images\/crash.gif)\n","65892100":"Use the function train_test_split to split the data X and Y into training and test data. Set the parameter test_size to  0.2 and random_state to 2. The training data and test data should be assigned to the following labels.\n","8f5f868d":"## Load the dataframe\n","da811bfb":"Most unsuccessful landings are planed. Space X; performs a controlled landing in the oceans.\n","decb9310":"We can plot the confusion matrix\n","a7161f8b":"we can see we only have 18 test samples.\n","da2216b2":"# **Space X  Falcon 9 First Stage Landing Prediction**\n","a0034eed":"## TASK  11\n","a5ca01df":"## TASK  4\n","5b8074d3":"Create a logistic regression object  then create a  GridSearchCV object  <code>logreg_cv<\/code> with cv = 10.  Fit the object to find the best parameters from the dictionary <code>parameters<\/code>.\n","bc6e243d":"Calculate the accuracy on the test data using the method <code>score<\/code>:\n","62b3abed":"Copyright \u00a9 2020 IBM Corporation. All rights reserved.\n","33bbb57b":"## TASK  5\n","9ce324e2":"Examining the confusion matrix, we see that logistic regression can distinguish between the different classes.  We see that the major problem is false positives.\n","ca72719b":"## TASK  12\n","080b8ce7":"## Import Libraries and Define Auxiliary Functions\n","f47ff315":"Calculate the accuracy of tree_cv on the test data using the method <code>score<\/code>:\n","1d5eb38a":"## TASK  9\n","ed202209":"<center>\n    <img src=\"https:\/\/gitlab.com\/ibm\/skills-network\/courses\/placeholder101\/-\/raw\/master\/labs\/module%201\/images\/IDSNlogo.png\" width=\"300\" alt=\"cognitiveclass.ai logo\"  \/>\n<\/center>\n","acc74a23":"## Change Log\n","7040ba7b":"Several examples of an unsuccessful landing are shown here:\n","f2ff1f35":"Create a k nearest neighbors object then  create a  <code>GridSearchCV<\/code> object  <code>knn_cv<\/code> with cv = 10.  Fit the object to find the best parameters from the dictionary <code>parameters<\/code>.\n","d25cccd3":"Calculate the accuracy of tree_cv on the test data using the method <code>score<\/code>:\n","1561dc20":"## TASK  1\n"}}