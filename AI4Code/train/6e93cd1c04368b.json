{"cell_type":{"687282f7":"code","60cdcff2":"code","e02a65e3":"code","3dc4067a":"code","8bc77347":"code","43c534d6":"code","52d6127d":"code","b539effd":"code","172516f2":"code","034c464b":"code","096f4874":"code","c3449048":"code","ca81dfd0":"code","f7444dca":"code","967bc356":"code","9e9bd8a4":"code","cce5d6eb":"code","4bcb80fc":"code","ef5bbc94":"code","e3556c2a":"code","36b4a188":"code","a99bc7a3":"code","64f87744":"code","aea4ca5f":"code","fd1ef50b":"code","da7f1c7a":"code","3311a492":"code","3cae9695":"code","3c712d8b":"code","8a414118":"code","d84a8fb6":"code","a1c9e55a":"code","461f79aa":"code","b13186e7":"code","8b97d583":"code","110b688b":"code","26fe3536":"code","49149eac":"code","c2e6b495":"code","85c3bf88":"code","8d189ac8":"code","707369f8":"code","9b4ecc36":"code","6ffbdc07":"code","6cbdb223":"code","e920f630":"code","5e60b0a7":"code","88bff50d":"code","b16f6cdf":"code","d1d225e4":"code","0ca707c5":"code","656d596e":"code","f32b4f40":"code","ce2d7ae5":"code","27196af5":"code","75c160b4":"code","85137704":"code","5534f451":"code","89b26cea":"code","0d204350":"code","a5c300ca":"code","0d0535f4":"code","de8c892c":"code","1237dcdb":"code","c2c871f9":"code","2991b07c":"code","4c1ff638":"code","0a4798ea":"code","14e7a591":"code","ffd8791c":"code","54c86685":"code","18fb365f":"code","6fe67c7a":"code","2a53a67a":"code","c91c691d":"code","ec006876":"code","54c46501":"code","2cfe1810":"code","7163e6a8":"code","81303333":"code","118e06de":"code","9acd8b17":"code","c9671c04":"code","25c97e3c":"code","d27efd6b":"code","809135fd":"code","088ad8f6":"code","aa9672b8":"code","5c349b66":"code","54cdc56a":"code","ac5cd9f8":"code","fa656e28":"code","9083da82":"code","2dda61f1":"code","d9c6d880":"code","bca68367":"code","57232ea4":"code","37ab1d67":"code","5ea4b028":"code","e2921b43":"code","353891f5":"code","f6653a07":"code","6255cafb":"code","807e4587":"code","682586a5":"code","c1e894e9":"code","d6fa6dc9":"code","945ea0d5":"code","24859337":"code","cae23f7a":"code","277a6735":"code","012430cd":"code","76d0b1df":"code","a64b6b8f":"code","d724a6d4":"code","5348cd79":"code","e1c7a705":"code","b5a6c9f8":"markdown","80188171":"markdown","ea1e6cb0":"markdown","5538de4c":"markdown","a40f5e43":"markdown","6f38f020":"markdown","b59504ae":"markdown","1f21627b":"markdown","afb1f90c":"markdown","3ee28ea5":"markdown","c6489a2c":"markdown","579351b8":"markdown","9dbd02b7":"markdown"},"source":{"687282f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\nfrom plotly.offline import init_notebook_mode, plot, iplot\nimport plotly as py\ninit_notebook_mode(connected=True) \nimport plotly.graph_objs as go # plotly graphical object\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60cdcff2":"data = pd.read_csv('\/kaggle\/input\/fifa-21-complete-player-dataset\/fifa21_male2.csv')\ndata.head() #Showing first 5 element off the dataset","e02a65e3":"datas = data[[\"PAC\",\"SHO\",\"PAS\",\"DRI\",\"DEF\",\"PHY\"]] #Based on FIFA 21 Cards Features, reduced number of columns\ndatas.corr()                                        #Correlations between specified properties.","3dc4067a":"#Creating a correlation map in this part;\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(datas.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","8bc77347":"datas2 = data[[\"Name\",\"PAC\",\"SHO\",\"PAS\",\"DRI\",\"DEF\",\"PHY\"]] #In this line, I added 'Name' column for displaying next line.\ndatas2.head(10)                                             #Displaying first 10 element with name.","43c534d6":"datas2.PAC.plot(kind = 'line', color = 'g',label = 'Pace',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndatas2.DRI.plot(color = 'r',label = 'Dribbling',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","52d6127d":"#Scatter Plot\n#x=Pace, y= Dribbling\ndatas.plot(kind='scatter', x='PAC',y='DRI',alpha = 0.5, color = 'red')\nplt.xlabel('Pace')\nplt.ylabel('Dribbling')\nplt.title('Pace - Dribbling Scatter Plot')","b539effd":"#Histogram\n#bins = number of bar in figure\ndatas.PAS.plot(kind = 'hist', bins = 50, figsize = (12,12))  #Pass Rating Frequencys\nplt.show()","172516f2":"#Filtering DataFrame with Pandas\nx = datas2['PHY']>90 #Players that have 90+ Rating Physicalities.\ndatas2[x]","034c464b":"#Filtering DataFrame with Pandas and Logical Expression\n\n#We are tyring to find players that have pace and defensive ability.\n\ndatas2[np.logical_and(datas2['DEF']>75, datas2['PAC']>90)]","096f4874":"#Previous conditions can be found also in this way\n\ndatas2[(datas2['DEF']>75) & (datas2['PAC']>90)]","c3449048":"#This is just an example, please ignore it regarding the specified dataset.\n\n#User Defined Function\n\ndef tuple_ex():\n    \"\"\"return defined t tuple\"\"\"\n    t = (1,2,3)\n    return t\n\na,b,c = tuple_ex()\n\nprint(a)\nprint(b)\nprint(c)","ca81dfd0":"#This is just an example, please ignore it regarding the specified dataset.\n\n#Its about global, local variables.\n\nx = 2 #global variable\n\ndef f():\n    x = 3 #Local variable\n    return x\n\nprint(x)    #You see global variable value\nprint(f())  #You see local variable value","f7444dca":"#This is just an example, please ignore it regarding the specified dataset.\n\n#What if there is no local scope\n\nx = 5\n\ndef f():\n    y = 2*x # there is no local scope x\n    return y\n\nprint(f()) #It uses global scope x\n\n#First local scope searched, then global searched, if two of them can not be found, lastly built in scope searched","967bc356":"#This is just an example, please ignore it regarding the specified dataset.\n\n#How can we learn what is built in scope\n\nimport builtins\ndir(builtins)","9e9bd8a4":"#This is just an example, please ignore it regarding the specified dataset.\n\n#Nested Function\n\ndef square():\n    \"\"\"Return square of value\"\"\"\n    def add():\n        \"\"\"add two local variable\"\"\"\n        \n        x = 2\n        y = 3\n        z = x + y\n        \n        return z\n    return add()**2\nprint(square())","cce5d6eb":"#This is just an example, please ignore it regarding the specified dataset.\n\n#Default Arguments\n\ndef f(a, b = 1 , c = 2 ):\n    \n    y = a + b + c\n    return y\n\nprint(f(5))\n\n#What if we want to change default arguments\n\nprint(f(5,4,3))","4bcb80fc":"#This is just an example, please ignore it regarding the specified dataset.\n\n#Flexible Arguments\n\ndef f(*args):\n    for i in args:\n        print(i)\n\nf(1)\nprint(\"\")\nf(1,2,3,4)\n\n#flexible arguments **kwargs that is dictionary\n\ndef f(**kwargs):\n    \"\"\"print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():\n        print(key,\" \",value)\nf(country = 'spain', capital = 'madrid', population = 123456)","ef5bbc94":"#This is just an example, please ignore it regarding the specified dataset.\n\n#User Defined Function long-way\n\ndef square(x):\n    return x**2\nprint(square(5))\n\n#lambda function() (Short Way)\n\nsquare = lambda x : x**2 #where x is name of argument\nprint(square(4))\n\ntot = lambda x,y,z : x + y + z #Where x,y,z are names of arguments\nprint(tot(1,2,3))","e3556c2a":"#This is just an example, please ignore it regarding the specified dataset.\n\n#Anonymous Function\n\nnumber_list = [1,2,3]\ny = map(lambda x: x**2, number_list)\n\nprint(list(y))\n\n#at the end, we try to print as a list.","36b4a188":"#This is just an example, please ignore it regarding the specified dataset.\n\n#Iteration Example\n\nname = 'Ronaldo'\n\nit = iter(name)\n\nprint(next(it)) #print next iteration\n\nprint(*it)      #print remaining iteration","a99bc7a3":"#This is just an example, please ignore it regarding the specified dataset.\n\n#Zip Example\n\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\n\nz = zip(list1,list2)\nprint(z)\n\nz_list = list(z)\nprint(z_list)\n\n#Unzip Example\n\nun_zip = zip(*z_list)\nun_list1, un_list2 = list(un_zip) #Unzip return tuple\n\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))\n","64f87744":"#This is just an example, please ignore it regarding the specified dataset.\n\n#List Compherension\n\nnum1 = [1,2,3]\n\nnum2 = [i + 1 for i in num1] #list compherension\n\nprint(num2)","aea4ca5f":"#This is just an example, please ignore it regarding the specified dataset.\n\n#Conditionals on Iterable\n\nnum1 = [5,10,15]\n\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i + 5 for i in num1]\n\nprint(num2)","fd1ef50b":"datas2.head()","da7f1c7a":"#Like a Return of the King, I returned to dataset (;\n\n#I classify players as fast or slow. The threshold will be 75. Why is that? Because i wanted it that way.\n\nthreshold = 75\n\ndatas2[\"Pace_Level\"] = [\"Fast\" if i > threshold else \"Slow\" for i in datas2.PAC]\n\ndatas2.loc[:10,[\"Name\",\"PAC\",\"Pace_Level\"]]","3311a492":"#Let's rediagnose out data","3cae9695":"data = pd.read_csv(\"\/kaggle\/input\/fifa-21-complete-player-dataset\/fifa21_male2.csv\")\ndata.head(25)","3c712d8b":"data.tail(20)","8a414118":"data.columns","d84a8fb6":"data.shape #Shape gives number of rows and columns in a tuble","a1c9e55a":"data.info()","461f79aa":"#Let's look to the frequency of players Pace (First 100 players)\n\nprint(data.head(100)[\"PAC\"].value_counts(dropna = False)) #If there are non values that also be counted.","b13186e7":"data.describe()","8b97d583":"#Comparing Pace of players with their sex\n\ndata.boxplot(column = \"PHY\", by = \"Gender\")","110b688b":"#Tidy Data\n\ndata_new = data.head()\ndata_new","26fe3536":"#Let's melt it\n\n#id_vars = what we do not wish to melt\n#value_vars = what we want to melt\n\n#I want to melt, name,pace and dribling\n\nmelted = pd.melt(frame=data_new,id_vars = \"Name\", value_vars = ['PAC','DRI'])\nmelted","49149eac":"#Pivoting Data\n\n#Reverse of Melting\n\nmelted.pivot(index = 'Name', columns = 'variable', values = 'value')","c2e6b495":"#Concatenating Data\n\n#Firstly lets create 2 data frame\n\ndata1 = data.head()\ndata2 = data.tail()\n\nconc_data_row = pd.concat([data1,data2],axis = 0,ignore_index = True) #axis = 0 : adds dataframes in row\nconc_data_row","85c3bf88":"data1 = data[\"PAC\"].head()\ndata2 = data[\"DRI\"].head()\n\nconc_data_row = pd.concat([data1,data2],axis = 1) #axis = 1 adds dataframes in column horizontally\nconc_data_row","8d189ac8":"#Continue to describing dataset\n\ndata.dtypes","707369f8":"data.info","9b4ecc36":"data[\"Club\"].value_counts(dropna = False)\n#As we can see there are 9 NaN value","6ffbdc07":"#Let's drop NaN values\ndata1 = data\ndata1[\"Club\"].dropna(inplace = True)   #inplace= True means we do not assign it to new variable changes automatically assigned to data","6cbdb223":"#Let check with assert statement\n#Assert statement\nassert 1 == 1 #return nothing because it is true","e920f630":"assert  data['Club'].notnull().all() #returns nothing because we drop nan values","5e60b0a7":"#With assert statement we can check a lot of thing, For example\n#assert data.columns[1] == 'Name'\nassert data.PAC.dtypes == np.float\n\n#We can clearly see that PAC's type is not a float","88bff50d":"# PANDAS FOUNDATION\n\n#data frame from dictionary\n\ncountry = [\"spain\",\"france\"]\n\npopulation = [\"11\",\"12\"]\n\nlist_label = [\"country\",\"population\"]\n\nlist_col = [country,population]\n\nzipped = list(zip(list_label,list_col))\n\ndata_dict = dict(zipped)\n\ndf = pd.DataFrame(data_dict)\n\ndf","b16f6cdf":"#Add new column\n\ndf[\"capital\"] = [\"madrid\",\"paris\"]\n\ndf","d1d225e4":"#Broadcasting\n\ndf[\"income\"] = 0 #Brodcast entire column\n\ndf","0ca707c5":"#Plotting all data\n\ndata1 = data.loc[:,[\"PAC\",\"DEF\",\"DRI\"]]\n\ndata1.plot()\n\n#it is confusing","656d596e":"#Subplotting\n\ndata1.plot(subplots = True)\n\nplt.show()","f32b4f40":"#Scatter Plot\n\ndata1.plot(kind = \"scatter\", x = \"PAC\", y = \"DEF\")\n\nplt.show()","ce2d7ae5":"#Histogram Plot\n\ndata1.plot(kind = \"hist\", y = \"DEF\", bins = 50, range = (79,99))","27196af5":"#Histogram subplot with non cumulative and cumulative\n\nfig,axis = plt.subplots(nrows = 2, ncols = 1)\n\ndata1.plot(kind = \"hist\", y = \"DEF\", bins = 50, range = (79,99))\n\ndata1.plot(kind = \"hist\", y = \"DEF\", bins = 50, range = (79,99), cumulative = True)\n\nplt.savefig('graph.png')\n\nplt","75c160b4":"#Statistical Exploratory Data Analysis\n\ndata.describe()","85137704":"#Indexing Pandas Time Series\n\ntime_list = [\"1992-03-08\",\"1992-04-12\"]\n\nprint(type(time_list[1])) # AS you can see date is string however we want it to be datetime object\n\ndatetime_object = pd.to_datetime(time_list)\n\nprint(datetime_object)","5534f451":"# close warning\n\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\n# In order to practice lets take head of players data and add it a time list\n\ndata2 = data.head()\n\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\n\ndatetime_object = pd.to_datetime(date_list)\n\ndata2[\"date\"] = datetime_object\n\n# lets make date as index\n\ndata2= data2.set_index(\"date\")\n\ndata2 ","89b26cea":"print(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1192-09-10\":\"1993-03-16\"])","0d204350":"#RESAMPLING PANDAS TIME SERIES\n\n#Resampling: statistical method over different time intervals\n\n#Needs string to specify frequency like \"M\" = month or \"A\" = year\n\ndata2.resample(\"A\").mean()","a5c300ca":"# Lets resample with month\n\ndata2.resample(\"M\").mean()","0d0535f4":"#Interpolating Data\n\ndata2.resample(\"M\").first().interpolate(\"linear\")","de8c892c":"# Or we can interpolate with mean()\n\ndata2.resample(\"M\").mean().interpolate(\"linear\")","1237dcdb":"#MANIPULATING DATA FRAMES WITH PANDAS\n\n#INDEXING DATA FRAMES\n\n#read data again\n\ndata = pd.read_csv('\/kaggle\/input\/fifa-21-complete-player-dataset\/fifa21_male2.csv')\n\ndata.head()","c2c871f9":"# indexing using square bracket\n\ndata[\"Age\"][1]","2991b07c":"# using column attribute and row label\n\ndata.Age[1]","4c1ff638":"# using loc accessor\n\ndata.loc[1,[\"Age\"]]","0a4798ea":"# Selecting only some columns\n\ndata[[\"Name\",\"Age\"]]","14e7a591":"#SLICING DATA FRAME\n\n#Difference between selecting columns: series and dataframes\n\nprint(type(data[\"Name\"]))     # series\n\nprint(type(data[[\"Name\"]]))   # data frames","ffd8791c":"# Slicing and indexing series\ndata.loc[1:10,\"PAC\":\"DEF\"]   # 10 and \"Defense\" are inclusive","54c86685":"# Reverse slicing \n\ndata.loc[10:1:-1,\"PAC\":\"DEF\"]","18fb365f":"# From something to end\n\ndata.loc[1:10,\"Age\":] ","6fe67c7a":"#FILTERING DATA FRAMES\n\n# Creating boolean series\n\nboolean = data.Age > 45\n\ndata[boolean]","2a53a67a":"# Combining filters\n\nfirst_filter = data.Age > 30\n\nsecond_filter = data.PAC > 90\n\ndata[first_filter & second_filter]","c91c691d":"# Filtering column based others\n\ndata.Name[data.DEF > 87]","ec006876":"#TRANSFORMING DATA\n\ndef div(n):\n    return n\/2\n\ndata.Age.apply(div)","54c46501":"# Or we can use lambda function\ndata.Age.apply(lambda n : n\/2)","2cfe1810":"# Defining column using other columns\n\ndata[\"Defensive_Power\"] = data.DEF + data.PHY\n\ndata.head()","7163e6a8":"# our index name is this:\n\nprint(data.index.name)\n\n# lets change it\n\ndata.index.name = \"index_name\"\n\ndata.head()\n","81303333":"#HIERARCHICAL INDEXING\n\ndata = pd.read_csv('\/kaggle\/input\/fifa-21-complete-player-dataset\/fifa21_male2.csv')\n\ndata.head()\n\n#As you can see there is index. However we want to set one or more column to be index","118e06de":"data.Age[0] = 33\ndata.Age[1] = 33\ndata.Age[2] = 33\ndata.Age[3] = 34\ndata.Age[4] = 34\n\ndata.head()","9acd8b17":"# Setting index is Age and 33 is outer 34 is inner index\n\ndata1 = data.set_index([\"Age\"]) \n\ndata1.head()\n\n# data1.loc[\"Fire\",\"Flying\"] # howw to use indexes","c9671c04":"#PIVOTING DATA FRAMES\n\ndic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"Age\":[15,4,72,65]}\n\ndf = pd.DataFrame(dic)\n\ndf","25c97e3c":"#Pivoting\n\ndf.pivot(index = \"treatment\",columns = \"gender\", values = \"response\")","d27efd6b":"#STACKING and UNSTACKING DATAFRAME\n\ndf1 = df.set_index([\"treatment\",\"gender\"])\n\ndf1","809135fd":"# lets unstack it\n\ndf1.unstack(level=0)","088ad8f6":"df1.unstack(level=1)","aa9672b8":"# change inner and outer level index position\n\ndf2 = df1.swaplevel(0,1)\n\ndf2","5c349b66":"#MELTING DATA FRAMES\n\n#Reverse of pivoting\n\ndf","54cdc56a":"#df.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")\n\npd.melt(df, id_vars = \"treatment\", value_vars = [\"Age\",\"response\"])\n","ac5cd9f8":"#CATEGORICALS AND GROUPBY\n\n#We will use df\n\ndf","fa656e28":"# according to treatment take means of other features\n\ndf.groupby(\"treatment\").mean()   # mean is aggregation \/ reduction method\n\n# there are other methods like sum, std,max or min","9083da82":"# we can only choose one of the feature\n\ndf.groupby(\"treatment\").Age.max() ","2dda61f1":"# Or we can choose multiple features\n\ndf.groupby(\"treatment\")[[\"Age\",\"response\"]].min() ","d9c6d880":"#df.info()\n\n# as you can see gender is object\n\n# However if we use groupby, we can convert it categorical data. \n\n# Because categorical data uses less memory, speed up operations like groupby\n\n#df[\"gender\"] = df[\"gender\"].astype(\"category\")\n\ndf[\"treatment\"] = df[\"treatment\"].astype(\"category\")\n\n#df.info()","bca68367":"#Visualization with Plotly\n\n#Reloading Data\n\ndataframe = pd.read_csv(\"\/kaggle\/input\/fifa-21-complete-player-dataset\/fifa21_male2.csv\")\n\npd.set_option('display.max_columns', None)\n\ndataframe.head(1)","57232ea4":"#Dataset with usefull columns\n\ndataset = dataframe[[\"ID\",\"Name\",\"Age\",\"OVA\",\"Nationality\",\"Club\",\"Position\",\"Height\",\"Weight\",\"foot\",\"Attacking\",\"Crossing\",\"Finishing\",\"Heading Accuracy\",\"Short Passing\",\"Volleys\",\"Skill\",\"Dribbling\",\"Curve\",\"FK Accuracy\",\"Long Passing\",\"Ball Control\",\"Movement\",\"Acceleration\",\"Sprint Speed\",\"Agility\",\"Reactions\",\"Balance\",\"Power\",\"Shot Power\",\"Jumping\",\"Stamina\",\"Long Shots\",\"Mentality\",\"Aggression\",\"Interceptions\",\"Positioning\",\"Vision\",\"Penalties\",\"Composure\",\"Defending\",\"Marking\",\"Standing Tackle\",\"Sliding Tackle\",\"PAC\",\"SHO\",\"PAS\",\"DRI\",\"DEF\",\"PHY\",\"W\/F\",\"SM\"]]\n\ndataset.head(10)","37ab1d67":"fenerbahce = dataset[dataset[\"Club\"] == \"Fenerbah\u00e7e SK\"].sort_values(by = \"OVA\", ascending = False)\ngalatasaray = dataset[dataset[\"Club\"] == \"Galatasaray SK\"].sort_values(by = \"OVA\", ascending = False)\nbesiktas = dataset[dataset[\"Club\"] == \"Be\u015fikta\u015f JK\"].sort_values(by = \"OVA\", ascending = False)\ntrabzon = dataset[dataset[\"Club\"] == \"Trabzonspor\"].sort_values(by = \"OVA\", ascending = False)\n\ntrace1 = go.Scatter(\n                        x = fenerbahce.Age,\n\n                        y = fenerbahce.OVA,\n\n                        mode = \"markers\",\n\n                        name = \"Fenerbah\u00e7e\",\n\n                        marker = dict(color = \"rgba(0,0,128, 0.8)\"),\n\n                        text = fenerbahce.Name)\n\ntrace2 = go.Scatter(\n                        x = galatasaray.Age,\n\n                        y = galatasaray.OVA,\n\n                        mode = \"markers\",\n\n                        name = \"Galatasaray\",\n\n                        marker = dict(color = \"rgba(255,0,0, 0.8)\"),\n\n                        text = galatasaray.Name)\n\ntrace3 = go.Scatter(\n\n                        x = besiktas.Age,\n\n                        y = besiktas.OVA,\n\n                        mode= \"markers\",\n\n                        name = \"Be\u015fikta\u015f\",\n\n                        marker = dict(color = \"rgba(0, 0, 0, 0.8)\"),\n\n                        text = besiktas.Name)\n\ntrace4 = go.Scatter(\n                    \n                        x = trabzon.Age,\n\n                        y = trabzon.OVA,\n\n                        mode = \"markers\",\n\n                        name = \"Trabzonspor\",\n\n                        marker = dict(color = \"rgba(128,22, 56, 0.8)\"),\n\n                        text = trabzon.Name)\n\ndata = [trace1, trace2, trace3, trace4]\n\nlayout = dict(\n                        title = \"Age and Overall vs Top 4 Turkish Football Clubs\",\n\n                        xaxis = dict(title = \"Age\", ticklen = 5, zeroline = False))\n\nfig = dict(data = data, layout = layout)\n\niplot(fig)","5ea4b028":"trace1 = go.Scatter(\n                        x = fenerbahce.Age.sort_values(ascending = False),\n\n                        y = fenerbahce.OVA.sort_values(ascending = False),\n\n                        mode = \"lines\",\n\n                        name = \"Fenerbah\u00e7e\",\n\n                        marker = dict(color = \"rgba(0,0,128, 0.8)\"),\n\n                        text = fenerbahce.Name)\n\ntrace2 = go.Scatter(\n                        x = galatasaray.Age.sort_values(ascending = False),\n\n                        y = galatasaray.OVA.sort_values(ascending = False),\n\n                        mode = \"lines\",\n\n                        name = \"Galatasaray\",\n\n                        marker = dict(color = \"rgba(255,0,0, 0.8)\"),\n\n                        text = galatasaray.Name)\n\ntrace3 = go.Scatter(\n\n                        x = besiktas.Age.sort_values(ascending = False),\n\n                        y = besiktas.OVA.sort_values(ascending = False),\n\n                        mode= \"lines\",\n\n                        name = \"Be\u015fikta\u015f\",\n\n                        marker = dict(color = \"rgba(0, 0, 0, 0.8)\"),\n\n                        text = besiktas.Name)\n\ntrace4 = go.Scatter(\n                    \n                        x = trabzon.Age.sort_values(ascending = False),\n\n                        y = trabzon.OVA.sort_values(ascending = False),\n\n                        mode = \"lines\",\n\n                        name = \"Trabzonspor\",\n\n                        marker = dict(color = \"rgba(128,22, 56, 0.8)\"),\n\n                        text = trabzon.Name)\n\ndata = [trace1, trace2, trace3, trace4]\n\nlayout = dict(\n                        title = \"Age and Overall vs Top 4 Turkish Football Clubs\",\n\n                        xaxis = dict(title = \"Age\", ticklen = 5, zeroline = False))\n\nfig = dict(data = data, layout = layout)\n\niplot(fig)","e2921b43":"#We have already top 4 team's data as their club names.\n\navg_age = [fenerbahce.Age.mean(),besiktas.Age.mean(),galatasaray.Age.mean(),trabzon.Age.mean()]\n\ntop4 = [\"Fenerbah\u00e7e\", \"Be\u015fikta\u015f\", \"Galatasaray\", \"Trabzonspor\"]\n\ndf = pd.DataFrame({\"club_list\" : top4, \"averages\" : avg_age}).sort_values(by = \"averages\", ascending = False)\n\n#Visualization\n\nplt.figure(figsize = (15,20))\n\nsns.barplot(x = df[\"club_list\"], y = df[\"averages\"])\n\nplt.xticks(rotation = 90)\n\nplt.xlabel(\"Top 4 Club\")\n\nplt.ylabel(\"Averages\")\n\nplt.title(\"Average of Age each Famous 4 Turkish Super League Clubs\")","353891f5":"countries = dataset[\"Nationality\"].unique()\n\nnumber_of_players = []\n\nfor i in countries:\n    x = dataset[dataset[\"Nationality\"] == i]\n    number_of_players.append(len(x))\ndf = pd.DataFrame({\"Country\" : countries, \"Number of Players\" : number_of_players})\n\ndf = df.sort_values(by = \"Number of Players\", ascending = False)\n\ndf = df[:75]\n\n#Visualization\n\nplt.figure(figsize = (15,10))\n\nsns.barplot(x = df[\"Country\"], y = df[\"Number of Players\"])\n\nplt.xticks(rotation = 90)\n\nplt.xlabel(\"Country\")\n\nplt.ylabel(\"Number of Players\")\n\nplt.title(\"Number of Players Raised by Countries.\")","f6653a07":"avg_OVA = []\nnew_countries = []\n\nfor i in countries:\n    x = dataset[dataset[\"Nationality\"] == i].sort_values(by = \"OVA\", ascending = False)\n    if(len(x) > 50):\n        avg_OVA.append(x[\"OVA\"][:50].mean())\n        new_countries.append(i)\n    else:\n        continue\n\ndf = pd.DataFrame({\"Countries\" : new_countries, \"avg_OVA\" : avg_OVA}).sort_values(by = \"avg_OVA\", ascending = False)\n\n#Visualization\n\nplt.figure(figsize =(15,10))\n\nsns.barplot(x = df[\"Countries\"][:50], y = df[\"avg_OVA\"][:50], palette = sns.cubehelix_palette(len(df)))\n\nplt.xticks(rotation = 90)\n\nplt.xlabel(\"Countries\")\n\nplt.ylabel(\"Average Overalls\")\n\nplt.title(\"Average Overall per each Countries (Most talented 50 Players, First 50 Country) \")","6255cafb":"u1619 = dataset[(dataset[\"Age\"] > 15)  & (dataset[\"Age\"] < 20)]\nu2024 = dataset[(dataset[\"Age\"] >= 20) & (dataset[\"Age\"] < 25)]\nu2529 = dataset[(dataset[\"Age\"] >= 25) & (dataset[\"Age\"] < 30)]\nu3035 = dataset[(dataset[\"Age\"] >= 30) & (dataset[\"Age\"] < 36)]\nu3653 = dataset[(dataset[\"Age\"] >= 36) & (dataset[\"Age\"] < 54)]","807e4587":"#Joint Plot\n\nsns.jointplot(u1619.PAC, u1619.DEF, kind = \"kde\", size = 12)\nplt.show()","682586a5":"sns.jointplot(u1619.DRI, u1619.PAS, size = 10, ratio = 3, color = \"r\")","c1e894e9":"labels = [\"PAC\", \"DRI\", \"PAS\", \"DEF\", \"PHY\", \"SHO\"]\n\ncolors = [\"grey\", \"blue\", \"red\", \"yellow\", \"green\", \"brown\"]\n\nexplode = [0,0,0,0,0,0]\n\nsizes = [u1619.PAC.mean(), u1619.DRI.mean(), u1619.PAS.mean(), u1619.DEF.mean(), u1619.PHY.mean(), u1619.SHO.mean()]\n\n#Visual\n\nplt.figure(figsize = (7,7))\n\nplt.pie(sizes, explode = explode, labels = labels, colors = colors, autopct = '%1.1f%%')\n\nplt.title(\"Pie Chart of between 16 and 19 years old players according to Fifa Cards Features\")","d6fa6dc9":"labels = [\"PAC\", \"DRI\", \"PAS\", \"DEF\", \"PHY\", \"SHO\"]\n\ncolors = [\"grey\", \"blue\", \"red\", \"yellow\", \"green\", \"brown\"]\n\nexplode = [0,0,0,0,0,0]\n\nsizes = [u2024.PAC.mean(), u2024.DRI.mean(), u2024.PAS.mean(), u2024.DEF.mean(), u2024.PHY.mean(), u2024.SHO.mean()]\n\n#Visual\n\nplt.figure(figsize = (7,7))\n\nplt.pie(sizes, explode = explode, labels = labels, colors = colors, autopct = '%1.1f%%')\n\nplt.title(\"Pie Chart of between 20 and 24 years old players according to Fifa Cards Features\")","945ea0d5":"labels = [\"PAC\", \"DRI\", \"PAS\", \"DEF\", \"PHY\", \"SHO\"]\n\ncolors = [\"grey\", \"blue\", \"red\", \"yellow\", \"green\", \"brown\"]\n\nexplode = [0,0,0,0,0,0]\n\nsizes = [u2529.PAC.mean(), u2529.DRI.mean(), u2529.PAS.mean(), u2529.DEF.mean(), u2529.PHY.mean(), u2529.SHO.mean()]\n\n#Visual\n\nplt.figure(figsize = (7,7))\n\nplt.pie(sizes, explode = explode, labels = labels, colors = colors, autopct = '%1.1f%%')\n\nplt.title(\"Pie Chart of between 25 and 29 years old players according to Fifa Cards Features\")","24859337":"labels = [\"PAC\", \"DRI\", \"PAS\", \"DEF\", \"PHY\", \"SHO\"]\n\ncolors = [\"grey\", \"blue\", \"red\", \"yellow\", \"green\", \"brown\"]\n\nexplode = [0,0,0,0,0,0]\n\nsizes = [u3035.PAC.mean(), u3035.DRI.mean(), u3035.PAS.mean(), u3035.DEF.mean(), u3035.PHY.mean(), u3035.SHO.mean()]\n\n#Visual\n\nplt.figure(figsize = (7,7))\n\nplt.pie(sizes, explode = explode, labels = labels, colors = colors, autopct = '%1.1f%%')\n\nplt.title(\"Pie Chart of between 30 and 35 years old players according to Fifa Cards Features\")","cae23f7a":"labels = [\"PAC\", \"DRI\", \"PAS\", \"DEF\", \"PHY\", \"SHO\"]\n\ncolors = [\"grey\", \"blue\", \"red\", \"yellow\", \"green\", \"brown\"]\n\nexplode = [0,0,0,0,0,0]\n\nsizes = [u3653.PAC.mean(), u3653.DRI.mean(), u3653.PAS.mean(), u3653.DEF.mean(), u3653.PHY.mean(), u3653.SHO.mean()]\n\n#Visual\n\nplt.figure(figsize = (7,7))\n\nplt.pie(sizes, explode = explode, labels = labels, colors = colors, autopct = '%1.1f%%')\n\nplt.title(\"Pie Chart of between 36 and 53 years old players according to Fifa Cards Features\")","277a6735":"#Data Preparation\n\ncountries = dataset[\"Nationality\"].unique()\n\navg_PAS = []\navg_DRI = []\nnew_countries = []\n\nfor i in countries:\n    x = dataset[dataset[\"Nationality\"] == i]\n    if(len(x) > 50):\n        avg_PAS.append(sum(x.sort_values(by = \"OVA\", ascending = False)[:50].PAS)\/len(dataset.sort_values(by = \"OVA\", ascending = False)[:50].PAS))\n        avg_DRI.append(sum(x.sort_values(by = \"OVA\", ascending = False)[:50].DRI)\/len(dataset.sort_values(by = \"OVA\", ascending = False)[:50].DRI))\n        new_countries.append(i)\n    if(i == \"Turkey\"):\n        break\n        \ndf = pd.DataFrame({\"Country\" : new_countries, \"avg_PAS\" : avg_PAS, \"avg_DRI\" : avg_DRI})\n\ndf = df.sort_values(by = \"avg_PAS\", ascending = False)\n\ntrace1 = go.Bar(\n                    x = df.Country,\n\n                    y = avg_PAS,\n\n                    name = \"Average Passing Feature\",\n\n                    marker = dict(color = \"rgba(255, 174, 255, 0.5)\",\n                                 \n                                  line = dict(color = \"rgb(0,0,0)\",\n                                             \n                                              width = 1.5)))\n\ntrace2 = go.Bar(\n\n                    x = df.Country,\n\n                    y = avg_DRI,\n\n                    name = \"Average Dribbling Feature\",\n\n                    marker = dict(color = \"rgba(255,255,128, 0.5)\",\n                                 \n                                  line = dict(color = \"rgb(0,0,0)\",\n                                             \n                                              width = 1.5)))\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(barmode = \"group\")\n\nfig = go.Figure(data = data, layout = layout)\n\niplot(fig)","012430cd":"#Preparation\n\ntotal_OVA = []\n\nfor i in countries:\n    x = dataset[dataset[\"Nationality\"] == i]\n    total_OVA.append(len(x[x[\"OVA\"] >= 70]))\n\ndf = pd.DataFrame({\"Countries\" : countries, \"total_OVA\" : total_OVA}).sort_values(by = \"total_OVA\", ascending = False)\n\ndf = df[:20]\n\n#Visualization\n\ninternational_color = [float(each) for each in df.total_OVA]\n\ndata = [{\"y\" : df.total_OVA,\n        \"x\" : df.Countries,\n        \"mode\" : \"markers\",\n        \"marker\" : {\n                     \"color\" : international_color,\n                     \"size\"  : total_OVA,\n                     \"showscale\" : True\n                    },\n        \"text\" : countries}]\n\niplot(data)","76d0b1df":"a = dataset.sort_values(by = \"OVA\", ascending = False)\n\ntrace1 = go.Scatter3d(\n                        x = a.SHO[:50],\n\n                        y = a.DRI[:50],\n\n                        z = a.PAS[:50],\n\n                        mode = \"markers\",\n\n                        marker = dict(color = \"rgba (255,0,0)\",\n                                     \n                    ),\n)\n\ndata = [trace1]\n\nlayout = go.Layout(\n\n                    margin = dict(\n                    \n                                    l = 0,\n                                    \n                                    r = 0,\n                    \n                                    b = 0,\n                    \n                                    t = 0\n                    )\n)\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","a64b6b8f":"#Preparing Data\n\ndf = data[[\"Name\",\"PAS\",\"SHO\",\"DRI\",\"DEF\",\"PAC\",\"PHY\"]]\n\ndf = df[:400]","d724a6d4":"df.describe()","5348cd79":"x = np.array(df.loc[:,\"PAS\"]).reshape(-1,1)\ny = np.array(df.loc[:,\"DRI\"]).reshape(-1,1)\n\n#Scatter\nplt.figure(figsize = [10,10])\nplt.scatter(x = x, y = y)\nplt.xlabel(\"Pass Feature\")\nplt.ylabel(\"Dribbling Feature\")\nplt.show()","e1c7a705":"#Linear Regression\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression()\n\n#Predict Space\npredict_space = np.linspace(min(x), max(x)).reshape(-1,1)\n\n# Fit\nreg.fit(x, y)\n\n#Predict\npredicted = reg.predict(predict_space)\n\n#R^2\nprint(\"R^2 Score : \", reg.score(x,y))\n\n#Plot Regression Line and Scatter\nplt.plot(predict_space, predicted, color = \"black\", linewidth = 3)\nplt.scatter(x = x, y = y)\nplt.xlabel(\"Pass Feature\")\nplt.ylabel(\"Dribbling Feature\")\nplt.show()","b5a6c9f8":"### Explanation\n\n#### Averages of Pass and Dribbling Features according to until Turkey","80188171":"### Explanation\n\n#### Average Overall per each Countries (Most talented 50 Players, First 50 Country) ","ea1e6cb0":"### Explanation\n\n#### FIFA Card Features according over Ages (16-19, 20-24, 25-29, 30-35, 36-53) ","5538de4c":"## Machine Learning (ML)","a40f5e43":"### Explanation\n\n#### Number of players raised by countries.","6f38f020":"### Explanation\n\n#### Pie Chart of between 16 and 19 years old players according to Fifa Cards Features.","b59504ae":"### Regression","1f21627b":"### Explanation\n\n#### Turkish Super Lig, Top 4 Club, Average Age","afb1f90c":"### Explanation\n\n#### 3D Scatter Plot with Colorscaling of Players, SHO, PAS, DRI features of best 50 Players.","3ee28ea5":"### Explanation \n\n#### Visualization of players from each country with Overall scores of 70 and above.","c6489a2c":"#### We are ready to make regression to our data.\n\n##### Linear Regression\n* y = ax + b where y = target, x = feature and a = parameter of model\n* We choose parameter of model acording to minimum error function that is lost function.\n* In linear regression we use Ordinary Least Square (OLS) as lost function.\n* OLS : sum all residuals but some positive and negative residuals can cancel each other so we sum sqaure of residuals. It called as OLS.\n* Score : Score uses R^2 method that is ((y_pred - y_mean)^2 )\/(y_actual - y_mean)^2","579351b8":"# Visualization","9dbd02b7":"### Explanation\n\n#### We are going to plot a markers chart that determine, Age, Overall and Club(Fenerbah\u00e7e, Galatasaray, Be\u015fikta\u015f and Trabzonsport)."}}