{"cell_type":{"e84abd45":"code","8f77e6c4":"code","86f15fcc":"code","aa5fc4b7":"code","8ff18329":"code","3104b81b":"code","d930615d":"code","fa1f5673":"code","2ee86c0f":"code","514ba335":"code","8a44b30f":"code","61ea9596":"code","faece00c":"code","7410afbc":"code","01c14733":"code","5a8a4a9a":"code","33b425ff":"code","98b1b204":"code","3b953c63":"code","3cd97490":"code","8291910a":"markdown","0588edb8":"markdown","1667b32f":"markdown","be25a621":"markdown"},"source":{"e84abd45":"import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport PIL\nimport tensorflow as tf\nimport shutil\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nimport random\nimport string","8f77e6c4":"batch_size = 15\nimg_height = 100\nimg_width = 100","86f15fcc":"directory = \"..\/input\/pokemon-generation-one\"\ntrain_ds = tf.keras.preprocessing.image_dataset_from_directory(\n  directory,\n  validation_split=0.2,\n  subset=\"training\",\n  seed=32,\n  image_size=(img_height, img_width),\n  batch_size=batch_size,\n  )\n\nclass_names = train_ds.class_names\nprint(class_names)\nprint(len(class_names))","aa5fc4b7":"for image_batch, labels_batch in train_ds:\n  print(image_batch.shape)\n  print(labels_batch.shape)\n  break","8ff18329":"AUTOTUNE = tf.data.AUTOTUNE\n\ntrain_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)","3104b81b":"num_classes = 149\nbatch_size = 15\nimg_height = 100\nimg_width = 100\n","d930615d":"model = Sequential([\n  keras.Input(shape=(100, 100, 3)),\n  layers.experimental.preprocessing.Rescaling(1.\/255\n                                              # , input_shape=(img_height, img_width, 3)\n                                              ),\n  layers.Conv2D(16, 3, activation='relu'),\n#  layers.MaxPooling2D(),\n  layers.Conv2D(32, 7, activation='relu'),\n  layers.BatchNormalization(),\n  layers.MaxPooling2D(),\n  layers.Conv2D(64, 5, activation='relu'),\n  layers.MaxPooling2D(),\n  layers.Conv2D(128, 3, activation='relu'),\n  layers.BatchNormalization(),\n  layers.Conv2D(64, 7, activation='relu'),\n  layers.MaxPooling2D(),\n  layers.Conv2D(16, 1, padding='same', activation='relu'),\n  layers.Flatten(),\n  layers.Dense(128, activation='relu'),\n  layers.Dense(64, activation='relu'),\n  layers.Dense(num_classes, activation='softmax')\n])\n","fa1f5673":"model.summary()","2ee86c0f":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","514ba335":"history = model.fit(train_ds, epochs=80, batch_size=32, verbose=1)","8a44b30f":"acc = model.history['accuracy']\nloss = model.history['loss']\nepochs = 80\nepochs_range = range(epochs)\n\nplt.figure()\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.figure()\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","61ea9596":"model.save(\"90percacc\")","faece00c":"# model1=","7410afbc":"model = keras.models.load_model('..\/input\/modelpokemon\/saved_model.pb')","01c14733":"import cv2","5a8a4a9a":"type(model)","33b425ff":"class_names=['Abra', 'Aerodactyl', 'Alakazam', 'Arbok', 'Arcanine', 'Articuno', 'Beedrill', 'Bellsprout', 'Blastoise', 'Bulbasaur', 'Butterfree', 'Caterpie', 'Chansey', 'Charizard', 'Charmander', 'Charmeleon', 'Clefable', 'Clefairy', 'Cloyster', 'Cubone', 'Dewgong', 'Diglett', 'Ditto', 'Dodrio', 'Doduo', 'Dragonair', 'Dragonite', 'Dratini', 'Drowzee', 'Dugtrio', 'Eevee', 'Ekans', 'Electabuzz', 'Electrode', 'Exeggcute', 'Exeggutor', 'Farfetchd', 'Fearow', 'Flareon', 'Gastly', 'Gengar', 'Geodude', 'Gloom', 'Golbat', 'Goldeen', 'Golduck', 'Golem', 'Graveler', 'Grimer', 'Growlithe', 'Gyarados', 'Haunter', 'Hitmonchan', 'Hitmonlee', 'Horsea', 'Hypno', 'Ivysaur', 'Jigglypuff', 'Jolteon', 'Jynx', 'Kabuto', 'Kabutops', 'Kadabra', 'Kakuna', 'Kangaskhan', 'Kingler', 'Koffing', 'Krabby', 'Lapras', 'Lickitung', 'Machamp', 'Machoke', 'Machop', 'Magikarp', 'Magmar', 'Magnemite', 'Magneton', 'Mankey', 'Marowak', 'Meowth', 'Metapod', 'Mew', 'Mewtwo', 'Moltres', 'MrMime', 'Muk', 'Nidoking', 'Nidoqueen', 'Nidorina', 'Nidorino', 'Ninetales', 'Oddish', 'Omanyte', 'Omastar', 'Onix', 'Paras', 'Parasect', 'Persian', 'Pidgeot', 'Pidgeotto', 'Pidgey', 'Pikachu', 'Pinsir', 'Poliwag', 'Poliwhirl', 'Poliwrath', 'Ponyta', 'Porygon', 'Primeape', 'Psyduck', 'Raichu', 'Rapidash', 'Raticate', 'Rattata', 'Rhydon', 'Rhyhorn', 'Sandshrew', 'Sandslash', 'Scyther', 'Seadra', 'Seaking', 'Seel', 'Shellder', 'Slowbro', 'Slowpoke', 'Snorlax', 'Spearow', 'Squirtle', 'Starmie', 'Staryu', 'Tangela', 'Tauros', 'Tentacool', 'Tentacruel', 'Vaporeon', 'Venomoth', 'Venonat', 'Venusaur', 'Victreebel', 'Vileplume', 'Voltorb', 'Vulpix', 'Wartortle', 'Weedle', 'Weepinbell', 'Weezing', 'Wigglytuff', 'Zapdos', 'Zubat']","98b1b204":"for i in model:\n  print(i)","3b953c63":"def pred_img(file_name):\n    img = cv2.imread(file_name)\n    img = cv2.resize(img, (100, 100), interpolation = cv2.INTER_AREA)\n    # img.shape\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    # plt.imshow(img)\n    # img = img.reshape(-1, 100, 100, 3)\n    # print(img.shape)\n    pred = np.argmax(model(img))\n    return class_names[pred]\n    # print(f\"it is a {class_names[pred]} with probability {model(img)[0][pred]*100}%\")","3cd97490":"pred_img('\/content\/drive\/MyDrive\/Pokemon_dataset\/Abra\/10a9f06ec6524c66b779ea80354f8519.jpg')","8291910a":"## start","0588edb8":"## Saving the model","1667b32f":"<a href=\"https:\/\/colab.research.google.com\/github\/a-ma-n\/ISTE_Task2\/blob\/main\/pokemon_.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","be25a621":"## train"}}