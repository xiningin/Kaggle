{"cell_type":{"21f5e803":"code","364a48e5":"code","e264f3ad":"code","e187b4d3":"code","60fc17a4":"code","cdbe3d14":"code","bd3f6f8d":"code","1360e1b3":"code","383b42b4":"code","44ed645a":"code","2282cb62":"code","98c1f565":"code","cf9e5f2a":"code","6631188a":"code","e6b0df17":"code","3099c9fc":"code","1f6e203c":"code","24955026":"code","b6faad38":"code","0e2d3ded":"code","e6335360":"code","c281f4ac":"code","9c4336ec":"code","155351ab":"code","7ab21767":"code","c50d2b8e":"code","f4099f91":"code","0c30f163":"code","2113e500":"code","39483f19":"code","8c2e59dd":"code","036524a5":"markdown","5be0508a":"markdown","ed3025b9":"markdown","214e48e1":"markdown","d1836d25":"markdown"},"source":{"21f5e803":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv) time import time\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom IPython.display import display\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder\nfrom sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score\n\n\n%matplotlib\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","364a48e5":"#loading winequality datasets\nwinedata=pd.read_csv(\"\/kaggle\/input\/winequality-white.csv\",sep=';')\ndisplay(winedata.head(n=10))\nwinedata.head()\n","e264f3ad":"#Cecking if data is distributed evenly\nwinedata.info","e187b4d3":"#checking if there is any missing data\ndata.isnull().any","60fc17a4":"#Performing perliminary analysis on the data sets\nn_wines = data.shape[0]\n\n# Number of wines with quality rating above 6\nquality_above_6 = data.loc[(data['quality'] > 6)]\nn_above_6 = quality_above_6.shape[0]\n\n# Number of wines with quality rating below 5\nquality_below_5 = data.loc[(data['quality'] < 5)]\nn_below_5 = quality_below_5.shape[0]\n\n# Number of wines with quality rating between 5 to 6\nquality_between_5 = data.loc[(data['quality'] >= 5) & (data['quality'] <= 6)]\nn_between_5 = quality_between_5.shape[0]\n# Percentage of wines with quality rating above 6\ngreater_percent = n_above_6*100\/n_wines\n\n# Print the results\nprint(\"Total number of wine data: {}\".format(n_wines))\nprint(\"Wines with rating 7 and above: {}\".format(n_above_6))\nprint(\"Wines with rating less than 5: {}\".format(n_below_5))\nprint(\"Wines with rating 5 and 6: {}\".format(n_between_5))\nprint(\"Percentage of wines with quality 7 and above: {:.2f}%\".format(greater_percent))\n\n# Some more additional data analysis\ndisplay(np.round(data.describe()))","cdbe3d14":"#Comparing Citric acid factor with fixed acidity\nfig = plt.figure(figsize=(10,5))\nsns.barplot (x = 'citric acid',y = 'fixed acidity',data= winedata)","bd3f6f8d":"#Comparing Quality with fixed acidity\nfig = plt.figure(figsize=(10,5))\nsns.barplot (x = 'quality',y = 'fixed acidity',data= winedata)","1360e1b3":"#Comparing Volatile acid with fixed acidity\nfig = plt.figure(figsize=(10,5))\nsns.barplot (x = 'alcohol',y = 'citric acid',data= winedata) ","383b42b4":"#Comparing Volatile acid with fixed acidity\nfig = plt.figure(figsize=(10,5))\nsns.barplot (x = 'chlorides',y = 'fixed acidity',data= winedata) ","44ed645a":"#Comparing residual sugars with density\nfig = plt.figure(figsize=(10,5))\nsns.barplot (x = 'residual sugar',y = 'density',data= winedata)","2282cb62":"#Comparing citric acids factors with density factor\nfig = plt.figure(figsize=(10,5))\nsns.barplot (x = 'citric acid',y = 'density',data= winedata)","98c1f565":"#Comparing quality factor with density\nfig = plt.figure(figsize=(10,5))\nsns.barplot (x = 'quality',y = 'density',data= winedata) ","cf9e5f2a":"#Comparing volatile acidity factor with residual sugars factor \nfig = plt.figure(figsize =(10,5))\nsns.barplot(x= 'volatile acidity',y ='residual sugar',data=winedata)\n","6631188a":"#Comparing quality factor with citric acid factor\nfig = plt.figure(figsize =(10,5))\nsns.barplot(x='quality',y='citric acid',data=winedata)","e6b0df17":"#Comparing Volatile acid with fixed acidity\nfig = plt.figure(figsize=(10,5))\nsns.barplot (x = 'alcohol',y = 'quality',data= winedata) ","3099c9fc":"bins = (2,6.5,8)\ngroup_names = ['bad','good']\n\nwinedata['quality']= pd.cut(winedata['quality'],bins=bins, labels = group_names)","1f6e203c":"label_quality= LabelEncoder()","24955026":"winedata['quality'] =label_quality.fit_transform(winedata['quality'])","b6faad38":"winedata['quality'].value_counts()","0e2d3ded":"sns.countplot(winedata['quality'])","e6335360":"X=winedata.drop('quality',axis=1)\nY=winedata['quality']","c281f4ac":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state =42)","9c4336ec":"sc = StandardScaler","155351ab":"rfc = RandomForestClassifier(n_estimators=200)\nrfc.fit(X_train,y_train)\npred_rfc = rfc.predict(X_test)\nprint(classification_report(y_test,pred_rfc))","7ab21767":"print(confusion_matrix(y_test,pred_rfc))","c50d2b8e":"sgd = SGDClassifier(penalty=None)\nsgd.fit(X_train, y_train)\npred_sgd = sgd.predict(X_test)\nprint(classification_report(y_test,pred_sgd))","f4099f91":"svc = SVC()\nsvc.fit(X_train , y_train)\npred_svc = svc.predict(X_test)\nprint(classification_report(y_test,pred_svc))","0c30f163":"param = { 'C':[0.1,0.2,0.4,0.8,1.6],\n            'kernel':['liner', 'rbf ']\n            'gamma' : [0.1,0.3,0.5,0.7]}\ngrid_svc= GridSearchCV(svc,param_grid = param ,scoring ='accuracy',cv=10)","2113e500":"grid_svc.fit(X_train,y_train)\ngrid_svc.best_params_","39483f19":"svc2 = SVC(C = 1.2 , gamma = 0.9 , kernel = 'rbf')\nsvc2.fit(X_train, y_train)\npred_svc2 = svc2.predict(X_test)\n","8c2e59dd":"print(classification_report(y_test, pred_svc2))","036524a5":"X_train = sc.fit_tansform(X-train)\nX_test = sc.fit_transform(X-test)","5be0508a":"<h1>Random Forest Classifier<\/h1>\n","ed3025b9":"# GRID SEARCH CV","214e48e1":"<H1>SUPPORT VECTOR CLASSIFIER<H1>","d1836d25":"<h1>STOCHASTIC GRADIENT DESCENT CLASSIFIER<H1>"}}