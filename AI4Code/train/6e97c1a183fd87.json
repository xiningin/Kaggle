{"cell_type":{"83695716":"code","f7d0c6dd":"code","dc774d08":"code","b0a54abd":"code","922cac4a":"code","39b0167b":"code","8c1f5f33":"code","e3027987":"code","342e7346":"code","e54d3264":"code","0f474110":"code","85c37d91":"code","bc46fed9":"code","d89ce3fa":"code","9b4ae160":"code","f4308153":"code","ee3fe1bd":"code","dcabc4f8":"code","4881c89a":"code","c18d42b8":"code","2ad34195":"code","4e1e1055":"code","cdf5f71e":"code","d8b0abef":"code","5444d421":"code","c529d730":"markdown","6e0d8bd2":"markdown","6e999bcc":"markdown","02748285":"markdown","13d4a1e3":"markdown","40bec75b":"markdown","452e25ff":"markdown","0f6752b8":"markdown","fe72b345":"markdown","6f1ddf17":"markdown","7250afa8":"markdown","75159403":"markdown","da79bdf6":"markdown","3e318a91":"markdown","6a30cbf0":"markdown","4024ef87":"markdown","f1f6d04b":"markdown","5c76b708":"markdown","02ddc943":"markdown","90f656db":"markdown","4177913d":"markdown","48f6e776":"markdown"},"source":{"83695716":"# Data Manipulation and Linear Algebra\nimport pandas as pd\nimport numpy as np\n\n# Plots\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing import StandardScaler\n\nfrom catboost import CatBoostClassifier\n\n#ignore warning messages \nimport warnings\nwarnings.filterwarnings('ignore')","f7d0c6dd":"Base_Path = \"..\/input\/tabular-playground-series-dec-2021\/\"\n\ntrain = pd.read_csv(Base_Path + \"train.csv\")\ntest = pd.read_csv(Base_Path + \"test.csv\")","dc774d08":"# Getting the Shape of the Data\nprint(f'''\nTraining Data\n    Rows    : {train.shape[0]}\n    Columns : {train.shape[1]}\n\nTesting Data\n    Rows    : {test.shape[0]}\n    Columns : {test.shape[1]}\n''')","b0a54abd":"train_features = train.drop(columns=[\"Cover_Type\"])\ntrain_target = train[\"Cover_Type\"]","922cac4a":"# Counting Number of Numeric and Object type Columns in our Training Data\nprint(f'''\nCount of Numeric Columns : {len(train_features.select_dtypes(include=np.number).columns.tolist())}\nCount of Object Columns  : {len(train_features.select_dtypes(include=['object']).columns.tolist())}\n''')","39b0167b":"print(f'''\nCount of Columns with Null Values\n    Training Data : {len(train_features.columns[train_features.isnull().any()].tolist())}\n    Testing Data  : {len(test.columns[test.isnull().any()].tolist())}\n''')","8c1f5f33":"train_features.describe().T","e3027987":"train_features.drop(columns = [\"Id\", \"Soil_Type7\", \"Soil_Type15\"], inplace=True)\ntest.drop(columns = [\"Id\", \"Soil_Type7\", \"Soil_Type15\"], inplace=True)","342e7346":"cont_cols = train_features.columns[:10]\ncate_cols = train_features.columns[10:]\n\nprint(f'''\nList of Continious Columns :\n    {cont_cols}\n\nList of Categorical Columns :\n    {cate_cols}\n''')","e54d3264":"plt.figure(figsize=(10, 6), dpi=80)\nsns.countplot(train_target)\nplt.xlabel(\"Cover Type\", fontsize=14)\nplt.ylabel(\"\")\nplt.title(\"Cover Type Value Count\", fontdict={\"fontweight\": \"bold\", \"fontsize\": 16})\nplt.show()","0f474110":"fig, axes = plt.subplots(2, 5, figsize=(25, 10))\n\ncount = 0\nfor i in range(2):\n    for j in range(5):\n        col_name = cont_cols[count]\n\n        sns.kdeplot(train_features[col_name], ax=axes[i, j], color=\"#5BDE54\", label='Train data')\n        sns.kdeplot(test[col_name], ax=axes[i, j], color=\"#DE5454\", label='Test data')\n\n        axes[i, j].set_xlabel(col_name.capitalize(), fontsize=8, fontweight='bold')\n        axes[i, j].set_ylabel('')\n\n        count += 1","85c37d91":"fig, axes = plt.subplots(9, 5, figsize=(25, 50))\n\ncount = 0\nfor i in range(9):\n    for j in range(5):\n        if count < 42:\n            col_name = cate_cols[count]\n\n            sns.countplot(train_features[col_name], ax=axes[i, j], color=\"#5BDE54\", label='Train data')\n            sns.countplot(test[col_name], ax=axes[i, j], color=\"#DE5454\", label='Test data')\n\n            axes[i, j].set_title(f\"{col_name.capitalize()} Count Plot\", fontdict={\"fontweight\": \"bold\"})\n            axes[i, j].set_xlabel(\"\")\n            axes[i, j].set_ylabel(\"\")\n\n            count += 1\n        else : break","bc46fed9":"temp_data = pd.concat([train_features[cont_cols], train_target], axis=1)\n\ncorr_matrix = temp_data.corr()\n\nplt.figure(figsize=(12, 8))\nsns.heatmap(corr_matrix, annot=True, cmap=\"viridis\")\nplt.title(\"Coorelation Heatmap - Continious Variables\", fontdict={\"fontsize\": 14, \"fontweight\": \"bold\"})\nplt.show()","d89ce3fa":"# Summing the all the values of Categorical Values for every Record\ncat_sum = train_features[cate_cols].sum(axis=1)\ncat_sum_val = test[cate_cols].sum(axis=1)\n\n# Adding our New Feature to Data\ntrain_features[\"Cat_Sum\"] = cat_sum\ntest[\"Cat_Sum\"] = cat_sum_val\n\n# Drop the Columns not in Use\ntrain_features.drop(columns=cate_cols, inplace=True)\ntest.drop(columns=cate_cols, inplace=True)","9b4ae160":"train_features[\"mean\"] = train_features[cont_cols].mean(axis=1)\ntrain_features[\"std\"] = train_features[cont_cols].std(axis=1)\ntrain_features[\"min\"] = train_features[cont_cols].min(axis=1)\ntrain_features[\"max\"] = train_features[cont_cols].max(axis=1)\n\ntest[\"mean\"] = test[cont_cols].mean(axis=1)\ntest[\"std\"] = test[cont_cols].std(axis=1)\ntest[\"min\"] = test[cont_cols].min(axis=1)\ntest[\"max\"] = test[cont_cols].max(axis=1)","f4308153":"train_features","ee3fe1bd":"test","dcabc4f8":"standardscaler = StandardScaler()\n\nscaled_data_features = standardscaler.fit_transform(train_features)\nscaled_val_data = standardscaler.transform(test)","4881c89a":"scaled_data_features","c18d42b8":"scaled_val_data","2ad34195":"X_train, X_test, y_train, y_test = train_test_split(scaled_data_features, train_target, test_size=0.2)\n\nX_train.shape, X_test.shape","4e1e1055":"catb_params = {\n    \"objective\": \"MultiClass\",\n    \"task_type\": \"GPU\",\n    \"silent\": True,\n}\n\n# Initializing the Classifier\ncatboostclassifier = CatBoostClassifier(**catb_params)\n\n# Training the Classifier\ncatboostclassifier.fit(X_train, y_train, verbose=False)\n\n# Making Prediction on Testing Data\ny_pred = catboostclassifier.predict(X_test)\n\n# Checking Performance of Classifier\nprint(classification_report(y_test, y_pred))","cdf5f71e":"sample_submission = pd.read_csv(Base_Path + \"sample_submission.csv\")","d8b0abef":"pred = catboostclassifier.predict(scaled_val_data)","5444d421":"# Creating A Dataframe for submission file\nsubmission_df = pd.DataFrame()\nsubmission_df[\"Id\"] = sample_submission.Id\nsubmission_df[\"Cover_Type\"] = pred\n\n# Saving the Submission file as csv file\nsubmission_df.to_csv(\"submission.csv\", index=False)","c529d730":"## Getting the Data","6e0d8bd2":" - \"Soil_Type7\" and \"Soil_Type15\" have only one value that is 0 for all records, So Dropping those columns.\n - Also Dropping the Id Columns because it is just a secondary Index and is of no use.","6e999bcc":"## Correlation Heatmatrix for Continious Variables","02748285":"# Imports","13d4a1e3":"Last Column in Training Data is our target variable. So we have 55 Columns in our Data.","40bec75b":" - From the table returned by .describe() method we can observe and say that the first 10 column i.e., from \"Elevation\" to \"Horizontal_Distance_To_Fire_Points\" are Continious Columns where as other are Categorical Columns with 0 and 1 in them.","452e25ff":"## Getting Predictions","0f6752b8":" - All the Columns in our Data are of Numeric type so we dont have to Encode and Object Type Data.","fe72b345":"## CountPlot for Target Variable","6f1ddf17":"## Finding Categorical Columns","7250afa8":"# Feature Engineering","75159403":"## Countplot for Categorical Variables","da79bdf6":"# Modeling","3e318a91":"# Submission","6a30cbf0":"## Train Test Split","4024ef87":"# KDE plot (Distribution plot) for the Continious Variables","f1f6d04b":"## Scaling the Continious Variables","5c76b708":"## Checking for Null Values","02ddc943":"# Preprocessing and Analysis","90f656db":"# EDA","4177913d":"## Seperating Target Variable from our Training Data","48f6e776":"## Getting Sample Submission File for Ids"}}