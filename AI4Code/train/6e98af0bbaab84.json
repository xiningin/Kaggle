{"cell_type":{"da2983a6":"code","f9b2fcd6":"code","c9d7624e":"code","93e1c4c3":"code","d2048625":"code","d52fd00d":"code","1425031f":"code","5f44736a":"code","bf6510c1":"code","daf15a56":"code","b7acdbf8":"code","8255cef0":"code","b18a9f2a":"code","838acc7c":"code","3f50e14e":"code","5a43c2ea":"code","cdf9c8ca":"code","5da5428d":"code","3e248a0d":"code","9f785f4d":"code","68d7508a":"code","134fddad":"code","a9760407":"markdown","990bc5f3":"markdown","a2646366":"markdown","860c2eef":"markdown","f08232fa":"markdown","9a66e19f":"markdown","dbc39771":"markdown"},"source":{"da2983a6":"# Deal with data\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Splitting Data & Preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# Evalouation\nfrom sklearn.metrics import classification_report, accuracy_score\n\n# Algorithms\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBRFClassifier\n\n# Prevent Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","f9b2fcd6":"df = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')","c9d7624e":"df.head()","93e1c4c3":"print('Mean of Age:', round(df.age.mean()))\nprint('Male Ratio:', round(df.sex.mean(), 2))\nprint('Female Ratio:', round(1 - df.sex.mean(), 2))","d2048625":"df.info()","d52fd00d":"# How many female & male?\n\nplt.figure(dpi = 90)\nsex_data = df.sex.map({1: 'Male', 0: 'Female'})\nsns.countplot(sex_data, palette = 'mako', alpha = 0.8)\nplt.show()","1425031f":"# How many female & male based on target value (output)?\n\nplt.figure(dpi = 90)\nsex_data = df.sex.map({1: 'Male', 0: 'Female'})\nsns.countplot(sex_data, hue = df.output, palette = 'mako', alpha = 0.8)\nplt.show()","5f44736a":"# Age based on sex\n\nfig = sns.FacetGrid(df, palette = 'mako', hue = 'sex', aspect = 5)\nfig.map(sns.kdeplot, 'age', shade = True, palette = 'mako')\nfig.add_legend()\nplt.show()","bf6510c1":"# Cholesterol based on sex\n\nfig = sns.FacetGrid(df, palette = 'mako', hue = 'sex', aspect = 5)\nfig.map(sns.kdeplot, 'chol', shade = True, palette = 'mako')\nfig.add_legend()\nplt.show()","daf15a56":"X = df.drop('output', axis = 1)\nY = df['output']","b7acdbf8":"x_train, x_test, y_train, y_test = train_test_split(X, Y, random_state = 10)","8255cef0":"std = StandardScaler()\nstd.fit(x_train)\nx_train = std.transform(x_train)\nx_test = std.transform(x_test)","b18a9f2a":"xgb = XGBRFClassifier()\nlogReg = LogisticRegression()\nknn = KNeighborsClassifier()","838acc7c":"xgb.fit(x_train, y_train)","3f50e14e":"logReg.fit(x_train, y_train)","5a43c2ea":"knn.fit(x_train, y_train)","cdf9c8ca":"print('XGB Train')\ny_pred = xgb.predict(x_train)\nprint(classification_report(y_pred, y_train))\n\nprint('XGB Test')\ny_pred = xgb.predict(x_test)\nprint(classification_report(y_pred, y_test))","5da5428d":"print('LogReg Train')\ny_pred = logReg.predict(x_train)\nprint(classification_report(y_pred, y_train))\n\nprint('LogReg Test')\ny_pred = logReg.predict(x_test)\nprint(classification_report(y_pred, y_test))","3e248a0d":"print('KNN Train')\ny_pred = knn.predict(x_train)\nprint(classification_report(y_pred, y_train))\n\nprint('KNN Test')\ny_pred = knn.predict(x_test)\nprint(classification_report(y_pred, y_test))","9f785f4d":"result = []\n\nfor k in range(1, 101):\n    new_knn = KNeighborsClassifier(n_neighbors = k)\n    new_knn.fit(x_train, y_train)\n    acc_train = accuracy_score(new_knn.predict(x_train), y_train)\n    acc_test = accuracy_score(new_knn.predict(x_test), y_test)\n    result.append((k, acc_train, acc_test))\n    \nbest_result = max(result, key = lambda item: (item[2], item[1]))\nprint('K:', best_result[0])\nprint('Train Acc:', best_result[1])\nprint('Test Acc:', best_result[1])","68d7508a":"best_knn = KNeighborsClassifier(n_neighbors = 8)\nbest_knn.fit(x_train, y_train)","134fddad":"print('KNN Train')\ny_pred = best_knn.predict(x_train)\nprint(classification_report(y_pred, y_train))\n\nprint('KNN Test')\ny_pred = best_knn.predict(x_test)\nprint(classification_report(y_pred, y_test))","a9760407":"## `KNN (K = 8) WON`","990bc5f3":"#### Data Visulization","a2646366":"#### Read Data","860c2eef":"#### Model Data","f08232fa":"#### Import Libraries","9a66e19f":"#### Exploratory Data Analysis","dbc39771":"#### Find Best `K` for KNN"}}