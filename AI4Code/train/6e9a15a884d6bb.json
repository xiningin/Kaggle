{"cell_type":{"8a346f79":"code","870617b9":"code","23589d50":"code","fb5ca55f":"code","c37cf75f":"code","40f9b930":"code","2bebfb3d":"code","1eb18729":"code","13477d6f":"code","02006606":"code","f0571429":"code","36a248d2":"code","e08efedb":"code","82691856":"code","c8c2b6bf":"code","ac52abe3":"code","7ee443c0":"code","63222ac3":"code","d7e65b9a":"code","50bc1cd0":"code","4b70fca3":"markdown","62910091":"markdown","2fd8acf7":"markdown","9b064b53":"markdown","0c8d95ec":"markdown","a0a25bad":"markdown","dc563c98":"markdown","f9bb17c1":"markdown"},"source":{"8a346f79":"from PIL import Image\nimport numpy as np\n\nimport torch\nimport torch.optim as optim\nfrom torchvision import transforms, models\nimport matplotlib.pyplot as plt\nimport requests","870617b9":"%matplotlib inline","23589d50":"vgg = models.vgg19(pretrained=True).features","fb5ca55f":"# Freezing parameters\nfor param in vgg.parameters():\n    param.requires_grad=False","c37cf75f":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","40f9b930":"vgg.to(device)","2bebfb3d":"def load_image(img_path, max_size=400, shape=None):\n    ''' Load in image and transform an image making sure the image is <= 400 pixels in x-y dims'''\n    if \"http\" in img_path:\n        response = requests.get(img_path)\n        image = Image.open(BytesIO(response.content)).convert('RGB')\n    else:\n        image = Image.open(img_path).convert('RGB')\n    \n    # Large image will slow down processing\n    if max(image.size) > max_size:\n        size = max_size\n    else:\n        size = max(image.size)\n    \n    # Checking shape\n    if shape is not None:\n        size = shape\n        \n    # Transforming image\n    in_transform = transforms.Compose([transforms.Resize(size),\n                                     transforms.ToTensor(),\n                                     transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))]\n                                     )\n    # Discard the transparent, alpha channel that's (channel 3) and add batch dimension\n    image = in_transform(image)[:3, :, :].unsqueeze(0)\n    return image","1eb18729":"# lOAD coontent and style image\ncontent = load_image('..\/input\/style-transfer-test\/content.jpg').to(device)\n# resize style to match content make code easier\nstyle = load_image('..\/input\/style-transfer-test\/style.jpg', shape=content.shape[-2:]).to(device)","13477d6f":"# helper function to convert tensor image to numpy array fot visualization purposes\ndef im_convert(tensor):\n    '''Display tensor as an image'''\n    image = tensor.to('cpu').clone().detach()\n    image = image.numpy().squeeze()\n    image = image.transpose(1, 2, 0)\n    image = image * np.array((0.229, 0.224, 0.225)) + np.array((0.485, 0.456, 0.406))\n    image = image.clip(0, 1)\n    return image","02006606":"plt.imshow(im_convert(content))","f0571429":"plt.imshow(im_convert(style))","36a248d2":"vgg","e08efedb":"def get_features(image, model, layers=None):\n    \"\"\" Run an image forward through a model and get the features for \n        a set of layers. Default layers are for VGGNet matching Gatys et al (2016)\n    \"\"\"\n    \n    ## TODO: Complete mapping layer names of PyTorch's VGGNet to names from the paper\n    ## Need the layers for the content and style representations of an image\n    if layers is None:\n        layers = {'0': 'conv1_1',\n                  '5': 'conv2_1', \n                  '10': 'conv3_1', \n                  '19': 'conv4_1',\n                  '21': 'conv4_2',  ## content representation\n                  '28': 'conv5_1'}\n        \n    features = {}\n    x = image\n    # model._modules is a dictionary holding each module in the model\n    for name, layer in model._modules.items():\n        x = layer(x)\n        if name in layers:\n            features[layers[name]] = x\n            \n    return features","82691856":"def gram_matrix(tensor):\n    \"\"\" Calculate the Gram Matrix of a given tensor \n        Gram Matrix: https:\/\/en.wikipedia.org\/wiki\/Gramian_matrix\n    \"\"\"\n    \n    # get the batch_size, depth, height, and width of the Tensor\n    _, d, h, w = tensor.size()\n    \n    # reshape so we're multiplying the features for each channel\n    tensor = tensor.view(d, h * w)\n    \n    # calculate the gram matrix\n    gram = torch.mm(tensor, tensor.t())\n    \n    return gram ","c8c2b6bf":"# get content and style features only one before forming target image\ncontent_features = get_features(content, vgg)\nstyle_features = get_features(style, vgg)","ac52abe3":"# Calculating the gram matrix for each layer of our style respresntation\nstyle_grams = {layer : gram_matrix(style_features[layer]) for layer in style_features}","7ee443c0":"# create a third \"target\" image and prep it for change\n# it is a good idea to start off with the target as a copy of our *content* image\n# then iteratively change its style\ntarget = content.clone().requires_grad_(True).to(device)","63222ac3":"# Style weights for each of the style layers\n# Weighting earlier layer more will result in Larger styke artifacts\nstyle_weights = {'conv1_1': 1.,\n                 'conv2_1': 0.75,\n                 'conv3_1': 0.2,\n                 'conv4_1': 0.2,\n                 'conv5_1': 0.2}\ncontent_weight = 1 # alpha\nstyle_weight = 1e4 # large beta","d7e65b9a":"# For displaying target image intermittenly\nshow_every = 1000\n\n# iteration hyperparametes\noptimizer = optim.Adam([target], lr=0.003)\nsteps = 3000 # decide how many iteration to update image (5000)\n\nfor ii in range (1, steps+1):\n    \n    # Get feature from target image\n    target_features = get_features(target, vgg)\n\n    # The content loss\n    content_loss = torch.mean((target_features['conv4_2'] - content_features['conv4_2'])**2)\n    \n    # the style  loss\n    # initialize style loss to zero\n    style_loss = 0\n    for layer in style_weights:\n        target_feature = target_features[layer]\n        target_gram = gram_matrix(target_feature)\n        _, d, w, h = target_feature.shape\n        \n        # get stype representation \n        style_gram = style_grams[layer]\n        layer_style_loss = style_weights[layer] * torch.mean((target_gram - style_gram) **2)\n        \n        # Add the style loss\n        style_loss += layer_style_loss \/ (d * h * w)\n        \n    # Calculate total loss\n    total_loss = content_weight * content_loss + style_weight* style_loss\n\n\n    \n    # Updating target image\n    optimizer.zero_grad()\n    total_loss.backward()\n    optimizer.step()\n    \n    # display intermediate images and print the loss\n    if  ii % show_every == 0:\n        print('Total loss: ', total_loss.item())\n        plt.imshow(im_convert(target))\n        plt.show()","50bc1cd0":"# display content and final, target image\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nax1.imshow(im_convert(content))\nax2.imshow(im_convert(target))","4b70fca3":"# loading pre trained vgg","62910091":"loading image by file name and forcing style image to be same as content image.","2fd8acf7":"# Vgg 19 layers","9b064b53":"# Computing Gram matrix","0c8d95ec":"# Loss and weights","a0a25bad":"# Load in content and style images","dc563c98":"# putting it all together","f9bb17c1":"# Updating the target and calculating loss"}}