{"cell_type":{"7bbf21cc":"code","467335d4":"code","f089bcce":"code","6c0049a4":"code","0c27a2fa":"code","a1775091":"code","0f18fdd3":"code","80951f78":"code","0c698ca4":"code","4ac48eb3":"code","2087d659":"code","ccb5c528":"code","7013d59f":"code","c3f31e57":"code","2cf64fe2":"code","92de1a89":"code","99562a61":"code","fe86e47b":"code","24758b14":"code","02076c59":"code","a9223907":"code","09ff4492":"markdown","845c3c78":"markdown","0dcea12f":"markdown","384e4c70":"markdown","e503c5e6":"markdown","416e7443":"markdown","48e21f0f":"markdown","f0e171f4":"markdown","9af7d80b":"markdown","b09b39e0":"markdown","ba532136":"markdown","d5554077":"markdown","cdbf302b":"markdown","4c6377c3":"markdown","05940ec6":"markdown"},"source":{"7bbf21cc":"import pandas as pd\nimport os","467335d4":"data_df = pd.read_csv(\"\/kaggle\/input\/asylum-applicants-by-citizenship-in-europe\/asylum_applicants_in_europe.csv\")\ncountry_codes_df = pd.read_csv(\"\/kaggle\/input\/iso-country-codes-global\/wikipedia-iso-country-codes.csv\")","f089bcce":"data_df.info()","6c0049a4":"country_codes_df.info()","0c27a2fa":"data_df.head()","a1775091":"country_codes_df.head()","0f18fdd3":"cc_df = country_codes_df[['English short name lower case','Alpha-2 code','Alpha-3 code']]\ncc_df.columns = ['citizen_name', 'citizen', 'citizen_3']\ndata_c_df = data_df.merge(cc_df, how='left')\nprint(data_df.shape, data_c_df.shape)\ncc_df.columns = ['geography_name', 'geography', 'geography_3']\ndata_c_df = data_c_df.merge(cc_df, how='left')\nprint(data_c_df.shape)\ndata_c_df.head()","80951f78":"agg_df = data_c_df.groupby(['geography', 'geography_name'])['value'].sum().reset_index()\nagg_df.sort_values([\"value\"], inplace=True, ascending=False)\nagg_df.head(10)","0c698ca4":"top_10_destination = agg_df.head(10).geography_name.values","4ac48eb3":"agg_df = data_c_df.groupby(['citizen', 'citizen_name'])['value'].sum().reset_index()\nagg_df.sort_values([\"value\"], inplace=True, ascending=False)\nagg_df.head(10)","2087d659":"top_10_origin = agg_df.head(10).citizen_name.values","ccb5c528":"import plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\ndef genSankey(df,cat_cols=[],value_cols='',title='Sankey Diagram',param={\"height\":1000}):\n    # maximum of 6 value cols -> 6 colors\n    colorPalette = ['#4B8BBE', '#AF2346','#32CD32','#8B008B','#FFD43B','#646464']\n    labelList = []\n    colorNumList = []\n    for catCol in cat_cols:\n        labelListTemp =  list(set(df[catCol].values))\n        colorNumList.append(len(labelListTemp))\n        labelList = labelList + labelListTemp\n        \n    # remove duplicates from labelList\n    labelList = list(dict.fromkeys(labelList))\n    \n    # define colors based on number of levels\n    colorList = []\n    for idx, colorNum in enumerate(colorNumList):\n        colorList = colorList + [colorPalette[idx]]*colorNum\n       \n    # transform df into a source-target pair\n    for i in range(len(cat_cols)-1):\n        if i==0:\n            sourceTargetDf = df[[cat_cols[i],cat_cols[i+1],value_cols]]\n            sourceTargetDf.columns = ['source','target','count']\n        else:\n            tempDf = df[[cat_cols[i],cat_cols[i+1],value_cols]]\n            tempDf.columns = ['source','target','count']\n            sourceTargetDf = pd.concat([sourceTargetDf,tempDf])\n        sourceTargetDf = sourceTargetDf.groupby(['source','target']).agg({'count':'sum'}).reset_index()\n        \n    # add index for source-target pair\n    sourceTargetDf['sourceID'] = sourceTargetDf['source'].apply(lambda x: labelList.index(x))\n    sourceTargetDf['targetID'] = sourceTargetDf['target'].apply(lambda x: labelList.index(x))\n    \n    # creating the sankey diagram\n    data = dict(\n        type='sankey',\n        node = dict(\n          pad = 15,\n          thickness = 20,\n          line = dict(\n            color = \"black\",\n            width = 0.25\n          ),\n          label = labelList,\n          color = colorList\n        ),\n        link = dict(\n          source = sourceTargetDf['sourceID'],\n          target = sourceTargetDf['targetID'],\n          value = sourceTargetDf['count'],\n        )\n      )\n    \n    layout =  dict(\n        title = title,\n        font = dict(\n          size = 10\n        ),\n        height=param[\"height\"]\n    )\n       \n    fig = dict(data=[data], layout=layout)\n    return fig","7013d59f":"agg_df = data_c_df.groupby(['citizen_name', 'geography_name'])['value'].sum().reset_index()\nagg_df.columns = [\"origin\", \"destination\", \"total\"]\nagg_df.sort_values([\"total\"], inplace=True, ascending=False)\nprint(f\"All combinations: {agg_df.shape[0]}\\nTop 10 combinations:\")\nagg_df.head(10)","c3f31e57":"data_agg = agg_df.head(100)\nfig = genSankey(data_agg,cat_cols=['origin', 'destination'],\\\n                value_cols='total',\n                title='Sankey Diagram for asylum application (top 100 combinations): {country of origin -> country of destination}')\niplot(fig, validate=False)","2cf64fe2":"data_agg = agg_df.loc[agg_df.origin.isin(top_10_origin) & (agg_df.destination.isin(top_10_destination))]","92de1a89":"fig = genSankey(data_agg,cat_cols=['origin', 'destination'],\\\n                value_cols='total',\n                title='Sankey Diagram for asylum application (top 10 country of origin x top 10 country of destination)',\n                param={\"height\": 600})\niplot(fig, validate=False)","99562a61":"import matplotlib.pyplot as plt\nimport seaborn as sns \ndef plot_time_variation(df, c='citizen_name', y='value', is_log=False, title=\"\"):\n    f, ax = plt.subplots(1,1, figsize=(16,12))\n    countries = df[c].unique()\n    for country in countries:\n        df_ = df[(df[c]==country)] \n        df_[y] = df_[y] + 1\n        g = sns.lineplot(x=\"date\", y=y, data=df_,  label=country)  \n        ax.text(max(df_['date']), (df_.loc[df_['date']==max(df_['date']), y]), str(country))\n    plt.xticks(rotation=90)\n    plt.title(f'Total {title}, grouped by country\/year')\n    ax.text(max(df_['date']), (df_.loc[df_['date']==max(df_['date']), y]), str(country))\n    plt.legend(loc=\"upper left\", bbox_to_anchor=(1,1))\n    if(is_log):\n        ax.set(yscale=\"log\")\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show()  ","fe86e47b":"filter_df = data_c_df.loc[data_c_df.citizen_name.isin(top_10_origin)]\nfilter_df = filter_df.groupby(['citizen_name', 'date'])['value'].sum().reset_index()\nplot_time_variation(filter_df,is_log=True,title=\"asylum applications (country of origin)\")","24758b14":"filter_df = data_c_df.loc[data_c_df.geography_name.isin(top_10_destination)]\nfilter_df = filter_df.groupby(['geography_name', 'date'])['value'].sum().reset_index()\nplot_time_variation(filter_df,c='geography_name',is_log=True,title=\"asylum applications (country of destination)\")","02076c59":"filter_df = data_c_df.loc[data_c_df.geography_name.isin(['Germany']) & data_c_df.citizen_name.isin(top_10_origin)]\nfilter_df = filter_df.groupby(['citizen_name', 'date'])['value'].sum().reset_index()\nplot_time_variation(filter_df,c='citizen_name',is_log=True,title=\"asylum applications for Germany (per country of origin)\")","a9223907":"filter_df = data_c_df.loc[data_c_df.citizen_name.isin(['Romania']) & data_c_df.geography_name.isin(top_10_destination)]\nfilter_df = filter_df.groupby(['geography_name', 'date'])['value'].sum().reset_index()\nplot_time_variation(filter_df,c='geography_name',is_log=True,title=\"asylum applications from Germany (per country of destination)\")","09ff4492":"### Visualization function using Sankey diagram","845c3c78":"## Merge asylum data and country data","0dcea12f":"Interestingly, two countries from Central and Eastern Europe, Hungary and Poland are both influx and outflux migration countries.\n\nPoland received until 2007 asylum applicants mostly from Russia and in the same time asylum applicants from Poland were targeting Germany, Portugal and Austria.\n\nHungary received mostly asylum applications from Afganistan and asylum applicants from Hungary targeted mostly Germany and Austria.","384e4c70":"# Data exploration\n\n## Glimpse the data","e503c5e6":"## Sankey diagram for top 100 combination {country of origin | country of destination}\n\nWe aggregate now on both citizenship of asylum applicants and on country receiving applications. All combinations will exceed 5K entries. We select only the first 100 entries.","416e7443":"# Analysis preparation\n\n## Load packages","48e21f0f":"## Top 10 origin and top 10 destination countries combined\n\nLet's now filter the top 10 destination and top 10 origin and only show them in the Sankey diagram.","f0e171f4":"## Load data","9af7d80b":"# Introduction\n\nWe analyze the asylum applicants data. \nWe load also the ISO country codes data, as auxiliary data.  \nUse of Sankey diagrams allows us to show in a single graph the source and destination of asylum application seekers.","b09b39e0":"## Time evolution of asylum applications (top 10 origin countries)\n\nWe will look now to the trends of asylum applications for the top 10 origin countries.","ba532136":"## Top 10 countries of origin for asylum applicants untill 2007","d5554077":"The country codes used in the asylum dataset correspond to the Alpha-2 codes in the ISO country code data. We will merge twice the two datasets to get as well the English short name countries names.","cdbf302b":"### Top 100 combinations Sankey diagram","4c6377c3":"## Top 10 countries receiving asylum applicants untill 2007","05940ec6":"### "}}