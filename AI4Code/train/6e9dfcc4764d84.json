{"cell_type":{"ec0a6286":"code","347f5f39":"code","63e57bf9":"code","006a4c0e":"code","904748d8":"code","d76f38d6":"code","a0dfb861":"code","47d7eb47":"code","9a07501d":"code","1fd7149b":"code","ace074e1":"code","60c33799":"code","8d362562":"code","df357cbb":"code","b9877ff6":"code","131d5bd2":"code","1efad8bc":"code","5c5ddcc3":"code","07664c80":"code","936d61b8":"code","15bce5d2":"code","9756a628":"code","80aa1b39":"code","a4a75d51":"code","d926ca4f":"code","7c2619a3":"code","b715d71b":"code","74596f41":"code","a0ecc980":"code","2bb29de1":"code","37fb6a19":"code","cab00058":"code","1ad56460":"code","5871d1d5":"markdown","2ec2007b":"markdown","df23c7dd":"markdown","e385f41a":"markdown","bcb3b7f6":"markdown","fb75f2f9":"markdown","fbeb2c6b":"markdown","1c236b6b":"markdown","a61f6498":"markdown","a94a4132":"markdown","36ec8e04":"markdown","c3589236":"markdown","3ac08312":"markdown"},"source":{"ec0a6286":"import pandas as pd\nimport numpy as np\nimport datetime\nimport matplotlib.pyplot as plt","347f5f39":"!pip install yfinance --upgrade --no-cache-dir","63e57bf9":"!pip install fix-yahoo-finance","006a4c0e":"from pandas_datareader import data as pdr\nimport fix_yahoo_finance\n\naapl = pdr.get_data_yahoo('AAPL', \n                          start=datetime.datetime(2006, 10, 1), \n                          end=datetime.datetime(2012, 1, 1))\naapl.head()","904748d8":"!pip install Quandl","d76f38d6":"import quandl \naapl = quandl.get(\"WIKI\/AAPL\", start_date=\"2006-10-01\", end_date=\"2012-01-01\")\naapl.head()","a0dfb861":"# Alternatively, you can load in a data set that has been retrieved for you already from Yahoo! Finance: \naapl = pd.read_csv(\"https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/aapl.csv\", header=0, index_col= 0, names=['Open', 'High', 'Low', 'Close', 'Volume', 'Adj Close'], parse_dates=True)","47d7eb47":"# Inspect the index \nprint(aapl.index)\n\n# Inspect the columns\nprint(aapl.columns)\n\n# Select only the last 10 observations of `Close`\nts = aapl['Close'][-10:]\n\n# Check the type of `ts` \ntype(ts)","9a07501d":"# Inspect the first rows of November-December 2006\nprint(aapl.loc[pd.Timestamp('2006-11-01'):pd.Timestamp('2006-12-31')].head())\n\n# Inspect the first rows of 2007 \nprint(aapl.loc['2007'].head())\n\n# Inspect November 2006\nprint(aapl.iloc[22:43])\n\n# Inspect the 'Open' and 'Close' values at 2006-11-01 and 2006-12-01\nprint(aapl.iloc[[22,43], [0, 3]])","1fd7149b":"# Sample 20 rows\nsample = aapl.sample(20)\n\n# Print `sample`\nprint(sample)\n\n# Resample to monthly level \nmonthly_aapl = aapl.resample('M')\n\n# Print `monthly_aapl`\nprint(monthly_aapl)","ace074e1":"# Add a column `diff` to `aapl` \naapl['diff'] = aapl.Open - aapl.Close\n\n# Delete the new `diff` column\ndel aapl['diff']","60c33799":"# Import Matplotlib's `pyplot` module as `plt`\nimport matplotlib.pyplot as plt\n\n# Plot the closing prices for `aapl`\naapl['Close'].plot(grid=True)\n\n# Show the plot\nplt.show()","8d362562":"# Assign `Adj Close` to `daily_close`\ndaily_close = aapl[['Adj Close']]\n\n# Daily returns\ndaily_pct_c = daily_close.pct_change()\n\n# Replace NA values with 0\ndaily_pct_c.fillna(0, inplace=True)\n\n# Inspect daily returns\nprint(daily_pct_c)\n\n# Daily log returns\ndaily_log_returns = np.log(daily_close.pct_change()+1)\n\n# Print daily log returns\nprint(daily_log_returns)","df357cbb":"# Resample `aapl` to business months, take last observation as value \nmonthly = aapl.resample('BM').apply(lambda x: x[-1])\n\n# Calculate the monthly percentage change\nmonthly.pct_change()\n\n# Resample `aapl` to quarters, take the mean as value per quarter\nquarter = aapl.resample(\"4M\").mean()\n\n# Calculate the quarterly percentage change\nquarter.pct_change()","b9877ff6":"# Daily returns\ndaily_pct_c = daily_close \/ daily_close.shift(1) - 1\n\n# Print `daily_pct_c`\nprint(daily_pct_c)","131d5bd2":"# Import matplotlib\nimport matplotlib.pyplot as plt\n\n# Plot the distribution of `daily_pct_c`\ndaily_pct_c.hist(bins=50)\n\n# Show the plot\nplt.show()\n\n# Pull up summary statistics\nprint(daily_pct_c.describe())","1efad8bc":"# Calculate the cumulative daily returns\ncum_daily_return = (1 + daily_pct_c).cumprod()\n\n# Print `cum_daily_return`\nprint(cum_daily_return)","5c5ddcc3":"# Import matplotlib\nimport matplotlib.pyplot as plt \n\n# Plot the cumulative daily returns\ncum_daily_return.plot(figsize=(12,8))\n\n# Show the plot\nplt.show()","07664c80":"# Resample the cumulative daily return to cumulative monthly return \ncum_monthly_return = cum_daily_return.resample(\"M\").mean()\n\n# Print the `cum_monthly_return`\nprint(cum_monthly_return)","936d61b8":"from pandas_datareader import data as pdr\nimport fix_yahoo_finance\n\ndef get(tickers, startdate, enddate):\n    def data(ticker):\n        return (pdr.get_data_yahoo(ticker, start=startdate, end=enddate))\n    datas = map (data, tickers)\n    return(pd.concat(datas, keys=tickers, names=['Ticker', 'Date']))\n\ntickers = ['AAPL', 'MSFT', 'IBM', 'GOOG']\nall_data = get(tickers, datetime.datetime(2006, 10, 1), datetime.datetime(2012, 1, 1))\nall_data.head()","15bce5d2":"#all_data = pd.read_csv(\"https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/all_stock_data.csv\", index_col= [0,1], header=0, parse_dates=[1])","9756a628":"daily_close_px = all_data[['Adj Close']].reset_index().pivot('Date', 'Ticker', 'Adj Close')\n\n# Calculate the daily percentage change for `daily_close_px`\ndaily_pct_change = daily_close_px.pct_change()\n\n# Plot the distributions\ndaily_pct_change.hist(bins=50, sharex=True, figsize=(12,8))\n\n# Show the resulting plot\nplt.show()","80aa1b39":"# Plot a scatter matrix with the `daily_pct_change` data \npd.plotting.scatter_matrix(daily_pct_change, diagonal='kde', alpha=0.1,figsize=(12,12))\n\n# Show the plot\nplt.show()","a4a75d51":"# Isolate the adjusted closing prices \nadj_close_px = aapl['Adj Close']\n\n# Calculate the moving average\nmoving_avg = adj_close_px.rolling(window=40).mean()\n\n# Inspect the result\nmoving_avg[-10:]","d926ca4f":"# Short moving window rolling mean\naapl['42'] = adj_close_px.rolling(window=40).mean()\n\n# Long moving window rolling mean\naapl['252'] = adj_close_px.rolling(window=252).mean()\n\n# Plot the adjusted closing price, the short and long windows of rolling means\naapl[['Adj Close', '42', '252']].plot()\n\nplt.show()","7c2619a3":"# Define the minumum of periods to consider \nmin_periods = 75 \n\n# Calculate the volatility\nvol = daily_pct_change.rolling(min_periods).std() * np.sqrt(min_periods) \n\n# Plot the volatility\nvol.plot(figsize=(10, 8))\n\n# Show the plot\nplt.show()","b715d71b":"# Initialize the short and long windows\nshort_window = 40\nlong_window = 100\n\n# Initialize the `signals` DataFrame with the `signal` column\nsignals = pd.DataFrame(index=aapl.index)\nsignals['signal'] = 0.0\n\n# Create short simple moving average over the short window\nsignals['short_mavg'] = aapl['Close'].rolling(window=short_window, min_periods=1, center=False).mean()\n\n# Create long simple moving average over the long window\nsignals['long_mavg'] = aapl['Close'].rolling(window=long_window, min_periods=1, center=False).mean()\n\n# Create signals\nsignals['signal'][short_window:] = np.where(signals['short_mavg'][short_window:] \n                                            > signals['long_mavg'][short_window:], 1.0, 0.0)   \n\n# Generate trading orders\nsignals['positions'] = signals['signal'].diff()","74596f41":"# Initialize the plot figure\nfig = plt.figure()\n\n# Add a subplot and label for y-axis\nax1 = fig.add_subplot(111,  ylabel='Price in $')\n\n# Plot the closing price\naapl['Close'].plot(ax=ax1, color='r', lw=2.)\n\n# Plot the short and long moving averages\nsignals[['short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.)\n\n# Plot the buy signals\nax1.plot(signals.loc[signals.positions == 1.0].index, \n         signals.short_mavg[signals.positions == 1.0],\n         '^', markersize=10, color='m')\n         \n# Plot the sell signals\nax1.plot(signals.loc[signals.positions == -1.0].index, \n         signals.short_mavg[signals.positions == -1.0],\n         'v', markersize=10, color='k')\n         \n# Show the plot\nplt.show()","a0ecc980":"# Set the initial capital\ninitial_capital= float(100000.0)\n\n# Create a DataFrame `positions`\npositions = pd.DataFrame(index=signals.index).fillna(0.0)\n\n# Buy a 100 shares\npositions['AAPL'] = 100*signals['signal']   \n  \n# Initialize the portfolio with value owned   \nportfolio = positions.multiply(aapl['Adj Close'], axis=0)\n\n# Store the difference in shares owned \npos_diff = positions.diff()\n\n# Add `holdings` to portfolio\nportfolio['holdings'] = (positions.multiply(aapl['Adj Close'], axis=0)).sum(axis=1)\n\n# Add `cash` to portfolio\nportfolio['cash'] = initial_capital - (pos_diff.multiply(aapl['Adj Close'], axis=0)).sum(axis=1).cumsum()   \n\n# Add `total` to portfolio\nportfolio['total'] = portfolio['cash'] + portfolio['holdings']\n\n# Add `returns` to portfolio\nportfolio['returns'] = portfolio['total'].pct_change()","2bb29de1":"import matplotlib.pyplot as plt\n\nfig = plt.figure()\n\nax1 = fig.add_subplot(111, ylabel='Portfolio value in $')\n\n# Plot the equity curve in dollars\nportfolio['total'].plot(ax=ax1, lw=2.)\n\n# Plot the \"buy\" trades against the equity curve\nax1.plot(portfolio.loc[signals.positions == 1.0].index, \n         portfolio.total[signals.positions == 1.0],\n         '^', markersize=10, color='m')\n\n# Plot the \"sell\" trades against the equity curve\nax1.plot(portfolio.loc[signals.positions == -1.0].index, \n         portfolio.total[signals.positions == -1.0],\n         'v', markersize=10, color='k')\n\n# Show the plot\nplt.show()","37fb6a19":"# Isolate the returns of your strategy\nreturns = portfolio['returns']\n\n# annualized Sharpe ratio\nsharpe_ratio = np.sqrt(252) * (returns.mean() \/ returns.std())\n\n# Print the Sharpe ratio\nprint(sharpe_ratio)","cab00058":"# Define a trailing 252 trading day window\nwindow = 252\n\n# Calculate the max drawdown in the past window days for each day\nrolling_max = aapl['Adj Close'].rolling(window, min_periods=1).max()\ndaily_drawdown = aapl['Adj Close']\/rolling_max - 1.0\n\n# Calculate the minimum (negative) daily drawdown\nmax_daily_drawdown = daily_drawdown.rolling(window, min_periods=1).min()\n\n# Plot the results\ndaily_drawdown.plot()\nmax_daily_drawdown.plot()\n\n# Show the plot\nplt.show()","1ad56460":"# Get the number of days in `aapl`\ndays = (aapl.index[-1] - aapl.index[0]).days\n\n# Calculate the CAGR \ncagr = ((((aapl['Adj Close'][-1]) \/ aapl['Adj Close'][1])) ** (365.0\/days)) - 1\n\n# Print CAGR\nprint(cagr)","5871d1d5":"### Maximum Drawdown","2ec2007b":"### Moving Windows","df23c7dd":"<a id='commonanalyses'><\/a>\n## Common Financial Analysis\n\n### Returns","e385f41a":"<a id='backtesting'><\/a>\n## Backtesting A Strategy\n\n### Implementation Of A Simple Backtester With Pandas","bcb3b7f6":"The `pandas_datareader` offers a lot of possibilities to get financial data. If you don't want to make use of this package, however, you can also use Quandl to retrieve data:","fb75f2f9":"### Compound Annual Growth Rate (CAGR)","fbeb2c6b":"# Python for Finance Tutorial For Beginners\n\n*This notebook was made in preparation for the DataCamp tutorial \"Python for Finance Tutorial for Beginners\"; If you want more explanations on the code or on using Python for Finance, go to the full tutorial [here](https:\/\/www.datacamp.com\/community\/tutorials\/finance-python-trading).*\n\nThe full tutorial covers the following topics:\n\n* Getting Started With Python For Finance\n    - Stocks & Trading\n    - Time Series Data\n    - Setting Up The Workspace\n    - [Python Basics For Finance: Pandas](#basics)\n        - Importing Financial Data Into Python\n        - Working With Time Series Data \n        - Visualizing Time Series Data\n* [Common Financial Analyses](#commonanalyses)\n    - Returns\n    - Moving Windows\n    - Volatility Calculation\n    - Ordinary Least-Squares Regression (OLS)\n* [Building A Trading Strategy With Python](#tradingstrategy)\n* [Backtesting A Strategy](#backtesting)\n    - Implementation Of A Simple Backtester\n    - Backtesting With Zipline And Quantopian\n* Improving A Trading Strategy\n* [Evaluating The Trading Strategy](#evaluating)\n    - Sharpe Ratio\n    - Maximum Drawdown\n    - Compound Annual Growth Rate\n* What now?","1c236b6b":"<a id='evaluating'><\/a>\n## Evaluating Moving Average Crossover Strategy \n\n### Sharpe Ratio","a61f6498":"<a id='basics'><\/a>\n## Python Basics For Finance: Pandas\n\n### Importing Data\nAt this moment, there is a lot going on in the open-source community because of the changes to the Yahoo! Finance API. That's why you don't only use the `pandas_datareader` package, but also a custom fix `fix_yahoo_finance` to get your data:","a94a4132":"### Ordinary Least-Squares Regression (OLS)","36ec8e04":"<a id='tradingstrategy'><\/a>\n## Building A Trading Strategy With Python","c3589236":"### Volatility Calculation","3ac08312":"### Working With Time Series Data"}}