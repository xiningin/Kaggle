{"cell_type":{"dd0d0660":"code","8f2ffa8a":"code","1e4af90c":"code","2bdaa936":"code","fac8b9b3":"code","8cf948fe":"code","c064776b":"code","a83ca7d7":"code","62591d3e":"code","5da4dc93":"code","8b90cca4":"code","7ea57fd8":"code","6babf797":"code","6c79ffa1":"code","bf418dd5":"code","f0a40e2e":"code","7213c6ec":"code","fdf39592":"code","e866479c":"code","b50a30d3":"code","62127e31":"code","55066115":"code","eff0a88d":"code","75afb63f":"code","9d637974":"markdown","22f35b76":"markdown","189e83ec":"markdown","9ede7782":"markdown","e3676e00":"markdown","908f9ba1":"markdown","8aa67a27":"markdown","da4fe17f":"markdown","11199839":"markdown","9dbd9ed3":"markdown","d74c040a":"markdown","897fa822":"markdown","d9feb33a":"markdown","0a2f06af":"markdown","2fef0944":"markdown","49fdca7f":"markdown","8c100487":"markdown","b2e920fe":"markdown"},"source":{"dd0d0660":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","8f2ffa8a":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1e4af90c":"train = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/train.csv\")\ntrain","2bdaa936":"test = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/test.csv\")\ntest","fac8b9b3":"submission = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/sample_submission.csv\")\nsubmission","8cf948fe":"train.shape, test.shape","c064776b":"import seaborn as sns\n\nsns.displot(train['target']);","a83ca7d7":"sns.displot(train['standard_error']);","62591d3e":"train['processed_text'] = train['excerpt']\ntest['processed_text'] = test['excerpt']","5da4dc93":"# Apostrophe Dictionary\napostrophe_dict = {\n\"ain't\": \"am not \/ are not\",\n\"aren't\": \"are not \/ am not\",\n\"can't\": \"cannot\",\n\"can't've\": \"cannot have\",\n\"'cause\": \"because\",\n\"could've\": \"could have\",\n\"couldn't\": \"could not\",\n\"couldn't've\": \"could not have\",\n\"didn't\": \"did not\",\n\"doesn't\": \"does not\",\n\"don't\": \"do not\",\n\"hadn't\": \"had not\",\n\"hadn't've\": \"had not have\",\n\"hasn't\": \"has not\",\n\"haven't\": \"have not\",\n\"he'd\": \"he had \/ he would\",\n\"he'd've\": \"he would have\",\n\"he'll\": \"he shall \/ he will\",\n\"he'll've\": \"he shall have \/ he will have\",\n\"he's\": \"he has \/ he is\",\n\"how'd\": \"how did\",\n\"how'd'y\": \"how do you\",\n\"how'll\": \"how will\",\n\"how's\": \"how has \/ how is\",\n\"i'd\": \"I had \/ I would\",\n\"i'd've\": \"I would have\",\n\"i'll\": \"I shall \/ I will\",\n\"i'll've\": \"I shall have \/ I will have\",\n\"i'm\": \"I am\",\n\"i've\": \"I have\",\n\"isn't\": \"is not\",\n\"it'd\": \"it had \/ it would\",\n\"it'd've\": \"it would have\",\n\"it'll\": \"it shall \/ it will\",\n\"it'll've\": \"it shall have \/ it will have\",\n\"it's\": \"it has \/ it is\",\n\"let's\": \"let us\",\n\"ma'am\": \"madam\",\n\"mayn't\": \"may not\",\n\"might've\": \"might have\",\n\"mightn't\": \"might not\",\n\"mightn't've\": \"might not have\",\n\"must've\": \"must have\",\n\"mustn't\": \"must not\",\n\"mustn't've\": \"must not have\",\n\"needn't\": \"need not\",\n\"needn't've\": \"need not have\",\n\"o'clock\": \"of the clock\",\n\"oughtn't\": \"ought not\",\n\"oughtn't've\": \"ought not have\",\n\"shan't\": \"shall not\",\n\"sha'n't\": \"shall not\",\n\"shan't've\": \"shall not have\",\n\"she'd\": \"she had \/ she would\",\n\"she'd've\": \"she would have\",\n\"she'll\": \"she shall \/ she will\",\n\"she'll've\": \"she shall have \/ she will have\",\n\"she's\": \"she has \/ she is\",\n\"should've\": \"should have\",\n\"shouldn't\": \"should not\",\n\"shouldn't've\": \"should not have\",\n\"so've\": \"so have\",\n\"so's\": \"so as \/ so is\",\n\"that'd\": \"that would \/ that had\",\n\"that'd've\": \"that would have\",\n\"that's\": \"that has \/ that is\",\n\"there'd\": \"there had \/ there would\",\n\"there'd've\": \"there would have\",\n\"there's\": \"there has \/ there is\",\n\"they'd\": \"they had \/ they would\",\n\"they'd've\": \"they would have\",\n\"they'll\": \"they shall \/ they will\",\n\"they'll've\": \"they shall have \/ they will have\",\n\"they're\": \"they are\",\n\"they've\": \"they have\",\n\"to've\": \"to have\",\n\"wasn't\": \"was not\",\n\"we'd\": \"we had \/ we would\",\n\"we'd've\": \"we would have\",\n\"we'll\": \"we will\",\n\"we'll've\": \"we will have\",\n\"we're\": \"we are\",\n\"we've\": \"we have\",\n\"weren't\": \"were not\",\n\"what'll\": \"what shall \/ what will\",\n\"what'll've\": \"what shall have \/ what will have\",\n\"what're\": \"what are\",\n\"what's\": \"what has \/ what is\",\n\"what've\": \"what have\",\n\"when's\": \"when has \/ when is\",\n\"when've\": \"when have\",\n\"where'd\": \"where did\",\n\"where's\": \"where has \/ where is\",\n\"where've\": \"where have\",\n\"who'll\": \"who shall \/ who will\",\n\"who'll've\": \"who shall have \/ who will have\",\n\"who's\": \"who has \/ who is\",\n\"who've\": \"who have\",\n\"why's\": \"why has \/ why is\",\n\"why've\": \"why have\",\n\"will've\": \"will have\",\n\"won't\": \"will not\",\n\"won't've\": \"will not have\",\n\"would've\": \"would have\",\n\"wouldn't\": \"would not\",\n\"wouldn't've\": \"would not have\",\n\"y'all\": \"you all\",\n\"y'all'd\": \"you all would\",\n\"y'all'd've\": \"you all would have\",\n\"y'all're\": \"you all are\",\n\"y'all've\": \"you all have\",\n\"you'd\": \"you had \/ you would\",\n\"you'd've\": \"you would have\",\n\"you'll\": \"you shall \/ you will\",\n\"you'll've\": \"you shall have \/ you will have\",\n\"you're\": \"you are\",\n\"you've\": \"you have\"\n}\napostrophe_dict\n","8b90cca4":"def lookup_dict(text, dictionary):\n    for word in text.split():\n        if word.lower() in dictionary:\n            if word.lower() in text.split():\n                text = text.replace(word, dictionary[word.lower()])\n    return text","7ea57fd8":"train['processed_text'] = train['processed_text'].apply(lambda x: lookup_dict(x,apostrophe_dict))\ntest['processed_text'] = test['processed_text'].apply(lambda x: lookup_dict(x,apostrophe_dict))","6babf797":"import re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\n\nstemmer = PorterStemmer()\nwords = stopwords.words(\"english\")\n\ntrain['processed_text'] = train['excerpt'].apply(lambda x: \" \".join([stemmer.stem(i) \nfor i in re.sub(\"[^a-zA-Z]\", \" \", x).split() if i not in words]).lower())\n\ntest['processed_text'] = test['excerpt'].apply(lambda x: \" \".join([stemmer.stem(i) \nfor i in re.sub(\"[^a-zA-Z]\", \" \", x).split() if i not in words]).lower())","6c79ffa1":"import string\n\n#make all words lower case\ntrain['processed_text'] = train['processed_text'].str.lower()\ntest['processed_text'] = test['processed_text'].str.lower()\n\n#Remove punctuation\ntable = str.maketrans('', '', string.punctuation)\ntrain['processed_text'] = [train['processed_text'][row].translate(table) for row in range(len(train['processed_text']))]\ntest['processed_text'] = [test['processed_text'][row].translate(table) for row in range(len(test['processed_text']))]\n\n# remove hash tags\ntrain['processed_text'] = train['processed_text'].str.replace(\"#\", \" \")\ntest['processed_text'] = test['processed_text'].str.replace(\"#\", \" \")\n\n#remove words less than 1 character\ntrain['processed_text'] = train['processed_text'].apply(lambda x: ' '.join([w for w in x.split() if len(w)>1]))\ntest['processed_text'] = test['processed_text'].apply(lambda x: ' '.join([w for w in x.split() if len(w)>1]))","bf418dd5":"from collections import Counter\nfrom itertools import chain\n\n# split words into lists\nv = train['processed_text'].str.split().tolist() \n# compute global word frequency\nc = Counter(chain.from_iterable(v))\n# filter, join, and re-assign\ntrain['processed_text'] = [' '.join([j for j in i if c[j] > 1]) for i in v]\n\n# split words into lists\nv = test['processed_text'].str.split().tolist() \n# compute global word frequency\nc = Counter(chain.from_iterable(v))\n# filter, join, and re-assign\ntest['processed_text'] = [' '.join([j for j in i if c[j] > 1]) for i in v]\n","f0a40e2e":"y=train['target']\nX=train['processed_text']\nX_test=test['processed_text']","7213c6ec":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.10, random_state=42, shuffle=True)\nX_train.shape, X_val.shape, y_train.shape,y_val.shape","fdf39592":"from sklearn.feature_extraction.text import TfidfVectorizer\n\nvectorizer_tfidf = TfidfVectorizer(stop_words='english', max_df=0.7)\ntrain_tfIdf = vectorizer_tfidf.fit_transform(X_train.values.astype('U'))\nval_tfIdf = vectorizer_tfidf.transform(X_val.values.astype('U'))\nX_test_tfIdf = vectorizer_tfidf.transform(X_test.values.astype('U'))\nprint(vectorizer_tfidf.get_feature_names()[:5])","e866479c":"train_tfIdf.shape,  y_train.shape, val_tfIdf.shape, y_val.shape,  X_test_tfIdf.shape","b50a30d3":"from sklearn.gaussian_process import GaussianProcessRegressor as GP\n\nmodel = GP(random_state=1).fit(train_tfIdf.todense(), y_train)\nprint(model.score(train_tfIdf.todense(), y_train))","62127e31":"y_pred = model.predict(val_tfIdf.todense())\nmodel.score(val_tfIdf.todense(), y_val)","55066115":"predictions = model.predict(X_test_tfIdf.todense())\npredictions.shape","eff0a88d":"submission.target = predictions","75afb63f":"submission.to_csv('submission.csv', index=False)\nsubmission = pd.read_csv(\"submission.csv\")\nsubmission","9d637974":"Convert text to word vectoriser","22f35b76":"Apostrophe dictionary","189e83ec":"Define X, y and X_test","9ede7782":"Remove rare words","e3676e00":"Remove special characters","908f9ba1":"Split X up for training and testing","8aa67a27":"Stem the words in the processed text","da4fe17f":"Analyse target","11199839":"Predict on validation set","9dbd9ed3":"Create new column of processed text","d74c040a":"Analyse standard error","897fa822":"Apply apostrophe to processed_text","d9feb33a":"In this competition, you\u2019ll build algorithms to rate the complexity of reading passages for grade 3-12 classroom use. To accomplish this, you'll pair your machine learning skills with a dataset that includes readers from a wide variety of age groups and a large collection of texts taken from various domains. Winning models will be sure to incorporate text cohesion and semantics.","0a2f06af":"Define model","2fef0944":"Read files","49fdca7f":"Predict on test set","8c100487":"Prepare submission","b2e920fe":"Define lookup dict"}}