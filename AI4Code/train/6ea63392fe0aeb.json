{"cell_type":{"9d0ebc79":"code","5462d2c9":"code","17bacfa0":"code","ffd37d58":"code","ff388857":"code","d35a9b78":"code","2fc23e09":"code","9d7c926f":"code","0cdc504b":"code","807c8173":"code","ab4c0736":"code","a3045f64":"code","2799a973":"code","6e5c9767":"code","005ad1d1":"code","ffe12d5e":"code","b69f831e":"code","2b179d4c":"code","f7d49940":"code","5151ed61":"code","d1281269":"code","2b31afb3":"code","a09ae580":"code","af54a693":"markdown"},"source":{"9d0ebc79":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5462d2c9":"# Import required librarues\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import PowerTransformer\nfrom sklearn.preprocessing import QuantileTransformer\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.multiclass import OneVsRestClassifier\n\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n\nfrom mlxtend.classifier import StackingCVClassifier\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.metrics import accuracy_score\n\nfrom mlxtend.feature_selection import SequentialFeatureSelector as SFS\nfrom mlxtend.plotting import plot_sequential_feature_selection as plot_sfs","17bacfa0":"train = pd.read_csv(\"\/kaggle\/input\/learn-together\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/learn-together\/test.csv\")","ffd37d58":"# Remove the Labels and make them y\ny = train['Cover_Type']\n\n# Remove label from Train set\nX = train.drop(['Cover_Type'],axis=1)\n\n# Rename test to text_X\ntest_X = test\n\n\n\n# split data into training and validation data\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.2, random_state=42)\n\nX = X.drop(['Id'], axis = 1)\ntrain_X = train_X.drop(['Id'], axis = 1)\nval_X = val_X.drop(['Id'], axis = 1)\ntest_X = test_X.drop(['Id'], axis = 1)","ff388857":"train_X.describe()","d35a9b78":"val_X.describe()","2fc23e09":"sns.distplot(train_X['Elevation'], label = 'train_X')\nsns.distplot(val_X['Elevation'], label = 'val_X')\nsns.distplot(test_X['Elevation'], label = 'test_X')\nplt.legend()\nplt.title('Elevation')\nplt.show()","9d7c926f":"sns.distplot(train_X['Aspect'], label = 'train_X')\nsns.distplot(val_X['Aspect'], label = 'val_X')\nsns.distplot(test_X['Aspect'], label = 'test_X')\nplt.title('Aspect')\nplt.legend()\nplt.show()","0cdc504b":"sns.distplot(train_X['Horizontal_Distance_To_Hydrology'], label = 'train_X')\nsns.distplot(val_X['Horizontal_Distance_To_Hydrology'], label = 'val_X')\nsns.distplot(test_X['Horizontal_Distance_To_Hydrology'], label = 'test_X')\nplt.title('Horizontal_Distance_To_Hydrology')\nplt.legend()\nplt.show()","807c8173":"sns.distplot(train_X['Vertical_Distance_To_Hydrology'], label = 'train_X')\nsns.distplot(val_X['Vertical_Distance_To_Hydrology'], label = 'val_X')\nsns.distplot(test_X['Vertical_Distance_To_Hydrology'], label = 'test_X')\nplt.title('Vertical_Distance_To_Hydrology')\nplt.legend()\nplt.show()","ab4c0736":"sns.distplot(train_X['Horizontal_Distance_To_Roadways'], label = 'train_X')\nsns.distplot(val_X['Horizontal_Distance_To_Roadways'], label = 'val_X')\nsns.distplot(test_X['Horizontal_Distance_To_Roadways'], label = 'test_X')\nplt.title('Horizontal_Distance_To_Roadways')\nplt.legend()\nplt.show()","a3045f64":"sns.distplot(train_X['Hillshade_9am'], label = 'train_X')\nsns.distplot(val_X['Hillshade_9am'], label = 'val_X')\nsns.distplot(test_X['Hillshade_9am'], label = 'test_X')\nplt.title('Hillshade_9am')\nplt.legend()\nplt.show()","2799a973":"### define the classifiers\n\n#classifier_rf = RandomForestClassifier(random_state=42)\nclassifier_xgb = OneVsRestClassifier(XGBClassifier(random_state=42))\n#classifier_et = ExtraTreesClassifier(random_state=42)","6e5c9767":"\n#sclf_sbs = StackingCVClassifier(classifiers=[classifier_rf,\n#                                         classifier_xgb,\n#                                         classifier_et],\n#                            use_probas=True,\n#                            meta_classifier=classifier_rf)","005ad1d1":"### Running Sequential Backward Selection with Random Forest Only\nseqbacksel_xgb = SFS(classifier_xgb, k_features = (30, 50),\n                    forward = False, floating = False,\n                    scoring = 'accuracy', cv = 5, \n                    n_jobs = -1)\nseqbacksel_xgb = seqbacksel_xgb.fit(train_X, train_y.values.ravel())\n\n\nprint('best combination (ACC: %.3f): %s\\n' % (seqbacksel_xgb.k_score_, seqbacksel_xgb.k_feature_idx_))\nprint('all subsets:\\n', seqbacksel_xgb.subsets_)\nplot_sfs(seqbacksel_xgb.get_metric_dict(), kind='std_err');","ffe12d5e":"train_X_sbs = seqbacksel_xgb.transform(train_X)\nval_X_sbs = seqbacksel_xgb.transform(val_X)","b69f831e":"classifier_xgb.fit(train_X_sbs, train_y.values.ravel())","2b179d4c":"\nvalsbs_pred = classifier_xgb.predict(val_X_sbs)","f7d49940":"acc = accuracy_score(val_y, valsbs_pred)\nprint(acc)","5151ed61":"X_sbs = seqbacksel_xgb.transform(X)\ntest_X_sbs = seqbacksel_xgb.transform(test_X)","d1281269":"classifier_xgbfin = OneVsRestClassifier(XGBClassifier(random_state=42))\n\nclassifier_xgbfin.fit(X_sbs, y.values.ravel())","2b31afb3":"test_ids = test[\"Id\"]\ntest_pred = classifier_xgbfin.predict(test_X_sbs)","a09ae580":"# Save test predictions to file\noutput = pd.DataFrame({'Id': test_ids,\n                       'Cover_Type': test_pred})\noutput.to_csv('submission.csv', index=False)","af54a693":"### Import the Raw Data"}}