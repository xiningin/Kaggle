{"cell_type":{"934a8d45":"code","cf720344":"code","4a5f0b63":"code","eadd3d40":"code","8c2929ec":"code","9e54e28a":"code","e0b01374":"code","065e4075":"code","92db3ceb":"code","594628fa":"code","ccea337e":"code","8ac58ade":"code","73fd6c47":"code","c0cc4c7d":"code","ce3d282f":"code","0eb60356":"code","c69a36d7":"code","9ccb3c04":"code","1a823039":"code","22948d33":"code","b7b56332":"code","a8f46cfa":"markdown","cfae70e2":"markdown","6199ece2":"markdown","dc0ca82c":"markdown","f58f9581":"markdown","416f75e9":"markdown","bb934795":"markdown","a1f6ce69":"markdown"},"source":{"934a8d45":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport tensorflow_addons as tfa\nfrom kaggle_datasets import KaggleDatasets\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport re\nimport os\nimport math\nimport random\nimport cv2\n\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()","cf720344":"GCS_PATH = KaggleDatasets().get_gcs_path('monetpku')\nfn_monet = tf.io.gfile.glob(str(GCS_PATH + '\/monet_jpg\/*.jpg'))\nfn_photo = tf.io.gfile.glob(str(GCS_PATH + '\/photo_jpg\/*.jpg'))","4a5f0b63":"BATCH_SIZE =  4\n\n\ndef parse_function(filename):\n    image_string = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(image_string, channels=3)\n    image = (tf.cast(image,tf.float32)\/ 127.5) - 1\n    image = tf.reshape(image, [256, 256,3])\n    return image\n\ndef data_augment(image):\n    p_rotate = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    p_spatial = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    p_crop = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    if p_crop > .5:\n        image = tf.image.resize(image, [286, 286])\n        image = tf.image.random_crop(image, size=[256, 256, 3])\n        if p_crop > .9:\n            image = tf.image.resize(image, [300, 300])\n            image = tf.image.random_crop(image, size=[256, 256, 3])\n    \n    if p_rotate > .9:\n        image = tf.image.rot90(image, k=3)\n    elif p_rotate > .7:\n        image = tf.image.rot90(image, k=2)\n    elif p_rotate > .5:\n        image = tf.image.rot90(image, k=1)\n        \n    if p_spatial > .6:\n        image = tf.image.random_flip_left_right(image)\n        image = tf.image.random_flip_up_down(image)\n        if p_spatial > .9:\n            image = tf.image.transpose(image)\n    \n    return image\n\nnum_parallel_calls=tf.data.experimental.AUTOTUNE\ndef getSet(filenames):\n    dataset = tf.data.Dataset.from_tensor_slices(filenames)\n    dataset = dataset.shuffle(len(filenames))\n    dataset = dataset.map(parse_function, num_parallel_calls)\n    dataset = dataset.map(data_augment, num_parallel_calls)\n    dataset = dataset.repeat()\n    dataset = dataset.batch(BATCH_SIZE,drop_remainder=True)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(num_parallel_calls)\n    return dataset\n\nmonet_ds=getSet(fn_monet)\nphoto_ds=getSet(fn_photo)","eadd3d40":"OUTPUT_CHANNELS = 3\n\ndef downsample(filters, size, apply_instancenorm=True):\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = keras.initializers.RandomNormal(mean=0.0, stddev=0.02)\n\n    result = keras.Sequential()\n    result.add(layers.Conv2D(filters, size, strides=2, padding='same',kernel_initializer=initializer, use_bias=False))\n\n    if apply_instancenorm:\n        result.add(tfa.layers.InstanceNormalization(gamma_initializer=gamma_init))\n\n    result.add(layers.LeakyReLU())\n\n    return result","8c2929ec":"def upsample(filters, size, apply_dropout=False):\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = keras.initializers.RandomNormal(mean=0.0, stddev=0.02)\n\n    result = keras.Sequential()\n    result.add(layers.Conv2DTranspose(filters, size, strides=2,padding='same',kernel_initializer=initializer,use_bias=False))\n\n    result.add(tfa.layers.InstanceNormalization(gamma_initializer=gamma_init))\n\n    if apply_dropout:\n        result.add(layers.Dropout(0.5))\n\n    result.add(layers.ReLU())\n\n    return result","9e54e28a":"def Generator():\n    inputs = layers.Input(shape=[256,256,3])\n\n    # bs = batch size\n    #\u4e0b\u91c7\u6837\u5c42\u5217\u8868\n    down_stack = [\n        downsample(64, 4, apply_instancenorm=False), # (bs, 128, 128, 64) \n        downsample(128, 4), # (bs, 64, 64, 128)\n        downsample(256, 4), # (bs, 32, 32, 256)\n        downsample(512, 4), # (bs, 16, 16, 512)\n        downsample(512, 4), # (bs, 8, 8, 512)\n        downsample(512, 4), # (bs, 4, 4, 512)\n        downsample(512, 4), # (bs, 2, 2, 512)\n        downsample(512, 4), # (bs, 1, 1, 512)\n    ]\n    #\u4e0a\u91c7\u6837\u5c42\u5217\u8868\n    up_stack = [\n        upsample(512, 4, apply_dropout=True), # (bs, 2, 2, 1024) \n        upsample(512, 4, apply_dropout=True), # (bs, 4, 4, 1024)\n        upsample(512, 4, apply_dropout=True), # (bs, 8, 8, 1024)\n        upsample(512, 4), # (bs, 16, 16, 1024)\n        upsample(256, 4), # (bs, 32, 32, 512)\n        upsample(128, 4), # (bs, 64, 64, 256)\n        upsample(64, 4), # (bs, 128, 128, 128)\n    ]\n\n    initializer = tf.random_normal_initializer(0., 0.02)\n    # (bs, 256, 256, 3)\n    last = layers.Conv2DTranspose(OUTPUT_CHANNELS, 4,strides=2,padding='same',kernel_initializer=initializer,activation='tanh')\n\n    x = inputs\n\n    #\u8fdb\u884c\u4e0b\u91c7\u6837\n    skips = []\n    for down in down_stack:\n        x = down(x)\n        skips.append(x)\n\n    skips = reversed(skips[:-1])\n\n    #\u8fdb\u884c\u4e0a\u91c7\u6837\n    for up, skip in zip(up_stack, skips):\n        x = up(x)\n        x = layers.Concatenate()([x, skip])\n\n    x = last(x)\n\n    return keras.Model(inputs=inputs, outputs=x)","e0b01374":"tf.keras.utils.plot_model(Generator(), show_shapes=True, dpi=64)","065e4075":"def Discriminator():\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = keras.initializers.RandomNormal(mean=0.0, stddev=0.02)\n\n    inp = layers.Input(shape=[256, 256, 3], name='input_image')\n\n    x = inp\n\n    down1 = downsample(64, 4, False)(x) # (bs, 128, 128, 64)\n    down2 = downsample(128, 4)(down1) # (bs, 64, 64, 128)\n    down3 = downsample(256, 4)(down2) # (bs, 32, 32, 256)\n\n    zero_pad1 = layers.ZeroPadding2D()(down3) # (bs, 34, 34, 256)\n    conv = layers.Conv2D(512, 4, strides=1,kernel_initializer=initializer,use_bias=False)(zero_pad1) # (bs, 31, 31, 512)\n\n    norm1 = tfa.layers.InstanceNormalization(gamma_initializer=gamma_init)(conv)\n\n    leaky_relu = layers.LeakyReLU()(norm1)\n\n    zero_pad2 = layers.ZeroPadding2D()(leaky_relu) # (bs, 33, 33, 512)\n\n    last = layers.Conv2D(1, 4, strides=1,\n                         kernel_initializer=initializer)(zero_pad2) # (bs, 30, 30, 1)\n\n    return tf.keras.Model(inputs=inp, outputs=last)","92db3ceb":"# tf.keras.utils.plot_model(Discriminator(), show_shapes=True, dpi=64)","594628fa":"class CycleGan(keras.Model):\n    def __init__(self,monet_generator,photo_generator,monet_discriminator,photo_discriminator,lambda_cycle=15):\n        super(CycleGan, self).__init__()\n        self.m_gen = monet_generator\n        self.p_gen = photo_generator\n        self.m_disc = monet_discriminator\n        self.p_disc = photo_discriminator\n        self.lambda_cycle = lambda_cycle\n        \n    def compile(self,m_gen_optimizer,p_gen_optimizer,m_disc_optimizer,p_disc_optimizer,gen_loss_fn,disc_loss_fn,cycle_loss_fn,identity_loss_fn):\n        super(CycleGan, self).compile()\n        self.m_gen_optimizer = m_gen_optimizer\n        self.p_gen_optimizer = p_gen_optimizer\n        self.m_disc_optimizer = m_disc_optimizer\n        self.p_disc_optimizer = p_disc_optimizer\n        \n        self.gen_loss_fn = gen_loss_fn\n        self.disc_loss_fn = disc_loss_fn\n        self.cycle_loss_fn = cycle_loss_fn\n        self.identity_loss_fn = identity_loss_fn\n        \n    def train_step(self, batch_data):\n        real_monet, real_photo = batch_data\n        \n        with tf.GradientTape(persistent=True) as tape:\n            fake_monet = self.m_gen(real_photo, training=True)#G(x)\n            cycled_photo = self.p_gen(fake_monet, training=True)#F(G(x))\n\n            fake_photo = self.p_gen(real_monet, training=True)#F(y)\n            cycled_monet = self.m_gen(fake_photo, training=True)#G(F(y))\n\n            same_monet = self.m_gen(real_monet, training=True)#G(y)\n            same_photo = self.p_gen(real_photo, training=True)#F(x)\n\n            disc_real_monet = self.m_disc(real_monet, training=True)#DY(y)\n            disc_real_photo = self.p_disc(real_photo, training=True)#DX(x)\n\n            disc_fake_monet = self.m_disc(fake_monet, training=True)#DY(G(x))\n            disc_fake_photo = self.p_disc(fake_photo, training=True)#DX(F(y))\n\n            #\u7528\u4e8e\u8bad\u7ec3\u751f\u6210\u5668\u7684\u635f\u5931\u51fd\u6570\uff08\u57fa\u672c\u90e8\u5206\uff09\n            monet_gen_loss = self.gen_loss_fn(disc_fake_monet)\n            photo_gen_loss = self.gen_loss_fn(disc_fake_photo)\n\n            #\u5faa\u73af\u4e00\u81f4\u6027\u635f\u5931\n            total_cycle_loss = self.cycle_loss_fn(real_monet, cycled_monet, self.lambda_cycle) + self.cycle_loss_fn(real_photo, cycled_photo, self.lambda_cycle)\n\n            # evaluates total generator loss\n            total_monet_gen_loss = monet_gen_loss + total_cycle_loss + self.identity_loss_fn(real_monet, same_monet, self.lambda_cycle)\n            total_photo_gen_loss = photo_gen_loss + total_cycle_loss + self.identity_loss_fn(real_photo, same_photo, self.lambda_cycle)\n\n            # evaluates discriminator loss\n            monet_disc_loss = self.disc_loss_fn(disc_real_monet, disc_fake_monet)\n            photo_disc_loss = self.disc_loss_fn(disc_real_photo, disc_fake_photo)\n\n        # \u635f\u5931\u51fd\u6570\u5bf9\u7f51\u7edc\u5f53\u4e2d\u7684\u53c2\u6570\u6c42\u68af\u5ea6\n        monet_generator_gradients = tape.gradient(total_monet_gen_loss,self.m_gen.trainable_variables)\n        photo_generator_gradients = tape.gradient(total_photo_gen_loss,self.p_gen.trainable_variables)\n        monet_discriminator_gradients = tape.gradient(monet_disc_loss,self.m_disc.trainable_variables)\n        photo_discriminator_gradients = tape.gradient(photo_disc_loss,self.p_disc.trainable_variables)\n\n        #\u4f18\u5316\u5668\u5411\u524d\u8fed\u4ee3\u4e00\u6b65\n        self.m_gen_optimizer.apply_gradients(zip(monet_generator_gradients,self.m_gen.trainable_variables))\n        self.p_gen_optimizer.apply_gradients(zip(photo_generator_gradients,self.p_gen.trainable_variables))\n        self.m_disc_optimizer.apply_gradients(zip(monet_discriminator_gradients,self.m_disc.trainable_variables))\n        self.p_disc_optimizer.apply_gradients(zip(photo_discriminator_gradients,self.p_disc.trainable_variables))\n        \n        return {\"monet_gen_loss\": total_monet_gen_loss,\"photo_gen_loss\": total_photo_gen_loss,\"monet_disc_loss\": monet_disc_loss,\"photo_disc_loss\": photo_disc_loss}","ccea337e":"with strategy.scope():\n    def discriminator_loss(real, generated):\n        real_loss = tf.keras.losses.BinaryCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)(tf.ones_like(real), real)#\u5bf9\u4e8e\u771f\u5b9e\u6837\u672c\uff0c\u901a\u8fc7\u9274\u522b\u5668\u540e\u4e0e\u51681\u77e9\u9635\u8ba1\u7b97\u4ea4\u53c9\u71b5\uff0c\u4f7f\u5f97D\u5bf9\u771f\u5b9e\u6570\u636e\u8f93\u51fa\u5c3d\u53ef\u80fd\u63a5\u8fd11\n        generated_loss = tf.keras.losses.BinaryCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)(tf.zeros_like(generated), generated)#\u5bf9\u4e8e\u751f\u6210\u6837\u672c\uff0c\u901a\u8fc7\u9274\u522b\u5668\u540e\u4e0e\u51680\u77e9\u9635\u8ba1\u7b97\u4ea4\u53c9\u71b5\uff0c\u4f7f\u5f97D\u5bf9\u751f\u6210\u6570\u636e\u8f93\u51fa\u5c3d\u53ef\u80fd\u63a5\u8fd10\n        total_disc_loss = real_loss + generated_loss\n        return total_disc_loss * 0.5","8ac58ade":"with strategy.scope():\n    def generator_loss(generated):\n        return tf.keras.losses.BinaryCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)(tf.ones_like(generated), generated)#\u5bf9\u4e8e\u751f\u6210\u6837\u672c\uff0c\u901a\u8fc7\u9274\u522b\u5668\u540e\u4e0e\u51681\u77e9\u9635\u8ba1\u7b97\u4ea4\u53c9\u71b5\uff0c\u4f7f\u5f97D\u5bf9\u751f\u6210\u6570\u636e\u8f93\u51fa\u5c3d\u53ef\u80fd\u63a5\u8fd11","73fd6c47":"with strategy.scope():\n    def calc_cycle_loss(real_image, cycled_image, LAMBDA):#\u5faa\u73af\u4e00\u81f4\u6027\u635f\u5931\n        loss1 = tf.reduce_mean(tf.abs(real_image - cycled_image))\n        return LAMBDA * loss1","c0cc4c7d":"with strategy.scope():\n    def identity_loss(real_image, same_image, LAMBDA):#\u81ea\u6211\u4e00\u81f4\u6027\u635f\u5931\n        loss = tf.reduce_mean(tf.abs(real_image - same_image))\n        return LAMBDA * 0.5 * loss","ce3d282f":"with strategy.scope():\n    monet_generator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_generator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    monet_discriminator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_discriminator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)","0eb60356":"with strategy.scope():\n    monet_generator=Generator()\n    photo_generator=Generator()\n    monet_discriminator=Discriminator()\n    photo_discriminator=Discriminator()\n    \nwith strategy.scope():\n    cycle_gan_model = CycleGan(monet_generator,photo_generator,monet_discriminator,photo_discriminator)\n    cycle_gan_model.compile(\n            m_gen_optimizer = monet_generator_optimizer,\n            p_gen_optimizer = photo_generator_optimizer,\n            m_disc_optimizer = monet_discriminator_optimizer,\n            p_disc_optimizer = photo_discriminator_optimizer,\n            gen_loss_fn = generator_loss,\n            disc_loss_fn = discriminator_loss,\n            cycle_loss_fn = calc_cycle_loss,\n            identity_loss_fn = identity_loss\n        )","c69a36d7":"steps_per_epoch=(max(len(fn_monet), len(fn_photo)))\/\/BATCH_SIZE\ncycle_gan_model.fit(tf.data.Dataset.zip((monet_ds, photo_ds)),epochs=500,steps_per_epoch=steps_per_epoch)","9ccb3c04":"testset = tf.data.Dataset.from_tensor_slices(fn_photo)\ntestset = testset.shuffle(len(fn_photo))\ntestset = testset.map(parse_function, num_parallel_calls)\ntestset=testset.batch(1)\ntestset = testset.prefetch(num_parallel_calls)\n\n\n_, ax = plt.subplots(5, 2, figsize=(20, 20))\nfor i, img in enumerate(testset.take(5)):\n    prediction = monet_generator(img, training=False)[0].numpy()\n    prediction = (prediction * 127.5 + 127.5).astype(np.uint8)\n    img = (img[0] * 127.5 + 127.5).numpy().astype(np.uint8)\n\n    ax[i, 0].imshow(img)\n    ax[i, 1].imshow(prediction)\n    ax[i, 0].set_title(\"Input Photo\")\n    ax[i, 1].set_title(\"Monet-esque\")\n    ax[i, 0].axis(\"off\")\n    ax[i, 1].axis(\"off\")\nplt.show()","1a823039":"import PIL\n\ndef predict_and_save(input_ds, generator_model, output_path):\n    i = 1\n    for img in input_ds:\n        prediction = generator_model(img, training=False)[0].numpy() # make predition\n        prediction = (prediction * 127.5 + 127.5).astype(np.uint8)   # re-scale\n        im = PIL.Image.fromarray(prediction)\n        im.save(output_path+\"\/\"+str(i)+'.jpg')\n        i += 1","22948d33":"import os\nos.makedirs('..\/images\/') # Create folder to save generated images\nmonet_generator.save(\"model\/monet_generator.h5\")\nphoto_generator.save(\"model\/photo_generator.h5\")\nmonet_discriminator.save(\"model\/monet_discriminator.h5\")\nphoto_discriminator.save(\"model\/monet_discriminator.h5\")\n# tf.saved_model.save(monet_generator, '..\/models\/version9.h5')\npredict_and_save(testset, monet_generator, '..\/images\/')","b7b56332":"import shutil\nshutil.make_archive('\/kaggle\/working\/images\/', 'zip', '..\/images')\n# shutil.make_archive('\/kaggle\/working\/models\/', 'zip', '..\/models')\nprint(f\"Generated samples: {len([name for name in os.listdir('..\/images\/') if os.path.isfile(os.path.join('..\/images\/', name))])}\")","a8f46cfa":"# \u63d0\u4ea4","cfae70e2":"# Generator U-Net","6199ece2":"# Loss Function","dc0ca82c":"# Discriminator","f58f9581":"# Some results","416f75e9":"# \u8bad\u7ec3","bb934795":"# \u8bfb\u53d6\u6570\u636e","a1f6ce69":"# CycleGAN"}}