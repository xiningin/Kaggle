{"cell_type":{"a820a835":"code","a21ed6eb":"code","cf77eb66":"code","e9fc022b":"code","14f9e3b3":"code","d235fadf":"code","9d333d29":"code","7bfd985b":"code","8e796ba2":"code","e2e39465":"code","b6387b70":"code","93826963":"code","f0f165a0":"code","e05f75d6":"code","ec248fe4":"code","3351af8c":"code","8d51aa7b":"code","89f43ab7":"code","672aa5d5":"code","08778dcf":"code","b19a08b0":"code","6d9baffb":"code","00148854":"code","c61c0973":"code","c525c93d":"code","f0a24eca":"code","12c731ee":"code","5291cbed":"code","fce4c47b":"code","9f774266":"code","4c6e13be":"code","69a4c9f5":"code","f49f2208":"code","1e194d76":"code","0a42a4aa":"code","3e817c0e":"code","82110a48":"code","1a6d7e93":"code","c96e3d89":"code","2c6efa52":"code","1097d710":"code","5a2d5e1a":"code","5d43f92a":"code","d1793b07":"code","fda7bdd7":"code","634bd6a5":"code","571169a3":"code","6cf2d868":"code","bea5e308":"code","a6bd2542":"code","c463077c":"markdown","64f6f0dd":"markdown","63fb0f49":"markdown","38f420af":"markdown","c80df74b":"markdown","c70145d8":"markdown","b1b3af13":"markdown","3d371840":"markdown","7a16900c":"markdown","a5dde80f":"markdown","ca6369ff":"markdown","141aa21f":"markdown","0450c837":"markdown","2ff65e04":"markdown","fa9e5366":"markdown","c9266d8e":"markdown","9c426766":"markdown"},"source":{"a820a835":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns","a21ed6eb":"df = pd.read_csv('\/kaggle\/input\/ihsmarkit-hackathon-june2020\/train_data.csv')","cf77eb66":"print(df.shape)\ndf.head()","e9fc022b":"df.set_index('vehicle_id', inplace=True)\ndf.sample(10)","14f9e3b3":"df.isnull().values.any()","d235fadf":"df.describe()","9d333d29":"df.columns.tolist()","7bfd985b":"df.columns","8e796ba2":"df.dtypes","e2e39465":"def draw_histograms(df, variables, n_rows, n_cols):\n    fig=plt.figure(figsize=(10,10))\n    for i, var_name in enumerate(variables):\n        ax=fig.add_subplot(n_rows,n_cols,i+1)\n        df[var_name].hist(ax=ax)\n        plt.axvline(df[var_name].mean(), color='r', linestyle='dashed', linewidth=2)\n        ax.set_title(var_name+\" Distribution\")\n    fig.tight_layout()\n    plt.show()","b6387b70":"draw_histograms(df,\n                df.select_dtypes(include=[np.number]).columns.tolist(),\n                int(len(df.select_dtypes(include=[np.number]).columns.tolist())\/2)+1, 2)","93826963":"# Draw scatter plots of numerical columns\ndef draw_scatters(df, variables, target, n_rows, n_cols):\n    fig=plt.figure(figsize=(10,10))\n    for i, var_name in enumerate(variables):\n        ax=fig.add_subplot(n_rows,n_cols,i+1)\n        sns.regplot(x=var_name,y=target,data=df,fit_reg=False)\n        ax.set_title(var_name + \" vs. \" + target)\n    fig.tight_layout()\n    plt.show()","f0f165a0":"draw_scatters(df,\n              df.select_dtypes(include=[np.number]),\n              'Price_USD',\n              int(len(df.select_dtypes(include=[np.number]).columns.tolist()[:-1])\/2)+1, 2)","e05f75d6":"def draw_bars(df, variables, target, n_rows, n_cols):\n    fig=plt.figure(figsize=(10,30))\n    for i, var_name in enumerate(variables):\n        ax=fig.add_subplot(n_rows,n_cols,i+1)\n        sns.barplot(x=var_name,y=target,data=df,ci='sd')\n        ax.set_title(var_name)\n    fig.tight_layout()\n    plt.show()","ec248fe4":"draw_bars(df,\n          df.select_dtypes(include=[np.object]).columns.tolist(),\n          'Price_USD', int(len(df.select_dtypes(include=[np.object]).columns.tolist())\/2)+1, 2)","3351af8c":"oos_df = pd.read_csv('\/kaggle\/input\/ihsmarkit-hackathon-june2020\/oos_data.csv')\noos_df.head()","8d51aa7b":"oos_df.set_index('vehicle_id', inplace=True)\noos_df.head()","89f43ab7":"oos_df.isnull().values.any()","672aa5d5":"oos_df.dtypes","08778dcf":"draw_histograms(oos_df,\n                oos_df.select_dtypes(include=[np.number]).columns.tolist(),\n                int(len(oos_df.select_dtypes(include=[np.number]).columns.tolist())\/2)+1, 2)","b19a08b0":"# Make a new column based on how old the vehicle was when it was sold\ndf['years_old'] = df['year'].astype(float) - df['Generation_Year']\ndf.head()","6d9baffb":"df['pw_ratio'] = df['Engine_KW'] \/ df['Curb_Weight']\ndf.head()","00148854":"df.drop(['date', 'year'], axis=1, inplace=True)","c61c0973":"df[['Generation_Year', 'No_of_Gears', 'years_old']] = df[['Generation_Year', 'No_of_Gears', 'years_old']].astype(str)\ndf.dtypes","c525c93d":"cat_columns = df.select_dtypes(include=[np.object]).columns.tolist()\ndummies_df = pd.get_dummies(df[cat_columns], prefix_sep='_', drop_first=False)\nprint(dummies_df.shape)\ndummies_df.head(10)","f0a24eca":"df = pd.concat([df, dummies_df], axis=1)\nprint(df.shape)\ndf.head()","12c731ee":"df.drop(cat_columns,axis=1,inplace=True)\ndf.head()","5291cbed":"print(df.shape)\ndf.sample()","fce4c47b":"# Make New Columns\noos_df['years_old'] = oos_df['year'].astype(float) - oos_df['Generation_Year']\noos_df['pw_ratio'] = oos_df['Engine_KW'] \/ oos_df['Curb_Weight']\n# Drop columns\noos_df.drop(['date', 'year'], axis=1, inplace=True)\n# Change to categories\noos_df[['Generation_Year', 'No_of_Gears', 'years_old']] = oos_df[['Generation_Year', 'No_of_Gears', 'years_old']].astype(str)\n# Make Dummies\ncat_columns = oos_df.select_dtypes(include=[np.object]).columns.tolist()\ndummies_df = pd.get_dummies(oos_df[cat_columns], prefix_sep='_', drop_first=False)\noos_df = pd.concat([oos_df, dummies_df], axis=1)\noos_df.drop(cat_columns,axis=1,inplace=True)\n# Print and validate\nprint(oos_df.shape)\noos_df.head()","9f774266":"intersection = df.columns & oos_df.columns\nintersection.tolist()","4c6e13be":"from sklearn.model_selection import train_test_split","69a4c9f5":"X = df.drop('Price_USD', axis=1)\nX = df[intersection]\nX.head()","f49f2208":"y = df['Price_USD']\ny[:10]","1e194d76":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)","0a42a4aa":"for dataset in [X_train, X_test, y_train, y_test]:\n    print(dataset.shape)","3e817c0e":"oos_df[intersection].shape","82110a48":"# Make Keras work for OSX Catalina\nimport os\nos.environ['KMP_DUPLICATE_LIB_OK']='True'","1a6d7e93":"from keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Flatten\nfrom keras.losses import MeanAbsolutePercentageError","c96e3d89":"NN_model = Sequential()\n\n# The Input Layer :\nNN_model.add(Dense(128, kernel_initializer='normal',input_dim = X.shape[1], activation='relu'))\n\n# The Hidden Layers :\nNN_model.add(Dense(256, kernel_initializer='normal',activation='relu'))\nNN_model.add(Dense(256, kernel_initializer='normal',activation='relu'))\nNN_model.add(Dense(256, kernel_initializer='normal',activation='relu'))\n\n# The Output Layer :\nNN_model.add(Dense(1, kernel_initializer='normal',activation='linear'))\n\n# Compile the network :\nNN_model.compile(loss='mean_absolute_percentage_error', optimizer='adam', metrics=['mean_absolute_percentage_error'])\nNN_model.summary()","2c6efa52":"early_stopping_monitor = EarlyStopping(monitor='val_loss',\n                                       min_delta=0,\n                                       patience=5, \n                                       verbose=1, \n                                       mode='auto', \n                                       baseline=None, \n                                       restore_best_weights=True)","1097d710":"checkpoint = ModelCheckpoint('best_model.h5', monitor='val_mean_absolute_percentage_error', mode='max', verbose=0, save_best_only=True)","5a2d5e1a":"NN_model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=100, batch_size=256, verbose=1, callbacks=[early_stopping_monitor, checkpoint])\n_, train_acc = NN_model.evaluate(X_train, y_train, verbose=0)\n_, test_acc = NN_model.evaluate(X_test, y_test, verbose=0)\nprint('Train: %.3f, Test: %.3f' % (train_acc, test_acc))","5d43f92a":"plt.plot(NN_model.history.history['mean_absolute_percentage_error'], label='train')\nplt.plot(NN_model.history.history['val_mean_absolute_percentage_error'], label='test')\nplt.legend()\nplt.show()","d1793b07":"NN_model.load_weights('best_model.h5')","fda7bdd7":"y_oos_pred = NN_model.predict(oos_df[intersection])","634bd6a5":"oos_df['Price_USD'] = y_oos_pred","571169a3":"out_df = pd.DataFrame(oos_df['Price_USD'], oos_df.index).reset_index()","6cf2d868":"out_df.columns[out_df.isnull().any()].tolist()","bea5e308":"print(out_df.shape)\nout_df.head()","a6bd2542":"out_df.to_csv('submission-XX.csv', index=False)","c463077c":"# Import Packages","64f6f0dd":"### Apply Model to OOS Data","63fb0f49":"## Preprocess OOS Data","38f420af":"# Explore Data\n## Import Test Data","c80df74b":"### Make New Columns","c70145d8":"## Model Definition","b1b3af13":"## Plot Numeric Columns Against `PriceUSD` Using Scatter Plots","3d371840":"## Use Bar Plots to Plot Categorical Features Against `Price_USD`","7a16900c":"### Make Dummies","a5dde80f":"## Preprocessing Train Data","ca6369ff":"### Find Intersection (For Modeling)","141aa21f":"### Visualize OOS Data","0450c837":"### Drop Columns","2ff65e04":"### Make Categorical Columns","fa9e5366":"# Test Train Split","c9266d8e":"## Plot Histograms of Numeric Columns","9c426766":"## Import Test Data"}}