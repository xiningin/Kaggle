{"cell_type":{"0a085c98":"code","8612504f":"code","8c2fdf6d":"code","cfa32e97":"code","f0d8241a":"code","1a2660f7":"code","08f07c5e":"code","0bd0035e":"code","827fa5fc":"code","442f5883":"code","90a28a17":"code","eb9c5471":"code","1bc56c71":"code","3e1d1d81":"markdown","11a2da64":"markdown","b827f709":"markdown","5b59e288":"markdown","d3ba5bf8":"markdown","c1186fb1":"markdown","0c84bc5d":"markdown"},"source":{"0a085c98":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Import widgets\nfrom ipywidgets import widgets, interactive, interact\nimport ipywidgets as widgets\nfrom IPython.display import display\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8612504f":"train_sales = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\ncalendar_df = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\nsubmission_file = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')","8c2fdf6d":"days = range(1, 1913 + 1)\ntime_series_columns = [f'd_{i}' for i in days]\n\nids = np.random.choice(train_sales['id'].unique().tolist(), 1000)\n\nseries_ids = widgets.Dropdown(\n    options=ids,\n    value=ids[0],\n    description='series_ids:'\n)\n\ndef plot_data(series_ids):\n    df = train_sales.loc[train_sales['id'] == series_ids][time_series_columns]\n    df = pd.Series(df.values.flatten())\n\n    df.plot(figsize=(20, 10), lw=2, marker='*')\n    df.rolling(7).mean().plot(figsize=(20, 10), lw=2, marker='o', color='orange')\n    plt.axhline(df.mean(), lw=3, color='red')\n    plt.grid()","cfa32e97":"w = interactive(\n    plot_data,\n    series_ids=series_ids\n)\ndisplay(w)","f0d8241a":"series_data = train_sales[time_series_columns].values\npd.Series((series_data != 0).argmax(axis=1)).hist(figsize=(25, 5), bins=100)","1a2660f7":"pd.Series((series_data == 0).sum(axis=1) \/ series_data.shape[1]).hist(figsize=(25, 5), color='red')","08f07c5e":"pd.Series(series_data.max(axis=1)).value_counts().head(20).plot(kind='bar', figsize=(25, 10))","0bd0035e":"pd.Series(series_data.max(axis=1)).value_counts().tail(20)","827fa5fc":"forecast = pd.DataFrame(series_data[:, -28:]).mean(axis=1)\nforecast = pd.concat([forecast] * 28, axis=1)\nforecast.columns = [f'F{i}' for i in range(1, forecast.shape[1] + 1)]\nforecast.head()","442f5883":"validation_ids = train_sales['id'].values\nevaluation_ids = [i.replace('validation', 'evaluation') for i in validation_ids]","90a28a17":"ids = np.concatenate([validation_ids, evaluation_ids])","eb9c5471":"predictions = pd.DataFrame(ids, columns=['id'])\nforecast = pd.concat([forecast] * 2).reset_index(drop=True)\npredictions = pd.concat([predictions, forecast], axis=1)","1bc56c71":"predictions.to_csv('submission.csv', index=False)","3e1d1d81":"In the analysis above it looks like a lot of the time series data start with leading zeros. I believe we can characterize these leading zeros as items that were not selling or available to sell for those periods of time. This might not be a good assumption for every series. We can investigate the distribution of leading zeros, this could help us bring down the large data size (although may not be a good choice for algorightms such as ARIMA).","11a2da64":"# Visualizing the Time Series\n\nBelow I make a simple plot of the first time series in the data. Going through the different time series data we can see that a lot of the items have intermittent demand. These are series that have many zeros with bursts of demand inbetween. This will be one of the biggest challenges in this competition.","b827f709":"# Simple Mean Model\n\nFor the first bench mark model I will just take the average sales from the last 28 days for each of the time series in the data.","5b59e288":"What is the distribution of max number of sales for each of the series?\n\nAlot of the items have a max number of sales between 2 and 12. There are also some items with a very high number of sales for a particular item. It might be fruitful to investigate these items and whether it was a holiday or not.","d3ba5bf8":"What is the distribution of zeros per series? Wow, the distribution of zeros for each of the series has a mean around 0.8 which means there is a lot of intermittent data!","c1186fb1":"This is as simple as it can get for a forecasting method. There are others as well such as choosing the last known value and propigating it forward as a forecast. I plan to do more analysis of the data and present different methods! Stay tuned :) I would love feedback of what others might like to see, so please let me know in the comments!","0c84bc5d":"# Predictions\n\nWe need to provide predictions for the next 28 days for each of the series. For the validation series that is days 1914 - 1941 and for the evaluation that is days 1942 - 1969."}}