{"cell_type":{"52d21e34":"code","dfce93d5":"code","b32a5b47":"code","668931ef":"code","b83b696b":"code","ad6c93b7":"code","d7bdbcbf":"code","d60ce5ee":"code","a8a04b50":"code","4db6a5bf":"code","7947e0df":"code","882518bb":"code","afc48e44":"code","15e57e11":"code","05daf8a8":"code","597c6080":"code","aa072b78":"code","e001df34":"code","b8b67b99":"code","10bfb635":"code","e19f75ff":"code","61e8fa0f":"code","14ca411f":"code","eecf6e21":"code","dff5f85b":"code","5309bb5f":"code","7cdb221f":"code","4201a6ec":"code","0845bb08":"code","cd7c6cf4":"code","d258db33":"code","22c161d3":"code","a983cad5":"code","cb3fc986":"code","a6b2d578":"code","65279443":"code","7e5815b4":"code","782c2719":"code","edb14026":"code","20ef550a":"code","84789eb8":"code","ead02b7f":"code","29a82159":"code","e31652e2":"markdown","12ac7aab":"markdown","8c2d5687":"markdown","f8169fac":"markdown","c0721157":"markdown","aa9f8c93":"markdown","6893efed":"markdown","e3611f5a":"markdown","84619a5a":"markdown","bbecebdb":"markdown","3704fbf9":"markdown","54c3d3c8":"markdown","c26a21f1":"markdown"},"source":{"52d21e34":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom itertools import product\nfrom xgboost import XGBRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nimport lightgbm as lgb\nimport calendar\nfrom datetime import datetime\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","dfce93d5":"sales = pd.read_csv('..\/input\/assignment\/Assignment.csv')","b32a5b47":"sales.head()","668931ef":"sales['item_price']=sales['Invoice Value']\/sales['Quantity']","b83b696b":"sales.head()","ad6c93b7":"sales=sales[[\"Customer ID\",\"Quantity\",\"Invoice Value\",\"Date\",\"item_price\"]]\nsales.columns = [\"shop_id\",\"item_cnt_day\",\"Invoice Value\",\"Date\",\"item_price\"]\nsales = sales.sort_values(['Date'])\nsales['month'] = pd.DatetimeIndex(sales['Date']).month\nsales['year'] = pd.DatetimeIndex(sales['Date']).year\ndef f(row):\n    if row['year'] == 2018:\n        val = row['month']-1\n    else:\n        val = row['month']+12-1\n    return val\n\nsales['date_block_num'] = sales.apply(f, axis=1)","d7bdbcbf":"sales.head()","d60ce5ee":"sns.boxplot(x=sales.item_cnt_day)","a8a04b50":"sns.boxplot(x=sales.item_price)","4db6a5bf":"train = sales[(sales.item_price < 80) & (sales.item_price > 0)]\ntrain = train[sales.item_cnt_day < 600]","7947e0df":"index_cols = ['shop_id', 'date_block_num']\n\ndf = [] \nfor block_num in train['date_block_num'].unique():\n    cur_shops = train.loc[sales['date_block_num'] == block_num, 'shop_id'].unique()\n    df.append(np.array(list(product(*[cur_shops, [block_num]])),dtype='int32'))\n","882518bb":"index_cols","afc48e44":"df = pd.DataFrame(np.vstack(df), columns = index_cols,dtype=np.int32)","15e57e11":"#Add month sales\ngroup = train.groupby(['date_block_num','shop_id']).agg({'item_cnt_day': ['sum']})\ngroup.columns = ['item_cnt_month']\ngroup.reset_index(inplace=True)\n\ndf = pd.merge(df, group, on=index_cols, how='left')\ndf['item_cnt_month'] = (df['item_cnt_month']\n                                .fillna(0)\n                                .clip(0,20)\n                                .astype(np.float16))\ndf.head(5)","05daf8a8":"df","597c6080":"sales.head()","aa072b78":"train=sales[(sales.item_cnt_day >= 1) & (sales.Date >='2018-01-01') & (sales.Date <='2019-3-31')]\ntrain.shape","e001df34":"test=sales[(sales.item_cnt_day >= 1) & (sales.Date >='2019-01-01') & (sales.Date <='2019-3-31')]\ntest.shape","b8b67b99":"def lag_feature(df, lags, col):\n    tmp = df[['date_block_num','shop_id',col]]\n    for i in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id', col+'_lag_'+str(i)]\n        shifted['date_block_num'] += i\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id'], how='left')\n        df[col+'_lag_'+str(i)] = df[col+'_lag_'+str(i)].astype('float16')\n    return df","10bfb635":"#Add sales lags for last 3 months\ndf = lag_feature(df, [1, 2, 3], 'item_cnt_month')","e19f75ff":"df","61e8fa0f":"train","14ca411f":"#Add avg shop\/item price\n\nindex_cols = ['shop_id', 'date_block_num']\ngroup = train.groupby(index_cols)['item_price'].mean().reset_index().rename(columns={\"item_price\": \"avg_shop_price\"}, errors=\"raise\")\ndf = pd.merge(df, group, on=index_cols, how='left')\n\ndf['avg_shop_price'] = (df['avg_shop_price']\n                                .fillna(0)\n                                .astype(np.float16))\n\n","eecf6e21":"df","dff5f85b":"#Add target encoding for item\/shop for last 3 months \nitem_id_target_mean = df.groupby(['date_block_num', 'shop_id'])['item_cnt_month'].mean().reset_index().rename(columns={\n    \"item_cnt_month\": \"item_shop_target_enc\"}, errors=\"raise\")\n\ndf = pd.merge(df, item_id_target_mean, on=['date_block_num', 'shop_id'], how='left')\n\ndf['item_shop_target_enc'] = (df['item_shop_target_enc']\n                                .fillna(0)\n                                .astype(np.float16))\n\ndf = lag_feature(df, [1, 2, 3], 'item_shop_target_enc')\ndf.drop(['item_shop_target_enc'], axis=1, inplace=True)","5309bb5f":"df","7cdb221f":"def lag_feature_adv(df, lags, col):\n    tmp = df[['date_block_num','shop_id',col]]\n    for i in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id', col+'_lag_'+str(i)+'_adv']\n        shifted['date_block_num'] += i\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id'], how='left')\n        df[col+'_lag_'+str(i)+'_adv'] = df[col+'_lag_'+str(i)+'_adv'].astype('float16')\n    return df\n\ndf = lag_feature_adv(df, [1, 2, 3], 'item_cnt_month')","4201a6ec":"df","0845bb08":"df.fillna(0, inplace=True)\ndf = df[(df['date_block_num'] > 2)]\ndf.head()","cd7c6cf4":"df.tail()","d258db33":"df.columns","22c161d3":"#Save dataset\ndf.drop(['ID'], axis=1, inplace=True, errors='ignore')\ndf.to_pickle('df.pkl')","a983cad5":"df = pd.read_pickle('df.pkl')\ndf.info()","cb3fc986":"X_train = df[df.date_block_num < 11].drop(['item_cnt_month'], axis=1)\nY_train = df[df.date_block_num < 11]['item_cnt_month']\nX_valid = df[df.date_block_num == 11].drop(['item_cnt_month'], axis=1)\nY_valid = df[df.date_block_num == 11]['item_cnt_month']\nX_test = df[df.date_block_num ==12].drop(['item_cnt_month'], axis=1)\ndel df","a6b2d578":"X_test.tail()","65279443":"feature_name = X_train.columns.tolist()\nfeature_name","7e5815b4":"feature_name = X_train.columns.tolist()\n\nparams = {\n    'objective': 'mse',\n    'metric': 'rmse',\n    'num_leaves': 2 ** 7 - 1,\n    'learning_rate': 0.005,\n    'feature_fraction': 0.75,\n    'bagging_fraction': 0.75,\n    'bagging_freq': 5,\n    'seed': 1,\n    'verbose': 1\n}\n\nfeature_name_indexes = [ \n                        'country_part', \n                        'item_category_common',\n                        'item_category_code', \n                        'city_code',\n]\n\nlgb_train = lgb.Dataset(X_train[feature_name], Y_train)\nlgb_eval = lgb.Dataset(X_valid[feature_name], Y_valid, reference=lgb_train)\n\nevals_result = {}\ngbm = lgb.train(\n        params, \n        lgb_train,\n        num_boost_round=3000,\n        valid_sets=(lgb_train, lgb_eval), \n        feature_name = feature_name,\n        verbose_eval=5, \n        evals_result = evals_result,\n        early_stopping_rounds = 100)\n","782c2719":"lgb.plot_importance(\n    gbm, \n    max_num_features=50, \n    importance_type='gain', \n    figsize=(12,8));","edb14026":"feature_name","20ef550a":"test.head()","84789eb8":"X_test","ead02b7f":"Y_test = gbm.predict(X_test[feature_name]).clip(0, 20)\n\nsubmission = pd.DataFrame({\n    \"ID\": X_test.shop_id, \n    \"item_cnt_month\": Y_test\n})\nsubmission.to_csv('gbm_submission.csv', index=False)","29a82159":"submission","e31652e2":"Add test","12ac7aab":"# Libraries","8c2d5687":"Remove outliers","f8169fac":"**Target encoding**","c0721157":"# **Create dataset**","aa9f8c93":"# **Load data**","6893efed":"Detect same shops","e3611f5a":"Stacking didn't work for me. I'd tried 2 approaches:\n\n1. XGBoost + CatBoost + LightGBM at the first level and LinearRegression\/LightGBM at the second level\n1. LinearRegression + LightGBM + RandomForest at the first level and LinearRegression\/LightGBM at the second level","84619a5a":"# Train model","bbecebdb":"# Feature engineering","3704fbf9":"Index(['shop_id', 'date_block_num', 'item_cnt_month', 'item_cnt_month_lag_1',\n       'item_cnt_month_lag_2', 'item_cnt_month_lag_3', 'avg_shop_price',\n       'item_shop_target_enc_lag_1', 'item_shop_target_enc_lag_2',\n       'item_shop_target_enc_lag_3', 'item_cnt_month_lag_1_adv',\n       'item_cnt_month_lag_2_adv', 'item_cnt_month_lag_3_adv'],\n      dtype='object')","54c3d3c8":"Extra interaction features","c26a21f1":"Remove data for the first three months"}}