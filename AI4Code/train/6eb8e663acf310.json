{"cell_type":{"ffc43df9":"code","9645d45d":"code","8781736d":"code","994900cb":"code","34cc9f85":"code","5ecb2e4c":"code","4440bd92":"code","f7e1cd1e":"markdown","6ae5ab87":"markdown","c1733511":"markdown"},"source":{"ffc43df9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9645d45d":"import pandas as pd\nimport matplotlib.pyplot as plt \nimport numpy as np\n\nsonar=pd.read_csv(\"\/kaggle\/input\/\/sonar.csv\")\nsonar.head(5)","8781736d":"df = pd.DataFrame()","994900cb":"from sklearn.model_selection import train_test_split\nX=sonar.iloc[:,0:60]\ny=sonar.iloc[:,60]\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)","34cc9f85":"from sklearn.ensemble import VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n#Initalize the classifier\n\n\nlog_clf = LogisticRegression(random_state=42)\nknn_clf = KNeighborsClassifier(n_neighbors=10)\nsvm_clf = SVC(gamma=\"auto\", random_state=42, probability=True)\n\nvoting_clf = VotingClassifier(\n    estimators=[('lr', log_clf), ('knn', knn_clf), ('svc', svm_clf)],\n    voting='soft')\n\nvoting_clf1 = VotingClassifier(\n    estimators=[('lr', log_clf), ('knn', knn_clf), ('svc', svm_clf)],\n    voting='hard')\n\n\n# Voting can be chnaged to 'Soft', however the classifer must support predict probability","5ecb2e4c":"voting_clf.fit(X_train, y_train)\nfrom sklearn.metrics import accuracy_score\n\nfor clf in (log_clf, knn_clf, svm_clf, voting_clf,voting_clf1):\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    print(clf.__class__.__name__, accuracy_score(y_test, y_pred))\n    a_row = pd.Series([clf.__class__.__name__, accuracy_score(y_test, y_pred)])\n    row_df = pd.DataFrame([a_row])\n    df = pd.concat([row_df, df], ignore_index=True)\n    \ndf","4440bd92":"df.columns=['Method','Accuracy']\nfrom itertools import cycle, islice\nmy_colors = list(islice(cycle(['b', 'g', 'r', 'c', 'm', 'y', 'k']), None, len(df)))\ndf.plot.barh(x='Method', y='Accuracy', rot=0,color=my_colors,figsize=(15,8))","f7e1cd1e":"# Creating Ensembles","6ae5ab87":"# Reading Sonar Data","c1733511":"# Splitting in trainig and Testing"}}