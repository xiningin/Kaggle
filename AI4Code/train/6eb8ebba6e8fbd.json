{"cell_type":{"f1ac93b5":"code","f97bc2ae":"code","af335d0e":"code","3f87f154":"code","790777d9":"code","8890363b":"code","502a029f":"code","7c6fa02e":"code","6b05a785":"code","7a0ece9b":"code","7f22c05b":"code","c6f1e867":"code","a78693e9":"code","ecab3db8":"code","12a16f73":"code","474407b9":"code","8d6bb20e":"code","ecadf7d0":"code","bb8db9d2":"code","03496e87":"code","b26ab295":"code","6f176022":"code","f0e433c9":"code","72f16402":"code","00692f7b":"code","1cfc90e8":"code","7ad4df78":"code","c676824f":"code","0631312e":"code","ed2f08ce":"code","9df7e821":"code","fc02f145":"code","b09b0594":"code","be447c86":"code","f6ed31e7":"code","38f58805":"code","2b69ab17":"code","2599f3c0":"code","fd0fe40b":"markdown","23b4a1c3":"markdown","5c0b3750":"markdown","b18c51f5":"markdown","49ce03b4":"markdown","232f2084":"markdown","e98098af":"markdown","389634ff":"markdown","8dec98f2":"markdown"},"source":{"f1ac93b5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport os\nfrom sklearn.model_selection import train_test_split","f97bc2ae":"file = '\/kaggle\/input\/engineering-placements-prediction\/collegePlace.csv'\ndf = pd.read_csv('\/kaggle\/input\/engineering-placements-prediction\/collegePlace.csv')","af335d0e":"df.head()","3f87f154":"df.shape","790777d9":"columns = df.columns.values\ncolumns","8890363b":"df.info()\n","502a029f":"df[['Gender', 'PlacedOrNot']].groupby(['Gender'], as_index=False).mean().sort_values(by='PlacedOrNot', ascending=False)","7c6fa02e":"df[['CGPA', 'PlacedOrNot']].groupby(['CGPA'], as_index=False).mean().sort_values(by='PlacedOrNot', ascending=False)","6b05a785":"stream_wise = df.groupby('Stream').agg({'Age':'mean',\n                                          'Internships' : 'sum',                            \n                                           \"CGPA\":'mean',\n                                           'PlacedOrNot':'sum'})\nstream_wise","7a0ece9b":"df[['Internships', 'PlacedOrNot']].groupby(['Internships'], as_index=False).mean().sort_values(by='PlacedOrNot', ascending=False)","7f22c05b":"px.bar(data_frame=stream_wise, barmode='group',title = \"<b>Stream wise Analyzing<\/b>\")","c6f1e867":"df.info()\n","a78693e9":"dummy_stream = pd.get_dummies(df['Stream'])","ecab3db8":"df = pd.concat([df.drop([\"Stream\"], axis = 1), dummy_stream], axis = 1)\n","12a16f73":"df.head()","474407b9":"df['Gender'] = df['Gender'].replace(to_replace=['Male', 'Female'], value=[0,1])","8d6bb20e":"df.info()","ecadf7d0":"df['AgeBand'] = pd.cut(df['Age'], 5)\ndf[['AgeBand', 'PlacedOrNot']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)\n","bb8db9d2":"df.loc[(df['Age'] > 18) & (df['Age'] <= 21), 'Age'] = 0\ndf.loc[(df['Age'] > 21) & (df['Age'] <= 23), 'Age'] = 1\ndf.loc[(df['Age'] > 23) & (df['Age'] <= 25), 'Age'] = 2\ndf.loc[(df['Age'] > 25) & (df['Age'] <= 27), 'Age'] = 3\ndf.loc[(df['Age'] > 27), 'Age'] = 4\n","03496e87":"df.head()","b26ab295":"y = df['PlacedOrNot']","6f176022":"X = df.drop(['PlacedOrNot','AgeBand'], axis=1)","f0e433c9":"X","72f16402":"y","00692f7b":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, plot_confusion_matrix","1cfc90e8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","7ad4df78":"models_accuracy = {}\ncv = KFold(n_splits=15, random_state=13, shuffle=True)","c676824f":"logr = LogisticRegression(solver='liblinear')\nlogr.fit(X_train, y_train)\nlogr_score = logr.score(X_test, y_test)\nmodels_accuracy['Logistic Regression'] = logr_score*100\n\nlogr_score*100","0631312e":"svm_model = SVC(decision_function_shape='ovr')\nsvm_model.fit(X_train, y_train)\nsvm_score = svm_model.score(X_test, y_test)\n\nmodels_accuracy['SVM'] = svm_score*100\n\nsvm_score*100","ed2f08ce":"kn_model = KNeighborsClassifier(n_neighbors=15)\nkn_model.fit(X_train, y_train)\nkn_score = kn_model.score(X_test, y_test)\nmodels_accuracy['Knn'] = kn_score*100\n\nkn_score*100","9df7e821":"ran_model = RandomForestClassifier(n_estimators = 40)\nran_model.fit(X_train, y_train)\nran_score = ran_model.score(X_test, y_test)\nmodels_accuracy['RanForest'] = ran_score*100\n\nran_score*100","fc02f145":"ada_model = AdaBoostClassifier()\nada_model.fit(X_train, y_train)\nada_score = ada_model.score(X_test, y_test)\nmodels_accuracy['AdaBoost'] = ada_score*100\n\nada_score*100","b09b0594":"grad_model = GradientBoostingClassifier()\ngrad_model.fit(X_train, y_train)\ngrad_score = grad_model.score(X_test, y_test)\nmodels_accuracy['AdaBoost'] = grad_score*100\n\ngrad_score*100","be447c86":"models_accuracy","f6ed31e7":"pred = ran_model.predict(X_test)","38f58805":"print(classification_report(y_test, pred))","2b69ab17":"cmat = confusion_matrix(y_test,pred)\nprint('TN - True Negative {}'.format(cmat[0,0]))\nprint('FP - False Positive {}'.format(cmat[0,1]))\nprint('FN - False Negative {}'.format(cmat[1,0]))\nprint('TP - True Positive {}'.format(cmat[1,1]))\nprint('Accuracy Rate: {}'.format(np.divide(np.sum([cmat[0,0],cmat[1,1]]),np.sum(cmat))))\nprint('Misclassification Rate: {}'.format(np.divide(np.sum([cmat[0,1],cmat[1,0]]),np.sum(cmat))))","2599f3c0":"plot_confusion_matrix(ran_model,\n                      X_test, y_test,\n                      cmap = plt.cm.Blues,\n                      display_labels = ['Not Placed', 'Placed'])\nplt.grid(False)\nplt.show();","fd0fe40b":"# Getting X and Y","23b4a1c3":"# Placement Prediction","5c0b3750":"**Reading File**","b18c51f5":"# Feature Engineering","49ce03b4":"# Classification Report ","232f2084":"**Data Exploration**","e98098af":"# Thank You ","389634ff":"*NO null value. Gender and Stream column are strings*","8dec98f2":"# Model Selection"}}