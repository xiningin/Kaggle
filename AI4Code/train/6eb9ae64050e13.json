{"cell_type":{"4df30294":"code","af48ecc1":"code","a8b69d74":"code","6059c5b4":"code","4d48d0f6":"code","2cfab258":"code","d8a1f06c":"code","55bd6909":"code","e921adc7":"code","e4f12b1d":"code","32923b79":"code","850a9d61":"code","ed5d13ca":"code","8be92e2d":"code","904d5112":"code","20629038":"code","155a0aeb":"code","53bba75c":"code","91380589":"code","382b8743":"code","8b28d3c5":"code","2b2bbc9a":"code","fdde8411":"markdown","0d4dfe9c":"markdown","ca4d79dc":"markdown","4b1a15c0":"markdown","53310e02":"markdown","94597bfd":"markdown","aaee0595":"markdown","d9764d6c":"markdown","16bc944c":"markdown"},"source":{"4df30294":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.metrics import r2_score\nfrom sklearn import preprocessing\nimport seaborn as sns\nimport xgboost as xgb\nimport os","af48ecc1":"dataset_path = '\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/'\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\nprint(\"The shape of the train dataset is {}.\\n\\n\".format(df.shape))\n\ntest_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\nprint(\"The shape of the test dataset is {}.\\n\\n\".format(test_df.shape))","a8b69d74":"df.columns","6059c5b4":"df.isna().sum()","4d48d0f6":"df = df.drop_duplicates()\ndf.shape","2cfab258":"sns.set_theme(style=\"ticks\")\nsns.pairplot(df.drop(columns=['ID']), hue=\"Seasons\")","d8a1f06c":"corr = df.drop(columns=['ID','Date','Seasons','Hour','Holiday','Functioning Day']).corr()\nplt.figure(figsize=(20,15))\nsns.heatmap(corr, annot=True, annot_kws={'size':10})","55bd6909":"sns.boxplot(data=df, x='y', orient='v');","e921adc7":"sns.kdeplot(df['y'], shade=True);","e4f12b1d":"f = df['y'].groupby(df['Seasons']).sum()\nf","32923b79":"f = df['y'].groupby(df['Hour']).sum()\nf","850a9d61":"df=df.drop(['Dew point temperature(\ufffdC)'],axis=1)\n\ndayOfWeek = {'Monday':1,'Tuesday':2,'Wednesday':3,'Thursday':4,'Friday':5,'Saturday':6,'Sunday':7}\ndf['Date']=pd.to_datetime(df['Date'],format=\"%d\/%m\/%Y\")\ndf['WeekDay']=df[\"Date\"].dt.day_name()\ndf['week_end']= df['WeekDay'].apply(lambda x: 1 if x=='Saturday' or x=='Sunday' else 0)\ndf['WeekDay']=df['WeekDay'].map(dayOfWeek)\ndf['Month']=df['Date'].dt.month\n\ndf[['Wind speed (m\/s)','Visibility (10m)','Solar Radiation (MJ\/m2)']] = df[['Wind speed (m\/s)','Visibility (10m)','Solar Radiation (MJ\/m2)']].apply(np.log1p)\n\n\ndf = pd.get_dummies(df, columns = ['Seasons','Holiday','Functioning Day'])\ndf= pd.get_dummies(df,columns=['Hour'])","ed5d13ca":"test_df=test_df.drop(['Dew point temperature(\ufffdC)'],axis=1)\n\n\ntest_df['Date']=pd.to_datetime(test_df['Date'],format=\"%d\/%m\/%Y\")\ntest_df['WeekDay']=test_df[\"Date\"].dt.day_name()\ntest_df['week_end']= test_df['WeekDay'].apply(lambda x: 1 if x=='Saturday' or x=='Sunday' else 0)\n\ntest_df['WeekDay']=test_df['WeekDay'].map(dayOfWeek)\ntest_df['Month']=test_df['Date'].dt.month\n\ntest_df[['Wind speed (m\/s)','Visibility (10m)','Solar Radiation (MJ\/m2)']] = test_df[['Wind speed (m\/s)','Visibility (10m)','Solar Radiation (MJ\/m2)']].apply(np.log1p)\n\n\ntest_df = pd.get_dummies(test_df, columns = ['Seasons','Holiday','Functioning Day'])\ntest_df= pd.get_dummies(test_df,columns=['Hour'])","8be92e2d":"y=df['y']\ndf=df.drop(['ID','y','Date'],axis =1)\n\nX_test = test_df.drop(['ID','Date'],axis =1)","904d5112":"feature = ['Temperature(\ufffdC)','Humidity(%)','Wind speed (m\/s)','Visibility (10m)','Solar Radiation (MJ\/m2)']\nscaler = MinMaxScaler(feature_range=(0,1))\nscaler.fit(df[feature])\ndf[feature]= scaler.transform(df[feature])\nX_test[feature]= scaler.transform(X_test[feature])","20629038":"X_train,X_valid,y_train,y_valid = train_test_split(df,y, test_size=0.2, random_state=42)","155a0aeb":"def rmsle(y_pred,y_true):\n    return np.sqrt(mean_squared_log_error(y_pred,y_true))\n","53bba75c":"from sklearn.ensemble import RandomForestRegressor\n\nrf_model = RandomForestRegressor().fit(X_train, y_train)\nprint('error = ', rmsle(rf_model.predict(X_train),y_train))\nprint('r2_score = ', r2_score(y_train,rf_model.predict(X_train) ))\n\nprint('error = ', rmsle(rf_model.predict(X_valid),y_valid))\nprint('r2_score = ', r2_score(y_valid,rf_model.predict(X_valid) ))","91380589":"from sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.metrics import r2_score\n\nex_model = ExtraTreesRegressor().fit(X_train, y_train)\nprint('error = ', rmsle(ex_model.predict(X_train),y_train))\nprint('r2_score = ', r2_score(y_train,ex_model.predict(X_train) ))\n\nprint('error = ', rmsle(ex_model.predict(X_valid),y_valid))\nprint('r2_score = ', r2_score(y_valid,ex_model.predict(X_valid) ))","382b8743":"xg_model = xgb.XGBRegressor(random_state=42,colsample_bytree = 0.6, learning_rate = 0.2,\n                 alpha = 1, n_estimators = 1000 , objective='count:poisson').fit(X_train,y_train)\n\nprint('error = ', rmsle(xg_model.predict(X_train),y_train))\nprint('r2_score = ', r2_score(y_train,xg_model.predict(X_train) ))\n\nprint('error = ', rmsle(xg_model.predict(X_valid),y_valid))\nprint('r2_score = ', r2_score(y_valid,xg_model.predict(X_valid) ))","8b28d3c5":"y_test_predicted = xg_model.predict(X_test)\ntest_df['y'] = y_test_predicted\ntest_df[['ID','y']]","2b2bbc9a":"test_df[['ID', 'y']].to_csv('submission.csv', index=False)","fdde8411":"# Load Data from CSV","0d4dfe9c":"# Import Libraries","ca4d79dc":"# Model Training","4b1a15c0":"# Data Analysis\n","53310e02":"# Feature Engineering","94597bfd":"# Submission","aaee0595":"# Feature Scaling","d9764d6c":"# **Seoul Bike Sharing Demand Predict**","16bc944c":"# Split Data"}}