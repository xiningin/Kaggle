{"cell_type":{"78b43e9b":"code","03e8616c":"code","fa21a852":"code","6a9d6c44":"code","f4fcbb0e":"code","25b7bcbd":"code","a22c64c6":"code","b7c5b83a":"code","df3e0a68":"code","5a92e059":"code","84a93ab0":"code","21359dc8":"code","4ff4e798":"code","9765bf06":"code","5d077c15":"markdown","11be76a1":"markdown","9e9f590b":"markdown","87d14d0c":"markdown","90f9546f":"markdown","188de855":"markdown","aa0561fd":"markdown","2770af82":"markdown","12e48114":"markdown","6f03f49e":"markdown","2029f113":"markdown","34433ad2":"markdown","aff7ce93":"markdown","931d209b":"markdown","a7c47a04":"markdown"},"source":{"78b43e9b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03e8616c":"data = pd.read_csv(\"\/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv\",encoding='latin1')\ndata.head()","fa21a852":"df = pd.DataFrame(data)","6a9d6c44":"df.head()","f4fcbb0e":"plt.figure(figsize=(10,5))\nsns.countplot(x='Sentiment', data=df, order=['Extremely Negative', 'Negative', 'Neutral', 'Positive', 'Extremely Positive'])\nplt.title(\"Sentiment\")\nplt.ylabel(\"Count\", fontsize = 12)\nplt.xlabel(\"Sentiments\",fontsize = 12)\nplt.show()","25b7bcbd":"df.info()","a22c64c6":"reg = re.compile(\"(@[A-Za-z0-9]+)|(#[A-Za-z0-9]+)|([^0-9A-Za-z t])|(w+:\/\/S+)\")\ntweet = []\nfor i in df[\"OriginalTweet\"]:\n    tweet.append(reg.sub(\" \", i))\ndf = pd.concat([df, pd.DataFrame(tweet, columns=[\"CleanedTweet\"])], axis=1, sort=False)","b7c5b83a":"df.head(10)","df3e0a68":"from sklearn.feature_extraction.text import TfidfVectorizer\nstop_words = set(stopwords.words('english'))     # make a set of stopwords\nvectoriser = TfidfVectorizer(stop_words=None)","5a92e059":"X_train = vectoriser.fit_transform(df[\"CleanedTweet\"])\n# Encoding the classes in numerical values\nfrom sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ny_train = encoder.fit_transform(df['Sentiment'])\nfrom sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)","84a93ab0":"# importing the Test dataset for prediction and testing purposes\ntest_data = pd.read_csv(\"\/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_test.csv\",encoding='latin1')\ntest_df = pd.DataFrame(test_data)\ntest_df.head()","21359dc8":"reg1 = re.compile(\"(@[A-Za-z0-9]+)|(#[A-Za-z0-9]+)|([^0-9A-Za-z t])|(w+:\/\/S+)\")\ntweet = []\nfor i in test_df[\"OriginalTweet\"]:\n    tweet.append(reg1.sub(\" \", i))\ntest_df = pd.concat([test_df, pd.DataFrame(tweet, columns=[\"CleanedTweet\"])], axis=1, sort=False)\ntest_df.head()","4ff4e798":"X_test = vectoriser.transform(test_df[\"CleanedTweet\"])\ny_test = encoder.transform(test_df[\"Sentiment\"])\n# Prediction\ny_pred = classifier.predict(X_test)\npred_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\npred_df.head()","9765bf06":"from sklearn import metrics\n# Generate the roc curve using scikit-learn.\nfpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred, pos_label=1)\nplt.plot(fpr, tpr)\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.show()\n# Measure the area under the curve. The closer to 1, the \"better\" the predictions.\nprint(\"AUC of the predictions: {0}\".format(metrics.auc(fpr, tpr)))","5d077c15":"# Modeling","11be76a1":"**2)** Here we have read the file named \u201cCorona_NLP_train\u201d in CSV(comma-separated value) format. And have checked for the top 5 values in the dataset using head()","9e9f590b":"**5)** Here we will perform a regular expression function to remove any symbols and special characters, etc to get pure data.","87d14d0c":"**4)** In this step, we are able to see how the summary of our data like No. of columns with their data types.","90f9546f":"# Conclusion\n\nI hope you liked my notebook. Please do share with your friends, colleagues & upvoted. Thank You!\n","188de855":"**10)** Here we will perform a regular expression function to remove any symbols and special character, etc to get pure test data.","aa0561fd":"**9)** Let\u2019s do all operations for test data also.","2770af82":"**12)** So, at last, we have performed the accuracy of our model in the form of an AUC curve plotted using the matplotlib library.","12e48114":"**6)** Now we can see cleaned data obtained from the above code.","6f03f49e":"# Introduction\nIn this Notebook, I am going to discuss a practical guide of`Natural Language Processing(NLP) using Python`.\n\nBefore we move further, I will just take a look at the concept of Corona Virus namely CoVid-19.\n\n**CoVid-19:** Coronavirus disease (CoVid-19) is an infectious disease that is caused by a newly discovered coronavirus. Most of the people who have been infected with the CoVid-19 virus will experience mild to adequate respiratory illness and some will recover without requiring any special treatment. Older or aged people and those with intrinsic medical problems like cardiovascular disease(heart diseases), diabetes, chronic respiratory disease, and cancer are more likely to create serious illnesses.\n![26604co.jpg](https:\/\/editor.analyticsvidhya.com\/uploads\/26604co.jpg)\n\nThe COVID-19 virus can spread through droplets of saliva or release from the nose when an infected person coughs or sneezes.\n\nNow we will see how to perform CoVid-19 tweets analysis. Let\u2019s get started\u2026\n\n# Dataset\nHere I have used a dataset of `coronavirus tweets NLP`.\n\nTake a look at the description of the data:\n\nThe tweets have been taken from Twitter. Whatever the names and usernames have been given codes is just to avoid privacy concerns.\n\n**Columns:**\n1) Location- Location of user\n\n2) Tweet At- Date of a tweet\n\n3) Original Tweet- actual tweet text\n\n4) Sentiment- sentiments(we can say emotions) like positive, negative, neutral, etc\n\n# Implementation\n\n**1)** Here we need to import the necessary libraries that be required for our model. In the above code, we have imported libraries such as pandas to deal with data frames\/datasets, re for regular expression, nltk is a natural language tool kit and from that, we have imported module \u2013 stopwords which are nothing but \u2018dictionary\u2019. \n\nAs shown below:","2029f113":"**3)** Further, I have performed some data visualizations using matplotlib and seaborn libraries which are really the best visualization libraries in Python. I have plotted only one graph, you can plot more graphs to see how your data is!","34433ad2":"**7)** now convert text into the matrix of tokens, we have to import the following library and perform code.","aff7ce93":"**11)** By using vectorization, we have performed normalization of test data and stored it into x_test & y_test. We have also predicted actual and predicted values.","931d209b":"**8)** LabelEncoder is used here for transforming categorical values into numerical values.","a7c47a04":"Here we got a score of `AUC \u2013 0.64` for the classifier (Naive Byes), we can say that the classifier (Naive Bayes) is not that so good but can acceptable. Since the more nearer to 1 AUC score, the classifier will be better.\n\nIn the same way, we can perform any sentimental analysis of \u201ctweets\u201d."}}