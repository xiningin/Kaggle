{"cell_type":{"4cb7843d":"code","ed150b35":"code","61527b66":"code","5ad2dbc0":"code","994c4ece":"code","778b3361":"code","3ffd1a71":"code","c32c120b":"code","d5e2e964":"code","2e2d6af4":"code","fe181233":"code","c617a6ee":"code","92a80940":"code","d34ed8c0":"code","6dfd5f93":"code","8bce7419":"code","291ea22a":"code","16e7f3be":"code","bf39cc06":"code","32f1819a":"code","cf333d55":"code","d6e24fca":"code","486fd386":"code","acb8937c":"markdown","f03f0742":"markdown"},"source":{"4cb7843d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ed150b35":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.svm import LinearSVR","61527b66":"df = pd.read_csv('..\/input\/Admission_Predict.csv', delimiter=',')","5ad2dbc0":"X = df.iloc[:,:8].values\ny = df.iloc[:, 8].values","994c4ece":"X_train, X_test, y_train, y_test = train_test_split(X, y)\nlr = LinearRegression()","778b3361":"lr.fit(X_train, y_train)","3ffd1a71":"lr.predict(X_test)","c32c120b":"lr.score(X_test, y_test)","d5e2e964":"lr.coef_","2e2d6af4":"lr.intercept_","fe181233":"standardScaler = StandardScaler()\nstandardScaler.fit(X_train)","c617a6ee":"X_train_standard = standardScaler.transform(X_train)\nX_test_standard = standardScaler.transform(X_test)","92a80940":"sgd_reg = SGDRegressor(n_iter = 50)\nsgd_reg.fit(X_train_standard, y_train)","d34ed8c0":"sgd_reg.predict(X_test_standard)","6dfd5f93":"sgd_reg.coef_","8bce7419":"sgd_reg.intercept_","291ea22a":"sgd_reg.score(X_test_standard, y_test)","16e7f3be":"svr = LinearSVR()","bf39cc06":"svr.fit(X_train_standard, y_train)","32f1819a":"svr.predict(X_test_standard)","cf333d55":"svr.score(X_test_standard, y_test)","d6e24fca":"svr.coef_","486fd386":"svr.intercept_","acb8937c":"### svm","f03f0742":"#### SGD"}}