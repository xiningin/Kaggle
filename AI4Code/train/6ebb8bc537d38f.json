{"cell_type":{"ceecaaff":"code","15187495":"code","7d84be34":"code","2cc3798a":"code","b2be39e3":"code","e22f6ce8":"code","c472be74":"code","9c86a4fb":"code","3ca64290":"code","a05f3154":"code","325f4520":"code","fe441f14":"code","937ee299":"code","ccd61469":"code","327bc6ce":"code","1ea3831f":"code","3f338af0":"code","4ec893bf":"code","3d128f7e":"code","42484d9d":"code","01af5d09":"code","92f27377":"code","a7781530":"code","9340623b":"code","6ac90459":"code","bb1519e5":"code","9968247e":"code","e7081228":"code","488c5ac2":"code","0b7ae370":"code","d5695f04":"code","5ef8ac1a":"code","2247396d":"code","53a64f93":"code","c595a2de":"code","66f937d9":"code","d09a9e5b":"code","cac2540d":"code","c458fb49":"code","2e7faec9":"code","0123dc5c":"code","2ae71c7b":"code","7edae938":"code","48ab9a97":"code","8811a58b":"markdown","a19e2a5a":"markdown","5b611add":"markdown","1c8c820a":"markdown","f97d5438":"markdown","76b3c04c":"markdown","4b0e8559":"markdown","ff6aba7f":"markdown","677494fa":"markdown","f2d10eec":"markdown"},"source":{"ceecaaff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns #visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","15187495":"data = pd.read_csv(\"..\/input\/pokemon.csv\")","7d84be34":"data.info()","2cc3798a":"data.corr()","b2be39e3":"#correlation map\nf,ax = plt.subplots(figsize=(18,18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt=\".1f\", ax = ax)\nplt.show()","e22f6ce8":"data.head(10)","c472be74":"data.columns","9c86a4fb":"#Line Plot\n#color = color, label = label, linewidth = width of the line, alpha = opacity, grid = grid, \n#linestyle = style of the line\ndata.Speed.plot(kind=\"line\", color ='b', label ='Speed', linewidth =1, alpha =.5, \n                grid=True, linestyle=':' )\ndata.Defense.plot(kind='line', color='r', label='Defense', Linewidth =1, alpha=.5,\n                 grid=True, linestyle='-.')\nplt.legend(loc='upper right')   # legend = puts label into plot\nplt.xlabel('x axis')           # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')                  # title = title of plot\n\n\nplt.show()","3ca64290":"#Scatter Plot\n# x = attack, y = defense\ndata.plot(kind='scatter',x= 'Attack', y='Defense', alpha=.5,color='r', grid= True)\nplt.title('Attack Defense Scatter Plot')         # title = title of plot\nplt.xlabel('Attack')\nplt.ylabel('Defense')\nplt.show()","a05f3154":"#Histogram\n#bin is number of bars in histogram\ndata.Speed.plot(kind='hist', color='y', bins= 50, figsize=(5,5))\nplt.show()","325f4520":"#clf() is a method to clean the plot\ndata.Speed.plot(kind='hist', color='y', bins= 50, figsize=(5,5))\nplt.clf()\n# we dont see the plot cos of clf()","fe441f14":"#create dictionary and look its keys and values\ndictionary={'spain':'madrid', 'usa':'vegas'}\nprint(dictionary)\nprint(dictionary.keys())\nprint(dictionary.values())","937ee299":"# update existing entry\ndictionary['spain'] = 'malaga'\nprint(dictionary)\n# Add new entry\ndictionary['france'] = 'paris'\nprint(dictionary)\n# remove entry with key 'spain'\ndel dictionary['spain']\nprint(dictionary)\n# check include or not\nprint('france' in dictionary)\n# remove all entries in dict\ndictionary.clear()\nprint(dictionary)\n","ccd61469":"del dictionary # delete the dictionary from the memory","327bc6ce":"data = pd.read_csv('..\/input\/pokemon.csv')","1ea3831f":"series = data['Defense']  \nprint(type(series))\n\ndataFrame= data[['Defense']]\nprint(type(dataFrame))\n","3f338af0":"#comparison\nprint(2>3)\n#Boolean operators\nprint(True & False)\nprint(True or False)","4ec893bf":"# 1 - Filtering Pandas data frame\nx=data['Defense']>200\ndata[x]\n","3d128f7e":"data[np.logical_and(data['Defense']>200, data['Attack']>100)]\n","42484d9d":"#We can do it another way which is:\ndata[(data['Defense']>200) & (data['Attack']>100)]\n","01af5d09":"# Stay in loop if condition( i is not equal 5) is true. \ni= 0\nwhile i != 5: \n    print(\"i is :\" ,i)\n    i+=1\nprint (i, \"is the last\")","92f27377":"# Stay in loop if i is in the list\nlis=[1,2,3,4,5]\nfor i in lis:\n    print (\"i is \", i)\nprint (\"Thats it!\")","a7781530":"# we use enumerate for lists\nfor index, value in enumerate(lis):\n    print(index, \":\" , value)    ","9340623b":"#For dictionaries instead of enumerate, we use item\ndictionary={'spain':'madrid', 'usa':'vegas'}\nfor key, values in dictionary.items():\n    print(key, ':' , values)    \n    ","6ac90459":"#for Pandas\nfor index, value in data[['Defense']][0:5].iterrows():\n    print(index, ':' ,value )","bb1519e5":"data.head(10)","9968247e":"#tuble   tuble = (1,2,3)\n#sequence of immutable python objects. Values cant be modified. \n# Function to unpack tuble into several variables like a,b,c \ndef tuble_unpack():\n    t=(1,2,3)\n    return t\na,b,c = tuble_unpack()\nprint(a,b,c)\n#It is same with \nt=(1,2,3)\na,b,c = t\nprint(a,b,c)\n#we only wanted to show how functions defined\n","e7081228":"x=2 #Global variable (Global scope)\ndef f():\n    x=3  # local variable(local scope)\n    return x\nprint(x)\nprint(f())\n#if there is no local variable, It will take the global one\ndef g():\n    return x\nprint (g())\n","488c5ac2":"# How can we learn what are built in scope\nimport builtins\ndir(builtins)","0b7ae370":"#LAMBDA FUNCTION\n#Faster way of writing function\n\nsquare = lambda x: x**2\nprint (square(2))\n\ntot= lambda x,y,z : x+y+z\nprint(tot(2,3,4))","d5695f04":"#ANONYMOUS FUNCTION-The difference is it can take more than one variable\n\nalist = [1,2,3]\nx = map(lambda x: x**2, alist) #gives the value for x one by one by us\u015fng each elements of the alist\nprint(list(x))  #we need to show all the x values in a list ","5ef8ac1a":"#zip it doesnt work with strings but only integers. Why?\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nzip12 = zip(list1, list2)\nprint(zip12)\nzip_list = list(zip12)\nprint(zip_list)\n\n#unzip\n\nunzip = zip(*zip_list)\nunlist1, unlist2 = list(unzip) #unzip returns tuble. Converted to list. \nprint(unlist1)\nprint(unlist2)\nprint (type(unlist1))\n","2247396d":"list1 = [1,2,3]\nlist2 = [2*i for i in list1]  #list of comprehension\nprint(list2)","53a64f93":"#Let's see how we use list comprehension in data analysis\n#Lets find the speeds and label them high or low according to their posion regarding to avarage speed\nthreshold = sum(data.Speed) \/ len(data.Speed)\nprint('Threshold is: ', threshold)\ndata['speed_level'] = ['high' if i >threshold else 'low' for i in data.Speed]\ndata.loc[:10,['speed_level','Speed']]\n","c595a2de":"print(data['Type 1'].value_counts(dropna=False))","66f937d9":"data.describe()","d09a9e5b":"data.boxplot(column='Attack',by = 'Legendary')\nplt.show()","cac2540d":"newdata = data.head()\nnewdata","c458fb49":"meltedone = pd.melt(frame=newdata, id_vars = 'Name', value_vars=['Attack', 'Defense'])\nmeltedone","2e7faec9":"#PIVOT\n\nmeltedone.pivot(index = 'Name', columns = 'variable', values='value')","0123dc5c":"#CONCATENATING \n\ndata1 = data.head()\ndata2= data.tail()\nconcatenatedone = pd.concat([data1,data2], axis=0, ignore_index =True ) # axis = 0 : To add below\nconcatenatedone","2ae71c7b":"# data1= data['Attack'].head()\ndata2 = data['Defense'].head()\ncncatened_columns =pd.concat([data1,data2], axis=1)\ncncatened_columns","7edae938":"#DATA TYPES:\n#Five basic data types.\n\ndata.dtypes","48ab9a97":"data['Type 1'] = data['Type 1'].astype('category')\ndata.dtypes","8811a58b":"**EXPLORATORY**","a19e2a5a":"**THIS IS MY FIRST TRIAL ON KAGGLE**\n\nThis kernel is written while following the online lecture of Kaan Can(DATAI) on Udemy (Data Science ve Python: S\u0131f\u0131rdan Uzmanl\u0131\u011fa Veri Bilimi (2)). ","5b611add":"**CLEANING DATA**\nFirst we need to diagnose the data if anything needs to be fixed or reshape. \nFinding missing data, reformating features names e.ts.\nFor this we use \ndata.head()\ndata.tail()\ndata.info()\ndata.describe()\ndata.columns()\nto have general idea for data and diagnose data. ","1c8c820a":"> **LIST COMPREHENS\u0130ON**\n> \n>  > creating a list based on existing lists\n\n>  > provide a concise way to create lists\n\n>  > always returns a result list\n\n>  > the result will be a new list resulting from evaluating the expression in the\ncontext of the for and if clauses\n\n>  > the list comprehension starts with a '[' and ']', to help you remember that the\nresult is going to be a list.","f97d5438":"**MELT()**","76b3c04c":"**PANDAS**\n\n\n\nA General view of Pandas\n\n","4b0e8559":">  ** FUNCTIONS**\n> \n> > User Defined\n> \n> > Nested\n> \n> >Lmbda \n> \n> > Anonymous","ff6aba7f":"**WHILE ** and **FOR LOOPS**","677494fa":">  **SCOPE**\n> > \n> > The scope of a variable in python is that part of the code where it is visible.\n> > There are 4 types of Variable Scope in Python (Local,global,enclosing and built-in)\n> > Built-in Scope is the widest scope. \n> > The built-in scope has all the names that are loaded into python variable scope when we start the interpreter. For example, we never need to import any module to access functions like print() and id().","f2d10eec":" **logic, control flow **and** filtering**"}}