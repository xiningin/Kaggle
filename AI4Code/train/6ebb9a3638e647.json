{"cell_type":{"e8196352":"code","029031bf":"code","c7a7e42e":"code","b4402b30":"code","4e11d252":"code","7d8fb133":"code","b7b5bd28":"code","1a53e03c":"code","79cf09d4":"code","9d7f67f7":"code","c9c691af":"code","767d98aa":"code","c901500c":"code","099fc328":"code","99472988":"code","dc508085":"code","0dbd25b2":"code","4d2f1c6e":"markdown","cd0c42c0":"markdown","58f87581":"markdown","9dbf50f1":"markdown","bcc92e2f":"markdown","11eee5ec":"markdown","6713b174":"markdown","bc4cba04":"markdown","fd245f71":"markdown","55e64ccc":"markdown","bea7d45e":"markdown","8219e7c8":"markdown"},"source":{"e8196352":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","029031bf":"data = pd.read_csv(\"..\/input\/2017.csv\")","c7a7e42e":"# example of what we learn above\ndef tuple_ex():\n    \"\"\" return defined t tuple\"\"\"\n    t = [1,2,3]\n    return t\na,b,c = tuple_ex()\nprint(a,b,c)","b4402b30":"# guess print what\nx = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","4e11d252":"# What if there is no local scope\nx = 5\ndef f():\n    y = 2 * x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x\n# First local scopesearched, then global scope searched, if two of them cannot be found lastly built in scope searched.","7d8fb133":"# How can we learn what is built in scope (reserved words)\nimport builtins\ndir(builtins)","b7b5bd28":"#nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add() ** 2\nprint(square())    ","1a53e03c":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(5,4,3))\n","79cf09d4":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","9d7f67f7":"# lambda function\nsquare = lambda x : x ** 2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z : x + y + z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","c9c691af":"number_list = [1,2,3]\ny = map(lambda x : x ** 2,number_list)\nprint(list(y))","767d98aa":"# iteration example\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","c901500c":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","099fc328":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","99472988":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","dc508085":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i ** 2 if i == 10 else i - 5 if i < 7 else i + 5 for i in num1]\nprint(num2)","0dbd25b2":"# Lets return 2017 csv and make one more list comprehension example\n# Lets classify countries whether they have high or low family rate. Our threshold is average family rate.\nthreshold = sum(data.Family)\/len(data.Family)\ndata[\"family_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Family]\ndata.loc[:10,[\"family_level\",\"Family\"]] # we will learn loc more detailed later","4d2f1c6e":"**LAMBDA FUNCTION**\n\nFaster way of writing function.","cd0c42c0":"\n**NESTED FUNCTION**\n\nFunction inside function.\n","58f87581":"**Up to now, you learn**\n\n* User defined function\n* Scope\n* Nested function\n* Default and flexible arguments\n* Lambda function\n* Anonymous function\n* Iterators\n* List comprehension","9dbf50f1":"**ANONYMOUS FUNCT\u0130ON**\n\nLike lambda function but it can take more than one arguments.\n\n* map(func,seq) : applies a function to all the items in a list","bcc92e2f":"**Data Science Tutorial For Everyone #2**\n\n**Python Data Science Toolbox:**\n\n* User defined function\n* Scope\n* Nested function\n* Default and flexible arguments\n* Lambda function\n* Anonymous function\n* Iterators\n* List comprehension","11eee5ec":"* [i + 1 for i in num1 ]: list of comprehension \n* i +1: list comprehension syntax \n* for i in num1: for loop syntax \n* i: iterator \n* num1: iterable object","6713b174":"**DEFAULT and FLEXIBLE ARGUMENTS**\n\n* Default argument example: \n    \n    def f(a, b=1):\n          \"\"\" b = 1 is default argument\"\"\"\n\n* Flexible argument example: \n   \n   def f(*args):\n         \"\"\" *args can be one or more\"\"\"\n\n    def f(** kwargs)\n         \"\"\" **kwargs is a dictionary\"\"\"\n\n\nLets write some code to practice.","bc4cba04":"**USER DEFINED FUNCTION**\n\nWhat we need to know about functions:\n\ndocstrings: Documentation for functions. Example: \nfor f(): \n\"\"\"This is docstring for documentation of function f\"\"\"\n\ntuple: Sequence of immutable python objects. We cant modify values. Tuple uses paranthesis like tuble = (1,2,3). Unpack tuble into several variables like a,b,c = tuple.","fd245f71":"**ITERATORS**\n\n* iterable is an object that can return an iterator\n* iterable: an object with an associated iter() method \n* example: list, strings and dictionaries\n* iterator: produces next value with next() method","55e64ccc":"I would like to remind that:\n\nzip(): zip lists","bea7d45e":"**LIST COMPREHENSION**\n\n**One of the most important topic of this kernel !!!**\n\nWe use list comprehension for data analysis often. \nlist comprehension: Collapse for loops for building lists into a single line.\nEx: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is unnecessarily long. We can make it one line code that is list comprehension.","8219e7c8":"**SCOPE**\n\nWhat we need to know about scope:\n\n* global: Defined main body in script\n* local: Defined in a function\n* built in scope: Names in predefined built in scope module such as print, len (Reserved Words)\n\nLets make some basic examples."}}