{"cell_type":{"0ccad6f5":"code","a9d3061c":"code","633418cf":"code","7453fba9":"code","d8ca09eb":"code","c7ecd87c":"markdown"},"source":{"0ccad6f5":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\ndef concat_df(train_data, test_data):\n    # Returns a concatenated df of training and test set on axis 0\n    return pd.concat([train_data, test_data], sort=True).reset_index(drop=True)\n\ndef label_encoder(df,cat_features):\n    for feature in cat_features:\n        df[feature] = LabelEncoder().fit_transform(df[feature])\n    return df\n\ndef grid_search_cv_print(X_train,y_train):\n    param_grid = {'n_estimators': range(10, 71, 10),\n                  'max_depth': range(3, 14, 2),\n                  'min_samples_split': range(50, 201, 20)}\n    gsearch = GridSearchCV(estimator=RandomForestClassifier(max_features='sqrt'),\n                           param_grid=param_grid, scoring='roc_auc', cv=5, return_train_score=True)\n    clf = gsearch.fit(X_train, y_train)\n    print(\"best param:{0}\\nbest score:{1}\".format(clf.best_params_, clf.best_score_))","a9d3061c":"df_train = pd.read_csv(\"..\/input\/titanic-machine-learning-from-disaster\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/titanic-machine-learning-from-disaster\/test.csv\")\ndf_all = concat_df(df_train, df_test)\n\ndf_all['Embarked'] = df_all['Embarked'].fillna('S')\ncat_features = ['Embarked', 'Sex', 'Pclass']\ndf_all = label_encoder(df_all,cat_features)\n\ndf_train = df_all.loc[df_all['Survived'].isin([np.nan]) == False]\ndf_test = df_all.loc[df_all['Survived'].isin([np.nan]) == True]","633418cf":"df_test_filter = df_test.filter(regex='Embarked|Sex|Pclass')\ntrain_data = df_train.filter(regex='Embarked|Sex|Pclass')\ntrain_labels = df_train['Survived']\n# grid_search_cv_print(train_data,train_labels)","7453fba9":"clf = RandomForestClassifier(min_samples_split=190,n_estimators=50,max_depth=9,max_features='sqrt',oob_score=True)\nclf.fit(train_data,train_labels)\nprint(clf.oob_score_)","d8ca09eb":"predictions = clf.predict(np.array(df_test_filter))\nresult = pd.DataFrame({'PassengerId': df_test['PassengerId'], 'Survived': predictions})\nresult.to_csv('logistic_regression_predictions.csv', index=False, float_format='%1d')\nresult.head()","c7ecd87c":"Run grid_search_cv_print(train_data,train_labels) to get best param and best score  * best param:{'max_depth': 9, 'min_samples_split': 190, 'n_estimators': 50}  * best score:0.8413280666613522"}}