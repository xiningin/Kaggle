{"cell_type":{"65498c96":"code","b76df819":"code","7d34a1ac":"code","d22c44d2":"code","b98b624c":"code","7b472568":"code","3e0fd2f8":"markdown","7ed33ee4":"markdown","d03b5a9f":"markdown","8e219499":"markdown","8cb45a1d":"markdown"},"source":{"65498c96":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tensorflow.python import keras\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.optimizers import RMSprop\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Dropout, Flatten, Conv2D\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimg_rows = 28\nimg_cols = 28\nnum_classes = 10\n\ntrainData = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\ny = trainData.label\nx = trainData.iloc[:,1:]\n\n# normalize\nx = x \/ 255.0\ntest = test \/ 255.0\n\n# label encoding\ny = to_categorical(y,num_classes)\n\n# reshape imgs\nx = x.values.reshape(-1,img_rows,img_cols,1)\ntest = test.values.reshape(-1,img_rows,img_cols,1)\n","b76df819":"model = Sequential()\nmodel.add(Conv2D(12, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=(img_rows, img_cols, 1)))\n\nmodel.add(Conv2D(12, kernel_size=(3, 3), activation='relu'))\nmodel.add(Conv2D(12, kernel_size=(3, 3), activation='relu'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))","7d34a1ac":"model.compile(optimizer ='adam',\n              loss=keras.losses.categorical_crossentropy,\n              metrics=['accuracy'])","d22c44d2":"history = model.fit(x, y,\n                    batch_size=300,\n                    epochs=10,\n                    validation_split = 0.2)","b98b624c":"import matplotlib.pyplot as plt\n\n# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best')\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best')","7b472568":"# predict results\nresults = model.predict(test)\n\n# select the index with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")\n\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"submission.csv\",index=False)","3e0fd2f8":"# Fit Model","7ed33ee4":"# My first CNN solution\nThis notebook contains my first deep neural network solution to hand written digit recognition problem. I hope it helps out anyone who is seeking.","d03b5a9f":"# Get Results for Test file and generate Submission file","8e219499":"# Build CNN Model","8cb45a1d":"# Compile Model"}}