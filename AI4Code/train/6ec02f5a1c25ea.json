{"cell_type":{"47493ca2":"code","036f4132":"code","6ea62b2a":"code","ac3a0d3a":"code","aeaa6cd9":"code","03b522ed":"code","d4091f50":"code","e1a10bae":"code","e29271f9":"code","458110b7":"code","44c5bbf8":"markdown","71c3284b":"markdown","9d44e526":"markdown","5c82c1a3":"markdown","55e368f8":"markdown","59b673df":"markdown","8c16be80":"markdown"},"source":{"47493ca2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pylab as plt\nimport seaborn as sns\nplt.style.use('ggplot')\n!ls ..\/input\/","036f4132":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nss = pd.read_csv('..\/input\/sample_submission.csv')","6ea62b2a":"print('Train shape {}'.format(train.shape))\nprint('Test shape {}'.format(test.shape))","ac3a0d3a":"train['revenue'].plot(kind='hist',\n                      figsize=(15, 5),\n                      bins=50,\n                      title='Distribution of Revenue (Train Set)')\nplt.show()\nprint('Revenue has mean {:1.0f} and standard deviation {:1.0f}'.format(train['revenue'].mean(), train['revenue'].std())) ","aeaa6cd9":"train['revenue_log'] = train['revenue'].apply(np.log)\ntrain['revenue_log'].plot(kind='hist',\n                      figsize=(15, 5),\n                      bins=50,\n                      title='Distribution of Log Revenue (Train Set)')\nplt.show()","03b522ed":"train['budget'].plot(kind='hist',\n                      figsize=(15, 5),\n                      bins=50,\n                      title='Distribution of Budget (Train Set)',\n                      color='blue')\nplt.show()\n\n# Use the log1p transform since some values are zero\ntrain['budget_log'] = train['budget'].apply(np.log)\ntrain['budget_log'] = train['budget_log'].replace(-np.inf, 0)\ntrain['budget_log'].plot(kind='hist',\n                      figsize=(15, 5),\n                      bins=50,\n                      title='Distribution of Log+1 Budget (Train Set)',\n                      color='blue')\nplt.show()","d4091f50":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nsns.jointplot('budget_log', 'revenue_log', train.loc[train['budget_log'] > 1], kind='reg')\nplt.show()","e1a10bae":"# Thanks to @kamalchhirang for this kernel for this code: https:\/\/www.kaggle.com\/kamalchhirang\/eda-simple-feature-engineering-external-data\ndef get_dictionary(s):\n    try:\n        d = eval(s)\n    except:\n        d = {}\n    return d\ntrain = train\ntrain['genres_split'] = train['genres'].map(lambda x: sorted([d['name'] for d in get_dictionary(x)])).map(lambda x: ','.join(map(str, x)))\ngenres = train.genres_split.str.get_dummies(sep=',')\ntrain = pd.concat([train, genres], axis=1, sort=False)","e29271f9":"genre_list = genres.columns.values\nfor genre in genre_list:\n    if len(train.loc[train[genre] == 1]) > 500:\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5))\n        train.loc[train[genre] == 1]['budget_log'].plot(kind='hist', figsize=(15, 2), bins=50, title='{} Log Budget'.format(genre), ax=ax1, xlim=(0, 25))\n        train.loc[train[genre] == 1]['revenue_log'].plot(kind='hist', figsize=(15, 2), bins=50, title='{} Log Revenue'.format(genre), ax=ax2, xlim=(0, 25))\n        train.loc[train[genre] == 1].plot(x='budget_log', y='revenue_log', kind='scatter', ax=ax3)\n        plt.show()","458110b7":"# Average values by genre\n\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(30, 15))\n\ncolor1 = list(plt.rcParams['axes.prop_cycle'])[1]['color']\ngenre_popularity = {}\nfor genre in genre_list:\n    genre_popularity[genre] = train.loc[train[genre] == 1]['popularity'].mean()\npd.DataFrame(genre_popularity, index=['Average Popularity']) \\\n    .T.sort_values('Average Popularity') \\\n    .plot(kind='barh', color=color1, title='Average Popularity by Genre', ax=ax1, legend=False)\n\n# Find the popularity of each genre\ncolor2 = list(plt.rcParams['axes.prop_cycle'])[2]['color']\ngenre_budget = {}\nfor genre in genre_list:\n    genre_budget[genre] = train.loc[train[genre] == 1]['budget'].mean()\npd.DataFrame(genre_budget, index=['Average Budget']) \\\n    .T.sort_values('Average Budget') \\\n    .plot(kind='barh', color=color2, title='Average Budget by Genre', ax=ax2, legend=False)\n\ncolor4 = list(plt.rcParams['axes.prop_cycle'])[4]['color']\ngenre_revenue = {}\nfor genre in genre_list:\n    genre_revenue[genre] = train.loc[train[genre] == 1]['revenue'].mean()\npd.DataFrame(genre_revenue, index=['Average Revenue']) \\\n    .T.sort_values('Average Revenue') \\\n    .plot(kind='barh', color=color4, title='Average Revenue by Genre', ax=ax3, legend=False)\nplt.show()","44c5bbf8":"Log transforms are a common way to deal with features or targets that are heavily skewed. Log transforms are also easy to interperet. For every increase of 1 in the log transform, we can say the revenue increased 10x. With the log transform we can see we've reduced the skew.","71c3284b":"## Overview of Features","9d44e526":"## genres\nThis column contains a list, with a dictionary of the genere. We should be able to convert this into dummy variable columns.","5c82c1a3":"## Target Variable Distribution","55e368f8":"## Budget vs. Revenue","59b673df":"Plot the distributions of values for the major genres (ones with at least 500 movies)","8c16be80":"# Introduction to The Box Office Prediction Dataset"}}