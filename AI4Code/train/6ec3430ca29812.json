{"cell_type":{"666b8cdf":"code","daa83592":"code","2c1c152f":"code","b384bb66":"code","9d874d19":"code","82d13645":"code","7b682544":"code","ac89189a":"code","cae1287c":"code","e77f300f":"code","f98d67e0":"code","a0258e2e":"code","9884be43":"code","40ff5c14":"code","7274951f":"code","1e1490a6":"code","ef7b4614":"code","6ba60ed5":"code","e5adb432":"code","7ff97d37":"code","0484e1a8":"code","0290b785":"code","0cf7a89a":"code","032c2d91":"markdown","a9b903dd":"markdown","02e66c97":"markdown","12f34652":"markdown","db64c1f4":"markdown"},"source":{"666b8cdf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns # Visualization\nimport matplotlib.pyplot as plt # Visualization\nfrom colorama import Fore\n\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nimport math\n\nimport warnings # Supress warnings \nwarnings.filterwarnings('ignore')\n\nnp.random.seed(7)","daa83592":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c1c152f":"df = pd.read_csv(\"..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")\ndf.head()","b384bb66":"from datetime import datetime, date \n\ndf['date'] = pd.to_datetime(df['date'], format = '%Y\/%m\/%d')\ndf.head().style.set_properties(subset=['date'], **{'background-color': 'dodgerblue'})","9d874d19":"df = pd.read_csv(\"..\/input\/covid-world-vaccination-progress\/country_vaccinations_by_manufacturer.csv\")\ndf.head()","82d13645":"from datetime import datetime, date \n\ndf['date'] = pd.to_datetime(df['date'], format = '%Y\/%m\/%d')\ndf.head().style.set_properties(subset=['date'], **{'background-color': 'dodgerblue'})","7b682544":"# To compelte the data, as naive method, we will use ffill\nf, ax = plt.subplots(nrows=3, ncols=1, figsize=(15, 25))\n\nfor i, column in enumerate(df.drop('date', axis=1).columns):\n    sns.lineplot(x=df['date'], y=df[column].fillna(method='ffill'), ax=ax[i], color='dodgerblue')\n    ax[i].set_title('Feature: {}'.format(column), fontsize=14)\n    ax[i].set_ylabel(ylabel=column, fontsize=14)","ac89189a":"from sklearn.model_selection import TimeSeriesSplit\n\nN_SPLITS = 3\n\nX = df['date']\ny = df['total_vaccinations']\n\nfolds = TimeSeriesSplit(n_splits=N_SPLITS)","cae1287c":"f, ax = plt.subplots(nrows=N_SPLITS, ncols=2, figsize=(16, 9))\n\nfor i, (train_index, valid_index) in enumerate(folds.split(X)):\n    X_train, X_valid = X[train_index], X[valid_index]\n    y_train, y_valid = y[train_index], y[valid_index]\n\n    sns.lineplot(\n        x=X_train, \n        y=y_train, \n        ax=ax[i,0], \n        color='dodgerblue', \n        label='train'\n    )\n    sns.lineplot(\n        x=X_train[len(X_train) - len(X_valid):(len(X_train) - len(X_valid) + len(X_valid))], \n        y=y_train[len(X_train) - len(X_valid):(len(X_train) - len(X_valid) + len(X_valid))], \n        ax=ax[i,1], \n        color='dodgerblue', \n        label='train'\n    )\n\n    for j in range(2):\n        sns.lineplot(x= X_valid, y= y_valid, ax=ax[i, j], color='darkorange', label='validation')\n    ax[i, 0].set_title(f\"Rolling Window with Adjusting Training Size (Split {i+1})\", fontsize=16)\n    ax[i, 1].set_title(f\"Rolling Window with Constant Training Size (Split {i+1})\", fontsize=16)\n\nfor i in range(N_SPLITS):\n    ax[i, 0].set_xlim([date(2021, 1, 1), date(2021, 7, 30)])\n    ax[i, 1].set_xlim([date(2021, 1, 1), date(2021, 7, 30)])\n    \nplt.tight_layout()\nplt.show()","e77f300f":"train_size = int(0.85 * len(df))\ntest_size = len(df) - train_size\n\nunivariate_df = df[['date', 'total_vaccinations']].copy()\nunivariate_df.columns = ['ds', 'y']\n\ntrain = univariate_df.iloc[:train_size, :]\n\nx_train, y_train = pd.DataFrame(univariate_df.iloc[:train_size, 0]), pd.DataFrame(univariate_df.iloc[:train_size, 1])\nx_valid, y_valid = pd.DataFrame(univariate_df.iloc[train_size:, 0]), pd.DataFrame(univariate_df.iloc[train_size:, 1])\n\nprint(len(train), len(x_valid))","f98d67e0":"from sklearn.metrics import mean_absolute_error, mean_squared_error\nimport math\n\nfrom fbprophet import Prophet\n\n\n# Train the model\nmodel = Prophet()\nmodel.fit(train)\n\n# x_valid = model.make_future_dataframe(periods=test_size, freq='w')\n\n# Predict on valid set\ny_pred = model.predict(x_valid)\n\n# Calcuate metrics\nscore_mae = mean_absolute_error(y_valid, y_pred.tail(test_size)['yhat'])\nscore_rmse = math.sqrt(mean_squared_error(y_valid, y_pred.tail(test_size)['yhat']))\n\nprint(Fore.GREEN + 'RMSE: {}'.format(score_rmse))","a0258e2e":"# Plot the forecast\nf, ax = plt.subplots(1)\nf.set_figheight(6)\nf.set_figwidth(15)\n\nmodel.plot(y_pred, ax=ax)\nsns.lineplot(x=x_valid['ds'], y=y_valid['y'], ax=ax, color='orange', label='Ground truth') #navajowhite\n\nax.set_title(f'Prediction \\n MAE: {score_mae:.2f}, RMSE: {score_rmse:.2f}', fontsize=14)\nax.set_xlabel(xlabel='Date', fontsize=14)\nax.set_ylabel(ylabel='Total Vaccinations', fontsize=14)\n\nplt.show()","9884be43":"from statsmodels.tsa.arima_model import ARIMA\n\n# Fit model\nmodel = ARIMA(y_train, order=(1,1,1))\nmodel_fit = model.fit()\n\n# Prediction with ARIMA\ny_pred, se, conf = model_fit.forecast(1625)\n\n# Calcuate metrics\nscore_mae = mean_absolute_error(y_valid, y_pred)\nscore_rmse = math.sqrt(mean_squared_error(y_valid, y_pred))\n\nprint(Fore.GREEN + 'RMSE: {}'.format(score_rmse))","40ff5c14":"f, ax = plt.subplots(1)\nf.set_figheight(6)\nf.set_figwidth(15)\n\nmodel_fit.plot_predict(1,3567, ax=ax)\nsns.lineplot(x=x_valid.index, y=y_valid['y'], ax=ax, color='orange', label='Ground truth') #navajowhite\n\nax.set_title(f'Prediction \\n MAE: {score_mae:.2f}, RMSE: {score_rmse:.2f}', fontsize=14)\nax.set_xlabel(xlabel='Date', fontsize=14)\nax.set_ylabel(ylabel='Total Vaccinations', fontsize=14)\n\nax.set_ylim(-35, -18)\nplt.show()","7274951f":"f, ax = plt.subplots(1)\nf.set_figheight(6)\nf.set_figwidth(15)\n\nmodel_fit.plot_predict(1, 4725, ax=ax)\nsns.lineplot(x=x_valid.index, y=y_valid['y'], ax=ax, color='orange', label='Ground truth') #navajowhite\n\nax.set_title(f'Prediction \\n MAE: {score_mae:.2f}, RMSE: {score_rmse:.2f}', fontsize=14)\nax.set_xlabel(xlabel='Date', fontsize=14)\nax.set_ylabel(ylabel='total Vaccinations', fontsize=14)\n\nax.set_ylim(-35, -18)\nplt.show()","1e1490a6":"!pip install pmdarima","ef7b4614":"from statsmodels.tsa.arima_model import ARIMA\nimport pmdarima as pm\n\nmodel = pm.auto_arima(y_train, start_p=1, start_q=1,\n                      test='adf',       # use adftest to find optimal 'd'\n                      max_p=3, max_q=3, # maximum p and q\n                      m=1,              # frequency of series\n                      d=None,           # let model determine 'd'\n                      seasonal=False,   # No Seasonality\n                      start_P=0, \n                      D=0, \n                      trace=True,\n                      error_action='ignore',  \n                      suppress_warnings=True, \n                      stepwise=True)\n\nprint(model.summary())","6ba60ed5":"model.plot_diagnostics(figsize=(16,8))\nplt.show()","e5adb432":"from sklearn.preprocessing import MinMaxScaler\n\ndata = univariate_df.filter(['y'])\n#Convert the dataframe to a numpy array\ndataset = data.values\n\nscaler = MinMaxScaler(feature_range=(-1, 0))\nscaled_data = scaler.fit_transform(dataset)\n\nscaled_data[:10]","7ff97d37":"# Defines the rolling window\nlook_back = 52\n# Split into train and test sets\ntrain, test = scaled_data[:train_size-look_back,:], scaled_data[train_size-look_back:,:]\n\ndef create_dataset(dataset, look_back=1):\n    X, Y = [], []\n    for i in range(look_back, len(dataset)):\n        a = dataset[i-look_back:i, 0]\n        X.append(a)\n        Y.append(dataset[i, 0])\n    return np.array(X), np.array(Y)\n\nx_train, y_train = create_dataset(train, look_back)\nx_test, y_test = create_dataset(test, look_back)\n\n# reshape input to be [samples, time steps, features]\nx_train = np.reshape(x_train, (x_train.shape[0], 1, x_train.shape[1]))\nx_test = np.reshape(x_test, (x_test.shape[0], 1, x_test.shape[1]))\n\nprint(len(x_train), len(x_test))","0484e1a8":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM\n\n#Build the LSTM model\nmodel = Sequential()\nmodel.add(LSTM(128, return_sequences=True, input_shape=(x_train.shape[1], x_train.shape[2])))\nmodel.add(LSTM(64, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n#Train the model\nmodel.fit(x_train, y_train, batch_size=1, epochs=5, validation_data=(x_test, y_test))\n\nmodel.summary()","0290b785":"# Lets predict with the model\ntrain_predict = model.predict(x_train)\ntest_predict = model.predict(x_test)\n\n# invert predictions\ntrain_predict = scaler.inverse_transform(train_predict)\ny_train = scaler.inverse_transform([y_train])\n\ntest_predict = scaler.inverse_transform(test_predict)\ny_test = scaler.inverse_transform([y_test])\n\n# Get the root mean squared error (RMSE) and MAE\nscore_rmse = np.sqrt(mean_squared_error(y_test[0], test_predict[:,0]))\nscore_mae = mean_absolute_error(y_test[0], test_predict[:,0])\nprint(Fore.GREEN + 'RMSE: {}'.format(score_rmse))","0cf7a89a":"x_train_ticks = univariate_df.head(train_size)['ds']\ny_train = univariate_df.head(train_size)['y']\nx_test_ticks = univariate_df.tail(test_size)['ds']\n\n# Plot the forecast\nf, ax = plt.subplots(1)\nf.set_figheight(6)\nf.set_figwidth(15)\n\nsns.lineplot(x=x_train_ticks, y=y_train, ax=ax, label='Train Set') #navajowhite\nsns.lineplot(x=x_test_ticks, y=test_predict[:,0], ax=ax, color='green', label='Prediction') #navajowhite\nsns.lineplot(x=x_test_ticks, y=y_test[0], ax=ax, color='orange', label='Ground truth') #navajowhite\n\nax.set_title(f'Prediction \\n MAE: {score_mae:.2f}, RMSE: {score_rmse:.2f}', fontsize=14)\nax.set_xlabel(xlabel='Date', fontsize=14)\nax.set_ylabel(ylabel='Total Vaccinations', fontsize=14)\n\nplt.show()","032c2d91":"## 3. Auto-ARIMA","a9b903dd":"## 1.Prophet","02e66c97":"# Forecasting","12f34652":"## 2.ARIMA","db64c1f4":"## 4. LSTM"}}