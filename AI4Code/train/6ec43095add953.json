{"cell_type":{"f515af7f":"code","43bc4d2e":"code","4fdb7ddf":"code","676663df":"code","81d94e5a":"code","18a70a62":"code","9eaf9c0b":"code","76037782":"code","f036c19f":"code","1818232b":"code","a98ccef8":"code","0ffe1d7e":"code","0a69dcb3":"code","6f225e1d":"code","ea23ea07":"code","bd1ba2a3":"code","30beb8df":"code","65aebae6":"code","e7ddf1e1":"code","368da034":"code","75378e49":"code","106dc923":"code","afce5c9f":"code","e4cef78c":"markdown","b982f60f":"markdown","e6eebe16":"markdown","2b5b72ae":"markdown","ce4724aa":"markdown","b3c09005":"markdown","86754f37":"markdown","9c186fd9":"markdown","d2e6350b":"markdown","dd53fae3":"markdown","dec2818b":"markdown","99169ccf":"markdown","7052546e":"markdown","00a860f4":"markdown","f79a0058":"markdown","27d2b56c":"markdown","2c8e48f1":"markdown"},"source":{"f515af7f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","43bc4d2e":"df = pd.read_csv('..\/input\/noshowappointments\/KaggleV2-May-2016.csv')\nprint('Count of rows', str(df.shape[0]))\nprint('Count of Columns', str(df.shape[1]))\ndf.head()","4fdb7ddf":"df.isnull().any().any()","676663df":"for i in df.columns:\n    print(i+\":\",len(df[i].unique()))","81d94e5a":"df['PatientId'].astype('int64')\ndf.set_index('AppointmentID', inplace = True)\ndf['No-show'] = df['No-show'].map({'No':0, 'Yes':1})\ndf['Gender'] = df['Gender'].map({'F':0, 'M':1})","18a70a62":"df['PreviousApp'] = df.sort_values(by = ['PatientId','ScheduledDay']).groupby(['PatientId']).cumcount()\ndf['PreviousNoShow'] = (df[df['PreviousApp'] > 0].sort_values(['PatientId', 'ScheduledDay']).groupby(['PatientId'])['No-show'].cumsum() \/ df[df['PreviousApp'] > 0]['PreviousApp'])","9eaf9c0b":"df['PreviousNoShow'] = df['PreviousNoShow'].fillna(0)\ndf['PreviousNoShow']","76037782":"# Number of Appointments Missed by Patient\ndf['Num_App_Missed'] = df.groupby('PatientId')['No-show'].apply(lambda x: x.cumsum())\ndf['Num_App_Missed']","f036c19f":"df['ScheduledDay'] = pd.to_datetime(df['ScheduledDay']).dt.strftime('%Y-%m-%d')\ndf['ScheduledDay'] = pd.to_datetime(df['ScheduledDay'])\ndf['ScheduledDay']","1818232b":"df['AppointmentDay'] = pd.to_datetime(df['AppointmentDay']).dt.strftime('%Y-%m-%d')\ndf['AppointmentDay'] = pd.to_datetime(df['AppointmentDay'])\ndf['AppointmentDay']","a98ccef8":"df['Day_diff'] = (df['AppointmentDay'] - df['ScheduledDay']).dt.days\ndf['Day_diff'].unique()","0ffe1d7e":"df = df[(df.Age >= 0)]\ndf.drop(['ScheduledDay'], axis=1, inplace=True)\ndf.drop(['AppointmentDay'], axis=1, inplace=True)\ndf.drop('PatientId', axis=1,inplace = True)\ndf.drop('Neighbourhood', axis=1,inplace = True)","0a69dcb3":"#Convert to Categorical\ndf['Handcap'] = pd.Categorical(df['Handcap'])\n#Convert to Dummy Variables\nHandicap = pd.get_dummies(df['Handcap'], prefix = 'Handicap')\ndf = pd.concat([df, Handicap], axis=1)\ndf.drop(['Handcap'], axis=1, inplace = True)","6f225e1d":"df = df[(df.Age >= 0) & (df.Age <= 100)]","ea23ea07":"df.info()","bd1ba2a3":"X = df.drop(['No-show'], axis=1)\ny = df['No-show']\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX = scaler.fit_transform(X)\nX","30beb8df":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)","65aebae6":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nlr = LogisticRegression(solver='newton-cg',)\nlr.fit(X_train, y_train)\nprint(lr.score(X_train,y_train))\ny_pred_lr = lr.predict(X_test)\nclf_report = classification_report(y_test, y_pred_lr)\nprint(f\"Classification Report : \\n{clf_report}\")","e7ddf1e1":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\n\ny_pred_knn = knn.predict(X_test)\n\nclf_report = classification_report(y_test, y_pred_knn)\nprint(f\"Classification Report : \\n{clf_report}\")","368da034":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)\n\ny_pred_dtc = dtc.predict(X_test)\nclf_report = classification_report(y_test, y_pred_dtc)\n\nprint(f\"Classification Report : \\n{clf_report}\")","75378e49":"from sklearn.ensemble import RandomForestClassifier\nrd_clf = RandomForestClassifier()\nrd_clf.fit(X_train, y_train)\n\ny_pred_rd_clf = rd_clf.predict(X_test)\nclf_report = classification_report(y_test, y_pred_rd_clf)\n\nprint(f\"Classification Report : \\n{clf_report}\")","106dc923":"from sklearn.ensemble import AdaBoostClassifier\nada = AdaBoostClassifier(base_estimator = dtc)\nada.fit(X_train, y_train)\n\ny_pred_ada = ada.predict(X_test)\nclf_report = classification_report(y_test, y_pred_ada)\n\nprint(f\"Classification Report : \\n{clf_report}\")","afce5c9f":"from sklearn.model_selection import cross_val_score\n\naccuracy = cross_val_score(estimator = rd_clf, X = X, y =y, cv = 8)\nprint(\"avg acc: \",np.mean(accuracy))\nprint(\"acg std: \",np.std(accuracy))","e4cef78c":"## Split the dataset into train and test set","b982f60f":"## PatientID -> Object to Int (Categorical)\n## No-show -> Str to Int (Categorical)\n## Gender -> Str to Int(Categorical)","e6eebe16":"## Split dataset into data and true val\n## Scale the provided data","2b5b72ae":"## High Accuracy Low standard deviation looks presice!","ce4724aa":"## Check unique values for every feature","b3c09005":"# Data PreProcessing","86754f37":"# Models ","9c186fd9":"## New Feature: Day Difference between AppointmentDay & ScheduledDay","d2e6350b":"## Convert to datetime object","dd53fae3":"## Filter day diff bigger than zero. You can not make an appointment for past LOL\n## Drop unncessary columns.","dec2818b":"## Filter age in dataset","99169ccf":"## New feature: Number of Appointments missed by same same patient\u00b6","7052546e":"## We get almost %94+ test accuracy from different models.\n## Let's prepare a cross validation with Random Forest","00a860f4":"## Convert handicap feature to new features","f79a0058":"# Data Reading","27d2b56c":"## Previous App(New Feature) : Count a patient make an previous schedulation\n## PreviousNoShow (New Feature): Count a patient make a preious no show","2c8e48f1":"## Fill Nan values with 0"}}