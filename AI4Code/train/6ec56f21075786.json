{"cell_type":{"e343e744":"code","2dc48020":"code","12f42266":"code","609c641d":"code","d14a8208":"code","b63c5205":"code","f09a8595":"code","0da893ac":"code","40a84cee":"markdown","184b682d":"markdown","775f8ff0":"markdown","30a58012":"markdown","b5d5c97e":"markdown"},"source":{"e343e744":"import os\nimport numpy as np\nimport pandas as pd\nimport pydicom\nimport matplotlib.pyplot as plt","2dc48020":"# specify the dataset and the series names\ndataset = 'test'\nseries_names = ['FLAIR','T1w','T1wCE','T2w']\ndirectory = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification'","12f42266":"def get_series_list(path):\n    files = [os.path.join(path, f) for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n    return files","609c641d":"# Find the image in the middle of each series stack, returns a list of four images\ndef get_middle_images(study_id):\n    \n    middle_images = []\n    \n    # Iterate through each of the four series directories and get the files \n    for ser in series_names:\n        series_files = get_series_list(f'{directory}\/{dataset}\/{study_id}\/{ser}')\n        series_df = pd.DataFrame(columns = ['image','instance_number'])\n\n        # Get the DICOM InstanceNumber tag to order the images since we can't rely on the filenames to be in order\n        for s in series_files:\n            img = pydicom.dcmread(s)\n            series_df.loc[len(series_df.index)] = [s, img[0x0020,0x0013].value]\n \n        series_df['instance_number'] = pd.to_numeric(series_df['instance_number'])\n\n        # Sort the image list by InstanceNumber\n        series_df = series_df.sort_values(by=['instance_number'])\n        \n        # Find the image in the middle of the list\n        middle_index = int(series_df.shape[0] \/ 2)\n        middle_image = series_df.iloc[middle_index]['image']\n\n        middle_images.append(middle_image)\n\n    return middle_images","d14a8208":"# Convert the Image Orientation Patient tag cosine values into a text string of the plane.\n# This represents the plane the image is 'closest to' .. it does not explain any obliqueness\ndef get_image_plane(loc):\n\n    row_x = round(loc[0])\n    row_y = round(loc[1])\n    row_z = round(loc[2])\n    col_x = round(loc[3])\n    col_y = round(loc[4])\n    col_z = round(loc[5])\n\n    if row_x == 1 and row_y == 0 and col_x == 0 and col_y == 0:\n        return \"Coronal\"\n\n    if row_x == 0 and row_y == 1 and col_x == 0 and col_y == 0:\n        return \"Sagittal\"\n\n    if row_x == 1 and row_y == 0 and col_x == 0 and col_y == 1:\n        return \"Axial\"\n\n    return \"Unknown\"","b63c5205":"# Display images and their plane\ndef plot_images(images):\n    for img in images:\n        fig = plt.figure(figsize=(5, 5))\n        image = pydicom.dcmread(img)\n        ser = img.split(\"\/\")\n        image_orientation_patient = image[0x0020,0x0037]\n        plane = get_image_plane(image_orientation_patient)\n        plt.title(ser[-2] + \" - \" + plane)\n        plt.imshow(image.pixel_array, cmap='gray')","f09a8595":"# ID \/ Directory name of the study we want to get\nstudy_id = '00037'\nplot_images(get_middle_images(study_id))","0da893ac":"study_id = '00079'\nplot_images(get_middle_images(study_id))","40a84cee":"<div class='alert alert-info' style='text-align:center'><h1>Determining MR Image Planes<\/h1>\n- yet another MR processing notebook -<\/div>\n\n![planes.jpg](attachment:3010bc31-292e-4b19-a867-e2ebe2006009.jpg)\n\n#### - Calculate the plane (Axial, Coronal, Sagittal) of an MR image relative to the patient's body using the DICOM Image Orientation Patient tag.\n\n#### - It is important to compare co-planar images, i.e. Axial to Axial, Coronal to Coronal etc.\n\n- I noticed that the series aren't standard across studies with respect to the reconstruction planes.\n- That is, in some studies, the FLAIR sequence is in the Coronal plane and in the Sagittal plane in other studies etc.\n","184b682d":"### Load four images from a study\n- Grab the 'middle' image of each sequence\n- Get the plane of each image\/sequence","775f8ff0":"### Import stuff and define some functions","30a58012":"### Compare the planes between the two studies\n\n#### Second Study:\n- FLAIR = Sagittal\n- T1w = Axial\n- T1wCE = Sagittal\n- T2w = Sagittal\n\n#### First study:\n- FLAIR = Coronal\n- T1w = Axial\n- T1wCE = Coronal\n- T2w = Sagittal\n\n### As you can see, the planes are different, so they can't be directly compared to each other.\n##### * Also, notice the last image in the second study is only 256x256 .. while all the others are 512x512 .. this means not all the series in this dataset are the same size.\n\n#### Some of my other MR notebooks\n- Tumor Object Detection -> https:\/\/www.kaggle.com\/davidbroberts\/brain-tumor-object-detection\n- Determining MR Slice Orientation -> https:\/\/www.kaggle.com\/davidbroberts\/determining-mr-slice-orientation\n- Determining DICOM image order -> https:\/\/www.kaggle.com\/davidbroberts\/determining-dicom-image-order\n- Manual VOI LUT on MR images -> https:\/\/www.kaggle.com\/davidbroberts\/manual-voi-lut-on-mr-images\n- Reference Lines on MR images -> https:\/\/www.kaggle.com\/davidbroberts\/mr-reference-lines\n- Export DICOM Images by Plane -> https:\/\/www.kaggle.com\/davidbroberts\/export-dicom-series-by-plane\/","b5d5c97e":"### We can see this study has the following planes for each sequence:\n\n- FLAIR = Coronal\n- T1w = Axial\n- T1wCE = Coronal\n- T2w = Sagittal\n\n#### Let's get another study to compare"}}