{"cell_type":{"b9e5e086":"code","e335a0ba":"code","ff1a0bdf":"code","58888419":"code","0e0e9d60":"code","15bda982":"code","c6706c35":"code","5aecde77":"code","d881e31d":"code","e3e9a6e4":"code","852a09f1":"code","5de49013":"code","bba9c8f5":"code","fb6a9d87":"code","f00871c3":"code","53c6ae5b":"code","3ed67eff":"code","224067fb":"code","1216a7b1":"code","b62472df":"code","98801cb1":"code","bb300c93":"code","1f3f879b":"code","e126cc66":"code","b115080b":"code","9986b6e5":"code","5d780f0e":"code","2ab76d0e":"code","ef22d15e":"code","4837ddad":"code","26c794c5":"code","291aeacd":"code","886a3ae5":"code","299ba76e":"code","a56a9f6f":"code","372179d6":"code","09cf197e":"code","e171d5c7":"code","024d7825":"code","f4696c78":"code","7549a553":"code","99147b93":"code","9932ad03":"code","eba6fd6a":"code","c83e4e78":"code","839bf050":"code","57e40499":"code","9901a292":"code","407ecfb3":"code","49121956":"code","1b1d9fb8":"code","bc1aaa34":"code","192852e5":"code","4ca3adcb":"code","d514ed2c":"code","936e05f2":"code","caf4c958":"code","8fbbf2bd":"code","6985e7e1":"code","e0d8c001":"code","ce1f389d":"code","2a09effb":"code","e3e36c3c":"code","d300e3a6":"code","13f972a1":"code","9c06c99d":"code","f4d99c14":"code","de7c4716":"code","7eba0d84":"code","0fa11ea5":"code","25559c03":"code","00ddd145":"code","7907935a":"code","e79c155d":"code","b9700fa9":"code","d366602a":"code","881ad22e":"code","a98750fd":"code","2e2d12d1":"code","89cb5e07":"code","44a3e2cd":"code","f607d78e":"code","bbc2b806":"code","ab23b983":"code","5072bf83":"code","afe59c1f":"code","360c65fe":"markdown","4a99243f":"markdown","4cddf064":"markdown","4d596d84":"markdown","21fb4fc8":"markdown","39da5362":"markdown","2e859797":"markdown","062741bb":"markdown","f53706a9":"markdown","e318eec2":"markdown","019da311":"markdown","4b1edf94":"markdown","5bb20a97":"markdown","7961bd18":"markdown","8e153566":"markdown","3da4adff":"markdown","dec4d5e9":"markdown","ba942f84":"markdown","ae86095a":"markdown","df64cf1b":"markdown","ea653568":"markdown","a1daea71":"markdown","f605ef83":"markdown","2b3cc240":"markdown","7ab85a68":"markdown","3363dd16":"markdown","53e8b4ee":"markdown","6d96c61f":"markdown","3a7209f3":"markdown","6a138870":"markdown","4e5c14e0":"markdown","54d8edd6":"markdown","c065b977":"markdown","2c2af854":"markdown","99fbe4a7":"markdown","7c7c229e":"markdown","8c11835b":"markdown","1dce7ee9":"markdown","cedccb75":"markdown","8327d354":"markdown","4069633a":"markdown","77a361df":"markdown","b16e2dbf":"markdown","a4b66337":"markdown","462d15bb":"markdown","3149ab23":"markdown","4dedbff0":"markdown","4d3dff6e":"markdown","1c657736":"markdown","4e5c7428":"markdown","eb1fef9d":"markdown","2425408d":"markdown","acdcd44f":"markdown","f3f5f516":"markdown","0da5e2c0":"markdown","a8ea2b7a":"markdown","bfc660f6":"markdown","2e3ab021":"markdown","91f7abd4":"markdown","2fe1ecfc":"markdown","53d948dc":"markdown","64e7f28f":"markdown","b1bf1855":"markdown","4f250e7a":"markdown","03a7fab0":"markdown","e50e405e":"markdown","f6c99147":"markdown"},"source":{"b9e5e086":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib_venn import venn2, venn2_circles\nimport seaborn as sns\nimport folium","e335a0ba":"sns.set()\n%matplotlib inline","ff1a0bdf":"df = pd.read_csv('..\/input\/csgo-player-and-team-stats\/player_stats.csv')\ndf","58888419":"df.head()","0e0e9d60":"df.tail()","15bda982":"df.describe()","c6706c35":"df.info()","5aecde77":"# Checking for null value\ndf.isnull().sum()","d881e31d":"# Checking for duplicates\ndf[df.duplicated()].sum()","e3e9a6e4":"# Deleting the \"Unamed: 0\" column\ndf.drop('Unnamed: 0', inplace=True, axis=1)\ndf","852a09f1":"# Converting 'teams' column values from string to list\ndef convert(string):\n    return string[1:-1].replace(\"'\", \"\").replace(' ', '').split(\",\")\n\n\ndf['teams'] = df['teams'].apply(convert)\ndf","5de49013":"# Checking for rows that have duplicate values in 'teams' column\ndupli = pd.Series([i for i in df['teams'] if len(i)!= len(set(i))])\ndupli","bba9c8f5":"# Removing duplicate values in 'teams' column\ndef remove_duplicates(arr):\n    return list(set(arr))\n\n\ndf['teams'] = df['teams'].apply(remove_duplicates)\ndf","fb6a9d87":"# Adding a new column, representing number of teams that every player played with.\nteam_counts = [len(i) for i in df['teams']]\ndf.insert(3, \"team_counts\", team_counts)","f00871c3":"# Final Form\ndf","53c6ae5b":"d0 = df","3ed67eff":"plt.figure(figsize=(14,8))\nsns.histplot(data = d0, x ='rating', kde=True, stat='count', color='deepskyblue')","224067fb":"d1 = df","1216a7b1":"plt.figure(figsize=(16,9))\nsns.kdeplot(data = d1, x ='rating', hue='team_counts', palette='cool', shade=False, linestyle='--', bw_method='scott')","b62472df":"d1 = d1['team_counts'].value_counts().reset_index()\nd1.columns = ['number of teams', 'count']\nd1","98801cb1":"plt.figure(figsize=(10,6))\nsns.barplot(data = d1, x='number of teams', y='count', palette='cool')","bb300c93":"d2 = df","1f3f879b":"columns = d2.columns[4:8]\n\ni=1\nplt.figure(figsize=(16,9))\n\nfor col in columns:\n\tplt.subplot(2,2,i)\n\tsns.kdeplot(data = d2, x = col, hue='team_counts', palette='cool', linestyle='solid', bw_method=0.2)\n\ti+=1\n\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1, wspace=0.25, hspace=0.4)","e126cc66":"d3 = df","b115080b":"plt.figure(figsize=(12,12))\nsns.scatterplot(data=d3, x=\"rating\", y=\"kd\",size='total_rounds', hue=\"team_counts\", alpha=1, palette='cool', sizes=(20, 200))","9986b6e5":"d4 = df","5d780f0e":"sns.pairplot(data = d4.iloc[:, 3:], kind=\"scatter\", hue='team_counts', palette=\"cool\")","2ab76d0e":"d5 = df.drop(columns='team_counts')","ef22d15e":"correlation = d5.corr(method='pearson')\ncorrelation ","4837ddad":"plt.figure(figsize=(10,8))\nsns.heatmap(correlation, annot=True, cmap='RdYlGn_r',linewidths=0.3, yticklabels= correlation.index)\nplt.yticks(rotation=0)","26c794c5":"d6 = df.head(50)","291aeacd":"d6.style.background_gradient(cmap='Blues')","886a3ae5":"d7 = df.head(50)\nd7","299ba76e":"plt.figure(figsize=(18,14))\nsns.barplot(x='rating', y= 'name', data=d7, palette='cool')","a56a9f6f":"d8 = df","372179d6":"columns = d8.columns[4:8]\n\ni=1\nplt.figure(figsize=(15,22))\n\nfor col in columns:\n\tplt.subplot(2,2,i)\n\tsns.barplot(x=col, y='name', data=d8.sort_values(by=col, ascending=False).head(50), palette='cool')\n\ti+=1\n\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1, wspace=0.5, hspace=0.15)","09cf197e":"d9 = df","e171d5c7":"# Top 50 players based on total_maps\ndf_maps = d9.sort_values(by='total_maps', ascending=False).head(50)\ndf_maps_list = list((df_maps['name']))\n\n# Top 50 players based on total_rounds\ndf_rounds = d9.sort_values(by='total_rounds', ascending=False).head(50)\ndf_rounds_list = list((df_rounds['name']))\n\n# Top 50 players based on kd_diff\ndf_kdiff = d9.sort_values(by='kd_diff', ascending=False).head(50)\ndf_kdiff_list = list((df_kdiff['name']))\n\n# Top 50 players based on kd\ndf_kd = d9.sort_values(by='kd', ascending=False).head(50)\ndf_kd_list = list((df_kd['name']))\n\n# Top 50 players based on rating\ndf_rating = d9.sort_values(by='rating', ascending=False).head(50)\ndf_rating_list = list((df_rating['name']))","024d7825":"# intersection between rating and maps\nrating_maps = []\nrating_maps = [i for i in df_rating_list if i in df_maps_list]\nprint(f'intersection between rating and total maps: {len(rating_maps)} --> {rating_maps}', '\\n')\n\n# intersection between rating and rounds\nrating_rounds = []\nrating_rounds = [i for i in df_rating_list if i in df_rounds_list]\nprint(f'intersection between rating and total rounds: {len(rating_rounds)} --> {rating_rounds}', '\\n')\n\n# intersection between rating and kd diff\nrating_kdiff = []\nrating_kdiff = [i for i in df_rating_list if i in df_kdiff_list]\nprint(f'intersection between rating and kd_diff: {len(rating_kdiff)} --> {rating_kdiff}', '\\n')\n\n# intersection between rating and kd\nrating_kd = []\nrating_kd = [i for i in df_rating_list if i in df_kd_list]\nprint(f'intersection between rating and kd: {len(rating_kd)} --> {rating_kd}', '\\n')","f4696c78":"# Intersection between total_maps and rating\nplt.figure(figsize=(20,20))\nset1 = set(df_maps_list)\nset2 = set(df_rating_list)\nvenn = venn2([set1,set2], ('Top 50 sorted by total_maps', 'Top 50 sorted by rating'), set_colors = ('darkviolet','deepskyblue'), alpha=0.5)\nc = venn2_circles([set1,set2], linestyle='-')\n\nvenn.get_label_by_id('100').set_text('\\n'.join(map(str,set1-set2)))\nvenn.get_label_by_id('110').set_text('\\n'.join(map(str,set1&set2)))\nvenn.get_label_by_id('010').set_text('\\n'.join(map(str,set2-set1)))\n\nfor text in venn.set_labels:\n   text.set_fontsize(15)\n\nfor text in venn.subset_labels:\n   text.set_fontsize(9)\n\nplt.title('Intersection between total_maps and rating', fontdict = {'fontsize' : 16})","7549a553":"# Intersection between total_rounds and rating\nplt.figure(figsize=(20,20))\nset1 = set(df_rounds_list)\nset2 = set(df_rating_list)\nvenn = venn2([set1,set2], ('Top 50 sorted by total_rounds', 'Top 50 sorted by rating'), set_colors = ('darkviolet','deepskyblue'), alpha=0.5)\nc = venn2_circles([set1,set2], linestyle='-')\n\nvenn.get_label_by_id('100').set_text('\\n'.join(map(str,set1-set2)))\nvenn.get_label_by_id('110').set_text('\\n'.join(map(str,set1&set2)))\nvenn.get_label_by_id('010').set_text('\\n'.join(map(str,set2-set1)))\n\nfor text in venn.set_labels:\n   text.set_fontsize(15)\n\nfor text in venn.subset_labels:\n   text.set_fontsize(9)\n\nplt.title('Intersection between total_rounds and rating', fontdict = {'fontsize' : 16})","99147b93":"# Intersection between kd_diff and rating\nplt.figure(figsize=(14,14))\nset1 = set(df_kdiff_list)\nset2 = set(df_rating_list)\nvenn = venn2([set1,set2], ('Top 50 sorted by kd_diff', 'Top 50 sorted by rating'), set_colors= ('darkviolet','deepskyblue'), alpha=0.5)\nc = venn2_circles([set1,set2], linestyle='-')\n\nvenn.get_label_by_id('100').set_text('\\n'.join(map(str,set1-set2)))\nvenn.get_label_by_id('110').set_text('\\n'.join(map(str,set1&set2)))\nvenn.get_label_by_id('010').set_text('\\n'.join(map(str,set2-set1)))\n\nfor text in venn.set_labels:\n   text.set_fontsize(15)\n\nfor text in venn.subset_labels:\n   text.set_fontsize(11)\n\nplt.title('Intersection between kd_diff and rating', fontdict = {'fontsize' : 15})","9932ad03":"# Intersection between kd and rating\nplt.figure(figsize=(14,14))\nset1 = set(df_kd_list)\nset2 = set(df_rating_list)\nvenn = venn2([set1,set2], ('Top 50 sorted by kd', 'Top 50 sorted by rating'), set_colors = ('darkviolet','deepskyblue'), alpha=0.5)\nc = venn2_circles([set1,set2], linestyle='-')\n\nvenn.get_label_by_id('100').set_text('\\n'.join(map(str,set1-set2)))\nvenn.get_label_by_id('110').set_text('\\n'.join(map(str,set1&set2)))\nvenn.get_label_by_id('010').set_text('\\n'.join(map(str,set2-set1)))\n\nfor text in venn.set_labels:\n   text.set_fontsize(15)\n\nfor text in venn.subset_labels:\n   text.set_fontsize(10)\n\nplt.title('Intersection between kd and rating', fontdict = {'fontsize' : 15})","eba6fd6a":"d10 = pd.DataFrame(df['country'].value_counts()).reset_index()\nd10.columns = ['country', 'count']","c83e4e78":"d10","839bf050":"plt.figure(figsize=(18,14))\nsns.barplot(x='count', y= 'country', data=d10, palette='cool')","57e40499":"d11 = pd.DataFrame(df['country'].value_counts()).reset_index()\nd11.columns = ['country', 'count']","9901a292":"d11 = d11.replace({\"United States\": \"United States of America\", \"Korea\": \"South Korea\"})\ncountry_geo = '..\/input\/world-countries\/world-countries.json'\nm = folium.Map(location=[0, 0], tiles=\"cartodbpositron\", zoom_start=2)\n\nfolium.Choropleth(geo_data = country_geo,\n                 name=\"Results\",\n                 data=d11,\n                 columns=['country', 'count'],\n                 key_on='feature.properties.name',\n                 fill_color='Spectral',\n                 fill_opacity=0.7,\n                 line_opacity=0.2,\n                 legend_name='Number of players per countries'\n                 ).add_to(m)\n\nfolium.TileLayer('stamenwatercolor').add_to(m)\nfolium.LayerControl().add_to(m)\nm","407ecfb3":"df = pd.read_csv('..\/input\/csgo-player-and-team-stats\/team_stats.csv')\ndf","49121956":"df.head()","1b1d9fb8":"df.tail()","bc1aaa34":"df.describe()","192852e5":"df.info()","4ca3adcb":"# Checking for null value\ndf.isnull().sum()","d514ed2c":"# Checking for duplicates\ndf[df.duplicated()].sum()","936e05f2":"# Deleting the \"Unamed: 0\" column\ndf.drop('Unnamed: 0', inplace=True, axis=1)","caf4c958":"# Final Form\ndf","8fbbf2bd":"d0 = df","6985e7e1":"plt.figure(figsize=(14,8))\nsns.histplot(data = d0, x ='rating', kde=True, stat='count', color='deepskyblue')","e0d8c001":"d1 = df","ce1f389d":"columns = d1.columns[2:]\n\ni=1\nplt.figure(figsize=(16,9))\n\nfor col in columns:\n\tplt.subplot(2,2,i)\n\tsns.histplot(data = d1, x = col, kde=True, stat='count', color='darkviolet')\n\ti+=1\n\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1, wspace=0.25, hspace=0.4)","2a09effb":"d2 = df","e3e36c3c":"plt.figure(figsize=(12,12))\nsns.scatterplot(data=d2, x=\"rating\", y=\"kd\",size='kd_diff', hue=\"total_maps\", alpha=1, palette='cool', sizes=(20, 200))","d300e3a6":"d3 = df","13f972a1":"sns.pairplot(data = d3.iloc[:, 2:], kind=\"scatter\", palette=\"cool\", hue='kd', diag_kind='hist', height=3.3, aspect=1)","9c06c99d":"d4 = df","f4d99c14":"correlation = d4.corr(method='pearson')\ncorrelation ","de7c4716":"plt.figure(figsize=(10,8))\nsns.heatmap(correlation, annot=True, cmap='RdYlGn_r',linewidths=0.3, yticklabels= correlation.index)\nplt.yticks(rotation=0)","7eba0d84":"d5 = df.head(50)","0fa11ea5":"d5.style.background_gradient(cmap='Blues')","25559c03":"d6 = df.head(50)","00ddd145":"plt.figure(figsize=(18,14))\nsns.barplot(x='rating', y= 'name', data=d6, palette='cool')","7907935a":"d7 = df","e79c155d":"columns = d7.columns[2:]\n\ni=1\nplt.figure(figsize=(15,22))\n\nfor col in columns:\n\tplt.subplot(2,2,i)\n\tsns.barplot(x=col, y='name', data=d7.sort_values(by=col, ascending=False).head(50), palette='cool')\n\ti+=1\n\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1, wspace=0.5, hspace=0.15)","b9700fa9":"d8 = df","d366602a":"# Top 50 players based on total_maps\ndf_maps = d8.sort_values(by='total_maps', ascending=False).head(50)\ndf_maps_list = list((df_maps['name']))\n\n# Top 50 players based on kd_diff\ndf_kdiff = d8.sort_values(by='kd_diff', ascending=False).head(50)\ndf_kdiff_list = list((df_kdiff['name']))\n\n# Top 50 players based on kd\ndf_kd = d8.sort_values(by='kd', ascending=False).head(50)\ndf_kd_list = list((df_kd['name']))\n\n# Top 50 players based on rating\ndf_rating = d8.sort_values(by='rating', ascending=False).head(50)\ndf_rating_list = list((df_rating['name']))","881ad22e":"# intersection between rating and maps\nrating_maps = []\nrating_maps = [i for i in df_rating_list if i in df_maps_list]\nprint(f'intersection between rating and total maps:{len(rating_maps)} --> {rating_maps}', '\\n')\n\n# intersection between rating and kd diff\nrating_kdiff = []\nrating_kdiff = [i for i in df_rating_list if i in df_kdiff_list]\nprint(f'intersection between rating and kd_diff:{len(rating_kdiff)} --> {rating_kdiff}', '\\n')\n\n# intersection between rating and kd\nrating_kd = []\nrating_kd = [i for i in df_rating_list if i in df_kd_list]\nprint(f'intersection between rating and kd:{len(rating_kd)} --> {rating_kd}', '\\n')","a98750fd":"# Intersection between total_maps and rating\nplt.figure(figsize=(16,16))\nset1 = set(df_maps_list)\nset2 = set(df_rating_list)\nvenn = venn2([set1,set2], ('Top 50 sorted by total_maps', 'Top 50 sorted by rating'), set_colors = ('darkviolet','deepskyblue'), alpha=0.5)\nc = venn2_circles([set1,set2], linestyle='-')\n\nvenn.get_label_by_id('100').set_text('\\n'.join(map(str,set1-set2)))\nvenn.get_label_by_id('110').set_text('\\n'.join(map(str,set1&set2)))\nvenn.get_label_by_id('010').set_text('\\n'.join(map(str,set2-set1)))\n\nfor text in venn.set_labels:\n   text.set_fontsize(16)\n\nfor text in venn.subset_labels:\n   text.set_fontsize(9)\n\nplt.title('Intersection between total_maps and rating', fontdict = {'fontsize' : 16})","2e2d12d1":"# Intersection between kd_diff and rating\nplt.figure(figsize=(16,16))\nset1 = set(df_kdiff_list)\nset2 = set(df_rating_list)\nvenn = venn2([set1,set2], ('Top 50 sorted by kd_diff', 'Top 50 sorted by rating'), set_colors= ('darkviolet','deepskyblue'), alpha=0.5)\nc = venn2_circles([set1,set2], linestyle='-')\n\nvenn.get_label_by_id('100').set_text('\\n'.join(map(str,set1-set2)))\nvenn.get_label_by_id('110').set_text('\\n'.join(map(str,set1&set2)))\nvenn.get_label_by_id('010').set_text('\\n'.join(map(str,set2-set1)))\n\nfor text in venn.set_labels:\n   text.set_fontsize(16)\n\nfor text in venn.subset_labels:\n   text.set_fontsize(11)\n\nplt.title('Intersection between kd_diff and rating', fontdict = {'fontsize' : 16})","89cb5e07":"# Intersection between kd and rating\nplt.figure(figsize=(16,16))\nset1 = set(df_kd_list)\nset2 = set(df_rating_list)\nvenn = venn2([set1,set2], ('Top 50 sorted by kd', 'Top 50 sorted by rating'), set_colors = ('darkviolet','deepskyblue'), alpha=0.5)\nc = venn2_circles([set1,set2], linestyle='-')\n\nvenn.get_label_by_id('100').set_text('\\n'.join(map(str,set1-set2)))\nvenn.get_label_by_id('110').set_text('\\n'.join(map(str,set1&set2)))\nvenn.get_label_by_id('010').set_text('\\n'.join(map(str,set2-set1)))\n\nfor text in venn.set_labels:\n   text.set_fontsize(16)\n\nfor text in venn.subset_labels:\n   text.set_fontsize(10)\n\nplt.title('Intersection between kd and rating', fontdict = {'fontsize' : 16})","44a3e2cd":"d9 = pd.DataFrame(df['country'].value_counts()).reset_index()\nd9.columns = ['country', 'count']","f607d78e":"d9","bbc2b806":"plt.figure(figsize=(16,12))\nsns.barplot(x='count', y= 'country', data=d9, palette='cool')","ab23b983":"d10 = pd.DataFrame(df['country'].value_counts()).reset_index()\nd10.columns = ['country', 'count']","5072bf83":"d10","afe59c1f":"d10 = d10.replace({\"United States\": \"United States of America\", \"Korea\": \"South Korea\"})\ncountry_geo = '..\/input\/world-countries\/world-countries.json'\nm = folium.Map(location=[0, 0], tiles=\"cartodbpositron\", zoom_start=2)\n\nfolium.Choropleth(geo_data = country_geo,\n                 name=\"Results\",\n                 data=d10,\n                 columns=['country', 'count'],\n                 key_on='feature.properties.name',\n                 fill_color='Spectral',\n                 fill_opacity=0.7,\n                 line_opacity=0.2,\n                 legend_name='Number of players per countries'\n                 ).add_to(m)\n\nfolium.TileLayer('stamenwatercolor').add_to(m)\nfolium.LayerControl().add_to(m)\nm","360c65fe":"#### **Q0: Distribution of \u2018rating\u2019 using histogram plot**","4a99243f":"#### Insights \u2705\n- Difference in \u2018rating\u2019 among top 50 players is 0.04 (1.07-1.03).","4cddf064":"#### Insights \u2705\n- At first glance, we can't see any obvious relation between top 50 players.","4d596d84":"#### **Q8: Top 50 player based on the other factors**","21fb4fc8":"#### **Q4: General correlation view**","39da5362":"#### Insights \u2705\n- Difference between top two country (USA and Brazil) is 66.","2e859797":"#### **Q3: Relation between \u2018rating\u2019 and \u2018kd\u2019 based on \u2018total_rounds\u2019 and \u2018team_counts\u2019**","062741bb":"#### Insights \u2705\n- Most values are between 1.10 and 1.02.","f53706a9":"#### **Q4: Advanced correlation using heatmap**","e318eec2":"## Analyzing Dataset \ud83d\udcca","019da311":"# 1. Player Stats Dataset","4b1edf94":"#### Insights \u2705\n- Biggest intersection is when sorting based on \u2018kd\u2019 and \u2018rating\u2019.","5bb20a97":"#### **Q9: Number of players in each country**","7961bd18":"### **B. Top 50 Players**","8e153566":"***Representing the result visually using Venn diagram***","3da4adff":"#### Insights \u2705\n- Difference between top two country (USA and Brazil) is 15.","dec4d5e9":"#### Insights \u2705\n- Interesting \ud83d\ude0e","ba942f84":"#### **Q6: Quick look at top 50 player using background gradient**","ae86095a":"#### Insights \u2705\n- Most values are between 0.95 and 1.04.","df64cf1b":"#### **Q3: General correlation view**","ea653568":"### **A. Overview**","a1daea71":"#### **Q10: Number of players in each country**","f605ef83":"#### Insights \u2705\n#### Differences among top 50 player based on each factor is:\n- total_maps: 545 (26.40%)\n- total_rounds: 14175 (26.18%)\n- kd_diff: 5277 (65.39%)\n- kd: 0.23 (16.08%)","2b3cc240":"***Representing the result visually using Venn diagram***","7ab85a68":"## Sneak Peek \ud83e\uddd0","3363dd16":"**Hooray ... Our Dataframe doesn't have any null or missing values \ud83c\udf89 \ud83c\udf89 \ud83c\udf89**","53e8b4ee":"#### **Q10: Representing the results visually using world map**","6d96c61f":"#### **Q2: Distribution for other factors based on 'team_counts'**","3a7209f3":"#### Insights \u2705\n- \u2018rating\u2019 is affected the most by \u2018kd\u2019.\n- \u2018total_maps\u2019 and \u2018total_rounds\u2019 are strongly affected by each other.","6a138870":"#### Insights \u2705\n- The relation between \u2018rating\u2019 and \u2018kd\u2019 tend to be linear.","4e5c14e0":"#### **Q5: Advanced correlation using heatmap**","54d8edd6":"#### **Q0: Distribution of \u2018rating\u2019 using histogram plot**","c065b977":"### **C. Maps and countries**","2c2af854":"### **C. Maps and countries**","99fbe4a7":"**Issues to fix within the data:**\n1. Deleting the \"Unamed: 0\" column.","7c7c229e":"#### **Q8: Intersection between top 50 players, when sorting on rating comparing to the other 4 factors**","8c11835b":"#### **Q5: Quick look at top 50 player using background gradient**","1dce7ee9":"#### Insights \u2705\n- Smallest intersection is when sorting based on \u2018rating\u2019 and \u2018total_maps\u2019.","cedccb75":"### **A. Overview**","8327d354":"<center><img src=\"https:\/\/i.ibb.co\/Scv2fc4\/CSGO.png\"\/><\/center>","4069633a":"#### Insights \u2705\n-  We can find bigger \u2018total_maps\u2019 and \u2018kd_diff\u2019 values when \u2018rating\u2019 value increase.","77a361df":"#### Insights \u2705\n- Distribution plot based on \u2018total_maps\u2019 and \u2018total_rounds\u2019 looks very similar.","b16e2dbf":"## Cleaning Dataset \ud83e\uddf9","a4b66337":"#### Insights \u2705\n- Difference in \u2018rating\u2019 among top 50 players is 0.15 (1.28-1.13).","462d15bb":"# Importing Libraries \ud83d\udce5","3149ab23":"## Sneak Peek \ud83e\uddd0","4dedbff0":"#### Insights \u2705\n- \u2018rating\u2019 is affected the most by \u2018kd\u2019 and \u2018kd_diff\u2019.\n- \u2018total_maps\u2019 and \u2018kd_diff\u2019 are affected by each other.","4d3dff6e":"#### Insights \u2705\n#### Differences among top 50 player based on each factor is:\n- total_maps: 1230 (62.53%)\n- kd_diff: 9456 (80.51%)\n- kd: 0.13 (10.83%)\n- rating: 0.04 (3.73%)","1c657736":"#### **Q11: Representing the results visually using world map**","4e5c7428":"#### Insights \u2705\n- There are 646 players who played with 3 different teams, 253 stick to a single team , and 6 players are hopping between 6 different team so far.","eb1fef9d":"#### **Q7: Top 50 player based on \u2018rating\u2019**","2425408d":"#### **Q1: Distribution for other factors using histogram plot**","acdcd44f":"#### **Q1: Distribution of \u2018rating\u2019 based on 'team_counts'**","f3f5f516":"#### **Q9: Intersection between top 50 players, when sorting on rating comparing to the other 4 factors**","0da5e2c0":"#### **Q2: Relation between \u2018rating\u2019 and \u2018kd\u2019 based on \u2018total_maps\u2019 and \u2018kd_diff\u2019**","a8ea2b7a":"# Special thank to [\"Saurabh Patra\"](https:\/\/www.kaggle.com\/patrasaurabh) for sharing this Dataset with us. <br> Your feedbacks are highly appreciated. <br> Thank You \u270c\ufe0f","bfc660f6":"#### Insights \u2705\n- The relation between \u2018total_maps\u2019 and \u2018total_rounds\u2019 and is almost linear.\n- The relation between \u2018rating\u2019 and \u2018kd\u2019 tend to be linear as well (as we saw before).","2e3ab021":"**Issues to fix within the dataset:**\n1. Deleting the \"Unamed: 0\" column.\n2. Converting the 'teams' column values types from string to list.\n3. Removing duplicate values in 'teams' column (Elements wise).\n4. Adding a 'team_counts' column, representing number of teams that every player played with.","91f7abd4":"**Hooray ... Our Dataframe doesn't have any null or missing values \ud83c\udf89 \ud83c\udf89 \ud83c\udf89**","2fe1ecfc":"### **B. Top 50 Players**","53d948dc":"# 2. Team Stats Dataset","64e7f28f":"## Analyzing Dataset \ud83d\udcca","b1bf1855":"#### Insights \u2705\n- There's a good amount of high \u2018kd\u2019 values when sorting based on \u2018rating\u2019.","4f250e7a":"#### Insights \u2705\n- Distribution plot based on \u2018kd\u2019 and \u2018rating\u2019 look similar.","03a7fab0":"#### **Q7: Top 50 player based on the other factors**","e50e405e":"## Cleaning Dataset \ud83e\uddf9","f6c99147":"#### **Q6: Top 50 player based on \u2018rating\u2019**"}}