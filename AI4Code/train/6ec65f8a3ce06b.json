{"cell_type":{"c2cb4f11":"code","bd5f6554":"code","8091a6a1":"code","abd01f16":"code","b1897c81":"code","dc447dd0":"code","a6cd2620":"code","92227443":"code","9da8390e":"code","c72da23d":"code","5d3808a4":"code","774e953f":"code","79905a60":"code","3cd86749":"code","b13e2b01":"code","bdc6ed59":"code","f4193119":"code","acedc17d":"code","d88e7133":"code","ce38c39c":"code","435e4a8e":"code","a7858351":"code","05f27da5":"code","149181d0":"code","4c6b2d96":"code","82bad6ba":"code","d9ae7dc4":"code","916b425f":"code","1910d2be":"code","59f2c1a2":"code","a29507e8":"code","57eec558":"markdown","c567ab8e":"markdown","eaac816d":"markdown","651ff009":"markdown","1a3c4d80":"markdown","3d17f92f":"markdown","811b0637":"markdown","02b88e7d":"markdown","48b9b02d":"markdown","ebeaee73":"markdown","dd268d40":"markdown","112cb607":"markdown","c8b7ad83":"markdown","91a6d5b2":"markdown","12f6ff4e":"markdown","b3f2e498":"markdown","d34fe860":"markdown","7ee8a02e":"markdown"},"source":{"c2cb4f11":"import pandas as pd\nimport numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set()\nplt.rcParams['figure.dpi'] = 90\npd.set_option('display.max_rows', 500)","bd5f6554":"df_animes = pd.read_csv('..\/input\/anime-data\/Animes_eda.csv',index_col = 0)","8091a6a1":"df_animes = df_animes[['anime_id', 'anime_name', 'studio_id','studio_name', 'episodes_total',\n       'source_material', 'air_date', 'overall_rating', 'members', 'synopsis',\n       'number of tags', 'Action', 'Adventure', 'Cars', 'Comedy', 'Dementia',\n       'Demons', 'Drama', 'Ecchi', 'Fantasy', 'Game', 'Harem', 'Hentai',\n       'Historical', 'Horror', 'Josei', 'Kids', 'Magic', 'Martial_Arts',\n       'Mecha', 'Military', 'Music', 'Mystery', 'Parody', 'Police',\n       'Psychological', 'Romance', 'Samurai', 'School', 'Sci-Fi', 'Seinen',\n       'Shoujo', 'Shoujo_Ai', 'Shounen', 'Shounen_Ai', 'Slice_of_Life',\n       'Space', 'Sports', 'Super_Power', 'Supernatural', 'Thriller', 'Vampire',\n       'Yaoi', 'Yuri' ]]\ndf_animes.head()","abd01f16":"print(df_animes.dtypes)\ndf_animes.describe()","b1897c81":"#number of animes\nprint('Animes',df_animes.shape[0])\n\n#number of studios\nprint('Studios',len(pd.unique(df_animes['studio_id'])))\n\n#tags\nprint('Genres',df_animes[['Action', 'Adventure', 'Cars', 'Comedy', 'Dementia',\n       'Demons', 'Drama', 'Ecchi', 'Fantasy', 'Game', 'Harem', 'Hentai',\n       'Historical', 'Horror', 'Josei', 'Kids', 'Magic', 'Martial_Arts',\n       'Mecha', 'Military', 'Music', 'Mystery', 'Parody', 'Police',\n       'Psychological', 'Romance', 'Samurai', 'School', 'Sci-Fi', 'Seinen',\n       'Shoujo', 'Shoujo_Ai', 'Shounen', 'Shounen_Ai', 'Slice_of_Life',\n       'Space', 'Sports', 'Super_Power', 'Supernatural', 'Thriller', 'Vampire',\n       'Yaoi', 'Yuri' ]].shape[1])\n","dc447dd0":"df_animes['air_date'] = pd.to_datetime(df_animes['air_date'])\ndf_animes['air_date'].describe()","a6cd2620":"# Distribution of overall rating ~ Target variable\nfrom statsmodels import robust\nplt.figure(figsize=(7,5), dpi= 90)\nsns.kdeplot(df_animes['overall_rating'],label = 'Overall Rating')\nprint('Mean: ',df_animes['overall_rating'].mean())\nprint('Median', np.median(df_animes['overall_rating']))\nprint('Standard Deviation: ',df_animes['overall_rating'].std())\nprint('MAD', robust.mad(df_animes['overall_rating']))","92227443":"# High Rated animes (with rating greater than 75th Percentile)\nperc_75 = np.round(np.percentile(df_animes['overall_rating'],75))\nprint('Number of high rated Animes (rating greater than 75th Percentile: ',df_animes[df_animes['overall_rating']>=7].shape[0])\n\n# Top Animes of all time\nprint('These are the top 30 Animes of all time')\ndf_animes[['anime_name','overall_rating','air_date']].sort_values('overall_rating',ascending = False)[:30]","9da8390e":"# Anime Production over time\n\nimport datetime\nnat = np.datetime64('NaT')\ndef nat_check(nat):\n    return nat == np.datetime64('NaT')    \n\n\nyearly_ratings = df_animes[['anime_name','overall_rating','air_date']]\nyearly_ratings['Year'] = yearly_ratings['air_date'].dt.year\n\n# Number of Animes we have for every year\nRatings_time = yearly_ratings.groupby('Year')['overall_rating'].agg(['size','mean']).reset_index()\n\n# Plotting\n# Production over time\nplt.figure(figsize = (10,5),dpi = 90)\nplt.plot(Ratings_time['Year'],Ratings_time['size'],'r-')\nplt.xticks(ticks=range(1917,2021,5),rotation = 60)\nplt.xlabel('Year')\nplt.ylabel('Count')\nplt.title('Anime Production over time',fontdict={'fontweight':'bold'})\nplt.show()\nprint('{} Animes were created in 2017.'.format(Ratings_time['size'].max()))\n\n# Rating over time\n# 5 year moving average ~ Year vs Overall Anime Rating\n\ntime_rating = yearly_ratings.groupby('Year').mean().reset_index()\ntime_rating['5MA'] = time_rating['overall_rating'].rolling(5).mean()\n\n# Get the Peaks and Troughs\ndata = time_rating['5MA'].values\ndoublediff = np.diff(np.sign(np.diff(data)))\npeak_locations = np.where(doublediff == -2)[0] + 1\ndoublediff2 = np.diff(np.sign(np.diff(-1*data)))\ntrough_locations = np.where(doublediff2 == -2)[0] + 1\n\n# Plotting\nplt.figure(figsize=(10,5), dpi = 90)\nplt.plot(time_rating['Year'],time_rating['5MA'], label = '5 year MA')\nplt.scatter(time_rating.Year[peak_locations],time_rating['5MA'][peak_locations], label = 'peaks',color = 'g')\nplt.scatter(time_rating.Year[trough_locations],time_rating['5MA'][trough_locations], label = 'troughs',color = 'r')\n\n# Annotation\nfor t, p in zip(trough_locations[::2], peak_locations[::4]):\n    plt.text(time_rating.Year[p], time_rating['5MA'][p]+0.1, int(time_rating.Year[p]), horizontalalignment='center', color='darkgreen')\n    plt.text(time_rating.Year[t], time_rating['5MA'][t]-0.3, int(time_rating.Year[t]), horizontalalignment='center', color='darkred')\n\n\n# Decoration\nplt.xticks(ticks=range(1917,2021,3), rotation = 60)\nplt.title('Anime Rating Trend', fontdict={'fontweight':'bold'})\nplt.xlabel('Year')\nplt.ylabel('Rating')\nplt.legend(loc = 'best')\nplt.show()","c72da23d":"# Printing out the best 5 animes from each band\n\nfor i in [1948, 1988 , 2010]:\n    print('The 5 Year Moving Average for {} band was {}'.format(i,np.round(time_rating['5MA'][time_rating['Year'] == i].values[0],2)))\n\nprint('\\n\\n')    \n\nprint('Top 5 Animes of our best Years\\n')\nband1 = range(1944, 1948+1)\nband2 =range(1984,1988+1)\nband3 = range(2006,2010+1)\n\nprint('1944- 1948\\n')\nprint(yearly_ratings[['anime_name',\n                'overall_rating']][yearly_ratings['Year'].isin(band1)].sort_values('overall_rating',\n                                                                                ascending = False)[:5],'\\n')\nprint('1984- 1988\\n')\nprint(yearly_ratings[['anime_name',\n                'overall_rating']][yearly_ratings['Year'].isin(band2)].sort_values('overall_rating',\n                                                                                ascending = False)[:5],'\\n')\n\nprint('2006- 2010\\n')\nprint(yearly_ratings[['anime_name',\n                'overall_rating']][yearly_ratings['Year'].isin(band3)].sort_values('overall_rating',\n                                                                                ascending = False)[:5],'\\n')","5d3808a4":"#Number of animes per tag\ntags = ['Action', 'Adventure', 'Cars', 'Comedy', 'Dementia',\n       'Demons', 'Drama', 'Ecchi', 'Fantasy', 'Game', 'Harem', 'Hentai',\n       'Historical', 'Horror', 'Josei', 'Kids', 'Magic', 'Martial_Arts',\n       'Mecha', 'Military', 'Music', 'Mystery', 'Parody', 'Police',\n       'Psychological', 'Romance', 'Samurai', 'School', 'Sci-Fi', 'Seinen',\n       'Shoujo', 'Shoujo_Ai', 'Shounen', 'Shounen_Ai', 'Slice_of_Life',\n       'Space', 'Sports', 'Super_Power', 'Supernatural', 'Thriller', 'Vampire',\n       'Yaoi', 'Yuri' ]\n#changing tags to category\ndf_animes[tags] = df_animes[tags].astype('category')\n\ntags_num = {}\nfor i in tags:\n    #print('Number of animes with {} tag {}'.format(i,sum(df_animes[i]==1)))\n    tags_num[i] = sum(df_animes[i]==1)\n\ntags_num_df = pd.DataFrame.from_dict(data=tags_num,orient = 'index',columns = ['Number of Animes'])\n\n# plotting top and bottom ratings\n\n#max\nplt.subplot(211)\nplt.bar(tags_num_df.sort_values('Number of Animes',ascending=False).head(10).index,\n        tags_num_df.sort_values('Number of Animes',ascending=False).head(10)['Number of Animes'])\nplt.xlabel('Tag')\nplt.ylabel('Number of Animes')\nfor i, val in enumerate( tags_num_df.sort_values('Number of Animes',ascending=False).head(10)['Number of Animes'].values):\n    plt.text(i, val, float(val), horizontalalignment='center', \n             verticalalignment='bottom', fontdict={'fontweight':300, 'size':10})\nplt.xticks(rotation = 45)\nplt.title('Top 10 Tags with most Animes created')\nplt.show()\n\n#least\nplt.subplot(212)\n\nplt.bar(tags_num_df.sort_values('Number of Animes',ascending=True).head(10).index,\n        tags_num_df.sort_values('Number of Animes',ascending=True).head(10)['Number of Animes'])\nplt.xlabel('Tag')\nplt.ylabel('Number of Animes')\nfor i, val in enumerate( tags_num_df.sort_values('Number of Animes',ascending=True).head(10)['Number of Animes'].values):\n    plt.text(i, val, float(val), horizontalalignment='center', \n             verticalalignment='bottom', fontdict={'fontweight':500, 'size':10,'color':'black'})\nplt.xticks(rotation = 45)\nplt.title('Top 10 Tags with least Animes created')\nplt.show()","774e953f":"#tags with max ratings\ntags_rating = {}\n\nfor i in tags:\n    tags_rating[i] = np.round(np.median(df_animes['overall_rating'][df_animes[i]==1]),2)\n\ntags_rating = pd.DataFrame.from_dict(data = tags_rating, orient = 'index', \n                                     columns = ['Median Rating']).sort_values('Median Rating')\n\n# plotting top and bottom ratings\nfig,ax = plt.subplots(nrows = 1, ncols= 3, figsize = (20,3),dpi = 144)\nax[0].bar(tags_rating.sort_values('Median Rating',ascending=False).head(10).index,\n        tags_rating.sort_values('Median Rating',ascending=False).head(10)['Median Rating'])\nax[0].set_xlabel('Tag')\nax[0].set_ylabel('Median Rating')\nax[0].tick_params(axis = 'x',rotation = 90)\nax[0].set_title('Top 10 highest rated tags', fontdict = {'fontweight':'bold'})\nax[0].set_ylim(0,7.5,0.2)\nfor i, val in enumerate( tags_rating.sort_values('Median Rating',ascending=False).head(10)['Median Rating'].values):\n    ax[0].text(i, val, float(val), horizontalalignment='center', \n             verticalalignment='bottom', fontdict={'fontweight':300, 'size':10})\nfig.show()\n\n\n# taking the top 10 highest rated tags to construct their boxplots\n\ntags_box = {}\n\nfor i in tags_rating.sort_values('Median Rating',ascending=False).head(10).index:\n    tags_box[i] = df_animes['overall_rating'][df_animes[i]==1]\n\npd.DataFrame(tags_box).boxplot()\nax[2].set_title('Ratings vs Tags Boxplot', fontdict = {'fontweight':'bold'})\nax[2].set_xlabel('Tag')\nax[2].set_ylabel('Overall Ratings')\nax[2].tick_params(axis = 'x',rotation = 90)\nax[2].set_ylim(0,10,0.30)\nfig.show()\n\n# MAD\ntags_mad = {}\nfor i in tags_rating.sort_values('Median Rating',ascending=False).head(10).index:\n    tags_mad[i] = np.round(stats.median_absolute_deviation(df_animes['overall_rating'][df_animes[i]==1]),2)\n\ntags_mad = pd.DataFrame.from_dict(data = tags_mad, orient = 'index', \n                                     columns = ['MAD'])\n\nax[1].bar(tags_mad.index,\n        tags_mad['MAD'],color = 'red')\nfor i, val in enumerate(tags_mad['MAD']):\n    ax[1].text(i, val, float(val), horizontalalignment='center', \n             verticalalignment='bottom', fontdict={'fontweight':300, 'size':10})\n\nax[1].set_title('Rating deviation for top tags', fontdict = {'fontweight':'bold'})\nax[1].set_xlabel('Tag')\nax[1].tick_params(axis = 'x',rotation = 90)\nax[1].set_ylabel('Median Absolute Deviation')\nfig.show()","79905a60":"#IQR\nprint('Psychological IQR', np.round(stats.iqr(df_animes['overall_rating'][df_animes['Psychological']==1], interpolation = 'midpoint'),2))\nprint('Thriller IQR', np.round(stats.iqr(df_animes['overall_rating'][df_animes['Thriller']==1], interpolation = 'midpoint'),2))\nprint('Police IQR', np.round(stats.iqr(df_animes['overall_rating'][df_animes['Police']==1], interpolation = 'midpoint'),2))\nprint('Harem IQR', np.round(stats.iqr(df_animes['overall_rating'][df_animes['Harem']==1], interpolation = 'midpoint'),2))","3cd86749":"# Tags which occur most together\n\n# Takking the top 10 tags only\ntags_top10 = list(tags_box.keys())\ntags_corr = df_animes[tags].astype(int).corr().sort_values(tags,ascending = False,axis=0)\n\n# Plotting\nplt.figure(figsize=(20,8), dpi= 144)\nsns.heatmap(tags_corr[tags_top10], \n            xticklabels = tags_corr[tags_top10].columns, \n            yticklabels = tags_corr.index, cmap='RdYlGn', center=0, annot=True,linewidth=.3)\n\n# Decorations\nplt.title('Correlogram of Top 10 highest rated tags', fontsize=22)\nplt.xticks(fontsize=12,rotation = 90)\nplt.yticks(fontsize=12)\nplt.show()","b13e2b01":"#Animes with scores of 0\n\nzero_animes = df_animes[df_animes.overall_rating == 0]\n\n# their tags\nzero_rating_tags = {}\n\nfor i in tags:\n    zero_rating_tags[i] = zero_animes[zero_animes[i]==1].shape[0]\n\nzero_rating_tags = pd.DataFrame.from_dict(zero_rating_tags,orient = 'index',columns=['Number of animes'])","bdc6ed59":"zero_rating_tags.sort_values('Number of animes',ascending=False).plot(kind = 'bar')\nplt.show()","f4193119":"# studios which produce these kids animes\ndf_animes[df_animes.Kids==1].studio_name.value_counts()[:30].plot(color = 'coral',kind = 'bar')\nplt.show()\ndf_animes[df_animes.Kids==1].studio_name.value_counts()[:30]\n","acedc17d":"# Studios which have created the Highest Rated Animes\nhigh_rated_studios = pd.DataFrame(df_animes[df_animes['overall_rating']>=perc_75].groupby('studio_name')['overall_rating'].\n             count().rename('# Animes').sort_values(ascending = False))[1:31] #234 Unknowns\nhigh_rated_studios['%total high rated animes'] = np.round(high_rated_studios['# Animes']*100\/len(df_animes[df_animes['overall_rating']>=perc_75]),2)\n\n\nprint('10 Studios are responsible for creating',high_rated_studios[:10]['%total high rated animes'].sum(),'% of the total high rated Animes')\nhigh_rated_studios","d88e7133":"# Top studios via rating & #count\nfrom sklearn.preprocessing import MinMaxScaler\n\nstudio_ratings = pd.DataFrame(df_animes.groupby('studio_name')['overall_rating'].agg(['median',\n                                                                                      'count']).sort_values('median',\n                                                                                                            ascending = False))\n\nscaler = MinMaxScaler(feature_range=(0,5))\nstudio_ratings['scaled_count'] = scaler.fit_transform(studio_ratings['count'].values.reshape(-1,1))\n\n# MCI(Median Count Index) = scaled_Median*scaled count\nstudio_ratings['MCI'] = studio_ratings['median']*studio_ratings['scaled_count']*100","ce38c39c":"# Plotting\nfig,ax = plt.subplots(nrows = 1, ncols= 2, figsize = (20,10),dpi = 144)\n\nplt.figure(figsize = (20,8),dpi=144)\n# top 30 studios based on rating\nax[0].barh(studio_ratings['median'].sort_values(ascending = False).index[:30],\n         studio_ratings['median'].sort_values(ascending = False)[:30],color = 'g')\nax[0].set_ylabel('Studio Name')\nax[0].set_xlabel('Average Ratings')\nfor i, val in enumerate(studio_ratings['median'].sort_values(ascending = False)[:30].values):\n    ax[0].text(val+0.1, i, np.round(float(val),2), horizontalalignment='left', \n             verticalalignment='center', fontdict={'fontweight':'bold', 'size':10})\nax[0].set_title('Studios with Animes with highest Average Rating',fontdict = {'fontweight':'bold'})\n\n# Count of Max rated studios\nax[1].bar(studio_ratings[:30].index,studio_ratings[:30]['count'],color = '#ffcc22')\n       \n        \n\nfor i, val in enumerate(studio_ratings[:30]['count'].values):\n    ax[1].text(i, val+.5, np.round(float(val),2), horizontalalignment='center', \n             verticalalignment='bottom', fontdict={'fontweight':'bold', 'size':10})\n\nax[1].tick_params(axis = 'x',rotation = 90)\nax[1].set_xlabel('Studio Name')\nax[1].set_ylabel('# Animes Created')\nax[1].set_title('Animes created by Highest rated Studios',fontdict = {'fontweight':'bold'})\n\nplt.show()","435e4a8e":"# ratings of most studios with most animes\n\nfig,ax = plt.subplots(nrows = 1, ncols= 1, figsize = (10,8))\n\nax.barh((studio_ratings.sort_values('count',ascending = False)[1:31]).sort_values('median',ascending=False).index,\n           (studio_ratings.sort_values('count',ascending = False)[1:31]).sort_values('median',ascending=False)['median'])\n\nfor i, val in enumerate((studio_ratings.sort_values('count',\n                                                    ascending = False)[1:31]).sort_values('median',\n                                                                                                  ascending=False)['median'].values):\n    ax.text(val + 0.1, i, np.round(float(val),2), horizontalalignment='left', \n             verticalalignment='center', fontdict={'fontweight':'bold', 'size':10})\nax.set_ylabel('Studio Name')\nax.set_xlabel('Average Ratings')\nax.set_title('Average Ratings of most Active Studios',fontdict = {'fontweight':'bold'})\nplt.show()\n\n# Standard deviation of ratings of studios with most animes created\nplt.figure(figsize=(10,8))\nstudio_ratings_dev = pd.DataFrame(df_animes.groupby('studio_name')['overall_rating'].std().rename('Deviation'))\nstudio_ratings_dev = studio_ratings_dev[studio_ratings_dev.index.isin((studio_ratings.sort_values('count',\n                                                                    ascending = False)[1:31]).sort_values('median',\n                                                                                                          ascending=False).index)]\nstudio_ratings_dev = studio_ratings_dev.sort_values('Deviation',ascending=False)                                       \nplt.hlines(y=studio_ratings_dev.index, xmin=0, xmax=studio_ratings_dev['Deviation'],color = 'g' ,alpha=0.4, linewidth=5)\n\nfor i, val in enumerate(studio_ratings_dev['Deviation'].values):\n    plt.text(val + 0.1, i, np.round(float(val),2), horizontalalignment='left', \n             verticalalignment='center', fontdict={'fontweight':'bold', 'size':10})\n\nplt.xlabel('Deviation')\nplt.ylabel('Studio Name')\nplt.title('Deviation in ratings for the most active Studios')\nplt.show()\n\n# Number of Animes created by studios (excluding 6806 Unknowns)\n\nstudios_num = pd.DataFrame(df_animes.groupby('studio_name')['studio_name'].count().rename('# Animes Created').\n                           sort_values(ascending = False))[1:31]\n#top 30 active studios plotting\n\nplt.figure(figsize=(10,8))\n\nplt.barh(list(studios_num.index[::-1]), \n        studios_num['# Animes Created'][::-1],color = 'coral')\nfor i, val in enumerate(studios_num['# Animes Created'][::-1].values):\n    plt.text(val+1, i, float(val), horizontalalignment='left', \n             verticalalignment='center', fontdict={'fontweight':'bold', 'size':12})\n\nplt.xlabel('Number of Animes created',fontdict={'fontweight':'bold'})\nplt.ylabel('Studio Name',fontdict={'fontweight':'bold'})\nplt.title('Top 30 most active Studios',fontdict={'fontweight':'bold'})\nplt.show()","a7858351":"# Source Material\ndf_animes['source_material'] = pd.Categorical(df_animes['source_material'])\nprint('We have animes created from {} different sources'.format( df_animes['source_material'].describe()[1]))\n\n# Pie Chart \nplt.figure(figsize=(10,5),dpi = 144)\nlabels = pd.DataFrame(df_animes['source_material'].value_counts()).index\nvalues = pd.DataFrame(df_animes['source_material'].value_counts()).values\nplt.pie(values, explode=[0.1]+list([0]*14), shadow=False,startangle=90)\nplt.legend(labels,loc = 'best')\nplt.tight_layout()\nplt.axis('equal')\nplt.show()\n\nsource_perc = np.round(df_animes['source_material'].value_counts()*100\/df_animes['source_material'].value_counts().sum(),2) \nprint('The Original source constitutes of {} % of the total animes created,\\nFollowed by Manga which constitutes of {} % of Animes.'.format(source_perc.values[0],source_perc.values[1]))\n\nprint('Light Novel adaptations constitute of {} %'.format(source_perc[source_perc.index=='Light novel'].values[0]))","05f27da5":"# Source wise rating - What sort of anime adaptations fetch the highest ratings\nplt.figure(figsize = (6,5),dpi = 90)\n\nsns.boxplot(data=df_animes,x='source_material',y = 'overall_rating')\nplt.xticks(rotation = 90)\nplt.xlabel('Source')\nplt.ylabel('Rating')\nplt.title('Sources vs Rating')\nplt.show()\n\nprint('Median Original',np.median(df_animes['overall_rating'][df_animes['source_material'] == 'Original']),' MAD: ', \n      stats.median_absolute_deviation(df_animes['overall_rating'][df_animes['source_material'] == 'Original']))\n\nprint('Median Manga',np.median(df_animes['overall_rating'][df_animes['source_material'] == 'Manga']),' MAD: ', \n      stats.median_absolute_deviation(df_animes['overall_rating'][df_animes['source_material'] == 'Manga']))\n\nprint('Median Light Novel',np.median(df_animes['overall_rating'][df_animes['source_material'] == 'Light novel']),' MAD: ', \n      stats.median_absolute_deviation(df_animes['overall_rating'][df_animes['source_material'] == 'Light novel']))","149181d0":"# Numerical Features - Correlation\n\nnum_features = ['anime_name', 'episodes_total', 'members', 'number of tags', 'overall_rating' ]\nnum_anime = df_animes[num_features]\nsns.pairplot(num_anime, diag_kind='kde')\nplt.show()\nnum_anime.corr() # 35% correlation between number of tags and the rating","4c6b2d96":"import statsmodels.api as sm\n\n# Rating vs #Tags\nmodel1 = sm.OLS(num_anime['overall_rating'], sm.add_constant(num_anime['number of tags']))\nresults1 = model1.fit()\nprint('Ratings ~ Number of Tags Model\\n')\nprint(results1.summary(),'\\n\\n')","82bad6ba":"# Rating vs #Tags+members+Total Episodes\nprint('Ratings ~ #Tags+members+Total Episodes')\nX = sm.add_constant(num_anime[['number of tags','members','episodes_total']])\nmodel2 = sm.OLS(num_anime['overall_rating'],X,missing='drop')\nresults2 = model2.fit()\nprint(results2.summary(),'\\n\\n')","d9ae7dc4":"# Creating a feature logmembers and fitting linear model (first standardising members as well)\nprint('Rating ~ logmembers + #tags + episodes_total\\n')\nX['logmembers'] = np.log(1 + X['members'] - X['members'].mean()\/X['members'].std()*100)\nmodel = sm.OLS(num_anime['overall_rating'],X[['logmembers','number of tags','episodes_total']],missing='drop').fit()\nprint(model.summary())\n\n#plotting fitted values\nsm.graphics.plot_fit(model,'logmembers')\nplt.legend(loc = 'upper left')\nplt.show()","916b425f":"# Hyped Animes\n# Exploring members further - Animes with a high number of members (outliers)\n\nupper_bound = np.percentile(df_animes['members'], 75) + 1.5*stats.iqr(df_animes['members'])\n                                                         \nhyped_animes = df_animes[df_animes['members']>= upper_bound].sort_values('members',ascending = False)\n\nhyped_animes.head(100)","1910d2be":"# tags of hyped animes\ntags_rating = {}\n\nfor i in tags:\n    tags_rating[i] = [np.round(np.median(hyped_animes['overall_rating'][hyped_animes[i]==1]),2),\n                      hyped_animes['overall_rating'][hyped_animes[i]==1].shape[0] ]\n\ntags_rating = pd.DataFrame.from_dict(data = tags_rating, orient = 'index', \n                                     columns = ['Median Rating','#Animes']).sort_values('#Animes', ascending = False)\n\n#Plotting tags of the most hyped animes\nplt.figure(figsize=(8,5),dpi = 90)\ntags_rating['#Animes'][20::-1].plot(kind = 'barh', color = 'hotpink')\n\nfor i, val in enumerate(tags_rating[20::-1]['#Animes']):\n    plt.text(val+0.3, i, int(val), horizontalalignment='left', \n             verticalalignment='center', fontdict={'fontweight':300, 'size':9})\n\nplt.xlabel('Tags')\nplt.ylabel('Number of Animes')\nplt.title('Most occuring tags in the Hyped Animes')\nplt.show()\n\n# Studios which have created the most hyped animes\npd.DataFrame(hyped_animes.groupby('studio_name')['members'].sum().rename('Total Members')\n            ).sort_values('Total Members', ascending = False).head(30).plot(kind = 'bar')\nplt.show()","59f2c1a2":"# movies & series ratings (movies => episodes = 1)\n\nmovies = df_animes[df_animes['episodes_total']==1].sort_values('overall_rating',ascending = False)\n\nprint('The median rating for Anime Series is {}'.format(df_animes['overall_rating'][df_animes['episodes_total']>1].median()))\nprint('The median rating for Anime Movies is {}'.format(df_animes['overall_rating'][df_animes['episodes_total']==1].median()))\n\nplt.title('Number of Movies and Series')\nplt.bar( ['Movies','Series'],\n        [df_animes[df_animes['episodes_total']==1].shape[0],df_animes[df_animes['episodes_total']>1].shape[0]])\n\nfor i, val in enumerate([df_animes[df_animes['episodes_total']==1].shape[0],df_animes[df_animes['episodes_total']>1].shape[0]]):\n    plt.text(i, val-0.1, int(val), horizontalalignment='center', \n             verticalalignment='bottom', fontdict={'fontweight':500, 'size':13})\n\nplt.show()","a29507e8":"# tags and studios of movies \n\n# Studios which have created the most Animes movies\npd.DataFrame(hyped_animes.groupby('studio_name')['members'].sum().rename('Total Members')\n            ).sort_values('Total Members', ascending = False).head(30).plot(kind = 'bar')\n\n\n# tags occuring most in Anime movies\ntags_rating = {}\n\nfor i in tags:\n    tags_rating[i] = [np.round(np.median(movies['overall_rating'][movies[i]==1]),2),\n                      movies['overall_rating'][movies[i]==1].shape[0] ]\n\ntags_rating = pd.DataFrame.from_dict(data = tags_rating, orient = 'index', \n                                     columns = ['Median Rating','#Animes']).sort_values('#Animes', ascending = False)\n\n#Plotting tags of Anime Movies\nplt.figure(figsize=(8,5),dpi = 90)\ntags_rating['#Animes'][20::-1].plot(kind = 'barh', color = 'g')\n\nfor i, val in enumerate(tags_rating[20::-1]['#Animes']):\n    plt.text(val+0.3, i, int(val), horizontalalignment='left', \n             verticalalignment='center', fontdict={'fontweight':300, 'size':9})\n\nplt.xlabel('Tags')\nplt.ylabel('Number of Animes')\nplt.title('Most occuring tags in the Anime Movies')\nplt.show()","57eec558":"<b>\n- The graph shows us the top 30 studios with highes median ratings.<br>\n- `Studio Chizu` has the highes rating of 8.4 followed by `Egg firm` 8.38<br>\n- However, we can see that most of these highest reated studios have very few animes, Studio Chizu has made 3 Animes,\n  Egg firm 4 animes and many studios with high ratings have only 1 anime to their Name, like the Nippon Ramayana Film Co <br>\n- `Wit Studio (44), Bones(128), Lerche(52), Kyoto Animation(118) and Shaft(120)` have decent number of animes and have high \n  ratings (> 7.30) as well.<br>","c567ab8e":"### What are the most Hyped or Mainstream Animes?","eaac816d":"<b>\n- Overall rating has `27.9%` correlation with members and `35.7%` correlation with number of tags. Members and #tags also have a correlation of `27.8%`<br>\n- The members and the rating variables have a logarithmic relationship, we can `engineer a feature logmembers` to improve our model. <br>    \n- We can see that there are some outliers within the data set from the pairplots. Some animes with a high number of episodes are there( >1000). Some animes have huge amount of members as well. The outliers present in the episodes_total feature will affect out model.\nLets test if this linear relationship is significant enough.","651ff009":"<b>\n- `Toei Animation is the most active studio with 746 Animes created util date. <br>`\n- Madhous, Sunrise and JC staff are highly active studios as well with 350+ animes created.<br>\n- Out of the most active studios, Bones has the highes averaga rating and has 128 Animes. It has a low standard deviation of 1.31.<br>\n- It is followed by Kyoto Animation, Shaft ans A1 Pictures which have a good rating score (>7.2) and have decent amount of Animes to their names (>100).<br>\n- `Bones, Kyoto Animation, Shaft ans A1 Pictures` lie in the same category of Studios, they have good ratings, low standard deviation (<2) and have created decent number of Animes.                                                                         - Shin EI Animation, Nippon Animation, TMS Entertainment have the highes standard deviations (>3). It can be seen that they also have a high number of Animes (>150).<br>\n<i>It is difficult to be consistent with producing quality animes as the number of anime contracts increase.<\/i> <br>\n- Ufotable, Studio 4 degrees and Feel have the lowest number of animes out of the most active studios and yet they have high standard deviations (>1.5) suggesting that the converse of the above statement is not true.<br>\n- DLE has created 164 Animes and yet its median rating is 0. A lot of the animes it has created are kids animes which dont have a good amount of views which makes the rating of a lot of such Animes 0.","1a3c4d80":"<b>\n- Most of the kids animes have 0 ratings. <br>\n- A lot of comedy animes also have 0 ratings.","3d17f92f":"<b>\n- From the correlation matrix we find out the tags that occur most with the highest rated tags.<br>\n- Mystery, Police, Supernatural, Psychological and Thriller tags in animes occur together. There are 5 animes with all of these tags.  <br>\n- Psychological animes are also found to occur with Horror tags. 71 such Animes.<br>\n- Shounen Animes also have Action, Sports and Adventure tags.<br> \n-  Shounen, Action and Adventure tags are there in 369 Animes whereas Shounen and Sports occur in 296 Animes. <br>\n- Vampire Animes mostly occur along with the Supernatural tag, 91 such Animes.    <br>\n- A lot of Harem Animes have Echhi, Romance and School tags as well, 78 such Animes with all 3 tags.  <br>\n    ","811b0637":"<b>\n- Original Animes constitute of over 36% animes that are created, they have a median rating of 5.26 and have a huge median absolute deviation of 3.23. <br>\n- In comparison to Original Animes, manga adaptation constitute of 28.21% of the total animes but have a much higher median rating of 6.87, Manga adaptations are more consistent in their performance with a low MAD of 0.93. <br>\n- Light Novel adaptations, have the highes median rating of 7.115, and is even more consistent than Manga adaptations with a MAD of ~0.69. Though it constitutes of only 5.55 % Animes. <br>","02b88e7d":"<b>\n- All of our numerical features combines explain 17.2% variance in the dependent variable. Lets create a new feature using members and evaluate the performance...","48b9b02d":"<b>\n- The model significantly improves when we use exponent of members, including with number of tags and total episodes it now<br> `explains 86.3% of variance` in our dependent variable. Seeing that the p-values of all the independent variables is 0.00 < 0.05 we reject our null hypothesis and we conclude that all these three features have signifiant linear relationships with our dependent variable Overall Ratings.<\/b> <br>\n\nPS: This is not out final model.","ebeaee73":"<b>\n- Have data for 16610 Animes created by 585 different Studios from of 43 Genres.<br>\n- The Animes in the data set are from the year 1917 - 2021 (un-released animes are here as well).  <br>","dd268d40":"<b>\n- Max density i.e. ~30% of ratings at 0 and around 7.<br>\n- Majority of the animes have the rating of either 0 or lie in the 6-8 range.<br>\n- Very few animes in the 2-4 rating range and very few animes with ratings higher than 8.5<br>\n- Mean of the ratings is 4.56 and the median is 6.11 suggesting that there must be many outliers in the lower rating range, many animes could have 0 rating as well. <br>\n- Standard deviation is 3.12 but since it has been calculated using mean we should use MAD. <br>\n- Median Absolute deviation is 1.63, suggesting that most of the anime ratings lie in the 4.5 - 7.5 range.","112cb607":"# <b> ANIMES DATA","c8b7ad83":"<b>\n- The top 10 highest rated tags we have show approximately the same median values which lie around 7.    <br>\n- Myster Animes on an average have a rating of 7.14 making it the highest rated genre, followed by<br>\n   Thriller: 7.12, <br>\n   Psychological: 7.1 & <br>\n   Josei: 7.0. <br>\n- Mystery animes have a MAD of 0.96.<br>\n- Thriller animes have the highest variability with MAD of1.35 in their ratings: from the boxplot, overall rating of most of the thriller<br> animes lies between ~ 6-7.7 <br>\n- Psychological animes also have a high MAD of 1.25.<br>\n- Police tag seems to have a high inter quartile range showing high variability as well.<br>\n- Harem animes have the least IQR animes with overall ratings lying around 7.","91a6d5b2":"<b>\n- We can see that over time the number of Anime productions have increased, maximum animes were created in 2017 (according to the  sample we have).<br>\n- We have plotted a `5 year moving average` of the mean ratings, the most prominent peaks can be seen at 1948, 1988 and 2010.\n  These three 5 year bands seems to be the best years of anime so far ----> (1944 - 1948), (1984 - 1988), (2006 - 2010) <br>\n- Post 1955, a gradual upward trend has been observed in the Anime ratings. <br>\n\n    \nNote: Data we have includes unreleased Animes from year 2021 hence there is a sharp decline after 2020.","12f6ff4e":"<b>\n- Most of the kids animes are produced by unknown studios.","b3f2e498":"<b>\nWell, that concludes this notebook. We found out many insights from the data and we can even use them to even model the rating of an anime. It would be cool to explore approaches where using some data about an anime we could predict how well it is going to do in the ratings.<br><br>\n\nThis is all for now, do give this notebook an upvote if you liked it :)","d34fe860":"<b>\n- 5790 Animes have been created with the Comedy tag making it the tag with maximum Animes.<br>\n- 39 Animes have been created with Yuri tag making it the tag with least Animes.   ","7ee8a02e":"<b>\n- R2 = 0.127 i.e. Number of tags explain 12.7% variance in the dependent variable. The p-value for the t-test is 0.00 < 0.05 suggesting that it has a significant linear relationship with our dependent variable --> overall rating.    "}}