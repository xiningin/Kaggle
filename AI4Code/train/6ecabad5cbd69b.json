{"cell_type":{"72f12685":"code","d6c18147":"code","271ec084":"code","b6c6770e":"code","db043964":"code","325bb744":"code","40ee99bf":"code","c7ffac85":"code","624dfa27":"code","4608626e":"code","86808158":"code","87b1bf38":"code","753c7df8":"code","e71d8046":"code","7aa1e62a":"code","40f8ff6b":"code","287749d0":"code","425ae985":"code","74377a31":"code","262c8977":"code","dbc299d2":"code","4cf1877f":"code","dd9444ac":"code","be850f1b":"code","f74796c2":"code","68495096":"code","9d130a02":"code","1d1ce29a":"code","88d48a63":"code","64027475":"code","cb772def":"code","ffa44c49":"code","5b20fde4":"code","1f0bdc62":"code","de3bc8bb":"code","5e2ba6cf":"code","ddd3be6f":"code","815eabec":"code","5b8da068":"code","b9c5b5f2":"code","b1fa48f6":"code","6d5f18eb":"code","b415dcc9":"code","13ea20cf":"code","56f788e9":"code","86d69dde":"code","77102443":"markdown","ffdd7714":"markdown","e8527bc8":"markdown","fa348937":"markdown","6cb3957a":"markdown","18258da4":"markdown","d0c14a23":"markdown","6e32f104":"markdown","263cc592":"markdown","c8394c5a":"markdown","3b8915b3":"markdown","5f9eb9fb":"markdown","dfaa21eb":"markdown","4bcba90d":"markdown","946c0a48":"markdown","84a0ddf0":"markdown","ba6a22a4":"markdown","720ec54e":"markdown","f79af4e3":"markdown","41919e90":"markdown","f71311d1":"markdown","1ff41845":"markdown","f59176c7":"markdown","3c876e68":"markdown","a2c4098b":"markdown"},"source":{"72f12685":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn import preprocessing\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression","d6c18147":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","271ec084":"train.head()","b6c6770e":"train.isnull().sum()","db043964":"sns.heatmap(train.isnull(), yticklabels = False, cbar=False, cmap='viridis')","325bb744":"sns.set_style('whitegrid')\nsns.countplot(x='Survived', data=train)","40ee99bf":"sns.set_style('whitegrid')\nsns.countplot(x='Survived', hue='Sex', data=train, palette='RdBu_r')","c7ffac85":"sns.set_style('whitegrid')\nsns.countplot(x='Survived', hue='Pclass', data=train, palette='rainbow')","624dfa27":"sns.distplot(train['Age'].dropna(), kde = False, color = 'darkred', bins=40)","4608626e":"train['Age'].hist(bins=30, color='darkred', alpha=0.3)","86808158":"sns.countplot(x='SibSp', data=train)","87b1bf38":"train['Fare'].hist(bins=40, color='green', figsize=(8,4))","753c7df8":"plt.figure(figsize = (12,7))\nsns.boxplot(x='Pclass', y='Age', data=train, palette='winter')","e71d8046":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        \n        if Pclass == 1 :\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","7aa1e62a":"train['Age'] = train[['Age', 'Pclass']].apply(impute_age, axis=1)","40f8ff6b":"sns.heatmap(train.isnull(), yticklabels = False, cbar=False, cmap='viridis')","287749d0":"train.drop('Cabin', axis=1, inplace=True)","425ae985":"sns.heatmap(train.isnull(), yticklabels = False, cbar=False, cmap='viridis')","74377a31":"train.info()","262c8977":"pd.get_dummies(train['Embarked'], drop_first=True).head()","dbc299d2":"embark = pd.get_dummies(train['Embarked'], drop_first = True)\nsex = pd.get_dummies(train['Sex'], drop_first = True)","4cf1877f":"train.drop(['Sex', 'Embarked', 'Name', 'Ticket'], axis = 1, inplace = True)","dd9444ac":"train.head()","be850f1b":"train = pd.concat([train, sex, embark], axis = 1)","f74796c2":"train.head()","68495096":"from catboost import CatBoostClassifier","9d130a02":"# Making Features and Target Seperate from dataset\nX = train.drop(['Survived'], axis=1)\nY = train['Survived']\n\n# Taking 80% data for training\nxtrain,xtest,ytrain,ytest = train_test_split(X,Y,train_size=0.8,random_state=42)","1d1ce29a":"model_LR = clf =CatBoostClassifier(eval_metric='Accuracy',use_best_model=True,random_seed=42)\n\n#now just to make the model to fit the data\nclf.fit(xtrain,ytrain,eval_set=(xtest,ytest), early_stopping_rounds=50)","88d48a63":"model_LR.score(xtest, ytest)","64027475":"# Import Student Data \ndata = pd.read_csv('\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv')","cb772def":"#Seeing the first 10 Data\ndata.head()","ffa44c49":"data.describe()","5b20fde4":"data.columns","1f0bdc62":"data.nunique()","de3bc8bb":"data['gender'].unique()","5e2ba6cf":"#Finding the number of null values \ndata.isnull().sum()","ddd3be6f":"# Remove the Irrelevent Columns\nstudent = data.drop(['race\/ethnicity','parental level of education'], axis=1)","815eabec":"student.head()","5b8da068":"# Finding the correlation of student data\ncorrelation = student.corr()","b9c5b5f2":"# Visualizing the correlation of the student data\nsns.heatmap(correlation, xticklabels = correlation.columns, yticklabels = correlation.columns, annot = True)","b1fa48f6":"sns.pairplot(student)","6d5f18eb":"sns.relplot(x = 'math score', y = 'reading score', hue = 'gender', data = student)","b415dcc9":"sns.distplot(student['math score'])","13ea20cf":"sns.distplot(student['writing score'])","56f788e9":"sns.distplot(student['writing score'], bins=5)","86d69dde":"sns.catplot(x='math score', kind='box', data = student)","77102443":"**Distplot draw a histogram and fit a kernel density estimate (KDE).**","ffdd7714":"**Now let's check that heat map again!**","e8527bc8":"# Data Cleaning\n\n**We want to fill in missing age data instead of just dropping the missing age data rows. One way to do this is by filling in the mean age of all the passengers (imputation). However we can be smarter about this and check the average age by passenger class. For example:**","fa348937":"# Applying CatBoostClassifier","6cb3957a":"# Titanic Data","18258da4":"# Import Libraries","d0c14a23":"# Converting Categorical Features\n\n**We'll need to convert categorical features to dummy variables using pandas! Otherwise our machine learning algorithm won't be able to directly take in those features as inputs.**","6e32f104":"# Exploratory Data Analysis","263cc592":"# Cleaning the data","c8394c5a":"**Great! Let's go ahead and drop the Cabin column and the row in Embarked that is NaN.**","3b8915b3":"**Now apply that function!**","5f9eb9fb":"# Relationship Analysis","dfaa21eb":"**We can see the wealthier passengers in the higher classes tend to be older, which makes sense. We'll use these average age values to impute based on Pclass for Age.**","4bcba90d":"**replot shows relationship between variables.**","946c0a48":"**Finding if there is NULL value**","84a0ddf0":"# EDA\n\n*Exploratory Data Analysis (EDA) is an approach\/philosophy for data analysis that employs a variety of techniques (mostly graphical) to.*","ba6a22a4":"**Seeing Unique Values in gender column**","720ec54e":"**Finding Unique Value in each Columns(nunique ---> Number of Unique)**","f79af4e3":"# Students Performance in Exams\n","41919e90":"We will be performing EDA in two dataset **Titanic Dataset** and **Student Performance in Exam Dataset**.","f71311d1":"<img src =\"https:\/\/www.statistika.co\/images\/services\/Exploratory%20Data%20Analysis%20-%20EDA%201000x468.jpg\"\/>","1ff41845":"**In descriptive statistics, a box plot or boxplot is a method for graphically depicting groups of numerical data through their quartiles.**","f59176c7":"**Descriptive statistics include those that summarize the central tendency, dispersion and shape of a dataset\u2019s distribution,**","3c876e68":"\n\nRoughly 20 percent of the Age data is missing. The proportion of Age missing is likely small enough for reasonable replacement with some form of imputation. Looking at the Cabin column, it looks like we are just missing too much of that data to do something useful with at a basic level. We'll probably drop this later, or change it to another feature like \"Cabin Known: 1 or 0\"\n\nLet's continue on by visualizing some more of the data! Check out the video for full explanations over these plots, this code is just to serve as reference.\n","a2c4098b":"**Pairplot plot pairwise relationships in a dataset. By default, this function will create a grid of Axes such that each numeric variable in data will by shared in the y-axis across a single row and in the x-axis across a single column. The diagonal Axes are treated differently, drawing a plot to show the univariate distribution of the data for the variable in that column.**"}}