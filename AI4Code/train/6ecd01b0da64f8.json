{"cell_type":{"f8570aea":"code","8f8c9ad1":"code","0633d418":"code","f1da28fc":"code","142d04df":"code","3eee0845":"code","085b5d7d":"code","b38c605b":"code","c9e43e65":"code","e84abf0c":"code","f4824e98":"code","4294f83c":"code","40639529":"code","63869b78":"code","bcdc6de2":"code","db9cfbb4":"code","45d81430":"code","ebaddd9f":"code","1ddb638c":"code","754d7ce1":"code","5449c405":"code","add0606f":"code","6c9dc730":"code","ca7667d8":"markdown","c6c1c16a":"markdown","c9b4bc20":"markdown","77bff321":"markdown","32c2ff59":"markdown","846099c5":"markdown","6bc026f5":"markdown","eae2cd2a":"markdown","649b01e2":"markdown","e27bb2f3":"markdown","43a29418":"markdown","6b11f28f":"markdown","bef90458":"markdown","48f6821e":"markdown"},"source":{"f8570aea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f8c9ad1":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans, AgglomerativeClustering\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler, Normalizer, MaxAbsScaler\nfrom scipy.cluster.hierarchy import linkage, dendrogram, fcluster\nfrom sklearn.manifold import TSNE\nfrom sklearn.decomposition import PCA, NMF\nfrom mpl_toolkits.mplot3d import Axes3D","0633d418":"wheats = pd.read_csv(\"\/kaggle\/input\/seed-from-uci\/Seed_Data.csv\")\nwheats = wheats.rename(columns={\"target\":\"label\"})\nwheats.head()","f1da28fc":"#Data Visualization - Label - countplot\nfig,ax =  plt.subplots(figsize = (15 , 5))\nsns.countplot(y = 'label' , data = wheats)\nplt.show()","142d04df":"#Data Visualozation - Label vs other continuous variables - box plot\nfig, axs = plt.subplots(ncols = 4, nrows = 2, figsize=(15,8),sharex=True)\nfor axi,col_name in zip(axs.flat,list(wheats.columns)):\n    sns.boxplot(x=\"label\",y=col_name,data=wheats,ax=axi)\nfig.delaxes(ax = axs[1,3])\nfig.tight_layout()\nfig.show()","3eee0845":"#Data Visualozation - Label vs other continuous variables - swarmplot\nfig, axs = plt.subplots(ncols = 4, nrows = 2, figsize=(15,8),sharex=True)\nfor axi,col_name in zip(axs.flat,list(wheats.columns)):\n    sns.swarmplot(x=\"label\",y=col_name,data=wheats,ax=axi)\nfig.delaxes(ax = axs[1,3])\nfig.tight_layout()\nfig.show()","085b5d7d":"#Data Visualization - Continuous Variables - pairplot\nsns.pairplot(data=wheats,hue=\"label\")","b38c605b":"#Data Visualization - Continuous Variables - heatmap (Area, Compactness, Assymetry Coefficient)\nsns.heatmap(wheats[list(wheats.columns[:-1])].corr(),annot=True,cmap=\"coolwarm\")\nplt.show()","c9e43e65":"#KMeans Clustering - Optimal number of clusters\ninertia = []\nfor c in range(1,7):\n    model = KMeans(n_clusters=c)\n    model.fit(wheats[list(wheats.columns[:-1])])\n    inertia.append(model.inertia_)\nfig, ax = plt.subplots(figsize = (10 ,4))\nax.plot(np.arange(1 , 7) , inertia , marker=\"o\")\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('Inertia')\nfig.show()","e84abf0c":"#KMeans Clustering - Validation\nmodel = KMeans(n_clusters = 3)\nmodel.fit(wheats[list(wheats.columns[:-1])])\nlabel_pred = model.predict(wheats[list(wheats.columns[:-1])])\nwheat_preds = pd.DataFrame({\"label_act\":list(wheats[\"label\"]),\"label_kmeans\":list(label_pred)})\npd.crosstab(wheat_preds.label_act,wheat_preds.label_kmeans)","f4824e98":"#k-Means Clustering - Standardisation\nscaler = StandardScaler()\nkmeans = KMeans(n_clusters=3)\npipeline = make_pipeline(scaler,kmeans)\npipeline.fit(wheats[list(wheats.columns[:-1])])\nlabels_pred_std = pipeline.predict(wheats[list(wheats.columns[:-1])])\nwheat_preds[\"labels_kmeans_std\"] = labels_pred_std\npd.crosstab(wheat_preds.label_act,wheat_preds.labels_kmeans_std)","4294f83c":"samples = np.array(wheats[list(wheats.columns[:-1])])\nsamples.shape","40639529":"#Agglomerative Clustering - Fathest point distance - Dendrogram\nfig, ax = plt.subplots(figsize=(18,8))\nmergings = linkage(samples,method=\"complete\")\ndendrogram(mergings,\n           labels=list(wheats[\"label\"]),\n           leaf_rotation=90,\n           leaf_font_size=6,\n)\nax.plot(ax.get_xbound(), [8,8],'--', c='k')\nfig.show()","63869b78":"#Agglomerative Clustering - Farthest point distance - Clustering\nagg_clus = AgglomerativeClustering(n_clusters = 3,linkage=\"complete\")\nwheat_preds[\"labels_agg\"] = agg_clus.fit_predict(wheats[list(wheats.columns[:-1])])\npd.crosstab(wheat_preds.label_act,wheat_preds.labels_agg)","bcdc6de2":"#Agglomerative Clustering - Fathest point distance - Clustering - Standardisation\nstd = StandardScaler()\nagg_clus = AgglomerativeClustering(n_clusters = 3,linkage=\"complete\")\npipeline = make_pipeline(std,agg_clus)\npipeline.fit(wheats[list(wheats.columns[:-1])])\nwheat_preds[\"labels_agg_std\"] = pipeline.fit_predict(wheats[list(wheats.columns[:-1])])\npd.crosstab(wheat_preds.label_act,wheat_preds.labels_agg_std)","db9cfbb4":"#Agglomerative Clustering - Fathest point distance - Clustering - Standardisation\nstd = StandardScaler()\nagg_clus = AgglomerativeClustering(n_clusters = 3,linkage=\"ward\",affinity=\"euclidean\")\npipeline = make_pipeline(std,agg_clus)\npipeline.fit(wheats[list(wheats.columns[:-1])])\nwheat_preds[\"labels_agg_std_ward\"] = pipeline.fit_predict(wheats[list(wheats.columns[:-1])])\npd.crosstab(wheat_preds.label_act,wheat_preds.labels_agg_std_ward)","45d81430":"#t-SNE visualization - KMeans post standardisation\nmodel = TSNE(learning_rate = 200)\ntsne_features = model.fit_transform(samples)\nsns.scatterplot(tsne_features[:,0],tsne_features[:,1],hue=list(wheat_preds.labels_kmeans_std),palette=\"Set2\",s=100)\nplt.legend(loc=\"lower right\")\nplt.show()","ebaddd9f":"#t-SNE visualization - Agglomerative Clustering post standardisation\nmodel = TSNE(learning_rate = 200)\ntsne_features = model.fit_transform(samples)\nsns.scatterplot(tsne_features[:,0],tsne_features[:,1],hue=list(wheat_preds.labels_agg_std_ward),palette=\"Set2\",s=100)\nplt.legend(loc=\"lower right\")\nplt.show()","1ddb638c":"#PCA - Explained Variance\nscaler = StandardScaler()\npca = PCA()\npipeline = make_pipeline(scaler,pca)\npipeline.fit(wheats[list(wheats.columns[:-1])])\nfeatures = range(pca.n_components_)\nsns.barplot(x=np.arange(0,7), y=pca.explained_variance_,palette=\"Blues\")\nplt.xlabel('PCA feature')\nplt.ylabel('variance')\nplt.xticks(features)\nplt.show()","754d7ce1":"#PCA - Two components - Agglomerative Clustering post standardisation\npca_features = pipeline.transform(wheats[list(wheats.columns[:-1])])\nsns.scatterplot(pca_features[:,0],pca_features[:,1],hue=list(wheat_preds.labels_agg_std_ward),palette=\"copper\",s=100)\nplt.show()","5449c405":"#PCA - Three components - K Means Clustering post standardisation\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111, projection='3d')\nax.scatter(pca_features[:,0],pca_features[:,1],pca_features[:,2],c=list(wheat_preds.labels_kmeans_std),alpha=0.6)\nfig.show()","add0606f":"#NMF - Interpretability\nmodel = NMF(n_components = 2,max_iter=1000)\nnmf_features = model.fit_transform(wheats[list(wheats.columns[:-1])])\ncomponents_df = pd.DataFrame(model.components_,columns=list(wheats.columns[:-1]))\ncomponents_df","6c9dc730":"#NMF - Visualization\nnmf = NMF(n_components = 2,max_iter=1000)\nnorm_features = nmf.fit_transform(wheats[list(wheats.columns[:-1])])\nsns.scatterplot(norm_features[:,0],norm_features[:,1],hue=list(wheat_preds.labels_agg_std_ward),palette=\"Set2\",alpha=0.6,s=100)\nplt.show()","ca7667d8":"From the above graphs we can see that there is a good segregation between variables. But many variables have a similar distribution in terms of labels. We can use techniques like PCA to reduce dimensions without losing information","c6c1c16a":"We can also use NMF to reduce the dimensions. The components in NMF are interpretable unlike in PCA\n\n# Non-negative Matrix Factorization (NMF)","c9b4bc20":"From the above heatmap, we can tell that only assymetry coefficient is different from other variables.\n\n# K-Means Clustering","77bff321":"After standardisation, 193 samples are grouped correctly compared to 188 without standardisation\n\n# Hierarchical Clustering - Agglomerative","32c2ff59":"184 obs are correctly clustered -  Improvement from 169 without standardisation.\n\nNow, let's try different distance calculation method","846099c5":"We are able to segregate 188 out of 210 correctly. To improve this we can standardize data so that mean is 0 and variance is 1","6bc026f5":"We can also reduce the number of features using PCA and then visualize\n\n# Principal Component Analysis","eae2cd2a":"Huge improvement over previous iterations. 195 are correctly grouped\n\nWe were not able to visualize K-Means or Agglomerative clustering properly because of >3 dimensions. So let's try t-SNE visualization\n\n# t-SNE Visualization","649b01e2":"Only 169 are correctly segregated (0 in labels_agg is 3,1 is 2 and 2 is 1). Let's try with standardization","e27bb2f3":"We can see from the above graph that Area, Perimeter, Kernel Length, Kernel Width and Kernel groove length have similar distributions\n\nLet's check using a correlation heat map","43a29418":"We can see that one feature explains most of the variance and first three features explains almost 99% of the variance in the data","6b11f28f":"3 is the optimal number of clusters. After 3, the reduction in inertia is insignificant","bef90458":"First component is related to area, perimeter. Second component is related to assymetry coefficent. We can also confirm from the pairplots and heatmap in the beginning that assymetry coefficient is different from other variables","48f6821e":"I worked on this after completing the Datacamp course - 'Unsupervised Learning in Python'. All the techniques explained in that course are tried out in this notebook"}}