{"cell_type":{"c4889bad":"code","65dc8238":"code","1c7fcbd0":"code","83c95222":"code","15cb4f13":"code","01366745":"code","9791d394":"code","cd5a8748":"code","c65b80f9":"code","f55d3eda":"code","27fd3e5e":"markdown","f39ba2d5":"markdown","16d5a55c":"markdown","f081e3e4":"markdown","3140bab4":"markdown","86b465f9":"markdown"},"source":{"c4889bad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n#from datetime import datetime","65dc8238":"df = pd.read_csv(\"\/kaggle\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv\")\ndf.info()","1c7fcbd0":"df.head()","83c95222":"\ndf['Timestamp'] = pd.to_datetime(df['Timestamp'], unit='s')\n\ndf[\"time\"] = df['Timestamp'].dt.date # better display\ndf.head()\n","15cb4f13":"df.corr()","01366745":"df.plot(kind='line', x='time', y='Weighted_Price',alpha = 0.4,color = 'blue',grid= True, xlabel = \"Time\", ylabel = \"Weighted Price\", title = \"Weighted Price Over The Years\", label = \"weighted price\") # weighted price over the years\nplt.legend()\nplt.show()","9791d394":"df.plot(kind='line', x='Open', y='Close',alpha = 0.4,color = 'blue',grid= True, xlabel = \"Open Prices\", ylabel = \"Close Prices\", title = \"Correlation Between Open And Close\", label = \"corrolation line\")\nplt.legend()\nplt.show()","cd5a8748":"volume_BTC = df[\"Volume_(BTC)\"]\nvolume_Curreny = df[\"Volume_(Currency)\"]\n\nplt.subplot(2,1,1)\nplt.plot(df.time, volume_BTC, label = \"volume\",color = \"green\")\nplt.ylabel(\"Volume BTC\")\nplt.subplot(2,1,2)\nplt.plot(df.time, volume_Curreny, label = \"volume\",color = \"yellow\")\nplt.ylabel(\"Volume Curreny\")","c65b80f9":"df[\"year\"] = df[\"Timestamp\"].dt.year\n#df.Timestamp[]\n\n\n#df.yearr.apply(pd.value_counts).plot(kind=\"bar\", subplots = True)  #for str 's ??????\n\ndf.year.plot(kind = \"hist\", color = \"green\", bins = 50, figsize  =(16,16), alpha = 0.8, title  =\"Annual Frequency of Transactions\",label = \"frequency of transactions\")\nplt.legend()\n","f55d3eda":"print(\"mean of opens:\",df.Open.mean())\nprint(\"mean of closes:\",df.Close.mean())\nprint(\"mean of Weighted prices:\",df.Weighted_Price.mean())\nprint(\"mean of highes:\",df.High.mean())","27fd3e5e":"**Annual Frequency of Transactions**","f39ba2d5":"**Weighted Price Over The Years**","16d5a55c":"**Preparation**","f081e3e4":"I don't know what they mean exactly :D","3140bab4":"**Correlation Between Open And Close Prices**","86b465f9":"**Volume BTC and Volume Currency Comparison**"}}