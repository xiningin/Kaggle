{"cell_type":{"3cfbf8ec":"code","845d72a3":"code","81d37412":"code","e6717b94":"code","9bb7184d":"code","832709ba":"code","a474fa52":"code","883c4f7a":"code","3a2e8da4":"code","c9c6ad0e":"code","114ec304":"code","6af13e8c":"code","2ade5296":"code","94dbb930":"code","598111cf":"code","645dc5b4":"code","7a55fea2":"code","cd316bc0":"code","6366ce6b":"code","b4b32726":"code","e1bf182e":"code","889915fe":"code","13b92ed0":"code","a1c21780":"code","6d8cda95":"code","5262aad9":"code","9a86cdc0":"code","99c29a0e":"code","a86a6ed8":"code","ab3a7c6f":"code","dc002263":"code","48a5ef8e":"code","0bf0ad07":"code","87ec4263":"code","22cd501a":"code","19ebd03b":"code","59f469cf":"code","f681352b":"code","8df6b2f3":"code","590cc532":"code","443bf364":"code","f43d5ca2":"code","4b3d9f6a":"code","a55a71a7":"code","e890ea18":"code","2bd6469a":"code","5b2dab42":"code","bf6d921e":"code","7e49d294":"code","79076166":"code","feebeca9":"code","32eb86ef":"code","8780cab7":"code","4c6f1586":"code","7469b61f":"markdown","f1b78679":"markdown","6ac2d553":"markdown"},"source":{"3cfbf8ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n!pip install pyreadr\nimport seaborn as sns\nimport pyreadr\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","845d72a3":"df = pd.read_csv('\/kaggle\/input\/data3001-genes\/top20genes_01.csv')","81d37412":"test_df_full = pyreadr.read_r('\/kaggle\/input\/data3001-genes\/t_aggregate_covid_cd8_bcells.rds')\ntest_df_full = test_df_full[None]","e6717b94":"df.head()","9bb7184d":"df.drop('Unnamed: 0', axis=1, inplace=True)","832709ba":"df = df.transpose()\ndf['healthy_or_covid'] = df.index\ndf['healthy_or_covid'] = df['healthy_or_covid'].str.replace('_.*', '', regex=True)\ndf['healthy_or_covid'] = df['healthy_or_covid'].apply(lambda x: 1 if x == \"covid\" else 0)\ndf.columns = df.loc['gene']\ndf.rename(columns={0: 'healthy_or_covid'}, inplace=True)\ntry:\n    df.drop('gene', inplace=True)\nexcept: \n    print('Already dropped')","a474fa52":"X = df.drop('healthy_or_covid', axis=1)\ny = df['healthy_or_covid']","883c4f7a":"X.head()","3a2e8da4":"X = X.astype('float')\ndf = df.astype('float')","c9c6ad0e":"# Increase the size of the heatmap.\nplt.figure(figsize=(16, 6))\n# Store heatmap object in a variable to easily access it when you want to include more features (such as title).\n# Set the range of values to be displayed on the colormap from -1 to 1, and set the annotation to True to display the correlation values on the heatmap.\nheatmap = sns.heatmap(df.corr(), vmin=-1, vmax=1, annot=True)\n# Give a title to the heatmap. Pad defines the distance of the title from the top of the heatmap.\nheatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12);","114ec304":"# Import library for VIF\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\ndef calc_vif(X):\n\n    # Calculating VIF\n    vif = pd.DataFrame()\n    vif[\"variables\"] = X.columns\n    vif[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n\n    return(vif)\n\ncalc_vif(df)","6af13e8c":"X.index","2ade5296":"test_df = test_df_full[['healthy_01', 'healthy_07', 'covid_01', 'covid_08']]","94dbb930":"test_df_t = test_df.transpose()\ntest_df_t['healthy_or_covid'] = test_df_t.index\ntest_df_t['healthy_or_covid'] = test_df_t['healthy_or_covid'].str.replace('_.*', '', regex=True)\ntest_df_t['healthy_or_covid'] = test_df_t['healthy_or_covid'].apply(lambda x: 1 if x == \"covid\" else 0)","598111cf":"test_df_t","645dc5b4":"X_test = test_df_t[X.columns]\ny_test = test_df_t['healthy_or_covid']","7a55fea2":"from sklearn.metrics import SCORERS\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.model_selection import LeaveOneOut\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold","cd316bc0":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\nX_train = X\ny_train = y","6366ce6b":"# X_train_lasso = X.drop(columns=['HMHA1', 'MT-ND6'], axis=1)\n# X_test_lasso = X_test.drop(columns=['HMHA1', 'MT-ND6'], axis=1)","b4b32726":"lasso_selected = LogisticRegression(C=5, penalty='l1', solver='liblinear', random_state=42)\nlasso_selected.fit(X_train, y_train)\ny_pred_lasso = lasso_selected.predict(X_test)","e1bf182e":"# y_pred_lasso = lasso.predict(X_test)\nprint(classification_report(y_pred_lasso, y_test))","889915fe":"# cv = LeaveOneOut()\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\nfor a,b in cv.split(X_train, y_train):\n    print(\"Train: \" + str(a) + \" Test: \" + str(b)) \nlasso = LogisticRegression(C=5, penalty='l1', solver='liblinear', random_state=42)\nscores = cross_val_score(lasso, X_train, y_train, scoring='f1', cv=cv, n_jobs=-1)\nprint('f1: %.3f (%.3f)' % (np.mean(scores), np.std(scores)))","13b92ed0":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import f1_score\n# from scipy.stats import loguniform, randint\n# cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n# lasso = LogisticRegression(penalty='l1', solver='liblinear', random_state=42)\n# space = {}\n# space['C'] = randint(1e-5, 10)\n# search = RandomizedSearchCV(lasso, space, n_iter=5, scoring='f1', n_jobs=-1, cv=cv, random_state=1)\n# result = search.fit(X_train, y_train)\n# print('Best Score: %s' % result.best_score_)\n# print('Best Hyperparameters: %s' % result.best_params_)","a1c21780":"# Final Model\nlasso.fit(X_train, y_train)\ny_pred_lasso_final = lasso.predict(X_test)","6d8cda95":"print(f1_score(y_pred_lasso_final, y_test))","5262aad9":"import shap\nshap.initjs()","9a86cdc0":"lasso_features = []\nfor a, b in zip(X_train.columns, lasso.coef_[0]):\n    if b != 0:\n        lasso_features.append(a)\n        \nX_train_lasso = X_train[lasso_features]\nX_test_lasso = X_test[lasso_features]","99c29a0e":"# Increase the size of the heatmap.\nplt.figure(figsize=(16, 6))\n# Store heatmap object in a variable to easily access it when you want to include more features (such as title).\n# Set the range of values to be displayed on the colormap from -1 to 1, and set the annotation to True to display the correlation values on the heatmap.\nheatmap = sns.heatmap(X_train_lasso.corr(), vmin=-1, vmax=1, annot=True)\n# Give a title to the heatmap. Pad defines the distance of the title from the top of the heatmap.\nheatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12);","a86a6ed8":"# X_train_lasso = X_train_lasso.drop('STAT1', axis=1)\n# X_test_lasso = X_test_lasso.drop('STAT1', axis=1)","ab3a7c6f":"plt.barh(lasso_features, list(x for x in lasso.coef_[0] if x != 0))","dc002263":"lasso_new = LogisticRegression(C=5, penalty='l1', solver='liblinear', random_state=42)\nlasso_new.fit(X_train_lasso, y_train)\ny_pred_lasso_final = lasso_new.predict(X_test_lasso)\nprint(f1_score(y_pred_lasso_final, y_test))","48a5ef8e":"masker = shap.maskers.Independent(data = X_test_lasso)\nexplainer = shap.LinearExplainer(lasso_new, masker)\nshap_values = explainer.shap_values(X_test_lasso)\nshap.summary_plot(shap_values, features=X_test_lasso, feature_names=X_test_lasso.columns, plot_type='bar')","0bf0ad07":"from sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n# generate a no skill prediction (majority class)\nns_probs = [0 for _ in range(len(y_test))]\n# fit a model\n# predict probabilities\nlasso_probs = lasso_new.predict_proba(X_test_lasso)\n# keep probabilities for the positive outcome only\nlasso_probs = lasso_probs[:, 1]\n# calculate scores\nns_auc = roc_auc_score(y_test, ns_probs)\nlr_auc = roc_auc_score(y_test, lasso_probs)\n# summarize scores\nprint('No Skill: ROC AUC=%.3f' % (ns_auc))\nprint('Logistic: ROC AUC=%.3f' % (lr_auc))\n# calculate roc curves\nns_fpr, ns_tpr, _ = roc_curve(y_test, ns_probs)\nlr_fpr, lr_tpr, _ = roc_curve(y_test, lasso_probs)\n# plot the roc curve for the model\nplt.plot(ns_fpr, ns_tpr, linestyle='--', label='No Skill')\nplt.plot(lr_fpr, lr_tpr, marker='.', label='Logistic')\n# axis labels\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n# show the legend\nplt.legend()\n# show the plot\nplt.show()","87ec4263":"# shap.plots.force(explainer.expected_value, shap_values[3], feature_names=lasso_features)","22cd501a":"# a-","19ebd03b":"import xgboost as xgb","59f469cf":"param_dist = {'objective': 'binary:logistic', 'eval_metric': 'auc'}","f681352b":"clf = xgb.XGBClassifier(**param_dist)\nclf.fit(X_train, y_train)","8df6b2f3":"y_pred = clf.predict(X_test)","590cc532":"print(classification_report(y_test, y_pred))","443bf364":"# features = []\n# for n in range(len(selected)):\n#     if clf.feature_importances_[n] > 0:\n#         features.append((selected[n], clf.feature_importances_[n]))\n        \n# pd.DataFrame(features, columns=['Feature', 'Importance']).sort_values(by='Importance', ascending=False)","f43d5ca2":"clf.predict_proba(X_test)","4b3d9f6a":"def xgb_f1(y, t, threshold=0.5):\n    t = t.get_label()\n    y_bin = (y > threshold).astype(int) # works for both type(y) == <class 'numpy.ndarray'> and type(y) == <class 'pandas.core.series.Series'>\n    return 'f1',f1_score(t,y_bin)\n\n# cv = LeaveOneOut()\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\nclf = xgb.XGBClassifier(verbosity=0, objective='binary:logistic', eval_metric=xgb_f1)\nparam_grid = {\n    'max_depth': range(1, 20),\n    'learning_rate': [0.001, 0.01, 0.1, 0.2, 0.3],\n    'subsample': [0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    'alpha': [0, 1e-5, 1e-3, 0.1, 1],\n    'min_child_weight': [0.1, 0.2, 0.3, 0.4, 0.5, 1.0, 3.0, 5.0, 7.0],\n    'n_estimators': [100]\n}\n\nsearch = RandomizedSearchCV(clf, param_grid, n_iter=10, scoring='f1', n_jobs=-1, cv=cv, random_state=1)\nresult = search.fit(X_train, y_train)\nprint('Best Score: %s' % result.best_score_)\nprint('Best Hyperparameters: %s' % result.best_params_)","a55a71a7":"params = result.best_params_","e890ea18":"# cv = LeaveOneOut()\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\nfor a,b in cv.split(X_train, y_train):\n    print(\"Train: \" + str(a) + \" Test: \" + str(b)) \nclf = xgb.XGBClassifier(**params)\nscores = cross_val_score(clf, X_train, y_train, scoring='f1', cv=cv, n_jobs=-1)\nprint('f1: %.3f (%.3f)' % (np.mean(scores), np.std(scores)))","2bd6469a":"clf = xgb.XGBClassifier(**params, verbosity=0, eval_metric=xgb_f1)\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)","5b2dab42":"clf.predict_proba(X_test)","bf6d921e":"print(f1_score(y_test, y_pred))","7e49d294":"features = []\nfor a,b in zip(X_train.columns, clf.feature_importances_):\n    if b > 0:\n        features.append(a)","79076166":"features","feebeca9":"X_train_xgb = X_train[features]\nX_test_xgb = X_test[features]","32eb86ef":"clf = xgb.XGBClassifier(**params, verbosity=0, eval_metric=xgb_f1)\nclf.fit(X_train_xgb, y_train)\ny_pred = clf.predict(X_test_xgb)","8780cab7":"xgb.plot_importance(clf)","4c6f1586":"# masker = shap.maskers.Independent(data = X_train_selected)\nclf_explainer = shap.TreeExplainer(clf)\nshap_values_clf = clf_explainer.shap_values(X_train_xgb)\nshap.summary_plot(shap_values_clf, feature_names=features, plot_type='bar')","7469b61f":"# XGBoost Model Building","f1b78679":"# Data Processing & Transformation","6ac2d553":"# LASSO Model"}}