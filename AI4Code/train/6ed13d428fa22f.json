{"cell_type":{"445d4085":"code","6e956ece":"code","58e0e356":"code","303e0287":"code","05e66e45":"code","ab510203":"code","ede74d9c":"code","dfcabd5e":"code","964f0c05":"code","03b21f97":"code","4cdf92ab":"code","f171372d":"code","afe58b11":"code","5c3e0fe2":"code","fa1bcba0":"code","279424ec":"code","c4d42d5f":"code","1489e82a":"code","d310d63f":"code","94be9d2d":"markdown","17d04860":"markdown","7610bef4":"markdown","d29b7e12":"markdown","cb2faad2":"markdown","d4948b41":"markdown","4711f7bd":"markdown","04177831":"markdown","582eb56c":"markdown","88a8c657":"markdown","3f580ad7":"markdown","3a097136":"markdown","66846169":"markdown","c008d584":"markdown","67bed19b":"markdown","18e922ac":"markdown","de81898c":"markdown","7e4c8ac7":"markdown","793a6674":"markdown","872e62ad":"markdown","d2294bdd":"markdown","33e7ae8e":"markdown","b5ebaad1":"markdown","3be0adb5":"markdown","68684e7d":"markdown","d7879ab1":"markdown","7c495297":"markdown","358c4945":"markdown","b5a31547":"markdown","94d54052":"markdown","299df69c":"markdown","113cc9b4":"markdown","e7b96692":"markdown","58766366":"markdown"},"source":{"445d4085":"import pandas as pd\n\nimport matplotlib.animation as animation\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\nimport plotly.express as px\n\nfrom IPython.display import HTML\n\nfrom ipywidgets import interact","6e956ece":"pd.options.display.max_columns = 500\npd.options.display.max_rows = 100","58e0e356":"color_map = {\n    'home': 'blue',\n    'away': 'red',\n    'football': 'yellow'\n}","303e0287":"# Reference Data\ndf_games = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/games.csv')\ndf_plays = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/plays.csv')\ndf_players = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/players.csv')\n\n# Tracking Data\nseasons = [2018, 2019, 2020]\ntracking_dfs = [pd.read_csv(f'..\/input\/nfl-big-data-bowl-2022\/tracking{szn}.csv') for szn in seasons]\ndf_tracking = pd.concat(tracking_dfs)\n\n# Scouting Data\ndf_scouting = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv')","05e66e45":"# Calculate the Expected Points based on kickoff return start yardline\ndf_nflfastr = pd.DataFrame()\nfor szn in seasons:  \n    #low_memory=False eliminates a warning\n    szn_df = pd.read_csv('https:\/\/github.com\/nflverse\/nflfastR-data\/blob\/master\/data\/' \\\n                         'play_by_play_' + str(szn) + '.csv.gz?raw=True',\n                         compression='gzip', low_memory=False)\n\n    #sort=True eliminates a warning and alphabetically sorts columns\n    df_nflfastr = df_nflfastr.append(szn_df, sort=True)\n\ndf_ep = df_nflfastr[\n    (df_nflfastr.drive_start_transition == 'KICKOFF') & (df_nflfastr.down == 1)\n].groupby(['game_id', 'drive']).agg({\n    'posteam': 'first',\n    'drive_ended_with_score': 'max',\n    'drive_start_transition': 'first',\n    'drive_end_transition': 'first',\n    'extra_point_result': 'last',\n    'two_point_conv_result': 'last',\n    'field_goal_result': 'last',\n    'ep': 'first',\n    'drive_start_yard_line': 'first',\n    'yardline_100': 'first'\n}).reset_index()","ab510203":"def fetch_play(**kwargs):\n    # Get a random play\n    plays = df_plays.copy()\n    for k, v in kwargs.items():\n        plays = plays[plays[k].isin(v)]\n        \n    play = plays.sample(n=1)\n\n    # Merge game data\n    # play = play.merge(df_games, on='gameId')\n\n    # Merge tracking data\n    play = play.merge(df_tracking, on=['gameId', 'playId'])[[\n        'x', 'y', 'frameId', 'team', 'playDescription'\n    ]]\n    \n    return play","ede74d9c":"def draw_field():\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=(17, 9.1))\n    ax.add_patch(rect)\n\n    plt.plot([0, 0, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 120],\n             [0, 53.3, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 0, 53.3],\n             color='white')\n      \n    for i in range(20, 110, 10):\n        val = i\n        if i > 50:\n            val = 120 - i\n        plt.text(i, 5, str(val - 10),\n                 horizontalalignment='center',\n                 fontsize=20,\n                 color='white')\n        plt.text(i - .5, 53.3 - 5, str(val - 10),\n                 horizontalalignment='center',\n                 fontsize=20, \n                 color='white', rotation=180)\n        \n    hashes = range(11, 110)\n    for i in range(11, 110):\n        ax.plot([i, i], [0.4, 0.7], color='white')\n        ax.plot([i, i], [53.0, 52.5], color='white')\n        ax.plot([i, i], [22.91, 23.57], color='white')\n        ax.plot([i, i], [29.73, 30.39], color='white')\n        \n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    \n    return fig, ax\n\n# draw_field()\n# plt.show()","dfcabd5e":"class PlayAnimation:\n    def __init__(self, play):\n        self.play = play\n        self.title = play.iloc[0].playDescription\n\n    def animate(self, i):\n        df_frame = play[play.frameId == i]\n        self.scat.set_offsets([(dff[1].x, dff[1].y) for dff in df_frame.iterrows()])\n        \n        \n    def draw_play_html(self):\n        self.fig, self.ax = draw_field()\n        \n        self.ax.set_title(self.title)\n        \n        # Set the first frame\n        first = self.play[self.play.frameId == 1]\n        self.scat = self.ax.scatter(first.x, first.y, c=first.team.apply(lambda t: color_map[t]), zorder=5)\n\n        ani = animation.FuncAnimation(self.fig, self.animate, frames=self.play.frameId.unique())\n        \n        return HTML(ani.to_jshtml())","964f0c05":"# play = fetch_play(specialTeamsPlayType=['Kickoff'], specialTeamsResult=['Return'])\n# html = PlayAnimation(play).draw_play_html()\n# display(html)\n# plt.close()","03b21f97":"df_tb = df_plays.copy()\ndf_tb = df_tb[(df_tb.specialTeamsPlayType == 'Kickoff')]\nkickoffs = df_tb.shape[0]\nprint(f'Kickoffs: {kickoffs}')\n\ntouchbacks = df_tb.groupby('specialTeamsResult').playId.count()['Touchback']\nprint(f'Touchbacks: {touchbacks}')\n\nprint(f'{(touchbacks \/ kickoffs * 100) : .2f}%')","4cdf92ab":"df_rt = df_plays.copy()\ndf_rt = df_rt[(df_rt.specialTeamsPlayType == 'Kickoff')]\nkickoffs = df_rt.shape[0]\nprint(f'Kickoffs: {kickoffs}')\n\nreturns = df_rt.groupby('specialTeamsResult').playId.count()['Return']\nprint(f'Returns: {returns}')\n\nprint(f'{(returns \/ kickoffs * 100) : .2f}%')","f171372d":"def expected_points_scatter():\n    fig = px.scatter(\n        df_ep, x='yardline_100', y='ep', \n        trendline='ols', trendline_color_override='red', \n        # trendline_options=dict(log_x=True),\n        # trendline_scope='overall', \n        # marginal_x='histogram', marginal_y='histogram',\n        # color='posteam',\n        labels={\n            'ep': 'Expected Points on Subsequent Drive',\n            'yardline_100': 'Yards to EZ After Return'\n        }\n    )\n    \n    fig.add_vrect(x0=76, x1=100, line_color='yellow', fillcolor='yellow', opacity=.2, \n                  annotation_text='RIT-F', annotation_position='top left', annotation_font_size=20)\n    \n    fig.update_layout(\n        plot_bgcolor='darkgreen',\n        yaxis_showgrid=False,\n        yaxis_zeroline=False,\n        xaxis_dtick=10,\n    )\n    \n    fig.show()","afe58b11":"expected_points_scatter()","5c3e0fe2":"# Make a copy of the plays dataframe\ndf_ritf = df_plays.copy()\n\n# Filter for kickoffs\ndf_ritf = df_ritf[(df_ritf.specialTeamsPlayType == 'Kickoff') & (df_ritf.specialTeamsResult == 'Return')]","fa1bcba0":"# Calculate returns that didn't make it back past the receiving 25 yardline\ndf_ritf['ritf'] = (df_ritf.yardlineNumber + df_ritf.playResult) > 75\n\n# Merge the games dataframe\ndf_ritf = df_ritf.merge(df_games, on='gameId')\n\n# Detrmine the kicking and receiving teams\ndf_ritf['kickingTeam'] = df_ritf.possessionTeam\ndf_ritf['receivingTeam'] = df_ritf.apply(\n    lambda r: r.homeTeamAbbr if r.homeTeamAbbr != r.kickingTeam else r.visitorTeamAbbr, axis=1\n)\n\ndf_ritf = df_ritf[['gameId', 'playId', 'kickingTeam', 'receivingTeam', 'ritf', 'season', 'week']]","279424ec":"# Aggregate number of kicks and number of returns inside twenty-five (ritf)\ndf_kicking_ritf = df_ritf.groupby([\n    'kickingTeam', 'season' #, 'week'\n]).agg({\n    'playId': 'count', \n    'ritf': 'sum'\n}).rename(columns={\n    'playId': 'Kicks',\n    'ritf': 'RIT-F_Kicks'\n})\n\n# Calculate the rate of returns inside twenty-five\ndf_kicking_ritf['RIT-F_Rate'] = df_kicking_ritf['RIT-F_Kicks'] \/ df_kicking_ritf['Kicks'] * -1\n\n# Calculate a rating based normalizing values between 1 and 32\ndf_kicking_ritf['Rank'] = df_kicking_ritf['RIT-F_Rate'].groupby('season').rank()\n\n# Set the ritf rate back to a positive value\ndf_kicking_ritf['RIT-F_Rate'] = df_kicking_ritf['RIT-F_Rate'].abs()","c4d42d5f":"# Display ratings by season\n@interact(season=seasons)\ndef kicking_ritf(season=seasons):\n    df = df_kicking_ritf[\n        df_kicking_ritf.index.get_level_values('season') == season\n    ].sort_values('Rank', ascending=True)\n    df = df.style.set_properties(\n        **{'font-weight': 'bold', 'background-color': 'yellow'},\n        precision=1,\n        subset=['Rank'], \n    ).format('{:.0f}', subset=['Rank'])\n    display(df)","1489e82a":"# Aggregate number of kickoff receptions and number of returns inside twenty-five (ritf)\ndf_rec_ritf = df_ritf.groupby([\n    'receivingTeam', 'season' #, 'week'\n]).agg({\n    'playId': 'count', \n    'ritf': 'sum'\n}).rename(columns={\n    'playId': 'Returns',\n    'ritf': 'RIT-F_Returns'\n})\n\n# Calculate the rate of returns inside twenty-five\n# Multiply by -1 as a lower rate is better for returning and we want that reflected in the rating\ndf_rec_ritf['RIT-F_Rate'] = df_rec_ritf['RIT-F_Returns'] \/ df_rec_ritf['Returns']\n\n# Calculate a rating based normalizing values between 1 and 32\ndf_rec_ritf['Rank'] = df_rec_ritf['RIT-F_Rate'].groupby('season').rank()","d310d63f":"# Display ratings by season\n@interact(season=seasons)\ndef receiving_ritf(season=seasons):\n    df = df_rec_ritf[\n        df_rec_ritf.index.get_level_values('season') == season\n    ].sort_values('Rank', ascending=True)\n    df = df.style.set_properties(\n        **{'font-weight': 'bold', 'background-color': 'yellow'},\n        precision=1,\n        subset=['Rank'], \n    ).format('{:.0f}', subset=['Rank'])\n    display(df)","94be9d2d":"# Return Inside Twenty-Five Rate (RIT-F Rate)\nHow often do kickoff returns end up inside the receiving 25 yardline (RIT-F Rate)?\n\nWhy does it matter?\n\n\n**Hypothesis**\n\n*Kicking Team* - Having a high RIT-F Rate would be ideal. That means you are keeping opponents inside their own 25 yardline on kickoffs, which is better than kicking the ball through the endzone for a touchback.\n\n*Receiving Team* - Having a low RIT-F Rate would be ideal. That means you are making it past your own 25 yardline which is better than if you had taken a touchback.\n\n**In Summary**\n\nIt tells a team whether or not it would be ideal to take a touchback (if possible) against a particular opponents kicking or receiving team.","17d04860":"### 2020 Kicking Team RIT-F Rate Season Rankings","7610bef4":"## Expected Points Graphing","d29b7e12":"![image.png](attachment:8919d1fe-90a0-4212-8e0d-432c91c34a19.png)","cb2faad2":"## Return Frequency","d4948b41":"# Expected Points\nThe advantage for either the kicking or receiving team comes in the form of Expected Points*. \n\nIt perhaps comes as no surprise, the Expected Points for the receiving team, on their drive following the return, diminish the further the receiving team ends up from their scoring endzone (EZ).\n\n<sub>* Expected Point calculation from https:\/\/www.nflfastr.com\/index.html<\/sub>","4711f7bd":"![image.png](attachment:346b9947-f1da-473b-a8f4-0d5259ce9d3c.png)","04177831":"# Kicking Team RIT-F Rate\nKicking teams will want the number of returns inside the 25 yardline to be as high as possible. This minimizes the opposing team's Expected Points.\n\n\n$ RIT$-$F Rate = \\frac{No. Returns Inside 25}{No. Kicks} $","582eb56c":"# Utilizing Team RIT-F Data","88a8c657":"![image.png](attachment:1a3f28f7-2392-4b5f-a9f1-1d76ce407849.png)","3f580ad7":"# Appendix","3a097136":"## Touchback Frequency","66846169":"### Identify RIT-F Plays","c008d584":"### Publicly Available External Data\nUse the nflfastR data to calculate the expected points based on the starting yardline of the drive following the kickoff\n\nSource: https:\/\/www.nflfastr.com\/index.html","67bed19b":"## Returns Inside Twenty-Five and Rating","18e922ac":"### Competition Data","de81898c":"### Calculating Kickoff Return Yardline Metrics","7e4c8ac7":"## Read Data\nLoad the csv data into pandas dataframes.","793a6674":"Pandas settings","872e62ad":"![image.png](attachment:5955c656-bc01-472c-b52f-0730cba6fa16.png)","d2294bdd":"\nSo what's the advantage?","33e7ae8e":"# Table of Contents\n* [Visualizing a Kickoff Return](#Visualizing-a-Kickoff-Return)\n* [Expected Points](#Expected-Points)\n* [Kicking Team RIT-F Rate](#Kicking-Team-RIT-F-Rate)\n* [Receiving Team RIT-F Rate](#Receiving-Team-RIT-F-Rate)\n* [Utilizing Team RIT-F Data](#Utilizing-Team-RIT-F-Data)\n\n\n* [Appendix](#Appendix)\n    * [Setup](#Setup)\n    * [Read Data](#Read-Data)\n    * [Animating Plays](#Animating-Plays)\n        * [Show a random kickoff return](#Show-a-random-kickoff-return)\n    * [Expected Points Graphing](#Expected-Points-Graphing)\n    * [Returns Inside Twenty-Five and Rating](#Returns-Inside-Twenty-Five-and-Rating)","b5ebaad1":"Import libraries","3be0adb5":"Colors","68684e7d":"# Visualizing a Kickoff Return\n60.86% of the time, kickoffs end up going for a touchback and the receiving team's starting ball position becomes the 25 yardline.* However, when a return attempt is made  (37.24% of kickoffs*), there is an opportunity for either the receiving team or the kicking team to push an advantage in their own direction.\n\n<sub>* 2018, 2019, & 2020 seasons<\/sub> ","d7879ab1":"### Calculate Kicking RIT-F Rank","7c495297":"*For an actual kickoff return animation see [Show a random kickoff return](#Show-a-random-kickoff-return) in appendix. Pre-loading an animation will exceed Kaggle's notebook memory limit, so a screenshot has been provided below showing a typical kickoff formation.*","358c4945":"### Show a random kickoff return\nUncomment below codeblock to vizualize a random kickoff return. Left this out in order to fall within Kaggle's memory limits.","b5a31547":"# Receiving Team RIT-F Rate\nReceiving teams will want the number of returns inside the 25 yardline to be as low as possible. This maximizes their team's Expected Points.\n\n\n$ RIT$-$F Rate = \\frac{No. Returns Inside 25}{No. Kickoffs Received} $","94d54052":"Great, so now we know which teams are doing better or worse on kickoffs returned. With this data you or your opponent can formulate a strategy.\n\nLet's take a look at what the strategy in the 2020 season should have been for the top and bottom kicking and receiving teams given their RIT-F Rate.\n\n---\n\n**Top Kicking RIT-F Rate** : NO (76%) - 26 of their kickoffs returned, 16 of which ended up inside the 25-yardline.\n- As New Orleans, I would be making sure that I'm not kicking through the endzone. My team is bringing the kick returners down inside the 25-yardline. I want to give them the opportunity to continue doing that.\n- As an opponent, if there is a high chance of the kickoff going into the endzone then I'm going to let that happen. That will give me better field position than attempting to make a return against New Orlean's kicking team.\n\n---\n\n**Bottom Kicking RIT-F Rate** : WAS (8%) - 12 of their kickoffs returned, 1 of which ended up inside the 25-yardline.\n- As Washington, I don't have a lot of faith in my kicking team as it stands. Only 12 of my kickoffs have been returned, probably because I'm having my kicker send the kickoffs into the endzone. I'm going to continue doing that because 11 of the 12 kickoffs that did get returned, the returner made it out past the 25-yardline.\n- As an opponent, I'm returning every kick that I can against Washington. Catch it in the endzone? Return it.\n\n---\n\n**Top Receiving RIT-F Rate** : BAL (23%) - 26 kickoffs returned, only 6 of which ended up inside their own 25-yardline.\n- As Baltimore, return every kick. I'm only getting stopped behind our 25-yardline on 23% of your returns.\n- As an opponent, don't let Baltimore return the ball. Kick it past the endzone and let them take it from their own 25-yardline.\n\n---\n\n**Bottom Receiving RIT-F Rate** : SF (77%) - 26 kickoffs returned, 20 of which ended up inside their own 25-yardline.\n- As San Francisco, I'm going to try to take a touchback. We aren't doing well when returning the ball.\n- As an opponent, I'm going to try to force a return. This will give me a good chance of better field position than a touchback. \n\n---","299df69c":"## Setup","113cc9b4":"## Animating Plays","e7b96692":"### 2020 Receiving Team RIT-F Rate Season Rankings","58766366":"### Calculate Receiving RIT-F Rating"}}