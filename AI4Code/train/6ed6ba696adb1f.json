{"cell_type":{"97c4443c":"code","72ca599e":"code","fcc98daa":"code","11aa10e0":"code","46455f3d":"code","46dca8d3":"code","20708ebc":"code","1ce765c2":"code","ae883191":"code","27008d6f":"code","5280d666":"code","5ecc106f":"code","a89b6f27":"code","edccdf68":"markdown","70a21f61":"markdown","66449bf0":"markdown","602ebd57":"markdown"},"source":{"97c4443c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","72ca599e":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n#combined = pd.concat((train,test), sort=False).reset_index(drop = True) # Imputations will be done on combined dataset\ntrain.head()\n","fcc98daa":"y = train['label']\nX = train.drop(\"label\", axis=1)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size = .25, random_state=0)","11aa10e0":"%%time\nfrom sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=784)\nclf.fit(X_train, y_train)","46455f3d":"%%time\nfrom sklearn.model_selection import cross_val_predict\ny_train_cross_val_est = cross_val_predict(clf, X_train, y_train)","46dca8d3":"from sklearn.metrics import f1_score\nprint('F1 score for random forest classifier - Train: {}'.format(round(f1_score(y_train, y_train_cross_val_est, average=\"macro\"), 4)))","20708ebc":"%%time\ny_test_cross_val_est = cross_val_predict(clf, X_test, y_test)\nprint('F1 score for random forest classifier - Test: {}'.format(round(f1_score(y_test, y_test_cross_val_est, average=\"macro\"), 4)))","1ce765c2":"%%time\nfrom sklearn.decomposition import PCA\npca = PCA()\npca.fit(train)\ncumsum = np.cumsum(pca.explained_variance_ratio_)\ndimensions = np.argmax(cumsum >= 0.95) + 1\ndimensions","ae883191":"%%time\npca = PCA(n_components = 154)\nX_after_pca = pca.fit_transform(X_train)\nX_test_after_pca = pca.fit_transform(X_test)","27008d6f":"%%time\nclf_after_pca = RandomForestClassifier(n_estimators=154)\nclf_after_pca.fit(X_after_pca, y_train)","5280d666":"%%time\ny_train_cross_val_est_after_pca = cross_val_predict(clf_after_pca, X_after_pca, y_train)\nprint('F1 score for random forest classifier after PCA - Train: {}'.format(round(f1_score(y_train, y_train_cross_val_est_after_pca, average=\"macro\"), 4)))","5ecc106f":"%%time\ny_test_cross_val_est_after_pca = cross_val_predict(clf_after_pca, X_test_after_pca, y_test)\nprint('F1 score for random forest classifier - Test: {}'.format(round(f1_score(y_test, y_test_cross_val_est_after_pca, average=\"macro\"), 4)))","a89b6f27":"results = clf_after_pca.predict(X_test_after_pca)\n\nnp.savetxt('results.csv', \n           np.c_[range(1,len(X_test_after_pca)+1),results], \n           delimiter=',', \n           header = 'ImageId,Label', \n           comments = '', \n           fmt='%d')","edccdf68":"**PCA - Dimensionality Reduction**","70a21f61":"**Read the data**","66449bf0":"**Random Forest Classifier after PCA Dimensionality Reduction**","602ebd57":"**Random Forest Classifier**"}}