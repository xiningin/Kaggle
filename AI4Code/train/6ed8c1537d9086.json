{"cell_type":{"5a0222fd":"code","f81f9c52":"code","dc71c885":"code","71c5607a":"code","00cb6efd":"code","a90d710d":"code","52a8c42d":"code","8c82fc0c":"code","d3a07076":"code","8de8b06b":"code","beba1d64":"code","fc5e63f3":"code","00fd13ba":"code","ae40ff6c":"code","4f271aa5":"code","f426129a":"code","b6aea5e5":"code","23d05346":"code","4b8c8c6b":"code","e1fd0c12":"code","7ad0bb11":"code","230f601a":"code","4a9ae8ae":"code","4b1b11ba":"code","073f3c9f":"code","90bf05d8":"code","e67a5ffe":"code","f3691d54":"code","ee77891e":"code","3cbc8609":"code","25535ef5":"code","8a8888ab":"code","5d00c3d9":"markdown","53ed6350":"markdown","efdfbdcb":"markdown","6e632caf":"markdown","e7be7e94":"markdown","c7653e96":"markdown","57d48014":"markdown","6849caa1":"markdown","56dae5b6":"markdown","f3342117":"markdown","b6b0f417":"markdown","fd3dfa8a":"markdown","880e986d":"markdown","3a23f02b":"markdown","3292b76d":"markdown","56de53e4":"markdown","7803490d":"markdown","a0bbabfc":"markdown"},"source":{"5a0222fd":"from __future__ import print_function, division\nimport os\nimport torch\nimport pandas as pd\nfrom skimage import io, transform\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport rasterio as rio\nfrom rasterio import features\nfrom pathlib import Path\nimport pathlib\nimport geopandas as gpd\nfrom descartes import PolygonPatch\nfrom PIL import Image\nimport itertools\nimport re\n\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms, utils\n\n\n# Ignore warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nplt.ion()   # interactive mode","f81f9c52":"%matplotlib inline ","dc71c885":"mpl.rcParams['figure.dpi'] = 300 #increase plot resolution\nmpl.rcParams['figure.dpi']","71c5607a":"train_dir = Path('..\/input\/spacenet-7-multitemporal-urban-development\/SN7_buildings_train')\ntest_dir = Path('..\/input\/spacenet-7-multitemporal-urban-development\/SN7_buildings_test_public')\nsample_dir = Path('..\/input\/spacenet-7-multitemporal-urban-development\/SN7_buildings_train_sample')","00cb6efd":"output_path = Path.cwd()\noutput_csv_path = output_path\/'output_csvs\/'\nPath(output_csv_path).mkdir(parents=True, exist_ok=True)","a90d710d":"test_raster_path = Path('..\/input\/spacenet-7-multitemporal-urban-development\/SN7_buildings_train_sample\/sample\/L15-0506E-1204N_2027_3374_13\/images_masked\/global_monthly_2018_01_mosaic_L15-0506E-1204N_2027_3374_13.tif')\ntest_raster_path_24 = Path('..\/input\/spacenet-7-multitemporal-urban-development\/SN7_buildings_train_sample\/sample\/L15-0506E-1204N_2027_3374_13\/images_masked\/global_monthly_2019_12_mosaic_L15-0506E-1204N_2027_3374_13.tif')\ntest_geojson_path = Path('..\/input\/spacenet-7-multitemporal-urban-development\/SN7_buildings_train_sample\/sample\/L15-0506E-1204N_2027_3374_13\/labels_match_pix\/global_monthly_2018_01_mosaic_L15-0506E-1204N_2027_3374_13_Buildings.geojson')\ntest_geojson_path_24 = Path('..\/input\/spacenet-7-multitemporal-urban-development\/SN7_buildings_train_sample\/sample\/L15-0506E-1204N_2027_3374_13\/labels_match_pix\/global_monthly_2019_12_mosaic_L15-0506E-1204N_2027_3374_13_Buildings.geojson')\ntest_gdf = gpd.read_file(test_geojson_path)\ntest_gdf_24 = gpd.read_file(test_geojson_path_24)","52a8c42d":"test_gdf.set_index('Id',inplace=True)\ntest_gdf_24.set_index('Id',inplace=True)\n\ntest_gdf.sort_index(inplace=True)\ntest_gdf_24.sort_index(inplace=True)","8c82fc0c":"def plot_gdf(gdf,fill=False,ax=None,linewidth=0.2):\n    if ax is None:\n        _,ax = plt.subplots(1,figsize=(3, 3))\n        \n    for geom in gdf['geometry']:\n        if fill:\n            patch = PolygonPatch(geom,linewidth=linewidth,color='fuchsia')\n            ax.add_patch(patch)\n        else:\n            ax.plot(*geom.exterior.xy,linewidth=linewidth)\n    return(ax)","d3a07076":"plot_gdf(test_gdf);","8de8b06b":"def plot_sat(path,gdf=None, fill=False,linewidth=0.2):\n    f, ax = plt.subplots(1,figsize=(3, 3))\n    f.tight_layout()\n    \n    r = rio.open(path)\n    r = r.read()\n    r = r.transpose((1,2,0,))\n    ax.imshow(r)\n    \n    if gdf is not None:\n        plot_gdf(gdf,fill=fill,ax=ax,linewidth=linewidth)\n        \n    return(ax)","beba1d64":"plot_sat(path=test_raster_path);","fc5e63f3":"plot_sat(path=test_raster_path,gdf=test_gdf);","00fd13ba":"plot_sat(path=test_raster_path,gdf=test_gdf,fill=True);\nplot_sat(path=test_raster_path_24,gdf=test_gdf_24,fill=True);","ae40ff6c":"def rasterize_geojson(geojson_path,reference_raster_path):\n    gdf = gpd.read_file(geojson_path)\n    with rio.open(reference_raster_path) as raster:\n        r = raster.read(1)\n        \n        mask = image = features.rasterize(((polygon, 255) for polygon in gdf['geometry']),out_shape=r.shape)\n        \n    return mask","4f271aa5":"def rasterize_gdf(gdf,reference_raster_path):\n    \n    with rio.open(reference_raster_path) as raster:\n        r = raster.read(1)\n        \n        mask = image = features.rasterize(((polygon, 255) for polygon in gdf['geometry']),out_shape=r.shape)\n        \n    return mask","f426129a":"test_mask = rasterize_geojson(test_geojson_path,test_raster_path)\ntest_mask_24 = rasterize_geojson(test_geojson_path_24,test_raster_path_24)","b6aea5e5":"np.unique(test_mask)","23d05346":"test_mask_24.shape","4b8c8c6b":"mpl.rcParams['figure.dpi'] = 300\n_,axs = plt.subplots(1,2,figsize=(10,10))\n\nmasks = [test_mask,test_mask_24]\ntitles = ['month1','month24']\n\nfor i,ax in enumerate(axs):\n    ax.set_title(titles[i])\n    ax.imshow(masks[i]);","e1fd0c12":"def gdf_difference(gdf1, gdf2, get_dates=False):\n    try:\n        gdf1.reset_index(inplace=True,drop=True)\n    except:\n        pass\n    try:\n        gdf2.reset_index(inplace=True,drop=True)\n    except:\n        pass\n    \n    \n    len_1 = len(gdf1)\n    len_2 = len(gdf2)\n    \n    len_diff = abs(len_2-len_1)\n    \n    if len_2 > len_1:\n        start_index = len_2-len_diff\n        diff_gdf = gdf2[start_index:].copy()\n    else:\n        start_index = len_1-len_diff\n        diff_gdf = gdf1[start_index:].copy()\n\n    diff_gdf.reset_index(inplace=True,drop=True)\n        \n    return diff_gdf","7ad0bb11":"len(test_gdf)","230f601a":"diff_gdf = gdf_difference(test_gdf,test_gdf_24)\ndiff_gdf","4a9ae8ae":"test_mask_diff = rasterize_gdf(diff_gdf,test_raster_path)","4b1b11ba":"mpl.rcParams['figure.dpi'] = 300\n_,axs = plt.subplots(1,3,figsize=(10,10))\n\nmasks = [test_mask,test_mask_24,test_mask_diff]\ntitles = ['month 1', 'month 24', 'difference']\n\nfor i,ax in enumerate(axs):\n    ax.set_title(titles[i])\n    ax.imshow(masks[i]);","073f3c9f":"class chip_creator():   \n    def __init__(self, chip_dimension=256,raster=False):  \n        self.chip_dimension = chip_dimension\n        self.raster = raster\n        \n    def create_chips(self,image):\n        np_array = self.__read_image(image)\n        # get number of chips per colomn\n        n_rows = (np_array.shape[0] - 1) \/\/ self.chip_dimension + 1\n        # get number of chips per row\n        n_cols = (np_array.shape[1] - 1) \/\/ self.chip_dimension + 1\n        # segment image into chips and return list of chips\n        l = []\n\n        for r in range(n_rows):\n            for c in range(n_cols):\n                start_r_idx = r*self.chip_dimension\n                end_r_idx = start_r_idx + self.chip_dimension\n\n                start_c_idx = c*self.chip_dimension\n                end_c_idx = start_c_idx + self.chip_dimension\n                chip = np_array[start_r_idx:end_r_idx,start_c_idx:end_c_idx]\n                if self.raster:\n                   chip = np.moveaxis(chip,-1,0)\n\n                l.append(chip)\n\n        return np.array(l)\n    \n    def __read_image(self,image):\n        # check whether image is a path or array\n        if isinstance(image,(pathlib.PurePath,str)):\n                with Image.open(image) as img:\n                    # convert image into np array\n                    np_array = np.array(img)\n                return np_array\n            \n        elif isinstance(image,np.ndarray):\n            return image\n        else:\n            raise ValueError(f\"Expected Path or Numpy array received: {type(image)}\")","90bf05d8":"chips_256 = chip_creator(raster=True)","e67a5ffe":"chips_256.create_chips(test_raster_path)[0].shape","f3691d54":"chips_256.raster=False","ee77891e":"chips_256.create_chips(test_raster_path)[0].shape","3cbc8609":"def multiplot_images(list_of_images,ncols=4,dpi=300, raster=False):\n    mpl.rcParams['figure.dpi'] = dpi\n    nrows = (len(list_of_images) - 1) \/\/ ncols + 1\n    fig,axs = plt.subplots(nrows,ncols,figsize=(10,10))\n    \n    fig.tight_layout()\n    \n    for r,ax in enumerate(axs):\n        for c,row in enumerate(ax):\n            # get the current index of the image\n            i = r*ncols + c\n            ax[c].set_title(i)\n            image = list_of_images[i]\n            # if the image is presented in raster format then move the channel axis\n            if raster:\n                image = np.moveaxis(image,0,-1)\n            ax[c].imshow(image);\n","25535ef5":"multiplot_images(chips_256.create_chips(test_raster_path));","8a8888ab":"multiplot_images(chips_256.create_chips(test_mask_diff));","5d00c3d9":"Let's visualize our output masks for month 1 and month 24 from our sample images.","53ed6350":"## Creating Chips from our Satellite Imagery\nNow that we can extract the difference between 2 satellite images, the next step is to split the satellite image to smaller chips. Another thing to note is that some areas have little to know change in them; that is something we need to consider when training our model. \n\nOne thing we can do, is exclude regions with no change at all, however we will have to experiment whether that will actually improve our results or not.","efdfbdcb":"## Plotting GeoDataFrame Polygons","6e632caf":"Let's write couple of helper functions to help us visualize our raster files and vector files.","e7be7e94":"## Rasterizing Polygons","c7653e96":"## Plotting Satellite Image\nThe function below takes in a satellite tif image and plots it. It also has the option to use the previous function that we created to overlay the polygons on top of the image.","57d48014":"Return normally formatted image (rows, columns,channels)","6849caa1":"Let's see what kind of output we get, by getting the difference between our 2 previous geodataframes.","56dae5b6":"Return raster formatted image (channels, rows, columns)","f3342117":"Let's visualize the image chips for the difference mask that we obtained earlier.","b6b0f417":"## Test Path and GeoDataFrame","fd3dfa8a":"## Input Paths","880e986d":"Let's create a helper function to help us plot many images. The raster flag is an option we give to the plotting function in case we are feeding it a list of rasters, in which case we will need to swap the axis of the image channels\/bands.","3a23f02b":"## Getting the Differences between 2 Geodataframes\nNext we are going to create some helper functions to extract the difference from our image polygons. This function will be given 2 geodataframes and it will return a geodataframe containing the differences between the 2 images.\n\nFor more information on getting the geojson difference, check out the following [notebook](https:\/\/www.kaggle.com\/amerii\/augmenting-spacenet-7-sample-data-labels).","3292b76d":"# What Next???\nGreat we now have some amazing helper functions that will make our lives much easier. Let's see how we utilize those helper functions to create our dataset class in our [next notebook](https:\/\/www.kaggle.com\/amerii\/spacenet-7-pytorch-dataset-class-starter)!","56de53e4":"We should now have a numpy array containing only values of 0 and 255. The values equal to 255 represent our target buildling footprint.","7803490d":"Below we create a short helper function that rasterizes our geodataframe","a0bbabfc":"## Output Paths"}}